
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

000119a4 <.init>:
   119a4:	push	{r3, lr}
   119a8:	bl	11f1c <__assert_fail@plt+0x54>
   119ac:	pop	{r3, pc}

Disassembly of section .plt:

000119b0 <pthread_mutex_unlock@plt-0x14>:
   119b0:	push	{lr}		; (str lr, [sp, #-4]!)
   119b4:	ldr	lr, [pc, #4]	; 119c0 <pthread_mutex_unlock@plt-0x4>
   119b8:	add	lr, pc, lr
   119bc:	ldr	pc, [lr, #8]!
   119c0:	andeq	r7, r3, r0, asr #12

000119c4 <pthread_mutex_unlock@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #225280	; 0x37000
   119cc:	ldr	pc, [ip, #1600]!	; 0x640

000119d0 <fstatfs64@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #225280	; 0x37000
   119d8:	ldr	pc, [ip, #1592]!	; 0x638

000119dc <calloc@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #225280	; 0x37000
   119e4:	ldr	pc, [ip, #1584]!	; 0x630

000119e8 <fputs_unlocked@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #225280	; 0x37000
   119f0:	ldr	pc, [ip, #1576]!	; 0x628

000119f4 <wctype@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #225280	; 0x37000
   119fc:	ldr	pc, [ip, #1568]!	; 0x620

00011a00 <raise@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #225280	; 0x37000
   11a08:	ldr	pc, [ip, #1560]!	; 0x618

00011a0c <wcrtomb@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #225280	; 0x37000
   11a14:	ldr	pc, [ip, #1552]!	; 0x610

00011a18 <gmtime_r@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #225280	; 0x37000
   11a20:	ldr	pc, [ip, #1544]!	; 0x608

00011a24 <__getdelim@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #225280	; 0x37000
   11a2c:	ldr	pc, [ip, #1536]!	; 0x600

00011a30 <iswctype@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #225280	; 0x37000
   11a38:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a3c <strcmp@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #225280	; 0x37000
   11a44:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a48 <pthread_mutex_destroy@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #225280	; 0x37000
   11a50:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a54 <mktime@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #225280	; 0x37000
   11a5c:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a60 <fflush@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #225280	; 0x37000
   11a68:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a6c <wcwidth@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #225280	; 0x37000
   11a74:	ldr	pc, [ip, #1488]!	; 0x5d0

00011a78 <memmove@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #225280	; 0x37000
   11a80:	ldr	pc, [ip, #1480]!	; 0x5c8

00011a84 <free@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #225280	; 0x37000
   11a8c:	ldr	pc, [ip, #1472]!	; 0x5c0

00011a90 <pthread_mutex_lock@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #225280	; 0x37000
   11a98:	ldr	pc, [ip, #1464]!	; 0x5b8

00011a9c <ferror@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #225280	; 0x37000
   11aa4:	ldr	pc, [ip, #1456]!	; 0x5b0

00011aa8 <_exit@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #225280	; 0x37000
   11ab0:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ab4 <memcpy@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #225280	; 0x37000
   11abc:	ldr	pc, [ip, #1440]!	; 0x5a0

00011ac0 <pthread_mutex_init@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #225280	; 0x37000
   11ac8:	ldr	pc, [ip, #1432]!	; 0x598

00011acc <__strtoull_internal@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #225280	; 0x37000
   11ad4:	ldr	pc, [ip, #1424]!	; 0x590

00011ad8 <towlower@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #225280	; 0x37000
   11ae0:	ldr	pc, [ip, #1416]!	; 0x588

00011ae4 <mbsinit@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #225280	; 0x37000
   11aec:	ldr	pc, [ip, #1408]!	; 0x580

00011af0 <memcmp@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #225280	; 0x37000
   11af8:	ldr	pc, [ip, #1400]!	; 0x578

00011afc <dcgettext@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #225280	; 0x37000
   11b04:	ldr	pc, [ip, #1392]!	; 0x570

00011b08 <dup2@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #225280	; 0x37000
   11b10:	ldr	pc, [ip, #1384]!	; 0x568

00011b14 <realloc@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #225280	; 0x37000
   11b1c:	ldr	pc, [ip, #1376]!	; 0x560

00011b20 <localtime_r@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #225280	; 0x37000
   11b28:	ldr	pc, [ip, #1368]!	; 0x558

00011b2c <textdomain@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #225280	; 0x37000
   11b34:	ldr	pc, [ip, #1360]!	; 0x550

00011b38 <iswcntrl@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #225280	; 0x37000
   11b40:	ldr	pc, [ip, #1352]!	; 0x548

00011b44 <__fxstatat64@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #225280	; 0x37000
   11b4c:	ldr	pc, [ip, #1344]!	; 0x540

00011b50 <fflush_unlocked@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #225280	; 0x37000
   11b58:	ldr	pc, [ip, #1336]!	; 0x538

00011b5c <iswprint@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #225280	; 0x37000
   11b64:	ldr	pc, [ip, #1328]!	; 0x530

00011b68 <tzset@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #225280	; 0x37000
   11b70:	ldr	pc, [ip, #1320]!	; 0x528

00011b74 <__fxstat64@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #225280	; 0x37000
   11b7c:	ldr	pc, [ip, #1312]!	; 0x520

00011b80 <fwrite@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #225280	; 0x37000
   11b88:	ldr	pc, [ip, #1304]!	; 0x518

00011b8c <lseek64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #225280	; 0x37000
   11b94:	ldr	pc, [ip, #1296]!	; 0x510

00011b98 <__ctype_get_mb_cur_max@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #225280	; 0x37000
   11ba0:	ldr	pc, [ip, #1288]!	; 0x508

00011ba4 <hasmntopt@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #225280	; 0x37000
   11bac:	ldr	pc, [ip, #1280]!	; 0x500

00011bb0 <strcpy@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #225280	; 0x37000
   11bb8:	ldr	pc, [ip, #1272]!	; 0x4f8

00011bbc <__fpending@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #225280	; 0x37000
   11bc4:	ldr	pc, [ip, #1264]!	; 0x4f0

00011bc8 <mbrtowc@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #225280	; 0x37000
   11bd0:	ldr	pc, [ip, #1256]!	; 0x4e8

00011bd4 <error@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #225280	; 0x37000
   11bdc:	ldr	pc, [ip, #1248]!	; 0x4e0

00011be0 <getmntent@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #225280	; 0x37000
   11be8:	ldr	pc, [ip, #1240]!	; 0x4d8

00011bec <fnmatch@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #225280	; 0x37000
   11bf4:	ldr	pc, [ip, #1232]!	; 0x4d0

00011bf8 <open64@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #225280	; 0x37000
   11c00:	ldr	pc, [ip, #1224]!	; 0x4c8

00011c04 <getenv@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #225280	; 0x37000
   11c0c:	ldr	pc, [ip, #1216]!	; 0x4c0

00011c10 <malloc@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #225280	; 0x37000
   11c18:	ldr	pc, [ip, #1208]!	; 0x4b8

00011c1c <__libc_start_main@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #225280	; 0x37000
   11c24:	ldr	pc, [ip, #1200]!	; 0x4b0

00011c28 <strftime@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #225280	; 0x37000
   11c30:	ldr	pc, [ip, #1192]!	; 0x4a8

00011c34 <__freading@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #225280	; 0x37000
   11c3c:	ldr	pc, [ip, #1184]!	; 0x4a0

00011c40 <__ctype_tolower_loc@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #225280	; 0x37000
   11c48:	ldr	pc, [ip, #1176]!	; 0x498

00011c4c <__ctype_toupper_loc@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #225280	; 0x37000
   11c54:	ldr	pc, [ip, #1168]!	; 0x490

00011c58 <__gmon_start__@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #225280	; 0x37000
   11c60:	ldr	pc, [ip, #1160]!	; 0x488

00011c64 <freopen64@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #225280	; 0x37000
   11c6c:	ldr	pc, [ip, #1152]!	; 0x480

00011c70 <getopt_long@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #225280	; 0x37000
   11c78:	ldr	pc, [ip, #1144]!	; 0x478

00011c7c <__ctype_b_loc@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #225280	; 0x37000
   11c84:	ldr	pc, [ip, #1136]!	; 0x470

00011c88 <exit@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #225280	; 0x37000
   11c90:	ldr	pc, [ip, #1128]!	; 0x468

00011c94 <feof@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #225280	; 0x37000
   11c9c:	ldr	pc, [ip, #1120]!	; 0x460

00011ca0 <bcmp@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #225280	; 0x37000
   11ca8:	ldr	pc, [ip, #1112]!	; 0x458

00011cac <strlen@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #225280	; 0x37000
   11cb4:	ldr	pc, [ip, #1104]!	; 0x450

00011cb8 <strchr@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #225280	; 0x37000
   11cc0:	ldr	pc, [ip, #1096]!	; 0x448

00011cc4 <setenv@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #225280	; 0x37000
   11ccc:	ldr	pc, [ip, #1088]!	; 0x440

00011cd0 <openat64@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #225280	; 0x37000
   11cd8:	ldr	pc, [ip, #1080]!	; 0x438

00011cdc <__errno_location@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #225280	; 0x37000
   11ce4:	ldr	pc, [ip, #1072]!	; 0x430

00011ce8 <iswalnum@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #225280	; 0x37000
   11cf0:	ldr	pc, [ip, #1064]!	; 0x428

00011cf4 <__sprintf_chk@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #225280	; 0x37000
   11cfc:	ldr	pc, [ip, #1056]!	; 0x420

00011d00 <__cxa_atexit@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #225280	; 0x37000
   11d08:	ldr	pc, [ip, #1048]!	; 0x418

00011d0c <memset@plt>:
   11d0c:	add	ip, pc, #0, 12
   11d10:	add	ip, ip, #225280	; 0x37000
   11d14:	ldr	pc, [ip, #1040]!	; 0x410

00011d18 <btowc@plt>:
   11d18:	add	ip, pc, #0, 12
   11d1c:	add	ip, ip, #225280	; 0x37000
   11d20:	ldr	pc, [ip, #1032]!	; 0x408

00011d24 <__printf_chk@plt>:
   11d24:	add	ip, pc, #0, 12
   11d28:	add	ip, ip, #225280	; 0x37000
   11d2c:	ldr	pc, [ip, #1024]!	; 0x400

00011d30 <fileno@plt>:
   11d30:	add	ip, pc, #0, 12
   11d34:	add	ip, ip, #225280	; 0x37000
   11d38:	ldr	pc, [ip, #1016]!	; 0x3f8

00011d3c <__fprintf_chk@plt>:
   11d3c:	add	ip, pc, #0, 12
   11d40:	add	ip, ip, #225280	; 0x37000
   11d44:	ldr	pc, [ip, #1008]!	; 0x3f0

00011d48 <memchr@plt>:
   11d48:	add	ip, pc, #0, 12
   11d4c:	add	ip, ip, #225280	; 0x37000
   11d50:	ldr	pc, [ip, #1000]!	; 0x3e8

00011d54 <fclose@plt>:
   11d54:	add	ip, pc, #0, 12
   11d58:	add	ip, ip, #225280	; 0x37000
   11d5c:	ldr	pc, [ip, #992]!	; 0x3e0

00011d60 <fseeko64@plt>:
   11d60:	add	ip, pc, #0, 12
   11d64:	add	ip, ip, #225280	; 0x37000
   11d68:	ldr	pc, [ip, #984]!	; 0x3d8

00011d6c <endmntent@plt>:
   11d6c:	add	ip, pc, #0, 12
   11d70:	add	ip, ip, #225280	; 0x37000
   11d74:	ldr	pc, [ip, #976]!	; 0x3d0

00011d78 <fcntl64@plt>:
   11d78:	add	ip, pc, #0, 12
   11d7c:	add	ip, ip, #225280	; 0x37000
   11d80:	ldr	pc, [ip, #968]!	; 0x3c8

00011d84 <__overflow@plt>:
   11d84:	add	ip, pc, #0, 12
   11d88:	add	ip, ip, #225280	; 0x37000
   11d8c:	ldr	pc, [ip, #960]!	; 0x3c0

00011d90 <setlocale@plt>:
   11d90:	add	ip, pc, #0, 12
   11d94:	add	ip, ip, #225280	; 0x37000
   11d98:	ldr	pc, [ip, #952]!	; 0x3b8

00011d9c <strrchr@plt>:
   11d9c:	add	ip, pc, #0, 12
   11da0:	add	ip, ip, #225280	; 0x37000
   11da4:	ldr	pc, [ip, #944]!	; 0x3b0

00011da8 <nl_langinfo@plt>:
   11da8:	add	ip, pc, #0, 12
   11dac:	add	ip, ip, #225280	; 0x37000
   11db0:	ldr	pc, [ip, #936]!	; 0x3a8

00011db4 <fputc@plt>:
   11db4:	add	ip, pc, #0, 12
   11db8:	add	ip, ip, #225280	; 0x37000
   11dbc:	ldr	pc, [ip, #928]!	; 0x3a0

00011dc0 <sscanf@plt>:
   11dc0:	add	ip, pc, #0, 12
   11dc4:	add	ip, ip, #225280	; 0x37000
   11dc8:	ldr	pc, [ip, #920]!	; 0x398

00011dcc <localeconv@plt>:
   11dcc:	add	ip, pc, #0, 12
   11dd0:	add	ip, ip, #225280	; 0x37000
   11dd4:	ldr	pc, [ip, #912]!	; 0x390

00011dd8 <readdir64@plt>:
   11dd8:	add	ip, pc, #0, 12
   11ddc:	add	ip, ip, #225280	; 0x37000
   11de0:	ldr	pc, [ip, #904]!	; 0x388

00011de4 <fdopendir@plt>:
   11de4:	add	ip, pc, #0, 12
   11de8:	add	ip, ip, #225280	; 0x37000
   11dec:	ldr	pc, [ip, #896]!	; 0x380

00011df0 <timegm@plt>:
   11df0:	add	ip, pc, #0, 12
   11df4:	add	ip, ip, #225280	; 0x37000
   11df8:	ldr	pc, [ip, #888]!	; 0x378

00011dfc <dirfd@plt>:
   11dfc:	add	ip, pc, #0, 12
   11e00:	add	ip, ip, #225280	; 0x37000
   11e04:	ldr	pc, [ip, #880]!	; 0x370

00011e08 <fchdir@plt>:
   11e08:	add	ip, pc, #0, 12
   11e0c:	add	ip, ip, #225280	; 0x37000
   11e10:	ldr	pc, [ip, #872]!	; 0x368

00011e14 <__strtoll_internal@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #225280	; 0x37000
   11e1c:	ldr	pc, [ip, #864]!	; 0x360

00011e20 <fopen64@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #225280	; 0x37000
   11e28:	ldr	pc, [ip, #856]!	; 0x358

00011e2c <qsort@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #225280	; 0x37000
   11e34:	ldr	pc, [ip, #848]!	; 0x350

00011e38 <setmntent@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #225280	; 0x37000
   11e40:	ldr	pc, [ip, #840]!	; 0x348

00011e44 <bindtextdomain@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #225280	; 0x37000
   11e4c:	ldr	pc, [ip, #832]!	; 0x340

00011e50 <getdelim@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #225280	; 0x37000
   11e58:	ldr	pc, [ip, #824]!	; 0x338

00011e5c <__xstat64@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #225280	; 0x37000
   11e64:	ldr	pc, [ip, #816]!	; 0x330

00011e68 <unsetenv@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #225280	; 0x37000
   11e70:	ldr	pc, [ip, #808]!	; 0x328

00011e74 <towupper@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #225280	; 0x37000
   11e7c:	ldr	pc, [ip, #800]!	; 0x320

00011e80 <strncmp@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #225280	; 0x37000
   11e88:	ldr	pc, [ip, #792]!	; 0x318

00011e8c <abort@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #225280	; 0x37000
   11e94:	ldr	pc, [ip, #784]!	; 0x310

00011e98 <getc@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #225280	; 0x37000
   11ea0:	ldr	pc, [ip, #776]!	; 0x308

00011ea4 <close@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #225280	; 0x37000
   11eac:	ldr	pc, [ip, #768]!	; 0x300

00011eb0 <__lxstat64@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #225280	; 0x37000
   11eb8:	ldr	pc, [ip, #760]!	; 0x2f8

00011ebc <closedir@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #225280	; 0x37000
   11ec4:	ldr	pc, [ip, #752]!	; 0x2f0

00011ec8 <__assert_fail@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #225280	; 0x37000
   11ed0:	ldr	pc, [ip, #744]!	; 0x2e8

Disassembly of section .text:

00011ee0 <.text>:
   11ee0:	mov	fp, #0
   11ee4:	mov	lr, #0
   11ee8:	pop	{r1}		; (ldr r1, [sp], #4)
   11eec:	mov	r2, sp
   11ef0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ef4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ef8:	ldr	ip, [pc, #16]	; 11f10 <__assert_fail@plt+0x48>
   11efc:	push	{ip}		; (str ip, [sp, #-4]!)
   11f00:	ldr	r0, [pc, #12]	; 11f14 <__assert_fail@plt+0x4c>
   11f04:	ldr	r3, [pc, #12]	; 11f18 <__assert_fail@plt+0x50>
   11f08:	bl	11c1c <__libc_start_main@plt>
   11f0c:	bl	11e8c <abort@plt>
   11f10:	andeq	r6, r3, r0, lsl #2
   11f14:	andeq	r2, r1, ip, lsr r3
   11f18:	andeq	r6, r3, r0, lsr #1
   11f1c:	ldr	r3, [pc, #20]	; 11f38 <__assert_fail@plt+0x70>
   11f20:	ldr	r2, [pc, #20]	; 11f3c <__assert_fail@plt+0x74>
   11f24:	add	r3, pc, r3
   11f28:	ldr	r2, [r3, r2]
   11f2c:	cmp	r2, #0
   11f30:	bxeq	lr
   11f34:	b	11c58 <__gmon_start__@plt>
   11f38:	ldrdeq	r7, [r3], -r4
   11f3c:			; <UNDEFINED> instruction: 0x000001bc
   11f40:	ldr	r0, [pc, #24]	; 11f60 <__assert_fail@plt+0x98>
   11f44:	ldr	r3, [pc, #24]	; 11f64 <__assert_fail@plt+0x9c>
   11f48:	cmp	r3, r0
   11f4c:	bxeq	lr
   11f50:	ldr	r3, [pc, #16]	; 11f68 <__assert_fail@plt+0xa0>
   11f54:	cmp	r3, #0
   11f58:	bxeq	lr
   11f5c:	bx	r3
   11f60:	andeq	r9, r4, r8, lsl r2
   11f64:	andeq	r9, r4, r8, lsl r2
   11f68:	andeq	r0, r0, r0
   11f6c:	ldr	r0, [pc, #36]	; 11f98 <__assert_fail@plt+0xd0>
   11f70:	ldr	r1, [pc, #36]	; 11f9c <__assert_fail@plt+0xd4>
   11f74:	sub	r1, r1, r0
   11f78:	asr	r1, r1, #2
   11f7c:	add	r1, r1, r1, lsr #31
   11f80:	asrs	r1, r1, #1
   11f84:	bxeq	lr
   11f88:	ldr	r3, [pc, #16]	; 11fa0 <__assert_fail@plt+0xd8>
   11f8c:	cmp	r3, #0
   11f90:	bxeq	lr
   11f94:	bx	r3
   11f98:	andeq	r9, r4, r8, lsl r2
   11f9c:	andeq	r9, r4, r8, lsl r2
   11fa0:	andeq	r0, r0, r0
   11fa4:	push	{r4, lr}
   11fa8:	ldr	r4, [pc, #24]	; 11fc8 <__assert_fail@plt+0x100>
   11fac:	ldrb	r3, [r4]
   11fb0:	cmp	r3, #0
   11fb4:	popne	{r4, pc}
   11fb8:	bl	11f40 <__assert_fail@plt+0x78>
   11fbc:	mov	r3, #1
   11fc0:	strb	r3, [r4]
   11fc4:	pop	{r4, pc}
   11fc8:	andeq	r9, r4, ip, lsr r2
   11fcc:	b	11f6c <__assert_fail@plt+0xa4>
   11fd0:	push	{fp, lr}
   11fd4:	mov	fp, sp
   11fd8:	sub	sp, sp, #56	; 0x38
   11fdc:	mov	r4, r0
   11fe0:	cmp	r0, #0
   11fe4:	bne	122f8 <__assert_fail@plt+0x430>
   11fe8:	movw	r1, #24915	; 0x6153
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	movt	r1, #3
   11ff8:	bl	11afc <dcgettext@plt>
   11ffc:	mov	r1, r0
   12000:	movw	r0, #37556	; 0x92b4
   12004:	movt	r0, #4
   12008:	ldr	r2, [r0]
   1200c:	mov	r0, #1
   12010:	mov	r3, r2
   12014:	bl	11d24 <__printf_chk@plt>
   12018:	movw	r1, #24986	; 0x619a
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	movt	r1, #3
   12028:	bl	11afc <dcgettext@plt>
   1202c:	movw	r7, #37428	; 0x9234
   12030:	movt	r7, #4
   12034:	ldr	r1, [r7]
   12038:	bl	119e8 <fputs_unlocked@plt>
   1203c:	movw	r1, #28851	; 0x70b3
   12040:	mov	r0, #0
   12044:	mov	r2, #5
   12048:	movt	r1, #3
   1204c:	bl	11afc <dcgettext@plt>
   12050:	ldr	r1, [r7]
   12054:	bl	119e8 <fputs_unlocked@plt>
   12058:	movw	r1, #25060	; 0x61e4
   1205c:	mov	r0, #0
   12060:	mov	r2, #5
   12064:	movt	r1, #3
   12068:	bl	11afc <dcgettext@plt>
   1206c:	ldr	r1, [r7]
   12070:	bl	119e8 <fputs_unlocked@plt>
   12074:	movw	r1, #25502	; 0x639e
   12078:	mov	r0, #0
   1207c:	mov	r2, #5
   12080:	movt	r1, #3
   12084:	bl	11afc <dcgettext@plt>
   12088:	ldr	r1, [r7]
   1208c:	bl	119e8 <fputs_unlocked@plt>
   12090:	movw	r1, #26194	; 0x6652
   12094:	mov	r0, #0
   12098:	mov	r2, #5
   1209c:	movt	r1, #3
   120a0:	bl	11afc <dcgettext@plt>
   120a4:	ldr	r1, [r7]
   120a8:	bl	119e8 <fputs_unlocked@plt>
   120ac:	movw	r1, #26613	; 0x67f5
   120b0:	mov	r0, #0
   120b4:	mov	r2, #5
   120b8:	movt	r1, #3
   120bc:	bl	11afc <dcgettext@plt>
   120c0:	ldr	r1, [r7]
   120c4:	bl	119e8 <fputs_unlocked@plt>
   120c8:	movw	r1, #26821	; 0x68c5
   120cc:	mov	r0, #0
   120d0:	mov	r2, #5
   120d4:	movt	r1, #3
   120d8:	bl	11afc <dcgettext@plt>
   120dc:	ldr	r1, [r7]
   120e0:	bl	119e8 <fputs_unlocked@plt>
   120e4:	movw	r1, #27106	; 0x69e2
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	movt	r1, #3
   120f4:	bl	11afc <dcgettext@plt>
   120f8:	ldr	r1, [r7]
   120fc:	bl	119e8 <fputs_unlocked@plt>
   12100:	movw	r1, #27717	; 0x6c45
   12104:	mov	r0, #0
   12108:	mov	r2, #5
   1210c:	movt	r1, #3
   12110:	bl	11afc <dcgettext@plt>
   12114:	ldr	r1, [r7]
   12118:	bl	119e8 <fputs_unlocked@plt>
   1211c:	movw	r1, #27920	; 0x6d10
   12120:	mov	r0, #0
   12124:	mov	r2, #5
   12128:	movt	r1, #3
   1212c:	bl	11afc <dcgettext@plt>
   12130:	ldr	r1, [r7]
   12134:	bl	119e8 <fputs_unlocked@plt>
   12138:	movw	r1, #27965	; 0x6d3d
   1213c:	mov	r0, #0
   12140:	mov	r2, #5
   12144:	movt	r1, #3
   12148:	bl	11afc <dcgettext@plt>
   1214c:	ldr	r1, [r7]
   12150:	bl	119e8 <fputs_unlocked@plt>
   12154:	movw	r1, #28926	; 0x70fe
   12158:	mov	r0, #0
   1215c:	mov	r2, #5
   12160:	movt	r1, #3
   12164:	bl	11afc <dcgettext@plt>
   12168:	movw	r2, #28019	; 0x6d73
   1216c:	mov	r1, r0
   12170:	mov	r0, #1
   12174:	movt	r2, #3
   12178:	bl	11d24 <__printf_chk@plt>
   1217c:	movw	r1, #29149	; 0x71dd
   12180:	mov	r0, #0
   12184:	mov	r2, #5
   12188:	movt	r1, #3
   1218c:	bl	11afc <dcgettext@plt>
   12190:	ldr	r1, [r7]
   12194:	bl	119e8 <fputs_unlocked@plt>
   12198:	movw	r0, #30784	; 0x7840
   1219c:	mov	r2, #48	; 0x30
   121a0:	mov	r6, sp
   121a4:	movw	r5, #28022	; 0x6d76
   121a8:	movt	r0, #3
   121ac:	movt	r5, #3
   121b0:	add	r1, r0, #32
   121b4:	add	r3, r0, #16
   121b8:	vld1.64	{d18-d19}, [r0], r2
   121bc:	vld1.64	{d16-d17}, [r1]
   121c0:	vld1.64	{d20-d21}, [r3]
   121c4:	vldr	d22, [r0]
   121c8:	add	r1, r6, #32
   121cc:	add	r0, r6, #16
   121d0:	vst1.64	{d16-d17}, [r1]
   121d4:	movw	r1, #29361	; 0x72b1
   121d8:	vst1.64	{d20-d21}, [r0]
   121dc:	mov	r0, r6
   121e0:	movt	r1, #3
   121e4:	vst1.64	{d18-d19}, [r0], r2
   121e8:	vstr	d22, [r0]
   121ec:	mov	r0, r5
   121f0:	bl	11a3c <strcmp@plt>
   121f4:	cmp	r0, #0
   121f8:	ldrne	r1, [r6, #8]!
   121fc:	cmpne	r1, #0
   12200:	bne	121ec <__assert_fail@plt+0x324>
   12204:	movw	r1, #29456	; 0x7310
   12208:	ldr	r6, [r6, #4]
   1220c:	mov	r0, #0
   12210:	mov	r2, #5
   12214:	movt	r1, #3
   12218:	bl	11afc <dcgettext@plt>
   1221c:	movw	r2, #28168	; 0x6e08
   12220:	movw	r3, #29479	; 0x7327
   12224:	mov	r1, r0
   12228:	mov	r0, #1
   1222c:	movt	r2, #3
   12230:	movt	r3, #3
   12234:	bl	11d24 <__printf_chk@plt>
   12238:	cmp	r6, #0
   1223c:	mov	r0, #5
   12240:	mov	r1, #0
   12244:	moveq	r6, r5
   12248:	bl	11d90 <setlocale@plt>
   1224c:	cmp	r0, #0
   12250:	beq	12288 <__assert_fail@plt+0x3c0>
   12254:	movw	r1, #29519	; 0x734f
   12258:	mov	r2, #3
   1225c:	movt	r1, #3
   12260:	bl	11e80 <strncmp@plt>
   12264:	cmp	r0, #0
   12268:	beq	12288 <__assert_fail@plt+0x3c0>
   1226c:	movw	r1, #29523	; 0x7353
   12270:	mov	r0, #0
   12274:	mov	r2, #5
   12278:	movt	r1, #3
   1227c:	bl	11afc <dcgettext@plt>
   12280:	ldr	r1, [r7]
   12284:	bl	119e8 <fputs_unlocked@plt>
   12288:	movw	r1, #29594	; 0x739a
   1228c:	mov	r0, #0
   12290:	mov	r2, #5
   12294:	movt	r1, #3
   12298:	bl	11afc <dcgettext@plt>
   1229c:	movw	r2, #29479	; 0x7327
   122a0:	mov	r1, r0
   122a4:	mov	r0, #1
   122a8:	mov	r3, r5
   122ac:	movt	r2, #3
   122b0:	bl	11d24 <__printf_chk@plt>
   122b4:	movw	r1, #29621	; 0x73b5
   122b8:	mov	r0, #0
   122bc:	mov	r2, #5
   122c0:	movt	r1, #3
   122c4:	bl	11afc <dcgettext@plt>
   122c8:	mov	r1, r0
   122cc:	movw	r0, #29389	; 0x72cd
   122d0:	movw	r3, #27716	; 0x6c44
   122d4:	cmp	r6, r5
   122d8:	mov	r2, r6
   122dc:	movt	r0, #3
   122e0:	movt	r3, #3
   122e4:	moveq	r3, r0
   122e8:	mov	r0, #1
   122ec:	bl	11d24 <__printf_chk@plt>
   122f0:	mov	r0, r4
   122f4:	bl	11c88 <exit@plt>
   122f8:	movw	r0, #37416	; 0x9228
   122fc:	movw	r1, #24876	; 0x612c
   12300:	mov	r2, #5
   12304:	movt	r0, #4
   12308:	movt	r1, #3
   1230c:	ldr	r5, [r0]
   12310:	mov	r0, #0
   12314:	bl	11afc <dcgettext@plt>
   12318:	mov	r2, r0
   1231c:	movw	r0, #37556	; 0x92b4
   12320:	mov	r1, #1
   12324:	movt	r0, #4
   12328:	ldr	r3, [r0]
   1232c:	mov	r0, r5
   12330:	bl	11d3c <__fprintf_chk@plt>
   12334:	mov	r0, r4
   12338:	bl	11c88 <exit@plt>
   1233c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12340:	add	fp, sp, #28
   12344:	sub	sp, sp, #4
   12348:	vpush	{d8-d9}
   1234c:	sub	sp, sp, #280	; 0x118
   12350:	mov	r6, r0
   12354:	movw	r0, #31000	; 0x7918
   12358:	mov	r7, #0
   1235c:	mov	r5, r1
   12360:	movt	r0, #3
   12364:	str	r7, [sp, #140]	; 0x8c
   12368:	str	r0, [sp, #136]	; 0x88
   1236c:	ldr	r0, [r1]
   12370:	bl	1d270 <__assert_fail@plt+0xb3a8>
   12374:	movw	r1, #27716	; 0x6c44
   12378:	mov	r0, #6
   1237c:	movt	r1, #3
   12380:	bl	11d90 <setlocale@plt>
   12384:	movw	r4, #28172	; 0x6e0c
   12388:	movw	r1, #28025	; 0x6d79
   1238c:	movt	r4, #3
   12390:	movt	r1, #3
   12394:	mov	r0, r4
   12398:	bl	11e44 <bindtextdomain@plt>
   1239c:	mov	r0, r4
   123a0:	bl	11b2c <textdomain@plt>
   123a4:	movw	r0, #18992	; 0x4a30
   123a8:	movt	r0, #1
   123ac:	bl	36104 <__assert_fail@plt+0x2423c>
   123b0:	bl	15158 <__assert_fail@plt+0x3290>
   123b4:	movw	r1, #37440	; 0x9240
   123b8:	movt	r1, #4
   123bc:	str	r0, [r1]
   123c0:	movw	r0, #28049	; 0x6d91
   123c4:	movt	r0, #3
   123c8:	bl	11c04 <getenv@plt>
   123cc:	movw	r1, #37444	; 0x9244
   123d0:	movw	r2, #37448	; 0x9248
   123d4:	movt	r1, #4
   123d8:	movt	r2, #4
   123dc:	bl	1bbc0 <__assert_fail@plt+0x9cf8>
   123e0:	add	r1, sp, #144	; 0x90
   123e4:	mov	r9, #8
   123e8:	mov	sl, #16
   123ec:	add	r0, r1, #8
   123f0:	str	r0, [sp, #96]	; 0x60
   123f4:	add	r0, r1, #16
   123f8:	str	r0, [sp, #92]	; 0x5c
   123fc:	mov	r0, #1
   12400:	str	r0, [sp, #128]	; 0x80
   12404:	mov	r0, #0
   12408:	str	r0, [sp, #36]	; 0x24
   1240c:	mov	r0, #0
   12410:	str	r0, [sp, #124]	; 0x7c
   12414:	b	1242c <__assert_fail@plt+0x564>
   12418:	movw	r0, #37473	; 0x9261
   1241c:	movt	r0, #4
   12420:	mov	r1, #1
   12424:	mov	r7, r8
   12428:	strb	r1, [r0]
   1242c:	movw	r2, #28063	; 0x6d9f
   12430:	movw	r3, #30288	; 0x7650
   12434:	mvn	r0, #0
   12438:	mov	r1, r5
   1243c:	mov	r8, r7
   12440:	str	r0, [sp, #144]	; 0x90
   12444:	add	r0, sp, #144	; 0x90
   12448:	movt	r2, #3
   1244c:	movt	r3, #3
   12450:	str	r0, [sp]
   12454:	mov	r0, r6
   12458:	bl	11c70 <getopt_long@plt>
   1245c:	add	r0, r0, #3
   12460:	movw	r1, #266	; 0x10a
   12464:	cmp	r0, r1
   12468:	bhi	12bf4 <__assert_fail@plt+0xd2c>
   1246c:	add	r1, pc, #4
   12470:	mov	r7, #1
   12474:	ldr	pc, [r1, r0, lsl #2]
   12478:	strdeq	r3, [r1], -r4
   1247c:	andeq	r3, r1, r8, asr pc
   12480:	muleq	r1, r8, ip
   12484:	strdeq	r2, [r1], -r4
   12488:	strdeq	r2, [r1], -r4
   1248c:	strdeq	r2, [r1], -r4
   12490:	strdeq	r2, [r1], -r4
   12494:	strdeq	r2, [r1], -r4
   12498:	strdeq	r2, [r1], -r4
   1249c:	strdeq	r2, [r1], -r4
   124a0:	strdeq	r2, [r1], -r4
   124a4:	strdeq	r2, [r1], -r4
   124a8:	strdeq	r2, [r1], -r4
   124ac:	strdeq	r2, [r1], -r4
   124b0:	strdeq	r2, [r1], -r4
   124b4:	strdeq	r2, [r1], -r4
   124b8:	strdeq	r2, [r1], -r4
   124bc:	strdeq	r2, [r1], -r4
   124c0:	strdeq	r2, [r1], -r4
   124c4:	strdeq	r2, [r1], -r4
   124c8:	strdeq	r2, [r1], -r4
   124cc:	strdeq	r2, [r1], -r4
   124d0:	strdeq	r2, [r1], -r4
   124d4:	strdeq	r2, [r1], -r4
   124d8:	strdeq	r2, [r1], -r4
   124dc:	strdeq	r2, [r1], -r4
   124e0:	strdeq	r2, [r1], -r4
   124e4:	strdeq	r2, [r1], -r4
   124e8:	strdeq	r2, [r1], -r4
   124ec:	strdeq	r2, [r1], -r4
   124f0:	strdeq	r2, [r1], -r4
   124f4:	strdeq	r2, [r1], -r4
   124f8:	strdeq	r2, [r1], -r4
   124fc:	strdeq	r2, [r1], -r4
   12500:	strdeq	r2, [r1], -r4
   12504:	strdeq	r2, [r1], -r4
   12508:	strdeq	r2, [r1], -r4
   1250c:	strdeq	r2, [r1], -r4
   12510:	strdeq	r2, [r1], -r4
   12514:	strdeq	r2, [r1], -r4
   12518:	strdeq	r2, [r1], -r4
   1251c:	strdeq	r2, [r1], -r4
   12520:	strdeq	r2, [r1], -r4
   12524:	strdeq	r2, [r1], -r4
   12528:	strdeq	r2, [r1], -r4
   1252c:	strdeq	r2, [r1], -r4
   12530:	strdeq	r2, [r1], -r4
   12534:	strdeq	r2, [r1], -r4
   12538:	strdeq	r2, [r1], -r4
   1253c:	strdeq	r2, [r1], -r4
   12540:	strdeq	r2, [r1], -r4
   12544:	andeq	r2, r1, r4, ror sl
   12548:	strdeq	r2, [r1], -r4
   1254c:	strdeq	r2, [r1], -r4
   12550:	strdeq	r2, [r1], -r4
   12554:	strdeq	r2, [r1], -r4
   12558:	strdeq	r2, [r1], -r4
   1255c:	strdeq	r2, [r1], -r4
   12560:	strdeq	r2, [r1], -r4
   12564:	strdeq	r2, [r1], -r4
   12568:	strdeq	r2, [r1], -r4
   1256c:	strdeq	r2, [r1], -r4
   12570:	strdeq	r2, [r1], -r4
   12574:	strdeq	r2, [r1], -r4
   12578:	strdeq	r2, [r1], -r4
   1257c:	strdeq	r2, [r1], -r4
   12580:	strdeq	r2, [r1], -r4
   12584:	strdeq	r2, [r1], -r4
   12588:	strdeq	r2, [r1], -r4
   1258c:	andeq	r2, r1, r4, asr #20
   12590:	strdeq	r2, [r1], -r4
   12594:	andeq	r2, r1, r4, lsr #17
   12598:	strdeq	r2, [r1], -r4
   1259c:	strdeq	r2, [r1], -r4
   125a0:	strdeq	r2, [r1], -r4
   125a4:	andeq	r2, r1, r4, lsr #17
   125a8:	strdeq	r2, [r1], -r4
   125ac:	strdeq	r2, [r1], -r4
   125b0:	strdeq	r2, [r1], -r4
   125b4:	andeq	r2, r1, r4, lsr #21
   125b8:	strdeq	r2, [r1], -r4
   125bc:	strdeq	r2, [r1], -r4
   125c0:	strdeq	r2, [r1], -r4
   125c4:	andeq	r2, r1, r0, lsr #22
   125c8:	strdeq	r2, [r1], -r4
   125cc:	strdeq	r2, [r1], -r4
   125d0:	andeq	r2, r1, r0, ror r9
   125d4:	strdeq	r2, [r1], -r4
   125d8:	strdeq	r2, [r1], -r4
   125dc:	strdeq	r2, [r1], -r4
   125e0:	strdeq	r2, [r1], -r4
   125e4:			; <UNDEFINED> instruction: 0x00012ab0
   125e8:	strdeq	r2, [r1], -r4
   125ec:	strdeq	r2, [r1], -r4
   125f0:	strdeq	r2, [r1], -r4
   125f4:	strdeq	r2, [r1], -r4
   125f8:	strdeq	r2, [r1], -r4
   125fc:	strdeq	r2, [r1], -r4
   12600:	strdeq	r2, [r1], -r4
   12604:	strdeq	r2, [r1], -r4
   12608:	andeq	r2, r1, r8, lsr fp
   1260c:	andeq	r2, r1, ip, ror r9
   12610:	andeq	r2, r1, ip, lsr #22
   12614:	andeq	r2, r1, ip, ror #22
   12618:	strdeq	r2, [r1], -r4
   1261c:	strdeq	r2, [r1], -r4
   12620:	strdeq	r2, [r1], -r4
   12624:	andeq	r2, r1, r0, lsl #21
   12628:	strdeq	r2, [r1], -r4
   1262c:	strdeq	r2, [r1], -r4
   12630:	andeq	r2, r1, r0, asr #18
   12634:	andeq	r2, r1, ip, asr #18
   12638:	andeq	r2, r1, ip, lsl sl
   1263c:	strdeq	r2, [r1], -r4
   12640:	strdeq	r2, [r1], -r4
   12644:	strdeq	r2, [r1], -r4
   12648:	strdeq	r2, [r1], -r4
   1264c:	strdeq	r2, [r1], -r4
   12650:	andeq	r2, r1, ip, lsr #8
   12654:			; <UNDEFINED> instruction: 0x000129b0
   12658:	strdeq	r2, [r1], -r4
   1265c:	strdeq	r2, [r1], -r4
   12660:	strdeq	r2, [r1], -r4
   12664:	andeq	r2, r1, r8, ror #23
   12668:	strdeq	r2, [r1], -r4
   1266c:	strdeq	r2, [r1], -r4
   12670:	strdeq	r2, [r1], -r4
   12674:	strdeq	r2, [r1], -r4
   12678:	strdeq	r2, [r1], -r4
   1267c:	strdeq	r2, [r1], -r4
   12680:	strdeq	r2, [r1], -r4
   12684:	strdeq	r2, [r1], -r4
   12688:	strdeq	r2, [r1], -r4
   1268c:	strdeq	r2, [r1], -r4
   12690:	strdeq	r2, [r1], -r4
   12694:	strdeq	r2, [r1], -r4
   12698:	strdeq	r2, [r1], -r4
   1269c:	strdeq	r2, [r1], -r4
   126a0:	strdeq	r2, [r1], -r4
   126a4:	strdeq	r2, [r1], -r4
   126a8:	strdeq	r2, [r1], -r4
   126ac:	strdeq	r2, [r1], -r4
   126b0:	strdeq	r2, [r1], -r4
   126b4:	strdeq	r2, [r1], -r4
   126b8:	strdeq	r2, [r1], -r4
   126bc:	strdeq	r2, [r1], -r4
   126c0:	strdeq	r2, [r1], -r4
   126c4:	strdeq	r2, [r1], -r4
   126c8:	strdeq	r2, [r1], -r4
   126cc:	strdeq	r2, [r1], -r4
   126d0:	strdeq	r2, [r1], -r4
   126d4:	strdeq	r2, [r1], -r4
   126d8:	strdeq	r2, [r1], -r4
   126dc:	strdeq	r2, [r1], -r4
   126e0:	strdeq	r2, [r1], -r4
   126e4:	strdeq	r2, [r1], -r4
   126e8:	strdeq	r2, [r1], -r4
   126ec:	strdeq	r2, [r1], -r4
   126f0:	strdeq	r2, [r1], -r4
   126f4:	strdeq	r2, [r1], -r4
   126f8:	strdeq	r2, [r1], -r4
   126fc:	strdeq	r2, [r1], -r4
   12700:	strdeq	r2, [r1], -r4
   12704:	strdeq	r2, [r1], -r4
   12708:	strdeq	r2, [r1], -r4
   1270c:	strdeq	r2, [r1], -r4
   12710:	strdeq	r2, [r1], -r4
   12714:	strdeq	r2, [r1], -r4
   12718:	strdeq	r2, [r1], -r4
   1271c:	strdeq	r2, [r1], -r4
   12720:	strdeq	r2, [r1], -r4
   12724:	strdeq	r2, [r1], -r4
   12728:	strdeq	r2, [r1], -r4
   1272c:	strdeq	r2, [r1], -r4
   12730:	strdeq	r2, [r1], -r4
   12734:	strdeq	r2, [r1], -r4
   12738:	strdeq	r2, [r1], -r4
   1273c:	strdeq	r2, [r1], -r4
   12740:	strdeq	r2, [r1], -r4
   12744:	strdeq	r2, [r1], -r4
   12748:	strdeq	r2, [r1], -r4
   1274c:	strdeq	r2, [r1], -r4
   12750:	strdeq	r2, [r1], -r4
   12754:	strdeq	r2, [r1], -r4
   12758:	strdeq	r2, [r1], -r4
   1275c:	strdeq	r2, [r1], -r4
   12760:	strdeq	r2, [r1], -r4
   12764:	strdeq	r2, [r1], -r4
   12768:	strdeq	r2, [r1], -r4
   1276c:	strdeq	r2, [r1], -r4
   12770:	strdeq	r2, [r1], -r4
   12774:	strdeq	r2, [r1], -r4
   12778:	strdeq	r2, [r1], -r4
   1277c:	strdeq	r2, [r1], -r4
   12780:	strdeq	r2, [r1], -r4
   12784:	strdeq	r2, [r1], -r4
   12788:	strdeq	r2, [r1], -r4
   1278c:	strdeq	r2, [r1], -r4
   12790:	strdeq	r2, [r1], -r4
   12794:	strdeq	r2, [r1], -r4
   12798:	strdeq	r2, [r1], -r4
   1279c:	strdeq	r2, [r1], -r4
   127a0:	strdeq	r2, [r1], -r4
   127a4:	strdeq	r2, [r1], -r4
   127a8:	strdeq	r2, [r1], -r4
   127ac:	strdeq	r2, [r1], -r4
   127b0:	strdeq	r2, [r1], -r4
   127b4:	strdeq	r2, [r1], -r4
   127b8:	strdeq	r2, [r1], -r4
   127bc:	strdeq	r2, [r1], -r4
   127c0:	strdeq	r2, [r1], -r4
   127c4:	strdeq	r2, [r1], -r4
   127c8:	strdeq	r2, [r1], -r4
   127cc:	strdeq	r2, [r1], -r4
   127d0:	strdeq	r2, [r1], -r4
   127d4:	strdeq	r2, [r1], -r4
   127d8:	strdeq	r2, [r1], -r4
   127dc:	strdeq	r2, [r1], -r4
   127e0:	strdeq	r2, [r1], -r4
   127e4:	strdeq	r2, [r1], -r4
   127e8:	strdeq	r2, [r1], -r4
   127ec:	strdeq	r2, [r1], -r4
   127f0:	strdeq	r2, [r1], -r4
   127f4:	strdeq	r2, [r1], -r4
   127f8:	strdeq	r2, [r1], -r4
   127fc:	strdeq	r2, [r1], -r4
   12800:	strdeq	r2, [r1], -r4
   12804:	strdeq	r2, [r1], -r4
   12808:	strdeq	r2, [r1], -r4
   1280c:	strdeq	r2, [r1], -r4
   12810:	strdeq	r2, [r1], -r4
   12814:	strdeq	r2, [r1], -r4
   12818:	strdeq	r2, [r1], -r4
   1281c:	strdeq	r2, [r1], -r4
   12820:	strdeq	r2, [r1], -r4
   12824:	strdeq	r2, [r1], -r4
   12828:	strdeq	r2, [r1], -r4
   1282c:	strdeq	r2, [r1], -r4
   12830:	strdeq	r2, [r1], -r4
   12834:	strdeq	r2, [r1], -r4
   12838:	strdeq	r2, [r1], -r4
   1283c:	strdeq	r2, [r1], -r4
   12840:	strdeq	r2, [r1], -r4
   12844:	strdeq	r2, [r1], -r4
   12848:	strdeq	r2, [r1], -r4
   1284c:	strdeq	r2, [r1], -r4
   12850:	strdeq	r2, [r1], -r4
   12854:	strdeq	r2, [r1], -r4
   12858:	strdeq	r2, [r1], -r4
   1285c:	strdeq	r2, [r1], -r4
   12860:	strdeq	r2, [r1], -r4
   12864:	strdeq	r2, [r1], -r4
   12868:	strdeq	r2, [r1], -r4
   1286c:	strdeq	r2, [r1], -r4
   12870:	strdeq	r2, [r1], -r4
   12874:	strdeq	r2, [r1], -r4
   12878:	strdeq	r2, [r1], -r4
   1287c:	strdeq	r2, [r1], -r4
   12880:	strdeq	r2, [r1], -r4
   12884:	andeq	r2, r1, r8, lsl r9
   12888:	andeq	r2, r1, r4, asr #22
   1288c:	andeq	r2, r1, r4, lsl #24
   12890:	andeq	r2, r1, r4, lsr #18
   12894:	strdeq	r2, [r1], -r4
   12898:			; <UNDEFINED> instruction: 0x000128b0
   1289c:	andeq	r2, r1, r8, asr r9
   128a0:	andeq	r2, r1, r8, lsl r4
   128a4:	mov	sl, #17
   128a8:	mov	r7, r8
   128ac:	b	1242c <__assert_fail@plt+0x564>
   128b0:	movw	r1, #37474	; 0x9262
   128b4:	mov	r0, #1
   128b8:	movt	r1, #4
   128bc:	strb	r0, [r1]
   128c0:	movw	r1, #37432	; 0x9238
   128c4:	movt	r1, #4
   128c8:	ldr	r1, [r1]
   128cc:	cmp	r1, #0
   128d0:	beq	12c1c <__assert_fail@plt+0xd54>
   128d4:	movw	r2, #37328	; 0x91d0
   128d8:	movw	r4, #30704	; 0x77f0
   128dc:	str	r0, [sp, #8]
   128e0:	movw	r0, #28158	; 0x6dfe
   128e4:	mov	r3, #4
   128e8:	movt	r2, #4
   128ec:	movt	r4, #3
   128f0:	movt	r0, #3
   128f4:	str	r3, [sp]
   128f8:	ldr	r2, [r2]
   128fc:	mov	r3, r4
   12900:	str	r2, [sp, #4]
   12904:	movw	r2, #30724	; 0x7804
   12908:	movt	r2, #3
   1290c:	bl	1462c <__assert_fail@plt+0x2764>
   12910:	ldr	r0, [r4, r0, lsl #2]
   12914:	b	12c20 <__assert_fail@plt+0xd58>
   12918:	movw	r0, #37458	; 0x9252
   1291c:	movt	r0, #4
   12920:	b	12420 <__assert_fail@plt+0x558>
   12924:	movw	r2, #37448	; 0x9248
   12928:	mov	r1, #0
   1292c:	mov	r0, #1
   12930:	movt	r2, #4
   12934:	strd	r0, [r2]
   12938:	mov	r0, #144	; 0x90
   1293c:	b	12a98 <__assert_fail@plt+0xbd0>
   12940:	mov	r1, #0
   12944:	mov	r0, #1024	; 0x400
   12948:	b	12a24 <__assert_fail@plt+0xb5c>
   1294c:	movw	r0, #37460	; 0x9254
   12950:	movt	r0, #4
   12954:	b	12420 <__assert_fail@plt+0x558>
   12958:	movw	r0, #37432	; 0x9238
   1295c:	movw	r1, #37484	; 0x926c
   12960:	movt	r0, #4
   12964:	movt	r1, #4
   12968:	ldr	r0, [r0]
   1296c:	b	12c44 <__assert_fail@plt+0xd7c>
   12970:	movw	r0, #37472	; 0x9260
   12974:	movt	r0, #4
   12978:	b	12420 <__assert_fail@plt+0x558>
   1297c:	movw	r2, #37448	; 0x9248
   12980:	mov	r1, #0
   12984:	mov	r0, #1
   12988:	mov	r7, r8
   1298c:	movt	r2, #4
   12990:	strd	r0, [r2]
   12994:	movw	r2, #37444	; 0x9244
   12998:	movt	r2, #4
   1299c:	str	r1, [r2]
   129a0:	movw	r1, #37458	; 0x9252
   129a4:	movt	r1, #4
   129a8:	strb	r0, [r1]
   129ac:	b	1242c <__assert_fail@plt+0x564>
   129b0:	movw	r7, #37432	; 0x9238
   129b4:	movw	r1, #28112	; 0x6dd0
   129b8:	mov	r4, r6
   129bc:	mov	r6, r5
   129c0:	mov	r5, sl
   129c4:	mov	sl, r9
   129c8:	movw	r9, #37464	; 0x9258
   129cc:	mov	r2, #0
   129d0:	movt	r7, #4
   129d4:	movt	r1, #3
   129d8:	movt	r9, #4
   129dc:	ldr	r0, [r7]
   129e0:	str	r1, [sp]
   129e4:	mov	r1, #0
   129e8:	mov	r3, r9
   129ec:	bl	32140 <__assert_fail@plt+0x20278>
   129f0:	cmp	r0, #0
   129f4:	bne	13fac <__assert_fail@plt+0x20e4>
   129f8:	ldrd	r0, [r9]
   129fc:	orrs	r0, r0, r1
   12a00:	beq	12c50 <__assert_fail@plt+0xd88>
   12a04:	mov	r9, sl
   12a08:	mov	sl, r5
   12a0c:	mov	r5, r6
   12a10:	mov	r7, r8
   12a14:	mov	r6, r4
   12a18:	b	1242c <__assert_fail@plt+0x564>
   12a1c:	mov	r1, #0
   12a20:	mov	r0, #1048576	; 0x100000
   12a24:	movw	r2, #37448	; 0x9248
   12a28:	mov	r7, r8
   12a2c:	movt	r2, #4
   12a30:	strd	r0, [r2]
   12a34:	movw	r0, #37444	; 0x9244
   12a38:	movt	r0, #4
   12a3c:	str	r1, [r0]
   12a40:	b	1242c <__assert_fail@plt+0x564>
   12a44:	movw	r4, #37432	; 0x9238
   12a48:	movw	r1, #37444	; 0x9244
   12a4c:	movw	r2, #37448	; 0x9248
   12a50:	movt	r4, #4
   12a54:	movt	r1, #4
   12a58:	movt	r2, #4
   12a5c:	ldr	r0, [r4]
   12a60:	bl	1bbc0 <__assert_fail@plt+0x9cf8>
   12a64:	cmp	r0, #0
   12a68:	mov	r7, r8
   12a6c:	beq	1242c <__assert_fail@plt+0x564>
   12a70:	b	13fc8 <__assert_fail@plt+0x2100>
   12a74:	movw	r0, #37456	; 0x9250
   12a78:	movt	r0, #4
   12a7c:	b	12420 <__assert_fail@plt+0x558>
   12a80:	movw	r2, #37448	; 0x9248
   12a84:	mov	r1, #0
   12a88:	mov	r0, #1
   12a8c:	movt	r2, #4
   12a90:	strd	r0, [r2]
   12a94:	mov	r0, #176	; 0xb0
   12a98:	movw	r1, #37444	; 0x9244
   12a9c:	movt	r1, #4
   12aa0:	b	12c44 <__assert_fail@plt+0xd7c>
   12aa4:	mov	sl, #2
   12aa8:	mov	r7, r8
   12aac:	b	1242c <__assert_fail@plt+0x564>
   12ab0:	movw	r7, #37432	; 0x9238
   12ab4:	movw	r0, #37440	; 0x9240
   12ab8:	mov	r3, #268435456	; 0x10000000
   12abc:	movt	r7, #4
   12ac0:	movt	r0, #4
   12ac4:	ldr	r1, [r0]
   12ac8:	mov	r0, #10
   12acc:	ldr	r2, [r7]
   12ad0:	str	r0, [sp]
   12ad4:	movw	r0, #22132	; 0x5674
   12ad8:	movt	r0, #1
   12adc:	bl	15b5c <__assert_fail@plt+0x3c94>
   12ae0:	cmp	r0, #0
   12ae4:	beq	12bfc <__assert_fail@plt+0xd34>
   12ae8:	bl	11cdc <__errno_location@plt>
   12aec:	ldr	r2, [r7]
   12af0:	ldr	r4, [r0]
   12af4:	mov	r0, #0
   12af8:	mov	r1, #3
   12afc:	str	r0, [sp, #128]	; 0x80
   12b00:	mov	r0, #0
   12b04:	bl	1ec18 <__assert_fail@plt+0xcd50>
   12b08:	movw	r2, #30942	; 0x78de
   12b0c:	mov	r3, r0
   12b10:	mov	r0, #0
   12b14:	mov	r1, r4
   12b18:	movt	r2, #3
   12b1c:	b	12bdc <__assert_fail@plt+0xd14>
   12b20:	mov	sl, #16
   12b24:	mov	r7, r8
   12b28:	b	1242c <__assert_fail@plt+0x564>
   12b2c:	movw	r0, #37459	; 0x9253
   12b30:	movt	r0, #4
   12b34:	b	12420 <__assert_fail@plt+0x558>
   12b38:	movw	r0, #37457	; 0x9251
   12b3c:	movt	r0, #4
   12b40:	b	12420 <__assert_fail@plt+0x558>
   12b44:	movw	r0, #37432	; 0x9238
   12b48:	mov	r2, #268435456	; 0x10000000
   12b4c:	movt	r0, #4
   12b50:	ldr	r1, [r0]
   12b54:	movw	r0, #37440	; 0x9240
   12b58:	movt	r0, #4
   12b5c:	ldr	r0, [r0]
   12b60:	bl	15674 <__assert_fail@plt+0x37ac>
   12b64:	mov	r7, r8
   12b68:	b	1242c <__assert_fail@plt+0x564>
   12b6c:	movw	r7, #37432	; 0x9238
   12b70:	movw	r1, #27716	; 0x6c44
   12b74:	sub	r3, fp, #160	; 0xa0
   12b78:	mov	r2, #0
   12b7c:	movt	r7, #4
   12b80:	movt	r1, #3
   12b84:	ldr	r0, [r7]
   12b88:	str	r1, [sp]
   12b8c:	mov	r1, #0
   12b90:	bl	33b1c <__assert_fail@plt+0x21c54>
   12b94:	cmp	r0, #0
   12b98:	ldreq	r0, [fp, #-156]	; 0xffffff64
   12b9c:	cmpeq	r0, #0
   12ba0:	beq	12c78 <__assert_fail@plt+0xdb0>
   12ba4:	movw	r1, #28087	; 0x6db7
   12ba8:	mov	r0, #0
   12bac:	mov	r2, #5
   12bb0:	movt	r1, #3
   12bb4:	str	r0, [sp, #128]	; 0x80
   12bb8:	mov	r0, #0
   12bbc:	bl	11afc <dcgettext@plt>
   12bc0:	mov	r4, r0
   12bc4:	ldr	r0, [r7]
   12bc8:	bl	1eec4 <__assert_fail@plt+0xcffc>
   12bcc:	mov	r3, r0
   12bd0:	mov	r0, #0
   12bd4:	mov	r1, #0
   12bd8:	mov	r2, r4
   12bdc:	bl	11bd4 <error@plt>
   12be0:	mov	r7, r8
   12be4:	b	1242c <__assert_fail@plt+0x564>
   12be8:	orr	r9, r9, #64	; 0x40
   12bec:	mov	r7, r8
   12bf0:	b	1242c <__assert_fail@plt+0x564>
   12bf4:	mov	r0, #0
   12bf8:	str	r0, [sp, #128]	; 0x80
   12bfc:	mov	r7, r8
   12c00:	b	1242c <__assert_fail@plt+0x564>
   12c04:	movw	r0, #37432	; 0x9238
   12c08:	mov	r7, r8
   12c0c:	movt	r0, #4
   12c10:	ldr	r0, [r0]
   12c14:	str	r0, [sp, #36]	; 0x24
   12c18:	b	1242c <__assert_fail@plt+0x564>
   12c1c:	mov	r0, #0
   12c20:	movw	r1, #37476	; 0x9264
   12c24:	movt	r1, #4
   12c28:	str	r0, [r1]
   12c2c:	movw	r0, #28165	; 0x6e05
   12c30:	movt	r0, #3
   12c34:	bl	11c04 <getenv@plt>
   12c38:	bl	30e30 <__assert_fail@plt+0x1ef68>
   12c3c:	movw	r1, #37480	; 0x9268
   12c40:	movt	r1, #4
   12c44:	str	r0, [r1]
   12c48:	mov	r7, r8
   12c4c:	b	1242c <__assert_fail@plt+0x564>
   12c50:	ldr	r0, [r7]
   12c54:	mov	r9, sl
   12c58:	mov	sl, r5
   12c5c:	mov	r5, r6
   12c60:	mov	r7, r8
   12c64:	mov	r6, r4
   12c68:	ldrb	r0, [r0]
   12c6c:	cmp	r0, #45	; 0x2d
   12c70:	bne	1242c <__assert_fail@plt+0x564>
   12c74:	b	13fe4 <__assert_fail@plt+0x211c>
   12c78:	ldr	r0, [fp, #-160]	; 0xffffff60
   12c7c:	movw	r1, #37320	; 0x91c8
   12c80:	mov	r7, r8
   12c84:	movt	r1, #4
   12c88:	str	r0, [r1]
   12c8c:	mov	r0, #1
   12c90:	str	r0, [sp, #124]	; 0x7c
   12c94:	b	1242c <__assert_fail@plt+0x564>
   12c98:	ldr	r0, [sp, #128]	; 0x80
   12c9c:	tst	r0, #1
   12ca0:	beq	14014 <__assert_fail@plt+0x214c>
   12ca4:	movw	r0, #37457	; 0x9251
   12ca8:	movt	r0, #4
   12cac:	ldrb	r0, [r0]
   12cb0:	and	r0, r8, r0
   12cb4:	tst	r0, #1
   12cb8:	bne	1401c <__assert_fail@plt+0x2154>
   12cbc:	tst	r8, #1
   12cc0:	beq	12d34 <__assert_fail@plt+0xe6c>
   12cc4:	movw	r8, #37320	; 0x91c8
   12cc8:	ldr	r0, [sp, #124]	; 0x7c
   12ccc:	movt	r8, #4
   12cd0:	ldr	r4, [r8]
   12cd4:	mvn	r7, r0
   12cd8:	cmp	r4, #0
   12cdc:	mov	r0, r4
   12ce0:	movwne	r0, #1
   12ce4:	orr	r0, r7, r0
   12ce8:	tst	r0, #1
   12cec:	bne	12d18 <__assert_fail@plt+0xe50>
   12cf0:	movw	r1, #28284	; 0x6e7c
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #5
   12cfc:	movt	r1, #3
   12d00:	bl	11afc <dcgettext@plt>
   12d04:	mov	r2, r0
   12d08:	mov	r0, #0
   12d0c:	mov	r1, #0
   12d10:	bl	11bd4 <error@plt>
   12d14:	ldr	r4, [r8]
   12d18:	clz	r0, r4
   12d1c:	lsr	r0, r0, #5
   12d20:	orr	r0, r7, r0
   12d24:	tst	r0, #1
   12d28:	beq	140e0 <__assert_fail@plt+0x2218>
   12d2c:	mov	r0, #0
   12d30:	str	r0, [r8]
   12d34:	movw	r0, #37473	; 0x9261
   12d38:	movt	r0, #4
   12d3c:	ldrb	r0, [r0]
   12d40:	cmp	r0, #1
   12d44:	bne	12d94 <__assert_fail@plt+0xecc>
   12d48:	movw	r0, #37458	; 0x9252
   12d4c:	movt	r0, #4
   12d50:	ldrb	r0, [r0]
   12d54:	cmp	r0, #1
   12d58:	bne	12d80 <__assert_fail@plt+0xeb8>
   12d5c:	movw	r1, #28392	; 0x6ee8
   12d60:	mov	r0, #0
   12d64:	mov	r2, #5
   12d68:	movt	r1, #3
   12d6c:	bl	11afc <dcgettext@plt>
   12d70:	mov	r2, r0
   12d74:	mov	r0, #0
   12d78:	mov	r1, #0
   12d7c:	bl	11bd4 <error@plt>
   12d80:	movw	r2, #37448	; 0x9248
   12d84:	mov	r1, #0
   12d88:	mov	r0, #1
   12d8c:	movt	r2, #4
   12d90:	strd	r0, [r2]
   12d94:	movw	r0, #37474	; 0x9262
   12d98:	movt	r0, #4
   12d9c:	ldrb	r0, [r0]
   12da0:	cmp	r0, #1
   12da4:	bne	12ef8 <__assert_fail@plt+0x1030>
   12da8:	movw	r4, #37484	; 0x926c
   12dac:	movt	r4, #4
   12db0:	ldr	r7, [r4]
   12db4:	cmp	r7, #0
   12db8:	bne	12e24 <__assert_fail@plt+0xf5c>
   12dbc:	movw	r0, #28462	; 0x6f2e
   12dc0:	movt	r0, #3
   12dc4:	bl	11c04 <getenv@plt>
   12dc8:	cmp	r0, #0
   12dcc:	str	r0, [r4]
   12dd0:	beq	12e18 <__assert_fail@plt+0xf50>
   12dd4:	movw	r1, #28042	; 0x6d8a
   12dd8:	mov	r7, r0
   12ddc:	movt	r1, #3
   12de0:	bl	11a3c <strcmp@plt>
   12de4:	cmp	r0, #0
   12de8:	beq	12e18 <__assert_fail@plt+0xf50>
   12dec:	ldrb	r0, [r7]
   12df0:	cmp	r0, #43	; 0x2b
   12df4:	bne	12e44 <__assert_fail@plt+0xf7c>
   12df8:	mov	r0, r7
   12dfc:	mov	r1, #10
   12e00:	bl	11cb8 <strchr@plt>
   12e04:	cmp	r0, #0
   12e08:	beq	12e30 <__assert_fail@plt+0xf68>
   12e0c:	mov	r1, #0
   12e10:	strb	r1, [r0]
   12e14:	b	12e24 <__assert_fail@plt+0xf5c>
   12e18:	movw	r7, #28473	; 0x6f39
   12e1c:	movt	r7, #3
   12e20:	str	r7, [r4]
   12e24:	ldrb	r0, [r7]
   12e28:	cmp	r0, #43	; 0x2b
   12e2c:	bne	12e60 <__assert_fail@plt+0xf98>
   12e30:	movw	r1, #37488	; 0x9270
   12e34:	add	r0, r7, #1
   12e38:	movt	r1, #4
   12e3c:	str	r0, [r1]
   12e40:	b	12ef8 <__assert_fail@plt+0x1030>
   12e44:	movw	r1, #30748	; 0x781c
   12e48:	mov	r0, r7
   12e4c:	mov	r2, #6
   12e50:	movt	r1, #3
   12e54:	bl	11e80 <strncmp@plt>
   12e58:	cmp	r0, #0
   12e5c:	beq	13ec8 <__assert_fail@plt+0x2000>
   12e60:	movw	r0, #37328	; 0x91d0
   12e64:	movw	r4, #30756	; 0x7824
   12e68:	mov	r2, #4
   12e6c:	mov	r1, #1
   12e70:	movt	r0, #4
   12e74:	str	r2, [sp]
   12e78:	movw	r2, #30768	; 0x7830
   12e7c:	movt	r4, #3
   12e80:	movt	r2, #3
   12e84:	ldr	r0, [r0]
   12e88:	mov	r3, r4
   12e8c:	stmib	sp, {r0, r1}
   12e90:	movw	r0, #28482	; 0x6f42
   12e94:	mov	r1, r7
   12e98:	movt	r0, #3
   12e9c:	bl	1462c <__assert_fail@plt+0x2764>
   12ea0:	ldr	r0, [r4, r0, lsl #2]
   12ea4:	cmp	r0, #2
   12ea8:	beq	12ee4 <__assert_fail@plt+0x101c>
   12eac:	cmp	r0, #1
   12eb0:	beq	12ed0 <__assert_fail@plt+0x1008>
   12eb4:	cmp	r0, #0
   12eb8:	bne	12ef8 <__assert_fail@plt+0x1030>
   12ebc:	movw	r0, #37488	; 0x9270
   12ec0:	movw	r1, #28493	; 0x6f4d
   12ec4:	movt	r0, #4
   12ec8:	movt	r1, #3
   12ecc:	b	12ef4 <__assert_fail@plt+0x102c>
   12ed0:	movw	r0, #37488	; 0x9270
   12ed4:	movw	r1, #28517	; 0x6f65
   12ed8:	movt	r0, #4
   12edc:	movt	r1, #3
   12ee0:	b	12ef4 <__assert_fail@plt+0x102c>
   12ee4:	movw	r0, #37488	; 0x9270
   12ee8:	movw	r1, #28532	; 0x6f74
   12eec:	movt	r0, #4
   12ef0:	movt	r1, #3
   12ef4:	str	r1, [r0]
   12ef8:	movw	r7, #37408	; 0x9220
   12efc:	ldr	r0, [sp, #36]	; 0x24
   12f00:	movt	r7, #4
   12f04:	ldr	r1, [r7]
   12f08:	cmp	r0, #0
   12f0c:	beq	12f6c <__assert_fail@plt+0x10a4>
   12f10:	cmp	r1, r6
   12f14:	blt	14068 <__assert_fail@plt+0x21a0>
   12f18:	ldr	r6, [sp, #36]	; 0x24
   12f1c:	movw	r1, #33488	; 0x82d0
   12f20:	movt	r1, #3
   12f24:	mov	r0, r6
   12f28:	bl	11a3c <strcmp@plt>
   12f2c:	movw	r4, #37424	; 0x9230
   12f30:	cmp	r0, #0
   12f34:	movt	r4, #4
   12f38:	beq	12f58 <__assert_fail@plt+0x1090>
   12f3c:	ldr	r2, [r4]
   12f40:	movw	r1, #32398	; 0x7e8e
   12f44:	mov	r0, r6
   12f48:	movt	r1, #3
   12f4c:	bl	176e8 <__assert_fail@plt+0x5820>
   12f50:	cmp	r0, #0
   12f54:	beq	14110 <__assert_fail@plt+0x2248>
   12f58:	ldr	r0, [r4]
   12f5c:	bl	148d0 <__assert_fail@plt+0x2a08>
   12f60:	mov	r4, r0
   12f64:	mov	r0, #1
   12f68:	b	12fa4 <__assert_fail@plt+0x10dc>
   12f6c:	cmp	r1, r6
   12f70:	add	r0, sp, #136	; 0x88
   12f74:	addlt	r0, r5, r1, lsl #2
   12f78:	bl	148a0 <__assert_fail@plt+0x29d8>
   12f7c:	mov	r4, r0
   12f80:	ldr	r0, [r7]
   12f84:	mov	r1, #0
   12f88:	add	r0, r0, #1
   12f8c:	cmp	r0, r6
   12f90:	sub	r0, sl, #2
   12f94:	clz	r0, r0
   12f98:	movwlt	r1, #1
   12f9c:	lsr	r0, r0, #5
   12fa0:	orr	r0, r0, r1
   12fa4:	movw	r1, #37492	; 0x9274
   12fa8:	cmp	r4, #0
   12fac:	movt	r1, #4
   12fb0:	strb	r0, [r1]
   12fb4:	beq	14010 <__assert_fail@plt+0x2148>
   12fb8:	bl	14b18 <__assert_fail@plt+0x2c50>
   12fbc:	movw	r1, #37496	; 0x9278
   12fc0:	cmp	r0, #0
   12fc4:	movt	r1, #4
   12fc8:	str	r0, [r1]
   12fcc:	beq	14010 <__assert_fail@plt+0x2148>
   12fd0:	movw	r0, #37492	; 0x9274
   12fd4:	orr	r1, r9, #256	; 0x100
   12fd8:	str	r4, [sp, #44]	; 0x2c
   12fdc:	movt	r0, #4
   12fe0:	ldrb	r0, [r0]
   12fe4:	cmp	r0, #0
   12fe8:	movw	r0, #37460	; 0x9254
   12fec:	movt	r0, #4
   12ff0:	moveq	r9, r1
   12ff4:	ldrb	r0, [r0]
   12ff8:	cmp	r0, #0
   12ffc:	mov	r0, r4
   13000:	movne	r9, r1
   13004:	add	r1, sp, #132	; 0x84
   13008:	bl	14908 <__assert_fail@plt+0x2a40>
   1300c:	cmp	r0, #0
   13010:	beq	13d74 <__assert_fail@plt+0x1eac>
   13014:	mov	r5, r0
   13018:	orr	r0, r9, sl
   1301c:	vmov.i32	q4, #0	; 0x00000000
   13020:	mov	r6, #1
   13024:	str	r0, [sp, #28]
   13028:	sub	r0, fp, #160	; 0xa0
   1302c:	add	r0, r0, #96	; 0x60
   13030:	str	r0, [sp, #20]
   13034:	b	130bc <__assert_fail@plt+0x11f4>
   13038:	cmp	r6, #0
   1303c:	beq	13c8c <__assert_fail@plt+0x1dc4>
   13040:	ldr	r0, [sp, #44]	; 0x2c
   13044:	mov	r5, r6
   13048:	bl	149c0 <__assert_fail@plt+0x2af8>
   1304c:	mov	r4, r0
   13050:	mov	r0, #0
   13054:	mov	r1, #3
   13058:	mov	r2, r5
   1305c:	mov	r6, #0
   13060:	bl	1ec18 <__assert_fail@plt+0xcd50>
   13064:	movw	r1, #28787	; 0x7073
   13068:	mov	r5, r0
   1306c:	mov	r0, #0
   13070:	mov	r2, #5
   13074:	movt	r1, #3
   13078:	bl	11afc <dcgettext@plt>
   1307c:	movw	r2, #28817	; 0x7091
   13080:	str	r0, [sp, #4]
   13084:	mov	r0, #0
   13088:	mov	r1, #0
   1308c:	mov	r3, r5
   13090:	str	r4, [sp]
   13094:	movt	r2, #3
   13098:	bl	11bd4 <error@plt>
   1309c:	ldr	r0, [sp, #44]	; 0x2c
   130a0:	add	r1, sp, #132	; 0x84
   130a4:	bl	14908 <__assert_fail@plt+0x2a40>
   130a8:	cmp	r6, #0
   130ac:	mov	r5, r0
   130b0:	movwne	r6, #1
   130b4:	cmp	r0, #0
   130b8:	beq	13d78 <__assert_fail@plt+0x1eb0>
   130bc:	str	r6, [sp, #40]	; 0x28
   130c0:	ldr	r6, [sp, #36]	; 0x24
   130c4:	mov	r0, #0
   130c8:	cmp	r6, #0
   130cc:	beq	13144 <__assert_fail@plt+0x127c>
   130d0:	movw	r1, #33488	; 0x82d0
   130d4:	mov	r0, r6
   130d8:	movt	r1, #3
   130dc:	bl	11a3c <strcmp@plt>
   130e0:	cmp	r0, #0
   130e4:	mov	r0, #0
   130e8:	bne	13144 <__assert_fail@plt+0x127c>
   130ec:	movw	r1, #33488	; 0x82d0
   130f0:	mov	r0, r5
   130f4:	movt	r1, #3
   130f8:	bl	11a3c <strcmp@plt>
   130fc:	cmp	r0, #0
   13100:	mov	r0, #0
   13104:	bne	13144 <__assert_fail@plt+0x127c>
   13108:	movw	r1, #28724	; 0x7034
   1310c:	mov	r0, #0
   13110:	mov	r2, #5
   13114:	movt	r1, #3
   13118:	bl	11afc <dcgettext@plt>
   1311c:	mov	r4, r0
   13120:	mov	r0, #4
   13124:	mov	r1, r5
   13128:	bl	1e99c <__assert_fail@plt+0xcad4>
   1312c:	mov	r3, r0
   13130:	mov	r0, #0
   13134:	mov	r1, #0
   13138:	mov	r2, r4
   1313c:	bl	11bd4 <error@plt>
   13140:	mov	r0, #1
   13144:	ldrb	r1, [r5]
   13148:	cmp	r1, #0
   1314c:	beq	13038 <__assert_fail@plt+0x1170>
   13150:	mov	r6, #0
   13154:	cmp	r0, #0
   13158:	bne	1309c <__assert_fail@plt+0x11d4>
   1315c:	ldr	r1, [sp, #28]
   13160:	movw	r0, #37500	; 0x927c
   13164:	mov	r2, #0
   13168:	movt	r0, #4
   1316c:	str	r5, [r0]
   13170:	bl	320c4 <__assert_fail@plt+0x201fc>
   13174:	mov	r6, r0
   13178:	bl	18340 <__assert_fail@plt+0x6478>
   1317c:	cmp	r0, #0
   13180:	beq	13cbc <__assert_fail@plt+0x1df4>
   13184:	mov	r5, r0
   13188:	add	r0, r6, #16
   1318c:	mov	sl, #1
   13190:	str	r6, [sp, #88]	; 0x58
   13194:	str	r0, [sp, #24]
   13198:	b	131c8 <__assert_fail@plt+0x1300>
   1319c:	subs	r0, r7, r2
   131a0:	sbcs	r0, r5, r3
   131a4:	ldr	r1, [sp, #100]	; 0x64
   131a8:	addcs	r0, sp, #144	; 0x90
   131ac:	blcs	14150 <__assert_fail@plt+0x2288>
   131b0:	mov	r0, r6
   131b4:	and	sl, sl, r8
   131b8:	bl	18340 <__assert_fail@plt+0x6478>
   131bc:	mov	r5, r0
   131c0:	cmp	r0, #0
   131c4:	beq	13cc0 <__assert_fail@plt+0x1df8>
   131c8:	ldrh	r7, [r5, #56]	; 0x38
   131cc:	ldr	r9, [r5, #28]
   131d0:	cmp	r7, #6
   131d4:	beq	1322c <__assert_fail@plt+0x1364>
   131d8:	cmp	r7, #4
   131dc:	bne	132bc <__assert_fail@plt+0x13f4>
   131e0:	movw	r1, #29950	; 0x74fe
   131e4:	ldr	r4, [r5, #32]
   131e8:	mov	r0, #0
   131ec:	mov	r2, #5
   131f0:	mov	r8, #0
   131f4:	movt	r1, #3
   131f8:	bl	11afc <dcgettext@plt>
   131fc:	mov	r6, r0
   13200:	mov	r0, #4
   13204:	mov	r1, r9
   13208:	mov	r7, #4
   1320c:	bl	1e99c <__assert_fail@plt+0xcad4>
   13210:	mov	r3, r0
   13214:	mov	r1, r4
   13218:	mov	r0, #0
   1321c:	mov	r2, r6
   13220:	mov	r4, #0
   13224:	bl	11bd4 <error@plt>
   13228:	b	13238 <__assert_fail@plt+0x1370>
   1322c:	mov	r7, #6
   13230:	mov	r8, #1
   13234:	mov	r4, #0
   13238:	movw	r0, #37458	; 0x9252
   1323c:	str	r8, [sp, #124]	; 0x7c
   13240:	str	sl, [sp, #128]	; 0x80
   13244:	str	r7, [sp, #120]	; 0x78
   13248:	movt	r0, #4
   1324c:	ldrb	r0, [r0]
   13250:	cmp	r0, #1
   13254:	bne	13280 <__assert_fail@plt+0x13b8>
   13258:	add	r0, r5, #112	; 0x70
   1325c:	mov	r6, #0
   13260:	ldm	r0, {r0, sl}
   13264:	rsbs	r1, r0, #0
   13268:	rscs	r1, sl, #0
   1326c:	movwlt	r6, #1
   13270:	cmp	r6, #0
   13274:	moveq	sl, r6
   13278:	movne	r6, r0
   1327c:	b	13294 <__assert_fail@plt+0x13cc>
   13280:	add	r0, r5, #128	; 0x80
   13284:	ldrd	r0, [r0]
   13288:	lsl	r1, r1, #9
   1328c:	lsl	r6, r0, #9
   13290:	orr	sl, r1, r0, lsr #23
   13294:	movw	r0, #37476	; 0x9264
   13298:	str	r9, [sp, #100]	; 0x64
   1329c:	movt	r0, #4
   132a0:	ldr	r0, [r0]
   132a4:	cmp	r0, #2
   132a8:	beq	13308 <__assert_fail@plt+0x1440>
   132ac:	cmp	r0, #0
   132b0:	addne	r0, r5, #152	; 0x98
   132b4:	addeq	r0, r5, #144	; 0x90
   132b8:	b	1330c <__assert_fail@plt+0x1444>
   132bc:	movw	r0, #37440	; 0x9240
   132c0:	mov	r1, r9
   132c4:	movt	r0, #4
   132c8:	ldr	r0, [r0]
   132cc:	bl	153f8 <__assert_fail@plt+0x3530>
   132d0:	cmp	r0, #0
   132d4:	beq	13660 <__assert_fail@plt+0x1798>
   132d8:	mov	r8, #1
   132dc:	cmp	r7, #1
   132e0:	bne	131b0 <__assert_fail@plt+0x12e8>
   132e4:	mov	r0, r6
   132e8:	mov	r1, r5
   132ec:	mov	r2, #4
   132f0:	bl	199c4 <__assert_fail@plt+0x7afc>
   132f4:	mov	r0, r6
   132f8:	bl	18340 <__assert_fail@plt+0x6478>
   132fc:	cmp	r0, r5
   13300:	beq	131b0 <__assert_fail@plt+0x12e8>
   13304:	b	13f78 <__assert_fail@plt+0x20b0>
   13308:	add	r0, r5, #136	; 0x88
   1330c:	ldr	lr, [r0]
   13310:	ldr	ip, [r0, #4]
   13314:	ldr	r0, [sp, #96]	; 0x60
   13318:	movw	r2, #37540	; 0x92a4
   1331c:	mov	r1, #1
   13320:	ldr	r9, [r5, #48]	; 0x30
   13324:	str	sl, [sp, #148]	; 0x94
   13328:	str	r6, [sp, #144]	; 0x90
   1332c:	movt	r2, #4
   13330:	stm	r0, {r1, r4}
   13334:	ldr	r1, [r2]
   13338:	ldr	r0, [sp, #92]	; 0x5c
   1333c:	cmp	r1, #0
   13340:	str	lr, [r0]
   13344:	str	ip, [r0, #4]
   13348:	beq	1343c <__assert_fail@plt+0x1574>
   1334c:	movw	r0, #37536	; 0x92a0
   13350:	movt	r0, #4
   13354:	ldr	r0, [r0]
   13358:	cmp	r9, r0
   1335c:	beq	13468 <__assert_fail@plt+0x15a0>
   13360:	mov	r8, #0
   13364:	mvn	r4, #0
   13368:	bls	136dc <__assert_fail@plt+0x1814>
   1336c:	movw	r5, #37540	; 0x92a4
   13370:	mov	r2, #0
   13374:	cmp	r1, r9
   13378:	movt	r5, #4
   1337c:	str	r2, [sp, #112]	; 0x70
   13380:	mov	r2, #1
   13384:	str	r2, [sp, #116]	; 0x74
   13388:	bhi	133d8 <__assert_fail@plt+0x1510>
   1338c:	movw	r0, #37544	; 0x92a8
   13390:	mov	r1, r9
   13394:	mov	r2, #96	; 0x60
   13398:	mov	r7, r5
   1339c:	mov	r4, lr
   133a0:	mov	r5, ip
   133a4:	movt	r0, #4
   133a8:	mov	r8, r0
   133ac:	ldr	r0, [r0]
   133b0:	bl	31b08 <__assert_fail@plt+0x1fc40>
   133b4:	str	r0, [r8]
   133b8:	lsl	r0, r9, #1
   133bc:	mov	lr, r4
   133c0:	mov	ip, r5
   133c4:	mvn	r4, #0
   133c8:	str	r0, [r7]
   133cc:	movw	r0, #37536	; 0x92a0
   133d0:	movt	r0, #4
   133d4:	ldr	r0, [r0]
   133d8:	add	r1, r0, #1
   133dc:	cmp	r1, r9
   133e0:	bhi	13430 <__assert_fail@plt+0x1568>
   133e4:	movw	r2, #37544	; 0x92a8
   133e8:	add	r0, r0, r0, lsl #1
   133ec:	mov	r3, #-2147483648	; 0x80000000
   133f0:	movt	r2, #4
   133f4:	ldr	r2, [r2]
   133f8:	add	r0, r2, r0, lsl #4
   133fc:	add	r0, r0, #92	; 0x5c
   13400:	add	r1, r1, #1
   13404:	sub	r2, r0, #20
   13408:	str	r3, [r0, #-4]
   1340c:	str	r4, [r0]
   13410:	str	r3, [r0, #-28]	; 0xffffffe4
   13414:	str	r4, [r0, #-24]	; 0xffffffe8
   13418:	vst1.64	{d8-d9}, [r2]
   1341c:	sub	r2, r0, #44	; 0x2c
   13420:	add	r0, r0, #48	; 0x30
   13424:	cmp	r1, r9
   13428:	vst1.64	{d8-d9}, [r2]
   1342c:	bls	13400 <__assert_fail@plt+0x1538>
   13430:	str	r6, [sp, #108]	; 0x6c
   13434:	str	sl, [sp, #104]	; 0x68
   13438:	b	13484 <__assert_fail@plt+0x15bc>
   1343c:	add	r0, r9, #10
   13440:	mov	r1, #48	; 0x30
   13444:	mov	r4, lr
   13448:	mov	r5, ip
   1344c:	str	r0, [r2]
   13450:	bl	31f58 <__assert_fail@plt+0x20090>
   13454:	movw	r1, #37544	; 0x92a8
   13458:	mov	ip, r5
   1345c:	mov	lr, r4
   13460:	movt	r1, #4
   13464:	str	r0, [r1]
   13468:	mov	r0, #0
   1346c:	str	r6, [sp, #108]	; 0x6c
   13470:	str	sl, [sp, #104]	; 0x68
   13474:	mvn	r4, #0
   13478:	str	r0, [sp, #112]	; 0x70
   1347c:	mov	r0, #1
   13480:	str	r0, [sp, #116]	; 0x74
   13484:	movw	r0, #37536	; 0x92a0
   13488:	movt	r0, #4
   1348c:	str	r9, [r0]
   13490:	ldr	r0, [sp, #120]	; 0x78
   13494:	orr	r2, r0, #2
   13498:	cmp	r2, #6
   1349c:	bne	134b4 <__assert_fail@plt+0x15ec>
   134a0:	movw	r0, #37472	; 0x9260
   134a4:	movt	r0, #4
   134a8:	ldrb	r0, [r0]
   134ac:	cmp	r0, #0
   134b0:	bne	13540 <__assert_fail@plt+0x1678>
   134b4:	movw	r0, #37544	; 0x92a8
   134b8:	movt	r0, #4
   134bc:	ldr	r3, [r0]
   134c0:	add	r0, r9, r9, lsl #1
   134c4:	ldr	r0, [r3, r0, lsl #4]!
   134c8:	ldr	r5, [r3, #12]
   134cc:	ldmib	r3, {r1, r7}
   134d0:	adds	r7, r7, #1
   134d4:	str	r9, [sp, #120]	; 0x78
   134d8:	mov	r9, r6
   134dc:	ldr	r8, [r3, #20]
   134e0:	adc	r5, r5, #0
   134e4:	adds	r0, r0, r6
   134e8:	mov	r6, #0
   134ec:	adcs	r1, r1, sl
   134f0:	adcs	r6, r6, #0
   134f4:	mov	r6, r9
   134f8:	movne	r0, r4
   134fc:	movne	r1, r4
   13500:	stm	r3, {r0, r1, r7}
   13504:	str	r5, [r3, #12]
   13508:	mov	r1, #0
   1350c:	ldr	r0, [r3, #16]!
   13510:	ldr	r9, [sp, #120]	; 0x78
   13514:	cmp	r0, lr
   13518:	mov	r0, #0
   1351c:	movwgt	r0, #1
   13520:	sublt	r0, r0, #1
   13524:	cmp	r8, ip
   13528:	movwgt	r1, #1
   1352c:	sublt	r1, r1, #1
   13530:	add	r0, r1, r0, lsl #1
   13534:	cmn	r0, #1
   13538:	strle	lr, [r3]
   1353c:	strle	ip, [r3, #4]
   13540:	movw	r0, #37512	; 0x9288
   13544:	movt	r0, #4
   13548:	mov	r5, r0
   1354c:	ldr	r0, [r0]
   13550:	ldmib	r5, {r1, r3, r7}
   13554:	adds	r3, r3, #1
   13558:	adc	r7, r7, #0
   1355c:	adds	r0, r0, r6
   13560:	mov	r6, #0
   13564:	adcs	r1, r1, sl
   13568:	adcs	r6, r6, #0
   1356c:	movne	r0, r4
   13570:	movne	r1, r4
   13574:	stm	r5, {r0, r1, r3, r7}
   13578:	ldr	r0, [r5, #16]
   1357c:	ldr	r1, [r5, #20]
   13580:	cmp	r0, lr
   13584:	mov	r0, #0
   13588:	movwgt	r0, #1
   1358c:	sublt	r0, r0, #1
   13590:	cmp	r1, ip
   13594:	mov	r1, #0
   13598:	movwgt	r1, #1
   1359c:	sublt	r1, r1, #1
   135a0:	add	r0, r1, r0, lsl #1
   135a4:	cmn	r0, #1
   135a8:	bgt	135bc <__assert_fail@plt+0x16f4>
   135ac:	movw	r0, #37512	; 0x9288
   135b0:	movt	r0, #4
   135b4:	str	lr, [r0, #16]
   135b8:	str	ip, [r0, #20]
   135bc:	movw	r0, #37320	; 0x91c8
   135c0:	ldr	sl, [sp, #128]	; 0x80
   135c4:	ldr	r6, [sp, #88]	; 0x58
   135c8:	ldr	r8, [sp, #124]	; 0x7c
   135cc:	cmp	r2, #6
   135d0:	movt	r0, #4
   135d4:	ldr	r3, [r0]
   135d8:	bne	13634 <__assert_fail@plt+0x176c>
   135dc:	cmp	r9, r3
   135e0:	bhi	13634 <__assert_fail@plt+0x176c>
   135e4:	movw	r0, #37473	; 0x9261
   135e8:	ldr	r5, [sp, #104]	; 0x68
   135ec:	ldr	r7, [sp, #108]	; 0x6c
   135f0:	movt	r0, #4
   135f4:	ldrb	r0, [r0]
   135f8:	cmp	r0, #0
   135fc:	ldr	r0, [sp, #112]	; 0x70
   13600:	movne	r5, r0
   13604:	ldr	r0, [sp, #116]	; 0x74
   13608:	movne	r7, r0
   1360c:	movw	r0, #37464	; 0x9258
   13610:	movt	r0, #4
   13614:	ldrd	r2, [r0]
   13618:	cmn	r3, #1
   1361c:	bgt	1319c <__assert_fail@plt+0x12d4>
   13620:	rsbs	r0, r2, #0
   13624:	rsc	r1, r3, #0
   13628:	subs	r0, r0, r7
   1362c:	sbcs	r0, r1, r5
   13630:	b	131a4 <__assert_fail@plt+0x12dc>
   13634:	cmp	r9, r3
   13638:	mov	r2, #0
   1363c:	movwls	r2, #1
   13640:	cmp	r9, #0
   13644:	beq	135e4 <__assert_fail@plt+0x171c>
   13648:	movw	r0, #37457	; 0x9251
   1364c:	movt	r0, #4
   13650:	ldrb	r0, [r0]
   13654:	ands	r0, r0, r2
   13658:	beq	131b0 <__assert_fail@plt+0x12e8>
   1365c:	b	135e4 <__assert_fail@plt+0x171c>
   13660:	cmp	r7, #11
   13664:	bne	1368c <__assert_fail@plt+0x17c4>
   13668:	mov	r0, r6
   1366c:	mov	r1, r5
   13670:	mov	r2, #1
   13674:	bl	199c4 <__assert_fail@plt+0x7afc>
   13678:	mov	r0, r6
   1367c:	bl	18340 <__assert_fail@plt+0x6478>
   13680:	cmp	r0, r5
   13684:	bne	13f8c <__assert_fail@plt+0x20c4>
   13688:	ldrh	r7, [r5, #56]	; 0x38
   1368c:	cmp	r7, #13
   13690:	cmpne	r7, #10
   13694:	bne	13a04 <__assert_fail@plt+0x1b3c>
   13698:	movw	r1, #30020	; 0x7544
   1369c:	ldr	r4, [r5, #32]
   136a0:	mov	r0, #0
   136a4:	mov	r2, #5
   136a8:	mov	r8, #0
   136ac:	movt	r1, #3
   136b0:	bl	11afc <dcgettext@plt>
   136b4:	mov	r5, r0
   136b8:	mov	r0, #4
   136bc:	mov	r1, r9
   136c0:	bl	1e99c <__assert_fail@plt+0xcad4>
   136c4:	mov	r3, r0
   136c8:	mov	r0, #0
   136cc:	mov	r1, r4
   136d0:	mov	r2, r5
   136d4:	bl	11bd4 <error@plt>
   136d8:	b	131b0 <__assert_fail@plt+0x12e8>
   136dc:	sub	r1, r0, #1
   136e0:	cmp	r9, r1
   136e4:	bne	13f60 <__assert_fail@plt+0x2098>
   136e8:	movw	r1, #37544	; 0x92a8
   136ec:	add	r5, r0, r0, lsl #1
   136f0:	mov	r7, ip
   136f4:	movt	r1, #4
   136f8:	ldr	r1, [r1]
   136fc:	mov	r3, r1
   13700:	str	r1, [sp, #84]	; 0x54
   13704:	ldr	r0, [r3, r5, lsl #4]!
   13708:	ldr	r1, [r3, #4]
   1370c:	str	r0, [sp, #80]	; 0x50
   13710:	adds	r0, r0, r6
   13714:	str	r1, [sp, #64]	; 0x40
   13718:	adcs	r1, r1, sl
   1371c:	adcs	r2, r8, #0
   13720:	movne	r1, r4
   13724:	movne	r0, r4
   13728:	str	r1, [sp, #148]	; 0x94
   1372c:	str	r0, [sp, #144]	; 0x90
   13730:	str	r1, [sp, #104]	; 0x68
   13734:	str	r0, [sp, #108]	; 0x6c
   13738:	ldr	r1, [r3, #8]
   1373c:	ldr	r0, [r3, #12]
   13740:	str	r1, [sp, #52]	; 0x34
   13744:	adds	r1, r1, #1
   13748:	str	r0, [sp, #56]	; 0x38
   1374c:	adc	r2, r0, #0
   13750:	ldr	r0, [sp, #96]	; 0x60
   13754:	str	r1, [sp, #116]	; 0x74
   13758:	str	r2, [sp, #112]	; 0x70
   1375c:	stm	r0, {r1, r2}
   13760:	mov	r1, r3
   13764:	ldr	r2, [r1, #16]!
   13768:	mov	r0, r1
   1376c:	ldr	r3, [r0, #4]!
   13770:	str	r0, [sp, #60]	; 0x3c
   13774:	mov	r0, lr
   13778:	cmp	r2, lr
   1377c:	mov	r2, #0
   13780:	movwlt	r2, #1
   13784:	subgt	r2, r2, #1
   13788:	cmp	r3, ip
   1378c:	mov	r3, #0
   13790:	movwlt	r3, #1
   13794:	subgt	r3, r3, #1
   13798:	add	r2, r3, r2, lsl #1
   1379c:	cmn	r2, #1
   137a0:	bgt	137b0 <__assert_fail@plt+0x18e8>
   137a4:	ldr	r2, [sp, #92]	; 0x5c
   137a8:	ldm	r1, {r0, r7}
   137ac:	stm	r2, {r0, r7}
   137b0:	movw	r2, #37472	; 0x9260
   137b4:	str	r1, [sp, #68]	; 0x44
   137b8:	str	lr, [sp, #76]	; 0x4c
   137bc:	str	r5, [sp, #72]	; 0x48
   137c0:	movt	r2, #4
   137c4:	ldrb	r2, [r2]
   137c8:	cmp	r2, #0
   137cc:	bne	13874 <__assert_fail@plt+0x19ac>
   137d0:	ldr	r1, [sp, #84]	; 0x54
   137d4:	add	r2, r1, r5, lsl #4
   137d8:	ldr	r1, [sp, #108]	; 0x6c
   137dc:	ldr	r5, [r2, #24]
   137e0:	ldr	r3, [r2, #28]
   137e4:	adds	r1, r5, r1
   137e8:	ldr	r5, [sp, #104]	; 0x68
   137ec:	adcs	r5, r3, r5
   137f0:	adcs	r3, r8, #0
   137f4:	ldr	r8, [sp, #112]	; 0x70
   137f8:	movne	r5, r4
   137fc:	movne	r1, r4
   13800:	str	r5, [sp, #148]	; 0x94
   13804:	str	r1, [sp, #144]	; 0x90
   13808:	str	r1, [sp, #108]	; 0x6c
   1380c:	ldr	r1, [sp, #116]	; 0x74
   13810:	str	r5, [sp, #104]	; 0x68
   13814:	ldr	r3, [r2, #32]
   13818:	ldr	r5, [r2, #36]	; 0x24
   1381c:	adds	r1, r3, r1
   13820:	ldr	r3, [sp, #96]	; 0x60
   13824:	adc	r8, r5, r8
   13828:	str	r1, [sp, #116]	; 0x74
   1382c:	str	r8, [sp, #112]	; 0x70
   13830:	stm	r3, {r1, r8}
   13834:	ldr	r3, [r2, #40]!	; 0x28
   13838:	ldr	r5, [r2, #4]
   1383c:	cmp	r0, r3
   13840:	mov	r3, #0
   13844:	movwgt	r3, #1
   13848:	sublt	r3, r3, #1
   1384c:	cmp	r7, r5
   13850:	mov	r5, #0
   13854:	movwgt	r5, #1
   13858:	sublt	r5, r5, #1
   1385c:	add	r3, r5, r3, lsl #1
   13860:	cmn	r3, #1
   13864:	bgt	13874 <__assert_fail@plt+0x19ac>
   13868:	ldrd	r2, [r2]
   1386c:	ldr	r0, [sp, #92]	; 0x5c
   13870:	strd	r2, [r0]
   13874:	ldr	r0, [sp, #84]	; 0x54
   13878:	add	r2, r9, r9, lsl #1
   1387c:	add	r7, r0, r2, lsl #4
   13880:	ldr	r0, [sp, #80]	; 0x50
   13884:	ldr	r2, [r7, #24]!
   13888:	ldr	r5, [r7, #4]
   1388c:	mov	r3, r7
   13890:	ldr	r1, [r7, #12]
   13894:	adds	r8, r2, r0
   13898:	ldr	r0, [sp, #64]	; 0x40
   1389c:	ldr	r2, [r3, #8]!
   138a0:	adcs	r5, r5, r0
   138a4:	mov	r0, #0
   138a8:	adcs	lr, r0, #0
   138ac:	ldr	r0, [sp, #52]	; 0x34
   138b0:	str	r3, [sp, #52]	; 0x34
   138b4:	movne	r8, r4
   138b8:	adds	r0, r2, r0
   138bc:	str	r0, [sp, #64]	; 0x40
   138c0:	str	r0, [r3]
   138c4:	ldr	r0, [sp, #56]	; 0x38
   138c8:	adc	r0, r1, r0
   138cc:	cmp	lr, #0
   138d0:	mov	lr, #0
   138d4:	movne	r5, r4
   138d8:	str	r0, [sp, #56]	; 0x38
   138dc:	str	r0, [r7, #12]
   138e0:	mov	r0, r7
   138e4:	str	r5, [sp, #48]	; 0x30
   138e8:	str	r8, [r7]
   138ec:	str	r5, [r7, #4]
   138f0:	ldr	r4, [sp, #68]	; 0x44
   138f4:	ldr	r3, [r0, #16]!
   138f8:	str	r0, [sp, #32]
   138fc:	ldr	r0, [sp, #60]	; 0x3c
   13900:	ldr	r2, [r4]
   13904:	ldr	r0, [r0]
   13908:	cmp	r3, r2
   1390c:	mov	r2, r7
   13910:	ldr	r5, [r2, #20]!
   13914:	movwgt	lr, #1
   13918:	sublt	lr, lr, #1
   1391c:	cmp	r5, r0
   13920:	str	r5, [sp, #80]	; 0x50
   13924:	mov	r5, #0
   13928:	movwgt	r5, #1
   1392c:	sublt	r5, r5, #1
   13930:	add	r5, r5, lr, lsl #1
   13934:	mov	lr, r3
   13938:	cmn	r5, #1
   1393c:	bgt	1395c <__assert_fail@plt+0x1a94>
   13940:	ldr	lr, [r4]
   13944:	ldr	r5, [r4, #4]
   13948:	ldr	r0, [sp, #32]
   1394c:	str	lr, [r0]
   13950:	str	r5, [r0, #4]
   13954:	ldr	r0, [r2]
   13958:	str	r0, [sp, #80]	; 0x50
   1395c:	ldr	r0, [sp, #72]	; 0x48
   13960:	ldr	r1, [sp, #84]	; 0x54
   13964:	ldr	r3, [sp, #48]	; 0x30
   13968:	mvn	r4, #0
   1396c:	add	r2, r1, r0, lsl #4
   13970:	ldr	r5, [r2, #24]
   13974:	ldr	r1, [r2, #28]
   13978:	adds	r0, r5, r8
   1397c:	mov	r5, #0
   13980:	adcs	r1, r1, r3
   13984:	mvn	r3, #0
   13988:	adcs	r5, r5, #0
   1398c:	movne	r1, r3
   13990:	movne	r0, r3
   13994:	strd	r0, [r7]
   13998:	ldr	r0, [r2, #32]
   1399c:	ldr	r3, [sp, #64]	; 0x40
   139a0:	ldr	r1, [r2, #36]	; 0x24
   139a4:	adds	r0, r0, r3
   139a8:	ldr	r3, [sp, #56]	; 0x38
   139ac:	adc	r1, r1, r3
   139b0:	ldr	r3, [sp, #52]	; 0x34
   139b4:	strd	r0, [r3]
   139b8:	ldr	r0, [r2, #40]!	; 0x28
   139bc:	ldr	r3, [sp, #80]	; 0x50
   139c0:	ldr	r1, [r2, #4]
   139c4:	cmp	lr, r0
   139c8:	mov	r0, #0
   139cc:	ldr	lr, [sp, #76]	; 0x4c
   139d0:	movwgt	r0, #1
   139d4:	sublt	r0, r0, #1
   139d8:	cmp	r3, r1
   139dc:	mov	r1, #0
   139e0:	movwgt	r1, #1
   139e4:	sublt	r1, r1, #1
   139e8:	add	r0, r1, r0, lsl #1
   139ec:	cmn	r0, #1
   139f0:	bgt	13484 <__assert_fail@plt+0x15bc>
   139f4:	ldrd	r0, [r2]
   139f8:	ldr	r2, [sp, #32]
   139fc:	strd	r0, [r2]
   13a00:	b	13484 <__assert_fail@plt+0x15bc>
   13a04:	ldrb	r1, [r6, #48]	; 0x30
   13a08:	add	r0, r5, #64	; 0x40
   13a0c:	tst	r1, #64	; 0x40
   13a10:	beq	13a40 <__assert_fail@plt+0x1b78>
   13a14:	ldr	r1, [r5, #48]	; 0x30
   13a18:	cmp	r1, #1
   13a1c:	blt	13a40 <__assert_fail@plt+0x1b78>
   13a20:	ldr	r1, [sp, #24]
   13a24:	ldrd	r2, [r0]
   13a28:	ldr	r4, [r1]
   13a2c:	ldr	r1, [r1, #4]
   13a30:	eor	r1, r1, r3
   13a34:	eor	r2, r4, r2
   13a38:	orrs	r1, r2, r1
   13a3c:	bne	132d8 <__assert_fail@plt+0x1410>
   13a40:	movw	r1, #37460	; 0x9254
   13a44:	movt	r1, #4
   13a48:	ldrb	r1, [r1]
   13a4c:	cmp	r1, #0
   13a50:	bne	13ac0 <__assert_fail@plt+0x1bf8>
   13a54:	movw	r1, #37492	; 0x9274
   13a58:	movt	r1, #4
   13a5c:	ldrb	r1, [r1]
   13a60:	cmp	r1, #0
   13a64:	beq	13aa4 <__assert_fail@plt+0x1bdc>
   13a68:	ldrd	r2, [r0]
   13a6c:	movw	r0, #37496	; 0x9278
   13a70:	add	r1, r5, #160	; 0xa0
   13a74:	movt	r0, #4
   13a78:	ldr	r4, [r1]
   13a7c:	ldr	r1, [r1, #4]
   13a80:	ldr	r0, [r0]
   13a84:	str	r4, [sp]
   13a88:	str	r1, [sp, #4]
   13a8c:	bl	14c20 <__assert_fail@plt+0x2d58>
   13a90:	cmn	r0, #1
   13a94:	ble	14010 <__assert_fail@plt+0x2148>
   13a98:	cmp	r0, #0
   13a9c:	bne	13ac0 <__assert_fail@plt+0x1bf8>
   13aa0:	b	132d8 <__assert_fail@plt+0x1410>
   13aa4:	ldr	r1, [r5, #80]	; 0x50
   13aa8:	and	r1, r1, #61440	; 0xf000
   13aac:	cmp	r1, #16384	; 0x4000
   13ab0:	beq	13ac0 <__assert_fail@plt+0x1bf8>
   13ab4:	ldr	r1, [r5, #84]	; 0x54
   13ab8:	cmp	r1, #2
   13abc:	bcs	13a68 <__assert_fail@plt+0x1ba0>
   13ac0:	mov	r8, #1
   13ac4:	cmp	r7, #1
   13ac8:	beq	131b0 <__assert_fail@plt+0x12e8>
   13acc:	mov	r0, r7
   13ad0:	cmp	r7, #2
   13ad4:	beq	13b24 <__assert_fail@plt+0x1c5c>
   13ad8:	mov	r7, r0
   13adc:	cmp	r0, #7
   13ae0:	mov	r4, #0
   13ae4:	bne	13238 <__assert_fail@plt+0x1370>
   13ae8:	ldr	r4, [r5, #32]
   13aec:	mov	r0, #0
   13af0:	mov	r1, #3
   13af4:	mov	r2, r9
   13af8:	mov	r8, #0
   13afc:	bl	1ec18 <__assert_fail@plt+0xcd50>
   13b00:	movw	r2, #30942	; 0x78de
   13b04:	mov	r3, r0
   13b08:	mov	r1, r4
   13b0c:	mov	r0, #0
   13b10:	mov	r4, #0
   13b14:	movt	r2, #3
   13b18:	bl	11bd4 <error@plt>
   13b1c:	mov	r7, #7
   13b20:	b	13238 <__assert_fail@plt+0x1370>
   13b24:	mov	r0, r6
   13b28:	mov	r1, r5
   13b2c:	bl	32110 <__assert_fail@plt+0x20248>
   13b30:	cmp	r0, #0
   13b34:	beq	131b0 <__assert_fail@plt+0x12e8>
   13b38:	movw	r0, #37508	; 0x9284
   13b3c:	ldr	r7, [r5]
   13b40:	movt	r0, #4
   13b44:	ldr	r0, [r0]
   13b48:	cmp	r0, #0
   13b4c:	bne	13bf4 <__assert_fail@plt+0x1d2c>
   13b50:	bl	14b18 <__assert_fail@plt+0x2c50>
   13b54:	movw	r1, #37508	; 0x9284
   13b58:	cmp	r0, #0
   13b5c:	movt	r1, #4
   13b60:	str	r0, [r1]
   13b64:	beq	14010 <__assert_fail@plt+0x2148>
   13b68:	mov	r0, #0
   13b6c:	bl	1c518 <__assert_fail@plt+0xa650>
   13b70:	cmp	r0, #0
   13b74:	beq	13bf4 <__assert_fail@plt+0x1d2c>
   13b78:	mov	r6, r0
   13b7c:	b	13b98 <__assert_fail@plt+0x1cd0>
   13b80:	ldr	r4, [r6, #28]
   13b84:	mov	r0, r6
   13b88:	bl	1d194 <__assert_fail@plt+0xb2cc>
   13b8c:	cmp	r4, #0
   13b90:	mov	r6, r4
   13b94:	beq	13bf4 <__assert_fail@plt+0x1d2c>
   13b98:	ldrb	r0, [r6, #24]
   13b9c:	tst	r0, #3
   13ba0:	bne	13b80 <__assert_fail@plt+0x1cb8>
   13ba4:	ldr	r1, [r6, #4]
   13ba8:	mov	r0, #3
   13bac:	sub	r2, fp, #160	; 0xa0
   13bb0:	bl	11e5c <__xstat64@plt>
   13bb4:	cmp	r0, #0
   13bb8:	bne	13b80 <__assert_fail@plt+0x1cb8>
   13bbc:	ldr	r1, [sp, #20]
   13bc0:	movw	r0, #37508	; 0x9284
   13bc4:	mov	r4, r9
   13bc8:	ldr	r2, [fp, #-160]	; 0xffffff60
   13bcc:	ldr	r3, [fp, #-156]	; 0xffffff64
   13bd0:	movt	r0, #4
   13bd4:	ldr	r0, [r0]
   13bd8:	ldrd	r8, [r1]
   13bdc:	stm	sp, {r8, r9}
   13be0:	mov	r9, r4
   13be4:	bl	14c20 <__assert_fail@plt+0x2d58>
   13be8:	cmn	r0, #1
   13bec:	bgt	13b80 <__assert_fail@plt+0x1cb8>
   13bf0:	b	14010 <__assert_fail@plt+0x2148>
   13bf4:	cmp	r7, r5
   13bf8:	beq	13c38 <__assert_fail@plt+0x1d70>
   13bfc:	movw	r0, #37508	; 0x9284
   13c00:	ldrd	r2, [r5, #64]	; 0x40
   13c04:	ldr	r4, [r5, #160]	; 0xa0
   13c08:	ldr	r1, [r5, #164]	; 0xa4
   13c0c:	movt	r0, #4
   13c10:	ldr	r0, [r0]
   13c14:	str	r4, [sp]
   13c18:	str	r1, [sp, #4]
   13c1c:	bl	14d64 <__assert_fail@plt+0x2e9c>
   13c20:	cmp	r0, #0
   13c24:	bgt	13c80 <__assert_fail@plt+0x1db8>
   13c28:	ldr	r5, [r5, #4]
   13c2c:	cmp	r5, #0
   13c30:	cmpne	r5, r7
   13c34:	bne	13bfc <__assert_fail@plt+0x1d34>
   13c38:	movw	r1, #30037	; 0x7555
   13c3c:	mov	r0, #0
   13c40:	mov	r2, #5
   13c44:	mov	r8, #0
   13c48:	movt	r1, #3
   13c4c:	bl	11afc <dcgettext@plt>
   13c50:	mov	r4, r0
   13c54:	mov	r0, #0
   13c58:	mov	r1, #3
   13c5c:	mov	r2, r9
   13c60:	bl	1ec18 <__assert_fail@plt+0xcd50>
   13c64:	mov	r3, r0
   13c68:	mov	r0, #0
   13c6c:	mov	r1, #0
   13c70:	mov	r2, r4
   13c74:	bl	11bd4 <error@plt>
   13c78:	ldr	r6, [sp, #88]	; 0x58
   13c7c:	b	131b0 <__assert_fail@plt+0x12e8>
   13c80:	ldr	r6, [sp, #88]	; 0x58
   13c84:	mov	r8, #1
   13c88:	b	131b0 <__assert_fail@plt+0x12e8>
   13c8c:	movw	r1, #28787	; 0x7073
   13c90:	mov	r0, #0
   13c94:	mov	r2, #5
   13c98:	mov	r6, #0
   13c9c:	movt	r1, #3
   13ca0:	bl	11afc <dcgettext@plt>
   13ca4:	movw	r2, #30942	; 0x78de
   13ca8:	mov	r3, r0
   13cac:	mov	r0, #0
   13cb0:	mov	r1, #0
   13cb4:	movt	r2, #3
   13cb8:	b	13098 <__assert_fail@plt+0x11d0>
   13cbc:	mov	sl, #1
   13cc0:	bl	11cdc <__errno_location@plt>
   13cc4:	ldr	r5, [r0]
   13cc8:	mov	r4, r0
   13ccc:	cmp	r5, #0
   13cd0:	beq	13d14 <__assert_fail@plt+0x1e4c>
   13cd4:	movw	r1, #29913	; 0x74d9
   13cd8:	mov	r0, #0
   13cdc:	mov	r2, #5
   13ce0:	mov	sl, #0
   13ce4:	movt	r1, #3
   13ce8:	bl	11afc <dcgettext@plt>
   13cec:	ldr	r2, [r6, #24]
   13cf0:	mov	r8, r0
   13cf4:	mov	r0, #0
   13cf8:	mov	r1, #3
   13cfc:	bl	1ec18 <__assert_fail@plt+0xcd50>
   13d00:	mov	r3, r0
   13d04:	mov	r0, #0
   13d08:	mov	r1, r5
   13d0c:	mov	r2, r8
   13d10:	bl	11bd4 <error@plt>
   13d14:	movw	r0, #37536	; 0x92a0
   13d18:	mov	r1, #0
   13d1c:	movt	r0, #4
   13d20:	str	r1, [r0]
   13d24:	mov	r0, r6
   13d28:	bl	18198 <__assert_fail@plt+0x62d0>
   13d2c:	cmp	r0, #0
   13d30:	beq	13d60 <__assert_fail@plt+0x1e98>
   13d34:	movw	r1, #29933	; 0x74ed
   13d38:	ldr	r4, [r4]
   13d3c:	mov	r0, #0
   13d40:	mov	r2, #5
   13d44:	mov	sl, #0
   13d48:	movt	r1, #3
   13d4c:	bl	11afc <dcgettext@plt>
   13d50:	mov	r2, r0
   13d54:	mov	r0, #0
   13d58:	mov	r1, r4
   13d5c:	bl	11bd4 <error@plt>
   13d60:	ldr	r0, [sp, #40]	; 0x28
   13d64:	cmp	sl, #0
   13d68:	movwne	sl, #1
   13d6c:	and	r6, r0, sl
   13d70:	b	1309c <__assert_fail@plt+0x11d4>
   13d74:	mov	r6, #1
   13d78:	ldr	r0, [sp, #132]	; 0x84
   13d7c:	cmp	r0, #2
   13d80:	beq	13dd4 <__assert_fail@plt+0x1f0c>
   13d84:	cmp	r0, #4
   13d88:	bne	14008 <__assert_fail@plt+0x2140>
   13d8c:	bl	11cdc <__errno_location@plt>
   13d90:	movw	r1, #28637	; 0x6fdd
   13d94:	ldr	r4, [r0]
   13d98:	mov	r0, #0
   13d9c:	mov	r2, #5
   13da0:	mov	r6, #0
   13da4:	movt	r1, #3
   13da8:	bl	11afc <dcgettext@plt>
   13dac:	ldr	r2, [sp, #36]	; 0x24
   13db0:	mov	r5, r0
   13db4:	mov	r0, #0
   13db8:	mov	r1, #3
   13dbc:	bl	1ec18 <__assert_fail@plt+0xcd50>
   13dc0:	mov	r3, r0
   13dc4:	mov	r0, #0
   13dc8:	mov	r1, r4
   13dcc:	mov	r2, r5
   13dd0:	bl	11bd4 <error@plt>
   13dd4:	ldr	r0, [sp, #44]	; 0x2c
   13dd8:	bl	149e4 <__assert_fail@plt+0x2b1c>
   13ddc:	movw	r0, #37496	; 0x9278
   13de0:	movt	r0, #4
   13de4:	ldr	r0, [r0]
   13de8:	bl	14be8 <__assert_fail@plt+0x2d20>
   13dec:	movw	r0, #37508	; 0x9284
   13df0:	movt	r0, #4
   13df4:	ldr	r0, [r0]
   13df8:	cmp	r0, #0
   13dfc:	beq	13e04 <__assert_fail@plt+0x1f3c>
   13e00:	bl	14be8 <__assert_fail@plt+0x2d20>
   13e04:	ldr	r0, [sp, #36]	; 0x24
   13e08:	cmp	r0, #0
   13e0c:	beq	13e7c <__assert_fail@plt+0x1fb4>
   13e10:	movw	r0, #37424	; 0x9230
   13e14:	movt	r0, #4
   13e18:	ldr	r0, [r0]
   13e1c:	ldrb	r1, [r0]
   13e20:	tst	r1, #32
   13e24:	bne	13e74 <__assert_fail@plt+0x1fac>
   13e28:	bl	15d38 <__assert_fail@plt+0x3e70>
   13e2c:	cmp	r0, #0
   13e30:	beq	13e7c <__assert_fail@plt+0x1fb4>
   13e34:	eors	r0, r6, #1
   13e38:	bne	13e7c <__assert_fail@plt+0x1fb4>
   13e3c:	movw	r1, #28828	; 0x709c
   13e40:	mov	r0, #0
   13e44:	mov	r2, #5
   13e48:	movt	r1, #3
   13e4c:	bl	11afc <dcgettext@plt>
   13e50:	ldr	r1, [sp, #36]	; 0x24
   13e54:	mov	r4, r0
   13e58:	mov	r0, #4
   13e5c:	bl	1e99c <__assert_fail@plt+0xcad4>
   13e60:	mov	r3, r0
   13e64:	mov	r0, #1
   13e68:	mov	r1, #0
   13e6c:	mov	r2, r4
   13e70:	bl	11bd4 <error@plt>
   13e74:	cmp	r6, #0
   13e78:	bne	13e3c <__assert_fail@plt+0x1f74>
   13e7c:	movw	r0, #37459	; 0x9253
   13e80:	movt	r0, #4
   13e84:	ldrb	r0, [r0]
   13e88:	cmp	r0, #1
   13e8c:	bne	13eb4 <__assert_fail@plt+0x1fec>
   13e90:	movw	r1, #28845	; 0x70ad
   13e94:	mov	r0, #0
   13e98:	mov	r2, #5
   13e9c:	movt	r1, #3
   13ea0:	bl	11afc <dcgettext@plt>
   13ea4:	mov	r1, r0
   13ea8:	movw	r0, #37512	; 0x9288
   13eac:	movt	r0, #4
   13eb0:	bl	14150 <__assert_fail@plt+0x2288>
   13eb4:	eor	r0, r6, #1
   13eb8:	sub	sp, fp, #48	; 0x30
   13ebc:	vpop	{d8-d9}
   13ec0:	add	sp, sp, #4
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	movw	r8, #30748	; 0x781c
   13ecc:	movt	r8, #3
   13ed0:	add	r7, r7, #6
   13ed4:	mov	r1, r8
   13ed8:	mov	r2, #6
   13edc:	mov	r0, r7
   13ee0:	str	r7, [r4]
   13ee4:	bl	11e80 <strncmp@plt>
   13ee8:	cmp	r0, #0
   13eec:	beq	13ed0 <__assert_fail@plt+0x2008>
   13ef0:	b	12e24 <__assert_fail@plt+0xf5c>
   13ef4:	movw	r0, #37324	; 0x91cc
   13ef8:	movw	r2, #28228	; 0x6e44
   13efc:	movw	r5, #28182	; 0x6e16
   13f00:	movw	r7, #28216	; 0x6e38
   13f04:	movw	r6, #28200	; 0x6e28
   13f08:	mov	r1, #0
   13f0c:	movt	r0, #4
   13f10:	movt	r2, #3
   13f14:	movt	r5, #3
   13f18:	movt	r7, #3
   13f1c:	movt	r6, #3
   13f20:	ldr	r3, [r0]
   13f24:	movw	r0, #37428	; 0x9234
   13f28:	stm	sp, {r5, r6, r7}
   13f2c:	str	r2, [sp, #12]
   13f30:	movw	r2, #28168	; 0x6e08
   13f34:	str	r1, [sp, #16]
   13f38:	movw	r1, #28022	; 0x6d76
   13f3c:	movt	r0, #4
   13f40:	movt	r1, #3
   13f44:	movt	r2, #3
   13f48:	ldr	r0, [r0]
   13f4c:	bl	31910 <__assert_fail@plt+0x1fa48>
   13f50:	mov	r0, #0
   13f54:	bl	11c88 <exit@plt>
   13f58:	mov	r0, #0
   13f5c:	bl	11fd0 <__assert_fail@plt+0x108>
   13f60:	movw	r0, #30223	; 0x760f
   13f64:	movw	r1, #28692	; 0x7014
   13f68:	movw	r3, #29984	; 0x7520
   13f6c:	movw	r2, #638	; 0x27e
   13f70:	movt	r0, #3
   13f74:	b	13fa0 <__assert_fail@plt+0x20d8>
   13f78:	movw	r0, #29975	; 0x7517
   13f7c:	movw	r1, #28692	; 0x7014
   13f80:	movw	r3, #29984	; 0x7520
   13f84:	mov	r2, #560	; 0x230
   13f88:	b	13f9c <__assert_fail@plt+0x20d4>
   13f8c:	movw	r0, #29975	; 0x7517
   13f90:	movw	r1, #28692	; 0x7014
   13f94:	movw	r3, #29984	; 0x7520
   13f98:	movw	r2, #527	; 0x20f
   13f9c:	movt	r0, #3
   13fa0:	movt	r1, #3
   13fa4:	movt	r3, #3
   13fa8:	bl	11ec8 <__assert_fail@plt>
   13fac:	ldr	r2, [r7]
   13fb0:	ldr	r1, [sp, #144]	; 0x90
   13fb4:	movw	r3, #30288	; 0x7650
   13fb8:	movt	r3, #3
   13fbc:	str	r2, [sp]
   13fc0:	mov	r2, #116	; 0x74
   13fc4:	bl	33a58 <__assert_fail@plt+0x21b90>
   13fc8:	ldr	r2, [r4]
   13fcc:	ldr	r1, [sp, #144]	; 0x90
   13fd0:	movw	r3, #30288	; 0x7650
   13fd4:	movt	r3, #3
   13fd8:	str	r2, [sp]
   13fdc:	mov	r2, #66	; 0x42
   13fe0:	bl	33a58 <__assert_fail@plt+0x21b90>
   13fe4:	movw	r1, #28124	; 0x6ddc
   13fe8:	mov	r0, #0
   13fec:	mov	r2, #5
   13ff0:	movt	r1, #3
   13ff4:	bl	11afc <dcgettext@plt>
   13ff8:	mov	r2, r0
   13ffc:	mov	r0, #1
   14000:	mov	r1, #0
   14004:	bl	11bd4 <error@plt>
   14008:	cmp	r0, #3
   1400c:	bne	14048 <__assert_fail@plt+0x2180>
   14010:	bl	32080 <__assert_fail@plt+0x201b8>
   14014:	mov	r0, #1
   14018:	bl	11fd0 <__assert_fail@plt+0x108>
   1401c:	movw	r1, #28241	; 0x6e51
   14020:	mov	r0, #0
   14024:	mov	r2, #5
   14028:	movt	r1, #3
   1402c:	bl	11afc <dcgettext@plt>
   14030:	mov	r2, r0
   14034:	mov	r0, #0
   14038:	mov	r1, #0
   1403c:	bl	11bd4 <error@plt>
   14040:	mov	r0, #1
   14044:	bl	11fd0 <__assert_fail@plt+0x108>
   14048:	movw	r0, #28652	; 0x6fec
   1404c:	movw	r1, #28692	; 0x7014
   14050:	movw	r3, #28701	; 0x701d
   14054:	movw	r2, #1081	; 0x439
   14058:	movt	r0, #3
   1405c:	movt	r1, #3
   14060:	movt	r3, #3
   14064:	bl	11ec8 <__assert_fail@plt>
   14068:	movw	r1, #28541	; 0x6f7d
   1406c:	mov	r0, #0
   14070:	mov	r2, #5
   14074:	movt	r1, #3
   14078:	bl	11afc <dcgettext@plt>
   1407c:	mov	r4, r0
   14080:	ldr	r0, [r7]
   14084:	ldr	r0, [r5, r0, lsl #2]
   14088:	bl	1eec4 <__assert_fail@plt+0xcffc>
   1408c:	mov	r3, r0
   14090:	mov	r0, #0
   14094:	mov	r1, #0
   14098:	mov	r2, r4
   1409c:	bl	11bd4 <error@plt>
   140a0:	movw	r0, #37416	; 0x9228
   140a4:	movw	r1, #28558	; 0x6f8e
   140a8:	mov	r2, #5
   140ac:	movt	r0, #4
   140b0:	movt	r1, #3
   140b4:	ldr	r4, [r0]
   140b8:	mov	r0, #0
   140bc:	bl	11afc <dcgettext@plt>
   140c0:	movw	r2, #30219	; 0x760b
   140c4:	mov	r3, r0
   140c8:	mov	r0, r4
   140cc:	mov	r1, #1
   140d0:	movt	r2, #3
   140d4:	bl	11d3c <__fprintf_chk@plt>
   140d8:	mov	r0, #1
   140dc:	bl	11fd0 <__assert_fail@plt+0x108>
   140e0:	movw	r1, #28340	; 0x6eb4
   140e4:	mov	r0, #0
   140e8:	mov	r2, #5
   140ec:	movt	r1, #3
   140f0:	bl	11afc <dcgettext@plt>
   140f4:	mov	r2, r0
   140f8:	mov	r0, #0
   140fc:	mov	r1, #0
   14100:	mov	r3, r4
   14104:	bl	11bd4 <error@plt>
   14108:	mov	r0, #1
   1410c:	bl	11fd0 <__assert_fail@plt+0x108>
   14110:	bl	11cdc <__errno_location@plt>
   14114:	movw	r1, #28610	; 0x6fc2
   14118:	ldr	r4, [r0]
   1411c:	mov	r0, #0
   14120:	mov	r2, #5
   14124:	movt	r1, #3
   14128:	bl	11afc <dcgettext@plt>
   1412c:	mov	r5, r0
   14130:	mov	r0, #4
   14134:	mov	r1, r6
   14138:	bl	1e99c <__assert_fail@plt+0xcad4>
   1413c:	mov	r3, r0
   14140:	mov	r0, #1
   14144:	mov	r1, r4
   14148:	mov	r2, r5
   1414c:	bl	11bd4 <error@plt>
   14150:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14154:	add	fp, sp, #24
   14158:	sub	sp, sp, #704	; 0x2c0
   1415c:	mov	r5, r0
   14160:	movw	r0, #37473	; 0x9261
   14164:	mov	r8, r1
   14168:	movt	r0, #4
   1416c:	ldrb	r0, [r0]
   14170:	cmp	r0, #0
   14174:	mov	r0, r5
   14178:	addne	r0, r0, #8
   1417c:	ldrd	r0, [r0]
   14180:	and	r2, r0, r1
   14184:	cmn	r2, #1
   14188:	beq	141c4 <__assert_fail@plt+0x22fc>
   1418c:	movw	r2, #37444	; 0x9244
   14190:	mov	r4, #1
   14194:	mov	r6, #0
   14198:	movt	r2, #4
   1419c:	stm	sp, {r4, r6}
   141a0:	ldr	r3, [r2]
   141a4:	movw	r2, #37448	; 0x9248
   141a8:	movt	r2, #4
   141ac:	ldm	r2, {r2, r7}
   141b0:	str	r7, [sp, #12]
   141b4:	str	r2, [sp, #8]
   141b8:	add	r2, sp, #20
   141bc:	bl	1b0c8 <__assert_fail@plt+0x9200>
   141c0:	b	141d8 <__assert_fail@plt+0x2310>
   141c4:	movw	r1, #30253	; 0x762d
   141c8:	mov	r0, #0
   141cc:	mov	r2, #5
   141d0:	movt	r1, #3
   141d4:	bl	11afc <dcgettext@plt>
   141d8:	movw	r4, #37428	; 0x9234
   141dc:	movt	r4, #4
   141e0:	ldr	r1, [r4]
   141e4:	bl	119e8 <fputs_unlocked@plt>
   141e8:	movw	r0, #37474	; 0x9262
   141ec:	movt	r0, #4
   141f0:	ldrb	r0, [r0]
   141f4:	cmp	r0, #1
   141f8:	bne	142d0 <__assert_fail@plt+0x2408>
   141fc:	ldr	r0, [r4]
   14200:	ldr	r1, [r0, #20]
   14204:	ldr	r2, [r0, #24]
   14208:	cmp	r1, r2
   1420c:	bcs	1430c <__assert_fail@plt+0x2444>
   14210:	add	r2, r1, #1
   14214:	str	r2, [r0, #20]
   14218:	mov	r0, #9
   1421c:	strb	r0, [r1]
   14220:	movw	r0, #37488	; 0x9270
   14224:	add	r2, sp, #20
   14228:	movt	r0, #4
   1422c:	ldr	r6, [r0]
   14230:	movw	r0, #37480	; 0x9268
   14234:	movt	r0, #4
   14238:	ldr	r7, [r0]
   1423c:	ldrd	r0, [r5, #16]
   14240:	str	r1, [fp, #-28]	; 0xffffffe4
   14244:	str	r0, [fp, #-32]	; 0xffffffe0
   14248:	sub	r1, fp, #32
   1424c:	mov	r0, r7
   14250:	bl	30ee4 <__assert_fail@plt+0x1f01c>
   14254:	cmp	r0, #0
   14258:	beq	1427c <__assert_fail@plt+0x23b4>
   1425c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14260:	ldr	r0, [r4]
   14264:	add	r2, sp, #20
   14268:	mov	r3, r7
   1426c:	str	r1, [sp]
   14270:	mov	r1, r6
   14274:	bl	15e30 <__assert_fail@plt+0x3f68>
   14278:	b	142d0 <__assert_fail@plt+0x2408>
   1427c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14280:	sub	r2, fp, #53	; 0x35
   14284:	asr	r1, r0, #31
   14288:	bl	1bfc4 <__assert_fail@plt+0xa0fc>
   1428c:	movw	r1, #30262	; 0x7636
   14290:	mov	r5, r0
   14294:	mov	r0, #0
   14298:	mov	r2, #5
   1429c:	movt	r1, #3
   142a0:	bl	11afc <dcgettext@plt>
   142a4:	mov	r6, r0
   142a8:	mov	r0, r5
   142ac:	bl	1eec4 <__assert_fail@plt+0xcffc>
   142b0:	mov	r3, r0
   142b4:	mov	r0, #0
   142b8:	mov	r1, #0
   142bc:	mov	r2, r6
   142c0:	bl	11bd4 <error@plt>
   142c4:	ldr	r1, [r4]
   142c8:	mov	r0, r5
   142cc:	bl	119e8 <fputs_unlocked@plt>
   142d0:	movw	r0, #37456	; 0x9250
   142d4:	movw	r1, #30247	; 0x7627
   142d8:	mov	r3, #10
   142dc:	mov	r2, r8
   142e0:	movt	r0, #4
   142e4:	movt	r1, #3
   142e8:	ldrb	r0, [r0]
   142ec:	cmp	r0, #0
   142f0:	mov	r0, #1
   142f4:	movwne	r3, #0
   142f8:	bl	11d24 <__printf_chk@plt>
   142fc:	ldr	r0, [r4]
   14300:	bl	11b50 <fflush_unlocked@plt>
   14304:	sub	sp, fp, #24
   14308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1430c:	mov	r1, #9
   14310:	bl	11d84 <__overflow@plt>
   14314:	b	14220 <__assert_fail@plt+0x2358>
   14318:	mov	r0, #1
   1431c:	b	11fd0 <__assert_fail@plt+0x108>
   14320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14324:	add	fp, sp, #28
   14328:	sub	sp, sp, #12
   1432c:	mov	r4, r3
   14330:	mov	r6, r2
   14334:	mov	r5, r1
   14338:	mov	sl, r0
   1433c:	bl	11cac <strlen@plt>
   14340:	ldr	r8, [r5]
   14344:	cmp	r8, #0
   14348:	beq	14408 <__assert_fail@plt+0x2540>
   1434c:	mov	r7, r0
   14350:	mov	r0, #0
   14354:	add	r9, r5, #4
   14358:	mov	r5, #0
   1435c:	str	r6, [sp, #4]
   14360:	str	r0, [sp]
   14364:	mvn	r0, #0
   14368:	str	r0, [sp, #8]
   1436c:	b	14388 <__assert_fail@plt+0x24c0>
   14370:	str	r5, [sp, #8]
   14374:	ldr	r8, [r9, r5, lsl #2]
   14378:	add	r6, r6, r4
   1437c:	add	r5, r5, #1
   14380:	cmp	r8, #0
   14384:	beq	143f0 <__assert_fail@plt+0x2528>
   14388:	mov	r0, r8
   1438c:	mov	r1, sl
   14390:	mov	r2, r7
   14394:	bl	11e80 <strncmp@plt>
   14398:	cmp	r0, #0
   1439c:	bne	14374 <__assert_fail@plt+0x24ac>
   143a0:	mov	r0, r8
   143a4:	bl	11cac <strlen@plt>
   143a8:	cmp	r0, r7
   143ac:	beq	1440c <__assert_fail@plt+0x2544>
   143b0:	ldr	r0, [sp, #8]
   143b4:	cmn	r0, #1
   143b8:	beq	14370 <__assert_fail@plt+0x24a8>
   143bc:	ldr	r0, [sp, #4]
   143c0:	cmp	r0, #0
   143c4:	beq	143e4 <__assert_fail@plt+0x251c>
   143c8:	ldr	r1, [sp, #8]
   143cc:	mov	r2, r4
   143d0:	mla	r0, r1, r4, r0
   143d4:	mov	r1, r6
   143d8:	bl	11ca0 <bcmp@plt>
   143dc:	cmp	r0, #0
   143e0:	beq	14374 <__assert_fail@plt+0x24ac>
   143e4:	mov	r0, #1
   143e8:	str	r0, [sp]
   143ec:	b	14374 <__assert_fail@plt+0x24ac>
   143f0:	ldr	r0, [sp]
   143f4:	tst	r0, #1
   143f8:	ldr	r0, [sp, #8]
   143fc:	mvnne	r0, #1
   14400:	sub	sp, fp, #28
   14404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14408:	mvn	r5, #0
   1440c:	mov	r0, r5
   14410:	sub	sp, fp, #28
   14414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14418:	push	{r4, r5, r6, r7, fp, lr}
   1441c:	add	fp, sp, #16
   14420:	mov	r5, r0
   14424:	ldr	r0, [r1]
   14428:	mvn	r4, #0
   1442c:	cmp	r0, #0
   14430:	beq	1445c <__assert_fail@plt+0x2594>
   14434:	add	r7, r1, #4
   14438:	mov	r6, #0
   1443c:	mov	r1, r5
   14440:	bl	11a3c <strcmp@plt>
   14444:	cmp	r0, #0
   14448:	beq	14464 <__assert_fail@plt+0x259c>
   1444c:	ldr	r0, [r7, r6, lsl #2]
   14450:	add	r6, r6, #1
   14454:	cmp	r0, #0
   14458:	bne	1443c <__assert_fail@plt+0x2574>
   1445c:	mov	r0, r4
   14460:	pop	{r4, r5, r6, r7, fp, pc}
   14464:	mov	r0, r6
   14468:	pop	{r4, r5, r6, r7, fp, pc}
   1446c:	push	{r4, r5, r6, sl, fp, lr}
   14470:	add	fp, sp, #16
   14474:	sub	sp, sp, #8
   14478:	mov	r5, r0
   1447c:	movw	r0, #30855	; 0x7887
   14480:	mov	r4, r1
   14484:	movw	r1, #30882	; 0x78a2
   14488:	cmn	r2, #1
   1448c:	mov	r2, #5
   14490:	movt	r0, #3
   14494:	movt	r1, #3
   14498:	moveq	r1, r0
   1449c:	mov	r0, #0
   144a0:	bl	11afc <dcgettext@plt>
   144a4:	mov	r6, r0
   144a8:	mov	r0, #0
   144ac:	mov	r1, #8
   144b0:	mov	r2, r4
   144b4:	bl	1e8f4 <__assert_fail@plt+0xca2c>
   144b8:	mov	r4, r0
   144bc:	mov	r0, #1
   144c0:	mov	r1, r5
   144c4:	bl	1eeb4 <__assert_fail@plt+0xcfec>
   144c8:	str	r0, [sp]
   144cc:	mov	r0, #0
   144d0:	mov	r1, #0
   144d4:	mov	r2, r6
   144d8:	mov	r3, r4
   144dc:	bl	11bd4 <error@plt>
   144e0:	sub	sp, fp, #16
   144e4:	pop	{r4, r5, r6, sl, fp, pc}
   144e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ec:	add	fp, sp, #28
   144f0:	sub	sp, sp, #4
   144f4:	mov	sl, r1
   144f8:	movw	r1, #30911	; 0x78bf
   144fc:	mov	r4, r2
   14500:	mov	r6, r0
   14504:	mov	r0, #0
   14508:	mov	r2, #5
   1450c:	mov	r8, #0
   14510:	movt	r1, #3
   14514:	bl	11afc <dcgettext@plt>
   14518:	movw	r1, #37416	; 0x9228
   1451c:	movt	r1, #4
   14520:	ldr	r1, [r1]
   14524:	bl	119e8 <fputs_unlocked@plt>
   14528:	ldr	r7, [r6]
   1452c:	cmp	r7, #0
   14530:	beq	145ec <__assert_fail@plt+0x2724>
   14534:	add	r0, r6, #4
   14538:	mov	r9, #0
   1453c:	mov	r6, #0
   14540:	str	r0, [sp]
   14544:	cmp	r9, #0
   14548:	bne	145a0 <__assert_fail@plt+0x26d8>
   1454c:	mov	r5, #0
   14550:	movw	r0, #37416	; 0x9228
   14554:	movt	r0, #4
   14558:	ldr	r6, [r0]
   1455c:	mov	r0, r7
   14560:	bl	1eec4 <__assert_fail@plt+0xcffc>
   14564:	movw	r2, #30932	; 0x78d4
   14568:	mov	r3, r0
   1456c:	mov	r0, r6
   14570:	mov	r1, #1
   14574:	movt	r2, #3
   14578:	bl	11d3c <__fprintf_chk@plt>
   1457c:	add	r6, sl, r5
   14580:	ldr	r0, [sp]
   14584:	add	r8, r8, r4
   14588:	ldr	r7, [r0, -r9, lsl #2]
   1458c:	sub	r9, r9, #1
   14590:	cmp	r7, #0
   14594:	beq	145ec <__assert_fail@plt+0x2724>
   14598:	cmp	r9, #0
   1459c:	beq	1454c <__assert_fail@plt+0x2684>
   145a0:	add	r1, sl, r8
   145a4:	mov	r0, r6
   145a8:	mov	r2, r4
   145ac:	bl	11ca0 <bcmp@plt>
   145b0:	cmp	r0, #0
   145b4:	mov	r5, r8
   145b8:	bne	14550 <__assert_fail@plt+0x2688>
   145bc:	movw	r0, #37416	; 0x9228
   145c0:	movt	r0, #4
   145c4:	ldr	r5, [r0]
   145c8:	mov	r0, r7
   145cc:	bl	1eec4 <__assert_fail@plt+0xcffc>
   145d0:	movw	r2, #30940	; 0x78dc
   145d4:	mov	r3, r0
   145d8:	mov	r0, r5
   145dc:	mov	r1, #1
   145e0:	movt	r2, #3
   145e4:	bl	11d3c <__fprintf_chk@plt>
   145e8:	b	14580 <__assert_fail@plt+0x26b8>
   145ec:	movw	r0, #37416	; 0x9228
   145f0:	movt	r0, #4
   145f4:	ldr	r0, [r0]
   145f8:	ldr	r1, [r0, #20]
   145fc:	ldr	r2, [r0, #24]
   14600:	cmp	r1, r2
   14604:	addcc	r2, r1, #1
   14608:	strcc	r2, [r0, #20]
   1460c:	movcc	r0, #10
   14610:	strbcc	r0, [r1]
   14614:	subcc	sp, fp, #28
   14618:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1461c:	mov	r1, #10
   14620:	sub	sp, fp, #28
   14624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14628:	b	11d84 <__overflow@plt>
   1462c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14630:	add	fp, sp, #28
   14634:	sub	sp, sp, #20
   14638:	mov	r9, r0
   1463c:	ldr	r0, [fp, #16]
   14640:	mov	r8, r3
   14644:	mov	sl, r2
   14648:	mov	r7, r1
   1464c:	cmp	r0, #0
   14650:	beq	14710 <__assert_fail@plt+0x2848>
   14654:	mov	r0, r7
   14658:	str	r9, [sp, #8]
   1465c:	str	r8, [sp, #16]
   14660:	bl	11cac <strlen@plt>
   14664:	ldr	r9, [sl]
   14668:	cmp	r9, #0
   1466c:	beq	14780 <__assert_fail@plt+0x28b8>
   14670:	str	sl, [sp, #4]
   14674:	add	r8, sl, #4
   14678:	ldr	sl, [sp, #16]
   1467c:	mov	r4, r0
   14680:	mov	r0, #0
   14684:	mvn	r6, #0
   14688:	mov	r5, #0
   1468c:	str	r0, [sp, #12]
   14690:	b	146b0 <__assert_fail@plt+0x27e8>
   14694:	mov	r6, r5
   14698:	ldr	r9, [r8, r5, lsl #2]
   1469c:	ldr	r0, [fp, #8]
   146a0:	add	r5, r5, #1
   146a4:	add	sl, sl, r0
   146a8:	cmp	r9, #0
   146ac:	beq	14750 <__assert_fail@plt+0x2888>
   146b0:	mov	r0, r9
   146b4:	mov	r1, r7
   146b8:	mov	r2, r4
   146bc:	bl	11e80 <strncmp@plt>
   146c0:	cmp	r0, #0
   146c4:	bne	14698 <__assert_fail@plt+0x27d0>
   146c8:	mov	r0, r9
   146cc:	bl	11cac <strlen@plt>
   146d0:	cmp	r0, r4
   146d4:	beq	14804 <__assert_fail@plt+0x293c>
   146d8:	cmn	r6, #1
   146dc:	beq	14694 <__assert_fail@plt+0x27cc>
   146e0:	ldr	r0, [sp, #16]
   146e4:	cmp	r0, #0
   146e8:	beq	14704 <__assert_fail@plt+0x283c>
   146ec:	ldr	r2, [fp, #8]
   146f0:	mov	r1, sl
   146f4:	mla	r0, r6, r2, r0
   146f8:	bl	11ca0 <bcmp@plt>
   146fc:	cmp	r0, #0
   14700:	beq	14698 <__assert_fail@plt+0x27d0>
   14704:	mov	r0, #1
   14708:	str	r0, [sp, #12]
   1470c:	b	14698 <__assert_fail@plt+0x27d0>
   14710:	ldr	r0, [sl]
   14714:	movw	r4, #30855	; 0x7887
   14718:	movt	r4, #3
   1471c:	cmp	r0, #0
   14720:	beq	14790 <__assert_fail@plt+0x28c8>
   14724:	add	r5, sl, #4
   14728:	mov	r6, #0
   1472c:	mov	r1, r7
   14730:	bl	11a3c <strcmp@plt>
   14734:	cmp	r0, #0
   14738:	beq	14768 <__assert_fail@plt+0x28a0>
   1473c:	ldr	r0, [r5, r6, lsl #2]
   14740:	add	r6, r6, #1
   14744:	cmp	r0, #0
   14748:	bne	1472c <__assert_fail@plt+0x2864>
   1474c:	b	14790 <__assert_fail@plt+0x28c8>
   14750:	ldr	r0, [sp, #12]
   14754:	ldr	r8, [sp, #16]
   14758:	ldr	sl, [sp, #4]
   1475c:	ldr	r9, [sp, #8]
   14760:	tst	r0, #1
   14764:	bne	14774 <__assert_fail@plt+0x28ac>
   14768:	cmn	r6, #1
   1476c:	bgt	147f8 <__assert_fail@plt+0x2930>
   14770:	beq	14788 <__assert_fail@plt+0x28c0>
   14774:	movw	r4, #30882	; 0x78a2
   14778:	movt	r4, #3
   1477c:	b	14790 <__assert_fail@plt+0x28c8>
   14780:	ldr	r8, [sp, #16]
   14784:	ldr	r9, [sp, #8]
   14788:	movw	r4, #30855	; 0x7887
   1478c:	movt	r4, #3
   14790:	ldr	r6, [fp, #12]
   14794:	mov	r0, #0
   14798:	mov	r1, r4
   1479c:	mov	r2, #5
   147a0:	bl	11afc <dcgettext@plt>
   147a4:	mov	r4, r0
   147a8:	mov	r0, #0
   147ac:	mov	r1, #8
   147b0:	mov	r2, r7
   147b4:	bl	1e8f4 <__assert_fail@plt+0xca2c>
   147b8:	mov	r5, r0
   147bc:	mov	r0, #1
   147c0:	mov	r1, r9
   147c4:	bl	1eeb4 <__assert_fail@plt+0xcfec>
   147c8:	str	r0, [sp]
   147cc:	mov	r0, #0
   147d0:	mov	r1, #0
   147d4:	mov	r2, r4
   147d8:	mov	r3, r5
   147dc:	bl	11bd4 <error@plt>
   147e0:	ldr	r2, [fp, #8]
   147e4:	mov	r0, sl
   147e8:	mov	r1, r8
   147ec:	bl	144e8 <__assert_fail@plt+0x2620>
   147f0:	blx	r6
   147f4:	mvn	r6, #0
   147f8:	mov	r0, r6
   147fc:	sub	sp, fp, #28
   14800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14804:	ldr	r8, [sp, #16]
   14808:	ldr	sl, [sp, #4]
   1480c:	ldr	r9, [sp, #8]
   14810:	mov	r6, r5
   14814:	cmn	r6, #1
   14818:	bgt	147f8 <__assert_fail@plt+0x2930>
   1481c:	b	14770 <__assert_fail@plt+0x28a8>
   14820:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14824:	add	fp, sp, #24
   14828:	ldr	r6, [r1]
   1482c:	cmp	r6, #0
   14830:	beq	14894 <__assert_fail@plt+0x29cc>
   14834:	mov	r8, r1
   14838:	mov	r7, r2
   1483c:	mov	r1, r2
   14840:	mov	r2, r3
   14844:	mov	r4, r3
   14848:	mov	r9, r0
   1484c:	bl	11ca0 <bcmp@plt>
   14850:	cmp	r0, #0
   14854:	beq	1488c <__assert_fail@plt+0x29c4>
   14858:	add	r7, r7, r4
   1485c:	add	r5, r8, #4
   14860:	ldr	r6, [r5]
   14864:	cmp	r6, #0
   14868:	beq	14894 <__assert_fail@plt+0x29cc>
   1486c:	mov	r0, r9
   14870:	mov	r1, r7
   14874:	mov	r2, r4
   14878:	bl	11ca0 <bcmp@plt>
   1487c:	add	r7, r7, r4
   14880:	add	r5, r5, #4
   14884:	cmp	r0, #0
   14888:	bne	14860 <__assert_fail@plt+0x2998>
   1488c:	mov	r0, r6
   14890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14894:	mov	r6, #0
   14898:	mov	r0, r6
   1489c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   148a0:	push	{r4, sl, fp, lr}
   148a4:	add	fp, sp, #8
   148a8:	mov	r4, r0
   148ac:	mov	r0, #24
   148b0:	bl	34810 <__assert_fail@plt+0x22948>
   148b4:	cmp	r0, #0
   148b8:	moveq	r0, #0
   148bc:	movne	r1, #0
   148c0:	strne	r4, [r0, #16]
   148c4:	strne	r4, [r0, #20]
   148c8:	strne	r1, [r0]
   148cc:	pop	{r4, sl, fp, pc}
   148d0:	push	{r4, sl, fp, lr}
   148d4:	add	fp, sp, #8
   148d8:	mov	r4, r0
   148dc:	mov	r0, #24
   148e0:	bl	34810 <__assert_fail@plt+0x22948>
   148e4:	cmp	r0, #0
   148e8:	beq	14900 <__assert_fail@plt+0x2a38>
   148ec:	vmov.i32	q8, #0	; 0x00000000
   148f0:	mov	r1, r0
   148f4:	str	r4, [r1], #4
   148f8:	vst1.32	{d16-d17}, [r1]
   148fc:	pop	{r4, sl, fp, pc}
   14900:	mov	r0, #0
   14904:	pop	{r4, sl, fp, pc}
   14908:	push	{r4, r5, r6, sl, fp, lr}
   1490c:	add	fp, sp, #16
   14910:	ldr	r3, [r0]
   14914:	mov	r4, r1
   14918:	mov	r5, r0
   1491c:	cmp	r3, #0
   14920:	beq	1495c <__assert_fail@plt+0x2a94>
   14924:	add	r0, r5, #8
   14928:	add	r1, r5, #12
   1492c:	mov	r2, #0
   14930:	mov	r6, #0
   14934:	bl	11e50 <getdelim@plt>
   14938:	cmn	r0, #1
   1493c:	ble	1498c <__assert_fail@plt+0x2ac4>
   14940:	mov	r0, #1
   14944:	str	r0, [r4]
   14948:	ldmib	r5, {r0, r6}
   1494c:	add	r0, r0, #1
   14950:	str	r0, [r5, #4]
   14954:	mov	r0, r6
   14958:	pop	{r4, r5, r6, sl, fp, pc}
   1495c:	ldr	r0, [r5, #20]
   14960:	ldr	r0, [r0]
   14964:	cmp	r0, #0
   14968:	beq	149ac <__assert_fail@plt+0x2ae4>
   1496c:	mov	r0, #1
   14970:	str	r0, [r4]
   14974:	ldr	r0, [r5, #20]
   14978:	add	r1, r0, #4
   1497c:	str	r1, [r5, #20]
   14980:	ldr	r6, [r0]
   14984:	mov	r0, r6
   14988:	pop	{r4, r5, r6, sl, fp, pc}
   1498c:	ldr	r0, [r5]
   14990:	bl	11c94 <feof@plt>
   14994:	cmp	r0, #0
   14998:	mov	r1, #2
   1499c:	mov	r0, r6
   149a0:	movweq	r1, #4
   149a4:	str	r1, [r4]
   149a8:	pop	{r4, r5, r6, sl, fp, pc}
   149ac:	mov	r0, #2
   149b0:	mov	r6, #0
   149b4:	str	r0, [r4]
   149b8:	mov	r0, r6
   149bc:	pop	{r4, r5, r6, sl, fp, pc}
   149c0:	ldr	r1, [r0]
   149c4:	cmp	r1, #0
   149c8:	ldrne	r0, [r0, #4]
   149cc:	bxne	lr
   149d0:	ldr	r1, [r0, #16]
   149d4:	ldr	r0, [r0, #20]
   149d8:	sub	r0, r0, r1
   149dc:	asr	r0, r0, #2
   149e0:	bx	lr
   149e4:	push	{r4, sl, fp, lr}
   149e8:	add	fp, sp, #8
   149ec:	mov	r4, r0
   149f0:	ldr	r0, [r0]
   149f4:	cmp	r0, #0
   149f8:	beq	14a04 <__assert_fail@plt+0x2b3c>
   149fc:	ldr	r0, [r4, #8]
   14a00:	bl	176c0 <__assert_fail@plt+0x57f8>
   14a04:	mov	r0, r4
   14a08:	pop	{r4, sl, fp, lr}
   14a0c:	b	176c0 <__assert_fail@plt+0x57f8>
   14a10:	movw	r1, #37548	; 0x92ac
   14a14:	movt	r1, #4
   14a18:	str	r0, [r1]
   14a1c:	bx	lr
   14a20:	movw	r1, #37552	; 0x92b0
   14a24:	movt	r1, #4
   14a28:	strb	r0, [r1]
   14a2c:	bx	lr
   14a30:	push	{r4, r5, r6, sl, fp, lr}
   14a34:	add	fp, sp, #16
   14a38:	sub	sp, sp, #8
   14a3c:	movw	r0, #37428	; 0x9234
   14a40:	movt	r0, #4
   14a44:	ldr	r0, [r0]
   14a48:	bl	35364 <__assert_fail@plt+0x2349c>
   14a4c:	cmp	r0, #0
   14a50:	beq	14a78 <__assert_fail@plt+0x2bb0>
   14a54:	movw	r0, #37552	; 0x92b0
   14a58:	movt	r0, #4
   14a5c:	ldrb	r0, [r0]
   14a60:	cmp	r0, #0
   14a64:	beq	14a98 <__assert_fail@plt+0x2bd0>
   14a68:	bl	11cdc <__errno_location@plt>
   14a6c:	ldr	r0, [r0]
   14a70:	cmp	r0, #32
   14a74:	bne	14a98 <__assert_fail@plt+0x2bd0>
   14a78:	movw	r0, #37416	; 0x9228
   14a7c:	movt	r0, #4
   14a80:	ldr	r0, [r0]
   14a84:	bl	35364 <__assert_fail@plt+0x2349c>
   14a88:	cmp	r0, #0
   14a8c:	subeq	sp, fp, #16
   14a90:	popeq	{r4, r5, r6, sl, fp, pc}
   14a94:	b	14b08 <__assert_fail@plt+0x2c40>
   14a98:	movw	r1, #30945	; 0x78e1
   14a9c:	mov	r0, #0
   14aa0:	mov	r2, #5
   14aa4:	movt	r1, #3
   14aa8:	bl	11afc <dcgettext@plt>
   14aac:	mov	r4, r0
   14ab0:	movw	r0, #37548	; 0x92ac
   14ab4:	movt	r0, #4
   14ab8:	ldr	r6, [r0]
   14abc:	bl	11cdc <__errno_location@plt>
   14ac0:	ldr	r5, [r0]
   14ac4:	cmp	r6, #0
   14ac8:	bne	14ae4 <__assert_fail@plt+0x2c1c>
   14acc:	movw	r2, #30942	; 0x78de
   14ad0:	mov	r0, #0
   14ad4:	mov	r1, r5
   14ad8:	mov	r3, r4
   14adc:	movt	r2, #3
   14ae0:	b	14b04 <__assert_fail@plt+0x2c3c>
   14ae4:	mov	r0, r6
   14ae8:	bl	1eb3c <__assert_fail@plt+0xcc74>
   14aec:	movw	r2, #30957	; 0x78ed
   14af0:	mov	r3, r0
   14af4:	str	r4, [sp]
   14af8:	mov	r0, #0
   14afc:	mov	r1, r5
   14b00:	movt	r2, #3
   14b04:	bl	11bd4 <error@plt>
   14b08:	movw	r0, #37332	; 0x91d4
   14b0c:	movt	r0, #4
   14b10:	ldr	r0, [r0]
   14b14:	bl	11aa8 <_exit@plt>
   14b18:	push	{r4, r5, fp, lr}
   14b1c:	add	fp, sp, #8
   14b20:	sub	sp, sp, #8
   14b24:	mov	r0, #12
   14b28:	bl	34810 <__assert_fail@plt+0x22948>
   14b2c:	mov	r4, r0
   14b30:	cmp	r0, #0
   14b34:	beq	14b88 <__assert_fail@plt+0x2cc0>
   14b38:	movw	r0, #19400	; 0x4bc8
   14b3c:	movw	r2, #19348	; 0x4b94
   14b40:	movw	r3, #19368	; 0x4ba8
   14b44:	mov	r1, #0
   14b48:	mov	r5, #0
   14b4c:	movt	r0, #1
   14b50:	movt	r2, #1
   14b54:	movt	r3, #1
   14b58:	str	r0, [sp]
   14b5c:	mov	r0, #11
   14b60:	bl	1a28c <__assert_fail@plt+0x83c4>
   14b64:	cmp	r0, #0
   14b68:	str	r0, [r4]
   14b6c:	beq	14b7c <__assert_fail@plt+0x2cb4>
   14b70:	str	r5, [r4, #4]
   14b74:	str	r5, [r4, #8]
   14b78:	b	14b88 <__assert_fail@plt+0x2cc0>
   14b7c:	mov	r0, r4
   14b80:	bl	176c0 <__assert_fail@plt+0x57f8>
   14b84:	mov	r4, #0
   14b88:	mov	r0, r4
   14b8c:	sub	sp, fp, #8
   14b90:	pop	{r4, r5, fp, pc}
   14b94:	ldm	r0, {r0, r3}
   14b98:	eor	r0, r0, r3
   14b9c:	udiv	r2, r0, r1
   14ba0:	mls	r0, r2, r1, r0
   14ba4:	bx	lr
   14ba8:	ldrd	r2, [r1]
   14bac:	ldrd	r0, [r0]
   14bb0:	eor	r1, r1, r3
   14bb4:	eor	r0, r0, r2
   14bb8:	orr	r0, r0, r1
   14bbc:	clz	r0, r0
   14bc0:	lsr	r0, r0, #5
   14bc4:	bx	lr
   14bc8:	push	{r4, sl, fp, lr}
   14bcc:	add	fp, sp, #8
   14bd0:	mov	r4, r0
   14bd4:	ldr	r0, [r0, #8]
   14bd8:	bl	1a590 <__assert_fail@plt+0x86c8>
   14bdc:	mov	r0, r4
   14be0:	pop	{r4, sl, fp, lr}
   14be4:	b	176c0 <__assert_fail@plt+0x57f8>
   14be8:	push	{r4, sl, fp, lr}
   14bec:	add	fp, sp, #8
   14bf0:	mov	r4, r0
   14bf4:	ldr	r0, [r0]
   14bf8:	bl	1a590 <__assert_fail@plt+0x86c8>
   14bfc:	ldr	r0, [r4, #4]
   14c00:	cmp	r0, #0
   14c04:	beq	14c0c <__assert_fail@plt+0x2d44>
   14c08:	bl	1bef8 <__assert_fail@plt+0xa030>
   14c0c:	ldr	r0, [r4, #8]
   14c10:	bl	176c0 <__assert_fail@plt+0x57f8>
   14c14:	mov	r0, r4
   14c18:	pop	{r4, sl, fp, lr}
   14c1c:	b	176c0 <__assert_fail@plt+0x57f8>
   14c20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c24:	add	fp, sp, #24
   14c28:	sub	sp, sp, #8
   14c2c:	ldr	r5, [r0, #8]
   14c30:	ldr	r8, [fp, #12]
   14c34:	ldr	r9, [fp, #8]
   14c38:	mov	r7, r3
   14c3c:	mov	r6, r2
   14c40:	mov	r4, r0
   14c44:	cmp	r5, #0
   14c48:	beq	14c70 <__assert_fail@plt+0x2da8>
   14c4c:	ldrd	r0, [r5]
   14c50:	eor	r1, r1, r7
   14c54:	eor	r0, r0, r6
   14c58:	orrs	r0, r0, r1
   14c5c:	bne	14c88 <__assert_fail@plt+0x2dc0>
   14c60:	ldr	r7, [r5, #8]
   14c64:	cmp	r7, #0
   14c68:	bne	14cf0 <__assert_fail@plt+0x2e28>
   14c6c:	b	14d58 <__assert_fail@plt+0x2e90>
   14c70:	mov	r0, #16
   14c74:	bl	34810 <__assert_fail@plt+0x22948>
   14c78:	mov	r5, r0
   14c7c:	cmp	r0, #0
   14c80:	str	r0, [r4, #8]
   14c84:	beq	14d58 <__assert_fail@plt+0x2e90>
   14c88:	strd	r6, [r5]
   14c8c:	mov	r1, r5
   14c90:	ldr	r0, [r4]
   14c94:	bl	1ade0 <__assert_fail@plt+0x8f18>
   14c98:	cmp	r0, #0
   14c9c:	beq	14d58 <__assert_fail@plt+0x2e90>
   14ca0:	cmp	r5, r0
   14ca4:	beq	14cbc <__assert_fail@plt+0x2df4>
   14ca8:	ldr	r7, [r0, #8]
   14cac:	str	r7, [r5, #8]
   14cb0:	cmp	r7, #0
   14cb4:	bne	14cf0 <__assert_fail@plt+0x2e28>
   14cb8:	b	14d58 <__assert_fail@plt+0x2e90>
   14cbc:	movw	r2, #20136	; 0x4ea8
   14cc0:	mov	r0, #0
   14cc4:	mov	r1, #0
   14cc8:	mov	r3, #0
   14ccc:	movt	r2, #1
   14cd0:	str	r0, [r4, #8]
   14cd4:	str	r0, [sp]
   14cd8:	movw	r0, #1021	; 0x3fd
   14cdc:	bl	1a28c <__assert_fail@plt+0x83c4>
   14ce0:	mov	r7, r0
   14ce4:	str	r0, [r5, #8]
   14ce8:	cmp	r7, #0
   14cec:	beq	14d58 <__assert_fail@plt+0x2e90>
   14cf0:	subs	r0, r9, #1
   14cf4:	mvn	r2, #-2147483646	; 0x80000002
   14cf8:	sbc	r1, r8, #0
   14cfc:	subs	r0, r2, r0
   14d00:	rscs	r0, r1, #0
   14d04:	bcs	14d40 <__assert_fail@plt+0x2e78>
   14d08:	ldr	r0, [r4, #4]
   14d0c:	cmp	r0, #0
   14d10:	bne	14d28 <__assert_fail@plt+0x2e60>
   14d14:	mvn	r0, #-2147483648	; 0x80000000
   14d18:	bl	1be48 <__assert_fail@plt+0x9f80>
   14d1c:	cmp	r0, #0
   14d20:	str	r0, [r4, #4]
   14d24:	beq	14d58 <__assert_fail@plt+0x2e90>
   14d28:	mov	r2, r9
   14d2c:	mov	r3, r8
   14d30:	bl	1bf20 <__assert_fail@plt+0xa058>
   14d34:	mov	r9, r0
   14d38:	cmn	r0, #1
   14d3c:	beq	14d58 <__assert_fail@plt+0x2e90>
   14d40:	mov	r0, r7
   14d44:	mov	r1, r9
   14d48:	mov	r2, #0
   14d4c:	sub	sp, fp, #24
   14d50:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   14d54:	b	1aa9c <__assert_fail@plt+0x8bd4>
   14d58:	mvn	r0, #0
   14d5c:	sub	sp, fp, #24
   14d60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d68:	add	fp, sp, #24
   14d6c:	sub	sp, sp, #8
   14d70:	ldr	r6, [r0, #8]
   14d74:	mov	r5, r3
   14d78:	mov	r8, r2
   14d7c:	mov	r4, r0
   14d80:	cmp	r6, #0
   14d84:	beq	14da4 <__assert_fail@plt+0x2edc>
   14d88:	ldrd	r0, [r6]
   14d8c:	eor	r1, r1, r5
   14d90:	eor	r0, r0, r8
   14d94:	orrs	r0, r0, r1
   14d98:	bne	14dbc <__assert_fail@plt+0x2ef4>
   14d9c:	ldr	r5, [r6, #8]
   14da0:	b	14e20 <__assert_fail@plt+0x2f58>
   14da4:	mov	r0, #16
   14da8:	bl	34810 <__assert_fail@plt+0x22948>
   14dac:	mov	r6, r0
   14db0:	cmp	r0, #0
   14db4:	str	r0, [r4, #8]
   14db8:	beq	14dec <__assert_fail@plt+0x2f24>
   14dbc:	str	r8, [r6]
   14dc0:	str	r5, [r6, #4]
   14dc4:	mov	r1, r6
   14dc8:	ldr	r0, [r4]
   14dcc:	bl	1ade0 <__assert_fail@plt+0x8f18>
   14dd0:	cmp	r0, #0
   14dd4:	beq	14dec <__assert_fail@plt+0x2f24>
   14dd8:	cmp	r6, r0
   14ddc:	beq	14df4 <__assert_fail@plt+0x2f2c>
   14de0:	ldr	r5, [r0, #8]
   14de4:	str	r5, [r6, #8]
   14de8:	b	14e20 <__assert_fail@plt+0x2f58>
   14dec:	mvn	r6, #0
   14df0:	b	14e9c <__assert_fail@plt+0x2fd4>
   14df4:	movw	r2, #20136	; 0x4ea8
   14df8:	mov	r0, #0
   14dfc:	mov	r1, #0
   14e00:	mov	r3, #0
   14e04:	movt	r2, #1
   14e08:	str	r0, [r4, #8]
   14e0c:	str	r0, [sp]
   14e10:	movw	r0, #1021	; 0x3fd
   14e14:	bl	1a28c <__assert_fail@plt+0x83c4>
   14e18:	mov	r5, r0
   14e1c:	str	r0, [r6, #8]
   14e20:	mvn	r6, #0
   14e24:	cmp	r5, #0
   14e28:	beq	14e9c <__assert_fail@plt+0x2fd4>
   14e2c:	ldr	r7, [fp, #8]
   14e30:	ldr	r8, [fp, #12]
   14e34:	mvn	r2, #-2147483646	; 0x80000002
   14e38:	subs	r0, r7, #1
   14e3c:	sbc	r1, r8, #0
   14e40:	subs	r0, r2, r0
   14e44:	rscs	r0, r1, #0
   14e48:	bcs	14e84 <__assert_fail@plt+0x2fbc>
   14e4c:	ldr	r0, [r4, #4]
   14e50:	cmp	r0, #0
   14e54:	bne	14e6c <__assert_fail@plt+0x2fa4>
   14e58:	mvn	r0, #-2147483648	; 0x80000000
   14e5c:	bl	1be48 <__assert_fail@plt+0x9f80>
   14e60:	cmp	r0, #0
   14e64:	str	r0, [r4, #4]
   14e68:	beq	14e9c <__assert_fail@plt+0x2fd4>
   14e6c:	mov	r2, r7
   14e70:	mov	r3, r8
   14e74:	bl	1bf20 <__assert_fail@plt+0xa058>
   14e78:	mov	r7, r0
   14e7c:	cmn	r0, #1
   14e80:	beq	14e9c <__assert_fail@plt+0x2fd4>
   14e84:	mov	r0, r5
   14e88:	mov	r1, r7
   14e8c:	bl	19fd8 <__assert_fail@plt+0x8110>
   14e90:	cmp	r0, #0
   14e94:	mov	r6, r0
   14e98:	movwne	r6, #1
   14e9c:	mov	r0, r6
   14ea0:	sub	sp, fp, #24
   14ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ea8:	udiv	r2, r0, r1
   14eac:	mls	r0, r2, r1, r0
   14eb0:	bx	lr
   14eb4:	push	{r4, r5, fp, lr}
   14eb8:	add	fp, sp, #8
   14ebc:	mov	r5, r0
   14ec0:	mov	r0, #8
   14ec4:	mov	r4, r1
   14ec8:	bl	31b44 <__assert_fail@plt+0x1fc7c>
   14ecc:	ldr	r1, [r5, #4]
   14ed0:	stm	r0, {r1, r4}
   14ed4:	str	r0, [r5, #4]
   14ed8:	pop	{r4, r5, fp, pc}
   14edc:	push	{r4, sl, fp, lr}
   14ee0:	add	fp, sp, #8
   14ee4:	and	ip, r1, #2
   14ee8:	and	r3, r1, #134217728	; 0x8000000
   14eec:	and	lr, r1, #32
   14ef0:	b	14efc <__assert_fail@plt+0x3034>
   14ef4:	cmp	r3, #0
   14ef8:	bne	15150 <__assert_fail@plt+0x3288>
   14efc:	ldrb	r2, [r0], #1
   14f00:	cmp	r2, #125	; 0x7d
   14f04:	bhi	14efc <__assert_fail@plt+0x3034>
   14f08:	add	r4, pc, #4
   14f0c:	mov	r1, #1
   14f10:	ldr	pc, [r4, r2, lsl #2]
   14f14:	andeq	r5, r1, ip, asr #2
   14f18:	strdeq	r4, [r1], -ip
   14f1c:	strdeq	r4, [r1], -ip
   14f20:	strdeq	r4, [r1], -ip
   14f24:	strdeq	r4, [r1], -ip
   14f28:	strdeq	r4, [r1], -ip
   14f2c:	strdeq	r4, [r1], -ip
   14f30:	strdeq	r4, [r1], -ip
   14f34:	strdeq	r4, [r1], -ip
   14f38:	strdeq	r4, [r1], -ip
   14f3c:	strdeq	r4, [r1], -ip
   14f40:	strdeq	r4, [r1], -ip
   14f44:	strdeq	r4, [r1], -ip
   14f48:	strdeq	r4, [r1], -ip
   14f4c:	strdeq	r4, [r1], -ip
   14f50:	strdeq	r4, [r1], -ip
   14f54:	strdeq	r4, [r1], -ip
   14f58:	strdeq	r4, [r1], -ip
   14f5c:	strdeq	r4, [r1], -ip
   14f60:	strdeq	r4, [r1], -ip
   14f64:	strdeq	r4, [r1], -ip
   14f68:	strdeq	r4, [r1], -ip
   14f6c:	strdeq	r4, [r1], -ip
   14f70:	strdeq	r4, [r1], -ip
   14f74:	strdeq	r4, [r1], -ip
   14f78:	strdeq	r4, [r1], -ip
   14f7c:	strdeq	r4, [r1], -ip
   14f80:	strdeq	r4, [r1], -ip
   14f84:	strdeq	r4, [r1], -ip
   14f88:	strdeq	r4, [r1], -ip
   14f8c:	strdeq	r4, [r1], -ip
   14f90:	strdeq	r4, [r1], -ip
   14f94:	strdeq	r4, [r1], -ip
   14f98:	andeq	r5, r1, ip, lsl #2
   14f9c:	strdeq	r4, [r1], -ip
   14fa0:	strdeq	r4, [r1], -ip
   14fa4:	strdeq	r4, [r1], -ip
   14fa8:	strdeq	r4, [r1], -ip
   14fac:	strdeq	r4, [r1], -ip
   14fb0:	strdeq	r4, [r1], -ip
   14fb4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fb8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fbc:	andeq	r5, r1, r0, asr r1
   14fc0:	andeq	r5, r1, ip, lsl #2
   14fc4:	strdeq	r4, [r1], -ip
   14fc8:	strdeq	r4, [r1], -ip
   14fcc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fd0:	strdeq	r4, [r1], -ip
   14fd4:	strdeq	r4, [r1], -ip
   14fd8:	strdeq	r4, [r1], -ip
   14fdc:	strdeq	r4, [r1], -ip
   14fe0:	strdeq	r4, [r1], -ip
   14fe4:	strdeq	r4, [r1], -ip
   14fe8:	strdeq	r4, [r1], -ip
   14fec:	strdeq	r4, [r1], -ip
   14ff0:	strdeq	r4, [r1], -ip
   14ff4:	strdeq	r4, [r1], -ip
   14ff8:	strdeq	r4, [r1], -ip
   14ffc:	strdeq	r4, [r1], -ip
   15000:	strdeq	r4, [r1], -ip
   15004:	strdeq	r4, [r1], -ip
   15008:	strdeq	r4, [r1], -ip
   1500c:	strdeq	r4, [r1], -ip
   15010:	andeq	r5, r1, r0, asr r1
   15014:	andeq	r5, r1, ip, lsl #2
   15018:	strdeq	r4, [r1], -ip
   1501c:	strdeq	r4, [r1], -ip
   15020:	strdeq	r4, [r1], -ip
   15024:	strdeq	r4, [r1], -ip
   15028:	strdeq	r4, [r1], -ip
   1502c:	strdeq	r4, [r1], -ip
   15030:	strdeq	r4, [r1], -ip
   15034:	strdeq	r4, [r1], -ip
   15038:	strdeq	r4, [r1], -ip
   1503c:	strdeq	r4, [r1], -ip
   15040:	strdeq	r4, [r1], -ip
   15044:	strdeq	r4, [r1], -ip
   15048:	strdeq	r4, [r1], -ip
   1504c:	strdeq	r4, [r1], -ip
   15050:	strdeq	r4, [r1], -ip
   15054:	strdeq	r4, [r1], -ip
   15058:	strdeq	r4, [r1], -ip
   1505c:	strdeq	r4, [r1], -ip
   15060:	strdeq	r4, [r1], -ip
   15064:	strdeq	r4, [r1], -ip
   15068:	strdeq	r4, [r1], -ip
   1506c:	strdeq	r4, [r1], -ip
   15070:	strdeq	r4, [r1], -ip
   15074:	strdeq	r4, [r1], -ip
   15078:	strdeq	r4, [r1], -ip
   1507c:	strdeq	r4, [r1], -ip
   15080:	andeq	r5, r1, r0, asr r1
   15084:	andeq	r5, r1, r4, lsr #2
   15088:	strdeq	r4, [r1], -ip
   1508c:	strdeq	r4, [r1], -ip
   15090:	strdeq	r4, [r1], -ip
   15094:	strdeq	r4, [r1], -ip
   15098:	strdeq	r4, [r1], -ip
   1509c:	strdeq	r4, [r1], -ip
   150a0:	strdeq	r4, [r1], -ip
   150a4:	strdeq	r4, [r1], -ip
   150a8:	strdeq	r4, [r1], -ip
   150ac:	strdeq	r4, [r1], -ip
   150b0:	strdeq	r4, [r1], -ip
   150b4:	strdeq	r4, [r1], -ip
   150b8:	strdeq	r4, [r1], -ip
   150bc:	strdeq	r4, [r1], -ip
   150c0:	strdeq	r4, [r1], -ip
   150c4:	strdeq	r4, [r1], -ip
   150c8:	strdeq	r4, [r1], -ip
   150cc:	strdeq	r4, [r1], -ip
   150d0:	strdeq	r4, [r1], -ip
   150d4:	strdeq	r4, [r1], -ip
   150d8:	strdeq	r4, [r1], -ip
   150dc:	strdeq	r4, [r1], -ip
   150e0:	strdeq	r4, [r1], -ip
   150e4:	strdeq	r4, [r1], -ip
   150e8:	strdeq	r4, [r1], -ip
   150ec:	strdeq	r4, [r1], -ip
   150f0:	strdeq	r4, [r1], -ip
   150f4:	strdeq	r4, [r1], -ip
   150f8:	strdeq	r4, [r1], -ip
   150fc:	strdeq	r4, [r1], -ip
   15100:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15104:	strdeq	r4, [r1], -ip
   15108:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1510c:	cmp	lr, #0
   15110:	beq	14efc <__assert_fail@plt+0x3034>
   15114:	ldrb	r2, [r0]
   15118:	cmp	r2, #40	; 0x28
   1511c:	bne	14efc <__assert_fail@plt+0x3034>
   15120:	b	15150 <__assert_fail@plt+0x3288>
   15124:	cmp	r3, #0
   15128:	bne	14efc <__assert_fail@plt+0x3034>
   1512c:	mov	r1, #0
   15130:	cmp	ip, #0
   15134:	bne	15144 <__assert_fail@plt+0x327c>
   15138:	ldrb	r1, [r0]
   1513c:	cmp	r1, #0
   15140:	movwne	r1, #1
   15144:	add	r0, r0, r1
   15148:	b	14efc <__assert_fail@plt+0x3034>
   1514c:	mov	r1, #0
   15150:	mov	r0, r1
   15154:	pop	{r4, sl, fp, pc}
   15158:	mov	r0, #8
   1515c:	b	31f3c <__assert_fail@plt+0x20074>
   15160:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15164:	add	fp, sp, #24
   15168:	ldr	r6, [r0]
   1516c:	mov	r8, r0
   15170:	cmp	r6, #0
   15174:	bne	15194 <__assert_fail@plt+0x32cc>
   15178:	b	15208 <__assert_fail@plt+0x3340>
   1517c:	ldr	r0, [r5, #12]
   15180:	bl	1a590 <__assert_fail@plt+0x86c8>
   15184:	mov	r0, r5
   15188:	bl	176c0 <__assert_fail@plt+0x57f8>
   1518c:	cmp	r6, #0
   15190:	beq	15208 <__assert_fail@plt+0x3340>
   15194:	mov	r5, r6
   15198:	ldr	r6, [r6]
   1519c:	ldr	r0, [r5, #4]
   151a0:	cmp	r0, #0
   151a4:	beq	1517c <__assert_fail@plt+0x32b4>
   151a8:	cmp	r0, #1
   151ac:	bne	15184 <__assert_fail@plt+0x32bc>
   151b0:	ldr	r0, [r5, #20]
   151b4:	cmp	r0, #1
   151b8:	blt	151fc <__assert_fail@plt+0x3334>
   151bc:	mov	r7, #0
   151c0:	mov	r4, #0
   151c4:	b	151d8 <__assert_fail@plt+0x3310>
   151c8:	add	r4, r4, #1
   151cc:	add	r7, r7, #36	; 0x24
   151d0:	cmp	r4, r0
   151d4:	bge	151fc <__assert_fail@plt+0x3334>
   151d8:	ldr	r1, [r5, #12]
   151dc:	add	r1, r1, r7
   151e0:	ldrb	r2, [r1, #3]
   151e4:	tst	r2, #8
   151e8:	beq	151c8 <__assert_fail@plt+0x3300>
   151ec:	add	r0, r1, #4
   151f0:	bl	20bd4 <__assert_fail@plt+0xed0c>
   151f4:	ldr	r0, [r5, #20]
   151f8:	b	151c8 <__assert_fail@plt+0x3300>
   151fc:	ldr	r0, [r5, #12]
   15200:	bl	176c0 <__assert_fail@plt+0x57f8>
   15204:	b	15184 <__assert_fail@plt+0x32bc>
   15208:	ldr	r5, [r8, #4]
   1520c:	cmp	r5, #0
   15210:	beq	15234 <__assert_fail@plt+0x336c>
   15214:	ldr	r0, [r5, #4]
   15218:	ldr	r4, [r5]
   1521c:	bl	176c0 <__assert_fail@plt+0x57f8>
   15220:	mov	r0, r5
   15224:	bl	176c0 <__assert_fail@plt+0x57f8>
   15228:	cmp	r4, #0
   1522c:	mov	r5, r4
   15230:	bne	15214 <__assert_fail@plt+0x334c>
   15234:	mov	r0, r8
   15238:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1523c:	b	176c0 <__assert_fail@plt+0x57f8>
   15240:	push	{r4, r5, r6, r7, fp, lr}
   15244:	add	fp, sp, #16
   15248:	mov	r5, r0
   1524c:	movw	r0, #21228	; 0x52ec
   15250:	movw	r7, #7148	; 0x1bec
   15254:	tst	r2, #268435456	; 0x10000000
   15258:	mov	r4, r2
   1525c:	mov	r6, r1
   15260:	movt	r0, #1
   15264:	movt	r7, #1
   15268:	moveq	r7, r0
   1526c:	mov	r0, r5
   15270:	blx	r7
   15274:	mov	r1, r0
   15278:	clz	r0, r0
   1527c:	tst	r4, #1073741824	; 0x40000000
   15280:	lsr	r0, r0, #5
   15284:	bne	15298 <__assert_fail@plt+0x33d0>
   15288:	cmp	r1, #0
   1528c:	ldrbne	r1, [r6]
   15290:	cmpne	r1, #0
   15294:	bne	1529c <__assert_fail@plt+0x33d4>
   15298:	pop	{r4, r5, r6, r7, fp, pc}
   1529c:	add	r6, r6, #1
   152a0:	uxtb	r1, r1
   152a4:	mov	r0, #0
   152a8:	cmp	r1, #47	; 0x2f
   152ac:	bne	152d4 <__assert_fail@plt+0x340c>
   152b0:	ldrb	r1, [r6]
   152b4:	cmp	r1, #47	; 0x2f
   152b8:	beq	152d4 <__assert_fail@plt+0x340c>
   152bc:	mov	r0, r5
   152c0:	mov	r1, r6
   152c4:	mov	r2, r4
   152c8:	blx	r7
   152cc:	clz	r0, r0
   152d0:	lsr	r0, r0, #5
   152d4:	cmp	r0, #0
   152d8:	bne	15298 <__assert_fail@plt+0x33d0>
   152dc:	ldrb	r1, [r6], #1
   152e0:	cmp	r1, #0
   152e4:	bne	152a0 <__assert_fail@plt+0x33d8>
   152e8:	b	15298 <__assert_fail@plt+0x33d0>
   152ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   152f0:	add	fp, sp, #24
   152f4:	mov	r4, r0
   152f8:	mov	r5, r1
   152fc:	and	r0, r2, #16
   15300:	tst	r2, #8
   15304:	bne	15320 <__assert_fail@plt+0x3458>
   15308:	cmp	r0, #0
   1530c:	beq	153a4 <__assert_fail@plt+0x34dc>
   15310:	mov	r0, r4
   15314:	mov	r1, r5
   15318:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1531c:	b	1c084 <__assert_fail@plt+0xa1bc>
   15320:	cmp	r0, #0
   15324:	beq	153b4 <__assert_fail@plt+0x34ec>
   15328:	mov	r0, r5
   1532c:	bl	32048 <__assert_fail@plt+0x20180>
   15330:	mov	r1, #47	; 0x2f
   15334:	mov	r5, r0
   15338:	mov	r8, #47	; 0x2f
   1533c:	bl	11cb8 <strchr@plt>
   15340:	cmp	r0, #0
   15344:	beq	15384 <__assert_fail@plt+0x34bc>
   15348:	mov	r7, r0
   1534c:	mov	r9, #0
   15350:	mov	r0, r4
   15354:	mov	r1, r5
   15358:	strb	r9, [r7]
   1535c:	bl	1c084 <__assert_fail@plt+0xa1bc>
   15360:	cmp	r0, #1
   15364:	blt	15390 <__assert_fail@plt+0x34c8>
   15368:	strb	r8, [r7], #1
   1536c:	mov	r1, #47	; 0x2f
   15370:	mov	r0, r7
   15374:	bl	11cb8 <strchr@plt>
   15378:	mov	r7, r0
   1537c:	cmp	r0, #0
   15380:	bne	15350 <__assert_fail@plt+0x3488>
   15384:	mov	r0, r4
   15388:	mov	r1, r5
   1538c:	bl	1c084 <__assert_fail@plt+0xa1bc>
   15390:	mov	r6, r0
   15394:	mov	r0, r5
   15398:	bl	176c0 <__assert_fail@plt+0x57f8>
   1539c:	mov	r0, r6
   153a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153a4:	mov	r0, r4
   153a8:	mov	r1, r5
   153ac:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   153b0:	b	11a3c <strcmp@plt>
   153b4:	mov	r0, r4
   153b8:	bl	11cac <strlen@plt>
   153bc:	mov	r7, r0
   153c0:	mov	r0, r4
   153c4:	mov	r1, r5
   153c8:	mov	r2, r7
   153cc:	bl	11e80 <strncmp@plt>
   153d0:	mov	r6, r0
   153d4:	cmp	r0, #0
   153d8:	beq	153e4 <__assert_fail@plt+0x351c>
   153dc:	mov	r0, r6
   153e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153e4:	ldrb	r0, [r5, r7]
   153e8:	subs	r6, r0, #47	; 0x2f
   153ec:	movne	r6, r0
   153f0:	mov	r0, r6
   153f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153fc:	add	fp, sp, #28
   15400:	sub	sp, sp, #28
   15404:	ldr	r0, [r0]
   15408:	cmp	r0, #0
   1540c:	beq	15624 <__assert_fail@plt+0x375c>
   15410:	mov	r7, r1
   15414:	add	r1, r1, #1
   15418:	mov	r4, #0
   1541c:	str	r1, [sp, #16]
   15420:	str	r7, [sp, #24]
   15424:	mov	r6, r0
   15428:	ldr	r0, [r0, #4]
   1542c:	cmp	r0, #0
   15430:	beq	15550 <__assert_fail@plt+0x3688>
   15434:	str	r4, [sp, #12]
   15438:	ldr	r4, [r6, #20]
   1543c:	cmp	r4, #1
   15440:	blt	1560c <__assert_fail@plt+0x3744>
   15444:	ldr	sl, [r6, #12]
   15448:	mov	r8, #0
   1544c:	str	r6, [sp, #8]
   15450:	str	r4, [sp, #20]
   15454:	b	15484 <__assert_fail@plt+0x35bc>
   15458:	mov	r5, #0
   1545c:	mov	r1, r7
   15460:	mov	r2, #0
   15464:	mov	r3, #0
   15468:	str	r5, [sp]
   1546c:	bl	20e04 <__assert_fail@plt+0xef3c>
   15470:	cmp	r0, #0
   15474:	beq	1563c <__assert_fail@plt+0x3774>
   15478:	add	r8, r8, #1
   1547c:	cmp	r8, r4
   15480:	beq	15608 <__assert_fail@plt+0x3740>
   15484:	add	r0, r8, r8, lsl #3
   15488:	mov	r1, sl
   1548c:	ldr	r6, [r1, r0, lsl #2]!
   15490:	add	r0, r1, #4
   15494:	tst	r6, #134217728	; 0x8000000
   15498:	bne	15458 <__assert_fail@plt+0x3590>
   1549c:	movw	r1, #21228	; 0x52ec
   154a0:	movw	r9, #7148	; 0x1bec
   154a4:	tst	r6, #268435456	; 0x10000000
   154a8:	mov	r2, r6
   154ac:	movt	r1, #1
   154b0:	movt	r9, #1
   154b4:	moveq	r9, r1
   154b8:	mov	r1, r7
   154bc:	ldr	r7, [r0]
   154c0:	mov	r0, r7
   154c4:	blx	r9
   154c8:	clz	r1, r0
   154cc:	tst	r6, #1073741824	; 0x40000000
   154d0:	lsr	r1, r1, #5
   154d4:	bne	1553c <__assert_fail@plt+0x3674>
   154d8:	cmp	r0, #0
   154dc:	beq	1553c <__assert_fail@plt+0x3674>
   154e0:	ldr	r0, [sp, #24]
   154e4:	ldrb	r0, [r0]
   154e8:	cmp	r0, #0
   154ec:	beq	1553c <__assert_fail@plt+0x3674>
   154f0:	ldr	r5, [sp, #16]
   154f4:	uxtb	r0, r0
   154f8:	mov	r1, #0
   154fc:	cmp	r0, #47	; 0x2f
   15500:	bne	15528 <__assert_fail@plt+0x3660>
   15504:	ldrb	r0, [r5]
   15508:	cmp	r0, #47	; 0x2f
   1550c:	beq	15528 <__assert_fail@plt+0x3660>
   15510:	mov	r0, r7
   15514:	mov	r1, r5
   15518:	mov	r2, r6
   1551c:	blx	r9
   15520:	clz	r0, r0
   15524:	lsr	r1, r0, #5
   15528:	cmp	r1, #0
   1552c:	bne	1553c <__assert_fail@plt+0x3674>
   15530:	ldrb	r0, [r5], #1
   15534:	cmp	r0, #0
   15538:	bne	154f4 <__assert_fail@plt+0x362c>
   1553c:	ldr	r7, [sp, #24]
   15540:	ldr	r4, [sp, #20]
   15544:	cmp	r1, #0
   15548:	beq	15478 <__assert_fail@plt+0x35b0>
   1554c:	b	15638 <__assert_fail@plt+0x3770>
   15550:	cmp	r4, #0
   15554:	bne	1556c <__assert_fail@plt+0x36a4>
   15558:	mov	r0, r7
   1555c:	bl	11cac <strlen@plt>
   15560:	add	r0, r0, #1
   15564:	bl	31b44 <__assert_fail@plt+0x1fc7c>
   15568:	mov	r4, r0
   1556c:	ldr	r0, [r6, #8]
   15570:	mov	sl, r6
   15574:	ldr	r6, [r6, #12]
   15578:	and	r8, r0, #1073741824	; 0x40000000
   1557c:	and	r9, r0, #8
   15580:	mov	r0, r4
   15584:	mov	r1, r7
   15588:	bl	11bb0 <strcpy@plt>
   1558c:	mov	r0, r6
   15590:	mov	r1, r4
   15594:	bl	19fd8 <__assert_fail@plt+0x8110>
   15598:	cmp	r0, #0
   1559c:	bne	15668 <__assert_fail@plt+0x37a0>
   155a0:	cmp	r9, #0
   155a4:	beq	155dc <__assert_fail@plt+0x3714>
   155a8:	mov	r0, r4
   155ac:	mov	r1, #47	; 0x2f
   155b0:	bl	11d9c <strrchr@plt>
   155b4:	cmp	r0, #0
   155b8:	beq	155dc <__assert_fail@plt+0x3714>
   155bc:	mov	r5, #0
   155c0:	mov	r1, r4
   155c4:	strb	r5, [r0]
   155c8:	mov	r0, r6
   155cc:	bl	19fd8 <__assert_fail@plt+0x8110>
   155d0:	cmp	r0, #0
   155d4:	beq	155a8 <__assert_fail@plt+0x36e0>
   155d8:	b	15630 <__assert_fail@plt+0x3768>
   155dc:	cmp	r8, #0
   155e0:	bne	155fc <__assert_fail@plt+0x3734>
   155e4:	mov	r0, r7
   155e8:	mov	r1, #47	; 0x2f
   155ec:	bl	11cb8 <strchr@plt>
   155f0:	add	r7, r0, #1
   155f4:	cmp	r0, #0
   155f8:	bne	15580 <__assert_fail@plt+0x36b8>
   155fc:	ldr	r7, [sp, #24]
   15600:	mov	r6, sl
   15604:	b	15610 <__assert_fail@plt+0x3748>
   15608:	ldr	r6, [sp, #8]
   1560c:	ldr	r4, [sp, #12]
   15610:	ldr	r0, [r6]
   15614:	cmp	r0, #0
   15618:	bne	15424 <__assert_fail@plt+0x355c>
   1561c:	mov	r5, #1
   15620:	b	15644 <__assert_fail@plt+0x377c>
   15624:	mov	r0, #0
   15628:	sub	sp, fp, #28
   1562c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15630:	mov	r6, sl
   15634:	b	15644 <__assert_fail@plt+0x377c>
   15638:	mov	r5, #0
   1563c:	ldr	r6, [sp, #8]
   15640:	ldr	r4, [sp, #12]
   15644:	mov	r0, r4
   15648:	bl	176c0 <__assert_fail@plt+0x57f8>
   1564c:	ldr	r0, [r6, #8]
   15650:	mov	r1, #1
   15654:	bic	r0, r1, r0, lsr #29
   15658:	subs	r0, r5, r0
   1565c:	movwne	r0, #1
   15660:	sub	sp, fp, #28
   15664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15668:	mov	r5, #0
   1566c:	mov	r6, sl
   15670:	b	15644 <__assert_fail@plt+0x377c>
   15674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15678:	add	fp, sp, #28
   1567c:	sub	sp, sp, #4
   15680:	mov	r7, r2
   15684:	mov	r4, r1
   15688:	mov	r6, r0
   1568c:	tst	r2, #402653184	; 0x18000000
   15690:	beq	1572c <__assert_fail@plt+0x3864>
   15694:	mov	r0, r4
   15698:	mov	r1, r7
   1569c:	bl	14edc <__assert_fail@plt+0x3014>
   156a0:	cmp	r0, #0
   156a4:	beq	1572c <__assert_fail@plt+0x3864>
   156a8:	ldr	r5, [r6]
   156ac:	cmp	r5, #0
   156b0:	beq	156d0 <__assert_fail@plt+0x3808>
   156b4:	ldr	r0, [r5, #4]
   156b8:	cmp	r0, #1
   156bc:	bne	156d0 <__assert_fail@plt+0x3808>
   156c0:	ldr	r0, [r5, #8]
   156c4:	eor	r0, r0, r7
   156c8:	tst	r0, #536870912	; 0x20000000
   156cc:	beq	156f0 <__assert_fail@plt+0x3828>
   156d0:	mov	r0, #24
   156d4:	bl	31f3c <__assert_fail@plt+0x20074>
   156d8:	ldr	r1, [r6]
   156dc:	mov	r5, r0
   156e0:	mov	r0, #1
   156e4:	str	r1, [r5]
   156e8:	stmib	r5, {r0, r7}
   156ec:	str	r5, [r6]
   156f0:	mov	r1, r5
   156f4:	ldr	r2, [r1, #16]!
   156f8:	ldr	r0, [r1, #4]
   156fc:	cmp	r0, r2
   15700:	bne	1584c <__assert_fail@plt+0x3984>
   15704:	ldr	r0, [r5, #12]
   15708:	mov	r2, #36	; 0x24
   1570c:	mvn	r3, #0
   15710:	str	r2, [sp]
   15714:	mov	r2, #1
   15718:	bl	31d74 <__assert_fail@plt+0x1feac>
   1571c:	str	r0, [r5, #12]
   15720:	mov	r8, r0
   15724:	ldr	r0, [r5, #20]
   15728:	b	15850 <__assert_fail@plt+0x3988>
   1572c:	ldr	r5, [r6]
   15730:	cmp	r5, #0
   15734:	beq	1575c <__assert_fail@plt+0x3894>
   15738:	ldr	r0, [r5, #4]
   1573c:	cmp	r0, #0
   15740:	bne	1575c <__assert_fail@plt+0x3894>
   15744:	ldr	r0, [r5, #8]
   15748:	movw	r1, #24
   1574c:	movt	r1, #24576	; 0x6000
   15750:	eor	r0, r0, r7
   15754:	tst	r0, r1
   15758:	beq	157c4 <__assert_fail@plt+0x38fc>
   1575c:	mov	r0, #24
   15760:	bl	31f3c <__assert_fail@plt+0x20074>
   15764:	mov	r5, r0
   15768:	mov	r0, #0
   1576c:	movw	r2, #23808	; 0x5d00
   15770:	movw	r3, #23836	; 0x5d1c
   15774:	mov	r1, #0
   15778:	stmib	r5, {r0, r7}
   1577c:	movw	r0, #23860	; 0x5d34
   15780:	movt	r2, #1
   15784:	movt	r3, #1
   15788:	movt	r0, #1
   1578c:	str	r0, [sp]
   15790:	ands	r0, r7, #16
   15794:	movw	r0, #23620	; 0x5c44
   15798:	movt	r0, #1
   1579c:	movne	r2, r0
   157a0:	movw	r0, #23812	; 0x5d04
   157a4:	movt	r0, #1
   157a8:	movne	r3, r0
   157ac:	mov	r0, #0
   157b0:	bl	1a28c <__assert_fail@plt+0x83c4>
   157b4:	str	r0, [r5, #12]
   157b8:	ldr	r0, [r6]
   157bc:	str	r0, [r5]
   157c0:	str	r5, [r6]
   157c4:	mov	r0, r4
   157c8:	bl	32048 <__assert_fail@plt+0x20180>
   157cc:	mov	r4, r0
   157d0:	and	r0, r7, #268435458	; 0x10000002
   157d4:	cmp	r0, #268435456	; 0x10000000
   157d8:	bne	15828 <__assert_fail@plt+0x3960>
   157dc:	mov	r0, r4
   157e0:	mov	r1, r4
   157e4:	b	15814 <__assert_fail@plt+0x394c>
   157e8:	mov	r2, r1
   157ec:	ldrb	r3, [r2, #1]!
   157f0:	cmp	r3, #0
   157f4:	moveq	r2, r1
   157f8:	movwne	r3, #1
   157fc:	ldrb	r2, [r2]
   15800:	add	r1, r1, r3
   15804:	strb	r2, [r0], #1
   15808:	cmp	r2, #0
   1580c:	add	r1, r1, #1
   15810:	beq	15828 <__assert_fail@plt+0x3960>
   15814:	ldrb	r2, [r1]
   15818:	cmp	r2, #92	; 0x5c
   1581c:	beq	157e8 <__assert_fail@plt+0x3920>
   15820:	mov	r3, #0
   15824:	b	15800 <__assert_fail@plt+0x3938>
   15828:	ldr	r0, [r5, #12]
   1582c:	mov	r1, r4
   15830:	bl	1ade0 <__assert_fail@plt+0x8f18>
   15834:	cmp	r0, r4
   15838:	beq	1597c <__assert_fail@plt+0x3ab4>
   1583c:	mov	r0, r4
   15840:	sub	sp, fp, #28
   15844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15848:	b	176c0 <__assert_fail@plt+0x57f8>
   1584c:	ldr	r8, [r5, #12]
   15850:	add	sl, r0, r0, lsl #3
   15854:	add	r9, r0, #1
   15858:	tst	r7, #134217728	; 0x8000000
   1585c:	str	r9, [r5, #20]
   15860:	str	r7, [r8, sl, lsl #2]
   15864:	bne	158a0 <__assert_fail@plt+0x39d8>
   15868:	tst	r7, #67108864	; 0x4000000
   1586c:	beq	15890 <__assert_fail@plt+0x39c8>
   15870:	mov	r0, r4
   15874:	bl	32048 <__assert_fail@plt+0x20180>
   15878:	mov	r4, r0
   1587c:	mov	r0, #8
   15880:	bl	31b44 <__assert_fail@plt+0x1fc7c>
   15884:	ldr	r1, [r6, #4]
   15888:	stm	r0, {r1, r4}
   1588c:	str	r0, [r6, #4]
   15890:	add	r0, r8, sl, lsl #2
   15894:	str	r4, [r0, #4]
   15898:	sub	sp, fp, #28
   1589c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158a0:	mov	r0, #2
   158a4:	tst	r7, #8
   158a8:	and	r0, r0, r7, lsr #3
   158ac:	orr	r6, r0, #9
   158b0:	bne	158e8 <__assert_fail@plt+0x3a20>
   158b4:	add	r0, r8, sl, lsl #2
   158b8:	mov	r1, r4
   158bc:	mov	r2, r6
   158c0:	add	r0, r0, #4
   158c4:	bl	20a4c <__assert_fail@plt+0xeb84>
   158c8:	mov	r4, r0
   158cc:	cmp	r4, #0
   158d0:	beq	1597c <__assert_fail@plt+0x3ab4>
   158d4:	ldr	r9, [r5, #20]
   158d8:	sub	r0, r9, #1
   158dc:	str	r0, [r5, #20]
   158e0:	sub	sp, fp, #28
   158e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e8:	mov	r0, r4
   158ec:	bl	11cac <strlen@plt>
   158f0:	sub	r1, r4, #1
   158f4:	mov	r7, r0
   158f8:	cmp	r0, #1
   158fc:	blt	15914 <__assert_fail@plt+0x3a4c>
   15900:	ldrb	r2, [r1, r7]
   15904:	sub	r0, r7, #1
   15908:	cmp	r2, #47	; 0x2f
   1590c:	beq	158f4 <__assert_fail@plt+0x3a2c>
   15910:	b	1591c <__assert_fail@plt+0x3a54>
   15914:	cmp	r7, #0
   15918:	beq	158d8 <__assert_fail@plt+0x3a10>
   1591c:	add	r0, r7, #7
   15920:	bl	31b5c <__assert_fail@plt+0x1fc94>
   15924:	mov	r1, r4
   15928:	mov	r2, r7
   1592c:	mov	r9, r6
   15930:	mov	r6, r0
   15934:	bl	11ab4 <memcpy@plt>
   15938:	movw	r0, #12072	; 0x2f28
   1593c:	mov	r1, r6
   15940:	mov	r2, r9
   15944:	movt	r0, #10798	; 0x2a2e
   15948:	str	r0, [r1, r7]!
   1594c:	movw	r0, #10538	; 0x292a
   15950:	movt	r0, #63	; 0x3f
   15954:	str	r0, [r1, #3]
   15958:	add	r0, r8, sl, lsl #2
   1595c:	mov	r1, r6
   15960:	add	r0, r0, #4
   15964:	bl	20a4c <__assert_fail@plt+0xeb84>
   15968:	mov	r4, r0
   1596c:	mov	r0, r6
   15970:	bl	176c0 <__assert_fail@plt+0x57f8>
   15974:	cmp	r4, #0
   15978:	bne	158d4 <__assert_fail@plt+0x3a0c>
   1597c:	sub	sp, fp, #28
   15980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15988:	add	fp, sp, #28
   1598c:	sub	sp, sp, #20
   15990:	str	r0, [sp, #8]
   15994:	mov	r0, #0
   15998:	mov	r9, r1
   1599c:	mov	r1, #0
   159a0:	str	r3, [sp, #12]
   159a4:	mov	r4, r2
   159a8:	str	r0, [sp, #4]
   159ac:	mov	r0, r2
   159b0:	str	r1, [sp, #16]
   159b4:	bl	11e98 <getc@plt>
   159b8:	cmn	r0, #1
   159bc:	beq	15a30 <__assert_fail@plt+0x3b68>
   159c0:	mov	r5, r0
   159c4:	mov	r0, #0
   159c8:	mov	sl, #1
   159cc:	add	r8, sp, #16
   159d0:	mov	r7, #0
   159d4:	mov	r6, #0
   159d8:	cmp	r6, r0
   159dc:	bne	159fc <__assert_fail@plt+0x3b34>
   159e0:	mov	r0, r7
   159e4:	mov	r1, r8
   159e8:	mov	r2, #1
   159ec:	mvn	r3, #0
   159f0:	str	sl, [sp]
   159f4:	bl	31d74 <__assert_fail@plt+0x1feac>
   159f8:	mov	r7, r0
   159fc:	mov	r0, r4
   15a00:	strb	r5, [r7, r6]
   15a04:	bl	11e98 <getc@plt>
   15a08:	cmn	r0, #1
   15a0c:	beq	15a28 <__assert_fail@plt+0x3b60>
   15a10:	mov	r5, r0
   15a14:	ldr	r0, [sp, #16]
   15a18:	add	r6, r6, #1
   15a1c:	cmp	r6, r0
   15a20:	beq	159e0 <__assert_fail@plt+0x3b18>
   15a24:	b	159fc <__assert_fail@plt+0x3b34>
   15a28:	add	r5, r6, #1
   15a2c:	b	15a38 <__assert_fail@plt+0x3b70>
   15a30:	mov	r5, #0
   15a34:	mov	r7, #0
   15a38:	ldr	r6, [fp, #8]
   15a3c:	mov	r0, r4
   15a40:	bl	11a9c <ferror@plt>
   15a44:	cmp	r0, #0
   15a48:	beq	15a58 <__assert_fail@plt+0x3b90>
   15a4c:	bl	11cdc <__errno_location@plt>
   15a50:	ldr	r0, [r0]
   15a54:	str	r0, [sp, #4]
   15a58:	add	r1, r5, #1
   15a5c:	mov	r0, r7
   15a60:	bl	31bc0 <__assert_fail@plt+0x1fcf8>
   15a64:	mov	r7, r0
   15a68:	mov	r4, r0
   15a6c:	cmp	r5, #0
   15a70:	strb	r6, [r7, r5]!
   15a74:	beq	15a8c <__assert_fail@plt+0x3bc4>
   15a78:	add	r0, r5, r4
   15a7c:	ldrb	r0, [r0, #-1]
   15a80:	subs	r5, r0, r6
   15a84:	movwne	r5, #1
   15a88:	b	15a90 <__assert_fail@plt+0x3bc8>
   15a8c:	mov	r5, #0
   15a90:	mov	r0, #8
   15a94:	bl	31b44 <__assert_fail@plt+0x1fc7c>
   15a98:	ldr	r1, [r9, #4]
   15a9c:	add	r7, r7, r5
   15aa0:	cmp	r4, r7
   15aa4:	stm	r0, {r1, r4}
   15aa8:	str	r0, [r9, #4]
   15aac:	bcs	15b3c <__assert_fail@plt+0x3c74>
   15ab0:	ldr	r8, [fp, #12]
   15ab4:	mov	sl, #0
   15ab8:	mov	r5, r4
   15abc:	b	15aec <__assert_fail@plt+0x3c24>
   15ac0:	strb	sl, [r1]
   15ac4:	mov	r1, r5
   15ac8:	ldr	r2, [sp, #12]
   15acc:	ldr	r5, [sp, #8]
   15ad0:	mov	r0, r9
   15ad4:	mov	r3, r8
   15ad8:	blx	r5
   15adc:	add	r5, r4, #1
   15ae0:	add	r4, r4, #1
   15ae4:	cmp	r4, r7
   15ae8:	beq	15b3c <__assert_fail@plt+0x3c74>
   15aec:	ldrb	r0, [r4]
   15af0:	cmp	r0, r6
   15af4:	bne	15ae0 <__assert_fail@plt+0x3c18>
   15af8:	bl	11c7c <__ctype_b_loc@plt>
   15afc:	ldr	r0, [r0]
   15b00:	add	r1, r0, r6, lsl #1
   15b04:	ldrb	r1, [r1, #1]
   15b08:	tst	r1, #32
   15b0c:	mov	r1, r4
   15b10:	beq	15ac0 <__assert_fail@plt+0x3bf8>
   15b14:	mov	r1, r4
   15b18:	cmp	r5, r1
   15b1c:	beq	15adc <__assert_fail@plt+0x3c14>
   15b20:	ldrb	r2, [r1, #-1]!
   15b24:	add	r2, r0, r2, lsl #1
   15b28:	ldrb	r2, [r2, #1]
   15b2c:	tst	r2, #32
   15b30:	bne	15b18 <__assert_fail@plt+0x3c50>
   15b34:	add	r1, r1, #1
   15b38:	b	15ac0 <__assert_fail@plt+0x3bf8>
   15b3c:	bl	11cdc <__errno_location@plt>
   15b40:	ldr	r1, [sp, #4]
   15b44:	cmp	r1, #0
   15b48:	str	r1, [r0]
   15b4c:	mvnne	r1, #0
   15b50:	mov	r0, r1
   15b54:	sub	sp, fp, #28
   15b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b60:	add	fp, sp, #24
   15b64:	sub	sp, sp, #16
   15b68:	mov	r5, r1
   15b6c:	movw	r1, #33488	; 0x82d0
   15b70:	str	r0, [sp, #12]
   15b74:	mov	r0, r2
   15b78:	mov	r4, r3
   15b7c:	mov	r6, r2
   15b80:	movt	r1, #3
   15b84:	bl	11a3c <strcmp@plt>
   15b88:	ldr	r8, [fp, #8]
   15b8c:	cmp	r0, #0
   15b90:	beq	15c00 <__assert_fail@plt+0x3d38>
   15b94:	movw	r1, #31532	; 0x7b2c
   15b98:	mov	r0, r6
   15b9c:	movt	r1, #3
   15ba0:	bl	11e20 <fopen64@plt>
   15ba4:	mvn	r6, #0
   15ba8:	cmp	r0, #0
   15bac:	beq	15c30 <__assert_fail@plt+0x3d68>
   15bb0:	mov	r7, r0
   15bb4:	add	r0, sp, #12
   15bb8:	mov	r1, r5
   15bbc:	mov	r3, r4
   15bc0:	str	r8, [sp]
   15bc4:	str	r0, [sp, #4]
   15bc8:	movw	r0, #23612	; 0x5c3c
   15bcc:	mov	r2, r7
   15bd0:	movt	r0, #1
   15bd4:	bl	15984 <__assert_fail@plt+0x3abc>
   15bd8:	mov	r8, r0
   15bdc:	bl	11cdc <__errno_location@plt>
   15be0:	ldr	r4, [r0]
   15be4:	mov	r5, r0
   15be8:	mov	r0, r7
   15bec:	bl	15d38 <__assert_fail@plt+0x3e70>
   15bf0:	cmp	r0, #0
   15bf4:	moveq	r6, r8
   15bf8:	streq	r4, [r5]
   15bfc:	b	15c30 <__assert_fail@plt+0x3d68>
   15c00:	movw	r0, #37424	; 0x9230
   15c04:	mov	r1, r5
   15c08:	mov	r3, r4
   15c0c:	str	r8, [sp]
   15c10:	movt	r0, #4
   15c14:	ldr	r2, [r0]
   15c18:	add	r0, sp, #12
   15c1c:	str	r0, [sp, #4]
   15c20:	movw	r0, #23612	; 0x5c3c
   15c24:	movt	r0, #1
   15c28:	bl	15984 <__assert_fail@plt+0x3abc>
   15c2c:	mov	r6, r0
   15c30:	mov	r0, r6
   15c34:	sub	sp, fp, #24
   15c38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c3c:	ldr	r3, [r3]
   15c40:	bx	r3
   15c44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c48:	add	fp, sp, #24
   15c4c:	sub	sp, sp, #56	; 0x38
   15c50:	mov	r7, #0
   15c54:	mov	r8, r1
   15c58:	str	r7, [sp, #8]
   15c5c:	str	r7, [sp, #4]
   15c60:	strb	r7, [sp, #12]
   15c64:	strb	r7, [sp]
   15c68:	str	r0, [sp, #16]
   15c6c:	mov	r0, sp
   15c70:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   15c74:	ldrb	r1, [sp, #24]
   15c78:	ldr	r0, [sp, #28]
   15c7c:	cmp	r1, #0
   15c80:	beq	15c8c <__assert_fail@plt+0x3dc4>
   15c84:	cmp	r0, #0
   15c88:	beq	15cf0 <__assert_fail@plt+0x3e28>
   15c8c:	mov	r4, #0
   15c90:	mov	r5, sp
   15c94:	mov	r7, #0
   15c98:	tst	r1, #255	; 0xff
   15c9c:	beq	15cb0 <__assert_fail@plt+0x3de8>
   15ca0:	bl	11ad8 <towlower@plt>
   15ca4:	mov	r6, r0
   15ca8:	ldr	r0, [sp, #16]
   15cac:	b	15cb8 <__assert_fail@plt+0x3df0>
   15cb0:	ldr	r0, [sp, #16]
   15cb4:	ldrb	r6, [r0]
   15cb8:	strb	r4, [sp, #12]
   15cbc:	ldr	r1, [sp, #20]
   15cc0:	add	r0, r0, r1
   15cc4:	str	r0, [sp, #16]
   15cc8:	mov	r0, r5
   15ccc:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   15cd0:	rsb	r0, r7, r7, lsl #5
   15cd4:	ldrb	r1, [sp, #24]
   15cd8:	add	r7, r6, r0
   15cdc:	ldr	r0, [sp, #28]
   15ce0:	cmp	r1, #0
   15ce4:	beq	15c98 <__assert_fail@plt+0x3dd0>
   15ce8:	cmp	r0, #0
   15cec:	bne	15c98 <__assert_fail@plt+0x3dd0>
   15cf0:	udiv	r0, r7, r8
   15cf4:	mls	r0, r0, r8, r7
   15cf8:	sub	sp, fp, #24
   15cfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d00:	b	1a238 <__assert_fail@plt+0x8370>
   15d04:	push	{fp, lr}
   15d08:	mov	fp, sp
   15d0c:	bl	1c084 <__assert_fail@plt+0xa1bc>
   15d10:	clz	r0, r0
   15d14:	lsr	r0, r0, #5
   15d18:	pop	{fp, pc}
   15d1c:	push	{fp, lr}
   15d20:	mov	fp, sp
   15d24:	bl	11a3c <strcmp@plt>
   15d28:	clz	r0, r0
   15d2c:	lsr	r0, r0, #5
   15d30:	pop	{fp, pc}
   15d34:	b	176c0 <__assert_fail@plt+0x57f8>
   15d38:	push	{r4, r5, r6, sl, fp, lr}
   15d3c:	add	fp, sp, #16
   15d40:	sub	sp, sp, #8
   15d44:	mov	r4, r0
   15d48:	bl	11d30 <fileno@plt>
   15d4c:	cmn	r0, #1
   15d50:	ble	15dc4 <__assert_fail@plt+0x3efc>
   15d54:	mov	r0, r4
   15d58:	bl	11c34 <__freading@plt>
   15d5c:	cmp	r0, #0
   15d60:	beq	15d8c <__assert_fail@plt+0x3ec4>
   15d64:	mov	r0, r4
   15d68:	bl	11d30 <fileno@plt>
   15d6c:	mov	r1, #1
   15d70:	mov	r2, #0
   15d74:	mov	r3, #0
   15d78:	str	r1, [sp]
   15d7c:	bl	11b8c <lseek64@plt>
   15d80:	and	r0, r0, r1
   15d84:	cmn	r0, #1
   15d88:	beq	15dc4 <__assert_fail@plt+0x3efc>
   15d8c:	mov	r0, r4
   15d90:	bl	15dd4 <__assert_fail@plt+0x3f0c>
   15d94:	cmp	r0, #0
   15d98:	beq	15dc4 <__assert_fail@plt+0x3efc>
   15d9c:	bl	11cdc <__errno_location@plt>
   15da0:	ldr	r6, [r0]
   15da4:	mov	r5, r0
   15da8:	mov	r0, r4
   15dac:	bl	11d54 <fclose@plt>
   15db0:	cmp	r6, #0
   15db4:	strne	r6, [r5]
   15db8:	mvnne	r0, #0
   15dbc:	sub	sp, fp, #16
   15dc0:	pop	{r4, r5, r6, sl, fp, pc}
   15dc4:	mov	r0, r4
   15dc8:	sub	sp, fp, #16
   15dcc:	pop	{r4, r5, r6, sl, fp, lr}
   15dd0:	b	11d54 <fclose@plt>
   15dd4:	push	{r4, sl, fp, lr}
   15dd8:	add	fp, sp, #8
   15ddc:	sub	sp, sp, #8
   15de0:	mov	r4, r0
   15de4:	cmp	r0, #0
   15de8:	beq	15e20 <__assert_fail@plt+0x3f58>
   15dec:	mov	r0, r4
   15df0:	bl	11c34 <__freading@plt>
   15df4:	cmp	r0, #0
   15df8:	beq	15e20 <__assert_fail@plt+0x3f58>
   15dfc:	ldrb	r0, [r4, #1]
   15e00:	tst	r0, #1
   15e04:	beq	15e20 <__assert_fail@plt+0x3f58>
   15e08:	mov	r0, #1
   15e0c:	mov	r2, #0
   15e10:	mov	r3, #0
   15e14:	str	r0, [sp]
   15e18:	mov	r0, r4
   15e1c:	bl	17930 <__assert_fail@plt+0x5a68>
   15e20:	mov	r0, r4
   15e24:	sub	sp, fp, #8
   15e28:	pop	{r4, sl, fp, lr}
   15e2c:	b	11a60 <fflush@plt>
   15e30:	push	{fp, lr}
   15e34:	mov	fp, sp
   15e38:	sub	sp, sp, #16
   15e3c:	str	r3, [sp, #8]
   15e40:	mvn	r3, #0
   15e44:	str	r3, [sp, #4]
   15e48:	mov	r3, #0
   15e4c:	str	r3, [sp]
   15e50:	ldr	r3, [fp, #8]
   15e54:	str	r3, [sp, #12]
   15e58:	mov	r3, #0
   15e5c:	bl	15e68 <__assert_fail@plt+0x3fa0>
   15e60:	mov	sp, fp
   15e64:	pop	{fp, pc}
   15e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e6c:	add	fp, sp, #28
   15e70:	sub	sp, sp, #124	; 0x7c
   15e74:	sub	sp, sp, #1024	; 0x400
   15e78:	str	r3, [sp, #80]	; 0x50
   15e7c:	mov	r4, r2
   15e80:	mov	sl, r1
   15e84:	mov	r7, r0
   15e88:	bl	11cdc <__errno_location@plt>
   15e8c:	mov	r2, r4
   15e90:	movw	r5, #27716	; 0x6c44
   15e94:	ldrb	r3, [sl]
   15e98:	str	r0, [sp, #60]	; 0x3c
   15e9c:	ldr	r1, [r2, #8]!
   15ea0:	movt	r5, #3
   15ea4:	cmp	r1, #0
   15ea8:	mov	r6, r1
   15eac:	movweq	r6, #12
   15eb0:	cmp	r1, #12
   15eb4:	subgt	r6, r1, #12
   15eb8:	ldr	r1, [r2, #32]
   15ebc:	cmp	r1, #0
   15ec0:	movne	r5, r1
   15ec4:	ldr	r1, [r0]
   15ec8:	cmp	r3, #0
   15ecc:	str	r1, [sp, #56]	; 0x38
   15ed0:	beq	17688 <__assert_fail@plt+0x57c0>
   15ed4:	sub	r0, fp, #46	; 0x2e
   15ed8:	mvn	r1, #13
   15edc:	str	r6, [sp, #36]	; 0x24
   15ee0:	ldr	r6, [fp, #12]
   15ee4:	str	r2, [sp, #40]	; 0x28
   15ee8:	mov	ip, #0
   15eec:	str	r5, [sp, #44]	; 0x2c
   15ef0:	str	r4, [sp, #72]	; 0x48
   15ef4:	str	r7, [sp, #88]	; 0x58
   15ef8:	sub	r1, r1, r0
   15efc:	str	r1, [sp, #28]
   15f00:	add	r1, r0, #13
   15f04:	add	r0, r0, #14
   15f08:	str	r1, [sp, #24]
   15f0c:	add	r1, sp, #96	; 0x60
   15f10:	str	r0, [sp, #64]	; 0x40
   15f14:	add	r1, r1, #1
   15f18:	str	r1, [sp, #48]	; 0x30
   15f1c:	sub	r1, fp, #51	; 0x33
   15f20:	add	r2, r1, #3
   15f24:	add	r1, r1, #2
   15f28:	str	r1, [sp, #68]	; 0x44
   15f2c:	add	r1, r4, #12
   15f30:	str	r2, [sp, #52]	; 0x34
   15f34:	str	r1, [sp, #32]
   15f38:	b	15f64 <__assert_fail@plt+0x409c>
   15f3c:	uxtb	r0, r3
   15f40:	mov	r1, r7
   15f44:	bl	11db4 <fputc@plt>
   15f48:	mov	ip, r9
   15f4c:	add	ip, r4, ip
   15f50:	mov	sl, r8
   15f54:	ldrb	r3, [sl, #1]!
   15f58:	mvn	r6, #0
   15f5c:	cmp	r3, #0
   15f60:	beq	1768c <__assert_fail@plt+0x57c4>
   15f64:	uxtb	r1, r3
   15f68:	mov	r8, sl
   15f6c:	cmp	r1, #37	; 0x25
   15f70:	bne	1600c <__assert_fail@plt+0x4144>
   15f74:	ldr	lr, [sp, #80]	; 0x50
   15f78:	mov	r4, #0
   15f7c:	mov	r9, #0
   15f80:	mov	sl, r8
   15f84:	add	r1, sl, #2
   15f88:	add	sl, sl, #1
   15f8c:	b	15fa4 <__assert_fail@plt+0x40dc>
   15f90:	cmp	r0, #95	; 0x5f
   15f94:	bne	15ffc <__assert_fail@plt+0x4134>
   15f98:	add	r1, r1, #1
   15f9c:	add	sl, sl, #1
   15fa0:	mov	r9, r0
   15fa4:	ldrb	r0, [sl]
   15fa8:	sub	r2, r0, #35	; 0x23
   15fac:	cmp	r2, #13
   15fb0:	bhi	15f90 <__assert_fail@plt+0x40c8>
   15fb4:	add	r3, pc, #0
   15fb8:	ldr	pc, [r3, r2, lsl #2]
   15fbc:	strdeq	r5, [r1], -r4
   15fc0:	andeq	r6, r1, r4, rrx
   15fc4:	andeq	r6, r1, r4, rrx
   15fc8:	andeq	r6, r1, r4, rrx
   15fcc:	andeq	r6, r1, r4, rrx
   15fd0:	andeq	r6, r1, r4, rrx
   15fd4:	andeq	r6, r1, r4, rrx
   15fd8:	andeq	r6, r1, r4, rrx
   15fdc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15fe0:	andeq	r6, r1, r4, rrx
   15fe4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15fe8:	andeq	r6, r1, r4, rrx
   15fec:	andeq	r6, r1, r4, rrx
   15ff0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ff4:	mov	r4, #1
   15ff8:	b	15f84 <__assert_fail@plt+0x40bc>
   15ffc:	cmp	r0, #94	; 0x5e
   16000:	bne	16064 <__assert_fail@plt+0x419c>
   16004:	mov	lr, #1
   16008:	b	15f84 <__assert_fail@plt+0x40bc>
   1600c:	bic	r1, r6, r6, asr #31
   16010:	mov	r4, #1
   16014:	mvn	r2, ip
   16018:	cmp	r1, #1
   1601c:	movhi	r4, r1
   16020:	cmp	r4, r2
   16024:	bcs	1769c <__assert_fail@plt+0x57d4>
   16028:	cmp	r7, #0
   1602c:	beq	15f4c <__assert_fail@plt+0x4084>
   16030:	mov	r9, ip
   16034:	cmp	r1, #2
   16038:	bcc	15f3c <__assert_fail@plt+0x4074>
   1603c:	sub	r5, r1, #1
   16040:	mov	r6, #0
   16044:	mov	r0, #32
   16048:	mov	r1, r7
   1604c:	bl	11db4 <fputc@plt>
   16050:	add	r6, r6, #1
   16054:	cmp	r6, r5
   16058:	bcc	16044 <__assert_fail@plt+0x417c>
   1605c:	ldrb	r3, [r8]
   16060:	b	15f3c <__assert_fail@plt+0x4074>
   16064:	sub	r2, r0, #48	; 0x30
   16068:	cmp	r2, #9
   1606c:	bhi	160e4 <__assert_fail@plt+0x421c>
   16070:	movw	r5, #52428	; 0xcccc
   16074:	mov	r6, #0
   16078:	mov	r7, #-2147483648	; 0x80000000
   1607c:	movt	r5, #3276	; 0xccc
   16080:	cmn	r6, #1
   16084:	bgt	160bc <__assert_fail@plt+0x41f4>
   16088:	b	160c8 <__assert_fail@plt+0x4200>
   1608c:	add	r2, r6, r6, lsl #2
   16090:	lsl	r3, r2, #1
   16094:	uxtab	r0, r3, r0
   16098:	sub	r6, r0, #48	; 0x30
   1609c:	cmp	r6, r2, lsl #1
   160a0:	mvnvs	r6, #-2147483648	; 0x80000000
   160a4:	ldrb	r0, [r1], #1
   160a8:	sub	r2, r0, #48	; 0x30
   160ac:	cmp	r2, #10
   160b0:	bcs	160e0 <__assert_fail@plt+0x4218>
   160b4:	cmn	r6, #1
   160b8:	ble	160c8 <__assert_fail@plt+0x4200>
   160bc:	cmp	r6, r5
   160c0:	ble	1608c <__assert_fail@plt+0x41c4>
   160c4:	b	160d8 <__assert_fail@plt+0x4210>
   160c8:	beq	1608c <__assert_fail@plt+0x41c4>
   160cc:	sdiv	r2, r7, r6
   160d0:	cmp	r2, #10
   160d4:	bge	1608c <__assert_fail@plt+0x41c4>
   160d8:	mvn	r6, #-2147483648	; 0x80000000
   160dc:	b	160a4 <__assert_fail@plt+0x41dc>
   160e0:	sub	sl, r1, #1
   160e4:	cmp	r0, #79	; 0x4f
   160e8:	cmpne	r0, #69	; 0x45
   160ec:	bne	160f8 <__assert_fail@plt+0x4230>
   160f0:	ldrb	r1, [sl, #1]!
   160f4:	b	16100 <__assert_fail@plt+0x4238>
   160f8:	mov	r1, r0
   160fc:	mov	r0, #0
   16100:	cmp	r1, #122	; 0x7a
   16104:	str	ip, [sp, #92]	; 0x5c
   16108:	bhi	16dc4 <__assert_fail@plt+0x4efc>
   1610c:	str	r4, [sp, #76]	; 0x4c
   16110:	movw	r5, #26215	; 0x6667
   16114:	movw	r3, #28526	; 0x6f6e
   16118:	add	r2, pc, #16
   1611c:	mov	r7, #0
   16120:	mvn	r4, #0
   16124:	movt	r5, #26214	; 0x6666
   16128:	movt	r3, #3
   1612c:	ldr	pc, [r2, r1, lsl #2]
   16130:	muleq	r1, r0, r4
   16134:	andeq	r6, r1, r0, asr #27
   16138:	andeq	r6, r1, r0, asr #27
   1613c:	andeq	r6, r1, r0, asr #27
   16140:	andeq	r6, r1, r0, asr #27
   16144:	andeq	r6, r1, r0, asr #27
   16148:	andeq	r6, r1, r0, asr #27
   1614c:	andeq	r6, r1, r0, asr #27
   16150:	andeq	r6, r1, r0, asr #27
   16154:	andeq	r6, r1, r0, asr #27
   16158:	andeq	r6, r1, r0, asr #27
   1615c:	andeq	r6, r1, r0, asr #27
   16160:	andeq	r6, r1, r0, asr #27
   16164:	andeq	r6, r1, r0, asr #27
   16168:	andeq	r6, r1, r0, asr #27
   1616c:	andeq	r6, r1, r0, asr #27
   16170:	andeq	r6, r1, r0, asr #27
   16174:	andeq	r6, r1, r0, asr #27
   16178:	andeq	r6, r1, r0, asr #27
   1617c:	andeq	r6, r1, r0, asr #27
   16180:	andeq	r6, r1, r0, asr #27
   16184:	andeq	r6, r1, r0, asr #27
   16188:	andeq	r6, r1, r0, asr #27
   1618c:	andeq	r6, r1, r0, asr #27
   16190:	andeq	r6, r1, r0, asr #27
   16194:	andeq	r6, r1, r0, asr #27
   16198:	andeq	r6, r1, r0, asr #27
   1619c:	andeq	r6, r1, r0, asr #27
   161a0:	andeq	r6, r1, r0, asr #27
   161a4:	andeq	r6, r1, r0, asr #27
   161a8:	andeq	r6, r1, r0, asr #27
   161ac:	andeq	r6, r1, r0, asr #27
   161b0:	andeq	r6, r1, r0, asr #27
   161b4:	andeq	r6, r1, r0, asr #27
   161b8:	andeq	r6, r1, r0, asr #27
   161bc:	andeq	r6, r1, r0, asr #27
   161c0:	andeq	r6, r1, r0, asr #27
   161c4:	andeq	r6, r1, r4, lsl #9
   161c8:	andeq	r6, r1, r0, asr #27
   161cc:	andeq	r6, r1, r0, asr #27
   161d0:	andeq	r6, r1, r0, asr #27
   161d4:	andeq	r6, r1, r0, asr #27
   161d8:	andeq	r6, r1, r0, asr #27
   161dc:	andeq	r6, r1, r0, asr #27
   161e0:	andeq	r6, r1, r0, asr #27
   161e4:	andeq	r6, r1, r0, asr #27
   161e8:	andeq	r6, r1, r0, asr #27
   161ec:	andeq	r6, r1, r0, asr #27
   161f0:	andeq	r6, r1, r0, asr #27
   161f4:	andeq	r6, r1, r0, asr #27
   161f8:	andeq	r6, r1, r0, asr #27
   161fc:	andeq	r6, r1, r0, asr #27
   16200:	andeq	r6, r1, r0, asr #27
   16204:	andeq	r6, r1, r0, asr #27
   16208:	andeq	r6, r1, r0, asr #27
   1620c:	andeq	r6, r1, r0, asr #27
   16210:	andeq	r6, r1, r0, asr #27
   16214:	andeq	r6, r1, r0, asr #27
   16218:	muleq	r1, r8, r4
   1621c:	andeq	r6, r1, r0, asr #27
   16220:	andeq	r6, r1, r0, asr #27
   16224:	andeq	r6, r1, r0, asr #27
   16228:	andeq	r6, r1, r0, asr #27
   1622c:	andeq	r6, r1, r0, asr #27
   16230:	andeq	r6, r1, r0, asr #27
   16234:			; <UNDEFINED> instruction: 0x000164b0
   16238:	andeq	r6, r1, ip, asr #9
   1623c:	andeq	r6, r1, r8, ror #9
   16240:	strdeq	r6, [r1], -ip
   16244:	andeq	r6, r1, r0, asr #27
   16248:	andeq	r6, r1, r0, lsl r5
   1624c:	andeq	r6, r1, ip, lsl r3
   16250:	andeq	r6, r1, ip, lsr r5
   16254:	andeq	r6, r1, r0, asr r5
   16258:	andeq	r6, r1, r0, asr #27
   1625c:	andeq	r6, r1, r0, asr #27
   16260:	andeq	r6, r1, r0, asr #27
   16264:	andeq	r6, r1, r4, ror #10
   16268:	andeq	r6, r1, r8, ror r5
   1626c:	andeq	r6, r1, r0, asr #27
   16270:	muleq	r1, r0, r6
   16274:	andeq	r6, r1, r0, asr #27
   16278:	andeq	r6, r1, r8, asr #13
   1627c:	andeq	r6, r1, ip, lsr #13
   16280:	andeq	r6, r1, r0, asr #13
   16284:	andeq	r6, r1, r4, ror r7
   16288:	andeq	r6, r1, ip, lsl r3
   1628c:	andeq	r6, r1, r0, lsr #15
   16290:	andeq	r6, r1, ip, ror #15
   16294:	andeq	r6, r1, r0, lsl #16
   16298:	andeq	r6, r1, r0, lsr r8
   1629c:	andeq	r6, r1, r0, asr #27
   162a0:	andeq	r6, r1, r0, asr #27
   162a4:	andeq	r6, r1, r0, asr #27
   162a8:	andeq	r6, r1, r0, asr #27
   162ac:	andeq	r6, r1, r0, asr #27
   162b0:	andeq	r6, r1, r0, asr #27
   162b4:			; <UNDEFINED> instruction: 0x000168b0
   162b8:	andeq	r6, r1, ip, ror #8
   162bc:	andeq	r6, r1, ip, asr #17
   162c0:	andeq	r6, r1, r0, ror #17
   162c4:	strdeq	r6, [r1], -r4
   162c8:	andeq	r6, r1, r0, asr #27
   162cc:	andeq	r6, r1, ip, lsl r3
   162d0:	andeq	r6, r1, ip, ror #8
   162d4:	andeq	r6, r1, r0, asr #27
   162d8:	andeq	r6, r1, r4, lsl #18
   162dc:	andeq	r6, r1, r0, lsr #18
   162e0:	andeq	r6, r1, r4, lsr r9
   162e4:	andeq	r6, r1, ip, lsl #22
   162e8:	andeq	r6, r1, r4, lsr fp
   162ec:	andeq	r6, r1, r0, asr #27
   162f0:	muleq	r1, r4, r6
   162f4:	andeq	r6, r1, r4, lsr #23
   162f8:	andeq	r7, r1, ip, lsr #3
   162fc:	andeq	r6, r1, r4, asr #23
   16300:	andeq	r6, r1, r0, lsl #25
   16304:	strdeq	r6, [r1], -r0
   16308:	andeq	r6, r1, r0, asr #27
   1630c:	andeq	r6, r1, r4, lsr #26
   16310:	andeq	r6, r1, ip, lsr sp
   16314:	andeq	r6, r1, r0, asr sp
   16318:	andeq	r6, r1, r0, ror sp
   1631c:	cmp	r0, #69	; 0x45
   16320:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16324:	ldr	r2, [sp, #72]	; 0x48
   16328:	movw	ip, #9363	; 0x2493
   1632c:	str	lr, [sp, #84]	; 0x54
   16330:	movw	r7, #382	; 0x17e
   16334:	movt	ip, #37449	; 0x9249
   16338:	ldr	r8, [r2, #24]
   1633c:	ldr	r5, [r2, #28]
   16340:	ldr	lr, [r2, #20]
   16344:	sub	r2, r5, r8
   16348:	cmp	lr, #0
   1634c:	add	r2, r2, r7
   16350:	smmla	r4, r2, ip, r2
   16354:	asr	r7, r4, #2
   16358:	add	r4, r7, r4, lsr #31
   1635c:	rsb	r4, r4, r4, lsl #3
   16360:	sub	r2, r4, r2
   16364:	add	r2, r5, r2
   16368:	add	r4, r2, #3
   1636c:	mvn	r2, #99	; 0x63
   16370:	movwmi	r2, #300	; 0x12c
   16374:	add	r2, r2, lr
   16378:	cmn	r4, #1
   1637c:	ble	16ec4 <__assert_fail@plt+0x4ffc>
   16380:	movw	r7, #365	; 0x16d
   16384:	tst	r2, #3
   16388:	bne	163d4 <__assert_fail@plt+0x450c>
   1638c:	movw	r7, #34079	; 0x851f
   16390:	mov	ip, #100	; 0x64
   16394:	movt	r7, #20971	; 0x51eb
   16398:	smmul	r7, r2, r7
   1639c:	asr	r3, r7, #5
   163a0:	add	r3, r3, r7, lsr #31
   163a4:	mls	ip, r3, ip, r2
   163a8:	asr	r3, r7, #7
   163ac:	add	r3, r3, r7, lsr #31
   163b0:	mov	r7, #400	; 0x190
   163b4:	mls	r2, r3, r7, r2
   163b8:	movw	r7, #365	; 0x16d
   163bc:	cmp	r2, #0
   163c0:	movweq	r7, #366	; 0x16e
   163c4:	cmp	ip, #0
   163c8:	movw	ip, #9363	; 0x2493
   163cc:	movt	ip, #37449	; 0x9249
   163d0:	movwne	r7, #366	; 0x16e
   163d4:	add	r2, r8, r7
   163d8:	movw	r3, #382	; 0x17e
   163dc:	sub	r2, r5, r2
   163e0:	add	r2, r2, r3
   163e4:	smmla	r2, r2, ip, r2
   163e8:	asr	r3, r2, #2
   163ec:	add	r2, r3, r2, lsr #31
   163f0:	movw	r3, #379	; 0x17b
   163f4:	rsb	r2, r2, r2, lsl #3
   163f8:	add	r2, r8, r2
   163fc:	sub	r2, r2, r3
   16400:	cmn	r2, #1
   16404:	movgt	r4, r2
   16408:	mvn	r2, r2
   1640c:	lsr	r3, r2, #31
   16410:	cmp	r1, #71	; 0x47
   16414:	beq	16f48 <__assert_fail@plt+0x5080>
   16418:	cmp	r1, #103	; 0x67
   1641c:	bne	17004 <__assert_fail@plt+0x513c>
   16420:	movw	r2, #34079	; 0x851f
   16424:	mov	ip, #0
   16428:	movt	r2, #20971	; 0x51eb
   1642c:	smmul	r7, lr, r2
   16430:	asr	r5, r7, #5
   16434:	add	r7, r5, r7, lsr #31
   16438:	mov	r5, #100	; 0x64
   1643c:	mls	r7, r7, r5, lr
   16440:	add	r7, r3, r7
   16444:	smmul	r2, r7, r2
   16448:	asr	r4, r2, #5
   1644c:	add	r2, r4, r2, lsr #31
   16450:	mov	r4, #2
   16454:	mls	r2, r2, r5, r7
   16458:	cmn	r2, #1
   1645c:	ble	1739c <__assert_fail@plt+0x54d4>
   16460:	ldr	lr, [sp, #84]	; 0x54
   16464:	mov	r3, r2
   16468:	b	173e8 <__assert_fail@plt+0x5520>
   1646c:	ldr	r2, [sp, #76]	; 0x4c
   16470:	mov	r7, #0
   16474:	cmp	r0, #69	; 0x45
   16478:	orr	lr, r2, lr
   1647c:	bne	171ac <__assert_fail@plt+0x52e4>
   16480:	b	16dc0 <__assert_fail@plt+0x4ef8>
   16484:	sub	r0, sl, #1
   16488:	cmp	r0, r8
   1648c:	beq	170b0 <__assert_fail@plt+0x51e8>
   16490:	sub	sl, sl, #1
   16494:	b	16dc0 <__assert_fail@plt+0x4ef8>
   16498:	mov	r7, #1
   1649c:	ldrb	r2, [sl, r7]
   164a0:	cmp	r2, #58	; 0x3a
   164a4:	bne	16d64 <__assert_fail@plt+0x4e9c>
   164a8:	add	r7, r7, #1
   164ac:	b	1649c <__assert_fail@plt+0x45d4>
   164b0:	cmp	r0, #0
   164b4:	bne	16dc0 <__assert_fail@plt+0x4ef8>
   164b8:	ldr	r1, [sp, #76]	; 0x4c
   164bc:	mov	r7, #0
   164c0:	orr	lr, r1, lr
   164c4:	mov	r1, #65	; 0x41
   164c8:	b	171ac <__assert_fail@plt+0x52e4>
   164cc:	cmp	r0, #69	; 0x45
   164d0:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   164d4:	ldr	r1, [sp, #76]	; 0x4c
   164d8:	mov	r7, #0
   164dc:	orr	lr, r1, lr
   164e0:	mov	r1, #66	; 0x42
   164e4:	b	171ac <__assert_fail@plt+0x52e4>
   164e8:	cmp	r0, #69	; 0x45
   164ec:	bne	17020 <__assert_fail@plt+0x5158>
   164f0:	mov	r7, #0
   164f4:	mov	r1, #67	; 0x43
   164f8:	b	171ac <__assert_fail@plt+0x52e4>
   164fc:	cmp	r0, #0
   16500:	bne	16dc0 <__assert_fail@plt+0x4ef8>
   16504:	movw	r3, #30971	; 0x78fb
   16508:	movt	r3, #3
   1650c:	b	166c8 <__assert_fail@plt+0x4800>
   16510:	cmp	r0, #0
   16514:	bne	16dc0 <__assert_fail@plt+0x4ef8>
   16518:	movw	r3, #28532	; 0x6f74
   1651c:	cmp	r9, #0
   16520:	movt	r3, #3
   16524:	bne	173c0 <__assert_fail@plt+0x54f8>
   16528:	cmp	r6, #0
   1652c:	bpl	173c0 <__assert_fail@plt+0x54f8>
   16530:	mov	r9, #43	; 0x2b
   16534:	mov	r4, #4
   16538:	b	166c8 <__assert_fail@plt+0x4800>
   1653c:	cmp	r0, #69	; 0x45
   16540:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16544:	ldr	r2, [sp, #40]	; 0x28
   16548:	ldr	r3, [r2]
   1654c:	b	16948 <__assert_fail@plt+0x4a80>
   16550:	mov	r4, #2
   16554:	cmp	r0, #69	; 0x45
   16558:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   1655c:	ldr	r3, [sp, #36]	; 0x24
   16560:	b	1694c <__assert_fail@plt+0x4a84>
   16564:	cmp	r0, #69	; 0x45
   16568:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   1656c:	ldr	r2, [sp, #72]	; 0x48
   16570:	ldr	r3, [r2, #4]
   16574:	b	16948 <__assert_fail@plt+0x4a80>
   16578:	cmp	r0, #69	; 0x45
   1657c:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16580:	ldr	r2, [fp, #20]
   16584:	cmp	r6, #1
   16588:	mov	r7, #0
   1658c:	mov	r0, #8
   16590:	movwlt	r6, #9
   16594:	b	165ac <__assert_fail@plt+0x46e4>
   16598:	smmul	r1, r2, r5
   1659c:	sub	r0, r0, #1
   165a0:	sub	r7, r7, #1
   165a4:	asr	r2, r1, #2
   165a8:	add	r2, r2, r1, lsr #31
   165ac:	add	r1, r7, #9
   165b0:	cmp	r6, r1
   165b4:	blt	16598 <__assert_fail@plt+0x46d0>
   165b8:	cmp	r1, #2
   165bc:	blt	165dc <__assert_fail@plt+0x4714>
   165c0:	smmul	r3, r2, r5
   165c4:	asr	r4, r3, #2
   165c8:	add	r3, r4, r3, lsr #31
   165cc:	add	r3, r3, r3, lsl #2
   165d0:	sub	r3, r2, r3, lsl #1
   165d4:	cmp	r3, #0
   165d8:	beq	16598 <__assert_fail@plt+0x46d0>
   165dc:	cmp	r1, #1
   165e0:	sub	ip, fp, #46	; 0x2e
   165e4:	blt	16618 <__assert_fail@plt+0x4750>
   165e8:	smmul	r3, r2, r5
   165ec:	cmp	r0, #0
   165f0:	asr	r4, r3, #2
   165f4:	add	r3, r4, r3, lsr #31
   165f8:	add	r4, r3, r3, lsl #2
   165fc:	sub	r2, r2, r4, lsl #1
   16600:	add	r2, r2, #48	; 0x30
   16604:	strb	r2, [ip, r0]
   16608:	sub	r2, r0, #1
   1660c:	mov	r0, r2
   16610:	mov	r2, r3
   16614:	bgt	165e8 <__assert_fail@plt+0x4720>
   16618:	ldr	r0, [sp, #92]	; 0x5c
   1661c:	cmp	r9, #0
   16620:	movweq	r9, #48	; 0x30
   16624:	mvn	r0, r0
   16628:	cmp	r1, r0
   1662c:	bcs	1769c <__assert_fail@plt+0x57d4>
   16630:	ldr	r0, [sp, #88]	; 0x58
   16634:	cmp	r0, #0
   16638:	beq	17474 <__assert_fail@plt+0x55ac>
   1663c:	tst	lr, #1
   16640:	beq	17464 <__assert_fail@plt+0x559c>
   16644:	ldr	r8, [sp, #88]	; 0x58
   16648:	cmn	r7, #9
   1664c:	beq	17474 <__assert_fail@plt+0x55ac>
   16650:	mov	r4, #0
   16654:	bl	11c4c <__ctype_toupper_loc@plt>
   16658:	sub	r2, fp, #46	; 0x2e
   1665c:	mov	r1, r8
   16660:	mov	r5, r0
   16664:	ldrb	r0, [r2, -r4]
   16668:	ldr	r2, [r5]
   1666c:	ldr	r0, [r2, r0, lsl #2]
   16670:	bl	11db4 <fputc@plt>
   16674:	sub	r4, r4, #1
   16678:	sub	r2, fp, #46	; 0x2e
   1667c:	mov	r1, r8
   16680:	add	r0, r7, r4
   16684:	cmn	r0, #9
   16688:	bne	16664 <__assert_fail@plt+0x479c>
   1668c:	b	17474 <__assert_fail@plt+0x55ac>
   16690:	mov	r7, #1
   16694:	ldr	r1, [sp, #76]	; 0x4c
   16698:	orr	r7, r1, r7
   1669c:	eor	r1, r1, #1
   166a0:	and	lr, lr, r1
   166a4:	mov	r1, #112	; 0x70
   166a8:	b	171ac <__assert_fail@plt+0x52e4>
   166ac:	cmp	r0, #69	; 0x45
   166b0:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   166b4:	ldr	r2, [sp, #72]	; 0x48
   166b8:	ldr	r3, [r2]
   166bc:	b	16948 <__assert_fail@plt+0x4a80>
   166c0:	movw	r3, #30980	; 0x7904
   166c4:	movt	r3, #3
   166c8:	ldr	r0, [fp, #16]
   166cc:	ldr	r2, [sp, #72]	; 0x48
   166d0:	and	r8, lr, #1
   166d4:	str	r3, [sp, #84]	; 0x54
   166d8:	mov	r1, r3
   166dc:	str	r9, [sp]
   166e0:	str	r4, [sp, #4]
   166e4:	mov	r3, r8
   166e8:	str	r0, [sp, #8]
   166ec:	ldr	r0, [fp, #20]
   166f0:	str	r0, [sp, #12]
   166f4:	mov	r0, #0
   166f8:	bl	15e68 <__assert_fail@plt+0x3fa0>
   166fc:	subs	r1, r9, #45	; 0x2d
   16700:	ldr	r2, [sp, #92]	; 0x5c
   16704:	mov	r5, r0
   16708:	movne	r1, r6
   1670c:	cmp	r6, #0
   16710:	movwmi	r1, #0
   16714:	cmp	r1, r0
   16718:	movhi	r5, r1
   1671c:	mvn	r2, r2
   16720:	cmp	r5, r2
   16724:	bcs	1769c <__assert_fail@plt+0x57d4>
   16728:	ldr	r2, [sp, #88]	; 0x58
   1672c:	cmp	r2, #0
   16730:	beq	1738c <__assert_fail@plt+0x54c4>
   16734:	ldr	r7, [sp, #88]	; 0x58
   16738:	cmp	r1, r0
   1673c:	bls	17360 <__assert_fail@plt+0x5498>
   16740:	cmp	r9, #43	; 0x2b
   16744:	sub	r6, r1, r0
   16748:	cmpne	r9, #48	; 0x30
   1674c:	bne	17340 <__assert_fail@plt+0x5478>
   16750:	ldr	r7, [sp, #88]	; 0x58
   16754:	cmp	r6, #0
   16758:	beq	17360 <__assert_fail@plt+0x5498>
   1675c:	mov	r0, #48	; 0x30
   16760:	mov	r1, r7
   16764:	bl	11db4 <fputc@plt>
   16768:	subs	r6, r6, #1
   1676c:	bne	1675c <__assert_fail@plt+0x4894>
   16770:	b	17360 <__assert_fail@plt+0x5498>
   16774:	cmp	r0, #69	; 0x45
   16778:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   1677c:	ldr	r3, [sp, #72]	; 0x48
   16780:	ldr	r2, [r3, #24]
   16784:	ldr	r3, [r3, #28]
   16788:	sub	r2, r3, r2
   1678c:	movw	r3, #9363	; 0x2493
   16790:	movt	r3, #37449	; 0x9249
   16794:	add	r2, r2, #7
   16798:	smmla	r2, r2, r3, r2
   1679c:	b	167e0 <__assert_fail@plt+0x4918>
   167a0:	cmp	r0, #69	; 0x45
   167a4:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   167a8:	ldr	r3, [sp, #72]	; 0x48
   167ac:	movw	r7, #9363	; 0x2493
   167b0:	movt	r7, #37449	; 0x9249
   167b4:	ldr	r2, [r3, #24]
   167b8:	ldr	r3, [r3, #28]
   167bc:	add	r2, r2, #6
   167c0:	smmla	r5, r2, r7, r2
   167c4:	asr	r4, r5, #2
   167c8:	add	r5, r4, r5, lsr #31
   167cc:	rsb	r5, r5, r5, lsl #3
   167d0:	sub	r2, r5, r2
   167d4:	add	r2, r3, r2
   167d8:	add	r2, r2, #7
   167dc:	smmla	r2, r2, r7, r2
   167e0:	asr	r3, r2, #2
   167e4:	add	r3, r3, r2, lsr #31
   167e8:	b	16948 <__assert_fail@plt+0x4a80>
   167ec:	cmp	r0, #79	; 0x4f
   167f0:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   167f4:	mov	r7, #0
   167f8:	mov	r1, #88	; 0x58
   167fc:	b	171ac <__assert_fail@plt+0x52e4>
   16800:	cmp	r0, #69	; 0x45
   16804:	beq	171a4 <__assert_fail@plt+0x52dc>
   16808:	cmp	r0, #79	; 0x4f
   1680c:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16810:	ldr	r2, [sp, #72]	; 0x48
   16814:	movw	r3, #63636	; 0xf894
   16818:	mov	ip, #0
   1681c:	mov	r4, #4
   16820:	movt	r3, #65535	; 0xffff
   16824:	ldr	r2, [r2, #20]
   16828:	cmp	r2, r3
   1682c:	b	16f68 <__assert_fail@plt+0x50a0>
   16830:	ldr	r0, [sp, #44]	; 0x2c
   16834:	subs	r4, r9, #45	; 0x2d
   16838:	str	lr, [sp, #84]	; 0x54
   1683c:	bicne	r4, r6, r6, asr #31
   16840:	bl	11cac <strlen@plt>
   16844:	mov	r5, r0
   16848:	cmp	r4, r0
   1684c:	mov	r8, r0
   16850:	ldr	r0, [sp, #92]	; 0x5c
   16854:	movhi	r8, r4
   16858:	mvn	r0, r0
   1685c:	cmp	r8, r0
   16860:	bcs	1769c <__assert_fail@plt+0x57d4>
   16864:	ldr	r7, [sp, #88]	; 0x58
   16868:	cmp	r7, #0
   1686c:	beq	175dc <__assert_fail@plt+0x5714>
   16870:	cmp	r4, r5
   16874:	bls	17534 <__assert_fail@plt+0x566c>
   16878:	uxtb	r0, r9
   1687c:	sub	r4, r4, r5
   16880:	cmp	r0, #43	; 0x2b
   16884:	cmpne	r0, #48	; 0x30
   16888:	bne	17514 <__assert_fail@plt+0x564c>
   1688c:	ldr	r6, [sp, #88]	; 0x58
   16890:	cmp	r4, #0
   16894:	beq	17534 <__assert_fail@plt+0x566c>
   16898:	mov	r0, #48	; 0x30
   1689c:	mov	r1, r6
   168a0:	bl	11db4 <fputc@plt>
   168a4:	subs	r4, r4, #1
   168a8:	bne	16898 <__assert_fail@plt+0x49d0>
   168ac:	b	17534 <__assert_fail@plt+0x566c>
   168b0:	cmp	r0, #0
   168b4:	bne	16dc0 <__assert_fail@plt+0x4ef8>
   168b8:	ldr	r1, [sp, #76]	; 0x4c
   168bc:	mov	r7, #0
   168c0:	orr	lr, r1, lr
   168c4:	mov	r1, #97	; 0x61
   168c8:	b	171ac <__assert_fail@plt+0x52e4>
   168cc:	cmp	r0, #79	; 0x4f
   168d0:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   168d4:	mov	r7, #0
   168d8:	mov	r1, #99	; 0x63
   168dc:	b	171ac <__assert_fail@plt+0x52e4>
   168e0:	cmp	r0, #69	; 0x45
   168e4:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   168e8:	ldr	r2, [sp, #32]
   168ec:	ldr	r3, [r2]
   168f0:	b	16948 <__assert_fail@plt+0x4a80>
   168f4:	ldr	r2, [sp, #32]
   168f8:	cmp	r0, #69	; 0x45
   168fc:	bne	1692c <__assert_fail@plt+0x4a64>
   16900:	b	16dc0 <__assert_fail@plt+0x4ef8>
   16904:	cmp	r0, #69	; 0x45
   16908:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   1690c:	ldr	r2, [sp, #72]	; 0x48
   16910:	mov	ip, #0
   16914:	mov	r4, #3
   16918:	ldr	r2, [r2, #28]
   1691c:	b	16b24 <__assert_fail@plt+0x4c5c>
   16920:	ldr	r2, [sp, #40]	; 0x28
   16924:	cmp	r0, #69	; 0x45
   16928:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   1692c:	ldr	r3, [r2]
   16930:	b	16940 <__assert_fail@plt+0x4a78>
   16934:	ldr	r3, [sp, #36]	; 0x24
   16938:	cmp	r0, #69	; 0x45
   1693c:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16940:	cmp	r9, #0
   16944:	movweq	r9, #95	; 0x5f
   16948:	mov	r4, #2
   1694c:	lsr	ip, r3, #31
   16950:	cmp	ip, #0
   16954:	mov	r2, #0
   16958:	mov	r8, #0
   1695c:	movwne	ip, #1
   16960:	cmp	r0, #79	; 0x4f
   16964:	moveq	r7, #0
   16968:	cmpeq	ip, #0
   1696c:	beq	171ac <__assert_fail@plt+0x52e4>
   16970:	ldr	r5, [sp, #64]	; 0x40
   16974:	ldr	r7, [sp, #92]	; 0x5c
   16978:	cmp	ip, #0
   1697c:	rsbne	r3, r3, #0
   16980:	tst	r2, #1
   16984:	asr	r2, r2, #1
   16988:	movne	r0, #58	; 0x3a
   1698c:	strbne	r0, [r5, #-1]!
   16990:	movw	r0, #52429	; 0xcccd
   16994:	cmp	r3, #9
   16998:	movt	r0, #52428	; 0xcccc
   1699c:	umull	r0, r1, r3, r0
   169a0:	lsr	r0, r1, #3
   169a4:	add	r1, r0, r0, lsl #2
   169a8:	sub	r1, r3, r1, lsl #1
   169ac:	mov	r3, r0
   169b0:	orr	r1, r1, #48	; 0x30
   169b4:	strb	r1, [r5, #-1]!
   169b8:	bhi	16980 <__assert_fail@plt+0x4ab8>
   169bc:	cmp	r2, #0
   169c0:	mov	r3, r0
   169c4:	bne	16980 <__assert_fail@plt+0x4ab8>
   169c8:	cmp	r6, #0
   169cc:	movpl	r4, r6
   169d0:	cmp	r8, #0
   169d4:	movwne	r8, #43	; 0x2b
   169d8:	cmp	r9, #0
   169dc:	movweq	r9, #48	; 0x30
   169e0:	ldr	r1, [sp, #64]	; 0x40
   169e4:	cmp	ip, #0
   169e8:	mov	r0, r4
   169ec:	str	r4, [sp, #76]	; 0x4c
   169f0:	str	lr, [sp, #84]	; 0x54
   169f4:	movwne	r8, #45	; 0x2d
   169f8:	cmp	r8, #0
   169fc:	subne	r0, r0, #1
   16a00:	sub	r6, r1, r5
   16a04:	sub	r0, r0, r6
   16a08:	cmp	r0, #1
   16a0c:	movwlt	r0, #0
   16a10:	subs	r4, r9, #45	; 0x2d
   16a14:	movne	r4, r0
   16a18:	cmp	r8, #0
   16a1c:	beq	16a98 <__assert_fail@plt+0x4bd0>
   16a20:	cmp	r9, #95	; 0x5f
   16a24:	bne	16a6c <__assert_fail@plt+0x4ba4>
   16a28:	str	r6, [sp, #20]
   16a2c:	ldr	r6, [sp, #88]	; 0x58
   16a30:	cmp	r6, #0
   16a34:	cmpne	r4, #0
   16a38:	beq	16a54 <__assert_fail@plt+0x4b8c>
   16a3c:	mov	r7, r4
   16a40:	mov	r0, #32
   16a44:	mov	r1, r6
   16a48:	bl	11db4 <fputc@plt>
   16a4c:	subs	r7, r7, #1
   16a50:	bne	16a40 <__assert_fail@plt+0x4b78>
   16a54:	ldr	r0, [sp, #76]	; 0x4c
   16a58:	ldr	r7, [sp, #92]	; 0x5c
   16a5c:	ldr	r6, [sp, #20]
   16a60:	sub	r0, r0, r4
   16a64:	add	r7, r4, r7
   16a68:	str	r0, [sp, #76]	; 0x4c
   16a6c:	cmn	r7, #3
   16a70:	bhi	1769c <__assert_fail@plt+0x57d4>
   16a74:	ldr	r1, [sp, #88]	; 0x58
   16a78:	cmp	r1, #0
   16a7c:	beq	16a88 <__assert_fail@plt+0x4bc0>
   16a80:	mov	r0, r8
   16a84:	bl	11db4 <fputc@plt>
   16a88:	ldr	r1, [sp, #76]	; 0x4c
   16a8c:	add	r7, r7, #1
   16a90:	sub	r1, r1, #1
   16a94:	b	16a9c <__assert_fail@plt+0x4bd4>
   16a98:	ldr	r1, [sp, #76]	; 0x4c
   16a9c:	subs	r0, r9, #45	; 0x2d
   16aa0:	mov	r4, r6
   16aa4:	bicne	r0, r1, r1, asr #31
   16aa8:	mvn	r1, r7
   16aac:	cmp	r0, r6
   16ab0:	movhi	r4, r0
   16ab4:	cmp	r4, r1
   16ab8:	bcs	1769c <__assert_fail@plt+0x57d4>
   16abc:	ldr	r8, [sp, #88]	; 0x58
   16ac0:	str	r7, [sp, #92]	; 0x5c
   16ac4:	cmp	r8, #0
   16ac8:	beq	16ff8 <__assert_fail@plt+0x5130>
   16acc:	mov	r8, r6
   16ad0:	cmp	r0, r6
   16ad4:	bls	16f98 <__assert_fail@plt+0x50d0>
   16ad8:	cmp	r9, #43	; 0x2b
   16adc:	sub	r7, r0, r8
   16ae0:	cmpne	r9, #48	; 0x30
   16ae4:	bne	16f78 <__assert_fail@plt+0x50b0>
   16ae8:	ldr	r6, [sp, #88]	; 0x58
   16aec:	cmp	r7, #0
   16af0:	beq	16f98 <__assert_fail@plt+0x50d0>
   16af4:	mov	r0, #48	; 0x30
   16af8:	mov	r1, r6
   16afc:	bl	11db4 <fputc@plt>
   16b00:	subs	r7, r7, #1
   16b04:	bne	16af4 <__assert_fail@plt+0x4c2c>
   16b08:	b	16f98 <__assert_fail@plt+0x50d0>
   16b0c:	cmp	r0, #69	; 0x45
   16b10:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16b14:	ldr	r2, [sp, #72]	; 0x48
   16b18:	mov	ip, #0
   16b1c:	mov	r4, #2
   16b20:	ldr	r2, [r2, #16]
   16b24:	cmn	r2, #1
   16b28:	add	r3, r2, #1
   16b2c:	movwlt	ip, #1
   16b30:	b	16950 <__assert_fail@plt+0x4a88>
   16b34:	subs	r0, r9, #45	; 0x2d
   16b38:	ldr	ip, [sp, #92]	; 0x5c
   16b3c:	bicne	r0, r6, r6, asr #31
   16b40:	cmp	r0, #1
   16b44:	mov	r4, r0
   16b48:	movls	r4, #1
   16b4c:	mvn	r1, ip
   16b50:	cmp	r4, r1
   16b54:	bcs	1769c <__assert_fail@plt+0x57d4>
   16b58:	ldr	r1, [sp, #88]	; 0x58
   16b5c:	cmp	r1, #0
   16b60:	beq	17674 <__assert_fail@plt+0x57ac>
   16b64:	ldr	r6, [sp, #88]	; 0x58
   16b68:	mov	r7, ip
   16b6c:	cmp	r0, #2
   16b70:	bcc	17600 <__assert_fail@plt+0x5738>
   16b74:	uxtb	r1, r9
   16b78:	sub	r5, r0, #1
   16b7c:	cmp	r1, #43	; 0x2b
   16b80:	cmpne	r1, #48	; 0x30
   16b84:	bne	175e8 <__assert_fail@plt+0x5720>
   16b88:	ldr	r6, [sp, #88]	; 0x58
   16b8c:	mov	r0, #48	; 0x30
   16b90:	mov	r1, r6
   16b94:	bl	11db4 <fputc@plt>
   16b98:	subs	r5, r5, #1
   16b9c:	bne	16b8c <__assert_fail@plt+0x4cc4>
   16ba0:	b	17600 <__assert_fail@plt+0x5738>
   16ba4:	ldr	r2, [sp, #72]	; 0x48
   16ba8:	mov	r3, #11
   16bac:	mov	r4, #1
   16bb0:	mov	ip, #0
   16bb4:	ldr	r2, [r2, #16]
   16bb8:	mul	r2, r2, r3
   16bbc:	add	r3, r4, r2, asr #5
   16bc0:	b	16950 <__assert_fail@plt+0x4a88>
   16bc4:	ldr	r2, [sp, #72]	; 0x48
   16bc8:	mov	r0, #28
   16bcc:	add	r1, sp, #96	; 0x60
   16bd0:	str	lr, [sp, #84]	; 0x54
   16bd4:	mov	r4, r1
   16bd8:	mov	r3, r2
   16bdc:	add	r2, r2, #16
   16be0:	vld1.32	{d16-d17}, [r3], r0
   16be4:	vld1.32	{d18-d19}, [r2]
   16be8:	add	r2, r1, #16
   16bec:	vld1.32	{d20-d21}, [r3]
   16bf0:	vst1.64	{d16-d17}, [r4], r0
   16bf4:	mvn	r0, #0
   16bf8:	vst1.64	{d18-d19}, [r2]
   16bfc:	vst1.32	{d20-d21}, [r4]
   16c00:	str	r0, [r4]
   16c04:	ldr	r0, [fp, #16]
   16c08:	bl	312b8 <__assert_fail@plt+0x1f3f0>
   16c0c:	ldr	r1, [r4]
   16c10:	cmp	r1, #0
   16c14:	bmi	176b8 <__assert_fail@plt+0x57f0>
   16c18:	ldr	r1, [sp, #24]
   16c1c:	lsr	ip, r0, #31
   16c20:	mov	r2, r0
   16c24:	smmul	r3, r2, r5
   16c28:	cmp	r0, #0
   16c2c:	asr	r7, r3, #2
   16c30:	add	r3, r7, r3, lsr #31
   16c34:	add	r7, r3, r3, lsl #2
   16c38:	sub	r7, r2, r7, lsl #1
   16c3c:	add	r2, r2, #9
   16c40:	rsbmi	r7, r7, #0
   16c44:	cmp	r2, #18
   16c48:	mov	r2, r3
   16c4c:	add	r7, r7, #48	; 0x30
   16c50:	strb	r7, [r1], #-1
   16c54:	bhi	16c24 <__assert_fail@plt+0x4d5c>
   16c58:	ldr	r7, [sp, #92]	; 0x5c
   16c5c:	ldr	lr, [sp, #84]	; 0x54
   16c60:	cmp	r6, #0
   16c64:	add	r5, r1, #1
   16c68:	mov	r8, #0
   16c6c:	movwmi	r6, #1
   16c70:	cmp	r9, #0
   16c74:	movweq	r9, #48	; 0x30
   16c78:	mov	r4, r6
   16c7c:	b	169e0 <__assert_fail@plt+0x4b18>
   16c80:	subs	r0, r9, #45	; 0x2d
   16c84:	ldr	ip, [sp, #92]	; 0x5c
   16c88:	bicne	r0, r6, r6, asr #31
   16c8c:	cmp	r0, #1
   16c90:	mov	r4, r0
   16c94:	movls	r4, #1
   16c98:	mvn	r1, ip
   16c9c:	cmp	r4, r1
   16ca0:	bcs	1769c <__assert_fail@plt+0x57d4>
   16ca4:	ldr	r1, [sp, #88]	; 0x58
   16ca8:	cmp	r1, #0
   16cac:	beq	17674 <__assert_fail@plt+0x57ac>
   16cb0:	ldr	r6, [sp, #88]	; 0x58
   16cb4:	mov	r7, ip
   16cb8:	cmp	r0, #2
   16cbc:	bcc	17620 <__assert_fail@plt+0x5758>
   16cc0:	uxtb	r1, r9
   16cc4:	sub	r5, r0, #1
   16cc8:	cmp	r1, #43	; 0x2b
   16ccc:	cmpne	r1, #48	; 0x30
   16cd0:	bne	17608 <__assert_fail@plt+0x5740>
   16cd4:	ldr	r6, [sp, #88]	; 0x58
   16cd8:	mov	r0, #48	; 0x30
   16cdc:	mov	r1, r6
   16ce0:	bl	11db4 <fputc@plt>
   16ce4:	subs	r5, r5, #1
   16ce8:	bne	16cd8 <__assert_fail@plt+0x4e10>
   16cec:	b	17620 <__assert_fail@plt+0x5758>
   16cf0:	ldr	r2, [sp, #72]	; 0x48
   16cf4:	movw	r3, #9363	; 0x2493
   16cf8:	mov	r4, #1
   16cfc:	movt	r3, #37449	; 0x9249
   16d00:	ldr	r2, [r2, #24]
   16d04:	add	r2, r2, #6
   16d08:	smmla	r3, r2, r3, r2
   16d0c:	asr	r7, r3, #2
   16d10:	add	r3, r7, r3, lsr #31
   16d14:	rsb	r3, r3, r3, lsl #3
   16d18:	sub	r2, r2, r3
   16d1c:	add	r3, r2, #1
   16d20:	b	1694c <__assert_fail@plt+0x4a84>
   16d24:	cmp	r0, #69	; 0x45
   16d28:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16d2c:	ldr	r2, [sp, #72]	; 0x48
   16d30:	mov	r4, #1
   16d34:	ldr	r3, [r2, #24]
   16d38:	b	1694c <__assert_fail@plt+0x4a84>
   16d3c:	cmp	r0, #79	; 0x4f
   16d40:	beq	16dc0 <__assert_fail@plt+0x4ef8>
   16d44:	mov	r7, #0
   16d48:	mov	r1, #120	; 0x78
   16d4c:	b	171ac <__assert_fail@plt+0x52e4>
   16d50:	cmp	r0, #69	; 0x45
   16d54:	bne	17074 <__assert_fail@plt+0x51ac>
   16d58:	mov	r7, #0
   16d5c:	mov	r1, #121	; 0x79
   16d60:	b	171ac <__assert_fail@plt+0x52e4>
   16d64:	cmp	r2, #122	; 0x7a
   16d68:	bne	16dc0 <__assert_fail@plt+0x4ef8>
   16d6c:	add	sl, sl, r7
   16d70:	ldr	r3, [sp, #72]	; 0x48
   16d74:	ldr	r2, [r3, #32]
   16d78:	cmp	r2, #0
   16d7c:	bmi	17268 <__assert_fail@plt+0x53a0>
   16d80:	ldr	r2, [r3, #36]	; 0x24
   16d84:	str	lr, [sp, #84]	; 0x54
   16d88:	cmp	r2, #0
   16d8c:	bmi	17120 <__assert_fail@plt+0x5258>
   16d90:	mov	ip, #0
   16d94:	bne	17124 <__assert_fail@plt+0x525c>
   16d98:	ldr	r3, [sp, #44]	; 0x2c
   16d9c:	ldrb	r3, [r3]
   16da0:	sub	r3, r3, #45	; 0x2d
   16da4:	clz	r3, r3
   16da8:	lsr	ip, r3, #5
   16dac:	cmp	r7, #3
   16db0:	bls	1712c <__assert_fail@plt+0x5264>
   16db4:	ldr	ip, [sp, #92]	; 0x5c
   16db8:	ldr	lr, [sp, #84]	; 0x54
   16dbc:	b	16dc4 <__assert_fail@plt+0x4efc>
   16dc0:	ldr	ip, [sp, #92]	; 0x5c
   16dc4:	subs	r0, r9, #45	; 0x2d
   16dc8:	sub	r1, sl, r8
   16dcc:	bicne	r0, r6, r6, asr #31
   16dd0:	add	r5, r1, #1
   16dd4:	mvn	r1, ip
   16dd8:	mov	r4, r5
   16ddc:	cmp	r0, r5
   16de0:	movhi	r4, r0
   16de4:	cmp	r4, r1
   16de8:	bcs	1769c <__assert_fail@plt+0x57d4>
   16dec:	ldr	r7, [sp, #88]	; 0x58
   16df0:	cmp	r7, #0
   16df4:	beq	16ebc <__assert_fail@plt+0x4ff4>
   16df8:	cmp	r0, r5
   16dfc:	str	lr, [sp, #84]	; 0x54
   16e00:	bls	16e5c <__assert_fail@plt+0x4f94>
   16e04:	sub	r6, r0, r5
   16e08:	uxtb	r0, r9
   16e0c:	cmp	r0, #43	; 0x2b
   16e10:	cmpne	r0, #48	; 0x30
   16e14:	bne	16e3c <__assert_fail@plt+0x4f74>
   16e18:	ldr	r7, [sp, #88]	; 0x58
   16e1c:	cmp	r6, #0
   16e20:	beq	16e5c <__assert_fail@plt+0x4f94>
   16e24:	mov	r0, #48	; 0x30
   16e28:	mov	r1, r7
   16e2c:	bl	11db4 <fputc@plt>
   16e30:	subs	r6, r6, #1
   16e34:	bne	16e24 <__assert_fail@plt+0x4f5c>
   16e38:	b	16e5c <__assert_fail@plt+0x4f94>
   16e3c:	ldr	r7, [sp, #88]	; 0x58
   16e40:	cmp	r6, #0
   16e44:	beq	16e5c <__assert_fail@plt+0x4f94>
   16e48:	mov	r0, #32
   16e4c:	mov	r1, r7
   16e50:	bl	11db4 <fputc@plt>
   16e54:	subs	r6, r6, #1
   16e58:	bne	16e48 <__assert_fail@plt+0x4f80>
   16e5c:	ldr	r0, [sp, #84]	; 0x54
   16e60:	tst	r0, #1
   16e64:	beq	16ea4 <__assert_fail@plt+0x4fdc>
   16e68:	ldr	r7, [sp, #88]	; 0x58
   16e6c:	cmp	r5, #0
   16e70:	beq	16ebc <__assert_fail@plt+0x4ff4>
   16e74:	mvn	r0, sl
   16e78:	add	r6, r0, r8
   16e7c:	bl	11c4c <__ctype_toupper_loc@plt>
   16e80:	mov	r5, r0
   16e84:	ldrb	r0, [r8], #1
   16e88:	ldr	r1, [r5]
   16e8c:	ldr	r0, [r1, r0, lsl #2]
   16e90:	mov	r1, r7
   16e94:	bl	11db4 <fputc@plt>
   16e98:	adds	r6, r6, #1
   16e9c:	bcc	16e84 <__assert_fail@plt+0x4fbc>
   16ea0:	b	16ebc <__assert_fail@plt+0x4ff4>
   16ea4:	ldr	r7, [sp, #88]	; 0x58
   16ea8:	mov	r0, r8
   16eac:	mov	r1, r5
   16eb0:	mov	r2, #1
   16eb4:	mov	r3, r7
   16eb8:	bl	11b80 <fwrite@plt>
   16ebc:	ldr	ip, [sp, #92]	; 0x5c
   16ec0:	b	17678 <__assert_fail@plt+0x57b0>
   16ec4:	sub	r2, r2, #1
   16ec8:	movw	r4, #365	; 0x16d
   16ecc:	tst	r2, #3
   16ed0:	bne	16f14 <__assert_fail@plt+0x504c>
   16ed4:	movw	r4, #34079	; 0x851f
   16ed8:	movt	r4, #20971	; 0x51eb
   16edc:	smmul	r4, r2, r4
   16ee0:	asr	r7, r4, #5
   16ee4:	add	r3, r7, r4, lsr #31
   16ee8:	mov	r7, #100	; 0x64
   16eec:	mls	r3, r3, r7, r2
   16ef0:	asr	r7, r4, #7
   16ef4:	add	r4, r7, r4, lsr #31
   16ef8:	mov	r7, #400	; 0x190
   16efc:	mls	r2, r4, r7, r2
   16f00:	movw	r4, #365	; 0x16d
   16f04:	cmp	r2, #0
   16f08:	movweq	r4, #366	; 0x16e
   16f0c:	cmp	r3, #0
   16f10:	movwne	r4, #366	; 0x16e
   16f14:	add	r2, r4, r5
   16f18:	movw	r4, #382	; 0x17e
   16f1c:	sub	r3, r4, r8
   16f20:	add	r2, r3, r2
   16f24:	smmla	r2, r2, ip, r2
   16f28:	asr	r4, r2, #2
   16f2c:	add	r2, r4, r2, lsr #31
   16f30:	rsb	r2, r2, r2, lsl #3
   16f34:	sub	r2, r2, r3
   16f38:	mvn	r3, #0
   16f3c:	add	r4, r2, #3
   16f40:	cmp	r1, #71	; 0x47
   16f44:	bne	16418 <__assert_fail@plt+0x4550>
   16f48:	movw	r2, #63636	; 0xf894
   16f4c:	mov	ip, #0
   16f50:	mov	r4, #4
   16f54:	movt	r2, #65535	; 0xffff
   16f58:	sub	r2, r2, r3
   16f5c:	cmp	lr, r2
   16f60:	add	r2, lr, r3
   16f64:	ldr	lr, [sp, #84]	; 0x54
   16f68:	movw	r3, #1900	; 0x76c
   16f6c:	movwlt	ip, #1
   16f70:	add	r3, r2, r3
   16f74:	b	173e8 <__assert_fail@plt+0x5520>
   16f78:	ldr	r6, [sp, #88]	; 0x58
   16f7c:	cmp	r7, #0
   16f80:	beq	16f98 <__assert_fail@plt+0x50d0>
   16f84:	mov	r0, #32
   16f88:	mov	r1, r6
   16f8c:	bl	11db4 <fputc@plt>
   16f90:	subs	r7, r7, #1
   16f94:	bne	16f84 <__assert_fail@plt+0x50bc>
   16f98:	ldr	r0, [sp, #84]	; 0x54
   16f9c:	tst	r0, #1
   16fa0:	beq	16fe0 <__assert_fail@plt+0x5118>
   16fa4:	cmp	r8, #0
   16fa8:	ldr	r8, [sp, #88]	; 0x58
   16fac:	beq	16ff8 <__assert_fail@plt+0x5130>
   16fb0:	ldr	r0, [sp, #28]
   16fb4:	add	r7, r0, r5
   16fb8:	bl	11c4c <__ctype_toupper_loc@plt>
   16fbc:	mov	r6, r0
   16fc0:	ldrb	r0, [r5], #1
   16fc4:	ldr	r1, [r6]
   16fc8:	ldr	r0, [r1, r0, lsl #2]
   16fcc:	mov	r1, r8
   16fd0:	bl	11db4 <fputc@plt>
   16fd4:	adds	r7, r7, #1
   16fd8:	bcc	16fc0 <__assert_fail@plt+0x50f8>
   16fdc:	b	16ff8 <__assert_fail@plt+0x5130>
   16fe0:	mov	r1, r8
   16fe4:	ldr	r8, [sp, #88]	; 0x58
   16fe8:	mov	r0, r5
   16fec:	mov	r2, #1
   16ff0:	mov	r3, r8
   16ff4:	bl	11b80 <fwrite@plt>
   16ff8:	ldr	ip, [sp, #92]	; 0x5c
   16ffc:	mov	r7, r8
   17000:	b	17678 <__assert_fail@plt+0x57b0>
   17004:	smmla	r2, r4, ip, r4
   17008:	ldr	lr, [sp, #84]	; 0x54
   1700c:	mov	r4, #2
   17010:	asr	r3, r2, #2
   17014:	add	r2, r3, r2, lsr #31
   17018:	add	r3, r2, #1
   1701c:	b	1694c <__assert_fail@plt+0x4a84>
   17020:	ldr	r2, [sp, #72]	; 0x48
   17024:	movw	r7, #63636	; 0xf894
   17028:	mov	r3, #0
   1702c:	mvn	r5, #98	; 0x62
   17030:	mov	ip, #0
   17034:	mov	r4, #2
   17038:	movt	r7, #65535	; 0xffff
   1703c:	ldr	r2, [r2, #20]
   17040:	cmp	r2, r7
   17044:	movwge	r3, #1
   17048:	cmp	r2, r7
   1704c:	and	r3, r3, r2, lsr #31
   17050:	movwlt	ip, #1
   17054:	smlabb	r3, r3, r5, r2
   17058:	movw	r5, #34079	; 0x851f
   1705c:	movt	r5, #20971	; 0x51eb
   17060:	smmul	r3, r3, r5
   17064:	asr	r5, r3, #5
   17068:	add	r3, r5, r3, lsr #31
   1706c:	add	r3, r3, #19
   17070:	b	173e8 <__assert_fail@plt+0x5520>
   17074:	ldr	r2, [sp, #72]	; 0x48
   17078:	movw	r3, #34079	; 0x851f
   1707c:	mov	r4, #2
   17080:	mov	ip, #0
   17084:	movt	r3, #20971	; 0x51eb
   17088:	ldr	r2, [r2, #20]
   1708c:	smmul	r3, r2, r3
   17090:	asr	r7, r3, #5
   17094:	add	r3, r7, r3, lsr #31
   17098:	mov	r7, #100	; 0x64
   1709c:	mls	r7, r3, r7, r2
   170a0:	cmn	r7, #1
   170a4:	ble	173d4 <__assert_fail@plt+0x550c>
   170a8:	mov	r3, r7
   170ac:	b	173e8 <__assert_fail@plt+0x5520>
   170b0:	subs	r0, r9, #45	; 0x2d
   170b4:	ldr	ip, [sp, #92]	; 0x5c
   170b8:	bicne	r0, r6, r6, asr #31
   170bc:	cmp	r0, #1
   170c0:	mov	r4, r0
   170c4:	movls	r4, #1
   170c8:	mvn	r1, ip
   170cc:	cmp	r4, r1
   170d0:	bcs	1769c <__assert_fail@plt+0x57d4>
   170d4:	ldr	r1, [sp, #88]	; 0x58
   170d8:	cmp	r1, #0
   170dc:	beq	17674 <__assert_fail@plt+0x57ac>
   170e0:	ldr	r6, [sp, #88]	; 0x58
   170e4:	mov	r7, ip
   170e8:	cmp	r0, #2
   170ec:	bcc	17664 <__assert_fail@plt+0x579c>
   170f0:	uxtb	r1, r9
   170f4:	sub	r5, r0, #1
   170f8:	cmp	r1, #43	; 0x2b
   170fc:	cmpne	r1, #48	; 0x30
   17100:	bne	1764c <__assert_fail@plt+0x5784>
   17104:	ldr	r6, [sp, #88]	; 0x58
   17108:	mov	r0, #48	; 0x30
   1710c:	mov	r1, r6
   17110:	bl	11db4 <fputc@plt>
   17114:	subs	r5, r5, #1
   17118:	bne	17108 <__assert_fail@plt+0x5240>
   1711c:	b	17664 <__assert_fail@plt+0x579c>
   17120:	mov	ip, #1
   17124:	cmp	r7, #3
   17128:	bhi	16db4 <__assert_fail@plt+0x4eec>
   1712c:	movw	r3, #34953	; 0x8889
   17130:	movt	r3, #34952	; 0x8888
   17134:	smmla	r5, r2, r3, r2
   17138:	asr	r4, r5, #5
   1713c:	add	r4, r4, r5, lsr #31
   17140:	smmla	r3, r4, r3, r4
   17144:	asr	r5, r3, #5
   17148:	add	r3, r5, r3, lsr #31
   1714c:	rsb	r3, r3, r3, lsl #4
   17150:	sub	lr, r4, r3, lsl #2
   17154:	movw	r3, #46021	; 0xb3c5
   17158:	rsb	r4, r4, r4, lsl #4
   1715c:	movt	r3, #37282	; 0x91a2
   17160:	smmla	r3, r2, r3, r2
   17164:	sub	r2, r2, r4, lsl #2
   17168:	add	r4, pc, #8
   1716c:	asr	r5, r3, #11
   17170:	add	r3, r5, r3, lsr #31
   17174:	ldr	pc, [r4, r7, lsl #2]
   17178:	andeq	r7, r1, r8, lsl #3
   1717c:	andeq	r7, r1, r0, lsr r6
   17180:	andeq	r7, r1, r0, asr #8
   17184:	andeq	r7, r1, r8, lsr r4
   17188:	mov	r2, #100	; 0x64
   1718c:	mov	r4, #5
   17190:	mla	r3, r3, r2, lr
   17194:	ldr	lr, [sp, #84]	; 0x54
   17198:	mov	r8, #1
   1719c:	mov	r2, #0
   171a0:	b	16960 <__assert_fail@plt+0x4a98>
   171a4:	mov	r7, #0
   171a8:	mov	r1, #89	; 0x59
   171ac:	movw	r2, #9504	; 0x2520
   171b0:	cmp	r0, #0
   171b4:	ldr	r3, [sp, #72]	; 0x48
   171b8:	str	lr, [sp, #84]	; 0x54
   171bc:	strh	r2, [fp, #-51]	; 0xffffffcd
   171c0:	ldr	r2, [sp, #68]	; 0x44
   171c4:	ldrne	r2, [sp, #52]	; 0x34
   171c8:	strbne	r0, [fp, #-49]	; 0xffffffcf
   171cc:	mov	r0, #0
   171d0:	strb	r0, [r2, #1]
   171d4:	strb	r1, [r2]
   171d8:	add	r0, sp, #96	; 0x60
   171dc:	sub	r2, fp, #51	; 0x33
   171e0:	mov	r1, #1024	; 0x400
   171e4:	bl	11c28 <strftime@plt>
   171e8:	cmp	r0, #0
   171ec:	beq	17268 <__assert_fail@plt+0x53a0>
   171f0:	subs	r1, r9, #45	; 0x2d
   171f4:	sub	r5, r0, #1
   171f8:	ldr	r0, [sp, #92]	; 0x5c
   171fc:	movne	r1, r6
   17200:	cmp	r6, #0
   17204:	mov	r8, r5
   17208:	movwmi	r1, #0
   1720c:	cmp	r1, r5
   17210:	movhi	r8, r1
   17214:	mvn	r0, r0
   17218:	cmp	r8, r0
   1721c:	bcs	1769c <__assert_fail@plt+0x57d4>
   17220:	ldr	r4, [sp, #88]	; 0x58
   17224:	cmp	r4, #0
   17228:	beq	17330 <__assert_fail@plt+0x5468>
   1722c:	cmp	r1, r5
   17230:	bls	17294 <__assert_fail@plt+0x53cc>
   17234:	cmp	r9, #43	; 0x2b
   17238:	sub	r6, r1, r5
   1723c:	cmpne	r9, #48	; 0x30
   17240:	bne	17274 <__assert_fail@plt+0x53ac>
   17244:	ldr	r4, [sp, #88]	; 0x58
   17248:	cmp	r6, #0
   1724c:	beq	17294 <__assert_fail@plt+0x53cc>
   17250:	mov	r0, #48	; 0x30
   17254:	mov	r1, r4
   17258:	bl	11db4 <fputc@plt>
   1725c:	subs	r6, r6, #1
   17260:	bne	17250 <__assert_fail@plt+0x5388>
   17264:	b	17294 <__assert_fail@plt+0x53cc>
   17268:	ldr	ip, [sp, #92]	; 0x5c
   1726c:	ldr	r7, [sp, #88]	; 0x58
   17270:	b	15f54 <__assert_fail@plt+0x408c>
   17274:	ldr	r4, [sp, #88]	; 0x58
   17278:	cmp	r6, #0
   1727c:	beq	17294 <__assert_fail@plt+0x53cc>
   17280:	mov	r0, #32
   17284:	mov	r1, r4
   17288:	bl	11db4 <fputc@plt>
   1728c:	subs	r6, r6, #1
   17290:	bne	17280 <__assert_fail@plt+0x53b8>
   17294:	tst	r7, #1
   17298:	beq	172d4 <__assert_fail@plt+0x540c>
   1729c:	ldr	r4, [sp, #88]	; 0x58
   172a0:	cmp	r5, #0
   172a4:	beq	17330 <__assert_fail@plt+0x5468>
   172a8:	bl	11c40 <__ctype_tolower_loc@plt>
   172ac:	ldr	r7, [sp, #48]	; 0x30
   172b0:	mov	r6, r0
   172b4:	ldrb	r0, [r7], #1
   172b8:	ldr	r1, [r6]
   172bc:	ldr	r0, [r1, r0, lsl #2]
   172c0:	mov	r1, r4
   172c4:	bl	11db4 <fputc@plt>
   172c8:	subs	r5, r5, #1
   172cc:	bne	172b4 <__assert_fail@plt+0x53ec>
   172d0:	b	17330 <__assert_fail@plt+0x5468>
   172d4:	ldr	r0, [sp, #84]	; 0x54
   172d8:	tst	r0, #1
   172dc:	beq	17318 <__assert_fail@plt+0x5450>
   172e0:	ldr	r4, [sp, #88]	; 0x58
   172e4:	cmp	r5, #0
   172e8:	beq	17330 <__assert_fail@plt+0x5468>
   172ec:	bl	11c4c <__ctype_toupper_loc@plt>
   172f0:	ldr	r7, [sp, #48]	; 0x30
   172f4:	mov	r6, r0
   172f8:	ldrb	r0, [r7], #1
   172fc:	ldr	r1, [r6]
   17300:	ldr	r0, [r1, r0, lsl #2]
   17304:	mov	r1, r4
   17308:	bl	11db4 <fputc@plt>
   1730c:	subs	r5, r5, #1
   17310:	bne	172f8 <__assert_fail@plt+0x5430>
   17314:	b	17330 <__assert_fail@plt+0x5468>
   17318:	ldr	r4, [sp, #88]	; 0x58
   1731c:	ldr	r0, [sp, #48]	; 0x30
   17320:	mov	r1, r5
   17324:	mov	r2, #1
   17328:	mov	r3, r4
   1732c:	bl	11b80 <fwrite@plt>
   17330:	ldr	ip, [sp, #92]	; 0x5c
   17334:	mov	r7, r4
   17338:	add	ip, r8, ip
   1733c:	b	15f54 <__assert_fail@plt+0x408c>
   17340:	ldr	r7, [sp, #88]	; 0x58
   17344:	cmp	r6, #0
   17348:	beq	17360 <__assert_fail@plt+0x5498>
   1734c:	mov	r0, #32
   17350:	mov	r1, r7
   17354:	bl	11db4 <fputc@plt>
   17358:	subs	r6, r6, #1
   1735c:	bne	1734c <__assert_fail@plt+0x5484>
   17360:	ldr	r0, [fp, #16]
   17364:	ldr	r1, [sp, #84]	; 0x54
   17368:	ldr	r2, [sp, #72]	; 0x48
   1736c:	mov	r3, r8
   17370:	str	r9, [sp]
   17374:	str	r4, [sp, #4]
   17378:	str	r0, [sp, #8]
   1737c:	ldr	r0, [fp, #20]
   17380:	str	r0, [sp, #12]
   17384:	mov	r0, r7
   17388:	bl	15e68 <__assert_fail@plt+0x3fa0>
   1738c:	ldr	ip, [sp, #92]	; 0x5c
   17390:	ldr	r7, [sp, #88]	; 0x58
   17394:	add	ip, r5, ip
   17398:	b	15f54 <__assert_fail@plt+0x408c>
   1739c:	movw	r4, #63636	; 0xf894
   173a0:	movt	r4, #65535	; 0xffff
   173a4:	sub	r4, r4, r3
   173a8:	add	r3, r2, #100	; 0x64
   173ac:	cmp	lr, r4
   173b0:	ldr	lr, [sp, #84]	; 0x54
   173b4:	mov	r4, #2
   173b8:	rsblt	r3, r2, #0
   173bc:	b	173e8 <__assert_fail@plt+0x5520>
   173c0:	cmp	r6, #6
   173c4:	mov	r0, r6
   173c8:	movle	r0, #6
   173cc:	sub	r4, r0, #6
   173d0:	b	166c8 <__assert_fail@plt+0x4800>
   173d4:	movw	r5, #63636	; 0xf894
   173d8:	add	r3, r7, #100	; 0x64
   173dc:	movt	r5, #65535	; 0xffff
   173e0:	cmp	r2, r5
   173e4:	rsblt	r3, r7, #0
   173e8:	ldr	r2, [fp, #8]
   173ec:	cmp	r9, #0
   173f0:	mov	r8, #0
   173f4:	moveq	r9, r2
   173f8:	mov	r2, #0
   173fc:	cmp	r9, #43	; 0x2b
   17400:	bne	16960 <__assert_fail@plt+0x4a98>
   17404:	cmp	r4, r6
   17408:	mov	r8, r4
   1740c:	mov	r5, #0
   17410:	movw	r4, #9999	; 0x270f
   17414:	mov	r7, #0
   17418:	movwlt	r5, #1
   1741c:	cmp	r8, #2
   17420:	movweq	r4, #99	; 0x63
   17424:	cmp	r4, r3
   17428:	mov	r4, r8
   1742c:	movwcc	r7, #1
   17430:	orr	r8, r5, r7
   17434:	b	16960 <__assert_fail@plt+0x4a98>
   17438:	cmp	r2, #0
   1743c:	beq	17628 <__assert_fail@plt+0x5760>
   17440:	movw	r4, #10000	; 0x2710
   17444:	mov	r8, #1
   17448:	mla	r2, r3, r4, r2
   1744c:	mov	r3, #100	; 0x64
   17450:	mov	r4, #9
   17454:	mla	r3, lr, r3, r2
   17458:	ldr	lr, [sp, #84]	; 0x54
   1745c:	mov	r2, #20
   17460:	b	16960 <__assert_fail@plt+0x4a98>
   17464:	ldr	r3, [sp, #88]	; 0x58
   17468:	sub	r0, fp, #46	; 0x2e
   1746c:	mov	r2, #1
   17470:	bl	11b80 <fwrite@plt>
   17474:	cmp	r9, #45	; 0x2d
   17478:	mov	r4, #0
   1747c:	mvn	r1, #9
   17480:	subne	r0, r6, r7
   17484:	subne	r0, r0, #9
   17488:	bicne	r4, r0, r0, asr #31
   1748c:	ldr	r0, [sp, #92]	; 0x5c
   17490:	add	r0, r0, r7
   17494:	sub	r0, r1, r0
   17498:	cmp	r4, r0
   1749c:	bcs	1769c <__assert_fail@plt+0x57d4>
   174a0:	ldr	r6, [sp, #88]	; 0x58
   174a4:	cmp	r6, #0
   174a8:	cmpne	r4, #0
   174ac:	bne	174c8 <__assert_fail@plt+0x5600>
   174b0:	ldr	r0, [sp, #92]	; 0x5c
   174b4:	add	r0, r0, r4
   174b8:	add	r0, r0, r7
   174bc:	mov	r7, r6
   174c0:	add	ip, r0, #9
   174c4:	b	15f54 <__assert_fail@plt+0x408c>
   174c8:	uxtb	r0, r9
   174cc:	cmp	r0, #43	; 0x2b
   174d0:	beq	174e0 <__assert_fail@plt+0x5618>
   174d4:	cmp	r0, #48	; 0x30
   174d8:	mov	r5, r4
   174dc:	bne	174fc <__assert_fail@plt+0x5634>
   174e0:	mov	r5, r4
   174e4:	mov	r0, #48	; 0x30
   174e8:	mov	r1, r6
   174ec:	bl	11db4 <fputc@plt>
   174f0:	subs	r5, r5, #1
   174f4:	bne	174e4 <__assert_fail@plt+0x561c>
   174f8:	b	174b0 <__assert_fail@plt+0x55e8>
   174fc:	mov	r0, #32
   17500:	mov	r1, r6
   17504:	bl	11db4 <fputc@plt>
   17508:	subs	r5, r5, #1
   1750c:	bne	174fc <__assert_fail@plt+0x5634>
   17510:	b	174b0 <__assert_fail@plt+0x55e8>
   17514:	ldr	r6, [sp, #88]	; 0x58
   17518:	cmp	r4, #0
   1751c:	beq	17534 <__assert_fail@plt+0x566c>
   17520:	mov	r0, #32
   17524:	mov	r1, r6
   17528:	bl	11db4 <fputc@plt>
   1752c:	subs	r4, r4, #1
   17530:	bne	17520 <__assert_fail@plt+0x5658>
   17534:	ldr	r0, [sp, #76]	; 0x4c
   17538:	tst	r0, #1
   1753c:	beq	17578 <__assert_fail@plt+0x56b0>
   17540:	ldr	r7, [sp, #88]	; 0x58
   17544:	cmp	r5, #0
   17548:	beq	175dc <__assert_fail@plt+0x5714>
   1754c:	bl	11c40 <__ctype_tolower_loc@plt>
   17550:	ldr	r4, [sp, #44]	; 0x2c
   17554:	mov	r6, r0
   17558:	ldrb	r0, [r4], #1
   1755c:	ldr	r1, [r6]
   17560:	ldr	r0, [r1, r0, lsl #2]
   17564:	mov	r1, r7
   17568:	bl	11db4 <fputc@plt>
   1756c:	subs	r5, r5, #1
   17570:	bne	17558 <__assert_fail@plt+0x5690>
   17574:	b	175dc <__assert_fail@plt+0x5714>
   17578:	ldr	r1, [sp, #84]	; 0x54
   1757c:	eor	r0, r0, #1
   17580:	and	r0, r1, r0
   17584:	tst	r0, #1
   17588:	beq	175c4 <__assert_fail@plt+0x56fc>
   1758c:	ldr	r7, [sp, #88]	; 0x58
   17590:	cmp	r5, #0
   17594:	beq	175dc <__assert_fail@plt+0x5714>
   17598:	bl	11c4c <__ctype_toupper_loc@plt>
   1759c:	ldr	r4, [sp, #44]	; 0x2c
   175a0:	mov	r6, r0
   175a4:	ldrb	r0, [r4], #1
   175a8:	ldr	r1, [r6]
   175ac:	ldr	r0, [r1, r0, lsl #2]
   175b0:	mov	r1, r7
   175b4:	bl	11db4 <fputc@plt>
   175b8:	subs	r5, r5, #1
   175bc:	bne	175a4 <__assert_fail@plt+0x56dc>
   175c0:	b	175dc <__assert_fail@plt+0x5714>
   175c4:	ldr	r7, [sp, #88]	; 0x58
   175c8:	ldr	r0, [sp, #44]	; 0x2c
   175cc:	mov	r1, r5
   175d0:	mov	r2, #1
   175d4:	mov	r3, r7
   175d8:	bl	11b80 <fwrite@plt>
   175dc:	ldr	ip, [sp, #92]	; 0x5c
   175e0:	add	ip, r8, ip
   175e4:	b	15f54 <__assert_fail@plt+0x408c>
   175e8:	ldr	r6, [sp, #88]	; 0x58
   175ec:	mov	r0, #32
   175f0:	mov	r1, r6
   175f4:	bl	11db4 <fputc@plt>
   175f8:	subs	r5, r5, #1
   175fc:	bne	175ec <__assert_fail@plt+0x5724>
   17600:	mov	r0, #10
   17604:	b	17668 <__assert_fail@plt+0x57a0>
   17608:	ldr	r6, [sp, #88]	; 0x58
   1760c:	mov	r0, #32
   17610:	mov	r1, r6
   17614:	bl	11db4 <fputc@plt>
   17618:	subs	r5, r5, #1
   1761c:	bne	1760c <__assert_fail@plt+0x5744>
   17620:	mov	r0, #9
   17624:	b	17668 <__assert_fail@plt+0x57a0>
   17628:	cmp	lr, #0
   1762c:	beq	17680 <__assert_fail@plt+0x57b8>
   17630:	mov	r2, #100	; 0x64
   17634:	mov	r4, #6
   17638:	mov	r8, #1
   1763c:	mla	r3, r3, r2, lr
   17640:	ldr	lr, [sp, #84]	; 0x54
   17644:	mov	r2, #4
   17648:	b	16960 <__assert_fail@plt+0x4a98>
   1764c:	ldr	r6, [sp, #88]	; 0x58
   17650:	mov	r0, #32
   17654:	mov	r1, r6
   17658:	bl	11db4 <fputc@plt>
   1765c:	subs	r5, r5, #1
   17660:	bne	17650 <__assert_fail@plt+0x5788>
   17664:	ldrb	r0, [sl]
   17668:	mov	r1, r6
   1766c:	bl	11db4 <fputc@plt>
   17670:	mov	ip, r7
   17674:	ldr	r7, [sp, #88]	; 0x58
   17678:	add	ip, r4, ip
   1767c:	b	15f54 <__assert_fail@plt+0x408c>
   17680:	mov	r4, #3
   17684:	b	17194 <__assert_fail@plt+0x52cc>
   17688:	mov	ip, #0
   1768c:	ldr	r0, [sp, #60]	; 0x3c
   17690:	ldr	r1, [sp, #56]	; 0x38
   17694:	str	r1, [r0]
   17698:	b	176ac <__assert_fail@plt+0x57e4>
   1769c:	mov	r0, #34	; 0x22
   176a0:	ldr	r1, [sp, #60]	; 0x3c
   176a4:	mov	ip, #0
   176a8:	str	r0, [r1]
   176ac:	mov	r0, ip
   176b0:	sub	sp, fp, #28
   176b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b8:	mov	r0, #75	; 0x4b
   176bc:	b	176a0 <__assert_fail@plt+0x57d8>
   176c0:	push	{r4, r5, r6, sl, fp, lr}
   176c4:	add	fp, sp, #16
   176c8:	mov	r4, r0
   176cc:	bl	11cdc <__errno_location@plt>
   176d0:	ldr	r6, [r0]
   176d4:	mov	r5, r0
   176d8:	mov	r0, r4
   176dc:	bl	11a84 <free@plt>
   176e0:	str	r6, [r5]
   176e4:	pop	{r4, r5, r6, sl, fp, pc}
   176e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ec:	add	fp, sp, #28
   176f0:	sub	sp, sp, #4
   176f4:	mov	r5, r0
   176f8:	mov	r0, r2
   176fc:	mov	r4, r2
   17700:	mov	r9, r1
   17704:	bl	11d30 <fileno@plt>
   17708:	mov	r7, #0
   1770c:	cmp	r0, #0
   17710:	beq	17750 <__assert_fail@plt+0x5888>
   17714:	cmp	r0, #1
   17718:	beq	1775c <__assert_fail@plt+0x5894>
   1771c:	cmp	r0, #2
   17720:	beq	17738 <__assert_fail@plt+0x5870>
   17724:	mov	r0, #2
   17728:	mov	r1, #2
   1772c:	bl	11b08 <dup2@plt>
   17730:	subs	r7, r0, #2
   17734:	movwne	r7, #1
   17738:	mov	r0, #1
   1773c:	mov	r1, #1
   17740:	bl	11b08 <dup2@plt>
   17744:	subs	r6, r0, #1
   17748:	movwne	r6, #1
   1774c:	b	17760 <__assert_fail@plt+0x5898>
   17750:	mov	r6, #0
   17754:	mov	r8, #0
   17758:	b	17828 <__assert_fail@plt+0x5960>
   1775c:	mov	r6, #0
   17760:	mov	r0, #0
   17764:	mov	r1, #0
   17768:	mov	sl, #0
   1776c:	bl	11b08 <dup2@plt>
   17770:	cmp	r0, #0
   17774:	mov	r8, #0
   17778:	beq	177b8 <__assert_fail@plt+0x58f0>
   1777c:	movw	r0, #30989	; 0x790d
   17780:	mov	r1, #0
   17784:	movt	r0, #3
   17788:	bl	11bf8 <open64@plt>
   1778c:	cmp	r0, #0
   17790:	beq	177b4 <__assert_fail@plt+0x58ec>
   17794:	cmn	r0, #1
   17798:	ble	178b4 <__assert_fail@plt+0x59ec>
   1779c:	bl	11ea4 <close@plt>
   177a0:	bl	11cdc <__errno_location@plt>
   177a4:	mov	r4, r0
   177a8:	mov	r0, #9
   177ac:	str	r0, [r4]
   177b0:	b	178bc <__assert_fail@plt+0x59f4>
   177b4:	mov	r8, #1
   177b8:	cmp	r6, #0
   177bc:	beq	177dc <__assert_fail@plt+0x5914>
   177c0:	movw	r0, #30989	; 0x790d
   177c4:	mov	r1, #0
   177c8:	movt	r0, #3
   177cc:	bl	11bf8 <open64@plt>
   177d0:	mov	sl, #1
   177d4:	cmp	r0, #1
   177d8:	bne	17894 <__assert_fail@plt+0x59cc>
   177dc:	cmp	r7, #0
   177e0:	beq	17820 <__assert_fail@plt+0x5958>
   177e4:	movw	r0, #30989	; 0x790d
   177e8:	mov	r1, #0
   177ec:	movt	r0, #3
   177f0:	bl	11bf8 <open64@plt>
   177f4:	mov	r7, #1
   177f8:	cmp	r0, #2
   177fc:	beq	17824 <__assert_fail@plt+0x595c>
   17800:	cmn	r0, #1
   17804:	ble	1790c <__assert_fail@plt+0x5a44>
   17808:	bl	11ea4 <close@plt>
   1780c:	bl	11cdc <__errno_location@plt>
   17810:	mov	r4, r0
   17814:	mov	r0, #9
   17818:	str	r0, [r4]
   1781c:	b	17914 <__assert_fail@plt+0x5a4c>
   17820:	mov	r7, #0
   17824:	mov	r6, sl
   17828:	mov	r0, r5
   1782c:	mov	r1, r9
   17830:	mov	r2, r4
   17834:	bl	11c64 <freopen64@plt>
   17838:	mov	r5, r0
   1783c:	bl	11cdc <__errno_location@plt>
   17840:	ldr	r9, [r0]
   17844:	mov	r4, r0
   17848:	cmp	r7, #0
   1784c:	beq	17858 <__assert_fail@plt+0x5990>
   17850:	mov	r0, #2
   17854:	bl	11ea4 <close@plt>
   17858:	cmp	r6, #0
   1785c:	beq	17868 <__assert_fail@plt+0x59a0>
   17860:	mov	r0, #1
   17864:	bl	11ea4 <close@plt>
   17868:	cmp	r8, #0
   1786c:	beq	17878 <__assert_fail@plt+0x59b0>
   17870:	mov	r0, #0
   17874:	bl	11ea4 <close@plt>
   17878:	cmp	r5, #0
   1787c:	bne	17888 <__assert_fail@plt+0x59c0>
   17880:	mov	r5, #0
   17884:	str	r9, [r4]
   17888:	mov	r0, r5
   1788c:	sub	sp, fp, #28
   17890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17894:	cmn	r0, #1
   17898:	ble	178d4 <__assert_fail@plt+0x5a0c>
   1789c:	bl	11ea4 <close@plt>
   178a0:	bl	11cdc <__errno_location@plt>
   178a4:	mov	r4, r0
   178a8:	mov	r0, #9
   178ac:	str	r0, [r4]
   178b0:	b	178dc <__assert_fail@plt+0x5a14>
   178b4:	bl	11cdc <__errno_location@plt>
   178b8:	mov	r4, r0
   178bc:	ldr	r9, [r4]
   178c0:	mov	r8, #1
   178c4:	mov	r5, #0
   178c8:	cmp	r7, #0
   178cc:	bne	17850 <__assert_fail@plt+0x5988>
   178d0:	b	17858 <__assert_fail@plt+0x5990>
   178d4:	bl	11cdc <__errno_location@plt>
   178d8:	mov	r4, r0
   178dc:	ldr	r9, [r4]
   178e0:	mov	r5, #0
   178e4:	cmp	r7, #0
   178e8:	beq	17860 <__assert_fail@plt+0x5998>
   178ec:	mov	r0, #2
   178f0:	bl	11ea4 <close@plt>
   178f4:	mov	r0, #1
   178f8:	bl	11ea4 <close@plt>
   178fc:	mov	r5, #0
   17900:	cmp	r8, #0
   17904:	bne	17870 <__assert_fail@plt+0x59a8>
   17908:	b	17880 <__assert_fail@plt+0x59b8>
   1790c:	bl	11cdc <__errno_location@plt>
   17910:	mov	r4, r0
   17914:	ldr	r9, [r4]
   17918:	mov	r0, #2
   1791c:	bl	11ea4 <close@plt>
   17920:	mov	r5, #0
   17924:	cmp	sl, #0
   17928:	bne	17860 <__assert_fail@plt+0x5998>
   1792c:	b	17868 <__assert_fail@plt+0x59a0>
   17930:	push	{r4, r5, r6, r7, fp, lr}
   17934:	add	fp, sp, #16
   17938:	sub	sp, sp, #8
   1793c:	mov	r4, r0
   17940:	ldr	r0, [r0, #4]
   17944:	mov	r5, r3
   17948:	mov	r6, r2
   1794c:	ldr	r1, [r4, #8]
   17950:	cmp	r1, r0
   17954:	bne	17970 <__assert_fail@plt+0x5aa8>
   17958:	ldrd	r0, [r4, #16]
   1795c:	cmp	r1, r0
   17960:	bne	17970 <__assert_fail@plt+0x5aa8>
   17964:	ldr	r0, [r4, #36]	; 0x24
   17968:	cmp	r0, #0
   1796c:	beq	17988 <__assert_fail@plt+0x5ac0>
   17970:	mov	r0, r4
   17974:	mov	r2, r6
   17978:	mov	r3, r5
   1797c:	sub	sp, fp, #16
   17980:	pop	{r4, r5, r6, r7, fp, lr}
   17984:	b	11d60 <fseeko64@plt>
   17988:	ldr	r7, [fp, #8]
   1798c:	mov	r0, r4
   17990:	bl	11d30 <fileno@plt>
   17994:	mov	r2, r6
   17998:	mov	r3, r5
   1799c:	str	r7, [sp]
   179a0:	bl	11b8c <lseek64@plt>
   179a4:	and	r2, r0, r1
   179a8:	cmn	r2, #1
   179ac:	beq	179cc <__assert_fail@plt+0x5b04>
   179b0:	strd	r0, [r4, #80]	; 0x50
   179b4:	ldr	r0, [r4]
   179b8:	bic	r0, r0, #16
   179bc:	str	r0, [r4]
   179c0:	mov	r0, #0
   179c4:	sub	sp, fp, #16
   179c8:	pop	{r4, r5, r6, r7, fp, pc}
   179cc:	mvn	r0, #0
   179d0:	sub	sp, fp, #16
   179d4:	pop	{r4, r5, r6, r7, fp, pc}
   179d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179dc:	add	fp, sp, #28
   179e0:	sub	sp, sp, #28
   179e4:	cmp	r1, #4096	; 0x1000
   179e8:	bcs	17a04 <__assert_fail@plt+0x5b3c>
   179ec:	mov	r7, r0
   179f0:	and	r0, r1, #516	; 0x204
   179f4:	mov	r5, r1
   179f8:	cmp	r0, #516	; 0x204
   179fc:	tstne	r5, #18
   17a00:	bne	17a20 <__assert_fail@plt+0x5b58>
   17a04:	bl	11cdc <__errno_location@plt>
   17a08:	mov	r1, #22
   17a0c:	mov	r4, #0
   17a10:	str	r1, [r0]
   17a14:	mov	r0, r4
   17a18:	sub	sp, fp, #28
   17a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a20:	mov	r0, #1
   17a24:	mov	r1, #96	; 0x60
   17a28:	mov	sl, r2
   17a2c:	bl	347bc <__assert_fail@plt+0x228f4>
   17a30:	cmp	r0, #0
   17a34:	beq	17e3c <__assert_fail@plt+0x5f74>
   17a38:	mov	r4, r0
   17a3c:	mvn	r0, #99	; 0x63
   17a40:	tst	r5, #2
   17a44:	mov	r1, r5
   17a48:	str	r0, [r4, #32]
   17a4c:	bic	r0, r5, #516	; 0x204
   17a50:	str	sl, [r4, #44]	; 0x2c
   17a54:	str	r4, [sp, #24]
   17a58:	orrne	r1, r0, #4
   17a5c:	str	r1, [r4, #48]	; 0x30
   17a60:	ldr	r0, [r7]
   17a64:	cmp	r0, #0
   17a68:	beq	17aa0 <__assert_fail@plt+0x5bd8>
   17a6c:	add	r6, r7, #4
   17a70:	mov	r4, #0
   17a74:	bl	11cac <strlen@plt>
   17a78:	cmp	r0, r4
   17a7c:	movhi	r4, r0
   17a80:	ldr	r0, [r6], #4
   17a84:	cmp	r0, #0
   17a88:	bne	17a74 <__assert_fail@plt+0x5bac>
   17a8c:	add	r0, r4, #1
   17a90:	ldr	r4, [sp, #24]
   17a94:	cmp	r0, #4096	; 0x1000
   17a98:	movls	r0, #4096	; 0x1000
   17a9c:	b	17aa4 <__assert_fail@plt+0x5bdc>
   17aa0:	mov	r0, #4096	; 0x1000
   17aa4:	ldr	r1, [r4, #36]	; 0x24
   17aa8:	add	r0, r0, #256	; 0x100
   17aac:	adds	r1, r0, r1
   17ab0:	bcc	17ad4 <__assert_fail@plt+0x5c0c>
   17ab4:	ldr	r0, [r4, #24]
   17ab8:	bl	176c0 <__assert_fail@plt+0x57f8>
   17abc:	mov	r0, #0
   17ac0:	str	r0, [r4, #24]
   17ac4:	bl	11cdc <__errno_location@plt>
   17ac8:	mov	r1, #36	; 0x24
   17acc:	str	r1, [r0]
   17ad0:	b	17e34 <__assert_fail@plt+0x5f6c>
   17ad4:	str	r1, [r4, #36]	; 0x24
   17ad8:	ldr	r0, [r4, #24]
   17adc:	bl	34840 <__assert_fail@plt+0x22978>
   17ae0:	cmp	r0, #0
   17ae4:	beq	17b58 <__assert_fail@plt+0x5c90>
   17ae8:	str	r0, [r4, #24]
   17aec:	ldr	r0, [r7]
   17af0:	cmp	r0, #0
   17af4:	beq	17b6c <__assert_fail@plt+0x5ca4>
   17af8:	mov	r0, #176	; 0xb0
   17afc:	bl	34810 <__assert_fail@plt+0x22948>
   17b00:	cmp	r0, #0
   17b04:	beq	17e2c <__assert_fail@plt+0x5f64>
   17b08:	ldr	r1, [r4, #24]
   17b0c:	mov	r6, r0
   17b10:	mov	r0, #0
   17b14:	mov	r2, #196608	; 0x30000
   17b18:	strb	r0, [r6, #168]	; 0xa8
   17b1c:	str	r2, [r6, #58]	; 0x3a
   17b20:	mvn	r2, #0
   17b24:	str	r4, [r6, #44]	; 0x2c
   17b28:	str	r2, [r6, #48]	; 0x30
   17b2c:	str	r0, [r6, #52]	; 0x34
   17b30:	str	r0, [r6, #12]
   17b34:	str	r0, [r6, #16]
   17b38:	str	r0, [r6, #20]
   17b3c:	str	r1, [r6, #28]
   17b40:	str	r0, [r6, #32]
   17b44:	cmp	sl, #0
   17b48:	beq	17b78 <__assert_fail@plt+0x5cb0>
   17b4c:	ldrb	r0, [r4, #49]	; 0x31
   17b50:	ubfx	r0, r0, #2, #1
   17b54:	b	17b7c <__assert_fail@plt+0x5cb4>
   17b58:	ldr	r0, [r4, #24]
   17b5c:	bl	176c0 <__assert_fail@plt+0x57f8>
   17b60:	mov	r0, #0
   17b64:	str	r0, [r4, #24]
   17b68:	b	17e34 <__assert_fail@plt+0x5f6c>
   17b6c:	mov	r6, #0
   17b70:	cmp	sl, #0
   17b74:	bne	17b4c <__assert_fail@plt+0x5c84>
   17b78:	mov	r0, #1
   17b7c:	ldr	r4, [r7]
   17b80:	cmp	r4, #0
   17b84:	beq	17cf0 <__assert_fail@plt+0x5e28>
   17b88:	eor	r0, r0, #1
   17b8c:	str	r6, [sp, #20]
   17b90:	and	r1, r5, #2048	; 0x800
   17b94:	mov	r9, #0
   17b98:	mov	r6, #0
   17b9c:	str	sl, [sp, #8]
   17ba0:	str	r0, [sp, #12]
   17ba4:	mov	r0, #0
   17ba8:	str	r1, [sp, #16]
   17bac:	str	r0, [sp, #4]
   17bb0:	b	17bdc <__assert_fail@plt+0x5d14>
   17bb4:	cmp	r9, #0
   17bb8:	str	r4, [r5, #8]
   17bbc:	beq	17ce4 <__assert_fail@plt+0x5e1c>
   17bc0:	ldr	r0, [sp, #4]
   17bc4:	str	r5, [sp, #4]
   17bc8:	str	r5, [r0, #8]
   17bcc:	ldr	r4, [r7, #4]!
   17bd0:	add	r6, r6, #1
   17bd4:	cmp	r4, #0
   17bd8:	beq	17d0c <__assert_fail@plt+0x5e44>
   17bdc:	mov	r0, r4
   17be0:	bl	11cac <strlen@plt>
   17be4:	mov	r8, r0
   17be8:	ldr	r0, [sp, #16]
   17bec:	cmp	r0, #0
   17bf0:	bne	17c28 <__assert_fail@plt+0x5d60>
   17bf4:	cmp	r8, #3
   17bf8:	bcc	17c28 <__assert_fail@plt+0x5d60>
   17bfc:	add	r0, r8, r4
   17c00:	ldrb	r0, [r0, #-1]
   17c04:	cmp	r0, #47	; 0x2f
   17c08:	bne	17c28 <__assert_fail@plt+0x5d60>
   17c0c:	sub	r0, r4, #2
   17c10:	ldrb	r1, [r0, r8]
   17c14:	cmp	r1, #47	; 0x2f
   17c18:	bne	17c28 <__assert_fail@plt+0x5d60>
   17c1c:	sub	r8, r8, #1
   17c20:	cmp	r8, #1
   17c24:	bhi	17c10 <__assert_fail@plt+0x5d48>
   17c28:	add	r0, r8, #176	; 0xb0
   17c2c:	bic	r0, r0, #7
   17c30:	bl	34810 <__assert_fail@plt+0x22948>
   17c34:	cmp	r0, #0
   17c38:	beq	17cfc <__assert_fail@plt+0x5e34>
   17c3c:	add	sl, r0, #168	; 0xa8
   17c40:	mov	r5, r0
   17c44:	mov	r1, r4
   17c48:	mov	r2, r8
   17c4c:	mov	r0, sl
   17c50:	bl	11ab4 <memcpy@plt>
   17c54:	ldr	r0, [sp, #24]
   17c58:	ldr	r2, [sp, #20]
   17c5c:	mov	r4, #0
   17c60:	strb	r4, [sl, r8]
   17c64:	str	r2, [r5, #4]
   17c68:	add	r2, r5, #44	; 0x2c
   17c6c:	ldr	r1, [r0, #24]
   17c70:	stm	r2, {r0, r4, r8}
   17c74:	mov	r2, #196608	; 0x30000
   17c78:	str	r2, [r5, #58]	; 0x3a
   17c7c:	ldr	r2, [sp, #12]
   17c80:	str	r4, [r5, #12]
   17c84:	str	r4, [r5, #16]
   17c88:	str	r4, [r5, #20]
   17c8c:	str	sl, [r5, #24]
   17c90:	str	r1, [r5, #28]
   17c94:	clz	r1, r9
   17c98:	str	r4, [r5, #32]
   17c9c:	lsr	r1, r1, #5
   17ca0:	orrs	r1, r2, r1
   17ca4:	bne	17cbc <__assert_fail@plt+0x5df4>
   17ca8:	mov	r0, #2
   17cac:	str	r0, [r5, #112]	; 0x70
   17cb0:	str	r4, [r5, #116]	; 0x74
   17cb4:	mov	r0, #11
   17cb8:	b	17cc8 <__assert_fail@plt+0x5e00>
   17cbc:	mov	r1, r5
   17cc0:	mov	r2, #0
   17cc4:	bl	17ed0 <__assert_fail@plt+0x6008>
   17cc8:	ldr	sl, [sp, #8]
   17ccc:	strh	r0, [r5, #56]	; 0x38
   17cd0:	cmp	sl, #0
   17cd4:	beq	17bb4 <__assert_fail@plt+0x5cec>
   17cd8:	str	r9, [r5, #8]
   17cdc:	mov	r9, r5
   17ce0:	b	17bcc <__assert_fail@plt+0x5d04>
   17ce4:	mov	r0, r5
   17ce8:	str	r5, [sp, #4]
   17cec:	b	17cdc <__assert_fail@plt+0x5e14>
   17cf0:	ldr	r4, [sp, #24]
   17cf4:	mov	r9, #0
   17cf8:	b	17d40 <__assert_fail@plt+0x5e78>
   17cfc:	ldr	r6, [sp, #20]
   17d00:	cmp	r9, #0
   17d04:	bne	17e08 <__assert_fail@plt+0x5f40>
   17d08:	b	17e20 <__assert_fail@plt+0x5f58>
   17d0c:	cmp	sl, #0
   17d10:	beq	17d38 <__assert_fail@plt+0x5e70>
   17d14:	ldr	r4, [sp, #24]
   17d18:	cmp	r6, #2
   17d1c:	bcc	17d3c <__assert_fail@plt+0x5e74>
   17d20:	mov	r0, r4
   17d24:	mov	r1, r9
   17d28:	mov	r2, r6
   17d2c:	bl	18068 <__assert_fail@plt+0x61a0>
   17d30:	mov	r9, r0
   17d34:	b	17d3c <__assert_fail@plt+0x5e74>
   17d38:	ldr	r4, [sp, #24]
   17d3c:	ldr	r6, [sp, #20]
   17d40:	mov	r0, #176	; 0xb0
   17d44:	bl	34810 <__assert_fail@plt+0x22948>
   17d48:	cmp	r0, #0
   17d4c:	beq	17de0 <__assert_fail@plt+0x5f18>
   17d50:	ldr	r2, [r4, #24]
   17d54:	mov	r1, #0
   17d58:	mov	r3, #196608	; 0x30000
   17d5c:	str	r0, [r4]
   17d60:	str	r1, [r0, #52]	; 0x34
   17d64:	strb	r1, [r0, #168]	; 0xa8
   17d68:	str	r4, [r0, #44]	; 0x2c
   17d6c:	str	r3, [r0, #58]	; 0x3a
   17d70:	str	r2, [r0, #28]
   17d74:	mov	r2, #9
   17d78:	str	r1, [r0, #32]
   17d7c:	strh	r2, [r0, #56]	; 0x38
   17d80:	str	r9, [r0, #8]
   17d84:	str	r1, [r0, #12]
   17d88:	str	r1, [r0, #16]
   17d8c:	str	r1, [r0, #20]
   17d90:	mov	r1, #1
   17d94:	str	r1, [r0, #48]	; 0x30
   17d98:	ldrh	r0, [r4, #48]	; 0x30
   17d9c:	movw	r1, #258	; 0x102
   17da0:	tst	r0, r1
   17da4:	beq	17e44 <__assert_fail@plt+0x5f7c>
   17da8:	movw	r0, #30400	; 0x76c0
   17dac:	movw	r2, #39900	; 0x9bdc
   17db0:	movw	r3, #39932	; 0x9bfc
   17db4:	mov	r1, #0
   17db8:	movt	r0, #1
   17dbc:	movt	r2, #1
   17dc0:	movt	r3, #1
   17dc4:	str	r0, [sp]
   17dc8:	mov	r0, #31
   17dcc:	bl	1a28c <__assert_fail@plt+0x83c4>
   17dd0:	cmp	r0, #0
   17dd4:	str	r0, [r4, #56]	; 0x38
   17dd8:	bne	17e5c <__assert_fail@plt+0x5f94>
   17ddc:	b	17de8 <__assert_fail@plt+0x5f20>
   17de0:	mov	r0, #0
   17de4:	str	r0, [r4]
   17de8:	cmp	r9, #0
   17dec:	bne	17e08 <__assert_fail@plt+0x5f40>
   17df0:	b	17e20 <__assert_fail@plt+0x5f58>
   17df4:	mov	r0, r9
   17df8:	bl	176c0 <__assert_fail@plt+0x57f8>
   17dfc:	cmp	r4, #0
   17e00:	mov	r9, r4
   17e04:	beq	17e20 <__assert_fail@plt+0x5f58>
   17e08:	ldrd	r4, [r9, #8]
   17e0c:	cmp	r5, #0
   17e10:	beq	17df4 <__assert_fail@plt+0x5f2c>
   17e14:	mov	r0, r5
   17e18:	bl	11ebc <closedir@plt>
   17e1c:	b	17df4 <__assert_fail@plt+0x5f2c>
   17e20:	mov	r0, r6
   17e24:	bl	176c0 <__assert_fail@plt+0x57f8>
   17e28:	ldr	r4, [sp, #24]
   17e2c:	ldr	r0, [r4, #24]
   17e30:	bl	176c0 <__assert_fail@plt+0x57f8>
   17e34:	mov	r0, r4
   17e38:	bl	176c0 <__assert_fail@plt+0x57f8>
   17e3c:	mov	r4, #0
   17e40:	b	17a14 <__assert_fail@plt+0x5b4c>
   17e44:	mov	r0, #32
   17e48:	bl	34810 <__assert_fail@plt+0x22948>
   17e4c:	cmp	r0, #0
   17e50:	str	r0, [r4, #56]	; 0x38
   17e54:	beq	17de8 <__assert_fail@plt+0x5f20>
   17e58:	bl	353e8 <__assert_fail@plt+0x23520>
   17e5c:	ldr	r4, [sp, #24]
   17e60:	ldr	r0, [r4, #48]	; 0x30
   17e64:	tst	r0, #516	; 0x204
   17e68:	bne	17ec0 <__assert_fail@plt+0x5ff8>
   17e6c:	mov	r1, #32768	; 0x8000
   17e70:	tst	r0, #512	; 0x200
   17e74:	and	r1, r1, r0, lsl #11
   17e78:	orr	r1, r1, #18688	; 0x4900
   17e7c:	orr	r2, r1, #524288	; 0x80000
   17e80:	bne	17e98 <__assert_fail@plt+0x5fd0>
   17e84:	movw	r0, #31000	; 0x7918
   17e88:	mov	r1, r2
   17e8c:	movt	r0, #3
   17e90:	bl	3577c <__assert_fail@plt+0x238b4>
   17e94:	b	17ea8 <__assert_fail@plt+0x5fe0>
   17e98:	ldr	r0, [r4, #32]
   17e9c:	movw	r1, #31000	; 0x7918
   17ea0:	movt	r1, #3
   17ea4:	bl	1d1d8 <__assert_fail@plt+0xb310>
   17ea8:	cmn	r0, #1
   17eac:	str	r0, [r4, #28]
   17eb0:	bgt	17ec0 <__assert_fail@plt+0x5ff8>
   17eb4:	ldr	r0, [r4, #48]	; 0x30
   17eb8:	orr	r0, r0, #4
   17ebc:	str	r0, [r4, #48]	; 0x30
   17ec0:	add	r0, r4, #60	; 0x3c
   17ec4:	mvn	r1, #0
   17ec8:	bl	1bd80 <__assert_fail@plt+0x9eb8>
   17ecc:	b	17a14 <__assert_fail@plt+0x5b4c>
   17ed0:	push	{r4, r5, r6, sl, fp, lr}
   17ed4:	add	fp, sp, #16
   17ed8:	sub	sp, sp, #8
   17edc:	mov	r4, r1
   17ee0:	ldr	r1, [r0, #48]	; 0x30
   17ee4:	ldr	r3, [r4, #48]	; 0x30
   17ee8:	add	r5, r4, #64	; 0x40
   17eec:	cmp	r3, #0
   17ef0:	andeq	r3, r1, #1
   17ef4:	orreq	r2, r3, r2
   17ef8:	cmp	r2, #0
   17efc:	andseq	r1, r1, #2
   17f00:	beq	17f5c <__assert_fail@plt+0x6094>
   17f04:	ldr	r1, [r4, #24]
   17f08:	mov	r0, #3
   17f0c:	mov	r2, r5
   17f10:	bl	11e5c <__xstat64@plt>
   17f14:	cmp	r0, #0
   17f18:	beq	17fdc <__assert_fail@plt+0x6114>
   17f1c:	bl	11cdc <__errno_location@plt>
   17f20:	mov	r6, r0
   17f24:	ldr	r0, [r0]
   17f28:	cmp	r0, #2
   17f2c:	bne	17f8c <__assert_fail@plt+0x60c4>
   17f30:	ldr	r1, [r4, #24]
   17f34:	mov	r0, #3
   17f38:	mov	r2, r5
   17f3c:	bl	11eb0 <__lxstat64@plt>
   17f40:	cmp	r0, #0
   17f44:	bne	17f88 <__assert_fail@plt+0x60c0>
   17f48:	mov	r0, #0
   17f4c:	str	r0, [r6]
   17f50:	mov	r0, #13
   17f54:	sub	sp, fp, #16
   17f58:	pop	{r4, r5, r6, sl, fp, pc}
   17f5c:	ldr	r1, [r0, #32]
   17f60:	ldr	r2, [r4, #24]
   17f64:	mov	r0, #256	; 0x100
   17f68:	mov	r3, r5
   17f6c:	str	r0, [sp]
   17f70:	mov	r0, #3
   17f74:	bl	11b44 <__fxstatat64@plt>
   17f78:	cmp	r0, #0
   17f7c:	beq	17fdc <__assert_fail@plt+0x6114>
   17f80:	bl	11cdc <__errno_location@plt>
   17f84:	mov	r6, r0
   17f88:	ldr	r0, [r6]
   17f8c:	vmov.i32	q8, #0	; 0x00000000
   17f90:	add	r1, r5, #80	; 0x50
   17f94:	str	r0, [r4, #32]
   17f98:	mov	r0, #0
   17f9c:	str	r0, [r5, #96]	; 0x60
   17fa0:	vst1.64	{d16-d17}, [r1]
   17fa4:	add	r1, r5, #64	; 0x40
   17fa8:	vst1.64	{d16-d17}, [r1]
   17fac:	add	r1, r5, #48	; 0x30
   17fb0:	vst1.64	{d16-d17}, [r1]
   17fb4:	add	r1, r5, #32
   17fb8:	vst1.64	{d16-d17}, [r1]
   17fbc:	add	r1, r5, #16
   17fc0:	vst1.64	{d16-d17}, [r1]
   17fc4:	mov	r1, #100	; 0x64
   17fc8:	vst1.64	{d16-d17}, [r5], r1
   17fcc:	str	r0, [r5]
   17fd0:	mov	r0, #10
   17fd4:	sub	sp, fp, #16
   17fd8:	pop	{r4, r5, r6, sl, fp, pc}
   17fdc:	ldr	r0, [r4, #80]	; 0x50
   17fe0:	and	r0, r0, #61440	; 0xf000
   17fe4:	cmp	r0, #40960	; 0xa000
   17fe8:	beq	18050 <__assert_fail@plt+0x6188>
   17fec:	cmp	r0, #32768	; 0x8000
   17ff0:	beq	18044 <__assert_fail@plt+0x617c>
   17ff4:	cmp	r0, #16384	; 0x4000
   17ff8:	bne	1805c <__assert_fail@plt+0x6194>
   17ffc:	ldrb	r1, [r4, #168]	; 0xa8
   18000:	mov	r0, #1
   18004:	cmp	r1, #46	; 0x2e
   18008:	bne	18060 <__assert_fail@plt+0x6198>
   1800c:	ldrb	r1, [r4, #169]	; 0xa9
   18010:	cmp	r1, #0
   18014:	beq	1802c <__assert_fail@plt+0x6164>
   18018:	cmp	r1, #46	; 0x2e
   1801c:	bne	18060 <__assert_fail@plt+0x6198>
   18020:	ldrb	r1, [r4, #170]	; 0xaa
   18024:	cmp	r1, #0
   18028:	bne	18060 <__assert_fail@plt+0x6198>
   1802c:	ldr	r1, [r4, #48]	; 0x30
   18030:	mov	r0, #5
   18034:	cmp	r1, #0
   18038:	movweq	r0, #1
   1803c:	sub	sp, fp, #16
   18040:	pop	{r4, r5, r6, sl, fp, pc}
   18044:	mov	r0, #8
   18048:	sub	sp, fp, #16
   1804c:	pop	{r4, r5, r6, sl, fp, pc}
   18050:	mov	r0, #12
   18054:	sub	sp, fp, #16
   18058:	pop	{r4, r5, r6, sl, fp, pc}
   1805c:	mov	r0, #3
   18060:	sub	sp, fp, #16
   18064:	pop	{r4, r5, r6, sl, fp, pc}
   18068:	push	{r4, r5, r6, r7, fp, lr}
   1806c:	add	fp, sp, #16
   18070:	mov	r6, r0
   18074:	ldr	r7, [r0, #44]	; 0x2c
   18078:	ldr	r0, [r0, #40]	; 0x28
   1807c:	mov	r5, r2
   18080:	mov	r4, r1
   18084:	cmp	r0, r2
   18088:	bcs	180c0 <__assert_fail@plt+0x61f8>
   1808c:	add	r1, r5, #40	; 0x28
   18090:	cmn	r1, #-1073741823	; 0xc0000001
   18094:	str	r1, [r6, #40]	; 0x28
   18098:	bhi	18164 <__assert_fail@plt+0x629c>
   1809c:	ldr	r0, [r6, #8]
   180a0:	lsl	r1, r1, #2
   180a4:	bl	34840 <__assert_fail@plt+0x22978>
   180a8:	cmp	r0, #0
   180ac:	beq	18164 <__assert_fail@plt+0x629c>
   180b0:	str	r0, [r6, #8]
   180b4:	cmp	r4, #0
   180b8:	bne	180cc <__assert_fail@plt+0x6204>
   180bc:	b	180e0 <__assert_fail@plt+0x6218>
   180c0:	ldr	r0, [r6, #8]
   180c4:	cmp	r4, #0
   180c8:	beq	180e0 <__assert_fail@plt+0x6218>
   180cc:	str	r4, [r0], #4
   180d0:	ldr	r4, [r4, #8]
   180d4:	cmp	r4, #0
   180d8:	bne	180cc <__assert_fail@plt+0x6204>
   180dc:	ldr	r0, [r6, #8]
   180e0:	mov	r1, r5
   180e4:	mov	r2, #4
   180e8:	mov	r3, r7
   180ec:	bl	11e2c <qsort@plt>
   180f0:	ldr	r0, [r6, #8]
   180f4:	cmp	r5, #1
   180f8:	ldr	r4, [r0]
   180fc:	mov	r1, r4
   18100:	beq	18188 <__assert_fail@plt+0x62c0>
   18104:	mov	r2, r0
   18108:	ldr	r1, [r2, #4]!
   1810c:	str	r1, [r4, #8]
   18110:	subs	r1, r5, #2
   18114:	beq	18180 <__assert_fail@plt+0x62b8>
   18118:	tst	r1, #1
   1811c:	beq	18134 <__assert_fail@plt+0x626c>
   18120:	ldr	r1, [r0, #8]!
   18124:	ldr	r2, [r0, #-4]
   18128:	str	r1, [r2, #8]
   1812c:	sub	r1, r5, #3
   18130:	mov	r2, r0
   18134:	cmp	r5, #3
   18138:	beq	18184 <__assert_fail@plt+0x62bc>
   1813c:	mov	r0, r2
   18140:	ldm	r2, {r3, r7}
   18144:	subs	r1, r1, #2
   18148:	str	r7, [r3, #8]
   1814c:	ldr	r3, [r0, #8]!
   18150:	ldr	r2, [r2, #4]
   18154:	str	r3, [r2, #8]
   18158:	mov	r2, r0
   1815c:	bne	18140 <__assert_fail@plt+0x6278>
   18160:	b	18184 <__assert_fail@plt+0x62bc>
   18164:	ldr	r0, [r6, #8]
   18168:	bl	176c0 <__assert_fail@plt+0x57f8>
   1816c:	mov	r0, #0
   18170:	str	r0, [r6, #40]	; 0x28
   18174:	str	r0, [r6, #8]
   18178:	mov	r0, r4
   1817c:	pop	{r4, r5, r6, r7, fp, pc}
   18180:	mov	r0, r2
   18184:	ldr	r1, [r0]
   18188:	mov	r0, #0
   1818c:	str	r0, [r1, #8]
   18190:	mov	r0, r4
   18194:	pop	{r4, r5, r6, r7, fp, pc}
   18198:	push	{r4, r5, r6, r7, fp, lr}
   1819c:	add	fp, sp, #16
   181a0:	mov	r4, r0
   181a4:	ldr	r0, [r0]
   181a8:	cmp	r0, #0
   181ac:	beq	181ec <__assert_fail@plt+0x6324>
   181b0:	ldr	r1, [r0, #48]	; 0x30
   181b4:	cmp	r1, #0
   181b8:	bmi	181e0 <__assert_fail@plt+0x6318>
   181bc:	ldr	r5, [r0, #8]
   181c0:	cmp	r5, #0
   181c4:	ldreq	r5, [r0, #4]
   181c8:	bl	176c0 <__assert_fail@plt+0x57f8>
   181cc:	ldr	r0, [r5, #48]	; 0x30
   181d0:	cmn	r0, #1
   181d4:	mov	r0, r5
   181d8:	bgt	181bc <__assert_fail@plt+0x62f4>
   181dc:	b	181e4 <__assert_fail@plt+0x631c>
   181e0:	mov	r5, r0
   181e4:	mov	r0, r5
   181e8:	bl	176c0 <__assert_fail@plt+0x57f8>
   181ec:	ldr	r5, [r4, #4]
   181f0:	cmp	r5, #0
   181f4:	bne	18210 <__assert_fail@plt+0x6348>
   181f8:	b	18228 <__assert_fail@plt+0x6360>
   181fc:	mov	r0, r5
   18200:	bl	176c0 <__assert_fail@plt+0x57f8>
   18204:	cmp	r6, #0
   18208:	mov	r5, r6
   1820c:	beq	18228 <__assert_fail@plt+0x6360>
   18210:	ldrd	r6, [r5, #8]
   18214:	cmp	r7, #0
   18218:	beq	181fc <__assert_fail@plt+0x6334>
   1821c:	mov	r0, r7
   18220:	bl	11ebc <closedir@plt>
   18224:	b	181fc <__assert_fail@plt+0x6334>
   18228:	ldr	r0, [r4, #8]
   1822c:	bl	176c0 <__assert_fail@plt+0x57f8>
   18230:	ldr	r0, [r4, #24]
   18234:	bl	176c0 <__assert_fail@plt+0x57f8>
   18238:	ldr	r0, [r4, #48]	; 0x30
   1823c:	tst	r0, #512	; 0x200
   18240:	bne	1826c <__assert_fail@plt+0x63a4>
   18244:	mov	r6, #0
   18248:	tst	r0, #4
   1824c:	bne	182b0 <__assert_fail@plt+0x63e8>
   18250:	ldr	r0, [r4, #28]
   18254:	bl	11e08 <fchdir@plt>
   18258:	cmp	r0, #0
   1825c:	beq	1828c <__assert_fail@plt+0x63c4>
   18260:	bl	11cdc <__errno_location@plt>
   18264:	ldr	r6, [r0]
   18268:	b	18290 <__assert_fail@plt+0x63c8>
   1826c:	ldr	r0, [r4, #32]
   18270:	mov	r6, #0
   18274:	cmp	r0, #0
   18278:	bmi	182b0 <__assert_fail@plt+0x63e8>
   1827c:	bl	11ea4 <close@plt>
   18280:	cmp	r0, #0
   18284:	bne	182a8 <__assert_fail@plt+0x63e0>
   18288:	b	182b0 <__assert_fail@plt+0x63e8>
   1828c:	mov	r6, #0
   18290:	ldr	r0, [r4, #28]
   18294:	bl	11ea4 <close@plt>
   18298:	cmp	r6, #0
   1829c:	bne	182b0 <__assert_fail@plt+0x63e8>
   182a0:	cmp	r0, #0
   182a4:	beq	182b0 <__assert_fail@plt+0x63e8>
   182a8:	bl	11cdc <__errno_location@plt>
   182ac:	ldr	r6, [r0]
   182b0:	add	r5, r4, #60	; 0x3c
   182b4:	mov	r0, r5
   182b8:	bl	1bda4 <__assert_fail@plt+0x9edc>
   182bc:	cmp	r0, #0
   182c0:	bne	182dc <__assert_fail@plt+0x6414>
   182c4:	mov	r0, r5
   182c8:	bl	1bdf8 <__assert_fail@plt+0x9f30>
   182cc:	cmp	r0, #0
   182d0:	bmi	182b4 <__assert_fail@plt+0x63ec>
   182d4:	bl	11ea4 <close@plt>
   182d8:	b	182b4 <__assert_fail@plt+0x63ec>
   182dc:	ldr	r0, [r4, #52]	; 0x34
   182e0:	cmp	r0, #0
   182e4:	beq	182ec <__assert_fail@plt+0x6424>
   182e8:	bl	1a590 <__assert_fail@plt+0x86c8>
   182ec:	ldrh	r0, [r4, #48]	; 0x30
   182f0:	movw	r1, #258	; 0x102
   182f4:	tst	r0, r1
   182f8:	beq	18310 <__assert_fail@plt+0x6448>
   182fc:	ldr	r0, [r4, #56]	; 0x38
   18300:	cmp	r0, #0
   18304:	beq	18318 <__assert_fail@plt+0x6450>
   18308:	bl	1a590 <__assert_fail@plt+0x86c8>
   1830c:	b	18318 <__assert_fail@plt+0x6450>
   18310:	ldr	r0, [r4, #56]	; 0x38
   18314:	bl	176c0 <__assert_fail@plt+0x57f8>
   18318:	mov	r0, r4
   1831c:	bl	176c0 <__assert_fail@plt+0x57f8>
   18320:	cmp	r6, #0
   18324:	beq	18338 <__assert_fail@plt+0x6470>
   18328:	bl	11cdc <__errno_location@plt>
   1832c:	str	r6, [r0]
   18330:	mvn	r0, #0
   18334:	pop	{r4, r5, r6, r7, fp, pc}
   18338:	mov	r0, #0
   1833c:	pop	{r4, r5, r6, r7, fp, pc}
   18340:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18344:	add	fp, sp, #24
   18348:	sub	sp, sp, #8
   1834c:	ldr	r6, [r0]
   18350:	mov	r5, #0
   18354:	cmp	r6, #0
   18358:	beq	18a98 <__assert_fail@plt+0x6bd0>
   1835c:	mov	r4, r0
   18360:	ldr	r0, [r0, #48]	; 0x30
   18364:	tst	r0, #8192	; 0x2000
   18368:	bne	18a98 <__assert_fail@plt+0x6bd0>
   1836c:	ldrh	r1, [r6, #60]	; 0x3c
   18370:	mov	r2, #3
   18374:	strh	r2, [r6, #60]	; 0x3c
   18378:	cmp	r1, #1
   1837c:	beq	183ec <__assert_fail@plt+0x6524>
   18380:	cmp	r1, #2
   18384:	bne	18408 <__assert_fail@plt+0x6540>
   18388:	ldrh	r2, [r6, #56]	; 0x38
   1838c:	bic	r3, r2, #1
   18390:	cmp	r3, #12
   18394:	bne	1840c <__assert_fail@plt+0x6544>
   18398:	mov	r0, r4
   1839c:	mov	r1, r6
   183a0:	mov	r2, #1
   183a4:	bl	17ed0 <__assert_fail@plt+0x6008>
   183a8:	cmp	r0, #1
   183ac:	strh	r0, [r6, #56]	; 0x38
   183b0:	bne	184fc <__assert_fail@plt+0x6634>
   183b4:	ldr	r0, [r4, #48]	; 0x30
   183b8:	tst	r0, #4
   183bc:	bne	184fc <__assert_fail@plt+0x6634>
   183c0:	mov	r1, #32768	; 0x8000
   183c4:	tst	r0, #512	; 0x200
   183c8:	and	r1, r1, r0, lsl #11
   183cc:	orr	r1, r1, #18688	; 0x4900
   183d0:	orr	r2, r1, #524288	; 0x80000
   183d4:	bne	186e0 <__assert_fail@plt+0x6818>
   183d8:	movw	r0, #31000	; 0x7918
   183dc:	mov	r1, r2
   183e0:	movt	r0, #3
   183e4:	bl	3577c <__assert_fail@plt+0x238b4>
   183e8:	b	186f0 <__assert_fail@plt+0x6828>
   183ec:	mov	r0, r4
   183f0:	mov	r1, r6
   183f4:	mov	r2, #0
   183f8:	bl	17ed0 <__assert_fail@plt+0x6008>
   183fc:	strh	r0, [r6, #56]	; 0x38
   18400:	mov	r5, r6
   18404:	b	18a98 <__assert_fail@plt+0x6bd0>
   18408:	ldrh	r2, [r6, #56]	; 0x38
   1840c:	cmp	r2, #1
   18410:	bne	1846c <__assert_fail@plt+0x65a4>
   18414:	cmp	r1, #4
   18418:	bne	18504 <__assert_fail@plt+0x663c>
   1841c:	ldrb	r0, [r6, #58]	; 0x3a
   18420:	tst	r0, #2
   18424:	beq	18430 <__assert_fail@plt+0x6568>
   18428:	ldr	r0, [r6, #36]	; 0x24
   1842c:	bl	11ea4 <close@plt>
   18430:	ldr	r5, [r4, #4]
   18434:	cmp	r5, #0
   18438:	bne	18454 <__assert_fail@plt+0x658c>
   1843c:	b	1859c <__assert_fail@plt+0x66d4>
   18440:	mov	r0, r5
   18444:	bl	176c0 <__assert_fail@plt+0x57f8>
   18448:	cmp	r8, #0
   1844c:	mov	r5, r8
   18450:	beq	18594 <__assert_fail@plt+0x66cc>
   18454:	ldrd	r8, [r5, #8]
   18458:	cmp	r9, #0
   1845c:	beq	18440 <__assert_fail@plt+0x6578>
   18460:	mov	r0, r9
   18464:	bl	11ebc <closedir@plt>
   18468:	b	18440 <__assert_fail@plt+0x6578>
   1846c:	ldr	r5, [r6, #8]
   18470:	cmp	r5, #0
   18474:	beq	185b8 <__assert_fail@plt+0x66f0>
   18478:	mov	r0, r6
   1847c:	str	r5, [r4]
   18480:	bl	176c0 <__assert_fail@plt+0x57f8>
   18484:	ldr	r0, [r5, #48]	; 0x30
   18488:	cmp	r0, #0
   1848c:	beq	18604 <__assert_fail@plt+0x673c>
   18490:	ldrh	r0, [r5, #60]	; 0x3c
   18494:	mov	r6, r5
   18498:	cmp	r0, #4
   1849c:	beq	1846c <__assert_fail@plt+0x65a4>
   184a0:	cmp	r0, #2
   184a4:	bne	18960 <__assert_fail@plt+0x6a98>
   184a8:	mov	r0, r4
   184ac:	mov	r1, r5
   184b0:	mov	r2, #1
   184b4:	bl	17ed0 <__assert_fail@plt+0x6008>
   184b8:	cmp	r0, #1
   184bc:	strh	r0, [r5, #56]	; 0x38
   184c0:	bne	18958 <__assert_fail@plt+0x6a90>
   184c4:	ldr	r0, [r4, #48]	; 0x30
   184c8:	tst	r0, #4
   184cc:	bne	18958 <__assert_fail@plt+0x6a90>
   184d0:	mov	r1, #32768	; 0x8000
   184d4:	tst	r0, #512	; 0x200
   184d8:	and	r1, r1, r0, lsl #11
   184dc:	orr	r1, r1, #18688	; 0x4900
   184e0:	orr	r2, r1, #524288	; 0x80000
   184e4:	bne	18918 <__assert_fail@plt+0x6a50>
   184e8:	movw	r0, #31000	; 0x7918
   184ec:	mov	r1, r2
   184f0:	movt	r0, #3
   184f4:	bl	3577c <__assert_fail@plt+0x238b4>
   184f8:	b	18928 <__assert_fail@plt+0x6a60>
   184fc:	mov	r5, r6
   18500:	b	1899c <__assert_fail@plt+0x6ad4>
   18504:	tst	r0, #64	; 0x40
   18508:	beq	18524 <__assert_fail@plt+0x665c>
   1850c:	ldrd	r2, [r4, #16]
   18510:	ldrd	r8, [r6, #64]	; 0x40
   18514:	eor	r1, r9, r3
   18518:	eor	r2, r8, r2
   1851c:	orrs	r1, r2, r1
   18520:	bne	1841c <__assert_fail@plt+0x6554>
   18524:	ldr	r5, [r4, #4]
   18528:	cmp	r5, #0
   1852c:	beq	18688 <__assert_fail@plt+0x67c0>
   18530:	tst	r0, #4096	; 0x1000
   18534:	bne	18648 <__assert_fail@plt+0x6780>
   18538:	ldr	r3, [r6, #24]
   1853c:	mov	r0, r4
   18540:	mov	r1, r6
   18544:	mvn	r2, #0
   18548:	bl	18b84 <__assert_fail@plt+0x6cbc>
   1854c:	cmp	r0, #0
   18550:	beq	186a0 <__assert_fail@plt+0x67d8>
   18554:	bl	11cdc <__errno_location@plt>
   18558:	ldr	r0, [r0]
   1855c:	str	r0, [r6, #32]
   18560:	ldrh	r0, [r6, #58]	; 0x3a
   18564:	orr	r0, r0, #1
   18568:	strh	r0, [r6, #58]	; 0x3a
   1856c:	ldr	r0, [r4, #4]
   18570:	cmp	r0, #0
   18574:	beq	186a0 <__assert_fail@plt+0x67d8>
   18578:	ldmib	r0, {r1, r2}
   1857c:	cmp	r2, #0
   18580:	ldr	r1, [r1, #24]
   18584:	str	r1, [r0, #24]
   18588:	mov	r0, r2
   1858c:	bne	18578 <__assert_fail@plt+0x66b0>
   18590:	b	186a0 <__assert_fail@plt+0x67d8>
   18594:	mov	r0, #0
   18598:	str	r0, [r4, #4]
   1859c:	mov	r0, #6
   185a0:	strh	r0, [r6, #56]	; 0x38
   185a4:	mov	r0, r4
   185a8:	mov	r1, r6
   185ac:	bl	18aa8 <__assert_fail@plt+0x6be0>
   185b0:	mov	r5, r6
   185b4:	b	18a98 <__assert_fail@plt+0x6bd0>
   185b8:	ldr	r5, [r6, #4]
   185bc:	ldr	r0, [r5, #12]
   185c0:	cmp	r0, #0
   185c4:	beq	18720 <__assert_fail@plt+0x6858>
   185c8:	str	r5, [r4]
   185cc:	ldr	r1, [r5, #40]	; 0x28
   185d0:	ldr	r0, [r4, #24]
   185d4:	mov	r5, #0
   185d8:	strb	r5, [r0, r1]
   185dc:	mov	r0, r4
   185e0:	mov	r1, #3
   185e4:	bl	18de4 <__assert_fail@plt+0x6f1c>
   185e8:	cmp	r0, #0
   185ec:	beq	18710 <__assert_fail@plt+0x6848>
   185f0:	mov	r7, r0
   185f4:	mov	r0, r6
   185f8:	bl	176c0 <__assert_fail@plt+0x57f8>
   185fc:	mov	r5, r7
   18600:	b	18960 <__assert_fail@plt+0x6a98>
   18604:	mov	r0, r4
   18608:	bl	19874 <__assert_fail@plt+0x79ac>
   1860c:	ldr	r1, [r4, #48]	; 0x30
   18610:	cmp	r0, #0
   18614:	beq	18628 <__assert_fail@plt+0x6760>
   18618:	orr	r0, r1, #8192	; 0x2000
   1861c:	mov	r5, #0
   18620:	str	r0, [r4, #48]	; 0x30
   18624:	b	18a98 <__assert_fail@plt+0x6bd0>
   18628:	movw	r0, #258	; 0x102
   1862c:	tst	r1, r0
   18630:	beq	187d0 <__assert_fail@plt+0x6908>
   18634:	ldr	r0, [r4, #56]	; 0x38
   18638:	cmp	r0, #0
   1863c:	beq	187d8 <__assert_fail@plt+0x6910>
   18640:	bl	1a590 <__assert_fail@plt+0x86c8>
   18644:	b	187d8 <__assert_fail@plt+0x6910>
   18648:	bic	r0, r0, #4096	; 0x1000
   1864c:	str	r0, [r4, #48]	; 0x30
   18650:	b	18668 <__assert_fail@plt+0x67a0>
   18654:	mov	r0, r5
   18658:	bl	176c0 <__assert_fail@plt+0x57f8>
   1865c:	cmp	r8, #0
   18660:	mov	r5, r8
   18664:	beq	18680 <__assert_fail@plt+0x67b8>
   18668:	ldrd	r8, [r5, #8]
   1866c:	cmp	r9, #0
   18670:	beq	18654 <__assert_fail@plt+0x678c>
   18674:	mov	r0, r9
   18678:	bl	11ebc <closedir@plt>
   1867c:	b	18654 <__assert_fail@plt+0x678c>
   18680:	mov	r0, #0
   18684:	str	r0, [r4, #4]
   18688:	mov	r0, r4
   1868c:	mov	r1, #3
   18690:	bl	18de4 <__assert_fail@plt+0x6f1c>
   18694:	cmp	r0, #0
   18698:	str	r0, [r4, #4]
   1869c:	beq	186b0 <__assert_fail@plt+0x67e8>
   186a0:	ldr	r5, [r4, #4]
   186a4:	mov	r0, #0
   186a8:	str	r0, [r4, #4]
   186ac:	b	18960 <__assert_fail@plt+0x6a98>
   186b0:	ldrb	r0, [r4, #49]	; 0x31
   186b4:	mov	r5, #0
   186b8:	tst	r0, #32
   186bc:	bne	18a98 <__assert_fail@plt+0x6bd0>
   186c0:	ldr	r0, [r6, #32]
   186c4:	cmp	r0, #0
   186c8:	beq	185a4 <__assert_fail@plt+0x66dc>
   186cc:	ldrh	r0, [r6, #56]	; 0x38
   186d0:	cmp	r0, #4
   186d4:	beq	185a4 <__assert_fail@plt+0x66dc>
   186d8:	mov	r0, #7
   186dc:	b	185a0 <__assert_fail@plt+0x66d8>
   186e0:	ldr	r0, [r4, #32]
   186e4:	movw	r1, #31000	; 0x7918
   186e8:	movt	r1, #3
   186ec:	bl	1d1d8 <__assert_fail@plt+0xb310>
   186f0:	cmn	r0, #1
   186f4:	str	r0, [r6, #36]	; 0x24
   186f8:	ble	187b4 <__assert_fail@plt+0x68ec>
   186fc:	ldrh	r0, [r6, #58]	; 0x3a
   18700:	mov	r5, r6
   18704:	orr	r0, r0, #2
   18708:	strh	r0, [r6, #58]	; 0x3a
   1870c:	b	1899c <__assert_fail@plt+0x6ad4>
   18710:	ldrb	r0, [r4, #49]	; 0x31
   18714:	tst	r0, #32
   18718:	bne	18a98 <__assert_fail@plt+0x6bd0>
   1871c:	ldr	r5, [r6, #4]
   18720:	mov	r0, r6
   18724:	str	r5, [r4]
   18728:	bl	176c0 <__assert_fail@plt+0x57f8>
   1872c:	ldr	r0, [r5, #48]	; 0x30
   18730:	cmn	r0, #1
   18734:	beq	18798 <__assert_fail@plt+0x68d0>
   18738:	ldrh	r0, [r5, #56]	; 0x38
   1873c:	cmp	r0, #11
   18740:	beq	18aa4 <__assert_fail@plt+0x6bdc>
   18744:	ldr	r0, [r5, #40]	; 0x28
   18748:	ldr	r1, [r4, #24]
   1874c:	mov	r2, #0
   18750:	strb	r2, [r1, r0]
   18754:	ldr	r0, [r5, #48]	; 0x30
   18758:	cmp	r0, #0
   1875c:	beq	188a8 <__assert_fail@plt+0x69e0>
   18760:	ldrh	r0, [r5, #58]	; 0x3a
   18764:	tst	r0, #2
   18768:	bne	188d4 <__assert_fail@plt+0x6a0c>
   1876c:	tst	r0, #1
   18770:	bne	18a5c <__assert_fail@plt+0x6b94>
   18774:	ldr	r1, [r5, #4]
   18778:	movw	r3, #30999	; 0x7917
   1877c:	mov	r0, r4
   18780:	mvn	r2, #0
   18784:	movt	r3, #3
   18788:	bl	18b84 <__assert_fail@plt+0x6cbc>
   1878c:	cmp	r0, #0
   18790:	bne	188b8 <__assert_fail@plt+0x69f0>
   18794:	b	18a5c <__assert_fail@plt+0x6b94>
   18798:	mov	r0, r5
   1879c:	bl	176c0 <__assert_fail@plt+0x57f8>
   187a0:	bl	11cdc <__errno_location@plt>
   187a4:	mov	r5, #0
   187a8:	str	r5, [r0]
   187ac:	str	r5, [r4]
   187b0:	b	18a98 <__assert_fail@plt+0x6bd0>
   187b4:	bl	11cdc <__errno_location@plt>
   187b8:	ldr	r0, [r0]
   187bc:	mov	r1, #7
   187c0:	mov	r5, r6
   187c4:	strh	r1, [r6, #56]	; 0x38
   187c8:	str	r0, [r6, #32]
   187cc:	b	1899c <__assert_fail@plt+0x6ad4>
   187d0:	ldr	r0, [r4, #56]	; 0x38
   187d4:	bl	176c0 <__assert_fail@plt+0x57f8>
   187d8:	ldr	r1, [r5, #52]	; 0x34
   187dc:	add	r6, r5, #168	; 0xa8
   187e0:	str	r1, [r5, #40]	; 0x28
   187e4:	add	r2, r1, #1
   187e8:	mov	r1, r6
   187ec:	ldr	r0, [r4, #24]
   187f0:	bl	11a78 <memmove@plt>
   187f4:	mov	r0, r6
   187f8:	mov	r1, #47	; 0x2f
   187fc:	bl	11d9c <strrchr@plt>
   18800:	cmp	r0, #0
   18804:	beq	18840 <__assert_fail@plt+0x6978>
   18808:	cmp	r0, r6
   1880c:	bne	1881c <__assert_fail@plt+0x6954>
   18810:	ldrb	r1, [r5, #169]	; 0xa9
   18814:	cmp	r1, #0
   18818:	beq	18840 <__assert_fail@plt+0x6978>
   1881c:	add	r7, r0, #1
   18820:	mov	r0, r7
   18824:	bl	11cac <strlen@plt>
   18828:	mov	r8, r0
   1882c:	add	r2, r0, #1
   18830:	mov	r0, r6
   18834:	mov	r1, r7
   18838:	bl	11a78 <memmove@plt>
   1883c:	str	r8, [r5, #52]	; 0x34
   18840:	ldr	r0, [r4, #24]
   18844:	movw	r1, #258	; 0x102
   18848:	str	r0, [r5, #24]
   1884c:	str	r0, [r5, #28]
   18850:	ldrh	r0, [r4, #48]	; 0x30
   18854:	tst	r0, r1
   18858:	beq	1888c <__assert_fail@plt+0x69c4>
   1885c:	movw	r0, #30400	; 0x76c0
   18860:	movw	r2, #39900	; 0x9bdc
   18864:	movw	r3, #39932	; 0x9bfc
   18868:	mov	r1, #0
   1886c:	movt	r0, #1
   18870:	movt	r2, #1
   18874:	movt	r3, #1
   18878:	str	r0, [sp]
   1887c:	mov	r0, #31
   18880:	bl	1a28c <__assert_fail@plt+0x83c4>
   18884:	str	r0, [r4, #56]	; 0x38
   18888:	b	1899c <__assert_fail@plt+0x6ad4>
   1888c:	mov	r0, #32
   18890:	bl	34810 <__assert_fail@plt+0x22948>
   18894:	cmp	r0, #0
   18898:	str	r0, [r4, #56]	; 0x38
   1889c:	beq	1899c <__assert_fail@plt+0x6ad4>
   188a0:	bl	353e8 <__assert_fail@plt+0x23520>
   188a4:	b	1899c <__assert_fail@plt+0x6ad4>
   188a8:	mov	r0, r4
   188ac:	bl	19874 <__assert_fail@plt+0x79ac>
   188b0:	cmp	r0, #0
   188b4:	beq	18a5c <__assert_fail@plt+0x6b94>
   188b8:	bl	11cdc <__errno_location@plt>
   188bc:	ldr	r0, [r0]
   188c0:	str	r0, [r5, #32]
   188c4:	ldr	r0, [r4, #48]	; 0x30
   188c8:	orr	r0, r0, #8192	; 0x2000
   188cc:	str	r0, [r4, #48]	; 0x30
   188d0:	b	18a5c <__assert_fail@plt+0x6b94>
   188d4:	ldr	r0, [r4, #48]	; 0x30
   188d8:	tst	r0, #4
   188dc:	bne	18a54 <__assert_fail@plt+0x6b8c>
   188e0:	ldr	r6, [r5, #36]	; 0x24
   188e4:	tst	r0, #512	; 0x200
   188e8:	bne	18a28 <__assert_fail@plt+0x6b60>
   188ec:	mov	r0, r6
   188f0:	bl	11e08 <fchdir@plt>
   188f4:	cmp	r0, #0
   188f8:	beq	18a54 <__assert_fail@plt+0x6b8c>
   188fc:	bl	11cdc <__errno_location@plt>
   18900:	ldr	r0, [r0]
   18904:	str	r0, [r5, #32]
   18908:	ldr	r0, [r4, #48]	; 0x30
   1890c:	orr	r0, r0, #8192	; 0x2000
   18910:	str	r0, [r4, #48]	; 0x30
   18914:	b	18a54 <__assert_fail@plt+0x6b8c>
   18918:	ldr	r0, [r4, #32]
   1891c:	movw	r1, #31000	; 0x7918
   18920:	movt	r1, #3
   18924:	bl	1d1d8 <__assert_fail@plt+0xb310>
   18928:	cmn	r0, #1
   1892c:	str	r0, [r5, #36]	; 0x24
   18930:	ble	18944 <__assert_fail@plt+0x6a7c>
   18934:	ldrh	r0, [r5, #58]	; 0x3a
   18938:	orr	r0, r0, #2
   1893c:	strh	r0, [r5, #58]	; 0x3a
   18940:	b	18958 <__assert_fail@plt+0x6a90>
   18944:	bl	11cdc <__errno_location@plt>
   18948:	ldr	r0, [r0]
   1894c:	mov	r1, #7
   18950:	strh	r1, [r5, #56]	; 0x38
   18954:	str	r0, [r5, #32]
   18958:	mov	r0, #3
   1895c:	strh	r0, [r5, #60]	; 0x3c
   18960:	ldr	r0, [r5, #4]
   18964:	ldr	r1, [r0, #28]
   18968:	ldr	r0, [r0, #40]	; 0x28
   1896c:	sub	r2, r0, #1
   18970:	ldrb	r1, [r1, r2]
   18974:	cmp	r1, #47	; 0x2f
   18978:	ldr	r1, [r4, #24]
   1897c:	moveq	r0, r2
   18980:	mov	r2, #47	; 0x2f
   18984:	strb	r2, [r1, r0]!
   18988:	ldr	r2, [r5, #52]	; 0x34
   1898c:	add	r0, r1, #1
   18990:	add	r1, r5, #168	; 0xa8
   18994:	add	r2, r2, #1
   18998:	bl	11a78 <memmove@plt>
   1899c:	str	r5, [r4]
   189a0:	ldrh	r0, [r5, #56]	; 0x38
   189a4:	cmp	r0, #11
   189a8:	bne	189e0 <__assert_fail@plt+0x6b18>
   189ac:	add	r0, r5, #112	; 0x70
   189b0:	ldrd	r0, [r0]
   189b4:	eor	r2, r0, #1
   189b8:	orrs	r2, r2, r1
   189bc:	beq	18a98 <__assert_fail@plt+0x6bd0>
   189c0:	eor	r0, r0, #2
   189c4:	orrs	r0, r0, r1
   189c8:	bne	18aa4 <__assert_fail@plt+0x6bdc>
   189cc:	mov	r0, r4
   189d0:	mov	r1, r5
   189d4:	mov	r2, #0
   189d8:	bl	17ed0 <__assert_fail@plt+0x6008>
   189dc:	strh	r0, [r5, #56]	; 0x38
   189e0:	cmp	r0, #1
   189e4:	bne	18a98 <__assert_fail@plt+0x6bd0>
   189e8:	ldr	r0, [r5, #48]	; 0x30
   189ec:	cmp	r0, #0
   189f0:	bne	18a00 <__assert_fail@plt+0x6b38>
   189f4:	add	r0, r5, #64	; 0x40
   189f8:	ldrd	r0, [r0]
   189fc:	strd	r0, [r4, #16]
   18a00:	mov	r0, r4
   18a04:	mov	r1, r5
   18a08:	bl	19904 <__assert_fail@plt+0x7a3c>
   18a0c:	cmp	r0, #0
   18a10:	bne	18a98 <__assert_fail@plt+0x6bd0>
   18a14:	bl	11cdc <__errno_location@plt>
   18a18:	mov	r1, #12
   18a1c:	mov	r5, #0
   18a20:	str	r1, [r0]
   18a24:	b	18a98 <__assert_fail@plt+0x6bd0>
   18a28:	ldr	r1, [r4, #32]
   18a2c:	cmp	r1, r6
   18a30:	bne	18a3c <__assert_fail@plt+0x6b74>
   18a34:	cmn	r1, #100	; 0x64
   18a38:	bne	18aa4 <__assert_fail@plt+0x6bdc>
   18a3c:	add	r0, r4, #60	; 0x3c
   18a40:	bl	1bdac <__assert_fail@plt+0x9ee4>
   18a44:	cmp	r0, #0
   18a48:	bmi	18a50 <__assert_fail@plt+0x6b88>
   18a4c:	bl	11ea4 <close@plt>
   18a50:	str	r6, [r4, #32]
   18a54:	ldr	r0, [r5, #36]	; 0x24
   18a58:	bl	11ea4 <close@plt>
   18a5c:	ldrh	r0, [r5, #56]	; 0x38
   18a60:	cmp	r0, #2
   18a64:	beq	18a8c <__assert_fail@plt+0x6bc4>
   18a68:	ldr	r0, [r5, #32]
   18a6c:	mov	r1, #7
   18a70:	cmp	r0, #0
   18a74:	movweq	r1, #6
   18a78:	strh	r1, [r5, #56]	; 0x38
   18a7c:	bne	18a8c <__assert_fail@plt+0x6bc4>
   18a80:	mov	r0, r4
   18a84:	mov	r1, r5
   18a88:	bl	18aa8 <__assert_fail@plt+0x6be0>
   18a8c:	ldrb	r0, [r4, #49]	; 0x31
   18a90:	tst	r0, #32
   18a94:	movne	r5, #0
   18a98:	mov	r0, r5
   18a9c:	sub	sp, fp, #24
   18aa0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18aa4:	bl	11e8c <abort@plt>
   18aa8:	push	{r4, r5, r7, sl, fp, lr}
   18aac:	add	fp, sp, #16
   18ab0:	sub	sp, sp, #24
   18ab4:	ldrh	r2, [r0, #48]	; 0x30
   18ab8:	movw	r3, #258	; 0x102
   18abc:	add	lr, r1, #64	; 0x40
   18ac0:	add	r4, r1, #160	; 0xa0
   18ac4:	tst	r2, r3
   18ac8:	beq	18b00 <__assert_fail@plt+0x6c38>
   18acc:	ldrd	r2, [lr]
   18ad0:	mov	r1, sp
   18ad4:	stm	sp, {r2, r3}
   18ad8:	ldrd	r2, [r4]
   18adc:	str	r3, [sp, #12]
   18ae0:	str	r2, [sp, #8]
   18ae4:	ldr	r0, [r0, #56]	; 0x38
   18ae8:	bl	1ae20 <__assert_fail@plt+0x8f58>
   18aec:	cmp	r0, #0
   18af0:	beq	18b80 <__assert_fail@plt+0x6cb8>
   18af4:	bl	176c0 <__assert_fail@plt+0x57f8>
   18af8:	sub	sp, fp, #16
   18afc:	pop	{r4, r5, r7, sl, fp, pc}
   18b00:	ldr	r1, [r1, #4]
   18b04:	cmp	r1, #0
   18b08:	beq	18b78 <__assert_fail@plt+0x6cb0>
   18b0c:	ldr	r2, [r1, #48]	; 0x30
   18b10:	cmp	r2, #0
   18b14:	bmi	18b78 <__assert_fail@plt+0x6cb0>
   18b18:	ldr	ip, [r0, #56]	; 0x38
   18b1c:	ldrd	r2, [ip, #16]
   18b20:	orrs	r2, r2, r3
   18b24:	beq	18b80 <__assert_fail@plt+0x6cb8>
   18b28:	ldrd	r2, [r4]
   18b2c:	ldrd	r4, [ip]
   18b30:	eor	r3, r5, r3
   18b34:	eor	r2, r4, r2
   18b38:	orrs	r2, r2, r3
   18b3c:	bne	18b78 <__assert_fail@plt+0x6cb0>
   18b40:	add	r3, ip, #8
   18b44:	ldm	lr, {r2, r5}
   18b48:	ldm	r3, {r4, r7}
   18b4c:	eor	r7, r7, r5
   18b50:	eor	r2, r4, r2
   18b54:	orrs	r2, r2, r7
   18b58:	bne	18b78 <__assert_fail@plt+0x6cb0>
   18b5c:	add	r2, r1, #64	; 0x40
   18b60:	add	r1, r1, #160	; 0xa0
   18b64:	ldm	r2, {r2, r5}
   18b68:	stm	r3, {r2, r5}
   18b6c:	ldr	r0, [r0, #56]	; 0x38
   18b70:	ldrd	r2, [r1]
   18b74:	strd	r2, [r0]
   18b78:	sub	sp, fp, #16
   18b7c:	pop	{r4, r5, r7, sl, fp, pc}
   18b80:	bl	11e8c <abort@plt>
   18b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b88:	add	fp, sp, #28
   18b8c:	sub	sp, sp, #108	; 0x6c
   18b90:	mov	r7, r3
   18b94:	mov	r4, r2
   18b98:	mov	r8, r1
   18b9c:	mov	sl, r0
   18ba0:	cmp	r3, #0
   18ba4:	beq	18bc8 <__assert_fail@plt+0x6d00>
   18ba8:	movw	r1, #30999	; 0x7917
   18bac:	mov	r0, r7
   18bb0:	movt	r1, #3
   18bb4:	bl	11a3c <strcmp@plt>
   18bb8:	cmp	r0, #0
   18bbc:	mov	r6, r0
   18bc0:	movwne	r6, #1
   18bc4:	b	18bcc <__assert_fail@plt+0x6d04>
   18bc8:	mov	r6, #1
   18bcc:	ldr	r0, [sl, #48]	; 0x30
   18bd0:	tst	r0, #4
   18bd4:	bne	18c2c <__assert_fail@plt+0x6d64>
   18bd8:	cmn	r4, #1
   18bdc:	mov	r1, #0
   18be0:	mov	r9, #0
   18be4:	movwgt	r1, #1
   18be8:	orrs	r1, r1, r6
   18bec:	bne	18c4c <__assert_fail@plt+0x6d84>
   18bf0:	ands	r0, r0, #512	; 0x200
   18bf4:	beq	18c4c <__assert_fail@plt+0x6d84>
   18bf8:	add	r4, sl, #60	; 0x3c
   18bfc:	mov	r0, r4
   18c00:	bl	1bda4 <__assert_fail@plt+0x9edc>
   18c04:	cmp	r0, #0
   18c08:	bne	18c54 <__assert_fail@plt+0x6d8c>
   18c0c:	mov	r0, r4
   18c10:	bl	1bdf8 <__assert_fail@plt+0x9f30>
   18c14:	cmn	r0, #1
   18c18:	ble	18c54 <__assert_fail@plt+0x6d8c>
   18c1c:	mov	r4, r0
   18c20:	mov	r9, #0
   18c24:	mov	r7, #0
   18c28:	b	18c9c <__assert_fail@plt+0x6dd4>
   18c2c:	mov	r5, #0
   18c30:	cmp	r4, #0
   18c34:	bmi	18dd4 <__assert_fail@plt+0x6f0c>
   18c38:	ands	r0, r0, #512	; 0x200
   18c3c:	beq	18dd4 <__assert_fail@plt+0x6f0c>
   18c40:	mov	r0, r4
   18c44:	bl	11ea4 <close@plt>
   18c48:	b	18dd4 <__assert_fail@plt+0x6f0c>
   18c4c:	cmn	r4, #1
   18c50:	bgt	18c9c <__assert_fail@plt+0x6dd4>
   18c54:	ldr	r0, [sl, #48]	; 0x30
   18c58:	mov	r1, #32768	; 0x8000
   18c5c:	and	r1, r1, r0, lsl #11
   18c60:	tst	r0, #512	; 0x200
   18c64:	orr	r1, r1, #18688	; 0x4900
   18c68:	orr	r2, r1, #524288	; 0x80000
   18c6c:	bne	18c80 <__assert_fail@plt+0x6db8>
   18c70:	mov	r0, r7
   18c74:	mov	r1, r2
   18c78:	bl	3577c <__assert_fail@plt+0x238b4>
   18c7c:	b	18c8c <__assert_fail@plt+0x6dc4>
   18c80:	ldr	r0, [sl, #32]
   18c84:	mov	r1, r7
   18c88:	bl	1d1d8 <__assert_fail@plt+0xb310>
   18c8c:	mov	r4, r0
   18c90:	mov	r9, #1
   18c94:	cmp	r0, #0
   18c98:	bmi	18d78 <__assert_fail@plt+0x6eb0>
   18c9c:	ldr	r5, [sl, #48]	; 0x30
   18ca0:	tst	r5, #2
   18ca4:	bne	18ce8 <__assert_fail@plt+0x6e20>
   18ca8:	cmp	r7, #0
   18cac:	beq	18cc8 <__assert_fail@plt+0x6e00>
   18cb0:	movw	r1, #30999	; 0x7917
   18cb4:	mov	r0, r7
   18cb8:	movt	r1, #3
   18cbc:	bl	11a3c <strcmp@plt>
   18cc0:	cmp	r0, #0
   18cc4:	beq	18ce8 <__assert_fail@plt+0x6e20>
   18cc8:	tst	r5, #512	; 0x200
   18ccc:	bne	18d48 <__assert_fail@plt+0x6e80>
   18cd0:	mov	r0, r4
   18cd4:	bl	11e08 <fchdir@plt>
   18cd8:	mov	r5, r0
   18cdc:	cmp	r9, #0
   18ce0:	bne	18d98 <__assert_fail@plt+0x6ed0>
   18ce4:	b	18dd4 <__assert_fail@plt+0x6f0c>
   18ce8:	mov	r2, sp
   18cec:	mov	r0, #3
   18cf0:	mov	r1, r4
   18cf4:	bl	11b74 <__fxstat64@plt>
   18cf8:	cmp	r0, #0
   18cfc:	bne	18d8c <__assert_fail@plt+0x6ec4>
   18d00:	add	r0, r8, #64	; 0x40
   18d04:	ldm	sp, {r2, r3}
   18d08:	ldrd	r0, [r0]
   18d0c:	eor	r1, r1, r3
   18d10:	eor	r0, r0, r2
   18d14:	orrs	r0, r0, r1
   18d18:	bne	18d80 <__assert_fail@plt+0x6eb8>
   18d1c:	add	r0, r8, #160	; 0xa0
   18d20:	ldr	r2, [sp, #96]	; 0x60
   18d24:	ldr	r3, [sp, #100]	; 0x64
   18d28:	ldrd	r0, [r0]
   18d2c:	eor	r1, r1, r3
   18d30:	eor	r0, r0, r2
   18d34:	orrs	r0, r0, r1
   18d38:	bne	18d80 <__assert_fail@plt+0x6eb8>
   18d3c:	ldr	r5, [sl, #48]	; 0x30
   18d40:	tst	r5, #512	; 0x200
   18d44:	beq	18cd0 <__assert_fail@plt+0x6e08>
   18d48:	ldr	r1, [sl, #32]
   18d4c:	cmp	r1, r4
   18d50:	bne	18d5c <__assert_fail@plt+0x6e94>
   18d54:	cmn	r1, #100	; 0x64
   18d58:	bne	18de0 <__assert_fail@plt+0x6f18>
   18d5c:	cmp	r6, #0
   18d60:	beq	18db4 <__assert_fail@plt+0x6eec>
   18d64:	add	r0, sl, #60	; 0x3c
   18d68:	bl	1bdac <__assert_fail@plt+0x9ee4>
   18d6c:	cmp	r0, #0
   18d70:	bpl	18dc8 <__assert_fail@plt+0x6f00>
   18d74:	b	18dcc <__assert_fail@plt+0x6f04>
   18d78:	mvn	r5, #0
   18d7c:	b	18dd4 <__assert_fail@plt+0x6f0c>
   18d80:	bl	11cdc <__errno_location@plt>
   18d84:	mov	r1, #2
   18d88:	str	r1, [r0]
   18d8c:	mvn	r5, #0
   18d90:	cmp	r9, #0
   18d94:	beq	18dd4 <__assert_fail@plt+0x6f0c>
   18d98:	bl	11cdc <__errno_location@plt>
   18d9c:	ldr	r7, [r0]
   18da0:	mov	r6, r0
   18da4:	mov	r0, r4
   18da8:	bl	11ea4 <close@plt>
   18dac:	str	r7, [r6]
   18db0:	b	18dd4 <__assert_fail@plt+0x6f0c>
   18db4:	tst	r5, #4
   18db8:	bne	18dcc <__assert_fail@plt+0x6f04>
   18dbc:	cmp	r1, #0
   18dc0:	bmi	18dcc <__assert_fail@plt+0x6f04>
   18dc4:	mov	r0, r1
   18dc8:	bl	11ea4 <close@plt>
   18dcc:	str	r4, [sl, #32]
   18dd0:	mov	r5, #0
   18dd4:	mov	r0, r5
   18dd8:	sub	sp, fp, #28
   18ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de0:	bl	11e8c <abort@plt>
   18de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18de8:	add	fp, sp, #28
   18dec:	sub	sp, sp, #68	; 0x44
   18df0:	ldr	sl, [r0]
   18df4:	mov	r7, r1
   18df8:	mov	r5, r0
   18dfc:	str	r0, [sp, #48]	; 0x30
   18e00:	ldr	r4, [sl, #12]
   18e04:	cmp	r4, #0
   18e08:	beq	18e50 <__assert_fail@plt+0x6f88>
   18e0c:	mov	r0, r4
   18e10:	bl	11dfc <dirfd@plt>
   18e14:	cmn	r0, #1
   18e18:	str	r0, [fp, #-32]	; 0xffffffe0
   18e1c:	ble	18e84 <__assert_fail@plt+0x6fbc>
   18e20:	mov	r1, r5
   18e24:	str	r4, [sp, #12]
   18e28:	str	r7, [sp, #4]
   18e2c:	mov	ip, #0
   18e30:	ldr	r0, [r1, #44]!	; 0x2c
   18e34:	str	r1, [sp, #20]
   18e38:	mvn	r1, #0
   18e3c:	cmp	r0, #0
   18e40:	movweq	r1, #34464	; 0x86a0
   18e44:	movteq	r1, #1
   18e48:	str	r1, [sp, #32]
   18e4c:	b	190d4 <__assert_fail@plt+0x720c>
   18e50:	ldr	r3, [r5, #48]	; 0x30
   18e54:	mvn	r0, #99	; 0x63
   18e58:	mov	r2, #0
   18e5c:	and	r1, r3, #516	; 0x204
   18e60:	cmp	r1, #512	; 0x200
   18e64:	ldr	r1, [sl, #24]
   18e68:	ldreq	r0, [r5, #32]
   18e6c:	tst	r3, #16
   18e70:	beq	18eac <__assert_fail@plt+0x6fe4>
   18e74:	tst	r3, #1
   18e78:	bne	18ea0 <__assert_fail@plt+0x6fd8>
   18e7c:	mov	r2, #32768	; 0x8000
   18e80:	b	18eac <__assert_fail@plt+0x6fe4>
   18e84:	ldr	r0, [sl, #12]
   18e88:	bl	11ebc <closedir@plt>
   18e8c:	mov	r6, #0
   18e90:	str	r6, [sl, #12]
   18e94:	cmp	r7, #3
   18e98:	beq	18ef0 <__assert_fail@plt+0x7028>
   18e9c:	b	19868 <__assert_fail@plt+0x79a0>
   18ea0:	ldr	r3, [sl, #48]	; 0x30
   18ea4:	cmp	r3, #0
   18ea8:	movne	r2, #32768	; 0x8000
   18eac:	sub	r3, fp, #32
   18eb0:	bl	1d210 <__assert_fail@plt+0xb348>
   18eb4:	cmp	r0, #0
   18eb8:	str	r0, [sl, #12]
   18ebc:	beq	18ee4 <__assert_fail@plt+0x701c>
   18ec0:	ldrh	r0, [sl, #56]	; 0x38
   18ec4:	cmp	r0, #11
   18ec8:	bne	18f08 <__assert_fail@plt+0x7040>
   18ecc:	mov	r0, r5
   18ed0:	mov	r1, sl
   18ed4:	mov	r2, #0
   18ed8:	bl	17ed0 <__assert_fail@plt+0x6008>
   18edc:	strh	r0, [sl, #56]	; 0x38
   18ee0:	b	18f48 <__assert_fail@plt+0x7080>
   18ee4:	mov	r6, #0
   18ee8:	cmp	r7, #3
   18eec:	bne	19868 <__assert_fail@plt+0x79a0>
   18ef0:	mov	r0, #4
   18ef4:	strh	r0, [sl, #56]	; 0x38
   18ef8:	bl	11cdc <__errno_location@plt>
   18efc:	ldr	r0, [r0]
   18f00:	str	r0, [sl, #32]
   18f04:	b	19868 <__assert_fail@plt+0x79a0>
   18f08:	ldrb	r0, [r5, #49]	; 0x31
   18f0c:	tst	r0, #1
   18f10:	beq	18f48 <__assert_fail@plt+0x7080>
   18f14:	mov	r0, r5
   18f18:	mov	r1, sl
   18f1c:	bl	18aa8 <__assert_fail@plt+0x6be0>
   18f20:	mov	r0, r5
   18f24:	mov	r1, sl
   18f28:	mov	r2, #0
   18f2c:	mov	r6, #0
   18f30:	bl	17ed0 <__assert_fail@plt+0x6008>
   18f34:	mov	r0, r5
   18f38:	mov	r1, sl
   18f3c:	bl	19904 <__assert_fail@plt+0x7a3c>
   18f40:	cmp	r0, #0
   18f44:	beq	18fec <__assert_fail@plt+0x7124>
   18f48:	mov	r1, r5
   18f4c:	str	r7, [sp, #4]
   18f50:	str	r4, [sp, #12]
   18f54:	ldr	r0, [r1, #44]!	; 0x2c
   18f58:	str	r1, [sp, #20]
   18f5c:	mvn	r1, #0
   18f60:	cmp	r0, #0
   18f64:	movweq	r1, #34464	; 0x86a0
   18f68:	movteq	r1, #1
   18f6c:	cmp	r7, #2
   18f70:	str	r1, [sp, #32]
   18f74:	bne	18f90 <__assert_fail@plt+0x70c8>
   18f78:	mov	ip, #1
   18f7c:	cmp	r7, #3
   18f80:	bne	190d4 <__assert_fail@plt+0x720c>
   18f84:	sub	r0, r7, #3
   18f88:	mov	r5, #0
   18f8c:	b	19018 <__assert_fail@plt+0x7150>
   18f90:	ldr	r0, [r5, #48]	; 0x30
   18f94:	and	r0, r0, #56	; 0x38
   18f98:	cmp	r0, #24
   18f9c:	bne	19010 <__assert_fail@plt+0x7148>
   18fa0:	ldr	r0, [sl, #84]	; 0x54
   18fa4:	cmp	r0, #2
   18fa8:	bne	19010 <__assert_fail@plt+0x7148>
   18fac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18fb0:	mov	r0, sl
   18fb4:	bl	19c7c <__assert_fail@plt+0x7db4>
   18fb8:	movw	r1, #26984	; 0x6968
   18fbc:	cmp	r0, r1
   18fc0:	ble	18ffc <__assert_fail@plt+0x7134>
   18fc4:	movw	r1, #26985	; 0x6969
   18fc8:	cmp	r0, r1
   18fcc:	movwne	r1, #16719	; 0x414f
   18fd0:	movtne	r1, #21318	; 0x5346
   18fd4:	cmpne	r0, r1
   18fd8:	beq	19010 <__assert_fail@plt+0x7148>
   18fdc:	movw	r1, #40864	; 0x9fa0
   18fe0:	cmp	r0, r1
   18fe4:	beq	19010 <__assert_fail@plt+0x7148>
   18fe8:	b	18f78 <__assert_fail@plt+0x70b0>
   18fec:	bl	11cdc <__errno_location@plt>
   18ff0:	mov	r1, #12
   18ff4:	str	r1, [r0]
   18ff8:	b	19868 <__assert_fail@plt+0x79a0>
   18ffc:	movw	r1, #19778	; 0x4d42
   19000:	movt	r1, #65363	; 0xff53
   19004:	cmp	r0, r1
   19008:	cmpne	r0, #0
   1900c:	bne	18f78 <__assert_fail@plt+0x70b0>
   19010:	sub	r0, r7, #3
   19014:	mov	r5, #1
   19018:	clz	r0, r0
   1901c:	lsr	r6, r0, #5
   19020:	ldr	r0, [sp, #48]	; 0x30
   19024:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19028:	ldrb	r0, [r0, #49]	; 0x31
   1902c:	tst	r0, #2
   19030:	beq	1904c <__assert_fail@plt+0x7184>
   19034:	mov	r0, r2
   19038:	movw	r1, #1030	; 0x406
   1903c:	mov	r2, #3
   19040:	bl	3559c <__assert_fail@plt+0x236d4>
   19044:	mov	r2, r0
   19048:	str	r0, [fp, #-32]	; 0xffffffe0
   1904c:	cmp	r2, #0
   19050:	bmi	1906c <__assert_fail@plt+0x71a4>
   19054:	ldr	r0, [sp, #48]	; 0x30
   19058:	mov	r1, sl
   1905c:	mov	r3, #0
   19060:	bl	18b84 <__assert_fail@plt+0x6cbc>
   19064:	cmp	r0, #0
   19068:	beq	190cc <__assert_fail@plt+0x7204>
   1906c:	and	r0, r6, r5
   19070:	cmp	r0, #1
   19074:	bne	19084 <__assert_fail@plt+0x71bc>
   19078:	bl	11cdc <__errno_location@plt>
   1907c:	ldr	r0, [r0]
   19080:	str	r0, [sl, #32]
   19084:	ldrh	r0, [sl, #58]	; 0x3a
   19088:	orr	r0, r0, #1
   1908c:	strh	r0, [sl, #58]	; 0x3a
   19090:	ldr	r0, [sl, #12]
   19094:	bl	11ebc <closedir@plt>
   19098:	ldr	r5, [sp, #48]	; 0x30
   1909c:	mov	r4, #0
   190a0:	str	r4, [sl, #12]
   190a4:	ldrb	r0, [r5, #49]	; 0x31
   190a8:	tst	r0, #2
   190ac:	beq	190c0 <__assert_fail@plt+0x71f8>
   190b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   190b4:	cmp	r0, #0
   190b8:	bmi	190c0 <__assert_fail@plt+0x71f8>
   190bc:	bl	11ea4 <close@plt>
   190c0:	mov	ip, #1
   190c4:	str	r4, [sl, #12]
   190c8:	b	190d4 <__assert_fail@plt+0x720c>
   190cc:	ldr	r5, [sp, #48]	; 0x30
   190d0:	mov	ip, #0
   190d4:	ldr	r0, [sl, #40]	; 0x28
   190d8:	ldr	r1, [sl, #28]
   190dc:	mov	r9, #0
   190e0:	sub	r2, r0, #1
   190e4:	ldrb	r1, [r1, r2]
   190e8:	cmp	r1, #47	; 0x2f
   190ec:	ldrb	r1, [r5, #48]	; 0x30
   190f0:	moveq	r0, r2
   190f4:	tst	r1, #4
   190f8:	mov	r1, #0
   190fc:	str	r1, [sp, #40]	; 0x28
   19100:	beq	19118 <__assert_fail@plt+0x7250>
   19104:	ldr	r1, [r5, #24]
   19108:	mov	r2, #47	; 0x2f
   1910c:	strb	r2, [r1, r0]!
   19110:	add	r1, r1, #1
   19114:	str	r1, [sp, #40]	; 0x28
   19118:	ldr	r6, [sl, #12]
   1911c:	add	r1, r0, #1
   19120:	str	r1, [fp, #-44]	; 0xffffffd4
   19124:	cmp	r6, #0
   19128:	beq	19488 <__assert_fail@plt+0x75c0>
   1912c:	ldr	r0, [sl, #48]	; 0x30
   19130:	str	ip, [sp]
   19134:	mov	r4, #0
   19138:	add	r0, r0, #1
   1913c:	str	r0, [sp, #24]
   19140:	ldr	r0, [r5, #36]	; 0x24
   19144:	sub	r0, r0, r1
   19148:	str	r0, [fp, #-36]	; 0xffffffdc
   1914c:	bl	11cdc <__errno_location@plt>
   19150:	str	r0, [sp, #36]	; 0x24
   19154:	mov	r0, #0
   19158:	mov	r9, #0
   1915c:	mov	r7, #0
   19160:	str	sl, [sp, #28]
   19164:	str	r0, [sp, #44]	; 0x2c
   19168:	mov	r0, #0
   1916c:	str	r0, [sp, #8]
   19170:	mov	r0, #0
   19174:	str	r0, [sp, #16]
   19178:	ldr	r0, [sp, #36]	; 0x24
   1917c:	str	r4, [r0]
   19180:	mov	r0, r6
   19184:	bl	11dd8 <readdir64@plt>
   19188:	cmp	r0, #0
   1918c:	beq	19494 <__assert_fail@plt+0x75cc>
   19190:	mov	r8, r0
   19194:	ldrb	r0, [r5, #48]	; 0x30
   19198:	tst	r0, #32
   1919c:	bne	191cc <__assert_fail@plt+0x7304>
   191a0:	ldrb	r0, [r8, #19]
   191a4:	cmp	r0, #46	; 0x2e
   191a8:	bne	191cc <__assert_fail@plt+0x7304>
   191ac:	ldrb	r0, [r8, #20]
   191b0:	cmp	r0, #0
   191b4:	beq	19464 <__assert_fail@plt+0x759c>
   191b8:	cmp	r0, #46	; 0x2e
   191bc:	bne	191cc <__assert_fail@plt+0x7304>
   191c0:	ldrb	r0, [r8, #21]
   191c4:	cmp	r0, #0
   191c8:	beq	19464 <__assert_fail@plt+0x759c>
   191cc:	add	r4, r8, #19
   191d0:	mov	r0, r4
   191d4:	bl	11cac <strlen@plt>
   191d8:	mov	r5, r0
   191dc:	add	r0, r0, #176	; 0xb0
   191e0:	bic	r0, r0, #7
   191e4:	bl	34810 <__assert_fail@plt+0x22948>
   191e8:	mov	r6, r0
   191ec:	cmp	r0, #0
   191f0:	beq	197f0 <__assert_fail@plt+0x7928>
   191f4:	add	sl, r6, #168	; 0xa8
   191f8:	mov	r1, r4
   191fc:	mov	r2, r5
   19200:	str	r7, [fp, #-40]	; 0xffffffd8
   19204:	mov	r0, sl
   19208:	bl	11ab4 <memcpy@plt>
   1920c:	ldr	r2, [sp, #48]	; 0x30
   19210:	mov	r0, #0
   19214:	mov	r1, #196608	; 0x30000
   19218:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1921c:	strb	r0, [sl, r5]
   19220:	str	r5, [r6, #52]	; 0x34
   19224:	str	r2, [r6, #44]	; 0x2c
   19228:	add	r7, r5, r3
   1922c:	ldr	r4, [r2, #24]
   19230:	str	r0, [r6, #12]
   19234:	str	r0, [r6, #16]
   19238:	str	r0, [r6, #20]
   1923c:	str	r1, [r6, #58]	; 0x3a
   19240:	str	r4, [r6, #28]
   19244:	str	r0, [r6, #32]
   19248:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1924c:	cmp	r5, r0
   19250:	bcs	19264 <__assert_fail@plt+0x739c>
   19254:	mov	r5, r2
   19258:	cmp	r7, r3
   1925c:	bcs	192d4 <__assert_fail@plt+0x740c>
   19260:	b	196e0 <__assert_fail@plt+0x7818>
   19264:	ldr	r1, [r2, #36]	; 0x24
   19268:	movw	r0, #257	; 0x101
   1926c:	mov	r5, r2
   19270:	add	r0, r7, r0
   19274:	adds	r1, r0, r1
   19278:	bcs	197bc <__assert_fail@plt+0x78f4>
   1927c:	mov	r0, r4
   19280:	str	r1, [r5, #36]	; 0x24
   19284:	bl	34840 <__assert_fail@plt+0x22978>
   19288:	cmp	r0, #0
   1928c:	beq	197dc <__assert_fail@plt+0x7914>
   19290:	cmp	r0, r4
   19294:	str	r0, [r5, #24]
   19298:	beq	192c0 <__assert_fail@plt+0x73f8>
   1929c:	ldrb	r1, [r5, #48]	; 0x30
   192a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   192a4:	tst	r1, #4
   192a8:	ldr	r1, [sp, #40]	; 0x28
   192ac:	addne	r1, r0, r3
   192b0:	mov	r0, #1
   192b4:	str	r1, [sp, #40]	; 0x28
   192b8:	str	r0, [sp, #16]
   192bc:	b	192c4 <__assert_fail@plt+0x73fc>
   192c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   192c4:	ldr	r0, [r5, #36]	; 0x24
   192c8:	sub	r0, r0, r3
   192cc:	cmp	r7, r3
   192d0:	bcc	196e0 <__assert_fail@plt+0x7818>
   192d4:	str	r0, [fp, #-36]	; 0xffffffdc
   192d8:	ldr	r0, [sp, #24]
   192dc:	add	r4, r6, #112	; 0x70
   192e0:	str	r0, [r6, #48]	; 0x30
   192e4:	ldr	r0, [r5]
   192e8:	str	r7, [r6, #40]	; 0x28
   192ec:	str	r0, [r6, #4]
   192f0:	ldrd	r0, [r8]
   192f4:	strd	r0, [r4, #48]	; 0x30
   192f8:	ldrb	r0, [r5, #48]	; 0x30
   192fc:	tst	r0, #4
   19300:	bne	1930c <__assert_fail@plt+0x7444>
   19304:	str	sl, [r6, #24]
   19308:	b	19328 <__assert_fail@plt+0x7460>
   1930c:	ldr	r0, [r6, #28]
   19310:	ldr	r1, [r6, #52]	; 0x34
   19314:	str	r0, [r6, #24]
   19318:	ldr	r0, [sp, #40]	; 0x28
   1931c:	add	r2, r1, #1
   19320:	mov	r1, sl
   19324:	bl	11a78 <memmove@plt>
   19328:	ldr	r0, [r5, #44]	; 0x2c
   1932c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   19330:	ldr	r2, [r5, #48]	; 0x30
   19334:	ldr	sl, [sp, #28]
   19338:	cmp	r0, #0
   1933c:	beq	19360 <__assert_fail@plt+0x7498>
   19340:	ands	r0, r2, #1024	; 0x400
   19344:	bne	19360 <__assert_fail@plt+0x7498>
   19348:	mov	r0, r5
   1934c:	mov	r1, r6
   19350:	mov	r2, #0
   19354:	bl	17ed0 <__assert_fail@plt+0x6008>
   19358:	strh	r0, [r6, #56]	; 0x38
   1935c:	b	193d4 <__assert_fail@plt+0x750c>
   19360:	ldrb	r3, [r8, #18]
   19364:	mov	r0, #0
   19368:	tst	r2, #8
   1936c:	mov	r1, #0
   19370:	beq	19394 <__assert_fail@plt+0x74cc>
   19374:	orr	r1, r3, #4
   19378:	cmp	r1, #4
   1937c:	mov	r1, #0
   19380:	beq	19394 <__assert_fail@plt+0x74cc>
   19384:	eor	r1, r3, #10
   19388:	and	r2, r2, #16
   1938c:	orrs	r1, r2, r1
   19390:	movwne	r1, #1
   19394:	mov	r2, #11
   19398:	strh	r2, [r6, #56]	; 0x38
   1939c:	sub	r2, r3, #1
   193a0:	uxtb	r3, r2
   193a4:	cmp	r3, #11
   193a8:	bhi	193bc <__assert_fail@plt+0x74f4>
   193ac:	sxtb	r0, r2
   193b0:	movw	r2, #31004	; 0x791c
   193b4:	movt	r2, #3
   193b8:	ldr	r0, [r2, r0, lsl #2]
   193bc:	cmp	r1, #0
   193c0:	str	r0, [r6, #80]	; 0x50
   193c4:	mov	r0, #2
   193c8:	mov	r1, #0
   193cc:	movwne	r0, #1
   193d0:	strd	r0, [r4]
   193d4:	mov	r4, #0
   193d8:	cmp	r9, #0
   193dc:	str	r4, [r6, #8]
   193e0:	beq	193f0 <__assert_fail@plt+0x7528>
   193e4:	ldr	r0, [sp, #44]	; 0x2c
   193e8:	str	r6, [r0, #8]
   193ec:	b	193f4 <__assert_fail@plt+0x752c>
   193f0:	mov	r9, r6
   193f4:	movw	r0, #10000	; 0x2710
   193f8:	cmp	r7, r0
   193fc:	bne	19450 <__assert_fail@plt+0x7588>
   19400:	ldr	r0, [sp, #20]
   19404:	ldr	r0, [r0]
   19408:	cmp	r0, #0
   1940c:	bne	19450 <__assert_fail@plt+0x7588>
   19410:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19414:	mov	r0, sl
   19418:	bl	19c7c <__assert_fail@plt+0x7db4>
   1941c:	mov	r1, #0
   19420:	str	r1, [sp, #8]
   19424:	movw	r1, #19778	; 0x4d42
   19428:	movt	r1, #65363	; 0xff53
   1942c:	cmp	r0, r1
   19430:	movwne	r1, #26985	; 0x6969
   19434:	cmpne	r0, r1
   19438:	beq	19450 <__assert_fail@plt+0x7588>
   1943c:	movw	r1, #6548	; 0x1994
   19440:	movt	r1, #258	; 0x102
   19444:	cmp	r0, r1
   19448:	movne	r0, #1
   1944c:	strne	r0, [sp, #8]
   19450:	ldr	r0, [sp, #32]
   19454:	add	r7, r7, #1
   19458:	cmp	r0, r7
   1945c:	bls	19470 <__assert_fail@plt+0x75a8>
   19460:	str	r6, [sp, #44]	; 0x2c
   19464:	ldr	r6, [sl, #12]
   19468:	cmp	r6, #0
   1946c:	bne	19178 <__assert_fail@plt+0x72b0>
   19470:	ldr	r0, [sp, #16]
   19474:	ldr	ip, [sp]
   19478:	ldr	r4, [sp, #8]
   1947c:	tst	r0, #1
   19480:	bne	194e8 <__assert_fail@plt+0x7620>
   19484:	b	19588 <__assert_fail@plt+0x76c0>
   19488:	mov	r7, #0
   1948c:	mov	r4, #0
   19490:	b	19588 <__assert_fail@plt+0x76c0>
   19494:	ldr	r0, [sp, #36]	; 0x24
   19498:	ldr	r0, [r0]
   1949c:	cmp	r0, #0
   194a0:	beq	194bc <__assert_fail@plt+0x75f4>
   194a4:	str	r0, [sl, #32]
   194a8:	ldr	r0, [sp, #12]
   194ac:	orrs	r0, r0, r7
   194b0:	mov	r0, #4
   194b4:	movwne	r0, #7
   194b8:	strh	r0, [sl, #56]	; 0x38
   194bc:	ldr	r0, [sl, #12]
   194c0:	ldr	r4, [sp, #8]
   194c4:	cmp	r0, #0
   194c8:	beq	194d8 <__assert_fail@plt+0x7610>
   194cc:	bl	11ebc <closedir@plt>
   194d0:	mov	r0, #0
   194d4:	str	r0, [sl, #12]
   194d8:	ldr	r0, [sp, #16]
   194dc:	ldr	ip, [sp]
   194e0:	tst	r0, #1
   194e4:	beq	19588 <__assert_fail@plt+0x76c0>
   194e8:	ldr	r1, [r5, #4]
   194ec:	ldr	r0, [r5, #24]
   194f0:	cmp	r1, #0
   194f4:	bne	1950c <__assert_fail@plt+0x7644>
   194f8:	b	19530 <__assert_fail@plt+0x7668>
   194fc:	str	r0, [r1, #28]
   19500:	ldr	r1, [r1, #8]
   19504:	cmp	r1, #0
   19508:	beq	19530 <__assert_fail@plt+0x7668>
   1950c:	ldr	r2, [r1, #24]
   19510:	add	r3, r1, #168	; 0xa8
   19514:	cmp	r2, r3
   19518:	beq	194fc <__assert_fail@plt+0x7634>
   1951c:	ldr	r3, [r1, #28]
   19520:	sub	r2, r2, r3
   19524:	add	r2, r0, r2
   19528:	str	r2, [r1, #24]
   1952c:	b	194fc <__assert_fail@plt+0x7634>
   19530:	ldr	r1, [r9, #48]	; 0x30
   19534:	cmp	r1, #0
   19538:	bmi	19588 <__assert_fail@plt+0x76c0>
   1953c:	mov	r1, r9
   19540:	b	19564 <__assert_fail@plt+0x769c>
   19544:	str	r0, [r1, #28]
   19548:	ldr	r2, [r1, #8]
   1954c:	cmp	r2, #0
   19550:	ldreq	r2, [r1, #4]
   19554:	ldr	r1, [r2, #48]	; 0x30
   19558:	cmn	r1, #1
   1955c:	mov	r1, r2
   19560:	ble	19588 <__assert_fail@plt+0x76c0>
   19564:	ldr	r2, [r1, #24]
   19568:	add	r3, r1, #168	; 0xa8
   1956c:	cmp	r2, r3
   19570:	beq	19544 <__assert_fail@plt+0x767c>
   19574:	ldr	r3, [r1, #28]
   19578:	sub	r2, r2, r3
   1957c:	add	r2, r0, r2
   19580:	str	r2, [r1, #24]
   19584:	b	19544 <__assert_fail@plt+0x767c>
   19588:	ldrb	r0, [r5, #48]	; 0x30
   1958c:	tst	r0, #4
   19590:	beq	195bc <__assert_fail@plt+0x76f4>
   19594:	ldr	r2, [sp, #40]	; 0x28
   19598:	ldr	r0, [r5, #36]	; 0x24
   1959c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   195a0:	cmp	r3, r0
   195a4:	sub	r1, r2, #1
   195a8:	mov	r0, #0
   195ac:	moveq	r2, r1
   195b0:	cmp	r7, #0
   195b4:	moveq	r2, r1
   195b8:	strb	r0, [r2]
   195bc:	ldr	r0, [sp, #12]
   195c0:	cmp	r0, #0
   195c4:	movwne	r0, #1
   195c8:	orrs	r0, r0, ip
   195cc:	beq	19634 <__assert_fail@plt+0x776c>
   195d0:	cmp	r7, #0
   195d4:	bne	19674 <__assert_fail@plt+0x77ac>
   195d8:	ldr	r0, [sp, #4]
   195dc:	cmp	r0, #3
   195e0:	bne	195f8 <__assert_fail@plt+0x7730>
   195e4:	ldrh	r0, [sl, #56]	; 0x38
   195e8:	cmp	r0, #4
   195ec:	cmpne	r0, #7
   195f0:	movne	r0, #6
   195f4:	strhne	r0, [sl, #56]	; 0x38
   195f8:	mov	r6, #0
   195fc:	cmp	r9, #0
   19600:	bne	1961c <__assert_fail@plt+0x7754>
   19604:	b	19868 <__assert_fail@plt+0x79a0>
   19608:	mov	r0, r9
   1960c:	bl	176c0 <__assert_fail@plt+0x57f8>
   19610:	cmp	r4, #0
   19614:	mov	r9, r4
   19618:	beq	19868 <__assert_fail@plt+0x79a0>
   1961c:	ldrd	r4, [r9, #8]
   19620:	cmp	r5, #0
   19624:	beq	19608 <__assert_fail@plt+0x7740>
   19628:	mov	r0, r5
   1962c:	bl	11ebc <closedir@plt>
   19630:	b	19608 <__assert_fail@plt+0x7740>
   19634:	ldr	r0, [sp, #4]
   19638:	cmp	r0, #1
   1963c:	cmpne	r7, #0
   19640:	bne	19674 <__assert_fail@plt+0x77ac>
   19644:	ldr	r0, [sl, #48]	; 0x30
   19648:	cmp	r0, #0
   1964c:	beq	1975c <__assert_fail@plt+0x7894>
   19650:	ldr	r1, [sl, #4]
   19654:	movw	r3, #30999	; 0x7917
   19658:	mov	r0, r5
   1965c:	mvn	r2, #0
   19660:	movt	r3, #3
   19664:	bl	18b84 <__assert_fail@plt+0x6cbc>
   19668:	cmp	r0, #0
   1966c:	bne	1976c <__assert_fail@plt+0x78a4>
   19670:	b	195d0 <__assert_fail@plt+0x7708>
   19674:	tst	r4, #1
   19678:	beq	196a8 <__assert_fail@plt+0x77e0>
   1967c:	movw	r0, #40004	; 0x9c44
   19680:	mov	r1, r9
   19684:	mov	r2, r7
   19688:	movt	r0, #1
   1968c:	str	r0, [r5, #44]	; 0x2c
   19690:	mov	r0, r5
   19694:	bl	18068 <__assert_fail@plt+0x61a0>
   19698:	mov	r6, r0
   1969c:	mov	r0, #0
   196a0:	str	r0, [r5, #44]	; 0x2c
   196a4:	b	19868 <__assert_fail@plt+0x79a0>
   196a8:	cmp	r7, #2
   196ac:	bcc	196d8 <__assert_fail@plt+0x7810>
   196b0:	ldr	r0, [sp, #20]
   196b4:	ldr	r0, [r0]
   196b8:	cmp	r0, #0
   196bc:	beq	196d8 <__assert_fail@plt+0x7810>
   196c0:	mov	r0, r5
   196c4:	mov	r1, r9
   196c8:	mov	r2, r7
   196cc:	bl	18068 <__assert_fail@plt+0x61a0>
   196d0:	mov	r6, r0
   196d4:	b	19868 <__assert_fail@plt+0x79a0>
   196d8:	mov	r6, r9
   196dc:	b	19868 <__assert_fail@plt+0x79a0>
   196e0:	mov	r0, r6
   196e4:	bl	176c0 <__assert_fail@plt+0x57f8>
   196e8:	ldr	r7, [sp, #28]
   196ec:	cmp	r9, #0
   196f0:	bne	1970c <__assert_fail@plt+0x7844>
   196f4:	b	19724 <__assert_fail@plt+0x785c>
   196f8:	mov	r0, r9
   196fc:	bl	176c0 <__assert_fail@plt+0x57f8>
   19700:	cmp	r4, #0
   19704:	mov	r9, r4
   19708:	beq	19724 <__assert_fail@plt+0x785c>
   1970c:	ldrd	r4, [r9, #8]
   19710:	cmp	r5, #0
   19714:	beq	196f8 <__assert_fail@plt+0x7830>
   19718:	mov	r0, r5
   1971c:	bl	11ebc <closedir@plt>
   19720:	b	196f8 <__assert_fail@plt+0x7830>
   19724:	ldr	r0, [r7, #12]
   19728:	bl	11ebc <closedir@plt>
   1972c:	ldr	r1, [sp, #48]	; 0x30
   19730:	mov	r0, #7
   19734:	mov	r6, #0
   19738:	strh	r0, [r7, #56]	; 0x38
   1973c:	str	r6, [r7, #12]
   19740:	ldr	r0, [r1, #48]	; 0x30
   19744:	orr	r0, r0, #8192	; 0x2000
   19748:	str	r0, [r1, #48]	; 0x30
   1974c:	ldr	r1, [sp, #36]	; 0x24
   19750:	mov	r0, #36	; 0x24
   19754:	str	r0, [r1]
   19758:	b	19868 <__assert_fail@plt+0x79a0>
   1975c:	mov	r0, r5
   19760:	bl	19874 <__assert_fail@plt+0x79ac>
   19764:	cmp	r0, #0
   19768:	beq	195d0 <__assert_fail@plt+0x7708>
   1976c:	mov	r0, #7
   19770:	mov	r6, #0
   19774:	cmp	r9, #0
   19778:	strh	r0, [sl, #56]	; 0x38
   1977c:	ldr	r0, [r5, #48]	; 0x30
   19780:	orr	r0, r0, #8192	; 0x2000
   19784:	str	r0, [r5, #48]	; 0x30
   19788:	bne	197a4 <__assert_fail@plt+0x78dc>
   1978c:	b	19868 <__assert_fail@plt+0x79a0>
   19790:	mov	r0, r9
   19794:	bl	176c0 <__assert_fail@plt+0x57f8>
   19798:	cmp	r4, #0
   1979c:	mov	r9, r4
   197a0:	beq	19868 <__assert_fail@plt+0x79a0>
   197a4:	ldrd	r4, [r9, #8]
   197a8:	cmp	r5, #0
   197ac:	beq	19790 <__assert_fail@plt+0x78c8>
   197b0:	mov	r0, r5
   197b4:	bl	11ebc <closedir@plt>
   197b8:	b	19790 <__assert_fail@plt+0x78c8>
   197bc:	mov	r0, r4
   197c0:	bl	176c0 <__assert_fail@plt+0x57f8>
   197c4:	ldr	r1, [sp, #36]	; 0x24
   197c8:	mov	r0, #0
   197cc:	str	r0, [r5, #24]
   197d0:	mov	r0, #36	; 0x24
   197d4:	str	r0, [r1]
   197d8:	b	197ec <__assert_fail@plt+0x7924>
   197dc:	ldr	r0, [r5, #24]
   197e0:	bl	176c0 <__assert_fail@plt+0x57f8>
   197e4:	mov	r0, #0
   197e8:	str	r0, [r5, #24]
   197ec:	ldr	sl, [sp, #28]
   197f0:	ldr	r0, [sp, #36]	; 0x24
   197f4:	ldr	r4, [r0]
   197f8:	mov	r0, r6
   197fc:	bl	176c0 <__assert_fail@plt+0x57f8>
   19800:	ldr	r5, [sp, #48]	; 0x30
   19804:	cmp	r9, #0
   19808:	bne	19824 <__assert_fail@plt+0x795c>
   1980c:	b	1983c <__assert_fail@plt+0x7974>
   19810:	mov	r0, r9
   19814:	bl	176c0 <__assert_fail@plt+0x57f8>
   19818:	cmp	r6, #0
   1981c:	mov	r9, r6
   19820:	beq	1983c <__assert_fail@plt+0x7974>
   19824:	ldrd	r6, [r9, #8]
   19828:	cmp	r7, #0
   1982c:	beq	19810 <__assert_fail@plt+0x7948>
   19830:	mov	r0, r7
   19834:	bl	11ebc <closedir@plt>
   19838:	b	19810 <__assert_fail@plt+0x7948>
   1983c:	ldr	r0, [sl, #12]
   19840:	bl	11ebc <closedir@plt>
   19844:	mov	r0, #7
   19848:	mov	r6, #0
   1984c:	strh	r0, [sl, #56]	; 0x38
   19850:	str	r6, [sl, #12]
   19854:	ldr	r0, [r5, #48]	; 0x30
   19858:	orr	r0, r0, #8192	; 0x2000
   1985c:	str	r0, [r5, #48]	; 0x30
   19860:	ldr	r0, [sp, #36]	; 0x24
   19864:	str	r4, [r0]
   19868:	mov	r0, r6
   1986c:	sub	sp, fp, #28
   19870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19874:	push	{r4, r5, fp, lr}
   19878:	add	fp, sp, #8
   1987c:	mov	r5, r0
   19880:	ldr	r0, [r0, #48]	; 0x30
   19884:	mov	r4, #0
   19888:	tst	r0, #4
   1988c:	bne	198d0 <__assert_fail@plt+0x7a08>
   19890:	tst	r0, #512	; 0x200
   19894:	bne	198b0 <__assert_fail@plt+0x79e8>
   19898:	ldr	r0, [r5, #28]
   1989c:	bl	11e08 <fchdir@plt>
   198a0:	cmp	r0, #0
   198a4:	mov	r4, r0
   198a8:	movwne	r4, #1
   198ac:	b	198d0 <__assert_fail@plt+0x7a08>
   198b0:	ldr	r1, [r5, #32]
   198b4:	add	r0, r5, #60	; 0x3c
   198b8:	bl	1bdac <__assert_fail@plt+0x9ee4>
   198bc:	cmp	r0, #0
   198c0:	bmi	198c8 <__assert_fail@plt+0x7a00>
   198c4:	bl	11ea4 <close@plt>
   198c8:	mvn	r0, #99	; 0x63
   198cc:	str	r0, [r5, #32]
   198d0:	add	r5, r5, #60	; 0x3c
   198d4:	mov	r0, r5
   198d8:	bl	1bda4 <__assert_fail@plt+0x9edc>
   198dc:	cmp	r0, #0
   198e0:	bne	198fc <__assert_fail@plt+0x7a34>
   198e4:	mov	r0, r5
   198e8:	bl	1bdf8 <__assert_fail@plt+0x9f30>
   198ec:	cmp	r0, #0
   198f0:	bmi	198d4 <__assert_fail@plt+0x7a0c>
   198f4:	bl	11ea4 <close@plt>
   198f8:	b	198d4 <__assert_fail@plt+0x7a0c>
   198fc:	mov	r0, r4
   19900:	pop	{r4, r5, fp, pc}
   19904:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19908:	add	fp, sp, #24
   1990c:	mov	r6, r0
   19910:	ldrh	r0, [r0, #48]	; 0x30
   19914:	mov	r4, r1
   19918:	add	r5, r1, #64	; 0x40
   1991c:	movw	r1, #258	; 0x102
   19920:	tst	r0, r1
   19924:	beq	1999c <__assert_fail@plt+0x7ad4>
   19928:	mov	r0, #24
   1992c:	bl	34810 <__assert_fail@plt+0x22948>
   19930:	mov	r8, #0
   19934:	cmp	r0, #0
   19938:	beq	199bc <__assert_fail@plt+0x7af4>
   1993c:	ldrd	r2, [r5]
   19940:	mov	r7, r0
   19944:	add	r0, r4, #160	; 0xa0
   19948:	stm	r7, {r2, r3}
   1994c:	add	r2, r7, #8
   19950:	ldrd	r0, [r0]
   19954:	stm	r2, {r0, r1, r4}
   19958:	mov	r1, r7
   1995c:	ldr	r0, [r6, #56]	; 0x38
   19960:	bl	1ade0 <__assert_fail@plt+0x8f18>
   19964:	cmp	r0, r7
   19968:	beq	19990 <__assert_fail@plt+0x7ac8>
   1996c:	mov	r5, r0
   19970:	mov	r0, r7
   19974:	bl	176c0 <__assert_fail@plt+0x57f8>
   19978:	cmp	r5, #0
   1997c:	beq	199bc <__assert_fail@plt+0x7af4>
   19980:	ldr	r0, [r5, #16]
   19984:	mov	r1, #2
   19988:	strh	r1, [r4, #56]	; 0x38
   1998c:	str	r0, [r4]
   19990:	mov	r8, #1
   19994:	mov	r0, r8
   19998:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1999c:	ldr	r0, [r6, #56]	; 0x38
   199a0:	mov	r1, r5
   199a4:	bl	35404 <__assert_fail@plt+0x2353c>
   199a8:	cmp	r0, #0
   199ac:	mov	r8, #1
   199b0:	movne	r0, #2
   199b4:	strhne	r0, [r4, #56]	; 0x38
   199b8:	strne	r4, [r4]
   199bc:	mov	r0, r8
   199c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   199c4:	push	{fp, lr}
   199c8:	mov	fp, sp
   199cc:	cmp	r2, #5
   199d0:	bcc	199e8 <__assert_fail@plt+0x7b20>
   199d4:	bl	11cdc <__errno_location@plt>
   199d8:	mov	r1, #22
   199dc:	str	r1, [r0]
   199e0:	mov	r0, #1
   199e4:	pop	{fp, pc}
   199e8:	mov	r0, #0
   199ec:	strh	r2, [r1, #60]	; 0x3c
   199f0:	pop	{fp, pc}
   199f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199f8:	add	fp, sp, #28
   199fc:	sub	sp, sp, #4
   19a00:	mov	r9, r0
   19a04:	mvn	r0, #4096	; 0x1000
   19a08:	tst	r1, r0
   19a0c:	beq	19a24 <__assert_fail@plt+0x7b5c>
   19a10:	bl	11cdc <__errno_location@plt>
   19a14:	mov	r1, #22
   19a18:	mov	r5, #0
   19a1c:	str	r1, [r0]
   19a20:	b	19b24 <__assert_fail@plt+0x7c5c>
   19a24:	ldr	r8, [r9]
   19a28:	mov	r7, r1
   19a2c:	bl	11cdc <__errno_location@plt>
   19a30:	mov	r5, #0
   19a34:	mov	sl, r0
   19a38:	str	r5, [r0]
   19a3c:	ldrb	r0, [r9, #49]	; 0x31
   19a40:	tst	r0, #32
   19a44:	bne	19b24 <__assert_fail@plt+0x7c5c>
   19a48:	ldrh	r0, [r8, #56]	; 0x38
   19a4c:	cmp	r0, #1
   19a50:	beq	19a60 <__assert_fail@plt+0x7b98>
   19a54:	cmp	r0, #9
   19a58:	ldreq	r5, [r8, #8]
   19a5c:	b	19b24 <__assert_fail@plt+0x7c5c>
   19a60:	ldr	r6, [r9, #4]
   19a64:	cmp	r6, #0
   19a68:	bne	19a84 <__assert_fail@plt+0x7bbc>
   19a6c:	b	19aa0 <__assert_fail@plt+0x7bd8>
   19a70:	mov	r0, r6
   19a74:	bl	176c0 <__assert_fail@plt+0x57f8>
   19a78:	cmp	r4, #0
   19a7c:	mov	r6, r4
   19a80:	beq	19aa0 <__assert_fail@plt+0x7bd8>
   19a84:	ldr	r1, [r6, #12]
   19a88:	ldr	r4, [r6, #8]
   19a8c:	cmp	r1, #0
   19a90:	beq	19a70 <__assert_fail@plt+0x7ba8>
   19a94:	mov	r0, r1
   19a98:	bl	11ebc <closedir@plt>
   19a9c:	b	19a70 <__assert_fail@plt+0x7ba8>
   19aa0:	mov	r4, #1
   19aa4:	cmp	r7, #4096	; 0x1000
   19aa8:	bne	19abc <__assert_fail@plt+0x7bf4>
   19aac:	ldr	r0, [r9, #48]	; 0x30
   19ab0:	mov	r4, #2
   19ab4:	orr	r0, r0, #4096	; 0x1000
   19ab8:	str	r0, [r9, #48]	; 0x30
   19abc:	ldr	r0, [r8, #48]	; 0x30
   19ac0:	cmp	r0, #0
   19ac4:	bne	19b10 <__assert_fail@plt+0x7c48>
   19ac8:	ldr	r0, [r8, #24]
   19acc:	ldrb	r0, [r0]
   19ad0:	cmp	r0, #47	; 0x2f
   19ad4:	beq	19b10 <__assert_fail@plt+0x7c48>
   19ad8:	ldr	r0, [r9, #48]	; 0x30
   19adc:	tst	r0, #4
   19ae0:	bne	19b10 <__assert_fail@plt+0x7c48>
   19ae4:	mov	r1, #32768	; 0x8000
   19ae8:	tst	r0, #512	; 0x200
   19aec:	and	r1, r1, r0, lsl #11
   19af0:	orr	r1, r1, #18688	; 0x4900
   19af4:	orr	r2, r1, #524288	; 0x80000
   19af8:	bne	19b30 <__assert_fail@plt+0x7c68>
   19afc:	movw	r0, #31000	; 0x7918
   19b00:	mov	r1, r2
   19b04:	movt	r0, #3
   19b08:	bl	3577c <__assert_fail@plt+0x238b4>
   19b0c:	b	19b40 <__assert_fail@plt+0x7c78>
   19b10:	mov	r0, r9
   19b14:	mov	r1, r4
   19b18:	bl	18de4 <__assert_fail@plt+0x6f1c>
   19b1c:	mov	r5, r0
   19b20:	str	r0, [r9, #4]
   19b24:	mov	r0, r5
   19b28:	sub	sp, fp, #28
   19b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b30:	ldr	r0, [r9, #32]
   19b34:	movw	r1, #31000	; 0x7918
   19b38:	movt	r1, #3
   19b3c:	bl	1d1d8 <__assert_fail@plt+0xb310>
   19b40:	mov	r8, r0
   19b44:	cmn	r0, #1
   19b48:	ble	19b8c <__assert_fail@plt+0x7cc4>
   19b4c:	mov	r0, r9
   19b50:	mov	r1, r4
   19b54:	bl	18de4 <__assert_fail@plt+0x6f1c>
   19b58:	str	r0, [r9, #4]
   19b5c:	ldrb	r0, [r9, #49]	; 0x31
   19b60:	tst	r0, #2
   19b64:	bne	19b98 <__assert_fail@plt+0x7cd0>
   19b68:	mov	r0, r8
   19b6c:	bl	11e08 <fchdir@plt>
   19b70:	cmp	r0, #0
   19b74:	beq	19bc8 <__assert_fail@plt+0x7d00>
   19b78:	ldr	r4, [sl]
   19b7c:	mov	r0, r8
   19b80:	bl	11ea4 <close@plt>
   19b84:	str	r4, [sl]
   19b88:	b	19b24 <__assert_fail@plt+0x7c5c>
   19b8c:	mov	r5, #0
   19b90:	str	r5, [r9, #4]
   19b94:	b	19b24 <__assert_fail@plt+0x7c5c>
   19b98:	ldr	r1, [r9, #32]
   19b9c:	cmp	r1, r8
   19ba0:	bne	19bac <__assert_fail@plt+0x7ce4>
   19ba4:	cmn	r1, #100	; 0x64
   19ba8:	bne	19bd8 <__assert_fail@plt+0x7d10>
   19bac:	add	r0, r9, #60	; 0x3c
   19bb0:	bl	1bdac <__assert_fail@plt+0x9ee4>
   19bb4:	cmp	r0, #0
   19bb8:	bmi	19bc0 <__assert_fail@plt+0x7cf8>
   19bbc:	bl	11ea4 <close@plt>
   19bc0:	str	r8, [r9, #32]
   19bc4:	b	19bd0 <__assert_fail@plt+0x7d08>
   19bc8:	mov	r0, r8
   19bcc:	bl	11ea4 <close@plt>
   19bd0:	ldr	r5, [r9, #4]
   19bd4:	b	19b24 <__assert_fail@plt+0x7c5c>
   19bd8:	bl	11e8c <abort@plt>
   19bdc:	push	{fp, lr}
   19be0:	mov	fp, sp
   19be4:	mov	r2, r1
   19be8:	ldrd	r0, [r0, #8]
   19bec:	mov	r3, #0
   19bf0:	bl	35eec <__assert_fail@plt+0x24024>
   19bf4:	mov	r0, r2
   19bf8:	pop	{fp, pc}
   19bfc:	push	{r4, r5, fp, lr}
   19c00:	add	fp, sp, #8
   19c04:	ldrd	r2, [r1, #8]
   19c08:	ldrd	r4, [r0, #8]
   19c0c:	eor	r3, r5, r3
   19c10:	eor	r2, r4, r2
   19c14:	orrs	r2, r2, r3
   19c18:	mov	r2, #0
   19c1c:	bne	19c3c <__assert_fail@plt+0x7d74>
   19c20:	ldrd	r2, [r1]
   19c24:	ldrd	r0, [r0]
   19c28:	eor	r1, r1, r3
   19c2c:	eor	r0, r0, r2
   19c30:	orr	r0, r0, r1
   19c34:	clz	r0, r0
   19c38:	lsr	r2, r0, #5
   19c3c:	mov	r0, r2
   19c40:	pop	{r4, r5, fp, pc}
   19c44:	push	{r4, r5, fp, lr}
   19c48:	add	fp, sp, #8
   19c4c:	ldr	r0, [r0]
   19c50:	ldrd	r2, [r0, #160]	; 0xa0
   19c54:	ldr	r0, [r1]
   19c58:	ldrd	r4, [r0, #160]	; 0xa0
   19c5c:	mov	r0, #0
   19c60:	subs	r1, r4, r2
   19c64:	sbcs	r1, r5, r3
   19c68:	movwcc	r0, #1
   19c6c:	subs	r1, r2, r4
   19c70:	sbcs	r1, r3, r5
   19c74:	subcc	r0, r0, #1
   19c78:	pop	{r4, r5, fp, pc}
   19c7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19c80:	add	fp, sp, #24
   19c84:	sub	sp, sp, #96	; 0x60
   19c88:	ldr	r7, [r0, #44]	; 0x2c
   19c8c:	mov	r4, r0
   19c90:	mov	r5, #0
   19c94:	ldrb	r0, [r7, #49]	; 0x31
   19c98:	tst	r0, #2
   19c9c:	beq	19d98 <__assert_fail@plt+0x7ed0>
   19ca0:	ldr	r6, [r7, #52]	; 0x34
   19ca4:	mov	r9, r1
   19ca8:	cmp	r6, #0
   19cac:	bne	19cec <__assert_fail@plt+0x7e24>
   19cb0:	movw	r0, #30400	; 0x76c0
   19cb4:	movw	r2, #40356	; 0x9da4
   19cb8:	movw	r3, #40388	; 0x9dc4
   19cbc:	mov	r1, #0
   19cc0:	mov	r8, #0
   19cc4:	movt	r0, #1
   19cc8:	movt	r2, #1
   19ccc:	movt	r3, #1
   19cd0:	str	r0, [sp]
   19cd4:	mov	r0, #13
   19cd8:	bl	1a28c <__assert_fail@plt+0x83c4>
   19cdc:	mov	r6, r0
   19ce0:	cmp	r0, #0
   19ce4:	str	r0, [r7, #52]	; 0x34
   19ce8:	beq	19d24 <__assert_fail@plt+0x7e5c>
   19cec:	ldrd	r0, [r4, #64]	; 0x40
   19cf0:	str	r1, [sp, #12]
   19cf4:	str	r0, [sp, #8]
   19cf8:	add	r1, sp, #8
   19cfc:	mov	r0, r6
   19d00:	bl	19fd8 <__assert_fail@plt+0x8110>
   19d04:	cmp	r0, #0
   19d08:	beq	19d14 <__assert_fail@plt+0x7e4c>
   19d0c:	ldr	r5, [r0, #8]
   19d10:	b	19d98 <__assert_fail@plt+0x7ed0>
   19d14:	mov	r8, #1
   19d18:	cmp	r9, #0
   19d1c:	bpl	19d30 <__assert_fail@plt+0x7e68>
   19d20:	b	19d98 <__assert_fail@plt+0x7ed0>
   19d24:	mov	r6, #0
   19d28:	cmp	r9, #0
   19d2c:	bmi	19d98 <__assert_fail@plt+0x7ed0>
   19d30:	add	r1, sp, #8
   19d34:	mov	r0, r9
   19d38:	bl	119d0 <fstatfs64@plt>
   19d3c:	cmp	r0, #0
   19d40:	bne	19d98 <__assert_fail@plt+0x7ed0>
   19d44:	cmp	r8, #0
   19d48:	beq	19d94 <__assert_fail@plt+0x7ecc>
   19d4c:	mov	r0, #16
   19d50:	bl	34810 <__assert_fail@plt+0x22948>
   19d54:	cmp	r0, #0
   19d58:	beq	19d94 <__assert_fail@plt+0x7ecc>
   19d5c:	mov	r5, r0
   19d60:	ldrd	r0, [r4, #64]	; 0x40
   19d64:	ldr	r2, [sp, #8]
   19d68:	stm	r5, {r0, r1, r2}
   19d6c:	mov	r0, r6
   19d70:	mov	r1, r5
   19d74:	bl	1ade0 <__assert_fail@plt+0x8f18>
   19d78:	cmp	r0, #0
   19d7c:	beq	19d8c <__assert_fail@plt+0x7ec4>
   19d80:	cmp	r0, r5
   19d84:	beq	19d94 <__assert_fail@plt+0x7ecc>
   19d88:	bl	11e8c <abort@plt>
   19d8c:	mov	r0, r5
   19d90:	bl	176c0 <__assert_fail@plt+0x57f8>
   19d94:	ldr	r5, [sp, #8]
   19d98:	mov	r0, r5
   19d9c:	sub	sp, fp, #24
   19da0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19da4:	push	{fp, lr}
   19da8:	mov	fp, sp
   19dac:	mov	r2, r1
   19db0:	ldrd	r0, [r0]
   19db4:	mov	r3, #0
   19db8:	bl	35eec <__assert_fail@plt+0x24024>
   19dbc:	mov	r0, r2
   19dc0:	pop	{fp, pc}
   19dc4:	ldrd	r2, [r1]
   19dc8:	ldrd	r0, [r0]
   19dcc:	eor	r1, r1, r3
   19dd0:	eor	r0, r0, r2
   19dd4:	orr	r0, r0, r1
   19dd8:	clz	r0, r0
   19ddc:	lsr	r0, r0, #5
   19de0:	bx	lr
   19de4:	andeq	r0, r0, r0
   19de8:	ldr	r0, [r0, #8]
   19dec:	bx	lr
   19df0:	ldr	r0, [r0, #12]
   19df4:	bx	lr
   19df8:	ldr	r0, [r0, #16]
   19dfc:	bx	lr
   19e00:	ldm	r0, {r2, ip}
   19e04:	mov	r0, #0
   19e08:	cmp	r2, ip
   19e0c:	bxcs	lr
   19e10:	mov	r0, #0
   19e14:	b	19e24 <__assert_fail@plt+0x7f5c>
   19e18:	add	r2, r2, #8
   19e1c:	cmp	r2, ip
   19e20:	bcs	19e54 <__assert_fail@plt+0x7f8c>
   19e24:	ldr	r1, [r2]
   19e28:	cmp	r1, #0
   19e2c:	beq	19e18 <__assert_fail@plt+0x7f50>
   19e30:	mov	r3, #0
   19e34:	mov	r1, r2
   19e38:	ldr	r1, [r1, #4]
   19e3c:	add	r3, r3, #1
   19e40:	cmp	r1, #0
   19e44:	bne	19e38 <__assert_fail@plt+0x7f70>
   19e48:	cmp	r3, r0
   19e4c:	movhi	r0, r3
   19e50:	b	19e18 <__assert_fail@plt+0x7f50>
   19e54:	bx	lr
   19e58:	push	{fp, lr}
   19e5c:	mov	fp, sp
   19e60:	ldm	r0, {r3, ip}
   19e64:	mov	lr, #0
   19e68:	mov	r1, #0
   19e6c:	cmp	r3, ip
   19e70:	bcs	19eb4 <__assert_fail@plt+0x7fec>
   19e74:	mov	r1, #0
   19e78:	mov	lr, #0
   19e7c:	b	19e8c <__assert_fail@plt+0x7fc4>
   19e80:	add	r3, r3, #8
   19e84:	cmp	r3, ip
   19e88:	bcs	19eb4 <__assert_fail@plt+0x7fec>
   19e8c:	ldr	r2, [r3]
   19e90:	cmp	r2, #0
   19e94:	beq	19e80 <__assert_fail@plt+0x7fb8>
   19e98:	mov	r2, r3
   19e9c:	ldr	r2, [r2, #4]
   19ea0:	add	r1, r1, #1
   19ea4:	cmp	r2, #0
   19ea8:	bne	19e9c <__assert_fail@plt+0x7fd4>
   19eac:	add	lr, lr, #1
   19eb0:	b	19e80 <__assert_fail@plt+0x7fb8>
   19eb4:	ldr	r2, [r0, #12]
   19eb8:	cmp	lr, r2
   19ebc:	bne	19ed4 <__assert_fail@plt+0x800c>
   19ec0:	ldr	r2, [r0, #16]
   19ec4:	mov	r0, #1
   19ec8:	cmp	r1, r2
   19ecc:	movne	r0, #0
   19ed0:	pop	{fp, pc}
   19ed4:	mov	r0, #0
   19ed8:	pop	{fp, pc}
   19edc:	nop	{0}
   19ee0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ee4:	add	fp, sp, #24
   19ee8:	sub	sp, sp, #8
   19eec:	ldr	r6, [r0]
   19ef0:	ldmib	r0, {r2, r7, r8}
   19ef4:	ldr	r3, [r0, #16]
   19ef8:	mov	r4, r1
   19efc:	mov	r5, #0
   19f00:	cmp	r6, r2
   19f04:	bcs	19f4c <__assert_fail@plt+0x8084>
   19f08:	mov	r5, #0
   19f0c:	b	19f1c <__assert_fail@plt+0x8054>
   19f10:	add	r6, r6, #8
   19f14:	cmp	r6, r2
   19f18:	bcs	19f4c <__assert_fail@plt+0x8084>
   19f1c:	ldr	r0, [r6]
   19f20:	cmp	r0, #0
   19f24:	beq	19f10 <__assert_fail@plt+0x8048>
   19f28:	mov	r0, #0
   19f2c:	mov	r1, r6
   19f30:	ldr	r1, [r1, #4]
   19f34:	add	r0, r0, #1
   19f38:	cmp	r1, #0
   19f3c:	bne	19f30 <__assert_fail@plt+0x8068>
   19f40:	cmp	r0, r5
   19f44:	movhi	r5, r0
   19f48:	b	19f10 <__assert_fail@plt+0x8048>
   19f4c:	movw	r2, #31052	; 0x794c
   19f50:	mov	r0, r4
   19f54:	mov	r1, #1
   19f58:	movt	r2, #3
   19f5c:	bl	11d3c <__fprintf_chk@plt>
   19f60:	movw	r2, #31076	; 0x7964
   19f64:	mov	r0, r4
   19f68:	mov	r1, #1
   19f6c:	mov	r3, r7
   19f70:	movt	r2, #3
   19f74:	bl	11d3c <__fprintf_chk@plt>
   19f78:	vmov	s0, r8
   19f7c:	vldr	d16, [pc, #76]	; 19fd0 <__assert_fail@plt+0x8108>
   19f80:	movw	r2, #31100	; 0x797c
   19f84:	mov	r0, r4
   19f88:	mov	r1, #1
   19f8c:	mov	r3, r8
   19f90:	movt	r2, #3
   19f94:	vcvt.f64.u32	d17, s0
   19f98:	vmov	s0, r7
   19f9c:	vcvt.f64.u32	d18, s0
   19fa0:	vmul.f64	d16, d17, d16
   19fa4:	vdiv.f64	d16, d16, d18
   19fa8:	vstr	d16, [sp]
   19fac:	bl	11d3c <__fprintf_chk@plt>
   19fb0:	movw	r2, #31133	; 0x799d
   19fb4:	mov	r0, r4
   19fb8:	mov	r1, #1
   19fbc:	mov	r3, r5
   19fc0:	movt	r2, #3
   19fc4:	sub	sp, fp, #24
   19fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19fcc:	b	11d3c <__fprintf_chk@plt>
   19fd0:	andeq	r0, r0, r0
   19fd4:	subsmi	r0, r9, r0
   19fd8:	push	{r4, r5, r6, r7, fp, lr}
   19fdc:	add	fp, sp, #16
   19fe0:	mov	r4, r1
   19fe4:	ldr	r1, [r0, #8]
   19fe8:	ldr	r2, [r0, #24]
   19fec:	mov	r5, r0
   19ff0:	mov	r0, r4
   19ff4:	blx	r2
   19ff8:	ldr	r1, [r5, #8]
   19ffc:	cmp	r0, r1
   1a000:	bcs	1a068 <__assert_fail@plt+0x81a0>
   1a004:	ldr	r7, [r5]
   1a008:	mov	r6, #0
   1a00c:	ldr	r1, [r7, r0, lsl #3]!
   1a010:	cmp	r1, #0
   1a014:	cmpne	r7, #0
   1a018:	bne	1a048 <__assert_fail@plt+0x8180>
   1a01c:	mov	r0, r6
   1a020:	pop	{r4, r5, r6, r7, fp, pc}
   1a024:	ldr	r2, [r5, #28]
   1a028:	mov	r0, r4
   1a02c:	blx	r2
   1a030:	cmp	r0, #0
   1a034:	bne	1a05c <__assert_fail@plt+0x8194>
   1a038:	ldr	r7, [r7, #4]
   1a03c:	cmp	r7, #0
   1a040:	beq	1a01c <__assert_fail@plt+0x8154>
   1a044:	ldr	r1, [r7]
   1a048:	cmp	r1, r4
   1a04c:	bne	1a024 <__assert_fail@plt+0x815c>
   1a050:	mov	r6, r4
   1a054:	mov	r0, r6
   1a058:	pop	{r4, r5, r6, r7, fp, pc}
   1a05c:	ldr	r6, [r7]
   1a060:	mov	r0, r6
   1a064:	pop	{r4, r5, r6, r7, fp, pc}
   1a068:	bl	11e8c <abort@plt>
   1a06c:	push	{fp, lr}
   1a070:	mov	fp, sp
   1a074:	ldr	r1, [r0, #16]
   1a078:	cmp	r1, #0
   1a07c:	beq	1a09c <__assert_fail@plt+0x81d4>
   1a080:	ldm	r0, {r1, r2}
   1a084:	cmp	r1, r2
   1a088:	bcs	1a0a4 <__assert_fail@plt+0x81dc>
   1a08c:	ldr	r0, [r1], #8
   1a090:	cmp	r0, #0
   1a094:	beq	1a084 <__assert_fail@plt+0x81bc>
   1a098:	pop	{fp, pc}
   1a09c:	mov	r0, #0
   1a0a0:	pop	{fp, pc}
   1a0a4:	bl	11e8c <abort@plt>
   1a0a8:	push	{r4, r5, fp, lr}
   1a0ac:	add	fp, sp, #8
   1a0b0:	mov	r5, r1
   1a0b4:	ldr	r1, [r0, #8]
   1a0b8:	ldr	r2, [r0, #24]
   1a0bc:	mov	r4, r0
   1a0c0:	mov	r0, r5
   1a0c4:	blx	r2
   1a0c8:	ldr	r1, [r4, #8]
   1a0cc:	cmp	r0, r1
   1a0d0:	bcs	1a134 <__assert_fail@plt+0x826c>
   1a0d4:	ldr	r1, [r4]
   1a0d8:	add	r2, r1, r0, lsl #3
   1a0dc:	ldr	r3, [r2]
   1a0e0:	ldr	r2, [r2, #4]
   1a0e4:	cmp	r3, r5
   1a0e8:	beq	1a0f8 <__assert_fail@plt+0x8230>
   1a0ec:	cmp	r2, #0
   1a0f0:	bne	1a0dc <__assert_fail@plt+0x8214>
   1a0f4:	b	1a108 <__assert_fail@plt+0x8240>
   1a0f8:	cmp	r2, #0
   1a0fc:	beq	1a108 <__assert_fail@plt+0x8240>
   1a100:	ldr	r0, [r2]
   1a104:	pop	{r4, r5, fp, pc}
   1a108:	ldr	r2, [r4, #4]
   1a10c:	add	r0, r1, r0, lsl #3
   1a110:	add	r1, r0, #8
   1a114:	cmp	r1, r2
   1a118:	bcs	1a12c <__assert_fail@plt+0x8264>
   1a11c:	ldr	r0, [r1], #8
   1a120:	cmp	r0, #0
   1a124:	beq	1a114 <__assert_fail@plt+0x824c>
   1a128:	pop	{r4, r5, fp, pc}
   1a12c:	mov	r0, #0
   1a130:	pop	{r4, r5, fp, pc}
   1a134:	bl	11e8c <abort@plt>
   1a138:	push	{r4, r5, fp, lr}
   1a13c:	add	fp, sp, #8
   1a140:	ldm	r0, {r5, lr}
   1a144:	mov	ip, r0
   1a148:	mov	r0, #0
   1a14c:	cmp	r5, lr
   1a150:	popcs	{r4, r5, fp, pc}
   1a154:	mov	r0, #0
   1a158:	b	1a16c <__assert_fail@plt+0x82a4>
   1a15c:	ldr	lr, [ip, #4]
   1a160:	add	r5, r5, #8
   1a164:	cmp	r5, lr
   1a168:	bcs	1a1a4 <__assert_fail@plt+0x82dc>
   1a16c:	ldr	r3, [r5]
   1a170:	cmp	r3, #0
   1a174:	cmpne	r5, #0
   1a178:	beq	1a160 <__assert_fail@plt+0x8298>
   1a17c:	mov	r3, r5
   1a180:	cmp	r0, r2
   1a184:	bcs	1a1a4 <__assert_fail@plt+0x82dc>
   1a188:	ldr	r4, [r3]
   1a18c:	str	r4, [r1, r0, lsl #2]
   1a190:	add	r0, r0, #1
   1a194:	ldr	r3, [r3, #4]
   1a198:	cmp	r3, #0
   1a19c:	bne	1a180 <__assert_fail@plt+0x82b8>
   1a1a0:	b	1a15c <__assert_fail@plt+0x8294>
   1a1a4:	pop	{r4, r5, fp, pc}
   1a1a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a1ac:	add	fp, sp, #24
   1a1b0:	mov	r5, r1
   1a1b4:	ldr	r4, [r0]
   1a1b8:	ldr	r1, [r0, #4]
   1a1bc:	mov	r6, #0
   1a1c0:	cmp	r4, r1
   1a1c4:	bcs	1a230 <__assert_fail@plt+0x8368>
   1a1c8:	mov	r9, r2
   1a1cc:	mov	r8, r0
   1a1d0:	mov	r6, #0
   1a1d4:	b	1a1e8 <__assert_fail@plt+0x8320>
   1a1d8:	ldr	r1, [r8, #4]
   1a1dc:	add	r4, r4, #8
   1a1e0:	cmp	r4, r1
   1a1e4:	bcs	1a230 <__assert_fail@plt+0x8368>
   1a1e8:	ldr	r0, [r4]
   1a1ec:	cmp	r0, #0
   1a1f0:	cmpne	r4, #0
   1a1f4:	beq	1a1dc <__assert_fail@plt+0x8314>
   1a1f8:	mov	r1, r9
   1a1fc:	blx	r5
   1a200:	cmp	r0, #0
   1a204:	beq	1a230 <__assert_fail@plt+0x8368>
   1a208:	mov	r7, r4
   1a20c:	ldr	r7, [r7, #4]
   1a210:	add	r6, r6, #1
   1a214:	cmp	r7, #0
   1a218:	beq	1a1d8 <__assert_fail@plt+0x8310>
   1a21c:	ldr	r0, [r7]
   1a220:	mov	r1, r9
   1a224:	blx	r5
   1a228:	cmp	r0, #0
   1a22c:	bne	1a20c <__assert_fail@plt+0x8344>
   1a230:	mov	r0, r6
   1a234:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a238:	ldrb	r2, [r0]
   1a23c:	cmp	r2, #0
   1a240:	moveq	r0, #0
   1a244:	bxeq	lr
   1a248:	add	r3, r0, #1
   1a24c:	mov	r0, #0
   1a250:	rsb	r0, r0, r0, lsl #5
   1a254:	uxtab	r0, r0, r2
   1a258:	udiv	r2, r0, r1
   1a25c:	mls	r0, r2, r1, r0
   1a260:	ldrb	r2, [r3], #1
   1a264:	cmp	r2, #0
   1a268:	bne	1a250 <__assert_fail@plt+0x8388>
   1a26c:	bx	lr
   1a270:	movw	r1, #31160	; 0x79b8
   1a274:	movt	r1, #3
   1a278:	vld1.32	{d16-d17}, [r1]!
   1a27c:	ldr	r1, [r1]
   1a280:	vst1.32	{d16-d17}, [r0]!
   1a284:	str	r1, [r0]
   1a288:	bx	lr
   1a28c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a290:	add	fp, sp, #24
   1a294:	movw	r9, #42164	; 0xa4b4
   1a298:	cmp	r3, #0
   1a29c:	movw	r5, #42144	; 0xa4a0
   1a2a0:	mov	r6, r0
   1a2a4:	mov	r0, #40	; 0x28
   1a2a8:	mov	r7, r1
   1a2ac:	movt	r9, #1
   1a2b0:	movne	r9, r3
   1a2b4:	cmp	r2, #0
   1a2b8:	movt	r5, #1
   1a2bc:	movne	r5, r2
   1a2c0:	bl	34810 <__assert_fail@plt+0x22948>
   1a2c4:	mov	r8, #0
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a488 <__assert_fail@plt+0x85c0>
   1a2d0:	mov	r4, r0
   1a2d4:	movw	r0, #31160	; 0x79b8
   1a2d8:	cmp	r7, #0
   1a2dc:	movt	r0, #3
   1a2e0:	moveq	r7, r0
   1a2e4:	cmp	r7, r0
   1a2e8:	str	r7, [r4, #20]
   1a2ec:	beq	1a368 <__assert_fail@plt+0x84a0>
   1a2f0:	vldr	s2, [pc, #408]	; 1a490 <__assert_fail@plt+0x85c8>
   1a2f4:	vldr	s0, [r7, #8]
   1a2f8:	vcmpe.f32	s0, s2
   1a2fc:	vmrs	APSR_nzcv, fpscr
   1a300:	ble	1a414 <__assert_fail@plt+0x854c>
   1a304:	vldr	s4, [pc, #392]	; 1a494 <__assert_fail@plt+0x85cc>
   1a308:	vcmpe.f32	s0, s4
   1a30c:	vmrs	APSR_nzcv, fpscr
   1a310:	bpl	1a414 <__assert_fail@plt+0x854c>
   1a314:	vldr	s4, [pc, #380]	; 1a498 <__assert_fail@plt+0x85d0>
   1a318:	vldr	s6, [r7, #12]
   1a31c:	vcmpe.f32	s6, s4
   1a320:	vmrs	APSR_nzcv, fpscr
   1a324:	ble	1a414 <__assert_fail@plt+0x854c>
   1a328:	vldr	s4, [r7]
   1a32c:	vcmpe.f32	s4, #0.0
   1a330:	vmrs	APSR_nzcv, fpscr
   1a334:	blt	1a414 <__assert_fail@plt+0x854c>
   1a338:	vadd.f32	s2, s4, s2
   1a33c:	vcmpe.f32	s2, s0
   1a340:	vmrs	APSR_nzcv, fpscr
   1a344:	bpl	1a414 <__assert_fail@plt+0x854c>
   1a348:	vldr	s0, [r7, #4]
   1a34c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1a350:	vcmpe.f32	s0, s4
   1a354:	vmrs	APSR_nzcv, fpscr
   1a358:	bhi	1a414 <__assert_fail@plt+0x854c>
   1a35c:	vcmpe.f32	s2, s0
   1a360:	vmrs	APSR_nzcv, fpscr
   1a364:	bpl	1a414 <__assert_fail@plt+0x854c>
   1a368:	ldrb	r0, [r7, #16]
   1a36c:	cmp	r0, #0
   1a370:	bne	1a39c <__assert_fail@plt+0x84d4>
   1a374:	vmov	s2, r6
   1a378:	vldr	s0, [r7, #8]
   1a37c:	vldr	s4, [pc, #280]	; 1a49c <__assert_fail@plt+0x85d4>
   1a380:	vcvt.f32.u32	s2, s2
   1a384:	vdiv.f32	s2, s2, s0
   1a388:	vcvt.u32.f32	s0, s2
   1a38c:	vcmpe.f32	s2, s4
   1a390:	vmrs	APSR_nzcv, fpscr
   1a394:	bge	1a424 <__assert_fail@plt+0x855c>
   1a398:	vmov	r6, s0
   1a39c:	cmp	r6, #10
   1a3a0:	movls	r6, #10
   1a3a4:	orr	r0, r6, #1
   1a3a8:	cmn	r0, #1
   1a3ac:	beq	1a424 <__assert_fail@plt+0x855c>
   1a3b0:	ldr	r6, [fp, #8]
   1a3b4:	mov	r1, #3
   1a3b8:	cmp	r0, #10
   1a3bc:	bcc	1a3f4 <__assert_fail@plt+0x852c>
   1a3c0:	mov	r1, #3
   1a3c4:	mov	r3, #9
   1a3c8:	mov	r2, #12
   1a3cc:	udiv	r7, r0, r1
   1a3d0:	mls	r7, r7, r1, r0
   1a3d4:	cmp	r7, #0
   1a3d8:	beq	1a3f4 <__assert_fail@plt+0x852c>
   1a3dc:	add	r3, r3, r2
   1a3e0:	add	r2, r2, #8
   1a3e4:	add	r1, r1, #2
   1a3e8:	add	r3, r3, #4
   1a3ec:	cmp	r3, r0
   1a3f0:	bcc	1a3cc <__assert_fail@plt+0x8504>
   1a3f4:	udiv	r2, r0, r1
   1a3f8:	mls	r1, r2, r1, r0
   1a3fc:	cmp	r1, #0
   1a400:	bne	1a41c <__assert_fail@plt+0x8554>
   1a404:	add	r0, r0, #2
   1a408:	cmn	r0, #1
   1a40c:	bne	1a3b4 <__assert_fail@plt+0x84ec>
   1a410:	b	1a424 <__assert_fail@plt+0x855c>
   1a414:	str	r0, [r4, #20]
   1a418:	b	1a42c <__assert_fail@plt+0x8564>
   1a41c:	cmp	r0, #536870912	; 0x20000000
   1a420:	bcc	1a43c <__assert_fail@plt+0x8574>
   1a424:	mov	r0, #0
   1a428:	str	r0, [r4, #8]
   1a42c:	mov	r0, r4
   1a430:	bl	176c0 <__assert_fail@plt+0x57f8>
   1a434:	mov	r0, r8
   1a438:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a43c:	cmp	r0, #0
   1a440:	str	r0, [r4, #8]
   1a444:	beq	1a42c <__assert_fail@plt+0x8564>
   1a448:	mov	r1, #8
   1a44c:	bl	347bc <__assert_fail@plt+0x228f4>
   1a450:	cmp	r0, #0
   1a454:	str	r0, [r4]
   1a458:	beq	1a42c <__assert_fail@plt+0x8564>
   1a45c:	mov	r1, #0
   1a460:	str	r5, [r4, #24]
   1a464:	str	r9, [r4, #28]
   1a468:	str	r6, [r4, #32]
   1a46c:	mov	r8, r4
   1a470:	str	r1, [r4, #36]	; 0x24
   1a474:	str	r1, [r4, #12]
   1a478:	str	r1, [r4, #16]
   1a47c:	ldr	r1, [r4, #8]
   1a480:	add	r0, r0, r1, lsl #3
   1a484:	str	r0, [r4, #4]
   1a488:	mov	r0, r8
   1a48c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a490:	stclcc	12, cr12, [ip, #820]	; 0x334
   1a494:	svccc	0x00666666
   1a498:	svccc	0x008ccccd
   1a49c:	svcmi	0x00800000
   1a4a0:	ror	r2, r0, #3
   1a4a4:	udiv	r2, r2, r1
   1a4a8:	mul	r1, r2, r1
   1a4ac:	rsb	r0, r1, r0, ror #3
   1a4b0:	bx	lr
   1a4b4:	sub	r0, r0, r1
   1a4b8:	clz	r0, r0
   1a4bc:	lsr	r0, r0, #5
   1a4c0:	bx	lr
   1a4c4:	push	{r4, r5, r6, r7, fp, lr}
   1a4c8:	add	fp, sp, #16
   1a4cc:	mov	r4, r0
   1a4d0:	ldr	r5, [r0]
   1a4d4:	ldr	r0, [r0, #4]
   1a4d8:	cmp	r5, r0
   1a4dc:	bcs	1a580 <__assert_fail@plt+0x86b8>
   1a4e0:	mov	r6, #0
   1a4e4:	b	1a500 <__assert_fail@plt+0x8638>
   1a4e8:	str	r6, [r5]
   1a4ec:	str	r6, [r5, #4]
   1a4f0:	ldr	r0, [r4, #4]
   1a4f4:	add	r5, r5, #8
   1a4f8:	cmp	r5, r0
   1a4fc:	bcs	1a580 <__assert_fail@plt+0x86b8>
   1a500:	ldr	r1, [r5]
   1a504:	cmp	r1, #0
   1a508:	beq	1a4f4 <__assert_fail@plt+0x862c>
   1a50c:	ldr	r1, [r4, #32]
   1a510:	ldr	r7, [r5, #4]
   1a514:	cmp	r1, #0
   1a518:	mov	r0, r1
   1a51c:	movwne	r0, #1
   1a520:	cmp	r7, #0
   1a524:	bne	1a568 <__assert_fail@plt+0x86a0>
   1a528:	cmp	r0, #0
   1a52c:	beq	1a4e8 <__assert_fail@plt+0x8620>
   1a530:	ldr	r0, [r5]
   1a534:	blx	r1
   1a538:	b	1a4e8 <__assert_fail@plt+0x8620>
   1a53c:	str	r6, [r7]
   1a540:	cmp	r1, #0
   1a544:	ldr	r2, [r7, #4]
   1a548:	ldr	r0, [r4, #36]	; 0x24
   1a54c:	str	r0, [r7, #4]
   1a550:	mov	r0, r1
   1a554:	str	r7, [r4, #36]	; 0x24
   1a558:	movwne	r0, #1
   1a55c:	cmp	r2, #0
   1a560:	mov	r7, r2
   1a564:	beq	1a528 <__assert_fail@plt+0x8660>
   1a568:	tst	r0, #1
   1a56c:	beq	1a53c <__assert_fail@plt+0x8674>
   1a570:	ldr	r0, [r7]
   1a574:	blx	r1
   1a578:	ldr	r1, [r4, #32]
   1a57c:	b	1a53c <__assert_fail@plt+0x8674>
   1a580:	mov	r0, #0
   1a584:	str	r0, [r4, #12]
   1a588:	str	r0, [r4, #16]
   1a58c:	pop	{r4, r5, r6, r7, fp, pc}
   1a590:	push	{r4, r5, r6, sl, fp, lr}
   1a594:	add	fp, sp, #16
   1a598:	mov	r4, r0
   1a59c:	ldr	r0, [r0, #32]
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a618 <__assert_fail@plt+0x8750>
   1a5a8:	ldr	r0, [r4, #16]
   1a5ac:	cmp	r0, #0
   1a5b0:	beq	1a618 <__assert_fail@plt+0x8750>
   1a5b4:	ldr	r5, [r4]
   1a5b8:	ldr	r1, [r4, #4]
   1a5bc:	cmp	r5, r1
   1a5c0:	bcc	1a5d8 <__assert_fail@plt+0x8710>
   1a5c4:	b	1a618 <__assert_fail@plt+0x8750>
   1a5c8:	ldr	r1, [r4, #4]
   1a5cc:	add	r5, r5, #8
   1a5d0:	cmp	r5, r1
   1a5d4:	bcs	1a618 <__assert_fail@plt+0x8750>
   1a5d8:	ldr	r0, [r5]
   1a5dc:	cmp	r0, #0
   1a5e0:	cmpne	r5, #0
   1a5e4:	beq	1a5cc <__assert_fail@plt+0x8704>
   1a5e8:	ldr	r1, [r4, #32]
   1a5ec:	blx	r1
   1a5f0:	ldr	r6, [r5, #4]
   1a5f4:	cmp	r6, #0
   1a5f8:	beq	1a5c8 <__assert_fail@plt+0x8700>
   1a5fc:	ldr	r1, [r4, #32]
   1a600:	ldr	r0, [r6]
   1a604:	blx	r1
   1a608:	ldr	r6, [r6, #4]
   1a60c:	cmp	r6, #0
   1a610:	bne	1a5fc <__assert_fail@plt+0x8734>
   1a614:	b	1a5c8 <__assert_fail@plt+0x8700>
   1a618:	ldr	r5, [r4]
   1a61c:	ldr	r1, [r4, #4]
   1a620:	cmp	r5, r1
   1a624:	bcc	1a638 <__assert_fail@plt+0x8770>
   1a628:	b	1a660 <__assert_fail@plt+0x8798>
   1a62c:	add	r5, r5, #8
   1a630:	cmp	r5, r1
   1a634:	bcs	1a660 <__assert_fail@plt+0x8798>
   1a638:	ldr	r0, [r5, #4]
   1a63c:	cmp	r0, #0
   1a640:	beq	1a62c <__assert_fail@plt+0x8764>
   1a644:	ldr	r6, [r0, #4]
   1a648:	bl	176c0 <__assert_fail@plt+0x57f8>
   1a64c:	cmp	r6, #0
   1a650:	mov	r0, r6
   1a654:	bne	1a644 <__assert_fail@plt+0x877c>
   1a658:	ldr	r1, [r4, #4]
   1a65c:	b	1a62c <__assert_fail@plt+0x8764>
   1a660:	ldr	r0, [r4, #36]	; 0x24
   1a664:	cmp	r0, #0
   1a668:	beq	1a680 <__assert_fail@plt+0x87b8>
   1a66c:	ldr	r5, [r0, #4]
   1a670:	bl	176c0 <__assert_fail@plt+0x57f8>
   1a674:	cmp	r5, #0
   1a678:	mov	r0, r5
   1a67c:	bne	1a66c <__assert_fail@plt+0x87a4>
   1a680:	ldr	r0, [r4]
   1a684:	bl	176c0 <__assert_fail@plt+0x57f8>
   1a688:	mov	r0, r4
   1a68c:	pop	{r4, r5, r6, sl, fp, lr}
   1a690:	b	176c0 <__assert_fail@plt+0x57f8>
   1a694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a698:	add	fp, sp, #28
   1a69c:	sub	sp, sp, #44	; 0x2c
   1a6a0:	mov	r7, r0
   1a6a4:	mov	r4, r0
   1a6a8:	ldr	r0, [r7, #20]!
   1a6ac:	ldrb	r2, [r0, #16]
   1a6b0:	cmp	r2, #0
   1a6b4:	bne	1a6e4 <__assert_fail@plt+0x881c>
   1a6b8:	vmov	s2, r1
   1a6bc:	vldr	s0, [r0, #8]
   1a6c0:	vldr	s4, [pc, #564]	; 1a8fc <__assert_fail@plt+0x8a34>
   1a6c4:	mov	r5, #0
   1a6c8:	vcvt.f32.u32	s2, s2
   1a6cc:	vdiv.f32	s2, s2, s0
   1a6d0:	vcvt.u32.f32	s0, s2
   1a6d4:	vcmpe.f32	s2, s4
   1a6d8:	vmrs	APSR_nzcv, fpscr
   1a6dc:	bge	1a8ec <__assert_fail@plt+0x8a24>
   1a6e0:	vmov	r1, s0
   1a6e4:	cmp	r1, #10
   1a6e8:	mov	r5, #0
   1a6ec:	movls	r1, #10
   1a6f0:	orr	r6, r1, #1
   1a6f4:	cmn	r6, #1
   1a6f8:	beq	1a8ec <__assert_fail@plt+0x8a24>
   1a6fc:	mov	r0, #3
   1a700:	cmp	r6, #10
   1a704:	bcc	1a73c <__assert_fail@plt+0x8874>
   1a708:	mov	r0, #3
   1a70c:	mov	r2, #9
   1a710:	mov	r1, #12
   1a714:	udiv	r3, r6, r0
   1a718:	mls	r3, r3, r0, r6
   1a71c:	cmp	r3, #0
   1a720:	beq	1a73c <__assert_fail@plt+0x8874>
   1a724:	add	r2, r2, r1
   1a728:	add	r1, r1, #8
   1a72c:	add	r0, r0, #2
   1a730:	add	r2, r2, #4
   1a734:	cmp	r2, r6
   1a738:	bcc	1a714 <__assert_fail@plt+0x884c>
   1a73c:	udiv	r1, r6, r0
   1a740:	mls	r0, r1, r0, r6
   1a744:	cmp	r0, #0
   1a748:	bne	1a75c <__assert_fail@plt+0x8894>
   1a74c:	add	r6, r6, #2
   1a750:	cmn	r6, #1
   1a754:	bne	1a6fc <__assert_fail@plt+0x8834>
   1a758:	b	1a8ec <__assert_fail@plt+0x8a24>
   1a75c:	sub	r0, r6, #1
   1a760:	cmn	r0, #-536870910	; 0xe0000002
   1a764:	bhi	1a8ec <__assert_fail@plt+0x8a24>
   1a768:	ldr	r0, [r4, #8]
   1a76c:	cmp	r6, r0
   1a770:	bne	1a77c <__assert_fail@plt+0x88b4>
   1a774:	mov	r5, #1
   1a778:	b	1a8ec <__assert_fail@plt+0x8a24>
   1a77c:	mov	r0, r6
   1a780:	mov	r1, #8
   1a784:	bl	347bc <__assert_fail@plt+0x228f4>
   1a788:	cmp	r0, #0
   1a78c:	str	r0, [sp, #4]
   1a790:	beq	1a8ec <__assert_fail@plt+0x8a24>
   1a794:	add	r0, r0, r6, lsl #3
   1a798:	mov	r1, #0
   1a79c:	add	r5, sp, #4
   1a7a0:	mov	sl, r4
   1a7a4:	mov	r2, #0
   1a7a8:	str	r1, [sp, #20]
   1a7ac:	str	r1, [sp, #16]
   1a7b0:	str	r6, [sp, #12]
   1a7b4:	mov	r1, r4
   1a7b8:	str	r0, [sp, #8]
   1a7bc:	add	r0, r5, #20
   1a7c0:	vld1.32	{d16-d17}, [r7]
   1a7c4:	vst1.32	{d16-d17}, [r0]
   1a7c8:	ldr	r0, [sl, #36]!	; 0x24
   1a7cc:	str	r0, [sp, #40]	; 0x28
   1a7d0:	mov	r0, r5
   1a7d4:	bl	1a900 <__assert_fail@plt+0x8a38>
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1a804 <__assert_fail@plt+0x893c>
   1a7e0:	ldr	r0, [r4]
   1a7e4:	bl	176c0 <__assert_fail@plt+0x57f8>
   1a7e8:	mov	r0, #36	; 0x24
   1a7ec:	vld1.32	{d16-d17}, [r5], r0
   1a7f0:	vst1.32	{d16-d17}, [r4], r0
   1a7f4:	ldr	r0, [r5]
   1a7f8:	mov	r5, #1
   1a7fc:	str	r0, [r4]
   1a800:	b	1a8ec <__assert_fail@plt+0x8a24>
   1a804:	ldr	r0, [sp, #40]	; 0x28
   1a808:	str	r0, [sl]
   1a80c:	ldr	r0, [sp, #8]
   1a810:	ldr	r8, [sp, #4]
   1a814:	cmp	r8, r0
   1a818:	str	r0, [sp]
   1a81c:	bcs	1a8c8 <__assert_fail@plt+0x8a00>
   1a820:	mov	r9, #0
   1a824:	b	1a83c <__assert_fail@plt+0x8974>
   1a828:	str	r9, [r8, #4]
   1a82c:	ldr	r0, [sp]
   1a830:	add	r8, r8, #8
   1a834:	cmp	r8, r0
   1a838:	bcs	1a8c8 <__assert_fail@plt+0x8a00>
   1a83c:	ldr	r0, [r8]
   1a840:	cmp	r0, #0
   1a844:	beq	1a82c <__assert_fail@plt+0x8964>
   1a848:	ldr	r6, [r8, #4]
   1a84c:	cmp	r6, #0
   1a850:	beq	1a828 <__assert_fail@plt+0x8960>
   1a854:	ldr	r1, [r4, #8]
   1a858:	b	1a87c <__assert_fail@plt+0x89b4>
   1a85c:	add	r0, r3, r0, lsl #3
   1a860:	add	r0, r0, #4
   1a864:	ldr	r3, [r0]
   1a868:	cmp	r2, #0
   1a86c:	str	r3, [r6, #4]
   1a870:	str	r6, [r0]
   1a874:	mov	r6, r2
   1a878:	beq	1a828 <__assert_fail@plt+0x8960>
   1a87c:	ldr	r5, [r6]
   1a880:	ldr	r2, [r4, #24]
   1a884:	mov	r0, r5
   1a888:	blx	r2
   1a88c:	ldr	r1, [r4, #8]
   1a890:	cmp	r0, r1
   1a894:	bcs	1a8f8 <__assert_fail@plt+0x8a30>
   1a898:	ldr	r3, [r4]
   1a89c:	ldr	r2, [r6, #4]
   1a8a0:	ldr	r7, [r3, r0, lsl #3]
   1a8a4:	cmp	r7, #0
   1a8a8:	bne	1a85c <__assert_fail@plt+0x8994>
   1a8ac:	str	r5, [r3, r0, lsl #3]
   1a8b0:	ldr	r0, [r4, #12]
   1a8b4:	add	r0, r0, #1
   1a8b8:	str	r0, [r4, #12]
   1a8bc:	mov	r0, sl
   1a8c0:	str	r9, [r6]
   1a8c4:	b	1a864 <__assert_fail@plt+0x899c>
   1a8c8:	add	r1, sp, #4
   1a8cc:	mov	r0, r4
   1a8d0:	mov	r2, #0
   1a8d4:	mov	r5, #0
   1a8d8:	bl	1a900 <__assert_fail@plt+0x8a38>
   1a8dc:	cmp	r0, #0
   1a8e0:	beq	1a8f8 <__assert_fail@plt+0x8a30>
   1a8e4:	ldr	r0, [sp, #4]
   1a8e8:	bl	176c0 <__assert_fail@plt+0x57f8>
   1a8ec:	mov	r0, r5
   1a8f0:	sub	sp, fp, #28
   1a8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8f8:	bl	11e8c <abort@plt>
   1a8fc:	svcmi	0x00800000
   1a900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a904:	add	fp, sp, #28
   1a908:	sub	sp, sp, #12
   1a90c:	ldr	sl, [r1]
   1a910:	str	r1, [sp, #8]
   1a914:	ldr	r1, [r1, #4]
   1a918:	mov	r7, r0
   1a91c:	mov	r0, #1
   1a920:	str	r2, [sp, #4]
   1a924:	cmp	sl, r1
   1a928:	bcs	1aa84 <__assert_fail@plt+0x8bbc>
   1a92c:	add	r8, r7, #36	; 0x24
   1a930:	mov	r9, #0
   1a934:	b	1a970 <__assert_fail@plt+0x8aa8>
   1a938:	str	r4, [r6, r5, lsl #3]
   1a93c:	ldr	r0, [r7, #12]
   1a940:	add	r0, r0, #1
   1a944:	str	r0, [r7, #12]
   1a948:	ldr	r1, [sp, #8]
   1a94c:	str	r9, [sl]
   1a950:	ldr	r0, [r1, #12]
   1a954:	sub	r0, r0, #1
   1a958:	str	r0, [r1, #12]
   1a95c:	ldr	r0, [sp, #8]
   1a960:	add	sl, sl, #8
   1a964:	ldr	r0, [r0, #4]
   1a968:	cmp	sl, r0
   1a96c:	bcs	1aa80 <__assert_fail@plt+0x8bb8>
   1a970:	ldr	r4, [sl]
   1a974:	cmp	r4, #0
   1a978:	beq	1a95c <__assert_fail@plt+0x8a94>
   1a97c:	ldr	r5, [sl, #4]
   1a980:	cmp	r5, #0
   1a984:	beq	1aa00 <__assert_fail@plt+0x8b38>
   1a988:	ldr	r1, [r7, #8]
   1a98c:	b	1a9c0 <__assert_fail@plt+0x8af8>
   1a990:	str	r4, [r3, r0, lsl #3]
   1a994:	ldr	r0, [r7, #12]
   1a998:	add	r0, r0, #1
   1a99c:	str	r0, [r7, #12]
   1a9a0:	mov	r0, r8
   1a9a4:	str	r9, [r5]
   1a9a8:	ldr	r3, [r0]
   1a9ac:	cmp	r2, #0
   1a9b0:	str	r3, [r5, #4]
   1a9b4:	str	r5, [r0]
   1a9b8:	mov	r5, r2
   1a9bc:	beq	1a9fc <__assert_fail@plt+0x8b34>
   1a9c0:	ldr	r4, [r5]
   1a9c4:	ldr	r2, [r7, #24]
   1a9c8:	mov	r0, r4
   1a9cc:	blx	r2
   1a9d0:	ldr	r1, [r7, #8]
   1a9d4:	cmp	r0, r1
   1a9d8:	bcs	1aa98 <__assert_fail@plt+0x8bd0>
   1a9dc:	ldr	r3, [r7]
   1a9e0:	ldr	r2, [r5, #4]
   1a9e4:	ldr	r6, [r3, r0, lsl #3]
   1a9e8:	cmp	r6, #0
   1a9ec:	beq	1a990 <__assert_fail@plt+0x8ac8>
   1a9f0:	add	r0, r3, r0, lsl #3
   1a9f4:	add	r0, r0, #4
   1a9f8:	b	1a9a8 <__assert_fail@plt+0x8ae0>
   1a9fc:	ldr	r4, [sl]
   1aa00:	ldr	r0, [sp, #4]
   1aa04:	str	r9, [sl, #4]
   1aa08:	cmp	r0, #0
   1aa0c:	bne	1a95c <__assert_fail@plt+0x8a94>
   1aa10:	ldr	r1, [r7, #8]
   1aa14:	ldr	r2, [r7, #24]
   1aa18:	mov	r0, r4
   1aa1c:	blx	r2
   1aa20:	mov	r5, r0
   1aa24:	ldr	r0, [r7, #8]
   1aa28:	cmp	r5, r0
   1aa2c:	bcs	1aa98 <__assert_fail@plt+0x8bd0>
   1aa30:	ldr	r6, [r7]
   1aa34:	ldr	r0, [r6, r5, lsl #3]
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1a938 <__assert_fail@plt+0x8a70>
   1aa40:	ldr	r0, [r8]
   1aa44:	cmp	r0, #0
   1aa48:	beq	1aa58 <__assert_fail@plt+0x8b90>
   1aa4c:	ldr	r1, [r0, #4]
   1aa50:	str	r1, [r8]
   1aa54:	b	1aa68 <__assert_fail@plt+0x8ba0>
   1aa58:	mov	r0, #8
   1aa5c:	bl	34810 <__assert_fail@plt+0x22948>
   1aa60:	cmp	r0, #0
   1aa64:	beq	1aa8c <__assert_fail@plt+0x8bc4>
   1aa68:	add	r1, r6, r5, lsl #3
   1aa6c:	str	r4, [r0]
   1aa70:	ldr	r2, [r1, #4]
   1aa74:	str	r2, [r0, #4]
   1aa78:	str	r0, [r1, #4]
   1aa7c:	b	1a948 <__assert_fail@plt+0x8a80>
   1aa80:	mov	r0, #1
   1aa84:	sub	sp, fp, #28
   1aa88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa8c:	mov	r0, #0
   1aa90:	sub	sp, fp, #28
   1aa94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa98:	bl	11e8c <abort@plt>
   1aa9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaa0:	add	fp, sp, #28
   1aaa4:	sub	sp, sp, #4
   1aaa8:	cmp	r1, #0
   1aaac:	beq	1adc8 <__assert_fail@plt+0x8f00>
   1aab0:	mov	r8, r2
   1aab4:	mov	sl, r1
   1aab8:	ldr	r1, [r0, #8]
   1aabc:	ldr	r2, [r0, #24]
   1aac0:	mov	r4, r0
   1aac4:	mov	r0, sl
   1aac8:	blx	r2
   1aacc:	mov	r7, r0
   1aad0:	ldr	r0, [r4, #8]
   1aad4:	cmp	r7, r0
   1aad8:	bcs	1adc8 <__assert_fail@plt+0x8f00>
   1aadc:	ldr	r5, [r4]
   1aae0:	mov	r9, r5
   1aae4:	ldr	r1, [r9, r7, lsl #3]!
   1aae8:	cmp	r1, #0
   1aaec:	beq	1ab78 <__assert_fail@plt+0x8cb0>
   1aaf0:	cmp	r1, sl
   1aaf4:	beq	1ab20 <__assert_fail@plt+0x8c58>
   1aaf8:	ldr	r2, [r4, #28]
   1aafc:	mov	r0, sl
   1ab00:	blx	r2
   1ab04:	cmp	r0, #0
   1ab08:	mov	r6, r9
   1ab0c:	beq	1ab34 <__assert_fail@plt+0x8c6c>
   1ab10:	ldr	r0, [r6]
   1ab14:	cmp	r0, #0
   1ab18:	bne	1ab24 <__assert_fail@plt+0x8c5c>
   1ab1c:	b	1ab78 <__assert_fail@plt+0x8cb0>
   1ab20:	mov	r0, sl
   1ab24:	cmp	r8, #0
   1ab28:	mov	r7, #0
   1ab2c:	strne	r0, [r8]
   1ab30:	b	1ad64 <__assert_fail@plt+0x8e9c>
   1ab34:	add	r6, r5, r7, lsl #3
   1ab38:	ldr	r0, [r6, #4]!
   1ab3c:	cmp	r0, #0
   1ab40:	beq	1ab78 <__assert_fail@plt+0x8cb0>
   1ab44:	ldr	r1, [r0]
   1ab48:	cmp	r1, sl
   1ab4c:	beq	1ab6c <__assert_fail@plt+0x8ca4>
   1ab50:	ldr	r2, [r4, #28]
   1ab54:	mov	r0, sl
   1ab58:	blx	r2
   1ab5c:	ldr	r6, [r6]
   1ab60:	cmp	r0, #0
   1ab64:	beq	1ab38 <__assert_fail@plt+0x8c70>
   1ab68:	b	1ab10 <__assert_fail@plt+0x8c48>
   1ab6c:	mov	r0, sl
   1ab70:	cmp	r0, #0
   1ab74:	bne	1ab24 <__assert_fail@plt+0x8c5c>
   1ab78:	vldr	s0, [r4, #8]
   1ab7c:	vldr	s2, [r4, #12]
   1ab80:	ldr	r0, [r4, #20]
   1ab84:	vcvt.f32.u32	s0, s0
   1ab88:	vcvt.f32.u32	s4, s2
   1ab8c:	vldr	s2, [r0, #8]
   1ab90:	vmul.f32	s6, s2, s0
   1ab94:	vcmpe.f32	s6, s4
   1ab98:	vmrs	APSR_nzcv, fpscr
   1ab9c:	bpl	1acf0 <__assert_fail@plt+0x8e28>
   1aba0:	movw	r1, #31160	; 0x79b8
   1aba4:	movt	r1, #3
   1aba8:	cmp	r0, r1
   1abac:	beq	1ac38 <__assert_fail@plt+0x8d70>
   1abb0:	vldr	s6, [pc, #532]	; 1adcc <__assert_fail@plt+0x8f04>
   1abb4:	vcmpe.f32	s2, s6
   1abb8:	vmrs	APSR_nzcv, fpscr
   1abbc:	ble	1ac24 <__assert_fail@plt+0x8d5c>
   1abc0:	vldr	s8, [pc, #520]	; 1add0 <__assert_fail@plt+0x8f08>
   1abc4:	vcmpe.f32	s2, s8
   1abc8:	vmrs	APSR_nzcv, fpscr
   1abcc:	bpl	1ac24 <__assert_fail@plt+0x8d5c>
   1abd0:	vldr	s8, [pc, #508]	; 1add4 <__assert_fail@plt+0x8f0c>
   1abd4:	vldr	s10, [r0, #12]
   1abd8:	vcmpe.f32	s10, s8
   1abdc:	vmrs	APSR_nzcv, fpscr
   1abe0:	ble	1ac24 <__assert_fail@plt+0x8d5c>
   1abe4:	vldr	s8, [r0]
   1abe8:	vcmpe.f32	s8, #0.0
   1abec:	vmrs	APSR_nzcv, fpscr
   1abf0:	blt	1ac24 <__assert_fail@plt+0x8d5c>
   1abf4:	vadd.f32	s6, s8, s6
   1abf8:	vcmpe.f32	s6, s2
   1abfc:	vmrs	APSR_nzcv, fpscr
   1ac00:	bpl	1ac24 <__assert_fail@plt+0x8d5c>
   1ac04:	vldr	s8, [r0, #4]
   1ac08:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1ac0c:	vcmpe.f32	s8, s10
   1ac10:	vmrs	APSR_nzcv, fpscr
   1ac14:	bhi	1ac24 <__assert_fail@plt+0x8d5c>
   1ac18:	vcmpe.f32	s6, s8
   1ac1c:	vmrs	APSR_nzcv, fpscr
   1ac20:	bmi	1ac3c <__assert_fail@plt+0x8d74>
   1ac24:	vldr	s2, [pc, #428]	; 1add8 <__assert_fail@plt+0x8f10>
   1ac28:	movw	r0, #31160	; 0x79b8
   1ac2c:	movt	r0, #3
   1ac30:	str	r0, [r4, #20]
   1ac34:	b	1ac3c <__assert_fail@plt+0x8d74>
   1ac38:	mov	r0, r1
   1ac3c:	vmul.f32	s6, s2, s0
   1ac40:	vcmpe.f32	s6, s4
   1ac44:	vmrs	APSR_nzcv, fpscr
   1ac48:	bpl	1acf0 <__assert_fail@plt+0x8e28>
   1ac4c:	vldr	s4, [r0, #12]
   1ac50:	ldrb	r0, [r0, #16]
   1ac54:	mvn	r7, #0
   1ac58:	cmp	r0, #0
   1ac5c:	vmul.f32	s0, s4, s0
   1ac60:	vldr	s4, [pc, #372]	; 1addc <__assert_fail@plt+0x8f14>
   1ac64:	vmul.f32	s2, s2, s0
   1ac68:	vseleq.f32	s0, s2, s0
   1ac6c:	vcmpe.f32	s0, s4
   1ac70:	vmrs	APSR_nzcv, fpscr
   1ac74:	bge	1ad64 <__assert_fail@plt+0x8e9c>
   1ac78:	vcvt.u32.f32	s0, s0
   1ac7c:	mov	r0, r4
   1ac80:	vmov	r1, s0
   1ac84:	bl	1a694 <__assert_fail@plt+0x87cc>
   1ac88:	cmp	r0, #0
   1ac8c:	beq	1ad64 <__assert_fail@plt+0x8e9c>
   1ac90:	ldr	r1, [r4, #8]
   1ac94:	ldr	r2, [r4, #24]
   1ac98:	mov	r0, sl
   1ac9c:	blx	r2
   1aca0:	mov	r7, r0
   1aca4:	ldr	r0, [r4, #8]
   1aca8:	cmp	r7, r0
   1acac:	bcs	1adc8 <__assert_fail@plt+0x8f00>
   1acb0:	ldr	r5, [r4]
   1acb4:	mov	r9, r5
   1acb8:	ldr	r1, [r9, r7, lsl #3]!
   1acbc:	cmp	r1, #0
   1acc0:	beq	1acf0 <__assert_fail@plt+0x8e28>
   1acc4:	cmp	r1, sl
   1acc8:	mov	r0, sl
   1accc:	beq	1ace8 <__assert_fail@plt+0x8e20>
   1acd0:	ldr	r2, [r4, #28]
   1acd4:	mov	r0, sl
   1acd8:	blx	r2
   1acdc:	cmp	r0, #0
   1ace0:	beq	1ad78 <__assert_fail@plt+0x8eb0>
   1ace4:	ldr	r0, [r9]
   1ace8:	cmp	r0, #0
   1acec:	bne	1adc8 <__assert_fail@plt+0x8f00>
   1acf0:	ldr	r0, [r9]
   1acf4:	cmp	r0, #0
   1acf8:	beq	1ad14 <__assert_fail@plt+0x8e4c>
   1acfc:	ldr	r0, [r4, #36]	; 0x24
   1ad00:	cmp	r0, #0
   1ad04:	beq	1ad34 <__assert_fail@plt+0x8e6c>
   1ad08:	ldr	r1, [r0, #4]
   1ad0c:	str	r1, [r4, #36]	; 0x24
   1ad10:	b	1ad44 <__assert_fail@plt+0x8e7c>
   1ad14:	str	sl, [r9]
   1ad18:	ldr	r0, [r4, #12]
   1ad1c:	ldr	r1, [r4, #16]
   1ad20:	add	r0, r0, #1
   1ad24:	add	r1, r1, #1
   1ad28:	str	r0, [r4, #12]
   1ad2c:	str	r1, [r4, #16]
   1ad30:	b	1ad60 <__assert_fail@plt+0x8e98>
   1ad34:	mov	r0, #8
   1ad38:	bl	34810 <__assert_fail@plt+0x22948>
   1ad3c:	cmp	r0, #0
   1ad40:	beq	1ad70 <__assert_fail@plt+0x8ea8>
   1ad44:	str	sl, [r0]
   1ad48:	ldr	r1, [r9, #4]
   1ad4c:	str	r1, [r0, #4]
   1ad50:	str	r0, [r9, #4]
   1ad54:	ldr	r0, [r4, #16]
   1ad58:	add	r0, r0, #1
   1ad5c:	str	r0, [r4, #16]
   1ad60:	mov	r7, #1
   1ad64:	mov	r0, r7
   1ad68:	sub	sp, fp, #28
   1ad6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad70:	mvn	r7, #0
   1ad74:	b	1ad64 <__assert_fail@plt+0x8e9c>
   1ad78:	add	r6, r5, r7, lsl #3
   1ad7c:	ldr	r0, [r6, #4]!
   1ad80:	cmp	r0, #0
   1ad84:	beq	1acf0 <__assert_fail@plt+0x8e28>
   1ad88:	ldr	r1, [r0]
   1ad8c:	cmp	r1, sl
   1ad90:	beq	1adbc <__assert_fail@plt+0x8ef4>
   1ad94:	ldr	r2, [r4, #28]
   1ad98:	mov	r0, sl
   1ad9c:	blx	r2
   1ada0:	ldr	r6, [r6]
   1ada4:	cmp	r0, #0
   1ada8:	beq	1ad7c <__assert_fail@plt+0x8eb4>
   1adac:	ldr	r0, [r6]
   1adb0:	cmp	r0, #0
   1adb4:	beq	1acf0 <__assert_fail@plt+0x8e28>
   1adb8:	b	1adc8 <__assert_fail@plt+0x8f00>
   1adbc:	mov	r0, sl
   1adc0:	cmp	r0, #0
   1adc4:	beq	1acf0 <__assert_fail@plt+0x8e28>
   1adc8:	bl	11e8c <abort@plt>
   1adcc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1add0:	svccc	0x00666666
   1add4:	svccc	0x008ccccd
   1add8:	svccc	0x004ccccd
   1addc:	svcmi	0x00800000
   1ade0:	push	{r4, sl, fp, lr}
   1ade4:	add	fp, sp, #8
   1ade8:	sub	sp, sp, #8
   1adec:	add	r2, sp, #4
   1adf0:	mov	r4, r1
   1adf4:	bl	1aa9c <__assert_fail@plt+0x8bd4>
   1adf8:	cmn	r0, #1
   1adfc:	beq	1ae10 <__assert_fail@plt+0x8f48>
   1ae00:	ldr	r1, [sp, #4]
   1ae04:	cmp	r0, #0
   1ae08:	moveq	r4, r1
   1ae0c:	b	1ae14 <__assert_fail@plt+0x8f4c>
   1ae10:	mov	r4, #0
   1ae14:	mov	r0, r4
   1ae18:	sub	sp, fp, #8
   1ae1c:	pop	{r4, sl, fp, pc}
   1ae20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ae24:	add	fp, sp, #24
   1ae28:	mov	r9, r1
   1ae2c:	ldr	r1, [r0, #8]
   1ae30:	ldr	r2, [r0, #24]
   1ae34:	mov	r5, r0
   1ae38:	mov	r0, r9
   1ae3c:	blx	r2
   1ae40:	mov	r7, r0
   1ae44:	ldr	r0, [r5, #8]
   1ae48:	cmp	r7, r0
   1ae4c:	bcs	1b0b0 <__assert_fail@plt+0x91e8>
   1ae50:	ldr	r6, [r5]
   1ae54:	mov	r8, #0
   1ae58:	mov	r4, r6
   1ae5c:	ldr	r1, [r4, r7, lsl #3]!
   1ae60:	cmp	r1, #0
   1ae64:	beq	1af18 <__assert_fail@plt+0x9050>
   1ae68:	cmp	r1, r9
   1ae6c:	beq	1ae88 <__assert_fail@plt+0x8fc0>
   1ae70:	ldr	r2, [r5, #28]
   1ae74:	mov	r0, r9
   1ae78:	blx	r2
   1ae7c:	cmp	r0, #0
   1ae80:	beq	1aec0 <__assert_fail@plt+0x8ff8>
   1ae84:	ldr	r9, [r4]
   1ae88:	add	r0, r6, r7, lsl #3
   1ae8c:	ldr	r0, [r0, #4]
   1ae90:	cmp	r0, #0
   1ae94:	beq	1af08 <__assert_fail@plt+0x9040>
   1ae98:	ldm	r0, {r1, r2}
   1ae9c:	stm	r4, {r1, r2}
   1aea0:	mov	r1, #0
   1aea4:	str	r1, [r0]
   1aea8:	ldr	r1, [r5, #36]	; 0x24
   1aeac:	str	r1, [r0, #4]
   1aeb0:	str	r0, [r5, #36]	; 0x24
   1aeb4:	cmp	r9, #0
   1aeb8:	bne	1af50 <__assert_fail@plt+0x9088>
   1aebc:	b	1af18 <__assert_fail@plt+0x9050>
   1aec0:	add	r7, r6, r7, lsl #3
   1aec4:	ldr	r0, [r7, #4]!
   1aec8:	cmp	r0, #0
   1aecc:	beq	1af18 <__assert_fail@plt+0x9050>
   1aed0:	ldr	r1, [r0]
   1aed4:	cmp	r1, r9
   1aed8:	beq	1af20 <__assert_fail@plt+0x9058>
   1aedc:	ldr	r2, [r5, #28]
   1aee0:	mov	r0, r9
   1aee4:	blx	r2
   1aee8:	ldr	r1, [r7]
   1aeec:	cmp	r0, #0
   1aef0:	bne	1af28 <__assert_fail@plt+0x9060>
   1aef4:	ldr	r0, [r1, #4]!
   1aef8:	mov	r7, r1
   1aefc:	cmp	r0, #0
   1af00:	bne	1aed0 <__assert_fail@plt+0x9008>
   1af04:	b	1af18 <__assert_fail@plt+0x9050>
   1af08:	mov	r0, #0
   1af0c:	str	r0, [r4]
   1af10:	cmp	r9, #0
   1af14:	bne	1af50 <__assert_fail@plt+0x9088>
   1af18:	mov	r0, r8
   1af1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af20:	mov	r1, r0
   1af24:	b	1af2c <__assert_fail@plt+0x9064>
   1af28:	ldr	r9, [r1]
   1af2c:	ldr	r0, [r1, #4]
   1af30:	str	r0, [r7]
   1af34:	mov	r0, #0
   1af38:	str	r0, [r1]
   1af3c:	ldr	r0, [r5, #36]	; 0x24
   1af40:	str	r0, [r1, #4]
   1af44:	str	r1, [r5, #36]	; 0x24
   1af48:	cmp	r9, #0
   1af4c:	beq	1af18 <__assert_fail@plt+0x9050>
   1af50:	ldr	r0, [r5, #16]
   1af54:	sub	r0, r0, #1
   1af58:	str	r0, [r5, #16]
   1af5c:	ldr	r0, [r4]
   1af60:	cmp	r0, #0
   1af64:	bne	1b0a4 <__assert_fail@plt+0x91dc>
   1af68:	ldr	r0, [r5, #12]
   1af6c:	vldr	s0, [r5, #8]
   1af70:	sub	r1, r0, #1
   1af74:	str	r1, [r5, #12]
   1af78:	vmov	s2, r1
   1af7c:	ldr	r0, [r5, #20]
   1af80:	vcvt.f32.u32	s0, s0
   1af84:	vcvt.f32.u32	s2, s2
   1af88:	vldr	s4, [r0]
   1af8c:	vmul.f32	s6, s4, s0
   1af90:	vcmpe.f32	s6, s2
   1af94:	vmrs	APSR_nzcv, fpscr
   1af98:	ble	1b0a4 <__assert_fail@plt+0x91dc>
   1af9c:	movw	r1, #31160	; 0x79b8
   1afa0:	movt	r1, #3
   1afa4:	cmp	r0, r1
   1afa8:	beq	1b034 <__assert_fail@plt+0x916c>
   1afac:	vldr	s8, [pc, #256]	; 1b0b4 <__assert_fail@plt+0x91ec>
   1afb0:	vldr	s6, [r0, #8]
   1afb4:	vcmpe.f32	s6, s8
   1afb8:	vmrs	APSR_nzcv, fpscr
   1afbc:	ble	1b020 <__assert_fail@plt+0x9158>
   1afc0:	vldr	s10, [pc, #240]	; 1b0b8 <__assert_fail@plt+0x91f0>
   1afc4:	vcmpe.f32	s6, s10
   1afc8:	vmrs	APSR_nzcv, fpscr
   1afcc:	bpl	1b020 <__assert_fail@plt+0x9158>
   1afd0:	vcmpe.f32	s4, #0.0
   1afd4:	vmrs	APSR_nzcv, fpscr
   1afd8:	blt	1b020 <__assert_fail@plt+0x9158>
   1afdc:	vldr	s10, [r0, #12]
   1afe0:	vldr	s12, [pc, #212]	; 1b0bc <__assert_fail@plt+0x91f4>
   1afe4:	vcmpe.f32	s10, s12
   1afe8:	vmrs	APSR_nzcv, fpscr
   1afec:	ble	1b020 <__assert_fail@plt+0x9158>
   1aff0:	vadd.f32	s8, s4, s8
   1aff4:	vcmpe.f32	s8, s6
   1aff8:	vmrs	APSR_nzcv, fpscr
   1affc:	bpl	1b020 <__assert_fail@plt+0x9158>
   1b000:	vldr	s6, [r0, #4]
   1b004:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1b008:	vcmpe.f32	s6, s10
   1b00c:	vmrs	APSR_nzcv, fpscr
   1b010:	bhi	1b020 <__assert_fail@plt+0x9158>
   1b014:	vcmpe.f32	s8, s6
   1b018:	vmrs	APSR_nzcv, fpscr
   1b01c:	bmi	1b038 <__assert_fail@plt+0x9170>
   1b020:	vldr	s4, [pc, #152]	; 1b0c0 <__assert_fail@plt+0x91f8>
   1b024:	movw	r0, #31160	; 0x79b8
   1b028:	movt	r0, #3
   1b02c:	str	r0, [r5, #20]
   1b030:	b	1b038 <__assert_fail@plt+0x9170>
   1b034:	mov	r0, r1
   1b038:	vmul.f32	s4, s4, s0
   1b03c:	vcmpe.f32	s4, s2
   1b040:	vmrs	APSR_nzcv, fpscr
   1b044:	ble	1b0a4 <__assert_fail@plt+0x91dc>
   1b048:	vldr	s2, [r0, #4]
   1b04c:	ldrb	r1, [r0, #16]
   1b050:	cmp	r1, #0
   1b054:	vmul.f32	s0, s2, s0
   1b058:	bne	1b064 <__assert_fail@plt+0x919c>
   1b05c:	vldr	s2, [r0, #8]
   1b060:	vmul.f32	s0, s0, s2
   1b064:	vcvt.u32.f32	s0, s0
   1b068:	mov	r0, r5
   1b06c:	vmov	r1, s0
   1b070:	bl	1a694 <__assert_fail@plt+0x87cc>
   1b074:	cmp	r0, #0
   1b078:	bne	1b0a4 <__assert_fail@plt+0x91dc>
   1b07c:	ldr	r0, [r5, #36]	; 0x24
   1b080:	cmp	r0, #0
   1b084:	beq	1b09c <__assert_fail@plt+0x91d4>
   1b088:	ldr	r4, [r0, #4]
   1b08c:	bl	176c0 <__assert_fail@plt+0x57f8>
   1b090:	cmp	r4, #0
   1b094:	mov	r0, r4
   1b098:	bne	1b088 <__assert_fail@plt+0x91c0>
   1b09c:	mov	r0, #0
   1b0a0:	str	r0, [r5, #36]	; 0x24
   1b0a4:	mov	r8, r9
   1b0a8:	mov	r0, r8
   1b0ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b0b0:	bl	11e8c <abort@plt>
   1b0b4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b0b8:	svccc	0x00666666
   1b0bc:	svccc	0x008ccccd
   1b0c0:	andeq	r0, r0, r0
   1b0c4:	b	1ae20 <__assert_fail@plt+0x8f58>
   1b0c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0cc:	add	fp, sp, #28
   1b0d0:	sub	sp, sp, #4
   1b0d4:	vpush	{d8-d9}
   1b0d8:	sub	sp, sp, #104	; 0x68
   1b0dc:	mov	r7, r3
   1b0e0:	mov	r5, r2
   1b0e4:	mov	r8, r1
   1b0e8:	mov	sl, r0
   1b0ec:	bl	11dcc <localeconv@plt>
   1b0f0:	ldr	r6, [r0]
   1b0f4:	mov	r4, r0
   1b0f8:	mov	r0, r6
   1b0fc:	bl	11cac <strlen@plt>
   1b100:	sub	r1, r0, #1
   1b104:	movw	r2, #31000	; 0x7918
   1b108:	cmp	r1, #16
   1b10c:	movt	r2, #3
   1b110:	movcs	r0, #1
   1b114:	movcc	r2, r6
   1b118:	ldr	r6, [r4, #4]
   1b11c:	str	r0, [sp, #48]	; 0x30
   1b120:	ldr	r0, [r4, #8]
   1b124:	str	r2, [sp, #16]
   1b128:	str	r0, [sp, #24]
   1b12c:	mov	r0, r6
   1b130:	bl	11cac <strlen@plt>
   1b134:	cmp	r0, #17
   1b138:	movw	r0, #647	; 0x287
   1b13c:	movw	r1, #27716	; 0x6c44
   1b140:	str	r5, [sp, #36]	; 0x24
   1b144:	str	r7, [sp, #40]	; 0x28
   1b148:	ldr	r4, [fp, #20]
   1b14c:	add	r0, r5, r0
   1b150:	movt	r1, #3
   1b154:	movcc	r1, r6
   1b158:	ldr	r5, [fp, #16]
   1b15c:	ldr	r6, [fp, #8]
   1b160:	str	r0, [sp, #32]
   1b164:	ands	r0, r7, #32
   1b168:	str	r1, [sp, #20]
   1b16c:	str	r0, [sp, #28]
   1b170:	mov	r0, #1000	; 0x3e8
   1b174:	movwne	r0, #1024	; 0x400
   1b178:	str	r0, [sp, #44]	; 0x2c
   1b17c:	and	r0, r7, #3
   1b180:	ldr	r7, [fp, #12]
   1b184:	str	r0, [sp, #52]	; 0x34
   1b188:	subs	r0, r6, r5
   1b18c:	sbcs	r0, r7, r4
   1b190:	bcs	1b280 <__assert_fail@plt+0x93b8>
   1b194:	orrs	r0, r6, r7
   1b198:	beq	1b3d4 <__assert_fail@plt+0x950c>
   1b19c:	ldr	r9, [fp, #16]
   1b1a0:	ldr	r5, [fp, #20]
   1b1a4:	mov	r2, r6
   1b1a8:	mov	r3, r7
   1b1ac:	mov	r0, r9
   1b1b0:	mov	r1, r5
   1b1b4:	bl	35eec <__assert_fail@plt+0x24024>
   1b1b8:	mov	r4, r0
   1b1bc:	mov	r3, r1
   1b1c0:	umull	r0, r1, r0, r6
   1b1c4:	mla	r1, r4, r7, r1
   1b1c8:	mla	r1, r3, r6, r1
   1b1cc:	subs	r0, r9, r0
   1b1d0:	sbc	r1, r5, r1
   1b1d4:	orrs	r0, r0, r1
   1b1d8:	bne	1b3d4 <__assert_fail@plt+0x950c>
   1b1dc:	mov	r0, sl
   1b1e0:	mov	r1, r8
   1b1e4:	mov	r2, r4
   1b1e8:	mov	r6, r8
   1b1ec:	mov	r8, r3
   1b1f0:	bl	35eec <__assert_fail@plt+0x24024>
   1b1f4:	mov	r5, r0
   1b1f8:	mov	r9, r1
   1b1fc:	umull	r0, r1, r0, r4
   1b200:	mov	r2, #10
   1b204:	mov	r3, r8
   1b208:	mla	r1, r5, r8, r1
   1b20c:	mla	r1, r9, r4, r1
   1b210:	subs	r0, sl, r0
   1b214:	umull	sl, r0, r0, r2
   1b218:	mov	r2, r4
   1b21c:	sbc	r1, r6, r1
   1b220:	add	r1, r1, r1, lsl #2
   1b224:	add	r7, r0, r1, lsl #1
   1b228:	mov	r0, sl
   1b22c:	mov	r1, r7
   1b230:	bl	35eec <__assert_fail@plt+0x24024>
   1b234:	mov	r6, r0
   1b238:	umull	r0, r2, r0, r4
   1b23c:	mla	r2, r6, r8, r2
   1b240:	mla	r1, r1, r4, r2
   1b244:	mov	r2, #2
   1b248:	subs	r0, sl, r0
   1b24c:	sbc	r1, r7, r1
   1b250:	subs	r3, r4, r0, lsl #1
   1b254:	lsl	r1, r1, #1
   1b258:	orr	r1, r1, r0, lsr #31
   1b25c:	orr	r7, r1, r0, lsl #1
   1b260:	sbcs	r3, r8, r1
   1b264:	movwcc	r2, #3
   1b268:	cmp	r7, #0
   1b26c:	movwne	r7, #1
   1b270:	rsbs	r0, r4, r0, lsl #1
   1b274:	sbcs	r0, r1, r8
   1b278:	movcs	r7, r2
   1b27c:	b	1b2ec <__assert_fail@plt+0x9424>
   1b280:	mov	r0, r6
   1b284:	mov	r1, r7
   1b288:	mov	r2, r5
   1b28c:	mov	r3, r4
   1b290:	bl	35eec <__assert_fail@plt+0x24024>
   1b294:	mov	r2, r0
   1b298:	mov	r3, r1
   1b29c:	umull	r0, r1, r0, r5
   1b2a0:	mla	r1, r2, r4, r1
   1b2a4:	mla	r1, r3, r5, r1
   1b2a8:	subs	r0, r6, r0
   1b2ac:	sbc	r1, r7, r1
   1b2b0:	orrs	r0, r0, r1
   1b2b4:	bne	1b3d4 <__assert_fail@plt+0x950c>
   1b2b8:	umull	r5, r0, r2, sl
   1b2bc:	mov	r4, r8
   1b2c0:	mla	r0, r2, r8, r0
   1b2c4:	mla	r9, r3, sl, r0
   1b2c8:	mov	r0, r5
   1b2cc:	mov	r1, r9
   1b2d0:	bl	35eec <__assert_fail@plt+0x24024>
   1b2d4:	eor	r1, r1, r8
   1b2d8:	eor	r0, r0, sl
   1b2dc:	orrs	r0, r0, r1
   1b2e0:	bne	1b3d4 <__assert_fail@plt+0x950c>
   1b2e4:	mov	r7, #0
   1b2e8:	mov	r6, #0
   1b2ec:	ldr	r0, [sp, #40]	; 0x28
   1b2f0:	ldr	r1, [sp, #32]
   1b2f4:	ldr	r2, [sp, #44]	; 0x2c
   1b2f8:	ands	r4, r0, #16
   1b2fc:	beq	1b648 <__assert_fail@plt+0x9780>
   1b300:	subs	r0, r5, r2
   1b304:	mov	r8, #0
   1b308:	sbcs	r0, r9, #0
   1b30c:	bcs	1b320 <__assert_fail@plt+0x9458>
   1b310:	ldr	r0, [sp, #32]
   1b314:	mov	sl, r5
   1b318:	str	r0, [sp, #12]
   1b31c:	b	1b968 <__assert_fail@plt+0x9aa0>
   1b320:	ldr	r2, [sp, #44]	; 0x2c
   1b324:	mov	r0, r5
   1b328:	mov	r1, r9
   1b32c:	mov	r3, #0
   1b330:	bl	35eec <__assert_fail@plt+0x24024>
   1b334:	ldr	r2, [sp, #44]	; 0x2c
   1b338:	mov	sl, r0
   1b33c:	mov	r9, r1
   1b340:	mls	r0, r0, r2, r5
   1b344:	add	r0, r0, r0, lsl #2
   1b348:	add	r0, r6, r0, lsl #1
   1b34c:	udiv	r6, r0, r2
   1b350:	mls	r0, r6, r2, r0
   1b354:	lsl	r0, r0, #1
   1b358:	add	r0, r0, r7, lsr #1
   1b35c:	cmp	r0, r2
   1b360:	bcs	1b374 <__assert_fail@plt+0x94ac>
   1b364:	rsb	r1, r7, #0
   1b368:	subs	r7, r0, r1
   1b36c:	movwne	r7, #1
   1b370:	b	1b384 <__assert_fail@plt+0x94bc>
   1b374:	add	r0, r0, r7
   1b378:	mov	r7, #2
   1b37c:	cmp	r2, r0
   1b380:	movwcc	r7, #3
   1b384:	mov	r0, r8
   1b388:	add	r0, r8, #1
   1b38c:	mov	r8, r0
   1b390:	cmp	r0, #7
   1b394:	bhi	1b3a8 <__assert_fail@plt+0x94e0>
   1b398:	subs	r0, sl, r2
   1b39c:	mov	r5, sl
   1b3a0:	sbcs	r0, r9, #0
   1b3a4:	bcs	1b320 <__assert_fail@plt+0x9458>
   1b3a8:	rsbs	r0, sl, #9
   1b3ac:	rscs	r0, r9, #0
   1b3b0:	bcc	1b8c8 <__assert_fail@plt+0x9a00>
   1b3b4:	ldr	r0, [sp, #52]	; 0x34
   1b3b8:	cmp	r0, #1
   1b3bc:	bne	1b8d4 <__assert_fail@plt+0x9a0c>
   1b3c0:	and	r0, r6, #1
   1b3c4:	add	r0, r7, r0
   1b3c8:	cmp	r0, #2
   1b3cc:	bhi	1b8e4 <__assert_fail@plt+0x9a1c>
   1b3d0:	b	1b91c <__assert_fail@plt+0x9a54>
   1b3d4:	ldr	r9, [fp, #20]
   1b3d8:	ldr	r0, [fp, #16]
   1b3dc:	mov	r1, r9
   1b3e0:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b3e4:	vmov	d8, r0, r1
   1b3e8:	mov	r0, sl
   1b3ec:	mov	r1, r8
   1b3f0:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b3f4:	mov	r4, r0
   1b3f8:	mov	r5, r1
   1b3fc:	mov	r0, r6
   1b400:	mov	r1, r7
   1b404:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b408:	vmov	d16, r0, r1
   1b40c:	vmov	d17, r4, r5
   1b410:	ldr	r7, [sp, #40]	; 0x28
   1b414:	tst	r7, #16
   1b418:	vdiv.f64	d16, d16, d8
   1b41c:	vmul.f64	d8, d16, d17
   1b420:	bne	1b4a0 <__assert_fail@plt+0x95d8>
   1b424:	ldr	r6, [sp, #52]	; 0x34
   1b428:	cmp	r6, #1
   1b42c:	beq	1b65c <__assert_fail@plt+0x9794>
   1b430:	vldr	d16, [pc, #568]	; 1b670 <__assert_fail@plt+0x97a8>
   1b434:	ldr	sl, [sp, #36]	; 0x24
   1b438:	ldr	r8, [sp, #32]
   1b43c:	vcmpe.f64	d8, d16
   1b440:	vmrs	APSR_nzcv, fpscr
   1b444:	bpl	1b664 <__assert_fail@plt+0x979c>
   1b448:	vmov	r0, r1, d8
   1b44c:	bl	35f38 <__assert_fail@plt+0x24070>
   1b450:	mov	r4, r0
   1b454:	mov	r5, r1
   1b458:	mov	r0, #0
   1b45c:	cmp	r6, #0
   1b460:	mov	r2, #0
   1b464:	bne	1b48c <__assert_fail@plt+0x95c4>
   1b468:	mov	r0, r4
   1b46c:	mov	r1, r5
   1b470:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b474:	vmov	d16, r0, r1
   1b478:	mov	r2, #0
   1b47c:	mov	r0, #0
   1b480:	vcmp.f64	d8, d16
   1b484:	vmrs	APSR_nzcv, fpscr
   1b488:	movwne	r0, #1
   1b48c:	adds	r0, r0, r4
   1b490:	adc	r1, r2, r5
   1b494:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b498:	vmov	d8, r0, r1
   1b49c:	b	1b664 <__assert_fail@plt+0x979c>
   1b4a0:	ldr	r0, [sp, #44]	; 0x2c
   1b4a4:	mov	r6, #1
   1b4a8:	vmov	s0, r0
   1b4ac:	vcvt.f64.u32	d16, s0
   1b4b0:	vmul.f64	d17, d16, d16
   1b4b4:	vcmpe.f64	d17, d8
   1b4b8:	vmrs	APSR_nzcv, fpscr
   1b4bc:	bls	1b4d0 <__assert_fail@plt+0x9608>
   1b4c0:	ldr	sl, [sp, #48]	; 0x30
   1b4c4:	ldr	r8, [sp, #32]
   1b4c8:	vmov.f64	d17, d16
   1b4cc:	b	1b568 <__assert_fail@plt+0x96a0>
   1b4d0:	vmul.f64	d18, d17, d16
   1b4d4:	ldr	sl, [sp, #48]	; 0x30
   1b4d8:	ldr	r8, [sp, #32]
   1b4dc:	mov	r6, #2
   1b4e0:	vcmpe.f64	d18, d8
   1b4e4:	vmrs	APSR_nzcv, fpscr
   1b4e8:	bhi	1b568 <__assert_fail@plt+0x96a0>
   1b4ec:	vmul.f64	d19, d18, d16
   1b4f0:	vmov.f64	d17, d18
   1b4f4:	mov	r6, #3
   1b4f8:	vcmpe.f64	d19, d8
   1b4fc:	vmrs	APSR_nzcv, fpscr
   1b500:	bhi	1b568 <__assert_fail@plt+0x96a0>
   1b504:	vmul.f64	d18, d19, d16
   1b508:	vmov.f64	d17, d19
   1b50c:	mov	r6, #4
   1b510:	vcmpe.f64	d18, d8
   1b514:	vmrs	APSR_nzcv, fpscr
   1b518:	bhi	1b568 <__assert_fail@plt+0x96a0>
   1b51c:	vmul.f64	d19, d18, d16
   1b520:	vmov.f64	d17, d18
   1b524:	mov	r6, #5
   1b528:	vcmpe.f64	d19, d8
   1b52c:	vmrs	APSR_nzcv, fpscr
   1b530:	bhi	1b568 <__assert_fail@plt+0x96a0>
   1b534:	vmul.f64	d18, d19, d16
   1b538:	vmov.f64	d17, d19
   1b53c:	mov	r6, #6
   1b540:	vcmpe.f64	d18, d8
   1b544:	vmrs	APSR_nzcv, fpscr
   1b548:	bhi	1b568 <__assert_fail@plt+0x96a0>
   1b54c:	vmul.f64	d16, d18, d16
   1b550:	mov	r6, #7
   1b554:	vmov.f64	d17, d18
   1b558:	vcmpe.f64	d16, d8
   1b55c:	vmrs	APSR_nzcv, fpscr
   1b560:	movls	r6, #8
   1b564:	vmovls.f64	d17, d16
   1b568:	vdiv.f64	d8, d8, d17
   1b56c:	ldr	r0, [sp, #52]	; 0x34
   1b570:	cmp	r0, #1
   1b574:	vmov.f64	d16, d8
   1b578:	beq	1b5e8 <__assert_fail@plt+0x9720>
   1b57c:	vldr	d16, [pc, #236]	; 1b670 <__assert_fail@plt+0x97a8>
   1b580:	vcmpe.f64	d8, d16
   1b584:	vmov.f64	d16, d8
   1b588:	vmrs	APSR_nzcv, fpscr
   1b58c:	bpl	1b5e8 <__assert_fail@plt+0x9720>
   1b590:	vmov	r0, r1, d8
   1b594:	bl	35f38 <__assert_fail@plt+0x24070>
   1b598:	mov	r5, r1
   1b59c:	ldr	r1, [sp, #52]	; 0x34
   1b5a0:	mov	r4, r0
   1b5a4:	mov	r0, #0
   1b5a8:	mov	r2, #0
   1b5ac:	cmp	r1, #0
   1b5b0:	bne	1b5d8 <__assert_fail@plt+0x9710>
   1b5b4:	mov	r0, r4
   1b5b8:	mov	r1, r5
   1b5bc:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b5c0:	vmov	d16, r0, r1
   1b5c4:	mov	r2, #0
   1b5c8:	mov	r0, #0
   1b5cc:	vcmp.f64	d8, d16
   1b5d0:	vmrs	APSR_nzcv, fpscr
   1b5d4:	movwne	r0, #1
   1b5d8:	adds	r0, r0, r4
   1b5dc:	adc	r1, r2, r5
   1b5e0:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b5e4:	vmov	d16, r0, r1
   1b5e8:	ldr	r5, [sp, #36]	; 0x24
   1b5ec:	movw	r3, #31186	; 0x79d2
   1b5f0:	mov	r1, #1
   1b5f4:	mvn	r2, #0
   1b5f8:	vstr	d16, [sp]
   1b5fc:	movt	r3, #3
   1b600:	mov	r0, r5
   1b604:	bl	11cf4 <__sprintf_chk@plt>
   1b608:	ldr	r1, [sp, #28]
   1b60c:	mov	r0, #3
   1b610:	cmp	r1, #0
   1b614:	movwne	r0, #2
   1b618:	add	r4, r0, sl
   1b61c:	mov	r0, r5
   1b620:	bl	11cac <strlen@plt>
   1b624:	cmp	r4, r0
   1b628:	bcc	1b68c <__assert_fail@plt+0x97c4>
   1b62c:	ldr	r7, [sp, #40]	; 0x28
   1b630:	mov	r2, r0
   1b634:	add	r5, sl, #1
   1b638:	tst	r7, #8
   1b63c:	bne	1b678 <__assert_fail@plt+0x97b0>
   1b640:	ldr	sl, [sp, #36]	; 0x24
   1b644:	b	1b73c <__assert_fail@plt+0x9874>
   1b648:	mov	r0, r1
   1b64c:	mvn	r8, #0
   1b650:	str	r1, [sp, #12]
   1b654:	mov	sl, r5
   1b658:	b	1b968 <__assert_fail@plt+0x9aa0>
   1b65c:	ldr	sl, [sp, #36]	; 0x24
   1b660:	ldr	r8, [sp, #32]
   1b664:	vstr	d8, [sp]
   1b668:	mvn	r6, #0
   1b66c:	b	1b714 <__assert_fail@plt+0x984c>
   1b670:	andeq	r0, r0, r0
   1b674:	mvnsmi	r0, #0
   1b678:	ldr	r0, [sp, #36]	; 0x24
   1b67c:	add	r0, r2, r0
   1b680:	ldrb	r0, [r0, #-1]
   1b684:	cmp	r0, #48	; 0x30
   1b688:	bne	1b8bc <__assert_fail@plt+0x99f4>
   1b68c:	vmov.f64	d9, #36	; 0x41200000  10.0
   1b690:	ldr	r4, [sp, #52]	; 0x34
   1b694:	vmul.f64	d8, d8, d9
   1b698:	cmp	r4, #1
   1b69c:	beq	1b704 <__assert_fail@plt+0x983c>
   1b6a0:	vldr	d16, [pc, #-56]	; 1b670 <__assert_fail@plt+0x97a8>
   1b6a4:	vcmpe.f64	d8, d16
   1b6a8:	vmrs	APSR_nzcv, fpscr
   1b6ac:	bpl	1b704 <__assert_fail@plt+0x983c>
   1b6b0:	vmov	r0, r1, d8
   1b6b4:	bl	35f38 <__assert_fail@plt+0x24070>
   1b6b8:	mov	sl, r0
   1b6bc:	mov	r5, r1
   1b6c0:	mov	r0, #0
   1b6c4:	cmp	r4, #0
   1b6c8:	mov	r2, #0
   1b6cc:	bne	1b6f4 <__assert_fail@plt+0x982c>
   1b6d0:	mov	r0, sl
   1b6d4:	mov	r1, r5
   1b6d8:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b6dc:	vmov	d16, r0, r1
   1b6e0:	mov	r2, #0
   1b6e4:	mov	r0, #0
   1b6e8:	vcmp.f64	d8, d16
   1b6ec:	vmrs	APSR_nzcv, fpscr
   1b6f0:	movwne	r0, #1
   1b6f4:	adds	r0, r0, sl
   1b6f8:	adc	r1, r2, r5
   1b6fc:	bl	35da4 <__assert_fail@plt+0x23edc>
   1b700:	vmov	d8, r0, r1
   1b704:	vdiv.f64	d16, d8, d9
   1b708:	ldr	sl, [sp, #36]	; 0x24
   1b70c:	ldr	r7, [sp, #40]	; 0x28
   1b710:	vstr	d16, [sp]
   1b714:	movw	r3, #31180	; 0x79cc
   1b718:	mov	r0, sl
   1b71c:	mov	r1, #1
   1b720:	mvn	r2, #0
   1b724:	movt	r3, #3
   1b728:	bl	11cf4 <__sprintf_chk@plt>
   1b72c:	mov	r0, sl
   1b730:	bl	11cac <strlen@plt>
   1b734:	mov	r2, r0
   1b738:	mov	r5, #0
   1b73c:	sub	r4, r8, r2
   1b740:	mov	r1, sl
   1b744:	mov	r0, r4
   1b748:	bl	11a78 <memmove@plt>
   1b74c:	sub	r5, r8, r5
   1b750:	tst	r7, #4
   1b754:	bne	1ba74 <__assert_fail@plt+0x9bac>
   1b758:	tst	r7, #128	; 0x80
   1b75c:	beq	1bb8c <__assert_fail@plt+0x9cc4>
   1b760:	cmn	r6, #1
   1b764:	bgt	1b850 <__assert_fail@plt+0x9988>
   1b768:	ldr	r0, [fp, #16]
   1b76c:	mov	r6, #0
   1b770:	subs	r0, r0, #2
   1b774:	sbcs	r0, r9, #0
   1b778:	bcc	1b850 <__assert_fail@plt+0x9988>
   1b77c:	ldr	r0, [sp, #44]	; 0x2c
   1b780:	ldr	r1, [fp, #16]
   1b784:	mov	r6, #1
   1b788:	subs	r0, r0, r1
   1b78c:	rscs	r0, r9, #0
   1b790:	bcs	1b850 <__assert_fail@plt+0x9988>
   1b794:	ldr	r0, [sp, #44]	; 0x2c
   1b798:	ldr	r2, [fp, #16]
   1b79c:	mov	r6, #2
   1b7a0:	umull	r1, r0, r0, r0
   1b7a4:	subs	r2, r1, r2
   1b7a8:	sbcs	r2, r0, r9
   1b7ac:	bcs	1b850 <__assert_fail@plt+0x9988>
   1b7b0:	ldr	r3, [sp, #44]	; 0x2c
   1b7b4:	mov	r6, #3
   1b7b8:	umull	r1, r2, r1, r3
   1b7bc:	mla	r2, r0, r3, r2
   1b7c0:	ldr	r0, [fp, #16]
   1b7c4:	subs	r0, r1, r0
   1b7c8:	sbcs	r0, r2, r9
   1b7cc:	bcs	1b850 <__assert_fail@plt+0x9988>
   1b7d0:	ldr	r3, [sp, #44]	; 0x2c
   1b7d4:	mov	r6, #4
   1b7d8:	umull	r0, r1, r1, r3
   1b7dc:	mla	r1, r2, r3, r1
   1b7e0:	ldr	r2, [fp, #16]
   1b7e4:	subs	r2, r0, r2
   1b7e8:	sbcs	r2, r1, r9
   1b7ec:	bcs	1b850 <__assert_fail@plt+0x9988>
   1b7f0:	ldr	r3, [sp, #44]	; 0x2c
   1b7f4:	mov	r6, #5
   1b7f8:	umull	r0, r2, r0, r3
   1b7fc:	mla	r1, r1, r3, r2
   1b800:	ldr	r2, [fp, #16]
   1b804:	subs	r2, r0, r2
   1b808:	sbcs	r2, r1, r9
   1b80c:	bcs	1b850 <__assert_fail@plt+0x9988>
   1b810:	ldr	r3, [sp, #44]	; 0x2c
   1b814:	mov	r6, #6
   1b818:	umull	r0, r2, r0, r3
   1b81c:	mla	r1, r1, r3, r2
   1b820:	ldr	r2, [fp, #16]
   1b824:	subs	r2, r0, r2
   1b828:	sbcs	r2, r1, r9
   1b82c:	bcs	1b850 <__assert_fail@plt+0x9988>
   1b830:	ldr	r3, [sp, #44]	; 0x2c
   1b834:	mov	r6, #7
   1b838:	umull	r0, r2, r0, r3
   1b83c:	mla	r1, r1, r3, r2
   1b840:	ldr	r2, [fp, #16]
   1b844:	subs	r0, r0, r2
   1b848:	sbcs	r0, r1, r9
   1b84c:	movwcc	r6, #8
   1b850:	and	r0, r7, #256	; 0x100
   1b854:	tst	r7, #64	; 0x40
   1b858:	orrsne	r1, r6, r0
   1b85c:	movne	r1, #32
   1b860:	addne	r8, sl, #648	; 0x288
   1b864:	strbne	r1, [sl, #647]	; 0x287
   1b868:	cmp	r6, #0
   1b86c:	beq	1b894 <__assert_fail@plt+0x99cc>
   1b870:	ldr	r1, [sp, #28]
   1b874:	cmp	r1, #0
   1b878:	moveq	r1, #107	; 0x6b
   1b87c:	cmpeq	r6, #1
   1b880:	beq	1b890 <__assert_fail@plt+0x99c8>
   1b884:	movw	r1, #31236	; 0x7a04
   1b888:	movt	r1, #3
   1b88c:	ldrb	r1, [r1, r6]
   1b890:	strb	r1, [r8], #1
   1b894:	cmp	r0, #0
   1b898:	beq	1bb8c <__assert_fail@plt+0x9cc4>
   1b89c:	ldr	r0, [sp, #28]
   1b8a0:	cmp	r0, #0
   1b8a4:	cmpne	r6, #0
   1b8a8:	movne	r0, #105	; 0x69
   1b8ac:	strbne	r0, [r8], #1
   1b8b0:	mov	r0, #66	; 0x42
   1b8b4:	strb	r0, [r8], #1
   1b8b8:	b	1bb8c <__assert_fail@plt+0x9cc4>
   1b8bc:	ldr	sl, [sp, #36]	; 0x24
   1b8c0:	ldr	r7, [sp, #40]	; 0x28
   1b8c4:	b	1b73c <__assert_fail@plt+0x9874>
   1b8c8:	ldr	r0, [sp, #32]
   1b8cc:	str	r0, [sp, #12]
   1b8d0:	b	1b968 <__assert_fail@plt+0x9aa0>
   1b8d4:	cmp	r0, #0
   1b8d8:	bne	1b91c <__assert_fail@plt+0x9a54>
   1b8dc:	cmp	r7, #0
   1b8e0:	beq	1b91c <__assert_fail@plt+0x9a54>
   1b8e4:	adds	r0, sl, #1
   1b8e8:	add	r6, r6, #1
   1b8ec:	mov	r7, #0
   1b8f0:	adc	r1, r9, #0
   1b8f4:	cmp	r6, #10
   1b8f8:	bne	1b91c <__assert_fail@plt+0x9a54>
   1b8fc:	rsbs	r2, r0, #9
   1b900:	mov	r6, #0
   1b904:	mov	sl, r0
   1b908:	mov	r9, r1
   1b90c:	mov	r7, #0
   1b910:	rscs	r2, r1, #0
   1b914:	ldr	r2, [sp, #44]	; 0x2c
   1b918:	bcc	1bba8 <__assert_fail@plt+0x9ce0>
   1b91c:	ldr	r0, [sp, #40]	; 0x28
   1b920:	tst	r0, #8
   1b924:	beq	1b93c <__assert_fail@plt+0x9a74>
   1b928:	cmp	r6, #0
   1b92c:	bne	1b93c <__assert_fail@plt+0x9a74>
   1b930:	ldr	r0, [sp, #32]
   1b934:	str	r0, [sp, #12]
   1b938:	b	1b964 <__assert_fail@plt+0x9a9c>
   1b93c:	ldr	r1, [sp, #36]	; 0x24
   1b940:	ldr	r2, [sp, #48]	; 0x30
   1b944:	add	r0, r6, #48	; 0x30
   1b948:	strb	r0, [r1, #646]!	; 0x286
   1b94c:	sub	r0, r1, r2
   1b950:	ldr	r1, [sp, #16]
   1b954:	str	r0, [sp, #12]
   1b958:	bl	11ab4 <memcpy@plt>
   1b95c:	ldr	r2, [sp, #44]	; 0x2c
   1b960:	mov	r7, #0
   1b964:	mov	r6, #0
   1b968:	ldr	r0, [sp, #52]	; 0x34
   1b96c:	cmp	r0, #0
   1b970:	beq	1b9b0 <__assert_fail@plt+0x9ae8>
   1b974:	cmp	r0, #1
   1b978:	bne	1b9a4 <__assert_fail@plt+0x9adc>
   1b97c:	mov	r0, #0
   1b980:	rsbs	r1, r7, #0
   1b984:	and	r2, sl, #1
   1b988:	eor	r1, r2, r1
   1b98c:	sbc	r0, r0, #0
   1b990:	ldr	r2, [sp, #44]	; 0x2c
   1b994:	orrs	r0, r1, r0
   1b998:	addne	r6, r6, #1
   1b99c:	cmp	r6, #5
   1b9a0:	bgt	1b9bc <__assert_fail@plt+0x9af4>
   1b9a4:	ldr	r7, [sp, #36]	; 0x24
   1b9a8:	ldr	r5, [sp, #40]	; 0x28
   1b9ac:	b	1ba18 <__assert_fail@plt+0x9b50>
   1b9b0:	add	r0, r6, r7
   1b9b4:	cmp	r0, #1
   1b9b8:	blt	1b9a4 <__assert_fail@plt+0x9adc>
   1b9bc:	ldr	r7, [sp, #36]	; 0x24
   1b9c0:	ldr	r5, [sp, #40]	; 0x28
   1b9c4:	adds	sl, sl, #1
   1b9c8:	adc	r9, r9, #0
   1b9cc:	cmp	r8, #7
   1b9d0:	bgt	1ba18 <__assert_fail@plt+0x9b50>
   1b9d4:	cmp	r4, #0
   1b9d8:	beq	1ba18 <__assert_fail@plt+0x9b50>
   1b9dc:	eor	r0, sl, r2
   1b9e0:	orrs	r0, r0, r9
   1b9e4:	addeq	r8, r8, #1
   1b9e8:	moveq	r9, #0
   1b9ec:	moveq	sl, #1
   1b9f0:	tsteq	r5, #8
   1b9f4:	bne	1ba18 <__assert_fail@plt+0x9b50>
   1b9f8:	ldr	r0, [sp, #12]
   1b9fc:	mov	r1, #48	; 0x30
   1ba00:	ldr	r2, [sp, #48]	; 0x30
   1ba04:	strb	r1, [r0, #-1]!
   1ba08:	ldr	r1, [sp, #16]
   1ba0c:	sub	r0, r0, r2
   1ba10:	str	r0, [sp, #12]
   1ba14:	bl	11ab4 <memcpy@plt>
   1ba18:	ldr	r4, [sp, #12]
   1ba1c:	mov	r0, sl
   1ba20:	mov	r1, r9
   1ba24:	mov	r2, #10
   1ba28:	mov	r3, #0
   1ba2c:	bl	35eec <__assert_fail@plt+0x24024>
   1ba30:	add	r2, r0, r0, lsl #2
   1ba34:	sub	r2, sl, r2, lsl #1
   1ba38:	orr	r2, r2, #48	; 0x30
   1ba3c:	strb	r2, [r4, #-1]!
   1ba40:	rsbs	r2, sl, #9
   1ba44:	mov	sl, r0
   1ba48:	rscs	r2, r9, #0
   1ba4c:	mov	r9, r1
   1ba50:	bcc	1ba1c <__assert_fail@plt+0x9b54>
   1ba54:	mov	r6, r8
   1ba58:	mov	sl, r7
   1ba5c:	mov	r7, r5
   1ba60:	ldr	r9, [fp, #20]
   1ba64:	ldr	r8, [sp, #32]
   1ba68:	ldr	r5, [sp, #12]
   1ba6c:	tst	r7, #4
   1ba70:	beq	1b758 <__assert_fail@plt+0x9890>
   1ba74:	ldr	r9, [sp, #20]
   1ba78:	str	r6, [sp, #16]
   1ba7c:	sub	r7, r5, r4
   1ba80:	mov	r0, r9
   1ba84:	bl	11cac <strlen@plt>
   1ba88:	str	r0, [sp, #52]	; 0x34
   1ba8c:	add	r0, sp, #56	; 0x38
   1ba90:	mov	r1, r4
   1ba94:	mov	r2, r7
   1ba98:	bl	11ab4 <memcpy@plt>
   1ba9c:	ldr	r6, [sp, #24]
   1baa0:	add	r0, sp, #56	; 0x38
   1baa4:	ldrb	r8, [r6]
   1baa8:	cmp	r8, #255	; 0xff
   1baac:	mov	sl, r8
   1bab0:	moveq	sl, r7
   1bab4:	cmp	r8, #0
   1bab8:	mvneq	sl, #0
   1babc:	cmp	sl, r7
   1bac0:	movhi	sl, r7
   1bac4:	sub	r4, r5, sl
   1bac8:	sub	r5, r7, sl
   1bacc:	mov	r2, sl
   1bad0:	add	r1, r0, r5
   1bad4:	mov	r0, r4
   1bad8:	bl	11ab4 <memcpy@plt>
   1badc:	cmp	r5, #0
   1bae0:	beq	1bb70 <__assert_fail@plt+0x9ca8>
   1bae4:	clz	r0, r8
   1bae8:	lsr	r8, r0, #5
   1baec:	ldr	r0, [sp, #52]	; 0x34
   1baf0:	rsb	r0, r0, #0
   1baf4:	str	r0, [sp, #48]	; 0x30
   1baf8:	ldr	r0, [sp, #48]	; 0x30
   1bafc:	ldr	r2, [sp, #52]	; 0x34
   1bb00:	mov	r1, r9
   1bb04:	add	r4, r4, r0
   1bb08:	mov	r0, r4
   1bb0c:	bl	11ab4 <memcpy@plt>
   1bb10:	tst	r8, #1
   1bb14:	add	r0, sp, #56	; 0x38
   1bb18:	addeq	r6, r6, #1
   1bb1c:	mov	r8, r6
   1bb20:	ldrb	r6, [r6]
   1bb24:	cmp	r6, #255	; 0xff
   1bb28:	mov	r7, r6
   1bb2c:	moveq	r7, r5
   1bb30:	cmp	r6, #0
   1bb34:	moveq	r7, sl
   1bb38:	cmp	r5, r7
   1bb3c:	movcc	r7, r5
   1bb40:	sub	r5, r5, r7
   1bb44:	sub	r4, r4, r7
   1bb48:	mov	r2, r7
   1bb4c:	add	r1, r0, r5
   1bb50:	mov	r0, r4
   1bb54:	bl	11ab4 <memcpy@plt>
   1bb58:	clz	r0, r6
   1bb5c:	mov	r6, r8
   1bb60:	cmp	r5, #0
   1bb64:	mov	sl, r7
   1bb68:	lsr	r8, r0, #5
   1bb6c:	bne	1baf8 <__assert_fail@plt+0x9c30>
   1bb70:	ldr	r8, [sp, #32]
   1bb74:	ldr	sl, [sp, #36]	; 0x24
   1bb78:	ldr	r7, [sp, #40]	; 0x28
   1bb7c:	ldr	r9, [fp, #20]
   1bb80:	ldr	r6, [sp, #16]
   1bb84:	tst	r7, #128	; 0x80
   1bb88:	bne	1b760 <__assert_fail@plt+0x9898>
   1bb8c:	mov	r0, #0
   1bb90:	strb	r0, [r8]
   1bb94:	mov	r0, r4
   1bb98:	sub	sp, fp, #48	; 0x30
   1bb9c:	vpop	{d8-d9}
   1bba0:	add	sp, sp, #4
   1bba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bba8:	ldr	r0, [sp, #32]
   1bbac:	mov	r7, #0
   1bbb0:	mov	sl, #10
   1bbb4:	mov	r9, #0
   1bbb8:	str	r0, [sp, #12]
   1bbbc:	b	1b968 <__assert_fail@plt+0x9aa0>
   1bbc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bbc4:	add	fp, sp, #24
   1bbc8:	sub	sp, sp, #8
   1bbcc:	mov	r4, r2
   1bbd0:	mov	r8, r1
   1bbd4:	cmp	r0, #0
   1bbd8:	bne	1bc04 <__assert_fail@plt+0x9d3c>
   1bbdc:	movw	r0, #28052	; 0x6d94
   1bbe0:	movt	r0, #3
   1bbe4:	bl	11c04 <getenv@plt>
   1bbe8:	cmp	r0, #0
   1bbec:	bne	1bc04 <__assert_fail@plt+0x9d3c>
   1bbf0:	movw	r0, #31192	; 0x79d8
   1bbf4:	movt	r0, #3
   1bbf8:	bl	11c04 <getenv@plt>
   1bbfc:	cmp	r0, #0
   1bc00:	beq	1bd28 <__assert_fail@plt+0x9e60>
   1bc04:	mov	r6, r0
   1bc08:	movw	r7, #31260	; 0x7a1c
   1bc0c:	movw	r1, #31248	; 0x7a10
   1bc10:	mov	r3, #4
   1bc14:	ldrb	r5, [r6], #1
   1bc18:	movt	r7, #3
   1bc1c:	movt	r1, #3
   1bc20:	mov	r2, r7
   1bc24:	cmp	r5, #39	; 0x27
   1bc28:	movne	r6, r0
   1bc2c:	mov	r0, r6
   1bc30:	bl	14320 <__assert_fail@plt+0x2458>
   1bc34:	sub	r1, r5, #39	; 0x27
   1bc38:	cmp	r0, #0
   1bc3c:	clz	r1, r1
   1bc40:	lsr	r1, r1, #5
   1bc44:	lsl	r5, r1, #2
   1bc48:	bmi	1bc70 <__assert_fail@plt+0x9da8>
   1bc4c:	ldr	r0, [r7, r0, lsl #2]
   1bc50:	mov	r2, #1
   1bc54:	mov	r1, #0
   1bc58:	str	r2, [r4]
   1bc5c:	str	r1, [r4, #4]
   1bc60:	orr	r1, r0, r5
   1bc64:	mov	r0, #0
   1bc68:	str	r1, [r8]
   1bc6c:	b	1bca0 <__assert_fail@plt+0x9dd8>
   1bc70:	movw	r0, #31202	; 0x79e2
   1bc74:	add	r1, sp, #4
   1bc78:	mov	r2, #0
   1bc7c:	mov	r3, r4
   1bc80:	mov	r7, #0
   1bc84:	movt	r0, #3
   1bc88:	str	r0, [sp]
   1bc8c:	mov	r0, r6
   1bc90:	bl	33b1c <__assert_fail@plt+0x21c54>
   1bc94:	cmp	r0, #0
   1bc98:	beq	1bce4 <__assert_fail@plt+0x9e1c>
   1bc9c:	str	r7, [r8]
   1bca0:	ldrd	r2, [r4]
   1bca4:	orrs	r1, r2, r3
   1bca8:	beq	1bcb4 <__assert_fail@plt+0x9dec>
   1bcac:	sub	sp, fp, #24
   1bcb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bcb4:	movw	r0, #31220	; 0x79f4
   1bcb8:	movt	r0, #3
   1bcbc:	bl	11c04 <getenv@plt>
   1bcc0:	cmp	r0, #0
   1bcc4:	mov	r2, #512	; 0x200
   1bcc8:	mov	r0, #4
   1bccc:	mov	r1, #0
   1bcd0:	movweq	r2, #1024	; 0x400
   1bcd4:	str	r2, [r4]
   1bcd8:	str	r1, [r4, #4]
   1bcdc:	sub	sp, fp, #24
   1bce0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bce4:	ldrb	r0, [r6]
   1bce8:	sub	r0, r0, #48	; 0x30
   1bcec:	uxtb	r0, r0
   1bcf0:	cmp	r0, #10
   1bcf4:	bcc	1bd20 <__assert_fail@plt+0x9e58>
   1bcf8:	ldr	r0, [sp, #4]
   1bcfc:	cmp	r0, r6
   1bd00:	beq	1bd50 <__assert_fail@plt+0x9e88>
   1bd04:	ldrb	r2, [r6, #1]
   1bd08:	add	r1, r6, #1
   1bd0c:	mov	r6, r1
   1bd10:	sub	r2, r2, #48	; 0x30
   1bd14:	uxtb	r2, r2
   1bd18:	cmp	r2, #10
   1bd1c:	bcs	1bcfc <__assert_fail@plt+0x9e34>
   1bd20:	mov	r1, r5
   1bd24:	b	1bc64 <__assert_fail@plt+0x9d9c>
   1bd28:	movw	r0, #31220	; 0x79f4
   1bd2c:	movt	r0, #3
   1bd30:	bl	11c04 <getenv@plt>
   1bd34:	cmp	r0, #0
   1bd38:	mov	r2, #512	; 0x200
   1bd3c:	mov	r1, #0
   1bd40:	movweq	r2, #1024	; 0x400
   1bd44:	str	r2, [r4]
   1bd48:	str	r1, [r4, #4]
   1bd4c:	b	1bc64 <__assert_fail@plt+0x9d9c>
   1bd50:	ldrb	r2, [r0, #-1]
   1bd54:	orr	r1, r5, #384	; 0x180
   1bd58:	cmp	r2, #66	; 0x42
   1bd5c:	mov	r2, r1
   1bd60:	orrne	r2, r5, #128	; 0x80
   1bd64:	bne	1bd78 <__assert_fail@plt+0x9eb0>
   1bd68:	ldrb	r0, [r0, #-2]
   1bd6c:	cmp	r0, #105	; 0x69
   1bd70:	orreq	r1, r2, #32
   1bd74:	b	1bc64 <__assert_fail@plt+0x9d9c>
   1bd78:	orr	r1, r2, #32
   1bd7c:	b	1bc64 <__assert_fail@plt+0x9d9c>
   1bd80:	vdup.32	q8, r1
   1bd84:	mov	r2, #0
   1bd88:	str	r2, [r0, #20]
   1bd8c:	str	r2, [r0, #24]
   1bd90:	mov	r2, #1
   1bd94:	strb	r2, [r0, #28]
   1bd98:	vst1.32	{d16-d17}, [r0]!
   1bd9c:	str	r1, [r0]
   1bda0:	bx	lr
   1bda4:	ldrb	r0, [r0, #28]
   1bda8:	bx	lr
   1bdac:	push	{fp, lr}
   1bdb0:	mov	fp, sp
   1bdb4:	ldrb	r3, [r0, #28]
   1bdb8:	ldr	r2, [r0, #20]
   1bdbc:	eor	lr, r3, #1
   1bdc0:	add	r2, r2, lr
   1bdc4:	and	r3, r2, #3
   1bdc8:	ldr	ip, [r0, r3, lsl #2]
   1bdcc:	str	r1, [r0, r3, lsl #2]
   1bdd0:	str	r3, [r0, #20]
   1bdd4:	ldr	r1, [r0, #24]
   1bdd8:	cmp	r3, r1
   1bddc:	addeq	r1, r2, lr
   1bde0:	andeq	r1, r1, #3
   1bde4:	streq	r1, [r0, #24]
   1bde8:	mov	r1, #0
   1bdec:	strb	r1, [r0, #28]
   1bdf0:	mov	r0, ip
   1bdf4:	pop	{fp, pc}
   1bdf8:	push	{fp, lr}
   1bdfc:	mov	fp, sp
   1be00:	ldrb	r1, [r0, #28]
   1be04:	cmp	r1, #0
   1be08:	bne	1be44 <__assert_fail@plt+0x9f7c>
   1be0c:	ldr	r3, [r0, #20]
   1be10:	ldr	r2, [r0, #16]
   1be14:	ldr	r1, [r0, r3, lsl #2]
   1be18:	str	r2, [r0, r3, lsl #2]
   1be1c:	ldr	r2, [r0, #20]
   1be20:	ldr	r3, [r0, #24]
   1be24:	cmp	r2, r3
   1be28:	moveq	r2, #1
   1be2c:	strbeq	r2, [r0, #28]
   1be30:	subne	r2, r2, #1
   1be34:	andne	r2, r2, #3
   1be38:	strne	r2, [r0, #20]
   1be3c:	mov	r0, r1
   1be40:	pop	{fp, pc}
   1be44:	bl	11e8c <abort@plt>
   1be48:	push	{r4, r5, r6, sl, fp, lr}
   1be4c:	add	fp, sp, #16
   1be50:	sub	sp, sp, #8
   1be54:	mov	r5, r0
   1be58:	mov	r0, #12
   1be5c:	bl	34810 <__assert_fail@plt+0x22948>
   1be60:	mov	r4, r0
   1be64:	cmp	r0, #0
   1be68:	beq	1beb8 <__assert_fail@plt+0x9ff0>
   1be6c:	movw	r0, #30400	; 0x76c0
   1be70:	movw	r2, #48836	; 0xbec4
   1be74:	movw	r3, #48856	; 0xbed8
   1be78:	mov	r1, #0
   1be7c:	mov	r6, #0
   1be80:	movt	r0, #1
   1be84:	movt	r2, #1
   1be88:	movt	r3, #1
   1be8c:	str	r0, [sp]
   1be90:	movw	r0, #1021	; 0x3fd
   1be94:	bl	1a28c <__assert_fail@plt+0x83c4>
   1be98:	cmp	r0, #0
   1be9c:	str	r0, [r4]
   1bea0:	beq	1beac <__assert_fail@plt+0x9fe4>
   1bea4:	stmib	r4, {r5, r6}
   1bea8:	b	1beb8 <__assert_fail@plt+0x9ff0>
   1beac:	mov	r0, r4
   1beb0:	bl	176c0 <__assert_fail@plt+0x57f8>
   1beb4:	mov	r4, #0
   1beb8:	mov	r0, r4
   1bebc:	sub	sp, fp, #16
   1bec0:	pop	{r4, r5, r6, sl, fp, pc}
   1bec4:	ldm	r0, {r0, r3}
   1bec8:	eor	r0, r0, r3
   1becc:	udiv	r2, r0, r1
   1bed0:	mls	r0, r2, r1, r0
   1bed4:	bx	lr
   1bed8:	ldrd	r2, [r1]
   1bedc:	ldrd	r0, [r0]
   1bee0:	eor	r1, r1, r3
   1bee4:	eor	r0, r0, r2
   1bee8:	orr	r0, r0, r1
   1beec:	clz	r0, r0
   1bef0:	lsr	r0, r0, #5
   1bef4:	bx	lr
   1bef8:	push	{r4, sl, fp, lr}
   1befc:	add	fp, sp, #8
   1bf00:	mov	r4, r0
   1bf04:	ldr	r0, [r0]
   1bf08:	bl	1a590 <__assert_fail@plt+0x86c8>
   1bf0c:	ldr	r0, [r4, #8]
   1bf10:	bl	176c0 <__assert_fail@plt+0x57f8>
   1bf14:	mov	r0, r4
   1bf18:	pop	{r4, sl, fp, lr}
   1bf1c:	b	176c0 <__assert_fail@plt+0x57f8>
   1bf20:	push	{r4, r5, r6, r7, fp, lr}
   1bf24:	add	fp, sp, #16
   1bf28:	ldr	r4, [r0, #8]
   1bf2c:	mov	r7, r3
   1bf30:	mov	r6, r2
   1bf34:	mov	r5, r0
   1bf38:	cmp	r4, #0
   1bf3c:	beq	1bf5c <__assert_fail@plt+0xa094>
   1bf40:	ldrd	r0, [r4]
   1bf44:	eor	r1, r1, r7
   1bf48:	eor	r0, r0, r6
   1bf4c:	orrs	r0, r0, r1
   1bf50:	bne	1bf74 <__assert_fail@plt+0xa0ac>
   1bf54:	ldr	r0, [r4, #8]
   1bf58:	pop	{r4, r5, r6, r7, fp, pc}
   1bf5c:	mov	r0, #16
   1bf60:	bl	34810 <__assert_fail@plt+0x22948>
   1bf64:	mov	r4, r0
   1bf68:	cmp	r0, #0
   1bf6c:	str	r0, [r5, #8]
   1bf70:	beq	1bfa0 <__assert_fail@plt+0xa0d8>
   1bf74:	strd	r6, [r4]
   1bf78:	mov	r1, r4
   1bf7c:	ldr	r0, [r5]
   1bf80:	bl	1ade0 <__assert_fail@plt+0x8f18>
   1bf84:	cmp	r0, #0
   1bf88:	beq	1bfa0 <__assert_fail@plt+0xa0d8>
   1bf8c:	cmp	r4, r0
   1bf90:	beq	1bfa8 <__assert_fail@plt+0xa0e0>
   1bf94:	ldr	r0, [r0, #8]
   1bf98:	str	r0, [r4, #8]
   1bf9c:	pop	{r4, r5, r6, r7, fp, pc}
   1bfa0:	mvn	r0, #0
   1bfa4:	pop	{r4, r5, r6, r7, fp, pc}
   1bfa8:	mov	r0, #0
   1bfac:	str	r0, [r5, #8]
   1bfb0:	ldr	r0, [r5, #4]
   1bfb4:	add	r1, r0, #1
   1bfb8:	str	r1, [r5, #4]
   1bfbc:	str	r0, [r4, #8]
   1bfc0:	pop	{r4, r5, r6, r7, fp, pc}
   1bfc4:	push	{r4, r5, r6, sl, fp, lr}
   1bfc8:	add	fp, sp, #16
   1bfcc:	mov	r5, r0
   1bfd0:	mov	r0, #0
   1bfd4:	mov	r4, r1
   1bfd8:	add	r6, r2, #19
   1bfdc:	cmp	r1, #0
   1bfe0:	strb	r0, [r2, #20]
   1bfe4:	bmi	1c034 <__assert_fail@plt+0xa16c>
   1bfe8:	mov	r0, r5
   1bfec:	mov	r1, r4
   1bff0:	mov	r2, #10
   1bff4:	mov	r3, #0
   1bff8:	bl	35e18 <__assert_fail@plt+0x23f50>
   1bffc:	add	r2, r0, r0, lsl #2
   1c000:	sub	r2, r5, r2, lsl #1
   1c004:	add	r2, r2, #48	; 0x30
   1c008:	strb	r2, [r6], #-1
   1c00c:	adds	r2, r5, #9
   1c010:	mov	r5, r0
   1c014:	adc	r3, r4, #0
   1c018:	rsbs	r2, r2, #18
   1c01c:	mov	r4, r1
   1c020:	rscs	r2, r3, #0
   1c024:	bcc	1bfe8 <__assert_fail@plt+0xa120>
   1c028:	add	r6, r6, #1
   1c02c:	mov	r0, r6
   1c030:	pop	{r4, r5, r6, sl, fp, pc}
   1c034:	mov	r0, r5
   1c038:	mov	r1, r4
   1c03c:	mov	r2, #10
   1c040:	mov	r3, #0
   1c044:	bl	35e18 <__assert_fail@plt+0x23f50>
   1c048:	add	r2, r0, r0, lsl #2
   1c04c:	rsb	r2, r5, r2, lsl #1
   1c050:	add	r2, r2, #48	; 0x30
   1c054:	strb	r2, [r6], #-1
   1c058:	adds	r2, r5, #9
   1c05c:	mov	r5, r0
   1c060:	adc	r3, r4, #0
   1c064:	rsbs	r2, r2, #18
   1c068:	mov	r4, r1
   1c06c:	rscs	r2, r3, #0
   1c070:	bcc	1c034 <__assert_fail@plt+0xa16c>
   1c074:	mov	r0, #45	; 0x2d
   1c078:	strb	r0, [r6]
   1c07c:	mov	r0, r6
   1c080:	pop	{r4, r5, r6, sl, fp, pc}
   1c084:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c088:	add	fp, sp, #24
   1c08c:	sub	sp, sp, #112	; 0x70
   1c090:	cmp	r0, r1
   1c094:	beq	1c14c <__assert_fail@plt+0xa284>
   1c098:	mov	r4, r1
   1c09c:	mov	r5, r0
   1c0a0:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1c0a4:	cmp	r0, #1
   1c0a8:	bls	1c158 <__assert_fail@plt+0xa290>
   1c0ac:	mov	r7, #0
   1c0b0:	add	r0, sp, #56	; 0x38
   1c0b4:	str	r7, [sp, #64]	; 0x40
   1c0b8:	str	r7, [sp, #60]	; 0x3c
   1c0bc:	str	r5, [sp, #72]	; 0x48
   1c0c0:	strb	r7, [sp, #68]	; 0x44
   1c0c4:	strb	r7, [sp, #56]	; 0x38
   1c0c8:	str	r7, [sp, #8]
   1c0cc:	str	r7, [sp, #4]
   1c0d0:	str	r4, [sp, #16]
   1c0d4:	strb	r7, [sp, #12]
   1c0d8:	strb	r7, [sp]
   1c0dc:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   1c0e0:	ldrb	r0, [sp, #80]	; 0x50
   1c0e4:	cmp	r0, #0
   1c0e8:	beq	1c1c4 <__assert_fail@plt+0xa2fc>
   1c0ec:	ldr	r0, [sp, #84]	; 0x54
   1c0f0:	cmp	r0, #0
   1c0f4:	bne	1c1c4 <__assert_fail@plt+0xa2fc>
   1c0f8:	add	r0, sp, #56	; 0x38
   1c0fc:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   1c100:	ldrb	r1, [sp, #80]	; 0x50
   1c104:	mov	r0, #1
   1c108:	cmp	r1, #0
   1c10c:	beq	1c144 <__assert_fail@plt+0xa27c>
   1c110:	ldr	r1, [sp, #84]	; 0x54
   1c114:	cmp	r1, #0
   1c118:	bne	1c144 <__assert_fail@plt+0xa27c>
   1c11c:	mov	r0, sp
   1c120:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   1c124:	ldrb	r1, [sp, #24]
   1c128:	ldr	r0, [sp, #28]
   1c12c:	cmp	r0, #0
   1c130:	clz	r1, r1
   1c134:	movwne	r0, #1
   1c138:	lsr	r1, r1, #5
   1c13c:	orr	r0, r1, r0
   1c140:	rsb	r0, r0, #0
   1c144:	sub	sp, fp, #24
   1c148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c14c:	mov	r0, #0
   1c150:	sub	sp, fp, #24
   1c154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c158:	bl	11c7c <__ctype_b_loc@plt>
   1c15c:	ldr	r8, [r0]
   1c160:	ldrb	r6, [r5]
   1c164:	add	r0, r8, r6, lsl #1
   1c168:	ldrb	r0, [r0, #1]
   1c16c:	tst	r0, #1
   1c170:	beq	1c180 <__assert_fail@plt+0xa2b8>
   1c174:	bl	11c40 <__ctype_tolower_loc@plt>
   1c178:	ldr	r0, [r0]
   1c17c:	ldrb	r6, [r0, r6, lsl #2]
   1c180:	ldrb	r7, [r4]
   1c184:	add	r0, r8, r7, lsl #1
   1c188:	ldrb	r0, [r0, #1]
   1c18c:	tst	r0, #1
   1c190:	beq	1c1a0 <__assert_fail@plt+0xa2d8>
   1c194:	bl	11c40 <__ctype_tolower_loc@plt>
   1c198:	ldr	r0, [r0]
   1c19c:	ldrb	r7, [r0, r7, lsl #2]
   1c1a0:	cmp	r6, #0
   1c1a4:	beq	1c1b8 <__assert_fail@plt+0xa2f0>
   1c1a8:	add	r4, r4, #1
   1c1ac:	add	r5, r5, #1
   1c1b0:	cmp	r6, r7
   1c1b4:	beq	1c160 <__assert_fail@plt+0xa298>
   1c1b8:	sub	r0, r6, r7
   1c1bc:	sub	sp, fp, #24
   1c1c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c1c4:	mov	r4, sp
   1c1c8:	add	r5, sp, #56	; 0x38
   1c1cc:	mov	r0, r4
   1c1d0:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   1c1d4:	ldrb	r0, [sp, #24]
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c1ec <__assert_fail@plt+0xa324>
   1c1e0:	ldr	r1, [sp, #28]
   1c1e4:	cmp	r1, #0
   1c1e8:	beq	1c0f8 <__assert_fail@plt+0xa230>
   1c1ec:	ldrb	r1, [sp, #80]	; 0x50
   1c1f0:	cmp	r1, #0
   1c1f4:	beq	1c224 <__assert_fail@plt+0xa35c>
   1c1f8:	cmp	r0, #0
   1c1fc:	beq	1c29c <__assert_fail@plt+0xa3d4>
   1c200:	ldr	r0, [sp, #84]	; 0x54
   1c204:	bl	11ad8 <towlower@plt>
   1c208:	mov	r6, r0
   1c20c:	ldr	r0, [sp, #28]
   1c210:	bl	11ad8 <towlower@plt>
   1c214:	sub	r0, r6, r0
   1c218:	cmp	r0, #0
   1c21c:	beq	1c250 <__assert_fail@plt+0xa388>
   1c220:	b	1c144 <__assert_fail@plt+0xa27c>
   1c224:	cmp	r0, #0
   1c228:	bne	1c2a8 <__assert_fail@plt+0xa3e0>
   1c22c:	ldr	r3, [sp, #20]
   1c230:	ldr	r2, [sp, #76]	; 0x4c
   1c234:	cmp	r2, r3
   1c238:	bne	1c2b4 <__assert_fail@plt+0xa3ec>
   1c23c:	ldr	r1, [sp, #16]
   1c240:	ldr	r0, [sp, #72]	; 0x48
   1c244:	bl	11af0 <memcmp@plt>
   1c248:	cmp	r0, #0
   1c24c:	bne	1c144 <__assert_fail@plt+0xa27c>
   1c250:	strb	r7, [sp, #68]	; 0x44
   1c254:	strb	r7, [sp, #12]
   1c258:	ldr	r0, [sp, #72]	; 0x48
   1c25c:	ldr	r1, [sp, #76]	; 0x4c
   1c260:	add	r0, r0, r1
   1c264:	ldr	r1, [sp, #20]
   1c268:	str	r0, [sp, #72]	; 0x48
   1c26c:	ldr	r0, [sp, #16]
   1c270:	add	r0, r0, r1
   1c274:	str	r0, [sp, #16]
   1c278:	mov	r0, r5
   1c27c:	bl	1c2f4 <__assert_fail@plt+0xa42c>
   1c280:	ldrb	r0, [sp, #80]	; 0x50
   1c284:	cmp	r0, #0
   1c288:	beq	1c1cc <__assert_fail@plt+0xa304>
   1c28c:	ldr	r0, [sp, #84]	; 0x54
   1c290:	cmp	r0, #0
   1c294:	bne	1c1cc <__assert_fail@plt+0xa304>
   1c298:	b	1c0f8 <__assert_fail@plt+0xa230>
   1c29c:	mvn	r0, #0
   1c2a0:	sub	sp, fp, #24
   1c2a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c2a8:	mov	r0, #1
   1c2ac:	sub	sp, fp, #24
   1c2b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c2b4:	ldr	r1, [sp, #16]
   1c2b8:	ldr	r0, [sp, #72]	; 0x48
   1c2bc:	bcs	1c2d4 <__assert_fail@plt+0xa40c>
   1c2c0:	bl	11af0 <memcmp@plt>
   1c2c4:	mov	r1, r0
   1c2c8:	mvn	r0, #0
   1c2cc:	cmp	r1, #0
   1c2d0:	b	1c2e8 <__assert_fail@plt+0xa420>
   1c2d4:	mov	r2, r3
   1c2d8:	bl	11af0 <memcmp@plt>
   1c2dc:	mov	r1, r0
   1c2e0:	mvn	r0, #0
   1c2e4:	cmn	r1, #1
   1c2e8:	movwgt	r0, #1
   1c2ec:	sub	sp, fp, #24
   1c2f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c2f4:	push	{r4, r5, r6, r7, fp, lr}
   1c2f8:	add	fp, sp, #16
   1c2fc:	mov	r4, r0
   1c300:	ldrb	r0, [r0, #12]
   1c304:	cmp	r0, #0
   1c308:	popne	{r4, r5, r6, r7, fp, pc}
   1c30c:	ldrb	r0, [r4]
   1c310:	ldr	r5, [r4, #16]
   1c314:	cmp	r0, #0
   1c318:	beq	1c374 <__assert_fail@plt+0xa4ac>
   1c31c:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1c320:	mov	r1, r0
   1c324:	mov	r0, r5
   1c328:	bl	30e00 <__assert_fail@plt+0x1ef38>
   1c32c:	add	r6, r4, #4
   1c330:	add	r7, r4, #28
   1c334:	mov	r2, r0
   1c338:	mov	r1, r5
   1c33c:	mov	r0, r7
   1c340:	mov	r3, r6
   1c344:	bl	358a0 <__assert_fail@plt+0x239d8>
   1c348:	cmn	r0, #2
   1c34c:	str	r0, [r4, #20]
   1c350:	beq	1c3f0 <__assert_fail@plt+0xa528>
   1c354:	cmp	r0, #0
   1c358:	beq	1c3ac <__assert_fail@plt+0xa4e4>
   1c35c:	cmn	r0, #1
   1c360:	bne	1c3d0 <__assert_fail@plt+0xa508>
   1c364:	mov	r0, #0
   1c368:	strb	r0, [r4, #24]
   1c36c:	mov	r0, #1
   1c370:	b	1c400 <__assert_fail@plt+0xa538>
   1c374:	ldrb	r0, [r5]
   1c378:	movw	r2, #33796	; 0x8404
   1c37c:	movt	r2, #3
   1c380:	ubfx	r1, r0, #5, #3
   1c384:	ldr	r1, [r2, r1, lsl #2]
   1c388:	and	r2, r0, #31
   1c38c:	mov	r0, #1
   1c390:	tst	r1, r0, lsl r2
   1c394:	beq	1c410 <__assert_fail@plt+0xa548>
   1c398:	str	r0, [r4, #20]
   1c39c:	ldrb	r1, [r5]
   1c3a0:	strb	r0, [r4, #24]
   1c3a4:	str	r1, [r4, #28]
   1c3a8:	b	1c404 <__assert_fail@plt+0xa53c>
   1c3ac:	mov	r0, #1
   1c3b0:	str	r0, [r4, #20]
   1c3b4:	ldr	r0, [r4, #16]
   1c3b8:	ldrb	r0, [r0]
   1c3bc:	cmp	r0, #0
   1c3c0:	bne	1c42c <__assert_fail@plt+0xa564>
   1c3c4:	ldr	r0, [r7]
   1c3c8:	cmp	r0, #0
   1c3cc:	bne	1c444 <__assert_fail@plt+0xa57c>
   1c3d0:	mov	r0, #1
   1c3d4:	strb	r0, [r4, #24]
   1c3d8:	mov	r0, r6
   1c3dc:	bl	11ae4 <mbsinit@plt>
   1c3e0:	cmp	r0, #0
   1c3e4:	movne	r0, #0
   1c3e8:	strbne	r0, [r4]
   1c3ec:	b	1c404 <__assert_fail@plt+0xa53c>
   1c3f0:	ldr	r0, [r4, #16]
   1c3f4:	bl	11cac <strlen@plt>
   1c3f8:	mov	r1, #0
   1c3fc:	strb	r1, [r4, #24]
   1c400:	str	r0, [r4, #20]
   1c404:	mov	r0, #1
   1c408:	strb	r0, [r4, #12]
   1c40c:	pop	{r4, r5, r6, r7, fp, pc}
   1c410:	add	r0, r4, #4
   1c414:	bl	11ae4 <mbsinit@plt>
   1c418:	cmp	r0, #0
   1c41c:	beq	1c45c <__assert_fail@plt+0xa594>
   1c420:	mov	r0, #1
   1c424:	strb	r0, [r4]
   1c428:	b	1c31c <__assert_fail@plt+0xa454>
   1c42c:	movw	r0, #31355	; 0x7a7b
   1c430:	movw	r1, #31291	; 0x7a3b
   1c434:	movw	r3, #31307	; 0x7a4b
   1c438:	mov	r2, #171	; 0xab
   1c43c:	movt	r0, #3
   1c440:	b	1c470 <__assert_fail@plt+0xa5a8>
   1c444:	movw	r0, #31378	; 0x7a92
   1c448:	movw	r1, #31291	; 0x7a3b
   1c44c:	movw	r3, #31307	; 0x7a4b
   1c450:	mov	r2, #172	; 0xac
   1c454:	movt	r0, #3
   1c458:	b	1c470 <__assert_fail@plt+0xa5a8>
   1c45c:	movw	r0, #31268	; 0x7a24
   1c460:	movw	r1, #31291	; 0x7a3b
   1c464:	movw	r3, #31307	; 0x7a4b
   1c468:	mov	r2, #143	; 0x8f
   1c46c:	movt	r0, #3
   1c470:	movt	r1, #3
   1c474:	movt	r3, #3
   1c478:	bl	11ec8 <__assert_fail@plt>
   1c47c:	ldr	r2, [r0, #16]
   1c480:	add	r1, r2, r1
   1c484:	str	r1, [r0, #16]
   1c488:	bx	lr
   1c48c:	push	{r4, r5, r6, sl, fp, lr}
   1c490:	add	fp, sp, #16
   1c494:	mov	r5, r1
   1c498:	ldrb	r1, [r1]
   1c49c:	mov	r4, r0
   1c4a0:	strb	r1, [r0], #4
   1c4a4:	cmp	r1, #0
   1c4a8:	beq	1c4b8 <__assert_fail@plt+0xa5f0>
   1c4ac:	ldmib	r5, {r1, r2}
   1c4b0:	stm	r0, {r1, r2}
   1c4b4:	b	1c4c4 <__assert_fail@plt+0xa5fc>
   1c4b8:	mov	r1, #0
   1c4bc:	str	r1, [r0]
   1c4c0:	str	r1, [r0, #4]
   1c4c4:	ldrb	r0, [r5, #12]
   1c4c8:	strb	r0, [r4, #12]
   1c4cc:	add	r0, r5, #32
   1c4d0:	ldr	r1, [r5, #16]
   1c4d4:	cmp	r1, r0
   1c4d8:	beq	1c4e4 <__assert_fail@plt+0xa61c>
   1c4dc:	mov	r6, r1
   1c4e0:	b	1c4f4 <__assert_fail@plt+0xa62c>
   1c4e4:	ldr	r2, [r5, #20]
   1c4e8:	add	r6, r4, #32
   1c4ec:	mov	r0, r6
   1c4f0:	bl	11ab4 <memcpy@plt>
   1c4f4:	str	r6, [r4, #16]
   1c4f8:	ldr	r0, [r5, #20]
   1c4fc:	str	r0, [r4, #20]
   1c500:	ldrb	r0, [r5, #24]
   1c504:	strb	r0, [r4, #24]
   1c508:	cmp	r0, #0
   1c50c:	ldrne	r0, [r5, #28]
   1c510:	strne	r0, [r4, #28]
   1c514:	pop	{r4, r5, r6, sl, fp, pc}
   1c518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c51c:	add	fp, sp, #28
   1c520:	sub	sp, sp, #36	; 0x24
   1c524:	movw	r0, #31396	; 0x7aa4
   1c528:	movw	r1, #31532	; 0x7b2c
   1c52c:	movt	r0, #3
   1c530:	movt	r1, #3
   1c534:	bl	11e20 <fopen64@plt>
   1c538:	cmp	r0, #0
   1c53c:	beq	1ccc0 <__assert_fail@plt+0xadf8>
   1c540:	mov	r3, r0
   1c544:	mov	r0, #0
   1c548:	add	r1, sp, #24
   1c54c:	mov	r2, #10
   1c550:	str	r0, [sp, #28]
   1c554:	str	r0, [sp, #24]
   1c558:	add	r0, sp, #28
   1c55c:	mov	r9, r3
   1c560:	bl	11a24 <__getdelim@plt>
   1c564:	cmn	r0, #1
   1c568:	beq	1d094 <__assert_fail@plt+0xb1cc>
   1c56c:	movw	r8, #31417	; 0x7ab9
   1c570:	add	r0, sp, #32
   1c574:	add	sl, sp, #12
   1c578:	add	r6, sp, #20
   1c57c:	add	r7, sp, #16
   1c580:	add	r5, sp, #28
   1c584:	add	r4, sp, #24
   1c588:	str	r9, [sp, #4]
   1c58c:	movt	r8, #3
   1c590:	str	r0, [sp, #8]
   1c594:	b	1c5c8 <__assert_fail@plt+0xa700>
   1c598:	add	r6, sp, #20
   1c59c:	add	r7, sp, #16
   1c5a0:	add	r5, sp, #28
   1c5a4:	add	r4, sp, #24
   1c5a8:	mov	r3, r9
   1c5ac:	mov	r0, r5
   1c5b0:	mov	r1, r4
   1c5b4:	mov	r2, #10
   1c5b8:	mov	r9, r3
   1c5bc:	bl	11a24 <__getdelim@plt>
   1c5c0:	cmn	r0, #1
   1c5c4:	beq	1d09c <__assert_fail@plt+0xb1d4>
   1c5c8:	ldr	r0, [sp, #28]
   1c5cc:	mov	r1, r8
   1c5d0:	mov	r2, r6
   1c5d4:	mov	r3, r7
   1c5d8:	str	sl, [sp]
   1c5dc:	bl	11dc0 <sscanf@plt>
   1c5e0:	orr	r0, r0, #1
   1c5e4:	cmp	r0, #3
   1c5e8:	bne	1c5a8 <__assert_fail@plt+0xa6e0>
   1c5ec:	ldr	r0, [sp, #12]
   1c5f0:	ldr	r1, [sp, #28]
   1c5f4:	add	r0, r1, r0
   1c5f8:	mov	r1, #32
   1c5fc:	mov	r5, r0
   1c600:	bl	11cb8 <strchr@plt>
   1c604:	cmp	r0, #0
   1c608:	beq	1c598 <__assert_fail@plt+0xa6d0>
   1c60c:	mov	r6, r0
   1c610:	mov	r4, #0
   1c614:	mov	r1, #32
   1c618:	strb	r4, [r6], #1
   1c61c:	mov	r0, r6
   1c620:	bl	11cb8 <strchr@plt>
   1c624:	cmp	r0, #0
   1c628:	beq	1c598 <__assert_fail@plt+0xa6d0>
   1c62c:	movw	r1, #31434	; 0x7aca
   1c630:	strb	r4, [r0], #1
   1c634:	movt	r1, #3
   1c638:	bl	34894 <__assert_fail@plt+0x229cc>
   1c63c:	cmp	r0, #0
   1c640:	beq	1c598 <__assert_fail@plt+0xa6d0>
   1c644:	add	sl, r0, #3
   1c648:	mov	r1, #32
   1c64c:	mov	r0, sl
   1c650:	bl	11cb8 <strchr@plt>
   1c654:	cmp	r0, #0
   1c658:	beq	1c718 <__assert_fail@plt+0xa850>
   1c65c:	mov	r9, r0
   1c660:	mov	r4, #0
   1c664:	mov	r1, #32
   1c668:	strb	r4, [r9], #1
   1c66c:	mov	r0, r9
   1c670:	bl	11cb8 <strchr@plt>
   1c674:	cmp	r0, #0
   1c678:	beq	1c718 <__assert_fail@plt+0xa850>
   1c67c:	strb	r4, [r0]
   1c680:	mov	r0, r9
   1c684:	bl	11cac <strlen@plt>
   1c688:	adds	r0, r0, #1
   1c68c:	mov	r8, r5
   1c690:	bcs	1c730 <__assert_fail@plt+0xa868>
   1c694:	mov	r2, #0
   1c698:	mov	r1, r9
   1c69c:	b	1c6b0 <__assert_fail@plt+0xa7e8>
   1c6a0:	add	r2, r2, #1
   1c6a4:	strb	r3, [r1], #1
   1c6a8:	cmp	r2, r0
   1c6ac:	bcs	1c730 <__assert_fail@plt+0xa868>
   1c6b0:	ldrb	r3, [r9, r2]
   1c6b4:	add	r7, r2, #4
   1c6b8:	cmp	r7, r0
   1c6bc:	bcs	1c6a0 <__assert_fail@plt+0xa7d8>
   1c6c0:	cmp	r3, #92	; 0x5c
   1c6c4:	bne	1c6a0 <__assert_fail@plt+0xa7d8>
   1c6c8:	add	r7, r2, r9
   1c6cc:	ldrb	r5, [r7, #1]
   1c6d0:	and	r4, r5, #252	; 0xfc
   1c6d4:	cmp	r4, #48	; 0x30
   1c6d8:	bne	1c6a0 <__assert_fail@plt+0xa7d8>
   1c6dc:	ldrb	r4, [r7, #2]
   1c6e0:	and	r7, r4, #248	; 0xf8
   1c6e4:	cmp	r7, #48	; 0x30
   1c6e8:	bne	1c6a0 <__assert_fail@plt+0xa7d8>
   1c6ec:	add	ip, r2, #3
   1c6f0:	ldrb	lr, [r9, ip]
   1c6f4:	and	r7, lr, #248	; 0xf8
   1c6f8:	cmp	r7, #48	; 0x30
   1c6fc:	bne	1c6a0 <__assert_fail@plt+0xa7d8>
   1c700:	lsl	r2, r5, #6
   1c704:	add	r2, r2, r4, lsl #3
   1c708:	add	r2, r2, lr
   1c70c:	add	r3, r2, #80	; 0x50
   1c710:	mov	r2, ip
   1c714:	b	1c6a0 <__assert_fail@plt+0xa7d8>
   1c718:	ldr	r3, [sp, #4]
   1c71c:	movw	r8, #31417	; 0x7ab9
   1c720:	add	sl, sp, #12
   1c724:	add	r6, sp, #20
   1c728:	movt	r8, #3
   1c72c:	b	1ccb0 <__assert_fail@plt+0xade8>
   1c730:	mov	r0, r6
   1c734:	bl	11cac <strlen@plt>
   1c738:	adds	r0, r0, #1
   1c73c:	bcs	1c7c4 <__assert_fail@plt+0xa8fc>
   1c740:	mov	r2, #0
   1c744:	mov	r1, r6
   1c748:	b	1c75c <__assert_fail@plt+0xa894>
   1c74c:	add	r2, r2, #1
   1c750:	strb	r3, [r1], #1
   1c754:	cmp	r2, r0
   1c758:	bcs	1c7c4 <__assert_fail@plt+0xa8fc>
   1c75c:	ldrb	r3, [r6, r2]
   1c760:	add	r7, r2, #4
   1c764:	cmp	r7, r0
   1c768:	bcs	1c74c <__assert_fail@plt+0xa884>
   1c76c:	cmp	r3, #92	; 0x5c
   1c770:	bne	1c74c <__assert_fail@plt+0xa884>
   1c774:	add	r7, r2, r6
   1c778:	ldrb	r5, [r7, #1]
   1c77c:	and	r4, r5, #252	; 0xfc
   1c780:	cmp	r4, #48	; 0x30
   1c784:	bne	1c74c <__assert_fail@plt+0xa884>
   1c788:	ldrb	r4, [r7, #2]
   1c78c:	and	r7, r4, #248	; 0xf8
   1c790:	cmp	r7, #48	; 0x30
   1c794:	bne	1c74c <__assert_fail@plt+0xa884>
   1c798:	add	ip, r2, #3
   1c79c:	ldrb	lr, [r6, ip]
   1c7a0:	and	r7, lr, #248	; 0xf8
   1c7a4:	cmp	r7, #48	; 0x30
   1c7a8:	bne	1c74c <__assert_fail@plt+0xa884>
   1c7ac:	lsl	r2, r5, #6
   1c7b0:	add	r2, r2, r4, lsl #3
   1c7b4:	add	r2, r2, lr
   1c7b8:	add	r3, r2, #80	; 0x50
   1c7bc:	mov	r2, ip
   1c7c0:	b	1c74c <__assert_fail@plt+0xa884>
   1c7c4:	mov	r0, r8
   1c7c8:	bl	11cac <strlen@plt>
   1c7cc:	adds	r0, r0, #1
   1c7d0:	bcs	1c858 <__assert_fail@plt+0xa990>
   1c7d4:	mov	r2, #0
   1c7d8:	mov	r1, r8
   1c7dc:	b	1c7f0 <__assert_fail@plt+0xa928>
   1c7e0:	add	r2, r2, #1
   1c7e4:	strb	r3, [r1], #1
   1c7e8:	cmp	r2, r0
   1c7ec:	bcs	1c858 <__assert_fail@plt+0xa990>
   1c7f0:	ldrb	r3, [r8, r2]
   1c7f4:	add	r7, r2, #4
   1c7f8:	cmp	r7, r0
   1c7fc:	bcs	1c7e0 <__assert_fail@plt+0xa918>
   1c800:	cmp	r3, #92	; 0x5c
   1c804:	bne	1c7e0 <__assert_fail@plt+0xa918>
   1c808:	add	r7, r2, r8
   1c80c:	ldrb	r5, [r7, #1]
   1c810:	and	r4, r5, #252	; 0xfc
   1c814:	cmp	r4, #48	; 0x30
   1c818:	bne	1c7e0 <__assert_fail@plt+0xa918>
   1c81c:	ldrb	r4, [r7, #2]
   1c820:	and	r7, r4, #248	; 0xf8
   1c824:	cmp	r7, #48	; 0x30
   1c828:	bne	1c7e0 <__assert_fail@plt+0xa918>
   1c82c:	add	ip, r2, #3
   1c830:	ldrb	lr, [r8, ip]
   1c834:	and	r7, lr, #248	; 0xf8
   1c838:	cmp	r7, #48	; 0x30
   1c83c:	bne	1c7e0 <__assert_fail@plt+0xa918>
   1c840:	lsl	r2, r5, #6
   1c844:	add	r2, r2, r4, lsl #3
   1c848:	add	r2, r2, lr
   1c84c:	add	r3, r2, #80	; 0x50
   1c850:	mov	r2, ip
   1c854:	b	1c7e0 <__assert_fail@plt+0xa918>
   1c858:	mov	r0, sl
   1c85c:	bl	11cac <strlen@plt>
   1c860:	adds	r0, r0, #1
   1c864:	bcs	1c8ec <__assert_fail@plt+0xaa24>
   1c868:	mov	r2, #0
   1c86c:	mov	r1, sl
   1c870:	b	1c884 <__assert_fail@plt+0xa9bc>
   1c874:	add	r2, r2, #1
   1c878:	strb	r3, [r1], #1
   1c87c:	cmp	r2, r0
   1c880:	bcs	1c8ec <__assert_fail@plt+0xaa24>
   1c884:	ldrb	r3, [sl, r2]
   1c888:	add	r7, r2, #4
   1c88c:	cmp	r7, r0
   1c890:	bcs	1c874 <__assert_fail@plt+0xa9ac>
   1c894:	cmp	r3, #92	; 0x5c
   1c898:	bne	1c874 <__assert_fail@plt+0xa9ac>
   1c89c:	add	r7, r2, sl
   1c8a0:	ldrb	r5, [r7, #1]
   1c8a4:	and	r4, r5, #252	; 0xfc
   1c8a8:	cmp	r4, #48	; 0x30
   1c8ac:	bne	1c874 <__assert_fail@plt+0xa9ac>
   1c8b0:	ldrb	r4, [r7, #2]
   1c8b4:	and	r7, r4, #248	; 0xf8
   1c8b8:	cmp	r7, #48	; 0x30
   1c8bc:	bne	1c874 <__assert_fail@plt+0xa9ac>
   1c8c0:	add	ip, r2, #3
   1c8c4:	ldrb	lr, [sl, ip]
   1c8c8:	and	r7, lr, #248	; 0xf8
   1c8cc:	cmp	r7, #48	; 0x30
   1c8d0:	bne	1c874 <__assert_fail@plt+0xa9ac>
   1c8d4:	lsl	r2, r5, #6
   1c8d8:	add	r2, r2, r4, lsl #3
   1c8dc:	add	r2, r2, lr
   1c8e0:	add	r3, r2, #80	; 0x50
   1c8e4:	mov	r2, ip
   1c8e8:	b	1c874 <__assert_fail@plt+0xa9ac>
   1c8ec:	mov	r0, #32
   1c8f0:	bl	31b44 <__assert_fail@plt+0x1fc7c>
   1c8f4:	mov	r7, r0
   1c8f8:	mov	r0, r9
   1c8fc:	bl	32048 <__assert_fail@plt+0x20180>
   1c900:	str	r0, [r7]
   1c904:	mov	r0, r6
   1c908:	bl	32048 <__assert_fail@plt+0x20180>
   1c90c:	str	r0, [r7, #4]
   1c910:	mov	r0, r8
   1c914:	bl	32048 <__assert_fail@plt+0x20180>
   1c918:	str	r0, [r7, #8]
   1c91c:	mov	r0, sl
   1c920:	bl	32048 <__assert_fail@plt+0x20180>
   1c924:	str	r0, [r7, #12]
   1c928:	mov	r6, r0
   1c92c:	ldr	r2, [sp, #20]
   1c930:	ldrb	r0, [r7, #24]
   1c934:	mov	r3, r2
   1c938:	orr	r4, r0, #4
   1c93c:	ldr	r0, [sp, #16]
   1c940:	bfc	r3, #0, #12
   1c944:	strb	r4, [r7, #24]
   1c948:	bic	r1, r0, #255	; 0xff
   1c94c:	uxtb	r0, r0
   1c950:	orr	r3, r3, r1, lsr #20
   1c954:	bfi	r0, r2, #8, #12
   1c958:	str	r3, [r7, #20]
   1c95c:	orr	r0, r0, r1, lsl #12
   1c960:	movw	r1, #31438	; 0x7ace
   1c964:	movt	r1, #3
   1c968:	str	r0, [r7, #16]
   1c96c:	mov	r0, r6
   1c970:	bl	11a3c <strcmp@plt>
   1c974:	cmp	r0, #0
   1c978:	mov	r8, #1
   1c97c:	mov	r0, #1
   1c980:	beq	1caec <__assert_fail@plt+0xac24>
   1c984:	movw	r1, #31445	; 0x7ad5
   1c988:	mov	r0, r6
   1c98c:	movt	r1, #3
   1c990:	bl	11a3c <strcmp@plt>
   1c994:	cmp	r0, #0
   1c998:	mov	r0, #1
   1c99c:	beq	1caec <__assert_fail@plt+0xac24>
   1c9a0:	movw	r1, #31450	; 0x7ada
   1c9a4:	mov	r0, r6
   1c9a8:	movt	r1, #3
   1c9ac:	bl	11a3c <strcmp@plt>
   1c9b0:	cmp	r0, #0
   1c9b4:	mov	r0, #1
   1c9b8:	beq	1caec <__assert_fail@plt+0xac24>
   1c9bc:	movw	r1, #31456	; 0x7ae0
   1c9c0:	mov	r0, r6
   1c9c4:	movt	r1, #3
   1c9c8:	bl	11a3c <strcmp@plt>
   1c9cc:	cmp	r0, #0
   1c9d0:	mov	r0, #1
   1c9d4:	beq	1caec <__assert_fail@plt+0xac24>
   1c9d8:	movw	r1, #31464	; 0x7ae8
   1c9dc:	mov	r0, r6
   1c9e0:	movt	r1, #3
   1c9e4:	bl	11a3c <strcmp@plt>
   1c9e8:	cmp	r0, #0
   1c9ec:	mov	r0, #1
   1c9f0:	beq	1caec <__assert_fail@plt+0xac24>
   1c9f4:	movw	r1, #31471	; 0x7aef
   1c9f8:	mov	r0, r6
   1c9fc:	movt	r1, #3
   1ca00:	bl	11a3c <strcmp@plt>
   1ca04:	cmp	r0, #0
   1ca08:	mov	r0, #1
   1ca0c:	beq	1caec <__assert_fail@plt+0xac24>
   1ca10:	movw	r1, #31479	; 0x7af7
   1ca14:	mov	r0, r6
   1ca18:	movt	r1, #3
   1ca1c:	bl	11a3c <strcmp@plt>
   1ca20:	cmp	r0, #0
   1ca24:	mov	r0, #1
   1ca28:	beq	1caec <__assert_fail@plt+0xac24>
   1ca2c:	movw	r1, #31491	; 0x7b03
   1ca30:	mov	r0, r6
   1ca34:	movt	r1, #3
   1ca38:	bl	11a3c <strcmp@plt>
   1ca3c:	cmp	r0, #0
   1ca40:	mov	r0, #1
   1ca44:	beq	1caec <__assert_fail@plt+0xac24>
   1ca48:	movw	r1, #31498	; 0x7b0a
   1ca4c:	mov	r0, r6
   1ca50:	movt	r1, #3
   1ca54:	bl	11a3c <strcmp@plt>
   1ca58:	cmp	r0, #0
   1ca5c:	mov	r0, #1
   1ca60:	beq	1caec <__assert_fail@plt+0xac24>
   1ca64:	movw	r1, #31509	; 0x7b15
   1ca68:	mov	r0, r6
   1ca6c:	movt	r1, #3
   1ca70:	bl	11a3c <strcmp@plt>
   1ca74:	cmp	r0, #0
   1ca78:	mov	r0, #1
   1ca7c:	beq	1caec <__assert_fail@plt+0xac24>
   1ca80:	movw	r1, #31515	; 0x7b1b
   1ca84:	mov	r0, r6
   1ca88:	movt	r1, #3
   1ca8c:	bl	11a3c <strcmp@plt>
   1ca90:	cmp	r0, #0
   1ca94:	mov	r0, #1
   1ca98:	beq	1caec <__assert_fail@plt+0xac24>
   1ca9c:	movw	r1, #31521	; 0x7b21
   1caa0:	mov	r0, r6
   1caa4:	movt	r1, #3
   1caa8:	bl	11a3c <strcmp@plt>
   1caac:	cmp	r0, #0
   1cab0:	mov	r0, #1
   1cab4:	beq	1caec <__assert_fail@plt+0xac24>
   1cab8:	movw	r1, #31528	; 0x7b28
   1cabc:	mov	r0, r6
   1cac0:	movt	r1, #3
   1cac4:	bl	11a3c <strcmp@plt>
   1cac8:	cmp	r0, #0
   1cacc:	mov	r0, #1
   1cad0:	beq	1caec <__assert_fail@plt+0xac24>
   1cad4:	movw	r1, #31535	; 0x7b2f
   1cad8:	mov	r0, r6
   1cadc:	movt	r1, #3
   1cae0:	bl	11a3c <strcmp@plt>
   1cae4:	clz	r0, r0
   1cae8:	lsr	r0, r0, #5
   1caec:	bic	r1, r4, #1
   1caf0:	orr	r5, r1, r0
   1caf4:	mov	r1, #58	; 0x3a
   1caf8:	strb	r5, [r7, #24]
   1cafc:	ldr	r4, [r7]
   1cb00:	mov	r0, r4
   1cb04:	bl	11cb8 <strchr@plt>
   1cb08:	ldr	r3, [sp, #4]
   1cb0c:	cmp	r0, #0
   1cb10:	beq	1cb1c <__assert_fail@plt+0xac54>
   1cb14:	add	r6, sp, #20
   1cb18:	b	1cc88 <__assert_fail@plt+0xadc0>
   1cb1c:	ldrb	r0, [r4]
   1cb20:	mov	r9, r3
   1cb24:	cmp	r0, #47	; 0x2f
   1cb28:	bne	1cb80 <__assert_fail@plt+0xacb8>
   1cb2c:	ldrb	r0, [r4, #1]
   1cb30:	cmp	r0, #47	; 0x2f
   1cb34:	bne	1cb80 <__assert_fail@plt+0xacb8>
   1cb38:	movw	r1, #31540	; 0x7b34
   1cb3c:	mov	r0, r6
   1cb40:	movt	r1, #3
   1cb44:	bl	11a3c <strcmp@plt>
   1cb48:	cmp	r0, #0
   1cb4c:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cb50:	movw	r1, #31546	; 0x7b3a
   1cb54:	mov	r0, r6
   1cb58:	movt	r1, #3
   1cb5c:	bl	11a3c <strcmp@plt>
   1cb60:	cmp	r0, #0
   1cb64:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cb68:	movw	r1, #31551	; 0x7b3f
   1cb6c:	mov	r0, r6
   1cb70:	movt	r1, #3
   1cb74:	bl	11a3c <strcmp@plt>
   1cb78:	cmp	r0, #0
   1cb7c:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cb80:	movw	r1, #31556	; 0x7b44
   1cb84:	mov	r0, r6
   1cb88:	movt	r1, #3
   1cb8c:	bl	11a3c <strcmp@plt>
   1cb90:	cmp	r0, #0
   1cb94:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cb98:	movw	r1, #31561	; 0x7b49
   1cb9c:	mov	r0, r6
   1cba0:	movt	r1, #3
   1cba4:	bl	11a3c <strcmp@plt>
   1cba8:	cmp	r0, #0
   1cbac:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cbb0:	movw	r1, #31565	; 0x7b4d
   1cbb4:	mov	r0, r6
   1cbb8:	movt	r1, #3
   1cbbc:	bl	11a3c <strcmp@plt>
   1cbc0:	cmp	r0, #0
   1cbc4:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cbc8:	movw	r1, #31570	; 0x7b52
   1cbcc:	mov	r0, r6
   1cbd0:	movt	r1, #3
   1cbd4:	bl	11a3c <strcmp@plt>
   1cbd8:	cmp	r0, #0
   1cbdc:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cbe0:	movw	r1, #31581	; 0x7b5d
   1cbe4:	mov	r0, r6
   1cbe8:	movt	r1, #3
   1cbec:	bl	11a3c <strcmp@plt>
   1cbf0:	cmp	r0, #0
   1cbf4:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cbf8:	movw	r1, #31587	; 0x7b63
   1cbfc:	mov	r0, r6
   1cc00:	movt	r1, #3
   1cc04:	bl	11a3c <strcmp@plt>
   1cc08:	cmp	r0, #0
   1cc0c:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cc10:	movw	r1, #31592	; 0x7b68
   1cc14:	mov	r0, r6
   1cc18:	movt	r1, #3
   1cc1c:	bl	11a3c <strcmp@plt>
   1cc20:	cmp	r0, #0
   1cc24:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cc28:	movw	r1, #31598	; 0x7b6e
   1cc2c:	mov	r0, r6
   1cc30:	movt	r1, #3
   1cc34:	bl	11a3c <strcmp@plt>
   1cc38:	cmp	r0, #0
   1cc3c:	beq	1cc80 <__assert_fail@plt+0xadb8>
   1cc40:	movw	r1, #31604	; 0x7b74
   1cc44:	mov	r0, r6
   1cc48:	movt	r1, #3
   1cc4c:	bl	11a3c <strcmp@plt>
   1cc50:	cmp	r0, #0
   1cc54:	add	r6, sp, #20
   1cc58:	mov	r3, r9
   1cc5c:	beq	1cc88 <__assert_fail@plt+0xadc0>
   1cc60:	movw	r0, #31609	; 0x7b79
   1cc64:	mov	r1, r4
   1cc68:	movt	r0, #3
   1cc6c:	bl	11a3c <strcmp@plt>
   1cc70:	clz	r0, r0
   1cc74:	mov	r3, r9
   1cc78:	lsr	r8, r0, #5
   1cc7c:	b	1cc88 <__assert_fail@plt+0xadc0>
   1cc80:	add	r6, sp, #20
   1cc84:	mov	r3, r9
   1cc88:	and	r0, r5, #253	; 0xfd
   1cc8c:	add	sl, sp, #12
   1cc90:	orr	r0, r0, r8, lsl #1
   1cc94:	movw	r8, #31417	; 0x7ab9
   1cc98:	movt	r8, #3
   1cc9c:	strb	r0, [r7, #24]
   1cca0:	ldr	r0, [sp, #8]
   1cca4:	str	r7, [r0]
   1cca8:	add	r0, r7, #28
   1ccac:	str	r0, [sp, #8]
   1ccb0:	add	r7, sp, #16
   1ccb4:	add	r5, sp, #28
   1ccb8:	add	r4, sp, #24
   1ccbc:	b	1c5ac <__assert_fail@plt+0xa6e4>
   1ccc0:	movw	r0, #31616	; 0x7b80
   1ccc4:	movw	r1, #32398	; 0x7e8e
   1ccc8:	movt	r0, #3
   1cccc:	movt	r1, #3
   1ccd0:	bl	11e38 <setmntent@plt>
   1ccd4:	cmp	r0, #0
   1ccd8:	beq	1d0e8 <__assert_fail@plt+0xb220>
   1ccdc:	mov	r8, r0
   1cce0:	bl	11be0 <getmntent@plt>
   1cce4:	cmp	r0, #0
   1cce8:	beq	1d0f0 <__assert_fail@plt+0xb228>
   1ccec:	mov	r5, r0
   1ccf0:	add	sl, sp, #32
   1ccf4:	b	1cd50 <__assert_fail@plt+0xae88>
   1ccf8:	bic	r1, r4, #1
   1ccfc:	orr	r4, r1, r0
   1cd00:	mov	r1, #58	; 0x3a
   1cd04:	strb	r4, [r9, #24]
   1cd08:	ldr	r5, [r9]
   1cd0c:	mov	r0, r5
   1cd10:	bl	11cb8 <strchr@plt>
   1cd14:	cmp	r0, #0
   1cd18:	beq	1cf40 <__assert_fail@plt+0xb078>
   1cd1c:	mvn	r0, #0
   1cd20:	str	r0, [r9, #16]
   1cd24:	str	r0, [r9, #20]
   1cd28:	and	r0, r4, #253	; 0xfd
   1cd2c:	orr	r0, r0, r6, lsl #1
   1cd30:	strb	r0, [r9, #24]
   1cd34:	mov	r0, r8
   1cd38:	str	r9, [sl]
   1cd3c:	add	sl, r9, #28
   1cd40:	bl	11be0 <getmntent@plt>
   1cd44:	mov	r5, r0
   1cd48:	cmp	r0, #0
   1cd4c:	beq	1d0f4 <__assert_fail@plt+0xb22c>
   1cd50:	movw	r1, #31626	; 0x7b8a
   1cd54:	mov	r0, r5
   1cd58:	movt	r1, #3
   1cd5c:	bl	11ba4 <hasmntopt@plt>
   1cd60:	str	r0, [sp, #8]
   1cd64:	mov	r0, #32
   1cd68:	bl	31b44 <__assert_fail@plt+0x1fc7c>
   1cd6c:	mov	r9, r0
   1cd70:	ldr	r0, [r5]
   1cd74:	bl	32048 <__assert_fail@plt+0x20180>
   1cd78:	str	r0, [r9]
   1cd7c:	ldr	r0, [r5, #4]
   1cd80:	bl	32048 <__assert_fail@plt+0x20180>
   1cd84:	str	r0, [r9, #4]
   1cd88:	mov	r0, #0
   1cd8c:	str	r0, [r9, #8]
   1cd90:	ldr	r0, [r5, #8]
   1cd94:	bl	32048 <__assert_fail@plt+0x20180>
   1cd98:	str	r0, [r9, #12]
   1cd9c:	mov	r7, r0
   1cda0:	movw	r1, #31438	; 0x7ace
   1cda4:	ldrb	r0, [r9, #24]
   1cda8:	movt	r1, #3
   1cdac:	orr	r4, r0, #4
   1cdb0:	mov	r0, r7
   1cdb4:	strb	r4, [r9, #24]
   1cdb8:	bl	11a3c <strcmp@plt>
   1cdbc:	cmp	r0, #0
   1cdc0:	mov	r6, #1
   1cdc4:	mov	r0, #1
   1cdc8:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1cdcc:	movw	r1, #31445	; 0x7ad5
   1cdd0:	mov	r0, r7
   1cdd4:	movt	r1, #3
   1cdd8:	bl	11a3c <strcmp@plt>
   1cddc:	cmp	r0, #0
   1cde0:	mov	r0, #1
   1cde4:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1cde8:	movw	r1, #31450	; 0x7ada
   1cdec:	mov	r0, r7
   1cdf0:	movt	r1, #3
   1cdf4:	bl	11a3c <strcmp@plt>
   1cdf8:	cmp	r0, #0
   1cdfc:	mov	r0, #1
   1ce00:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ce04:	movw	r1, #31456	; 0x7ae0
   1ce08:	mov	r0, r7
   1ce0c:	movt	r1, #3
   1ce10:	bl	11a3c <strcmp@plt>
   1ce14:	cmp	r0, #0
   1ce18:	mov	r0, #1
   1ce1c:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ce20:	movw	r1, #31464	; 0x7ae8
   1ce24:	mov	r0, r7
   1ce28:	movt	r1, #3
   1ce2c:	bl	11a3c <strcmp@plt>
   1ce30:	cmp	r0, #0
   1ce34:	mov	r0, #1
   1ce38:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ce3c:	movw	r1, #31471	; 0x7aef
   1ce40:	mov	r0, r7
   1ce44:	movt	r1, #3
   1ce48:	bl	11a3c <strcmp@plt>
   1ce4c:	cmp	r0, #0
   1ce50:	mov	r0, #1
   1ce54:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ce58:	movw	r1, #31479	; 0x7af7
   1ce5c:	mov	r0, r7
   1ce60:	movt	r1, #3
   1ce64:	bl	11a3c <strcmp@plt>
   1ce68:	cmp	r0, #0
   1ce6c:	mov	r0, #1
   1ce70:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ce74:	movw	r1, #31491	; 0x7b03
   1ce78:	mov	r0, r7
   1ce7c:	movt	r1, #3
   1ce80:	bl	11a3c <strcmp@plt>
   1ce84:	cmp	r0, #0
   1ce88:	mov	r0, #1
   1ce8c:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ce90:	movw	r1, #31498	; 0x7b0a
   1ce94:	mov	r0, r7
   1ce98:	movt	r1, #3
   1ce9c:	bl	11a3c <strcmp@plt>
   1cea0:	cmp	r0, #0
   1cea4:	mov	r0, #1
   1cea8:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1ceac:	movw	r1, #31509	; 0x7b15
   1ceb0:	mov	r0, r7
   1ceb4:	movt	r1, #3
   1ceb8:	bl	11a3c <strcmp@plt>
   1cebc:	cmp	r0, #0
   1cec0:	mov	r0, #1
   1cec4:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1cec8:	movw	r1, #31515	; 0x7b1b
   1cecc:	mov	r0, r7
   1ced0:	movt	r1, #3
   1ced4:	bl	11a3c <strcmp@plt>
   1ced8:	cmp	r0, #0
   1cedc:	mov	r0, #1
   1cee0:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1cee4:	movw	r1, #31521	; 0x7b21
   1cee8:	mov	r0, r7
   1ceec:	movt	r1, #3
   1cef0:	bl	11a3c <strcmp@plt>
   1cef4:	cmp	r0, #0
   1cef8:	mov	r0, #1
   1cefc:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1cf00:	movw	r1, #31528	; 0x7b28
   1cf04:	mov	r0, r7
   1cf08:	movt	r1, #3
   1cf0c:	bl	11a3c <strcmp@plt>
   1cf10:	cmp	r0, #0
   1cf14:	mov	r0, #1
   1cf18:	beq	1ccf8 <__assert_fail@plt+0xae30>
   1cf1c:	movw	r1, #31535	; 0x7b2f
   1cf20:	mov	r0, r7
   1cf24:	movt	r1, #3
   1cf28:	bl	11a3c <strcmp@plt>
   1cf2c:	ldr	r1, [sp, #8]
   1cf30:	orr	r0, r1, r0
   1cf34:	clz	r0, r0
   1cf38:	lsr	r0, r0, #5
   1cf3c:	b	1ccf8 <__assert_fail@plt+0xae30>
   1cf40:	ldrb	r0, [r5]
   1cf44:	cmp	r0, #47	; 0x2f
   1cf48:	bne	1cfa0 <__assert_fail@plt+0xb0d8>
   1cf4c:	ldrb	r0, [r5, #1]
   1cf50:	cmp	r0, #47	; 0x2f
   1cf54:	bne	1cfa0 <__assert_fail@plt+0xb0d8>
   1cf58:	movw	r1, #31540	; 0x7b34
   1cf5c:	mov	r0, r7
   1cf60:	movt	r1, #3
   1cf64:	bl	11a3c <strcmp@plt>
   1cf68:	cmp	r0, #0
   1cf6c:	beq	1cd1c <__assert_fail@plt+0xae54>
   1cf70:	movw	r1, #31546	; 0x7b3a
   1cf74:	mov	r0, r7
   1cf78:	movt	r1, #3
   1cf7c:	bl	11a3c <strcmp@plt>
   1cf80:	cmp	r0, #0
   1cf84:	beq	1cd1c <__assert_fail@plt+0xae54>
   1cf88:	movw	r1, #31551	; 0x7b3f
   1cf8c:	mov	r0, r7
   1cf90:	movt	r1, #3
   1cf94:	bl	11a3c <strcmp@plt>
   1cf98:	cmp	r0, #0
   1cf9c:	beq	1cd1c <__assert_fail@plt+0xae54>
   1cfa0:	movw	r1, #31556	; 0x7b44
   1cfa4:	mov	r0, r7
   1cfa8:	movt	r1, #3
   1cfac:	bl	11a3c <strcmp@plt>
   1cfb0:	cmp	r0, #0
   1cfb4:	beq	1cd1c <__assert_fail@plt+0xae54>
   1cfb8:	movw	r1, #31561	; 0x7b49
   1cfbc:	mov	r0, r7
   1cfc0:	movt	r1, #3
   1cfc4:	bl	11a3c <strcmp@plt>
   1cfc8:	cmp	r0, #0
   1cfcc:	beq	1cd1c <__assert_fail@plt+0xae54>
   1cfd0:	movw	r1, #31565	; 0x7b4d
   1cfd4:	mov	r0, r7
   1cfd8:	movt	r1, #3
   1cfdc:	bl	11a3c <strcmp@plt>
   1cfe0:	cmp	r0, #0
   1cfe4:	beq	1cd1c <__assert_fail@plt+0xae54>
   1cfe8:	movw	r1, #31570	; 0x7b52
   1cfec:	mov	r0, r7
   1cff0:	movt	r1, #3
   1cff4:	bl	11a3c <strcmp@plt>
   1cff8:	cmp	r0, #0
   1cffc:	beq	1cd1c <__assert_fail@plt+0xae54>
   1d000:	movw	r1, #31581	; 0x7b5d
   1d004:	mov	r0, r7
   1d008:	movt	r1, #3
   1d00c:	bl	11a3c <strcmp@plt>
   1d010:	cmp	r0, #0
   1d014:	beq	1cd1c <__assert_fail@plt+0xae54>
   1d018:	movw	r1, #31587	; 0x7b63
   1d01c:	mov	r0, r7
   1d020:	movt	r1, #3
   1d024:	bl	11a3c <strcmp@plt>
   1d028:	cmp	r0, #0
   1d02c:	beq	1cd1c <__assert_fail@plt+0xae54>
   1d030:	movw	r1, #31592	; 0x7b68
   1d034:	mov	r0, r7
   1d038:	movt	r1, #3
   1d03c:	bl	11a3c <strcmp@plt>
   1d040:	cmp	r0, #0
   1d044:	beq	1cd1c <__assert_fail@plt+0xae54>
   1d048:	movw	r1, #31598	; 0x7b6e
   1d04c:	mov	r0, r7
   1d050:	movt	r1, #3
   1d054:	bl	11a3c <strcmp@plt>
   1d058:	cmp	r0, #0
   1d05c:	beq	1cd1c <__assert_fail@plt+0xae54>
   1d060:	movw	r1, #31604	; 0x7b74
   1d064:	mov	r0, r7
   1d068:	movt	r1, #3
   1d06c:	bl	11a3c <strcmp@plt>
   1d070:	cmp	r0, #0
   1d074:	beq	1cd1c <__assert_fail@plt+0xae54>
   1d078:	movw	r0, #31609	; 0x7b79
   1d07c:	mov	r1, r5
   1d080:	movt	r0, #3
   1d084:	bl	11a3c <strcmp@plt>
   1d088:	clz	r0, r0
   1d08c:	lsr	r6, r0, #5
   1d090:	b	1cd1c <__assert_fail@plt+0xae54>
   1d094:	add	r0, sp, #32
   1d098:	str	r0, [sp, #8]
   1d09c:	ldr	r0, [sp, #28]
   1d0a0:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d0a4:	ldrb	r1, [r9]
   1d0a8:	tst	r1, #32
   1d0ac:	bne	1d0c8 <__assert_fail@plt+0xb200>
   1d0b0:	mov	r0, r9
   1d0b4:	bl	15d38 <__assert_fail@plt+0x3e70>
   1d0b8:	ldr	sl, [sp, #8]
   1d0bc:	cmn	r0, #1
   1d0c0:	bne	1d104 <__assert_fail@plt+0xb23c>
   1d0c4:	b	1d114 <__assert_fail@plt+0xb24c>
   1d0c8:	bl	11cdc <__errno_location@plt>
   1d0cc:	ldr	r6, [r0]
   1d0d0:	mov	r5, r0
   1d0d4:	mov	r0, r9
   1d0d8:	bl	15d38 <__assert_fail@plt+0x3e70>
   1d0dc:	ldr	sl, [sp, #8]
   1d0e0:	str	r6, [r5]
   1d0e4:	b	1d114 <__assert_fail@plt+0xb24c>
   1d0e8:	mov	r4, #0
   1d0ec:	b	1d188 <__assert_fail@plt+0xb2c0>
   1d0f0:	add	sl, sp, #32
   1d0f4:	mov	r0, r8
   1d0f8:	bl	11d6c <endmntent@plt>
   1d0fc:	cmp	r0, #0
   1d100:	beq	1d114 <__assert_fail@plt+0xb24c>
   1d104:	mov	r0, #0
   1d108:	str	r0, [sl]
   1d10c:	ldr	r4, [sp, #32]
   1d110:	b	1d188 <__assert_fail@plt+0xb2c0>
   1d114:	bl	11cdc <__errno_location@plt>
   1d118:	mov	r4, #0
   1d11c:	ldr	r8, [r0]
   1d120:	mov	r5, r0
   1d124:	str	r4, [sl]
   1d128:	ldr	r6, [sp, #32]
   1d12c:	cmp	r6, #0
   1d130:	bne	1d150 <__assert_fail@plt+0xb288>
   1d134:	b	1d184 <__assert_fail@plt+0xb2bc>
   1d138:	mov	r0, r6
   1d13c:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d140:	cmp	r7, #0
   1d144:	mov	r6, r7
   1d148:	str	r7, [sp, #32]
   1d14c:	beq	1d184 <__assert_fail@plt+0xb2bc>
   1d150:	ldr	r0, [r6]
   1d154:	ldr	r7, [r6, #28]
   1d158:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d15c:	ldr	r0, [r6, #4]
   1d160:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d164:	ldr	r0, [r6, #8]
   1d168:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d16c:	ldrb	r0, [r6, #24]
   1d170:	tst	r0, #4
   1d174:	beq	1d138 <__assert_fail@plt+0xb270>
   1d178:	ldr	r0, [r6, #12]
   1d17c:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d180:	b	1d138 <__assert_fail@plt+0xb270>
   1d184:	str	r8, [r5]
   1d188:	mov	r0, r4
   1d18c:	sub	sp, fp, #28
   1d190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d194:	push	{r4, sl, fp, lr}
   1d198:	add	fp, sp, #8
   1d19c:	mov	r4, r0
   1d1a0:	ldr	r0, [r0]
   1d1a4:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d1a8:	ldr	r0, [r4, #4]
   1d1ac:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d1b0:	ldr	r0, [r4, #8]
   1d1b4:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d1b8:	ldrb	r0, [r4, #24]
   1d1bc:	tst	r0, #4
   1d1c0:	beq	1d1cc <__assert_fail@plt+0xb304>
   1d1c4:	ldr	r0, [r4, #12]
   1d1c8:	bl	176c0 <__assert_fail@plt+0x57f8>
   1d1cc:	mov	r0, r4
   1d1d0:	pop	{r4, sl, fp, lr}
   1d1d4:	b	176c0 <__assert_fail@plt+0x57f8>
   1d1d8:	sub	sp, sp, #4
   1d1dc:	push	{fp, lr}
   1d1e0:	mov	fp, sp
   1d1e4:	sub	sp, sp, #4
   1d1e8:	str	r3, [fp, #8]
   1d1ec:	tst	r2, #64	; 0x40
   1d1f0:	mov	r3, #0
   1d1f4:	ldrne	r3, [fp, #8]
   1d1f8:	bl	11cd0 <openat64@plt>
   1d1fc:	bl	31444 <__assert_fail@plt+0x1f57c>
   1d200:	mov	sp, fp
   1d204:	pop	{fp, lr}
   1d208:	add	sp, sp, #4
   1d20c:	bx	lr
   1d210:	push	{r4, r5, r6, sl, fp, lr}
   1d214:	add	fp, sp, #16
   1d218:	orr	r2, r2, #18688	; 0x4900
   1d21c:	mov	r4, r3
   1d220:	orr	r2, r2, #524288	; 0x80000
   1d224:	bl	1d1d8 <__assert_fail@plt+0xb310>
   1d228:	mov	r5, r0
   1d22c:	mov	r0, #0
   1d230:	cmp	r5, #0
   1d234:	bmi	1d26c <__assert_fail@plt+0xb3a4>
   1d238:	mov	r0, r5
   1d23c:	bl	11de4 <fdopendir@plt>
   1d240:	cmp	r0, #0
   1d244:	beq	1d250 <__assert_fail@plt+0xb388>
   1d248:	str	r5, [r4]
   1d24c:	pop	{r4, r5, r6, sl, fp, pc}
   1d250:	bl	11cdc <__errno_location@plt>
   1d254:	ldr	r6, [r0]
   1d258:	mov	r4, r0
   1d25c:	mov	r0, r5
   1d260:	bl	11ea4 <close@plt>
   1d264:	mov	r0, #0
   1d268:	str	r6, [r4]
   1d26c:	pop	{r4, r5, r6, sl, fp, pc}
   1d270:	push	{r4, r5, fp, lr}
   1d274:	add	fp, sp, #8
   1d278:	cmp	r0, #0
   1d27c:	beq	1d310 <__assert_fail@plt+0xb448>
   1d280:	mov	r1, #47	; 0x2f
   1d284:	mov	r4, r0
   1d288:	bl	11d9c <strrchr@plt>
   1d28c:	cmp	r0, #0
   1d290:	mov	r5, r4
   1d294:	addne	r5, r0, #1
   1d298:	sub	r0, r5, r4
   1d29c:	cmp	r0, #7
   1d2a0:	blt	1d2f4 <__assert_fail@plt+0xb42c>
   1d2a4:	movw	r1, #31687	; 0x7bc7
   1d2a8:	sub	r0, r5, #7
   1d2ac:	mov	r2, #7
   1d2b0:	movt	r1, #3
   1d2b4:	bl	11e80 <strncmp@plt>
   1d2b8:	cmp	r0, #0
   1d2bc:	bne	1d2f4 <__assert_fail@plt+0xb42c>
   1d2c0:	movw	r1, #31695	; 0x7bcf
   1d2c4:	mov	r0, r5
   1d2c8:	mov	r2, #3
   1d2cc:	movt	r1, #3
   1d2d0:	bl	11e80 <strncmp@plt>
   1d2d4:	cmp	r0, #0
   1d2d8:	beq	1d2e4 <__assert_fail@plt+0xb41c>
   1d2dc:	mov	r4, r5
   1d2e0:	b	1d2f4 <__assert_fail@plt+0xb42c>
   1d2e4:	movw	r0, #37400	; 0x9218
   1d2e8:	add	r4, r5, #3
   1d2ec:	movt	r0, #4
   1d2f0:	str	r4, [r0]
   1d2f4:	movw	r0, #37404	; 0x921c
   1d2f8:	movt	r0, #4
   1d2fc:	str	r4, [r0]
   1d300:	movw	r0, #37556	; 0x92b4
   1d304:	movt	r0, #4
   1d308:	str	r4, [r0]
   1d30c:	pop	{r4, r5, fp, pc}
   1d310:	movw	r0, #37416	; 0x9228
   1d314:	mov	r1, #55	; 0x37
   1d318:	mov	r2, #1
   1d31c:	movt	r0, #4
   1d320:	ldr	r3, [r0]
   1d324:	movw	r0, #31631	; 0x7b8f
   1d328:	movt	r0, #3
   1d32c:	bl	11b80 <fwrite@plt>
   1d330:	bl	11e8c <abort@plt>
   1d334:	push	{r4, r5, r6, sl, fp, lr}
   1d338:	add	fp, sp, #16
   1d33c:	mov	r4, r0
   1d340:	movw	r0, #37560	; 0x92b8
   1d344:	movt	r0, #4
   1d348:	cmp	r4, #0
   1d34c:	moveq	r4, r0
   1d350:	bl	11cdc <__errno_location@plt>
   1d354:	ldr	r6, [r0]
   1d358:	mov	r5, r0
   1d35c:	mov	r0, r4
   1d360:	mov	r1, #48	; 0x30
   1d364:	bl	31fa4 <__assert_fail@plt+0x200dc>
   1d368:	str	r6, [r5]
   1d36c:	pop	{r4, r5, r6, sl, fp, pc}
   1d370:	movw	r1, #37560	; 0x92b8
   1d374:	cmp	r0, #0
   1d378:	movt	r1, #4
   1d37c:	movne	r1, r0
   1d380:	ldr	r0, [r1]
   1d384:	bx	lr
   1d388:	movw	r2, #37560	; 0x92b8
   1d38c:	cmp	r0, #0
   1d390:	movt	r2, #4
   1d394:	movne	r2, r0
   1d398:	str	r1, [r2]
   1d39c:	bx	lr
   1d3a0:	movw	r3, #37560	; 0x92b8
   1d3a4:	cmp	r0, #0
   1d3a8:	and	r2, r2, #1
   1d3ac:	movt	r3, #4
   1d3b0:	movne	r3, r0
   1d3b4:	ubfx	r0, r1, #5, #3
   1d3b8:	and	r1, r1, #31
   1d3bc:	add	ip, r3, r0, lsl #2
   1d3c0:	mov	r0, #1
   1d3c4:	ldr	r3, [ip, #8]
   1d3c8:	and	r0, r0, r3, lsr r1
   1d3cc:	eor	r2, r0, r2
   1d3d0:	eor	r1, r3, r2, lsl r1
   1d3d4:	str	r1, [ip, #8]
   1d3d8:	bx	lr
   1d3dc:	movw	r2, #37560	; 0x92b8
   1d3e0:	cmp	r0, #0
   1d3e4:	movt	r2, #4
   1d3e8:	movne	r2, r0
   1d3ec:	ldr	r0, [r2, #4]
   1d3f0:	str	r1, [r2, #4]
   1d3f4:	bx	lr
   1d3f8:	push	{fp, lr}
   1d3fc:	mov	fp, sp
   1d400:	movw	r3, #37560	; 0x92b8
   1d404:	cmp	r0, #0
   1d408:	movt	r3, #4
   1d40c:	movne	r3, r0
   1d410:	cmp	r1, #0
   1d414:	mov	r0, #10
   1d418:	cmpne	r2, #0
   1d41c:	str	r0, [r3]
   1d420:	bne	1d428 <__assert_fail@plt+0xb560>
   1d424:	bl	11e8c <abort@plt>
   1d428:	str	r1, [r3, #40]	; 0x28
   1d42c:	str	r2, [r3, #44]	; 0x2c
   1d430:	pop	{fp, pc}
   1d434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d438:	add	fp, sp, #28
   1d43c:	sub	sp, sp, #20
   1d440:	mov	r7, r0
   1d444:	ldr	r0, [fp, #8]
   1d448:	movw	r5, #37560	; 0x92b8
   1d44c:	mov	r8, r3
   1d450:	mov	r9, r2
   1d454:	mov	sl, r1
   1d458:	movt	r5, #4
   1d45c:	cmp	r0, #0
   1d460:	movne	r5, r0
   1d464:	bl	11cdc <__errno_location@plt>
   1d468:	ldr	r2, [r5, #40]	; 0x28
   1d46c:	ldr	r3, [r5, #44]	; 0x2c
   1d470:	mov	r4, r0
   1d474:	ldm	r5, {r0, r1}
   1d478:	add	r5, r5, #8
   1d47c:	ldr	r6, [r4]
   1d480:	stm	sp, {r0, r1, r5}
   1d484:	mov	r0, r7
   1d488:	mov	r1, sl
   1d48c:	str	r2, [sp, #12]
   1d490:	str	r3, [sp, #16]
   1d494:	mov	r2, r9
   1d498:	mov	r3, r8
   1d49c:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1d4a0:	str	r6, [r4]
   1d4a4:	sub	sp, fp, #28
   1d4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4b0:	add	fp, sp, #28
   1d4b4:	sub	sp, sp, #156	; 0x9c
   1d4b8:	mov	r5, r0
   1d4bc:	add	r0, r2, #1
   1d4c0:	mov	r6, r1
   1d4c4:	mov	sl, r3
   1d4c8:	str	r2, [fp, #-80]	; 0xffffffb0
   1d4cc:	str	r0, [sp, #72]	; 0x48
   1d4d0:	ldr	r0, [fp, #12]
   1d4d4:	and	r1, r0, #1
   1d4d8:	str	r1, [sp, #36]	; 0x24
   1d4dc:	and	r1, r0, #4
   1d4e0:	str	r1, [sp, #32]
   1d4e4:	ubfx	r9, r0, #1, #1
   1d4e8:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1d4ec:	str	r0, [sp, #40]	; 0x28
   1d4f0:	ldr	r0, [fp, #24]
   1d4f4:	ldr	r7, [fp, #8]
   1d4f8:	mov	r1, #0
   1d4fc:	str	r5, [fp, #-84]	; 0xffffffac
   1d500:	str	r1, [fp, #-56]	; 0xffffffc8
   1d504:	mov	r1, #0
   1d508:	str	r1, [sp, #60]	; 0x3c
   1d50c:	mov	r1, #1
   1d510:	str	r1, [fp, #-48]	; 0xffffffd0
   1d514:	str	r0, [sp, #80]	; 0x50
   1d518:	ldr	r0, [fp, #20]
   1d51c:	str	r0, [sp, #76]	; 0x4c
   1d520:	mov	r0, #0
   1d524:	str	r0, [sp, #56]	; 0x38
   1d528:	mov	r0, #0
   1d52c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d530:	mov	r0, #0
   1d534:	str	r0, [fp, #-72]	; 0xffffffb8
   1d538:	mov	r0, #0
   1d53c:	cmp	r7, #10
   1d540:	bhi	1e4d4 <__assert_fail@plt+0xc60c>
   1d544:	add	r1, pc, #24
   1d548:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d54c:	mov	r4, r6
   1d550:	mov	r8, #0
   1d554:	mov	r2, #1
   1d558:	mov	r3, #0
   1d55c:	mov	lr, sl
   1d560:	ldr	pc, [r1, r7, lsl #2]
   1d564:	andeq	sp, r1, r8, lsr #12
   1d568:	andeq	sp, r1, ip, ror r6
   1d56c:	andeq	sp, r1, ip, lsr r6
   1d570:	andeq	sp, r1, r0, lsr #12
   1d574:	andeq	sp, r1, r0, ror r6
   1d578:	andeq	sp, r1, r4, lsr #13
   1d57c:	andeq	sp, r1, ip, asr #12
   1d580:	andeq	sp, r1, r8, lsr #14
   1d584:	muleq	r1, r0, r5
   1d588:	muleq	r1, r0, r5
   1d58c:			; <UNDEFINED> instruction: 0x0001d5b8
   1d590:	movw	r0, #31775	; 0x7c1f
   1d594:	mov	r1, r7
   1d598:	movt	r0, #3
   1d59c:	bl	1eedc <__assert_fail@plt+0xd014>
   1d5a0:	str	r0, [sp, #76]	; 0x4c
   1d5a4:	movw	r0, #28156	; 0x6dfc
   1d5a8:	mov	r1, r7
   1d5ac:	movt	r0, #3
   1d5b0:	bl	1eedc <__assert_fail@plt+0xd014>
   1d5b4:	str	r0, [sp, #80]	; 0x50
   1d5b8:	mov	r8, #0
   1d5bc:	tst	r9, #1
   1d5c0:	bne	1d5f8 <__assert_fail@plt+0xb730>
   1d5c4:	ldr	r0, [sp, #76]	; 0x4c
   1d5c8:	ldrb	r0, [r0]
   1d5cc:	cmp	r0, #0
   1d5d0:	beq	1d5f8 <__assert_fail@plt+0xb730>
   1d5d4:	ldr	r1, [sp, #76]	; 0x4c
   1d5d8:	mov	r8, #0
   1d5dc:	add	r1, r1, #1
   1d5e0:	cmp	r8, r4
   1d5e4:	strbcc	r0, [r5, r8]
   1d5e8:	ldrb	r0, [r1, r8]
   1d5ec:	add	r8, r8, #1
   1d5f0:	cmp	r0, #0
   1d5f4:	bne	1d5e0 <__assert_fail@plt+0xb718>
   1d5f8:	ldr	r6, [sp, #80]	; 0x50
   1d5fc:	mov	r0, r6
   1d600:	bl	11cac <strlen@plt>
   1d604:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d608:	str	r0, [fp, #-72]	; 0xffffffb8
   1d60c:	str	r6, [fp, #-88]	; 0xffffffa8
   1d610:	mov	r2, #1
   1d614:	mov	r3, r9
   1d618:	mov	lr, sl
   1d61c:	b	1d728 <__assert_fail@plt+0xb860>
   1d620:	mov	r0, #1
   1d624:	b	1d67c <__assert_fail@plt+0xb7b4>
   1d628:	mov	r7, #0
   1d62c:	mov	r8, #0
   1d630:	mov	r2, r0
   1d634:	mov	r3, #0
   1d638:	b	1d728 <__assert_fail@plt+0xb860>
   1d63c:	tst	r9, #1
   1d640:	bne	1d67c <__assert_fail@plt+0xb7b4>
   1d644:	mov	r2, r0
   1d648:	b	1d6d4 <__assert_fail@plt+0xb80c>
   1d64c:	mov	r0, #1
   1d650:	mov	r8, #0
   1d654:	mov	r7, #5
   1d658:	mov	r2, #1
   1d65c:	str	r0, [fp, #-72]	; 0xffffffb8
   1d660:	movw	r0, #28690	; 0x7012
   1d664:	movt	r0, #3
   1d668:	str	r0, [fp, #-88]	; 0xffffffa8
   1d66c:	b	1d69c <__assert_fail@plt+0xb7d4>
   1d670:	mov	r2, #1
   1d674:	tst	r9, #1
   1d678:	beq	1d6d4 <__assert_fail@plt+0xb80c>
   1d67c:	mov	r1, #1
   1d680:	mov	r8, #0
   1d684:	mov	r7, #2
   1d688:	mov	r2, r0
   1d68c:	str	r1, [fp, #-72]	; 0xffffffb8
   1d690:	movw	r1, #28156	; 0x6dfc
   1d694:	movt	r1, #3
   1d698:	str	r1, [fp, #-88]	; 0xffffffa8
   1d69c:	mov	r3, #1
   1d6a0:	b	1d728 <__assert_fail@plt+0xb860>
   1d6a4:	tst	r9, #1
   1d6a8:	beq	1d6f8 <__assert_fail@plt+0xb830>
   1d6ac:	mov	r0, #1
   1d6b0:	mov	r8, #0
   1d6b4:	mov	r2, #1
   1d6b8:	mov	r3, #1
   1d6bc:	mov	r7, #5
   1d6c0:	str	r0, [fp, #-72]	; 0xffffffb8
   1d6c4:	movw	r0, #28690	; 0x7012
   1d6c8:	movt	r0, #3
   1d6cc:	str	r0, [fp, #-88]	; 0xffffffa8
   1d6d0:	b	1d728 <__assert_fail@plt+0xb860>
   1d6d4:	cmp	r4, #0
   1d6d8:	mov	r8, #1
   1d6dc:	mov	r3, #0
   1d6e0:	mov	r7, #2
   1d6e4:	movne	r0, #39	; 0x27
   1d6e8:	strbne	r0, [r5]
   1d6ec:	movw	r0, #28156	; 0x6dfc
   1d6f0:	movt	r0, #3
   1d6f4:	b	1d71c <__assert_fail@plt+0xb854>
   1d6f8:	cmp	r4, #0
   1d6fc:	mov	r8, #1
   1d700:	mov	r2, #1
   1d704:	mov	r7, #5
   1d708:	mov	r3, #0
   1d70c:	movne	r0, #34	; 0x22
   1d710:	strbne	r0, [r5]
   1d714:	movw	r0, #28690	; 0x7012
   1d718:	movt	r0, #3
   1d71c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d720:	mov	r0, #1
   1d724:	str	r0, [fp, #-72]	; 0xffffffb8
   1d728:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d72c:	eor	r6, r3, #1
   1d730:	str	r7, [fp, #-68]	; 0xffffffbc
   1d734:	str	r3, [fp, #-76]	; 0xffffffb4
   1d738:	str	r2, [sp, #84]	; 0x54
   1d73c:	str	r6, [sp, #92]	; 0x5c
   1d740:	cmp	r0, #0
   1d744:	movwne	r0, #1
   1d748:	and	r1, r0, r3
   1d74c:	and	r1, r2, r1
   1d750:	str	r1, [sp, #48]	; 0x30
   1d754:	sub	r1, r7, #2
   1d758:	clz	r1, r1
   1d75c:	lsr	r1, r1, #5
   1d760:	and	r1, r1, r3
   1d764:	str	r1, [sp, #64]	; 0x40
   1d768:	subs	r1, r7, #2
   1d76c:	mov	r7, #0
   1d770:	movwne	r1, #1
   1d774:	orr	r6, r1, r6
   1d778:	and	r1, r1, r2
   1d77c:	and	r0, r0, r1
   1d780:	str	r6, [sp, #68]	; 0x44
   1d784:	str	r0, [fp, #-60]	; 0xffffffc4
   1d788:	orr	r0, r1, r3
   1d78c:	ldr	r1, [fp, #16]
   1d790:	eor	r0, r0, #1
   1d794:	clz	r1, r1
   1d798:	lsr	r1, r1, #5
   1d79c:	orr	r0, r1, r0
   1d7a0:	str	r0, [fp, #-64]	; 0xffffffc0
   1d7a4:	eor	r0, r2, #1
   1d7a8:	str	r0, [sp, #52]	; 0x34
   1d7ac:	cmn	lr, #1
   1d7b0:	beq	1d7c0 <__assert_fail@plt+0xb8f8>
   1d7b4:	cmp	r7, lr
   1d7b8:	bne	1d7cc <__assert_fail@plt+0xb904>
   1d7bc:	b	1e314 <__assert_fail@plt+0xc44c>
   1d7c0:	ldrb	r0, [ip, r7]
   1d7c4:	cmp	r0, #0
   1d7c8:	beq	1e31c <__assert_fail@plt+0xc454>
   1d7cc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d7d0:	mov	sl, #0
   1d7d4:	cmp	r0, #0
   1d7d8:	beq	1d810 <__assert_fail@plt+0xb948>
   1d7dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d7e0:	add	r5, r7, r0
   1d7e4:	cmp	r0, #2
   1d7e8:	bcc	1d804 <__assert_fail@plt+0xb93c>
   1d7ec:	cmn	lr, #1
   1d7f0:	bne	1d804 <__assert_fail@plt+0xb93c>
   1d7f4:	mov	r0, ip
   1d7f8:	bl	11cac <strlen@plt>
   1d7fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d800:	mov	lr, r0
   1d804:	cmp	r5, lr
   1d808:	bls	1d818 <__assert_fail@plt+0xb950>
   1d80c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1d810:	mov	r0, #0
   1d814:	b	1d864 <__assert_fail@plt+0xb99c>
   1d818:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1d81c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1d820:	add	r0, ip, r7
   1d824:	mov	r6, r4
   1d828:	mov	r4, lr
   1d82c:	bl	11ca0 <bcmp@plt>
   1d830:	ldr	r2, [sp, #92]	; 0x5c
   1d834:	cmp	r0, #0
   1d838:	ldr	r5, [fp, #-84]	; 0xffffffac
   1d83c:	mov	r1, r0
   1d840:	movwne	r1, #1
   1d844:	orr	r1, r1, r2
   1d848:	tst	r1, #1
   1d84c:	beq	1e3a4 <__assert_fail@plt+0xc4dc>
   1d850:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d854:	clz	r0, r0
   1d858:	mov	lr, r4
   1d85c:	mov	r4, r6
   1d860:	lsr	r0, r0, #5
   1d864:	str	r0, [fp, #-52]	; 0xffffffcc
   1d868:	ldrb	r6, [ip, r7]
   1d86c:	cmp	r6, #126	; 0x7e
   1d870:	bhi	1dda0 <__assert_fail@plt+0xbed8>
   1d874:	add	r3, pc, #16
   1d878:	mov	r9, #1
   1d87c:	mov	r2, #110	; 0x6e
   1d880:	mov	r0, #97	; 0x61
   1d884:	mov	r1, #0
   1d888:	ldr	pc, [r3, r6, lsl #2]
   1d88c:	andeq	sp, r1, r0, lsl #24
   1d890:	andeq	sp, r1, r0, lsr #27
   1d894:	andeq	sp, r1, r0, lsr #27
   1d898:	andeq	sp, r1, r0, lsr #27
   1d89c:	andeq	sp, r1, r0, lsr #27
   1d8a0:	andeq	sp, r1, r0, lsr #27
   1d8a4:	andeq	sp, r1, r0, lsr #27
   1d8a8:	andeq	sp, r1, ip, ror lr
   1d8ac:	andeq	sp, r1, r0, ror #23
   1d8b0:	ldrdeq	sp, [r1], -r8
   1d8b4:	andeq	sp, r1, ip, ror #23
   1d8b8:	andeq	sp, r1, r8, lsl #26
   1d8bc:	ldrdeq	sp, [r1], -r0
   1d8c0:	andeq	sp, r1, r8, ror #23
   1d8c4:	andeq	sp, r1, r0, lsr #27
   1d8c8:	andeq	sp, r1, r0, lsr #27
   1d8cc:	andeq	sp, r1, r0, lsr #27
   1d8d0:	andeq	sp, r1, r0, lsr #27
   1d8d4:	andeq	sp, r1, r0, lsr #27
   1d8d8:	andeq	sp, r1, r0, lsr #27
   1d8dc:	andeq	sp, r1, r0, lsr #27
   1d8e0:	andeq	sp, r1, r0, lsr #27
   1d8e4:	andeq	sp, r1, r0, lsr #27
   1d8e8:	andeq	sp, r1, r0, lsr #27
   1d8ec:	andeq	sp, r1, r0, lsr #27
   1d8f0:	andeq	sp, r1, r0, lsr #27
   1d8f4:	andeq	sp, r1, r0, lsr #27
   1d8f8:	andeq	sp, r1, r0, lsr #27
   1d8fc:	andeq	sp, r1, r0, lsr #27
   1d900:	andeq	sp, r1, r0, lsr #27
   1d904:	andeq	sp, r1, r0, lsr #27
   1d908:	andeq	sp, r1, r0, lsr #27
   1d90c:	andeq	sp, r1, r4, lsl #23
   1d910:	andeq	sp, r1, r8, lsl #23
   1d914:	andeq	sp, r1, r8, lsl #23
   1d918:	andeq	sp, r1, r0, ror fp
   1d91c:	andeq	sp, r1, r8, lsl #23
   1d920:	andeq	sp, r1, r8, lsl #21
   1d924:	andeq	sp, r1, r8, lsl #23
   1d928:	andeq	sp, r1, r0, lsl sp
   1d92c:	andeq	sp, r1, r8, lsl #23
   1d930:	andeq	sp, r1, r8, lsl #23
   1d934:	andeq	sp, r1, r8, lsl #23
   1d938:	andeq	sp, r1, r8, lsl #21
   1d93c:	andeq	sp, r1, r8, lsl #21
   1d940:	andeq	sp, r1, r8, lsl #21
   1d944:	andeq	sp, r1, r8, lsl #21
   1d948:	andeq	sp, r1, r8, lsl #21
   1d94c:	andeq	sp, r1, r8, lsl #21
   1d950:	andeq	sp, r1, r8, lsl #21
   1d954:	andeq	sp, r1, r8, lsl #21
   1d958:	andeq	sp, r1, r8, lsl #21
   1d95c:	andeq	sp, r1, r8, lsl #21
   1d960:	andeq	sp, r1, r8, lsl #21
   1d964:	andeq	sp, r1, r8, lsl #21
   1d968:	andeq	sp, r1, r8, lsl #21
   1d96c:	andeq	sp, r1, r8, lsl #21
   1d970:	andeq	sp, r1, r8, lsl #21
   1d974:	andeq	sp, r1, r8, lsl #21
   1d978:	andeq	sp, r1, r8, lsl #23
   1d97c:	andeq	sp, r1, r8, lsl #23
   1d980:	andeq	sp, r1, r8, lsl #23
   1d984:	andeq	sp, r1, r8, lsl #23
   1d988:	ldrdeq	sp, [r1], -r8
   1d98c:	andeq	sp, r1, r0, lsr #27
   1d990:	andeq	sp, r1, r8, lsl #21
   1d994:	andeq	sp, r1, r8, lsl #21
   1d998:	andeq	sp, r1, r8, lsl #21
   1d99c:	andeq	sp, r1, r8, lsl #21
   1d9a0:	andeq	sp, r1, r8, lsl #21
   1d9a4:	andeq	sp, r1, r8, lsl #21
   1d9a8:	andeq	sp, r1, r8, lsl #21
   1d9ac:	andeq	sp, r1, r8, lsl #21
   1d9b0:	andeq	sp, r1, r8, lsl #21
   1d9b4:	andeq	sp, r1, r8, lsl #21
   1d9b8:	andeq	sp, r1, r8, lsl #21
   1d9bc:	andeq	sp, r1, r8, lsl #21
   1d9c0:	andeq	sp, r1, r8, lsl #21
   1d9c4:	andeq	sp, r1, r8, lsl #21
   1d9c8:	andeq	sp, r1, r8, lsl #21
   1d9cc:	andeq	sp, r1, r8, lsl #21
   1d9d0:	andeq	sp, r1, r8, lsl #21
   1d9d4:	andeq	sp, r1, r8, lsl #21
   1d9d8:	andeq	sp, r1, r8, lsl #21
   1d9dc:	andeq	sp, r1, r8, lsl #21
   1d9e0:	andeq	sp, r1, r8, lsl #21
   1d9e4:	andeq	sp, r1, r8, lsl #21
   1d9e8:	andeq	sp, r1, r8, lsl #21
   1d9ec:	andeq	sp, r1, r8, lsl #21
   1d9f0:	andeq	sp, r1, r8, lsl #21
   1d9f4:	andeq	sp, r1, r8, lsl #21
   1d9f8:	andeq	sp, r1, r8, lsl #23
   1d9fc:			; <UNDEFINED> instruction: 0x0001dbb0
   1da00:	andeq	sp, r1, r8, lsl #21
   1da04:	andeq	sp, r1, r8, lsl #23
   1da08:	andeq	sp, r1, r8, lsl #21
   1da0c:	andeq	sp, r1, r8, lsl #23
   1da10:	andeq	sp, r1, r8, lsl #21
   1da14:	andeq	sp, r1, r8, lsl #21
   1da18:	andeq	sp, r1, r8, lsl #21
   1da1c:	andeq	sp, r1, r8, lsl #21
   1da20:	andeq	sp, r1, r8, lsl #21
   1da24:	andeq	sp, r1, r8, lsl #21
   1da28:	andeq	sp, r1, r8, lsl #21
   1da2c:	andeq	sp, r1, r8, lsl #21
   1da30:	andeq	sp, r1, r8, lsl #21
   1da34:	andeq	sp, r1, r8, lsl #21
   1da38:	andeq	sp, r1, r8, lsl #21
   1da3c:	andeq	sp, r1, r8, lsl #21
   1da40:	andeq	sp, r1, r8, lsl #21
   1da44:	andeq	sp, r1, r8, lsl #21
   1da48:	andeq	sp, r1, r8, lsl #21
   1da4c:	andeq	sp, r1, r8, lsl #21
   1da50:	andeq	sp, r1, r8, lsl #21
   1da54:	andeq	sp, r1, r8, lsl #21
   1da58:	andeq	sp, r1, r8, lsl #21
   1da5c:	andeq	sp, r1, r8, lsl #21
   1da60:	andeq	sp, r1, r8, lsl #21
   1da64:	andeq	sp, r1, r8, lsl #21
   1da68:	andeq	sp, r1, r8, lsl #21
   1da6c:	andeq	sp, r1, r8, lsl #21
   1da70:	andeq	sp, r1, r8, lsl #21
   1da74:	andeq	sp, r1, r8, lsl #21
   1da78:	andeq	sp, r1, r4, asr #22
   1da7c:	andeq	sp, r1, r8, lsl #23
   1da80:	andeq	sp, r1, r4, asr #22
   1da84:	andeq	sp, r1, r0, ror fp
   1da88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1da8c:	tst	r0, #1
   1da90:	bne	1dabc <__assert_fail@plt+0xbbf4>
   1da94:	ldr	r1, [fp, #16]
   1da98:	ubfx	r0, r6, #5, #3
   1da9c:	mov	r2, #1
   1daa0:	ldr	r0, [r1, r0, lsl #2]
   1daa4:	and	r1, r6, #31
   1daa8:	tst	r0, r2, lsl r1
   1daac:	beq	1dabc <__assert_fail@plt+0xbbf4>
   1dab0:	mov	r0, r6
   1dab4:	mov	r1, r9
   1dab8:	b	1dad0 <__assert_fail@plt+0xbc08>
   1dabc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1dac0:	mov	r1, r9
   1dac4:	cmp	r0, #0
   1dac8:	mov	r0, r6
   1dacc:	beq	1de10 <__assert_fail@plt+0xbf48>
   1dad0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1dad4:	tst	r2, #1
   1dad8:	bne	1e3e0 <__assert_fail@plt+0xc518>
   1dadc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1dae0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1dae4:	subs	r2, r2, #2
   1dae8:	movwne	r2, #1
   1daec:	orr	r2, r2, r3
   1daf0:	tst	r2, #1
   1daf4:	bne	1db30 <__assert_fail@plt+0xbc68>
   1daf8:	cmp	r8, r4
   1dafc:	movcc	r2, #39	; 0x27
   1db00:	strbcc	r2, [r5, r8]
   1db04:	add	r2, r8, #1
   1db08:	cmp	r2, r4
   1db0c:	movcc	r3, #36	; 0x24
   1db10:	strbcc	r3, [r5, r2]
   1db14:	add	r2, r8, #2
   1db18:	add	r8, r8, #3
   1db1c:	cmp	r2, r4
   1db20:	movcc	r3, #39	; 0x27
   1db24:	strbcc	r3, [r5, r2]
   1db28:	mov	r2, #1
   1db2c:	str	r2, [fp, #-56]	; 0xffffffc8
   1db30:	cmp	r8, r4
   1db34:	movcc	r2, #92	; 0x5c
   1db38:	strbcc	r2, [r5, r8]
   1db3c:	add	r8, r8, #1
   1db40:	b	1de54 <__assert_fail@plt+0xbf8c>
   1db44:	cmp	lr, #1
   1db48:	beq	1db70 <__assert_fail@plt+0xbca8>
   1db4c:	mov	r9, #0
   1db50:	cmn	lr, #1
   1db54:	bne	1db7c <__assert_fail@plt+0xbcb4>
   1db58:	ldrb	r0, [ip, #1]
   1db5c:	cmp	r0, #0
   1db60:	beq	1db70 <__assert_fail@plt+0xbca8>
   1db64:	mvn	lr, #0
   1db68:	mov	sl, #0
   1db6c:	b	1da88 <__assert_fail@plt+0xbbc0>
   1db70:	mov	r9, #0
   1db74:	cmp	r7, #0
   1db78:	beq	1db84 <__assert_fail@plt+0xbcbc>
   1db7c:	mov	sl, #0
   1db80:	b	1da88 <__assert_fail@plt+0xbbc0>
   1db84:	mov	r1, #1
   1db88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1db8c:	cmp	r0, #2
   1db90:	bne	1dba8 <__assert_fail@plt+0xbce0>
   1db94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1db98:	mov	r9, r1
   1db9c:	tst	r0, #1
   1dba0:	beq	1da88 <__assert_fail@plt+0xbbc0>
   1dba4:	b	1e3e0 <__assert_fail@plt+0xc518>
   1dba8:	mov	r9, r1
   1dbac:	b	1da88 <__assert_fail@plt+0xbbc0>
   1dbb0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dbb4:	cmp	r0, #2
   1dbb8:	bne	1ddf4 <__assert_fail@plt+0xbf2c>
   1dbbc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dbc0:	tst	r0, #1
   1dbc4:	bne	1e3e0 <__assert_fail@plt+0xc518>
   1dbc8:	mov	sl, #0
   1dbcc:	b	1de08 <__assert_fail@plt+0xbf40>
   1dbd0:	mov	r0, #102	; 0x66
   1dbd4:	b	1de7c <__assert_fail@plt+0xbfb4>
   1dbd8:	mov	r2, #116	; 0x74
   1dbdc:	b	1dbec <__assert_fail@plt+0xbd24>
   1dbe0:	mov	r0, #98	; 0x62
   1dbe4:	b	1de7c <__assert_fail@plt+0xbfb4>
   1dbe8:	mov	r2, #114	; 0x72
   1dbec:	ldr	r0, [sp, #68]	; 0x44
   1dbf0:	tst	r0, #1
   1dbf4:	mov	r0, r2
   1dbf8:	bne	1de7c <__assert_fail@plt+0xbfb4>
   1dbfc:	b	1e3e0 <__assert_fail@plt+0xc518>
   1dc00:	ldr	r0, [sp, #84]	; 0x54
   1dc04:	tst	r0, #1
   1dc08:	beq	1de98 <__assert_fail@plt+0xbfd0>
   1dc0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dc10:	tst	r0, #1
   1dc14:	bne	1e4cc <__assert_fail@plt+0xc604>
   1dc18:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dc1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1dc20:	subs	r0, r0, #2
   1dc24:	movwne	r0, #1
   1dc28:	orr	r0, r0, r1
   1dc2c:	tst	r0, #1
   1dc30:	bne	1dc6c <__assert_fail@plt+0xbda4>
   1dc34:	cmp	r8, r4
   1dc38:	movcc	r0, #39	; 0x27
   1dc3c:	strbcc	r0, [r5, r8]
   1dc40:	add	r0, r8, #1
   1dc44:	cmp	r0, r4
   1dc48:	movcc	r1, #36	; 0x24
   1dc4c:	strbcc	r1, [r5, r0]
   1dc50:	add	r0, r8, #2
   1dc54:	add	r8, r8, #3
   1dc58:	cmp	r0, r4
   1dc5c:	movcc	r1, #39	; 0x27
   1dc60:	strbcc	r1, [r5, r0]
   1dc64:	mov	r0, #1
   1dc68:	str	r0, [fp, #-56]	; 0xffffffc8
   1dc6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1dc70:	cmp	r8, r4
   1dc74:	mov	r9, #0
   1dc78:	mov	sl, #1
   1dc7c:	mov	r6, #48	; 0x30
   1dc80:	movcc	r0, #92	; 0x5c
   1dc84:	strbcc	r0, [r5, r8]
   1dc88:	add	r0, r8, #1
   1dc8c:	cmp	r1, #2
   1dc90:	beq	1e060 <__assert_fail@plt+0xc198>
   1dc94:	add	r1, r7, #1
   1dc98:	cmp	r1, lr
   1dc9c:	bcs	1e060 <__assert_fail@plt+0xc198>
   1dca0:	ldrb	r1, [ip, r1]
   1dca4:	sub	r1, r1, #48	; 0x30
   1dca8:	uxtb	r1, r1
   1dcac:	cmp	r1, #9
   1dcb0:	bhi	1e060 <__assert_fail@plt+0xc198>
   1dcb4:	cmp	r0, r4
   1dcb8:	movcc	r1, #48	; 0x30
   1dcbc:	strbcc	r1, [r5, r0]
   1dcc0:	add	r0, r8, #2
   1dcc4:	add	r8, r8, #3
   1dcc8:	cmp	r0, r4
   1dccc:	movcc	r1, #48	; 0x30
   1dcd0:	strbcc	r1, [r5, r0]
   1dcd4:	b	1da88 <__assert_fail@plt+0xbbc0>
   1dcd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dcdc:	mov	sl, #0
   1dce0:	mov	r6, #63	; 0x3f
   1dce4:	cmp	r0, #5
   1dce8:	beq	1e068 <__assert_fail@plt+0xc1a0>
   1dcec:	cmp	r0, #2
   1dcf0:	bne	1e110 <__assert_fail@plt+0xc248>
   1dcf4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dcf8:	mov	r9, #0
   1dcfc:	tst	r0, #1
   1dd00:	beq	1da88 <__assert_fail@plt+0xbbc0>
   1dd04:	b	1e3e0 <__assert_fail@plt+0xc518>
   1dd08:	mov	r0, #118	; 0x76
   1dd0c:	b	1de7c <__assert_fail@plt+0xbfb4>
   1dd10:	mov	r0, #1
   1dd14:	mov	r6, #39	; 0x27
   1dd18:	str	r0, [sp, #60]	; 0x3c
   1dd1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dd20:	cmp	r0, #2
   1dd24:	bne	1deb4 <__assert_fail@plt+0xbfec>
   1dd28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dd2c:	tst	r0, #1
   1dd30:	bne	1e3e0 <__assert_fail@plt+0xc518>
   1dd34:	ldr	r2, [sp, #56]	; 0x38
   1dd38:	clz	r1, r4
   1dd3c:	mov	sl, #0
   1dd40:	mov	r9, #1
   1dd44:	lsr	r1, r1, #5
   1dd48:	cmp	r2, #0
   1dd4c:	mov	r0, r2
   1dd50:	movwne	r0, #1
   1dd54:	orrs	r0, r0, r1
   1dd58:	moveq	r2, r4
   1dd5c:	moveq	r4, r0
   1dd60:	cmp	r8, r4
   1dd64:	str	r2, [sp, #56]	; 0x38
   1dd68:	movcc	r0, #39	; 0x27
   1dd6c:	strbcc	r0, [r5, r8]
   1dd70:	add	r0, r8, #1
   1dd74:	cmp	r0, r4
   1dd78:	movcc	r1, #92	; 0x5c
   1dd7c:	strbcc	r1, [r5, r0]
   1dd80:	add	r0, r8, #2
   1dd84:	add	r8, r8, #3
   1dd88:	cmp	r0, r4
   1dd8c:	movcc	r1, #39	; 0x27
   1dd90:	strbcc	r1, [r5, r0]
   1dd94:	mov	r0, #0
   1dd98:	str	r0, [fp, #-56]	; 0xffffffc8
   1dd9c:	b	1da88 <__assert_fail@plt+0xbbc0>
   1dda0:	ldr	r0, [sp, #40]	; 0x28
   1dda4:	str	r4, [sp, #88]	; 0x58
   1dda8:	cmp	r0, #1
   1ddac:	bne	1debc <__assert_fail@plt+0xbff4>
   1ddb0:	str	lr, [sp, #28]
   1ddb4:	bl	11c7c <__ctype_b_loc@plt>
   1ddb8:	ldr	r0, [r0]
   1ddbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1ddc0:	mov	r2, #1
   1ddc4:	add	r0, r0, r6, lsl #1
   1ddc8:	ldrb	r0, [r0, #1]
   1ddcc:	ubfx	r9, r0, #6, #1
   1ddd0:	ldr	r0, [sp, #52]	; 0x34
   1ddd4:	cmp	r2, #1
   1ddd8:	orr	r0, r9, r0
   1dddc:	bhi	1e118 <__assert_fail@plt+0xc250>
   1dde0:	tst	r0, #1
   1dde4:	beq	1e118 <__assert_fail@plt+0xc250>
   1dde8:	ldr	lr, [sp, #28]
   1ddec:	ldr	r4, [sp, #88]	; 0x58
   1ddf0:	b	1da88 <__assert_fail@plt+0xbbc0>
   1ddf4:	ldr	r1, [sp, #48]	; 0x30
   1ddf8:	mov	sl, #0
   1ddfc:	mov	r0, #92	; 0x5c
   1de00:	cmp	r1, #0
   1de04:	beq	1de7c <__assert_fail@plt+0xbfb4>
   1de08:	mov	r6, #92	; 0x5c
   1de0c:	mov	r9, #0
   1de10:	cmp	sl, #0
   1de14:	bne	1de4c <__assert_fail@plt+0xbf84>
   1de18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1de1c:	tst	r0, #1
   1de20:	beq	1de4c <__assert_fail@plt+0xbf84>
   1de24:	cmp	r8, r4
   1de28:	movcc	r0, #39	; 0x27
   1de2c:	strbcc	r0, [r5, r8]
   1de30:	add	r0, r8, #1
   1de34:	add	r8, r8, #2
   1de38:	cmp	r0, r4
   1de3c:	movcc	r1, #39	; 0x27
   1de40:	strbcc	r1, [r5, r0]
   1de44:	mov	r0, #0
   1de48:	str	r0, [fp, #-56]	; 0xffffffc8
   1de4c:	mov	r1, r9
   1de50:	mov	r0, r6
   1de54:	cmp	r8, r4
   1de58:	strbcc	r0, [r5, r8]
   1de5c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1de60:	add	r8, r8, #1
   1de64:	and	r0, r0, r1
   1de68:	str	r0, [fp, #-48]	; 0xffffffd0
   1de6c:	add	r7, r7, #1
   1de70:	cmn	lr, #1
   1de74:	bne	1d7b4 <__assert_fail@plt+0xb8ec>
   1de78:	b	1d7c0 <__assert_fail@plt+0xb8f8>
   1de7c:	ldr	r1, [sp, #84]	; 0x54
   1de80:	mov	sl, #0
   1de84:	mov	r9, #0
   1de88:	tst	r1, #1
   1de8c:	mov	r1, #0
   1de90:	beq	1da88 <__assert_fail@plt+0xbbc0>
   1de94:	b	1dad0 <__assert_fail@plt+0xbc08>
   1de98:	ldr	r0, [sp, #36]	; 0x24
   1de9c:	mov	r6, #0
   1dea0:	mov	sl, #0
   1dea4:	mov	r9, #0
   1dea8:	cmp	r0, #0
   1deac:	beq	1da88 <__assert_fail@plt+0xbbc0>
   1deb0:	b	1de6c <__assert_fail@plt+0xbfa4>
   1deb4:	mov	r9, #1
   1deb8:	b	1da88 <__assert_fail@plt+0xbbc0>
   1debc:	mov	r0, #0
   1dec0:	cmn	lr, #1
   1dec4:	sub	r4, fp, #40	; 0x28
   1dec8:	str	r0, [fp, #-36]	; 0xffffffdc
   1decc:	str	r0, [fp, #-40]	; 0xffffffd8
   1ded0:	bne	1dee4 <__assert_fail@plt+0xc01c>
   1ded4:	mov	r0, ip
   1ded8:	bl	11cac <strlen@plt>
   1dedc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1dee0:	mov	lr, r0
   1dee4:	ldr	r0, [sp, #72]	; 0x48
   1dee8:	mov	r9, #1
   1deec:	mov	r2, #0
   1def0:	str	lr, [sp, #28]
   1def4:	add	r0, r0, r7
   1def8:	str	r0, [sp, #20]
   1defc:	b	1df40 <__assert_fail@plt+0xc078>
   1df00:	ldr	r5, [sp, #44]	; 0x2c
   1df04:	add	r5, r0, r5
   1df08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1df0c:	bl	11b5c <iswprint@plt>
   1df10:	cmp	r0, #0
   1df14:	sub	r4, fp, #40	; 0x28
   1df18:	movwne	r0, #1
   1df1c:	and	r9, r9, r0
   1df20:	mov	r0, r4
   1df24:	bl	11ae4 <mbsinit@plt>
   1df28:	mov	r2, r5
   1df2c:	ldr	lr, [sp, #28]
   1df30:	ldr	r5, [fp, #-84]	; 0xffffffac
   1df34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1df38:	cmp	r0, #0
   1df3c:	bne	1ddd0 <__assert_fail@plt+0xbf08>
   1df40:	add	r0, r2, r7
   1df44:	str	r2, [sp, #44]	; 0x2c
   1df48:	mov	r3, r4
   1df4c:	add	r1, ip, r0
   1df50:	str	r0, [sp, #24]
   1df54:	sub	r2, lr, r0
   1df58:	sub	r0, fp, #44	; 0x2c
   1df5c:	bl	358a0 <__assert_fail@plt+0x239d8>
   1df60:	cmp	r0, #0
   1df64:	beq	1e308 <__assert_fail@plt+0xc440>
   1df68:	cmn	r0, #1
   1df6c:	beq	1e2c4 <__assert_fail@plt+0xc3fc>
   1df70:	ldr	lr, [sp, #28]
   1df74:	cmn	r0, #2
   1df78:	beq	1e2cc <__assert_fail@plt+0xc404>
   1df7c:	ldr	r2, [sp, #64]	; 0x40
   1df80:	ldr	r4, [sp, #88]	; 0x58
   1df84:	ldr	ip, [sp, #84]	; 0x54
   1df88:	cmp	r0, #2
   1df8c:	mov	r1, #0
   1df90:	movwcc	r1, #1
   1df94:	eor	r2, r2, #1
   1df98:	orrs	r1, r2, r1
   1df9c:	bne	1df00 <__assert_fail@plt+0xc038>
   1dfa0:	ldr	r1, [sp, #44]	; 0x2c
   1dfa4:	ldr	r2, [sp, #20]
   1dfa8:	add	r1, r2, r1
   1dfac:	sub	r2, r0, #1
   1dfb0:	b	1dfc0 <__assert_fail@plt+0xc0f8>
   1dfb4:	add	r1, r1, #1
   1dfb8:	subs	r2, r2, #1
   1dfbc:	beq	1df00 <__assert_fail@plt+0xc038>
   1dfc0:	ldrb	r3, [r1]
   1dfc4:	sub	r3, r3, #91	; 0x5b
   1dfc8:	cmp	r3, #33	; 0x21
   1dfcc:	bhi	1dfb4 <__assert_fail@plt+0xc0ec>
   1dfd0:	add	r5, pc, #0
   1dfd4:	ldr	pc, [r5, r3, lsl #2]
   1dfd8:			; <UNDEFINED> instruction: 0x0001e3bc
   1dfdc:			; <UNDEFINED> instruction: 0x0001e3bc
   1dfe0:			; <UNDEFINED> instruction: 0x0001dfb4
   1dfe4:			; <UNDEFINED> instruction: 0x0001e3bc
   1dfe8:			; <UNDEFINED> instruction: 0x0001dfb4
   1dfec:			; <UNDEFINED> instruction: 0x0001e3bc
   1dff0:			; <UNDEFINED> instruction: 0x0001dfb4
   1dff4:			; <UNDEFINED> instruction: 0x0001dfb4
   1dff8:			; <UNDEFINED> instruction: 0x0001dfb4
   1dffc:			; <UNDEFINED> instruction: 0x0001dfb4
   1e000:			; <UNDEFINED> instruction: 0x0001dfb4
   1e004:			; <UNDEFINED> instruction: 0x0001dfb4
   1e008:			; <UNDEFINED> instruction: 0x0001dfb4
   1e00c:			; <UNDEFINED> instruction: 0x0001dfb4
   1e010:			; <UNDEFINED> instruction: 0x0001dfb4
   1e014:			; <UNDEFINED> instruction: 0x0001dfb4
   1e018:			; <UNDEFINED> instruction: 0x0001dfb4
   1e01c:			; <UNDEFINED> instruction: 0x0001dfb4
   1e020:			; <UNDEFINED> instruction: 0x0001dfb4
   1e024:			; <UNDEFINED> instruction: 0x0001dfb4
   1e028:			; <UNDEFINED> instruction: 0x0001dfb4
   1e02c:			; <UNDEFINED> instruction: 0x0001dfb4
   1e030:			; <UNDEFINED> instruction: 0x0001dfb4
   1e034:			; <UNDEFINED> instruction: 0x0001dfb4
   1e038:			; <UNDEFINED> instruction: 0x0001dfb4
   1e03c:			; <UNDEFINED> instruction: 0x0001dfb4
   1e040:			; <UNDEFINED> instruction: 0x0001dfb4
   1e044:			; <UNDEFINED> instruction: 0x0001dfb4
   1e048:			; <UNDEFINED> instruction: 0x0001dfb4
   1e04c:			; <UNDEFINED> instruction: 0x0001dfb4
   1e050:			; <UNDEFINED> instruction: 0x0001dfb4
   1e054:			; <UNDEFINED> instruction: 0x0001dfb4
   1e058:			; <UNDEFINED> instruction: 0x0001dfb4
   1e05c:			; <UNDEFINED> instruction: 0x0001e3bc
   1e060:	mov	r8, r0
   1e064:	b	1da88 <__assert_fail@plt+0xbbc0>
   1e068:	ldr	r0, [sp, #32]
   1e06c:	cmp	r0, #0
   1e070:	beq	1e110 <__assert_fail@plt+0xc248>
   1e074:	add	r0, r7, #2
   1e078:	cmp	r0, lr
   1e07c:	bcs	1e110 <__assert_fail@plt+0xc248>
   1e080:	add	r1, r7, ip
   1e084:	ldrb	r1, [r1, #1]
   1e088:	cmp	r1, #63	; 0x3f
   1e08c:	bne	1e110 <__assert_fail@plt+0xc248>
   1e090:	ldrb	r9, [ip, r0]
   1e094:	sub	r2, r9, #33	; 0x21
   1e098:	cmp	r2, #29
   1e09c:	bhi	1e110 <__assert_fail@plt+0xc248>
   1e0a0:	movw	r1, #20929	; 0x51c1
   1e0a4:	mov	r3, #1
   1e0a8:	movt	r1, #14336	; 0x3800
   1e0ac:	tst	r1, r3, lsl r2
   1e0b0:	beq	1e110 <__assert_fail@plt+0xc248>
   1e0b4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1e0b8:	tst	r1, #1
   1e0bc:	bne	1e3e0 <__assert_fail@plt+0xc518>
   1e0c0:	cmp	r8, r4
   1e0c4:	add	r2, r8, #1
   1e0c8:	mov	r6, r9
   1e0cc:	mov	r7, r0
   1e0d0:	mov	r9, #0
   1e0d4:	movcc	r1, #63	; 0x3f
   1e0d8:	strbcc	r1, [r5, r8]
   1e0dc:	cmp	r2, r4
   1e0e0:	movcc	r1, #34	; 0x22
   1e0e4:	strbcc	r1, [r5, r2]
   1e0e8:	add	r2, r8, #2
   1e0ec:	cmp	r2, r4
   1e0f0:	movcc	r1, #34	; 0x22
   1e0f4:	strbcc	r1, [r5, r2]
   1e0f8:	add	r2, r8, #3
   1e0fc:	add	r8, r8, #4
   1e100:	cmp	r2, r4
   1e104:	movcc	r1, #63	; 0x3f
   1e108:	strbcc	r1, [r5, r2]
   1e10c:	b	1da88 <__assert_fail@plt+0xbbc0>
   1e110:	mov	r9, #0
   1e114:	b	1da88 <__assert_fail@plt+0xbbc0>
   1e118:	ldr	lr, [sp, #28]
   1e11c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1e120:	add	r1, r2, r7
   1e124:	mov	r2, #0
   1e128:	str	r1, [sp, #44]	; 0x2c
   1e12c:	tst	r0, #1
   1e130:	bne	1e24c <__assert_fail@plt+0xc384>
   1e134:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1e138:	tst	r1, #1
   1e13c:	bne	1e3dc <__assert_fail@plt+0xc514>
   1e140:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1e144:	subs	r2, r1, #2
   1e148:	movwne	r2, #1
   1e14c:	orr	r2, r2, r4
   1e150:	tst	r2, #1
   1e154:	bne	1e198 <__assert_fail@plt+0xc2d0>
   1e158:	ldr	r1, [sp, #88]	; 0x58
   1e15c:	add	r2, r8, #1
   1e160:	mov	r4, #1
   1e164:	cmp	r8, r1
   1e168:	movcc	r1, #39	; 0x27
   1e16c:	strbcc	r1, [r5, r8]
   1e170:	ldr	r1, [sp, #88]	; 0x58
   1e174:	cmp	r2, r1
   1e178:	movcc	r1, #36	; 0x24
   1e17c:	strbcc	r1, [r5, r2]
   1e180:	ldr	r1, [sp, #88]	; 0x58
   1e184:	add	r2, r8, #2
   1e188:	add	r8, r8, #3
   1e18c:	cmp	r2, r1
   1e190:	movcc	r1, #39	; 0x27
   1e194:	strbcc	r1, [r5, r2]
   1e198:	ldr	r1, [sp, #88]	; 0x58
   1e19c:	add	r2, r8, #1
   1e1a0:	cmp	r8, r1
   1e1a4:	movcc	r1, #92	; 0x5c
   1e1a8:	strbcc	r1, [r5, r8]
   1e1ac:	ldr	r1, [sp, #88]	; 0x58
   1e1b0:	cmp	r2, r1
   1e1b4:	bcs	1e1c8 <__assert_fail@plt+0xc300>
   1e1b8:	uxtb	r3, r6
   1e1bc:	mov	r1, #48	; 0x30
   1e1c0:	orr	r3, r1, r3, lsr #6
   1e1c4:	strb	r3, [r5, r2]
   1e1c8:	ldr	r1, [sp, #88]	; 0x58
   1e1cc:	add	r2, r8, #2
   1e1d0:	add	r8, r8, #3
   1e1d4:	cmp	r2, r1
   1e1d8:	lsrcc	r3, r6, #3
   1e1dc:	movcc	r1, #6
   1e1e0:	bficc	r3, r1, #3, #29
   1e1e4:	mov	r1, #6
   1e1e8:	bfi	r6, r1, #3, #29
   1e1ec:	strbcc	r3, [r5, r2]
   1e1f0:	mov	r2, #1
   1e1f4:	b	1e274 <__assert_fail@plt+0xc3ac>
   1e1f8:	ldr	r1, [sp, #88]	; 0x58
   1e1fc:	ldr	r5, [fp, #-84]	; 0xffffffac
   1e200:	ldr	r4, [sp, #88]	; 0x58
   1e204:	cmp	r8, r1
   1e208:	movcc	r1, #39	; 0x27
   1e20c:	strbcc	r1, [r5, r8]
   1e210:	add	r1, r8, #1
   1e214:	add	r8, r8, #2
   1e218:	cmp	r1, r4
   1e21c:	movcc	r4, #39	; 0x27
   1e220:	strbcc	r4, [r5, r1]
   1e224:	mov	r4, #0
   1e228:	ldr	r1, [sp, #88]	; 0x58
   1e22c:	cmp	r8, r1
   1e230:	ldr	r1, [sp, #72]	; 0x48
   1e234:	strbcc	r6, [r5, r8]
   1e238:	add	r8, r8, #1
   1e23c:	ldrb	r6, [r1, r7]
   1e240:	mov	r7, r3
   1e244:	tst	r0, #1
   1e248:	beq	1e134 <__assert_fail@plt+0xc26c>
   1e24c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e250:	tst	r1, #1
   1e254:	beq	1e26c <__assert_fail@plt+0xc3a4>
   1e258:	ldr	r1, [sp, #88]	; 0x58
   1e25c:	cmp	r8, r1
   1e260:	movcc	r1, #92	; 0x5c
   1e264:	strbcc	r1, [r5, r8]
   1e268:	add	r8, r8, #1
   1e26c:	mov	r1, #0
   1e270:	str	r1, [fp, #-52]	; 0xffffffcc
   1e274:	ldr	r1, [sp, #44]	; 0x2c
   1e278:	add	r3, r7, #1
   1e27c:	and	sl, r2, #1
   1e280:	cmp	r1, r3
   1e284:	bls	1e2a8 <__assert_fail@plt+0xc3e0>
   1e288:	cmp	sl, #0
   1e28c:	mvn	r5, r4
   1e290:	movwne	sl, #1
   1e294:	orr	r5, r5, sl
   1e298:	tst	r5, #1
   1e29c:	beq	1e1f8 <__assert_fail@plt+0xc330>
   1e2a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   1e2a4:	b	1e228 <__assert_fail@plt+0xc360>
   1e2a8:	str	r4, [fp, #-56]	; 0xffffffc8
   1e2ac:	ldr	r4, [sp, #88]	; 0x58
   1e2b0:	cmp	sl, #0
   1e2b4:	movwne	sl, #1
   1e2b8:	cmp	sl, #0
   1e2bc:	beq	1de18 <__assert_fail@plt+0xbf50>
   1e2c0:	b	1de4c <__assert_fail@plt+0xbf84>
   1e2c4:	mov	r9, #0
   1e2c8:	b	1e308 <__assert_fail@plt+0xc440>
   1e2cc:	ldr	r0, [sp, #24]
   1e2d0:	mov	r9, #0
   1e2d4:	cmp	lr, r0
   1e2d8:	bls	1e308 <__assert_fail@plt+0xc440>
   1e2dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e2e0:	ldr	r2, [sp, #44]	; 0x2c
   1e2e4:	add	r0, ip, r7
   1e2e8:	ldrb	r1, [r0, r2]
   1e2ec:	cmp	r1, #0
   1e2f0:	beq	1ddd0 <__assert_fail@plt+0xbf08>
   1e2f4:	add	r2, r2, #1
   1e2f8:	add	r1, r7, r2
   1e2fc:	cmp	r1, lr
   1e300:	bcc	1e2e8 <__assert_fail@plt+0xc420>
   1e304:	b	1ddd0 <__assert_fail@plt+0xbf08>
   1e308:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e30c:	ldr	r2, [sp, #44]	; 0x2c
   1e310:	b	1ddd0 <__assert_fail@plt+0xbf08>
   1e314:	mov	lr, r7
   1e318:	b	1e320 <__assert_fail@plt+0xc458>
   1e31c:	mvn	lr, #0
   1e320:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1e324:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1e328:	eor	r0, r1, #2
   1e32c:	orr	r0, r0, r8
   1e330:	clz	r0, r0
   1e334:	lsr	r0, r0, #5
   1e338:	tst	r2, r0
   1e33c:	bne	1e3e0 <__assert_fail@plt+0xc518>
   1e340:	subs	r0, r1, #2
   1e344:	movwne	r0, #1
   1e348:	orr	r0, r2, r0
   1e34c:	tst	r0, #1
   1e350:	ldreq	r0, [sp, #60]	; 0x3c
   1e354:	eoreq	r0, r0, #1
   1e358:	tsteq	r0, #1
   1e35c:	bne	1e474 <__assert_fail@plt+0xc5ac>
   1e360:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e364:	mov	sl, lr
   1e368:	tst	r0, #1
   1e36c:	bne	1e440 <__assert_fail@plt+0xc578>
   1e370:	ldr	r6, [sp, #56]	; 0x38
   1e374:	mov	r9, #0
   1e378:	cmp	r6, #0
   1e37c:	beq	1e46c <__assert_fail@plt+0xc5a4>
   1e380:	ldr	r0, [sp, #84]	; 0x54
   1e384:	mov	r1, #0
   1e388:	mov	r7, #2
   1e38c:	cmp	r4, #0
   1e390:	str	r1, [fp, #-48]	; 0xffffffd0
   1e394:	mov	r1, #0
   1e398:	str	r1, [fp, #-76]	; 0xffffffb4
   1e39c:	beq	1d53c <__assert_fail@plt+0xb674>
   1e3a0:	b	1e474 <__assert_fail@plt+0xc5ac>
   1e3a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e3a8:	ldr	r1, [fp, #12]
   1e3ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e3b0:	mov	lr, r4
   1e3b4:	mov	r4, r6
   1e3b8:	b	1e400 <__assert_fail@plt+0xc538>
   1e3bc:	tst	ip, #1
   1e3c0:	ldr	r5, [fp, #-84]	; 0xffffffac
   1e3c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e3c8:	ldr	r1, [fp, #12]
   1e3cc:	mov	r0, #2
   1e3d0:	movwne	r0, #4
   1e3d4:	mov	r2, r0
   1e3d8:	b	1e400 <__assert_fail@plt+0xc538>
   1e3dc:	ldr	r4, [sp, #88]	; 0x58
   1e3e0:	ldr	r1, [sp, #84]	; 0x54
   1e3e4:	mov	r0, #2
   1e3e8:	tst	r1, #1
   1e3ec:	movwne	r0, #4
   1e3f0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e3f4:	ldr	r1, [fp, #12]
   1e3f8:	cmp	r2, #2
   1e3fc:	moveq	r2, r0
   1e400:	mov	r0, #0
   1e404:	bic	r1, r1, #2
   1e408:	str	r2, [sp]
   1e40c:	mov	r2, ip
   1e410:	mov	r3, lr
   1e414:	str	r0, [sp, #8]
   1e418:	ldr	r0, [sp, #76]	; 0x4c
   1e41c:	str	r1, [sp, #4]
   1e420:	mov	r1, r4
   1e424:	str	r0, [sp, #12]
   1e428:	ldr	r0, [sp, #80]	; 0x50
   1e42c:	str	r0, [sp, #16]
   1e430:	mov	r0, r5
   1e434:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e438:	mov	r8, r0
   1e43c:	b	1e4c0 <__assert_fail@plt+0xc5f8>
   1e440:	mov	r0, #5
   1e444:	ldr	r1, [sp, #56]	; 0x38
   1e448:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1e44c:	mov	r3, sl
   1e450:	str	r0, [sp]
   1e454:	ldr	r0, [fp, #12]
   1e458:	str	r0, [sp, #4]
   1e45c:	ldr	r0, [fp, #16]
   1e460:	str	r0, [sp, #8]
   1e464:	ldr	r0, [sp, #76]	; 0x4c
   1e468:	b	1e424 <__assert_fail@plt+0xc55c>
   1e46c:	mov	r0, #0
   1e470:	str	r0, [fp, #-76]	; 0xffffffb4
   1e474:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1e478:	cmp	r1, #0
   1e47c:	beq	1e4b4 <__assert_fail@plt+0xc5ec>
   1e480:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e484:	tst	r0, #1
   1e488:	bne	1e4b4 <__assert_fail@plt+0xc5ec>
   1e48c:	ldrb	r0, [r1]
   1e490:	cmp	r0, #0
   1e494:	beq	1e4b4 <__assert_fail@plt+0xc5ec>
   1e498:	add	r1, r1, #1
   1e49c:	cmp	r8, r4
   1e4a0:	strbcc	r0, [r5, r8]
   1e4a4:	add	r8, r8, #1
   1e4a8:	ldrb	r0, [r1], #1
   1e4ac:	cmp	r0, #0
   1e4b0:	bne	1e49c <__assert_fail@plt+0xc5d4>
   1e4b4:	cmp	r8, r4
   1e4b8:	movcc	r0, #0
   1e4bc:	strbcc	r0, [r5, r8]
   1e4c0:	mov	r0, r8
   1e4c4:	sub	sp, fp, #28
   1e4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4cc:	mov	r0, #4
   1e4d0:	b	1e3f0 <__assert_fail@plt+0xc528>
   1e4d4:	bl	11e8c <abort@plt>
   1e4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4dc:	add	fp, sp, #28
   1e4e0:	sub	sp, sp, #28
   1e4e4:	movw	r5, #37560	; 0x92b8
   1e4e8:	cmp	r2, #0
   1e4ec:	mov	r4, r1
   1e4f0:	mov	r7, r0
   1e4f4:	str	r0, [sp, #20]
   1e4f8:	movt	r5, #4
   1e4fc:	movne	r5, r2
   1e500:	bl	11cdc <__errno_location@plt>
   1e504:	mov	sl, r0
   1e508:	ldr	r2, [r5, #40]	; 0x28
   1e50c:	ldr	r3, [r5, #44]	; 0x2c
   1e510:	ldm	r5, {r0, r1}
   1e514:	orr	r8, r1, #1
   1e518:	add	r9, r5, #8
   1e51c:	mov	r1, #0
   1e520:	ldr	r6, [sl]
   1e524:	stm	sp, {r0, r8, r9}
   1e528:	mov	r0, #0
   1e52c:	str	r2, [sp, #12]
   1e530:	str	r3, [sp, #16]
   1e534:	mov	r2, r7
   1e538:	mov	r3, r4
   1e53c:	str	r6, [sp, #24]
   1e540:	mov	r6, r4
   1e544:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e548:	add	r7, r0, #1
   1e54c:	mov	r0, r7
   1e550:	bl	31b74 <__assert_fail@plt+0x1fcac>
   1e554:	mov	r4, r0
   1e558:	ldr	r0, [r5]
   1e55c:	ldr	r2, [r5, #44]	; 0x2c
   1e560:	ldr	r1, [r5, #40]	; 0x28
   1e564:	mov	r3, r6
   1e568:	stm	sp, {r0, r8, r9}
   1e56c:	str	r2, [sp, #16]
   1e570:	ldr	r2, [sp, #20]
   1e574:	str	r1, [sp, #12]
   1e578:	mov	r0, r4
   1e57c:	mov	r1, r7
   1e580:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e584:	ldr	r0, [sp, #24]
   1e588:	str	r0, [sl]
   1e58c:	mov	r0, r4
   1e590:	sub	sp, fp, #28
   1e594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e59c:	add	fp, sp, #28
   1e5a0:	sub	sp, sp, #36	; 0x24
   1e5a4:	movw	r8, #37560	; 0x92b8
   1e5a8:	cmp	r3, #0
   1e5ac:	mov	r4, r2
   1e5b0:	str	r2, [sp, #24]
   1e5b4:	mov	r5, r1
   1e5b8:	mov	r6, r0
   1e5bc:	str	r0, [sp, #20]
   1e5c0:	movt	r8, #4
   1e5c4:	movne	r8, r3
   1e5c8:	bl	11cdc <__errno_location@plt>
   1e5cc:	str	r0, [sp, #28]
   1e5d0:	ldr	r1, [r8, #40]	; 0x28
   1e5d4:	ldr	r2, [r8, #44]	; 0x2c
   1e5d8:	ldr	r7, [r0]
   1e5dc:	cmp	r4, #0
   1e5e0:	add	sl, r8, #8
   1e5e4:	mov	r0, #0
   1e5e8:	ldm	r8, {r3, r9}
   1e5ec:	orreq	r9, r9, #1
   1e5f0:	stm	sp, {r3, r9, sl}
   1e5f4:	str	r1, [sp, #12]
   1e5f8:	str	r2, [sp, #16]
   1e5fc:	mov	r1, #0
   1e600:	mov	r2, r6
   1e604:	mov	r3, r5
   1e608:	str	r7, [sp, #32]
   1e60c:	mov	r7, r5
   1e610:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e614:	add	r4, r0, #1
   1e618:	mov	r5, r0
   1e61c:	mov	r0, r4
   1e620:	bl	31b74 <__assert_fail@plt+0x1fcac>
   1e624:	mov	r6, r0
   1e628:	ldr	r0, [r8]
   1e62c:	ldr	r2, [r8, #44]	; 0x2c
   1e630:	ldr	r1, [r8, #40]	; 0x28
   1e634:	mov	r3, r7
   1e638:	stm	sp, {r0, r9, sl}
   1e63c:	str	r2, [sp, #16]
   1e640:	ldr	r2, [sp, #20]
   1e644:	str	r1, [sp, #12]
   1e648:	mov	r0, r6
   1e64c:	mov	r1, r4
   1e650:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e654:	ldr	r0, [sp, #24]
   1e658:	ldr	r1, [sp, #32]
   1e65c:	ldr	r2, [sp, #28]
   1e660:	cmp	r0, #0
   1e664:	str	r1, [r2]
   1e668:	strne	r5, [r0]
   1e66c:	mov	r0, r6
   1e670:	sub	sp, fp, #28
   1e674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e678:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e67c:	add	fp, sp, #24
   1e680:	movw	r5, #37340	; 0x91dc
   1e684:	movw	r8, #37336	; 0x91d8
   1e688:	movt	r5, #4
   1e68c:	movt	r8, #4
   1e690:	ldr	r0, [r5]
   1e694:	ldr	r4, [r8]
   1e698:	cmp	r0, #2
   1e69c:	blt	1e6c8 <__assert_fail@plt+0xc800>
   1e6a0:	add	r7, r4, #12
   1e6a4:	mov	r6, #0
   1e6a8:	ldr	r0, [r7, r6, lsl #3]
   1e6ac:	bl	176c0 <__assert_fail@plt+0x57f8>
   1e6b0:	ldr	r1, [r5]
   1e6b4:	add	r2, r6, #2
   1e6b8:	add	r0, r6, #1
   1e6bc:	mov	r6, r0
   1e6c0:	cmp	r2, r1
   1e6c4:	blt	1e6a8 <__assert_fail@plt+0xc7e0>
   1e6c8:	ldr	r0, [r4, #4]
   1e6cc:	movw	r9, #37608	; 0x92e8
   1e6d0:	movw	r7, #37344	; 0x91e0
   1e6d4:	movt	r9, #4
   1e6d8:	movt	r7, #4
   1e6dc:	cmp	r0, r9
   1e6e0:	beq	1e6f0 <__assert_fail@plt+0xc828>
   1e6e4:	bl	176c0 <__assert_fail@plt+0x57f8>
   1e6e8:	mov	r0, #256	; 0x100
   1e6ec:	stm	r7, {r0, r9}
   1e6f0:	cmp	r4, r7
   1e6f4:	beq	1e704 <__assert_fail@plt+0xc83c>
   1e6f8:	mov	r0, r4
   1e6fc:	bl	176c0 <__assert_fail@plt+0x57f8>
   1e700:	str	r7, [r8]
   1e704:	mov	r0, #1
   1e708:	str	r0, [r5]
   1e70c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e710:	movw	r3, #37560	; 0x92b8
   1e714:	mvn	r2, #0
   1e718:	movt	r3, #4
   1e71c:	b	1e720 <__assert_fail@plt+0xc858>
   1e720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e724:	add	fp, sp, #28
   1e728:	sub	sp, sp, #44	; 0x2c
   1e72c:	mov	r7, r3
   1e730:	str	r2, [sp, #36]	; 0x24
   1e734:	str	r1, [sp, #32]
   1e738:	mov	r5, r0
   1e73c:	bl	11cdc <__errno_location@plt>
   1e740:	cmp	r5, #0
   1e744:	bmi	1e8b4 <__assert_fail@plt+0xc9ec>
   1e748:	cmn	r5, #-2147483647	; 0x80000001
   1e74c:	beq	1e8b4 <__assert_fail@plt+0xc9ec>
   1e750:	movw	r8, #37340	; 0x91dc
   1e754:	movw	r4, #37336	; 0x91d8
   1e758:	str	r0, [sp, #28]
   1e75c:	ldr	r0, [r0]
   1e760:	movt	r8, #4
   1e764:	movt	r4, #4
   1e768:	ldr	r1, [r8]
   1e76c:	ldr	r6, [r4]
   1e770:	str	r0, [sp, #24]
   1e774:	cmp	r1, r5
   1e778:	ble	1e784 <__assert_fail@plt+0xc8bc>
   1e77c:	mov	sl, r6
   1e780:	b	1e7f0 <__assert_fail@plt+0xc928>
   1e784:	movw	r9, #37344	; 0x91e0
   1e788:	mov	r0, #8
   1e78c:	str	r1, [fp, #-32]	; 0xffffffe0
   1e790:	sub	r1, r5, r1
   1e794:	mvn	r3, #-2147483648	; 0x80000000
   1e798:	movt	r9, #4
   1e79c:	str	r0, [sp]
   1e7a0:	add	r2, r1, #1
   1e7a4:	sub	r1, fp, #32
   1e7a8:	subs	r0, r6, r9
   1e7ac:	movne	r0, r6
   1e7b0:	bl	31d74 <__assert_fail@plt+0x1feac>
   1e7b4:	mov	sl, r0
   1e7b8:	cmp	r6, r9
   1e7bc:	str	r0, [r4]
   1e7c0:	bne	1e7cc <__assert_fail@plt+0xc904>
   1e7c4:	ldrd	r0, [r9]
   1e7c8:	stm	sl, {r0, r1}
   1e7cc:	ldr	r1, [r8]
   1e7d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e7d4:	add	r0, sl, r1, lsl #3
   1e7d8:	sub	r1, r2, r1
   1e7dc:	lsl	r2, r1, #3
   1e7e0:	mov	r1, #0
   1e7e4:	bl	11d0c <memset@plt>
   1e7e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e7ec:	str	r0, [r8]
   1e7f0:	mov	r9, sl
   1e7f4:	ldm	r7, {r0, r1}
   1e7f8:	orr	r8, r1, #1
   1e7fc:	add	r1, r7, #8
   1e800:	ldr	r2, [r7, #40]	; 0x28
   1e804:	ldr	r3, [r7, #44]	; 0x2c
   1e808:	ldr	r6, [r9, r5, lsl #3]!
   1e80c:	str	r1, [sp, #20]
   1e810:	ldr	r4, [r9, #4]!
   1e814:	stm	sp, {r0, r8}
   1e818:	add	r0, sp, #8
   1e81c:	stm	r0, {r1, r2, r3}
   1e820:	ldr	r2, [sp, #32]
   1e824:	ldr	r3, [sp, #36]	; 0x24
   1e828:	mov	r1, r6
   1e82c:	mov	r0, r4
   1e830:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e834:	cmp	r6, r0
   1e838:	bhi	1e89c <__assert_fail@plt+0xc9d4>
   1e83c:	add	r6, r0, #1
   1e840:	movw	r0, #37608	; 0x92e8
   1e844:	movt	r0, #4
   1e848:	str	r6, [sl, r5, lsl #3]
   1e84c:	cmp	r4, r0
   1e850:	beq	1e85c <__assert_fail@plt+0xc994>
   1e854:	mov	r0, r4
   1e858:	bl	176c0 <__assert_fail@plt+0x57f8>
   1e85c:	mov	r0, r6
   1e860:	bl	31b74 <__assert_fail@plt+0x1fcac>
   1e864:	str	r0, [r9]
   1e868:	mov	r4, r0
   1e86c:	add	r3, sp, #8
   1e870:	ldr	r0, [r7]
   1e874:	ldr	r1, [r7, #40]	; 0x28
   1e878:	ldr	r2, [r7, #44]	; 0x2c
   1e87c:	stm	sp, {r0, r8}
   1e880:	ldr	r0, [sp, #20]
   1e884:	stm	r3, {r0, r1, r2}
   1e888:	ldr	r2, [sp, #32]
   1e88c:	ldr	r3, [sp, #36]	; 0x24
   1e890:	mov	r0, r4
   1e894:	mov	r1, r6
   1e898:	bl	1d4ac <__assert_fail@plt+0xb5e4>
   1e89c:	ldr	r0, [sp, #28]
   1e8a0:	ldr	r1, [sp, #24]
   1e8a4:	str	r1, [r0]
   1e8a8:	mov	r0, r4
   1e8ac:	sub	sp, fp, #28
   1e8b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8b4:	bl	11e8c <abort@plt>
   1e8b8:	movw	r3, #37560	; 0x92b8
   1e8bc:	movt	r3, #4
   1e8c0:	b	1e720 <__assert_fail@plt+0xc858>
   1e8c4:	movw	r3, #37560	; 0x92b8
   1e8c8:	mov	r1, r0
   1e8cc:	mov	r0, #0
   1e8d0:	mvn	r2, #0
   1e8d4:	movt	r3, #4
   1e8d8:	b	1e720 <__assert_fail@plt+0xc858>
   1e8dc:	movw	r3, #37560	; 0x92b8
   1e8e0:	mov	r2, r1
   1e8e4:	mov	r1, r0
   1e8e8:	mov	r0, #0
   1e8ec:	movt	r3, #4
   1e8f0:	b	1e720 <__assert_fail@plt+0xc858>
   1e8f4:	push	{fp, lr}
   1e8f8:	mov	fp, sp
   1e8fc:	sub	sp, sp, #48	; 0x30
   1e900:	vmov.i32	q8, #0	; 0x00000000
   1e904:	mov	ip, #32
   1e908:	mov	r3, sp
   1e90c:	mov	lr, r2
   1e910:	cmp	r1, #10
   1e914:	add	r2, r3, #16
   1e918:	vst1.64	{d16-d17}, [r3], ip
   1e91c:	vst1.64	{d16-d17}, [r2]
   1e920:	vst1.64	{d16-d17}, [r3]
   1e924:	beq	1e944 <__assert_fail@plt+0xca7c>
   1e928:	str	r1, [sp]
   1e92c:	mov	r3, sp
   1e930:	mov	r1, lr
   1e934:	mvn	r2, #0
   1e938:	bl	1e720 <__assert_fail@plt+0xc858>
   1e93c:	mov	sp, fp
   1e940:	pop	{fp, pc}
   1e944:	bl	11e8c <abort@plt>
   1e948:	push	{r4, sl, fp, lr}
   1e94c:	add	fp, sp, #8
   1e950:	sub	sp, sp, #48	; 0x30
   1e954:	vmov.i32	q8, #0	; 0x00000000
   1e958:	mov	ip, r3
   1e95c:	mov	r3, sp
   1e960:	mov	lr, #32
   1e964:	cmp	r1, #10
   1e968:	add	r4, r3, #16
   1e96c:	vst1.64	{d16-d17}, [r3], lr
   1e970:	vst1.64	{d16-d17}, [r4]
   1e974:	vst1.64	{d16-d17}, [r3]
   1e978:	beq	1e998 <__assert_fail@plt+0xcad0>
   1e97c:	str	r1, [sp]
   1e980:	mov	r1, r2
   1e984:	mov	r3, sp
   1e988:	mov	r2, ip
   1e98c:	bl	1e720 <__assert_fail@plt+0xc858>
   1e990:	sub	sp, fp, #8
   1e994:	pop	{r4, sl, fp, pc}
   1e998:	bl	11e8c <abort@plt>
   1e99c:	push	{fp, lr}
   1e9a0:	mov	fp, sp
   1e9a4:	sub	sp, sp, #48	; 0x30
   1e9a8:	vmov.i32	q8, #0	; 0x00000000
   1e9ac:	mov	r3, sp
   1e9b0:	mov	ip, #32
   1e9b4:	cmp	r0, #10
   1e9b8:	add	r2, r3, #16
   1e9bc:	vst1.64	{d16-d17}, [r3], ip
   1e9c0:	vst1.64	{d16-d17}, [r2]
   1e9c4:	vst1.64	{d16-d17}, [r3]
   1e9c8:	beq	1e9e8 <__assert_fail@plt+0xcb20>
   1e9cc:	str	r0, [sp]
   1e9d0:	mov	r3, sp
   1e9d4:	mov	r0, #0
   1e9d8:	mvn	r2, #0
   1e9dc:	bl	1e720 <__assert_fail@plt+0xc858>
   1e9e0:	mov	sp, fp
   1e9e4:	pop	{fp, pc}
   1e9e8:	bl	11e8c <abort@plt>
   1e9ec:	push	{fp, lr}
   1e9f0:	mov	fp, sp
   1e9f4:	sub	sp, sp, #48	; 0x30
   1e9f8:	vmov.i32	q8, #0	; 0x00000000
   1e9fc:	mov	r3, sp
   1ea00:	mov	ip, #32
   1ea04:	cmp	r0, #10
   1ea08:	add	lr, r3, #16
   1ea0c:	vst1.64	{d16-d17}, [r3], ip
   1ea10:	vst1.64	{d16-d17}, [lr]
   1ea14:	vst1.64	{d16-d17}, [r3]
   1ea18:	beq	1ea34 <__assert_fail@plt+0xcb6c>
   1ea1c:	str	r0, [sp]
   1ea20:	mov	r3, sp
   1ea24:	mov	r0, #0
   1ea28:	bl	1e720 <__assert_fail@plt+0xc858>
   1ea2c:	mov	sp, fp
   1ea30:	pop	{fp, pc}
   1ea34:	bl	11e8c <abort@plt>
   1ea38:	push	{r4, sl, fp, lr}
   1ea3c:	add	fp, sp, #8
   1ea40:	sub	sp, sp, #48	; 0x30
   1ea44:	mov	lr, r0
   1ea48:	movw	r0, #37560	; 0x92b8
   1ea4c:	mov	ip, r1
   1ea50:	mov	r1, #32
   1ea54:	mov	r4, #1
   1ea58:	movt	r0, #4
   1ea5c:	add	r3, r0, #16
   1ea60:	vld1.64	{d16-d17}, [r0], r1
   1ea64:	vld1.64	{d20-d21}, [r0]
   1ea68:	vld1.64	{d18-d19}, [r3]
   1ea6c:	mov	r3, sp
   1ea70:	add	r0, r3, #32
   1ea74:	add	r1, r3, #16
   1ea78:	vst1.64	{d20-d21}, [r0]
   1ea7c:	mov	r0, #28
   1ea80:	vst1.64	{d18-d19}, [r1]
   1ea84:	mov	r1, r3
   1ea88:	and	r0, r0, r2, lsr #3
   1ea8c:	and	r2, r2, #31
   1ea90:	vst1.64	{d16-d17}, [r1], r0
   1ea94:	ldr	r0, [r1, #8]
   1ea98:	bic	r4, r4, r0, lsr r2
   1ea9c:	eor	r0, r0, r4, lsl r2
   1eaa0:	mov	r2, ip
   1eaa4:	str	r0, [r1, #8]
   1eaa8:	mov	r0, #0
   1eaac:	mov	r1, lr
   1eab0:	bl	1e720 <__assert_fail@plt+0xc858>
   1eab4:	sub	sp, fp, #8
   1eab8:	pop	{r4, sl, fp, pc}
   1eabc:	push	{fp, lr}
   1eac0:	mov	fp, sp
   1eac4:	sub	sp, sp, #48	; 0x30
   1eac8:	mov	ip, r0
   1eacc:	movw	r0, #37560	; 0x92b8
   1ead0:	mov	r2, #32
   1ead4:	movt	r0, #4
   1ead8:	add	r3, r0, #16
   1eadc:	vld1.64	{d16-d17}, [r0], r2
   1eae0:	vld1.64	{d20-d21}, [r0]
   1eae4:	vld1.64	{d18-d19}, [r3]
   1eae8:	mov	r3, sp
   1eaec:	add	r0, r3, #32
   1eaf0:	add	r2, r3, #16
   1eaf4:	vst1.64	{d20-d21}, [r0]
   1eaf8:	mov	r0, #28
   1eafc:	vst1.64	{d18-d19}, [r2]
   1eb00:	mov	r2, r3
   1eb04:	and	r0, r0, r1, lsr #3
   1eb08:	and	r1, r1, #31
   1eb0c:	vst1.64	{d16-d17}, [r2], r0
   1eb10:	mov	r0, #1
   1eb14:	ldr	lr, [r2, #8]
   1eb18:	bic	r0, r0, lr, lsr r1
   1eb1c:	eor	r0, lr, r0, lsl r1
   1eb20:	mov	r1, ip
   1eb24:	str	r0, [r2, #8]
   1eb28:	mov	r0, #0
   1eb2c:	mvn	r2, #0
   1eb30:	bl	1e720 <__assert_fail@plt+0xc858>
   1eb34:	mov	sp, fp
   1eb38:	pop	{fp, pc}
   1eb3c:	push	{fp, lr}
   1eb40:	mov	fp, sp
   1eb44:	sub	sp, sp, #48	; 0x30
   1eb48:	mov	r1, r0
   1eb4c:	movw	r0, #37560	; 0x92b8
   1eb50:	mov	r3, #32
   1eb54:	movt	r0, #4
   1eb58:	add	r2, r0, #16
   1eb5c:	vld1.64	{d16-d17}, [r0], r3
   1eb60:	mov	r3, sp
   1eb64:	vld1.64	{d18-d19}, [r2]
   1eb68:	vld1.64	{d20-d21}, [r0]
   1eb6c:	add	r2, r3, #16
   1eb70:	add	r0, r3, #32
   1eb74:	vst1.64	{d18-d19}, [r2]
   1eb78:	vst1.64	{d20-d21}, [r0]
   1eb7c:	mov	r0, #12
   1eb80:	mov	r2, r3
   1eb84:	vst1.64	{d16-d17}, [r2], r0
   1eb88:	ldr	r0, [r2]
   1eb8c:	orr	r0, r0, #67108864	; 0x4000000
   1eb90:	str	r0, [r2]
   1eb94:	mov	r0, #0
   1eb98:	mvn	r2, #0
   1eb9c:	bl	1e720 <__assert_fail@plt+0xc858>
   1eba0:	mov	sp, fp
   1eba4:	pop	{fp, pc}
   1eba8:	push	{fp, lr}
   1ebac:	mov	fp, sp
   1ebb0:	sub	sp, sp, #48	; 0x30
   1ebb4:	mov	ip, r1
   1ebb8:	mov	r1, r0
   1ebbc:	movw	r0, #37560	; 0x92b8
   1ebc0:	mov	r2, #32
   1ebc4:	movt	r0, #4
   1ebc8:	add	r3, r0, #16
   1ebcc:	vld1.64	{d16-d17}, [r0], r2
   1ebd0:	vld1.64	{d18-d19}, [r3]
   1ebd4:	vld1.64	{d20-d21}, [r0]
   1ebd8:	mov	r3, sp
   1ebdc:	add	r2, r3, #16
   1ebe0:	add	r0, r3, #32
   1ebe4:	vst1.64	{d18-d19}, [r2]
   1ebe8:	vst1.64	{d20-d21}, [r0]
   1ebec:	mov	r0, #12
   1ebf0:	mov	r2, r3
   1ebf4:	vst1.64	{d16-d17}, [r2], r0
   1ebf8:	ldr	r0, [r2]
   1ebfc:	orr	r0, r0, #67108864	; 0x4000000
   1ec00:	str	r0, [r2]
   1ec04:	mov	r0, #0
   1ec08:	mov	r2, ip
   1ec0c:	bl	1e720 <__assert_fail@plt+0xc858>
   1ec10:	mov	sp, fp
   1ec14:	pop	{fp, pc}
   1ec18:	push	{r4, sl, fp, lr}
   1ec1c:	add	fp, sp, #8
   1ec20:	sub	sp, sp, #96	; 0x60
   1ec24:	vmov.i32	q8, #0	; 0x00000000
   1ec28:	mov	ip, r2
   1ec2c:	mov	r2, sp
   1ec30:	mov	r4, #28
   1ec34:	cmp	r1, #10
   1ec38:	mov	r3, r2
   1ec3c:	add	lr, r2, #16
   1ec40:	vst1.64	{d16-d17}, [r3], r4
   1ec44:	vst1.64	{d16-d17}, [lr]
   1ec48:	vst1.32	{d16-d17}, [r3]
   1ec4c:	beq	1ec9c <__assert_fail@plt+0xcdd4>
   1ec50:	vld1.64	{d16-d17}, [r2], r4
   1ec54:	vld1.64	{d18-d19}, [lr]
   1ec58:	add	r3, sp, #48	; 0x30
   1ec5c:	vld1.32	{d20-d21}, [r2]
   1ec60:	add	r2, r3, #20
   1ec64:	add	r4, r3, #4
   1ec68:	vst1.32	{d18-d19}, [r2]
   1ec6c:	add	r2, r3, #32
   1ec70:	vst1.32	{d16-d17}, [r4]
   1ec74:	vst1.32	{d20-d21}, [r2]
   1ec78:	str	r1, [sp, #48]	; 0x30
   1ec7c:	mvn	r2, #0
   1ec80:	ldr	r1, [sp, #60]	; 0x3c
   1ec84:	orr	r1, r1, #67108864	; 0x4000000
   1ec88:	str	r1, [sp, #60]	; 0x3c
   1ec8c:	mov	r1, ip
   1ec90:	bl	1e720 <__assert_fail@plt+0xc858>
   1ec94:	sub	sp, fp, #8
   1ec98:	pop	{r4, sl, fp, pc}
   1ec9c:	bl	11e8c <abort@plt>
   1eca0:	push	{r4, r5, r6, sl, fp, lr}
   1eca4:	add	fp, sp, #16
   1eca8:	sub	sp, sp, #48	; 0x30
   1ecac:	mov	ip, r3
   1ecb0:	movw	r3, #37560	; 0x92b8
   1ecb4:	mov	r6, #32
   1ecb8:	cmp	r1, #0
   1ecbc:	mov	r4, sp
   1ecc0:	movt	r3, #4
   1ecc4:	cmpne	r2, #0
   1ecc8:	add	r5, r4, #16
   1eccc:	add	lr, r3, #16
   1ecd0:	vld1.64	{d16-d17}, [r3], r6
   1ecd4:	vld1.64	{d18-d19}, [lr]
   1ecd8:	vld1.64	{d20-d21}, [r3]
   1ecdc:	mov	r3, #10
   1ece0:	vst1.64	{d16-d17}, [r4], r6
   1ece4:	vst1.64	{d18-d19}, [r5]
   1ece8:	vst1.64	{d20-d21}, [r4]
   1ecec:	str	r3, [sp]
   1ecf0:	bne	1ecf8 <__assert_fail@plt+0xce30>
   1ecf4:	bl	11e8c <abort@plt>
   1ecf8:	str	r2, [sp, #44]	; 0x2c
   1ecfc:	str	r1, [sp, #40]	; 0x28
   1ed00:	mov	r3, sp
   1ed04:	mov	r1, ip
   1ed08:	mvn	r2, #0
   1ed0c:	bl	1e720 <__assert_fail@plt+0xc858>
   1ed10:	sub	sp, fp, #16
   1ed14:	pop	{r4, r5, r6, sl, fp, pc}
   1ed18:	push	{r4, r5, r6, sl, fp, lr}
   1ed1c:	add	fp, sp, #16
   1ed20:	sub	sp, sp, #48	; 0x30
   1ed24:	mov	lr, r3
   1ed28:	movw	r3, #37560	; 0x92b8
   1ed2c:	mov	r6, #32
   1ed30:	cmp	r1, #0
   1ed34:	mov	r4, sp
   1ed38:	movt	r3, #4
   1ed3c:	cmpne	r2, #0
   1ed40:	add	r5, r4, #16
   1ed44:	add	ip, r3, #16
   1ed48:	vld1.64	{d16-d17}, [r3], r6
   1ed4c:	vld1.64	{d18-d19}, [ip]
   1ed50:	vld1.64	{d20-d21}, [r3]
   1ed54:	mov	r3, #10
   1ed58:	vst1.64	{d16-d17}, [r4], r6
   1ed5c:	vst1.64	{d18-d19}, [r5]
   1ed60:	vst1.64	{d20-d21}, [r4]
   1ed64:	str	r3, [sp]
   1ed68:	bne	1ed70 <__assert_fail@plt+0xcea8>
   1ed6c:	bl	11e8c <abort@plt>
   1ed70:	ldr	ip, [fp, #8]
   1ed74:	str	r2, [sp, #44]	; 0x2c
   1ed78:	str	r1, [sp, #40]	; 0x28
   1ed7c:	mov	r3, sp
   1ed80:	mov	r1, lr
   1ed84:	mov	r2, ip
   1ed88:	bl	1e720 <__assert_fail@plt+0xc858>
   1ed8c:	sub	sp, fp, #16
   1ed90:	pop	{r4, r5, r6, sl, fp, pc}
   1ed94:	push	{r4, sl, fp, lr}
   1ed98:	add	fp, sp, #8
   1ed9c:	sub	sp, sp, #48	; 0x30
   1eda0:	movw	r3, #37560	; 0x92b8
   1eda4:	mov	lr, #32
   1eda8:	mov	ip, r2
   1edac:	cmp	r0, #0
   1edb0:	movt	r3, #4
   1edb4:	cmpne	r1, #0
   1edb8:	add	r2, r3, #16
   1edbc:	vld1.64	{d16-d17}, [r3], lr
   1edc0:	vld1.64	{d20-d21}, [r3]
   1edc4:	vld1.64	{d18-d19}, [r2]
   1edc8:	mov	r2, sp
   1edcc:	add	r4, r2, #16
   1edd0:	vst1.64	{d16-d17}, [r2], lr
   1edd4:	vst1.64	{d20-d21}, [r2]
   1edd8:	mov	r2, #10
   1eddc:	vst1.64	{d18-d19}, [r4]
   1ede0:	str	r2, [sp]
   1ede4:	bne	1edec <__assert_fail@plt+0xcf24>
   1ede8:	bl	11e8c <abort@plt>
   1edec:	str	r1, [sp, #44]	; 0x2c
   1edf0:	str	r0, [sp, #40]	; 0x28
   1edf4:	mov	r3, sp
   1edf8:	mov	r0, #0
   1edfc:	mov	r1, ip
   1ee00:	mvn	r2, #0
   1ee04:	bl	1e720 <__assert_fail@plt+0xc858>
   1ee08:	sub	sp, fp, #8
   1ee0c:	pop	{r4, sl, fp, pc}
   1ee10:	push	{r4, r5, fp, lr}
   1ee14:	add	fp, sp, #8
   1ee18:	sub	sp, sp, #48	; 0x30
   1ee1c:	mov	ip, r3
   1ee20:	movw	r3, #37560	; 0x92b8
   1ee24:	mov	r4, #32
   1ee28:	mov	lr, r2
   1ee2c:	cmp	r0, #0
   1ee30:	movt	r3, #4
   1ee34:	cmpne	r1, #0
   1ee38:	add	r2, r3, #16
   1ee3c:	vld1.64	{d16-d17}, [r3], r4
   1ee40:	vld1.64	{d20-d21}, [r3]
   1ee44:	vld1.64	{d18-d19}, [r2]
   1ee48:	mov	r2, sp
   1ee4c:	add	r5, r2, #16
   1ee50:	vst1.64	{d16-d17}, [r2], r4
   1ee54:	vst1.64	{d20-d21}, [r2]
   1ee58:	mov	r2, #10
   1ee5c:	vst1.64	{d18-d19}, [r5]
   1ee60:	str	r2, [sp]
   1ee64:	bne	1ee6c <__assert_fail@plt+0xcfa4>
   1ee68:	bl	11e8c <abort@plt>
   1ee6c:	str	r1, [sp, #44]	; 0x2c
   1ee70:	str	r0, [sp, #40]	; 0x28
   1ee74:	mov	r3, sp
   1ee78:	mov	r0, #0
   1ee7c:	mov	r1, lr
   1ee80:	mov	r2, ip
   1ee84:	bl	1e720 <__assert_fail@plt+0xc858>
   1ee88:	sub	sp, fp, #8
   1ee8c:	pop	{r4, r5, fp, pc}
   1ee90:	movw	r3, #37352	; 0x91e8
   1ee94:	movt	r3, #4
   1ee98:	b	1e720 <__assert_fail@plt+0xc858>
   1ee9c:	movw	r3, #37352	; 0x91e8
   1eea0:	mov	r2, r1
   1eea4:	mov	r1, r0
   1eea8:	mov	r0, #0
   1eeac:	movt	r3, #4
   1eeb0:	b	1e720 <__assert_fail@plt+0xc858>
   1eeb4:	movw	r3, #37352	; 0x91e8
   1eeb8:	mvn	r2, #0
   1eebc:	movt	r3, #4
   1eec0:	b	1e720 <__assert_fail@plt+0xc858>
   1eec4:	movw	r3, #37352	; 0x91e8
   1eec8:	mov	r1, r0
   1eecc:	mov	r0, #0
   1eed0:	mvn	r2, #0
   1eed4:	movt	r3, #4
   1eed8:	b	1e720 <__assert_fail@plt+0xc858>
   1eedc:	push	{r4, r5, fp, lr}
   1eee0:	add	fp, sp, #8
   1eee4:	mov	r5, r0
   1eee8:	mov	r4, r1
   1eeec:	mov	r0, #0
   1eef0:	mov	r2, #5
   1eef4:	mov	r1, r5
   1eef8:	bl	11afc <dcgettext@plt>
   1eefc:	cmp	r0, r5
   1ef00:	popne	{r4, r5, fp, pc}
   1ef04:	bl	357b8 <__assert_fail@plt+0x238f0>
   1ef08:	ldrb	r1, [r0]
   1ef0c:	and	r1, r1, #223	; 0xdf
   1ef10:	cmp	r1, #71	; 0x47
   1ef14:	beq	1ef7c <__assert_fail@plt+0xd0b4>
   1ef18:	cmp	r1, #85	; 0x55
   1ef1c:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef20:	ldrb	r1, [r0, #1]
   1ef24:	and	r1, r1, #223	; 0xdf
   1ef28:	cmp	r1, #84	; 0x54
   1ef2c:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef30:	ldrb	r1, [r0, #2]
   1ef34:	and	r1, r1, #223	; 0xdf
   1ef38:	cmp	r1, #70	; 0x46
   1ef3c:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef40:	ldrb	r1, [r0, #3]
   1ef44:	cmp	r1, #45	; 0x2d
   1ef48:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef4c:	ldrb	r1, [r0, #4]
   1ef50:	cmp	r1, #56	; 0x38
   1ef54:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef58:	ldrb	r0, [r0, #5]
   1ef5c:	cmp	r0, #0
   1ef60:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef64:	ldrb	r1, [r5]
   1ef68:	movw	r2, #31777	; 0x7c21
   1ef6c:	movw	r0, #31781	; 0x7c25
   1ef70:	movt	r2, #3
   1ef74:	movt	r0, #3
   1ef78:	b	1f004 <__assert_fail@plt+0xd13c>
   1ef7c:	ldrb	r1, [r0, #1]
   1ef80:	and	r1, r1, #223	; 0xdf
   1ef84:	cmp	r1, #66	; 0x42
   1ef88:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef8c:	ldrb	r1, [r0, #2]
   1ef90:	cmp	r1, #49	; 0x31
   1ef94:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1ef98:	ldrb	r1, [r0, #3]
   1ef9c:	cmp	r1, #56	; 0x38
   1efa0:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1efa4:	ldrb	r1, [r0, #4]
   1efa8:	cmp	r1, #48	; 0x30
   1efac:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1efb0:	ldrb	r1, [r0, #5]
   1efb4:	cmp	r1, #51	; 0x33
   1efb8:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1efbc:	ldrb	r1, [r0, #6]
   1efc0:	cmp	r1, #48	; 0x30
   1efc4:	bne	1efd4 <__assert_fail@plt+0xd10c>
   1efc8:	ldrb	r0, [r0, #7]
   1efcc:	cmp	r0, #0
   1efd0:	beq	1eff0 <__assert_fail@plt+0xd128>
   1efd4:	movw	r1, #28690	; 0x7012
   1efd8:	movw	r0, #28156	; 0x6dfc
   1efdc:	cmp	r4, #9
   1efe0:	movt	r1, #3
   1efe4:	movt	r0, #3
   1efe8:	moveq	r0, r1
   1efec:	pop	{r4, r5, fp, pc}
   1eff0:	ldrb	r1, [r5]
   1eff4:	movw	r2, #31785	; 0x7c29
   1eff8:	movw	r0, #31789	; 0x7c2d
   1effc:	movt	r2, #3
   1f000:	movt	r0, #3
   1f004:	cmp	r1, #96	; 0x60
   1f008:	moveq	r0, r2
   1f00c:	pop	{r4, r5, fp, pc}
   1f010:	push	{fp, lr}
   1f014:	mov	fp, sp
   1f018:	mov	lr, r0
   1f01c:	movw	r0, #37868	; 0x93ec
   1f020:	mov	ip, r1
   1f024:	ldrb	r1, [r2, #28]
   1f028:	movt	r0, #4
   1f02c:	ldr	r3, [r0]
   1f030:	mov	r0, #16
   1f034:	and	r1, r1, #111	; 0x6f
   1f038:	and	r0, r0, r3, lsr #21
   1f03c:	orr	r0, r1, r0
   1f040:	mov	r1, lr
   1f044:	orr	r0, r0, #128	; 0x80
   1f048:	strb	r0, [r2, #28]
   1f04c:	mov	r0, r2
   1f050:	mov	r2, ip
   1f054:	bl	1f090 <__assert_fail@plt+0xd1c8>
   1f058:	cmp	r0, #0
   1f05c:	beq	1f088 <__assert_fail@plt+0xd1c0>
   1f060:	movw	r1, #32264	; 0x7e08
   1f064:	mov	r2, #5
   1f068:	movt	r1, #3
   1f06c:	ldr	r0, [r1, r0, lsl #2]
   1f070:	movw	r1, #31880	; 0x7c88
   1f074:	movt	r1, #3
   1f078:	add	r1, r1, r0
   1f07c:	mov	r0, #0
   1f080:	pop	{fp, lr}
   1f084:	b	11afc <dcgettext@plt>
   1f088:	mov	r0, #0
   1f08c:	pop	{fp, pc}
   1f090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f094:	add	fp, sp, #28
   1f098:	sub	sp, sp, #140	; 0x8c
   1f09c:	mov	sl, r0
   1f0a0:	mov	r0, #0
   1f0a4:	str	r3, [sp, #24]
   1f0a8:	mov	r5, r1
   1f0ac:	mov	r9, r2
   1f0b0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f0b4:	str	r0, [sl, #24]
   1f0b8:	str	r0, [sl, #8]
   1f0bc:	str	r3, [sl, #12]
   1f0c0:	ldrb	r0, [sl, #28]
   1f0c4:	and	r0, r0, #144	; 0x90
   1f0c8:	strb	r0, [sl, #28]
   1f0cc:	ldm	sl, {r0, r1}
   1f0d0:	cmp	r1, #159	; 0x9f
   1f0d4:	bls	1f8b4 <__assert_fail@plt+0xd9ec>
   1f0d8:	mov	r1, #160	; 0xa0
   1f0dc:	mov	r2, #160	; 0xa0
   1f0e0:	str	r0, [sp, #28]
   1f0e4:	str	r1, [sl, #8]
   1f0e8:	mov	r1, #0
   1f0ec:	bl	11d0c <memset@plt>
   1f0f0:	ldr	r3, [sp, #28]
   1f0f4:	mov	r0, #31
   1f0f8:	str	r0, [r3, #64]	; 0x40
   1f0fc:	movw	r0, #43689	; 0xaaa9
   1f100:	movt	r0, #2730	; 0xaaa
   1f104:	cmp	r9, r0
   1f108:	bhi	1f2a8 <__assert_fail@plt+0xd3e0>
   1f10c:	add	r7, r9, #1
   1f110:	mov	r4, r3
   1f114:	lsl	r0, r7, #3
   1f118:	str	r7, [r3, #4]
   1f11c:	bl	34810 <__assert_fail@plt+0x22948>
   1f120:	str	r0, [r4]
   1f124:	mov	r0, #1
   1f128:	mov	r6, r0
   1f12c:	lsl	r0, r0, #1
   1f130:	cmp	r6, r9
   1f134:	bls	1f128 <__assert_fail@plt+0xd260>
   1f138:	mov	r0, #12
   1f13c:	mov	r1, r6
   1f140:	str	r7, [sp, #12]
   1f144:	str	r5, [sp, #20]
   1f148:	bl	347bc <__assert_fail@plt+0x228f4>
   1f14c:	ldr	r4, [sp, #28]
   1f150:	sub	r1, r6, #1
   1f154:	str	r1, [r4, #68]	; 0x44
   1f158:	str	r0, [r4, #32]
   1f15c:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1f160:	str	r0, [r4, #92]	; 0x5c
   1f164:	mov	r0, #14
   1f168:	bl	11da8 <nl_langinfo@plt>
   1f16c:	ldrb	r1, [r0]
   1f170:	orr	r1, r1, #32
   1f174:	cmp	r1, #117	; 0x75
   1f178:	bne	1f1cc <__assert_fail@plt+0xd304>
   1f17c:	ldrb	r1, [r0, #1]
   1f180:	orr	r1, r1, #32
   1f184:	cmp	r1, #116	; 0x74
   1f188:	bne	1f1cc <__assert_fail@plt+0xd304>
   1f18c:	ldrb	r1, [r0, #2]
   1f190:	orr	r1, r1, #32
   1f194:	cmp	r1, #102	; 0x66
   1f198:	bne	1f1cc <__assert_fail@plt+0xd304>
   1f19c:	ldrb	r1, [r0, #3]!
   1f1a0:	cmp	r1, #45	; 0x2d
   1f1a4:	movw	r1, #32380	; 0x7e7c
   1f1a8:	movt	r1, #3
   1f1ac:	addeq	r0, r0, #1
   1f1b0:	bl	11a3c <strcmp@plt>
   1f1b4:	cmp	r0, #0
   1f1b8:	bne	1f1cc <__assert_fail@plt+0xd304>
   1f1bc:	ldr	r1, [sp, #28]
   1f1c0:	ldrb	r0, [r1, #88]	; 0x58
   1f1c4:	orr	r0, r0, #4
   1f1c8:	strb	r0, [r1, #88]	; 0x58
   1f1cc:	ldr	r3, [sp, #28]
   1f1d0:	ldrb	r0, [r3, #88]	; 0x58
   1f1d4:	and	r1, r0, #247	; 0xf7
   1f1d8:	strb	r1, [r3, #88]	; 0x58
   1f1dc:	ldr	r1, [r3, #92]	; 0x5c
   1f1e0:	cmp	r1, #2
   1f1e4:	blt	1f290 <__assert_fail@plt+0xd3c8>
   1f1e8:	tst	r0, #4
   1f1ec:	bne	1f284 <__assert_fail@plt+0xd3bc>
   1f1f0:	mov	r0, #32
   1f1f4:	mov	r1, #1
   1f1f8:	mov	r4, #1
   1f1fc:	bl	347bc <__assert_fail@plt+0x228f4>
   1f200:	ldr	r3, [sp, #28]
   1f204:	cmp	r0, #0
   1f208:	str	r0, [r3, #60]	; 0x3c
   1f20c:	beq	1f2a8 <__assert_fail@plt+0xd3e0>
   1f210:	mov	r5, #0
   1f214:	mov	r7, #0
   1f218:	b	1f22c <__assert_fail@plt+0xd364>
   1f21c:	add	r7, r7, #1
   1f220:	add	r5, r5, r8
   1f224:	cmp	r7, #8
   1f228:	beq	1f290 <__assert_fail@plt+0xd3c8>
   1f22c:	mov	r8, #0
   1f230:	b	1f240 <__assert_fail@plt+0xd378>
   1f234:	add	r8, r8, #1
   1f238:	cmp	r8, #32
   1f23c:	beq	1f21c <__assert_fail@plt+0xd354>
   1f240:	add	r6, r5, r8
   1f244:	mov	r0, r6
   1f248:	bl	11d18 <btowc@plt>
   1f24c:	ldr	r3, [sp, #28]
   1f250:	cmn	r0, #1
   1f254:	beq	1f268 <__assert_fail@plt+0xd3a0>
   1f258:	ldr	r1, [r3, #60]	; 0x3c
   1f25c:	ldr	r2, [r1, r7, lsl #2]
   1f260:	orr	r2, r2, r4, lsl r8
   1f264:	str	r2, [r1, r7, lsl #2]
   1f268:	cmp	r6, #127	; 0x7f
   1f26c:	bhi	1f234 <__assert_fail@plt+0xd36c>
   1f270:	cmp	r6, r0
   1f274:	ldrbne	r0, [r3, #88]	; 0x58
   1f278:	orrne	r0, r0, #8
   1f27c:	strbne	r0, [r3, #88]	; 0x58
   1f280:	b	1f234 <__assert_fail@plt+0xd36c>
   1f284:	movw	r0, #32332	; 0x7e4c
   1f288:	movt	r0, #3
   1f28c:	str	r0, [r3, #60]	; 0x3c
   1f290:	ldr	r0, [r3]
   1f294:	ldr	r7, [sp, #20]
   1f298:	cmp	r0, #0
   1f29c:	ldrne	r0, [r3, #32]
   1f2a0:	cmpne	r0, #0
   1f2a4:	bne	1f2c8 <__assert_fail@plt+0xd400>
   1f2a8:	mov	r4, #12
   1f2ac:	mov	r0, r3
   1f2b0:	str	r4, [fp, #-52]	; 0xffffffcc
   1f2b4:	bl	20c3c <__assert_fail@plt+0xed74>
   1f2b8:	mov	r0, #0
   1f2bc:	str	r0, [sl]
   1f2c0:	str	r0, [sl, #4]
   1f2c4:	b	204d8 <__assert_fail@plt+0xe610>
   1f2c8:	movw	r0, #0
   1f2cc:	movw	r1, #0
   1f2d0:	mov	r6, #0
   1f2d4:	movt	r0, #0
   1f2d8:	movt	r1, #0
   1f2dc:	str	r6, [fp, #-52]	; 0xffffffcc
   1f2e0:	orrs	r4, r1, r0
   1f2e4:	beq	1f300 <__assert_fail@plt+0xd438>
   1f2e8:	add	r0, r3, #136	; 0x88
   1f2ec:	mov	r1, #0
   1f2f0:	bl	11ac0 <pthread_mutex_init@plt>
   1f2f4:	ldr	r3, [sp, #28]
   1f2f8:	cmp	r0, #0
   1f2fc:	bne	1f2a8 <__assert_fail@plt+0xd3e0>
   1f300:	vmov.i32	q8, #0	; 0x00000000
   1f304:	add	r1, sp, #32
   1f308:	str	r4, [sp, #8]
   1f30c:	ldr	r4, [sl, #20]
   1f310:	ldr	r2, [sp, #24]
   1f314:	add	r0, r1, #64	; 0x40
   1f318:	vst1.32	{d16-d17}, [r0]
   1f31c:	add	r0, r1, #52	; 0x34
   1f320:	vst1.32	{d16-d17}, [r0]
   1f324:	add	r0, r1, #36	; 0x24
   1f328:	vst1.32	{d16-d17}, [r0]
   1f32c:	add	r0, r1, #20
   1f330:	vst1.32	{d16-d17}, [r0]
   1f334:	add	r0, r1, #4
   1f338:	add	r1, r1, #44	; 0x2c
   1f33c:	vst1.32	{d16-d17}, [r0]
   1f340:	str	r7, [sp, #32]
   1f344:	ubfx	r0, r2, #22, #1
   1f348:	vdup.32	q8, r9
   1f34c:	strb	r0, [sp, #104]	; 0x68
   1f350:	and	r0, r2, #4194304	; 0x400000
   1f354:	str	r4, [sp, #96]	; 0x60
   1f358:	orrs	r5, r0, r4
   1f35c:	str	r0, [sp, #16]
   1f360:	movwne	r5, #1
   1f364:	cmp	r9, #1
   1f368:	strb	r5, [sp, #107]	; 0x6b
   1f36c:	ldr	r0, [r3, #92]	; 0x5c
   1f370:	str	r0, [sp, #112]	; 0x70
   1f374:	ldrb	r2, [r3, #88]	; 0x58
   1f378:	vst1.32	{d16-d17}, [r1]
   1f37c:	ubfx	r1, r2, #3, #1
   1f380:	strb	r1, [sp, #106]	; 0x6a
   1f384:	ubfx	r1, r2, #2, #1
   1f388:	strb	r1, [sp, #105]	; 0x69
   1f38c:	blt	1f404 <__assert_fail@plt+0xd53c>
   1f390:	ldr	r8, [sp, #12]
   1f394:	cmp	r0, #2
   1f398:	blt	1f3c4 <__assert_fail@plt+0xd4fc>
   1f39c:	mov	r6, #12
   1f3a0:	cmn	r9, #-1073741822	; 0xc0000002
   1f3a4:	bhi	1f8ac <__assert_fail@plt+0xd9e4>
   1f3a8:	lsl	r1, r8, #2
   1f3ac:	mov	r0, #0
   1f3b0:	bl	34840 <__assert_fail@plt+0x22978>
   1f3b4:	ldr	r3, [sp, #28]
   1f3b8:	cmp	r0, #0
   1f3bc:	beq	1f8ac <__assert_fail@plt+0xd9e4>
   1f3c0:	str	r0, [sp, #40]	; 0x28
   1f3c4:	cmp	r5, #0
   1f3c8:	mov	r6, #0
   1f3cc:	mov	r5, #0
   1f3d0:	beq	1f3f8 <__assert_fail@plt+0xd530>
   1f3d4:	mov	r0, #0
   1f3d8:	mov	r1, r8
   1f3dc:	bl	34840 <__assert_fail@plt+0x22978>
   1f3e0:	cmp	r0, #0
   1f3e4:	beq	1f8a8 <__assert_fail@plt+0xd9e0>
   1f3e8:	ldr	r3, [sp, #28]
   1f3ec:	mov	r6, r0
   1f3f0:	mov	r5, #1
   1f3f4:	str	r0, [sp, #36]	; 0x24
   1f3f8:	str	r8, [sp, #68]	; 0x44
   1f3fc:	ldr	r0, [r3, #92]	; 0x5c
   1f400:	b	1f408 <__assert_fail@plt+0xd540>
   1f404:	mov	r8, #0
   1f408:	ldr	r1, [sp, #16]
   1f40c:	cmp	r5, #0
   1f410:	moveq	r6, r7
   1f414:	str	r6, [sp, #36]	; 0x24
   1f418:	cmp	r1, #0
   1f41c:	beq	1f500 <__assert_fail@plt+0xd638>
   1f420:	cmp	r0, #2
   1f424:	blt	1f514 <__assert_fail@plt+0xd64c>
   1f428:	add	r0, sp, #32
   1f42c:	bl	24420 <__assert_fail@plt+0x12558>
   1f430:	cmp	r0, #0
   1f434:	bne	1f8a0 <__assert_fail@plt+0xd9d8>
   1f438:	ldr	r1, [sp, #28]
   1f43c:	add	r5, sp, #32
   1f440:	b	1f45c <__assert_fail@plt+0xd594>
   1f444:	mov	r0, r5
   1f448:	str	r4, [sp, #68]	; 0x44
   1f44c:	bl	24420 <__assert_fail@plt+0x12558>
   1f450:	ldr	r1, [sp, #28]
   1f454:	cmp	r0, #0
   1f458:	bne	1f8a0 <__assert_fail@plt+0xd9d8>
   1f45c:	ldr	r0, [sp, #64]	; 0x40
   1f460:	cmp	r0, r9
   1f464:	bge	1f5f0 <__assert_fail@plt+0xd728>
   1f468:	ldr	r0, [r1, #92]	; 0x5c
   1f46c:	ldr	r2, [sp, #60]	; 0x3c
   1f470:	ldr	r1, [sp, #68]	; 0x44
   1f474:	add	r0, r0, r2
   1f478:	cmp	r1, r0
   1f47c:	bgt	1f5f0 <__assert_fail@plt+0xd728>
   1f480:	ldr	r0, [sp, #112]	; 0x70
   1f484:	lsl	r4, r1, #1
   1f488:	cmp	r0, #2
   1f48c:	blt	1f4d8 <__assert_fail@plt+0xd610>
   1f490:	mov	r6, #12
   1f494:	cmn	r4, #-1073741823	; 0xc0000001
   1f498:	bhi	1f8ac <__assert_fail@plt+0xd9e4>
   1f49c:	ldr	r0, [sp, #40]	; 0x28
   1f4a0:	lsl	r8, r1, #3
   1f4a4:	mov	r1, r8
   1f4a8:	bl	34840 <__assert_fail@plt+0x22978>
   1f4ac:	cmp	r0, #0
   1f4b0:	beq	1f8ac <__assert_fail@plt+0xd9e4>
   1f4b4:	str	r0, [sp, #40]	; 0x28
   1f4b8:	ldr	r0, [sp, #44]	; 0x2c
   1f4bc:	cmp	r0, #0
   1f4c0:	beq	1f4d8 <__assert_fail@plt+0xd610>
   1f4c4:	mov	r1, r8
   1f4c8:	bl	34840 <__assert_fail@plt+0x22978>
   1f4cc:	cmp	r0, #0
   1f4d0:	beq	1f8ac <__assert_fail@plt+0xd9e4>
   1f4d4:	str	r0, [sp, #44]	; 0x2c
   1f4d8:	ldrb	r0, [sp, #107]	; 0x6b
   1f4dc:	cmp	r0, #0
   1f4e0:	beq	1f444 <__assert_fail@plt+0xd57c>
   1f4e4:	ldr	r0, [sp, #36]	; 0x24
   1f4e8:	mov	r1, r4
   1f4ec:	bl	34840 <__assert_fail@plt+0x22978>
   1f4f0:	cmp	r0, #0
   1f4f4:	beq	1f8a8 <__assert_fail@plt+0xd9e0>
   1f4f8:	str	r0, [sp, #36]	; 0x24
   1f4fc:	b	1f444 <__assert_fail@plt+0xd57c>
   1f500:	cmp	r0, #2
   1f504:	blt	1f578 <__assert_fail@plt+0xd6b0>
   1f508:	add	r0, sp, #32
   1f50c:	bl	24d20 <__assert_fail@plt+0x12e58>
   1f510:	b	1f5f0 <__assert_fail@plt+0xd728>
   1f514:	cmp	r8, r9
   1f518:	movgt	r8, r9
   1f51c:	cmp	r8, #1
   1f520:	blt	1f5e4 <__assert_fail@plt+0xd71c>
   1f524:	mov	r5, #0
   1f528:	bl	11c4c <__ctype_toupper_loc@plt>
   1f52c:	mov	r1, #0
   1f530:	add	r2, r7, r5
   1f534:	cmp	r4, #0
   1f538:	ldrb	r2, [r2, r1]
   1f53c:	bne	1f570 <__assert_fail@plt+0xd6a8>
   1f540:	ldr	r3, [r0]
   1f544:	ldr	r2, [r3, r2, lsl #2]
   1f548:	ldr	r3, [sp, #36]	; 0x24
   1f54c:	strb	r2, [r3, r1]
   1f550:	add	r2, r1, #1
   1f554:	cmp	r2, r8
   1f558:	bge	1f5dc <__assert_fail@plt+0xd714>
   1f55c:	ldr	r7, [sp, #32]
   1f560:	ldr	r5, [sp, #56]	; 0x38
   1f564:	ldr	r4, [sp, #96]	; 0x60
   1f568:	mov	r1, r2
   1f56c:	b	1f530 <__assert_fail@plt+0xd668>
   1f570:	ldrb	r2, [r4, r2]
   1f574:	b	1f540 <__assert_fail@plt+0xd678>
   1f578:	cmp	r4, #0
   1f57c:	beq	1f800 <__assert_fail@plt+0xd938>
   1f580:	cmp	r8, r9
   1f584:	movgt	r8, r9
   1f588:	cmp	r8, #1
   1f58c:	blt	1f5e4 <__assert_fail@plt+0xd71c>
   1f590:	ldrb	r0, [r7]
   1f594:	cmp	r8, #1
   1f598:	ldrb	r0, [r4, r0]
   1f59c:	strb	r0, [r6]
   1f5a0:	mov	r0, #1
   1f5a4:	beq	1f5e8 <__assert_fail@plt+0xd720>
   1f5a8:	mov	r0, #1
   1f5ac:	ldr	r1, [sp, #32]
   1f5b0:	ldr	r3, [sp, #56]	; 0x38
   1f5b4:	ldr	r7, [sp, #96]	; 0x60
   1f5b8:	ldr	r2, [sp, #36]	; 0x24
   1f5bc:	add	r1, r1, r3
   1f5c0:	ldrb	r1, [r1, r0]
   1f5c4:	ldrb	r1, [r7, r1]
   1f5c8:	strb	r1, [r2, r0]
   1f5cc:	add	r0, r0, #1
   1f5d0:	cmp	r0, r8
   1f5d4:	blt	1f5ac <__assert_fail@plt+0xd6e4>
   1f5d8:	b	1f5e8 <__assert_fail@plt+0xd720>
   1f5dc:	add	r0, r1, #1
   1f5e0:	b	1f5e8 <__assert_fail@plt+0xd720>
   1f5e4:	mov	r0, #0
   1f5e8:	str	r0, [sp, #64]	; 0x40
   1f5ec:	str	r0, [sp, #60]	; 0x3c
   1f5f0:	mov	r5, #0
   1f5f4:	ldr	r4, [sp, #24]
   1f5f8:	sub	r8, fp, #48	; 0x30
   1f5fc:	add	r6, sp, #32
   1f600:	str	r5, [fp, #-52]	; 0xffffffcc
   1f604:	str	r5, [sl, #24]
   1f608:	mov	r0, r8
   1f60c:	mov	r1, r6
   1f610:	ldr	r7, [sl]
   1f614:	orr	r2, r4, #8388608	; 0x800000
   1f618:	str	r4, [r7, #128]	; 0x80
   1f61c:	bl	25190 <__assert_fail@plt+0x132c8>
   1f620:	ldr	r1, [sp, #72]	; 0x48
   1f624:	mov	r2, r8
   1f628:	mov	r3, r4
   1f62c:	str	r5, [sp]
   1f630:	add	r0, r1, r0
   1f634:	mov	r1, sl
   1f638:	str	r0, [sp, #72]	; 0x48
   1f63c:	sub	r0, fp, #52	; 0x34
   1f640:	str	r0, [sp, #4]
   1f644:	mov	r0, r6
   1f648:	bl	24f24 <__assert_fail@plt+0x1305c>
   1f64c:	ldr	r5, [sp, #28]
   1f650:	mov	r4, r0
   1f654:	cmp	r0, #0
   1f658:	bne	1f668 <__assert_fail@plt+0xd7a0>
   1f65c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f660:	cmp	r0, #0
   1f664:	bne	1f938 <__assert_fail@plt+0xda70>
   1f668:	ldr	r1, [r7, #64]	; 0x40
   1f66c:	cmp	r1, #31
   1f670:	beq	1f8d0 <__assert_fail@plt+0xda08>
   1f674:	ldr	r0, [r7, #56]	; 0x38
   1f678:	add	r0, r0, r1, lsl #5
   1f67c:	add	r2, r1, #1
   1f680:	vmov.i32	q8, #0	; 0x00000000
   1f684:	mov	r1, #0
   1f688:	str	r2, [r7, #64]	; 0x40
   1f68c:	mov	r2, #2
   1f690:	add	r6, r0, #4
   1f694:	str	r1, [r0, #20]
   1f698:	str	r1, [r0, #24]
   1f69c:	str	r2, [r0, #28]
   1f6a0:	mov	r0, #28
   1f6a4:	mov	r1, r6
   1f6a8:	vst1.32	{d16-d17}, [r1], r0
   1f6ac:	mvn	r0, #0
   1f6b0:	str	r0, [r1]
   1f6b4:	cmp	r4, #0
   1f6b8:	mov	r0, r6
   1f6bc:	beq	1f710 <__assert_fail@plt+0xd848>
   1f6c0:	ldr	r1, [r7, #64]	; 0x40
   1f6c4:	cmp	r1, #31
   1f6c8:	beq	1f904 <__assert_fail@plt+0xda3c>
   1f6cc:	ldr	r0, [r7, #56]	; 0x38
   1f6d0:	add	r0, r0, r1, lsl #5
   1f6d4:	add	r2, r1, #1
   1f6d8:	mov	r1, #0
   1f6dc:	cmp	r6, #0
   1f6e0:	mvn	r3, #0
   1f6e4:	str	r2, [r7, #64]	; 0x40
   1f6e8:	mov	r2, #16
   1f6ec:	str	r1, [r0, #4]!
   1f6f0:	add	ip, r0, #20
   1f6f4:	stmib	r0, {r4, r6}
   1f6f8:	str	r1, [r0, #12]
   1f6fc:	str	r1, [r0, #16]
   1f700:	stm	ip, {r1, r2, r3}
   1f704:	str	r0, [r4]
   1f708:	beq	1f930 <__assert_fail@plt+0xda68>
   1f70c:	str	r0, [r6]
   1f710:	cmp	r6, #0
   1f714:	cmpne	r0, #0
   1f718:	beq	1f930 <__assert_fail@plt+0xda68>
   1f71c:	str	r0, [r5, #52]	; 0x34
   1f720:	ldr	r9, [sl]
   1f724:	ldr	r0, [r9, #4]
   1f728:	lsl	r0, r0, #2
   1f72c:	bl	34810 <__assert_fail@plt+0x22948>
   1f730:	str	r0, [r9, #12]
   1f734:	ldr	r0, [r9, #4]
   1f738:	lsl	r0, r0, #2
   1f73c:	bl	34810 <__assert_fail@plt+0x22948>
   1f740:	str	r0, [r9, #16]
   1f744:	ldr	r0, [r9, #4]
   1f748:	add	r0, r0, r0, lsl #1
   1f74c:	lsl	r0, r0, #2
   1f750:	bl	34810 <__assert_fail@plt+0x22948>
   1f754:	str	r0, [r9, #20]
   1f758:	ldr	r0, [r9, #4]
   1f75c:	add	r0, r0, r0, lsl #1
   1f760:	lsl	r0, r0, #2
   1f764:	bl	34810 <__assert_fail@plt+0x22948>
   1f768:	str	r0, [r9, #24]
   1f76c:	ldr	r1, [r9, #12]
   1f770:	cmp	r1, #0
   1f774:	ldrne	r1, [r9, #16]
   1f778:	cmpne	r1, #0
   1f77c:	beq	1f790 <__assert_fail@plt+0xd8c8>
   1f780:	cmp	r0, #0
   1f784:	ldrne	r0, [r9, #20]
   1f788:	cmpne	r0, #0
   1f78c:	bne	1f79c <__assert_fail@plt+0xd8d4>
   1f790:	mov	r0, #12
   1f794:	str	r0, [fp, #-52]	; 0xffffffcc
   1f798:	b	1f940 <__assert_fail@plt+0xda78>
   1f79c:	ldr	r0, [sl, #24]
   1f7a0:	lsl	r0, r0, #2
   1f7a4:	bl	34810 <__assert_fail@plt+0x22948>
   1f7a8:	cmp	r0, #0
   1f7ac:	str	r0, [r9, #132]	; 0x84
   1f7b0:	beq	1fbc4 <__assert_fail@plt+0xdcfc>
   1f7b4:	ldr	r1, [sl, #24]
   1f7b8:	cmp	r1, #0
   1f7bc:	beq	1f9f8 <__assert_fail@plt+0xdb30>
   1f7c0:	mov	r2, #0
   1f7c4:	cmp	r1, #4
   1f7c8:	bcc	1f9e8 <__assert_fail@plt+0xdb20>
   1f7cc:	bic	r2, r1, #3
   1f7d0:	mov	r3, #1
   1f7d4:	add	r7, pc, #964	; 0x3c4
   1f7d8:	sub	r6, r2, #4
   1f7dc:	add	r3, r3, r6, lsr #2
   1f7e0:	cmp	r6, #12
   1f7e4:	and	ip, r3, #3
   1f7e8:	bcs	1f80c <__assert_fail@plt+0xd944>
   1f7ec:	vld1.64	{d16-d17}, [r7 :128]
   1f7f0:	mov	r7, #0
   1f7f4:	cmp	ip, #0
   1f7f8:	bne	1f87c <__assert_fail@plt+0xd9b4>
   1f7fc:	b	1f9f0 <__assert_fail@plt+0xdb28>
   1f800:	str	r8, [sp, #64]	; 0x40
   1f804:	str	r8, [sp, #60]	; 0x3c
   1f808:	b	1f5f0 <__assert_fail@plt+0xd728>
   1f80c:	sub	r6, r3, ip
   1f810:	add	r3, pc, #904	; 0x388
   1f814:	vmov.i32	q9, #12	; 0x0000000c
   1f818:	vmov.i32	q10, #8	; 0x00000008
   1f81c:	vmov.i32	q11, #4	; 0x00000004
   1f820:	vmov.i32	q12, #16	; 0x00000010
   1f824:	mov	r7, #0
   1f828:	mov	lr, #64	; 0x40
   1f82c:	mov	r4, r0
   1f830:	vld1.64	{d16-d17}, [r3 :128]
   1f834:	mov	r3, r0
   1f838:	vadd.i32	q13, q8, q9
   1f83c:	add	r5, r3, #48	; 0x30
   1f840:	vadd.i32	q14, q8, q10
   1f844:	vadd.i32	q15, q8, q11
   1f848:	subs	r6, r6, #4
   1f84c:	add	r7, r7, #16
   1f850:	vst1.32	{d26-d27}, [r5]
   1f854:	vst1.32	{d16-d17}, [r4], lr
   1f858:	vadd.i32	q8, q8, q12
   1f85c:	add	r5, r3, #32
   1f860:	add	r3, r3, #16
   1f864:	vst1.32	{d28-d29}, [r5]
   1f868:	vst1.32	{d30-d31}, [r3]
   1f86c:	mov	r3, r4
   1f870:	bne	1f838 <__assert_fail@plt+0xd970>
   1f874:	cmp	ip, #0
   1f878:	beq	1f9f0 <__assert_fail@plt+0xdb28>
   1f87c:	vmov.i32	q9, #4	; 0x00000004
   1f880:	add	r3, r0, r7, lsl #2
   1f884:	rsb	r7, ip, #0
   1f888:	vadd.i32	q10, q8, q9
   1f88c:	vst1.32	{d16-d17}, [r3]!
   1f890:	adds	r7, r7, #1
   1f894:	vorr	q8, q10, q10
   1f898:	bcc	1f888 <__assert_fail@plt+0xd9c0>
   1f89c:	b	1f9f0 <__assert_fail@plt+0xdb28>
   1f8a0:	mov	r6, r0
   1f8a4:	b	1f8ac <__assert_fail@plt+0xd9e4>
   1f8a8:	mov	r6, #12
   1f8ac:	str	r6, [fp, #-52]	; 0xffffffcc
   1f8b0:	b	1f940 <__assert_fail@plt+0xda78>
   1f8b4:	mov	r1, #160	; 0xa0
   1f8b8:	mov	r4, #160	; 0xa0
   1f8bc:	bl	34840 <__assert_fail@plt+0x22978>
   1f8c0:	cmp	r0, #0
   1f8c4:	beq	1f8fc <__assert_fail@plt+0xda34>
   1f8c8:	stm	sl, {r0, r4}
   1f8cc:	b	1f0d8 <__assert_fail@plt+0xd210>
   1f8d0:	mov	r0, #996	; 0x3e4
   1f8d4:	bl	34810 <__assert_fail@plt+0x22948>
   1f8d8:	cmp	r0, #0
   1f8dc:	beq	1f9dc <__assert_fail@plt+0xdb14>
   1f8e0:	ldr	r1, [r7, #56]	; 0x38
   1f8e4:	ldr	r5, [sp, #28]
   1f8e8:	str	r1, [r0]
   1f8ec:	mov	r1, #0
   1f8f0:	str	r1, [r7, #64]	; 0x40
   1f8f4:	str	r0, [r7, #56]	; 0x38
   1f8f8:	b	1f678 <__assert_fail@plt+0xd7b0>
   1f8fc:	mov	r4, #12
   1f900:	b	204d8 <__assert_fail@plt+0xe610>
   1f904:	mov	r0, #996	; 0x3e4
   1f908:	bl	34810 <__assert_fail@plt+0x22948>
   1f90c:	ldr	r5, [sp, #28]
   1f910:	cmp	r0, #0
   1f914:	beq	1f930 <__assert_fail@plt+0xda68>
   1f918:	ldr	r1, [r7, #56]	; 0x38
   1f91c:	str	r1, [r0]
   1f920:	mov	r1, #0
   1f924:	str	r1, [r7, #64]	; 0x40
   1f928:	str	r0, [r7, #56]	; 0x38
   1f92c:	b	1f6d0 <__assert_fail@plt+0xd808>
   1f930:	mov	r0, #12
   1f934:	str	r0, [fp, #-52]	; 0xffffffcc
   1f938:	mov	r0, #0
   1f93c:	str	r0, [r5, #52]	; 0x34
   1f940:	ldr	r4, [sl]
   1f944:	ldr	r0, [r4, #56]	; 0x38
   1f948:	cmp	r0, #0
   1f94c:	beq	1f964 <__assert_fail@plt+0xda9c>
   1f950:	ldr	r5, [r0]
   1f954:	bl	176c0 <__assert_fail@plt+0x57f8>
   1f958:	cmp	r5, #0
   1f95c:	mov	r0, r5
   1f960:	bne	1f950 <__assert_fail@plt+0xda88>
   1f964:	mov	r0, #31
   1f968:	mov	r5, #0
   1f96c:	str	r0, [r4, #64]	; 0x40
   1f970:	str	r5, [r4, #52]	; 0x34
   1f974:	str	r5, [r4, #56]	; 0x38
   1f978:	ldr	r0, [r4, #16]
   1f97c:	bl	176c0 <__assert_fail@plt+0x57f8>
   1f980:	str	r5, [r4, #16]
   1f984:	ldr	r0, [sp, #40]	; 0x28
   1f988:	bl	176c0 <__assert_fail@plt+0x57f8>
   1f98c:	ldr	r0, [sp, #44]	; 0x2c
   1f990:	bl	176c0 <__assert_fail@plt+0x57f8>
   1f994:	ldrb	r0, [sp, #107]	; 0x6b
   1f998:	cmp	r0, #0
   1f99c:	beq	1f9a8 <__assert_fail@plt+0xdae0>
   1f9a0:	ldr	r0, [sp, #36]	; 0x24
   1f9a4:	bl	176c0 <__assert_fail@plt+0x57f8>
   1f9a8:	ldr	r0, [sp, #8]
   1f9ac:	cmp	r0, #0
   1f9b0:	beq	1f9c0 <__assert_fail@plt+0xdaf8>
   1f9b4:	ldr	r0, [sp, #28]
   1f9b8:	add	r0, r0, #136	; 0x88
   1f9bc:	bl	11a48 <pthread_mutex_destroy@plt>
   1f9c0:	ldr	r0, [sp, #28]
   1f9c4:	bl	20c3c <__assert_fail@plt+0xed74>
   1f9c8:	mov	r0, #0
   1f9cc:	str	r0, [sl]
   1f9d0:	str	r0, [sl, #4]
   1f9d4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1f9d8:	b	204d8 <__assert_fail@plt+0xe610>
   1f9dc:	ldr	r5, [sp, #28]
   1f9e0:	mov	r6, #0
   1f9e4:	b	1f6b4 <__assert_fail@plt+0xd7ec>
   1f9e8:	str	r2, [r0, r2, lsl #2]
   1f9ec:	add	r2, r2, #1
   1f9f0:	cmp	r1, r2
   1f9f4:	bne	1f9e8 <__assert_fail@plt+0xdb20>
   1f9f8:	ldr	r2, [r9, #52]	; 0x34
   1f9fc:	ldrb	r1, [r2, #24]
   1fa00:	cmp	r1, #17
   1fa04:	beq	1fa30 <__assert_fail@plt+0xdb68>
   1fa08:	cmp	r1, #4
   1fa0c:	bne	1fa80 <__assert_fail@plt+0xdbb8>
   1fa10:	ldr	r1, [r2, #20]
   1fa14:	mov	r3, #1
   1fa18:	ldr	r0, [r0, r1, lsl #2]
   1fa1c:	str	r0, [r2, #20]
   1fa20:	ldr	r1, [r9, #80]	; 0x50
   1fa24:	orr	r0, r1, r3, lsl r0
   1fa28:	str	r0, [r9, #80]	; 0x50
   1fa2c:	b	1fa80 <__assert_fail@plt+0xdbb8>
   1fa30:	ldr	r1, [r2, #4]
   1fa34:	cmp	r1, #0
   1fa38:	beq	1fa80 <__assert_fail@plt+0xdbb8>
   1fa3c:	ldrb	r3, [r1, #24]
   1fa40:	cmp	r3, #17
   1fa44:	bne	1fa80 <__assert_fail@plt+0xdbb8>
   1fa48:	ldr	r3, [r1, #4]
   1fa4c:	ldr	r1, [r1, #20]
   1fa50:	cmp	r3, #0
   1fa54:	str	r3, [r2, #4]
   1fa58:	strne	r2, [r3]
   1fa5c:	cmp	r1, #31
   1fa60:	ldr	r3, [r2, #20]
   1fa64:	ldr	r3, [r0, r3, lsl #2]
   1fa68:	str	r3, [r0, r1, lsl #2]
   1fa6c:	bgt	1fa80 <__assert_fail@plt+0xdbb8>
   1fa70:	ldr	r0, [r9, #80]	; 0x50
   1fa74:	mov	r3, #1
   1fa78:	bic	r0, r0, r3, lsl r1
   1fa7c:	b	1fa28 <__assert_fail@plt+0xdb60>
   1fa80:	mov	r0, #1
   1fa84:	ldr	r7, [r2, #4]
   1fa88:	cmp	r7, #0
   1fa8c:	bne	1fabc <__assert_fail@plt+0xdbf4>
   1fa90:	mov	r3, #0
   1fa94:	ldr	r7, [r2, #8]
   1fa98:	mov	r1, r2
   1fa9c:	cmp	r7, r3
   1faa0:	cmpne	r7, #0
   1faa4:	bne	1fabc <__assert_fail@plt+0xdbf4>
   1faa8:	ldr	r2, [r1]
   1faac:	mov	r3, r1
   1fab0:	cmp	r2, #0
   1fab4:	bne	1fa94 <__assert_fail@plt+0xdbcc>
   1fab8:	b	1fb60 <__assert_fail@plt+0xdc98>
   1fabc:	ldrb	r1, [r7, #24]
   1fac0:	cmp	r1, #17
   1fac4:	beq	1fb04 <__assert_fail@plt+0xdc3c>
   1fac8:	cmp	r1, #4
   1facc:	mov	r2, r7
   1fad0:	bne	1fa84 <__assert_fail@plt+0xdbbc>
   1fad4:	ldr	r1, [r9, #132]	; 0x84
   1fad8:	mov	r2, r7
   1fadc:	cmp	r1, #0
   1fae0:	beq	1fa84 <__assert_fail@plt+0xdbbc>
   1fae4:	ldr	r2, [r7, #20]
   1fae8:	ldr	r1, [r1, r2, lsl #2]
   1faec:	str	r1, [r7, #20]
   1faf0:	ldr	r2, [r9, #80]	; 0x50
   1faf4:	orr	r1, r2, r0, lsl r1
   1faf8:	str	r1, [r9, #80]	; 0x50
   1fafc:	mov	r2, r7
   1fb00:	b	1fa84 <__assert_fail@plt+0xdbbc>
   1fb04:	ldr	r3, [r7, #4]
   1fb08:	mov	r2, r7
   1fb0c:	cmp	r3, #0
   1fb10:	beq	1fa84 <__assert_fail@plt+0xdbbc>
   1fb14:	ldrb	r1, [r3, #24]
   1fb18:	mov	r2, r7
   1fb1c:	cmp	r1, #17
   1fb20:	bne	1fa84 <__assert_fail@plt+0xdbbc>
   1fb24:	ldr	r1, [r3, #4]
   1fb28:	ldr	r3, [r3, #20]
   1fb2c:	cmp	r1, #0
   1fb30:	str	r1, [r7, #4]
   1fb34:	strne	r7, [r1]
   1fb38:	cmp	r3, #31
   1fb3c:	ldr	r1, [r7, #20]
   1fb40:	ldr	r2, [r9, #132]	; 0x84
   1fb44:	ldr	r1, [r2, r1, lsl #2]
   1fb48:	str	r1, [r2, r3, lsl #2]
   1fb4c:	mov	r2, r7
   1fb50:	bgt	1fa84 <__assert_fail@plt+0xdbbc>
   1fb54:	ldr	r1, [r9, #80]	; 0x50
   1fb58:	bic	r1, r1, r0, lsl r3
   1fb5c:	b	1faf8 <__assert_fail@plt+0xdc30>
   1fb60:	ldr	r1, [sl, #24]
   1fb64:	cmp	r1, #0
   1fb68:	beq	1fb90 <__assert_fail@plt+0xdcc8>
   1fb6c:	ldr	r0, [r9, #132]	; 0x84
   1fb70:	mov	r2, #0
   1fb74:	ldr	r3, [r0, r2, lsl #2]
   1fb78:	cmp	r2, r3
   1fb7c:	bne	1fbb0 <__assert_fail@plt+0xdce8>
   1fb80:	add	r2, r2, #1
   1fb84:	cmp	r1, r2
   1fb88:	bne	1fb74 <__assert_fail@plt+0xdcac>
   1fb8c:	b	1fbb8 <__assert_fail@plt+0xdcf0>
   1fb90:	ldr	r0, [r9, #132]	; 0x84
   1fb94:	b	1fbb8 <__assert_fail@plt+0xdcf0>
   1fb98:	nop	{0}
   1fb9c:	nop	{0}
   1fba0:	andeq	r0, r0, r0
   1fba4:	andeq	r0, r0, r1
   1fba8:	andeq	r0, r0, r2
   1fbac:	andeq	r0, r0, r3
   1fbb0:	cmp	r1, r2
   1fbb4:	bne	1fbc4 <__assert_fail@plt+0xdcfc>
   1fbb8:	bl	176c0 <__assert_fail@plt+0x57f8>
   1fbbc:	mov	r0, #0
   1fbc0:	str	r0, [r9, #132]	; 0x84
   1fbc4:	ldr	r0, [r9, #52]	; 0x34
   1fbc8:	mov	r7, #0
   1fbcc:	sub	r8, fp, #48	; 0x30
   1fbd0:	mov	r4, r0
   1fbd4:	ldr	r0, [r0, #4]
   1fbd8:	cmp	r0, #0
   1fbdc:	bne	1fbd0 <__assert_fail@plt+0xdd08>
   1fbe0:	ldr	r0, [r4, #8]
   1fbe4:	cmp	r0, #0
   1fbe8:	bne	1fbd0 <__assert_fail@plt+0xdd08>
   1fbec:	mov	r2, #0
   1fbf0:	cmp	r2, #0
   1fbf4:	str	r7, [fp, #-48]	; 0xffffffd0
   1fbf8:	beq	1fc20 <__assert_fail@plt+0xdd58>
   1fbfc:	ldrb	r0, [r2, #24]
   1fc00:	cmp	r0, #17
   1fc04:	bne	1fc20 <__assert_fail@plt+0xdd58>
   1fc08:	mov	r0, r8
   1fc0c:	mov	r1, sl
   1fc10:	bl	2953c <__assert_fail@plt+0x17674>
   1fc14:	cmp	r0, #0
   1fc18:	str	r0, [r4, #4]
   1fc1c:	strne	r4, [r0]
   1fc20:	ldr	r2, [r4, #8]
   1fc24:	cmp	r2, #0
   1fc28:	beq	1fc50 <__assert_fail@plt+0xdd88>
   1fc2c:	ldrb	r0, [r2, #24]
   1fc30:	cmp	r0, #17
   1fc34:	bne	1fc50 <__assert_fail@plt+0xdd88>
   1fc38:	mov	r0, r8
   1fc3c:	mov	r1, sl
   1fc40:	bl	2953c <__assert_fail@plt+0x17674>
   1fc44:	cmp	r0, #0
   1fc48:	str	r0, [r4, #8]
   1fc4c:	strne	r4, [r0]
   1fc50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fc54:	cmp	r0, #0
   1fc58:	bne	1f794 <__assert_fail@plt+0xd8cc>
   1fc5c:	ldr	r1, [r4]
   1fc60:	cmp	r1, #0
   1fc64:	beq	1fc84 <__assert_fail@plt+0xddbc>
   1fc68:	ldr	r0, [r1, #8]
   1fc6c:	cmp	r0, r4
   1fc70:	cmpne	r0, #0
   1fc74:	bne	1fbd0 <__assert_fail@plt+0xdd08>
   1fc78:	ldr	r2, [r1, #4]
   1fc7c:	mov	r4, r1
   1fc80:	b	1fbf0 <__assert_fail@plt+0xdd28>
   1fc84:	ldr	r0, [r9, #52]	; 0x34
   1fc88:	mov	r4, r0
   1fc8c:	ldr	r0, [r0, #4]
   1fc90:	cmp	r0, #0
   1fc94:	bne	1fc88 <__assert_fail@plt+0xddc0>
   1fc98:	ldr	r0, [r4, #8]
   1fc9c:	cmp	r0, #0
   1fca0:	bne	1fc88 <__assert_fail@plt+0xddc0>
   1fca4:	ldr	r2, [r4, #24]
   1fca8:	uxtb	r0, r2
   1fcac:	cmp	r0, #16
   1fcb0:	bne	1fccc <__assert_fail@plt+0xde04>
   1fcb4:	ldr	r0, [r4, #4]
   1fcb8:	ldr	r1, [r0, #12]
   1fcbc:	str	r1, [r4, #12]
   1fcc0:	ldr	r0, [r0, #28]
   1fcc4:	str	r0, [r4, #28]
   1fcc8:	b	1fd0c <__assert_fail@plt+0xde44>
   1fccc:	str	r4, [r4, #12]
   1fcd0:	mov	r0, r9
   1fcd4:	ldr	r1, [r4, #20]
   1fcd8:	bl	297f8 <__assert_fail@plt+0x17930>
   1fcdc:	cmn	r0, #1
   1fce0:	str	r0, [r4, #28]
   1fce4:	beq	1f790 <__assert_fail@plt+0xd8c8>
   1fce8:	ldrb	r1, [r4, #24]
   1fcec:	cmp	r1, #12
   1fcf0:	bne	1fd0c <__assert_fail@plt+0xde44>
   1fcf4:	ldr	r1, [r9]
   1fcf8:	ldr	r2, [r4, #20]
   1fcfc:	add	r0, r1, r0, lsl #3
   1fd00:	ldr	r1, [r0, #4]
   1fd04:	bfi	r1, r2, #8, #10
   1fd08:	str	r1, [r0, #4]
   1fd0c:	ldr	r1, [r4]
   1fd10:	cmp	r1, #0
   1fd14:	beq	1fd38 <__assert_fail@plt+0xde70>
   1fd18:	ldr	r0, [r1, #8]
   1fd1c:	cmp	r0, r4
   1fd20:	mov	r4, r1
   1fd24:	beq	1fca4 <__assert_fail@plt+0xdddc>
   1fd28:	cmp	r0, #0
   1fd2c:	mov	r4, r1
   1fd30:	beq	1fca4 <__assert_fail@plt+0xdddc>
   1fd34:	b	1fc88 <__assert_fail@plt+0xddc0>
   1fd38:	ldr	r4, [r9, #52]	; 0x34
   1fd3c:	ldrb	r0, [r4, #24]
   1fd40:	cmp	r0, #16
   1fd44:	beq	1fd5c <__assert_fail@plt+0xde94>
   1fd48:	cmp	r0, #11
   1fd4c:	bne	1fd6c <__assert_fail@plt+0xdea4>
   1fd50:	ldr	r0, [r4, #4]
   1fd54:	str	r4, [r0, #16]
   1fd58:	b	1fd90 <__assert_fail@plt+0xdec8>
   1fd5c:	ldmib	r4, {r0, r1}
   1fd60:	ldr	r2, [r1, #12]
   1fd64:	str	r2, [r0, #16]
   1fd68:	b	1fd88 <__assert_fail@plt+0xdec0>
   1fd6c:	ldr	r0, [r4, #4]
   1fd70:	cmp	r0, #0
   1fd74:	ldrne	r1, [r4, #16]
   1fd78:	strne	r1, [r0, #16]
   1fd7c:	ldr	r1, [r4, #8]
   1fd80:	cmp	r1, #0
   1fd84:	beq	1fd90 <__assert_fail@plt+0xdec8>
   1fd88:	ldr	r2, [r4, #16]
   1fd8c:	str	r2, [r1, #16]
   1fd90:	mov	r1, r4
   1fd94:	cmp	r0, #0
   1fd98:	bne	1fdb0 <__assert_fail@plt+0xdee8>
   1fd9c:	b	1fe04 <__assert_fail@plt+0xdf3c>
   1fda0:	ldr	r0, [r1, #4]
   1fda4:	str	r1, [r0, #16]
   1fda8:	cmp	r0, #0
   1fdac:	beq	1fe04 <__assert_fail@plt+0xdf3c>
   1fdb0:	mov	r1, r0
   1fdb4:	ldrb	r0, [r0, #24]
   1fdb8:	cmp	r0, #16
   1fdbc:	beq	1fde8 <__assert_fail@plt+0xdf20>
   1fdc0:	cmp	r0, #11
   1fdc4:	beq	1fda0 <__assert_fail@plt+0xded8>
   1fdc8:	ldr	r0, [r1, #4]
   1fdcc:	cmp	r0, #0
   1fdd0:	ldrne	r2, [r1, #16]
   1fdd4:	strne	r2, [r0, #16]
   1fdd8:	ldr	r2, [r1, #8]
   1fddc:	cmp	r2, #0
   1fde0:	beq	1fda8 <__assert_fail@plt+0xdee0>
   1fde4:	b	1fdf4 <__assert_fail@plt+0xdf2c>
   1fde8:	ldmib	r1, {r0, r2}
   1fdec:	ldr	r3, [r2, #12]
   1fdf0:	str	r3, [r0, #16]
   1fdf4:	ldr	r3, [r1, #16]
   1fdf8:	str	r3, [r2, #16]
   1fdfc:	cmp	r0, #0
   1fe00:	bne	1fdb0 <__assert_fail@plt+0xdee8>
   1fe04:	mov	r3, #0
   1fe08:	ldr	r0, [r1, #8]
   1fe0c:	mov	r2, r1
   1fe10:	cmp	r0, r3
   1fe14:	cmpne	r0, #0
   1fe18:	bne	1fdb0 <__assert_fail@plt+0xdee8>
   1fe1c:	ldr	r1, [r2]
   1fe20:	mov	r3, r2
   1fe24:	cmp	r1, #0
   1fe28:	bne	1fe08 <__assert_fail@plt+0xdf40>
   1fe2c:	mov	r0, r9
   1fe30:	mov	r1, r4
   1fe34:	bl	293a0 <__assert_fail@plt+0x174d8>
   1fe38:	cmp	r0, #0
   1fe3c:	beq	1fe5c <__assert_fail@plt+0xdf94>
   1fe40:	b	1f794 <__assert_fail@plt+0xd8cc>
   1fe44:	mov	r0, r9
   1fe48:	mov	r1, r7
   1fe4c:	bl	293a0 <__assert_fail@plt+0x174d8>
   1fe50:	cmp	r0, #0
   1fe54:	mov	r4, r7
   1fe58:	bne	1f794 <__assert_fail@plt+0xd8cc>
   1fe5c:	ldr	r7, [r4, #4]
   1fe60:	cmp	r7, #0
   1fe64:	bne	1fe44 <__assert_fail@plt+0xdf7c>
   1fe68:	mov	r1, #0
   1fe6c:	ldr	r7, [r4, #8]
   1fe70:	mov	r0, r4
   1fe74:	cmp	r7, r1
   1fe78:	cmpne	r7, #0
   1fe7c:	bne	1fe44 <__assert_fail@plt+0xdf7c>
   1fe80:	ldr	r4, [r0]
   1fe84:	mov	r1, r0
   1fe88:	cmp	r4, #0
   1fe8c:	bne	1fe6c <__assert_fail@plt+0xdfa4>
   1fe90:	mov	r5, #0
   1fe94:	sub	r4, fp, #48	; 0x30
   1fe98:	mov	r7, #0
   1fe9c:	b	1fecc <__assert_fail@plt+0xe004>
   1fea0:	mov	r1, r5
   1fea4:	ldr	r2, [r9, #8]
   1fea8:	add	r0, r7, #1
   1feac:	subs	r3, r0, r2
   1feb0:	mov	r7, r3
   1feb4:	movwne	r3, #1
   1feb8:	movne	r7, r0
   1febc:	tst	r1, #1
   1fec0:	and	r5, r1, r3
   1fec4:	cmpeq	r0, r2
   1fec8:	beq	1ff28 <__assert_fail@plt+0xe060>
   1fecc:	ldr	r0, [r9, #24]
   1fed0:	add	r6, r7, r7, lsl #1
   1fed4:	add	r0, r0, r6, lsl #2
   1fed8:	ldr	r0, [r0, #4]
   1fedc:	cmp	r0, #0
   1fee0:	bne	1fea0 <__assert_fail@plt+0xdfd8>
   1fee4:	mov	r0, r4
   1fee8:	mov	r1, r9
   1feec:	mov	r2, r7
   1fef0:	mov	r3, #1
   1fef4:	bl	299c8 <__assert_fail@plt+0x17b00>
   1fef8:	cmp	r0, #0
   1fefc:	bne	1f794 <__assert_fail@plt+0xd8cc>
   1ff00:	ldr	r0, [r9, #24]
   1ff04:	mov	r1, r5
   1ff08:	add	r0, r0, r6, lsl #2
   1ff0c:	ldr	r0, [r0, #4]
   1ff10:	cmp	r0, #0
   1ff14:	bne	1fea4 <__assert_fail@plt+0xdfdc>
   1ff18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ff1c:	bl	176c0 <__assert_fail@plt+0x57f8>
   1ff20:	mov	r1, #1
   1ff24:	b	1fea4 <__assert_fail@plt+0xdfdc>
   1ff28:	ldrb	r1, [sl, #28]
   1ff2c:	str	sl, [sp, #12]
   1ff30:	tst	r1, #16
   1ff34:	bne	1ff54 <__assert_fail@plt+0xe08c>
   1ff38:	ldr	r1, [sp, #12]
   1ff3c:	ldr	r1, [r1, #24]
   1ff40:	cmp	r1, #0
   1ff44:	beq	1ff54 <__assert_fail@plt+0xe08c>
   1ff48:	ldrb	r1, [r9, #88]	; 0x58
   1ff4c:	tst	r1, #1
   1ff50:	bne	1ff60 <__assert_fail@plt+0xe098>
   1ff54:	ldr	r1, [r9, #76]	; 0x4c
   1ff58:	cmp	r1, #0
   1ff5c:	beq	200a8 <__assert_fail@plt+0xe1e0>
   1ff60:	add	r0, r0, r0, lsl #1
   1ff64:	lsl	r0, r0, #2
   1ff68:	bl	34810 <__assert_fail@plt+0x22948>
   1ff6c:	cmp	r0, #0
   1ff70:	str	r0, [r9, #28]
   1ff74:	beq	204e4 <__assert_fail@plt+0xe61c>
   1ff78:	ldr	r1, [r9, #8]
   1ff7c:	cmp	r1, #0
   1ff80:	beq	200a8 <__assert_fail@plt+0xe1e0>
   1ff84:	mov	r1, #0
   1ff88:	str	r1, [r0]
   1ff8c:	str	r1, [r0, #4]
   1ff90:	str	r1, [r0, #8]
   1ff94:	ldr	r0, [r9, #8]
   1ff98:	cmp	r0, #2
   1ff9c:	bcc	1ffcc <__assert_fail@plt+0xe104>
   1ffa0:	mov	r2, #1
   1ffa4:	mov	r3, #12
   1ffa8:	ldr	r0, [r9, #28]
   1ffac:	add	r2, r2, #1
   1ffb0:	str	r1, [r0, r3]!
   1ffb4:	add	r3, r3, #12
   1ffb8:	str	r1, [r0, #4]
   1ffbc:	str	r1, [r0, #8]
   1ffc0:	ldr	r0, [r9, #8]
   1ffc4:	cmp	r2, r0
   1ffc8:	bcc	1ffa8 <__assert_fail@plt+0xe0e0>
   1ffcc:	cmp	r0, #0
   1ffd0:	beq	200a8 <__assert_fail@plt+0xe1e0>
   1ffd4:	ldr	ip, [r9, #24]
   1ffd8:	mov	r6, #0
   1ffdc:	b	1fff0 <__assert_fail@plt+0xe128>
   1ffe0:	ldr	r0, [r9, #8]
   1ffe4:	add	r6, r6, #1
   1ffe8:	cmp	r6, r0
   1ffec:	bcs	200a8 <__assert_fail@plt+0xe1e0>
   1fff0:	add	lr, r6, r6, lsl #1
   1fff4:	add	r2, ip, lr, lsl #2
   1fff8:	ldr	r3, [r2, #4]
   1fffc:	cmp	r3, #1
   20000:	blt	1ffe4 <__assert_fail@plt+0xe11c>
   20004:	ldr	r1, [r2, #8]
   20008:	mov	r5, #0
   2000c:	str	lr, [sp, #24]
   20010:	str	r1, [sp, #20]
   20014:	b	20040 <__assert_fail@plt+0xe178>
   20018:	add	r0, r4, r0, lsl #2
   2001c:	ldr	r0, [r0, #8]
   20020:	add	r3, r2, #1
   20024:	add	r5, r5, #1
   20028:	str	r3, [r8]
   2002c:	str	r6, [r0, r2, lsl #2]
   20030:	add	r0, ip, lr, lsl #2
   20034:	ldr	r0, [r0, #4]
   20038:	cmp	r5, r0
   2003c:	bge	1ffe0 <__assert_fail@plt+0xe118>
   20040:	ldr	r0, [r1, r5, lsl #2]
   20044:	ldr	r4, [r9, #28]
   20048:	add	r0, r0, r0, lsl #1
   2004c:	mov	r3, r4
   20050:	ldr	r7, [r3, r0, lsl #2]!
   20054:	mov	r8, r3
   20058:	ldr	r2, [r8, #4]!
   2005c:	cmp	r7, r2
   20060:	bne	20018 <__assert_fail@plt+0xe150>
   20064:	mov	r1, #2
   20068:	mov	sl, r9
   2006c:	add	r9, r4, r0, lsl #2
   20070:	add	r1, r1, r7, lsl #1
   20074:	str	r1, [r3]
   20078:	lsl	r1, r1, #2
   2007c:	ldr	r0, [r9, #8]!
   20080:	bl	34840 <__assert_fail@plt+0x22978>
   20084:	cmp	r0, #0
   20088:	beq	204e4 <__assert_fail@plt+0xe61c>
   2008c:	str	r0, [r9]
   20090:	ldr	lr, [sp, #24]
   20094:	ldr	r1, [sp, #20]
   20098:	mov	r9, sl
   2009c:	ldr	ip, [sl, #24]
   200a0:	ldr	r2, [r8]
   200a4:	b	20020 <__assert_fail@plt+0xe158>
   200a8:	mov	r0, #0
   200ac:	ldr	sl, [sp, #12]
   200b0:	str	r0, [fp, #-52]	; 0xffffffcc
   200b4:	ldr	r0, [sp, #16]
   200b8:	cmp	r0, #0
   200bc:	bne	20204 <__assert_fail@plt+0xe33c>
   200c0:	ldr	r0, [sp, #28]
   200c4:	ldrb	r2, [r0, #88]	; 0x58
   200c8:	ands	r0, r2, #4
   200cc:	beq	20204 <__assert_fail@plt+0xe33c>
   200d0:	ldr	r0, [sl, #20]
   200d4:	cmp	r0, #0
   200d8:	bne	20204 <__assert_fail@plt+0xe33c>
   200dc:	ldr	r5, [sp, #28]
   200e0:	mov	r9, #0
   200e4:	ldr	r7, [r5, #8]
   200e8:	cmp	r7, #0
   200ec:	beq	2010c <__assert_fail@plt+0xe244>
   200f0:	ldr	r3, [r5]
   200f4:	mov	r8, #0
   200f8:	mov	ip, #1
   200fc:	mov	lr, #139	; 0x8b
   20100:	mov	r6, #0
   20104:	mov	r4, #0
   20108:	b	2015c <__assert_fail@plt+0xe294>
   2010c:	mov	r8, #0
   20110:	mov	r0, #1
   20114:	and	r1, r2, #249	; 0xf9
   20118:	str	r0, [r5, #92]	; 0x5c
   2011c:	ldr	r0, [r5, #76]	; 0x4c
   20120:	cmp	r0, #0
   20124:	movwgt	r9, #1
   20128:	orr	r0, r8, r9
   2012c:	and	r0, r0, #1
   20130:	orr	r0, r1, r0, lsl #1
   20134:	strb	r0, [r5, #88]	; 0x58
   20138:	b	20204 <__assert_fail@plt+0xe33c>
   2013c:	ldrsb	r0, [r5]
   20140:	cmp	r0, #0
   20144:	mov	r0, #0
   20148:	movwmi	r0, #1
   2014c:	orr	r6, r6, r0
   20150:	add	r4, r4, #1
   20154:	cmp	r7, r4
   20158:	beq	204f4 <__assert_fail@plt+0xe62c>
   2015c:	add	r5, r3, r4, lsl #3
   20160:	ldrb	r1, [r5, #4]
   20164:	sub	r1, r1, #1
   20168:	cmp	r1, #11
   2016c:	bhi	20584 <__assert_fail@plt+0xe6bc>
   20170:	add	r0, pc, #0
   20174:	ldr	pc, [r0, r1, lsl #2]
   20178:	andeq	r0, r2, ip, lsr r1
   2017c:	andeq	r0, r2, r0, asr r1
   20180:	andeq	r0, r2, r8, lsr #3
   20184:	andeq	r0, r2, r0, asr r1
   20188:	strdeq	r0, [r2], -ip
   2018c:	andeq	r0, r2, r4, lsl #4
   20190:	andeq	r0, r2, r4, lsl #11
   20194:	andeq	r0, r2, r0, asr r1
   20198:	andeq	r0, r2, r0, asr r1
   2019c:	andeq	r0, r2, r0, asr r1
   201a0:	andeq	r0, r2, r0, asr r1
   201a4:	ldrdeq	r0, [r2], -ip
   201a8:	ldr	r5, [r3, r4, lsl #3]
   201ac:	ldr	r0, [r5, #16]
   201b0:	cmp	r0, #0
   201b4:	bne	20204 <__assert_fail@plt+0xe33c>
   201b8:	ldr	r0, [r5, #20]
   201bc:	cmp	r0, #0
   201c0:	ldreq	r0, [r5, #24]
   201c4:	cmpeq	r0, #0
   201c8:	bne	20204 <__assert_fail@plt+0xe33c>
   201cc:	ldr	r0, [r5, #28]
   201d0:	cmp	r0, #0
   201d4:	beq	20150 <__assert_fail@plt+0xe288>
   201d8:	b	20204 <__assert_fail@plt+0xe33c>
   201dc:	ldr	r0, [r3, r4, lsl #3]
   201e0:	sub	r0, r0, #16
   201e4:	ror	r1, r0, #4
   201e8:	cmp	r1, #7
   201ec:	bhi	20204 <__assert_fail@plt+0xe33c>
   201f0:	tst	lr, ip, lsl r1
   201f4:	bne	20150 <__assert_fail@plt+0xe288>
   201f8:	b	20204 <__assert_fail@plt+0xe33c>
   201fc:	mov	r8, #1
   20200:	b	20150 <__assert_fail@plt+0xe288>
   20204:	ldr	lr, [sp, #28]
   20208:	ldr	r1, [lr, #52]	; 0x34
   2020c:	ldr	r0, [lr, #24]
   20210:	ldr	r1, [r1, #12]
   20214:	ldr	r1, [r1, #28]
   20218:	str	r1, [lr, #72]	; 0x48
   2021c:	add	r1, r1, r1, lsl #1
   20220:	add	r5, r0, r1, lsl #2
   20224:	mov	r4, r5
   20228:	ldr	r7, [r4, #4]!
   2022c:	str	r7, [fp, #-44]	; 0xffffffd4
   20230:	ldr	r0, [r4]
   20234:	cmp	r0, #1
   20238:	blt	20384 <__assert_fail@plt+0xe4bc>
   2023c:	lsl	r0, r7, #2
   20240:	str	r7, [fp, #-48]	; 0xffffffd0
   20244:	bl	34810 <__assert_fail@plt+0x22948>
   20248:	cmp	r0, #0
   2024c:	str	r0, [fp, #-40]	; 0xffffffd8
   20250:	beq	2056c <__assert_fail@plt+0xe6a4>
   20254:	mov	r6, r0
   20258:	ldr	r0, [r4]
   2025c:	ldr	r1, [r5, #8]
   20260:	lsl	r2, r0, #2
   20264:	mov	r0, r6
   20268:	bl	11ab4 <memcpy@plt>
   2026c:	ldr	lr, [sp, #28]
   20270:	mov	r0, #0
   20274:	cmp	r7, #1
   20278:	str	r0, [fp, #-32]	; 0xffffffe0
   2027c:	ldrge	r0, [lr, #76]	; 0x4c
   20280:	cmpge	r0, #1
   20284:	blt	20398 <__assert_fail@plt+0xe4d0>
   20288:	mov	r0, #0
   2028c:	sub	r8, fp, #48	; 0x30
   20290:	mov	r9, #1
   20294:	ldr	r1, [r6, r0, lsl #2]
   20298:	ldr	r2, [lr]
   2029c:	add	r3, r2, r1, lsl #3
   202a0:	ldrb	r3, [r3, #4]
   202a4:	cmp	r3, #4
   202a8:	bne	20370 <__assert_fail@plt+0xe4a8>
   202ac:	mov	r3, #0
   202b0:	cmp	r7, #1
   202b4:	bge	202c8 <__assert_fail@plt+0xe400>
   202b8:	b	202ec <__assert_fail@plt+0xe424>
   202bc:	add	r3, r3, #1
   202c0:	cmp	r7, r3
   202c4:	beq	20370 <__assert_fail@plt+0xe4a8>
   202c8:	ldr	r5, [r6, r3, lsl #2]
   202cc:	add	r4, r2, r5, lsl #3
   202d0:	ldrb	r4, [r4, #4]
   202d4:	cmp	r4, #9
   202d8:	bne	202bc <__assert_fail@plt+0xe3f4>
   202dc:	ldr	r4, [r2, r1, lsl #3]
   202e0:	ldr	r5, [r2, r5, lsl #3]
   202e4:	cmp	r5, r4
   202e8:	bne	202bc <__assert_fail@plt+0xe3f4>
   202ec:	cmp	r3, r7
   202f0:	beq	20370 <__assert_fail@plt+0xe4a8>
   202f4:	ldr	r2, [lr, #20]
   202f8:	add	r1, r1, r1, lsl #1
   202fc:	cmp	r7, #1
   20300:	add	r1, r2, r1, lsl #2
   20304:	ldr	r1, [r1, #8]
   20308:	ldr	ip, [r1]
   2030c:	blt	20348 <__assert_fail@plt+0xe480>
   20310:	mov	r2, #0
   20314:	subs	r3, r7, #1
   20318:	beq	2033c <__assert_fail@plt+0xe474>
   2031c:	add	r5, r2, r3
   20320:	lsr	r4, r5, #1
   20324:	ldr	r1, [r6, r4, lsl #2]
   20328:	cmp	r1, ip
   2032c:	addlt	r2, r9, r5, lsr #1
   20330:	movge	r3, r4
   20334:	cmp	r2, r3
   20338:	bcc	2031c <__assert_fail@plt+0xe454>
   2033c:	ldr	r1, [r6, r2, lsl #2]
   20340:	cmp	r1, ip
   20344:	beq	20370 <__assert_fail@plt+0xe4a8>
   20348:	ldr	r0, [lr, #24]
   2034c:	add	r1, ip, ip, lsl #1
   20350:	add	r1, r0, r1, lsl #2
   20354:	mov	r0, r8
   20358:	bl	2a078 <__assert_fail@plt+0x181b0>
   2035c:	cmp	r0, #0
   20360:	bne	20460 <__assert_fail@plt+0xe598>
   20364:	ldr	r7, [fp, #-44]	; 0xffffffd4
   20368:	ldr	lr, [sp, #28]
   2036c:	mov	r0, #0
   20370:	add	r0, r0, #1
   20374:	cmp	r0, r7
   20378:	bge	20398 <__assert_fail@plt+0xe4d0>
   2037c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   20380:	b	20294 <__assert_fail@plt+0xe3cc>
   20384:	mov	r0, #0
   20388:	str	r0, [fp, #-44]	; 0xffffffd4
   2038c:	str	r0, [fp, #-48]	; 0xffffffd0
   20390:	str	r0, [fp, #-40]	; 0xffffffd8
   20394:	str	r0, [fp, #-32]	; 0xffffffe0
   20398:	sub	r0, fp, #32
   2039c:	sub	r2, fp, #48	; 0x30
   203a0:	mov	r1, lr
   203a4:	mov	r3, #0
   203a8:	bl	2a378 <__assert_fail@plt+0x184b0>
   203ac:	ldr	r1, [sp, #28]
   203b0:	cmp	r0, #0
   203b4:	str	r0, [r1, #36]	; 0x24
   203b8:	beq	20440 <__assert_fail@plt+0xe578>
   203bc:	ldrsb	r2, [r0, #52]	; 0x34
   203c0:	cmn	r2, #1
   203c4:	ble	203d8 <__assert_fail@plt+0xe510>
   203c8:	str	r0, [r1, #40]	; 0x28
   203cc:	str	r0, [r1, #44]	; 0x2c
   203d0:	str	r0, [r1, #48]	; 0x30
   203d4:	b	20454 <__assert_fail@plt+0xe58c>
   203d8:	sub	r4, fp, #32
   203dc:	sub	r6, fp, #48	; 0x30
   203e0:	mov	r3, #1
   203e4:	mov	r0, r4
   203e8:	mov	r2, r6
   203ec:	bl	2a378 <__assert_fail@plt+0x184b0>
   203f0:	ldr	r1, [sp, #28]
   203f4:	mov	r2, r6
   203f8:	mov	r3, #2
   203fc:	str	r0, [r1, #40]	; 0x28
   20400:	ldr	r1, [sp, #28]
   20404:	mov	r0, r4
   20408:	bl	2a378 <__assert_fail@plt+0x184b0>
   2040c:	ldr	r1, [sp, #28]
   20410:	mov	r2, r6
   20414:	mov	r3, #6
   20418:	str	r0, [r1, #44]	; 0x2c
   2041c:	ldr	r1, [sp, #28]
   20420:	mov	r0, r4
   20424:	bl	2a378 <__assert_fail@plt+0x184b0>
   20428:	ldr	r2, [sp, #28]
   2042c:	str	r0, [r2, #48]	; 0x30
   20430:	ldr	r1, [r2, #40]	; 0x28
   20434:	cmp	r1, #0
   20438:	cmpne	r0, #0
   2043c:	bne	20448 <__assert_fail@plt+0xe580>
   20440:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20444:	b	20460 <__assert_fail@plt+0xe598>
   20448:	ldr	r0, [r2, #44]	; 0x2c
   2044c:	cmp	r0, #0
   20450:	beq	20440 <__assert_fail@plt+0xe578>
   20454:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20458:	bl	176c0 <__assert_fail@plt+0x57f8>
   2045c:	mov	r0, #0
   20460:	str	r0, [fp, #-52]	; 0xffffffcc
   20464:	ldr	r5, [sl]
   20468:	ldr	r0, [r5, #56]	; 0x38
   2046c:	cmp	r0, #0
   20470:	beq	20488 <__assert_fail@plt+0xe5c0>
   20474:	ldr	r4, [r0]
   20478:	bl	176c0 <__assert_fail@plt+0x57f8>
   2047c:	cmp	r4, #0
   20480:	mov	r0, r4
   20484:	bne	20474 <__assert_fail@plt+0xe5ac>
   20488:	mov	r0, #31
   2048c:	mov	r4, #0
   20490:	str	r0, [r5, #64]	; 0x40
   20494:	str	r4, [r5, #52]	; 0x34
   20498:	str	r4, [r5, #56]	; 0x38
   2049c:	ldr	r0, [r5, #16]
   204a0:	bl	176c0 <__assert_fail@plt+0x57f8>
   204a4:	str	r4, [r5, #16]
   204a8:	ldr	r0, [sp, #40]	; 0x28
   204ac:	bl	176c0 <__assert_fail@plt+0x57f8>
   204b0:	ldr	r0, [sp, #44]	; 0x2c
   204b4:	bl	176c0 <__assert_fail@plt+0x57f8>
   204b8:	ldrb	r0, [sp, #107]	; 0x6b
   204bc:	cmp	r0, #0
   204c0:	beq	204cc <__assert_fail@plt+0xe604>
   204c4:	ldr	r0, [sp, #36]	; 0x24
   204c8:	bl	176c0 <__assert_fail@plt+0x57f8>
   204cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   204d0:	cmp	r0, #0
   204d4:	bne	1f9a8 <__assert_fail@plt+0xdae0>
   204d8:	mov	r0, r4
   204dc:	sub	sp, fp, #28
   204e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204e4:	ldr	sl, [sp, #12]
   204e8:	mov	r0, #12
   204ec:	str	r0, [fp, #-52]	; 0xffffffcc
   204f0:	b	1f940 <__assert_fail@plt+0xda78>
   204f4:	orr	r0, r6, r8
   204f8:	tst	r0, #1
   204fc:	beq	2055c <__assert_fail@plt+0xe694>
   20500:	ldr	r5, [sp, #28]
   20504:	mov	r2, #0
   20508:	mov	r7, #7
   2050c:	add	r3, r3, r2, lsl #3
   20510:	ldr	r6, [r3, #4]
   20514:	uxtb	r1, r6
   20518:	cmp	r1, #5
   2051c:	beq	2053c <__assert_fail@plt+0xe674>
   20520:	cmp	r1, #1
   20524:	bne	20544 <__assert_fail@plt+0xe67c>
   20528:	ldrsb	r0, [r3]
   2052c:	cmn	r0, #1
   20530:	bicle	r0, r6, #2097152	; 0x200000
   20534:	strle	r0, [r3, #4]
   20538:	b	20544 <__assert_fail@plt+0xe67c>
   2053c:	bfi	r6, r7, #0, #8
   20540:	str	r6, [r3, #4]
   20544:	ldr	r0, [r5, #8]
   20548:	add	r2, r2, #1
   2054c:	cmp	r2, r0
   20550:	bcs	20564 <__assert_fail@plt+0xe69c>
   20554:	ldr	r3, [r5]
   20558:	b	2050c <__assert_fail@plt+0xe644>
   2055c:	ldr	r5, [sp, #28]
   20560:	b	20110 <__assert_fail@plt+0xe248>
   20564:	ldrb	r2, [r5, #88]	; 0x58
   20568:	b	20110 <__assert_fail@plt+0xe248>
   2056c:	mov	r0, #0
   20570:	str	r0, [fp, #-48]	; 0xffffffd0
   20574:	str	r0, [fp, #-44]	; 0xffffffd4
   20578:	mov	r0, #12
   2057c:	str	r0, [fp, #-32]	; 0xffffffe0
   20580:	b	20460 <__assert_fail@plt+0xe598>
   20584:	bl	11e8c <abort@plt>
   20588:	movw	r2, #37868	; 0x93ec
   2058c:	movt	r2, #4
   20590:	ldr	r1, [r2]
   20594:	str	r0, [r2]
   20598:	mov	r0, r1
   2059c:	bx	lr
   205a0:	push	{r4, r5, r6, sl, fp, lr}
   205a4:	add	fp, sp, #16
   205a8:	ldr	r5, [r0, #16]
   205ac:	ldr	r6, [r0]
   205b0:	mov	r4, r0
   205b4:	mov	r1, #0
   205b8:	mov	r2, #256	; 0x100
   205bc:	mov	r0, r5
   205c0:	bl	11d0c <memset@plt>
   205c4:	ldr	r1, [r6, #36]	; 0x24
   205c8:	mov	r0, r4
   205cc:	mov	r2, r5
   205d0:	bl	20638 <__assert_fail@plt+0xe770>
   205d4:	ldr	r0, [r6, #36]	; 0x24
   205d8:	ldr	r1, [r6, #40]	; 0x28
   205dc:	cmp	r0, r1
   205e0:	beq	205f4 <__assert_fail@plt+0xe72c>
   205e4:	mov	r0, r4
   205e8:	mov	r2, r5
   205ec:	bl	20638 <__assert_fail@plt+0xe770>
   205f0:	ldr	r0, [r6, #36]	; 0x24
   205f4:	ldr	r1, [r6, #44]	; 0x2c
   205f8:	cmp	r0, r1
   205fc:	beq	20610 <__assert_fail@plt+0xe748>
   20600:	mov	r0, r4
   20604:	mov	r2, r5
   20608:	bl	20638 <__assert_fail@plt+0xe770>
   2060c:	ldr	r0, [r6, #36]	; 0x24
   20610:	ldr	r1, [r6, #48]	; 0x30
   20614:	cmp	r0, r1
   20618:	movne	r0, r4
   2061c:	movne	r2, r5
   20620:	blne	20638 <__assert_fail@plt+0xe770>
   20624:	ldrb	r0, [r4, #28]
   20628:	orr	r0, r0, #8
   2062c:	strb	r0, [r4, #28]
   20630:	mov	r0, #0
   20634:	pop	{r4, r5, r6, sl, fp, pc}
   20638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2063c:	add	fp, sp, #28
   20640:	sub	sp, sp, #316	; 0x13c
   20644:	ldr	sl, [r0]
   20648:	str	r0, [sp, #20]
   2064c:	mov	r3, #0
   20650:	str	r2, [sp, #36]	; 0x24
   20654:	ldr	r0, [sl, #92]	; 0x5c
   20658:	cmp	r0, #1
   2065c:	bne	2066c <__assert_fail@plt+0xe7a4>
   20660:	ldr	r0, [sp, #20]
   20664:	ldrb	r0, [r0, #14]
   20668:	ubfx	r3, r0, #6, #1
   2066c:	ldr	r0, [r1, #8]
   20670:	cmp	r0, #1
   20674:	blt	20a44 <__assert_fail@plt+0xeb7c>
   20678:	add	r0, sp, #40	; 0x28
   2067c:	mov	r4, #1
   20680:	mov	r2, #0
   20684:	str	r3, [sp, #32]
   20688:	str	r1, [sp, #12]
   2068c:	str	sl, [sp, #24]
   20690:	add	r0, r0, #1
   20694:	str	r0, [sp, #8]
   20698:	movw	r0, #1
   2069c:	movt	r0, #32
   206a0:	add	r0, r0, #254	; 0xfe
   206a4:	str	r0, [sp, #4]
   206a8:	b	206c8 <__assert_fail@plt+0xe800>
   206ac:	ldr	r3, [sp, #32]
   206b0:	ldr	r1, [sp, #12]
   206b4:	ldr	r2, [sp, #16]
   206b8:	ldr	r0, [r1, #8]
   206bc:	add	r2, r2, #1
   206c0:	cmp	r2, r0
   206c4:	bge	20a44 <__assert_fail@plt+0xeb7c>
   206c8:	ldr	r0, [r1, #12]
   206cc:	str	r2, [sp, #16]
   206d0:	ldr	r5, [r0, r2, lsl #2]
   206d4:	ldr	r0, [sl]
   206d8:	add	r1, r0, r5, lsl #3
   206dc:	ldrb	r6, [r1, #4]
   206e0:	sub	r1, r6, #1
   206e4:	cmp	r1, #6
   206e8:	bhi	206b0 <__assert_fail@plt+0xe7e8>
   206ec:	add	r2, pc, #0
   206f0:	ldr	pc, [r2, r1, lsl #2]
   206f4:	andeq	r0, r2, r0, lsl r7
   206f8:	andeq	r0, r2, ip, lsl sl
   206fc:	andeq	r0, r2, r4, lsr #16
   20700:			; <UNDEFINED> instruction: 0x000206b0
   20704:	andeq	r0, r2, ip, lsl sl
   20708:	andeq	r0, r2, r0, asr #17
   2070c:	andeq	r0, r2, ip, lsl sl
   20710:	ldrb	r6, [r0, r5, lsl #3]
   20714:	ldr	r0, [sp, #36]	; 0x24
   20718:	cmp	r3, #0
   2071c:	strb	r4, [r0, r6]
   20720:	beq	2073c <__assert_fail@plt+0xe874>
   20724:	bl	11c40 <__ctype_tolower_loc@plt>
   20728:	ldr	r0, [r0]
   2072c:	ldr	r3, [sp, #32]
   20730:	ldr	r1, [sp, #36]	; 0x24
   20734:	ldr	r0, [r0, r6, lsl #2]
   20738:	strb	r4, [r1, r0]
   2073c:	ldr	r0, [sp, #20]
   20740:	ldrb	r0, [r0, #14]
   20744:	tst	r0, #64	; 0x40
   20748:	beq	206b0 <__assert_fail@plt+0xe7e8>
   2074c:	ldr	r0, [sl, #92]	; 0x5c
   20750:	cmp	r0, #2
   20754:	blt	206b0 <__assert_fail@plt+0xe7e8>
   20758:	ldr	r0, [sl]
   2075c:	add	r1, r5, #1
   20760:	ldr	r7, [sp, #4]
   20764:	movw	r6, #1
   20768:	add	r8, sp, #40	; 0x28
   2076c:	mov	ip, #0
   20770:	sub	r9, fp, #48	; 0x30
   20774:	movt	r6, #32
   20778:	ldrb	r0, [r0, r5, lsl #3]
   2077c:	strb	r0, [sp, #40]	; 0x28
   20780:	ldr	r0, [sl, #8]
   20784:	cmp	r1, r0
   20788:	ldr	r0, [sp, #8]
   2078c:	bcs	207cc <__assert_fail@plt+0xe904>
   20790:	ldr	r0, [sp, #8]
   20794:	ldr	r1, [sl]
   20798:	add	r1, r1, r5, lsl #3
   2079c:	ldr	r2, [r1, #12]
   207a0:	and	r2, r2, r7
   207a4:	cmp	r2, r6
   207a8:	bne	207cc <__assert_fail@plt+0xe904>
   207ac:	ldrb	r1, [r1, #8]
   207b0:	add	r3, r5, #2
   207b4:	strb	r1, [r0], #1
   207b8:	add	r1, r5, #1
   207bc:	ldr	r2, [sl, #8]
   207c0:	mov	r5, r1
   207c4:	cmp	r3, r2
   207c8:	bcc	20794 <__assert_fail@plt+0xe8cc>
   207cc:	sub	r5, r0, r8
   207d0:	sub	r0, fp, #36	; 0x24
   207d4:	mov	r1, r8
   207d8:	mov	r3, r9
   207dc:	str	ip, [fp, #-44]	; 0xffffffd4
   207e0:	str	ip, [fp, #-48]	; 0xffffffd0
   207e4:	mov	r2, r5
   207e8:	bl	358a0 <__assert_fail@plt+0x239d8>
   207ec:	cmp	r0, r5
   207f0:	bne	206ac <__assert_fail@plt+0xe7e4>
   207f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   207f8:	bl	11ad8 <towlower@plt>
   207fc:	mov	r1, r0
   20800:	mov	r0, r8
   20804:	mov	r2, r9
   20808:	bl	11a0c <wcrtomb@plt>
   2080c:	cmn	r0, #1
   20810:	beq	206ac <__assert_fail@plt+0xe7e4>
   20814:	ldrb	r0, [sp, #40]	; 0x28
   20818:	ldr	r1, [sp, #36]	; 0x24
   2081c:	strb	r4, [r1, r0]
   20820:	b	206ac <__assert_fail@plt+0xe7e4>
   20824:	mov	r7, #0
   20828:	mov	r6, #0
   2082c:	str	r5, [sp, #28]
   20830:	ldr	r0, [r0, r5, lsl #3]
   20834:	ldr	r1, [sp, #36]	; 0x24
   20838:	lsl	sl, r7, #2
   2083c:	mov	r8, #0
   20840:	add	r9, r1, r7
   20844:	ldr	r5, [r0, r6, lsl #2]
   20848:	b	20874 <__assert_fail@plt+0xe9ac>
   2084c:	bl	11c40 <__ctype_tolower_loc@plt>
   20850:	ldr	r0, [r0]
   20854:	ldr	r3, [sp, #32]
   20858:	add	r0, r0, sl
   2085c:	ldr	r0, [r0, r8, lsl #2]
   20860:	ldr	r1, [sp, #36]	; 0x24
   20864:	strb	r4, [r1, r0]
   20868:	add	r8, r8, #1
   2086c:	cmp	r8, #32
   20870:	beq	208a0 <__assert_fail@plt+0xe9d8>
   20874:	tst	r5, r4, lsl r8
   20878:	strbne	r4, [r9, r8]
   2087c:	cmpne	r3, #0
   20880:	beq	20868 <__assert_fail@plt+0xe9a0>
   20884:	add	r0, r7, r8
   20888:	add	r0, r0, #128	; 0x80
   2088c:	lsr	r0, r0, #7
   20890:	cmp	r0, #2
   20894:	bls	2084c <__assert_fail@plt+0xe984>
   20898:	add	r0, r7, r8
   2089c:	b	20860 <__assert_fail@plt+0xe998>
   208a0:	ldr	sl, [sp, #24]
   208a4:	ldr	r5, [sp, #28]
   208a8:	add	r6, r6, #1
   208ac:	cmp	r6, #8
   208b0:	beq	206b0 <__assert_fail@plt+0xe7e8>
   208b4:	ldr	r0, [sl]
   208b8:	add	r7, r7, r8
   208bc:	b	20830 <__assert_fail@plt+0xe968>
   208c0:	ldr	r6, [r0, r5, lsl #3]
   208c4:	ldr	r0, [sl, #92]	; 0x5c
   208c8:	cmp	r0, #2
   208cc:	blt	20948 <__assert_fail@plt+0xea80>
   208d0:	ldr	r0, [r6, #36]	; 0x24
   208d4:	cmp	r0, #0
   208d8:	bne	208f4 <__assert_fail@plt+0xea2c>
   208dc:	ldrb	r0, [r6, #16]
   208e0:	tst	r0, #1
   208e4:	bne	208f4 <__assert_fail@plt+0xea2c>
   208e8:	ldr	r0, [r6, #32]
   208ec:	cmp	r0, #0
   208f0:	beq	20948 <__assert_fail@plt+0xea80>
   208f4:	mov	r7, #0
   208f8:	add	r8, sp, #40	; 0x28
   208fc:	sub	r6, fp, #48	; 0x30
   20900:	strb	r7, [fp, #-48]	; 0xffffffd0
   20904:	mov	r0, #0
   20908:	mov	r1, r6
   2090c:	mov	r2, #1
   20910:	mov	r3, r8
   20914:	str	r7, [sp, #44]	; 0x2c
   20918:	str	r7, [sp, #40]	; 0x28
   2091c:	bl	358a0 <__assert_fail@plt+0x239d8>
   20920:	cmn	r0, #2
   20924:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   20928:	ldreq	r0, [sp, #36]	; 0x24
   2092c:	strbeq	r4, [r0, r1]
   20930:	add	r0, r1, #1
   20934:	uxtb	r1, r0
   20938:	strb	r0, [fp, #-48]	; 0xffffffd0
   2093c:	cmp	r1, r0
   20940:	beq	20904 <__assert_fail@plt+0xea3c>
   20944:	b	206ac <__assert_fail@plt+0xe7e4>
   20948:	ldr	r0, [r6, #20]
   2094c:	cmp	r0, #1
   20950:	blt	206b0 <__assert_fail@plt+0xe7e8>
   20954:	mov	r9, #0
   20958:	b	2096c <__assert_fail@plt+0xeaa4>
   2095c:	ldr	r0, [r6, #20]
   20960:	add	r9, r9, #1
   20964:	cmp	r9, r0
   20968:	bge	206b0 <__assert_fail@plt+0xe7e8>
   2096c:	mov	r0, #0
   20970:	add	r8, sp, #40	; 0x28
   20974:	sub	r2, fp, #48	; 0x30
   20978:	str	r0, [fp, #-44]	; 0xffffffd4
   2097c:	str	r0, [fp, #-48]	; 0xffffffd0
   20980:	ldr	r0, [r6]
   20984:	ldr	r1, [r0, r9, lsl #2]
   20988:	mov	r0, r8
   2098c:	bl	11a0c <wcrtomb@plt>
   20990:	ldr	r3, [sp, #32]
   20994:	cmn	r0, #1
   20998:	beq	209c8 <__assert_fail@plt+0xeb00>
   2099c:	ldrb	r7, [sp, #40]	; 0x28
   209a0:	ldr	r0, [sp, #36]	; 0x24
   209a4:	cmp	r3, #0
   209a8:	strb	r4, [r0, r7]
   209ac:	beq	209c8 <__assert_fail@plt+0xeb00>
   209b0:	bl	11c40 <__ctype_tolower_loc@plt>
   209b4:	ldr	r0, [r0]
   209b8:	ldr	r3, [sp, #32]
   209bc:	ldr	r1, [sp, #36]	; 0x24
   209c0:	ldr	r0, [r0, r7, lsl #2]
   209c4:	strb	r4, [r1, r0]
   209c8:	ldr	r0, [sp, #20]
   209cc:	ldrb	r0, [r0, #14]
   209d0:	tst	r0, #64	; 0x40
   209d4:	beq	2095c <__assert_fail@plt+0xea94>
   209d8:	ldr	r0, [sl, #92]	; 0x5c
   209dc:	cmp	r0, #2
   209e0:	blt	2095c <__assert_fail@plt+0xea94>
   209e4:	ldr	r0, [r6]
   209e8:	ldr	r0, [r0, r9, lsl #2]
   209ec:	bl	11ad8 <towlower@plt>
   209f0:	mov	r1, r0
   209f4:	mov	r0, r8
   209f8:	sub	r2, fp, #48	; 0x30
   209fc:	bl	11a0c <wcrtomb@plt>
   20a00:	ldr	r3, [sp, #32]
   20a04:	cmn	r0, #1
   20a08:	beq	2095c <__assert_fail@plt+0xea94>
   20a0c:	ldrb	r0, [sp, #40]	; 0x28
   20a10:	ldr	r1, [sp, #36]	; 0x24
   20a14:	strb	r4, [r1, r0]
   20a18:	b	2095c <__assert_fail@plt+0xea94>
   20a1c:	ldr	r0, [sp, #36]	; 0x24
   20a20:	mov	r1, #1
   20a24:	mov	r2, #256	; 0x100
   20a28:	bl	11d0c <memset@plt>
   20a2c:	cmp	r6, #2
   20a30:	bne	20a44 <__assert_fail@plt+0xeb7c>
   20a34:	ldr	r1, [sp, #20]
   20a38:	ldrb	r0, [r1, #28]
   20a3c:	orr	r0, r0, #1
   20a40:	strb	r0, [r1, #28]
   20a44:	sub	sp, fp, #28
   20a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20a50:	add	fp, sp, #24
   20a54:	mov	r4, r0
   20a58:	mov	r0, #0
   20a5c:	mov	r6, r2
   20a60:	mov	r8, r1
   20a64:	str	r0, [r4]
   20a68:	str	r0, [r4, #4]
   20a6c:	str	r0, [r4, #8]
   20a70:	mov	r0, #256	; 0x100
   20a74:	bl	34810 <__assert_fail@plt+0x22948>
   20a78:	cmp	r0, #0
   20a7c:	str	r0, [r4, #16]
   20a80:	beq	20b30 <__assert_fail@plt+0xec68>
   20a84:	movw	r0, #45820	; 0xb2fc
   20a88:	tst	r6, #1
   20a8c:	and	r1, r6, #2
   20a90:	movt	r0, #3
   20a94:	movweq	r0, #710	; 0x2c6
   20a98:	movteq	r0, #257	; 0x101
   20a9c:	tst	r6, #4
   20aa0:	orr	r5, r0, r1, lsl #21
   20aa4:	bne	20ab8 <__assert_fail@plt+0xebf0>
   20aa8:	ldrb	r0, [r4, #28]
   20aac:	and	r0, r0, #127	; 0x7f
   20ab0:	strb	r0, [r4, #28]
   20ab4:	b	20ad8 <__assert_fail@plt+0xec10>
   20ab8:	ldrb	r0, [r4, #28]
   20abc:	mvn	r1, #127	; 0x7f
   20ac0:	orr	r0, r0, r1
   20ac4:	movw	r1, #45758	; 0xb2be
   20ac8:	movt	r1, #323	; 0x143
   20acc:	strb	r0, [r4, #28]
   20ad0:	and	r1, r5, r1
   20ad4:	orr	r5, r1, #256	; 0x100
   20ad8:	and	r1, r6, #8
   20adc:	and	r0, r0, #239	; 0xef
   20ae0:	mov	r7, #0
   20ae4:	orr	r0, r0, r1, lsl #1
   20ae8:	str	r7, [r4, #20]
   20aec:	strb	r0, [r4, #28]
   20af0:	mov	r0, r8
   20af4:	bl	11cac <strlen@plt>
   20af8:	mov	r2, r0
   20afc:	mov	r0, r4
   20b00:	mov	r1, r8
   20b04:	mov	r3, r5
   20b08:	bl	1f090 <__assert_fail@plt+0xd1c8>
   20b0c:	cmp	r0, #16
   20b10:	mov	r5, r0
   20b14:	movweq	r5, #8
   20b18:	cmp	r5, #0
   20b1c:	bne	20b3c <__assert_fail@plt+0xec74>
   20b20:	mov	r0, r4
   20b24:	bl	205a0 <__assert_fail@plt+0xe6d8>
   20b28:	mov	r0, r7
   20b2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20b30:	mov	r7, #12
   20b34:	mov	r0, r7
   20b38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20b3c:	ldr	r0, [r4, #16]
   20b40:	bl	176c0 <__assert_fail@plt+0x57f8>
   20b44:	mov	r0, r5
   20b48:	str	r7, [r4, #16]
   20b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20b50:	push	{r4, r5, r6, r7, fp, lr}
   20b54:	add	fp, sp, #16
   20b58:	cmp	r0, #17
   20b5c:	bcs	20bd0 <__assert_fail@plt+0xed08>
   20b60:	movw	r1, #32264	; 0x7e08
   20b64:	mov	r4, r2
   20b68:	mov	r2, #5
   20b6c:	mov	r5, r3
   20b70:	movt	r1, #3
   20b74:	ldr	r0, [r1, r0, lsl #2]
   20b78:	movw	r1, #31880	; 0x7c88
   20b7c:	movt	r1, #3
   20b80:	add	r1, r1, r0
   20b84:	mov	r0, #0
   20b88:	bl	11afc <dcgettext@plt>
   20b8c:	mov	r6, r0
   20b90:	bl	11cac <strlen@plt>
   20b94:	add	r7, r0, #1
   20b98:	cmp	r5, #0
   20b9c:	beq	20bb8 <__assert_fail@plt+0xecf0>
   20ba0:	cmp	r7, r5
   20ba4:	mov	r2, r7
   20ba8:	bhi	20bc0 <__assert_fail@plt+0xecf8>
   20bac:	mov	r0, r4
   20bb0:	mov	r1, r6
   20bb4:	bl	11ab4 <memcpy@plt>
   20bb8:	mov	r0, r7
   20bbc:	pop	{r4, r5, r6, r7, fp, pc}
   20bc0:	sub	r2, r5, #1
   20bc4:	mov	r0, #0
   20bc8:	strb	r0, [r4, r2]
   20bcc:	b	20bac <__assert_fail@plt+0xece4>
   20bd0:	bl	11e8c <abort@plt>
   20bd4:	push	{r4, r5, fp, lr}
   20bd8:	add	fp, sp, #8
   20bdc:	ldr	r5, [r0]
   20be0:	mov	r4, r0
   20be4:	cmp	r5, #0
   20be8:	beq	20c14 <__assert_fail@plt+0xed4c>
   20bec:	movw	r0, #0
   20bf0:	movw	r1, #0
   20bf4:	movt	r0, #0
   20bf8:	movt	r1, #0
   20bfc:	orrs	r0, r1, r0
   20c00:	beq	20c0c <__assert_fail@plt+0xed44>
   20c04:	add	r0, r5, #136	; 0x88
   20c08:	bl	11a48 <pthread_mutex_destroy@plt>
   20c0c:	mov	r0, r5
   20c10:	bl	20c3c <__assert_fail@plt+0xed74>
   20c14:	mov	r5, #0
   20c18:	str	r5, [r4]
   20c1c:	str	r5, [r4, #4]
   20c20:	ldr	r0, [r4, #16]
   20c24:	bl	176c0 <__assert_fail@plt+0x57f8>
   20c28:	str	r5, [r4, #16]
   20c2c:	ldr	r0, [r4, #20]
   20c30:	bl	176c0 <__assert_fail@plt+0x57f8>
   20c34:	str	r5, [r4, #20]
   20c38:	pop	{r4, r5, fp, pc}
   20c3c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20c40:	add	fp, sp, #24
   20c44:	mov	r8, r0
   20c48:	ldr	r0, [r0]
   20c4c:	cmp	r0, #0
   20c50:	beq	20cd4 <__assert_fail@plt+0xee0c>
   20c54:	ldr	r1, [r8, #8]
   20c58:	cmp	r1, #0
   20c5c:	beq	20cd4 <__assert_fail@plt+0xee0c>
   20c60:	movw	r7, #255	; 0xff
   20c64:	mov	r6, #0
   20c68:	movt	r7, #4
   20c6c:	add	r1, r0, r6, lsl #3
   20c70:	ldr	r1, [r1, #4]
   20c74:	and	r1, r1, r7
   20c78:	cmp	r1, #3
   20c7c:	beq	20cb0 <__assert_fail@plt+0xede8>
   20c80:	cmp	r1, #6
   20c84:	bne	20cbc <__assert_fail@plt+0xedf4>
   20c88:	ldr	r5, [r0, r6, lsl #3]
   20c8c:	ldr	r0, [r5]
   20c90:	bl	176c0 <__assert_fail@plt+0x57f8>
   20c94:	ldr	r0, [r5, #4]
   20c98:	bl	176c0 <__assert_fail@plt+0x57f8>
   20c9c:	ldr	r0, [r5, #8]
   20ca0:	bl	176c0 <__assert_fail@plt+0x57f8>
   20ca4:	ldr	r0, [r5, #12]
   20ca8:	bl	176c0 <__assert_fail@plt+0x57f8>
   20cac:	b	20cb4 <__assert_fail@plt+0xedec>
   20cb0:	ldr	r5, [r0, r6, lsl #3]
   20cb4:	mov	r0, r5
   20cb8:	bl	176c0 <__assert_fail@plt+0x57f8>
   20cbc:	ldr	r0, [r8, #8]
   20cc0:	add	r6, r6, #1
   20cc4:	cmp	r6, r0
   20cc8:	bcs	20cd4 <__assert_fail@plt+0xee0c>
   20ccc:	ldr	r0, [r8]
   20cd0:	b	20c6c <__assert_fail@plt+0xeda4>
   20cd4:	ldr	r0, [r8, #12]
   20cd8:	bl	176c0 <__assert_fail@plt+0x57f8>
   20cdc:	ldr	r0, [r8, #8]
   20ce0:	cmp	r0, #0
   20ce4:	beq	20d48 <__assert_fail@plt+0xee80>
   20ce8:	mov	r5, #0
   20cec:	mov	r6, #8
   20cf0:	b	20d08 <__assert_fail@plt+0xee40>
   20cf4:	ldr	r0, [r8, #8]
   20cf8:	add	r5, r5, #1
   20cfc:	add	r6, r6, #12
   20d00:	cmp	r5, r0
   20d04:	bcs	20d48 <__assert_fail@plt+0xee80>
   20d08:	ldr	r0, [r8, #24]
   20d0c:	cmp	r0, #0
   20d10:	beq	20d1c <__assert_fail@plt+0xee54>
   20d14:	ldr	r0, [r0, r6]
   20d18:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d1c:	ldr	r0, [r8, #28]
   20d20:	cmp	r0, #0
   20d24:	beq	20d30 <__assert_fail@plt+0xee68>
   20d28:	ldr	r0, [r0, r6]
   20d2c:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d30:	ldr	r0, [r8, #20]
   20d34:	cmp	r0, #0
   20d38:	beq	20cf4 <__assert_fail@plt+0xee2c>
   20d3c:	ldr	r0, [r0, r6]
   20d40:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d44:	b	20cf4 <__assert_fail@plt+0xee2c>
   20d48:	ldr	r0, [r8, #20]
   20d4c:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d50:	ldr	r0, [r8, #24]
   20d54:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d58:	ldr	r0, [r8, #28]
   20d5c:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d60:	ldr	r0, [r8]
   20d64:	bl	176c0 <__assert_fail@plt+0x57f8>
   20d68:	ldr	r5, [r8, #32]
   20d6c:	cmp	r5, #0
   20d70:	beq	20dd0 <__assert_fail@plt+0xef08>
   20d74:	mov	r6, #0
   20d78:	add	r0, r6, r6, lsl #1
   20d7c:	ldr	r0, [r5, r0, lsl #2]!
   20d80:	add	r7, r5, #8
   20d84:	cmp	r0, #1
   20d88:	blt	20dac <__assert_fail@plt+0xeee4>
   20d8c:	mov	r4, #0
   20d90:	ldr	r0, [r7]
   20d94:	ldr	r0, [r0, r4, lsl #2]
   20d98:	bl	243b8 <__assert_fail@plt+0x124f0>
   20d9c:	ldr	r0, [r5]
   20da0:	add	r4, r4, #1
   20da4:	cmp	r4, r0
   20da8:	blt	20d90 <__assert_fail@plt+0xeec8>
   20dac:	ldr	r0, [r7]
   20db0:	bl	176c0 <__assert_fail@plt+0x57f8>
   20db4:	ldr	r0, [r8, #68]	; 0x44
   20db8:	cmp	r6, r0
   20dbc:	bcs	20dcc <__assert_fail@plt+0xef04>
   20dc0:	ldr	r5, [r8, #32]
   20dc4:	add	r6, r6, #1
   20dc8:	b	20d78 <__assert_fail@plt+0xeeb0>
   20dcc:	ldr	r5, [r8, #32]
   20dd0:	mov	r0, r5
   20dd4:	bl	176c0 <__assert_fail@plt+0x57f8>
   20dd8:	ldr	r0, [r8, #60]	; 0x3c
   20ddc:	movw	r1, #32332	; 0x7e4c
   20de0:	movt	r1, #3
   20de4:	cmp	r0, r1
   20de8:	beq	20df0 <__assert_fail@plt+0xef28>
   20dec:	bl	176c0 <__assert_fail@plt+0x57f8>
   20df0:	ldr	r0, [r8, #132]	; 0x84
   20df4:	bl	176c0 <__assert_fail@plt+0x57f8>
   20df8:	mov	r0, r8
   20dfc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   20e00:	b	176c0 <__assert_fail@plt+0x57f8>
   20e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e08:	add	fp, sp, #28
   20e0c:	sub	sp, sp, #28
   20e10:	ldr	sl, [fp, #8]
   20e14:	mov	r7, #2
   20e18:	cmp	sl, #7
   20e1c:	bhi	20ef0 <__assert_fail@plt+0xf028>
   20e20:	mov	r5, r0
   20e24:	ldr	r0, [r0]
   20e28:	mov	r6, r3
   20e2c:	mov	r9, r2
   20e30:	mov	r4, r1
   20e34:	tst	sl, #4
   20e38:	str	r0, [sp, #24]
   20e3c:	bne	20e54 <__assert_fail@plt+0xef8c>
   20e40:	mov	r0, r4
   20e44:	bl	11cac <strlen@plt>
   20e48:	mov	r7, r0
   20e4c:	mov	r8, #0
   20e50:	b	20e5c <__assert_fail@plt+0xef94>
   20e54:	ldr	r8, [r6]
   20e58:	ldr	r7, [r6, #4]
   20e5c:	movw	r0, #0
   20e60:	movw	r1, #0
   20e64:	movt	r0, #0
   20e68:	movt	r1, #0
   20e6c:	orrs	r0, r1, r0
   20e70:	str	r0, [sp, #20]
   20e74:	beq	20e84 <__assert_fail@plt+0xefbc>
   20e78:	ldr	r0, [sp, #24]
   20e7c:	add	r0, r0, #136	; 0x88
   20e80:	bl	11a90 <pthread_mutex_lock@plt>
   20e84:	ldrb	r0, [r5, #28]
   20e88:	tst	r0, #16
   20e8c:	bne	20ea0 <__assert_fail@plt+0xefd8>
   20e90:	str	r7, [sp]
   20e94:	stmib	sp, {r7, r9}
   20e98:	str	r6, [sp, #12]
   20e9c:	b	20eb4 <__assert_fail@plt+0xefec>
   20ea0:	mov	r0, #0
   20ea4:	str	r7, [sp]
   20ea8:	str	r7, [sp, #4]
   20eac:	str	r0, [sp, #8]
   20eb0:	str	r0, [sp, #12]
   20eb4:	mov	r0, r5
   20eb8:	mov	r1, r4
   20ebc:	mov	r2, r7
   20ec0:	mov	r3, r8
   20ec4:	str	sl, [sp, #16]
   20ec8:	bl	20efc <__assert_fail@plt+0xf034>
   20ecc:	mov	r7, r0
   20ed0:	ldr	r0, [sp, #20]
   20ed4:	cmp	r0, #0
   20ed8:	beq	20ee8 <__assert_fail@plt+0xf020>
   20edc:	ldr	r0, [sp, #24]
   20ee0:	add	r0, r0, #136	; 0x88
   20ee4:	bl	119c4 <pthread_mutex_unlock@plt>
   20ee8:	cmp	r7, #0
   20eec:	movwne	r7, #1
   20ef0:	mov	r0, r7
   20ef4:	sub	sp, fp, #28
   20ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f00:	add	fp, sp, #28
   20f04:	sub	sp, sp, #412	; 0x19c
   20f08:	ldr	r8, [r0]
   20f0c:	str	r2, [sp, #68]	; 0x44
   20f10:	str	r1, [sp, #100]	; 0x64
   20f14:	mov	r4, r0
   20f18:	add	r0, sp, #104	; 0x68
   20f1c:	mov	r1, #0
   20f20:	mov	r2, #136	; 0x88
   20f24:	mov	r6, r3
   20f28:	mov	r9, #0
   20f2c:	bl	11d0c <memset@plt>
   20f30:	str	r8, [sp, #188]	; 0xbc
   20f34:	ldr	lr, [fp, #16]
   20f38:	ldr	ip, [fp, #8]
   20f3c:	mov	r5, #0
   20f40:	ldr	r1, [r4, #16]
   20f44:	cmp	r1, #0
   20f48:	beq	20f64 <__assert_fail@plt+0xf09c>
   20f4c:	ldrb	r2, [r4, #28]
   20f50:	and	r2, r2, #9
   20f54:	cmp	r2, #8
   20f58:	movne	r1, #0
   20f5c:	subs	r5, r6, ip
   20f60:	movne	r5, r1
   20f64:	ldr	r2, [r4, #24]
   20f68:	ldr	r1, [r4, #8]
   20f6c:	mov	sl, #1
   20f70:	mvn	r3, r2
   20f74:	cmp	r2, lr
   20f78:	addcc	r9, r3, lr
   20f7c:	cmp	r1, #0
   20f80:	beq	23a48 <__assert_fail@plt+0x11b80>
   20f84:	ldr	r1, [r8, #36]	; 0x24
   20f88:	cmp	r1, #0
   20f8c:	ldrne	r0, [r8, #40]	; 0x28
   20f90:	cmpne	r0, #0
   20f94:	beq	23a48 <__assert_fail@plt+0x11b80>
   20f98:	ldr	r3, [r8, #44]	; 0x2c
   20f9c:	cmp	r3, #0
   20fa0:	ldrne	r7, [r8, #48]	; 0x30
   20fa4:	cmpne	r7, #0
   20fa8:	beq	23a48 <__assert_fail@plt+0x11b80>
   20fac:	ldr	r1, [r1, #8]
   20fb0:	ldr	r2, [r4, #20]
   20fb4:	cmp	r1, #0
   20fb8:	beq	20fc4 <__assert_fail@plt+0xf0fc>
   20fbc:	ldr	r7, [sp, #100]	; 0x64
   20fc0:	b	20fd4 <__assert_fail@plt+0xf10c>
   20fc4:	ldr	r1, [r0, #8]
   20fc8:	ldr	r7, [sp, #100]	; 0x64
   20fcc:	cmp	r1, #0
   20fd0:	beq	22b54 <__assert_fail@plt+0x10c8c>
   20fd4:	str	ip, [sp, #72]	; 0x48
   20fd8:	subs	r0, lr, r9
   20fdc:	str	r9, [sp, #32]
   20fe0:	str	r0, [sp, #84]	; 0x54
   20fe4:	mov	r0, #1
   20fe8:	str	r0, [sp, #44]	; 0x2c
   20fec:	bne	21000 <__assert_fail@plt+0xf138>
   20ff0:	ldr	r0, [r8, #76]	; 0x4c
   20ff4:	cmp	r0, #0
   20ff8:	movwne	r0, #1
   20ffc:	str	r0, [sp, #44]	; 0x2c
   21000:	ldr	r0, [r4, #12]
   21004:	ldr	sl, [r8, #92]	; 0x5c
   21008:	ldr	ip, [r8, #8]
   2100c:	str	r2, [sp, #168]	; 0xa8
   21010:	str	r7, [sp, #104]	; 0x68
   21014:	mov	lr, r4
   21018:	str	sl, [sp, #184]	; 0xb8
   2101c:	ubfx	r3, r0, #22, #1
   21020:	ldr	r4, [sp, #68]	; 0x44
   21024:	and	r0, r0, #4194304	; 0x400000
   21028:	add	r1, ip, #1
   2102c:	orrs	r9, r2, r0
   21030:	strb	r3, [sp, #176]	; 0xb0
   21034:	add	r3, sp, #104	; 0x68
   21038:	movwne	r9, #1
   2103c:	add	r3, r3, #44	; 0x2c
   21040:	cmp	sl, r1
   21044:	strb	r9, [sp, #179]	; 0xb3
   21048:	movgt	r1, sl
   2104c:	vdup.32	q8, r4
   21050:	ldrb	r0, [r8, #88]	; 0x58
   21054:	vst1.32	{d16-d17}, [r3]
   21058:	ubfx	r3, r0, #3, #1
   2105c:	strb	r3, [sp, #178]	; 0xb2
   21060:	ubfx	r0, r0, #2, #1
   21064:	str	r8, [sp, #96]	; 0x60
   21068:	str	lr, [sp, #52]	; 0x34
   2106c:	str	r5, [sp, #92]	; 0x5c
   21070:	str	r2, [sp, #88]	; 0x58
   21074:	strb	r0, [sp, #177]	; 0xb1
   21078:	add	r0, r4, #1
   2107c:	cmp	r0, r1
   21080:	movlt	r1, r0
   21084:	cmp	sl, #2
   21088:	mov	r0, lr
   2108c:	str	r1, [sp, #80]	; 0x50
   21090:	blt	210d0 <__assert_fail@plt+0xf208>
   21094:	mov	sl, #12
   21098:	cmn	r1, #-1073741823	; 0xc0000001
   2109c:	bhi	239f4 <__assert_fail@plt+0x11b2c>
   210a0:	lsl	r1, r1, #2
   210a4:	mov	r0, #0
   210a8:	bl	34840 <__assert_fail@plt+0x22978>
   210ac:	ldr	r1, [sp, #80]	; 0x50
   210b0:	ldr	r2, [sp, #88]	; 0x58
   210b4:	ldr	r5, [sp, #92]	; 0x5c
   210b8:	ldr	r7, [sp, #100]	; 0x64
   210bc:	cmp	r0, #0
   210c0:	beq	239f4 <__assert_fail@plt+0x11b2c>
   210c4:	str	r0, [sp, #112]	; 0x70
   210c8:	ldr	r8, [sp, #96]	; 0x60
   210cc:	ldr	r0, [sp, #52]	; 0x34
   210d0:	cmp	r9, #0
   210d4:	mov	r4, #1
   210d8:	mov	r9, r0
   210dc:	beq	21108 <__assert_fail@plt+0xf240>
   210e0:	mov	r0, #0
   210e4:	mov	r4, #0
   210e8:	bl	34840 <__assert_fail@plt+0x22978>
   210ec:	cmp	r0, #0
   210f0:	beq	238dc <__assert_fail@plt+0x11a14>
   210f4:	ldr	r7, [sp, #100]	; 0x64
   210f8:	ldr	r5, [sp, #92]	; 0x5c
   210fc:	ldr	r2, [sp, #88]	; 0x58
   21100:	ldr	r1, [sp, #80]	; 0x50
   21104:	str	r0, [sp, #108]	; 0x6c
   21108:	add	r3, r8, #96	; 0x60
   2110c:	str	r1, [sp, #140]	; 0x8c
   21110:	ldr	r0, [fp, #12]
   21114:	cmp	r4, #0
   21118:	str	r3, [sp, #172]	; 0xac
   2111c:	ldrb	r3, [r8, #88]	; 0x58
   21120:	ubfx	r3, r3, #4, #1
   21124:	strb	r3, [sp, #182]	; 0xb6
   21128:	mov	r3, #0
   2112c:	beq	21144 <__assert_fail@plt+0xf27c>
   21130:	str	r7, [sp, #108]	; 0x6c
   21134:	ldr	r3, [r8, #92]	; 0x5c
   21138:	cmp	r3, #1
   2113c:	ldr	r3, [sp, #68]	; 0x44
   21140:	movwgt	r3, #0
   21144:	str	r0, [sp, #160]	; 0xa0
   21148:	str	r3, [sp, #136]	; 0x88
   2114c:	str	r3, [sp, #132]	; 0x84
   21150:	str	r0, [sp, #156]	; 0x9c
   21154:	ldrb	r0, [r9, #28]
   21158:	lsr	r0, r0, #7
   2115c:	strb	r0, [sp, #181]	; 0xb5
   21160:	mvn	r0, #0
   21164:	ldr	r8, [r8, #76]	; 0x4c
   21168:	str	r0, [sp, #196]	; 0xc4
   2116c:	ldr	r0, [fp, #24]
   21170:	lsl	r9, r8, #1
   21174:	cmp	r8, #1
   21178:	str	r0, [sp, #192]	; 0xc0
   2117c:	blt	211d4 <__assert_fail@plt+0xf30c>
   21180:	movw	r0, #43690	; 0xaaaa
   21184:	mov	sl, #12
   21188:	movt	r0, #2730	; 0xaaa
   2118c:	cmp	r9, r0
   21190:	bhi	239f4 <__assert_fail@plt+0x11b2c>
   21194:	add	r0, r8, r8, lsl #1
   21198:	lsl	r0, r0, #4
   2119c:	bl	34810 <__assert_fail@plt+0x22948>
   211a0:	mov	r5, r0
   211a4:	str	r0, [sp, #220]	; 0xdc
   211a8:	lsl	r0, r8, #3
   211ac:	bl	34810 <__assert_fail@plt+0x22948>
   211b0:	cmp	r0, #0
   211b4:	str	r0, [sp, #236]	; 0xec
   211b8:	beq	239f4 <__assert_fail@plt+0x11b2c>
   211bc:	cmp	r5, #0
   211c0:	ldr	r7, [sp, #100]	; 0x64
   211c4:	ldr	r5, [sp, #92]	; 0x5c
   211c8:	ldr	r2, [sp, #88]	; 0x58
   211cc:	ldr	r1, [sp, #80]	; 0x50
   211d0:	beq	239f4 <__assert_fail@plt+0x11b2c>
   211d4:	mov	r0, #1
   211d8:	str	r9, [sp, #232]	; 0xe8
   211dc:	str	r0, [sp, #224]	; 0xe0
   211e0:	ldr	r0, [sp, #84]	; 0x54
   211e4:	str	r9, [sp, #216]	; 0xd8
   211e8:	cmp	r0, #1
   211ec:	bhi	21200 <__assert_fail@plt+0xf338>
   211f0:	ldr	r0, [sp, #96]	; 0x60
   211f4:	ldrb	r0, [r0, #88]	; 0x58
   211f8:	tst	r0, #2
   211fc:	beq	21230 <__assert_fail@plt+0xf368>
   21200:	mov	sl, #12
   21204:	cmn	r1, #-1073741822	; 0xc0000002
   21208:	bhi	239f4 <__assert_fail@plt+0x11b2c>
   2120c:	mov	r0, #4
   21210:	add	r0, r0, r1, lsl #2
   21214:	bl	34810 <__assert_fail@plt+0x22948>
   21218:	ldr	r2, [sp, #88]	; 0x58
   2121c:	ldr	r5, [sp, #92]	; 0x5c
   21220:	ldr	r7, [sp, #100]	; 0x64
   21224:	cmp	r0, #0
   21228:	str	r0, [sp, #204]	; 0xcc
   2122c:	beq	239f4 <__assert_fail@plt+0x11b2c>
   21230:	ldr	r1, [fp, #24]
   21234:	ldr	r3, [sp, #72]	; 0x48
   21238:	str	r6, [fp, #-200]	; 0xffffff38
   2123c:	mov	r0, #4
   21240:	mov	r8, #1
   21244:	mov	r9, r6
   21248:	tst	r1, #1
   2124c:	mov	r1, #4
   21250:	mov	r4, r3
   21254:	movweq	r1, #6
   21258:	cmp	r3, r6
   2125c:	str	r1, [sp, #164]	; 0xa4
   21260:	ldr	r1, [sp, #96]	; 0x60
   21264:	mvnlt	r8, #0
   21268:	movlt	r4, r6
   2126c:	movlt	r9, r3
   21270:	cmp	r5, #0
   21274:	ldr	r1, [r1, #92]	; 0x5c
   21278:	str	r1, [sp, #56]	; 0x38
   2127c:	beq	212c0 <__assert_fail@plt+0xf3f8>
   21280:	cmp	r1, #1
   21284:	beq	212a4 <__assert_fail@plt+0xf3dc>
   21288:	ldr	r0, [sp, #52]	; 0x34
   2128c:	ldr	r0, [r0, #12]
   21290:	and	r0, r0, #4194304	; 0x400000
   21294:	orr	r0, r2, r0
   21298:	clz	r0, r0
   2129c:	lsr	r0, r0, #5
   212a0:	lsl	r0, r0, #2
   212a4:	cmp	r2, #0
   212a8:	mov	r1, r2
   212ac:	movwne	r1, #1
   212b0:	cmp	r3, r6
   212b4:	orrge	r1, r1, #2
   212b8:	orr	r0, r1, r0
   212bc:	b	212c4 <__assert_fail@plt+0xf3fc>
   212c0:	mov	r0, #8
   212c4:	add	r1, sp, #104	; 0x68
   212c8:	cmp	r3, r6
   212cc:	sub	r0, r0, #4
   212d0:	str	r8, [sp, #60]	; 0x3c
   212d4:	str	r4, [sp, #80]	; 0x50
   212d8:	str	r9, [sp, #76]	; 0x4c
   212dc:	add	r1, r1, #32
   212e0:	str	r0, [sp, #72]	; 0x48
   212e4:	str	r1, [sp, #28]
   212e8:	sub	r1, fp, #200	; 0xc8
   212ec:	movwlt	r1, #0
   212f0:	cmp	r1, #0
   212f4:	str	r1, [sp, #40]	; 0x28
   212f8:	movwne	r1, #1
   212fc:	str	r1, [sp, #48]	; 0x30
   21300:	sub	r1, fp, #192	; 0xc0
   21304:	add	r1, r1, #16
   21308:	str	r1, [sp, #36]	; 0x24
   2130c:	ldr	r1, [sp, #72]	; 0x48
   21310:	cmp	r1, #4
   21314:	bhi	213f8 <__assert_fail@plt+0xf530>
   21318:	add	r0, pc, #0
   2131c:	ldr	pc, [r0, r1, lsl #2]
   21320:	andeq	r1, r2, r4, lsr r3
   21324:	andeq	r1, r2, r4, lsr r3
   21328:	andeq	r1, r2, ip, lsr #7
   2132c:	andeq	r1, r2, r4, lsl #7
   21330:	andeq	r1, r2, ip, ror r4
   21334:	mov	sl, #1
   21338:	cmp	r6, r9
   2133c:	blt	239f4 <__assert_fail@plt+0x11b2c>
   21340:	ldr	r1, [sp, #68]	; 0x44
   21344:	cmp	r6, r1
   21348:	mov	r0, #0
   2134c:	ldrblt	r0, [r7, r6]
   21350:	cmp	r2, #0
   21354:	ldrbne	r0, [r2, r0]
   21358:	ldrb	r0, [r5, r0]
   2135c:	cmp	r0, #0
   21360:	bne	2147c <__assert_fail@plt+0xf5b4>
   21364:	sub	r0, r6, #1
   21368:	cmp	r6, r9
   2136c:	mov	r6, r0
   21370:	str	r0, [fp, #-200]	; 0xffffff38
   21374:	bgt	21344 <__assert_fail@plt+0xf47c>
   21378:	b	239f4 <__assert_fail@plt+0x11b2c>
   2137c:	add	r6, r6, #1
   21380:	str	r6, [fp, #-200]	; 0xffffff38
   21384:	cmp	r6, r4
   21388:	bge	213c4 <__assert_fail@plt+0xf4fc>
   2138c:	ldrb	r0, [r7, r6]
   21390:	ldrb	r0, [r2, r0]
   21394:	ldrb	r0, [r5, r0]
   21398:	cmp	r0, #0
   2139c:	beq	2137c <__assert_fail@plt+0xf4b4>
   213a0:	b	213c4 <__assert_fail@plt+0xf4fc>
   213a4:	add	r6, r6, #1
   213a8:	str	r6, [fp, #-200]	; 0xffffff38
   213ac:	cmp	r6, r4
   213b0:	bge	213c4 <__assert_fail@plt+0xf4fc>
   213b4:	ldrb	r0, [r7, r6]
   213b8:	ldrb	r0, [r5, r0]
   213bc:	cmp	r0, #0
   213c0:	beq	213a4 <__assert_fail@plt+0xf4dc>
   213c4:	cmp	r6, r4
   213c8:	bne	2147c <__assert_fail@plt+0xf5b4>
   213cc:	ldr	r1, [sp, #68]	; 0x44
   213d0:	mov	r0, #0
   213d4:	mov	r6, r4
   213d8:	cmp	r4, r1
   213dc:	ldrblt	r0, [r7, r4]
   213e0:	cmp	r2, #0
   213e4:	ldrbne	r0, [r2, r0]
   213e8:	ldrb	r0, [r5, r0]
   213ec:	cmp	r0, #0
   213f0:	bne	2147c <__assert_fail@plt+0xf5b4>
   213f4:	b	23bb0 <__assert_fail@plt+0x11ce8>
   213f8:	ldr	r0, [sp, #128]	; 0x80
   213fc:	ldr	r2, [sp, #136]	; 0x88
   21400:	sub	r1, r6, r0
   21404:	cmp	r1, r2
   21408:	bcs	21450 <__assert_fail@plt+0xf588>
   2140c:	ldr	r3, [sp, #132]	; 0x84
   21410:	mov	r2, #0
   21414:	cmp	r1, r3
   21418:	bcs	21424 <__assert_fail@plt+0xf55c>
   2141c:	ldr	r2, [sp, #108]	; 0x6c
   21420:	ldrb	r2, [r2, r1]
   21424:	ldrb	r1, [r5, r2]
   21428:	cmp	r1, #0
   2142c:	bne	2147c <__assert_fail@plt+0xf5b4>
   21430:	add	r6, r6, r8
   21434:	mov	sl, #1
   21438:	cmp	r6, r9
   2143c:	str	r6, [fp, #-200]	; 0xffffff38
   21440:	blt	239f4 <__assert_fail@plt+0x11b2c>
   21444:	cmp	r6, r4
   21448:	ble	213fc <__assert_fail@plt+0xf534>
   2144c:	b	239f4 <__assert_fail@plt+0x11b2c>
   21450:	ldr	r2, [fp, #24]
   21454:	add	r0, sp, #104	; 0x68
   21458:	mov	r1, r6
   2145c:	bl	2a96c <__assert_fail@plt+0x18aa4>
   21460:	cmp	r0, #0
   21464:	bne	23a5c <__assert_fail@plt+0x11b94>
   21468:	ldr	r0, [sp, #128]	; 0x80
   2146c:	ldr	r6, [fp, #-200]	; 0xffffff38
   21470:	ldr	r5, [sp, #92]	; 0x5c
   21474:	sub	r1, r6, r0
   21478:	b	2140c <__assert_fail@plt+0xf544>
   2147c:	ldr	r2, [fp, #24]
   21480:	add	r0, sp, #104	; 0x68
   21484:	mov	r1, r6
   21488:	bl	2a96c <__assert_fail@plt+0x18aa4>
   2148c:	cmp	r0, #0
   21490:	bne	23a5c <__assert_fail@plt+0x11b94>
   21494:	ldr	r0, [sp, #56]	; 0x38
   21498:	cmp	r0, #1
   2149c:	ldrne	r0, [sp, #132]	; 0x84
   214a0:	cmpne	r0, #0
   214a4:	bne	214e4 <__assert_fail@plt+0xf61c>
   214a8:	mov	r0, #0
   214ac:	str	r0, [sp, #212]	; 0xd4
   214b0:	str	r0, [sp, #224]	; 0xe0
   214b4:	str	r0, [sp, #208]	; 0xd0
   214b8:	str	r0, [fp, #-196]	; 0xffffff3c
   214bc:	ldr	r4, [sp, #188]	; 0xbc
   214c0:	ldr	r5, [sp, #144]	; 0x90
   214c4:	ldr	r9, [r4, #36]	; 0x24
   214c8:	ldrsb	r0, [r9, #52]	; 0x34
   214cc:	cmn	r0, #1
   214d0:	ble	214f8 <__assert_fail@plt+0xf630>
   214d4:	ldr	r1, [sp, #48]	; 0x30
   214d8:	cmp	r9, #0
   214dc:	bne	21628 <__assert_fail@plt+0xf760>
   214e0:	b	238dc <__assert_fail@plt+0x11a14>
   214e4:	ldr	r0, [sp, #112]	; 0x70
   214e8:	ldr	r0, [r0]
   214ec:	cmn	r0, #1
   214f0:	bne	214a8 <__assert_fail@plt+0xf5e0>
   214f4:	b	228d0 <__assert_fail@plt+0x10a08>
   214f8:	cmp	r5, #0
   214fc:	ble	21538 <__assert_fail@plt+0xf670>
   21500:	ldr	r1, [sp, #152]	; 0x98
   21504:	sub	r0, r5, #1
   21508:	cmp	r1, r0
   2150c:	beq	21604 <__assert_fail@plt+0xf73c>
   21510:	ldr	r1, [sp, #184]	; 0xb8
   21514:	cmp	r1, #2
   21518:	blt	2154c <__assert_fail@plt+0xf684>
   2151c:	ldr	r1, [sp, #112]	; 0x70
   21520:	ldr	r6, [r1, r0, lsl #2]
   21524:	cmn	r6, #1
   21528:	bne	21580 <__assert_fail@plt+0xf6b8>
   2152c:	sub	r0, r0, #1
   21530:	cmn	r0, #1
   21534:	bne	21520 <__assert_fail@plt+0xf658>
   21538:	ldr	r3, [sp, #164]	; 0xa4
   2153c:	ldr	r1, [sp, #48]	; 0x30
   21540:	tst	r3, #1
   21544:	beq	215b0 <__assert_fail@plt+0xf6e8>
   21548:	b	2161c <__assert_fail@plt+0xf754>
   2154c:	ldr	r1, [sp, #108]	; 0x6c
   21550:	ldr	r2, [sp, #172]	; 0xac
   21554:	mov	r3, #1
   21558:	ldrb	r0, [r1, r0]
   2155c:	ubfx	r1, r0, #5, #3
   21560:	ldr	r1, [r2, r1, lsl #2]
   21564:	and	r2, r0, #31
   21568:	tst	r1, r3, lsl r2
   2156c:	ldr	r1, [sp, #48]	; 0x30
   21570:	bne	2161c <__assert_fail@plt+0xf754>
   21574:	cmp	r0, #10
   21578:	beq	21598 <__assert_fail@plt+0xf6d0>
   2157c:	b	21620 <__assert_fail@plt+0xf758>
   21580:	ldrb	r0, [sp, #182]	; 0xb6
   21584:	ldr	r1, [sp, #48]	; 0x30
   21588:	cmp	r0, #0
   2158c:	bne	22518 <__assert_fail@plt+0x10650>
   21590:	cmp	r6, #10
   21594:	bne	21620 <__assert_fail@plt+0xf758>
   21598:	ldrb	r0, [sp, #181]	; 0xb5
   2159c:	cmp	r0, #0
   215a0:	movwne	r0, #1
   215a4:	lsl	r3, r0, #1
   215a8:	tst	r3, #1
   215ac:	bne	2161c <__assert_fail@plt+0xf754>
   215b0:	cmp	r3, #0
   215b4:	beq	21620 <__assert_fail@plt+0xf758>
   215b8:	ands	r1, r3, #2
   215bc:	and	r0, r3, #4
   215c0:	cmpne	r0, #0
   215c4:	bne	215f4 <__assert_fail@plt+0xf72c>
   215c8:	cmp	r1, #0
   215cc:	bne	215fc <__assert_fail@plt+0xf734>
   215d0:	ldr	r9, [r4, #36]	; 0x24
   215d4:	cmp	r0, #0
   215d8:	beq	214d4 <__assert_fail@plt+0xf60c>
   215dc:	ldr	r2, [r9, #40]	; 0x28
   215e0:	sub	r0, fp, #196	; 0xc4
   215e4:	mov	r1, r4
   215e8:	bl	2a378 <__assert_fail@plt+0x184b0>
   215ec:	mov	r9, r0
   215f0:	b	214d4 <__assert_fail@plt+0xf60c>
   215f4:	ldr	r9, [r4, #48]	; 0x30
   215f8:	b	214d4 <__assert_fail@plt+0xf60c>
   215fc:	ldr	r9, [r4, #44]	; 0x2c
   21600:	b	214d4 <__assert_fail@plt+0xf60c>
   21604:	ldr	r0, [sp, #192]	; 0xc0
   21608:	ldr	r1, [sp, #48]	; 0x30
   2160c:	and	r0, r0, #2
   21610:	eor	r3, r0, #10
   21614:	tst	r3, #1
   21618:	beq	215b0 <__assert_fail@plt+0xf6e8>
   2161c:	ldr	r9, [r4, #40]	; 0x28
   21620:	cmp	r9, #0
   21624:	beq	238dc <__assert_fail@plt+0x11a14>
   21628:	ldr	r0, [sp, #204]	; 0xcc
   2162c:	mov	r6, r1
   21630:	cmp	r0, #0
   21634:	beq	2164c <__assert_fail@plt+0xf784>
   21638:	str	r9, [r0, r5, lsl #2]
   2163c:	mov	r6, r1
   21640:	ldr	r0, [r4, #76]	; 0x4c
   21644:	cmp	r0, #0
   21648:	bne	22344 <__assert_fail@plt+0x1047c>
   2164c:	ldrb	r0, [r9, #52]	; 0x34
   21650:	mvn	sl, #0
   21654:	tst	r0, #16
   21658:	bne	22318 <__assert_fail@plt+0x10450>
   2165c:	mov	r0, #0
   21660:	str	r0, [sp, #64]	; 0x40
   21664:	ldr	r0, [sp, #144]	; 0x90
   21668:	ldr	r1, [sp, #160]	; 0xa0
   2166c:	cmp	r1, r0
   21670:	ble	2167c <__assert_fail@plt+0xf7b4>
   21674:	ldr	r8, [sp, #40]	; 0x28
   21678:	b	2169c <__assert_fail@plt+0xf7d4>
   2167c:	ldr	r8, [sp, #40]	; 0x28
   21680:	b	21f3c <__assert_fail@plt+0x10074>
   21684:	ldr	r6, [sp, #24]
   21688:	mov	r5, lr
   2168c:	ldr	r0, [sp, #144]	; 0x90
   21690:	ldr	r1, [sp, #160]	; 0xa0
   21694:	cmp	r1, r0
   21698:	ble	21f3c <__assert_fail@plt+0x10074>
   2169c:	ldr	r2, [sp, #140]	; 0x8c
   216a0:	ldr	r1, [sp, #152]	; 0x98
   216a4:	add	r7, r0, #1
   216a8:	mov	r4, r9
   216ac:	cmp	r7, r2
   216b0:	blt	216bc <__assert_fail@plt+0xf7f4>
   216b4:	cmp	r2, r1
   216b8:	blt	21dd4 <__assert_fail@plt+0xff0c>
   216bc:	ldr	r2, [sp, #132]	; 0x84
   216c0:	cmp	r7, r2
   216c4:	blt	216d0 <__assert_fail@plt+0xf808>
   216c8:	cmp	r2, r1
   216cc:	blt	21dd4 <__assert_fail@plt+0xff0c>
   216d0:	ldrb	r0, [r4, #52]	; 0x34
   216d4:	tst	r0, #32
   216d8:	bne	21994 <__assert_fail@plt+0xfacc>
   216dc:	ldr	r1, [sp, #144]	; 0x90
   216e0:	ldr	r0, [sp, #108]	; 0x6c
   216e4:	add	r2, r1, #1
   216e8:	str	r2, [sp, #144]	; 0x90
   216ec:	ldrb	r9, [r0, r1]
   216f0:	ldr	r0, [r4, #44]	; 0x2c
   216f4:	cmp	r0, #0
   216f8:	bne	2172c <__assert_fail@plt+0xf864>
   216fc:	ldr	r2, [r4, #48]	; 0x30
   21700:	cmp	r2, #0
   21704:	bne	21df0 <__assert_fail@plt+0xff28>
   21708:	ldr	r0, [sp, #188]	; 0xbc
   2170c:	mov	r1, r4
   21710:	bl	2e1bc <__assert_fail@plt+0x1c2f4>
   21714:	cmp	r0, #0
   21718:	bne	216f0 <__assert_fail@plt+0xf828>
   2171c:	mov	r0, #12
   21720:	mov	r9, #0
   21724:	str	r0, [fp, #-196]	; 0xffffff3c
   21728:	b	21730 <__assert_fail@plt+0xf868>
   2172c:	ldr	r9, [r0, r9, lsl #2]
   21730:	ldr	r0, [sp, #204]	; 0xcc
   21734:	cmp	r0, #0
   21738:	beq	21750 <__assert_fail@plt+0xf888>
   2173c:	sub	r0, fp, #196	; 0xc4
   21740:	add	r1, sp, #104	; 0x68
   21744:	mov	r2, r9
   21748:	bl	2c08c <__assert_fail@plt+0x1a1c4>
   2174c:	mov	r9, r0
   21750:	cmp	r9, #0
   21754:	beq	217a8 <__assert_fail@plt+0xf8e0>
   21758:	sub	r0, r4, r9
   2175c:	clz	r0, r0
   21760:	lsr	r0, r0, #5
   21764:	ands	r6, r6, r0
   21768:	ldrb	r0, [r9, #52]	; 0x34
   2176c:	moveq	r7, r5
   21770:	mov	r5, r7
   21774:	tst	r0, #16
   21778:	beq	2168c <__assert_fail@plt+0xf7c4>
   2177c:	sxtb	r0, r0
   21780:	cmn	r0, #1
   21784:	ble	21834 <__assert_fail@plt+0xf96c>
   21788:	ldr	r0, [sp, #44]	; 0x2c
   2178c:	ldr	sl, [sp, #144]	; 0x90
   21790:	cmp	r0, #0
   21794:	beq	21f50 <__assert_fail@plt+0x10088>
   21798:	mov	r8, #0
   2179c:	mov	r0, #1
   217a0:	str	r0, [sp, #64]	; 0x40
   217a4:	b	2168c <__assert_fail@plt+0xf7c4>
   217a8:	ldr	r0, [fp, #-196]	; 0xffffff3c
   217ac:	cmp	r0, #0
   217b0:	bne	238dc <__assert_fail@plt+0x11a14>
   217b4:	ldr	r0, [sp, #64]	; 0x40
   217b8:	ldr	r1, [sp, #44]	; 0x2c
   217bc:	cmp	r0, #0
   217c0:	mvn	r1, r1
   217c4:	movwne	r0, #1
   217c8:	tst	r1, r0
   217cc:	bne	21f3c <__assert_fail@plt+0x10074>
   217d0:	ldr	r0, [sp, #204]	; 0xcc
   217d4:	cmp	r0, #0
   217d8:	beq	21f3c <__assert_fail@plt+0x10074>
   217dc:	ldr	r2, [sp, #144]	; 0x90
   217e0:	ldr	r1, [sp, #208]	; 0xd0
   217e4:	add	r0, r0, #4
   217e8:	cmp	r2, r1
   217ec:	bge	21f3c <__assert_fail@plt+0x10074>
   217f0:	add	r3, r2, #1
   217f4:	str	r3, [sp, #144]	; 0x90
   217f8:	ldr	r2, [r0, r2, lsl #2]
   217fc:	cmp	r2, #0
   21800:	mov	r2, r3
   21804:	beq	217e8 <__assert_fail@plt+0xf920>
   21808:	sub	r0, fp, #196	; 0xc4
   2180c:	add	r1, sp, #104	; 0x68
   21810:	mov	r2, #0
   21814:	bl	2c08c <__assert_fail@plt+0x1a1c4>
   21818:	cmp	r0, #0
   2181c:	mov	r9, r0
   21820:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   21824:	cmpeq	r0, #0
   21828:	bne	2187c <__assert_fail@plt+0xf9b4>
   2182c:	ldr	r0, [sp, #204]	; 0xcc
   21830:	b	217dc <__assert_fail@plt+0xf914>
   21834:	ldr	r0, [sp, #144]	; 0x90
   21838:	cmn	r0, #1
   2183c:	ble	21874 <__assert_fail@plt+0xf9ac>
   21840:	ldr	r1, [sp, #152]	; 0x98
   21844:	cmp	r1, r0
   21848:	beq	21ea8 <__assert_fail@plt+0xffe0>
   2184c:	ldr	r1, [sp, #184]	; 0xb8
   21850:	cmp	r1, #2
   21854:	blt	21888 <__assert_fail@plt+0xf9c0>
   21858:	ldr	r1, [sp, #112]	; 0x70
   2185c:	ldr	r4, [r1, r0, lsl #2]
   21860:	cmn	r4, #1
   21864:	bne	218b8 <__assert_fail@plt+0xf9f0>
   21868:	sub	r0, r0, #1
   2186c:	cmn	r0, #1
   21870:	bne	2185c <__assert_fail@plt+0xf994>
   21874:	ldr	r3, [sp, #164]	; 0xa4
   21878:	b	218e0 <__assert_fail@plt+0xfa18>
   2187c:	cmp	r9, #0
   21880:	bne	21758 <__assert_fail@plt+0xf890>
   21884:	b	21f3c <__assert_fail@plt+0x10074>
   21888:	ldr	r1, [sp, #108]	; 0x6c
   2188c:	ldr	r2, [sp, #172]	; 0xac
   21890:	mov	r3, #1
   21894:	ldrb	r0, [r1, r0]
   21898:	ubfx	r1, r0, #5, #3
   2189c:	ldr	r1, [r2, r1, lsl #2]
   218a0:	and	r2, r0, #31
   218a4:	tst	r1, r3, lsl r2
   218a8:	moveq	r3, #0
   218ac:	cmpeq	r0, #10
   218b0:	bne	218e0 <__assert_fail@plt+0xfa18>
   218b4:	b	218d0 <__assert_fail@plt+0xfa08>
   218b8:	ldrb	r0, [sp, #182]	; 0xb6
   218bc:	cmp	r0, #0
   218c0:	bne	21ed0 <__assert_fail@plt+0x10008>
   218c4:	mov	r3, #0
   218c8:	cmp	r4, #10
   218cc:	bne	218e0 <__assert_fail@plt+0xfa18>
   218d0:	ldrb	r0, [sp, #181]	; 0xb5
   218d4:	cmp	r0, #0
   218d8:	movwne	r0, #1
   218dc:	lsl	r3, r0, #1
   218e0:	ldr	r0, [r9, #8]
   218e4:	cmp	r0, #1
   218e8:	blt	2168c <__assert_fail@plt+0xf7c4>
   218ec:	ldr	r1, [sp, #188]	; 0xbc
   218f0:	mov	lr, r5
   218f4:	ldr	r7, [r9, #12]
   218f8:	and	ip, r3, #8
   218fc:	and	r2, r3, #2
   21900:	and	r3, r3, #1
   21904:	str	r6, [sp, #24]
   21908:	ldr	r5, [r1]
   2190c:	b	2191c <__assert_fail@plt+0xfa54>
   21910:	add	r7, r7, #4
   21914:	subs	r0, r0, #1
   21918:	beq	21684 <__assert_fail@plt+0xf7bc>
   2191c:	ldr	r4, [r7]
   21920:	add	r1, r5, r4, lsl #3
   21924:	ldr	r1, [r1, #4]
   21928:	uxtb	r6, r1
   2192c:	cmp	r6, #2
   21930:	bne	21910 <__assert_fail@plt+0xfa48>
   21934:	movw	r6, #65280	; 0xff00
   21938:	movt	r6, #3
   2193c:	tst	r1, r6
   21940:	beq	21980 <__assert_fail@plt+0xfab8>
   21944:	cmp	r3, #0
   21948:	bne	21954 <__assert_fail@plt+0xfa8c>
   2194c:	ands	r6, r1, #1024	; 0x400
   21950:	bne	21910 <__assert_fail@plt+0xfa48>
   21954:	cmp	r3, #0
   21958:	andsne	r6, r1, #2048	; 0x800
   2195c:	bne	21910 <__assert_fail@plt+0xfa48>
   21960:	cmp	r2, #0
   21964:	bne	21970 <__assert_fail@plt+0xfaa8>
   21968:	ands	r6, r1, #8192	; 0x2000
   2196c:	bne	21910 <__assert_fail@plt+0xfa48>
   21970:	cmp	ip, #0
   21974:	bne	21980 <__assert_fail@plt+0xfab8>
   21978:	ands	r1, r1, #32768	; 0x8000
   2197c:	bne	21910 <__assert_fail@plt+0xfa48>
   21980:	ldr	r6, [sp, #24]
   21984:	cmp	r4, #0
   21988:	mov	r5, lr
   2198c:	bne	21788 <__assert_fail@plt+0xf8c0>
   21990:	b	2168c <__assert_fail@plt+0xf7c4>
   21994:	ldr	r0, [r4, #8]
   21998:	str	r6, [sp, #24]
   2199c:	cmp	r0, #1
   219a0:	blt	21e3c <__assert_fail@plt+0xff74>
   219a4:	ldr	ip, [sp, #188]	; 0xbc
   219a8:	mov	r6, #0
   219ac:	str	r5, [sp, #12]
   219b0:	str	ip, [sp, #20]
   219b4:	b	219c8 <__assert_fail@plt+0xfb00>
   219b8:	ldr	r0, [r4, #8]
   219bc:	add	r6, r6, #1
   219c0:	cmp	r6, r0
   219c4:	bge	21e3c <__assert_fail@plt+0xff74>
   219c8:	ldr	r0, [r4, #12]
   219cc:	ldr	r1, [r0, r6, lsl #2]
   219d0:	ldr	r0, [ip]
   219d4:	add	r0, r0, r1, lsl #3
   219d8:	ldr	r3, [r0, #4]
   219dc:	tst	r3, #1048576	; 0x100000
   219e0:	beq	219b8 <__assert_fail@plt+0xfaf0>
   219e4:	movw	r0, #65280	; 0xff00
   219e8:	movt	r0, #3
   219ec:	tst	r3, r0
   219f0:	beq	21b00 <__assert_fail@plt+0xfc38>
   219f4:	ldr	r0, [sp, #144]	; 0x90
   219f8:	cmn	r0, #1
   219fc:	ble	21a38 <__assert_fail@plt+0xfb70>
   21a00:	ldr	r2, [sp, #152]	; 0x98
   21a04:	cmp	r2, r0
   21a08:	beq	21d1c <__assert_fail@plt+0xfe54>
   21a0c:	ldr	r2, [sp, #184]	; 0xb8
   21a10:	cmp	r2, #2
   21a14:	blt	21a40 <__assert_fail@plt+0xfb78>
   21a18:	ldr	r2, [sp, #112]	; 0x70
   21a1c:	ldr	r5, [sp, #12]
   21a20:	ldr	r9, [r2, r0, lsl #2]
   21a24:	cmn	r9, #1
   21a28:	bne	21a84 <__assert_fail@plt+0xfbbc>
   21a2c:	sub	r0, r0, #1
   21a30:	cmn	r0, #1
   21a34:	bne	21a20 <__assert_fail@plt+0xfb58>
   21a38:	ldr	lr, [sp, #164]	; 0xa4
   21a3c:	b	21aac <__assert_fail@plt+0xfbe4>
   21a40:	mov	r9, r3
   21a44:	ldr	r3, [sp, #108]	; 0x6c
   21a48:	ldr	r2, [sp, #172]	; 0xac
   21a4c:	mov	lr, #1
   21a50:	ldrb	r0, [r3, r0]
   21a54:	ubfx	r3, r0, #5, #3
   21a58:	and	r5, r0, #31
   21a5c:	ldr	r3, [r2, r3, lsl #2]
   21a60:	mov	r2, #0
   21a64:	tst	r3, lr, lsl r5
   21a68:	ldr	r5, [sp, #12]
   21a6c:	bne	21ac4 <__assert_fail@plt+0xfbfc>
   21a70:	mov	r3, r9
   21a74:	mov	lr, #0
   21a78:	cmp	r0, #10
   21a7c:	beq	21a9c <__assert_fail@plt+0xfbd4>
   21a80:	b	21aac <__assert_fail@plt+0xfbe4>
   21a84:	ldrb	r0, [sp, #182]	; 0xb6
   21a88:	cmp	r0, #0
   21a8c:	bne	21d54 <__assert_fail@plt+0xfe8c>
   21a90:	mov	lr, #0
   21a94:	cmp	r9, #10
   21a98:	bne	21aac <__assert_fail@plt+0xfbe4>
   21a9c:	ldrb	r0, [sp, #181]	; 0xb5
   21aa0:	cmp	r0, #0
   21aa4:	movwne	r0, #1
   21aa8:	lsl	lr, r0, #1
   21aac:	and	r0, lr, #1
   21ab0:	tst	r3, #1024	; 0x400
   21ab4:	eor	r2, r0, #1
   21ab8:	beq	21ac4 <__assert_fail@plt+0xfbfc>
   21abc:	cmp	r0, #0
   21ac0:	beq	219b8 <__assert_fail@plt+0xfaf0>
   21ac4:	ldr	r0, [ip]
   21ac8:	cmp	r2, #0
   21acc:	add	r0, r0, r1, lsl #3
   21ad0:	ldr	r0, [r0, #4]
   21ad4:	bne	21ae0 <__assert_fail@plt+0xfc18>
   21ad8:	ands	r2, r0, #2048	; 0x800
   21adc:	bne	219b8 <__assert_fail@plt+0xfaf0>
   21ae0:	tst	lr, #2
   21ae4:	bne	21af0 <__assert_fail@plt+0xfc28>
   21ae8:	ands	r2, r0, #8192	; 0x2000
   21aec:	bne	219b8 <__assert_fail@plt+0xfaf0>
   21af0:	tst	lr, #8
   21af4:	bne	21b00 <__assert_fail@plt+0xfc38>
   21af8:	ands	r0, r0, #32768	; 0x8000
   21afc:	bne	219b8 <__assert_fail@plt+0xfaf0>
   21b00:	ldr	r3, [sp, #144]	; 0x90
   21b04:	mov	r0, ip
   21b08:	add	r2, sp, #104	; 0x68
   21b0c:	str	r6, [sp, #16]
   21b10:	mov	r9, r1
   21b14:	bl	2dc48 <__assert_fail@plt+0x1bd80>
   21b18:	ldr	r6, [sp, #16]
   21b1c:	ldr	ip, [sp, #20]
   21b20:	cmp	r0, #0
   21b24:	beq	219b8 <__assert_fail@plt+0xfaf0>
   21b28:	ldr	r1, [sp, #224]	; 0xe0
   21b2c:	mov	r3, r9
   21b30:	cmp	r1, r0
   21b34:	movlt	r1, r0
   21b38:	str	r1, [sp, #224]	; 0xe0
   21b3c:	ldr	r6, [sp, #144]	; 0x90
   21b40:	ldr	r2, [sp, #140]	; 0x8c
   21b44:	ldr	r1, [sp, #152]	; 0x98
   21b48:	ldr	r5, [sp, #208]	; 0xd0
   21b4c:	add	r6, r6, r0
   21b50:	cmp	r2, r6
   21b54:	cmple	r2, r1
   21b58:	blt	21b6c <__assert_fail@plt+0xfca4>
   21b5c:	ldr	r0, [sp, #132]	; 0x84
   21b60:	cmp	r0, r6
   21b64:	cmple	r0, r1
   21b68:	bge	21b88 <__assert_fail@plt+0xfcc0>
   21b6c:	add	r1, r6, #1
   21b70:	add	r0, sp, #104	; 0x68
   21b74:	bl	2be90 <__assert_fail@plt+0x19fc8>
   21b78:	ldr	ip, [sp, #20]
   21b7c:	mov	r3, r9
   21b80:	cmp	r0, #0
   21b84:	bne	21eb8 <__assert_fail@plt+0xfff0>
   21b88:	cmp	r6, r5
   21b8c:	ble	21bb8 <__assert_fail@plt+0xfcf0>
   21b90:	sub	r0, r6, r5
   21b94:	mov	r1, #0
   21b98:	lsl	r2, r0, #2
   21b9c:	ldr	r0, [sp, #204]	; 0xcc
   21ba0:	add	r0, r0, r5, lsl #2
   21ba4:	add	r0, r0, #4
   21ba8:	bl	11d0c <memset@plt>
   21bac:	ldr	ip, [sp, #20]
   21bb0:	mov	r3, r9
   21bb4:	str	r6, [sp, #208]	; 0xd0
   21bb8:	mov	r0, #0
   21bbc:	str	r0, [fp, #-48]	; 0xffffffd0
   21bc0:	ldr	r0, [sp, #204]	; 0xcc
   21bc4:	ldr	r1, [ip, #24]
   21bc8:	ldr	r9, [r0, r6, lsl #2]
   21bcc:	ldr	r0, [ip, #12]
   21bd0:	ldr	r0, [r0, r3, lsl #2]
   21bd4:	cmp	r9, #0
   21bd8:	add	r0, r0, r0, lsl #1
   21bdc:	add	r2, r1, r0, lsl #2
   21be0:	beq	21c04 <__assert_fail@plt+0xfd3c>
   21be4:	ldr	r1, [r9, #40]	; 0x28
   21be8:	sub	r0, fp, #192	; 0xc0
   21bec:	bl	2c29c <__assert_fail@plt+0x1a3d4>
   21bf0:	ldr	r5, [sp, #12]
   21bf4:	cmp	r0, #0
   21bf8:	str	r0, [fp, #-48]	; 0xffffffd0
   21bfc:	beq	21c18 <__assert_fail@plt+0xfd50>
   21c00:	b	21ec0 <__assert_fail@plt+0xfff8>
   21c04:	vldr	d16, [r2]
   21c08:	ldr	r0, [r2, #8]
   21c0c:	ldr	r5, [sp, #12]
   21c10:	str	r0, [fp, #-184]	; 0xffffff48
   21c14:	vstr	d16, [fp, #-192]	; 0xffffff40
   21c18:	cmp	r6, #0
   21c1c:	str	r6, [sp, #8]
   21c20:	str	r9, [sp, #4]
   21c24:	ble	21d30 <__assert_fail@plt+0xfe68>
   21c28:	ldr	r1, [sp, #152]	; 0x98
   21c2c:	sub	r3, r6, #1
   21c30:	cmp	r1, r3
   21c34:	ldr	r1, [sp, #20]
   21c38:	beq	21d40 <__assert_fail@plt+0xfe78>
   21c3c:	ldr	r0, [sp, #184]	; 0xb8
   21c40:	cmp	r0, #2
   21c44:	blt	21c70 <__assert_fail@plt+0xfda8>
   21c48:	ldr	r2, [sp, #112]	; 0x70
   21c4c:	sub	r0, fp, #48	; 0x30
   21c50:	ldr	r9, [r2, r3, lsl #2]
   21c54:	cmn	r9, #1
   21c58:	bne	21ca4 <__assert_fail@plt+0xfddc>
   21c5c:	sub	r3, r3, #1
   21c60:	cmn	r3, #1
   21c64:	bne	21c50 <__assert_fail@plt+0xfd88>
   21c68:	ldr	r3, [sp, #164]	; 0xa4
   21c6c:	b	21ccc <__assert_fail@plt+0xfe04>
   21c70:	ldr	r0, [sp, #108]	; 0x6c
   21c74:	ldr	r2, [sp, #172]	; 0xac
   21c78:	ldrb	r6, [r0, r3]
   21c7c:	mov	r3, #1
   21c80:	ubfx	r0, r6, #5, #3
   21c84:	ldr	r0, [r2, r0, lsl #2]
   21c88:	and	r2, r6, #31
   21c8c:	tst	r0, r3, lsl r2
   21c90:	sub	r0, fp, #48	; 0x30
   21c94:	moveq	r3, #0
   21c98:	cmpeq	r6, #10
   21c9c:	bne	21ccc <__assert_fail@plt+0xfe04>
   21ca0:	b	21cbc <__assert_fail@plt+0xfdf4>
   21ca4:	ldrb	r2, [sp, #182]	; 0xb6
   21ca8:	cmp	r2, #0
   21cac:	bne	21d90 <__assert_fail@plt+0xfec8>
   21cb0:	mov	r3, #0
   21cb4:	cmp	r9, #10
   21cb8:	bne	21ccc <__assert_fail@plt+0xfe04>
   21cbc:	ldrb	r2, [sp, #181]	; 0xb5
   21cc0:	cmp	r2, #0
   21cc4:	movwne	r2, #1
   21cc8:	lsl	r3, r2, #1
   21ccc:	sub	r2, fp, #192	; 0xc0
   21cd0:	bl	2a378 <__assert_fail@plt+0x184b0>
   21cd4:	ldr	r1, [sp, #204]	; 0xcc
   21cd8:	ldr	r6, [sp, #8]
   21cdc:	str	r0, [r1, r6, lsl #2]
   21ce0:	ldr	r0, [sp, #4]
   21ce4:	cmp	r0, #0
   21ce8:	beq	21cf4 <__assert_fail@plt+0xfe2c>
   21cec:	ldr	r0, [fp, #-184]	; 0xffffff48
   21cf0:	bl	176c0 <__assert_fail@plt+0x57f8>
   21cf4:	ldr	r0, [sp, #204]	; 0xcc
   21cf8:	ldr	ip, [sp, #20]
   21cfc:	ldr	r0, [r0, r6, lsl #2]
   21d00:	ldr	r6, [sp, #16]
   21d04:	cmp	r0, #0
   21d08:	bne	219b8 <__assert_fail@plt+0xfaf0>
   21d0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21d10:	cmp	r0, #0
   21d14:	beq	219b8 <__assert_fail@plt+0xfaf0>
   21d18:	b	21ec0 <__assert_fail@plt+0xfff8>
   21d1c:	ldr	r0, [sp, #192]	; 0xc0
   21d20:	ldr	r5, [sp, #12]
   21d24:	and	r0, r0, #2
   21d28:	eor	lr, r0, #10
   21d2c:	b	21aac <__assert_fail@plt+0xfbe4>
   21d30:	ldr	r3, [sp, #164]	; 0xa4
   21d34:	ldr	r1, [sp, #20]
   21d38:	sub	r0, fp, #48	; 0x30
   21d3c:	b	21ccc <__assert_fail@plt+0xfe04>
   21d40:	ldr	r0, [sp, #192]	; 0xc0
   21d44:	and	r0, r0, #2
   21d48:	eor	r3, r0, #10
   21d4c:	sub	r0, fp, #48	; 0x30
   21d50:	b	21ccc <__assert_fail@plt+0xfe04>
   21d54:	mov	r0, r9
   21d58:	str	r3, [sp, #4]
   21d5c:	str	r1, [sp, #8]
   21d60:	bl	11ce8 <iswalnum@plt>
   21d64:	mov	lr, #1
   21d68:	mov	r2, #0
   21d6c:	cmp	r9, #95	; 0x5f
   21d70:	beq	21dbc <__assert_fail@plt+0xfef4>
   21d74:	ldr	r5, [sp, #12]
   21d78:	ldr	ip, [sp, #20]
   21d7c:	ldr	r1, [sp, #8]
   21d80:	ldr	r3, [sp, #4]
   21d84:	cmp	r0, #0
   21d88:	beq	21a90 <__assert_fail@plt+0xfbc8>
   21d8c:	b	21ac4 <__assert_fail@plt+0xfbfc>
   21d90:	mov	r0, r9
   21d94:	bl	11ce8 <iswalnum@plt>
   21d98:	mov	r3, #1
   21d9c:	cmp	r9, #95	; 0x5f
   21da0:	beq	21dcc <__assert_fail@plt+0xff04>
   21da4:	ldr	r5, [sp, #12]
   21da8:	ldr	r1, [sp, #20]
   21dac:	cmp	r0, #0
   21db0:	sub	r0, fp, #48	; 0x30
   21db4:	beq	21cb0 <__assert_fail@plt+0xfde8>
   21db8:	b	21ccc <__assert_fail@plt+0xfe04>
   21dbc:	ldr	r5, [sp, #12]
   21dc0:	ldr	ip, [sp, #20]
   21dc4:	ldr	r1, [sp, #8]
   21dc8:	b	21ac4 <__assert_fail@plt+0xfbfc>
   21dcc:	ldr	r5, [sp, #12]
   21dd0:	b	21d34 <__assert_fail@plt+0xfe6c>
   21dd4:	add	r1, r0, #2
   21dd8:	add	r0, sp, #104	; 0x68
   21ddc:	bl	2be90 <__assert_fail@plt+0x19fc8>
   21de0:	cmp	r0, #0
   21de4:	str	r0, [fp, #-196]	; 0xffffff3c
   21de8:	beq	216d0 <__assert_fail@plt+0xf808>
   21dec:	b	238dc <__assert_fail@plt+0x11a14>
   21df0:	ldr	r0, [sp, #144]	; 0x90
   21df4:	cmp	r0, #0
   21df8:	ble	21e34 <__assert_fail@plt+0xff6c>
   21dfc:	ldr	r1, [sp, #152]	; 0x98
   21e00:	sub	r3, r0, #1
   21e04:	cmp	r1, r3
   21e08:	beq	21ef0 <__assert_fail@plt+0x10028>
   21e0c:	ldr	r1, [sp, #184]	; 0xb8
   21e10:	cmp	r1, #2
   21e14:	blt	21e4c <__assert_fail@plt+0xff84>
   21e18:	ldr	r1, [sp, #112]	; 0x70
   21e1c:	ldr	r0, [r1, r3, lsl #2]
   21e20:	cmn	r0, #1
   21e24:	bne	21e74 <__assert_fail@plt+0xffac>
   21e28:	sub	r3, r3, #1
   21e2c:	cmn	r3, #1
   21e30:	bne	21e1c <__assert_fail@plt+0xff54>
   21e34:	ldr	r1, [sp, #164]	; 0xa4
   21e38:	b	21e9c <__assert_fail@plt+0xffd4>
   21e3c:	ldr	r6, [sp, #24]
   21e40:	mov	r0, #0
   21e44:	str	r0, [fp, #-196]	; 0xffffff3c
   21e48:	b	216dc <__assert_fail@plt+0xf814>
   21e4c:	ldr	r1, [sp, #108]	; 0x6c
   21e50:	ldr	ip, [sp, #172]	; 0xac
   21e54:	ldrb	r0, [r1, r3]
   21e58:	ubfx	r1, r0, #5, #3
   21e5c:	and	r3, r0, #31
   21e60:	ldr	ip, [ip, r1, lsl #2]
   21e64:	mov	r1, #1
   21e68:	tst	ip, r1, lsl r3
   21e6c:	bne	21e9c <__assert_fail@plt+0xffd4>
   21e70:	b	21e80 <__assert_fail@plt+0xffb8>
   21e74:	ldrb	r1, [sp, #182]	; 0xb6
   21e78:	cmp	r1, #0
   21e7c:	bne	21ef8 <__assert_fail@plt+0x10030>
   21e80:	mov	r1, #0
   21e84:	cmp	r0, #10
   21e88:	bne	21e9c <__assert_fail@plt+0xffd4>
   21e8c:	ldrb	r0, [sp, #181]	; 0xb5
   21e90:	cmp	r0, #0
   21e94:	movwne	r0, #1
   21e98:	lsl	r1, r0, #1
   21e9c:	bfi	r9, r1, #8, #1
   21ea0:	ldr	r9, [r2, r9, lsl #2]
   21ea4:	b	21730 <__assert_fail@plt+0xf868>
   21ea8:	ldr	r0, [sp, #192]	; 0xc0
   21eac:	and	r0, r0, #2
   21eb0:	eor	r3, r0, #10
   21eb4:	b	218e0 <__assert_fail@plt+0xfa18>
   21eb8:	ldr	r5, [sp, #12]
   21ebc:	str	r0, [fp, #-48]	; 0xffffffd0
   21ec0:	ldr	r6, [sp, #24]
   21ec4:	str	r0, [fp, #-196]	; 0xffffff3c
   21ec8:	mov	r9, #0
   21ecc:	b	21730 <__assert_fail@plt+0xf868>
   21ed0:	mov	r0, r4
   21ed4:	bl	11ce8 <iswalnum@plt>
   21ed8:	mov	r3, #1
   21edc:	cmp	r4, #95	; 0x5f
   21ee0:	beq	218e0 <__assert_fail@plt+0xfa18>
   21ee4:	cmp	r0, #0
   21ee8:	beq	218c4 <__assert_fail@plt+0xf9fc>
   21eec:	b	218e0 <__assert_fail@plt+0xfa18>
   21ef0:	mov	r1, #10
   21ef4:	b	21e9c <__assert_fail@plt+0xffd4>
   21ef8:	str	r5, [sp, #12]
   21efc:	str	r2, [sp, #24]
   21f00:	mov	r5, r0
   21f04:	bl	11ce8 <iswalnum@plt>
   21f08:	mov	r1, #1
   21f0c:	cmp	r5, #95	; 0x5f
   21f10:	beq	21f30 <__assert_fail@plt+0x10068>
   21f14:	mov	r3, r5
   21f18:	ldr	r5, [sp, #12]
   21f1c:	ldr	r2, [sp, #24]
   21f20:	cmp	r0, #0
   21f24:	mov	r0, r3
   21f28:	beq	21e80 <__assert_fail@plt+0xffb8>
   21f2c:	b	21e9c <__assert_fail@plt+0xffd4>
   21f30:	ldr	r5, [sp, #12]
   21f34:	ldr	r2, [sp, #24]
   21f38:	b	21e9c <__assert_fail@plt+0xffd4>
   21f3c:	cmp	r8, #0
   21f40:	beq	21f50 <__assert_fail@plt+0x10088>
   21f44:	ldr	r0, [r8]
   21f48:	add	r0, r0, r5
   21f4c:	str	r0, [r8]
   21f50:	ldr	r8, [sp, #60]	; 0x3c
   21f54:	ldr	r4, [sp, #80]	; 0x50
   21f58:	ldr	r9, [sp, #76]	; 0x4c
   21f5c:	cmn	sl, #1
   21f60:	beq	228c8 <__assert_fail@plt+0x10a00>
   21f64:	cmn	sl, #2
   21f68:	beq	238dc <__assert_fail@plt+0x11a14>
   21f6c:	ldr	r9, [sp, #52]	; 0x34
   21f70:	str	sl, [sp, #196]	; 0xc4
   21f74:	ldr	r2, [sp, #84]	; 0x54
   21f78:	ldr	lr, [sp, #96]	; 0x60
   21f7c:	ldrb	r0, [r9, #28]
   21f80:	cmp	r2, #2
   21f84:	bcc	21f90 <__assert_fail@plt+0x100c8>
   21f88:	ands	r1, r0, #16
   21f8c:	beq	21f9c <__assert_fail@plt+0x100d4>
   21f90:	ldr	r1, [lr, #76]	; 0x4c
   21f94:	cmp	r1, #0
   21f98:	beq	220fc <__assert_fail@plt+0x10234>
   21f9c:	ldr	r0, [sp, #204]	; 0xcc
   21fa0:	cmn	sl, #1
   21fa4:	ldr	r6, [r0, sl, lsl #2]
   21fa8:	ble	21fe0 <__assert_fail@plt+0x10118>
   21fac:	ldr	r0, [sp, #152]	; 0x98
   21fb0:	cmp	r0, sl
   21fb4:	beq	22438 <__assert_fail@plt+0x10570>
   21fb8:	ldr	r0, [sp, #184]	; 0xb8
   21fbc:	cmp	r0, #2
   21fc0:	blt	21ff0 <__assert_fail@plt+0x10128>
   21fc4:	ldr	r0, [sp, #112]	; 0x70
   21fc8:	ldr	r4, [r0, sl, lsl #2]
   21fcc:	cmn	r4, #1
   21fd0:	bne	22028 <__assert_fail@plt+0x10160>
   21fd4:	sub	sl, sl, #1
   21fd8:	cmn	sl, #1
   21fdc:	bne	21fc8 <__assert_fail@plt+0x10100>
   21fe0:	ldr	r3, [sp, #164]	; 0xa4
   21fe4:	movw	sl, #65280	; 0xff00
   21fe8:	movt	sl, #3
   21fec:	b	22058 <__assert_fail@plt+0x10190>
   21ff0:	ldr	r0, [sp, #108]	; 0x6c
   21ff4:	ldr	r1, [sp, #172]	; 0xac
   21ff8:	mov	r3, #1
   21ffc:	ldrb	r0, [r0, sl]
   22000:	movw	sl, #65280	; 0xff00
   22004:	movt	sl, #3
   22008:	ubfx	r2, r0, #5, #3
   2200c:	ldr	r1, [r1, r2, lsl #2]
   22010:	and	r2, r0, #31
   22014:	tst	r1, r3, lsl r2
   22018:	moveq	r3, #0
   2201c:	cmpeq	r0, #10
   22020:	bne	22058 <__assert_fail@plt+0x10190>
   22024:	b	22048 <__assert_fail@plt+0x10180>
   22028:	ldrb	r0, [sp, #182]	; 0xb6
   2202c:	movw	sl, #65280	; 0xff00
   22030:	movt	sl, #3
   22034:	cmp	r0, #0
   22038:	bne	224f0 <__assert_fail@plt+0x10628>
   2203c:	mov	r3, #0
   22040:	cmp	r4, #10
   22044:	bne	22058 <__assert_fail@plt+0x10190>
   22048:	ldrb	r0, [sp, #181]	; 0xb5
   2204c:	cmp	r0, #0
   22050:	movwne	r0, #1
   22054:	lsl	r3, r0, #1
   22058:	ldr	r0, [r6, #8]
   2205c:	cmp	r0, #1
   22060:	blt	220ec <__assert_fail@plt+0x10224>
   22064:	ldr	r7, [r6, #12]
   22068:	ldr	r6, [sp, #188]	; 0xbc
   2206c:	and	ip, r3, #8
   22070:	and	r2, r3, #2
   22074:	and	r3, r3, #1
   22078:	ldr	r6, [r6]
   2207c:	b	2208c <__assert_fail@plt+0x101c4>
   22080:	add	r7, r7, #4
   22084:	subs	r0, r0, #1
   22088:	beq	220ec <__assert_fail@plt+0x10224>
   2208c:	ldr	r5, [r7]
   22090:	add	r4, r6, r5, lsl #3
   22094:	ldr	r4, [r4, #4]
   22098:	uxtb	r1, r4
   2209c:	cmp	r1, #2
   220a0:	bne	22080 <__assert_fail@plt+0x101b8>
   220a4:	tst	r4, sl
   220a8:	beq	220f0 <__assert_fail@plt+0x10228>
   220ac:	cmp	r3, #0
   220b0:	bne	220bc <__assert_fail@plt+0x101f4>
   220b4:	ands	r1, r4, #1024	; 0x400
   220b8:	bne	22080 <__assert_fail@plt+0x101b8>
   220bc:	cmp	r3, #0
   220c0:	andsne	r1, r4, #2048	; 0x800
   220c4:	bne	22080 <__assert_fail@plt+0x101b8>
   220c8:	cmp	r2, #0
   220cc:	bne	220d8 <__assert_fail@plt+0x10210>
   220d0:	ands	r1, r4, #8192	; 0x2000
   220d4:	bne	22080 <__assert_fail@plt+0x101b8>
   220d8:	cmp	ip, #0
   220dc:	bne	220f0 <__assert_fail@plt+0x10228>
   220e0:	ands	r1, r4, #32768	; 0x8000
   220e4:	bne	22080 <__assert_fail@plt+0x101b8>
   220e8:	b	220f0 <__assert_fail@plt+0x10228>
   220ec:	mov	r5, #0
   220f0:	str	r5, [sp, #200]	; 0xc8
   220f4:	ldr	r2, [sp, #84]	; 0x54
   220f8:	ldrb	r0, [r9, #28]
   220fc:	ldr	r4, [sp, #80]	; 0x50
   22100:	ldr	r9, [sp, #76]	; 0x4c
   22104:	cmp	r2, #2
   22108:	bcc	22120 <__assert_fail@plt+0x10258>
   2210c:	ands	r0, r0, #16
   22110:	bne	22120 <__assert_fail@plt+0x10258>
   22114:	ldrb	r0, [lr, #88]	; 0x58
   22118:	tst	r0, #1
   2211c:	bne	2212c <__assert_fail@plt+0x10264>
   22120:	ldr	r0, [lr, #76]	; 0x4c
   22124:	cmp	r0, #0
   22128:	beq	229a0 <__assert_fail@plt+0x10ad8>
   2212c:	ldr	r6, [sp, #196]	; 0xc4
   22130:	cmn	r6, #-1073741823	; 0xc0000001
   22134:	bcs	238dc <__assert_fail@plt+0x11a14>
   22138:	ldr	r0, [sp, #188]	; 0xbc
   2213c:	ldr	r8, [sp, #200]	; 0xc8
   22140:	str	r0, [sp, #64]	; 0x40
   22144:	mov	r0, #4
   22148:	add	r5, r0, r6, lsl #2
   2214c:	mov	r0, r5
   22150:	bl	34810 <__assert_fail@plt+0x22948>
   22154:	mov	r7, r0
   22158:	cmp	r0, #0
   2215c:	beq	23a64 <__assert_fail@plt+0x11b9c>
   22160:	ldr	r0, [sp, #64]	; 0x40
   22164:	ldr	r0, [r0, #76]	; 0x4c
   22168:	cmp	r0, #0
   2216c:	beq	22290 <__assert_fail@plt+0x103c8>
   22170:	mov	r0, r5
   22174:	bl	34810 <__assert_fail@plt+0x22948>
   22178:	cmp	r0, #0
   2217c:	beq	23a64 <__assert_fail@plt+0x11b9c>
   22180:	add	r9, r6, #1
   22184:	mov	r1, #0
   22188:	mov	r5, r0
   2218c:	lsl	r2, r9, #2
   22190:	bl	11d0c <memset@plt>
   22194:	ldr	r0, [sp, #36]	; 0x24
   22198:	mov	r1, #0
   2219c:	str	r6, [fp, #-180]	; 0xffffff4c
   221a0:	str	r8, [fp, #-184]	; 0xffffff48
   221a4:	str	r5, [fp, #-188]	; 0xffffff44
   221a8:	str	r7, [fp, #-192]	; 0xffffff40
   221ac:	str	r1, [r0]
   221b0:	str	r1, [r0, #4]
   221b4:	str	r1, [r0, #8]
   221b8:	add	r0, sp, #104	; 0x68
   221bc:	sub	r1, fp, #192	; 0xc0
   221c0:	bl	2f2f0 <__assert_fail@plt+0x1d428>
   221c4:	mov	sl, r0
   221c8:	mov	r0, #0
   221cc:	bl	176c0 <__assert_fail@plt+0x57f8>
   221d0:	cmp	sl, #0
   221d4:	bne	22900 <__assert_fail@plt+0x10a38>
   221d8:	ldr	r0, [r7]
   221dc:	cmp	r0, #0
   221e0:	beq	22694 <__assert_fail@plt+0x107cc>
   221e4:	mov	r1, #0
   221e8:	cmp	r6, #0
   221ec:	mov	sl, #0
   221f0:	str	r5, [sp, #20]
   221f4:	str	r7, [sp, #24]
   221f8:	str	r6, [sp, #16]
   221fc:	str	r1, [sp, #12]
   22200:	bmi	222ec <__assert_fail@plt+0x10424>
   22204:	ldr	r1, [sp, #24]
   22208:	ldr	r6, [sp, #20]
   2220c:	sub	r7, r9, #1
   22210:	add	r5, r1, #4
   22214:	ldr	r2, [r6]
   22218:	cmp	r0, #0
   2221c:	beq	22274 <__assert_fail@plt+0x103ac>
   22220:	cmp	r2, #0
   22224:	beq	22278 <__assert_fail@plt+0x103b0>
   22228:	sub	r4, fp, #48	; 0x30
   2222c:	add	r1, r0, #4
   22230:	add	r2, r2, #4
   22234:	mov	r0, r4
   22238:	bl	2c29c <__assert_fail@plt+0x1a3d4>
   2223c:	cmp	r0, #0
   22240:	str	r0, [fp, #-196]	; 0xffffff3c
   22244:	bne	22310 <__assert_fail@plt+0x10448>
   22248:	ldr	r1, [sp, #64]	; 0x40
   2224c:	sub	r0, fp, #196	; 0xc4
   22250:	mov	r2, r4
   22254:	bl	2d930 <__assert_fail@plt+0x1ba68>
   22258:	str	r0, [r5, #-4]
   2225c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22260:	bl	176c0 <__assert_fail@plt+0x57f8>
   22264:	ldr	sl, [fp, #-196]	; 0xffffff3c
   22268:	cmp	sl, #0
   2226c:	beq	22278 <__assert_fail@plt+0x103b0>
   22270:	b	222ec <__assert_fail@plt+0x10424>
   22274:	str	r2, [r5, #-4]
   22278:	cmp	r7, #0
   2227c:	beq	222e8 <__assert_fail@plt+0x10420>
   22280:	ldr	r0, [r5], #4
   22284:	add	r6, r6, #4
   22288:	sub	r7, r7, #1
   2228c:	b	22214 <__assert_fail@plt+0x1034c>
   22290:	ldr	r0, [sp, #36]	; 0x24
   22294:	mov	r1, #0
   22298:	str	r6, [fp, #-180]	; 0xffffff4c
   2229c:	str	r8, [fp, #-184]	; 0xffffff48
   222a0:	str	r1, [fp, #-188]	; 0xffffff44
   222a4:	str	r7, [fp, #-192]	; 0xffffff40
   222a8:	str	r1, [r0]
   222ac:	str	r1, [r0, #4]
   222b0:	str	r1, [r0, #8]
   222b4:	add	r0, sp, #104	; 0x68
   222b8:	sub	r1, fp, #192	; 0xc0
   222bc:	bl	2f2f0 <__assert_fail@plt+0x1d428>
   222c0:	mov	sl, r0
   222c4:	mov	r0, #0
   222c8:	bl	176c0 <__assert_fail@plt+0x57f8>
   222cc:	cmp	sl, #0
   222d0:	bne	224e4 <__assert_fail@plt+0x1061c>
   222d4:	ldr	r0, [r7]
   222d8:	mov	r5, #0
   222dc:	cmp	r0, #0
   222e0:	beq	228b4 <__assert_fail@plt+0x109ec>
   222e4:	b	22978 <__assert_fail@plt+0x10ab0>
   222e8:	mov	sl, #0
   222ec:	ldr	r0, [sp, #20]
   222f0:	bl	176c0 <__assert_fail@plt+0x57f8>
   222f4:	ldr	r4, [sp, #80]	; 0x50
   222f8:	ldr	r9, [sp, #76]	; 0x4c
   222fc:	ldr	r7, [sp, #24]
   22300:	ldr	r6, [sp, #16]
   22304:	cmp	sl, #0
   22308:	beq	22978 <__assert_fail@plt+0x10ab0>
   2230c:	b	2290c <__assert_fail@plt+0x10a44>
   22310:	mov	sl, r0
   22314:	b	222ec <__assert_fail@plt+0x10424>
   22318:	sxtb	r0, r0
   2231c:	cmn	r0, #1
   22320:	ble	22448 <__assert_fail@plt+0x10580>
   22324:	mov	r0, #1
   22328:	mov	sl, r5
   2232c:	str	r0, [sp, #64]	; 0x40
   22330:	ldr	r0, [sp, #44]	; 0x2c
   22334:	cmp	r0, #0
   22338:	bne	21664 <__assert_fail@plt+0xf79c>
   2233c:	mov	sl, r5
   22340:	b	21f54 <__assert_fail@plt+0x1008c>
   22344:	ldr	r0, [r9, #8]
   22348:	str	r5, [sp, #12]
   2234c:	cmp	r0, #1
   22350:	blt	2241c <__assert_fail@plt+0x10554>
   22354:	ldr	r4, [sp, #188]	; 0xbc
   22358:	mov	r6, #0
   2235c:	b	22384 <__assert_fail@plt+0x104bc>
   22360:	add	r1, r1, #1
   22364:	str	r5, [r0, #4]
   22368:	str	r1, [sp, #228]	; 0xe4
   2236c:	mov	r1, #0
   22370:	str	r1, [r0]
   22374:	ldr	r0, [r9, #8]
   22378:	add	r6, r6, #1
   2237c:	cmp	r6, r0
   22380:	bge	2241c <__assert_fail@plt+0x10554>
   22384:	ldr	r1, [r9, #12]
   22388:	ldr	r5, [r1, r6, lsl #2]
   2238c:	ldr	r1, [r4]
   22390:	add	r2, r1, r5, lsl #3
   22394:	ldrb	r2, [r2, #4]
   22398:	cmp	r2, #8
   2239c:	bne	22378 <__assert_fail@plt+0x104b0>
   223a0:	ldr	r1, [r1, r5, lsl #3]
   223a4:	cmp	r1, #31
   223a8:	bgt	22378 <__assert_fail@plt+0x104b0>
   223ac:	ldr	r2, [r4, #80]	; 0x50
   223b0:	mov	r3, #1
   223b4:	tst	r2, r3, lsl r1
   223b8:	beq	22378 <__assert_fail@plt+0x104b0>
   223bc:	ldr	r0, [sp, #228]	; 0xe4
   223c0:	ldr	r7, [sp, #232]	; 0xe8
   223c4:	cmp	r0, r7
   223c8:	beq	223f8 <__assert_fail@plt+0x10530>
   223cc:	mov	r0, #1
   223d0:	mov	r1, #24
   223d4:	bl	347bc <__assert_fail@plt+0x228f4>
   223d8:	ldr	r1, [sp, #228]	; 0xe4
   223dc:	ldr	r2, [sp, #236]	; 0xec
   223e0:	str	r0, [r2, r1, lsl #2]
   223e4:	ldr	r0, [sp, #236]	; 0xec
   223e8:	ldr	r0, [r0, r1, lsl #2]
   223ec:	cmp	r0, #0
   223f0:	bne	22360 <__assert_fail@plt+0x10498>
   223f4:	b	22940 <__assert_fail@plt+0x10a78>
   223f8:	ldr	r0, [sp, #236]	; 0xec
   223fc:	lsl	r1, r7, #3
   22400:	bl	34840 <__assert_fail@plt+0x22978>
   22404:	cmp	r0, #0
   22408:	beq	22940 <__assert_fail@plt+0x10a78>
   2240c:	str	r0, [sp, #236]	; 0xec
   22410:	lsl	r0, r7, #1
   22414:	str	r0, [sp, #232]	; 0xe8
   22418:	b	223cc <__assert_fail@plt+0x10504>
   2241c:	mov	r6, #0
   22420:	str	r6, [fp, #-196]	; 0xffffff3c
   22424:	ldrb	r0, [r9, #52]	; 0x34
   22428:	tst	r0, #64	; 0x40
   2242c:	bne	22490 <__assert_fail@plt+0x105c8>
   22430:	ldr	r5, [sp, #12]
   22434:	b	2164c <__assert_fail@plt+0xf784>
   22438:	ldr	r0, [sp, #192]	; 0xc0
   2243c:	and	r0, r0, #2
   22440:	eor	r3, r0, #10
   22444:	b	21fe4 <__assert_fail@plt+0x1011c>
   22448:	cmn	r5, #1
   2244c:	ble	22488 <__assert_fail@plt+0x105c0>
   22450:	ldr	r0, [sp, #152]	; 0x98
   22454:	cmp	r0, r5
   22458:	beq	22948 <__assert_fail@plt+0x10a80>
   2245c:	ldr	r0, [sp, #184]	; 0xb8
   22460:	cmp	r0, #2
   22464:	blt	224b4 <__assert_fail@plt+0x105ec>
   22468:	ldr	r0, [sp, #112]	; 0x70
   2246c:	mov	r1, r5
   22470:	ldr	r4, [r0, r1, lsl #2]
   22474:	cmn	r4, #1
   22478:	bne	22538 <__assert_fail@plt+0x10670>
   2247c:	sub	r1, r1, #1
   22480:	cmn	r1, #1
   22484:	bne	22470 <__assert_fail@plt+0x105a8>
   22488:	ldr	r3, [sp, #164]	; 0xa4
   2248c:	b	22560 <__assert_fail@plt+0x10698>
   22490:	add	r1, r9, #4
   22494:	add	r0, sp, #104	; 0x68
   22498:	bl	2b510 <__assert_fail@plt+0x19648>
   2249c:	ldr	r5, [sp, #12]
   224a0:	cmp	r0, #0
   224a4:	str	r0, [fp, #-196]	; 0xffffff3c
   224a8:	beq	2164c <__assert_fail@plt+0xf784>
   224ac:	mov	sl, r0
   224b0:	b	21f54 <__assert_fail@plt+0x1008c>
   224b4:	ldr	r0, [sp, #108]	; 0x6c
   224b8:	ldr	r1, [sp, #172]	; 0xac
   224bc:	mov	r3, #1
   224c0:	ldrb	r0, [r0, r5]
   224c4:	ubfx	r2, r0, #5, #3
   224c8:	ldr	r1, [r1, r2, lsl #2]
   224cc:	and	r2, r0, #31
   224d0:	tst	r1, r3, lsl r2
   224d4:	moveq	r3, #0
   224d8:	cmpeq	r0, #10
   224dc:	bne	22560 <__assert_fail@plt+0x10698>
   224e0:	b	22550 <__assert_fail@plt+0x10688>
   224e4:	mov	r0, #0
   224e8:	str	r0, [sp, #12]
   224ec:	b	2290c <__assert_fail@plt+0x10a44>
   224f0:	mov	r0, r4
   224f4:	mov	r5, lr
   224f8:	bl	11ce8 <iswalnum@plt>
   224fc:	mov	r3, #1
   22500:	cmp	r4, #95	; 0x5f
   22504:	beq	22938 <__assert_fail@plt+0x10a70>
   22508:	cmp	r0, #0
   2250c:	mov	lr, r5
   22510:	beq	2203c <__assert_fail@plt+0x10174>
   22514:	b	22058 <__assert_fail@plt+0x10190>
   22518:	mov	r0, r6
   2251c:	bl	11ce8 <iswalnum@plt>
   22520:	ldr	r1, [sp, #48]	; 0x30
   22524:	cmp	r6, #95	; 0x5f
   22528:	beq	2161c <__assert_fail@plt+0xf754>
   2252c:	cmp	r0, #0
   22530:	beq	21590 <__assert_fail@plt+0xf6c8>
   22534:	b	2161c <__assert_fail@plt+0xf754>
   22538:	ldrb	r0, [sp, #182]	; 0xb6
   2253c:	cmp	r0, #0
   22540:	bne	22958 <__assert_fail@plt+0x10a90>
   22544:	mov	r3, #0
   22548:	cmp	r4, #10
   2254c:	bne	22560 <__assert_fail@plt+0x10698>
   22550:	ldrb	r0, [sp, #181]	; 0xb5
   22554:	cmp	r0, #0
   22558:	movwne	r0, #1
   2255c:	lsl	r3, r0, #1
   22560:	ldr	r0, [r9, #8]
   22564:	cmp	r0, #1
   22568:	blt	2165c <__assert_fail@plt+0xf794>
   2256c:	str	r6, [sp, #24]
   22570:	ldr	r6, [sp, #188]	; 0xbc
   22574:	ldr	r7, [r9, #12]
   22578:	mov	ip, r5
   2257c:	and	r1, r3, #8
   22580:	and	r2, r3, #2
   22584:	and	r3, r3, #1
   22588:	ldr	r6, [r6]
   2258c:	b	2259c <__assert_fail@plt+0x106d4>
   22590:	add	r7, r7, #4
   22594:	subs	r0, r0, #1
   22598:	beq	2263c <__assert_fail@plt+0x10774>
   2259c:	ldr	r4, [r7]
   225a0:	add	r5, r6, r4, lsl #3
   225a4:	mov	lr, r4
   225a8:	ldr	r5, [r5, #4]
   225ac:	uxtb	r4, r5
   225b0:	cmp	r4, #2
   225b4:	bne	22590 <__assert_fail@plt+0x106c8>
   225b8:	movw	r4, #65280	; 0xff00
   225bc:	movt	r4, #3
   225c0:	tst	r5, r4
   225c4:	beq	22604 <__assert_fail@plt+0x1073c>
   225c8:	cmp	r3, #0
   225cc:	bne	225d8 <__assert_fail@plt+0x10710>
   225d0:	ands	r4, r5, #1024	; 0x400
   225d4:	bne	22590 <__assert_fail@plt+0x106c8>
   225d8:	cmp	r3, #0
   225dc:	andsne	r4, r5, #2048	; 0x800
   225e0:	bne	22590 <__assert_fail@plt+0x106c8>
   225e4:	cmp	r2, #0
   225e8:	bne	225f4 <__assert_fail@plt+0x1072c>
   225ec:	ands	r4, r5, #8192	; 0x2000
   225f0:	bne	22590 <__assert_fail@plt+0x106c8>
   225f4:	cmp	r1, #0
   225f8:	bne	22604 <__assert_fail@plt+0x1073c>
   225fc:	ands	r5, r5, #32768	; 0x8000
   22600:	bne	22590 <__assert_fail@plt+0x106c8>
   22604:	ldr	r1, [sp, #44]	; 0x2c
   22608:	clz	r0, lr
   2260c:	ldr	r6, [sp, #24]
   22610:	cmp	lr, #0
   22614:	mov	sl, ip
   22618:	mov	r5, ip
   2261c:	lsr	r0, r0, #5
   22620:	movwne	lr, #1
   22624:	mvneq	sl, #0
   22628:	str	lr, [sp, #64]	; 0x40
   2262c:	orr	r0, r1, r0
   22630:	cmp	r0, #0
   22634:	bne	21664 <__assert_fail@plt+0xf79c>
   22638:	b	2233c <__assert_fail@plt+0x10474>
   2263c:	ldr	r6, [sp, #24]
   22640:	mov	r0, #0
   22644:	mov	r5, ip
   22648:	b	21660 <__assert_fail@plt+0xf798>
   2264c:	ldr	r3, [sp, #164]	; 0xa4
   22650:	movw	lr, #65280	; 0xff00
   22654:	movt	lr, #3
   22658:	b	227a4 <__assert_fail@plt+0x108dc>
   2265c:	ldr	r0, [sp, #192]	; 0xc0
   22660:	and	r0, r0, #2
   22664:	eor	r3, r0, #10
   22668:	b	227a4 <__assert_fail@plt+0x108dc>
   2266c:	mov	r0, r7
   22670:	bl	11ce8 <iswalnum@plt>
   22674:	mov	r3, #1
   22678:	cmp	r7, #95	; 0x5f
   2267c:	beq	22650 <__assert_fail@plt+0x10788>
   22680:	movw	lr, #65280	; 0xff00
   22684:	cmp	r0, #0
   22688:	movt	lr, #3
   2268c:	beq	22788 <__assert_fail@plt+0x108c0>
   22690:	b	227a4 <__assert_fail@plt+0x108dc>
   22694:	ldr	r1, [r5]
   22698:	cmp	r1, #0
   2269c:	bne	221e4 <__assert_fail@plt+0x1031c>
   226a0:	cmp	r6, #1
   226a4:	blt	228ac <__assert_fail@plt+0x109e4>
   226a8:	ldr	r0, [sp, #204]	; 0xcc
   226ac:	lsl	r4, r6, #2
   226b0:	mov	r9, r6
   226b4:	sub	r0, r0, #4
   226b8:	b	226d0 <__assert_fail@plt+0x10808>
   226bc:	sub	r9, r9, #1
   226c0:	sub	r4, r4, #4
   226c4:	add	r1, r9, #1
   226c8:	cmp	r1, #2
   226cc:	blt	228ac <__assert_fail@plt+0x109e4>
   226d0:	ldr	r6, [r0, r9, lsl #2]
   226d4:	cmp	r6, #0
   226d8:	beq	226bc <__assert_fail@plt+0x107f4>
   226dc:	ldrb	r1, [r6, #52]	; 0x34
   226e0:	tst	r1, #16
   226e4:	beq	226bc <__assert_fail@plt+0x107f4>
   226e8:	sub	sl, r9, #1
   226ec:	cmp	r9, #0
   226f0:	str	r7, [sp, #24]
   226f4:	str	r5, [sp, #20]
   226f8:	ble	2264c <__assert_fail@plt+0x10784>
   226fc:	ldr	r0, [sp, #152]	; 0x98
   22700:	movw	lr, #65280	; 0xff00
   22704:	movt	lr, #3
   22708:	add	r0, r0, #1
   2270c:	cmp	r0, r9
   22710:	beq	2265c <__assert_fail@plt+0x10794>
   22714:	ldr	r0, [sp, #184]	; 0xb8
   22718:	cmp	r0, #2
   2271c:	blt	22748 <__assert_fail@plt+0x10880>
   22720:	ldr	r0, [sp, #112]	; 0x70
   22724:	mov	r1, sl
   22728:	ldr	r7, [r0, r1, lsl #2]
   2272c:	cmn	r7, #1
   22730:	bne	2277c <__assert_fail@plt+0x108b4>
   22734:	sub	r1, r1, #1
   22738:	cmn	r1, #1
   2273c:	bne	22728 <__assert_fail@plt+0x10860>
   22740:	ldr	r3, [sp, #164]	; 0xa4
   22744:	b	227a4 <__assert_fail@plt+0x108dc>
   22748:	ldr	r0, [sp, #108]	; 0x6c
   2274c:	ldr	r1, [sp, #172]	; 0xac
   22750:	mov	r3, #1
   22754:	add	r0, r0, r9
   22758:	ldrb	r0, [r0, #-1]
   2275c:	ubfx	r2, r0, #5, #3
   22760:	ldr	r1, [r1, r2, lsl #2]
   22764:	and	r2, r0, #31
   22768:	tst	r1, r3, lsl r2
   2276c:	moveq	r3, #0
   22770:	cmpeq	r0, #10
   22774:	bne	227a4 <__assert_fail@plt+0x108dc>
   22778:	b	22794 <__assert_fail@plt+0x108cc>
   2277c:	ldrb	r0, [sp, #182]	; 0xb6
   22780:	cmp	r0, #0
   22784:	bne	2266c <__assert_fail@plt+0x107a4>
   22788:	mov	r3, #0
   2278c:	cmp	r7, #10
   22790:	bne	227a4 <__assert_fail@plt+0x108dc>
   22794:	ldrb	r0, [sp, #181]	; 0xb5
   22798:	cmp	r0, #0
   2279c:	movwne	r0, #1
   227a0:	lsl	r3, r0, #1
   227a4:	ldr	r0, [r6, #8]
   227a8:	cmp	r0, #1
   227ac:	blt	22838 <__assert_fail@plt+0x10970>
   227b0:	ldr	r7, [r6, #12]
   227b4:	ldr	r6, [sp, #188]	; 0xbc
   227b8:	and	ip, r3, #8
   227bc:	and	r2, r3, #2
   227c0:	and	r3, r3, #1
   227c4:	ldr	r6, [r6]
   227c8:	b	227d8 <__assert_fail@plt+0x10910>
   227cc:	add	r7, r7, #4
   227d0:	subs	r0, r0, #1
   227d4:	beq	22838 <__assert_fail@plt+0x10970>
   227d8:	ldr	r8, [r7]
   227dc:	add	r5, r6, r8, lsl #3
   227e0:	ldr	r5, [r5, #4]
   227e4:	uxtb	r1, r5
   227e8:	cmp	r1, #2
   227ec:	bne	227cc <__assert_fail@plt+0x10904>
   227f0:	tst	r5, lr
   227f4:	beq	2283c <__assert_fail@plt+0x10974>
   227f8:	cmp	r3, #0
   227fc:	bne	22808 <__assert_fail@plt+0x10940>
   22800:	ands	r1, r5, #1024	; 0x400
   22804:	bne	227cc <__assert_fail@plt+0x10904>
   22808:	cmp	r3, #0
   2280c:	andsne	r1, r5, #2048	; 0x800
   22810:	bne	227cc <__assert_fail@plt+0x10904>
   22814:	cmp	r2, #0
   22818:	bne	22824 <__assert_fail@plt+0x1095c>
   2281c:	ands	r1, r5, #8192	; 0x2000
   22820:	bne	227cc <__assert_fail@plt+0x10904>
   22824:	cmp	ip, #0
   22828:	bne	2283c <__assert_fail@plt+0x10974>
   2282c:	ands	r1, r5, #32768	; 0x8000
   22830:	bne	227cc <__assert_fail@plt+0x10904>
   22834:	b	2283c <__assert_fail@plt+0x10974>
   22838:	mov	r8, #0
   2283c:	ldr	r5, [sp, #20]
   22840:	mov	r1, #0
   22844:	mov	r2, r4
   22848:	mov	r0, r5
   2284c:	bl	11d0c <memset@plt>
   22850:	sub	r0, fp, #188	; 0xbc
   22854:	ldr	r7, [sp, #24]
   22858:	mov	r1, #0
   2285c:	mov	r6, sl
   22860:	stm	r0, {r5, r8, sl}
   22864:	ldr	r0, [sp, #36]	; 0x24
   22868:	str	r7, [fp, #-192]	; 0xffffff40
   2286c:	str	r1, [r0]
   22870:	str	r1, [r0, #4]
   22874:	str	r1, [r0, #8]
   22878:	add	r0, sp, #104	; 0x68
   2287c:	sub	r1, fp, #192	; 0xc0
   22880:	bl	2f2f0 <__assert_fail@plt+0x1d428>
   22884:	mov	sl, r0
   22888:	mov	r0, #0
   2288c:	bl	176c0 <__assert_fail@plt+0x57f8>
   22890:	cmp	sl, #0
   22894:	bne	22900 <__assert_fail@plt+0x10a38>
   22898:	ldr	r0, [r7]
   2289c:	cmp	r0, #0
   228a0:	beq	22694 <__assert_fail@plt+0x107cc>
   228a4:	sub	r6, r9, #1
   228a8:	b	221e4 <__assert_fail@plt+0x1031c>
   228ac:	ldr	r4, [sp, #80]	; 0x50
   228b0:	ldr	r9, [sp, #76]	; 0x4c
   228b4:	mov	r0, r7
   228b8:	bl	176c0 <__assert_fail@plt+0x57f8>
   228bc:	mov	r0, r5
   228c0:	bl	176c0 <__assert_fail@plt+0x57f8>
   228c4:	ldr	r8, [sp, #60]	; 0x3c
   228c8:	add	r0, sp, #104	; 0x68
   228cc:	bl	2b360 <__assert_fail@plt+0x19498>
   228d0:	ldr	r0, [fp, #-200]	; 0xffffff38
   228d4:	mov	sl, #1
   228d8:	add	r6, r0, r8
   228dc:	cmp	r6, r9
   228e0:	str	r6, [fp, #-200]	; 0xffffff38
   228e4:	blt	239f4 <__assert_fail@plt+0x11b2c>
   228e8:	ldr	r7, [sp, #100]	; 0x64
   228ec:	ldr	r5, [sp, #92]	; 0x5c
   228f0:	ldr	r2, [sp, #88]	; 0x58
   228f4:	cmp	r4, r6
   228f8:	bge	2130c <__assert_fail@plt+0xf444>
   228fc:	b	239f4 <__assert_fail@plt+0x11b2c>
   22900:	ldr	r4, [sp, #80]	; 0x50
   22904:	ldr	r9, [sp, #76]	; 0x4c
   22908:	str	r5, [sp, #12]
   2290c:	mov	r0, r7
   22910:	bl	176c0 <__assert_fail@plt+0x57f8>
   22914:	ldr	r0, [sp, #12]
   22918:	bl	176c0 <__assert_fail@plt+0x57f8>
   2291c:	ldr	r8, [sp, #60]	; 0x3c
   22920:	ldr	lr, [sp, #96]	; 0x60
   22924:	cmp	sl, #0
   22928:	beq	229a0 <__assert_fail@plt+0x10ad8>
   2292c:	cmp	sl, #1
   22930:	beq	228c8 <__assert_fail@plt+0x10a00>
   22934:	b	239f4 <__assert_fail@plt+0x11b2c>
   22938:	mov	lr, r5
   2293c:	b	22058 <__assert_fail@plt+0x10190>
   22940:	mov	sl, #12
   22944:	b	21f6c <__assert_fail@plt+0x100a4>
   22948:	ldr	r0, [sp, #192]	; 0xc0
   2294c:	and	r0, r0, #2
   22950:	eor	r3, r0, #10
   22954:	b	22560 <__assert_fail@plt+0x10698>
   22958:	mov	r0, r4
   2295c:	bl	11ce8 <iswalnum@plt>
   22960:	mov	r3, #1
   22964:	cmp	r4, #95	; 0x5f
   22968:	beq	22560 <__assert_fail@plt+0x10698>
   2296c:	cmp	r0, #0
   22970:	beq	22544 <__assert_fail@plt+0x1067c>
   22974:	b	22560 <__assert_fail@plt+0x10698>
   22978:	ldr	r0, [sp, #204]	; 0xcc
   2297c:	bl	176c0 <__assert_fail@plt+0x57f8>
   22980:	mov	r0, #0
   22984:	str	r8, [sp, #200]	; 0xc8
   22988:	str	r7, [sp, #204]	; 0xcc
   2298c:	str	r6, [sp, #196]	; 0xc4
   22990:	bl	176c0 <__assert_fail@plt+0x57f8>
   22994:	mov	r0, #0
   22998:	bl	176c0 <__assert_fail@plt+0x57f8>
   2299c:	ldr	lr, [sp, #96]	; 0x60
   229a0:	ldr	r4, [sp, #84]	; 0x54
   229a4:	cmp	r4, #0
   229a8:	beq	239f0 <__assert_fail@plt+0x11b28>
   229ac:	ldr	r5, [sp, #32]
   229b0:	ldr	r9, [fp, #16]
   229b4:	cmp	r4, #1
   229b8:	beq	229e0 <__assert_fail@plt+0x10b18>
   229bc:	mvn	r0, r5
   229c0:	mov	r1, #255	; 0xff
   229c4:	mov	r6, lr
   229c8:	add	r0, r0, r9
   229cc:	lsl	r2, r0, #3
   229d0:	ldr	r0, [fp, #20]
   229d4:	add	r0, r0, #8
   229d8:	bl	11d0c <memset@plt>
   229dc:	mov	lr, r6
   229e0:	ldr	r2, [fp, #20]
   229e4:	cmp	r4, #2
   229e8:	mov	r0, #0
   229ec:	ldr	r1, [sp, #196]	; 0xc4
   229f0:	stm	r2, {r0, r1}
   229f4:	bcc	238c0 <__assert_fail@plt+0x119f8>
   229f8:	ldr	r0, [sp, #52]	; 0x34
   229fc:	ldrb	r0, [r0, #28]
   22a00:	ands	r0, r0, #16
   22a04:	bne	238c0 <__assert_fail@plt+0x119f8>
   22a08:	ldrb	r1, [lr, #88]	; 0x58
   22a0c:	mov	r0, #0
   22a10:	tst	r1, #1
   22a14:	mov	r1, #0
   22a18:	beq	22a2c <__assert_fail@plt+0x10b64>
   22a1c:	ldr	r2, [lr, #76]	; 0x4c
   22a20:	mov	r1, #0
   22a24:	cmp	r2, #0
   22a28:	movwgt	r1, #1
   22a2c:	ldr	r2, [sp, #52]	; 0x34
   22a30:	cmp	r1, #0
   22a34:	mov	r1, #0
   22a38:	ldr	r7, [r2]
   22a3c:	movw	r2, #32368	; 0x7e70
   22a40:	movt	r2, #3
   22a44:	vldr	d16, [r2]
   22a48:	ldr	r2, [r2, #8]
   22a4c:	str	r2, [fp, #-40]	; 0xffffffd8
   22a50:	sub	r2, fp, #192	; 0xc0
   22a54:	add	r6, r2, #12
   22a58:	mov	r2, #16
   22a5c:	vstr	d16, [fp, #-48]	; 0xffffffd0
   22a60:	str	r6, [fp, #-184]	; 0xffffff48
   22a64:	str	r2, [fp, #-188]	; 0xffffff44
   22a68:	str	r0, [fp, #-192]	; 0xffffff40
   22a6c:	beq	22a8c <__assert_fail@plt+0x10bc4>
   22a70:	mov	r0, #48	; 0x30
   22a74:	bl	34810 <__assert_fail@plt+0x22948>
   22a78:	cmp	r0, #0
   22a7c:	str	r0, [fp, #-40]	; 0xffffffd8
   22a80:	beq	238dc <__assert_fail@plt+0x11a14>
   22a84:	ldr	r0, [fp, #-192]	; 0xffffff40
   22a88:	sub	r1, fp, #48	; 0x30
   22a8c:	ldr	sl, [r7, #72]	; 0x48
   22a90:	cmp	r0, r4
   22a94:	str	r1, [sp, #88]	; 0x58
   22a98:	str	r6, [sp, #72]	; 0x48
   22a9c:	str	r7, [sp, #76]	; 0x4c
   22aa0:	bcs	22b8c <__assert_fail@plt+0x10cc4>
   22aa4:	sub	r0, fp, #192	; 0xc0
   22aa8:	mov	r1, r4
   22aac:	mov	r2, r6
   22ab0:	mov	r3, #8
   22ab4:	bl	354d8 <__assert_fail@plt+0x23610>
   22ab8:	cmp	r0, #0
   22abc:	bne	22b90 <__assert_fail@plt+0x10cc8>
   22ac0:	ldr	r0, [fp, #-184]	; 0xffffff48
   22ac4:	ldr	r1, [sp, #72]	; 0x48
   22ac8:	cmp	r0, r1
   22acc:	beq	22ad4 <__assert_fail@plt+0x10c0c>
   22ad0:	bl	176c0 <__assert_fail@plt+0x57f8>
   22ad4:	ldr	r0, [sp, #72]	; 0x48
   22ad8:	mov	sl, #12
   22adc:	str	r0, [fp, #-184]	; 0xffffff48
   22ae0:	mov	r0, #16
   22ae4:	str	r0, [fp, #-188]	; 0xffffff44
   22ae8:	mov	r0, #0
   22aec:	str	r0, [fp, #-192]	; 0xffffff40
   22af0:	ldr	r0, [sp, #88]	; 0x58
   22af4:	cmp	r0, #0
   22af8:	beq	239f4 <__assert_fail@plt+0x11b2c>
   22afc:	ldr	r0, [sp, #88]	; 0x58
   22b00:	ldr	r1, [r0]
   22b04:	ldr	r0, [r0, #8]
   22b08:	cmp	r1, #1
   22b0c:	blt	23b10 <__assert_fail@plt+0x11c48>
   22b10:	ldr	r4, [sp, #88]	; 0x58
   22b14:	mov	r5, #0
   22b18:	mov	r6, #0
   22b1c:	add	r0, r0, r5
   22b20:	ldr	r0, [r0, #20]
   22b24:	bl	176c0 <__assert_fail@plt+0x57f8>
   22b28:	ldr	r0, [r4, #8]
   22b2c:	add	r0, r0, r5
   22b30:	ldr	r0, [r0, #8]
   22b34:	bl	176c0 <__assert_fail@plt+0x57f8>
   22b38:	ldr	r1, [r4]
   22b3c:	ldr	r0, [r4, #8]
   22b40:	add	r6, r6, #1
   22b44:	add	r5, r5, #24
   22b48:	cmp	r6, r1
   22b4c:	blt	22b1c <__assert_fail@plt+0x10c54>
   22b50:	b	23b10 <__assert_fail@plt+0x11c48>
   22b54:	ldr	r1, [r3, #8]
   22b58:	cmp	r1, #0
   22b5c:	beq	22b6c <__assert_fail@plt+0x10ca4>
   22b60:	ldrsb	r1, [r4, #28]
   22b64:	cmp	r1, #0
   22b68:	bmi	20fd4 <__assert_fail@plt+0xf10c>
   22b6c:	mov	r0, #0
   22b70:	cmp	r6, #0
   22b74:	str	r0, [sp, #72]	; 0x48
   22b78:	beq	238d4 <__assert_fail@plt+0x11a0c>
   22b7c:	cmp	ip, #0
   22b80:	mov	r6, #0
   22b84:	bne	23a48 <__assert_fail@plt+0x11b80>
   22b88:	b	20fd8 <__assert_fail@plt+0xf110>
   22b8c:	str	r4, [fp, #-192]	; 0xffffff40
   22b90:	ldr	r6, [fp, #20]
   22b94:	ldr	r0, [fp, #-184]	; 0xffffff48
   22b98:	lsl	r2, r4, #3
   22b9c:	str	r2, [sp, #64]	; 0x40
   22ba0:	mov	r1, r6
   22ba4:	str	r0, [sp, #68]	; 0x44
   22ba8:	bl	11ab4 <memcpy@plt>
   22bac:	ldr	r3, [r6]
   22bb0:	ldr	r0, [r6, #4]
   22bb4:	mov	r6, #0
   22bb8:	cmp	r3, r0
   22bbc:	ble	22c64 <__assert_fail@plt+0x10d9c>
   22bc0:	mov	r0, r6
   22bc4:	bl	176c0 <__assert_fail@plt+0x57f8>
   22bc8:	ldr	r0, [fp, #-184]	; 0xffffff48
   22bcc:	ldr	r6, [sp, #72]	; 0x48
   22bd0:	cmp	r0, r6
   22bd4:	beq	22bdc <__assert_fail@plt+0x10d14>
   22bd8:	bl	176c0 <__assert_fail@plt+0x57f8>
   22bdc:	str	r6, [fp, #-184]	; 0xffffff48
   22be0:	ldr	r6, [sp, #88]	; 0x58
   22be4:	ldr	lr, [sp, #96]	; 0x60
   22be8:	mov	r0, #16
   22bec:	str	r0, [fp, #-188]	; 0xffffff44
   22bf0:	mov	r0, #0
   22bf4:	str	r0, [fp, #-192]	; 0xffffff40
   22bf8:	cmp	r6, #0
   22bfc:	beq	238c0 <__assert_fail@plt+0x119f8>
   22c00:	ldr	r1, [r6]
   22c04:	ldr	r0, [r6, #8]
   22c08:	mov	r7, lr
   22c0c:	cmp	r1, #1
   22c10:	blt	22c50 <__assert_fail@plt+0x10d88>
   22c14:	mov	r4, #0
   22c18:	mov	r5, #0
   22c1c:	add	r0, r0, r4
   22c20:	ldr	r0, [r0, #20]
   22c24:	bl	176c0 <__assert_fail@plt+0x57f8>
   22c28:	ldr	r0, [r6, #8]
   22c2c:	add	r0, r0, r4
   22c30:	ldr	r0, [r0, #8]
   22c34:	bl	176c0 <__assert_fail@plt+0x57f8>
   22c38:	ldr	r1, [r6]
   22c3c:	ldr	r0, [r6, #8]
   22c40:	add	r5, r5, #1
   22c44:	add	r4, r4, #24
   22c48:	cmp	r5, r1
   22c4c:	blt	22c1c <__assert_fail@plt+0x10d54>
   22c50:	bl	176c0 <__assert_fail@plt+0x57f8>
   22c54:	ldr	r5, [sp, #32]
   22c58:	ldr	r4, [sp, #84]	; 0x54
   22c5c:	mov	lr, r7
   22c60:	b	238c0 <__assert_fail@plt+0x119f8>
   22c64:	ldr	r0, [fp, #20]
   22c68:	mov	r8, #1
   22c6c:	mov	ip, #0
   22c70:	mov	r6, #0
   22c74:	mov	lr, #0
   22c78:	add	r0, r0, #4
   22c7c:	str	r0, [sp, #52]	; 0x34
   22c80:	lsl	r0, r4, #4
   22c84:	str	r0, [sp, #44]	; 0x2c
   22c88:	mov	r0, #0
   22c8c:	str	r0, [sp, #60]	; 0x3c
   22c90:	ldr	r0, [sp, #76]	; 0x4c
   22c94:	ldr	r0, [r0]
   22c98:	add	r1, r0, sl, lsl #3
   22c9c:	ldr	r7, [r1, #4]
   22ca0:	uxtb	r2, r7
   22ca4:	cmp	r2, #9
   22ca8:	beq	22cd8 <__assert_fail@plt+0x10e10>
   22cac:	cmp	r2, #8
   22cb0:	bne	22d60 <__assert_fail@plt+0x10e98>
   22cb4:	ldr	r0, [r0, sl, lsl #3]
   22cb8:	add	r0, r0, #1
   22cbc:	cmp	r0, r4
   22cc0:	bge	22d60 <__assert_fail@plt+0x10e98>
   22cc4:	ldr	r1, [fp, #20]
   22cc8:	str	r3, [r1, r0, lsl #3]!
   22ccc:	mvn	r0, #0
   22cd0:	str	r0, [r1, #4]
   22cd4:	b	22d60 <__assert_fail@plt+0x10e98>
   22cd8:	ldr	r0, [r0, sl, lsl #3]
   22cdc:	add	r0, r0, #1
   22ce0:	cmp	r0, r4
   22ce4:	bge	22d60 <__assert_fail@plt+0x10e98>
   22ce8:	ldr	r1, [fp, #20]
   22cec:	ldr	r2, [r1, r0, lsl #3]
   22cf0:	cmp	r2, r3
   22cf4:	bge	22d08 <__assert_fail@plt+0x10e40>
   22cf8:	add	r0, r1, r0, lsl #3
   22cfc:	str	r3, [r0, #4]
   22d00:	ldr	r0, [sp, #68]	; 0x44
   22d04:	b	22d28 <__assert_fail@plt+0x10e60>
   22d08:	tst	r7, #524288	; 0x80000
   22d0c:	beq	22d54 <__assert_fail@plt+0x10e8c>
   22d10:	ldr	r1, [sp, #68]	; 0x44
   22d14:	ldr	r1, [r1, r0, lsl #3]
   22d18:	cmn	r1, #1
   22d1c:	beq	22d54 <__assert_fail@plt+0x10e8c>
   22d20:	ldr	r0, [fp, #20]
   22d24:	ldr	r1, [sp, #68]	; 0x44
   22d28:	ldr	r2, [sp, #64]	; 0x40
   22d2c:	str	r6, [sp, #48]	; 0x30
   22d30:	mov	r7, r3
   22d34:	mov	r6, ip
   22d38:	str	lr, [sp, #56]	; 0x38
   22d3c:	bl	11ab4 <memcpy@plt>
   22d40:	mov	ip, r6
   22d44:	ldr	lr, [sp, #56]	; 0x38
   22d48:	ldr	r6, [sp, #48]	; 0x30
   22d4c:	mov	r3, r7
   22d50:	b	22d60 <__assert_fail@plt+0x10e98>
   22d54:	ldr	r1, [fp, #20]
   22d58:	add	r0, r1, r0, lsl #3
   22d5c:	str	r3, [r0, #4]
   22d60:	ldr	r0, [fp, #20]
   22d64:	ldr	r0, [r0, #4]
   22d68:	cmp	r3, r0
   22d6c:	ldreq	r0, [sp, #200]	; 0xc8
   22d70:	cmpeq	sl, r0
   22d74:	beq	22de0 <__assert_fail@plt+0x10f18>
   22d78:	ldr	r0, [sp, #88]	; 0x58
   22d7c:	cmp	r0, #0
   22d80:	beq	22eb0 <__assert_fail@plt+0x10fe8>
   22d84:	cmp	lr, #1
   22d88:	blt	22eb0 <__assert_fail@plt+0x10fe8>
   22d8c:	mov	r0, lr
   22d90:	mov	lr, r6
   22d94:	subs	r1, r0, #1
   22d98:	str	r0, [sp, #56]	; 0x38
   22d9c:	beq	22dc8 <__assert_fail@plt+0x10f00>
   22da0:	mov	r0, #0
   22da4:	add	r2, r0, r1
   22da8:	lsr	r6, r2, #1
   22dac:	ldr	r7, [ip, r6, lsl #2]
   22db0:	cmp	r7, sl
   22db4:	addlt	r0, r8, r2, lsr #1
   22db8:	movge	r1, r6
   22dbc:	cmp	r0, r1
   22dc0:	bcc	22da4 <__assert_fail@plt+0x10edc>
   22dc4:	b	22dcc <__assert_fail@plt+0x10f04>
   22dc8:	mov	r0, #0
   22dcc:	ldr	r0, [ip, r0, lsl #2]
   22dd0:	mov	r6, lr
   22dd4:	ldr	lr, [sp, #56]	; 0x38
   22dd8:	cmp	r0, sl
   22ddc:	bne	22eb0 <__assert_fail@plt+0x10fe8>
   22de0:	ldr	r7, [sp, #88]	; 0x58
   22de4:	cmp	r7, #0
   22de8:	beq	23824 <__assert_fail@plt+0x1195c>
   22dec:	ldr	r1, [sp, #52]	; 0x34
   22df0:	mov	r0, r4
   22df4:	b	22e04 <__assert_fail@plt+0x10f3c>
   22df8:	subs	r0, r0, #1
   22dfc:	add	r1, r1, #8
   22e00:	beq	23824 <__assert_fail@plt+0x1195c>
   22e04:	ldr	r2, [r1, #-4]
   22e08:	cmp	r2, #0
   22e0c:	bmi	22df8 <__assert_fail@plt+0x10f30>
   22e10:	ldr	r2, [r1]
   22e14:	cmn	r2, #1
   22e18:	bne	22df8 <__assert_fail@plt+0x10f30>
   22e1c:	ldr	r0, [r7]
   22e20:	cmp	r0, #0
   22e24:	beq	23824 <__assert_fail@plt+0x1195c>
   22e28:	sub	r0, r0, #1
   22e2c:	mov	sl, r4
   22e30:	mov	r9, r6
   22e34:	ldr	r6, [sp, #64]	; 0x40
   22e38:	str	r0, [r7]
   22e3c:	add	r5, r0, r0, lsl #1
   22e40:	ldr	r4, [r7, #8]
   22e44:	mov	r2, r6
   22e48:	ldr	r0, [r4, r5, lsl #3]!
   22e4c:	ldr	r1, [r4, #8]
   22e50:	str	r0, [sp, #80]	; 0x50
   22e54:	ldr	r0, [fp, #20]
   22e58:	bl	11ab4 <memcpy@plt>
   22e5c:	ldr	r0, [r4, #8]
   22e60:	mov	r2, r6
   22e64:	add	r1, r0, sl, lsl #3
   22e68:	ldr	r0, [sp, #68]	; 0x44
   22e6c:	bl	11ab4 <memcpy@plt>
   22e70:	mov	r0, r9
   22e74:	bl	176c0 <__assert_fail@plt+0x57f8>
   22e78:	ldr	r0, [r7, #8]
   22e7c:	add	r0, r0, r5, lsl #3
   22e80:	ldr	r0, [r0, #8]
   22e84:	bl	176c0 <__assert_fail@plt+0x57f8>
   22e88:	ldr	r0, [r7, #8]
   22e8c:	ldr	r3, [sp, #80]	; 0x50
   22e90:	add	r0, r0, r5, lsl #3
   22e94:	ldr	r5, [sp, #32]
   22e98:	ldr	r6, [r0, #20]
   22e9c:	ldr	r1, [r0, #12]
   22ea0:	ldr	sl, [r0, #4]
   22ea4:	ldr	lr, [r0, #16]
   22ea8:	mov	ip, r6
   22eac:	str	r1, [sp, #60]	; 0x3c
   22eb0:	ldr	r4, [sp, #188]	; 0xbc
   22eb4:	str	r3, [sp, #80]	; 0x50
   22eb8:	ldr	r0, [r4]
   22ebc:	add	r1, r0, sl, lsl #3
   22ec0:	ldr	r1, [r1, #4]
   22ec4:	tst	r1, #8
   22ec8:	bne	22f60 <__assert_fail@plt+0x11098>
   22ecc:	tst	r1, #1048576	; 0x100000
   22ed0:	bne	22fd8 <__assert_fail@plt+0x11110>
   22ed4:	uxtb	r1, r1
   22ed8:	cmp	r1, #4
   22edc:	bne	23000 <__assert_fail@plt+0x11138>
   22ee0:	ldr	r0, [r0, sl, lsl #3]
   22ee4:	ldr	r1, [sp, #84]	; 0x54
   22ee8:	mov	r7, #0
   22eec:	add	r0, r0, #1
   22ef0:	cmp	r0, r1
   22ef4:	bge	22f08 <__assert_fail@plt+0x11040>
   22ef8:	ldr	r1, [fp, #20]
   22efc:	ldr	r2, [r1, r0, lsl #3]!
   22f00:	ldr	r1, [r1, #4]
   22f04:	sub	r7, r1, r2
   22f08:	ldr	r1, [sp, #88]	; 0x58
   22f0c:	cmp	r1, #0
   22f10:	beq	232e8 <__assert_fail@plt+0x11420>
   22f14:	ldr	r1, [sp, #84]	; 0x54
   22f18:	cmp	r0, r1
   22f1c:	bge	22f58 <__assert_fail@plt+0x11090>
   22f20:	ldr	r2, [fp, #20]
   22f24:	ldr	r1, [r2, r0, lsl #3]
   22f28:	cmn	r1, #1
   22f2c:	beq	22f58 <__assert_fail@plt+0x11090>
   22f30:	add	r0, r2, r0, lsl #3
   22f34:	ldr	r0, [r0, #4]
   22f38:	cmn	r0, #1
   22f3c:	beq	22f58 <__assert_fail@plt+0x11090>
   22f40:	cmp	r7, #0
   22f44:	beq	2330c <__assert_fail@plt+0x11444>
   22f48:	ldr	r0, [sp, #132]	; 0x84
   22f4c:	sub	r0, r0, r3
   22f50:	cmp	r0, r7
   22f54:	bge	2356c <__assert_fail@plt+0x116a4>
   22f58:	ldr	r7, [sp, #88]	; 0x58
   22f5c:	b	231e4 <__assert_fail@plt+0x1131c>
   22f60:	ldr	r0, [sp, #204]	; 0xcc
   22f64:	ldr	r4, [r4, #20]
   22f68:	cmp	lr, #1
   22f6c:	ldr	r0, [r0, r3, lsl #2]
   22f70:	str	r0, [sp, #100]	; 0x64
   22f74:	blt	22fb8 <__assert_fail@plt+0x110f0>
   22f78:	mov	r0, #0
   22f7c:	subs	r1, lr, #1
   22f80:	beq	22fa4 <__assert_fail@plt+0x110dc>
   22f84:	add	r2, r0, r1
   22f88:	lsr	r3, r2, #1
   22f8c:	ldr	r7, [ip, r3, lsl #2]
   22f90:	cmp	r7, sl
   22f94:	addlt	r0, r8, r2, lsr #1
   22f98:	movge	r1, r3
   22f9c:	cmp	r0, r1
   22fa0:	bcc	22f84 <__assert_fail@plt+0x110bc>
   22fa4:	ldr	r0, [ip, r0, lsl #2]
   22fa8:	cmp	r0, sl
   22fac:	bne	22fb8 <__assert_fail@plt+0x110f0>
   22fb0:	str	lr, [sp, #56]	; 0x38
   22fb4:	b	230f8 <__assert_fail@plt+0x11230>
   22fb8:	ldr	r0, [sp, #60]	; 0x3c
   22fbc:	cmp	r0, #0
   22fc0:	beq	230cc <__assert_fail@plt+0x11204>
   22fc4:	cmp	lr, #0
   22fc8:	bne	235c4 <__assert_fail@plt+0x116fc>
   22fcc:	mov	r0, #1
   22fd0:	str	sl, [ip]
   22fd4:	b	230f4 <__assert_fail@plt+0x1122c>
   22fd8:	mov	r0, r4
   22fdc:	mov	r1, sl
   22fe0:	add	r2, sp, #104	; 0x68
   22fe4:	mov	r9, ip
   22fe8:	bl	2dc48 <__assert_fail@plt+0x1bd80>
   22fec:	ldr	r3, [sp, #80]	; 0x50
   22ff0:	mov	r1, r0
   22ff4:	cmp	r1, #0
   22ff8:	mov	ip, r9
   22ffc:	bne	23034 <__assert_fail@plt+0x1116c>
   23000:	ldr	r0, [r4]
   23004:	mov	r2, r3
   23008:	mov	r7, r6
   2300c:	mov	r6, ip
   23010:	add	r1, r0, sl, lsl #3
   23014:	add	r0, sp, #104	; 0x68
   23018:	bl	2dfac <__assert_fail@plt+0x1c0e4>
   2301c:	ldr	r3, [sp, #80]	; 0x50
   23020:	mov	ip, r6
   23024:	mov	r6, r7
   23028:	mov	r1, #1
   2302c:	cmp	r0, #0
   23030:	beq	231d8 <__assert_fail@plt+0x11310>
   23034:	ldr	r0, [r4, #12]
   23038:	ldr	r7, [sp, #88]	; 0x58
   2303c:	add	r3, r1, r3
   23040:	ldr	sl, [r0, sl, lsl #2]
   23044:	cmp	r7, #0
   23048:	beq	23280 <__assert_fail@plt+0x113b8>
   2304c:	ldr	r0, [sp, #196]	; 0xc4
   23050:	cmp	r3, r0
   23054:	bgt	231e4 <__assert_fail@plt+0x1131c>
   23058:	ldr	r0, [sp, #204]	; 0xcc
   2305c:	ldr	r0, [r0, r3, lsl #2]
   23060:	cmp	r0, #0
   23064:	beq	231e4 <__assert_fail@plt+0x1131c>
   23068:	ldr	r1, [r0, #8]
   2306c:	cmp	r1, #1
   23070:	blt	231e4 <__assert_fail@plt+0x1131c>
   23074:	ldr	r0, [r0, #12]
   23078:	mov	lr, ip
   2307c:	mov	ip, r6
   23080:	subs	r1, r1, #1
   23084:	mov	r2, #0
   23088:	beq	230b0 <__assert_fail@plt+0x111e8>
   2308c:	mov	r2, #0
   23090:	add	r4, r2, r1
   23094:	lsr	r7, r4, #1
   23098:	ldr	r6, [r0, r7, lsl #2]
   2309c:	cmp	r6, sl
   230a0:	addlt	r2, r8, r4, lsr #1
   230a4:	movge	r1, r7
   230a8:	cmp	r2, r1
   230ac:	bcc	23090 <__assert_fail@plt+0x111c8>
   230b0:	ldr	r0, [r0, r2, lsl #2]
   230b4:	mov	r6, ip
   230b8:	mov	ip, lr
   230bc:	mov	lr, #0
   230c0:	cmp	r0, sl
   230c4:	beq	23488 <__assert_fail@plt+0x115c0>
   230c8:	b	231d8 <__assert_fail@plt+0x11310>
   230cc:	mov	r0, #4
   230d0:	bl	34810 <__assert_fail@plt+0x22948>
   230d4:	cmp	r0, #0
   230d8:	beq	23bb8 <__assert_fail@plt+0x11cf0>
   230dc:	mov	r6, r0
   230e0:	str	sl, [r0]
   230e4:	mov	r0, #1
   230e8:	str	r0, [sp, #60]	; 0x3c
   230ec:	mov	r0, #1
   230f0:	mov	ip, r6
   230f4:	str	r0, [sp, #56]	; 0x38
   230f8:	add	r0, sl, sl, lsl #1
   230fc:	add	r1, r4, r0, lsl #2
   23100:	ldr	lr, [r1, #4]
   23104:	cmp	lr, #1
   23108:	blt	231d8 <__assert_fail@plt+0x11310>
   2310c:	ldr	r0, [sp, #100]	; 0x64
   23110:	str	ip, [sp, #40]	; 0x28
   23114:	ldr	ip, [r1, #8]
   23118:	str	r6, [sp, #48]	; 0x30
   2311c:	mov	r6, #0
   23120:	ldr	r2, [r0, #8]
   23124:	mvn	r0, #0
   23128:	str	r0, [sp, #92]	; 0x5c
   2312c:	sub	sl, r2, #1
   23130:	cmp	r2, #1
   23134:	bge	23154 <__assert_fail@plt+0x1128c>
   23138:	b	23140 <__assert_fail@plt+0x11278>
   2313c:	ldr	r5, [sp, #32]
   23140:	add	r6, r6, #1
   23144:	cmp	r6, lr
   23148:	beq	231b4 <__assert_fail@plt+0x112ec>
   2314c:	cmp	r2, #1
   23150:	blt	23140 <__assert_fail@plt+0x11278>
   23154:	ldr	r0, [sp, #100]	; 0x64
   23158:	ldr	r4, [ip, r6, lsl #2]
   2315c:	mov	r5, #0
   23160:	cmp	sl, #0
   23164:	ldr	r7, [r0, #12]
   23168:	beq	23190 <__assert_fail@plt+0x112c8>
   2316c:	mov	r3, sl
   23170:	add	r0, r5, r3
   23174:	lsr	r1, r0, #1
   23178:	ldr	r9, [r7, r1, lsl #2]
   2317c:	cmp	r9, r4
   23180:	addlt	r5, r8, r0, lsr #1
   23184:	movge	r3, r1
   23188:	cmp	r5, r3
   2318c:	bcc	23170 <__assert_fail@plt+0x112a8>
   23190:	ldr	r0, [r7, r5, lsl #2]
   23194:	cmp	r0, r4
   23198:	bne	2313c <__assert_fail@plt+0x11274>
   2319c:	ldr	r0, [sp, #92]	; 0x5c
   231a0:	ldr	r5, [sp, #32]
   231a4:	cmn	r0, #1
   231a8:	bne	23290 <__assert_fail@plt+0x113c8>
   231ac:	str	r4, [sp, #92]	; 0x5c
   231b0:	b	23140 <__assert_fail@plt+0x11278>
   231b4:	ldr	r6, [sp, #48]	; 0x30
   231b8:	ldr	r3, [sp, #80]	; 0x50
   231bc:	ldr	ip, [sp, #40]	; 0x28
   231c0:	ldr	lr, [sp, #56]	; 0x38
   231c4:	ldr	sl, [sp, #92]	; 0x5c
   231c8:	cmn	sl, #1
   231cc:	bgt	23490 <__assert_fail@plt+0x115c8>
   231d0:	cmn	sl, #2
   231d4:	beq	23b1c <__assert_fail@plt+0x11c54>
   231d8:	ldr	r7, [sp, #88]	; 0x58
   231dc:	cmp	r7, #0
   231e0:	beq	23a7c <__assert_fail@plt+0x11bb4>
   231e4:	ldr	r0, [r7]
   231e8:	cmp	r0, #0
   231ec:	beq	23a54 <__assert_fail@plt+0x11b8c>
   231f0:	sub	r0, r0, #1
   231f4:	mov	sl, r6
   231f8:	ldr	r6, [sp, #64]	; 0x40
   231fc:	ldr	r9, [fp, #20]
   23200:	str	r0, [r7]
   23204:	add	r5, r0, r0, lsl #1
   23208:	ldr	r4, [r7, #8]
   2320c:	mov	r2, r6
   23210:	ldr	r0, [r4, r5, lsl #3]!
   23214:	ldr	r1, [r4, #8]
   23218:	str	r0, [sp, #80]	; 0x50
   2321c:	mov	r0, r9
   23220:	bl	11ab4 <memcpy@plt>
   23224:	ldr	r0, [r4, #8]
   23228:	ldr	r4, [sp, #84]	; 0x54
   2322c:	mov	r2, r6
   23230:	add	r1, r0, r4, lsl #3
   23234:	ldr	r0, [sp, #68]	; 0x44
   23238:	bl	11ab4 <memcpy@plt>
   2323c:	mov	r0, sl
   23240:	bl	176c0 <__assert_fail@plt+0x57f8>
   23244:	ldr	r0, [r7, #8]
   23248:	add	r0, r0, r5, lsl #3
   2324c:	ldr	r0, [r0, #8]
   23250:	bl	176c0 <__assert_fail@plt+0x57f8>
   23254:	ldr	r0, [r7, #8]
   23258:	ldr	r3, [sp, #80]	; 0x50
   2325c:	add	r0, r0, r5, lsl #3
   23260:	ldr	r5, [sp, #32]
   23264:	ldr	r6, [r0, #20]
   23268:	ldr	r1, [r0, #12]
   2326c:	ldr	sl, [r0, #4]
   23270:	ldr	lr, [r0, #16]
   23274:	mov	ip, r6
   23278:	str	r1, [sp, #60]	; 0x3c
   2327c:	b	23498 <__assert_fail@plt+0x115d0>
   23280:	mov	lr, #0
   23284:	cmn	sl, #1
   23288:	bgt	23490 <__assert_fail@plt+0x115c8>
   2328c:	b	231d0 <__assert_fail@plt+0x11308>
   23290:	ldr	lr, [sp, #56]	; 0x38
   23294:	ldr	sl, [sp, #88]	; 0x58
   23298:	ldr	r6, [sp, #48]	; 0x30
   2329c:	ldr	r3, [sp, #80]	; 0x50
   232a0:	ldr	ip, [sp, #40]	; 0x28
   232a4:	cmp	lr, #1
   232a8:	blt	23354 <__assert_fail@plt+0x1148c>
   232ac:	mov	r0, lr
   232b0:	mov	r9, lr
   232b4:	mov	r0, #0
   232b8:	subs	r1, lr, #1
   232bc:	beq	2332c <__assert_fail@plt+0x11464>
   232c0:	ldr	lr, [sp, #92]	; 0x5c
   232c4:	add	r2, r0, r1
   232c8:	lsr	r6, r2, #1
   232cc:	ldr	r7, [ip, r6, lsl #2]
   232d0:	cmp	r7, lr
   232d4:	addlt	r0, r8, r2, lsr #1
   232d8:	movge	r1, r6
   232dc:	cmp	r0, r1
   232e0:	bcc	232c4 <__assert_fail@plt+0x113fc>
   232e4:	b	23330 <__assert_fail@plt+0x11468>
   232e8:	cmp	r7, #0
   232ec:	beq	2330c <__assert_fail@plt+0x11444>
   232f0:	ldr	r0, [r4, #12]
   232f4:	add	r3, r7, r3
   232f8:	mov	lr, #0
   232fc:	ldr	sl, [r0, sl, lsl #2]
   23300:	cmn	sl, #1
   23304:	bgt	23490 <__assert_fail@plt+0x115c8>
   23308:	b	231d0 <__assert_fail@plt+0x11308>
   2330c:	ldr	r0, [sp, #60]	; 0x3c
   23310:	cmp	r0, #0
   23314:	beq	234ac <__assert_fail@plt+0x115e4>
   23318:	cmp	lr, #0
   2331c:	bne	236f0 <__assert_fail@plt+0x11828>
   23320:	str	sl, [ip]
   23324:	mov	r2, #1
   23328:	b	234d8 <__assert_fail@plt+0x11610>
   2332c:	ldr	lr, [sp, #92]	; 0x5c
   23330:	ldr	r0, [ip, r0, lsl #2]
   23334:	ldr	r6, [sp, #48]	; 0x30
   23338:	cmp	r0, lr
   2333c:	mov	lr, r9
   23340:	bne	23354 <__assert_fail@plt+0x1148c>
   23344:	mov	sl, r4
   23348:	cmn	sl, #1
   2334c:	bgt	23490 <__assert_fail@plt+0x115c8>
   23350:	b	231d0 <__assert_fail@plt+0x11308>
   23354:	cmp	sl, #0
   23358:	beq	231c4 <__assert_fail@plt+0x112fc>
   2335c:	ldr	r6, [sl]
   23360:	ldr	r0, [sl, #4]
   23364:	add	r1, r6, #1
   23368:	cmp	r1, r0
   2336c:	str	r1, [sl]
   23370:	bne	233a4 <__assert_fail@plt+0x114dc>
   23374:	ldr	r0, [sl, #8]
   23378:	add	r1, r1, r1, lsl #1
   2337c:	lsl	r1, r1, #4
   23380:	bl	34840 <__assert_fail@plt+0x22978>
   23384:	cmp	r0, #0
   23388:	beq	23b18 <__assert_fail@plt+0x11c50>
   2338c:	str	r0, [sl, #8]
   23390:	ldr	r3, [sp, #80]	; 0x50
   23394:	ldr	r1, [sl, #4]
   23398:	lsl	r1, r1, #1
   2339c:	str	r1, [sl, #4]
   233a0:	b	233a8 <__assert_fail@plt+0x114e0>
   233a4:	ldr	r0, [sl, #8]
   233a8:	add	r6, r6, r6, lsl #1
   233ac:	str	r3, [r0, r6, lsl #3]!
   233b0:	str	r4, [r0, #4]
   233b4:	ldr	r0, [sp, #44]	; 0x2c
   233b8:	bl	34810 <__assert_fail@plt+0x22948>
   233bc:	ldr	r1, [sl, #8]
   233c0:	cmp	r0, #0
   233c4:	add	r4, r1, r6, lsl #3
   233c8:	str	r0, [r4, #8]!
   233cc:	beq	23b18 <__assert_fail@plt+0x11c50>
   233d0:	ldr	r5, [sp, #64]	; 0x40
   233d4:	ldr	r1, [fp, #20]
   233d8:	mov	r2, r5
   233dc:	bl	11ab4 <memcpy@plt>
   233e0:	ldr	r0, [r4]
   233e4:	ldr	r1, [sp, #84]	; 0x54
   233e8:	mov	r2, r5
   233ec:	add	r0, r0, r1, lsl #3
   233f0:	ldr	r1, [sp, #68]	; 0x44
   233f4:	bl	11ab4 <memcpy@plt>
   233f8:	ldr	r0, [sl, #8]
   233fc:	ldr	lr, [sp, #56]	; 0x38
   23400:	add	r7, r0, r6, lsl #3
   23404:	cmp	lr, #1
   23408:	mov	r6, r7
   2340c:	str	lr, [r6, #16]!
   23410:	sub	r5, r6, #4
   23414:	blt	23464 <__assert_fail@plt+0x1159c>
   23418:	lsl	r4, lr, #2
   2341c:	str	lr, [r5]
   23420:	mov	r0, r4
   23424:	bl	34810 <__assert_fail@plt+0x22948>
   23428:	ldr	sl, [sp, #92]	; 0x5c
   2342c:	cmp	r0, #0
   23430:	str	r0, [r7, #20]
   23434:	beq	23bc0 <__assert_fail@plt+0x11cf8>
   23438:	ldr	r6, [sp, #48]	; 0x30
   2343c:	mov	r2, r4
   23440:	mov	r1, r6
   23444:	bl	11ab4 <memcpy@plt>
   23448:	ldr	r5, [sp, #32]
   2344c:	ldr	r3, [sp, #80]	; 0x50
   23450:	ldr	ip, [sp, #40]	; 0x28
   23454:	ldr	lr, [sp, #56]	; 0x38
   23458:	cmn	sl, #1
   2345c:	bgt	23490 <__assert_fail@plt+0x115c8>
   23460:	b	231d0 <__assert_fail@plt+0x11308>
   23464:	mov	r0, #0
   23468:	ldr	r6, [sp, #48]	; 0x30
   2346c:	ldr	r3, [sp, #80]	; 0x50
   23470:	ldr	ip, [sp, #40]	; 0x28
   23474:	ldr	sl, [sp, #92]	; 0x5c
   23478:	str	r0, [r5]
   2347c:	str	r0, [r5, #4]
   23480:	str	r0, [r5, #8]
   23484:	ldr	r5, [sp, #32]
   23488:	cmn	sl, #1
   2348c:	ble	231d0 <__assert_fail@plt+0x11308>
   23490:	ldr	r4, [sp, #84]	; 0x54
   23494:	ldr	r9, [fp, #20]
   23498:	ldr	r0, [r9, #4]
   2349c:	ldr	r9, [fp, #16]
   234a0:	cmp	r3, r0
   234a4:	ble	22c90 <__assert_fail@plt+0x10dc8>
   234a8:	b	22bc0 <__assert_fail@plt+0x10cf8>
   234ac:	mov	r0, #4
   234b0:	bl	34810 <__assert_fail@plt+0x22948>
   234b4:	cmp	r0, #0
   234b8:	beq	23bb8 <__assert_fail@plt+0x11cf0>
   234bc:	ldr	r3, [sp, #80]	; 0x50
   234c0:	mov	r6, r0
   234c4:	str	sl, [r0]
   234c8:	mov	r0, #1
   234cc:	mov	r2, #1
   234d0:	str	r0, [sp, #60]	; 0x3c
   234d4:	mov	ip, r6
   234d8:	ldr	r0, [sp, #204]	; 0xcc
   234dc:	ldr	r0, [r0, r3, lsl #2]
   234e0:	ldr	r1, [r0, #8]
   234e4:	cmp	r1, #1
   234e8:	blt	23000 <__assert_fail@plt+0x11138>
   234ec:	str	r2, [sp, #56]	; 0x38
   234f0:	ldr	r2, [r4, #20]
   234f4:	str	r7, [sp, #100]	; 0x64
   234f8:	add	r7, sl, sl, lsl #1
   234fc:	ldr	lr, [r0, #12]
   23500:	mov	r9, ip
   23504:	str	r6, [sp, #48]	; 0x30
   23508:	add	r2, r2, r7, lsl #2
   2350c:	ldr	r2, [r2, #8]
   23510:	ldr	r2, [r2]
   23514:	str	r2, [sp, #92]	; 0x5c
   23518:	subs	r2, r1, #1
   2351c:	mov	r1, #0
   23520:	beq	2354c <__assert_fail@plt+0x11684>
   23524:	ldr	ip, [sp, #92]	; 0x5c
   23528:	add	r0, r1, r2
   2352c:	lsr	r7, r0, #1
   23530:	ldr	r6, [lr, r7, lsl #2]
   23534:	cmp	r6, ip
   23538:	addlt	r1, r8, r0, lsr #1
   2353c:	movge	r2, r7
   23540:	cmp	r1, r2
   23544:	bcc	23528 <__assert_fail@plt+0x11660>
   23548:	b	23550 <__assert_fail@plt+0x11688>
   2354c:	ldr	ip, [sp, #92]	; 0x5c
   23550:	ldr	r0, [lr, r1, lsl #2]
   23554:	ldr	r6, [sp, #48]	; 0x30
   23558:	ldr	r1, [sp, #100]	; 0x64
   2355c:	cmp	r0, ip
   23560:	bne	22ff4 <__assert_fail@plt+0x1112c>
   23564:	mov	ip, r9
   23568:	b	231c0 <__assert_fail@plt+0x112f8>
   2356c:	ldr	r2, [sp, #108]	; 0x6c
   23570:	str	r6, [sp, #48]	; 0x30
   23574:	mov	r6, ip
   23578:	mov	r9, r3
   2357c:	add	r0, r2, r1
   23580:	add	r1, r2, r3
   23584:	mov	r2, r7
   23588:	bl	11ca0 <bcmp@plt>
   2358c:	cmp	r0, #0
   23590:	beq	235a4 <__assert_fail@plt+0x116dc>
   23594:	mov	ip, r6
   23598:	ldr	r7, [sp, #88]	; 0x58
   2359c:	ldr	r6, [sp, #48]	; 0x30
   235a0:	b	231e4 <__assert_fail@plt+0x1131c>
   235a4:	ldr	r0, [r4, #12]
   235a8:	add	r9, r7, r9
   235ac:	mov	ip, r6
   235b0:	ldr	r7, [sp, #88]	; 0x58
   235b4:	ldr	r6, [sp, #48]	; 0x30
   235b8:	mov	r3, r9
   235bc:	ldr	sl, [r0, sl, lsl #2]
   235c0:	b	2304c <__assert_fail@plt+0x11184>
   235c4:	ldr	r1, [sp, #60]	; 0x3c
   235c8:	mov	r9, ip
   235cc:	mov	r0, r6
   235d0:	str	lr, [sp, #56]	; 0x38
   235d4:	cmp	r1, lr
   235d8:	bne	2360c <__assert_fail@plt+0x11744>
   235dc:	ldr	r1, [sp, #60]	; 0x3c
   235e0:	lsl	r1, r1, #3
   235e4:	bl	34840 <__assert_fail@plt+0x22978>
   235e8:	cmp	r0, #0
   235ec:	mov	ip, r9
   235f0:	beq	23b1c <__assert_fail@plt+0x11c54>
   235f4:	mov	r1, r0
   235f8:	ldr	r0, [sp, #60]	; 0x3c
   235fc:	mov	r9, r1
   23600:	lsl	r0, r0, #1
   23604:	str	r0, [sp, #60]	; 0x3c
   23608:	mov	r0, r1
   2360c:	ldr	r1, [r9]
   23610:	cmp	r1, sl
   23614:	ble	23698 <__assert_fail@plt+0x117d0>
   23618:	ldr	ip, [sp, #56]	; 0x38
   2361c:	cmp	ip, #1
   23620:	blt	236d0 <__assert_fail@plt+0x11808>
   23624:	ldr	r5, [sp, #56]	; 0x38
   23628:	ands	r1, r5, #3
   2362c:	sub	r2, r5, #1
   23630:	beq	23658 <__assert_fail@plt+0x11790>
   23634:	ldr	r5, [sp, #56]	; 0x38
   23638:	add	r7, r9, r5, lsl #2
   2363c:	mov	r3, r7
   23640:	ldr	r6, [r3, #-4]!
   23644:	subs	r1, r1, #1
   23648:	sub	r5, r5, #1
   2364c:	str	r6, [r7]
   23650:	mov	r7, r3
   23654:	bne	23640 <__assert_fail@plt+0x11778>
   23658:	mov	ip, #0
   2365c:	cmp	r2, #3
   23660:	bcc	236d0 <__assert_fail@plt+0x11808>
   23664:	add	r2, r9, r5, lsl #2
   23668:	sub	r2, r2, #8
   2366c:	ldr	r6, [r2]
   23670:	ldr	r1, [r2, #4]
   23674:	ldmdb	r2, {r3, r7}
   23678:	sub	r5, r5, #4
   2367c:	cmp	r5, #0
   23680:	stmda	r2, {r3, r7}
   23684:	str	r6, [r2, #4]
   23688:	str	r1, [r2, #8]
   2368c:	sub	r2, r2, #16
   23690:	bgt	2366c <__assert_fail@plt+0x117a4>
   23694:	b	236d0 <__assert_fail@plt+0x11808>
   23698:	ldr	ip, [sp, #56]	; 0x38
   2369c:	add	r3, r9, ip, lsl #2
   236a0:	ldr	r2, [r3, #-4]
   236a4:	cmp	r2, sl
   236a8:	ble	236d0 <__assert_fail@plt+0x11808>
   236ac:	ldr	r1, [sp, #56]	; 0x38
   236b0:	sub	r1, r1, #2
   236b4:	str	r2, [r3]
   236b8:	sub	r1, r1, #1
   236bc:	ldr	r2, [r3, #-8]
   236c0:	sub	r3, r3, #4
   236c4:	cmp	r2, sl
   236c8:	bgt	236b4 <__assert_fail@plt+0x117ec>
   236cc:	add	ip, r1, #2
   236d0:	ldr	r1, [sp, #56]	; 0x38
   236d4:	ldr	r5, [sp, #32]
   236d8:	str	sl, [r9, ip, lsl #2]
   236dc:	mov	ip, r9
   236e0:	mov	r6, r0
   236e4:	add	r1, r1, #1
   236e8:	str	r1, [sp, #56]	; 0x38
   236ec:	b	230f8 <__assert_fail@plt+0x11230>
   236f0:	ldr	r1, [sp, #60]	; 0x3c
   236f4:	mov	r9, ip
   236f8:	mov	r0, r6
   236fc:	str	r7, [sp, #100]	; 0x64
   23700:	str	lr, [sp, #56]	; 0x38
   23704:	cmp	r1, lr
   23708:	bne	2373c <__assert_fail@plt+0x11874>
   2370c:	ldr	r1, [sp, #60]	; 0x3c
   23710:	lsl	r1, r1, #3
   23714:	bl	34840 <__assert_fail@plt+0x22978>
   23718:	cmp	r0, #0
   2371c:	mov	ip, r9
   23720:	beq	23b1c <__assert_fail@plt+0x11c54>
   23724:	mov	r1, r0
   23728:	ldr	r0, [sp, #60]	; 0x3c
   2372c:	mov	r9, r1
   23730:	lsl	r0, r0, #1
   23734:	str	r0, [sp, #60]	; 0x3c
   23738:	mov	r0, r1
   2373c:	ldr	r1, [r9]
   23740:	cmp	r1, sl
   23744:	ble	237c8 <__assert_fail@plt+0x11900>
   23748:	ldr	ip, [sp, #56]	; 0x38
   2374c:	cmp	ip, #1
   23750:	blt	23800 <__assert_fail@plt+0x11938>
   23754:	ldr	r5, [sp, #56]	; 0x38
   23758:	ands	r1, r5, #3
   2375c:	sub	r2, r5, #1
   23760:	beq	23788 <__assert_fail@plt+0x118c0>
   23764:	ldr	r5, [sp, #56]	; 0x38
   23768:	add	r7, r9, r5, lsl #2
   2376c:	mov	r3, r7
   23770:	ldr	r6, [r3, #-4]!
   23774:	subs	r1, r1, #1
   23778:	sub	r5, r5, #1
   2377c:	str	r6, [r7]
   23780:	mov	r7, r3
   23784:	bne	23770 <__assert_fail@plt+0x118a8>
   23788:	mov	ip, #0
   2378c:	cmp	r2, #3
   23790:	bcc	23800 <__assert_fail@plt+0x11938>
   23794:	add	r2, r9, r5, lsl #2
   23798:	sub	r2, r2, #8
   2379c:	ldr	r6, [r2]
   237a0:	ldr	r1, [r2, #4]
   237a4:	ldmdb	r2, {r3, r7}
   237a8:	sub	r5, r5, #4
   237ac:	cmp	r5, #0
   237b0:	stmda	r2, {r3, r7}
   237b4:	str	r6, [r2, #4]
   237b8:	str	r1, [r2, #8]
   237bc:	sub	r2, r2, #16
   237c0:	bgt	2379c <__assert_fail@plt+0x118d4>
   237c4:	b	23800 <__assert_fail@plt+0x11938>
   237c8:	ldr	ip, [sp, #56]	; 0x38
   237cc:	add	r3, r9, ip, lsl #2
   237d0:	ldr	r2, [r3, #-4]
   237d4:	cmp	r2, sl
   237d8:	ble	23800 <__assert_fail@plt+0x11938>
   237dc:	ldr	r1, [sp, #56]	; 0x38
   237e0:	sub	r1, r1, #2
   237e4:	str	r2, [r3]
   237e8:	sub	r1, r1, #1
   237ec:	ldr	r2, [r3, #-8]
   237f0:	sub	r3, r3, #4
   237f4:	cmp	r2, sl
   237f8:	bgt	237e4 <__assert_fail@plt+0x1191c>
   237fc:	add	ip, r1, #2
   23800:	ldr	r2, [sp, #56]	; 0x38
   23804:	ldr	r5, [sp, #32]
   23808:	ldr	r3, [sp, #80]	; 0x50
   2380c:	ldr	r7, [sp, #100]	; 0x64
   23810:	str	sl, [r9, ip, lsl #2]
   23814:	mov	ip, r9
   23818:	mov	r6, r0
   2381c:	add	r2, r2, #1
   23820:	b	234d8 <__assert_fail@plt+0x11610>
   23824:	mov	r0, r6
   23828:	bl	176c0 <__assert_fail@plt+0x57f8>
   2382c:	ldr	r0, [fp, #-184]	; 0xffffff48
   23830:	ldr	r6, [sp, #72]	; 0x48
   23834:	cmp	r0, r6
   23838:	beq	23840 <__assert_fail@plt+0x11978>
   2383c:	bl	176c0 <__assert_fail@plt+0x57f8>
   23840:	ldr	lr, [sp, #96]	; 0x60
   23844:	mov	r0, #16
   23848:	str	r6, [fp, #-184]	; 0xffffff48
   2384c:	cmp	r7, #0
   23850:	str	r0, [fp, #-188]	; 0xffffff44
   23854:	mov	r0, #0
   23858:	str	r0, [fp, #-192]	; 0xffffff40
   2385c:	beq	238c0 <__assert_fail@plt+0x119f8>
   23860:	ldr	r1, [r7]
   23864:	ldr	r0, [r7, #8]
   23868:	mov	r6, lr
   2386c:	cmp	r1, #1
   23870:	blt	238b0 <__assert_fail@plt+0x119e8>
   23874:	mov	r4, #0
   23878:	mov	r5, #0
   2387c:	add	r0, r0, r4
   23880:	ldr	r0, [r0, #20]
   23884:	bl	176c0 <__assert_fail@plt+0x57f8>
   23888:	ldr	r0, [r7, #8]
   2388c:	add	r0, r0, r4
   23890:	ldr	r0, [r0, #8]
   23894:	bl	176c0 <__assert_fail@plt+0x57f8>
   23898:	ldr	r1, [r7]
   2389c:	ldr	r0, [r7, #8]
   238a0:	add	r5, r5, #1
   238a4:	add	r4, r4, #24
   238a8:	cmp	r5, r1
   238ac:	blt	2387c <__assert_fail@plt+0x119b4>
   238b0:	bl	176c0 <__assert_fail@plt+0x57f8>
   238b4:	ldr	r5, [sp, #32]
   238b8:	ldr	r4, [sp, #84]	; 0x54
   238bc:	mov	lr, r6
   238c0:	ldr	r0, [fp, #20]
   238c4:	ldrb	r1, [sp, #180]	; 0xb4
   238c8:	mov	r2, r9
   238cc:	add	r0, r0, #4
   238d0:	b	2393c <__assert_fail@plt+0x11a74>
   238d4:	mov	r6, #0
   238d8:	b	20fd8 <__assert_fail@plt+0xf110>
   238dc:	mov	sl, #12
   238e0:	b	239f4 <__assert_fail@plt+0x11b2c>
   238e4:	ldr	r7, [sp, #132]	; 0x84
   238e8:	ldr	r6, [sp, #28]
   238ec:	ldr	ip, [sp, #116]	; 0x74
   238f0:	cmp	r3, r7
   238f4:	mov	r5, r6
   238f8:	addne	r5, ip, r3, lsl #2
   238fc:	ldr	r3, [r5]
   23900:	str	r3, [r0, #-4]
   23904:	ldr	r5, [r0]
   23908:	cmp	r5, r7
   2390c:	addne	r6, ip, r5, lsl #2
   23910:	ldr	r5, [sp, #32]
   23914:	ldr	r7, [r6]
   23918:	str	r7, [r0]
   2391c:	ldr	r6, [fp, #-200]	; 0xffffff38
   23920:	add	r3, r3, r6
   23924:	add	r7, r7, r6
   23928:	stmda	r0, {r3, r7}
   2392c:	sub	r2, r2, #1
   23930:	add	r0, r0, #8
   23934:	cmp	r5, r2
   23938:	beq	23958 <__assert_fail@plt+0x11a90>
   2393c:	ldr	r3, [r0, #-4]
   23940:	cmn	r3, #1
   23944:	beq	2392c <__assert_fail@plt+0x11a64>
   23948:	cmp	r1, #0
   2394c:	bne	238e4 <__assert_fail@plt+0x11a1c>
   23950:	ldr	r7, [r0]
   23954:	b	2391c <__assert_fail@plt+0x11a54>
   23958:	cmp	r5, #1
   2395c:	blt	2397c <__assert_fail@plt+0x11ab4>
   23960:	ldr	r0, [fp, #20]
   23964:	lsl	r2, r5, #3
   23968:	mov	r1, #255	; 0xff
   2396c:	add	r0, r0, r4, lsl #3
   23970:	mov	r4, lr
   23974:	bl	11d0c <memset@plt>
   23978:	mov	lr, r4
   2397c:	ldr	r0, [lr, #132]	; 0x84
   23980:	mov	sl, #0
   23984:	cmp	r0, #0
   23988:	beq	239f4 <__assert_fail@plt+0x11b2c>
   2398c:	ldr	r1, [sp, #84]	; 0x54
   23990:	cmp	r1, #2
   23994:	bcc	239f4 <__assert_fail@plt+0x11b2c>
   23998:	ldr	r1, [sp, #32]
   2399c:	ldr	r2, [fp, #16]
   239a0:	ldr	r6, [fp, #20]
   239a4:	mvn	r1, r1
   239a8:	add	r1, r1, r2
   239ac:	mov	r2, #0
   239b0:	b	239c0 <__assert_fail@plt+0x11af8>
   239b4:	add	r2, r2, #1
   239b8:	cmp	r1, r2
   239bc:	beq	239f0 <__assert_fail@plt+0x11b28>
   239c0:	ldr	r3, [r0, r2, lsl #2]
   239c4:	cmp	r2, r3
   239c8:	beq	239b4 <__assert_fail@plt+0x11aec>
   239cc:	add	r3, r6, r3, lsl #3
   239d0:	add	r7, r6, r2, lsl #3
   239d4:	ldr	r3, [r3, #8]
   239d8:	str	r3, [r7, #8]
   239dc:	ldr	r3, [r0, r2, lsl #2]
   239e0:	add	r3, r6, r3, lsl #3
   239e4:	ldr	r3, [r3, #12]
   239e8:	str	r3, [r7, #12]
   239ec:	b	239b4 <__assert_fail@plt+0x11aec>
   239f0:	mov	sl, #0
   239f4:	ldr	r0, [sp, #204]	; 0xcc
   239f8:	bl	176c0 <__assert_fail@plt+0x57f8>
   239fc:	ldr	r0, [sp, #96]	; 0x60
   23a00:	ldr	r0, [r0, #76]	; 0x4c
   23a04:	cmp	r0, #0
   23a08:	beq	23a24 <__assert_fail@plt+0x11b5c>
   23a0c:	add	r0, sp, #104	; 0x68
   23a10:	bl	2b360 <__assert_fail@plt+0x19498>
   23a14:	ldr	r0, [sp, #236]	; 0xec
   23a18:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a1c:	ldr	r0, [sp, #220]	; 0xdc
   23a20:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a24:	ldr	r0, [sp, #112]	; 0x70
   23a28:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a2c:	ldr	r0, [sp, #116]	; 0x74
   23a30:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a34:	ldrb	r0, [sp, #179]	; 0xb3
   23a38:	cmp	r0, #0
   23a3c:	beq	23a48 <__assert_fail@plt+0x11b80>
   23a40:	ldr	r0, [sp, #108]	; 0x6c
   23a44:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a48:	mov	r0, sl
   23a4c:	sub	sp, fp, #28
   23a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a54:	mov	r5, #0
   23a58:	b	23a80 <__assert_fail@plt+0x11bb8>
   23a5c:	mov	sl, r0
   23a60:	b	239f4 <__assert_fail@plt+0x11b2c>
   23a64:	mov	r0, r7
   23a68:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a6c:	mov	r0, #0
   23a70:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a74:	mov	sl, #12
   23a78:	b	239f4 <__assert_fail@plt+0x11b2c>
   23a7c:	mov	r5, #1
   23a80:	mov	r0, ip
   23a84:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a88:	ldr	r0, [fp, #-184]	; 0xffffff48
   23a8c:	ldr	r4, [sp, #72]	; 0x48
   23a90:	cmp	r0, r4
   23a94:	beq	23a9c <__assert_fail@plt+0x11bd4>
   23a98:	bl	176c0 <__assert_fail@plt+0x57f8>
   23a9c:	mov	r0, #16
   23aa0:	str	r4, [fp, #-184]	; 0xffffff48
   23aa4:	mov	sl, #1
   23aa8:	cmp	r5, #0
   23aac:	str	r0, [fp, #-188]	; 0xffffff44
   23ab0:	mov	r0, #0
   23ab4:	str	r0, [fp, #-192]	; 0xffffff40
   23ab8:	bne	239f4 <__assert_fail@plt+0x11b2c>
   23abc:	ldr	r0, [sp, #88]	; 0x58
   23ac0:	ldr	r1, [r0]
   23ac4:	ldr	r0, [r0, #8]
   23ac8:	cmp	r1, #1
   23acc:	blt	23b10 <__assert_fail@plt+0x11c48>
   23ad0:	ldr	r4, [sp, #88]	; 0x58
   23ad4:	mov	r5, #0
   23ad8:	mov	r6, #0
   23adc:	add	r0, r0, r5
   23ae0:	ldr	r0, [r0, #20]
   23ae4:	bl	176c0 <__assert_fail@plt+0x57f8>
   23ae8:	ldr	r0, [r4, #8]
   23aec:	add	r0, r0, r5
   23af0:	ldr	r0, [r0, #8]
   23af4:	bl	176c0 <__assert_fail@plt+0x57f8>
   23af8:	ldr	r1, [r4]
   23afc:	ldr	r0, [r4, #8]
   23b00:	add	r6, r6, #1
   23b04:	add	r5, r5, #24
   23b08:	cmp	r6, r1
   23b0c:	blt	23adc <__assert_fail@plt+0x11c14>
   23b10:	bl	176c0 <__assert_fail@plt+0x57f8>
   23b14:	b	239f4 <__assert_fail@plt+0x11b2c>
   23b18:	ldr	ip, [sp, #40]	; 0x28
   23b1c:	mov	r0, ip
   23b20:	bl	176c0 <__assert_fail@plt+0x57f8>
   23b24:	ldr	r0, [fp, #-184]	; 0xffffff48
   23b28:	ldr	r4, [sp, #72]	; 0x48
   23b2c:	cmp	r0, r4
   23b30:	beq	23b38 <__assert_fail@plt+0x11c70>
   23b34:	bl	176c0 <__assert_fail@plt+0x57f8>
   23b38:	mov	r0, #16
   23b3c:	str	r4, [fp, #-184]	; 0xffffff48
   23b40:	mov	sl, #12
   23b44:	str	r0, [fp, #-188]	; 0xffffff44
   23b48:	mov	r0, #0
   23b4c:	str	r0, [fp, #-192]	; 0xffffff40
   23b50:	ldr	r0, [sp, #88]	; 0x58
   23b54:	cmp	r0, #0
   23b58:	beq	239f4 <__assert_fail@plt+0x11b2c>
   23b5c:	ldr	r1, [r0]
   23b60:	ldr	r0, [r0, #8]
   23b64:	cmp	r1, #1
   23b68:	blt	23b10 <__assert_fail@plt+0x11c48>
   23b6c:	ldr	r4, [sp, #88]	; 0x58
   23b70:	mov	r5, #0
   23b74:	mov	r6, #0
   23b78:	add	r0, r0, r5
   23b7c:	ldr	r0, [r0, #20]
   23b80:	bl	176c0 <__assert_fail@plt+0x57f8>
   23b84:	ldr	r0, [r4, #8]
   23b88:	add	r0, r0, r5
   23b8c:	ldr	r0, [r0, #8]
   23b90:	bl	176c0 <__assert_fail@plt+0x57f8>
   23b94:	ldr	r1, [r4]
   23b98:	ldr	r0, [r4, #8]
   23b9c:	add	r6, r6, #1
   23ba0:	add	r5, r5, #24
   23ba4:	cmp	r6, r1
   23ba8:	blt	23b78 <__assert_fail@plt+0x11cb0>
   23bac:	b	23b10 <__assert_fail@plt+0x11c48>
   23bb0:	mov	sl, #1
   23bb4:	b	239f4 <__assert_fail@plt+0x11b2c>
   23bb8:	mov	ip, #0
   23bbc:	b	23b1c <__assert_fail@plt+0x11c54>
   23bc0:	ldr	ip, [sp, #40]	; 0x28
   23bc4:	mov	r0, #0
   23bc8:	str	r0, [r6]
   23bcc:	str	r0, [r5]
   23bd0:	b	23b1c <__assert_fail@plt+0x11c54>
   23bd4:	push	{fp, lr}
   23bd8:	mov	fp, sp
   23bdc:	sub	sp, sp, #16
   23be0:	mov	ip, #1
   23be4:	str	r2, [sp, #4]
   23be8:	str	ip, [sp, #12]
   23bec:	mov	ip, #0
   23bf0:	str	ip, [sp]
   23bf4:	ldr	ip, [fp, #8]
   23bf8:	str	ip, [sp, #8]
   23bfc:	bl	23c08 <__assert_fail@plt+0x11d40>
   23c00:	mov	sp, fp
   23c04:	pop	{fp, pc}
   23c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c0c:	add	fp, sp, #28
   23c10:	sub	sp, sp, #60	; 0x3c
   23c14:	mvn	r4, #0
   23c18:	cmp	r3, #0
   23c1c:	bmi	23da4 <__assert_fail@plt+0x11edc>
   23c20:	mov	r5, r3
   23c24:	mov	r8, r2
   23c28:	cmp	r3, r2
   23c2c:	bgt	23da4 <__assert_fail@plt+0x11edc>
   23c30:	mov	r6, r0
   23c34:	ldr	r0, [fp, #8]
   23c38:	mov	sl, r1
   23c3c:	movw	r1, #0
   23c40:	mov	r9, r8
   23c44:	ldr	r7, [r6]
   23c48:	movt	r1, #0
   23c4c:	add	r0, r0, r5
   23c50:	cmp	r0, r8
   23c54:	bicle	r9, r0, r0, asr #31
   23c58:	movw	r0, #0
   23c5c:	movt	r0, #0
   23c60:	orrs	r4, r1, r0
   23c64:	beq	23c70 <__assert_fail@plt+0x11da8>
   23c68:	add	r0, r7, #136	; 0x88
   23c6c:	bl	11a90 <pthread_mutex_lock@plt>
   23c70:	ldrb	r0, [r6, #28]
   23c74:	ldr	r3, [fp, #16]
   23c78:	str	r6, [fp, #-32]	; 0xffffffe0
   23c7c:	cmp	r9, r5
   23c80:	ubfx	r1, r0, #5, #2
   23c84:	str	r7, [fp, #-36]	; 0xffffffdc
   23c88:	str	r4, [fp, #-40]	; 0xffffffd8
   23c8c:	str	sl, [sp, #44]	; 0x2c
   23c90:	str	r1, [sp, #40]	; 0x28
   23c94:	ble	23cc8 <__assert_fail@plt+0x11e00>
   23c98:	tst	r0, #8
   23c9c:	bne	23cc8 <__assert_fail@plt+0x11e00>
   23ca0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   23ca4:	ldr	r1, [r1, #16]
   23ca8:	cmp	r1, #0
   23cac:	beq	23cc8 <__assert_fail@plt+0x11e00>
   23cb0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   23cb4:	mov	r6, r3
   23cb8:	mov	r0, r4
   23cbc:	bl	205a0 <__assert_fail@plt+0xe6d8>
   23cc0:	ldrb	r0, [r4, #28]
   23cc4:	mov	r3, r6
   23cc8:	mov	sl, #1
   23ccc:	mov	r2, #0
   23cd0:	cmp	r3, #0
   23cd4:	beq	23d24 <__assert_fail@plt+0x11e5c>
   23cd8:	ands	r1, r0, #16
   23cdc:	bne	23d24 <__assert_fail@plt+0x11e5c>
   23ce0:	and	r0, r0, #6
   23ce4:	cmp	r0, #4
   23ce8:	bne	23d14 <__assert_fail@plt+0x11e4c>
   23cec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23cf0:	ldr	sl, [r3]
   23cf4:	ldr	r0, [r0, #24]
   23cf8:	cmp	sl, r0
   23cfc:	bhi	23d1c <__assert_fail@plt+0x11e54>
   23d00:	cmp	sl, #1
   23d04:	bge	23d20 <__assert_fail@plt+0x11e58>
   23d08:	mov	sl, #1
   23d0c:	mov	r2, #0
   23d10:	b	23d24 <__assert_fail@plt+0x11e5c>
   23d14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23d18:	ldr	r0, [r0, #24]
   23d1c:	add	sl, r0, #1
   23d20:	mov	r2, r3
   23d24:	lsl	r0, sl, #3
   23d28:	str	r2, [sp, #36]	; 0x24
   23d2c:	bl	34810 <__assert_fail@plt+0x22948>
   23d30:	cmp	r0, #0
   23d34:	beq	240c4 <__assert_fail@plt+0x121fc>
   23d38:	mov	r6, r0
   23d3c:	ldr	r0, [fp, #12]
   23d40:	str	r9, [sp]
   23d44:	ldr	r9, [fp, #-32]	; 0xffffffe0
   23d48:	ldr	r1, [sp, #44]	; 0x2c
   23d4c:	mov	r2, r8
   23d50:	mov	r3, r5
   23d54:	stmib	sp, {r0, sl}
   23d58:	ldr	r0, [sp, #40]	; 0x28
   23d5c:	str	r6, [sp, #12]
   23d60:	str	r0, [sp, #16]
   23d64:	mov	r0, r9
   23d68:	bl	20efc <__assert_fail@plt+0xf034>
   23d6c:	cmp	r0, #0
   23d70:	mov	r8, r6
   23d74:	beq	23db0 <__assert_fail@plt+0x11ee8>
   23d78:	cmp	r0, #1
   23d7c:	mvn	r4, #1
   23d80:	mvneq	r4, #0
   23d84:	ldr	r6, [fp, #-40]	; 0xffffffd8
   23d88:	ldr	r5, [fp, #-36]	; 0xffffffdc
   23d8c:	mov	r0, r8
   23d90:	bl	176c0 <__assert_fail@plt+0x57f8>
   23d94:	cmp	r6, #0
   23d98:	beq	23da4 <__assert_fail@plt+0x11edc>
   23d9c:	add	r0, r5, #136	; 0x88
   23da0:	bl	119c4 <pthread_mutex_unlock@plt>
   23da4:	mov	r0, r4
   23da8:	sub	sp, fp, #28
   23dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23db0:	ldr	lr, [sp, #36]	; 0x24
   23db4:	str	r5, [sp, #44]	; 0x2c
   23db8:	cmp	lr, #0
   23dbc:	beq	24098 <__assert_fail@plt+0x121d0>
   23dc0:	ldrb	r0, [r9, #28]
   23dc4:	add	r7, sl, #1
   23dc8:	ubfx	r0, r0, #1, #2
   23dcc:	cmp	r0, #1
   23dd0:	beq	23e30 <__assert_fail@plt+0x11f68>
   23dd4:	cmp	r0, #0
   23dd8:	bne	23e5c <__assert_fail@plt+0x11f94>
   23ddc:	mov	r4, r8
   23de0:	lsl	r8, r7, #2
   23de4:	mov	r5, lr
   23de8:	mov	r0, r8
   23dec:	bl	34810 <__assert_fail@plt+0x22948>
   23df0:	mov	r6, #0
   23df4:	cmp	r0, #0
   23df8:	str	r0, [r5, #4]
   23dfc:	beq	240dc <__assert_fail@plt+0x12214>
   23e00:	mov	r0, r8
   23e04:	bl	34810 <__assert_fail@plt+0x22948>
   23e08:	cmp	r0, #0
   23e0c:	mov	lr, r5
   23e10:	str	r0, [r5, #8]
   23e14:	beq	24148 <__assert_fail@plt+0x12280>
   23e18:	str	r7, [lr]
   23e1c:	mov	r6, #1
   23e20:	mov	r8, r4
   23e24:	cmp	sl, #1
   23e28:	bge	23e6c <__assert_fail@plt+0x11fa4>
   23e2c:	b	23e4c <__assert_fail@plt+0x11f84>
   23e30:	ldr	r0, [lr]
   23e34:	mov	r6, #1
   23e38:	cmp	r7, r0
   23e3c:	bhi	240e4 <__assert_fail@plt+0x1221c>
   23e40:	mov	r7, r0
   23e44:	cmp	sl, #1
   23e48:	bge	23e6c <__assert_fail@plt+0x11fa4>
   23e4c:	mov	sl, #0
   23e50:	cmp	sl, r7
   23e54:	bcc	24060 <__assert_fail@plt+0x12198>
   23e58:	b	24080 <__assert_fail@plt+0x121b8>
   23e5c:	ldr	r7, [lr]
   23e60:	mov	r6, #2
   23e64:	cmp	sl, #1
   23e68:	blt	23e4c <__assert_fail@plt+0x11f84>
   23e6c:	ldr	r5, [lr, #4]
   23e70:	ldr	r4, [lr, #8]
   23e74:	mov	r2, #0
   23e78:	cmp	sl, #3
   23e7c:	str	r6, [sp, #40]	; 0x28
   23e80:	bhi	23f10 <__assert_fail@plt+0x12048>
   23e84:	tst	sl, #1
   23e88:	mov	r3, r2
   23e8c:	beq	23ea8 <__assert_fail@plt+0x11fe0>
   23e90:	mov	r0, r8
   23e94:	orr	r3, r2, #1
   23e98:	ldr	r1, [r0, r2, lsl #3]!
   23e9c:	str	r1, [r5, r2, lsl #2]
   23ea0:	ldr	r0, [r0, #4]
   23ea4:	str	r0, [r4, r2, lsl #2]
   23ea8:	orr	r0, r2, #1
   23eac:	cmp	sl, r0
   23eb0:	beq	24050 <__assert_fail@plt+0x12188>
   23eb4:	add	r2, r3, #1
   23eb8:	add	ip, r8, r3, lsl #3
   23ebc:	sub	r0, sl, r3
   23ec0:	mov	r6, #0
   23ec4:	add	r1, r5, r2, lsl #2
   23ec8:	add	r2, r4, r2, lsl #2
   23ecc:	add	r7, ip, #12
   23ed0:	ldr	r4, [r7, #-12]
   23ed4:	add	r5, r1, r6
   23ed8:	subs	r0, r0, #2
   23edc:	str	r4, [r5, #-4]
   23ee0:	add	r4, ip, r6, lsl #1
   23ee4:	add	r5, r2, r6
   23ee8:	ldr	r3, [r4, #4]
   23eec:	str	r3, [r5, #-4]
   23ef0:	ldr	r3, [r4, #8]
   23ef4:	str	r3, [r1, r6]
   23ef8:	ldr	r3, [r7]
   23efc:	add	r7, r7, #16
   23f00:	str	r3, [r2, r6]
   23f04:	add	r6, r6, #8
   23f08:	bne	23ed0 <__assert_fail@plt+0x12008>
   23f0c:	b	24050 <__assert_fail@plt+0x12188>
   23f10:	add	lr, r4, sl, lsl #2
   23f14:	add	r7, r8, sl, lsl #3
   23f18:	add	r6, r5, sl, lsl #2
   23f1c:	mov	r9, #0
   23f20:	mov	r1, #0
   23f24:	mov	r3, #0
   23f28:	mov	r0, #0
   23f2c:	mov	r2, #0
   23f30:	cmp	r8, lr
   23f34:	movwcc	r9, #1
   23f38:	cmp	r7, r4
   23f3c:	movwhi	r1, #1
   23f40:	cmp	r8, r6
   23f44:	movwcc	r3, #1
   23f48:	cmp	r7, r5
   23f4c:	mov	r7, #0
   23f50:	movwhi	r7, #1
   23f54:	cmp	r4, r6
   23f58:	mov	r6, #0
   23f5c:	movwcc	r6, #1
   23f60:	cmp	r5, lr
   23f64:	movwcc	r0, #1
   23f68:	tst	r0, r6
   23f6c:	andseq	r0, r7, r3
   23f70:	bne	23ffc <__assert_fail@plt+0x12134>
   23f74:	ands	r0, r1, r9
   23f78:	ldr	r9, [fp, #-32]	; 0xffffffe0
   23f7c:	ldr	lr, [sp, #36]	; 0x24
   23f80:	bne	23e84 <__assert_fail@plt+0x11fbc>
   23f84:	bic	r0, sl, #3
   23f88:	mov	r1, #1
   23f8c:	str	r4, [sp, #32]
   23f90:	str	r0, [sp, #28]
   23f94:	subs	r0, r0, #4
   23f98:	add	r0, r1, r0, lsr #2
   23f9c:	and	r1, r0, #1
   23fa0:	str	r1, [sp, #24]
   23fa4:	beq	24008 <__assert_fail@plt+0x12140>
   23fa8:	sub	r6, r0, r1
   23fac:	mov	r1, r4
   23fb0:	mov	r3, #0
   23fb4:	mov	r7, #64	; 0x40
   23fb8:	mov	r0, #32
   23fbc:	mov	lr, r5
   23fc0:	mov	r4, r8
   23fc4:	mov	r9, r8
   23fc8:	add	ip, r9, #32
   23fcc:	vld2.32	{d16-d19}, [r9], r7
   23fd0:	add	r8, lr, #16
   23fd4:	add	r2, r1, #16
   23fd8:	subs	r6, r6, #2
   23fdc:	add	r3, r3, #8
   23fe0:	vst1.32	{d16-d17}, [lr], r0
   23fe4:	vst1.32	{d18-d19}, [r1], r0
   23fe8:	vld2.32	{d16-d19}, [ip]
   23fec:	vst1.32	{d16-d17}, [r8]
   23ff0:	vst1.32	{d18-d19}, [r2]
   23ff4:	bne	23fc8 <__assert_fail@plt+0x12100>
   23ff8:	b	24010 <__assert_fail@plt+0x12148>
   23ffc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   24000:	ldr	lr, [sp, #36]	; 0x24
   24004:	b	23e84 <__assert_fail@plt+0x11fbc>
   24008:	mov	r4, r8
   2400c:	mov	r3, #0
   24010:	ldr	r0, [sp, #24]
   24014:	mov	r8, r4
   24018:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2401c:	ldr	lr, [sp, #36]	; 0x24
   24020:	ldr	r4, [sp, #32]
   24024:	cmp	r0, #0
   24028:	beq	24044 <__assert_fail@plt+0x1217c>
   2402c:	add	r0, r8, r3, lsl #3
   24030:	vld2.32	{d16-d19}, [r0]
   24034:	add	r0, r5, r3, lsl #2
   24038:	vst1.32	{d16-d17}, [r0]
   2403c:	add	r0, r4, r3, lsl #2
   24040:	vst1.32	{d18-d19}, [r0]
   24044:	ldr	r2, [sp, #28]
   24048:	cmp	sl, r2
   2404c:	bne	23e84 <__assert_fail@plt+0x11fbc>
   24050:	ldr	r7, [lr]
   24054:	ldr	r6, [sp, #40]	; 0x28
   24058:	cmp	sl, r7
   2405c:	bcs	24080 <__assert_fail@plt+0x121b8>
   24060:	ldmib	lr, {r0, r1}
   24064:	mvn	r2, #0
   24068:	str	r2, [r1, sl, lsl #2]
   2406c:	str	r2, [r0, sl, lsl #2]
   24070:	add	sl, sl, #1
   24074:	ldr	r3, [lr]
   24078:	cmp	sl, r3
   2407c:	bcc	24068 <__assert_fail@plt+0x121a0>
   24080:	ldrb	r0, [r9, #28]
   24084:	cmp	r6, #0
   24088:	and	r0, r0, #249	; 0xf9
   2408c:	orr	r0, r0, r6, lsl #1
   24090:	strb	r0, [r9, #28]
   24094:	beq	240bc <__assert_fail@plt+0x121f4>
   24098:	ldr	r0, [fp, #20]
   2409c:	cmp	r0, #0
   240a0:	beq	240b4 <__assert_fail@plt+0x121ec>
   240a4:	ldr	r0, [r8, #4]
   240a8:	ldr	r1, [sp, #44]	; 0x2c
   240ac:	sub	r4, r0, r1
   240b0:	b	23d84 <__assert_fail@plt+0x11ebc>
   240b4:	ldr	r4, [r8]
   240b8:	b	23d84 <__assert_fail@plt+0x11ebc>
   240bc:	mvn	r4, #1
   240c0:	b	23d84 <__assert_fail@plt+0x11ebc>
   240c4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   240c8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   240cc:	mvn	r4, #1
   240d0:	cmp	r6, #0
   240d4:	bne	23d9c <__assert_fail@plt+0x11ed4>
   240d8:	b	23da4 <__assert_fail@plt+0x11edc>
   240dc:	mov	r8, r4
   240e0:	b	24080 <__assert_fail@plt+0x121b8>
   240e4:	ldr	r0, [lr, #4]
   240e8:	mov	r4, r8
   240ec:	lsl	r8, r7, #2
   240f0:	mov	r1, r8
   240f4:	bl	34840 <__assert_fail@plt+0x22978>
   240f8:	mov	r6, #0
   240fc:	cmp	r0, #0
   24100:	beq	24160 <__assert_fail@plt+0x12298>
   24104:	mov	r5, r0
   24108:	ldr	r0, [sp, #36]	; 0x24
   2410c:	mov	r1, r8
   24110:	ldr	r0, [r0, #8]
   24114:	bl	34840 <__assert_fail@plt+0x22978>
   24118:	cmp	r0, #0
   2411c:	beq	24158 <__assert_fail@plt+0x12290>
   24120:	ldr	lr, [sp, #36]	; 0x24
   24124:	ldr	r9, [fp, #-32]	; 0xffffffe0
   24128:	mov	r8, r4
   2412c:	mov	r6, #1
   24130:	str	r7, [lr]
   24134:	str	r5, [lr, #4]
   24138:	str	r0, [lr, #8]
   2413c:	cmp	sl, #1
   24140:	bge	23e6c <__assert_fail@plt+0x11fa4>
   24144:	b	23e4c <__assert_fail@plt+0x11f84>
   24148:	ldr	r0, [lr, #4]
   2414c:	bl	176c0 <__assert_fail@plt+0x57f8>
   24150:	mov	r8, r4
   24154:	b	24080 <__assert_fail@plt+0x121b8>
   24158:	mov	r0, r5
   2415c:	bl	176c0 <__assert_fail@plt+0x57f8>
   24160:	ldr	r9, [fp, #-32]	; 0xffffffe0
   24164:	mov	r8, r4
   24168:	b	24080 <__assert_fail@plt+0x121b8>
   2416c:	push	{fp, lr}
   24170:	mov	fp, sp
   24174:	sub	sp, sp, #16
   24178:	mov	ip, #0
   2417c:	str	r2, [sp, #4]
   24180:	str	ip, [sp, #12]
   24184:	ldr	ip, [fp, #12]
   24188:	str	ip, [sp, #8]
   2418c:	ldr	ip, [fp, #8]
   24190:	str	ip, [sp]
   24194:	bl	23c08 <__assert_fail@plt+0x11d40>
   24198:	mov	sp, fp
   2419c:	pop	{fp, pc}
   241a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241a4:	add	fp, sp, #28
   241a8:	sub	sp, sp, #20
   241ac:	ldr	r4, [fp, #8]
   241b0:	mov	r8, r1
   241b4:	mov	r1, r0
   241b8:	mov	r6, r2
   241bc:	orr	r0, r4, r2
   241c0:	ldr	r2, [fp, #20]
   241c4:	orrs	r0, r0, r2
   241c8:	bmi	24288 <__assert_fail@plt+0x123c0>
   241cc:	adds	sl, r6, r4
   241d0:	bvs	24288 <__assert_fail@plt+0x123c0>
   241d4:	mov	r5, #0
   241d8:	cmp	r4, #1
   241dc:	blt	24234 <__assert_fail@plt+0x1236c>
   241e0:	mov	r9, r3
   241e4:	cmp	r6, #1
   241e8:	blt	2423c <__assert_fail@plt+0x12374>
   241ec:	mov	r0, sl
   241f0:	mov	r5, r1
   241f4:	bl	34810 <__assert_fail@plt+0x22948>
   241f8:	cmp	r0, #0
   241fc:	beq	24288 <__assert_fail@plt+0x123c0>
   24200:	mov	r1, r8
   24204:	mov	r2, r6
   24208:	mov	r7, r0
   2420c:	bl	11ab4 <memcpy@plt>
   24210:	add	r0, r7, r6
   24214:	mov	r1, r9
   24218:	mov	r2, r4
   2421c:	bl	11ab4 <memcpy@plt>
   24220:	ldr	r2, [fp, #20]
   24224:	mov	r1, r5
   24228:	mov	r4, r7
   2422c:	mov	r5, #0
   24230:	b	24244 <__assert_fail@plt+0x1237c>
   24234:	mov	r7, r8
   24238:	b	24240 <__assert_fail@plt+0x12378>
   2423c:	mov	r7, r9
   24240:	mov	r4, #0
   24244:	ldr	r0, [fp, #16]
   24248:	ldr	r3, [fp, #12]
   2424c:	mov	r6, #1
   24250:	str	r2, [sp, #4]
   24254:	mov	r2, sl
   24258:	str	r5, [sp]
   2425c:	str	r6, [sp, #12]
   24260:	str	r0, [sp, #8]
   24264:	mov	r0, r1
   24268:	mov	r1, r7
   2426c:	bl	23c08 <__assert_fail@plt+0x11d40>
   24270:	mov	r5, r0
   24274:	mov	r0, r4
   24278:	bl	176c0 <__assert_fail@plt+0x57f8>
   2427c:	mov	r0, r5
   24280:	sub	sp, fp, #28
   24284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24288:	mvn	r0, #1
   2428c:	sub	sp, fp, #28
   24290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24298:	add	fp, sp, #28
   2429c:	sub	sp, sp, #20
   242a0:	ldr	r4, [fp, #8]
   242a4:	mov	r8, r1
   242a8:	mov	r1, r0
   242ac:	mov	r6, r2
   242b0:	orr	r0, r4, r2
   242b4:	ldr	r2, [fp, #24]
   242b8:	orrs	r0, r0, r2
   242bc:	bmi	2437c <__assert_fail@plt+0x124b4>
   242c0:	adds	sl, r6, r4
   242c4:	bvs	2437c <__assert_fail@plt+0x124b4>
   242c8:	mov	r5, #0
   242cc:	cmp	r4, #1
   242d0:	blt	24328 <__assert_fail@plt+0x12460>
   242d4:	mov	r9, r3
   242d8:	cmp	r6, #1
   242dc:	blt	24330 <__assert_fail@plt+0x12468>
   242e0:	mov	r0, sl
   242e4:	mov	r5, r1
   242e8:	bl	34810 <__assert_fail@plt+0x22948>
   242ec:	cmp	r0, #0
   242f0:	beq	2437c <__assert_fail@plt+0x124b4>
   242f4:	mov	r1, r8
   242f8:	mov	r2, r6
   242fc:	mov	r7, r0
   24300:	bl	11ab4 <memcpy@plt>
   24304:	add	r0, r7, r6
   24308:	mov	r1, r9
   2430c:	mov	r2, r4
   24310:	bl	11ab4 <memcpy@plt>
   24314:	ldr	r2, [fp, #24]
   24318:	mov	r1, r5
   2431c:	mov	r4, r7
   24320:	mov	r5, #0
   24324:	b	24338 <__assert_fail@plt+0x12470>
   24328:	mov	r7, r8
   2432c:	b	24334 <__assert_fail@plt+0x1246c>
   24330:	mov	r7, r9
   24334:	mov	r4, #0
   24338:	ldr	r0, [fp, #20]
   2433c:	ldr	r6, [fp, #16]
   24340:	ldr	r3, [fp, #12]
   24344:	str	r2, [sp, #4]
   24348:	mov	r2, sl
   2434c:	str	r5, [sp, #12]
   24350:	str	r0, [sp, #8]
   24354:	mov	r0, r1
   24358:	mov	r1, r7
   2435c:	str	r6, [sp]
   24360:	bl	23c08 <__assert_fail@plt+0x11d40>
   24364:	mov	r5, r0
   24368:	mov	r0, r4
   2436c:	bl	176c0 <__assert_fail@plt+0x57f8>
   24370:	mov	r0, r5
   24374:	sub	sp, fp, #28
   24378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2437c:	mvn	r0, #1
   24380:	sub	sp, fp, #28
   24384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24388:	ldrb	ip, [r0, #28]
   2438c:	cmp	r2, #0
   24390:	bic	ip, ip, #6
   24394:	orrne	ip, ip, #2
   24398:	strb	ip, [r0, #28]
   2439c:	ldr	r0, [sp]
   243a0:	moveq	r0, r2
   243a4:	cmp	r2, #0
   243a8:	moveq	r3, r2
   243ac:	stm	r1, {r2, r3}
   243b0:	str	r0, [r1, #8]
   243b4:	bx	lr
   243b8:	push	{r4, sl, fp, lr}
   243bc:	add	fp, sp, #8
   243c0:	mov	r4, r0
   243c4:	ldr	r0, [r0, #24]
   243c8:	bl	176c0 <__assert_fail@plt+0x57f8>
   243cc:	ldr	r0, [r4, #36]	; 0x24
   243d0:	bl	176c0 <__assert_fail@plt+0x57f8>
   243d4:	ldr	r0, [r4, #40]	; 0x28
   243d8:	add	r1, r4, #4
   243dc:	cmp	r0, r1
   243e0:	beq	243f4 <__assert_fail@plt+0x1252c>
   243e4:	ldr	r0, [r0, #8]
   243e8:	bl	176c0 <__assert_fail@plt+0x57f8>
   243ec:	ldr	r0, [r4, #40]	; 0x28
   243f0:	bl	176c0 <__assert_fail@plt+0x57f8>
   243f4:	ldr	r0, [r4, #12]
   243f8:	bl	176c0 <__assert_fail@plt+0x57f8>
   243fc:	ldr	r0, [r4, #48]	; 0x30
   24400:	bl	176c0 <__assert_fail@plt+0x57f8>
   24404:	ldr	r0, [r4, #44]	; 0x2c
   24408:	bl	176c0 <__assert_fail@plt+0x57f8>
   2440c:	mov	r0, r4
   24410:	pop	{r4, sl, fp, lr}
   24414:	b	176c0 <__assert_fail@plt+0x57f8>
   24418:	nop	{0}
   2441c:	nop	{0}
   24420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24424:	add	fp, sp, #28
   24428:	sub	sp, sp, #108	; 0x6c
   2442c:	mov	r3, r0
   24430:	ldrb	r0, [r0, #74]	; 0x4a
   24434:	ldr	r9, [r3, #36]	; 0x24
   24438:	ldr	r1, [r3, #48]	; 0x30
   2443c:	ldr	r8, [r3, #28]
   24440:	str	r3, [sp, #20]
   24444:	cmp	r9, r1
   24448:	movgt	r9, r1
   2444c:	cmp	r0, #0
   24450:	bne	2446c <__assert_fail@plt+0x125a4>
   24454:	ldr	r0, [r3, #64]	; 0x40
   24458:	cmp	r0, #0
   2445c:	bne	2446c <__assert_fail@plt+0x125a4>
   24460:	ldrb	r0, [r3, #76]	; 0x4c
   24464:	cmp	r0, #0
   24468:	beq	24474 <__assert_fail@plt+0x125ac>
   2446c:	ldr	r7, [r3, #32]
   24470:	b	2468c <__assert_fail@plt+0x127c4>
   24474:	cmp	r9, r8
   24478:	ble	24664 <__assert_fail@plt+0x1279c>
   2447c:	add	r5, r3, #16
   24480:	add	sl, sp, #32
   24484:	str	r9, [sp, #16]
   24488:	b	244a8 <__assert_fail@plt+0x125e0>
   2448c:	mov	r8, r9
   24490:	ldr	r9, [sp, #16]
   24494:	mov	r3, sl
   24498:	add	sl, sp, #32
   2449c:	cmp	r9, r8
   244a0:	mov	r7, r8
   244a4:	ble	24a5c <__assert_fail@plt+0x12b94>
   244a8:	ldr	r6, [r3, #24]
   244ac:	ldr	r4, [r3]
   244b0:	add	r0, r6, r8
   244b4:	ldrb	r7, [r4, r0]
   244b8:	tst	r7, #128	; 0x80
   244bc:	bne	24508 <__assert_fail@plt+0x12640>
   244c0:	mov	r0, r5
   244c4:	bl	11ae4 <mbsinit@plt>
   244c8:	cmp	r0, #0
   244cc:	beq	24508 <__assert_fail@plt+0x12640>
   244d0:	mov	r0, r7
   244d4:	bl	11e74 <towupper@plt>
   244d8:	cmp	r0, #128	; 0x80
   244dc:	bcs	244fc <__assert_fail@plt+0x12634>
   244e0:	ldr	r3, [sp, #20]
   244e4:	ldr	r1, [r3, #4]
   244e8:	strb	r0, [r1, r8]
   244ec:	ldr	r1, [r3, #8]
   244f0:	str	r0, [r1, r8, lsl #2]
   244f4:	add	r8, r8, #1
   244f8:	b	2449c <__assert_fail@plt+0x125d4>
   244fc:	ldr	r0, [sp, #20]
   24500:	ldr	r4, [r0]
   24504:	ldr	r6, [r0, #24]
   24508:	ldm	r5, {r0, r1}
   2450c:	str	r1, [fp, #-36]	; 0xffffffdc
   24510:	sub	r2, r9, r8
   24514:	mov	r3, r5
   24518:	str	r0, [fp, #-40]	; 0xffffffd8
   2451c:	add	r0, r4, r6
   24520:	add	r1, r0, r8
   24524:	add	r0, sp, #28
   24528:	bl	358a0 <__assert_fail@plt+0x239d8>
   2452c:	sub	r4, r0, #1
   24530:	mov	r6, r0
   24534:	cmn	r4, #4
   24538:	bhi	24618 <__assert_fail@plt+0x12750>
   2453c:	ldr	r0, [sp, #28]
   24540:	bl	11e74 <towupper@plt>
   24544:	mov	r7, r0
   24548:	ldr	r0, [sp, #28]
   2454c:	cmp	r7, r0
   24550:	bne	24574 <__assert_fail@plt+0x126ac>
   24554:	ldr	sl, [sp, #20]
   24558:	ldr	r1, [sl]
   2455c:	ldr	r2, [sl, #24]
   24560:	ldr	r0, [sl, #4]
   24564:	add	r1, r1, r2
   24568:	add	r0, r0, r8
   2456c:	add	r1, r1, r8
   24570:	b	2459c <__assert_fail@plt+0x126d4>
   24574:	mov	r0, sl
   24578:	mov	r1, r7
   2457c:	sub	r2, fp, #40	; 0x28
   24580:	bl	11a0c <wcrtomb@plt>
   24584:	cmp	r6, r0
   24588:	bne	2466c <__assert_fail@plt+0x127a4>
   2458c:	mov	r1, sl
   24590:	ldr	sl, [sp, #20]
   24594:	ldr	r0, [sl, #4]
   24598:	add	r0, r0, r8
   2459c:	mov	r2, r6
   245a0:	bl	11ab4 <memcpy@plt>
   245a4:	ldr	r0, [sl, #8]
   245a8:	add	r9, r8, #1
   245ac:	str	r7, [r0, r8, lsl #2]
   245b0:	add	r7, r6, r8
   245b4:	cmp	r9, r7
   245b8:	bge	2448c <__assert_fail@plt+0x125c4>
   245bc:	add	r0, r0, r8, lsl #2
   245c0:	mvn	r1, #3
   245c4:	add	r2, r1, r6, lsl #2
   245c8:	mov	r1, #255	; 0xff
   245cc:	add	r0, r0, #4
   245d0:	bl	11d0c <memset@plt>
   245d4:	sub	r0, r6, #2
   245d8:	ands	r1, r4, #7
   245dc:	add	sl, sp, #32
   245e0:	beq	245f0 <__assert_fail@plt+0x12728>
   245e4:	subs	r1, r1, #1
   245e8:	add	r9, r9, #1
   245ec:	bne	245e4 <__assert_fail@plt+0x1271c>
   245f0:	ldr	r3, [sp, #20]
   245f4:	cmp	r0, #7
   245f8:	bcc	2460c <__assert_fail@plt+0x12744>
   245fc:	add	r0, r6, r8
   24600:	sub	r0, r0, r9
   24604:	subs	r0, r0, #8
   24608:	bne	24604 <__assert_fail@plt+0x1273c>
   2460c:	ldr	r9, [sp, #16]
   24610:	mov	r8, r7
   24614:	b	2449c <__assert_fail@plt+0x125d4>
   24618:	ldr	r3, [sp, #20]
   2461c:	add	r0, r6, #1
   24620:	cmp	r0, #2
   24624:	bcc	24638 <__assert_fail@plt+0x12770>
   24628:	ldr	r0, [r3, #36]	; 0x24
   2462c:	ldr	r1, [r3, #48]	; 0x30
   24630:	cmp	r0, r1
   24634:	blt	24678 <__assert_fail@plt+0x127b0>
   24638:	ldr	r0, [r3, #4]
   2463c:	cmn	r6, #1
   24640:	strb	r7, [r0, r8]
   24644:	ldr	r0, [r3, #8]
   24648:	str	r7, [r0, r8, lsl #2]
   2464c:	add	r8, r8, #1
   24650:	bne	2449c <__assert_fail@plt+0x125d4>
   24654:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24658:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2465c:	stm	r5, {r0, r1}
   24660:	b	2449c <__assert_fail@plt+0x125d4>
   24664:	mov	r7, r8
   24668:	b	24a5c <__assert_fail@plt+0x12b94>
   2466c:	ldr	r3, [sp, #20]
   24670:	mov	r7, r8
   24674:	b	24694 <__assert_fail@plt+0x127cc>
   24678:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2467c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24680:	mov	r7, r8
   24684:	stm	r5, {r0, r1}
   24688:	b	24a5c <__assert_fail@plt+0x12b94>
   2468c:	cmp	r8, r9
   24690:	bge	24a5c <__assert_fail@plt+0x12b94>
   24694:	mov	r4, r3
   24698:	mov	sl, r9
   2469c:	sub	r2, r9, r8
   246a0:	ldr	r0, [r4, #16]!
   246a4:	ldr	r1, [r4, #4]
   246a8:	str	r0, [fp, #-40]	; 0xffffffd8
   246ac:	str	r1, [fp, #-36]	; 0xffffffdc
   246b0:	ldr	r0, [r4, #48]	; 0x30
   246b4:	cmp	r0, #0
   246b8:	bne	247d8 <__assert_fail@plt+0x12910>
   246bc:	ldr	r0, [r3]
   246c0:	ldr	r1, [r3, #24]
   246c4:	mov	r9, r7
   246c8:	add	r0, r0, r1
   246cc:	add	r7, r0, r7
   246d0:	add	r0, sp, #24
   246d4:	mov	r1, r7
   246d8:	mov	r3, r4
   246dc:	bl	358a0 <__assert_fail@plt+0x239d8>
   246e0:	mov	r5, r0
   246e4:	sub	r0, r0, #1
   246e8:	cmn	r0, #4
   246ec:	str	r0, [sp, #16]
   246f0:	bhi	2482c <__assert_fail@plt+0x12964>
   246f4:	ldr	r0, [sp, #24]
   246f8:	bl	11e74 <towupper@plt>
   246fc:	mov	r6, r0
   24700:	ldr	r0, [sp, #24]
   24704:	cmp	r6, r0
   24708:	bne	24718 <__assert_fail@plt+0x12850>
   2470c:	ldr	r4, [sp, #20]
   24710:	mov	r1, r7
   24714:	b	24738 <__assert_fail@plt+0x12870>
   24718:	add	r0, sp, #32
   2471c:	sub	r2, fp, #40	; 0x28
   24720:	mov	r1, r6
   24724:	bl	11a0c <wcrtomb@plt>
   24728:	cmp	r0, r5
   2472c:	bne	248ac <__assert_fail@plt+0x129e4>
   24730:	ldr	r4, [sp, #20]
   24734:	add	r1, sp, #32
   24738:	ldr	r0, [r4, #4]
   2473c:	add	r0, r0, r8
   24740:	mov	r2, r5
   24744:	bl	11ab4 <memcpy@plt>
   24748:	ldrb	r0, [r4, #76]	; 0x4c
   2474c:	mov	r7, r9
   24750:	mov	r9, sl
   24754:	mov	r3, r4
   24758:	cmp	r0, #0
   2475c:	bne	24960 <__assert_fail@plt+0x12a98>
   24760:	ldr	r0, [r3, #8]
   24764:	add	r4, r5, r8
   24768:	add	r7, r5, r7
   2476c:	str	r6, [r0, r8, lsl #2]
   24770:	add	r6, r8, #1
   24774:	cmp	r6, r4
   24778:	bge	247d0 <__assert_fail@plt+0x12908>
   2477c:	mvn	r1, #3
   24780:	add	r0, r0, r6, lsl #2
   24784:	add	r2, r1, r5, lsl #2
   24788:	mov	r1, #255	; 0xff
   2478c:	bl	11d0c <memset@plt>
   24790:	ldr	r1, [sp, #16]
   24794:	sub	r0, r5, #2
   24798:	ands	r1, r1, #7
   2479c:	beq	247ac <__assert_fail@plt+0x128e4>
   247a0:	subs	r1, r1, #1
   247a4:	add	r6, r6, #1
   247a8:	bne	247a0 <__assert_fail@plt+0x128d8>
   247ac:	ldr	r3, [sp, #20]
   247b0:	cmp	r0, #7
   247b4:	bcc	247c8 <__assert_fail@plt+0x12900>
   247b8:	add	r0, r5, r8
   247bc:	sub	r0, r0, r6
   247c0:	subs	r0, r0, #8
   247c4:	bne	247c0 <__assert_fail@plt+0x128f8>
   247c8:	mov	r8, r4
   247cc:	b	2468c <__assert_fail@plt+0x127c4>
   247d0:	mov	r8, r6
   247d4:	b	2468c <__assert_fail@plt+0x127c4>
   247d8:	cmp	r2, #1
   247dc:	mov	r9, r7
   247e0:	add	r7, sp, #32
   247e4:	ldrge	r1, [r3, #80]	; 0x50
   247e8:	cmpge	r1, #1
   247ec:	blt	246d0 <__assert_fail@plt+0x12808>
   247f0:	ldr	r7, [r3, #24]
   247f4:	ldr	r6, [r3]
   247f8:	add	r7, r9, r7
   247fc:	add	r3, r6, r7
   24800:	mov	r6, #0
   24804:	add	r7, sp, #32
   24808:	ldrb	r5, [r3, r6]
   2480c:	ldrb	r5, [r0, r5]
   24810:	strb	r5, [r7, r6]
   24814:	add	r6, r6, #1
   24818:	cmp	r6, r2
   2481c:	bge	246d0 <__assert_fail@plt+0x12808>
   24820:	cmp	r6, r1
   24824:	blt	24808 <__assert_fail@plt+0x12940>
   24828:	b	246d0 <__assert_fail@plt+0x12808>
   2482c:	ldr	r3, [sp, #20]
   24830:	add	r0, r5, #1
   24834:	cmp	r0, #2
   24838:	bcc	2484c <__assert_fail@plt+0x12984>
   2483c:	ldr	r0, [r3, #36]	; 0x24
   24840:	ldr	r1, [r3, #48]	; 0x30
   24844:	cmp	r0, r1
   24848:	blt	24a4c <__assert_fail@plt+0x12b84>
   2484c:	ldr	r2, [r3, #24]
   24850:	ldr	r0, [r3]
   24854:	ldr	r1, [r3, #64]	; 0x40
   24858:	mov	r7, r9
   2485c:	add	r2, r2, r9
   24860:	cmp	r1, #0
   24864:	ldrb	r0, [r0, r2]
   24868:	bne	24ce0 <__assert_fail@plt+0x12e18>
   2486c:	ldr	r1, [r3, #4]
   24870:	mov	r9, sl
   24874:	strb	r0, [r1, r8]
   24878:	ldrb	r1, [r3, #76]	; 0x4c
   2487c:	cmp	r1, #0
   24880:	bne	24ce8 <__assert_fail@plt+0x12e20>
   24884:	ldr	r1, [r3, #8]
   24888:	add	r7, r7, #1
   2488c:	cmn	r5, #1
   24890:	str	r0, [r1, r8, lsl #2]
   24894:	add	r8, r8, #1
   24898:	bne	2468c <__assert_fail@plt+0x127c4>
   2489c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   248a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   248a4:	stm	r4, {r0, r1}
   248a8:	b	2468c <__assert_fail@plt+0x127c4>
   248ac:	ldr	r3, [sp, #20]
   248b0:	mov	r2, r0
   248b4:	cmn	r0, #1
   248b8:	beq	249dc <__assert_fail@plt+0x12b14>
   248bc:	ldr	r1, [r3, #36]	; 0x24
   248c0:	add	r0, r2, r8
   248c4:	cmp	r0, r1
   248c8:	bhi	24a4c <__assert_fail@plt+0x12b84>
   248cc:	str	r0, [sp, #12]
   248d0:	ldr	r0, [r3, #12]
   248d4:	mov	r7, r9
   248d8:	cmp	r0, #0
   248dc:	bne	24900 <__assert_fail@plt+0x12a38>
   248e0:	lsl	r0, r1, #2
   248e4:	mov	r4, r2
   248e8:	bl	34810 <__assert_fail@plt+0x22948>
   248ec:	ldr	r3, [sp, #20]
   248f0:	mov	r2, r4
   248f4:	cmp	r0, #0
   248f8:	str	r0, [r3, #12]
   248fc:	beq	24cd4 <__assert_fail@plt+0x12e0c>
   24900:	ldrb	r1, [r3, #76]	; 0x4c
   24904:	ldr	r9, [sp, #16]
   24908:	cmp	r1, #0
   2490c:	bne	24b2c <__assert_fail@plt+0x12c64>
   24910:	cmp	r8, #0
   24914:	beq	24b24 <__assert_fail@plt+0x12c5c>
   24918:	mov	r1, #0
   2491c:	cmp	r8, #4
   24920:	bcc	24b14 <__assert_fail@plt+0x12c4c>
   24924:	bic	r1, r8, #3
   24928:	stmib	sp, {r2, r7}
   2492c:	mov	r2, #1
   24930:	add	r3, pc, #968	; 0x3c8
   24934:	sub	r7, r1, #4
   24938:	add	r2, r2, r7, lsr #2
   2493c:	cmp	r7, #12
   24940:	and	r4, r2, #3
   24944:	bcs	24a70 <__assert_fail@plt+0x12ba8>
   24948:	vld1.64	{d16-d17}, [r3 :128]
   2494c:	mov	sl, r4
   24950:	mov	r3, #0
   24954:	cmp	sl, #0
   24958:	bne	24ae4 <__assert_fail@plt+0x12c1c>
   2495c:	b	24b04 <__assert_fail@plt+0x12c3c>
   24960:	ldr	lr, [r3, #12]
   24964:	mov	r1, #0
   24968:	cmp	r5, #4
   2496c:	bcc	24a28 <__assert_fail@plt+0x12b60>
   24970:	vdup.32	q8, r7
   24974:	bic	r1, r5, #3
   24978:	mov	r3, #1
   2497c:	mov	r9, r7
   24980:	subs	r2, r1, #4
   24984:	add	r2, r3, r2, lsr #2
   24988:	add	r3, pc, #880	; 0x370
   2498c:	and	ip, r2, #1
   24990:	beq	249f4 <__assert_fail@plt+0x12b2c>
   24994:	sub	r4, r2, ip
   24998:	add	r2, pc, #864	; 0x360
   2499c:	vmov.i32	q10, #4	; 0x00000004
   249a0:	vmov.i32	q11, #8	; 0x00000008
   249a4:	add	r7, lr, r8, lsl #2
   249a8:	mov	r3, #0
   249ac:	vld1.64	{d18-d19}, [r2 :128]
   249b0:	mov	r2, #32
   249b4:	vadd.i32	q12, q9, q8
   249b8:	vadd.i32	q9, q9, q11
   249bc:	add	r0, r7, #16
   249c0:	subs	r4, r4, #2
   249c4:	add	r3, r3, #8
   249c8:	vadd.i32	q13, q12, q10
   249cc:	vst1.32	{d24-d25}, [r7], r2
   249d0:	vst1.32	{d26-d27}, [r0]
   249d4:	bne	249b4 <__assert_fail@plt+0x12aec>
   249d8:	b	249fc <__assert_fail@plt+0x12b34>
   249dc:	ldr	r0, [r3, #4]
   249e0:	mov	r1, r7
   249e4:	mov	r2, r5
   249e8:	mov	r4, r3
   249ec:	add	r0, r0, r8
   249f0:	b	24744 <__assert_fail@plt+0x1287c>
   249f4:	vld1.64	{d18-d19}, [r3 :128]
   249f8:	mov	r3, #0
   249fc:	cmp	ip, #0
   24a00:	beq	24a14 <__assert_fail@plt+0x12b4c>
   24a04:	add	r0, r3, r8
   24a08:	vadd.i32	q8, q9, q8
   24a0c:	add	r0, lr, r0, lsl #2
   24a10:	vst1.32	{d16-d17}, [r0]
   24a14:	ldr	r3, [sp, #20]
   24a18:	mov	r7, r9
   24a1c:	cmp	r5, r1
   24a20:	mov	r9, sl
   24a24:	beq	24760 <__assert_fail@plt+0x12898>
   24a28:	add	r0, r8, r1
   24a2c:	add	r2, r7, r1
   24a30:	sub	r4, r5, r1
   24a34:	add	r0, lr, r0, lsl #2
   24a38:	str	r2, [r0], #4
   24a3c:	add	r2, r2, #1
   24a40:	subs	r4, r4, #1
   24a44:	bne	24a38 <__assert_fail@plt+0x12b70>
   24a48:	b	24760 <__assert_fail@plt+0x12898>
   24a4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24a50:	mov	r7, r9
   24a54:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24a58:	stm	r4, {r0, r1}
   24a5c:	str	r8, [r3, #28]
   24a60:	str	r7, [r3, #32]
   24a64:	mov	r0, #0
   24a68:	sub	sp, fp, #28
   24a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a70:	mov	sl, r4
   24a74:	sub	r4, r2, r4
   24a78:	add	r2, pc, #640	; 0x280
   24a7c:	vmov.i32	q9, #12	; 0x0000000c
   24a80:	vmov.i32	q10, #8	; 0x00000008
   24a84:	vmov.i32	q11, #4	; 0x00000004
   24a88:	vmov.i32	q12, #16	; 0x00000010
   24a8c:	mov	r3, #0
   24a90:	mov	lr, #64	; 0x40
   24a94:	mov	r7, r0
   24a98:	vld1.64	{d16-d17}, [r2 :128]
   24a9c:	mov	r2, r0
   24aa0:	vadd.i32	q13, q8, q9
   24aa4:	add	ip, r2, #48	; 0x30
   24aa8:	vadd.i32	q14, q8, q10
   24aac:	vadd.i32	q15, q8, q11
   24ab0:	subs	r4, r4, #4
   24ab4:	add	r3, r3, #16
   24ab8:	vst1.32	{d26-d27}, [ip]
   24abc:	vst1.32	{d16-d17}, [r7], lr
   24ac0:	vadd.i32	q8, q8, q12
   24ac4:	add	ip, r2, #32
   24ac8:	add	r2, r2, #16
   24acc:	vst1.32	{d28-d29}, [ip]
   24ad0:	vst1.32	{d30-d31}, [r2]
   24ad4:	mov	r2, r7
   24ad8:	bne	24aa0 <__assert_fail@plt+0x12bd8>
   24adc:	cmp	sl, #0
   24ae0:	beq	24b04 <__assert_fail@plt+0x12c3c>
   24ae4:	vmov.i32	q9, #4	; 0x00000004
   24ae8:	add	r2, r0, r3, lsl #2
   24aec:	rsb	r3, sl, #0
   24af0:	vadd.i32	q10, q8, q9
   24af4:	vst1.32	{d16-d17}, [r2]!
   24af8:	adds	r3, r3, #1
   24afc:	vorr	q8, q10, q10
   24b00:	bcc	24af0 <__assert_fail@plt+0x12c28>
   24b04:	ldr	r3, [sp, #20]
   24b08:	ldmib	sp, {r2, r7}
   24b0c:	cmp	r8, r1
   24b10:	beq	24b24 <__assert_fail@plt+0x12c5c>
   24b14:	str	r1, [r0, r1, lsl #2]
   24b18:	add	r1, r1, #1
   24b1c:	cmp	r8, r1
   24b20:	bne	24b14 <__assert_fail@plt+0x12c4c>
   24b24:	mov	r0, #1
   24b28:	strb	r0, [r3, #76]	; 0x4c
   24b2c:	ldr	r0, [r3, #4]
   24b30:	add	r1, sp, #32
   24b34:	mov	r4, r3
   24b38:	mov	sl, r2
   24b3c:	add	r0, r0, r8
   24b40:	bl	11ab4 <memcpy@plt>
   24b44:	ldr	r0, [r4, #8]
   24b48:	cmp	sl, #2
   24b4c:	str	r6, [r0, r8, lsl #2]
   24b50:	mov	r6, r7
   24b54:	ldr	r1, [r4, #12]
   24b58:	str	r7, [r1, r8, lsl #2]
   24b5c:	bcc	24c8c <__assert_fail@plt+0x12dc4>
   24b60:	sub	lr, sl, #1
   24b64:	mov	ip, r6
   24b68:	mov	r2, #1
   24b6c:	cmp	lr, #4
   24b70:	bcc	24bf4 <__assert_fail@plt+0x12d2c>
   24b74:	add	r7, sl, r8
   24b78:	add	r4, r8, #1
   24b7c:	str	ip, [sp, #8]
   24b80:	add	r6, r0, r4, lsl #2
   24b84:	add	r3, r0, r7, lsl #2
   24b88:	add	r4, r1, r4, lsl #2
   24b8c:	cmp	r4, r3
   24b90:	addcc	r3, r1, r7, lsl #2
   24b94:	cmpcc	r6, r3
   24b98:	bcc	24bf4 <__assert_fail@plt+0x12d2c>
   24b9c:	add	r2, pc, #364	; 0x16c
   24ba0:	ldr	r3, [sp, #8]
   24ba4:	vdup.32	q9, r9
   24ba8:	vdup.32	q10, r5
   24bac:	vmov.i32	q12, #4	; 0x00000004
   24bb0:	vmov.i8	q13, #255	; 0xff
   24bb4:	vld1.64	{d22-d23}, [r2 :128]
   24bb8:	vdup.32	q8, r3
   24bbc:	bic	r3, lr, #3
   24bc0:	orr	r2, r3, #1
   24bc4:	mov	r7, r3
   24bc8:	vcgt.u32	q14, q10, q11
   24bcc:	subs	r7, r7, #4
   24bd0:	vbsl	q14, q11, q9
   24bd4:	vadd.i32	q11, q11, q12
   24bd8:	vadd.i32	q14, q14, q8
   24bdc:	vst1.32	{d28-d29}, [r4]!
   24be0:	vst1.32	{d26-d27}, [r6]!
   24be4:	bne	24bc8 <__assert_fail@plt+0x12d00>
   24be8:	cmp	lr, r3
   24bec:	mov	r6, ip
   24bf0:	beq	24c8c <__assert_fail@plt+0x12dc4>
   24bf4:	tst	sl, #1
   24bf8:	mov	r3, r2
   24bfc:	bne	24c24 <__assert_fail@plt+0x12d5c>
   24c00:	cmp	r2, r5
   24c04:	mov	r3, r9
   24c08:	add	r7, r2, r8
   24c0c:	movcc	r3, r2
   24c10:	add	r3, r3, ip
   24c14:	str	r3, [r1, r7, lsl #2]
   24c18:	mvn	r3, #0
   24c1c:	str	r3, [r0, r7, lsl #2]
   24c20:	add	r3, r2, #1
   24c24:	add	r2, r2, #1
   24c28:	mov	r6, ip
   24c2c:	cmp	sl, r2
   24c30:	beq	24c8c <__assert_fail@plt+0x12dc4>
   24c34:	add	r2, r8, r3
   24c38:	add	r2, r2, #1
   24c3c:	add	r1, r1, r2, lsl #2
   24c40:	add	r0, r0, r2, lsl #2
   24c44:	mvn	r2, #0
   24c48:	cmp	r3, r5
   24c4c:	mov	r7, r9
   24c50:	movcc	r7, r3
   24c54:	add	r7, r7, r6
   24c58:	str	r7, [r1, #-4]
   24c5c:	add	r7, r3, #1
   24c60:	add	r3, r3, #2
   24c64:	str	r2, [r0, #-4]
   24c68:	cmp	r7, r5
   24c6c:	movcs	r7, r9
   24c70:	cmp	r3, sl
   24c74:	add	r7, r7, r6
   24c78:	str	r7, [r1]
   24c7c:	str	r2, [r0]
   24c80:	add	r1, r1, #8
   24c84:	add	r0, r0, #8
   24c88:	bne	24c48 <__assert_fail@plt+0x12d80>
   24c8c:	ldr	r3, [sp, #20]
   24c90:	sub	r1, sl, r5
   24c94:	mov	r7, r6
   24c98:	ldr	r0, [r3, #48]	; 0x30
   24c9c:	ldr	r2, [r3, #52]	; 0x34
   24ca0:	add	r0, r0, r1
   24ca4:	cmp	r2, r6
   24ca8:	str	r0, [r3, #48]	; 0x30
   24cac:	ble	24cbc <__assert_fail@plt+0x12df4>
   24cb0:	ldr	r2, [r3, #56]	; 0x38
   24cb4:	add	r1, r2, r1
   24cb8:	str	r1, [r3, #56]	; 0x38
   24cbc:	ldr	r9, [r3, #36]	; 0x24
   24cc0:	ldr	r8, [sp, #12]
   24cc4:	add	r7, r5, r7
   24cc8:	cmp	r9, r0
   24ccc:	movgt	r9, r0
   24cd0:	b	2468c <__assert_fail@plt+0x127c4>
   24cd4:	mov	r0, #12
   24cd8:	sub	sp, fp, #28
   24cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ce0:	ldrb	r0, [r1, r0]
   24ce4:	b	2486c <__assert_fail@plt+0x129a4>
   24ce8:	ldr	r1, [r3, #12]
   24cec:	str	r7, [r1, r8, lsl #2]
   24cf0:	b	24884 <__assert_fail@plt+0x129bc>
   24cf4:	nop	{0}
   24cf8:	nop	{0}
   24cfc:	nop	{0}
   24d00:	andeq	r0, r0, r0
   24d04:	andeq	r0, r0, r1
   24d08:	andeq	r0, r0, r2
   24d0c:	andeq	r0, r0, r3
   24d10:	andeq	r0, r0, r1
   24d14:	andeq	r0, r0, r2
   24d18:	andeq	r0, r0, r3
   24d1c:	andeq	r0, r0, r4
   24d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d24:	add	fp, sp, #28
   24d28:	sub	sp, sp, #68	; 0x44
   24d2c:	mov	r4, r0
   24d30:	ldr	r8, [r0, #28]
   24d34:	ldr	r5, [r0, #36]	; 0x24
   24d38:	ldr	r0, [r0, #48]	; 0x30
   24d3c:	cmp	r5, r0
   24d40:	movgt	r5, r0
   24d44:	cmp	r5, r8
   24d48:	ble	24f14 <__assert_fail@plt+0x1304c>
   24d4c:	add	r9, r4, #16
   24d50:	mov	r0, sp
   24d54:	ldr	r3, [r4, #64]	; 0x40
   24d58:	ldm	r9, {r6, sl}
   24d5c:	sub	r2, r5, r8
   24d60:	cmp	r3, #0
   24d64:	bne	24e58 <__assert_fail@plt+0x12f90>
   24d68:	ldr	r3, [r4]
   24d6c:	ldr	r1, [r4, #24]
   24d70:	add	r1, r3, r1
   24d74:	add	r1, r1, r8
   24d78:	mov	r3, r9
   24d7c:	bl	358a0 <__assert_fail@plt+0x239d8>
   24d80:	mov	r7, r0
   24d84:	add	r0, r0, #1
   24d88:	cmp	r0, #2
   24d8c:	bcc	24da8 <__assert_fail@plt+0x12ee0>
   24d90:	cmn	r7, #2
   24d94:	bne	24dd4 <__assert_fail@plt+0x12f0c>
   24d98:	ldr	r0, [r4, #36]	; 0x24
   24d9c:	ldr	r1, [r4, #48]	; 0x30
   24da0:	cmp	r0, r1
   24da4:	blt	24f10 <__assert_fail@plt+0x13048>
   24da8:	ldr	r1, [r4, #24]
   24dac:	ldr	r0, [r4]
   24db0:	add	r1, r1, r8
   24db4:	ldrb	r0, [r0, r1]
   24db8:	str	r0, [sp]
   24dbc:	ldr	r1, [r4, #64]	; 0x40
   24dc0:	cmp	r1, #0
   24dc4:	bne	24f04 <__assert_fail@plt+0x1303c>
   24dc8:	mov	r7, #1
   24dcc:	stm	r9, {r6, sl}
   24dd0:	b	24dd8 <__assert_fail@plt+0x12f10>
   24dd4:	ldr	r0, [sp]
   24dd8:	ldr	r1, [r4, #8]
   24ddc:	add	sl, r7, r8
   24de0:	add	r6, r8, #1
   24de4:	cmp	r6, sl
   24de8:	str	r0, [r1, r8, lsl #2]
   24dec:	bge	24e44 <__assert_fail@plt+0x12f7c>
   24df0:	mvn	r0, #3
   24df4:	add	r2, r0, r7, lsl #2
   24df8:	add	r0, r1, r8, lsl #2
   24dfc:	mov	r1, #255	; 0xff
   24e00:	add	r0, r0, #4
   24e04:	bl	11d0c <memset@plt>
   24e08:	sub	r1, r7, #1
   24e0c:	sub	r0, r7, #2
   24e10:	ands	r1, r1, #7
   24e14:	beq	24e24 <__assert_fail@plt+0x12f5c>
   24e18:	subs	r1, r1, #1
   24e1c:	add	r6, r6, #1
   24e20:	bne	24e18 <__assert_fail@plt+0x12f50>
   24e24:	cmp	r0, #7
   24e28:	bcc	24e3c <__assert_fail@plt+0x12f74>
   24e2c:	add	r0, r7, r8
   24e30:	sub	r0, r0, r6
   24e34:	subs	r0, r0, #8
   24e38:	bne	24e34 <__assert_fail@plt+0x12f6c>
   24e3c:	mov	r8, sl
   24e40:	b	24e48 <__assert_fail@plt+0x12f80>
   24e44:	mov	r8, r6
   24e48:	mov	r0, sp
   24e4c:	cmp	r5, r8
   24e50:	bgt	24d54 <__assert_fail@plt+0x12e8c>
   24e54:	b	24f14 <__assert_fail@plt+0x1304c>
   24e58:	cmp	r2, #1
   24e5c:	add	r1, sp, #4
   24e60:	blt	24d78 <__assert_fail@plt+0x12eb0>
   24e64:	ldr	r1, [r4, #80]	; 0x50
   24e68:	cmp	r1, #1
   24e6c:	add	r1, sp, #4
   24e70:	blt	24d78 <__assert_fail@plt+0x12eb0>
   24e74:	ldr	r7, [r4, #24]
   24e78:	ldm	r4, {r1, ip}
   24e7c:	cmp	r2, #2
   24e80:	add	r7, r8, r7
   24e84:	ldrb	r1, [r1, r7]
   24e88:	ldrb	r1, [r3, r1]
   24e8c:	strb	r1, [ip, r8]
   24e90:	strb	r1, [sp, #4]
   24e94:	add	r1, sp, #4
   24e98:	blt	24d78 <__assert_fail@plt+0x12eb0>
   24e9c:	ldr	r1, [r4, #80]	; 0x50
   24ea0:	cmp	r1, #2
   24ea4:	add	r1, sp, #4
   24ea8:	blt	24d78 <__assert_fail@plt+0x12eb0>
   24eac:	mov	lr, r0
   24eb0:	mov	r0, #1
   24eb4:	ldr	r7, [r4, #24]
   24eb8:	ldm	r4, {r1, ip}
   24ebc:	ldr	r3, [r4, #64]	; 0x40
   24ec0:	add	r1, r1, r7
   24ec4:	add	r1, r1, r8
   24ec8:	ldrb	r1, [r1, r0]
   24ecc:	ldrb	r1, [r3, r1]
   24ed0:	add	r3, ip, r8
   24ed4:	strb	r1, [r3, r0]
   24ed8:	add	r3, sp, #4
   24edc:	strb	r1, [r3, r0]
   24ee0:	add	r0, r0, #1
   24ee4:	cmp	r0, r2
   24ee8:	bge	24ef8 <__assert_fail@plt+0x13030>
   24eec:	ldr	r1, [r4, #80]	; 0x50
   24ef0:	cmp	r0, r1
   24ef4:	blt	24eb4 <__assert_fail@plt+0x12fec>
   24ef8:	add	r1, sp, #4
   24efc:	mov	r0, lr
   24f00:	b	24d78 <__assert_fail@plt+0x12eb0>
   24f04:	ldrb	r0, [r1, r0]
   24f08:	str	r0, [sp]
   24f0c:	b	24dc8 <__assert_fail@plt+0x12f00>
   24f10:	stm	r9, {r6, sl}
   24f14:	str	r8, [r4, #28]
   24f18:	str	r8, [r4, #32]
   24f1c:	sub	sp, fp, #28
   24f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f28:	add	fp, sp, #28
   24f2c:	sub	sp, sp, #28
   24f30:	ldr	r9, [r1]
   24f34:	mov	r5, r0
   24f38:	ldr	r4, [fp, #12]
   24f3c:	mov	r6, r2
   24f40:	str	r1, [sp, #16]
   24f44:	str	r3, [sp, #20]
   24f48:	ldr	r0, [r9, #84]	; 0x54
   24f4c:	str	r4, [sp, #4]
   24f50:	str	r0, [sp, #12]
   24f54:	ldr	r0, [fp, #8]
   24f58:	str	r0, [sp]
   24f5c:	mov	r0, r5
   24f60:	bl	259cc <__assert_fail@plt+0x13b04>
   24f64:	mov	r7, r0
   24f68:	cmp	r0, #0
   24f6c:	bne	24f7c <__assert_fail@plt+0x130b4>
   24f70:	ldr	r0, [r4]
   24f74:	cmp	r0, #0
   24f78:	bne	25188 <__assert_fail@plt+0x132c0>
   24f7c:	ldrb	r0, [r6, #4]
   24f80:	cmp	r0, #10
   24f84:	bne	250c4 <__assert_fail@plt+0x131fc>
   24f88:	ldr	r0, [sp, #20]
   24f8c:	mov	sl, #0
   24f90:	orr	r0, r0, #8388608	; 0x800000
   24f94:	str	r0, [sp, #24]
   24f98:	ldr	r2, [sp, #24]
   24f9c:	mov	r0, r6
   24fa0:	mov	r1, r5
   24fa4:	bl	25190 <__assert_fail@plt+0x132c8>
   24fa8:	ldr	r1, [r5, #40]	; 0x28
   24fac:	mov	r8, #0
   24fb0:	add	r0, r1, r0
   24fb4:	str	r0, [r5, #40]	; 0x28
   24fb8:	ldrb	r0, [r6, #4]
   24fbc:	orr	r1, r0, #8
   24fc0:	cmp	r1, #10
   24fc4:	bne	25028 <__assert_fail@plt+0x13160>
   24fc8:	ldr	r1, [r9, #64]	; 0x40
   24fcc:	cmp	r1, #31
   24fd0:	beq	2509c <__assert_fail@plt+0x131d4>
   24fd4:	ldr	r0, [r9, #56]	; 0x38
   24fd8:	add	r4, r0, r1, lsl #5
   24fdc:	add	r2, r1, #1
   24fe0:	mov	r0, #10
   24fe4:	cmp	r7, #0
   24fe8:	str	r2, [r9, #64]	; 0x40
   24fec:	str	sl, [r4, #4]!
   24ff0:	stmib	r4, {r7, r8, sl}
   24ff4:	str	sl, [r4, #16]
   24ff8:	str	sl, [r4, #20]
   24ffc:	str	r0, [r4, #24]
   25000:	mvn	r0, #0
   25004:	str	r0, [r4, #28]
   25008:	strne	r4, [r7]
   2500c:	cmp	r8, #0
   25010:	mov	r7, r4
   25014:	strne	r4, [r8]
   25018:	ldrb	r0, [r6, #4]
   2501c:	cmp	r0, #10
   25020:	beq	24f98 <__assert_fail@plt+0x130d0>
   25024:	b	250c8 <__assert_fail@plt+0x13200>
   25028:	ldr	r1, [fp, #8]
   2502c:	cmp	r1, #0
   25030:	beq	25040 <__assert_fail@plt+0x13178>
   25034:	cmp	r0, #9
   25038:	mov	r8, #0
   2503c:	beq	24fc8 <__assert_fail@plt+0x13100>
   25040:	ldr	r0, [sp, #12]
   25044:	ldr	r4, [r9, #84]	; 0x54
   25048:	ldr	r1, [sp, #16]
   2504c:	ldr	r3, [sp, #20]
   25050:	mov	r2, r6
   25054:	str	r0, [r9, #84]	; 0x54
   25058:	ldr	r0, [fp, #8]
   2505c:	str	r0, [sp]
   25060:	ldr	r0, [fp, #12]
   25064:	str	r0, [sp, #4]
   25068:	mov	r0, r5
   2506c:	bl	259cc <__assert_fail@plt+0x13b04>
   25070:	mov	r8, r0
   25074:	cmp	r0, #0
   25078:	bne	2508c <__assert_fail@plt+0x131c4>
   2507c:	ldr	r0, [fp, #12]
   25080:	ldr	r0, [r0]
   25084:	cmp	r0, #0
   25088:	bne	250d4 <__assert_fail@plt+0x1320c>
   2508c:	ldr	r0, [r9, #84]	; 0x54
   25090:	orr	r0, r0, r4
   25094:	str	r0, [r9, #84]	; 0x54
   25098:	b	24fc8 <__assert_fail@plt+0x13100>
   2509c:	mov	r0, #996	; 0x3e4
   250a0:	bl	34810 <__assert_fail@plt+0x22948>
   250a4:	cmp	r0, #0
   250a8:	beq	2517c <__assert_fail@plt+0x132b4>
   250ac:	ldr	r1, [r9, #56]	; 0x38
   250b0:	str	r1, [r0]
   250b4:	mov	r1, #0
   250b8:	str	r1, [r9, #64]	; 0x40
   250bc:	str	r0, [r9, #56]	; 0x38
   250c0:	b	24fd8 <__assert_fail@plt+0x13110>
   250c4:	mov	r4, r7
   250c8:	mov	r0, r4
   250cc:	sub	sp, fp, #28
   250d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250d4:	mov	r4, #0
   250d8:	cmp	r7, #0
   250dc:	beq	250c8 <__assert_fail@plt+0x13200>
   250e0:	movw	r8, #255	; 0xff
   250e4:	movt	r8, #4
   250e8:	mov	r6, r7
   250ec:	ldr	r7, [r7, #4]
   250f0:	cmp	r7, #0
   250f4:	bne	250e8 <__assert_fail@plt+0x13220>
   250f8:	ldr	r7, [r6, #8]
   250fc:	cmp	r7, #0
   25100:	bne	250e8 <__assert_fail@plt+0x13220>
   25104:	ldr	r0, [r6, #24]
   25108:	and	r0, r0, r8
   2510c:	cmp	r0, #3
   25110:	beq	25144 <__assert_fail@plt+0x1327c>
   25114:	cmp	r0, #6
   25118:	bne	25150 <__assert_fail@plt+0x13288>
   2511c:	ldr	r5, [r6, #20]
   25120:	ldr	r0, [r5]
   25124:	bl	176c0 <__assert_fail@plt+0x57f8>
   25128:	ldr	r0, [r5, #4]
   2512c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25130:	ldr	r0, [r5, #8]
   25134:	bl	176c0 <__assert_fail@plt+0x57f8>
   25138:	ldr	r0, [r5, #12]
   2513c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25140:	b	25148 <__assert_fail@plt+0x13280>
   25144:	ldr	r5, [r6, #20]
   25148:	mov	r0, r5
   2514c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25150:	ldr	r0, [r6]
   25154:	cmp	r0, #0
   25158:	beq	250c8 <__assert_fail@plt+0x13200>
   2515c:	ldr	r7, [r0, #8]
   25160:	cmp	r7, r6
   25164:	mov	r6, r0
   25168:	beq	25104 <__assert_fail@plt+0x1323c>
   2516c:	cmp	r7, #0
   25170:	mov	r6, r0
   25174:	beq	25104 <__assert_fail@plt+0x1323c>
   25178:	b	250e8 <__assert_fail@plt+0x13220>
   2517c:	ldr	r1, [fp, #12]
   25180:	mov	r0, #12
   25184:	str	r0, [r1]
   25188:	mov	r4, #0
   2518c:	b	250c8 <__assert_fail@plt+0x13200>
   25190:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25194:	add	fp, sp, #24
   25198:	sub	sp, sp, #8
   2519c:	mov	r9, r0
   251a0:	mov	r7, r1
   251a4:	ldr	r0, [r1, #40]	; 0x28
   251a8:	ldr	r1, [r1, #56]	; 0x38
   251ac:	cmp	r1, r0
   251b0:	ble	25298 <__assert_fail@plt+0x133d0>
   251b4:	ldr	r1, [r7, #4]
   251b8:	mov	r5, r9
   251bc:	mov	r8, r2
   251c0:	ldrb	r6, [r1, r0]
   251c4:	strb	r6, [r5], #4
   251c8:	ldr	r0, [r5]
   251cc:	bic	r1, r0, #6291456	; 0x600000
   251d0:	str	r1, [r5]
   251d4:	ldr	r3, [r7, #80]	; 0x50
   251d8:	cmp	r3, #2
   251dc:	blt	25200 <__assert_fail@plt+0x13338>
   251e0:	ldr	r2, [r7, #28]
   251e4:	ldr	r1, [r7, #40]	; 0x28
   251e8:	cmp	r1, r2
   251ec:	beq	25200 <__assert_fail@plt+0x13338>
   251f0:	ldr	r2, [r7, #8]
   251f4:	ldr	r1, [r2, r1, lsl #2]
   251f8:	cmn	r1, #1
   251fc:	beq	256d4 <__assert_fail@plt+0x1380c>
   25200:	movw	r1, #65280	; 0xff00
   25204:	cmp	r6, #92	; 0x5c
   25208:	movt	r1, #65439	; 0xff9f
   2520c:	bne	252a8 <__assert_fail@plt+0x133e0>
   25210:	ldr	r6, [r7, #40]	; 0x28
   25214:	ldr	r4, [r7, #48]	; 0x30
   25218:	add	r2, r6, #1
   2521c:	cmp	r2, r4
   25220:	bge	252fc <__assert_fail@plt+0x13434>
   25224:	ldrb	r4, [r7, #75]	; 0x4b
   25228:	cmp	r4, #0
   2522c:	bne	25958 <__assert_fail@plt+0x13a90>
   25230:	ldr	r3, [r7, #4]
   25234:	ldrb	r6, [r3, r2]
   25238:	and	r0, r0, r1
   2523c:	strb	r6, [r9]
   25240:	orr	r4, r0, #1
   25244:	str	r4, [r9, #4]
   25248:	ldr	r0, [r7, #80]	; 0x50
   2524c:	cmp	r0, #2
   25250:	blt	25520 <__assert_fail@plt+0x13658>
   25254:	ldr	r0, [r7, #8]
   25258:	ldr	r1, [r7, #40]	; 0x28
   2525c:	add	r0, r0, r1, lsl #2
   25260:	ldr	r4, [r0, #4]
   25264:	mov	r0, r4
   25268:	bl	11ce8 <iswalnum@plt>
   2526c:	sub	r1, r4, #95	; 0x5f
   25270:	cmp	r0, #0
   25274:	clz	r1, r1
   25278:	movwne	r0, #1
   2527c:	lsr	r1, r1, #5
   25280:	orr	r0, r1, r0
   25284:	ldr	r1, [r5]
   25288:	bic	r1, r1, #4194304	; 0x400000
   2528c:	orr	r0, r1, r0, lsl #22
   25290:	uxtb	r1, r6
   25294:	b	25544 <__assert_fail@plt+0x1367c>
   25298:	mov	r0, #2
   2529c:	mov	r4, #0
   252a0:	strb	r0, [r9, #4]
   252a4:	b	2594c <__assert_fail@plt+0x13a84>
   252a8:	and	r0, r0, r1
   252ac:	orr	r4, r0, #1
   252b0:	str	r4, [r5]
   252b4:	ldr	r0, [r7, #80]	; 0x50
   252b8:	cmp	r0, #2
   252bc:	blt	25308 <__assert_fail@plt+0x13440>
   252c0:	ldr	r0, [r7, #8]
   252c4:	ldr	r1, [r7, #40]	; 0x28
   252c8:	ldr	r4, [r0, r1, lsl #2]
   252cc:	mov	r0, r4
   252d0:	bl	11ce8 <iswalnum@plt>
   252d4:	sub	r1, r4, #95	; 0x5f
   252d8:	cmp	r0, #0
   252dc:	clz	r1, r1
   252e0:	movwne	r0, #1
   252e4:	lsr	r1, r1, #5
   252e8:	orr	r0, r1, r0
   252ec:	ldr	r1, [r5]
   252f0:	bic	r1, r1, #4194304	; 0x400000
   252f4:	orr	r0, r1, r0, lsl #22
   252f8:	b	25328 <__assert_fail@plt+0x13460>
   252fc:	and	r0, r0, r1
   25300:	orr	r0, r0, #36	; 0x24
   25304:	b	256e8 <__assert_fail@plt+0x13820>
   25308:	bl	11c7c <__ctype_b_loc@plt>
   2530c:	ldr	r0, [r0]
   25310:	cmp	r6, #95	; 0x5f
   25314:	add	r0, r0, r6, lsl #1
   25318:	ldrh	r0, [r0]
   2531c:	ubfx	r0, r0, #3, #1
   25320:	movweq	r0, #1
   25324:	orr	r0, r4, r0, lsl #22
   25328:	sub	r1, r6, #10
   2532c:	mov	r4, #1
   25330:	str	r0, [r5]
   25334:	cmp	r1, #115	; 0x73
   25338:	bhi	2594c <__assert_fail@plt+0x13a84>
   2533c:	add	r2, pc, #0
   25340:	ldr	pc, [r2, r1, lsl #2]
   25344:	andeq	r5, r2, r4, lsl r5
   25348:	andeq	r5, r2, ip, asr #18
   2534c:	andeq	r5, r2, ip, asr #18
   25350:	andeq	r5, r2, ip, asr #18
   25354:	andeq	r5, r2, ip, asr #18
   25358:	andeq	r5, r2, ip, asr #18
   2535c:	andeq	r5, r2, ip, asr #18
   25360:	andeq	r5, r2, ip, asr #18
   25364:	andeq	r5, r2, ip, asr #18
   25368:	andeq	r5, r2, ip, asr #18
   2536c:	andeq	r5, r2, ip, asr #18
   25370:	andeq	r5, r2, ip, asr #18
   25374:	andeq	r5, r2, ip, asr #18
   25378:	andeq	r5, r2, ip, asr #18
   2537c:	andeq	r5, r2, ip, asr #18
   25380:	andeq	r5, r2, ip, asr #18
   25384:	andeq	r5, r2, ip, asr #18
   25388:	andeq	r5, r2, ip, asr #18
   2538c:	andeq	r5, r2, ip, asr #18
   25390:	andeq	r5, r2, ip, asr #18
   25394:	andeq	r5, r2, ip, asr #18
   25398:	andeq	r5, r2, ip, asr #18
   2539c:	andeq	r5, r2, ip, asr #18
   253a0:	andeq	r5, r2, ip, asr #18
   253a4:	andeq	r5, r2, ip, asr #18
   253a8:	andeq	r5, r2, ip, asr #18
   253ac:	strdeq	r5, [r2], -r4
   253b0:	andeq	r5, r2, ip, asr #18
   253b4:	andeq	r5, r2, ip, asr #18
   253b8:	andeq	r5, r2, ip, asr #18
   253bc:	andeq	r5, r2, ip, asr #14
   253c0:	andeq	r5, r2, r8, asr r7
   253c4:	andeq	r5, r2, r4, ror #14
   253c8:	andeq	r5, r2, ip, ror #14
   253cc:	andeq	r5, r2, ip, asr #18
   253d0:	andeq	r5, r2, ip, asr #18
   253d4:	andeq	r5, r2, ip, ror r7
   253d8:	andeq	r5, r2, ip, asr #18
   253dc:	andeq	r5, r2, ip, asr #18
   253e0:	andeq	r5, r2, ip, asr #18
   253e4:	andeq	r5, r2, ip, asr #18
   253e8:	andeq	r5, r2, ip, asr #18
   253ec:	andeq	r5, r2, ip, asr #18
   253f0:	andeq	r5, r2, ip, asr #18
   253f4:	andeq	r5, r2, ip, asr #18
   253f8:	andeq	r5, r2, ip, asr #18
   253fc:	andeq	r5, r2, ip, asr #18
   25400:	andeq	r5, r2, ip, asr #18
   25404:	andeq	r5, r2, ip, asr #18
   25408:	andeq	r5, r2, ip, asr #18
   2540c:	andeq	r5, r2, ip, asr #18
   25410:	andeq	r5, r2, ip, asr #18
   25414:	andeq	r5, r2, ip, asr #18
   25418:	andeq	r5, r2, r4, lsl #15
   2541c:	andeq	r5, r2, ip, asr #18
   25420:	andeq	r5, r2, ip, asr #18
   25424:	andeq	r5, r2, ip, asr #18
   25428:	andeq	r5, r2, ip, asr #18
   2542c:	andeq	r5, r2, ip, asr #18
   25430:	andeq	r5, r2, ip, asr #18
   25434:	andeq	r5, r2, ip, asr #18
   25438:	andeq	r5, r2, ip, asr #18
   2543c:	andeq	r5, r2, ip, asr #18
   25440:	andeq	r5, r2, ip, asr #18
   25444:	andeq	r5, r2, ip, asr #18
   25448:	andeq	r5, r2, ip, asr #18
   2544c:	andeq	r5, r2, ip, asr #18
   25450:	andeq	r5, r2, ip, asr #18
   25454:	andeq	r5, r2, ip, asr #18
   25458:	andeq	r5, r2, ip, asr #18
   2545c:	andeq	r5, r2, ip, asr #18
   25460:	andeq	r5, r2, ip, asr #18
   25464:	andeq	r5, r2, ip, asr #18
   25468:	andeq	r5, r2, ip, asr #18
   2546c:	andeq	r5, r2, ip, asr #18
   25470:	andeq	r5, r2, ip, asr #18
   25474:	andeq	r5, r2, ip, asr #18
   25478:	andeq	r5, r2, ip, asr #18
   2547c:	andeq	r5, r2, ip, asr #18
   25480:	andeq	r5, r2, ip, asr #18
   25484:	andeq	r5, r2, ip, asr #18
   25488:	muleq	r2, r4, r7
   2548c:	andeq	r5, r2, ip, asr #18
   25490:	andeq	r5, r2, ip, asr #18
   25494:	muleq	r2, ip, r7
   25498:	andeq	r5, r2, ip, asr #18
   2549c:	andeq	r5, r2, ip, asr #18
   254a0:	andeq	r5, r2, ip, asr #18
   254a4:	andeq	r5, r2, ip, asr #18
   254a8:	andeq	r5, r2, ip, asr #18
   254ac:	andeq	r5, r2, ip, asr #18
   254b0:	andeq	r5, r2, ip, asr #18
   254b4:	andeq	r5, r2, ip, asr #18
   254b8:	andeq	r5, r2, ip, asr #18
   254bc:	andeq	r5, r2, ip, asr #18
   254c0:	andeq	r5, r2, ip, asr #18
   254c4:	andeq	r5, r2, ip, asr #18
   254c8:	andeq	r5, r2, ip, asr #18
   254cc:	andeq	r5, r2, ip, asr #18
   254d0:	andeq	r5, r2, ip, asr #18
   254d4:	andeq	r5, r2, ip, asr #18
   254d8:	andeq	r5, r2, ip, asr #18
   254dc:	andeq	r5, r2, ip, asr #18
   254e0:	andeq	r5, r2, ip, asr #18
   254e4:	andeq	r5, r2, ip, asr #18
   254e8:	andeq	r5, r2, ip, asr #18
   254ec:	andeq	r5, r2, ip, asr #18
   254f0:	andeq	r5, r2, ip, asr #18
   254f4:	andeq	r5, r2, ip, asr #18
   254f8:	andeq	r5, r2, ip, asr #18
   254fc:	andeq	r5, r2, ip, asr #18
   25500:	andeq	r5, r2, ip, asr #18
   25504:	andeq	r5, r2, ip, asr #18
   25508:	andeq	r5, r2, r4, asr #15
   2550c:	ldrdeq	r5, [r2], -r4
   25510:	andeq	r5, r2, r8, ror #15
   25514:	tst	r8, #2048	; 0x800
   25518:	bne	257e0 <__assert_fail@plt+0x13918>
   2551c:	b	2594c <__assert_fail@plt+0x13a84>
   25520:	bl	11c7c <__ctype_b_loc@plt>
   25524:	ldr	r0, [r0]
   25528:	uxtb	r1, r6
   2552c:	cmp	r1, #95	; 0x5f
   25530:	add	r0, r0, r1, lsl #1
   25534:	ldrh	r0, [r0]
   25538:	ubfx	r0, r0, #3, #1
   2553c:	movweq	r0, #1
   25540:	orr	r0, r4, r0, lsl #22
   25544:	mvn	r2, #38	; 0x26
   25548:	mov	r4, #2
   2554c:	str	r0, [r5]
   25550:	uxtab	r2, r2, r6
   25554:	cmp	r2, #86	; 0x56
   25558:	bhi	2594c <__assert_fail@plt+0x13a84>
   2555c:	add	r3, pc, #0
   25560:	ldr	pc, [r3, r2, lsl #2]
   25564:	andeq	r5, r2, r4, lsr #16
   25568:	andeq	r5, r2, r4, lsr r8
   2556c:	andeq	r5, r2, r4, asr #16
   25570:	andeq	r5, r2, ip, asr #18
   25574:	andeq	r5, r2, r4, asr r8
   25578:	andeq	r5, r2, ip, asr #18
   2557c:	andeq	r5, r2, ip, asr #18
   25580:	andeq	r5, r2, ip, asr #18
   25584:	andeq	r5, r2, ip, asr #18
   25588:	andeq	r5, r2, ip, asr #18
   2558c:	andeq	r5, r2, r0, asr #13
   25590:	andeq	r5, r2, r0, asr #13
   25594:	andeq	r5, r2, r0, asr #13
   25598:	andeq	r5, r2, r0, asr #13
   2559c:	andeq	r5, r2, r0, asr #13
   255a0:	andeq	r5, r2, r0, asr #13
   255a4:	andeq	r5, r2, r0, asr #13
   255a8:	andeq	r5, r2, r0, asr #13
   255ac:	andeq	r5, r2, r0, asr #13
   255b0:	andeq	r5, r2, ip, asr #18
   255b4:	andeq	r5, r2, ip, asr #18
   255b8:	andeq	r5, r2, ip, ror #16
   255bc:	andeq	r5, r2, ip, asr #18
   255c0:	andeq	r5, r2, ip, ror r8
   255c4:	andeq	r5, r2, ip, lsl #17
   255c8:	andeq	r5, r2, ip, asr #18
   255cc:	andeq	r5, r2, ip, asr #18
   255d0:	andeq	r5, r2, r4, lsr #17
   255d4:	andeq	r5, r2, ip, asr #18
   255d8:	andeq	r5, r2, ip, asr #18
   255dc:	andeq	r5, r2, ip, asr #18
   255e0:	andeq	r5, r2, ip, asr #18
   255e4:	andeq	r5, r2, ip, asr #18
   255e8:	andeq	r5, r2, ip, asr #18
   255ec:	andeq	r5, r2, ip, asr #18
   255f0:	andeq	r5, r2, ip, asr #18
   255f4:	andeq	r5, r2, ip, asr #18
   255f8:	andeq	r5, r2, ip, asr #18
   255fc:	andeq	r5, r2, ip, asr #18
   25600:	andeq	r5, r2, ip, asr #18
   25604:	andeq	r5, r2, ip, asr #18
   25608:	andeq	r5, r2, ip, asr #18
   2560c:	andeq	r5, r2, ip, asr #18
   25610:	andeq	r5, r2, ip, asr #18
   25614:			; <UNDEFINED> instruction: 0x000258b4
   25618:	andeq	r5, r2, ip, asr #18
   2561c:	andeq	r5, r2, ip, asr #18
   25620:	andeq	r5, r2, ip, asr #18
   25624:	andeq	r5, r2, r4, asr #17
   25628:	andeq	r5, r2, ip, asr #18
   2562c:	andeq	r5, r2, ip, asr #18
   25630:	andeq	r5, r2, ip, asr #18
   25634:	andeq	r5, r2, ip, asr #18
   25638:	andeq	r5, r2, ip, asr #18
   2563c:	andeq	r5, r2, ip, asr #18
   25640:	andeq	r5, r2, ip, asr #18
   25644:	andeq	r5, r2, ip, asr #18
   25648:	ldrdeq	r5, [r2], -r4
   2564c:	andeq	r5, r2, ip, asr #18
   25650:	andeq	r5, r2, r4, ror #17
   25654:	andeq	r5, r2, ip, asr #18
   25658:	andeq	r5, r2, ip, asr #18
   2565c:	andeq	r5, r2, ip, asr #18
   25660:	andeq	r5, r2, ip, asr #18
   25664:	andeq	r5, r2, ip, asr #18
   25668:	andeq	r5, r2, ip, asr #18
   2566c:	andeq	r5, r2, ip, asr #18
   25670:	andeq	r5, r2, ip, asr #18
   25674:	andeq	r5, r2, ip, asr #18
   25678:	andeq	r5, r2, ip, asr #18
   2567c:	andeq	r5, r2, ip, asr #18
   25680:	andeq	r5, r2, ip, asr #18
   25684:	andeq	r5, r2, ip, asr #18
   25688:	andeq	r5, r2, ip, asr #18
   2568c:	andeq	r5, r2, ip, asr #18
   25690:	andeq	r5, r2, ip, asr #18
   25694:	strdeq	r5, [r2], -r4
   25698:	andeq	r5, r2, ip, asr #18
   2569c:	andeq	r5, r2, ip, asr #18
   256a0:	andeq	r5, r2, ip, asr #18
   256a4:	andeq	r5, r2, r4, lsl #18
   256a8:	andeq	r5, r2, ip, asr #18
   256ac:	andeq	r5, r2, ip, asr #18
   256b0:	andeq	r5, r2, ip, asr #18
   256b4:	andeq	r5, r2, r4, lsl r9
   256b8:	andeq	r5, r2, r8, lsr #18
   256bc:	andeq	r5, r2, r4, lsr r9
   256c0:	tst	r8, #16384	; 0x4000
   256c4:	bne	2594c <__assert_fail@plt+0x13a84>
   256c8:	sub	r1, r1, #49	; 0x31
   256cc:	mov	r2, #4
   256d0:	b	257b4 <__assert_fail@plt+0x138ec>
   256d4:	movw	r1, #65280	; 0xff00
   256d8:	movt	r1, #65439	; 0xff9f
   256dc:	and	r0, r0, r1
   256e0:	orr	r0, r0, #1
   256e4:	orr	r0, r0, #2097152	; 0x200000
   256e8:	str	r0, [r5]
   256ec:	mov	r4, #1
   256f0:	b	2594c <__assert_fail@plt+0x13a84>
   256f4:	tst	r8, #8
   256f8:	bne	25744 <__assert_fail@plt+0x1387c>
   256fc:	ldr	r1, [r7, #40]	; 0x28
   25700:	ldr	r2, [r7, #48]	; 0x30
   25704:	add	r1, r1, #1
   25708:	cmp	r1, r2
   2570c:	beq	25744 <__assert_fail@plt+0x1387c>
   25710:	str	r1, [r7, #40]	; 0x28
   25714:	mov	r0, sp
   25718:	mov	r1, r7
   2571c:	mov	r2, r8
   25720:	bl	25190 <__assert_fail@plt+0x132c8>
   25724:	ldr	r0, [r7, #40]	; 0x28
   25728:	sub	r0, r0, #1
   2572c:	str	r0, [r7, #40]	; 0x28
   25730:	ldrb	r0, [sp, #4]
   25734:	sub	r0, r0, #9
   25738:	cmp	r0, #1
   2573c:	bhi	2594c <__assert_fail@plt+0x13a84>
   25740:	ldr	r0, [r5]
   25744:	mov	r1, #32
   25748:	b	257b0 <__assert_fail@plt+0x138e8>
   2574c:	tst	r8, #8192	; 0x2000
   25750:	bne	2583c <__assert_fail@plt+0x13974>
   25754:	b	2594c <__assert_fail@plt+0x13a84>
   25758:	tst	r8, #8192	; 0x2000
   2575c:	bne	2584c <__assert_fail@plt+0x13984>
   25760:	b	2594c <__assert_fail@plt+0x13a84>
   25764:	mov	r1, #11
   25768:	b	25944 <__assert_fail@plt+0x13a7c>
   2576c:	movw	r1, #1026	; 0x402
   25770:	tst	r8, r1
   25774:	bne	2594c <__assert_fail@plt+0x13a84>
   25778:	b	25864 <__assert_fail@plt+0x1399c>
   2577c:	mov	r1, #5
   25780:	b	25944 <__assert_fail@plt+0x13a7c>
   25784:	movw	r1, #1026	; 0x402
   25788:	tst	r8, r1
   2578c:	bne	2594c <__assert_fail@plt+0x13a84>
   25790:	b	2589c <__assert_fail@plt+0x139d4>
   25794:	mov	r1, #20
   25798:	b	25944 <__assert_fail@plt+0x13a7c>
   2579c:	movw	r1, #8
   257a0:	movt	r1, #128	; 0x80
   257a4:	tst	r8, r1
   257a8:	beq	257f8 <__assert_fail@plt+0x13930>
   257ac:	mov	r1, #16
   257b0:	mov	r2, #12
   257b4:	bfi	r0, r2, #0, #8
   257b8:	str	r1, [r9]
   257bc:	str	r0, [r9, #4]
   257c0:	b	2594c <__assert_fail@plt+0x13a84>
   257c4:	and	r1, r8, #4608	; 0x1200
   257c8:	cmp	r1, #4608	; 0x1200
   257cc:	beq	25920 <__assert_fail@plt+0x13a58>
   257d0:	b	2594c <__assert_fail@plt+0x13a84>
   257d4:	and	r1, r8, #33792	; 0x8400
   257d8:	cmp	r1, #32768	; 0x8000
   257dc:	bne	2594c <__assert_fail@plt+0x13a84>
   257e0:	mov	r1, #10
   257e4:	b	25944 <__assert_fail@plt+0x13a7c>
   257e8:	and	r1, r8, #4608	; 0x1200
   257ec:	cmp	r1, #4608	; 0x1200
   257f0:	beq	25940 <__assert_fail@plt+0x13a78>
   257f4:	b	2594c <__assert_fail@plt+0x13a84>
   257f8:	ldr	r1, [r7, #40]	; 0x28
   257fc:	cmp	r1, #0
   25800:	beq	257ac <__assert_fail@plt+0x138e4>
   25804:	tst	r8, #2048	; 0x800
   25808:	beq	2594c <__assert_fail@plt+0x13a84>
   2580c:	ldr	r2, [r7, #4]
   25810:	add	r1, r1, r2
   25814:	ldrb	r1, [r1, #-1]
   25818:	cmp	r1, #10
   2581c:	beq	257ac <__assert_fail@plt+0x138e4>
   25820:	b	2594c <__assert_fail@plt+0x13a84>
   25824:	tst	r8, #524288	; 0x80000
   25828:	bne	2594c <__assert_fail@plt+0x13a84>
   2582c:	mov	r1, #128	; 0x80
   25830:	b	257b0 <__assert_fail@plt+0x138e8>
   25834:	tst	r8, #8192	; 0x2000
   25838:	bne	2594c <__assert_fail@plt+0x13a84>
   2583c:	mov	r1, #8
   25840:	b	25944 <__assert_fail@plt+0x13a7c>
   25844:	tst	r8, #8192	; 0x2000
   25848:	bne	2594c <__assert_fail@plt+0x13a84>
   2584c:	mov	r1, #9
   25850:	b	25944 <__assert_fail@plt+0x13a7c>
   25854:	movw	r1, #1026	; 0x402
   25858:	and	r1, r8, r1
   2585c:	cmp	r1, #2
   25860:	bne	2594c <__assert_fail@plt+0x13a84>
   25864:	mov	r1, #18
   25868:	b	25944 <__assert_fail@plt+0x13a7c>
   2586c:	tst	r8, #524288	; 0x80000
   25870:	bne	2594c <__assert_fail@plt+0x13a84>
   25874:	mov	r1, #6
   25878:	b	257b0 <__assert_fail@plt+0x138e8>
   2587c:	tst	r8, #524288	; 0x80000
   25880:	bne	2594c <__assert_fail@plt+0x13a84>
   25884:	mov	r1, #9
   25888:	b	257b0 <__assert_fail@plt+0x138e8>
   2588c:	movw	r1, #1026	; 0x402
   25890:	and	r1, r8, r1
   25894:	cmp	r1, #2
   25898:	bne	2594c <__assert_fail@plt+0x13a84>
   2589c:	mov	r1, #19
   258a0:	b	25944 <__assert_fail@plt+0x13a7c>
   258a4:	tst	r8, #524288	; 0x80000
   258a8:	bne	2594c <__assert_fail@plt+0x13a84>
   258ac:	mov	r1, #512	; 0x200
   258b0:	b	257b0 <__assert_fail@plt+0x138e8>
   258b4:	tst	r8, #524288	; 0x80000
   258b8:	bne	2594c <__assert_fail@plt+0x13a84>
   258bc:	mov	r1, #35	; 0x23
   258c0:	b	25944 <__assert_fail@plt+0x13a7c>
   258c4:	tst	r8, #524288	; 0x80000
   258c8:	bne	2594c <__assert_fail@plt+0x13a84>
   258cc:	mov	r1, #33	; 0x21
   258d0:	b	25944 <__assert_fail@plt+0x13a7c>
   258d4:	tst	r8, #524288	; 0x80000
   258d8:	bne	2594c <__assert_fail@plt+0x13a84>
   258dc:	mov	r1, #64	; 0x40
   258e0:	b	257b0 <__assert_fail@plt+0x138e8>
   258e4:	tst	r8, #524288	; 0x80000
   258e8:	bne	2594c <__assert_fail@plt+0x13a84>
   258ec:	mov	r1, #256	; 0x100
   258f0:	b	257b0 <__assert_fail@plt+0x138e8>
   258f4:	tst	r8, #524288	; 0x80000
   258f8:	bne	2594c <__assert_fail@plt+0x13a84>
   258fc:	mov	r1, #34	; 0x22
   25900:	b	25944 <__assert_fail@plt+0x13a7c>
   25904:	tst	r8, #524288	; 0x80000
   25908:	bne	2594c <__assert_fail@plt+0x13a84>
   2590c:	mov	r1, #32
   25910:	b	25944 <__assert_fail@plt+0x13a7c>
   25914:	and	r1, r8, #4608	; 0x1200
   25918:	cmp	r1, #512	; 0x200
   2591c:	bne	2594c <__assert_fail@plt+0x13a84>
   25920:	mov	r1, #23
   25924:	b	25944 <__assert_fail@plt+0x13a7c>
   25928:	tst	r8, #33792	; 0x8400
   2592c:	bne	2594c <__assert_fail@plt+0x13a84>
   25930:	b	257e0 <__assert_fail@plt+0x13918>
   25934:	and	r1, r8, #4608	; 0x1200
   25938:	cmp	r1, #512	; 0x200
   2593c:	bne	2594c <__assert_fail@plt+0x13a84>
   25940:	mov	r1, #24
   25944:	bfi	r0, r1, #0, #8
   25948:	str	r0, [r5]
   2594c:	mov	r0, r4
   25950:	sub	sp, fp, #24
   25954:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25958:	cmp	r3, #2
   2595c:	blt	2598c <__assert_fail@plt+0x13ac4>
   25960:	ldr	r3, [r7, #8]
   25964:	ldr	r4, [r3, r2, lsl #2]
   25968:	cmn	r4, #1
   2596c:	beq	25230 <__assert_fail@plt+0x13368>
   25970:	ldr	r4, [r7, #28]
   25974:	add	r6, r6, #2
   25978:	cmp	r4, r6
   2597c:	beq	2598c <__assert_fail@plt+0x13ac4>
   25980:	ldr	r3, [r3, r6, lsl #2]
   25984:	cmn	r3, #1
   25988:	beq	25230 <__assert_fail@plt+0x13368>
   2598c:	ldrb	r3, [r7, #76]	; 0x4c
   25990:	mov	r6, r2
   25994:	cmp	r3, #0
   25998:	beq	259a4 <__assert_fail@plt+0x13adc>
   2599c:	ldr	r6, [r7, #12]
   259a0:	ldr	r6, [r6, r2, lsl #2]
   259a4:	ldr	r4, [r7, #24]
   259a8:	ldr	ip, [r7]
   259ac:	cmp	r3, #0
   259b0:	add	r6, r4, r6
   259b4:	add	r6, ip, r6
   259b8:	ldrsb	r6, [r6]
   259bc:	beq	25238 <__assert_fail@plt+0x13370>
   259c0:	cmn	r6, #1
   259c4:	ble	25230 <__assert_fail@plt+0x13368>
   259c8:	b	25238 <__assert_fail@plt+0x13370>
   259cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259d0:	add	fp, sp, #28
   259d4:	sub	sp, sp, #20
   259d8:	ldr	r4, [fp, #12]
   259dc:	ldr	r7, [fp, #8]
   259e0:	ldr	sl, [r1]
   259e4:	mov	r6, r2
   259e8:	str	r0, [sp, #12]
   259ec:	str	r1, [sp, #8]
   259f0:	str	r3, [sp, #16]
   259f4:	str	r4, [sp, #4]
   259f8:	str	r7, [sp]
   259fc:	bl	25d20 <__assert_fail@plt+0x13e58>
   25a00:	mov	r3, r4
   25a04:	mov	r4, r0
   25a08:	cmp	r0, #0
   25a0c:	bne	25a38 <__assert_fail@plt+0x13b70>
   25a10:	ldr	r0, [r3]
   25a14:	cmp	r0, #0
   25a18:	beq	25a38 <__assert_fail@plt+0x13b70>
   25a1c:	b	25d08 <__assert_fail@plt+0x13e40>
   25a20:	cmp	r4, #0
   25a24:	cmpne	r5, #0
   25a28:	bne	25a9c <__assert_fail@plt+0x13bd4>
   25a2c:	cmp	r4, #0
   25a30:	mov	r7, r8
   25a34:	moveq	r4, r5
   25a38:	ldrb	r0, [r6, #4]
   25a3c:	orr	r1, r0, #8
   25a40:	cmp	r1, #10
   25a44:	beq	25d0c <__assert_fail@plt+0x13e44>
   25a48:	cmp	r7, #0
   25a4c:	beq	25a58 <__assert_fail@plt+0x13b90>
   25a50:	cmp	r0, #9
   25a54:	beq	25d0c <__assert_fail@plt+0x13e44>
   25a58:	str	r3, [sp, #4]
   25a5c:	mov	r9, r3
   25a60:	ldr	r0, [sp, #12]
   25a64:	ldr	r1, [sp, #8]
   25a68:	ldr	r3, [sp, #16]
   25a6c:	mov	r2, r6
   25a70:	mov	r8, r7
   25a74:	str	r7, [sp]
   25a78:	bl	25d20 <__assert_fail@plt+0x13e58>
   25a7c:	mov	r3, r9
   25a80:	mov	r5, r0
   25a84:	cmp	r0, #0
   25a88:	bne	25a20 <__assert_fail@plt+0x13b58>
   25a8c:	ldr	r0, [r3]
   25a90:	cmp	r0, #0
   25a94:	beq	25a20 <__assert_fail@plt+0x13b58>
   25a98:	b	25b20 <__assert_fail@plt+0x13c58>
   25a9c:	ldr	r1, [sl, #64]	; 0x40
   25aa0:	cmp	r1, #31
   25aa4:	beq	25af4 <__assert_fail@plt+0x13c2c>
   25aa8:	ldr	r0, [sl, #56]	; 0x38
   25aac:	add	r0, r0, r1, lsl #5
   25ab0:	add	r2, r1, #1
   25ab4:	mov	r1, #0
   25ab8:	mov	r7, r8
   25abc:	str	r2, [sl, #64]	; 0x40
   25ac0:	str	r1, [r0, #4]!
   25ac4:	stmib	r0, {r4, r5}
   25ac8:	str	r1, [r0, #12]
   25acc:	str	r1, [r0, #16]
   25ad0:	str	r1, [r0, #20]
   25ad4:	mov	r1, #16
   25ad8:	str	r1, [r0, #24]
   25adc:	mvn	r1, #0
   25ae0:	str	r1, [r0, #28]
   25ae4:	str	r0, [r4]
   25ae8:	str	r0, [r5]
   25aec:	mov	r4, r0
   25af0:	b	25a38 <__assert_fail@plt+0x13b70>
   25af4:	mov	r0, #996	; 0x3e4
   25af8:	bl	34810 <__assert_fail@plt+0x22948>
   25afc:	cmp	r0, #0
   25b00:	beq	25bc4 <__assert_fail@plt+0x13cfc>
   25b04:	ldr	r1, [sl, #56]	; 0x38
   25b08:	mov	r3, r9
   25b0c:	str	r1, [r0]
   25b10:	mov	r1, #0
   25b14:	str	r1, [sl, #64]	; 0x40
   25b18:	str	r0, [sl, #56]	; 0x38
   25b1c:	b	25aac <__assert_fail@plt+0x13be4>
   25b20:	cmp	r4, #0
   25b24:	beq	25d08 <__assert_fail@plt+0x13e40>
   25b28:	movw	r5, #255	; 0xff
   25b2c:	movt	r5, #4
   25b30:	mov	r6, r4
   25b34:	ldr	r4, [r4, #4]
   25b38:	cmp	r4, #0
   25b3c:	bne	25b30 <__assert_fail@plt+0x13c68>
   25b40:	ldr	r4, [r6, #8]
   25b44:	cmp	r4, #0
   25b48:	bne	25b30 <__assert_fail@plt+0x13c68>
   25b4c:	ldr	r0, [r6, #24]
   25b50:	and	r0, r0, r5
   25b54:	cmp	r0, #3
   25b58:	beq	25b8c <__assert_fail@plt+0x13cc4>
   25b5c:	cmp	r0, #6
   25b60:	bne	25b98 <__assert_fail@plt+0x13cd0>
   25b64:	ldr	r4, [r6, #20]
   25b68:	ldr	r0, [r4]
   25b6c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25b70:	ldr	r0, [r4, #4]
   25b74:	bl	176c0 <__assert_fail@plt+0x57f8>
   25b78:	ldr	r0, [r4, #8]
   25b7c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25b80:	ldr	r0, [r4, #12]
   25b84:	bl	176c0 <__assert_fail@plt+0x57f8>
   25b88:	b	25b90 <__assert_fail@plt+0x13cc8>
   25b8c:	ldr	r4, [r6, #20]
   25b90:	mov	r0, r4
   25b94:	bl	176c0 <__assert_fail@plt+0x57f8>
   25b98:	ldr	r0, [r6]
   25b9c:	cmp	r0, #0
   25ba0:	beq	25d08 <__assert_fail@plt+0x13e40>
   25ba4:	ldr	r4, [r0, #8]
   25ba8:	cmp	r4, r6
   25bac:	mov	r6, r0
   25bb0:	beq	25b4c <__assert_fail@plt+0x13c84>
   25bb4:	cmp	r4, #0
   25bb8:	mov	r6, r0
   25bbc:	beq	25b4c <__assert_fail@plt+0x13c84>
   25bc0:	b	25b30 <__assert_fail@plt+0x13c68>
   25bc4:	movw	r6, #255	; 0xff
   25bc8:	mov	r1, r9
   25bcc:	movt	r6, #4
   25bd0:	mov	r7, r5
   25bd4:	ldr	r5, [r5, #4]
   25bd8:	cmp	r5, #0
   25bdc:	bne	25bd0 <__assert_fail@plt+0x13d08>
   25be0:	ldr	r5, [r7, #8]
   25be4:	cmp	r5, #0
   25be8:	bne	25bd0 <__assert_fail@plt+0x13d08>
   25bec:	ldr	r0, [r7, #24]
   25bf0:	and	r0, r0, r6
   25bf4:	cmp	r0, #3
   25bf8:	beq	25c2c <__assert_fail@plt+0x13d64>
   25bfc:	cmp	r0, #6
   25c00:	bne	25c3c <__assert_fail@plt+0x13d74>
   25c04:	ldr	r5, [r7, #20]
   25c08:	ldr	r0, [r5]
   25c0c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25c10:	ldr	r0, [r5, #4]
   25c14:	bl	176c0 <__assert_fail@plt+0x57f8>
   25c18:	ldr	r0, [r5, #8]
   25c1c:	bl	176c0 <__assert_fail@plt+0x57f8>
   25c20:	ldr	r0, [r5, #12]
   25c24:	bl	176c0 <__assert_fail@plt+0x57f8>
   25c28:	b	25c30 <__assert_fail@plt+0x13d68>
   25c2c:	ldr	r5, [r7, #20]
   25c30:	mov	r0, r5
   25c34:	bl	176c0 <__assert_fail@plt+0x57f8>
   25c38:	mov	r1, r9
   25c3c:	ldr	r0, [r7]
   25c40:	cmp	r0, #0
   25c44:	beq	25c68 <__assert_fail@plt+0x13da0>
   25c48:	ldr	r5, [r0, #8]
   25c4c:	cmp	r5, r7
   25c50:	mov	r7, r0
   25c54:	beq	25bec <__assert_fail@plt+0x13d24>
   25c58:	cmp	r5, #0
   25c5c:	mov	r7, r0
   25c60:	beq	25bec <__assert_fail@plt+0x13d24>
   25c64:	b	25bd0 <__assert_fail@plt+0x13d08>
   25c68:	mov	r5, r4
   25c6c:	ldr	r4, [r4, #4]
   25c70:	cmp	r4, #0
   25c74:	bne	25c68 <__assert_fail@plt+0x13da0>
   25c78:	ldr	r4, [r5, #8]
   25c7c:	cmp	r4, #0
   25c80:	bne	25c68 <__assert_fail@plt+0x13da0>
   25c84:	ldr	r0, [r5, #24]
   25c88:	and	r0, r0, r6
   25c8c:	cmp	r0, #3
   25c90:	beq	25cc4 <__assert_fail@plt+0x13dfc>
   25c94:	cmp	r0, #6
   25c98:	bne	25cd4 <__assert_fail@plt+0x13e0c>
   25c9c:	ldr	r4, [r5, #20]
   25ca0:	ldr	r0, [r4]
   25ca4:	bl	176c0 <__assert_fail@plt+0x57f8>
   25ca8:	ldr	r0, [r4, #4]
   25cac:	bl	176c0 <__assert_fail@plt+0x57f8>
   25cb0:	ldr	r0, [r4, #8]
   25cb4:	bl	176c0 <__assert_fail@plt+0x57f8>
   25cb8:	ldr	r0, [r4, #12]
   25cbc:	bl	176c0 <__assert_fail@plt+0x57f8>
   25cc0:	b	25cc8 <__assert_fail@plt+0x13e00>
   25cc4:	ldr	r4, [r5, #20]
   25cc8:	mov	r0, r4
   25ccc:	bl	176c0 <__assert_fail@plt+0x57f8>
   25cd0:	mov	r1, r9
   25cd4:	ldr	r0, [r5]
   25cd8:	cmp	r0, #0
   25cdc:	beq	25d00 <__assert_fail@plt+0x13e38>
   25ce0:	ldr	r4, [r0, #8]
   25ce4:	cmp	r4, r5
   25ce8:	mov	r5, r0
   25cec:	beq	25c84 <__assert_fail@plt+0x13dbc>
   25cf0:	cmp	r4, #0
   25cf4:	mov	r5, r0
   25cf8:	beq	25c84 <__assert_fail@plt+0x13dbc>
   25cfc:	b	25c68 <__assert_fail@plt+0x13da0>
   25d00:	mov	r0, #12
   25d04:	str	r0, [r1]
   25d08:	mov	r4, #0
   25d0c:	mov	r0, r4
   25d10:	sub	sp, fp, #28
   25d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d18:	nop	{0}
   25d1c:	nop	{0}
   25d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d24:	add	fp, sp, #28
   25d28:	sub	sp, sp, #156	; 0x9c
   25d2c:	mov	r5, r0
   25d30:	mov	lr, r2
   25d34:	ldr	r0, [r2, #4]
   25d38:	ldr	r2, [fp, #12]
   25d3c:	mov	r7, r1
   25d40:	mvn	r1, #0
   25d44:	mov	r9, #0
   25d48:	mov	ip, r3
   25d4c:	ldr	sl, [r7]
   25d50:	str	r2, [sp, #20]
   25d54:	uxtab	r1, r1, r0
   25d58:	ldr	r6, [fp, #8]
   25d5c:	add	r2, pc, #12
   25d60:	str	r5, [sp, #28]
   25d64:	str	r3, [sp, #48]	; 0x30
   25d68:	str	lr, [sp, #44]	; 0x2c
   25d6c:	ldr	pc, [r2, r1, lsl #2]
   25d70:	andeq	r6, r2, r8, asr #32
   25d74:	andeq	r7, r2, r8, lsr #24
   25d78:	andeq	r8, r2, r0, asr #5
   25d7c:	andeq	r6, r2, r8, lsl #4
   25d80:	andeq	r6, r2, r8, lsl #5
   25d84:	andeq	r8, r2, r0, asr #5
   25d88:	andeq	r8, r2, r0, asr #5
   25d8c:	strdeq	r6, [r2], -r0
   25d90:	andeq	r5, r2, r0, lsr #28
   25d94:	andeq	r7, r2, r8, lsr #24
   25d98:	andeq	r5, r2, r0, lsl lr
   25d9c:	andeq	r5, r2, r4, lsl pc
   25da0:	andeq	r8, r2, r0, asr #5
   25da4:	andeq	r8, r2, r0, asr #5
   25da8:	andeq	r8, r2, r0, asr #5
   25dac:	andeq	r8, r2, r0, asr #5
   25db0:	andeq	r8, r2, r0, asr #5
   25db4:	andeq	r5, r2, r0, lsl lr
   25db8:	andeq	r5, r2, r0, lsl lr
   25dbc:	ldrdeq	r5, [r2], -r4
   25dc0:	andeq	r8, r2, r0, asr #5
   25dc4:	andeq	r8, r2, r0, asr #5
   25dc8:	andeq	r6, r2, ip, ror #6
   25dcc:	andeq	r5, r2, r0, lsr lr
   25dd0:	andeq	r8, r2, r0, asr #5
   25dd4:	andeq	r8, r2, r0, asr #5
   25dd8:	andeq	r8, r2, r0, asr #5
   25ddc:	andeq	r8, r2, r0, asr #5
   25de0:	andeq	r8, r2, r0, asr #5
   25de4:	andeq	r8, r2, r0, asr #5
   25de8:	andeq	r8, r2, r0, asr #5
   25dec:	andeq	r5, r2, ip, lsl #29
   25df0:	andeq	r5, r2, ip, lsl #29
   25df4:	andeq	r5, r2, ip, lsr #29
   25df8:	andeq	r5, r2, ip, lsr #29
   25dfc:	andeq	r6, r2, ip, ror r3
   25e00:	andeq	r0, r0, r0
   25e04:	mvnseq	r0, #0
   25e08:			; <UNDEFINED> instruction: 0x87fffffe
   25e0c:			; <UNDEFINED> instruction: 0x07fffffe
   25e10:	tst	ip, #32
   25e14:	bne	26374 <__assert_fail@plt+0x144ac>
   25e18:	tst	ip, #16
   25e1c:	bne	2638c <__assert_fail@plt+0x144c4>
   25e20:	tst	ip, #131072	; 0x20000
   25e24:	uxtbeq	r1, r0
   25e28:	cmpeq	r1, #9
   25e2c:	beq	263cc <__assert_fail@plt+0x14504>
   25e30:	mov	r1, #1
   25e34:	bfi	r0, r1, #0, #8
   25e38:	str	r0, [lr, #4]
   25e3c:	ldr	r1, [sl, #64]	; 0x40
   25e40:	cmp	r1, #31
   25e44:	beq	27dd4 <__assert_fail@plt+0x15f0c>
   25e48:	ldr	r0, [sl, #56]	; 0x38
   25e4c:	add	r7, r0, r1, lsl #5
   25e50:	add	r2, r1, #1
   25e54:	mov	r0, #0
   25e58:	mvn	r3, #0
   25e5c:	str	r2, [sl, #64]	; 0x40
   25e60:	str	r0, [r7, #4]!
   25e64:	str	r0, [r7, #8]
   25e68:	str	r0, [r7, #4]
   25e6c:	ldm	lr, {r1, r2}
   25e70:	str	r3, [r7, #28]
   25e74:	str	r0, [r7, #16]
   25e78:	str	r0, [r7, #12]
   25e7c:	bic	r0, r2, #786432	; 0xc0000
   25e80:	str	r1, [r7, #20]
   25e84:	str	r0, [r7, #24]
   25e88:	b	26db0 <__assert_fail@plt+0x14ee8>
   25e8c:	mvn	r2, #32
   25e90:	ldr	r1, [r5, #64]	; 0x40
   25e94:	movw	r3, #29521	; 0x7351
   25e98:	uxtab	r0, r2, r0
   25e9c:	movw	r2, #32382	; 0x7e7e
   25ea0:	movt	r3, #3
   25ea4:	movt	r2, #3
   25ea8:	b	25ec8 <__assert_fail@plt+0x14000>
   25eac:	mvn	r2, #34	; 0x22
   25eb0:	ldr	r1, [r5, #64]	; 0x40
   25eb4:	movw	r3, #27716	; 0x6c44
   25eb8:	uxtab	r0, r2, r0
   25ebc:	movw	r2, #32388	; 0x7e84
   25ec0:	movt	r3, #3
   25ec4:	movt	r2, #3
   25ec8:	clz	r0, r0
   25ecc:	lsr	r0, r0, #5
   25ed0:	str	r0, [sp]
   25ed4:	ldr	r4, [sp, #20]
   25ed8:	str	r4, [sp, #4]
   25edc:	mov	r0, sl
   25ee0:	bl	282c0 <__assert_fail@plt+0x163f8>
   25ee4:	mov	r7, r0
   25ee8:	cmp	r0, #0
   25eec:	bne	25f08 <__assert_fail@plt+0x14040>
   25ef0:	ldr	r0, [r4]
   25ef4:	cmp	r0, #0
   25ef8:	ldr	ip, [sp, #48]	; 0x30
   25efc:	ldr	lr, [sp, #44]	; 0x2c
   25f00:	beq	26db0 <__assert_fail@plt+0x14ee8>
   25f04:	b	27c28 <__assert_fail@plt+0x15d60>
   25f08:	ldr	ip, [sp, #48]	; 0x30
   25f0c:	ldr	lr, [sp, #44]	; 0x2c
   25f10:	b	26db0 <__assert_fail@plt+0x14ee8>
   25f14:	ldr	r0, [lr]
   25f18:	movw	r1, #783	; 0x30f
   25f1c:	tst	r0, r1
   25f20:	beq	25f68 <__assert_fail@plt+0x140a0>
   25f24:	ldrb	r0, [sl, #88]	; 0x58
   25f28:	tst	r0, #16
   25f2c:	bne	25f64 <__assert_fail@plt+0x1409c>
   25f30:	orr	r1, r0, #16
   25f34:	tst	r0, #8
   25f38:	strb	r1, [sl, #88]	; 0x58
   25f3c:	bne	280d8 <__assert_fail@plt+0x16210>
   25f40:	sub	r1, pc, #328	; 0x148
   25f44:	tst	r0, #4
   25f48:	vld1.64	{d16-d17}, [r1 :128]
   25f4c:	add	r1, sl, #96	; 0x60
   25f50:	vst1.32	{d16-d17}, [r1]
   25f54:	beq	280e4 <__assert_fail@plt+0x1621c>
   25f58:	vmov.i32	q8, #0	; 0x00000000
   25f5c:	add	r0, sl, #112	; 0x70
   25f60:	vst1.32	{d16-d17}, [r0]
   25f64:	ldr	r0, [lr]
   25f68:	cmp	r0, #512	; 0x200
   25f6c:	beq	26bb0 <__assert_fail@plt+0x14ce8>
   25f70:	cmp	r0, #256	; 0x100
   25f74:	bne	26cbc <__assert_fail@plt+0x14df4>
   25f78:	mov	r0, #6
   25f7c:	str	r0, [lr]
   25f80:	ldr	r1, [sl, #64]	; 0x40
   25f84:	cmp	r1, #31
   25f88:	beq	28038 <__assert_fail@plt+0x16170>
   25f8c:	ldr	r0, [sl, #56]	; 0x38
   25f90:	add	r4, r0, r1, lsl #5
   25f94:	add	r2, r1, #1
   25f98:	mov	r0, #0
   25f9c:	mvn	r3, #0
   25fa0:	str	r2, [sl, #64]	; 0x40
   25fa4:	str	r0, [r4, #4]!
   25fa8:	str	r0, [r4, #8]
   25fac:	str	r0, [r4, #4]
   25fb0:	ldm	lr, {r1, r2}
   25fb4:	str	r3, [r4, #28]
   25fb8:	str	r0, [r4, #16]
   25fbc:	str	r0, [r4, #12]
   25fc0:	bic	r0, r2, #786432	; 0xc0000
   25fc4:	str	r1, [r4, #20]
   25fc8:	str	r0, [r4, #24]
   25fcc:	mov	r0, #9
   25fd0:	b	26c08 <__assert_fail@plt+0x14d40>
   25fd4:	mov	r9, #0
   25fd8:	mov	r0, #32
   25fdc:	mov	r1, #1
   25fe0:	str	r9, [fp, #-32]	; 0xffffffe0
   25fe4:	bl	347bc <__assert_fail@plt+0x228f4>
   25fe8:	mov	r8, r0
   25fec:	mov	r0, #40	; 0x28
   25ff0:	mov	r1, #1
   25ff4:	bl	347bc <__assert_fail@plt+0x228f4>
   25ff8:	mov	r7, r0
   25ffc:	cmp	r8, #0
   26000:	cmpne	r7, #0
   26004:	beq	27e34 <__assert_fail@plt+0x15f6c>
   26008:	ldr	r6, [sp, #44]	; 0x2c
   2600c:	ldr	r4, [sp, #48]	; 0x30
   26010:	mov	r1, r5
   26014:	mov	r0, r6
   26018:	mov	r2, r4
   2601c:	bl	2867c <__assert_fail@plt+0x167b4>
   26020:	mov	r3, r0
   26024:	ldr	r0, [r6, #4]
   26028:	str	r7, [sp, #60]	; 0x3c
   2602c:	uxtb	r1, r0
   26030:	cmp	r1, #25
   26034:	beq	263d4 <__assert_fail@plt+0x1450c>
   26038:	cmp	r1, #2
   2603c:	beq	27e20 <__assert_fail@plt+0x15f58>
   26040:	mov	r1, #0
   26044:	b	2642c <__assert_fail@plt+0x14564>
   26048:	ldr	r1, [sl, #64]	; 0x40
   2604c:	cmp	r1, #31
   26050:	beq	27e48 <__assert_fail@plt+0x15f80>
   26054:	ldr	r0, [sl, #56]	; 0x38
   26058:	add	r4, r0, r1, lsl #5
   2605c:	add	r2, r1, #1
   26060:	mov	r0, #0
   26064:	mvn	r3, #0
   26068:	str	r2, [sl, #64]	; 0x40
   2606c:	str	r0, [r4, #4]!
   26070:	str	r0, [r4, #8]
   26074:	str	r0, [r4, #4]
   26078:	ldm	lr, {r1, r2}
   2607c:	str	r3, [r4, #28]
   26080:	str	r0, [r4, #16]
   26084:	str	r0, [r4, #12]
   26088:	bic	r0, r2, #786432	; 0xc0000
   2608c:	str	r1, [r4, #20]
   26090:	str	r0, [r4, #24]
   26094:	ldr	r0, [sl, #92]	; 0x5c
   26098:	cmp	r0, #2
   2609c:	blt	26384 <__assert_fail@plt+0x144bc>
   260a0:	ldr	r0, [r5, #40]	; 0x28
   260a4:	ldr	r1, [r5, #56]	; 0x38
   260a8:	cmp	r1, r0
   260ac:	ble	26384 <__assert_fail@plt+0x144bc>
   260b0:	mov	r8, #0
   260b4:	mvn	r9, #0
   260b8:	ldr	r1, [r5, #28]
   260bc:	cmp	r0, r1
   260c0:	beq	26384 <__assert_fail@plt+0x144bc>
   260c4:	ldr	r1, [r5, #8]
   260c8:	ldr	r0, [r1, r0, lsl #2]
   260cc:	cmn	r0, #1
   260d0:	bne	26384 <__assert_fail@plt+0x144bc>
   260d4:	mov	r0, lr
   260d8:	mov	r1, r5
   260dc:	mov	r2, ip
   260e0:	bl	25190 <__assert_fail@plt+0x132c8>
   260e4:	ldr	r1, [r5, #40]	; 0x28
   260e8:	add	r0, r1, r0
   260ec:	str	r0, [r5, #40]	; 0x28
   260f0:	ldr	r1, [sl, #64]	; 0x40
   260f4:	cmp	r1, #31
   260f8:	beq	261a0 <__assert_fail@plt+0x142d8>
   260fc:	ldr	r0, [sl, #56]	; 0x38
   26100:	add	r6, r0, r1, lsl #5
   26104:	ldr	lr, [sp, #44]	; 0x2c
   26108:	add	r2, r1, #1
   2610c:	ldr	ip, [sp, #48]	; 0x30
   26110:	str	r2, [sl, #64]	; 0x40
   26114:	str	r8, [r6, #4]!
   26118:	str	r8, [r6, #8]
   2611c:	str	r8, [r6, #4]
   26120:	ldm	lr, {r0, r1}
   26124:	str	r9, [r6, #28]
   26128:	str	r8, [r6, #16]
   2612c:	str	r8, [r6, #12]
   26130:	str	r0, [r6, #20]
   26134:	bic	r0, r1, #786432	; 0xc0000
   26138:	str	r0, [r6, #24]
   2613c:	ldr	r1, [sl, #64]	; 0x40
   26140:	cmp	r1, #31
   26144:	beq	261c8 <__assert_fail@plt+0x14300>
   26148:	ldr	r0, [sl, #56]	; 0x38
   2614c:	add	r7, r0, r1, lsl #5
   26150:	add	r2, r1, #1
   26154:	mov	r0, #16
   26158:	cmp	r6, #0
   2615c:	str	r2, [sl, #64]	; 0x40
   26160:	str	r8, [r7, #4]!
   26164:	stmib	r7, {r4, r6, r8}
   26168:	str	r8, [r7, #16]
   2616c:	str	r8, [r7, #20]
   26170:	str	r0, [r7, #24]
   26174:	str	r9, [r7, #28]
   26178:	str	r7, [r4]
   2617c:	beq	280d0 <__assert_fail@plt+0x16208>
   26180:	ldr	r5, [sp, #28]
   26184:	str	r7, [r6]
   26188:	mov	r4, r7
   2618c:	ldr	r0, [r5, #40]	; 0x28
   26190:	ldr	r1, [r5, #56]	; 0x38
   26194:	cmp	r1, r0
   26198:	bgt	260b8 <__assert_fail@plt+0x141f0>
   2619c:	b	26db0 <__assert_fail@plt+0x14ee8>
   261a0:	mov	r0, #996	; 0x3e4
   261a4:	bl	34810 <__assert_fail@plt+0x22948>
   261a8:	cmp	r0, #0
   261ac:	beq	261f8 <__assert_fail@plt+0x14330>
   261b0:	ldr	r1, [sl, #56]	; 0x38
   261b4:	str	r1, [r0]
   261b8:	mov	r1, #0
   261bc:	str	r1, [sl, #64]	; 0x40
   261c0:	str	r0, [sl, #56]	; 0x38
   261c4:	b	26100 <__assert_fail@plt+0x14238>
   261c8:	mov	r0, #996	; 0x3e4
   261cc:	bl	34810 <__assert_fail@plt+0x22948>
   261d0:	ldr	lr, [sp, #44]	; 0x2c
   261d4:	ldr	ip, [sp, #48]	; 0x30
   261d8:	cmp	r0, #0
   261dc:	beq	280d0 <__assert_fail@plt+0x16208>
   261e0:	ldr	r1, [sl, #56]	; 0x38
   261e4:	str	r1, [r0]
   261e8:	mov	r1, #0
   261ec:	str	r1, [sl, #64]	; 0x40
   261f0:	str	r0, [sl, #56]	; 0x38
   261f4:	b	2614c <__assert_fail@plt+0x14284>
   261f8:	ldr	ip, [sp, #48]	; 0x30
   261fc:	ldr	lr, [sp, #44]	; 0x2c
   26200:	mov	r6, #0
   26204:	b	2613c <__assert_fail@plt+0x14274>
   26208:	ldr	r0, [lr]
   2620c:	ldr	r2, [sl, #84]	; 0x54
   26210:	mov	r1, #1
   26214:	tst	r2, r1, lsl r0
   26218:	beq	27e7c <__assert_fail@plt+0x15fb4>
   2621c:	lsl	r0, r1, r0
   26220:	ldr	r1, [sl, #64]	; 0x40
   26224:	ldr	r2, [sl, #80]	; 0x50
   26228:	orr	r0, r2, r0
   2622c:	cmp	r1, #31
   26230:	str	r0, [sl, #80]	; 0x50
   26234:	beq	27eb8 <__assert_fail@plt+0x15ff0>
   26238:	ldr	r0, [sl, #56]	; 0x38
   2623c:	add	r7, r0, r1, lsl #5
   26240:	add	r2, r1, #1
   26244:	mov	r0, #0
   26248:	mvn	r3, #0
   2624c:	str	r2, [sl, #64]	; 0x40
   26250:	str	r0, [r7, #4]!
   26254:	str	r0, [r7, #8]
   26258:	str	r0, [r7, #4]
   2625c:	ldm	lr, {r1, r2}
   26260:	str	r3, [r7, #28]
   26264:	str	r0, [r7, #16]
   26268:	str	r0, [r7, #12]
   2626c:	bic	r0, r2, #786432	; 0xc0000
   26270:	str	r1, [r7, #20]
   26274:	str	r0, [r7, #24]
   26278:	ldr	r0, [sl, #76]	; 0x4c
   2627c:	add	r0, r0, #1
   26280:	str	r0, [sl, #76]	; 0x4c
   26284:	b	262e0 <__assert_fail@plt+0x14418>
   26288:	ldr	r1, [sl, #64]	; 0x40
   2628c:	cmp	r1, #31
   26290:	beq	27e84 <__assert_fail@plt+0x15fbc>
   26294:	ldr	r0, [sl, #56]	; 0x38
   26298:	add	r7, r0, r1, lsl #5
   2629c:	add	r2, r1, #1
   262a0:	mov	r0, #0
   262a4:	mvn	r3, #0
   262a8:	str	r2, [sl, #64]	; 0x40
   262ac:	str	r0, [r7, #4]!
   262b0:	str	r0, [r7, #8]
   262b4:	str	r0, [r7, #4]
   262b8:	ldm	lr, {r1, r2}
   262bc:	str	r3, [r7, #28]
   262c0:	str	r0, [r7, #16]
   262c4:	str	r0, [r7, #12]
   262c8:	bic	r0, r2, #786432	; 0xc0000
   262cc:	str	r1, [r7, #20]
   262d0:	str	r0, [r7, #24]
   262d4:	ldr	r0, [sl, #92]	; 0x5c
   262d8:	cmp	r0, #2
   262dc:	blt	26db0 <__assert_fail@plt+0x14ee8>
   262e0:	ldrb	r0, [sl, #88]	; 0x58
   262e4:	orr	r0, r0, #2
   262e8:	strb	r0, [sl, #88]	; 0x58
   262ec:	b	26db0 <__assert_fail@plt+0x14ee8>
   262f0:	ldr	r4, [r7, #24]
   262f4:	orr	r2, ip, #8388608	; 0x800000
   262f8:	mov	r1, r5
   262fc:	add	r0, r4, #1
   26300:	str	r0, [r7, #24]
   26304:	mov	r0, lr
   26308:	bl	25190 <__assert_fail@plt+0x132c8>
   2630c:	ldr	r1, [r5, #40]	; 0x28
   26310:	ldr	lr, [sp, #44]	; 0x2c
   26314:	mov	r9, #0
   26318:	add	r0, r1, r0
   2631c:	str	r0, [r5, #40]	; 0x28
   26320:	ldrb	r0, [lr, #4]
   26324:	cmp	r0, #9
   26328:	beq	26d40 <__assert_fail@plt+0x14e78>
   2632c:	add	r0, r6, #1
   26330:	mov	r1, r7
   26334:	mov	r2, lr
   26338:	mov	r7, lr
   2633c:	str	r0, [sp]
   26340:	mov	r0, r5
   26344:	ldr	r6, [sp, #20]
   26348:	str	r6, [sp, #4]
   2634c:	ldr	r3, [sp, #48]	; 0x30
   26350:	bl	24f24 <__assert_fail@plt+0x1305c>
   26354:	mov	r9, r0
   26358:	ldr	r0, [r6]
   2635c:	cmp	r0, #0
   26360:	beq	26d30 <__assert_fail@plt+0x14e68>
   26364:	mov	r9, #0
   26368:	b	27c28 <__assert_fail@plt+0x15d60>
   2636c:	tst	ip, #16777216	; 0x1000000
   26370:	beq	25e10 <__assert_fail@plt+0x13f48>
   26374:	mov	r0, #13
   26378:	b	26cb4 <__assert_fail@plt+0x14dec>
   2637c:	mov	r0, #5
   26380:	b	26cb4 <__assert_fail@plt+0x14dec>
   26384:	mov	r7, r4
   26388:	b	26db0 <__assert_fail@plt+0x14ee8>
   2638c:	mov	r0, lr
   26390:	mov	r1, r5
   26394:	mov	r2, ip
   26398:	mov	r4, ip
   2639c:	mov	r6, lr
   263a0:	bl	25190 <__assert_fail@plt+0x132c8>
   263a4:	ldr	r1, [r5, #40]	; 0x28
   263a8:	mov	r2, r6
   263ac:	mov	r3, r4
   263b0:	add	r0, r1, r0
   263b4:	mov	r1, r7
   263b8:	str	r0, [r5, #40]	; 0x28
   263bc:	mov	r0, r5
   263c0:	sub	sp, fp, #28
   263c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263c8:	b	25d20 <__assert_fail@plt+0x13e58>
   263cc:	mov	r0, #16
   263d0:	b	26cb4 <__assert_fail@plt+0x14dec>
   263d4:	ldrb	r0, [r7, #16]
   263d8:	tst	r4, #256	; 0x100
   263dc:	orr	r0, r0, #1
   263e0:	strb	r0, [r7, #16]
   263e4:	beq	263f4 <__assert_fail@plt+0x1452c>
   263e8:	ldr	r0, [r8]
   263ec:	orr	r0, r0, #1024	; 0x400
   263f0:	str	r0, [r8]
   263f4:	ldr	r0, [r5, #40]	; 0x28
   263f8:	mov	r1, r5
   263fc:	mov	r2, r4
   26400:	add	r0, r0, r3
   26404:	str	r0, [r5, #40]	; 0x28
   26408:	mov	r0, r6
   2640c:	bl	2867c <__assert_fail@plt+0x167b4>
   26410:	ldr	r6, [sp, #44]	; 0x2c
   26414:	mov	r3, r0
   26418:	ldr	r0, [r6, #4]
   2641c:	uxtb	r1, r0
   26420:	cmp	r1, #2
   26424:	beq	27e20 <__assert_fail@plt+0x15f58>
   26428:	mov	r1, #1
   2642c:	str	r1, [sp, #56]	; 0x38
   26430:	uxtb	r1, r0
   26434:	mov	r2, r6
   26438:	ldr	r7, [sp, #48]	; 0x30
   2643c:	cmp	r1, #21
   26440:	moveq	r1, #1
   26444:	bfieq	r0, r1, #0, #8
   26448:	mov	r1, r5
   2644c:	streq	r0, [r6, #4]
   26450:	sub	r0, fp, #80	; 0x50
   26454:	str	r0, [fp, #-36]	; 0xffffffdc
   26458:	mov	r0, #3
   2645c:	str	r0, [fp, #-40]	; 0xffffffd8
   26460:	mov	r0, #1
   26464:	str	r7, [sp]
   26468:	str	r0, [sp, #4]
   2646c:	sub	r0, fp, #40	; 0x28
   26470:	bl	287f4 <__assert_fail@plt+0x1692c>
   26474:	cmp	r0, #0
   26478:	bne	27e08 <__assert_fail@plt+0x15f40>
   2647c:	and	r0, r7, #65536	; 0x10000
   26480:	mov	r2, r7
   26484:	str	r0, [sp, #40]	; 0x28
   26488:	mov	r0, #0
   2648c:	str	r0, [sp, #36]	; 0x24
   26490:	mov	r0, #0
   26494:	str	r0, [sp, #32]
   26498:	ldr	r4, [sp, #44]	; 0x2c
   2649c:	ldr	r7, [sp, #60]	; 0x3c
   264a0:	mov	r0, r4
   264a4:	mov	r1, r5
   264a8:	bl	2867c <__assert_fail@plt+0x167b4>
   264ac:	ldr	r6, [fp, #-40]	; 0xffffffd8
   264b0:	mov	r9, r0
   264b4:	cmp	r6, #2
   264b8:	beq	26698 <__assert_fail@plt+0x147d0>
   264bc:	cmp	r6, #4
   264c0:	bne	26504 <__assert_fail@plt+0x1463c>
   264c4:	ldr	r5, [sp, #28]
   264c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   264cc:	mov	r2, r7
   264d0:	sub	r3, fp, #32
   264d4:	ldr	r0, [r5, #64]	; 0x40
   264d8:	str	r1, [sp]
   264dc:	ldr	r1, [sp, #48]	; 0x30
   264e0:	str	r1, [sp, #4]
   264e4:	mov	r1, r8
   264e8:	bl	28ac0 <__assert_fail@plt+0x16bf8>
   264ec:	ldr	r1, [sp, #20]
   264f0:	ldr	lr, [sp, #44]	; 0x2c
   264f4:	cmp	r0, #0
   264f8:	str	r0, [r1]
   264fc:	beq	266e0 <__assert_fail@plt+0x14818>
   26500:	b	27d90 <__assert_fail@plt+0x15ec8>
   26504:	ldr	r0, [sp, #44]	; 0x2c
   26508:	ldr	r2, [sp, #48]	; 0x30
   2650c:	mov	r4, r9
   26510:	mov	r9, #7
   26514:	str	sl, [sp, #52]	; 0x34
   26518:	ldrb	r0, [r0, #4]
   2651c:	cmp	r0, #22
   26520:	beq	26530 <__assert_fail@plt+0x14668>
   26524:	cmp	r0, #2
   26528:	bne	2664c <__assert_fail@plt+0x14784>
   2652c:	b	27d7c <__assert_fail@plt+0x15eb4>
   26530:	ldr	r7, [sp, #28]
   26534:	mov	r5, r4
   26538:	ldr	r0, [r7, #40]	; 0x28
   2653c:	mov	r1, r7
   26540:	add	r0, r0, r4
   26544:	str	r0, [r7, #40]	; 0x28
   26548:	add	r0, sp, #64	; 0x40
   2654c:	bl	2867c <__assert_fail@plt+0x167b4>
   26550:	mov	r3, r0
   26554:	ldrb	r0, [sp, #68]	; 0x44
   26558:	cmp	r0, #21
   2655c:	beq	26634 <__assert_fail@plt+0x1476c>
   26560:	ldr	r4, [sp, #48]	; 0x30
   26564:	cmp	r0, #2
   26568:	beq	27d7c <__assert_fail@plt+0x15eb4>
   2656c:	mov	r0, #3
   26570:	str	r8, [sp, #24]
   26574:	add	r2, sp, #64	; 0x40
   26578:	str	r0, [fp, #-48]	; 0xffffffd0
   2657c:	add	r0, sp, #72	; 0x48
   26580:	str	r0, [fp, #-44]	; 0xffffffd4
   26584:	mov	r0, #1
   26588:	str	r4, [sp]
   2658c:	str	r0, [sp, #4]
   26590:	sub	r0, fp, #48	; 0x30
   26594:	ldr	r7, [sp, #28]
   26598:	mov	r1, r7
   2659c:	bl	287f4 <__assert_fail@plt+0x1692c>
   265a0:	cmp	r0, #0
   265a4:	bne	2822c <__assert_fail@plt+0x16364>
   265a8:	ldr	r0, [sp, #44]	; 0x2c
   265ac:	mov	r1, r7
   265b0:	mov	r2, r4
   265b4:	bl	2867c <__assert_fail@plt+0x167b4>
   265b8:	ldr	r8, [fp, #-48]	; 0xffffffd0
   265bc:	mov	r9, #11
   265c0:	str	r0, [sp, #16]
   265c4:	cmp	r8, #2
   265c8:	beq	27d78 <__assert_fail@plt+0x15eb0>
   265cc:	cmp	r8, #4
   265d0:	beq	27d78 <__assert_fail@plt+0x15eb0>
   265d4:	cmp	r6, #3
   265d8:	bne	265ec <__assert_fail@plt+0x14724>
   265dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   265e0:	bl	11cac <strlen@plt>
   265e4:	cmp	r0, #1
   265e8:	bhi	28238 <__assert_fail@plt+0x16370>
   265ec:	cmp	r8, #3
   265f0:	bne	26604 <__assert_fail@plt+0x1473c>
   265f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   265f8:	bl	11cac <strlen@plt>
   265fc:	cmp	r0, #1
   26600:	bhi	28238 <__assert_fail@plt+0x16370>
   26604:	ldr	lr, [sp, #44]	; 0x2c
   26608:	cmp	r6, #3
   2660c:	beq	26784 <__assert_fail@plt+0x148bc>
   26610:	cmp	r6, #0
   26614:	mov	r7, #0
   26618:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   2661c:	cmp	r8, #3
   26620:	beq	26794 <__assert_fail@plt+0x148cc>
   26624:	cmp	r8, #0
   26628:	mov	sl, #0
   2662c:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   26630:	b	2679c <__assert_fail@plt+0x148d4>
   26634:	ldr	r0, [r7, #40]	; 0x28
   26638:	mov	r1, #1
   2663c:	sub	r0, r0, r5
   26640:	str	r0, [r7, #40]	; 0x28
   26644:	ldr	r0, [sp, #44]	; 0x2c
   26648:	strb	r1, [r0, #4]
   2664c:	add	r0, pc, #12
   26650:	ldr	sl, [sp, #52]	; 0x34
   26654:	ldr	r7, [sp, #60]	; 0x3c
   26658:	mov	r9, r4
   2665c:	ldr	pc, [r0, r6, lsl #2]
   26660:	andeq	r6, r2, r0, ror r6
   26664:	andeq	r6, r2, ip, lsr r7
   26668:	muleq	r2, r8, r6
   2666c:	andeq	r6, r2, ip, ror #14
   26670:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   26674:	mov	r3, #1
   26678:	ubfx	r1, r0, #5, #3
   2667c:	and	r0, r0, #31
   26680:	ldr	r5, [sp, #28]
   26684:	ldr	lr, [sp, #44]	; 0x2c
   26688:	ldr	r2, [r8, r1, lsl #2]
   2668c:	orr	r0, r2, r3, lsl r0
   26690:	str	r0, [r8, r1, lsl #2]
   26694:	b	266e0 <__assert_fail@plt+0x14818>
   26698:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2669c:	mov	r0, r7
   266a0:	bl	11cac <strlen@plt>
   266a4:	cmp	r0, #1
   266a8:	bne	27f7c <__assert_fail@plt+0x160b4>
   266ac:	ldrb	r0, [r7]
   266b0:	mov	r3, #1
   266b4:	ubfx	r1, r0, #5, #3
   266b8:	and	r0, r0, #31
   266bc:	ldr	r2, [r8, r1, lsl #2]
   266c0:	orr	r0, r2, r3, lsl r0
   266c4:	str	r0, [r8, r1, lsl #2]
   266c8:	mov	r1, #0
   266cc:	ldr	r0, [sp, #20]
   266d0:	ldr	r5, [sp, #28]
   266d4:	ldr	lr, [sp, #44]	; 0x2c
   266d8:	ldr	r7, [sp, #60]	; 0x3c
   266dc:	str	r1, [r0]
   266e0:	ldrb	r0, [lr, #4]
   266e4:	cmp	r0, #21
   266e8:	beq	26968 <__assert_fail@plt+0x14aa0>
   266ec:	cmp	r0, #2
   266f0:	ldr	r0, [sp, #48]	; 0x30
   266f4:	beq	27e14 <__assert_fail@plt+0x15f4c>
   266f8:	sub	r1, fp, #80	; 0x50
   266fc:	mov	r2, lr
   26700:	mov	r3, r9
   26704:	mov	r4, lr
   26708:	str	r1, [fp, #-36]	; 0xffffffdc
   2670c:	mov	r1, #3
   26710:	str	r1, [fp, #-40]	; 0xffffffd8
   26714:	str	r0, [sp]
   26718:	mov	r0, #0
   2671c:	mov	r1, r5
   26720:	str	r0, [sp, #4]
   26724:	sub	r0, fp, #40	; 0x28
   26728:	bl	287f4 <__assert_fail@plt+0x1692c>
   2672c:	ldr	r2, [sp, #48]	; 0x30
   26730:	cmp	r0, #0
   26734:	beq	264a0 <__assert_fail@plt+0x145d8>
   26738:	b	27e08 <__assert_fail@plt+0x15f40>
   2673c:	ldr	r1, [r7, #20]
   26740:	ldr	r0, [sp, #36]	; 0x24
   26744:	cmp	r0, r1
   26748:	beq	268cc <__assert_fail@plt+0x14a04>
   2674c:	ldr	r0, [r7]
   26750:	ldr	r5, [sp, #28]
   26754:	ldr	lr, [sp, #44]	; 0x2c
   26758:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2675c:	add	r2, r1, #1
   26760:	str	r2, [r7, #20]
   26764:	str	r3, [r0, r1, lsl #2]
   26768:	b	266e0 <__assert_fail@plt+0x14818>
   2676c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   26770:	mov	r0, r7
   26774:	bl	11cac <strlen@plt>
   26778:	cmp	r0, #1
   2677c:	beq	266ac <__assert_fail@plt+0x147e4>
   26780:	b	27f80 <__assert_fail@plt+0x160b8>
   26784:	ldr	r0, [fp, #-36]	; 0xffffffdc
   26788:	ldrb	r7, [r0]
   2678c:	cmp	r8, #3
   26790:	bne	26624 <__assert_fail@plt+0x1475c>
   26794:	ldr	r0, [fp, #-44]	; 0xffffffd4
   26798:	ldrb	sl, [r0]
   2679c:	cmp	r6, #3
   267a0:	cmpne	r6, #0
   267a4:	bne	267cc <__assert_fail@plt+0x14904>
   267a8:	ldr	r0, [sp, #52]	; 0x34
   267ac:	ldr	r0, [r0, #92]	; 0x5c
   267b0:	cmp	r0, #2
   267b4:	blt	267d0 <__assert_fail@plt+0x14908>
   267b8:	mov	r0, r7
   267bc:	bl	11d18 <btowc@plt>
   267c0:	ldr	lr, [sp, #44]	; 0x2c
   267c4:	mov	r7, r0
   267c8:	b	267d0 <__assert_fail@plt+0x14908>
   267cc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   267d0:	cmp	r8, #3
   267d4:	cmpne	r8, #0
   267d8:	bne	26800 <__assert_fail@plt+0x14938>
   267dc:	ldr	r0, [sp, #52]	; 0x34
   267e0:	ldr	r0, [r0, #92]	; 0x5c
   267e4:	cmp	r0, #2
   267e8:	blt	26804 <__assert_fail@plt+0x1493c>
   267ec:	mov	r0, sl
   267f0:	bl	11d18 <btowc@plt>
   267f4:	ldr	lr, [sp, #44]	; 0x2c
   267f8:	mov	sl, r0
   267fc:	b	26804 <__assert_fail@plt+0x1493c>
   26800:	ldr	sl, [fp, #-44]	; 0xffffffd4
   26804:	ldr	r8, [sp, #24]
   26808:	cmn	r7, #1
   2680c:	mov	r9, #3
   26810:	cmnne	sl, #1
   26814:	beq	27d7c <__assert_fail@plt+0x15eb4>
   26818:	ldr	r0, [sp, #40]	; 0x28
   2681c:	cmp	r0, #0
   26820:	beq	26830 <__assert_fail@plt+0x14968>
   26824:	cmp	r7, sl
   26828:	mov	r9, #11
   2682c:	bhi	27d7c <__assert_fail@plt+0x15eb4>
   26830:	ldr	r0, [sp, #52]	; 0x34
   26834:	ldr	r0, [r0, #92]	; 0x5c
   26838:	cmp	r0, #2
   2683c:	blt	26874 <__assert_fail@plt+0x149ac>
   26840:	ldr	r4, [sp, #60]	; 0x3c
   26844:	ldr	r1, [sp, #32]
   26848:	ldr	r5, [sp, #28]
   2684c:	ldr	r0, [r4, #32]
   26850:	cmp	r1, r0
   26854:	beq	2690c <__assert_fail@plt+0x14a44>
   26858:	ldmib	r4, {r6, r9}
   2685c:	str	r7, [r6, r0, lsl #2]
   26860:	ldr	r0, [r4, #32]
   26864:	add	r1, r0, #1
   26868:	str	r1, [r4, #32]
   2686c:	str	sl, [r9, r0, lsl #2]
   26870:	b	26878 <__assert_fail@plt+0x149b0>
   26874:	ldr	r5, [sp, #28]
   26878:	ldr	r9, [sp, #16]
   2687c:	mov	r0, #0
   26880:	b	26890 <__assert_fail@plt+0x149c8>
   26884:	add	r0, r0, #1
   26888:	cmp	r0, #256	; 0x100
   2688c:	beq	268b8 <__assert_fail@plt+0x149f0>
   26890:	cmp	r7, r0
   26894:	cmpls	r0, sl
   26898:	bhi	26884 <__assert_fail@plt+0x149bc>
   2689c:	ubfx	r1, r0, #5, #3
   268a0:	and	r3, r0, #31
   268a4:	mov	r4, #1
   268a8:	ldr	r2, [r8, r1, lsl #2]
   268ac:	orr	r2, r2, r4, lsl r3
   268b0:	str	r2, [r8, r1, lsl #2]
   268b4:	b	26884 <__assert_fail@plt+0x149bc>
   268b8:	ldr	r0, [sp, #20]
   268bc:	ldr	sl, [sp, #52]	; 0x34
   268c0:	ldr	r7, [sp, #60]	; 0x3c
   268c4:	mov	r1, #0
   268c8:	b	266dc <__assert_fail@plt+0x14814>
   268cc:	ldr	r1, [sp, #36]	; 0x24
   268d0:	mov	r0, #1
   268d4:	orr	r1, r0, r1, lsl #1
   268d8:	ldr	r0, [r7]
   268dc:	str	r1, [sp, #36]	; 0x24
   268e0:	lsl	r1, r1, #2
   268e4:	bl	34840 <__assert_fail@plt+0x22978>
   268e8:	cmp	r0, #0
   268ec:	beq	2828c <__assert_fail@plt+0x163c4>
   268f0:	ldr	r7, [sp, #60]	; 0x3c
   268f4:	ldr	r5, [sp, #28]
   268f8:	ldr	lr, [sp, #44]	; 0x2c
   268fc:	mov	r9, r4
   26900:	str	r0, [r7]
   26904:	ldr	r1, [r7, #20]
   26908:	b	26758 <__assert_fail@plt+0x14890>
   2690c:	ldr	r1, [sp, #32]
   26910:	mov	r0, #1
   26914:	orr	r1, r0, r1, lsl #1
   26918:	ldr	r0, [r4, #4]
   2691c:	lsl	r9, r1, #2
   26920:	str	r1, [sp, #32]
   26924:	mov	r1, r9
   26928:	bl	34840 <__assert_fail@plt+0x22978>
   2692c:	mov	r6, r0
   26930:	ldr	r0, [r4, #8]
   26934:	mov	r1, r9
   26938:	bl	34840 <__assert_fail@plt+0x22978>
   2693c:	mov	r9, r0
   26940:	cmp	r6, #0
   26944:	cmpne	r9, #0
   26948:	beq	282a4 <__assert_fail@plt+0x163dc>
   2694c:	ldr	r4, [sp, #60]	; 0x3c
   26950:	stmib	r4, {r6, r9}
   26954:	ldr	r0, [r4, #32]
   26958:	ldr	r5, [sp, #28]
   2695c:	ldr	lr, [sp, #44]	; 0x2c
   26960:	ldr	r8, [sp, #24]
   26964:	b	2685c <__assert_fail@plt+0x14994>
   26968:	ldr	r0, [r5, #40]	; 0x28
   2696c:	ldr	ip, [sp, #48]	; 0x30
   26970:	add	r0, r0, r9
   26974:	str	r0, [r5, #40]	; 0x28
   26978:	ldr	r0, [sp, #56]	; 0x38
   2697c:	cmp	r0, #0
   26980:	beq	269a0 <__assert_fail@plt+0x14ad8>
   26984:	vld1.32	{d16-d17}, [r8]
   26988:	mov	r0, r8
   2698c:	vmvn	q8, q8
   26990:	vst1.32	{d16-d17}, [r0]!
   26994:	vld1.32	{d16-d17}, [r0]
   26998:	vmvn	q8, q8
   2699c:	vst1.32	{d16-d17}, [r0]
   269a0:	ldr	r0, [sl, #92]	; 0x5c
   269a4:	cmp	r0, #2
   269a8:	blt	26a2c <__assert_fail@plt+0x14b64>
   269ac:	ldr	r6, [sl, #60]	; 0x3c
   269b0:	ldm	r8, {r1, r2, r3, r7}
   269b4:	ldr	r5, [r6]
   269b8:	and	r1, r1, r5
   269bc:	ldr	r5, [sp, #28]
   269c0:	str	r1, [r8]
   269c4:	ldr	r1, [r6, #4]
   269c8:	and	r1, r2, r1
   269cc:	str	r1, [r8, #4]
   269d0:	ldr	r1, [r6, #8]
   269d4:	and	r1, r3, r1
   269d8:	str	r1, [r8, #8]
   269dc:	ldr	r1, [r6, #12]
   269e0:	and	r1, r7, r1
   269e4:	ldr	r7, [sp, #60]	; 0x3c
   269e8:	str	r1, [r8, #12]
   269ec:	ldr	r1, [r8, #16]
   269f0:	ldr	r2, [r6, #16]
   269f4:	and	r1, r1, r2
   269f8:	str	r1, [r8, #16]
   269fc:	ldr	r1, [r6, #20]
   26a00:	ldr	r2, [r8, #20]
   26a04:	and	r1, r2, r1
   26a08:	str	r1, [r8, #20]
   26a0c:	ldr	r1, [r6, #24]
   26a10:	ldr	r2, [r8, #24]
   26a14:	and	r1, r2, r1
   26a18:	str	r1, [r8, #24]
   26a1c:	ldr	r1, [r6, #28]
   26a20:	ldr	r2, [r8, #28]
   26a24:	and	r1, r2, r1
   26a28:	str	r1, [r8, #28]
   26a2c:	ldr	r1, [r7, #20]
   26a30:	cmp	r1, #0
   26a34:	bne	26a5c <__assert_fail@plt+0x14b94>
   26a38:	ldr	r1, [r7, #24]
   26a3c:	cmp	r1, #0
   26a40:	bne	26a5c <__assert_fail@plt+0x14b94>
   26a44:	ldr	r1, [r7, #28]
   26a48:	cmp	r1, #0
   26a4c:	bne	26a5c <__assert_fail@plt+0x14b94>
   26a50:	ldr	r1, [r7, #32]
   26a54:	cmp	r1, #0
   26a58:	beq	27cd8 <__assert_fail@plt+0x15e10>
   26a5c:	ldrb	r0, [sl, #88]	; 0x58
   26a60:	orr	r0, r0, #2
   26a64:	strb	r0, [sl, #88]	; 0x58
   26a68:	ldr	r1, [sl, #64]	; 0x40
   26a6c:	cmp	r1, #31
   26a70:	beq	27eec <__assert_fail@plt+0x16024>
   26a74:	ldr	r0, [sl, #56]	; 0x38
   26a78:	add	r0, r0, r1, lsl #5
   26a7c:	add	r2, r1, #1
   26a80:	vmov.i32	q8, #0	; 0x00000000
   26a84:	mov	r1, #6
   26a88:	str	r2, [sl, #64]	; 0x40
   26a8c:	mov	r2, #0
   26a90:	add	r4, r0, #4
   26a94:	str	r2, [r0, #20]
   26a98:	str	r7, [r0, #24]
   26a9c:	str	r1, [r0, #28]
   26aa0:	mov	r0, #28
   26aa4:	mov	r1, r4
   26aa8:	vst1.32	{d16-d17}, [r1], r0
   26aac:	mvn	r0, #0
   26ab0:	str	r0, [r1]
   26ab4:	ldr	r0, [r8]
   26ab8:	cmp	r0, #0
   26abc:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26ac0:	ldr	r0, [r8, #4]
   26ac4:	cmp	r0, #0
   26ac8:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26acc:	ldr	r0, [r8, #8]
   26ad0:	cmp	r0, #0
   26ad4:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26ad8:	ldr	r0, [r8, #12]
   26adc:	cmp	r0, #0
   26ae0:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26ae4:	ldr	r0, [r8, #16]
   26ae8:	cmp	r0, #0
   26aec:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26af0:	ldr	r0, [r8, #20]
   26af4:	cmp	r0, #0
   26af8:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26afc:	ldr	r0, [r8, #24]
   26b00:	cmp	r0, #0
   26b04:	bne	26b14 <__assert_fail@plt+0x14c4c>
   26b08:	ldr	r0, [r8, #28]
   26b0c:	cmp	r0, #0
   26b10:	beq	27f88 <__assert_fail@plt+0x160c0>
   26b14:	ldr	r1, [sl, #64]	; 0x40
   26b18:	cmp	r1, #31
   26b1c:	beq	27f1c <__assert_fail@plt+0x16054>
   26b20:	ldr	r0, [sl, #56]	; 0x38
   26b24:	add	r0, r0, r1, lsl #5
   26b28:	add	r2, r1, #1
   26b2c:	vmov.i32	q8, #0	; 0x00000000
   26b30:	mov	r1, #3
   26b34:	str	r2, [sl, #64]	; 0x40
   26b38:	mov	r2, #0
   26b3c:	add	r6, r0, #4
   26b40:	str	r2, [r0, #20]
   26b44:	str	r8, [r0, #24]
   26b48:	str	r1, [r0, #28]
   26b4c:	mov	r0, #28
   26b50:	mov	r1, r6
   26b54:	vst1.32	{d16-d17}, [r1], r0
   26b58:	mvn	r0, #0
   26b5c:	str	r0, [r1]
   26b60:	ldr	r1, [sl, #64]	; 0x40
   26b64:	cmp	r1, #31
   26b68:	beq	27f4c <__assert_fail@plt+0x16084>
   26b6c:	ldr	r0, [sl, #56]	; 0x38
   26b70:	add	r7, r0, r1, lsl #5
   26b74:	add	r2, r1, #1
   26b78:	mov	r0, #0
   26b7c:	mov	r1, #10
   26b80:	str	r2, [sl, #64]	; 0x40
   26b84:	mvn	r2, #0
   26b88:	str	r0, [r7, #4]!
   26b8c:	add	r3, r7, #20
   26b90:	str	r6, [r7, #4]
   26b94:	str	r4, [r7, #8]
   26b98:	str	r0, [r7, #12]
   26b9c:	str	r0, [r7, #16]
   26ba0:	stm	r3, {r0, r1, r2}
   26ba4:	str	r7, [r6]
   26ba8:	str	r7, [r4]
   26bac:	b	26db0 <__assert_fail@plt+0x14ee8>
   26bb0:	mov	r0, #5
   26bb4:	str	r0, [lr]
   26bb8:	ldr	r1, [sl, #64]	; 0x40
   26bbc:	cmp	r1, #31
   26bc0:	beq	2806c <__assert_fail@plt+0x161a4>
   26bc4:	ldr	r0, [sl, #56]	; 0x38
   26bc8:	add	r4, r0, r1, lsl #5
   26bcc:	add	r2, r1, #1
   26bd0:	mov	r0, #0
   26bd4:	mvn	r3, #0
   26bd8:	str	r2, [sl, #64]	; 0x40
   26bdc:	str	r0, [r4, #4]!
   26be0:	str	r0, [r4, #8]
   26be4:	str	r0, [r4, #4]
   26be8:	ldm	lr, {r1, r2}
   26bec:	str	r3, [r4, #28]
   26bf0:	str	r0, [r4, #16]
   26bf4:	str	r0, [r4, #12]
   26bf8:	bic	r0, r2, #786432	; 0xc0000
   26bfc:	str	r1, [r4, #20]
   26c00:	str	r0, [r4, #24]
   26c04:	mov	r0, #10
   26c08:	str	r0, [lr]
   26c0c:	ldr	r1, [sl, #64]	; 0x40
   26c10:	cmp	r1, #31
   26c14:	beq	27fd4 <__assert_fail@plt+0x1610c>
   26c18:	ldr	r0, [sl, #56]	; 0x38
   26c1c:	add	r5, r0, r1, lsl #5
   26c20:	add	r2, r1, #1
   26c24:	mov	r0, #0
   26c28:	mvn	r3, #0
   26c2c:	str	r2, [sl, #64]	; 0x40
   26c30:	str	r0, [r5, #4]!
   26c34:	str	r0, [r5, #8]
   26c38:	str	r0, [r5, #4]
   26c3c:	ldm	lr, {r1, r2}
   26c40:	str	r3, [r5, #28]
   26c44:	str	r0, [r5, #16]
   26c48:	str	r0, [r5, #12]
   26c4c:	bic	r0, r2, #786432	; 0xc0000
   26c50:	str	r1, [r5, #20]
   26c54:	str	r0, [r5, #24]
   26c58:	ldr	r1, [sl, #64]	; 0x40
   26c5c:	cmp	r1, #31
   26c60:	beq	28008 <__assert_fail@plt+0x16140>
   26c64:	ldr	r0, [sl, #56]	; 0x38
   26c68:	add	r6, r0, r1, lsl #5
   26c6c:	add	r2, r1, #1
   26c70:	mov	r0, #0
   26c74:	cmp	r4, #0
   26c78:	mov	r1, #10
   26c7c:	str	r2, [sl, #64]	; 0x40
   26c80:	mvn	r2, #0
   26c84:	str	r0, [r6, #4]!
   26c88:	add	r3, r6, #20
   26c8c:	stmib	r6, {r4, r5}
   26c90:	str	r0, [r6, #12]
   26c94:	str	r0, [r6, #16]
   26c98:	stm	r3, {r0, r1, r2}
   26c9c:	strne	r6, [r4]
   26ca0:	cmp	r5, #0
   26ca4:	strne	r6, [r5]
   26ca8:	cmpne	r4, #0
   26cac:	bne	26d08 <__assert_fail@plt+0x14e40>
   26cb0:	mov	r0, #12
   26cb4:	ldr	r1, [sp, #20]
   26cb8:	b	27c24 <__assert_fail@plt+0x15d5c>
   26cbc:	ldr	r1, [sl, #64]	; 0x40
   26cc0:	cmp	r1, #31
   26cc4:	beq	280a0 <__assert_fail@plt+0x161d8>
   26cc8:	ldr	r0, [sl, #56]	; 0x38
   26ccc:	add	r6, r0, r1, lsl #5
   26cd0:	add	r2, r1, #1
   26cd4:	mov	r0, #0
   26cd8:	mvn	r3, #0
   26cdc:	str	r2, [sl, #64]	; 0x40
   26ce0:	str	r0, [r6, #4]!
   26ce4:	str	r0, [r6, #8]
   26ce8:	str	r0, [r6, #4]
   26cec:	ldm	lr, {r1, r2}
   26cf0:	str	r3, [r6, #28]
   26cf4:	str	r0, [r6, #16]
   26cf8:	str	r0, [r6, #12]
   26cfc:	bic	r0, r2, #786432	; 0xc0000
   26d00:	str	r1, [r6, #20]
   26d04:	str	r0, [r6, #24]
   26d08:	ldr	r4, [sp, #28]
   26d0c:	mov	r0, lr
   26d10:	mov	r2, ip
   26d14:	mov	r1, r4
   26d18:	bl	25190 <__assert_fail@plt+0x132c8>
   26d1c:	ldr	r1, [r4, #40]	; 0x28
   26d20:	mov	r9, r6
   26d24:	add	r0, r1, r0
   26d28:	str	r0, [r4, #40]	; 0x28
   26d2c:	b	27c28 <__assert_fail@plt+0x15d60>
   26d30:	ldrb	r0, [r7, #4]
   26d34:	cmp	r0, #9
   26d38:	bne	28180 <__assert_fail@plt+0x162b8>
   26d3c:	mov	lr, r7
   26d40:	cmp	r4, #8
   26d44:	bhi	26d58 <__assert_fail@plt+0x14e90>
   26d48:	ldr	r0, [sl, #84]	; 0x54
   26d4c:	mov	r1, #1
   26d50:	orr	r0, r0, r1, lsl r4
   26d54:	str	r0, [sl, #84]	; 0x54
   26d58:	ldr	r1, [sl, #64]	; 0x40
   26d5c:	ldr	ip, [sp, #48]	; 0x30
   26d60:	cmp	r1, #31
   26d64:	beq	27fa0 <__assert_fail@plt+0x160d8>
   26d68:	ldr	r0, [sl, #56]	; 0x38
   26d6c:	add	r0, r0, r1, lsl #5
   26d70:	add	r2, r1, #1
   26d74:	mov	r1, #0
   26d78:	cmp	r9, #0
   26d7c:	mvn	r3, #0
   26d80:	str	r2, [sl, #64]	; 0x40
   26d84:	mov	r2, #17
   26d88:	mov	r7, r0
   26d8c:	str	r1, [r7, #4]!
   26d90:	add	r6, r7, #20
   26d94:	str	r9, [r7, #4]
   26d98:	str	r1, [r7, #8]
   26d9c:	str	r1, [r7, #12]
   26da0:	str	r1, [r7, #16]
   26da4:	stm	r6, {r1, r2, r3}
   26da8:	strne	r7, [r9]
   26dac:	str	r4, [r0, #24]
   26db0:	mov	r0, lr
   26db4:	mov	r1, r5
   26db8:	mov	r2, ip
   26dbc:	bl	25190 <__assert_fail@plt+0x132c8>
   26dc0:	ldr	r1, [r5, #40]	; 0x28
   26dc4:	ldr	ip, [sp, #48]	; 0x30
   26dc8:	ldr	lr, [sp, #44]	; 0x2c
   26dcc:	mov	r4, #0
   26dd0:	add	r0, r1, r0
   26dd4:	str	r0, [r5, #40]	; 0x28
   26dd8:	and	r0, ip, #16777216	; 0x1000000
   26ddc:	str	r0, [sp, #32]
   26de0:	and	r0, ip, #2097152	; 0x200000
   26de4:	str	r0, [sp, #16]
   26de8:	add	r0, sl, #56	; 0x38
   26dec:	str	r0, [sp, #60]	; 0x3c
   26df0:	add	r0, sl, #64	; 0x40
   26df4:	str	r0, [sp, #24]
   26df8:	ldrb	r0, [lr, #4]
   26dfc:	mov	r9, r7
   26e00:	cmp	r0, #23
   26e04:	bhi	27c28 <__assert_fail@plt+0x15d60>
   26e08:	movw	r2, #2048	; 0x800
   26e0c:	mov	r1, #1
   26e10:	movt	r2, #140	; 0x8c
   26e14:	tst	r2, r1, lsl r0
   26e18:	beq	27c28 <__assert_fail@plt+0x15d60>
   26e1c:	cmp	r0, #23
   26e20:	str	r9, [sp, #40]	; 0x28
   26e24:	bne	26ed4 <__assert_fail@plt+0x1500c>
   26e28:	ldr	r9, [r5, #40]	; 0x28
   26e2c:	ldm	lr, {r7, sl}
   26e30:	mov	r6, r5
   26e34:	mvn	r2, #0
   26e38:	mov	r8, r2
   26e3c:	mov	r0, lr
   26e40:	mov	r1, r6
   26e44:	mov	r2, ip
   26e48:	mov	r5, r6
   26e4c:	bl	25190 <__assert_fail@plt+0x132c8>
   26e50:	ldr	r1, [r6, #40]	; 0x28
   26e54:	ldr	lr, [sp, #44]	; 0x2c
   26e58:	add	r0, r1, r0
   26e5c:	str	r0, [r6, #40]	; 0x28
   26e60:	ldrb	r0, [lr, #4]
   26e64:	ldrb	r1, [lr]
   26e68:	cmp	r0, #24
   26e6c:	beq	26ef0 <__assert_fail@plt+0x15028>
   26e70:	cmp	r0, #2
   26e74:	beq	27504 <__assert_fail@plt+0x1563c>
   26e78:	cmp	r1, #44	; 0x2c
   26e7c:	beq	26ef0 <__assert_fail@plt+0x15028>
   26e80:	ldr	ip, [sp, #48]	; 0x30
   26e84:	mvn	r2, #1
   26e88:	cmp	r1, #48	; 0x30
   26e8c:	bcc	26e38 <__assert_fail@plt+0x14f70>
   26e90:	cmp	r0, #1
   26e94:	bne	26e38 <__assert_fail@plt+0x14f70>
   26e98:	cmn	r8, #2
   26e9c:	beq	26e38 <__assert_fail@plt+0x14f70>
   26ea0:	cmp	r1, #57	; 0x39
   26ea4:	bhi	26e38 <__assert_fail@plt+0x14f70>
   26ea8:	cmn	r8, #1
   26eac:	beq	26ecc <__assert_fail@plt+0x15004>
   26eb0:	add	r0, r8, r8, lsl #2
   26eb4:	add	r0, r1, r0, lsl #1
   26eb8:	movw	r1, #32816	; 0x8030
   26ebc:	cmp	r0, r1
   26ec0:	movge	r0, r1
   26ec4:	sub	r2, r0, #48	; 0x30
   26ec8:	b	26e38 <__assert_fail@plt+0x14f70>
   26ecc:	sub	r2, r1, #48	; 0x30
   26ed0:	b	26e38 <__assert_fail@plt+0x14f70>
   26ed4:	cmp	r0, #19
   26ed8:	sub	r0, r0, #18
   26edc:	mvn	sl, #0
   26ee0:	clz	r0, r0
   26ee4:	movweq	sl, #1
   26ee8:	lsr	r8, r0, #5
   26eec:	b	27084 <__assert_fail@plt+0x151bc>
   26ef0:	cmn	r8, #1
   26ef4:	bne	26f28 <__assert_fail@plt+0x15060>
   26ef8:	ldr	ip, [sp, #48]	; 0x30
   26efc:	cmp	r1, #44	; 0x2c
   26f00:	moveq	r8, #0
   26f04:	cmpeq	r0, #1
   26f08:	beq	26f74 <__assert_fail@plt+0x150ac>
   26f0c:	ldr	r0, [sp, #20]
   26f10:	mov	r1, #10
   26f14:	str	r1, [r0]
   26f18:	ldr	r9, [sp, #40]	; 0x28
   26f1c:	mov	r7, #0
   26f20:	mov	r5, r6
   26f24:	b	27b38 <__assert_fail@plt+0x15c70>
   26f28:	ldr	ip, [sp, #48]	; 0x30
   26f2c:	cmn	r8, #2
   26f30:	beq	26f48 <__assert_fail@plt+0x15080>
   26f34:	cmp	r0, #24
   26f38:	beq	27030 <__assert_fail@plt+0x15168>
   26f3c:	cmp	r0, #1
   26f40:	cmpeq	r1, #44	; 0x2c
   26f44:	beq	26f74 <__assert_fail@plt+0x150ac>
   26f48:	ldr	r1, [sp, #16]
   26f4c:	cmp	r1, #0
   26f50:	beq	27a94 <__assert_fail@plt+0x15bcc>
   26f54:	mov	r0, #1
   26f58:	str	r9, [r6, #40]	; 0x28
   26f5c:	mov	r5, r6
   26f60:	bfi	sl, r0, #0, #8
   26f64:	stm	lr, {r7, sl}
   26f68:	ldr	r9, [sp, #40]	; 0x28
   26f6c:	mov	r7, r9
   26f70:	b	27b38 <__assert_fail@plt+0x15c70>
   26f74:	mvn	r2, #0
   26f78:	str	r9, [sp, #56]	; 0x38
   26f7c:	mov	r9, r2
   26f80:	mov	r0, lr
   26f84:	mov	r1, r6
   26f88:	mov	r2, ip
   26f8c:	mov	r5, r6
   26f90:	bl	25190 <__assert_fail@plt+0x132c8>
   26f94:	ldr	r1, [r6, #40]	; 0x28
   26f98:	ldr	lr, [sp, #44]	; 0x2c
   26f9c:	add	r0, r1, r0
   26fa0:	str	r0, [r6, #40]	; 0x28
   26fa4:	ldrb	r0, [lr, #4]
   26fa8:	cmp	r0, #24
   26fac:	beq	27018 <__assert_fail@plt+0x15150>
   26fb0:	cmp	r0, #2
   26fb4:	beq	27908 <__assert_fail@plt+0x15a40>
   26fb8:	ldrb	r1, [lr]
   26fbc:	ldr	ip, [sp, #48]	; 0x30
   26fc0:	cmp	r1, #44	; 0x2c
   26fc4:	beq	2701c <__assert_fail@plt+0x15154>
   26fc8:	mvn	r2, #1
   26fcc:	cmp	r1, #48	; 0x30
   26fd0:	bcc	26f7c <__assert_fail@plt+0x150b4>
   26fd4:	cmp	r0, #1
   26fd8:	bne	26f7c <__assert_fail@plt+0x150b4>
   26fdc:	cmn	r9, #2
   26fe0:	beq	26f7c <__assert_fail@plt+0x150b4>
   26fe4:	cmp	r1, #57	; 0x39
   26fe8:	bhi	26f7c <__assert_fail@plt+0x150b4>
   26fec:	cmn	r9, #1
   26ff0:	beq	27010 <__assert_fail@plt+0x15148>
   26ff4:	add	r0, r9, r9, lsl #2
   26ff8:	add	r0, r1, r0, lsl #1
   26ffc:	movw	r1, #32816	; 0x8030
   27000:	cmp	r0, r1
   27004:	movge	r0, r1
   27008:	sub	r2, r0, #48	; 0x30
   2700c:	b	26f7c <__assert_fail@plt+0x150b4>
   27010:	sub	r2, r1, #48	; 0x30
   27014:	b	26f7c <__assert_fail@plt+0x150b4>
   27018:	ldr	ip, [sp, #48]	; 0x30
   2701c:	mov	r2, r9
   27020:	ldr	r9, [sp, #56]	; 0x38
   27024:	cmn	r2, #2
   27028:	bne	2703c <__assert_fail@plt+0x15174>
   2702c:	b	26f48 <__assert_fail@plt+0x15080>
   27030:	mov	r2, r8
   27034:	cmn	r2, #2
   27038:	beq	26f48 <__assert_fail@plt+0x15080>
   2703c:	ldr	r9, [sp, #40]	; 0x28
   27040:	cmp	r8, r2
   27044:	mov	r1, #0
   27048:	mov	r5, r6
   2704c:	movwle	r1, #1
   27050:	cmp	r0, #24
   27054:	bne	278c8 <__assert_fail@plt+0x15a00>
   27058:	add	r0, r2, #1
   2705c:	mov	sl, r2
   27060:	clz	r0, r0
   27064:	lsr	r0, r0, #5
   27068:	orrs	r0, r1, r0
   2706c:	beq	278c8 <__assert_fail@plt+0x15a00>
   27070:	cmn	sl, #1
   27074:	mov	r0, sl
   27078:	moveq	r0, r8
   2707c:	cmp	r0, #32768	; 0x8000
   27080:	bge	27a80 <__assert_fail@plt+0x15bb8>
   27084:	mov	r0, lr
   27088:	mov	r1, r5
   2708c:	mov	r2, ip
   27090:	bl	25190 <__assert_fail@plt+0x132c8>
   27094:	ldr	r1, [r5, #40]	; 0x28
   27098:	mov	r7, #0
   2709c:	cmp	r9, #0
   270a0:	add	r0, r1, r0
   270a4:	str	r0, [r5, #40]	; 0x28
   270a8:	beq	2750c <__assert_fail@plt+0x15644>
   270ac:	ldr	ip, [sp, #48]	; 0x30
   270b0:	orrs	r0, sl, r8
   270b4:	beq	27518 <__assert_fail@plt+0x15650>
   270b8:	mov	r0, #0
   270bc:	cmp	r8, #1
   270c0:	mov	r7, r9
   270c4:	str	r0, [sp, #36]	; 0x24
   270c8:	ldr	lr, [sp, #44]	; 0x2c
   270cc:	ldr	r5, [sp, #24]
   270d0:	bge	275cc <__assert_fail@plt+0x15704>
   270d4:	ldrb	r0, [r7, #24]
   270d8:	cmp	r0, #17
   270dc:	bne	27150 <__assert_fail@plt+0x15288>
   270e0:	ldr	r0, [r7, #20]
   270e4:	mov	r2, r7
   270e8:	mov	r1, r2
   270ec:	ldr	r2, [r2, #4]
   270f0:	cmp	r2, #0
   270f4:	bne	270e8 <__assert_fail@plt+0x15220>
   270f8:	ldr	r2, [r1, #8]
   270fc:	cmp	r2, #0
   27100:	bne	270e8 <__assert_fail@plt+0x15220>
   27104:	ldr	r2, [r1, #24]
   27108:	uxtb	r3, r2
   2710c:	cmp	r3, #17
   27110:	bne	27124 <__assert_fail@plt+0x1525c>
   27114:	ldr	r3, [r1, #20]
   27118:	cmp	r3, r0
   2711c:	orreq	r2, r2, #524288	; 0x80000
   27120:	streq	r2, [r1, #24]
   27124:	ldr	r3, [r1]
   27128:	cmp	r3, #0
   2712c:	beq	27150 <__assert_fail@plt+0x15288>
   27130:	ldr	r2, [r3, #8]
   27134:	cmp	r2, r1
   27138:	mov	r1, r3
   2713c:	beq	27104 <__assert_fail@plt+0x1523c>
   27140:	cmp	r2, #0
   27144:	mov	r1, r3
   27148:	beq	27104 <__assert_fail@plt+0x1523c>
   2714c:	b	270e8 <__assert_fail@plt+0x15220>
   27150:	ldr	r1, [r5]
   27154:	cmn	sl, #1
   27158:	mov	r6, #10
   2715c:	movweq	r6, #11
   27160:	cmp	r1, #31
   27164:	beq	27878 <__assert_fail@plt+0x159b0>
   27168:	ldr	r0, [sp, #60]	; 0x3c
   2716c:	ldr	r0, [r0]
   27170:	add	r9, r0, r1, lsl #5
   27174:	add	r2, r1, #1
   27178:	mvn	r0, #0
   2717c:	str	r2, [r5]
   27180:	str	r4, [r9, #4]!
   27184:	str	r7, [r9, #4]
   27188:	str	r4, [r9, #8]
   2718c:	str	r4, [r9, #12]
   27190:	str	r4, [r9, #16]
   27194:	str	r4, [r9, #20]
   27198:	str	r6, [r9, #24]
   2719c:	str	r0, [r9, #28]
   271a0:	add	r0, r8, #2
   271a4:	str	r9, [r7]
   271a8:	cmp	r0, sl
   271ac:	bgt	27490 <__assert_fail@plt+0x155c8>
   271b0:	str	sl, [sp, #52]	; 0x34
   271b4:	mov	sl, r9
   271b8:	ldr	r1, [r5]
   271bc:	str	r0, [sp, #56]	; 0x38
   271c0:	cmp	r1, #31
   271c4:	beq	273d0 <__assert_fail@plt+0x15508>
   271c8:	ldr	r0, [sp, #60]	; 0x3c
   271cc:	ldr	r0, [r0]
   271d0:	add	r8, r0, r1, lsl #5
   271d4:	add	r3, r1, #1
   271d8:	add	r2, r7, #20
   271dc:	sub	r6, fp, #80	; 0x50
   271e0:	str	r3, [r5]
   271e4:	str	r4, [r8, #4]!
   271e8:	str	r4, [r8, #8]
   271ec:	str	r4, [r8, #4]
   271f0:	ldm	r2, {r0, r1}
   271f4:	mvn	r2, #0
   271f8:	str	r2, [r8, #28]
   271fc:	str	r4, [r8, #16]
   27200:	str	r4, [r8, #12]
   27204:	str	r0, [r8, #20]
   27208:	bic	r0, r1, #786432	; 0xc0000
   2720c:	str	r0, [r8, #24]
   27210:	mov	r0, r8
   27214:	str	r8, [fp, #-80]	; 0xffffffb0
   27218:	str	r9, [r0]
   2721c:	ldr	r0, [r6]
   27220:	ldr	r1, [r0, #24]
   27224:	orr	r1, r1, #262144	; 0x40000
   27228:	str	r1, [r0, #24]
   2722c:	ldr	r0, [r7, #4]
   27230:	ldr	r9, [r6]
   27234:	cmp	r0, #0
   27238:	beq	27248 <__assert_fail@plt+0x15380>
   2723c:	add	r6, r9, #4
   27240:	mov	r7, r0
   27244:	b	2727c <__assert_fail@plt+0x153b4>
   27248:	mov	r1, #0
   2724c:	mov	r0, r7
   27250:	ldr	r7, [r7, #8]
   27254:	cmp	r7, r1
   27258:	cmpne	r7, #0
   2725c:	bne	27278 <__assert_fail@plt+0x153b0>
   27260:	ldr	r7, [r0]
   27264:	ldr	r9, [r9]
   27268:	mov	r1, r0
   2726c:	cmp	r7, #0
   27270:	bne	2724c <__assert_fail@plt+0x15384>
   27274:	b	27308 <__assert_fail@plt+0x15440>
   27278:	add	r6, r9, #8
   2727c:	ldr	r1, [r5]
   27280:	cmp	r1, #31
   27284:	beq	272d4 <__assert_fail@plt+0x1540c>
   27288:	ldr	r0, [sp, #60]	; 0x3c
   2728c:	ldr	r0, [r0]
   27290:	add	r0, r0, r1, lsl #5
   27294:	add	r3, r1, #1
   27298:	add	r2, r7, #20
   2729c:	str	r3, [r5]
   272a0:	mvn	r3, #0
   272a4:	str	r4, [r0, #4]!
   272a8:	str	r4, [r0, #8]
   272ac:	str	r4, [r0, #4]
   272b0:	ldm	r2, {r1, r2}
   272b4:	str	r3, [r0, #28]
   272b8:	str	r4, [r0, #16]
   272bc:	str	r4, [r0, #12]
   272c0:	str	r1, [r0, #20]
   272c4:	bic	r1, r2, #786432	; 0xc0000
   272c8:	str	r1, [r0, #24]
   272cc:	str	r0, [r6]
   272d0:	b	27218 <__assert_fail@plt+0x15350>
   272d4:	mov	r0, #996	; 0x3e4
   272d8:	bl	34810 <__assert_fail@plt+0x22948>
   272dc:	cmp	r0, #0
   272e0:	beq	27478 <__assert_fail@plt+0x155b0>
   272e4:	ldr	r2, [sp, #60]	; 0x3c
   272e8:	ldr	ip, [sp, #48]	; 0x30
   272ec:	ldr	lr, [sp, #44]	; 0x2c
   272f0:	ldr	r1, [r2]
   272f4:	str	r1, [r0]
   272f8:	mov	r1, #0
   272fc:	str	r0, [r2]
   27300:	str	r1, [r5]
   27304:	b	27290 <__assert_fail@plt+0x153c8>
   27308:	mov	r7, r8
   2730c:	ldr	r1, [r5]
   27310:	cmp	r1, #31
   27314:	beq	27404 <__assert_fail@plt+0x1553c>
   27318:	ldr	r0, [sp, #60]	; 0x3c
   2731c:	ldr	r0, [r0]
   27320:	add	r6, r0, r1, lsl #5
   27324:	add	r2, r1, #1
   27328:	mov	r0, #16
   2732c:	cmp	r7, #0
   27330:	str	r2, [r5]
   27334:	str	r4, [r6, #4]!
   27338:	str	sl, [r6, #4]
   2733c:	str	r7, [r6, #8]
   27340:	str	r4, [r6, #12]
   27344:	str	r4, [r6, #16]
   27348:	str	r4, [r6, #20]
   2734c:	str	r0, [r6, #24]
   27350:	mvn	r0, #0
   27354:	str	r0, [r6, #28]
   27358:	str	r6, [sl]
   2735c:	beq	27b20 <__assert_fail@plt+0x15c58>
   27360:	str	r6, [r7]
   27364:	ldr	r1, [r5]
   27368:	cmp	r1, #31
   2736c:	beq	27438 <__assert_fail@plt+0x15570>
   27370:	ldr	r0, [sp, #60]	; 0x3c
   27374:	ldr	r0, [r0]
   27378:	add	sl, r0, r1, lsl #5
   2737c:	add	r2, r1, #1
   27380:	mov	r0, #10
   27384:	ldr	r1, [sp, #56]	; 0x38
   27388:	str	r2, [r5]
   2738c:	str	r4, [sl, #4]!
   27390:	str	r6, [sl, #4]
   27394:	str	r4, [sl, #8]
   27398:	str	r4, [sl, #12]
   2739c:	str	r4, [sl, #16]
   273a0:	str	r4, [sl, #20]
   273a4:	str	r0, [sl, #24]
   273a8:	mvn	r0, #0
   273ac:	str	r0, [sl, #28]
   273b0:	ldr	r0, [sp, #52]	; 0x34
   273b4:	str	sl, [r6]
   273b8:	cmp	r1, r0
   273bc:	bge	2748c <__assert_fail@plt+0x155c4>
   273c0:	ldr	r9, [r7]
   273c4:	mov	r0, r1
   273c8:	add	r0, r1, #1
   273cc:	b	271b8 <__assert_fail@plt+0x152f0>
   273d0:	mov	r0, #996	; 0x3e4
   273d4:	bl	34810 <__assert_fail@plt+0x22948>
   273d8:	cmp	r0, #0
   273dc:	beq	2746c <__assert_fail@plt+0x155a4>
   273e0:	ldr	r2, [sp, #60]	; 0x3c
   273e4:	ldr	ip, [sp, #48]	; 0x30
   273e8:	ldr	lr, [sp, #44]	; 0x2c
   273ec:	ldr	r1, [r2]
   273f0:	str	r1, [r0]
   273f4:	mov	r1, #0
   273f8:	str	r0, [r2]
   273fc:	str	r1, [r5]
   27400:	b	271d0 <__assert_fail@plt+0x15308>
   27404:	mov	r0, #996	; 0x3e4
   27408:	bl	34810 <__assert_fail@plt+0x22948>
   2740c:	ldr	lr, [sp, #44]	; 0x2c
   27410:	ldr	ip, [sp, #48]	; 0x30
   27414:	cmp	r0, #0
   27418:	beq	27b20 <__assert_fail@plt+0x15c58>
   2741c:	ldr	r2, [sp, #60]	; 0x3c
   27420:	ldr	r1, [r2]
   27424:	str	r1, [r0]
   27428:	mov	r1, #0
   2742c:	str	r0, [r2]
   27430:	str	r1, [r5]
   27434:	b	27320 <__assert_fail@plt+0x15458>
   27438:	mov	r0, #996	; 0x3e4
   2743c:	bl	34810 <__assert_fail@plt+0x22948>
   27440:	ldr	lr, [sp, #44]	; 0x2c
   27444:	ldr	ip, [sp, #48]	; 0x30
   27448:	cmp	r0, #0
   2744c:	beq	27b20 <__assert_fail@plt+0x15c58>
   27450:	ldr	r2, [sp, #60]	; 0x3c
   27454:	ldr	r1, [r2]
   27458:	str	r1, [r0]
   2745c:	mov	r1, #0
   27460:	str	r0, [r2]
   27464:	str	r1, [r5]
   27468:	b	27378 <__assert_fail@plt+0x154b0>
   2746c:	mov	r7, #0
   27470:	str	r7, [fp, #-80]	; 0xffffffb0
   27474:	b	27480 <__assert_fail@plt+0x155b8>
   27478:	mov	r7, #0
   2747c:	str	r7, [r6]
   27480:	ldr	ip, [sp, #48]	; 0x30
   27484:	ldr	lr, [sp, #44]	; 0x2c
   27488:	b	2730c <__assert_fail@plt+0x15444>
   2748c:	mov	r9, sl
   27490:	ldr	r6, [sp, #36]	; 0x24
   27494:	ldr	r8, [sp, #28]
   27498:	cmp	r6, #0
   2749c:	beq	274f4 <__assert_fail@plt+0x1562c>
   274a0:	ldr	r1, [r5]
   274a4:	cmp	r1, #31
   274a8:	beq	278d4 <__assert_fail@plt+0x15a0c>
   274ac:	ldr	r0, [sp, #60]	; 0x3c
   274b0:	ldr	r0, [r0]
   274b4:	add	r7, r0, r1, lsl #5
   274b8:	add	r2, r1, #1
   274bc:	mov	r0, #0
   274c0:	mov	r1, #16
   274c4:	str	r2, [r5]
   274c8:	str	r0, [r7, #4]!
   274cc:	stmib	r7, {r6, r9}
   274d0:	str	r0, [r7, #12]
   274d4:	str	r0, [r7, #16]
   274d8:	str	r0, [r7, #20]
   274dc:	str	r1, [r7, #24]
   274e0:	mvn	r1, #0
   274e4:	str	r1, [r7, #28]
   274e8:	str	r7, [r6]
   274ec:	str	r7, [r9]
   274f0:	b	274fc <__assert_fail@plt+0x15634>
   274f4:	mov	r0, #0
   274f8:	mov	r7, r9
   274fc:	mov	r5, r8
   27500:	b	27b58 <__assert_fail@plt+0x15c90>
   27504:	ldr	ip, [sp, #48]	; 0x30
   27508:	b	26f48 <__assert_fail@plt+0x15080>
   2750c:	ldr	ip, [sp, #48]	; 0x30
   27510:	ldr	lr, [sp, #44]	; 0x2c
   27514:	b	27b38 <__assert_fail@plt+0x15c70>
   27518:	ldr	lr, [sp, #44]	; 0x2c
   2751c:	mov	r0, r9
   27520:	mov	r6, r0
   27524:	ldr	r0, [r0, #4]
   27528:	cmp	r0, #0
   2752c:	bne	27520 <__assert_fail@plt+0x15658>
   27530:	ldr	r0, [r6, #8]
   27534:	cmp	r0, #0
   27538:	bne	27520 <__assert_fail@plt+0x15658>
   2753c:	ldr	r0, [r6, #24]
   27540:	movw	r1, #255	; 0xff
   27544:	movt	r1, #4
   27548:	and	r0, r0, r1
   2754c:	cmp	r0, #3
   27550:	beq	27584 <__assert_fail@plt+0x156bc>
   27554:	cmp	r0, #6
   27558:	bne	27598 <__assert_fail@plt+0x156d0>
   2755c:	ldr	r5, [r6, #20]
   27560:	ldr	r0, [r5]
   27564:	bl	176c0 <__assert_fail@plt+0x57f8>
   27568:	ldr	r0, [r5, #4]
   2756c:	bl	176c0 <__assert_fail@plt+0x57f8>
   27570:	ldr	r0, [r5, #8]
   27574:	bl	176c0 <__assert_fail@plt+0x57f8>
   27578:	ldr	r0, [r5, #12]
   2757c:	bl	176c0 <__assert_fail@plt+0x57f8>
   27580:	b	27588 <__assert_fail@plt+0x156c0>
   27584:	ldr	r5, [r6, #20]
   27588:	mov	r0, r5
   2758c:	bl	176c0 <__assert_fail@plt+0x57f8>
   27590:	ldr	ip, [sp, #48]	; 0x30
   27594:	ldr	lr, [sp, #44]	; 0x2c
   27598:	ldr	r1, [r6]
   2759c:	cmp	r1, #0
   275a0:	beq	275c4 <__assert_fail@plt+0x156fc>
   275a4:	ldr	r0, [r1, #8]
   275a8:	cmp	r0, r6
   275ac:	mov	r6, r1
   275b0:	beq	2753c <__assert_fail@plt+0x15674>
   275b4:	cmp	r0, #0
   275b8:	mov	r6, r1
   275bc:	beq	2753c <__assert_fail@plt+0x15674>
   275c0:	b	27520 <__assert_fail@plt+0x15658>
   275c4:	ldr	r5, [sp, #28]
   275c8:	b	27b38 <__assert_fail@plt+0x15c70>
   275cc:	mov	r3, r9
   275d0:	str	sl, [sp, #52]	; 0x34
   275d4:	str	r9, [sp, #36]	; 0x24
   275d8:	beq	278ac <__assert_fail@plt+0x159e4>
   275dc:	ldr	sl, [sp, #40]	; 0x28
   275e0:	ldr	r0, [sl]
   275e4:	mov	r3, sl
   275e8:	str	r0, [sp, #36]	; 0x24
   275ec:	mov	r0, #2
   275f0:	ldr	r1, [r5]
   275f4:	str	r0, [sp, #56]	; 0x38
   275f8:	cmp	r1, #31
   275fc:	beq	277d0 <__assert_fail@plt+0x15908>
   27600:	ldr	r0, [sp, #60]	; 0x3c
   27604:	ldr	r0, [r0]
   27608:	add	r6, r0, r1, lsl #5
   2760c:	add	r2, r3, #20
   27610:	mov	r9, r3
   27614:	add	r3, r1, #1
   27618:	sub	r7, fp, #80	; 0x50
   2761c:	str	r3, [r5]
   27620:	str	r4, [r6, #4]!
   27624:	str	r4, [r6, #8]
   27628:	str	r4, [r6, #4]
   2762c:	ldm	r2, {r0, r1}
   27630:	mvn	r2, #0
   27634:	str	r2, [r6, #28]
   27638:	str	r4, [r6, #16]
   2763c:	str	r4, [r6, #12]
   27640:	str	r0, [r6, #20]
   27644:	bic	r0, r1, #786432	; 0xc0000
   27648:	str	r0, [r6, #24]
   2764c:	mov	r0, r6
   27650:	str	r6, [fp, #-80]	; 0xffffffb0
   27654:	ldr	r1, [sp, #36]	; 0x24
   27658:	str	r1, [r0]
   2765c:	ldr	r0, [r7]
   27660:	ldr	r1, [r0, #24]
   27664:	orr	r1, r1, #262144	; 0x40000
   27668:	str	r1, [r0, #24]
   2766c:	ldr	r0, [r9, #4]
   27670:	ldr	r1, [r7]
   27674:	cmp	r0, #0
   27678:	str	r1, [sp, #36]	; 0x24
   2767c:	beq	2768c <__assert_fail@plt+0x157c4>
   27680:	add	r7, r1, #4
   27684:	mov	r9, r0
   27688:	b	276cc <__assert_fail@plt+0x15804>
   2768c:	mov	r1, #0
   27690:	mov	r0, r9
   27694:	ldr	r9, [r9, #8]
   27698:	cmp	r9, r1
   2769c:	cmpne	r9, #0
   276a0:	bne	276c4 <__assert_fail@plt+0x157fc>
   276a4:	ldr	r1, [sp, #36]	; 0x24
   276a8:	ldr	r9, [r0]
   276ac:	ldr	r1, [r1]
   276b0:	cmp	r9, #0
   276b4:	str	r1, [sp, #36]	; 0x24
   276b8:	mov	r1, r0
   276bc:	bne	27690 <__assert_fail@plt+0x157c8>
   276c0:	b	27758 <__assert_fail@plt+0x15890>
   276c4:	ldr	r0, [sp, #36]	; 0x24
   276c8:	add	r7, r0, #8
   276cc:	ldr	r1, [r5]
   276d0:	cmp	r1, #31
   276d4:	beq	27724 <__assert_fail@plt+0x1585c>
   276d8:	ldr	r0, [sp, #60]	; 0x3c
   276dc:	ldr	r0, [r0]
   276e0:	add	r0, r0, r1, lsl #5
   276e4:	add	r3, r1, #1
   276e8:	add	r2, r9, #20
   276ec:	str	r3, [r5]
   276f0:	mvn	r3, #0
   276f4:	str	r4, [r0, #4]!
   276f8:	str	r4, [r0, #8]
   276fc:	str	r4, [r0, #4]
   27700:	ldm	r2, {r1, r2}
   27704:	str	r3, [r0, #28]
   27708:	str	r4, [r0, #16]
   2770c:	str	r4, [r0, #12]
   27710:	str	r1, [r0, #20]
   27714:	bic	r1, r2, #786432	; 0xc0000
   27718:	str	r1, [r0, #24]
   2771c:	str	r0, [r7]
   27720:	b	27654 <__assert_fail@plt+0x1578c>
   27724:	mov	r0, #996	; 0x3e4
   27728:	bl	34810 <__assert_fail@plt+0x22948>
   2772c:	cmp	r0, #0
   27730:	beq	27864 <__assert_fail@plt+0x1599c>
   27734:	ldr	r2, [sp, #60]	; 0x3c
   27738:	ldr	ip, [sp, #48]	; 0x30
   2773c:	ldr	lr, [sp, #44]	; 0x2c
   27740:	ldr	r1, [r2]
   27744:	str	r1, [r0]
   27748:	mov	r1, #0
   2774c:	str	r0, [r2]
   27750:	str	r1, [r5]
   27754:	b	276e0 <__assert_fail@plt+0x15818>
   27758:	mov	r3, r6
   2775c:	ldr	r1, [r5]
   27760:	cmp	r1, #31
   27764:	beq	27810 <__assert_fail@plt+0x15948>
   27768:	ldr	r0, [sp, #60]	; 0x3c
   2776c:	ldr	r0, [r0]
   27770:	add	r2, r1, #1
   27774:	add	r1, r0, r1, lsl #5
   27778:	mov	r0, #16
   2777c:	cmp	r3, #0
   27780:	str	r2, [r5]
   27784:	str	r4, [r1, #4]!
   27788:	str	sl, [r1, #4]
   2778c:	str	r3, [r1, #8]
   27790:	str	r4, [r1, #12]
   27794:	str	r4, [r1, #16]
   27798:	str	r4, [r1, #20]
   2779c:	str	r0, [r1, #24]
   277a0:	mvn	r0, #0
   277a4:	str	r1, [sp, #36]	; 0x24
   277a8:	str	r0, [r1, #28]
   277ac:	str	r1, [sl]
   277b0:	beq	27b20 <__assert_fail@plt+0x15c58>
   277b4:	ldr	r1, [sp, #56]	; 0x38
   277b8:	ldr	sl, [sp, #36]	; 0x24
   277bc:	add	r0, r1, #1
   277c0:	cmp	r1, r8
   277c4:	str	sl, [r3]
   277c8:	bne	275f0 <__assert_fail@plt+0x15728>
   277cc:	b	278ac <__assert_fail@plt+0x159e4>
   277d0:	mov	r0, #996	; 0x3e4
   277d4:	mov	r6, r3
   277d8:	bl	34810 <__assert_fail@plt+0x22948>
   277dc:	cmp	r0, #0
   277e0:	beq	2784c <__assert_fail@plt+0x15984>
   277e4:	ldr	r2, [sp, #60]	; 0x3c
   277e8:	ldr	r5, [sp, #24]
   277ec:	ldr	ip, [sp, #48]	; 0x30
   277f0:	ldr	lr, [sp, #44]	; 0x2c
   277f4:	mov	r3, r6
   277f8:	ldr	r1, [r2]
   277fc:	str	r1, [r0]
   27800:	mov	r1, #0
   27804:	str	r0, [r2]
   27808:	str	r1, [r5]
   2780c:	b	27608 <__assert_fail@plt+0x15740>
   27810:	mov	r0, #996	; 0x3e4
   27814:	mov	r6, r3
   27818:	bl	34810 <__assert_fail@plt+0x22948>
   2781c:	ldr	lr, [sp, #44]	; 0x2c
   27820:	ldr	ip, [sp, #48]	; 0x30
   27824:	cmp	r0, #0
   27828:	beq	27b20 <__assert_fail@plt+0x15c58>
   2782c:	ldr	r2, [sp, #60]	; 0x3c
   27830:	mov	r3, r6
   27834:	ldr	r1, [r2]
   27838:	str	r1, [r0]
   2783c:	mov	r1, #0
   27840:	str	r0, [r2]
   27844:	str	r1, [r5]
   27848:	b	27770 <__assert_fail@plt+0x158a8>
   2784c:	ldr	ip, [sp, #48]	; 0x30
   27850:	ldr	lr, [sp, #44]	; 0x2c
   27854:	ldr	r5, [sp, #24]
   27858:	mov	r3, #0
   2785c:	str	r3, [fp, #-80]	; 0xffffffb0
   27860:	b	2775c <__assert_fail@plt+0x15894>
   27864:	ldr	ip, [sp, #48]	; 0x30
   27868:	ldr	lr, [sp, #44]	; 0x2c
   2786c:	mov	r3, #0
   27870:	str	r3, [r7]
   27874:	b	2775c <__assert_fail@plt+0x15894>
   27878:	mov	r0, #996	; 0x3e4
   2787c:	bl	34810 <__assert_fail@plt+0x22948>
   27880:	ldr	lr, [sp, #44]	; 0x2c
   27884:	ldr	ip, [sp, #48]	; 0x30
   27888:	cmp	r0, #0
   2788c:	beq	27b20 <__assert_fail@plt+0x15c58>
   27890:	ldr	r2, [sp, #60]	; 0x3c
   27894:	ldr	r1, [r2]
   27898:	str	r1, [r0]
   2789c:	mov	r1, #0
   278a0:	str	r0, [r2]
   278a4:	str	r1, [r5]
   278a8:	b	27170 <__assert_fail@plt+0x152a8>
   278ac:	ldr	sl, [sp, #52]	; 0x34
   278b0:	mov	r0, #0
   278b4:	cmp	r8, sl
   278b8:	bne	27914 <__assert_fail@plt+0x15a4c>
   278bc:	ldr	r7, [sp, #36]	; 0x24
   278c0:	ldr	r5, [sp, #28]
   278c4:	b	27b58 <__assert_fail@plt+0x15c90>
   278c8:	ldr	r0, [sp, #20]
   278cc:	mov	r1, #10
   278d0:	b	27a88 <__assert_fail@plt+0x15bc0>
   278d4:	mov	r0, #996	; 0x3e4
   278d8:	bl	34810 <__assert_fail@plt+0x22948>
   278dc:	cmp	r0, #0
   278e0:	beq	27aac <__assert_fail@plt+0x15be4>
   278e4:	ldr	r2, [sp, #60]	; 0x3c
   278e8:	ldr	ip, [sp, #48]	; 0x30
   278ec:	ldr	lr, [sp, #44]	; 0x2c
   278f0:	ldr	r1, [r2]
   278f4:	str	r1, [r0]
   278f8:	mov	r1, #0
   278fc:	str	r0, [r2]
   27900:	str	r1, [r5]
   27904:	b	274b4 <__assert_fail@plt+0x155ec>
   27908:	ldr	ip, [sp, #48]	; 0x30
   2790c:	ldr	r9, [sp, #56]	; 0x38
   27910:	b	26f48 <__assert_fail@plt+0x15080>
   27914:	mov	r6, r3
   27918:	ldr	r1, [r5]
   2791c:	ldr	r9, [r6], #20
   27920:	cmp	r1, #31
   27924:	beq	27ac4 <__assert_fail@plt+0x15bfc>
   27928:	ldr	r0, [sp, #60]	; 0x3c
   2792c:	ldr	r0, [r0]
   27930:	add	r7, r0, r1, lsl #5
   27934:	add	r2, r1, #1
   27938:	str	r2, [r5]
   2793c:	mvn	r2, #0
   27940:	str	r4, [r7, #4]!
   27944:	str	r4, [r7, #8]
   27948:	str	r4, [r7, #4]
   2794c:	ldm	r6, {r0, r1}
   27950:	str	r2, [r7, #28]
   27954:	str	r4, [r7, #16]
   27958:	str	r4, [r7, #12]
   2795c:	sub	r6, fp, #80	; 0x50
   27960:	str	r0, [r7, #20]
   27964:	bic	r0, r1, #786432	; 0xc0000
   27968:	str	r0, [r7, #24]
   2796c:	mov	r0, r7
   27970:	str	r7, [fp, #-80]	; 0xffffffb0
   27974:	str	r9, [r0]
   27978:	ldr	r0, [r6]
   2797c:	ldr	r1, [r0, #24]
   27980:	orr	r1, r1, #262144	; 0x40000
   27984:	str	r1, [r0, #24]
   27988:	ldr	r0, [r3, #4]
   2798c:	ldr	r9, [r6]
   27990:	cmp	r0, #0
   27994:	beq	279a4 <__assert_fail@plt+0x15adc>
   27998:	add	r2, r9, #4
   2799c:	mov	r6, r0
   279a0:	b	279d8 <__assert_fail@plt+0x15b10>
   279a4:	mov	r1, #0
   279a8:	ldr	r6, [r3, #8]
   279ac:	mov	r0, r3
   279b0:	cmp	r6, r1
   279b4:	cmpne	r6, #0
   279b8:	bne	279d4 <__assert_fail@plt+0x15b0c>
   279bc:	ldr	r3, [r0]
   279c0:	ldr	r9, [r9]
   279c4:	mov	r1, r0
   279c8:	cmp	r3, #0
   279cc:	bne	279a8 <__assert_fail@plt+0x15ae0>
   279d0:	b	270d4 <__assert_fail@plt+0x1520c>
   279d4:	add	r2, r9, #8
   279d8:	ldr	r1, [r5]
   279dc:	str	r2, [sp, #56]	; 0x38
   279e0:	cmp	r1, #31
   279e4:	beq	27a3c <__assert_fail@plt+0x15b74>
   279e8:	ldr	r0, [sp, #60]	; 0x3c
   279ec:	ldr	r0, [r0]
   279f0:	add	r0, r0, r1, lsl #5
   279f4:	add	r3, r1, #1
   279f8:	add	r2, r6, #20
   279fc:	str	r3, [r5]
   27a00:	mvn	r3, #0
   27a04:	str	r4, [r0, #4]!
   27a08:	str	r4, [r0, #8]
   27a0c:	str	r4, [r0, #4]
   27a10:	ldm	r2, {r1, r2}
   27a14:	str	r3, [r0, #28]
   27a18:	mov	r3, r6
   27a1c:	ldr	r6, [sp, #56]	; 0x38
   27a20:	str	r4, [r0, #16]
   27a24:	str	r4, [r0, #12]
   27a28:	str	r1, [r0, #20]
   27a2c:	bic	r1, r2, #786432	; 0xc0000
   27a30:	str	r1, [r0, #24]
   27a34:	str	r0, [r6]
   27a38:	b	27974 <__assert_fail@plt+0x15aac>
   27a3c:	mov	r0, #996	; 0x3e4
   27a40:	str	r6, [sp, #12]
   27a44:	bl	34810 <__assert_fail@plt+0x22948>
   27a48:	cmp	r0, #0
   27a4c:	beq	27b10 <__assert_fail@plt+0x15c48>
   27a50:	ldr	r2, [sp, #60]	; 0x3c
   27a54:	ldr	r5, [sp, #24]
   27a58:	ldr	ip, [sp, #48]	; 0x30
   27a5c:	ldr	lr, [sp, #44]	; 0x2c
   27a60:	ldr	sl, [sp, #52]	; 0x34
   27a64:	ldr	r6, [sp, #12]
   27a68:	ldr	r1, [r2]
   27a6c:	str	r1, [r0]
   27a70:	mov	r1, #0
   27a74:	str	r0, [r2]
   27a78:	str	r1, [r5]
   27a7c:	b	279f0 <__assert_fail@plt+0x15b28>
   27a80:	ldr	r0, [sp, #20]
   27a84:	mov	r1, #15
   27a88:	str	r1, [r0]
   27a8c:	mov	r7, #0
   27a90:	b	27b38 <__assert_fail@plt+0x15c70>
   27a94:	ldr	r1, [sp, #20]
   27a98:	cmp	r0, #2
   27a9c:	mov	r0, #10
   27aa0:	movweq	r0, #9
   27aa4:	str	r0, [r1]
   27aa8:	b	26f18 <__assert_fail@plt+0x15050>
   27aac:	ldr	ip, [sp, #48]	; 0x30
   27ab0:	ldr	lr, [sp, #44]	; 0x2c
   27ab4:	ldr	r9, [sp, #40]	; 0x28
   27ab8:	mov	r7, #0
   27abc:	mov	r5, r8
   27ac0:	b	27b38 <__assert_fail@plt+0x15c70>
   27ac4:	mov	r0, #996	; 0x3e4
   27ac8:	mov	r7, r3
   27acc:	bl	34810 <__assert_fail@plt+0x22948>
   27ad0:	cmp	r0, #0
   27ad4:	beq	27b08 <__assert_fail@plt+0x15c40>
   27ad8:	ldr	r2, [sp, #60]	; 0x3c
   27adc:	ldr	r5, [sp, #24]
   27ae0:	ldr	ip, [sp, #48]	; 0x30
   27ae4:	ldr	lr, [sp, #44]	; 0x2c
   27ae8:	ldr	sl, [sp, #52]	; 0x34
   27aec:	mov	r3, r7
   27af0:	ldr	r1, [r2]
   27af4:	str	r1, [r0]
   27af8:	mov	r1, #0
   27afc:	str	r0, [r2]
   27b00:	str	r1, [r5]
   27b04:	b	27930 <__assert_fail@plt+0x15a68>
   27b08:	str	r4, [fp, #-80]	; 0xffffffb0
   27b0c:	b	27b18 <__assert_fail@plt+0x15c50>
   27b10:	ldr	r0, [sp, #56]	; 0x38
   27b14:	str	r4, [r0]
   27b18:	ldr	ip, [sp, #48]	; 0x30
   27b1c:	ldr	lr, [sp, #44]	; 0x2c
   27b20:	ldr	r0, [sp, #20]
   27b24:	ldr	r5, [sp, #28]
   27b28:	ldr	r9, [sp, #40]	; 0x28
   27b2c:	mov	r1, #12
   27b30:	mov	r7, #0
   27b34:	str	r1, [r0]
   27b38:	clz	r0, r7
   27b3c:	cmp	r7, #0
   27b40:	lsr	r0, r0, #5
   27b44:	bne	27b58 <__assert_fail@plt+0x15c90>
   27b48:	ldr	r1, [sp, #20]
   27b4c:	ldr	r1, [r1]
   27b50:	cmp	r1, #0
   27b54:	bne	27c34 <__assert_fail@plt+0x15d6c>
   27b58:	ldr	r1, [sp, #32]
   27b5c:	cmp	r1, #0
   27b60:	beq	26df8 <__assert_fail@plt+0x14f30>
   27b64:	ldrb	r1, [lr, #4]
   27b68:	cmp	r1, #23
   27b6c:	cmpne	r1, #11
   27b70:	bne	26df8 <__assert_fail@plt+0x14f30>
   27b74:	movw	r6, #255	; 0xff
   27b78:	cmp	r0, #0
   27b7c:	movt	r6, #4
   27b80:	bne	27c18 <__assert_fail@plt+0x15d50>
   27b84:	mov	r5, r7
   27b88:	ldr	r7, [r7, #4]
   27b8c:	cmp	r7, #0
   27b90:	bne	27b84 <__assert_fail@plt+0x15cbc>
   27b94:	ldr	r7, [r5, #8]
   27b98:	cmp	r7, #0
   27b9c:	bne	27b84 <__assert_fail@plt+0x15cbc>
   27ba0:	ldr	r0, [r5, #24]
   27ba4:	and	r0, r0, r6
   27ba8:	cmp	r0, #3
   27bac:	beq	27be0 <__assert_fail@plt+0x15d18>
   27bb0:	cmp	r0, #6
   27bb4:	bne	27bec <__assert_fail@plt+0x15d24>
   27bb8:	ldr	r4, [r5, #20]
   27bbc:	ldr	r0, [r4]
   27bc0:	bl	176c0 <__assert_fail@plt+0x57f8>
   27bc4:	ldr	r0, [r4, #4]
   27bc8:	bl	176c0 <__assert_fail@plt+0x57f8>
   27bcc:	ldr	r0, [r4, #8]
   27bd0:	bl	176c0 <__assert_fail@plt+0x57f8>
   27bd4:	ldr	r0, [r4, #12]
   27bd8:	bl	176c0 <__assert_fail@plt+0x57f8>
   27bdc:	b	27be4 <__assert_fail@plt+0x15d1c>
   27be0:	ldr	r4, [r5, #20]
   27be4:	mov	r0, r4
   27be8:	bl	176c0 <__assert_fail@plt+0x57f8>
   27bec:	ldr	r0, [r5]
   27bf0:	cmp	r0, #0
   27bf4:	beq	27c18 <__assert_fail@plt+0x15d50>
   27bf8:	ldr	r7, [r0, #8]
   27bfc:	cmp	r7, r5
   27c00:	mov	r5, r0
   27c04:	beq	27ba0 <__assert_fail@plt+0x15cd8>
   27c08:	cmp	r7, #0
   27c0c:	mov	r5, r0
   27c10:	beq	27ba0 <__assert_fail@plt+0x15cd8>
   27c14:	b	27b84 <__assert_fail@plt+0x15cbc>
   27c18:	mov	r0, #13
   27c1c:	ldr	r1, [sp, #20]
   27c20:	mov	r9, #0
   27c24:	str	r0, [r1]
   27c28:	mov	r0, r9
   27c2c:	sub	sp, fp, #28
   27c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c34:	cmp	r9, #0
   27c38:	beq	26364 <__assert_fail@plt+0x1449c>
   27c3c:	movw	r6, #255	; 0xff
   27c40:	movt	r6, #4
   27c44:	mov	r5, r9
   27c48:	ldr	r9, [r9, #4]
   27c4c:	cmp	r9, #0
   27c50:	bne	27c44 <__assert_fail@plt+0x15d7c>
   27c54:	ldr	r9, [r5, #8]
   27c58:	cmp	r9, #0
   27c5c:	bne	27c44 <__assert_fail@plt+0x15d7c>
   27c60:	ldr	r0, [r5, #24]
   27c64:	and	r0, r0, r6
   27c68:	cmp	r0, #3
   27c6c:	beq	27ca0 <__assert_fail@plt+0x15dd8>
   27c70:	cmp	r0, #6
   27c74:	bne	27cac <__assert_fail@plt+0x15de4>
   27c78:	ldr	r4, [r5, #20]
   27c7c:	ldr	r0, [r4]
   27c80:	bl	176c0 <__assert_fail@plt+0x57f8>
   27c84:	ldr	r0, [r4, #4]
   27c88:	bl	176c0 <__assert_fail@plt+0x57f8>
   27c8c:	ldr	r0, [r4, #8]
   27c90:	bl	176c0 <__assert_fail@plt+0x57f8>
   27c94:	ldr	r0, [r4, #12]
   27c98:	bl	176c0 <__assert_fail@plt+0x57f8>
   27c9c:	b	27ca4 <__assert_fail@plt+0x15ddc>
   27ca0:	ldr	r4, [r5, #20]
   27ca4:	mov	r0, r4
   27ca8:	bl	176c0 <__assert_fail@plt+0x57f8>
   27cac:	ldr	r0, [r5]
   27cb0:	cmp	r0, #0
   27cb4:	beq	26364 <__assert_fail@plt+0x1449c>
   27cb8:	ldr	r9, [r0, #8]
   27cbc:	cmp	r9, r5
   27cc0:	mov	r5, r0
   27cc4:	beq	27c60 <__assert_fail@plt+0x15d98>
   27cc8:	cmp	r9, #0
   27ccc:	mov	r5, r0
   27cd0:	beq	27c60 <__assert_fail@plt+0x15d98>
   27cd4:	b	27c44 <__assert_fail@plt+0x15d7c>
   27cd8:	cmp	r0, #2
   27cdc:	blt	27cf8 <__assert_fail@plt+0x15e30>
   27ce0:	ldr	r0, [r7, #36]	; 0x24
   27ce4:	cmp	r0, #0
   27ce8:	bne	26a5c <__assert_fail@plt+0x14b94>
   27cec:	ldrb	r0, [r7, #16]
   27cf0:	tst	r0, #1
   27cf4:	bne	26a5c <__assert_fail@plt+0x14b94>
   27cf8:	ldr	r0, [r7]
   27cfc:	bl	176c0 <__assert_fail@plt+0x57f8>
   27d00:	ldr	r0, [r7, #4]
   27d04:	bl	176c0 <__assert_fail@plt+0x57f8>
   27d08:	ldr	r0, [r7, #8]
   27d0c:	bl	176c0 <__assert_fail@plt+0x57f8>
   27d10:	ldr	r0, [r7, #12]
   27d14:	bl	176c0 <__assert_fail@plt+0x57f8>
   27d18:	mov	r0, r7
   27d1c:	bl	176c0 <__assert_fail@plt+0x57f8>
   27d20:	ldr	r1, [sl, #64]	; 0x40
   27d24:	cmp	r1, #31
   27d28:	beq	28264 <__assert_fail@plt+0x1639c>
   27d2c:	ldr	r0, [sl, #56]	; 0x38
   27d30:	add	r0, r0, r1, lsl #5
   27d34:	add	r2, r1, #1
   27d38:	vmov.i32	q8, #0	; 0x00000000
   27d3c:	ldr	ip, [sp, #48]	; 0x30
   27d40:	ldr	lr, [sp, #44]	; 0x2c
   27d44:	mov	r1, #3
   27d48:	str	r2, [sl, #64]	; 0x40
   27d4c:	mov	r2, #0
   27d50:	add	r7, r0, #4
   27d54:	str	r2, [r0, #20]
   27d58:	str	r8, [r0, #24]
   27d5c:	str	r1, [r0, #28]
   27d60:	mov	r0, #28
   27d64:	mov	r1, r7
   27d68:	vst1.32	{d16-d17}, [r1], r0
   27d6c:	mvn	r0, #0
   27d70:	str	r0, [r1]
   27d74:	b	26db0 <__assert_fail@plt+0x14ee8>
   27d78:	ldr	r8, [sp, #24]
   27d7c:	ldr	r0, [sp, #20]
   27d80:	ldr	r5, [sp, #28]
   27d84:	ldr	sl, [sp, #52]	; 0x34
   27d88:	ldr	r7, [sp, #60]	; 0x3c
   27d8c:	str	r9, [r0]
   27d90:	ldr	r4, [sp, #20]
   27d94:	mov	r0, r8
   27d98:	bl	176c0 <__assert_fail@plt+0x57f8>
   27d9c:	ldr	r0, [r7]
   27da0:	bl	176c0 <__assert_fail@plt+0x57f8>
   27da4:	ldr	r0, [r7, #4]
   27da8:	bl	176c0 <__assert_fail@plt+0x57f8>
   27dac:	ldr	r0, [r7, #8]
   27db0:	bl	176c0 <__assert_fail@plt+0x57f8>
   27db4:	ldr	r0, [r7, #12]
   27db8:	bl	176c0 <__assert_fail@plt+0x57f8>
   27dbc:	mov	r0, r7
   27dc0:	bl	176c0 <__assert_fail@plt+0x57f8>
   27dc4:	ldr	r0, [r4]
   27dc8:	mov	r7, #0
   27dcc:	mov	r9, #0
   27dd0:	b	25ef4 <__assert_fail@plt+0x1402c>
   27dd4:	mov	r0, #996	; 0x3e4
   27dd8:	bl	34810 <__assert_fail@plt+0x22948>
   27ddc:	cmp	r0, #0
   27de0:	beq	280d0 <__assert_fail@plt+0x16208>
   27de4:	ldr	r1, [sl, #56]	; 0x38
   27de8:	ldr	r5, [sp, #28]
   27dec:	ldr	ip, [sp, #48]	; 0x30
   27df0:	ldr	lr, [sp, #44]	; 0x2c
   27df4:	str	r1, [r0]
   27df8:	mov	r1, #0
   27dfc:	str	r1, [sl, #64]	; 0x40
   27e00:	str	r0, [sl, #56]	; 0x38
   27e04:	b	25e4c <__assert_fail@plt+0x13f84>
   27e08:	mov	r9, r0
   27e0c:	str	sl, [sp, #52]	; 0x34
   27e10:	b	27d7c <__assert_fail@plt+0x15eb4>
   27e14:	mov	r9, #7
   27e18:	str	sl, [sp, #52]	; 0x34
   27e1c:	b	27d7c <__assert_fail@plt+0x15eb4>
   27e20:	ldr	r4, [sp, #20]
   27e24:	ldr	r7, [sp, #60]	; 0x3c
   27e28:	mov	r0, #2
   27e2c:	str	r0, [r4]
   27e30:	b	27d94 <__assert_fail@plt+0x15ecc>
   27e34:	mov	r0, r8
   27e38:	bl	176c0 <__assert_fail@plt+0x57f8>
   27e3c:	mov	r0, r7
   27e40:	bl	176c0 <__assert_fail@plt+0x57f8>
   27e44:	b	26cb0 <__assert_fail@plt+0x14de8>
   27e48:	mov	r0, #996	; 0x3e4
   27e4c:	bl	34810 <__assert_fail@plt+0x22948>
   27e50:	cmp	r0, #0
   27e54:	beq	280d0 <__assert_fail@plt+0x16208>
   27e58:	ldr	r1, [sl, #56]	; 0x38
   27e5c:	ldr	r5, [sp, #28]
   27e60:	ldr	ip, [sp, #48]	; 0x30
   27e64:	ldr	lr, [sp, #44]	; 0x2c
   27e68:	str	r1, [r0]
   27e6c:	mov	r1, #0
   27e70:	str	r1, [sl, #64]	; 0x40
   27e74:	str	r0, [sl, #56]	; 0x38
   27e78:	b	26058 <__assert_fail@plt+0x14190>
   27e7c:	mov	r0, #6
   27e80:	b	26cb4 <__assert_fail@plt+0x14dec>
   27e84:	mov	r0, #996	; 0x3e4
   27e88:	bl	34810 <__assert_fail@plt+0x22948>
   27e8c:	cmp	r0, #0
   27e90:	beq	280d0 <__assert_fail@plt+0x16208>
   27e94:	ldr	r1, [sl, #56]	; 0x38
   27e98:	ldr	r5, [sp, #28]
   27e9c:	ldr	ip, [sp, #48]	; 0x30
   27ea0:	ldr	lr, [sp, #44]	; 0x2c
   27ea4:	str	r1, [r0]
   27ea8:	mov	r1, #0
   27eac:	str	r1, [sl, #64]	; 0x40
   27eb0:	str	r0, [sl, #56]	; 0x38
   27eb4:	b	26298 <__assert_fail@plt+0x143d0>
   27eb8:	mov	r0, #996	; 0x3e4
   27ebc:	bl	34810 <__assert_fail@plt+0x22948>
   27ec0:	cmp	r0, #0
   27ec4:	beq	280d0 <__assert_fail@plt+0x16208>
   27ec8:	ldr	r1, [sl, #56]	; 0x38
   27ecc:	ldr	r5, [sp, #28]
   27ed0:	ldr	ip, [sp, #48]	; 0x30
   27ed4:	ldr	lr, [sp, #44]	; 0x2c
   27ed8:	str	r1, [r0]
   27edc:	mov	r1, #0
   27ee0:	str	r1, [sl, #64]	; 0x40
   27ee4:	str	r0, [sl, #56]	; 0x38
   27ee8:	b	2623c <__assert_fail@plt+0x14374>
   27eec:	mov	r0, #996	; 0x3e4
   27ef0:	bl	34810 <__assert_fail@plt+0x22948>
   27ef4:	cmp	r0, #0
   27ef8:	beq	28294 <__assert_fail@plt+0x163cc>
   27efc:	ldr	r1, [sl, #56]	; 0x38
   27f00:	ldr	ip, [sp, #48]	; 0x30
   27f04:	ldr	lr, [sp, #44]	; 0x2c
   27f08:	str	r1, [r0]
   27f0c:	mov	r1, #0
   27f10:	str	r1, [sl, #64]	; 0x40
   27f14:	str	r0, [sl, #56]	; 0x38
   27f18:	b	26a78 <__assert_fail@plt+0x14bb0>
   27f1c:	mov	r0, #996	; 0x3e4
   27f20:	bl	34810 <__assert_fail@plt+0x22948>
   27f24:	cmp	r0, #0
   27f28:	beq	28294 <__assert_fail@plt+0x163cc>
   27f2c:	ldr	r1, [sl, #56]	; 0x38
   27f30:	ldr	ip, [sp, #48]	; 0x30
   27f34:	ldr	lr, [sp, #44]	; 0x2c
   27f38:	str	r1, [r0]
   27f3c:	mov	r1, #0
   27f40:	str	r1, [sl, #64]	; 0x40
   27f44:	str	r0, [sl, #56]	; 0x38
   27f48:	b	26b24 <__assert_fail@plt+0x14c5c>
   27f4c:	mov	r0, #996	; 0x3e4
   27f50:	bl	34810 <__assert_fail@plt+0x22948>
   27f54:	cmp	r0, #0
   27f58:	beq	28294 <__assert_fail@plt+0x163cc>
   27f5c:	ldr	r1, [sl, #56]	; 0x38
   27f60:	ldr	ip, [sp, #48]	; 0x30
   27f64:	ldr	lr, [sp, #44]	; 0x2c
   27f68:	str	r1, [r0]
   27f6c:	mov	r1, #0
   27f70:	str	r1, [sl, #64]	; 0x40
   27f74:	str	r0, [sl, #56]	; 0x38
   27f78:	b	26b70 <__assert_fail@plt+0x14ca8>
   27f7c:	str	sl, [sp, #52]	; 0x34
   27f80:	mov	r9, #3
   27f84:	b	27d7c <__assert_fail@plt+0x15eb4>
   27f88:	mov	r0, r8
   27f8c:	bl	176c0 <__assert_fail@plt+0x57f8>
   27f90:	ldr	lr, [sp, #44]	; 0x2c
   27f94:	ldr	ip, [sp, #48]	; 0x30
   27f98:	mov	r7, r4
   27f9c:	b	26db0 <__assert_fail@plt+0x14ee8>
   27fa0:	mov	r0, #996	; 0x3e4
   27fa4:	bl	34810 <__assert_fail@plt+0x22948>
   27fa8:	cmp	r0, #0
   27fac:	beq	280d0 <__assert_fail@plt+0x16208>
   27fb0:	ldr	r1, [sl, #56]	; 0x38
   27fb4:	ldr	r5, [sp, #28]
   27fb8:	ldr	ip, [sp, #48]	; 0x30
   27fbc:	ldr	lr, [sp, #44]	; 0x2c
   27fc0:	str	r1, [r0]
   27fc4:	mov	r1, #0
   27fc8:	str	r1, [sl, #64]	; 0x40
   27fcc:	str	r0, [sl, #56]	; 0x38
   27fd0:	b	26d6c <__assert_fail@plt+0x14ea4>
   27fd4:	mov	r0, #996	; 0x3e4
   27fd8:	bl	34810 <__assert_fail@plt+0x22948>
   27fdc:	cmp	r0, #0
   27fe0:	beq	2816c <__assert_fail@plt+0x162a4>
   27fe4:	ldr	r1, [sl, #56]	; 0x38
   27fe8:	ldr	ip, [sp, #48]	; 0x30
   27fec:	ldr	lr, [sp, #44]	; 0x2c
   27ff0:	mov	r9, #0
   27ff4:	str	r1, [r0]
   27ff8:	mov	r1, #0
   27ffc:	str	r1, [sl, #64]	; 0x40
   28000:	str	r0, [sl, #56]	; 0x38
   28004:	b	26c1c <__assert_fail@plt+0x14d54>
   28008:	mov	r0, #996	; 0x3e4
   2800c:	bl	34810 <__assert_fail@plt+0x22948>
   28010:	ldr	lr, [sp, #44]	; 0x2c
   28014:	ldr	ip, [sp, #48]	; 0x30
   28018:	cmp	r0, #0
   2801c:	beq	26cb0 <__assert_fail@plt+0x14de8>
   28020:	ldr	r1, [sl, #56]	; 0x38
   28024:	str	r1, [r0]
   28028:	mov	r1, #0
   2802c:	str	r1, [sl, #64]	; 0x40
   28030:	str	r0, [sl, #56]	; 0x38
   28034:	b	26c68 <__assert_fail@plt+0x14da0>
   28038:	mov	r0, #996	; 0x3e4
   2803c:	bl	34810 <__assert_fail@plt+0x22948>
   28040:	cmp	r0, #0
   28044:	beq	28240 <__assert_fail@plt+0x16378>
   28048:	ldr	r1, [sl, #56]	; 0x38
   2804c:	ldr	ip, [sp, #48]	; 0x30
   28050:	ldr	lr, [sp, #44]	; 0x2c
   28054:	mov	r9, #0
   28058:	str	r1, [r0]
   2805c:	mov	r1, #0
   28060:	str	r1, [sl, #64]	; 0x40
   28064:	str	r0, [sl, #56]	; 0x38
   28068:	b	25f90 <__assert_fail@plt+0x140c8>
   2806c:	mov	r0, #996	; 0x3e4
   28070:	bl	34810 <__assert_fail@plt+0x22948>
   28074:	cmp	r0, #0
   28078:	beq	2824c <__assert_fail@plt+0x16384>
   2807c:	ldr	r1, [sl, #56]	; 0x38
   28080:	ldr	ip, [sp, #48]	; 0x30
   28084:	ldr	lr, [sp, #44]	; 0x2c
   28088:	mov	r9, #0
   2808c:	str	r1, [r0]
   28090:	mov	r1, #0
   28094:	str	r1, [sl, #64]	; 0x40
   28098:	str	r0, [sl, #56]	; 0x38
   2809c:	b	26bc8 <__assert_fail@plt+0x14d00>
   280a0:	mov	r0, #996	; 0x3e4
   280a4:	bl	34810 <__assert_fail@plt+0x22948>
   280a8:	cmp	r0, #0
   280ac:	beq	280d0 <__assert_fail@plt+0x16208>
   280b0:	ldr	r1, [sl, #56]	; 0x38
   280b4:	ldr	ip, [sp, #48]	; 0x30
   280b8:	ldr	lr, [sp, #44]	; 0x2c
   280bc:	str	r1, [r0]
   280c0:	mov	r1, #0
   280c4:	str	r1, [sl, #64]	; 0x40
   280c8:	str	r0, [sl, #56]	; 0x38
   280cc:	b	26ccc <__assert_fail@plt+0x14e04>
   280d0:	mov	r0, #12
   280d4:	b	27c1c <__assert_fail@plt+0x15d54>
   280d8:	mov	r4, #0
   280dc:	mov	r5, #0
   280e0:	b	280ec <__assert_fail@plt+0x16224>
   280e4:	mov	r5, #4
   280e8:	mov	r4, #128	; 0x80
   280ec:	bl	11c7c <__ctype_b_loc@plt>
   280f0:	ldr	r0, [r0]
   280f4:	ldr	ip, [sp, #48]	; 0x30
   280f8:	ldr	lr, [sp, #44]	; 0x2c
   280fc:	mov	r1, #1
   28100:	mov	r9, #0
   28104:	add	r7, r0, r4, lsl #1
   28108:	b	28120 <__assert_fail@plt+0x16258>
   2810c:	add	r5, r5, #1
   28110:	add	r7, r7, #64	; 0x40
   28114:	add	r4, r4, #32
   28118:	cmp	r5, #8
   2811c:	beq	25f64 <__assert_fail@plt+0x1409c>
   28120:	add	r0, sl, r5, lsl #2
   28124:	mov	r3, #0
   28128:	add	r2, r0, #96	; 0x60
   2812c:	mov	r0, r7
   28130:	b	28150 <__assert_fail@plt+0x16288>
   28134:	ldr	r6, [r2]
   28138:	orr	r6, r6, r1, lsl r3
   2813c:	str	r6, [r2]
   28140:	add	r3, r3, #1
   28144:	add	r0, r0, #2
   28148:	cmp	r3, #32
   2814c:	beq	2810c <__assert_fail@plt+0x16244>
   28150:	add	r6, r4, r3
   28154:	cmp	r6, #95	; 0x5f
   28158:	beq	28134 <__assert_fail@plt+0x1626c>
   2815c:	ldrh	r6, [r0]
   28160:	ands	r6, r6, #8
   28164:	beq	28140 <__assert_fail@plt+0x16278>
   28168:	b	28134 <__assert_fail@plt+0x1626c>
   2816c:	ldr	ip, [sp, #48]	; 0x30
   28170:	ldr	lr, [sp, #44]	; 0x2c
   28174:	mov	r5, #0
   28178:	mov	r9, #0
   2817c:	b	26c58 <__assert_fail@plt+0x14d90>
   28180:	cmp	r9, #0
   28184:	beq	28224 <__assert_fail@plt+0x1635c>
   28188:	movw	r5, #255	; 0xff
   2818c:	movt	r5, #4
   28190:	mov	r6, r9
   28194:	ldr	r9, [r9, #4]
   28198:	cmp	r9, #0
   2819c:	bne	28190 <__assert_fail@plt+0x162c8>
   281a0:	ldr	r9, [r6, #8]
   281a4:	cmp	r9, #0
   281a8:	bne	28190 <__assert_fail@plt+0x162c8>
   281ac:	ldr	r0, [r6, #24]
   281b0:	and	r0, r0, r5
   281b4:	cmp	r0, #3
   281b8:	beq	281ec <__assert_fail@plt+0x16324>
   281bc:	cmp	r0, #6
   281c0:	bne	281f8 <__assert_fail@plt+0x16330>
   281c4:	ldr	r4, [r6, #20]
   281c8:	ldr	r0, [r4]
   281cc:	bl	176c0 <__assert_fail@plt+0x57f8>
   281d0:	ldr	r0, [r4, #4]
   281d4:	bl	176c0 <__assert_fail@plt+0x57f8>
   281d8:	ldr	r0, [r4, #8]
   281dc:	bl	176c0 <__assert_fail@plt+0x57f8>
   281e0:	ldr	r0, [r4, #12]
   281e4:	bl	176c0 <__assert_fail@plt+0x57f8>
   281e8:	b	281f0 <__assert_fail@plt+0x16328>
   281ec:	ldr	r4, [r6, #20]
   281f0:	mov	r0, r4
   281f4:	bl	176c0 <__assert_fail@plt+0x57f8>
   281f8:	ldr	r0, [r6]
   281fc:	cmp	r0, #0
   28200:	beq	28224 <__assert_fail@plt+0x1635c>
   28204:	ldr	r9, [r0, #8]
   28208:	cmp	r9, r6
   2820c:	mov	r6, r0
   28210:	beq	281ac <__assert_fail@plt+0x162e4>
   28214:	cmp	r9, #0
   28218:	mov	r6, r0
   2821c:	beq	281ac <__assert_fail@plt+0x162e4>
   28220:	b	28190 <__assert_fail@plt+0x162c8>
   28224:	mov	r0, #8
   28228:	b	27c1c <__assert_fail@plt+0x15d54>
   2822c:	ldr	r8, [sp, #24]
   28230:	mov	r9, r0
   28234:	b	27d7c <__assert_fail@plt+0x15eb4>
   28238:	ldr	r8, [sp, #24]
   2823c:	b	27f80 <__assert_fail@plt+0x160b8>
   28240:	mov	r4, #0
   28244:	mov	r0, #9
   28248:	b	28254 <__assert_fail@plt+0x1638c>
   2824c:	mov	r4, #0
   28250:	mov	r0, #10
   28254:	ldr	ip, [sp, #48]	; 0x30
   28258:	ldr	lr, [sp, #44]	; 0x2c
   2825c:	mov	r9, #0
   28260:	b	26c08 <__assert_fail@plt+0x14d40>
   28264:	mov	r0, #996	; 0x3e4
   28268:	bl	34810 <__assert_fail@plt+0x22948>
   2826c:	cmp	r0, #0
   28270:	beq	28294 <__assert_fail@plt+0x163cc>
   28274:	ldr	r1, [sl, #56]	; 0x38
   28278:	str	r1, [r0]
   2827c:	mov	r1, #0
   28280:	str	r1, [sl, #64]	; 0x40
   28284:	str	r0, [sl, #56]	; 0x38
   28288:	b	27d30 <__assert_fail@plt+0x15e68>
   2828c:	ldr	r5, [sp, #28]
   28290:	ldr	r7, [sp, #60]	; 0x3c
   28294:	ldr	r4, [sp, #20]
   28298:	mov	r0, #12
   2829c:	str	r0, [r4]
   282a0:	b	27d94 <__assert_fail@plt+0x15ecc>
   282a4:	mov	r0, r6
   282a8:	bl	176c0 <__assert_fail@plt+0x57f8>
   282ac:	mov	r0, r9
   282b0:	bl	176c0 <__assert_fail@plt+0x57f8>
   282b4:	ldr	r8, [sp, #24]
   282b8:	mov	r9, #12
   282bc:	b	27d7c <__assert_fail@plt+0x15eb4>
   282c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282c4:	add	fp, sp, #28
   282c8:	sub	sp, sp, #12
   282cc:	mov	r9, r1
   282d0:	mov	r6, r0
   282d4:	mov	r4, #0
   282d8:	mov	r0, #32
   282dc:	mov	r1, #1
   282e0:	mov	sl, r3
   282e4:	mov	r5, r2
   282e8:	str	r4, [sp, #8]
   282ec:	bl	347bc <__assert_fail@plt+0x228f4>
   282f0:	ldr	r1, [fp, #12]
   282f4:	cmp	r0, #0
   282f8:	beq	28648 <__assert_fail@plt+0x16780>
   282fc:	mov	r7, r0
   28300:	mov	r0, #40	; 0x28
   28304:	mov	r1, #1
   28308:	bl	347bc <__assert_fail@plt+0x228f4>
   2830c:	cmp	r0, #0
   28310:	beq	28568 <__assert_fail@plt+0x166a0>
   28314:	mov	r8, r0
   28318:	ldrb	r0, [r0, #16]
   2831c:	ldr	r1, [fp, #8]
   28320:	mov	r4, #0
   28324:	add	r3, sp, #8
   28328:	str	r5, [sp]
   2832c:	mov	r2, r8
   28330:	str	r4, [sp, #4]
   28334:	and	r0, r0, #254	; 0xfe
   28338:	orr	r0, r0, r1
   2833c:	mov	r1, r7
   28340:	strb	r0, [r8, #16]
   28344:	mov	r0, r9
   28348:	bl	28ac0 <__assert_fail@plt+0x16bf8>
   2834c:	cmp	r0, #0
   28350:	bne	28584 <__assert_fail@plt+0x166bc>
   28354:	ldrb	r0, [sl]
   28358:	cmp	r0, #0
   2835c:	beq	28388 <__assert_fail@plt+0x164c0>
   28360:	add	r1, sl, #1
   28364:	mov	r2, #1
   28368:	ubfx	r3, r0, #5, #3
   2836c:	and	r0, r0, #31
   28370:	ldr	r5, [r7, r3, lsl #2]
   28374:	orr	r0, r5, r2, lsl r0
   28378:	str	r0, [r7, r3, lsl #2]
   2837c:	ldrb	r0, [r1], #1
   28380:	cmp	r0, #0
   28384:	bne	28368 <__assert_fail@plt+0x164a0>
   28388:	ldr	r0, [fp, #8]
   2838c:	cmp	r0, #0
   28390:	beq	283b0 <__assert_fail@plt+0x164e8>
   28394:	vld1.32	{d16-d17}, [r7]
   28398:	mov	r0, r7
   2839c:	vmvn	q8, q8
   283a0:	vst1.32	{d16-d17}, [r0]!
   283a4:	vld1.32	{d16-d17}, [r0]
   283a8:	vmvn	q8, q8
   283ac:	vst1.32	{d16-d17}, [r0]
   283b0:	ldr	r0, [r6, #92]	; 0x5c
   283b4:	cmp	r0, #2
   283b8:	blt	28434 <__assert_fail@plt+0x1656c>
   283bc:	ldr	r5, [r6, #60]	; 0x3c
   283c0:	ldm	r7, {r0, r1, r2, ip}
   283c4:	ldr	r3, [r5]
   283c8:	and	r0, r0, r3
   283cc:	str	r0, [r7]
   283d0:	ldr	r0, [r5, #4]
   283d4:	and	r0, r1, r0
   283d8:	str	r0, [r7, #4]
   283dc:	ldr	r0, [r5, #8]
   283e0:	and	r0, r2, r0
   283e4:	str	r0, [r7, #8]
   283e8:	ldr	r0, [r5, #12]
   283ec:	and	r0, ip, r0
   283f0:	str	r0, [r7, #12]
   283f4:	ldr	r0, [r7, #16]
   283f8:	ldr	r1, [r5, #16]
   283fc:	and	r0, r0, r1
   28400:	str	r0, [r7, #16]
   28404:	ldr	r0, [r5, #20]
   28408:	ldr	r1, [r7, #20]
   2840c:	and	r0, r1, r0
   28410:	str	r0, [r7, #20]
   28414:	ldr	r0, [r5, #24]
   28418:	ldr	r1, [r7, #24]
   2841c:	and	r0, r1, r0
   28420:	str	r0, [r7, #24]
   28424:	ldr	r0, [r5, #28]
   28428:	ldr	r1, [r7, #28]
   2842c:	and	r0, r1, r0
   28430:	str	r0, [r7, #28]
   28434:	ldr	r1, [r6, #64]	; 0x40
   28438:	cmp	r1, #31
   2843c:	beq	285c4 <__assert_fail@plt+0x166fc>
   28440:	ldr	r0, [r6, #56]	; 0x38
   28444:	add	r0, r0, r1, lsl #5
   28448:	add	r2, r1, #1
   2844c:	vmov.i32	q8, #0	; 0x00000000
   28450:	mov	r1, #3
   28454:	str	r2, [r6, #64]	; 0x40
   28458:	mov	r2, #0
   2845c:	add	r5, r0, #4
   28460:	str	r2, [r0, #20]
   28464:	str	r7, [r0, #24]
   28468:	str	r1, [r0, #28]
   2846c:	mov	r0, #28
   28470:	mov	r1, r5
   28474:	vst1.32	{d16-d17}, [r1], r0
   28478:	mvn	r0, #0
   2847c:	str	r0, [r1]
   28480:	ldr	r0, [r6, #92]	; 0x5c
   28484:	cmp	r0, #2
   28488:	blt	28530 <__assert_fail@plt+0x16668>
   2848c:	ldrb	r0, [r6, #88]	; 0x58
   28490:	orr	r0, r0, #2
   28494:	strb	r0, [r6, #88]	; 0x58
   28498:	ldr	r1, [r6, #64]	; 0x40
   2849c:	cmp	r1, #31
   284a0:	beq	285ec <__assert_fail@plt+0x16724>
   284a4:	ldr	r0, [r6, #56]	; 0x38
   284a8:	add	r0, r0, r1, lsl #5
   284ac:	vmov.i32	q8, #0	; 0x00000000
   284b0:	add	r2, r1, #1
   284b4:	mov	r1, #6
   284b8:	mov	r4, #0
   284bc:	str	r2, [r6, #64]	; 0x40
   284c0:	add	r7, r0, #4
   284c4:	str	r4, [r0, #20]
   284c8:	str	r8, [r0, #24]
   284cc:	str	r1, [r0, #28]
   284d0:	mov	r0, #28
   284d4:	mov	r1, r7
   284d8:	vst1.32	{d16-d17}, [r1], r0
   284dc:	mvn	r0, #0
   284e0:	str	r0, [r1]
   284e4:	ldr	r1, [r6, #64]	; 0x40
   284e8:	cmp	r1, #31
   284ec:	beq	28654 <__assert_fail@plt+0x1678c>
   284f0:	ldr	r0, [r6, #56]	; 0x38
   284f4:	add	r4, r0, r1, lsl #5
   284f8:	add	r2, r1, #1
   284fc:	mov	r0, #0
   28500:	mov	r1, #10
   28504:	str	r2, [r6, #64]	; 0x40
   28508:	mvn	r2, #0
   2850c:	str	r0, [r4, #4]!
   28510:	add	r3, r4, #20
   28514:	stmib	r4, {r5, r7}
   28518:	str	r0, [r4, #12]
   2851c:	str	r0, [r4, #16]
   28520:	stm	r3, {r0, r1, r2}
   28524:	str	r4, [r5]
   28528:	str	r4, [r7]
   2852c:	b	2855c <__assert_fail@plt+0x16694>
   28530:	ldr	r0, [r8]
   28534:	bl	176c0 <__assert_fail@plt+0x57f8>
   28538:	ldr	r0, [r8, #4]
   2853c:	bl	176c0 <__assert_fail@plt+0x57f8>
   28540:	ldr	r0, [r8, #8]
   28544:	bl	176c0 <__assert_fail@plt+0x57f8>
   28548:	ldr	r0, [r8, #12]
   2854c:	bl	176c0 <__assert_fail@plt+0x57f8>
   28550:	mov	r0, r8
   28554:	bl	176c0 <__assert_fail@plt+0x57f8>
   28558:	mov	r4, r5
   2855c:	mov	r0, r4
   28560:	sub	sp, fp, #28
   28564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28568:	mov	r0, r7
   2856c:	bl	176c0 <__assert_fail@plt+0x57f8>
   28570:	ldr	r1, [fp, #12]
   28574:	mov	r0, #12
   28578:	mov	r4, #0
   2857c:	str	r0, [r1]
   28580:	b	2855c <__assert_fail@plt+0x16694>
   28584:	mov	r5, r0
   28588:	mov	r0, r7
   2858c:	bl	176c0 <__assert_fail@plt+0x57f8>
   28590:	ldr	r0, [r8]
   28594:	bl	176c0 <__assert_fail@plt+0x57f8>
   28598:	ldr	r0, [r8, #4]
   2859c:	bl	176c0 <__assert_fail@plt+0x57f8>
   285a0:	ldr	r0, [r8, #8]
   285a4:	bl	176c0 <__assert_fail@plt+0x57f8>
   285a8:	ldr	r0, [r8, #12]
   285ac:	bl	176c0 <__assert_fail@plt+0x57f8>
   285b0:	mov	r0, r8
   285b4:	bl	176c0 <__assert_fail@plt+0x57f8>
   285b8:	ldr	r0, [fp, #12]
   285bc:	str	r5, [r0]
   285c0:	b	2855c <__assert_fail@plt+0x16694>
   285c4:	mov	r0, #996	; 0x3e4
   285c8:	bl	34810 <__assert_fail@plt+0x22948>
   285cc:	cmp	r0, #0
   285d0:	beq	28614 <__assert_fail@plt+0x1674c>
   285d4:	ldr	r1, [r6, #56]	; 0x38
   285d8:	str	r1, [r0]
   285dc:	mov	r1, #0
   285e0:	str	r1, [r6, #64]	; 0x40
   285e4:	str	r0, [r6, #56]	; 0x38
   285e8:	b	28444 <__assert_fail@plt+0x1657c>
   285ec:	mov	r0, #996	; 0x3e4
   285f0:	bl	34810 <__assert_fail@plt+0x22948>
   285f4:	cmp	r0, #0
   285f8:	beq	28614 <__assert_fail@plt+0x1674c>
   285fc:	ldr	r1, [r6, #56]	; 0x38
   28600:	str	r1, [r0]
   28604:	mov	r1, #0
   28608:	str	r1, [r6, #64]	; 0x40
   2860c:	str	r0, [r6, #56]	; 0x38
   28610:	b	284a8 <__assert_fail@plt+0x165e0>
   28614:	mov	r0, r7
   28618:	bl	176c0 <__assert_fail@plt+0x57f8>
   2861c:	ldr	r0, [r8]
   28620:	bl	176c0 <__assert_fail@plt+0x57f8>
   28624:	ldr	r0, [r8, #4]
   28628:	bl	176c0 <__assert_fail@plt+0x57f8>
   2862c:	ldr	r0, [r8, #8]
   28630:	bl	176c0 <__assert_fail@plt+0x57f8>
   28634:	ldr	r0, [r8, #12]
   28638:	bl	176c0 <__assert_fail@plt+0x57f8>
   2863c:	mov	r0, r8
   28640:	bl	176c0 <__assert_fail@plt+0x57f8>
   28644:	ldr	r1, [fp, #12]
   28648:	mov	r0, #12
   2864c:	str	r0, [r1]
   28650:	b	2855c <__assert_fail@plt+0x16694>
   28654:	mov	r0, #996	; 0x3e4
   28658:	bl	34810 <__assert_fail@plt+0x22948>
   2865c:	cmp	r0, #0
   28660:	beq	2855c <__assert_fail@plt+0x16694>
   28664:	ldr	r1, [r6, #56]	; 0x38
   28668:	str	r1, [r0]
   2866c:	mov	r1, #0
   28670:	str	r1, [r6, #64]	; 0x40
   28674:	str	r0, [r6, #56]	; 0x38
   28678:	b	284f4 <__assert_fail@plt+0x1662c>
   2867c:	push	{fp, lr}
   28680:	mov	fp, sp
   28684:	ldr	ip, [r1, #40]	; 0x28
   28688:	ldr	r3, [r1, #56]	; 0x38
   2868c:	cmp	r3, ip
   28690:	ble	28710 <__assert_fail@plt+0x16848>
   28694:	ldr	r3, [r1, #4]
   28698:	ldrb	lr, [r3, ip]
   2869c:	strb	lr, [r0]
   286a0:	ldr	r3, [r1, #80]	; 0x50
   286a4:	cmp	r3, #2
   286a8:	blt	286cc <__assert_fail@plt+0x16804>
   286ac:	ldr	r3, [r1, #28]
   286b0:	ldr	ip, [r1, #40]	; 0x28
   286b4:	cmp	ip, r3
   286b8:	beq	286cc <__assert_fail@plt+0x16804>
   286bc:	ldr	r3, [r1, #8]
   286c0:	ldr	r3, [r3, ip, lsl #2]
   286c4:	cmn	r3, #1
   286c8:	beq	287c0 <__assert_fail@plt+0x168f8>
   286cc:	tst	r2, #1
   286d0:	beq	28724 <__assert_fail@plt+0x1685c>
   286d4:	cmp	lr, #92	; 0x5c
   286d8:	bne	28724 <__assert_fail@plt+0x1685c>
   286dc:	ldr	r2, [r1, #40]	; 0x28
   286e0:	ldr	r3, [r1, #48]	; 0x30
   286e4:	add	r2, r2, #1
   286e8:	cmp	r2, r3
   286ec:	bge	287c0 <__assert_fail@plt+0x168f8>
   286f0:	str	r2, [r1, #40]	; 0x28
   286f4:	ldr	r1, [r1, #4]
   286f8:	ldrb	r2, [r1, r2]
   286fc:	mov	r1, #1
   28700:	strb	r1, [r0, #4]
   28704:	strb	r2, [r0]
   28708:	mov	r0, r1
   2870c:	pop	{fp, pc}
   28710:	mov	r1, #2
   28714:	strb	r1, [r0, #4]
   28718:	mov	r1, #0
   2871c:	mov	r0, r1
   28720:	pop	{fp, pc}
   28724:	cmp	lr, #92	; 0x5c
   28728:	bgt	2877c <__assert_fail@plt+0x168b4>
   2872c:	cmp	lr, #45	; 0x2d
   28730:	beq	28794 <__assert_fail@plt+0x168cc>
   28734:	cmp	lr, #91	; 0x5b
   28738:	bne	287c0 <__assert_fail@plt+0x168f8>
   2873c:	ldr	r3, [r1, #40]	; 0x28
   28740:	ldr	ip, [r1, #48]	; 0x30
   28744:	add	r3, r3, #1
   28748:	cmp	r3, ip
   2874c:	bge	287b0 <__assert_fail@plt+0x168e8>
   28750:	ldr	r1, [r1, #4]
   28754:	ldrb	r1, [r1, r3]
   28758:	cmp	r1, #61	; 0x3d
   2875c:	strb	r1, [r0]
   28760:	beq	287d0 <__assert_fail@plt+0x16908>
   28764:	cmp	r1, #58	; 0x3a
   28768:	beq	287d8 <__assert_fail@plt+0x16910>
   2876c:	cmp	r1, #46	; 0x2e
   28770:	bne	287b8 <__assert_fail@plt+0x168f0>
   28774:	mov	r1, #26
   28778:	b	287e4 <__assert_fail@plt+0x1691c>
   2877c:	cmp	lr, #93	; 0x5d
   28780:	beq	2879c <__assert_fail@plt+0x168d4>
   28784:	cmp	lr, #94	; 0x5e
   28788:	bne	287c0 <__assert_fail@plt+0x168f8>
   2878c:	mov	r1, #25
   28790:	b	287a0 <__assert_fail@plt+0x168d8>
   28794:	mov	r1, #22
   28798:	b	287a0 <__assert_fail@plt+0x168d8>
   2879c:	mov	r1, #21
   287a0:	strb	r1, [r0, #4]
   287a4:	mov	r1, #1
   287a8:	mov	r0, r1
   287ac:	pop	{fp, pc}
   287b0:	mov	r1, #0
   287b4:	strb	r1, [r0]
   287b8:	mov	r1, #91	; 0x5b
   287bc:	strb	r1, [r0]
   287c0:	mov	r1, #1
   287c4:	strb	r1, [r0, #4]
   287c8:	mov	r0, r1
   287cc:	pop	{fp, pc}
   287d0:	mov	r1, #28
   287d4:	b	287e4 <__assert_fail@plt+0x1691c>
   287d8:	tst	r2, #4
   287dc:	beq	287b8 <__assert_fail@plt+0x168f0>
   287e0:	mov	r1, #30
   287e4:	strb	r1, [r0, #4]
   287e8:	mov	r1, #2
   287ec:	mov	r0, r1
   287f0:	pop	{fp, pc}
   287f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   287f8:	add	fp, sp, #24
   287fc:	sub	sp, sp, #8
   28800:	mov	r5, r2
   28804:	ldr	r2, [r1, #80]	; 0x50
   28808:	mov	r9, r0
   2880c:	ldr	r0, [r1, #40]	; 0x28
   28810:	cmp	r2, #1
   28814:	beq	2888c <__assert_fail@plt+0x169c4>
   28818:	ldr	r2, [r1, #28]
   2881c:	add	r6, r0, #1
   28820:	cmp	r6, r2
   28824:	bge	2888c <__assert_fail@plt+0x169c4>
   28828:	ldr	lr, [r1, #8]
   2882c:	sub	r4, r0, r2
   28830:	sub	ip, r2, r0
   28834:	mvn	r2, #0
   28838:	add	r6, lr, r0, lsl #2
   2883c:	ldr	r7, [r6, -r2, lsl #2]
   28840:	cmn	r7, #1
   28844:	bne	28858 <__assert_fail@plt+0x16990>
   28848:	sub	r2, r2, #1
   2884c:	cmp	r4, r2
   28850:	bne	2883c <__assert_fail@plt+0x16974>
   28854:	b	28864 <__assert_fail@plt+0x1699c>
   28858:	rsb	ip, r2, #0
   2885c:	cmp	ip, #2
   28860:	bcc	2888c <__assert_fail@plt+0x169c4>
   28864:	mov	r2, #1
   28868:	str	r2, [r9]
   2886c:	ldr	r0, [lr, r0, lsl #2]
   28870:	str	r0, [r9, #4]
   28874:	ldr	r0, [r1, #40]	; 0x28
   28878:	add	r0, r0, ip
   2887c:	str	r0, [r1, #40]	; 0x28
   28880:	mov	r0, #0
   28884:	sub	sp, fp, #24
   28888:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2888c:	add	r2, r0, r3
   28890:	str	r2, [r1, #40]	; 0x28
   28894:	ldrb	r6, [r5, #4]
   28898:	sub	r0, r6, #22
   2889c:	cmp	r0, #8
   288a0:	bhi	28aa8 <__assert_fail@plt+0x16be0>
   288a4:	add	r3, pc, #0
   288a8:	ldr	pc, [r3, r0, lsl #2]
   288ac:	andeq	r8, r2, r0, lsl #21
   288b0:	andeq	r8, r2, r8, lsr #21
   288b4:	andeq	r8, r2, r8, lsr #21
   288b8:	andeq	r8, r2, r8, lsr #21
   288bc:	ldrdeq	r8, [r2], -r0
   288c0:	andeq	r8, r2, r8, lsr #21
   288c4:	ldrdeq	r8, [r2], -r0
   288c8:	andeq	r8, r2, r8, lsr #21
   288cc:	ldrdeq	r8, [r2], -r0
   288d0:	ldr	r3, [r1, #56]	; 0x38
   288d4:	mov	r0, #7
   288d8:	cmp	r3, r2
   288dc:	ble	28ab8 <__assert_fail@plt+0x16bf0>
   288e0:	ldrb	r3, [r5]
   288e4:	mov	r2, #0
   288e8:	uxtb	r7, r6
   288ec:	cmp	r7, #30
   288f0:	bne	28900 <__assert_fail@plt+0x16a38>
   288f4:	ldrb	r7, [r1, #75]	; 0x4b
   288f8:	cmp	r7, #0
   288fc:	bne	28958 <__assert_fail@plt+0x16a90>
   28900:	ldr	r4, [r1, #40]	; 0x28
   28904:	ldr	r7, [r1, #4]
   28908:	add	r6, r4, #1
   2890c:	str	r6, [r1, #40]	; 0x28
   28910:	ldrb	r4, [r7, r4]
   28914:	ldr	r7, [r1, #56]	; 0x38
   28918:	cmp	r7, r6
   2891c:	ble	28ab8 <__assert_fail@plt+0x16bf0>
   28920:	uxtb	r7, r4
   28924:	cmp	r7, r3
   28928:	bne	2893c <__assert_fail@plt+0x16a74>
   2892c:	ldr	r7, [r1, #4]
   28930:	ldrb	r7, [r7, r6]
   28934:	cmp	r7, #93	; 0x5d
   28938:	beq	28a30 <__assert_fail@plt+0x16b68>
   2893c:	ldr	r7, [r9, #4]
   28940:	strb	r4, [r7, r2]
   28944:	add	r2, r2, #1
   28948:	cmp	r2, #32
   2894c:	beq	28ab8 <__assert_fail@plt+0x16bf0>
   28950:	ldrb	r6, [r5, #4]
   28954:	b	288e8 <__assert_fail@plt+0x16a20>
   28958:	ldrb	r7, [r1, #76]	; 0x4c
   2895c:	cmp	r7, #0
   28960:	beq	289fc <__assert_fail@plt+0x16b34>
   28964:	ldr	lr, [r1, #28]
   28968:	ldr	ip, [r1, #40]	; 0x28
   2896c:	cmp	lr, ip
   28970:	beq	28984 <__assert_fail@plt+0x16abc>
   28974:	ldr	r4, [r1, #8]
   28978:	ldr	r4, [r4, ip, lsl #2]
   2897c:	cmn	r4, #1
   28980:	beq	28a1c <__assert_fail@plt+0x16b54>
   28984:	ldr	r6, [r1, #12]
   28988:	ldr	r7, [r1, #24]
   2898c:	ldr	r4, [r1]
   28990:	ldr	r6, [r6, ip, lsl #2]
   28994:	add	r6, r7, r6
   28998:	add	r4, r4, r6
   2899c:	ldrsb	r4, [r4]
   289a0:	cmn	r4, #1
   289a4:	ble	28a1c <__assert_fail@plt+0x16b54>
   289a8:	ldr	r7, [r1, #80]	; 0x50
   289ac:	mov	r6, #1
   289b0:	cmp	r7, #1
   289b4:	beq	289f0 <__assert_fail@plt+0x16b28>
   289b8:	add	r7, ip, #1
   289bc:	cmp	r7, lr
   289c0:	bge	289f0 <__assert_fail@plt+0x16b28>
   289c4:	ldr	r6, [r1, #8]
   289c8:	sub	lr, lr, ip
   289cc:	add	r8, r6, ip, lsl #2
   289d0:	mov	r6, #1
   289d4:	ldr	r7, [r8, r6, lsl #2]
   289d8:	cmn	r7, #1
   289dc:	bne	289f0 <__assert_fail@plt+0x16b28>
   289e0:	add	r6, r6, #1
   289e4:	cmp	lr, r6
   289e8:	bne	289d4 <__assert_fail@plt+0x16b0c>
   289ec:	mov	r6, lr
   289f0:	add	r6, r6, ip
   289f4:	str	r6, [r1, #40]	; 0x28
   289f8:	b	28914 <__assert_fail@plt+0x16a4c>
   289fc:	ldr	r7, [r1, #40]	; 0x28
   28a00:	ldr	r4, [r1, #24]
   28a04:	ldr	ip, [r1]
   28a08:	add	r6, r7, #1
   28a0c:	add	r7, r7, r4
   28a10:	str	r6, [r1, #40]	; 0x28
   28a14:	ldrb	r4, [ip, r7]
   28a18:	b	28914 <__assert_fail@plt+0x16a4c>
   28a1c:	add	r6, ip, #1
   28a20:	str	r6, [r1, #40]	; 0x28
   28a24:	ldr	r7, [r1, #4]
   28a28:	ldrb	r4, [r7, ip]
   28a2c:	b	28914 <__assert_fail@plt+0x16a4c>
   28a30:	add	r0, r6, #1
   28a34:	str	r0, [r1, #40]	; 0x28
   28a38:	mov	r0, #0
   28a3c:	ldr	r1, [r9, #4]
   28a40:	strb	r0, [r1, r2]
   28a44:	ldrb	r1, [r5, #4]
   28a48:	cmp	r1, #30
   28a4c:	beq	28a68 <__assert_fail@plt+0x16ba0>
   28a50:	cmp	r1, #28
   28a54:	beq	28a70 <__assert_fail@plt+0x16ba8>
   28a58:	cmp	r1, #26
   28a5c:	bne	28ab8 <__assert_fail@plt+0x16bf0>
   28a60:	mov	r1, #3
   28a64:	b	28a74 <__assert_fail@plt+0x16bac>
   28a68:	mov	r1, #4
   28a6c:	b	28a74 <__assert_fail@plt+0x16bac>
   28a70:	mov	r1, #2
   28a74:	str	r1, [r9]
   28a78:	sub	sp, fp, #24
   28a7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28a80:	ldr	r0, [fp, #12]
   28a84:	cmp	r0, #0
   28a88:	bne	28aa8 <__assert_fail@plt+0x16be0>
   28a8c:	ldr	r2, [fp, #8]
   28a90:	mov	r0, sp
   28a94:	bl	2867c <__assert_fail@plt+0x167b4>
   28a98:	ldrb	r1, [sp, #4]
   28a9c:	mov	r0, #11
   28aa0:	cmp	r1, #21
   28aa4:	bne	28ab8 <__assert_fail@plt+0x16bf0>
   28aa8:	mov	r0, #0
   28aac:	str	r0, [r9]
   28ab0:	ldrb	r1, [r5]
   28ab4:	strb	r1, [r9, #4]
   28ab8:	sub	sp, fp, #24
   28abc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28ac0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28ac4:	add	fp, sp, #24
   28ac8:	mov	r8, r0
   28acc:	ldrb	r0, [fp, #14]
   28ad0:	ldr	r6, [fp, #8]
   28ad4:	mov	r5, r3
   28ad8:	mov	r7, r2
   28adc:	mov	r4, r1
   28ae0:	tst	r0, #64	; 0x40
   28ae4:	beq	28b20 <__assert_fail@plt+0x16c58>
   28ae8:	movw	r1, #32394	; 0x7e8a
   28aec:	mov	r0, r6
   28af0:	movt	r1, #3
   28af4:	bl	11a3c <strcmp@plt>
   28af8:	cmp	r0, #0
   28afc:	beq	28b18 <__assert_fail@plt+0x16c50>
   28b00:	movw	r1, #32400	; 0x7e90
   28b04:	mov	r0, r6
   28b08:	movt	r1, #3
   28b0c:	bl	11a3c <strcmp@plt>
   28b10:	cmp	r0, #0
   28b14:	bne	28b20 <__assert_fail@plt+0x16c58>
   28b18:	movw	r6, #32406	; 0x7e96
   28b1c:	movt	r6, #3
   28b20:	ldr	r0, [r5]
   28b24:	ldr	r1, [r7, #36]	; 0x24
   28b28:	cmp	r0, r1
   28b2c:	beq	29054 <__assert_fail@plt+0x1718c>
   28b30:	mov	r0, r6
   28b34:	bl	119f4 <wctype@plt>
   28b38:	ldr	r2, [r7, #36]	; 0x24
   28b3c:	ldr	r1, [r7, #12]
   28b40:	add	r3, r2, #1
   28b44:	str	r3, [r7, #36]	; 0x24
   28b48:	str	r0, [r1, r2, lsl #2]
   28b4c:	movw	r1, #32382	; 0x7e7e
   28b50:	mov	r0, r6
   28b54:	movt	r1, #3
   28b58:	bl	11a3c <strcmp@plt>
   28b5c:	cmp	r0, #0
   28b60:	beq	28c90 <__assert_fail@plt+0x16dc8>
   28b64:	movw	r1, #32412	; 0x7e9c
   28b68:	mov	r0, r6
   28b6c:	movt	r1, #3
   28b70:	bl	11a3c <strcmp@plt>
   28b74:	cmp	r0, #0
   28b78:	beq	28ce0 <__assert_fail@plt+0x16e18>
   28b7c:	movw	r1, #32400	; 0x7e90
   28b80:	mov	r0, r6
   28b84:	movt	r1, #3
   28b88:	bl	11a3c <strcmp@plt>
   28b8c:	cmp	r0, #0
   28b90:	beq	28d30 <__assert_fail@plt+0x16e68>
   28b94:	movw	r1, #32388	; 0x7e84
   28b98:	mov	r0, r6
   28b9c:	movt	r1, #3
   28ba0:	bl	11a3c <strcmp@plt>
   28ba4:	cmp	r0, #0
   28ba8:	beq	28d80 <__assert_fail@plt+0x16eb8>
   28bac:	movw	r1, #32406	; 0x7e96
   28bb0:	mov	r0, r6
   28bb4:	movt	r1, #3
   28bb8:	bl	11a3c <strcmp@plt>
   28bbc:	cmp	r0, #0
   28bc0:	beq	28e08 <__assert_fail@plt+0x16f40>
   28bc4:	movw	r1, #32443	; 0x7ebb
   28bc8:	mov	r0, r6
   28bcc:	movt	r1, #3
   28bd0:	bl	11a3c <strcmp@plt>
   28bd4:	cmp	r0, #0
   28bd8:	beq	28e58 <__assert_fail@plt+0x16f90>
   28bdc:	movw	r1, #32418	; 0x7ea2
   28be0:	mov	r0, r6
   28be4:	movt	r1, #3
   28be8:	bl	11a3c <strcmp@plt>
   28bec:	cmp	r0, #0
   28bf0:	beq	28eb0 <__assert_fail@plt+0x16fe8>
   28bf4:	movw	r1, #32394	; 0x7e8a
   28bf8:	mov	r0, r6
   28bfc:	movt	r1, #3
   28c00:	bl	11a3c <strcmp@plt>
   28c04:	cmp	r0, #0
   28c08:	beq	28f04 <__assert_fail@plt+0x1703c>
   28c0c:	movw	r1, #32424	; 0x7ea8
   28c10:	mov	r0, r6
   28c14:	movt	r1, #3
   28c18:	bl	11a3c <strcmp@plt>
   28c1c:	cmp	r0, #0
   28c20:	beq	28f58 <__assert_fail@plt+0x17090>
   28c24:	movw	r1, #32430	; 0x7eae
   28c28:	mov	r0, r6
   28c2c:	movt	r1, #3
   28c30:	bl	11a3c <strcmp@plt>
   28c34:	cmp	r0, #0
   28c38:	beq	28fac <__assert_fail@plt+0x170e4>
   28c3c:	movw	r1, #32436	; 0x7eb4
   28c40:	mov	r0, r6
   28c44:	movt	r1, #3
   28c48:	bl	11a3c <strcmp@plt>
   28c4c:	cmp	r0, #0
   28c50:	beq	29000 <__assert_fail@plt+0x17138>
   28c54:	movw	r1, #32442	; 0x7eba
   28c58:	mov	r0, r6
   28c5c:	movt	r1, #3
   28c60:	bl	11a3c <strcmp@plt>
   28c64:	mov	r1, r0
   28c68:	mov	r0, #4
   28c6c:	cmp	r1, #0
   28c70:	bne	29394 <__assert_fail@plt+0x174cc>
   28c74:	bl	11c7c <__ctype_b_loc@plt>
   28c78:	ldr	r1, [r0]
   28c7c:	mov	r2, #0
   28c80:	mov	r3, #1
   28c84:	cmp	r8, #0
   28c88:	beq	28de4 <__assert_fail@plt+0x16f1c>
   28c8c:	b	292dc <__assert_fail@plt+0x17414>
   28c90:	bl	11c7c <__ctype_b_loc@plt>
   28c94:	ldr	r1, [r0]
   28c98:	cmp	r8, #0
   28c9c:	bne	290f4 <__assert_fail@plt+0x1722c>
   28ca0:	mov	r0, #0
   28ca4:	mov	r2, #1
   28ca8:	b	28cbc <__assert_fail@plt+0x16df4>
   28cac:	add	r0, r0, #1
   28cb0:	add	r1, r1, #2
   28cb4:	cmp	r0, #256	; 0x100
   28cb8:	beq	28ea8 <__assert_fail@plt+0x16fe0>
   28cbc:	ldrb	r3, [r1]
   28cc0:	tst	r3, #8
   28cc4:	beq	28cac <__assert_fail@plt+0x16de4>
   28cc8:	ubfx	r3, r0, #5, #3
   28ccc:	and	r6, r0, #31
   28cd0:	ldr	r7, [r4, r3, lsl #2]
   28cd4:	orr	r7, r7, r2, lsl r6
   28cd8:	str	r7, [r4, r3, lsl #2]
   28cdc:	b	28cac <__assert_fail@plt+0x16de4>
   28ce0:	bl	11c7c <__ctype_b_loc@plt>
   28ce4:	ldr	r1, [r0]
   28ce8:	cmp	r8, #0
   28cec:	bne	29178 <__assert_fail@plt+0x172b0>
   28cf0:	mov	r0, #0
   28cf4:	mov	r2, #1
   28cf8:	b	28d0c <__assert_fail@plt+0x16e44>
   28cfc:	add	r0, r0, #1
   28d00:	add	r1, r1, #2
   28d04:	cmp	r0, #256	; 0x100
   28d08:	beq	28ea8 <__assert_fail@plt+0x16fe0>
   28d0c:	ldrb	r3, [r1]
   28d10:	tst	r3, #2
   28d14:	beq	28cfc <__assert_fail@plt+0x16e34>
   28d18:	ubfx	r3, r0, #5, #3
   28d1c:	and	r6, r0, #31
   28d20:	ldr	r7, [r4, r3, lsl #2]
   28d24:	orr	r7, r7, r2, lsl r6
   28d28:	str	r7, [r4, r3, lsl #2]
   28d2c:	b	28cfc <__assert_fail@plt+0x16e34>
   28d30:	bl	11c7c <__ctype_b_loc@plt>
   28d34:	ldr	r1, [r0]
   28d38:	cmp	r8, #0
   28d3c:	bne	291fc <__assert_fail@plt+0x17334>
   28d40:	mov	r0, #0
   28d44:	mov	r2, #1
   28d48:	b	28d5c <__assert_fail@plt+0x16e94>
   28d4c:	add	r0, r0, #1
   28d50:	add	r1, r1, #2
   28d54:	cmp	r0, #256	; 0x100
   28d58:	beq	28ea8 <__assert_fail@plt+0x16fe0>
   28d5c:	ldrb	r3, [r1, #1]
   28d60:	tst	r3, #2
   28d64:	beq	28d4c <__assert_fail@plt+0x16e84>
   28d68:	ubfx	r3, r0, #5, #3
   28d6c:	and	r6, r0, #31
   28d70:	ldr	r7, [r4, r3, lsl #2]
   28d74:	orr	r7, r7, r2, lsl r6
   28d78:	str	r7, [r4, r3, lsl #2]
   28d7c:	b	28d4c <__assert_fail@plt+0x16e84>
   28d80:	bl	11c7c <__ctype_b_loc@plt>
   28d84:	ldr	r1, [r0]
   28d88:	cmp	r8, #0
   28d8c:	bne	29280 <__assert_fail@plt+0x173b8>
   28d90:	mov	r0, #0
   28d94:	mov	r2, #1
   28d98:	b	28dac <__assert_fail@plt+0x16ee4>
   28d9c:	add	r0, r0, #1
   28da0:	add	r1, r1, #2
   28da4:	cmp	r0, #256	; 0x100
   28da8:	beq	28ea8 <__assert_fail@plt+0x16fe0>
   28dac:	ldrb	r3, [r1, #1]
   28db0:	tst	r3, #32
   28db4:	beq	28d9c <__assert_fail@plt+0x16ed4>
   28db8:	ubfx	r3, r0, #5, #3
   28dbc:	and	r6, r0, #31
   28dc0:	ldr	r7, [r4, r3, lsl #2]
   28dc4:	orr	r7, r7, r2, lsl r6
   28dc8:	str	r7, [r4, r3, lsl #2]
   28dcc:	b	28d9c <__assert_fail@plt+0x16ed4>
   28dd0:	add	r2, r2, #1
   28dd4:	add	r1, r1, #2
   28dd8:	mov	r0, #0
   28ddc:	cmp	r2, #256	; 0x100
   28de0:	beq	29394 <__assert_fail@plt+0x174cc>
   28de4:	ldrb	r0, [r1, #1]
   28de8:	tst	r0, #16
   28dec:	beq	28dd0 <__assert_fail@plt+0x16f08>
   28df0:	ubfx	r0, r2, #5, #3
   28df4:	and	r6, r2, #31
   28df8:	ldr	r7, [r4, r0, lsl #2]
   28dfc:	orr	r7, r7, r3, lsl r6
   28e00:	str	r7, [r4, r0, lsl #2]
   28e04:	b	28dd0 <__assert_fail@plt+0x16f08>
   28e08:	bl	11c7c <__ctype_b_loc@plt>
   28e0c:	ldr	r1, [r0]
   28e10:	cmp	r8, #0
   28e14:	bne	29304 <__assert_fail@plt+0x1743c>
   28e18:	mov	r0, #0
   28e1c:	mov	r2, #1
   28e20:	b	28e34 <__assert_fail@plt+0x16f6c>
   28e24:	add	r0, r0, #1
   28e28:	add	r1, r1, #2
   28e2c:	cmp	r0, #256	; 0x100
   28e30:	beq	28ea8 <__assert_fail@plt+0x16fe0>
   28e34:	ldrb	r3, [r1, #1]
   28e38:	tst	r3, #4
   28e3c:	beq	28e24 <__assert_fail@plt+0x16f5c>
   28e40:	ubfx	r3, r0, #5, #3
   28e44:	and	r6, r0, #31
   28e48:	ldr	r7, [r4, r3, lsl #2]
   28e4c:	orr	r7, r7, r2, lsl r6
   28e50:	str	r7, [r4, r3, lsl #2]
   28e54:	b	28e24 <__assert_fail@plt+0x16f5c>
   28e58:	bl	11c7c <__ctype_b_loc@plt>
   28e5c:	ldr	r1, [r0]
   28e60:	cmp	r8, #0
   28e64:	bne	2934c <__assert_fail@plt+0x17484>
   28e68:	mov	r0, #0
   28e6c:	mov	r2, #1
   28e70:	b	28e84 <__assert_fail@plt+0x16fbc>
   28e74:	add	r0, r0, #1
   28e78:	add	r1, r1, #2
   28e7c:	cmp	r0, #256	; 0x100
   28e80:	beq	28ea8 <__assert_fail@plt+0x16fe0>
   28e84:	ldrb	r3, [r1, #1]
   28e88:	tst	r3, #8
   28e8c:	beq	28e74 <__assert_fail@plt+0x16fac>
   28e90:	ubfx	r3, r0, #5, #3
   28e94:	and	r6, r0, #31
   28e98:	ldr	r7, [r4, r3, lsl #2]
   28e9c:	orr	r7, r7, r2, lsl r6
   28ea0:	str	r7, [r4, r3, lsl #2]
   28ea4:	b	28e74 <__assert_fail@plt+0x16fac>
   28ea8:	mov	r0, #0
   28eac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28eb0:	bl	11c7c <__ctype_b_loc@plt>
   28eb4:	ldr	r1, [r0]
   28eb8:	mov	r2, #0
   28ebc:	mov	r3, #1
   28ec0:	cmp	r8, #0
   28ec4:	beq	28ee0 <__assert_fail@plt+0x17018>
   28ec8:	b	29090 <__assert_fail@plt+0x171c8>
   28ecc:	add	r2, r2, #1
   28ed0:	add	r1, r1, #2
   28ed4:	mov	r0, #0
   28ed8:	cmp	r2, #256	; 0x100
   28edc:	beq	29394 <__assert_fail@plt+0x174cc>
   28ee0:	ldrb	r0, [r1, #1]
   28ee4:	tst	r0, #64	; 0x40
   28ee8:	beq	28ecc <__assert_fail@plt+0x17004>
   28eec:	ubfx	r0, r2, #5, #3
   28ef0:	and	r6, r2, #31
   28ef4:	ldr	r7, [r4, r0, lsl #2]
   28ef8:	orr	r7, r7, r3, lsl r6
   28efc:	str	r7, [r4, r0, lsl #2]
   28f00:	b	28ecc <__assert_fail@plt+0x17004>
   28f04:	bl	11c7c <__ctype_b_loc@plt>
   28f08:	ldr	r1, [r0]
   28f0c:	mov	r2, #0
   28f10:	mov	r3, #1
   28f14:	cmp	r8, #0
   28f18:	beq	28f34 <__assert_fail@plt+0x1706c>
   28f1c:	b	290cc <__assert_fail@plt+0x17204>
   28f20:	add	r2, r2, #1
   28f24:	add	r1, r1, #2
   28f28:	mov	r0, #0
   28f2c:	cmp	r2, #256	; 0x100
   28f30:	beq	29394 <__assert_fail@plt+0x174cc>
   28f34:	ldrb	r0, [r1, #1]
   28f38:	tst	r0, #1
   28f3c:	beq	28f20 <__assert_fail@plt+0x17058>
   28f40:	ubfx	r0, r2, #5, #3
   28f44:	and	r6, r2, #31
   28f48:	ldr	r7, [r4, r0, lsl #2]
   28f4c:	orr	r7, r7, r3, lsl r6
   28f50:	str	r7, [r4, r0, lsl #2]
   28f54:	b	28f20 <__assert_fail@plt+0x17058>
   28f58:	bl	11c7c <__ctype_b_loc@plt>
   28f5c:	ldr	r1, [r0]
   28f60:	mov	r2, #0
   28f64:	mov	r3, #1
   28f68:	cmp	r8, #0
   28f6c:	beq	28f88 <__assert_fail@plt+0x170c0>
   28f70:	b	29150 <__assert_fail@plt+0x17288>
   28f74:	add	r2, r2, #1
   28f78:	add	r1, r1, #2
   28f7c:	mov	r0, #0
   28f80:	cmp	r2, #256	; 0x100
   28f84:	beq	29394 <__assert_fail@plt+0x174cc>
   28f88:	ldrb	r0, [r1]
   28f8c:	tst	r0, #1
   28f90:	beq	28f74 <__assert_fail@plt+0x170ac>
   28f94:	ubfx	r0, r2, #5, #3
   28f98:	and	r6, r2, #31
   28f9c:	ldr	r7, [r4, r0, lsl #2]
   28fa0:	orr	r7, r7, r3, lsl r6
   28fa4:	str	r7, [r4, r0, lsl #2]
   28fa8:	b	28f74 <__assert_fail@plt+0x170ac>
   28fac:	bl	11c7c <__ctype_b_loc@plt>
   28fb0:	ldr	r1, [r0]
   28fb4:	mov	r2, #0
   28fb8:	mov	r3, #1
   28fbc:	cmp	r8, #0
   28fc0:	beq	28fdc <__assert_fail@plt+0x17114>
   28fc4:	b	291d4 <__assert_fail@plt+0x1730c>
   28fc8:	add	r2, r2, #1
   28fcc:	add	r1, r1, #2
   28fd0:	mov	r0, #0
   28fd4:	cmp	r2, #256	; 0x100
   28fd8:	beq	29394 <__assert_fail@plt+0x174cc>
   28fdc:	ldrsh	r0, [r1]
   28fe0:	cmn	r0, #1
   28fe4:	bgt	28fc8 <__assert_fail@plt+0x17100>
   28fe8:	ubfx	r0, r2, #5, #3
   28fec:	and	r6, r2, #31
   28ff0:	ldr	r7, [r4, r0, lsl #2]
   28ff4:	orr	r7, r7, r3, lsl r6
   28ff8:	str	r7, [r4, r0, lsl #2]
   28ffc:	b	28fc8 <__assert_fail@plt+0x17100>
   29000:	bl	11c7c <__ctype_b_loc@plt>
   29004:	ldr	r1, [r0]
   29008:	mov	r2, #0
   2900c:	mov	r3, #1
   29010:	cmp	r8, #0
   29014:	beq	29030 <__assert_fail@plt+0x17168>
   29018:	b	29258 <__assert_fail@plt+0x17390>
   2901c:	add	r2, r2, #1
   29020:	add	r1, r1, #2
   29024:	mov	r0, #0
   29028:	cmp	r2, #256	; 0x100
   2902c:	beq	29394 <__assert_fail@plt+0x174cc>
   29030:	ldrb	r0, [r1]
   29034:	tst	r0, #4
   29038:	beq	2901c <__assert_fail@plt+0x17154>
   2903c:	ubfx	r0, r2, #5, #3
   29040:	and	r6, r2, #31
   29044:	ldr	r7, [r4, r0, lsl #2]
   29048:	orr	r7, r7, r3, lsl r6
   2904c:	str	r7, [r4, r0, lsl #2]
   29050:	b	2901c <__assert_fail@plt+0x17154>
   29054:	mov	r1, #1
   29058:	orr	r9, r1, r0, lsl #1
   2905c:	ldr	r0, [r7, #12]
   29060:	lsl	r1, r9, #2
   29064:	bl	34840 <__assert_fail@plt+0x22978>
   29068:	cmp	r0, #0
   2906c:	beq	29398 <__assert_fail@plt+0x174d0>
   29070:	str	r0, [r7, #12]
   29074:	str	r9, [r5]
   29078:	b	28b30 <__assert_fail@plt+0x16c68>
   2907c:	add	r2, r2, #1
   29080:	add	r1, r1, #2
   29084:	mov	r0, #0
   29088:	cmp	r2, #256	; 0x100
   2908c:	beq	29394 <__assert_fail@plt+0x174cc>
   29090:	ldrb	r0, [r1, #1]
   29094:	tst	r0, #64	; 0x40
   29098:	beq	2907c <__assert_fail@plt+0x171b4>
   2909c:	ldrb	r0, [r8, r2]
   290a0:	ubfx	r7, r0, #5, #3
   290a4:	and	r0, r0, #31
   290a8:	ldr	r6, [r4, r7, lsl #2]
   290ac:	orr	r0, r6, r3, lsl r0
   290b0:	str	r0, [r4, r7, lsl #2]
   290b4:	b	2907c <__assert_fail@plt+0x171b4>
   290b8:	add	r2, r2, #1
   290bc:	add	r1, r1, #2
   290c0:	mov	r0, #0
   290c4:	cmp	r2, #256	; 0x100
   290c8:	beq	29394 <__assert_fail@plt+0x174cc>
   290cc:	ldrb	r0, [r1, #1]
   290d0:	tst	r0, #1
   290d4:	beq	290b8 <__assert_fail@plt+0x171f0>
   290d8:	ldrb	r0, [r8, r2]
   290dc:	ubfx	r7, r0, #5, #3
   290e0:	and	r0, r0, #31
   290e4:	ldr	r6, [r4, r7, lsl #2]
   290e8:	orr	r0, r6, r3, lsl r0
   290ec:	str	r0, [r4, r7, lsl #2]
   290f0:	b	290b8 <__assert_fail@plt+0x171f0>
   290f4:	mov	r2, #0
   290f8:	mov	r3, #1
   290fc:	b	29114 <__assert_fail@plt+0x1724c>
   29100:	add	r2, r2, #1
   29104:	add	r1, r1, #2
   29108:	mov	r0, #0
   2910c:	cmp	r2, #256	; 0x100
   29110:	beq	29394 <__assert_fail@plt+0x174cc>
   29114:	ldrb	r0, [r1]
   29118:	tst	r0, #8
   2911c:	beq	29100 <__assert_fail@plt+0x17238>
   29120:	ldrb	r0, [r8, r2]
   29124:	ubfx	r7, r0, #5, #3
   29128:	and	r0, r0, #31
   2912c:	ldr	r6, [r4, r7, lsl #2]
   29130:	orr	r0, r6, r3, lsl r0
   29134:	str	r0, [r4, r7, lsl #2]
   29138:	b	29100 <__assert_fail@plt+0x17238>
   2913c:	add	r2, r2, #1
   29140:	add	r1, r1, #2
   29144:	mov	r0, #0
   29148:	cmp	r2, #256	; 0x100
   2914c:	beq	29394 <__assert_fail@plt+0x174cc>
   29150:	ldrb	r0, [r1]
   29154:	tst	r0, #1
   29158:	beq	2913c <__assert_fail@plt+0x17274>
   2915c:	ldrb	r0, [r8, r2]
   29160:	ubfx	r7, r0, #5, #3
   29164:	and	r0, r0, #31
   29168:	ldr	r6, [r4, r7, lsl #2]
   2916c:	orr	r0, r6, r3, lsl r0
   29170:	str	r0, [r4, r7, lsl #2]
   29174:	b	2913c <__assert_fail@plt+0x17274>
   29178:	mov	r2, #0
   2917c:	mov	r3, #1
   29180:	b	29198 <__assert_fail@plt+0x172d0>
   29184:	add	r2, r2, #1
   29188:	add	r1, r1, #2
   2918c:	mov	r0, #0
   29190:	cmp	r2, #256	; 0x100
   29194:	beq	29394 <__assert_fail@plt+0x174cc>
   29198:	ldrb	r0, [r1]
   2919c:	tst	r0, #2
   291a0:	beq	29184 <__assert_fail@plt+0x172bc>
   291a4:	ldrb	r0, [r8, r2]
   291a8:	ubfx	r7, r0, #5, #3
   291ac:	and	r0, r0, #31
   291b0:	ldr	r6, [r4, r7, lsl #2]
   291b4:	orr	r0, r6, r3, lsl r0
   291b8:	str	r0, [r4, r7, lsl #2]
   291bc:	b	29184 <__assert_fail@plt+0x172bc>
   291c0:	add	r2, r2, #1
   291c4:	add	r1, r1, #2
   291c8:	mov	r0, #0
   291cc:	cmp	r2, #256	; 0x100
   291d0:	beq	29394 <__assert_fail@plt+0x174cc>
   291d4:	ldrsh	r0, [r1]
   291d8:	cmn	r0, #1
   291dc:	bgt	291c0 <__assert_fail@plt+0x172f8>
   291e0:	ldrb	r0, [r8, r2]
   291e4:	ubfx	r7, r0, #5, #3
   291e8:	and	r0, r0, #31
   291ec:	ldr	r6, [r4, r7, lsl #2]
   291f0:	orr	r0, r6, r3, lsl r0
   291f4:	str	r0, [r4, r7, lsl #2]
   291f8:	b	291c0 <__assert_fail@plt+0x172f8>
   291fc:	mov	r2, #0
   29200:	mov	r3, #1
   29204:	b	2921c <__assert_fail@plt+0x17354>
   29208:	add	r2, r2, #1
   2920c:	add	r1, r1, #2
   29210:	mov	r0, #0
   29214:	cmp	r2, #256	; 0x100
   29218:	beq	29394 <__assert_fail@plt+0x174cc>
   2921c:	ldrb	r0, [r1, #1]
   29220:	tst	r0, #2
   29224:	beq	29208 <__assert_fail@plt+0x17340>
   29228:	ldrb	r0, [r8, r2]
   2922c:	ubfx	r7, r0, #5, #3
   29230:	and	r0, r0, #31
   29234:	ldr	r6, [r4, r7, lsl #2]
   29238:	orr	r0, r6, r3, lsl r0
   2923c:	str	r0, [r4, r7, lsl #2]
   29240:	b	29208 <__assert_fail@plt+0x17340>
   29244:	add	r2, r2, #1
   29248:	add	r1, r1, #2
   2924c:	mov	r0, #0
   29250:	cmp	r2, #256	; 0x100
   29254:	beq	29394 <__assert_fail@plt+0x174cc>
   29258:	ldrb	r0, [r1]
   2925c:	tst	r0, #4
   29260:	beq	29244 <__assert_fail@plt+0x1737c>
   29264:	ldrb	r0, [r8, r2]
   29268:	ubfx	r7, r0, #5, #3
   2926c:	and	r0, r0, #31
   29270:	ldr	r6, [r4, r7, lsl #2]
   29274:	orr	r0, r6, r3, lsl r0
   29278:	str	r0, [r4, r7, lsl #2]
   2927c:	b	29244 <__assert_fail@plt+0x1737c>
   29280:	mov	r2, #0
   29284:	mov	r3, #1
   29288:	b	292a0 <__assert_fail@plt+0x173d8>
   2928c:	add	r2, r2, #1
   29290:	add	r1, r1, #2
   29294:	mov	r0, #0
   29298:	cmp	r2, #256	; 0x100
   2929c:	beq	29394 <__assert_fail@plt+0x174cc>
   292a0:	ldrb	r0, [r1, #1]
   292a4:	tst	r0, #32
   292a8:	beq	2928c <__assert_fail@plt+0x173c4>
   292ac:	ldrb	r0, [r8, r2]
   292b0:	ubfx	r7, r0, #5, #3
   292b4:	and	r0, r0, #31
   292b8:	ldr	r6, [r4, r7, lsl #2]
   292bc:	orr	r0, r6, r3, lsl r0
   292c0:	str	r0, [r4, r7, lsl #2]
   292c4:	b	2928c <__assert_fail@plt+0x173c4>
   292c8:	add	r2, r2, #1
   292cc:	add	r1, r1, #2
   292d0:	mov	r0, #0
   292d4:	cmp	r2, #256	; 0x100
   292d8:	beq	29394 <__assert_fail@plt+0x174cc>
   292dc:	ldrb	r0, [r1, #1]
   292e0:	tst	r0, #16
   292e4:	beq	292c8 <__assert_fail@plt+0x17400>
   292e8:	ldrb	r0, [r8, r2]
   292ec:	ubfx	r7, r0, #5, #3
   292f0:	and	r0, r0, #31
   292f4:	ldr	r6, [r4, r7, lsl #2]
   292f8:	orr	r0, r6, r3, lsl r0
   292fc:	str	r0, [r4, r7, lsl #2]
   29300:	b	292c8 <__assert_fail@plt+0x17400>
   29304:	mov	r2, #0
   29308:	mov	r3, #1
   2930c:	b	29324 <__assert_fail@plt+0x1745c>
   29310:	add	r2, r2, #1
   29314:	add	r1, r1, #2
   29318:	mov	r0, #0
   2931c:	cmp	r2, #256	; 0x100
   29320:	beq	29394 <__assert_fail@plt+0x174cc>
   29324:	ldrb	r0, [r1, #1]
   29328:	tst	r0, #4
   2932c:	beq	29310 <__assert_fail@plt+0x17448>
   29330:	ldrb	r0, [r8, r2]
   29334:	ubfx	r7, r0, #5, #3
   29338:	and	r0, r0, #31
   2933c:	ldr	r6, [r4, r7, lsl #2]
   29340:	orr	r0, r6, r3, lsl r0
   29344:	str	r0, [r4, r7, lsl #2]
   29348:	b	29310 <__assert_fail@plt+0x17448>
   2934c:	mov	r2, #0
   29350:	mov	r3, #1
   29354:	b	2936c <__assert_fail@plt+0x174a4>
   29358:	add	r2, r2, #1
   2935c:	add	r1, r1, #2
   29360:	mov	r0, #0
   29364:	cmp	r2, #256	; 0x100
   29368:	beq	29394 <__assert_fail@plt+0x174cc>
   2936c:	ldrb	r0, [r1, #1]
   29370:	tst	r0, #8
   29374:	beq	29358 <__assert_fail@plt+0x17490>
   29378:	ldrb	r0, [r8, r2]
   2937c:	ubfx	r7, r0, #5, #3
   29380:	and	r0, r0, #31
   29384:	ldr	r6, [r4, r7, lsl #2]
   29388:	orr	r0, r6, r3, lsl r0
   2938c:	str	r0, [r4, r7, lsl #2]
   29390:	b	29358 <__assert_fail@plt+0x17490>
   29394:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29398:	mov	r0, #12
   2939c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   293a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   293a4:	add	fp, sp, #24
   293a8:	ldr	r3, [r1, #24]
   293ac:	mvn	r7, #1
   293b0:	ldr	r2, [r1, #28]
   293b4:	mov	r4, #0
   293b8:	uxtab	r3, r7, r3
   293bc:	cmp	r3, #14
   293c0:	bhi	294e4 <__assert_fail@plt+0x1761c>
   293c4:	add	r7, pc, #0
   293c8:	ldr	pc, [r7, r3, lsl #2]
   293cc:	andeq	r9, r2, r8, lsl r5
   293d0:	andeq	r9, r2, r4, ror #9
   293d4:	strdeq	r9, [r2], -ip
   293d8:	andeq	r9, r2, r4, ror #9
   293dc:	andeq	r9, r2, r4, ror #9
   293e0:	andeq	r9, r2, r4, ror #9
   293e4:	andeq	r9, r2, r8, lsl #8
   293e8:	andeq	r9, r2, r8, lsl #8
   293ec:	andeq	r9, r2, ip, asr r4
   293f0:	andeq	r9, r2, ip, asr r4
   293f4:	andeq	r9, r2, r8, lsl #8
   293f8:	andeq	r9, r2, r4, ror #9
   293fc:	andeq	r9, r2, r4, ror #9
   29400:	andeq	r9, r2, r4, ror #9
   29404:	andeq	r9, r2, r8, lsl r5
   29408:	ldr	r1, [r1, #16]
   2940c:	ldr	r5, [r1, #28]
   29410:	ldr	r6, [r0, #20]
   29414:	add	r0, r2, r2, lsl #1
   29418:	mov	r1, #1
   2941c:	str	r1, [r6, r0, lsl #2]!
   29420:	mov	r0, #4
   29424:	mov	r7, r6
   29428:	str	r1, [r7, #4]!
   2942c:	bl	34810 <__assert_fail@plt+0x22948>
   29430:	cmp	r0, #0
   29434:	str	r0, [r6, #8]
   29438:	strne	r5, [r0]
   2943c:	movne	r0, r4
   29440:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   29444:	mov	r0, #0
   29448:	str	r0, [r7]
   2944c:	str	r0, [r6]
   29450:	mov	r4, #12
   29454:	mov	r0, r4
   29458:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2945c:	ldrb	r3, [r0, #88]	; 0x58
   29460:	add	r6, r1, #16
   29464:	add	r5, r2, r2, lsl #1
   29468:	orr	r3, r3, #1
   2946c:	strb	r3, [r0, #88]	; 0x58
   29470:	mov	r3, r6
   29474:	ldr	r7, [r1, #4]
   29478:	ldr	r1, [r1, #8]
   2947c:	cmp	r1, #0
   29480:	addne	r3, r1, #12
   29484:	cmp	r7, #0
   29488:	ldr	r1, [r3]
   2948c:	addne	r6, r7, #12
   29490:	ldr	r8, [r1, #28]
   29494:	ldr	r1, [r6]
   29498:	ldr	r6, [r0, #20]
   2949c:	mov	r0, #2
   294a0:	ldr	r9, [r1, #28]
   294a4:	mov	r7, r6
   294a8:	str	r0, [r7, r5, lsl #2]!
   294ac:	mov	r0, #8
   294b0:	bl	34810 <__assert_fail@plt+0x22948>
   294b4:	cmp	r0, #0
   294b8:	str	r0, [r7, #8]
   294bc:	beq	29450 <__assert_fail@plt+0x17588>
   294c0:	add	r1, r6, r5, lsl #2
   294c4:	cmp	r9, r8
   294c8:	add	r1, r1, #4
   294cc:	bne	29520 <__assert_fail@plt+0x17658>
   294d0:	mov	r2, #1
   294d4:	str	r2, [r1]
   294d8:	str	r9, [r0]
   294dc:	mov	r0, r4
   294e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   294e4:	ldr	r1, [r1, #16]
   294e8:	ldr	r0, [r0, #12]
   294ec:	ldr	r1, [r1, #28]
   294f0:	str	r1, [r0, r2, lsl #2]
   294f4:	mov	r0, r4
   294f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   294fc:	ldr	r7, [r1, #16]
   29500:	ldr	r3, [r0, #12]
   29504:	ldr	r5, [r7, #28]
   29508:	str	r5, [r3, r2, lsl #2]
   2950c:	ldrb	r1, [r1, #24]
   29510:	cmp	r1, #4
   29514:	beq	29410 <__assert_fail@plt+0x17548>
   29518:	mov	r0, r4
   2951c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29520:	mov	r2, #2
   29524:	str	r2, [r1]
   29528:	stmcs	r0, {r8, r9}
   2952c:	strcc	r9, [r0]
   29530:	strcc	r8, [r0, #4]
   29534:	mov	r0, r4
   29538:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2953c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29540:	add	fp, sp, #28
   29544:	sub	sp, sp, #4
   29548:	ldr	r6, [r2, #4]
   2954c:	mov	r8, r0
   29550:	ldr	r5, [r1]
   29554:	mov	r9, r2
   29558:	cmp	r6, #0
   2955c:	ldrbne	r0, [r1, #28]
   29560:	andsne	r0, r0, #16
   29564:	bne	29708 <__assert_fail@plt+0x17840>
   29568:	ldr	r1, [r5, #64]	; 0x40
   2956c:	cmp	r1, #31
   29570:	beq	29730 <__assert_fail@plt+0x17868>
   29574:	ldr	r0, [r5, #56]	; 0x38
   29578:	add	r0, r0, r1, lsl #5
   2957c:	add	r2, r1, #1
   29580:	vmov.i32	q8, #0	; 0x00000000
   29584:	mov	r1, #0
   29588:	str	r2, [r5, #64]	; 0x40
   2958c:	mov	r2, #8
   29590:	add	sl, r0, #4
   29594:	str	r1, [r0, #20]
   29598:	str	r1, [r0, #24]
   2959c:	str	r2, [r0, #28]
   295a0:	mov	r0, #28
   295a4:	mov	r1, sl
   295a8:	vst1.32	{d16-d17}, [r1], r0
   295ac:	mvn	r0, #0
   295b0:	str	r0, [r1]
   295b4:	ldr	r1, [r5, #64]	; 0x40
   295b8:	cmp	r1, #31
   295bc:	beq	29758 <__assert_fail@plt+0x17890>
   295c0:	ldr	r0, [r5, #56]	; 0x38
   295c4:	add	r0, r0, r1, lsl #5
   295c8:	add	r2, r1, #1
   295cc:	vmov.i32	q8, #0	; 0x00000000
   295d0:	mov	r1, #0
   295d4:	str	r2, [r5, #64]	; 0x40
   295d8:	mov	r2, #9
   295dc:	add	r7, r0, #4
   295e0:	str	r1, [r0, #20]
   295e4:	str	r1, [r0, #24]
   295e8:	str	r2, [r0, #28]
   295ec:	mov	r0, #28
   295f0:	mov	r1, r7
   295f4:	vst1.32	{d16-d17}, [r1], r0
   295f8:	mvn	r0, #0
   295fc:	str	r0, [r1]
   29600:	cmp	r6, #0
   29604:	mov	r4, r7
   29608:	beq	29658 <__assert_fail@plt+0x17790>
   2960c:	ldr	r1, [r5, #64]	; 0x40
   29610:	cmp	r1, #31
   29614:	beq	297a8 <__assert_fail@plt+0x178e0>
   29618:	ldr	r0, [r5, #56]	; 0x38
   2961c:	add	r4, r0, r1, lsl #5
   29620:	add	r2, r1, #1
   29624:	mov	r0, #0
   29628:	cmp	r7, #0
   2962c:	mov	r1, #16
   29630:	str	r2, [r5, #64]	; 0x40
   29634:	mvn	r2, #0
   29638:	str	r0, [r4, #4]!
   2963c:	add	r3, r4, #20
   29640:	stmib	r4, {r6, r7}
   29644:	str	r0, [r4, #12]
   29648:	str	r0, [r4, #16]
   2964c:	stm	r3, {r0, r1, r2}
   29650:	str	r4, [r6]
   29654:	strne	r4, [r7]
   29658:	ldr	r1, [r5, #64]	; 0x40
   2965c:	cmp	r1, #31
   29660:	beq	29780 <__assert_fail@plt+0x178b8>
   29664:	ldr	r0, [r5, #56]	; 0x38
   29668:	add	r6, r0, r1, lsl #5
   2966c:	add	r2, r1, #1
   29670:	mov	r0, #0
   29674:	cmp	sl, #0
   29678:	mov	r1, #16
   2967c:	str	r2, [r5, #64]	; 0x40
   29680:	mvn	r2, #0
   29684:	str	r0, [r6, #4]!
   29688:	add	r3, r6, #20
   2968c:	str	sl, [r6, #4]
   29690:	str	r4, [r6, #8]
   29694:	str	r0, [r6, #12]
   29698:	str	r0, [r6, #16]
   2969c:	stm	r3, {r0, r1, r2}
   296a0:	strne	r6, [sl]
   296a4:	cmp	r4, #0
   296a8:	strne	r6, [r4]
   296ac:	cmp	r7, #0
   296b0:	beq	296c0 <__assert_fail@plt+0x177f8>
   296b4:	cmp	sl, #0
   296b8:	cmpne	r4, #0
   296bc:	bne	296d0 <__assert_fail@plt+0x17808>
   296c0:	mov	r0, #12
   296c4:	mov	r6, #0
   296c8:	str	r0, [r8]
   296cc:	b	29724 <__assert_fail@plt+0x1785c>
   296d0:	cmp	r6, #0
   296d4:	beq	296c0 <__assert_fail@plt+0x177f8>
   296d8:	ldr	r0, [r9, #20]
   296dc:	str	r0, [r7, #20]
   296e0:	str	r0, [sl, #20]
   296e4:	ldr	r1, [r9, #24]
   296e8:	ldr	r0, [r7, #24]
   296ec:	lsr	r1, r1, #19
   296f0:	bfi	r0, r1, #19, #1
   296f4:	str	r0, [r7, #24]
   296f8:	ldr	r0, [sl, #24]
   296fc:	bfi	r0, r1, #19, #1
   29700:	str	r0, [sl, #24]
   29704:	b	29724 <__assert_fail@plt+0x1785c>
   29708:	ldr	r0, [r9, #20]
   2970c:	cmp	r0, #31
   29710:	bgt	29724 <__assert_fail@plt+0x1785c>
   29714:	ldr	r1, [r5, #80]	; 0x50
   29718:	mov	r2, #1
   2971c:	tst	r1, r2, lsl r0
   29720:	bne	29568 <__assert_fail@plt+0x176a0>
   29724:	mov	r0, r6
   29728:	sub	sp, fp, #28
   2972c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29730:	mov	r0, #996	; 0x3e4
   29734:	bl	34810 <__assert_fail@plt+0x22948>
   29738:	cmp	r0, #0
   2973c:	beq	297d0 <__assert_fail@plt+0x17908>
   29740:	ldr	r1, [r5, #56]	; 0x38
   29744:	str	r1, [r0]
   29748:	mov	r1, #0
   2974c:	str	r1, [r5, #64]	; 0x40
   29750:	str	r0, [r5, #56]	; 0x38
   29754:	b	29578 <__assert_fail@plt+0x176b0>
   29758:	mov	r0, #996	; 0x3e4
   2975c:	bl	34810 <__assert_fail@plt+0x22948>
   29760:	cmp	r0, #0
   29764:	beq	297d8 <__assert_fail@plt+0x17910>
   29768:	ldr	r1, [r5, #56]	; 0x38
   2976c:	str	r1, [r0]
   29770:	mov	r1, #0
   29774:	str	r1, [r5, #64]	; 0x40
   29778:	str	r0, [r5, #56]	; 0x38
   2977c:	b	295c4 <__assert_fail@plt+0x176fc>
   29780:	mov	r0, #996	; 0x3e4
   29784:	bl	34810 <__assert_fail@plt+0x22948>
   29788:	cmp	r0, #0
   2978c:	beq	297e0 <__assert_fail@plt+0x17918>
   29790:	ldr	r1, [r5, #56]	; 0x38
   29794:	str	r1, [r0]
   29798:	mov	r1, #0
   2979c:	str	r1, [r5, #64]	; 0x40
   297a0:	str	r0, [r5, #56]	; 0x38
   297a4:	b	29668 <__assert_fail@plt+0x177a0>
   297a8:	mov	r0, #996	; 0x3e4
   297ac:	bl	34810 <__assert_fail@plt+0x22948>
   297b0:	cmp	r0, #0
   297b4:	beq	297f0 <__assert_fail@plt+0x17928>
   297b8:	ldr	r1, [r5, #56]	; 0x38
   297bc:	str	r1, [r0]
   297c0:	mov	r1, #0
   297c4:	str	r1, [r5, #64]	; 0x40
   297c8:	str	r0, [r5, #56]	; 0x38
   297cc:	b	2961c <__assert_fail@plt+0x17754>
   297d0:	mov	sl, #0
   297d4:	b	295b4 <__assert_fail@plt+0x176ec>
   297d8:	mov	r7, #0
   297dc:	b	29600 <__assert_fail@plt+0x17738>
   297e0:	mov	r6, #0
   297e4:	cmp	r7, #0
   297e8:	bne	296b4 <__assert_fail@plt+0x177ec>
   297ec:	b	296c0 <__assert_fail@plt+0x177f8>
   297f0:	mov	r4, #0
   297f4:	b	29658 <__assert_fail@plt+0x17790>
   297f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297fc:	add	fp, sp, #28
   29800:	sub	sp, sp, #12
   29804:	mov	r4, r0
   29808:	ldr	r7, [r0, #4]
   2980c:	ldr	r0, [r0, #8]
   29810:	mov	r5, r2
   29814:	mov	r9, r1
   29818:	cmp	r0, r7
   2981c:	bcs	298e8 <__assert_fail@plt+0x17a20>
   29820:	ldr	r1, [r4]
   29824:	str	r9, [r1, r0, lsl #3]!
   29828:	str	r5, [r1, #4]
   2982c:	ldr	r0, [r4]
   29830:	ldr	r1, [r4, #8]
   29834:	add	r0, r0, r1, lsl #3
   29838:	ldr	r1, [r0, #4]
   2983c:	bfc	r1, #8, #10
   29840:	str	r1, [r0, #4]
   29844:	uxtb	r1, r5
   29848:	cmp	r1, #5
   2984c:	bne	29860 <__assert_fail@plt+0x17998>
   29850:	ldr	r2, [r4, #92]	; 0x5c
   29854:	mov	r0, #1048576	; 0x100000
   29858:	cmp	r2, #1
   2985c:	bgt	29870 <__assert_fail@plt+0x179a8>
   29860:	sub	r0, r1, #6
   29864:	clz	r0, r0
   29868:	lsr	r0, r0, #5
   2986c:	lsl	r0, r0, #20
   29870:	ldr	r1, [r4]
   29874:	ldr	r2, [r4, #8]
   29878:	add	r1, r1, r2, lsl #3
   2987c:	ldr	r2, [r1, #4]
   29880:	bic	r2, r2, #1048576	; 0x100000
   29884:	orr	r0, r2, r0
   29888:	mvn	r2, #0
   2988c:	str	r0, [r1, #4]
   29890:	ldr	r0, [r4, #8]
   29894:	ldr	r1, [r4, #12]
   29898:	str	r2, [r1, r0, lsl #2]
   2989c:	mov	r2, #0
   298a0:	ldr	r0, [r4, #8]
   298a4:	ldr	r1, [r4, #20]
   298a8:	add	r0, r0, r0, lsl #1
   298ac:	str	r2, [r1, r0, lsl #2]!
   298b0:	str	r2, [r1, #4]
   298b4:	str	r2, [r1, #8]
   298b8:	ldr	r0, [r4, #8]
   298bc:	ldr	r1, [r4, #24]
   298c0:	add	r0, r0, r0, lsl #1
   298c4:	str	r2, [r1, r0, lsl #2]!
   298c8:	str	r2, [r1, #4]
   298cc:	str	r2, [r1, #8]
   298d0:	ldr	r6, [r4, #8]
   298d4:	add	r0, r6, #1
   298d8:	str	r0, [r4, #8]
   298dc:	mov	r0, r6
   298e0:	sub	sp, fp, #28
   298e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298e8:	movw	r0, #21845	; 0x5555
   298ec:	lsl	r1, r7, #1
   298f0:	mvn	r6, #0
   298f4:	movt	r0, #5461	; 0x1555
   298f8:	cmp	r1, r0
   298fc:	bhi	298dc <__assert_fail@plt+0x17a14>
   29900:	ldr	r0, [r4]
   29904:	str	r1, [sp, #8]
   29908:	lsl	r1, r7, #4
   2990c:	bl	34840 <__assert_fail@plt+0x22978>
   29910:	cmp	r0, #0
   29914:	beq	298dc <__assert_fail@plt+0x17a14>
   29918:	str	r0, [r4]
   2991c:	lsl	r8, r7, #3
   29920:	ldr	r0, [r4, #12]
   29924:	mov	r1, r8
   29928:	bl	34840 <__assert_fail@plt+0x22978>
   2992c:	str	r0, [sp, #4]
   29930:	ldr	r0, [r4, #16]
   29934:	mov	r1, r8
   29938:	bl	34840 <__assert_fail@plt+0x22978>
   2993c:	mov	r2, r0
   29940:	add	r1, r7, r7, lsl #1
   29944:	ldr	r0, [r4, #20]
   29948:	mov	r7, r2
   2994c:	lsl	r8, r1, #3
   29950:	mov	r1, r8
   29954:	bl	34840 <__assert_fail@plt+0x22978>
   29958:	mov	sl, r0
   2995c:	ldr	r0, [r4, #24]
   29960:	mov	r1, r8
   29964:	bl	34840 <__assert_fail@plt+0x22978>
   29968:	mov	r8, r0
   2996c:	ldr	r0, [sp, #4]
   29970:	cmp	r0, #0
   29974:	beq	29984 <__assert_fail@plt+0x17abc>
   29978:	cmp	r7, #0
   2997c:	cmpne	sl, #0
   29980:	bne	299a4 <__assert_fail@plt+0x17adc>
   29984:	bl	176c0 <__assert_fail@plt+0x57f8>
   29988:	mov	r0, r7
   2998c:	bl	176c0 <__assert_fail@plt+0x57f8>
   29990:	mov	r0, sl
   29994:	bl	176c0 <__assert_fail@plt+0x57f8>
   29998:	mov	r0, r8
   2999c:	bl	176c0 <__assert_fail@plt+0x57f8>
   299a0:	b	298dc <__assert_fail@plt+0x17a14>
   299a4:	cmp	r8, #0
   299a8:	beq	29984 <__assert_fail@plt+0x17abc>
   299ac:	add	r1, r4, #12
   299b0:	stm	r1, {r0, r7, sl}
   299b4:	str	r8, [r4, #24]
   299b8:	ldr	r0, [sp, #8]
   299bc:	str	r0, [r4, #4]
   299c0:	ldr	r0, [r4, #8]
   299c4:	b	29820 <__assert_fail@plt+0x17958>
   299c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299cc:	add	fp, sp, #28
   299d0:	sub	sp, sp, #44	; 0x2c
   299d4:	mov	r8, r0
   299d8:	ldr	r0, [r1, #20]
   299dc:	add	r4, r2, r2, lsl #1
   299e0:	mov	r5, r1
   299e4:	mov	r1, #0
   299e8:	mov	r9, r3
   299ec:	mov	r6, r2
   299f0:	add	r0, r0, r4, lsl #2
   299f4:	ldr	r0, [r0, #4]
   299f8:	str	r1, [sp, #36]	; 0x24
   299fc:	add	r0, r0, #1
   29a00:	str	r0, [sp, #32]
   29a04:	lsl	r0, r0, #2
   29a08:	bl	34810 <__assert_fail@plt+0x22948>
   29a0c:	cmp	r0, #0
   29a10:	str	r0, [sp, #40]	; 0x28
   29a14:	beq	29be4 <__assert_fail@plt+0x17d1c>
   29a18:	mov	r1, #1
   29a1c:	str	r6, [r0]
   29a20:	str	r1, [sp, #36]	; 0x24
   29a24:	mvn	r1, #0
   29a28:	ldr	r0, [r5, #24]
   29a2c:	add	r0, r0, r4, lsl #2
   29a30:	str	r1, [r0, #4]
   29a34:	ldr	r2, [r5]
   29a38:	add	r0, r2, r6, lsl #3
   29a3c:	ldr	r0, [r0, #4]
   29a40:	ubfx	r1, r0, #8, #10
   29a44:	cmp	r1, #0
   29a48:	beq	29aa4 <__assert_fail@plt+0x17bdc>
   29a4c:	ldr	r3, [r5, #20]
   29a50:	add	r3, r3, r4, lsl #2
   29a54:	ldr	r7, [r3, #4]
   29a58:	cmp	r7, #0
   29a5c:	beq	29aa4 <__assert_fail@plt+0x17bdc>
   29a60:	ldr	r3, [r3, #8]
   29a64:	ldr	r3, [r3]
   29a68:	add	r2, r2, r3, lsl #3
   29a6c:	ldrb	r2, [r2, #6]
   29a70:	tst	r2, #4
   29a74:	bne	29aa4 <__assert_fail@plt+0x17bdc>
   29a78:	str	r1, [sp]
   29a7c:	mov	r0, r5
   29a80:	mov	r1, r6
   29a84:	mov	r2, r6
   29a88:	mov	r3, r6
   29a8c:	bl	29bf0 <__assert_fail@plt+0x17d28>
   29a90:	cmp	r0, #0
   29a94:	bne	29bdc <__assert_fail@plt+0x17d14>
   29a98:	ldr	r0, [r5]
   29a9c:	add	r0, r0, r6, lsl #3
   29aa0:	ldr	r0, [r0, #4]
   29aa4:	tst	r0, #8
   29aa8:	beq	29bb0 <__assert_fail@plt+0x17ce8>
   29aac:	ldr	r0, [r5, #20]
   29ab0:	add	r1, r0, r4, lsl #2
   29ab4:	ldr	r1, [r1, #4]
   29ab8:	cmp	r1, #1
   29abc:	blt	29bb0 <__assert_fail@plt+0x17ce8>
   29ac0:	str	r8, [sp, #12]
   29ac4:	mov	r8, #0
   29ac8:	add	r7, sp, #16
   29acc:	add	sl, sp, #32
   29ad0:	mov	r6, #0
   29ad4:	str	r9, [sp, #8]
   29ad8:	b	29af8 <__assert_fail@plt+0x17c30>
   29adc:	mov	r8, #1
   29ae0:	ldr	r0, [r5, #20]
   29ae4:	add	r6, r6, #1
   29ae8:	add	r1, r0, r4, lsl #2
   29aec:	ldr	r1, [r1, #4]
   29af0:	cmp	r6, r1
   29af4:	bge	29b84 <__assert_fail@plt+0x17cbc>
   29af8:	add	r0, r0, r4, lsl #2
   29afc:	ldr	r0, [r0, #8]
   29b00:	ldr	r2, [r0, r6, lsl #2]
   29b04:	ldr	r0, [r5, #24]
   29b08:	add	r9, r2, r2, lsl #1
   29b0c:	add	r0, r0, r9, lsl #2
   29b10:	ldr	r1, [r0, #4]
   29b14:	cmn	r1, #1
   29b18:	beq	29adc <__assert_fail@plt+0x17c14>
   29b1c:	cmp	r1, #0
   29b20:	bne	29b40 <__assert_fail@plt+0x17c78>
   29b24:	mov	r0, r7
   29b28:	mov	r1, r5
   29b2c:	mov	r3, #0
   29b30:	bl	299c8 <__assert_fail@plt+0x17b00>
   29b34:	cmp	r0, #0
   29b38:	beq	29b50 <__assert_fail@plt+0x17c88>
   29b3c:	b	29bdc <__assert_fail@plt+0x17d14>
   29b40:	vldr	d16, [r0]
   29b44:	ldr	r0, [r0, #8]
   29b48:	str	r0, [sp, #24]
   29b4c:	vstr	d16, [sp, #16]
   29b50:	mov	r0, sl
   29b54:	mov	r1, r7
   29b58:	bl	2a078 <__assert_fail@plt+0x181b0>
   29b5c:	cmp	r0, #0
   29b60:	bne	29bdc <__assert_fail@plt+0x17d14>
   29b64:	ldr	r0, [r5, #24]
   29b68:	add	r0, r0, r9, lsl #2
   29b6c:	ldr	r0, [r0, #4]
   29b70:	cmp	r0, #0
   29b74:	bne	29ae0 <__assert_fail@plt+0x17c18>
   29b78:	ldr	r0, [sp, #24]
   29b7c:	bl	176c0 <__assert_fail@plt+0x57f8>
   29b80:	b	29adc <__assert_fail@plt+0x17c14>
   29b84:	tst	r8, #1
   29b88:	ldr	r8, [sp, #12]
   29b8c:	ldr	r0, [sp, #8]
   29b90:	beq	29bb0 <__assert_fail@plt+0x17ce8>
   29b94:	cmp	r0, #0
   29b98:	bne	29bb0 <__assert_fail@plt+0x17ce8>
   29b9c:	ldr	r0, [r5, #24]
   29ba0:	mov	r1, #0
   29ba4:	add	r0, r0, r4, lsl #2
   29ba8:	str	r1, [r0, #4]
   29bac:	b	29bc8 <__assert_fail@plt+0x17d00>
   29bb0:	ldr	r0, [r5, #24]
   29bb4:	vldr	d16, [sp, #32]
   29bb8:	ldr	r1, [sp, #40]	; 0x28
   29bbc:	add	r0, r0, r4, lsl #2
   29bc0:	str	r1, [r0, #8]
   29bc4:	vstr	d16, [r0]
   29bc8:	ldr	r0, [sp, #40]	; 0x28
   29bcc:	vldr	d16, [sp, #32]
   29bd0:	str	r0, [r8, #8]
   29bd4:	mov	r0, #0
   29bd8:	vstr	d16, [r8]
   29bdc:	sub	sp, fp, #28
   29be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29be4:	mov	r0, #12
   29be8:	sub	sp, fp, #28
   29bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bf4:	add	fp, sp, #28
   29bf8:	sub	sp, sp, #20
   29bfc:	mov	r9, r0
   29c00:	ldr	r0, [fp, #8]
   29c04:	mov	r8, r2
   29c08:	mov	r5, r1
   29c0c:	str	r3, [sp, #8]
   29c10:	str	r0, [sp, #12]
   29c14:	ldr	r1, [sp, #12]
   29c18:	movw	r0, #65280	; 0xff00
   29c1c:	movt	r0, #3
   29c20:	and	r0, r0, r1, lsl #8
   29c24:	str	r0, [sp, #16]
   29c28:	ldr	r2, [r9]
   29c2c:	add	r3, r2, r5, lsl #3
   29c30:	ldrb	r0, [r3, #4]!
   29c34:	cmp	r0, #4
   29c38:	bne	29d10 <__assert_fail@plt+0x17e48>
   29c3c:	ldr	r0, [r9, #12]
   29c40:	ldr	r1, [r9, #20]
   29c44:	add	r7, r8, r8, lsl #1
   29c48:	ldr	r6, [r0, r5, lsl #2]
   29c4c:	add	r0, r1, r7, lsl #2
   29c50:	mov	r1, #0
   29c54:	str	r1, [r0, #4]
   29c58:	mov	r0, r9
   29c5c:	ldr	r1, [r2, r6, lsl #3]!
   29c60:	ldr	r2, [r2, #4]
   29c64:	bl	297f8 <__assert_fail@plt+0x17930>
   29c68:	cmn	r0, #1
   29c6c:	beq	2a070 <__assert_fail@plt+0x181a8>
   29c70:	mov	r4, r0
   29c74:	ldr	r0, [r9]
   29c78:	movw	r2, #255	; 0xff
   29c7c:	movt	r2, #65532	; 0xfffc
   29c80:	add	r0, r0, r4, lsl #3
   29c84:	ldr	r1, [r0, #4]
   29c88:	and	r1, r1, r2
   29c8c:	ldr	r2, [sp, #16]
   29c90:	orr	r1, r1, r2
   29c94:	movw	r2, #65280	; 0xff00
   29c98:	str	r1, [r0, #4]
   29c9c:	movt	r2, #3
   29ca0:	ldr	r0, [r9]
   29ca4:	add	r1, r0, r6, lsl #3
   29ca8:	add	r0, r0, r4, lsl #3
   29cac:	ldr	r1, [r1, #4]
   29cb0:	and	r1, r1, r2
   29cb4:	ldr	r2, [r0, #4]
   29cb8:	orr	r1, r1, r2
   29cbc:	str	r1, [r0, #4]
   29cc0:	ldr	r0, [r9]
   29cc4:	add	r0, r0, r4, lsl #3
   29cc8:	ldr	r1, [r0, #4]
   29ccc:	orr	r1, r1, #262144	; 0x40000
   29cd0:	str	r1, [r0, #4]
   29cd4:	ldr	r0, [r9, #16]
   29cd8:	str	r6, [r0, r4, lsl #2]
   29cdc:	ldr	r0, [r9, #12]
   29ce0:	ldr	r1, [r0, r5, lsl #2]
   29ce4:	str	r1, [r0, r8, lsl #2]
   29ce8:	mov	r1, r4
   29cec:	ldr	r0, [r9, #20]
   29cf0:	add	r0, r0, r7, lsl #2
   29cf4:	bl	2a204 <__assert_fail@plt+0x1833c>
   29cf8:	cmp	r0, #0
   29cfc:	mov	r5, r6
   29d00:	mov	r8, r4
   29d04:	mov	r7, #12
   29d08:	bne	29c28 <__assert_fail@plt+0x17d60>
   29d0c:	b	2a040 <__assert_fail@plt+0x18178>
   29d10:	ldr	r0, [r9, #20]
   29d14:	add	ip, r5, r5, lsl #1
   29d18:	add	r7, r0, ip, lsl #2
   29d1c:	ldr	r1, [r7, #4]
   29d20:	cmp	r1, #0
   29d24:	beq	2a024 <__assert_fail@plt+0x1815c>
   29d28:	ldr	r7, [r7, #8]
   29d2c:	add	r4, r8, r8, lsl #1
   29d30:	cmp	r1, #1
   29d34:	add	r0, r0, r4, lsl #2
   29d38:	ldr	sl, [r7]
   29d3c:	mov	r7, #0
   29d40:	str	r7, [r0, #4]
   29d44:	beq	29f4c <__assert_fail@plt+0x18084>
   29d48:	ldr	r1, [r9, #8]
   29d4c:	mov	r8, r4
   29d50:	ldr	r4, [sp, #12]
   29d54:	sub	r3, r1, #1
   29d58:	cmp	r3, #1
   29d5c:	blt	29dac <__assert_fail@plt+0x17ee4>
   29d60:	add	r3, r2, r3, lsl #3
   29d64:	ldr	r7, [r3, #4]
   29d68:	ands	r3, r7, #262144	; 0x40000
   29d6c:	beq	29dac <__assert_fail@plt+0x17ee4>
   29d70:	ldr	r6, [r9, #16]
   29d74:	sub	r3, r2, #12
   29d78:	sub	r6, r6, #4
   29d7c:	ldr	r5, [r6, r1, lsl #2]
   29d80:	cmp	r5, sl
   29d84:	ubfxeq	r7, r7, #8, #10
   29d88:	cmpeq	r7, r4
   29d8c:	beq	29f30 <__assert_fail@plt+0x18068>
   29d90:	sub	r7, r1, #2
   29d94:	cmp	r7, #1
   29d98:	blt	29dac <__assert_fail@plt+0x17ee4>
   29d9c:	ldr	r7, [r3, r1, lsl #3]
   29da0:	sub	r1, r1, #1
   29da4:	ands	r5, r7, #262144	; 0x40000
   29da8:	bne	29d7c <__assert_fail@plt+0x17eb4>
   29dac:	ldr	r1, [r2, sl, lsl #3]!
   29db0:	mov	r0, r9
   29db4:	mov	r5, ip
   29db8:	ldr	r2, [r2, #4]
   29dbc:	bl	297f8 <__assert_fail@plt+0x17930>
   29dc0:	mov	r7, #12
   29dc4:	cmn	r0, #1
   29dc8:	beq	2a040 <__assert_fail@plt+0x18178>
   29dcc:	mov	r6, r0
   29dd0:	ldr	r0, [r9]
   29dd4:	movw	r2, #255	; 0xff
   29dd8:	mov	r4, r8
   29ddc:	movt	r2, #65532	; 0xfffc
   29de0:	add	r0, r0, r6, lsl #3
   29de4:	ldr	r1, [r0, #4]
   29de8:	and	r1, r1, r2
   29dec:	ldr	r2, [sp, #16]
   29df0:	orr	r1, r1, r2
   29df4:	movw	r2, #65280	; 0xff00
   29df8:	str	r1, [r0, #4]
   29dfc:	movt	r2, #3
   29e00:	ldr	r0, [r9]
   29e04:	add	r1, r0, sl, lsl #3
   29e08:	add	r0, r0, r6, lsl #3
   29e0c:	ldr	r1, [r1, #4]
   29e10:	and	r1, r1, r2
   29e14:	ldr	r2, [r0, #4]
   29e18:	orr	r1, r1, r2
   29e1c:	str	r1, [r0, #4]
   29e20:	ldr	r0, [r9]
   29e24:	add	r0, r0, r6, lsl #3
   29e28:	ldr	r1, [r0, #4]
   29e2c:	orr	r1, r1, #262144	; 0x40000
   29e30:	str	r1, [r0, #4]
   29e34:	mov	r1, r6
   29e38:	ldr	r0, [r9, #16]
   29e3c:	str	sl, [r0, r6, lsl #2]
   29e40:	ldr	r0, [r9, #20]
   29e44:	add	r0, r0, r8, lsl #2
   29e48:	bl	2a204 <__assert_fail@plt+0x1833c>
   29e4c:	cmp	r0, #0
   29e50:	beq	2a040 <__assert_fail@plt+0x18178>
   29e54:	ldr	r0, [sp, #12]
   29e58:	ldr	r3, [sp, #8]
   29e5c:	mov	r1, sl
   29e60:	mov	r2, r6
   29e64:	str	r0, [sp]
   29e68:	mov	r0, r9
   29e6c:	bl	29bf0 <__assert_fail@plt+0x17d28>
   29e70:	cmp	r0, #0
   29e74:	bne	2a03c <__assert_fail@plt+0x18174>
   29e78:	ldr	r1, [r9, #20]
   29e7c:	ldr	r0, [r9]
   29e80:	add	r1, r1, r5, lsl #2
   29e84:	ldr	r1, [r1, #8]
   29e88:	ldr	r5, [r1, #4]
   29e8c:	ldr	r1, [r0, r5, lsl #3]!
   29e90:	ldr	r2, [r0, #4]
   29e94:	mov	r0, r9
   29e98:	bl	297f8 <__assert_fail@plt+0x17930>
   29e9c:	mov	r7, #12
   29ea0:	cmn	r0, #1
   29ea4:	beq	2a040 <__assert_fail@plt+0x18178>
   29ea8:	mov	r8, r0
   29eac:	ldr	r0, [r9]
   29eb0:	movw	r2, #255	; 0xff
   29eb4:	movt	r2, #65532	; 0xfffc
   29eb8:	add	r0, r0, r8, lsl #3
   29ebc:	ldr	r1, [r0, #4]
   29ec0:	and	r1, r1, r2
   29ec4:	ldr	r2, [sp, #16]
   29ec8:	orr	r1, r1, r2
   29ecc:	movw	r2, #65280	; 0xff00
   29ed0:	str	r1, [r0, #4]
   29ed4:	movt	r2, #3
   29ed8:	ldr	r0, [r9]
   29edc:	add	r1, r0, r5, lsl #3
   29ee0:	add	r0, r0, r8, lsl #3
   29ee4:	ldr	r1, [r1, #4]
   29ee8:	and	r1, r1, r2
   29eec:	ldr	r2, [r0, #4]
   29ef0:	orr	r1, r1, r2
   29ef4:	str	r1, [r0, #4]
   29ef8:	ldr	r0, [r9]
   29efc:	add	r0, r0, r8, lsl #3
   29f00:	ldr	r1, [r0, #4]
   29f04:	orr	r1, r1, #262144	; 0x40000
   29f08:	str	r1, [r0, #4]
   29f0c:	mov	r1, r8
   29f10:	ldr	r0, [r9, #16]
   29f14:	str	r5, [r0, r8, lsl #2]
   29f18:	ldr	r0, [r9, #20]
   29f1c:	add	r0, r0, r4, lsl #2
   29f20:	bl	2a204 <__assert_fail@plt+0x1833c>
   29f24:	cmp	r0, #0
   29f28:	bne	29c28 <__assert_fail@plt+0x17d60>
   29f2c:	b	2a040 <__assert_fail@plt+0x18178>
   29f30:	sub	r1, r1, #1
   29f34:	mov	r5, ip
   29f38:	bl	2a204 <__assert_fail@plt+0x1833c>
   29f3c:	cmp	r0, #0
   29f40:	mov	r4, r8
   29f44:	bne	29e78 <__assert_fail@plt+0x17fb0>
   29f48:	b	2a070 <__assert_fail@plt+0x181a8>
   29f4c:	ldr	r1, [sp, #8]
   29f50:	cmp	r5, r1
   29f54:	bne	29f60 <__assert_fail@plt+0x18098>
   29f58:	cmp	r8, r5
   29f5c:	bne	2a04c <__assert_fail@plt+0x18184>
   29f60:	ldr	r1, [r2, sl, lsl #3]!
   29f64:	ldr	r6, [r3]
   29f68:	mov	r0, r9
   29f6c:	ldr	r2, [r2, #4]
   29f70:	bl	297f8 <__assert_fail@plt+0x17930>
   29f74:	mov	r8, r0
   29f78:	ubfx	r0, r6, #8, #10
   29f7c:	mov	r7, #12
   29f80:	cmn	r8, #1
   29f84:	beq	2a040 <__assert_fail@plt+0x18178>
   29f88:	ldr	r1, [sp, #12]
   29f8c:	movw	r7, #255	; 0xff
   29f90:	movt	r7, #65532	; 0xfffc
   29f94:	orr	r1, r0, r1
   29f98:	movw	r0, #65280	; 0xff00
   29f9c:	movt	r0, #3
   29fa0:	str	r1, [sp, #12]
   29fa4:	mov	r3, r0
   29fa8:	and	r0, r0, r1, lsl #8
   29fac:	ldr	r1, [r9]
   29fb0:	add	r1, r1, r8, lsl #3
   29fb4:	ldr	r2, [r1, #4]
   29fb8:	and	r2, r2, r7
   29fbc:	mov	r7, #12
   29fc0:	orr	r0, r2, r0
   29fc4:	str	r0, [r1, #4]
   29fc8:	ldr	r0, [r9]
   29fcc:	add	r1, r0, sl, lsl #3
   29fd0:	add	r0, r0, r8, lsl #3
   29fd4:	ldr	r1, [r1, #4]
   29fd8:	ldr	r2, [r0, #4]
   29fdc:	and	r1, r1, r3
   29fe0:	orr	r1, r1, r2
   29fe4:	str	r1, [r0, #4]
   29fe8:	ldr	r0, [r9]
   29fec:	add	r0, r0, r8, lsl #3
   29ff0:	ldr	r1, [r0, #4]
   29ff4:	orr	r1, r1, #262144	; 0x40000
   29ff8:	str	r1, [r0, #4]
   29ffc:	mov	r1, r8
   2a000:	ldr	r0, [r9, #16]
   2a004:	str	sl, [r0, r8, lsl #2]
   2a008:	ldr	r0, [r9, #20]
   2a00c:	add	r0, r0, r4, lsl #2
   2a010:	bl	2a204 <__assert_fail@plt+0x1833c>
   2a014:	cmp	r0, #0
   2a018:	mov	r5, sl
   2a01c:	bne	29c14 <__assert_fail@plt+0x17d4c>
   2a020:	b	2a040 <__assert_fail@plt+0x18178>
   2a024:	ldr	r0, [r9, #12]
   2a028:	ldr	r1, [r0, r5, lsl #2]
   2a02c:	str	r1, [r0, r8, lsl #2]
   2a030:	mov	r0, #0
   2a034:	sub	sp, fp, #28
   2a038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a03c:	mov	r7, r0
   2a040:	mov	r0, r7
   2a044:	sub	sp, fp, #28
   2a048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a04c:	mov	r1, sl
   2a050:	bl	2a204 <__assert_fail@plt+0x1833c>
   2a054:	mov	r1, r0
   2a058:	mov	r7, #12
   2a05c:	mov	r0, #0
   2a060:	cmp	r1, #0
   2a064:	moveq	r0, r7
   2a068:	sub	sp, fp, #28
   2a06c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a070:	mov	r7, #12
   2a074:	b	2a040 <__assert_fail@plt+0x18178>
   2a078:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a07c:	add	fp, sp, #24
   2a080:	mov	r8, #0
   2a084:	cmp	r1, #0
   2a088:	beq	2a1d8 <__assert_fail@plt+0x18310>
   2a08c:	mov	r6, r1
   2a090:	ldr	r1, [r1, #4]
   2a094:	cmp	r1, #0
   2a098:	beq	2a1d8 <__assert_fail@plt+0x18310>
   2a09c:	mov	r9, r0
   2a0a0:	ldr	r2, [r0]
   2a0a4:	ldr	r0, [r0, #4]
   2a0a8:	add	r3, r0, r1, lsl #1
   2a0ac:	cmp	r2, r3
   2a0b0:	bge	2a0dc <__assert_fail@plt+0x18214>
   2a0b4:	ldr	r0, [r9, #8]
   2a0b8:	add	r7, r2, r1
   2a0bc:	lsl	r1, r7, #3
   2a0c0:	bl	34840 <__assert_fail@plt+0x22978>
   2a0c4:	cmp	r0, #0
   2a0c8:	beq	2a1f8 <__assert_fail@plt+0x18330>
   2a0cc:	str	r0, [r9, #8]
   2a0d0:	lsl	r0, r7, #1
   2a0d4:	str	r0, [r9]
   2a0d8:	ldr	r0, [r9, #4]
   2a0dc:	cmp	r0, #0
   2a0e0:	beq	2a1e0 <__assert_fail@plt+0x18318>
   2a0e4:	ldr	r2, [r6, #4]
   2a0e8:	sub	r1, r0, #1
   2a0ec:	add	r7, r0, r2, lsl #1
   2a0f0:	sub	r0, r2, #1
   2a0f4:	orrs	r2, r0, r1
   2a0f8:	bmi	2a140 <__assert_fail@plt+0x18278>
   2a0fc:	ldr	r2, [r6, #8]
   2a100:	ldr	r3, [r9, #8]
   2a104:	b	2a124 <__assert_fail@plt+0x1825c>
   2a108:	sublt	r7, r7, #1
   2a10c:	subge	r1, r1, #1
   2a110:	sublt	r0, r0, #1
   2a114:	strlt	r4, [r3, r7, lsl #2]
   2a118:	orr	r5, r0, r1
   2a11c:	cmn	r5, #1
   2a120:	ble	2a140 <__assert_fail@plt+0x18278>
   2a124:	ldr	r4, [r2, r0, lsl #2]
   2a128:	ldr	r5, [r3, r1, lsl #2]
   2a12c:	cmp	r5, r4
   2a130:	bne	2a108 <__assert_fail@plt+0x18240>
   2a134:	sub	r1, r1, #1
   2a138:	sub	r0, r0, #1
   2a13c:	b	2a118 <__assert_fail@plt+0x18250>
   2a140:	cmp	r0, #0
   2a144:	bmi	2a164 <__assert_fail@plt+0x1829c>
   2a148:	add	r2, r0, #1
   2a14c:	ldr	r0, [r9, #8]
   2a150:	ldr	r1, [r6, #8]
   2a154:	sub	r7, r7, r2
   2a158:	lsl	r2, r2, #2
   2a15c:	add	r0, r0, r7, lsl #2
   2a160:	bl	11ab4 <memcpy@plt>
   2a164:	ldr	r0, [r9, #4]
   2a168:	ldr	r2, [r6, #4]
   2a16c:	sub	r1, r0, #1
   2a170:	add	r3, r1, r2, lsl #1
   2a174:	sub	r2, r3, r7
   2a178:	adds	r2, r2, #1
   2a17c:	bcs	2a1d8 <__assert_fail@plt+0x18310>
   2a180:	add	r0, r2, r0
   2a184:	str	r0, [r9, #4]
   2a188:	ldr	r0, [r9, #8]
   2a18c:	ldr	r6, [r0, r1, lsl #2]
   2a190:	ldr	r5, [r0, r3, lsl #2]
   2a194:	cmp	r5, r6
   2a198:	ble	2a1b4 <__assert_fail@plt+0x182ec>
   2a19c:	add	r6, r2, r1
   2a1a0:	subs	r2, r2, #1
   2a1a4:	sub	r3, r3, #1
   2a1a8:	str	r5, [r0, r6, lsl #2]
   2a1ac:	bne	2a18c <__assert_fail@plt+0x182c4>
   2a1b0:	b	2a1d8 <__assert_fail@plt+0x18310>
   2a1b4:	add	r5, r2, r1
   2a1b8:	cmp	r1, #0
   2a1bc:	str	r6, [r0, r5, lsl #2]
   2a1c0:	sub	r6, r1, #1
   2a1c4:	mov	r1, r6
   2a1c8:	bgt	2a18c <__assert_fail@plt+0x182c4>
   2a1cc:	add	r1, r0, r7, lsl #2
   2a1d0:	lsl	r2, r2, #2
   2a1d4:	bl	11ab4 <memcpy@plt>
   2a1d8:	mov	r0, r8
   2a1dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a1e0:	ldr	r0, [r6, #4]
   2a1e4:	str	r0, [r9, #4]
   2a1e8:	ldr	r0, [r9, #8]
   2a1ec:	ldr	r2, [r6, #4]
   2a1f0:	ldr	r1, [r6, #8]
   2a1f4:	b	2a1d0 <__assert_fail@plt+0x18308>
   2a1f8:	mov	r8, #12
   2a1fc:	mov	r0, r8
   2a200:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a204:	push	{r4, r5, r6, sl, fp, lr}
   2a208:	add	fp, sp, #16
   2a20c:	ldr	r2, [r0]
   2a210:	mov	r5, r1
   2a214:	mov	r4, r0
   2a218:	cmp	r2, #0
   2a21c:	beq	2a24c <__assert_fail@plt+0x18384>
   2a220:	ldr	r1, [r4, #4]
   2a224:	cmp	r1, #0
   2a228:	bne	2a288 <__assert_fail@plt+0x183c0>
   2a22c:	ldr	r0, [r4, #8]
   2a230:	str	r5, [r0]
   2a234:	ldr	r0, [r4, #4]
   2a238:	mov	r6, #1
   2a23c:	add	r0, r0, #1
   2a240:	str	r0, [r4, #4]
   2a244:	mov	r0, r6
   2a248:	pop	{r4, r5, r6, sl, fp, pc}
   2a24c:	mov	r6, #1
   2a250:	mov	r0, #4
   2a254:	str	r6, [r4]
   2a258:	str	r6, [r4, #4]
   2a25c:	bl	34810 <__assert_fail@plt+0x22948>
   2a260:	cmp	r0, #0
   2a264:	str	r0, [r4, #8]
   2a268:	strne	r5, [r0]
   2a26c:	movne	r0, r6
   2a270:	popne	{r4, r5, r6, sl, fp, pc}
   2a274:	mov	r6, #0
   2a278:	mov	r0, r6
   2a27c:	str	r6, [r4]
   2a280:	str	r6, [r4, #4]
   2a284:	pop	{r4, r5, r6, sl, fp, pc}
   2a288:	cmp	r2, r1
   2a28c:	bne	2a2b8 <__assert_fail@plt+0x183f0>
   2a290:	lsl	r0, r2, #1
   2a294:	lsl	r1, r2, #3
   2a298:	str	r0, [r4]
   2a29c:	ldr	r0, [r4, #8]
   2a2a0:	bl	34840 <__assert_fail@plt+0x22978>
   2a2a4:	cmp	r0, #0
   2a2a8:	beq	2a36c <__assert_fail@plt+0x184a4>
   2a2ac:	str	r0, [r4, #8]
   2a2b0:	ldr	r1, [r4, #4]
   2a2b4:	b	2a2bc <__assert_fail@plt+0x183f4>
   2a2b8:	ldr	r0, [r4, #8]
   2a2bc:	ldr	r2, [r0]
   2a2c0:	cmp	r2, r5
   2a2c4:	ble	2a334 <__assert_fail@plt+0x1846c>
   2a2c8:	cmp	r1, #1
   2a2cc:	blt	2a364 <__assert_fail@plt+0x1849c>
   2a2d0:	ands	r3, r1, #3
   2a2d4:	sub	ip, r1, #1
   2a2d8:	beq	2a2fc <__assert_fail@plt+0x18434>
   2a2dc:	add	lr, r0, r1, lsl #2
   2a2e0:	mov	r6, lr
   2a2e4:	ldr	r2, [r6, #-4]!
   2a2e8:	subs	r3, r3, #1
   2a2ec:	sub	r1, r1, #1
   2a2f0:	str	r2, [lr]
   2a2f4:	mov	lr, r6
   2a2f8:	bne	2a2e4 <__assert_fail@plt+0x1841c>
   2a2fc:	cmp	ip, #3
   2a300:	bcc	2a32c <__assert_fail@plt+0x18464>
   2a304:	add	r2, r0, r1, lsl #2
   2a308:	sub	r2, r2, #8
   2a30c:	sub	lr, r2, #8
   2a310:	sub	r1, r1, #4
   2a314:	sub	sl, r2, #4
   2a318:	sub	r2, r2, #16
   2a31c:	ldm	lr, {r3, r6, ip, lr}
   2a320:	cmp	r1, #0
   2a324:	stm	sl, {r3, r6, ip, lr}
   2a328:	bgt	2a30c <__assert_fail@plt+0x18444>
   2a32c:	mov	r1, #0
   2a330:	b	2a364 <__assert_fail@plt+0x1849c>
   2a334:	add	r2, r0, r1, lsl #2
   2a338:	ldr	r3, [r2, #-4]
   2a33c:	cmp	r3, r5
   2a340:	ble	2a364 <__assert_fail@plt+0x1849c>
   2a344:	sub	r1, r1, #2
   2a348:	str	r3, [r2]
   2a34c:	sub	r1, r1, #1
   2a350:	ldr	r3, [r2, #-8]
   2a354:	sub	r2, r2, #4
   2a358:	cmp	r3, r5
   2a35c:	bgt	2a348 <__assert_fail@plt+0x18480>
   2a360:	add	r1, r1, #2
   2a364:	str	r5, [r0, r1, lsl #2]
   2a368:	b	2a234 <__assert_fail@plt+0x1836c>
   2a36c:	mov	r6, #0
   2a370:	mov	r0, r6
   2a374:	pop	{r4, r5, r6, sl, fp, pc}
   2a378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a37c:	add	fp, sp, #28
   2a380:	sub	sp, sp, #28
   2a384:	ldr	r8, [r2, #4]
   2a388:	str	r2, [sp, #24]
   2a38c:	cmp	r8, #0
   2a390:	beq	2a59c <__assert_fail@plt+0x186d4>
   2a394:	mov	r9, r3
   2a398:	add	r7, r8, r3
   2a39c:	cmp	r8, #1
   2a3a0:	str	r0, [sp, #4]
   2a3a4:	blt	2a488 <__assert_fail@plt+0x185c0>
   2a3a8:	ldr	r0, [sp, #24]
   2a3ac:	mov	sl, #0
   2a3b0:	cmp	r8, #4
   2a3b4:	ldr	ip, [r0, #8]
   2a3b8:	bcc	2a470 <__assert_fail@plt+0x185a8>
   2a3bc:	mov	r3, #0
   2a3c0:	bic	sl, r8, #3
   2a3c4:	mov	r0, #1
   2a3c8:	vdup.32	q8, r3
   2a3cc:	sub	r2, sl, #4
   2a3d0:	add	r0, r0, r2, lsr #2
   2a3d4:	cmp	r2, #12
   2a3d8:	and	lr, r0, #3
   2a3dc:	vmov.32	d16[0], r7
   2a3e0:	bcc	2a434 <__assert_fail@plt+0x1856c>
   2a3e4:	sub	r5, r0, lr
   2a3e8:	mov	r3, #0
   2a3ec:	mov	r4, #64	; 0x40
   2a3f0:	mov	r7, ip
   2a3f4:	mov	r6, ip
   2a3f8:	vld1.32	{d18-d19}, [r6], r4
   2a3fc:	add	r2, r7, #16
   2a400:	add	r0, r7, #32
   2a404:	subs	r5, r5, #4
   2a408:	add	r3, r3, #16
   2a40c:	vld1.32	{d20-d21}, [r2]
   2a410:	vadd.i32	q8, q9, q8
   2a414:	vld1.32	{d18-d19}, [r0]
   2a418:	add	r0, r7, #48	; 0x30
   2a41c:	mov	r7, r6
   2a420:	vadd.i32	q8, q10, q8
   2a424:	vld1.32	{d20-d21}, [r0]
   2a428:	vadd.i32	q8, q9, q8
   2a42c:	vadd.i32	q8, q10, q8
   2a430:	bne	2a3f8 <__assert_fail@plt+0x18530>
   2a434:	cmp	lr, #0
   2a438:	beq	2a454 <__assert_fail@plt+0x1858c>
   2a43c:	add	r0, ip, r3, lsl #2
   2a440:	rsb	r3, lr, #0
   2a444:	vld1.32	{d18-d19}, [r0]!
   2a448:	adds	r3, r3, #1
   2a44c:	vadd.i32	q8, q9, q8
   2a450:	bcc	2a444 <__assert_fail@plt+0x1857c>
   2a454:	vext.8	q9, q8, q8, #8
   2a458:	cmp	r8, sl
   2a45c:	vadd.i32	q8, q8, q9
   2a460:	vdup.32	q9, d16[1]
   2a464:	vadd.i32	q8, q8, q9
   2a468:	vmov.32	r7, d16[0]
   2a46c:	beq	2a488 <__assert_fail@plt+0x185c0>
   2a470:	add	r3, ip, sl, lsl #2
   2a474:	sub	r2, r8, sl
   2a478:	ldr	r0, [r3], #4
   2a47c:	subs	r2, r2, #1
   2a480:	add	r7, r0, r7
   2a484:	bne	2a478 <__assert_fail@plt+0x185b0>
   2a488:	ldr	r0, [r1, #32]
   2a48c:	mov	sl, r1
   2a490:	ldr	r1, [r1, #68]	; 0x44
   2a494:	and	r1, r1, r7
   2a498:	add	r2, r1, r1, lsl #1
   2a49c:	ldr	r1, [r0, r2, lsl #2]
   2a4a0:	cmp	r1, #1
   2a4a4:	blt	2a53c <__assert_fail@plt+0x18674>
   2a4a8:	add	r0, r0, r2, lsl #2
   2a4ac:	sub	ip, r8, #1
   2a4b0:	mov	r5, #0
   2a4b4:	ldr	lr, [r0, #8]
   2a4b8:	b	2a4c8 <__assert_fail@plt+0x18600>
   2a4bc:	add	r5, r5, #1
   2a4c0:	cmp	r5, r1
   2a4c4:	bge	2a53c <__assert_fail@plt+0x18674>
   2a4c8:	ldr	r4, [lr, r5, lsl #2]
   2a4cc:	ldr	r0, [r4]
   2a4d0:	cmp	r0, r7
   2a4d4:	bne	2a4bc <__assert_fail@plt+0x185f4>
   2a4d8:	ldrb	r0, [r4, #52]	; 0x34
   2a4dc:	and	r0, r0, #15
   2a4e0:	cmp	r0, r9
   2a4e4:	bne	2a4bc <__assert_fail@plt+0x185f4>
   2a4e8:	ldr	r0, [sp, #24]
   2a4ec:	cmp	r0, #0
   2a4f0:	ldrne	r3, [r4, #40]	; 0x28
   2a4f4:	cmpne	r3, #0
   2a4f8:	beq	2a4bc <__assert_fail@plt+0x185f4>
   2a4fc:	ldr	r0, [r3, #4]
   2a500:	cmp	r0, r8
   2a504:	bne	2a4bc <__assert_fail@plt+0x185f4>
   2a508:	mov	r0, ip
   2a50c:	add	r6, r0, #1
   2a510:	cmp	r6, #1
   2a514:	blt	2a7dc <__assert_fail@plt+0x18914>
   2a518:	ldr	r2, [sp, #24]
   2a51c:	ldr	r6, [r2, #8]
   2a520:	ldr	r2, [r3, #8]
   2a524:	ldr	r6, [r6, r0, lsl #2]
   2a528:	ldr	r2, [r2, r0, lsl #2]
   2a52c:	sub	r0, r0, #1
   2a530:	cmp	r2, r6
   2a534:	beq	2a50c <__assert_fail@plt+0x18644>
   2a538:	b	2a4bc <__assert_fail@plt+0x185f4>
   2a53c:	mov	r0, #56	; 0x38
   2a540:	mov	r1, #1
   2a544:	bl	347bc <__assert_fail@plt+0x228f4>
   2a548:	cmp	r0, #0
   2a54c:	beq	2a7fc <__assert_fail@plt+0x18934>
   2a550:	mov	r4, r0
   2a554:	ldr	r0, [sp, #24]
   2a558:	add	r6, r4, #4
   2a55c:	ldr	r8, [r0, #4]
   2a560:	cmp	r8, #1
   2a564:	str	r8, [r4, #8]
   2a568:	blt	2a5a8 <__assert_fail@plt+0x186e0>
   2a56c:	lsl	r0, r8, #2
   2a570:	str	r8, [r4, #4]
   2a574:	bl	34810 <__assert_fail@plt+0x22948>
   2a578:	cmp	r0, #0
   2a57c:	str	r0, [r4, #12]
   2a580:	beq	2a810 <__assert_fail@plt+0x18948>
   2a584:	ldr	r1, [sp, #24]
   2a588:	ldr	r8, [r1, #4]
   2a58c:	ldr	r1, [r1, #8]
   2a590:	lsl	r2, r8, #2
   2a594:	bl	11ab4 <memcpy@plt>
   2a598:	b	2a5b8 <__assert_fail@plt+0x186f0>
   2a59c:	mov	r4, #0
   2a5a0:	str	r4, [r0]
   2a5a4:	b	2a7dc <__assert_fail@plt+0x18914>
   2a5a8:	mov	r0, #0
   2a5ac:	str	r0, [r6]
   2a5b0:	str	r0, [r6, #4]
   2a5b4:	str	r0, [r6, #8]
   2a5b8:	str	r6, [r4, #40]	; 0x28
   2a5bc:	and	r0, r9, #15
   2a5c0:	cmp	r8, #1
   2a5c4:	ldrb	r1, [r4, #52]	; 0x34
   2a5c8:	and	r1, r1, #240	; 0xf0
   2a5cc:	orr	r0, r1, r0
   2a5d0:	strb	r0, [r4, #52]	; 0x34
   2a5d4:	mov	r0, sl
   2a5d8:	blt	2a7c8 <__assert_fail@plt+0x18900>
   2a5dc:	movw	lr, #65280	; 0xff00
   2a5e0:	and	r1, r9, #4
   2a5e4:	and	ip, r9, #1
   2a5e8:	mov	sl, #0
   2a5ec:	mov	r5, #0
   2a5f0:	str	r0, [sp, #16]
   2a5f4:	movt	lr, #3
   2a5f8:	str	r1, [sp]
   2a5fc:	and	r1, r9, #2
   2a600:	str	ip, [sp, #12]
   2a604:	str	r1, [sp, #8]
   2a608:	add	r1, lr, #255	; 0xff
   2a60c:	str	r1, [sp, #20]
   2a610:	b	2a624 <__assert_fail@plt+0x1875c>
   2a614:	add	r5, r5, #1
   2a618:	add	sl, sl, #1
   2a61c:	cmp	sl, r8
   2a620:	bge	2a7c8 <__assert_fail@plt+0x18900>
   2a624:	ldr	r1, [sp, #24]
   2a628:	ldr	r2, [r0]
   2a62c:	ldr	r1, [r1, #8]
   2a630:	ldr	r1, [r1, sl, lsl #2]
   2a634:	add	r1, r2, r1, lsl #3
   2a638:	ldr	r9, [r1, #4]
   2a63c:	ldr	r1, [sp, #20]
   2a640:	and	r1, r9, r1
   2a644:	cmp	r1, #1
   2a648:	beq	2a618 <__assert_fail@plt+0x18750>
   2a64c:	ldrb	r3, [r4, #52]	; 0x34
   2a650:	mov	r2, #32
   2a654:	and	r1, r9, lr
   2a658:	and	r2, r2, r9, lsr #15
   2a65c:	orr	r2, r3, r2
   2a660:	uxtb	r3, r9
   2a664:	strb	r2, [r4, #52]	; 0x34
   2a668:	cmp	r3, #2
   2a66c:	beq	2a680 <__assert_fail@plt+0x187b8>
   2a670:	cmp	r3, #4
   2a674:	bne	2a68c <__assert_fail@plt+0x187c4>
   2a678:	mov	r3, #64	; 0x40
   2a67c:	b	2a684 <__assert_fail@plt+0x187bc>
   2a680:	mov	r3, #16
   2a684:	orr	r2, r2, r3
   2a688:	strb	r2, [r4, #52]	; 0x34
   2a68c:	cmp	r1, #0
   2a690:	beq	2a618 <__assert_fail@plt+0x18750>
   2a694:	ldr	r1, [r4, #40]	; 0x28
   2a698:	cmp	r1, r6
   2a69c:	beq	2a6b4 <__assert_fail@plt+0x187ec>
   2a6a0:	cmp	ip, #0
   2a6a4:	bne	2a748 <__assert_fail@plt+0x18880>
   2a6a8:	ands	r1, r9, #256	; 0x100
   2a6ac:	bne	2a77c <__assert_fail@plt+0x188b4>
   2a6b0:	b	2a748 <__assert_fail@plt+0x18880>
   2a6b4:	mov	r0, #12
   2a6b8:	bl	34810 <__assert_fail@plt+0x22948>
   2a6bc:	cmp	r0, #0
   2a6c0:	beq	2a7f4 <__assert_fail@plt+0x1892c>
   2a6c4:	mov	r5, r0
   2a6c8:	str	r0, [r4, #40]	; 0x28
   2a6cc:	ldr	r0, [sp, #24]
   2a6d0:	ldr	r8, [r0, #4]
   2a6d4:	cmp	r8, #1
   2a6d8:	str	r8, [r5, #4]
   2a6dc:	blt	2a710 <__assert_fail@plt+0x18848>
   2a6e0:	lsl	r0, r8, #2
   2a6e4:	str	r8, [r5]
   2a6e8:	bl	34810 <__assert_fail@plt+0x22948>
   2a6ec:	cmp	r0, #0
   2a6f0:	str	r0, [r5, #8]
   2a6f4:	beq	2a7e8 <__assert_fail@plt+0x18920>
   2a6f8:	ldr	r1, [sp, #24]
   2a6fc:	ldr	r8, [r1, #4]
   2a700:	ldr	r1, [r1, #8]
   2a704:	lsl	r2, r8, #2
   2a708:	bl	11ab4 <memcpy@plt>
   2a70c:	b	2a720 <__assert_fail@plt+0x18858>
   2a710:	mov	r0, #0
   2a714:	str	r0, [r5]
   2a718:	str	r0, [r5, #4]
   2a71c:	str	r0, [r5, #8]
   2a720:	ldrb	r0, [r4, #52]	; 0x34
   2a724:	ldr	ip, [sp, #12]
   2a728:	movw	lr, #65280	; 0xff00
   2a72c:	mov	r5, #0
   2a730:	movt	lr, #3
   2a734:	orr	r0, r0, #128	; 0x80
   2a738:	strb	r0, [r4, #52]	; 0x34
   2a73c:	ldr	r0, [sp, #16]
   2a740:	cmp	ip, #0
   2a744:	beq	2a6a8 <__assert_fail@plt+0x187e0>
   2a748:	cmp	ip, #0
   2a74c:	andsne	r1, r9, #512	; 0x200
   2a750:	bne	2a77c <__assert_fail@plt+0x188b4>
   2a754:	ldr	r1, [sp, #8]
   2a758:	cmp	r1, #0
   2a75c:	bne	2a768 <__assert_fail@plt+0x188a0>
   2a760:	ands	r1, r9, #4096	; 0x1000
   2a764:	bne	2a77c <__assert_fail@plt+0x188b4>
   2a768:	ldr	r1, [sp]
   2a76c:	cmp	r1, #0
   2a770:	bne	2a618 <__assert_fail@plt+0x18750>
   2a774:	ands	r1, r9, #16384	; 0x4000
   2a778:	beq	2a618 <__assert_fail@plt+0x18750>
   2a77c:	subs	r1, sl, r5
   2a780:	bmi	2a614 <__assert_fail@plt+0x1874c>
   2a784:	ldr	r2, [r4, #8]
   2a788:	cmp	r2, r1
   2a78c:	subgt	r2, r2, #1
   2a790:	strgt	r2, [r4, #8]
   2a794:	cmpgt	r2, r1
   2a798:	ble	2a614 <__assert_fail@plt+0x1874c>
   2a79c:	ldr	r2, [r4, #12]
   2a7a0:	add	r3, r2, r1, lsl #2
   2a7a4:	ldr	r3, [r3, #4]
   2a7a8:	str	r3, [r2, r1, lsl #2]
   2a7ac:	add	r1, r1, #1
   2a7b0:	ldr	r3, [r4, #8]
   2a7b4:	cmp	r1, r3
   2a7b8:	blt	2a7a0 <__assert_fail@plt+0x188d8>
   2a7bc:	ldr	r1, [sp, #24]
   2a7c0:	ldr	r8, [r1, #4]
   2a7c4:	b	2a614 <__assert_fail@plt+0x1874c>
   2a7c8:	mov	r1, r4
   2a7cc:	mov	r2, r7
   2a7d0:	bl	2a828 <__assert_fail@plt+0x18960>
   2a7d4:	cmp	r0, #0
   2a7d8:	bne	2a7f4 <__assert_fail@plt+0x1892c>
   2a7dc:	mov	r0, r4
   2a7e0:	sub	sp, fp, #28
   2a7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7e8:	mov	r0, #0
   2a7ec:	str	r0, [r5]
   2a7f0:	str	r0, [r5, #4]
   2a7f4:	mov	r0, r4
   2a7f8:	bl	243b8 <__assert_fail@plt+0x124f0>
   2a7fc:	ldr	r1, [sp, #4]
   2a800:	mov	r0, #12
   2a804:	mov	r4, #0
   2a808:	str	r0, [r1]
   2a80c:	b	2a7dc <__assert_fail@plt+0x18914>
   2a810:	mov	r0, #0
   2a814:	str	r0, [r4, #4]
   2a818:	str	r0, [r4, #8]
   2a81c:	mov	r0, r4
   2a820:	bl	176c0 <__assert_fail@plt+0x57f8>
   2a824:	b	2a7fc <__assert_fail@plt+0x18934>
   2a828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a82c:	add	fp, sp, #28
   2a830:	sub	sp, sp, #4
   2a834:	str	r2, [r1]
   2a838:	mov	r4, r1
   2a83c:	mov	r7, r0
   2a840:	mov	r0, #0
   2a844:	mov	r9, r2
   2a848:	ldr	r1, [r1, #8]
   2a84c:	str	r1, [r4, #16]
   2a850:	str	r0, [r4, #20]
   2a854:	lsl	r0, r1, #2
   2a858:	bl	34810 <__assert_fail@plt+0x22948>
   2a85c:	mov	r8, #12
   2a860:	cmp	r0, #0
   2a864:	str	r0, [r4, #24]
   2a868:	beq	2a930 <__assert_fail@plt+0x18a68>
   2a86c:	ldr	r1, [r4, #8]
   2a870:	cmp	r1, #1
   2a874:	blt	2a8f0 <__assert_fail@plt+0x18a28>
   2a878:	mov	r5, #0
   2a87c:	mov	sl, #2
   2a880:	b	2a8a0 <__assert_fail@plt+0x189d8>
   2a884:	add	r2, r1, #1
   2a888:	str	r2, [r4, #20]
   2a88c:	str	r6, [r0, r1, lsl #2]
   2a890:	ldr	r1, [r4, #8]
   2a894:	add	r5, r5, #1
   2a898:	cmp	r5, r1
   2a89c:	bge	2a8f0 <__assert_fail@plt+0x18a28>
   2a8a0:	ldr	r2, [r4, #12]
   2a8a4:	ldr	r6, [r2, r5, lsl #2]
   2a8a8:	ldr	r2, [r7]
   2a8ac:	add	r2, r2, r6, lsl #3
   2a8b0:	ldrb	r2, [r2, #4]
   2a8b4:	tst	r2, #8
   2a8b8:	bne	2a894 <__assert_fail@plt+0x189cc>
   2a8bc:	ldr	r2, [r4, #16]
   2a8c0:	ldr	r1, [r4, #20]
   2a8c4:	cmp	r2, r1
   2a8c8:	bne	2a884 <__assert_fail@plt+0x189bc>
   2a8cc:	add	r1, sl, r2, lsl #1
   2a8d0:	str	r1, [r4, #16]
   2a8d4:	lsl	r1, r1, #2
   2a8d8:	bl	34840 <__assert_fail@plt+0x22978>
   2a8dc:	cmp	r0, #0
   2a8e0:	beq	2a930 <__assert_fail@plt+0x18a68>
   2a8e4:	str	r0, [r4, #24]
   2a8e8:	ldr	r1, [r4, #20]
   2a8ec:	b	2a884 <__assert_fail@plt+0x189bc>
   2a8f0:	ldr	r1, [r7, #68]	; 0x44
   2a8f4:	ldr	r0, [r7, #32]
   2a8f8:	and	r1, r1, r9
   2a8fc:	mov	r5, r0
   2a900:	add	r2, r1, r1, lsl #1
   2a904:	ldr	r1, [r5, r2, lsl #2]!
   2a908:	mov	r6, r5
   2a90c:	ldr	r3, [r6, #4]!
   2a910:	cmp	r3, r1
   2a914:	ble	2a93c <__assert_fail@plt+0x18a74>
   2a918:	add	r0, r0, r2, lsl #2
   2a91c:	ldr	r0, [r0, #8]
   2a920:	add	r2, r1, #1
   2a924:	mov	r8, #0
   2a928:	str	r2, [r5]
   2a92c:	str	r4, [r0, r1, lsl #2]
   2a930:	mov	r0, r8
   2a934:	sub	sp, fp, #28
   2a938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a93c:	add	r7, r0, r2, lsl #2
   2a940:	mov	r2, #2
   2a944:	add	r9, r2, r1, lsl #1
   2a948:	ldr	r0, [r7, #8]!
   2a94c:	lsl	r1, r9, #2
   2a950:	bl	34840 <__assert_fail@plt+0x22978>
   2a954:	cmp	r0, #0
   2a958:	beq	2a930 <__assert_fail@plt+0x18a68>
   2a95c:	str	r0, [r7]
   2a960:	str	r9, [r6]
   2a964:	ldr	r1, [r5]
   2a968:	b	2a920 <__assert_fail@plt+0x18a58>
   2a96c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a970:	add	fp, sp, #28
   2a974:	sub	sp, sp, #36	; 0x24
   2a978:	mov	r4, r0
   2a97c:	ldr	r0, [r0, #24]
   2a980:	mov	r6, r2
   2a984:	mov	r9, r1
   2a988:	cmp	r0, r1
   2a98c:	ble	2ab88 <__assert_fail@plt+0x18cc0>
   2a990:	ldr	r0, [r4, #80]	; 0x50
   2a994:	mov	r1, #4
   2a998:	cmp	r0, #2
   2a99c:	movge	r0, #0
   2a9a0:	strge	r0, [r4, #16]
   2a9a4:	strge	r0, [r4, #20]
   2a9a8:	mov	r0, #0
   2a9ac:	tst	r6, #1
   2a9b0:	strb	r0, [r4, #76]	; 0x4c
   2a9b4:	str	r0, [r4, #24]
   2a9b8:	str	r0, [r4, #28]
   2a9bc:	str	r0, [r4, #32]
   2a9c0:	movweq	r1, #6
   2a9c4:	ldr	r2, [r4, #44]	; 0x2c
   2a9c8:	ldr	r3, [r4, #52]	; 0x34
   2a9cc:	str	r2, [r4, #48]	; 0x30
   2a9d0:	str	r3, [r4, #56]	; 0x38
   2a9d4:	str	r1, [r4, #60]	; 0x3c
   2a9d8:	ldrb	r1, [r4, #75]	; 0x4b
   2a9dc:	cmp	r1, #0
   2a9e0:	bne	2a9ec <__assert_fail@plt+0x18b24>
   2a9e4:	ldr	r1, [r4]
   2a9e8:	str	r1, [r4, #4]
   2a9ec:	mov	r5, r9
   2a9f0:	cmp	r5, #0
   2a9f4:	beq	2ab10 <__assert_fail@plt+0x18c48>
   2a9f8:	ldr	r1, [r4, #32]
   2a9fc:	cmp	r5, r1
   2aa00:	bge	2ab98 <__assert_fail@plt+0x18cd0>
   2aa04:	ldrb	r0, [r4, #76]	; 0x4c
   2aa08:	cmp	r0, #0
   2aa0c:	bne	2ad14 <__assert_fail@plt+0x18e4c>
   2aa10:	cmp	r5, #0
   2aa14:	ble	2aa50 <__assert_fail@plt+0x18b88>
   2aa18:	ldr	r1, [r4, #48]	; 0x30
   2aa1c:	sub	r0, r5, #1
   2aa20:	cmp	r1, r0
   2aa24:	beq	2adcc <__assert_fail@plt+0x18f04>
   2aa28:	ldr	r1, [r4, #80]	; 0x50
   2aa2c:	cmp	r1, #2
   2aa30:	blt	2aa58 <__assert_fail@plt+0x18b90>
   2aa34:	ldr	r1, [r4, #8]
   2aa38:	ldr	r6, [r1, r0, lsl #2]
   2aa3c:	cmn	r6, #1
   2aa40:	bne	2aa88 <__assert_fail@plt+0x18bc0>
   2aa44:	sub	r0, r0, #1
   2aa48:	cmn	r0, #1
   2aa4c:	bne	2aa38 <__assert_fail@plt+0x18b70>
   2aa50:	ldr	r1, [r4, #60]	; 0x3c
   2aa54:	b	2aab0 <__assert_fail@plt+0x18be8>
   2aa58:	ldr	r1, [r4, #4]
   2aa5c:	ldr	r2, [r4, #68]	; 0x44
   2aa60:	ldrb	r0, [r1, r0]
   2aa64:	ubfx	r1, r0, #5, #3
   2aa68:	and	r3, r0, #31
   2aa6c:	ldr	r2, [r2, r1, lsl #2]
   2aa70:	mov	r1, #1
   2aa74:	tst	r2, r1, lsl r3
   2aa78:	moveq	r1, #0
   2aa7c:	cmpeq	r0, #10
   2aa80:	bne	2aab0 <__assert_fail@plt+0x18be8>
   2aa84:	b	2aaa0 <__assert_fail@plt+0x18bd8>
   2aa88:	ldrb	r0, [r4, #78]	; 0x4e
   2aa8c:	cmp	r0, #0
   2aa90:	bne	2b064 <__assert_fail@plt+0x1919c>
   2aa94:	mov	r1, #0
   2aa98:	cmp	r6, #10
   2aa9c:	bne	2aab0 <__assert_fail@plt+0x18be8>
   2aaa0:	ldrb	r0, [r4, #77]	; 0x4d
   2aaa4:	cmp	r0, #0
   2aaa8:	movwne	r0, #1
   2aaac:	lsl	r1, r0, #1
   2aab0:	str	r1, [r4, #60]	; 0x3c
   2aab4:	ldr	r0, [r4, #80]	; 0x50
   2aab8:	cmp	r0, #2
   2aabc:	blt	2aad8 <__assert_fail@plt+0x18c10>
   2aac0:	ldr	r2, [r4, #28]
   2aac4:	ldr	r0, [r4, #8]
   2aac8:	sub	r2, r2, r5
   2aacc:	add	r1, r0, r5, lsl #2
   2aad0:	lsl	r2, r2, #2
   2aad4:	bl	11a78 <memmove@plt>
   2aad8:	ldrb	r0, [r4, #75]	; 0x4b
   2aadc:	cmp	r0, #0
   2aae0:	bne	2adb4 <__assert_fail@plt+0x18eec>
   2aae4:	ldr	r0, [r4, #28]
   2aae8:	ldr	r1, [r4, #32]
   2aaec:	sub	r0, r0, r5
   2aaf0:	sub	r1, r1, r5
   2aaf4:	str	r0, [r4, #28]
   2aaf8:	str	r1, [r4, #32]
   2aafc:	ldrb	r0, [r4, #75]	; 0x4b
   2ab00:	cmp	r0, #0
   2ab04:	ldreq	r0, [r4, #4]
   2ab08:	addeq	r0, r0, r5
   2ab0c:	streq	r0, [r4, #4]
   2ab10:	str	r9, [r4, #24]
   2ab14:	ldr	r0, [r4, #48]	; 0x30
   2ab18:	ldr	r3, [r4, #80]	; 0x50
   2ab1c:	ldr	r1, [r4, #56]	; 0x38
   2ab20:	sub	r2, r0, r5
   2ab24:	cmp	r3, #2
   2ab28:	sub	r0, r1, r5
   2ab2c:	str	r2, [r4, #48]	; 0x30
   2ab30:	str	r0, [r4, #56]	; 0x38
   2ab34:	blt	2ab5c <__assert_fail@plt+0x18c94>
   2ab38:	ldrb	r0, [r4, #72]	; 0x48
   2ab3c:	cmp	r0, #0
   2ab40:	beq	2ab70 <__assert_fail@plt+0x18ca8>
   2ab44:	mov	r0, r4
   2ab48:	bl	24420 <__assert_fail@plt+0x12558>
   2ab4c:	cmp	r0, #0
   2ab50:	beq	2ab78 <__assert_fail@plt+0x18cb0>
   2ab54:	sub	sp, fp, #28
   2ab58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab5c:	ldrb	r0, [r4, #75]	; 0x4b
   2ab60:	cmp	r0, #0
   2ab64:	bne	2add8 <__assert_fail@plt+0x18f10>
   2ab68:	str	r2, [r4, #28]
   2ab6c:	b	2ab78 <__assert_fail@plt+0x18cb0>
   2ab70:	mov	r0, r4
   2ab74:	bl	24d20 <__assert_fail@plt+0x12e58>
   2ab78:	mov	r0, #0
   2ab7c:	str	r0, [r4, #40]	; 0x28
   2ab80:	sub	sp, fp, #28
   2ab84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab88:	sub	r5, r9, r0
   2ab8c:	cmp	r5, #0
   2ab90:	bne	2a9f8 <__assert_fail@plt+0x18b30>
   2ab94:	b	2ab10 <__assert_fail@plt+0x18c48>
   2ab98:	ldrb	r2, [r4, #76]	; 0x4c
   2ab9c:	ldr	lr, [r4, #28]
   2aba0:	cmp	r2, #0
   2aba4:	bne	2b224 <__assert_fail@plt+0x1935c>
   2aba8:	mov	r2, #0
   2abac:	str	r2, [r4, #28]
   2abb0:	ldr	r3, [r4, #80]	; 0x50
   2abb4:	cmp	r3, #2
   2abb8:	blt	2ae48 <__assert_fail@plt+0x18f80>
   2abbc:	ldrb	r2, [r4, #73]	; 0x49
   2abc0:	cmp	r2, #0
   2abc4:	beq	2ac80 <__assert_fail@plt+0x18db8>
   2abc8:	ldr	r7, [r4]
   2abcc:	sub	r3, r5, r3
   2abd0:	add	ip, r7, r0
   2abd4:	add	r3, ip, r3
   2abd8:	add	r8, ip, r5
   2abdc:	cmp	r3, r7
   2abe0:	movcc	r3, r7
   2abe4:	mov	r7, r8
   2abe8:	sub	r7, r7, #1
   2abec:	cmp	r7, r3
   2abf0:	bcc	2ac80 <__assert_fail@plt+0x18db8>
   2abf4:	ldrb	r2, [r7]
   2abf8:	and	r2, r2, #192	; 0xc0
   2abfc:	cmp	r2, #128	; 0x80
   2ac00:	beq	2abe8 <__assert_fail@plt+0x18d20>
   2ac04:	ldr	r0, [r4, #48]	; 0x30
   2ac08:	mov	sl, lr
   2ac0c:	mov	r1, r7
   2ac10:	add	r0, ip, r0
   2ac14:	sub	r2, r0, r7
   2ac18:	ldr	r0, [r4, #64]	; 0x40
   2ac1c:	cmp	r0, #0
   2ac20:	bne	2b2fc <__assert_fail@plt+0x19434>
   2ac24:	mov	r0, #0
   2ac28:	add	r3, sp, #24
   2ac2c:	str	r0, [sp, #28]
   2ac30:	str	r0, [sp, #24]
   2ac34:	add	r0, sp, #20
   2ac38:	bl	358a0 <__assert_fail@plt+0x239d8>
   2ac3c:	sub	r1, r8, r7
   2ac40:	mvn	r7, #0
   2ac44:	cmp	r0, r1
   2ac48:	bcc	2ac6c <__assert_fail@plt+0x18da4>
   2ac4c:	cmn	r0, #3
   2ac50:	bhi	2ac6c <__assert_fail@plt+0x18da4>
   2ac54:	mov	r2, #0
   2ac58:	sub	r0, r0, r1
   2ac5c:	str	r2, [r4, #16]
   2ac60:	str	r2, [r4, #20]
   2ac64:	str	r0, [r4, #28]
   2ac68:	ldr	r7, [sp, #20]
   2ac6c:	cmn	r7, #1
   2ac70:	bne	2b0a4 <__assert_fail@plt+0x191dc>
   2ac74:	ldr	r0, [r4, #24]
   2ac78:	ldr	r1, [r4, #32]
   2ac7c:	mov	lr, sl
   2ac80:	add	r8, r1, r0
   2ac84:	cmp	r8, r9
   2ac88:	bge	2b084 <__assert_fail@plt+0x191bc>
   2ac8c:	add	sl, r4, #16
   2ac90:	str	lr, [sp]
   2ac94:	ldr	r0, [r4]
   2ac98:	ldr	r2, [r4, #44]	; 0x2c
   2ac9c:	mov	r3, sl
   2aca0:	add	r1, r0, r8
   2aca4:	ldr	r0, [sl]
   2aca8:	sub	r7, r2, r8
   2acac:	mov	r2, r7
   2acb0:	str	r0, [sp, #8]
   2acb4:	ldr	r0, [sl, #4]
   2acb8:	str	r0, [sp, #4]
   2acbc:	add	r0, sp, #24
   2acc0:	bl	358a0 <__assert_fail@plt+0x239d8>
   2acc4:	sub	r1, r0, #1
   2acc8:	cmn	r1, #3
   2accc:	bcs	2ace4 <__assert_fail@plt+0x18e1c>
   2acd0:	ldr	r7, [sp, #24]
   2acd4:	add	r8, r0, r8
   2acd8:	cmp	r8, r9
   2acdc:	blt	2ac94 <__assert_fail@plt+0x18dcc>
   2ace0:	b	2b090 <__assert_fail@plt+0x191c8>
   2ace4:	ldr	r3, [sp, #4]
   2ace8:	ldr	r2, [sp, #8]
   2acec:	cmp	r7, #0
   2acf0:	mov	r1, #0
   2acf4:	cmpne	r0, #0
   2acf8:	beq	2ad04 <__assert_fail@plt+0x18e3c>
   2acfc:	ldr	r0, [r4]
   2ad00:	ldrb	r1, [r0, r8]
   2ad04:	stm	sl, {r2, r3}
   2ad08:	mov	r0, #1
   2ad0c:	mov	r7, r1
   2ad10:	b	2acd4 <__assert_fail@plt+0x18e0c>
   2ad14:	ldr	ip, [r4, #12]
   2ad18:	ldr	r0, [r4, #28]
   2ad1c:	mov	r2, #0
   2ad20:	b	2ad30 <__assert_fail@plt+0x18e68>
   2ad24:	cmp	r2, r3
   2ad28:	mov	r0, r3
   2ad2c:	bge	2ad5c <__assert_fail@plt+0x18e94>
   2ad30:	add	r1, r2, r0
   2ad34:	add	r1, r1, r1, lsr #31
   2ad38:	asr	r1, r1, #1
   2ad3c:	ldr	r7, [ip, r1, lsl #2]
   2ad40:	mov	r3, r1
   2ad44:	cmp	r7, r5
   2ad48:	bgt	2ad24 <__assert_fail@plt+0x18e5c>
   2ad4c:	bge	2ad5c <__assert_fail@plt+0x18e94>
   2ad50:	add	r2, r1, #1
   2ad54:	mov	r3, r0
   2ad58:	b	2ad24 <__assert_fail@plt+0x18e5c>
   2ad5c:	cmp	r7, r5
   2ad60:	mov	r0, #0
   2ad64:	movwlt	r0, #1
   2ad68:	add	r7, r1, r0
   2ad6c:	cmp	r7, #0
   2ad70:	ble	2adac <__assert_fail@plt+0x18ee4>
   2ad74:	ldr	r1, [r4, #48]	; 0x30
   2ad78:	sub	r0, r7, #1
   2ad7c:	cmp	r1, r0
   2ad80:	beq	2b24c <__assert_fail@plt+0x19384>
   2ad84:	ldr	r1, [r4, #80]	; 0x50
   2ad88:	cmp	r1, #2
   2ad8c:	blt	2ae94 <__assert_fail@plt+0x18fcc>
   2ad90:	ldr	r1, [r4, #8]
   2ad94:	ldr	r6, [r1, r0, lsl #2]
   2ad98:	cmn	r6, #1
   2ad9c:	bne	2aec4 <__assert_fail@plt+0x18ffc>
   2ada0:	sub	r0, r0, #1
   2ada4:	cmn	r0, #1
   2ada8:	bne	2ad94 <__assert_fail@plt+0x18ecc>
   2adac:	ldr	r1, [r4, #60]	; 0x3c
   2adb0:	b	2aeec <__assert_fail@plt+0x19024>
   2adb4:	ldr	r2, [r4, #28]
   2adb8:	ldr	r0, [r4, #4]
   2adbc:	add	r1, r0, r5
   2adc0:	sub	r2, r2, r5
   2adc4:	bl	11a78 <memmove@plt>
   2adc8:	b	2aae4 <__assert_fail@plt+0x18c1c>
   2adcc:	and	r0, r6, #2
   2add0:	eor	r1, r0, #10
   2add4:	b	2aab0 <__assert_fail@plt+0x18be8>
   2add8:	ldrb	r0, [r4, #72]	; 0x48
   2addc:	cmp	r0, #0
   2ade0:	beq	2b108 <__assert_fail@plt+0x19240>
   2ade4:	ldr	r6, [r4, #36]	; 0x24
   2ade8:	ldr	r5, [r4, #28]
   2adec:	cmp	r6, r2
   2adf0:	movgt	r6, r2
   2adf4:	cmp	r5, r6
   2adf8:	bge	2b174 <__assert_fail@plt+0x192ac>
   2adfc:	bl	11c4c <__ctype_toupper_loc@plt>
   2ae00:	ldr	r1, [r4]
   2ae04:	ldr	r2, [r4, #64]	; 0x40
   2ae08:	add	r1, r1, r9
   2ae0c:	cmp	r2, #0
   2ae10:	ldrb	r1, [r1, r5]
   2ae14:	bne	2ae40 <__assert_fail@plt+0x18f78>
   2ae18:	ldr	r2, [r0]
   2ae1c:	ldr	r1, [r2, r1, lsl #2]
   2ae20:	ldr	r2, [r4, #4]
   2ae24:	strb	r1, [r2, r5]
   2ae28:	add	r1, r5, #1
   2ae2c:	cmp	r1, r6
   2ae30:	bge	2b170 <__assert_fail@plt+0x192a8>
   2ae34:	ldr	r9, [r4, #24]
   2ae38:	mov	r5, r1
   2ae3c:	b	2ae00 <__assert_fail@plt+0x18f38>
   2ae40:	ldrb	r1, [r2, r1]
   2ae44:	b	2ae18 <__assert_fail@plt+0x18f50>
   2ae48:	ldr	r3, [r4]
   2ae4c:	add	r0, r5, r0
   2ae50:	ldr	r1, [r4, #64]	; 0x40
   2ae54:	add	r0, r0, r3
   2ae58:	cmp	r1, #0
   2ae5c:	ldrb	r0, [r0, #-1]
   2ae60:	str	r2, [r4, #32]
   2ae64:	ldrbne	r0, [r1, r0]
   2ae68:	ldr	r1, [r4, #68]	; 0x44
   2ae6c:	ubfx	r2, r0, #5, #3
   2ae70:	and	r3, r0, #31
   2ae74:	ldr	r2, [r1, r2, lsl #2]
   2ae78:	mov	r1, #1
   2ae7c:	tst	r2, r1, lsl r3
   2ae80:	moveq	r1, #0
   2ae84:	cmpeq	r0, #10
   2ae88:	beq	2b1cc <__assert_fail@plt+0x19304>
   2ae8c:	str	r1, [r4, #60]	; 0x3c
   2ae90:	b	2aafc <__assert_fail@plt+0x18c34>
   2ae94:	ldr	r1, [r4, #4]
   2ae98:	ldr	r2, [r4, #68]	; 0x44
   2ae9c:	ldrb	r0, [r1, r0]
   2aea0:	ubfx	r1, r0, #5, #3
   2aea4:	and	r3, r0, #31
   2aea8:	ldr	r2, [r2, r1, lsl #2]
   2aeac:	mov	r1, #1
   2aeb0:	tst	r2, r1, lsl r3
   2aeb4:	moveq	r1, #0
   2aeb8:	cmpeq	r0, #10
   2aebc:	bne	2aeec <__assert_fail@plt+0x19024>
   2aec0:	b	2aedc <__assert_fail@plt+0x19014>
   2aec4:	ldrb	r0, [r4, #78]	; 0x4e
   2aec8:	cmp	r0, #0
   2aecc:	bne	2b2ac <__assert_fail@plt+0x193e4>
   2aed0:	mov	r1, #0
   2aed4:	cmp	r6, #10
   2aed8:	bne	2aeec <__assert_fail@plt+0x19024>
   2aedc:	ldrb	r0, [r4, #77]	; 0x4d
   2aee0:	cmp	r0, #0
   2aee4:	movwne	r0, #1
   2aee8:	lsl	r1, r0, #1
   2aeec:	str	r1, [r4, #60]	; 0x3c
   2aef0:	cmp	r7, r5
   2aef4:	ldr	r2, [r4, #28]
   2aef8:	bne	2af88 <__assert_fail@plt+0x190c0>
   2aefc:	cmp	r2, r5
   2af00:	ble	2af88 <__assert_fail@plt+0x190c0>
   2af04:	ldr	r0, [r4, #12]
   2af08:	ldr	r0, [r0, r5, lsl #2]
   2af0c:	cmp	r0, r5
   2af10:	bne	2af88 <__assert_fail@plt+0x190c0>
   2af14:	ldr	r0, [r4, #8]
   2af18:	sub	r2, r2, r5
   2af1c:	lsl	r2, r2, #2
   2af20:	add	r1, r0, r5, lsl #2
   2af24:	bl	11a78 <memmove@plt>
   2af28:	ldr	r2, [r4, #28]
   2af2c:	ldr	r0, [r4, #4]
   2af30:	add	r1, r0, r5
   2af34:	sub	r2, r2, r5
   2af38:	bl	11a78 <memmove@plt>
   2af3c:	ldr	r0, [r4, #28]
   2af40:	ldr	r1, [r4, #32]
   2af44:	sub	r0, r0, r5
   2af48:	sub	r1, r1, r5
   2af4c:	cmp	r0, #1
   2af50:	str	r0, [r4, #28]
   2af54:	str	r1, [r4, #32]
   2af58:	blt	2aafc <__assert_fail@plt+0x18c34>
   2af5c:	ldr	r0, [r4, #12]
   2af60:	mov	r2, #0
   2af64:	add	r1, r0, r5, lsl #2
   2af68:	ldr	r3, [r1, r2, lsl #2]
   2af6c:	sub	r3, r3, r5
   2af70:	str	r3, [r0, r2, lsl #2]
   2af74:	add	r2, r2, #1
   2af78:	ldr	r3, [r4, #28]
   2af7c:	cmp	r2, r3
   2af80:	blt	2af68 <__assert_fail@plt+0x190a0>
   2af84:	b	2aafc <__assert_fail@plt+0x18c34>
   2af88:	mov	r0, #0
   2af8c:	strb	r0, [r4, #76]	; 0x4c
   2af90:	sub	r0, r5, r9
   2af94:	ldr	r1, [r4, #44]	; 0x2c
   2af98:	ldr	r3, [r4, #52]	; 0x34
   2af9c:	add	r1, r0, r1
   2afa0:	add	r0, r0, r3
   2afa4:	str	r1, [r4, #48]	; 0x30
   2afa8:	sub	r1, r7, #1
   2afac:	str	r0, [r4, #56]	; 0x38
   2afb0:	add	r0, r1, #1
   2afb4:	cmp	r0, #1
   2afb8:	blt	2afd0 <__assert_fail@plt+0x19108>
   2afbc:	ldr	r3, [r4, #12]
   2afc0:	ldr	r3, [r3, r1, lsl #2]
   2afc4:	sub	r1, r1, #1
   2afc8:	cmp	r3, r5
   2afcc:	beq	2afb0 <__assert_fail@plt+0x190e8>
   2afd0:	cmp	r0, r2
   2afd4:	bge	2aff8 <__assert_fail@plt+0x19130>
   2afd8:	ldr	r1, [r4, #8]
   2afdc:	ldr	r3, [r1, r0, lsl #2]
   2afe0:	cmn	r3, #1
   2afe4:	bne	2aff8 <__assert_fail@plt+0x19130>
   2afe8:	add	r0, r0, #1
   2afec:	cmp	r2, r0
   2aff0:	bne	2afdc <__assert_fail@plt+0x19114>
   2aff4:	b	2b000 <__assert_fail@plt+0x19138>
   2aff8:	cmp	r0, r2
   2affc:	bne	2b010 <__assert_fail@plt+0x19148>
   2b000:	mov	r0, #0
   2b004:	str	r0, [r4, #28]
   2b008:	str	r0, [r4, #32]
   2b00c:	b	2aafc <__assert_fail@plt+0x18c34>
   2b010:	ldr	r1, [r4, #12]
   2b014:	ldr	r0, [r1, r0, lsl #2]
   2b018:	subs	r2, r0, r5
   2b01c:	str	r2, [r4, #28]
   2b020:	beq	2b1c0 <__assert_fail@plt+0x192f8>
   2b024:	cmp	r2, #1
   2b028:	blt	2b04c <__assert_fail@plt+0x19184>
   2b02c:	ldr	r0, [r4, #8]
   2b030:	mov	r1, #0
   2b034:	mvn	r3, #0
   2b038:	str	r3, [r0, r1, lsl #2]
   2b03c:	add	r1, r1, #1
   2b040:	ldr	r2, [r4, #28]
   2b044:	cmp	r1, r2
   2b048:	blt	2b038 <__assert_fail@plt+0x19170>
   2b04c:	ldr	r0, [r4, #4]
   2b050:	mov	r1, #255	; 0xff
   2b054:	bl	11d0c <memset@plt>
   2b058:	ldr	r0, [r4, #28]
   2b05c:	str	r0, [r4, #32]
   2b060:	b	2aafc <__assert_fail@plt+0x18c34>
   2b064:	mov	r0, r6
   2b068:	bl	11ce8 <iswalnum@plt>
   2b06c:	mov	r1, #1
   2b070:	cmp	r6, #95	; 0x5f
   2b074:	beq	2aab0 <__assert_fail@plt+0x18be8>
   2b078:	cmp	r0, #0
   2b07c:	beq	2aa94 <__assert_fail@plt+0x18bcc>
   2b080:	b	2aab0 <__assert_fail@plt+0x18be8>
   2b084:	sub	r0, r8, r9
   2b088:	str	r0, [r4, #28]
   2b08c:	b	2b0c0 <__assert_fail@plt+0x191f8>
   2b090:	ldr	lr, [sp]
   2b094:	sub	r0, r8, r9
   2b098:	cmn	r7, #1
   2b09c:	str	r0, [r4, #28]
   2b0a0:	beq	2b0c0 <__assert_fail@plt+0x191f8>
   2b0a4:	ldrb	r0, [r4, #78]	; 0x4e
   2b0a8:	cmp	r0, #0
   2b0ac:	bne	2b2cc <__assert_fail@plt+0x19404>
   2b0b0:	mov	r1, #0
   2b0b4:	cmp	r7, #10
   2b0b8:	beq	2b1f8 <__assert_fail@plt+0x19330>
   2b0bc:	b	2b208 <__assert_fail@plt+0x19340>
   2b0c0:	cmp	lr, #0
   2b0c4:	ble	2b100 <__assert_fail@plt+0x19238>
   2b0c8:	ldr	r1, [r4, #48]	; 0x30
   2b0cc:	sub	r0, lr, #1
   2b0d0:	cmp	r1, r0
   2b0d4:	beq	2b2a0 <__assert_fail@plt+0x193d8>
   2b0d8:	ldr	r1, [r4, #80]	; 0x50
   2b0dc:	cmp	r1, #2
   2b0e0:	blt	2b180 <__assert_fail@plt+0x192b8>
   2b0e4:	ldr	r1, [r4, #8]
   2b0e8:	ldr	r6, [r1, r0, lsl #2]
   2b0ec:	cmn	r6, #1
   2b0f0:	bne	2b1e0 <__assert_fail@plt+0x19318>
   2b0f4:	sub	r0, r0, #1
   2b0f8:	cmn	r0, #1
   2b0fc:	bne	2b0e8 <__assert_fail@plt+0x19220>
   2b100:	ldr	r1, [r4, #60]	; 0x3c
   2b104:	b	2b208 <__assert_fail@plt+0x19340>
   2b108:	ldr	r3, [r4, #64]	; 0x40
   2b10c:	cmp	r3, #0
   2b110:	beq	2ab78 <__assert_fail@plt+0x18cb0>
   2b114:	ldr	r1, [r4, #36]	; 0x24
   2b118:	ldr	r0, [r4, #28]
   2b11c:	cmp	r1, r2
   2b120:	movgt	r1, r2
   2b124:	cmp	r0, r1
   2b128:	bge	2b1b4 <__assert_fail@plt+0x192ec>
   2b12c:	ldr	r7, [r4]
   2b130:	add	r2, r0, r9
   2b134:	ldr	r6, [r4, #4]
   2b138:	ldrb	r2, [r7, r2]
   2b13c:	ldrb	r2, [r3, r2]
   2b140:	strb	r2, [r6, r0]
   2b144:	add	r0, r0, #1
   2b148:	cmp	r0, r1
   2b14c:	bge	2b1b4 <__assert_fail@plt+0x192ec>
   2b150:	ldr	r7, [r4, #24]
   2b154:	ldm	r4, {r2, r3}
   2b158:	ldr	r6, [r4, #64]	; 0x40
   2b15c:	add	r2, r2, r7
   2b160:	ldrb	r2, [r2, r0]
   2b164:	ldrb	r2, [r6, r2]
   2b168:	strb	r2, [r3, r0]
   2b16c:	b	2b144 <__assert_fail@plt+0x1927c>
   2b170:	add	r5, r5, #1
   2b174:	str	r5, [r4, #28]
   2b178:	str	r5, [r4, #32]
   2b17c:	b	2ab78 <__assert_fail@plt+0x18cb0>
   2b180:	ldr	r1, [r4, #4]
   2b184:	ldr	r2, [r4, #68]	; 0x44
   2b188:	ldrb	r0, [r1, r0]
   2b18c:	ubfx	r1, r0, #5, #3
   2b190:	and	r3, r0, #31
   2b194:	ldr	r2, [r2, r1, lsl #2]
   2b198:	mov	r1, #1
   2b19c:	tst	r2, r1, lsl r3
   2b1a0:	bne	2b208 <__assert_fail@plt+0x19340>
   2b1a4:	mov	r1, #0
   2b1a8:	cmp	r0, #10
   2b1ac:	beq	2b1f8 <__assert_fail@plt+0x19330>
   2b1b0:	b	2b208 <__assert_fail@plt+0x19340>
   2b1b4:	str	r0, [r4, #28]
   2b1b8:	str	r0, [r4, #32]
   2b1bc:	b	2ab78 <__assert_fail@plt+0x18cb0>
   2b1c0:	mov	r0, #0
   2b1c4:	str	r0, [r4, #32]
   2b1c8:	b	2aafc <__assert_fail@plt+0x18c34>
   2b1cc:	ldrb	r0, [r4, #77]	; 0x4d
   2b1d0:	cmp	r0, #0
   2b1d4:	movwne	r0, #1
   2b1d8:	lsl	r1, r0, #1
   2b1dc:	b	2ae8c <__assert_fail@plt+0x18fc4>
   2b1e0:	ldrb	r0, [r4, #78]	; 0x4e
   2b1e4:	cmp	r0, #0
   2b1e8:	bne	2b338 <__assert_fail@plt+0x19470>
   2b1ec:	mov	r1, #0
   2b1f0:	cmp	r6, #10
   2b1f4:	bne	2b208 <__assert_fail@plt+0x19340>
   2b1f8:	ldrb	r0, [r4, #77]	; 0x4d
   2b1fc:	cmp	r0, #0
   2b200:	movwne	r0, #1
   2b204:	lsl	r1, r0, #1
   2b208:	str	r1, [r4, #60]	; 0x3c
   2b20c:	mov	r0, #0
   2b210:	ldr	r2, [r4, #28]
   2b214:	cmp	r2, #0
   2b218:	bne	2b258 <__assert_fail@plt+0x19390>
   2b21c:	str	r0, [r4, #32]
   2b220:	b	2aafc <__assert_fail@plt+0x18c34>
   2b224:	mov	r2, #0
   2b228:	strb	r2, [r4, #76]	; 0x4c
   2b22c:	sub	r2, r5, r9
   2b230:	ldr	r3, [r4, #44]	; 0x2c
   2b234:	ldr	r7, [r4, #52]	; 0x34
   2b238:	add	r3, r2, r3
   2b23c:	add	r2, r2, r7
   2b240:	str	r3, [r4, #48]	; 0x30
   2b244:	str	r2, [r4, #56]	; 0x38
   2b248:	b	2aba8 <__assert_fail@plt+0x18ce0>
   2b24c:	and	r0, r6, #2
   2b250:	eor	r1, r0, #10
   2b254:	b	2aeec <__assert_fail@plt+0x19024>
   2b258:	cmp	r2, #1
   2b25c:	blt	2b280 <__assert_fail@plt+0x193b8>
   2b260:	ldr	r0, [r4, #8]
   2b264:	mov	r1, #0
   2b268:	mvn	r3, #0
   2b26c:	str	r3, [r0, r1, lsl #2]
   2b270:	add	r1, r1, #1
   2b274:	ldr	r2, [r4, #28]
   2b278:	cmp	r1, r2
   2b27c:	blt	2b26c <__assert_fail@plt+0x193a4>
   2b280:	ldrb	r0, [r4, #75]	; 0x4b
   2b284:	cmp	r0, #0
   2b288:	beq	2b2f0 <__assert_fail@plt+0x19428>
   2b28c:	ldr	r0, [r4, #4]
   2b290:	mov	r1, #255	; 0xff
   2b294:	bl	11d0c <memset@plt>
   2b298:	ldr	r0, [r4, #28]
   2b29c:	b	2b21c <__assert_fail@plt+0x19354>
   2b2a0:	and	r0, r6, #2
   2b2a4:	eor	r1, r0, #10
   2b2a8:	b	2b208 <__assert_fail@plt+0x19340>
   2b2ac:	mov	r0, r6
   2b2b0:	bl	11ce8 <iswalnum@plt>
   2b2b4:	mov	r1, #1
   2b2b8:	cmp	r6, #95	; 0x5f
   2b2bc:	beq	2aeec <__assert_fail@plt+0x19024>
   2b2c0:	cmp	r0, #0
   2b2c4:	beq	2aed0 <__assert_fail@plt+0x19008>
   2b2c8:	b	2aeec <__assert_fail@plt+0x19024>
   2b2cc:	mov	r0, r7
   2b2d0:	bl	11ce8 <iswalnum@plt>
   2b2d4:	mov	r1, #1
   2b2d8:	cmp	r7, #95	; 0x5f
   2b2dc:	beq	2b208 <__assert_fail@plt+0x19340>
   2b2e0:	cmp	r0, #0
   2b2e4:	mov	r2, r7
   2b2e8:	beq	2b0b0 <__assert_fail@plt+0x191e8>
   2b2ec:	b	2b208 <__assert_fail@plt+0x19340>
   2b2f0:	mov	r0, r2
   2b2f4:	str	r2, [r4, #32]
   2b2f8:	b	2aafc <__assert_fail@plt+0x18c34>
   2b2fc:	cmp	r2, #1
   2b300:	blt	2b358 <__assert_fail@plt+0x19490>
   2b304:	cmp	r2, #6
   2b308:	mov	r1, r2
   2b30c:	movge	r1, #6
   2b310:	sub	ip, r1, #1
   2b314:	add	r1, sp, #14
   2b318:	ldrb	r3, [r7, ip]
   2b31c:	cmp	ip, #0
   2b320:	ldrb	r3, [r0, r3]
   2b324:	strb	r3, [r1, ip]
   2b328:	sub	r3, ip, #1
   2b32c:	mov	ip, r3
   2b330:	bgt	2b318 <__assert_fail@plt+0x19450>
   2b334:	b	2ac24 <__assert_fail@plt+0x18d5c>
   2b338:	mov	r0, r6
   2b33c:	bl	11ce8 <iswalnum@plt>
   2b340:	mov	r1, #1
   2b344:	cmp	r6, #95	; 0x5f
   2b348:	beq	2b208 <__assert_fail@plt+0x19340>
   2b34c:	cmp	r0, #0
   2b350:	beq	2b1ec <__assert_fail@plt+0x19324>
   2b354:	b	2b208 <__assert_fail@plt+0x19340>
   2b358:	add	r1, sp, #14
   2b35c:	b	2ac24 <__assert_fail@plt+0x18d5c>
   2b360:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b364:	add	fp, sp, #24
   2b368:	mov	r8, r0
   2b36c:	ldr	r0, [r0, #124]	; 0x7c
   2b370:	cmp	r0, #1
   2b374:	blt	2b400 <__assert_fail@plt+0x19538>
   2b378:	mov	r7, #0
   2b37c:	b	2b398 <__assert_fail@plt+0x194d0>
   2b380:	mov	r0, r5
   2b384:	bl	176c0 <__assert_fail@plt+0x57f8>
   2b388:	ldr	r0, [r8, #124]	; 0x7c
   2b38c:	add	r7, r7, #1
   2b390:	cmp	r7, r0
   2b394:	bge	2b400 <__assert_fail@plt+0x19538>
   2b398:	ldr	r0, [r8, #132]	; 0x84
   2b39c:	ldr	r5, [r0, r7, lsl #2]
   2b3a0:	ldr	r0, [r5, #16]
   2b3a4:	cmp	r0, #1
   2b3a8:	blt	2b3d8 <__assert_fail@plt+0x19510>
   2b3ac:	mov	r4, #0
   2b3b0:	ldr	r0, [r5, #20]
   2b3b4:	ldr	r6, [r0, r4, lsl #2]
   2b3b8:	ldr	r0, [r6, #16]
   2b3bc:	bl	176c0 <__assert_fail@plt+0x57f8>
   2b3c0:	mov	r0, r6
   2b3c4:	bl	176c0 <__assert_fail@plt+0x57f8>
   2b3c8:	ldr	r0, [r5, #16]
   2b3cc:	add	r4, r4, #1
   2b3d0:	cmp	r4, r0
   2b3d4:	blt	2b3b0 <__assert_fail@plt+0x194e8>
   2b3d8:	ldr	r0, [r5, #20]
   2b3dc:	bl	176c0 <__assert_fail@plt+0x57f8>
   2b3e0:	ldr	r0, [r5, #8]
   2b3e4:	cmp	r0, #0
   2b3e8:	beq	2b380 <__assert_fail@plt+0x194b8>
   2b3ec:	ldr	r0, [r0, #8]
   2b3f0:	bl	176c0 <__assert_fail@plt+0x57f8>
   2b3f4:	ldr	r0, [r5, #8]
   2b3f8:	bl	176c0 <__assert_fail@plt+0x57f8>
   2b3fc:	b	2b380 <__assert_fail@plt+0x194b8>
   2b400:	mov	r0, #0
   2b404:	str	r0, [r8, #108]	; 0x6c
   2b408:	str	r0, [r8, #124]	; 0x7c
   2b40c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b414:	add	fp, sp, #28
   2b418:	sub	sp, sp, #4
   2b41c:	mov	sl, r0
   2b420:	ldr	r0, [r1, #4]
   2b424:	cmp	r0, #1
   2b428:	blt	2b4f8 <__assert_fail@plt+0x19630>
   2b42c:	ldr	r7, [sl, #84]	; 0x54
   2b430:	mov	r8, r2
   2b434:	mov	r5, r1
   2b438:	mov	r4, #0
   2b43c:	b	2b44c <__assert_fail@plt+0x19584>
   2b440:	add	r4, r4, #1
   2b444:	cmp	r4, r0
   2b448:	bge	2b4f8 <__assert_fail@plt+0x19630>
   2b44c:	ldr	r1, [r5, #8]
   2b450:	ldr	r6, [r1, r4, lsl #2]
   2b454:	ldr	r1, [r7]
   2b458:	add	r2, r1, r6, lsl #3
   2b45c:	ldrb	r2, [r2, #4]
   2b460:	cmp	r2, #8
   2b464:	bne	2b440 <__assert_fail@plt+0x19578>
   2b468:	ldr	r1, [r1, r6, lsl #3]
   2b46c:	cmp	r1, #31
   2b470:	bgt	2b440 <__assert_fail@plt+0x19578>
   2b474:	ldr	r2, [r7, #80]	; 0x50
   2b478:	mov	r3, #1
   2b47c:	tst	r2, r3, lsl r1
   2b480:	beq	2b440 <__assert_fail@plt+0x19578>
   2b484:	ldr	r0, [sl, #124]	; 0x7c
   2b488:	ldr	r9, [sl, #128]	; 0x80
   2b48c:	cmp	r0, r9
   2b490:	beq	2b4d4 <__assert_fail@plt+0x1960c>
   2b494:	mov	r0, #1
   2b498:	mov	r1, #24
   2b49c:	bl	347bc <__assert_fail@plt+0x228f4>
   2b4a0:	ldr	r1, [sl, #124]	; 0x7c
   2b4a4:	ldr	r2, [sl, #132]	; 0x84
   2b4a8:	str	r0, [r2, r1, lsl #2]
   2b4ac:	ldr	r0, [sl, #132]	; 0x84
   2b4b0:	ldr	r0, [r0, r1, lsl #2]
   2b4b4:	cmp	r0, #0
   2b4b8:	beq	2b504 <__assert_fail@plt+0x1963c>
   2b4bc:	add	r1, r1, #1
   2b4c0:	str	r6, [r0, #4]
   2b4c4:	str	r1, [sl, #124]	; 0x7c
   2b4c8:	str	r8, [r0]
   2b4cc:	ldr	r0, [r5, #4]
   2b4d0:	b	2b440 <__assert_fail@plt+0x19578>
   2b4d4:	ldr	r0, [sl, #132]	; 0x84
   2b4d8:	lsl	r1, r9, #3
   2b4dc:	bl	34840 <__assert_fail@plt+0x22978>
   2b4e0:	cmp	r0, #0
   2b4e4:	beq	2b504 <__assert_fail@plt+0x1963c>
   2b4e8:	lsl	r1, r9, #1
   2b4ec:	str	r1, [sl, #128]	; 0x80
   2b4f0:	str	r0, [sl, #132]	; 0x84
   2b4f4:	b	2b494 <__assert_fail@plt+0x195cc>
   2b4f8:	mov	r0, #0
   2b4fc:	sub	sp, fp, #28
   2b500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b504:	mov	r0, #12
   2b508:	sub	sp, fp, #28
   2b50c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b514:	add	fp, sp, #28
   2b518:	sub	sp, sp, #76	; 0x4c
   2b51c:	mov	ip, r0
   2b520:	ldr	r0, [r1, #4]
   2b524:	cmp	r0, #1
   2b528:	blt	2be54 <__assert_fail@plt+0x19f8c>
   2b52c:	ldr	r2, [ip, #84]	; 0x54
   2b530:	ldr	r0, [ip, #40]	; 0x28
   2b534:	mov	r3, #0
   2b538:	str	ip, [sp, #44]	; 0x2c
   2b53c:	str	r1, [sp, #12]
   2b540:	str	r0, [sp, #52]	; 0x34
   2b544:	str	r2, [sp, #24]
   2b548:	b	2b568 <__assert_fail@plt+0x196a0>
   2b54c:	ldr	r1, [sp, #12]
   2b550:	ldr	r3, [sp, #16]
   2b554:	ldr	r2, [sp, #24]
   2b558:	ldr	r0, [r1, #4]
   2b55c:	add	r3, r3, #1
   2b560:	cmp	r3, r0
   2b564:	bge	2be54 <__assert_fail@plt+0x19f8c>
   2b568:	ldr	r0, [r1, #8]
   2b56c:	str	r3, [sp, #16]
   2b570:	ldr	r3, [r0, r3, lsl #2]
   2b574:	ldr	r0, [r2]
   2b578:	add	r4, r0, r3, lsl #3
   2b57c:	mov	r1, r3
   2b580:	str	r3, [sp, #48]	; 0x30
   2b584:	ldr	r5, [r4, #4]!
   2b588:	uxtb	r0, r5
   2b58c:	cmp	r0, #4
   2b590:	bne	2b54c <__assert_fail@plt+0x19684>
   2b594:	movw	r0, #65280	; 0xff00
   2b598:	movt	r0, #3
   2b59c:	tst	r5, r0
   2b5a0:	beq	2b6a0 <__assert_fail@plt+0x197d8>
   2b5a4:	ldr	r1, [sp, #52]	; 0x34
   2b5a8:	cmn	r1, #1
   2b5ac:	ble	2b5e8 <__assert_fail@plt+0x19720>
   2b5b0:	ldr	r0, [ip, #48]	; 0x30
   2b5b4:	cmp	r0, r1
   2b5b8:	beq	2be14 <__assert_fail@plt+0x19f4c>
   2b5bc:	ldr	r0, [ip, #80]	; 0x50
   2b5c0:	cmp	r0, #2
   2b5c4:	blt	2b5f0 <__assert_fail@plt+0x19728>
   2b5c8:	ldr	r0, [ip, #8]
   2b5cc:	ldr	r1, [sp, #52]	; 0x34
   2b5d0:	ldr	r6, [r0, r1, lsl #2]
   2b5d4:	cmn	r6, #1
   2b5d8:	bne	2b62c <__assert_fail@plt+0x19764>
   2b5dc:	sub	r1, r1, #1
   2b5e0:	cmn	r1, #1
   2b5e4:	bne	2b5d0 <__assert_fail@plt+0x19708>
   2b5e8:	ldr	r1, [ip, #60]	; 0x3c
   2b5ec:	b	2b654 <__assert_fail@plt+0x1978c>
   2b5f0:	ldr	r0, [ip, #4]
   2b5f4:	ldr	r2, [sp, #52]	; 0x34
   2b5f8:	ldr	r1, [ip, #68]	; 0x44
   2b5fc:	ldrb	r0, [r0, r2]
   2b600:	ubfx	r2, r0, #5, #3
   2b604:	and	r7, r0, #31
   2b608:	ldr	r3, [r1, r2, lsl #2]
   2b60c:	mov	r1, #1
   2b610:	mov	r2, #0
   2b614:	tst	r3, r1, lsl r7
   2b618:	bne	2b66c <__assert_fail@plt+0x197a4>
   2b61c:	mov	r1, #0
   2b620:	cmp	r0, #10
   2b624:	beq	2b644 <__assert_fail@plt+0x1977c>
   2b628:	b	2b654 <__assert_fail@plt+0x1978c>
   2b62c:	ldrb	r0, [ip, #78]	; 0x4e
   2b630:	cmp	r0, #0
   2b634:	bne	2be24 <__assert_fail@plt+0x19f5c>
   2b638:	mov	r1, #0
   2b63c:	cmp	r6, #10
   2b640:	bne	2b654 <__assert_fail@plt+0x1978c>
   2b644:	ldrb	r0, [ip, #77]	; 0x4d
   2b648:	cmp	r0, #0
   2b64c:	movwne	r0, #1
   2b650:	lsl	r1, r0, #1
   2b654:	and	r0, r1, #1
   2b658:	tst	r5, #1024	; 0x400
   2b65c:	eor	r2, r0, #1
   2b660:	beq	2b66c <__assert_fail@plt+0x197a4>
   2b664:	cmp	r0, #0
   2b668:	beq	2b54c <__assert_fail@plt+0x19684>
   2b66c:	ldr	r0, [r4]
   2b670:	cmp	r2, #0
   2b674:	bne	2b680 <__assert_fail@plt+0x197b8>
   2b678:	ands	r2, r0, #2048	; 0x800
   2b67c:	bne	2b54c <__assert_fail@plt+0x19684>
   2b680:	tst	r1, #2
   2b684:	bne	2b690 <__assert_fail@plt+0x197c8>
   2b688:	ands	r2, r0, #8192	; 0x2000
   2b68c:	bne	2b54c <__assert_fail@plt+0x19684>
   2b690:	tst	r1, #8
   2b694:	bne	2b6a0 <__assert_fail@plt+0x197d8>
   2b698:	ands	r0, r0, #32768	; 0x8000
   2b69c:	bne	2b54c <__assert_fail@plt+0x19684>
   2b6a0:	ldr	r2, [ip, #108]	; 0x6c
   2b6a4:	ldr	r0, [ip, #84]	; 0x54
   2b6a8:	ldr	r9, [ip, #4]
   2b6ac:	cmp	r2, #1
   2b6b0:	str	r0, [sp, #36]	; 0x24
   2b6b4:	str	r2, [sp, #20]
   2b6b8:	blt	2b700 <__assert_fail@plt+0x19838>
   2b6bc:	ldr	r4, [sp, #52]	; 0x34
   2b6c0:	ldr	r1, [ip, #116]	; 0x74
   2b6c4:	mov	r0, #0
   2b6c8:	mov	r5, #1
   2b6cc:	mov	lr, r4
   2b6d0:	add	r3, r2, r0
   2b6d4:	add	r3, r3, r3, lsr #31
   2b6d8:	asr	r7, r3, #1
   2b6dc:	add	r6, r7, r7, lsl #1
   2b6e0:	add	r6, r1, r6, lsl #3
   2b6e4:	ldr	r6, [r6, #4]
   2b6e8:	cmp	r6, lr
   2b6ec:	addlt	r0, r5, r3, asr #1
   2b6f0:	movge	r2, r7
   2b6f4:	cmp	r0, r2
   2b6f8:	blt	2b6d0 <__assert_fail@plt+0x19808>
   2b6fc:	b	2b70c <__assert_fail@plt+0x19844>
   2b700:	ldr	r4, [sp, #52]	; 0x34
   2b704:	mov	r0, #0
   2b708:	mov	lr, r4
   2b70c:	ldr	r1, [sp, #20]
   2b710:	cmp	r0, r1
   2b714:	bge	2b758 <__assert_fail@plt+0x19890>
   2b718:	cmn	r0, #1
   2b71c:	beq	2b758 <__assert_fail@plt+0x19890>
   2b720:	ldr	r1, [ip, #116]	; 0x74
   2b724:	add	r0, r0, r0, lsl #1
   2b728:	add	r0, r1, r0, lsl #3
   2b72c:	ldr	r1, [r0, #4]
   2b730:	cmp	r1, lr
   2b734:	bne	2b758 <__assert_fail@plt+0x19890>
   2b738:	ldr	r1, [r0]
   2b73c:	ldr	r2, [sp, #48]	; 0x30
   2b740:	cmp	r1, r2
   2b744:	beq	2bb60 <__assert_fail@plt+0x19c98>
   2b748:	ldrb	r1, [r0, #20]
   2b74c:	add	r0, r0, #24
   2b750:	cmp	r1, #0
   2b754:	bne	2b738 <__assert_fail@plt+0x19870>
   2b758:	ldr	r0, [ip, #124]	; 0x7c
   2b75c:	cmp	r0, #1
   2b760:	ldr	r0, [sp, #20]
   2b764:	blt	2bb64 <__assert_fail@plt+0x19c9c>
   2b768:	ldr	r0, [sp, #36]	; 0x24
   2b76c:	ldr	r1, [sp, #48]	; 0x30
   2b770:	mov	r3, #0
   2b774:	ldr	r0, [r0]
   2b778:	ldr	r2, [r0, r1, lsl #3]
   2b77c:	str	r2, [sp, #32]
   2b780:	ldr	r1, [ip, #132]	; 0x84
   2b784:	str	r3, [sp, #28]
   2b788:	ldr	r6, [r1, r3, lsl #2]
   2b78c:	ldr	r1, [r6, #4]
   2b790:	ldr	r0, [r0, r1, lsl #3]
   2b794:	cmp	r0, r2
   2b798:	bne	2bb34 <__assert_fail@plt+0x19c6c>
   2b79c:	ldr	r0, [r6, #16]
   2b7a0:	ldr	r1, [r6]
   2b7a4:	mov	r8, #0
   2b7a8:	mov	r7, lr
   2b7ac:	str	r6, [sp, #40]	; 0x28
   2b7b0:	cmp	r0, #1
   2b7b4:	blt	2b8ec <__assert_fail@plt+0x19a24>
   2b7b8:	mov	r5, r1
   2b7bc:	ldr	r1, [r6, #20]
   2b7c0:	ldr	r4, [r1, r8, lsl #2]
   2b7c4:	ldr	r1, [r4, #4]
   2b7c8:	sub	sl, r1, r5
   2b7cc:	str	r1, [fp, #-48]	; 0xffffffd0
   2b7d0:	cmp	sl, #1
   2b7d4:	blt	2b808 <__assert_fail@plt+0x19940>
   2b7d8:	ldr	r1, [ip, #28]
   2b7dc:	add	r3, sl, r7
   2b7e0:	cmp	r3, r1
   2b7e4:	bgt	2b85c <__assert_fail@plt+0x19994>
   2b7e8:	add	r0, r9, r7
   2b7ec:	add	r1, r9, r5
   2b7f0:	mov	r2, sl
   2b7f4:	bl	11ca0 <bcmp@plt>
   2b7f8:	ldr	ip, [sp, #44]	; 0x2c
   2b7fc:	ldr	lr, [sp, #52]	; 0x34
   2b800:	cmp	r0, #0
   2b804:	bne	2b8e4 <__assert_fail@plt+0x19a1c>
   2b808:	ldr	r3, [sp, #48]	; 0x30
   2b80c:	mov	r2, r4
   2b810:	mov	r0, ip
   2b814:	mov	r1, r6
   2b818:	str	lr, [sp]
   2b81c:	mov	r4, ip
   2b820:	bl	2c524 <__assert_fail@plt+0x1a65c>
   2b824:	cmp	r0, #1
   2b828:	bhi	2be68 <__assert_fail@plt+0x19fa0>
   2b82c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b830:	ldr	r0, [r6, #16]
   2b834:	ldr	r9, [r4, #4]
   2b838:	mov	ip, r4
   2b83c:	ldr	r4, [sp, #52]	; 0x34
   2b840:	add	r8, r8, #1
   2b844:	add	r7, sl, r7
   2b848:	cmp	r8, r0
   2b84c:	mov	r5, r1
   2b850:	mov	lr, r4
   2b854:	blt	2b7bc <__assert_fail@plt+0x198f4>
   2b858:	b	2b8ec <__assert_fail@plt+0x19a24>
   2b85c:	ldr	r2, [ip, #48]	; 0x30
   2b860:	cmp	r3, r2
   2b864:	bgt	2bb28 <__assert_fail@plt+0x19c60>
   2b868:	ldr	r0, [ip, #36]	; 0x24
   2b86c:	ldr	r6, [ip, #104]	; 0x68
   2b870:	cmp	r0, r3
   2b874:	cmple	r0, r2
   2b878:	blt	2b888 <__assert_fail@plt+0x199c0>
   2b87c:	cmp	r1, r3
   2b880:	cmple	r1, r2
   2b884:	bge	2b8a8 <__assert_fail@plt+0x199e0>
   2b888:	add	r1, r3, #1
   2b88c:	mov	r0, ip
   2b890:	mov	r9, r3
   2b894:	bl	2be90 <__assert_fail@plt+0x19fc8>
   2b898:	ldr	ip, [sp, #44]	; 0x2c
   2b89c:	mov	r3, r9
   2b8a0:	cmp	r0, #0
   2b8a4:	bne	2be68 <__assert_fail@plt+0x19fa0>
   2b8a8:	cmp	r3, r6
   2b8ac:	ble	2b8d8 <__assert_fail@plt+0x19a10>
   2b8b0:	sub	r0, r3, r6
   2b8b4:	mov	r1, #0
   2b8b8:	lsl	r2, r0, #2
   2b8bc:	ldr	r0, [ip, #100]	; 0x64
   2b8c0:	add	r0, r0, r6, lsl #2
   2b8c4:	mov	r6, r3
   2b8c8:	add	r0, r0, #4
   2b8cc:	bl	11d0c <memset@plt>
   2b8d0:	ldr	ip, [sp, #44]	; 0x2c
   2b8d4:	str	r6, [ip, #104]	; 0x68
   2b8d8:	ldr	r9, [ip, #4]
   2b8dc:	ldr	r6, [sp, #40]	; 0x28
   2b8e0:	b	2b7e8 <__assert_fail@plt+0x19920>
   2b8e4:	ldr	r0, [r6, #16]
   2b8e8:	mov	r1, r5
   2b8ec:	cmp	r8, r0
   2b8f0:	blt	2bb34 <__assert_fail@plt+0x19c6c>
   2b8f4:	cmp	r8, #0
   2b8f8:	addne	r1, r1, #1
   2b8fc:	cmp	r1, lr
   2b900:	ble	2b91c <__assert_fail@plt+0x19a54>
   2b904:	b	2bb34 <__assert_fail@plt+0x19c6c>
   2b908:	ldr	r6, [sp, #40]	; 0x28
   2b90c:	add	r1, sl, #1
   2b910:	cmp	sl, lr
   2b914:	mov	r9, r8
   2b918:	bge	2bb34 <__assert_fail@plt+0x19c6c>
   2b91c:	ldr	r0, [r6]
   2b920:	mov	sl, r1
   2b924:	cmp	r1, r0
   2b928:	ble	2b954 <__assert_fail@plt+0x19a8c>
   2b92c:	ldr	r0, [ip, #28]
   2b930:	cmp	r7, r0
   2b934:	bge	2bab8 <__assert_fail@plt+0x19bf0>
   2b938:	add	r5, r7, #1
   2b93c:	add	r1, sl, r9
   2b940:	ldrb	r0, [r9, r7]
   2b944:	ldrb	r1, [r1, #-1]
   2b948:	cmp	r0, r1
   2b94c:	beq	2b958 <__assert_fail@plt+0x19a90>
   2b950:	b	2bb34 <__assert_fail@plt+0x19c6c>
   2b954:	mov	r5, r7
   2b958:	ldr	r0, [ip, #100]	; 0x64
   2b95c:	mov	r8, r9
   2b960:	mov	r7, r5
   2b964:	ldr	r2, [r0, sl, lsl #2]
   2b968:	cmp	r2, #0
   2b96c:	beq	2b908 <__assert_fail@plt+0x19a40>
   2b970:	ldr	r0, [r2, #8]
   2b974:	cmp	r0, #1
   2b978:	blt	2b908 <__assert_fail@plt+0x19a40>
   2b97c:	ldr	r1, [sp, #36]	; 0x24
   2b980:	ldr	r2, [r2, #12]
   2b984:	ldr	r4, [sp, #32]
   2b988:	ldr	r1, [r1]
   2b98c:	b	2b99c <__assert_fail@plt+0x19ad4>
   2b990:	add	r2, r2, #4
   2b994:	subs	r0, r0, #1
   2b998:	beq	2b908 <__assert_fail@plt+0x19a40>
   2b99c:	ldr	r5, [r2]
   2b9a0:	add	r3, r1, r5, lsl #3
   2b9a4:	ldrb	r3, [r3, #4]
   2b9a8:	cmp	r3, #9
   2b9ac:	bne	2b990 <__assert_fail@plt+0x19ac8>
   2b9b0:	ldr	r3, [r1, r5, lsl #3]
   2b9b4:	cmp	r3, r4
   2b9b8:	bne	2b990 <__assert_fail@plt+0x19ac8>
   2b9bc:	cmn	r5, #1
   2b9c0:	beq	2b908 <__assert_fail@plt+0x19a40>
   2b9c4:	ldr	r1, [r6, #8]
   2b9c8:	mov	r4, lr
   2b9cc:	str	r7, [fp, #-48]	; 0xffffffd0
   2b9d0:	cmp	r1, #0
   2b9d4:	bne	2ba04 <__assert_fail@plt+0x19b3c>
   2b9d8:	ldr	r0, [r6]
   2b9dc:	mov	r9, #12
   2b9e0:	sub	r0, sl, r0
   2b9e4:	add	r1, r0, #1
   2b9e8:	mov	r0, #12
   2b9ec:	bl	347bc <__assert_fail@plt+0x228f4>
   2b9f0:	ldr	ip, [sp, #44]	; 0x2c
   2b9f4:	mov	r1, r0
   2b9f8:	cmp	r0, #0
   2b9fc:	str	r0, [r6, #8]
   2ba00:	beq	2be58 <__assert_fail@plt+0x19f90>
   2ba04:	ldr	r3, [r6]
   2ba08:	ldr	r2, [r6, #4]
   2ba0c:	mov	r0, #9
   2ba10:	stm	sp, {r5, sl}
   2ba14:	str	r0, [sp, #8]
   2ba18:	mov	r0, ip
   2ba1c:	bl	2c6ec <__assert_fail@plt+0x1a824>
   2ba20:	ldr	ip, [sp, #44]	; 0x2c
   2ba24:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2ba28:	cmp	r0, #1
   2ba2c:	mov	lr, r4
   2ba30:	beq	2b908 <__assert_fail@plt+0x19a40>
   2ba34:	mov	r9, r0
   2ba38:	cmp	r0, #0
   2ba3c:	bne	2be58 <__assert_fail@plt+0x19f90>
   2ba40:	ldr	r7, [sp, #40]	; 0x28
   2ba44:	ldr	r1, [r7, #12]
   2ba48:	ldr	r0, [r7, #16]
   2ba4c:	cmp	r0, r1
   2ba50:	beq	2bb00 <__assert_fail@plt+0x19c38>
   2ba54:	mov	r0, #1
   2ba58:	mov	r1, #20
   2ba5c:	bl	347bc <__assert_fail@plt+0x228f4>
   2ba60:	cmp	r0, #0
   2ba64:	beq	2be80 <__assert_fail@plt+0x19fb8>
   2ba68:	mov	r2, r0
   2ba6c:	ldr	r0, [r7, #16]
   2ba70:	ldr	r1, [r7, #20]
   2ba74:	ldr	r3, [sp, #48]	; 0x30
   2ba78:	str	r2, [r1, r0, lsl #2]
   2ba7c:	stm	r2, {r5, sl}
   2ba80:	ldr	r5, [sp, #44]	; 0x2c
   2ba84:	add	r0, r0, #1
   2ba88:	mov	r1, r7
   2ba8c:	str	r0, [r7, #16]
   2ba90:	str	r4, [sp]
   2ba94:	mov	r0, r5
   2ba98:	bl	2c524 <__assert_fail@plt+0x1a65c>
   2ba9c:	cmp	r0, #1
   2baa0:	bhi	2be68 <__assert_fail@plt+0x19fa0>
   2baa4:	ldr	r8, [r5, #4]
   2baa8:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2baac:	mov	ip, r5
   2bab0:	mov	lr, r4
   2bab4:	b	2b908 <__assert_fail@plt+0x19a40>
   2bab8:	ldr	r0, [ip, #48]	; 0x30
   2babc:	cmp	r7, r0
   2bac0:	bge	2bb34 <__assert_fail@plt+0x19c6c>
   2bac4:	add	r5, r7, #1
   2bac8:	mov	r0, ip
   2bacc:	mov	r8, r7
   2bad0:	mov	r4, ip
   2bad4:	mov	r1, r5
   2bad8:	bl	2be90 <__assert_fail@plt+0x19fc8>
   2badc:	cmp	r0, #0
   2bae0:	bne	2be68 <__assert_fail@plt+0x19fa0>
   2bae4:	ldr	r9, [r4, #4]
   2bae8:	mov	ip, r4
   2baec:	ldr	r4, [sp, #52]	; 0x34
   2baf0:	ldr	r6, [sp, #40]	; 0x28
   2baf4:	mov	r7, r8
   2baf8:	mov	lr, r4
   2bafc:	b	2b93c <__assert_fail@plt+0x19a74>
   2bb00:	mov	r1, #1
   2bb04:	orr	r6, r1, r0, lsl #1
   2bb08:	ldr	r0, [r7, #20]
   2bb0c:	lsl	r1, r6, #2
   2bb10:	bl	34840 <__assert_fail@plt+0x22978>
   2bb14:	cmp	r0, #0
   2bb18:	beq	2be80 <__assert_fail@plt+0x19fb8>
   2bb1c:	str	r6, [r7, #12]
   2bb20:	str	r0, [r7, #20]
   2bb24:	b	2ba54 <__assert_fail@plt+0x19b8c>
   2bb28:	mov	r1, r5
   2bb2c:	cmp	r8, r0
   2bb30:	bge	2b8f4 <__assert_fail@plt+0x19a2c>
   2bb34:	ldr	r3, [sp, #28]
   2bb38:	ldr	r0, [ip, #124]	; 0x7c
   2bb3c:	add	r3, r3, #1
   2bb40:	cmp	r3, r0
   2bb44:	bge	2bb58 <__assert_fail@plt+0x19c90>
   2bb48:	ldr	r0, [sp, #36]	; 0x24
   2bb4c:	ldr	r2, [sp, #32]
   2bb50:	ldr	r0, [r0]
   2bb54:	b	2b780 <__assert_fail@plt+0x198b8>
   2bb58:	ldr	r0, [ip, #108]	; 0x6c
   2bb5c:	b	2bb64 <__assert_fail@plt+0x19c9c>
   2bb60:	ldr	r0, [sp, #20]
   2bb64:	ldr	r7, [sp, #20]
   2bb68:	mov	r1, #0
   2bb6c:	str	r1, [fp, #-32]	; 0xffffffe0
   2bb70:	cmp	r7, r0
   2bb74:	blt	2bb8c <__assert_fail@plt+0x19cc4>
   2bb78:	b	2b54c <__assert_fail@plt+0x19684>
   2bb7c:	ldr	r0, [ip, #108]	; 0x6c
   2bb80:	add	r7, r7, #1
   2bb84:	cmp	r7, r0
   2bb88:	bge	2b54c <__assert_fail@plt+0x19684>
   2bb8c:	ldr	r0, [ip, #116]	; 0x74
   2bb90:	add	r1, r7, r7, lsl #1
   2bb94:	ldr	r3, [sp, #48]	; 0x30
   2bb98:	ldr	r2, [r0, r1, lsl #3]
   2bb9c:	cmp	r2, r3
   2bba0:	bne	2bb7c <__assert_fail@plt+0x19cb4>
   2bba4:	add	r0, r0, r1, lsl #3
   2bba8:	ldr	r2, [sp, #52]	; 0x34
   2bbac:	ldr	r1, [r0, #4]
   2bbb0:	cmp	r1, r2
   2bbb4:	bne	2bb7c <__assert_fail@plt+0x19cb4>
   2bbb8:	str	r7, [sp, #20]
   2bbbc:	ldr	r4, [r0, #8]
   2bbc0:	ldr	r7, [r0, #12]
   2bbc4:	ldr	r0, [sp, #24]
   2bbc8:	ldr	r8, [r0, #24]
   2bbcc:	cmp	r7, r4
   2bbd0:	bne	2bbec <__assert_fail@plt+0x19d24>
   2bbd4:	ldr	r1, [sp, #48]	; 0x30
   2bbd8:	ldr	r0, [r0, #20]
   2bbdc:	add	r1, r1, r1, lsl #1
   2bbe0:	add	r0, r0, r1, lsl #2
   2bbe4:	ldr	r0, [r0, #8]
   2bbe8:	b	2bbf8 <__assert_fail@plt+0x19d30>
   2bbec:	ldr	r0, [r0, #12]
   2bbf0:	ldr	r1, [sp, #48]	; 0x30
   2bbf4:	add	r0, r0, r1, lsl #2
   2bbf8:	ldr	r9, [r0]
   2bbfc:	ldr	r0, [sp, #52]	; 0x34
   2bc00:	add	r0, r7, r0
   2bc04:	sub	r5, r0, r4
   2bc08:	cmp	r5, #0
   2bc0c:	ble	2bc48 <__assert_fail@plt+0x19d80>
   2bc10:	ldr	r1, [ip, #48]	; 0x30
   2bc14:	sub	r0, r5, #1
   2bc18:	cmp	r1, r0
   2bc1c:	beq	2bdd8 <__assert_fail@plt+0x19f10>
   2bc20:	ldr	r1, [ip, #80]	; 0x50
   2bc24:	cmp	r1, #2
   2bc28:	blt	2bc50 <__assert_fail@plt+0x19d88>
   2bc2c:	ldr	r1, [ip, #8]
   2bc30:	ldr	r6, [r1, r0, lsl #2]
   2bc34:	cmn	r6, #1
   2bc38:	bne	2bc80 <__assert_fail@plt+0x19db8>
   2bc3c:	sub	r0, r0, #1
   2bc40:	cmn	r0, #1
   2bc44:	bne	2bc30 <__assert_fail@plt+0x19d68>
   2bc48:	ldr	sl, [ip, #60]	; 0x3c
   2bc4c:	b	2bca8 <__assert_fail@plt+0x19de0>
   2bc50:	ldr	r1, [ip, #4]
   2bc54:	ldr	r2, [ip, #68]	; 0x44
   2bc58:	mov	sl, #1
   2bc5c:	ldrb	r0, [r1, r0]
   2bc60:	ubfx	r1, r0, #5, #3
   2bc64:	ldr	r1, [r2, r1, lsl #2]
   2bc68:	and	r2, r0, #31
   2bc6c:	tst	r1, sl, lsl r2
   2bc70:	moveq	sl, #0
   2bc74:	cmpeq	r0, #10
   2bc78:	bne	2bca8 <__assert_fail@plt+0x19de0>
   2bc7c:	b	2bc98 <__assert_fail@plt+0x19dd0>
   2bc80:	ldrb	r0, [ip, #78]	; 0x4e
   2bc84:	cmp	r0, #0
   2bc88:	bne	2bde8 <__assert_fail@plt+0x19f20>
   2bc8c:	mov	sl, #0
   2bc90:	cmp	r6, #10
   2bc94:	bne	2bca8 <__assert_fail@plt+0x19de0>
   2bc98:	ldrb	r0, [ip, #77]	; 0x4d
   2bc9c:	cmp	r0, #0
   2bca0:	movwne	r0, #1
   2bca4:	lsl	sl, r0, #1
   2bca8:	ldr	r0, [ip, #100]	; 0x64
   2bcac:	ldr	r2, [sp, #52]	; 0x34
   2bcb0:	add	r1, r9, r9, lsl #1
   2bcb4:	ldr	r2, [r0, r2, lsl #2]
   2bcb8:	ldr	r0, [r0, r5, lsl #2]
   2bcbc:	cmp	r2, #0
   2bcc0:	beq	2bccc <__assert_fail@plt+0x19e04>
   2bcc4:	ldr	r2, [r2, #8]
   2bcc8:	b	2bcd0 <__assert_fail@plt+0x19e08>
   2bccc:	mov	r2, #0
   2bcd0:	add	r8, r8, r1, lsl #2
   2bcd4:	sub	r6, fp, #44	; 0x2c
   2bcd8:	cmp	r0, #0
   2bcdc:	str	r2, [fp, #-48]	; 0xffffffd0
   2bce0:	beq	2bd34 <__assert_fail@plt+0x19e6c>
   2bce4:	ldr	r1, [r0, #40]	; 0x28
   2bce8:	mov	r0, r6
   2bcec:	mov	r2, r8
   2bcf0:	bl	2c29c <__assert_fail@plt+0x1a3d4>
   2bcf4:	cmp	r0, #0
   2bcf8:	str	r0, [fp, #-32]	; 0xffffffe0
   2bcfc:	bne	2be70 <__assert_fail@plt+0x19fa8>
   2bd00:	ldr	r1, [sp, #24]
   2bd04:	sub	r0, fp, #32
   2bd08:	mov	r2, r6
   2bd0c:	mov	r3, sl
   2bd10:	bl	2a378 <__assert_fail@plt+0x184b0>
   2bd14:	ldr	r6, [sp, #44]	; 0x2c
   2bd18:	ldr	r1, [r6, #100]	; 0x64
   2bd1c:	str	r0, [r1, r5, lsl #2]
   2bd20:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2bd24:	bl	176c0 <__assert_fail@plt+0x57f8>
   2bd28:	ldr	r0, [r6, #100]	; 0x64
   2bd2c:	mov	ip, r6
   2bd30:	b	2bd58 <__assert_fail@plt+0x19e90>
   2bd34:	ldr	r1, [sp, #24]
   2bd38:	sub	r0, fp, #32
   2bd3c:	mov	r2, r8
   2bd40:	mov	r3, sl
   2bd44:	bl	2a378 <__assert_fail@plt+0x184b0>
   2bd48:	ldr	ip, [sp, #44]	; 0x2c
   2bd4c:	ldr	r1, [ip, #100]	; 0x64
   2bd50:	str	r0, [r1, r5, lsl #2]
   2bd54:	ldr	r0, [ip, #100]	; 0x64
   2bd58:	ldr	r1, [r0, r5, lsl #2]
   2bd5c:	cmp	r1, #0
   2bd60:	bne	2bd70 <__assert_fail@plt+0x19ea8>
   2bd64:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2bd68:	cmp	r9, #0
   2bd6c:	bne	2be5c <__assert_fail@plt+0x19f94>
   2bd70:	cmp	r7, r4
   2bd74:	ldr	r7, [sp, #20]
   2bd78:	bne	2bb7c <__assert_fail@plt+0x19cb4>
   2bd7c:	ldr	r1, [sp, #52]	; 0x34
   2bd80:	ldr	r0, [r0, r1, lsl #2]
   2bd84:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2bd88:	ldr	r0, [r0, #8]
   2bd8c:	cmp	r0, r1
   2bd90:	ble	2bb7c <__assert_fail@plt+0x19cb4>
   2bd94:	ldr	r2, [sp, #52]	; 0x34
   2bd98:	mov	r0, ip
   2bd9c:	mov	r1, r8
   2bda0:	mov	r4, ip
   2bda4:	bl	2b410 <__assert_fail@plt+0x19548>
   2bda8:	cmp	r0, #0
   2bdac:	str	r0, [fp, #-32]	; 0xffffffe0
   2bdb0:	bne	2be88 <__assert_fail@plt+0x19fc0>
   2bdb4:	mov	r0, r4
   2bdb8:	mov	r1, r8
   2bdbc:	bl	2b510 <__assert_fail@plt+0x19648>
   2bdc0:	ldr	r7, [sp, #20]
   2bdc4:	cmp	r0, #0
   2bdc8:	mov	ip, r4
   2bdcc:	str	r0, [fp, #-32]	; 0xffffffe0
   2bdd0:	beq	2bb7c <__assert_fail@plt+0x19cb4>
   2bdd4:	b	2be88 <__assert_fail@plt+0x19fc0>
   2bdd8:	ldr	r0, [ip, #88]	; 0x58
   2bddc:	and	r0, r0, #2
   2bde0:	eor	sl, r0, #10
   2bde4:	b	2bca8 <__assert_fail@plt+0x19de0>
   2bde8:	mov	r0, r6
   2bdec:	bl	11ce8 <iswalnum@plt>
   2bdf0:	mov	sl, #1
   2bdf4:	cmp	r6, #95	; 0x5f
   2bdf8:	beq	2be0c <__assert_fail@plt+0x19f44>
   2bdfc:	ldr	ip, [sp, #44]	; 0x2c
   2be00:	cmp	r0, #0
   2be04:	beq	2bc8c <__assert_fail@plt+0x19dc4>
   2be08:	b	2bca8 <__assert_fail@plt+0x19de0>
   2be0c:	ldr	ip, [sp, #44]	; 0x2c
   2be10:	b	2bca8 <__assert_fail@plt+0x19de0>
   2be14:	ldr	r0, [ip, #88]	; 0x58
   2be18:	and	r0, r0, #2
   2be1c:	eor	r1, r0, #10
   2be20:	b	2b654 <__assert_fail@plt+0x1978c>
   2be24:	mov	r0, r6
   2be28:	bl	11ce8 <iswalnum@plt>
   2be2c:	mov	r1, #1
   2be30:	mov	r2, #0
   2be34:	cmp	r6, #95	; 0x5f
   2be38:	beq	2be4c <__assert_fail@plt+0x19f84>
   2be3c:	ldr	ip, [sp, #44]	; 0x2c
   2be40:	cmp	r0, #0
   2be44:	beq	2b638 <__assert_fail@plt+0x19770>
   2be48:	b	2b66c <__assert_fail@plt+0x197a4>
   2be4c:	ldr	ip, [sp, #44]	; 0x2c
   2be50:	b	2b66c <__assert_fail@plt+0x197a4>
   2be54:	mov	r9, #0
   2be58:	str	r9, [fp, #-32]	; 0xffffffe0
   2be5c:	mov	r0, r9
   2be60:	sub	sp, fp, #28
   2be64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be68:	mov	r9, r0
   2be6c:	b	2be58 <__assert_fail@plt+0x19f90>
   2be70:	mov	r9, r0
   2be74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2be78:	bl	176c0 <__assert_fail@plt+0x57f8>
   2be7c:	b	2be5c <__assert_fail@plt+0x19f94>
   2be80:	mov	r9, #12
   2be84:	b	2be58 <__assert_fail@plt+0x19f90>
   2be88:	mov	r9, r0
   2be8c:	b	2be5c <__assert_fail@plt+0x19f94>
   2be90:	push	{r4, r5, r6, r7, fp, lr}
   2be94:	add	fp, sp, #16
   2be98:	mov	r4, r0
   2be9c:	ldr	r0, [r0, #36]	; 0x24
   2bea0:	mov	r5, #12
   2bea4:	cmn	r0, #-536870910	; 0xe0000002
   2bea8:	bhi	2c084 <__assert_fail@plt+0x1a1bc>
   2beac:	ldr	r6, [r4, #48]	; 0x30
   2beb0:	ldr	r2, [r4, #80]	; 0x50
   2beb4:	cmp	r6, r0, lsl #1
   2beb8:	lslge	r6, r0, #1
   2bebc:	cmp	r6, r1
   2bec0:	movle	r6, r1
   2bec4:	cmp	r2, #2
   2bec8:	blt	2bf10 <__assert_fail@plt+0x1a048>
   2becc:	cmn	r6, #-1073741823	; 0xc0000001
   2bed0:	bhi	2c084 <__assert_fail@plt+0x1a1bc>
   2bed4:	ldr	r0, [r4, #8]
   2bed8:	lsl	r7, r6, #2
   2bedc:	mov	r1, r7
   2bee0:	bl	34840 <__assert_fail@plt+0x22978>
   2bee4:	cmp	r0, #0
   2bee8:	beq	2c084 <__assert_fail@plt+0x1a1bc>
   2beec:	str	r0, [r4, #8]
   2bef0:	ldr	r0, [r4, #12]
   2bef4:	cmp	r0, #0
   2bef8:	beq	2bf10 <__assert_fail@plt+0x1a048>
   2befc:	mov	r1, r7
   2bf00:	bl	34840 <__assert_fail@plt+0x22978>
   2bf04:	cmp	r0, #0
   2bf08:	beq	2c084 <__assert_fail@plt+0x1a1bc>
   2bf0c:	str	r0, [r4, #12]
   2bf10:	ldrb	r0, [r4, #75]	; 0x4b
   2bf14:	cmp	r0, #0
   2bf18:	beq	2bf34 <__assert_fail@plt+0x1a06c>
   2bf1c:	ldr	r0, [r4, #4]
   2bf20:	mov	r1, r6
   2bf24:	bl	34840 <__assert_fail@plt+0x22978>
   2bf28:	cmp	r0, #0
   2bf2c:	beq	2c084 <__assert_fail@plt+0x1a1bc>
   2bf30:	str	r0, [r4, #4]
   2bf34:	str	r6, [r4, #36]	; 0x24
   2bf38:	ldr	r0, [r4, #100]	; 0x64
   2bf3c:	cmp	r0, #0
   2bf40:	beq	2bf5c <__assert_fail@plt+0x1a094>
   2bf44:	mov	r1, #4
   2bf48:	add	r1, r1, r6, lsl #2
   2bf4c:	bl	34840 <__assert_fail@plt+0x22978>
   2bf50:	cmp	r0, #0
   2bf54:	beq	2c084 <__assert_fail@plt+0x1a1bc>
   2bf58:	str	r0, [r4, #100]	; 0x64
   2bf5c:	ldrb	r1, [r4, #72]	; 0x48
   2bf60:	ldr	r0, [r4, #80]	; 0x50
   2bf64:	cmp	r1, #0
   2bf68:	beq	2bf88 <__assert_fail@plt+0x1a0c0>
   2bf6c:	cmp	r0, #2
   2bf70:	blt	2bf9c <__assert_fail@plt+0x1a0d4>
   2bf74:	mov	r0, r4
   2bf78:	bl	24420 <__assert_fail@plt+0x12558>
   2bf7c:	cmp	r0, #0
   2bf80:	beq	2c080 <__assert_fail@plt+0x1a1b8>
   2bf84:	pop	{r4, r5, r6, r7, fp, pc}
   2bf88:	cmp	r0, #2
   2bf8c:	blt	2c00c <__assert_fail@plt+0x1a144>
   2bf90:	mov	r0, r4
   2bf94:	bl	24d20 <__assert_fail@plt+0x12e58>
   2bf98:	b	2c080 <__assert_fail@plt+0x1a1b8>
   2bf9c:	ldr	r6, [r4, #36]	; 0x24
   2bfa0:	ldr	r0, [r4, #48]	; 0x30
   2bfa4:	ldr	r5, [r4, #28]
   2bfa8:	cmp	r6, r0
   2bfac:	movgt	r6, r0
   2bfb0:	cmp	r5, r6
   2bfb4:	bge	2c000 <__assert_fail@plt+0x1a138>
   2bfb8:	bl	11c4c <__ctype_toupper_loc@plt>
   2bfbc:	ldr	r1, [r4]
   2bfc0:	ldr	r3, [r4, #24]
   2bfc4:	ldr	r2, [r4, #64]	; 0x40
   2bfc8:	add	r1, r1, r3
   2bfcc:	cmp	r2, #0
   2bfd0:	ldrb	r1, [r1, r5]
   2bfd4:	bne	2bff8 <__assert_fail@plt+0x1a130>
   2bfd8:	ldr	r2, [r0]
   2bfdc:	ldr	r1, [r2, r1, lsl #2]
   2bfe0:	ldr	r2, [r4, #4]
   2bfe4:	strb	r1, [r2, r5]
   2bfe8:	add	r5, r5, #1
   2bfec:	cmp	r5, r6
   2bff0:	blt	2bfbc <__assert_fail@plt+0x1a0f4>
   2bff4:	b	2c000 <__assert_fail@plt+0x1a138>
   2bff8:	ldrb	r1, [r2, r1]
   2bffc:	b	2bfd8 <__assert_fail@plt+0x1a110>
   2c000:	str	r5, [r4, #28]
   2c004:	str	r5, [r4, #32]
   2c008:	b	2c080 <__assert_fail@plt+0x1a1b8>
   2c00c:	ldr	r2, [r4, #64]	; 0x40
   2c010:	cmp	r2, #0
   2c014:	beq	2c080 <__assert_fail@plt+0x1a1b8>
   2c018:	ldr	r1, [r4, #36]	; 0x24
   2c01c:	ldr	r3, [r4, #48]	; 0x30
   2c020:	ldr	r0, [r4, #28]
   2c024:	cmp	r1, r3
   2c028:	movgt	r1, r3
   2c02c:	cmp	r0, r1
   2c030:	bge	2c078 <__assert_fail@plt+0x1a1b0>
   2c034:	ldr	r6, [r4, #24]
   2c038:	ldm	r4, {r3, r7}
   2c03c:	add	r6, r6, r0
   2c040:	ldrb	r3, [r3, r6]
   2c044:	ldrb	r2, [r2, r3]
   2c048:	strb	r2, [r7, r0]
   2c04c:	add	r0, r0, #1
   2c050:	cmp	r0, r1
   2c054:	bge	2c078 <__assert_fail@plt+0x1a1b0>
   2c058:	ldr	r7, [r4, #24]
   2c05c:	ldm	r4, {r2, r3}
   2c060:	ldr	r6, [r4, #64]	; 0x40
   2c064:	add	r2, r2, r7
   2c068:	ldrb	r2, [r2, r0]
   2c06c:	ldrb	r2, [r6, r2]
   2c070:	strb	r2, [r3, r0]
   2c074:	b	2c04c <__assert_fail@plt+0x1a184>
   2c078:	str	r0, [r4, #28]
   2c07c:	str	r0, [r4, #32]
   2c080:	mov	r5, #0
   2c084:	mov	r0, r5
   2c088:	pop	{r4, r5, r6, r7, fp, pc}
   2c08c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2c090:	add	fp, sp, #24
   2c094:	sub	sp, sp, #16
   2c098:	mov	r9, r0
   2c09c:	mov	r4, r1
   2c0a0:	ldr	r5, [r1, #40]	; 0x28
   2c0a4:	ldr	r7, [r1, #84]	; 0x54
   2c0a8:	ldr	r0, [r1, #100]	; 0x64
   2c0ac:	ldr	r1, [r1, #104]	; 0x68
   2c0b0:	mov	r6, r2
   2c0b4:	cmp	r5, r1
   2c0b8:	ble	2c0c8 <__assert_fail@plt+0x1a200>
   2c0bc:	str	r6, [r0, r5, lsl #2]
   2c0c0:	str	r5, [r4, #104]	; 0x68
   2c0c4:	b	2c1f8 <__assert_fail@plt+0x1a330>
   2c0c8:	ldr	r1, [r0, r5, lsl #2]
   2c0cc:	cmp	r1, #0
   2c0d0:	beq	2c10c <__assert_fail@plt+0x1a244>
   2c0d4:	ldr	r2, [r1, #40]	; 0x28
   2c0d8:	cmp	r6, #0
   2c0dc:	beq	2c114 <__assert_fail@plt+0x1a24c>
   2c0e0:	ldr	r8, [r6, #40]	; 0x28
   2c0e4:	mov	r0, sp
   2c0e8:	mov	r1, r8
   2c0ec:	bl	2c29c <__assert_fail@plt+0x1a3d4>
   2c0f0:	cmp	r0, #0
   2c0f4:	str	r0, [r9]
   2c0f8:	bne	2c264 <__assert_fail@plt+0x1a39c>
   2c0fc:	ldr	r0, [r4, #40]	; 0x28
   2c100:	cmp	r0, #0
   2c104:	bgt	2c134 <__assert_fail@plt+0x1a26c>
   2c108:	b	2c16c <__assert_fail@plt+0x1a2a4>
   2c10c:	str	r6, [r0, r5, lsl #2]
   2c110:	b	2c1f8 <__assert_fail@plt+0x1a330>
   2c114:	vldr	d16, [r2]
   2c118:	ldr	r0, [r2, #8]
   2c11c:	mov	r8, #0
   2c120:	str	r0, [sp, #8]
   2c124:	mov	r0, r5
   2c128:	vstr	d16, [sp]
   2c12c:	cmp	r0, #0
   2c130:	ble	2c16c <__assert_fail@plt+0x1a2a4>
   2c134:	ldr	r1, [r4, #48]	; 0x30
   2c138:	sub	r0, r0, #1
   2c13c:	cmp	r1, r0
   2c140:	beq	2c26c <__assert_fail@plt+0x1a3a4>
   2c144:	ldr	r1, [r4, #80]	; 0x50
   2c148:	cmp	r1, #2
   2c14c:	blt	2c174 <__assert_fail@plt+0x1a2ac>
   2c150:	ldr	r1, [r4, #8]
   2c154:	ldr	r6, [r1, r0, lsl #2]
   2c158:	cmn	r6, #1
   2c15c:	bne	2c1a4 <__assert_fail@plt+0x1a2dc>
   2c160:	sub	r0, r0, #1
   2c164:	cmn	r0, #1
   2c168:	bne	2c154 <__assert_fail@plt+0x1a28c>
   2c16c:	ldr	r3, [r4, #60]	; 0x3c
   2c170:	b	2c1cc <__assert_fail@plt+0x1a304>
   2c174:	ldr	r1, [r4, #4]
   2c178:	ldr	r2, [r4, #68]	; 0x44
   2c17c:	mov	r3, #1
   2c180:	ldrb	r0, [r1, r0]
   2c184:	ubfx	r1, r0, #5, #3
   2c188:	ldr	r1, [r2, r1, lsl #2]
   2c18c:	and	r2, r0, #31
   2c190:	tst	r1, r3, lsl r2
   2c194:	moveq	r3, #0
   2c198:	cmpeq	r0, #10
   2c19c:	bne	2c1cc <__assert_fail@plt+0x1a304>
   2c1a0:	b	2c1bc <__assert_fail@plt+0x1a2f4>
   2c1a4:	ldrb	r0, [r4, #78]	; 0x4e
   2c1a8:	cmp	r0, #0
   2c1ac:	bne	2c27c <__assert_fail@plt+0x1a3b4>
   2c1b0:	mov	r3, #0
   2c1b4:	cmp	r6, #10
   2c1b8:	bne	2c1cc <__assert_fail@plt+0x1a304>
   2c1bc:	ldrb	r0, [r4, #77]	; 0x4d
   2c1c0:	cmp	r0, #0
   2c1c4:	movwne	r0, #1
   2c1c8:	lsl	r3, r0, #1
   2c1cc:	mov	r2, sp
   2c1d0:	mov	r0, r9
   2c1d4:	mov	r1, r7
   2c1d8:	bl	2a378 <__assert_fail@plt+0x184b0>
   2c1dc:	mov	r6, r0
   2c1e0:	ldr	r0, [r4, #100]	; 0x64
   2c1e4:	cmp	r8, #0
   2c1e8:	str	r6, [r0, r5, lsl #2]
   2c1ec:	beq	2c1f8 <__assert_fail@plt+0x1a330>
   2c1f0:	ldr	r0, [sp, #8]
   2c1f4:	bl	176c0 <__assert_fail@plt+0x57f8>
   2c1f8:	cmp	r6, #0
   2c1fc:	ldrne	r0, [r7, #76]	; 0x4c
   2c200:	cmpne	r0, #0
   2c204:	bne	2c214 <__assert_fail@plt+0x1a34c>
   2c208:	mov	r0, r6
   2c20c:	sub	sp, fp, #24
   2c210:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c214:	add	r7, r6, #4
   2c218:	mov	r0, r4
   2c21c:	mov	r2, r5
   2c220:	mov	r1, r7
   2c224:	bl	2b410 <__assert_fail@plt+0x19548>
   2c228:	cmp	r0, #0
   2c22c:	str	r0, [r9]
   2c230:	bne	2c264 <__assert_fail@plt+0x1a39c>
   2c234:	ldrb	r0, [r6, #52]	; 0x34
   2c238:	tst	r0, #64	; 0x40
   2c23c:	beq	2c208 <__assert_fail@plt+0x1a340>
   2c240:	mov	r0, r4
   2c244:	mov	r1, r7
   2c248:	bl	2b510 <__assert_fail@plt+0x19648>
   2c24c:	str	r0, [r9]
   2c250:	cmp	r0, #0
   2c254:	mov	r6, #0
   2c258:	ldreq	r0, [r4, #100]	; 0x64
   2c25c:	ldreq	r6, [r0, r5, lsl #2]
   2c260:	b	2c208 <__assert_fail@plt+0x1a340>
   2c264:	mov	r6, #0
   2c268:	b	2c208 <__assert_fail@plt+0x1a340>
   2c26c:	ldr	r0, [r4, #88]	; 0x58
   2c270:	and	r0, r0, #2
   2c274:	eor	r3, r0, #10
   2c278:	b	2c1cc <__assert_fail@plt+0x1a304>
   2c27c:	mov	r0, r6
   2c280:	bl	11ce8 <iswalnum@plt>
   2c284:	mov	r3, #1
   2c288:	cmp	r6, #95	; 0x5f
   2c28c:	beq	2c1cc <__assert_fail@plt+0x1a304>
   2c290:	cmp	r0, #0
   2c294:	beq	2c1b0 <__assert_fail@plt+0x1a2e8>
   2c298:	b	2c1cc <__assert_fail@plt+0x1a304>
   2c29c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2a0:	add	fp, sp, #28
   2c2a4:	sub	sp, sp, #20
   2c2a8:	mov	sl, r2
   2c2ac:	cmp	r1, #0
   2c2b0:	str	r0, [sp, #16]
   2c2b4:	beq	2c428 <__assert_fail@plt+0x1a560>
   2c2b8:	ldr	r0, [r1, #4]
   2c2bc:	mov	r8, r1
   2c2c0:	cmp	sl, #0
   2c2c4:	beq	2c3e4 <__assert_fail@plt+0x1a51c>
   2c2c8:	cmp	r0, #1
   2c2cc:	blt	2c3e4 <__assert_fail@plt+0x1a51c>
   2c2d0:	ldr	r1, [sl, #4]
   2c2d4:	cmp	r1, #1
   2c2d8:	blt	2c3e4 <__assert_fail@plt+0x1a51c>
   2c2dc:	ldr	r4, [sp, #16]
   2c2e0:	add	r0, r1, r0
   2c2e4:	str	r0, [r4]
   2c2e8:	lsl	r0, r0, #2
   2c2ec:	bl	34810 <__assert_fail@plt+0x22948>
   2c2f0:	cmp	r0, #0
   2c2f4:	str	r0, [r4, #8]
   2c2f8:	beq	2c518 <__assert_fail@plt+0x1a650>
   2c2fc:	ldr	r9, [sl, #4]
   2c300:	ldr	lr, [r8, #4]
   2c304:	mov	r7, #0
   2c308:	mov	r1, #0
   2c30c:	cmp	r9, #0
   2c310:	movwgt	r1, #1
   2c314:	cmp	lr, #1
   2c318:	blt	2c49c <__assert_fail@plt+0x1a5d4>
   2c31c:	mov	r2, #0
   2c320:	mov	ip, #0
   2c324:	str	r2, [sp, #8]
   2c328:	mov	r2, #0
   2c32c:	str	r2, [sp, #12]
   2c330:	mov	r2, #0
   2c334:	ldr	r4, [sp, #12]
   2c338:	mov	r7, ip
   2c33c:	tst	r1, #1
   2c340:	beq	2c4cc <__assert_fail@plt+0x1a604>
   2c344:	ldr	r1, [sl, #8]
   2c348:	ldr	r5, [r1, r7, lsl #2]
   2c34c:	ldr	r1, [r8, #8]
   2c350:	ldr	r3, [r1, r2, lsl #2]
   2c354:	cmp	r3, r5
   2c358:	ble	2c380 <__assert_fail@plt+0x1a4b8>
   2c35c:	add	r7, r7, #1
   2c360:	str	r5, [r0, r4, lsl #2]
   2c364:	mov	r1, #0
   2c368:	add	r4, r4, #1
   2c36c:	cmp	r9, r7
   2c370:	movwgt	r1, #1
   2c374:	cmp	lr, r2
   2c378:	bgt	2c33c <__assert_fail@plt+0x1a474>
   2c37c:	b	2c4a0 <__assert_fail@plt+0x1a5d8>
   2c380:	str	r3, [r0, r4, lsl #2]
   2c384:	ldr	r6, [sp, #8]
   2c388:	add	r1, r7, #1
   2c38c:	mov	ip, r7
   2c390:	add	r2, r2, #1
   2c394:	ldr	r9, [sl, #4]
   2c398:	ldr	lr, [r8, #4]
   2c39c:	moveq	ip, r1
   2c3a0:	str	r1, [sp, #4]
   2c3a4:	mov	r1, #0
   2c3a8:	sub	r6, r6, #1
   2c3ac:	cmp	r9, ip
   2c3b0:	str	r6, [sp, #8]
   2c3b4:	add	r6, r4, #1
   2c3b8:	movwgt	r1, #1
   2c3bc:	cmp	lr, r2
   2c3c0:	str	r6, [sp, #12]
   2c3c4:	bgt	2c334 <__assert_fail@plt+0x1a46c>
   2c3c8:	ldr	r2, [sp, #4]
   2c3cc:	cmp	r3, r5
   2c3d0:	add	r4, r4, #1
   2c3d4:	moveq	r7, r2
   2c3d8:	cmp	r1, #0
   2c3dc:	bne	2c4a8 <__assert_fail@plt+0x1a5e0>
   2c3e0:	b	2c4f4 <__assert_fail@plt+0x1a62c>
   2c3e4:	cmp	r0, #1
   2c3e8:	blt	2c428 <__assert_fail@plt+0x1a560>
   2c3ec:	ldr	r1, [sp, #16]
   2c3f0:	str	r0, [r1, #4]
   2c3f4:	ldr	r1, [r8, #4]
   2c3f8:	cmp	r1, #1
   2c3fc:	blt	2c480 <__assert_fail@plt+0x1a5b8>
   2c400:	ldr	r4, [sp, #16]
   2c404:	str	r0, [r4]
   2c408:	lsl	r0, r0, #2
   2c40c:	bl	34810 <__assert_fail@plt+0x22948>
   2c410:	cmp	r0, #0
   2c414:	str	r0, [r4, #8]
   2c418:	beq	2c508 <__assert_fail@plt+0x1a640>
   2c41c:	ldr	r2, [r8, #4]
   2c420:	ldr	r1, [r8, #8]
   2c424:	b	2c474 <__assert_fail@plt+0x1a5ac>
   2c428:	cmp	sl, #0
   2c42c:	beq	2c480 <__assert_fail@plt+0x1a5b8>
   2c430:	ldr	r0, [sl, #4]
   2c434:	cmp	r0, #1
   2c438:	blt	2c480 <__assert_fail@plt+0x1a5b8>
   2c43c:	ldr	r1, [sp, #16]
   2c440:	str	r0, [r1, #4]
   2c444:	ldr	r1, [sl, #4]
   2c448:	cmp	r1, #1
   2c44c:	blt	2c480 <__assert_fail@plt+0x1a5b8>
   2c450:	ldr	r4, [sp, #16]
   2c454:	str	r0, [r4]
   2c458:	lsl	r0, r0, #2
   2c45c:	bl	34810 <__assert_fail@plt+0x22948>
   2c460:	cmp	r0, #0
   2c464:	str	r0, [r4, #8]
   2c468:	beq	2c508 <__assert_fail@plt+0x1a640>
   2c46c:	ldr	r2, [sl, #4]
   2c470:	ldr	r1, [sl, #8]
   2c474:	lsl	r2, r2, #2
   2c478:	bl	11ab4 <memcpy@plt>
   2c47c:	b	2c4fc <__assert_fail@plt+0x1a634>
   2c480:	ldr	r1, [sp, #16]
   2c484:	mov	r0, #0
   2c488:	str	r0, [r1]
   2c48c:	str	r0, [r1, #4]
   2c490:	str	r0, [r1, #8]
   2c494:	sub	sp, fp, #28
   2c498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c49c:	mov	r4, #0
   2c4a0:	cmp	r1, #0
   2c4a4:	beq	2c4f4 <__assert_fail@plt+0x1a62c>
   2c4a8:	ldr	r1, [sl, #8]
   2c4ac:	sub	r2, r9, r7
   2c4b0:	add	r0, r0, r4, lsl #2
   2c4b4:	lsl	r2, r2, #2
   2c4b8:	add	r1, r1, r7, lsl #2
   2c4bc:	bl	11ab4 <memcpy@plt>
   2c4c0:	sub	r0, r4, r7
   2c4c4:	add	r4, r0, r9
   2c4c8:	b	2c4f4 <__assert_fail@plt+0x1a62c>
   2c4cc:	ldr	r1, [r8, #8]
   2c4d0:	add	r0, r0, r4, lsl #2
   2c4d4:	add	r1, r1, r2, lsl #2
   2c4d8:	sub	r2, lr, r2
   2c4dc:	lsl	r2, r2, #2
   2c4e0:	bl	11ab4 <memcpy@plt>
   2c4e4:	ldr	r0, [r8, #4]
   2c4e8:	ldr	r1, [sp, #8]
   2c4ec:	add	r0, r0, r1
   2c4f0:	add	r4, r0, r4
   2c4f4:	ldr	r0, [sp, #16]
   2c4f8:	str	r4, [r0, #4]
   2c4fc:	mov	r0, #0
   2c500:	sub	sp, fp, #28
   2c504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c508:	ldr	r1, [sp, #16]
   2c50c:	mov	r0, #0
   2c510:	str	r0, [r1]
   2c514:	str	r0, [r1, #4]
   2c518:	mov	r0, #12
   2c51c:	sub	sp, fp, #28
   2c520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c528:	add	fp, sp, #28
   2c52c:	sub	sp, sp, #12
   2c530:	mov	r6, r2
   2c534:	mov	r7, r3
   2c538:	ldr	r2, [r2]
   2c53c:	mov	r4, r0
   2c540:	mov	r0, #8
   2c544:	mov	r8, r1
   2c548:	ldr	r9, [fp, #8]
   2c54c:	ldr	r3, [r6, #4]
   2c550:	str	r0, [sp, #8]
   2c554:	add	r1, r6, #8
   2c558:	mov	r0, r4
   2c55c:	stm	sp, {r7, r9}
   2c560:	bl	2c6ec <__assert_fail@plt+0x1a824>
   2c564:	mov	r5, r0
   2c568:	cmp	r0, #0
   2c56c:	beq	2c57c <__assert_fail@plt+0x1a6b4>
   2c570:	mov	r0, r5
   2c574:	sub	sp, fp, #28
   2c578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c57c:	ldr	r0, [r4, #108]	; 0x6c
   2c580:	ldr	r1, [r4, #112]	; 0x70
   2c584:	ldr	sl, [r6, #4]
   2c588:	ldr	r5, [r8]
   2c58c:	cmp	r0, r1
   2c590:	blt	2c5e0 <__assert_fail@plt+0x1a718>
   2c594:	ldr	r0, [r4, #116]	; 0x74
   2c598:	add	r1, r1, r1, lsl #1
   2c59c:	lsl	r1, r1, #4
   2c5a0:	bl	34840 <__assert_fail@plt+0x22978>
   2c5a4:	cmp	r0, #0
   2c5a8:	beq	2c6dc <__assert_fail@plt+0x1a814>
   2c5ac:	str	r0, [r4, #116]	; 0x74
   2c5b0:	ldr	r1, [r4, #108]	; 0x6c
   2c5b4:	ldr	r2, [r4, #112]	; 0x70
   2c5b8:	add	r1, r1, r1, lsl #1
   2c5bc:	add	r0, r0, r1, lsl #3
   2c5c0:	add	r1, r2, r2, lsl #1
   2c5c4:	lsl	r2, r1, #3
   2c5c8:	mov	r1, #0
   2c5cc:	bl	11d0c <memset@plt>
   2c5d0:	ldr	r1, [r4, #112]	; 0x70
   2c5d4:	ldr	r0, [r4, #108]	; 0x6c
   2c5d8:	lsl	r1, r1, #1
   2c5dc:	str	r1, [r4, #112]	; 0x70
   2c5e0:	ldr	r1, [r4, #116]	; 0x74
   2c5e4:	cmp	r0, #1
   2c5e8:	blt	2c608 <__assert_fail@plt+0x1a740>
   2c5ec:	sub	r2, r0, #1
   2c5f0:	add	r2, r2, r2, lsl #1
   2c5f4:	add	r2, r1, r2, lsl #3
   2c5f8:	ldr	r3, [r2, #4]
   2c5fc:	cmp	r3, r9
   2c600:	moveq	r3, #1
   2c604:	strbeq	r3, [r2, #20]
   2c608:	add	r2, r0, r0, lsl #1
   2c60c:	cmp	sl, r5
   2c610:	mov	r3, #0
   2c614:	mov	ip, #0
   2c618:	add	r0, r0, #1
   2c61c:	mvneq	r3, #0
   2c620:	str	r7, [r1, r2, lsl #3]!
   2c624:	str	r9, [r1, #4]
   2c628:	str	r5, [r1, #8]
   2c62c:	str	sl, [r1, #12]
   2c630:	str	r3, [r1, #16]
   2c634:	str	r0, [r4, #108]	; 0x6c
   2c638:	strb	ip, [r1, #20]
   2c63c:	sub	r0, sl, r5
   2c640:	ldr	r1, [r4, #120]	; 0x78
   2c644:	cmp	r1, r0
   2c648:	strlt	r0, [r4, #120]	; 0x78
   2c64c:	ldr	r0, [r6, #4]
   2c650:	ldr	r1, [r8]
   2c654:	ldr	r7, [r4, #104]	; 0x68
   2c658:	add	r0, r0, r9
   2c65c:	sub	r6, r0, r1
   2c660:	ldr	r0, [r4, #36]	; 0x24
   2c664:	cmp	r0, r6
   2c668:	bgt	2c678 <__assert_fail@plt+0x1a7b0>
   2c66c:	ldr	r1, [r4, #48]	; 0x30
   2c670:	cmp	r0, r1
   2c674:	blt	2c690 <__assert_fail@plt+0x1a7c8>
   2c678:	ldr	r0, [r4, #28]
   2c67c:	cmp	r0, r6
   2c680:	bgt	2c6a8 <__assert_fail@plt+0x1a7e0>
   2c684:	ldr	r1, [r4, #48]	; 0x30
   2c688:	cmp	r0, r1
   2c68c:	bge	2c6a8 <__assert_fail@plt+0x1a7e0>
   2c690:	add	r1, r6, #1
   2c694:	mov	r0, r4
   2c698:	bl	2be90 <__assert_fail@plt+0x19fc8>
   2c69c:	mov	r5, r0
   2c6a0:	cmp	r0, #0
   2c6a4:	bne	2c570 <__assert_fail@plt+0x1a6a8>
   2c6a8:	mov	r5, #0
   2c6ac:	cmp	r6, r7
   2c6b0:	ble	2c570 <__assert_fail@plt+0x1a6a8>
   2c6b4:	sub	r0, r6, r7
   2c6b8:	mov	r1, #0
   2c6bc:	mov	r5, #0
   2c6c0:	lsl	r2, r0, #2
   2c6c4:	ldr	r0, [r4, #100]	; 0x64
   2c6c8:	add	r0, r0, r7, lsl #2
   2c6cc:	add	r0, r0, #4
   2c6d0:	bl	11d0c <memset@plt>
   2c6d4:	str	r6, [r4, #104]	; 0x68
   2c6d8:	b	2c570 <__assert_fail@plt+0x1a6a8>
   2c6dc:	ldr	r0, [r4, #116]	; 0x74
   2c6e0:	bl	176c0 <__assert_fail@plt+0x57f8>
   2c6e4:	mov	r5, #12
   2c6e8:	b	2c570 <__assert_fail@plt+0x1a6a8>
   2c6ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c6f0:	add	fp, sp, #28
   2c6f4:	sub	sp, sp, #84	; 0x54
   2c6f8:	ldr	r7, [r0, #84]	; 0x54
   2c6fc:	mov	ip, r1
   2c700:	mov	r1, #0
   2c704:	mov	lr, r2
   2c708:	mov	r9, r3
   2c70c:	str	r0, [sp, #44]	; 0x2c
   2c710:	str	r1, [fp, #-52]	; 0xffffffcc
   2c714:	ldr	r4, [ip, #4]
   2c718:	ldr	r1, [r7]
   2c71c:	str	r7, [sp, #24]
   2c720:	ldr	sl, [r1, r2, lsl #3]
   2c724:	ldr	r1, [r0, #120]	; 0x78
   2c728:	ldr	r2, [fp, #12]
   2c72c:	add	r2, r1, r2
   2c730:	cmp	r4, r2
   2c734:	str	sl, [sp, #20]
   2c738:	ble	2d048 <__assert_fail@plt+0x1b180>
   2c73c:	ldr	r2, [r0, #100]	; 0x64
   2c740:	ldr	r5, [ip]
   2c744:	ldr	r4, [r0, #40]	; 0x28
   2c748:	ldr	r1, [r0, #88]	; 0x58
   2c74c:	str	r2, [sp, #8]
   2c750:	ldr	r2, [ip, #8]
   2c754:	cmp	r5, #0
   2c758:	str	r4, [sp, #12]
   2c75c:	moveq	r5, r9
   2c760:	cmp	r5, #0
   2c764:	str	r2, [r0, #100]	; 0x64
   2c768:	str	r5, [r0, #40]	; 0x28
   2c76c:	ble	2d0b8 <__assert_fail@plt+0x1b1f0>
   2c770:	ldr	r2, [r0, #48]	; 0x30
   2c774:	sub	r3, r5, #1
   2c778:	cmp	r2, r3
   2c77c:	beq	2d0c0 <__assert_fail@plt+0x1b1f8>
   2c780:	ldr	r1, [r0, #80]	; 0x50
   2c784:	cmp	r1, #2
   2c788:	blt	2c7b4 <__assert_fail@plt+0x1a8ec>
   2c78c:	ldr	r1, [r0, #8]
   2c790:	ldr	r6, [r1, r3, lsl #2]
   2c794:	cmn	r6, #1
   2c798:	bne	2c7e4 <__assert_fail@plt+0x1a91c>
   2c79c:	sub	r3, r3, #1
   2c7a0:	cmn	r3, #1
   2c7a4:	bne	2c790 <__assert_fail@plt+0x1a8c8>
   2c7a8:	ldr	r0, [sp, #44]	; 0x2c
   2c7ac:	ldr	r8, [r0, #60]	; 0x3c
   2c7b0:	b	2c814 <__assert_fail@plt+0x1a94c>
   2c7b4:	ldr	r1, [r0, #4]
   2c7b8:	ldr	r2, [r0, #68]	; 0x44
   2c7bc:	mov	r8, #1
   2c7c0:	ldrb	r0, [r1, r3]
   2c7c4:	ubfx	r1, r0, #5, #3
   2c7c8:	ldr	r1, [r2, r1, lsl #2]
   2c7cc:	and	r2, r0, #31
   2c7d0:	tst	r1, r8, lsl r2
   2c7d4:	moveq	r8, #0
   2c7d8:	cmpeq	r0, #10
   2c7dc:	bne	2c814 <__assert_fail@plt+0x1a94c>
   2c7e0:	b	2c800 <__assert_fail@plt+0x1a938>
   2c7e4:	ldr	r0, [sp, #44]	; 0x2c
   2c7e8:	ldrb	r0, [r0, #78]	; 0x4e
   2c7ec:	cmp	r0, #0
   2c7f0:	bne	2d0f4 <__assert_fail@plt+0x1b22c>
   2c7f4:	mov	r8, #0
   2c7f8:	cmp	r6, #10
   2c7fc:	bne	2c814 <__assert_fail@plt+0x1a94c>
   2c800:	ldr	r0, [sp, #44]	; 0x2c
   2c804:	ldrb	r0, [r0, #77]	; 0x4d
   2c808:	cmp	r0, #0
   2c80c:	movwne	r0, #1
   2c810:	lsl	r8, r0, #1
   2c814:	cmp	r5, r9
   2c818:	str	ip, [sp, #16]
   2c81c:	bne	2c8e0 <__assert_fail@plt+0x1aa18>
   2c820:	mov	r0, #1
   2c824:	mov	r6, lr
   2c828:	str	r0, [sp, #52]	; 0x34
   2c82c:	str	r0, [sp, #48]	; 0x30
   2c830:	mov	r0, #4
   2c834:	bl	34810 <__assert_fail@plt+0x22948>
   2c838:	cmp	r0, #0
   2c83c:	str	r0, [sp, #56]	; 0x38
   2c840:	beq	2d0dc <__assert_fail@plt+0x1b214>
   2c844:	ldr	r3, [fp, #16]
   2c848:	str	r6, [r0]
   2c84c:	mov	r0, #0
   2c850:	add	r1, sp, #48	; 0x30
   2c854:	mov	r2, sl
   2c858:	str	r0, [fp, #-52]	; 0xffffffcc
   2c85c:	mov	r0, r7
   2c860:	bl	2d130 <__assert_fail@plt+0x1b268>
   2c864:	cmp	r0, #0
   2c868:	str	r0, [fp, #-52]	; 0xffffffcc
   2c86c:	bne	2d0cc <__assert_fail@plt+0x1b204>
   2c870:	ldr	r0, [sp, #52]	; 0x34
   2c874:	ldr	r9, [sp, #44]	; 0x2c
   2c878:	cmp	r0, #0
   2c87c:	beq	2c8a8 <__assert_fail@plt+0x1a9e0>
   2c880:	ldr	r0, [fp, #16]
   2c884:	ldr	r3, [sp, #20]
   2c888:	add	r1, sp, #48	; 0x30
   2c88c:	mov	r2, r5
   2c890:	str	r0, [sp]
   2c894:	mov	r0, r9
   2c898:	bl	2d268 <__assert_fail@plt+0x1b3a0>
   2c89c:	cmp	r0, #0
   2c8a0:	str	r0, [fp, #-52]	; 0xffffffcc
   2c8a4:	bne	2d0cc <__assert_fail@plt+0x1b204>
   2c8a8:	ldr	r1, [sp, #24]
   2c8ac:	sub	r0, fp, #52	; 0x34
   2c8b0:	add	r2, sp, #48	; 0x30
   2c8b4:	mov	r3, r8
   2c8b8:	bl	2a378 <__assert_fail@plt+0x184b0>
   2c8bc:	mov	r6, r0
   2c8c0:	cmp	r0, #0
   2c8c4:	bne	2c8d4 <__assert_fail@plt+0x1aa0c>
   2c8c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2c8cc:	cmp	r0, #0
   2c8d0:	bne	2d024 <__assert_fail@plt+0x1b15c>
   2c8d4:	ldr	r0, [r9, #100]	; 0x64
   2c8d8:	str	r6, [r0, r5, lsl #2]
   2c8dc:	b	2c974 <__assert_fail@plt+0x1aaac>
   2c8e0:	ldr	r9, [sp, #44]	; 0x2c
   2c8e4:	ldr	r0, [r9, #100]	; 0x64
   2c8e8:	ldr	r6, [r0, r5, lsl #2]
   2c8ec:	cmp	r6, #0
   2c8f0:	beq	2c914 <__assert_fail@plt+0x1aa4c>
   2c8f4:	ldrb	r0, [r6, #52]	; 0x34
   2c8f8:	tst	r0, #64	; 0x40
   2c8fc:	bne	2c928 <__assert_fail@plt+0x1aa60>
   2c900:	mov	r0, #0
   2c904:	str	r0, [sp, #52]	; 0x34
   2c908:	str	r0, [sp, #48]	; 0x30
   2c90c:	str	r0, [sp, #56]	; 0x38
   2c910:	b	2c974 <__assert_fail@plt+0x1aaac>
   2c914:	mov	r6, #0
   2c918:	str	r6, [sp, #52]	; 0x34
   2c91c:	str	r6, [sp, #48]	; 0x30
   2c920:	str	r6, [sp, #56]	; 0x38
   2c924:	b	2c974 <__assert_fail@plt+0x1aaac>
   2c928:	ldr	r0, [r6, #8]
   2c92c:	cmp	r0, #1
   2c930:	str	r0, [sp, #52]	; 0x34
   2c934:	blt	2cfe8 <__assert_fail@plt+0x1b120>
   2c938:	str	r0, [sp, #48]	; 0x30
   2c93c:	lsl	r0, r0, #2
   2c940:	bl	34810 <__assert_fail@plt+0x22948>
   2c944:	cmp	r0, #0
   2c948:	str	r0, [sp, #56]	; 0x38
   2c94c:	beq	2d0dc <__assert_fail@plt+0x1b214>
   2c950:	ldr	r2, [r6, #8]
   2c954:	ldr	r1, [r6, #12]
   2c958:	lsl	r2, r2, #2
   2c95c:	bl	11ab4 <memcpy@plt>
   2c960:	ldrb	r0, [r6, #52]	; 0x34
   2c964:	mov	r1, #0
   2c968:	str	r1, [fp, #-52]	; 0xffffffcc
   2c96c:	tst	r0, #64	; 0x40
   2c970:	bne	2c880 <__assert_fail@plt+0x1a9b8>
   2c974:	ldr	r4, [fp, #12]
   2c978:	cmp	r5, r4
   2c97c:	bge	2cf40 <__assert_fail@plt+0x1b078>
   2c980:	ldr	r7, [sp, #24]
   2c984:	ldr	sl, [sp, #20]
   2c988:	ldr	r4, [fp, #16]
   2c98c:	add	r8, sp, #48	; 0x30
   2c990:	mov	r0, #0
   2c994:	str	r6, [sp, #40]	; 0x28
   2c998:	b	2c9c8 <__assert_fail@plt+0x1ab00>
   2c99c:	ldr	r1, [sp, #40]	; 0x28
   2c9a0:	ldr	r0, [r9, #100]	; 0x64
   2c9a4:	ldr	r5, [sp, #28]
   2c9a8:	str	r1, [r0, r5, lsl #2]
   2c9ac:	cmp	r1, #0
   2c9b0:	ldr	r1, [sp, #32]
   2c9b4:	mov	r0, #0
   2c9b8:	addeq	r0, r1, #1
   2c9bc:	ldr	r1, [fp, #12]
   2c9c0:	cmp	r5, r1
   2c9c4:	beq	2cf3c <__assert_fail@plt+0x1b074>
   2c9c8:	str	r0, [sp, #32]
   2c9cc:	ldr	r0, [r9, #120]	; 0x78
   2c9d0:	ldr	r1, [sp, #32]
   2c9d4:	cmp	r1, r0
   2c9d8:	bgt	2cf40 <__assert_fail@plt+0x1b078>
   2c9dc:	mov	r0, #0
   2c9e0:	add	r1, r5, #1
   2c9e4:	str	r0, [sp, #52]	; 0x34
   2c9e8:	str	r1, [sp, #28]
   2c9ec:	ldr	r0, [r9, #100]	; 0x64
   2c9f0:	ldr	r0, [r0, r1, lsl #2]
   2c9f4:	cmp	r0, #0
   2c9f8:	beq	2ca14 <__assert_fail@plt+0x1ab4c>
   2c9fc:	add	r1, r0, #4
   2ca00:	mov	r0, r8
   2ca04:	bl	2a078 <__assert_fail@plt+0x181b0>
   2ca08:	cmp	r0, #0
   2ca0c:	str	r0, [fp, #-52]	; 0xffffffcc
   2ca10:	bne	2d024 <__assert_fail@plt+0x1b15c>
   2ca14:	ldr	r1, [sp, #40]	; 0x28
   2ca18:	cmp	r1, #0
   2ca1c:	beq	2cdf4 <__assert_fail@plt+0x1af2c>
   2ca20:	mov	r0, #0
   2ca24:	ldr	r8, [r9, #84]	; 0x54
   2ca28:	str	r0, [fp, #-32]	; 0xffffffe0
   2ca2c:	str	r0, [fp, #-44]	; 0xffffffd4
   2ca30:	str	r0, [fp, #-48]	; 0xffffffd0
   2ca34:	str	r0, [fp, #-40]	; 0xffffffd8
   2ca38:	ldr	r1, [r1, #20]
   2ca3c:	cmp	r1, #1
   2ca40:	blt	2cde0 <__assert_fail@plt+0x1af18>
   2ca44:	ldr	r7, [sp, #40]	; 0x28
   2ca48:	mov	r4, #0
   2ca4c:	b	2ca80 <__assert_fail@plt+0x1abb8>
   2ca50:	ldr	r1, [sp, #52]	; 0x34
   2ca54:	cmp	r1, #0
   2ca58:	bne	2cbfc <__assert_fail@plt+0x1ad34>
   2ca5c:	ldr	r0, [sp, #56]	; 0x38
   2ca60:	str	r6, [r0]
   2ca64:	ldr	r0, [sp, #52]	; 0x34
   2ca68:	add	r0, r0, #1
   2ca6c:	str	r0, [sp, #52]	; 0x34
   2ca70:	ldr	r0, [r7, #20]
   2ca74:	add	r4, r4, #1
   2ca78:	cmp	r4, r0
   2ca7c:	bge	2cdd4 <__assert_fail@plt+0x1af0c>
   2ca80:	ldr	r0, [r7, #24]
   2ca84:	ldr	sl, [r0, r4, lsl #2]
   2ca88:	ldr	r0, [r8]
   2ca8c:	add	r1, r0, sl, lsl #3
   2ca90:	ldrb	r1, [r1, #6]
   2ca94:	tst	r1, #16
   2ca98:	beq	2cba8 <__assert_fail@plt+0x1ace0>
   2ca9c:	mov	r0, r8
   2caa0:	mov	r1, sl
   2caa4:	mov	r2, r9
   2caa8:	mov	r3, r5
   2caac:	bl	2dc48 <__assert_fail@plt+0x1bd80>
   2cab0:	mov	r9, r0
   2cab4:	cmp	r0, #2
   2cab8:	blt	2cb94 <__assert_fail@plt+0x1accc>
   2cabc:	ldr	r0, [sp, #44]	; 0x2c
   2cac0:	ldr	r1, [r8, #12]
   2cac4:	add	r6, r9, r5
   2cac8:	ldr	r0, [r0, #100]	; 0x64
   2cacc:	ldr	r1, [r1, sl, lsl #2]
   2cad0:	ldr	r0, [r0, r6, lsl #2]
   2cad4:	str	r1, [sp, #36]	; 0x24
   2cad8:	mov	r1, #0
   2cadc:	str	r1, [fp, #-44]	; 0xffffffd4
   2cae0:	cmp	r0, #0
   2cae4:	beq	2cb00 <__assert_fail@plt+0x1ac38>
   2cae8:	add	r1, r0, #4
   2caec:	sub	r0, fp, #48	; 0x30
   2caf0:	bl	2a078 <__assert_fail@plt+0x181b0>
   2caf4:	cmp	r0, #0
   2caf8:	str	r0, [fp, #-32]	; 0xffffffe0
   2cafc:	bne	2d014 <__assert_fail@plt+0x1b14c>
   2cb00:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2cb04:	cmp	r2, #0
   2cb08:	beq	2cb34 <__assert_fail@plt+0x1ac6c>
   2cb0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2cb10:	ldr	r7, [sp, #36]	; 0x24
   2cb14:	cmp	r1, #0
   2cb18:	bne	2cce4 <__assert_fail@plt+0x1ae1c>
   2cb1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2cb20:	str	r7, [r0]
   2cb24:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2cb28:	add	r0, r0, #1
   2cb2c:	str	r0, [fp, #-44]	; 0xffffffd4
   2cb30:	b	2cb5c <__assert_fail@plt+0x1ac94>
   2cb34:	mov	r0, #1
   2cb38:	str	r0, [fp, #-44]	; 0xffffffd4
   2cb3c:	str	r0, [fp, #-48]	; 0xffffffd0
   2cb40:	mov	r0, #4
   2cb44:	bl	34810 <__assert_fail@plt+0x22948>
   2cb48:	ldr	r1, [sp, #36]	; 0x24
   2cb4c:	cmp	r0, #0
   2cb50:	str	r0, [fp, #-40]	; 0xffffffd8
   2cb54:	beq	2d034 <__assert_fail@plt+0x1b16c>
   2cb58:	str	r1, [r0]
   2cb5c:	sub	r0, fp, #32
   2cb60:	mov	r1, r8
   2cb64:	sub	r2, fp, #48	; 0x30
   2cb68:	bl	2d930 <__assert_fail@plt+0x1ba68>
   2cb6c:	ldr	r2, [sp, #44]	; 0x2c
   2cb70:	ldr	r1, [r2, #100]	; 0x64
   2cb74:	str	r0, [r1, r6, lsl #2]
   2cb78:	ldr	r0, [r2, #100]	; 0x64
   2cb7c:	ldr	r0, [r0, r6, lsl #2]
   2cb80:	cmp	r0, #0
   2cb84:	bne	2cb94 <__assert_fail@plt+0x1accc>
   2cb88:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2cb8c:	cmp	r7, #0
   2cb90:	bne	2d018 <__assert_fail@plt+0x1b150>
   2cb94:	cmp	r9, #0
   2cb98:	ldr	r9, [sp, #44]	; 0x2c
   2cb9c:	ldr	r7, [sp, #40]	; 0x28
   2cba0:	bne	2cbc0 <__assert_fail@plt+0x1acf8>
   2cba4:	ldr	r0, [r8]
   2cba8:	add	r1, r0, sl, lsl #3
   2cbac:	mov	r0, r9
   2cbb0:	mov	r2, r5
   2cbb4:	bl	2dfac <__assert_fail@plt+0x1c0e4>
   2cbb8:	cmp	r0, #0
   2cbbc:	beq	2ca70 <__assert_fail@plt+0x1aba8>
   2cbc0:	ldr	r0, [r8, #12]
   2cbc4:	ldr	r2, [sp, #48]	; 0x30
   2cbc8:	ldr	r6, [r0, sl, lsl #2]
   2cbcc:	cmp	r2, #0
   2cbd0:	bne	2ca50 <__assert_fail@plt+0x1ab88>
   2cbd4:	mov	r0, #1
   2cbd8:	str	r0, [sp, #52]	; 0x34
   2cbdc:	str	r0, [sp, #48]	; 0x30
   2cbe0:	mov	r0, #4
   2cbe4:	bl	34810 <__assert_fail@plt+0x22948>
   2cbe8:	cmp	r0, #0
   2cbec:	str	r0, [sp, #56]	; 0x38
   2cbf0:	beq	2d000 <__assert_fail@plt+0x1b138>
   2cbf4:	str	r6, [r0]
   2cbf8:	b	2ca70 <__assert_fail@plt+0x1aba8>
   2cbfc:	cmp	r2, r1
   2cc00:	bne	2cc2c <__assert_fail@plt+0x1ad64>
   2cc04:	lsl	r0, r2, #1
   2cc08:	lsl	r1, r2, #3
   2cc0c:	str	r0, [sp, #48]	; 0x30
   2cc10:	ldr	r0, [sp, #56]	; 0x38
   2cc14:	bl	34840 <__assert_fail@plt+0x22978>
   2cc18:	cmp	r0, #0
   2cc1c:	beq	2d00c <__assert_fail@plt+0x1b144>
   2cc20:	str	r0, [sp, #56]	; 0x38
   2cc24:	ldr	r1, [sp, #52]	; 0x34
   2cc28:	b	2cc30 <__assert_fail@plt+0x1ad68>
   2cc2c:	ldr	r0, [sp, #56]	; 0x38
   2cc30:	ldr	r2, [r0]
   2cc34:	cmp	r2, r6
   2cc38:	ble	2ccac <__assert_fail@plt+0x1ade4>
   2cc3c:	cmp	r1, #1
   2cc40:	blt	2ccdc <__assert_fail@plt+0x1ae14>
   2cc44:	ands	r7, r1, #3
   2cc48:	sub	ip, r1, #1
   2cc4c:	beq	2cc70 <__assert_fail@plt+0x1ada8>
   2cc50:	add	lr, r0, r1, lsl #2
   2cc54:	mov	r3, lr
   2cc58:	ldr	r2, [r3, #-4]!
   2cc5c:	subs	r7, r7, #1
   2cc60:	sub	r1, r1, #1
   2cc64:	str	r2, [lr]
   2cc68:	mov	lr, r3
   2cc6c:	bne	2cc58 <__assert_fail@plt+0x1ad90>
   2cc70:	cmp	ip, #3
   2cc74:	bcc	2cca0 <__assert_fail@plt+0x1add8>
   2cc78:	add	r2, r0, r1, lsl #2
   2cc7c:	sub	r2, r2, #8
   2cc80:	sub	lr, r2, #8
   2cc84:	sub	r1, r1, #4
   2cc88:	sub	sl, r2, #4
   2cc8c:	sub	r2, r2, #16
   2cc90:	ldm	lr, {r3, r7, ip, lr}
   2cc94:	cmp	r1, #0
   2cc98:	stm	sl, {r3, r7, ip, lr}
   2cc9c:	bgt	2cc80 <__assert_fail@plt+0x1adb8>
   2cca0:	ldr	r7, [sp, #40]	; 0x28
   2cca4:	mov	r1, #0
   2cca8:	b	2ccdc <__assert_fail@plt+0x1ae14>
   2ccac:	add	r2, r0, r1, lsl #2
   2ccb0:	ldr	r3, [r2, #-4]
   2ccb4:	cmp	r3, r6
   2ccb8:	ble	2ccdc <__assert_fail@plt+0x1ae14>
   2ccbc:	sub	r1, r1, #2
   2ccc0:	str	r3, [r2]
   2ccc4:	sub	r1, r1, #1
   2ccc8:	ldr	r3, [r2, #-8]
   2cccc:	sub	r2, r2, #4
   2ccd0:	cmp	r3, r6
   2ccd4:	bgt	2ccc0 <__assert_fail@plt+0x1adf8>
   2ccd8:	add	r1, r1, #2
   2ccdc:	str	r6, [r0, r1, lsl #2]
   2cce0:	b	2ca64 <__assert_fail@plt+0x1ab9c>
   2cce4:	cmp	r2, r1
   2cce8:	bne	2cd14 <__assert_fail@plt+0x1ae4c>
   2ccec:	lsl	r0, r2, #1
   2ccf0:	lsl	r1, r2, #3
   2ccf4:	str	r0, [fp, #-48]	; 0xffffffd0
   2ccf8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2ccfc:	bl	34840 <__assert_fail@plt+0x22978>
   2cd00:	cmp	r0, #0
   2cd04:	beq	2d00c <__assert_fail@plt+0x1b144>
   2cd08:	str	r0, [fp, #-40]	; 0xffffffd8
   2cd0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2cd10:	b	2cd18 <__assert_fail@plt+0x1ae50>
   2cd14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2cd18:	ldr	r2, [r0]
   2cd1c:	cmp	r2, r7
   2cd20:	ble	2cd9c <__assert_fail@plt+0x1aed4>
   2cd24:	cmp	r1, #1
   2cd28:	blt	2cdcc <__assert_fail@plt+0x1af04>
   2cd2c:	ands	r3, r1, #3
   2cd30:	sub	ip, r1, #1
   2cd34:	beq	2cd58 <__assert_fail@plt+0x1ae90>
   2cd38:	add	lr, r0, r1, lsl #2
   2cd3c:	mov	r7, lr
   2cd40:	ldr	r2, [r7, #-4]!
   2cd44:	subs	r3, r3, #1
   2cd48:	sub	r1, r1, #1
   2cd4c:	str	r2, [lr]
   2cd50:	mov	lr, r7
   2cd54:	bne	2cd40 <__assert_fail@plt+0x1ae78>
   2cd58:	cmp	ip, #3
   2cd5c:	bcc	2cd90 <__assert_fail@plt+0x1aec8>
   2cd60:	add	r2, r0, r1, lsl #2
   2cd64:	sub	r2, r2, #8
   2cd68:	sub	lr, r2, #8
   2cd6c:	sub	r1, r1, #4
   2cd70:	ldm	lr, {r3, r7, ip, lr}
   2cd74:	cmp	r1, #0
   2cd78:	str	r3, [r2, #-4]
   2cd7c:	str	r7, [r2]
   2cd80:	str	ip, [r2, #4]
   2cd84:	str	lr, [r2, #8]
   2cd88:	sub	r2, r2, #16
   2cd8c:	bgt	2cd68 <__assert_fail@plt+0x1aea0>
   2cd90:	ldr	r7, [sp, #36]	; 0x24
   2cd94:	mov	r1, #0
   2cd98:	b	2cdcc <__assert_fail@plt+0x1af04>
   2cd9c:	add	r2, r0, r1, lsl #2
   2cda0:	ldr	r3, [r2, #-4]
   2cda4:	cmp	r3, r7
   2cda8:	ble	2cdcc <__assert_fail@plt+0x1af04>
   2cdac:	sub	r1, r1, #2
   2cdb0:	str	r3, [r2]
   2cdb4:	sub	r1, r1, #1
   2cdb8:	ldr	r3, [r2, #-8]
   2cdbc:	sub	r2, r2, #4
   2cdc0:	cmp	r3, r7
   2cdc4:	bgt	2cdb0 <__assert_fail@plt+0x1aee8>
   2cdc8:	add	r1, r1, #2
   2cdcc:	str	r7, [r0, r1, lsl #2]
   2cdd0:	b	2cb24 <__assert_fail@plt+0x1ac5c>
   2cdd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2cdd8:	ldr	r7, [sp, #24]
   2cddc:	ldr	sl, [sp, #20]
   2cde0:	bl	176c0 <__assert_fail@plt+0x57f8>
   2cde4:	ldr	r4, [fp, #16]
   2cde8:	mov	r0, #0
   2cdec:	add	r8, sp, #48	; 0x30
   2cdf0:	str	r0, [fp, #-52]	; 0xffffffcc
   2cdf4:	ldr	r0, [sp, #52]	; 0x34
   2cdf8:	cmp	r0, #0
   2cdfc:	beq	2ce44 <__assert_fail@plt+0x1af7c>
   2ce00:	mov	r0, r7
   2ce04:	mov	r1, r8
   2ce08:	mov	r2, sl
   2ce0c:	mov	r3, r4
   2ce10:	bl	2d130 <__assert_fail@plt+0x1b268>
   2ce14:	cmp	r0, #0
   2ce18:	str	r0, [fp, #-52]	; 0xffffffcc
   2ce1c:	bne	2d024 <__assert_fail@plt+0x1b15c>
   2ce20:	ldr	r2, [sp, #28]
   2ce24:	mov	r0, r9
   2ce28:	mov	r1, r8
   2ce2c:	mov	r3, sl
   2ce30:	str	r4, [sp]
   2ce34:	bl	2d268 <__assert_fail@plt+0x1b3a0>
   2ce38:	cmp	r0, #0
   2ce3c:	str	r0, [fp, #-52]	; 0xffffffcc
   2ce40:	bne	2d024 <__assert_fail@plt+0x1b15c>
   2ce44:	cmn	r5, #1
   2ce48:	ble	2ce80 <__assert_fail@plt+0x1afb8>
   2ce4c:	ldr	r0, [r9, #48]	; 0x30
   2ce50:	cmp	r0, r5
   2ce54:	beq	2cf0c <__assert_fail@plt+0x1b044>
   2ce58:	ldr	r0, [r9, #80]	; 0x50
   2ce5c:	cmp	r0, #2
   2ce60:	blt	2ce88 <__assert_fail@plt+0x1afc0>
   2ce64:	ldr	r0, [r9, #8]
   2ce68:	ldr	r6, [r0, r5, lsl #2]
   2ce6c:	cmn	r6, #1
   2ce70:	bne	2ceb8 <__assert_fail@plt+0x1aff0>
   2ce74:	sub	r5, r5, #1
   2ce78:	cmn	r5, #1
   2ce7c:	bne	2ce68 <__assert_fail@plt+0x1afa0>
   2ce80:	ldr	r3, [r9, #60]	; 0x3c
   2ce84:	b	2cee0 <__assert_fail@plt+0x1b018>
   2ce88:	ldr	r0, [r9, #4]
   2ce8c:	ldr	r1, [r9, #68]	; 0x44
   2ce90:	mov	r3, #1
   2ce94:	ldrb	r0, [r0, r5]
   2ce98:	ubfx	r2, r0, #5, #3
   2ce9c:	ldr	r1, [r1, r2, lsl #2]
   2cea0:	and	r2, r0, #31
   2cea4:	tst	r1, r3, lsl r2
   2cea8:	moveq	r3, #0
   2ceac:	cmpeq	r0, #10
   2ceb0:	bne	2cee0 <__assert_fail@plt+0x1b018>
   2ceb4:	b	2ced0 <__assert_fail@plt+0x1b008>
   2ceb8:	ldrb	r0, [r9, #78]	; 0x4e
   2cebc:	cmp	r0, #0
   2cec0:	bne	2cf1c <__assert_fail@plt+0x1b054>
   2cec4:	mov	r3, #0
   2cec8:	cmp	r6, #10
   2cecc:	bne	2cee0 <__assert_fail@plt+0x1b018>
   2ced0:	ldrb	r0, [r9, #77]	; 0x4d
   2ced4:	cmp	r0, #0
   2ced8:	movwne	r0, #1
   2cedc:	lsl	r3, r0, #1
   2cee0:	sub	r0, fp, #52	; 0x34
   2cee4:	mov	r1, r7
   2cee8:	mov	r2, r8
   2ceec:	bl	2a378 <__assert_fail@plt+0x184b0>
   2cef0:	cmp	r0, #0
   2cef4:	str	r0, [sp, #40]	; 0x28
   2cef8:	bne	2c99c <__assert_fail@plt+0x1aad4>
   2cefc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2cf00:	cmp	r0, #0
   2cf04:	beq	2c99c <__assert_fail@plt+0x1aad4>
   2cf08:	b	2d024 <__assert_fail@plt+0x1b15c>
   2cf0c:	ldr	r0, [r9, #88]	; 0x58
   2cf10:	and	r0, r0, #2
   2cf14:	eor	r3, r0, #10
   2cf18:	b	2cee0 <__assert_fail@plt+0x1b018>
   2cf1c:	mov	r0, r6
   2cf20:	bl	11ce8 <iswalnum@plt>
   2cf24:	mov	r3, #1
   2cf28:	cmp	r6, #95	; 0x5f
   2cf2c:	beq	2cee0 <__assert_fail@plt+0x1b018>
   2cf30:	cmp	r0, #0
   2cf34:	beq	2cec4 <__assert_fail@plt+0x1affc>
   2cf38:	b	2cee0 <__assert_fail@plt+0x1b018>
   2cf3c:	ldr	r5, [fp, #12]
   2cf40:	ldr	r0, [sp, #56]	; 0x38
   2cf44:	bl	176c0 <__assert_fail@plt+0x57f8>
   2cf48:	ldr	r0, [r9, #100]	; 0x64
   2cf4c:	ldr	r1, [fp, #12]
   2cf50:	mov	sl, #1
   2cf54:	ldr	r1, [r0, r1, lsl #2]
   2cf58:	ldr	r0, [sp, #16]
   2cf5c:	str	r5, [r0]
   2cf60:	ldr	r0, [sp, #12]
   2cf64:	cmp	r1, #0
   2cf68:	addne	r1, r1, #4
   2cf6c:	str	r0, [r9, #40]	; 0x28
   2cf70:	ldr	r0, [sp, #8]
   2cf74:	str	r0, [r9, #100]	; 0x64
   2cf78:	beq	2cfdc <__assert_fail@plt+0x1b114>
   2cf7c:	ldr	r2, [r1, #4]
   2cf80:	cmp	r2, #1
   2cf84:	blt	2cfd8 <__assert_fail@plt+0x1b110>
   2cf88:	ldr	r0, [fp, #8]
   2cf8c:	ldr	r1, [r1, #8]
   2cf90:	subs	r2, r2, #1
   2cf94:	mov	sl, #0
   2cf98:	mov	r3, #0
   2cf9c:	beq	2cfc8 <__assert_fail@plt+0x1b100>
   2cfa0:	mov	r3, #0
   2cfa4:	mov	r7, #1
   2cfa8:	add	r5, r3, r2
   2cfac:	lsr	r4, r5, #1
   2cfb0:	ldr	r6, [r1, r4, lsl #2]
   2cfb4:	cmp	r6, r0
   2cfb8:	addlt	r3, r7, r5, lsr #1
   2cfbc:	movge	r2, r4
   2cfc0:	cmp	r3, r2
   2cfc4:	bcc	2cfa8 <__assert_fail@plt+0x1b0e0>
   2cfc8:	ldr	r1, [r1, r3, lsl #2]
   2cfcc:	cmp	r1, r0
   2cfd0:	movne	sl, #1
   2cfd4:	b	2cfdc <__assert_fail@plt+0x1b114>
   2cfd8:	mov	sl, #1
   2cfdc:	mov	r0, sl
   2cfe0:	sub	sp, fp, #28
   2cfe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfe8:	mov	r0, #0
   2cfec:	str	r0, [sp, #52]	; 0x34
   2cff0:	str	r0, [sp, #48]	; 0x30
   2cff4:	str	r0, [sp, #56]	; 0x38
   2cff8:	str	r0, [fp, #-52]	; 0xffffffcc
   2cffc:	b	2c8a8 <__assert_fail@plt+0x1a9e0>
   2d000:	mov	r0, #0
   2d004:	str	r0, [sp, #48]	; 0x30
   2d008:	str	r0, [sp, #52]	; 0x34
   2d00c:	mov	r7, #12
   2d010:	b	2d018 <__assert_fail@plt+0x1b150>
   2d014:	mov	r7, r0
   2d018:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d01c:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d020:	str	r7, [fp, #-52]	; 0xffffffcc
   2d024:	ldr	r0, [sp, #56]	; 0x38
   2d028:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d02c:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2d030:	b	2cfdc <__assert_fail@plt+0x1b114>
   2d034:	mov	r0, #0
   2d038:	mov	r7, #12
   2d03c:	str	r0, [fp, #-48]	; 0xffffffd0
   2d040:	str	r0, [fp, #-44]	; 0xffffffd4
   2d044:	b	2d01c <__assert_fail@plt+0x1b154>
   2d048:	mvn	r1, #-2147483648	; 0x80000000
   2d04c:	mov	sl, #12
   2d050:	sub	r1, r1, r4
   2d054:	cmp	r1, r2
   2d058:	ble	2cfdc <__assert_fail@plt+0x1b114>
   2d05c:	add	r8, r2, #1
   2d060:	str	lr, [sp, #40]	; 0x28
   2d064:	add	r5, r8, r4
   2d068:	cmn	r5, #-1073741823	; 0xc0000001
   2d06c:	bhi	2cfdc <__assert_fail@plt+0x1b114>
   2d070:	ldr	r0, [ip, #8]
   2d074:	lsl	r1, r5, #2
   2d078:	mov	r6, ip
   2d07c:	bl	34840 <__assert_fail@plt+0x22978>
   2d080:	cmp	r0, #0
   2d084:	beq	2cfdc <__assert_fail@plt+0x1b114>
   2d088:	str	r5, [r6, #4]
   2d08c:	str	r0, [r6, #8]
   2d090:	add	r0, r0, r4, lsl #2
   2d094:	lsl	r2, r8, #2
   2d098:	mov	r1, #0
   2d09c:	bl	11d0c <memset@plt>
   2d0a0:	ldr	r0, [sp, #44]	; 0x2c
   2d0a4:	ldr	r7, [sp, #24]
   2d0a8:	ldr	sl, [sp, #20]
   2d0ac:	ldr	lr, [sp, #40]	; 0x28
   2d0b0:	mov	ip, r6
   2d0b4:	b	2c73c <__assert_fail@plt+0x1a874>
   2d0b8:	ldr	r8, [r0, #60]	; 0x3c
   2d0bc:	b	2c814 <__assert_fail@plt+0x1a94c>
   2d0c0:	and	r0, r1, #2
   2d0c4:	eor	r8, r0, #10
   2d0c8:	b	2c814 <__assert_fail@plt+0x1a94c>
   2d0cc:	mov	sl, r0
   2d0d0:	ldr	r0, [sp, #56]	; 0x38
   2d0d4:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d0d8:	b	2cfdc <__assert_fail@plt+0x1b114>
   2d0dc:	mov	r0, #0
   2d0e0:	mov	sl, #12
   2d0e4:	str	r0, [sp, #48]	; 0x30
   2d0e8:	str	r0, [sp, #52]	; 0x34
   2d0ec:	str	sl, [fp, #-52]	; 0xffffffcc
   2d0f0:	b	2cfdc <__assert_fail@plt+0x1b114>
   2d0f4:	mov	r0, r6
   2d0f8:	str	lr, [sp, #40]	; 0x28
   2d0fc:	mov	r4, ip
   2d100:	bl	11ce8 <iswalnum@plt>
   2d104:	mov	r8, #1
   2d108:	cmp	r6, #95	; 0x5f
   2d10c:	beq	2d124 <__assert_fail@plt+0x1b25c>
   2d110:	ldr	lr, [sp, #40]	; 0x28
   2d114:	cmp	r0, #0
   2d118:	mov	ip, r4
   2d11c:	beq	2c7f4 <__assert_fail@plt+0x1a92c>
   2d120:	b	2c814 <__assert_fail@plt+0x1a94c>
   2d124:	ldr	lr, [sp, #40]	; 0x28
   2d128:	mov	ip, r4
   2d12c:	b	2c814 <__assert_fail@plt+0x1a94c>
   2d130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d134:	add	fp, sp, #28
   2d138:	sub	sp, sp, #20
   2d13c:	str	r0, [sp, #4]
   2d140:	ldr	r0, [r1, #4]
   2d144:	mov	sl, r1
   2d148:	mov	r1, #0
   2d14c:	mov	r5, r3
   2d150:	mov	r8, r2
   2d154:	str	r1, [sp, #12]
   2d158:	str	r0, [sp, #8]
   2d15c:	lsl	r0, r0, #2
   2d160:	bl	34810 <__assert_fail@plt+0x22948>
   2d164:	cmp	r0, #0
   2d168:	str	r0, [sp, #16]
   2d16c:	beq	2d260 <__assert_fail@plt+0x1b398>
   2d170:	ldr	r0, [sl, #4]
   2d174:	cmp	r0, #1
   2d178:	blt	2d228 <__assert_fail@plt+0x1b360>
   2d17c:	mov	r9, #0
   2d180:	ldr	r0, [sl, #8]
   2d184:	ldr	r1, [sp, #4]
   2d188:	ldr	r2, [r0, r9, lsl #2]
   2d18c:	ldr	r1, [r1, #24]
   2d190:	add	r0, r2, r2, lsl #1
   2d194:	add	r1, r1, r0, lsl #2
   2d198:	ldr	r0, [r1, #4]
   2d19c:	cmp	r0, #1
   2d1a0:	blt	2d208 <__assert_fail@plt+0x1b340>
   2d1a4:	ldr	r7, [sp, #4]
   2d1a8:	ldr	r3, [r1, #8]
   2d1ac:	ldr	r7, [r7]
   2d1b0:	b	2d1c0 <__assert_fail@plt+0x1b2f8>
   2d1b4:	add	r3, r3, #4
   2d1b8:	subs	r0, r0, #1
   2d1bc:	beq	2d208 <__assert_fail@plt+0x1b340>
   2d1c0:	ldr	r6, [r3]
   2d1c4:	add	r4, r7, r6, lsl #3
   2d1c8:	ldrb	r4, [r4, #4]
   2d1cc:	cmp	r4, r5
   2d1d0:	bne	2d1b4 <__assert_fail@plt+0x1b2ec>
   2d1d4:	ldr	r4, [r7, r6, lsl #3]
   2d1d8:	cmp	r4, r8
   2d1dc:	bne	2d1b4 <__assert_fail@plt+0x1b2ec>
   2d1e0:	cmn	r6, #1
   2d1e4:	beq	2d208 <__assert_fail@plt+0x1b340>
   2d1e8:	ldr	r0, [sp, #4]
   2d1ec:	add	r1, sp, #8
   2d1f0:	mov	r3, r8
   2d1f4:	str	r5, [sp]
   2d1f8:	bl	2d7f8 <__assert_fail@plt+0x1b930>
   2d1fc:	cmp	r0, #0
   2d200:	beq	2d218 <__assert_fail@plt+0x1b350>
   2d204:	b	2d250 <__assert_fail@plt+0x1b388>
   2d208:	add	r0, sp, #8
   2d20c:	bl	2a078 <__assert_fail@plt+0x181b0>
   2d210:	cmp	r0, #0
   2d214:	bne	2d250 <__assert_fail@plt+0x1b388>
   2d218:	ldr	r0, [sl, #4]
   2d21c:	add	r9, r9, #1
   2d220:	cmp	r9, r0
   2d224:	blt	2d180 <__assert_fail@plt+0x1b2b8>
   2d228:	ldr	r0, [sl, #8]
   2d22c:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d230:	vldr	d16, [sp, #8]
   2d234:	ldr	r0, [sp, #16]
   2d238:	mov	r7, #0
   2d23c:	str	r0, [sl, #8]
   2d240:	vstr	d16, [sl]
   2d244:	mov	r0, r7
   2d248:	sub	sp, fp, #28
   2d24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d250:	mov	r7, r0
   2d254:	ldr	r0, [sp, #16]
   2d258:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d25c:	b	2d244 <__assert_fail@plt+0x1b37c>
   2d260:	mov	r7, #12
   2d264:	b	2d244 <__assert_fail@plt+0x1b37c>
   2d268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d26c:	add	fp, sp, #28
   2d270:	sub	sp, sp, #52	; 0x34
   2d274:	ldr	ip, [r0, #108]	; 0x6c
   2d278:	mov	lr, r1
   2d27c:	ldr	r1, [r0, #84]	; 0x54
   2d280:	str	r0, [sp, #24]
   2d284:	mov	sl, r2
   2d288:	mov	r8, #0
   2d28c:	mov	r0, #0
   2d290:	cmp	ip, #1
   2d294:	str	r1, [sp, #28]
   2d298:	blt	2d2dc <__assert_fail@plt+0x1b414>
   2d29c:	ldr	r0, [sp, #24]
   2d2a0:	mov	r7, #1
   2d2a4:	mov	r1, ip
   2d2a8:	ldr	r2, [r0, #116]	; 0x74
   2d2ac:	mov	r0, #0
   2d2b0:	add	r6, r1, r0
   2d2b4:	add	r6, r6, r6, lsr #31
   2d2b8:	asr	r4, r6, #1
   2d2bc:	add	r5, r4, r4, lsl #1
   2d2c0:	add	r5, r2, r5, lsl #3
   2d2c4:	ldr	r5, [r5, #4]
   2d2c8:	cmp	r5, sl
   2d2cc:	addlt	r0, r7, r6, asr #1
   2d2d0:	movge	r1, r4
   2d2d4:	cmp	r0, r1
   2d2d8:	blt	2d2b0 <__assert_fail@plt+0x1b3e8>
   2d2dc:	cmp	r0, ip
   2d2e0:	bge	2d7e4 <__assert_fail@plt+0x1b91c>
   2d2e4:	cmn	r0, #1
   2d2e8:	beq	2d7e4 <__assert_fail@plt+0x1b91c>
   2d2ec:	ldr	r1, [sp, #24]
   2d2f0:	add	r0, r0, r0, lsl #1
   2d2f4:	str	r0, [sp, #8]
   2d2f8:	ldr	r1, [r1, #116]	; 0x74
   2d2fc:	add	r0, r1, r0, lsl #3
   2d300:	ldr	r0, [r0, #4]
   2d304:	cmp	r0, sl
   2d308:	bne	2d7e4 <__assert_fail@plt+0x1b91c>
   2d30c:	str	r3, [sp, #12]
   2d310:	mov	r9, #1
   2d314:	str	lr, [sp, #16]
   2d318:	ldr	r0, [sp, #8]
   2d31c:	add	r0, r1, r0, lsl #3
   2d320:	b	2d3c0 <__assert_fail@plt+0x1b4f8>
   2d324:	mov	r0, #4
   2d328:	str	r9, [sp, #36]	; 0x24
   2d32c:	mov	r4, r1
   2d330:	str	r9, [sp, #32]
   2d334:	bl	34810 <__assert_fail@plt+0x22948>
   2d338:	cmp	r0, #0
   2d33c:	str	r0, [sp, #40]	; 0x28
   2d340:	beq	2d658 <__assert_fail@plt+0x1b790>
   2d344:	str	r4, [r0]
   2d348:	mov	r0, #0
   2d34c:	str	r0, [fp, #-32]	; 0xffffffe0
   2d350:	ldr	r1, [sp, #28]
   2d354:	sub	r0, fp, #32
   2d358:	add	r2, sp, #32
   2d35c:	bl	2d930 <__assert_fail@plt+0x1ba68>
   2d360:	ldr	r4, [sp, #24]
   2d364:	ldr	r1, [r4, #100]	; 0x64
   2d368:	str	r0, [r1, r7, lsl #2]
   2d36c:	ldr	r0, [sp, #40]	; 0x28
   2d370:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d374:	ldr	r0, [r4, #100]	; 0x64
   2d378:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2d37c:	ldr	r0, [r0, r7, lsl #2]
   2d380:	cmp	r1, #0
   2d384:	mov	r2, r1
   2d388:	movwne	r2, #1
   2d38c:	clz	r0, r0
   2d390:	lsr	r0, r0, #5
   2d394:	ands	r0, r0, r2
   2d398:	ldreq	r1, [sp, #20]
   2d39c:	str	r1, [sp, #20]
   2d3a0:	ldr	lr, [sp, #16]
   2d3a4:	cmp	r0, #0
   2d3a8:	cmpne	r0, #4
   2d3ac:	bne	2d7cc <__assert_fail@plt+0x1b904>
   2d3b0:	ldrb	r1, [r8, #20]
   2d3b4:	add	r0, r8, #24
   2d3b8:	cmp	r1, #0
   2d3bc:	beq	2d7e0 <__assert_fail@plt+0x1b918>
   2d3c0:	mov	r8, r0
   2d3c4:	ldr	r0, [lr, #4]
   2d3c8:	cmp	r0, #1
   2d3cc:	blt	2d3b0 <__assert_fail@plt+0x1b4e8>
   2d3d0:	subs	r6, r0, #1
   2d3d4:	ldr	r2, [r8]
   2d3d8:	ldr	r0, [lr, #8]
   2d3dc:	mov	r3, #0
   2d3e0:	beq	2d408 <__assert_fail@plt+0x1b540>
   2d3e4:	mov	r1, r6
   2d3e8:	add	r7, r3, r1
   2d3ec:	lsr	r5, r7, #1
   2d3f0:	ldr	r4, [r0, r5, lsl #2]
   2d3f4:	cmp	r4, r2
   2d3f8:	addlt	r3, r9, r7, lsr #1
   2d3fc:	movge	r1, r5
   2d400:	cmp	r3, r1
   2d404:	bcc	2d3e8 <__assert_fail@plt+0x1b520>
   2d408:	ldr	r1, [r0, r3, lsl #2]
   2d40c:	cmp	r1, r2
   2d410:	bne	2d3b0 <__assert_fail@plt+0x1b4e8>
   2d414:	ldr	r3, [r8, #12]
   2d418:	ldr	r1, [r8, #8]
   2d41c:	add	r3, r3, sl
   2d420:	sub	r7, r3, r1
   2d424:	cmp	r7, sl
   2d428:	bne	2d514 <__assert_fail@plt+0x1b64c>
   2d42c:	ldr	r1, [sp, #28]
   2d430:	add	r2, r2, r2, lsl #1
   2d434:	cmp	r6, #0
   2d438:	ldr	r1, [r1, #20]
   2d43c:	add	r1, r1, r2, lsl #2
   2d440:	mov	r2, #0
   2d444:	ldr	r1, [r1, #8]
   2d448:	ldr	r4, [r1]
   2d44c:	beq	2d470 <__assert_fail@plt+0x1b5a8>
   2d450:	add	r1, r2, r6
   2d454:	lsr	r3, r1, #1
   2d458:	ldr	r7, [r0, r3, lsl #2]
   2d45c:	cmp	r7, r4
   2d460:	addlt	r2, r9, r1, lsr #1
   2d464:	movge	r6, r3
   2d468:	cmp	r2, r6
   2d46c:	bcc	2d450 <__assert_fail@plt+0x1b588>
   2d470:	ldr	r1, [r0, r2, lsl #2]
   2d474:	mov	r0, #4
   2d478:	cmp	r1, r4
   2d47c:	beq	2d3a4 <__assert_fail@plt+0x1b4dc>
   2d480:	mov	r0, #4
   2d484:	str	r9, [sp, #36]	; 0x24
   2d488:	str	r9, [sp, #32]
   2d48c:	bl	34810 <__assert_fail@plt+0x22948>
   2d490:	cmp	r0, #0
   2d494:	str	r0, [sp, #40]	; 0x28
   2d498:	beq	2d644 <__assert_fail@plt+0x1b77c>
   2d49c:	mov	r6, #0
   2d4a0:	str	r4, [r0]
   2d4a4:	ldr	r0, [sp, #28]
   2d4a8:	ldr	r2, [sp, #12]
   2d4ac:	ldr	r3, [fp, #8]
   2d4b0:	add	r4, sp, #32
   2d4b4:	str	r6, [fp, #-32]	; 0xffffffe0
   2d4b8:	mov	r1, r4
   2d4bc:	bl	2d130 <__assert_fail@plt+0x1b268>
   2d4c0:	ldr	r5, [sp, #16]
   2d4c4:	mov	r7, r0
   2d4c8:	mov	r1, r4
   2d4cc:	mov	r0, r5
   2d4d0:	bl	2a078 <__assert_fail@plt+0x181b0>
   2d4d4:	mov	r4, r0
   2d4d8:	ldr	r0, [sp, #40]	; 0x28
   2d4dc:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d4e0:	orr	r0, r7, r6
   2d4e4:	mov	lr, r5
   2d4e8:	orrs	r0, r0, r4
   2d4ec:	mov	r0, #2
   2d4f0:	beq	2d3a4 <__assert_fail@plt+0x1b4dc>
   2d4f4:	cmp	r7, #0
   2d4f8:	mov	r0, #1
   2d4fc:	movne	r4, r7
   2d500:	cmp	r6, #0
   2d504:	movne	r4, r6
   2d508:	str	r4, [fp, #-32]	; 0xffffffe0
   2d50c:	str	r4, [sp, #20]
   2d510:	b	2d3a4 <__assert_fail@plt+0x1b4dc>
   2d514:	ldr	r0, [sp, #24]
   2d518:	ldr	r0, [r0, #100]	; 0x64
   2d51c:	ldr	r5, [r0, r7, lsl #2]
   2d520:	ldr	r0, [sp, #28]
   2d524:	ldr	r0, [r0, #12]
   2d528:	cmp	r5, #0
   2d52c:	ldr	r1, [r0, r2, lsl #2]
   2d530:	beq	2d324 <__assert_fail@plt+0x1b45c>
   2d534:	ldr	ip, [r5, #8]
   2d538:	cmp	ip, #0
   2d53c:	ble	2d5fc <__assert_fail@plt+0x1b734>
   2d540:	ldr	r0, [r5, #12]
   2d544:	subs	r3, ip, #1
   2d548:	mov	r2, #0
   2d54c:	str	r7, [sp, #4]
   2d550:	beq	2d574 <__assert_fail@plt+0x1b6ac>
   2d554:	add	r6, r2, r3
   2d558:	lsr	r7, r6, #1
   2d55c:	ldr	r4, [r0, r7, lsl #2]
   2d560:	cmp	r4, r1
   2d564:	addlt	r2, r9, r6, lsr #1
   2d568:	movge	r3, r7
   2d56c:	cmp	r2, r3
   2d570:	bcc	2d554 <__assert_fail@plt+0x1b68c>
   2d574:	ldr	r2, [r0, r2, lsl #2]
   2d578:	mov	r0, #4
   2d57c:	cmp	r2, r1
   2d580:	beq	2d3a4 <__assert_fail@plt+0x1b4dc>
   2d584:	ldr	r7, [sp, #4]
   2d588:	mov	r4, r1
   2d58c:	cmp	ip, #1
   2d590:	str	ip, [sp, #36]	; 0x24
   2d594:	blt	2d604 <__assert_fail@plt+0x1b73c>
   2d598:	lsl	r0, ip, #2
   2d59c:	str	ip, [sp, #32]
   2d5a0:	bl	34810 <__assert_fail@plt+0x22948>
   2d5a4:	cmp	r0, #0
   2d5a8:	str	r0, [sp, #40]	; 0x28
   2d5ac:	beq	2d6ac <__assert_fail@plt+0x1b7e4>
   2d5b0:	ldr	r2, [r5, #8]
   2d5b4:	ldr	r1, [r5, #12]
   2d5b8:	mov	r5, r0
   2d5bc:	lsl	r2, r2, #2
   2d5c0:	bl	11ab4 <memcpy@plt>
   2d5c4:	ldr	r1, [sp, #32]
   2d5c8:	mov	r6, #0
   2d5cc:	str	r6, [fp, #-32]	; 0xffffffe0
   2d5d0:	cmp	r1, #0
   2d5d4:	beq	2d618 <__assert_fail@plt+0x1b750>
   2d5d8:	ldr	r0, [sp, #36]	; 0x24
   2d5dc:	cmp	r0, #0
   2d5e0:	bne	2d6c0 <__assert_fail@plt+0x1b7f8>
   2d5e4:	str	r4, [r5]
   2d5e8:	str	r9, [sp, #36]	; 0x24
   2d5ec:	mov	r6, #0
   2d5f0:	cmp	r6, #0
   2d5f4:	beq	2d350 <__assert_fail@plt+0x1b488>
   2d5f8:	b	2d684 <__assert_fail@plt+0x1b7bc>
   2d5fc:	mov	r4, r1
   2d600:	str	ip, [sp, #36]	; 0x24
   2d604:	mov	r6, #0
   2d608:	str	r6, [sp, #36]	; 0x24
   2d60c:	str	r6, [sp, #32]
   2d610:	str	r6, [sp, #40]	; 0x28
   2d614:	str	r6, [fp, #-32]	; 0xffffffe0
   2d618:	mov	r0, #4
   2d61c:	str	r9, [sp, #36]	; 0x24
   2d620:	str	r9, [sp, #32]
   2d624:	bl	34810 <__assert_fail@plt+0x22948>
   2d628:	cmp	r0, #0
   2d62c:	str	r0, [sp, #40]	; 0x28
   2d630:	beq	2d678 <__assert_fail@plt+0x1b7b0>
   2d634:	str	r4, [r0]
   2d638:	cmp	r6, #0
   2d63c:	beq	2d350 <__assert_fail@plt+0x1b488>
   2d640:	b	2d684 <__assert_fail@plt+0x1b7bc>
   2d644:	mov	r0, #0
   2d648:	mov	r6, #12
   2d64c:	str	r0, [sp, #32]
   2d650:	str	r0, [sp, #36]	; 0x24
   2d654:	b	2d4a4 <__assert_fail@plt+0x1b5dc>
   2d658:	mov	r0, #0
   2d65c:	mov	r1, #12
   2d660:	str	r0, [sp, #32]
   2d664:	str	r0, [sp, #36]	; 0x24
   2d668:	mov	r0, #12
   2d66c:	str	r1, [fp, #-32]	; 0xffffffe0
   2d670:	str	r0, [sp, #20]
   2d674:	b	2d6a4 <__assert_fail@plt+0x1b7dc>
   2d678:	mov	r0, #0
   2d67c:	str	r0, [sp, #32]
   2d680:	str	r0, [sp, #36]	; 0x24
   2d684:	clz	r0, r6
   2d688:	lsr	r4, r0, #5
   2d68c:	ldr	r0, [sp, #40]	; 0x28
   2d690:	bl	176c0 <__assert_fail@plt+0x57f8>
   2d694:	cmp	r4, #0
   2d698:	movwne	r6, #12
   2d69c:	str	r6, [sp, #20]
   2d6a0:	str	r6, [fp, #-32]	; 0xffffffe0
   2d6a4:	mov	r0, #1
   2d6a8:	b	2d3a0 <__assert_fail@plt+0x1b4d8>
   2d6ac:	mov	r0, #0
   2d6b0:	mov	r6, #12
   2d6b4:	str	r0, [sp, #32]
   2d6b8:	str	r0, [sp, #36]	; 0x24
   2d6bc:	b	2d614 <__assert_fail@plt+0x1b74c>
   2d6c0:	cmp	r1, r0
   2d6c4:	bne	2d6f0 <__assert_fail@plt+0x1b828>
   2d6c8:	lsl	r0, r1, #1
   2d6cc:	lsl	r1, r1, #3
   2d6d0:	str	r0, [sp, #32]
   2d6d4:	mov	r0, r5
   2d6d8:	bl	34840 <__assert_fail@plt+0x22978>
   2d6dc:	cmp	r0, #0
   2d6e0:	beq	2d7c4 <__assert_fail@plt+0x1b8fc>
   2d6e4:	str	r0, [sp, #40]	; 0x28
   2d6e8:	mov	r5, r0
   2d6ec:	ldr	r0, [sp, #36]	; 0x24
   2d6f0:	ldr	r1, [r5]
   2d6f4:	cmp	r1, r4
   2d6f8:	ble	2d76c <__assert_fail@plt+0x1b8a4>
   2d6fc:	cmp	r0, #1
   2d700:	blt	2d7a0 <__assert_fail@plt+0x1b8d8>
   2d704:	ands	r2, r0, #3
   2d708:	sub	r1, r0, #1
   2d70c:	beq	2d730 <__assert_fail@plt+0x1b868>
   2d710:	add	r6, r5, r0, lsl #2
   2d714:	mov	r3, r6
   2d718:	ldr	r7, [r3, #-4]!
   2d71c:	subs	r2, r2, #1
   2d720:	sub	r0, r0, #1
   2d724:	str	r7, [r6]
   2d728:	mov	r6, r3
   2d72c:	bne	2d718 <__assert_fail@plt+0x1b850>
   2d730:	cmp	r1, #3
   2d734:	bcc	2d764 <__assert_fail@plt+0x1b89c>
   2d738:	add	r1, r5, r0, lsl #2
   2d73c:	sub	r1, r1, #8
   2d740:	ldr	r6, [r1, #4]
   2d744:	ldmda	r1, {r2, r3, r7}
   2d748:	sub	ip, r1, #4
   2d74c:	sub	r0, r0, #4
   2d750:	cmp	r0, #0
   2d754:	stm	ip, {r2, r3, r7}
   2d758:	str	r6, [r1, #8]
   2d75c:	sub	r1, r1, #16
   2d760:	bgt	2d740 <__assert_fail@plt+0x1b878>
   2d764:	mov	r0, #0
   2d768:	b	2d7a0 <__assert_fail@plt+0x1b8d8>
   2d76c:	add	r1, r5, r0, lsl #2
   2d770:	ldr	r2, [r1, #-4]
   2d774:	cmp	r2, r4
   2d778:	ble	2d7a0 <__assert_fail@plt+0x1b8d8>
   2d77c:	sub	r0, r0, #2
   2d780:	mov	r3, r4
   2d784:	str	r2, [r1]
   2d788:	sub	r0, r0, #1
   2d78c:	ldr	r2, [r1, #-8]
   2d790:	sub	r1, r1, #4
   2d794:	cmp	r2, r3
   2d798:	bgt	2d784 <__assert_fail@plt+0x1b8bc>
   2d79c:	add	r0, r0, #2
   2d7a0:	str	r4, [r5, r0, lsl #2]
   2d7a4:	ldr	r7, [sp, #4]
   2d7a8:	mov	r6, #0
   2d7ac:	ldr	r0, [sp, #36]	; 0x24
   2d7b0:	add	r0, r0, #1
   2d7b4:	str	r0, [sp, #36]	; 0x24
   2d7b8:	cmp	r6, #0
   2d7bc:	beq	2d350 <__assert_fail@plt+0x1b488>
   2d7c0:	b	2d684 <__assert_fail@plt+0x1b7bc>
   2d7c4:	mov	r6, #0
   2d7c8:	b	2d684 <__assert_fail@plt+0x1b7bc>
   2d7cc:	cmp	r0, #2
   2d7d0:	bne	2d7f0 <__assert_fail@plt+0x1b928>
   2d7d4:	ldr	r0, [sp, #24]
   2d7d8:	ldr	r1, [r0, #116]	; 0x74
   2d7dc:	b	2d318 <__assert_fail@plt+0x1b450>
   2d7e0:	mov	r8, #0
   2d7e4:	mov	r0, r8
   2d7e8:	sub	sp, fp, #28
   2d7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7f0:	ldr	r8, [sp, #20]
   2d7f4:	b	2d7e4 <__assert_fail@plt+0x1b91c>
   2d7f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7fc:	add	fp, sp, #28
   2d800:	sub	sp, sp, #4
   2d804:	ldr	r4, [fp, #8]
   2d808:	mov	r9, r3
   2d80c:	mov	r7, r2
   2d810:	mov	r8, r1
   2d814:	mov	sl, r0
   2d818:	mov	r5, #1
   2d81c:	b	2d834 <__assert_fail@plt+0x1b96c>
   2d820:	cmp	r2, #0
   2d824:	beq	2d918 <__assert_fail@plt+0x1ba50>
   2d828:	add	r0, r0, r7, lsl #2
   2d82c:	ldr	r0, [r0, #8]
   2d830:	ldr	r7, [r0]
   2d834:	ldr	r0, [r8, #4]
   2d838:	cmp	r0, #1
   2d83c:	blt	2d884 <__assert_fail@plt+0x1b9bc>
   2d840:	subs	r2, r0, #1
   2d844:	ldr	r0, [r8, #8]
   2d848:	mov	ip, r4
   2d84c:	mov	r1, #0
   2d850:	beq	2d874 <__assert_fail@plt+0x1b9ac>
   2d854:	add	r3, r1, r2
   2d858:	lsr	r6, r3, #1
   2d85c:	ldr	r4, [r0, r6, lsl #2]
   2d860:	cmp	r4, r7
   2d864:	addlt	r1, r5, r3, lsr #1
   2d868:	movge	r2, r6
   2d86c:	cmp	r1, r2
   2d870:	bcc	2d854 <__assert_fail@plt+0x1b98c>
   2d874:	ldr	r0, [r0, r1, lsl #2]
   2d878:	mov	r4, ip
   2d87c:	cmp	r0, r7
   2d880:	beq	2d918 <__assert_fail@plt+0x1ba50>
   2d884:	ldr	r0, [sl]
   2d888:	add	r1, r0, r7, lsl #3
   2d88c:	ldrb	r1, [r1, #4]
   2d890:	cmp	r1, r4
   2d894:	bne	2d8a4 <__assert_fail@plt+0x1b9dc>
   2d898:	ldr	r0, [r0, r7, lsl #3]
   2d89c:	cmp	r0, r9
   2d8a0:	beq	2d8fc <__assert_fail@plt+0x1ba34>
   2d8a4:	mov	r0, r8
   2d8a8:	mov	r1, r7
   2d8ac:	bl	2a204 <__assert_fail@plt+0x1833c>
   2d8b0:	cmp	r0, #0
   2d8b4:	beq	2d924 <__assert_fail@plt+0x1ba5c>
   2d8b8:	ldr	r0, [sl, #20]
   2d8bc:	add	r7, r7, r7, lsl #1
   2d8c0:	add	r1, r0, r7, lsl #2
   2d8c4:	ldr	r2, [r1, #4]
   2d8c8:	cmp	r2, #2
   2d8cc:	bne	2d820 <__assert_fail@plt+0x1b958>
   2d8d0:	ldr	r0, [r1, #8]
   2d8d4:	mov	r1, r8
   2d8d8:	mov	r3, r9
   2d8dc:	ldr	r2, [r0, #4]
   2d8e0:	mov	r0, sl
   2d8e4:	str	r4, [sp]
   2d8e8:	bl	2d7f8 <__assert_fail@plt+0x1b930>
   2d8ec:	cmp	r0, #0
   2d8f0:	bne	2d91c <__assert_fail@plt+0x1ba54>
   2d8f4:	ldr	r0, [sl, #20]
   2d8f8:	b	2d828 <__assert_fail@plt+0x1b960>
   2d8fc:	cmp	r4, #9
   2d900:	bne	2d918 <__assert_fail@plt+0x1ba50>
   2d904:	mov	r0, r8
   2d908:	mov	r1, r7
   2d90c:	bl	2a204 <__assert_fail@plt+0x1833c>
   2d910:	cmp	r0, #0
   2d914:	beq	2d924 <__assert_fail@plt+0x1ba5c>
   2d918:	mov	r0, #0
   2d91c:	sub	sp, fp, #28
   2d920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d924:	mov	r0, #12
   2d928:	sub	sp, fp, #28
   2d92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d934:	add	fp, sp, #28
   2d938:	sub	sp, sp, #4
   2d93c:	ldr	r9, [r2, #4]
   2d940:	cmp	r9, #0
   2d944:	beq	2dc08 <__assert_fail@plt+0x1bd40>
   2d948:	mov	r6, r2
   2d94c:	mov	r8, r1
   2d950:	cmp	r9, #1
   2d954:	mov	r7, r9
   2d958:	blt	2da44 <__assert_fail@plt+0x1bb7c>
   2d95c:	ldr	ip, [r6, #8]
   2d960:	mov	sl, #0
   2d964:	cmp	r9, #4
   2d968:	mov	r7, r9
   2d96c:	bcc	2da2c <__assert_fail@plt+0x1bb64>
   2d970:	mov	r3, #0
   2d974:	bic	sl, r9, #3
   2d978:	mov	r1, #1
   2d97c:	str	r8, [sp]
   2d980:	vdup.32	q8, r3
   2d984:	sub	r4, sl, #4
   2d988:	add	r1, r1, r4, lsr #2
   2d98c:	cmp	r4, #12
   2d990:	and	lr, r1, #3
   2d994:	vmov.32	d16[0], r9
   2d998:	bcc	2d9ec <__assert_fail@plt+0x1bb24>
   2d99c:	sub	r5, r1, lr
   2d9a0:	mov	r3, #0
   2d9a4:	mov	r4, #64	; 0x40
   2d9a8:	mov	r7, ip
   2d9ac:	mov	r1, ip
   2d9b0:	vld1.32	{d18-d19}, [r1], r4
   2d9b4:	add	r8, r7, #16
   2d9b8:	add	r2, r7, #32
   2d9bc:	subs	r5, r5, #4
   2d9c0:	add	r3, r3, #16
   2d9c4:	vld1.32	{d20-d21}, [r8]
   2d9c8:	vadd.i32	q8, q9, q8
   2d9cc:	vld1.32	{d18-d19}, [r2]
   2d9d0:	add	r2, r7, #48	; 0x30
   2d9d4:	mov	r7, r1
   2d9d8:	vadd.i32	q8, q10, q8
   2d9dc:	vld1.32	{d20-d21}, [r2]
   2d9e0:	vadd.i32	q8, q9, q8
   2d9e4:	vadd.i32	q8, q10, q8
   2d9e8:	bne	2d9b0 <__assert_fail@plt+0x1bae8>
   2d9ec:	cmp	lr, #0
   2d9f0:	beq	2da0c <__assert_fail@plt+0x1bb44>
   2d9f4:	add	r1, ip, r3, lsl #2
   2d9f8:	rsb	r3, lr, #0
   2d9fc:	vld1.32	{d18-d19}, [r1]!
   2da00:	adds	r3, r3, #1
   2da04:	vadd.i32	q8, q9, q8
   2da08:	bcc	2d9fc <__assert_fail@plt+0x1bb34>
   2da0c:	vext.8	q9, q8, q8, #8
   2da10:	ldr	r8, [sp]
   2da14:	cmp	r9, sl
   2da18:	vadd.i32	q8, q8, q9
   2da1c:	vdup.32	q9, d16[1]
   2da20:	vadd.i32	q8, q8, q9
   2da24:	vmov.32	r7, d16[0]
   2da28:	beq	2da44 <__assert_fail@plt+0x1bb7c>
   2da2c:	add	r1, ip, sl, lsl #2
   2da30:	sub	r2, r9, sl
   2da34:	ldr	r3, [r1], #4
   2da38:	subs	r2, r2, #1
   2da3c:	add	r7, r3, r7
   2da40:	bne	2da34 <__assert_fail@plt+0x1bb6c>
   2da44:	ldr	r1, [r8, #68]	; 0x44
   2da48:	ldr	r2, [r8, #32]
   2da4c:	str	r0, [sp]
   2da50:	and	r1, r1, r7
   2da54:	add	r3, r1, r1, lsl #1
   2da58:	ldr	r1, [r2, r3, lsl #2]
   2da5c:	cmp	r1, #1
   2da60:	blt	2dadc <__assert_fail@plt+0x1bc14>
   2da64:	add	r2, r2, r3, lsl #2
   2da68:	sub	ip, r9, #1
   2da6c:	mov	r5, #0
   2da70:	ldr	lr, [r2, #8]
   2da74:	cmp	r6, #0
   2da78:	bne	2da90 <__assert_fail@plt+0x1bbc8>
   2da7c:	add	r5, r5, #1
   2da80:	cmp	r5, r1
   2da84:	bge	2dadc <__assert_fail@plt+0x1bc14>
   2da88:	cmp	r6, #0
   2da8c:	beq	2da7c <__assert_fail@plt+0x1bbb4>
   2da90:	ldr	r4, [lr, r5, lsl #2]
   2da94:	ldr	r3, [r4]
   2da98:	cmp	r7, r3
   2da9c:	bne	2da7c <__assert_fail@plt+0x1bbb4>
   2daa0:	ldr	r3, [r4, #8]
   2daa4:	cmp	r3, r9
   2daa8:	bne	2da7c <__assert_fail@plt+0x1bbb4>
   2daac:	mov	r3, ip
   2dab0:	add	r0, r3, #1
   2dab4:	cmp	r0, #1
   2dab8:	blt	2dbfc <__assert_fail@plt+0x1bd34>
   2dabc:	ldr	r0, [r6, #8]
   2dac0:	ldr	r2, [r4, #12]
   2dac4:	ldr	r0, [r0, r3, lsl #2]
   2dac8:	ldr	r2, [r2, r3, lsl #2]
   2dacc:	sub	r3, r3, #1
   2dad0:	cmp	r2, r0
   2dad4:	beq	2dab0 <__assert_fail@plt+0x1bbe8>
   2dad8:	b	2da7c <__assert_fail@plt+0x1bbb4>
   2dadc:	mov	r0, #56	; 0x38
   2dae0:	mov	r1, #1
   2dae4:	bl	347bc <__assert_fail@plt+0x228f4>
   2dae8:	cmp	r0, #0
   2daec:	beq	2dc34 <__assert_fail@plt+0x1bd6c>
   2daf0:	mov	r4, r0
   2daf4:	ldr	r0, [r6, #4]
   2daf8:	add	sl, r4, #4
   2dafc:	cmp	r0, #1
   2db00:	str	r0, [r4, #8]
   2db04:	blt	2dbcc <__assert_fail@plt+0x1bd04>
   2db08:	str	r0, [r4, #4]
   2db0c:	lsl	r0, r0, #2
   2db10:	bl	34810 <__assert_fail@plt+0x22948>
   2db14:	cmp	r0, #0
   2db18:	str	r0, [r4, #12]
   2db1c:	beq	2dc20 <__assert_fail@plt+0x1bd58>
   2db20:	ldmib	r6, {r5, r6}
   2db24:	mov	r1, r6
   2db28:	mov	r9, r8
   2db2c:	lsl	r2, r5, #2
   2db30:	bl	11ab4 <memcpy@plt>
   2db34:	cmp	r5, #1
   2db38:	str	sl, [r4, #40]	; 0x28
   2db3c:	blt	2dbe4 <__assert_fail@plt+0x1bd1c>
   2db40:	movw	ip, #65280	; 0xff00
   2db44:	ldr	sl, [r9]
   2db48:	mov	lr, #32
   2db4c:	movt	ip, #3
   2db50:	add	r8, ip, #255	; 0xff
   2db54:	b	2db78 <__assert_fail@plt+0x1bcb0>
   2db58:	ldr	r0, [r1]
   2db5c:	tst	r0, ip
   2db60:	beq	2db6c <__assert_fail@plt+0x1bca4>
   2db64:	orr	r0, r3, #128	; 0x80
   2db68:	strb	r0, [r4, #52]	; 0x34
   2db6c:	add	r6, r6, #4
   2db70:	subs	r5, r5, #1
   2db74:	beq	2dbe4 <__assert_fail@plt+0x1bd1c>
   2db78:	ldr	r0, [r6]
   2db7c:	add	r1, sl, r0, lsl #3
   2db80:	ldr	r0, [r1, #4]!
   2db84:	and	r3, r0, r8
   2db88:	cmp	r3, #1
   2db8c:	beq	2db6c <__assert_fail@plt+0x1bca4>
   2db90:	ldrb	r2, [r4, #52]	; 0x34
   2db94:	and	r3, lr, r0, lsr #15
   2db98:	uxtb	r0, r0
   2db9c:	cmp	r0, #12
   2dba0:	orr	r3, r2, r3
   2dba4:	strb	r3, [r4, #52]	; 0x34
   2dba8:	beq	2db64 <__assert_fail@plt+0x1bc9c>
   2dbac:	cmp	r0, #4
   2dbb0:	beq	2dbc4 <__assert_fail@plt+0x1bcfc>
   2dbb4:	cmp	r0, #2
   2dbb8:	bne	2db58 <__assert_fail@plt+0x1bc90>
   2dbbc:	orr	r0, r3, #16
   2dbc0:	b	2db68 <__assert_fail@plt+0x1bca0>
   2dbc4:	orr	r0, r3, #64	; 0x40
   2dbc8:	b	2db68 <__assert_fail@plt+0x1bca0>
   2dbcc:	mov	r0, #0
   2dbd0:	mov	r9, r8
   2dbd4:	str	r0, [sl]
   2dbd8:	str	r0, [sl, #4]
   2dbdc:	str	r0, [sl, #8]
   2dbe0:	str	sl, [r4, #40]	; 0x28
   2dbe4:	mov	r0, r9
   2dbe8:	mov	r1, r4
   2dbec:	mov	r2, r7
   2dbf0:	bl	2a828 <__assert_fail@plt+0x18960>
   2dbf4:	cmp	r0, #0
   2dbf8:	bne	2dc14 <__assert_fail@plt+0x1bd4c>
   2dbfc:	mov	r0, r4
   2dc00:	sub	sp, fp, #28
   2dc04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc08:	mov	r4, #0
   2dc0c:	str	r4, [r0]
   2dc10:	b	2dbfc <__assert_fail@plt+0x1bd34>
   2dc14:	mov	r0, r4
   2dc18:	bl	243b8 <__assert_fail@plt+0x124f0>
   2dc1c:	b	2dc34 <__assert_fail@plt+0x1bd6c>
   2dc20:	mov	r0, #0
   2dc24:	str	r0, [r4, #4]
   2dc28:	str	r0, [r4, #8]
   2dc2c:	mov	r0, r4
   2dc30:	bl	176c0 <__assert_fail@plt+0x57f8>
   2dc34:	ldr	r1, [sp]
   2dc38:	mov	r0, #12
   2dc3c:	mov	r4, #0
   2dc40:	str	r0, [r1]
   2dc44:	b	2dbfc <__assert_fail@plt+0x1bd34>
   2dc48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dc4c:	add	fp, sp, #24
   2dc50:	ldr	lr, [r0]
   2dc54:	add	r7, lr, r1, lsl #3
   2dc58:	ldrb	r9, [r7, #4]
   2dc5c:	cmp	r9, #7
   2dc60:	beq	2de38 <__assert_fail@plt+0x1bf70>
   2dc64:	ldr	ip, [r2, #80]	; 0x50
   2dc68:	mov	r6, #1
   2dc6c:	cmp	ip, #1
   2dc70:	beq	2dcb0 <__assert_fail@plt+0x1bde8>
   2dc74:	ldr	r5, [r2, #28]
   2dc78:	add	r7, r3, #1
   2dc7c:	cmp	r7, r5
   2dc80:	bge	2dcb0 <__assert_fail@plt+0x1bde8>
   2dc84:	ldr	r6, [r2, #8]
   2dc88:	sub	r5, r5, r3
   2dc8c:	add	r7, r6, r3, lsl #2
   2dc90:	mov	r6, #1
   2dc94:	ldr	r4, [r7, r6, lsl #2]
   2dc98:	cmn	r4, #1
   2dc9c:	bne	2dcb0 <__assert_fail@plt+0x1bde8>
   2dca0:	add	r6, r6, #1
   2dca4:	cmp	r5, r6
   2dca8:	bne	2dc94 <__assert_fail@plt+0x1bdcc>
   2dcac:	mov	r6, r5
   2dcb0:	mov	r8, #0
   2dcb4:	cmp	r9, #5
   2dcb8:	bne	2dd00 <__assert_fail@plt+0x1be38>
   2dcbc:	cmp	r6, #2
   2dcc0:	blt	2de28 <__assert_fail@plt+0x1bf60>
   2dcc4:	ldr	r0, [r0, #128]	; 0x80
   2dcc8:	tst	r0, #64	; 0x40
   2dccc:	bne	2dce0 <__assert_fail@plt+0x1be18>
   2dcd0:	ldr	r1, [r2, #4]
   2dcd4:	ldrb	r1, [r1, r3]
   2dcd8:	cmp	r1, #10
   2dcdc:	beq	2de28 <__assert_fail@plt+0x1bf60>
   2dce0:	tst	r0, #128	; 0x80
   2dce4:	beq	2de24 <__assert_fail@plt+0x1bf5c>
   2dce8:	ldr	r0, [r2, #4]
   2dcec:	ldrb	r0, [r0, r3]
   2dcf0:	cmp	r0, #0
   2dcf4:	movne	r8, r6
   2dcf8:	mov	r0, r8
   2dcfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dd00:	cmp	r9, #6
   2dd04:	bne	2de28 <__assert_fail@plt+0x1bf60>
   2dd08:	cmp	r6, #2
   2dd0c:	blt	2de28 <__assert_fail@plt+0x1bf60>
   2dd10:	ldr	r7, [lr, r1, lsl #3]
   2dd14:	ldr	r0, [r7, #32]
   2dd18:	cmp	r0, #0
   2dd1c:	bne	2dd38 <__assert_fail@plt+0x1be70>
   2dd20:	ldr	r1, [r7, #36]	; 0x24
   2dd24:	cmp	r1, #0
   2dd28:	bne	2dd38 <__assert_fail@plt+0x1be70>
   2dd2c:	ldr	r1, [r7, #20]
   2dd30:	cmp	r1, #0
   2dd34:	beq	2de30 <__assert_fail@plt+0x1bf68>
   2dd38:	cmp	ip, #1
   2dd3c:	bne	2dd4c <__assert_fail@plt+0x1be84>
   2dd40:	ldr	r1, [r2, #4]
   2dd44:	ldrb	r5, [r1, r3]
   2dd48:	b	2dd54 <__assert_fail@plt+0x1be8c>
   2dd4c:	ldr	r1, [r2, #8]
   2dd50:	ldr	r5, [r1, r3, lsl #2]
   2dd54:	ldr	r1, [r7, #20]
   2dd58:	cmp	r1, #1
   2dd5c:	blt	2dd80 <__assert_fail@plt+0x1beb8>
   2dd60:	ldr	r2, [r7]
   2dd64:	mov	r3, #0
   2dd68:	ldr	r4, [r2, r3, lsl #2]
   2dd6c:	cmp	r5, r4
   2dd70:	beq	2ddf8 <__assert_fail@plt+0x1bf30>
   2dd74:	add	r3, r3, #1
   2dd78:	cmp	r3, r1
   2dd7c:	blt	2dd68 <__assert_fail@plt+0x1bea0>
   2dd80:	ldr	r1, [r7, #36]	; 0x24
   2dd84:	cmp	r1, #1
   2dd88:	blt	2ddbc <__assert_fail@plt+0x1bef4>
   2dd8c:	mov	r4, #0
   2dd90:	ldr	r0, [r7, #12]
   2dd94:	ldr	r1, [r0, r4, lsl #2]
   2dd98:	mov	r0, r5
   2dd9c:	bl	11a30 <iswctype@plt>
   2dda0:	cmp	r0, #0
   2dda4:	bne	2ddf8 <__assert_fail@plt+0x1bf30>
   2dda8:	ldr	r0, [r7, #36]	; 0x24
   2ddac:	add	r4, r4, #1
   2ddb0:	cmp	r4, r0
   2ddb4:	blt	2dd90 <__assert_fail@plt+0x1bec8>
   2ddb8:	ldr	r0, [r7, #32]
   2ddbc:	cmp	r0, #1
   2ddc0:	blt	2de00 <__assert_fail@plt+0x1bf38>
   2ddc4:	ldr	r1, [r7, #4]
   2ddc8:	mov	r2, #0
   2ddcc:	b	2dddc <__assert_fail@plt+0x1bf14>
   2ddd0:	add	r2, r2, #1
   2ddd4:	cmp	r2, r0
   2ddd8:	bge	2de00 <__assert_fail@plt+0x1bf38>
   2dddc:	ldr	r3, [r1, r2, lsl #2]
   2dde0:	cmp	r3, r5
   2dde4:	bhi	2ddd0 <__assert_fail@plt+0x1bf08>
   2dde8:	ldr	r3, [r7, #8]
   2ddec:	ldr	r3, [r3, r2, lsl #2]
   2ddf0:	cmp	r5, r3
   2ddf4:	bhi	2ddd0 <__assert_fail@plt+0x1bf08>
   2ddf8:	mov	r0, r6
   2ddfc:	b	2de04 <__assert_fail@plt+0x1bf3c>
   2de00:	mov	r0, #0
   2de04:	ldrb	r1, [r7, #16]
   2de08:	tst	r1, #1
   2de0c:	bne	2de14 <__assert_fail@plt+0x1bf4c>
   2de10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2de14:	cmp	r0, #0
   2de18:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2de1c:	cmp	r6, #1
   2de20:	movle	r6, #1
   2de24:	mov	r8, r6
   2de28:	mov	r0, r8
   2de2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2de30:	mov	r5, #0
   2de34:	b	2dd54 <__assert_fail@plt+0x1be8c>
   2de38:	ldr	r0, [r2, #4]
   2de3c:	mov	r8, #0
   2de40:	ldrb	r6, [r0, r3]
   2de44:	cmp	r6, #194	; 0xc2
   2de48:	bcc	2de28 <__assert_fail@plt+0x1bf60>
   2de4c:	ldr	r2, [r2, #48]	; 0x30
   2de50:	add	r1, r3, #2
   2de54:	cmp	r1, r2
   2de58:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2de5c:	add	r1, r3, r0
   2de60:	cmp	r6, #223	; 0xdf
   2de64:	ldrb	r7, [r1, #1]
   2de68:	bhi	2de90 <__assert_fail@plt+0x1bfc8>
   2de6c:	cmp	r7, #192	; 0xc0
   2de70:	mov	r0, #0
   2de74:	movwcc	r0, #1
   2de78:	lsl	r8, r0, #1
   2de7c:	sxtb	r0, r7
   2de80:	cmn	r0, #1
   2de84:	movwgt	r8, #0
   2de88:	mov	r0, r8
   2de8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2de90:	cmp	r6, #239	; 0xef
   2de94:	bhi	2deb0 <__assert_fail@plt+0x1bfe8>
   2de98:	mov	r0, #3
   2de9c:	cmp	r6, #224	; 0xe0
   2dea0:	bne	2df0c <__assert_fail@plt+0x1c044>
   2dea4:	cmp	r7, #160	; 0xa0
   2dea8:	bcc	2de28 <__assert_fail@plt+0x1bf60>
   2deac:	b	2df0c <__assert_fail@plt+0x1c044>
   2deb0:	cmp	r6, #247	; 0xf7
   2deb4:	bhi	2ded0 <__assert_fail@plt+0x1c008>
   2deb8:	mov	r0, #4
   2debc:	cmp	r6, #240	; 0xf0
   2dec0:	bne	2df0c <__assert_fail@plt+0x1c044>
   2dec4:	cmp	r7, #144	; 0x90
   2dec8:	bcc	2de28 <__assert_fail@plt+0x1bf60>
   2decc:	b	2df0c <__assert_fail@plt+0x1c044>
   2ded0:	cmp	r6, #251	; 0xfb
   2ded4:	bhi	2def0 <__assert_fail@plt+0x1c028>
   2ded8:	mov	r0, #5
   2dedc:	cmp	r6, #248	; 0xf8
   2dee0:	bne	2df0c <__assert_fail@plt+0x1c044>
   2dee4:	cmp	r7, #136	; 0x88
   2dee8:	bcc	2de28 <__assert_fail@plt+0x1bf60>
   2deec:	b	2df0c <__assert_fail@plt+0x1c044>
   2def0:	cmp	r6, #253	; 0xfd
   2def4:	bhi	2de28 <__assert_fail@plt+0x1bf60>
   2def8:	mov	r0, #6
   2defc:	cmp	r6, #252	; 0xfc
   2df00:	bne	2df0c <__assert_fail@plt+0x1c044>
   2df04:	cmp	r7, #132	; 0x84
   2df08:	bcc	2de28 <__assert_fail@plt+0x1bf60>
   2df0c:	add	r3, r0, r3
   2df10:	cmp	r3, r2
   2df14:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2df18:	ldrb	r2, [r1, #1]
   2df1c:	sxtb	r3, r2
   2df20:	cmn	r3, #1
   2df24:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2df28:	cmp	r2, #191	; 0xbf
   2df2c:	bhi	2de28 <__assert_fail@plt+0x1bf60>
   2df30:	ldrb	r2, [r1, #2]
   2df34:	sxtb	r3, r2
   2df38:	cmn	r3, #1
   2df3c:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2df40:	cmp	r2, #191	; 0xbf
   2df44:	bhi	2de28 <__assert_fail@plt+0x1bf60>
   2df48:	cmp	r0, #3
   2df4c:	beq	2de10 <__assert_fail@plt+0x1bf48>
   2df50:	ldrb	r2, [r1, #3]
   2df54:	sxtb	r3, r2
   2df58:	cmn	r3, #1
   2df5c:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2df60:	cmp	r2, #191	; 0xbf
   2df64:	bhi	2de28 <__assert_fail@plt+0x1bf60>
   2df68:	cmp	r0, #4
   2df6c:	beq	2de10 <__assert_fail@plt+0x1bf48>
   2df70:	ldrb	r2, [r1, #4]
   2df74:	sxtb	r3, r2
   2df78:	cmn	r3, #1
   2df7c:	bgt	2de28 <__assert_fail@plt+0x1bf60>
   2df80:	cmp	r2, #191	; 0xbf
   2df84:	bhi	2de28 <__assert_fail@plt+0x1bf60>
   2df88:	cmp	r0, #5
   2df8c:	beq	2de10 <__assert_fail@plt+0x1bf48>
   2df90:	ldrsb	r1, [r1, #5]
   2df94:	uxtb	r2, r1
   2df98:	cmp	r2, #191	; 0xbf
   2df9c:	movwhi	r0, #0
   2dfa0:	cmn	r1, #1
   2dfa4:	movwgt	r0, #0
   2dfa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dfac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dfb0:	add	fp, sp, #24
   2dfb4:	ldr	r4, [r1, #4]
   2dfb8:	mov	r6, r0
   2dfbc:	mvn	r0, #0
   2dfc0:	mov	r8, #0
   2dfc4:	uxtab	r3, r0, r4
   2dfc8:	cmp	r3, #6
   2dfcc:	bhi	2e168 <__assert_fail@plt+0x1c2a0>
   2dfd0:	ldr	r0, [r6, #4]
   2dfd4:	mov	r9, r1
   2dfd8:	ldrb	r1, [r0, r2]
   2dfdc:	add	r7, pc, #4
   2dfe0:	sxtb	r0, r1
   2dfe4:	ldr	pc, [r7, r3, lsl #2]
   2dfe8:	andeq	lr, r2, r4
   2dfec:	andeq	lr, r2, r8, ror #2
   2dff0:	andeq	lr, r2, r8, lsl r0
   2dff4:	andeq	lr, r2, r8, ror #2
   2dff8:	andeq	lr, r2, r0, asr #32
   2dffc:	andeq	lr, r2, r8, ror #2
   2e000:	andeq	lr, r2, r8, lsr r0
   2e004:	ldrb	r3, [r9]
   2e008:	uxtb	r7, r0
   2e00c:	cmp	r3, r7
   2e010:	beq	2e074 <__assert_fail@plt+0x1c1ac>
   2e014:	b	2e168 <__assert_fail@plt+0x1c2a0>
   2e018:	ldr	r3, [r9]
   2e01c:	ubfx	r7, r1, #5, #3
   2e020:	mov	r5, #1
   2e024:	ldr	r3, [r3, r7, lsl #2]
   2e028:	and	r7, r1, #31
   2e02c:	tst	r3, r5, lsl r7
   2e030:	bne	2e074 <__assert_fail@plt+0x1c1ac>
   2e034:	b	2e168 <__assert_fail@plt+0x1c2a0>
   2e038:	cmp	r0, #0
   2e03c:	bmi	2e168 <__assert_fail@plt+0x1c2a0>
   2e040:	cmp	r1, #0
   2e044:	beq	2e064 <__assert_fail@plt+0x1c19c>
   2e048:	cmp	r1, #10
   2e04c:	bne	2e074 <__assert_fail@plt+0x1c1ac>
   2e050:	ldr	r3, [r6, #84]	; 0x54
   2e054:	ldrb	r3, [r3, #128]	; 0x80
   2e058:	tst	r3, #64	; 0x40
   2e05c:	beq	2e168 <__assert_fail@plt+0x1c2a0>
   2e060:	b	2e074 <__assert_fail@plt+0x1c1ac>
   2e064:	ldr	r3, [r6, #84]	; 0x54
   2e068:	ldrb	r3, [r3, #128]	; 0x80
   2e06c:	tst	r3, #128	; 0x80
   2e070:	bne	2e168 <__assert_fail@plt+0x1c2a0>
   2e074:	movw	r3, #65280	; 0xff00
   2e078:	movt	r3, #3
   2e07c:	tst	r4, r3
   2e080:	beq	2e0c8 <__assert_fail@plt+0x1c200>
   2e084:	cmn	r2, #1
   2e088:	ble	2e0c0 <__assert_fail@plt+0x1c1f8>
   2e08c:	ldr	r3, [r6, #48]	; 0x30
   2e090:	cmp	r3, r2
   2e094:	beq	2e188 <__assert_fail@plt+0x1c2c0>
   2e098:	ldr	r3, [r6, #80]	; 0x50
   2e09c:	cmp	r3, #2
   2e0a0:	blt	2e0d4 <__assert_fail@plt+0x1c20c>
   2e0a4:	ldr	r0, [r6, #8]
   2e0a8:	ldr	r7, [r0, r2, lsl #2]
   2e0ac:	cmn	r7, #1
   2e0b0:	bne	2e104 <__assert_fail@plt+0x1c23c>
   2e0b4:	sub	r2, r2, #1
   2e0b8:	cmn	r2, #1
   2e0bc:	bne	2e0a8 <__assert_fail@plt+0x1c1e0>
   2e0c0:	ldr	r1, [r6, #60]	; 0x3c
   2e0c4:	b	2e12c <__assert_fail@plt+0x1c264>
   2e0c8:	mov	r8, #1
   2e0cc:	mov	r0, r8
   2e0d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e0d4:	ldr	r2, [r6, #68]	; 0x44
   2e0d8:	ubfx	r3, r1, #5, #3
   2e0dc:	and	r7, r1, #31
   2e0e0:	mov	r1, #1
   2e0e4:	ldr	r3, [r2, r3, lsl #2]
   2e0e8:	mov	r2, #0
   2e0ec:	tst	r3, r1, lsl r7
   2e0f0:	bne	2e144 <__assert_fail@plt+0x1c27c>
   2e0f4:	mov	r1, #0
   2e0f8:	cmp	r0, #10
   2e0fc:	beq	2e11c <__assert_fail@plt+0x1c254>
   2e100:	b	2e12c <__assert_fail@plt+0x1c264>
   2e104:	ldrb	r0, [r6, #78]	; 0x4e
   2e108:	cmp	r0, #0
   2e10c:	bne	2e198 <__assert_fail@plt+0x1c2d0>
   2e110:	mov	r1, #0
   2e114:	cmp	r7, #10
   2e118:	bne	2e12c <__assert_fail@plt+0x1c264>
   2e11c:	ldrb	r0, [r6, #77]	; 0x4d
   2e120:	cmp	r0, #0
   2e124:	movwne	r0, #1
   2e128:	lsl	r1, r0, #1
   2e12c:	and	r0, r1, #1
   2e130:	tst	r4, #1024	; 0x400
   2e134:	eor	r2, r0, #1
   2e138:	beq	2e144 <__assert_fail@plt+0x1c27c>
   2e13c:	cmp	r0, #0
   2e140:	beq	2e168 <__assert_fail@plt+0x1c2a0>
   2e144:	ldr	r0, [r9, #4]
   2e148:	cmp	r2, #0
   2e14c:	bne	2e158 <__assert_fail@plt+0x1c290>
   2e150:	ands	r2, r0, #2048	; 0x800
   2e154:	bne	2e168 <__assert_fail@plt+0x1c2a0>
   2e158:	tst	r1, #2
   2e15c:	bne	2e170 <__assert_fail@plt+0x1c2a8>
   2e160:	ands	r2, r0, #8192	; 0x2000
   2e164:	beq	2e170 <__assert_fail@plt+0x1c2a8>
   2e168:	mov	r0, r8
   2e16c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e170:	uxth	r0, r0
   2e174:	mov	r2, #1
   2e178:	and	r1, r1, #8
   2e17c:	eor	r0, r2, r0, lsr #15
   2e180:	orr	r0, r0, r1, lsr #3
   2e184:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e188:	ldr	r0, [r6, #88]	; 0x58
   2e18c:	and	r0, r0, #2
   2e190:	eor	r1, r0, #10
   2e194:	b	2e12c <__assert_fail@plt+0x1c264>
   2e198:	mov	r0, r7
   2e19c:	bl	11ce8 <iswalnum@plt>
   2e1a0:	mov	r1, #1
   2e1a4:	mov	r2, #0
   2e1a8:	cmp	r7, #95	; 0x5f
   2e1ac:	beq	2e144 <__assert_fail@plt+0x1c27c>
   2e1b0:	cmp	r0, #0
   2e1b4:	beq	2e110 <__assert_fail@plt+0x1c248>
   2e1b8:	b	2e144 <__assert_fail@plt+0x1c27c>
   2e1bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1c0:	add	fp, sp, #28
   2e1c4:	sub	sp, sp, #4
   2e1c8:	vpush	{d8-d9}
   2e1cc:	sub	sp, sp, #2272	; 0x8e0
   2e1d0:	sub	sp, sp, #12288	; 0x3000
   2e1d4:	mov	lr, r0
   2e1d8:	mov	r0, #0
   2e1dc:	vmov.i32	q4, #0	; 0x00000000
   2e1e0:	mov	r8, r1
   2e1e4:	str	r0, [r1, #44]	; 0x2c
   2e1e8:	str	r0, [r1, #48]	; 0x30
   2e1ec:	sub	r0, fp, #1024	; 0x400
   2e1f0:	sub	r1, r0, #56	; 0x38
   2e1f4:	mov	r0, r1
   2e1f8:	vst1.64	{d8-d9}, [r0]!
   2e1fc:	vst1.64	{d8-d9}, [r0]
   2e200:	ldr	r0, [r8, #8]
   2e204:	cmp	r0, #0
   2e208:	ble	2f1dc <__assert_fail@plt+0x1d314>
   2e20c:	add	r0, lr, #96	; 0x60
   2e210:	mov	r2, #0
   2e214:	mov	r4, #0
   2e218:	str	lr, [sp, #140]	; 0x8c
   2e21c:	str	r8, [sp, #12]
   2e220:	str	r0, [sp, #4]
   2e224:	add	r0, r0, #16
   2e228:	str	r0, [sp]
   2e22c:	add	r0, r1, #16
   2e230:	str	r0, [sp, #8]
   2e234:	b	2e25c <__assert_fail@plt+0x1c394>
   2e238:	sub	r0, fp, #1024	; 0x400
   2e23c:	mov	r4, r6
   2e240:	sub	r0, r0, #56	; 0x38
   2e244:	vst1.64	{d8-d9}, [r0]!
   2e248:	vst1.64	{d8-d9}, [r0]
   2e24c:	ldr	r0, [r8, #8]
   2e250:	add	r2, r2, #1
   2e254:	cmp	r2, r0
   2e258:	bge	2ec04 <__assert_fail@plt+0x1cd3c>
   2e25c:	ldr	r0, [r8, #12]
   2e260:	ldr	r1, [lr]
   2e264:	mov	r6, r4
   2e268:	str	r2, [sp, #24]
   2e26c:	ldr	r0, [r0, r2, lsl #2]
   2e270:	add	r5, r1, r0, lsl #3
   2e274:	ldr	sl, [r5, #4]!
   2e278:	uxtb	r3, sl
   2e27c:	cmp	r3, #1
   2e280:	str	r3, [sp, #64]	; 0x40
   2e284:	bne	2e304 <__assert_fail@plt+0x1c43c>
   2e288:	ldrb	r2, [r1, r0, lsl #3]
   2e28c:	str	r0, [sp, #16]
   2e290:	sub	r0, fp, #1024	; 0x400
   2e294:	mov	r4, r1
   2e298:	sub	r7, r0, #56	; 0x38
   2e29c:	mov	r0, #1
   2e2a0:	mov	r1, r7
   2e2a4:	ubfx	r3, r2, #5, #3
   2e2a8:	and	r2, r2, #31
   2e2ac:	ldr	r7, [r7, r3, lsl #2]
   2e2b0:	orr	r2, r7, r0, lsl r2
   2e2b4:	str	r2, [r1, r3, lsl #2]
   2e2b8:	movw	r2, #65280	; 0xff00
   2e2bc:	mov	r3, r4
   2e2c0:	movt	r2, #3
   2e2c4:	ands	r2, sl, r2
   2e2c8:	ldr	r2, [sp, #24]
   2e2cc:	beq	2e710 <__assert_fail@plt+0x1c848>
   2e2d0:	tst	sl, #8192	; 0x2000
   2e2d4:	beq	2e368 <__assert_fail@plt+0x1c4a0>
   2e2d8:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   2e2dc:	sub	r0, fp, #1024	; 0x400
   2e2e0:	mov	r1, r3
   2e2e4:	sub	r3, r0, #56	; 0x38
   2e2e8:	vst1.64	{d8-d9}, [r3]!
   2e2ec:	vst1.64	{d8-d9}, [r3]
   2e2f0:	tst	r2, #1024	; 0x400
   2e2f4:	bne	2e358 <__assert_fail@plt+0x1c490>
   2e2f8:	ldr	r2, [sp, #24]
   2e2fc:	mov	r4, r6
   2e300:	b	2e24c <__assert_fail@plt+0x1c384>
   2e304:	cmp	r3, #7
   2e308:	beq	2e3a4 <__assert_fail@plt+0x1c4dc>
   2e30c:	cmp	r3, #5
   2e310:	beq	2e3f8 <__assert_fail@plt+0x1c530>
   2e314:	cmp	r3, #3
   2e318:	bne	2ebfc <__assert_fail@plt+0x1cd34>
   2e31c:	ldr	r2, [r1, r0, lsl #3]
   2e320:	str	r0, [sp, #16]
   2e324:	sub	r0, fp, #1024	; 0x400
   2e328:	mov	r4, r1
   2e32c:	sub	r3, r0, #56	; 0x38
   2e330:	vld1.64	{d16-d17}, [r3]
   2e334:	vld1.32	{d18-d19}, [r2]!
   2e338:	vorr	q8, q8, q9
   2e33c:	vst1.64	{d16-d17}, [r3]
   2e340:	vld1.32	{d16-d17}, [r2]
   2e344:	ldr	r2, [sp, #8]
   2e348:	vld1.32	{d18-d19}, [r2]
   2e34c:	vorr	q8, q9, q8
   2e350:	vst1.32	{d16-d17}, [r2]
   2e354:	b	2e2b8 <__assert_fail@plt+0x1c3f0>
   2e358:	ldr	r2, [sp, #24]
   2e35c:	mov	r0, #1024	; 0x400
   2e360:	mov	r3, r1
   2e364:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2e368:	tst	sl, #32768	; 0x8000
   2e36c:	bne	2e238 <__assert_fail@plt+0x1c370>
   2e370:	tst	sl, #1024	; 0x400
   2e374:	beq	2e628 <__assert_fail@plt+0x1c760>
   2e378:	ldr	r0, [sp, #64]	; 0x40
   2e37c:	cmp	r0, #1
   2e380:	bne	2e444 <__assert_fail@plt+0x1c57c>
   2e384:	ldrb	r2, [r5, #2]
   2e388:	tst	r2, #64	; 0x40
   2e38c:	bne	2e444 <__assert_fail@plt+0x1c57c>
   2e390:	sub	r0, fp, #1024	; 0x400
   2e394:	sub	r0, r0, #56	; 0x38
   2e398:	vst1.64	{d8-d9}, [r0]!
   2e39c:	vst1.64	{d8-d9}, [r0]
   2e3a0:	b	2e2f8 <__assert_fail@plt+0x1c430>
   2e3a4:	str	r0, [sp, #16]
   2e3a8:	mvn	r0, #0
   2e3ac:	mov	r4, r1
   2e3b0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2e3b4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2e3b8:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2e3bc:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2e3c0:	ldr	r3, [lr, #128]	; 0x80
   2e3c4:	and	r2, r3, #128	; 0x80
   2e3c8:	ands	r3, r3, #64	; 0x40
   2e3cc:	beq	2e3d8 <__assert_fail@plt+0x1c510>
   2e3d0:	cmp	r2, #0
   2e3d4:	beq	2e2b8 <__assert_fail@plt+0x1c3f0>
   2e3d8:	cmp	r3, #0
   2e3dc:	mvn	r3, #1
   2e3e0:	movweq	r3, #64510	; 0xfbfe
   2e3e4:	movteq	r3, #65535	; 0xffff
   2e3e8:	cmp	r2, #0
   2e3ec:	mvneq	r3, #1024	; 0x400
   2e3f0:	str	r3, [fp, #-1080]	; 0xfffffbc8
   2e3f4:	b	2e2b8 <__assert_fail@plt+0x1c3f0>
   2e3f8:	ldr	r2, [lr, #92]	; 0x5c
   2e3fc:	mov	r4, r1
   2e400:	str	r0, [sp, #16]
   2e404:	cmp	r2, #2
   2e408:	blt	2e4dc <__assert_fail@plt+0x1c614>
   2e40c:	ldr	r2, [lr, #60]	; 0x3c
   2e410:	sub	r0, fp, #1024	; 0x400
   2e414:	sub	r3, r0, #56	; 0x38
   2e418:	vld1.64	{d16-d17}, [r3]
   2e41c:	vld1.32	{d18-d19}, [r2]!
   2e420:	vorr	q8, q8, q9
   2e424:	vst1.64	{d16-d17}, [r3]
   2e428:	vld1.32	{d18-d19}, [r2]
   2e42c:	ldr	r2, [sp, #8]
   2e430:	vld1.32	{d20-d21}, [r2]
   2e434:	vorr	q9, q10, q9
   2e438:	vst1.32	{d18-d19}, [r2]
   2e43c:	vmov.32	r2, d16[0]
   2e440:	b	2e500 <__assert_fail@plt+0x1c638>
   2e444:	ldr	r2, [lr, #92]	; 0x5c
   2e448:	mov	r1, r3
   2e44c:	cmp	r2, #1
   2e450:	ble	2e52c <__assert_fail@plt+0x1c664>
   2e454:	ldr	r2, [lr, #60]	; 0x3c
   2e458:	ldr	r3, [sp, #4]
   2e45c:	sub	r0, fp, #1024	; 0x400
   2e460:	vld1.32	{d16-d17}, [r3]
   2e464:	vld1.32	{d18-d19}, [r2]!
   2e468:	sub	r3, r0, #56	; 0x38
   2e46c:	vld1.64	{d20-d21}, [r3]
   2e470:	vorn	q8, q8, q9
   2e474:	vand	q8, q10, q8
   2e478:	vst1.64	{d16-d17}, [r3]
   2e47c:	vmov.32	r3, d16[1]
   2e480:	vld1.32	{d18-d19}, [r2]
   2e484:	ldr	r2, [sp]
   2e488:	vld1.32	{d20-d21}, [r2]
   2e48c:	ldr	r2, [sp, #8]
   2e490:	vld1.32	{d22-d23}, [r2]
   2e494:	vorn	q9, q10, q9
   2e498:	vand	q9, q11, q9
   2e49c:	vst1.32	{d18-d19}, [r2]
   2e4a0:	vmov.32	r2, d16[0]
   2e4a4:	orr	r2, r3, r2
   2e4a8:	vmov.32	r3, d17[0]
   2e4ac:	orr	r2, r2, r3
   2e4b0:	vmov.32	r3, d17[1]
   2e4b4:	orr	r2, r2, r3
   2e4b8:	vmov.32	r3, d18[0]
   2e4bc:	orr	r2, r2, r3
   2e4c0:	vmov.32	r3, d18[1]
   2e4c4:	orr	r2, r2, r3
   2e4c8:	vmov.32	r3, d19[0]
   2e4cc:	orr	r2, r2, r3
   2e4d0:	vmov.32	r3, d19[1]
   2e4d4:	orr	r2, r2, r3
   2e4d8:	b	2e618 <__assert_fail@plt+0x1c750>
   2e4dc:	mvn	r2, #0
   2e4e0:	str	r2, [fp, #-1052]	; 0xfffffbe4
   2e4e4:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2e4e8:	str	r2, [fp, #-1060]	; 0xfffffbdc
   2e4ec:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2e4f0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2e4f4:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2e4f8:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2e4fc:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2e500:	ldr	r3, [lr, #128]	; 0x80
   2e504:	ands	r7, r3, #64	; 0x40
   2e508:	and	r3, r3, #128	; 0x80
   2e50c:	biceq	r2, r2, #1024	; 0x400
   2e510:	beq	2e51c <__assert_fail@plt+0x1c654>
   2e514:	cmp	r3, #0
   2e518:	beq	2e2b8 <__assert_fail@plt+0x1c3f0>
   2e51c:	cmp	r3, #0
   2e520:	bicne	r2, r2, #1
   2e524:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2e528:	b	2e2b8 <__assert_fail@plt+0x1c3f0>
   2e52c:	ldr	r2, [sp, #140]	; 0x8c
   2e530:	ldr	r3, [lr, #96]	; 0x60
   2e534:	str	r1, [sp, #60]	; 0x3c
   2e538:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2e53c:	mov	r9, r5
   2e540:	str	r6, [sp, #152]	; 0x98
   2e544:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2e548:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2e54c:	ldr	lr, [r2, #100]	; 0x64
   2e550:	ldr	r2, [sp, #140]	; 0x8c
   2e554:	and	r7, r4, r3
   2e558:	ldr	r3, [sp, #12]
   2e55c:	ldr	r1, [r2, #104]	; 0x68
   2e560:	ldr	r2, [sp, #140]	; 0x8c
   2e564:	and	lr, r5, lr
   2e568:	ldr	r0, [r2, #108]	; 0x6c
   2e56c:	ldr	r2, [sp, #140]	; 0x8c
   2e570:	and	r1, r6, r1
   2e574:	ldr	ip, [r2, #112]	; 0x70
   2e578:	ldr	r2, [sp, #140]	; 0x8c
   2e57c:	ldr	r8, [r2, #116]	; 0x74
   2e580:	ldr	r2, [sp, #140]	; 0x8c
   2e584:	ldr	r2, [r2, #120]	; 0x78
   2e588:	str	r2, [sp, #160]	; 0xa0
   2e58c:	ldr	r2, [sp, #140]	; 0x8c
   2e590:	ldr	r2, [r2, #124]	; 0x7c
   2e594:	str	r2, [sp, #164]	; 0xa4
   2e598:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2e59c:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2e5a0:	str	lr, [fp, #-1076]	; 0xfffffbcc
   2e5a4:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2e5a8:	orr	r7, lr, r7
   2e5ac:	ldr	lr, [sp, #140]	; 0x8c
   2e5b0:	orr	r7, r7, r1
   2e5b4:	ldr	r1, [sp, #60]	; 0x3c
   2e5b8:	and	r2, r2, r0
   2e5bc:	ldr	r0, [sp, #160]	; 0xa0
   2e5c0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2e5c4:	orr	r2, r7, r2
   2e5c8:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2e5cc:	and	r6, r6, ip
   2e5d0:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2e5d4:	orr	r2, r2, r6
   2e5d8:	ldr	r6, [sp, #152]	; 0x98
   2e5dc:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2e5e0:	and	r4, r4, r8
   2e5e4:	mov	r8, r3
   2e5e8:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2e5ec:	orr	r2, r2, r4
   2e5f0:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2e5f4:	and	r3, r3, r0
   2e5f8:	ldr	r0, [sp, #164]	; 0xa4
   2e5fc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2e600:	orr	r2, r2, r3
   2e604:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   2e608:	and	r0, r5, r0
   2e60c:	mov	r5, r9
   2e610:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2e614:	orr	r2, r2, r0
   2e618:	cmp	r2, #0
   2e61c:	ldr	r2, [sp, #24]
   2e620:	mov	r3, r1
   2e624:	beq	2ebfc <__assert_fail@plt+0x1cd34>
   2e628:	tst	sl, #2048	; 0x800
   2e62c:	beq	2e710 <__assert_fail@plt+0x1c848>
   2e630:	ldr	r0, [sp, #64]	; 0x40
   2e634:	cmp	r0, #1
   2e638:	bne	2e648 <__assert_fail@plt+0x1c780>
   2e63c:	ldrb	r0, [r5, #2]
   2e640:	tst	r0, #64	; 0x40
   2e644:	bne	2e238 <__assert_fail@plt+0x1c370>
   2e648:	ldr	r0, [lr, #92]	; 0x5c
   2e64c:	cmp	r0, #1
   2e650:	ble	2e69c <__assert_fail@plt+0x1c7d4>
   2e654:	ldr	r0, [lr, #60]	; 0x3c
   2e658:	ldr	r1, [sp, #4]
   2e65c:	vld1.32	{d16-d17}, [r1]
   2e660:	vld1.32	{d18-d19}, [r0]!
   2e664:	sub	r1, fp, #1024	; 0x400
   2e668:	sub	r1, r1, #56	; 0x38
   2e66c:	vld1.64	{d20-d21}, [r1]
   2e670:	vand	q8, q9, q8
   2e674:	vbic	q9, q10, q8
   2e678:	vst1.64	{d18-d19}, [r1]
   2e67c:	ldr	r1, [sp]
   2e680:	vld1.32	{d20-d21}, [r0]
   2e684:	ldr	r0, [sp, #8]
   2e688:	vld1.32	{d16-d17}, [r1]
   2e68c:	vld1.32	{d22-d23}, [r0]
   2e690:	vand	q8, q10, q8
   2e694:	vbic	q8, q11, q8
   2e698:	b	2e6cc <__assert_fail@plt+0x1c804>
   2e69c:	ldr	r0, [sp, #4]
   2e6a0:	vld1.32	{d16-d17}, [r0]
   2e6a4:	sub	r0, fp, #1024	; 0x400
   2e6a8:	sub	r0, r0, #56	; 0x38
   2e6ac:	vld1.64	{d18-d19}, [r0]
   2e6b0:	vbic	q9, q9, q8
   2e6b4:	vst1.64	{d18-d19}, [r0]
   2e6b8:	ldr	r0, [sp]
   2e6bc:	vld1.32	{d16-d17}, [r0]
   2e6c0:	ldr	r0, [sp, #8]
   2e6c4:	vld1.32	{d20-d21}, [r0]
   2e6c8:	vbic	q8, q10, q8
   2e6cc:	vst1.32	{d16-d17}, [r0]
   2e6d0:	vmov.32	r0, d18[0]
   2e6d4:	vmov.32	r1, d18[1]
   2e6d8:	orr	r0, r1, r0
   2e6dc:	vmov.32	r1, d19[0]
   2e6e0:	orr	r0, r0, r1
   2e6e4:	vmov.32	r1, d19[1]
   2e6e8:	orr	r0, r0, r1
   2e6ec:	vmov.32	r1, d16[0]
   2e6f0:	orr	r0, r0, r1
   2e6f4:	vmov.32	r1, d16[1]
   2e6f8:	orr	r0, r0, r1
   2e6fc:	vmov.32	r1, d17[0]
   2e700:	orr	r0, r0, r1
   2e704:	vmov.32	r1, d17[1]
   2e708:	orrs	r0, r0, r1
   2e70c:	beq	2ebfc <__assert_fail@plt+0x1cd34>
   2e710:	mov	r4, r6
   2e714:	mov	r5, #0
   2e718:	cmp	r6, #1
   2e71c:	blt	2eb6c <__assert_fail@plt+0x1cca4>
   2e720:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   2e724:	ldr	ip, [fp, #-1056]	; 0xfffffbe0
   2e728:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   2e72c:	ldr	r8, [fp, #-1072]	; 0xfffffbd0
   2e730:	ldr	r9, [sp, #64]	; 0x40
   2e734:	mov	r1, #28
   2e738:	str	r3, [sp, #60]	; 0x3c
   2e73c:	str	r0, [sp, #148]	; 0x94
   2e740:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2e744:	str	r0, [sp, #120]	; 0x78
   2e748:	ldr	r0, [fp, #-1080]	; 0xfffffbc8
   2e74c:	str	r0, [sp, #108]	; 0x6c
   2e750:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   2e754:	str	r0, [sp, #112]	; 0x70
   2e758:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   2e75c:	str	r0, [sp, #116]	; 0x74
   2e760:	sub	r0, fp, #6144	; 0x1800
   2e764:	sub	r7, r0, #104	; 0x68
   2e768:	b	2e7a0 <__assert_fail@plt+0x1c8d8>
   2e76c:	ldr	r9, [sp, #64]	; 0x40
   2e770:	ldr	r7, [sp, #144]	; 0x90
   2e774:	ldr	ip, [sp, #164]	; 0xa4
   2e778:	ldr	lr, [sp, #160]	; 0xa0
   2e77c:	ldr	r5, [sp, #136]	; 0x88
   2e780:	ldr	r4, [sp, #152]	; 0x98
   2e784:	ldr	r3, [sp, #60]	; 0x3c
   2e788:	ldr	r8, [sp, #156]	; 0x9c
   2e78c:	add	r1, r1, #32
   2e790:	add	r7, r7, #12
   2e794:	add	r5, r5, #1
   2e798:	cmp	r5, r4
   2e79c:	bge	2eb2c <__assert_fail@plt+0x1cc64>
   2e7a0:	cmp	r9, #1
   2e7a4:	str	lr, [sp, #160]	; 0xa0
   2e7a8:	str	ip, [sp, #164]	; 0xa4
   2e7ac:	str	r4, [sp, #152]	; 0x98
   2e7b0:	str	r5, [sp, #136]	; 0x88
   2e7b4:	str	r8, [sp, #156]	; 0x9c
   2e7b8:	bne	2e7ec <__assert_fail@plt+0x1c924>
   2e7bc:	ldr	r0, [sp, #16]
   2e7c0:	add	r2, sp, #168	; 0xa8
   2e7c4:	ldrb	r0, [r3, r0, lsl #3]
   2e7c8:	mov	r3, r1
   2e7cc:	ubfx	r1, r0, #5, #3
   2e7d0:	and	r0, r0, #31
   2e7d4:	add	r1, r2, r1, lsl #2
   2e7d8:	mov	r2, #1
   2e7dc:	ldr	r1, [r1, r5, lsl #5]
   2e7e0:	tst	r1, r2, lsl r0
   2e7e4:	mov	r1, r3
   2e7e8:	beq	2e774 <__assert_fail@plt+0x1c8ac>
   2e7ec:	add	r4, sp, #168	; 0xa8
   2e7f0:	str	r7, [sp, #144]	; 0x90
   2e7f4:	ldr	ip, [sp, #108]	; 0x6c
   2e7f8:	ldr	r9, [sp, #112]	; 0x70
   2e7fc:	add	sl, r4, r5, lsl #5
   2e800:	ldr	r5, [sp, #116]	; 0x74
   2e804:	add	r7, sl, #8
   2e808:	ldr	r3, [sl, #4]
   2e80c:	ldm	r7, {r0, r6, r7}
   2e810:	str	r6, [sp, #132]	; 0x84
   2e814:	str	r7, [sp, #100]	; 0x64
   2e818:	str	r3, [sp, #128]	; 0x80
   2e81c:	and	r3, r3, r9
   2e820:	and	r2, r0, r8
   2e824:	str	r0, [sp, #124]	; 0x7c
   2e828:	add	r0, r4, r1
   2e82c:	str	r3, [sp, #84]	; 0x54
   2e830:	ldr	r4, [r4, r1]
   2e834:	ldr	r8, [sp, #148]	; 0x94
   2e838:	ldr	lr, [r0, #-28]	; 0xffffffe4
   2e83c:	str	r0, [sp, #92]	; 0x5c
   2e840:	str	r2, [sp, #96]	; 0x60
   2e844:	and	r0, lr, ip
   2e848:	str	r0, [sp, #88]	; 0x58
   2e84c:	orr	r0, r3, r0
   2e850:	ldr	r3, [sl, #20]
   2e854:	orr	r0, r0, r2
   2e858:	and	r2, r6, r5
   2e85c:	ldr	r6, [sp, #120]	; 0x78
   2e860:	str	r2, [sp, #80]	; 0x50
   2e864:	orr	r0, r0, r2
   2e868:	and	r2, r7, r6
   2e86c:	ldr	r7, [sl, #24]
   2e870:	str	r2, [sp, #76]	; 0x4c
   2e874:	orr	r0, r0, r2
   2e878:	ldr	r2, [sp, #160]	; 0xa0
   2e87c:	and	r2, r3, r2
   2e880:	str	r2, [sp, #72]	; 0x48
   2e884:	orr	r0, r0, r2
   2e888:	ldr	r2, [sp, #164]	; 0xa4
   2e88c:	and	r2, r7, r2
   2e890:	str	r2, [sp, #68]	; 0x44
   2e894:	orr	r0, r0, r2
   2e898:	and	r2, r4, r8
   2e89c:	orrs	r0, r0, r2
   2e8a0:	beq	2e76c <__assert_fail@plt+0x1c8a4>
   2e8a4:	bic	r0, ip, lr
   2e8a8:	str	r2, [sp, #20]
   2e8ac:	ldr	r2, [sp, #156]	; 0x9c
   2e8b0:	ldr	r8, [sp, #100]	; 0x64
   2e8b4:	str	r1, [sp, #104]	; 0x68
   2e8b8:	ldr	r1, [sp, #128]	; 0x80
   2e8bc:	bic	ip, lr, ip
   2e8c0:	str	r0, [sp, #56]	; 0x38
   2e8c4:	ldr	r0, [sp, #128]	; 0x80
   2e8c8:	bic	lr, r1, r9
   2e8cc:	bic	r0, r9, r0
   2e8d0:	orr	r1, lr, ip
   2e8d4:	str	r0, [sp, #52]	; 0x34
   2e8d8:	ldr	r0, [sp, #124]	; 0x7c
   2e8dc:	bic	r0, r2, r0
   2e8e0:	str	r0, [sp, #48]	; 0x30
   2e8e4:	ldr	r0, [sp, #132]	; 0x84
   2e8e8:	bic	r0, r5, r0
   2e8ec:	str	r0, [sp, #44]	; 0x2c
   2e8f0:	bic	r0, r6, r8
   2e8f4:	bic	r6, r8, r6
   2e8f8:	str	r0, [sp, #40]	; 0x28
   2e8fc:	ldr	r0, [sp, #160]	; 0xa0
   2e900:	bic	r0, r0, r3
   2e904:	str	r0, [sp, #36]	; 0x24
   2e908:	ldr	r0, [sp, #164]	; 0xa4
   2e90c:	bic	r0, r0, r7
   2e910:	str	r0, [sp, #32]
   2e914:	ldr	r0, [sp, #148]	; 0x94
   2e918:	bic	r0, r0, r4
   2e91c:	str	r0, [sp, #28]
   2e920:	ldr	r0, [sp, #124]	; 0x7c
   2e924:	bic	r0, r0, r2
   2e928:	mov	r9, r0
   2e92c:	orr	r0, r1, r0
   2e930:	ldr	r1, [sp, #132]	; 0x84
   2e934:	bic	r1, r1, r5
   2e938:	orr	r5, r0, r1
   2e93c:	ldr	r0, [sp, #160]	; 0xa0
   2e940:	orr	r5, r5, r6
   2e944:	bic	r3, r3, r0
   2e948:	ldr	r0, [sp, #164]	; 0xa4
   2e94c:	orr	r5, r5, r3
   2e950:	bic	r7, r7, r0
   2e954:	ldr	r0, [sp, #148]	; 0x94
   2e958:	orr	r2, r5, r7
   2e95c:	bic	r4, r4, r0
   2e960:	orrs	r2, r2, r4
   2e964:	beq	2ea44 <__assert_fail@plt+0x1cb7c>
   2e968:	ldr	r2, [sp, #152]	; 0x98
   2e96c:	add	r5, sp, #168	; 0xa8
   2e970:	add	r0, r5, r2, lsl #5
   2e974:	str	ip, [r5, r2, lsl #5]
   2e978:	str	lr, [r0, #4]
   2e97c:	str	r9, [r0, #8]
   2e980:	str	r1, [r0, #12]
   2e984:	str	r6, [r0, #16]
   2e988:	str	r3, [r0, #20]
   2e98c:	str	r7, [r0, #24]
   2e990:	str	r4, [r0, #28]
   2e994:	ldr	r0, [sp, #92]	; 0x5c
   2e998:	ldr	r1, [sp, #88]	; 0x58
   2e99c:	sub	lr, fp, #6144	; 0x1800
   2e9a0:	mov	r6, r2
   2e9a4:	str	r1, [r0, #-28]	; 0xffffffe4
   2e9a8:	ldr	r0, [sp, #84]	; 0x54
   2e9ac:	ldr	r1, [sp, #20]
   2e9b0:	str	r0, [sl, #4]
   2e9b4:	ldr	r0, [sp, #96]	; 0x60
   2e9b8:	str	r0, [sl, #8]
   2e9bc:	ldr	r0, [sp, #80]	; 0x50
   2e9c0:	str	r0, [sl, #12]
   2e9c4:	ldr	r0, [sp, #76]	; 0x4c
   2e9c8:	str	r0, [sl, #16]
   2e9cc:	ldr	r0, [sp, #72]	; 0x48
   2e9d0:	str	r0, [sl, #20]
   2e9d4:	ldr	r0, [sp, #68]	; 0x44
   2e9d8:	str	r0, [sl, #24]
   2e9dc:	ldr	r0, [sp, #104]	; 0x68
   2e9e0:	str	r1, [r5, r0]
   2e9e4:	add	r0, r2, r2, lsl #1
   2e9e8:	sub	r1, lr, #104	; 0x68
   2e9ec:	add	r4, r1, r0, lsl #2
   2e9f0:	ldr	r1, [sp, #144]	; 0x90
   2e9f4:	mov	r5, r4
   2e9f8:	ldr	r0, [r1, #4]
   2e9fc:	str	r0, [r5, #4]!
   2ea00:	ldr	r7, [r1, #4]
   2ea04:	cmp	r7, #1
   2ea08:	blt	2ea5c <__assert_fail@plt+0x1cb94>
   2ea0c:	str	r0, [r4]
   2ea10:	lsl	r0, r0, #2
   2ea14:	bl	34810 <__assert_fail@plt+0x22948>
   2ea18:	ldr	r8, [sp, #36]	; 0x24
   2ea1c:	ldr	sl, [sp, #28]
   2ea20:	cmp	r0, #0
   2ea24:	str	r0, [r4, #8]
   2ea28:	beq	2f148 <__assert_fail@plt+0x1d280>
   2ea2c:	ldr	r1, [sp, #144]	; 0x90
   2ea30:	lsl	r2, r7, #2
   2ea34:	ldr	r1, [r1, #8]
   2ea38:	bl	11ab4 <memcpy@plt>
   2ea3c:	ldr	r1, [sp, #24]
   2ea40:	b	2ea78 <__assert_fail@plt+0x1cbb0>
   2ea44:	ldr	r4, [sp, #12]
   2ea48:	ldr	r1, [sp, #24]
   2ea4c:	ldr	r8, [sp, #36]	; 0x24
   2ea50:	ldr	r5, [sp, #32]
   2ea54:	ldr	sl, [sp, #28]
   2ea58:	b	2ea88 <__assert_fail@plt+0x1cbc0>
   2ea5c:	ldr	r1, [sp, #24]
   2ea60:	ldr	r8, [sp, #36]	; 0x24
   2ea64:	ldr	sl, [sp, #28]
   2ea68:	mov	r0, #0
   2ea6c:	str	r0, [r4]
   2ea70:	str	r0, [r4, #4]
   2ea74:	str	r0, [r4, #8]
   2ea78:	ldr	r4, [sp, #12]
   2ea7c:	ldr	r5, [sp, #32]
   2ea80:	add	r6, r6, #1
   2ea84:	str	r6, [sp, #152]	; 0x98
   2ea88:	ldr	r0, [r4, #12]
   2ea8c:	ldr	r7, [sp, #144]	; 0x90
   2ea90:	ldr	r1, [r0, r1, lsl #2]
   2ea94:	mov	r0, r7
   2ea98:	bl	2a204 <__assert_fail@plt+0x1833c>
   2ea9c:	ldr	r6, [sp, #40]	; 0x28
   2eaa0:	cmp	r0, #0
   2eaa4:	beq	2f108 <__assert_fail@plt+0x1d240>
   2eaa8:	ldr	r2, [sp, #56]	; 0x38
   2eaac:	ldr	r4, [sp, #52]	; 0x34
   2eab0:	ldr	r3, [sp, #48]	; 0x30
   2eab4:	ldr	r1, [sp, #44]	; 0x2c
   2eab8:	ldr	r9, [sp, #64]	; 0x40
   2eabc:	mov	ip, r5
   2eac0:	mov	lr, r8
   2eac4:	str	sl, [sp, #148]	; 0x94
   2eac8:	str	r6, [sp, #120]	; 0x78
   2eacc:	orr	r0, r4, r2
   2ead0:	str	r1, [sp, #116]	; 0x74
   2ead4:	str	r3, [sp, #156]	; 0x9c
   2ead8:	str	r4, [sp, #112]	; 0x70
   2eadc:	str	r2, [sp, #108]	; 0x6c
   2eae0:	orr	r0, r0, r3
   2eae4:	orr	r0, r0, r1
   2eae8:	orr	r0, r0, r6
   2eaec:	orr	r0, r0, r8
   2eaf0:	orr	r0, r0, r5
   2eaf4:	orrs	r0, r0, sl
   2eaf8:	mov	r0, r1
   2eafc:	ldr	r1, [sp, #104]	; 0x68
   2eb00:	bne	2e77c <__assert_fail@plt+0x1c8b4>
   2eb04:	mov	ip, r5
   2eb08:	str	r4, [sp, #112]	; 0x70
   2eb0c:	ldr	r4, [sp, #152]	; 0x98
   2eb10:	ldr	r5, [sp, #136]	; 0x88
   2eb14:	mov	lr, r8
   2eb18:	str	sl, [sp, #148]	; 0x94
   2eb1c:	str	r6, [sp, #120]	; 0x78
   2eb20:	str	r0, [sp, #116]	; 0x74
   2eb24:	mov	r8, r3
   2eb28:	str	r2, [sp, #108]	; 0x6c
   2eb2c:	ldr	r0, [sp, #148]	; 0x94
   2eb30:	ldr	r2, [sp, #24]
   2eb34:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2eb38:	ldr	r0, [sp, #120]	; 0x78
   2eb3c:	str	ip, [fp, #-1056]	; 0xfffffbe0
   2eb40:	str	lr, [fp, #-1060]	; 0xfffffbdc
   2eb44:	ldr	lr, [sp, #140]	; 0x8c
   2eb48:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2eb4c:	ldr	r0, [sp, #116]	; 0x74
   2eb50:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2eb54:	ldr	r0, [sp, #112]	; 0x70
   2eb58:	str	r8, [fp, #-1072]	; 0xfffffbd0
   2eb5c:	ldr	r8, [sp, #12]
   2eb60:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2eb64:	ldr	r0, [sp, #108]	; 0x6c
   2eb68:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2eb6c:	cmp	r5, r4
   2eb70:	bne	2e24c <__assert_fail@plt+0x1c384>
   2eb74:	sub	lr, fp, #1024	; 0x400
   2eb78:	mov	r1, r8
   2eb7c:	sub	r7, lr, #56	; 0x38
   2eb80:	sub	lr, fp, #6144	; 0x1800
   2eb84:	mov	sl, r1
   2eb88:	mov	r0, r7
   2eb8c:	mov	r8, r7
   2eb90:	vld1.32	{d16-d17}, [r0]!
   2eb94:	vld1.64	{d18-d19}, [r0]
   2eb98:	add	r0, sp, #168	; 0xa8
   2eb9c:	add	r0, r0, r5, lsl #5
   2eba0:	vst1.32	{d16-d17}, [r0]!
   2eba4:	vst1.32	{d18-d19}, [r0]
   2eba8:	ldr	r0, [r1, #12]
   2ebac:	mov	r1, #1
   2ebb0:	ldr	r4, [r0, r2, lsl #2]
   2ebb4:	add	r0, r5, r5, lsl #1
   2ebb8:	sub	r2, lr, #104	; 0x68
   2ebbc:	add	r7, r2, r0, lsl #2
   2ebc0:	str	r1, [r2, r0, lsl #2]
   2ebc4:	mov	r0, #4
   2ebc8:	mov	r6, r7
   2ebcc:	str	r1, [r6, #4]!
   2ebd0:	bl	34810 <__assert_fail@plt+0x22948>
   2ebd4:	cmp	r0, #0
   2ebd8:	str	r0, [r7, #8]
   2ebdc:	beq	2f1b8 <__assert_fail@plt+0x1d2f0>
   2ebe0:	ldr	lr, [sp, #140]	; 0x8c
   2ebe4:	ldr	r2, [sp, #24]
   2ebe8:	str	r4, [r0]
   2ebec:	mov	r0, r8
   2ebf0:	add	r4, r5, #1
   2ebf4:	mov	r8, sl
   2ebf8:	b	2e244 <__assert_fail@plt+0x1c37c>
   2ebfc:	mov	r4, r6
   2ec00:	b	2e24c <__assert_fail@plt+0x1c384>
   2ec04:	cmp	r4, #0
   2ec08:	ble	2f1d4 <__assert_fail@plt+0x1d30c>
   2ec0c:	mov	r6, r4
   2ec10:	mov	r4, #0
   2ec14:	add	r0, r6, #1
   2ec18:	str	r4, [fp, #-3136]	; 0xfffff3c0
   2ec1c:	str	r0, [fp, #-3140]	; 0xfffff3bc
   2ec20:	lsl	r0, r0, #2
   2ec24:	bl	34810 <__assert_fail@plt+0x22948>
   2ec28:	ldr	r1, [sp, #140]	; 0x8c
   2ec2c:	cmp	r0, #0
   2ec30:	str	r0, [fp, #-3132]	; 0xfffff3c4
   2ec34:	moveq	r4, #12
   2ec38:	cmp	r0, #0
   2ec3c:	str	r4, [fp, #-56]	; 0xffffffc8
   2ec40:	beq	2f204 <__assert_fail@plt+0x1d33c>
   2ec44:	vmov.i32	q8, #0	; 0x00000000
   2ec48:	sub	lr, fp, #3072	; 0xc00
   2ec4c:	mov	r3, #0
   2ec50:	mov	sl, #0
   2ec54:	mov	r7, #0
   2ec58:	mov	r2, #0
   2ec5c:	mov	r8, #0
   2ec60:	str	r6, [sp, #152]	; 0x98
   2ec64:	sub	r0, lr, #104	; 0x68
   2ec68:	sub	lr, fp, #3072	; 0xc00
   2ec6c:	sub	r9, lr, #68	; 0x44
   2ec70:	sub	lr, fp, #3072	; 0xc00
   2ec74:	vst1.64	{d16-d17}, [r0]!
   2ec78:	vst1.64	{d16-d17}, [r0]
   2ec7c:	sub	r0, lr, #56	; 0x38
   2ec80:	str	r0, [sp, #124]	; 0x7c
   2ec84:	mov	r0, #0
   2ec88:	str	r0, [sp, #144]	; 0x90
   2ec8c:	mov	r0, #0
   2ec90:	str	r0, [sp, #148]	; 0x94
   2ec94:	mov	r0, #0
   2ec98:	str	r0, [sp, #156]	; 0x9c
   2ec9c:	mov	r0, #0
   2eca0:	str	r0, [sp, #160]	; 0xa0
   2eca4:	mov	r0, #0
   2eca8:	str	r0, [sp, #164]	; 0xa4
   2ecac:	mov	r0, #0
   2ecb0:	str	r0, [sp, #128]	; 0x80
   2ecb4:	b	2ed74 <__assert_fail@plt+0x1ceac>
   2ecb8:	ldrsb	r0, [r7, #52]	; 0x34
   2ecbc:	cmn	r0, #1
   2ecc0:	ble	2ee30 <__assert_fail@plt+0x1cf68>
   2ecc4:	sub	lr, fp, #3072	; 0xc00
   2ecc8:	sub	r0, lr, #56	; 0x38
   2eccc:	sub	lr, fp, #2048	; 0x800
   2ecd0:	str	r7, [r0, r8, lsl #2]
   2ecd4:	sub	r0, lr, #56	; 0x38
   2ecd8:	str	r7, [r0, r8, lsl #2]
   2ecdc:	add	r0, sp, #168	; 0xa8
   2ece0:	ldr	r2, [sp, #164]	; 0xa4
   2ece4:	mov	r1, r0
   2ece8:	ldr	r0, [r0, r8, lsl #5]
   2ecec:	orr	r2, r2, r0
   2ecf0:	add	r0, r1, r8, lsl #5
   2ecf4:	add	r8, r8, #1
   2ecf8:	str	r2, [sp, #164]	; 0xa4
   2ecfc:	ldr	r2, [r0, #4]
   2ed00:	ldr	r1, [r0, #8]
   2ed04:	ldr	r7, [r0, #12]
   2ed08:	ldr	r5, [r0, #16]
   2ed0c:	ldr	r4, [r0, #20]
   2ed10:	ldr	r6, [r0, #24]
   2ed14:	ldr	r0, [r0, #28]
   2ed18:	orr	sl, sl, r0
   2ed1c:	ldr	r0, [sp, #144]	; 0x90
   2ed20:	orr	r0, r0, r6
   2ed24:	ldr	r6, [sp, #148]	; 0x94
   2ed28:	str	r0, [sp, #144]	; 0x90
   2ed2c:	ldr	r0, [sp, #152]	; 0x98
   2ed30:	orr	r6, r6, r4
   2ed34:	str	r6, [sp, #148]	; 0x94
   2ed38:	ldr	r6, [sp, #156]	; 0x9c
   2ed3c:	cmp	r8, r0
   2ed40:	orr	r6, r6, r5
   2ed44:	str	r6, [sp, #156]	; 0x9c
   2ed48:	ldr	r6, [sp, #160]	; 0xa0
   2ed4c:	orr	r6, r6, r7
   2ed50:	ldr	r7, [sp, #132]	; 0x84
   2ed54:	str	r6, [sp, #160]	; 0xa0
   2ed58:	mov	r6, r0
   2ed5c:	orr	r7, r7, r1
   2ed60:	ldr	r1, [sp, #136]	; 0x88
   2ed64:	orr	r1, r1, r2
   2ed68:	mov	r2, r1
   2ed6c:	ldr	r1, [sp, #140]	; 0x8c
   2ed70:	beq	2ef04 <__assert_fail@plt+0x1d03c>
   2ed74:	mov	r0, #0
   2ed78:	sub	lr, fp, #6144	; 0x1800
   2ed7c:	str	r2, [sp, #136]	; 0x88
   2ed80:	str	r7, [sp, #132]	; 0x84
   2ed84:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2ed88:	add	r0, r8, r8, lsl #1
   2ed8c:	sub	r2, lr, #104	; 0x68
   2ed90:	add	r0, r2, r0, lsl #2
   2ed94:	ldr	r7, [r0, #4]
   2ed98:	cmp	r7, #1
   2ed9c:	blt	2edf8 <__assert_fail@plt+0x1cf30>
   2eda0:	ldr	r4, [r0, #8]
   2eda4:	mov	r5, #0
   2eda8:	b	2edb8 <__assert_fail@plt+0x1cef0>
   2edac:	add	r5, r5, #1
   2edb0:	cmp	r5, r7
   2edb4:	bge	2edf4 <__assert_fail@plt+0x1cf2c>
   2edb8:	ldr	r0, [r4, r5, lsl #2]
   2edbc:	ldr	r2, [r1, #12]
   2edc0:	ldr	r0, [r2, r0, lsl #2]
   2edc4:	cmn	r0, #1
   2edc8:	beq	2edac <__assert_fail@plt+0x1cee4>
   2edcc:	ldr	r1, [r1, #24]
   2edd0:	add	r0, r0, r0, lsl #1
   2edd4:	add	r1, r1, r0, lsl #2
   2edd8:	mov	r0, r9
   2eddc:	bl	2a078 <__assert_fail@plt+0x181b0>
   2ede0:	ldr	r1, [sp, #140]	; 0x8c
   2ede4:	mov	r3, #0
   2ede8:	cmp	r0, #0
   2edec:	beq	2edac <__assert_fail@plt+0x1cee4>
   2edf0:	b	2f098 <__assert_fail@plt+0x1d1d0>
   2edf4:	str	r3, [fp, #-56]	; 0xffffffc8
   2edf8:	sub	r0, fp, #56	; 0x38
   2edfc:	mov	r2, r9
   2ee00:	mov	r3, #0
   2ee04:	bl	2a378 <__assert_fail@plt+0x184b0>
   2ee08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2ee0c:	mov	r7, r0
   2ee10:	sub	lr, fp, #1024	; 0x400
   2ee14:	sub	r0, lr, #56	; 0x38
   2ee18:	cmp	r7, #0
   2ee1c:	str	r7, [r0, r8, lsl #2]
   2ee20:	bne	2ecb8 <__assert_fail@plt+0x1cdf0>
   2ee24:	cmp	r3, #0
   2ee28:	beq	2ecb8 <__assert_fail@plt+0x1cdf0>
   2ee2c:	b	2eec4 <__assert_fail@plt+0x1cffc>
   2ee30:	ldr	r1, [sp, #140]	; 0x8c
   2ee34:	sub	r0, fp, #56	; 0x38
   2ee38:	mov	r2, r9
   2ee3c:	mov	r3, #1
   2ee40:	bl	2a378 <__assert_fail@plt+0x184b0>
   2ee44:	sub	lr, fp, #2048	; 0x800
   2ee48:	cmp	r0, #0
   2ee4c:	sub	r1, lr, #56	; 0x38
   2ee50:	str	r0, [r1, r8, lsl #2]
   2ee54:	bne	2ee64 <__assert_fail@plt+0x1cf9c>
   2ee58:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2ee5c:	cmp	r1, #0
   2ee60:	bne	2eec4 <__assert_fail@plt+0x1cffc>
   2ee64:	cmp	r7, r0
   2ee68:	beq	2ee90 <__assert_fail@plt+0x1cfc8>
   2ee6c:	ldr	r1, [sp, #140]	; 0x8c
   2ee70:	ldr	r2, [sp, #128]	; 0x80
   2ee74:	ldr	r0, [r1, #92]	; 0x5c
   2ee78:	cmp	r0, #1
   2ee7c:	mov	r0, #0
   2ee80:	movwgt	r0, #1
   2ee84:	orr	r2, r2, r0
   2ee88:	str	r2, [sp, #128]	; 0x80
   2ee8c:	b	2ee94 <__assert_fail@plt+0x1cfcc>
   2ee90:	ldr	r1, [sp, #140]	; 0x8c
   2ee94:	sub	r0, fp, #56	; 0x38
   2ee98:	mov	r2, r9
   2ee9c:	mov	r3, #2
   2eea0:	bl	2a378 <__assert_fail@plt+0x184b0>
   2eea4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2eea8:	sub	lr, fp, #3072	; 0xc00
   2eeac:	cmp	r0, #0
   2eeb0:	sub	r1, lr, #56	; 0x38
   2eeb4:	str	r0, [r1, r8, lsl #2]
   2eeb8:	bne	2ecdc <__assert_fail@plt+0x1ce14>
   2eebc:	cmp	r3, #0
   2eec0:	beq	2ecdc <__assert_fail@plt+0x1ce14>
   2eec4:	ldr	r0, [sp, #144]	; 0x90
   2eec8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   2eecc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2eed0:	ldr	r0, [sp, #148]	; 0x94
   2eed4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2eed8:	ldr	r0, [sp, #156]	; 0x9c
   2eedc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2eee0:	ldr	r0, [sp, #160]	; 0xa0
   2eee4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2eee8:	ldr	r0, [sp, #132]	; 0x84
   2eeec:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2eef0:	ldr	r0, [sp, #136]	; 0x88
   2eef4:	str	r0, [fp, #-3172]	; 0xfffff39c
   2eef8:	ldr	r0, [sp, #164]	; 0xa4
   2eefc:	str	r0, [fp, #-3176]	; 0xfffff398
   2ef00:	b	2f0d8 <__assert_fail@plt+0x1d210>
   2ef04:	ldr	r0, [sp, #144]	; 0x90
   2ef08:	str	sl, [fp, #-3148]	; 0xfffff3b4
   2ef0c:	ldr	r9, [sp, #128]	; 0x80
   2ef10:	ldr	sl, [sp, #164]	; 0xa4
   2ef14:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2ef18:	ldr	r0, [sp, #148]	; 0x94
   2ef1c:	tst	r9, #1
   2ef20:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2ef24:	ldr	r0, [sp, #156]	; 0x9c
   2ef28:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2ef2c:	ldr	r0, [sp, #160]	; 0xa0
   2ef30:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2ef34:	mov	r0, #4
   2ef38:	str	r7, [fp, #-3168]	; 0xfffff3a0
   2ef3c:	str	r2, [fp, #-3172]	; 0xfffff39c
   2ef40:	str	sl, [fp, #-3176]	; 0xfffff398
   2ef44:	bne	2f210 <__assert_fail@plt+0x1d348>
   2ef48:	mov	r1, #256	; 0x100
   2ef4c:	bl	347bc <__assert_fail@plt+0x228f4>
   2ef50:	ldr	r1, [sp, #12]
   2ef54:	cmp	r0, #0
   2ef58:	str	r0, [r1, #44]	; 0x2c
   2ef5c:	beq	2f0d8 <__assert_fail@plt+0x1d210>
   2ef60:	ldr	r4, [sp, #140]	; 0x8c
   2ef64:	mov	r1, #0
   2ef68:	mov	r3, sl
   2ef6c:	mov	r2, #0
   2ef70:	add	r8, sp, #168	; 0xa8
   2ef74:	cmp	r3, #0
   2ef78:	bne	2ef98 <__assert_fail@plt+0x1d0d0>
   2ef7c:	b	2f010 <__assert_fail@plt+0x1d148>
   2ef80:	sub	lr, fp, #3072	; 0xc00
   2ef84:	add	r8, r8, #4
   2ef88:	sub	r3, lr, #104	; 0x68
   2ef8c:	ldr	r3, [r3, r2, lsl #2]
   2ef90:	cmp	r3, #0
   2ef94:	beq	2f010 <__assert_fail@plt+0x1d148>
   2ef98:	add	r7, r4, r2, lsl #2
   2ef9c:	lsl	r6, r2, #5
   2efa0:	mov	r5, #1
   2efa4:	add	ip, r7, #96	; 0x60
   2efa8:	tst	r3, #1
   2efac:	bne	2efcc <__assert_fail@plt+0x1d104>
   2efb0:	lsr	r7, r3, #1
   2efb4:	cmp	r1, r3, lsr #1
   2efb8:	add	r6, r6, #1
   2efbc:	lsl	r5, r5, #1
   2efc0:	mov	r3, r7
   2efc4:	bne	2efa8 <__assert_fail@plt+0x1d0e0>
   2efc8:	b	2f010 <__assert_fail@plt+0x1d148>
   2efcc:	mov	lr, #0
   2efd0:	ldr	r7, [r8, lr, lsl #3]
   2efd4:	add	lr, lr, #4
   2efd8:	tst	r7, r5
   2efdc:	beq	2efd0 <__assert_fail@plt+0x1d108>
   2efe0:	ldr	r7, [ip]
   2efe4:	sub	r4, fp, #2048	; 0x800
   2efe8:	tst	r7, r5
   2efec:	sub	r7, r4, #56	; 0x38
   2eff0:	sub	r4, fp, #1024	; 0x400
   2eff4:	sub	r4, r4, #56	; 0x38
   2eff8:	moveq	r7, r4
   2effc:	ldr	r4, [sp, #140]	; 0x8c
   2f000:	add	r7, r7, lr
   2f004:	ldr	r7, [r7, #-4]
   2f008:	str	r7, [r0, r6, lsl #2]
   2f00c:	b	2efb0 <__assert_fail@plt+0x1d0e8>
   2f010:	add	r2, r2, #1
   2f014:	cmp	r2, #8
   2f018:	bne	2ef80 <__assert_fail@plt+0x1d0b8>
   2f01c:	ldr	r5, [sp, #152]	; 0x98
   2f020:	tst	sl, #1024	; 0x400
   2f024:	beq	2f06c <__assert_fail@plt+0x1d1a4>
   2f028:	add	r1, sp, #168	; 0xa8
   2f02c:	mov	r2, r5
   2f030:	ldrb	r3, [r1, #1]
   2f034:	tst	r3, #4
   2f038:	bne	2f058 <__assert_fail@plt+0x1d190>
   2f03c:	ldr	r3, [sp, #124]	; 0x7c
   2f040:	add	r1, r1, #32
   2f044:	subs	r2, r2, #1
   2f048:	add	r3, r3, #4
   2f04c:	str	r3, [sp, #124]	; 0x7c
   2f050:	bne	2f030 <__assert_fail@plt+0x1d168>
   2f054:	b	2f06c <__assert_fail@plt+0x1d1a4>
   2f058:	ldr	r1, [sp, #124]	; 0x7c
   2f05c:	tst	r9, #1
   2f060:	ldr	r1, [r1]
   2f064:	str	r1, [r0, #40]	; 0x28
   2f068:	strne	r1, [r0, #1064]	; 0x428
   2f06c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2f070:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f074:	sub	lr, fp, #6144	; 0x1800
   2f078:	sub	r0, lr, #104	; 0x68
   2f07c:	add	r4, r0, #8
   2f080:	ldr	r0, [r4], #12
   2f084:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f088:	subs	r5, r5, #1
   2f08c:	bne	2f080 <__assert_fail@plt+0x1d1b8>
   2f090:	mov	r0, #1
   2f094:	b	2f1f4 <__assert_fail@plt+0x1d32c>
   2f098:	ldr	r1, [sp, #144]	; 0x90
   2f09c:	str	sl, [fp, #-3148]	; 0xfffff3b4
   2f0a0:	str	r0, [fp, #-56]	; 0xffffffc8
   2f0a4:	str	r1, [fp, #-3152]	; 0xfffff3b0
   2f0a8:	ldr	r1, [sp, #148]	; 0x94
   2f0ac:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2f0b0:	ldr	r1, [sp, #156]	; 0x9c
   2f0b4:	str	r1, [fp, #-3160]	; 0xfffff3a8
   2f0b8:	ldr	r1, [sp, #160]	; 0xa0
   2f0bc:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2f0c0:	ldr	r1, [sp, #132]	; 0x84
   2f0c4:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2f0c8:	ldr	r1, [sp, #136]	; 0x88
   2f0cc:	str	r1, [fp, #-3172]	; 0xfffff39c
   2f0d0:	ldr	r1, [sp, #164]	; 0xa4
   2f0d4:	str	r1, [fp, #-3176]	; 0xfffff398
   2f0d8:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2f0dc:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f0e0:	cmp	r6, #1
   2f0e4:	blt	2f1b0 <__assert_fail@plt+0x1d2e8>
   2f0e8:	sub	lr, fp, #6144	; 0x1800
   2f0ec:	sub	r0, lr, #104	; 0x68
   2f0f0:	add	r4, r0, #8
   2f0f4:	ldr	r0, [r4], #12
   2f0f8:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f0fc:	subs	r6, r6, #1
   2f100:	bne	2f0f4 <__assert_fail@plt+0x1d22c>
   2f104:	b	2f1b0 <__assert_fail@plt+0x1d2e8>
   2f108:	ldr	r0, [sp, #44]	; 0x2c
   2f10c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   2f110:	str	r5, [fp, #-1056]	; 0xfffffbe0
   2f114:	str	r8, [fp, #-1060]	; 0xfffffbdc
   2f118:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2f11c:	ldr	r6, [sp, #152]	; 0x98
   2f120:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2f124:	ldr	r0, [sp, #48]	; 0x30
   2f128:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2f12c:	ldr	r0, [sp, #52]	; 0x34
   2f130:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2f134:	ldr	r0, [sp, #56]	; 0x38
   2f138:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2f13c:	cmp	r6, #1
   2f140:	bge	2f194 <__assert_fail@plt+0x1d2cc>
   2f144:	b	2f1b0 <__assert_fail@plt+0x1d2e8>
   2f148:	ldr	r0, [sp, #32]
   2f14c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   2f150:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2f154:	ldr	r0, [sp, #40]	; 0x28
   2f158:	str	r8, [fp, #-1060]	; 0xfffffbdc
   2f15c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2f160:	ldr	r0, [sp, #44]	; 0x2c
   2f164:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2f168:	ldr	r0, [sp, #48]	; 0x30
   2f16c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2f170:	ldr	r0, [sp, #52]	; 0x34
   2f174:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2f178:	ldr	r0, [sp, #56]	; 0x38
   2f17c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2f180:	mov	r0, #0
   2f184:	str	r0, [r5]
   2f188:	str	r0, [r4]
   2f18c:	cmp	r6, #1
   2f190:	blt	2f1b0 <__assert_fail@plt+0x1d2e8>
   2f194:	sub	lr, fp, #6144	; 0x1800
   2f198:	sub	r0, lr, #104	; 0x68
   2f19c:	add	r4, r0, #8
   2f1a0:	ldr	r0, [r4], #12
   2f1a4:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f1a8:	subs	r6, r6, #1
   2f1ac:	bne	2f1a0 <__assert_fail@plt+0x1d2d8>
   2f1b0:	mov	r0, #0
   2f1b4:	b	2f1f4 <__assert_fail@plt+0x1d32c>
   2f1b8:	mov	r0, #0
   2f1bc:	str	r0, [r6]
   2f1c0:	str	r0, [r7]
   2f1c4:	mov	r6, r5
   2f1c8:	cmp	r6, #1
   2f1cc:	bge	2f194 <__assert_fail@plt+0x1d2cc>
   2f1d0:	b	2f1b0 <__assert_fail@plt+0x1d2e8>
   2f1d4:	mov	r0, #0
   2f1d8:	bne	2f1f4 <__assert_fail@plt+0x1d32c>
   2f1dc:	mov	r0, #4
   2f1e0:	mov	r1, #256	; 0x100
   2f1e4:	bl	347bc <__assert_fail@plt+0x228f4>
   2f1e8:	cmp	r0, #0
   2f1ec:	str	r0, [r8, #44]	; 0x2c
   2f1f0:	movwne	r0, #1
   2f1f4:	sub	sp, fp, #48	; 0x30
   2f1f8:	vpop	{d8-d9}
   2f1fc:	add	sp, sp, #4
   2f200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f204:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2f208:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f20c:	b	2f0e8 <__assert_fail@plt+0x1d220>
   2f210:	mov	r1, #512	; 0x200
   2f214:	bl	347bc <__assert_fail@plt+0x228f4>
   2f218:	ldr	r1, [sp, #12]
   2f21c:	cmp	r0, #0
   2f220:	str	r0, [r1, #48]	; 0x30
   2f224:	beq	2f0d8 <__assert_fail@plt+0x1d210>
   2f228:	sub	lr, fp, #1024	; 0x400
   2f22c:	mov	r3, #0
   2f230:	add	r8, sp, #168	; 0xa8
   2f234:	mov	r5, sl
   2f238:	mov	r6, #0
   2f23c:	sub	r1, lr, #56	; 0x38
   2f240:	sub	lr, fp, #2048	; 0x800
   2f244:	sub	ip, r1, #4
   2f248:	sub	r1, lr, #56	; 0x38
   2f24c:	sub	lr, r1, #4
   2f250:	cmp	r5, #0
   2f254:	bne	2f274 <__assert_fail@plt+0x1d3ac>
   2f258:	b	2f2e0 <__assert_fail@plt+0x1d418>
   2f25c:	sub	r1, fp, #3072	; 0xc00
   2f260:	add	r8, r8, #4
   2f264:	sub	r1, r1, #104	; 0x68
   2f268:	ldr	r5, [r1, r6, lsl #2]
   2f26c:	cmp	r5, #0
   2f270:	beq	2f2e0 <__assert_fail@plt+0x1d418>
   2f274:	lsl	r4, r6, #5
   2f278:	mov	r1, #1
   2f27c:	tst	r5, #1
   2f280:	bne	2f2a0 <__assert_fail@plt+0x1d3d8>
   2f284:	lsr	r2, r5, #1
   2f288:	cmp	r3, r5, lsr #1
   2f28c:	add	r4, r4, #1
   2f290:	lsl	r1, r1, #1
   2f294:	mov	r5, r2
   2f298:	bne	2f27c <__assert_fail@plt+0x1d3b4>
   2f29c:	b	2f2e0 <__assert_fail@plt+0x1d418>
   2f2a0:	mov	r2, r8
   2f2a4:	mov	sl, ip
   2f2a8:	mov	r9, lr
   2f2ac:	ldr	r7, [r2], #32
   2f2b0:	add	sl, sl, #4
   2f2b4:	add	r9, r9, #4
   2f2b8:	tst	r7, r1
   2f2bc:	beq	2f2ac <__assert_fail@plt+0x1d3e4>
   2f2c0:	ldr	r2, [sl]
   2f2c4:	mov	r7, r0
   2f2c8:	str	r2, [r7, r4, lsl #2]!
   2f2cc:	ldr	r2, [r9]
   2f2d0:	ldr	r9, [sp, #128]	; 0x80
   2f2d4:	ldr	sl, [sp, #164]	; 0xa4
   2f2d8:	str	r2, [r7, #1024]	; 0x400
   2f2dc:	b	2f284 <__assert_fail@plt+0x1d3bc>
   2f2e0:	add	r6, r6, #1
   2f2e4:	cmp	r6, #8
   2f2e8:	bne	2f25c <__assert_fail@plt+0x1d394>
   2f2ec:	b	2f01c <__assert_fail@plt+0x1d154>
   2f2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f2f4:	add	fp, sp, #28
   2f2f8:	sub	sp, sp, #52	; 0x34
   2f2fc:	ldr	r7, [r1, #8]
   2f300:	ldr	r4, [r1, #12]
   2f304:	mov	r5, r0
   2f308:	mov	r0, #1
   2f30c:	mov	r9, r1
   2f310:	str	r0, [sp, #44]	; 0x2c
   2f314:	str	r0, [sp, #40]	; 0x28
   2f318:	mov	r0, #4
   2f31c:	bl	34810 <__assert_fail@plt+0x22948>
   2f320:	cmp	r0, #0
   2f324:	str	r0, [sp, #48]	; 0x30
   2f328:	beq	2f77c <__assert_fail@plt+0x1d8b4>
   2f32c:	str	r7, [r0]
   2f330:	add	r3, sp, #40	; 0x28
   2f334:	mov	r0, r5
   2f338:	mov	r1, r9
   2f33c:	mov	r2, r4
   2f340:	str	r5, [sp, #20]
   2f344:	bl	2f798 <__assert_fail@plt+0x1d8d0>
   2f348:	cmp	r0, #0
   2f34c:	bne	2f774 <__assert_fail@plt+0x1d8ac>
   2f350:	add	r0, r9, #16
   2f354:	mov	r5, r4
   2f358:	mov	r1, #0
   2f35c:	str	r9, [sp, #12]
   2f360:	str	r0, [sp, #16]
   2f364:	cmp	r5, #1
   2f368:	bge	2f398 <__assert_fail@plt+0x1d4d0>
   2f36c:	b	2f734 <__assert_fail@plt+0x1d86c>
   2f370:	mov	r0, r7
   2f374:	mov	r1, r9
   2f378:	mov	r2, r5
   2f37c:	add	r3, sp, #40	; 0x28
   2f380:	bl	2f798 <__assert_fail@plt+0x1d8d0>
   2f384:	ldr	r1, [sp, #8]
   2f388:	cmp	r0, #0
   2f38c:	bne	2f774 <__assert_fail@plt+0x1d8ac>
   2f390:	cmp	r5, #1
   2f394:	blt	2f734 <__assert_fail@plt+0x1d86c>
   2f398:	ldr	r0, [r9]
   2f39c:	ldr	r7, [sp, #20]
   2f3a0:	ldr	r2, [r0, r5, lsl #2]
   2f3a4:	cmp	r2, #0
   2f3a8:	mov	r2, #0
   2f3ac:	addeq	r2, r1, #1
   2f3b0:	ldr	r1, [r7, #120]	; 0x78
   2f3b4:	cmp	r2, r1
   2f3b8:	bgt	2f73c <__assert_fail@plt+0x1d874>
   2f3bc:	mov	r0, #0
   2f3c0:	str	r5, [sp, #24]
   2f3c4:	sub	r5, r5, #1
   2f3c8:	str	r2, [sp, #8]
   2f3cc:	str	r0, [sp, #44]	; 0x2c
   2f3d0:	ldr	r0, [r7, #100]	; 0x64
   2f3d4:	ldr	r1, [r0, r5, lsl #2]
   2f3d8:	cmp	r1, #0
   2f3dc:	beq	2f370 <__assert_fail@plt+0x1d4a8>
   2f3e0:	ldr	r0, [r1, #20]
   2f3e4:	cmp	r0, #1
   2f3e8:	blt	2f370 <__assert_fail@plt+0x1d4a8>
   2f3ec:	ldr	r6, [r7, #84]	; 0x54
   2f3f0:	mov	r8, #0
   2f3f4:	str	r5, [sp, #28]
   2f3f8:	str	r1, [sp, #36]	; 0x24
   2f3fc:	str	r6, [sp, #32]
   2f400:	b	2f444 <__assert_fail@plt+0x1d57c>
   2f404:	ldr	r2, [sp, #40]	; 0x28
   2f408:	cmp	r2, #0
   2f40c:	beq	2f604 <__assert_fail@plt+0x1d73c>
   2f410:	ldr	r1, [sp, #44]	; 0x2c
   2f414:	cmp	r1, #0
   2f418:	bne	2f62c <__assert_fail@plt+0x1d764>
   2f41c:	ldr	r0, [sp, #48]	; 0x30
   2f420:	str	sl, [r0]
   2f424:	ldr	r0, [sp, #44]	; 0x2c
   2f428:	add	r0, r0, #1
   2f42c:	str	r0, [sp, #44]	; 0x2c
   2f430:	ldr	r1, [sp, #36]	; 0x24
   2f434:	add	r8, r8, #1
   2f438:	ldr	r0, [r1, #20]
   2f43c:	cmp	r8, r0
   2f440:	bge	2f370 <__assert_fail@plt+0x1d4a8>
   2f444:	ldr	r0, [r1, #24]
   2f448:	ldr	sl, [r0, r8, lsl #2]
   2f44c:	ldr	r0, [r6]
   2f450:	add	r0, r0, sl, lsl #3
   2f454:	ldrb	r0, [r0, #6]
   2f458:	tst	r0, #16
   2f45c:	bne	2f4fc <__assert_fail@plt+0x1d634>
   2f460:	ldr	r0, [r6]
   2f464:	mov	r2, r5
   2f468:	add	r1, r0, sl, lsl #3
   2f46c:	mov	r0, r7
   2f470:	bl	2dfac <__assert_fail@plt+0x1c0e4>
   2f474:	cmp	r0, #0
   2f478:	beq	2f430 <__assert_fail@plt+0x1d568>
   2f47c:	ldr	r0, [r9]
   2f480:	ldr	r1, [sp, #24]
   2f484:	ldr	r0, [r0, r1, lsl #2]
   2f488:	cmp	r0, #0
   2f48c:	beq	2f430 <__assert_fail@plt+0x1d568>
   2f490:	ldr	r2, [r0, #8]
   2f494:	cmp	r2, #1
   2f498:	blt	2f430 <__assert_fail@plt+0x1d568>
   2f49c:	ldr	r1, [r6, #12]
   2f4a0:	ldr	r0, [r0, #12]
   2f4a4:	subs	r3, r2, #1
   2f4a8:	mov	r2, #0
   2f4ac:	ldr	r1, [r1, sl, lsl #2]
   2f4b0:	beq	2f4d8 <__assert_fail@plt+0x1d610>
   2f4b4:	mov	r4, #1
   2f4b8:	add	r7, r2, r3
   2f4bc:	lsr	r6, r7, #1
   2f4c0:	ldr	r5, [r0, r6, lsl #2]
   2f4c4:	cmp	r5, r1
   2f4c8:	addlt	r2, r4, r7, lsr #1
   2f4cc:	movge	r3, r6
   2f4d0:	cmp	r2, r3
   2f4d4:	bcc	2f4b8 <__assert_fail@plt+0x1d5f0>
   2f4d8:	ldr	r2, [r0, r2, lsl #2]
   2f4dc:	ldr	r9, [sp, #12]
   2f4e0:	ldr	r7, [sp, #20]
   2f4e4:	ldr	r5, [sp, #28]
   2f4e8:	ldr	r6, [sp, #32]
   2f4ec:	mov	r0, #1
   2f4f0:	cmp	r2, r1
   2f4f4:	bne	2f430 <__assert_fail@plt+0x1d568>
   2f4f8:	b	2f5cc <__assert_fail@plt+0x1d704>
   2f4fc:	ldr	r4, [r7, #84]	; 0x54
   2f500:	ldr	r6, [r9, #12]
   2f504:	mov	r1, sl
   2f508:	mov	r2, r7
   2f50c:	mov	r3, r5
   2f510:	mov	r0, r4
   2f514:	bl	2dc48 <__assert_fail@plt+0x1bd80>
   2f518:	cmp	r0, #1
   2f51c:	blt	2f538 <__assert_fail@plt+0x1d670>
   2f520:	add	r1, r0, r5
   2f524:	cmp	r1, r6
   2f528:	ble	2f548 <__assert_fail@plt+0x1d680>
   2f52c:	ldr	r5, [sp, #28]
   2f530:	ldr	r6, [sp, #32]
   2f534:	b	2f5cc <__assert_fail@plt+0x1d704>
   2f538:	ldr	r6, [sp, #32]
   2f53c:	cmp	r0, #0
   2f540:	bne	2f5cc <__assert_fail@plt+0x1d704>
   2f544:	b	2f460 <__assert_fail@plt+0x1d598>
   2f548:	ldr	r2, [r9]
   2f54c:	ldr	r5, [sp, #28]
   2f550:	ldr	r6, [sp, #32]
   2f554:	ldr	r2, [r2, r1, lsl #2]
   2f558:	cmp	r2, #0
   2f55c:	beq	2f460 <__assert_fail@plt+0x1d598>
   2f560:	ldr	r3, [r2, #8]
   2f564:	cmp	r3, #1
   2f568:	blt	2f460 <__assert_fail@plt+0x1d598>
   2f56c:	ldr	r1, [r4, #12]
   2f570:	ldr	r2, [r2, #12]
   2f574:	subs	r4, r3, #1
   2f578:	mov	r3, #0
   2f57c:	ldr	r1, [r1, sl, lsl #2]
   2f580:	beq	2f5a8 <__assert_fail@plt+0x1d6e0>
   2f584:	mov	ip, #1
   2f588:	add	r5, r3, r4
   2f58c:	lsr	r6, r5, #1
   2f590:	ldr	r7, [r2, r6, lsl #2]
   2f594:	cmp	r7, r1
   2f598:	addlt	r3, ip, r5, lsr #1
   2f59c:	movge	r4, r6
   2f5a0:	cmp	r3, r4
   2f5a4:	bcc	2f588 <__assert_fail@plt+0x1d6c0>
   2f5a8:	ldr	r9, [sp, #12]
   2f5ac:	ldr	r7, [sp, #20]
   2f5b0:	ldr	r5, [sp, #28]
   2f5b4:	ldr	r6, [sp, #32]
   2f5b8:	cmp	r0, #0
   2f5bc:	beq	2f460 <__assert_fail@plt+0x1d598>
   2f5c0:	ldr	r2, [r2, r3, lsl #2]
   2f5c4:	cmp	r2, r1
   2f5c8:	bne	2f460 <__assert_fail@plt+0x1d598>
   2f5cc:	ldr	r1, [r9, #20]
   2f5d0:	cmp	r1, #0
   2f5d4:	beq	2f404 <__assert_fail@plt+0x1d53c>
   2f5d8:	ldr	r1, [r6, #12]
   2f5dc:	add	r3, r0, r5
   2f5e0:	mov	r0, r7
   2f5e4:	ldr	r2, [r1, sl, lsl #2]
   2f5e8:	ldr	r1, [sp, #16]
   2f5ec:	str	sl, [sp]
   2f5f0:	str	r5, [sp, #4]
   2f5f4:	bl	3093c <__assert_fail@plt+0x1ea74>
   2f5f8:	cmp	r0, #0
   2f5fc:	beq	2f404 <__assert_fail@plt+0x1d53c>
   2f600:	b	2f430 <__assert_fail@plt+0x1d568>
   2f604:	mov	r0, #1
   2f608:	str	r0, [sp, #44]	; 0x2c
   2f60c:	str	r0, [sp, #40]	; 0x28
   2f610:	mov	r0, #4
   2f614:	bl	34810 <__assert_fail@plt+0x22948>
   2f618:	cmp	r0, #0
   2f61c:	str	r0, [sp, #48]	; 0x30
   2f620:	beq	2f760 <__assert_fail@plt+0x1d898>
   2f624:	str	sl, [r0]
   2f628:	b	2f430 <__assert_fail@plt+0x1d568>
   2f62c:	cmp	r2, r1
   2f630:	bne	2f65c <__assert_fail@plt+0x1d794>
   2f634:	lsl	r0, r2, #1
   2f638:	lsl	r1, r2, #3
   2f63c:	str	r0, [sp, #40]	; 0x28
   2f640:	ldr	r0, [sp, #48]	; 0x30
   2f644:	bl	34840 <__assert_fail@plt+0x22978>
   2f648:	cmp	r0, #0
   2f64c:	beq	2f790 <__assert_fail@plt+0x1d8c8>
   2f650:	str	r0, [sp, #48]	; 0x30
   2f654:	ldr	r1, [sp, #44]	; 0x2c
   2f658:	b	2f660 <__assert_fail@plt+0x1d798>
   2f65c:	ldr	r0, [sp, #48]	; 0x30
   2f660:	ldr	r2, [r0]
   2f664:	cmp	r2, sl
   2f668:	ble	2f6b4 <__assert_fail@plt+0x1d7ec>
   2f66c:	cmp	r1, #1
   2f670:	blt	2f72c <__assert_fail@plt+0x1d864>
   2f674:	ands	r3, r1, #3
   2f678:	sub	r2, r1, #1
   2f67c:	beq	2f6a0 <__assert_fail@plt+0x1d7d8>
   2f680:	add	r4, r0, r1, lsl #2
   2f684:	mov	r5, r4
   2f688:	ldr	r7, [r5, #-4]!
   2f68c:	subs	r3, r3, #1
   2f690:	sub	r1, r1, #1
   2f694:	str	r7, [r4]
   2f698:	mov	r4, r5
   2f69c:	bne	2f688 <__assert_fail@plt+0x1d7c0>
   2f6a0:	cmp	r2, #3
   2f6a4:	bcs	2f6e8 <__assert_fail@plt+0x1d820>
   2f6a8:	ldr	r7, [sp, #20]
   2f6ac:	ldr	r5, [sp, #28]
   2f6b0:	b	2f728 <__assert_fail@plt+0x1d860>
   2f6b4:	add	r2, r0, r1, lsl #2
   2f6b8:	ldr	r3, [r2, #-4]
   2f6bc:	cmp	r3, sl
   2f6c0:	ble	2f72c <__assert_fail@plt+0x1d864>
   2f6c4:	sub	r1, r1, #2
   2f6c8:	str	r3, [r2]
   2f6cc:	sub	r1, r1, #1
   2f6d0:	ldr	r3, [r2, #-8]
   2f6d4:	sub	r2, r2, #4
   2f6d8:	cmp	r3, sl
   2f6dc:	bgt	2f6c8 <__assert_fail@plt+0x1d800>
   2f6e0:	add	r1, r1, #2
   2f6e4:	b	2f72c <__assert_fail@plt+0x1d864>
   2f6e8:	add	r2, r0, r1, lsl #2
   2f6ec:	sub	r2, r2, #8
   2f6f0:	ldr	r6, [r2]
   2f6f4:	ldr	r5, [r2, #4]
   2f6f8:	ldmdb	r2, {r3, r7}
   2f6fc:	sub	r1, r1, #4
   2f700:	cmp	r1, #0
   2f704:	stmda	r2, {r3, r7}
   2f708:	str	r6, [r2, #4]
   2f70c:	str	r5, [r2, #8]
   2f710:	sub	r2, r2, #16
   2f714:	bgt	2f6f0 <__assert_fail@plt+0x1d828>
   2f718:	ldr	r9, [sp, #12]
   2f71c:	ldr	r7, [sp, #20]
   2f720:	ldr	r5, [sp, #28]
   2f724:	ldr	r6, [sp, #32]
   2f728:	mov	r1, #0
   2f72c:	str	sl, [r0, r1, lsl #2]
   2f730:	b	2f424 <__assert_fail@plt+0x1d55c>
   2f734:	mov	r7, #0
   2f738:	b	2f74c <__assert_fail@plt+0x1d884>
   2f73c:	lsl	r2, r5, #2
   2f740:	mov	r1, #0
   2f744:	mov	r7, #0
   2f748:	bl	11d0c <memset@plt>
   2f74c:	ldr	r0, [sp, #48]	; 0x30
   2f750:	bl	176c0 <__assert_fail@plt+0x57f8>
   2f754:	mov	r0, r7
   2f758:	sub	sp, fp, #28
   2f75c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f760:	mov	r0, #0
   2f764:	mov	r7, #12
   2f768:	str	r0, [sp, #40]	; 0x28
   2f76c:	str	r0, [sp, #44]	; 0x2c
   2f770:	b	2f74c <__assert_fail@plt+0x1d884>
   2f774:	mov	r7, r0
   2f778:	b	2f74c <__assert_fail@plt+0x1d884>
   2f77c:	mov	r0, #0
   2f780:	mov	r7, #12
   2f784:	str	r0, [sp, #40]	; 0x28
   2f788:	str	r0, [sp, #44]	; 0x2c
   2f78c:	b	2f754 <__assert_fail@plt+0x1d88c>
   2f790:	mov	r7, #12
   2f794:	b	2f74c <__assert_fail@plt+0x1d884>
   2f798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f79c:	add	fp, sp, #28
   2f7a0:	sub	sp, sp, #132	; 0x84
   2f7a4:	mov	r6, r0
   2f7a8:	ldr	r8, [r0, #84]	; 0x54
   2f7ac:	mov	r0, #0
   2f7b0:	mov	sl, r1
   2f7b4:	mov	r5, r2
   2f7b8:	str	r2, [sp, #76]	; 0x4c
   2f7bc:	str	r0, [fp, #-76]	; 0xffffffb4
   2f7c0:	str	r6, [sp, #52]	; 0x34
   2f7c4:	ldr	r1, [r6, #100]	; 0x64
   2f7c8:	ldr	r7, [r1, r2, lsl #2]
   2f7cc:	ldr	r1, [r3, #4]
   2f7d0:	cmp	r7, #0
   2f7d4:	mov	r9, r7
   2f7d8:	addne	r9, r9, #4
   2f7dc:	cmp	r1, #0
   2f7e0:	beq	2fba4 <__assert_fail@plt+0x1dcdc>
   2f7e4:	mov	lr, r3
   2f7e8:	cmp	r7, #0
   2f7ec:	beq	2fbcc <__assert_fail@plt+0x1dd04>
   2f7f0:	mov	r0, #0
   2f7f4:	mov	r1, r8
   2f7f8:	mov	r2, lr
   2f7fc:	str	r8, [sp, #80]	; 0x50
   2f800:	str	lr, [sp, #60]	; 0x3c
   2f804:	str	r0, [fp, #-72]	; 0xffffffb8
   2f808:	sub	r0, fp, #72	; 0x48
   2f80c:	bl	2d930 <__assert_fail@plt+0x1ba68>
   2f810:	ldr	r8, [fp, #-72]	; 0xffffffb8
   2f814:	cmp	r8, #0
   2f818:	bne	30394 <__assert_fail@plt+0x1e4cc>
   2f81c:	mov	r5, r0
   2f820:	mov	r4, r0
   2f824:	ldr	r2, [sp, #60]	; 0x3c
   2f828:	ldr	r0, [r5, #28]!
   2f82c:	cmp	r0, #0
   2f830:	bne	2f8d0 <__assert_fail@plt+0x1da08>
   2f834:	ldr	r0, [r2, #4]
   2f838:	mov	r1, #0
   2f83c:	str	r0, [r4, #28]
   2f840:	lsl	r0, r0, #2
   2f844:	str	r1, [r4, #32]
   2f848:	bl	34810 <__assert_fail@plt+0x22948>
   2f84c:	cmp	r0, #0
   2f850:	mov	r1, #12
   2f854:	mov	r8, #12
   2f858:	str	r0, [r4, #36]	; 0x24
   2f85c:	movne	r1, #0
   2f860:	cmp	r0, #0
   2f864:	str	r1, [fp, #-72]	; 0xffffffb8
   2f868:	beq	30394 <__assert_fail@plt+0x1e4cc>
   2f86c:	ldr	r2, [sp, #60]	; 0x3c
   2f870:	ldr	r0, [r2, #4]
   2f874:	cmp	r0, #1
   2f878:	blt	2f8d0 <__assert_fail@plt+0x1da08>
   2f87c:	str	r9, [sp, #72]	; 0x48
   2f880:	mov	r4, #0
   2f884:	ldr	r0, [r2, #8]
   2f888:	ldr	r1, [sp, #80]	; 0x50
   2f88c:	mov	r9, r2
   2f890:	ldr	r0, [r0, r4, lsl #2]
   2f894:	ldr	r1, [r1, #28]
   2f898:	add	r0, r0, r0, lsl #1
   2f89c:	add	r1, r1, r0, lsl #2
   2f8a0:	mov	r0, r5
   2f8a4:	bl	2a078 <__assert_fail@plt+0x181b0>
   2f8a8:	cmp	r0, #0
   2f8ac:	bne	30390 <__assert_fail@plt+0x1e4c8>
   2f8b0:	ldr	r0, [r9, #4]
   2f8b4:	add	r4, r4, #1
   2f8b8:	mov	r2, r9
   2f8bc:	cmp	r4, r0
   2f8c0:	blt	2f884 <__assert_fail@plt+0x1d9bc>
   2f8c4:	ldr	r9, [sp, #72]	; 0x48
   2f8c8:	mov	r0, #0
   2f8cc:	str	r0, [fp, #-72]	; 0xffffffb8
   2f8d0:	mov	r0, r2
   2f8d4:	mov	r1, r9
   2f8d8:	mov	r2, r5
   2f8dc:	bl	303d4 <__assert_fail@plt+0x1e50c>
   2f8e0:	cmp	r0, #0
   2f8e4:	str	r0, [fp, #-76]	; 0xffffffb4
   2f8e8:	bne	303a4 <__assert_fail@plt+0x1e4dc>
   2f8ec:	ldr	r0, [sl, #20]
   2f8f0:	ldr	r5, [sp, #76]	; 0x4c
   2f8f4:	ldr	lr, [sp, #60]	; 0x3c
   2f8f8:	ldr	r8, [sp, #80]	; 0x50
   2f8fc:	cmp	r0, #0
   2f900:	beq	2fbcc <__assert_fail@plt+0x1dd04>
   2f904:	cmp	r0, #1
   2f908:	str	r7, [sp, #48]	; 0x30
   2f90c:	str	r9, [sp, #72]	; 0x48
   2f910:	blt	2fbb8 <__assert_fail@plt+0x1dcf0>
   2f914:	ldr	r0, [sp, #52]	; 0x34
   2f918:	mov	r9, #0
   2f91c:	str	sl, [sp, #64]	; 0x40
   2f920:	ldr	r0, [r0, #116]	; 0x74
   2f924:	str	r0, [sp, #68]	; 0x44
   2f928:	b	2f940 <__assert_fail@plt+0x1da78>
   2f92c:	ldr	sl, [sp, #64]	; 0x40
   2f930:	add	r9, r9, #1
   2f934:	ldr	r0, [sl, #20]
   2f938:	cmp	r9, r0
   2f93c:	bge	2fbb8 <__assert_fail@plt+0x1dcf0>
   2f940:	ldr	r0, [sl, #24]
   2f944:	ldr	r1, [sp, #68]	; 0x44
   2f948:	ldr	r0, [r0, r9, lsl #2]
   2f94c:	add	r0, r0, r0, lsl #1
   2f950:	add	r1, r1, r0, lsl #3
   2f954:	ldr	r2, [r1, #8]
   2f958:	cmp	r2, r5
   2f95c:	bge	2f92c <__assert_fail@plt+0x1da64>
   2f960:	ldr	r1, [r1, #4]
   2f964:	cmp	r1, r5
   2f968:	blt	2f92c <__assert_fail@plt+0x1da64>
   2f96c:	ldr	r1, [sp, #68]	; 0x44
   2f970:	ldr	r2, [r8]
   2f974:	ldr	r0, [r1, r0, lsl #3]!
   2f978:	ldr	r1, [r1, #12]
   2f97c:	ldr	r4, [r2, r0, lsl #3]
   2f980:	ldr	r0, [lr, #4]
   2f984:	cmp	r1, r5
   2f988:	bne	2f9e8 <__assert_fail@plt+0x1db20>
   2f98c:	cmp	r0, #1
   2f990:	blt	2f92c <__assert_fail@plt+0x1da64>
   2f994:	ldr	r3, [lr, #8]
   2f998:	mvn	sl, #0
   2f99c:	mvn	r1, #0
   2f9a0:	b	2f9bc <__assert_fail@plt+0x1daf4>
   2f9a4:	ldr	r6, [r2, r7, lsl #3]
   2f9a8:	cmp	r4, r6
   2f9ac:	moveq	sl, r7
   2f9b0:	add	r3, r3, #4
   2f9b4:	subs	r0, r0, #1
   2f9b8:	beq	2fa58 <__assert_fail@plt+0x1db90>
   2f9bc:	ldr	r7, [r3]
   2f9c0:	add	r6, r2, r7, lsl #3
   2f9c4:	ldrb	r6, [r6, #4]
   2f9c8:	cmp	r6, #9
   2f9cc:	beq	2f9a4 <__assert_fail@plt+0x1dadc>
   2f9d0:	cmp	r6, #8
   2f9d4:	bne	2f9b0 <__assert_fail@plt+0x1dae8>
   2f9d8:	ldr	r6, [r2, r7, lsl #3]
   2f9dc:	cmp	r4, r6
   2f9e0:	moveq	r1, r7
   2f9e4:	b	2f9b0 <__assert_fail@plt+0x1dae8>
   2f9e8:	cmp	r0, #1
   2f9ec:	blt	2f92c <__assert_fail@plt+0x1da64>
   2f9f0:	mov	r7, #0
   2f9f4:	ldr	r1, [lr, #8]
   2f9f8:	ldr	r1, [r1, r7, lsl #2]
   2f9fc:	add	r3, r2, r1, lsl #3
   2fa00:	ldrb	r3, [r3, #4]
   2fa04:	orr	r3, r3, #1
   2fa08:	cmp	r3, #9
   2fa0c:	bne	2fa44 <__assert_fail@plt+0x1db7c>
   2fa10:	ldr	r2, [r2, r1, lsl #3]
   2fa14:	cmp	r4, r2
   2fa18:	bne	2fa44 <__assert_fail@plt+0x1db7c>
   2fa1c:	ldr	r3, [sp, #72]	; 0x48
   2fa20:	mov	r0, r8
   2fa24:	mov	r2, lr
   2fa28:	mov	r6, lr
   2fa2c:	bl	305b4 <__assert_fail@plt+0x1e6ec>
   2fa30:	cmp	r0, #0
   2fa34:	bne	30350 <__assert_fail@plt+0x1e488>
   2fa38:	ldr	r0, [r6, #4]
   2fa3c:	ldr	r8, [sp, #80]	; 0x50
   2fa40:	mov	lr, r6
   2fa44:	add	r7, r7, #1
   2fa48:	cmp	r7, r0
   2fa4c:	bge	2f92c <__assert_fail@plt+0x1da64>
   2fa50:	ldr	r2, [r8]
   2fa54:	b	2f9f4 <__assert_fail@plt+0x1db2c>
   2fa58:	cmp	r1, #0
   2fa5c:	bmi	2fa7c <__assert_fail@plt+0x1dbb4>
   2fa60:	ldr	r0, [sp, #80]	; 0x50
   2fa64:	ldr	r3, [sp, #72]	; 0x48
   2fa68:	mov	r2, lr
   2fa6c:	bl	305b4 <__assert_fail@plt+0x1e6ec>
   2fa70:	ldr	lr, [sp, #60]	; 0x3c
   2fa74:	cmp	r0, #0
   2fa78:	bne	30350 <__assert_fail@plt+0x1e488>
   2fa7c:	ldr	r8, [sp, #80]	; 0x50
   2fa80:	cmp	sl, #0
   2fa84:	bmi	2f92c <__assert_fail@plt+0x1da64>
   2fa88:	ldr	ip, [lr, #4]
   2fa8c:	cmp	ip, #1
   2fa90:	blt	2f92c <__assert_fail@plt+0x1da64>
   2fa94:	mov	r4, #0
   2fa98:	b	2faac <__assert_fail@plt+0x1dbe4>
   2fa9c:	ldr	lr, [sp, #60]	; 0x3c
   2faa0:	add	r4, r4, #1
   2faa4:	cmp	r4, ip
   2faa8:	bge	2f92c <__assert_fail@plt+0x1da64>
   2faac:	ldr	r0, [lr, #8]
   2fab0:	ldr	r1, [r0, r4, lsl #2]
   2fab4:	ldr	r0, [r8, #28]
   2fab8:	add	lr, r1, r1, lsl #1
   2fabc:	add	r3, r0, lr, lsl #2
   2fac0:	ldr	r0, [r3, #4]
   2fac4:	cmp	r0, #1
   2fac8:	blt	2fb18 <__assert_fail@plt+0x1dc50>
   2facc:	ldr	r3, [r3, #8]
   2fad0:	mov	r7, #0
   2fad4:	subs	r0, r0, #1
   2fad8:	str	ip, [sp, #56]	; 0x38
   2fadc:	beq	2fb04 <__assert_fail@plt+0x1dc3c>
   2fae0:	add	r6, r7, r0
   2fae4:	mov	ip, #1
   2fae8:	lsr	r5, r6, #1
   2faec:	ldr	r2, [r3, r5, lsl #2]
   2faf0:	cmp	r2, sl
   2faf4:	addlt	r7, ip, r6, lsr #1
   2faf8:	movge	r0, r5
   2fafc:	cmp	r7, r0
   2fb00:	bcc	2fae0 <__assert_fail@plt+0x1dc18>
   2fb04:	ldr	r0, [r3, r7, lsl #2]
   2fb08:	ldr	r5, [sp, #76]	; 0x4c
   2fb0c:	ldr	ip, [sp, #56]	; 0x38
   2fb10:	cmp	r0, sl
   2fb14:	beq	2fa9c <__assert_fail@plt+0x1dbd4>
   2fb18:	ldr	r0, [r8, #24]
   2fb1c:	add	r2, r0, lr, lsl #2
   2fb20:	ldr	lr, [sp, #60]	; 0x3c
   2fb24:	ldr	r0, [r2, #4]
   2fb28:	cmp	r0, #1
   2fb2c:	blt	2fb74 <__assert_fail@plt+0x1dcac>
   2fb30:	ldr	r2, [r2, #8]
   2fb34:	mov	r3, #0
   2fb38:	subs	r0, r0, #1
   2fb3c:	beq	2fb64 <__assert_fail@plt+0x1dc9c>
   2fb40:	add	r7, r3, r0
   2fb44:	lsr	r6, r7, #1
   2fb48:	ldr	r5, [r2, r6, lsl #2]
   2fb4c:	cmp	r5, sl
   2fb50:	movge	r0, r6
   2fb54:	mov	r6, #1
   2fb58:	addlt	r3, r6, r7, lsr #1
   2fb5c:	cmp	r3, r0
   2fb60:	bcc	2fb40 <__assert_fail@plt+0x1dc78>
   2fb64:	ldr	r0, [r2, r3, lsl #2]
   2fb68:	ldr	r5, [sp, #76]	; 0x4c
   2fb6c:	cmp	r0, sl
   2fb70:	beq	2faa0 <__assert_fail@plt+0x1dbd8>
   2fb74:	ldr	r3, [sp, #72]	; 0x48
   2fb78:	mov	r0, r8
   2fb7c:	mov	r2, lr
   2fb80:	mov	r6, lr
   2fb84:	bl	305b4 <__assert_fail@plt+0x1e6ec>
   2fb88:	cmp	r0, #0
   2fb8c:	bne	30350 <__assert_fail@plt+0x1e488>
   2fb90:	ldr	ip, [r6, #4]
   2fb94:	ldr	r8, [sp, #80]	; 0x50
   2fb98:	sub	r4, r4, #1
   2fb9c:	mov	lr, r6
   2fba0:	b	2faa0 <__assert_fail@plt+0x1dbd8>
   2fba4:	ldr	r1, [sl]
   2fba8:	str	r0, [r1, r5, lsl #2]
   2fbac:	cmp	r7, #0
   2fbb0:	bne	2fbf8 <__assert_fail@plt+0x1dd30>
   2fbb4:	b	30340 <__assert_fail@plt+0x1e478>
   2fbb8:	ldr	r6, [sp, #52]	; 0x34
   2fbbc:	ldr	r9, [sp, #72]	; 0x48
   2fbc0:	ldr	r7, [sp, #48]	; 0x30
   2fbc4:	mov	r0, #0
   2fbc8:	str	r0, [fp, #-76]	; 0xffffffb4
   2fbcc:	sub	r0, fp, #76	; 0x4c
   2fbd0:	mov	r1, r8
   2fbd4:	mov	r2, lr
   2fbd8:	bl	2d930 <__assert_fail@plt+0x1ba68>
   2fbdc:	ldr	r1, [sl]
   2fbe0:	str	r0, [r1, r5, lsl #2]
   2fbe4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   2fbe8:	cmp	r8, #0
   2fbec:	bne	30344 <__assert_fail@plt+0x1e47c>
   2fbf0:	cmp	r7, #0
   2fbf4:	beq	30340 <__assert_fail@plt+0x1e478>
   2fbf8:	ldr	r0, [r6, #100]	; 0x64
   2fbfc:	ldr	r0, [r0, r5, lsl #2]
   2fc00:	ldrb	r0, [r0, #52]	; 0x34
   2fc04:	tst	r0, #64	; 0x40
   2fc08:	beq	30340 <__assert_fail@plt+0x1e478>
   2fc0c:	ldr	r0, [r6, #108]	; 0x6c
   2fc10:	ldr	ip, [r6, #84]	; 0x54
   2fc14:	cmp	r0, #1
   2fc18:	blt	3032c <__assert_fail@plt+0x1e464>
   2fc1c:	ldr	r1, [r6, #116]	; 0x74
   2fc20:	mov	lr, #0
   2fc24:	mov	r2, #1
   2fc28:	mov	r3, r0
   2fc2c:	add	r7, r3, lr
   2fc30:	add	r7, r7, r7, lsr #31
   2fc34:	asr	r6, r7, #1
   2fc38:	add	r4, r6, r6, lsl #1
   2fc3c:	add	r4, r1, r4, lsl #3
   2fc40:	ldr	r4, [r4, #4]
   2fc44:	cmp	r4, r5
   2fc48:	addlt	lr, r2, r7, asr #1
   2fc4c:	movge	r3, r6
   2fc50:	cmp	lr, r3
   2fc54:	blt	2fc2c <__assert_fail@plt+0x1dd64>
   2fc58:	cmp	lr, r0
   2fc5c:	bge	30338 <__assert_fail@plt+0x1e470>
   2fc60:	cmn	lr, #1
   2fc64:	beq	30338 <__assert_fail@plt+0x1e470>
   2fc68:	ldr	r0, [sp, #52]	; 0x34
   2fc6c:	add	r1, lr, lr, lsl #1
   2fc70:	str	r1, [sp, #28]
   2fc74:	ldr	r0, [r0, #116]	; 0x74
   2fc78:	add	r0, r0, r1, lsl #3
   2fc7c:	ldr	r0, [r0, #4]
   2fc80:	cmp	r0, r5
   2fc84:	bne	30338 <__assert_fail@plt+0x1e470>
   2fc88:	mov	r1, #0
   2fc8c:	ldr	r4, [sp, #52]	; 0x34
   2fc90:	str	r1, [fp, #-72]	; 0xffffffb8
   2fc94:	ldr	r0, [r9, #4]
   2fc98:	cmp	r0, #0
   2fc9c:	ble	3035c <__assert_fail@plt+0x1e494>
   2fca0:	add	r0, r5, #1
   2fca4:	mov	r2, #0
   2fca8:	mov	r3, ip
   2fcac:	str	ip, [sp, #80]	; 0x50
   2fcb0:	str	sl, [sp, #64]	; 0x40
   2fcb4:	str	r9, [sp, #72]	; 0x48
   2fcb8:	str	lr, [sp, #56]	; 0x38
   2fcbc:	str	r0, [sp, #12]
   2fcc0:	sub	r0, fp, #72	; 0x48
   2fcc4:	add	r0, r0, #16
   2fcc8:	str	r0, [sp, #8]
   2fccc:	add	r0, sl, #16
   2fcd0:	str	r0, [sp, #36]	; 0x24
   2fcd4:	mov	r0, #0
   2fcd8:	str	r0, [sp, #40]	; 0x28
   2fcdc:	b	2fcf8 <__assert_fail@plt+0x1de30>
   2fce0:	ldr	r9, [sp, #72]	; 0x48
   2fce4:	ldr	r2, [sp, #48]	; 0x30
   2fce8:	ldr	r0, [r9, #4]
   2fcec:	add	r2, r2, #1
   2fcf0:	cmp	r2, r0
   2fcf4:	bge	30364 <__assert_fail@plt+0x1e49c>
   2fcf8:	ldr	r0, [r9, #8]
   2fcfc:	ldr	r1, [sl, #8]
   2fd00:	str	r2, [sp, #48]	; 0x30
   2fd04:	ldr	r7, [r0, r2, lsl #2]
   2fd08:	ldr	r0, [r3]
   2fd0c:	add	r0, r0, r7, lsl #3
   2fd10:	cmp	r7, r1
   2fd14:	ldrb	r0, [r0, #4]
   2fd18:	bne	2fd34 <__assert_fail@plt+0x1de6c>
   2fd1c:	cmp	r0, #4
   2fd20:	bne	2fce0 <__assert_fail@plt+0x1de18>
   2fd24:	ldr	r0, [sl, #12]
   2fd28:	cmp	r0, r5
   2fd2c:	bne	2fd3c <__assert_fail@plt+0x1de74>
   2fd30:	b	2fce0 <__assert_fail@plt+0x1de18>
   2fd34:	cmp	r0, #4
   2fd38:	bne	2fce0 <__assert_fail@plt+0x1de18>
   2fd3c:	ldr	r0, [r4, #116]	; 0x74
   2fd40:	ldr	r1, [sp, #28]
   2fd44:	mov	r9, lr
   2fd48:	str	r7, [sp, #60]	; 0x3c
   2fd4c:	add	r6, r0, r1, lsl #3
   2fd50:	ldr	r0, [r6]
   2fd54:	cmp	r0, r7
   2fd58:	bne	2fe48 <__assert_fail@plt+0x1df80>
   2fd5c:	ldr	r0, [r6, #8]
   2fd60:	ldr	r1, [r6, #12]
   2fd64:	subs	r0, r1, r0
   2fd68:	add	ip, r0, r5
   2fd6c:	beq	2fd7c <__assert_fail@plt+0x1deb4>
   2fd70:	ldr	r1, [r3, #12]
   2fd74:	add	r1, r1, r7, lsl #2
   2fd78:	b	2fd8c <__assert_fail@plt+0x1dec4>
   2fd7c:	ldr	r1, [r3, #20]
   2fd80:	add	r2, r7, r7, lsl #1
   2fd84:	add	r1, r1, r2, lsl #2
   2fd88:	ldr	r1, [r1, #8]
   2fd8c:	ldr	r2, [sl, #12]
   2fd90:	cmp	ip, r2
   2fd94:	bgt	2fe48 <__assert_fail@plt+0x1df80>
   2fd98:	ldr	r2, [sl]
   2fd9c:	ldr	r2, [r2, ip, lsl #2]
   2fda0:	cmp	r2, #0
   2fda4:	beq	2fe48 <__assert_fail@plt+0x1df80>
   2fda8:	ldr	r3, [r2, #8]
   2fdac:	cmp	r3, #1
   2fdb0:	blt	2fe44 <__assert_fail@plt+0x1df7c>
   2fdb4:	ldr	r1, [r1]
   2fdb8:	ldr	r2, [r2, #12]
   2fdbc:	subs	r7, r3, #1
   2fdc0:	mov	r3, #0
   2fdc4:	str	r8, [sp, #68]	; 0x44
   2fdc8:	beq	2fdf0 <__assert_fail@plt+0x1df28>
   2fdcc:	mov	r8, #1
   2fdd0:	add	r5, r3, r7
   2fdd4:	lsr	r4, r5, #1
   2fdd8:	ldr	r0, [r2, r4, lsl #2]
   2fddc:	cmp	r0, r1
   2fde0:	addlt	r3, r8, r5, lsr #1
   2fde4:	movge	r7, r4
   2fde8:	cmp	r3, r7
   2fdec:	bcc	2fdd0 <__assert_fail@plt+0x1df08>
   2fdf0:	ldr	r0, [r2, r3, lsl #2]
   2fdf4:	cmp	r0, r1
   2fdf8:	bne	2fe34 <__assert_fail@plt+0x1df6c>
   2fdfc:	ldr	r4, [sp, #52]	; 0x34
   2fe00:	ldr	r7, [sp, #60]	; 0x3c
   2fe04:	ldr	r5, [sp, #76]	; 0x4c
   2fe08:	stm	sp, {r1, ip}
   2fe0c:	ldr	r1, [sp, #36]	; 0x24
   2fe10:	mov	r0, r4
   2fe14:	mov	r2, r7
   2fe18:	mov	r3, r5
   2fe1c:	bl	3093c <__assert_fail@plt+0x1ea74>
   2fe20:	ldr	r8, [sp, #68]	; 0x44
   2fe24:	cmp	r0, #0
   2fe28:	beq	2fe64 <__assert_fail@plt+0x1df9c>
   2fe2c:	ldr	lr, [sp, #56]	; 0x38
   2fe30:	b	2fe44 <__assert_fail@plt+0x1df7c>
   2fe34:	ldr	r5, [sp, #76]	; 0x4c
   2fe38:	ldr	r4, [sp, #52]	; 0x34
   2fe3c:	ldr	r8, [sp, #68]	; 0x44
   2fe40:	ldr	r7, [sp, #60]	; 0x3c
   2fe44:	ldr	r3, [sp, #80]	; 0x50
   2fe48:	mov	r0, r6
   2fe4c:	add	r6, r0, #24
   2fe50:	ldrb	r0, [r0, #20]
   2fe54:	add	r9, r9, #1
   2fe58:	cmp	r0, #0
   2fe5c:	bne	2fd50 <__assert_fail@plt+0x1de88>
   2fe60:	b	2fce0 <__assert_fail@plt+0x1de18>
   2fe64:	ldr	r0, [sp, #40]	; 0x28
   2fe68:	ldr	r6, [sp, #44]	; 0x2c
   2fe6c:	cmp	r0, #0
   2fe70:	beq	2fea0 <__assert_fail@plt+0x1dfd8>
   2fe74:	ldr	r0, [sp, #20]
   2fe78:	str	r5, [fp, #-60]	; 0xffffffc4
   2fe7c:	str	r7, [fp, #-64]	; 0xffffffc0
   2fe80:	cmp	r0, #0
   2fe84:	beq	30008 <__assert_fail@plt+0x1e140>
   2fe88:	cmp	r6, #0
   2fe8c:	bne	30314 <__assert_fail@plt+0x1e44c>
   2fe90:	mov	r6, #1
   2fe94:	str	r9, [r8]
   2fe98:	str	r8, [sp, #24]
   2fe9c:	b	3008c <__assert_fail@plt+0x1e1c4>
   2fea0:	add	r0, sl, #12
   2fea4:	mov	r3, #20
   2fea8:	sub	r2, fp, #72	; 0x48
   2feac:	vld1.32	{d16-d17}, [r0]
   2feb0:	mov	r0, sl
   2feb4:	add	r1, r2, #12
   2feb8:	vld1.32	{d18-d19}, [r0], r3
   2febc:	vst1.32	{d16-d17}, [r1]
   2fec0:	mov	r1, r2
   2fec4:	vst1.64	{d18-d19}, [r1], r3
   2fec8:	ldr	r6, [r0]
   2fecc:	mov	r0, #0
   2fed0:	cmp	r6, #1
   2fed4:	str	r6, [r1]
   2fed8:	blt	2fff0 <__assert_fail@plt+0x1e128>
   2fedc:	lsl	r0, r6, #2
   2fee0:	str	r6, [fp, #-56]	; 0xffffffc8
   2fee4:	bl	34810 <__assert_fail@plt+0x22948>
   2fee8:	cmp	r0, #0
   2feec:	str	r0, [fp, #-48]	; 0xffffffd0
   2fef0:	beq	303ac <__assert_fail@plt+0x1e4e4>
   2fef4:	mov	r4, r0
   2fef8:	ldr	r0, [sl, #20]
   2fefc:	ldr	r1, [sl, #24]
   2ff00:	lsl	r2, r0, #2
   2ff04:	mov	r0, r4
   2ff08:	bl	11ab4 <memcpy@plt>
   2ff0c:	str	r5, [fp, #-60]	; 0xffffffc4
   2ff10:	str	r7, [fp, #-64]	; 0xffffffc0
   2ff14:	mov	r8, r4
   2ff18:	lsl	r0, r6, #1
   2ff1c:	lsl	r1, r6, #3
   2ff20:	str	r0, [sp, #20]
   2ff24:	str	r0, [fp, #-56]	; 0xffffffc8
   2ff28:	mov	r0, r4
   2ff2c:	bl	34840 <__assert_fail@plt+0x22978>
   2ff30:	cmp	r0, #0
   2ff34:	beq	303c8 <__assert_fail@plt+0x1e500>
   2ff38:	mov	r8, r0
   2ff3c:	mov	r4, r0
   2ff40:	str	r0, [fp, #-48]	; 0xffffffd0
   2ff44:	str	r0, [sp, #16]
   2ff48:	ldr	r0, [r8]
   2ff4c:	str	r4, [sp, #24]
   2ff50:	cmp	r0, r9
   2ff54:	ble	30048 <__assert_fail@plt+0x1e180>
   2ff58:	ldr	r4, [sp, #52]	; 0x34
   2ff5c:	cmp	r6, #1
   2ff60:	mov	r1, r6
   2ff64:	blt	30080 <__assert_fail@plt+0x1e1b8>
   2ff68:	ands	r1, r6, #3
   2ff6c:	sub	r2, r6, #1
   2ff70:	mov	ip, r6
   2ff74:	mov	r0, r6
   2ff78:	beq	2ffa0 <__assert_fail@plt+0x1e0d8>
   2ff7c:	add	r7, r8, ip, lsl #2
   2ff80:	mov	r0, ip
   2ff84:	mov	r3, r7
   2ff88:	ldr	r6, [r3, #-4]!
   2ff8c:	subs	r1, r1, #1
   2ff90:	sub	r0, r0, #1
   2ff94:	str	r6, [r7]
   2ff98:	mov	r7, r3
   2ff9c:	bne	2ff88 <__assert_fail@plt+0x1e0c0>
   2ffa0:	mov	r1, #0
   2ffa4:	cmp	r2, #3
   2ffa8:	bcc	2ffe0 <__assert_fail@plt+0x1e118>
   2ffac:	add	r2, r8, r0, lsl #2
   2ffb0:	sub	r2, r2, #8
   2ffb4:	ldr	r6, [r2]
   2ffb8:	ldr	r5, [r2, #4]
   2ffbc:	ldmdb	r2, {r3, r7}
   2ffc0:	sub	r0, r0, #4
   2ffc4:	cmp	r0, #0
   2ffc8:	stmda	r2, {r3, r7}
   2ffcc:	str	r6, [r2, #4]
   2ffd0:	str	r5, [r2, #8]
   2ffd4:	sub	r2, r2, #16
   2ffd8:	bgt	2ffb4 <__assert_fail@plt+0x1e0ec>
   2ffdc:	ldr	r5, [sp, #76]	; 0x4c
   2ffe0:	ldr	r4, [sp, #52]	; 0x34
   2ffe4:	ldr	r7, [sp, #60]	; 0x3c
   2ffe8:	mov	r6, ip
   2ffec:	b	30080 <__assert_fail@plt+0x1e1b8>
   2fff0:	ldr	r1, [sp, #8]
   2fff4:	str	r0, [r1]
   2fff8:	str	r0, [r1, #4]
   2fffc:	str	r0, [r1, #8]
   30000:	str	r5, [fp, #-60]	; 0xffffffc4
   30004:	str	r7, [fp, #-64]	; 0xffffffc0
   30008:	mov	r0, #1
   3000c:	str	r0, [fp, #-52]	; 0xffffffcc
   30010:	str	r0, [fp, #-56]	; 0xffffffc8
   30014:	mov	r0, #4
   30018:	bl	34810 <__assert_fail@plt+0x22948>
   3001c:	cmp	r0, #0
   30020:	str	r0, [fp, #-48]	; 0xffffffd0
   30024:	beq	303ac <__assert_fail@plt+0x1e4e4>
   30028:	str	r9, [r0]
   3002c:	str	r0, [sp, #16]
   30030:	str	r0, [sp, #68]	; 0x44
   30034:	str	r0, [sp, #24]
   30038:	mov	r0, #1
   3003c:	mov	r6, #1
   30040:	str	r0, [sp, #20]
   30044:	b	30090 <__assert_fail@plt+0x1e1c8>
   30048:	add	r0, r8, r6, lsl #2
   3004c:	ldr	r4, [sp, #52]	; 0x34
   30050:	mov	r1, r6
   30054:	ldr	r2, [r0, #-4]
   30058:	cmp	r2, r9
   3005c:	ble	30080 <__assert_fail@plt+0x1e1b8>
   30060:	sub	r1, r6, #2
   30064:	str	r2, [r0]
   30068:	sub	r1, r1, #1
   3006c:	ldr	r2, [r0, #-8]
   30070:	sub	r0, r0, #4
   30074:	cmp	r2, r9
   30078:	bgt	30064 <__assert_fail@plt+0x1e19c>
   3007c:	add	r1, r1, #2
   30080:	add	r6, r6, #1
   30084:	str	r9, [r8, r1, lsl #2]
   30088:	str	r8, [sp, #68]	; 0x44
   3008c:	str	r6, [fp, #-52]	; 0xffffffcc
   30090:	ldr	r0, [fp, #-72]	; 0xffffffb8
   30094:	sub	r1, fp, #72	; 0x48
   30098:	str	r6, [sp, #44]	; 0x2c
   3009c:	str	r0, [sp, #40]	; 0x28
   300a0:	ldr	r0, [r0, r5, lsl #2]
   300a4:	str	r0, [sp, #32]
   300a8:	mov	r0, r4
   300ac:	bl	2f2f0 <__assert_fail@plt+0x1d428>
   300b0:	cmp	r0, #0
   300b4:	bne	3039c <__assert_fail@plt+0x1e4d4>
   300b8:	ldr	r6, [sl, #4]
   300bc:	ldr	lr, [sp, #56]	; 0x38
   300c0:	cmp	r6, #0
   300c4:	beq	30164 <__assert_fail@plt+0x1e29c>
   300c8:	cmp	r5, #0
   300cc:	bmi	30158 <__assert_fail@plt+0x1e290>
   300d0:	ldr	sl, [sp, #40]	; 0x28
   300d4:	ldr	r7, [sp, #12]
   300d8:	b	300f0 <__assert_fail@plt+0x1e228>
   300dc:	str	r0, [r6]
   300e0:	add	r6, r6, #4
   300e4:	add	sl, sl, #4
   300e8:	subs	r7, r7, #1
   300ec:	beq	30158 <__assert_fail@plt+0x1e290>
   300f0:	ldr	r1, [r6]
   300f4:	ldr	r0, [sl]
   300f8:	cmp	r1, #0
   300fc:	beq	300dc <__assert_fail@plt+0x1e214>
   30100:	cmp	r0, #0
   30104:	beq	300e0 <__assert_fail@plt+0x1e218>
   30108:	sub	r4, fp, #44	; 0x2c
   3010c:	add	r2, r0, #4
   30110:	add	r1, r1, #4
   30114:	mov	r0, r4
   30118:	bl	2c29c <__assert_fail@plt+0x1a3d4>
   3011c:	cmp	r0, #0
   30120:	str	r0, [fp, #-32]	; 0xffffffe0
   30124:	bne	3039c <__assert_fail@plt+0x1e4d4>
   30128:	ldr	r1, [sp, #80]	; 0x50
   3012c:	sub	r0, fp, #32
   30130:	mov	r2, r4
   30134:	bl	2d930 <__assert_fail@plt+0x1ba68>
   30138:	str	r0, [r6]
   3013c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30140:	bl	176c0 <__assert_fail@plt+0x57f8>
   30144:	ldr	r8, [fp, #-32]	; 0xffffffe0
   30148:	ldr	lr, [sp, #56]	; 0x38
   3014c:	cmp	r8, #0
   30150:	beq	300e0 <__assert_fail@plt+0x1e218>
   30154:	b	3036c <__assert_fail@plt+0x1e4a4>
   30158:	ldr	sl, [sp, #64]	; 0x40
   3015c:	ldr	r4, [sp, #52]	; 0x34
   30160:	ldr	r7, [sp, #60]	; 0x3c
   30164:	ldr	r0, [sp, #40]	; 0x28
   30168:	ldr	r1, [sp, #32]
   3016c:	str	r1, [r0, r5, lsl #2]
   30170:	ldr	r0, [sp, #44]	; 0x2c
   30174:	cmp	r0, #1
   30178:	blt	30254 <__assert_fail@plt+0x1e38c>
   3017c:	ldr	r8, [sp, #68]	; 0x44
   30180:	subs	r0, r0, #1
   30184:	mov	r1, #0
   30188:	beq	301b4 <__assert_fail@plt+0x1e2ec>
   3018c:	mov	r2, r0
   30190:	mov	r4, #1
   30194:	add	r3, r1, r2
   30198:	lsr	r7, r3, #1
   3019c:	ldr	r6, [r8, r7, lsl #2]
   301a0:	cmp	r6, r9
   301a4:	addlt	r1, r4, r3, lsr #1
   301a8:	movge	r2, r7
   301ac:	cmp	r1, r2
   301b0:	bcc	30194 <__assert_fail@plt+0x1e2cc>
   301b4:	ldr	r2, [r8, r1, lsl #2]
   301b8:	mov	r7, #1
   301bc:	cmp	r2, r9
   301c0:	mov	r2, r1
   301c4:	mvnne	r2, #0
   301c8:	cmp	r2, #0
   301cc:	bmi	30260 <__assert_fail@plt+0x1e398>
   301d0:	ldr	r3, [sp, #44]	; 0x2c
   301d4:	ldr	r4, [sp, #52]	; 0x34
   301d8:	cmp	r3, r2
   301dc:	ble	3026c <__assert_fail@plt+0x1e3a4>
   301e0:	cmp	r0, r2
   301e4:	str	r0, [fp, #-52]	; 0xffffffcc
   301e8:	ble	3027c <__assert_fail@plt+0x1e3b4>
   301ec:	mvn	r2, r1
   301f0:	add	r2, r3, r2
   301f4:	cmp	r2, #4
   301f8:	bcc	302d4 <__assert_fail@plt+0x1e40c>
   301fc:	bic	lr, r2, #3
   30200:	subs	r3, lr, #4
   30204:	add	r3, r7, r3, lsr #2
   30208:	and	r7, r3, #1
   3020c:	str	r7, [sp, #32]
   30210:	beq	30284 <__assert_fail@plt+0x1e3bc>
   30214:	sub	r7, r7, r3
   30218:	add	r3, r8, r1, lsl #2
   3021c:	mov	r6, #0
   30220:	mov	ip, #20
   30224:	add	r4, r3, #4
   30228:	adds	r7, r7, #2
   3022c:	add	r6, r6, #8
   30230:	vld1.32	{d16-d17}, [r4]
   30234:	mov	r4, r3
   30238:	vst1.32	{d16-d17}, [r4], ip
   3023c:	vld1.32	{d16-d17}, [r4]
   30240:	add	r4, r3, #16
   30244:	add	r3, r3, #32
   30248:	vst1.32	{d16-d17}, [r4]
   3024c:	bne	30224 <__assert_fail@plt+0x1e35c>
   30250:	b	30288 <__assert_fail@plt+0x1e3c0>
   30254:	ldr	r3, [sp, #80]	; 0x50
   30258:	ldr	r8, [sp, #68]	; 0x44
   3025c:	b	30304 <__assert_fail@plt+0x1e43c>
   30260:	ldr	r0, [sp, #16]
   30264:	ldr	r4, [sp, #52]	; 0x34
   30268:	b	30270 <__assert_fail@plt+0x1e3a8>
   3026c:	ldr	r0, [sp, #16]
   30270:	ldr	r7, [sp, #60]	; 0x3c
   30274:	str	r0, [sp, #24]
   30278:	b	30300 <__assert_fail@plt+0x1e438>
   3027c:	ldr	r1, [sp, #16]
   30280:	b	302bc <__assert_fail@plt+0x1e3f4>
   30284:	mov	r6, #0
   30288:	ldr	r3, [sp, #32]
   3028c:	cmp	r3, #0
   30290:	beq	302a8 <__assert_fail@plt+0x1e3e0>
   30294:	add	r3, r1, r6
   30298:	add	r3, r8, r3, lsl #2
   3029c:	add	r7, r3, #4
   302a0:	vld1.32	{d16-d17}, [r7]
   302a4:	vst1.32	{d16-d17}, [r3]
   302a8:	cmp	r2, lr
   302ac:	bne	302c4 <__assert_fail@plt+0x1e3fc>
   302b0:	ldr	r1, [sp, #16]
   302b4:	ldr	r4, [sp, #52]	; 0x34
   302b8:	ldr	lr, [sp, #56]	; 0x38
   302bc:	ldr	r7, [sp, #60]	; 0x3c
   302c0:	b	302f8 <__assert_fail@plt+0x1e430>
   302c4:	add	r1, r1, lr
   302c8:	ldr	r4, [sp, #52]	; 0x34
   302cc:	ldr	lr, [sp, #56]	; 0x38
   302d0:	ldr	r3, [sp, #44]	; 0x2c
   302d4:	ldr	r7, [sp, #60]	; 0x3c
   302d8:	sub	r2, r3, #1
   302dc:	add	r3, r8, r1, lsl #2
   302e0:	ldr	r3, [r3, #4]
   302e4:	str	r3, [r8, r1, lsl #2]
   302e8:	add	r1, r1, #1
   302ec:	cmp	r2, r1
   302f0:	bne	302dc <__assert_fail@plt+0x1e414>
   302f4:	ldr	r1, [sp, #16]
   302f8:	str	r0, [sp, #44]	; 0x2c
   302fc:	str	r1, [sp, #24]
   30300:	ldr	r3, [sp, #80]	; 0x50
   30304:	ldr	r0, [r4, #116]	; 0x74
   30308:	add	r1, r9, r9, lsl #1
   3030c:	add	r0, r0, r1, lsl #3
   30310:	b	2fe4c <__assert_fail@plt+0x1df84>
   30314:	ldr	r0, [sp, #20]
   30318:	ldr	r4, [sp, #24]
   3031c:	cmp	r0, r6
   30320:	ldr	r0, [sp, #16]
   30324:	beq	2ff18 <__assert_fail@plt+0x1e050>
   30328:	b	2ff44 <__assert_fail@plt+0x1e07c>
   3032c:	mov	lr, #0
   30330:	cmp	lr, r0
   30334:	blt	2fc60 <__assert_fail@plt+0x1dd98>
   30338:	mov	r0, #0
   3033c:	str	r0, [fp, #-76]	; 0xffffffb4
   30340:	mov	r8, #0
   30344:	mov	r0, r8
   30348:	sub	sp, fp, #28
   3034c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30350:	mov	r8, r0
   30354:	str	r0, [fp, #-76]	; 0xffffffb4
   30358:	b	30344 <__assert_fail@plt+0x1e47c>
   3035c:	str	r1, [fp, #-76]	; 0xffffffb4
   30360:	b	30340 <__assert_fail@plt+0x1e478>
   30364:	str	r8, [sp, #68]	; 0x44
   30368:	mov	r8, #0
   3036c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   30370:	cmp	r0, #0
   30374:	beq	30380 <__assert_fail@plt+0x1e4b8>
   30378:	ldr	r0, [sp, #68]	; 0x44
   3037c:	bl	176c0 <__assert_fail@plt+0x57f8>
   30380:	cmp	r8, #0
   30384:	str	r8, [fp, #-76]	; 0xffffffb4
   30388:	moveq	r8, #0
   3038c:	b	30344 <__assert_fail@plt+0x1e47c>
   30390:	str	r0, [fp, #-72]	; 0xffffffb8
   30394:	str	r8, [fp, #-76]	; 0xffffffb4
   30398:	b	30344 <__assert_fail@plt+0x1e47c>
   3039c:	mov	r8, r0
   303a0:	b	3036c <__assert_fail@plt+0x1e4a4>
   303a4:	mov	r8, r0
   303a8:	b	30344 <__assert_fail@plt+0x1e47c>
   303ac:	mov	r1, #0
   303b0:	mov	r0, #0
   303b4:	mov	r8, #12
   303b8:	str	r1, [fp, #-56]	; 0xffffffc8
   303bc:	str	r0, [sp, #68]	; 0x44
   303c0:	str	r1, [fp, #-52]	; 0xffffffcc
   303c4:	b	3036c <__assert_fail@plt+0x1e4a4>
   303c8:	str	r8, [sp, #68]	; 0x44
   303cc:	mov	r8, #12
   303d0:	b	3036c <__assert_fail@plt+0x1e4a4>
   303d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   303d8:	add	fp, sp, #28
   303dc:	sub	sp, sp, #4
   303e0:	mov	r9, r0
   303e4:	ldr	r0, [r1, #4]
   303e8:	mov	r8, #0
   303ec:	cmp	r0, #0
   303f0:	beq	305a0 <__assert_fail@plt+0x1e6d8>
   303f4:	mov	r5, r2
   303f8:	ldr	r2, [r2, #4]
   303fc:	cmp	r2, #0
   30400:	beq	305a0 <__assert_fail@plt+0x1e6d8>
   30404:	mov	sl, r1
   30408:	ldr	r1, [r9, #4]
   3040c:	ldr	r7, [r9]
   30410:	add	r3, r2, r0
   30414:	add	r6, r1, r3
   30418:	cmp	r6, r7
   3041c:	ble	3044c <__assert_fail@plt+0x1e584>
   30420:	ldr	r0, [r9, #8]
   30424:	add	r4, r7, r3
   30428:	lsl	r1, r4, #2
   3042c:	bl	34840 <__assert_fail@plt+0x22978>
   30430:	cmp	r0, #0
   30434:	beq	305ac <__assert_fail@plt+0x1e6e4>
   30438:	str	r4, [r9]
   3043c:	str	r0, [r9, #8]
   30440:	ldr	r1, [r9, #4]
   30444:	ldr	r2, [r5, #4]
   30448:	ldr	r0, [sl, #4]
   3044c:	ldr	lr, [r5, #8]
   30450:	ldr	r4, [sl, #8]
   30454:	add	r3, r0, r1
   30458:	sub	r7, r1, #1
   3045c:	add	ip, r3, r2
   30460:	sub	r0, r0, #1
   30464:	sub	r3, r2, #1
   30468:	ldr	r1, [lr, r3, lsl #2]
   3046c:	ldr	r6, [r4, r0, lsl #2]
   30470:	cmp	r6, r1
   30474:	beq	304a0 <__assert_fail@plt+0x1e5d8>
   30478:	blt	30490 <__assert_fail@plt+0x1e5c8>
   3047c:	sub	r6, r0, #1
   30480:	cmp	r0, #0
   30484:	mov	r0, r6
   30488:	bgt	3046c <__assert_fail@plt+0x1e5a4>
   3048c:	b	30504 <__assert_fail@plt+0x1e63c>
   30490:	cmp	r2, #2
   30494:	mov	r2, r3
   30498:	bge	30464 <__assert_fail@plt+0x1e59c>
   3049c:	b	30504 <__assert_fail@plt+0x1e63c>
   304a0:	cmp	r7, #0
   304a4:	bmi	304e0 <__assert_fail@plt+0x1e618>
   304a8:	ldr	r8, [r9, #8]
   304ac:	mov	r1, r7
   304b0:	ldr	r7, [r8, r1, lsl #2]
   304b4:	cmp	r7, r6
   304b8:	ble	304d0 <__assert_fail@plt+0x1e608>
   304bc:	sub	r7, r1, #1
   304c0:	cmp	r1, #0
   304c4:	mov	r1, r7
   304c8:	bgt	304b0 <__assert_fail@plt+0x1e5e8>
   304cc:	b	304e0 <__assert_fail@plt+0x1e618>
   304d0:	mov	r7, r1
   304d4:	bne	304e0 <__assert_fail@plt+0x1e618>
   304d8:	mov	r7, r1
   304dc:	b	304ec <__assert_fail@plt+0x1e624>
   304e0:	ldr	r1, [r9, #8]
   304e4:	sub	ip, ip, #1
   304e8:	str	r6, [r1, ip, lsl #2]
   304ec:	cmp	r0, #1
   304f0:	mov	r8, #0
   304f4:	blt	30504 <__assert_fail@plt+0x1e63c>
   304f8:	cmp	r2, #2
   304fc:	mov	r2, r3
   30500:	bge	30460 <__assert_fail@plt+0x1e598>
   30504:	ldr	r2, [r9, #4]
   30508:	ldr	lr, [sl, #4]
   3050c:	ldr	r4, [r5, #4]
   30510:	ldr	r0, [r9, #8]
   30514:	subs	r1, r2, #1
   30518:	add	r3, r1, lr
   3051c:	add	r3, r3, r4
   30520:	sub	r7, r3, ip
   30524:	add	r6, r7, #1
   30528:	add	r5, r6, r2
   3052c:	str	r5, [r9, #4]
   30530:	blt	30590 <__assert_fail@plt+0x1e6c8>
   30534:	cmp	r7, #0
   30538:	bmi	30590 <__assert_fail@plt+0x1e6c8>
   3053c:	add	r2, r2, r4
   30540:	add	r2, r2, lr
   30544:	sub	r2, r2, ip
   30548:	add	r7, r0, r2, lsl #2
   3054c:	ldr	r2, [r0, r1, lsl #2]
   30550:	ldr	r5, [r0, r3, lsl #2]
   30554:	cmp	r5, r2
   30558:	bgt	30574 <__assert_fail@plt+0x1e6ac>
   3055c:	str	r2, [r7, r1, lsl #2]
   30560:	sub	r2, r1, #1
   30564:	cmp	r1, #0
   30568:	mov	r1, r2
   3056c:	bgt	3054c <__assert_fail@plt+0x1e684>
   30570:	b	30590 <__assert_fail@plt+0x1e6c8>
   30574:	str	r5, [r7, r1, lsl #2]
   30578:	sub	r7, r7, #4
   3057c:	subs	r6, r6, #1
   30580:	sub	r3, r3, #1
   30584:	mov	r2, #0
   30588:	bne	3054c <__assert_fail@plt+0x1e684>
   3058c:	b	30594 <__assert_fail@plt+0x1e6cc>
   30590:	mov	r2, r6
   30594:	add	r1, r0, ip, lsl #2
   30598:	lsl	r2, r2, #2
   3059c:	bl	11ab4 <memcpy@plt>
   305a0:	mov	r0, r8
   305a4:	sub	sp, fp, #28
   305a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   305ac:	mov	r8, #12
   305b0:	b	305a0 <__assert_fail@plt+0x1e6d8>
   305b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   305b8:	add	fp, sp, #28
   305bc:	sub	sp, sp, #44	; 0x2c
   305c0:	mov	ip, r0
   305c4:	ldr	r0, [r0, #28]
   305c8:	mov	r8, r2
   305cc:	add	r2, r1, r1, lsl #1
   305d0:	mov	r4, #0
   305d4:	str	r3, [sp, #4]
   305d8:	str	r4, [sp, #36]	; 0x24
   305dc:	str	r4, [sp, #32]
   305e0:	str	r4, [sp, #40]	; 0x28
   305e4:	add	r2, r0, r2, lsl #2
   305e8:	mov	r0, r2
   305ec:	ldr	r7, [r0, #4]!
   305f0:	str	r0, [sp, #28]
   305f4:	cmp	r7, #1
   305f8:	blt	30910 <__assert_fail@plt+0x1ea48>
   305fc:	add	r4, r2, #8
   30600:	mov	r9, #0
   30604:	mov	sl, #1
   30608:	str	r2, [sp]
   3060c:	str	r1, [sp, #12]
   30610:	str	ip, [sp, #8]
   30614:	str	r4, [sp, #20]
   30618:	b	30628 <__assert_fail@plt+0x1e760>
   3061c:	add	r9, r9, #1
   30620:	cmp	r9, r7
   30624:	bge	307e8 <__assert_fail@plt+0x1e920>
   30628:	ldr	r3, [r4]
   3062c:	ldr	r0, [r3, r9, lsl #2]
   30630:	cmp	r0, r1
   30634:	beq	3061c <__assert_fail@plt+0x1e754>
   30638:	ldr	r2, [ip]
   3063c:	add	r2, r2, r0, lsl #3
   30640:	ldrb	r2, [r2, #4]
   30644:	tst	r2, #8
   30648:	beq	3061c <__assert_fail@plt+0x1e754>
   3064c:	ldr	r2, [ip, #20]
   30650:	add	r0, r0, r0, lsl #1
   30654:	mvn	lr, #0
   30658:	str	r7, [sp, #24]
   3065c:	str	r0, [sp, #16]
   30660:	add	r0, r2, r0, lsl #2
   30664:	ldr	r6, [r0, #4]
   30668:	ldr	r0, [r0, #8]
   3066c:	cmp	r6, #2
   30670:	ldr	r5, [r0]
   30674:	ldrge	lr, [r0, #4]
   30678:	cmp	r7, #1
   3067c:	blt	306c0 <__assert_fail@plt+0x1e7f8>
   30680:	mov	r2, #0
   30684:	subs	r6, r7, #1
   30688:	beq	306ac <__assert_fail@plt+0x1e7e4>
   3068c:	add	r4, r2, r6
   30690:	lsr	r7, r4, #1
   30694:	ldr	r0, [r3, r7, lsl #2]
   30698:	cmp	r0, r5
   3069c:	addlt	r2, sl, r4, lsr #1
   306a0:	movge	r6, r7
   306a4:	cmp	r2, r6
   306a8:	bcc	3068c <__assert_fail@plt+0x1e7c4>
   306ac:	ldr	r0, [r3, r2, lsl #2]
   306b0:	ldr	r4, [sp, #20]
   306b4:	ldr	r7, [sp, #24]
   306b8:	cmp	r0, r5
   306bc:	beq	30718 <__assert_fail@plt+0x1e850>
   306c0:	ldr	r0, [r8, #4]
   306c4:	cmp	r0, #1
   306c8:	blt	30718 <__assert_fail@plt+0x1e850>
   306cc:	ldr	r1, [r8, #8]
   306d0:	subs	r4, r0, #1
   306d4:	mov	r6, #0
   306d8:	beq	306fc <__assert_fail@plt+0x1e834>
   306dc:	add	r0, r6, r4
   306e0:	lsr	r7, r0, #1
   306e4:	ldr	ip, [r1, r7, lsl #2]
   306e8:	cmp	ip, r5
   306ec:	addlt	r6, sl, r0, lsr #1
   306f0:	movge	r4, r7
   306f4:	cmp	r6, r4
   306f8:	bcc	306dc <__assert_fail@plt+0x1e814>
   306fc:	ldr	r0, [r1, r6, lsl #2]
   30700:	ldr	r1, [sp, #12]
   30704:	ldr	ip, [sp, #8]
   30708:	ldr	r4, [sp, #20]
   3070c:	ldr	r7, [sp, #24]
   30710:	cmp	r0, r5
   30714:	beq	307b4 <__assert_fail@plt+0x1e8ec>
   30718:	cmp	lr, #1
   3071c:	blt	3061c <__assert_fail@plt+0x1e754>
   30720:	cmp	r7, #1
   30724:	blt	30764 <__assert_fail@plt+0x1e89c>
   30728:	mov	r2, #0
   3072c:	subs	r6, r7, #1
   30730:	beq	30754 <__assert_fail@plt+0x1e88c>
   30734:	add	r0, r2, r6
   30738:	lsr	r7, r0, #1
   3073c:	ldr	r5, [r3, r7, lsl #2]
   30740:	cmp	r5, lr
   30744:	addlt	r2, sl, r0, lsr #1
   30748:	movge	r6, r7
   3074c:	cmp	r2, r6
   30750:	bcc	30734 <__assert_fail@plt+0x1e86c>
   30754:	ldr	r0, [r3, r2, lsl #2]
   30758:	ldr	r7, [sp, #24]
   3075c:	cmp	r0, lr
   30760:	beq	3061c <__assert_fail@plt+0x1e754>
   30764:	ldr	r0, [r8, #4]
   30768:	cmp	r0, #1
   3076c:	blt	3061c <__assert_fail@plt+0x1e754>
   30770:	ldr	r4, [r8, #8]
   30774:	subs	r6, r0, #1
   30778:	mov	r3, #0
   3077c:	beq	307a0 <__assert_fail@plt+0x1e8d8>
   30780:	add	r0, r3, r6
   30784:	lsr	r7, r0, #1
   30788:	ldr	r5, [r4, r7, lsl #2]
   3078c:	cmp	r5, lr
   30790:	addlt	r3, sl, r0, lsr #1
   30794:	movge	r6, r7
   30798:	cmp	r3, r6
   3079c:	bcc	30780 <__assert_fail@plt+0x1e8b8>
   307a0:	ldr	r0, [r4, r3, lsl #2]
   307a4:	ldr	r4, [sp, #20]
   307a8:	ldr	r7, [sp, #24]
   307ac:	cmp	r0, lr
   307b0:	bne	3061c <__assert_fail@plt+0x1e754>
   307b4:	ldr	r0, [ip, #28]
   307b8:	ldr	r1, [sp, #16]
   307bc:	add	r2, r0, r1, lsl #2
   307c0:	ldr	r1, [sp, #4]
   307c4:	add	r0, sp, #32
   307c8:	bl	303d4 <__assert_fail@plt+0x1e50c>
   307cc:	cmp	r0, #0
   307d0:	bne	3092c <__assert_fail@plt+0x1ea64>
   307d4:	ldr	r0, [sp, #28]
   307d8:	ldr	r1, [sp, #12]
   307dc:	ldr	ip, [sp, #8]
   307e0:	ldr	r7, [r0]
   307e4:	b	3061c <__assert_fail@plt+0x1e754>
   307e8:	ldr	r0, [sp]
   307ec:	cmp	r7, #0
   307f0:	mov	r4, #0
   307f4:	ble	30910 <__assert_fail@plt+0x1ea48>
   307f8:	ldr	r9, [sp, #36]	; 0x24
   307fc:	ldr	lr, [r0, #8]
   30800:	ldr	r0, [sp, #40]	; 0x28
   30804:	mov	ip, #0
   30808:	mov	r6, #1
   3080c:	sub	r1, r9, #1
   30810:	str	lr, [sp, #20]
   30814:	str	r9, [sp, #16]
   30818:	str	r1, [sp, #24]
   3081c:	b	30834 <__assert_fail@plt+0x1e96c>
   30820:	ldr	r1, [sp, #28]
   30824:	add	ip, ip, #1
   30828:	ldr	r1, [r1]
   3082c:	cmp	ip, r1
   30830:	bge	30918 <__assert_fail@plt+0x1ea50>
   30834:	ldr	r5, [lr, ip, lsl #2]
   30838:	cmp	r9, #1
   3083c:	blt	3087c <__assert_fail@plt+0x1e9b4>
   30840:	ldr	r2, [sp, #24]
   30844:	mov	r1, #0
   30848:	cmp	r2, #0
   3084c:	beq	30870 <__assert_fail@plt+0x1e9a8>
   30850:	add	r3, r1, r2
   30854:	lsr	r4, r3, #1
   30858:	ldr	r7, [r0, r4, lsl #2]
   3085c:	cmp	r7, r5
   30860:	addlt	r1, r6, r3, lsr #1
   30864:	movge	r2, r4
   30868:	cmp	r1, r2
   3086c:	bcc	30850 <__assert_fail@plt+0x1e988>
   30870:	ldr	r1, [r0, r1, lsl #2]
   30874:	cmp	r1, r5
   30878:	beq	30820 <__assert_fail@plt+0x1e958>
   3087c:	ldr	r3, [r8, #4]
   30880:	cmp	r3, #1
   30884:	blt	30820 <__assert_fail@plt+0x1e958>
   30888:	mov	r1, r8
   3088c:	ldr	r1, [r8, #8]
   30890:	subs	sl, r3, #1
   30894:	mov	r2, #0
   30898:	beq	308c0 <__assert_fail@plt+0x1e9f8>
   3089c:	mov	r4, sl
   308a0:	add	r7, r2, r4
   308a4:	lsr	lr, r7, #1
   308a8:	ldr	r9, [r1, lr, lsl #2]
   308ac:	cmp	r9, r5
   308b0:	addlt	r2, r6, r7, lsr #1
   308b4:	movge	r4, lr
   308b8:	cmp	r2, r4
   308bc:	bcc	308a0 <__assert_fail@plt+0x1e9d8>
   308c0:	ldr	r7, [r1, r2, lsl #2]
   308c4:	ldr	lr, [sp, #20]
   308c8:	ldr	r9, [sp, #16]
   308cc:	mov	r4, r2
   308d0:	cmp	r7, r5
   308d4:	mvnne	r4, #0
   308d8:	cmp	r4, #0
   308dc:	bmi	30820 <__assert_fail@plt+0x1e958>
   308e0:	cmp	r3, r4
   308e4:	strgt	sl, [r8, #4]
   308e8:	cmpgt	sl, r4
   308ec:	ble	30820 <__assert_fail@plt+0x1e958>
   308f0:	add	r3, r1, r2, lsl #2
   308f4:	ldr	r3, [r3, #4]
   308f8:	str	r3, [r1, r2, lsl #2]
   308fc:	add	r2, r2, #1
   30900:	ldr	r3, [r8, #4]
   30904:	cmp	r2, r3
   30908:	blt	308f0 <__assert_fail@plt+0x1ea28>
   3090c:	b	30820 <__assert_fail@plt+0x1e958>
   30910:	ldr	r0, [sp, #40]	; 0x28
   30914:	b	3091c <__assert_fail@plt+0x1ea54>
   30918:	mov	r4, #0
   3091c:	bl	176c0 <__assert_fail@plt+0x57f8>
   30920:	mov	r0, r4
   30924:	sub	sp, fp, #28
   30928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3092c:	mov	r1, r0
   30930:	ldr	r0, [sp, #40]	; 0x28
   30934:	mov	r4, r1
   30938:	b	3091c <__assert_fail@plt+0x1ea54>
   3093c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30940:	add	fp, sp, #28
   30944:	sub	sp, sp, #28
   30948:	ldr	ip, [r0, #108]	; 0x6c
   3094c:	str	r1, [sp, #24]
   30950:	ldr	r1, [r0, #84]	; 0x54
   30954:	mov	r4, r3
   30958:	str	r2, [sp, #8]
   3095c:	str	r0, [sp, #16]
   30960:	cmp	ip, #1
   30964:	str	r1, [sp, #20]
   30968:	blt	309d0 <__assert_fail@plt+0x1eb08>
   3096c:	ldr	r1, [r0, #116]	; 0x74
   30970:	mov	r9, #0
   30974:	mov	r2, #1
   30978:	mov	r3, ip
   3097c:	add	r7, r3, r9
   30980:	add	r7, r7, r7, lsr #31
   30984:	asr	r6, r7, #1
   30988:	add	r5, r6, r6, lsl #1
   3098c:	add	r5, r1, r5, lsl #3
   30990:	ldr	r5, [r5, #4]
   30994:	cmp	r5, r4
   30998:	addlt	r9, r2, r7, asr #1
   3099c:	movge	r3, r6
   309a0:	cmp	r9, r3
   309a4:	blt	3097c <__assert_fail@plt+0x1eab4>
   309a8:	cmp	r9, ip
   309ac:	bge	309dc <__assert_fail@plt+0x1eb14>
   309b0:	ldr	r0, [sp, #16]
   309b4:	add	r2, r9, r9, lsl #1
   309b8:	ldr	r1, [r0, #116]	; 0x74
   309bc:	add	r1, r1, r2, lsl #3
   309c0:	ldr	r1, [r1, #4]
   309c4:	cmp	r1, r4
   309c8:	mvnne	r9, #0
   309cc:	b	309e0 <__assert_fail@plt+0x1eb18>
   309d0:	mov	r9, #0
   309d4:	cmp	r9, ip
   309d8:	blt	309b0 <__assert_fail@plt+0x1eae8>
   309dc:	mvn	r9, #0
   309e0:	ldr	r8, [fp, #12]
   309e4:	cmp	ip, #1
   309e8:	blt	30a30 <__assert_fail@plt+0x1eb68>
   309ec:	ldr	r0, [sp, #16]
   309f0:	mov	r6, #0
   309f4:	mov	r2, #1
   309f8:	mov	r3, ip
   309fc:	ldr	r1, [r0, #116]	; 0x74
   30a00:	add	r7, r3, r6
   30a04:	add	r7, r7, r7, lsr #31
   30a08:	asr	r5, r7, #1
   30a0c:	add	r0, r5, r5, lsl #1
   30a10:	add	r0, r1, r0, lsl #3
   30a14:	ldr	r0, [r0, #4]
   30a18:	cmp	r0, r8
   30a1c:	addlt	r6, r2, r7, asr #1
   30a20:	movge	r3, r5
   30a24:	cmp	r6, r3
   30a28:	blt	30a00 <__assert_fail@plt+0x1eb38>
   30a2c:	b	30a34 <__assert_fail@plt+0x1eb6c>
   30a30:	mov	r6, #0
   30a34:	cmp	r6, ip
   30a38:	ldr	ip, [sp, #16]
   30a3c:	bge	30a5c <__assert_fail@plt+0x1eb94>
   30a40:	ldr	r0, [ip, #116]	; 0x74
   30a44:	add	r1, r6, r6, lsl #1
   30a48:	add	r0, r0, r1, lsl #3
   30a4c:	ldr	r0, [r0, #4]
   30a50:	cmp	r0, r8
   30a54:	mvnne	r6, #0
   30a58:	b	30a60 <__assert_fail@plt+0x1eb98>
   30a5c:	mvn	r6, #0
   30a60:	ldr	r0, [sp, #24]
   30a64:	ldr	r0, [r0, #4]
   30a68:	cmp	r0, #1
   30a6c:	blt	30bec <__assert_fail@plt+0x1ed24>
   30a70:	mov	sl, #0
   30a74:	str	r4, [sp, #12]
   30a78:	ldr	r0, [sp, #24]
   30a7c:	ldr	r3, [ip, #116]	; 0x74
   30a80:	ldr	r5, [sp, #20]
   30a84:	ldr	r0, [r0, #8]
   30a88:	ldr	r5, [r5]
   30a8c:	ldr	r2, [r0, sl, lsl #2]
   30a90:	mov	r0, r3
   30a94:	add	r1, r2, r2, lsl #1
   30a98:	ldr	r7, [r0, r1, lsl #3]!
   30a9c:	ldr	r0, [r0, #8]
   30aa0:	ldr	r5, [r5, r7, lsl #3]
   30aa4:	mvn	r7, #0
   30aa8:	cmp	r0, r4
   30aac:	ble	30ab8 <__assert_fail@plt+0x1ebf0>
   30ab0:	mvn	r8, #0
   30ab4:	b	30b44 <__assert_fail@plt+0x1ec7c>
   30ab8:	add	r1, r3, r1, lsl #3
   30abc:	mov	r8, #1
   30ac0:	ldr	r1, [r1, #12]
   30ac4:	cmp	r1, r4
   30ac8:	blt	30b44 <__assert_fail@plt+0x1ec7c>
   30acc:	sub	r1, r1, r4
   30ad0:	cmp	r0, r4
   30ad4:	mov	lr, r5
   30ad8:	mov	r4, #1
   30adc:	clz	r1, r1
   30ae0:	lsr	r5, r1, #5
   30ae4:	lsl	r1, r5, #1
   30ae8:	orreq	r1, r4, r5, lsl #1
   30aec:	cmp	r1, #0
   30af0:	beq	30b38 <__assert_fail@plt+0x1ec70>
   30af4:	ldr	r3, [sp, #8]
   30af8:	mov	r0, ip
   30afc:	mov	r2, lr
   30b00:	str	r9, [sp]
   30b04:	mov	r5, lr
   30b08:	bl	30bf8 <__assert_fail@plt+0x1ed30>
   30b0c:	mov	r8, r0
   30b10:	ldr	r0, [sp, #24]
   30b14:	ldr	ip, [sp, #16]
   30b18:	ldr	r4, [sp, #12]
   30b1c:	ldr	r0, [r0, #8]
   30b20:	ldr	r3, [ip, #116]	; 0x74
   30b24:	ldr	r2, [r0, sl, lsl #2]
   30b28:	add	r0, r2, r2, lsl #1
   30b2c:	add	r0, r3, r0, lsl #3
   30b30:	ldr	r0, [r0, #8]
   30b34:	b	30b44 <__assert_fail@plt+0x1ec7c>
   30b38:	ldr	r4, [sp, #12]
   30b3c:	mov	r8, #0
   30b40:	mov	r5, lr
   30b44:	ldr	r1, [fp, #12]
   30b48:	cmp	r0, r1
   30b4c:	bgt	30bb4 <__assert_fail@plt+0x1ecec>
   30b50:	add	r1, r2, r2, lsl #1
   30b54:	ldr	r2, [fp, #12]
   30b58:	mov	r7, #1
   30b5c:	add	r1, r3, r1, lsl #3
   30b60:	ldr	r1, [r1, #12]
   30b64:	cmp	r1, r2
   30b68:	blt	30bb4 <__assert_fail@plt+0x1ecec>
   30b6c:	ldr	r2, [fp, #12]
   30b70:	sub	r1, r1, r2
   30b74:	mov	r3, r2
   30b78:	clz	r1, r1
   30b7c:	cmp	r0, r3
   30b80:	mov	r0, #1
   30b84:	lsr	r2, r1, #5
   30b88:	lsl	r1, r2, #1
   30b8c:	orreq	r1, r0, r2, lsl #1
   30b90:	cmp	r1, #0
   30b94:	beq	30bd4 <__assert_fail@plt+0x1ed0c>
   30b98:	ldr	r3, [fp, #8]
   30b9c:	mov	r0, ip
   30ba0:	mov	r2, r5
   30ba4:	str	r6, [sp]
   30ba8:	bl	30bf8 <__assert_fail@plt+0x1ed30>
   30bac:	ldr	ip, [sp, #16]
   30bb0:	mov	r7, r0
   30bb4:	cmp	r7, r8
   30bb8:	bne	30be0 <__assert_fail@plt+0x1ed18>
   30bbc:	ldr	r0, [sp, #24]
   30bc0:	add	sl, sl, #1
   30bc4:	ldr	r0, [r0, #4]
   30bc8:	cmp	sl, r0
   30bcc:	blt	30a78 <__assert_fail@plt+0x1ebb0>
   30bd0:	b	30bec <__assert_fail@plt+0x1ed24>
   30bd4:	mov	r7, #0
   30bd8:	cmp	r7, r8
   30bdc:	beq	30bbc <__assert_fail@plt+0x1ecf4>
   30be0:	mov	r0, #1
   30be4:	sub	sp, fp, #28
   30be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30bec:	mov	r0, #0
   30bf0:	sub	sp, fp, #28
   30bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30bfc:	add	fp, sp, #28
   30c00:	sub	sp, sp, #36	; 0x24
   30c04:	ldr	r4, [r0, #84]	; 0x54
   30c08:	mov	r7, r0
   30c0c:	mov	r5, r1
   30c10:	add	r1, r3, r3, lsl #1
   30c14:	str	r3, [sp, #32]
   30c18:	ldr	r0, [r4, #24]
   30c1c:	add	r1, r0, r1, lsl #2
   30c20:	mov	lr, r1
   30c24:	ldr	r0, [lr, #4]!
   30c28:	cmp	r0, #1
   30c2c:	blt	30dd8 <__assert_fail@plt+0x1ef10>
   30c30:	mov	ip, #1
   30c34:	mov	r6, r2
   30c38:	and	r3, r5, #2
   30c3c:	mov	sl, #0
   30c40:	mvn	r2, ip, lsl r2
   30c44:	cmp	r6, #31
   30c48:	str	r3, [sp, #16]
   30c4c:	str	r2, [sp, #24]
   30c50:	lsl	r2, ip, r6
   30c54:	and	ip, r5, #1
   30c58:	str	r2, [sp, #28]
   30c5c:	mov	r2, #0
   30c60:	movwgt	r2, #1
   30c64:	str	ip, [sp, #12]
   30c68:	orr	r2, r2, r3, lsr #1
   30c6c:	add	r3, r1, #8
   30c70:	stmib	sp, {r3, lr}
   30c74:	str	r2, [sp, #20]
   30c78:	b	30c98 <__assert_fail@plt+0x1edd0>
   30c7c:	ldr	lr, [sp, #8]
   30c80:	ldr	ip, [sp, #12]
   30c84:	ldr	r3, [sp, #4]
   30c88:	ldr	r0, [lr]
   30c8c:	add	sl, sl, #1
   30c90:	cmp	sl, r0
   30c94:	bge	30dd8 <__assert_fail@plt+0x1ef10>
   30c98:	ldr	r1, [r3]
   30c9c:	ldr	r9, [r1, sl, lsl #2]
   30ca0:	ldr	r1, [r4]
   30ca4:	add	r2, r1, r9, lsl #3
   30ca8:	ldrb	r2, [r2, #4]
   30cac:	cmp	r2, #9
   30cb0:	beq	30d9c <__assert_fail@plt+0x1eed4>
   30cb4:	cmp	r2, #8
   30cb8:	beq	30db8 <__assert_fail@plt+0x1eef0>
   30cbc:	cmp	r2, #4
   30cc0:	bne	30c8c <__assert_fail@plt+0x1edc4>
   30cc4:	ldr	r1, [fp, #8]
   30cc8:	cmn	r1, #1
   30ccc:	beq	30c8c <__assert_fail@plt+0x1edc4>
   30cd0:	ldr	r1, [fp, #8]
   30cd4:	ldr	r0, [r7, #116]	; 0x74
   30cd8:	add	r1, r1, r1, lsl #1
   30cdc:	add	r0, r0, r1, lsl #3
   30ce0:	add	r8, r0, #16
   30ce4:	b	30d08 <__assert_fail@plt+0x1ee40>
   30ce8:	ldr	r0, [r8]
   30cec:	ldr	r1, [sp, #24]
   30cf0:	and	r0, r0, r1
   30cf4:	str	r0, [r8]
   30cf8:	ldrb	r0, [r8, #4]
   30cfc:	add	r8, r8, #24
   30d00:	cmp	r0, #0
   30d04:	beq	30c7c <__assert_fail@plt+0x1edb4>
   30d08:	ldr	r0, [r8, #-16]
   30d0c:	cmp	r0, r9
   30d10:	bne	30cf8 <__assert_fail@plt+0x1ee30>
   30d14:	cmp	r6, #31
   30d18:	bgt	30d2c <__assert_fail@plt+0x1ee64>
   30d1c:	ldr	r0, [r8]
   30d20:	ldr	r1, [sp, #28]
   30d24:	tst	r0, r1
   30d28:	beq	30cf8 <__assert_fail@plt+0x1ee30>
   30d2c:	ldr	r0, [r4, #20]
   30d30:	add	r1, r9, r9, lsl #1
   30d34:	add	r0, r0, r1, lsl #2
   30d38:	ldr	r0, [r0, #8]
   30d3c:	ldr	r3, [r0]
   30d40:	ldr	r0, [sp, #32]
   30d44:	cmp	r3, r0
   30d48:	beq	30de4 <__assert_fail@plt+0x1ef1c>
   30d4c:	ldr	r0, [fp, #8]
   30d50:	mov	r1, r5
   30d54:	mov	r2, r6
   30d58:	str	r0, [sp]
   30d5c:	mov	r0, r7
   30d60:	bl	30bf8 <__assert_fail@plt+0x1ed30>
   30d64:	cmp	r0, #0
   30d68:	beq	30d80 <__assert_fail@plt+0x1eeb8>
   30d6c:	cmn	r0, #1
   30d70:	beq	30df8 <__assert_fail@plt+0x1ef30>
   30d74:	cmp	r6, #31
   30d78:	ble	30ce8 <__assert_fail@plt+0x1ee20>
   30d7c:	b	30cf8 <__assert_fail@plt+0x1ee30>
   30d80:	ldr	r0, [sp, #20]
   30d84:	cmp	r0, #0
   30d88:	beq	30ce8 <__assert_fail@plt+0x1ee20>
   30d8c:	ldr	r0, [sp, #16]
   30d90:	cmp	r0, #0
   30d94:	beq	30cf8 <__assert_fail@plt+0x1ee30>
   30d98:	b	30df4 <__assert_fail@plt+0x1ef2c>
   30d9c:	ldr	r2, [sp, #16]
   30da0:	cmp	r2, #0
   30da4:	beq	30c8c <__assert_fail@plt+0x1edc4>
   30da8:	ldr	r1, [r1, r9, lsl #3]
   30dac:	cmp	r1, r6
   30db0:	bne	30c8c <__assert_fail@plt+0x1edc4>
   30db4:	b	30df4 <__assert_fail@plt+0x1ef2c>
   30db8:	cmp	ip, #0
   30dbc:	beq	30c8c <__assert_fail@plt+0x1edc4>
   30dc0:	ldr	r1, [r1, r9, lsl #3]
   30dc4:	cmp	r1, r6
   30dc8:	bne	30c8c <__assert_fail@plt+0x1edc4>
   30dcc:	mvn	r0, #0
   30dd0:	sub	sp, fp, #28
   30dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30dd8:	ubfx	r0, r5, #1, #1
   30ddc:	sub	sp, fp, #28
   30de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30de4:	ldr	r0, [sp, #12]
   30de8:	rsb	r0, r0, #0
   30dec:	sub	sp, fp, #28
   30df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30df4:	mov	r0, #0
   30df8:	sub	sp, fp, #28
   30dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e00:	push	{r4, r5, fp, lr}
   30e04:	add	fp, sp, #8
   30e08:	mov	r4, r1
   30e0c:	mov	r1, #0
   30e10:	mov	r5, r0
   30e14:	mov	r2, r4
   30e18:	bl	11d48 <memchr@plt>
   30e1c:	sub	r1, r0, r5
   30e20:	cmp	r0, #0
   30e24:	addne	r4, r1, #1
   30e28:	mov	r0, r4
   30e2c:	pop	{r4, r5, fp, pc}
   30e30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   30e34:	add	fp, sp, #24
   30e38:	mov	r4, r0
   30e3c:	cmp	r0, #0
   30e40:	beq	30e64 <__assert_fail@plt+0x1ef9c>
   30e44:	mov	r0, r4
   30e48:	bl	11cac <strlen@plt>
   30e4c:	add	r5, r0, #1
   30e50:	cmp	r5, #58	; 0x3a
   30e54:	bls	30e68 <__assert_fail@plt+0x1efa0>
   30e58:	add	r0, r0, #10
   30e5c:	bic	r0, r0, #3
   30e60:	b	30e6c <__assert_fail@plt+0x1efa4>
   30e64:	mov	r5, #0
   30e68:	mov	r0, #64	; 0x40
   30e6c:	bl	34810 <__assert_fail@plt+0x22948>
   30e70:	mov	r6, r0
   30e74:	cmp	r0, #0
   30e78:	beq	30eb4 <__assert_fail@plt+0x1efec>
   30e7c:	cmp	r4, #0
   30e80:	mov	r0, r4
   30e84:	mov	r8, #0
   30e88:	mov	r7, r6
   30e8c:	movwne	r0, #1
   30e90:	str	r8, [r6]
   30e94:	strb	r0, [r6, #4]
   30e98:	strb	r8, [r7, #5]!
   30e9c:	beq	30eb4 <__assert_fail@plt+0x1efec>
   30ea0:	mov	r0, r7
   30ea4:	mov	r1, r4
   30ea8:	mov	r2, r5
   30eac:	bl	11ab4 <memcpy@plt>
   30eb0:	strb	r8, [r7, r5]
   30eb4:	mov	r0, r6
   30eb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30ebc:	push	{r4, sl, fp, lr}
   30ec0:	add	fp, sp, #8
   30ec4:	cmp	r0, #2
   30ec8:	popcc	{r4, sl, fp, pc}
   30ecc:	ldr	r4, [r0]
   30ed0:	bl	176c0 <__assert_fail@plt+0x57f8>
   30ed4:	cmp	r4, #0
   30ed8:	mov	r0, r4
   30edc:	bne	30ecc <__assert_fail@plt+0x1f004>
   30ee0:	pop	{r4, sl, fp, pc}
   30ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ee8:	add	fp, sp, #28
   30eec:	sub	sp, sp, #4
   30ef0:	mov	sl, r2
   30ef4:	mov	r7, r1
   30ef8:	cmp	r0, #0
   30efc:	beq	30fc4 <__assert_fail@plt+0x1f0fc>
   30f00:	mov	r6, r0
   30f04:	bl	3100c <__assert_fail@plt+0x1f144>
   30f08:	cmp	r0, #0
   30f0c:	beq	30fd8 <__assert_fail@plt+0x1f110>
   30f10:	mov	r4, r0
   30f14:	mov	r0, r7
   30f18:	mov	r1, sl
   30f1c:	bl	11b20 <localtime_r@plt>
   30f20:	mov	r7, #1
   30f24:	cmp	r0, #0
   30f28:	mov	r9, #1
   30f2c:	beq	30f40 <__assert_fail@plt+0x1f078>
   30f30:	mov	r0, r6
   30f34:	mov	r1, sl
   30f38:	bl	31158 <__assert_fail@plt+0x1f290>
   30f3c:	eor	r9, r0, #1
   30f40:	cmp	r4, #1
   30f44:	beq	30fa8 <__assert_fail@plt+0x1f0e0>
   30f48:	bl	11cdc <__errno_location@plt>
   30f4c:	mov	r6, r0
   30f50:	ldr	r8, [r0]
   30f54:	ldrb	r0, [r4, #4]
   30f58:	cmp	r0, #0
   30f5c:	beq	30fe4 <__assert_fail@plt+0x1f11c>
   30f60:	movw	r0, #28165	; 0x6e05
   30f64:	add	r1, r4, #5
   30f68:	mov	r2, #1
   30f6c:	movt	r0, #3
   30f70:	bl	11cc4 <setenv@plt>
   30f74:	cmp	r0, #0
   30f78:	beq	30ff8 <__assert_fail@plt+0x1f130>
   30f7c:	ldr	r8, [r6]
   30f80:	mov	r7, #0
   30f84:	cmp	r4, #2
   30f88:	bcc	30fa4 <__assert_fail@plt+0x1f0dc>
   30f8c:	ldr	r5, [r4]
   30f90:	mov	r0, r4
   30f94:	bl	176c0 <__assert_fail@plt+0x57f8>
   30f98:	cmp	r5, #0
   30f9c:	mov	r4, r5
   30fa0:	bne	30f8c <__assert_fail@plt+0x1f0c4>
   30fa4:	str	r8, [r6]
   30fa8:	cmp	r7, #0
   30fac:	moveq	sl, r7
   30fb0:	cmp	r9, #0
   30fb4:	movwne	sl, #0
   30fb8:	mov	r0, sl
   30fbc:	sub	sp, fp, #28
   30fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fc4:	mov	r0, r7
   30fc8:	mov	r1, sl
   30fcc:	sub	sp, fp, #28
   30fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30fd4:	b	11a18 <gmtime_r@plt>
   30fd8:	mov	r0, #0
   30fdc:	sub	sp, fp, #28
   30fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fe4:	movw	r0, #28165	; 0x6e05
   30fe8:	movt	r0, #3
   30fec:	bl	11e68 <unsetenv@plt>
   30ff0:	cmp	r0, #0
   30ff4:	bne	30f7c <__assert_fail@plt+0x1f0b4>
   30ff8:	bl	11b68 <tzset@plt>
   30ffc:	mov	r7, #1
   31000:	cmp	r4, #2
   31004:	bcs	30f8c <__assert_fail@plt+0x1f0c4>
   31008:	b	30fa4 <__assert_fail@plt+0x1f0dc>
   3100c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31010:	add	fp, sp, #28
   31014:	sub	sp, sp, #4
   31018:	mov	r4, r0
   3101c:	movw	r0, #28165	; 0x6e05
   31020:	movt	r0, #3
   31024:	bl	11c04 <getenv@plt>
   31028:	mov	r6, r0
   3102c:	ldrb	r0, [r4, #4]
   31030:	cmp	r6, #0
   31034:	beq	31078 <__assert_fail@plt+0x1f1b0>
   31038:	cmp	r0, #0
   3103c:	beq	31054 <__assert_fail@plt+0x1f18c>
   31040:	add	r0, r4, #5
   31044:	mov	r1, r6
   31048:	bl	11a3c <strcmp@plt>
   3104c:	cmp	r0, #0
   31050:	beq	3112c <__assert_fail@plt+0x1f264>
   31054:	mov	r0, r6
   31058:	bl	11cac <strlen@plt>
   3105c:	add	r8, r0, #1
   31060:	mov	r9, #1
   31064:	cmp	r8, #58	; 0x3a
   31068:	bls	31088 <__assert_fail@plt+0x1f1c0>
   3106c:	add	r0, r0, #10
   31070:	bic	r0, r0, #3
   31074:	b	3108c <__assert_fail@plt+0x1f1c4>
   31078:	mov	r9, #0
   3107c:	cmp	r0, #0
   31080:	mov	r8, #0
   31084:	beq	3112c <__assert_fail@plt+0x1f264>
   31088:	mov	r0, #64	; 0x40
   3108c:	bl	34810 <__assert_fail@plt+0x22948>
   31090:	cmp	r0, #0
   31094:	beq	31124 <__assert_fail@plt+0x1f25c>
   31098:	mov	sl, #0
   3109c:	mov	r7, r0
   310a0:	strb	r9, [r0, #4]
   310a4:	mov	r5, r0
   310a8:	cmp	r9, #0
   310ac:	str	sl, [r0]
   310b0:	strb	sl, [r7, #5]!
   310b4:	beq	310cc <__assert_fail@plt+0x1f204>
   310b8:	mov	r0, r7
   310bc:	mov	r1, r6
   310c0:	mov	r2, r8
   310c4:	bl	11ab4 <memcpy@plt>
   310c8:	strb	sl, [r7, r8]
   310cc:	ldrb	r0, [r4, #4]
   310d0:	cmp	r0, #0
   310d4:	beq	31134 <__assert_fail@plt+0x1f26c>
   310d8:	movw	r0, #28165	; 0x6e05
   310dc:	add	r1, r4, #5
   310e0:	mov	r2, #1
   310e4:	movt	r0, #3
   310e8:	bl	11cc4 <setenv@plt>
   310ec:	cmp	r0, #0
   310f0:	beq	31148 <__assert_fail@plt+0x1f280>
   310f4:	bl	11cdc <__errno_location@plt>
   310f8:	ldr	r6, [r0]
   310fc:	mov	r4, r0
   31100:	cmp	r5, #2
   31104:	bcc	31120 <__assert_fail@plt+0x1f258>
   31108:	ldr	r7, [r5]
   3110c:	mov	r0, r5
   31110:	bl	176c0 <__assert_fail@plt+0x57f8>
   31114:	cmp	r7, #0
   31118:	mov	r5, r7
   3111c:	bne	31108 <__assert_fail@plt+0x1f240>
   31120:	str	r6, [r4]
   31124:	mov	r5, #0
   31128:	b	3114c <__assert_fail@plt+0x1f284>
   3112c:	mov	r5, #1
   31130:	b	3114c <__assert_fail@plt+0x1f284>
   31134:	movw	r0, #28165	; 0x6e05
   31138:	movt	r0, #3
   3113c:	bl	11e68 <unsetenv@plt>
   31140:	cmp	r0, #0
   31144:	bne	310f4 <__assert_fail@plt+0x1f22c>
   31148:	bl	11b68 <tzset@plt>
   3114c:	mov	r0, r5
   31150:	sub	sp, fp, #28
   31154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3115c:	add	fp, sp, #28
   31160:	sub	sp, sp, #4
   31164:	ldr	r7, [r1, #40]	; 0x28
   31168:	mov	r8, #1
   3116c:	cmp	r7, #0
   31170:	beq	31210 <__assert_fail@plt+0x1f348>
   31174:	mov	r5, r1
   31178:	mov	r6, r0
   3117c:	cmp	r7, r1
   31180:	bcc	31190 <__assert_fail@plt+0x1f2c8>
   31184:	add	r0, r5, #44	; 0x2c
   31188:	cmp	r7, r0
   3118c:	bcc	31210 <__assert_fail@plt+0x1f348>
   31190:	ldrb	r0, [r7]
   31194:	cmp	r0, #0
   31198:	beq	31204 <__assert_fail@plt+0x1f33c>
   3119c:	add	r4, r6, #5
   311a0:	mov	r0, r4
   311a4:	mov	r1, r7
   311a8:	bl	11a3c <strcmp@plt>
   311ac:	cmp	r0, #0
   311b0:	beq	3120c <__assert_fail@plt+0x1f344>
   311b4:	ldrb	r0, [r4]
   311b8:	cmp	r0, #0
   311bc:	bne	311d8 <__assert_fail@plt+0x1f310>
   311c0:	add	r0, r6, #5
   311c4:	cmp	r4, r0
   311c8:	bne	3121c <__assert_fail@plt+0x1f354>
   311cc:	ldrb	r0, [r6, #4]
   311d0:	cmp	r0, #0
   311d4:	beq	3121c <__assert_fail@plt+0x1f354>
   311d8:	mov	r0, r4
   311dc:	bl	11cac <strlen@plt>
   311e0:	add	r4, r0, r4
   311e4:	ldrb	r0, [r4, #1]!
   311e8:	cmp	r0, #0
   311ec:	bne	311a0 <__assert_fail@plt+0x1f2d8>
   311f0:	ldr	r0, [r6]
   311f4:	cmp	r0, #0
   311f8:	addne	r4, r0, #5
   311fc:	movne	r6, r0
   31200:	b	311a0 <__assert_fail@plt+0x1f2d8>
   31204:	movw	r4, #27716	; 0x6c44
   31208:	movt	r4, #3
   3120c:	str	r4, [r5, #40]	; 0x28
   31210:	mov	r0, r8
   31214:	sub	sp, fp, #28
   31218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3121c:	sub	r0, r6, r4
   31220:	add	sl, r0, #64	; 0x40
   31224:	mov	r0, r7
   31228:	bl	11cac <strlen@plt>
   3122c:	add	r9, r0, #1
   31230:	cmp	r9, sl
   31234:	bge	31254 <__assert_fail@plt+0x1f38c>
   31238:	mov	r0, r4
   3123c:	mov	r1, r7
   31240:	mov	r2, r9
   31244:	bl	11ab4 <memcpy@plt>
   31248:	mov	r0, #0
   3124c:	strb	r0, [r4, r9]
   31250:	b	3120c <__assert_fail@plt+0x1f344>
   31254:	add	r0, r0, #10
   31258:	cmp	r9, #59	; 0x3b
   3125c:	bic	r0, r0, #3
   31260:	movwcc	r0, #64	; 0x40
   31264:	bl	34810 <__assert_fail@plt+0x22948>
   31268:	cmp	r0, #0
   3126c:	beq	312ac <__assert_fail@plt+0x1f3e4>
   31270:	mov	sl, r0
   31274:	mov	r0, #1
   31278:	mov	r1, r7
   3127c:	mov	r2, r9
   31280:	strh	r0, [sl, #4]
   31284:	mov	r0, #0
   31288:	add	r4, sl, #5
   3128c:	str	r0, [sl]
   31290:	mov	r0, r4
   31294:	bl	11ab4 <memcpy@plt>
   31298:	mov	r0, #0
   3129c:	strb	r0, [r4, r9]
   312a0:	str	sl, [r6]
   312a4:	strb	r0, [sl, #4]
   312a8:	b	3120c <__assert_fail@plt+0x1f344>
   312ac:	mov	r8, #0
   312b0:	str	r8, [r6]
   312b4:	b	31210 <__assert_fail@plt+0x1f348>
   312b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   312bc:	add	fp, sp, #28
   312c0:	sub	sp, sp, #52	; 0x34
   312c4:	mov	r4, r1
   312c8:	cmp	r0, #0
   312cc:	beq	313d8 <__assert_fail@plt+0x1f510>
   312d0:	mov	r6, r0
   312d4:	bl	3100c <__assert_fail@plt+0x1f144>
   312d8:	cmp	r0, #0
   312dc:	beq	313d0 <__assert_fail@plt+0x1f508>
   312e0:	mov	r8, r0
   312e4:	mov	r0, #32
   312e8:	mov	r1, r4
   312ec:	add	r5, sp, #8
   312f0:	vld1.32	{d16-d17}, [r1], r0
   312f4:	mov	r2, r5
   312f8:	vst1.32	{d16-d17}, [r2], r0
   312fc:	ldr	r0, [r4, #16]
   31300:	ldr	r3, [r4, #20]
   31304:	str	r0, [sp, #24]
   31308:	mvn	r0, #0
   3130c:	str	r0, [sp, #36]	; 0x24
   31310:	str	r3, [sp, #28]
   31314:	ldr	r0, [r1]
   31318:	str	r0, [r2]
   3131c:	mov	r0, r5
   31320:	bl	11a54 <mktime@plt>
   31324:	mov	r9, r0
   31328:	ldr	r0, [sp, #36]	; 0x24
   3132c:	mov	sl, #1
   31330:	mov	r1, #1
   31334:	cmp	r0, #0
   31338:	bmi	3134c <__assert_fail@plt+0x1f484>
   3133c:	add	r1, sp, #8
   31340:	mov	r0, r6
   31344:	bl	31158 <__assert_fail@plt+0x1f290>
   31348:	eor	r1, r0, #1
   3134c:	cmp	r8, #1
   31350:	beq	313c4 <__assert_fail@plt+0x1f4fc>
   31354:	str	r1, [sp, #4]
   31358:	bl	11cdc <__errno_location@plt>
   3135c:	mov	r6, r0
   31360:	ldr	r7, [r0]
   31364:	ldrb	r0, [r8, #4]
   31368:	cmp	r0, #0
   3136c:	beq	31418 <__assert_fail@plt+0x1f550>
   31370:	movw	r0, #28165	; 0x6e05
   31374:	add	r1, r8, #5
   31378:	mov	r2, #1
   3137c:	movt	r0, #3
   31380:	bl	11cc4 <setenv@plt>
   31384:	cmp	r0, #0
   31388:	beq	3142c <__assert_fail@plt+0x1f564>
   3138c:	ldr	r0, [r6]
   31390:	mov	sl, #0
   31394:	str	r0, [sp]
   31398:	cmp	r8, #2
   3139c:	bcc	313b8 <__assert_fail@plt+0x1f4f0>
   313a0:	ldr	r7, [r8]
   313a4:	mov	r0, r8
   313a8:	bl	176c0 <__assert_fail@plt+0x57f8>
   313ac:	cmp	r7, #0
   313b0:	mov	r8, r7
   313b4:	bne	313a0 <__assert_fail@plt+0x1f4d8>
   313b8:	ldr	r0, [sp]
   313bc:	ldr	r1, [sp, #4]
   313c0:	str	r0, [r6]
   313c4:	eor	r0, sl, #1
   313c8:	orrs	r0, r1, r0
   313cc:	beq	313e8 <__assert_fail@plt+0x1f520>
   313d0:	mvn	r9, #0
   313d4:	b	3140c <__assert_fail@plt+0x1f544>
   313d8:	mov	r0, r4
   313dc:	sub	sp, fp, #28
   313e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   313e4:	b	11df0 <timegm@plt>
   313e8:	mov	r0, #28
   313ec:	add	r1, r5, #16
   313f0:	vld1.32	{d16-d17}, [r5], r0
   313f4:	vld1.64	{d18-d19}, [r1]
   313f8:	add	r1, r4, #16
   313fc:	vld1.32	{d20-d21}, [r5]
   31400:	vst1.32	{d16-d17}, [r4], r0
   31404:	vst1.32	{d18-d19}, [r1]
   31408:	vst1.32	{d20-d21}, [r4]
   3140c:	mov	r0, r9
   31410:	sub	sp, fp, #28
   31414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31418:	movw	r0, #28165	; 0x6e05
   3141c:	movt	r0, #3
   31420:	bl	11e68 <unsetenv@plt>
   31424:	cmp	r0, #0
   31428:	bne	3138c <__assert_fail@plt+0x1f4c4>
   3142c:	str	r7, [sp]
   31430:	bl	11b68 <tzset@plt>
   31434:	mov	sl, #1
   31438:	cmp	r8, #2
   3143c:	bcs	313a0 <__assert_fail@plt+0x1f4d8>
   31440:	b	313b8 <__assert_fail@plt+0x1f4f0>
   31444:	push	{r4, r5, r6, r7, fp, lr}
   31448:	add	fp, sp, #16
   3144c:	mov	r4, r0
   31450:	cmp	r0, #2
   31454:	bhi	31484 <__assert_fail@plt+0x1f5bc>
   31458:	mov	r0, r4
   3145c:	bl	35940 <__assert_fail@plt+0x23a78>
   31460:	mov	r5, r0
   31464:	bl	11cdc <__errno_location@plt>
   31468:	ldr	r7, [r0]
   3146c:	mov	r6, r0
   31470:	mov	r0, r4
   31474:	bl	11ea4 <close@plt>
   31478:	mov	r0, r5
   3147c:	str	r7, [r6]
   31480:	pop	{r4, r5, r6, r7, fp, pc}
   31484:	mov	r0, r4
   31488:	pop	{r4, r5, r6, r7, fp, pc}
   3148c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   31490:	add	fp, sp, #24
   31494:	sub	sp, sp, #32
   31498:	ldr	r6, [fp, #12]
   3149c:	ldr	r7, [fp, #8]
   314a0:	mov	r4, r2
   314a4:	mov	r8, r0
   314a8:	cmp	r1, #0
   314ac:	beq	314d4 <__assert_fail@plt+0x1f60c>
   314b0:	movw	r2, #32449	; 0x7ec1
   314b4:	mov	r5, r1
   314b8:	str	r3, [sp, #4]
   314bc:	str	r4, [sp]
   314c0:	mov	r0, r8
   314c4:	mov	r1, #1
   314c8:	movt	r2, #3
   314cc:	mov	r3, r5
   314d0:	b	314ec <__assert_fail@plt+0x1f624>
   314d4:	movw	r2, #32461	; 0x7ecd
   314d8:	str	r3, [sp]
   314dc:	mov	r0, r8
   314e0:	mov	r1, #1
   314e4:	mov	r3, r4
   314e8:	movt	r2, #3
   314ec:	bl	11d3c <__fprintf_chk@plt>
   314f0:	movw	r1, #32468	; 0x7ed4
   314f4:	mov	r0, #0
   314f8:	mov	r2, #5
   314fc:	movt	r1, #3
   31500:	bl	11afc <dcgettext@plt>
   31504:	movw	r2, #33186	; 0x81a2
   31508:	mov	r3, r0
   3150c:	movw	r0, #2022	; 0x7e6
   31510:	mov	r1, #1
   31514:	movt	r2, #3
   31518:	str	r0, [sp]
   3151c:	mov	r0, r8
   31520:	bl	11d3c <__fprintf_chk@plt>
   31524:	movw	r4, #27715	; 0x6c43
   31528:	mov	r1, r8
   3152c:	movt	r4, #3
   31530:	mov	r0, r4
   31534:	bl	119e8 <fputs_unlocked@plt>
   31538:	movw	r1, #32472	; 0x7ed8
   3153c:	mov	r0, #0
   31540:	mov	r2, #5
   31544:	movt	r1, #3
   31548:	bl	11afc <dcgettext@plt>
   3154c:	movw	r3, #32643	; 0x7f83
   31550:	mov	r2, r0
   31554:	mov	r0, r8
   31558:	mov	r1, #1
   3155c:	movt	r3, #3
   31560:	bl	11d3c <__fprintf_chk@plt>
   31564:	mov	r0, r4
   31568:	mov	r1, r8
   3156c:	bl	119e8 <fputs_unlocked@plt>
   31570:	cmp	r6, #9
   31574:	bhi	315b0 <__assert_fail@plt+0x1f6e8>
   31578:	add	r0, pc, #0
   3157c:	ldr	pc, [r0, r6, lsl #2]
   31580:	andeq	r1, r3, r8, lsr #11
   31584:			; <UNDEFINED> instruction: 0x000315bc
   31588:	andeq	r1, r3, ip, ror #11
   3158c:	andeq	r1, r3, r4, lsl r6
   31590:	andeq	r1, r3, ip, lsr r6
   31594:	andeq	r1, r3, r4, ror #12
   31598:	andeq	r1, r3, ip, lsl #13
   3159c:	andeq	r1, r3, r4, asr #13
   315a0:	andeq	r1, r3, r4, ror #14
   315a4:	andeq	r1, r3, ip, lsl #14
   315a8:	sub	sp, fp, #24
   315ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   315b0:	movw	r1, #32996	; 0x80e4
   315b4:	movt	r1, #3
   315b8:	b	31714 <__assert_fail@plt+0x1f84c>
   315bc:	movw	r1, #32677	; 0x7fa5
   315c0:	mov	r0, #0
   315c4:	mov	r2, #5
   315c8:	movt	r1, #3
   315cc:	bl	11afc <dcgettext@plt>
   315d0:	ldr	r3, [r7]
   315d4:	mov	r2, r0
   315d8:	mov	r0, r8
   315dc:	mov	r1, #1
   315e0:	sub	sp, fp, #24
   315e4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   315e8:	b	11d3c <__fprintf_chk@plt>
   315ec:	movw	r1, #32693	; 0x7fb5
   315f0:	mov	r0, #0
   315f4:	mov	r2, #5
   315f8:	movt	r1, #3
   315fc:	bl	11afc <dcgettext@plt>
   31600:	mov	r2, r0
   31604:	ldr	r3, [r7]
   31608:	ldr	r0, [r7, #4]
   3160c:	str	r0, [sp]
   31610:	b	31700 <__assert_fail@plt+0x1f838>
   31614:	movw	r1, #32716	; 0x7fcc
   31618:	mov	r0, #0
   3161c:	mov	r2, #5
   31620:	movt	r1, #3
   31624:	bl	11afc <dcgettext@plt>
   31628:	mov	r2, r0
   3162c:	ldr	r3, [r7]
   31630:	ldmib	r7, {r0, r1}
   31634:	stm	sp, {r0, r1}
   31638:	b	31700 <__assert_fail@plt+0x1f838>
   3163c:	movw	r1, #32744	; 0x7fe8
   31640:	mov	r0, #0
   31644:	mov	r2, #5
   31648:	movt	r1, #3
   3164c:	bl	11afc <dcgettext@plt>
   31650:	ldr	r3, [r7]
   31654:	mov	r2, r0
   31658:	ldmib	r7, {r0, r1, r7}
   3165c:	stm	sp, {r0, r1, r7}
   31660:	b	31700 <__assert_fail@plt+0x1f838>
   31664:	movw	r1, #32776	; 0x8008
   31668:	mov	r0, #0
   3166c:	mov	r2, #5
   31670:	movt	r1, #3
   31674:	bl	11afc <dcgettext@plt>
   31678:	ldr	r3, [r7]
   3167c:	mov	r2, r0
   31680:	ldmib	r7, {r0, r1, r6, r7}
   31684:	stm	sp, {r0, r1, r6, r7}
   31688:	b	31700 <__assert_fail@plt+0x1f838>
   3168c:	movw	r1, #32812	; 0x802c
   31690:	mov	r0, #0
   31694:	mov	r2, #5
   31698:	movt	r1, #3
   3169c:	bl	11afc <dcgettext@plt>
   316a0:	mov	r2, r0
   316a4:	ldr	r3, [r7]
   316a8:	ldmib	r7, {r0, r1, r6}
   316ac:	ldr	r5, [r7, #16]
   316b0:	ldr	r7, [r7, #20]
   316b4:	stm	sp, {r0, r1, r6}
   316b8:	str	r5, [sp, #12]
   316bc:	str	r7, [sp, #16]
   316c0:	b	31700 <__assert_fail@plt+0x1f838>
   316c4:	movw	r1, #32852	; 0x8054
   316c8:	mov	r0, #0
   316cc:	mov	r2, #5
   316d0:	movt	r1, #3
   316d4:	bl	11afc <dcgettext@plt>
   316d8:	mov	r2, r0
   316dc:	ldr	r3, [r7]
   316e0:	ldmib	r7, {r0, r1, r6}
   316e4:	ldr	r5, [r7, #16]
   316e8:	ldr	r4, [r7, #20]
   316ec:	ldr	r7, [r7, #24]
   316f0:	stm	sp, {r0, r1, r6}
   316f4:	str	r5, [sp, #12]
   316f8:	str	r4, [sp, #16]
   316fc:	str	r7, [sp, #20]
   31700:	mov	r0, r8
   31704:	mov	r1, #1
   31708:	b	317b4 <__assert_fail@plt+0x1f8ec>
   3170c:	movw	r1, #32944	; 0x80b0
   31710:	movt	r1, #3
   31714:	mov	r0, #0
   31718:	mov	r2, #5
   3171c:	bl	11afc <dcgettext@plt>
   31720:	mov	ip, r0
   31724:	ldr	r3, [r7]
   31728:	ldr	r0, [r7, #4]
   3172c:	ldr	r1, [r7, #8]
   31730:	ldr	r6, [r7, #12]
   31734:	ldr	r5, [r7, #16]
   31738:	ldr	r4, [r7, #20]
   3173c:	ldr	r2, [r7, #24]
   31740:	ldr	lr, [r7, #28]
   31744:	ldr	r7, [r7, #32]
   31748:	stm	sp, {r0, r1, r6}
   3174c:	str	r5, [sp, #12]
   31750:	str	r4, [sp, #16]
   31754:	str	r2, [sp, #20]
   31758:	str	lr, [sp, #24]
   3175c:	str	r7, [sp, #28]
   31760:	b	317a8 <__assert_fail@plt+0x1f8e0>
   31764:	movw	r1, #32896	; 0x8080
   31768:	mov	r0, #0
   3176c:	mov	r2, #5
   31770:	movt	r1, #3
   31774:	bl	11afc <dcgettext@plt>
   31778:	mov	ip, r0
   3177c:	ldr	r3, [r7]
   31780:	ldmib	r7, {r0, r1, r6}
   31784:	ldr	r5, [r7, #16]
   31788:	ldr	r4, [r7, #20]
   3178c:	ldr	r2, [r7, #24]
   31790:	ldr	r7, [r7, #28]
   31794:	stm	sp, {r0, r1, r6}
   31798:	str	r5, [sp, #12]
   3179c:	str	r4, [sp, #16]
   317a0:	str	r2, [sp, #20]
   317a4:	str	r7, [sp, #24]
   317a8:	mov	r0, r8
   317ac:	mov	r1, #1
   317b0:	mov	r2, ip
   317b4:	bl	11d3c <__fprintf_chk@plt>
   317b8:	sub	sp, fp, #24
   317bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   317c0:	push	{r4, sl, fp, lr}
   317c4:	add	fp, sp, #8
   317c8:	sub	sp, sp, #8
   317cc:	ldr	ip, [fp, #8]
   317d0:	mov	lr, #0
   317d4:	ldr	r4, [ip, lr, lsl #2]
   317d8:	add	lr, lr, #1
   317dc:	cmp	r4, #0
   317e0:	bne	317d4 <__assert_fail@plt+0x1f90c>
   317e4:	sub	r4, lr, #1
   317e8:	str	ip, [sp]
   317ec:	str	r4, [sp, #4]
   317f0:	bl	3148c <__assert_fail@plt+0x1f5c4>
   317f4:	sub	sp, fp, #8
   317f8:	pop	{r4, sl, fp, pc}
   317fc:	push	{fp, lr}
   31800:	mov	fp, sp
   31804:	sub	sp, sp, #48	; 0x30
   31808:	ldr	ip, [fp, #8]
   3180c:	ldr	lr, [ip]
   31810:	cmp	lr, #0
   31814:	str	lr, [sp, #8]
   31818:	beq	318b4 <__assert_fail@plt+0x1f9ec>
   3181c:	ldr	lr, [ip, #4]
   31820:	cmp	lr, #0
   31824:	str	lr, [sp, #12]
   31828:	beq	318bc <__assert_fail@plt+0x1f9f4>
   3182c:	ldr	lr, [ip, #8]
   31830:	cmp	lr, #0
   31834:	str	lr, [sp, #16]
   31838:	beq	318c4 <__assert_fail@plt+0x1f9fc>
   3183c:	ldr	lr, [ip, #12]
   31840:	cmp	lr, #0
   31844:	str	lr, [sp, #20]
   31848:	beq	318cc <__assert_fail@plt+0x1fa04>
   3184c:	ldr	lr, [ip, #16]
   31850:	cmp	lr, #0
   31854:	str	lr, [sp, #24]
   31858:	beq	318d4 <__assert_fail@plt+0x1fa0c>
   3185c:	ldr	lr, [ip, #20]
   31860:	cmp	lr, #0
   31864:	str	lr, [sp, #28]
   31868:	beq	318dc <__assert_fail@plt+0x1fa14>
   3186c:	ldr	lr, [ip, #24]
   31870:	cmp	lr, #0
   31874:	str	lr, [sp, #32]
   31878:	beq	318e4 <__assert_fail@plt+0x1fa1c>
   3187c:	ldr	lr, [ip, #28]
   31880:	cmp	lr, #0
   31884:	str	lr, [sp, #36]	; 0x24
   31888:	beq	318ec <__assert_fail@plt+0x1fa24>
   3188c:	ldr	lr, [ip, #32]
   31890:	cmp	lr, #0
   31894:	str	lr, [sp, #40]	; 0x28
   31898:	beq	318f4 <__assert_fail@plt+0x1fa2c>
   3189c:	ldr	lr, [ip, #36]	; 0x24
   318a0:	mov	ip, #10
   318a4:	cmp	lr, #0
   318a8:	str	lr, [sp, #44]	; 0x2c
   318ac:	movweq	ip, #9
   318b0:	b	318f8 <__assert_fail@plt+0x1fa30>
   318b4:	mov	ip, #0
   318b8:	b	318f8 <__assert_fail@plt+0x1fa30>
   318bc:	mov	ip, #1
   318c0:	b	318f8 <__assert_fail@plt+0x1fa30>
   318c4:	mov	ip, #2
   318c8:	b	318f8 <__assert_fail@plt+0x1fa30>
   318cc:	mov	ip, #3
   318d0:	b	318f8 <__assert_fail@plt+0x1fa30>
   318d4:	mov	ip, #4
   318d8:	b	318f8 <__assert_fail@plt+0x1fa30>
   318dc:	mov	ip, #5
   318e0:	b	318f8 <__assert_fail@plt+0x1fa30>
   318e4:	mov	ip, #6
   318e8:	b	318f8 <__assert_fail@plt+0x1fa30>
   318ec:	mov	ip, #7
   318f0:	b	318f8 <__assert_fail@plt+0x1fa30>
   318f4:	mov	ip, #8
   318f8:	add	lr, sp, #8
   318fc:	str	ip, [sp, #4]
   31900:	str	lr, [sp]
   31904:	bl	3148c <__assert_fail@plt+0x1f5c4>
   31908:	mov	sp, fp
   3190c:	pop	{fp, pc}
   31910:	push	{fp, lr}
   31914:	mov	fp, sp
   31918:	sub	sp, sp, #56	; 0x38
   3191c:	add	ip, fp, #8
   31920:	str	ip, [sp, #12]
   31924:	ldr	lr, [fp, #8]
   31928:	cmp	lr, #0
   3192c:	str	lr, [sp, #16]
   31930:	beq	319cc <__assert_fail@plt+0x1fb04>
   31934:	ldr	lr, [ip, #4]
   31938:	cmp	lr, #0
   3193c:	str	lr, [sp, #20]
   31940:	beq	319d4 <__assert_fail@plt+0x1fb0c>
   31944:	ldr	lr, [ip, #8]
   31948:	cmp	lr, #0
   3194c:	str	lr, [sp, #24]
   31950:	beq	319dc <__assert_fail@plt+0x1fb14>
   31954:	ldr	lr, [ip, #12]
   31958:	cmp	lr, #0
   3195c:	str	lr, [sp, #28]
   31960:	beq	319e4 <__assert_fail@plt+0x1fb1c>
   31964:	ldr	lr, [ip, #16]
   31968:	cmp	lr, #0
   3196c:	str	lr, [sp, #32]
   31970:	beq	319ec <__assert_fail@plt+0x1fb24>
   31974:	ldr	lr, [ip, #20]
   31978:	cmp	lr, #0
   3197c:	str	lr, [sp, #36]	; 0x24
   31980:	beq	319f4 <__assert_fail@plt+0x1fb2c>
   31984:	ldr	lr, [ip, #24]
   31988:	cmp	lr, #0
   3198c:	str	lr, [sp, #40]	; 0x28
   31990:	beq	319fc <__assert_fail@plt+0x1fb34>
   31994:	ldr	lr, [ip, #28]
   31998:	cmp	lr, #0
   3199c:	str	lr, [sp, #44]	; 0x2c
   319a0:	beq	31a04 <__assert_fail@plt+0x1fb3c>
   319a4:	ldr	lr, [ip, #32]
   319a8:	cmp	lr, #0
   319ac:	str	lr, [sp, #48]	; 0x30
   319b0:	beq	31a0c <__assert_fail@plt+0x1fb44>
   319b4:	ldr	lr, [ip, #36]	; 0x24
   319b8:	mov	ip, #10
   319bc:	cmp	lr, #0
   319c0:	str	lr, [sp, #52]	; 0x34
   319c4:	movweq	ip, #9
   319c8:	b	31a10 <__assert_fail@plt+0x1fb48>
   319cc:	mov	ip, #0
   319d0:	b	31a10 <__assert_fail@plt+0x1fb48>
   319d4:	mov	ip, #1
   319d8:	b	31a10 <__assert_fail@plt+0x1fb48>
   319dc:	mov	ip, #2
   319e0:	b	31a10 <__assert_fail@plt+0x1fb48>
   319e4:	mov	ip, #3
   319e8:	b	31a10 <__assert_fail@plt+0x1fb48>
   319ec:	mov	ip, #4
   319f0:	b	31a10 <__assert_fail@plt+0x1fb48>
   319f4:	mov	ip, #5
   319f8:	b	31a10 <__assert_fail@plt+0x1fb48>
   319fc:	mov	ip, #6
   31a00:	b	31a10 <__assert_fail@plt+0x1fb48>
   31a04:	mov	ip, #7
   31a08:	b	31a10 <__assert_fail@plt+0x1fb48>
   31a0c:	mov	ip, #8
   31a10:	add	lr, sp, #16
   31a14:	str	ip, [sp, #4]
   31a18:	str	lr, [sp]
   31a1c:	bl	3148c <__assert_fail@plt+0x1f5c4>
   31a20:	mov	sp, fp
   31a24:	pop	{fp, pc}
   31a28:	push	{fp, lr}
   31a2c:	mov	fp, sp
   31a30:	movw	r0, #37428	; 0x9234
   31a34:	movt	r0, #4
   31a38:	ldr	r1, [r0]
   31a3c:	movw	r0, #27715	; 0x6c43
   31a40:	movt	r0, #3
   31a44:	bl	119e8 <fputs_unlocked@plt>
   31a48:	movw	r1, #33056	; 0x8120
   31a4c:	mov	r0, #0
   31a50:	mov	r2, #5
   31a54:	movt	r1, #3
   31a58:	bl	11afc <dcgettext@plt>
   31a5c:	movw	r2, #33076	; 0x8134
   31a60:	mov	r1, r0
   31a64:	mov	r0, #1
   31a68:	movt	r2, #3
   31a6c:	bl	11d24 <__printf_chk@plt>
   31a70:	movw	r1, #33098	; 0x814a
   31a74:	mov	r0, #0
   31a78:	mov	r2, #5
   31a7c:	movt	r1, #3
   31a80:	bl	11afc <dcgettext@plt>
   31a84:	movw	r2, #28168	; 0x6e08
   31a88:	movw	r3, #29479	; 0x7327
   31a8c:	mov	r1, r0
   31a90:	mov	r0, #1
   31a94:	movt	r2, #3
   31a98:	movt	r3, #3
   31a9c:	bl	11d24 <__printf_chk@plt>
   31aa0:	movw	r1, #33118	; 0x815e
   31aa4:	mov	r0, #0
   31aa8:	mov	r2, #5
   31aac:	movt	r1, #3
   31ab0:	bl	11afc <dcgettext@plt>
   31ab4:	movw	r2, #33157	; 0x8185
   31ab8:	mov	r1, r0
   31abc:	mov	r0, #1
   31ac0:	movt	r2, #3
   31ac4:	pop	{fp, lr}
   31ac8:	b	11d24 <__printf_chk@plt>
   31acc:	push	{r4, r5, r6, sl, fp, lr}
   31ad0:	add	fp, sp, #16
   31ad4:	mov	r4, r2
   31ad8:	mov	r5, r1
   31adc:	mov	r6, r0
   31ae0:	bl	35904 <__assert_fail@plt+0x23a3c>
   31ae4:	cmp	r0, #0
   31ae8:	popne	{r4, r5, r6, sl, fp, pc}
   31aec:	cmp	r6, #0
   31af0:	beq	31b04 <__assert_fail@plt+0x1fc3c>
   31af4:	cmp	r5, #0
   31af8:	cmpne	r4, #0
   31afc:	bne	31b04 <__assert_fail@plt+0x1fc3c>
   31b00:	pop	{r4, r5, r6, sl, fp, pc}
   31b04:	bl	32080 <__assert_fail@plt+0x201b8>
   31b08:	push	{r4, r5, r6, sl, fp, lr}
   31b0c:	add	fp, sp, #16
   31b10:	mov	r4, r2
   31b14:	mov	r5, r1
   31b18:	mov	r6, r0
   31b1c:	bl	35904 <__assert_fail@plt+0x23a3c>
   31b20:	cmp	r0, #0
   31b24:	popne	{r4, r5, r6, sl, fp, pc}
   31b28:	cmp	r6, #0
   31b2c:	beq	31b40 <__assert_fail@plt+0x1fc78>
   31b30:	cmp	r5, #0
   31b34:	cmpne	r4, #0
   31b38:	bne	31b40 <__assert_fail@plt+0x1fc78>
   31b3c:	pop	{r4, r5, r6, sl, fp, pc}
   31b40:	bl	32080 <__assert_fail@plt+0x201b8>
   31b44:	push	{fp, lr}
   31b48:	mov	fp, sp
   31b4c:	bl	34810 <__assert_fail@plt+0x22948>
   31b50:	cmp	r0, #0
   31b54:	popne	{fp, pc}
   31b58:	bl	32080 <__assert_fail@plt+0x201b8>
   31b5c:	push	{fp, lr}
   31b60:	mov	fp, sp
   31b64:	bl	34810 <__assert_fail@plt+0x22948>
   31b68:	cmp	r0, #0
   31b6c:	popne	{fp, pc}
   31b70:	bl	32080 <__assert_fail@plt+0x201b8>
   31b74:	push	{fp, lr}
   31b78:	mov	fp, sp
   31b7c:	bl	34810 <__assert_fail@plt+0x22948>
   31b80:	cmp	r0, #0
   31b84:	popne	{fp, pc}
   31b88:	bl	32080 <__assert_fail@plt+0x201b8>
   31b8c:	push	{r4, r5, fp, lr}
   31b90:	add	fp, sp, #8
   31b94:	mov	r4, r1
   31b98:	mov	r5, r0
   31b9c:	bl	34840 <__assert_fail@plt+0x22978>
   31ba0:	cmp	r0, #0
   31ba4:	popne	{r4, r5, fp, pc}
   31ba8:	cmp	r5, #0
   31bac:	beq	31bbc <__assert_fail@plt+0x1fcf4>
   31bb0:	cmp	r4, #0
   31bb4:	bne	31bbc <__assert_fail@plt+0x1fcf4>
   31bb8:	pop	{r4, r5, fp, pc}
   31bbc:	bl	32080 <__assert_fail@plt+0x201b8>
   31bc0:	push	{fp, lr}
   31bc4:	mov	fp, sp
   31bc8:	cmp	r1, #0
   31bcc:	orreq	r1, r1, #1
   31bd0:	bl	34840 <__assert_fail@plt+0x22978>
   31bd4:	cmp	r0, #0
   31bd8:	popne	{fp, pc}
   31bdc:	bl	32080 <__assert_fail@plt+0x201b8>
   31be0:	push	{fp, lr}
   31be4:	mov	fp, sp
   31be8:	clz	r3, r2
   31bec:	lsr	ip, r3, #5
   31bf0:	clz	r3, r1
   31bf4:	lsr	r3, r3, #5
   31bf8:	orrs	r3, r3, ip
   31bfc:	movwne	r1, #1
   31c00:	movwne	r2, #1
   31c04:	bl	35904 <__assert_fail@plt+0x23a3c>
   31c08:	cmp	r0, #0
   31c0c:	popne	{fp, pc}
   31c10:	bl	32080 <__assert_fail@plt+0x201b8>
   31c14:	push	{fp, lr}
   31c18:	mov	fp, sp
   31c1c:	mov	r2, r1
   31c20:	mov	r1, r0
   31c24:	mov	r0, #0
   31c28:	bl	35904 <__assert_fail@plt+0x23a3c>
   31c2c:	cmp	r0, #0
   31c30:	popne	{fp, pc}
   31c34:	bl	32080 <__assert_fail@plt+0x201b8>
   31c38:	push	{fp, lr}
   31c3c:	mov	fp, sp
   31c40:	mov	r2, r1
   31c44:	mov	r1, r0
   31c48:	clz	r0, r2
   31c4c:	clz	r3, r1
   31c50:	lsr	r0, r0, #5
   31c54:	lsr	r3, r3, #5
   31c58:	orrs	r0, r3, r0
   31c5c:	mov	r0, #0
   31c60:	movwne	r1, #1
   31c64:	movwne	r2, #1
   31c68:	bl	35904 <__assert_fail@plt+0x23a3c>
   31c6c:	cmp	r0, #0
   31c70:	popne	{fp, pc}
   31c74:	bl	32080 <__assert_fail@plt+0x201b8>
   31c78:	push	{r4, r5, r6, sl, fp, lr}
   31c7c:	add	fp, sp, #16
   31c80:	ldr	r5, [r1]
   31c84:	mov	r4, r1
   31c88:	mov	r6, r0
   31c8c:	cmp	r0, #0
   31c90:	beq	31ca8 <__assert_fail@plt+0x1fde0>
   31c94:	mov	r0, #1
   31c98:	add	r0, r0, r5, lsr #1
   31c9c:	adds	r5, r5, r0
   31ca0:	bcc	31cb0 <__assert_fail@plt+0x1fde8>
   31ca4:	b	31cec <__assert_fail@plt+0x1fe24>
   31ca8:	cmp	r5, #0
   31cac:	movweq	r5, #64	; 0x40
   31cb0:	mov	r0, r6
   31cb4:	mov	r1, r5
   31cb8:	mov	r2, #1
   31cbc:	bl	35904 <__assert_fail@plt+0x23a3c>
   31cc0:	cmp	r5, #0
   31cc4:	mov	r1, r5
   31cc8:	movwne	r1, #1
   31ccc:	cmp	r0, #0
   31cd0:	bne	31ce4 <__assert_fail@plt+0x1fe1c>
   31cd4:	clz	r2, r6
   31cd8:	lsr	r2, r2, #5
   31cdc:	orrs	r1, r2, r1
   31ce0:	bne	31cec <__assert_fail@plt+0x1fe24>
   31ce4:	str	r5, [r4]
   31ce8:	pop	{r4, r5, r6, sl, fp, pc}
   31cec:	bl	32080 <__assert_fail@plt+0x201b8>
   31cf0:	push	{r4, r5, r6, r7, fp, lr}
   31cf4:	add	fp, sp, #16
   31cf8:	ldr	r5, [r1]
   31cfc:	mov	r6, r2
   31d00:	mov	r4, r1
   31d04:	mov	r7, r0
   31d08:	cmp	r0, #0
   31d0c:	beq	31d24 <__assert_fail@plt+0x1fe5c>
   31d10:	mov	r0, #1
   31d14:	add	r0, r0, r5, lsr #1
   31d18:	adds	r5, r5, r0
   31d1c:	bcc	31d3c <__assert_fail@plt+0x1fe74>
   31d20:	b	31d70 <__assert_fail@plt+0x1fea8>
   31d24:	cmp	r5, #0
   31d28:	bne	31d3c <__assert_fail@plt+0x1fe74>
   31d2c:	mov	r0, #64	; 0x40
   31d30:	cmp	r6, #64	; 0x40
   31d34:	udiv	r5, r0, r6
   31d38:	addhi	r5, r5, #1
   31d3c:	mov	r0, r7
   31d40:	mov	r1, r5
   31d44:	mov	r2, r6
   31d48:	bl	35904 <__assert_fail@plt+0x23a3c>
   31d4c:	cmp	r0, #0
   31d50:	bne	31d68 <__assert_fail@plt+0x1fea0>
   31d54:	cmp	r7, #0
   31d58:	beq	31d70 <__assert_fail@plt+0x1fea8>
   31d5c:	cmp	r6, #0
   31d60:	cmpne	r5, #0
   31d64:	bne	31d70 <__assert_fail@plt+0x1fea8>
   31d68:	str	r5, [r4]
   31d6c:	pop	{r4, r5, r6, r7, fp, pc}
   31d70:	bl	32080 <__assert_fail@plt+0x201b8>
   31d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   31d78:	add	fp, sp, #24
   31d7c:	mov	r8, r1
   31d80:	ldr	r1, [r1]
   31d84:	mov	r5, r0
   31d88:	add	r0, r1, r1, asr #1
   31d8c:	cmp	r0, r1
   31d90:	mvnvs	r0, #-2147483648	; 0x80000000
   31d94:	cmp	r0, r3
   31d98:	mov	r7, r0
   31d9c:	movgt	r7, r3
   31da0:	cmn	r3, #1
   31da4:	movle	r7, r0
   31da8:	ldr	r0, [fp, #8]
   31dac:	cmn	r0, #1
   31db0:	ble	31dd8 <__assert_fail@plt+0x1ff10>
   31db4:	cmp	r0, #0
   31db8:	beq	31e2c <__assert_fail@plt+0x1ff64>
   31dbc:	cmn	r7, #1
   31dc0:	ble	31e00 <__assert_fail@plt+0x1ff38>
   31dc4:	mvn	r4, #-2147483648	; 0x80000000
   31dc8:	udiv	r6, r4, r0
   31dcc:	cmp	r6, r7
   31dd0:	bge	31e2c <__assert_fail@plt+0x1ff64>
   31dd4:	b	31e3c <__assert_fail@plt+0x1ff74>
   31dd8:	cmn	r7, #1
   31ddc:	ble	31e1c <__assert_fail@plt+0x1ff54>
   31de0:	cmn	r0, #1
   31de4:	beq	31e2c <__assert_fail@plt+0x1ff64>
   31de8:	mov	r6, #-2147483648	; 0x80000000
   31dec:	mvn	r4, #-2147483648	; 0x80000000
   31df0:	sdiv	r6, r6, r0
   31df4:	cmp	r6, r7
   31df8:	bge	31e2c <__assert_fail@plt+0x1ff64>
   31dfc:	b	31e3c <__assert_fail@plt+0x1ff74>
   31e00:	beq	31e2c <__assert_fail@plt+0x1ff64>
   31e04:	mov	r6, #-2147483648	; 0x80000000
   31e08:	mvn	r4, #-2147483648	; 0x80000000
   31e0c:	sdiv	r6, r6, r7
   31e10:	cmp	r6, r0
   31e14:	bge	31e2c <__assert_fail@plt+0x1ff64>
   31e18:	b	31e3c <__assert_fail@plt+0x1ff74>
   31e1c:	mvn	r4, #-2147483648	; 0x80000000
   31e20:	sdiv	r6, r4, r0
   31e24:	cmp	r7, r6
   31e28:	blt	31e3c <__assert_fail@plt+0x1ff74>
   31e2c:	mul	r6, r7, r0
   31e30:	mov	r4, #64	; 0x40
   31e34:	cmp	r6, #63	; 0x3f
   31e38:	bgt	31e44 <__assert_fail@plt+0x1ff7c>
   31e3c:	sdiv	r7, r4, r0
   31e40:	mul	r6, r7, r0
   31e44:	cmp	r5, #0
   31e48:	moveq	r4, #0
   31e4c:	streq	r4, [r8]
   31e50:	sub	r4, r7, r1
   31e54:	cmp	r4, r2
   31e58:	bge	31f04 <__assert_fail@plt+0x2003c>
   31e5c:	add	r7, r1, r2
   31e60:	mov	r6, #0
   31e64:	mov	r2, #0
   31e68:	cmp	r7, r3
   31e6c:	movwgt	r6, #1
   31e70:	cmn	r3, #1
   31e74:	movwgt	r2, #1
   31e78:	cmp	r7, r1
   31e7c:	bvs	31f38 <__assert_fail@plt+0x20070>
   31e80:	ands	r1, r2, r6
   31e84:	bne	31f38 <__assert_fail@plt+0x20070>
   31e88:	cmn	r0, #1
   31e8c:	ble	31eb4 <__assert_fail@plt+0x1ffec>
   31e90:	cmp	r0, #0
   31e94:	beq	31f00 <__assert_fail@plt+0x20038>
   31e98:	cmn	r7, #1
   31e9c:	ble	31ed8 <__assert_fail@plt+0x20010>
   31ea0:	mvn	r1, #-2147483648	; 0x80000000
   31ea4:	udiv	r1, r1, r0
   31ea8:	cmp	r1, r7
   31eac:	bge	31f00 <__assert_fail@plt+0x20038>
   31eb0:	b	31f38 <__assert_fail@plt+0x20070>
   31eb4:	cmn	r7, #1
   31eb8:	ble	31ef0 <__assert_fail@plt+0x20028>
   31ebc:	cmn	r0, #1
   31ec0:	beq	31f00 <__assert_fail@plt+0x20038>
   31ec4:	mov	r1, #-2147483648	; 0x80000000
   31ec8:	sdiv	r1, r1, r0
   31ecc:	cmp	r1, r7
   31ed0:	bge	31f00 <__assert_fail@plt+0x20038>
   31ed4:	b	31f38 <__assert_fail@plt+0x20070>
   31ed8:	beq	31f00 <__assert_fail@plt+0x20038>
   31edc:	mov	r1, #-2147483648	; 0x80000000
   31ee0:	sdiv	r1, r1, r7
   31ee4:	cmp	r1, r0
   31ee8:	bge	31f00 <__assert_fail@plt+0x20038>
   31eec:	b	31f38 <__assert_fail@plt+0x20070>
   31ef0:	mvn	r1, #-2147483648	; 0x80000000
   31ef4:	sdiv	r1, r1, r0
   31ef8:	cmp	r7, r1
   31efc:	blt	31f38 <__assert_fail@plt+0x20070>
   31f00:	mul	r6, r7, r0
   31f04:	mov	r0, r5
   31f08:	mov	r1, r6
   31f0c:	bl	34840 <__assert_fail@plt+0x22978>
   31f10:	cmp	r6, #0
   31f14:	movwne	r6, #1
   31f18:	cmp	r0, #0
   31f1c:	bne	31f30 <__assert_fail@plt+0x20068>
   31f20:	clz	r1, r5
   31f24:	lsr	r1, r1, #5
   31f28:	orrs	r1, r1, r6
   31f2c:	bne	31f38 <__assert_fail@plt+0x20070>
   31f30:	str	r7, [r8]
   31f34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   31f38:	bl	32080 <__assert_fail@plt+0x201b8>
   31f3c:	push	{fp, lr}
   31f40:	mov	fp, sp
   31f44:	mov	r1, #1
   31f48:	bl	347bc <__assert_fail@plt+0x228f4>
   31f4c:	cmp	r0, #0
   31f50:	popne	{fp, pc}
   31f54:	bl	32080 <__assert_fail@plt+0x201b8>
   31f58:	push	{fp, lr}
   31f5c:	mov	fp, sp
   31f60:	bl	347bc <__assert_fail@plt+0x228f4>
   31f64:	cmp	r0, #0
   31f68:	popne	{fp, pc}
   31f6c:	bl	32080 <__assert_fail@plt+0x201b8>
   31f70:	push	{fp, lr}
   31f74:	mov	fp, sp
   31f78:	mov	r1, #1
   31f7c:	bl	347bc <__assert_fail@plt+0x228f4>
   31f80:	cmp	r0, #0
   31f84:	popne	{fp, pc}
   31f88:	bl	32080 <__assert_fail@plt+0x201b8>
   31f8c:	push	{fp, lr}
   31f90:	mov	fp, sp
   31f94:	bl	347bc <__assert_fail@plt+0x228f4>
   31f98:	cmp	r0, #0
   31f9c:	popne	{fp, pc}
   31fa0:	bl	32080 <__assert_fail@plt+0x201b8>
   31fa4:	push	{r4, r5, fp, lr}
   31fa8:	add	fp, sp, #8
   31fac:	mov	r5, r0
   31fb0:	mov	r0, r1
   31fb4:	mov	r4, r1
   31fb8:	bl	34810 <__assert_fail@plt+0x22948>
   31fbc:	cmp	r0, #0
   31fc0:	beq	31fd4 <__assert_fail@plt+0x2010c>
   31fc4:	mov	r1, r5
   31fc8:	mov	r2, r4
   31fcc:	pop	{r4, r5, fp, lr}
   31fd0:	b	11ab4 <memcpy@plt>
   31fd4:	bl	32080 <__assert_fail@plt+0x201b8>
   31fd8:	push	{r4, r5, fp, lr}
   31fdc:	add	fp, sp, #8
   31fe0:	mov	r5, r0
   31fe4:	mov	r0, r1
   31fe8:	mov	r4, r1
   31fec:	bl	34810 <__assert_fail@plt+0x22948>
   31ff0:	cmp	r0, #0
   31ff4:	beq	32008 <__assert_fail@plt+0x20140>
   31ff8:	mov	r1, r5
   31ffc:	mov	r2, r4
   32000:	pop	{r4, r5, fp, lr}
   32004:	b	11ab4 <memcpy@plt>
   32008:	bl	32080 <__assert_fail@plt+0x201b8>
   3200c:	push	{r4, r5, fp, lr}
   32010:	add	fp, sp, #8
   32014:	mov	r5, r0
   32018:	add	r0, r1, #1
   3201c:	mov	r4, r1
   32020:	bl	34810 <__assert_fail@plt+0x22948>
   32024:	cmp	r0, #0
   32028:	beq	32044 <__assert_fail@plt+0x2017c>
   3202c:	mov	r1, #0
   32030:	mov	r2, r4
   32034:	strb	r1, [r0, r4]
   32038:	mov	r1, r5
   3203c:	pop	{r4, r5, fp, lr}
   32040:	b	11ab4 <memcpy@plt>
   32044:	bl	32080 <__assert_fail@plt+0x201b8>
   32048:	push	{r4, r5, fp, lr}
   3204c:	add	fp, sp, #8
   32050:	mov	r4, r0
   32054:	bl	11cac <strlen@plt>
   32058:	add	r5, r0, #1
   3205c:	mov	r0, r5
   32060:	bl	34810 <__assert_fail@plt+0x22948>
   32064:	cmp	r0, #0
   32068:	beq	3207c <__assert_fail@plt+0x201b4>
   3206c:	mov	r1, r4
   32070:	mov	r2, r5
   32074:	pop	{r4, r5, fp, lr}
   32078:	b	11ab4 <memcpy@plt>
   3207c:	bl	32080 <__assert_fail@plt+0x201b8>
   32080:	push	{fp, lr}
   32084:	mov	fp, sp
   32088:	movw	r0, #37332	; 0x91d4
   3208c:	movw	r1, #33233	; 0x81d1
   32090:	mov	r2, #5
   32094:	movt	r0, #4
   32098:	movt	r1, #3
   3209c:	ldr	r4, [r0]
   320a0:	mov	r0, #0
   320a4:	bl	11afc <dcgettext@plt>
   320a8:	movw	r2, #30942	; 0x78de
   320ac:	mov	r3, r0
   320b0:	mov	r0, r4
   320b4:	mov	r1, #0
   320b8:	movt	r2, #3
   320bc:	bl	11bd4 <error@plt>
   320c0:	bl	11e8c <abort@plt>
   320c4:	push	{fp, lr}
   320c8:	mov	fp, sp
   320cc:	orr	r1, r1, #512	; 0x200
   320d0:	bl	179d8 <__assert_fail@plt+0x5b10>
   320d4:	cmp	r0, #0
   320d8:	popne	{fp, pc}
   320dc:	bl	11cdc <__errno_location@plt>
   320e0:	ldr	r0, [r0]
   320e4:	cmp	r0, #22
   320e8:	bne	3210c <__assert_fail@plt+0x20244>
   320ec:	movw	r0, #33250	; 0x81e2
   320f0:	movw	r1, #33266	; 0x81f2
   320f4:	movw	r3, #33277	; 0x81fd
   320f8:	mov	r2, #41	; 0x29
   320fc:	movt	r0, #3
   32100:	movt	r1, #3
   32104:	movt	r3, #3
   32108:	bl	11ec8 <__assert_fail@plt>
   3210c:	bl	32080 <__assert_fail@plt+0x201b8>
   32110:	ldr	r0, [r0, #48]	; 0x30
   32114:	and	r0, r0, #17
   32118:	cmp	r0, #16
   3211c:	moveq	r0, #1
   32120:	bxeq	lr
   32124:	cmp	r0, #17
   32128:	movne	r0, #0
   3212c:	bxne	lr
   32130:	ldr	r0, [r1, #48]	; 0x30
   32134:	cmp	r0, #0
   32138:	movwne	r0, #1
   3213c:	bx	lr
   32140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32144:	add	fp, sp, #28
   32148:	sub	sp, sp, #36	; 0x24
   3214c:	cmp	r2, #37	; 0x25
   32150:	bcs	33a38 <__assert_fail@plt+0x21b70>
   32154:	ldr	r8, [fp, #8]
   32158:	mov	r9, r3
   3215c:	mov	r6, r2
   32160:	mov	r7, r1
   32164:	mov	r4, r0
   32168:	bl	11cdc <__errno_location@plt>
   3216c:	cmp	r7, #0
   32170:	add	sl, sp, #32
   32174:	mov	r5, r0
   32178:	mov	r0, #0
   3217c:	mov	r2, r6
   32180:	mov	r3, #0
   32184:	movne	sl, r7
   32188:	str	r0, [r5]
   3218c:	mov	r0, r4
   32190:	mov	r1, sl
   32194:	bl	11e14 <__strtoll_internal@plt>
   32198:	mov	r7, r1
   3219c:	ldr	r1, [sl]
   321a0:	cmp	r1, r4
   321a4:	beq	321d4 <__assert_fail@plt+0x2030c>
   321a8:	mov	r6, r0
   321ac:	ldr	r0, [r5]
   321b0:	cmp	r0, #0
   321b4:	beq	32214 <__assert_fail@plt+0x2034c>
   321b8:	mov	r5, #4
   321bc:	cmp	r0, #34	; 0x22
   321c0:	bne	33648 <__assert_fail@plt+0x21780>
   321c4:	mov	r5, #1
   321c8:	cmp	r8, #0
   321cc:	bne	32220 <__assert_fail@plt+0x20358>
   321d0:	b	33644 <__assert_fail@plt+0x2177c>
   321d4:	mov	r5, #4
   321d8:	cmp	r8, #0
   321dc:	beq	33648 <__assert_fail@plt+0x21780>
   321e0:	mov	r6, r1
   321e4:	ldrb	r1, [r4]
   321e8:	cmp	r1, #0
   321ec:	beq	33648 <__assert_fail@plt+0x21780>
   321f0:	mov	r0, r8
   321f4:	bl	11cb8 <strchr@plt>
   321f8:	cmp	r0, #0
   321fc:	beq	33648 <__assert_fail@plt+0x21780>
   32200:	mov	r1, r6
   32204:	mov	r5, #0
   32208:	mov	r6, #1
   3220c:	mov	r7, #0
   32210:	b	32220 <__assert_fail@plt+0x20358>
   32214:	mov	r5, r0
   32218:	cmp	r8, #0
   3221c:	beq	33644 <__assert_fail@plt+0x2177c>
   32220:	ldrb	r4, [r1]
   32224:	cmp	r4, #0
   32228:	beq	33644 <__assert_fail@plt+0x2177c>
   3222c:	str	r1, [sp, #20]
   32230:	mov	r0, r8
   32234:	mov	r1, r4
   32238:	bl	11cb8 <strchr@plt>
   3223c:	cmp	r0, #0
   32240:	beq	324cc <__assert_fail@plt+0x20604>
   32244:	sub	r0, r4, #69	; 0x45
   32248:	mov	r1, #1
   3224c:	mov	r3, #0
   32250:	mov	r2, #1024	; 0x400
   32254:	cmp	r0, #47	; 0x2f
   32258:	str	r1, [sp, #16]
   3225c:	bhi	32398 <__assert_fail@plt+0x204d0>
   32260:	add	r1, pc, #0
   32264:	ldr	pc, [r1, r0, lsl #2]
   32268:	andeq	r2, r3, r8, lsr #6
   3226c:	muleq	r3, r8, r3
   32270:	andeq	r2, r3, r8, lsr #6
   32274:	muleq	r3, r8, r3
   32278:	muleq	r3, r8, r3
   3227c:	muleq	r3, r8, r3
   32280:	andeq	r2, r3, r8, lsr #6
   32284:	muleq	r3, r8, r3
   32288:	andeq	r2, r3, r8, lsr #6
   3228c:	muleq	r3, r8, r3
   32290:	muleq	r3, r8, r3
   32294:	andeq	r2, r3, r8, lsr #6
   32298:	muleq	r3, r8, r3
   3229c:	muleq	r3, r8, r3
   322a0:	muleq	r3, r8, r3
   322a4:	andeq	r2, r3, r8, lsr #6
   322a8:	muleq	r3, r8, r3
   322ac:	muleq	r3, r8, r3
   322b0:	muleq	r3, r8, r3
   322b4:	muleq	r3, r8, r3
   322b8:	andeq	r2, r3, r8, lsr #6
   322bc:	andeq	r2, r3, r8, lsr #6
   322c0:	muleq	r3, r8, r3
   322c4:	muleq	r3, r8, r3
   322c8:	muleq	r3, r8, r3
   322cc:	muleq	r3, r8, r3
   322d0:	muleq	r3, r8, r3
   322d4:	muleq	r3, r8, r3
   322d8:	muleq	r3, r8, r3
   322dc:	muleq	r3, r8, r3
   322e0:	muleq	r3, r8, r3
   322e4:	muleq	r3, r8, r3
   322e8:	muleq	r3, r8, r3
   322ec:	muleq	r3, r8, r3
   322f0:	andeq	r2, r3, r8, lsr #6
   322f4:	muleq	r3, r8, r3
   322f8:	muleq	r3, r8, r3
   322fc:	muleq	r3, r8, r3
   32300:	andeq	r2, r3, r8, lsr #6
   32304:	muleq	r3, r8, r3
   32308:	andeq	r2, r3, r8, lsr #6
   3230c:	muleq	r3, r8, r3
   32310:	muleq	r3, r8, r3
   32314:	muleq	r3, r8, r3
   32318:	muleq	r3, r8, r3
   3231c:	muleq	r3, r8, r3
   32320:	muleq	r3, r8, r3
   32324:	andeq	r2, r3, r8, lsr #6
   32328:	mov	r0, r8
   3232c:	mov	r1, #48	; 0x30
   32330:	bl	11cb8 <strchr@plt>
   32334:	cmp	r0, #0
   32338:	beq	32364 <__assert_fail@plt+0x2049c>
   3233c:	ldr	r1, [sp, #20]
   32340:	ldrb	r0, [r1, #1]
   32344:	cmp	r0, #66	; 0x42
   32348:	cmpne	r0, #68	; 0x44
   3234c:	bne	3236c <__assert_fail@plt+0x204a4>
   32350:	mov	r0, #2
   32354:	mov	r2, #1000	; 0x3e8
   32358:	mov	r3, #0
   3235c:	str	r0, [sp, #16]
   32360:	b	32398 <__assert_fail@plt+0x204d0>
   32364:	mov	r3, #0
   32368:	b	32394 <__assert_fail@plt+0x204cc>
   3236c:	cmp	r0, #105	; 0x69
   32370:	mov	r3, #0
   32374:	bne	32394 <__assert_fail@plt+0x204cc>
   32378:	ldrb	r0, [r1, #2]
   3237c:	mov	r1, #1
   32380:	mov	r2, #1024	; 0x400
   32384:	cmp	r0, #66	; 0x42
   32388:	movweq	r1, #3
   3238c:	str	r1, [sp, #16]
   32390:	b	32398 <__assert_fail@plt+0x204d0>
   32394:	mov	r2, #1024	; 0x400
   32398:	sub	r0, r4, #66	; 0x42
   3239c:	cmp	r0, #53	; 0x35
   323a0:	bhi	324cc <__assert_fail@plt+0x20604>
   323a4:	add	r1, pc, #8
   323a8:	str	r3, [sp, #28]
   323ac:	str	r2, [sp, #24]
   323b0:	ldr	pc, [r1, r0, lsl #2]
   323b4:	andeq	r2, r3, ip, asr #11
   323b8:	andeq	r2, r3, ip, asr #9
   323bc:	andeq	r2, r3, ip, asr #9
   323c0:	andeq	r2, r3, r0, ror #11
   323c4:	andeq	r2, r3, ip, asr #9
   323c8:	andeq	r2, r3, ip, lsl #9
   323cc:	andeq	r2, r3, ip, asr #9
   323d0:	andeq	r2, r3, ip, asr #9
   323d4:	andeq	r2, r3, ip, asr #9
   323d8:	ldrdeq	r2, [r3], -r4
   323dc:	andeq	r2, r3, ip, asr #9
   323e0:	andeq	r2, r3, r4, lsl #10
   323e4:	andeq	r2, r3, ip, asr #9
   323e8:	andeq	r2, r3, ip, asr #9
   323ec:	andeq	r2, r3, r4, lsr #12
   323f0:	andeq	r2, r3, ip, asr #9
   323f4:	andeq	r2, r3, ip, asr #9
   323f8:	andeq	r2, r3, ip, asr #9
   323fc:	andeq	r2, r3, r4, asr #10
   32400:	andeq	r2, r3, ip, asr #9
   32404:	andeq	r2, r3, ip, asr #9
   32408:	andeq	r2, r3, ip, asr #9
   3240c:	andeq	r2, r3, ip, asr #9
   32410:	andeq	r2, r3, r8, ror #12
   32414:	andeq	r2, r3, r8, lsl #11
   32418:	andeq	r2, r3, ip, asr #9
   3241c:	andeq	r2, r3, ip, asr #9
   32420:	andeq	r2, r3, ip, asr #9
   32424:	andeq	r2, r3, ip, asr #9
   32428:	andeq	r2, r3, ip, asr #9
   3242c:	andeq	r2, r3, ip, asr #9
   32430:	andeq	r2, r3, ip, asr #9
   32434:	andeq	r2, r3, ip, lsr #13
   32438:	andeq	r3, r3, r4, lsr #12
   3243c:	andeq	r2, r3, ip, asr #9
   32440:	andeq	r2, r3, ip, asr #9
   32444:	andeq	r2, r3, ip, asr #9
   32448:	andeq	r2, r3, ip, lsl #9
   3244c:	andeq	r2, r3, ip, asr #9
   32450:	andeq	r2, r3, ip, asr #9
   32454:	andeq	r2, r3, ip, asr #9
   32458:	ldrdeq	r2, [r3], -r4
   3245c:	andeq	r2, r3, ip, asr #9
   32460:	andeq	r2, r3, r4, lsl #10
   32464:	andeq	r2, r3, ip, asr #9
   32468:	andeq	r2, r3, ip, asr #9
   3246c:	andeq	r2, r3, ip, asr #9
   32470:	andeq	r2, r3, ip, asr #9
   32474:	andeq	r2, r3, ip, asr #9
   32478:	andeq	r2, r3, ip, asr #9
   3247c:	andeq	r2, r3, r4, asr #10
   32480:	andeq	r2, r3, ip, asr #9
   32484:	andeq	r2, r3, ip, asr #9
   32488:	andeq	r2, r3, r0, asr #13
   3248c:	cmn	r7, #1
   32490:	str	r9, [sp, #12]
   32494:	ble	326d4 <__assert_fail@plt+0x2080c>
   32498:	ldr	r3, [sp, #28]
   3249c:	mvn	r0, #0
   324a0:	mvn	r1, #-2147483648	; 0x80000000
   324a4:	mvn	r8, #0
   324a8:	mvn	r9, #-2147483648	; 0x80000000
   324ac:	bl	35eec <__assert_fail@plt+0x24024>
   324b0:	ldr	r2, [sp, #24]
   324b4:	ldr	r3, [sp, #28]
   324b8:	subs	r0, r0, r6
   324bc:	mov	r4, #1
   324c0:	sbcs	r0, r1, r7
   324c4:	bge	32714 <__assert_fail@plt+0x2084c>
   324c8:	b	3272c <__assert_fail@plt+0x20864>
   324cc:	orr	r5, r5, #2
   324d0:	b	33644 <__assert_fail@plt+0x2177c>
   324d4:	cmn	r7, #1
   324d8:	ble	32768 <__assert_fail@plt+0x208a0>
   324dc:	ldr	r3, [sp, #28]
   324e0:	mvn	r0, #0
   324e4:	mvn	r1, #-2147483648	; 0x80000000
   324e8:	bl	35eec <__assert_fail@plt+0x24024>
   324ec:	ldr	r2, [sp, #24]
   324f0:	ldr	r3, [sp, #28]
   324f4:	subs	r0, r0, r6
   324f8:	sbcs	r0, r1, r7
   324fc:	bge	3279c <__assert_fail@plt+0x208d4>
   32500:	b	32eac <__assert_fail@plt+0x20fe4>
   32504:	cmn	r7, #1
   32508:	str	r9, [sp, #12]
   3250c:	ble	327b0 <__assert_fail@plt+0x208e8>
   32510:	ldr	r3, [sp, #28]
   32514:	mvn	r0, #0
   32518:	mvn	r1, #-2147483648	; 0x80000000
   3251c:	mvn	r8, #0
   32520:	mvn	r9, #-2147483648	; 0x80000000
   32524:	bl	35eec <__assert_fail@plt+0x24024>
   32528:	ldr	r2, [sp, #24]
   3252c:	ldr	r3, [sp, #28]
   32530:	subs	r0, r0, r6
   32534:	mov	r4, #1
   32538:	sbcs	r0, r1, r7
   3253c:	bge	327f0 <__assert_fail@plt+0x20928>
   32540:	b	32808 <__assert_fail@plt+0x20940>
   32544:	cmn	r7, #1
   32548:	str	r9, [sp, #12]
   3254c:	ble	32840 <__assert_fail@plt+0x20978>
   32550:	ldr	r3, [sp, #28]
   32554:	mvn	r0, #0
   32558:	mvn	r1, #-2147483648	; 0x80000000
   3255c:	mvn	r9, #-2147483648	; 0x80000000
   32560:	str	r0, [sp, #8]
   32564:	mvn	r0, #0
   32568:	bl	35eec <__assert_fail@plt+0x24024>
   3256c:	ldr	r2, [sp, #24]
   32570:	ldr	r3, [sp, #28]
   32574:	subs	r0, r0, r6
   32578:	mov	r4, #1
   3257c:	sbcs	r0, r1, r7
   32580:	bge	32884 <__assert_fail@plt+0x209bc>
   32584:	b	328a0 <__assert_fail@plt+0x209d8>
   32588:	cmp	r7, #0
   3258c:	str	r9, [sp, #12]
   32590:	bmi	32b88 <__assert_fail@plt+0x20cc0>
   32594:	ldr	r3, [sp, #28]
   32598:	mvn	r0, #0
   3259c:	mvn	r1, #-2147483648	; 0x80000000
   325a0:	mvn	r9, #-2147483648	; 0x80000000
   325a4:	str	r0, [sp, #8]
   325a8:	mvn	r0, #0
   325ac:	bl	35eec <__assert_fail@plt+0x24024>
   325b0:	ldr	r2, [sp, #24]
   325b4:	ldr	r3, [sp, #28]
   325b8:	subs	r0, r0, r6
   325bc:	mov	r4, #1
   325c0:	sbcs	r0, r1, r7
   325c4:	bge	32bcc <__assert_fail@plt+0x20d04>
   325c8:	b	32be8 <__assert_fail@plt+0x20d20>
   325cc:	cmn	r7, #1
   325d0:	ble	32c24 <__assert_fail@plt+0x20d5c>
   325d4:	cmp	r7, #2097152	; 0x200000
   325d8:	blt	32c54 <__assert_fail@plt+0x20d8c>
   325dc:	b	32eac <__assert_fail@plt+0x20fe4>
   325e0:	cmp	r7, #0
   325e4:	str	r9, [sp, #12]
   325e8:	bmi	32c64 <__assert_fail@plt+0x20d9c>
   325ec:	ldr	r3, [sp, #28]
   325f0:	mvn	r0, #0
   325f4:	mvn	r1, #-2147483648	; 0x80000000
   325f8:	mvn	r9, #-2147483648	; 0x80000000
   325fc:	str	r0, [sp, #8]
   32600:	mvn	r0, #0
   32604:	bl	35eec <__assert_fail@plt+0x24024>
   32608:	ldr	r2, [sp, #24]
   3260c:	ldr	r3, [sp, #28]
   32610:	subs	r0, r0, r6
   32614:	mov	r4, #1
   32618:	sbcs	r0, r1, r7
   3261c:	bge	32ca8 <__assert_fail@plt+0x20de0>
   32620:	b	32cc4 <__assert_fail@plt+0x20dfc>
   32624:	cmp	r7, #0
   32628:	str	r9, [sp, #12]
   3262c:	bmi	32d00 <__assert_fail@plt+0x20e38>
   32630:	ldr	r3, [sp, #28]
   32634:	mvn	r0, #0
   32638:	mvn	r1, #-2147483648	; 0x80000000
   3263c:	mvn	r8, #-2147483648	; 0x80000000
   32640:	str	r0, [sp, #8]
   32644:	mvn	r0, #0
   32648:	bl	35eec <__assert_fail@plt+0x24024>
   3264c:	ldr	r2, [sp, #24]
   32650:	ldr	r3, [sp, #28]
   32654:	subs	r0, r0, r6
   32658:	mov	r4, #1
   3265c:	sbcs	r0, r1, r7
   32660:	bge	32d44 <__assert_fail@plt+0x20e7c>
   32664:	b	32d60 <__assert_fail@plt+0x20e98>
   32668:	cmp	r7, #0
   3266c:	str	r9, [sp, #12]
   32670:	bmi	32d9c <__assert_fail@plt+0x20ed4>
   32674:	ldr	r3, [sp, #28]
   32678:	mvn	r0, #0
   3267c:	mvn	r1, #-2147483648	; 0x80000000
   32680:	mvn	r9, #-2147483648	; 0x80000000
   32684:	str	r0, [sp, #8]
   32688:	mvn	r0, #0
   3268c:	bl	35eec <__assert_fail@plt+0x24024>
   32690:	ldr	r2, [sp, #24]
   32694:	ldr	r3, [sp, #28]
   32698:	subs	r0, r0, r6
   3269c:	mov	r4, #1
   326a0:	sbcs	r0, r1, r7
   326a4:	bge	32de0 <__assert_fail@plt+0x20f18>
   326a8:	b	32dfc <__assert_fail@plt+0x20f34>
   326ac:	cmn	r7, #1
   326b0:	ble	32e3c <__assert_fail@plt+0x20f74>
   326b4:	cmp	r7, #4194304	; 0x400000
   326b8:	blt	32e6c <__assert_fail@plt+0x20fa4>
   326bc:	b	32eac <__assert_fail@plt+0x20fe4>
   326c0:	cmn	r7, #1
   326c4:	ble	32e7c <__assert_fail@plt+0x20fb4>
   326c8:	cmp	r7, #1073741824	; 0x40000000
   326cc:	bge	32eac <__assert_fail@plt+0x20fe4>
   326d0:	b	32ecc <__assert_fail@plt+0x21004>
   326d4:	and	r0, r6, r7
   326d8:	cmn	r0, #1
   326dc:	beq	32714 <__assert_fail@plt+0x2084c>
   326e0:	mov	r0, #0
   326e4:	mov	r1, #-2147483648	; 0x80000000
   326e8:	mov	r2, r6
   326ec:	mov	r3, r7
   326f0:	mov	r8, #0
   326f4:	mov	r9, #-2147483648	; 0x80000000
   326f8:	bl	35e18 <__assert_fail@plt+0x23f50>
   326fc:	ldr	r2, [sp, #24]
   32700:	ldr	r3, [sp, #28]
   32704:	mov	r4, #1
   32708:	subs	r0, r0, r2
   3270c:	sbcs	r0, r1, r3
   32710:	blt	328dc <__assert_fail@plt+0x20a14>
   32714:	umull	r8, r0, r6, r2
   32718:	mov	r4, #0
   3271c:	mla	r0, r6, r3, r0
   32720:	mla	r9, r7, r2, r0
   32724:	cmp	r9, #0
   32728:	bmi	328dc <__assert_fail@plt+0x20a14>
   3272c:	ldr	r3, [sp, #28]
   32730:	mvn	r0, #-2147483648	; 0x80000000
   32734:	mvn	r1, #-2147483648	; 0x80000000
   32738:	mov	r6, r4
   3273c:	mvn	r4, #0
   32740:	str	r0, [sp, #8]
   32744:	mvn	r0, #0
   32748:	bl	35eec <__assert_fail@plt+0x24024>
   3274c:	ldr	r2, [sp, #24]
   32750:	ldr	r3, [sp, #28]
   32754:	subs	r0, r0, r8
   32758:	mov	r7, #1
   3275c:	sbcs	r0, r1, r9
   32760:	bge	32918 <__assert_fail@plt+0x20a50>
   32764:	b	32934 <__assert_fail@plt+0x20a6c>
   32768:	and	r0, r6, r7
   3276c:	cmn	r0, #1
   32770:	beq	3279c <__assert_fail@plt+0x208d4>
   32774:	mov	r0, #0
   32778:	mov	r1, #-2147483648	; 0x80000000
   3277c:	mov	r2, r6
   32780:	mov	r3, r7
   32784:	bl	35e18 <__assert_fail@plt+0x23f50>
   32788:	ldr	r2, [sp, #24]
   3278c:	ldr	r3, [sp, #28]
   32790:	subs	r0, r0, r2
   32794:	sbcs	r0, r1, r3
   32798:	blt	32eac <__assert_fail@plt+0x20fe4>
   3279c:	umull	r0, r1, r6, r2
   327a0:	mla	r1, r6, r3, r1
   327a4:	mla	r7, r7, r2, r1
   327a8:	mov	r6, r0
   327ac:	b	33624 <__assert_fail@plt+0x2175c>
   327b0:	and	r0, r6, r7
   327b4:	cmn	r0, #1
   327b8:	beq	327f0 <__assert_fail@plt+0x20928>
   327bc:	mov	r0, #0
   327c0:	mov	r1, #-2147483648	; 0x80000000
   327c4:	mov	r2, r6
   327c8:	mov	r3, r7
   327cc:	mov	r8, #0
   327d0:	mov	r9, #-2147483648	; 0x80000000
   327d4:	bl	35e18 <__assert_fail@plt+0x23f50>
   327d8:	ldr	r2, [sp, #24]
   327dc:	ldr	r3, [sp, #28]
   327e0:	mov	r4, #1
   327e4:	subs	r0, r0, r2
   327e8:	sbcs	r0, r1, r3
   327ec:	blt	329c8 <__assert_fail@plt+0x20b00>
   327f0:	umull	r8, r0, r6, r2
   327f4:	mov	r4, #0
   327f8:	mla	r0, r6, r3, r0
   327fc:	mla	r9, r7, r2, r0
   32800:	cmp	r9, #0
   32804:	bmi	329c8 <__assert_fail@plt+0x20b00>
   32808:	ldr	r3, [sp, #28]
   3280c:	mvn	r0, #0
   32810:	mvn	r1, #-2147483648	; 0x80000000
   32814:	str	r4, [sp, #8]
   32818:	mvn	r6, #0
   3281c:	mvn	r7, #-2147483648	; 0x80000000
   32820:	bl	35eec <__assert_fail@plt+0x24024>
   32824:	ldr	r4, [sp, #24]
   32828:	ldr	r3, [sp, #28]
   3282c:	subs	r0, r0, r8
   32830:	mov	r2, #1
   32834:	sbcs	r0, r1, r9
   32838:	bge	32a00 <__assert_fail@plt+0x20b38>
   3283c:	b	32b38 <__assert_fail@plt+0x20c70>
   32840:	and	r0, r6, r7
   32844:	cmn	r0, #1
   32848:	beq	32884 <__assert_fail@plt+0x209bc>
   3284c:	mov	r0, #0
   32850:	mov	r1, #-2147483648	; 0x80000000
   32854:	mov	r2, r6
   32858:	mov	r3, r7
   3285c:	bl	35e18 <__assert_fail@plt+0x23f50>
   32860:	ldr	r2, [sp, #24]
   32864:	ldr	r3, [sp, #28]
   32868:	mov	r4, #1
   3286c:	mov	r9, #-2147483648	; 0x80000000
   32870:	subs	r0, r0, r2
   32874:	sbcs	r0, r1, r3
   32878:	mov	r0, #0
   3287c:	str	r0, [sp, #8]
   32880:	blt	32a14 <__assert_fail@plt+0x20b4c>
   32884:	umull	r1, r0, r6, r2
   32888:	mov	r4, #0
   3288c:	mla	r0, r6, r3, r0
   32890:	mla	r9, r7, r2, r0
   32894:	str	r1, [sp, #8]
   32898:	cmp	r9, #0
   3289c:	bmi	32a14 <__assert_fail@plt+0x20b4c>
   328a0:	ldr	r3, [sp, #28]
   328a4:	mvn	r0, #0
   328a8:	mvn	r1, #-2147483648	; 0x80000000
   328ac:	str	r4, [sp, #4]
   328b0:	mvn	r6, #0
   328b4:	mvn	r8, #-2147483648	; 0x80000000
   328b8:	bl	35eec <__assert_fail@plt+0x24024>
   328bc:	ldr	r4, [sp, #8]
   328c0:	ldr	r2, [sp, #24]
   328c4:	ldr	r3, [sp, #28]
   328c8:	mov	r7, #1
   328cc:	subs	r0, r0, r4
   328d0:	sbcs	r0, r1, r9
   328d4:	bge	32a50 <__assert_fail@plt+0x20b88>
   328d8:	b	32a68 <__assert_fail@plt+0x20ba0>
   328dc:	mov	r0, #-2147483648	; 0x80000000
   328e0:	mov	r1, #-2147483648	; 0x80000000
   328e4:	mov	r2, r8
   328e8:	mov	r3, r9
   328ec:	mov	r6, r4
   328f0:	mov	r4, #0
   328f4:	str	r0, [sp, #8]
   328f8:	mov	r0, #0
   328fc:	bl	35e18 <__assert_fail@plt+0x23f50>
   32900:	ldr	r2, [sp, #24]
   32904:	ldr	r3, [sp, #28]
   32908:	mov	r7, #1
   3290c:	subs	r0, r0, r2
   32910:	sbcs	r0, r1, r3
   32914:	blt	32988 <__assert_fail@plt+0x20ac0>
   32918:	umull	r4, r0, r8, r2
   3291c:	mov	r7, r6
   32920:	mla	r0, r8, r3, r0
   32924:	mla	r0, r9, r2, r0
   32928:	cmp	r0, #0
   3292c:	str	r0, [sp, #8]
   32930:	bmi	32988 <__assert_fail@plt+0x20ac0>
   32934:	ldr	r3, [sp, #28]
   32938:	mvn	r0, #0
   3293c:	mvn	r1, #-2147483648	; 0x80000000
   32940:	mov	r9, r7
   32944:	mvn	r6, #0
   32948:	mvn	r7, #-2147483648	; 0x80000000
   3294c:	bl	35eec <__assert_fail@plt+0x24024>
   32950:	ldr	r8, [sp, #8]
   32954:	ldr	r3, [sp, #24]
   32958:	ldr	ip, [sp, #28]
   3295c:	subs	r0, r0, r4
   32960:	mov	r2, #1
   32964:	sbcs	r0, r1, r8
   32968:	blt	3297c <__assert_fail@plt+0x20ab4>
   3296c:	umull	r6, r0, r4, r3
   32970:	mov	r2, #0
   32974:	mla	r0, r4, ip, r0
   32978:	mla	r7, r8, r3, r0
   3297c:	orr	r3, r2, r9
   32980:	ldr	r9, [sp, #12]
   32984:	b	33624 <__assert_fail@plt+0x2175c>
   32988:	ldr	r8, [sp, #8]
   3298c:	mov	r0, #0
   32990:	mov	r1, #-2147483648	; 0x80000000
   32994:	mov	r2, r4
   32998:	mov	r9, r7
   3299c:	mov	r6, #0
   329a0:	mov	r7, #-2147483648	; 0x80000000
   329a4:	mov	r3, r8
   329a8:	bl	35e18 <__assert_fail@plt+0x23f50>
   329ac:	ldr	r3, [sp, #24]
   329b0:	ldr	ip, [sp, #28]
   329b4:	mov	r2, #1
   329b8:	subs	r0, r0, r3
   329bc:	sbcs	r0, r1, ip
   329c0:	bge	3296c <__assert_fail@plt+0x20aa4>
   329c4:	b	3297c <__assert_fail@plt+0x20ab4>
   329c8:	mov	r0, #0
   329cc:	mov	r1, #-2147483648	; 0x80000000
   329d0:	mov	r2, r8
   329d4:	mov	r3, r9
   329d8:	str	r4, [sp, #8]
   329dc:	mov	r6, #0
   329e0:	mov	r7, #-2147483648	; 0x80000000
   329e4:	bl	35e18 <__assert_fail@plt+0x23f50>
   329e8:	ldr	r4, [sp, #24]
   329ec:	ldr	r3, [sp, #28]
   329f0:	mov	r2, #1
   329f4:	subs	r0, r0, r4
   329f8:	sbcs	r0, r1, r3
   329fc:	blt	32b38 <__assert_fail@plt+0x20c70>
   32a00:	umull	r6, r0, r8, r4
   32a04:	mov	r2, #0
   32a08:	mla	r0, r8, r3, r0
   32a0c:	mla	r7, r9, r4, r0
   32a10:	b	32b38 <__assert_fail@plt+0x20c70>
   32a14:	str	r4, [sp, #4]
   32a18:	ldr	r4, [sp, #8]
   32a1c:	mov	r0, #0
   32a20:	mov	r1, #-2147483648	; 0x80000000
   32a24:	mov	r3, r9
   32a28:	mov	r2, r4
   32a2c:	bl	35e18 <__assert_fail@plt+0x23f50>
   32a30:	ldr	r2, [sp, #24]
   32a34:	ldr	r3, [sp, #28]
   32a38:	mov	r7, #1
   32a3c:	mov	r6, #0
   32a40:	mov	r8, #-2147483648	; 0x80000000
   32a44:	subs	r0, r0, r2
   32a48:	sbcs	r0, r1, r3
   32a4c:	blt	32aa0 <__assert_fail@plt+0x20bd8>
   32a50:	umull	r6, r0, r4, r2
   32a54:	ldr	r7, [sp, #4]
   32a58:	mla	r0, r4, r3, r0
   32a5c:	mla	r8, r9, r2, r0
   32a60:	cmp	r8, #0
   32a64:	bmi	32aa0 <__assert_fail@plt+0x20bd8>
   32a68:	ldr	r3, [sp, #28]
   32a6c:	mvn	r0, #0
   32a70:	mvn	r1, #-2147483648	; 0x80000000
   32a74:	str	r7, [sp, #8]
   32a78:	mvn	r4, #0
   32a7c:	mvn	r9, #-2147483648	; 0x80000000
   32a80:	bl	35eec <__assert_fail@plt+0x24024>
   32a84:	ldr	r2, [sp, #24]
   32a88:	ldr	r3, [sp, #28]
   32a8c:	subs	r0, r0, r6
   32a90:	mov	r7, #1
   32a94:	sbcs	r0, r1, r8
   32a98:	bge	32ad8 <__assert_fail@plt+0x20c10>
   32a9c:	b	32af0 <__assert_fail@plt+0x20c28>
   32aa0:	mov	r0, #0
   32aa4:	mov	r1, #-2147483648	; 0x80000000
   32aa8:	mov	r2, r6
   32aac:	mov	r3, r8
   32ab0:	str	r7, [sp, #8]
   32ab4:	bl	35e18 <__assert_fail@plt+0x23f50>
   32ab8:	ldr	r2, [sp, #24]
   32abc:	ldr	r3, [sp, #28]
   32ac0:	mov	r7, #1
   32ac4:	mov	r4, #0
   32ac8:	mov	r9, #-2147483648	; 0x80000000
   32acc:	subs	r0, r0, r2
   32ad0:	sbcs	r0, r1, r3
   32ad4:	blt	32b48 <__assert_fail@plt+0x20c80>
   32ad8:	umull	r4, r0, r6, r2
   32adc:	ldr	r7, [sp, #8]
   32ae0:	mla	r0, r6, r3, r0
   32ae4:	mla	r9, r8, r2, r0
   32ae8:	cmp	r9, #0
   32aec:	bmi	32b48 <__assert_fail@plt+0x20c80>
   32af0:	ldr	r3, [sp, #28]
   32af4:	mvn	r0, #0
   32af8:	mvn	r1, #-2147483648	; 0x80000000
   32afc:	str	r7, [sp, #8]
   32b00:	mvn	r6, #0
   32b04:	mvn	r7, #-2147483648	; 0x80000000
   32b08:	bl	35eec <__assert_fail@plt+0x24024>
   32b0c:	ldr	r3, [sp, #24]
   32b10:	ldr	ip, [sp, #28]
   32b14:	subs	r0, r0, r4
   32b18:	mov	r2, #1
   32b1c:	mov	r8, r4
   32b20:	sbcs	r0, r1, r9
   32b24:	blt	32b38 <__assert_fail@plt+0x20c70>
   32b28:	umull	r6, r0, r8, r3
   32b2c:	mov	r2, #0
   32b30:	mla	r0, r8, ip, r0
   32b34:	mla	r7, r9, r3, r0
   32b38:	ldr	r0, [sp, #8]
   32b3c:	ldr	r9, [sp, #12]
   32b40:	orr	r3, r2, r0
   32b44:	b	33624 <__assert_fail@plt+0x2175c>
   32b48:	mov	r0, #0
   32b4c:	mov	r1, #-2147483648	; 0x80000000
   32b50:	mov	r2, r4
   32b54:	mov	r3, r9
   32b58:	str	r7, [sp, #8]
   32b5c:	mov	r8, r4
   32b60:	bl	35e18 <__assert_fail@plt+0x23f50>
   32b64:	ldr	r3, [sp, #24]
   32b68:	ldr	ip, [sp, #28]
   32b6c:	mov	r2, #1
   32b70:	mov	r6, #0
   32b74:	mov	r7, #-2147483648	; 0x80000000
   32b78:	subs	r0, r0, r3
   32b7c:	sbcs	r0, r1, ip
   32b80:	bge	32b28 <__assert_fail@plt+0x20c60>
   32b84:	b	32b38 <__assert_fail@plt+0x20c70>
   32b88:	and	r0, r6, r7
   32b8c:	cmn	r0, #1
   32b90:	beq	32bcc <__assert_fail@plt+0x20d04>
   32b94:	mov	r0, #0
   32b98:	mov	r1, #-2147483648	; 0x80000000
   32b9c:	mov	r2, r6
   32ba0:	mov	r3, r7
   32ba4:	bl	35e18 <__assert_fail@plt+0x23f50>
   32ba8:	ldr	r2, [sp, #24]
   32bac:	ldr	r3, [sp, #28]
   32bb0:	mov	r4, #1
   32bb4:	mov	r9, #-2147483648	; 0x80000000
   32bb8:	subs	r0, r0, r2
   32bbc:	sbcs	r0, r1, r3
   32bc0:	mov	r0, #0
   32bc4:	str	r0, [sp, #8]
   32bc8:	blt	32edc <__assert_fail@plt+0x21014>
   32bcc:	umull	r1, r0, r6, r2
   32bd0:	mov	r4, #0
   32bd4:	mla	r0, r6, r3, r0
   32bd8:	mla	r9, r7, r2, r0
   32bdc:	str	r1, [sp, #8]
   32be0:	cmp	r9, #0
   32be4:	bmi	32edc <__assert_fail@plt+0x21014>
   32be8:	ldr	r3, [sp, #28]
   32bec:	mvn	r0, #0
   32bf0:	mvn	r1, #-2147483648	; 0x80000000
   32bf4:	str	r4, [sp, #4]
   32bf8:	mvn	r8, #0
   32bfc:	mvn	r4, #-2147483648	; 0x80000000
   32c00:	bl	35eec <__assert_fail@plt+0x24024>
   32c04:	ldr	r6, [sp, #8]
   32c08:	ldr	r2, [sp, #24]
   32c0c:	ldr	r3, [sp, #28]
   32c10:	mov	r7, #1
   32c14:	subs	r0, r0, r6
   32c18:	sbcs	r0, r1, r9
   32c1c:	bge	32f18 <__assert_fail@plt+0x21050>
   32c20:	b	32f30 <__assert_fail@plt+0x21068>
   32c24:	and	r0, r6, r7
   32c28:	cmn	r0, #1
   32c2c:	beq	32c54 <__assert_fail@plt+0x20d8c>
   32c30:	mov	r0, #0
   32c34:	mov	r1, #-2147483648	; 0x80000000
   32c38:	mov	r2, r6
   32c3c:	mov	r3, r7
   32c40:	bl	35e18 <__assert_fail@plt+0x23f50>
   32c44:	ldr	r3, [sp, #28]
   32c48:	subs	r0, r0, #1024	; 0x400
   32c4c:	sbcs	r0, r1, #0
   32c50:	blt	32eac <__assert_fail@plt+0x20fe4>
   32c54:	lsl	r0, r7, #10
   32c58:	orr	r7, r0, r6, lsr #22
   32c5c:	lsl	r6, r6, #10
   32c60:	b	33624 <__assert_fail@plt+0x2175c>
   32c64:	and	r0, r6, r7
   32c68:	cmn	r0, #1
   32c6c:	beq	32ca8 <__assert_fail@plt+0x20de0>
   32c70:	mov	r0, #0
   32c74:	mov	r1, #-2147483648	; 0x80000000
   32c78:	mov	r2, r6
   32c7c:	mov	r3, r7
   32c80:	bl	35e18 <__assert_fail@plt+0x23f50>
   32c84:	ldr	r2, [sp, #24]
   32c88:	ldr	r3, [sp, #28]
   32c8c:	mov	r4, #1
   32c90:	mov	r9, #-2147483648	; 0x80000000
   32c94:	subs	r0, r0, r2
   32c98:	sbcs	r0, r1, r3
   32c9c:	mov	r0, #0
   32ca0:	str	r0, [sp, #8]
   32ca4:	blt	331f4 <__assert_fail@plt+0x2132c>
   32ca8:	umull	r1, r0, r6, r2
   32cac:	mov	r4, #0
   32cb0:	mla	r0, r6, r3, r0
   32cb4:	mla	r9, r7, r2, r0
   32cb8:	str	r1, [sp, #8]
   32cbc:	cmp	r9, #0
   32cc0:	bmi	331f4 <__assert_fail@plt+0x2132c>
   32cc4:	ldr	r3, [sp, #28]
   32cc8:	mvn	r0, #0
   32ccc:	mvn	r1, #-2147483648	; 0x80000000
   32cd0:	str	r4, [sp, #4]
   32cd4:	mvn	r8, #0
   32cd8:	mvn	r4, #-2147483648	; 0x80000000
   32cdc:	bl	35eec <__assert_fail@plt+0x24024>
   32ce0:	ldr	r6, [sp, #8]
   32ce4:	ldr	r2, [sp, #24]
   32ce8:	ldr	r3, [sp, #28]
   32cec:	mov	r7, #1
   32cf0:	subs	r0, r0, r6
   32cf4:	sbcs	r0, r1, r9
   32cf8:	bge	33230 <__assert_fail@plt+0x21368>
   32cfc:	b	33248 <__assert_fail@plt+0x21380>
   32d00:	and	r0, r6, r7
   32d04:	cmn	r0, #1
   32d08:	beq	32d44 <__assert_fail@plt+0x20e7c>
   32d0c:	mov	r0, #0
   32d10:	mov	r1, #-2147483648	; 0x80000000
   32d14:	mov	r2, r6
   32d18:	mov	r3, r7
   32d1c:	bl	35e18 <__assert_fail@plt+0x23f50>
   32d20:	ldr	r2, [sp, #24]
   32d24:	ldr	r3, [sp, #28]
   32d28:	mov	r4, #1
   32d2c:	mov	r8, #-2147483648	; 0x80000000
   32d30:	subs	r0, r0, r2
   32d34:	sbcs	r0, r1, r3
   32d38:	mov	r0, #0
   32d3c:	str	r0, [sp, #8]
   32d40:	blt	33470 <__assert_fail@plt+0x215a8>
   32d44:	umull	r1, r0, r6, r2
   32d48:	mov	r4, #0
   32d4c:	mla	r0, r6, r3, r0
   32d50:	mla	r8, r7, r2, r0
   32d54:	str	r1, [sp, #8]
   32d58:	cmp	r8, #0
   32d5c:	bmi	33470 <__assert_fail@plt+0x215a8>
   32d60:	ldr	r3, [sp, #28]
   32d64:	mvn	r0, #0
   32d68:	mvn	r1, #-2147483648	; 0x80000000
   32d6c:	str	r4, [sp, #4]
   32d70:	mvn	r9, #0
   32d74:	mvn	r4, #-2147483648	; 0x80000000
   32d78:	bl	35eec <__assert_fail@plt+0x24024>
   32d7c:	ldr	r6, [sp, #8]
   32d80:	ldr	r2, [sp, #24]
   32d84:	ldr	r3, [sp, #28]
   32d88:	mov	r7, #1
   32d8c:	subs	r0, r0, r6
   32d90:	sbcs	r0, r1, r8
   32d94:	bge	334ac <__assert_fail@plt+0x215e4>
   32d98:	b	334c4 <__assert_fail@plt+0x215fc>
   32d9c:	and	r0, r6, r7
   32da0:	cmn	r0, #1
   32da4:	beq	32de0 <__assert_fail@plt+0x20f18>
   32da8:	mov	r0, #0
   32dac:	mov	r1, #-2147483648	; 0x80000000
   32db0:	mov	r2, r6
   32db4:	mov	r3, r7
   32db8:	bl	35e18 <__assert_fail@plt+0x23f50>
   32dbc:	ldr	r2, [sp, #24]
   32dc0:	ldr	r3, [sp, #28]
   32dc4:	mov	r4, #1
   32dc8:	mov	r9, #-2147483648	; 0x80000000
   32dcc:	subs	r0, r0, r2
   32dd0:	sbcs	r0, r1, r3
   32dd4:	mov	r0, #0
   32dd8:	str	r0, [sp, #8]
   32ddc:	blt	3368c <__assert_fail@plt+0x217c4>
   32de0:	umull	r1, r0, r6, r2
   32de4:	mov	r4, #0
   32de8:	mla	r0, r6, r3, r0
   32dec:	mla	r9, r7, r2, r0
   32df0:	str	r1, [sp, #8]
   32df4:	cmp	r9, #0
   32df8:	bmi	3368c <__assert_fail@plt+0x217c4>
   32dfc:	ldr	r3, [sp, #28]
   32e00:	mvn	r0, #0
   32e04:	mvn	r1, #-2147483648	; 0x80000000
   32e08:	str	r4, [sp]
   32e0c:	mvn	r8, #-2147483648	; 0x80000000
   32e10:	str	r0, [sp, #4]
   32e14:	mvn	r0, #0
   32e18:	bl	35eec <__assert_fail@plt+0x24024>
   32e1c:	ldr	r6, [sp, #8]
   32e20:	ldr	r2, [sp, #24]
   32e24:	ldr	r3, [sp, #28]
   32e28:	mov	r7, #1
   32e2c:	subs	r0, r0, r6
   32e30:	sbcs	r0, r1, r9
   32e34:	bge	336cc <__assert_fail@plt+0x21804>
   32e38:	b	336e8 <__assert_fail@plt+0x21820>
   32e3c:	and	r0, r6, r7
   32e40:	cmn	r0, #1
   32e44:	beq	32e6c <__assert_fail@plt+0x20fa4>
   32e48:	mov	r0, #0
   32e4c:	mov	r1, #-2147483648	; 0x80000000
   32e50:	mov	r2, r6
   32e54:	mov	r3, r7
   32e58:	bl	35e18 <__assert_fail@plt+0x23f50>
   32e5c:	ldr	r3, [sp, #28]
   32e60:	subs	r0, r0, #512	; 0x200
   32e64:	sbcs	r0, r1, #0
   32e68:	blt	32eac <__assert_fail@plt+0x20fe4>
   32e6c:	lsl	r0, r7, #9
   32e70:	orr	r7, r0, r6, lsr #23
   32e74:	lsl	r6, r6, #9
   32e78:	b	33624 <__assert_fail@plt+0x2175c>
   32e7c:	and	r0, r6, r7
   32e80:	cmn	r0, #1
   32e84:	beq	32ecc <__assert_fail@plt+0x21004>
   32e88:	mov	r0, #0
   32e8c:	mov	r1, #-2147483648	; 0x80000000
   32e90:	mov	r2, r6
   32e94:	mov	r3, r7
   32e98:	bl	35e18 <__assert_fail@plt+0x23f50>
   32e9c:	ldr	r3, [sp, #28]
   32ea0:	subs	r0, r0, #2
   32ea4:	sbcs	r0, r1, #0
   32ea8:	bge	32ecc <__assert_fail@plt+0x21004>
   32eac:	cmp	r7, #0
   32eb0:	mvn	r0, #-2147483648	; 0x80000000
   32eb4:	mvn	r6, #0
   32eb8:	mov	r3, #1
   32ebc:	movmi	r0, #-2147483648	; 0x80000000
   32ec0:	movwmi	r6, #0
   32ec4:	mov	r7, r0
   32ec8:	b	33624 <__assert_fail@plt+0x2175c>
   32ecc:	lsl	r0, r7, #1
   32ed0:	orr	r7, r0, r6, lsr #31
   32ed4:	lsl	r6, r6, #1
   32ed8:	b	33624 <__assert_fail@plt+0x2175c>
   32edc:	ldr	r6, [sp, #8]
   32ee0:	mov	r0, #0
   32ee4:	mov	r1, #-2147483648	; 0x80000000
   32ee8:	mov	r3, r9
   32eec:	str	r4, [sp, #4]
   32ef0:	mov	r2, r6
   32ef4:	bl	35e18 <__assert_fail@plt+0x23f50>
   32ef8:	ldr	r2, [sp, #24]
   32efc:	ldr	r3, [sp, #28]
   32f00:	mov	r7, #1
   32f04:	mov	r8, #0
   32f08:	mov	r4, #-2147483648	; 0x80000000
   32f0c:	subs	r0, r0, r2
   32f10:	sbcs	r0, r1, r3
   32f14:	blt	32f68 <__assert_fail@plt+0x210a0>
   32f18:	umull	r8, r0, r6, r2
   32f1c:	ldr	r7, [sp, #4]
   32f20:	mla	r0, r6, r3, r0
   32f24:	mla	r4, r9, r2, r0
   32f28:	cmp	r4, #0
   32f2c:	bmi	32f68 <__assert_fail@plt+0x210a0>
   32f30:	ldr	r3, [sp, #28]
   32f34:	mvn	r0, #0
   32f38:	mvn	r1, #-2147483648	; 0x80000000
   32f3c:	str	r7, [sp, #8]
   32f40:	mvn	r7, #0
   32f44:	mvn	r9, #-2147483648	; 0x80000000
   32f48:	bl	35eec <__assert_fail@plt+0x24024>
   32f4c:	ldr	r2, [sp, #24]
   32f50:	ldr	r3, [sp, #28]
   32f54:	subs	r0, r0, r8
   32f58:	mov	r6, #1
   32f5c:	sbcs	r0, r1, r4
   32f60:	bge	32fa0 <__assert_fail@plt+0x210d8>
   32f64:	b	32fb8 <__assert_fail@plt+0x210f0>
   32f68:	mov	r0, #0
   32f6c:	mov	r1, #-2147483648	; 0x80000000
   32f70:	mov	r2, r8
   32f74:	mov	r3, r4
   32f78:	str	r7, [sp, #8]
   32f7c:	bl	35e18 <__assert_fail@plt+0x23f50>
   32f80:	ldr	r2, [sp, #24]
   32f84:	ldr	r3, [sp, #28]
   32f88:	mov	r6, #1
   32f8c:	mov	r7, #0
   32f90:	mov	r9, #-2147483648	; 0x80000000
   32f94:	subs	r0, r0, r2
   32f98:	sbcs	r0, r1, r3
   32f9c:	blt	32ff8 <__assert_fail@plt+0x21130>
   32fa0:	umull	r7, r0, r8, r2
   32fa4:	ldr	r6, [sp, #8]
   32fa8:	mla	r0, r8, r3, r0
   32fac:	mla	r9, r4, r2, r0
   32fb0:	cmp	r9, #0
   32fb4:	bmi	32ff8 <__assert_fail@plt+0x21130>
   32fb8:	ldr	r3, [sp, #28]
   32fbc:	mvn	r0, #0
   32fc0:	mvn	r1, #-2147483648	; 0x80000000
   32fc4:	str	r6, [sp, #8]
   32fc8:	mvn	r8, #0
   32fcc:	mvn	r4, #-2147483648	; 0x80000000
   32fd0:	bl	35eec <__assert_fail@plt+0x24024>
   32fd4:	ldr	r2, [sp, #24]
   32fd8:	ldr	r3, [sp, #28]
   32fdc:	subs	r0, r0, r7
   32fe0:	sbcs	r0, r1, r9
   32fe4:	bge	3303c <__assert_fail@plt+0x21174>
   32fe8:	mov	r0, #1
   32fec:	mov	r6, #0
   32ff0:	str	r0, [sp, #8]
   32ff4:	b	33054 <__assert_fail@plt+0x2118c>
   32ff8:	mov	r0, #0
   32ffc:	mov	r1, #-2147483648	; 0x80000000
   33000:	mov	r2, r7
   33004:	mov	r3, r9
   33008:	str	r6, [sp, #8]
   3300c:	bl	35e18 <__assert_fail@plt+0x23f50>
   33010:	ldr	r2, [sp, #24]
   33014:	ldr	r3, [sp, #28]
   33018:	subs	r0, r0, r2
   3301c:	sbcs	r0, r1, r3
   33020:	bge	3303c <__assert_fail@plt+0x21174>
   33024:	mov	r0, #1
   33028:	mov	r8, #0
   3302c:	mov	r4, #-2147483648	; 0x80000000
   33030:	mov	r6, #0
   33034:	str	r0, [sp, #8]
   33038:	b	3308c <__assert_fail@plt+0x211c4>
   3303c:	umull	r8, r0, r7, r2
   33040:	mov	r6, #0
   33044:	mla	r0, r7, r3, r0
   33048:	mla	r4, r9, r2, r0
   3304c:	cmp	r4, #0
   33050:	bmi	3308c <__assert_fail@plt+0x211c4>
   33054:	ldr	r3, [sp, #28]
   33058:	mvn	r0, #0
   3305c:	mvn	r1, #-2147483648	; 0x80000000
   33060:	mvn	r9, #0
   33064:	mvn	r7, #-2147483648	; 0x80000000
   33068:	bl	35eec <__assert_fail@plt+0x24024>
   3306c:	ldr	r2, [sp, #24]
   33070:	ldr	r3, [sp, #28]
   33074:	subs	r0, r0, r8
   33078:	sbcs	r0, r1, r4
   3307c:	bge	330c8 <__assert_fail@plt+0x21200>
   33080:	mov	r0, #1
   33084:	str	r0, [sp, #8]
   33088:	b	330dc <__assert_fail@plt+0x21214>
   3308c:	mov	r0, #0
   33090:	mov	r1, #-2147483648	; 0x80000000
   33094:	mov	r2, r8
   33098:	mov	r3, r4
   3309c:	bl	35e18 <__assert_fail@plt+0x23f50>
   330a0:	ldr	r2, [sp, #24]
   330a4:	ldr	r3, [sp, #28]
   330a8:	subs	r0, r0, r2
   330ac:	sbcs	r0, r1, r3
   330b0:	bge	330c8 <__assert_fail@plt+0x21200>
   330b4:	mov	r0, #1
   330b8:	mov	r9, #0
   330bc:	mov	r7, #-2147483648	; 0x80000000
   330c0:	str	r0, [sp, #8]
   330c4:	b	33118 <__assert_fail@plt+0x21250>
   330c8:	umull	r9, r0, r8, r2
   330cc:	mla	r0, r8, r3, r0
   330d0:	mla	r7, r4, r2, r0
   330d4:	cmp	r7, #0
   330d8:	bmi	33118 <__assert_fail@plt+0x21250>
   330dc:	ldr	r3, [sp, #28]
   330e0:	mvn	r0, #0
   330e4:	mvn	r1, #-2147483648	; 0x80000000
   330e8:	mvn	r8, #0
   330ec:	mvn	r4, #-2147483648	; 0x80000000
   330f0:	bl	35eec <__assert_fail@plt+0x24024>
   330f4:	ldr	r2, [sp, #24]
   330f8:	ldr	r3, [sp, #28]
   330fc:	subs	r0, r0, r9
   33100:	sbcs	r0, r1, r7
   33104:	bge	33158 <__assert_fail@plt+0x21290>
   33108:	ldr	r9, [sp, #12]
   3310c:	mov	r0, #1
   33110:	str	r0, [sp, #8]
   33114:	b	33170 <__assert_fail@plt+0x212a8>
   33118:	mov	r0, #0
   3311c:	mov	r1, #-2147483648	; 0x80000000
   33120:	mov	r2, r9
   33124:	mov	r3, r7
   33128:	bl	35e18 <__assert_fail@plt+0x23f50>
   3312c:	ldr	r2, [sp, #24]
   33130:	ldr	r3, [sp, #28]
   33134:	subs	r0, r0, r2
   33138:	sbcs	r0, r1, r3
   3313c:	bge	33158 <__assert_fail@plt+0x21290>
   33140:	ldr	r9, [sp, #12]
   33144:	mov	r0, #1
   33148:	mov	r8, #0
   3314c:	mov	r4, #-2147483648	; 0x80000000
   33150:	str	r0, [sp, #8]
   33154:	b	331c0 <__assert_fail@plt+0x212f8>
   33158:	umull	r8, r0, r9, r2
   3315c:	mla	r0, r9, r3, r0
   33160:	ldr	r9, [sp, #12]
   33164:	mla	r4, r7, r2, r0
   33168:	cmp	r4, #0
   3316c:	bmi	331c0 <__assert_fail@plt+0x212f8>
   33170:	ldr	r3, [sp, #28]
   33174:	mvn	r0, #0
   33178:	mvn	r1, #-2147483648	; 0x80000000
   3317c:	mvn	r6, #0
   33180:	bl	35eec <__assert_fail@plt+0x24024>
   33184:	ldr	r7, [sp, #24]
   33188:	ldr	r3, [sp, #28]
   3318c:	subs	r0, r0, r8
   33190:	mov	r2, #1
   33194:	sbcs	r0, r1, r4
   33198:	mvn	r0, #-2147483648	; 0x80000000
   3319c:	blt	331b0 <__assert_fail@plt+0x212e8>
   331a0:	umull	r6, r0, r8, r7
   331a4:	mov	r2, #0
   331a8:	mla	r0, r8, r3, r0
   331ac:	mla	r0, r4, r7, r0
   331b0:	ldr	r1, [sp, #8]
   331b4:	mov	r7, r0
   331b8:	orr	r3, r2, r1
   331bc:	b	33624 <__assert_fail@plt+0x2175c>
   331c0:	mov	r0, #0
   331c4:	mov	r1, #-2147483648	; 0x80000000
   331c8:	mov	r2, r8
   331cc:	mov	r3, r4
   331d0:	bl	35e18 <__assert_fail@plt+0x23f50>
   331d4:	ldr	r7, [sp, #24]
   331d8:	ldr	r3, [sp, #28]
   331dc:	mov	r2, #1
   331e0:	subs	r0, r0, r7
   331e4:	sbcs	r0, r1, r3
   331e8:	mov	r0, #-2147483648	; 0x80000000
   331ec:	bge	331a0 <__assert_fail@plt+0x212d8>
   331f0:	b	331b0 <__assert_fail@plt+0x212e8>
   331f4:	ldr	r6, [sp, #8]
   331f8:	mov	r0, #0
   331fc:	mov	r1, #-2147483648	; 0x80000000
   33200:	mov	r3, r9
   33204:	str	r4, [sp, #4]
   33208:	mov	r2, r6
   3320c:	bl	35e18 <__assert_fail@plt+0x23f50>
   33210:	ldr	r2, [sp, #24]
   33214:	ldr	r3, [sp, #28]
   33218:	mov	r7, #1
   3321c:	mov	r8, #0
   33220:	mov	r4, #-2147483648	; 0x80000000
   33224:	subs	r0, r0, r2
   33228:	sbcs	r0, r1, r3
   3322c:	blt	33284 <__assert_fail@plt+0x213bc>
   33230:	umull	r8, r0, r6, r2
   33234:	ldr	r7, [sp, #4]
   33238:	mla	r0, r6, r3, r0
   3323c:	mla	r4, r9, r2, r0
   33240:	cmp	r4, #0
   33244:	bmi	33284 <__assert_fail@plt+0x213bc>
   33248:	ldr	r3, [sp, #28]
   3324c:	mvn	r0, #0
   33250:	mvn	r1, #-2147483648	; 0x80000000
   33254:	str	r7, [sp, #4]
   33258:	mvn	r7, #0
   3325c:	mvn	r9, #-2147483648	; 0x80000000
   33260:	bl	35eec <__assert_fail@plt+0x24024>
   33264:	ldr	r2, [sp, #24]
   33268:	ldr	r3, [sp, #28]
   3326c:	subs	r0, r0, r8
   33270:	mov	r6, #1
   33274:	sbcs	r0, r1, r4
   33278:	str	r6, [sp, #8]
   3327c:	bge	332c0 <__assert_fail@plt+0x213f8>
   33280:	b	332dc <__assert_fail@plt+0x21414>
   33284:	mov	r0, #0
   33288:	mov	r1, #-2147483648	; 0x80000000
   3328c:	mov	r2, r8
   33290:	mov	r3, r4
   33294:	str	r7, [sp, #4]
   33298:	bl	35e18 <__assert_fail@plt+0x23f50>
   3329c:	ldr	r2, [sp, #24]
   332a0:	ldr	r3, [sp, #28]
   332a4:	mov	r7, #1
   332a8:	mov	r9, #-2147483648	; 0x80000000
   332ac:	str	r7, [sp, #8]
   332b0:	mov	r7, #0
   332b4:	subs	r0, r0, r2
   332b8:	sbcs	r0, r1, r3
   332bc:	blt	33314 <__assert_fail@plt+0x2144c>
   332c0:	umull	r7, r0, r8, r2
   332c4:	mla	r0, r8, r3, r0
   332c8:	mla	r9, r4, r2, r0
   332cc:	ldr	r0, [sp, #4]
   332d0:	cmp	r9, #0
   332d4:	str	r0, [sp, #8]
   332d8:	bmi	33314 <__assert_fail@plt+0x2144c>
   332dc:	ldr	r3, [sp, #28]
   332e0:	mvn	r0, #0
   332e4:	mvn	r1, #-2147483648	; 0x80000000
   332e8:	mvn	r4, #0
   332ec:	mvn	r8, #-2147483648	; 0x80000000
   332f0:	bl	35eec <__assert_fail@plt+0x24024>
   332f4:	ldr	r2, [sp, #24]
   332f8:	ldr	r3, [sp, #28]
   332fc:	subs	r0, r0, r7
   33300:	sbcs	r0, r1, r9
   33304:	bge	33350 <__assert_fail@plt+0x21488>
   33308:	mov	r0, #1
   3330c:	str	r0, [sp, #8]
   33310:	b	33364 <__assert_fail@plt+0x2149c>
   33314:	mov	r0, #0
   33318:	mov	r1, #-2147483648	; 0x80000000
   3331c:	mov	r2, r7
   33320:	mov	r3, r9
   33324:	bl	35e18 <__assert_fail@plt+0x23f50>
   33328:	ldr	r2, [sp, #24]
   3332c:	ldr	r3, [sp, #28]
   33330:	subs	r0, r0, r2
   33334:	sbcs	r0, r1, r3
   33338:	bge	33350 <__assert_fail@plt+0x21488>
   3333c:	mov	r0, #1
   33340:	mov	r4, #0
   33344:	mov	r8, #-2147483648	; 0x80000000
   33348:	str	r0, [sp, #8]
   3334c:	b	33398 <__assert_fail@plt+0x214d0>
   33350:	umull	r4, r0, r7, r2
   33354:	mla	r0, r7, r3, r0
   33358:	mla	r8, r9, r2, r0
   3335c:	cmp	r8, #0
   33360:	bmi	33398 <__assert_fail@plt+0x214d0>
   33364:	ldr	r3, [sp, #28]
   33368:	mvn	r0, #0
   3336c:	mvn	r1, #-2147483648	; 0x80000000
   33370:	mvn	r6, #0
   33374:	mvn	r9, #-2147483648	; 0x80000000
   33378:	bl	35eec <__assert_fail@plt+0x24024>
   3337c:	ldr	r2, [sp, #24]
   33380:	ldr	r3, [sp, #28]
   33384:	subs	r0, r0, r4
   33388:	sbcs	r0, r1, r8
   3338c:	bge	333d0 <__assert_fail@plt+0x21508>
   33390:	mov	r8, #1
   33394:	b	333e8 <__assert_fail@plt+0x21520>
   33398:	mov	r0, #0
   3339c:	mov	r1, #-2147483648	; 0x80000000
   333a0:	mov	r2, r4
   333a4:	mov	r3, r8
   333a8:	bl	35e18 <__assert_fail@plt+0x23f50>
   333ac:	ldr	r2, [sp, #24]
   333b0:	ldr	r3, [sp, #28]
   333b4:	subs	r0, r0, r2
   333b8:	sbcs	r0, r1, r3
   333bc:	bge	333d0 <__assert_fail@plt+0x21508>
   333c0:	mov	r8, #1
   333c4:	mov	r6, #0
   333c8:	mov	r9, #-2147483648	; 0x80000000
   333cc:	b	33438 <__assert_fail@plt+0x21570>
   333d0:	umull	r6, r0, r4, r2
   333d4:	mla	r0, r4, r3, r0
   333d8:	mla	r9, r8, r2, r0
   333dc:	ldr	r8, [sp, #8]
   333e0:	cmp	r9, #0
   333e4:	bmi	33438 <__assert_fail@plt+0x21570>
   333e8:	ldr	r3, [sp, #28]
   333ec:	mvn	r0, #0
   333f0:	mvn	r1, #-2147483648	; 0x80000000
   333f4:	mvn	r4, #0
   333f8:	mvn	r7, #-2147483648	; 0x80000000
   333fc:	bl	35eec <__assert_fail@plt+0x24024>
   33400:	ldr	r3, [sp, #24]
   33404:	ldr	ip, [sp, #28]
   33408:	subs	r0, r0, r6
   3340c:	mov	r2, #1
   33410:	sbcs	r0, r1, r9
   33414:	blt	33428 <__assert_fail@plt+0x21560>
   33418:	umull	r4, r0, r6, r3
   3341c:	mov	r2, #0
   33420:	mla	r0, r6, ip, r0
   33424:	mla	r7, r9, r3, r0
   33428:	ldr	r9, [sp, #12]
   3342c:	orr	r3, r2, r8
   33430:	mov	r6, r4
   33434:	b	33624 <__assert_fail@plt+0x2175c>
   33438:	mov	r0, #0
   3343c:	mov	r1, #-2147483648	; 0x80000000
   33440:	mov	r2, r6
   33444:	mov	r3, r9
   33448:	bl	35e18 <__assert_fail@plt+0x23f50>
   3344c:	ldr	r3, [sp, #24]
   33450:	ldr	ip, [sp, #28]
   33454:	mov	r2, #1
   33458:	mov	r4, #0
   3345c:	mov	r7, #-2147483648	; 0x80000000
   33460:	subs	r0, r0, r3
   33464:	sbcs	r0, r1, ip
   33468:	bge	33418 <__assert_fail@plt+0x21550>
   3346c:	b	33428 <__assert_fail@plt+0x21560>
   33470:	ldr	r6, [sp, #8]
   33474:	mov	r0, #0
   33478:	mov	r1, #-2147483648	; 0x80000000
   3347c:	mov	r3, r8
   33480:	str	r4, [sp, #4]
   33484:	mov	r2, r6
   33488:	bl	35e18 <__assert_fail@plt+0x23f50>
   3348c:	ldr	r2, [sp, #24]
   33490:	ldr	r3, [sp, #28]
   33494:	mov	r7, #1
   33498:	mov	r9, #0
   3349c:	mov	r4, #-2147483648	; 0x80000000
   334a0:	subs	r0, r0, r2
   334a4:	sbcs	r0, r1, r3
   334a8:	blt	33500 <__assert_fail@plt+0x21638>
   334ac:	umull	r9, r0, r6, r2
   334b0:	ldr	r7, [sp, #4]
   334b4:	mla	r0, r6, r3, r0
   334b8:	mla	r4, r8, r2, r0
   334bc:	cmp	r4, #0
   334c0:	bmi	33500 <__assert_fail@plt+0x21638>
   334c4:	ldr	r3, [sp, #28]
   334c8:	mvn	r0, #0
   334cc:	mvn	r1, #-2147483648	; 0x80000000
   334d0:	str	r7, [sp, #4]
   334d4:	mvn	r8, #0
   334d8:	mvn	r7, #-2147483648	; 0x80000000
   334dc:	bl	35eec <__assert_fail@plt+0x24024>
   334e0:	ldr	r2, [sp, #24]
   334e4:	ldr	r3, [sp, #28]
   334e8:	subs	r0, r0, r9
   334ec:	mov	r6, #1
   334f0:	sbcs	r0, r1, r4
   334f4:	str	r6, [sp, #8]
   334f8:	bge	3353c <__assert_fail@plt+0x21674>
   334fc:	b	33558 <__assert_fail@plt+0x21690>
   33500:	mov	r0, #0
   33504:	mov	r1, #-2147483648	; 0x80000000
   33508:	mov	r2, r9
   3350c:	mov	r3, r4
   33510:	str	r7, [sp, #4]
   33514:	bl	35e18 <__assert_fail@plt+0x23f50>
   33518:	ldr	r2, [sp, #24]
   3351c:	ldr	r3, [sp, #28]
   33520:	mov	r7, #1
   33524:	mov	r8, #0
   33528:	str	r7, [sp, #8]
   3352c:	mov	r7, #-2147483648	; 0x80000000
   33530:	subs	r0, r0, r2
   33534:	sbcs	r0, r1, r3
   33538:	blt	3358c <__assert_fail@plt+0x216c4>
   3353c:	umull	r8, r0, r9, r2
   33540:	mla	r0, r9, r3, r0
   33544:	mla	r7, r4, r2, r0
   33548:	ldr	r0, [sp, #4]
   3354c:	cmp	r7, #0
   33550:	str	r0, [sp, #8]
   33554:	bmi	3358c <__assert_fail@plt+0x216c4>
   33558:	ldr	r3, [sp, #28]
   3355c:	mvn	r0, #0
   33560:	mvn	r1, #-2147483648	; 0x80000000
   33564:	mvn	r4, #0
   33568:	mvn	r9, #-2147483648	; 0x80000000
   3356c:	bl	35eec <__assert_fail@plt+0x24024>
   33570:	ldr	r2, [sp, #24]
   33574:	ldr	r3, [sp, #28]
   33578:	subs	r0, r0, r8
   3357c:	sbcs	r0, r1, r7
   33580:	bge	335c4 <__assert_fail@plt+0x216fc>
   33584:	mov	r8, #1
   33588:	b	335dc <__assert_fail@plt+0x21714>
   3358c:	mov	r0, #0
   33590:	mov	r1, #-2147483648	; 0x80000000
   33594:	mov	r2, r8
   33598:	mov	r3, r7
   3359c:	bl	35e18 <__assert_fail@plt+0x23f50>
   335a0:	ldr	r2, [sp, #24]
   335a4:	ldr	r3, [sp, #28]
   335a8:	subs	r0, r0, r2
   335ac:	sbcs	r0, r1, r3
   335b0:	bge	335c4 <__assert_fail@plt+0x216fc>
   335b4:	mov	r8, #1
   335b8:	mov	r4, #0
   335bc:	mov	r9, #-2147483648	; 0x80000000
   335c0:	b	33654 <__assert_fail@plt+0x2178c>
   335c4:	umull	r4, r0, r8, r2
   335c8:	mla	r0, r8, r3, r0
   335cc:	ldr	r8, [sp, #8]
   335d0:	mla	r9, r7, r2, r0
   335d4:	cmp	r9, #0
   335d8:	bmi	33654 <__assert_fail@plt+0x2178c>
   335dc:	ldr	r3, [sp, #28]
   335e0:	mvn	r0, #0
   335e4:	mvn	r1, #-2147483648	; 0x80000000
   335e8:	mvn	r6, #0
   335ec:	mvn	r7, #-2147483648	; 0x80000000
   335f0:	bl	35eec <__assert_fail@plt+0x24024>
   335f4:	ldr	r3, [sp, #24]
   335f8:	ldr	ip, [sp, #28]
   335fc:	subs	r0, r0, r4
   33600:	mov	r2, #1
   33604:	sbcs	r0, r1, r9
   33608:	blt	3361c <__assert_fail@plt+0x21754>
   3360c:	umull	r6, r0, r4, r3
   33610:	mov	r2, #0
   33614:	mla	r0, r4, ip, r0
   33618:	mla	r7, r9, r3, r0
   3361c:	ldr	r9, [sp, #12]
   33620:	orr	r3, r2, r8
   33624:	ldr	r1, [sp, #20]
   33628:	ldr	r2, [sp, #16]
   3362c:	orr	r5, r3, r5
   33630:	add	r0, r1, r2
   33634:	str	r0, [sl]
   33638:	ldrb	r0, [r1, r2]
   3363c:	cmp	r0, #0
   33640:	orrne	r5, r5, #2
   33644:	strd	r6, [r9]
   33648:	mov	r0, r5
   3364c:	sub	sp, fp, #28
   33650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33654:	mov	r0, #0
   33658:	mov	r1, #-2147483648	; 0x80000000
   3365c:	mov	r2, r4
   33660:	mov	r3, r9
   33664:	bl	35e18 <__assert_fail@plt+0x23f50>
   33668:	ldr	r3, [sp, #24]
   3366c:	ldr	ip, [sp, #28]
   33670:	mov	r2, #1
   33674:	mov	r6, #0
   33678:	mov	r7, #-2147483648	; 0x80000000
   3367c:	subs	r0, r0, r3
   33680:	sbcs	r0, r1, ip
   33684:	bge	3360c <__assert_fail@plt+0x21744>
   33688:	b	3361c <__assert_fail@plt+0x21754>
   3368c:	ldr	r6, [sp, #8]
   33690:	mov	r0, #0
   33694:	mov	r1, #-2147483648	; 0x80000000
   33698:	mov	r3, r9
   3369c:	str	r4, [sp]
   336a0:	mov	r2, r6
   336a4:	bl	35e18 <__assert_fail@plt+0x23f50>
   336a8:	ldr	r2, [sp, #24]
   336ac:	ldr	r3, [sp, #28]
   336b0:	mov	r7, #1
   336b4:	mov	r8, #-2147483648	; 0x80000000
   336b8:	subs	r0, r0, r2
   336bc:	sbcs	r0, r1, r3
   336c0:	mov	r0, #0
   336c4:	str	r0, [sp, #4]
   336c8:	blt	33728 <__assert_fail@plt+0x21860>
   336cc:	umull	r1, r0, r6, r2
   336d0:	ldr	r7, [sp]
   336d4:	mla	r0, r6, r3, r0
   336d8:	mla	r8, r9, r2, r0
   336dc:	str	r1, [sp, #4]
   336e0:	cmp	r8, #0
   336e4:	bmi	33728 <__assert_fail@plt+0x21860>
   336e8:	ldr	r3, [sp, #28]
   336ec:	mvn	r0, #0
   336f0:	mvn	r1, #-2147483648	; 0x80000000
   336f4:	str	r7, [sp]
   336f8:	mvn	r7, #0
   336fc:	mvn	r4, #-2147483648	; 0x80000000
   33700:	bl	35eec <__assert_fail@plt+0x24024>
   33704:	mov	r6, #1
   33708:	ldr	r2, [sp, #24]
   3370c:	ldr	r3, [sp, #28]
   33710:	str	r6, [sp, #8]
   33714:	ldr	r6, [sp, #4]
   33718:	subs	r0, r0, r6
   3371c:	sbcs	r0, r1, r8
   33720:	bge	33768 <__assert_fail@plt+0x218a0>
   33724:	b	33784 <__assert_fail@plt+0x218bc>
   33728:	ldr	r6, [sp, #4]
   3372c:	mov	r0, #0
   33730:	mov	r1, #-2147483648	; 0x80000000
   33734:	mov	r3, r8
   33738:	str	r7, [sp]
   3373c:	mov	r2, r6
   33740:	bl	35e18 <__assert_fail@plt+0x23f50>
   33744:	ldr	r2, [sp, #24]
   33748:	ldr	r3, [sp, #28]
   3374c:	mov	r7, #1
   33750:	mov	r4, #-2147483648	; 0x80000000
   33754:	str	r7, [sp, #8]
   33758:	mov	r7, #0
   3375c:	subs	r0, r0, r2
   33760:	sbcs	r0, r1, r3
   33764:	blt	337bc <__assert_fail@plt+0x218f4>
   33768:	umull	r7, r0, r6, r2
   3376c:	mla	r0, r6, r3, r0
   33770:	mla	r4, r8, r2, r0
   33774:	ldr	r0, [sp]
   33778:	cmp	r4, #0
   3377c:	str	r0, [sp, #8]
   33780:	bmi	337bc <__assert_fail@plt+0x218f4>
   33784:	ldr	r3, [sp, #28]
   33788:	mvn	r0, #0
   3378c:	mvn	r1, #-2147483648	; 0x80000000
   33790:	mvn	r9, #0
   33794:	mvn	r8, #-2147483648	; 0x80000000
   33798:	bl	35eec <__assert_fail@plt+0x24024>
   3379c:	ldr	r2, [sp, #24]
   337a0:	ldr	r3, [sp, #28]
   337a4:	subs	r0, r0, r7
   337a8:	sbcs	r0, r1, r4
   337ac:	bge	337f8 <__assert_fail@plt+0x21930>
   337b0:	mov	r0, #1
   337b4:	str	r0, [sp, #8]
   337b8:	b	3380c <__assert_fail@plt+0x21944>
   337bc:	mov	r0, #0
   337c0:	mov	r1, #-2147483648	; 0x80000000
   337c4:	mov	r2, r7
   337c8:	mov	r3, r4
   337cc:	bl	35e18 <__assert_fail@plt+0x23f50>
   337d0:	ldr	r2, [sp, #24]
   337d4:	ldr	r3, [sp, #28]
   337d8:	subs	r0, r0, r2
   337dc:	sbcs	r0, r1, r3
   337e0:	bge	337f8 <__assert_fail@plt+0x21930>
   337e4:	mov	r0, #1
   337e8:	mov	r9, #0
   337ec:	mov	r8, #-2147483648	; 0x80000000
   337f0:	str	r0, [sp, #8]
   337f4:	b	33844 <__assert_fail@plt+0x2197c>
   337f8:	umull	r9, r0, r7, r2
   337fc:	mla	r0, r7, r3, r0
   33800:	mla	r8, r4, r2, r0
   33804:	cmp	r8, #0
   33808:	bmi	33844 <__assert_fail@plt+0x2197c>
   3380c:	ldr	r3, [sp, #28]
   33810:	mvn	r0, #0
   33814:	mvn	r1, #-2147483648	; 0x80000000
   33818:	mvn	r4, #0
   3381c:	mvn	r7, #-2147483648	; 0x80000000
   33820:	bl	35eec <__assert_fail@plt+0x24024>
   33824:	ldr	r2, [sp, #24]
   33828:	ldr	r3, [sp, #28]
   3382c:	subs	r0, r0, r9
   33830:	sbcs	r0, r1, r8
   33834:	bge	33880 <__assert_fail@plt+0x219b8>
   33838:	mov	r0, #1
   3383c:	str	r0, [sp, #8]
   33840:	b	33894 <__assert_fail@plt+0x219cc>
   33844:	mov	r0, #0
   33848:	mov	r1, #-2147483648	; 0x80000000
   3384c:	mov	r2, r9
   33850:	mov	r3, r8
   33854:	bl	35e18 <__assert_fail@plt+0x23f50>
   33858:	ldr	r2, [sp, #24]
   3385c:	ldr	r3, [sp, #28]
   33860:	subs	r0, r0, r2
   33864:	sbcs	r0, r1, r3
   33868:	bge	33880 <__assert_fail@plt+0x219b8>
   3386c:	mov	r0, #1
   33870:	mov	r4, #0
   33874:	mov	r7, #-2147483648	; 0x80000000
   33878:	str	r0, [sp, #8]
   3387c:	b	338cc <__assert_fail@plt+0x21a04>
   33880:	umull	r4, r0, r9, r2
   33884:	mla	r0, r9, r3, r0
   33888:	mla	r7, r8, r2, r0
   3388c:	cmp	r7, #0
   33890:	bmi	338cc <__assert_fail@plt+0x21a04>
   33894:	ldr	r3, [sp, #28]
   33898:	mvn	r0, #0
   3389c:	mvn	r1, #-2147483648	; 0x80000000
   338a0:	mvn	r8, #0
   338a4:	mvn	r9, #-2147483648	; 0x80000000
   338a8:	bl	35eec <__assert_fail@plt+0x24024>
   338ac:	ldr	r2, [sp, #24]
   338b0:	ldr	r3, [sp, #28]
   338b4:	subs	r0, r0, r4
   338b8:	sbcs	r0, r1, r7
   338bc:	bge	33908 <__assert_fail@plt+0x21a40>
   338c0:	mov	r0, #1
   338c4:	str	r0, [sp, #8]
   338c8:	b	3391c <__assert_fail@plt+0x21a54>
   338cc:	mov	r0, #0
   338d0:	mov	r1, #-2147483648	; 0x80000000
   338d4:	mov	r2, r4
   338d8:	mov	r3, r7
   338dc:	bl	35e18 <__assert_fail@plt+0x23f50>
   338e0:	ldr	r2, [sp, #24]
   338e4:	ldr	r3, [sp, #28]
   338e8:	subs	r0, r0, r2
   338ec:	sbcs	r0, r1, r3
   338f0:	bge	33908 <__assert_fail@plt+0x21a40>
   338f4:	mov	r0, #1
   338f8:	mov	r8, #0
   338fc:	mov	r9, #-2147483648	; 0x80000000
   33900:	str	r0, [sp, #8]
   33904:	b	33958 <__assert_fail@plt+0x21a90>
   33908:	umull	r8, r0, r4, r2
   3390c:	mla	r0, r4, r3, r0
   33910:	mla	r9, r7, r2, r0
   33914:	cmp	r9, #0
   33918:	bmi	33958 <__assert_fail@plt+0x21a90>
   3391c:	ldr	r3, [sp, #28]
   33920:	mvn	r0, #0
   33924:	mvn	r1, #-2147483648	; 0x80000000
   33928:	mvn	r4, #0
   3392c:	mvn	r6, #-2147483648	; 0x80000000
   33930:	bl	35eec <__assert_fail@plt+0x24024>
   33934:	ldr	r2, [sp, #24]
   33938:	ldr	r3, [sp, #28]
   3393c:	subs	r0, r0, r8
   33940:	sbcs	r0, r1, r9
   33944:	bge	33998 <__assert_fail@plt+0x21ad0>
   33948:	ldr	r9, [sp, #12]
   3394c:	mov	r0, #1
   33950:	str	r0, [sp, #8]
   33954:	b	339b0 <__assert_fail@plt+0x21ae8>
   33958:	mov	r0, #0
   3395c:	mov	r1, #-2147483648	; 0x80000000
   33960:	mov	r2, r8
   33964:	mov	r3, r9
   33968:	bl	35e18 <__assert_fail@plt+0x23f50>
   3396c:	ldr	r2, [sp, #24]
   33970:	ldr	r3, [sp, #28]
   33974:	subs	r0, r0, r2
   33978:	sbcs	r0, r1, r3
   3397c:	bge	33998 <__assert_fail@plt+0x21ad0>
   33980:	ldr	r9, [sp, #12]
   33984:	mov	r0, #1
   33988:	mov	r4, #0
   3398c:	mov	r6, #-2147483648	; 0x80000000
   33990:	str	r0, [sp, #8]
   33994:	b	339fc <__assert_fail@plt+0x21b34>
   33998:	umull	r4, r0, r8, r2
   3399c:	mla	r0, r8, r3, r0
   339a0:	mla	r6, r9, r2, r0
   339a4:	ldr	r9, [sp, #12]
   339a8:	cmp	r6, #0
   339ac:	bmi	339fc <__assert_fail@plt+0x21b34>
   339b0:	ldr	r3, [sp, #28]
   339b4:	mvn	r0, #0
   339b8:	mvn	r1, #-2147483648	; 0x80000000
   339bc:	mov	r8, r6
   339c0:	mvn	r6, #0
   339c4:	mvn	r7, #-2147483648	; 0x80000000
   339c8:	bl	35eec <__assert_fail@plt+0x24024>
   339cc:	ldr	r3, [sp, #24]
   339d0:	ldr	ip, [sp, #28]
   339d4:	subs	r0, r0, r4
   339d8:	mov	r2, #1
   339dc:	sbcs	r0, r1, r8
   339e0:	blt	339f4 <__assert_fail@plt+0x21b2c>
   339e4:	umull	r6, r0, r4, r3
   339e8:	mov	r2, #0
   339ec:	mla	r0, r4, ip, r0
   339f0:	mla	r7, r8, r3, r0
   339f4:	ldr	r0, [sp, #8]
   339f8:	b	32b40 <__assert_fail@plt+0x20c78>
   339fc:	mov	r0, #0
   33a00:	mov	r1, #-2147483648	; 0x80000000
   33a04:	mov	r2, r4
   33a08:	mov	r3, r6
   33a0c:	bl	35e18 <__assert_fail@plt+0x23f50>
   33a10:	ldr	r3, [sp, #24]
   33a14:	ldr	ip, [sp, #28]
   33a18:	mov	r8, r6
   33a1c:	mov	r2, #1
   33a20:	mov	r6, #0
   33a24:	mov	r7, #-2147483648	; 0x80000000
   33a28:	subs	r0, r0, r3
   33a2c:	sbcs	r0, r1, ip
   33a30:	bge	339e4 <__assert_fail@plt+0x21b1c>
   33a34:	b	339f4 <__assert_fail@plt+0x21b2c>
   33a38:	movw	r0, #33355	; 0x824b
   33a3c:	movw	r1, #33393	; 0x8271
   33a40:	movw	r3, #33409	; 0x8281
   33a44:	mov	r2, #85	; 0x55
   33a48:	movt	r0, #3
   33a4c:	movt	r1, #3
   33a50:	movt	r3, #3
   33a54:	bl	11ec8 <__assert_fail@plt>
   33a58:	push	{fp, lr}
   33a5c:	mov	fp, sp
   33a60:	sub	sp, sp, #8
   33a64:	movw	ip, #37332	; 0x91d4
   33a68:	movt	ip, #4
   33a6c:	ldr	ip, [ip]
   33a70:	str	ip, [sp, #4]
   33a74:	ldr	ip, [fp, #8]
   33a78:	str	ip, [sp]
   33a7c:	bl	33a84 <__assert_fail@plt+0x21bbc>
   33a80:	bl	11e8c <abort@plt>
   33a84:	push	{r4, r5, r6, r7, fp, lr}
   33a88:	add	fp, sp, #16
   33a8c:	sub	sp, sp, #16
   33a90:	sub	r0, r0, #1
   33a94:	cmp	r0, #4
   33a98:	bcs	33b18 <__assert_fail@plt+0x21c50>
   33a9c:	mov	r5, r1
   33aa0:	movw	r1, #33584	; 0x8330
   33aa4:	ldr	r4, [fp, #12]
   33aa8:	ldr	r6, [fp, #8]
   33aac:	movt	r1, #3
   33ab0:	cmn	r5, #1
   33ab4:	ldr	r1, [r1, r0, lsl #2]
   33ab8:	ble	33acc <__assert_fail@plt+0x21c04>
   33abc:	ldr	r7, [r3, r5, lsl #4]
   33ac0:	movw	r5, #33487	; 0x82cf
   33ac4:	movt	r5, #3
   33ac8:	b	33ae8 <__assert_fail@plt+0x21c20>
   33acc:	mov	r0, #0
   33ad0:	add	r7, sp, #14
   33ad4:	strb	r0, [sp, #15]
   33ad8:	movw	r0, #33487	; 0x82cf
   33adc:	strb	r2, [sp, #14]
   33ae0:	movt	r0, #3
   33ae4:	sub	r5, r0, r5
   33ae8:	mov	r0, #0
   33aec:	mov	r2, #5
   33af0:	bl	11afc <dcgettext@plt>
   33af4:	mov	r2, r0
   33af8:	mov	r0, r4
   33afc:	mov	r1, #0
   33b00:	mov	r3, r5
   33b04:	str	r7, [sp]
   33b08:	str	r6, [sp, #4]
   33b0c:	bl	11bd4 <error@plt>
   33b10:	sub	sp, fp, #16
   33b14:	pop	{r4, r5, r6, r7, fp, pc}
   33b18:	bl	11e8c <abort@plt>
   33b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b20:	add	fp, sp, #28
   33b24:	sub	sp, sp, #44	; 0x2c
   33b28:	cmp	r2, #37	; 0x25
   33b2c:	bcs	3479c <__assert_fail@plt+0x228d4>
   33b30:	ldr	sl, [fp, #8]
   33b34:	mov	r6, r2
   33b38:	mov	r7, r1
   33b3c:	mov	r4, r0
   33b40:	str	r3, [sp, #36]	; 0x24
   33b44:	bl	11cdc <__errno_location@plt>
   33b48:	mov	r5, r0
   33b4c:	mov	r0, #0
   33b50:	str	r0, [r5]
   33b54:	bl	11c7c <__ctype_b_loc@plt>
   33b58:	ldr	r1, [r0]
   33b5c:	mov	r2, r4
   33b60:	ldrb	r0, [r2], #1
   33b64:	add	r3, r1, r0, lsl #1
   33b68:	ldrb	r3, [r3, #1]
   33b6c:	tst	r3, #32
   33b70:	bne	33b60 <__assert_fail@plt+0x21c98>
   33b74:	cmp	r7, #0
   33b78:	sub	r9, fp, #32
   33b7c:	mov	r8, #4
   33b80:	movne	r9, r7
   33b84:	cmp	r0, #45	; 0x2d
   33b88:	beq	34790 <__assert_fail@plt+0x228c8>
   33b8c:	mov	r0, r4
   33b90:	mov	r1, r9
   33b94:	mov	r2, r6
   33b98:	mov	r3, #0
   33b9c:	bl	11acc <__strtoull_internal@plt>
   33ba0:	mov	r7, r1
   33ba4:	ldr	r1, [r9]
   33ba8:	cmp	r1, r4
   33bac:	beq	33bd8 <__assert_fail@plt+0x21d10>
   33bb0:	mov	r6, r0
   33bb4:	ldr	r0, [r5]
   33bb8:	cmp	r0, #0
   33bbc:	beq	33c14 <__assert_fail@plt+0x21d4c>
   33bc0:	cmp	r0, #34	; 0x22
   33bc4:	bne	34790 <__assert_fail@plt+0x228c8>
   33bc8:	mov	r8, #1
   33bcc:	cmp	sl, #0
   33bd0:	bne	33c20 <__assert_fail@plt+0x21d58>
   33bd4:	b	34788 <__assert_fail@plt+0x228c0>
   33bd8:	cmp	sl, #0
   33bdc:	beq	34790 <__assert_fail@plt+0x228c8>
   33be0:	mov	r5, r1
   33be4:	ldrb	r1, [r4]
   33be8:	cmp	r1, #0
   33bec:	beq	34790 <__assert_fail@plt+0x228c8>
   33bf0:	mov	r0, sl
   33bf4:	bl	11cb8 <strchr@plt>
   33bf8:	cmp	r0, #0
   33bfc:	beq	34790 <__assert_fail@plt+0x228c8>
   33c00:	mov	r1, r5
   33c04:	mov	r8, #0
   33c08:	mov	r6, #1
   33c0c:	mov	r7, #0
   33c10:	b	33c20 <__assert_fail@plt+0x21d58>
   33c14:	mov	r8, r0
   33c18:	cmp	sl, #0
   33c1c:	beq	34788 <__assert_fail@plt+0x228c0>
   33c20:	ldrb	r4, [r1]
   33c24:	cmp	r4, #0
   33c28:	beq	34788 <__assert_fail@plt+0x228c0>
   33c2c:	str	r1, [sp, #32]
   33c30:	mov	r0, sl
   33c34:	mov	r1, r4
   33c38:	bl	11cb8 <strchr@plt>
   33c3c:	cmp	r0, #0
   33c40:	beq	33f08 <__assert_fail@plt+0x22040>
   33c44:	sub	r0, r4, #69	; 0x45
   33c48:	mov	r1, #1
   33c4c:	mov	r3, #0
   33c50:	mov	r5, #1024	; 0x400
   33c54:	cmp	r0, #47	; 0x2f
   33c58:	str	r1, [sp, #28]
   33c5c:	bhi	33d60 <__assert_fail@plt+0x21e98>
   33c60:	add	r1, pc, #0
   33c64:	ldr	pc, [r1, r0, lsl #2]
   33c68:	andeq	r3, r3, r8, lsr #26
   33c6c:	andeq	r3, r3, r0, ror #26
   33c70:	andeq	r3, r3, r8, lsr #26
   33c74:	andeq	r3, r3, r0, ror #26
   33c78:	andeq	r3, r3, r0, ror #26
   33c7c:	andeq	r3, r3, r0, ror #26
   33c80:	andeq	r3, r3, r8, lsr #26
   33c84:	andeq	r3, r3, r0, ror #26
   33c88:	andeq	r3, r3, r8, lsr #26
   33c8c:	andeq	r3, r3, r0, ror #26
   33c90:	andeq	r3, r3, r0, ror #26
   33c94:	andeq	r3, r3, r8, lsr #26
   33c98:	andeq	r3, r3, r0, ror #26
   33c9c:	andeq	r3, r3, r0, ror #26
   33ca0:	andeq	r3, r3, r0, ror #26
   33ca4:	andeq	r3, r3, r8, lsr #26
   33ca8:	andeq	r3, r3, r0, ror #26
   33cac:	andeq	r3, r3, r0, ror #26
   33cb0:	andeq	r3, r3, r0, ror #26
   33cb4:	andeq	r3, r3, r0, ror #26
   33cb8:	andeq	r3, r3, r8, lsr #26
   33cbc:	andeq	r3, r3, r8, lsr #26
   33cc0:	andeq	r3, r3, r0, ror #26
   33cc4:	andeq	r3, r3, r0, ror #26
   33cc8:	andeq	r3, r3, r0, ror #26
   33ccc:	andeq	r3, r3, r0, ror #26
   33cd0:	andeq	r3, r3, r0, ror #26
   33cd4:	andeq	r3, r3, r0, ror #26
   33cd8:	andeq	r3, r3, r0, ror #26
   33cdc:	andeq	r3, r3, r0, ror #26
   33ce0:	andeq	r3, r3, r0, ror #26
   33ce4:	andeq	r3, r3, r0, ror #26
   33ce8:	andeq	r3, r3, r0, ror #26
   33cec:	andeq	r3, r3, r0, ror #26
   33cf0:	andeq	r3, r3, r8, lsr #26
   33cf4:	andeq	r3, r3, r0, ror #26
   33cf8:	andeq	r3, r3, r0, ror #26
   33cfc:	andeq	r3, r3, r0, ror #26
   33d00:	andeq	r3, r3, r8, lsr #26
   33d04:	andeq	r3, r3, r0, ror #26
   33d08:	andeq	r3, r3, r8, lsr #26
   33d0c:	andeq	r3, r3, r0, ror #26
   33d10:	andeq	r3, r3, r0, ror #26
   33d14:	andeq	r3, r3, r0, ror #26
   33d18:	andeq	r3, r3, r0, ror #26
   33d1c:	andeq	r3, r3, r0, ror #26
   33d20:	andeq	r3, r3, r0, ror #26
   33d24:	andeq	r3, r3, r8, lsr #26
   33d28:	mov	r0, sl
   33d2c:	mov	r1, #48	; 0x30
   33d30:	bl	11cb8 <strchr@plt>
   33d34:	cmp	r0, #0
   33d38:	beq	33d5c <__assert_fail@plt+0x21e94>
   33d3c:	ldr	r1, [sp, #32]
   33d40:	ldrb	r0, [r1, #1]
   33d44:	cmp	r0, #66	; 0x42
   33d48:	cmpne	r0, #68	; 0x44
   33d4c:	bne	33f14 <__assert_fail@plt+0x2204c>
   33d50:	mov	r5, #1000	; 0x3e8
   33d54:	mov	r0, #2
   33d58:	str	r0, [sp, #28]
   33d5c:	mov	r3, #0
   33d60:	sub	r0, r4, #66	; 0x42
   33d64:	cmp	r0, #53	; 0x35
   33d68:	bhi	33f08 <__assert_fail@plt+0x22040>
   33d6c:	add	r1, pc, #0
   33d70:	ldr	pc, [r1, r0, lsl #2]
   33d74:	muleq	r3, r0, r2
   33d78:	andeq	r3, r3, r8, lsl #30
   33d7c:	andeq	r3, r3, r8, lsl #30
   33d80:			; <UNDEFINED> instruction: 0x000342b8
   33d84:	andeq	r3, r3, r8, lsl #30
   33d88:	andeq	r3, r3, ip, asr #28
   33d8c:	andeq	r3, r3, r8, lsl #30
   33d90:	andeq	r3, r3, r8, lsl #30
   33d94:	andeq	r3, r3, r8, lsl #30
   33d98:	andeq	r3, r3, r8, lsr pc
   33d9c:	andeq	r3, r3, r8, lsl #30
   33da0:	andeq	r3, r3, r0, lsl #31
   33da4:	andeq	r3, r3, r8, lsl #30
   33da8:	andeq	r3, r3, r8, lsl #30
   33dac:	andeq	r4, r3, r0, lsl r4
   33db0:	andeq	r3, r3, r8, lsl #30
   33db4:	andeq	r3, r3, r8, lsl #30
   33db8:	andeq	r3, r3, r8, lsl #30
   33dbc:	andeq	r4, r3, ip
   33dc0:	andeq	r3, r3, r8, lsl #30
   33dc4:	andeq	r3, r3, r8, lsl #30
   33dc8:	andeq	r3, r3, r8, lsl #30
   33dcc:	andeq	r3, r3, r8, lsl #30
   33dd0:	andeq	r4, r3, r8, lsr r5
   33dd4:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   33dd8:	andeq	r3, r3, r8, lsl #30
   33ddc:	andeq	r3, r3, r8, lsl #30
   33de0:	andeq	r3, r3, r8, lsl #30
   33de4:	andeq	r3, r3, r8, lsl #30
   33de8:	andeq	r3, r3, r8, lsl #30
   33dec:	andeq	r3, r3, r8, lsl #30
   33df0:	andeq	r3, r3, r8, lsl #30
   33df4:	andeq	r4, r3, r0, lsl r7
   33df8:	andeq	r4, r3, r8, ror #14
   33dfc:	andeq	r3, r3, r8, lsl #30
   33e00:	andeq	r3, r3, r8, lsl #30
   33e04:	andeq	r3, r3, r8, lsl #30
   33e08:	andeq	r3, r3, ip, asr #28
   33e0c:	andeq	r3, r3, r8, lsl #30
   33e10:	andeq	r3, r3, r8, lsl #30
   33e14:	andeq	r3, r3, r8, lsl #30
   33e18:	andeq	r3, r3, r8, lsr pc
   33e1c:	andeq	r3, r3, r8, lsl #30
   33e20:	andeq	r3, r3, r0, lsl #31
   33e24:	andeq	r3, r3, r8, lsl #30
   33e28:	andeq	r3, r3, r8, lsl #30
   33e2c:	andeq	r3, r3, r8, lsl #30
   33e30:	andeq	r3, r3, r8, lsl #30
   33e34:	andeq	r3, r3, r8, lsl #30
   33e38:	andeq	r3, r3, r8, lsl #30
   33e3c:	andeq	r4, r3, ip
   33e40:	andeq	r3, r3, r8, lsl #30
   33e44:	andeq	r3, r3, r8, lsl #30
   33e48:	andeq	r4, r3, r4, asr #14
   33e4c:	mvn	r0, #0
   33e50:	mvn	r1, #0
   33e54:	mov	r2, r5
   33e58:	mov	sl, r3
   33e5c:	bl	35eec <__assert_fail@plt+0x24024>
   33e60:	subs	r3, r0, r6
   33e64:	umull	r4, r2, r6, r5
   33e68:	mov	lr, #0
   33e6c:	str	r1, [sp, #20]
   33e70:	sbcs	r3, r1, r7
   33e74:	movwcc	lr, #1
   33e78:	mla	ip, r6, sl, r2
   33e7c:	mov	r2, r1
   33e80:	mov	r2, #0
   33e84:	cmp	lr, #0
   33e88:	mla	r7, r7, r5, ip
   33e8c:	mvnne	r4, #0
   33e90:	mvnne	r7, #0
   33e94:	subs	r6, r0, r4
   33e98:	sbcs	r6, r1, r7
   33e9c:	umull	r3, r6, r4, r5
   33ea0:	movwcc	r2, #1
   33ea4:	cmp	r2, #0
   33ea8:	mvnne	r3, #0
   33eac:	cmp	r2, #0
   33eb0:	str	r6, [sp, #16]
   33eb4:	umull	r6, ip, r3, r5
   33eb8:	mla	r1, r3, sl, ip
   33ebc:	ldr	ip, [sp, #16]
   33ec0:	str	r1, [sp, #12]
   33ec4:	mla	r4, r4, sl, ip
   33ec8:	mla	r4, r7, r5, r4
   33ecc:	mvnne	r4, #0
   33ed0:	subs	r0, r0, r3
   33ed4:	ldr	r0, [sp, #20]
   33ed8:	ldr	r7, [sp, #12]
   33edc:	sbcs	r0, r0, r4
   33ee0:	mov	r0, #0
   33ee4:	mla	r7, r4, r5, r7
   33ee8:	movwcc	r0, #1
   33eec:	cmp	r0, #0
   33ef0:	mov	r1, r0
   33ef4:	orr	r0, lr, r2
   33ef8:	mvnne	r7, #0
   33efc:	mvnne	r6, #0
   33f00:	orr	r3, r0, r1
   33f04:	b	34768 <__assert_fail@plt+0x228a0>
   33f08:	ldr	r0, [sp, #36]	; 0x24
   33f0c:	orr	r8, r8, #2
   33f10:	b	3478c <__assert_fail@plt+0x228c4>
   33f14:	cmp	r0, #105	; 0x69
   33f18:	mov	r3, #0
   33f1c:	bne	33d60 <__assert_fail@plt+0x21e98>
   33f20:	ldrb	r0, [r1, #2]
   33f24:	mov	r1, #1
   33f28:	cmp	r0, #66	; 0x42
   33f2c:	movweq	r1, #3
   33f30:	str	r1, [sp, #28]
   33f34:	b	33d60 <__assert_fail@plt+0x21e98>
   33f38:	mvn	r0, #0
   33f3c:	mvn	r1, #0
   33f40:	mov	r2, r5
   33f44:	mov	r4, r3
   33f48:	bl	35eec <__assert_fail@plt+0x24024>
   33f4c:	subs	r0, r0, r6
   33f50:	mov	r2, #0
   33f54:	sbcs	r0, r1, r7
   33f58:	umull	r0, r1, r6, r5
   33f5c:	movwcc	r2, #1
   33f60:	cmp	r2, #0
   33f64:	mla	r1, r6, r4, r1
   33f68:	mov	r3, r2
   33f6c:	mvnne	r0, #0
   33f70:	mla	r7, r7, r5, r1
   33f74:	mvnne	r7, #0
   33f78:	mov	r6, r0
   33f7c:	b	34768 <__assert_fail@plt+0x228a0>
   33f80:	mvn	r0, #0
   33f84:	mvn	r1, #0
   33f88:	mov	r2, r5
   33f8c:	str	r3, [sp, #24]
   33f90:	bl	35eec <__assert_fail@plt+0x24024>
   33f94:	subs	r3, r0, r6
   33f98:	mov	ip, r0
   33f9c:	umull	r4, r0, r6, r5
   33fa0:	mov	sl, #0
   33fa4:	sbcs	r3, r1, r7
   33fa8:	mov	r3, #0
   33fac:	movwcc	r3, #1
   33fb0:	cmp	r3, #0
   33fb4:	str	r0, [sp, #20]
   33fb8:	ldr	r0, [sp, #24]
   33fbc:	mvnne	r4, #0
   33fc0:	cmp	r3, #0
   33fc4:	umull	lr, r2, r4, r5
   33fc8:	mla	r2, r4, r0, r2
   33fcc:	str	r2, [sp, #16]
   33fd0:	ldr	r2, [sp, #20]
   33fd4:	mla	r6, r6, r0, r2
   33fd8:	ldr	r0, [sp, #16]
   33fdc:	mla	r6, r7, r5, r6
   33fe0:	mvnne	r6, #0
   33fe4:	mla	r7, r6, r5, r0
   33fe8:	subs	r0, ip, r4
   33fec:	sbcs	r0, r1, r6
   33ff0:	movwcc	sl, #1
   33ff4:	cmp	sl, #0
   33ff8:	orr	r3, r3, sl
   33ffc:	mvnne	lr, #0
   34000:	mvnne	r7, #0
   34004:	mov	r6, lr
   34008:	b	34768 <__assert_fail@plt+0x228a0>
   3400c:	mvn	r0, #0
   34010:	mvn	r1, #0
   34014:	mov	r2, r5
   34018:	mov	sl, r3
   3401c:	bl	35eec <__assert_fail@plt+0x24024>
   34020:	subs	r3, r0, r6
   34024:	mov	ip, r1
   34028:	umull	r2, lr, r6, r5
   3402c:	str	r0, [sp, #20]
   34030:	sbcs	r3, r1, r7
   34034:	mov	r1, #0
   34038:	str	ip, [sp, #16]
   3403c:	movwcc	r1, #1
   34040:	mla	r6, r6, sl, lr
   34044:	mov	lr, #0
   34048:	cmp	r1, #0
   3404c:	mla	r7, r7, r5, r6
   34050:	mvnne	r2, #0
   34054:	cmp	r1, #0
   34058:	umull	r3, r4, r2, r5
   3405c:	mvnne	r7, #0
   34060:	mla	r4, r2, sl, r4
   34064:	subs	r2, r0, r2
   34068:	sbcs	r2, ip, r7
   3406c:	mla	r4, r7, r5, r4
   34070:	mov	r2, #0
   34074:	movwcc	lr, #1
   34078:	cmp	lr, #0
   3407c:	mvnne	r3, #0
   34080:	mvnne	r4, #0
   34084:	subs	r7, r0, r3
   34088:	mov	r0, r5
   3408c:	sbcs	r7, ip, r4
   34090:	umull	r5, r7, r3, r5
   34094:	movwcc	r2, #1
   34098:	cmp	r2, #0
   3409c:	mla	r3, r3, sl, r7
   340a0:	mvnne	r5, #0
   340a4:	cmp	r2, #0
   340a8:	mla	r3, r4, r0, r3
   340ac:	umull	r6, ip, r5, r0
   340b0:	mvnne	r3, #0
   340b4:	mla	ip, r5, sl, ip
   340b8:	mla	r7, r3, r0, ip
   340bc:	ldr	r0, [sp, #20]
   340c0:	subs	r0, r0, r5
   340c4:	ldr	r0, [sp, #16]
   340c8:	sbcs	r0, r0, r3
   340cc:	mov	r0, #0
   340d0:	movwcc	r0, #1
   340d4:	cmp	r0, #0
   340d8:	mov	r3, r0
   340dc:	orr	r0, r1, lr
   340e0:	orr	r0, r0, r2
   340e4:	mvnne	r7, #0
   340e8:	mvnne	r6, #0
   340ec:	orr	r3, r0, r3
   340f0:	b	34768 <__assert_fail@plt+0x228a0>
   340f4:	mvn	r0, #0
   340f8:	mvn	r1, #0
   340fc:	mov	r2, r5
   34100:	mov	r4, r3
   34104:	str	r3, [sp, #24]
   34108:	bl	35eec <__assert_fail@plt+0x24024>
   3410c:	umull	r3, r2, r6, r5
   34110:	mla	r2, r6, r4, r2
   34114:	subs	r6, r0, r6
   34118:	sbcs	r6, r1, r7
   3411c:	mov	r6, #0
   34120:	mla	ip, r7, r5, r2
   34124:	ldr	r2, [sp, #24]
   34128:	movwcc	r6, #1
   3412c:	cmp	r6, #0
   34130:	str	r6, [sp, #20]
   34134:	mov	r6, #0
   34138:	mvnne	r3, #0
   3413c:	mvnne	ip, #0
   34140:	subs	r4, r0, r3
   34144:	umull	r7, lr, r3, r5
   34148:	sbcs	r4, r1, ip
   3414c:	movwcc	r6, #1
   34150:	mla	r3, r3, r2, lr
   34154:	cmp	r6, #0
   34158:	str	r6, [sp, #16]
   3415c:	mvnne	r7, #0
   34160:	cmp	r6, #0
   34164:	umull	sl, r4, r7, r5
   34168:	mla	r4, r7, r2, r4
   3416c:	mla	r2, ip, r5, r3
   34170:	mvnne	r2, #0
   34174:	subs	r3, r0, r7
   34178:	mov	ip, #0
   3417c:	mla	r6, r2, r5, r4
   34180:	sbcs	r2, r1, r2
   34184:	mov	r4, r0
   34188:	mov	r0, #0
   3418c:	movwcc	r0, #1
   34190:	mov	r3, r4
   34194:	cmp	r0, #0
   34198:	str	r0, [sp, #12]
   3419c:	mov	r0, r1
   341a0:	str	r3, [sp, #4]
   341a4:	mvnne	sl, #0
   341a8:	mvnne	r6, #0
   341ac:	str	r0, [sp, #8]
   341b0:	subs	r2, r4, sl
   341b4:	ldr	r4, [sp, #24]
   341b8:	sbcs	r2, r1, r6
   341bc:	umull	r7, r2, sl, r5
   341c0:	movwcc	ip, #1
   341c4:	cmp	ip, #0
   341c8:	mvnne	r7, #0
   341cc:	mla	r2, sl, r4, r2
   341d0:	cmp	ip, #0
   341d4:	mov	sl, #0
   341d8:	umull	r1, lr, r7, r5
   341dc:	mla	r2, r6, r5, r2
   341e0:	mvnne	r2, #0
   341e4:	subs	r6, r3, r7
   341e8:	mla	lr, r7, r4, lr
   341ec:	mla	lr, r2, r5, lr
   341f0:	sbcs	r2, r0, r2
   341f4:	mov	r2, #0
   341f8:	movwcc	sl, #1
   341fc:	cmp	sl, #0
   34200:	mvnne	r1, #0
   34204:	mvnne	lr, #0
   34208:	subs	r6, r3, r1
   3420c:	ldr	r3, [sp, #24]
   34210:	sbcs	r6, r0, lr
   34214:	umull	r0, r7, r1, r5
   34218:	movwcc	r2, #1
   3421c:	cmp	r2, #0
   34220:	mvnne	r0, #0
   34224:	mla	r1, r1, r3, r7
   34228:	cmp	r2, #0
   3422c:	umull	r6, r4, r0, r5
   34230:	mla	r1, lr, r5, r1
   34234:	mvnne	r1, #0
   34238:	mla	r4, r0, r3, r4
   3423c:	ldr	r3, [sp, #4]
   34240:	mla	r7, r1, r5, r4
   34244:	ldr	r5, [sp, #16]
   34248:	subs	r0, r3, r0
   3424c:	ldr	r0, [sp, #8]
   34250:	sbcs	r0, r0, r1
   34254:	mov	r0, #0
   34258:	movwcc	r0, #1
   3425c:	cmp	r0, #0
   34260:	mov	r1, r0
   34264:	ldr	r0, [sp, #20]
   34268:	mvnne	r7, #0
   3426c:	mvnne	r6, #0
   34270:	orr	r0, r0, r5
   34274:	ldr	r5, [sp, #12]
   34278:	orr	r0, r0, r5
   3427c:	orr	r0, r0, ip
   34280:	orr	r0, r0, sl
   34284:	orr	r0, r0, r2
   34288:	orr	r0, r0, r1
   3428c:	b	34708 <__assert_fail@plt+0x22840>
   34290:	mov	r1, #0
   34294:	lsl	r2, r7, #10
   34298:	lsl	r0, r6, #10
   3429c:	lsr	r3, r7, #22
   342a0:	cmp	r1, r7, lsr #22
   342a4:	orr	r2, r2, r6, lsr #22
   342a8:	mvnne	r0, #0
   342ac:	movwne	r3, #1
   342b0:	cmp	r1, r7, lsr #22
   342b4:	b	34734 <__assert_fail@plt+0x2286c>
   342b8:	mvn	r0, #0
   342bc:	mvn	r1, #0
   342c0:	mov	r2, r5
   342c4:	mov	sl, r3
   342c8:	bl	35eec <__assert_fail@plt+0x24024>
   342cc:	subs	r2, r0, r6
   342d0:	mov	ip, r0
   342d4:	mov	r0, #0
   342d8:	sbcs	r2, r1, r7
   342dc:	umull	r4, r2, r6, r5
   342e0:	movwcc	r0, #1
   342e4:	cmp	r0, #0
   342e8:	mla	r2, r6, sl, r2
   342ec:	str	r0, [sp, #20]
   342f0:	mvnne	r4, #0
   342f4:	cmp	r0, #0
   342f8:	mla	r2, r7, r5, r2
   342fc:	mov	r0, #0
   34300:	umull	lr, r3, r4, r5
   34304:	mvnne	r2, #0
   34308:	mla	r3, r4, sl, r3
   3430c:	mla	r6, r2, r5, r3
   34310:	subs	r3, ip, r4
   34314:	mov	r3, r1
   34318:	sbcs	r2, r1, r2
   3431c:	str	r3, [sp, #8]
   34320:	movwcc	r0, #1
   34324:	cmp	r0, #0
   34328:	str	r0, [sp, #16]
   3432c:	mov	r0, ip
   34330:	mvnne	lr, #0
   34334:	mvnne	r6, #0
   34338:	str	r0, [sp, #12]
   3433c:	subs	r2, ip, lr
   34340:	umull	r7, r4, lr, r5
   34344:	sbcs	r2, r1, r6
   34348:	mov	r2, #0
   3434c:	movwcc	r2, #1
   34350:	mla	r4, lr, sl, r4
   34354:	cmp	r2, #0
   34358:	mla	r6, r6, r5, r4
   3435c:	mov	r4, #0
   34360:	mvnne	r7, #0
   34364:	cmp	r2, #0
   34368:	umull	r1, ip, r7, r5
   3436c:	mvnne	r6, #0
   34370:	mla	ip, r7, sl, ip
   34374:	subs	r7, r0, r7
   34378:	sbcs	r7, r3, r6
   3437c:	mla	lr, r6, r5, ip
   34380:	mov	ip, #0
   34384:	movwcc	ip, #1
   34388:	cmp	ip, #0
   3438c:	mvnne	r1, #0
   34390:	mvnne	lr, #0
   34394:	subs	r7, r0, r1
   34398:	sbcs	r7, r3, lr
   3439c:	umull	r0, r7, r1, r5
   343a0:	movwcc	r4, #1
   343a4:	cmp	r4, #0
   343a8:	mla	r1, r1, sl, r7
   343ac:	mvnne	r0, #0
   343b0:	cmp	r4, #0
   343b4:	mla	r1, lr, r5, r1
   343b8:	umull	r6, r3, r0, r5
   343bc:	mvnne	r1, #0
   343c0:	mla	r3, r0, sl, r3
   343c4:	mla	r7, r1, r5, r3
   343c8:	ldr	r3, [sp, #12]
   343cc:	subs	r0, r3, r0
   343d0:	ldr	r0, [sp, #8]
   343d4:	ldr	r3, [sp, #16]
   343d8:	sbcs	r0, r0, r1
   343dc:	mov	r0, #0
   343e0:	movwcc	r0, #1
   343e4:	cmp	r0, #0
   343e8:	mov	r1, r0
   343ec:	ldr	r0, [sp, #20]
   343f0:	mvnne	r7, #0
   343f4:	mvnne	r6, #0
   343f8:	orr	r0, r0, r3
   343fc:	orr	r0, r0, r2
   34400:	orr	r0, r0, ip
   34404:	orr	r0, r0, r4
   34408:	orr	r3, r0, r1
   3440c:	b	34768 <__assert_fail@plt+0x228a0>
   34410:	mvn	r0, #0
   34414:	mvn	r1, #0
   34418:	mov	r2, r5
   3441c:	mov	sl, r3
   34420:	bl	35eec <__assert_fail@plt+0x24024>
   34424:	umull	r3, r2, r6, r5
   34428:	mov	lr, r1
   3442c:	mov	r1, r0
   34430:	mla	r2, r6, sl, r2
   34434:	subs	r6, r0, r6
   34438:	mov	r0, #0
   3443c:	sbcs	r6, lr, r7
   34440:	mla	r2, r7, r5, r2
   34444:	movwcc	r0, #1
   34448:	cmp	r0, #0
   3444c:	str	r0, [sp, #20]
   34450:	mov	r0, r1
   34454:	mvnne	r3, #0
   34458:	mvnne	r2, #0
   3445c:	str	r0, [sp, #16]
   34460:	subs	r4, r1, r3
   34464:	umull	r7, ip, r3, r5
   34468:	sbcs	r4, lr, r2
   3446c:	mov	r4, #0
   34470:	movwcc	r4, #1
   34474:	mla	r3, r3, sl, ip
   34478:	mov	ip, #0
   3447c:	cmp	r4, #0
   34480:	mla	r2, r2, r5, r3
   34484:	mvnne	r7, #0
   34488:	cmp	r4, #0
   3448c:	umull	r1, r6, r7, r5
   34490:	mvnne	r2, #0
   34494:	mla	r6, r7, sl, r6
   34498:	mla	r3, r2, r5, r6
   3449c:	subs	r6, r0, r7
   344a0:	sbcs	r2, lr, r2
   344a4:	mov	r2, #0
   344a8:	movwcc	ip, #1
   344ac:	cmp	ip, #0
   344b0:	mvnne	r1, #0
   344b4:	mvnne	r3, #0
   344b8:	subs	r6, r0, r1
   344bc:	sbcs	r6, lr, r3
   344c0:	umull	r0, r6, r1, r5
   344c4:	movwcc	r2, #1
   344c8:	cmp	r2, #0
   344cc:	mvnne	r0, #0
   344d0:	cmp	r2, #0
   344d4:	str	r6, [sp, #12]
   344d8:	umull	r6, r7, r0, r5
   344dc:	mla	r7, r0, sl, r7
   344e0:	str	r7, [sp, #8]
   344e4:	ldr	r7, [sp, #12]
   344e8:	mla	r1, r1, sl, r7
   344ec:	mla	r1, r3, r5, r1
   344f0:	ldr	r3, [sp, #8]
   344f4:	mvnne	r1, #0
   344f8:	mla	r7, r1, r5, r3
   344fc:	ldr	r3, [sp, #16]
   34500:	subs	r0, r3, r0
   34504:	sbcs	r0, lr, r1
   34508:	mov	r0, #0
   3450c:	movwcc	r0, #1
   34510:	cmp	r0, #0
   34514:	mov	r1, r0
   34518:	ldr	r0, [sp, #20]
   3451c:	mvnne	r7, #0
   34520:	mvnne	r6, #0
   34524:	orr	r0, r0, r4
   34528:	orr	r0, r0, ip
   3452c:	orr	r0, r0, r2
   34530:	orr	r3, r0, r1
   34534:	b	34768 <__assert_fail@plt+0x228a0>
   34538:	mvn	r0, #0
   3453c:	mvn	r1, #0
   34540:	mov	r2, r5
   34544:	mov	sl, r3
   34548:	bl	35eec <__assert_fail@plt+0x24024>
   3454c:	mov	lr, r0
   34550:	subs	r0, r0, r6
   34554:	mov	r2, #0
   34558:	mov	ip, r1
   3455c:	str	sl, [sp, #24]
   34560:	sbcs	r0, r1, r7
   34564:	umull	r3, r1, r6, r5
   34568:	str	lr, [sp, #4]
   3456c:	movwcc	r2, #1
   34570:	cmp	r2, #0
   34574:	mla	r6, r6, sl, r1
   34578:	mov	r1, #0
   3457c:	str	r2, [sp, #20]
   34580:	mvnne	r3, #0
   34584:	cmp	r2, #0
   34588:	mla	r7, r7, r5, r6
   3458c:	mov	r2, #0
   34590:	umull	r0, r4, r3, r5
   34594:	mvnne	r7, #0
   34598:	mla	r4, r3, sl, r4
   3459c:	subs	r3, lr, r3
   345a0:	sbcs	r3, ip, r7
   345a4:	mla	r4, r7, r5, r4
   345a8:	movwcc	r1, #1
   345ac:	cmp	r1, #0
   345b0:	str	r1, [sp, #16]
   345b4:	mvnne	r0, #0
   345b8:	mvnne	r4, #0
   345bc:	subs	r3, lr, r0
   345c0:	sbcs	r3, ip, r4
   345c4:	umull	r6, r3, r0, r5
   345c8:	movwcc	r2, #1
   345cc:	cmp	r2, #0
   345d0:	mla	r0, r0, sl, r3
   345d4:	str	r2, [sp, #12]
   345d8:	mvnne	r6, #0
   345dc:	cmp	r2, #0
   345e0:	mla	r0, r4, r5, r0
   345e4:	ldr	r4, [sp, #24]
   345e8:	umull	r1, r7, r6, r5
   345ec:	mvnne	r0, #0
   345f0:	subs	r3, lr, r6
   345f4:	mov	r3, ip
   345f8:	str	r3, [sp]
   345fc:	mla	r7, r6, sl, r7
   34600:	mla	r7, r0, r5, r7
   34604:	sbcs	r0, ip, r0
   34608:	mov	r0, #0
   3460c:	movwcc	r0, #1
   34610:	cmp	r0, #0
   34614:	str	r0, [sp, #8]
   34618:	mvnne	r1, #0
   3461c:	mvnne	r7, #0
   34620:	subs	r0, lr, r1
   34624:	sbcs	r0, ip, r7
   34628:	mov	ip, #0
   3462c:	umull	r6, r0, r1, r5
   34630:	movwcc	ip, #1
   34634:	cmp	ip, #0
   34638:	mla	r1, r1, r4, r0
   3463c:	mov	r0, lr
   34640:	mvnne	r6, #0
   34644:	cmp	ip, #0
   34648:	mla	r1, r7, r5, r1
   3464c:	umull	r2, sl, r6, r5
   34650:	mvnne	r1, #0
   34654:	mla	sl, r6, r4, sl
   34658:	subs	r6, lr, r6
   3465c:	mov	lr, #0
   34660:	mla	r7, r1, r5, sl
   34664:	sbcs	r1, r3, r1
   34668:	ldr	r1, [sp, #24]
   3466c:	movwcc	lr, #1
   34670:	cmp	lr, #0
   34674:	mvnne	r2, #0
   34678:	mvnne	r7, #0
   3467c:	subs	r6, r0, r2
   34680:	umull	r0, sl, r2, r5
   34684:	sbcs	r6, r3, r7
   34688:	mov	r3, #0
   3468c:	movwcc	r3, #1
   34690:	mla	r2, r2, r1, sl
   34694:	cmp	r3, #0
   34698:	mla	r2, r7, r5, r2
   3469c:	mvnne	r0, #0
   346a0:	cmp	r3, #0
   346a4:	umull	r6, r4, r0, r5
   346a8:	mvnne	r2, #0
   346ac:	mla	r4, r0, r1, r4
   346b0:	ldr	r1, [sp, #4]
   346b4:	mla	r7, r2, r5, r4
   346b8:	ldr	r5, [sp, #16]
   346bc:	subs	r0, r1, r0
   346c0:	ldr	r0, [sp]
   346c4:	sbcs	r0, r0, r2
   346c8:	mov	r0, #0
   346cc:	movwcc	r0, #1
   346d0:	cmp	r0, #0
   346d4:	mov	r2, r0
   346d8:	ldr	r0, [sp, #20]
   346dc:	mvnne	r7, #0
   346e0:	mvnne	r6, #0
   346e4:	orr	r0, r0, r5
   346e8:	ldr	r5, [sp, #12]
   346ec:	orr	r0, r0, r5
   346f0:	ldr	r5, [sp, #8]
   346f4:	orr	r0, r0, r5
   346f8:	orr	r0, r0, ip
   346fc:	orr	r0, r0, lr
   34700:	orr	r0, r0, r3
   34704:	orr	r0, r0, r2
   34708:	and	r3, r0, #1
   3470c:	b	34768 <__assert_fail@plt+0x228a0>
   34710:	mov	r1, #0
   34714:	lsl	r2, r7, #9
   34718:	lsl	r0, r6, #9
   3471c:	lsr	r3, r7, #23
   34720:	cmp	r1, r7, lsr #23
   34724:	orr	r2, r2, r6, lsr #23
   34728:	mvnne	r0, #0
   3472c:	movwne	r3, #1
   34730:	cmp	r1, r7, lsr #23
   34734:	mvnne	r2, #0
   34738:	mov	r6, r0
   3473c:	mov	r7, r2
   34740:	b	34768 <__assert_fail@plt+0x228a0>
   34744:	lsl	r1, r7, #1
   34748:	cmp	r7, #0
   3474c:	lsl	r0, r6, #1
   34750:	lsr	r3, r7, #31
   34754:	orr	r1, r1, r6, lsr #31
   34758:	mvnmi	r0, #0
   3475c:	mvnmi	r1, #0
   34760:	mov	r6, r0
   34764:	mov	r7, r1
   34768:	ldr	r1, [sp, #32]
   3476c:	ldr	r2, [sp, #28]
   34770:	orr	r8, r3, r8
   34774:	add	r0, r1, r2
   34778:	str	r0, [r9]
   3477c:	ldrb	r0, [r1, r2]
   34780:	cmp	r0, #0
   34784:	orrne	r8, r8, #2
   34788:	ldr	r0, [sp, #36]	; 0x24
   3478c:	strd	r6, [r0]
   34790:	mov	r0, r8
   34794:	sub	sp, fp, #28
   34798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3479c:	movw	r0, #33355	; 0x824b
   347a0:	movw	r1, #33393	; 0x8271
   347a4:	movw	r3, #33600	; 0x8340
   347a8:	mov	r2, #85	; 0x55
   347ac:	movt	r0, #3
   347b0:	movt	r1, #3
   347b4:	movt	r3, #3
   347b8:	bl	11ec8 <__assert_fail@plt>
   347bc:	clz	r2, r1
   347c0:	clz	r3, r0
   347c4:	lsr	r2, r2, #5
   347c8:	lsr	r3, r3, #5
   347cc:	orrs	r2, r3, r2
   347d0:	movwne	r1, #1
   347d4:	movwne	r0, #1
   347d8:	cmp	r1, #0
   347dc:	beq	3480c <__assert_fail@plt+0x22944>
   347e0:	mvn	r2, #-2147483648	; 0x80000000
   347e4:	udiv	r2, r2, r1
   347e8:	cmp	r2, r0
   347ec:	bcs	3480c <__assert_fail@plt+0x22944>
   347f0:	push	{fp, lr}
   347f4:	mov	fp, sp
   347f8:	bl	11cdc <__errno_location@plt>
   347fc:	mov	r1, #12
   34800:	str	r1, [r0]
   34804:	mov	r0, #0
   34808:	pop	{fp, pc}
   3480c:	b	119dc <calloc@plt>
   34810:	cmp	r0, #0
   34814:	movweq	r0, #1
   34818:	cmn	r0, #1
   3481c:	ble	34824 <__assert_fail@plt+0x2295c>
   34820:	b	11c10 <malloc@plt>
   34824:	push	{fp, lr}
   34828:	mov	fp, sp
   3482c:	bl	11cdc <__errno_location@plt>
   34830:	mov	r1, #12
   34834:	str	r1, [r0]
   34838:	mov	r0, #0
   3483c:	pop	{fp, pc}
   34840:	push	{fp, lr}
   34844:	mov	fp, sp
   34848:	cmp	r0, #0
   3484c:	beq	34868 <__assert_fail@plt+0x229a0>
   34850:	cmp	r1, #0
   34854:	beq	34874 <__assert_fail@plt+0x229ac>
   34858:	cmn	r1, #1
   3485c:	ble	34880 <__assert_fail@plt+0x229b8>
   34860:	pop	{fp, lr}
   34864:	b	11b14 <realloc@plt>
   34868:	mov	r0, r1
   3486c:	pop	{fp, lr}
   34870:	b	34810 <__assert_fail@plt+0x22948>
   34874:	bl	176c0 <__assert_fail@plt+0x57f8>
   34878:	mov	r0, #0
   3487c:	pop	{fp, pc}
   34880:	bl	11cdc <__errno_location@plt>
   34884:	mov	r1, #12
   34888:	str	r1, [r0]
   3488c:	mov	r0, #0
   34890:	pop	{fp, pc}
   34894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34898:	add	fp, sp, #28
   3489c:	sub	sp, sp, #44	; 0x2c
   348a0:	sub	sp, sp, #1024	; 0x400
   348a4:	mov	r6, r1
   348a8:	ldrb	r1, [r0]
   348ac:	mov	r5, r0
   348b0:	cmp	r1, #0
   348b4:	beq	34984 <__assert_fail@plt+0x22abc>
   348b8:	add	r0, sp, #40	; 0x28
   348bc:	mov	r2, #0
   348c0:	add	r8, r0, #16
   348c4:	mov	r0, #1
   348c8:	ldrb	r3, [r6, r2]
   348cc:	cmp	r3, #0
   348d0:	uxtbne	r1, r1
   348d4:	subne	r1, r1, r3
   348d8:	clzne	r1, r1
   348dc:	lsrne	r1, r1, #5
   348e0:	andne	r0, r0, r1
   348e4:	addne	r1, r5, r2
   348e8:	addne	r2, r2, #1
   348ec:	ldrbne	r1, [r1, #1]
   348f0:	cmpne	r1, #0
   348f4:	bne	348c8 <__assert_fail@plt+0x22a00>
   348f8:	add	r2, r6, r2
   348fc:	mov	r4, r5
   34900:	ldrb	r1, [r2]
   34904:	cmp	r1, #0
   34908:	movwne	r4, #0
   3490c:	tst	r0, #1
   34910:	cmpeq	r1, #0
   34914:	bne	34994 <__assert_fail@plt+0x22acc>
   34918:	ldrb	r1, [r6]
   3491c:	add	r0, r5, #1
   34920:	str	r2, [sp, #28]
   34924:	sub	r4, r2, r6
   34928:	bl	11cb8 <strchr@plt>
   3492c:	cmp	r4, #1
   34930:	str	r4, [sp, #32]
   34934:	beq	349a0 <__assert_fail@plt+0x22ad8>
   34938:	ldr	r3, [sp, #28]
   3493c:	cmp	r0, #0
   34940:	mov	r4, r0
   34944:	beq	34994 <__assert_fail@plt+0x22acc>
   34948:	ldr	r1, [sp, #32]
   3494c:	str	r0, [sp, #36]	; 0x24
   34950:	add	r2, r5, r1
   34954:	mov	r5, r1
   34958:	subs	r1, r2, r0
   3495c:	sub	sl, r3, r5
   34960:	movwcc	r1, #1
   34964:	cmp	r5, #31
   34968:	bhi	349a8 <__assert_fail@plt+0x22ae0>
   3496c:	mov	r8, r1
   34970:	cmp	r5, #3
   34974:	bcs	34aa4 <__assert_fail@plt+0x22bdc>
   34978:	sub	r7, r5, #1
   3497c:	mov	r9, #1
   34980:	b	3512c <__assert_fail@plt+0x23264>
   34984:	ldrb	r0, [r6]
   34988:	cmp	r0, #0
   3498c:	movne	r5, #0
   34990:	mov	r4, r5
   34994:	mov	r0, r4
   34998:	sub	sp, fp, #28
   3499c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   349a0:	mov	r4, r0
   349a4:	b	34994 <__assert_fail@plt+0x22acc>
   349a8:	rsb	r0, r5, #0
   349ac:	str	r1, [sp, #16]
   349b0:	mov	r2, #0
   349b4:	mov	r1, #1
   349b8:	mov	ip, #1
   349bc:	mov	r3, #1
   349c0:	str	r0, [sp, #12]
   349c4:	mvn	r0, #0
   349c8:	b	349e4 <__assert_fail@plt+0x22b1c>
   349cc:	sub	ip, r1, r0
   349d0:	mov	r3, #1
   349d4:	mov	r2, r1
   349d8:	add	r1, r3, r2
   349dc:	cmp	r1, r5
   349e0:	bcs	34a24 <__assert_fail@plt+0x22b5c>
   349e4:	add	r4, r0, r3
   349e8:	ldrb	r7, [sl, r1]
   349ec:	ldrb	r4, [sl, r4]
   349f0:	cmp	r7, r4
   349f4:	bcc	349cc <__assert_fail@plt+0x22b04>
   349f8:	bne	34a10 <__assert_fail@plt+0x22b48>
   349fc:	cmp	r3, ip
   34a00:	addne	r3, r3, #1
   34a04:	addeq	r2, r2, ip
   34a08:	moveq	r3, #1
   34a0c:	b	349d8 <__assert_fail@plt+0x22b10>
   34a10:	add	r1, r2, #1
   34a14:	mov	r0, r2
   34a18:	mov	r3, #1
   34a1c:	mov	ip, #1
   34a20:	b	349d4 <__assert_fail@plt+0x22b0c>
   34a24:	cmp	r5, #2
   34a28:	bcc	34b14 <__assert_fail@plt+0x22c4c>
   34a2c:	mvn	lr, #0
   34a30:	mov	r2, #0
   34a34:	mov	r3, #1
   34a38:	mov	r9, #1
   34a3c:	mov	r4, #1
   34a40:	b	34a5c <__assert_fail@plt+0x22b94>
   34a44:	sub	r9, r3, lr
   34a48:	mov	r4, #1
   34a4c:	mov	r2, r3
   34a50:	add	r3, r4, r2
   34a54:	cmp	r3, r5
   34a58:	bcs	34b1c <__assert_fail@plt+0x22c54>
   34a5c:	add	r7, lr, r4
   34a60:	ldrb	r1, [sl, r3]
   34a64:	ldrb	r7, [sl, r7]
   34a68:	cmp	r7, r1
   34a6c:	bcc	34a44 <__assert_fail@plt+0x22b7c>
   34a70:	cmp	r1, r7
   34a74:	bne	34a8c <__assert_fail@plt+0x22bc4>
   34a78:	cmp	r4, r9
   34a7c:	addne	r4, r4, #1
   34a80:	addeq	r2, r2, r9
   34a84:	moveq	r4, #1
   34a88:	b	34a50 <__assert_fail@plt+0x22b88>
   34a8c:	add	r1, r2, #1
   34a90:	mov	lr, r2
   34a94:	mov	r4, #1
   34a98:	mov	r9, #1
   34a9c:	mov	r2, r1
   34aa0:	b	34a50 <__assert_fail@plt+0x22b88>
   34aa4:	mvn	r1, #0
   34aa8:	mov	r0, #0
   34aac:	mov	r2, #1
   34ab0:	mov	ip, #1
   34ab4:	mov	r3, #1
   34ab8:	b	34ad4 <__assert_fail@plt+0x22c0c>
   34abc:	sub	ip, r2, r1
   34ac0:	mov	r3, #1
   34ac4:	mov	r0, r2
   34ac8:	add	r2, r3, r0
   34acc:	cmp	r2, r5
   34ad0:	bcs	34f20 <__assert_fail@plt+0x23058>
   34ad4:	add	r4, r1, r3
   34ad8:	ldrb	r7, [sl, r2]
   34adc:	ldrb	r4, [sl, r4]
   34ae0:	cmp	r7, r4
   34ae4:	bcc	34abc <__assert_fail@plt+0x22bf4>
   34ae8:	bne	34b00 <__assert_fail@plt+0x22c38>
   34aec:	cmp	r3, ip
   34af0:	addne	r3, r3, #1
   34af4:	addeq	r0, r0, ip
   34af8:	moveq	r3, #1
   34afc:	b	34ac8 <__assert_fail@plt+0x22c00>
   34b00:	add	r2, r0, #1
   34b04:	mov	r1, r0
   34b08:	mov	r3, #1
   34b0c:	mov	ip, #1
   34b10:	b	34ac4 <__assert_fail@plt+0x22bfc>
   34b14:	mov	r9, #1
   34b18:	mvn	lr, #0
   34b1c:	vdup.32	q8, r5
   34b20:	add	r2, sp, #40	; 0x28
   34b24:	add	r1, r8, #976	; 0x3d0
   34b28:	vst1.32	{d16-d17}, [r2]
   34b2c:	vst1.32	{d16-d17}, [r1]
   34b30:	add	r1, r8, #960	; 0x3c0
   34b34:	vst1.32	{d16-d17}, [r1]
   34b38:	add	r1, r8, #944	; 0x3b0
   34b3c:	vst1.32	{d16-d17}, [r1]
   34b40:	add	r1, r8, #928	; 0x3a0
   34b44:	vst1.32	{d16-d17}, [r1]
   34b48:	add	r1, r8, #912	; 0x390
   34b4c:	vst1.32	{d16-d17}, [r1]
   34b50:	add	r1, r8, #896	; 0x380
   34b54:	vst1.32	{d16-d17}, [r1]
   34b58:	add	r1, r8, #880	; 0x370
   34b5c:	vst1.32	{d16-d17}, [r1]
   34b60:	add	r1, r8, #864	; 0x360
   34b64:	vst1.32	{d16-d17}, [r1]
   34b68:	add	r1, r8, #848	; 0x350
   34b6c:	vst1.32	{d16-d17}, [r1]
   34b70:	add	r1, r8, #832	; 0x340
   34b74:	vst1.32	{d16-d17}, [r1]
   34b78:	add	r1, r8, #816	; 0x330
   34b7c:	vst1.32	{d16-d17}, [r1]
   34b80:	add	r1, r8, #800	; 0x320
   34b84:	vst1.32	{d16-d17}, [r1]
   34b88:	add	r1, r8, #784	; 0x310
   34b8c:	vst1.32	{d16-d17}, [r1]
   34b90:	add	r1, r8, #768	; 0x300
   34b94:	vst1.32	{d16-d17}, [r1]
   34b98:	add	r1, r8, #752	; 0x2f0
   34b9c:	vst1.32	{d16-d17}, [r1]
   34ba0:	add	r1, r8, #736	; 0x2e0
   34ba4:	vst1.32	{d16-d17}, [r1]
   34ba8:	add	r1, r8, #720	; 0x2d0
   34bac:	vst1.32	{d16-d17}, [r1]
   34bb0:	add	r1, r8, #704	; 0x2c0
   34bb4:	vst1.32	{d16-d17}, [r1]
   34bb8:	add	r1, r8, #688	; 0x2b0
   34bbc:	vst1.32	{d16-d17}, [r1]
   34bc0:	add	r1, r8, #672	; 0x2a0
   34bc4:	vst1.32	{d16-d17}, [r1]
   34bc8:	add	r1, r8, #656	; 0x290
   34bcc:	vst1.32	{d16-d17}, [r1]
   34bd0:	add	r1, r8, #640	; 0x280
   34bd4:	vst1.32	{d16-d17}, [r1]
   34bd8:	add	r1, r8, #624	; 0x270
   34bdc:	vst1.32	{d16-d17}, [r1]
   34be0:	add	r1, r8, #608	; 0x260
   34be4:	vst1.32	{d16-d17}, [r1]
   34be8:	add	r1, r8, #592	; 0x250
   34bec:	vst1.32	{d16-d17}, [r1]
   34bf0:	add	r1, r8, #576	; 0x240
   34bf4:	vst1.32	{d16-d17}, [r1]
   34bf8:	add	r1, r8, #560	; 0x230
   34bfc:	vst1.32	{d16-d17}, [r1]
   34c00:	add	r1, r8, #544	; 0x220
   34c04:	vst1.32	{d16-d17}, [r1]
   34c08:	add	r1, r8, #528	; 0x210
   34c0c:	vst1.32	{d16-d17}, [r1]
   34c10:	add	r1, r8, #512	; 0x200
   34c14:	vst1.32	{d16-d17}, [r1]
   34c18:	add	r1, r8, #496	; 0x1f0
   34c1c:	vst1.32	{d16-d17}, [r1]
   34c20:	add	r1, r8, #480	; 0x1e0
   34c24:	vst1.32	{d16-d17}, [r1]
   34c28:	add	r1, r8, #464	; 0x1d0
   34c2c:	vst1.32	{d16-d17}, [r1]
   34c30:	add	r1, r8, #448	; 0x1c0
   34c34:	vst1.32	{d16-d17}, [r1]
   34c38:	add	r1, r8, #432	; 0x1b0
   34c3c:	vst1.32	{d16-d17}, [r1]
   34c40:	add	r1, r8, #416	; 0x1a0
   34c44:	vst1.32	{d16-d17}, [r1]
   34c48:	add	r1, r8, #400	; 0x190
   34c4c:	vst1.32	{d16-d17}, [r1]
   34c50:	add	r1, r8, #384	; 0x180
   34c54:	vst1.32	{d16-d17}, [r1]
   34c58:	add	r1, r8, #368	; 0x170
   34c5c:	vst1.32	{d16-d17}, [r1]
   34c60:	add	r1, r8, #352	; 0x160
   34c64:	vst1.32	{d16-d17}, [r1]
   34c68:	add	r1, r8, #336	; 0x150
   34c6c:	vst1.32	{d16-d17}, [r1]
   34c70:	add	r1, r8, #320	; 0x140
   34c74:	vst1.32	{d16-d17}, [r1]
   34c78:	add	r1, r8, #304	; 0x130
   34c7c:	vst1.32	{d16-d17}, [r1]
   34c80:	add	r1, r8, #288	; 0x120
   34c84:	vst1.32	{d16-d17}, [r1]
   34c88:	add	r1, r8, #272	; 0x110
   34c8c:	vst1.32	{d16-d17}, [r1]
   34c90:	add	r1, r8, #256	; 0x100
   34c94:	vst1.32	{d16-d17}, [r1]
   34c98:	add	r1, r8, #240	; 0xf0
   34c9c:	vst1.32	{d16-d17}, [r1]
   34ca0:	add	r1, r8, #224	; 0xe0
   34ca4:	vst1.32	{d16-d17}, [r1]
   34ca8:	add	r1, r8, #208	; 0xd0
   34cac:	vst1.32	{d16-d17}, [r1]
   34cb0:	add	r1, r8, #192	; 0xc0
   34cb4:	vst1.32	{d16-d17}, [r1]
   34cb8:	add	r1, r8, #176	; 0xb0
   34cbc:	vst1.32	{d16-d17}, [r1]
   34cc0:	add	r1, r8, #160	; 0xa0
   34cc4:	vst1.32	{d16-d17}, [r1]
   34cc8:	add	r1, r8, #144	; 0x90
   34ccc:	vst1.32	{d16-d17}, [r1]
   34cd0:	add	r1, r8, #128	; 0x80
   34cd4:	vst1.32	{d16-d17}, [r1]
   34cd8:	add	r1, r8, #112	; 0x70
   34cdc:	vst1.32	{d16-d17}, [r1]
   34ce0:	add	r1, r8, #96	; 0x60
   34ce4:	vst1.32	{d16-d17}, [r1]
   34ce8:	add	r1, r8, #80	; 0x50
   34cec:	vst1.32	{d16-d17}, [r1]
   34cf0:	add	r1, r8, #64	; 0x40
   34cf4:	vst1.32	{d16-d17}, [r1]
   34cf8:	add	r1, r8, #48	; 0x30
   34cfc:	vst1.32	{d16-d17}, [r1]
   34d00:	add	r1, r8, #32
   34d04:	vst1.32	{d16-d17}, [r1]
   34d08:	add	r1, r8, #16
   34d0c:	vst1.32	{d16-d17}, [r1]
   34d10:	mov	r1, #992	; 0x3e0
   34d14:	vst1.32	{d16-d17}, [r8], r1
   34d18:	add	r1, r0, #1
   34d1c:	vst1.32	{d16-d17}, [r8]
   34d20:	add	r8, lr, #1
   34d24:	cmp	r8, r1
   34d28:	movcc	r9, ip
   34d2c:	movcc	r8, r1
   34d30:	cmp	r5, #0
   34d34:	str	r9, [sp, #24]
   34d38:	beq	34db0 <__assert_fail@plt+0x22ee8>
   34d3c:	ldr	r3, [sp, #28]
   34d40:	mov	r0, r2
   34d44:	mvn	r2, r6
   34d48:	and	ip, r5, #1
   34d4c:	mov	r1, #0
   34d50:	cmn	r2, r3
   34d54:	beq	34d90 <__assert_fail@plt+0x22ec8>
   34d58:	ldr	r1, [sp, #32]
   34d5c:	sub	r2, r1, ip
   34d60:	sub	r3, r1, #2
   34d64:	mov	r1, #0
   34d68:	mov	r5, sl
   34d6c:	add	r4, r3, #1
   34d70:	ldrb	r7, [r5, r1]!
   34d74:	add	r1, r1, #2
   34d78:	cmp	r2, r1
   34d7c:	str	r4, [r0, r7, lsl #2]
   34d80:	ldrb	r7, [r5, #1]
   34d84:	str	r3, [r0, r7, lsl #2]
   34d88:	sub	r3, r3, #2
   34d8c:	bne	34d68 <__assert_fail@plt+0x22ea0>
   34d90:	ldr	r5, [sp, #32]
   34d94:	ldr	r9, [sp, #24]
   34d98:	cmp	ip, #0
   34d9c:	beq	34db0 <__assert_fail@plt+0x22ee8>
   34da0:	ldrb	r2, [sl, r1]
   34da4:	mvn	r1, r1
   34da8:	add	r1, r5, r1
   34dac:	str	r1, [r0, r2, lsl #2]
   34db0:	add	r1, sl, r9
   34db4:	mov	r0, sl
   34db8:	mov	r2, r8
   34dbc:	bl	11ca0 <bcmp@plt>
   34dc0:	cmp	r0, #0
   34dc4:	str	r8, [sp, #20]
   34dc8:	beq	34fa0 <__assert_fail@plt+0x230d8>
   34dcc:	ldr	r1, [sp, #16]
   34dd0:	ldr	r0, [sp, #36]	; 0x24
   34dd4:	mov	r4, #0
   34dd8:	add	r0, r0, r1
   34ddc:	sub	r2, r5, r1
   34de0:	mov	r1, #0
   34de4:	bl	11d48 <memchr@plt>
   34de8:	sub	r1, r5, r8
   34dec:	cmp	r8, r1
   34df0:	movcs	r1, r8
   34df4:	cmp	r5, #0
   34df8:	str	r1, [sp, #8]
   34dfc:	beq	34994 <__assert_fail@plt+0x22acc>
   34e00:	ldr	r7, [sp, #36]	; 0x24
   34e04:	cmp	r0, #0
   34e08:	bne	34994 <__assert_fail@plt+0x22acc>
   34e0c:	ldr	r2, [sp, #20]
   34e10:	ldr	r3, [sp, #28]
   34e14:	mov	r8, #0
   34e18:	mov	ip, r5
   34e1c:	add	r0, r7, r2
   34e20:	str	r0, [sp, #4]
   34e24:	ldr	r0, [sp, #12]
   34e28:	add	r0, r3, r0
   34e2c:	add	r1, r0, r2
   34e30:	sub	r0, r6, r3
   34e34:	add	r0, r0, r2
   34e38:	str	r1, [sp, #28]
   34e3c:	add	r6, r0, #1
   34e40:	rsb	r0, r2, #1
   34e44:	str	r0, [sp, #12]
   34e48:	sub	r0, r5, #1
   34e4c:	str	r6, [sp, #24]
   34e50:	str	r0, [sp, #16]
   34e54:	add	r0, ip, r7
   34e58:	add	r3, sp, #40	; 0x28
   34e5c:	ldrb	r2, [r0, #-1]
   34e60:	ldr	r2, [r3, r2, lsl #2]
   34e64:	cmp	r2, #0
   34e68:	beq	34e74 <__assert_fail@plt+0x22fac>
   34e6c:	add	r8, r2, r8
   34e70:	b	34ee8 <__assert_fail@plt+0x23020>
   34e74:	ldr	r2, [sp, #20]
   34e78:	ldr	r3, [sp, #16]
   34e7c:	cmp	r2, r3
   34e80:	bcs	34eac <__assert_fail@plt+0x22fe4>
   34e84:	ldr	r2, [sp, #4]
   34e88:	add	r3, r2, r8
   34e8c:	mov	r2, #0
   34e90:	ldrb	r5, [r3, -r2]
   34e94:	ldrb	r4, [r1, -r2]
   34e98:	cmp	r4, r5
   34e9c:	bne	34ed8 <__assert_fail@plt+0x23010>
   34ea0:	sub	r2, r2, #1
   34ea4:	cmp	r6, r2
   34ea8:	bne	34e90 <__assert_fail@plt+0x22fc8>
   34eac:	ldr	r2, [sp, #12]
   34eb0:	add	r4, r7, r8
   34eb4:	cmp	r2, #1
   34eb8:	beq	34994 <__assert_fail@plt+0x22acc>
   34ebc:	ldrb	r3, [r4, -r2]
   34ec0:	ldrb	r5, [sl, -r2]
   34ec4:	add	r2, r2, #1
   34ec8:	cmp	r5, r3
   34ecc:	beq	34eb4 <__assert_fail@plt+0x22fec>
   34ed0:	ldr	r2, [sp, #8]
   34ed4:	b	34edc <__assert_fail@plt+0x23014>
   34ed8:	rsb	r2, r2, #0
   34edc:	ldr	r5, [sp, #32]
   34ee0:	add	r2, r8, r2
   34ee4:	add	r8, r2, #1
   34ee8:	add	r9, r8, r5
   34eec:	mov	r1, #0
   34ef0:	mov	r4, #0
   34ef4:	sub	r2, r9, ip
   34ef8:	bl	11d48 <memchr@plt>
   34efc:	cmp	r9, #0
   34f00:	beq	34994 <__assert_fail@plt+0x22acc>
   34f04:	ldr	r7, [sp, #36]	; 0x24
   34f08:	ldr	r1, [sp, #28]
   34f0c:	ldr	r6, [sp, #24]
   34f10:	cmp	r0, #0
   34f14:	mov	ip, r9
   34f18:	beq	34e54 <__assert_fail@plt+0x22f8c>
   34f1c:	b	34994 <__assert_fail@plt+0x22acc>
   34f20:	cmp	r5, #2
   34f24:	bcc	35110 <__assert_fail@plt+0x23248>
   34f28:	mvn	lr, #0
   34f2c:	mov	r2, #0
   34f30:	mov	r3, #1
   34f34:	mov	r9, #1
   34f38:	mov	r4, #1
   34f3c:	b	34f58 <__assert_fail@plt+0x23090>
   34f40:	sub	r9, r3, lr
   34f44:	mov	r4, #1
   34f48:	mov	r2, r3
   34f4c:	add	r3, r4, r2
   34f50:	cmp	r3, r5
   34f54:	bcs	35118 <__assert_fail@plt+0x23250>
   34f58:	add	r7, lr, r4
   34f5c:	ldrb	r0, [sl, r3]
   34f60:	ldrb	r7, [sl, r7]
   34f64:	cmp	r7, r0
   34f68:	bcc	34f40 <__assert_fail@plt+0x23078>
   34f6c:	cmp	r0, r7
   34f70:	bne	34f88 <__assert_fail@plt+0x230c0>
   34f74:	cmp	r4, r9
   34f78:	addne	r4, r4, #1
   34f7c:	addeq	r2, r2, r9
   34f80:	moveq	r4, #1
   34f84:	b	34f4c <__assert_fail@plt+0x23084>
   34f88:	add	r0, r2, #1
   34f8c:	mov	lr, r2
   34f90:	mov	r4, #1
   34f94:	mov	r9, #1
   34f98:	mov	r2, r0
   34f9c:	b	34f4c <__assert_fail@plt+0x23084>
   34fa0:	ldr	r1, [sp, #16]
   34fa4:	ldr	r0, [sp, #36]	; 0x24
   34fa8:	mov	r4, #0
   34fac:	add	r0, r0, r1
   34fb0:	sub	r2, r5, r1
   34fb4:	mov	r1, #0
   34fb8:	bl	11d48 <memchr@plt>
   34fbc:	cmp	r5, #0
   34fc0:	beq	34994 <__assert_fail@plt+0x22acc>
   34fc4:	ldr	r8, [sp, #36]	; 0x24
   34fc8:	cmp	r0, #0
   34fcc:	bne	34994 <__assert_fail@plt+0x22acc>
   34fd0:	ldr	r0, [sp, #24]
   34fd4:	sub	lr, r5, #1
   34fd8:	mov	r9, #0
   34fdc:	mov	ip, r5
   34fe0:	sub	r0, r5, r0
   34fe4:	str	r0, [sp, #28]
   34fe8:	ldr	r0, [sp, #20]
   34fec:	sub	r1, r0, #1
   34ff0:	rsb	r0, r0, #1
   34ff4:	str	r1, [sp, #16]
   34ff8:	mov	r1, #0
   34ffc:	str	r0, [sp, #12]
   35000:	add	r0, ip, r8
   35004:	add	r3, sp, #40	; 0x28
   35008:	ldrb	r2, [r0, #-1]
   3500c:	ldr	r3, [r3, r2, lsl #2]
   35010:	cmp	r3, #0
   35014:	beq	3503c <__assert_fail@plt+0x23174>
   35018:	ldr	r2, [sp, #24]
   3501c:	ldr	r7, [sp, #28]
   35020:	cmp	r3, r2
   35024:	mov	r2, r3
   35028:	movcc	r2, r7
   3502c:	cmp	r9, #0
   35030:	mov	r9, #0
   35034:	moveq	r2, r3
   35038:	b	350c4 <__assert_fail@plt+0x231fc>
   3503c:	ldr	r2, [sp, #20]
   35040:	cmp	r2, r9
   35044:	movcc	r2, r9
   35048:	cmp	r2, lr
   3504c:	bcs	35070 <__assert_fail@plt+0x231a8>
   35050:	add	r3, r8, r1
   35054:	ldrb	r5, [r3, r2]
   35058:	ldrb	r4, [sl, r2]
   3505c:	cmp	r4, r5
   35060:	bne	350b4 <__assert_fail@plt+0x231ec>
   35064:	add	r2, r2, #1
   35068:	cmp	r2, lr
   3506c:	bcc	35054 <__assert_fail@plt+0x2318c>
   35070:	ldr	r2, [sp, #16]
   35074:	add	r4, r8, r1
   35078:	add	r3, r2, #1
   3507c:	cmp	r9, r3
   35080:	bcs	35098 <__assert_fail@plt+0x231d0>
   35084:	ldrb	r5, [r4, r2]
   35088:	ldrb	r7, [sl, r2]
   3508c:	sub	r2, r2, #1
   35090:	cmp	r7, r5
   35094:	beq	35078 <__assert_fail@plt+0x231b0>
   35098:	add	r2, r9, #1
   3509c:	ldr	r9, [sp, #28]
   350a0:	ldr	r5, [sp, #32]
   350a4:	cmp	r3, r2
   350a8:	ldr	r2, [sp, #24]
   350ac:	bcs	350c4 <__assert_fail@plt+0x231fc>
   350b0:	b	34994 <__assert_fail@plt+0x22acc>
   350b4:	ldr	r3, [sp, #12]
   350b8:	ldr	r5, [sp, #32]
   350bc:	mov	r9, #0
   350c0:	add	r2, r3, r2
   350c4:	add	r1, r2, r1
   350c8:	mov	r6, sl
   350cc:	mov	sl, lr
   350d0:	mov	r4, #0
   350d4:	add	r8, r1, r5
   350d8:	mov	r7, r1
   350dc:	mov	r1, #0
   350e0:	sub	r2, r8, ip
   350e4:	bl	11d48 <memchr@plt>
   350e8:	cmp	r8, #0
   350ec:	beq	34994 <__assert_fail@plt+0x22acc>
   350f0:	mov	ip, r8
   350f4:	ldr	r8, [sp, #36]	; 0x24
   350f8:	mov	lr, sl
   350fc:	cmp	r0, #0
   35100:	mov	sl, r6
   35104:	mov	r1, r7
   35108:	beq	35000 <__assert_fail@plt+0x23138>
   3510c:	b	34994 <__assert_fail@plt+0x22acc>
   35110:	mov	r9, #1
   35114:	mvn	lr, #0
   35118:	add	r0, r1, #1
   3511c:	add	r7, lr, #1
   35120:	cmp	r7, r0
   35124:	movcc	r9, ip
   35128:	movcc	r7, r0
   3512c:	add	r1, sl, r9
   35130:	mov	r0, sl
   35134:	mov	r2, r7
   35138:	bl	11ca0 <bcmp@plt>
   3513c:	cmp	r0, #0
   35140:	beq	35248 <__assert_fail@plt+0x23380>
   35144:	ldr	r0, [sp, #36]	; 0x24
   35148:	sub	r2, r5, r8
   3514c:	mov	r1, #0
   35150:	mov	r4, #0
   35154:	add	r0, r0, r8
   35158:	bl	11d48 <memchr@plt>
   3515c:	sub	r1, r5, r7
   35160:	cmp	r7, r1
   35164:	movcs	r1, r7
   35168:	cmp	r5, #0
   3516c:	str	r1, [sp, #24]
   35170:	beq	34994 <__assert_fail@plt+0x22acc>
   35174:	cmp	r0, #0
   35178:	ldr	r5, [sp, #36]	; 0x24
   3517c:	ldr	r0, [sp, #28]
   35180:	bne	34994 <__assert_fail@plt+0x22acc>
   35184:	add	r1, r5, r7
   35188:	sub	r0, r0, r7
   3518c:	add	r9, r7, r6
   35190:	mov	r8, #0
   35194:	str	r7, [sp, #12]
   35198:	str	r1, [sp, #20]
   3519c:	ldr	r1, [sp, #32]
   351a0:	sub	r6, r0, r6
   351a4:	rsb	r0, r7, #1
   351a8:	str	r0, [sp, #28]
   351ac:	ldr	ip, [sp, #32]
   351b0:	cmp	ip, r7
   351b4:	bls	351e0 <__assert_fail@plt+0x23318>
   351b8:	ldr	r0, [sp, #20]
   351bc:	mov	r2, #0
   351c0:	add	r0, r0, r8
   351c4:	ldrb	r3, [r0, r2]
   351c8:	ldrb	r7, [r9, r2]
   351cc:	cmp	r7, r3
   351d0:	bne	35208 <__assert_fail@plt+0x23340>
   351d4:	add	r2, r2, #1
   351d8:	cmp	r6, r2
   351dc:	bne	351c4 <__assert_fail@plt+0x232fc>
   351e0:	ldr	r0, [sp, #28]
   351e4:	add	r4, r5, r8
   351e8:	cmp	r0, #1
   351ec:	beq	34994 <__assert_fail@plt+0x22acc>
   351f0:	ldrb	r2, [r4, -r0]
   351f4:	ldrb	r3, [sl, -r0]
   351f8:	add	r0, r0, #1
   351fc:	cmp	r3, r2
   35200:	beq	351e8 <__assert_fail@plt+0x23320>
   35204:	ldr	r2, [sp, #24]
   35208:	add	r2, r8, r2
   3520c:	add	r0, r5, r1
   35210:	mov	r4, #0
   35214:	add	r8, r2, #1
   35218:	add	r7, r8, ip
   3521c:	sub	r2, r7, r1
   35220:	mov	r1, #0
   35224:	bl	11d48 <memchr@plt>
   35228:	cmp	r0, #0
   3522c:	bne	34994 <__assert_fail@plt+0x22acc>
   35230:	cmp	r7, #0
   35234:	mov	r1, r7
   35238:	ldr	r5, [sp, #36]	; 0x24
   3523c:	ldr	r7, [sp, #12]
   35240:	bne	351ac <__assert_fail@plt+0x232e4>
   35244:	b	34994 <__assert_fail@plt+0x22acc>
   35248:	ldr	r0, [sp, #36]	; 0x24
   3524c:	sub	r2, r5, r8
   35250:	mov	r1, #0
   35254:	mov	r4, #0
   35258:	add	r0, r0, r8
   3525c:	bl	11d48 <memchr@plt>
   35260:	cmp	r5, #0
   35264:	beq	34994 <__assert_fail@plt+0x22acc>
   35268:	ldr	ip, [sp, #36]	; 0x24
   3526c:	cmp	r0, #0
   35270:	str	r9, [sp, #28]
   35274:	bne	34994 <__assert_fail@plt+0x22acc>
   35278:	ldr	r1, [sp, #32]
   3527c:	ldr	r0, [sp, #28]
   35280:	ldr	r5, [sp, #32]
   35284:	mov	r6, #0
   35288:	mov	r8, #0
   3528c:	sub	r0, r1, r0
   35290:	str	r0, [sp, #24]
   35294:	sub	r0, r7, #1
   35298:	str	r0, [sp, #20]
   3529c:	rsb	r0, r7, #1
   352a0:	str	r0, [sp, #16]
   352a4:	cmp	r7, r6
   352a8:	mov	r0, r7
   352ac:	mov	r9, r7
   352b0:	movcc	r0, r6
   352b4:	cmp	r0, r5
   352b8:	bcs	352dc <__assert_fail@plt+0x23414>
   352bc:	add	r2, ip, r8
   352c0:	ldrb	r3, [r2, r0]
   352c4:	ldrb	r7, [sl, r0]
   352c8:	cmp	r7, r3
   352cc:	bne	3531c <__assert_fail@plt+0x23454>
   352d0:	add	r0, r0, #1
   352d4:	cmp	r0, r5
   352d8:	bcc	352c0 <__assert_fail@plt+0x233f8>
   352dc:	ldr	r0, [sp, #20]
   352e0:	add	r4, ip, r8
   352e4:	add	r2, r0, #1
   352e8:	cmp	r6, r2
   352ec:	bcs	35304 <__assert_fail@plt+0x2343c>
   352f0:	ldrb	r3, [r4, r0]
   352f4:	ldrb	r7, [sl, r0]
   352f8:	sub	r0, r0, #1
   352fc:	cmp	r7, r3
   35300:	beq	352e4 <__assert_fail@plt+0x2341c>
   35304:	add	r0, r6, #1
   35308:	ldr	r6, [sp, #24]
   3530c:	cmp	r2, r0
   35310:	ldr	r2, [sp, #28]
   35314:	bcs	35328 <__assert_fail@plt+0x23460>
   35318:	b	34994 <__assert_fail@plt+0x22acc>
   3531c:	ldr	r2, [sp, #16]
   35320:	mov	r6, #0
   35324:	add	r2, r2, r0
   35328:	add	r8, r2, r8
   3532c:	add	r0, ip, r1
   35330:	mov	r4, #0
   35334:	add	r7, r8, r5
   35338:	sub	r2, r7, r1
   3533c:	mov	r1, #0
   35340:	bl	11d48 <memchr@plt>
   35344:	cmp	r7, #0
   35348:	beq	34994 <__assert_fail@plt+0x22acc>
   3534c:	ldr	ip, [sp, #36]	; 0x24
   35350:	mov	r1, r7
   35354:	cmp	r0, #0
   35358:	mov	r7, r9
   3535c:	beq	352a4 <__assert_fail@plt+0x233dc>
   35360:	b	34994 <__assert_fail@plt+0x22acc>
   35364:	push	{r4, r5, r6, sl, fp, lr}
   35368:	add	fp, sp, #16
   3536c:	mov	r4, r0
   35370:	bl	11bbc <__fpending@plt>
   35374:	ldr	r6, [r4]
   35378:	mov	r5, r0
   3537c:	mov	r0, r4
   35380:	bl	15d38 <__assert_fail@plt+0x3e70>
   35384:	tst	r6, #32
   35388:	bne	353c0 <__assert_fail@plt+0x234f8>
   3538c:	cmp	r0, #0
   35390:	mov	r4, r0
   35394:	mvnne	r4, #0
   35398:	cmp	r5, #0
   3539c:	bne	353cc <__assert_fail@plt+0x23504>
   353a0:	cmp	r0, #0
   353a4:	beq	353cc <__assert_fail@plt+0x23504>
   353a8:	bl	11cdc <__errno_location@plt>
   353ac:	ldr	r0, [r0]
   353b0:	subs	r4, r0, #9
   353b4:	mvnne	r4, #0
   353b8:	mov	r0, r4
   353bc:	pop	{r4, r5, r6, sl, fp, pc}
   353c0:	mvn	r4, #0
   353c4:	cmp	r0, #0
   353c8:	beq	353d4 <__assert_fail@plt+0x2350c>
   353cc:	mov	r0, r4
   353d0:	pop	{r4, r5, r6, sl, fp, pc}
   353d4:	bl	11cdc <__errno_location@plt>
   353d8:	mov	r1, #0
   353dc:	str	r1, [r0]
   353e0:	mov	r0, r4
   353e4:	pop	{r4, r5, r6, sl, fp, pc}
   353e8:	movw	r2, #62998	; 0xf616
   353ec:	mov	r1, #0
   353f0:	movt	r2, #149	; 0x95
   353f4:	str	r1, [r0, #16]
   353f8:	str	r1, [r0, #20]
   353fc:	str	r2, [r0, #24]
   35400:	bx	lr
   35404:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   35408:	add	fp, sp, #24
   3540c:	ldr	r2, [r0, #24]
   35410:	movw	r3, #62998	; 0xf616
   35414:	movt	r3, #149	; 0x95
   35418:	cmp	r2, r3
   3541c:	bne	354b8 <__assert_fail@plt+0x235f0>
   35420:	add	r3, r0, #16
   35424:	add	ip, r0, #8
   35428:	ldrd	r4, [r3]
   3542c:	orrs	r2, r4, r5
   35430:	beq	3546c <__assert_fail@plt+0x235a4>
   35434:	ldr	r6, [r1, #96]	; 0x60
   35438:	ldr	r9, [r1, #100]	; 0x64
   3543c:	ldm	r0, {r2, r7}
   35440:	eor	r7, r9, r7
   35444:	eor	r2, r6, r2
   35448:	orrs	r2, r2, r7
   3544c:	bne	3546c <__assert_fail@plt+0x235a4>
   35450:	ldm	ip, {r2, r7}
   35454:	ldm	r1, {r6, r9}
   35458:	eor	r7, r9, r7
   3545c:	eor	r2, r6, r2
   35460:	orrs	r2, r2, r7
   35464:	mov	r2, #1
   35468:	beq	354a4 <__assert_fail@plt+0x235dc>
   3546c:	adds	r6, r4, #1
   35470:	adc	r7, r5, #0
   35474:	and	r2, r6, r4
   35478:	strd	r6, [r3]
   3547c:	and	r3, r7, r5
   35480:	orrs	r2, r2, r3
   35484:	mov	r2, #0
   35488:	bne	354a4 <__assert_fail@plt+0x235dc>
   3548c:	orrs	r3, r6, r7
   35490:	beq	354ac <__assert_fail@plt+0x235e4>
   35494:	ldrd	r4, [r1]
   35498:	strd	r4, [ip]
   3549c:	ldrd	r4, [r1, #96]	; 0x60
   354a0:	strd	r4, [r0]
   354a4:	mov	r0, r2
   354a8:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   354ac:	mov	r2, #1
   354b0:	mov	r0, r2
   354b4:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   354b8:	movw	r0, #33679	; 0x838f
   354bc:	movw	r1, #33703	; 0x83a7
   354c0:	movw	r3, #33721	; 0x83b9
   354c4:	mov	r2, #60	; 0x3c
   354c8:	movt	r0, #3
   354cc:	movt	r1, #3
   354d0:	movt	r3, #3
   354d4:	bl	11ec8 <__assert_fail@plt>
   354d8:	push	{r4, r5, r6, r7, fp, lr}
   354dc:	add	fp, sp, #16
   354e0:	mov	r4, r0
   354e4:	ldr	r0, [r0, #4]
   354e8:	mov	r5, r1
   354ec:	cmp	r0, r1
   354f0:	bcs	35524 <__assert_fail@plt+0x2365c>
   354f4:	mov	r6, r3
   354f8:	cmp	r3, #0
   354fc:	beq	35530 <__assert_fail@plt+0x23668>
   35500:	mvn	r0, #0
   35504:	udiv	r0, r0, r6
   35508:	cmp	r0, r5
   3550c:	bcs	35530 <__assert_fail@plt+0x23668>
   35510:	bl	11cdc <__errno_location@plt>
   35514:	mov	r1, #12
   35518:	str	r1, [r0]
   3551c:	mov	r0, #0
   35520:	pop	{r4, r5, r6, r7, fp, pc}
   35524:	mov	r0, #1
   35528:	str	r5, [r4]
   3552c:	pop	{r4, r5, r6, r7, fp, pc}
   35530:	ldr	r0, [r4, #8]
   35534:	mul	r1, r6, r5
   35538:	cmp	r0, r2
   3553c:	beq	35554 <__assert_fail@plt+0x2368c>
   35540:	bl	34840 <__assert_fail@plt+0x22978>
   35544:	mov	r7, r0
   35548:	cmp	r0, #0
   3554c:	bne	35584 <__assert_fail@plt+0x236bc>
   35550:	b	35594 <__assert_fail@plt+0x236cc>
   35554:	mov	r0, r1
   35558:	bl	34810 <__assert_fail@plt+0x22948>
   3555c:	cmp	r0, #0
   35560:	beq	35594 <__assert_fail@plt+0x236cc>
   35564:	ldr	r1, [r4, #8]
   35568:	mov	r7, r0
   3556c:	cmp	r1, #0
   35570:	beq	35584 <__assert_fail@plt+0x236bc>
   35574:	ldr	r0, [r4]
   35578:	mul	r2, r0, r6
   3557c:	mov	r0, r7
   35580:	bl	11ab4 <memcpy@plt>
   35584:	mov	r0, #1
   35588:	str	r5, [r4]
   3558c:	stmib	r4, {r5, r7}
   35590:	pop	{r4, r5, r6, r7, fp, pc}
   35594:	mov	r0, #0
   35598:	pop	{r4, r5, r6, r7, fp, pc}
   3559c:	sub	sp, sp, #8
   355a0:	push	{r4, r5, r6, r7, fp, lr}
   355a4:	add	fp, sp, #16
   355a8:	sub	sp, sp, #8
   355ac:	mov	r5, r0
   355b0:	add	r0, fp, #8
   355b4:	cmp	r1, #11
   355b8:	str	r2, [fp, #8]
   355bc:	str	r3, [fp, #12]
   355c0:	str	r0, [sp, #4]
   355c4:	bhi	35600 <__assert_fail@plt+0x23738>
   355c8:	mov	r0, #1
   355cc:	movw	r2, #1300	; 0x514
   355d0:	tst	r2, r0, lsl r1
   355d4:	bne	356c0 <__assert_fail@plt+0x237f8>
   355d8:	movw	r2, #2570	; 0xa0a
   355dc:	tst	r2, r0, lsl r1
   355e0:	bne	35628 <__assert_fail@plt+0x23760>
   355e4:	cmp	r1, #0
   355e8:	bne	35600 <__assert_fail@plt+0x23738>
   355ec:	ldr	r0, [sp, #4]
   355f0:	add	r1, r0, #4
   355f4:	str	r1, [sp, #4]
   355f8:	mov	r1, #0
   355fc:	b	356cc <__assert_fail@plt+0x23804>
   35600:	sub	r0, r1, #1024	; 0x400
   35604:	cmp	r0, #10
   35608:	bhi	356c0 <__assert_fail@plt+0x237f8>
   3560c:	mov	r2, #1
   35610:	movw	r3, #645	; 0x285
   35614:	tst	r3, r2, lsl r0
   35618:	bne	356c0 <__assert_fail@plt+0x237f8>
   3561c:	movw	r3, #1282	; 0x502
   35620:	tst	r3, r2, lsl r0
   35624:	beq	35634 <__assert_fail@plt+0x2376c>
   35628:	mov	r0, r5
   3562c:	bl	11d78 <fcntl64@plt>
   35630:	b	356d8 <__assert_fail@plt+0x23810>
   35634:	cmp	r0, #6
   35638:	bne	356c0 <__assert_fail@plt+0x237f8>
   3563c:	ldr	r0, [sp, #4]
   35640:	movw	r7, #37864	; 0x93e8
   35644:	movt	r7, #4
   35648:	add	r1, r0, #4
   3564c:	str	r1, [sp, #4]
   35650:	ldr	r6, [r0]
   35654:	ldr	r0, [r7]
   35658:	cmp	r0, #0
   3565c:	bmi	356fc <__assert_fail@plt+0x23834>
   35660:	mov	r0, r5
   35664:	movw	r1, #1030	; 0x406
   35668:	mov	r2, r6
   3566c:	bl	11d78 <fcntl64@plt>
   35670:	mov	r4, r0
   35674:	cmn	r0, #1
   35678:	bgt	356f0 <__assert_fail@plt+0x23828>
   3567c:	bl	11cdc <__errno_location@plt>
   35680:	ldr	r0, [r0]
   35684:	cmp	r0, #22
   35688:	bne	356f0 <__assert_fail@plt+0x23828>
   3568c:	mov	r0, r5
   35690:	mov	r1, #0
   35694:	mov	r2, r6
   35698:	bl	11d78 <fcntl64@plt>
   3569c:	mov	r4, r0
   356a0:	cmp	r0, #0
   356a4:	bmi	356dc <__assert_fail@plt+0x23814>
   356a8:	mvn	r0, #0
   356ac:	str	r0, [r7]
   356b0:	mov	r0, #1
   356b4:	cmp	r0, #0
   356b8:	bne	35728 <__assert_fail@plt+0x23860>
   356bc:	b	356dc <__assert_fail@plt+0x23814>
   356c0:	ldr	r0, [sp, #4]
   356c4:	add	r2, r0, #4
   356c8:	str	r2, [sp, #4]
   356cc:	ldr	r2, [r0]
   356d0:	mov	r0, r5
   356d4:	bl	11d78 <fcntl64@plt>
   356d8:	mov	r4, r0
   356dc:	mov	r0, r4
   356e0:	sub	sp, fp, #16
   356e4:	pop	{r4, r5, r6, r7, fp, lr}
   356e8:	add	sp, sp, #8
   356ec:	bx	lr
   356f0:	mov	r0, #1
   356f4:	str	r0, [r7]
   356f8:	b	356dc <__assert_fail@plt+0x23814>
   356fc:	mov	r0, r5
   35700:	mov	r1, #0
   35704:	mov	r2, r6
   35708:	bl	11d78 <fcntl64@plt>
   3570c:	mov	r4, r0
   35710:	ldr	r0, [r7]
   35714:	add	r0, r0, #1
   35718:	clz	r0, r0
   3571c:	lsr	r0, r0, #5
   35720:	cmp	r0, #0
   35724:	beq	356dc <__assert_fail@plt+0x23814>
   35728:	cmp	r4, #0
   3572c:	bmi	356dc <__assert_fail@plt+0x23814>
   35730:	mov	r0, r4
   35734:	mov	r1, #1
   35738:	bl	11d78 <fcntl64@plt>
   3573c:	cmp	r0, #0
   35740:	bmi	3575c <__assert_fail@plt+0x23894>
   35744:	orr	r2, r0, #1
   35748:	mov	r0, r4
   3574c:	mov	r1, #2
   35750:	bl	11d78 <fcntl64@plt>
   35754:	cmn	r0, #1
   35758:	bne	356dc <__assert_fail@plt+0x23814>
   3575c:	bl	11cdc <__errno_location@plt>
   35760:	ldr	r6, [r0]
   35764:	mov	r5, r0
   35768:	mov	r0, r4
   3576c:	bl	11ea4 <close@plt>
   35770:	str	r6, [r5]
   35774:	mvn	r4, #0
   35778:	b	356dc <__assert_fail@plt+0x23814>
   3577c:	sub	sp, sp, #8
   35780:	push	{fp, lr}
   35784:	mov	fp, sp
   35788:	sub	sp, sp, #8
   3578c:	str	r2, [fp, #8]
   35790:	str	r3, [fp, #12]
   35794:	tst	r1, #64	; 0x40
   35798:	mov	r2, #0
   3579c:	ldrne	r2, [fp, #8]
   357a0:	bl	11bf8 <open64@plt>
   357a4:	bl	31444 <__assert_fail@plt+0x1f57c>
   357a8:	mov	sp, fp
   357ac:	pop	{fp, lr}
   357b0:	add	sp, sp, #8
   357b4:	bx	lr
   357b8:	push	{fp, lr}
   357bc:	mov	fp, sp
   357c0:	mov	r0, #14
   357c4:	bl	11da8 <nl_langinfo@plt>
   357c8:	movw	r1, #27716	; 0x6c44
   357cc:	cmp	r0, #0
   357d0:	movt	r1, #3
   357d4:	movne	r1, r0
   357d8:	movw	r0, #33788	; 0x83fc
   357dc:	ldrb	r2, [r1]
   357e0:	movt	r0, #3
   357e4:	cmp	r2, #0
   357e8:	movne	r0, r1
   357ec:	pop	{fp, pc}
   357f0:	push	{r4, sl, fp, lr}
   357f4:	add	fp, sp, #8
   357f8:	mov	r4, r0
   357fc:	bl	11a6c <wcwidth@plt>
   35800:	cmn	r0, #1
   35804:	popgt	{r4, sl, fp, pc}
   35808:	mov	r0, r4
   3580c:	bl	11b38 <iswcntrl@plt>
   35810:	clz	r0, r0
   35814:	lsr	r0, r0, #5
   35818:	pop	{r4, sl, fp, pc}
   3581c:	push	{r4, r5, r6, sl, fp, lr}
   35820:	add	fp, sp, #16
   35824:	mov	r4, r0
   35828:	mov	r0, r1
   3582c:	mov	r5, r1
   35830:	ldr	r1, [r0], #16
   35834:	cmp	r1, r0
   35838:	beq	35844 <__assert_fail@plt+0x2397c>
   3583c:	mov	r6, r1
   35840:	b	35854 <__assert_fail@plt+0x2398c>
   35844:	ldr	r2, [r5, #4]
   35848:	add	r6, r4, #16
   3584c:	mov	r0, r6
   35850:	bl	11ab4 <memcpy@plt>
   35854:	str	r6, [r4]
   35858:	ldr	r0, [r5, #4]
   3585c:	str	r0, [r4, #4]
   35860:	ldrb	r0, [r5, #8]
   35864:	strb	r0, [r4, #8]
   35868:	cmp	r0, #0
   3586c:	ldrne	r0, [r5, #12]
   35870:	strne	r0, [r4, #12]
   35874:	pop	{r4, r5, r6, sl, fp, pc}
   35878:	movw	r2, #33796	; 0x8404
   3587c:	ubfx	r1, r0, #5, #3
   35880:	and	r0, r0, #31
   35884:	movt	r2, #3
   35888:	ldr	r1, [r2, r1, lsl #2]
   3588c:	mov	r2, #1
   35890:	and	r0, r1, r2, lsl r0
   35894:	cmp	r0, #0
   35898:	movwne	r0, #1
   3589c:	bx	lr
   358a0:	push	{r4, r5, r6, r7, fp, lr}
   358a4:	add	fp, sp, #16
   358a8:	sub	sp, sp, #8
   358ac:	cmp	r0, #0
   358b0:	add	r5, sp, #4
   358b4:	mov	r7, r2
   358b8:	mov	r4, r1
   358bc:	movne	r5, r0
   358c0:	mov	r0, r5
   358c4:	bl	11bc8 <mbrtowc@plt>
   358c8:	mov	r6, r0
   358cc:	cmp	r7, #0
   358d0:	beq	358f8 <__assert_fail@plt+0x23a30>
   358d4:	cmn	r6, #2
   358d8:	bcc	358f8 <__assert_fail@plt+0x23a30>
   358dc:	mov	r0, #0
   358e0:	bl	3594c <__assert_fail@plt+0x23a84>
   358e4:	cmp	r0, #0
   358e8:	bne	358f8 <__assert_fail@plt+0x23a30>
   358ec:	ldrb	r0, [r4]
   358f0:	mov	r6, #1
   358f4:	str	r0, [r5]
   358f8:	mov	r0, r6
   358fc:	sub	sp, fp, #16
   35900:	pop	{r4, r5, r6, r7, fp, pc}
   35904:	cmp	r2, #0
   35908:	beq	35938 <__assert_fail@plt+0x23a70>
   3590c:	mvn	r3, #0
   35910:	udiv	r3, r3, r2
   35914:	cmp	r3, r1
   35918:	bcs	35938 <__assert_fail@plt+0x23a70>
   3591c:	push	{fp, lr}
   35920:	mov	fp, sp
   35924:	bl	11cdc <__errno_location@plt>
   35928:	mov	r1, #12
   3592c:	str	r1, [r0]
   35930:	mov	r0, #0
   35934:	pop	{fp, pc}
   35938:	mul	r1, r2, r1
   3593c:	b	34840 <__assert_fail@plt+0x22978>
   35940:	mov	r1, #0
   35944:	mov	r2, #3
   35948:	b	3559c <__assert_fail@plt+0x236d4>
   3594c:	push	{r4, sl, fp, lr}
   35950:	add	fp, sp, #8
   35954:	sub	sp, sp, #264	; 0x108
   35958:	add	r1, sp, #7
   3595c:	movw	r2, #257	; 0x101
   35960:	bl	359b8 <__assert_fail@plt+0x23af0>
   35964:	mov	r4, #0
   35968:	cmp	r0, #0
   3596c:	bne	359ac <__assert_fail@plt+0x23ae4>
   35970:	movw	r1, #33828	; 0x8424
   35974:	add	r0, sp, #7
   35978:	mov	r2, #2
   3597c:	movt	r1, #3
   35980:	bl	11ca0 <bcmp@plt>
   35984:	cmp	r0, #0
   35988:	beq	359ac <__assert_fail@plt+0x23ae4>
   3598c:	movw	r1, #33830	; 0x8426
   35990:	add	r0, sp, #7
   35994:	mov	r2, #6
   35998:	movt	r1, #3
   3599c:	bl	11ca0 <bcmp@plt>
   359a0:	cmp	r0, #0
   359a4:	mov	r4, r0
   359a8:	movwne	r4, #1
   359ac:	mov	r0, r4
   359b0:	sub	sp, fp, #8
   359b4:	pop	{r4, sl, fp, pc}
   359b8:	push	{r4, r5, r6, r7, fp, lr}
   359bc:	add	fp, sp, #16
   359c0:	mov	r4, r1
   359c4:	mov	r1, #0
   359c8:	mov	r6, r2
   359cc:	bl	11d90 <setlocale@plt>
   359d0:	cmp	r0, #0
   359d4:	beq	35a04 <__assert_fail@plt+0x23b3c>
   359d8:	mov	r7, r0
   359dc:	bl	11cac <strlen@plt>
   359e0:	cmp	r0, r6
   359e4:	bcs	35a20 <__assert_fail@plt+0x23b58>
   359e8:	add	r2, r0, #1
   359ec:	mov	r0, r4
   359f0:	mov	r1, r7
   359f4:	bl	11ab4 <memcpy@plt>
   359f8:	mov	r5, #0
   359fc:	mov	r0, r5
   35a00:	pop	{r4, r5, r6, r7, fp, pc}
   35a04:	mov	r5, #22
   35a08:	cmp	r6, #0
   35a0c:	beq	35a48 <__assert_fail@plt+0x23b80>
   35a10:	mov	r0, #0
   35a14:	strb	r0, [r4]
   35a18:	mov	r0, r5
   35a1c:	pop	{r4, r5, r6, r7, fp, pc}
   35a20:	mov	r5, #34	; 0x22
   35a24:	cmp	r6, #0
   35a28:	beq	35a48 <__assert_fail@plt+0x23b80>
   35a2c:	sub	r6, r6, #1
   35a30:	mov	r0, r4
   35a34:	mov	r1, r7
   35a38:	mov	r2, r6
   35a3c:	bl	11ab4 <memcpy@plt>
   35a40:	mov	r0, #0
   35a44:	strb	r0, [r4, r6]
   35a48:	mov	r0, r5
   35a4c:	pop	{r4, r5, r6, r7, fp, pc}
   35a50:	mov	r1, #0
   35a54:	b	11d90 <setlocale@plt>
   35a58:	eor	r1, r1, #-2147483648	; 0x80000000
   35a5c:	b	35a64 <__assert_fail@plt+0x23b9c>
   35a60:	eor	r3, r3, #-2147483648	; 0x80000000
   35a64:	push	{r4, r5, lr}
   35a68:	lsl	r4, r1, #1
   35a6c:	lsl	r5, r3, #1
   35a70:	teq	r4, r5
   35a74:	teqeq	r0, r2
   35a78:	orrsne	ip, r4, r0
   35a7c:	orrsne	ip, r5, r2
   35a80:	mvnsne	ip, r4, asr #21
   35a84:	mvnsne	ip, r5, asr #21
   35a88:	beq	35c74 <__assert_fail@plt+0x23dac>
   35a8c:	lsr	r4, r4, #21
   35a90:	rsbs	r5, r4, r5, lsr #21
   35a94:	rsblt	r5, r5, #0
   35a98:	ble	35ab8 <__assert_fail@plt+0x23bf0>
   35a9c:	add	r4, r4, r5
   35aa0:	eor	r2, r0, r2
   35aa4:	eor	r3, r1, r3
   35aa8:	eor	r0, r2, r0
   35aac:	eor	r1, r3, r1
   35ab0:	eor	r2, r0, r2
   35ab4:	eor	r3, r1, r3
   35ab8:	cmp	r5, #54	; 0x36
   35abc:	pophi	{r4, r5, pc}
   35ac0:	tst	r1, #-2147483648	; 0x80000000
   35ac4:	lsl	r1, r1, #12
   35ac8:	mov	ip, #1048576	; 0x100000
   35acc:	orr	r1, ip, r1, lsr #12
   35ad0:	beq	35adc <__assert_fail@plt+0x23c14>
   35ad4:	rsbs	r0, r0, #0
   35ad8:	rsc	r1, r1, #0
   35adc:	tst	r3, #-2147483648	; 0x80000000
   35ae0:	lsl	r3, r3, #12
   35ae4:	orr	r3, ip, r3, lsr #12
   35ae8:	beq	35af4 <__assert_fail@plt+0x23c2c>
   35aec:	rsbs	r2, r2, #0
   35af0:	rsc	r3, r3, #0
   35af4:	teq	r4, r5
   35af8:	beq	35c5c <__assert_fail@plt+0x23d94>
   35afc:	sub	r4, r4, #1
   35b00:	rsbs	lr, r5, #32
   35b04:	blt	35b20 <__assert_fail@plt+0x23c58>
   35b08:	lsl	ip, r2, lr
   35b0c:	adds	r0, r0, r2, lsr r5
   35b10:	adc	r1, r1, #0
   35b14:	adds	r0, r0, r3, lsl lr
   35b18:	adcs	r1, r1, r3, asr r5
   35b1c:	b	35b3c <__assert_fail@plt+0x23c74>
   35b20:	sub	r5, r5, #32
   35b24:	add	lr, lr, #32
   35b28:	cmp	r2, #1
   35b2c:	lsl	ip, r3, lr
   35b30:	orrcs	ip, ip, #2
   35b34:	adds	r0, r0, r3, asr r5
   35b38:	adcs	r1, r1, r3, asr #31
   35b3c:	and	r5, r1, #-2147483648	; 0x80000000
   35b40:	bpl	35b50 <__assert_fail@plt+0x23c88>
   35b44:	rsbs	ip, ip, #0
   35b48:	rscs	r0, r0, #0
   35b4c:	rsc	r1, r1, #0
   35b50:	cmp	r1, #1048576	; 0x100000
   35b54:	bcc	35b94 <__assert_fail@plt+0x23ccc>
   35b58:	cmp	r1, #2097152	; 0x200000
   35b5c:	bcc	35b7c <__assert_fail@plt+0x23cb4>
   35b60:	lsrs	r1, r1, #1
   35b64:	rrxs	r0, r0
   35b68:	rrx	ip, ip
   35b6c:	add	r4, r4, #1
   35b70:	lsl	r2, r4, #21
   35b74:	cmn	r2, #4194304	; 0x400000
   35b78:	bcs	35cd4 <__assert_fail@plt+0x23e0c>
   35b7c:	cmp	ip, #-2147483648	; 0x80000000
   35b80:	lsrseq	ip, r0, #1
   35b84:	adcs	r0, r0, #0
   35b88:	adc	r1, r1, r4, lsl #20
   35b8c:	orr	r1, r1, r5
   35b90:	pop	{r4, r5, pc}
   35b94:	lsls	ip, ip, #1
   35b98:	adcs	r0, r0, r0
   35b9c:	adc	r1, r1, r1
   35ba0:	tst	r1, #1048576	; 0x100000
   35ba4:	sub	r4, r4, #1
   35ba8:	bne	35b7c <__assert_fail@plt+0x23cb4>
   35bac:	teq	r1, #0
   35bb0:	moveq	r1, r0
   35bb4:	moveq	r0, #0
   35bb8:	clz	r3, r1
   35bbc:	addeq	r3, r3, #32
   35bc0:	sub	r3, r3, #11
   35bc4:	subs	r2, r3, #32
   35bc8:	bge	35bec <__assert_fail@plt+0x23d24>
   35bcc:	adds	r2, r2, #12
   35bd0:	ble	35be8 <__assert_fail@plt+0x23d20>
   35bd4:	add	ip, r2, #20
   35bd8:	rsb	r2, r2, #12
   35bdc:	lsl	r0, r1, ip
   35be0:	lsr	r1, r1, r2
   35be4:	b	35bfc <__assert_fail@plt+0x23d34>
   35be8:	add	r2, r2, #20
   35bec:	rsble	ip, r2, #32
   35bf0:	lsl	r1, r1, r2
   35bf4:	orrle	r1, r1, r0, lsr ip
   35bf8:	lslle	r0, r0, r2
   35bfc:	subs	r4, r4, r3
   35c00:	addge	r1, r1, r4, lsl #20
   35c04:	orrge	r1, r1, r5
   35c08:	popge	{r4, r5, pc}
   35c0c:	mvn	r4, r4
   35c10:	subs	r4, r4, #31
   35c14:	bge	35c50 <__assert_fail@plt+0x23d88>
   35c18:	adds	r4, r4, #12
   35c1c:	bgt	35c38 <__assert_fail@plt+0x23d70>
   35c20:	add	r4, r4, #20
   35c24:	rsb	r2, r4, #32
   35c28:	lsr	r0, r0, r4
   35c2c:	orr	r0, r0, r1, lsl r2
   35c30:	orr	r1, r5, r1, lsr r4
   35c34:	pop	{r4, r5, pc}
   35c38:	rsb	r4, r4, #12
   35c3c:	rsb	r2, r4, #32
   35c40:	lsr	r0, r0, r2
   35c44:	orr	r0, r0, r1, lsl r4
   35c48:	mov	r1, r5
   35c4c:	pop	{r4, r5, pc}
   35c50:	lsr	r0, r1, r4
   35c54:	mov	r1, r5
   35c58:	pop	{r4, r5, pc}
   35c5c:	teq	r4, #0
   35c60:	eor	r3, r3, #1048576	; 0x100000
   35c64:	eoreq	r1, r1, #1048576	; 0x100000
   35c68:	addeq	r4, r4, #1
   35c6c:	subne	r5, r5, #1
   35c70:	b	35afc <__assert_fail@plt+0x23c34>
   35c74:	mvns	ip, r4, asr #21
   35c78:	mvnsne	ip, r5, asr #21
   35c7c:	beq	35ce4 <__assert_fail@plt+0x23e1c>
   35c80:	teq	r4, r5
   35c84:	teqeq	r0, r2
   35c88:	beq	35c9c <__assert_fail@plt+0x23dd4>
   35c8c:	orrs	ip, r4, r0
   35c90:	moveq	r1, r3
   35c94:	moveq	r0, r2
   35c98:	pop	{r4, r5, pc}
   35c9c:	teq	r1, r3
   35ca0:	movne	r1, #0
   35ca4:	movne	r0, #0
   35ca8:	popne	{r4, r5, pc}
   35cac:	lsrs	ip, r4, #21
   35cb0:	bne	35cc4 <__assert_fail@plt+0x23dfc>
   35cb4:	lsls	r0, r0, #1
   35cb8:	adcs	r1, r1, r1
   35cbc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   35cc0:	pop	{r4, r5, pc}
   35cc4:	adds	r4, r4, #4194304	; 0x400000
   35cc8:	addcc	r1, r1, #1048576	; 0x100000
   35ccc:	popcc	{r4, r5, pc}
   35cd0:	and	r5, r1, #-2147483648	; 0x80000000
   35cd4:	orr	r1, r5, #2130706432	; 0x7f000000
   35cd8:	orr	r1, r1, #15728640	; 0xf00000
   35cdc:	mov	r0, #0
   35ce0:	pop	{r4, r5, pc}
   35ce4:	mvns	ip, r4, asr #21
   35ce8:	movne	r1, r3
   35cec:	movne	r0, r2
   35cf0:	mvnseq	ip, r5, asr #21
   35cf4:	movne	r3, r1
   35cf8:	movne	r2, r0
   35cfc:	orrs	r4, r0, r1, lsl #12
   35d00:	orrseq	r5, r2, r3, lsl #12
   35d04:	teqeq	r1, r3
   35d08:	orrne	r1, r1, #524288	; 0x80000
   35d0c:	pop	{r4, r5, pc}
   35d10:	teq	r0, #0
   35d14:	moveq	r1, #0
   35d18:	bxeq	lr
   35d1c:	push	{r4, r5, lr}
   35d20:	mov	r4, #1024	; 0x400
   35d24:	add	r4, r4, #50	; 0x32
   35d28:	mov	r5, #0
   35d2c:	mov	r1, #0
   35d30:	b	35bac <__assert_fail@plt+0x23ce4>
   35d34:	teq	r0, #0
   35d38:	moveq	r1, #0
   35d3c:	bxeq	lr
   35d40:	push	{r4, r5, lr}
   35d44:	mov	r4, #1024	; 0x400
   35d48:	add	r4, r4, #50	; 0x32
   35d4c:	ands	r5, r0, #-2147483648	; 0x80000000
   35d50:	rsbmi	r0, r0, #0
   35d54:	mov	r1, #0
   35d58:	b	35bac <__assert_fail@plt+0x23ce4>
   35d5c:	lsls	r2, r0, #1
   35d60:	asr	r1, r2, #3
   35d64:	rrx	r1, r1
   35d68:	lsl	r0, r2, #28
   35d6c:	andsne	r3, r2, #-16777216	; 0xff000000
   35d70:	teqne	r3, #-16777216	; 0xff000000
   35d74:	eorne	r1, r1, #939524096	; 0x38000000
   35d78:	bxne	lr
   35d7c:	bics	r2, r2, #-16777216	; 0xff000000
   35d80:	bxeq	lr
   35d84:	teq	r3, #-16777216	; 0xff000000
   35d88:	orreq	r1, r1, #524288	; 0x80000
   35d8c:	bxeq	lr
   35d90:	push	{r4, r5, lr}
   35d94:	mov	r4, #896	; 0x380
   35d98:	and	r5, r1, #-2147483648	; 0x80000000
   35d9c:	bic	r1, r1, #-2147483648	; 0x80000000
   35da0:	b	35bac <__assert_fail@plt+0x23ce4>
   35da4:	orrs	r2, r0, r1
   35da8:	bxeq	lr
   35dac:	push	{r4, r5, lr}
   35db0:	mov	r5, #0
   35db4:	b	35dd4 <__assert_fail@plt+0x23f0c>
   35db8:	orrs	r2, r0, r1
   35dbc:	bxeq	lr
   35dc0:	push	{r4, r5, lr}
   35dc4:	ands	r5, r1, #-2147483648	; 0x80000000
   35dc8:	bpl	35dd4 <__assert_fail@plt+0x23f0c>
   35dcc:	rsbs	r0, r0, #0
   35dd0:	rsc	r1, r1, #0
   35dd4:	mov	r4, #1024	; 0x400
   35dd8:	add	r4, r4, #50	; 0x32
   35ddc:	lsrs	ip, r1, #22
   35de0:	beq	35b50 <__assert_fail@plt+0x23c88>
   35de4:	mov	r2, #3
   35de8:	lsrs	ip, ip, #3
   35dec:	addne	r2, r2, #3
   35df0:	lsrs	ip, ip, #3
   35df4:	addne	r2, r2, #3
   35df8:	add	r2, r2, ip, lsr #3
   35dfc:	rsb	r3, r2, #32
   35e00:	lsl	ip, r0, r3
   35e04:	lsr	r0, r0, r2
   35e08:	orr	r0, r0, r1, lsl r3
   35e0c:	lsr	r1, r1, r2
   35e10:	add	r4, r4, r2
   35e14:	b	35b50 <__assert_fail@plt+0x23c88>
   35e18:	cmp	r3, #0
   35e1c:	cmpeq	r2, #0
   35e20:	bne	35e44 <__assert_fail@plt+0x23f7c>
   35e24:	cmp	r1, #0
   35e28:	movlt	r1, #-2147483648	; 0x80000000
   35e2c:	movlt	r0, #0
   35e30:	blt	35e40 <__assert_fail@plt+0x23f78>
   35e34:	cmpeq	r0, #0
   35e38:	mvnne	r1, #-2147483648	; 0x80000000
   35e3c:	mvnne	r0, #0
   35e40:	b	35f28 <__assert_fail@plt+0x24060>
   35e44:	sub	sp, sp, #8
   35e48:	push	{sp, lr}
   35e4c:	cmp	r1, #0
   35e50:	blt	35e70 <__assert_fail@plt+0x23fa8>
   35e54:	cmp	r3, #0
   35e58:	blt	35ea4 <__assert_fail@plt+0x23fdc>
   35e5c:	bl	35f78 <__assert_fail@plt+0x240b0>
   35e60:	ldr	lr, [sp, #4]
   35e64:	add	sp, sp, #8
   35e68:	pop	{r2, r3}
   35e6c:	bx	lr
   35e70:	rsbs	r0, r0, #0
   35e74:	sbc	r1, r1, r1, lsl #1
   35e78:	cmp	r3, #0
   35e7c:	blt	35ec8 <__assert_fail@plt+0x24000>
   35e80:	bl	35f78 <__assert_fail@plt+0x240b0>
   35e84:	ldr	lr, [sp, #4]
   35e88:	add	sp, sp, #8
   35e8c:	pop	{r2, r3}
   35e90:	rsbs	r0, r0, #0
   35e94:	sbc	r1, r1, r1, lsl #1
   35e98:	rsbs	r2, r2, #0
   35e9c:	sbc	r3, r3, r3, lsl #1
   35ea0:	bx	lr
   35ea4:	rsbs	r2, r2, #0
   35ea8:	sbc	r3, r3, r3, lsl #1
   35eac:	bl	35f78 <__assert_fail@plt+0x240b0>
   35eb0:	ldr	lr, [sp, #4]
   35eb4:	add	sp, sp, #8
   35eb8:	pop	{r2, r3}
   35ebc:	rsbs	r0, r0, #0
   35ec0:	sbc	r1, r1, r1, lsl #1
   35ec4:	bx	lr
   35ec8:	rsbs	r2, r2, #0
   35ecc:	sbc	r3, r3, r3, lsl #1
   35ed0:	bl	35f78 <__assert_fail@plt+0x240b0>
   35ed4:	ldr	lr, [sp, #4]
   35ed8:	add	sp, sp, #8
   35edc:	pop	{r2, r3}
   35ee0:	rsbs	r2, r2, #0
   35ee4:	sbc	r3, r3, r3, lsl #1
   35ee8:	bx	lr
   35eec:	cmp	r3, #0
   35ef0:	cmpeq	r2, #0
   35ef4:	bne	35f0c <__assert_fail@plt+0x24044>
   35ef8:	cmp	r1, #0
   35efc:	cmpeq	r0, #0
   35f00:	mvnne	r1, #0
   35f04:	mvnne	r0, #0
   35f08:	b	35f28 <__assert_fail@plt+0x24060>
   35f0c:	sub	sp, sp, #8
   35f10:	push	{sp, lr}
   35f14:	bl	35f78 <__assert_fail@plt+0x240b0>
   35f18:	ldr	lr, [sp, #4]
   35f1c:	add	sp, sp, #8
   35f20:	pop	{r2, r3}
   35f24:	bx	lr
   35f28:	push	{r1, lr}
   35f2c:	mov	r0, #8
   35f30:	bl	11a00 <raise@plt>
   35f34:	pop	{r1, pc}
   35f38:	vmov	d6, r0, r1
   35f3c:	vldr	d7, [pc, #36]	; 35f68 <__assert_fail@plt+0x240a0>
   35f40:	vldr	d5, [pc, #40]	; 35f70 <__assert_fail@plt+0x240a8>
   35f44:	vmul.f64	d7, d6, d7
   35f48:	vcvt.u32.f64	s14, d7
   35f4c:	vcvt.f64.u32	d4, s14
   35f50:	vmov	r1, s14
   35f54:	vmls.f64	d6, d4, d5
   35f58:	vcvt.u32.f64	s15, d6
   35f5c:	vmov	r0, s15
   35f60:	bx	lr
   35f64:	nop			; (mov r0, r0)
   35f68:	andeq	r0, r0, r0
   35f6c:	ldclcc	0, cr0, [r0]
   35f70:	andeq	r0, r0, r0
   35f74:	mvnsmi	r0, r0
   35f78:	cmp	r1, r3
   35f7c:	cmpeq	r0, r2
   35f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35f84:	mov	r4, r0
   35f88:	movcc	r0, #0
   35f8c:	mov	r5, r1
   35f90:	ldr	lr, [sp, #36]	; 0x24
   35f94:	movcc	r1, r0
   35f98:	bcc	36094 <__assert_fail@plt+0x241cc>
   35f9c:	cmp	r3, #0
   35fa0:	clzeq	ip, r2
   35fa4:	clzne	ip, r3
   35fa8:	addeq	ip, ip, #32
   35fac:	cmp	r5, #0
   35fb0:	clzeq	r1, r4
   35fb4:	addeq	r1, r1, #32
   35fb8:	clzne	r1, r5
   35fbc:	sub	ip, ip, r1
   35fc0:	sub	sl, ip, #32
   35fc4:	lsl	r9, r3, ip
   35fc8:	rsb	fp, ip, #32
   35fcc:	orr	r9, r9, r2, lsl sl
   35fd0:	orr	r9, r9, r2, lsr fp
   35fd4:	lsl	r8, r2, ip
   35fd8:	cmp	r5, r9
   35fdc:	cmpeq	r4, r8
   35fe0:	movcc	r0, #0
   35fe4:	movcc	r1, r0
   35fe8:	bcc	36004 <__assert_fail@plt+0x2413c>
   35fec:	mov	r0, #1
   35ff0:	subs	r4, r4, r8
   35ff4:	lsl	r1, r0, sl
   35ff8:	orr	r1, r1, r0, lsr fp
   35ffc:	lsl	r0, r0, ip
   36000:	sbc	r5, r5, r9
   36004:	cmp	ip, #0
   36008:	beq	36094 <__assert_fail@plt+0x241cc>
   3600c:	lsr	r6, r8, #1
   36010:	orr	r6, r6, r9, lsl #31
   36014:	lsr	r7, r9, #1
   36018:	mov	r2, ip
   3601c:	b	36040 <__assert_fail@plt+0x24178>
   36020:	subs	r3, r4, r6
   36024:	sbc	r8, r5, r7
   36028:	adds	r3, r3, r3
   3602c:	adc	r8, r8, r8
   36030:	adds	r4, r3, #1
   36034:	adc	r5, r8, #0
   36038:	subs	r2, r2, #1
   3603c:	beq	3605c <__assert_fail@plt+0x24194>
   36040:	cmp	r5, r7
   36044:	cmpeq	r4, r6
   36048:	bcs	36020 <__assert_fail@plt+0x24158>
   3604c:	adds	r4, r4, r4
   36050:	adc	r5, r5, r5
   36054:	subs	r2, r2, #1
   36058:	bne	36040 <__assert_fail@plt+0x24178>
   3605c:	lsr	r3, r4, ip
   36060:	orr	r3, r3, r5, lsl fp
   36064:	lsr	r2, r5, ip
   36068:	orr	r3, r3, r5, lsr sl
   3606c:	adds	r0, r0, r4
   36070:	mov	r4, r3
   36074:	lsl	r3, r2, ip
   36078:	orr	r3, r3, r4, lsl sl
   3607c:	lsl	ip, r4, ip
   36080:	orr	r3, r3, r4, lsr fp
   36084:	adc	r1, r1, r5
   36088:	subs	r0, r0, ip
   3608c:	mov	r5, r2
   36090:	sbc	r1, r1, r3
   36094:	cmp	lr, #0
   36098:	strdne	r4, [lr]
   3609c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   360a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   360a4:	mov	r7, r0
   360a8:	ldr	r6, [pc, #72]	; 360f8 <__assert_fail@plt+0x24230>
   360ac:	ldr	r5, [pc, #72]	; 360fc <__assert_fail@plt+0x24234>
   360b0:	add	r6, pc, r6
   360b4:	add	r5, pc, r5
   360b8:	sub	r6, r6, r5
   360bc:	mov	r8, r1
   360c0:	mov	r9, r2
   360c4:	bl	119a4 <pthread_mutex_unlock@plt-0x20>
   360c8:	asrs	r6, r6, #2
   360cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   360d0:	mov	r4, #0
   360d4:	add	r4, r4, #1
   360d8:	ldr	r3, [r5], #4
   360dc:	mov	r2, r9
   360e0:	mov	r1, r8
   360e4:	mov	r0, r7
   360e8:	blx	r3
   360ec:	cmp	r6, r4
   360f0:	bne	360d4 <__assert_fail@plt+0x2420c>
   360f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   360f8:	andeq	r2, r1, r4, asr lr
   360fc:	andeq	r2, r1, ip, asr #28
   36100:	bx	lr
   36104:	ldr	r3, [pc, #12]	; 36118 <__assert_fail@plt+0x24250>
   36108:	mov	r1, #0
   3610c:	add	r3, pc, r3
   36110:	ldr	r2, [r3]
   36114:	b	11d00 <__cxa_atexit@plt>
   36118:	strheq	r3, [r1], -r0

Disassembly of section .fini:

0003611c <.fini>:
   3611c:	push	{r3, lr}
   36120:	pop	{r3, pc}
