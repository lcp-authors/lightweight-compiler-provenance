
../repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/reflection_test:     file format elf32-littlearm


Disassembly of section .init:

00010784 <.init>:
   10784:	push	{r3, lr}
   10788:	bl	108f8 <_start@@Base+0x3c>
   1078c:	pop	{r3, pc}

Disassembly of section .plt:

00010790 <strcmp@plt-0x14>:
   10790:	push	{lr}		; (str lr, [sp, #-4]!)
   10794:	ldr	lr, [pc, #4]	; 107a0 <strcmp@plt-0x4>
   10798:	add	lr, pc, lr
   1079c:	ldr	pc, [lr, #8]!
   107a0:	andeq	r1, r1, r0, ror #16

000107a4 <strcmp@plt>:
   107a4:	add	ip, pc, #0, 12
   107a8:	add	ip, ip, #69632	; 0x11000
   107ac:	ldr	pc, [ip, #2144]!	; 0x860

000107b0 <printf@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #69632	; 0x11000
   107b8:	ldr	pc, [ip, #2136]!	; 0x858

000107bc <fopen@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #69632	; 0x11000
   107c4:	ldr	pc, [ip, #2128]!	; 0x850

000107c8 <free@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #69632	; 0x11000
   107d0:	ldr	pc, [ip, #2120]!	; 0x848

000107d4 <ftell@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #69632	; 0x11000
   107dc:	ldr	pc, [ip, #2112]!	; 0x840

000107e0 <rewind@plt>:
   107e0:	add	ip, pc, #0, 12
   107e4:	add	ip, ip, #69632	; 0x11000
   107e8:	ldr	pc, [ip, #2104]!	; 0x838

000107ec <fread@plt>:
   107ec:	add	ip, pc, #0, 12
   107f0:	add	ip, ip, #69632	; 0x11000
   107f4:	ldr	pc, [ip, #2096]!	; 0x830

000107f8 <puts@plt>:
   107f8:	add	ip, pc, #0, 12
   107fc:	add	ip, ip, #69632	; 0x11000
   10800:	ldr	pc, [ip, #2088]!	; 0x828

00010804 <malloc@plt>:
   10804:	add	ip, pc, #0, 12
   10808:	add	ip, ip, #69632	; 0x11000
   1080c:	ldr	pc, [ip, #2080]!	; 0x820

00010810 <__libc_start_main@plt>:
   10810:	add	ip, pc, #0, 12
   10814:	add	ip, ip, #69632	; 0x11000
   10818:	ldr	pc, [ip, #2072]!	; 0x818

0001081c <__gmon_start__@plt>:
   1081c:	add	ip, pc, #0, 12
   10820:	add	ip, ip, #69632	; 0x11000
   10824:	ldr	pc, [ip, #2064]!	; 0x810

00010828 <exit@plt>:
   10828:	add	ip, pc, #0, 12
   1082c:	add	ip, ip, #69632	; 0x11000
   10830:	ldr	pc, [ip, #2056]!	; 0x808

00010834 <fclose@plt>:
   10834:	add	ip, pc, #0, 12
   10838:	add	ip, ip, #69632	; 0x11000
   1083c:	ldr	pc, [ip, #2048]!	; 0x800

00010840 <fseek@plt>:
   10840:	add	ip, pc, #0, 12
   10844:	add	ip, ip, #69632	; 0x11000
   10848:	ldr	pc, [ip, #2040]!	; 0x7f8

0001084c <fputs@plt>:
   1084c:	add	ip, pc, #0, 12
   10850:	add	ip, ip, #69632	; 0x11000
   10854:	ldr	pc, [ip, #2032]!	; 0x7f0

00010858 <abort@plt>:
   10858:	add	ip, pc, #0, 12
   1085c:	add	ip, ip, #69632	; 0x11000
   10860:	ldr	pc, [ip, #2024]!	; 0x7e8

00010864 <__assert_fail@plt>:
   10864:	add	ip, pc, #0, 12
   10868:	add	ip, ip, #69632	; 0x11000
   1086c:	ldr	pc, [ip, #2016]!	; 0x7e0

Disassembly of section .text:

00010870 <main@@Base>:
   10870:	sub	r3, r0, #1
   10874:	cmp	r3, #1
   10878:	bls	10898 <main@@Base+0x28>
   1087c:	ldr	r3, [pc, #44]	; 108b0 <main@@Base+0x40>
   10880:	push	{r4, lr}
   10884:	ldr	r1, [r3]
   10888:	ldr	r0, [pc, #36]	; 108b4 <main@@Base+0x44>
   1088c:	bl	1084c <fputs@plt>
   10890:	mov	r0, #1
   10894:	bl	10828 <exit@plt>
   10898:	cmp	r0, #2
   1089c:	ldr	r3, [pc, #20]	; 108b8 <main@@Base+0x48>
   108a0:	ldreq	r2, [r1, #4]
   108a4:	streq	r2, [r3]
   108a8:	ldr	r0, [r3]
   108ac:	b	10d74 <test_schema@@Base>
   108b0:	andeq	r2, r2, r0, rrx
   108b4:	andeq	r1, r1, fp, lsl #12
   108b8:	andeq	r2, r2, ip, asr r0

000108bc <_start@@Base>:
   108bc:	mov	fp, #0
   108c0:	mov	lr, #0
   108c4:	pop	{r1}		; (ldr r1, [sp], #4)
   108c8:	mov	r2, sp
   108cc:	push	{r2}		; (str r2, [sp, #-4]!)
   108d0:	push	{r0}		; (str r0, [sp, #-4]!)
   108d4:	ldr	ip, [pc, #16]	; 108ec <_start@@Base+0x30>
   108d8:	push	{ip}		; (str ip, [sp, #-4]!)
   108dc:	ldr	r0, [pc, #12]	; 108f0 <_start@@Base+0x34>
   108e0:	ldr	r3, [pc, #12]	; 108f4 <_start@@Base+0x38>
   108e4:	bl	10810 <__libc_start_main@plt>
   108e8:	bl	10858 <abort@plt>
   108ec:	andeq	r1, r1, r0, lsr r2
   108f0:	andeq	r0, r1, r0, ror r8
   108f4:	ldrdeq	r1, [r1], -r0
   108f8:	ldr	r3, [pc, #20]	; 10914 <_start@@Base+0x58>
   108fc:	ldr	r2, [pc, #20]	; 10918 <_start@@Base+0x5c>
   10900:	add	r3, pc, r3
   10904:	ldr	r2, [r3, r2]
   10908:	cmp	r2, #0
   1090c:	bxeq	lr
   10910:	b	1081c <__gmon_start__@plt>
   10914:	strdeq	r1, [r1], -r8
   10918:	andeq	r0, r0, r0, asr r0
   1091c:	ldr	r3, [pc, #28]	; 10940 <_start@@Base+0x84>
   10920:	ldr	r0, [pc, #28]	; 10944 <_start@@Base+0x88>
   10924:	sub	r3, r3, r0
   10928:	cmp	r3, #6
   1092c:	bxls	lr
   10930:	ldr	r3, [pc, #16]	; 10948 <_start@@Base+0x8c>
   10934:	cmp	r3, #0
   10938:	bxeq	lr
   1093c:	bx	r3
   10940:	andeq	r2, r2, r3, rrx
   10944:	andeq	r2, r2, r0, rrx
   10948:	andeq	r0, r0, r0
   1094c:	ldr	r1, [pc, #36]	; 10978 <_start@@Base+0xbc>
   10950:	ldr	r0, [pc, #36]	; 1097c <_start@@Base+0xc0>
   10954:	sub	r1, r1, r0
   10958:	asr	r1, r1, #2
   1095c:	add	r1, r1, r1, lsr #31
   10960:	asrs	r1, r1, #1
   10964:	bxeq	lr
   10968:	ldr	r3, [pc, #16]	; 10980 <_start@@Base+0xc4>
   1096c:	cmp	r3, #0
   10970:	bxeq	lr
   10974:	bx	r3
   10978:	andeq	r2, r2, r0, rrx
   1097c:	andeq	r2, r2, r0, rrx
   10980:	andeq	r0, r0, r0
   10984:	push	{r4, lr}
   10988:	ldr	r4, [pc, #24]	; 109a8 <_start@@Base+0xec>
   1098c:	ldrb	r3, [r4]
   10990:	cmp	r3, #0
   10994:	popne	{r4, pc}
   10998:	bl	1091c <_start@@Base+0x60>
   1099c:	mov	r3, #1
   109a0:	strb	r3, [r4]
   109a4:	pop	{r4, pc}
   109a8:	andeq	r2, r2, r4, rrx
   109ac:	ldr	r0, [pc, #40]	; 109dc <_start@@Base+0x120>
   109b0:	ldr	r3, [r0]
   109b4:	cmp	r3, #0
   109b8:	bne	109c0 <_start@@Base+0x104>
   109bc:	b	1094c <_start@@Base+0x90>
   109c0:	ldr	r3, [pc, #24]	; 109e0 <_start@@Base+0x124>
   109c4:	cmp	r3, #0
   109c8:	beq	109bc <_start@@Base+0x100>
   109cc:	push	{r4, lr}
   109d0:	blx	r3
   109d4:	pop	{r4, lr}
   109d8:	b	1094c <_start@@Base+0x90>
   109dc:	andeq	r1, r2, r4, lsl pc
   109e0:	andeq	r0, r0, r0
   109e4:	cmp	r0, #0
   109e8:	add	r2, r0, r1, lsl #2
   109ec:	beq	109fc <_start@@Base+0x140>
   109f0:	ldr	r3, [r0, #-4]
   109f4:	cmp	r1, r3
   109f8:	bcc	10a14 <_start@@Base+0x158>
   109fc:	push	{r4, lr}
   10a00:	mov	r2, #215	; 0xd7
   10a04:	ldr	r3, [pc, #20]	; 10a20 <_start@@Base+0x164>
   10a08:	ldr	r1, [pc, #20]	; 10a24 <_start@@Base+0x168>
   10a0c:	ldr	r0, [pc, #20]	; 10a28 <_start@@Base+0x16c>
   10a10:	bl	10864 <__assert_fail@plt>
   10a14:	ldr	r0, [r0, r1, lsl #2]
   10a18:	add	r0, r2, r0
   10a1c:	bx	lr
   10a20:	andeq	r1, r1, r0, asr #4
   10a24:	andeq	r1, r1, r0, asr r3
   10a28:	andeq	r1, r1, lr, lsr #7
   10a2c:	cmp	r0, #0
   10a30:	push	{r4, lr}
   10a34:	bne	10a4c <_start@@Base+0x190>
   10a38:	ldr	r3, [pc, #84]	; 10a94 <_start@@Base+0x1d8>
   10a3c:	ldr	r1, [pc, #84]	; 10a98 <_start@@Base+0x1dc>
   10a40:	ldr	r0, [pc, #84]	; 10a9c <_start@@Base+0x1e0>
   10a44:	mov	r2, #218	; 0xda
   10a48:	bl	10864 <__assert_fail@plt>
   10a4c:	ldr	r3, [r0]
   10a50:	sub	r3, r0, r3
   10a54:	ldrh	r2, [r3]
   10a58:	cmp	r2, #5
   10a5c:	bls	10a6c <_start@@Base+0x1b0>
   10a60:	ldrh	r2, [r3, #4]
   10a64:	cmp	r2, #0
   10a68:	bne	10a80 <_start@@Base+0x1c4>
   10a6c:	ldr	r3, [pc, #32]	; 10a94 <_start@@Base+0x1d8>
   10a70:	mov	r2, #218	; 0xda
   10a74:	ldr	r1, [pc, #28]	; 10a98 <_start@@Base+0x1dc>
   10a78:	ldr	r0, [pc, #32]	; 10aa0 <_start@@Base+0x1e4>
   10a7c:	b	10a48 <_start@@Base+0x18c>
   10a80:	add	r3, r0, r2
   10a84:	ldr	r0, [r0, r2]
   10a88:	add	r0, r0, #4
   10a8c:	add	r0, r3, r0
   10a90:	pop	{r4, pc}
   10a94:	andeq	r1, r1, r9, asr r2
   10a98:	andeq	r1, r1, r0, asr r3
   10a9c:	andeq	r1, r1, r5, ror #7
   10aa0:	andeq	r1, r1, fp, lsl #8
   10aa4:	cmp	r0, #0
   10aa8:	push	{r4, lr}
   10aac:	bne	10ac4 <_start@@Base+0x208>
   10ab0:	ldr	r3, [pc, #84]	; 10b0c <_start@@Base+0x250>
   10ab4:	ldr	r1, [pc, #84]	; 10b10 <_start@@Base+0x254>
   10ab8:	ldr	r0, [pc, #84]	; 10b14 <_start@@Base+0x258>
   10abc:	mov	r2, #195	; 0xc3
   10ac0:	bl	10864 <__assert_fail@plt>
   10ac4:	ldr	r3, [r0]
   10ac8:	sub	r3, r0, r3
   10acc:	ldrh	r2, [r3]
   10ad0:	cmp	r2, #5
   10ad4:	bls	10ae4 <_start@@Base+0x228>
   10ad8:	ldrh	r2, [r3, #4]
   10adc:	cmp	r2, #0
   10ae0:	bne	10af8 <_start@@Base+0x23c>
   10ae4:	ldr	r3, [pc, #32]	; 10b0c <_start@@Base+0x250>
   10ae8:	mov	r2, #195	; 0xc3
   10aec:	ldr	r1, [pc, #28]	; 10b10 <_start@@Base+0x254>
   10af0:	ldr	r0, [pc, #32]	; 10b18 <_start@@Base+0x25c>
   10af4:	b	10ac0 <_start@@Base+0x204>
   10af8:	add	r3, r0, r2
   10afc:	ldr	r0, [r0, r2]
   10b00:	add	r0, r0, #4
   10b04:	add	r0, r3, r0
   10b08:	pop	{r4, pc}
   10b0c:	andeq	r1, r1, r0, ror r2
   10b10:	andeq	r1, r1, r0, asr r3
   10b14:	andeq	r1, r1, r5, ror #7
   10b18:	andeq	r1, r1, fp, lsl #8
   10b1c:	cmp	r0, #0
   10b20:	bne	10b3c <_start@@Base+0x280>
   10b24:	push	{r4, lr}
   10b28:	mov	r2, #204	; 0xcc
   10b2c:	ldr	r3, [pc, #60]	; 10b70 <_start@@Base+0x2b4>
   10b30:	ldr	r1, [pc, #60]	; 10b74 <_start@@Base+0x2b8>
   10b34:	ldr	r0, [pc, #60]	; 10b78 <_start@@Base+0x2bc>
   10b38:	bl	10864 <__assert_fail@plt>
   10b3c:	ldr	r3, [r0]
   10b40:	sub	r3, r0, r3
   10b44:	ldrh	r2, [r3]
   10b48:	cmp	r2, #13
   10b4c:	bls	10b64 <_start@@Base+0x2a8>
   10b50:	ldrh	r3, [r3, #12]
   10b54:	cmp	r3, #0
   10b58:	beq	10b64 <_start@@Base+0x2a8>
   10b5c:	ldrd	r0, [r0, r3]
   10b60:	bx	lr
   10b64:	mov	r0, #0
   10b68:	mov	r1, #0
   10b6c:	b	10b60 <_start@@Base+0x2a4>
   10b70:	andeq	r1, r1, r6, lsl #5
   10b74:	andeq	r1, r1, r0, asr r3
   10b78:	andeq	r1, r1, r5, ror #7
   10b7c:	cmp	r0, #0
   10b80:	add	r2, r0, r1, lsl #2
   10b84:	beq	10b94 <_start@@Base+0x2d8>
   10b88:	ldr	r3, [r0, #-4]
   10b8c:	cmp	r1, r3
   10b90:	bcc	10bac <_start@@Base+0x2f0>
   10b94:	push	{r4, lr}
   10b98:	mov	r2, #192	; 0xc0
   10b9c:	ldr	r3, [pc, #20]	; 10bb8 <_start@@Base+0x2fc>
   10ba0:	ldr	r1, [pc, #20]	; 10bbc <_start@@Base+0x300>
   10ba4:	ldr	r0, [pc, #20]	; 10bc0 <_start@@Base+0x304>
   10ba8:	bl	10864 <__assert_fail@plt>
   10bac:	ldr	r0, [r0, r1, lsl #2]
   10bb0:	add	r0, r2, r0
   10bb4:	bx	lr
   10bb8:	andeq	r1, r1, r7, lsr #5
   10bbc:	andeq	r1, r1, r0, asr r3
   10bc0:	andeq	r1, r1, lr, lsr #7
   10bc4:	push	{r4, r5, r6, r7, r8, lr}
   10bc8:	subs	r5, r0, #0
   10bcc:	beq	10c4c <_start@@Base+0x390>
   10bd0:	ldr	r4, [r5, #-4]
   10bd4:	cmp	r4, #0
   10bd8:	beq	10c4c <_start@@Base+0x390>
   10bdc:	mov	r7, r1
   10be0:	sub	r4, r4, #1
   10be4:	mov	r8, #0
   10be8:	cmp	r4, r8
   10bec:	bhi	10c1c <_start@@Base+0x360>
   10bf0:	bne	10c4c <_start@@Base+0x390>
   10bf4:	mov	r1, r4
   10bf8:	mov	r0, r5
   10bfc:	bl	10b7c <_start@@Base+0x2c0>
   10c00:	bl	10aa4 <_start@@Base+0x1e8>
   10c04:	mov	r1, r7
   10c08:	bl	107a4 <strcmp@plt>
   10c0c:	cmp	r0, #0
   10c10:	mvnne	r4, #0
   10c14:	mov	r0, r4
   10c18:	pop	{r4, r5, r6, r7, r8, pc}
   10c1c:	sub	r6, r4, r8
   10c20:	mov	r0, r5
   10c24:	add	r6, r8, r6, lsr #1
   10c28:	mov	r1, r6
   10c2c:	bl	10b7c <_start@@Base+0x2c0>
   10c30:	bl	10aa4 <_start@@Base+0x1e8>
   10c34:	mov	r1, r7
   10c38:	bl	107a4 <strcmp@plt>
   10c3c:	cmp	r0, #0
   10c40:	addlt	r8, r6, #1
   10c44:	movge	r4, r6
   10c48:	b	10be8 <_start@@Base+0x32c>
   10c4c:	mvn	r4, #0
   10c50:	b	10c14 <_start@@Base+0x358>
   10c54:	cmp	r0, #0
   10c58:	push	{r4, lr}
   10c5c:	bne	10c74 <_start@@Base+0x3b8>
   10c60:	ldr	r3, [pc, #80]	; 10cb8 <_start@@Base+0x3fc>
   10c64:	ldr	r1, [pc, #80]	; 10cbc <_start@@Base+0x400>
   10c68:	ldr	r0, [pc, #80]	; 10cc0 <_start@@Base+0x404>
   10c6c:	mov	r2, #201	; 0xc9
   10c70:	bl	10864 <__assert_fail@plt>
   10c74:	ldr	r3, [r0]
   10c78:	sub	r3, r0, r3
   10c7c:	ldrh	r2, [r3]
   10c80:	cmp	r2, #7
   10c84:	bls	10c94 <_start@@Base+0x3d8>
   10c88:	ldrh	r2, [r3, #6]
   10c8c:	cmp	r2, #0
   10c90:	bne	10ca8 <_start@@Base+0x3ec>
   10c94:	ldr	r3, [pc, #28]	; 10cb8 <_start@@Base+0x3fc>
   10c98:	mov	r2, #201	; 0xc9
   10c9c:	ldr	r1, [pc, #24]	; 10cbc <_start@@Base+0x400>
   10ca0:	ldr	r0, [pc, #28]	; 10cc4 <_start@@Base+0x408>
   10ca4:	b	10c70 <_start@@Base+0x3b4>
   10ca8:	add	r3, r0, r2
   10cac:	ldr	r0, [r0, r2]
   10cb0:	add	r0, r3, r0
   10cb4:	pop	{r4, pc}
   10cb8:			; <UNDEFINED> instruction: 0x000112bf
   10cbc:	andeq	r1, r1, r0, asr r3
   10cc0:	andeq	r1, r1, r5, ror #7
   10cc4:	andeq	r1, r1, fp, lsl #8
   10cc8:	subs	r2, r0, #0
   10ccc:	bne	10ce8 <_start@@Base+0x42c>
   10cd0:	push	{r4, lr}
   10cd4:	mov	r2, #147	; 0x93
   10cd8:	ldr	r3, [pc, #48]	; 10d10 <_start@@Base+0x454>
   10cdc:	ldr	r1, [pc, #48]	; 10d14 <_start@@Base+0x458>
   10ce0:	ldr	r0, [pc, #48]	; 10d18 <_start@@Base+0x45c>
   10ce4:	bl	10864 <__assert_fail@plt>
   10ce8:	ldr	r3, [r2]
   10cec:	sub	r3, r2, r3
   10cf0:	ldrh	r1, [r3]
   10cf4:	cmp	r1, #5
   10cf8:	movls	r0, #0
   10cfc:	bls	10d0c <_start@@Base+0x450>
   10d00:	ldrh	r0, [r3, #4]
   10d04:	cmp	r0, #0
   10d08:	ldrsbne	r0, [r2, r0]
   10d0c:	bx	lr
   10d10:	ldrdeq	r1, [r1], -r5
   10d14:	andeq	r1, r1, r0, asr r3
   10d18:	andeq	r1, r1, r5, ror #7
   10d1c:	cmp	r0, #0
   10d20:	bne	10d3c <_start@@Base+0x480>
   10d24:	push	{r4, lr}
   10d28:	mov	r2, #149	; 0x95
   10d2c:	ldr	r3, [pc, #52]	; 10d68 <_start@@Base+0x4ac>
   10d30:	ldr	r1, [pc, #52]	; 10d6c <_start@@Base+0x4b0>
   10d34:	ldr	r0, [pc, #52]	; 10d70 <_start@@Base+0x4b4>
   10d38:	bl	10864 <__assert_fail@plt>
   10d3c:	ldr	r3, [r0]
   10d40:	sub	r3, r0, r3
   10d44:	ldrh	r2, [r3]
   10d48:	cmp	r2, #9
   10d4c:	bls	10d60 <_start@@Base+0x4a4>
   10d50:	ldrh	r3, [r3, #8]
   10d54:	cmp	r3, #0
   10d58:	ldrne	r0, [r0, r3]
   10d5c:	bne	10d64 <_start@@Base+0x4a8>
   10d60:	mvn	r0, #0
   10d64:	bx	lr
   10d68:	andeq	r1, r1, pc, ror #5
   10d6c:	andeq	r1, r1, r0, asr r3
   10d70:	andeq	r1, r1, r5, ror #7

00010d74 <test_schema@@Base>:
   10d74:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10d78:	ldr	r1, [pc, #992]	; 11160 <test_schema@@Base+0x3ec>
   10d7c:	bl	107bc <fopen@plt>
   10d80:	subs	r4, r0, #0
   10d84:	beq	10df0 <test_schema@@Base+0x7c>
   10d88:	mov	r2, #2
   10d8c:	mov	r1, #0
   10d90:	bl	10840 <fseek@plt>
   10d94:	mov	r0, r4
   10d98:	bl	107d4 <ftell@plt>
   10d9c:	ldr	r3, [pc, #960]	; 11164 <test_schema@@Base+0x3f0>
   10da0:	cmp	r0, r3
   10da4:	mov	r8, r0
   10da8:	bhi	10dd4 <test_schema@@Base+0x60>
   10dac:	mov	r0, r4
   10db0:	bl	107e0 <rewind@plt>
   10db4:	cmp	r8, #0
   10db8:	movne	r0, r8
   10dbc:	moveq	r0, #1
   10dc0:	bl	10804 <malloc@plt>
   10dc4:	subs	r5, r0, #0
   10dc8:	movne	r7, #0
   10dcc:	movne	r9, #1
   10dd0:	bne	10e0c <test_schema@@Base+0x98>
   10dd4:	mov	r5, #0
   10dd8:	mov	r0, r4
   10ddc:	bl	10834 <fclose@plt>
   10de0:	cmp	r5, #0
   10de4:	beq	10df0 <test_schema@@Base+0x7c>
   10de8:	mov	r0, r5
   10dec:	bl	107c8 <free@plt>
   10df0:	ldr	r0, [pc, #880]	; 11168 <test_schema@@Base+0x3f4>
   10df4:	bl	107f8 <puts@plt>
   10df8:	mvn	r4, #0
   10dfc:	mov	r0, r4
   10e00:	add	sp, sp, #12
   10e04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10e08:	add	r7, r7, r6
   10e0c:	mov	r3, r4
   10e10:	sub	r2, r8, r7
   10e14:	mov	r1, r9
   10e18:	add	r0, r5, r7
   10e1c:	bl	107ec <fread@plt>
   10e20:	subs	r6, r0, #0
   10e24:	bne	10e08 <test_schema@@Base+0x94>
   10e28:	cmp	r8, r7
   10e2c:	bne	10dd8 <test_schema@@Base+0x64>
   10e30:	mov	r0, r4
   10e34:	bl	10834 <fclose@plt>
   10e38:	ldr	r3, [pc, #812]	; 1116c <test_schema@@Base+0x3f8>
   10e3c:	ldr	r2, [r5, #4]
   10e40:	str	r3, [sp, #4]
   10e44:	cmp	r2, r3
   10e48:	bne	10e58 <test_schema@@Base+0xe4>
   10e4c:	ldr	r3, [r5]
   10e50:	adds	r2, r5, r3
   10e54:	bne	10e6c <test_schema@@Base+0xf8>
   10e58:	ldr	r3, [pc, #784]	; 11170 <test_schema@@Base+0x3fc>
   10e5c:	mov	r2, #237	; 0xed
   10e60:	ldr	r1, [pc, #780]	; 11174 <test_schema@@Base+0x400>
   10e64:	ldr	r0, [pc, #780]	; 11178 <test_schema@@Base+0x404>
   10e68:	b	10f28 <test_schema@@Base+0x1b4>
   10e6c:	ldr	r3, [r5, r3]
   10e70:	sub	r3, r2, r3
   10e74:	ldrh	r1, [r3]
   10e78:	cmp	r1, #5
   10e7c:	bls	10f18 <test_schema@@Base+0x1a4>
   10e80:	ldrh	r3, [r3, #4]
   10e84:	cmp	r3, #0
   10e88:	beq	10f18 <test_schema@@Base+0x1a4>
   10e8c:	add	r7, r2, r3
   10e90:	ldr	r3, [r2, r3]
   10e94:	ldr	r9, [pc, #736]	; 1117c <test_schema@@Base+0x408>
   10e98:	add	r3, r3, #4
   10e9c:	add	r7, r7, r3
   10ea0:	mov	r8, r6
   10ea4:	cmp	r7, #0
   10ea8:	beq	10f0c <test_schema@@Base+0x198>
   10eac:	ldr	r4, [r7, #-4]
   10eb0:	cmp	r8, r4
   10eb4:	bcc	10f2c <test_schema@@Base+0x1b8>
   10eb8:	cmp	r4, #0
   10ebc:	beq	10f0c <test_schema@@Base+0x198>
   10ec0:	ldr	r9, [pc, #696]	; 11180 <test_schema@@Base+0x40c>
   10ec4:	sub	r4, r4, #1
   10ec8:	cmp	r4, r6
   10ecc:	bhi	10f54 <test_schema@@Base+0x1e0>
   10ed0:	bne	10f0c <test_schema@@Base+0x198>
   10ed4:	mov	r1, r4
   10ed8:	mov	r0, r7
   10edc:	bl	109e4 <_start@@Base+0x128>
   10ee0:	mov	r8, r0
   10ee4:	bl	10a2c <_start@@Base+0x170>
   10ee8:	ldr	r1, [pc, #656]	; 11180 <test_schema@@Base+0x40c>
   10eec:	bl	107a4 <strcmp@plt>
   10ef0:	cmn	r4, #1
   10ef4:	movne	r4, #0
   10ef8:	moveq	r4, #1
   10efc:	cmp	r0, #0
   10f00:	orrne	r4, r4, #1
   10f04:	cmp	r4, #0
   10f08:	beq	10f84 <test_schema@@Base+0x210>
   10f0c:	ldr	r0, [pc, #624]	; 11184 <test_schema@@Base+0x410>
   10f10:	bl	107f8 <puts@plt>
   10f14:	b	11050 <test_schema@@Base+0x2dc>
   10f18:	ldr	r3, [pc, #592]	; 11170 <test_schema@@Base+0x3fc>
   10f1c:	mov	r2, #237	; 0xed
   10f20:	ldr	r1, [pc, #588]	; 11174 <test_schema@@Base+0x400>
   10f24:	ldr	r0, [pc, #604]	; 11188 <test_schema@@Base+0x414>
   10f28:	bl	10864 <__assert_fail@plt>
   10f2c:	mov	r1, r8
   10f30:	mov	r0, r7
   10f34:	bl	109e4 <_start@@Base+0x128>
   10f38:	bl	10a2c <_start@@Base+0x170>
   10f3c:	mov	r1, r8
   10f40:	add	r8, r8, #1
   10f44:	mov	r2, r0
   10f48:	mov	r0, r9
   10f4c:	bl	107b0 <printf@plt>
   10f50:	b	10ea4 <test_schema@@Base+0x130>
   10f54:	sub	r8, r4, r6
   10f58:	mov	r0, r7
   10f5c:	add	r8, r6, r8, lsr #1
   10f60:	mov	r1, r8
   10f64:	bl	109e4 <_start@@Base+0x128>
   10f68:	bl	10a2c <_start@@Base+0x170>
   10f6c:	mov	r1, r9
   10f70:	bl	107a4 <strcmp@plt>
   10f74:	cmp	r0, #0
   10f78:	addlt	r6, r8, #1
   10f7c:	movge	r4, r8
   10f80:	b	10ec8 <test_schema@@Base+0x154>
   10f84:	cmp	r8, #0
   10f88:	moveq	r2, #224	; 0xe0
   10f8c:	ldreq	r3, [pc, #504]	; 1118c <test_schema@@Base+0x418>
   10f90:	beq	10e60 <test_schema@@Base+0xec>
   10f94:	ldr	r3, [r8]
   10f98:	sub	r3, r8, r3
   10f9c:	ldrh	r2, [r3]
   10fa0:	cmp	r2, #7
   10fa4:	bls	10ff0 <test_schema@@Base+0x27c>
   10fa8:	ldrh	r3, [r3, #6]
   10fac:	cmp	r3, #0
   10fb0:	beq	10ff0 <test_schema@@Base+0x27c>
   10fb4:	add	r7, r8, r3
   10fb8:	ldr	r3, [r8, r3]
   10fbc:	ldr	r1, [pc, #460]	; 11190 <test_schema@@Base+0x41c>
   10fc0:	add	r3, r3, #4
   10fc4:	add	r7, r7, r3
   10fc8:	mov	r0, r7
   10fcc:	bl	10bc4 <_start@@Base+0x308>
   10fd0:	cmn	r0, #1
   10fd4:	mov	r4, r0
   10fd8:	bne	10ffc <test_schema@@Base+0x288>
   10fdc:	ldr	r0, [pc, #432]	; 11194 <test_schema@@Base+0x420>
   10fe0:	bl	107f8 <puts@plt>
   10fe4:	mov	r0, r5
   10fe8:	bl	107c8 <free@plt>
   10fec:	b	10dfc <test_schema@@Base+0x88>
   10ff0:	ldr	r3, [pc, #404]	; 1118c <test_schema@@Base+0x418>
   10ff4:	mov	r2, #224	; 0xe0
   10ff8:	b	10f20 <test_schema@@Base+0x1ac>
   10ffc:	mov	r1, r0
   11000:	mov	r0, r7
   11004:	bl	10b7c <_start@@Base+0x2c0>
   11008:	mov	r4, r0
   1100c:	bl	10b1c <_start@@Base+0x260>
   11010:	cmp	r1, #0
   11014:	cmpeq	r0, #150	; 0x96
   11018:	beq	11058 <test_schema@@Base+0x2e4>
   1101c:	ldr	r0, [pc, #372]	; 11198 <test_schema@@Base+0x424>
   11020:	bl	107f8 <puts@plt>
   11024:	mov	r0, r4
   11028:	bl	10aa4 <_start@@Base+0x1e8>
   1102c:	mov	r1, r0
   11030:	ldr	r0, [pc, #356]	; 1119c <test_schema@@Base+0x428>
   11034:	bl	107b0 <printf@plt>
   11038:	mov	r0, r4
   1103c:	bl	10b1c <_start@@Base+0x260>
   11040:	mov	r2, r0
   11044:	mov	r3, r1
   11048:	ldr	r0, [pc, #336]	; 111a0 <test_schema@@Base+0x42c>
   1104c:	bl	107b0 <printf@plt>
   11050:	mvn	r4, #0
   11054:	b	10fe4 <test_schema@@Base+0x270>
   11058:	mov	r0, r4
   1105c:	bl	10c54 <_start@@Base+0x398>
   11060:	bl	10cc8 <_start@@Base+0x40c>
   11064:	cmp	r0, #5
   11068:	ldrne	r0, [pc, #308]	; 111a4 <test_schema@@Base+0x430>
   1106c:	bne	10f10 <test_schema@@Base+0x19c>
   11070:	ldr	r1, [pc, #304]	; 111a8 <test_schema@@Base+0x434>
   11074:	mov	r0, r7
   11078:	bl	10bc4 <_start@@Base+0x308>
   1107c:	cmn	r0, #1
   11080:	mov	r1, r0
   11084:	ldreq	r0, [pc, #288]	; 111ac <test_schema@@Base+0x438>
   11088:	beq	10f10 <test_schema@@Base+0x19c>
   1108c:	mov	r0, r7
   11090:	bl	10b7c <_start@@Base+0x2c0>
   11094:	bl	10c54 <_start@@Base+0x398>
   11098:	mov	r4, r0
   1109c:	bl	10cc8 <_start@@Base+0x40c>
   110a0:	cmp	r0, #15
   110a4:	ldrne	r0, [pc, #260]	; 111b0 <test_schema@@Base+0x43c>
   110a8:	bne	10f10 <test_schema@@Base+0x19c>
   110ac:	mov	r0, r4
   110b0:	bl	10d1c <_start@@Base+0x460>
   110b4:	cmp	r0, r6
   110b8:	ldrne	r0, [pc, #244]	; 111b4 <test_schema@@Base+0x440>
   110bc:	bne	10f10 <test_schema@@Base+0x19c>
   110c0:	ldr	r1, [pc, #240]	; 111b8 <test_schema@@Base+0x444>
   110c4:	mov	r0, r7
   110c8:	bl	10bc4 <_start@@Base+0x308>
   110cc:	cmn	r0, #1
   110d0:	mov	r4, r0
   110d4:	ldreq	r0, [pc, #224]	; 111bc <test_schema@@Base+0x448>
   110d8:	beq	10fe0 <test_schema@@Base+0x26c>
   110dc:	mov	r1, r0
   110e0:	mov	r0, r7
   110e4:	bl	10b7c <_start@@Base+0x2c0>
   110e8:	bl	10c54 <_start@@Base+0x398>
   110ec:	mov	r4, r0
   110f0:	bl	10cc8 <_start@@Base+0x40c>
   110f4:	cmp	r0, #14
   110f8:	ldrne	r0, [pc, #192]	; 111c0 <test_schema@@Base+0x44c>
   110fc:	bne	10f10 <test_schema@@Base+0x19c>
   11100:	cmp	r4, #0
   11104:	ldreq	r3, [pc, #184]	; 111c4 <test_schema@@Base+0x450>
   11108:	moveq	r2, #148	; 0x94
   1110c:	beq	10e60 <test_schema@@Base+0xec>
   11110:	ldr	r3, [r4]
   11114:	sub	r3, r4, r3
   11118:	ldrh	r2, [r3]
   1111c:	cmp	r2, #7
   11120:	bls	1113c <test_schema@@Base+0x3c8>
   11124:	ldrh	r3, [r3, #6]
   11128:	cmp	r3, #0
   1112c:	beq	1113c <test_schema@@Base+0x3c8>
   11130:	ldrsb	r3, [r4, r3]
   11134:	cmp	r3, #15
   11138:	beq	11144 <test_schema@@Base+0x3d0>
   1113c:	ldr	r0, [pc, #132]	; 111c8 <test_schema@@Base+0x454>
   11140:	b	10f10 <test_schema@@Base+0x19c>
   11144:	mov	r0, r4
   11148:	bl	10d1c <_start@@Base+0x460>
   1114c:	cmp	r6, r0
   11150:	moveq	r4, #0
   11154:	beq	10fe4 <test_schema@@Base+0x270>
   11158:	ldr	r0, [pc, #108]	; 111cc <test_schema@@Base+0x458>
   1115c:	b	10f10 <test_schema@@Base+0x19c>
   11160:	andeq	r1, r1, ip, lsr #8
   11164:	andeq	r2, r0, r0, lsl r7
   11168:	andeq	r1, r1, lr, ror #11
   1116c:	movtpl	r4, #9794	; 0x2642
   11170:	andeq	r1, r1, r5, lsl #6
   11174:	andeq	r1, r1, r0, asr r3
   11178:	andeq	r1, r1, r5, ror #7
   1117c:	andeq	r1, r1, pc, lsr #8
   11180:	andeq	r1, r1, r2, asr #8
   11184:	andeq	r1, r1, r9, asr r4
   11188:	andeq	r1, r1, fp, lsl #8
   1118c:	andeq	r1, r1, pc, lsl r3
   11190:	andeq	r1, r1, sl, ror r4
   11194:	andeq	r1, r1, pc, ror r4
   11198:	andeq	r1, r1, r9, lsr #9
   1119c:	andeq	r1, r1, ip, asr #9
   111a0:	ldrdeq	r1, [r1], -ip
   111a4:	andeq	r1, r1, r2, ror #9
   111a8:	strdeq	r1, [r1], -ip
   111ac:	andeq	r1, r1, r2, lsl #10
   111b0:	andeq	r1, r1, r8, lsl r5
   111b4:	andeq	r1, r1, pc, lsr #10
   111b8:	andeq	r1, r1, r6, asr #10
   111bc:	andeq	r1, r1, r8, asr r5
   111c0:	andeq	r1, r1, r2, ror r5
   111c4:	andeq	r1, r1, r8, lsr r3
   111c8:	muleq	r1, r8, r5
   111cc:	andeq	r1, r1, r6, asr #11

000111d0 <__libc_csu_init@@Base>:
   111d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   111d4:	mov	r7, r0
   111d8:	ldr	r6, [pc, #72]	; 11228 <__libc_csu_init@@Base+0x58>
   111dc:	ldr	r5, [pc, #72]	; 1122c <__libc_csu_init@@Base+0x5c>
   111e0:	add	r6, pc, r6
   111e4:	add	r5, pc, r5
   111e8:	sub	r6, r6, r5
   111ec:	mov	r8, r1
   111f0:	mov	r9, r2
   111f4:	bl	10784 <strcmp@plt-0x20>
   111f8:	asrs	r6, r6, #2
   111fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11200:	mov	r4, #0
   11204:	add	r4, r4, #1
   11208:	ldr	r3, [r5], #4
   1120c:	mov	r2, r9
   11210:	mov	r1, r8
   11214:	mov	r0, r7
   11218:	blx	r3
   1121c:	cmp	r6, r4
   11220:	bne	11204 <__libc_csu_init@@Base+0x34>
   11224:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11228:	andeq	r0, r1, r8, lsr #26
   1122c:	andeq	r0, r1, r0, lsr #26

00011230 <__libc_csu_fini@@Base>:
   11230:	bx	lr

Disassembly of section .fini:

00011234 <.fini>:
   11234:	push	{r3, lr}
   11238:	pop	{r3, pc}
