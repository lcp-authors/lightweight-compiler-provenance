
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010cf0 <.init>:
   10cf0:	push	{r3, lr}
   10cf4:	bl	10f80 <__assert_fail@plt+0x48>
   10cf8:	pop	{r3, pc}

Disassembly of section .plt:

00010cfc <calloc@plt-0x14>:
   10cfc:	push	{lr}		; (str lr, [sp, #-4]!)
   10d00:	ldr	lr, [pc, #4]	; 10d0c <calloc@plt-0x4>
   10d04:	add	lr, pc, lr
   10d08:	ldr	pc, [lr, #8]!
   10d0c:	strdeq	r5, [r1], -r4

00010d10 <calloc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #756]!	; 0x2f4

00010d1c <fputs_unlocked@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #748]!	; 0x2ec

00010d28 <strcmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #740]!	; 0x2e4

00010d34 <strtol@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d40 <fflush@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #724]!	; 0x2d4

00010d4c <free@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #716]!	; 0x2cc

00010d58 <_exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #708]!	; 0x2c4

00010d64 <memcpy@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d70 <execvp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #692]!	; 0x2b4

00010d7c <mbsinit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #684]!	; 0x2ac

00010d88 <memcmp@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #676]!	; 0x2a4

00010d94 <dcgettext@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #668]!	; 0x29c

00010da0 <realloc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #660]!	; 0x294

00010dac <getpriority@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #652]!	; 0x28c

00010db8 <textdomain@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #644]!	; 0x284

00010dc4 <iswprint@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #636]!	; 0x27c

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #628]!	; 0x274

00010ddc <lseek64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #620]!	; 0x26c

00010de8 <__ctype_get_mb_cur_max@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #612]!	; 0x264

00010df4 <__fpending@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #604]!	; 0x25c

00010e00 <mbrtowc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #596]!	; 0x254

00010e0c <error@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #588]!	; 0x24c

00010e18 <setpriority@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #580]!	; 0x244

00010e24 <malloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #572]!	; 0x23c

00010e30 <__libc_start_main@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #564]!	; 0x234

00010e3c <__freading@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #556]!	; 0x22c

00010e48 <__gmon_start__@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #548]!	; 0x224

00010e54 <getopt_long@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #540]!	; 0x21c

00010e60 <__ctype_b_loc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #532]!	; 0x214

00010e6c <exit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #524]!	; 0x20c

00010e78 <strlen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #516]!	; 0x204

00010e84 <strchr@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e90 <__errno_location@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #500]!	; 0x1f4

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #484]!	; 0x1e4

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #468]!	; 0x1d4

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #444]!	; 0x1bc

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #436]!	; 0x1b4

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #428]!	; 0x1ac

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #420]!	; 0x1a4

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #412]!	; 0x19c

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #404]!	; 0x194

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #396]!	; 0x18c

00010f38 <__assert_fail@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f44 <.text>:
   10f44:	mov	fp, #0
   10f48:	mov	lr, #0
   10f4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f50:	mov	r2, sp
   10f54:	push	{r2}		; (str r2, [sp, #-4]!)
   10f58:	push	{r0}		; (str r0, [sp, #-4]!)
   10f5c:	ldr	ip, [pc, #16]	; 10f74 <__assert_fail@plt+0x3c>
   10f60:	push	{ip}		; (str ip, [sp, #-4]!)
   10f64:	ldr	r0, [pc, #12]	; 10f78 <__assert_fail@plt+0x40>
   10f68:	ldr	r3, [pc, #12]	; 10f7c <__assert_fail@plt+0x44>
   10f6c:	bl	10e30 <__libc_start_main@plt>
   10f70:	bl	10f2c <abort@plt>
   10f74:	andeq	r5, r1, r0, lsr #4
   10f78:	andeq	r1, r1, r0, ror #5
   10f7c:	andeq	r5, r1, r0, asr #3
   10f80:	ldr	r3, [pc, #20]	; 10f9c <__assert_fail@plt+0x64>
   10f84:	ldr	r2, [pc, #20]	; 10fa0 <__assert_fail@plt+0x68>
   10f88:	add	r3, pc, r3
   10f8c:	ldr	r2, [r3, r2]
   10f90:	cmp	r2, #0
   10f94:	bxeq	lr
   10f98:	b	10e48 <__gmon_start__@plt>
   10f9c:	andeq	r5, r1, r0, ror r0
   10fa0:	andeq	r0, r0, r8, asr #1
   10fa4:	ldr	r0, [pc, #24]	; 10fc4 <__assert_fail@plt+0x8c>
   10fa8:	ldr	r3, [pc, #24]	; 10fc8 <__assert_fail@plt+0x90>
   10fac:	cmp	r3, r0
   10fb0:	bxeq	lr
   10fb4:	ldr	r3, [pc, #16]	; 10fcc <__assert_fail@plt+0x94>
   10fb8:	cmp	r3, #0
   10fbc:	bxeq	lr
   10fc0:	bx	r3
   10fc4:	andeq	r6, r2, r0, lsr #2
   10fc8:	andeq	r6, r2, r0, lsr #2
   10fcc:	andeq	r0, r0, r0
   10fd0:	ldr	r0, [pc, #36]	; 10ffc <__assert_fail@plt+0xc4>
   10fd4:	ldr	r1, [pc, #36]	; 11000 <__assert_fail@plt+0xc8>
   10fd8:	sub	r1, r1, r0
   10fdc:	asr	r1, r1, #2
   10fe0:	add	r1, r1, r1, lsr #31
   10fe4:	asrs	r1, r1, #1
   10fe8:	bxeq	lr
   10fec:	ldr	r3, [pc, #16]	; 11004 <__assert_fail@plt+0xcc>
   10ff0:	cmp	r3, #0
   10ff4:	bxeq	lr
   10ff8:	bx	r3
   10ffc:	andeq	r6, r2, r0, lsr #2
   11000:	andeq	r6, r2, r0, lsr #2
   11004:	andeq	r0, r0, r0
   11008:	push	{r4, lr}
   1100c:	ldr	r4, [pc, #24]	; 1102c <__assert_fail@plt+0xf4>
   11010:	ldrb	r3, [r4]
   11014:	cmp	r3, #0
   11018:	popne	{r4, pc}
   1101c:	bl	10fa4 <__assert_fail@plt+0x6c>
   11020:	mov	r3, #1
   11024:	strb	r3, [r4]
   11028:	pop	{r4, pc}
   1102c:	andeq	r6, r2, ip, lsr r1
   11030:	b	10fd0 <__assert_fail@plt+0x98>
   11034:	push	{fp, lr}
   11038:	mov	fp, sp
   1103c:	sub	sp, sp, #56	; 0x38
   11040:	mov	r4, r0
   11044:	cmp	r0, #0
   11048:	bne	1129c <__assert_fail@plt+0x364>
   1104c:	movw	r1, #21107	; 0x5273
   11050:	mov	r0, #0
   11054:	mov	r2, #5
   11058:	movt	r1, #1
   1105c:	bl	10d94 <dcgettext@plt>
   11060:	mov	r1, r0
   11064:	movw	r0, #24904	; 0x6148
   11068:	movt	r0, #2
   1106c:	ldr	r2, [r0]
   11070:	mov	r0, #1
   11074:	bl	10eb4 <__printf_chk@plt>
   11078:	movw	r1, #21146	; 0x529a
   1107c:	mov	r0, #0
   11080:	mov	r2, #5
   11084:	movt	r1, #1
   11088:	bl	10d94 <dcgettext@plt>
   1108c:	mov	r1, r0
   11090:	mov	r0, #1
   11094:	mvn	r2, #19
   11098:	mov	r3, #19
   1109c:	bl	10eb4 <__printf_chk@plt>
   110a0:	movw	r1, #21897	; 0x5589
   110a4:	mov	r0, #0
   110a8:	mov	r2, #5
   110ac:	movt	r1, #1
   110b0:	bl	10d94 <dcgettext@plt>
   110b4:	movw	r7, #24884	; 0x6134
   110b8:	movt	r7, #2
   110bc:	ldr	r1, [r7]
   110c0:	bl	10d1c <fputs_unlocked@plt>
   110c4:	movw	r1, #21368	; 0x5378
   110c8:	mov	r0, #0
   110cc:	mov	r2, #5
   110d0:	movt	r1, #1
   110d4:	bl	10d94 <dcgettext@plt>
   110d8:	ldr	r1, [r7]
   110dc:	bl	10d1c <fputs_unlocked@plt>
   110e0:	movw	r1, #21435	; 0x53bb
   110e4:	mov	r0, #0
   110e8:	mov	r2, #5
   110ec:	movt	r1, #1
   110f0:	bl	10d94 <dcgettext@plt>
   110f4:	ldr	r1, [r7]
   110f8:	bl	10d1c <fputs_unlocked@plt>
   110fc:	movw	r1, #21480	; 0x53e8
   11100:	mov	r0, #0
   11104:	mov	r2, #5
   11108:	movt	r1, #1
   1110c:	bl	10d94 <dcgettext@plt>
   11110:	ldr	r1, [r7]
   11114:	bl	10d1c <fputs_unlocked@plt>
   11118:	movw	r1, #21534	; 0x541e
   1111c:	mov	r0, #0
   11120:	mov	r2, #5
   11124:	movt	r1, #1
   11128:	bl	10d94 <dcgettext@plt>
   1112c:	movw	r5, #21725	; 0x54dd
   11130:	mov	r1, r0
   11134:	mov	r0, #1
   11138:	movt	r5, #1
   1113c:	mov	r2, r5
   11140:	bl	10eb4 <__printf_chk@plt>
   11144:	movw	r0, #22360	; 0x5758
   11148:	mov	r2, #48	; 0x30
   1114c:	mov	r6, sp
   11150:	movt	r0, #1
   11154:	add	r1, r0, #32
   11158:	add	r3, r0, #16
   1115c:	vld1.64	{d18-d19}, [r0], r2
   11160:	vld1.64	{d16-d17}, [r1]
   11164:	vld1.64	{d20-d21}, [r3]
   11168:	add	r1, r6, #32
   1116c:	vldr	d22, [r0]
   11170:	add	r0, r6, #16
   11174:	vst1.64	{d16-d17}, [r1]
   11178:	movw	r1, #21972	; 0x55d4
   1117c:	vst1.64	{d20-d21}, [r0]
   11180:	mov	r0, r6
   11184:	vst1.64	{d18-d19}, [r0], r2
   11188:	movt	r1, #1
   1118c:	vstr	d22, [r0]
   11190:	mov	r0, r5
   11194:	bl	10d28 <strcmp@plt>
   11198:	cmp	r0, #0
   1119c:	ldrne	r1, [r6, #8]!
   111a0:	cmpne	r1, #0
   111a4:	bne	11190 <__assert_fail@plt+0x258>
   111a8:	ldr	r6, [r6, #4]
   111ac:	movw	r1, #22067	; 0x5633
   111b0:	mov	r0, #0
   111b4:	mov	r2, #5
   111b8:	movt	r1, #1
   111bc:	bl	10d94 <dcgettext@plt>
   111c0:	movw	r2, #21758	; 0x54fe
   111c4:	movw	r3, #22090	; 0x564a
   111c8:	mov	r1, r0
   111cc:	mov	r0, #1
   111d0:	movt	r2, #1
   111d4:	movt	r3, #1
   111d8:	bl	10eb4 <__printf_chk@plt>
   111dc:	cmp	r6, #0
   111e0:	mov	r0, #5
   111e4:	mov	r1, #0
   111e8:	moveq	r6, r5
   111ec:	bl	10ef0 <setlocale@plt>
   111f0:	cmp	r0, #0
   111f4:	beq	1122c <__assert_fail@plt+0x2f4>
   111f8:	movw	r1, #22130	; 0x5672
   111fc:	mov	r2, #3
   11200:	movt	r1, #1
   11204:	bl	10f20 <strncmp@plt>
   11208:	cmp	r0, #0
   1120c:	beq	1122c <__assert_fail@plt+0x2f4>
   11210:	movw	r1, #22134	; 0x5676
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10d94 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10d1c <fputs_unlocked@plt>
   1122c:	movw	r1, #22205	; 0x56bd
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10d94 <dcgettext@plt>
   11240:	movw	r2, #22090	; 0x564a
   11244:	mov	r1, r0
   11248:	mov	r0, #1
   1124c:	mov	r3, r5
   11250:	movt	r2, #1
   11254:	bl	10eb4 <__printf_chk@plt>
   11258:	movw	r1, #22232	; 0x56d8
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	movt	r1, #1
   11268:	bl	10d94 <dcgettext@plt>
   1126c:	movw	r3, #22282	; 0x570a
   11270:	mov	r1, r0
   11274:	movw	r0, #22000	; 0x55f0
   11278:	cmp	r6, r5
   1127c:	mov	r2, r6
   11280:	movt	r0, #1
   11284:	movt	r3, #1
   11288:	moveq	r3, r0
   1128c:	mov	r0, #1
   11290:	bl	10eb4 <__printf_chk@plt>
   11294:	mov	r0, r4
   11298:	bl	10e6c <exit@plt>
   1129c:	movw	r0, #24880	; 0x6130
   112a0:	movw	r1, #21068	; 0x524c
   112a4:	mov	r2, #5
   112a8:	movt	r0, #2
   112ac:	movt	r1, #1
   112b0:	ldr	r5, [r0]
   112b4:	mov	r0, #0
   112b8:	bl	10d94 <dcgettext@plt>
   112bc:	mov	r2, r0
   112c0:	movw	r0, #24904	; 0x6148
   112c4:	mov	r1, #1
   112c8:	movt	r0, #2
   112cc:	ldr	r3, [r0]
   112d0:	mov	r0, r5
   112d4:	bl	10ecc <__fprintf_chk@plt>
   112d8:	mov	r0, r4
   112dc:	bl	10e6c <exit@plt>
   112e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e4:	add	fp, sp, #28
   112e8:	sub	sp, sp, #12
   112ec:	mov	r8, r0
   112f0:	ldr	r0, [r1]
   112f4:	mov	r9, r1
   112f8:	bl	11804 <__assert_fail@plt+0x8cc>
   112fc:	movw	r1, #22282	; 0x570a
   11300:	mov	r0, #6
   11304:	movt	r1, #1
   11308:	bl	10ef0 <setlocale@plt>
   1130c:	movw	r7, #21762	; 0x5502
   11310:	movw	r1, #21730	; 0x54e2
   11314:	movt	r7, #1
   11318:	movt	r1, #1
   1131c:	mov	r0, r7
   11320:	bl	10f14 <bindtextdomain@plt>
   11324:	mov	r0, r7
   11328:	bl	10db8 <textdomain@plt>
   1132c:	movw	r0, #24796	; 0x60dc
   11330:	mov	r1, #125	; 0x7d
   11334:	movt	r0, #2
   11338:	str	r1, [r0]
   1133c:	movw	r0, #5916	; 0x171c
   11340:	movt	r0, #1
   11344:	bl	15224 <__assert_fail@plt+0x42ec>
   11348:	mov	r1, #10
   1134c:	mov	r7, #1
   11350:	cmp	r8, #2
   11354:	blt	11438 <__assert_fail@plt+0x500>
   11358:	movw	r2, #21754	; 0x54fa
   1135c:	movw	r3, #22296	; 0x5718
   11360:	movw	sl, #24872	; 0x6128
   11364:	mov	r4, #0
   11368:	movt	r2, #1
   1136c:	movt	r3, #1
   11370:	movt	sl, #2
   11374:	ldr	r1, [r9, r7, lsl #2]
   11378:	ldrb	r0, [r1]
   1137c:	cmp	r0, #45	; 0x2d
   11380:	bne	113c4 <__assert_fail@plt+0x48c>
   11384:	mov	r0, r1
   11388:	mov	r5, #1
   1138c:	ldrb	r6, [r0, #1]!
   11390:	cmp	r6, #43	; 0x2b
   11394:	movweq	r5, #2
   11398:	cmp	r6, #45	; 0x2d
   1139c:	movweq	r5, #2
   113a0:	ldrb	r1, [r1, r5]
   113a4:	sub	r1, r1, #48	; 0x30
   113a8:	cmp	r1, #9
   113ac:	bhi	113c4 <__assert_fail@plt+0x48c>
   113b0:	add	r7, r7, #1
   113b4:	mov	r4, r0
   113b8:	cmp	r7, r8
   113bc:	blt	11374 <__assert_fail@plt+0x43c>
   113c0:	b	114a4 <__assert_fail@plt+0x56c>
   113c4:	sub	r7, r7, #1
   113c8:	mov	r5, r9
   113cc:	mov	r6, r8
   113d0:	ldr	r0, [r9], r7, lsl #2
   113d4:	str	r0, [r9]
   113d8:	mov	r0, #0
   113dc:	mov	r1, r9
   113e0:	mov	r9, r2
   113e4:	str	r0, [sl]
   113e8:	str	r0, [sp]
   113ec:	sub	r0, r8, r7
   113f0:	mov	r8, r3
   113f4:	bl	10e54 <getopt_long@plt>
   113f8:	ldr	r1, [sl]
   113fc:	cmp	r0, #109	; 0x6d
   11400:	add	r7, r7, r1
   11404:	ble	11494 <__assert_fail@plt+0x55c>
   11408:	cmp	r0, #110	; 0x6e
   1140c:	bne	1164c <__assert_fail@plt+0x714>
   11410:	movw	r0, #24888	; 0x6138
   11414:	mov	r2, r9
   11418:	mov	r3, r8
   1141c:	mov	r9, r5
   11420:	mov	r8, r6
   11424:	movt	r0, #2
   11428:	ldr	r4, [r0]
   1142c:	cmp	r7, r8
   11430:	blt	11374 <__assert_fail@plt+0x43c>
   11434:	b	114a4 <__assert_fail@plt+0x56c>
   11438:	mov	r0, #0
   1143c:	cmp	r7, r8
   11440:	bne	114f4 <__assert_fail@plt+0x5bc>
   11444:	cmp	r0, #0
   11448:	bne	11654 <__assert_fail@plt+0x71c>
   1144c:	bl	10e90 <__errno_location@plt>
   11450:	mov	r6, #0
   11454:	mov	r4, r0
   11458:	mov	r1, #0
   1145c:	str	r6, [r0]
   11460:	mov	r0, #0
   11464:	bl	10dac <getpriority@plt>
   11468:	mov	r2, r0
   1146c:	cmn	r0, #1
   11470:	bne	11480 <__assert_fail@plt+0x548>
   11474:	ldr	r4, [r4]
   11478:	cmp	r4, #0
   1147c:	bne	116b4 <__assert_fail@plt+0x77c>
   11480:	movw	r1, #21873	; 0x5571
   11484:	mov	r0, #1
   11488:	movt	r1, #1
   1148c:	bl	10eb4 <__printf_chk@plt>
   11490:	b	115cc <__assert_fail@plt+0x694>
   11494:	cmn	r0, #1
   11498:	mov	r9, r5
   1149c:	mov	r8, r6
   114a0:	bne	115ec <__assert_fail@plt+0x6b4>
   114a4:	cmp	r4, #0
   114a8:	beq	115d8 <__assert_fail@plt+0x6a0>
   114ac:	movw	r0, #22282	; 0x570a
   114b0:	add	r3, sp, #8
   114b4:	mov	r1, #0
   114b8:	mov	r2, #10
   114bc:	movt	r0, #1
   114c0:	str	r0, [sp]
   114c4:	mov	r0, r4
   114c8:	bl	141cc <__assert_fail@plt+0x3294>
   114cc:	cmp	r0, #2
   114d0:	bcs	11680 <__assert_fail@plt+0x748>
   114d4:	ldr	r1, [sp, #8]
   114d8:	mov	r0, #1
   114dc:	cmp	r1, #39	; 0x27
   114e0:	movge	r1, #39	; 0x27
   114e4:	cmn	r1, #39	; 0x27
   114e8:	mvnle	r1, #38	; 0x26
   114ec:	cmp	r7, r8
   114f0:	beq	11444 <__assert_fail@plt+0x50c>
   114f4:	mov	r5, r1
   114f8:	bl	10e90 <__errno_location@plt>
   114fc:	mov	r4, r0
   11500:	mov	r0, #0
   11504:	mov	r1, #0
   11508:	str	r0, [r4]
   1150c:	mov	r0, #0
   11510:	bl	10dac <getpriority@plt>
   11514:	cmn	r0, #1
   11518:	bne	11528 <__assert_fail@plt+0x5f0>
   1151c:	ldr	r6, [r4]
   11520:	cmp	r6, #0
   11524:	bne	116d8 <__assert_fail@plt+0x7a0>
   11528:	add	r2, r0, r5
   1152c:	mov	r0, #0
   11530:	mov	r1, #0
   11534:	bl	10e18 <setpriority@plt>
   11538:	cmp	r0, #0
   1153c:	beq	11590 <__assert_fail@plt+0x658>
   11540:	ldr	r6, [r4]
   11544:	movw	r1, #21877	; 0x5575
   11548:	mov	r0, #0
   1154c:	mov	r2, #5
   11550:	movt	r1, #1
   11554:	bl	10d94 <dcgettext@plt>
   11558:	subs	r1, r6, #1
   1155c:	mov	r2, r0
   11560:	movwne	r1, #125	; 0x7d
   11564:	subs	r0, r6, #13
   11568:	movne	r0, r1
   1156c:	mov	r1, r6
   11570:	bl	10e0c <error@plt>
   11574:	movw	r0, #24880	; 0x6130
   11578:	mov	r6, #125	; 0x7d
   1157c:	movt	r0, #2
   11580:	ldr	r0, [r0]
   11584:	ldrb	r0, [r0]
   11588:	tst	r0, #32
   1158c:	bne	115cc <__assert_fail@plt+0x694>
   11590:	ldr	r0, [r9, r7, lsl #2]!
   11594:	mov	r1, r9
   11598:	bl	10d70 <execvp@plt>
   1159c:	ldr	r0, [r9]
   115a0:	ldr	r4, [r4]
   115a4:	bl	13438 <__assert_fail@plt+0x2500>
   115a8:	movw	r2, #22447	; 0x57af
   115ac:	mov	r3, r0
   115b0:	mov	r0, #0
   115b4:	mov	r1, r4
   115b8:	movt	r2, #1
   115bc:	bl	10e0c <error@plt>
   115c0:	mov	r6, #126	; 0x7e
   115c4:	cmp	r4, #2
   115c8:	movweq	r6, #127	; 0x7f
   115cc:	mov	r0, r6
   115d0:	sub	sp, fp, #28
   115d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115d8:	mov	r0, #0
   115dc:	mov	r1, #10
   115e0:	cmp	r7, r8
   115e4:	beq	11444 <__assert_fail@plt+0x50c>
   115e8:	b	114f4 <__assert_fail@plt+0x5bc>
   115ec:	cmn	r0, #3
   115f0:	bne	1163c <__assert_fail@plt+0x704>
   115f4:	movw	r0, #24792	; 0x60d8
   115f8:	movw	r2, #21772	; 0x550c
   115fc:	mov	r1, #0
   11600:	movt	r0, #2
   11604:	movt	r2, #1
   11608:	str	r1, [sp, #4]
   1160c:	movw	r1, #21725	; 0x54dd
   11610:	ldr	r3, [r0]
   11614:	movw	r0, #24884	; 0x6134
   11618:	str	r2, [sp]
   1161c:	movw	r2, #21758	; 0x54fe
   11620:	movt	r1, #1
   11624:	movt	r0, #2
   11628:	movt	r2, #1
   1162c:	ldr	r0, [r0]
   11630:	bl	139f4 <__assert_fail@plt+0x2abc>
   11634:	mov	r0, #0
   11638:	bl	10e6c <exit@plt>
   1163c:	cmn	r0, #2
   11640:	bne	1164c <__assert_fail@plt+0x714>
   11644:	mov	r0, #0
   11648:	bl	11034 <__assert_fail@plt+0xfc>
   1164c:	mov	r0, #125	; 0x7d
   11650:	bl	11034 <__assert_fail@plt+0xfc>
   11654:	movw	r1, #21810	; 0x5532
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #1
   11664:	bl	10d94 <dcgettext@plt>
   11668:	mov	r2, r0
   1166c:	mov	r0, #0
   11670:	mov	r1, #0
   11674:	bl	10e0c <error@plt>
   11678:	mov	r0, #125	; 0x7d
   1167c:	bl	11034 <__assert_fail@plt+0xfc>
   11680:	movw	r1, #21788	; 0x551c
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	10d94 <dcgettext@plt>
   11694:	mov	r5, r0
   11698:	mov	r0, r4
   1169c:	bl	13438 <__assert_fail@plt+0x2500>
   116a0:	mov	r3, r0
   116a4:	mov	r0, #125	; 0x7d
   116a8:	mov	r1, #0
   116ac:	mov	r2, r5
   116b0:	bl	10e0c <error@plt>
   116b4:	movw	r1, #21853	; 0x555d
   116b8:	mov	r0, #0
   116bc:	mov	r2, #5
   116c0:	movt	r1, #1
   116c4:	bl	10d94 <dcgettext@plt>
   116c8:	mov	r2, r0
   116cc:	mov	r0, #125	; 0x7d
   116d0:	mov	r1, r4
   116d4:	bl	10e0c <error@plt>
   116d8:	movw	r1, #21853	; 0x555d
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	movt	r1, #1
   116e8:	bl	10d94 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	mov	r0, #125	; 0x7d
   116f4:	mov	r1, r6
   116f8:	bl	10e0c <error@plt>
   116fc:	movw	r1, #24896	; 0x6140
   11700:	movt	r1, #2
   11704:	str	r0, [r1]
   11708:	bx	lr
   1170c:	movw	r1, #24900	; 0x6144
   11710:	movt	r1, #2
   11714:	strb	r0, [r1]
   11718:	bx	lr
   1171c:	push	{r4, r5, r6, sl, fp, lr}
   11720:	add	fp, sp, #16
   11724:	sub	sp, sp, #8
   11728:	movw	r0, #24884	; 0x6134
   1172c:	movt	r0, #2
   11730:	ldr	r0, [r0]
   11734:	bl	14d9c <__assert_fail@plt+0x3e64>
   11738:	cmp	r0, #0
   1173c:	beq	11764 <__assert_fail@plt+0x82c>
   11740:	movw	r0, #24900	; 0x6144
   11744:	movt	r0, #2
   11748:	ldrb	r0, [r0]
   1174c:	cmp	r0, #0
   11750:	beq	11784 <__assert_fail@plt+0x84c>
   11754:	bl	10e90 <__errno_location@plt>
   11758:	ldr	r0, [r0]
   1175c:	cmp	r0, #32
   11760:	bne	11784 <__assert_fail@plt+0x84c>
   11764:	movw	r0, #24880	; 0x6130
   11768:	movt	r0, #2
   1176c:	ldr	r0, [r0]
   11770:	bl	14d9c <__assert_fail@plt+0x3e64>
   11774:	cmp	r0, #0
   11778:	subeq	sp, fp, #16
   1177c:	popeq	{r4, r5, r6, sl, fp, pc}
   11780:	b	117f4 <__assert_fail@plt+0x8bc>
   11784:	movw	r1, #22431	; 0x579f
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	movt	r1, #1
   11794:	bl	10d94 <dcgettext@plt>
   11798:	mov	r4, r0
   1179c:	movw	r0, #24896	; 0x6140
   117a0:	movt	r0, #2
   117a4:	ldr	r6, [r0]
   117a8:	bl	10e90 <__errno_location@plt>
   117ac:	ldr	r5, [r0]
   117b0:	cmp	r6, #0
   117b4:	bne	117d0 <__assert_fail@plt+0x898>
   117b8:	movw	r2, #22447	; 0x57af
   117bc:	mov	r0, #0
   117c0:	mov	r1, r5
   117c4:	mov	r3, r4
   117c8:	movt	r2, #1
   117cc:	b	117f0 <__assert_fail@plt+0x8b8>
   117d0:	mov	r0, r6
   117d4:	bl	130b0 <__assert_fail@plt+0x2178>
   117d8:	movw	r2, #22443	; 0x57ab
   117dc:	mov	r3, r0
   117e0:	str	r4, [sp]
   117e4:	mov	r0, #0
   117e8:	mov	r1, r5
   117ec:	movt	r2, #1
   117f0:	bl	10e0c <error@plt>
   117f4:	movw	r0, #24796	; 0x60dc
   117f8:	movt	r0, #2
   117fc:	ldr	r0, [r0]
   11800:	bl	10d58 <_exit@plt>
   11804:	push	{r4, r5, fp, lr}
   11808:	add	fp, sp, #8
   1180c:	cmp	r0, #0
   11810:	beq	118a4 <__assert_fail@plt+0x96c>
   11814:	mov	r1, #47	; 0x2f
   11818:	mov	r4, r0
   1181c:	bl	10efc <strrchr@plt>
   11820:	cmp	r0, #0
   11824:	mov	r5, r4
   11828:	addne	r5, r0, #1
   1182c:	sub	r0, r5, r4
   11830:	cmp	r0, #7
   11834:	blt	11888 <__assert_fail@plt+0x950>
   11838:	movw	r1, #22506	; 0x57ea
   1183c:	sub	r0, r5, #7
   11840:	mov	r2, #7
   11844:	movt	r1, #1
   11848:	bl	10f20 <strncmp@plt>
   1184c:	cmp	r0, #0
   11850:	bne	11888 <__assert_fail@plt+0x950>
   11854:	movw	r1, #22514	; 0x57f2
   11858:	mov	r0, r5
   1185c:	mov	r2, #3
   11860:	movt	r1, #1
   11864:	bl	10f20 <strncmp@plt>
   11868:	cmp	r0, #0
   1186c:	beq	11878 <__assert_fail@plt+0x940>
   11870:	mov	r4, r5
   11874:	b	11888 <__assert_fail@plt+0x950>
   11878:	movw	r0, #24864	; 0x6120
   1187c:	add	r4, r5, #3
   11880:	movt	r0, #2
   11884:	str	r4, [r0]
   11888:	movw	r0, #24868	; 0x6124
   1188c:	movt	r0, #2
   11890:	str	r4, [r0]
   11894:	movw	r0, #24904	; 0x6148
   11898:	movt	r0, #2
   1189c:	str	r4, [r0]
   118a0:	pop	{r4, r5, fp, pc}
   118a4:	movw	r0, #24880	; 0x6130
   118a8:	mov	r1, #55	; 0x37
   118ac:	mov	r2, #1
   118b0:	movt	r0, #2
   118b4:	ldr	r3, [r0]
   118b8:	movw	r0, #22450	; 0x57b2
   118bc:	movt	r0, #1
   118c0:	bl	10dd0 <fwrite@plt>
   118c4:	bl	10f2c <abort@plt>
   118c8:	push	{r4, r5, r6, sl, fp, lr}
   118cc:	add	fp, sp, #16
   118d0:	mov	r4, r0
   118d4:	movw	r0, #24912	; 0x6150
   118d8:	movt	r0, #2
   118dc:	cmp	r4, #0
   118e0:	moveq	r4, r0
   118e4:	bl	10e90 <__errno_location@plt>
   118e8:	ldr	r6, [r0]
   118ec:	mov	r5, r0
   118f0:	mov	r0, r4
   118f4:	mov	r1, #48	; 0x30
   118f8:	bl	14088 <__assert_fail@plt+0x3150>
   118fc:	str	r6, [r5]
   11900:	pop	{r4, r5, r6, sl, fp, pc}
   11904:	movw	r1, #24912	; 0x6150
   11908:	cmp	r0, #0
   1190c:	movt	r1, #2
   11910:	movne	r1, r0
   11914:	ldr	r0, [r1]
   11918:	bx	lr
   1191c:	movw	r2, #24912	; 0x6150
   11920:	cmp	r0, #0
   11924:	movt	r2, #2
   11928:	movne	r2, r0
   1192c:	str	r1, [r2]
   11930:	bx	lr
   11934:	movw	r3, #24912	; 0x6150
   11938:	cmp	r0, #0
   1193c:	movt	r3, #2
   11940:	movne	r3, r0
   11944:	ubfx	r0, r1, #5, #3
   11948:	and	r1, r1, #31
   1194c:	add	r0, r3, r0, lsl #2
   11950:	ldr	r3, [r0, #8]
   11954:	eor	r2, r2, r3, lsr r1
   11958:	and	r2, r2, #1
   1195c:	eor	r2, r3, r2, lsl r1
   11960:	str	r2, [r0, #8]
   11964:	mov	r0, #1
   11968:	and	r0, r0, r3, lsr r1
   1196c:	bx	lr
   11970:	movw	r2, #24912	; 0x6150
   11974:	cmp	r0, #0
   11978:	movt	r2, #2
   1197c:	movne	r2, r0
   11980:	ldr	r0, [r2, #4]
   11984:	str	r1, [r2, #4]
   11988:	bx	lr
   1198c:	movw	r3, #24912	; 0x6150
   11990:	cmp	r0, #0
   11994:	movt	r3, #2
   11998:	movne	r3, r0
   1199c:	cmp	r1, #0
   119a0:	mov	r0, #10
   119a4:	cmpne	r2, #0
   119a8:	str	r0, [r3]
   119ac:	bne	119bc <__assert_fail@plt+0xa84>
   119b0:	push	{fp, lr}
   119b4:	mov	fp, sp
   119b8:	bl	10f2c <abort@plt>
   119bc:	str	r1, [r3, #40]	; 0x28
   119c0:	str	r2, [r3, #44]	; 0x2c
   119c4:	bx	lr
   119c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119cc:	add	fp, sp, #28
   119d0:	sub	sp, sp, #20
   119d4:	mov	r7, r0
   119d8:	ldr	r0, [fp, #8]
   119dc:	movw	r5, #24912	; 0x6150
   119e0:	mov	r8, r3
   119e4:	mov	r9, r2
   119e8:	mov	sl, r1
   119ec:	movt	r5, #2
   119f0:	cmp	r0, #0
   119f4:	movne	r5, r0
   119f8:	bl	10e90 <__errno_location@plt>
   119fc:	mov	r4, r0
   11a00:	ldm	r5, {r0, r1}
   11a04:	ldr	r2, [r5, #40]	; 0x28
   11a08:	ldr	r3, [r5, #44]	; 0x2c
   11a0c:	add	r5, r5, #8
   11a10:	ldr	r6, [r4]
   11a14:	stm	sp, {r0, r1, r5}
   11a18:	str	r2, [sp, #12]
   11a1c:	str	r3, [sp, #16]
   11a20:	mov	r0, r7
   11a24:	mov	r1, sl
   11a28:	mov	r2, r9
   11a2c:	mov	r3, r8
   11a30:	bl	11a40 <__assert_fail@plt+0xb08>
   11a34:	str	r6, [r4]
   11a38:	sub	sp, fp, #28
   11a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a44:	add	fp, sp, #28
   11a48:	sub	sp, sp, #156	; 0x9c
   11a4c:	str	r0, [sp, #80]	; 0x50
   11a50:	ldr	r0, [fp, #12]
   11a54:	mov	r6, r1
   11a58:	mov	r9, r3
   11a5c:	str	r2, [fp, #-84]	; 0xffffffac
   11a60:	and	r1, r0, #4
   11a64:	str	r1, [sp, #32]
   11a68:	and	r1, r0, #1
   11a6c:	str	r1, [sp, #36]	; 0x24
   11a70:	ubfx	r4, r0, #1, #1
   11a74:	bl	10de8 <__ctype_get_mb_cur_max@plt>
   11a78:	str	r0, [sp, #40]	; 0x28
   11a7c:	ldr	r0, [fp, #24]
   11a80:	ldr	r7, [fp, #8]
   11a84:	mov	r1, #0
   11a88:	mov	r5, #1
   11a8c:	str	r1, [fp, #-56]	; 0xffffffc8
   11a90:	mov	r1, #0
   11a94:	str	r1, [sp, #60]	; 0x3c
   11a98:	str	r0, [sp, #76]	; 0x4c
   11a9c:	ldr	r0, [fp, #20]
   11aa0:	str	r0, [sp, #72]	; 0x48
   11aa4:	mov	r0, #0
   11aa8:	str	r0, [sp, #56]	; 0x38
   11aac:	mov	r0, #0
   11ab0:	str	r0, [sp, #92]	; 0x5c
   11ab4:	mov	r0, #0
   11ab8:	str	r0, [fp, #-76]	; 0xffffffb4
   11abc:	mov	r0, #0
   11ac0:	cmp	r7, #10
   11ac4:	bhi	12a44 <__assert_fail@plt+0x1b0c>
   11ac8:	add	r1, pc, #28
   11acc:	mov	sl, r6
   11ad0:	ldr	r6, [sp, #80]	; 0x50
   11ad4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ad8:	mov	r8, #0
   11adc:	mov	r2, #1
   11ae0:	mov	r3, #0
   11ae4:	mov	lr, r9
   11ae8:	ldr	pc, [r1, r7, lsl #2]
   11aec:	ldrdeq	r1, [r1], -r0
   11af0:	strdeq	r1, [r1], -ip
   11af4:	andeq	r1, r1, r0, asr #23
   11af8:			; <UNDEFINED> instruction: 0x00011bb8
   11afc:	strdeq	r1, [r1], -r0
   11b00:	andeq	r1, r1, r4, asr #24
   11b04:	andeq	r1, r1, r0, ror #23
   11b08:	andeq	r1, r1, r0, lsr #25
   11b0c:	andeq	r1, r1, r8, lsl fp
   11b10:	andeq	r1, r1, r8, lsl fp
   11b14:	andeq	r1, r1, r0, asr #22
   11b18:	movw	r0, #22596	; 0x5844
   11b1c:	mov	r1, r7
   11b20:	movt	r0, #1
   11b24:	bl	13450 <__assert_fail@plt+0x2518>
   11b28:	str	r0, [sp, #72]	; 0x48
   11b2c:	movw	r0, #22598	; 0x5846
   11b30:	mov	r1, r7
   11b34:	movt	r0, #1
   11b38:	bl	13450 <__assert_fail@plt+0x2518>
   11b3c:	str	r0, [sp, #76]	; 0x4c
   11b40:	str	r5, [fp, #-48]	; 0xffffffd0
   11b44:	mov	r8, #0
   11b48:	mov	r5, r7
   11b4c:	tst	r4, #1
   11b50:	bne	11b88 <__assert_fail@plt+0xc50>
   11b54:	ldr	r0, [sp, #72]	; 0x48
   11b58:	ldrb	r0, [r0]
   11b5c:	cmp	r0, #0
   11b60:	beq	11b88 <__assert_fail@plt+0xc50>
   11b64:	ldr	r1, [sp, #72]	; 0x48
   11b68:	mov	r8, #0
   11b6c:	add	r1, r1, #1
   11b70:	cmp	r8, sl
   11b74:	strbcc	r0, [r6, r8]
   11b78:	ldrb	r0, [r1, r8]
   11b7c:	add	r8, r8, #1
   11b80:	cmp	r0, #0
   11b84:	bne	11b70 <__assert_fail@plt+0xc38>
   11b88:	ldr	r7, [sp, #76]	; 0x4c
   11b8c:	mov	r0, r7
   11b90:	bl	10e78 <strlen@plt>
   11b94:	str	r7, [sp, #92]	; 0x5c
   11b98:	mov	r7, r5
   11b9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ba0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11ba4:	str	r0, [fp, #-76]	; 0xffffffb4
   11ba8:	mov	r2, #1
   11bac:	mov	r3, r4
   11bb0:	mov	lr, r9
   11bb4:	b	11ca0 <__assert_fail@plt+0xd68>
   11bb8:	mov	r0, #1
   11bbc:	b	11bfc <__assert_fail@plt+0xcc4>
   11bc0:	tst	r4, #1
   11bc4:	bne	11bfc <__assert_fail@plt+0xcc4>
   11bc8:	mov	r2, r0
   11bcc:	b	11c24 <__assert_fail@plt+0xcec>
   11bd0:	mov	r7, #0
   11bd4:	mov	r8, #0
   11bd8:	mov	r2, r0
   11bdc:	b	11c9c <__assert_fail@plt+0xd64>
   11be0:	mov	r0, #1
   11be4:	mov	r8, #0
   11be8:	mov	r7, #5
   11bec:	b	11c58 <__assert_fail@plt+0xd20>
   11bf0:	mov	r2, #1
   11bf4:	tst	r4, #1
   11bf8:	beq	11c24 <__assert_fail@plt+0xcec>
   11bfc:	mov	r1, #1
   11c00:	mov	r8, #0
   11c04:	mov	r7, #2
   11c08:	mov	r2, r0
   11c0c:	mov	r3, #1
   11c10:	str	r1, [fp, #-76]	; 0xffffffb4
   11c14:	movw	r1, #22598	; 0x5846
   11c18:	movt	r1, #1
   11c1c:	str	r1, [sp, #92]	; 0x5c
   11c20:	b	11ca0 <__assert_fail@plt+0xd68>
   11c24:	cmp	sl, #0
   11c28:	mov	r8, #1
   11c2c:	mov	r7, #2
   11c30:	movne	r0, #39	; 0x27
   11c34:	strbne	r0, [r6]
   11c38:	movw	r0, #22598	; 0x5846
   11c3c:	movt	r0, #1
   11c40:	b	11c90 <__assert_fail@plt+0xd58>
   11c44:	mov	r7, #5
   11c48:	tst	r4, #1
   11c4c:	beq	11c74 <__assert_fail@plt+0xd3c>
   11c50:	mov	r0, #1
   11c54:	mov	r8, #0
   11c58:	str	r0, [fp, #-76]	; 0xffffffb4
   11c5c:	movw	r0, #22594	; 0x5842
   11c60:	mov	r2, #1
   11c64:	mov	r3, #1
   11c68:	movt	r0, #1
   11c6c:	str	r0, [sp, #92]	; 0x5c
   11c70:	b	11ca0 <__assert_fail@plt+0xd68>
   11c74:	cmp	sl, #0
   11c78:	mov	r8, #1
   11c7c:	mov	r2, #1
   11c80:	movne	r0, #34	; 0x22
   11c84:	strbne	r0, [r6]
   11c88:	movw	r0, #22594	; 0x5842
   11c8c:	movt	r0, #1
   11c90:	str	r0, [sp, #92]	; 0x5c
   11c94:	mov	r0, #1
   11c98:	str	r0, [fp, #-76]	; 0xffffffb4
   11c9c:	mov	r3, #0
   11ca0:	ldr	r0, [fp, #16]
   11ca4:	str	r3, [fp, #-72]	; 0xffffffb8
   11ca8:	str	r7, [fp, #-64]	; 0xffffffc0
   11cac:	str	r2, [sp, #84]	; 0x54
   11cb0:	cmp	r0, #0
   11cb4:	movwne	r0, #1
   11cb8:	and	r0, r0, r3
   11cbc:	str	r0, [fp, #-88]	; 0xffffffa8
   11cc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11cc4:	cmp	r0, #0
   11cc8:	movwne	r0, #1
   11ccc:	subs	r4, r7, #2
   11cd0:	mov	r7, #0
   11cd4:	and	r1, r0, r3
   11cd8:	str	r4, [fp, #-80]	; 0xffffffb0
   11cdc:	and	r1, r2, r1
   11ce0:	str	r1, [sp, #48]	; 0x30
   11ce4:	clz	r1, r4
   11ce8:	lsr	r1, r1, #5
   11cec:	and	r1, r1, r3
   11cf0:	eor	r3, r3, #1
   11cf4:	str	r1, [sp, #64]	; 0x40
   11cf8:	mov	r1, r4
   11cfc:	str	r3, [sp, #88]	; 0x58
   11d00:	movwne	r1, #1
   11d04:	orr	r3, r1, r3
   11d08:	and	r1, r1, r2
   11d0c:	and	r0, r0, r1
   11d10:	str	r3, [sp, #68]	; 0x44
   11d14:	str	r1, [fp, #-68]	; 0xffffffbc
   11d18:	str	r0, [fp, #-60]	; 0xffffffc4
   11d1c:	eor	r0, r2, #1
   11d20:	str	r0, [sp, #52]	; 0x34
   11d24:	cmn	lr, #1
   11d28:	beq	11d38 <__assert_fail@plt+0xe00>
   11d2c:	cmp	r7, lr
   11d30:	bne	11d44 <__assert_fail@plt+0xe0c>
   11d34:	b	1286c <__assert_fail@plt+0x1934>
   11d38:	ldrb	r0, [ip, r7]
   11d3c:	cmp	r0, #0
   11d40:	beq	12874 <__assert_fail@plt+0x193c>
   11d44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d48:	mov	r9, #0
   11d4c:	str	r5, [fp, #-48]	; 0xffffffd0
   11d50:	cmp	r0, #0
   11d54:	beq	11d88 <__assert_fail@plt+0xe50>
   11d58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d5c:	add	r4, r7, r0
   11d60:	cmp	r0, #2
   11d64:	bcc	11d80 <__assert_fail@plt+0xe48>
   11d68:	cmn	lr, #1
   11d6c:	bne	11d80 <__assert_fail@plt+0xe48>
   11d70:	mov	r0, ip
   11d74:	bl	10e78 <strlen@plt>
   11d78:	ldr	ip, [fp, #-84]	; 0xffffffac
   11d7c:	mov	lr, r0
   11d80:	cmp	r4, lr
   11d84:	bls	11d90 <__assert_fail@plt+0xe58>
   11d88:	mov	r0, #0
   11d8c:	b	11dd0 <__assert_fail@plt+0xe98>
   11d90:	ldr	r1, [sp, #92]	; 0x5c
   11d94:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11d98:	add	r0, ip, r7
   11d9c:	mov	r4, lr
   11da0:	bl	10d88 <memcmp@plt>
   11da4:	ldr	r2, [sp, #88]	; 0x58
   11da8:	cmp	r0, #0
   11dac:	mov	r1, r0
   11db0:	movwne	r1, #1
   11db4:	orr	r1, r1, r2
   11db8:	tst	r1, #1
   11dbc:	beq	12904 <__assert_fail@plt+0x19cc>
   11dc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11dc4:	clz	r0, r0
   11dc8:	mov	lr, r4
   11dcc:	lsr	r0, r0, #5
   11dd0:	str	r0, [fp, #-52]	; 0xffffffcc
   11dd4:	ldrb	r5, [ip, r7]
   11dd8:	cmp	r5, #126	; 0x7e
   11ddc:	bhi	12194 <__assert_fail@plt+0x125c>
   11de0:	add	r3, pc, #16
   11de4:	mov	r4, #1
   11de8:	mov	r2, #110	; 0x6e
   11dec:	mov	r0, #97	; 0x61
   11df0:	mov	r1, #0
   11df4:	ldr	pc, [r3, r5, lsl #2]
   11df8:	muleq	r1, r0, r0
   11dfc:	muleq	r1, r4, r1
   11e00:	muleq	r1, r4, r1
   11e04:	muleq	r1, r4, r1
   11e08:	muleq	r1, r4, r1
   11e0c:	muleq	r1, r4, r1
   11e10:	muleq	r1, r4, r1
   11e14:	andeq	r2, r1, r8, asr #4
   11e18:	andeq	r2, r1, r0, ror r0
   11e1c:	andeq	r2, r1, r8, rrx
   11e20:	andeq	r2, r1, ip, ror r0
   11e24:	strdeq	r2, [r1], -ip
   11e28:	andeq	r2, r1, r0, rrx
   11e2c:	andeq	r2, r1, r8, ror r0
   11e30:	muleq	r1, r4, r1
   11e34:	muleq	r1, r4, r1
   11e38:	muleq	r1, r4, r1
   11e3c:	muleq	r1, r4, r1
   11e40:	muleq	r1, r4, r1
   11e44:	muleq	r1, r4, r1
   11e48:	muleq	r1, r4, r1
   11e4c:	muleq	r1, r4, r1
   11e50:	muleq	r1, r4, r1
   11e54:	muleq	r1, r4, r1
   11e58:	muleq	r1, r4, r1
   11e5c:	muleq	r1, r4, r1
   11e60:	muleq	r1, r4, r1
   11e64:	muleq	r1, r4, r1
   11e68:	muleq	r1, r4, r1
   11e6c:	muleq	r1, r4, r1
   11e70:	muleq	r1, r4, r1
   11e74:	muleq	r1, r4, r1
   11e78:	andeq	r2, r1, r0, lsl #4
   11e7c:	andeq	r2, r1, r4, lsl #4
   11e80:	andeq	r2, r1, r4, lsl #4
   11e84:	andeq	r2, r1, r8
   11e88:	andeq	r2, r1, r4, lsl #4
   11e8c:	strdeq	r1, [r1], -r4
   11e90:	andeq	r2, r1, r4, lsl #4
   11e94:	andeq	r2, r1, r4, lsl #2
   11e98:	andeq	r2, r1, r4, lsl #4
   11e9c:	andeq	r2, r1, r4, lsl #4
   11ea0:	andeq	r2, r1, r4, lsl #4
   11ea4:	strdeq	r1, [r1], -r4
   11ea8:	strdeq	r1, [r1], -r4
   11eac:	strdeq	r1, [r1], -r4
   11eb0:	strdeq	r1, [r1], -r4
   11eb4:	strdeq	r1, [r1], -r4
   11eb8:	strdeq	r1, [r1], -r4
   11ebc:	strdeq	r1, [r1], -r4
   11ec0:	strdeq	r1, [r1], -r4
   11ec4:	strdeq	r1, [r1], -r4
   11ec8:	strdeq	r1, [r1], -r4
   11ecc:	strdeq	r1, [r1], -r4
   11ed0:	strdeq	r1, [r1], -r4
   11ed4:	strdeq	r1, [r1], -r4
   11ed8:	strdeq	r1, [r1], -r4
   11edc:	strdeq	r1, [r1], -r4
   11ee0:	strdeq	r1, [r1], -r4
   11ee4:	andeq	r2, r1, r4, lsl #4
   11ee8:	andeq	r2, r1, r4, lsl #4
   11eec:	andeq	r2, r1, r4, lsl #4
   11ef0:	andeq	r2, r1, r4, lsl #4
   11ef4:	ldrdeq	r2, [r1], -r0
   11ef8:	muleq	r1, r4, r1
   11efc:	strdeq	r1, [r1], -r4
   11f00:	strdeq	r1, [r1], -r4
   11f04:	strdeq	r1, [r1], -r4
   11f08:	strdeq	r1, [r1], -r4
   11f0c:	strdeq	r1, [r1], -r4
   11f10:	strdeq	r1, [r1], -r4
   11f14:	strdeq	r1, [r1], -r4
   11f18:	strdeq	r1, [r1], -r4
   11f1c:	strdeq	r1, [r1], -r4
   11f20:	strdeq	r1, [r1], -r4
   11f24:	strdeq	r1, [r1], -r4
   11f28:	strdeq	r1, [r1], -r4
   11f2c:	strdeq	r1, [r1], -r4
   11f30:	strdeq	r1, [r1], -r4
   11f34:	strdeq	r1, [r1], -r4
   11f38:	strdeq	r1, [r1], -r4
   11f3c:	strdeq	r1, [r1], -r4
   11f40:	strdeq	r1, [r1], -r4
   11f44:	strdeq	r1, [r1], -r4
   11f48:	strdeq	r1, [r1], -r4
   11f4c:	strdeq	r1, [r1], -r4
   11f50:	strdeq	r1, [r1], -r4
   11f54:	strdeq	r1, [r1], -r4
   11f58:	strdeq	r1, [r1], -r4
   11f5c:	strdeq	r1, [r1], -r4
   11f60:	strdeq	r1, [r1], -r4
   11f64:	andeq	r2, r1, r4, lsl #4
   11f68:	andeq	r2, r1, ip, lsr r0
   11f6c:	strdeq	r1, [r1], -r4
   11f70:	andeq	r2, r1, r4, lsl #4
   11f74:	strdeq	r1, [r1], -r4
   11f78:	andeq	r2, r1, r4, lsl #4
   11f7c:	strdeq	r1, [r1], -r4
   11f80:	strdeq	r1, [r1], -r4
   11f84:	strdeq	r1, [r1], -r4
   11f88:	strdeq	r1, [r1], -r4
   11f8c:	strdeq	r1, [r1], -r4
   11f90:	strdeq	r1, [r1], -r4
   11f94:	strdeq	r1, [r1], -r4
   11f98:	strdeq	r1, [r1], -r4
   11f9c:	strdeq	r1, [r1], -r4
   11fa0:	strdeq	r1, [r1], -r4
   11fa4:	strdeq	r1, [r1], -r4
   11fa8:	strdeq	r1, [r1], -r4
   11fac:	strdeq	r1, [r1], -r4
   11fb0:	strdeq	r1, [r1], -r4
   11fb4:	strdeq	r1, [r1], -r4
   11fb8:	strdeq	r1, [r1], -r4
   11fbc:	strdeq	r1, [r1], -r4
   11fc0:	strdeq	r1, [r1], -r4
   11fc4:	strdeq	r1, [r1], -r4
   11fc8:	strdeq	r1, [r1], -r4
   11fcc:	strdeq	r1, [r1], -r4
   11fd0:	strdeq	r1, [r1], -r4
   11fd4:	strdeq	r1, [r1], -r4
   11fd8:	strdeq	r1, [r1], -r4
   11fdc:	strdeq	r1, [r1], -r4
   11fe0:	strdeq	r1, [r1], -r4
   11fe4:	andeq	r2, r1, ip, lsl r0
   11fe8:	andeq	r2, r1, r4, lsl #4
   11fec:	andeq	r2, r1, ip, lsl r0
   11ff0:	andeq	r2, r1, r8
   11ff4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   11ff8:	cmp	r0, #0
   11ffc:	beq	1225c <__assert_fail@plt+0x1324>
   12000:	ldr	r0, [fp, #16]
   12004:	b	12260 <__assert_fail@plt+0x1328>
   12008:	mov	r4, #0
   1200c:	cmp	r7, #0
   12010:	beq	12200 <__assert_fail@plt+0x12c8>
   12014:	mov	r9, #0
   12018:	b	11ff4 <__assert_fail@plt+0x10bc>
   1201c:	mov	r4, #0
   12020:	cmn	lr, #1
   12024:	beq	121e4 <__assert_fail@plt+0x12ac>
   12028:	cmp	r7, #0
   1202c:	bne	12014 <__assert_fail@plt+0x10dc>
   12030:	cmp	lr, #1
   12034:	beq	12200 <__assert_fail@plt+0x12c8>
   12038:	b	12014 <__assert_fail@plt+0x10dc>
   1203c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12040:	cmp	r0, #2
   12044:	bne	12224 <__assert_fail@plt+0x12ec>
   12048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1204c:	tst	r0, #1
   12050:	bne	12920 <__assert_fail@plt+0x19e8>
   12054:	mov	r9, #0
   12058:	mov	r0, #92	; 0x5c
   1205c:	b	12238 <__assert_fail@plt+0x1300>
   12060:	mov	r0, #102	; 0x66
   12064:	b	12248 <__assert_fail@plt+0x1310>
   12068:	mov	r2, #116	; 0x74
   1206c:	b	1207c <__assert_fail@plt+0x1144>
   12070:	mov	r0, #98	; 0x62
   12074:	b	12248 <__assert_fail@plt+0x1310>
   12078:	mov	r2, #114	; 0x72
   1207c:	ldr	r0, [sp, #68]	; 0x44
   12080:	tst	r0, #1
   12084:	mov	r0, r2
   12088:	bne	12248 <__assert_fail@plt+0x1310>
   1208c:	b	12920 <__assert_fail@plt+0x19e8>
   12090:	ldr	r0, [sp, #84]	; 0x54
   12094:	tst	r0, #1
   12098:	beq	12338 <__assert_fail@plt+0x1400>
   1209c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120a0:	tst	r0, #1
   120a4:	bne	12a30 <__assert_fail@plt+0x1af8>
   120a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   120b0:	cmp	r0, #2
   120b4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120b8:	movwne	r0, #1
   120bc:	orr	r0, r0, r2
   120c0:	tst	r0, #1
   120c4:	beq	12708 <__assert_fail@plt+0x17d0>
   120c8:	mov	r0, r8
   120cc:	b	1273c <__assert_fail@plt+0x1804>
   120d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120d4:	mov	r9, #0
   120d8:	mov	r5, #63	; 0x3f
   120dc:	cmp	r0, #5
   120e0:	beq	124ec <__assert_fail@plt+0x15b4>
   120e4:	cmp	r0, #2
   120e8:	bne	12590 <__assert_fail@plt+0x1658>
   120ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120f0:	tst	r0, #1
   120f4:	beq	12594 <__assert_fail@plt+0x165c>
   120f8:	b	12920 <__assert_fail@plt+0x19e8>
   120fc:	mov	r0, #118	; 0x76
   12100:	b	12248 <__assert_fail@plt+0x1310>
   12104:	mov	r0, #1
   12108:	mov	r5, #39	; 0x27
   1210c:	str	r0, [sp, #60]	; 0x3c
   12110:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12114:	cmp	r0, #2
   12118:	bne	1218c <__assert_fail@plt+0x1254>
   1211c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12120:	tst	r0, #1
   12124:	bne	12920 <__assert_fail@plt+0x19e8>
   12128:	ldr	r2, [sp, #56]	; 0x38
   1212c:	clz	r1, sl
   12130:	mov	r9, #0
   12134:	lsr	r1, r1, #5
   12138:	cmp	r2, #0
   1213c:	mov	r0, r2
   12140:	movwne	r0, #1
   12144:	orrs	r0, r0, r1
   12148:	moveq	r2, sl
   1214c:	moveq	sl, r0
   12150:	cmp	r8, sl
   12154:	str	r2, [sp, #56]	; 0x38
   12158:	movcc	r0, #39	; 0x27
   1215c:	strbcc	r0, [r6, r8]
   12160:	add	r0, r8, #1
   12164:	cmp	r0, sl
   12168:	movcc	r1, #92	; 0x5c
   1216c:	strbcc	r1, [r6, r0]
   12170:	add	r0, r8, #2
   12174:	add	r8, r8, #3
   12178:	cmp	r0, sl
   1217c:	movcc	r1, #39	; 0x27
   12180:	strbcc	r1, [r6, r0]
   12184:	mov	r0, #0
   12188:	str	r0, [fp, #-56]	; 0xffffffc8
   1218c:	mov	r4, #1
   12190:	b	11ff4 <__assert_fail@plt+0x10bc>
   12194:	ldr	r0, [sp, #40]	; 0x28
   12198:	cmp	r0, #1
   1219c:	bne	12364 <__assert_fail@plt+0x142c>
   121a0:	str	lr, [sp, #28]
   121a4:	bl	10e60 <__ctype_b_loc@plt>
   121a8:	ldr	r0, [r0]
   121ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   121b0:	mov	r1, #1
   121b4:	add	r0, r0, r5, lsl #1
   121b8:	ldrb	r0, [r0, #1]
   121bc:	ubfx	r4, r0, #6, #1
   121c0:	ldr	r0, [sp, #52]	; 0x34
   121c4:	mov	r2, r1
   121c8:	cmp	r1, #1
   121cc:	orr	r0, r4, r0
   121d0:	bhi	1259c <__assert_fail@plt+0x1664>
   121d4:	tst	r0, #1
   121d8:	beq	1259c <__assert_fail@plt+0x1664>
   121dc:	ldr	lr, [sp, #28]
   121e0:	b	11ff4 <__assert_fail@plt+0x10bc>
   121e4:	cmp	r7, #0
   121e8:	ldrbeq	r0, [ip, #1]
   121ec:	cmpeq	r0, #0
   121f0:	beq	12200 <__assert_fail@plt+0x12c8>
   121f4:	mvn	lr, #0
   121f8:	mov	r9, #0
   121fc:	b	11ff4 <__assert_fail@plt+0x10bc>
   12200:	mov	r1, #1
   12204:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12208:	cmp	r0, #2
   1220c:	bne	1221c <__assert_fail@plt+0x12e4>
   12210:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12214:	tst	r0, #1
   12218:	bne	12920 <__assert_fail@plt+0x19e8>
   1221c:	mov	r4, r1
   12220:	b	11ff4 <__assert_fail@plt+0x10bc>
   12224:	ldr	r1, [sp, #48]	; 0x30
   12228:	mov	r9, #0
   1222c:	mov	r0, #92	; 0x5c
   12230:	cmp	r1, #0
   12234:	beq	12248 <__assert_fail@plt+0x1310>
   12238:	mov	r4, #0
   1223c:	cmp	r9, #0
   12240:	beq	127d4 <__assert_fail@plt+0x189c>
   12244:	b	12810 <__assert_fail@plt+0x18d8>
   12248:	ldr	r1, [sp, #84]	; 0x54
   1224c:	mov	r4, #0
   12250:	mov	r9, #0
   12254:	tst	r1, #1
   12258:	bne	12298 <__assert_fail@plt+0x1360>
   1225c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12260:	cmp	r0, #0
   12264:	mov	r0, r5
   12268:	beq	1228c <__assert_fail@plt+0x1354>
   1226c:	ldr	r1, [fp, #16]
   12270:	ubfx	r0, r5, #5, #3
   12274:	mov	r2, #1
   12278:	ldr	r0, [r1, r0, lsl #2]
   1227c:	and	r1, r5, #31
   12280:	tst	r0, r2, lsl r1
   12284:	mov	r0, r5
   12288:	bne	12298 <__assert_fail@plt+0x1360>
   1228c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12290:	cmp	r1, #0
   12294:	beq	127cc <__assert_fail@plt+0x1894>
   12298:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1229c:	tst	r1, #1
   122a0:	bne	128f8 <__assert_fail@plt+0x19c0>
   122a4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   122ac:	cmp	r1, #2
   122b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122b4:	movwne	r1, #1
   122b8:	orr	r1, r1, r2
   122bc:	tst	r1, #1
   122c0:	beq	122cc <__assert_fail@plt+0x1394>
   122c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122c8:	b	12308 <__assert_fail@plt+0x13d0>
   122cc:	cmp	r8, sl
   122d0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122d4:	movcc	r1, #39	; 0x27
   122d8:	strbcc	r1, [r6, r8]
   122dc:	add	r1, r8, #1
   122e0:	cmp	r1, sl
   122e4:	movcc	r2, #36	; 0x24
   122e8:	strbcc	r2, [r6, r1]
   122ec:	add	r1, r8, #2
   122f0:	add	r8, r8, #3
   122f4:	cmp	r1, sl
   122f8:	movcc	r2, #39	; 0x27
   122fc:	strbcc	r2, [r6, r1]
   12300:	mov	r1, #1
   12304:	str	r1, [fp, #-56]	; 0xffffffc8
   12308:	cmp	r8, sl
   1230c:	movcc	r1, #92	; 0x5c
   12310:	strbcc	r1, [r6, r8]
   12314:	add	r8, r8, #1
   12318:	cmp	r8, sl
   1231c:	and	r5, r5, r4
   12320:	add	r7, r7, #1
   12324:	strbcc	r0, [r6, r8]
   12328:	add	r8, r8, #1
   1232c:	cmn	lr, #1
   12330:	bne	11d2c <__assert_fail@plt+0xdf4>
   12334:	b	11d38 <__assert_fail@plt+0xe00>
   12338:	ldr	r0, [sp, #36]	; 0x24
   1233c:	mov	r4, #0
   12340:	mov	r9, #0
   12344:	mov	r5, #0
   12348:	cmp	r0, #0
   1234c:	beq	1225c <__assert_fail@plt+0x1324>
   12350:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12354:	add	r7, r7, #1
   12358:	cmn	lr, #1
   1235c:	bne	11d2c <__assert_fail@plt+0xdf4>
   12360:	b	11d38 <__assert_fail@plt+0xe00>
   12364:	mov	r0, #0
   12368:	cmn	lr, #1
   1236c:	str	r0, [fp, #-36]	; 0xffffffdc
   12370:	str	r0, [fp, #-40]	; 0xffffffd8
   12374:	bne	12388 <__assert_fail@plt+0x1450>
   12378:	mov	r0, ip
   1237c:	bl	10e78 <strlen@plt>
   12380:	ldr	ip, [fp, #-84]	; 0xffffffac
   12384:	mov	lr, r0
   12388:	add	r0, ip, r7
   1238c:	mov	r4, #1
   12390:	mov	r6, #0
   12394:	str	lr, [sp, #28]
   12398:	str	r0, [sp, #24]
   1239c:	sub	r0, fp, #40	; 0x28
   123a0:	mov	r3, r0
   123a4:	str	r6, [sp, #44]	; 0x2c
   123a8:	add	r6, r6, r7
   123ac:	sub	r0, fp, #44	; 0x2c
   123b0:	add	r1, ip, r6
   123b4:	sub	r2, lr, r6
   123b8:	bl	1501c <__assert_fail@plt+0x40e4>
   123bc:	cmp	r0, #0
   123c0:	beq	12858 <__assert_fail@plt+0x1920>
   123c4:	cmn	r0, #1
   123c8:	beq	12818 <__assert_fail@plt+0x18e0>
   123cc:	ldr	lr, [sp, #28]
   123d0:	cmn	r0, #2
   123d4:	beq	12820 <__assert_fail@plt+0x18e8>
   123d8:	ldr	r2, [sp, #64]	; 0x40
   123dc:	cmp	r0, #2
   123e0:	mov	r1, #0
   123e4:	movwcc	r1, #1
   123e8:	eor	r2, r2, #1
   123ec:	orrs	r1, r2, r1
   123f0:	bne	124b0 <__assert_fail@plt+0x1578>
   123f4:	ldr	r1, [sp, #44]	; 0x2c
   123f8:	ldr	r2, [sp, #24]
   123fc:	add	r1, r2, r1
   12400:	mov	r2, #1
   12404:	ldrb	r3, [r1, r2]
   12408:	sub	r3, r3, #91	; 0x5b
   1240c:	cmp	r3, #33	; 0x21
   12410:	bhi	124a4 <__assert_fail@plt+0x156c>
   12414:	add	r6, pc, #0
   12418:	ldr	pc, [r6, r3, lsl #2]
   1241c:	andeq	r2, r1, r8, lsl r9
   12420:	andeq	r2, r1, r8, lsl r9
   12424:	andeq	r2, r1, r4, lsr #9
   12428:	andeq	r2, r1, r8, lsl r9
   1242c:	andeq	r2, r1, r4, lsr #9
   12430:	andeq	r2, r1, r8, lsl r9
   12434:	andeq	r2, r1, r4, lsr #9
   12438:	andeq	r2, r1, r4, lsr #9
   1243c:	andeq	r2, r1, r4, lsr #9
   12440:	andeq	r2, r1, r4, lsr #9
   12444:	andeq	r2, r1, r4, lsr #9
   12448:	andeq	r2, r1, r4, lsr #9
   1244c:	andeq	r2, r1, r4, lsr #9
   12450:	andeq	r2, r1, r4, lsr #9
   12454:	andeq	r2, r1, r4, lsr #9
   12458:	andeq	r2, r1, r4, lsr #9
   1245c:	andeq	r2, r1, r4, lsr #9
   12460:	andeq	r2, r1, r4, lsr #9
   12464:	andeq	r2, r1, r4, lsr #9
   12468:	andeq	r2, r1, r4, lsr #9
   1246c:	andeq	r2, r1, r4, lsr #9
   12470:	andeq	r2, r1, r4, lsr #9
   12474:	andeq	r2, r1, r4, lsr #9
   12478:	andeq	r2, r1, r4, lsr #9
   1247c:	andeq	r2, r1, r4, lsr #9
   12480:	andeq	r2, r1, r4, lsr #9
   12484:	andeq	r2, r1, r4, lsr #9
   12488:	andeq	r2, r1, r4, lsr #9
   1248c:	andeq	r2, r1, r4, lsr #9
   12490:	andeq	r2, r1, r4, lsr #9
   12494:	andeq	r2, r1, r4, lsr #9
   12498:	andeq	r2, r1, r4, lsr #9
   1249c:	andeq	r2, r1, r4, lsr #9
   124a0:	andeq	r2, r1, r8, lsl r9
   124a4:	add	r2, r2, #1
   124a8:	cmp	r2, r0
   124ac:	bcc	12404 <__assert_fail@plt+0x14cc>
   124b0:	ldr	r6, [sp, #44]	; 0x2c
   124b4:	add	r6, r0, r6
   124b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124bc:	bl	10dc4 <iswprint@plt>
   124c0:	cmp	r0, #0
   124c4:	movwne	r0, #1
   124c8:	and	r4, r4, r0
   124cc:	sub	r0, fp, #40	; 0x28
   124d0:	bl	10d7c <mbsinit@plt>
   124d4:	ldr	lr, [sp, #28]
   124d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   124dc:	sub	r3, fp, #40	; 0x28
   124e0:	cmp	r0, #0
   124e4:	beq	123a4 <__assert_fail@plt+0x146c>
   124e8:	b	12860 <__assert_fail@plt+0x1928>
   124ec:	ldr	r0, [sp, #32]
   124f0:	cmp	r0, #0
   124f4:	beq	12590 <__assert_fail@plt+0x1658>
   124f8:	add	r0, r7, #2
   124fc:	cmp	r0, lr
   12500:	bcs	12590 <__assert_fail@plt+0x1658>
   12504:	add	r1, ip, r7
   12508:	ldrb	r1, [r1, #1]
   1250c:	cmp	r1, #63	; 0x3f
   12510:	bne	12590 <__assert_fail@plt+0x1658>
   12514:	ldrb	r5, [ip, r0]
   12518:	sub	r1, r5, #33	; 0x21
   1251c:	cmp	r1, #29
   12520:	bhi	12590 <__assert_fail@plt+0x1658>
   12524:	movw	r3, #20929	; 0x51c1
   12528:	mov	r2, #1
   1252c:	movt	r3, #14336	; 0x3800
   12530:	tst	r3, r2, lsl r1
   12534:	beq	12590 <__assert_fail@plt+0x1658>
   12538:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1253c:	tst	r1, #1
   12540:	bne	12a38 <__assert_fail@plt+0x1b00>
   12544:	cmp	r8, sl
   12548:	mov	r7, r0
   1254c:	mov	r4, #0
   12550:	movcc	r1, #63	; 0x3f
   12554:	strbcc	r1, [r6, r8]
   12558:	add	r1, r8, #1
   1255c:	cmp	r1, sl
   12560:	movcc	r2, #34	; 0x22
   12564:	strbcc	r2, [r6, r1]
   12568:	add	r1, r8, #2
   1256c:	cmp	r1, sl
   12570:	movcc	r2, #34	; 0x22
   12574:	strbcc	r2, [r6, r1]
   12578:	add	r1, r8, #3
   1257c:	add	r8, r8, #4
   12580:	cmp	r1, sl
   12584:	movcc	r2, #63	; 0x3f
   12588:	strbcc	r2, [r6, r1]
   1258c:	b	11ff4 <__assert_fail@plt+0x10bc>
   12590:	mov	r5, #63	; 0x3f
   12594:	mov	r4, #0
   12598:	b	11ff4 <__assert_fail@plt+0x10bc>
   1259c:	add	r1, r2, r7
   125a0:	ldr	lr, [sp, #28]
   125a4:	mov	r3, #0
   125a8:	str	r1, [sp, #44]	; 0x2c
   125ac:	add	r1, r7, #1
   125b0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   125b4:	tst	r0, #1
   125b8:	bne	1268c <__assert_fail@plt+0x1754>
   125bc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   125c0:	tst	r2, #1
   125c4:	bne	12980 <__assert_fail@plt+0x1a48>
   125c8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   125cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   125d0:	cmp	r7, #2
   125d4:	movwne	r3, #1
   125d8:	orr	r3, r3, r2
   125dc:	tst	r3, #1
   125e0:	bne	1261c <__assert_fail@plt+0x16e4>
   125e4:	cmp	r8, sl
   125e8:	add	r3, r8, #1
   125ec:	movcc	r2, #39	; 0x27
   125f0:	strbcc	r2, [r6, r8]
   125f4:	cmp	r3, sl
   125f8:	movcc	r2, #36	; 0x24
   125fc:	strbcc	r2, [r6, r3]
   12600:	add	r3, r8, #2
   12604:	add	r8, r8, #3
   12608:	cmp	r3, sl
   1260c:	movcc	r2, #39	; 0x27
   12610:	strbcc	r2, [r6, r3]
   12614:	mov	r2, #1
   12618:	str	r2, [fp, #-56]	; 0xffffffc8
   1261c:	cmp	r8, sl
   12620:	movcc	r3, #92	; 0x5c
   12624:	strbcc	r3, [r6, r8]
   12628:	add	r3, r8, #1
   1262c:	cmp	r3, sl
   12630:	andcc	r7, r5, #192	; 0xc0
   12634:	movcc	r2, #48	; 0x30
   12638:	orrcc	r7, r2, r7, lsr #6
   1263c:	strbcc	r7, [r6, r3]
   12640:	add	r3, r8, #2
   12644:	add	r8, r8, #3
   12648:	cmp	r3, sl
   1264c:	lsrcc	r7, r5, #3
   12650:	movcc	r2, #6
   12654:	bficc	r7, r2, #3, #29
   12658:	mov	r2, #6
   1265c:	strbcc	r7, [r6, r3]
   12660:	bfi	r5, r2, #3, #29
   12664:	mov	r3, #1
   12668:	b	126b0 <__assert_fail@plt+0x1778>
   1266c:	cmp	r8, sl
   12670:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12674:	strbcc	r5, [r6, r8]
   12678:	add	r8, r8, #1
   1267c:	ldrb	r5, [ip, r1]
   12680:	add	r1, r1, #1
   12684:	tst	r0, #1
   12688:	beq	125bc <__assert_fail@plt+0x1684>
   1268c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12690:	tst	r2, #1
   12694:	beq	126a8 <__assert_fail@plt+0x1770>
   12698:	cmp	r8, sl
   1269c:	movcc	r7, #92	; 0x5c
   126a0:	strbcc	r7, [r6, r8]
   126a4:	add	r8, r8, #1
   126a8:	mov	r2, #0
   126ac:	str	r2, [fp, #-52]	; 0xffffffcc
   126b0:	ldr	r2, [sp, #44]	; 0x2c
   126b4:	and	r9, r3, #1
   126b8:	cmp	r2, r1
   126bc:	bls	127bc <__assert_fail@plt+0x1884>
   126c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126c4:	cmp	r9, #0
   126c8:	movwne	r9, #1
   126cc:	mvn	r7, r2
   126d0:	orr	r7, r7, r9
   126d4:	tst	r7, #1
   126d8:	bne	1266c <__assert_fail@plt+0x1734>
   126dc:	cmp	r8, sl
   126e0:	movcc	r7, #39	; 0x27
   126e4:	strbcc	r7, [r6, r8]
   126e8:	add	r7, r8, #1
   126ec:	add	r8, r8, #2
   126f0:	cmp	r7, sl
   126f4:	movcc	r2, #39	; 0x27
   126f8:	strbcc	r2, [r6, r7]
   126fc:	mov	r2, #0
   12700:	str	r2, [fp, #-56]	; 0xffffffc8
   12704:	b	1266c <__assert_fail@plt+0x1734>
   12708:	cmp	r8, sl
   1270c:	mov	r2, #1
   12710:	movcc	r0, #39	; 0x27
   12714:	strbcc	r0, [r6, r8]
   12718:	add	r0, r8, #1
   1271c:	cmp	r0, sl
   12720:	movcc	r1, #36	; 0x24
   12724:	strbcc	r1, [r6, r0]
   12728:	add	r0, r8, #2
   1272c:	cmp	r0, sl
   12730:	movcc	r1, #39	; 0x27
   12734:	strbcc	r1, [r6, r0]
   12738:	add	r0, r8, #3
   1273c:	cmp	r0, sl
   12740:	add	r8, r0, #1
   12744:	str	r2, [fp, #-56]	; 0xffffffc8
   12748:	movcc	r1, #92	; 0x5c
   1274c:	strbcc	r1, [r6, r0]
   12750:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12754:	cmp	r1, #2
   12758:	beq	127ac <__assert_fail@plt+0x1874>
   1275c:	add	r1, r7, #1
   12760:	mov	r4, #0
   12764:	mov	r9, #1
   12768:	mov	r5, #48	; 0x30
   1276c:	cmp	r1, lr
   12770:	bcs	11ff4 <__assert_fail@plt+0x10bc>
   12774:	ldrb	r1, [ip, r1]
   12778:	sub	r1, r1, #48	; 0x30
   1277c:	uxtb	r1, r1
   12780:	cmp	r1, #9
   12784:	bhi	11ff4 <__assert_fail@plt+0x10bc>
   12788:	cmp	r8, sl
   1278c:	movcc	r1, #48	; 0x30
   12790:	strbcc	r1, [r6, r8]
   12794:	add	r1, r0, #2
   12798:	add	r8, r0, #3
   1279c:	cmp	r1, sl
   127a0:	movcc	r2, #48	; 0x30
   127a4:	strbcc	r2, [r6, r1]
   127a8:	b	11ff4 <__assert_fail@plt+0x10bc>
   127ac:	mov	r0, #48	; 0x30
   127b0:	mov	r9, #1
   127b4:	mov	r4, #0
   127b8:	b	1228c <__assert_fail@plt+0x1354>
   127bc:	cmp	r9, #0
   127c0:	sub	r7, r1, #1
   127c4:	mov	r0, r5
   127c8:	movwne	r9, #1
   127cc:	cmp	r9, #0
   127d0:	bne	12810 <__assert_fail@plt+0x18d8>
   127d4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   127d8:	tst	r1, #1
   127dc:	beq	12810 <__assert_fail@plt+0x18d8>
   127e0:	cmp	r8, sl
   127e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127e8:	movcc	r1, #39	; 0x27
   127ec:	strbcc	r1, [r6, r8]
   127f0:	add	r1, r8, #1
   127f4:	add	r8, r8, #2
   127f8:	cmp	r1, sl
   127fc:	movcc	r2, #39	; 0x27
   12800:	strbcc	r2, [r6, r1]
   12804:	mov	r1, #0
   12808:	str	r1, [fp, #-56]	; 0xffffffc8
   1280c:	b	12318 <__assert_fail@plt+0x13e0>
   12810:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12814:	b	12318 <__assert_fail@plt+0x13e0>
   12818:	mov	r4, #0
   1281c:	b	12858 <__assert_fail@plt+0x1920>
   12820:	mov	r4, #0
   12824:	cmp	lr, r6
   12828:	bls	12858 <__assert_fail@plt+0x1920>
   1282c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12830:	ldr	r6, [sp, #44]	; 0x2c
   12834:	ldr	r0, [sp, #24]
   12838:	ldrb	r0, [r0, r6]
   1283c:	cmp	r0, #0
   12840:	beq	12860 <__assert_fail@plt+0x1928>
   12844:	add	r6, r6, #1
   12848:	add	r0, r7, r6
   1284c:	cmp	r0, lr
   12850:	bcc	12834 <__assert_fail@plt+0x18fc>
   12854:	b	12860 <__assert_fail@plt+0x1928>
   12858:	ldr	ip, [fp, #-84]	; 0xffffffac
   1285c:	ldr	r6, [sp, #44]	; 0x2c
   12860:	mov	r1, r6
   12864:	ldr	r6, [sp, #80]	; 0x50
   12868:	b	121c0 <__assert_fail@plt+0x1288>
   1286c:	mov	lr, r7
   12870:	b	12878 <__assert_fail@plt+0x1940>
   12874:	mvn	lr, #0
   12878:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1287c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12880:	eor	r0, r7, #2
   12884:	orr	r0, r0, r8
   12888:	clz	r0, r0
   1288c:	lsr	r0, r0, #5
   12890:	tst	r1, r0
   12894:	bne	12920 <__assert_fail@plt+0x19e8>
   12898:	mov	r0, r1
   1289c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   128a0:	cmp	r7, #2
   128a4:	movwne	r1, #1
   128a8:	orr	r0, r0, r1
   128ac:	tst	r0, #1
   128b0:	ldreq	r0, [sp, #60]	; 0x3c
   128b4:	eoreq	r0, r0, #1
   128b8:	tsteq	r0, #1
   128bc:	bne	129cc <__assert_fail@plt+0x1a94>
   128c0:	mov	r9, lr
   128c4:	tst	r5, #1
   128c8:	bne	12988 <__assert_fail@plt+0x1a50>
   128cc:	ldr	r6, [sp, #56]	; 0x38
   128d0:	mov	r4, #0
   128d4:	cmp	r6, #0
   128d8:	beq	129c4 <__assert_fail@plt+0x1a8c>
   128dc:	ldr	r0, [sp, #84]	; 0x54
   128e0:	mov	r1, #0
   128e4:	cmp	sl, #0
   128e8:	mov	r5, #0
   128ec:	str	r1, [fp, #-72]	; 0xffffffb8
   128f0:	beq	11ac0 <__assert_fail@plt+0xb88>
   128f4:	b	129cc <__assert_fail@plt+0x1a94>
   128f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   128fc:	ldr	r2, [sp, #84]	; 0x54
   12900:	b	12928 <__assert_fail@plt+0x19f0>
   12904:	ldr	ip, [fp, #-84]	; 0xffffffac
   12908:	mov	r2, #1
   1290c:	mov	lr, r4
   12910:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12914:	b	12928 <__assert_fail@plt+0x19f0>
   12918:	ldr	r6, [sp, #80]	; 0x50
   1291c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12920:	ldr	r2, [sp, #84]	; 0x54
   12924:	mov	r7, #2
   12928:	mov	r0, #0
   1292c:	ldr	r1, [fp, #12]
   12930:	tst	r2, #1
   12934:	mov	r2, r7
   12938:	mov	r3, lr
   1293c:	str	r0, [sp, #8]
   12940:	ldr	r0, [sp, #72]	; 0x48
   12944:	movwne	r2, #4
   12948:	cmp	r7, #2
   1294c:	movne	r2, r7
   12950:	str	r2, [sp]
   12954:	mov	r2, ip
   12958:	bic	r1, r1, #2
   1295c:	str	r0, [sp, #12]
   12960:	ldr	r0, [sp, #76]	; 0x4c
   12964:	str	r1, [sp, #4]
   12968:	mov	r1, sl
   1296c:	str	r0, [sp, #16]
   12970:	mov	r0, r6
   12974:	bl	11a40 <__assert_fail@plt+0xb08>
   12978:	mov	r8, r0
   1297c:	b	12a24 <__assert_fail@plt+0x1aec>
   12980:	ldr	r2, [sp, #84]	; 0x54
   12984:	b	12928 <__assert_fail@plt+0x19f0>
   12988:	mov	r0, #5
   1298c:	ldr	r1, [sp, #56]	; 0x38
   12990:	ldr	r2, [fp, #-84]	; 0xffffffac
   12994:	mov	r3, r9
   12998:	str	r0, [sp]
   1299c:	ldr	r0, [fp, #12]
   129a0:	str	r0, [sp, #4]
   129a4:	ldr	r0, [fp, #16]
   129a8:	str	r0, [sp, #8]
   129ac:	ldr	r0, [sp, #72]	; 0x48
   129b0:	str	r0, [sp, #12]
   129b4:	ldr	r0, [sp, #76]	; 0x4c
   129b8:	str	r0, [sp, #16]
   129bc:	ldr	r0, [sp, #80]	; 0x50
   129c0:	b	12974 <__assert_fail@plt+0x1a3c>
   129c4:	mov	r0, #0
   129c8:	str	r0, [fp, #-72]	; 0xffffffb8
   129cc:	ldr	r1, [sp, #92]	; 0x5c
   129d0:	cmp	r1, #0
   129d4:	beq	12a14 <__assert_fail@plt+0x1adc>
   129d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129dc:	ldr	r2, [sp, #80]	; 0x50
   129e0:	tst	r0, #1
   129e4:	bne	12a18 <__assert_fail@plt+0x1ae0>
   129e8:	ldrb	r0, [r1]
   129ec:	cmp	r0, #0
   129f0:	beq	12a18 <__assert_fail@plt+0x1ae0>
   129f4:	add	r1, r1, #1
   129f8:	cmp	r8, sl
   129fc:	strbcc	r0, [r2, r8]
   12a00:	add	r8, r8, #1
   12a04:	ldrb	r0, [r1], #1
   12a08:	cmp	r0, #0
   12a0c:	bne	129f8 <__assert_fail@plt+0x1ac0>
   12a10:	b	12a18 <__assert_fail@plt+0x1ae0>
   12a14:	ldr	r2, [sp, #80]	; 0x50
   12a18:	cmp	r8, sl
   12a1c:	movcc	r0, #0
   12a20:	strbcc	r0, [r2, r8]
   12a24:	mov	r0, r8
   12a28:	sub	sp, fp, #28
   12a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a30:	mov	r2, #1
   12a34:	b	12910 <__assert_fail@plt+0x19d8>
   12a38:	ldr	r2, [sp, #84]	; 0x54
   12a3c:	mov	r7, #5
   12a40:	b	12928 <__assert_fail@plt+0x19f0>
   12a44:	bl	10f2c <abort@plt>
   12a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a4c:	add	fp, sp, #28
   12a50:	sub	sp, sp, #28
   12a54:	movw	r5, #24912	; 0x6150
   12a58:	cmp	r2, #0
   12a5c:	mov	r4, r1
   12a60:	mov	r7, r0
   12a64:	str	r0, [sp, #20]
   12a68:	movt	r5, #2
   12a6c:	movne	r5, r2
   12a70:	bl	10e90 <__errno_location@plt>
   12a74:	mov	sl, r0
   12a78:	ldm	r5, {r0, r1}
   12a7c:	ldr	r2, [r5, #40]	; 0x28
   12a80:	ldr	r3, [r5, #44]	; 0x2c
   12a84:	add	r9, r5, #8
   12a88:	ldr	r6, [sl]
   12a8c:	orr	r8, r1, #1
   12a90:	mov	r1, #0
   12a94:	str	r6, [sp, #24]
   12a98:	stm	sp, {r0, r8, r9}
   12a9c:	str	r2, [sp, #12]
   12aa0:	str	r3, [sp, #16]
   12aa4:	mov	r0, #0
   12aa8:	mov	r2, r7
   12aac:	mov	r3, r4
   12ab0:	mov	r6, r4
   12ab4:	bl	11a40 <__assert_fail@plt+0xb08>
   12ab8:	add	r7, r0, #1
   12abc:	mov	r0, r7
   12ac0:	bl	13c58 <__assert_fail@plt+0x2d20>
   12ac4:	mov	r4, r0
   12ac8:	ldr	r0, [r5]
   12acc:	ldr	r2, [r5, #44]	; 0x2c
   12ad0:	ldr	r1, [r5, #40]	; 0x28
   12ad4:	mov	r3, r6
   12ad8:	stm	sp, {r0, r8, r9}
   12adc:	str	r2, [sp, #16]
   12ae0:	str	r1, [sp, #12]
   12ae4:	mov	r0, r4
   12ae8:	mov	r1, r7
   12aec:	ldr	r2, [sp, #20]
   12af0:	bl	11a40 <__assert_fail@plt+0xb08>
   12af4:	ldr	r0, [sp, #24]
   12af8:	str	r0, [sl]
   12afc:	mov	r0, r4
   12b00:	sub	sp, fp, #28
   12b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b0c:	add	fp, sp, #28
   12b10:	sub	sp, sp, #36	; 0x24
   12b14:	movw	r8, #24912	; 0x6150
   12b18:	cmp	r3, #0
   12b1c:	mov	r4, r2
   12b20:	str	r2, [sp, #24]
   12b24:	mov	r5, r1
   12b28:	mov	r6, r0
   12b2c:	str	r0, [sp, #20]
   12b30:	movt	r8, #2
   12b34:	movne	r8, r3
   12b38:	bl	10e90 <__errno_location@plt>
   12b3c:	str	r0, [sp, #28]
   12b40:	cmp	r4, #0
   12b44:	add	sl, r8, #8
   12b48:	ldm	r8, {r3, r9}
   12b4c:	ldr	r7, [r0]
   12b50:	ldr	r1, [r8, #40]	; 0x28
   12b54:	ldr	r2, [r8, #44]	; 0x2c
   12b58:	mov	r0, #0
   12b5c:	orreq	r9, r9, #1
   12b60:	str	r7, [sp, #32]
   12b64:	mov	r7, r5
   12b68:	stm	sp, {r3, r9, sl}
   12b6c:	str	r1, [sp, #12]
   12b70:	str	r2, [sp, #16]
   12b74:	mov	r1, #0
   12b78:	mov	r2, r6
   12b7c:	mov	r3, r5
   12b80:	bl	11a40 <__assert_fail@plt+0xb08>
   12b84:	add	r4, r0, #1
   12b88:	mov	r5, r0
   12b8c:	mov	r0, r4
   12b90:	bl	13c58 <__assert_fail@plt+0x2d20>
   12b94:	mov	r6, r0
   12b98:	ldr	r0, [r8]
   12b9c:	ldr	r2, [r8, #44]	; 0x2c
   12ba0:	ldr	r1, [r8, #40]	; 0x28
   12ba4:	mov	r3, r7
   12ba8:	stm	sp, {r0, r9, sl}
   12bac:	str	r2, [sp, #16]
   12bb0:	str	r1, [sp, #12]
   12bb4:	mov	r0, r6
   12bb8:	mov	r1, r4
   12bbc:	ldr	r2, [sp, #20]
   12bc0:	bl	11a40 <__assert_fail@plt+0xb08>
   12bc4:	ldr	r0, [sp, #24]
   12bc8:	ldr	r1, [sp, #32]
   12bcc:	ldr	r2, [sp, #28]
   12bd0:	cmp	r0, #0
   12bd4:	str	r1, [r2]
   12bd8:	strne	r5, [r0]
   12bdc:	mov	r0, r6
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bec:	add	fp, sp, #24
   12bf0:	movw	r5, #24804	; 0x60e4
   12bf4:	movw	r8, #24800	; 0x60e0
   12bf8:	movt	r5, #2
   12bfc:	movt	r8, #2
   12c00:	ldr	r0, [r5]
   12c04:	ldr	r4, [r8]
   12c08:	cmp	r0, #2
   12c0c:	blt	12c38 <__assert_fail@plt+0x1d00>
   12c10:	add	r7, r4, #12
   12c14:	mov	r6, #0
   12c18:	ldr	r0, [r7, r6, lsl #3]
   12c1c:	bl	14f18 <__assert_fail@plt+0x3fe0>
   12c20:	ldr	r1, [r5]
   12c24:	add	r2, r6, #2
   12c28:	add	r0, r6, #1
   12c2c:	mov	r6, r0
   12c30:	cmp	r2, r1
   12c34:	blt	12c18 <__assert_fail@plt+0x1ce0>
   12c38:	ldr	r0, [r4, #4]
   12c3c:	movw	r7, #24960	; 0x6180
   12c40:	movt	r7, #2
   12c44:	cmp	r0, r7
   12c48:	beq	12c60 <__assert_fail@plt+0x1d28>
   12c4c:	bl	14f18 <__assert_fail@plt+0x3fe0>
   12c50:	movw	r0, #24808	; 0x60e8
   12c54:	mov	r6, #256	; 0x100
   12c58:	movt	r0, #2
   12c5c:	strd	r6, [r0]
   12c60:	movw	r6, #24808	; 0x60e8
   12c64:	movt	r6, #2
   12c68:	cmp	r4, r6
   12c6c:	beq	12c7c <__assert_fail@plt+0x1d44>
   12c70:	mov	r0, r4
   12c74:	bl	14f18 <__assert_fail@plt+0x3fe0>
   12c78:	str	r6, [r8]
   12c7c:	mov	r0, #1
   12c80:	str	r0, [r5]
   12c84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c88:	movw	r3, #24912	; 0x6150
   12c8c:	mvn	r2, #0
   12c90:	movt	r3, #2
   12c94:	b	12c98 <__assert_fail@plt+0x1d60>
   12c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c9c:	add	fp, sp, #28
   12ca0:	sub	sp, sp, #44	; 0x2c
   12ca4:	mov	r7, r3
   12ca8:	str	r2, [sp, #36]	; 0x24
   12cac:	str	r1, [sp, #32]
   12cb0:	mov	r5, r0
   12cb4:	bl	10e90 <__errno_location@plt>
   12cb8:	cmp	r5, #0
   12cbc:	blt	12e28 <__assert_fail@plt+0x1ef0>
   12cc0:	cmn	r5, #-2147483647	; 0x80000001
   12cc4:	beq	12e28 <__assert_fail@plt+0x1ef0>
   12cc8:	movw	r8, #24804	; 0x60e4
   12ccc:	movw	r4, #24800	; 0x60e0
   12cd0:	str	r0, [sp, #28]
   12cd4:	ldr	r0, [r0]
   12cd8:	movt	r8, #2
   12cdc:	movt	r4, #2
   12ce0:	ldr	r1, [r8]
   12ce4:	ldr	r6, [r4]
   12ce8:	str	r0, [sp, #24]
   12cec:	cmp	r1, r5
   12cf0:	ble	12cfc <__assert_fail@plt+0x1dc4>
   12cf4:	mov	sl, r6
   12cf8:	b	12d64 <__assert_fail@plt+0x1e2c>
   12cfc:	movw	r9, #24808	; 0x60e8
   12d00:	mov	r0, #8
   12d04:	add	r2, r5, #1
   12d08:	str	r1, [fp, #-32]	; 0xffffffe0
   12d0c:	mvn	r3, #-2147483648	; 0x80000000
   12d10:	movt	r9, #2
   12d14:	str	r0, [sp]
   12d18:	sub	r2, r2, r1
   12d1c:	sub	r1, fp, #32
   12d20:	subs	r0, r6, r9
   12d24:	movne	r0, r6
   12d28:	bl	13e58 <__assert_fail@plt+0x2f20>
   12d2c:	cmp	r6, r9
   12d30:	mov	sl, r0
   12d34:	str	r0, [r4]
   12d38:	ldrdeq	r0, [r9]
   12d3c:	stmeq	sl, {r0, r1}
   12d40:	ldr	r1, [r8]
   12d44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d48:	add	r0, sl, r1, lsl #3
   12d4c:	sub	r1, r2, r1
   12d50:	lsl	r2, r1, #3
   12d54:	mov	r1, #0
   12d58:	bl	10ea8 <memset@plt>
   12d5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d60:	str	r0, [r8]
   12d64:	mov	r9, sl
   12d68:	ldr	r6, [r9, r5, lsl #3]!
   12d6c:	ldr	r4, [r9, #4]!
   12d70:	ldm	r7, {r0, r1}
   12d74:	ldr	r2, [r7, #40]	; 0x28
   12d78:	ldr	r3, [r7, #44]	; 0x2c
   12d7c:	orr	r8, r1, #1
   12d80:	add	r1, r7, #8
   12d84:	stm	sp, {r0, r8}
   12d88:	add	r0, sp, #8
   12d8c:	str	r1, [sp, #20]
   12d90:	stm	r0, {r1, r2, r3}
   12d94:	mov	r0, r4
   12d98:	mov	r1, r6
   12d9c:	ldr	r2, [sp, #32]
   12da0:	ldr	r3, [sp, #36]	; 0x24
   12da4:	bl	11a40 <__assert_fail@plt+0xb08>
   12da8:	cmp	r6, r0
   12dac:	bhi	12e10 <__assert_fail@plt+0x1ed8>
   12db0:	add	r6, r0, #1
   12db4:	movw	r0, #24960	; 0x6180
   12db8:	movt	r0, #2
   12dbc:	str	r6, [sl, r5, lsl #3]
   12dc0:	cmp	r4, r0
   12dc4:	beq	12dd0 <__assert_fail@plt+0x1e98>
   12dc8:	mov	r0, r4
   12dcc:	bl	14f18 <__assert_fail@plt+0x3fe0>
   12dd0:	mov	r0, r6
   12dd4:	bl	13c58 <__assert_fail@plt+0x2d20>
   12dd8:	str	r0, [r9]
   12ddc:	mov	r4, r0
   12de0:	add	r3, sp, #8
   12de4:	ldr	r0, [r7]
   12de8:	ldr	r1, [r7, #40]	; 0x28
   12dec:	ldr	r2, [r7, #44]	; 0x2c
   12df0:	stm	sp, {r0, r8}
   12df4:	ldr	r0, [sp, #20]
   12df8:	stm	r3, {r0, r1, r2}
   12dfc:	mov	r0, r4
   12e00:	mov	r1, r6
   12e04:	ldr	r2, [sp, #32]
   12e08:	ldr	r3, [sp, #36]	; 0x24
   12e0c:	bl	11a40 <__assert_fail@plt+0xb08>
   12e10:	ldr	r0, [sp, #28]
   12e14:	ldr	r1, [sp, #24]
   12e18:	str	r1, [r0]
   12e1c:	mov	r0, r4
   12e20:	sub	sp, fp, #28
   12e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e28:	bl	10f2c <abort@plt>
   12e2c:	movw	r3, #24912	; 0x6150
   12e30:	movt	r3, #2
   12e34:	b	12c98 <__assert_fail@plt+0x1d60>
   12e38:	movw	r3, #24912	; 0x6150
   12e3c:	mov	r1, r0
   12e40:	mov	r0, #0
   12e44:	mvn	r2, #0
   12e48:	movt	r3, #2
   12e4c:	b	12c98 <__assert_fail@plt+0x1d60>
   12e50:	movw	r3, #24912	; 0x6150
   12e54:	mov	r2, r1
   12e58:	mov	r1, r0
   12e5c:	mov	r0, #0
   12e60:	movt	r3, #2
   12e64:	b	12c98 <__assert_fail@plt+0x1d60>
   12e68:	push	{fp, lr}
   12e6c:	mov	fp, sp
   12e70:	sub	sp, sp, #48	; 0x30
   12e74:	vmov.i32	q8, #0	; 0x00000000
   12e78:	mov	ip, #32
   12e7c:	mov	r3, sp
   12e80:	mov	lr, r2
   12e84:	cmp	r1, #10
   12e88:	add	r2, r3, #16
   12e8c:	vst1.64	{d16-d17}, [r3], ip
   12e90:	vst1.64	{d16-d17}, [r3]
   12e94:	vst1.64	{d16-d17}, [r2]
   12e98:	beq	12eb8 <__assert_fail@plt+0x1f80>
   12e9c:	str	r1, [sp]
   12ea0:	mov	r3, sp
   12ea4:	mov	r1, lr
   12ea8:	mvn	r2, #0
   12eac:	bl	12c98 <__assert_fail@plt+0x1d60>
   12eb0:	mov	sp, fp
   12eb4:	pop	{fp, pc}
   12eb8:	bl	10f2c <abort@plt>
   12ebc:	push	{r4, sl, fp, lr}
   12ec0:	add	fp, sp, #8
   12ec4:	sub	sp, sp, #48	; 0x30
   12ec8:	mov	ip, r3
   12ecc:	mov	r3, sp
   12ed0:	vmov.i32	q8, #0	; 0x00000000
   12ed4:	mov	lr, #32
   12ed8:	cmp	r1, #10
   12edc:	add	r4, r3, #16
   12ee0:	vst1.64	{d16-d17}, [r3], lr
   12ee4:	vst1.64	{d16-d17}, [r3]
   12ee8:	vst1.64	{d16-d17}, [r4]
   12eec:	beq	12f0c <__assert_fail@plt+0x1fd4>
   12ef0:	str	r1, [sp]
   12ef4:	mov	r1, r2
   12ef8:	mov	r3, sp
   12efc:	mov	r2, ip
   12f00:	bl	12c98 <__assert_fail@plt+0x1d60>
   12f04:	sub	sp, fp, #8
   12f08:	pop	{r4, sl, fp, pc}
   12f0c:	bl	10f2c <abort@plt>
   12f10:	push	{fp, lr}
   12f14:	mov	fp, sp
   12f18:	sub	sp, sp, #48	; 0x30
   12f1c:	mov	r3, sp
   12f20:	vmov.i32	q8, #0	; 0x00000000
   12f24:	mov	ip, #32
   12f28:	cmp	r0, #10
   12f2c:	add	r2, r3, #16
   12f30:	vst1.64	{d16-d17}, [r3], ip
   12f34:	vst1.64	{d16-d17}, [r3]
   12f38:	vst1.64	{d16-d17}, [r2]
   12f3c:	beq	12f5c <__assert_fail@plt+0x2024>
   12f40:	str	r0, [sp]
   12f44:	mov	r3, sp
   12f48:	mov	r0, #0
   12f4c:	mvn	r2, #0
   12f50:	bl	12c98 <__assert_fail@plt+0x1d60>
   12f54:	mov	sp, fp
   12f58:	pop	{fp, pc}
   12f5c:	bl	10f2c <abort@plt>
   12f60:	push	{fp, lr}
   12f64:	mov	fp, sp
   12f68:	sub	sp, sp, #48	; 0x30
   12f6c:	mov	r3, sp
   12f70:	vmov.i32	q8, #0	; 0x00000000
   12f74:	mov	ip, #32
   12f78:	cmp	r0, #10
   12f7c:	add	lr, r3, #16
   12f80:	vst1.64	{d16-d17}, [r3], ip
   12f84:	vst1.64	{d16-d17}, [r3]
   12f88:	vst1.64	{d16-d17}, [lr]
   12f8c:	beq	12fa8 <__assert_fail@plt+0x2070>
   12f90:	str	r0, [sp]
   12f94:	mov	r3, sp
   12f98:	mov	r0, #0
   12f9c:	bl	12c98 <__assert_fail@plt+0x1d60>
   12fa0:	mov	sp, fp
   12fa4:	pop	{fp, pc}
   12fa8:	bl	10f2c <abort@plt>
   12fac:	push	{r4, sl, fp, lr}
   12fb0:	add	fp, sp, #8
   12fb4:	sub	sp, sp, #48	; 0x30
   12fb8:	mov	lr, r0
   12fbc:	movw	r0, #24912	; 0x6150
   12fc0:	mov	r3, #32
   12fc4:	mov	ip, r1
   12fc8:	mov	r4, #1
   12fcc:	movt	r0, #2
   12fd0:	add	r1, r0, #16
   12fd4:	vld1.64	{d16-d17}, [r0], r3
   12fd8:	mov	r3, sp
   12fdc:	vld1.64	{d18-d19}, [r1]
   12fe0:	add	r1, r3, #16
   12fe4:	vld1.64	{d20-d21}, [r0]
   12fe8:	add	r0, r3, #32
   12fec:	vst1.64	{d18-d19}, [r1]
   12ff0:	mov	r1, r3
   12ff4:	vst1.64	{d20-d21}, [r0]
   12ff8:	mov	r0, #28
   12ffc:	and	r0, r0, r2, lsr #3
   13000:	and	r2, r2, #31
   13004:	vst1.64	{d16-d17}, [r1], r0
   13008:	ldr	r0, [r1, #8]
   1300c:	bic	r4, r4, r0, lsr r2
   13010:	eor	r0, r0, r4, lsl r2
   13014:	mov	r2, ip
   13018:	str	r0, [r1, #8]
   1301c:	mov	r0, #0
   13020:	mov	r1, lr
   13024:	bl	12c98 <__assert_fail@plt+0x1d60>
   13028:	sub	sp, fp, #8
   1302c:	pop	{r4, sl, fp, pc}
   13030:	push	{fp, lr}
   13034:	mov	fp, sp
   13038:	sub	sp, sp, #48	; 0x30
   1303c:	mov	ip, r0
   13040:	movw	r0, #24912	; 0x6150
   13044:	mov	r3, #32
   13048:	movt	r0, #2
   1304c:	add	r2, r0, #16
   13050:	vld1.64	{d16-d17}, [r0], r3
   13054:	mov	r3, sp
   13058:	vld1.64	{d18-d19}, [r2]
   1305c:	add	r2, r3, #16
   13060:	vld1.64	{d20-d21}, [r0]
   13064:	add	r0, r3, #32
   13068:	vst1.64	{d18-d19}, [r2]
   1306c:	mov	r2, r3
   13070:	vst1.64	{d20-d21}, [r0]
   13074:	mov	r0, #28
   13078:	and	r0, r0, r1, lsr #3
   1307c:	and	r1, r1, #31
   13080:	vst1.64	{d16-d17}, [r2], r0
   13084:	mov	r0, #1
   13088:	ldr	lr, [r2, #8]
   1308c:	bic	r0, r0, lr, lsr r1
   13090:	eor	r0, lr, r0, lsl r1
   13094:	mov	r1, ip
   13098:	str	r0, [r2, #8]
   1309c:	mov	r0, #0
   130a0:	mvn	r2, #0
   130a4:	bl	12c98 <__assert_fail@plt+0x1d60>
   130a8:	mov	sp, fp
   130ac:	pop	{fp, pc}
   130b0:	push	{fp, lr}
   130b4:	mov	fp, sp
   130b8:	sub	sp, sp, #48	; 0x30
   130bc:	movw	r2, #24912	; 0x6150
   130c0:	mov	r3, #32
   130c4:	mov	r1, r0
   130c8:	movt	r2, #2
   130cc:	add	r0, r2, #16
   130d0:	vld1.64	{d16-d17}, [r2], r3
   130d4:	mov	r3, sp
   130d8:	vld1.64	{d18-d19}, [r0]
   130dc:	add	r0, r3, #16
   130e0:	vld1.64	{d20-d21}, [r2]
   130e4:	mov	r2, r3
   130e8:	vst1.64	{d18-d19}, [r0]
   130ec:	add	r0, r3, #32
   130f0:	vst1.64	{d20-d21}, [r0]
   130f4:	mov	r0, #12
   130f8:	vst1.64	{d16-d17}, [r2], r0
   130fc:	ldr	r0, [r2]
   13100:	orr	r0, r0, #67108864	; 0x4000000
   13104:	str	r0, [r2]
   13108:	mov	r0, #0
   1310c:	mvn	r2, #0
   13110:	bl	12c98 <__assert_fail@plt+0x1d60>
   13114:	mov	sp, fp
   13118:	pop	{fp, pc}
   1311c:	push	{fp, lr}
   13120:	mov	fp, sp
   13124:	sub	sp, sp, #48	; 0x30
   13128:	mov	ip, r1
   1312c:	mov	r1, r0
   13130:	movw	r0, #24912	; 0x6150
   13134:	mov	r3, #32
   13138:	movt	r0, #2
   1313c:	add	r2, r0, #16
   13140:	vld1.64	{d16-d17}, [r0], r3
   13144:	mov	r3, sp
   13148:	vld1.64	{d18-d19}, [r2]
   1314c:	add	r2, r3, #16
   13150:	vld1.64	{d20-d21}, [r0]
   13154:	add	r0, r3, #32
   13158:	vst1.64	{d18-d19}, [r2]
   1315c:	mov	r2, r3
   13160:	vst1.64	{d20-d21}, [r0]
   13164:	mov	r0, #12
   13168:	vst1.64	{d16-d17}, [r2], r0
   1316c:	ldr	r0, [r2]
   13170:	orr	r0, r0, #67108864	; 0x4000000
   13174:	str	r0, [r2]
   13178:	mov	r0, #0
   1317c:	mov	r2, ip
   13180:	bl	12c98 <__assert_fail@plt+0x1d60>
   13184:	mov	sp, fp
   13188:	pop	{fp, pc}
   1318c:	push	{r4, sl, fp, lr}
   13190:	add	fp, sp, #8
   13194:	sub	sp, sp, #96	; 0x60
   13198:	mov	ip, r2
   1319c:	mov	r2, sp
   131a0:	vmov.i32	q8, #0	; 0x00000000
   131a4:	mov	r4, #28
   131a8:	cmp	r1, #10
   131ac:	mov	r3, r2
   131b0:	add	lr, r2, #16
   131b4:	vst1.64	{d16-d17}, [r3], r4
   131b8:	vst1.64	{d16-d17}, [lr]
   131bc:	vst1.32	{d16-d17}, [r3]
   131c0:	beq	13210 <__assert_fail@plt+0x22d8>
   131c4:	vld1.64	{d16-d17}, [r2], r4
   131c8:	vld1.64	{d18-d19}, [lr]
   131cc:	add	r3, sp, #48	; 0x30
   131d0:	add	r4, r3, #4
   131d4:	vld1.32	{d20-d21}, [r2]
   131d8:	add	r2, r3, #20
   131dc:	vst1.32	{d16-d17}, [r4]
   131e0:	vst1.32	{d18-d19}, [r2]
   131e4:	add	r2, r3, #32
   131e8:	vst1.32	{d20-d21}, [r2]
   131ec:	str	r1, [sp, #48]	; 0x30
   131f0:	mvn	r2, #0
   131f4:	ldr	r1, [sp, #60]	; 0x3c
   131f8:	orr	r1, r1, #67108864	; 0x4000000
   131fc:	str	r1, [sp, #60]	; 0x3c
   13200:	mov	r1, ip
   13204:	bl	12c98 <__assert_fail@plt+0x1d60>
   13208:	sub	sp, fp, #8
   1320c:	pop	{r4, sl, fp, pc}
   13210:	bl	10f2c <abort@plt>
   13214:	push	{r4, r5, fp, lr}
   13218:	add	fp, sp, #8
   1321c:	sub	sp, sp, #48	; 0x30
   13220:	mov	ip, r3
   13224:	movw	r3, #24912	; 0x6150
   13228:	mov	lr, #32
   1322c:	cmp	r1, #0
   13230:	mov	r5, sp
   13234:	movt	r3, #2
   13238:	cmpne	r2, #0
   1323c:	add	r4, r3, #16
   13240:	vld1.64	{d16-d17}, [r3], lr
   13244:	vld1.64	{d18-d19}, [r4]
   13248:	add	r4, r5, #16
   1324c:	vld1.64	{d20-d21}, [r3]
   13250:	vst1.64	{d16-d17}, [r5], lr
   13254:	mov	r3, #10
   13258:	vst1.64	{d18-d19}, [r4]
   1325c:	vst1.64	{d20-d21}, [r5]
   13260:	str	r3, [sp]
   13264:	bne	1326c <__assert_fail@plt+0x2334>
   13268:	bl	10f2c <abort@plt>
   1326c:	str	r2, [sp, #44]	; 0x2c
   13270:	str	r1, [sp, #40]	; 0x28
   13274:	mov	r3, sp
   13278:	mov	r1, ip
   1327c:	mvn	r2, #0
   13280:	bl	12c98 <__assert_fail@plt+0x1d60>
   13284:	sub	sp, fp, #8
   13288:	pop	{r4, r5, fp, pc}
   1328c:	push	{r4, r5, fp, lr}
   13290:	add	fp, sp, #8
   13294:	sub	sp, sp, #48	; 0x30
   13298:	mov	lr, r3
   1329c:	movw	r3, #24912	; 0x6150
   132a0:	mov	ip, #32
   132a4:	cmp	r1, #0
   132a8:	mov	r5, sp
   132ac:	movt	r3, #2
   132b0:	cmpne	r2, #0
   132b4:	add	r4, r3, #16
   132b8:	vld1.64	{d16-d17}, [r3], ip
   132bc:	vld1.64	{d18-d19}, [r4]
   132c0:	add	r4, r5, #16
   132c4:	vld1.64	{d20-d21}, [r3]
   132c8:	vst1.64	{d16-d17}, [r5], ip
   132cc:	mov	r3, #10
   132d0:	vst1.64	{d18-d19}, [r4]
   132d4:	vst1.64	{d20-d21}, [r5]
   132d8:	str	r3, [sp]
   132dc:	bne	132e4 <__assert_fail@plt+0x23ac>
   132e0:	bl	10f2c <abort@plt>
   132e4:	ldr	ip, [fp, #8]
   132e8:	str	r2, [sp, #44]	; 0x2c
   132ec:	str	r1, [sp, #40]	; 0x28
   132f0:	mov	r3, sp
   132f4:	mov	r1, lr
   132f8:	mov	r2, ip
   132fc:	bl	12c98 <__assert_fail@plt+0x1d60>
   13300:	sub	sp, fp, #8
   13304:	pop	{r4, r5, fp, pc}
   13308:	push	{r4, sl, fp, lr}
   1330c:	add	fp, sp, #8
   13310:	sub	sp, sp, #48	; 0x30
   13314:	mov	ip, r2
   13318:	movw	r2, #24912	; 0x6150
   1331c:	mov	lr, #32
   13320:	cmp	r0, #0
   13324:	mov	r4, sp
   13328:	movt	r2, #2
   1332c:	cmpne	r1, #0
   13330:	add	r3, r2, #16
   13334:	vld1.64	{d16-d17}, [r2], lr
   13338:	vld1.64	{d18-d19}, [r3]
   1333c:	add	r3, r4, #16
   13340:	vld1.64	{d20-d21}, [r2]
   13344:	vst1.64	{d16-d17}, [r4], lr
   13348:	mov	r2, #10
   1334c:	vst1.64	{d18-d19}, [r3]
   13350:	vst1.64	{d20-d21}, [r4]
   13354:	str	r2, [sp]
   13358:	bne	13360 <__assert_fail@plt+0x2428>
   1335c:	bl	10f2c <abort@plt>
   13360:	str	r1, [sp, #44]	; 0x2c
   13364:	str	r0, [sp, #40]	; 0x28
   13368:	mov	r3, sp
   1336c:	mov	r0, #0
   13370:	mov	r1, ip
   13374:	mvn	r2, #0
   13378:	bl	12c98 <__assert_fail@plt+0x1d60>
   1337c:	sub	sp, fp, #8
   13380:	pop	{r4, sl, fp, pc}
   13384:	push	{r4, r5, fp, lr}
   13388:	add	fp, sp, #8
   1338c:	sub	sp, sp, #48	; 0x30
   13390:	mov	lr, r2
   13394:	movw	r2, #24912	; 0x6150
   13398:	mov	ip, r3
   1339c:	mov	r3, #32
   133a0:	cmp	r0, #0
   133a4:	mov	r5, sp
   133a8:	movt	r2, #2
   133ac:	cmpne	r1, #0
   133b0:	add	r4, r2, #16
   133b4:	vld1.64	{d16-d17}, [r2], r3
   133b8:	vld1.64	{d18-d19}, [r4]
   133bc:	add	r4, r5, #16
   133c0:	vld1.64	{d20-d21}, [r2]
   133c4:	vst1.64	{d16-d17}, [r5], r3
   133c8:	mov	r2, #10
   133cc:	vst1.64	{d18-d19}, [r4]
   133d0:	vst1.64	{d20-d21}, [r5]
   133d4:	str	r2, [sp]
   133d8:	bne	133e0 <__assert_fail@plt+0x24a8>
   133dc:	bl	10f2c <abort@plt>
   133e0:	str	r1, [sp, #44]	; 0x2c
   133e4:	str	r0, [sp, #40]	; 0x28
   133e8:	mov	r3, sp
   133ec:	mov	r0, #0
   133f0:	mov	r1, lr
   133f4:	mov	r2, ip
   133f8:	bl	12c98 <__assert_fail@plt+0x1d60>
   133fc:	sub	sp, fp, #8
   13400:	pop	{r4, r5, fp, pc}
   13404:	movw	r3, #24816	; 0x60f0
   13408:	movt	r3, #2
   1340c:	b	12c98 <__assert_fail@plt+0x1d60>
   13410:	movw	r3, #24816	; 0x60f0
   13414:	mov	r2, r1
   13418:	mov	r1, r0
   1341c:	mov	r0, #0
   13420:	movt	r3, #2
   13424:	b	12c98 <__assert_fail@plt+0x1d60>
   13428:	movw	r3, #24816	; 0x60f0
   1342c:	mvn	r2, #0
   13430:	movt	r3, #2
   13434:	b	12c98 <__assert_fail@plt+0x1d60>
   13438:	movw	r3, #24816	; 0x60f0
   1343c:	mov	r1, r0
   13440:	mov	r0, #0
   13444:	mvn	r2, #0
   13448:	movt	r3, #2
   1344c:	b	12c98 <__assert_fail@plt+0x1d60>
   13450:	push	{r4, r5, fp, lr}
   13454:	add	fp, sp, #8
   13458:	mov	r5, r0
   1345c:	mov	r4, r1
   13460:	mov	r0, #0
   13464:	mov	r2, #5
   13468:	mov	r1, r5
   1346c:	bl	10d94 <dcgettext@plt>
   13470:	cmp	r0, r5
   13474:	popne	{r4, r5, fp, pc}
   13478:	bl	14fe4 <__assert_fail@plt+0x40ac>
   1347c:	ldrb	r1, [r0]
   13480:	and	r1, r1, #223	; 0xdf
   13484:	cmp	r1, #71	; 0x47
   13488:	beq	134f0 <__assert_fail@plt+0x25b8>
   1348c:	cmp	r1, #85	; 0x55
   13490:	bne	13514 <__assert_fail@plt+0x25dc>
   13494:	ldrb	r1, [r0, #1]
   13498:	and	r1, r1, #223	; 0xdf
   1349c:	cmp	r1, #84	; 0x54
   134a0:	bne	13514 <__assert_fail@plt+0x25dc>
   134a4:	ldrb	r1, [r0, #2]
   134a8:	and	r1, r1, #223	; 0xdf
   134ac:	cmp	r1, #70	; 0x46
   134b0:	ldrbeq	r1, [r0, #3]
   134b4:	cmpeq	r1, #45	; 0x2d
   134b8:	bne	13514 <__assert_fail@plt+0x25dc>
   134bc:	ldrb	r1, [r0, #4]
   134c0:	cmp	r1, #56	; 0x38
   134c4:	ldrbeq	r0, [r0, #5]
   134c8:	cmpeq	r0, #0
   134cc:	bne	13514 <__assert_fail@plt+0x25dc>
   134d0:	ldrb	r1, [r5]
   134d4:	movw	r2, #22600	; 0x5848
   134d8:	movw	r0, #22604	; 0x584c
   134dc:	movt	r2, #1
   134e0:	movt	r0, #1
   134e4:	cmp	r1, #96	; 0x60
   134e8:	moveq	r0, r2
   134ec:	pop	{r4, r5, fp, pc}
   134f0:	ldrb	r1, [r0, #1]
   134f4:	and	r1, r1, #223	; 0xdf
   134f8:	cmp	r1, #66	; 0x42
   134fc:	bne	13514 <__assert_fail@plt+0x25dc>
   13500:	ldrb	r1, [r0, #2]
   13504:	cmp	r1, #49	; 0x31
   13508:	ldrbeq	r1, [r0, #3]
   1350c:	cmpeq	r1, #56	; 0x38
   13510:	beq	13530 <__assert_fail@plt+0x25f8>
   13514:	movw	r1, #22594	; 0x5842
   13518:	movw	r0, #22598	; 0x5846
   1351c:	cmp	r4, #9
   13520:	movt	r1, #1
   13524:	movt	r0, #1
   13528:	moveq	r0, r1
   1352c:	pop	{r4, r5, fp, pc}
   13530:	ldrb	r1, [r0, #4]
   13534:	cmp	r1, #48	; 0x30
   13538:	ldrbeq	r1, [r0, #5]
   1353c:	cmpeq	r1, #51	; 0x33
   13540:	bne	13514 <__assert_fail@plt+0x25dc>
   13544:	ldrb	r1, [r0, #6]
   13548:	cmp	r1, #48	; 0x30
   1354c:	ldrbeq	r0, [r0, #7]
   13550:	cmpeq	r0, #0
   13554:	bne	13514 <__assert_fail@plt+0x25dc>
   13558:	ldrb	r1, [r5]
   1355c:	movw	r2, #22608	; 0x5850
   13560:	movw	r0, #22612	; 0x5854
   13564:	movt	r2, #1
   13568:	movt	r0, #1
   1356c:	b	134e4 <__assert_fail@plt+0x25ac>
   13570:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13574:	add	fp, sp, #24
   13578:	sub	sp, sp, #32
   1357c:	ldr	r6, [fp, #12]
   13580:	ldr	r7, [fp, #8]
   13584:	mov	r4, r2
   13588:	mov	r8, r0
   1358c:	cmp	r1, #0
   13590:	beq	135b8 <__assert_fail@plt+0x2680>
   13594:	movw	r2, #22700	; 0x58ac
   13598:	mov	r5, r1
   1359c:	str	r3, [sp, #4]
   135a0:	str	r4, [sp]
   135a4:	mov	r0, r8
   135a8:	mov	r1, #1
   135ac:	movt	r2, #1
   135b0:	mov	r3, r5
   135b4:	b	135d0 <__assert_fail@plt+0x2698>
   135b8:	movw	r2, #22712	; 0x58b8
   135bc:	str	r3, [sp]
   135c0:	mov	r0, r8
   135c4:	mov	r1, #1
   135c8:	mov	r3, r4
   135cc:	movt	r2, #1
   135d0:	bl	10ecc <__fprintf_chk@plt>
   135d4:	movw	r1, #22719	; 0x58bf
   135d8:	mov	r0, #0
   135dc:	mov	r2, #5
   135e0:	movt	r1, #1
   135e4:	bl	10d94 <dcgettext@plt>
   135e8:	movw	r2, #23437	; 0x5b8d
   135ec:	mov	r3, r0
   135f0:	movw	r0, #2022	; 0x7e6
   135f4:	mov	r1, #1
   135f8:	str	r0, [sp]
   135fc:	movt	r2, #1
   13600:	mov	r0, r8
   13604:	bl	10ecc <__fprintf_chk@plt>
   13608:	movw	r4, #22281	; 0x5709
   1360c:	mov	r1, r8
   13610:	movt	r4, #1
   13614:	mov	r0, r4
   13618:	bl	10d1c <fputs_unlocked@plt>
   1361c:	movw	r1, #22723	; 0x58c3
   13620:	mov	r0, #0
   13624:	mov	r2, #5
   13628:	movt	r1, #1
   1362c:	bl	10d94 <dcgettext@plt>
   13630:	movw	r3, #22894	; 0x596e
   13634:	mov	r2, r0
   13638:	mov	r0, r8
   1363c:	mov	r1, #1
   13640:	movt	r3, #1
   13644:	bl	10ecc <__fprintf_chk@plt>
   13648:	mov	r0, r4
   1364c:	mov	r1, r8
   13650:	bl	10d1c <fputs_unlocked@plt>
   13654:	cmp	r6, #9
   13658:	bhi	13694 <__assert_fail@plt+0x275c>
   1365c:	add	r0, pc, #0
   13660:	ldr	pc, [r0, r6, lsl #2]
   13664:	andeq	r3, r1, ip, lsl #13
   13668:	andeq	r3, r1, r0, lsr #13
   1366c:	ldrdeq	r3, [r1], -r0
   13670:	strdeq	r3, [r1], -r8
   13674:	andeq	r3, r1, r0, lsr #14
   13678:	andeq	r3, r1, r8, asr #14
   1367c:	andeq	r3, r1, r0, ror r7
   13680:	andeq	r3, r1, r8, lsr #15
   13684:	andeq	r3, r1, r8, asr #16
   13688:	strdeq	r3, [r1], -r0
   1368c:	sub	sp, fp, #24
   13690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13694:	movw	r1, #23247	; 0x5acf
   13698:	movt	r1, #1
   1369c:	b	137f8 <__assert_fail@plt+0x28c0>
   136a0:	movw	r1, #22928	; 0x5990
   136a4:	mov	r0, #0
   136a8:	mov	r2, #5
   136ac:	movt	r1, #1
   136b0:	bl	10d94 <dcgettext@plt>
   136b4:	ldr	r3, [r7]
   136b8:	mov	r2, r0
   136bc:	mov	r0, r8
   136c0:	mov	r1, #1
   136c4:	sub	sp, fp, #24
   136c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136cc:	b	10ecc <__fprintf_chk@plt>
   136d0:	movw	r1, #22944	; 0x59a0
   136d4:	mov	r0, #0
   136d8:	mov	r2, #5
   136dc:	movt	r1, #1
   136e0:	bl	10d94 <dcgettext@plt>
   136e4:	mov	r2, r0
   136e8:	ldr	r3, [r7]
   136ec:	ldr	r0, [r7, #4]
   136f0:	str	r0, [sp]
   136f4:	b	137e4 <__assert_fail@plt+0x28ac>
   136f8:	movw	r1, #22967	; 0x59b7
   136fc:	mov	r0, #0
   13700:	mov	r2, #5
   13704:	movt	r1, #1
   13708:	bl	10d94 <dcgettext@plt>
   1370c:	ldr	r3, [r7]
   13710:	mov	r2, r0
   13714:	ldmib	r7, {r0, r1}
   13718:	stm	sp, {r0, r1}
   1371c:	b	137e4 <__assert_fail@plt+0x28ac>
   13720:	movw	r1, #22995	; 0x59d3
   13724:	mov	r0, #0
   13728:	mov	r2, #5
   1372c:	movt	r1, #1
   13730:	bl	10d94 <dcgettext@plt>
   13734:	ldr	r3, [r7]
   13738:	mov	r2, r0
   1373c:	ldmib	r7, {r0, r1, r7}
   13740:	stm	sp, {r0, r1, r7}
   13744:	b	137e4 <__assert_fail@plt+0x28ac>
   13748:	movw	r1, #23027	; 0x59f3
   1374c:	mov	r0, #0
   13750:	mov	r2, #5
   13754:	movt	r1, #1
   13758:	bl	10d94 <dcgettext@plt>
   1375c:	ldr	r3, [r7]
   13760:	mov	r2, r0
   13764:	ldmib	r7, {r0, r1, r6, r7}
   13768:	stm	sp, {r0, r1, r6, r7}
   1376c:	b	137e4 <__assert_fail@plt+0x28ac>
   13770:	movw	r1, #23063	; 0x5a17
   13774:	mov	r0, #0
   13778:	mov	r2, #5
   1377c:	movt	r1, #1
   13780:	bl	10d94 <dcgettext@plt>
   13784:	ldr	r3, [r7]
   13788:	mov	r2, r0
   1378c:	ldmib	r7, {r0, r1, r6}
   13790:	ldr	r5, [r7, #16]
   13794:	ldr	r7, [r7, #20]
   13798:	stm	sp, {r0, r1, r6}
   1379c:	str	r5, [sp, #12]
   137a0:	str	r7, [sp, #16]
   137a4:	b	137e4 <__assert_fail@plt+0x28ac>
   137a8:	movw	r1, #23103	; 0x5a3f
   137ac:	mov	r0, #0
   137b0:	mov	r2, #5
   137b4:	movt	r1, #1
   137b8:	bl	10d94 <dcgettext@plt>
   137bc:	ldr	r3, [r7]
   137c0:	mov	r2, r0
   137c4:	ldmib	r7, {r0, r1, r6}
   137c8:	ldr	r5, [r7, #16]
   137cc:	ldr	r4, [r7, #20]
   137d0:	ldr	r7, [r7, #24]
   137d4:	stm	sp, {r0, r1, r6}
   137d8:	str	r5, [sp, #12]
   137dc:	str	r4, [sp, #16]
   137e0:	str	r7, [sp, #20]
   137e4:	mov	r0, r8
   137e8:	mov	r1, #1
   137ec:	b	13898 <__assert_fail@plt+0x2960>
   137f0:	movw	r1, #23195	; 0x5a9b
   137f4:	movt	r1, #1
   137f8:	mov	r0, #0
   137fc:	mov	r2, #5
   13800:	bl	10d94 <dcgettext@plt>
   13804:	mov	ip, r0
   13808:	ldr	r3, [r7]
   1380c:	ldr	r0, [r7, #4]
   13810:	ldr	r1, [r7, #8]
   13814:	ldr	r6, [r7, #12]
   13818:	ldr	r5, [r7, #16]
   1381c:	ldr	r4, [r7, #20]
   13820:	ldr	r2, [r7, #24]
   13824:	ldr	lr, [r7, #28]
   13828:	ldr	r7, [r7, #32]
   1382c:	stm	sp, {r0, r1, r6}
   13830:	str	r5, [sp, #12]
   13834:	str	r4, [sp, #16]
   13838:	str	r2, [sp, #20]
   1383c:	str	lr, [sp, #24]
   13840:	str	r7, [sp, #28]
   13844:	b	1388c <__assert_fail@plt+0x2954>
   13848:	movw	r1, #23147	; 0x5a6b
   1384c:	mov	r0, #0
   13850:	mov	r2, #5
   13854:	movt	r1, #1
   13858:	bl	10d94 <dcgettext@plt>
   1385c:	mov	ip, r0
   13860:	ldr	r3, [r7]
   13864:	ldmib	r7, {r0, r1, r6}
   13868:	ldr	r5, [r7, #16]
   1386c:	ldr	r4, [r7, #20]
   13870:	ldr	r2, [r7, #24]
   13874:	ldr	r7, [r7, #28]
   13878:	stm	sp, {r0, r1, r6}
   1387c:	str	r5, [sp, #12]
   13880:	str	r4, [sp, #16]
   13884:	str	r2, [sp, #20]
   13888:	str	r7, [sp, #24]
   1388c:	mov	r0, r8
   13890:	mov	r1, #1
   13894:	mov	r2, ip
   13898:	bl	10ecc <__fprintf_chk@plt>
   1389c:	sub	sp, fp, #24
   138a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138a4:	push	{r4, sl, fp, lr}
   138a8:	add	fp, sp, #8
   138ac:	sub	sp, sp, #8
   138b0:	ldr	ip, [fp, #8]
   138b4:	mov	lr, #0
   138b8:	ldr	r4, [ip, lr, lsl #2]
   138bc:	add	lr, lr, #1
   138c0:	cmp	r4, #0
   138c4:	bne	138b8 <__assert_fail@plt+0x2980>
   138c8:	sub	r4, lr, #1
   138cc:	str	ip, [sp]
   138d0:	str	r4, [sp, #4]
   138d4:	bl	13570 <__assert_fail@plt+0x2638>
   138d8:	sub	sp, fp, #8
   138dc:	pop	{r4, sl, fp, pc}
   138e0:	push	{fp, lr}
   138e4:	mov	fp, sp
   138e8:	sub	sp, sp, #48	; 0x30
   138ec:	ldr	ip, [fp, #8]
   138f0:	ldr	lr, [ip]
   138f4:	cmp	lr, #0
   138f8:	str	lr, [sp, #8]
   138fc:	beq	13998 <__assert_fail@plt+0x2a60>
   13900:	ldr	lr, [ip, #4]
   13904:	cmp	lr, #0
   13908:	str	lr, [sp, #12]
   1390c:	beq	139a0 <__assert_fail@plt+0x2a68>
   13910:	ldr	lr, [ip, #8]
   13914:	cmp	lr, #0
   13918:	str	lr, [sp, #16]
   1391c:	beq	139a8 <__assert_fail@plt+0x2a70>
   13920:	ldr	lr, [ip, #12]
   13924:	cmp	lr, #0
   13928:	str	lr, [sp, #20]
   1392c:	beq	139b0 <__assert_fail@plt+0x2a78>
   13930:	ldr	lr, [ip, #16]
   13934:	cmp	lr, #0
   13938:	str	lr, [sp, #24]
   1393c:	beq	139b8 <__assert_fail@plt+0x2a80>
   13940:	ldr	lr, [ip, #20]
   13944:	cmp	lr, #0
   13948:	str	lr, [sp, #28]
   1394c:	beq	139c0 <__assert_fail@plt+0x2a88>
   13950:	ldr	lr, [ip, #24]
   13954:	cmp	lr, #0
   13958:	str	lr, [sp, #32]
   1395c:	beq	139c8 <__assert_fail@plt+0x2a90>
   13960:	ldr	lr, [ip, #28]
   13964:	cmp	lr, #0
   13968:	str	lr, [sp, #36]	; 0x24
   1396c:	beq	139d0 <__assert_fail@plt+0x2a98>
   13970:	ldr	lr, [ip, #32]
   13974:	cmp	lr, #0
   13978:	str	lr, [sp, #40]	; 0x28
   1397c:	beq	139d8 <__assert_fail@plt+0x2aa0>
   13980:	ldr	lr, [ip, #36]	; 0x24
   13984:	mov	ip, #10
   13988:	cmp	lr, #0
   1398c:	str	lr, [sp, #44]	; 0x2c
   13990:	movweq	ip, #9
   13994:	b	139dc <__assert_fail@plt+0x2aa4>
   13998:	mov	ip, #0
   1399c:	b	139dc <__assert_fail@plt+0x2aa4>
   139a0:	mov	ip, #1
   139a4:	b	139dc <__assert_fail@plt+0x2aa4>
   139a8:	mov	ip, #2
   139ac:	b	139dc <__assert_fail@plt+0x2aa4>
   139b0:	mov	ip, #3
   139b4:	b	139dc <__assert_fail@plt+0x2aa4>
   139b8:	mov	ip, #4
   139bc:	b	139dc <__assert_fail@plt+0x2aa4>
   139c0:	mov	ip, #5
   139c4:	b	139dc <__assert_fail@plt+0x2aa4>
   139c8:	mov	ip, #6
   139cc:	b	139dc <__assert_fail@plt+0x2aa4>
   139d0:	mov	ip, #7
   139d4:	b	139dc <__assert_fail@plt+0x2aa4>
   139d8:	mov	ip, #8
   139dc:	add	lr, sp, #8
   139e0:	str	ip, [sp, #4]
   139e4:	str	lr, [sp]
   139e8:	bl	13570 <__assert_fail@plt+0x2638>
   139ec:	mov	sp, fp
   139f0:	pop	{fp, pc}
   139f4:	push	{fp, lr}
   139f8:	mov	fp, sp
   139fc:	sub	sp, sp, #56	; 0x38
   13a00:	add	ip, fp, #8
   13a04:	str	ip, [sp, #12]
   13a08:	ldr	lr, [fp, #8]
   13a0c:	cmp	lr, #0
   13a10:	str	lr, [sp, #16]
   13a14:	beq	13ab0 <__assert_fail@plt+0x2b78>
   13a18:	ldr	lr, [ip, #4]
   13a1c:	cmp	lr, #0
   13a20:	str	lr, [sp, #20]
   13a24:	beq	13ab8 <__assert_fail@plt+0x2b80>
   13a28:	ldr	lr, [ip, #8]
   13a2c:	cmp	lr, #0
   13a30:	str	lr, [sp, #24]
   13a34:	beq	13ac0 <__assert_fail@plt+0x2b88>
   13a38:	ldr	lr, [ip, #12]
   13a3c:	cmp	lr, #0
   13a40:	str	lr, [sp, #28]
   13a44:	beq	13ac8 <__assert_fail@plt+0x2b90>
   13a48:	ldr	lr, [ip, #16]
   13a4c:	cmp	lr, #0
   13a50:	str	lr, [sp, #32]
   13a54:	beq	13ad0 <__assert_fail@plt+0x2b98>
   13a58:	ldr	lr, [ip, #20]
   13a5c:	cmp	lr, #0
   13a60:	str	lr, [sp, #36]	; 0x24
   13a64:	beq	13ad8 <__assert_fail@plt+0x2ba0>
   13a68:	ldr	lr, [ip, #24]
   13a6c:	cmp	lr, #0
   13a70:	str	lr, [sp, #40]	; 0x28
   13a74:	beq	13ae0 <__assert_fail@plt+0x2ba8>
   13a78:	ldr	lr, [ip, #28]
   13a7c:	cmp	lr, #0
   13a80:	str	lr, [sp, #44]	; 0x2c
   13a84:	beq	13ae8 <__assert_fail@plt+0x2bb0>
   13a88:	ldr	lr, [ip, #32]
   13a8c:	cmp	lr, #0
   13a90:	str	lr, [sp, #48]	; 0x30
   13a94:	beq	13af0 <__assert_fail@plt+0x2bb8>
   13a98:	ldr	lr, [ip, #36]	; 0x24
   13a9c:	mov	ip, #10
   13aa0:	cmp	lr, #0
   13aa4:	str	lr, [sp, #52]	; 0x34
   13aa8:	movweq	ip, #9
   13aac:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ab0:	mov	ip, #0
   13ab4:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ab8:	mov	ip, #1
   13abc:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ac0:	mov	ip, #2
   13ac4:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ac8:	mov	ip, #3
   13acc:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ad0:	mov	ip, #4
   13ad4:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ad8:	mov	ip, #5
   13adc:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ae0:	mov	ip, #6
   13ae4:	b	13af4 <__assert_fail@plt+0x2bbc>
   13ae8:	mov	ip, #7
   13aec:	b	13af4 <__assert_fail@plt+0x2bbc>
   13af0:	mov	ip, #8
   13af4:	add	lr, sp, #16
   13af8:	str	ip, [sp, #4]
   13afc:	str	lr, [sp]
   13b00:	bl	13570 <__assert_fail@plt+0x2638>
   13b04:	mov	sp, fp
   13b08:	pop	{fp, pc}
   13b0c:	push	{fp, lr}
   13b10:	mov	fp, sp
   13b14:	movw	r0, #24884	; 0x6134
   13b18:	movt	r0, #2
   13b1c:	ldr	r1, [r0]
   13b20:	movw	r0, #22281	; 0x5709
   13b24:	movt	r0, #1
   13b28:	bl	10d1c <fputs_unlocked@plt>
   13b2c:	movw	r1, #23307	; 0x5b0b
   13b30:	mov	r0, #0
   13b34:	mov	r2, #5
   13b38:	movt	r1, #1
   13b3c:	bl	10d94 <dcgettext@plt>
   13b40:	movw	r2, #23327	; 0x5b1f
   13b44:	mov	r1, r0
   13b48:	mov	r0, #1
   13b4c:	movt	r2, #1
   13b50:	bl	10eb4 <__printf_chk@plt>
   13b54:	movw	r1, #23349	; 0x5b35
   13b58:	mov	r0, #0
   13b5c:	mov	r2, #5
   13b60:	movt	r1, #1
   13b64:	bl	10d94 <dcgettext@plt>
   13b68:	movw	r2, #21758	; 0x54fe
   13b6c:	movw	r3, #22090	; 0x564a
   13b70:	mov	r1, r0
   13b74:	mov	r0, #1
   13b78:	movt	r2, #1
   13b7c:	movt	r3, #1
   13b80:	bl	10eb4 <__printf_chk@plt>
   13b84:	movw	r1, #23369	; 0x5b49
   13b88:	mov	r0, #0
   13b8c:	mov	r2, #5
   13b90:	movt	r1, #1
   13b94:	bl	10d94 <dcgettext@plt>
   13b98:	movw	r2, #23408	; 0x5b70
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #1
   13ba4:	movt	r2, #1
   13ba8:	pop	{fp, lr}
   13bac:	b	10eb4 <__printf_chk@plt>
   13bb0:	push	{r4, r5, r6, sl, fp, lr}
   13bb4:	add	fp, sp, #16
   13bb8:	mov	r4, r2
   13bbc:	mov	r5, r1
   13bc0:	mov	r6, r0
   13bc4:	bl	1507c <__assert_fail@plt+0x4144>
   13bc8:	cmp	r0, #0
   13bcc:	popne	{r4, r5, r6, sl, fp, pc}
   13bd0:	cmp	r6, #0
   13bd4:	beq	13be8 <__assert_fail@plt+0x2cb0>
   13bd8:	cmp	r5, #0
   13bdc:	cmpne	r4, #0
   13be0:	bne	13be8 <__assert_fail@plt+0x2cb0>
   13be4:	pop	{r4, r5, r6, sl, fp, pc}
   13be8:	bl	14188 <__assert_fail@plt+0x3250>
   13bec:	push	{r4, r5, r6, sl, fp, lr}
   13bf0:	add	fp, sp, #16
   13bf4:	mov	r4, r2
   13bf8:	mov	r5, r1
   13bfc:	mov	r6, r0
   13c00:	bl	1507c <__assert_fail@plt+0x4144>
   13c04:	cmp	r0, #0
   13c08:	popne	{r4, r5, r6, sl, fp, pc}
   13c0c:	cmp	r6, #0
   13c10:	beq	13c24 <__assert_fail@plt+0x2cec>
   13c14:	cmp	r5, #0
   13c18:	cmpne	r4, #0
   13c1c:	bne	13c24 <__assert_fail@plt+0x2cec>
   13c20:	pop	{r4, r5, r6, sl, fp, pc}
   13c24:	bl	14188 <__assert_fail@plt+0x3250>
   13c28:	push	{fp, lr}
   13c2c:	mov	fp, sp
   13c30:	bl	14d18 <__assert_fail@plt+0x3de0>
   13c34:	cmp	r0, #0
   13c38:	popne	{fp, pc}
   13c3c:	bl	14188 <__assert_fail@plt+0x3250>
   13c40:	push	{fp, lr}
   13c44:	mov	fp, sp
   13c48:	bl	14d18 <__assert_fail@plt+0x3de0>
   13c4c:	cmp	r0, #0
   13c50:	popne	{fp, pc}
   13c54:	bl	14188 <__assert_fail@plt+0x3250>
   13c58:	push	{fp, lr}
   13c5c:	mov	fp, sp
   13c60:	bl	14d18 <__assert_fail@plt+0x3de0>
   13c64:	cmp	r0, #0
   13c68:	popne	{fp, pc}
   13c6c:	bl	14188 <__assert_fail@plt+0x3250>
   13c70:	push	{r4, r5, fp, lr}
   13c74:	add	fp, sp, #8
   13c78:	mov	r4, r1
   13c7c:	mov	r5, r0
   13c80:	bl	14d48 <__assert_fail@plt+0x3e10>
   13c84:	cmp	r0, #0
   13c88:	popne	{r4, r5, fp, pc}
   13c8c:	cmp	r5, #0
   13c90:	beq	13ca0 <__assert_fail@plt+0x2d68>
   13c94:	cmp	r4, #0
   13c98:	bne	13ca0 <__assert_fail@plt+0x2d68>
   13c9c:	pop	{r4, r5, fp, pc}
   13ca0:	bl	14188 <__assert_fail@plt+0x3250>
   13ca4:	push	{fp, lr}
   13ca8:	mov	fp, sp
   13cac:	cmp	r1, #0
   13cb0:	orreq	r1, r1, #1
   13cb4:	bl	14d48 <__assert_fail@plt+0x3e10>
   13cb8:	cmp	r0, #0
   13cbc:	popne	{fp, pc}
   13cc0:	bl	14188 <__assert_fail@plt+0x3250>
   13cc4:	push	{fp, lr}
   13cc8:	mov	fp, sp
   13ccc:	clz	r3, r2
   13cd0:	lsr	ip, r3, #5
   13cd4:	clz	r3, r1
   13cd8:	lsr	r3, r3, #5
   13cdc:	orrs	r3, r3, ip
   13ce0:	movwne	r1, #1
   13ce4:	movwne	r2, #1
   13ce8:	bl	1507c <__assert_fail@plt+0x4144>
   13cec:	cmp	r0, #0
   13cf0:	popne	{fp, pc}
   13cf4:	bl	14188 <__assert_fail@plt+0x3250>
   13cf8:	push	{fp, lr}
   13cfc:	mov	fp, sp
   13d00:	mov	r2, r1
   13d04:	mov	r1, r0
   13d08:	mov	r0, #0
   13d0c:	bl	1507c <__assert_fail@plt+0x4144>
   13d10:	cmp	r0, #0
   13d14:	popne	{fp, pc}
   13d18:	bl	14188 <__assert_fail@plt+0x3250>
   13d1c:	push	{fp, lr}
   13d20:	mov	fp, sp
   13d24:	mov	r2, r1
   13d28:	mov	r1, r0
   13d2c:	clz	r0, r2
   13d30:	clz	r3, r1
   13d34:	lsr	r0, r0, #5
   13d38:	lsr	r3, r3, #5
   13d3c:	orrs	r0, r3, r0
   13d40:	movwne	r1, #1
   13d44:	movwne	r2, #1
   13d48:	mov	r0, #0
   13d4c:	bl	1507c <__assert_fail@plt+0x4144>
   13d50:	cmp	r0, #0
   13d54:	popne	{fp, pc}
   13d58:	bl	14188 <__assert_fail@plt+0x3250>
   13d5c:	push	{r4, r5, r6, sl, fp, lr}
   13d60:	add	fp, sp, #16
   13d64:	ldr	r5, [r1]
   13d68:	mov	r4, r1
   13d6c:	mov	r6, r0
   13d70:	cmp	r0, #0
   13d74:	beq	13d8c <__assert_fail@plt+0x2e54>
   13d78:	mov	r0, #1
   13d7c:	add	r0, r0, r5, lsr #1
   13d80:	adds	r5, r5, r0
   13d84:	bcc	13d94 <__assert_fail@plt+0x2e5c>
   13d88:	b	13dd0 <__assert_fail@plt+0x2e98>
   13d8c:	cmp	r5, #0
   13d90:	movweq	r5, #64	; 0x40
   13d94:	mov	r0, r6
   13d98:	mov	r1, r5
   13d9c:	mov	r2, #1
   13da0:	bl	1507c <__assert_fail@plt+0x4144>
   13da4:	cmp	r5, #0
   13da8:	mov	r1, r5
   13dac:	movwne	r1, #1
   13db0:	cmp	r0, #0
   13db4:	bne	13dc8 <__assert_fail@plt+0x2e90>
   13db8:	clz	r2, r6
   13dbc:	lsr	r2, r2, #5
   13dc0:	orrs	r1, r2, r1
   13dc4:	bne	13dd0 <__assert_fail@plt+0x2e98>
   13dc8:	str	r5, [r4]
   13dcc:	pop	{r4, r5, r6, sl, fp, pc}
   13dd0:	bl	14188 <__assert_fail@plt+0x3250>
   13dd4:	push	{r4, r5, r6, r7, fp, lr}
   13dd8:	add	fp, sp, #16
   13ddc:	ldr	r5, [r1]
   13de0:	mov	r6, r2
   13de4:	mov	r4, r1
   13de8:	mov	r7, r0
   13dec:	cmp	r0, #0
   13df0:	beq	13e08 <__assert_fail@plt+0x2ed0>
   13df4:	mov	r0, #1
   13df8:	add	r0, r0, r5, lsr #1
   13dfc:	adds	r5, r5, r0
   13e00:	bcc	13e20 <__assert_fail@plt+0x2ee8>
   13e04:	b	13e54 <__assert_fail@plt+0x2f1c>
   13e08:	cmp	r5, #0
   13e0c:	bne	13e20 <__assert_fail@plt+0x2ee8>
   13e10:	mov	r0, #64	; 0x40
   13e14:	cmp	r6, #64	; 0x40
   13e18:	udiv	r5, r0, r6
   13e1c:	addhi	r5, r5, #1
   13e20:	mov	r0, r7
   13e24:	mov	r1, r5
   13e28:	mov	r2, r6
   13e2c:	bl	1507c <__assert_fail@plt+0x4144>
   13e30:	cmp	r0, #0
   13e34:	bne	13e4c <__assert_fail@plt+0x2f14>
   13e38:	cmp	r7, #0
   13e3c:	beq	13e54 <__assert_fail@plt+0x2f1c>
   13e40:	cmp	r6, #0
   13e44:	cmpne	r5, #0
   13e48:	bne	13e54 <__assert_fail@plt+0x2f1c>
   13e4c:	str	r5, [r4]
   13e50:	pop	{r4, r5, r6, r7, fp, pc}
   13e54:	bl	14188 <__assert_fail@plt+0x3250>
   13e58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e5c:	add	fp, sp, #24
   13e60:	mov	r8, r1
   13e64:	ldr	r1, [r1]
   13e68:	mov	r5, r0
   13e6c:	add	r0, r1, r1, asr #1
   13e70:	cmp	r0, r1
   13e74:	mvnvs	r0, #-2147483648	; 0x80000000
   13e78:	cmp	r0, r3
   13e7c:	mov	r7, r0
   13e80:	movgt	r7, r3
   13e84:	cmn	r3, #1
   13e88:	movle	r7, r0
   13e8c:	ldr	r0, [fp, #8]
   13e90:	cmn	r0, #1
   13e94:	ble	13ebc <__assert_fail@plt+0x2f84>
   13e98:	cmp	r0, #0
   13e9c:	beq	13f10 <__assert_fail@plt+0x2fd8>
   13ea0:	cmn	r7, #1
   13ea4:	ble	13ee4 <__assert_fail@plt+0x2fac>
   13ea8:	mvn	r4, #-2147483648	; 0x80000000
   13eac:	udiv	r6, r4, r0
   13eb0:	cmp	r6, r7
   13eb4:	bge	13f10 <__assert_fail@plt+0x2fd8>
   13eb8:	b	13f20 <__assert_fail@plt+0x2fe8>
   13ebc:	cmn	r7, #1
   13ec0:	ble	13f00 <__assert_fail@plt+0x2fc8>
   13ec4:	cmn	r0, #1
   13ec8:	beq	13f10 <__assert_fail@plt+0x2fd8>
   13ecc:	mov	r6, #-2147483648	; 0x80000000
   13ed0:	mvn	r4, #-2147483648	; 0x80000000
   13ed4:	sdiv	r6, r6, r0
   13ed8:	cmp	r6, r7
   13edc:	bge	13f10 <__assert_fail@plt+0x2fd8>
   13ee0:	b	13f20 <__assert_fail@plt+0x2fe8>
   13ee4:	beq	13f10 <__assert_fail@plt+0x2fd8>
   13ee8:	mov	r6, #-2147483648	; 0x80000000
   13eec:	mvn	r4, #-2147483648	; 0x80000000
   13ef0:	sdiv	r6, r6, r7
   13ef4:	cmp	r6, r0
   13ef8:	bge	13f10 <__assert_fail@plt+0x2fd8>
   13efc:	b	13f20 <__assert_fail@plt+0x2fe8>
   13f00:	mvn	r4, #-2147483648	; 0x80000000
   13f04:	sdiv	r6, r4, r0
   13f08:	cmp	r7, r6
   13f0c:	blt	13f20 <__assert_fail@plt+0x2fe8>
   13f10:	mul	r6, r7, r0
   13f14:	mov	r4, #64	; 0x40
   13f18:	cmp	r6, #63	; 0x3f
   13f1c:	bgt	13f28 <__assert_fail@plt+0x2ff0>
   13f20:	sdiv	r7, r4, r0
   13f24:	mul	r6, r7, r0
   13f28:	cmp	r5, #0
   13f2c:	moveq	r4, #0
   13f30:	streq	r4, [r8]
   13f34:	sub	r4, r7, r1
   13f38:	cmp	r4, r2
   13f3c:	bge	13fe8 <__assert_fail@plt+0x30b0>
   13f40:	add	r7, r1, r2
   13f44:	mov	r6, #0
   13f48:	mov	r2, #0
   13f4c:	cmp	r7, r3
   13f50:	movwgt	r6, #1
   13f54:	cmn	r3, #1
   13f58:	movwgt	r2, #1
   13f5c:	cmp	r7, r1
   13f60:	bvs	1401c <__assert_fail@plt+0x30e4>
   13f64:	ands	r1, r2, r6
   13f68:	bne	1401c <__assert_fail@plt+0x30e4>
   13f6c:	cmn	r0, #1
   13f70:	ble	13f98 <__assert_fail@plt+0x3060>
   13f74:	cmp	r0, #0
   13f78:	beq	13fe4 <__assert_fail@plt+0x30ac>
   13f7c:	cmn	r7, #1
   13f80:	ble	13fbc <__assert_fail@plt+0x3084>
   13f84:	mvn	r1, #-2147483648	; 0x80000000
   13f88:	udiv	r1, r1, r0
   13f8c:	cmp	r1, r7
   13f90:	bge	13fe4 <__assert_fail@plt+0x30ac>
   13f94:	b	1401c <__assert_fail@plt+0x30e4>
   13f98:	cmn	r7, #1
   13f9c:	ble	13fd4 <__assert_fail@plt+0x309c>
   13fa0:	cmn	r0, #1
   13fa4:	beq	13fe4 <__assert_fail@plt+0x30ac>
   13fa8:	mov	r1, #-2147483648	; 0x80000000
   13fac:	sdiv	r1, r1, r0
   13fb0:	cmp	r1, r7
   13fb4:	bge	13fe4 <__assert_fail@plt+0x30ac>
   13fb8:	b	1401c <__assert_fail@plt+0x30e4>
   13fbc:	beq	13fe4 <__assert_fail@plt+0x30ac>
   13fc0:	mov	r1, #-2147483648	; 0x80000000
   13fc4:	sdiv	r1, r1, r7
   13fc8:	cmp	r1, r0
   13fcc:	bge	13fe4 <__assert_fail@plt+0x30ac>
   13fd0:	b	1401c <__assert_fail@plt+0x30e4>
   13fd4:	mvn	r1, #-2147483648	; 0x80000000
   13fd8:	sdiv	r1, r1, r0
   13fdc:	cmp	r7, r1
   13fe0:	blt	1401c <__assert_fail@plt+0x30e4>
   13fe4:	mul	r6, r7, r0
   13fe8:	mov	r0, r5
   13fec:	mov	r1, r6
   13ff0:	bl	14d48 <__assert_fail@plt+0x3e10>
   13ff4:	cmp	r6, #0
   13ff8:	movwne	r6, #1
   13ffc:	cmp	r0, #0
   14000:	bne	14014 <__assert_fail@plt+0x30dc>
   14004:	clz	r1, r5
   14008:	lsr	r1, r1, #5
   1400c:	orrs	r1, r1, r6
   14010:	bne	1401c <__assert_fail@plt+0x30e4>
   14014:	str	r7, [r8]
   14018:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1401c:	bl	14188 <__assert_fail@plt+0x3250>
   14020:	push	{fp, lr}
   14024:	mov	fp, sp
   14028:	mov	r1, #1
   1402c:	bl	14cc4 <__assert_fail@plt+0x3d8c>
   14030:	cmp	r0, #0
   14034:	popne	{fp, pc}
   14038:	bl	14188 <__assert_fail@plt+0x3250>
   1403c:	push	{fp, lr}
   14040:	mov	fp, sp
   14044:	bl	14cc4 <__assert_fail@plt+0x3d8c>
   14048:	cmp	r0, #0
   1404c:	popne	{fp, pc}
   14050:	bl	14188 <__assert_fail@plt+0x3250>
   14054:	push	{fp, lr}
   14058:	mov	fp, sp
   1405c:	mov	r1, #1
   14060:	bl	14cc4 <__assert_fail@plt+0x3d8c>
   14064:	cmp	r0, #0
   14068:	popne	{fp, pc}
   1406c:	bl	14188 <__assert_fail@plt+0x3250>
   14070:	push	{fp, lr}
   14074:	mov	fp, sp
   14078:	bl	14cc4 <__assert_fail@plt+0x3d8c>
   1407c:	cmp	r0, #0
   14080:	popne	{fp, pc}
   14084:	bl	14188 <__assert_fail@plt+0x3250>
   14088:	push	{r4, r5, r6, sl, fp, lr}
   1408c:	add	fp, sp, #16
   14090:	mov	r5, r0
   14094:	mov	r0, r1
   14098:	mov	r4, r1
   1409c:	bl	14d18 <__assert_fail@plt+0x3de0>
   140a0:	cmp	r0, #0
   140a4:	beq	140c0 <__assert_fail@plt+0x3188>
   140a8:	mov	r1, r5
   140ac:	mov	r2, r4
   140b0:	mov	r6, r0
   140b4:	bl	10d64 <memcpy@plt>
   140b8:	mov	r0, r6
   140bc:	pop	{r4, r5, r6, sl, fp, pc}
   140c0:	bl	14188 <__assert_fail@plt+0x3250>
   140c4:	push	{r4, r5, r6, sl, fp, lr}
   140c8:	add	fp, sp, #16
   140cc:	mov	r5, r0
   140d0:	mov	r0, r1
   140d4:	mov	r4, r1
   140d8:	bl	14d18 <__assert_fail@plt+0x3de0>
   140dc:	cmp	r0, #0
   140e0:	beq	140fc <__assert_fail@plt+0x31c4>
   140e4:	mov	r1, r5
   140e8:	mov	r2, r4
   140ec:	mov	r6, r0
   140f0:	bl	10d64 <memcpy@plt>
   140f4:	mov	r0, r6
   140f8:	pop	{r4, r5, r6, sl, fp, pc}
   140fc:	bl	14188 <__assert_fail@plt+0x3250>
   14100:	push	{r4, r5, r6, sl, fp, lr}
   14104:	add	fp, sp, #16
   14108:	mov	r5, r0
   1410c:	add	r0, r1, #1
   14110:	mov	r4, r1
   14114:	bl	14d18 <__assert_fail@plt+0x3de0>
   14118:	cmp	r0, #0
   1411c:	beq	14144 <__assert_fail@plt+0x320c>
   14120:	mov	r6, r0
   14124:	mov	r0, #0
   14128:	mov	r1, r5
   1412c:	mov	r2, r4
   14130:	strb	r0, [r6, r4]
   14134:	mov	r0, r6
   14138:	bl	10d64 <memcpy@plt>
   1413c:	mov	r0, r6
   14140:	pop	{r4, r5, r6, sl, fp, pc}
   14144:	bl	14188 <__assert_fail@plt+0x3250>
   14148:	push	{r4, r5, r6, sl, fp, lr}
   1414c:	add	fp, sp, #16
   14150:	mov	r4, r0
   14154:	bl	10e78 <strlen@plt>
   14158:	add	r5, r0, #1
   1415c:	mov	r0, r5
   14160:	bl	14d18 <__assert_fail@plt+0x3de0>
   14164:	cmp	r0, #0
   14168:	beq	14184 <__assert_fail@plt+0x324c>
   1416c:	mov	r1, r4
   14170:	mov	r2, r5
   14174:	mov	r6, r0
   14178:	bl	10d64 <memcpy@plt>
   1417c:	mov	r0, r6
   14180:	pop	{r4, r5, r6, sl, fp, pc}
   14184:	bl	14188 <__assert_fail@plt+0x3250>
   14188:	push	{fp, lr}
   1418c:	mov	fp, sp
   14190:	movw	r0, #24796	; 0x60dc
   14194:	movw	r1, #23484	; 0x5bbc
   14198:	mov	r2, #5
   1419c:	movt	r0, #2
   141a0:	movt	r1, #1
   141a4:	ldr	r4, [r0]
   141a8:	mov	r0, #0
   141ac:	bl	10d94 <dcgettext@plt>
   141b0:	movw	r2, #22447	; 0x57af
   141b4:	mov	r3, r0
   141b8:	mov	r0, r4
   141bc:	mov	r1, #0
   141c0:	movt	r2, #1
   141c4:	bl	10e0c <error@plt>
   141c8:	bl	10f2c <abort@plt>
   141cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d0:	add	fp, sp, #28
   141d4:	sub	sp, sp, #12
   141d8:	cmp	r2, #37	; 0x25
   141dc:	bcs	14ca4 <__assert_fail@plt+0x3d6c>
   141e0:	ldr	r8, [fp, #8]
   141e4:	mov	r9, r3
   141e8:	mov	r7, r2
   141ec:	mov	r4, r1
   141f0:	mov	r5, r0
   141f4:	bl	10e90 <__errno_location@plt>
   141f8:	add	sl, sp, #8
   141fc:	cmp	r4, #0
   14200:	mov	r6, r0
   14204:	mov	r0, #0
   14208:	mov	r2, r7
   1420c:	movne	sl, r4
   14210:	str	r0, [r6]
   14214:	mov	r0, r5
   14218:	mov	r1, sl
   1421c:	bl	10d34 <strtol@plt>
   14220:	ldr	r4, [sl]
   14224:	str	r9, [sp, #4]
   14228:	cmp	r4, r5
   1422c:	beq	1425c <__assert_fail@plt+0x3324>
   14230:	mov	r7, r0
   14234:	ldr	r0, [r6]
   14238:	cmp	r0, #0
   1423c:	beq	1428c <__assert_fail@plt+0x3354>
   14240:	mov	r9, #4
   14244:	cmp	r0, #34	; 0x22
   14248:	bne	14c80 <__assert_fail@plt+0x3d48>
   1424c:	mov	r9, #1
   14250:	cmp	r8, #0
   14254:	bne	14298 <__assert_fail@plt+0x3360>
   14258:	b	14c78 <__assert_fail@plt+0x3d40>
   1425c:	cmp	r8, #0
   14260:	mov	r9, #4
   14264:	ldrbne	r1, [r5]
   14268:	cmpne	r1, #0
   1426c:	beq	14c80 <__assert_fail@plt+0x3d48>
   14270:	mov	r0, r8
   14274:	bl	10e84 <strchr@plt>
   14278:	cmp	r0, #0
   1427c:	beq	14c80 <__assert_fail@plt+0x3d48>
   14280:	mov	r7, #1
   14284:	mov	r9, #0
   14288:	b	14298 <__assert_fail@plt+0x3360>
   1428c:	mov	r9, r0
   14290:	cmp	r8, #0
   14294:	beq	14c78 <__assert_fail@plt+0x3d40>
   14298:	ldrb	r5, [r4]
   1429c:	cmp	r5, #0
   142a0:	beq	14c78 <__assert_fail@plt+0x3d40>
   142a4:	mov	r0, r8
   142a8:	mov	r1, r5
   142ac:	bl	10e84 <strchr@plt>
   142b0:	cmp	r0, #0
   142b4:	beq	144f4 <__assert_fail@plt+0x35bc>
   142b8:	sub	r0, r5, #69	; 0x45
   142bc:	mov	ip, #1
   142c0:	mov	r6, #1024	; 0x400
   142c4:	cmp	r0, #47	; 0x2f
   142c8:	bhi	143e4 <__assert_fail@plt+0x34ac>
   142cc:	add	r1, pc, #0
   142d0:	ldr	pc, [r1, r0, lsl #2]
   142d4:	muleq	r1, r4, r3
   142d8:	andeq	r4, r1, r4, ror #7
   142dc:	muleq	r1, r4, r3
   142e0:	andeq	r4, r1, r4, ror #7
   142e4:	andeq	r4, r1, r4, ror #7
   142e8:	andeq	r4, r1, r4, ror #7
   142ec:	muleq	r1, r4, r3
   142f0:	andeq	r4, r1, r4, ror #7
   142f4:	muleq	r1, r4, r3
   142f8:	andeq	r4, r1, r4, ror #7
   142fc:	andeq	r4, r1, r4, ror #7
   14300:	muleq	r1, r4, r3
   14304:	andeq	r4, r1, r4, ror #7
   14308:	andeq	r4, r1, r4, ror #7
   1430c:	andeq	r4, r1, r4, ror #7
   14310:	muleq	r1, r4, r3
   14314:	andeq	r4, r1, r4, ror #7
   14318:	andeq	r4, r1, r4, ror #7
   1431c:	andeq	r4, r1, r4, ror #7
   14320:	andeq	r4, r1, r4, ror #7
   14324:	muleq	r1, r4, r3
   14328:	muleq	r1, r4, r3
   1432c:	andeq	r4, r1, r4, ror #7
   14330:	andeq	r4, r1, r4, ror #7
   14334:	andeq	r4, r1, r4, ror #7
   14338:	andeq	r4, r1, r4, ror #7
   1433c:	andeq	r4, r1, r4, ror #7
   14340:	andeq	r4, r1, r4, ror #7
   14344:	andeq	r4, r1, r4, ror #7
   14348:	andeq	r4, r1, r4, ror #7
   1434c:	andeq	r4, r1, r4, ror #7
   14350:	andeq	r4, r1, r4, ror #7
   14354:	andeq	r4, r1, r4, ror #7
   14358:	andeq	r4, r1, r4, ror #7
   1435c:	muleq	r1, r4, r3
   14360:	andeq	r4, r1, r4, ror #7
   14364:	andeq	r4, r1, r4, ror #7
   14368:	andeq	r4, r1, r4, ror #7
   1436c:	muleq	r1, r4, r3
   14370:	andeq	r4, r1, r4, ror #7
   14374:	muleq	r1, r4, r3
   14378:	andeq	r4, r1, r4, ror #7
   1437c:	andeq	r4, r1, r4, ror #7
   14380:	andeq	r4, r1, r4, ror #7
   14384:	andeq	r4, r1, r4, ror #7
   14388:	andeq	r4, r1, r4, ror #7
   1438c:	andeq	r4, r1, r4, ror #7
   14390:	muleq	r1, r4, r3
   14394:	mov	r0, r8
   14398:	mov	r1, #48	; 0x30
   1439c:	bl	10e84 <strchr@plt>
   143a0:	cmp	r0, #0
   143a4:	beq	143e0 <__assert_fail@plt+0x34a8>
   143a8:	ldrb	r0, [r4, #1]
   143ac:	cmp	r0, #66	; 0x42
   143b0:	cmpne	r0, #68	; 0x44
   143b4:	bne	143c4 <__assert_fail@plt+0x348c>
   143b8:	mov	ip, #2
   143bc:	mov	r6, #1000	; 0x3e8
   143c0:	b	143e4 <__assert_fail@plt+0x34ac>
   143c4:	cmp	r0, #105	; 0x69
   143c8:	bne	143e0 <__assert_fail@plt+0x34a8>
   143cc:	ldrb	r0, [r4, #2]
   143d0:	mov	ip, #1
   143d4:	cmp	r0, #66	; 0x42
   143d8:	movweq	ip, #3
   143dc:	b	143e4 <__assert_fail@plt+0x34ac>
   143e0:	mov	ip, #1
   143e4:	sub	r1, r5, #66	; 0x42
   143e8:	cmp	r1, #53	; 0x35
   143ec:	bhi	144f4 <__assert_fail@plt+0x35bc>
   143f0:	add	r2, pc, #4
   143f4:	mov	r0, #0
   143f8:	ldr	pc, [r2, r1, lsl #2]
   143fc:	andeq	r4, r1, ip, ror r5
   14400:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14404:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14408:	muleq	r1, r0, r5
   1440c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14410:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14414:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14418:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1441c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14420:	andeq	r4, r1, r0, lsl #10
   14424:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14428:	andeq	r4, r1, ip, lsl r5
   1442c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14430:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14434:			; <UNDEFINED> instruction: 0x000145b0
   14438:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1443c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14440:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14444:	andeq	r4, r1, ip, lsr r5
   14448:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1444c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14450:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14454:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14458:	ldrdeq	r4, [r1], -r0
   1445c:	andeq	r4, r1, ip, asr r5
   14460:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14464:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14468:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1446c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14470:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14474:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14478:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1447c:	strdeq	r4, [r1], -r0
   14480:	andeq	r4, r1, r0, ror #24
   14484:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14488:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1448c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14490:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14494:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14498:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1449c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144a0:	andeq	r4, r1, r0, lsl #10
   144a4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144a8:	andeq	r4, r1, ip, lsl r5
   144ac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144c0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144c4:	andeq	r4, r1, ip, lsr r5
   144c8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144d0:	andeq	r4, r1, r0, lsl r6
   144d4:	cmn	r7, #1
   144d8:	ble	14624 <__assert_fail@plt+0x36ec>
   144dc:	mvn	r2, #-2147483648	; 0x80000000
   144e0:	mov	r3, #1
   144e4:	udiv	r0, r2, r6
   144e8:	cmp	r0, r7
   144ec:	bge	1463c <__assert_fail@plt+0x3704>
   144f0:	b	146fc <__assert_fail@plt+0x37c4>
   144f4:	ldr	r0, [sp, #4]
   144f8:	orr	r9, r9, #2
   144fc:	b	14c7c <__assert_fail@plt+0x3d44>
   14500:	cmn	r7, #1
   14504:	ble	14650 <__assert_fail@plt+0x3718>
   14508:	mvn	r1, #-2147483648	; 0x80000000
   1450c:	udiv	r1, r1, r6
   14510:	cmp	r1, r7
   14514:	bge	14664 <__assert_fail@plt+0x372c>
   14518:	b	148cc <__assert_fail@plt+0x3994>
   1451c:	cmn	r7, #1
   14520:	ble	1466c <__assert_fail@plt+0x3734>
   14524:	mvn	r1, #-2147483648	; 0x80000000
   14528:	mov	r0, #1
   1452c:	udiv	r2, r1, r6
   14530:	cmp	r2, r7
   14534:	bge	14684 <__assert_fail@plt+0x374c>
   14538:	b	14738 <__assert_fail@plt+0x3800>
   1453c:	cmn	r7, #1
   14540:	ble	14698 <__assert_fail@plt+0x3760>
   14544:	mvn	r0, #-2147483648	; 0x80000000
   14548:	mov	r1, #1
   1454c:	udiv	r2, r0, r6
   14550:	cmp	r2, r7
   14554:	bge	146b0 <__assert_fail@plt+0x3778>
   14558:	b	146c0 <__assert_fail@plt+0x3788>
   1455c:	cmp	r7, #0
   14560:	blt	14770 <__assert_fail@plt+0x3838>
   14564:	mvn	r0, #-2147483648	; 0x80000000
   14568:	mov	r3, #1
   1456c:	udiv	r1, r0, r6
   14570:	cmp	r1, r7
   14574:	bge	1478c <__assert_fail@plt+0x3854>
   14578:	b	1479c <__assert_fail@plt+0x3864>
   1457c:	cmn	r7, #1
   14580:	ble	147b4 <__assert_fail@plt+0x387c>
   14584:	cmp	r7, #2097152	; 0x200000
   14588:	blt	147c8 <__assert_fail@plt+0x3890>
   1458c:	b	148cc <__assert_fail@plt+0x3994>
   14590:	cmp	r7, #0
   14594:	blt	147d0 <__assert_fail@plt+0x3898>
   14598:	mvn	r0, #-2147483648	; 0x80000000
   1459c:	mov	r3, #1
   145a0:	udiv	r1, r0, r6
   145a4:	cmp	r1, r7
   145a8:	bge	147ec <__assert_fail@plt+0x38b4>
   145ac:	b	147fc <__assert_fail@plt+0x38c4>
   145b0:	cmp	r7, #0
   145b4:	blt	14814 <__assert_fail@plt+0x38dc>
   145b8:	mvn	r0, #-2147483648	; 0x80000000
   145bc:	mov	r3, #1
   145c0:	udiv	r1, r0, r6
   145c4:	cmp	r1, r7
   145c8:	bge	14830 <__assert_fail@plt+0x38f8>
   145cc:	b	14840 <__assert_fail@plt+0x3908>
   145d0:	cmp	r7, #0
   145d4:	blt	14858 <__assert_fail@plt+0x3920>
   145d8:	mvn	r0, #-2147483648	; 0x80000000
   145dc:	mov	r3, #1
   145e0:	udiv	r1, r0, r6
   145e4:	cmp	r1, r7
   145e8:	bge	14874 <__assert_fail@plt+0x393c>
   145ec:	b	14884 <__assert_fail@plt+0x394c>
   145f0:	cmn	r7, #1
   145f4:	ble	1489c <__assert_fail@plt+0x3964>
   145f8:	movw	r1, #65535	; 0xffff
   145fc:	movt	r1, #31
   14600:	add	r1, r1, #2097152	; 0x200000
   14604:	cmp	r7, r1
   14608:	ble	148b0 <__assert_fail@plt+0x3978>
   1460c:	b	148cc <__assert_fail@plt+0x3994>
   14610:	cmn	r7, #1
   14614:	ble	148b8 <__assert_fail@plt+0x3980>
   14618:	cmp	r7, #1073741824	; 0x40000000
   1461c:	bge	148cc <__assert_fail@plt+0x3994>
   14620:	b	148e4 <__assert_fail@plt+0x39ac>
   14624:	beq	1463c <__assert_fail@plt+0x3704>
   14628:	mov	r2, #-2147483648	; 0x80000000
   1462c:	mov	r3, #1
   14630:	sdiv	r0, r2, r7
   14634:	cmp	r0, r6
   14638:	blt	14714 <__assert_fail@plt+0x37dc>
   1463c:	mul	r2, r7, r6
   14640:	mov	r3, #0
   14644:	cmp	r2, #0
   14648:	bge	146fc <__assert_fail@plt+0x37c4>
   1464c:	b	14714 <__assert_fail@plt+0x37dc>
   14650:	beq	14664 <__assert_fail@plt+0x372c>
   14654:	mov	r1, #-2147483648	; 0x80000000
   14658:	sdiv	r1, r1, r7
   1465c:	cmp	r1, r6
   14660:	blt	148cc <__assert_fail@plt+0x3994>
   14664:	mul	r7, r7, r6
   14668:	b	14c60 <__assert_fail@plt+0x3d28>
   1466c:	beq	14684 <__assert_fail@plt+0x374c>
   14670:	mov	r1, #-2147483648	; 0x80000000
   14674:	mov	r0, #1
   14678:	sdiv	r2, r1, r7
   1467c:	cmp	r2, r6
   14680:	blt	14750 <__assert_fail@plt+0x3818>
   14684:	mul	r1, r7, r6
   14688:	mov	r0, #0
   1468c:	cmp	r1, #0
   14690:	bge	14738 <__assert_fail@plt+0x3800>
   14694:	b	14750 <__assert_fail@plt+0x3818>
   14698:	beq	146b0 <__assert_fail@plt+0x3778>
   1469c:	mov	r0, #-2147483648	; 0x80000000
   146a0:	mov	r1, #1
   146a4:	sdiv	r2, r0, r7
   146a8:	cmp	r2, r6
   146ac:	blt	146d8 <__assert_fail@plt+0x37a0>
   146b0:	mul	r0, r7, r6
   146b4:	mov	r1, #0
   146b8:	cmp	r0, #0
   146bc:	blt	146d8 <__assert_fail@plt+0x37a0>
   146c0:	mvn	r2, #-2147483648	; 0x80000000
   146c4:	mov	r3, #1
   146c8:	udiv	r7, r2, r6
   146cc:	cmp	r7, r0
   146d0:	blt	146fc <__assert_fail@plt+0x37c4>
   146d4:	b	146ec <__assert_fail@plt+0x37b4>
   146d8:	mov	r2, #-2147483648	; 0x80000000
   146dc:	mov	r3, #1
   146e0:	sdiv	r7, r2, r0
   146e4:	cmp	r7, r6
   146e8:	blt	14714 <__assert_fail@plt+0x37dc>
   146ec:	mul	r2, r0, r6
   146f0:	mov	r3, r1
   146f4:	cmp	r2, #0
   146f8:	blt	14714 <__assert_fail@plt+0x37dc>
   146fc:	mvn	r1, #-2147483648	; 0x80000000
   14700:	mov	r0, #1
   14704:	udiv	r7, r1, r6
   14708:	cmp	r7, r2
   1470c:	blt	14738 <__assert_fail@plt+0x3800>
   14710:	b	14728 <__assert_fail@plt+0x37f0>
   14714:	mov	r1, #-2147483648	; 0x80000000
   14718:	mov	r0, #1
   1471c:	sdiv	r7, r1, r2
   14720:	cmp	r7, r6
   14724:	blt	14750 <__assert_fail@plt+0x3818>
   14728:	mul	r1, r2, r6
   1472c:	mov	r0, r3
   14730:	cmp	r1, #0
   14734:	blt	14750 <__assert_fail@plt+0x3818>
   14738:	mvn	r7, #-2147483648	; 0x80000000
   1473c:	mov	r2, #1
   14740:	udiv	r3, r7, r6
   14744:	cmp	r3, r1
   14748:	blt	14c5c <__assert_fail@plt+0x3d24>
   1474c:	b	14764 <__assert_fail@plt+0x382c>
   14750:	mov	r7, #-2147483648	; 0x80000000
   14754:	mov	r2, #1
   14758:	sdiv	r3, r7, r1
   1475c:	cmp	r3, r6
   14760:	blt	14c5c <__assert_fail@plt+0x3d24>
   14764:	mov	r2, #0
   14768:	mul	r7, r1, r6
   1476c:	b	14c5c <__assert_fail@plt+0x3d24>
   14770:	cmn	r7, #1
   14774:	beq	1478c <__assert_fail@plt+0x3854>
   14778:	mov	r0, #-2147483648	; 0x80000000
   1477c:	mov	r3, #1
   14780:	sdiv	r1, r0, r7
   14784:	cmp	r1, r6
   14788:	blt	148ec <__assert_fail@plt+0x39b4>
   1478c:	mul	r0, r7, r6
   14790:	mov	r3, #0
   14794:	cmp	r0, #0
   14798:	blt	148ec <__assert_fail@plt+0x39b4>
   1479c:	mvn	r1, #-2147483648	; 0x80000000
   147a0:	mov	r2, #1
   147a4:	udiv	r7, r1, r6
   147a8:	cmp	r7, r0
   147ac:	bge	14900 <__assert_fail@plt+0x39c8>
   147b0:	b	14910 <__assert_fail@plt+0x39d8>
   147b4:	beq	147c8 <__assert_fail@plt+0x3890>
   147b8:	mov	r1, #-2147483648	; 0x80000000
   147bc:	sdiv	r1, r1, r7
   147c0:	cmp	r1, #1024	; 0x400
   147c4:	blt	148cc <__assert_fail@plt+0x3994>
   147c8:	lsl	r7, r7, #10
   147cc:	b	14c60 <__assert_fail@plt+0x3d28>
   147d0:	cmn	r7, #1
   147d4:	beq	147ec <__assert_fail@plt+0x38b4>
   147d8:	mov	r0, #-2147483648	; 0x80000000
   147dc:	mov	r3, #1
   147e0:	sdiv	r1, r0, r7
   147e4:	cmp	r1, r6
   147e8:	blt	149bc <__assert_fail@plt+0x3a84>
   147ec:	mul	r0, r7, r6
   147f0:	mov	r3, #0
   147f4:	cmp	r0, #0
   147f8:	blt	149bc <__assert_fail@plt+0x3a84>
   147fc:	mvn	r1, #-2147483648	; 0x80000000
   14800:	mov	r2, #1
   14804:	udiv	r7, r1, r6
   14808:	cmp	r7, r0
   1480c:	bge	149d0 <__assert_fail@plt+0x3a98>
   14810:	b	149e0 <__assert_fail@plt+0x3aa8>
   14814:	cmn	r7, #1
   14818:	beq	14830 <__assert_fail@plt+0x38f8>
   1481c:	mov	r0, #-2147483648	; 0x80000000
   14820:	mov	r3, #1
   14824:	sdiv	r1, r0, r7
   14828:	cmp	r1, r6
   1482c:	blt	14a8c <__assert_fail@plt+0x3b54>
   14830:	mul	r0, r7, r6
   14834:	mov	r3, #0
   14838:	cmp	r0, #0
   1483c:	blt	14a8c <__assert_fail@plt+0x3b54>
   14840:	mvn	r1, #-2147483648	; 0x80000000
   14844:	mov	r2, #1
   14848:	udiv	r7, r1, r6
   1484c:	cmp	r7, r0
   14850:	bge	14aa0 <__assert_fail@plt+0x3b68>
   14854:	b	14ab0 <__assert_fail@plt+0x3b78>
   14858:	cmn	r7, #1
   1485c:	beq	14874 <__assert_fail@plt+0x393c>
   14860:	mov	r0, #-2147483648	; 0x80000000
   14864:	mov	r3, #1
   14868:	sdiv	r1, r0, r7
   1486c:	cmp	r1, r6
   14870:	blt	14af0 <__assert_fail@plt+0x3bb8>
   14874:	mul	r0, r7, r6
   14878:	mov	r3, #0
   1487c:	cmp	r0, #0
   14880:	blt	14af0 <__assert_fail@plt+0x3bb8>
   14884:	mvn	r1, #-2147483648	; 0x80000000
   14888:	mov	r2, #1
   1488c:	udiv	r7, r1, r6
   14890:	cmp	r7, r0
   14894:	bge	14b04 <__assert_fail@plt+0x3bcc>
   14898:	b	14b14 <__assert_fail@plt+0x3bdc>
   1489c:	beq	148b0 <__assert_fail@plt+0x3978>
   148a0:	mov	r1, #-2147483648	; 0x80000000
   148a4:	sdiv	r1, r1, r7
   148a8:	cmp	r1, #512	; 0x200
   148ac:	blt	148cc <__assert_fail@plt+0x3994>
   148b0:	lsl	r7, r7, #9
   148b4:	b	14c60 <__assert_fail@plt+0x3d28>
   148b8:	beq	148e4 <__assert_fail@plt+0x39ac>
   148bc:	mov	r1, #-2147483648	; 0x80000000
   148c0:	sdiv	r1, r1, r7
   148c4:	cmp	r1, #2
   148c8:	bge	148e4 <__assert_fail@plt+0x39ac>
   148cc:	mvn	r1, #-2147483648	; 0x80000000
   148d0:	cmp	r7, #0
   148d4:	mov	r0, #1
   148d8:	movlt	r1, #-2147483648	; 0x80000000
   148dc:	mov	r7, r1
   148e0:	b	14c60 <__assert_fail@plt+0x3d28>
   148e4:	lsl	r7, r7, #1
   148e8:	b	14c60 <__assert_fail@plt+0x3d28>
   148ec:	mov	r1, #-2147483648	; 0x80000000
   148f0:	mov	r2, #1
   148f4:	sdiv	r7, r1, r0
   148f8:	cmp	r7, r6
   148fc:	blt	14928 <__assert_fail@plt+0x39f0>
   14900:	mul	r1, r0, r6
   14904:	mov	r2, r3
   14908:	cmp	r1, #0
   1490c:	blt	14928 <__assert_fail@plt+0x39f0>
   14910:	mvn	r3, #-2147483648	; 0x80000000
   14914:	mov	r0, #1
   14918:	udiv	r7, r3, r6
   1491c:	cmp	r7, r1
   14920:	bge	1493c <__assert_fail@plt+0x3a04>
   14924:	b	1494c <__assert_fail@plt+0x3a14>
   14928:	mov	r3, #-2147483648	; 0x80000000
   1492c:	mov	r0, #1
   14930:	sdiv	r7, r3, r1
   14934:	cmp	r7, r6
   14938:	blt	14964 <__assert_fail@plt+0x3a2c>
   1493c:	mul	r3, r1, r6
   14940:	mov	r0, r2
   14944:	cmp	r3, #0
   14948:	blt	14964 <__assert_fail@plt+0x3a2c>
   1494c:	mvn	r1, #-2147483648	; 0x80000000
   14950:	udiv	r2, r1, r6
   14954:	cmp	r2, r3
   14958:	bge	1497c <__assert_fail@plt+0x3a44>
   1495c:	mov	r0, #1
   14960:	b	14988 <__assert_fail@plt+0x3a50>
   14964:	mov	r1, #-2147483648	; 0x80000000
   14968:	sdiv	r2, r1, r3
   1496c:	cmp	r2, r6
   14970:	bge	1497c <__assert_fail@plt+0x3a44>
   14974:	mov	r0, #1
   14978:	b	1499c <__assert_fail@plt+0x3a64>
   1497c:	mul	r1, r3, r6
   14980:	cmp	r1, #0
   14984:	blt	1499c <__assert_fail@plt+0x3a64>
   14988:	mvn	r2, #-2147483648	; 0x80000000
   1498c:	udiv	r3, r2, r6
   14990:	cmp	r3, r1
   14994:	bge	149ac <__assert_fail@plt+0x3a74>
   14998:	b	14a2c <__assert_fail@plt+0x3af4>
   1499c:	mov	r2, #-2147483648	; 0x80000000
   149a0:	sdiv	r3, r2, r1
   149a4:	cmp	r3, r6
   149a8:	blt	14a44 <__assert_fail@plt+0x3b0c>
   149ac:	mul	r2, r1, r6
   149b0:	cmp	r2, #0
   149b4:	bge	14a58 <__assert_fail@plt+0x3b20>
   149b8:	b	14a6c <__assert_fail@plt+0x3b34>
   149bc:	mov	r1, #-2147483648	; 0x80000000
   149c0:	mov	r2, #1
   149c4:	sdiv	r7, r1, r0
   149c8:	cmp	r7, r6
   149cc:	blt	149f8 <__assert_fail@plt+0x3ac0>
   149d0:	mul	r1, r0, r6
   149d4:	mov	r2, r3
   149d8:	cmp	r1, #0
   149dc:	blt	149f8 <__assert_fail@plt+0x3ac0>
   149e0:	mvn	r3, #-2147483648	; 0x80000000
   149e4:	mov	r0, #1
   149e8:	udiv	r7, r3, r6
   149ec:	cmp	r7, r1
   149f0:	bge	14a0c <__assert_fail@plt+0x3ad4>
   149f4:	b	14a1c <__assert_fail@plt+0x3ae4>
   149f8:	mov	r3, #-2147483648	; 0x80000000
   149fc:	mov	r0, #1
   14a00:	sdiv	r7, r3, r1
   14a04:	cmp	r7, r6
   14a08:	blt	14a34 <__assert_fail@plt+0x3afc>
   14a0c:	mul	r3, r1, r6
   14a10:	mov	r0, r2
   14a14:	cmp	r3, #0
   14a18:	blt	14a34 <__assert_fail@plt+0x3afc>
   14a1c:	mvn	r2, #-2147483648	; 0x80000000
   14a20:	udiv	r1, r2, r6
   14a24:	cmp	r1, r3
   14a28:	bge	14a4c <__assert_fail@plt+0x3b14>
   14a2c:	mov	r0, #1
   14a30:	b	14a58 <__assert_fail@plt+0x3b20>
   14a34:	mov	r2, #-2147483648	; 0x80000000
   14a38:	sdiv	r1, r2, r3
   14a3c:	cmp	r1, r6
   14a40:	bge	14a4c <__assert_fail@plt+0x3b14>
   14a44:	mov	r0, #1
   14a48:	b	14a6c <__assert_fail@plt+0x3b34>
   14a4c:	mul	r2, r3, r6
   14a50:	cmp	r2, #0
   14a54:	blt	14a6c <__assert_fail@plt+0x3b34>
   14a58:	mvn	r1, #-2147483648	; 0x80000000
   14a5c:	udiv	r3, r1, r6
   14a60:	cmp	r3, r2
   14a64:	bge	14a7c <__assert_fail@plt+0x3b44>
   14a68:	b	14c14 <__assert_fail@plt+0x3cdc>
   14a6c:	mov	r1, #-2147483648	; 0x80000000
   14a70:	sdiv	r3, r1, r2
   14a74:	cmp	r3, r6
   14a78:	blt	14c2c <__assert_fail@plt+0x3cf4>
   14a7c:	mul	r1, r2, r6
   14a80:	cmp	r1, #0
   14a84:	bge	14c40 <__assert_fail@plt+0x3d08>
   14a88:	b	14c8c <__assert_fail@plt+0x3d54>
   14a8c:	mov	r1, #-2147483648	; 0x80000000
   14a90:	mov	r2, #1
   14a94:	sdiv	r7, r1, r0
   14a98:	cmp	r7, r6
   14a9c:	blt	14ac8 <__assert_fail@plt+0x3b90>
   14aa0:	mul	r1, r0, r6
   14aa4:	mov	r2, r3
   14aa8:	cmp	r1, #0
   14aac:	blt	14ac8 <__assert_fail@plt+0x3b90>
   14ab0:	mvn	r3, #-2147483648	; 0x80000000
   14ab4:	mov	r0, #1
   14ab8:	udiv	r7, r3, r6
   14abc:	cmp	r7, r1
   14ac0:	bge	14adc <__assert_fail@plt+0x3ba4>
   14ac4:	b	14c04 <__assert_fail@plt+0x3ccc>
   14ac8:	mov	r3, #-2147483648	; 0x80000000
   14acc:	mov	r0, #1
   14ad0:	sdiv	r7, r3, r1
   14ad4:	cmp	r7, r6
   14ad8:	blt	14c1c <__assert_fail@plt+0x3ce4>
   14adc:	mul	r3, r1, r6
   14ae0:	mov	r0, r2
   14ae4:	cmp	r3, #0
   14ae8:	bge	14c04 <__assert_fail@plt+0x3ccc>
   14aec:	b	14c1c <__assert_fail@plt+0x3ce4>
   14af0:	mov	r1, #-2147483648	; 0x80000000
   14af4:	mov	r2, #1
   14af8:	sdiv	r7, r1, r0
   14afc:	cmp	r7, r6
   14b00:	blt	14b2c <__assert_fail@plt+0x3bf4>
   14b04:	mul	r1, r0, r6
   14b08:	mov	r2, r3
   14b0c:	cmp	r1, #0
   14b10:	blt	14b2c <__assert_fail@plt+0x3bf4>
   14b14:	mvn	r3, #-2147483648	; 0x80000000
   14b18:	mov	r0, #1
   14b1c:	udiv	r7, r3, r6
   14b20:	cmp	r7, r1
   14b24:	bge	14b40 <__assert_fail@plt+0x3c08>
   14b28:	b	14b50 <__assert_fail@plt+0x3c18>
   14b2c:	mov	r3, #-2147483648	; 0x80000000
   14b30:	mov	r0, #1
   14b34:	sdiv	r7, r3, r1
   14b38:	cmp	r7, r6
   14b3c:	blt	14b68 <__assert_fail@plt+0x3c30>
   14b40:	mul	r3, r1, r6
   14b44:	mov	r0, r2
   14b48:	cmp	r3, #0
   14b4c:	blt	14b68 <__assert_fail@plt+0x3c30>
   14b50:	mvn	r1, #-2147483648	; 0x80000000
   14b54:	udiv	r2, r1, r6
   14b58:	cmp	r2, r3
   14b5c:	bge	14b80 <__assert_fail@plt+0x3c48>
   14b60:	mov	r0, #1
   14b64:	b	14b8c <__assert_fail@plt+0x3c54>
   14b68:	mov	r1, #-2147483648	; 0x80000000
   14b6c:	sdiv	r2, r1, r3
   14b70:	cmp	r2, r6
   14b74:	bge	14b80 <__assert_fail@plt+0x3c48>
   14b78:	mov	r0, #1
   14b7c:	b	14ba4 <__assert_fail@plt+0x3c6c>
   14b80:	mul	r1, r3, r6
   14b84:	cmp	r1, #0
   14b88:	blt	14ba4 <__assert_fail@plt+0x3c6c>
   14b8c:	mvn	r2, #-2147483648	; 0x80000000
   14b90:	udiv	r3, r2, r6
   14b94:	cmp	r3, r1
   14b98:	bge	14bbc <__assert_fail@plt+0x3c84>
   14b9c:	mov	r0, #1
   14ba0:	b	14bc8 <__assert_fail@plt+0x3c90>
   14ba4:	mov	r2, #-2147483648	; 0x80000000
   14ba8:	sdiv	r3, r2, r1
   14bac:	cmp	r3, r6
   14bb0:	bge	14bbc <__assert_fail@plt+0x3c84>
   14bb4:	mov	r0, #1
   14bb8:	b	14be0 <__assert_fail@plt+0x3ca8>
   14bbc:	mul	r2, r1, r6
   14bc0:	cmp	r2, #0
   14bc4:	blt	14be0 <__assert_fail@plt+0x3ca8>
   14bc8:	mvn	r3, #-2147483648	; 0x80000000
   14bcc:	udiv	r1, r3, r6
   14bd0:	cmp	r1, r2
   14bd4:	bge	14bf8 <__assert_fail@plt+0x3cc0>
   14bd8:	mov	r0, #1
   14bdc:	b	14c04 <__assert_fail@plt+0x3ccc>
   14be0:	mov	r3, #-2147483648	; 0x80000000
   14be4:	sdiv	r1, r3, r2
   14be8:	cmp	r1, r6
   14bec:	bge	14bf8 <__assert_fail@plt+0x3cc0>
   14bf0:	mov	r0, #1
   14bf4:	b	14c1c <__assert_fail@plt+0x3ce4>
   14bf8:	mul	r3, r2, r6
   14bfc:	cmp	r3, #0
   14c00:	blt	14c1c <__assert_fail@plt+0x3ce4>
   14c04:	mvn	r1, #-2147483648	; 0x80000000
   14c08:	udiv	r2, r1, r6
   14c0c:	cmp	r2, r3
   14c10:	bge	14c34 <__assert_fail@plt+0x3cfc>
   14c14:	mov	r0, #1
   14c18:	b	14c40 <__assert_fail@plt+0x3d08>
   14c1c:	mov	r1, #-2147483648	; 0x80000000
   14c20:	sdiv	r2, r1, r3
   14c24:	cmp	r2, r6
   14c28:	bge	14c34 <__assert_fail@plt+0x3cfc>
   14c2c:	mov	r0, #1
   14c30:	b	14c8c <__assert_fail@plt+0x3d54>
   14c34:	mul	r1, r3, r6
   14c38:	cmp	r1, #0
   14c3c:	blt	14c8c <__assert_fail@plt+0x3d54>
   14c40:	mvn	r7, #-2147483648	; 0x80000000
   14c44:	mov	r2, #1
   14c48:	udiv	r3, r7, r6
   14c4c:	cmp	r3, r1
   14c50:	blt	14c5c <__assert_fail@plt+0x3d24>
   14c54:	mul	r7, r1, r6
   14c58:	mov	r2, #0
   14c5c:	orr	r0, r2, r0
   14c60:	add	r1, r4, ip
   14c64:	orr	r9, r0, r9
   14c68:	str	r1, [sl]
   14c6c:	ldrb	r1, [r4, ip]
   14c70:	cmp	r1, #0
   14c74:	orrne	r9, r9, #2
   14c78:	ldr	r0, [sp, #4]
   14c7c:	str	r7, [r0]
   14c80:	mov	r0, r9
   14c84:	sub	sp, fp, #28
   14c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c8c:	mov	r7, #-2147483648	; 0x80000000
   14c90:	mov	r2, #1
   14c94:	sdiv	r3, r7, r1
   14c98:	cmp	r3, r6
   14c9c:	bge	14c54 <__assert_fail@plt+0x3d1c>
   14ca0:	b	14c5c <__assert_fail@plt+0x3d24>
   14ca4:	movw	r0, #23501	; 0x5bcd
   14ca8:	movw	r1, #23539	; 0x5bf3
   14cac:	movw	r3, #23553	; 0x5c01
   14cb0:	mov	r2, #85	; 0x55
   14cb4:	movt	r0, #1
   14cb8:	movt	r1, #1
   14cbc:	movt	r3, #1
   14cc0:	bl	10f38 <__assert_fail@plt>
   14cc4:	clz	r2, r1
   14cc8:	clz	r3, r0
   14ccc:	lsr	r2, r2, #5
   14cd0:	lsr	r3, r3, #5
   14cd4:	orrs	r2, r3, r2
   14cd8:	movwne	r1, #1
   14cdc:	movwne	r0, #1
   14ce0:	cmp	r1, #0
   14ce4:	beq	14d14 <__assert_fail@plt+0x3ddc>
   14ce8:	mvn	r2, #-2147483648	; 0x80000000
   14cec:	udiv	r2, r2, r1
   14cf0:	cmp	r2, r0
   14cf4:	bcs	14d14 <__assert_fail@plt+0x3ddc>
   14cf8:	push	{fp, lr}
   14cfc:	mov	fp, sp
   14d00:	bl	10e90 <__errno_location@plt>
   14d04:	mov	r1, #12
   14d08:	str	r1, [r0]
   14d0c:	mov	r0, #0
   14d10:	pop	{fp, pc}
   14d14:	b	10d10 <calloc@plt>
   14d18:	cmp	r0, #0
   14d1c:	movweq	r0, #1
   14d20:	cmn	r0, #1
   14d24:	ble	14d2c <__assert_fail@plt+0x3df4>
   14d28:	b	10e24 <malloc@plt>
   14d2c:	push	{fp, lr}
   14d30:	mov	fp, sp
   14d34:	bl	10e90 <__errno_location@plt>
   14d38:	mov	r1, #12
   14d3c:	str	r1, [r0]
   14d40:	mov	r0, #0
   14d44:	pop	{fp, pc}
   14d48:	push	{fp, lr}
   14d4c:	mov	fp, sp
   14d50:	cmp	r0, #0
   14d54:	beq	14d70 <__assert_fail@plt+0x3e38>
   14d58:	cmp	r1, #0
   14d5c:	beq	14d7c <__assert_fail@plt+0x3e44>
   14d60:	cmn	r1, #1
   14d64:	ble	14d88 <__assert_fail@plt+0x3e50>
   14d68:	pop	{fp, lr}
   14d6c:	b	10da0 <realloc@plt>
   14d70:	mov	r0, r1
   14d74:	pop	{fp, lr}
   14d78:	b	14d18 <__assert_fail@plt+0x3de0>
   14d7c:	bl	14f18 <__assert_fail@plt+0x3fe0>
   14d80:	mov	r0, #0
   14d84:	pop	{fp, pc}
   14d88:	bl	10e90 <__errno_location@plt>
   14d8c:	mov	r1, #12
   14d90:	str	r1, [r0]
   14d94:	mov	r0, #0
   14d98:	pop	{fp, pc}
   14d9c:	push	{r4, r5, r6, sl, fp, lr}
   14da0:	add	fp, sp, #16
   14da4:	mov	r4, r0
   14da8:	bl	10df4 <__fpending@plt>
   14dac:	ldr	r6, [r4]
   14db0:	mov	r5, r0
   14db4:	mov	r0, r4
   14db8:	bl	14e20 <__assert_fail@plt+0x3ee8>
   14dbc:	tst	r6, #32
   14dc0:	bne	14df8 <__assert_fail@plt+0x3ec0>
   14dc4:	cmp	r0, #0
   14dc8:	mov	r4, r0
   14dcc:	mvnne	r4, #0
   14dd0:	cmp	r5, #0
   14dd4:	bne	14e04 <__assert_fail@plt+0x3ecc>
   14dd8:	cmp	r0, #0
   14ddc:	beq	14e04 <__assert_fail@plt+0x3ecc>
   14de0:	bl	10e90 <__errno_location@plt>
   14de4:	ldr	r0, [r0]
   14de8:	subs	r4, r0, #9
   14dec:	mvnne	r4, #0
   14df0:	mov	r0, r4
   14df4:	pop	{r4, r5, r6, sl, fp, pc}
   14df8:	mvn	r4, #0
   14dfc:	cmp	r0, #0
   14e00:	beq	14e0c <__assert_fail@plt+0x3ed4>
   14e04:	mov	r0, r4
   14e08:	pop	{r4, r5, r6, sl, fp, pc}
   14e0c:	bl	10e90 <__errno_location@plt>
   14e10:	mov	r1, #0
   14e14:	str	r1, [r0]
   14e18:	mov	r0, r4
   14e1c:	pop	{r4, r5, r6, sl, fp, pc}
   14e20:	push	{r4, r5, r6, sl, fp, lr}
   14e24:	add	fp, sp, #16
   14e28:	sub	sp, sp, #8
   14e2c:	mov	r4, r0
   14e30:	bl	10ec0 <fileno@plt>
   14e34:	cmn	r0, #1
   14e38:	ble	14eac <__assert_fail@plt+0x3f74>
   14e3c:	mov	r0, r4
   14e40:	bl	10e3c <__freading@plt>
   14e44:	cmp	r0, #0
   14e48:	beq	14e74 <__assert_fail@plt+0x3f3c>
   14e4c:	mov	r0, r4
   14e50:	bl	10ec0 <fileno@plt>
   14e54:	mov	r1, #1
   14e58:	mov	r2, #0
   14e5c:	mov	r3, #0
   14e60:	str	r1, [sp]
   14e64:	bl	10ddc <lseek64@plt>
   14e68:	and	r0, r0, r1
   14e6c:	cmn	r0, #1
   14e70:	beq	14eac <__assert_fail@plt+0x3f74>
   14e74:	mov	r0, r4
   14e78:	bl	14ebc <__assert_fail@plt+0x3f84>
   14e7c:	cmp	r0, #0
   14e80:	beq	14eac <__assert_fail@plt+0x3f74>
   14e84:	bl	10e90 <__errno_location@plt>
   14e88:	ldr	r6, [r0]
   14e8c:	mov	r5, r0
   14e90:	mov	r0, r4
   14e94:	bl	10ed8 <fclose@plt>
   14e98:	cmp	r6, #0
   14e9c:	strne	r6, [r5]
   14ea0:	mvnne	r0, #0
   14ea4:	sub	sp, fp, #16
   14ea8:	pop	{r4, r5, r6, sl, fp, pc}
   14eac:	mov	r0, r4
   14eb0:	sub	sp, fp, #16
   14eb4:	pop	{r4, r5, r6, sl, fp, lr}
   14eb8:	b	10ed8 <fclose@plt>
   14ebc:	push	{r4, sl, fp, lr}
   14ec0:	add	fp, sp, #8
   14ec4:	sub	sp, sp, #8
   14ec8:	mov	r4, r0
   14ecc:	cmp	r0, #0
   14ed0:	beq	14eec <__assert_fail@plt+0x3fb4>
   14ed4:	mov	r0, r4
   14ed8:	bl	10e3c <__freading@plt>
   14edc:	cmp	r0, #0
   14ee0:	ldrbne	r0, [r4, #1]
   14ee4:	tstne	r0, #1
   14ee8:	bne	14efc <__assert_fail@plt+0x3fc4>
   14eec:	mov	r0, r4
   14ef0:	sub	sp, fp, #8
   14ef4:	pop	{r4, sl, fp, lr}
   14ef8:	b	10d40 <fflush@plt>
   14efc:	mov	r0, #1
   14f00:	mov	r2, #0
   14f04:	mov	r3, #0
   14f08:	str	r0, [sp]
   14f0c:	mov	r0, r4
   14f10:	bl	14f40 <__assert_fail@plt+0x4008>
   14f14:	b	14eec <__assert_fail@plt+0x3fb4>
   14f18:	push	{r4, r5, r6, sl, fp, lr}
   14f1c:	add	fp, sp, #16
   14f20:	mov	r4, r0
   14f24:	bl	10e90 <__errno_location@plt>
   14f28:	ldr	r6, [r0]
   14f2c:	mov	r5, r0
   14f30:	mov	r0, r4
   14f34:	bl	10d4c <free@plt>
   14f38:	str	r6, [r5]
   14f3c:	pop	{r4, r5, r6, sl, fp, pc}
   14f40:	push	{r4, r5, r6, r7, fp, lr}
   14f44:	add	fp, sp, #16
   14f48:	sub	sp, sp, #8
   14f4c:	mov	r4, r0
   14f50:	ldr	r0, [r0, #4]
   14f54:	mov	r5, r3
   14f58:	mov	r6, r2
   14f5c:	ldr	r1, [r4, #8]
   14f60:	cmp	r1, r0
   14f64:	bne	14f80 <__assert_fail@plt+0x4048>
   14f68:	ldrd	r0, [r4, #16]
   14f6c:	cmp	r1, r0
   14f70:	bne	14f80 <__assert_fail@plt+0x4048>
   14f74:	ldr	r0, [r4, #36]	; 0x24
   14f78:	cmp	r0, #0
   14f7c:	beq	14f98 <__assert_fail@plt+0x4060>
   14f80:	mov	r0, r4
   14f84:	mov	r2, r6
   14f88:	mov	r3, r5
   14f8c:	sub	sp, fp, #16
   14f90:	pop	{r4, r5, r6, r7, fp, lr}
   14f94:	b	10ee4 <fseeko64@plt>
   14f98:	ldr	r7, [fp, #8]
   14f9c:	mov	r0, r4
   14fa0:	bl	10ec0 <fileno@plt>
   14fa4:	mov	r2, r6
   14fa8:	mov	r3, r5
   14fac:	str	r7, [sp]
   14fb0:	bl	10ddc <lseek64@plt>
   14fb4:	and	r2, r0, r1
   14fb8:	cmn	r2, #1
   14fbc:	mvneq	r0, #0
   14fc0:	subeq	sp, fp, #16
   14fc4:	popeq	{r4, r5, r6, r7, fp, pc}
   14fc8:	strd	r0, [r4, #80]	; 0x50
   14fcc:	ldr	r0, [r4]
   14fd0:	bic	r0, r0, #16
   14fd4:	str	r0, [r4]
   14fd8:	mov	r0, #0
   14fdc:	sub	sp, fp, #16
   14fe0:	pop	{r4, r5, r6, r7, fp, pc}
   14fe4:	push	{fp, lr}
   14fe8:	mov	fp, sp
   14fec:	mov	r0, #14
   14ff0:	bl	10f08 <nl_langinfo@plt>
   14ff4:	movw	r1, #22282	; 0x570a
   14ff8:	cmp	r0, #0
   14ffc:	movt	r1, #1
   15000:	movne	r1, r0
   15004:	movw	r0, #23624	; 0x5c48
   15008:	ldrb	r2, [r1]
   1500c:	movt	r0, #1
   15010:	cmp	r2, #0
   15014:	movne	r0, r1
   15018:	pop	{fp, pc}
   1501c:	push	{r4, r5, r6, r7, fp, lr}
   15020:	add	fp, sp, #16
   15024:	sub	sp, sp, #8
   15028:	add	r5, sp, #4
   1502c:	cmp	r0, #0
   15030:	mov	r7, r2
   15034:	mov	r4, r1
   15038:	movne	r5, r0
   1503c:	mov	r0, r5
   15040:	bl	10e00 <mbrtowc@plt>
   15044:	mov	r6, r0
   15048:	cmp	r7, #0
   1504c:	beq	15070 <__assert_fail@plt+0x4138>
   15050:	cmn	r6, #2
   15054:	bcc	15070 <__assert_fail@plt+0x4138>
   15058:	mov	r0, #0
   1505c:	bl	150b8 <__assert_fail@plt+0x4180>
   15060:	cmp	r0, #0
   15064:	ldrbeq	r0, [r4]
   15068:	moveq	r6, #1
   1506c:	streq	r0, [r5]
   15070:	mov	r0, r6
   15074:	sub	sp, fp, #16
   15078:	pop	{r4, r5, r6, r7, fp, pc}
   1507c:	cmp	r2, #0
   15080:	beq	150b0 <__assert_fail@plt+0x4178>
   15084:	mvn	r3, #0
   15088:	udiv	r3, r3, r2
   1508c:	cmp	r3, r1
   15090:	bcs	150b0 <__assert_fail@plt+0x4178>
   15094:	push	{fp, lr}
   15098:	mov	fp, sp
   1509c:	bl	10e90 <__errno_location@plt>
   150a0:	mov	r1, #12
   150a4:	str	r1, [r0]
   150a8:	mov	r0, #0
   150ac:	pop	{fp, pc}
   150b0:	mul	r1, r2, r1
   150b4:	b	14d48 <__assert_fail@plt+0x3e10>
   150b8:	push	{r4, sl, fp, lr}
   150bc:	add	fp, sp, #8
   150c0:	sub	sp, sp, #264	; 0x108
   150c4:	add	r1, sp, #7
   150c8:	movw	r2, #257	; 0x101
   150cc:	bl	1511c <__assert_fail@plt+0x41e4>
   150d0:	mov	r4, #0
   150d4:	cmp	r0, #0
   150d8:	bne	15110 <__assert_fail@plt+0x41d8>
   150dc:	movw	r1, #23630	; 0x5c4e
   150e0:	add	r0, sp, #7
   150e4:	movt	r1, #1
   150e8:	bl	10d28 <strcmp@plt>
   150ec:	cmp	r0, #0
   150f0:	beq	15110 <__assert_fail@plt+0x41d8>
   150f4:	movw	r1, #23632	; 0x5c50
   150f8:	add	r0, sp, #7
   150fc:	movt	r1, #1
   15100:	bl	10d28 <strcmp@plt>
   15104:	mov	r4, r0
   15108:	cmp	r0, #0
   1510c:	movwne	r4, #1
   15110:	mov	r0, r4
   15114:	sub	sp, fp, #8
   15118:	pop	{r4, sl, fp, pc}
   1511c:	push	{r4, r5, r6, r7, fp, lr}
   15120:	add	fp, sp, #16
   15124:	mov	r4, r1
   15128:	mov	r1, #0
   1512c:	mov	r6, r2
   15130:	bl	10ef0 <setlocale@plt>
   15134:	cmp	r0, #0
   15138:	beq	15168 <__assert_fail@plt+0x4230>
   1513c:	mov	r7, r0
   15140:	bl	10e78 <strlen@plt>
   15144:	cmp	r0, r6
   15148:	bcs	15188 <__assert_fail@plt+0x4250>
   1514c:	add	r2, r0, #1
   15150:	mov	r0, r4
   15154:	mov	r1, r7
   15158:	bl	10d64 <memcpy@plt>
   1515c:	mov	r5, #0
   15160:	mov	r0, r5
   15164:	pop	{r4, r5, r6, r7, fp, pc}
   15168:	cmp	r6, #0
   1516c:	mov	r5, #22
   15170:	movne	r0, #0
   15174:	strbne	r0, [r4]
   15178:	movne	r0, r5
   1517c:	popne	{r4, r5, r6, r7, fp, pc}
   15180:	mov	r0, r5
   15184:	pop	{r4, r5, r6, r7, fp, pc}
   15188:	mov	r5, #34	; 0x22
   1518c:	cmp	r6, #0
   15190:	beq	151b0 <__assert_fail@plt+0x4278>
   15194:	sub	r6, r6, #1
   15198:	mov	r0, r4
   1519c:	mov	r1, r7
   151a0:	mov	r2, r6
   151a4:	bl	10d64 <memcpy@plt>
   151a8:	mov	r0, #0
   151ac:	strb	r0, [r4, r6]
   151b0:	mov	r0, r5
   151b4:	pop	{r4, r5, r6, r7, fp, pc}
   151b8:	mov	r1, #0
   151bc:	b	10ef0 <setlocale@plt>
   151c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151c4:	mov	r7, r0
   151c8:	ldr	r6, [pc, #72]	; 15218 <__assert_fail@plt+0x42e0>
   151cc:	ldr	r5, [pc, #72]	; 1521c <__assert_fail@plt+0x42e4>
   151d0:	add	r6, pc, r6
   151d4:	add	r5, pc, r5
   151d8:	sub	r6, r6, r5
   151dc:	mov	r8, r1
   151e0:	mov	r9, r2
   151e4:	bl	10cf0 <calloc@plt-0x20>
   151e8:	asrs	r6, r6, #2
   151ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   151f0:	mov	r4, #0
   151f4:	add	r4, r4, #1
   151f8:	ldr	r3, [r5], #4
   151fc:	mov	r2, r9
   15200:	mov	r1, r8
   15204:	mov	r0, r7
   15208:	blx	r3
   1520c:	cmp	r6, r4
   15210:	bne	151f4 <__assert_fail@plt+0x42bc>
   15214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15218:	andeq	r0, r1, r4, lsr sp
   1521c:	andeq	r0, r1, ip, lsr #26
   15220:	bx	lr
   15224:	ldr	r3, [pc, #12]	; 15238 <__assert_fail@plt+0x4300>
   15228:	mov	r1, #0
   1522c:	add	r3, pc, r3
   15230:	ldr	r2, [r3]
   15234:	b	10e9c <__cxa_atexit@plt>
   15238:	andeq	r0, r1, r0, lsr #29

Disassembly of section .fini:

0001523c <.fini>:
   1523c:	push	{r3, lr}
   15240:	pop	{r3, pc}
