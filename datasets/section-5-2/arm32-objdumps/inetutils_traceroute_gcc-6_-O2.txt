
../repos/inetutils/src/traceroute:     file format elf32-littlearm


Disassembly of section .init:

00010fc0 <.init>:
   10fc0:	push	{r3, lr}
   10fc4:	bl	11568 <__assert_fail@plt+0x2a0>
   10fc8:	pop	{r3, pc}

Disassembly of section .plt:

00010fcc <calloc@plt-0x14>:
   10fcc:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd0:	ldr	lr, [pc, #4]	; 10fdc <calloc@plt-0x4>
   10fd4:	add	lr, pc, lr
   10fd8:	ldr	pc, [lr, #8]!
   10fdc:	andeq	sl, r1, r4, lsr #32

00010fe0 <calloc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #36]!	; 0x24

00010fec <fputs_unlocked@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #28]!

00010ff8 <raise@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #20]!

00011004 <strcmp@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #12]!

00011010 <strtol@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #4]!

0001101c <setsockopt@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #4092]!	; 0xffc

00011028 <printf@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #4084]!	; 0xff4

00011034 <getprotobyname@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #4076]!	; 0xfec

00011040 <fflush@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #4068]!	; 0xfe4

0001104c <memmove@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #4060]!	; 0xfdc

00011058 <strchrnul@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #4052]!	; 0xfd4

00011064 <free@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011070 <gai_strerror@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #4036]!	; 0xfc4

0001107c <strndup@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #4028]!	; 0xfbc

00011088 <memcpy@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #4020]!	; 0xfb4

00011094 <fwrite_unlocked@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #4012]!	; 0xfac

000110a0 <inet_ntoa@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110ac <select@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b8 <sleep@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #3988]!	; 0xf94

000110c4 <gethostbyaddr@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #3980]!	; 0xf8c

000110d0 <recvfrom@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #102400	; 0x19000
   110d8:	ldr	pc, [ip, #3972]!	; 0xf84

000110dc <realloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #102400	; 0x19000
   110e4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e8 <strcasecmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #102400	; 0x19000
   110f0:	ldr	pc, [ip, #3956]!	; 0xf74

000110f4 <funlockfile@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #3948]!	; 0xf6c

00011100 <fwrite@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #102400	; 0x19000
   11108:	ldr	pc, [ip, #3940]!	; 0xf64

0001110c <strcat@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #102400	; 0x19000
   11114:	ldr	pc, [ip, #3932]!	; 0xf5c

00011118 <gettimeofday@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #102400	; 0x19000
   11120:	ldr	pc, [ip, #3924]!	; 0xf54

00011124 <error@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #102400	; 0x19000
   1112c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011130 <getenv@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #102400	; 0x19000
   11138:	ldr	pc, [ip, #3908]!	; 0xf44

0001113c <malloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #102400	; 0x19000
   11144:	ldr	pc, [ip, #3900]!	; 0xf3c

00011148 <__libc_start_main@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #102400	; 0x19000
   11150:	ldr	pc, [ip, #3892]!	; 0xf34

00011154 <strerror@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #102400	; 0x19000
   1115c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011160 <__ctype_tolower_loc@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #102400	; 0x19000
   11168:	ldr	pc, [ip, #3876]!	; 0xf24

0001116c <__gmon_start__@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #102400	; 0x19000
   11174:	ldr	pc, [ip, #3868]!	; 0xf1c

00011178 <mempcpy@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3860]!	; 0xf14

00011184 <__ctype_b_loc@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011190 <getpid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3844]!	; 0xf04

0001119c <exit@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3836]!	; 0xefc

000111a8 <strlen@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3828]!	; 0xef4

000111b4 <strchr@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #102400	; 0x19000
   111bc:	ldr	pc, [ip, #3820]!	; 0xeec

000111c0 <fprintf@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3812]!	; 0xee4

000111cc <__errno_location@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3804]!	; 0xedc

000111d8 <strerror_r@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3796]!	; 0xed4

000111e4 <memset@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3788]!	; 0xecc

000111f0 <putchar@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3780]!	; 0xec4

000111fc <memchr@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3772]!	; 0xebc

00011208 <sendto@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3764]!	; 0xeb4

00011214 <__overflow@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3756]!	; 0xeac

00011220 <setlocale@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3748]!	; 0xea4

0001122c <getnameinfo@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3740]!	; 0xe9c

00011238 <strrchr@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3732]!	; 0xe94

00011244 <vfprintf@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011250 <fputc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3716]!	; 0xe84

0001125c <flockfile@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3708]!	; 0xe7c

00011268 <vsnprintf@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3700]!	; 0xe74

00011274 <qsort@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011280 <strpbrk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3684]!	; 0xe64

0001128c <freeaddrinfo@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3676]!	; 0xe5c

00011298 <getaddrinfo@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3668]!	; 0xe54

000112a4 <socket@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3660]!	; 0xe4c

000112b0 <strncmp@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3652]!	; 0xe44

000112bc <abort@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c8 <__assert_fail@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3636]!	; 0xe34

Disassembly of section .text:

000112d8 <argp_failure@@Base-0x3378>:
   112d8:	push	{r4, r5, r6, r7, r8, lr}
   112dc:	mov	r5, r0
   112e0:	sub	sp, sp, #112	; 0x70
   112e4:	ldr	r0, [r1]
   112e8:	mov	r4, r1
   112ec:	bl	170ec <argp_parse@@Base+0xfa0>
   112f0:	ldr	r1, [pc, #508]	; 114f4 <__assert_fail@plt+0x22c>
   112f4:	mov	r0, #6
   112f8:	bl	11220 <setlocale@plt>
   112fc:	bl	11190 <getpid@plt>
   11300:	ldr	r2, [pc, #496]	; 114f8 <__assert_fail@plt+0x230>
   11304:	ldr	r3, [pc, #496]	; 114fc <__assert_fail@plt+0x234>
   11308:	ldr	ip, [pc, #496]	; 11500 <__assert_fail@plt+0x238>
   1130c:	ldr	r1, [pc, #496]	; 11504 <__assert_fail@plt+0x23c>
   11310:	str	ip, [r2]
   11314:	ldr	r6, [pc, #492]	; 11508 <__assert_fail@plt+0x240>
   11318:	uxth	r2, r0
   1131c:	ldr	r0, [pc, #488]	; 1150c <__assert_fail@plt+0x244>
   11320:	str	r2, [r3]
   11324:	bl	16f10 <argp_parse@@Base+0xdc4>
   11328:	mov	r3, #0
   1132c:	str	r3, [sp, #4]
   11330:	str	r3, [sp]
   11334:	mov	r2, r4
   11338:	mov	r1, r5
   1133c:	ldr	r0, [pc, #460]	; 11510 <__assert_fail@plt+0x248>
   11340:	bl	1614c <argp_parse@@Base>
   11344:	ldr	r3, [r6, #16]
   11348:	cmp	r3, #0
   1134c:	beq	114c4 <__assert_fail@plt+0x1fc>
   11350:	ldrb	r3, [r3]
   11354:	cmp	r3, #0
   11358:	beq	114c4 <__assert_fail@plt+0x1fc>
   1135c:	mov	r2, #32
   11360:	mov	r1, #0
   11364:	add	r0, sp, #20
   11368:	bl	111e4 <memset@plt>
   1136c:	ldr	r8, [r6, #16]
   11370:	mov	lr, #2
   11374:	mov	ip, #194	; 0xc2
   11378:	add	r2, sp, #20
   1137c:	mov	r0, r8
   11380:	add	r3, sp, #16
   11384:	mov	r1, #0
   11388:	str	lr, [sp, #24]
   1138c:	str	ip, [sp, #20]
   11390:	bl	11298 <getaddrinfo@plt>
   11394:	cmp	r0, #0
   11398:	bne	114e0 <__assert_fail@plt+0x218>
   1139c:	ldr	r4, [sp, #16]
   113a0:	ldr	r7, [pc, #364]	; 11514 <__assert_fail@plt+0x24c>
   113a4:	ldr	r5, [pc, #364]	; 11518 <__assert_fail@plt+0x250>
   113a8:	ldr	r2, [r4, #16]
   113ac:	ldr	r1, [r4, #20]
   113b0:	mov	r0, r7
   113b4:	bl	11088 <memcpy@plt>
   113b8:	ldr	r1, [r4, #16]
   113bc:	ldr	ip, [r5, #8]
   113c0:	ldr	r0, [r4, #20]
   113c4:	mov	r3, #0
   113c8:	mov	r4, #1
   113cc:	rev16	ip, ip
   113d0:	stmib	sp, {r3, r4}
   113d4:	str	r3, [sp]
   113d8:	ldr	r2, [pc, #316]	; 1151c <__assert_fail@plt+0x254>
   113dc:	mov	r3, #46	; 0x2e
   113e0:	strh	ip, [r7, #2]
   113e4:	bl	1122c <getnameinfo@plt>
   113e8:	ldr	r1, [sp, #16]
   113ec:	ldr	r3, [r5, #4]
   113f0:	ldr	r2, [pc, #292]	; 1151c <__assert_fail@plt+0x254>
   113f4:	ldr	r1, [r1, #24]
   113f8:	ldr	r0, [pc, #288]	; 11520 <__assert_fail@plt+0x258>
   113fc:	cmp	r1, #0
   11400:	moveq	r1, r8
   11404:	bl	11028 <printf@plt>
   11408:	mov	r0, r8
   1140c:	bl	16fe4 <argp_parse@@Base+0xe98>
   11410:	ldr	r0, [sp, #16]
   11414:	bl	1128c <freeaddrinfo@plt>
   11418:	mov	r0, r7
   1141c:	bl	125b4 <__assert_fail@plt+0x12ec>
   11420:	ldr	r3, [r7, #12]
   11424:	ldr	ip, [r6, #4]
   11428:	str	r3, [sp]
   1142c:	add	r0, sp, #52	; 0x34
   11430:	ldm	r7, {r1, r2, r3}
   11434:	str	ip, [sp, #4]
   11438:	bl	11a78 <__assert_fail@plt+0x7b0>
   1143c:	ldr	r3, [pc, #224]	; 11524 <__assert_fail@plt+0x25c>
   11440:	ldr	r1, [r6, #24]
   11444:	mvn	r2, #0
   11448:	cmp	r1, #0
   1144c:	str	r2, [r3]
   11450:	bne	114bc <__assert_fail@plt+0x1f4>
   11454:	ldr	r2, [r5, #4]
   11458:	cmp	r2, #0
   1145c:	bgt	11470 <__assert_fail@plt+0x1a8>
   11460:	b	114d8 <__assert_fail@plt+0x210>
   11464:	ldr	r2, [r5, #4]
   11468:	cmp	r2, r4
   1146c:	blt	114d8 <__assert_fail@plt+0x210>
   11470:	ldr	r3, [r5, #12]
   11474:	mov	r1, r4
   11478:	add	r0, sp, #52	; 0x34
   1147c:	bl	121bc <__assert_fail@plt+0xef4>
   11480:	add	r0, sp, #52	; 0x34
   11484:	bl	124cc <__assert_fail@plt+0x1204>
   11488:	ldr	r3, [sp, #60]	; 0x3c
   1148c:	cmp	r3, #0
   11490:	bne	114ac <__assert_fail@plt+0x1e4>
   11494:	ldrh	r3, [sp, #70]	; 0x46
   11498:	rev16	r3, r3
   1149c:	uxth	r3, r3
   114a0:	add	r3, r3, #1
   114a4:	rev16	r3, r3
   114a8:	strh	r3, [sp, #70]	; 0x46
   114ac:	ldr	r3, [r6, #24]
   114b0:	add	r4, r4, #1
   114b4:	cmp	r3, #0
   114b8:	beq	11464 <__assert_fail@plt+0x19c>
   114bc:	mov	r0, #0
   114c0:	bl	1119c <exit@plt>
   114c4:	ldr	r2, [pc, #92]	; 11528 <__assert_fail@plt+0x260>
   114c8:	mov	r1, #0
   114cc:	mov	r0, #1
   114d0:	bl	11124 <error@plt>
   114d4:	b	1135c <__assert_fail@plt+0x94>
   114d8:	mov	r0, #1
   114dc:	bl	1119c <exit@plt>
   114e0:	ldr	r2, [pc, #64]	; 11528 <__assert_fail@plt+0x260>
   114e4:	mov	r1, #0
   114e8:	mov	r0, #1
   114ec:	bl	11124 <error@plt>
   114f0:	b	1139c <__assert_fail@plt+0xd4>
   114f4:			; <UNDEFINED> instruction: 0x0001a4bc
   114f8:	andeq	fp, r2, r0, ror r3
   114fc:	andeq	fp, r2, r8, lsr r3
   11500:	andeq	r9, r1, ip, ror #14
   11504:	andeq	fp, r2, ip, lsr #2
   11508:	andeq	fp, r2, ip, lsr #5
   1150c:	andeq	r9, r1, r4, lsl #15
   11510:	andeq	fp, r2, r4, lsr r1
   11514:	andeq	fp, r2, r0, lsl #6
   11518:	andeq	fp, r2, r4, lsl r1
   1151c:	andeq	fp, r2, r0, asr #6
   11520:	andeq	r9, r1, r0, lsr #15
   11524:	andeq	fp, r2, ip, lsr r3
   11528:	muleq	r1, r0, r7
   1152c:	mov	fp, #0
   11530:	mov	lr, #0
   11534:	pop	{r1}		; (ldr r1, [sp], #4)
   11538:	mov	r2, sp
   1153c:	push	{r2}		; (str r2, [sp, #-4]!)
   11540:	push	{r0}		; (str r0, [sp, #-4]!)
   11544:	ldr	ip, [pc, #16]	; 1155c <__assert_fail@plt+0x294>
   11548:	push	{ip}		; (str ip, [sp, #-4]!)
   1154c:	ldr	r0, [pc, #12]	; 11560 <__assert_fail@plt+0x298>
   11550:	ldr	r3, [pc, #12]	; 11564 <__assert_fail@plt+0x29c>
   11554:	bl	11148 <__libc_start_main@plt>
   11558:	bl	112bc <abort@plt>
   1155c:	muleq	r1, ip, r4
   11560:	ldrdeq	r1, [r1], -r8
   11564:	andeq	r9, r1, ip, lsr r4
   11568:	ldr	r3, [pc, #20]	; 11584 <__assert_fail@plt+0x2bc>
   1156c:	ldr	r2, [pc, #20]	; 11588 <__assert_fail@plt+0x2c0>
   11570:	add	r3, pc, r3
   11574:	ldr	r2, [r3, r2]
   11578:	cmp	r2, #0
   1157c:	bxeq	lr
   11580:	b	1116c <__gmon_start__@plt>
   11584:	andeq	r9, r1, r8, lsl #21
   11588:	andeq	r0, r0, r8, lsl #2
   1158c:	ldr	r3, [pc, #28]	; 115b0 <__assert_fail@plt+0x2e8>
   11590:	ldr	r0, [pc, #28]	; 115b4 <__assert_fail@plt+0x2ec>
   11594:	sub	r3, r3, r0
   11598:	cmp	r3, #6
   1159c:	bxls	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0x2f0>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	muleq	r2, r7, r2
   115b4:	muleq	r2, r4, r2
   115b8:	andeq	r0, r0, r0
   115bc:	ldr	r1, [pc, #36]	; 115e8 <__assert_fail@plt+0x320>
   115c0:	ldr	r0, [pc, #36]	; 115ec <__assert_fail@plt+0x324>
   115c4:	sub	r1, r1, r0
   115c8:	asr	r1, r1, #2
   115cc:	add	r1, r1, r1, lsr #31
   115d0:	asrs	r1, r1, #1
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0x328>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	muleq	r2, r4, r2
   115ec:	muleq	r2, r4, r2
   115f0:	andeq	r0, r0, r0
   115f4:	push	{r4, lr}
   115f8:	ldr	r4, [pc, #24]	; 11618 <__assert_fail@plt+0x350>
   115fc:	ldrb	r3, [r4]
   11600:	cmp	r3, #0
   11604:	popne	{r4, pc}
   11608:	bl	1158c <__assert_fail@plt+0x2c4>
   1160c:	mov	r3, #1
   11610:	strb	r3, [r4]
   11614:	pop	{r4, pc}
   11618:	andeq	fp, r2, r8, lsr #5
   1161c:	ldr	r0, [pc, #40]	; 1164c <__assert_fail@plt+0x384>
   11620:	ldr	r3, [r0]
   11624:	cmp	r3, #0
   11628:	bne	11630 <__assert_fail@plt+0x368>
   1162c:	b	115bc <__assert_fail@plt+0x2f4>
   11630:	ldr	r3, [pc, #24]	; 11650 <__assert_fail@plt+0x388>
   11634:	cmp	r3, #0
   11638:	beq	1162c <__assert_fail@plt+0x364>
   1163c:	push	{r4, lr}
   11640:	blx	r3
   11644:	pop	{r4, lr}
   11648:	b	115bc <__assert_fail@plt+0x2f4>
   1164c:	andeq	sl, r2, ip, lsl #30
	...
   11658:	cmp	r0, #109	; 0x6d
   1165c:	push	{r4, r5, r6, r7, r8, lr}
   11660:	mov	r5, r1
   11664:	sub	sp, sp, #8
   11668:	beq	1185c <__assert_fail@plt+0x594>
   1166c:	mov	r4, r0
   11670:	mov	r6, r2
   11674:	ble	116a8 <__assert_fail@plt+0x3e0>
   11678:	cmp	r0, #116	; 0x74
   1167c:	beq	11750 <__assert_fail@plt+0x488>
   11680:	ble	11800 <__assert_fail@plt+0x538>
   11684:	cmp	r0, #256	; 0x100
   11688:	beq	11798 <__assert_fail@plt+0x4d0>
   1168c:	ldr	r3, [pc, #892]	; 11a10 <__assert_fail@plt+0x748>
   11690:	cmp	r0, r3
   11694:	beq	11904 <__assert_fail@plt+0x63c>
   11698:	cmp	r0, #119	; 0x77
   1169c:	beq	11940 <__assert_fail@plt+0x678>
   116a0:	mov	r4, #7
   116a4:	b	11744 <__assert_fail@plt+0x47c>
   116a8:	cmp	r0, #77	; 0x4d
   116ac:	beq	11988 <__assert_fail@plt+0x6c0>
   116b0:	ble	11724 <__assert_fail@plt+0x45c>
   116b4:	cmp	r0, #102	; 0x66
   116b8:	beq	117ac <__assert_fail@plt+0x4e4>
   116bc:	cmp	r0, #103	; 0x67
   116c0:	bne	116a0 <__assert_fail@plt+0x3d8>
   116c4:	ldr	r6, [pc, #840]	; 11a14 <__assert_fail@plt+0x74c>
   116c8:	ldr	r7, [r6]
   116cc:	cmp	r7, #0
   116d0:	beq	119fc <__assert_fail@plt+0x734>
   116d4:	mov	r0, r7
   116d8:	bl	111a8 <strlen@plt>
   116dc:	mov	r4, #0
   116e0:	mov	r8, r0
   116e4:	mov	r0, r5
   116e8:	bl	111a8 <strlen@plt>
   116ec:	add	r1, r8, r0
   116f0:	add	r1, r1, #3
   116f4:	mov	r0, r7
   116f8:	bl	175d0 <argp_parse@@Base+0x1484>
   116fc:	mov	r3, #44	; 0x2c
   11700:	mov	r1, r5
   11704:	str	r0, [r6]
   11708:	strb	r3, [r0, r8]
   1170c:	ldr	r0, [r6]
   11710:	add	r0, r0, r8
   11714:	strb	r4, [r0, #1]
   11718:	ldr	r0, [r6]
   1171c:	bl	1110c <strcat@plt>
   11720:	b	11744 <__assert_fail@plt+0x47c>
   11724:	cmp	r0, #0
   11728:	beq	11924 <__assert_fail@plt+0x65c>
   1172c:	cmp	r0, #73	; 0x49
   11730:	bne	116a0 <__assert_fail@plt+0x3d8>
   11734:	ldr	r3, [pc, #728]	; 11a14 <__assert_fail@plt+0x74c>
   11738:	mov	r4, #0
   1173c:	mov	r2, #1
   11740:	str	r2, [r3, #4]
   11744:	mov	r0, r4
   11748:	add	sp, sp, #8
   1174c:	pop	{r4, r5, r6, r7, r8, pc}
   11750:	mov	r2, #0
   11754:	add	r1, sp, #4
   11758:	mov	r0, r5
   1175c:	bl	11010 <strtol@plt>
   11760:	ldr	r2, [pc, #688]	; 11a18 <__assert_fail@plt+0x750>
   11764:	ldr	r3, [sp, #4]
   11768:	str	r0, [r2, #16]
   1176c:	ldrb	r3, [r3]
   11770:	cmp	r0, #255	; 0xff
   11774:	cmpls	r3, #0
   11778:	beq	117f0 <__assert_fail@plt+0x528>
   1177c:	mov	r3, r5
   11780:	ldr	r2, [pc, #660]	; 11a1c <__assert_fail@plt+0x754>
   11784:	mov	r1, #0
   11788:	mov	r0, #1
   1178c:	bl	11124 <error@plt>
   11790:	mov	r4, #0
   11794:	b	11744 <__assert_fail@plt+0x47c>
   11798:	ldr	r3, [pc, #628]	; 11a14 <__assert_fail@plt+0x74c>
   1179c:	mov	r2, #1
   117a0:	mov	r4, #0
   117a4:	str	r2, [r3, #8]
   117a8:	b	11744 <__assert_fail@plt+0x47c>
   117ac:	mov	r2, #0
   117b0:	add	r1, sp, #4
   117b4:	mov	r0, r5
   117b8:	bl	11010 <strtol@plt>
   117bc:	ldr	r1, [pc, #596]	; 11a18 <__assert_fail@plt+0x750>
   117c0:	ldr	r2, [sp, #4]
   117c4:	str	r0, [r1]
   117c8:	ldrb	r2, [r2]
   117cc:	sub	r3, r0, #1
   117d0:	cmp	r3, #254	; 0xfe
   117d4:	cmpls	r2, #0
   117d8:	beq	117f0 <__assert_fail@plt+0x528>
   117dc:	mov	r3, r5
   117e0:	ldr	r2, [pc, #568]	; 11a20 <__assert_fail@plt+0x758>
   117e4:	mov	r1, #0
   117e8:	mov	r0, #1
   117ec:	bl	11124 <error@plt>
   117f0:	mov	r4, #0
   117f4:	mov	r0, r4
   117f8:	add	sp, sp, #8
   117fc:	pop	{r4, r5, r6, r7, r8, pc}
   11800:	cmp	r0, #112	; 0x70
   11804:	beq	118a8 <__assert_fail@plt+0x5e0>
   11808:	cmp	r0, #113	; 0x71
   1180c:	bne	116a0 <__assert_fail@plt+0x3d8>
   11810:	mov	r2, #10
   11814:	add	r1, sp, #4
   11818:	mov	r0, r5
   1181c:	bl	11010 <strtol@plt>
   11820:	ldr	r3, [sp, #4]
   11824:	ldr	r4, [pc, #492]	; 11a18 <__assert_fail@plt+0x750>
   11828:	ldrb	r2, [r3]
   1182c:	cmp	r2, #0
   11830:	str	r0, [r4, #12]
   11834:	bne	119d0 <__assert_fail@plt+0x708>
   11838:	sub	r0, r0, #1
   1183c:	cmp	r0, #9
   11840:	bls	117f0 <__assert_fail@plt+0x528>
   11844:	ldr	r2, [pc, #472]	; 11a24 <__assert_fail@plt+0x75c>
   11848:	mov	r1, #0
   1184c:	mov	r0, #1
   11850:	bl	11124 <error@plt>
   11854:	mov	r4, #0
   11858:	b	11744 <__assert_fail@plt+0x47c>
   1185c:	mov	r2, #0
   11860:	add	r1, sp, #4
   11864:	mov	r0, r5
   11868:	bl	11010 <strtol@plt>
   1186c:	ldr	r1, [pc, #420]	; 11a18 <__assert_fail@plt+0x750>
   11870:	ldr	r2, [sp, #4]
   11874:	str	r0, [r1, #4]
   11878:	ldrb	r2, [r2]
   1187c:	sub	r3, r0, #1
   11880:	cmp	r3, #254	; 0xfe
   11884:	cmpls	r2, #0
   11888:	beq	117f0 <__assert_fail@plt+0x528>
   1188c:	mov	r3, r5
   11890:	ldr	r2, [pc, #400]	; 11a28 <__assert_fail@plt+0x760>
   11894:	mov	r1, #0
   11898:	mov	r0, #1
   1189c:	bl	11124 <error@plt>
   118a0:	mov	r4, #0
   118a4:	b	11744 <__assert_fail@plt+0x47c>
   118a8:	mov	r2, #0
   118ac:	add	r1, sp, #4
   118b0:	mov	r0, r5
   118b4:	bl	11010 <strtol@plt>
   118b8:	ldr	r1, [pc, #344]	; 11a18 <__assert_fail@plt+0x750>
   118bc:	ldr	r2, [sp, #4]
   118c0:	sub	r3, r0, #1
   118c4:	str	r0, [r1, #8]
   118c8:	ldrb	r2, [r2]
   118cc:	cmp	r3, #65536	; 0x10000
   118d0:	movcc	r3, #0
   118d4:	movcs	r3, #1
   118d8:	cmp	r2, #0
   118dc:	orrne	r3, r3, #1
   118e0:	cmp	r3, #0
   118e4:	beq	117f0 <__assert_fail@plt+0x528>
   118e8:	mov	r3, r5
   118ec:	ldr	r2, [pc, #312]	; 11a2c <__assert_fail@plt+0x764>
   118f0:	mov	r1, #0
   118f4:	mov	r0, #1
   118f8:	bl	11124 <error@plt>
   118fc:	mov	r4, #0
   11900:	b	11744 <__assert_fail@plt+0x47c>
   11904:	ldr	r3, [pc, #264]	; 11a14 <__assert_fail@plt+0x74c>
   11908:	ldrb	r4, [r3, #12]
   1190c:	cmp	r4, #0
   11910:	bne	117f0 <__assert_fail@plt+0x528>
   11914:	mov	r0, r2
   11918:	ldr	r1, [pc, #272]	; 11a30 <__assert_fail@plt+0x768>
   1191c:	bl	15aa8 <argp_error@@Base>
   11920:	b	11744 <__assert_fail@plt+0x47c>
   11924:	ldr	r6, [pc, #232]	; 11a14 <__assert_fail@plt+0x74c>
   11928:	mov	r3, #1
   1192c:	mov	r0, r1
   11930:	strb	r3, [r6, #12]
   11934:	bl	17ac0 <argp_parse@@Base+0x1974>
   11938:	str	r0, [r6, #16]
   1193c:	b	11744 <__assert_fail@plt+0x47c>
   11940:	mov	r2, #0
   11944:	add	r1, sp, #4
   11948:	mov	r0, r5
   1194c:	bl	11010 <strtol@plt>
   11950:	ldr	r2, [pc, #192]	; 11a18 <__assert_fail@plt+0x750>
   11954:	ldr	r3, [sp, #4]
   11958:	str	r0, [r2, #20]
   1195c:	ldrb	r3, [r3]
   11960:	cmp	r0, #60	; 0x3c
   11964:	cmpls	r3, #0
   11968:	beq	117f0 <__assert_fail@plt+0x528>
   1196c:	mov	r3, r5
   11970:	ldr	r2, [pc, #188]	; 11a34 <__assert_fail@plt+0x76c>
   11974:	mov	r1, #0
   11978:	mov	r0, #1
   1197c:	bl	11124 <error@plt>
   11980:	mov	r4, #0
   11984:	b	11744 <__assert_fail@plt+0x47c>
   11988:	ldr	r1, [pc, #168]	; 11a38 <__assert_fail@plt+0x770>
   1198c:	mov	r0, r5
   11990:	bl	11004 <strcmp@plt>
   11994:	subs	r4, r0, #0
   11998:	beq	119c0 <__assert_fail@plt+0x6f8>
   1199c:	mov	r0, r5
   119a0:	ldr	r1, [pc, #148]	; 11a3c <__assert_fail@plt+0x774>
   119a4:	bl	11004 <strcmp@plt>
   119a8:	cmp	r0, #0
   119ac:	bne	119e8 <__assert_fail@plt+0x720>
   119b0:	ldr	r3, [pc, #92]	; 11a14 <__assert_fail@plt+0x74c>
   119b4:	mov	r4, r0
   119b8:	str	r0, [r3, #4]
   119bc:	b	11744 <__assert_fail@plt+0x47c>
   119c0:	ldr	r3, [pc, #76]	; 11a14 <__assert_fail@plt+0x74c>
   119c4:	mov	r2, #1
   119c8:	str	r2, [r3, #4]
   119cc:	b	11744 <__assert_fail@plt+0x47c>
   119d0:	mov	r0, r6
   119d4:	mov	r2, r5
   119d8:	ldr	r1, [pc, #96]	; 11a40 <__assert_fail@plt+0x778>
   119dc:	bl	15aa8 <argp_error@@Base>
   119e0:	ldr	r0, [r4, #12]
   119e4:	b	11838 <__assert_fail@plt+0x570>
   119e8:	mov	r0, r6
   119ec:	ldr	r1, [pc, #80]	; 11a44 <__assert_fail@plt+0x77c>
   119f0:	bl	15aa8 <argp_error@@Base>
   119f4:	mov	r4, #0
   119f8:	b	11744 <__assert_fail@plt+0x47c>
   119fc:	mov	r0, r1
   11a00:	bl	17ac0 <argp_parse@@Base+0x1974>
   11a04:	mov	r4, r7
   11a08:	str	r0, [r6]
   11a0c:	b	11744 <__assert_fail@plt+0x47c>
   11a10:	tsteq	r0, r4
   11a14:	andeq	fp, r2, ip, lsr #5
   11a18:	andeq	fp, r2, r4, lsl r1
   11a1c:	andeq	r9, r1, r4, ror #11
   11a20:	andeq	r9, r1, r8, asr #10
   11a24:			; <UNDEFINED> instruction: 0x000195b8
   11a28:	andeq	r9, r1, r4, ror #10
   11a2c:	andeq	r9, r1, ip, ror r5
   11a30:	andeq	r9, r1, r8, lsr r6
   11a34:	andeq	r9, r1, r8, lsl r6
   11a38:	strdeq	r9, [r1], -ip
   11a3c:	andeq	r9, r1, r4, lsl #12
   11a40:	muleq	r1, r8, r5
   11a44:	andeq	r9, r1, r8, lsl #12
   11a48:	push	{r4, lr}
   11a4c:	mov	r2, #2
   11a50:	mov	r1, #4
   11a54:	mov	r4, r0
   11a58:	bl	110c4 <gethostbyaddr@plt>
   11a5c:	cmp	r0, #0
   11a60:	beq	11a6c <__assert_fail@plt+0x7a4>
   11a64:	ldr	r0, [r0]
   11a68:	pop	{r4, pc}
   11a6c:	ldr	r0, [r4]
   11a70:	pop	{r4, lr}
   11a74:	b	110a0 <inet_ntoa@plt>
   11a78:	sub	sp, sp, #16
   11a7c:	push	{r4, r5, r6, r7, r8, lr}
   11a80:	sub	sp, sp, #8
   11a84:	add	ip, sp, #36	; 0x24
   11a88:	subs	r4, r0, #0
   11a8c:	stm	ip, {r1, r2, r3}
   11a90:	ldr	lr, [sp, #52]	; 0x34
   11a94:	beq	11d00 <__assert_fail@plt+0xa38>
   11a98:	ldr	r5, [pc, #628]	; 11d14 <__assert_fail@plt+0xa4c>
   11a9c:	ldm	ip, {r0, r1, r2, r3}
   11aa0:	add	ip, r4, #16
   11aa4:	ldr	r7, [r5]
   11aa8:	mov	r6, #0
   11aac:	cmp	lr, #0
   11ab0:	str	lr, [r4, #8]
   11ab4:	add	r8, r4, #48	; 0x30
   11ab8:	stm	ip, {r0, r1, r2, r3}
   11abc:	str	r7, [r4, #48]	; 0x30
   11ac0:	str	r6, [r4, #12]
   11ac4:	beq	11b24 <__assert_fail@plt+0x85c>
   11ac8:	cmp	lr, #1
   11acc:	bls	11b6c <__assert_fail@plt+0x8a4>
   11ad0:	ldr	r6, [r4]
   11ad4:	ldr	r3, [r5, #16]
   11ad8:	cmp	r3, #0
   11adc:	blt	11b04 <__assert_fail@plt+0x83c>
   11ae0:	mov	r3, #4
   11ae4:	str	r3, [sp]
   11ae8:	mov	r2, #1
   11aec:	ldr	r3, [pc, #548]	; 11d18 <__assert_fail@plt+0xa50>
   11af0:	mov	r1, #0
   11af4:	mov	r0, r6
   11af8:	bl	1101c <setsockopt@plt>
   11afc:	cmp	r0, #0
   11b00:	blt	11c0c <__assert_fail@plt+0x944>
   11b04:	ldr	r3, [pc, #528]	; 11d1c <__assert_fail@plt+0xa54>
   11b08:	ldr	r3, [r3, #20]
   11b0c:	cmp	r3, #0
   11b10:	bne	11bcc <__assert_fail@plt+0x904>
   11b14:	add	sp, sp, #8
   11b18:	pop	{r4, r5, r6, r7, r8, lr}
   11b1c:	add	sp, sp, #16
   11b20:	bx	lr
   11b24:	mov	r1, #2
   11b28:	mov	r2, lr
   11b2c:	mov	r0, r1
   11b30:	bl	112a4 <socket@plt>
   11b34:	cmp	r0, r6
   11b38:	str	r0, [r4, #4]
   11b3c:	blt	11c38 <__assert_fail@plt+0x970>
   11b40:	mov	r3, #4
   11b44:	str	r3, [sp]
   11b48:	mov	r2, #2
   11b4c:	mov	r3, r8
   11b50:	mov	r1, #0
   11b54:	bl	1101c <setsockopt@plt>
   11b58:	cmp	r0, #0
   11b5c:	blt	11c54 <__assert_fail@plt+0x98c>
   11b60:	ldr	r3, [r4, #8]
   11b64:	cmp	r3, #1
   11b68:	bhi	11ad0 <__assert_fail@plt+0x808>
   11b6c:	ldr	r0, [pc, #428]	; 11d20 <__assert_fail@plt+0xa58>
   11b70:	bl	11034 <getprotobyname@plt>
   11b74:	subs	r6, r0, #0
   11b78:	beq	11c24 <__assert_fail@plt+0x95c>
   11b7c:	ldr	r2, [r6, #8]
   11b80:	mov	r1, #3
   11b84:	mov	r0, #2
   11b88:	bl	112a4 <socket@plt>
   11b8c:	cmp	r0, #0
   11b90:	str	r0, [r4]
   11b94:	blt	11c6c <__assert_fail@plt+0x9a4>
   11b98:	mov	r2, #4
   11b9c:	str	r2, [sp]
   11ba0:	mov	r3, r8
   11ba4:	mov	r2, #2
   11ba8:	mov	r1, #0
   11bac:	bl	1101c <setsockopt@plt>
   11bb0:	cmp	r0, #0
   11bb4:	blt	11c98 <__assert_fail@plt+0x9d0>
   11bb8:	ldr	r3, [r4, #8]
   11bbc:	cmp	r3, #0
   11bc0:	ldr	r6, [r4, #4]
   11bc4:	beq	11ad4 <__assert_fail@plt+0x80c>
   11bc8:	b	11ad0 <__assert_fail@plt+0x808>
   11bcc:	str	r3, [sp]
   11bd0:	mov	r0, r6
   11bd4:	ldr	r3, [pc, #328]	; 11d24 <__assert_fail@plt+0xa5c>
   11bd8:	mov	r2, #4
   11bdc:	mov	r1, #0
   11be0:	bl	1101c <setsockopt@plt>
   11be4:	cmp	r0, #0
   11be8:	bge	11b14 <__assert_fail@plt+0x84c>
   11bec:	bl	111cc <__errno_location@plt>
   11bf0:	ldr	r2, [pc, #304]	; 11d28 <__assert_fail@plt+0xa60>
   11bf4:	ldr	r1, [r0]
   11bf8:	mov	r0, #0
   11bfc:	add	sp, sp, #8
   11c00:	pop	{r4, r5, r6, r7, r8, lr}
   11c04:	add	sp, sp, #16
   11c08:	b	11124 <error@plt>
   11c0c:	bl	111cc <__errno_location@plt>
   11c10:	ldr	r2, [pc, #276]	; 11d2c <__assert_fail@plt+0xa64>
   11c14:	ldr	r1, [r0]
   11c18:	mov	r0, #0
   11c1c:	bl	11124 <error@plt>
   11c20:	b	11b04 <__assert_fail@plt+0x83c>
   11c24:	mov	r1, r6
   11c28:	ldr	r2, [pc, #256]	; 11d30 <__assert_fail@plt+0xa68>
   11c2c:	mov	r0, #1
   11c30:	bl	11124 <error@plt>
   11c34:	b	11bb8 <__assert_fail@plt+0x8f0>
   11c38:	bl	111cc <__errno_location@plt>
   11c3c:	ldr	r2, [pc, #240]	; 11d34 <__assert_fail@plt+0xa6c>
   11c40:	ldr	r1, [r0]
   11c44:	mov	r0, #1
   11c48:	bl	11124 <error@plt>
   11c4c:	ldr	r0, [r4, #4]
   11c50:	b	11b40 <__assert_fail@plt+0x878>
   11c54:	bl	111cc <__errno_location@plt>
   11c58:	ldr	r2, [pc, #216]	; 11d38 <__assert_fail@plt+0xa70>
   11c5c:	ldr	r1, [r0]
   11c60:	mov	r0, #1
   11c64:	bl	11124 <error@plt>
   11c68:	b	11b60 <__assert_fail@plt+0x898>
   11c6c:	bl	111cc <__errno_location@plt>
   11c70:	ldr	r1, [r0]
   11c74:	mov	r7, r0
   11c78:	cmp	r1, #13
   11c7c:	cmpne	r1, #1
   11c80:	beq	11cb4 <__assert_fail@plt+0x9ec>
   11c84:	mov	r0, #1
   11c88:	ldr	r2, [pc, #164]	; 11d34 <__assert_fail@plt+0xa6c>
   11c8c:	bl	11124 <error@plt>
   11c90:	ldr	r0, [r4]
   11c94:	b	11b98 <__assert_fail@plt+0x8d0>
   11c98:	bl	111cc <__errno_location@plt>
   11c9c:	ldr	r2, [pc, #148]	; 11d38 <__assert_fail@plt+0xa70>
   11ca0:	ldr	r1, [r0]
   11ca4:	mov	r0, #1
   11ca8:	bl	11124 <error@plt>
   11cac:	ldr	r3, [r4, #8]
   11cb0:	b	11bbc <__assert_fail@plt+0x8f4>
   11cb4:	mov	r3, #0
   11cb8:	mov	r1, #2
   11cbc:	str	r3, [r0]
   11cc0:	mov	r0, r1
   11cc4:	ldr	r2, [r6, #8]
   11cc8:	bl	112a4 <socket@plt>
   11ccc:	ldr	r3, [r4, #12]
   11cd0:	add	r3, r3, #1
   11cd4:	str	r3, [r4, #12]
   11cd8:	str	r0, [r4]
   11cdc:	ldr	r3, [r7]
   11ce0:	cmp	r3, #93	; 0x5d
   11ce4:	moveq	r3, #1
   11ce8:	streq	r3, [r7]
   11cec:	ldreq	r0, [r4]
   11cf0:	cmp	r0, #0
   11cf4:	bge	11b98 <__assert_fail@plt+0x8d0>
   11cf8:	ldr	r1, [r7]
   11cfc:	b	11c84 <__assert_fail@plt+0x9bc>
   11d00:	ldr	r3, [pc, #52]	; 11d3c <__assert_fail@plt+0xa74>
   11d04:	ldr	r2, [pc, #52]	; 11d40 <__assert_fail@plt+0xa78>
   11d08:	ldr	r1, [pc, #52]	; 11d44 <__assert_fail@plt+0xa7c>
   11d0c:	ldr	r0, [pc, #52]	; 11d48 <__assert_fail@plt+0xa80>
   11d10:	bl	112c8 <__assert_fail@plt>
   11d14:	andeq	fp, r2, r4, lsl r1
   11d18:	andeq	fp, r2, r4, lsr #2
   11d1c:	andeq	fp, r2, ip, lsr #5
   11d20:	strdeq	r9, [r1], -ip
   11d24:	andeq	fp, r2, r0, lsl r3
   11d28:			; <UNDEFINED> instruction: 0x000196b0
   11d2c:	muleq	r1, ip, r6
   11d30:	andeq	r9, r1, r8, ror r6
   11d34:	andeq	r9, r1, r4, ror #12
   11d38:	andeq	r9, r1, ip, ror #12
   11d3c:	andeq	r9, r1, ip, lsr #9
   11d40:	ldrdeq	r0, [r0], -fp
   11d44:	andeq	r9, r1, r0, asr r6
   11d48:	andeq	r9, r1, r0, ror #12
   11d4c:	cmp	r0, #0
   11d50:	beq	11d68 <__assert_fail@plt+0xaa0>
   11d54:	cmp	r1, #1024	; 0x400
   11d58:	strhcs	r1, [r0, #18]
   11d5c:	ldrcc	r3, [pc, #28]	; 11d80 <__assert_fail@plt+0xab8>
   11d60:	strhcc	r3, [r0, #18]
   11d64:	bx	lr
   11d68:	push	{r4, lr}
   11d6c:	ldr	r3, [pc, #16]	; 11d84 <__assert_fail@plt+0xabc>
   11d70:	ldr	r2, [pc, #16]	; 11d88 <__assert_fail@plt+0xac0>
   11d74:	ldr	r1, [pc, #16]	; 11d8c <__assert_fail@plt+0xac4>
   11d78:	ldr	r0, [pc, #16]	; 11d90 <__assert_fail@plt+0xac8>
   11d7c:	bl	112c8 <__assert_fail@plt>
   11d80:			; <UNDEFINED> instruction: 0xffff829a
   11d84:			; <UNDEFINED> instruction: 0x000194b8
   11d88:	andeq	r0, r0, sl, lsr #4
   11d8c:	andeq	r9, r1, r0, asr r6
   11d90:	andeq	r9, r1, r0, ror #12
   11d94:	push	{r4, r5, r6, lr}
   11d98:	subs	r4, r0, #0
   11d9c:	sub	sp, sp, #160	; 0xa0
   11da0:	beq	11fb4 <__assert_fail@plt+0xcec>
   11da4:	mov	r3, r4
   11da8:	mov	r5, r2
   11dac:	ldr	r0, [r3], #32
   11db0:	add	r2, sp, #20
   11db4:	str	r3, [sp]
   11db8:	str	r2, [sp, #4]
   11dbc:	mov	ip, #16
   11dc0:	mov	r6, r1
   11dc4:	mov	r3, #0
   11dc8:	add	r1, sp, #24
   11dcc:	mov	r2, #136	; 0x88
   11dd0:	str	ip, [sp, #20]
   11dd4:	bl	110d0 <recvfrom@plt>
   11dd8:	cmp	r0, #0
   11ddc:	blt	11f78 <__assert_fail@plt+0xcb0>
   11de0:	add	r3, sp, #16
   11de4:	add	r2, sp, #12
   11de8:	add	r0, sp, #24
   11dec:	mov	r1, #136	; 0x88
   11df0:	bl	12788 <__assert_fail@plt+0x14c0>
   11df4:	ldr	r3, [sp, #16]
   11df8:	ldr	r0, [r4, #8]
   11dfc:	ldrb	r2, [r3]
   11e00:	cmp	r0, #0
   11e04:	str	r2, [r6]
   11e08:	ldrb	r2, [r3, #1]
   11e0c:	str	r2, [r5]
   11e10:	beq	11ebc <__assert_fail@plt+0xbf4>
   11e14:	cmp	r0, #1
   11e18:	bne	11eb0 <__assert_fail@plt+0xbe8>
   11e1c:	ldrb	r2, [r3]
   11e20:	and	r1, r2, #247	; 0xf7
   11e24:	cmp	r2, #0
   11e28:	cmpne	r1, #3
   11e2c:	movne	ip, #1
   11e30:	moveq	ip, #0
   11e34:	bne	11fa0 <__assert_fail@plt+0xcd8>
   11e38:	cmp	r2, #0
   11e3c:	bne	11f10 <__assert_fail@plt+0xc48>
   11e40:	ldrh	r2, [r3, #6]
   11e44:	ldr	r1, [pc, #380]	; 11fc8 <__assert_fail@plt+0xd00>
   11e48:	rev16	r2, r2
   11e4c:	ldr	r1, [r1]
   11e50:	uxth	r2, r2
   11e54:	cmp	r2, r1
   11e58:	bne	11fa0 <__assert_fail@plt+0xcd8>
   11e5c:	ldrh	r3, [r3, #4]
   11e60:	ldr	r2, [pc, #356]	; 11fcc <__assert_fail@plt+0xd04>
   11e64:	rev16	r3, r3
   11e68:	ldr	r2, [r2]
   11e6c:	uxth	r3, r3
   11e70:	cmp	r3, r2
   11e74:	beq	11e84 <__assert_fail@plt+0xbbc>
   11e78:	ldr	r3, [r4, #12]
   11e7c:	cmp	r3, #0
   11e80:	beq	11fa0 <__assert_fail@plt+0xcd8>
   11e84:	ldr	r2, [sp, #12]
   11e88:	ldr	r3, [pc, #320]	; 11fd0 <__assert_fail@plt+0xd08>
   11e8c:	ldr	r0, [r2, #12]
   11e90:	ldr	r3, [r3, #4]
   11e94:	cmp	r0, r3
   11e98:	movne	r0, ip
   11e9c:	orreq	r0, ip, #1
   11ea0:	ands	r0, r0, #255	; 0xff
   11ea4:	beq	11eb4 <__assert_fail@plt+0xbec>
   11ea8:	mov	r0, ip
   11eac:	b	11f64 <__assert_fail@plt+0xc9c>
   11eb0:	mov	r0, #0
   11eb4:	add	sp, sp, #160	; 0xa0
   11eb8:	pop	{r4, r5, r6, pc}
   11ebc:	ldrb	r1, [r3]
   11ec0:	and	r2, r1, #247	; 0xf7
   11ec4:	cmp	r2, #3
   11ec8:	bne	11fa0 <__assert_fail@plt+0xcd8>
   11ecc:	ldrb	r2, [r3, #8]
   11ed0:	ldrh	ip, [r4, #18]
   11ed4:	and	r2, r2, #15
   11ed8:	add	r2, r3, r2, lsl #2
   11edc:	ldrh	r2, [r2, #10]
   11ee0:	cmp	r2, ip
   11ee4:	bne	11fa0 <__assert_fail@plt+0xcd8>
   11ee8:	cmp	r1, #3
   11eec:	bne	11eb4 <__assert_fail@plt+0xbec>
   11ef0:	ldr	r2, [pc, #220]	; 11fd4 <__assert_fail@plt+0xd0c>
   11ef4:	mov	r1, #1
   11ef8:	str	r1, [r2, #24]
   11efc:	ldrb	r0, [r3, #1]
   11f00:	subs	r0, r0, #3
   11f04:	movne	r0, #1
   11f08:	add	sp, sp, #160	; 0xa0
   11f0c:	pop	{r4, r5, r6, pc}
   11f10:	cmp	r1, #3
   11f14:	sub	r0, r2, #3
   11f18:	clz	r0, r0
   11f1c:	lsr	r0, r0, #5
   11f20:	bne	11fac <__assert_fail@plt+0xce4>
   11f24:	ldrb	r1, [r3, #8]
   11f28:	add	r3, r3, #8
   11f2c:	ldr	lr, [pc, #152]	; 11fcc <__assert_fail@plt+0xd04>
   11f30:	and	r1, r1, #15
   11f34:	add	r3, r3, r1, lsl #2
   11f38:	ldr	r4, [lr]
   11f3c:	ldrh	r1, [r3, #4]
   11f40:	ldrh	lr, [r3, #6]
   11f44:	rev16	r3, r1
   11f48:	rev16	r1, lr
   11f4c:	uxth	r3, r3
   11f50:	cmp	r3, r4
   11f54:	uxth	r1, r1
   11f58:	bne	11fa0 <__assert_fail@plt+0xcd8>
   11f5c:	cmp	r2, #11
   11f60:	beq	11f90 <__assert_fail@plt+0xcc8>
   11f64:	ldr	r3, [pc, #104]	; 11fd4 <__assert_fail@plt+0xd0c>
   11f68:	mov	r2, #1
   11f6c:	str	r2, [r3, #24]
   11f70:	add	sp, sp, #160	; 0xa0
   11f74:	pop	{r4, r5, r6, pc}
   11f78:	bl	111cc <__errno_location@plt>
   11f7c:	ldr	r2, [pc, #84]	; 11fd8 <__assert_fail@plt+0xd10>
   11f80:	ldr	r1, [r0]
   11f84:	mov	r0, #1
   11f88:	bl	11124 <error@plt>
   11f8c:	b	11de0 <__assert_fail@plt+0xb18>
   11f90:	ldr	r3, [pc, #48]	; 11fc8 <__assert_fail@plt+0xd00>
   11f94:	ldr	r3, [r3]
   11f98:	cmp	r1, r3
   11f9c:	beq	11e84 <__assert_fail@plt+0xbbc>
   11fa0:	mvn	r0, #0
   11fa4:	add	sp, sp, #160	; 0xa0
   11fa8:	pop	{r4, r5, r6, pc}
   11fac:	mov	ip, r0
   11fb0:	b	11e84 <__assert_fail@plt+0xbbc>
   11fb4:	ldr	r3, [pc, #32]	; 11fdc <__assert_fail@plt+0xd14>
   11fb8:	ldr	r2, [pc, #32]	; 11fe0 <__assert_fail@plt+0xd18>
   11fbc:	ldr	r1, [pc, #32]	; 11fe4 <__assert_fail@plt+0xd1c>
   11fc0:	ldr	r0, [pc, #32]	; 11fe8 <__assert_fail@plt+0xd20>
   11fc4:	bl	112c8 <__assert_fail@plt>
   11fc8:	andeq	fp, r2, ip, lsr r3
   11fcc:	andeq	fp, r2, r8, lsr r3
   11fd0:	andeq	fp, r2, r0, lsl #6
   11fd4:	andeq	fp, r2, ip, lsr #5
   11fd8:	andeq	r9, r1, r8, asr #13
   11fdc:	andeq	r9, r1, r4, asr #9
   11fe0:	andeq	r0, r0, r3, asr #4
   11fe4:	andeq	r9, r1, r0, asr r6
   11fe8:	andeq	r9, r1, r0, ror #12
   11fec:	push	{r4, r5, lr}
   11ff0:	subs	r4, r0, #0
   11ff4:	sub	sp, sp, #44	; 0x2c
   11ff8:	beq	12180 <__assert_fail@plt+0xeb8>
   11ffc:	ldr	r3, [r4, #8]
   12000:	cmp	r3, #0
   12004:	beq	120c8 <__assert_fail@plt+0xe00>
   12008:	cmp	r3, #1
   1200c:	bne	12130 <__assert_fail@plt+0xe68>
   12010:	add	r2, sp, #11
   12014:	mov	r3, #0
   12018:	strb	r3, [r2, #1]!
   1201c:	add	r3, r3, #1
   12020:	cmp	r3, #28
   12024:	bne	12018 <__assert_fail@plt+0xd50>
   12028:	ldr	r3, [r4, #12]
   1202c:	ldr	lr, [pc, #352]	; 12194 <__assert_fail@plt+0xecc>
   12030:	cmp	r3, #0
   12034:	add	r0, sp, #12
   12038:	ldrne	r3, [pc, #344]	; 12198 <__assert_fail@plt+0xed0>
   1203c:	ldr	ip, [lr]
   12040:	mov	r1, #28
   12044:	ldrne	r3, [r3, #4]
   12048:	add	ip, ip, #1
   1204c:	strne	r3, [sp, #24]
   12050:	ldr	r3, [pc, #324]	; 1219c <__assert_fail@plt+0xed4>
   12054:	str	ip, [lr]
   12058:	ldr	r2, [r3]
   1205c:	mov	r3, ip
   12060:	bl	127e4 <__assert_fail@plt+0x151c>
   12064:	subs	r5, r0, #0
   12068:	mvnne	r5, #0
   1206c:	bne	12134 <__assert_fail@plt+0xe6c>
   12070:	mov	r3, r4
   12074:	mov	r2, #16
   12078:	ldr	r0, [r3], #16
   1207c:	add	r1, sp, #12
   12080:	str	r3, [sp]
   12084:	str	r2, [sp, #4]
   12088:	mov	r3, r5
   1208c:	mov	r2, #28
   12090:	bl	11208 <sendto@plt>
   12094:	cmp	r0, #0
   12098:	blt	12160 <__assert_fail@plt+0xe98>
   1209c:	add	r0, r4, #52	; 0x34
   120a0:	mov	r1, #0
   120a4:	bl	11118 <gettimeofday@plt>
   120a8:	cmp	r0, #0
   120ac:	bge	12134 <__assert_fail@plt+0xe6c>
   120b0:	bl	111cc <__errno_location@plt>
   120b4:	ldr	r2, [pc, #228]	; 121a0 <__assert_fail@plt+0xed8>
   120b8:	ldr	r1, [r0]
   120bc:	mov	r0, #1
   120c0:	bl	11124 <error@plt>
   120c4:	b	12134 <__assert_fail@plt+0xe6c>
   120c8:	ldr	r2, [pc, #212]	; 121a4 <__assert_fail@plt+0xedc>
   120cc:	ldr	lr, [r4, #4]
   120d0:	add	r5, r4, #16
   120d4:	ldm	r2, {r0, r1, r2}
   120d8:	add	ip, sp, #12
   120dc:	str	r5, [sp]
   120e0:	mov	r5, #16
   120e4:	stmia	ip!, {r0, r1}
   120e8:	str	r5, [sp, #4]
   120ec:	mov	r0, lr
   120f0:	strb	r2, [ip]
   120f4:	add	r1, sp, #12
   120f8:	mov	r2, #9
   120fc:	bl	11208 <sendto@plt>
   12100:	cmp	r0, #0
   12104:	blt	12140 <__assert_fail@plt+0xe78>
   12108:	add	r0, r4, #52	; 0x34
   1210c:	mov	r1, #0
   12110:	bl	11118 <gettimeofday@plt>
   12114:	cmp	r0, #0
   12118:	bge	12130 <__assert_fail@plt+0xe68>
   1211c:	bl	111cc <__errno_location@plt>
   12120:	ldr	r2, [pc, #120]	; 121a0 <__assert_fail@plt+0xed8>
   12124:	ldr	r1, [r0]
   12128:	mov	r0, #1
   1212c:	bl	11124 <error@plt>
   12130:	mov	r5, #0
   12134:	mov	r0, r5
   12138:	add	sp, sp, #44	; 0x2c
   1213c:	pop	{r4, r5, pc}
   12140:	bl	111cc <__errno_location@plt>
   12144:	ldr	r1, [r0]
   12148:	cmp	r1, #104	; 0x68
   1214c:	beq	12108 <__assert_fail@plt+0xe40>
   12150:	ldr	r2, [pc, #80]	; 121a8 <__assert_fail@plt+0xee0>
   12154:	mov	r0, #1
   12158:	bl	11124 <error@plt>
   1215c:	b	12108 <__assert_fail@plt+0xe40>
   12160:	bl	111cc <__errno_location@plt>
   12164:	ldr	r1, [r0]
   12168:	cmp	r1, #104	; 0x68
   1216c:	beq	1209c <__assert_fail@plt+0xdd4>
   12170:	ldr	r2, [pc, #48]	; 121a8 <__assert_fail@plt+0xee0>
   12174:	mov	r0, #1
   12178:	bl	11124 <error@plt>
   1217c:	b	1209c <__assert_fail@plt+0xdd4>
   12180:	ldr	r3, [pc, #36]	; 121ac <__assert_fail@plt+0xee4>
   12184:	ldr	r2, [pc, #36]	; 121b0 <__assert_fail@plt+0xee8>
   12188:	ldr	r1, [pc, #36]	; 121b4 <__assert_fail@plt+0xeec>
   1218c:	ldr	r0, [pc, #36]	; 121b8 <__assert_fail@plt+0xef0>
   12190:	bl	112c8 <__assert_fail@plt>
   12194:	andeq	fp, r2, ip, lsr r3
   12198:	andeq	fp, r2, r0, lsl #6
   1219c:	andeq	fp, r2, r8, lsr r3
   121a0:	ldrdeq	r9, [r1], -ip
   121a4:	andeq	r9, r1, ip, ror #13
   121a8:	ldrdeq	r9, [r1], -r4
   121ac:	ldrdeq	r9, [r1], -r0
   121b0:	andeq	r0, r0, r5, lsr #5
   121b4:	andeq	r9, r1, r0, asr r6
   121b8:	andeq	r9, r1, r0, ror #12
   121bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121c0:	vpush	{d8}
   121c4:	mov	r4, r3
   121c8:	mov	r8, r0
   121cc:	ldr	r0, [pc, #684]	; 12480 <__assert_fail@plt+0x11b8>
   121d0:	sub	sp, sp, #180	; 0xb4
   121d4:	str	r3, [sp, #16]
   121d8:	bl	11028 <printf@plt>
   121dc:	cmp	r4, #0
   121e0:	ble	12330 <__assert_fail@plt+0x1068>
   121e4:	mov	r3, #0
   121e8:	mov	r4, r3
   121ec:	str	r3, [sp, #20]
   121f0:	bl	111cc <__errno_location@plt>
   121f4:	vldr	d8, [pc, #636]	; 12478 <__assert_fail@plt+0x11b0>
   121f8:	mov	r2, r4
   121fc:	mov	r9, r4
   12200:	add	r5, sp, #172	; 0xac
   12204:	mov	sl, r0
   12208:	cmp	r8, #0
   1220c:	beq	12430 <__assert_fail@plt+0x1168>
   12210:	ldr	r0, [r8]
   12214:	mov	r7, #1
   12218:	cmp	r0, #0
   1221c:	asr	r3, r0, #31
   12220:	add	r6, r0, #31
   12224:	lsr	r1, r3, #27
   12228:	add	r3, r0, r1
   1222c:	and	r3, r3, #31
   12230:	sub	r3, r3, r1
   12234:	movge	r6, r0
   12238:	lsl	r7, r7, r3
   1223c:	asr	r6, r6, #5
   12240:	add	fp, r0, #1
   12244:	add	r3, sp, #44	; 0x2c
   12248:	str	r4, [r3, #4]!
   1224c:	cmp	r3, r5
   12250:	bne	12248 <__assert_fail@plt+0xf80>
   12254:	add	r3, sp, #176	; 0xb0
   12258:	lsl	r6, r6, #2
   1225c:	add	r1, r3, r6
   12260:	ldr	r3, [pc, #540]	; 12484 <__assert_fail@plt+0x11bc>
   12264:	cmp	r2, #0
   12268:	str	r4, [sp, #44]	; 0x2c
   1226c:	ldr	r0, [r3, #20]
   12270:	ldr	r3, [r1, #-128]	; 0xffffff80
   12274:	str	r0, [sp, #40]	; 0x28
   12278:	orr	r3, r3, r7
   1227c:	str	r3, [r1, #-128]	; 0xffffff80
   12280:	beq	12344 <__assert_fail@plt+0x107c>
   12284:	mov	r3, #0
   12288:	add	r2, sp, #40	; 0x28
   1228c:	str	r4, [sl]
   12290:	mov	r0, fp
   12294:	str	r2, [sp]
   12298:	add	r1, sp, #48	; 0x30
   1229c:	mov	r2, r3
   122a0:	bl	110ac <select@plt>
   122a4:	ldr	r3, [sl]
   122a8:	mov	r1, #0
   122ac:	str	r3, [sp, #12]
   122b0:	mov	fp, r0
   122b4:	add	r0, sp, #32
   122b8:	bl	11118 <gettimeofday@plt>
   122bc:	ldr	r3, [sp, #36]	; 0x24
   122c0:	ldr	r0, [r8, #56]	; 0x38
   122c4:	ldr	r1, [sp, #32]
   122c8:	sub	r3, r3, r0
   122cc:	cmp	r3, #0
   122d0:	ldr	r0, [r8, #52]	; 0x34
   122d4:	str	r3, [sp, #36]	; 0x24
   122d8:	addlt	r3, r3, #999424	; 0xf4000
   122dc:	sub	r1, r1, r0
   122e0:	addlt	r3, r3, #576	; 0x240
   122e4:	sublt	r1, r1, #1
   122e8:	strlt	r3, [sp, #36]	; 0x24
   122ec:	cmp	fp, #0
   122f0:	str	r1, [sp, #32]
   122f4:	blt	12350 <__assert_fail@plt+0x1088>
   122f8:	beq	12370 <__assert_fail@plt+0x10a8>
   122fc:	add	r3, sp, #176	; 0xb0
   12300:	add	r6, r3, r6
   12304:	ldr	r3, [r6, #-128]	; 0xffffff80
   12308:	tst	r7, r3
   1230c:	bne	12388 <__assert_fail@plt+0x10c0>
   12310:	ldr	r3, [pc, #368]	; 12488 <__assert_fail@plt+0x11c0>
   12314:	ldr	r0, [r3]
   12318:	bl	11040 <fflush@plt>
   1231c:	mov	r2, r4
   12320:	ldr	r3, [sp, #16]
   12324:	add	r9, r9, #1
   12328:	cmp	r3, r9
   1232c:	bgt	12208 <__assert_fail@plt+0xf40>
   12330:	mov	r0, #10
   12334:	bl	111f0 <putchar@plt>
   12338:	add	sp, sp, #180	; 0xb4
   1233c:	vpop	{d8}
   12340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12344:	mov	r0, r8
   12348:	bl	11fec <__assert_fail@plt+0xd24>
   1234c:	b	12284 <__assert_fail@plt+0xfbc>
   12350:	ldr	r3, [sp, #12]
   12354:	cmp	r3, #4
   12358:	beq	12310 <__assert_fail@plt+0x1048>
   1235c:	ldr	r2, [pc, #296]	; 1248c <__assert_fail@plt+0x11c4>
   12360:	ldr	r1, [sl]
   12364:	mov	r0, #1
   12368:	bl	11124 <error@plt>
   1236c:	b	12310 <__assert_fail@plt+0x1048>
   12370:	ldr	r0, [pc, #280]	; 12490 <__assert_fail@plt+0x11c8>
   12374:	bl	11028 <printf@plt>
   12378:	ldr	r3, [pc, #264]	; 12488 <__assert_fail@plt+0x11c0>
   1237c:	ldr	r0, [r3]
   12380:	bl	11040 <fflush@plt>
   12384:	b	12310 <__assert_fail@plt+0x1048>
   12388:	add	r2, sp, #28
   1238c:	add	r1, sp, #24
   12390:	mov	r0, r8
   12394:	ldr	r7, [sp, #32]
   12398:	ldr	fp, [sp, #36]	; 0x24
   1239c:	bl	11d94 <__assert_fail@plt+0xacc>
   123a0:	subs	r6, r0, #0
   123a4:	sublt	r9, r9, #1
   123a8:	movlt	r2, #1
   123ac:	blt	12320 <__assert_fail@plt+0x1058>
   123b0:	cmp	r9, #0
   123b4:	beq	123c8 <__assert_fail@plt+0x1100>
   123b8:	ldr	r3, [r8, #36]	; 0x24
   123bc:	ldr	r2, [sp, #20]
   123c0:	cmp	r3, r2
   123c4:	beq	123ec <__assert_fail@plt+0x1124>
   123c8:	ldr	r0, [r8, #36]	; 0x24
   123cc:	bl	110a0 <inet_ntoa@plt>
   123d0:	mov	r1, r0
   123d4:	ldr	r0, [pc, #184]	; 12494 <__assert_fail@plt+0x11cc>
   123d8:	bl	11028 <printf@plt>
   123dc:	ldr	r3, [pc, #180]	; 12498 <__assert_fail@plt+0x11d0>
   123e0:	ldr	r3, [r3, #8]
   123e4:	cmp	r3, #0
   123e8:	bne	12440 <__assert_fail@plt+0x1178>
   123ec:	vmov	s15, fp
   123f0:	ldr	r0, [pc, #164]	; 1249c <__assert_fail@plt+0x11d4>
   123f4:	vcvt.f64.s32	d6, s15
   123f8:	vmov	s15, r7
   123fc:	vcvt.f64.s32	d7, s15
   12400:	vdiv.f64	d5, d6, d8
   12404:	vmla.f64	d5, d7, d8
   12408:	vmov	r2, r3, d5
   1240c:	bl	11028 <printf@plt>
   12410:	cmp	r6, #0
   12414:	beq	12424 <__assert_fail@plt+0x115c>
   12418:	ldr	r3, [sp, #24]
   1241c:	cmp	r3, #3
   12420:	beq	12458 <__assert_fail@plt+0x1190>
   12424:	ldr	r3, [r8, #36]	; 0x24
   12428:	str	r3, [sp, #20]
   1242c:	b	12310 <__assert_fail@plt+0x1048>
   12430:	mov	fp, r4
   12434:	mov	r7, r8
   12438:	mov	r6, r8
   1243c:	b	12244 <__assert_fail@plt+0xf7c>
   12440:	add	r0, r8, #36	; 0x24
   12444:	bl	11a48 <__assert_fail@plt+0x780>
   12448:	mov	r1, r0
   1244c:	ldr	r0, [pc, #76]	; 124a0 <__assert_fail@plt+0x11d8>
   12450:	bl	11028 <printf@plt>
   12454:	b	123ec <__assert_fail@plt+0x1124>
   12458:	ldr	r3, [sp, #28]
   1245c:	ldr	r2, [pc, #64]	; 124a4 <__assert_fail@plt+0x11dc>
   12460:	and	r3, r3, #15
   12464:	add	r3, r2, r3
   12468:	ldr	r0, [pc, #56]	; 124a8 <__assert_fail@plt+0x11e0>
   1246c:	ldrb	r1, [r3, #48]	; 0x30
   12470:	bl	11028 <printf@plt>
   12474:	b	12424 <__assert_fail@plt+0x115c>
   12478:	andeq	r0, r0, r0
   1247c:	addmi	r4, pc, r0
   12480:	strdeq	r9, [r1], -r8
   12484:	andeq	fp, r2, r4, lsl r1
   12488:	andeq	fp, r2, r4, lsr #5
   1248c:	andeq	r9, r1, r0, lsl #14
   12490:	andeq	r9, r1, r0, lsl r7
   12494:	andeq	r9, r1, r4, lsl r7
   12498:	andeq	fp, r2, ip, lsr #5
   1249c:	andeq	r9, r1, r4, lsr #14
   124a0:	andeq	r9, r1, ip, lsl r7
   124a4:	andeq	r9, r1, ip, lsr #9
   124a8:	andeq	r9, r1, r0, lsr r7
   124ac:	cmp	r0, #0
   124b0:	ldrne	r0, [r0, #4]
   124b4:	mvneq	r0, #0
   124b8:	bx	lr
   124bc:	cmp	r0, #0
   124c0:	ldrne	r0, [r0]
   124c4:	mvneq	r0, #0
   124c8:	bx	lr
   124cc:	subs	r3, r0, #0
   124d0:	push	{lr}		; (str lr, [sp, #-4]!)
   124d4:	sub	sp, sp, #12
   124d8:	beq	1253c <__assert_fail@plt+0x1274>
   124dc:	ldmib	r3, {r0, lr}
   124e0:	ldr	r2, [r3, #48]	; 0x30
   124e4:	ldr	ip, [r3]
   124e8:	cmp	lr, #0
   124ec:	add	r2, r2, #1
   124f0:	mov	r1, #4
   124f4:	str	r2, [r3, #48]	; 0x30
   124f8:	movne	r0, ip
   124fc:	str	r1, [sp]
   12500:	add	r3, r3, #48	; 0x30
   12504:	mov	r2, #2
   12508:	mov	r1, #0
   1250c:	bl	1101c <setsockopt@plt>
   12510:	cmp	r0, #0
   12514:	blt	12520 <__assert_fail@plt+0x1258>
   12518:	add	sp, sp, #12
   1251c:	pop	{pc}		; (ldr pc, [sp], #4)
   12520:	bl	111cc <__errno_location@plt>
   12524:	ldr	r2, [pc, #36]	; 12550 <__assert_fail@plt+0x1288>
   12528:	ldr	r1, [r0]
   1252c:	mov	r0, #1
   12530:	add	sp, sp, #12
   12534:	pop	{lr}		; (ldr lr, [sp], #4)
   12538:	b	11124 <error@plt>
   1253c:	ldr	r3, [pc, #16]	; 12554 <__assert_fail@plt+0x128c>
   12540:	mov	r2, #768	; 0x300
   12544:	ldr	r1, [pc, #12]	; 12558 <__assert_fail@plt+0x1290>
   12548:	ldr	r0, [pc, #12]	; 1255c <__assert_fail@plt+0x1294>
   1254c:	bl	112c8 <__assert_fail@plt>
   12550:	andeq	r9, r1, ip, ror #12
   12554:	strdeq	r9, [r1], -r0
   12558:	andeq	r9, r1, r0, asr r6
   1255c:	andeq	r9, r1, r0, ror #12
   12560:	cmp	r0, #0
   12564:	beq	12590 <__assert_fail@plt+0x12c8>
   12568:	ldr	r3, [r0, #8]
   1256c:	cmp	r3, #0
   12570:	bne	1258c <__assert_fail@plt+0x12c4>
   12574:	ldrh	r3, [r0, #18]
   12578:	rev16	r3, r3
   1257c:	uxth	r3, r3
   12580:	add	r3, r3, #1
   12584:	rev16	r3, r3
   12588:	strh	r3, [r0, #18]
   1258c:	bx	lr
   12590:	push	{r4, lr}
   12594:	mov	r2, #780	; 0x30c
   12598:	ldr	r3, [pc, #8]	; 125a8 <__assert_fail@plt+0x12e0>
   1259c:	ldr	r1, [pc, #8]	; 125ac <__assert_fail@plt+0x12e4>
   125a0:	ldr	r0, [pc, #8]	; 125b0 <__assert_fail@plt+0x12e8>
   125a4:	bl	112c8 <__assert_fail@plt>
   125a8:	andeq	r9, r1, r0, lsl #10
   125ac:	andeq	r9, r1, r0, asr r6
   125b0:	andeq	r9, r1, r0, ror #12
   125b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b8:	sub	sp, sp, #60	; 0x3c
   125bc:	ldr	r9, [pc, #356]	; 12728 <__assert_fail@plt+0x1460>
   125c0:	ldr	r6, [r9]
   125c4:	cmp	r6, #0
   125c8:	beq	125d8 <__assert_fail@plt+0x1310>
   125cc:	ldrb	r3, [r6]
   125d0:	cmp	r3, #0
   125d4:	bne	125e0 <__assert_fail@plt+0x1318>
   125d8:	add	sp, sp, #60	; 0x3c
   125dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e0:	ldr	r4, [pc, #324]	; 1272c <__assert_fail@plt+0x1464>
   125e4:	str	r0, [sp, #12]
   125e8:	mov	r2, #32
   125ec:	mov	r1, #0
   125f0:	add	r0, sp, #24
   125f4:	bl	111e4 <memset@plt>
   125f8:	mov	r3, #2
   125fc:	mov	r2, #40	; 0x28
   12600:	mov	r1, #0
   12604:	mov	r0, r4
   12608:	str	r3, [sp, #28]
   1260c:	str	r3, [sp, #32]
   12610:	bl	111e4 <memset@plt>
   12614:	mvn	r1, #124	; 0x7c
   12618:	mov	r2, #3
   1261c:	mov	r3, #4
   12620:	strb	r1, [r4]
   12624:	strb	r2, [r4, #1]
   12628:	strb	r3, [r4, #2]
   1262c:	ldr	r8, [pc, #252]	; 12730 <__assert_fail@plt+0x1468>
   12630:	mov	r7, #0
   12634:	b	1266c <__assert_fail@plt+0x13a4>
   12638:	ldr	r3, [sp, #20]
   1263c:	ldrb	r2, [r4, #1]
   12640:	mov	r0, r3
   12644:	ldr	r3, [r3, #20]
   12648:	ldr	r3, [r3, #4]
   1264c:	str	r3, [r4, r2]
   12650:	bl	1128c <freeaddrinfo@plt>
   12654:	ldrb	r3, [r4, #1]
   12658:	subs	r6, r5, #0
   1265c:	add	r3, r3, #4
   12660:	uxtb	r3, r3
   12664:	strb	r3, [r4, #1]
   12668:	beq	126fc <__assert_fail@plt+0x1434>
   1266c:	ldrb	r3, [r6]
   12670:	mov	r1, r8
   12674:	mov	r0, r6
   12678:	cmp	r3, #0
   1267c:	beq	126f8 <__assert_fail@plt+0x1430>
   12680:	ldrb	r3, [r4, #2]
   12684:	cmp	r3, #35	; 0x23
   12688:	bhi	126e8 <__assert_fail@plt+0x1420>
   1268c:	bl	11280 <strpbrk@plt>
   12690:	add	r3, sp, #20
   12694:	add	r2, sp, #24
   12698:	mov	r1, r7
   1269c:	cmp	r0, #0
   126a0:	addne	r5, r0, #1
   126a4:	strbne	r7, [r0]
   126a8:	mov	r0, r6
   126ac:	moveq	r5, r7
   126b0:	bl	11298 <getaddrinfo@plt>
   126b4:	subs	sl, r0, #0
   126b8:	beq	12638 <__assert_fail@plt+0x1370>
   126bc:	bl	111cc <__errno_location@plt>
   126c0:	ldr	fp, [r0]
   126c4:	mov	r0, sl
   126c8:	bl	11070 <gai_strerror@plt>
   126cc:	mov	r1, fp
   126d0:	mov	r3, r6
   126d4:	ldr	r2, [pc, #88]	; 12734 <__assert_fail@plt+0x146c>
   126d8:	str	r0, [sp]
   126dc:	mov	r0, #1
   126e0:	bl	11124 <error@plt>
   126e4:	b	12638 <__assert_fail@plt+0x1370>
   126e8:	ldr	r2, [pc, #72]	; 12738 <__assert_fail@plt+0x1470>
   126ec:	mov	r1, #0
   126f0:	mov	r0, #1
   126f4:	bl	11124 <error@plt>
   126f8:	ldrb	r3, [r4, #1]
   126fc:	ldr	r2, [sp, #12]
   12700:	ldr	r2, [r2, #4]
   12704:	str	r2, [r4, r3]
   12708:	ldrb	r3, [r4, #1]
   1270c:	add	r3, r3, #4
   12710:	uxtb	r3, r3
   12714:	add	r2, r3, #1
   12718:	strb	r3, [r4, #1]
   1271c:	str	r2, [r9, #20]
   12720:	add	sp, sp, #60	; 0x3c
   12724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12728:	andeq	fp, r2, ip, lsr #5
   1272c:	andeq	fp, r2, r0, lsl r3
   12730:	andeq	r9, r1, r8, lsr r7
   12734:	andeq	r9, r1, r0, asr #14
   12738:	andeq	r9, r1, r0, asr r7
   1273c:	cmp	r1, #7
   12740:	push	{r4, r5, r6, lr}
   12744:	bls	12780 <__assert_fail@plt+0x14b8>
   12748:	ldrh	ip, [sp, #16]
   1274c:	rev16	r3, r3
   12750:	mov	r5, #0
   12754:	rev16	ip, ip
   12758:	strh	r3, [r0, #4]
   1275c:	strb	r2, [r0]
   12760:	strb	r5, [r0, #1]
   12764:	strh	r5, [r0, #2]
   12768:	strh	ip, [r0, #6]
   1276c:	mov	r4, r0
   12770:	bl	12834 <__assert_fail@plt+0x156c>
   12774:	strh	r0, [r4, #2]
   12778:	mov	r0, r5
   1277c:	pop	{r4, r5, r6, pc}
   12780:	mvn	r5, #0
   12784:	b	12778 <__assert_fail@plt+0x14b0>
   12788:	ldrb	ip, [r0]
   1278c:	push	{r4, r5, r6, lr}
   12790:	and	ip, ip, #15
   12794:	lsl	ip, ip, #2
   12798:	add	lr, ip, #8
   1279c:	cmp	lr, r1
   127a0:	bhi	127dc <__assert_fail@plt+0x1514>
   127a4:	add	r4, r0, ip
   127a8:	mov	lr, #0
   127ac:	ldrh	r5, [r4, #2]
   127b0:	sub	r1, r1, ip
   127b4:	str	r0, [r2]
   127b8:	str	r4, [r3]
   127bc:	mov	r0, r4
   127c0:	strh	lr, [r4, #2]
   127c4:	bl	12834 <__assert_fail@plt+0x156c>
   127c8:	mov	r3, r0
   127cc:	subs	r0, r5, r0
   127d0:	movne	r0, #1
   127d4:	strh	r3, [r4, #2]
   127d8:	pop	{r4, r5, r6, pc}
   127dc:	mvn	r0, #0
   127e0:	pop	{r4, r5, r6, pc}
   127e4:	cmp	r1, #7
   127e8:	push	{r4, r5, r6, lr}
   127ec:	bls	12828 <__assert_fail@plt+0x1560>
   127f0:	rev16	r3, r3
   127f4:	rev16	r2, r2
   127f8:	mov	ip, #8
   127fc:	mov	r5, #0
   12800:	strh	r3, [r0, #6]
   12804:	strh	r2, [r0, #4]
   12808:	strb	ip, [r0]
   1280c:	strb	r5, [r0, #1]
   12810:	strh	r5, [r0, #2]
   12814:	mov	r4, r0
   12818:	bl	12834 <__assert_fail@plt+0x156c>
   1281c:	strh	r0, [r4, #2]
   12820:	mov	r0, r5
   12824:	pop	{r4, r5, r6, pc}
   12828:	mvn	r5, #0
   1282c:	b	12820 <__assert_fail@plt+0x1558>
   12830:	b	12788 <__assert_fail@plt+0x14c0>
   12834:	push	{lr}		; (str lr, [sp, #-4]!)
   12838:	sub	sp, sp, #12
   1283c:	mov	r2, #0
   12840:	cmp	r1, #1
   12844:	strh	r2, [sp, #6]
   12848:	ble	1287c <__assert_fail@plt+0x15b4>
   1284c:	mov	ip, r0
   12850:	mov	r3, r1
   12854:	ldrh	lr, [ip], #2
   12858:	sub	r3, r3, #2
   1285c:	cmp	r3, #1
   12860:	add	r2, r2, lr
   12864:	bgt	12854 <__assert_fail@plt+0x158c>
   12868:	sub	r1, r1, #2
   1286c:	bic	r3, r1, #1
   12870:	add	r3, r3, #2
   12874:	add	r0, r0, r3
   12878:	and	r1, r1, #1
   1287c:	cmp	r1, #1
   12880:	ldrbeq	r3, [r0]
   12884:	strbeq	r3, [sp, #6]
   12888:	ldrheq	r3, [sp, #6]
   1288c:	addeq	r2, r2, r3
   12890:	uxth	r0, r2
   12894:	add	r2, r0, r2, asr #16
   12898:	add	r2, r2, r2, asr #16
   1289c:	mvn	r0, r2
   128a0:	uxth	r0, r0
   128a4:	add	sp, sp, #12
   128a8:	pop	{pc}		; (ldr pc, [sp], #4)
   128ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128b0:	sub	sp, sp, #20
   128b4:	ldr	r5, [r0, #4]
   128b8:	ldr	r4, [r0]
   128bc:	cmp	r5, #0
   128c0:	ldr	r7, [r0, #8]
   128c4:	beq	1299c <__assert_fail@plt+0x16d4>
   128c8:	stmib	sp, {r1, r2, r3}
   128cc:	mov	r6, #1
   128d0:	str	r4, [sp]
   128d4:	mov	r8, #0
   128d8:	b	128f8 <__assert_fail@plt+0x1630>
   128dc:	mov	r3, r6
   128e0:	subs	r5, r5, #1
   128e4:	moveq	r3, #0
   128e8:	andne	r3, r3, #1
   128ec:	cmp	r3, #0
   128f0:	add	r4, r4, #24
   128f4:	beq	12964 <__assert_fail@plt+0x169c>
   128f8:	ldr	fp, [r4, #12]
   128fc:	ands	r9, fp, #8
   12900:	movne	r3, r6
   12904:	movne	r9, r8
   12908:	bne	128e0 <__assert_fail@plt+0x1618>
   1290c:	ldr	sl, [r4, #4]
   12910:	sub	r3, sl, #1
   12914:	cmp	r3, #254	; 0xfe
   12918:	bhi	128dc <__assert_fail@plt+0x1614>
   1291c:	bl	11184 <__ctype_b_loc@plt>
   12920:	lsl	r3, sl, #1
   12924:	ldr	r1, [r0]
   12928:	ldrh	r3, [r1, r3]
   1292c:	tst	r3, #16384	; 0x4000
   12930:	beq	128dc <__assert_fail@plt+0x1614>
   12934:	ldrb	r3, [r7]
   12938:	cmp	r3, sl
   1293c:	bne	128dc <__assert_fail@plt+0x1614>
   12940:	ldr	r3, [sp]
   12944:	tst	fp, #4
   12948:	moveq	r3, r4
   1294c:	tst	fp, #2
   12950:	str	r3, [sp]
   12954:	movne	r3, r6
   12958:	beq	12974 <__assert_fail@plt+0x16ac>
   1295c:	add	r7, r7, #1
   12960:	b	128e0 <__assert_fail@plt+0x1618>
   12964:	mov	sl, r9
   12968:	mov	r0, sl
   1296c:	add	sp, sp, #20
   12970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12974:	ldr	r3, [sp, #12]
   12978:	ldr	r2, [sp, #8]
   1297c:	ldr	r1, [sp]
   12980:	mov	r0, r4
   12984:	ldr	ip, [sp, #4]
   12988:	blx	ip
   1298c:	clz	r3, r0
   12990:	mov	r9, r0
   12994:	lsr	r3, r3, #5
   12998:	b	1295c <__assert_fail@plt+0x1694>
   1299c:	mov	sl, r5
   129a0:	b	12968 <__assert_fail@plt+0x16a0>
   129a4:	push	{r4, r5, r6, lr}
   129a8:	ldr	r4, [r0, #12]
   129ac:	ands	r4, r4, #8
   129b0:	movne	r4, #0
   129b4:	bne	129e0 <__assert_fail@plt+0x1718>
   129b8:	ldr	r5, [r0, #4]
   129bc:	sub	r3, r5, #1
   129c0:	cmp	r3, #254	; 0xfe
   129c4:	bhi	129e0 <__assert_fail@plt+0x1718>
   129c8:	bl	11184 <__ctype_b_loc@plt>
   129cc:	lsl	r3, r5, #1
   129d0:	ldr	r2, [r0]
   129d4:	ldrh	r3, [r2, r3]
   129d8:	tst	r3, #16384	; 0x4000
   129dc:	movne	r4, r5
   129e0:	mov	r0, r4
   129e4:	pop	{r4, r5, r6, pc}
   129e8:	push	{r4, lr}
   129ec:	mov	r4, r0
   129f0:	bl	11184 <__ctype_b_loc@plt>
   129f4:	ldr	r2, [r4]
   129f8:	ldr	lr, [r0]
   129fc:	b	12a04 <__assert_fail@plt+0x173c>
   12a00:	str	r2, [r4]
   12a04:	ldrb	r1, [r2]
   12a08:	mov	r3, r2
   12a0c:	add	r2, r2, #1
   12a10:	lsl	r0, r1, #1
   12a14:	ldrh	ip, [lr, r0]
   12a18:	tst	ip, #8192	; 0x2000
   12a1c:	bne	12a00 <__assert_fail@plt+0x1738>
   12a20:	subs	r0, r1, #45	; 0x2d
   12a24:	movne	r0, #1
   12a28:	cmp	r1, #0
   12a2c:	popeq	{r4, pc}
   12a30:	tst	ip, #8
   12a34:	popne	{r4, pc}
   12a38:	add	r3, r3, #1
   12a3c:	str	r3, [r4]
   12a40:	ldrb	r2, [r3]
   12a44:	cmp	r2, #0
   12a48:	lsl	r2, r2, #1
   12a4c:	popeq	{r4, pc}
   12a50:	ldrh	r2, [lr, r2]
   12a54:	tst	r2, #8
   12a58:	beq	12a38 <__assert_fail@plt+0x1770>
   12a5c:	pop	{r4, pc}
   12a60:	push	{r4, r5, r6, lr}
   12a64:	mov	r5, r0
   12a68:	ldr	r0, [r0, #12]
   12a6c:	cmp	r0, #0
   12a70:	beq	12a84 <__assert_fail@plt+0x17bc>
   12a74:	ldr	r4, [r0, #24]
   12a78:	bl	16fe4 <argp_parse@@Base+0xe98>
   12a7c:	subs	r0, r4, #0
   12a80:	bne	12a74 <__assert_fail@plt+0x17ac>
   12a84:	ldr	r3, [r5, #4]
   12a88:	cmp	r3, #0
   12a8c:	beq	12aa0 <__assert_fail@plt+0x17d8>
   12a90:	ldr	r0, [r5]
   12a94:	bl	16fe4 <argp_parse@@Base+0xe98>
   12a98:	ldr	r0, [r5, #8]
   12a9c:	bl	16fe4 <argp_parse@@Base+0xe98>
   12aa0:	mov	r0, r5
   12aa4:	pop	{r4, r5, r6, lr}
   12aa8:	b	16fe4 <argp_parse@@Base+0xe98>
   12aac:	push	{r4, r5, r6, r7, r8, lr}
   12ab0:	mov	r5, r1
   12ab4:	ldr	r3, [r0, #28]
   12ab8:	ldr	r1, [r0, #24]
   12abc:	ldr	r2, [r0, #16]
   12ac0:	sub	r3, r3, r1
   12ac4:	cmp	r3, r2
   12ac8:	mov	r4, r0
   12acc:	bhi	12b38 <__assert_fail@plt+0x1870>
   12ad0:	ldr	r1, [r4, #20]
   12ad4:	mov	r6, #32
   12ad8:	cmp	r1, #0
   12adc:	subge	r5, r5, r1
   12ae0:	mov	r7, #1
   12ae4:	cmp	r5, #0
   12ae8:	sub	r5, r5, #1
   12aec:	ble	12b18 <__assert_fail@plt+0x1850>
   12af0:	ldr	r3, [r4, #28]
   12af4:	ldr	r2, [r4, #32]
   12af8:	cmp	r3, r2
   12afc:	bcs	12b1c <__assert_fail@plt+0x1854>
   12b00:	add	r2, r3, #1
   12b04:	cmp	r5, #0
   12b08:	str	r2, [r4, #28]
   12b0c:	sub	r5, r5, #1
   12b10:	strb	r6, [r3]
   12b14:	bgt	12af0 <__assert_fail@plt+0x1828>
   12b18:	pop	{r4, r5, r6, r7, r8, pc}
   12b1c:	mov	r1, r7
   12b20:	mov	r0, r4
   12b24:	bl	182e4 <argp_parse@@Base+0x2198>
   12b28:	cmp	r0, #0
   12b2c:	beq	12ae4 <__assert_fail@plt+0x181c>
   12b30:	ldr	r3, [r4, #28]
   12b34:	b	12b00 <__assert_fail@plt+0x1838>
   12b38:	bl	17c54 <argp_parse@@Base+0x1b08>
   12b3c:	b	12ad0 <__assert_fail@plt+0x1808>
   12b40:	push	{r4, r5, r6, lr}
   12b44:	subs	r4, r2, #0
   12b48:	popeq	{r4, r5, r6, pc}
   12b4c:	ldr	ip, [r4, #20]
   12b50:	cmp	ip, #0
   12b54:	popeq	{r4, r5, r6, pc}
   12b58:	mov	r6, r1
   12b5c:	mov	r5, r0
   12b60:	mov	r1, r3
   12b64:	mov	r0, r4
   12b68:	bl	16e88 <argp_parse@@Base+0xd3c>
   12b6c:	ldr	r3, [r4, #20]
   12b70:	mov	r1, r5
   12b74:	mov	r2, r0
   12b78:	mov	r0, r6
   12b7c:	pop	{r4, r5, r6, lr}
   12b80:	bx	r3
   12b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b88:	mov	r5, r2
   12b8c:	sub	sp, sp, #12
   12b90:	mov	r2, r1
   12b94:	ldr	r3, [r5, #16]
   12b98:	ldr	r1, [pc, #488]	; 12d88 <__assert_fail@plt+0x1ac0>
   12b9c:	mov	r8, r0
   12ba0:	bl	12b40 <__assert_fail@plt+0x1878>
   12ba4:	subs	r6, r0, #0
   12ba8:	beq	12cb4 <__assert_fail@plt+0x19ec>
   12bac:	ldrb	r3, [r6]
   12bb0:	cmp	r3, #0
   12bb4:	beq	12ca8 <__assert_fail@plt+0x19e0>
   12bb8:	ldr	r3, [r5, #8]
   12bbc:	ldr	r3, [r3]
   12bc0:	cmp	r3, #0
   12bc4:	beq	12bec <__assert_fail@plt+0x1924>
   12bc8:	ldr	r4, [r5, #4]
   12bcc:	ldr	r3, [r4, #28]
   12bd0:	ldr	r2, [r4, #32]
   12bd4:	cmp	r3, r2
   12bd8:	bcs	12d6c <__assert_fail@plt+0x1aa4>
   12bdc:	add	r1, r3, #1
   12be0:	mov	r2, #10
   12be4:	str	r1, [r4, #28]
   12be8:	strb	r2, [r3]
   12bec:	ldr	sl, [pc, #408]	; 12d8c <__assert_fail@plt+0x1ac4>
   12bf0:	ldr	r0, [r5, #4]
   12bf4:	ldr	r1, [sl, #24]
   12bf8:	bl	12aac <__assert_fail@plt+0x17e4>
   12bfc:	ldr	r4, [r5, #4]
   12c00:	ldr	r9, [sl, #24]
   12c04:	ldr	r7, [r4, #28]
   12c08:	ldr	r3, [r4, #24]
   12c0c:	ldr	r2, [r4, #16]
   12c10:	sub	r3, r7, r3
   12c14:	cmp	r3, r2
   12c18:	strls	r9, [r4, #4]
   12c1c:	movls	fp, r4
   12c20:	bhi	12cf0 <__assert_fail@plt+0x1a28>
   12c24:	str	r9, [fp, #12]
   12c28:	mov	r0, r6
   12c2c:	bl	111a8 <strlen@plt>
   12c30:	subs	r9, r0, #0
   12c34:	beq	12c6c <__assert_fail@plt+0x19a4>
   12c38:	ldr	r2, [r4, #32]
   12c3c:	add	r3, r7, r9
   12c40:	cmp	r2, r3
   12c44:	bcc	12cd4 <__assert_fail@plt+0x1a0c>
   12c48:	mov	r2, r9
   12c4c:	mov	r0, r7
   12c50:	mov	r1, r6
   12c54:	bl	11088 <memcpy@plt>
   12c58:	ldr	r3, [r4, #28]
   12c5c:	add	r9, r3, r9
   12c60:	str	r9, [r4, #28]
   12c64:	ldr	r4, [r5, #4]
   12c68:	ldr	r7, [r4, #28]
   12c6c:	ldr	r3, [r4, #24]
   12c70:	ldr	r2, [r4, #16]
   12c74:	sub	r3, r7, r3
   12c78:	cmp	r3, r2
   12c7c:	movls	r9, r4
   12c80:	bhi	12d3c <__assert_fail@plt+0x1a74>
   12c84:	ldr	r2, [r9, #32]
   12c88:	mov	r3, #0
   12c8c:	cmp	r2, r7
   12c90:	str	r3, [r4, #4]
   12c94:	bls	12d50 <__assert_fail@plt+0x1a88>
   12c98:	add	r2, r7, #1
   12c9c:	mov	r3, #10
   12ca0:	str	r2, [r9, #28]
   12ca4:	strb	r3, [r7]
   12ca8:	ldr	r3, [r5, #8]
   12cac:	mov	r2, #1
   12cb0:	str	r2, [r3, #4]
   12cb4:	cmp	r8, r6
   12cb8:	beq	12ccc <__assert_fail@plt+0x1a04>
   12cbc:	mov	r0, r6
   12cc0:	add	sp, sp, #12
   12cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc8:	b	16fe4 <argp_parse@@Base+0xe98>
   12ccc:	add	sp, sp, #12
   12cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd4:	mov	r1, r9
   12cd8:	mov	r0, r4
   12cdc:	bl	182e4 <argp_parse@@Base+0x2198>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12c64 <__assert_fail@plt+0x199c>
   12ce8:	ldr	r7, [r4, #28]
   12cec:	b	12c48 <__assert_fail@plt+0x1980>
   12cf0:	mov	r0, r4
   12cf4:	str	r9, [sp, #4]
   12cf8:	bl	17c54 <argp_parse@@Base+0x1b08>
   12cfc:	ldr	fp, [r5, #4]
   12d00:	ldr	r3, [sp, #4]
   12d04:	ldr	r9, [sl, #24]
   12d08:	ldr	r7, [fp, #28]
   12d0c:	ldr	r2, [fp, #24]
   12d10:	ldr	r1, [fp, #16]
   12d14:	sub	r2, r7, r2
   12d18:	cmp	r2, r1
   12d1c:	str	r3, [r4, #4]
   12d20:	movls	r4, fp
   12d24:	bls	12c24 <__assert_fail@plt+0x195c>
   12d28:	mov	r0, fp
   12d2c:	bl	17c54 <argp_parse@@Base+0x1b08>
   12d30:	ldr	r4, [r5, #4]
   12d34:	ldr	r7, [r4, #28]
   12d38:	b	12c24 <__assert_fail@plt+0x195c>
   12d3c:	mov	r0, r4
   12d40:	bl	17c54 <argp_parse@@Base+0x1b08>
   12d44:	ldr	r9, [r5, #4]
   12d48:	ldr	r7, [r9, #28]
   12d4c:	b	12c84 <__assert_fail@plt+0x19bc>
   12d50:	mov	r1, #1
   12d54:	mov	r0, r9
   12d58:	bl	182e4 <argp_parse@@Base+0x2198>
   12d5c:	cmp	r0, #0
   12d60:	beq	12ca8 <__assert_fail@plt+0x19e0>
   12d64:	ldr	r7, [r9, #28]
   12d68:	b	12c98 <__assert_fail@plt+0x19d0>
   12d6c:	mov	r1, #1
   12d70:	mov	r0, r4
   12d74:	bl	182e4 <argp_parse@@Base+0x2198>
   12d78:	cmp	r0, #0
   12d7c:	beq	12bec <__assert_fail@plt+0x1924>
   12d80:	ldr	r3, [r4, #28]
   12d84:	b	12bdc <__assert_fail@plt+0x1914>
   12d88:	andeq	r0, r0, #3
   12d8c:	andeq	fp, r2, r8, asr r2
   12d90:	ldr	r3, [r1, #12]
   12d94:	push	{r4, r5, r6, r7, r8, lr}
   12d98:	cmp	r3, #0
   12d9c:	mov	r4, r1
   12da0:	mov	r6, r0
   12da4:	beq	12e8c <__assert_fail@plt+0x1bc4>
   12da8:	ldr	r3, [r1, #8]
   12dac:	ldr	r2, [r1]
   12db0:	ldr	r7, [r3]
   12db4:	ldr	r3, [r3, #4]
   12db8:	ldr	r5, [r2, #16]
   12dbc:	cmp	r3, #0
   12dc0:	cmpne	r7, #0
   12dc4:	beq	12dfc <__assert_fail@plt+0x1b34>
   12dc8:	ldr	r2, [r2, #12]
   12dcc:	ldr	r3, [r7, #12]
   12dd0:	cmp	r2, r3
   12dd4:	beq	12dfc <__assert_fail@plt+0x1b34>
   12dd8:	ldr	r8, [r1, #4]
   12ddc:	ldr	r3, [r8, #28]
   12de0:	ldr	r2, [r8, #32]
   12de4:	cmp	r3, r2
   12de8:	bcs	12f1c <__assert_fail@plt+0x1c54>
   12dec:	add	r1, r3, #1
   12df0:	mov	r2, #10
   12df4:	str	r1, [r8, #28]
   12df8:	strb	r2, [r3]
   12dfc:	cmp	r5, #0
   12e00:	beq	12ee8 <__assert_fail@plt+0x1c20>
   12e04:	ldr	r0, [r5]
   12e08:	cmp	r0, #0
   12e0c:	beq	12ee8 <__assert_fail@plt+0x1c20>
   12e10:	ldrb	r3, [r0]
   12e14:	cmp	r3, #0
   12e18:	beq	12ee8 <__assert_fail@plt+0x1c20>
   12e1c:	cmp	r7, #0
   12e20:	beq	12e50 <__assert_fail@plt+0x1b88>
   12e24:	ldr	r3, [r7, #16]
   12e28:	cmp	r5, r3
   12e2c:	beq	12ee8 <__assert_fail@plt+0x1c20>
   12e30:	cmp	r3, #0
   12e34:	beq	12e50 <__assert_fail@plt+0x1b88>
   12e38:	ldr	r3, [r3, #12]
   12e3c:	cmp	r3, #0
   12e40:	cmpne	r5, r3
   12e44:	bne	12e38 <__assert_fail@plt+0x1b70>
   12e48:	cmp	r5, r3
   12e4c:	beq	12ee8 <__assert_fail@plt+0x1c20>
   12e50:	ldr	r3, [r4, #4]
   12e54:	ldr	r1, [r5, #16]
   12e58:	mov	r2, r4
   12e5c:	ldr	r7, [r3, #12]
   12e60:	bl	12b84 <__assert_fail@plt+0x18bc>
   12e64:	ldr	r5, [r4, #4]
   12e68:	mov	r0, r5
   12e6c:	ldr	r3, [r5, #28]
   12e70:	ldr	r1, [r5, #24]
   12e74:	ldr	r2, [r5, #16]
   12e78:	sub	r3, r3, r1
   12e7c:	cmp	r3, r2
   12e80:	bhi	12f10 <__assert_fail@plt+0x1c48>
   12e84:	str	r7, [r5, #12]
   12e88:	b	12eec <__assert_fail@plt+0x1c24>
   12e8c:	ldr	r5, [r1, #4]
   12e90:	ldr	r3, [r5, #28]
   12e94:	ldr	r1, [r5, #32]
   12e98:	add	r2, r3, #2
   12e9c:	cmp	r1, r2
   12ea0:	bcc	12ecc <__assert_fail@plt+0x1c04>
   12ea4:	ldr	r2, [pc, #140]	; 12f38 <__assert_fail@plt+0x1c70>
   12ea8:	mov	r1, r6
   12eac:	ldrh	r2, [r2]
   12eb0:	strh	r2, [r3]
   12eb4:	ldr	r3, [r5, #28]
   12eb8:	ldr	r0, [r4, #4]
   12ebc:	add	r3, r3, #2
   12ec0:	str	r3, [r5, #28]
   12ec4:	pop	{r4, r5, r6, r7, r8, lr}
   12ec8:	b	12aac <__assert_fail@plt+0x17e4>
   12ecc:	mov	r1, #2
   12ed0:	mov	r0, r5
   12ed4:	bl	182e4 <argp_parse@@Base+0x2198>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f00 <__assert_fail@plt+0x1c38>
   12ee0:	ldr	r3, [r5, #28]
   12ee4:	b	12ea4 <__assert_fail@plt+0x1bdc>
   12ee8:	ldr	r0, [r4, #4]
   12eec:	mov	r3, #0
   12ef0:	str	r3, [r4, #12]
   12ef4:	mov	r1, r6
   12ef8:	pop	{r4, r5, r6, r7, r8, lr}
   12efc:	b	12aac <__assert_fail@plt+0x17e4>
   12f00:	ldr	r0, [r4, #4]
   12f04:	mov	r1, r6
   12f08:	pop	{r4, r5, r6, r7, r8, lr}
   12f0c:	b	12aac <__assert_fail@plt+0x17e4>
   12f10:	bl	17c54 <argp_parse@@Base+0x1b08>
   12f14:	ldr	r0, [r4, #4]
   12f18:	b	12e84 <__assert_fail@plt+0x1bbc>
   12f1c:	mov	r1, #1
   12f20:	mov	r0, r8
   12f24:	bl	182e4 <argp_parse@@Base+0x2198>
   12f28:	cmp	r0, #0
   12f2c:	beq	12dfc <__assert_fail@plt+0x1b34>
   12f30:	ldr	r3, [r8, #28]
   12f34:	b	12dec <__assert_fail@plt+0x1b24>
   12f38:	muleq	r1, r0, sl
   12f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f40:	mov	r7, r3
   12f44:	ldr	sl, [r0, #12]
   12f48:	sub	sp, sp, #36	; 0x24
   12f4c:	ldr	r3, [r0, #16]
   12f50:	cmp	sl, #0
   12f54:	mov	fp, r0
   12f58:	mov	r6, r2
   12f5c:	str	r3, [sp, #16]
   12f60:	mov	r9, r1
   12f64:	ldr	r8, [sp, #72]	; 0x48
   12f68:	ldr	r5, [sp, #76]	; 0x4c
   12f6c:	beq	1333c <__assert_fail@plt+0x2074>
   12f70:	mov	r1, #11
   12f74:	mov	r0, sl
   12f78:	bl	111b4 <strchr@plt>
   12f7c:	cmp	r6, #0
   12f80:	bne	13258 <__assert_fail@plt+0x1f90>
   12f84:	cmp	r0, #0
   12f88:	ldr	r3, [fp, #20]
   12f8c:	beq	13494 <__assert_fail@plt+0x21cc>
   12f90:	cmp	r3, #0
   12f94:	sub	r4, r0, sl
   12f98:	beq	1342c <__assert_fail@plt+0x2164>
   12f9c:	cmp	r4, #0
   12fa0:	beq	133cc <__assert_fail@plt+0x2104>
   12fa4:	mov	r0, sl
   12fa8:	mov	r1, r4
   12fac:	bl	1107c <strndup@plt>
   12fb0:	mov	r3, #1
   12fb4:	str	r3, [sp, #24]
   12fb8:	mov	sl, r0
   12fbc:	adds	r3, r0, #0
   12fc0:	movne	r3, #1
   12fc4:	str	r3, [sp, #20]
   12fc8:	mov	r1, r9
   12fcc:	mov	r0, fp
   12fd0:	bl	16e88 <argp_parse@@Base+0xd3c>
   12fd4:	ldr	r3, [fp, #20]
   12fd8:	str	r0, [sp, #12]
   12fdc:	ldr	r0, [pc, #1272]	; 134dc <__assert_fail@plt+0x2214>
   12fe0:	ldr	r2, [sp, #12]
   12fe4:	mov	r1, sl
   12fe8:	blx	r3
   12fec:	subs	r3, r0, #0
   12ff0:	beq	1337c <__assert_fail@plt+0x20b4>
   12ff4:	cmp	r7, #0
   12ff8:	beq	1301c <__assert_fail@plt+0x1d54>
   12ffc:	ldr	r2, [r5, #28]
   13000:	ldr	r1, [r5, #32]
   13004:	cmp	r2, r1
   13008:	bcs	13384 <__assert_fail@plt+0x20bc>
   1300c:	add	r0, r2, #1
   13010:	mov	r1, #10
   13014:	str	r0, [r5, #28]
   13018:	strb	r1, [r2]
   1301c:	ldr	r2, [sp, #24]
   13020:	cmp	r3, sl
   13024:	movne	r2, #0
   13028:	andeq	r2, r2, #1
   1302c:	cmp	r2, #0
   13030:	beq	1329c <__assert_fail@plt+0x1fd4>
   13034:	ldr	r0, [r5, #28]
   13038:	ldr	r1, [r5, #32]
   1303c:	add	r2, r0, r4
   13040:	cmp	r1, r2
   13044:	bcs	132fc <__assert_fail@plt+0x2034>
   13048:	mov	r1, r4
   1304c:	mov	r0, r5
   13050:	str	r3, [sp, #24]
   13054:	bl	182e4 <argp_parse@@Base+0x2198>
   13058:	ldr	r3, [sp, #24]
   1305c:	cmp	r0, #0
   13060:	bne	132f8 <__assert_fail@plt+0x2030>
   13064:	ldr	r4, [r5, #28]
   13068:	ldr	r1, [r5, #24]
   1306c:	ldr	r2, [r5, #16]
   13070:	sub	r4, r4, r1
   13074:	cmp	r4, r2
   13078:	bhi	13320 <__assert_fail@plt+0x2058>
   1307c:	ldr	r2, [r5, #20]
   13080:	ldr	r1, [r5, #4]
   13084:	bic	r2, r2, r2, asr #31
   13088:	cmp	r1, r2
   1308c:	bcs	130b0 <__assert_fail@plt+0x1de8>
   13090:	ldr	r2, [r5, #28]
   13094:	ldr	r1, [r5, #32]
   13098:	cmp	r2, r1
   1309c:	bcs	133a8 <__assert_fail@plt+0x20e0>
   130a0:	add	r0, r2, #1
   130a4:	mov	r1, #10
   130a8:	str	r0, [r5, #28]
   130ac:	strb	r1, [r2]
   130b0:	cmp	r3, sl
   130b4:	moveq	r4, #1
   130b8:	beq	130c8 <__assert_fail@plt+0x1e00>
   130bc:	mov	r0, r3
   130c0:	bl	16fe4 <argp_parse@@Base+0xe98>
   130c4:	mov	r4, #1
   130c8:	ldr	r3, [sp, #20]
   130cc:	cmp	r3, #0
   130d0:	beq	130e8 <__assert_fail@plt+0x1e20>
   130d4:	ldr	r3, [fp, #20]
   130d8:	cmp	r3, #0
   130dc:	beq	131cc <__assert_fail@plt+0x1f04>
   130e0:	mov	r0, sl
   130e4:	bl	16fe4 <argp_parse@@Base+0xe98>
   130e8:	cmp	r6, #0
   130ec:	beq	131cc <__assert_fail@plt+0x1f04>
   130f0:	ldr	r3, [fp, #20]
   130f4:	cmp	r3, #0
   130f8:	beq	131cc <__assert_fail@plt+0x1f04>
   130fc:	ldr	r2, [sp, #12]
   13100:	mov	r1, #0
   13104:	ldr	r0, [pc, #980]	; 134e0 <__assert_fail@plt+0x2218>
   13108:	blx	r3
   1310c:	subs	sl, r0, #0
   13110:	beq	131cc <__assert_fail@plt+0x1f04>
   13114:	orrs	r3, r7, r4
   13118:	beq	1313c <__assert_fail@plt+0x1e74>
   1311c:	ldr	r3, [r5, #28]
   13120:	ldr	r2, [r5, #32]
   13124:	cmp	r3, r2
   13128:	bcs	13464 <__assert_fail@plt+0x219c>
   1312c:	add	r1, r3, #1
   13130:	mov	r2, #10
   13134:	str	r1, [r5, #28]
   13138:	strb	r2, [r3]
   1313c:	mov	r0, sl
   13140:	bl	111a8 <strlen@plt>
   13144:	subs	r4, r0, #0
   13148:	beq	13174 <__assert_fail@plt+0x1eac>
   1314c:	ldr	r0, [r5, #28]
   13150:	ldr	r2, [r5, #32]
   13154:	add	r3, r0, r4
   13158:	cmp	r2, r3
   1315c:	bcs	133dc <__assert_fail@plt+0x2114>
   13160:	mov	r1, r4
   13164:	mov	r0, r5
   13168:	bl	182e4 <argp_parse@@Base+0x2198>
   1316c:	cmp	r0, #0
   13170:	bne	133d8 <__assert_fail@plt+0x2110>
   13174:	mov	r0, sl
   13178:	bl	16fe4 <argp_parse@@Base+0xe98>
   1317c:	ldr	r3, [r5, #28]
   13180:	ldr	r1, [r5, #24]
   13184:	ldr	r2, [r5, #16]
   13188:	sub	r3, r3, r1
   1318c:	cmp	r3, r2
   13190:	bhi	133f8 <__assert_fail@plt+0x2130>
   13194:	ldr	r3, [r5, #20]
   13198:	ldr	r2, [r5, #4]
   1319c:	bic	r3, r3, r3, asr #31
   131a0:	cmp	r2, r3
   131a4:	bcs	13334 <__assert_fail@plt+0x206c>
   131a8:	ldr	r3, [r5, #28]
   131ac:	ldr	r2, [r5, #32]
   131b0:	cmp	r3, r2
   131b4:	bcs	13448 <__assert_fail@plt+0x2180>
   131b8:	mov	r4, #1
   131bc:	add	r2, r3, r4
   131c0:	str	r2, [r5, #28]
   131c4:	mov	r2, #10
   131c8:	strb	r2, [r3]
   131cc:	ldr	fp, [sp, #16]
   131d0:	cmp	fp, #0
   131d4:	beq	1324c <__assert_fail@plt+0x1f84>
   131d8:	ldr	r3, [fp]
   131dc:	cmp	r3, #0
   131e0:	beq	1324c <__assert_fail@plt+0x1f84>
   131e4:	eor	r2, r4, #1
   131e8:	and	r2, r2, #1
   131ec:	clz	sl, r8
   131f0:	lsr	sl, sl, #5
   131f4:	orrs	r2, sl, r2
   131f8:	bne	13214 <__assert_fail@plt+0x1f4c>
   131fc:	b	13480 <__assert_fail@plt+0x21b8>
   13200:	cmp	r4, #0
   13204:	movne	r2, sl
   13208:	orreq	r2, sl, #1
   1320c:	cmp	r2, #0
   13210:	beq	1324c <__assert_fail@plt+0x1f84>
   13214:	orrs	r2, r7, r4
   13218:	mov	r0, r3
   1321c:	str	r5, [sp, #4]
   13220:	movne	r3, #1
   13224:	moveq	r3, #0
   13228:	str	r8, [sp]
   1322c:	mov	r2, r6
   13230:	mov	r1, r9
   13234:	bl	12f3c <__assert_fail@plt+0x1c74>
   13238:	ldr	r3, [fp, #16]
   1323c:	add	fp, fp, #16
   13240:	cmp	r3, #0
   13244:	orr	r4, r4, r0
   13248:	bne	13200 <__assert_fail@plt+0x1f38>
   1324c:	mov	r0, r4
   13250:	add	sp, sp, #36	; 0x24
   13254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13258:	cmp	r0, #0
   1325c:	addne	sl, r0, #1
   13260:	beq	13424 <__assert_fail@plt+0x215c>
   13264:	ldr	r3, [fp, #20]
   13268:	cmp	r3, #0
   1326c:	beq	13404 <__assert_fail@plt+0x213c>
   13270:	mov	r3, #0
   13274:	mov	r1, r9
   13278:	mov	r0, fp
   1327c:	mov	r4, r3
   13280:	str	r3, [sp, #20]
   13284:	bl	16e88 <argp_parse@@Base+0xd3c>
   13288:	str	r4, [sp, #24]
   1328c:	ldr	r3, [fp, #20]
   13290:	str	r0, [sp, #12]
   13294:	ldr	r0, [pc, #584]	; 134e4 <__assert_fail@plt+0x221c>
   13298:	b	12fe0 <__assert_fail@plt+0x1d18>
   1329c:	mov	r0, r3
   132a0:	str	r3, [sp, #24]
   132a4:	bl	111a8 <strlen@plt>
   132a8:	ldr	r3, [sp, #24]
   132ac:	subs	r4, r0, #0
   132b0:	beq	13064 <__assert_fail@plt+0x1d9c>
   132b4:	ldr	r0, [r5, #28]
   132b8:	ldr	r1, [r5, #32]
   132bc:	add	r2, r0, r4
   132c0:	cmp	r1, r2
   132c4:	bcs	132e8 <__assert_fail@plt+0x2020>
   132c8:	mov	r1, r4
   132cc:	mov	r0, r5
   132d0:	str	r3, [sp, #24]
   132d4:	bl	182e4 <argp_parse@@Base+0x2198>
   132d8:	ldr	r3, [sp, #24]
   132dc:	cmp	r0, #0
   132e0:	beq	13064 <__assert_fail@plt+0x1d9c>
   132e4:	ldr	r0, [r5, #28]
   132e8:	mov	r2, r4
   132ec:	mov	r1, r3
   132f0:	str	r3, [sp, #24]
   132f4:	b	13308 <__assert_fail@plt+0x2040>
   132f8:	ldr	r0, [r5, #28]
   132fc:	mov	r2, r4
   13300:	mov	r1, sl
   13304:	str	r3, [sp, #24]
   13308:	bl	11088 <memcpy@plt>
   1330c:	ldr	r2, [r5, #28]
   13310:	ldr	r3, [sp, #24]
   13314:	add	r4, r2, r4
   13318:	str	r4, [r5, #28]
   1331c:	b	13068 <__assert_fail@plt+0x1da0>
   13320:	mov	r0, r5
   13324:	str	r3, [sp, #24]
   13328:	bl	17c54 <argp_parse@@Base+0x1b08>
   1332c:	ldr	r3, [sp, #24]
   13330:	b	1307c <__assert_fail@plt+0x1db4>
   13334:	mov	r4, #1
   13338:	b	131cc <__assert_fail@plt+0x1f04>
   1333c:	ldr	r4, [r0, #20]
   13340:	cmp	r4, #0
   13344:	beq	1348c <__assert_fail@plt+0x21c4>
   13348:	bl	16e88 <argp_parse@@Base+0xd3c>
   1334c:	cmp	r6, #0
   13350:	ldr	r3, [fp, #20]
   13354:	strne	sl, [sp, #20]
   13358:	strne	sl, [sp, #24]
   1335c:	movne	r4, sl
   13360:	streq	r6, [sp, #20]
   13364:	streq	r6, [sp, #24]
   13368:	moveq	r4, r6
   1336c:	str	r0, [sp, #12]
   13370:	ldrne	r0, [pc, #364]	; 134e4 <__assert_fail@plt+0x221c>
   13374:	ldreq	r0, [pc, #352]	; 134dc <__assert_fail@plt+0x2214>
   13378:	b	12fe0 <__assert_fail@plt+0x1d18>
   1337c:	mov	r4, r3
   13380:	b	130c8 <__assert_fail@plt+0x1e00>
   13384:	mov	r1, #1
   13388:	mov	r0, r5
   1338c:	str	r3, [sp, #28]
   13390:	bl	182e4 <argp_parse@@Base+0x2198>
   13394:	ldr	r3, [sp, #28]
   13398:	cmp	r0, #0
   1339c:	beq	1301c <__assert_fail@plt+0x1d54>
   133a0:	ldr	r2, [r5, #28]
   133a4:	b	1300c <__assert_fail@plt+0x1d44>
   133a8:	mov	r1, #1
   133ac:	mov	r0, r5
   133b0:	str	r3, [sp, #24]
   133b4:	bl	182e4 <argp_parse@@Base+0x2198>
   133b8:	ldr	r3, [sp, #24]
   133bc:	cmp	r0, #0
   133c0:	beq	130b0 <__assert_fail@plt+0x1de8>
   133c4:	ldr	r2, [r5, #28]
   133c8:	b	130a0 <__assert_fail@plt+0x1dd8>
   133cc:	str	r4, [sp, #20]
   133d0:	str	r4, [sp, #24]
   133d4:	b	12fc8 <__assert_fail@plt+0x1d00>
   133d8:	ldr	r0, [r5, #28]
   133dc:	mov	r2, r4
   133e0:	mov	r1, sl
   133e4:	bl	11088 <memcpy@plt>
   133e8:	ldr	r3, [r5, #28]
   133ec:	add	r4, r3, r4
   133f0:	str	r4, [r5, #28]
   133f4:	b	13174 <__assert_fail@plt+0x1eac>
   133f8:	mov	r0, r5
   133fc:	bl	17c54 <argp_parse@@Base+0x1b08>
   13400:	b	13194 <__assert_fail@plt+0x1ecc>
   13404:	cmp	sl, #0
   13408:	beq	13488 <__assert_fail@plt+0x21c0>
   1340c:	str	r3, [sp, #20]
   13410:	str	r3, [sp, #24]
   13414:	mov	r4, r3
   13418:	str	r3, [sp, #12]
   1341c:	mov	r3, sl
   13420:	b	12ff4 <__assert_fail@plt+0x1d2c>
   13424:	mov	sl, r0
   13428:	b	13264 <__assert_fail@plt+0x1f9c>
   1342c:	adds	r3, r4, #0
   13430:	movne	r3, #1
   13434:	str	r3, [sp, #24]
   13438:	str	r3, [sp, #20]
   1343c:	str	r6, [sp, #12]
   13440:	mov	r3, sl
   13444:	b	12ff4 <__assert_fail@plt+0x1d2c>
   13448:	mov	r1, #1
   1344c:	mov	r0, r5
   13450:	bl	182e4 <argp_parse@@Base+0x2198>
   13454:	cmp	r0, #0
   13458:	beq	13334 <__assert_fail@plt+0x206c>
   1345c:	ldr	r3, [r5, #28]
   13460:	b	131b8 <__assert_fail@plt+0x1ef0>
   13464:	mov	r1, #1
   13468:	mov	r0, r5
   1346c:	bl	182e4 <argp_parse@@Base+0x2198>
   13470:	cmp	r0, #0
   13474:	beq	1313c <__assert_fail@plt+0x1e74>
   13478:	ldr	r3, [r5, #28]
   1347c:	b	1312c <__assert_fail@plt+0x1e64>
   13480:	mov	r4, #1
   13484:	b	1324c <__assert_fail@plt+0x1f84>
   13488:	mov	r4, sl
   1348c:	str	r4, [sp, #12]
   13490:	b	130e8 <__assert_fail@plt+0x1e20>
   13494:	cmp	r3, #0
   13498:	beq	134c4 <__assert_fail@plt+0x21fc>
   1349c:	mov	r1, r9
   134a0:	mov	r0, fp
   134a4:	bl	16e88 <argp_parse@@Base+0xd3c>
   134a8:	mov	r4, r6
   134ac:	ldr	r3, [fp, #20]
   134b0:	str	r6, [sp, #20]
   134b4:	str	r6, [sp, #24]
   134b8:	str	r0, [sp, #12]
   134bc:	ldr	r0, [pc, #24]	; 134dc <__assert_fail@plt+0x2214>
   134c0:	b	12fe0 <__assert_fail@plt+0x1d18>
   134c4:	mov	r3, sl
   134c8:	str	r6, [sp, #20]
   134cc:	str	r6, [sp, #24]
   134d0:	mov	r4, r6
   134d4:	str	r6, [sp, #12]
   134d8:	b	12ff4 <__assert_fail@plt+0x1d2c>
   134dc:	andeq	r0, r0, #1
   134e0:	andeq	r0, r0, #4
   134e4:	andeq	r0, r0, #2
   134e8:	ldr	r3, [r0, #12]
   134ec:	ldr	r2, [r1, #12]
   134f0:	push	{r4, r5, r6, lr}
   134f4:	cmp	r3, r2
   134f8:	beq	13548 <__assert_fail@plt+0x2280>
   134fc:	mov	r5, r1
   13500:	mov	r4, r0
   13504:	mov	r1, r2
   13508:	mov	r0, r3
   1350c:	bl	134e8 <__assert_fail@plt+0x2220>
   13510:	cmp	r0, #0
   13514:	popne	{r4, r5, r6, pc}
   13518:	ldr	r3, [r5, #8]
   1351c:	ldr	r0, [r4, #8]
   13520:	mvn	r2, r3
   13524:	lsr	r2, r2, #31
   13528:	cmp	r2, r0, lsr #31
   1352c:	subne	r0, r0, r3
   13530:	subeq	r0, r3, r0
   13534:	cmp	r0, #0
   13538:	ldreq	r3, [r5, #4]
   1353c:	ldreq	r0, [r4, #4]
   13540:	subeq	r0, r3, r0
   13544:	pop	{r4, r5, r6, pc}
   13548:	ldr	r3, [r1, #8]
   1354c:	ldr	r2, [r0, #8]
   13550:	mvn	ip, r3
   13554:	ldr	lr, [r1, #4]
   13558:	lsr	ip, ip, #31
   1355c:	cmp	ip, r2, lsr #31
   13560:	ldr	r1, [r0, #4]
   13564:	subne	r0, r2, r3
   13568:	subeq	r0, r3, r2
   1356c:	cmp	r0, #0
   13570:	subeq	r0, lr, r1
   13574:	pop	{r4, r5, r6, pc}
   13578:	push	{r4, r5, r6, r7, r8, r9, lr}
   1357c:	sub	sp, sp, #12
   13580:	ldr	lr, [r0, #16]
   13584:	cmp	lr, #0
   13588:	movne	r2, lr
   1358c:	bne	13598 <__assert_fail@plt+0x22d0>
   13590:	b	1385c <__assert_fail@plt+0x2594>
   13594:	mov	r2, r3
   13598:	ldr	r3, [r2, #12]
   1359c:	cmp	r3, #0
   135a0:	bne	13594 <__assert_fail@plt+0x22cc>
   135a4:	ldr	ip, [r1, #16]
   135a8:	ldr	r4, [r2, #8]
   135ac:	cmp	ip, #0
   135b0:	movne	r2, ip
   135b4:	bne	135c0 <__assert_fail@plt+0x22f8>
   135b8:	b	13870 <__assert_fail@plt+0x25a8>
   135bc:	mov	r2, r3
   135c0:	ldr	r3, [r2, #12]
   135c4:	cmp	r3, #0
   135c8:	bne	135bc <__assert_fail@plt+0x22f4>
   135cc:	ldr	r3, [r2, #8]
   135d0:	mvn	r2, r3
   135d4:	lsr	r2, r2, #31
   135d8:	cmp	r2, r4, lsr #31
   135dc:	subne	r4, r4, r3
   135e0:	subeq	r4, r3, r4
   135e4:	cmp	r4, #0
   135e8:	bne	13650 <__assert_fail@plt+0x2388>
   135ec:	adds	r4, ip, #0
   135f0:	movne	r4, #1
   135f4:	cmp	lr, #0
   135f8:	rsbeq	r4, r4, #0
   135fc:	rsbne	r4, r4, #1
   13600:	cmp	r4, #0
   13604:	bne	13650 <__assert_fail@plt+0x2388>
   13608:	cmp	lr, #0
   1360c:	mov	r5, r1
   13610:	mov	r6, r0
   13614:	beq	1366c <__assert_fail@plt+0x23a4>
   13618:	ldr	r0, [lr, #20]
   1361c:	ldr	r2, [ip, #20]
   13620:	cmp	r0, r2
   13624:	ble	13830 <__assert_fail@plt+0x2568>
   13628:	mov	r0, lr
   1362c:	ldr	r0, [r0, #12]
   13630:	ldr	r3, [r0, #20]
   13634:	cmp	r2, r3
   13638:	blt	1362c <__assert_fail@plt+0x2364>
   1363c:	mov	r1, ip
   13640:	bl	134e8 <__assert_fail@plt+0x2220>
   13644:	cmp	r0, #0
   13648:	movne	r4, r0
   1364c:	moveq	r4, #1
   13650:	mov	r0, r4
   13654:	add	sp, sp, #12
   13658:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1365c:	mov	r0, lr
   13660:	bl	134e8 <__assert_fail@plt+0x2220>
   13664:	subs	r4, r0, #0
   13668:	bne	13650 <__assert_fail@plt+0x2388>
   1366c:	ldr	r4, [r5, #12]
   13670:	ldr	r3, [r6, #12]
   13674:	mvn	r2, r4
   13678:	lsr	r2, r2, #31
   1367c:	cmp	r2, r3, lsr #31
   13680:	subne	r4, r3, r4
   13684:	subeq	r4, r4, r3
   13688:	cmp	r4, #0
   1368c:	bne	13650 <__assert_fail@plt+0x2388>
   13690:	ldr	r2, [r6, #4]
   13694:	ldr	lr, [r6]
   13698:	cmp	r2, #0
   1369c:	beq	136c8 <__assert_fail@plt+0x2400>
   136a0:	add	r3, lr, #24
   136a4:	ldr	r1, [r3, #-24]	; 0xffffffe8
   136a8:	cmp	r1, #0
   136ac:	beq	136bc <__assert_fail@plt+0x23f4>
   136b0:	ldr	r0, [r3, #-12]
   136b4:	tst	r0, #2
   136b8:	beq	13878 <__assert_fail@plt+0x25b0>
   136bc:	subs	r2, r2, #1
   136c0:	add	r3, r3, #24
   136c4:	bne	136a4 <__assert_fail@plt+0x23dc>
   136c8:	ldr	r2, [r5, #4]
   136cc:	mov	ip, #0
   136d0:	cmp	r2, ip
   136d4:	str	ip, [sp]
   136d8:	ldr	r3, [r5]
   136dc:	beq	138e8 <__assert_fail@plt+0x2620>
   136e0:	add	r3, r3, #24
   136e4:	ldr	r1, [r3, #-24]	; 0xffffffe8
   136e8:	cmp	r1, #0
   136ec:	beq	136fc <__assert_fail@plt+0x2434>
   136f0:	ldr	r0, [r3, #-12]
   136f4:	tst	r0, #2
   136f8:	beq	1370c <__assert_fail@plt+0x2444>
   136fc:	subs	r2, r2, #1
   13700:	add	r3, r3, #24
   13704:	bne	136e4 <__assert_fail@plt+0x241c>
   13708:	mov	r1, r2
   1370c:	ldr	r3, [lr, #12]
   13710:	str	r1, [sp, #4]
   13714:	ands	r3, ip, r3, lsr #3
   13718:	beq	138e0 <__assert_fail@plt+0x2618>
   1371c:	mov	r0, sp
   13720:	bl	129e8 <__assert_fail@plt+0x1720>
   13724:	ldr	r3, [r5]
   13728:	cmp	r0, #0
   1372c:	bne	138cc <__assert_fail@plt+0x2604>
   13730:	ldr	r3, [r3, #12]
   13734:	tst	r3, #8
   13738:	beq	13760 <__assert_fail@plt+0x2498>
   1373c:	ldr	r3, [sp, #4]
   13740:	cmp	r3, #0
   13744:	beq	13760 <__assert_fail@plt+0x2498>
   13748:	add	r0, sp, #4
   1374c:	bl	129e8 <__assert_fail@plt+0x1720>
   13750:	cmp	r0, #0
   13754:	subne	r4, r4, #1
   13758:	cmp	r4, #0
   1375c:	bne	13650 <__assert_fail@plt+0x2388>
   13760:	ldr	r2, [r6, #20]
   13764:	mov	r0, r6
   13768:	mov	r3, #0
   1376c:	ldr	r2, [r2, #24]
   13770:	ldr	r1, [pc, #408]	; 13910 <__assert_fail@plt+0x2648>
   13774:	bl	128ac <__assert_fail@plt+0x15e4>
   13778:	ldr	r2, [r5, #20]
   1377c:	mov	r3, #0
   13780:	ldr	r1, [pc, #392]	; 13910 <__assert_fail@plt+0x2648>
   13784:	ldr	r2, [r2, #24]
   13788:	uxtb	r6, r0
   1378c:	mov	r0, r5
   13790:	bl	128ac <__assert_fail@plt+0x15e4>
   13794:	cmp	r6, #0
   13798:	lslne	r4, r6, #2
   1379c:	movne	r7, r6
   137a0:	uxtb	r5, r0
   137a4:	beq	138b0 <__assert_fail@plt+0x25e8>
   137a8:	cmp	r5, #0
   137ac:	lslne	r9, r5, #2
   137b0:	movne	r8, r5
   137b4:	beq	13894 <__assert_fail@plt+0x25cc>
   137b8:	bl	11160 <__ctype_tolower_loc@plt>
   137bc:	ldr	r3, [r0]
   137c0:	ldr	r4, [r3, r4]
   137c4:	ldr	r3, [r3, r9]
   137c8:	subs	r4, r4, r3
   137cc:	bne	13650 <__assert_fail@plt+0x2388>
   137d0:	subs	r4, r8, r7
   137d4:	bne	13650 <__assert_fail@plt+0x2388>
   137d8:	adds	r4, r5, #0
   137dc:	movne	r4, #1
   137e0:	cmp	r6, #0
   137e4:	rsbeq	r4, r4, #0
   137e8:	rsbne	r4, r4, #1
   137ec:	cmp	r4, #0
   137f0:	bne	13650 <__assert_fail@plt+0x2388>
   137f4:	cmp	r6, #0
   137f8:	bne	13650 <__assert_fail@plt+0x2388>
   137fc:	ldm	sp, {r0, r1}
   13800:	adds	r4, r1, #0
   13804:	movne	r4, #1
   13808:	cmp	r0, #0
   1380c:	rsbeq	r4, r4, #0
   13810:	rsbne	r4, r4, #1
   13814:	cmp	r4, #0
   13818:	bne	13650 <__assert_fail@plt+0x2388>
   1381c:	cmp	r0, #0
   13820:	beq	13650 <__assert_fail@plt+0x2388>
   13824:	bl	110e8 <strcasecmp@plt>
   13828:	mov	r4, r0
   1382c:	b	13650 <__assert_fail@plt+0x2388>
   13830:	mov	r1, ip
   13834:	bge	1365c <__assert_fail@plt+0x2394>
   13838:	ldr	r1, [r1, #12]
   1383c:	ldr	r3, [r1, #20]
   13840:	cmp	r0, r3
   13844:	blt	13838 <__assert_fail@plt+0x2570>
   13848:	mov	r0, lr
   1384c:	bl	134e8 <__assert_fail@plt+0x2220>
   13850:	subs	r4, r0, #0
   13854:	mvneq	r4, #0
   13858:	b	13650 <__assert_fail@plt+0x2388>
   1385c:	ldr	ip, [r1, #16]
   13860:	ldr	r4, [r0, #12]
   13864:	cmp	ip, #0
   13868:	movne	r2, ip
   1386c:	bne	135c0 <__assert_fail@plt+0x22f8>
   13870:	ldr	r3, [r1, #12]
   13874:	b	135d0 <__assert_fail@plt+0x2308>
   13878:	ldr	r2, [r5, #4]
   1387c:	str	r1, [sp]
   13880:	cmp	r2, #0
   13884:	ldr	r3, [r5]
   13888:	beq	138f0 <__assert_fail@plt+0x2628>
   1388c:	mov	ip, #1
   13890:	b	136e0 <__assert_fail@plt+0x2418>
   13894:	ldr	r3, [sp, #4]
   13898:	cmp	r3, #0
   1389c:	moveq	r9, r5
   138a0:	ldrbne	r8, [r3]
   138a4:	moveq	r8, r5
   138a8:	lslne	r9, r8, #2
   138ac:	b	137b8 <__assert_fail@plt+0x24f0>
   138b0:	ldr	r3, [sp]
   138b4:	cmp	r3, #0
   138b8:	moveq	r4, r6
   138bc:	ldrbne	r7, [r3]
   138c0:	moveq	r7, r6
   138c4:	lslne	r4, r7, #2
   138c8:	b	137a8 <__assert_fail@plt+0x24e0>
   138cc:	ldr	r3, [r3, #12]
   138d0:	tst	r3, #8
   138d4:	bne	138fc <__assert_fail@plt+0x2634>
   138d8:	mov	r4, #1
   138dc:	b	13650 <__assert_fail@plt+0x2388>
   138e0:	ldr	r3, [r5]
   138e4:	b	13730 <__assert_fail@plt+0x2468>
   138e8:	str	r2, [sp, #4]
   138ec:	b	13760 <__assert_fail@plt+0x2498>
   138f0:	mov	r1, r2
   138f4:	mov	ip, #1
   138f8:	b	1370c <__assert_fail@plt+0x2444>
   138fc:	ldr	r3, [sp, #4]
   13900:	mov	r4, #1
   13904:	cmp	r3, #0
   13908:	bne	13748 <__assert_fail@plt+0x2480>
   1390c:	b	13650 <__assert_fail@plt+0x2388>
   13910:	andeq	r2, r1, r4, lsr #19
   13914:	ldr	r3, [r0, #28]
   13918:	ldr	r2, [r0, #24]
   1391c:	push	{r4, r5, r6, lr}
   13920:	mov	r5, r1
   13924:	ldr	r1, [r0, #16]
   13928:	sub	r2, r3, r2
   1392c:	cmp	r2, r1
   13930:	mov	r4, r0
   13934:	movls	r2, r3
   13938:	bhi	13994 <__assert_fail@plt+0x26cc>
   1393c:	ldr	r1, [r4, #20]
   13940:	ldr	r0, [r4, #8]
   13944:	cmp	r1, #0
   13948:	addge	r5, r5, r1
   1394c:	cmp	r5, r0
   13950:	bcc	13974 <__assert_fail@plt+0x26ac>
   13954:	ldr	r1, [r4, #32]
   13958:	cmp	r1, r3
   1395c:	bls	139a4 <__assert_fail@plt+0x26dc>
   13960:	add	r1, r2, #1
   13964:	mov	r3, #10
   13968:	str	r1, [r4, #28]
   1396c:	strb	r3, [r2]
   13970:	pop	{r4, r5, r6, pc}
   13974:	ldr	r2, [r4, #32]
   13978:	cmp	r2, r3
   1397c:	bls	139c0 <__assert_fail@plt+0x26f8>
   13980:	add	r1, r3, #1
   13984:	mov	r2, #32
   13988:	str	r1, [r4, #28]
   1398c:	strb	r2, [r3]
   13990:	pop	{r4, r5, r6, pc}
   13994:	bl	17c54 <argp_parse@@Base+0x1b08>
   13998:	ldr	r3, [r4, #28]
   1399c:	mov	r2, r3
   139a0:	b	1393c <__assert_fail@plt+0x2674>
   139a4:	mov	r1, #1
   139a8:	mov	r0, r4
   139ac:	bl	182e4 <argp_parse@@Base+0x2198>
   139b0:	cmp	r0, #0
   139b4:	popeq	{r4, r5, r6, pc}
   139b8:	ldr	r2, [r4, #28]
   139bc:	b	13960 <__assert_fail@plt+0x2698>
   139c0:	mov	r1, #1
   139c4:	mov	r0, r4
   139c8:	bl	182e4 <argp_parse@@Base+0x2198>
   139cc:	cmp	r0, #0
   139d0:	popeq	{r4, r5, r6, pc}
   139d4:	ldr	r3, [r4, #28]
   139d8:	b	13980 <__assert_fail@plt+0x26b8>
   139dc:	push	{r4, r5, r6, lr}
   139e0:	ldr	r5, [r0, #8]
   139e4:	ldr	r2, [r0, #12]
   139e8:	ldr	ip, [r1, #12]
   139ec:	cmp	r5, #0
   139f0:	orr	r2, r2, ip
   139f4:	beq	13a5c <__assert_fail@plt+0x2794>
   139f8:	tst	r2, #16
   139fc:	bne	13a38 <__assert_fail@plt+0x2770>
   13a00:	tst	r2, #1
   13a04:	mov	r6, r3
   13a08:	mov	r4, r0
   13a0c:	bne	13a40 <__assert_fail@plt+0x2778>
   13a10:	mov	r0, r5
   13a14:	bl	111a8 <strlen@plt>
   13a18:	add	r1, r0, #6
   13a1c:	mov	r0, r6
   13a20:	bl	13914 <__assert_fail@plt+0x264c>
   13a24:	mov	r3, r5
   13a28:	ldr	r2, [r4, #4]
   13a2c:	mov	r0, r6
   13a30:	ldr	r1, [pc, #56]	; 13a70 <__assert_fail@plt+0x27a8>
   13a34:	bl	18304 <argp_parse@@Base+0x21b8>
   13a38:	mov	r0, #0
   13a3c:	pop	{r4, r5, r6, pc}
   13a40:	ldr	r2, [r0, #4]
   13a44:	mov	r3, r5
   13a48:	mov	r0, r6
   13a4c:	ldr	r1, [pc, #32]	; 13a74 <__assert_fail@plt+0x27ac>
   13a50:	bl	18304 <argp_parse@@Base+0x21b8>
   13a54:	mov	r0, #0
   13a58:	pop	{r4, r5, r6, pc}
   13a5c:	ldr	r5, [r1, #8]
   13a60:	cmp	r5, #0
   13a64:	bne	139f8 <__assert_fail@plt+0x2730>
   13a68:	mov	r0, #0
   13a6c:	pop	{r4, r5, r6, pc}
   13a70:	andeq	r9, r1, r0, lsr #21
   13a74:	muleq	r1, r4, sl
   13a78:	mov	ip, r0
   13a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a80:	mov	r8, r2
   13a84:	sub	sp, sp, #28
   13a88:	mov	r2, ip
   13a8c:	ldr	ip, [ip, #16]
   13a90:	mov	r9, r1
   13a94:	ldr	r1, [r0, #8]
   13a98:	str	ip, [sp, #8]
   13a9c:	ldr	ip, [r8]
   13aa0:	str	r1, [sp, #16]
   13aa4:	mov	r0, r1
   13aa8:	mov	r4, r3
   13aac:	ldr	r1, [pc, #456]	; 13c7c <__assert_fail@plt+0x29b4>
   13ab0:	mov	r3, r9
   13ab4:	mov	r5, ip
   13ab8:	str	ip, [sp, #20]
   13abc:	ldr	r6, [sp, #64]	; 0x40
   13ac0:	bl	12b40 <__assert_fail@plt+0x1878>
   13ac4:	subs	r3, r0, #0
   13ac8:	str	r3, [sp, #12]
   13acc:	beq	13c28 <__assert_fail@plt+0x2960>
   13ad0:	mov	r1, #10
   13ad4:	bl	11058 <strchrnul@plt>
   13ad8:	ldrb	sl, [r0]
   13adc:	mov	r7, r0
   13ae0:	cmp	sl, #0
   13ae4:	bne	13be4 <__assert_fail@plt+0x291c>
   13ae8:	ldr	r5, [sp, #12]
   13aec:	add	r1, r7, #1
   13af0:	sub	r1, r1, r5
   13af4:	mov	r0, r6
   13af8:	bl	13914 <__assert_fail@plt+0x264c>
   13afc:	ldr	r0, [r6, #28]
   13b00:	sub	fp, r7, r5
   13b04:	ldr	r1, [r6, #32]
   13b08:	add	r2, r0, fp
   13b0c:	cmp	r1, r2
   13b10:	bcs	13b2c <__assert_fail@plt+0x2864>
   13b14:	mov	r1, fp
   13b18:	mov	r0, r6
   13b1c:	bl	182e4 <argp_parse@@Base+0x2198>
   13b20:	cmp	r0, #0
   13b24:	beq	13b44 <__assert_fail@plt+0x287c>
   13b28:	ldr	r0, [r6, #28]
   13b2c:	mov	r2, fp
   13b30:	mov	r1, r5
   13b34:	bl	11088 <memcpy@plt>
   13b38:	ldr	r3, [r6, #28]
   13b3c:	add	fp, r3, fp
   13b40:	str	fp, [r6, #28]
   13b44:	ldr	r3, [sp, #16]
   13b48:	ldr	r2, [sp, #12]
   13b4c:	cmp	r3, r2
   13b50:	beq	13b5c <__assert_fail@plt+0x2894>
   13b54:	mov	r0, r2
   13b58:	bl	16fe4 <argp_parse@@Base+0xe98>
   13b5c:	ldr	r3, [sp, #8]
   13b60:	cmp	r3, #0
   13b64:	beq	13ba8 <__assert_fail@plt+0x28e0>
   13b68:	ldr	r2, [r3]
   13b6c:	cmp	r2, #0
   13b70:	beq	13ba8 <__assert_fail@plt+0x28e0>
   13b74:	ldr	r5, [sp, #8]
   13b78:	mov	r3, r4
   13b7c:	mov	r0, r2
   13b80:	str	r6, [sp]
   13b84:	mov	r2, r8
   13b88:	mov	r1, r9
   13b8c:	bl	13a78 <__assert_fail@plt+0x27b0>
   13b90:	ldr	r2, [r5, #16]!
   13b94:	cmp	r2, #0
   13b98:	clz	r3, r0
   13b9c:	lsr	r3, r3, #5
   13ba0:	bne	13b7c <__assert_fail@plt+0x28b4>
   13ba4:	mov	r4, r3
   13ba8:	cmp	r4, #0
   13bac:	moveq	sl, #0
   13bb0:	andne	sl, sl, #1
   13bb4:	cmp	sl, #0
   13bb8:	beq	13c48 <__assert_fail@plt+0x2980>
   13bbc:	ldrb	r0, [r7]
   13bc0:	cmp	r0, #0
   13bc4:	bne	13c58 <__assert_fail@plt+0x2990>
   13bc8:	ldr	r3, [sp, #20]
   13bcc:	ldrb	r4, [r3]
   13bd0:	cmp	r4, #0
   13bd4:	moveq	r0, r4
   13bd8:	strbne	r0, [r3]
   13bdc:	add	sp, sp, #28
   13be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be4:	ldrb	sl, [r5]
   13be8:	cmp	sl, #0
   13bec:	beq	13c74 <__assert_fail@plt+0x29ac>
   13bf0:	mov	fp, #0
   13bf4:	add	r5, r0, #1
   13bf8:	add	fp, fp, #1
   13bfc:	mov	r0, r5
   13c00:	mov	r1, #10
   13c04:	bl	11058 <strchrnul@plt>
   13c08:	cmp	fp, sl
   13c0c:	bne	13bf4 <__assert_fail@plt+0x292c>
   13c10:	mov	r7, r0
   13c14:	ldr	r2, [r8]
   13c18:	mov	sl, #1
   13c1c:	add	r2, r2, sl
   13c20:	str	r2, [r8]
   13c24:	b	13aec <__assert_fail@plt+0x2824>
   13c28:	ldr	r3, [sp, #8]
   13c2c:	cmp	r3, #0
   13c30:	beq	13c48 <__assert_fail@plt+0x2980>
   13c34:	ldr	r2, [r3]
   13c38:	cmp	r2, #0
   13c3c:	ldrne	r7, [sp, #12]
   13c40:	movne	sl, r7
   13c44:	bne	13b74 <__assert_fail@plt+0x28ac>
   13c48:	clz	r0, r4
   13c4c:	lsr	r0, r0, #5
   13c50:	add	sp, sp, #28
   13c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c58:	ldr	r2, [sp, #20]
   13c5c:	mov	r0, #1
   13c60:	ldrb	r3, [r2]
   13c64:	add	r3, r3, r0
   13c68:	strb	r3, [r2]
   13c6c:	add	sp, sp, #28
   13c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c74:	ldr	r5, [sp, #12]
   13c78:	b	13c14 <__assert_fail@plt+0x294c>
   13c7c:	andeq	r0, r0, #6
   13c80:	ldr	r2, [r0, #8]
   13c84:	cmp	r2, #0
   13c88:	beq	13c94 <__assert_fail@plt+0x29cc>
   13c8c:	mov	r0, #0
   13c90:	bx	lr
   13c94:	ldr	r2, [r1, #8]
   13c98:	cmp	r2, #0
   13c9c:	bne	13c8c <__assert_fail@plt+0x29c4>
   13ca0:	ldr	r1, [r1, #12]
   13ca4:	ldr	r2, [r0, #12]
   13ca8:	orr	r2, r2, r1
   13cac:	tst	r2, #16
   13cb0:	ldreq	r2, [r3]
   13cb4:	ldreq	r1, [r0, #4]
   13cb8:	addeq	r0, r2, #1
   13cbc:	streq	r0, [r3]
   13cc0:	strbeq	r1, [r2]
   13cc4:	b	13c8c <__assert_fail@plt+0x29c4>
   13cc8:	mov	r3, r0
   13ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cd0:	sub	sp, sp, #52	; 0x34
   13cd4:	ldr	r2, [r3, #16]
   13cd8:	str	r0, [sp, #24]
   13cdc:	mov	r0, #16
   13ce0:	ldr	r4, [r3]
   13ce4:	str	r1, [sp, #28]
   13ce8:	str	r2, [sp, #8]
   13cec:	bl	17b50 <argp_parse@@Base+0x1a04>
   13cf0:	subs	r3, r0, #0
   13cf4:	str	r3, [sp, #20]
   13cf8:	beq	1435c <__assert_fail@plt+0x3094>
   13cfc:	ldr	r2, [sp, #20]
   13d00:	mov	r3, #0
   13d04:	cmp	r4, #0
   13d08:	str	r3, [r2, #4]
   13d0c:	str	r3, [r2, #12]
   13d10:	beq	13f14 <__assert_fail@plt+0x2c4c>
   13d14:	ldr	r5, [r4, #12]
   13d18:	ands	r5, r5, #4
   13d1c:	bne	14370 <__assert_fail@plt+0x30a8>
   13d20:	add	r6, r4, #24
   13d24:	mov	r9, r5
   13d28:	mov	sl, r5
   13d2c:	mov	fp, r2
   13d30:	b	13d74 <__assert_fail@plt+0x2aac>
   13d34:	ldr	r3, [r6, #-12]
   13d38:	tst	r3, #4
   13d3c:	addeq	r9, r9, #1
   13d40:	streq	r9, [fp, #4]
   13d44:	tst	r3, #8
   13d48:	bne	13d70 <__assert_fail@plt+0x2aa8>
   13d4c:	sub	r3, r8, #1
   13d50:	cmp	r3, #254	; 0xfe
   13d54:	bhi	13d70 <__assert_fail@plt+0x2aa8>
   13d58:	bl	11184 <__ctype_b_loc@plt>
   13d5c:	lsl	r8, r8, #1
   13d60:	ldr	r3, [r0]
   13d64:	ldrh	r3, [r3, r8]
   13d68:	tst	r3, #16384	; 0x4000
   13d6c:	addne	sl, sl, #1
   13d70:	add	r6, r6, #24
   13d74:	ldr	r8, [r6, #-20]	; 0xffffffec
   13d78:	cmp	r8, #0
   13d7c:	bne	13d34 <__assert_fail@plt+0x2a6c>
   13d80:	ldr	r3, [r6, #-24]	; 0xffffffe8
   13d84:	cmp	r3, #0
   13d88:	bne	13d34 <__assert_fail@plt+0x2a6c>
   13d8c:	ldr	r3, [r6, #-8]
   13d90:	cmp	r3, #0
   13d94:	bne	13d34 <__assert_fail@plt+0x2a6c>
   13d98:	ldr	r7, [r6, #-4]
   13d9c:	cmp	r7, #0
   13da0:	bne	13d34 <__assert_fail@plt+0x2a6c>
   13da4:	rsb	r9, r9, r9, lsl #3
   13da8:	lsl	r0, r9, #2
   13dac:	bl	17b50 <argp_parse@@Base+0x1a04>
   13db0:	ldr	r6, [sp, #20]
   13db4:	str	r0, [r6]
   13db8:	add	r0, sl, #1
   13dbc:	bl	17b50 <argp_parse@@Base+0x1a04>
   13dc0:	ldr	r8, [r6]
   13dc4:	mov	r3, r6
   13dc8:	cmp	r0, #0
   13dcc:	cmpne	r8, #0
   13dd0:	mov	sl, r0
   13dd4:	str	r0, [r3, #8]
   13dd8:	beq	14320 <__assert_fail@plt+0x3058>
   13ddc:	ldr	r2, [sp, #20]
   13de0:	ldr	r3, [pc, #1436]	; 14384 <__assert_fail@plt+0x30bc>
   13de4:	ldr	r2, [r2, #4]
   13de8:	cmp	r2, r3
   13dec:	bhi	1430c <__assert_fail@plt+0x3044>
   13df0:	add	r8, r8, #28
   13df4:	mov	r2, r8
   13df8:	ldr	r3, [r4, #4]
   13dfc:	mov	r8, sl
   13e00:	mov	r9, r2
   13e04:	cmp	r3, #0
   13e08:	bne	13e18 <__assert_fail@plt+0x2b50>
   13e0c:	ldr	r2, [r4]
   13e10:	cmp	r2, #0
   13e14:	beq	142c4 <__assert_fail@plt+0x2ffc>
   13e18:	str	r7, [r9, #-24]	; 0xffffffe8
   13e1c:	ldr	r6, [r4, #20]
   13e20:	str	r4, [r9, #-28]	; 0xffffffe4
   13e24:	cmp	r6, #0
   13e28:	str	sl, [r9, #-20]	; 0xffffffec
   13e2c:	bne	13e44 <__assert_fail@plt+0x2b7c>
   13e30:	ldr	r2, [r4]
   13e34:	cmp	r2, #0
   13e38:	cmpeq	r3, #0
   13e3c:	movne	r6, r5
   13e40:	beq	142e8 <__assert_fail@plt+0x3020>
   13e44:	ldr	r1, [sp, #28]
   13e48:	str	r6, [r9, #-16]
   13e4c:	mov	r5, r4
   13e50:	ldr	r2, [r4, #12]
   13e54:	mov	r3, r7
   13e58:	str	r1, [r9, #-12]
   13e5c:	ldr	r1, [sp, #24]
   13e60:	str	r1, [r9, #-8]
   13e64:	add	r3, r3, #1
   13e68:	tst	r2, #8
   13e6c:	str	r3, [r9, #-24]	; 0xffffffe8
   13e70:	bne	13edc <__assert_fail@plt+0x2c14>
   13e74:	ldr	fp, [r4, #4]
   13e78:	sub	r3, fp, #1
   13e7c:	cmp	r3, #254	; 0xfe
   13e80:	bhi	13edc <__assert_fail@plt+0x2c14>
   13e84:	bl	11184 <__ctype_b_loc@plt>
   13e88:	lsl	r3, fp, #1
   13e8c:	ldr	r2, [r0]
   13e90:	ldrh	r3, [r2, r3]
   13e94:	tst	r3, #16384	; 0x4000
   13e98:	beq	13edc <__assert_fail@plt+0x2c14>
   13e9c:	cmp	r8, sl
   13ea0:	uxtb	r1, fp
   13ea4:	bcs	13ed4 <__assert_fail@plt+0x2c0c>
   13ea8:	ldrb	r3, [r8]
   13eac:	cmp	r3, r1
   13eb0:	movne	r3, r8
   13eb4:	subne	r0, sl, #1
   13eb8:	bne	13ecc <__assert_fail@plt+0x2c04>
   13ebc:	b	13edc <__assert_fail@plt+0x2c14>
   13ec0:	ldrb	r2, [r3, #1]!
   13ec4:	cmp	r2, r1
   13ec8:	beq	13edc <__assert_fail@plt+0x2c14>
   13ecc:	cmp	r0, r3
   13ed0:	bne	13ec0 <__assert_fail@plt+0x2bf8>
   13ed4:	strb	r1, [sl]
   13ed8:	add	sl, sl, #1
   13edc:	ldr	r3, [r5, #28]
   13ee0:	add	r4, r4, #24
   13ee4:	cmp	r3, #0
   13ee8:	bne	13ef8 <__assert_fail@plt+0x2c30>
   13eec:	ldr	r2, [r5, #24]
   13ef0:	cmp	r2, #0
   13ef4:	beq	142a0 <__assert_fail@plt+0x2fd8>
   13ef8:	ldr	r2, [r5, #36]	; 0x24
   13efc:	tst	r2, #4
   13f00:	beq	142b8 <__assert_fail@plt+0x2ff0>
   13f04:	ldr	r3, [r9, #-24]	; 0xffffffe8
   13f08:	mov	r5, r4
   13f0c:	b	13e64 <__assert_fail@plt+0x2b9c>
   13f10:	strb	r3, [sl]
   13f14:	ldr	r3, [sp, #8]
   13f18:	cmp	r3, #0
   13f1c:	beq	14058 <__assert_fail@plt+0x2d90>
   13f20:	ldr	r3, [r3]
   13f24:	cmp	r3, #0
   13f28:	beq	14058 <__assert_fail@plt+0x2d90>
   13f2c:	ldr	r3, [sp, #20]
   13f30:	add	r3, r3, #12
   13f34:	str	r3, [sp, #44]	; 0x2c
   13f38:	ldr	r3, [sp, #8]
   13f3c:	ldr	r5, [r3, #12]
   13f40:	cmp	r5, #0
   13f44:	ldrne	r6, [r3, #8]
   13f48:	bne	13f5c <__assert_fail@plt+0x2c94>
   13f4c:	ldr	r3, [sp, #8]
   13f50:	ldr	r6, [r3, #8]
   13f54:	cmp	r6, #0
   13f58:	beq	14280 <__assert_fail@plt+0x2fb8>
   13f5c:	ldr	r7, [sp, #24]
   13f60:	ldr	r2, [sp, #8]
   13f64:	mov	r0, #28
   13f68:	ldr	r3, [r7, #16]
   13f6c:	sub	r3, r2, r3
   13f70:	asr	r4, r3, #4
   13f74:	bl	17b50 <argp_parse@@Base+0x1a04>
   13f78:	subs	r1, r0, #0
   13f7c:	beq	13fbc <__assert_fail@plt+0x2cf4>
   13f80:	ldr	r3, [sp, #28]
   13f84:	ldr	r0, [sp, #20]
   13f88:	cmp	r3, #0
   13f8c:	str	r3, [r1, #12]
   13f90:	ldrne	r3, [r3, #20]
   13f94:	ldr	r2, [r0, #12]
   13f98:	addne	r3, r3, #1
   13f9c:	moveq	r3, #0
   13fa0:	str	r5, [r1, #8]
   13fa4:	str	r6, [r1]
   13fa8:	str	r4, [r1, #4]
   13fac:	str	r7, [r1, #16]
   13fb0:	str	r3, [r1, #20]
   13fb4:	str	r2, [r1, #24]
   13fb8:	str	r1, [r0, #12]
   13fbc:	ldr	r3, [sp, #8]
   13fc0:	ldr	r0, [r3]
   13fc4:	bl	13cc8 <__assert_fail@plt+0x2a00>
   13fc8:	ldr	r3, [sp, #20]
   13fcc:	ldr	r2, [r3, #12]
   13fd0:	cmp	r2, #0
   13fd4:	str	r0, [sp, #16]
   13fd8:	bne	13fe4 <__assert_fail@plt+0x2d1c>
   13fdc:	b	14288 <__assert_fail@plt+0x2fc0>
   13fe0:	mov	r2, r3
   13fe4:	ldr	r3, [r2, #24]
   13fe8:	cmp	r3, #0
   13fec:	bne	13fe0 <__assert_fail@plt+0x2d18>
   13ff0:	add	r2, r2, #24
   13ff4:	ldr	r0, [sp, #16]
   13ff8:	mov	ip, r0
   13ffc:	ldr	r3, [r0, #4]
   14000:	ldr	r1, [r0, #12]
   14004:	cmp	r3, #0
   14008:	str	r1, [r2]
   1400c:	mov	r2, #0
   14010:	str	r2, [r0, #12]
   14014:	beq	1403c <__assert_fail@plt+0x2d74>
   14018:	ldr	lr, [sp, #20]
   1401c:	ldr	r2, [lr, #4]
   14020:	cmp	r2, #0
   14024:	bne	14064 <__assert_fail@plt+0x2d9c>
   14028:	ldr	r0, [r0]
   1402c:	ldr	r1, [ip, #8]
   14030:	stm	lr, {r0, r3}
   14034:	str	r1, [lr, #8]
   14038:	str	r2, [ip, #4]
   1403c:	ldr	r0, [sp, #16]
   14040:	bl	12a60 <__assert_fail@plt+0x1798>
   14044:	ldr	r2, [sp, #8]
   14048:	ldr	r3, [r2, #16]!
   1404c:	cmp	r3, #0
   14050:	str	r2, [sp, #8]
   14054:	bne	13f38 <__assert_fail@plt+0x2c70>
   14058:	ldr	r0, [sp, #20]
   1405c:	add	sp, sp, #52	; 0x34
   14060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14064:	add	r3, r3, r2
   14068:	str	r3, [sp, #36]	; 0x24
   1406c:	rsb	r0, r3, r3, lsl #3
   14070:	lsl	r0, r0, #2
   14074:	bl	17b50 <argp_parse@@Base+0x1a04>
   14078:	ldr	r3, [sp, #20]
   1407c:	mov	r4, r0
   14080:	str	r0, [sp, #32]
   14084:	ldr	r0, [r3, #8]
   14088:	bl	111a8 <strlen@plt>
   1408c:	ldr	r3, [sp, #16]
   14090:	mov	r8, r0
   14094:	ldr	r0, [r3, #8]
   14098:	bl	111a8 <strlen@plt>
   1409c:	add	r0, r8, r0
   140a0:	add	r0, r0, #1
   140a4:	bl	17b50 <argp_parse@@Base+0x1a04>
   140a8:	cmp	r4, #0
   140ac:	cmpne	r0, #0
   140b0:	mov	r7, r0
   140b4:	beq	14334 <__assert_fail@plt+0x306c>
   140b8:	ldr	r3, [sp, #36]	; 0x24
   140bc:	ldr	r2, [pc, #704]	; 14384 <__assert_fail@plt+0x30bc>
   140c0:	cmp	r3, r2
   140c4:	bhi	14348 <__assert_fail@plt+0x3080>
   140c8:	ldr	r5, [sp, #20]
   140cc:	ldr	r9, [sp, #32]
   140d0:	ldm	r5, {r3, r4}
   140d4:	mov	r0, r9
   140d8:	rsb	r6, r4, r4, lsl #3
   140dc:	mov	r1, r3
   140e0:	lsl	r6, r6, #2
   140e4:	mov	r2, r6
   140e8:	str	r3, [sp, #40]	; 0x28
   140ec:	bl	11178 <mempcpy@plt>
   140f0:	ldr	r3, [sp, #16]
   140f4:	ldr	r1, [r3, #4]
   140f8:	mov	ip, r1
   140fc:	str	r1, [sp, #4]
   14100:	rsb	r2, ip, ip, lsl #3
   14104:	ldr	r1, [r3]
   14108:	lsl	r2, r2, #2
   1410c:	bl	11088 <memcpy@plt>
   14110:	ldr	r5, [r5, #8]
   14114:	mov	r2, r8
   14118:	mov	r1, r5
   1411c:	mov	r0, r7
   14120:	bl	11088 <memcpy@plt>
   14124:	cmp	r4, #0
   14128:	beq	14298 <__assert_fail@plt+0x2fd0>
   1412c:	mov	r2, r9
   14130:	ldr	r3, [r2, #8]
   14134:	subs	r4, r4, #1
   14138:	sub	r3, r3, r5
   1413c:	add	r3, r7, r3
   14140:	str	r3, [r2, #8]
   14144:	add	r2, r2, #28
   14148:	bne	14130 <__assert_fail@plt+0x2e68>
   1414c:	ldr	r3, [sp, #32]
   14150:	add	r1, r3, r6
   14154:	ldr	r3, [sp, #4]
   14158:	ldr	r2, [sp, #16]
   1415c:	cmp	r3, #0
   14160:	add	r3, r7, r8
   14164:	str	r3, [sp, #12]
   14168:	ldr	sl, [r2, #8]
   1416c:	beq	14290 <__assert_fail@plt+0x2fc8>
   14170:	sub	r8, r3, #1
   14174:	add	fp, r1, #28
   14178:	mov	r9, r3
   1417c:	mov	r3, r8
   14180:	mov	r8, fp
   14184:	mov	fp, sl
   14188:	mov	sl, r3
   1418c:	ldr	r5, [r8, #-24]	; 0xffffffe8
   14190:	str	r9, [r8, #-20]	; 0xffffffec
   14194:	cmp	r5, #0
   14198:	ldr	r4, [r8, #-28]	; 0xffffffe4
   1419c:	bne	141b0 <__assert_fail@plt+0x2ee8>
   141a0:	b	1423c <__assert_fail@plt+0x2f74>
   141a4:	subs	r5, r5, #1
   141a8:	add	r4, r4, #24
   141ac:	beq	1423c <__assert_fail@plt+0x2f74>
   141b0:	ldr	r3, [r4, #12]
   141b4:	tst	r3, #8
   141b8:	bne	141a4 <__assert_fail@plt+0x2edc>
   141bc:	ldr	r6, [r4, #4]
   141c0:	sub	r3, r6, #1
   141c4:	cmp	r3, #254	; 0xfe
   141c8:	bhi	141a4 <__assert_fail@plt+0x2edc>
   141cc:	bl	11184 <__ctype_b_loc@plt>
   141d0:	lsl	r3, r6, #1
   141d4:	ldr	r2, [r0]
   141d8:	ldrh	r3, [r2, r3]
   141dc:	tst	r3, #16384	; 0x4000
   141e0:	beq	141a4 <__assert_fail@plt+0x2edc>
   141e4:	ldrb	r1, [fp]
   141e8:	cmp	r1, r6
   141ec:	bne	141a4 <__assert_fail@plt+0x2edc>
   141f0:	ldr	r3, [sp, #12]
   141f4:	cmp	r7, r3
   141f8:	bcs	14224 <__assert_fail@plt+0x2f5c>
   141fc:	ldrb	r3, [r7]
   14200:	cmp	r3, r1
   14204:	movne	r3, r7
   14208:	bne	1421c <__assert_fail@plt+0x2f54>
   1420c:	b	1422c <__assert_fail@plt+0x2f64>
   14210:	ldrb	r2, [r3, #1]!
   14214:	cmp	r2, r1
   14218:	beq	1422c <__assert_fail@plt+0x2f64>
   1421c:	cmp	sl, r3
   14220:	bne	14210 <__assert_fail@plt+0x2f48>
   14224:	strb	r1, [r9]
   14228:	add	r9, r9, #1
   1422c:	subs	r5, r5, #1
   14230:	add	fp, fp, #1
   14234:	add	r4, r4, #24
   14238:	bne	141b0 <__assert_fail@plt+0x2ee8>
   1423c:	ldr	r3, [sp, #4]
   14240:	add	r8, r8, #28
   14244:	subs	r3, r3, #1
   14248:	str	r3, [sp, #4]
   1424c:	bne	1418c <__assert_fail@plt+0x2ec4>
   14250:	mov	r3, #0
   14254:	strb	r3, [r9]
   14258:	ldr	r0, [sp, #40]	; 0x28
   1425c:	bl	16fe4 <argp_parse@@Base+0xe98>
   14260:	ldr	r4, [sp, #20]
   14264:	ldr	r0, [r4, #8]
   14268:	bl	16fe4 <argp_parse@@Base+0xe98>
   1426c:	ldr	r2, [sp, #32]
   14270:	str	r2, [r4]
   14274:	ldr	r2, [sp, #36]	; 0x24
   14278:	stmib	r4, {r2, r7}
   1427c:	b	1403c <__assert_fail@plt+0x2d74>
   14280:	ldr	r1, [sp, #28]
   14284:	b	13fbc <__assert_fail@plt+0x2cf4>
   14288:	ldr	r2, [sp, #44]	; 0x2c
   1428c:	b	13ff4 <__assert_fail@plt+0x2d2c>
   14290:	ldr	r9, [sp, #12]
   14294:	b	14250 <__assert_fail@plt+0x2f88>
   14298:	ldr	r1, [sp, #32]
   1429c:	b	14154 <__assert_fail@plt+0x2e8c>
   142a0:	ldr	r2, [r5, #40]	; 0x28
   142a4:	cmp	r2, #0
   142a8:	bne	13ef8 <__assert_fail@plt+0x2c30>
   142ac:	ldr	r2, [r5, #44]	; 0x2c
   142b0:	cmp	r2, #0
   142b4:	bne	13ef8 <__assert_fail@plt+0x2c30>
   142b8:	add	r9, r9, #28
   142bc:	mov	r5, r6
   142c0:	b	13e04 <__assert_fail@plt+0x2b3c>
   142c4:	ldr	r2, [r4, #16]
   142c8:	cmp	r2, #0
   142cc:	beq	142f0 <__assert_fail@plt+0x3028>
   142d0:	str	r3, [r9, #-24]	; 0xffffffe8
   142d4:	ldr	r6, [r4, #20]
   142d8:	str	r4, [r9, #-28]	; 0xffffffe4
   142dc:	cmp	r6, #0
   142e0:	str	sl, [r9, #-20]	; 0xffffffec
   142e4:	bne	13e44 <__assert_fail@plt+0x2b7c>
   142e8:	add	r6, r5, #1
   142ec:	b	13e44 <__assert_fail@plt+0x2b7c>
   142f0:	ldr	r6, [r4, #20]
   142f4:	cmp	r6, #0
   142f8:	beq	13f10 <__assert_fail@plt+0x2c48>
   142fc:	str	r4, [r9, #-28]	; 0xffffffe4
   14300:	str	r3, [r9, #-24]	; 0xffffffe8
   14304:	str	sl, [r9, #-20]	; 0xffffffec
   14308:	b	13e44 <__assert_fail@plt+0x2b7c>
   1430c:	ldr	r3, [pc, #116]	; 14388 <__assert_fail@plt+0x30c0>
   14310:	mov	r2, #476	; 0x1dc
   14314:	ldr	r1, [pc, #112]	; 1438c <__assert_fail@plt+0x30c4>
   14318:	ldr	r0, [pc, #112]	; 14390 <__assert_fail@plt+0x30c8>
   1431c:	bl	112c8 <__assert_fail@plt>
   14320:	ldr	r3, [pc, #96]	; 14388 <__assert_fail@plt+0x30c0>
   14324:	ldr	r2, [pc, #104]	; 14394 <__assert_fail@plt+0x30cc>
   14328:	ldr	r1, [pc, #92]	; 1438c <__assert_fail@plt+0x30c4>
   1432c:	ldr	r0, [pc, #100]	; 14398 <__assert_fail@plt+0x30d0>
   14330:	bl	112c8 <__assert_fail@plt>
   14334:	ldr	r3, [pc, #96]	; 1439c <__assert_fail@plt+0x30d4>
   14338:	ldr	r2, [pc, #96]	; 143a0 <__assert_fail@plt+0x30d8>
   1433c:	ldr	r1, [pc, #72]	; 1438c <__assert_fail@plt+0x30c4>
   14340:	ldr	r0, [pc, #92]	; 143a4 <__assert_fail@plt+0x30dc>
   14344:	bl	112c8 <__assert_fail@plt>
   14348:	ldr	r3, [pc, #76]	; 1439c <__assert_fail@plt+0x30d4>
   1434c:	mov	r2, #972	; 0x3cc
   14350:	ldr	r1, [pc, #52]	; 1438c <__assert_fail@plt+0x30c4>
   14354:	ldr	r0, [pc, #76]	; 143a8 <__assert_fail@plt+0x30e0>
   14358:	bl	112c8 <__assert_fail@plt>
   1435c:	ldr	r3, [pc, #36]	; 14388 <__assert_fail@plt+0x30c0>
   14360:	ldr	r2, [pc, #68]	; 143ac <__assert_fail@plt+0x30e4>
   14364:	ldr	r1, [pc, #32]	; 1438c <__assert_fail@plt+0x30c4>
   14368:	ldr	r0, [pc, #64]	; 143b0 <__assert_fail@plt+0x30e8>
   1436c:	bl	112c8 <__assert_fail@plt>
   14370:	ldr	r3, [pc, #16]	; 14388 <__assert_fail@plt+0x30c0>
   14374:	mov	r2, #460	; 0x1cc
   14378:	ldr	r1, [pc, #12]	; 1438c <__assert_fail@plt+0x30c4>
   1437c:	ldr	r0, [pc, #48]	; 143b4 <__assert_fail@plt+0x30ec>
   14380:	bl	112c8 <__assert_fail@plt>
   14384:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   14388:	andeq	r9, r1, r8, ror #19
   1438c:	andeq	r9, r1, ip, lsr #21
   14390:	strdeq	r9, [r1], -r0
   14394:	ldrdeq	r0, [r0], -sl
   14398:	andeq	r9, r1, ip, asr #21
   1439c:	strdeq	r9, [r1], -r4
   143a0:	andeq	r0, r0, sl, asr #7
   143a4:	andeq	r9, r1, ip, lsr #22
   143a8:	andeq	r9, r1, r8, asr #22
   143ac:	andeq	r0, r0, r2, asr #3
   143b0:			; <UNDEFINED> instruction: 0x00019ab8
   143b4:			; <UNDEFINED> instruction: 0x00019abc
   143b8:	cmp	r1, #0
   143bc:	push	{r4, r5, r6, r7, r8, lr}
   143c0:	beq	14438 <__assert_fail@plt+0x3170>
   143c4:	sub	r7, r1, #1
   143c8:	mov	r8, r2
   143cc:	mov	r6, r0
   143d0:	ldm	r6, {r4, r5}
   143d4:	cmp	r5, #0
   143d8:	sub	r5, r5, #1
   143dc:	beq	1441c <__assert_fail@plt+0x3154>
   143e0:	add	r4, r4, #24
   143e4:	ldr	r3, [r4, #-24]	; 0xffffffe8
   143e8:	mov	r1, r8
   143ec:	subs	r0, r3, #0
   143f0:	sub	r5, r5, #1
   143f4:	beq	14410 <__assert_fail@plt+0x3148>
   143f8:	ldr	r3, [r4, #-12]
   143fc:	tst	r3, #2
   14400:	bne	14410 <__assert_fail@plt+0x3148>
   14404:	bl	11004 <strcmp@plt>
   14408:	cmp	r0, #0
   1440c:	beq	14430 <__assert_fail@plt+0x3168>
   14410:	cmn	r5, #1
   14414:	add	r4, r4, #24
   14418:	bne	143e4 <__assert_fail@plt+0x311c>
   1441c:	sub	r7, r7, #1
   14420:	cmn	r7, #1
   14424:	add	r6, r6, #28
   14428:	bne	143d0 <__assert_fail@plt+0x3108>
   1442c:	mov	r6, #0
   14430:	mov	r0, r6
   14434:	pop	{r4, r5, r6, r7, r8, pc}
   14438:	mov	r6, r1
   1443c:	b	14430 <__assert_fail@plt+0x3168>
   14440:	push	{r4, r5, r6, lr}
   14444:	subs	r4, r0, #0
   14448:	mov	r5, r1
   1444c:	beq	14460 <__assert_fail@plt+0x3198>
   14450:	mov	r1, #10
   14454:	bl	111b4 <strchr@plt>
   14458:	adds	r4, r0, #0
   1445c:	movne	r4, #1
   14460:	cmp	r5, #0
   14464:	beq	14490 <__assert_fail@plt+0x31c8>
   14468:	ldr	r3, [r5]
   1446c:	cmp	r3, #0
   14470:	beq	14490 <__assert_fail@plt+0x31c8>
   14474:	ldr	r1, [r3, #16]
   14478:	ldr	r0, [r3, #8]
   1447c:	bl	14440 <__assert_fail@plt+0x3178>
   14480:	ldr	r3, [r5, #16]!
   14484:	cmp	r3, #0
   14488:	add	r4, r4, r0
   1448c:	bne	14474 <__assert_fail@plt+0x31ac>
   14490:	mov	r0, r4
   14494:	pop	{r4, r5, r6, pc}
   14498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1449c:	add	fp, sp, #32
   144a0:	sub	sp, sp, #12
   144a4:	ldr	r5, [r0, #4]
   144a8:	cmp	r5, #0
   144ac:	bne	144b8 <__assert_fail@plt+0x31f0>
   144b0:	sub	sp, fp, #32
   144b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b8:	mov	r6, r0
   144bc:	ldr	r0, [r0, #8]
   144c0:	mov	r9, r1
   144c4:	bl	111a8 <strlen@plt>
   144c8:	ldr	r8, [pc, #360]	; 14638 <__assert_fail@plt+0x3370>
   144cc:	ldr	r4, [r6]
   144d0:	sub	r7, fp, #36	; 0x24
   144d4:	add	r3, r0, #15
   144d8:	bic	r3, r3, #7
   144dc:	sub	sp, sp, r3
   144e0:	mov	sl, sp
   144e4:	str	sp, [r7, #-4]!
   144e8:	ldr	r2, [r4, #20]
   144ec:	mov	r0, r4
   144f0:	mov	r3, r7
   144f4:	mov	r1, r8
   144f8:	ldr	r2, [r2, #24]
   144fc:	bl	128ac <__assert_fail@plt+0x15e4>
   14500:	subs	r5, r5, #1
   14504:	add	r4, r4, #28
   14508:	bne	144e8 <__assert_fail@plt+0x3220>
   1450c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14510:	cmp	sl, r3
   14514:	bcc	14618 <__assert_fail@plt+0x3350>
   14518:	ldm	r6, {r4, r5}
   1451c:	cmp	r5, #0
   14520:	beq	144b0 <__assert_fail@plt+0x31e8>
   14524:	ldr	r7, [pc, #272]	; 1463c <__assert_fail@plt+0x3374>
   14528:	ldr	r2, [r4, #20]
   1452c:	mov	r0, r4
   14530:	mov	r3, r9
   14534:	mov	r1, r7
   14538:	ldr	r2, [r2, #24]
   1453c:	bl	128ac <__assert_fail@plt+0x15e4>
   14540:	subs	r5, r5, #1
   14544:	add	r4, r4, #28
   14548:	bne	14528 <__assert_fail@plt+0x3260>
   1454c:	ldm	r6, {r7, r8}
   14550:	cmp	r8, #0
   14554:	beq	144b0 <__assert_fail@plt+0x31e8>
   14558:	ldr	sl, [pc, #224]	; 14640 <__assert_fail@plt+0x3378>
   1455c:	add	r7, r7, #28
   14560:	ldr	r5, [r7, #-24]	; 0xffffffe8
   14564:	ldr	r4, [r7, #-28]	; 0xffffffe4
   14568:	cmp	r5, #0
   1456c:	movne	r6, r4
   14570:	bne	14584 <__assert_fail@plt+0x32bc>
   14574:	b	145e0 <__assert_fail@plt+0x3318>
   14578:	subs	r5, r5, #1
   1457c:	add	r4, r4, #24
   14580:	beq	145e0 <__assert_fail@plt+0x3318>
   14584:	ldr	r2, [r4]
   14588:	cmp	r2, #0
   1458c:	beq	14578 <__assert_fail@plt+0x32b0>
   14590:	ldr	r1, [r4, #12]
   14594:	tst	r1, #4
   14598:	moveq	r6, r4
   1459c:	tst	r1, #2
   145a0:	bne	14578 <__assert_fail@plt+0x32b0>
   145a4:	ldr	r3, [r4, #8]
   145a8:	ldr	r0, [r6, #12]
   145ac:	cmp	r3, #0
   145b0:	orr	r1, r1, r0
   145b4:	beq	145f4 <__assert_fail@plt+0x332c>
   145b8:	tst	r1, #16
   145bc:	bne	14578 <__assert_fail@plt+0x32b0>
   145c0:	tst	r1, #1
   145c4:	moveq	r1, sl
   145c8:	ldrne	r1, [pc, #116]	; 14644 <__assert_fail@plt+0x337c>
   145cc:	mov	r0, r9
   145d0:	bl	18304 <argp_parse@@Base+0x21b8>
   145d4:	subs	r5, r5, #1
   145d8:	add	r4, r4, #24
   145dc:	bne	14584 <__assert_fail@plt+0x32bc>
   145e0:	subs	r8, r8, #1
   145e4:	add	r7, r7, #28
   145e8:	bne	14560 <__assert_fail@plt+0x3298>
   145ec:	sub	sp, fp, #32
   145f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f4:	tst	r1, #16
   145f8:	bne	14578 <__assert_fail@plt+0x32b0>
   145fc:	ldr	r3, [r6, #8]
   14600:	cmp	r3, #0
   14604:	bne	145c0 <__assert_fail@plt+0x32f8>
   14608:	ldr	r1, [pc, #56]	; 14648 <__assert_fail@plt+0x3380>
   1460c:	mov	r0, r9
   14610:	bl	18304 <argp_parse@@Base+0x21b8>
   14614:	b	14578 <__assert_fail@plt+0x32b0>
   14618:	add	r1, r3, #1
   1461c:	str	r1, [fp, #-40]	; 0xffffffd8
   14620:	mov	r2, sl
   14624:	ldr	r1, [pc, #32]	; 1464c <__assert_fail@plt+0x3384>
   14628:	strb	r5, [r3]
   1462c:	mov	r0, r9
   14630:	bl	18304 <argp_parse@@Base+0x21b8>
   14634:	b	14518 <__assert_fail@plt+0x3250>
   14638:	andeq	r3, r1, r0, lsl #25
   1463c:	ldrdeq	r3, [r1], -ip
   14640:	muleq	r1, r4, fp
   14644:	andeq	r9, r1, r4, lsl #23
   14648:	andeq	r9, r1, r0, lsr #23
   1464c:	andeq	r9, r1, ip, ror fp

00014650 <argp_failure@@Base>:
   14650:	push	{r3}		; (str r3, [sp, #-4]!)
   14654:	push	{r4, r5, r6, r7, lr}
   14658:	subs	r5, r0, #0
   1465c:	sub	sp, sp, #200	; 0xc8
   14660:	mov	r7, r1
   14664:	mov	r6, r2
   14668:	beq	147b8 <argp_failure@@Base+0x168>
   1466c:	ldr	r3, [r5, #16]
   14670:	tst	r3, #2
   14674:	bne	147a8 <argp_failure@@Base+0x158>
   14678:	ldr	r4, [r5, #44]	; 0x2c
   1467c:	cmp	r4, #0
   14680:	beq	147a8 <argp_failure@@Base+0x158>
   14684:	mov	r0, r4
   14688:	bl	1125c <flockfile@plt>
   1468c:	ldr	r0, [r5, #40]	; 0x28
   14690:	mov	r1, r4
   14694:	bl	10fec <fputs_unlocked@plt>
   14698:	ldr	r3, [sp, #220]	; 0xdc
   1469c:	cmp	r3, #0
   146a0:	beq	146fc <argp_failure@@Base+0xac>
   146a4:	ldr	r3, [r4, #20]
   146a8:	ldr	r1, [r4, #24]
   146ac:	add	r2, sp, #224	; 0xe0
   146b0:	cmp	r3, r1
   146b4:	str	r2, [sp]
   146b8:	addcc	r1, r3, #1
   146bc:	movcc	r2, #58	; 0x3a
   146c0:	strcc	r1, [r4, #20]
   146c4:	strbcc	r2, [r3]
   146c8:	bcs	14804 <argp_failure@@Base+0x1b4>
   146cc:	ldr	r3, [r4, #20]
   146d0:	ldr	r2, [r4, #24]
   146d4:	cmp	r3, r2
   146d8:	addcc	r1, r3, #1
   146dc:	movcc	r2, #32
   146e0:	strcc	r1, [r4, #20]
   146e4:	strbcc	r2, [r3]
   146e8:	bcs	147f4 <argp_failure@@Base+0x1a4>
   146ec:	ldr	r2, [sp]
   146f0:	ldr	r1, [sp, #220]	; 0xdc
   146f4:	mov	r0, r4
   146f8:	bl	11244 <vfprintf@plt>
   146fc:	cmp	r6, #0
   14700:	beq	14764 <argp_failure@@Base+0x114>
   14704:	ldr	r3, [r4, #20]
   14708:	ldr	r2, [r4, #24]
   1470c:	cmp	r3, r2
   14710:	addcc	r1, r3, #1
   14714:	movcc	r2, #58	; 0x3a
   14718:	strcc	r1, [r4, #20]
   1471c:	strbcc	r2, [r3]
   14720:	bcs	14824 <argp_failure@@Base+0x1d4>
   14724:	ldr	r3, [r4, #20]
   14728:	ldr	r2, [r4, #24]
   1472c:	cmp	r3, r2
   14730:	addcc	r1, r3, #1
   14734:	movcc	r2, #32
   14738:	strcc	r1, [r4, #20]
   1473c:	strbcc	r2, [r3]
   14740:	bcs	14814 <argp_failure@@Base+0x1c4>
   14744:	mov	r2, #200	; 0xc8
   14748:	mov	r1, sp
   1474c:	mov	r0, r6
   14750:	bl	111d8 <strerror_r@plt>
   14754:	cmp	r0, #0
   14758:	beq	14834 <argp_failure@@Base+0x1e4>
   1475c:	mov	r1, r4
   14760:	bl	10fec <fputs_unlocked@plt>
   14764:	ldr	r3, [r4, #20]
   14768:	ldr	r2, [r4, #24]
   1476c:	cmp	r3, r2
   14770:	addcc	r1, r3, #1
   14774:	movcc	r2, #10
   14778:	strcc	r1, [r4, #20]
   1477c:	strbcc	r2, [r3]
   14780:	bcs	147dc <argp_failure@@Base+0x18c>
   14784:	mov	r0, r4
   14788:	bl	110f4 <funlockfile@plt>
   1478c:	cmp	r7, #0
   14790:	beq	147a8 <argp_failure@@Base+0x158>
   14794:	cmp	r5, #0
   14798:	beq	147ec <argp_failure@@Base+0x19c>
   1479c:	ldr	r3, [r5, #16]
   147a0:	tst	r3, #32
   147a4:	beq	147ec <argp_failure@@Base+0x19c>
   147a8:	add	sp, sp, #200	; 0xc8
   147ac:	pop	{r4, r5, r6, r7, lr}
   147b0:	add	sp, sp, #4
   147b4:	bx	lr
   147b8:	ldr	r3, [pc, #140]	; 1484c <argp_failure@@Base+0x1fc>
   147bc:	ldr	r4, [r3]
   147c0:	cmp	r4, #0
   147c4:	beq	147a8 <argp_failure@@Base+0x158>
   147c8:	mov	r0, r4
   147cc:	bl	1125c <flockfile@plt>
   147d0:	ldr	r3, [pc, #120]	; 14850 <argp_failure@@Base+0x200>
   147d4:	ldr	r0, [r3]
   147d8:	b	14690 <argp_failure@@Base+0x40>
   147dc:	mov	r1, #10
   147e0:	mov	r0, r4
   147e4:	bl	11214 <__overflow@plt>
   147e8:	b	14784 <argp_failure@@Base+0x134>
   147ec:	mov	r0, r7
   147f0:	bl	1119c <exit@plt>
   147f4:	mov	r1, #32
   147f8:	mov	r0, r4
   147fc:	bl	11214 <__overflow@plt>
   14800:	b	146ec <argp_failure@@Base+0x9c>
   14804:	mov	r1, #58	; 0x3a
   14808:	mov	r0, r4
   1480c:	bl	11214 <__overflow@plt>
   14810:	b	146cc <argp_failure@@Base+0x7c>
   14814:	mov	r1, #32
   14818:	mov	r0, r4
   1481c:	bl	11214 <__overflow@plt>
   14820:	b	14744 <argp_failure@@Base+0xf4>
   14824:	mov	r1, #58	; 0x3a
   14828:	mov	r0, r4
   1482c:	bl	11214 <__overflow@plt>
   14830:	b	14724 <argp_failure@@Base+0xd4>
   14834:	mov	r0, r6
   14838:	bl	11154 <strerror@plt>
   1483c:	ldr	r3, [pc, #16]	; 14854 <argp_failure@@Base+0x204>
   14840:	cmp	r0, #0
   14844:	moveq	r0, r3
   14848:	b	1475c <argp_failure@@Base+0x10c>
   1484c:	andeq	fp, r2, r0, lsr #5
   14850:	muleq	r2, r8, r2
   14854:	andeq	r9, r1, r8, lsr #23
   14858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1485c:	add	fp, sp, #32
   14860:	cmp	r2, #0
   14864:	sub	sp, sp, #116	; 0x74
   14868:	str	r2, [fp, #-132]	; 0xffffff7c
   1486c:	str	r0, [fp, #-112]	; 0xffffff90
   14870:	str	r1, [fp, #-104]	; 0xffffff98
   14874:	str	r3, [fp, #-96]	; 0xffffffa0
   14878:	beq	14930 <argp_failure@@Base+0x2e0>
   1487c:	ldr	sl, [pc, #4064]	; 15864 <argp_failure@@Base+0x1214>
   14880:	mov	r0, r2
   14884:	bl	1125c <flockfile@plt>
   14888:	ldr	r3, [sl, #36]	; 0x24
   1488c:	cmp	r3, #0
   14890:	str	r3, [fp, #-108]	; 0xffffff94
   14894:	beq	14de0 <argp_failure@@Base+0x790>
   14898:	mov	r3, #0
   1489c:	mov	r1, r3
   148a0:	ldr	r2, [sl, #32]
   148a4:	ldr	r0, [fp, #-132]	; 0xffffff7c
   148a8:	bl	17bd8 <argp_parse@@Base+0x1a8c>
   148ac:	subs	r9, r0, #0
   148b0:	beq	15924 <argp_failure@@Base+0x12d4>
   148b4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148b8:	ands	r3, r3, #11
   148bc:	streq	r3, [fp, #-136]	; 0xffffff78
   148c0:	bne	1523c <argp_failure@@Base+0xbec>
   148c4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148c8:	ands	r4, r3, #3
   148cc:	bne	15030 <argp_failure@@Base+0x9e0>
   148d0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148d4:	tst	r3, #16
   148d8:	bne	1500c <argp_failure@@Base+0x9bc>
   148dc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148e0:	tst	r3, #4
   148e4:	bne	14ff0 <argp_failure@@Base+0x9a0>
   148e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148ec:	tst	r3, #8
   148f0:	bne	14984 <argp_failure@@Base+0x334>
   148f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148f8:	tst	r3, #32
   148fc:	bne	14db8 <argp_failure@@Base+0x768>
   14900:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14904:	tst	r3, #64	; 0x40
   14908:	bne	14938 <argp_failure@@Base+0x2e8>
   1490c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   14910:	bl	110f4 <funlockfile@plt>
   14914:	ldr	r3, [fp, #-136]	; 0xffffff78
   14918:	cmp	r3, #0
   1491c:	beq	14928 <argp_failure@@Base+0x2d8>
   14920:	mov	r0, r3
   14924:	bl	12a60 <__assert_fail@plt+0x1798>
   14928:	mov	r0, r9
   1492c:	bl	181c4 <argp_parse@@Base+0x2078>
   14930:	sub	sp, fp, #32
   14934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14938:	ldr	r5, [pc, #3880]	; 15868 <argp_failure@@Base+0x1218>
   1493c:	ldr	r2, [r5]
   14940:	cmp	r2, #0
   14944:	beq	1490c <argp_failure@@Base+0x2bc>
   14948:	cmp	r4, #0
   1494c:	beq	14974 <argp_failure@@Base+0x324>
   14950:	ldr	r3, [r9, #28]
   14954:	ldr	r2, [r9, #32]
   14958:	cmp	r3, r2
   1495c:	bcs	15908 <argp_failure@@Base+0x12b8>
   14960:	add	r1, r3, #1
   14964:	mov	r2, #10
   14968:	str	r1, [r9, #28]
   1496c:	strb	r2, [r3]
   14970:	ldr	r2, [r5]
   14974:	ldr	r1, [pc, #3824]	; 1586c <argp_failure@@Base+0x121c>
   14978:	mov	r0, r9
   1497c:	bl	18304 <argp_parse@@Base+0x21b8>
   14980:	b	1490c <argp_failure@@Base+0x2bc>
   14984:	ldr	r3, [fp, #-136]	; 0xffffff78
   14988:	ldr	r3, [r3, #4]
   1498c:	cmp	r3, #0
   14990:	str	r3, [fp, #-108]	; 0xffffff94
   14994:	beq	148f4 <argp_failure@@Base+0x2a4>
   14998:	cmp	r4, #0
   1499c:	beq	157b8 <argp_failure@@Base+0x1168>
   149a0:	ldr	r3, [r9, #28]
   149a4:	ldr	r2, [r9, #32]
   149a8:	cmp	r3, r2
   149ac:	bcs	1595c <argp_failure@@Base+0x130c>
   149b0:	add	r1, r3, #1
   149b4:	mov	r2, #10
   149b8:	str	r1, [r9, #28]
   149bc:	strb	r2, [r3]
   149c0:	ldr	r3, [fp, #-136]	; 0xffffff78
   149c4:	ldr	r2, [fp, #-136]	; 0xffffff78
   149c8:	ldr	r3, [r3, #4]
   149cc:	ldr	r8, [r2]
   149d0:	str	r3, [fp, #-108]	; 0xffffff94
   149d4:	ldr	r3, [fp, #-108]	; 0xffffff94
   149d8:	cmp	r3, #0
   149dc:	mov	r3, #0
   149e0:	str	r3, [fp, #-88]	; 0xffffffa8
   149e4:	str	r3, [fp, #-84]	; 0xffffffac
   149e8:	str	r3, [fp, #-80]	; 0xffffffb0
   149ec:	beq	14da8 <argp_failure@@Base+0x758>
   149f0:	str	sl, [fp, #-100]	; 0xffffff9c
   149f4:	ldr	lr, [r9, #28]
   149f8:	ldr	r3, [r9, #24]
   149fc:	ldr	r5, [r9, #16]
   14a00:	sub	lr, lr, r3
   14a04:	cmp	lr, r5
   14a08:	ldr	r6, [r8]
   14a0c:	ldr	sl, [r8, #8]
   14a10:	bhi	15510 <argp_failure@@Base+0xec0>
   14a14:	ldr	r1, [r9, #4]
   14a18:	ldr	r7, [r6, #12]
   14a1c:	str	r1, [fp, #-116]	; 0xffffff8c
   14a20:	ldr	r1, [r9, #12]
   14a24:	mov	r3, #0
   14a28:	str	r1, [fp, #-120]	; 0xffffff88
   14a2c:	sub	r1, fp, #88	; 0x58
   14a30:	str	r3, [r9, #4]
   14a34:	and	r2, r7, #8
   14a38:	str	r1, [fp, #-68]	; 0xffffffbc
   14a3c:	ldr	r1, [fp, #-104]	; 0xffffff98
   14a40:	mov	r0, #1
   14a44:	cmp	r2, r3
   14a48:	mov	r4, r2
   14a4c:	str	r0, [fp, #-64]	; 0xffffffc0
   14a50:	str	r8, [fp, #-76]	; 0xffffffb4
   14a54:	str	r9, [fp, #-72]	; 0xffffffb8
   14a58:	str	r1, [fp, #-60]	; 0xffffffc4
   14a5c:	bne	1539c <argp_failure@@Base+0xd4c>
   14a60:	ldr	ip, [r8, #4]
   14a64:	cmp	ip, r3
   14a68:	beq	14a94 <argp_failure@@Base+0x444>
   14a6c:	add	r0, r6, #24
   14a70:	ldr	r3, [r0, #-24]	; 0xffffffe8
   14a74:	cmp	r3, #0
   14a78:	beq	14a88 <argp_failure@@Base+0x438>
   14a7c:	ldr	r3, [r0, #-12]
   14a80:	tst	r3, #2
   14a84:	beq	15398 <argp_failure@@Base+0xd48>
   14a88:	subs	ip, ip, #1
   14a8c:	add	r0, r0, #24
   14a90:	bne	14a70 <argp_failure@@Base+0x420>
   14a94:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14a98:	cmp	lr, r5
   14a9c:	str	r2, [fp, #-128]	; 0xffffff80
   14aa0:	ldr	r5, [r3, #8]
   14aa4:	bhi	153b0 <argp_failure@@Base+0xd60>
   14aa8:	str	r5, [r9, #12]
   14aac:	ldr	r5, [r8, #4]
   14ab0:	cmp	r5, #0
   14ab4:	beq	14b38 <argp_failure@@Base+0x4e8>
   14ab8:	mov	r4, r6
   14abc:	str	r8, [fp, #-124]	; 0xffffff84
   14ac0:	b	14ad8 <argp_failure@@Base+0x488>
   14ac4:	subs	r5, r5, #1
   14ac8:	add	r4, r4, #24
   14acc:	beq	14b2c <argp_failure@@Base+0x4dc>
   14ad0:	ldr	r7, [r4, #12]
   14ad4:	and	r2, r7, #8
   14ad8:	cmp	r2, #0
   14adc:	bne	14ac4 <argp_failure@@Base+0x474>
   14ae0:	ldr	r8, [r4, #4]
   14ae4:	sub	r2, r8, #1
   14ae8:	cmp	r2, #254	; 0xfe
   14aec:	bhi	14ac4 <argp_failure@@Base+0x474>
   14af0:	bl	11184 <__ctype_b_loc@plt>
   14af4:	lsl	r2, r8, #1
   14af8:	ldr	r1, [r0]
   14afc:	ldrh	r2, [r1, r2]
   14b00:	tst	r2, #16384	; 0x4000
   14b04:	beq	14ac4 <argp_failure@@Base+0x474>
   14b08:	ldrb	r2, [sl]
   14b0c:	cmp	r8, r2
   14b10:	bne	14ac4 <argp_failure@@Base+0x474>
   14b14:	tst	r7, #2
   14b18:	beq	1545c <argp_failure@@Base+0xe0c>
   14b1c:	subs	r5, r5, #1
   14b20:	add	sl, sl, #1
   14b24:	add	r4, r4, #24
   14b28:	bne	14ad0 <argp_failure@@Base+0x480>
   14b2c:	ldr	r4, [r6, #12]
   14b30:	ldr	r8, [fp, #-124]	; 0xffffff84
   14b34:	and	r4, r4, #8
   14b38:	ldr	r3, [r9, #28]
   14b3c:	ldr	r1, [r9, #24]
   14b40:	cmp	r4, #0
   14b44:	ldr	r2, [r9, #16]
   14b48:	sub	r3, r3, r1
   14b4c:	beq	153c8 <argp_failure@@Base+0xd78>
   14b50:	cmp	r3, r2
   14b54:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14b58:	ldr	r4, [r3, #16]
   14b5c:	bhi	15690 <argp_failure@@Base+0x1040>
   14b60:	str	r4, [r9, #12]
   14b64:	ldr	r5, [r8, #4]
   14b68:	cmp	r5, #0
   14b6c:	addne	r4, r6, #24
   14b70:	bne	14b84 <argp_failure@@Base+0x534>
   14b74:	b	14c14 <argp_failure@@Base+0x5c4>
   14b78:	subs	r5, r5, #1
   14b7c:	add	r4, r4, #24
   14b80:	beq	14c14 <argp_failure@@Base+0x5c4>
   14b84:	ldr	r3, [r4, #-24]	; 0xffffffe8
   14b88:	cmp	r3, #0
   14b8c:	beq	14b78 <argp_failure@@Base+0x528>
   14b90:	ldr	r3, [r4, #-12]
   14b94:	tst	r3, #2
   14b98:	bne	14b78 <argp_failure@@Base+0x528>
   14b9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14ba0:	sub	r1, fp, #76	; 0x4c
   14ba4:	ldr	r0, [r3, #16]
   14ba8:	bl	12d90 <__assert_fail@plt+0x1ac8>
   14bac:	ldr	sl, [r4, #-24]	; 0xffffffe8
   14bb0:	mov	r0, sl
   14bb4:	bl	111a8 <strlen@plt>
   14bb8:	subs	r7, r0, #0
   14bbc:	beq	14b78 <argp_failure@@Base+0x528>
   14bc0:	ldr	r2, [r9, #28]
   14bc4:	ldr	lr, [r9, #32]
   14bc8:	add	ip, r2, r7
   14bcc:	cmp	lr, ip
   14bd0:	mov	r1, r7
   14bd4:	mov	r0, r9
   14bd8:	bcs	14bec <argp_failure@@Base+0x59c>
   14bdc:	bl	182e4 <argp_parse@@Base+0x2198>
   14be0:	cmp	r0, #0
   14be4:	beq	14b78 <argp_failure@@Base+0x528>
   14be8:	ldr	r2, [r9, #28]
   14bec:	mov	r0, r2
   14bf0:	mov	r1, sl
   14bf4:	mov	r2, r7
   14bf8:	bl	11088 <memcpy@plt>
   14bfc:	ldr	r2, [r9, #28]
   14c00:	subs	r5, r5, #1
   14c04:	add	r3, r2, r7
   14c08:	str	r3, [r9, #28]
   14c0c:	add	r4, r4, #24
   14c10:	bne	14b84 <argp_failure@@Base+0x534>
   14c14:	ldr	r3, [r9, #28]
   14c18:	ldr	r1, [r9, #24]
   14c1c:	ldr	r2, [r9, #16]
   14c20:	sub	r3, r3, r1
   14c24:	cmp	r3, r2
   14c28:	bhi	15644 <argp_failure@@Base+0xff4>
   14c2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14c30:	mov	r3, #0
   14c34:	cmp	r2, r3
   14c38:	str	r3, [r9, #4]
   14c3c:	beq	1552c <argp_failure@@Base+0xedc>
   14c40:	ldr	r3, [r6, #12]
   14c44:	tst	r3, #8
   14c48:	bne	14c74 <argp_failure@@Base+0x624>
   14c4c:	ldr	r4, [r6, #4]
   14c50:	sub	r3, r4, #1
   14c54:	cmp	r3, #254	; 0xfe
   14c58:	bhi	14c74 <argp_failure@@Base+0x624>
   14c5c:	bl	11184 <__ctype_b_loc@plt>
   14c60:	lsl	r4, r4, #1
   14c64:	ldr	r3, [r0]
   14c68:	ldrh	r3, [r3, r4]
   14c6c:	tst	r3, #16384	; 0x4000
   14c70:	bne	14c80 <argp_failure@@Base+0x630>
   14c74:	ldr	r3, [r6]
   14c78:	cmp	r3, #0
   14c7c:	beq	158f4 <argp_failure@@Base+0x12a4>
   14c80:	ldr	r3, [r9, #28]
   14c84:	ldr	r1, [r9, #24]
   14c88:	ldr	r2, [r9, #16]
   14c8c:	sub	r3, r3, r1
   14c90:	cmp	r3, r2
   14c94:	bhi	154dc <argp_failure@@Base+0xe8c>
   14c98:	ldr	r3, [fp, #-116]	; 0xffffff8c
   14c9c:	str	r3, [r9, #4]
   14ca0:	ldr	r3, [fp, #-108]	; 0xffffff94
   14ca4:	add	r8, r8, #28
   14ca8:	subs	r3, r3, #1
   14cac:	str	r3, [fp, #-108]	; 0xffffff94
   14cb0:	ldr	r3, [fp, #-120]	; 0xffffff88
   14cb4:	str	r3, [r9, #12]
   14cb8:	bne	149f4 <argp_failure@@Base+0x3a4>
   14cbc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14cc0:	ldr	sl, [fp, #-100]	; 0xffffff9c
   14cc4:	cmp	r3, #0
   14cc8:	beq	14da8 <argp_failure@@Base+0x758>
   14ccc:	ldr	r3, [sl, #4]
   14cd0:	cmp	r3, #0
   14cd4:	beq	14da8 <argp_failure@@Base+0x758>
   14cd8:	ldr	r3, [fp, #-104]	; 0xffffff98
   14cdc:	ldr	r1, [pc, #2956]	; 15870 <argp_failure@@Base+0x1220>
   14ce0:	cmp	r3, #0
   14ce4:	ldr	r0, [pc, #2952]	; 15874 <argp_failure@@Base+0x1224>
   14ce8:	ldrne	r2, [r3]
   14cec:	ldreq	r2, [fp, #-104]	; 0xffffff98
   14cf0:	ldr	r3, [fp, #-104]	; 0xffffff98
   14cf4:	bl	12b40 <__assert_fail@plt+0x1878>
   14cf8:	subs	r4, r0, #0
   14cfc:	beq	14da8 <argp_failure@@Base+0x758>
   14d00:	ldrb	r3, [r4]
   14d04:	cmp	r3, #0
   14d08:	beq	14d9c <argp_failure@@Base+0x74c>
   14d0c:	ldr	r3, [r9, #28]
   14d10:	ldr	r2, [r9, #32]
   14d14:	cmp	r3, r2
   14d18:	bcs	159b8 <argp_failure@@Base+0x1368>
   14d1c:	add	r1, r3, #1
   14d20:	mov	r2, #10
   14d24:	str	r1, [r9, #28]
   14d28:	strb	r2, [r3]
   14d2c:	mov	r0, r4
   14d30:	bl	111a8 <strlen@plt>
   14d34:	subs	r5, r0, #0
   14d38:	beq	15994 <argp_failure@@Base+0x1344>
   14d3c:	ldr	r0, [r9, #28]
   14d40:	ldr	r2, [r9, #32]
   14d44:	add	r3, r0, r5
   14d48:	cmp	r2, r3
   14d4c:	bcs	14d68 <argp_failure@@Base+0x718>
   14d50:	mov	r1, r5
   14d54:	mov	r0, r9
   14d58:	bl	182e4 <argp_parse@@Base+0x2198>
   14d5c:	cmp	r0, #0
   14d60:	beq	15994 <argp_failure@@Base+0x1344>
   14d64:	ldr	r0, [r9, #28]
   14d68:	mov	r2, r5
   14d6c:	mov	r1, r4
   14d70:	bl	11088 <memcpy@plt>
   14d74:	ldr	r3, [r9, #28]
   14d78:	add	r3, r3, r5
   14d7c:	str	r3, [r9, #28]
   14d80:	ldr	r2, [r9, #32]
   14d84:	cmp	r2, r3
   14d88:	bls	1599c <argp_failure@@Base+0x134c>
   14d8c:	add	r1, r3, #1
   14d90:	mov	r2, #10
   14d94:	str	r1, [r9, #28]
   14d98:	strb	r2, [r3]
   14d9c:	ldr	r3, [pc, #2768]	; 15874 <argp_failure@@Base+0x1224>
   14da0:	cmp	r4, r3
   14da4:	bne	158e8 <argp_failure@@Base+0x1298>
   14da8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14dac:	mov	r4, #1
   14db0:	tst	r3, #32
   14db4:	beq	14900 <argp_failure@@Base+0x2b0>
   14db8:	mov	r3, #0
   14dbc:	str	r3, [sp]
   14dc0:	str	r9, [sp, #4]
   14dc4:	mov	r3, r4
   14dc8:	ldr	r1, [fp, #-104]	; 0xffffff98
   14dcc:	ldr	r0, [fp, #-112]	; 0xffffff90
   14dd0:	mov	r2, #1
   14dd4:	bl	12f3c <__assert_fail@plt+0x1c74>
   14dd8:	orr	r4, r4, r0
   14ddc:	b	14900 <argp_failure@@Base+0x2b0>
   14de0:	ldr	r0, [pc, #2704]	; 15878 <argp_failure@@Base+0x1228>
   14de4:	bl	11130 <getenv@plt>
   14de8:	mov	lr, sl
   14dec:	sub	r3, fp, #76	; 0x4c
   14df0:	mov	ip, r3
   14df4:	str	r3, [fp, #-100]	; 0xffffff9c
   14df8:	mov	r6, r0
   14dfc:	ldm	lr!, {r0, r1, r2, r3}
   14e00:	cmp	r6, #0
   14e04:	stmia	ip!, {r0, r1, r2, r3}
   14e08:	ldm	lr!, {r0, r1, r2, r3}
   14e0c:	stmia	ip!, {r0, r1, r2, r3}
   14e10:	ldm	lr, {r0, r1}
   14e14:	stm	ip, {r0, r1}
   14e18:	beq	14898 <argp_failure@@Base+0x248>
   14e1c:	ldrb	r9, [r6]
   14e20:	ldr	r8, [pc, #2644]	; 1587c <argp_failure@@Base+0x122c>
   14e24:	cmp	r9, #0
   14e28:	beq	14f7c <argp_failure@@Base+0x92c>
   14e2c:	bl	11184 <__ctype_b_loc@plt>
   14e30:	mov	r5, r0
   14e34:	ldr	r1, [r0]
   14e38:	b	14e40 <argp_failure@@Base+0x7f0>
   14e3c:	ldrb	r9, [r6, #1]!
   14e40:	lsl	r3, r9, #1
   14e44:	ldrh	r3, [r1, r3]
   14e48:	tst	r3, #8192	; 0x2000
   14e4c:	bne	14e3c <argp_failure@@Base+0x7ec>
   14e50:	ands	r2, r3, #1024	; 0x400
   14e54:	beq	14f74 <argp_failure@@Base+0x924>
   14e58:	cmp	r9, #95	; 0x5f
   14e5c:	cmpne	r9, #45	; 0x2d
   14e60:	lsl	r3, r3, #28
   14e64:	moveq	r7, #1
   14e68:	movne	r7, #0
   14e6c:	orrs	r3, r7, r3, lsr #31
   14e70:	beq	15730 <argp_failure@@Base+0x10e0>
   14e74:	mov	r4, r6
   14e78:	ldrb	r3, [r4, #1]!
   14e7c:	cmp	r3, #95	; 0x5f
   14e80:	cmpne	r3, #45	; 0x2d
   14e84:	lsl	r2, r3, #1
   14e88:	moveq	r0, #1
   14e8c:	ldrh	r2, [r1, r2]
   14e90:	movne	r0, #0
   14e94:	lsl	ip, r2, #28
   14e98:	orrs	r0, r0, ip, lsr #31
   14e9c:	bne	14e78 <argp_failure@@Base+0x828>
   14ea0:	tst	r2, #8192	; 0x2000
   14ea4:	sub	r7, r4, r6
   14ea8:	beq	14ec0 <argp_failure@@Base+0x870>
   14eac:	ldrb	r3, [r4, #1]!
   14eb0:	lsl	r2, r3, #1
   14eb4:	ldrh	r2, [r1, r2]
   14eb8:	tst	r2, #8192	; 0x2000
   14ebc:	bne	14eac <argp_failure@@Base+0x85c>
   14ec0:	cmp	r3, #44	; 0x2c
   14ec4:	cmpne	r3, #0
   14ec8:	beq	14fdc <argp_failure@@Base+0x98c>
   14ecc:	cmp	r3, #61	; 0x3d
   14ed0:	beq	15338 <argp_failure@@Base+0xce8>
   14ed4:	ldrb	r3, [r4]
   14ed8:	lsl	r3, r3, #1
   14edc:	ldrh	r3, [r1, r3]
   14ee0:	tst	r3, #2048	; 0x800
   14ee4:	bne	152d8 <argp_failure@@Base+0xc88>
   14ee8:	ldr	r3, [fp, #-108]	; 0xffffff94
   14eec:	mov	r9, r3
   14ef0:	str	r3, [fp, #-116]	; 0xffffff8c
   14ef4:	ldr	r5, [pc, #2436]	; 15880 <argp_failure@@Base+0x1230>
   14ef8:	b	14f08 <argp_failure@@Base+0x8b8>
   14efc:	add	r5, r5, #16
   14f00:	cmp	r5, r8
   14f04:	beq	15798 <argp_failure@@Base+0x1148>
   14f08:	mov	r0, r5
   14f0c:	bl	111a8 <strlen@plt>
   14f10:	cmp	r0, r7
   14f14:	bne	14efc <argp_failure@@Base+0x8ac>
   14f18:	mov	r2, r7
   14f1c:	mov	r1, r5
   14f20:	mov	r0, r6
   14f24:	bl	112b0 <strncmp@plt>
   14f28:	cmp	r0, #0
   14f2c:	bne	14efc <argp_failure@@Base+0x8ac>
   14f30:	cmp	r9, #0
   14f34:	beq	14f44 <argp_failure@@Base+0x8f4>
   14f38:	ldrb	r1, [r5, #14]
   14f3c:	cmp	r1, #0
   14f40:	beq	15978 <argp_failure@@Base+0x1328>
   14f44:	ldrb	r3, [r5, #15]
   14f48:	sub	r2, fp, #36	; 0x24
   14f4c:	add	r3, r2, r3
   14f50:	ldr	r2, [fp, #-116]	; 0xffffff8c
   14f54:	str	r2, [r3, #-40]	; 0xffffffd8
   14f58:	cmp	r5, r8
   14f5c:	beq	15798 <argp_failure@@Base+0x1148>
   14f60:	ldrb	r9, [r4]
   14f64:	cmp	r9, #44	; 0x2c
   14f68:	beq	15678 <argp_failure@@Base+0x1028>
   14f6c:	mov	r6, r4
   14f70:	b	14e24 <argp_failure@@Base+0x7d4>
   14f74:	cmp	r9, #0
   14f78:	bne	158d0 <argp_failure@@Base+0x1280>
   14f7c:	ldr	lr, [fp, #-44]	; 0xffffffd4
   14f80:	ldr	r1, [pc, #2296]	; 15880 <argp_failure@@Base+0x1230>
   14f84:	add	r3, r1, #16
   14f88:	cmp	r3, r8
   14f8c:	mov	r1, r3
   14f90:	beq	156d4 <argp_failure@@Base+0x1084>
   14f94:	ldrb	r2, [r3, #14]
   14f98:	cmp	r2, #0
   14f9c:	bne	14f84 <argp_failure@@Base+0x934>
   14fa0:	ldrb	r0, [r3, #15]
   14fa4:	sub	ip, fp, #36	; 0x24
   14fa8:	cmp	r0, #32
   14fac:	add	ip, ip, r0
   14fb0:	beq	14f84 <argp_failure@@Base+0x934>
   14fb4:	ldr	r0, [ip, #-40]	; 0xffffffd8
   14fb8:	cmp	r0, lr
   14fbc:	blt	14f84 <argp_failure@@Base+0x934>
   14fc0:	ldr	r1, [pc, #2236]	; 15884 <argp_failure@@Base+0x1234>
   14fc4:	ldr	r0, [fp, #-104]	; 0xffffff98
   14fc8:	stm	sp, {r1, r3}
   14fcc:	ldr	r3, [pc, #2228]	; 15888 <argp_failure@@Base+0x1238>
   14fd0:	mov	r1, r2
   14fd4:	bl	14650 <argp_failure@@Base>
   14fd8:	b	14898 <argp_failure@@Base+0x248>
   14fdc:	cmp	r9, #110	; 0x6e
   14fe0:	beq	15368 <argp_failure@@Base+0xd18>
   14fe4:	mov	r9, #1
   14fe8:	str	r9, [fp, #-116]	; 0xffffff8c
   14fec:	b	14ef4 <argp_failure@@Base+0x8a4>
   14ff0:	ldr	r3, [fp, #4]
   14ff4:	ldr	r1, [pc, #2192]	; 1588c <argp_failure@@Base+0x123c>
   14ff8:	mov	r2, r3
   14ffc:	mov	r0, r9
   15000:	bl	18304 <argp_parse@@Base+0x21b8>
   15004:	mov	r4, #1
   15008:	b	148e8 <argp_failure@@Base+0x298>
   1500c:	mov	r2, #1
   15010:	mov	r3, #0
   15014:	stm	sp, {r2, r9}
   15018:	ldr	r1, [fp, #-104]	; 0xffffff98
   1501c:	mov	r2, r3
   15020:	ldr	r0, [fp, #-112]	; 0xffffff90
   15024:	bl	12f3c <__assert_fail@plt+0x1c74>
   15028:	orr	r4, r4, r0
   1502c:	b	148dc <argp_failure@@Base+0x28c>
   15030:	ldr	r3, [fp, #-112]	; 0xffffff90
   15034:	mov	r4, #1
   15038:	mov	r6, r4
   1503c:	ldr	r1, [r3, #16]
   15040:	ldr	r0, [r3, #8]
   15044:	bl	14440 <__assert_fail@plt+0x3178>
   15048:	mov	r1, #0
   1504c:	add	r3, r0, #14
   15050:	bic	r3, r3, #7
   15054:	sub	sp, sp, r3
   15058:	add	r7, sp, #8
   1505c:	mov	r2, r0
   15060:	mov	r0, r7
   15064:	bl	111e4 <memset@plt>
   15068:	sub	r3, fp, #76	; 0x4c
   1506c:	str	r3, [fp, #-100]	; 0xffffff9c
   15070:	ldr	r8, [fp, #-136]	; 0xffffff78
   15074:	str	r7, [fp, #-108]	; 0xffffff94
   15078:	b	15194 <argp_failure@@Base+0xb44>
   1507c:	cmp	r4, #0
   15080:	ldr	r3, [fp, #-108]	; 0xffffff94
   15084:	ldr	r5, [r9, #12]
   15088:	ldrne	r2, [pc, #2048]	; 15890 <argp_failure@@Base+0x1240>
   1508c:	str	r7, [r9, #12]
   15090:	ldreq	r2, [pc, #2044]	; 15894 <argp_failure@@Base+0x1244>
   15094:	str	r3, [fp, #-76]	; 0xffffffb4
   15098:	ldr	r1, [pc, #2040]	; 15898 <argp_failure@@Base+0x1248>
   1509c:	ldr	r3, [fp, #4]
   150a0:	mov	r0, r9
   150a4:	bl	18304 <argp_parse@@Base+0x21b8>
   150a8:	ldr	r3, [r9, #28]
   150ac:	ldr	r1, [r9, #24]
   150b0:	ldr	r2, [r9, #16]
   150b4:	sub	r3, r3, r1
   150b8:	cmp	r3, r2
   150bc:	ldr	r7, [sl, #28]
   150c0:	bhi	15228 <argp_failure@@Base+0xbd8>
   150c4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   150c8:	ldr	r4, [r9, #4]
   150cc:	tst	r3, #2
   150d0:	str	r7, [r9, #4]
   150d4:	beq	1520c <argp_failure@@Base+0xbbc>
   150d8:	ldr	r3, [r8, #4]
   150dc:	cmp	r3, #0
   150e0:	beq	15130 <argp_failure@@Base+0xae0>
   150e4:	ldr	ip, [r9, #28]
   150e8:	ldr	r2, [r9, #32]
   150ec:	add	r3, ip, #12
   150f0:	cmp	r2, r3
   150f4:	bcs	15110 <argp_failure@@Base+0xac0>
   150f8:	mov	r1, #12
   150fc:	mov	r0, r9
   15100:	bl	182e4 <argp_parse@@Base+0x2198>
   15104:	cmp	r0, #0
   15108:	beq	15130 <argp_failure@@Base+0xae0>
   1510c:	ldr	ip, [r9, #28]
   15110:	ldr	r3, [pc, #1924]	; 1589c <argp_failure@@Base+0x124c>
   15114:	ldm	r3!, {r0, r1, r2}
   15118:	str	r0, [ip]
   1511c:	str	r1, [ip, #4]
   15120:	str	r2, [ip, #8]
   15124:	ldr	r3, [r9, #28]
   15128:	add	r3, r3, #12
   1512c:	str	r3, [r9, #28]
   15130:	mov	r3, r6
   15134:	ldr	r1, [fp, #-104]	; 0xffffff98
   15138:	str	r9, [sp]
   1513c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15140:	ldr	r0, [fp, #-112]	; 0xffffff90
   15144:	bl	13a78 <__assert_fail@plt+0x27b0>
   15148:	ldr	r3, [r9, #28]
   1514c:	ldr	r1, [r9, #24]
   15150:	sub	r1, r3, r1
   15154:	mov	r7, r0
   15158:	ldr	r0, [r9, #16]
   1515c:	cmp	r1, r0
   15160:	strls	r5, [r9, #12]
   15164:	bhi	151d8 <argp_failure@@Base+0xb88>
   15168:	ldr	r1, [r9, #32]
   1516c:	str	r4, [r9, #4]
   15170:	cmp	r1, r3
   15174:	bls	151bc <argp_failure@@Base+0xb6c>
   15178:	add	r1, r3, #1
   1517c:	mov	r2, #10
   15180:	str	r1, [r9, #28]
   15184:	strb	r2, [r3]
   15188:	cmp	r7, #0
   1518c:	mov	r4, #0
   15190:	beq	15234 <argp_failure@@Base+0xbe4>
   15194:	ldr	r3, [r9, #28]
   15198:	ldr	r1, [r9, #24]
   1519c:	ldr	r2, [r9, #16]
   151a0:	sub	r3, r3, r1
   151a4:	cmp	r3, r2
   151a8:	ldr	r7, [sl, #28]
   151ac:	bls	1507c <argp_failure@@Base+0xa2c>
   151b0:	mov	r0, r9
   151b4:	bl	17c54 <argp_parse@@Base+0x1b08>
   151b8:	b	1507c <argp_failure@@Base+0xa2c>
   151bc:	mov	r1, r6
   151c0:	mov	r0, r9
   151c4:	bl	182e4 <argp_parse@@Base+0x2198>
   151c8:	cmp	r0, #0
   151cc:	beq	15188 <argp_failure@@Base+0xb38>
   151d0:	ldr	r3, [r9, #28]
   151d4:	b	15178 <argp_failure@@Base+0xb28>
   151d8:	mov	r0, r9
   151dc:	bl	17c54 <argp_parse@@Base+0x1b08>
   151e0:	ldr	r3, [r9, #28]
   151e4:	ldr	r1, [r9, #24]
   151e8:	ldr	r0, [r9, #16]
   151ec:	sub	r1, r3, r1
   151f0:	cmp	r1, r0
   151f4:	str	r5, [r9, #12]
   151f8:	bls	15168 <argp_failure@@Base+0xb18>
   151fc:	mov	r0, r9
   15200:	bl	17c54 <argp_parse@@Base+0x1b08>
   15204:	ldr	r3, [r9, #28]
   15208:	b	15168 <argp_failure@@Base+0xb18>
   1520c:	mov	r1, r9
   15210:	mov	r0, r8
   15214:	bl	14498 <__assert_fail@plt+0x31d0>
   15218:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1521c:	orr	r3, r3, #2
   15220:	str	r3, [fp, #-96]	; 0xffffffa0
   15224:	b	15130 <argp_failure@@Base+0xae0>
   15228:	mov	r0, r9
   1522c:	bl	17c54 <argp_parse@@Base+0x1b08>
   15230:	b	150c4 <argp_failure@@Base+0xa74>
   15234:	mov	r4, #1
   15238:	b	148d0 <argp_failure@@Base+0x280>
   1523c:	mov	r1, #0
   15240:	ldr	r0, [fp, #-112]	; 0xffffff90
   15244:	bl	13cc8 <__assert_fail@plt+0x2a00>
   15248:	ldr	r2, [pc, #1616]	; 158a0 <argp_failure@@Base+0x1250>
   1524c:	ldr	r4, [r0, #4]
   15250:	ldr	r5, [r0]
   15254:	mov	r1, r4
   15258:	mov	r6, r0
   1525c:	str	r0, [fp, #-136]	; 0xffffff78
   15260:	mov	r0, r5
   15264:	bl	143b8 <__assert_fail@plt+0x30f0>
   15268:	ldr	r2, [pc, #1588]	; 158a4 <argp_failure@@Base+0x1254>
   1526c:	cmp	r0, #0
   15270:	mvnne	r3, #0
   15274:	strne	r3, [r0, #12]
   15278:	movne	r3, r6
   1527c:	mov	r0, r5
   15280:	ldrne	r4, [r3, #4]
   15284:	mov	r1, r4
   15288:	bl	143b8 <__assert_fail@plt+0x30f0>
   1528c:	cmp	r0, #0
   15290:	mvnne	r3, #0
   15294:	strne	r3, [r0, #12]
   15298:	ldrne	r3, [fp, #-136]	; 0xffffff78
   1529c:	ldrne	r4, [r3, #4]
   152a0:	cmp	r4, #0
   152a4:	beq	148c4 <argp_failure@@Base+0x274>
   152a8:	mov	r3, r5
   152ac:	mov	r1, #0
   152b0:	str	r1, [r3, #24]
   152b4:	add	r1, r1, #1
   152b8:	cmp	r1, r4
   152bc:	add	r3, r3, #28
   152c0:	bne	152b0 <argp_failure@@Base+0xc60>
   152c4:	mov	r0, r5
   152c8:	ldr	r3, [pc, #1496]	; 158a8 <argp_failure@@Base+0x1258>
   152cc:	mov	r2, #28
   152d0:	bl	11274 <qsort@plt>
   152d4:	b	148c4 <argp_failure@@Base+0x274>
   152d8:	mov	r2, #10
   152dc:	mov	r1, #0
   152e0:	mov	r0, r4
   152e4:	bl	11010 <strtol@plt>
   152e8:	ldrb	r3, [r4]
   152ec:	ldr	r2, [r5]
   152f0:	lsl	r3, r3, #1
   152f4:	ldrh	r3, [r2, r3]
   152f8:	tst	r3, #2048	; 0x800
   152fc:	str	r0, [fp, #-116]	; 0xffffff8c
   15300:	beq	15328 <argp_failure@@Base+0xcd8>
   15304:	ldrb	r3, [r4, #1]!
   15308:	lsl	r3, r3, #1
   1530c:	ldrh	r3, [r2, r3]
   15310:	tst	r3, #2048	; 0x800
   15314:	bne	15304 <argp_failure@@Base+0xcb4>
   15318:	b	15328 <argp_failure@@Base+0xcd8>
   1531c:	ldrb	r3, [r4, #1]!
   15320:	lsl	r3, r3, #1
   15324:	ldrh	r3, [r2, r3]
   15328:	tst	r3, #8192	; 0x2000
   1532c:	bne	1531c <argp_failure@@Base+0xccc>
   15330:	ldr	r9, [fp, #-108]	; 0xffffff94
   15334:	b	14ef4 <argp_failure@@Base+0x8a4>
   15338:	ldrb	r3, [r4, #1]
   1533c:	add	r4, r4, #1
   15340:	lsl	r3, r3, #1
   15344:	ldrh	r3, [r1, r3]
   15348:	tst	r3, #8192	; 0x2000
   1534c:	beq	14ee0 <argp_failure@@Base+0x890>
   15350:	ldrb	r3, [r4, #1]!
   15354:	lsl	r3, r3, #1
   15358:	ldrh	r3, [r1, r3]
   1535c:	tst	r3, #8192	; 0x2000
   15360:	bne	15350 <argp_failure@@Base+0xd00>
   15364:	b	14ee0 <argp_failure@@Base+0x890>
   15368:	ldrb	r3, [r6, #1]
   1536c:	cmp	r3, #111	; 0x6f
   15370:	bne	14fe4 <argp_failure@@Base+0x994>
   15374:	ldrb	r3, [r6, #2]
   15378:	cmp	r3, #45	; 0x2d
   1537c:	bne	14fe4 <argp_failure@@Base+0x994>
   15380:	ldr	r3, [fp, #-108]	; 0xffffff94
   15384:	add	r6, r6, #3
   15388:	sub	r7, r7, #3
   1538c:	str	r3, [fp, #-116]	; 0xffffff8c
   15390:	mov	r9, #1
   15394:	b	14ef4 <argp_failure@@Base+0x8a4>
   15398:	mov	r3, #1
   1539c:	str	r3, [fp, #-128]	; 0xffffff80
   153a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   153a4:	cmp	lr, r5
   153a8:	ldr	r5, [r3, #8]
   153ac:	bls	14aa8 <argp_failure@@Base+0x458>
   153b0:	mov	r0, r9
   153b4:	bl	17c54 <argp_parse@@Base+0x1b08>
   153b8:	ldr	r7, [r6, #12]
   153bc:	and	r2, r7, #8
   153c0:	mov	r4, r2
   153c4:	b	14aa8 <argp_failure@@Base+0x458>
   153c8:	cmp	r3, r2
   153cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   153d0:	ldr	r4, [r3, #12]
   153d4:	bhi	15684 <argp_failure@@Base+0x1034>
   153d8:	str	r4, [r9, #12]
   153dc:	ldr	r5, [r8, #4]
   153e0:	cmp	r5, #0
   153e4:	beq	14c14 <argp_failure@@Base+0x5c4>
   153e8:	add	r4, r6, #24
   153ec:	ldr	r7, [fp, #-100]	; 0xffffff9c
   153f0:	b	15400 <argp_failure@@Base+0xdb0>
   153f4:	subs	r5, r5, #1
   153f8:	add	r4, r4, #24
   153fc:	beq	14c14 <argp_failure@@Base+0x5c4>
   15400:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15404:	cmp	r3, #0
   15408:	beq	153f4 <argp_failure@@Base+0xda4>
   1540c:	ldr	r3, [r4, #-12]
   15410:	tst	r3, #2
   15414:	bne	153f4 <argp_failure@@Base+0xda4>
   15418:	sub	r1, fp, #76	; 0x4c
   1541c:	ldr	r0, [r7, #12]
   15420:	bl	12d90 <__assert_fail@plt+0x1ac8>
   15424:	ldr	r2, [r4, #-24]	; 0xffffffe8
   15428:	ldr	r1, [pc, #1148]	; 158ac <argp_failure@@Base+0x125c>
   1542c:	mov	r0, r9
   15430:	bl	18304 <argp_parse@@Base+0x21b8>
   15434:	ldr	r3, [r6, #8]
   15438:	ldr	r1, [pc, #1136]	; 158b0 <argp_failure@@Base+0x1260>
   1543c:	subs	r2, r3, #0
   15440:	mov	r0, r9
   15444:	beq	153f4 <argp_failure@@Base+0xda4>
   15448:	ldr	ip, [r6, #12]
   1544c:	tst	ip, #1
   15450:	ldrne	r1, [pc, #1116]	; 158b4 <argp_failure@@Base+0x1264>
   15454:	bl	18304 <argp_parse@@Base+0x21b8>
   15458:	b	153f4 <argp_failure@@Base+0xda4>
   1545c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15460:	sub	r1, fp, #76	; 0x4c
   15464:	ldr	r0, [r3, #8]
   15468:	bl	12d90 <__assert_fail@plt+0x1ac8>
   1546c:	ldr	r3, [r9, #28]
   15470:	ldr	r2, [r9, #32]
   15474:	cmp	r3, r2
   15478:	bcs	156b8 <argp_failure@@Base+0x1068>
   1547c:	add	r2, r3, #1
   15480:	str	r2, [r9, #28]
   15484:	mov	r2, #45	; 0x2d
   15488:	strb	r2, [r3]
   1548c:	ldr	r3, [r9, #28]
   15490:	ldr	r2, [r9, #32]
   15494:	ldrb	r7, [sl]
   15498:	cmp	r3, r2
   1549c:	bcs	1569c <argp_failure@@Base+0x104c>
   154a0:	add	r2, r3, #1
   154a4:	str	r2, [r9, #28]
   154a8:	strb	r7, [r3]
   154ac:	ldr	r3, [fp, #-128]	; 0xffffff80
   154b0:	cmp	r3, #0
   154b4:	beq	15650 <argp_failure@@Base+0x1000>
   154b8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   154bc:	ldr	r3, [r3]
   154c0:	cmp	r3, #0
   154c4:	bne	15650 <argp_failure@@Base+0x1000>
   154c8:	ldr	r3, [r6, #8]
   154cc:	cmp	r3, #0
   154d0:	movne	r3, #1
   154d4:	strne	r3, [fp, #-80]	; 0xffffffb0
   154d8:	b	14b1c <argp_failure@@Base+0x4cc>
   154dc:	mov	r0, r9
   154e0:	bl	17c54 <argp_parse@@Base+0x1b08>
   154e4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   154e8:	ldr	r3, [r9, #28]
   154ec:	ldr	r1, [r9, #24]
   154f0:	str	r2, [r9, #4]
   154f4:	ldr	r2, [r9, #16]
   154f8:	sub	r3, r3, r1
   154fc:	cmp	r3, r2
   15500:	bls	14ca0 <argp_failure@@Base+0x650>
   15504:	mov	r0, r9
   15508:	bl	17c54 <argp_parse@@Base+0x1b08>
   1550c:	b	14ca0 <argp_failure@@Base+0x650>
   15510:	mov	r0, r9
   15514:	bl	17c54 <argp_parse@@Base+0x1b08>
   15518:	ldr	lr, [r9, #28]
   1551c:	ldr	r2, [r9, #24]
   15520:	ldr	r5, [r9, #16]
   15524:	sub	lr, lr, r2
   15528:	b	14a14 <argp_failure@@Base+0x3c4>
   1552c:	ldr	r4, [r6, #16]
   15530:	ldr	r1, [r6, #4]
   15534:	mov	r0, r4
   15538:	ldr	r3, [fp, #-104]	; 0xffffff98
   1553c:	ldr	r2, [r8, #20]
   15540:	bl	12b40 <__assert_fail@plt+0x1878>
   15544:	subs	r5, r0, #0
   15548:	beq	15600 <argp_failure@@Base+0xfb0>
   1554c:	ldrb	r3, [r5]
   15550:	cmp	r3, #0
   15554:	beq	155f0 <argp_failure@@Base+0xfa0>
   15558:	ldr	r3, [r9, #28]
   1555c:	ldr	r1, [r9, #24]
   15560:	ldr	r2, [r9, #16]
   15564:	sub	r3, r3, r1
   15568:	cmp	r3, r2
   1556c:	bhi	157f0 <argp_failure@@Base+0x11a0>
   15570:	ldr	r7, [r9, #20]
   15574:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15578:	bic	r7, r7, r7, asr #31
   1557c:	ldr	r6, [r3, #20]
   15580:	mov	r3, r6
   15584:	str	r6, [r9, #4]
   15588:	add	r2, r6, #3
   1558c:	cmp	r2, r7
   15590:	str	r3, [r9, #12]
   15594:	bcs	15740 <argp_failure@@Base+0x10f0>
   15598:	ldr	r3, [r9, #28]
   1559c:	ldr	r2, [r9, #32]
   155a0:	cmp	r3, r2
   155a4:	bcs	15940 <argp_failure@@Base+0x12f0>
   155a8:	add	r1, r3, #1
   155ac:	mov	r2, #10
   155b0:	str	r1, [r9, #28]
   155b4:	strb	r2, [r3]
   155b8:	mov	r0, r5
   155bc:	bl	111a8 <strlen@plt>
   155c0:	subs	r6, r0, #0
   155c4:	beq	155f0 <argp_failure@@Base+0xfa0>
   155c8:	ldr	r0, [r9, #28]
   155cc:	ldr	r2, [r9, #32]
   155d0:	add	r3, r0, r6
   155d4:	cmp	r2, r3
   155d8:	bcs	157d4 <argp_failure@@Base+0x1184>
   155dc:	mov	r1, r6
   155e0:	mov	r0, r9
   155e4:	bl	182e4 <argp_parse@@Base+0x2198>
   155e8:	cmp	r0, #0
   155ec:	bne	157d0 <argp_failure@@Base+0x1180>
   155f0:	cmp	r4, r5
   155f4:	beq	15600 <argp_failure@@Base+0xfb0>
   155f8:	mov	r0, r5
   155fc:	bl	16fe4 <argp_parse@@Base+0xe98>
   15600:	ldr	r3, [r9, #28]
   15604:	ldr	r2, [r9, #24]
   15608:	ldr	r1, [r9, #16]
   1560c:	sub	r2, r3, r2
   15610:	cmp	r2, r1
   15614:	bhi	15720 <argp_failure@@Base+0x10d0>
   15618:	ldr	r1, [r9, #32]
   1561c:	mov	r2, #0
   15620:	cmp	r1, r3
   15624:	str	r2, [r9, #4]
   15628:	bls	15704 <argp_failure@@Base+0x10b4>
   1562c:	add	r1, r3, #1
   15630:	mov	r2, #10
   15634:	str	r1, [r9, #28]
   15638:	strb	r2, [r3]
   1563c:	str	r8, [fp, #-88]	; 0xffffffa8
   15640:	b	14c80 <argp_failure@@Base+0x630>
   15644:	mov	r0, r9
   15648:	bl	17c54 <argp_parse@@Base+0x1b08>
   1564c:	b	14c2c <argp_failure@@Base+0x5dc>
   15650:	ldr	r2, [r6, #8]
   15654:	cmp	r2, #0
   15658:	beq	14b1c <argp_failure@@Base+0x4cc>
   1565c:	ldr	r3, [r6, #12]
   15660:	mov	r0, r9
   15664:	tst	r3, #1
   15668:	ldrne	r1, [pc, #584]	; 158b8 <argp_failure@@Base+0x1268>
   1566c:	ldreq	r1, [pc, #584]	; 158bc <argp_failure@@Base+0x126c>
   15670:	bl	18304 <argp_parse@@Base+0x21b8>
   15674:	b	14b1c <argp_failure@@Base+0x4cc>
   15678:	ldrb	r9, [r4, #1]
   1567c:	add	r4, r4, #1
   15680:	b	14f6c <argp_failure@@Base+0x91c>
   15684:	mov	r0, r9
   15688:	bl	17c54 <argp_parse@@Base+0x1b08>
   1568c:	b	153d8 <argp_failure@@Base+0xd88>
   15690:	mov	r0, r9
   15694:	bl	17c54 <argp_parse@@Base+0x1b08>
   15698:	b	14b60 <argp_failure@@Base+0x510>
   1569c:	mov	r1, #1
   156a0:	mov	r0, r9
   156a4:	bl	182e4 <argp_parse@@Base+0x2198>
   156a8:	cmp	r0, #0
   156ac:	beq	154ac <argp_failure@@Base+0xe5c>
   156b0:	ldr	r3, [r9, #28]
   156b4:	b	154a0 <argp_failure@@Base+0xe50>
   156b8:	mov	r1, #1
   156bc:	mov	r0, r9
   156c0:	bl	182e4 <argp_parse@@Base+0x2198>
   156c4:	cmp	r0, #0
   156c8:	beq	1548c <argp_failure@@Base+0xe3c>
   156cc:	ldr	r3, [r9, #28]
   156d0:	b	1547c <argp_failure@@Base+0xe2c>
   156d4:	ldr	lr, [fp, #-100]	; 0xffffff9c
   156d8:	ldr	sl, [pc, #388]	; 15864 <argp_failure@@Base+0x1214>
   156dc:	mov	r4, #1
   156e0:	ldm	lr!, {r0, r1, r2, r3}
   156e4:	mov	ip, sl
   156e8:	stmia	ip!, {r0, r1, r2, r3}
   156ec:	ldm	lr!, {r0, r1, r2, r3}
   156f0:	stmia	ip!, {r0, r1, r2, r3}
   156f4:	ldm	lr, {r0, r1}
   156f8:	stm	ip, {r0, r1}
   156fc:	str	r4, [sl, #36]	; 0x24
   15700:	b	14898 <argp_failure@@Base+0x248>
   15704:	mov	r1, #1
   15708:	mov	r0, r9
   1570c:	bl	182e4 <argp_parse@@Base+0x2198>
   15710:	cmp	r0, #0
   15714:	beq	1563c <argp_failure@@Base+0xfec>
   15718:	ldr	r3, [r9, #28]
   1571c:	b	1562c <argp_failure@@Base+0xfdc>
   15720:	mov	r0, r9
   15724:	bl	17c54 <argp_parse@@Base+0x1b08>
   15728:	ldr	r3, [r9, #28]
   1572c:	b	15618 <argp_failure@@Base+0xfc8>
   15730:	mov	r7, r3
   15734:	mov	r4, r6
   15738:	mov	r3, r9
   1573c:	b	14ec0 <argp_failure@@Base+0x870>
   15740:	cmp	r6, r7
   15744:	bhi	15930 <argp_failure@@Base+0x12e0>
   15748:	ldr	r3, [r9, #28]
   1574c:	ldr	r1, [r9, #32]
   15750:	add	r2, r3, #3
   15754:	cmp	r1, r2
   15758:	bcs	15774 <argp_failure@@Base+0x1124>
   1575c:	mov	r1, #3
   15760:	mov	r0, r9
   15764:	bl	182e4 <argp_parse@@Base+0x2198>
   15768:	cmp	r0, #0
   1576c:	beq	155b8 <argp_failure@@Base+0xf68>
   15770:	ldr	r3, [r9, #28]
   15774:	ldr	r2, [pc, #324]	; 158c0 <argp_failure@@Base+0x1270>
   15778:	ldrh	r1, [r2]
   1577c:	ldrb	r2, [r2, #2]
   15780:	strh	r1, [r3]
   15784:	strb	r2, [r3, #2]
   15788:	ldr	r3, [r9, #28]
   1578c:	add	r3, r3, #3
   15790:	str	r3, [r9, #28]
   15794:	b	155b8 <argp_failure@@Base+0xf68>
   15798:	mov	r2, #0
   1579c:	str	r6, [sp, #4]
   157a0:	str	r7, [sp]
   157a4:	ldr	r3, [pc, #280]	; 158c4 <argp_failure@@Base+0x1274>
   157a8:	mov	r1, r2
   157ac:	ldr	r0, [fp, #-104]	; 0xffffff98
   157b0:	bl	14650 <argp_failure@@Base>
   157b4:	b	14f60 <argp_failure@@Base+0x910>
   157b8:	ldr	r3, [fp, #-136]	; 0xffffff78
   157bc:	ldr	r8, [r3]
   157c0:	str	r4, [fp, #-88]	; 0xffffffa8
   157c4:	str	r4, [fp, #-84]	; 0xffffffac
   157c8:	str	r4, [fp, #-80]	; 0xffffffb0
   157cc:	b	149f0 <argp_failure@@Base+0x3a0>
   157d0:	ldr	r0, [r9, #28]
   157d4:	mov	r2, r6
   157d8:	mov	r1, r5
   157dc:	bl	11088 <memcpy@plt>
   157e0:	ldr	r3, [r9, #28]
   157e4:	add	r6, r3, r6
   157e8:	str	r6, [r9, #28]
   157ec:	b	155f0 <argp_failure@@Base+0xfa0>
   157f0:	mov	r0, r9
   157f4:	bl	17c54 <argp_parse@@Base+0x1b08>
   157f8:	ldr	r3, [r9, #28]
   157fc:	ldr	r1, [r9, #24]
   15800:	ldr	r2, [r9, #16]
   15804:	ldr	r7, [r9, #20]
   15808:	ldr	sl, [fp, #-100]	; 0xffffff9c
   1580c:	sub	r3, r3, r1
   15810:	cmp	r3, r2
   15814:	ldr	r6, [sl, #20]
   15818:	bic	r7, r7, r7, asr #31
   1581c:	bls	15580 <argp_failure@@Base+0xf30>
   15820:	mov	r0, r9
   15824:	bl	17c54 <argp_parse@@Base+0x1b08>
   15828:	ldr	r3, [r9, #28]
   1582c:	ldr	r1, [r9, #24]
   15830:	ldr	r2, [r9, #16]
   15834:	sub	r3, r3, r1
   15838:	cmp	r3, r2
   1583c:	ldr	r3, [sl, #20]
   15840:	str	r6, [r9, #4]
   15844:	movls	r6, r3
   15848:	bls	15588 <argp_failure@@Base+0xf38>
   1584c:	mov	r0, r9
   15850:	str	r3, [fp, #-124]	; 0xffffff84
   15854:	bl	17c54 <argp_parse@@Base+0x1b08>
   15858:	ldr	r6, [sl, #20]
   1585c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15860:	b	15588 <argp_failure@@Base+0xf38>
   15864:	andeq	fp, r2, r8, asr r2
   15868:	andeq	fp, r2, r0, ror r3
   1586c:	andeq	r9, r1, r8, lsl #27
   15870:	andeq	r0, r0, #5
   15874:	andeq	r9, r1, r4, lsl sp
   15878:	andeq	r9, r1, r0, asr #23
   1587c:	muleq	r1, r0, sl
   15880:	andeq	r9, r1, r0, lsl #20
   15884:	andeq	r9, r1, ip, ror ip
   15888:	andeq	r9, r1, r8, asr #24
   1588c:			; <UNDEFINED> instruction: 0x00019cbc
   15890:	muleq	r1, r4, ip
   15894:	andeq	r9, r1, r4, lsr #25
   15898:	muleq	r1, ip, ip
   1589c:	andeq	r9, r1, ip, lsr #25
   158a0:	andeq	r9, r1, r4, lsl #25
   158a4:	andeq	r9, r1, ip, lsl #25
   158a8:	andeq	r3, r1, r8, ror r5
   158ac:	strdeq	r9, [r1], -ip
   158b0:	andeq	r9, r1, ip, lsl #26
   158b4:	andeq	r9, r1, r4, lsl #26
   158b8:	strdeq	r9, [r1], -r4
   158bc:	andeq	r9, r1, ip, asr #14
   158c0:	andeq	r9, r1, r0, lsl sp
   158c4:	andeq	r9, r1, r0, lsl #24
   158c8:	andeq	r9, r1, r8, lsr #24
   158cc:	ldrdeq	r9, [r1], -r0
   158d0:	str	r6, [sp]
   158d4:	ldr	r3, [pc, #-20]	; 158c8 <argp_failure@@Base+0x1278>
   158d8:	mov	r1, r2
   158dc:	ldr	r0, [fp, #-104]	; 0xffffff98
   158e0:	bl	14650 <argp_failure@@Base>
   158e4:	b	14f7c <argp_failure@@Base+0x92c>
   158e8:	mov	r0, r4
   158ec:	bl	16fe4 <argp_parse@@Base+0xe98>
   158f0:	b	14da8 <argp_failure@@Base+0x758>
   158f4:	ldr	r0, [r6, #16]
   158f8:	sub	r2, fp, #76	; 0x4c
   158fc:	ldr	r1, [r8, #20]
   15900:	bl	12b84 <__assert_fail@plt+0x18bc>
   15904:	b	1563c <argp_failure@@Base+0xfec>
   15908:	mov	r1, #1
   1590c:	mov	r0, r9
   15910:	bl	182e4 <argp_parse@@Base+0x2198>
   15914:	cmp	r0, #0
   15918:	beq	14970 <argp_failure@@Base+0x320>
   1591c:	ldr	r3, [r9, #28]
   15920:	b	14960 <argp_failure@@Base+0x310>
   15924:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15928:	bl	110f4 <funlockfile@plt>
   1592c:	b	14930 <argp_failure@@Base+0x2e0>
   15930:	mov	r1, r6
   15934:	mov	r0, r9
   15938:	bl	12aac <__assert_fail@plt+0x17e4>
   1593c:	b	155b8 <argp_failure@@Base+0xf68>
   15940:	mov	r1, #1
   15944:	mov	r0, r9
   15948:	bl	182e4 <argp_parse@@Base+0x2198>
   1594c:	cmp	r0, #0
   15950:	beq	155b8 <argp_failure@@Base+0xf68>
   15954:	ldr	r3, [r9, #28]
   15958:	b	155a8 <argp_failure@@Base+0xf58>
   1595c:	mov	r1, #1
   15960:	mov	r0, r9
   15964:	bl	182e4 <argp_parse@@Base+0x2198>
   15968:	cmp	r0, #0
   1596c:	beq	149c0 <argp_failure@@Base+0x370>
   15970:	ldr	r3, [r9, #28]
   15974:	b	149b0 <argp_failure@@Base+0x360>
   15978:	str	r6, [sp, #4]
   1597c:	str	r7, [sp]
   15980:	ldr	r3, [pc, #-188]	; 158cc <argp_failure@@Base+0x127c>
   15984:	mov	r2, #0
   15988:	ldr	r0, [fp, #-104]	; 0xffffff98
   1598c:	bl	14650 <argp_failure@@Base>
   15990:	b	14f58 <argp_failure@@Base+0x908>
   15994:	ldr	r3, [r9, #28]
   15998:	b	14d80 <argp_failure@@Base+0x730>
   1599c:	mov	r1, #1
   159a0:	mov	r0, r9
   159a4:	bl	182e4 <argp_parse@@Base+0x2198>
   159a8:	cmp	r0, #0
   159ac:	beq	14d9c <argp_failure@@Base+0x74c>
   159b0:	ldr	r3, [r9, #28]
   159b4:	b	14d8c <argp_failure@@Base+0x73c>
   159b8:	mov	r1, #1
   159bc:	mov	r0, r9
   159c0:	bl	182e4 <argp_parse@@Base+0x2198>
   159c4:	cmp	r0, #0
   159c8:	beq	14d2c <argp_failure@@Base+0x6dc>
   159cc:	ldr	r3, [r9, #28]
   159d0:	b	14d1c <argp_failure@@Base+0x6cc>

000159d4 <argp_help@@Base>:
   159d4:	push	{lr}		; (str lr, [sp, #-4]!)
   159d8:	sub	sp, sp, #12
   159dc:	str	r3, [sp]
   159e0:	mov	r3, r2
   159e4:	mov	r2, r1
   159e8:	mov	r1, #0
   159ec:	bl	14858 <argp_failure@@Base+0x208>
   159f0:	add	sp, sp, #12
   159f4:	pop	{pc}		; (ldr pc, [sp], #4)

000159f8 <argp_state_help@@Base>:
   159f8:	push	{r4, r5, lr}
   159fc:	subs	r4, r0, #0
   15a00:	sub	sp, sp, #12
   15a04:	mov	r5, r2
   15a08:	beq	15a68 <argp_state_help@@Base+0x70>
   15a0c:	ldr	r3, [r4, #16]
   15a10:	tst	r3, #2
   15a14:	bne	15a60 <argp_state_help@@Base+0x68>
   15a18:	cmp	r1, #0
   15a1c:	beq	15a60 <argp_state_help@@Base+0x68>
   15a20:	tst	r3, #64	; 0x40
   15a24:	ldr	r3, [r4, #40]	; 0x28
   15a28:	orrne	r5, r5, #128	; 0x80
   15a2c:	ldr	r0, [r4]
   15a30:	mov	r2, r1
   15a34:	str	r3, [sp]
   15a38:	mov	r1, r4
   15a3c:	mov	r3, r5
   15a40:	bl	14858 <argp_failure@@Base+0x208>
   15a44:	ldr	r3, [r4, #16]
   15a48:	tst	r3, #32
   15a4c:	bne	15a60 <argp_state_help@@Base+0x68>
   15a50:	ands	r0, r5, #256	; 0x100
   15a54:	bne	15a94 <argp_state_help@@Base+0x9c>
   15a58:	tst	r5, #512	; 0x200
   15a5c:	bne	15a90 <argp_state_help@@Base+0x98>
   15a60:	add	sp, sp, #12
   15a64:	pop	{r4, r5, pc}
   15a68:	cmp	r1, #0
   15a6c:	beq	15a60 <argp_state_help@@Base+0x68>
   15a70:	ldr	r3, [pc, #40]	; 15aa0 <argp_state_help@@Base+0xa8>
   15a74:	mov	r2, r1
   15a78:	mov	r1, r4
   15a7c:	ldr	ip, [r3]
   15a80:	mov	r3, r5
   15a84:	str	ip, [sp]
   15a88:	bl	14858 <argp_failure@@Base+0x208>
   15a8c:	b	15a50 <argp_state_help@@Base+0x58>
   15a90:	bl	1119c <exit@plt>
   15a94:	ldr	r3, [pc, #8]	; 15aa4 <argp_state_help@@Base+0xac>
   15a98:	ldr	r0, [r3]
   15a9c:	bl	1119c <exit@plt>
   15aa0:	muleq	r2, r8, r2
   15aa4:	andeq	fp, r2, r0, lsl #5

00015aa8 <argp_error@@Base>:
   15aa8:	push	{r1, r2, r3}
   15aac:	push	{r4, r5, lr}
   15ab0:	subs	r5, r0, #0
   15ab4:	sub	sp, sp, #8
   15ab8:	beq	15b88 <argp_error@@Base+0xe0>
   15abc:	ldr	r3, [r5, #16]
   15ac0:	tst	r3, #2
   15ac4:	bne	15b78 <argp_error@@Base+0xd0>
   15ac8:	ldr	r4, [r5, #44]	; 0x2c
   15acc:	cmp	r4, #0
   15ad0:	beq	15b78 <argp_error@@Base+0xd0>
   15ad4:	mov	r0, r4
   15ad8:	bl	1125c <flockfile@plt>
   15adc:	ldr	r0, [r5, #40]	; 0x28
   15ae0:	add	r3, sp, #24
   15ae4:	str	r3, [sp, #4]
   15ae8:	mov	r1, r4
   15aec:	bl	10fec <fputs_unlocked@plt>
   15af0:	ldr	r3, [r4, #20]
   15af4:	ldr	r2, [r4, #24]
   15af8:	cmp	r3, r2
   15afc:	addcc	r1, r3, #1
   15b00:	movcc	r2, #58	; 0x3a
   15b04:	strcc	r1, [r4, #20]
   15b08:	strbcc	r2, [r3]
   15b0c:	bcs	15bd4 <argp_error@@Base+0x12c>
   15b10:	ldr	r3, [r4, #20]
   15b14:	ldr	r2, [r4, #24]
   15b18:	cmp	r3, r2
   15b1c:	addcc	r1, r3, #1
   15b20:	movcc	r2, #32
   15b24:	strcc	r1, [r4, #20]
   15b28:	strbcc	r2, [r3]
   15b2c:	bcs	15bc4 <argp_error@@Base+0x11c>
   15b30:	ldr	r1, [sp, #20]
   15b34:	ldr	r2, [sp, #4]
   15b38:	mov	r0, r4
   15b3c:	bl	11244 <vfprintf@plt>
   15b40:	ldr	r3, [r4, #20]
   15b44:	ldr	r2, [r4, #24]
   15b48:	cmp	r3, r2
   15b4c:	addcc	r1, r3, #1
   15b50:	movcc	r2, #10
   15b54:	strcc	r1, [r4, #20]
   15b58:	strbcc	r2, [r3]
   15b5c:	bcs	15bb4 <argp_error@@Base+0x10c>
   15b60:	mov	r0, r5
   15b64:	mov	r2, #260	; 0x104
   15b68:	mov	r1, r4
   15b6c:	bl	159f8 <argp_state_help@@Base>
   15b70:	mov	r0, r4
   15b74:	bl	110f4 <funlockfile@plt>
   15b78:	add	sp, sp, #8
   15b7c:	pop	{r4, r5, lr}
   15b80:	add	sp, sp, #12
   15b84:	bx	lr
   15b88:	ldr	r3, [pc, #84]	; 15be4 <argp_error@@Base+0x13c>
   15b8c:	ldr	r4, [r3]
   15b90:	cmp	r4, #0
   15b94:	beq	15b78 <argp_error@@Base+0xd0>
   15b98:	mov	r0, r4
   15b9c:	bl	1125c <flockfile@plt>
   15ba0:	ldr	r2, [pc, #64]	; 15be8 <argp_error@@Base+0x140>
   15ba4:	add	r3, sp, #24
   15ba8:	str	r3, [sp, #4]
   15bac:	ldr	r0, [r2]
   15bb0:	b	15ae8 <argp_error@@Base+0x40>
   15bb4:	mov	r1, #10
   15bb8:	mov	r0, r4
   15bbc:	bl	11214 <__overflow@plt>
   15bc0:	b	15b60 <argp_error@@Base+0xb8>
   15bc4:	mov	r1, #32
   15bc8:	mov	r0, r4
   15bcc:	bl	11214 <__overflow@plt>
   15bd0:	b	15b30 <argp_error@@Base+0x88>
   15bd4:	mov	r1, #58	; 0x3a
   15bd8:	mov	r0, r4
   15bdc:	bl	11214 <__overflow@plt>
   15be0:	b	15b10 <argp_error@@Base+0x68>
   15be4:	andeq	fp, r2, r0, lsr #5
   15be8:	muleq	r2, r8, r2
   15bec:	ldr	r3, [r0]
   15bf0:	push	{r4, r5, r6, lr}
   15bf4:	cmp	r3, #0
   15bf8:	ldr	r5, [r0, #16]
   15bfc:	beq	15c64 <argp_error@@Base+0x1bc>
   15c00:	ldr	r0, [r1, #8]
   15c04:	mov	r2, #0
   15c08:	add	r0, r0, #1
   15c0c:	str	r0, [r1, #8]
   15c10:	b	15c18 <argp_error@@Base+0x170>
   15c14:	add	r2, r2, #1
   15c18:	add	r3, r3, #24
   15c1c:	ldr	r0, [r3, #-20]	; 0xffffffec
   15c20:	cmp	r0, #0
   15c24:	bne	15c14 <argp_error@@Base+0x16c>
   15c28:	ldr	r0, [r3, #-24]	; 0xffffffe8
   15c2c:	cmp	r0, #0
   15c30:	bne	15c14 <argp_error@@Base+0x16c>
   15c34:	ldr	r0, [r3, #-8]
   15c38:	cmp	r0, #0
   15c3c:	bne	15c14 <argp_error@@Base+0x16c>
   15c40:	ldr	r0, [r3, #-4]
   15c44:	cmp	r0, #0
   15c48:	bne	15c14 <argp_error@@Base+0x16c>
   15c4c:	ldm	r1, {r0, r3}
   15c50:	add	ip, r2, r2, lsl #1
   15c54:	add	r0, r0, ip
   15c58:	add	r2, r3, r2
   15c5c:	stm	r1, {r0, r2}
   15c60:	b	15c78 <argp_error@@Base+0x1d0>
   15c64:	ldr	r3, [r0, #4]
   15c68:	cmp	r3, #0
   15c6c:	ldrne	r3, [r1, #8]
   15c70:	addne	r3, r3, #1
   15c74:	strne	r3, [r1, #8]
   15c78:	cmp	r5, #0
   15c7c:	popeq	{r4, r5, r6, pc}
   15c80:	ldr	r0, [r5]
   15c84:	cmp	r0, #0
   15c88:	popeq	{r4, r5, r6, pc}
   15c8c:	mov	r4, r1
   15c90:	mov	r1, r4
   15c94:	bl	15bec <argp_error@@Base+0x144>
   15c98:	ldr	r3, [r4, #12]
   15c9c:	ldr	r0, [r5, #16]!
   15ca0:	add	r3, r3, #1
   15ca4:	cmp	r0, #0
   15ca8:	str	r3, [r4, #12]
   15cac:	bne	15c90 <argp_error@@Base+0x1e8>
   15cb0:	pop	{r4, r5, r6, pc}
   15cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cb8:	sub	sp, sp, #36	; 0x24
   15cbc:	ldr	sl, [r0]
   15cc0:	str	r0, [sp, #12]
   15cc4:	cmp	sl, #0
   15cc8:	str	r1, [sp, #16]
   15ccc:	str	r2, [sp, #20]
   15cd0:	mov	r9, r3
   15cd4:	ldr	r8, [r0, #16]
   15cd8:	ldr	r7, [sp, #72]	; 0x48
   15cdc:	beq	15ea8 <argp_error@@Base+0x400>
   15ce0:	add	fp, sl, #24
   15ce4:	str	r8, [sp, #28]
   15ce8:	str	r3, [sp, #24]
   15cec:	ldr	r4, [fp, #-20]	; 0xffffffec
   15cf0:	sub	r1, fp, #24
   15cf4:	cmp	r4, #0
   15cf8:	bne	15d08 <argp_error@@Base+0x260>
   15cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d00:	cmp	r3, #0
   15d04:	beq	15e7c <argp_error@@Base+0x3d4>
   15d08:	ldr	r3, [fp, #-12]
   15d0c:	tst	r3, #4
   15d10:	moveq	sl, r1
   15d14:	moveq	r5, r3
   15d18:	ldrne	r5, [sl, #12]
   15d1c:	ands	r5, r5, #8
   15d20:	bne	15e64 <argp_error@@Base+0x3bc>
   15d24:	tst	r3, #8
   15d28:	bne	15da4 <argp_error@@Base+0x2fc>
   15d2c:	sub	r3, r4, #1
   15d30:	cmp	r3, #254	; 0xfe
   15d34:	bhi	15da4 <argp_error@@Base+0x2fc>
   15d38:	bl	11184 <__ctype_b_loc@plt>
   15d3c:	lsl	r3, r4, #1
   15d40:	ldr	r1, [r0]
   15d44:	ldrh	r3, [r1, r3]
   15d48:	tst	r3, #16384	; 0x4000
   15d4c:	beq	15da4 <argp_error@@Base+0x2fc>
   15d50:	ldr	r3, [r7, #4]
   15d54:	add	r1, r3, #1
   15d58:	str	r1, [r7, #4]
   15d5c:	strb	r4, [r3]
   15d60:	ldr	r3, [sl, #8]
   15d64:	cmp	r3, #0
   15d68:	beq	15d98 <argp_error@@Base+0x2f0>
   15d6c:	ldr	r3, [r7, #4]
   15d70:	mov	r2, #58	; 0x3a
   15d74:	add	r1, r3, #1
   15d78:	str	r1, [r7, #4]
   15d7c:	strb	r2, [r3]
   15d80:	ldr	r3, [sl, #12]
   15d84:	tst	r3, #1
   15d88:	ldrne	r3, [r7, #4]
   15d8c:	addne	r1, r3, #1
   15d90:	strne	r1, [r7, #4]
   15d94:	strbne	r2, [r3]
   15d98:	ldr	r3, [r7, #4]
   15d9c:	mov	r2, #0
   15da0:	strb	r2, [r3]
   15da4:	ldr	r4, [fp, #-24]	; 0xffffffe8
   15da8:	cmp	r4, #0
   15dac:	beq	15e64 <argp_error@@Base+0x3bc>
   15db0:	ldr	r8, [r7]
   15db4:	ldr	r6, [r8, #8]
   15db8:	ldr	r0, [r6]
   15dbc:	cmp	r0, #0
   15dc0:	beq	15de4 <argp_error@@Base+0x33c>
   15dc4:	mov	r9, r6
   15dc8:	mov	r1, r4
   15dcc:	bl	11004 <strcmp@plt>
   15dd0:	cmp	r0, #0
   15dd4:	beq	15e6c <argp_error@@Base+0x3c4>
   15dd8:	ldr	r0, [r9, #16]!
   15ddc:	cmp	r0, #0
   15de0:	bne	15dc8 <argp_error@@Base+0x320>
   15de4:	ldr	r3, [sl, #8]
   15de8:	ldr	r1, [r7, #8]
   15dec:	cmp	r3, #0
   15df0:	str	r4, [r1]
   15df4:	beq	15e08 <argp_error@@Base+0x360>
   15df8:	ldr	r3, [sl, #12]
   15dfc:	tst	r3, #1
   15e00:	moveq	r5, #1
   15e04:	movne	r5, #2
   15e08:	str	r5, [r1, #4]
   15e0c:	ldr	ip, [fp, #-20]	; 0xffffffec
   15e10:	mov	r3, #0
   15e14:	cmp	ip, r3
   15e18:	str	r3, [r1, #8]
   15e1c:	ldr	r2, [sp, #24]
   15e20:	ldr	r3, [r8, #48]	; 0x30
   15e24:	ldreq	ip, [sl, #4]
   15e28:	sub	r3, r2, r3
   15e2c:	bic	ip, ip, #-16777216	; 0xff000000
   15e30:	asr	r3, r3, #2
   15e34:	add	lr, r1, #16
   15e38:	rsb	r0, r3, r3, lsl #3
   15e3c:	add	r0, r0, r0, lsl #6
   15e40:	add	r0, r3, r0, lsl #3
   15e44:	rsb	r0, r0, r0, lsl #15
   15e48:	add	r3, r3, r0, lsl #3
   15e4c:	add	r3, r3, #1
   15e50:	add	r3, ip, r3, lsl #24
   15e54:	str	r3, [r1, #12]
   15e58:	mov	r3, #0
   15e5c:	str	lr, [r7, #8]
   15e60:	str	r3, [r1, #16]
   15e64:	add	fp, fp, #24
   15e68:	b	15cec <argp_error@@Base+0x244>
   15e6c:	sub	r6, r9, r6
   15e70:	cmn	r6, #15
   15e74:	bge	15e64 <argp_error@@Base+0x3bc>
   15e78:	b	15de4 <argp_error@@Base+0x33c>
   15e7c:	ldr	r3, [fp, #-8]
   15e80:	cmp	r3, #0
   15e84:	bne	15d08 <argp_error@@Base+0x260>
   15e88:	ldr	r3, [fp, #-4]
   15e8c:	cmp	r3, #0
   15e90:	bne	15d08 <argp_error@@Base+0x260>
   15e94:	ldr	r3, [sp, #12]
   15e98:	ldr	r8, [sp, #28]
   15e9c:	ldr	r9, [sp, #24]
   15ea0:	ldr	r3, [r3, #4]
   15ea4:	b	15ec0 <argp_error@@Base+0x418>
   15ea8:	ldr	r3, [sp, #12]
   15eac:	ldr	r3, [r3, #4]
   15eb0:	cmp	r3, #0
   15eb4:	moveq	r0, r9
   15eb8:	moveq	r9, r3
   15ebc:	beq	15f30 <argp_error@@Base+0x488>
   15ec0:	ldr	r2, [r7, #4]
   15ec4:	ldr	r1, [sp, #12]
   15ec8:	str	r3, [r9]
   15ecc:	cmp	r8, #0
   15ed0:	stmib	r9, {r1, r2}
   15ed4:	ldr	r2, [sp, #16]
   15ed8:	mov	r3, #0
   15edc:	str	r2, [r9, #16]
   15ee0:	ldr	r2, [sp, #20]
   15ee4:	str	r3, [r9, #12]
   15ee8:	str	r2, [r9, #20]
   15eec:	str	r3, [r9, #24]
   15ef0:	str	r3, [r9, #32]
   15ef4:	str	r3, [r9, #28]
   15ef8:	beq	15f2c <argp_error@@Base+0x484>
   15efc:	ldr	r2, [r8]
   15f00:	cmp	r2, r3
   15f04:	beq	15f78 <argp_error@@Base+0x4d0>
   15f08:	add	r3, r3, #1
   15f0c:	ldr	r2, [r8, r3, lsl #4]
   15f10:	cmp	r2, #0
   15f14:	bne	15f08 <argp_error@@Base+0x460>
   15f18:	lsl	r3, r3, #2
   15f1c:	ldr	r2, [r7, #12]
   15f20:	add	r3, r2, r3
   15f24:	str	r2, [r9, #28]
   15f28:	str	r3, [r7, #12]
   15f2c:	add	r0, r9, #36	; 0x24
   15f30:	cmp	r8, #0
   15f34:	beq	15f70 <argp_error@@Base+0x4c8>
   15f38:	ldr	r1, [r8]
   15f3c:	cmp	r1, #0
   15f40:	beq	15f70 <argp_error@@Base+0x4c8>
   15f44:	mov	r2, #0
   15f48:	add	r4, r2, #1
   15f4c:	mov	r3, r0
   15f50:	str	r7, [sp]
   15f54:	mov	r0, r1
   15f58:	mov	r1, r9
   15f5c:	bl	15cb4 <argp_error@@Base+0x20c>
   15f60:	ldr	r1, [r8, r4, lsl #4]
   15f64:	mov	r2, r4
   15f68:	cmp	r1, #0
   15f6c:	bne	15f48 <argp_error@@Base+0x4a0>
   15f70:	add	sp, sp, #36	; 0x24
   15f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f78:	mov	r3, r2
   15f7c:	b	15f1c <argp_error@@Base+0x474>
   15f80:	cmp	r0, #86	; 0x56
   15f84:	beq	15f90 <argp_error@@Base+0x4e8>
   15f88:	mov	r0, #7
   15f8c:	bx	lr
   15f90:	ldr	r3, [pc, #104]	; 16000 <argp_error@@Base+0x558>
   15f94:	push	{r4, lr}
   15f98:	mov	r4, r2
   15f9c:	ldr	r3, [r3]
   15fa0:	cmp	r3, #0
   15fa4:	beq	15fc8 <argp_error@@Base+0x520>
   15fa8:	mov	r1, r2
   15fac:	ldr	r0, [r2, #48]	; 0x30
   15fb0:	blx	r3
   15fb4:	ldr	r0, [r4, #16]
   15fb8:	ands	r0, r0, #32
   15fbc:	beq	15ffc <argp_error@@Base+0x554>
   15fc0:	mov	r0, #0
   15fc4:	pop	{r4, pc}
   15fc8:	ldr	r3, [pc, #52]	; 16004 <argp_error@@Base+0x55c>
   15fcc:	ldr	r2, [r3]
   15fd0:	cmp	r2, #0
   15fd4:	beq	15fe8 <argp_error@@Base+0x540>
   15fd8:	ldr	r1, [pc, #40]	; 16008 <argp_error@@Base+0x560>
   15fdc:	ldr	r0, [r4, #48]	; 0x30
   15fe0:	bl	111c0 <fprintf@plt>
   15fe4:	b	15fb4 <argp_error@@Base+0x50c>
   15fe8:	ldr	r2, [pc, #28]	; 1600c <argp_error@@Base+0x564>
   15fec:	ldr	r1, [pc, #28]	; 16010 <argp_error@@Base+0x568>
   15ff0:	mov	r0, r4
   15ff4:	bl	15aa8 <argp_error@@Base>
   15ff8:	b	15fb4 <argp_error@@Base+0x50c>
   15ffc:	bl	1119c <exit@plt>
   16000:	andeq	fp, r2, ip, asr #5
   16004:	andeq	fp, r2, r4, ror r3
   16008:	andeq	sl, r1, r4, asr #32
   1600c:			; <UNDEFINED> instruction: 0x00019eb4
   16010:	ldrdeq	r9, [r1], -r8
   16014:	cmn	r0, #3
   16018:	push	{r4, r5, lr}
   1601c:	mov	r4, r2
   16020:	sub	sp, sp, #12
   16024:	beq	16108 <argp_error@@Base+0x660>
   16028:	ble	16098 <argp_error@@Base+0x5f0>
   1602c:	cmn	r0, #2
   16030:	beq	16058 <argp_error@@Base+0x5b0>
   16034:	cmp	r0, #63	; 0x3f
   16038:	bne	160fc <argp_error@@Base+0x654>
   1603c:	mov	r0, r4
   16040:	ldr	r2, [pc, #236]	; 16134 <argp_error@@Base+0x68c>
   16044:	ldr	r1, [r4, #48]	; 0x30
   16048:	bl	159f8 <argp_state_help@@Base>
   1604c:	mov	r0, #0
   16050:	add	sp, sp, #12
   16054:	pop	{r4, r5, pc}
   16058:	ldr	r3, [pc, #216]	; 16138 <argp_error@@Base+0x690>
   1605c:	mov	r0, r1
   16060:	str	r1, [sp, #4]
   16064:	str	r1, [r3]
   16068:	bl	16f38 <argp_parse@@Base+0xdec>
   1606c:	ldr	r3, [r4, #16]
   16070:	ldr	r2, [pc, #196]	; 1613c <argp_error@@Base+0x694>
   16074:	and	r3, r3, #3
   16078:	cmp	r3, #1
   1607c:	ldr	r1, [sp, #4]
   16080:	str	r0, [r4, #40]	; 0x28
   16084:	str	r0, [r2]
   16088:	beq	16124 <argp_error@@Base+0x67c>
   1608c:	mov	r0, #0
   16090:	add	sp, sp, #12
   16094:	pop	{r4, r5, pc}
   16098:	cmn	r0, #4
   1609c:	bne	160fc <argp_error@@Base+0x654>
   160a0:	cmp	r1, #0
   160a4:	ldr	r0, [pc, #148]	; 16140 <argp_error@@Base+0x698>
   160a8:	mov	r2, #10
   160ac:	movne	r0, r1
   160b0:	mov	r1, #0
   160b4:	bl	11010 <strtol@plt>
   160b8:	ldr	r4, [pc, #132]	; 16144 <argp_error@@Base+0x69c>
   160bc:	str	r0, [r4]
   160c0:	ldr	r3, [r4]
   160c4:	cmp	r3, #0
   160c8:	sub	r3, r3, #1
   160cc:	str	r3, [r4]
   160d0:	ble	1608c <argp_error@@Base+0x5e4>
   160d4:	mov	r5, #1
   160d8:	mov	r0, r5
   160dc:	bl	110b8 <sleep@plt>
   160e0:	ldr	r3, [r4]
   160e4:	cmp	r3, #0
   160e8:	sub	r3, r3, #1
   160ec:	str	r3, [r4]
   160f0:	bgt	160d8 <argp_error@@Base+0x630>
   160f4:	mov	r0, #0
   160f8:	b	16090 <argp_error@@Base+0x5e8>
   160fc:	mov	r0, #7
   16100:	add	sp, sp, #12
   16104:	pop	{r4, r5, pc}
   16108:	mov	r0, r4
   1610c:	ldr	r2, [pc, #52]	; 16148 <argp_error@@Base+0x6a0>
   16110:	ldr	r1, [r4, #48]	; 0x30
   16114:	bl	159f8 <argp_state_help@@Base>
   16118:	mov	r0, #0
   1611c:	add	sp, sp, #12
   16120:	pop	{r4, r5, pc}
   16124:	ldr	r3, [r4, #8]
   16128:	mov	r0, #0
   1612c:	str	r1, [r3]
   16130:	b	16050 <argp_error@@Base+0x5a8>
   16134:	andeq	r0, r0, sl, ror r2
   16138:	muleq	r2, ip, r2
   1613c:	muleq	r2, r8, r2
   16140:	ldrdeq	r9, [r1], -ip
   16144:	andeq	fp, r2, r8, asr #5
   16148:	andeq	r0, r0, r1, lsl #4

0001614c <argp_parse@@Base>:
   1614c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16150:	add	fp, sp, #32
   16154:	tst	r3, #1
   16158:	sub	sp, sp, #228	; 0xe4
   1615c:	mov	r6, r3
   16160:	mov	r7, r0
   16164:	str	r1, [fp, #-240]	; 0xffffff10
   16168:	str	r2, [fp, #-232]	; 0xffffff18
   1616c:	bne	16198 <argp_parse@@Base+0x4c>
   16170:	ldr	r3, [pc, #3260]	; 16e34 <argp_parse@@Base+0xce8>
   16174:	ldr	r4, [pc, #3260]	; 16e38 <argp_parse@@Base+0xcec>
   16178:	ldr	r2, [r3]
   1617c:	cmp	r2, #0
   16180:	ldreq	r2, [fp, #-232]	; 0xffffff18
   16184:	ldreq	r2, [r2]
   16188:	streq	r2, [r3]
   1618c:	ldr	r3, [r4]
   16190:	cmp	r3, #0
   16194:	beq	16838 <argp_parse@@Base+0x6ec>
   16198:	ands	r3, r6, #16
   1619c:	beq	16740 <argp_parse@@Base+0x5f4>
   161a0:	sub	r4, fp, #196	; 0xc4
   161a4:	mov	r0, r4
   161a8:	mov	r2, #36	; 0x24
   161ac:	mov	r1, #0
   161b0:	bl	111e4 <memset@plt>
   161b4:	ands	r3, r6, #4
   161b8:	str	r3, [fp, #-244]	; 0xffffff0c
   161bc:	mov	r3, #0
   161c0:	moveq	r0, #1
   161c4:	movne	r0, #0
   161c8:	cmp	r7, r3
   161cc:	str	r3, [fp, #-224]	; 0xffffff20
   161d0:	str	r3, [fp, #-220]	; 0xffffff24
   161d4:	str	r3, [fp, #-216]	; 0xffffff28
   161d8:	str	r0, [fp, #-228]	; 0xffffff1c
   161dc:	beq	16644 <argp_parse@@Base+0x4f8>
   161e0:	mov	r0, r7
   161e4:	sub	r1, fp, #228	; 0xe4
   161e8:	bl	15bec <argp_error@@Base+0x144>
   161ec:	ldr	r5, [fp, #-220]	; 0xffffff24
   161f0:	ldr	r9, [fp, #-216]	; 0xffffff28
   161f4:	add	r5, r5, #1
   161f8:	ldr	r3, [fp, #-224]	; 0xffffff20
   161fc:	add	r5, r5, r5, lsl #3
   16200:	lsl	r2, r9, #2
   16204:	lsl	r5, r5, #2
   16208:	add	r3, r3, #1
   1620c:	add	sl, r2, r5
   16210:	ldr	r0, [fp, #-228]	; 0xffffff1c
   16214:	add	r9, sl, r3, lsl #4
   16218:	str	r2, [fp, #-236]	; 0xffffff14
   1621c:	add	r0, r9, r0
   16220:	add	r0, r0, #1
   16224:	bl	17b50 <argp_parse@@Base+0x1a04>
   16228:	cmp	r0, #0
   1622c:	mov	r8, r0
   16230:	str	r0, [fp, #-40]	; 0xffffffd8
   16234:	moveq	r5, #12
   16238:	beq	16638 <argp_parse@@Base+0x4ec>
   1623c:	mov	r3, #1
   16240:	str	r3, [fp, #-196]	; 0xffffff3c
   16244:	str	r3, [fp, #-192]	; 0xffffff40
   16248:	ldm	r4!, {r0, r1, r2, r3}
   1624c:	sub	ip, fp, #148	; 0x94
   16250:	add	r5, r8, r5
   16254:	str	r5, [fp, #-104]	; 0xffffff98
   16258:	stmia	ip!, {r0, r1, r2, r3}
   1625c:	add	r3, r8, sl
   16260:	mov	lr, r3
   16264:	ldm	r4!, {r0, r1, r2, r3}
   16268:	add	sl, r8, r9
   1626c:	str	lr, [fp, #-248]	; 0xffffff08
   16270:	str	lr, [fp, #-152]	; 0xffffff68
   16274:	ldr	lr, [r4]
   16278:	stmia	ip!, {r0, r1, r2, r3}
   1627c:	mov	r0, r5
   16280:	ldr	r2, [fp, #-236]	; 0xffffff14
   16284:	mov	r1, #0
   16288:	str	lr, [ip]
   1628c:	str	r8, [fp, #-112]	; 0xffffff90
   16290:	str	sl, [fp, #-156]	; 0xffffff64
   16294:	bl	111e4 <memset@plt>
   16298:	ldr	lr, [fp, #-248]	; 0xffffff08
   1629c:	sub	r4, fp, #160	; 0xa0
   162a0:	tst	r6, #8
   162a4:	str	lr, [fp, #-204]	; 0xffffff34
   162a8:	str	sl, [fp, #-208]	; 0xffffff30
   162ac:	str	r5, [fp, #-200]	; 0xffffff38
   162b0:	str	r4, [fp, #-212]	; 0xffffff2c
   162b4:	bne	16658 <argp_parse@@Base+0x50c>
   162b8:	ldr	r3, [fp, #-244]	; 0xffffff0c
   162bc:	cmp	r3, #0
   162c0:	addne	r3, sl, #1
   162c4:	movne	r2, #43	; 0x2b
   162c8:	strbne	r2, [sl]
   162cc:	movne	sl, r3
   162d0:	strne	r3, [fp, #-208]	; 0xffffff30
   162d4:	mov	r2, #0
   162d8:	strb	r2, [sl]
   162dc:	ldr	r3, [fp, #-204]	; 0xffffff34
   162e0:	cmp	r7, r2
   162e4:	str	r2, [r3]
   162e8:	str	r7, [fp, #-160]	; 0xffffff60
   162ec:	beq	16800 <argp_parse@@Base+0x6b4>
   162f0:	sub	r1, fp, #212	; 0xd4
   162f4:	mov	r0, r7
   162f8:	str	r1, [sp]
   162fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   16300:	mov	r1, r2
   16304:	bl	15cb4 <argp_error@@Base+0x20c>
   16308:	ldr	r7, [fp, #-160]	; 0xffffff60
   1630c:	ldr	r5, [fp, #-112]	; 0xffffff90
   16310:	mov	r8, r0
   16314:	str	r0, [fp, #-108]	; 0xffffff94
   16318:	mov	r2, #56	; 0x38
   1631c:	mov	r1, #0
   16320:	sub	r0, fp, #96	; 0x60
   16324:	bl	111e4 <memset@plt>
   16328:	ldr	r2, [pc, #2828]	; 16e3c <argp_parse@@Base+0xcf0>
   1632c:	ldr	r3, [pc, #2828]	; 16e40 <argp_parse@@Base+0xcf4>
   16330:	ldr	r0, [fp, #-240]	; 0xffffff10
   16334:	ldr	r1, [r2]
   16338:	str	r0, [fp, #-92]	; 0xffffffa4
   1633c:	ldr	r2, [r3]
   16340:	ldr	r0, [fp, #-232]	; 0xffffff18
   16344:	mov	r3, #1
   16348:	cmp	r5, r8
   1634c:	str	r7, [fp, #-96]	; 0xffffffa0
   16350:	str	r0, [fp, #-88]	; 0xffffffa8
   16354:	str	r6, [fp, #-80]	; 0xffffffb0
   16358:	str	r4, [fp, #-44]	; 0xffffffd4
   1635c:	str	r1, [fp, #-52]	; 0xffffffcc
   16360:	str	r2, [fp, #-48]	; 0xffffffd0
   16364:	str	r3, [fp, #-100]	; 0xffffff9c
   16368:	bcc	1666c <argp_parse@@Base+0x520>
   1636c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16370:	tst	r3, #2
   16374:	bne	16810 <argp_parse@@Base+0x6c4>
   16378:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1637c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   16380:	mov	r2, #1
   16384:	str	r2, [fp, #-144]	; 0xffffff70
   16388:	ldr	r2, [fp, #-232]	; 0xffffff18
   1638c:	cmp	r2, r3
   16390:	beq	16d10 <argp_parse@@Base+0xbc4>
   16394:	ldr	r3, [pc, #2716]	; 16e38 <argp_parse@@Base+0xcec>
   16398:	ldr	r3, [r3]
   1639c:	str	r3, [fp, #-56]	; 0xffffffc8
   163a0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   163a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   163a8:	ldr	sl, [pc, #2708]	; 16e44 <argp_parse@@Base+0xcf8>
   163ac:	mov	r0, r4
   163b0:	mov	r6, #0
   163b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   163b8:	cmp	r3, #0
   163bc:	beq	1684c <argp_parse@@Base+0x700>
   163c0:	cmp	r3, r5
   163c4:	strgt	r6, [fp, #-72]	; 0xffffffb8
   163c8:	bgt	1684c <argp_parse@@Base+0x700>
   163cc:	cmp	r5, r0
   163d0:	blt	16be8 <argp_parse@@Base+0xa9c>
   163d4:	cmp	r5, r0
   163d8:	bne	16bf4 <argp_parse@@Base+0xaa8>
   163dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   163e0:	ldr	ip, [fp, #-108]	; 0xffffff94
   163e4:	cmp	r3, ip
   163e8:	bcs	16dd8 <argp_parse@@Base+0xc8c>
   163ec:	mov	r5, #0
   163f0:	add	r4, r3, #36	; 0x24
   163f4:	mov	r7, r5
   163f8:	ldr	r6, [pc, #2632]	; 16e48 <argp_parse@@Base+0xcfc>
   163fc:	mov	r0, r5
   16400:	b	16448 <argp_parse@@Base+0x2fc>
   16404:	ldr	ip, [r4, #-4]
   16408:	str	ip, [fp, #-60]	; 0xffffffc4
   1640c:	ldr	ip, [r4, #-12]
   16410:	str	ip, [fp, #-68]	; 0xffffffbc
   16414:	ldr	ip, [r4, #-8]
   16418:	str	r3, [fp, #-76]	; 0xffffffb4
   1641c:	str	ip, [fp, #-64]	; 0xffffffc0
   16420:	blx	r5
   16424:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16428:	str	r3, [r4, #-4]
   1642c:	ldr	ip, [fp, #-108]	; 0xffffff94
   16430:	cmp	ip, r4
   16434:	bls	16d80 <argp_parse@@Base+0xc34>
   16438:	cmp	r0, #7
   1643c:	cmpne	r0, #0
   16440:	bne	16d5c <argp_parse@@Base+0xc10>
   16444:	add	r4, r4, #36	; 0x24
   16448:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1644c:	cmp	r3, #0
   16450:	bne	16430 <argp_parse@@Base+0x2e4>
   16454:	ldr	r5, [r4, #-36]	; 0xffffffdc
   16458:	sub	r2, fp, #96	; 0x60
   1645c:	cmp	r5, #0
   16460:	mov	r1, r7
   16464:	mov	r0, r6
   16468:	bne	16404 <argp_parse@@Base+0x2b8>
   1646c:	cmp	ip, r4
   16470:	mov	r0, #7
   16474:	bhi	16444 <argp_parse@@Base+0x2f8>
   16478:	ldr	r3, [fp, #-112]	; 0xffffff90
   1647c:	sub	r4, ip, #36	; 0x24
   16480:	cmp	r4, r3
   16484:	movcs	r5, #7
   16488:	bcc	16510 <argp_parse@@Base+0x3c4>
   1648c:	cmp	r5, #7
   16490:	cmpne	r5, #0
   16494:	bne	16d70 <argp_parse@@Base+0xc24>
   16498:	sub	r4, r4, #36	; 0x24
   1649c:	mov	r7, #0
   164a0:	ldr	r6, [pc, #2468]	; 16e4c <argp_parse@@Base+0xd00>
   164a4:	b	164f0 <argp_parse@@Base+0x3a4>
   164a8:	ldr	r3, [r4, #68]	; 0x44
   164ac:	ldr	ip, [r4, #48]	; 0x30
   164b0:	str	r3, [fp, #-60]	; 0xffffffc4
   164b4:	ldr	r3, [r4, #60]	; 0x3c
   164b8:	str	r3, [fp, #-68]	; 0xffffffbc
   164bc:	ldr	r3, [r4, #64]	; 0x40
   164c0:	str	ip, [fp, #-76]	; 0xffffffb4
   164c4:	str	r3, [fp, #-64]	; 0xffffffc0
   164c8:	blx	r5
   164cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   164d0:	str	r3, [r4, #68]	; 0x44
   164d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   164d8:	cmp	r4, r3
   164dc:	bcc	16dd0 <argp_parse@@Base+0xc84>
   164e0:	cmp	r0, #7
   164e4:	cmpne	r0, #0
   164e8:	bne	16d40 <argp_parse@@Base+0xbf4>
   164ec:	sub	r4, r4, #36	; 0x24
   164f0:	ldr	r5, [r4, #36]	; 0x24
   164f4:	sub	r2, fp, #96	; 0x60
   164f8:	cmp	r5, #0
   164fc:	mov	r1, r7
   16500:	mov	r0, r6
   16504:	bne	164a8 <argp_parse@@Base+0x35c>
   16508:	cmp	r4, r3
   1650c:	bcs	164ec <argp_parse@@Base+0x3a0>
   16510:	ldr	r2, [fp, #4]
   16514:	cmp	r2, #0
   16518:	beq	16534 <argp_parse@@Base+0x3e8>
   1651c:	mov	r5, #0
   16520:	ldr	r1, [fp, #4]
   16524:	ldr	r2, [fp, #-84]	; 0xffffffac
   16528:	str	r2, [r1]
   1652c:	cmp	r5, #0
   16530:	bne	16d50 <argp_parse@@Base+0xc04>
   16534:	ldr	ip, [fp, #-108]	; 0xffffff94
   16538:	b	16c0c <argp_parse@@Base+0xac0>
   1653c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16540:	mov	r5, r0
   16544:	ldr	ip, [fp, #-108]	; 0xffffff94
   16548:	cmp	ip, r3
   1654c:	bls	16d08 <argp_parse@@Base+0xbbc>
   16550:	ldr	r7, [pc, #2296]	; 16e50 <argp_parse@@Base+0xd04>
   16554:	add	r4, r3, #36	; 0x24
   16558:	mov	r8, #0
   1655c:	ldr	r3, [r4, #-36]	; 0xffffffdc
   16560:	sub	r2, fp, #96	; 0x60
   16564:	cmp	r3, #0
   16568:	mov	r1, r8
   1656c:	mov	r0, r7
   16570:	mov	r6, r4
   16574:	beq	165a8 <argp_parse@@Base+0x45c>
   16578:	ldr	ip, [r4, #-4]
   1657c:	ldr	lr, [r4, #-24]	; 0xffffffe8
   16580:	str	ip, [fp, #-60]	; 0xffffffc4
   16584:	ldr	ip, [r4, #-12]
   16588:	str	ip, [fp, #-68]	; 0xffffffbc
   1658c:	ldr	ip, [r4, #-8]
   16590:	str	lr, [fp, #-76]	; 0xffffffb4
   16594:	str	ip, [fp, #-64]	; 0xffffffc0
   16598:	blx	r3
   1659c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   165a0:	str	r3, [r4, #-4]
   165a4:	ldr	ip, [fp, #-108]	; 0xffffff94
   165a8:	cmp	ip, r6
   165ac:	add	r4, r4, #36	; 0x24
   165b0:	bhi	1655c <argp_parse@@Base+0x410>
   165b4:	ldr	r3, [fp, #-112]	; 0xffffff90
   165b8:	sub	ip, ip, #36	; 0x24
   165bc:	cmp	r3, ip
   165c0:	bhi	16628 <argp_parse@@Base+0x4dc>
   165c4:	ldr	r8, [pc, #2184]	; 16e54 <argp_parse@@Base+0xd08>
   165c8:	sub	r4, ip, #36	; 0x24
   165cc:	mov	r9, #0
   165d0:	ldr	r6, [r4, #36]	; 0x24
   165d4:	sub	r2, fp, #96	; 0x60
   165d8:	cmp	r6, #0
   165dc:	mov	r1, r9
   165e0:	mov	r0, r8
   165e4:	mov	r7, r4
   165e8:	beq	1661c <argp_parse@@Base+0x4d0>
   165ec:	ldr	r3, [r4, #68]	; 0x44
   165f0:	ldr	ip, [r4, #48]	; 0x30
   165f4:	str	r3, [fp, #-60]	; 0xffffffc4
   165f8:	ldr	r3, [r4, #60]	; 0x3c
   165fc:	str	r3, [fp, #-68]	; 0xffffffbc
   16600:	ldr	r3, [r4, #64]	; 0x40
   16604:	str	ip, [fp, #-76]	; 0xffffffb4
   16608:	str	r3, [fp, #-64]	; 0xffffffc0
   1660c:	blx	r6
   16610:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16614:	str	r3, [r4, #68]	; 0x44
   16618:	ldr	r3, [fp, #-112]	; 0xffffff90
   1661c:	cmp	r3, r7
   16620:	sub	r4, r4, #36	; 0x24
   16624:	bls	165d0 <argp_parse@@Base+0x484>
   16628:	cmp	r5, #7
   1662c:	moveq	r5, #22
   16630:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16634:	bl	16fe4 <argp_parse@@Base+0xe98>
   16638:	mov	r0, r5
   1663c:	sub	sp, fp, #32
   16640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16644:	mov	sl, #36	; 0x24
   16648:	mov	r5, sl
   1664c:	mov	r9, #52	; 0x34
   16650:	str	r7, [fp, #-236]	; 0xffffff14
   16654:	b	1621c <argp_parse@@Base+0xd0>
   16658:	add	sl, sl, #1
   1665c:	mov	r3, #45	; 0x2d
   16660:	str	sl, [fp, #-208]	; 0xffffff30
   16664:	strb	r3, [r8, r9]
   16668:	b	162d4 <argp_parse@@Base+0x188>
   1666c:	ldr	r3, [fp, #8]
   16670:	add	r4, r5, #36	; 0x24
   16674:	str	r3, [r5, #24]
   16678:	mov	r7, #0
   1667c:	ldr	r6, [pc, #2004]	; 16e58 <argp_parse@@Base+0xd0c>
   16680:	b	166d8 <argp_parse@@Base+0x58c>
   16684:	ldr	r2, [r4, #-4]
   16688:	ldr	r0, [r4, #-24]	; 0xffffffe8
   1668c:	str	r2, [fp, #-60]	; 0xffffffc4
   16690:	ldr	r1, [r4, #-12]
   16694:	sub	r2, fp, #96	; 0x60
   16698:	str	r1, [fp, #-68]	; 0xffffffbc
   1669c:	ldr	ip, [r4, #-8]
   166a0:	mov	r1, r7
   166a4:	str	r0, [fp, #-76]	; 0xffffffb4
   166a8:	str	ip, [fp, #-64]	; 0xffffffc0
   166ac:	mov	r0, r6
   166b0:	blx	r3
   166b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   166b8:	str	r3, [r4, #-4]
   166bc:	ldr	r3, [fp, #-108]	; 0xffffff94
   166c0:	cmp	r3, r4
   166c4:	bls	16df4 <argp_parse@@Base+0xca8>
   166c8:	cmp	r0, #7
   166cc:	cmpne	r0, #0
   166d0:	bne	167f0 <argp_parse@@Base+0x6a4>
   166d4:	add	r4, r4, #36	; 0x24
   166d8:	ldr	r3, [r4, #-20]	; 0xffffffec
   166dc:	cmp	r3, #0
   166e0:	ldrne	r3, [r3, #28]
   166e4:	ldrne	r2, [r4, #-16]
   166e8:	ldrne	r3, [r3, r2, lsl #2]
   166ec:	strne	r3, [r4, #-12]
   166f0:	ldr	r3, [r4, #-36]	; 0xffffffdc
   166f4:	cmp	r3, #0
   166f8:	bne	16684 <argp_parse@@Base+0x538>
   166fc:	ldr	r3, [r4, #-32]	; 0xffffffe0
   16700:	ldr	r3, [r3, #16]
   16704:	cmp	r3, #0
   16708:	beq	16730 <argp_parse@@Base+0x5e4>
   1670c:	ldr	r3, [r3]
   16710:	cmp	r3, #0
   16714:	beq	16730 <argp_parse@@Base+0x5e4>
   16718:	ldr	r3, [r4, #-8]
   1671c:	ldr	r2, [r4, #-12]
   16720:	str	r2, [r3]
   16724:	ldr	r3, [r4, #-36]	; 0xffffffdc
   16728:	cmp	r3, #0
   1672c:	bne	16684 <argp_parse@@Base+0x538>
   16730:	ldr	r3, [fp, #-108]	; 0xffffff94
   16734:	cmp	r3, r4
   16738:	bhi	166d4 <argp_parse@@Base+0x588>
   1673c:	b	1636c <argp_parse@@Base+0x220>
   16740:	sub	sp, sp, #72	; 0x48
   16744:	add	r4, sp, #8
   16748:	sub	sp, sp, #40	; 0x28
   1674c:	add	r5, sp, #8
   16750:	mov	r1, r3
   16754:	mov	r0, r4
   16758:	mov	r2, #64	; 0x40
   1675c:	str	r3, [r5]
   16760:	str	r3, [r5, #4]
   16764:	str	r3, [r5, #8]
   16768:	str	r3, [r5, #12]
   1676c:	str	r3, [r5, #20]
   16770:	str	r3, [r5, #24]
   16774:	str	r4, [r5, #16]
   16778:	bl	111e4 <memset@plt>
   1677c:	ldr	r3, [pc, #1752]	; 16e5c <argp_parse@@Base+0xd10>
   16780:	cmp	r7, #0
   16784:	strne	r7, [r4]
   16788:	ldr	r3, [r3]
   1678c:	addne	r4, r4, #16
   16790:	ldr	r2, [pc, #1736]	; 16e60 <argp_parse@@Base+0xd14>
   16794:	cmp	r3, #0
   16798:	str	r2, [r4]
   1679c:	beq	16d28 <argp_parse@@Base+0xbdc>
   167a0:	ldr	r2, [pc, #1724]	; 16e64 <argp_parse@@Base+0xd18>
   167a4:	add	r3, r4, #32
   167a8:	str	r2, [r4, #16]
   167ac:	mov	r8, #0
   167b0:	sub	r4, fp, #196	; 0xc4
   167b4:	str	r8, [r3]
   167b8:	mov	r1, r8
   167bc:	mov	r0, r4
   167c0:	mov	r2, #36	; 0x24
   167c4:	bl	111e4 <memset@plt>
   167c8:	ands	r3, r6, #4
   167cc:	str	r3, [fp, #-244]	; 0xffffff0c
   167d0:	moveq	r3, #1
   167d4:	movne	r3, r8
   167d8:	mov	r7, r5
   167dc:	str	r8, [fp, #-224]	; 0xffffff20
   167e0:	str	r8, [fp, #-220]	; 0xffffff24
   167e4:	str	r8, [fp, #-216]	; 0xffffff28
   167e8:	str	r3, [fp, #-228]	; 0xffffff1c
   167ec:	b	161e0 <argp_parse@@Base+0x94>
   167f0:	mov	r5, r0
   167f4:	mov	r0, r5
   167f8:	sub	sp, fp, #32
   167fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16800:	ldr	r5, [fp, #-112]	; 0xffffff90
   16804:	mov	r8, r5
   16808:	str	r5, [fp, #-108]	; 0xffffff94
   1680c:	b	16318 <argp_parse@@Base+0x1cc>
   16810:	tst	r3, #1
   16814:	mov	r3, #0
   16818:	str	r3, [fp, #-144]	; 0xffffff70
   1681c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   16820:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16824:	subne	r3, r3, #4
   16828:	addne	r4, r4, #1
   1682c:	strne	r3, [fp, #-88]	; 0xffffffa8
   16830:	strne	r4, [fp, #-92]	; 0xffffffa4
   16834:	b	16388 <argp_parse@@Base+0x23c>
   16838:	ldr	r3, [fp, #-232]	; 0xffffff18
   1683c:	ldr	r0, [r3]
   16840:	bl	16f38 <argp_parse@@Base+0xdec>
   16844:	str	r0, [r4]
   16848:	b	16198 <argp_parse@@Base+0x4c>
   1684c:	cmp	r2, #0
   16850:	beq	163cc <argp_parse@@Base+0x280>
   16854:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16858:	str	r5, [fp, #-148]	; 0xffffff6c
   1685c:	ands	ip, r3, #64	; 0x40
   16860:	mvn	r3, #0
   16864:	str	r3, [fp, #-140]	; 0xffffff74
   16868:	ldr	r2, [fp, #-156]	; 0xffffff64
   1686c:	ldr	r3, [fp, #-152]	; 0xffffff68
   16870:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16874:	beq	16b94 <argp_parse@@Base+0xa48>
   16878:	sub	ip, fp, #148	; 0x94
   1687c:	stm	sp, {r6, ip}
   16880:	bl	170b8 <argp_parse@@Base+0xf6c>
   16884:	ldr	r5, [fp, #-148]	; 0xffffff6c
   16888:	str	r5, [fp, #-84]	; 0xffffffac
   1688c:	mov	r7, r0
   16890:	cmn	r7, #1
   16894:	beq	16bb4 <argp_parse@@Base+0xa68>
   16898:	cmp	r7, #63	; 0x3f
   1689c:	beq	16cb8 <argp_parse@@Base+0xb6c>
   168a0:	cmp	r7, #1
   168a4:	beq	169fc <argp_parse@@Base+0x8b0>
   168a8:	asrs	r8, r7, #24
   168ac:	bne	16958 <argp_parse@@Base+0x80c>
   168b0:	mov	r1, r7
   168b4:	ldr	r0, [fp, #-156]	; 0xffffff64
   168b8:	bl	111b4 <strchr@plt>
   168bc:	cmp	r0, #0
   168c0:	beq	169c8 <argp_parse@@Base+0x87c>
   168c4:	ldr	r4, [fp, #-112]	; 0xffffff90
   168c8:	ldr	r2, [fp, #-108]	; 0xffffff94
   168cc:	cmp	r4, r2
   168d0:	bcc	168e4 <argp_parse@@Base+0x798>
   168d4:	b	169c8 <argp_parse@@Base+0x87c>
   168d8:	add	r4, r4, #36	; 0x24
   168dc:	cmp	r4, r2
   168e0:	bcs	169c8 <argp_parse@@Base+0x87c>
   168e4:	ldr	r3, [r4, #8]
   168e8:	cmp	r0, r3
   168ec:	bcs	168d8 <argp_parse@@Base+0x78c>
   168f0:	ldr	r3, [r4]
   168f4:	cmp	r3, #0
   168f8:	beq	169c8 <argp_parse@@Base+0x87c>
   168fc:	ldr	r2, [r4, #32]
   16900:	ldr	r0, [r4, #28]
   16904:	ldr	ip, [r4, #24]
   16908:	str	r2, [fp, #-60]	; 0xffffffc4
   1690c:	ldr	r2, [r4, #12]
   16910:	ldr	r1, [fp, #-136]	; 0xffffff78
   16914:	str	r0, [fp, #-64]	; 0xffffffc0
   16918:	str	r2, [fp, #-76]	; 0xffffffb4
   1691c:	str	ip, [fp, #-68]	; 0xffffffbc
   16920:	sub	r2, fp, #96	; 0x60
   16924:	mov	r0, r7
   16928:	blx	r3
   1692c:	mov	r8, r6
   16930:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16934:	str	r3, [r4, #32]
   16938:	cmp	r0, #7
   1693c:	beq	169c0 <argp_parse@@Base+0x874>
   16940:	cmp	r0, #0
   16944:	bne	1653c <argp_parse@@Base+0x3f0>
   16948:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1694c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16950:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16954:	b	163b4 <argp_parse@@Base+0x268>
   16958:	add	r3, r8, r8, lsl #3
   1695c:	ldr	r2, [fp, #-112]	; 0xffffff90
   16960:	lsl	r3, r3, #2
   16964:	sub	r3, r3, #36	; 0x24
   16968:	add	r4, r2, r3
   1696c:	ldr	r5, [r2, r3]
   16970:	ands	r3, r7, #8388608	; 0x800000
   16974:	movne	r3, #-16777216	; 0xff000000
   16978:	cmp	r5, #0
   1697c:	beq	16b4c <argp_parse@@Base+0xa00>
   16980:	ldr	r0, [r4, #32]
   16984:	ldr	r2, [r4, #24]
   16988:	str	r0, [fp, #-60]	; 0xffffffc4
   1698c:	ldr	r0, [r4, #28]
   16990:	str	r2, [fp, #-68]	; 0xffffffbc
   16994:	ldr	r2, [r4, #12]
   16998:	str	r0, [fp, #-64]	; 0xffffffc0
   1699c:	bic	r0, r7, #-16777216	; 0xff000000
   169a0:	str	r2, [fp, #-76]	; 0xffffffb4
   169a4:	orr	r0, r0, r3
   169a8:	ldr	r1, [fp, #-136]	; 0xffffff78
   169ac:	sub	r2, fp, #96	; 0x60
   169b0:	blx	r5
   169b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   169b8:	str	r3, [r4, #32]
   169bc:	b	16938 <argp_parse@@Base+0x7ec>
   169c0:	cmp	r8, #0
   169c4:	bne	16b4c <argp_parse@@Base+0xa00>
   169c8:	mov	r2, r7
   169cc:	ldr	r3, [pc, #1172]	; 16e68 <argp_parse@@Base+0xd1c>
   169d0:	ldr	r1, [pc, #1172]	; 16e6c <argp_parse@@Base+0xd20>
   169d4:	sub	r0, fp, #96	; 0x60
   169d8:	bl	15aa8 <argp_error@@Base>
   169dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   169e0:	mov	r2, #260	; 0x104
   169e4:	sub	r0, fp, #96	; 0x60
   169e8:	bl	159f8 <argp_state_help@@Base>
   169ec:	mov	r5, #7
   169f0:	ldr	r3, [fp, #-112]	; 0xffffff90
   169f4:	ldr	ip, [fp, #-108]	; 0xffffff94
   169f8:	b	16548 <argp_parse@@Base+0x3fc>
   169fc:	ldr	r7, [fp, #-136]	; 0xffffff78
   16a00:	ldr	r3, [fp, #-112]	; 0xffffff90
   16a04:	ldr	ip, [fp, #-108]	; 0xffffff94
   16a08:	sub	r8, r5, #1
   16a0c:	cmp	r3, ip
   16a10:	str	r8, [fp, #-84]	; 0xffffffac
   16a14:	bcs	16b40 <argp_parse@@Base+0x9f4>
   16a18:	mov	lr, r8
   16a1c:	add	r4, r3, #36	; 0x24
   16a20:	ldr	r3, [r4, #-36]	; 0xffffffdc
   16a24:	add	r5, lr, #1
   16a28:	cmp	r3, #0
   16a2c:	str	r5, [fp, #-84]	; 0xffffffac
   16a30:	sub	r2, fp, #96	; 0x60
   16a34:	mov	r1, r7
   16a38:	mov	r0, r6
   16a3c:	sub	r5, r4, #36	; 0x24
   16a40:	mov	r9, r4
   16a44:	streq	lr, [fp, #-84]	; 0xffffffac
   16a48:	beq	16b34 <argp_parse@@Base+0x9e8>
   16a4c:	ldr	ip, [r4, #-4]
   16a50:	ldr	lr, [r4, #-24]	; 0xffffffe8
   16a54:	str	ip, [fp, #-60]	; 0xffffffc4
   16a58:	ldr	ip, [r4, #-12]
   16a5c:	str	ip, [fp, #-68]	; 0xffffffbc
   16a60:	ldr	ip, [r4, #-8]
   16a64:	str	lr, [fp, #-76]	; 0xffffffb4
   16a68:	str	ip, [fp, #-64]	; 0xffffffc0
   16a6c:	blx	r3
   16a70:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16a74:	str	r3, [r4, #-4]
   16a78:	cmp	r0, #7
   16a7c:	beq	16ab8 <argp_parse@@Base+0x96c>
   16a80:	cmp	r0, #0
   16a84:	bne	1653c <argp_parse@@Base+0x3f0>
   16a88:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16a8c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16a90:	cmp	r8, r5
   16a94:	sublt	r8, r5, r8
   16a98:	ldrlt	r3, [r4, #-24]	; 0xffffffe8
   16a9c:	movge	r3, #1
   16aa0:	addlt	r8, r3, r8
   16aa4:	strlt	r8, [r4, #-24]	; 0xffffffe8
   16aa8:	ldrlt	r2, [fp, #-100]	; 0xffffff9c
   16aac:	strge	r3, [fp, #-100]	; 0xffffff9c
   16ab0:	movge	r2, r3
   16ab4:	b	163b4 <argp_parse@@Base+0x268>
   16ab8:	ldr	lr, [fp, #-84]	; 0xffffffac
   16abc:	ldr	r3, [r4, #-36]	; 0xffffffdc
   16ac0:	sub	lr, lr, #1
   16ac4:	cmp	r3, #0
   16ac8:	str	lr, [fp, #-84]	; 0xffffffac
   16acc:	beq	16b30 <argp_parse@@Base+0x9e4>
   16ad0:	add	r0, r5, #24
   16ad4:	ldr	r2, [r5, #12]
   16ad8:	ldm	r0, {r0, r1, ip}
   16adc:	str	r2, [fp, #-76]	; 0xffffffb4
   16ae0:	sub	r2, fp, #96	; 0x60
   16ae4:	str	ip, [fp, #-60]	; 0xffffffc4
   16ae8:	str	r0, [fp, #-68]	; 0xffffffbc
   16aec:	str	r1, [fp, #-64]	; 0xffffffc0
   16af0:	mov	r0, sl
   16af4:	mov	r1, r6
   16af8:	blx	r3
   16afc:	ldr	ip, [fp, #-108]	; 0xffffff94
   16b00:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16b04:	cmp	r4, ip
   16b08:	movcs	r1, #0
   16b0c:	movcc	r1, #1
   16b10:	mov	r3, r4
   16b14:	str	r2, [r5, #32]
   16b18:	cmp	r0, #7
   16b1c:	movne	r1, #0
   16b20:	cmp	r1, #0
   16b24:	beq	16e0c <argp_parse@@Base+0xcc0>
   16b28:	ldr	lr, [fp, #-84]	; 0xffffffac
   16b2c:	b	16a1c <argp_parse@@Base+0x8d0>
   16b30:	ldr	ip, [fp, #-108]	; 0xffffff94
   16b34:	cmp	r9, ip
   16b38:	add	r4, r4, #36	; 0x24
   16b3c:	bcc	16a20 <argp_parse@@Base+0x8d4>
   16b40:	ldr	r5, [fp, #-84]	; 0xffffffac
   16b44:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16b48:	b	163d4 <argp_parse@@Base+0x288>
   16b4c:	ldr	r3, [fp, #-152]	; 0xffffff68
   16b50:	ldr	r2, [r3, #12]
   16b54:	cmp	r2, r7
   16b58:	bne	16b70 <argp_parse@@Base+0xa24>
   16b5c:	b	16ca4 <argp_parse@@Base+0xb58>
   16b60:	add	r3, r3, #16
   16b64:	ldr	r2, [r3, #12]
   16b68:	cmp	r2, r7
   16b6c:	beq	16ca4 <argp_parse@@Base+0xb58>
   16b70:	ldr	r2, [r3]
   16b74:	cmp	r2, #0
   16b78:	bne	16b60 <argp_parse@@Base+0xa14>
   16b7c:	ldr	r2, [pc, #748]	; 16e70 <argp_parse@@Base+0xd24>
   16b80:	ldr	r3, [pc, #736]	; 16e68 <argp_parse@@Base+0xd1c>
   16b84:	ldr	r1, [pc, #744]	; 16e74 <argp_parse@@Base+0xd28>
   16b88:	sub	r0, fp, #96	; 0x60
   16b8c:	bl	15aa8 <argp_error@@Base>
   16b90:	b	169dc <argp_parse@@Base+0x890>
   16b94:	sub	lr, fp, #148	; 0x94
   16b98:	stm	sp, {ip, lr}
   16b9c:	bl	17064 <argp_parse@@Base+0xf18>
   16ba0:	ldr	r5, [fp, #-148]	; 0xffffff6c
   16ba4:	str	r5, [fp, #-84]	; 0xffffffac
   16ba8:	mov	r7, r0
   16bac:	cmn	r7, #1
   16bb0:	bne	16898 <argp_parse@@Base+0x74c>
   16bb4:	cmp	r5, #1
   16bb8:	str	r6, [fp, #-100]	; 0xffffff9c
   16bbc:	ble	16bdc <argp_parse@@Base+0xa90>
   16bc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16bc4:	sub	r3, r5, #-1073741823	; 0xc0000001
   16bc8:	ldr	r1, [pc, #680]	; 16e78 <argp_parse@@Base+0xd2c>
   16bcc:	ldr	r0, [r2, r3, lsl #2]
   16bd0:	bl	11004 <strcmp@plt>
   16bd4:	cmp	r0, #0
   16bd8:	streq	r5, [fp, #-72]	; 0xffffffb8
   16bdc:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16be0:	cmp	r5, r0
   16be4:	bge	163d4 <argp_parse@@Base+0x288>
   16be8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16bec:	tst	r3, #4
   16bf0:	beq	16cc8 <argp_parse@@Base+0xb7c>
   16bf4:	ldr	r3, [fp, #4]
   16bf8:	cmp	r3, #0
   16bfc:	beq	16da0 <argp_parse@@Base+0xc54>
   16c00:	str	r5, [r3]
   16c04:	ldr	ip, [fp, #-108]	; 0xffffff94
   16c08:	ldr	r3, [fp, #-112]	; 0xffffff90
   16c0c:	sub	r2, ip, #36	; 0x24
   16c10:	cmp	r3, r2
   16c14:	bhi	16cfc <argp_parse@@Base+0xbb0>
   16c18:	ldr	r6, [pc, #604]	; 16e7c <argp_parse@@Base+0xd30>
   16c1c:	sub	r4, ip, #72	; 0x48
   16c20:	mov	r7, #0
   16c24:	ldr	r5, [r4, #36]	; 0x24
   16c28:	sub	r2, fp, #96	; 0x60
   16c2c:	cmp	r5, #0
   16c30:	mov	r1, r7
   16c34:	mov	r0, r6
   16c38:	beq	16c94 <argp_parse@@Base+0xb48>
   16c3c:	ldr	r3, [r4, #68]	; 0x44
   16c40:	ldr	ip, [r4, #48]	; 0x30
   16c44:	str	r3, [fp, #-60]	; 0xffffffc4
   16c48:	ldr	r3, [r4, #60]	; 0x3c
   16c4c:	str	r3, [fp, #-68]	; 0xffffffbc
   16c50:	ldr	r3, [r4, #64]	; 0x40
   16c54:	str	ip, [fp, #-76]	; 0xffffffb4
   16c58:	str	r3, [fp, #-64]	; 0xffffffc0
   16c5c:	blx	r5
   16c60:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16c64:	str	r3, [r4, #68]	; 0x44
   16c68:	ldr	r3, [fp, #-112]	; 0xffffff90
   16c6c:	cmp	r4, r3
   16c70:	bcc	16cdc <argp_parse@@Base+0xb90>
   16c74:	cmp	r0, #7
   16c78:	cmpne	r0, #0
   16c7c:	sub	r4, r4, #36	; 0x24
   16c80:	beq	16c24 <argp_parse@@Base+0xad8>
   16c84:	ldr	ip, [fp, #-108]	; 0xffffff94
   16c88:	mov	r5, r0
   16c8c:	sub	ip, ip, #36	; 0x24
   16c90:	b	165bc <argp_parse@@Base+0x470>
   16c94:	cmp	r4, r3
   16c98:	bcc	16ce8 <argp_parse@@Base+0xb9c>
   16c9c:	sub	r4, r4, #36	; 0x24
   16ca0:	b	16c24 <argp_parse@@Base+0xad8>
   16ca4:	ldr	r2, [r3]
   16ca8:	ldr	r3, [pc, #448]	; 16e70 <argp_parse@@Base+0xd24>
   16cac:	cmp	r2, #0
   16cb0:	moveq	r2, r3
   16cb4:	b	16b80 <argp_parse@@Base+0xa34>
   16cb8:	ldr	r3, [fp, #-140]	; 0xffffff74
   16cbc:	cmn	r3, #1
   16cc0:	bne	169dc <argp_parse@@Base+0x890>
   16cc4:	b	168b0 <argp_parse@@Base+0x764>
   16cc8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16ccc:	ldr	r7, [r3, r5, lsl #2]
   16cd0:	add	r5, r5, #1
   16cd4:	str	r7, [fp, #-136]	; 0xffffff78
   16cd8:	b	16a00 <argp_parse@@Base+0x8b4>
   16cdc:	cmp	r0, #7
   16ce0:	mov	r5, r0
   16ce4:	bne	16d04 <argp_parse@@Base+0xbb8>
   16ce8:	ldr	ip, [fp, #-108]	; 0xffffff94
   16cec:	sub	ip, ip, #36	; 0x24
   16cf0:	cmp	ip, r3
   16cf4:	movcs	r5, #0
   16cf8:	bcs	165c4 <argp_parse@@Base+0x478>
   16cfc:	mov	r5, #0
   16d00:	b	16630 <argp_parse@@Base+0x4e4>
   16d04:	ldr	ip, [fp, #-108]	; 0xffffff94
   16d08:	sub	ip, ip, #36	; 0x24
   16d0c:	b	165bc <argp_parse@@Base+0x470>
   16d10:	ldr	r0, [r2]
   16d14:	cmp	r0, #0
   16d18:	beq	16394 <argp_parse@@Base+0x248>
   16d1c:	bl	16f38 <argp_parse@@Base+0xdec>
   16d20:	str	r0, [fp, #-56]	; 0xffffffc8
   16d24:	b	163a0 <argp_parse@@Base+0x254>
   16d28:	ldr	r3, [pc, #336]	; 16e80 <argp_parse@@Base+0xd34>
   16d2c:	ldr	r3, [r3]
   16d30:	cmp	r3, #0
   16d34:	addeq	r3, r4, #16
   16d38:	bne	167a0 <argp_parse@@Base+0x654>
   16d3c:	b	167ac <argp_parse@@Base+0x660>
   16d40:	mov	r5, r0
   16d44:	ldr	r2, [fp, #4]
   16d48:	cmp	r2, #0
   16d4c:	bne	16520 <argp_parse@@Base+0x3d4>
   16d50:	cmp	r5, #7
   16d54:	bne	16544 <argp_parse@@Base+0x3f8>
   16d58:	b	169dc <argp_parse@@Base+0x890>
   16d5c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16d60:	sub	ip, ip, #36	; 0x24
   16d64:	cmp	r3, ip
   16d68:	mov	r5, r0
   16d6c:	bls	16d44 <argp_parse@@Base+0xbf8>
   16d70:	ldr	r2, [fp, #4]
   16d74:	cmp	r2, #0
   16d78:	bne	16520 <argp_parse@@Base+0x3d4>
   16d7c:	b	1652c <argp_parse@@Base+0x3e0>
   16d80:	ldr	r3, [fp, #-112]	; 0xffffff90
   16d84:	sub	r4, ip, #36	; 0x24
   16d88:	cmp	r4, r3
   16d8c:	mov	r5, r0
   16d90:	bcs	1648c <argp_parse@@Base+0x340>
   16d94:	cmp	r5, #7
   16d98:	beq	16510 <argp_parse@@Base+0x3c4>
   16d9c:	b	16d70 <argp_parse@@Base+0xc24>
   16da0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16da4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16da8:	tst	r3, #2
   16dac:	bne	169e0 <argp_parse@@Base+0x894>
   16db0:	cmp	r1, #0
   16db4:	beq	169e0 <argp_parse@@Base+0x894>
   16db8:	mov	r0, r1
   16dbc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16dc0:	ldr	r1, [pc, #188]	; 16e84 <argp_parse@@Base+0xd38>
   16dc4:	bl	111c0 <fprintf@plt>
   16dc8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16dcc:	b	169e0 <argp_parse@@Base+0x894>
   16dd0:	mov	r5, r0
   16dd4:	b	16d94 <argp_parse@@Base+0xc48>
   16dd8:	sub	r4, ip, #36	; 0x24
   16ddc:	cmp	r3, r4
   16de0:	bls	16498 <argp_parse@@Base+0x34c>
   16de4:	ldr	r2, [fp, #4]
   16de8:	cmp	r2, #0
   16dec:	bne	1651c <argp_parse@@Base+0x3d0>
   16df0:	b	16c0c <argp_parse@@Base+0xac0>
   16df4:	cmp	r0, #7
   16df8:	mov	r5, r0
   16dfc:	beq	1636c <argp_parse@@Base+0x220>
   16e00:	cmp	r0, #0
   16e04:	beq	1636c <argp_parse@@Base+0x220>
   16e08:	b	16638 <argp_parse@@Base+0x4ec>
   16e0c:	cmp	r0, #0
   16e10:	ldreq	r0, [fp, #-92]	; 0xffffffa4
   16e14:	moveq	r5, r0
   16e18:	streq	r0, [fp, #-84]	; 0xffffffac
   16e1c:	beq	16a90 <argp_parse@@Base+0x944>
   16e20:	cmp	r0, #7
   16e24:	mov	r5, r0
   16e28:	beq	16b40 <argp_parse@@Base+0x9f4>
   16e2c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16e30:	b	16548 <argp_parse@@Base+0x3fc>
   16e34:	muleq	r2, ip, r2
   16e38:	muleq	r2, r8, r2
   16e3c:	andeq	fp, r2, r0, lsr #5
   16e40:	andeq	fp, r2, r4, lsr #5
   16e44:	tsteq	r0, r6
   16e48:	tsteq	r0, r2
   16e4c:	tsteq	r0, r1
   16e50:	tsteq	r0, r5
   16e54:	tsteq	r0, r7
   16e58:	tsteq	r0, r3
   16e5c:	andeq	fp, r2, r4, ror r3
   16e60:	muleq	r1, ip, sp
   16e64:			; <UNDEFINED> instruction: 0x00019db8
   16e68:	ldrdeq	r9, [r1], -r4
   16e6c:	andeq	r9, r1, ip, ror #29
   16e70:	andeq	r9, r1, r4, ror #29
   16e74:	strdeq	r9, [r1], -r4
   16e78:	andeq	r9, r1, r8, ror #29
   16e7c:	tsteq	r0, r4
   16e80:	andeq	fp, r2, ip, asr #5
   16e84:	andeq	r9, r1, r0, lsl #30
   16e88:	cmp	r1, #0
   16e8c:	beq	16ecc <argp_parse@@Base+0xd80>
   16e90:	ldr	r2, [r1, #52]	; 0x34
   16e94:	ldr	r3, [r2, #48]	; 0x30
   16e98:	ldr	r1, [r2, #52]	; 0x34
   16e9c:	cmp	r3, r1
   16ea0:	bcs	16ecc <argp_parse@@Base+0xd80>
   16ea4:	ldr	r2, [r3, #4]
   16ea8:	cmp	r0, r2
   16eac:	bne	16ec0 <argp_parse@@Base+0xd74>
   16eb0:	b	16ed4 <argp_parse@@Base+0xd88>
   16eb4:	ldr	r2, [r3, #4]
   16eb8:	cmp	r2, r0
   16ebc:	beq	16ed4 <argp_parse@@Base+0xd88>
   16ec0:	add	r3, r3, #36	; 0x24
   16ec4:	cmp	r3, r1
   16ec8:	bcc	16eb4 <argp_parse@@Base+0xd68>
   16ecc:	mov	r0, #0
   16ed0:	bx	lr
   16ed4:	ldr	r0, [r3, #24]
   16ed8:	bx	lr
   16edc:	ldr	ip, [pc, #32]	; 16f04 <argp_parse@@Base+0xdb8>
   16ee0:	push	{lr}		; (str lr, [sp, #-4]!)
   16ee4:	sub	sp, sp, #12
   16ee8:	ldm	ip, {r1, ip}
   16eec:	ldr	r3, [pc, #20]	; 16f08 <argp_parse@@Base+0xdbc>
   16ef0:	ldr	r2, [pc, #20]	; 16f0c <argp_parse@@Base+0xdc0>
   16ef4:	str	ip, [sp]
   16ef8:	bl	17448 <argp_parse@@Base+0x12fc>
   16efc:	add	sp, sp, #12
   16f00:	pop	{pc}		; (ldr pc, [sp], #4)
   16f04:	ldrdeq	fp, [r2], -r0
   16f08:	ldrdeq	r9, [r1], -r8
   16f0c:	andeq	r9, r1, r8, ror #31
   16f10:	ldr	r3, [pc, #20]	; 16f2c <argp_parse@@Base+0xde0>
   16f14:	ldr	r2, [pc, #20]	; 16f30 <argp_parse@@Base+0xde4>
   16f18:	ldr	ip, [pc, #20]	; 16f34 <argp_parse@@Base+0xde8>
   16f1c:	str	r0, [r3]
   16f20:	str	ip, [r2]
   16f24:	str	r1, [r3, #4]
   16f28:	bx	lr
   16f2c:	ldrdeq	fp, [r2], -r0
   16f30:	andeq	fp, r2, ip, asr #5
   16f34:	ldrdeq	r6, [r1], -ip
   16f38:	ldrb	r3, [r0]
   16f3c:	cmp	r3, #47	; 0x2f
   16f40:	bne	16f50 <argp_parse@@Base+0xe04>
   16f44:	ldrb	r3, [r0, #1]!
   16f48:	cmp	r3, #47	; 0x2f
   16f4c:	beq	16f44 <argp_parse@@Base+0xdf8>
   16f50:	cmp	r3, #0
   16f54:	bxeq	lr
   16f58:	mov	r2, #0
   16f5c:	push	{lr}		; (str lr, [sp, #-4]!)
   16f60:	mov	ip, r2
   16f64:	mov	r1, r0
   16f68:	mov	lr, #1
   16f6c:	cmp	r3, #47	; 0x2f
   16f70:	moveq	r2, lr
   16f74:	beq	16f84 <argp_parse@@Base+0xe38>
   16f78:	cmp	r2, #0
   16f7c:	movne	r0, r1
   16f80:	movne	r2, ip
   16f84:	ldrb	r3, [r1, #1]!
   16f88:	cmp	r3, #0
   16f8c:	bne	16f6c <argp_parse@@Base+0xe20>
   16f90:	pop	{pc}		; (ldr pc, [sp], #4)
   16f94:	push	{r4, lr}
   16f98:	mov	r4, r0
   16f9c:	bl	111a8 <strlen@plt>
   16fa0:	cmp	r0, #1
   16fa4:	popls	{r4, pc}
   16fa8:	sub	r3, r0, #1
   16fac:	add	r2, r4, r3
   16fb0:	ldrb	r1, [r4, r3]
   16fb4:	cmp	r1, #47	; 0x2f
   16fb8:	popne	{r4, pc}
   16fbc:	cmp	r3, #1
   16fc0:	beq	16fd4 <argp_parse@@Base+0xe88>
   16fc4:	ldrb	r1, [r2, #-1]!
   16fc8:	sub	r0, r3, #1
   16fcc:	cmp	r1, #47	; 0x2f
   16fd0:	beq	16fdc <argp_parse@@Base+0xe90>
   16fd4:	mov	r0, r3
   16fd8:	pop	{r4, pc}
   16fdc:	mov	r3, r0
   16fe0:	b	16fbc <argp_parse@@Base+0xe70>
   16fe4:	push	{r4, r5, lr}
   16fe8:	sub	sp, sp, #12
   16fec:	mov	r5, r0
   16ff0:	bl	111cc <__errno_location@plt>
   16ff4:	mov	r2, #0
   16ff8:	mov	r4, r0
   16ffc:	ldr	r3, [r0]
   17000:	str	r2, [r4]
   17004:	mov	r0, r5
   17008:	str	r3, [sp]
   1700c:	str	r3, [sp, #4]
   17010:	bl	11064 <free@plt>
   17014:	ldr	r3, [r4]
   17018:	add	r2, sp, #8
   1701c:	cmp	r3, #0
   17020:	moveq	r3, #4
   17024:	movne	r3, #0
   17028:	add	r3, r2, r3
   1702c:	ldr	r3, [r3, #-8]
   17030:	str	r3, [r4]
   17034:	add	sp, sp, #12
   17038:	pop	{r4, r5, pc}
   1703c:	push	{lr}		; (str lr, [sp, #-4]!)
   17040:	sub	sp, sp, #20
   17044:	mov	ip, #0
   17048:	ldr	lr, [sp, #24]
   1704c:	str	ip, [sp, #8]
   17050:	str	lr, [sp]
   17054:	str	ip, [sp, #4]
   17058:	bl	18f00 <argp_parse@@Base+0x2db4>
   1705c:	add	sp, sp, #20
   17060:	pop	{pc}		; (ldr pc, [sp], #4)
   17064:	push	{r4, lr}
   17068:	sub	sp, sp, #16
   1706c:	mov	ip, #0
   17070:	ldr	r4, [sp, #24]
   17074:	ldr	lr, [sp, #28]
   17078:	str	r4, [sp]
   1707c:	str	lr, [sp, #8]
   17080:	str	ip, [sp, #12]
   17084:	str	ip, [sp, #4]
   17088:	bl	189a0 <argp_parse@@Base+0x2854>
   1708c:	add	sp, sp, #16
   17090:	pop	{r4, pc}
   17094:	push	{r4, lr}
   17098:	sub	sp, sp, #16
   1709c:	mov	lr, #0
   170a0:	ldr	r4, [sp, #24]
   170a4:	mov	ip, #1
   170a8:	stm	sp, {r4, ip, lr}
   170ac:	bl	18f00 <argp_parse@@Base+0x2db4>
   170b0:	add	sp, sp, #16
   170b4:	pop	{r4, pc}
   170b8:	push	{r4, r5, lr}
   170bc:	sub	sp, sp, #20
   170c0:	mov	lr, #0
   170c4:	ldr	r5, [sp, #32]
   170c8:	ldr	r4, [sp, #36]	; 0x24
   170cc:	mov	ip, #1
   170d0:	str	r5, [sp]
   170d4:	str	r4, [sp, #8]
   170d8:	str	lr, [sp, #12]
   170dc:	str	ip, [sp, #4]
   170e0:	bl	189a0 <argp_parse@@Base+0x2854>
   170e4:	add	sp, sp, #20
   170e8:	pop	{r4, r5, pc}
   170ec:	push	{r4, r5, r6, lr}
   170f0:	subs	r4, r0, #0
   170f4:	beq	17168 <argp_parse@@Base+0x101c>
   170f8:	mov	r1, #47	; 0x2f
   170fc:	bl	11238 <strrchr@plt>
   17100:	subs	r5, r0, #0
   17104:	beq	17154 <argp_parse@@Base+0x1008>
   17108:	add	r6, r5, #1
   1710c:	sub	r3, r6, r4
   17110:	cmp	r3, #6
   17114:	ble	17154 <argp_parse@@Base+0x1008>
   17118:	mov	r2, #7
   1711c:	ldr	r1, [pc, #96]	; 17184 <argp_parse@@Base+0x1038>
   17120:	sub	r0, r5, #6
   17124:	bl	112b0 <strncmp@plt>
   17128:	cmp	r0, #0
   1712c:	bne	17154 <argp_parse@@Base+0x1008>
   17130:	mov	r2, #3
   17134:	ldr	r1, [pc, #76]	; 17188 <argp_parse@@Base+0x103c>
   17138:	mov	r0, r6
   1713c:	bl	112b0 <strncmp@plt>
   17140:	cmp	r0, #0
   17144:	movne	r4, r6
   17148:	ldreq	r3, [pc, #60]	; 1718c <argp_parse@@Base+0x1040>
   1714c:	addeq	r4, r5, #4
   17150:	streq	r4, [r3]
   17154:	ldr	r2, [pc, #52]	; 17190 <argp_parse@@Base+0x1044>
   17158:	ldr	r3, [pc, #52]	; 17194 <argp_parse@@Base+0x1048>
   1715c:	str	r4, [r2]
   17160:	str	r4, [r3]
   17164:	pop	{r4, r5, r6, pc}
   17168:	ldr	r3, [pc, #40]	; 17198 <argp_parse@@Base+0x104c>
   1716c:	mov	r2, #55	; 0x37
   17170:	mov	r1, #1
   17174:	ldr	r3, [r3]
   17178:	ldr	r0, [pc, #28]	; 1719c <argp_parse@@Base+0x1050>
   1717c:	bl	11100 <fwrite@plt>
   17180:	bl	112bc <abort@plt>
   17184:	andeq	sl, r1, r0, lsr r0
   17188:	andeq	sl, r1, r8, lsr r0
   1718c:	muleq	r2, r8, r2
   17190:	ldrdeq	fp, [r2], -r8
   17194:	muleq	r2, ip, r2
   17198:	andeq	fp, r2, r0, lsr #5
   1719c:	strdeq	r9, [r1], -r8
   171a0:	push	{r4, r5, r6, r7, lr}
   171a4:	sub	sp, sp, #36	; 0x24
   171a8:	cmp	r1, #0
   171ac:	mov	r4, r0
   171b0:	ldr	r5, [sp, #56]	; 0x38
   171b4:	ldr	r6, [sp, #60]	; 0x3c
   171b8:	beq	173f8 <argp_parse@@Base+0x12ac>
   171bc:	str	r3, [sp]
   171c0:	mov	r3, r2
   171c4:	mov	r2, r1
   171c8:	ldr	r1, [pc, #564]	; 17404 <argp_parse@@Base+0x12b8>
   171cc:	bl	111c0 <fprintf@plt>
   171d0:	ldr	r3, [pc, #560]	; 17408 <argp_parse@@Base+0x12bc>
   171d4:	ldr	r2, [pc, #560]	; 1740c <argp_parse@@Base+0x12c0>
   171d8:	ldr	r1, [pc, #560]	; 17410 <argp_parse@@Base+0x12c4>
   171dc:	mov	r0, r4
   171e0:	bl	111c0 <fprintf@plt>
   171e4:	mov	r1, r4
   171e8:	mov	r0, #10
   171ec:	bl	11250 <fputc@plt>
   171f0:	ldr	r1, [pc, #540]	; 17414 <argp_parse@@Base+0x12c8>
   171f4:	ldr	r2, [pc, #540]	; 17418 <argp_parse@@Base+0x12cc>
   171f8:	mov	r0, r4
   171fc:	bl	111c0 <fprintf@plt>
   17200:	mov	r1, r4
   17204:	mov	r0, #10
   17208:	bl	11250 <fputc@plt>
   1720c:	cmp	r6, #9
   17210:	ldrls	pc, [pc, r6, lsl #2]
   17214:	b	17240 <argp_parse@@Base+0x10f4>
   17218:	andeq	r7, r1, r0, lsl #5
   1721c:	andeq	r7, r1, ip, asr #5
   17220:	andeq	r7, r1, r4, ror #5
   17224:	strdeq	r7, [r1], -ip
   17228:	andeq	r7, r1, ip, lsl r3
   1722c:	andeq	r7, r1, r4, asr #6
   17230:	andeq	r7, r1, r4, ror #6
   17234:	andeq	r7, r1, ip, lsl #7
   17238:			; <UNDEFINED> instruction: 0x000173bc
   1723c:	andeq	r7, r1, r8, lsl #5
   17240:	ldr	ip, [r5, #32]
   17244:	ldr	r1, [r5, #28]
   17248:	ldm	r5, {r2, r3}
   1724c:	ldr	r7, [r5, #24]
   17250:	ldr	r6, [r5, #20]
   17254:	str	ip, [sp, #24]
   17258:	ldr	lr, [r5, #16]
   1725c:	str	r1, [sp, #20]
   17260:	ldr	r1, [r5, #8]
   17264:	ldr	ip, [r5, #12]
   17268:	mov	r0, r4
   1726c:	str	r7, [sp, #16]
   17270:	stm	sp, {r1, ip, lr}
   17274:	str	r6, [sp, #12]
   17278:	ldr	r1, [pc, #412]	; 1741c <argp_parse@@Base+0x12d0>
   1727c:	bl	111c0 <fprintf@plt>
   17280:	add	sp, sp, #36	; 0x24
   17284:	pop	{r4, r5, r6, r7, pc}
   17288:	ldr	ip, [r5, #32]
   1728c:	ldr	r1, [r5, #28]
   17290:	ldm	r5, {r2, r3}
   17294:	ldr	r7, [r5, #24]
   17298:	ldr	r6, [r5, #20]
   1729c:	str	ip, [sp, #24]
   172a0:	ldr	lr, [r5, #16]
   172a4:	str	r1, [sp, #20]
   172a8:	ldr	r1, [r5, #8]
   172ac:	ldr	ip, [r5, #12]
   172b0:	mov	r0, r4
   172b4:	str	r7, [sp, #16]
   172b8:	stm	sp, {r1, ip, lr}
   172bc:	str	r6, [sp, #12]
   172c0:	ldr	r1, [pc, #344]	; 17420 <argp_parse@@Base+0x12d4>
   172c4:	bl	111c0 <fprintf@plt>
   172c8:	b	17280 <argp_parse@@Base+0x1134>
   172cc:	ldr	r2, [r5]
   172d0:	mov	r0, r4
   172d4:	ldr	r1, [pc, #328]	; 17424 <argp_parse@@Base+0x12d8>
   172d8:	add	sp, sp, #36	; 0x24
   172dc:	pop	{r4, r5, r6, r7, lr}
   172e0:	b	111c0 <fprintf@plt>
   172e4:	mov	r0, r4
   172e8:	ldm	r5, {r2, r3}
   172ec:	ldr	r1, [pc, #308]	; 17428 <argp_parse@@Base+0x12dc>
   172f0:	add	sp, sp, #36	; 0x24
   172f4:	pop	{r4, r5, r6, r7, lr}
   172f8:	b	111c0 <fprintf@plt>
   172fc:	ldr	r1, [r5, #8]
   17300:	ldm	r5, {r2, r3}
   17304:	mov	r0, r4
   17308:	str	r1, [sp, #56]	; 0x38
   1730c:	ldr	r1, [pc, #280]	; 1742c <argp_parse@@Base+0x12e0>
   17310:	add	sp, sp, #36	; 0x24
   17314:	pop	{r4, r5, r6, r7, lr}
   17318:	b	111c0 <fprintf@plt>
   1731c:	ldr	r1, [r5, #8]
   17320:	ldr	ip, [r5, #12]
   17324:	ldm	r5, {r2, r3}
   17328:	mov	r0, r4
   1732c:	str	r1, [sp, #56]	; 0x38
   17330:	str	ip, [sp, #60]	; 0x3c
   17334:	ldr	r1, [pc, #244]	; 17430 <argp_parse@@Base+0x12e4>
   17338:	add	sp, sp, #36	; 0x24
   1733c:	pop	{r4, r5, r6, r7, lr}
   17340:	b	111c0 <fprintf@plt>
   17344:	add	r1, r5, #8
   17348:	ldm	r5, {r2, r3}
   1734c:	ldm	r1, {r1, ip, lr}
   17350:	mov	r0, r4
   17354:	stm	sp, {r1, ip, lr}
   17358:	ldr	r1, [pc, #212]	; 17434 <argp_parse@@Base+0x12e8>
   1735c:	bl	111c0 <fprintf@plt>
   17360:	b	17280 <argp_parse@@Base+0x1134>
   17364:	add	r1, r5, #8
   17368:	ldr	r6, [r5, #20]
   1736c:	ldm	r1, {r1, ip, lr}
   17370:	mov	r0, r4
   17374:	ldm	r5, {r2, r3}
   17378:	str	r6, [sp, #12]
   1737c:	stm	sp, {r1, ip, lr}
   17380:	ldr	r1, [pc, #176]	; 17438 <argp_parse@@Base+0x12ec>
   17384:	bl	111c0 <fprintf@plt>
   17388:	b	17280 <argp_parse@@Base+0x1134>
   1738c:	add	r1, r5, #8
   17390:	ldr	r7, [r5, #24]
   17394:	ldm	r1, {r1, ip, lr}
   17398:	mov	r0, r4
   1739c:	ldr	r6, [r5, #20]
   173a0:	ldm	r5, {r2, r3}
   173a4:	stm	sp, {r1, ip, lr}
   173a8:	str	r7, [sp, #16]
   173ac:	str	r6, [sp, #12]
   173b0:	ldr	r1, [pc, #132]	; 1743c <argp_parse@@Base+0x12f0>
   173b4:	bl	111c0 <fprintf@plt>
   173b8:	b	17280 <argp_parse@@Base+0x1134>
   173bc:	ldr	r1, [r5, #28]
   173c0:	ldm	r5, {r2, r3}
   173c4:	ldr	r7, [r5, #24]
   173c8:	ldr	r6, [r5, #20]
   173cc:	ldr	lr, [r5, #16]
   173d0:	str	r1, [sp, #20]
   173d4:	ldr	r1, [r5, #8]
   173d8:	ldr	ip, [r5, #12]
   173dc:	mov	r0, r4
   173e0:	str	r7, [sp, #16]
   173e4:	stm	sp, {r1, ip, lr}
   173e8:	str	r6, [sp, #12]
   173ec:	ldr	r1, [pc, #76]	; 17440 <argp_parse@@Base+0x12f4>
   173f0:	bl	111c0 <fprintf@plt>
   173f4:	b	17280 <argp_parse@@Base+0x1134>
   173f8:	ldr	r1, [pc, #68]	; 17444 <argp_parse@@Base+0x12f8>
   173fc:	bl	111c0 <fprintf@plt>
   17400:	b	171d0 <argp_parse@@Base+0x1084>
   17404:	andeq	sl, r1, ip, lsr r0
   17408:	andeq	r0, r0, r6, ror #15
   1740c:	andeq	sl, r1, r0, asr r0
   17410:	andeq	sl, r1, r0, asr r3
   17414:	andeq	sl, r1, r8, ror r0
   17418:	andeq	sl, r1, r4, asr r0
   1741c:	andeq	sl, r1, r4, ror #4
   17420:	andeq	sl, r1, r0, lsr r2
   17424:	andeq	sl, r1, r4, lsr #2
   17428:	andeq	sl, r1, r4, lsr r1
   1742c:	andeq	sl, r1, ip, asr #2
   17430:	andeq	sl, r1, r8, ror #2
   17434:	andeq	sl, r1, r8, lsl #3
   17438:	andeq	sl, r1, ip, lsr #3
   1743c:	ldrdeq	sl, [r1], -r4
   17440:	andeq	sl, r1, r0, lsl #4
   17444:	andeq	sl, r1, r8, asr #32
   17448:	push	{r4, r5, lr}
   1744c:	sub	sp, sp, #12
   17450:	ldr	r5, [sp, #24]
   17454:	ldr	ip, [r5]
   17458:	cmp	ip, #0
   1745c:	beq	17478 <argp_parse@@Base+0x132c>
   17460:	mov	lr, r5
   17464:	mov	ip, #0
   17468:	ldr	r4, [lr, #4]!
   1746c:	add	ip, ip, #1
   17470:	cmp	r4, #0
   17474:	bne	17468 <argp_parse@@Base+0x131c>
   17478:	stm	sp, {r5, ip}
   1747c:	bl	171a0 <argp_parse@@Base+0x1054>
   17480:	add	sp, sp, #12
   17484:	pop	{r4, r5, pc}
   17488:	push	{r4, r5, lr}
   1748c:	sub	sp, sp, #52	; 0x34
   17490:	add	r5, sp, #4
   17494:	ldr	r4, [sp, #64]	; 0x40
   17498:	mov	ip, #0
   1749c:	sub	r4, r4, #4
   174a0:	ldr	lr, [r4, #4]!
   174a4:	cmp	lr, #0
   174a8:	str	lr, [r5, #4]!
   174ac:	beq	174bc <argp_parse@@Base+0x1370>
   174b0:	add	ip, ip, #1
   174b4:	cmp	ip, #10
   174b8:	bne	174a0 <argp_parse@@Base+0x1354>
   174bc:	add	lr, sp, #8
   174c0:	str	ip, [sp, #4]
   174c4:	str	lr, [sp]
   174c8:	bl	171a0 <argp_parse@@Base+0x1054>
   174cc:	add	sp, sp, #52	; 0x34
   174d0:	pop	{r4, r5, pc}
   174d4:	push	{r3}		; (str r3, [sp, #-4]!)
   174d8:	push	{r4, lr}
   174dc:	sub	sp, sp, #60	; 0x3c
   174e0:	add	lr, sp, #56	; 0x38
   174e4:	add	r3, sp, #72	; 0x48
   174e8:	str	r3, [lr, #-44]!	; 0xffffffd4
   174ec:	add	r4, sp, #68	; 0x44
   174f0:	mov	r3, #0
   174f4:	ldr	ip, [r4, #4]!
   174f8:	cmp	ip, #0
   174fc:	str	ip, [lr, #4]!
   17500:	beq	17510 <argp_parse@@Base+0x13c4>
   17504:	add	r3, r3, #1
   17508:	cmp	r3, #10
   1750c:	bne	174f4 <argp_parse@@Base+0x13a8>
   17510:	add	ip, sp, #16
   17514:	str	r3, [sp, #4]
   17518:	str	ip, [sp]
   1751c:	ldr	r3, [sp, #68]	; 0x44
   17520:	bl	171a0 <argp_parse@@Base+0x1054>
   17524:	add	sp, sp, #60	; 0x3c
   17528:	pop	{r4, lr}
   1752c:	add	sp, sp, #4
   17530:	bx	lr
   17534:	ldr	r3, [pc, #56]	; 17574 <argp_parse@@Base+0x1428>
   17538:	push	{r4, lr}
   1753c:	mov	r0, #10
   17540:	ldr	r1, [r3]
   17544:	bl	11250 <fputc@plt>
   17548:	ldr	r1, [pc, #40]	; 17578 <argp_parse@@Base+0x142c>
   1754c:	ldr	r0, [pc, #40]	; 1757c <argp_parse@@Base+0x1430>
   17550:	bl	11028 <printf@plt>
   17554:	ldr	r1, [pc, #36]	; 17580 <argp_parse@@Base+0x1434>
   17558:	ldr	r2, [pc, #36]	; 17584 <argp_parse@@Base+0x1438>
   1755c:	ldr	r0, [pc, #36]	; 17588 <argp_parse@@Base+0x143c>
   17560:	bl	11028 <printf@plt>
   17564:	ldr	r1, [pc, #32]	; 1758c <argp_parse@@Base+0x1440>
   17568:	ldr	r0, [pc, #32]	; 17590 <argp_parse@@Base+0x1444>
   1756c:	pop	{r4, lr}
   17570:	b	11028 <printf@plt>
   17574:	andeq	fp, r2, r4, lsr #5
   17578:	andeq	sl, r1, r0, lsr #5
   1757c:			; <UNDEFINED> instruction: 0x0001a2b8
   17580:	andeq	r9, r1, r8, ror #31
   17584:	andeq	sl, r1, ip, asr #5
   17588:	strdeq	sl, [r1], -r4
   1758c:	andeq	sl, r1, r8, lsl #6
   17590:	andeq	sl, r1, r8, lsr #6
   17594:	push	{r4, lr}
   17598:	bl	17b50 <argp_parse@@Base+0x1a04>
   1759c:	cmp	r0, #0
   175a0:	popne	{r4, pc}
   175a4:	bl	17adc <argp_parse@@Base+0x1990>
   175a8:	push	{r4, lr}
   175ac:	bl	17b50 <argp_parse@@Base+0x1a04>
   175b0:	cmp	r0, #0
   175b4:	popne	{r4, pc}
   175b8:	bl	17adc <argp_parse@@Base+0x1990>
   175bc:	push	{r4, lr}
   175c0:	bl	17b50 <argp_parse@@Base+0x1a04>
   175c4:	cmp	r0, #0
   175c8:	popne	{r4, pc}
   175cc:	bl	17adc <argp_parse@@Base+0x1990>
   175d0:	push	{r4, r5, r6, lr}
   175d4:	mov	r5, r0
   175d8:	mov	r4, r1
   175dc:	bl	17b7c <argp_parse@@Base+0x1a30>
   175e0:	cmp	r0, #0
   175e4:	popne	{r4, r5, r6, pc}
   175e8:	adds	r4, r4, #0
   175ec:	movne	r4, #1
   175f0:	cmp	r5, #0
   175f4:	orreq	r4, r4, #1
   175f8:	cmp	r4, #0
   175fc:	popeq	{r4, r5, r6, pc}
   17600:	bl	17adc <argp_parse@@Base+0x1990>
   17604:	push	{r4, lr}
   17608:	cmp	r1, #0
   1760c:	orreq	r1, r1, #1
   17610:	bl	17b7c <argp_parse@@Base+0x1a30>
   17614:	cmp	r0, #0
   17618:	popne	{r4, pc}
   1761c:	bl	17adc <argp_parse@@Base+0x1990>
   17620:	push	{r4, r5, r6, lr}
   17624:	mov	r6, r0
   17628:	mov	r5, r1
   1762c:	mov	r4, r2
   17630:	bl	18f94 <argp_parse@@Base+0x2e48>
   17634:	cmp	r0, #0
   17638:	popne	{r4, r5, r6, pc}
   1763c:	cmp	r6, #0
   17640:	beq	17650 <argp_parse@@Base+0x1504>
   17644:	cmp	r5, #0
   17648:	cmpne	r4, #0
   1764c:	popeq	{r4, r5, r6, pc}
   17650:	bl	17adc <argp_parse@@Base+0x1990>
   17654:	b	17620 <argp_parse@@Base+0x14d4>
   17658:	cmp	r2, #0
   1765c:	cmpne	r1, #0
   17660:	moveq	r2, #1
   17664:	moveq	r1, r2
   17668:	push	{r4, lr}
   1766c:	bl	18f94 <argp_parse@@Base+0x2e48>
   17670:	cmp	r0, #0
   17674:	popne	{r4, pc}
   17678:	bl	17adc <argp_parse@@Base+0x1990>
   1767c:	mov	r2, r1
   17680:	mov	r1, r0
   17684:	mov	r0, #0
   17688:	b	17620 <argp_parse@@Base+0x14d4>
   1768c:	mov	r2, r1
   17690:	mov	r1, r0
   17694:	mov	r0, #0
   17698:	b	17658 <argp_parse@@Base+0x150c>
   1769c:	push	{r4, r5, r6, lr}
   176a0:	subs	r6, r0, #0
   176a4:	sub	sp, sp, #8
   176a8:	mov	r5, r1
   176ac:	ldr	r4, [r1]
   176b0:	beq	176ec <argp_parse@@Base+0x15a0>
   176b4:	lsr	r1, r4, #1
   176b8:	add	r3, r1, #1
   176bc:	mvn	r3, r3
   176c0:	cmp	r4, r3
   176c4:	bhi	176e8 <argp_parse@@Base+0x159c>
   176c8:	add	r4, r4, #1
   176cc:	add	r4, r4, r1
   176d0:	mov	r0, r6
   176d4:	mov	r1, r4
   176d8:	bl	17620 <argp_parse@@Base+0x14d4>
   176dc:	str	r4, [r5]
   176e0:	add	sp, sp, #8
   176e4:	pop	{r4, r5, r6, pc}
   176e8:	bl	17adc <argp_parse@@Base+0x1990>
   176ec:	cmp	r4, #0
   176f0:	bne	176d0 <argp_parse@@Base+0x1584>
   176f4:	mov	r1, r2
   176f8:	mov	r0, #64	; 0x40
   176fc:	str	r2, [sp, #4]
   17700:	bl	18fe0 <argp_parse@@Base+0x2e94>
   17704:	ldr	r2, [sp, #4]
   17708:	cmp	r0, #0
   1770c:	movne	r4, r0
   17710:	addeq	r4, r0, #1
   17714:	b	176d0 <argp_parse@@Base+0x1584>
   17718:	mov	r2, #1
   1771c:	b	1769c <argp_parse@@Base+0x1550>
   17720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17724:	sub	sp, sp, #12
   17728:	ldr	r6, [r1]
   1772c:	mov	sl, r1
   17730:	mov	r9, r0
   17734:	asrs	r4, r6, #1
   17738:	mov	r5, r2
   1773c:	mov	fp, r3
   17740:	ldr	r7, [sp, #48]	; 0x30
   17744:	bmi	178b0 <argp_parse@@Base+0x1764>
   17748:	mvn	r3, #-2147483648	; 0x80000000
   1774c:	sub	r3, r3, r4
   17750:	cmp	r6, r3
   17754:	movle	r3, #0
   17758:	movgt	r3, #1
   1775c:	mvn	r8, fp
   17760:	cmp	r3, #0
   17764:	addeq	r4, r4, r6
   17768:	mvnne	r4, #-2147483648	; 0x80000000
   1776c:	lsr	r8, r8, #31
   17770:	cmp	fp, r4
   17774:	movge	r3, #0
   17778:	andlt	r3, r8, #1
   1777c:	cmp	r3, #0
   17780:	beq	17868 <argp_parse@@Base+0x171c>
   17784:	cmp	r7, #0
   17788:	blt	17938 <argp_parse@@Base+0x17ec>
   1778c:	bne	17930 <argp_parse@@Base+0x17e4>
   17790:	mov	r2, #64	; 0x40
   17794:	mov	r1, r7
   17798:	mov	r0, r2
   1779c:	str	r2, [sp, #4]
   177a0:	bl	191ec <argp_parse@@Base+0x30a0>
   177a4:	ldr	r2, [sp, #4]
   177a8:	mov	r1, r7
   177ac:	mov	r4, r0
   177b0:	mov	r0, r2
   177b4:	bl	1940c <argp_parse@@Base+0x32c0>
   177b8:	ldr	r2, [sp, #4]
   177bc:	sub	r1, r2, r1
   177c0:	cmp	r9, #0
   177c4:	sub	r3, r4, r6
   177c8:	streq	r9, [sl]
   177cc:	cmp	r3, r5
   177d0:	bge	17854 <argp_parse@@Base+0x1708>
   177d4:	cmp	r5, #0
   177d8:	blt	178c4 <argp_parse@@Base+0x1778>
   177dc:	cmp	r6, #0
   177e0:	blt	17800 <argp_parse@@Base+0x16b4>
   177e4:	mvn	r3, #-2147483648	; 0x80000000
   177e8:	sub	r3, r3, r5
   177ec:	cmp	r6, r3
   177f0:	movle	r3, #0
   177f4:	movgt	r3, #1
   177f8:	cmp	r3, #0
   177fc:	bne	179c0 <argp_parse@@Base+0x1874>
   17800:	add	r5, r6, r5
   17804:	cmp	fp, r5
   17808:	movge	r8, #0
   1780c:	andlt	r8, r8, #1
   17810:	cmp	r8, #0
   17814:	mov	r4, r5
   17818:	bne	179c0 <argp_parse@@Base+0x1874>
   1781c:	cmp	r7, #0
   17820:	blt	178d8 <argp_parse@@Base+0x178c>
   17824:	beq	17850 <argp_parse@@Base+0x1704>
   17828:	cmp	r5, #0
   1782c:	blt	17980 <argp_parse@@Base+0x1834>
   17830:	mov	r1, r7
   17834:	mvn	r0, #-2147483648	; 0x80000000
   17838:	bl	191ec <argp_parse@@Base+0x30a0>
   1783c:	cmp	r5, r0
   17840:	movle	r0, #0
   17844:	movgt	r0, #1
   17848:	cmp	r0, #0
   1784c:	bne	179c0 <argp_parse@@Base+0x1874>
   17850:	mul	r1, r5, r7
   17854:	mov	r0, r9
   17858:	bl	175d0 <argp_parse@@Base+0x1484>
   1785c:	str	r4, [sl]
   17860:	add	sp, sp, #12
   17864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17868:	cmp	r7, #0
   1786c:	blt	17904 <argp_parse@@Base+0x17b8>
   17870:	beq	17790 <argp_parse@@Base+0x1644>
   17874:	cmp	r4, #0
   17878:	blt	17940 <argp_parse@@Base+0x17f4>
   1787c:	mov	r1, r7
   17880:	mvn	r0, #-2147483648	; 0x80000000
   17884:	bl	191ec <argp_parse@@Base+0x30a0>
   17888:	cmp	r0, r4
   1788c:	movge	r0, #0
   17890:	movlt	r0, #1
   17894:	cmp	r0, #0
   17898:	mvnne	r2, #-2147483648	; 0x80000000
   1789c:	bne	17794 <argp_parse@@Base+0x1648>
   178a0:	mul	r1, r7, r4
   178a4:	cmp	r1, #63	; 0x3f
   178a8:	bgt	177c0 <argp_parse@@Base+0x1674>
   178ac:	b	17790 <argp_parse@@Base+0x1644>
   178b0:	rsb	r3, r4, #-2147483648	; 0x80000000
   178b4:	cmp	r6, r3
   178b8:	movge	r3, #0
   178bc:	movlt	r3, #1
   178c0:	b	1775c <argp_parse@@Base+0x1610>
   178c4:	rsb	r3, r5, #-2147483648	; 0x80000000
   178c8:	cmp	r6, r3
   178cc:	movge	r3, #0
   178d0:	movlt	r3, #1
   178d4:	b	177f8 <argp_parse@@Base+0x16ac>
   178d8:	cmp	r5, #0
   178dc:	blt	17964 <argp_parse@@Base+0x1818>
   178e0:	cmn	r7, #1
   178e4:	beq	17850 <argp_parse@@Base+0x1704>
   178e8:	mov	r1, r7
   178ec:	mov	r0, #-2147483648	; 0x80000000
   178f0:	bl	191ec <argp_parse@@Base+0x30a0>
   178f4:	cmp	r5, r0
   178f8:	movle	r0, #0
   178fc:	movgt	r0, #1
   17900:	b	17848 <argp_parse@@Base+0x16fc>
   17904:	cmp	r4, #0
   17908:	blt	179a4 <argp_parse@@Base+0x1858>
   1790c:	cmn	r7, #1
   17910:	beq	178a0 <argp_parse@@Base+0x1754>
   17914:	mov	r1, r7
   17918:	mov	r0, #-2147483648	; 0x80000000
   1791c:	bl	191ec <argp_parse@@Base+0x30a0>
   17920:	cmp	r0, r4
   17924:	movge	r0, #0
   17928:	movlt	r0, #1
   1792c:	b	17894 <argp_parse@@Base+0x1748>
   17930:	mov	r4, fp
   17934:	b	1787c <argp_parse@@Base+0x1730>
   17938:	mov	r4, fp
   1793c:	b	1790c <argp_parse@@Base+0x17c0>
   17940:	cmn	r4, #1
   17944:	beq	178a0 <argp_parse@@Base+0x1754>
   17948:	mov	r1, r4
   1794c:	mov	r0, #-2147483648	; 0x80000000
   17950:	bl	191ec <argp_parse@@Base+0x30a0>
   17954:	cmp	r7, r0
   17958:	movle	r0, #0
   1795c:	movgt	r0, #1
   17960:	b	17894 <argp_parse@@Base+0x1748>
   17964:	mov	r1, r7
   17968:	mvn	r0, #-2147483648	; 0x80000000
   1796c:	bl	191ec <argp_parse@@Base+0x30a0>
   17970:	cmp	r5, r0
   17974:	movge	r0, #0
   17978:	movlt	r0, #1
   1797c:	b	17848 <argp_parse@@Base+0x16fc>
   17980:	cmn	r5, #1
   17984:	beq	17850 <argp_parse@@Base+0x1704>
   17988:	mov	r1, r5
   1798c:	mov	r0, #-2147483648	; 0x80000000
   17990:	bl	191ec <argp_parse@@Base+0x30a0>
   17994:	cmp	r7, r0
   17998:	movle	r0, #0
   1799c:	movgt	r0, #1
   179a0:	b	17848 <argp_parse@@Base+0x16fc>
   179a4:	mov	r1, r7
   179a8:	mvn	r0, #-2147483648	; 0x80000000
   179ac:	bl	191ec <argp_parse@@Base+0x30a0>
   179b0:	cmp	r0, r4
   179b4:	movle	r0, #0
   179b8:	movgt	r0, #1
   179bc:	b	17894 <argp_parse@@Base+0x1748>
   179c0:	bl	17adc <argp_parse@@Base+0x1990>
   179c4:	push	{r4, lr}
   179c8:	mov	r1, #1
   179cc:	bl	17b08 <argp_parse@@Base+0x19bc>
   179d0:	cmp	r0, #0
   179d4:	popne	{r4, pc}
   179d8:	bl	17adc <argp_parse@@Base+0x1990>
   179dc:	push	{r4, lr}
   179e0:	mov	r1, #1
   179e4:	bl	17b08 <argp_parse@@Base+0x19bc>
   179e8:	cmp	r0, #0
   179ec:	popne	{r4, pc}
   179f0:	bl	17adc <argp_parse@@Base+0x1990>
   179f4:	push	{r4, lr}
   179f8:	bl	17b08 <argp_parse@@Base+0x19bc>
   179fc:	cmp	r0, #0
   17a00:	popne	{r4, pc}
   17a04:	bl	17adc <argp_parse@@Base+0x1990>
   17a08:	push	{r4, lr}
   17a0c:	bl	17b08 <argp_parse@@Base+0x19bc>
   17a10:	cmp	r0, #0
   17a14:	popne	{r4, pc}
   17a18:	bl	17adc <argp_parse@@Base+0x1990>
   17a1c:	push	{r4, r5, r6, lr}
   17a20:	mov	r6, r0
   17a24:	mov	r0, r1
   17a28:	mov	r4, r1
   17a2c:	bl	17b50 <argp_parse@@Base+0x1a04>
   17a30:	subs	r5, r0, #0
   17a34:	beq	17a4c <argp_parse@@Base+0x1900>
   17a38:	mov	r2, r4
   17a3c:	mov	r1, r6
   17a40:	bl	11088 <memcpy@plt>
   17a44:	mov	r0, r5
   17a48:	pop	{r4, r5, r6, pc}
   17a4c:	bl	17adc <argp_parse@@Base+0x1990>
   17a50:	push	{r4, r5, r6, lr}
   17a54:	mov	r6, r0
   17a58:	mov	r0, r1
   17a5c:	mov	r4, r1
   17a60:	bl	17b50 <argp_parse@@Base+0x1a04>
   17a64:	subs	r5, r0, #0
   17a68:	beq	17a80 <argp_parse@@Base+0x1934>
   17a6c:	mov	r2, r4
   17a70:	mov	r1, r6
   17a74:	bl	11088 <memcpy@plt>
   17a78:	mov	r0, r5
   17a7c:	pop	{r4, r5, r6, pc}
   17a80:	bl	17adc <argp_parse@@Base+0x1990>
   17a84:	push	{r4, r5, r6, lr}
   17a88:	mov	r6, r0
   17a8c:	add	r0, r1, #1
   17a90:	mov	r4, r1
   17a94:	bl	17b50 <argp_parse@@Base+0x1a04>
   17a98:	subs	r5, r0, #0
   17a9c:	beq	17abc <argp_parse@@Base+0x1970>
   17aa0:	mov	r3, #0
   17aa4:	mov	r1, r6
   17aa8:	strb	r3, [r5, r4]
   17aac:	mov	r2, r4
   17ab0:	bl	11088 <memcpy@plt>
   17ab4:	mov	r0, r5
   17ab8:	pop	{r4, r5, r6, pc}
   17abc:	bl	17adc <argp_parse@@Base+0x1990>
   17ac0:	push	{r4, lr}
   17ac4:	mov	r4, r0
   17ac8:	bl	111a8 <strlen@plt>
   17acc:	add	r1, r0, #1
   17ad0:	mov	r0, r4
   17ad4:	pop	{r4, lr}
   17ad8:	b	17a1c <argp_parse@@Base+0x18d0>
   17adc:	ldr	r1, [pc, #24]	; 17afc <argp_parse@@Base+0x19b0>
   17ae0:	push	{r4, lr}
   17ae4:	ldr	r0, [r1]
   17ae8:	ldr	r3, [pc, #16]	; 17b00 <argp_parse@@Base+0x19b4>
   17aec:	ldr	r2, [pc, #16]	; 17b04 <argp_parse@@Base+0x19b8>
   17af0:	mov	r1, #0
   17af4:	bl	11124 <error@plt>
   17af8:	bl	112bc <abort@plt>
   17afc:	andeq	fp, r2, r4, lsl #5
   17b00:	andeq	sl, r1, r0, lsl #7
   17b04:	ldrdeq	r9, [r1], -r8
   17b08:	cmp	r1, #0
   17b0c:	cmpne	r0, #0
   17b10:	moveq	r1, #1
   17b14:	moveq	r0, r1
   17b18:	umull	r2, r3, r0, r1
   17b1c:	adds	r3, r3, #0
   17b20:	movne	r3, #1
   17b24:	cmp	r2, #0
   17b28:	blt	17b38 <argp_parse@@Base+0x19ec>
   17b2c:	cmp	r3, #0
   17b30:	bne	17b38 <argp_parse@@Base+0x19ec>
   17b34:	b	10fe0 <calloc@plt>
   17b38:	push	{r4, lr}
   17b3c:	bl	111cc <__errno_location@plt>
   17b40:	mov	r3, #12
   17b44:	str	r3, [r0]
   17b48:	mov	r0, #0
   17b4c:	pop	{r4, pc}
   17b50:	cmp	r0, #0
   17b54:	moveq	r0, #1
   17b58:	cmp	r0, #0
   17b5c:	blt	17b64 <argp_parse@@Base+0x1a18>
   17b60:	b	1113c <malloc@plt>
   17b64:	push	{r4, lr}
   17b68:	bl	111cc <__errno_location@plt>
   17b6c:	mov	r3, #12
   17b70:	str	r3, [r0]
   17b74:	mov	r0, #0
   17b78:	pop	{r4, pc}
   17b7c:	cmp	r0, #0
   17b80:	beq	17ba4 <argp_parse@@Base+0x1a58>
   17b84:	cmp	r1, #0
   17b88:	push	{lr}		; (str lr, [sp, #-4]!)
   17b8c:	sub	sp, sp, #12
   17b90:	beq	17bac <argp_parse@@Base+0x1a60>
   17b94:	blt	17bc4 <argp_parse@@Base+0x1a78>
   17b98:	add	sp, sp, #12
   17b9c:	pop	{lr}		; (ldr lr, [sp], #4)
   17ba0:	b	110dc <realloc@plt>
   17ba4:	mov	r0, r1
   17ba8:	b	17b50 <argp_parse@@Base+0x1a04>
   17bac:	str	r1, [sp, #4]
   17bb0:	bl	16fe4 <argp_parse@@Base+0xe98>
   17bb4:	ldr	r3, [sp, #4]
   17bb8:	mov	r0, r3
   17bbc:	add	sp, sp, #12
   17bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bc4:	bl	111cc <__errno_location@plt>
   17bc8:	mov	r2, #12
   17bcc:	mov	r3, #0
   17bd0:	str	r2, [r0]
   17bd4:	b	17bb8 <argp_parse@@Base+0x1a6c>
   17bd8:	push	{r4, r5, r6, r7, r8, lr}
   17bdc:	mov	r8, r0
   17be0:	mov	r0, #36	; 0x24
   17be4:	mov	r7, r1
   17be8:	mov	r6, r2
   17bec:	mov	r5, r3
   17bf0:	bl	17b50 <argp_parse@@Base+0x1a04>
   17bf4:	subs	r4, r0, #0
   17bf8:	beq	17c3c <argp_parse@@Base+0x1af0>
   17bfc:	mov	r0, #0
   17c00:	str	r5, [r4, #12]
   17c04:	str	r0, [r4, #20]
   17c08:	str	r0, [r4, #16]
   17c0c:	str	r8, [r4]
   17c10:	str	r7, [r4, #4]
   17c14:	str	r6, [r4, #8]
   17c18:	mov	r0, #200	; 0xc8
   17c1c:	bl	17b50 <argp_parse@@Base+0x1a04>
   17c20:	cmp	r0, #0
   17c24:	addne	r3, r0, #200	; 0xc8
   17c28:	mov	r5, r0
   17c2c:	str	r0, [r4, #24]
   17c30:	strne	r0, [r4, #28]
   17c34:	strne	r3, [r4, #32]
   17c38:	beq	17c44 <argp_parse@@Base+0x1af8>
   17c3c:	mov	r0, r4
   17c40:	pop	{r4, r5, r6, r7, r8, pc}
   17c44:	mov	r0, r4
   17c48:	bl	16fe4 <argp_parse@@Base+0xe98>
   17c4c:	mov	r4, r5
   17c50:	b	17c3c <argp_parse@@Base+0x1af0>
   17c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c58:	mov	r7, r0
   17c5c:	ldr	r6, [r0, #24]
   17c60:	ldr	r3, [r0, #16]
   17c64:	ldr	fp, [r0, #28]
   17c68:	sub	sp, sp, #12
   17c6c:	add	r6, r6, r3
   17c70:	mov	r9, #32
   17c74:	cmp	r6, fp
   17c78:	bcs	17d54 <argp_parse@@Base+0x1c08>
   17c7c:	ldr	r8, [r7, #20]
   17c80:	cmp	r8, #0
   17c84:	bne	17cf4 <argp_parse@@Base+0x1ba8>
   17c88:	ldr	r4, [r7, #4]
   17c8c:	cmp	r4, #0
   17c90:	beq	17f98 <argp_parse@@Base+0x1e4c>
   17c94:	ldr	r2, [r7, #32]
   17c98:	add	r3, fp, r4
   17c9c:	cmp	r2, r3
   17ca0:	bls	17cb4 <argp_parse@@Base+0x1b68>
   17ca4:	b	180e0 <argp_parse@@Base+0x1f94>
   17ca8:	add	r8, r8, #1
   17cac:	cmp	r4, r8
   17cb0:	beq	17ce8 <argp_parse@@Base+0x1b9c>
   17cb4:	ldr	r0, [r7]
   17cb8:	ldr	r3, [r0, #20]
   17cbc:	ldr	r2, [r0, #24]
   17cc0:	add	r1, r3, #1
   17cc4:	cmp	r3, r2
   17cc8:	strcc	r1, [r0, #20]
   17ccc:	strbcc	r9, [r3]
   17cd0:	bcc	17ca8 <argp_parse@@Base+0x1b5c>
   17cd4:	mov	r1, r9
   17cd8:	add	r8, r8, #1
   17cdc:	bl	11214 <__overflow@plt>
   17ce0:	cmp	r4, r8
   17ce4:	bne	17cb4 <argp_parse@@Base+0x1b68>
   17ce8:	ldr	fp, [r7, #28]
   17cec:	mov	r8, r4
   17cf0:	str	r4, [r7, #20]
   17cf4:	sub	sl, fp, r6
   17cf8:	mov	r2, sl
   17cfc:	mov	r1, #10
   17d00:	mov	r0, r6
   17d04:	bl	111fc <memchr@plt>
   17d08:	cmp	r8, #0
   17d0c:	movlt	r8, #0
   17d10:	movlt	r3, r8
   17d14:	str	r6, [sp]
   17d18:	mov	r4, r0
   17d1c:	strlt	r3, [r7, #20]
   17d20:	cmp	r4, #0
   17d24:	beq	17fbc <argp_parse@@Base+0x1e70>
   17d28:	sub	r2, r4, r6
   17d2c:	ldr	r3, [r7, #8]
   17d30:	add	r2, r2, r8
   17d34:	cmp	r2, r3
   17d38:	bge	17d68 <argp_parse@@Base+0x1c1c>
   17d3c:	ldr	fp, [r7, #28]
   17d40:	add	r6, r4, #1
   17d44:	mov	r3, #0
   17d48:	cmp	r6, fp
   17d4c:	str	r3, [r7, #20]
   17d50:	bcc	17c7c <argp_parse@@Base+0x1b30>
   17d54:	ldr	r3, [r7, #24]
   17d58:	sub	r3, fp, r3
   17d5c:	str	r3, [r7, #16]
   17d60:	add	sp, sp, #12
   17d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d68:	ldr	r2, [r7, #12]
   17d6c:	sub	r5, r3, #1
   17d70:	cmp	r2, #0
   17d74:	str	r2, [sp, #4]
   17d78:	blt	18074 <argp_parse@@Base+0x1f28>
   17d7c:	add	r5, r5, #1
   17d80:	sub	r8, r5, r8
   17d84:	adds	r8, r6, r8
   17d88:	bcs	17ff4 <argp_parse@@Base+0x1ea8>
   17d8c:	bl	11184 <__ctype_b_loc@plt>
   17d90:	mov	r3, r8
   17d94:	ldr	r0, [r0]
   17d98:	b	17da4 <argp_parse@@Base+0x1c58>
   17d9c:	cmp	r3, r6
   17da0:	bcc	17ff8 <argp_parse@@Base+0x1eac>
   17da4:	mov	r1, r3
   17da8:	sub	r3, r3, #1
   17dac:	ldrb	r2, [r1]
   17db0:	mov	r5, r3
   17db4:	lsl	r2, r2, #1
   17db8:	ldrh	r2, [r0, r2]
   17dbc:	tst	r2, #1
   17dc0:	beq	17d9c <argp_parse@@Base+0x1c50>
   17dc4:	add	r5, r1, #1
   17dc8:	cmp	r5, r6
   17dcc:	bls	1800c <argp_parse@@Base+0x1ec0>
   17dd0:	cmp	r1, r6
   17dd4:	bcc	18004 <argp_parse@@Base+0x1eb8>
   17dd8:	mov	r1, r3
   17ddc:	sub	r8, r6, #1
   17de0:	b	17dfc <argp_parse@@Base+0x1cb0>
   17de4:	ldrb	r3, [r1]
   17de8:	sub	r1, r1, #1
   17dec:	lsl	r3, r3, #1
   17df0:	ldrh	r3, [r0, r3]
   17df4:	tst	r3, #1
   17df8:	beq	18124 <argp_parse@@Base+0x1fd8>
   17dfc:	cmp	r8, r1
   17e00:	mov	r2, r1
   17e04:	bne	17de4 <argp_parse@@Base+0x1c98>
   17e08:	add	r8, r8, #1
   17e0c:	add	r3, sl, #1
   17e10:	add	r3, r6, r3
   17e14:	cmp	r5, r3
   17e18:	beq	17f00 <argp_parse@@Base+0x1db4>
   17e1c:	add	r3, r8, #1
   17e20:	ldr	r1, [sp, #4]
   17e24:	sub	r2, r5, r3
   17e28:	cmp	r2, r1
   17e2c:	bge	17f1c <argp_parse@@Base+0x1dd0>
   17e30:	cmp	r5, fp
   17e34:	bcs	17f14 <argp_parse@@Base+0x1dc8>
   17e38:	ldr	r3, [r7, #32]
   17e3c:	ldr	r2, [sp, #4]
   17e40:	sub	r3, r3, fp
   17e44:	add	r0, r2, #1
   17e48:	cmp	r3, r0
   17e4c:	bgt	18154 <argp_parse@@Base+0x2008>
   17e50:	ldr	r0, [r7, #24]
   17e54:	cmp	r8, r0
   17e58:	bls	17e6c <argp_parse@@Base+0x1d20>
   17e5c:	sub	r2, r8, r0
   17e60:	ldr	r3, [r7]
   17e64:	mov	r1, #1
   17e68:	bl	11094 <fwrite_unlocked@plt>
   17e6c:	ldr	r0, [r7]
   17e70:	ldr	r2, [r0, #24]
   17e74:	ldr	r3, [r0, #20]
   17e78:	cmp	r3, r2
   17e7c:	addcc	r2, r3, #1
   17e80:	strcc	r2, [r0, #20]
   17e84:	movcc	r2, #10
   17e88:	strbcc	r2, [r3]
   17e8c:	bcs	18194 <argp_parse@@Base+0x2048>
   17e90:	ldr	r6, [r7, #24]
   17e94:	ldr	r3, [sp]
   17e98:	sub	r2, r5, r6
   17e9c:	sub	r3, r3, r6
   17ea0:	add	sl, sl, r3
   17ea4:	mov	fp, r2
   17ea8:	mov	r4, r6
   17eac:	ldr	r3, [r7, #12]
   17eb0:	cmp	r3, r2
   17eb4:	bgt	17f3c <argp_parse@@Base+0x1df0>
   17eb8:	cmp	r3, #0
   17ebc:	movgt	r2, r6
   17ec0:	ble	17edc <argp_parse@@Base+0x1d90>
   17ec4:	strb	r9, [r2], #1
   17ec8:	ldr	r3, [r7, #12]
   17ecc:	sub	r1, r2, r6
   17ed0:	cmp	r3, r1
   17ed4:	bgt	17ec4 <argp_parse@@Base+0x1d78>
   17ed8:	mov	r6, r2
   17edc:	cmp	r6, r5
   17ee0:	bcc	180c4 <argp_parse@@Base+0x1f78>
   17ee4:	sub	fp, sl, fp
   17ee8:	cmp	r3, #0
   17eec:	add	fp, r6, fp
   17ef0:	mvneq	r3, #0
   17ef4:	str	fp, [r7, #28]
   17ef8:	str	r3, [r7, #20]
   17efc:	b	17c74 <argp_parse@@Base+0x1b28>
   17f00:	ldr	r3, [r7, #32]
   17f04:	ldr	r2, [sp, #4]
   17f08:	sub	r3, r3, r8
   17f0c:	cmp	r3, r2
   17f10:	ble	17e30 <argp_parse@@Base+0x1ce4>
   17f14:	add	r3, r8, #1
   17f18:	sub	r2, r5, r3
   17f1c:	sub	fp, r5, r6
   17f20:	mov	r4, r6
   17f24:	mov	r6, r3
   17f28:	mov	r3, #10
   17f2c:	strb	r3, [r8]
   17f30:	ldr	r3, [r7, #12]
   17f34:	cmp	r3, r2
   17f38:	ble	17eb8 <argp_parse@@Base+0x1d6c>
   17f3c:	add	r2, sl, #1
   17f40:	add	r2, r4, r2
   17f44:	cmp	r5, r2
   17f48:	beq	18140 <argp_parse@@Base+0x1ff4>
   17f4c:	cmp	r3, #0
   17f50:	movgt	r8, #0
   17f54:	bgt	17f6c <argp_parse@@Base+0x1e20>
   17f58:	b	17edc <argp_parse@@Base+0x1d90>
   17f5c:	ldr	r3, [r7, #12]
   17f60:	add	r8, r8, #1
   17f64:	cmp	r3, r8
   17f68:	ble	17edc <argp_parse@@Base+0x1d90>
   17f6c:	ldr	r0, [r7]
   17f70:	ldr	r3, [r0, #20]
   17f74:	ldr	r2, [r0, #24]
   17f78:	add	r1, r3, #1
   17f7c:	cmp	r3, r2
   17f80:	strcc	r1, [r0, #20]
   17f84:	strbcc	r9, [r3]
   17f88:	bcc	17f5c <argp_parse@@Base+0x1e10>
   17f8c:	mov	r1, r9
   17f90:	bl	11214 <__overflow@plt>
   17f94:	b	17f5c <argp_parse@@Base+0x1e10>
   17f98:	sub	sl, fp, r6
   17f9c:	mov	r2, sl
   17fa0:	mov	r1, #10
   17fa4:	mov	r0, r6
   17fa8:	bl	111fc <memchr@plt>
   17fac:	str	r6, [sp]
   17fb0:	mov	r4, r0
   17fb4:	cmp	r4, #0
   17fb8:	bne	17d28 <argp_parse@@Base+0x1bdc>
   17fbc:	ldr	r5, [r7, #8]
   17fc0:	add	r3, r8, sl
   17fc4:	cmp	r3, r5
   17fc8:	bcc	181b8 <argp_parse@@Base+0x206c>
   17fcc:	ldr	r2, [r7, #12]
   17fd0:	sub	r5, r5, #1
   17fd4:	cmp	r2, #0
   17fd8:	str	r2, [sp, #4]
   17fdc:	blt	181a4 <argp_parse@@Base+0x2058>
   17fe0:	add	r5, r5, #1
   17fe4:	sub	r8, r5, r8
   17fe8:	adds	r8, r6, r8
   17fec:	mov	r4, fp
   17ff0:	bcc	17d8c <argp_parse@@Base+0x1c40>
   17ff4:	mov	r5, r8
   17ff8:	add	r5, r5, #1
   17ffc:	cmp	r5, r6
   18000:	bls	1800c <argp_parse@@Base+0x1ec0>
   18004:	mov	r8, r5
   18008:	b	17e0c <argp_parse@@Base+0x1cc0>
   1800c:	cmp	r8, r4
   18010:	bcs	18048 <argp_parse@@Base+0x1efc>
   18014:	add	r5, r8, #1
   18018:	b	1803c <argp_parse@@Base+0x1ef0>
   1801c:	bl	11184 <__ctype_b_loc@plt>
   18020:	ldrb	r3, [r5]
   18024:	add	r5, r5, #1
   18028:	lsl	r3, r3, #1
   1802c:	ldr	r2, [r0]
   18030:	ldrh	r3, [r2, r3]
   18034:	tst	r3, #1
   18038:	bne	18058 <argp_parse@@Base+0x1f0c>
   1803c:	cmp	r5, r4
   18040:	mov	r8, r5
   18044:	bne	1801c <argp_parse@@Base+0x1ed0>
   18048:	cmp	r8, r4
   1804c:	beq	1812c <argp_parse@@Base+0x1fe0>
   18050:	bl	11184 <__ctype_b_loc@plt>
   18054:	ldr	r2, [r0]
   18058:	mov	r5, r8
   1805c:	ldrb	r3, [r5, #1]!
   18060:	lsl	r3, r3, #1
   18064:	ldrh	r3, [r2, r3]
   18068:	tst	r3, #1
   1806c:	bne	1805c <argp_parse@@Base+0x1f10>
   18070:	b	17e0c <argp_parse@@Base+0x1cc0>
   18074:	cmp	r4, fp
   18078:	str	r3, [sp]
   1807c:	bcs	181a0 <argp_parse@@Base+0x2054>
   18080:	sub	r0, r5, r8
   18084:	sub	r2, fp, r4
   18088:	add	r0, r6, r0
   1808c:	mov	r1, r4
   18090:	bl	1104c <memmove@plt>
   18094:	ldr	r2, [r7, #20]
   18098:	ldr	fp, [r7, #28]
   1809c:	sub	r5, r5, r2
   180a0:	add	r5, r6, r5
   180a4:	mov	r3, #0
   180a8:	sub	r4, r5, r4
   180ac:	str	r3, [r7, #20]
   180b0:	ldr	r3, [sp]
   180b4:	sub	fp, fp, r4
   180b8:	add	r6, r6, r3
   180bc:	str	fp, [r7, #28]
   180c0:	b	17c74 <argp_parse@@Base+0x1b28>
   180c4:	add	r2, r4, sl
   180c8:	sub	r2, r2, r5
   180cc:	mov	r1, r5
   180d0:	mov	r0, r6
   180d4:	bl	1104c <memmove@plt>
   180d8:	ldr	r3, [r7, #12]
   180dc:	b	17ee4 <argp_parse@@Base+0x1d98>
   180e0:	add	r5, r6, r4
   180e4:	sub	r2, fp, r6
   180e8:	mov	r1, r6
   180ec:	mov	r0, r5
   180f0:	bl	1104c <memmove@plt>
   180f4:	ldr	r3, [r7, #28]
   180f8:	mov	r0, r6
   180fc:	add	r3, r3, r4
   18100:	str	r3, [r7, #28]
   18104:	mov	r2, r4
   18108:	mov	r1, r9
   1810c:	bl	111e4 <memset@plt>
   18110:	mov	r6, r5
   18114:	ldr	fp, [r7, #28]
   18118:	mov	r8, r4
   1811c:	str	r4, [r7, #20]
   18120:	b	17cf4 <argp_parse@@Base+0x1ba8>
   18124:	add	r8, r2, #1
   18128:	b	17e0c <argp_parse@@Base+0x1cc0>
   1812c:	mov	r3, #0
   18130:	str	r3, [r7, #20]
   18134:	add	r6, r8, #1
   18138:	ldr	fp, [r7, #28]
   1813c:	b	17c74 <argp_parse@@Base+0x1b28>
   18140:	ldr	r2, [r7, #32]
   18144:	sub	r2, r2, r5
   18148:	cmp	r3, r2
   1814c:	ble	17eb8 <argp_parse@@Base+0x1d6c>
   18150:	b	17f4c <argp_parse@@Base+0x1e00>
   18154:	sub	fp, fp, r5
   18158:	mov	r2, fp
   1815c:	mov	r1, r5
   18160:	add	r0, r8, r0
   18164:	bl	1104c <memmove@plt>
   18168:	ldr	r2, [r7, #12]
   1816c:	mov	r3, #10
   18170:	add	r5, r2, #1
   18174:	add	r5, r8, r5
   18178:	add	fp, r5, fp
   1817c:	sub	sl, fp, r6
   18180:	mov	r4, r6
   18184:	sub	fp, r5, r6
   18188:	strb	r3, [r8]
   1818c:	add	r6, r8, #1
   18190:	b	17eac <argp_parse@@Base+0x1d60>
   18194:	mov	r1, #10
   18198:	bl	11214 <__overflow@plt>
   1819c:	b	17e90 <argp_parse@@Base+0x1d44>
   181a0:	add	r3, r8, sl
   181a4:	sub	r5, r5, r3
   181a8:	add	fp, fp, r5
   181ac:	str	fp, [r7, #28]
   181b0:	str	r3, [r7, #20]
   181b4:	b	17d54 <argp_parse@@Base+0x1c08>
   181b8:	str	r3, [r7, #20]
   181bc:	ldr	fp, [r7, #28]
   181c0:	b	17d54 <argp_parse@@Base+0x1c08>
   181c4:	push	{r4, lr}
   181c8:	mov	r4, r0
   181cc:	bl	17c54 <argp_parse@@Base+0x1b08>
   181d0:	ldr	r2, [r4, #28]
   181d4:	ldr	r0, [r4, #24]
   181d8:	cmp	r2, r0
   181dc:	bls	181f4 <argp_parse@@Base+0x20a8>
   181e0:	sub	r2, r2, r0
   181e4:	ldr	r3, [r4]
   181e8:	mov	r1, #1
   181ec:	bl	11094 <fwrite_unlocked@plt>
   181f0:	ldr	r0, [r4, #24]
   181f4:	bl	16fe4 <argp_parse@@Base+0xe98>
   181f8:	mov	r0, r4
   181fc:	pop	{r4, lr}
   18200:	b	16fe4 <argp_parse@@Base+0xe98>
   18204:	push	{r4, r5, r6, lr}
   18208:	mov	r4, r0
   1820c:	mov	r5, r1
   18210:	bl	17c54 <argp_parse@@Base+0x1b08>
   18214:	ldr	r3, [r4, #24]
   18218:	ldr	r2, [r4, #28]
   1821c:	mov	r0, r3
   18220:	sub	r2, r2, r3
   18224:	mov	r1, #1
   18228:	ldr	r3, [r4]
   1822c:	bl	11094 <fwrite_unlocked@plt>
   18230:	ldr	r2, [r4, #28]
   18234:	ldr	r3, [r4, #24]
   18238:	sub	r1, r2, r3
   1823c:	cmp	r0, r1
   18240:	bne	18284 <argp_parse@@Base+0x2138>
   18244:	ldr	r1, [r4, #32]
   18248:	mov	r2, #0
   1824c:	sub	r1, r1, r3
   18250:	cmp	r1, r5
   18254:	str	r3, [r4, #28]
   18258:	str	r2, [r4, #16]
   1825c:	movcs	r3, #1
   18260:	bcs	1827c <argp_parse@@Base+0x2130>
   18264:	adds	r5, r1, r5
   18268:	bcc	182b4 <argp_parse@@Base+0x2168>
   1826c:	bl	111cc <__errno_location@plt>
   18270:	mov	r3, #0
   18274:	mov	r2, #12
   18278:	str	r2, [r0]
   1827c:	mov	r0, r3
   18280:	pop	{r4, r5, r6, pc}
   18284:	ldr	r1, [r4, #16]
   18288:	sub	r2, r2, r0
   1828c:	sub	r1, r1, r0
   18290:	str	r2, [r4, #28]
   18294:	str	r1, [r4, #16]
   18298:	sub	r2, r2, r3
   1829c:	add	r1, r3, r0
   182a0:	mov	r0, r3
   182a4:	bl	1104c <memmove@plt>
   182a8:	mov	r3, #0
   182ac:	mov	r0, r3
   182b0:	pop	{r4, r5, r6, pc}
   182b4:	mov	r0, r3
   182b8:	mov	r1, r5
   182bc:	bl	17b7c <argp_parse@@Base+0x1a30>
   182c0:	cmp	r0, #0
   182c4:	beq	1826c <argp_parse@@Base+0x2120>
   182c8:	add	r1, r0, r5
   182cc:	mov	r3, #1
   182d0:	str	r0, [r4, #24]
   182d4:	str	r0, [r4, #28]
   182d8:	str	r1, [r4, #32]
   182dc:	mov	r0, r3
   182e0:	pop	{r4, r5, r6, pc}
   182e4:	ldr	r3, [r0, #32]
   182e8:	ldr	r2, [r0, #28]
   182ec:	sub	r3, r3, r2
   182f0:	cmp	r3, r1
   182f4:	bcc	18300 <argp_parse@@Base+0x21b4>
   182f8:	mov	r0, #1
   182fc:	bx	lr
   18300:	b	18204 <argp_parse@@Base+0x20b8>
   18304:	push	{r1, r2, r3}
   18308:	mov	r1, #150	; 0x96
   1830c:	push	{r4, r5, r6, r7, lr}
   18310:	sub	sp, sp, #8
   18314:	mov	r5, r0
   18318:	ldr	r7, [sp, #28]
   1831c:	add	r6, sp, #32
   18320:	ldr	r3, [r5, #32]
   18324:	ldr	r0, [r5, #28]
   18328:	sub	r2, r3, r0
   1832c:	cmp	r1, r2
   18330:	bhi	18374 <argp_parse@@Base+0x2228>
   18334:	sub	r4, r3, r0
   18338:	mov	r1, r4
   1833c:	mov	r3, r6
   18340:	mov	r2, r7
   18344:	str	r6, [sp, #4]
   18348:	bl	11268 <vsnprintf@plt>
   1834c:	cmp	r4, r0
   18350:	addls	r1, r0, #1
   18354:	bls	18320 <argp_parse@@Base+0x21d4>
   18358:	ldr	r3, [r5, #28]
   1835c:	add	r3, r3, r0
   18360:	str	r3, [r5, #28]
   18364:	add	sp, sp, #8
   18368:	pop	{r4, r5, r6, r7, lr}
   1836c:	add	sp, sp, #12
   18370:	bx	lr
   18374:	mov	r0, r5
   18378:	bl	18204 <argp_parse@@Base+0x20b8>
   1837c:	cmp	r0, #0
   18380:	ldrne	r3, [r5, #32]
   18384:	ldrne	r0, [r5, #28]
   18388:	bne	18334 <argp_parse@@Base+0x21e8>
   1838c:	mvn	r0, #0
   18390:	add	sp, sp, #8
   18394:	pop	{r4, r5, r6, r7, lr}
   18398:	add	sp, sp, #12
   1839c:	bx	lr
   183a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   183a4:	ldr	r4, [r1, #32]
   183a8:	ldr	r8, [r1, #28]
   183ac:	ldr	r7, [r1]
   183b0:	add	r6, r0, r4, lsl #2
   183b4:	mov	r2, r8
   183b8:	mov	r5, r7
   183bc:	cmp	r5, r4
   183c0:	movle	r3, #0
   183c4:	movgt	r3, #1
   183c8:	cmp	r2, r4
   183cc:	movge	r3, #0
   183d0:	cmp	r3, #0
   183d4:	beq	18448 <argp_parse@@Base+0x22fc>
   183d8:	sub	r3, r5, r4
   183dc:	sub	sl, r4, r2
   183e0:	cmp	r3, sl
   183e4:	ble	18418 <argp_parse@@Base+0x22cc>
   183e8:	sub	r5, r5, sl
   183ec:	add	sl, sl, r2
   183f0:	add	ip, r0, r5, lsl #2
   183f4:	add	sl, r0, sl, lsl #2
   183f8:	add	r3, r0, r2, lsl #2
   183fc:	ldr	r9, [ip]
   18400:	ldr	lr, [r3]
   18404:	str	r9, [r3], #4
   18408:	cmp	sl, r3
   1840c:	str	lr, [ip], #4
   18410:	bne	183fc <argp_parse@@Base+0x22b0>
   18414:	b	183bc <argp_parse@@Base+0x2270>
   18418:	add	sl, r3, r2
   1841c:	add	r3, r0, r2, lsl #2
   18420:	add	r9, r0, sl, lsl #2
   18424:	mov	r2, r6
   18428:	ldr	lr, [r2]
   1842c:	ldr	ip, [r3]
   18430:	str	lr, [r3], #4
   18434:	cmp	r3, r9
   18438:	str	ip, [r2], #4
   1843c:	bne	18428 <argp_parse@@Base+0x22dc>
   18440:	mov	r2, sl
   18444:	b	183bc <argp_parse@@Base+0x2270>
   18448:	sub	r4, r7, r4
   1844c:	add	r8, r4, r8
   18450:	str	r8, [r1, #28]
   18454:	str	r7, [r1, #32]
   18458:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1845c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18460:	sub	sp, sp, #44	; 0x2c
   18464:	str	r1, [sp, #20]
   18468:	ldr	r1, [sp, #88]	; 0x58
   1846c:	str	r0, [sp, #24]
   18470:	str	r2, [sp, #28]
   18474:	ldr	r8, [r1, #20]
   18478:	str	r3, [sp, #12]
   1847c:	mov	r7, r8
   18480:	ldrb	r5, [r8]
   18484:	cmp	r5, #61	; 0x3d
   18488:	cmpne	r5, #0
   1848c:	movne	r5, #1
   18490:	moveq	r5, #0
   18494:	beq	184ac <argp_parse@@Base+0x2360>
   18498:	ldrb	r3, [r7, #1]!
   1849c:	cmp	r3, #0
   184a0:	cmpne	r3, #61	; 0x3d
   184a4:	bne	18498 <argp_parse@@Base+0x234c>
   184a8:	sub	r5, r7, r8
   184ac:	ldr	r3, [sp, #12]
   184b0:	ldr	sl, [r3]
   184b4:	cmp	sl, #0
   184b8:	beq	1876c <argp_parse@@Base+0x2620>
   184bc:	mov	fp, r3
   184c0:	mov	r4, sl
   184c4:	mov	r6, #0
   184c8:	mov	r2, r5
   184cc:	mov	r1, r8
   184d0:	mov	r0, r4
   184d4:	bl	112b0 <strncmp@plt>
   184d8:	mov	r9, fp
   184dc:	cmp	r0, #0
   184e0:	mov	r0, r4
   184e4:	bne	184f4 <argp_parse@@Base+0x23a8>
   184e8:	bl	111a8 <strlen@plt>
   184ec:	cmp	r0, r5
   184f0:	beq	18580 <argp_parse@@Base+0x2434>
   184f4:	ldr	r4, [fp, #16]!
   184f8:	add	r6, r6, #1
   184fc:	cmp	r4, #0
   18500:	bne	184c8 <argp_parse@@Base+0x237c>
   18504:	ldr	r3, [sp, #12]
   18508:	ldr	fp, [sp, #88]	; 0x58
   1850c:	mov	r0, sl
   18510:	mov	r1, r8
   18514:	mov	r9, r4
   18518:	mov	sl, r4
   1851c:	mov	r8, r3
   18520:	mvn	r2, #0
   18524:	str	r4, [sp, #36]	; 0x24
   18528:	str	r4, [sp, #16]
   1852c:	str	r2, [sp, #32]
   18530:	mov	r2, r5
   18534:	bl	112b0 <strncmp@plt>
   18538:	cmp	r0, #0
   1853c:	bne	1855c <argp_parse@@Base+0x2410>
   18540:	cmp	r9, #0
   18544:	beq	187dc <argp_parse@@Base+0x2690>
   18548:	ldr	r3, [sp, #84]	; 0x54
   1854c:	cmp	r3, #0
   18550:	beq	18624 <argp_parse@@Base+0x24d8>
   18554:	cmp	r4, #0
   18558:	beq	18658 <argp_parse@@Base+0x250c>
   1855c:	ldr	r0, [r8, #16]!
   18560:	add	sl, sl, #1
   18564:	cmp	r0, #0
   18568:	beq	1868c <argp_parse@@Base+0x2540>
   1856c:	ldr	r1, [fp, #20]
   18570:	b	18530 <argp_parse@@Base+0x23e4>
   18574:	cmp	r9, #0
   18578:	beq	1876c <argp_parse@@Base+0x2620>
   1857c:	ldr	r6, [sp, #32]
   18580:	ldr	r3, [sp, #88]	; 0x58
   18584:	ldr	r0, [sp, #88]	; 0x58
   18588:	mov	r1, #0
   1858c:	ldr	r2, [r3]
   18590:	str	r1, [r0, #20]
   18594:	add	r3, r2, #1
   18598:	str	r3, [r0]
   1859c:	ldrb	r1, [r7]
   185a0:	cmp	r1, #0
   185a4:	bne	185e4 <argp_parse@@Base+0x2498>
   185a8:	ldr	r1, [r9, #4]
   185ac:	cmp	r1, #1
   185b0:	beq	187e8 <argp_parse@@Base+0x269c>
   185b4:	ldr	r3, [sp, #80]	; 0x50
   185b8:	ldr	r2, [r9, #8]
   185bc:	cmp	r3, #0
   185c0:	strne	r6, [r3]
   185c4:	cmp	r2, #0
   185c8:	movne	r3, #0
   185cc:	ldreq	r3, [r9, #12]
   185d0:	ldrne	r1, [r9, #12]
   185d4:	strne	r1, [r2]
   185d8:	mov	r0, r3
   185dc:	add	sp, sp, #44	; 0x2c
   185e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185e4:	ldr	r3, [r9, #4]
   185e8:	cmp	r3, #0
   185ec:	movne	r3, r0
   185f0:	addne	r7, r7, #1
   185f4:	strne	r7, [r3, #12]
   185f8:	bne	185b4 <argp_parse@@Base+0x2468>
   185fc:	ldr	r3, [sp, #92]	; 0x5c
   18600:	cmp	r3, #0
   18604:	bne	18734 <argp_parse@@Base+0x25e8>
   18608:	ldr	r1, [sp, #88]	; 0x58
   1860c:	ldr	r2, [r9, #12]
   18610:	mov	r3, #63	; 0x3f
   18614:	str	r2, [r1, #8]
   18618:	mov	r0, r3
   1861c:	add	sp, sp, #44	; 0x2c
   18620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18624:	ldr	r2, [r9, #4]
   18628:	ldr	r3, [r8, #4]
   1862c:	cmp	r2, r3
   18630:	bne	18554 <argp_parse@@Base+0x2408>
   18634:	ldr	r2, [r9, #8]
   18638:	ldr	r3, [r8, #8]
   1863c:	cmp	r2, r3
   18640:	bne	18554 <argp_parse@@Base+0x2408>
   18644:	ldr	r2, [r9, #12]
   18648:	ldr	r3, [r8, #12]
   1864c:	cmp	r2, r3
   18650:	bne	18554 <argp_parse@@Base+0x2408>
   18654:	b	1855c <argp_parse@@Base+0x2410>
   18658:	ldr	r3, [sp, #92]	; 0x5c
   1865c:	cmp	r3, #0
   18660:	ldr	r3, [sp, #16]
   18664:	beq	18724 <argp_parse@@Base+0x25d8>
   18668:	cmp	r3, #0
   1866c:	beq	18940 <argp_parse@@Base+0x27f4>
   18670:	ldr	r3, [sp, #16]
   18674:	ldr	r0, [r8, #16]!
   18678:	mov	r2, #1
   1867c:	cmp	r0, #0
   18680:	strb	r2, [r3, sl]
   18684:	add	sl, sl, #1
   18688:	bne	1856c <argp_parse@@Base+0x2420>
   1868c:	ldr	r3, [sp, #16]
   18690:	cmp	r3, #0
   18694:	cmpeq	r4, #0
   18698:	beq	18574 <argp_parse@@Base+0x2428>
   1869c:	ldr	r3, [sp, #92]	; 0x5c
   186a0:	cmp	r3, #0
   186a4:	beq	18824 <argp_parse@@Base+0x26d8>
   186a8:	cmp	r4, #0
   186ac:	bne	188ac <argp_parse@@Base+0x2760>
   186b0:	ldr	r5, [pc, #716]	; 18984 <argp_parse@@Base+0x2838>
   186b4:	ldr	r8, [sp, #16]
   186b8:	ldr	r7, [pc, #712]	; 18988 <argp_parse@@Base+0x283c>
   186bc:	ldr	r0, [r5]
   186c0:	bl	1125c <flockfile@plt>
   186c4:	ldr	r3, [sp, #20]
   186c8:	ldr	r0, [r5]
   186cc:	ldr	r1, [pc, #696]	; 1898c <argp_parse@@Base+0x2840>
   186d0:	ldr	r2, [r3]
   186d4:	ldr	r3, [sp, #88]	; 0x58
   186d8:	add	r6, r8, r6
   186dc:	ldr	r3, [r3, #20]
   186e0:	str	r3, [sp]
   186e4:	ldr	r3, [sp, #96]	; 0x60
   186e8:	bl	111c0 <fprintf@plt>
   186ec:	ldr	r9, [sp, #12]
   186f0:	b	18700 <argp_parse@@Base+0x25b4>
   186f4:	cmp	r8, r6
   186f8:	add	r4, r4, #1
   186fc:	beq	18810 <argp_parse@@Base+0x26c4>
   18700:	ldrb	r3, [r8], #1
   18704:	cmp	r3, #0
   18708:	beq	186f4 <argp_parse@@Base+0x25a8>
   1870c:	ldr	r3, [r9, r4, lsl #4]
   18710:	ldr	r2, [sp, #96]	; 0x60
   18714:	mov	r1, r7
   18718:	ldr	r0, [r5]
   1871c:	bl	111c0 <fprintf@plt>
   18720:	b	186f4 <argp_parse@@Base+0x25a8>
   18724:	cmp	r3, #0
   18728:	mov	r4, #1
   1872c:	bne	18670 <argp_parse@@Base+0x2524>
   18730:	b	1855c <argp_parse@@Base+0x2410>
   18734:	ldr	r3, [sp, #20]
   18738:	ldr	r1, [pc, #580]	; 18984 <argp_parse@@Base+0x2838>
   1873c:	ldr	r2, [r3]
   18740:	ldr	r3, [r9]
   18744:	ldr	r0, [r1]
   18748:	str	r3, [sp]
   1874c:	ldr	r1, [pc, #572]	; 18990 <argp_parse@@Base+0x2844>
   18750:	ldr	r3, [sp, #96]	; 0x60
   18754:	bl	111c0 <fprintf@plt>
   18758:	ldr	r1, [sp, #88]	; 0x58
   1875c:	ldr	r2, [r9, #12]
   18760:	mov	r3, #63	; 0x3f
   18764:	str	r2, [r1, #8]
   18768:	b	18618 <argp_parse@@Base+0x24cc>
   1876c:	ldr	r3, [sp, #84]	; 0x54
   18770:	cmp	r3, #0
   18774:	bne	18900 <argp_parse@@Base+0x27b4>
   18778:	ldr	r3, [sp, #92]	; 0x5c
   1877c:	cmp	r3, #0
   18780:	beq	187ac <argp_parse@@Base+0x2660>
   18784:	ldr	r3, [sp, #20]
   18788:	ldr	r1, [pc, #500]	; 18984 <argp_parse@@Base+0x2838>
   1878c:	ldr	r2, [r3]
   18790:	ldr	r3, [sp, #88]	; 0x58
   18794:	ldr	r0, [r1]
   18798:	ldr	r1, [pc, #500]	; 18994 <argp_parse@@Base+0x2848>
   1879c:	ldr	r3, [r3, #20]
   187a0:	str	r3, [sp]
   187a4:	ldr	r3, [sp, #96]	; 0x60
   187a8:	bl	111c0 <fprintf@plt>
   187ac:	ldr	r3, [sp, #88]	; 0x58
   187b0:	ldr	r1, [sp, #88]	; 0x58
   187b4:	mov	r2, #0
   187b8:	ldr	r3, [r3]
   187bc:	str	r2, [r1, #20]
   187c0:	add	r3, r3, #1
   187c4:	str	r3, [r1]
   187c8:	mov	r3, #63	; 0x3f
   187cc:	mov	r0, r3
   187d0:	str	r2, [r1, #8]
   187d4:	add	sp, sp, #44	; 0x2c
   187d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187dc:	str	sl, [sp, #32]
   187e0:	mov	r9, r8
   187e4:	b	1855c <argp_parse@@Base+0x2410>
   187e8:	ldr	r1, [sp, #24]
   187ec:	cmp	r3, r1
   187f0:	bge	1887c <argp_parse@@Base+0x2730>
   187f4:	ldr	r1, [sp, #20]
   187f8:	add	r2, r2, #2
   187fc:	ldr	r3, [r1, r3, lsl #2]
   18800:	ldr	r1, [sp, #88]	; 0x58
   18804:	str	r3, [r1, #12]
   18808:	str	r2, [r1]
   1880c:	b	185b4 <argp_parse@@Base+0x2468>
   18810:	ldr	r1, [r5]
   18814:	mov	r0, #10
   18818:	bl	11250 <fputc@plt>
   1881c:	ldr	r0, [r5]
   18820:	bl	110f4 <funlockfile@plt>
   18824:	ldr	r3, [sp, #36]	; 0x24
   18828:	cmp	r3, #0
   1882c:	beq	18838 <argp_parse@@Base+0x26ec>
   18830:	ldr	r0, [sp, #16]
   18834:	bl	16fe4 <argp_parse@@Base+0xe98>
   18838:	ldr	r3, [sp, #88]	; 0x58
   1883c:	ldr	r4, [r3, #20]
   18840:	mov	r0, r4
   18844:	bl	111a8 <strlen@plt>
   18848:	ldr	r3, [sp, #88]	; 0x58
   1884c:	ldr	r1, [sp, #88]	; 0x58
   18850:	mov	r2, #0
   18854:	ldr	r3, [r3]
   18858:	str	r2, [r1, #8]
   1885c:	add	r3, r3, #1
   18860:	str	r3, [r1]
   18864:	mov	r3, #63	; 0x3f
   18868:	add	r0, r4, r0
   1886c:	str	r0, [r1, #20]
   18870:	mov	r0, r3
   18874:	add	sp, sp, #44	; 0x2c
   18878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1887c:	ldr	r3, [sp, #92]	; 0x5c
   18880:	cmp	r3, #0
   18884:	bne	188d8 <argp_parse@@Base+0x278c>
   18888:	ldr	r2, [sp, #88]	; 0x58
   1888c:	ldr	r3, [r9, #12]
   18890:	str	r3, [r2, #8]
   18894:	ldr	r3, [sp, #28]
   18898:	ldrb	r3, [r3]
   1889c:	cmp	r3, #58	; 0x3a
   188a0:	movne	r3, #63	; 0x3f
   188a4:	moveq	r3, #58	; 0x3a
   188a8:	b	185d8 <argp_parse@@Base+0x248c>
   188ac:	ldr	r3, [sp, #20]
   188b0:	ldr	r1, [pc, #204]	; 18984 <argp_parse@@Base+0x2838>
   188b4:	ldr	r2, [r3]
   188b8:	ldr	r3, [sp, #88]	; 0x58
   188bc:	ldr	r0, [r1]
   188c0:	ldr	r1, [pc, #208]	; 18998 <argp_parse@@Base+0x284c>
   188c4:	ldr	r3, [r3, #20]
   188c8:	str	r3, [sp]
   188cc:	ldr	r3, [sp, #96]	; 0x60
   188d0:	bl	111c0 <fprintf@plt>
   188d4:	b	18824 <argp_parse@@Base+0x26d8>
   188d8:	ldr	r3, [sp, #20]
   188dc:	ldr	r1, [pc, #160]	; 18984 <argp_parse@@Base+0x2838>
   188e0:	ldr	r2, [r3]
   188e4:	ldr	r3, [r9]
   188e8:	ldr	r0, [r1]
   188ec:	str	r3, [sp]
   188f0:	ldr	r1, [pc, #164]	; 1899c <argp_parse@@Base+0x2850>
   188f4:	ldr	r3, [sp, #96]	; 0x60
   188f8:	bl	111c0 <fprintf@plt>
   188fc:	b	18888 <argp_parse@@Base+0x273c>
   18900:	ldr	r3, [sp, #88]	; 0x58
   18904:	ldr	r2, [sp, #20]
   18908:	ldr	r3, [r3]
   1890c:	ldr	r3, [r2, r3, lsl #2]
   18910:	ldrb	r3, [r3, #1]
   18914:	cmp	r3, #45	; 0x2d
   18918:	beq	18778 <argp_parse@@Base+0x262c>
   1891c:	ldr	r3, [sp, #88]	; 0x58
   18920:	ldr	r0, [sp, #28]
   18924:	ldr	r3, [r3, #20]
   18928:	ldrb	r1, [r3]
   1892c:	bl	111b4 <strchr@plt>
   18930:	cmp	r0, #0
   18934:	beq	18778 <argp_parse@@Base+0x262c>
   18938:	mvn	r3, #0
   1893c:	b	185d8 <argp_parse@@Base+0x248c>
   18940:	mov	r0, r6
   18944:	bl	17b50 <argp_parse@@Base+0x1a04>
   18948:	subs	r3, r0, #0
   1894c:	str	r3, [sp, #16]
   18950:	beq	1897c <argp_parse@@Base+0x2830>
   18954:	mov	r2, r6
   18958:	mov	r1, #0
   1895c:	bl	111e4 <memset@plt>
   18960:	mov	r3, #1
   18964:	str	r3, [sp, #36]	; 0x24
   18968:	ldr	r2, [sp, #32]
   1896c:	ldr	r3, [sp, #16]
   18970:	mov	r1, #1
   18974:	strb	r1, [r3, r2]
   18978:	b	18670 <argp_parse@@Base+0x2524>
   1897c:	mov	r4, #1
   18980:	b	1855c <argp_parse@@Base+0x2410>
   18984:	andeq	fp, r2, r0, lsr #5
   18988:	andeq	sl, r1, r4, ror #7
   1898c:			; <UNDEFINED> instruction: 0x0001a3b4
   18990:	andeq	sl, r1, ip, lsl #8
   18994:	andeq	sl, r1, ip, ror #7
   18998:	muleq	r1, r4, r3
   1899c:	andeq	sl, r1, ip, lsr r4
   189a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189a4:	sub	sp, sp, #36	; 0x24
   189a8:	subs	r6, r0, #0
   189ac:	ldr	r4, [sp, #80]	; 0x50
   189b0:	ldr	r8, [r4, #4]
   189b4:	ble	18b90 <argp_parse@@Base+0x2a44>
   189b8:	mov	sl, r3
   189bc:	ldr	r3, [r4]
   189c0:	mov	r7, r2
   189c4:	mov	r2, #0
   189c8:	cmp	r3, r2
   189cc:	mov	r9, r1
   189d0:	str	r2, [r4, #12]
   189d4:	beq	18c18 <argp_parse@@Base+0x2acc>
   189d8:	ldr	r2, [r4, #16]
   189dc:	cmp	r2, #0
   189e0:	bne	18b9c <argp_parse@@Base+0x2a50>
   189e4:	mov	r5, #0
   189e8:	str	r3, [r4, #32]
   189ec:	str	r3, [r4, #28]
   189f0:	str	r5, [r4, #20]
   189f4:	ldrb	r3, [r7]
   189f8:	cmp	r3, #45	; 0x2d
   189fc:	moveq	r3, #2
   18a00:	addeq	r7, r7, #1
   18a04:	streq	r3, [r4, #24]
   18a08:	beq	18a30 <argp_parse@@Base+0x28e4>
   18a0c:	cmp	r3, #43	; 0x2b
   18a10:	streq	r5, [r4, #24]
   18a14:	addeq	r7, r7, #1
   18a18:	beq	18a30 <argp_parse@@Base+0x28e4>
   18a1c:	ldr	r3, [sp, #84]	; 0x54
   18a20:	cmp	r3, #0
   18a24:	beq	18cb8 <argp_parse@@Base+0x2b6c>
   18a28:	mov	r3, #0
   18a2c:	str	r3, [r4, #24]
   18a30:	mov	r3, #1
   18a34:	str	r3, [r4, #16]
   18a38:	ldrb	r3, [r7]
   18a3c:	cmp	r3, #58	; 0x3a
   18a40:	moveq	r8, #0
   18a44:	cmp	r5, #0
   18a48:	beq	18afc <argp_parse@@Base+0x29b0>
   18a4c:	ldrb	r3, [r5]
   18a50:	cmp	r3, #0
   18a54:	beq	18afc <argp_parse@@Base+0x29b0>
   18a58:	add	r3, r5, #1
   18a5c:	str	r3, [r4, #20]
   18a60:	ldrb	fp, [r5]
   18a64:	mov	r0, r7
   18a68:	str	r3, [sp, #28]
   18a6c:	mov	r1, fp
   18a70:	bl	111b4 <strchr@plt>
   18a74:	ldrb	r1, [r5, #1]
   18a78:	ldr	r3, [sp, #28]
   18a7c:	cmp	r1, #0
   18a80:	ldreq	r1, [r4]
   18a84:	addeq	r1, r1, #1
   18a88:	streq	r1, [r4]
   18a8c:	sub	r1, fp, #58	; 0x3a
   18a90:	mov	r2, r0
   18a94:	cmp	r2, #0
   18a98:	cmpne	r1, #1
   18a9c:	mov	r0, fp
   18aa0:	bls	18be8 <argp_parse@@Base+0x2a9c>
   18aa4:	ldrb	r1, [r2]
   18aa8:	cmp	r1, #87	; 0x57
   18aac:	ldrb	r1, [r2, #1]
   18ab0:	beq	18d3c <argp_parse@@Base+0x2bf0>
   18ab4:	cmp	r1, #58	; 0x3a
   18ab8:	bne	18be0 <argp_parse@@Base+0x2a94>
   18abc:	ldrb	r2, [r2, #2]
   18ac0:	cmp	r2, #58	; 0x3a
   18ac4:	ldrb	r2, [r5, #1]
   18ac8:	beq	18dc4 <argp_parse@@Base+0x2c78>
   18acc:	cmp	r2, #0
   18ad0:	bne	18dd0 <argp_parse@@Base+0x2c84>
   18ad4:	ldr	r3, [r4]
   18ad8:	cmp	r6, r3
   18adc:	beq	18e70 <argp_parse@@Base+0x2d24>
   18ae0:	ldr	r2, [r9, r3, lsl #2]
   18ae4:	add	r3, r3, #1
   18ae8:	str	r2, [r4, #12]
   18aec:	str	r3, [r4]
   18af0:	mov	r3, #0
   18af4:	str	r3, [r4, #20]
   18af8:	b	18be0 <argp_parse@@Base+0x2a94>
   18afc:	ldr	fp, [r4]
   18b00:	ldr	r3, [r4, #32]
   18b04:	cmp	r3, fp
   18b08:	ldr	r3, [r4, #28]
   18b0c:	strgt	fp, [r4, #32]
   18b10:	cmp	fp, r3
   18b14:	ldr	r3, [r4, #24]
   18b18:	strlt	fp, [r4, #28]
   18b1c:	cmp	r3, #1
   18b20:	beq	18c28 <argp_parse@@Base+0x2adc>
   18b24:	cmp	r6, fp
   18b28:	beq	18ca0 <argp_parse@@Base+0x2b54>
   18b2c:	ldr	r3, [pc, #944]	; 18ee4 <argp_parse@@Base+0x2d98>
   18b30:	ldr	r5, [r9, fp, lsl #2]
   18b34:	mov	r1, r3
   18b38:	mov	r0, r5
   18b3c:	str	r3, [sp, #28]
   18b40:	bl	11004 <strcmp@plt>
   18b44:	ldr	r3, [sp, #28]
   18b48:	cmp	r0, #0
   18b4c:	bne	18bb8 <argp_parse@@Base+0x2a6c>
   18b50:	ldr	r3, [r4, #28]
   18b54:	ldr	r2, [r4, #32]
   18b58:	add	fp, fp, #1
   18b5c:	cmp	r3, r2
   18b60:	str	fp, [r4]
   18b64:	beq	18d30 <argp_parse@@Base+0x2be4>
   18b68:	cmp	fp, r2
   18b6c:	beq	18b80 <argp_parse@@Base+0x2a34>
   18b70:	mov	r0, r9
   18b74:	mov	r1, r4
   18b78:	bl	183a0 <argp_parse@@Base+0x2254>
   18b7c:	ldr	r3, [r4, #28]
   18b80:	cmp	r3, r6
   18b84:	str	r6, [r4]
   18b88:	str	r6, [r4, #32]
   18b8c:	strne	r3, [r4]
   18b90:	mvn	r0, #0
   18b94:	add	sp, sp, #36	; 0x24
   18b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b9c:	ldrb	r3, [r7]
   18ba0:	ldr	r5, [r4, #20]
   18ba4:	sub	r2, r3, #43	; 0x2b
   18ba8:	tst	r2, #253	; 0xfd
   18bac:	ldrbeq	r3, [r7, #1]
   18bb0:	addeq	r7, r7, #1
   18bb4:	b	18a3c <argp_parse@@Base+0x28f0>
   18bb8:	ldrb	r2, [r5]
   18bbc:	cmp	r2, #45	; 0x2d
   18bc0:	beq	18ce4 <argp_parse@@Base+0x2b98>
   18bc4:	ldr	r3, [r4, #24]
   18bc8:	cmp	r3, #0
   18bcc:	beq	18b90 <argp_parse@@Base+0x2a44>
   18bd0:	mov	r0, #1
   18bd4:	add	fp, fp, #1
   18bd8:	str	fp, [r4]
   18bdc:	str	r5, [r4, #12]
   18be0:	add	sp, sp, #36	; 0x24
   18be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be8:	cmp	r8, #0
   18bec:	beq	18c08 <argp_parse@@Base+0x2abc>
   18bf0:	ldr	r1, [pc, #752]	; 18ee8 <argp_parse@@Base+0x2d9c>
   18bf4:	ldr	r2, [r9]
   18bf8:	mov	r3, fp
   18bfc:	ldr	r0, [r1]
   18c00:	ldr	r1, [pc, #740]	; 18eec <argp_parse@@Base+0x2da0>
   18c04:	bl	111c0 <fprintf@plt>
   18c08:	mov	r0, #63	; 0x3f
   18c0c:	str	fp, [r4, #8]
   18c10:	add	sp, sp, #36	; 0x24
   18c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c18:	mov	r2, #1
   18c1c:	mov	r3, r2
   18c20:	str	r2, [r4]
   18c24:	b	189e4 <argp_parse@@Base+0x2898>
   18c28:	ldr	r2, [r4, #28]
   18c2c:	ldr	r3, [r4, #32]
   18c30:	cmp	r2, r3
   18c34:	beq	18db4 <argp_parse@@Base+0x2c68>
   18c38:	cmp	fp, r3
   18c3c:	beq	18c50 <argp_parse@@Base+0x2b04>
   18c40:	mov	r1, r4
   18c44:	mov	r0, r9
   18c48:	bl	183a0 <argp_parse@@Base+0x2254>
   18c4c:	ldr	r3, [r4]
   18c50:	cmp	r6, r3
   18c54:	movle	fp, r3
   18c58:	ble	18c94 <argp_parse@@Base+0x2b48>
   18c5c:	add	r1, r9, r3, lsl #2
   18c60:	b	18c74 <argp_parse@@Base+0x2b28>
   18c64:	add	r3, r3, #1
   18c68:	cmp	r6, r3
   18c6c:	str	r3, [r4]
   18c70:	beq	18cd8 <argp_parse@@Base+0x2b8c>
   18c74:	ldr	r2, [r1], #4
   18c78:	ldrb	r0, [r2]
   18c7c:	cmp	r0, #45	; 0x2d
   18c80:	bne	18c64 <argp_parse@@Base+0x2b18>
   18c84:	ldrb	r2, [r2, #1]
   18c88:	cmp	r2, #0
   18c8c:	beq	18c64 <argp_parse@@Base+0x2b18>
   18c90:	ldr	fp, [r4]
   18c94:	str	r3, [r4, #32]
   18c98:	cmp	r6, fp
   18c9c:	bne	18b2c <argp_parse@@Base+0x29e0>
   18ca0:	ldr	r3, [r4, #28]
   18ca4:	ldr	r6, [r4, #32]
   18ca8:	mvn	r0, #0
   18cac:	cmp	r3, r6
   18cb0:	strne	r3, [r4]
   18cb4:	b	18b94 <argp_parse@@Base+0x2a48>
   18cb8:	ldr	r0, [pc, #560]	; 18ef0 <argp_parse@@Base+0x2da4>
   18cbc:	bl	11130 <getenv@plt>
   18cc0:	ldr	r5, [r4, #20]
   18cc4:	cmp	r0, #0
   18cc8:	bne	18a28 <argp_parse@@Base+0x28dc>
   18ccc:	mov	r3, #1
   18cd0:	str	r3, [r4, #24]
   18cd4:	b	18a30 <argp_parse@@Base+0x28e4>
   18cd8:	mov	fp, r6
   18cdc:	str	r3, [r4, #32]
   18ce0:	b	18c98 <argp_parse@@Base+0x2b4c>
   18ce4:	ldrb	r1, [r5, #1]
   18ce8:	cmp	r1, #0
   18cec:	beq	18bc4 <argp_parse@@Base+0x2a78>
   18cf0:	cmp	sl, #0
   18cf4:	beq	18d28 <argp_parse@@Base+0x2bdc>
   18cf8:	cmp	r1, #45	; 0x2d
   18cfc:	beq	18e34 <argp_parse@@Base+0x2ce8>
   18d00:	ldr	r3, [sp, #76]	; 0x4c
   18d04:	cmp	r3, #0
   18d08:	beq	18d28 <argp_parse@@Base+0x2bdc>
   18d0c:	ldrb	r3, [r5, #2]
   18d10:	cmp	r3, #0
   18d14:	bne	18de4 <argp_parse@@Base+0x2c98>
   18d18:	mov	r0, r7
   18d1c:	bl	111b4 <strchr@plt>
   18d20:	cmp	r0, #0
   18d24:	beq	18de4 <argp_parse@@Base+0x2c98>
   18d28:	add	r5, r5, #1
   18d2c:	b	18a58 <argp_parse@@Base+0x290c>
   18d30:	mov	r3, fp
   18d34:	str	fp, [r4, #28]
   18d38:	b	18b80 <argp_parse@@Base+0x2a34>
   18d3c:	cmp	sl, #0
   18d40:	sub	ip, r1, #59	; 0x3b
   18d44:	clz	ip, ip
   18d48:	lsr	ip, ip, #5
   18d4c:	moveq	ip, #0
   18d50:	cmp	ip, #0
   18d54:	beq	18ab4 <argp_parse@@Base+0x2968>
   18d58:	ldrb	r2, [r5, #1]
   18d5c:	cmp	r2, #0
   18d60:	bne	18d74 <argp_parse@@Base+0x2c28>
   18d64:	ldr	r3, [r4]
   18d68:	cmp	r6, r3
   18d6c:	ldrne	r3, [r9, r3, lsl #2]
   18d70:	beq	18e90 <argp_parse@@Base+0x2d44>
   18d74:	str	r3, [r4, #20]
   18d78:	ldr	lr, [pc, #372]	; 18ef4 <argp_parse@@Base+0x2da8>
   18d7c:	ldr	r3, [sp, #72]	; 0x48
   18d80:	mov	ip, #0
   18d84:	str	r3, [sp]
   18d88:	str	r8, [sp, #12]
   18d8c:	str	r4, [sp, #8]
   18d90:	str	lr, [sp, #16]
   18d94:	mov	r3, sl
   18d98:	str	ip, [r4, #12]
   18d9c:	mov	r2, r7
   18da0:	mov	r1, r9
   18da4:	mov	r0, r6
   18da8:	str	ip, [sp, #4]
   18dac:	bl	1845c <argp_parse@@Base+0x2310>
   18db0:	b	18be0 <argp_parse@@Base+0x2a94>
   18db4:	cmp	fp, r3
   18db8:	movne	r3, fp
   18dbc:	strne	fp, [r4, #28]
   18dc0:	b	18c50 <argp_parse@@Base+0x2b04>
   18dc4:	cmp	r2, #0
   18dc8:	streq	r2, [r4, #12]
   18dcc:	beq	18af0 <argp_parse@@Base+0x29a4>
   18dd0:	ldr	r2, [r4]
   18dd4:	str	r3, [r4, #12]
   18dd8:	add	r3, r2, #1
   18ddc:	str	r3, [r4]
   18de0:	b	18af0 <argp_parse@@Base+0x29a4>
   18de4:	ldr	r2, [sp, #76]	; 0x4c
   18de8:	add	r5, r5, #1
   18dec:	str	r5, [r4, #20]
   18df0:	ldr	r3, [pc, #256]	; 18ef8 <argp_parse@@Base+0x2dac>
   18df4:	str	r2, [sp, #4]
   18df8:	ldr	r2, [sp, #72]	; 0x48
   18dfc:	str	r3, [sp, #16]
   18e00:	str	r2, [sp]
   18e04:	str	r8, [sp, #12]
   18e08:	str	r4, [sp, #8]
   18e0c:	mov	r3, sl
   18e10:	mov	r2, r7
   18e14:	mov	r1, r9
   18e18:	mov	r0, r6
   18e1c:	bl	1845c <argp_parse@@Base+0x2310>
   18e20:	cmn	r0, #1
   18e24:	bne	18be0 <argp_parse@@Base+0x2a94>
   18e28:	ldr	r3, [r4]
   18e2c:	ldr	r5, [r9, r3, lsl #2]
   18e30:	b	18d28 <argp_parse@@Base+0x2bdc>
   18e34:	add	r5, r5, #2
   18e38:	str	r5, [r4, #20]
   18e3c:	str	r3, [sp, #16]
   18e40:	ldr	r3, [sp, #76]	; 0x4c
   18e44:	str	r8, [sp, #12]
   18e48:	str	r3, [sp, #4]
   18e4c:	ldr	r3, [sp, #72]	; 0x48
   18e50:	str	r4, [sp, #8]
   18e54:	str	r3, [sp]
   18e58:	mov	r2, r7
   18e5c:	mov	r3, sl
   18e60:	mov	r1, r9
   18e64:	mov	r0, r6
   18e68:	bl	1845c <argp_parse@@Base+0x2310>
   18e6c:	b	18be0 <argp_parse@@Base+0x2a94>
   18e70:	cmp	r8, #0
   18e74:	bne	18ec8 <argp_parse@@Base+0x2d7c>
   18e78:	str	fp, [r4, #8]
   18e7c:	ldrb	r0, [r7]
   18e80:	cmp	r0, #58	; 0x3a
   18e84:	movne	r0, #63	; 0x3f
   18e88:	moveq	r0, #58	; 0x3a
   18e8c:	b	18af0 <argp_parse@@Base+0x29a4>
   18e90:	cmp	r8, #0
   18e94:	beq	18eb0 <argp_parse@@Base+0x2d64>
   18e98:	ldr	r1, [pc, #72]	; 18ee8 <argp_parse@@Base+0x2d9c>
   18e9c:	ldr	r2, [r9]
   18ea0:	mov	r3, fp
   18ea4:	ldr	r0, [r1]
   18ea8:	ldr	r1, [pc, #76]	; 18efc <argp_parse@@Base+0x2db0>
   18eac:	bl	111c0 <fprintf@plt>
   18eb0:	str	fp, [r4, #8]
   18eb4:	ldrb	r0, [r7]
   18eb8:	cmp	r0, #58	; 0x3a
   18ebc:	movne	r0, #63	; 0x3f
   18ec0:	moveq	r0, #58	; 0x3a
   18ec4:	b	18be0 <argp_parse@@Base+0x2a94>
   18ec8:	ldr	r1, [pc, #24]	; 18ee8 <argp_parse@@Base+0x2d9c>
   18ecc:	ldr	r2, [r9]
   18ed0:	mov	r3, fp
   18ed4:	ldr	r0, [r1]
   18ed8:	ldr	r1, [pc, #28]	; 18efc <argp_parse@@Base+0x2db0>
   18edc:	bl	111c0 <fprintf@plt>
   18ee0:	b	18e78 <argp_parse@@Base+0x2d2c>
   18ee4:	andeq	r9, r1, r8, ror #29
   18ee8:	andeq	fp, r2, r0, lsr #5
   18eec:	andeq	sl, r1, r8, ror r4
   18ef0:	andeq	sl, r1, r4, ror #8
   18ef4:	andeq	sl, r1, r0, asr #9
   18ef8:	andeq	sl, r1, r4, ror r4
   18efc:	muleq	r1, r4, r4
   18f00:	push	{r4, r5, r6, lr}
   18f04:	sub	sp, sp, #16
   18f08:	ldr	r5, [pc, #84]	; 18f64 <argp_parse@@Base+0x2e18>
   18f0c:	ldr	ip, [sp, #32]
   18f10:	ldr	r4, [pc, #80]	; 18f68 <argp_parse@@Base+0x2e1c>
   18f14:	str	ip, [sp]
   18f18:	ldr	ip, [sp, #40]	; 0x28
   18f1c:	ldr	r6, [sp, #36]	; 0x24
   18f20:	ldr	lr, [r5]
   18f24:	str	ip, [sp, #12]
   18f28:	ldr	ip, [r5, #4]
   18f2c:	str	r4, [sp, #8]
   18f30:	str	r6, [sp, #4]
   18f34:	str	ip, [r4, #4]
   18f38:	str	lr, [r4]
   18f3c:	bl	189a0 <argp_parse@@Base+0x2854>
   18f40:	ldr	r3, [pc, #36]	; 18f6c <argp_parse@@Base+0x2e20>
   18f44:	ldr	ip, [r4]
   18f48:	ldr	r1, [r4, #8]
   18f4c:	ldr	r2, [r4, #12]
   18f50:	str	ip, [r5]
   18f54:	str	r1, [r5, #8]
   18f58:	str	r2, [r3]
   18f5c:	add	sp, sp, #16
   18f60:	pop	{r4, r5, r6, pc}
   18f64:	andeq	fp, r2, r8, lsl #5
   18f68:	ldrdeq	fp, [r2], -ip
   18f6c:	andeq	fp, r2, r8, ror r3
   18f70:	push	{lr}		; (str lr, [sp, #-4]!)
   18f74:	mov	r3, #0
   18f78:	sub	sp, sp, #20
   18f7c:	mov	ip, #1
   18f80:	str	r3, [sp]
   18f84:	stmib	sp, {r3, ip}
   18f88:	bl	18f00 <argp_parse@@Base+0x2db4>
   18f8c:	add	sp, sp, #20
   18f90:	pop	{pc}		; (ldr pc, [sp], #4)
   18f94:	push	{r4, r5, r6, lr}
   18f98:	subs	r4, r2, #0
   18f9c:	mov	r6, r0
   18fa0:	mov	r5, r1
   18fa4:	beq	18fd0 <argp_parse@@Base+0x2e84>
   18fa8:	mov	r1, r4
   18fac:	mvn	r0, #0
   18fb0:	bl	18fe0 <argp_parse@@Base+0x2e94>
   18fb4:	cmp	r0, r5
   18fb8:	bcs	18fd0 <argp_parse@@Base+0x2e84>
   18fbc:	bl	111cc <__errno_location@plt>
   18fc0:	mov	r3, #12
   18fc4:	str	r3, [r0]
   18fc8:	mov	r0, #0
   18fcc:	pop	{r4, r5, r6, pc}
   18fd0:	mul	r1, r5, r4
   18fd4:	mov	r0, r6
   18fd8:	pop	{r4, r5, r6, lr}
   18fdc:	b	17b7c <argp_parse@@Base+0x1a30>
   18fe0:	subs	r2, r1, #1
   18fe4:	bxeq	lr
   18fe8:	bcc	191c0 <argp_parse@@Base+0x3074>
   18fec:	cmp	r0, r1
   18ff0:	bls	191a4 <argp_parse@@Base+0x3058>
   18ff4:	tst	r1, r2
   18ff8:	beq	191b0 <argp_parse@@Base+0x3064>
   18ffc:	clz	r3, r0
   19000:	clz	r2, r1
   19004:	sub	r3, r2, r3
   19008:	rsbs	r3, r3, #31
   1900c:	addne	r3, r3, r3, lsl #1
   19010:	mov	r2, #0
   19014:	addne	pc, pc, r3, lsl #2
   19018:	nop			; (mov r0, r0)
   1901c:	cmp	r0, r1, lsl #31
   19020:	adc	r2, r2, r2
   19024:	subcs	r0, r0, r1, lsl #31
   19028:	cmp	r0, r1, lsl #30
   1902c:	adc	r2, r2, r2
   19030:	subcs	r0, r0, r1, lsl #30
   19034:	cmp	r0, r1, lsl #29
   19038:	adc	r2, r2, r2
   1903c:	subcs	r0, r0, r1, lsl #29
   19040:	cmp	r0, r1, lsl #28
   19044:	adc	r2, r2, r2
   19048:	subcs	r0, r0, r1, lsl #28
   1904c:	cmp	r0, r1, lsl #27
   19050:	adc	r2, r2, r2
   19054:	subcs	r0, r0, r1, lsl #27
   19058:	cmp	r0, r1, lsl #26
   1905c:	adc	r2, r2, r2
   19060:	subcs	r0, r0, r1, lsl #26
   19064:	cmp	r0, r1, lsl #25
   19068:	adc	r2, r2, r2
   1906c:	subcs	r0, r0, r1, lsl #25
   19070:	cmp	r0, r1, lsl #24
   19074:	adc	r2, r2, r2
   19078:	subcs	r0, r0, r1, lsl #24
   1907c:	cmp	r0, r1, lsl #23
   19080:	adc	r2, r2, r2
   19084:	subcs	r0, r0, r1, lsl #23
   19088:	cmp	r0, r1, lsl #22
   1908c:	adc	r2, r2, r2
   19090:	subcs	r0, r0, r1, lsl #22
   19094:	cmp	r0, r1, lsl #21
   19098:	adc	r2, r2, r2
   1909c:	subcs	r0, r0, r1, lsl #21
   190a0:	cmp	r0, r1, lsl #20
   190a4:	adc	r2, r2, r2
   190a8:	subcs	r0, r0, r1, lsl #20
   190ac:	cmp	r0, r1, lsl #19
   190b0:	adc	r2, r2, r2
   190b4:	subcs	r0, r0, r1, lsl #19
   190b8:	cmp	r0, r1, lsl #18
   190bc:	adc	r2, r2, r2
   190c0:	subcs	r0, r0, r1, lsl #18
   190c4:	cmp	r0, r1, lsl #17
   190c8:	adc	r2, r2, r2
   190cc:	subcs	r0, r0, r1, lsl #17
   190d0:	cmp	r0, r1, lsl #16
   190d4:	adc	r2, r2, r2
   190d8:	subcs	r0, r0, r1, lsl #16
   190dc:	cmp	r0, r1, lsl #15
   190e0:	adc	r2, r2, r2
   190e4:	subcs	r0, r0, r1, lsl #15
   190e8:	cmp	r0, r1, lsl #14
   190ec:	adc	r2, r2, r2
   190f0:	subcs	r0, r0, r1, lsl #14
   190f4:	cmp	r0, r1, lsl #13
   190f8:	adc	r2, r2, r2
   190fc:	subcs	r0, r0, r1, lsl #13
   19100:	cmp	r0, r1, lsl #12
   19104:	adc	r2, r2, r2
   19108:	subcs	r0, r0, r1, lsl #12
   1910c:	cmp	r0, r1, lsl #11
   19110:	adc	r2, r2, r2
   19114:	subcs	r0, r0, r1, lsl #11
   19118:	cmp	r0, r1, lsl #10
   1911c:	adc	r2, r2, r2
   19120:	subcs	r0, r0, r1, lsl #10
   19124:	cmp	r0, r1, lsl #9
   19128:	adc	r2, r2, r2
   1912c:	subcs	r0, r0, r1, lsl #9
   19130:	cmp	r0, r1, lsl #8
   19134:	adc	r2, r2, r2
   19138:	subcs	r0, r0, r1, lsl #8
   1913c:	cmp	r0, r1, lsl #7
   19140:	adc	r2, r2, r2
   19144:	subcs	r0, r0, r1, lsl #7
   19148:	cmp	r0, r1, lsl #6
   1914c:	adc	r2, r2, r2
   19150:	subcs	r0, r0, r1, lsl #6
   19154:	cmp	r0, r1, lsl #5
   19158:	adc	r2, r2, r2
   1915c:	subcs	r0, r0, r1, lsl #5
   19160:	cmp	r0, r1, lsl #4
   19164:	adc	r2, r2, r2
   19168:	subcs	r0, r0, r1, lsl #4
   1916c:	cmp	r0, r1, lsl #3
   19170:	adc	r2, r2, r2
   19174:	subcs	r0, r0, r1, lsl #3
   19178:	cmp	r0, r1, lsl #2
   1917c:	adc	r2, r2, r2
   19180:	subcs	r0, r0, r1, lsl #2
   19184:	cmp	r0, r1, lsl #1
   19188:	adc	r2, r2, r2
   1918c:	subcs	r0, r0, r1, lsl #1
   19190:	cmp	r0, r1
   19194:	adc	r2, r2, r2
   19198:	subcs	r0, r0, r1
   1919c:	mov	r0, r2
   191a0:	bx	lr
   191a4:	moveq	r0, #1
   191a8:	movne	r0, #0
   191ac:	bx	lr
   191b0:	clz	r2, r1
   191b4:	rsb	r2, r2, #31
   191b8:	lsr	r0, r0, r2
   191bc:	bx	lr
   191c0:	cmp	r0, #0
   191c4:	mvnne	r0, #0
   191c8:	b	1942c <argp_parse@@Base+0x32e0>
   191cc:	cmp	r1, #0
   191d0:	beq	191c0 <argp_parse@@Base+0x3074>
   191d4:	push	{r0, r1, lr}
   191d8:	bl	18fe0 <argp_parse@@Base+0x2e94>
   191dc:	pop	{r1, r2, lr}
   191e0:	mul	r3, r2, r0
   191e4:	sub	r1, r1, r3
   191e8:	bx	lr
   191ec:	cmp	r1, #0
   191f0:	beq	193fc <argp_parse@@Base+0x32b0>
   191f4:	eor	ip, r0, r1
   191f8:	rsbmi	r1, r1, #0
   191fc:	subs	r2, r1, #1
   19200:	beq	193c8 <argp_parse@@Base+0x327c>
   19204:	movs	r3, r0
   19208:	rsbmi	r3, r0, #0
   1920c:	cmp	r3, r1
   19210:	bls	193d4 <argp_parse@@Base+0x3288>
   19214:	tst	r1, r2
   19218:	beq	193e4 <argp_parse@@Base+0x3298>
   1921c:	clz	r2, r3
   19220:	clz	r0, r1
   19224:	sub	r2, r0, r2
   19228:	rsbs	r2, r2, #31
   1922c:	addne	r2, r2, r2, lsl #1
   19230:	mov	r0, #0
   19234:	addne	pc, pc, r2, lsl #2
   19238:	nop			; (mov r0, r0)
   1923c:	cmp	r3, r1, lsl #31
   19240:	adc	r0, r0, r0
   19244:	subcs	r3, r3, r1, lsl #31
   19248:	cmp	r3, r1, lsl #30
   1924c:	adc	r0, r0, r0
   19250:	subcs	r3, r3, r1, lsl #30
   19254:	cmp	r3, r1, lsl #29
   19258:	adc	r0, r0, r0
   1925c:	subcs	r3, r3, r1, lsl #29
   19260:	cmp	r3, r1, lsl #28
   19264:	adc	r0, r0, r0
   19268:	subcs	r3, r3, r1, lsl #28
   1926c:	cmp	r3, r1, lsl #27
   19270:	adc	r0, r0, r0
   19274:	subcs	r3, r3, r1, lsl #27
   19278:	cmp	r3, r1, lsl #26
   1927c:	adc	r0, r0, r0
   19280:	subcs	r3, r3, r1, lsl #26
   19284:	cmp	r3, r1, lsl #25
   19288:	adc	r0, r0, r0
   1928c:	subcs	r3, r3, r1, lsl #25
   19290:	cmp	r3, r1, lsl #24
   19294:	adc	r0, r0, r0
   19298:	subcs	r3, r3, r1, lsl #24
   1929c:	cmp	r3, r1, lsl #23
   192a0:	adc	r0, r0, r0
   192a4:	subcs	r3, r3, r1, lsl #23
   192a8:	cmp	r3, r1, lsl #22
   192ac:	adc	r0, r0, r0
   192b0:	subcs	r3, r3, r1, lsl #22
   192b4:	cmp	r3, r1, lsl #21
   192b8:	adc	r0, r0, r0
   192bc:	subcs	r3, r3, r1, lsl #21
   192c0:	cmp	r3, r1, lsl #20
   192c4:	adc	r0, r0, r0
   192c8:	subcs	r3, r3, r1, lsl #20
   192cc:	cmp	r3, r1, lsl #19
   192d0:	adc	r0, r0, r0
   192d4:	subcs	r3, r3, r1, lsl #19
   192d8:	cmp	r3, r1, lsl #18
   192dc:	adc	r0, r0, r0
   192e0:	subcs	r3, r3, r1, lsl #18
   192e4:	cmp	r3, r1, lsl #17
   192e8:	adc	r0, r0, r0
   192ec:	subcs	r3, r3, r1, lsl #17
   192f0:	cmp	r3, r1, lsl #16
   192f4:	adc	r0, r0, r0
   192f8:	subcs	r3, r3, r1, lsl #16
   192fc:	cmp	r3, r1, lsl #15
   19300:	adc	r0, r0, r0
   19304:	subcs	r3, r3, r1, lsl #15
   19308:	cmp	r3, r1, lsl #14
   1930c:	adc	r0, r0, r0
   19310:	subcs	r3, r3, r1, lsl #14
   19314:	cmp	r3, r1, lsl #13
   19318:	adc	r0, r0, r0
   1931c:	subcs	r3, r3, r1, lsl #13
   19320:	cmp	r3, r1, lsl #12
   19324:	adc	r0, r0, r0
   19328:	subcs	r3, r3, r1, lsl #12
   1932c:	cmp	r3, r1, lsl #11
   19330:	adc	r0, r0, r0
   19334:	subcs	r3, r3, r1, lsl #11
   19338:	cmp	r3, r1, lsl #10
   1933c:	adc	r0, r0, r0
   19340:	subcs	r3, r3, r1, lsl #10
   19344:	cmp	r3, r1, lsl #9
   19348:	adc	r0, r0, r0
   1934c:	subcs	r3, r3, r1, lsl #9
   19350:	cmp	r3, r1, lsl #8
   19354:	adc	r0, r0, r0
   19358:	subcs	r3, r3, r1, lsl #8
   1935c:	cmp	r3, r1, lsl #7
   19360:	adc	r0, r0, r0
   19364:	subcs	r3, r3, r1, lsl #7
   19368:	cmp	r3, r1, lsl #6
   1936c:	adc	r0, r0, r0
   19370:	subcs	r3, r3, r1, lsl #6
   19374:	cmp	r3, r1, lsl #5
   19378:	adc	r0, r0, r0
   1937c:	subcs	r3, r3, r1, lsl #5
   19380:	cmp	r3, r1, lsl #4
   19384:	adc	r0, r0, r0
   19388:	subcs	r3, r3, r1, lsl #4
   1938c:	cmp	r3, r1, lsl #3
   19390:	adc	r0, r0, r0
   19394:	subcs	r3, r3, r1, lsl #3
   19398:	cmp	r3, r1, lsl #2
   1939c:	adc	r0, r0, r0
   193a0:	subcs	r3, r3, r1, lsl #2
   193a4:	cmp	r3, r1, lsl #1
   193a8:	adc	r0, r0, r0
   193ac:	subcs	r3, r3, r1, lsl #1
   193b0:	cmp	r3, r1
   193b4:	adc	r0, r0, r0
   193b8:	subcs	r3, r3, r1
   193bc:	cmp	ip, #0
   193c0:	rsbmi	r0, r0, #0
   193c4:	bx	lr
   193c8:	teq	ip, r0
   193cc:	rsbmi	r0, r0, #0
   193d0:	bx	lr
   193d4:	movcc	r0, #0
   193d8:	asreq	r0, ip, #31
   193dc:	orreq	r0, r0, #1
   193e0:	bx	lr
   193e4:	clz	r2, r1
   193e8:	rsb	r2, r2, #31
   193ec:	cmp	ip, #0
   193f0:	lsr	r0, r3, r2
   193f4:	rsbmi	r0, r0, #0
   193f8:	bx	lr
   193fc:	cmp	r0, #0
   19400:	mvngt	r0, #-2147483648	; 0x80000000
   19404:	movlt	r0, #-2147483648	; 0x80000000
   19408:	b	1942c <argp_parse@@Base+0x32e0>
   1940c:	cmp	r1, #0
   19410:	beq	193fc <argp_parse@@Base+0x32b0>
   19414:	push	{r0, r1, lr}
   19418:	bl	191f4 <argp_parse@@Base+0x30a8>
   1941c:	pop	{r1, r2, lr}
   19420:	mul	r3, r2, r0
   19424:	sub	r1, r1, r3
   19428:	bx	lr
   1942c:	push	{r1, lr}
   19430:	mov	r0, #8
   19434:	bl	10ff8 <raise@plt>
   19438:	pop	{r1, pc}
   1943c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19440:	mov	r7, r0
   19444:	ldr	r6, [pc, #72]	; 19494 <argp_parse@@Base+0x3348>
   19448:	ldr	r5, [pc, #72]	; 19498 <argp_parse@@Base+0x334c>
   1944c:	add	r6, pc, r6
   19450:	add	r5, pc, r5
   19454:	sub	r6, r6, r5
   19458:	mov	r8, r1
   1945c:	mov	r9, r2
   19460:	bl	10fc0 <calloc@plt-0x20>
   19464:	asrs	r6, r6, #2
   19468:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1946c:	mov	r4, #0
   19470:	add	r4, r4, #1
   19474:	ldr	r3, [r5], #4
   19478:	mov	r2, r9
   1947c:	mov	r1, r8
   19480:	mov	r0, r7
   19484:	blx	r3
   19488:	cmp	r6, r4
   1948c:	bne	19470 <argp_parse@@Base+0x3324>
   19490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19494:			; <UNDEFINED> instruction: 0x00011ab4
   19498:	andeq	r1, r1, ip, lsr #21
   1949c:	bx	lr

Disassembly of section .fini:

000194a0 <.fini>:
   194a0:	push	{r3, lr}
   194a4:	pop	{r3, pc}
