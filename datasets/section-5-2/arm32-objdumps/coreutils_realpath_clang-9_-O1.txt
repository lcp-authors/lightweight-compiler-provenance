
../repos/coreutils/src/realpath:     file format elf32-littlearm


Disassembly of section .init:

00010dd0 <.init>:
   10dd0:	push	{r3, lr}
   10dd4:	bl	1109c <__mempcpy_chk@plt+0x48>
   10dd8:	pop	{r3, pc}

Disassembly of section .plt:

00010ddc <calloc@plt-0x14>:
   10ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   10de0:	ldr	lr, [pc, #4]	; 10dec <calloc@plt-0x4>
   10de4:	add	lr, pc, lr
   10de8:	ldr	pc, [lr, #8]!
   10dec:	andeq	r7, r1, r4, lsl r2

00010df0 <calloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #532]!	; 0x214

00010dfc <fputs_unlocked@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #524]!	; 0x20c

00010e08 <raise@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #516]!	; 0x204

00010e14 <strcmp@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e20 <fflush@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #500]!	; 0x1f4

00010e2c <memmove@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #492]!	; 0x1ec

00010e38 <free@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #484]!	; 0x1e4

00010e44 <faccessat@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e50 <_exit@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #468]!	; 0x1d4

00010e5c <memcpy@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #460]!	; 0x1cc

00010e68 <mbsinit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #452]!	; 0x1c4

00010e74 <dcgettext@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e80 <realloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #436]!	; 0x1b4

00010e8c <textdomain@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #428]!	; 0x1ac

00010e98 <rawmemchr@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ea4 <iswprint@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #412]!	; 0x19c

00010eb0 <readlink@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #404]!	; 0x194

00010ebc <fwrite@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #396]!	; 0x18c

00010ec8 <lseek64@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #388]!	; 0x184

00010ed4 <__ctype_get_mb_cur_max@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #380]!	; 0x17c

00010ee0 <__fpending@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #372]!	; 0x174

00010eec <ferror_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #364]!	; 0x16c

00010ef8 <mbrtowc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #356]!	; 0x164

00010f04 <error@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #348]!	; 0x15c

00010f10 <malloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #340]!	; 0x154

00010f1c <__libc_start_main@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #332]!	; 0x14c

00010f28 <__freading@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #324]!	; 0x144

00010f34 <__gmon_start__@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #316]!	; 0x13c

00010f40 <getopt_long@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #308]!	; 0x134

00010f4c <__ctype_b_loc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #300]!	; 0x12c

00010f58 <getcwd@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #292]!	; 0x124

00010f64 <exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #284]!	; 0x11c

00010f70 <bcmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #276]!	; 0x114

00010f7c <strlen@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #268]!	; 0x10c

00010f88 <__errno_location@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #260]!	; 0x104

00010f94 <__cxa_atexit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #252]!	; 0xfc

00010fa0 <memset@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #244]!	; 0xf4

00010fac <__printf_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #236]!	; 0xec

00010fb8 <fileno@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #228]!	; 0xe4

00010fc4 <__fprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #220]!	; 0xdc

00010fd0 <fclose@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #212]!	; 0xd4

00010fdc <fseeko64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #204]!	; 0xcc

00010fe8 <setlocale@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #196]!	; 0xc4

00010ff4 <strrchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #188]!	; 0xbc

00011000 <nl_langinfo@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #180]!	; 0xb4

0001100c <bindtextdomain@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #172]!	; 0xac

00011018 <__xstat64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #164]!	; 0xa4

00011024 <strncmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #156]!	; 0x9c

00011030 <abort@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #148]!	; 0x94

0001103c <putchar_unlocked@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #140]!	; 0x8c

00011048 <strspn@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #132]!	; 0x84

00011054 <__mempcpy_chk@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #124]!	; 0x7c

Disassembly of section .text:

00011060 <.text>:
   11060:	mov	fp, #0
   11064:	mov	lr, #0
   11068:	pop	{r1}		; (ldr r1, [sp], #4)
   1106c:	mov	r2, sp
   11070:	push	{r2}		; (str r2, [sp, #-4]!)
   11074:	push	{r0}		; (str r0, [sp, #-4]!)
   11078:	ldr	ip, [pc, #16]	; 11090 <__mempcpy_chk@plt+0x3c>
   1107c:	push	{ip}		; (str ip, [sp, #-4]!)
   11080:	ldr	r0, [pc, #12]	; 11094 <__mempcpy_chk@plt+0x40>
   11084:	ldr	r3, [pc, #12]	; 11098 <__mempcpy_chk@plt+0x44>
   11088:	bl	10f1c <__libc_start_main@plt>
   1108c:	bl	11030 <abort@plt>
   11090:	muleq	r1, r0, r9
   11094:	andeq	r1, r1, r0, ror #7
   11098:	andeq	r6, r1, r0, lsr r9
   1109c:	ldr	r3, [pc, #20]	; 110b8 <__mempcpy_chk@plt+0x64>
   110a0:	ldr	r2, [pc, #20]	; 110bc <__mempcpy_chk@plt+0x68>
   110a4:	add	r3, pc, r3
   110a8:	ldr	r2, [r3, r2]
   110ac:	cmp	r2, #0
   110b0:	bxeq	lr
   110b4:	b	10f34 <__gmon_start__@plt>
   110b8:	andeq	r6, r1, r4, asr pc
   110bc:	ldrdeq	r0, [r0], -ip
   110c0:	ldr	r0, [pc, #24]	; 110e0 <__mempcpy_chk@plt+0x8c>
   110c4:	ldr	r3, [pc, #24]	; 110e4 <__mempcpy_chk@plt+0x90>
   110c8:	cmp	r3, r0
   110cc:	bxeq	lr
   110d0:	ldr	r3, [pc, #16]	; 110e8 <__mempcpy_chk@plt+0x94>
   110d4:	cmp	r3, #0
   110d8:	bxeq	lr
   110dc:	bx	r3
   110e0:	andeq	r8, r2, r0, lsr r1
   110e4:	andeq	r8, r2, r0, lsr r1
   110e8:	andeq	r0, r0, r0
   110ec:	ldr	r0, [pc, #36]	; 11118 <__mempcpy_chk@plt+0xc4>
   110f0:	ldr	r1, [pc, #36]	; 1111c <__mempcpy_chk@plt+0xc8>
   110f4:	sub	r1, r1, r0
   110f8:	asr	r1, r1, #2
   110fc:	add	r1, r1, r1, lsr #31
   11100:	asrs	r1, r1, #1
   11104:	bxeq	lr
   11108:	ldr	r3, [pc, #16]	; 11120 <__mempcpy_chk@plt+0xcc>
   1110c:	cmp	r3, #0
   11110:	bxeq	lr
   11114:	bx	r3
   11118:	andeq	r8, r2, r0, lsr r1
   1111c:	andeq	r8, r2, r0, lsr r1
   11120:	andeq	r0, r0, r0
   11124:	push	{r4, lr}
   11128:	ldr	r4, [pc, #24]	; 11148 <__mempcpy_chk@plt+0xf4>
   1112c:	ldrb	r3, [r4]
   11130:	cmp	r3, #0
   11134:	popne	{r4, pc}
   11138:	bl	110c0 <__mempcpy_chk@plt+0x6c>
   1113c:	mov	r3, #1
   11140:	strb	r3, [r4]
   11144:	pop	{r4, pc}
   11148:	andeq	r8, r2, ip, asr #2
   1114c:	b	110ec <__mempcpy_chk@plt+0x98>
   11150:	push	{fp, lr}
   11154:	mov	fp, sp
   11158:	mov	r4, r0
   1115c:	cmp	r0, #0
   11160:	bne	11214 <__mempcpy_chk@plt+0x1c0>
   11164:	movw	r1, #27123	; 0x69f3
   11168:	movt	r1, #1
   1116c:	mov	r0, #0
   11170:	mov	r2, #5
   11174:	bl	10e74 <dcgettext@plt>
   11178:	mov	r1, r0
   1117c:	movw	r0, #33124	; 0x8164
   11180:	movt	r0, #2
   11184:	ldr	r2, [r0]
   11188:	mov	r0, #1
   1118c:	bl	10fac <__printf_chk@plt>
   11190:	movw	r1, #27154	; 0x6a12
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	bl	10e74 <dcgettext@plt>
   111a4:	movw	r5, #33092	; 0x8144
   111a8:	movt	r5, #2
   111ac:	ldr	r1, [r5]
   111b0:	bl	10dfc <fputs_unlocked@plt>
   111b4:	movw	r1, #27233	; 0x6a61
   111b8:	movt	r1, #1
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	bl	10e74 <dcgettext@plt>
   111c8:	ldr	r1, [r5]
   111cc:	bl	10dfc <fputs_unlocked@plt>
   111d0:	movw	r1, #27859	; 0x6cd3
   111d4:	movt	r1, #1
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	bl	10e74 <dcgettext@plt>
   111e4:	ldr	r1, [r5]
   111e8:	bl	10dfc <fputs_unlocked@plt>
   111ec:	movw	r1, #27904	; 0x6d00
   111f0:	movt	r1, #1
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	bl	10e74 <dcgettext@plt>
   11200:	ldr	r1, [r5]
   11204:	bl	10dfc <fputs_unlocked@plt>
   11208:	bl	11258 <__mempcpy_chk@plt+0x204>
   1120c:	mov	r0, r4
   11210:	bl	10f64 <exit@plt>
   11214:	movw	r0, #33088	; 0x8140
   11218:	movt	r0, #2
   1121c:	ldr	r5, [r0]
   11220:	movw	r1, #27084	; 0x69cc
   11224:	movt	r1, #1
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	bl	10e74 <dcgettext@plt>
   11234:	mov	r2, r0
   11238:	movw	r0, #33124	; 0x8164
   1123c:	movt	r0, #2
   11240:	ldr	r3, [r0]
   11244:	mov	r0, r5
   11248:	mov	r1, #1
   1124c:	bl	10fc4 <__fprintf_chk@plt>
   11250:	mov	r0, r4
   11254:	bl	10f64 <exit@plt>
   11258:	push	{r4, r5, r6, sl, fp, lr}
   1125c:	add	fp, sp, #16
   11260:	sub	sp, sp, #56	; 0x38
   11264:	movw	r0, #28712	; 0x7028
   11268:	movt	r0, #1
   1126c:	add	r1, r0, #32
   11270:	mov	r2, #48	; 0x30
   11274:	vld1.64	{d16-d17}, [r1]
   11278:	mov	r6, sp
   1127c:	add	r1, r6, #32
   11280:	add	r3, r0, #16
   11284:	vld1.64	{d18-d19}, [r0], r2
   11288:	vld1.64	{d20-d21}, [r3]
   1128c:	vldr	d22, [r0]
   11290:	vst1.64	{d16-d17}, [r1]
   11294:	add	r0, r6, #16
   11298:	vst1.64	{d20-d21}, [r0]
   1129c:	mov	r0, r6
   112a0:	vst1.64	{d18-d19}, [r0], r2
   112a4:	vstr	d22, [r0]
   112a8:	ldr	r1, [sp]
   112ac:	cmp	r1, #0
   112b0:	movw	r4, #27958	; 0x6d36
   112b4:	movt	r4, #1
   112b8:	beq	112e0 <__mempcpy_chk@plt+0x28c>
   112bc:	mov	r6, sp
   112c0:	movw	r5, #27958	; 0x6d36
   112c4:	movt	r5, #1
   112c8:	mov	r0, r5
   112cc:	bl	10e14 <strcmp@plt>
   112d0:	cmp	r0, #0
   112d4:	ldrne	r1, [r6, #8]!
   112d8:	cmpne	r1, #0
   112dc:	bne	112c8 <__mempcpy_chk@plt+0x274>
   112e0:	ldr	r5, [r6, #4]
   112e4:	movw	r1, #28138	; 0x6dea
   112e8:	movt	r1, #1
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	bl	10e74 <dcgettext@plt>
   112f8:	mov	r1, r0
   112fc:	movw	r2, #27999	; 0x6d5f
   11300:	movt	r2, #1
   11304:	movw	r3, #28161	; 0x6e01
   11308:	movt	r3, #1
   1130c:	mov	r0, #1
   11310:	bl	10fac <__printf_chk@plt>
   11314:	cmp	r5, #0
   11318:	moveq	r5, r4
   1131c:	mov	r0, #5
   11320:	mov	r1, #0
   11324:	bl	10fe8 <setlocale@plt>
   11328:	cmp	r0, #0
   1132c:	beq	1136c <__mempcpy_chk@plt+0x318>
   11330:	movw	r1, #28201	; 0x6e29
   11334:	movt	r1, #1
   11338:	mov	r2, #3
   1133c:	bl	11024 <strncmp@plt>
   11340:	cmp	r0, #0
   11344:	beq	1136c <__mempcpy_chk@plt+0x318>
   11348:	movw	r1, #28205	; 0x6e2d
   1134c:	movt	r1, #1
   11350:	mov	r0, #0
   11354:	mov	r2, #5
   11358:	bl	10e74 <dcgettext@plt>
   1135c:	movw	r1, #33092	; 0x8144
   11360:	movt	r1, #2
   11364:	ldr	r1, [r1]
   11368:	bl	10dfc <fputs_unlocked@plt>
   1136c:	movw	r1, #28276	; 0x6e74
   11370:	movt	r1, #1
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	bl	10e74 <dcgettext@plt>
   11380:	mov	r1, r0
   11384:	movw	r2, #28161	; 0x6e01
   11388:	movt	r2, #1
   1138c:	mov	r0, #1
   11390:	mov	r3, r4
   11394:	bl	10fac <__printf_chk@plt>
   11398:	movw	r0, #28071	; 0x6da7
   1139c:	movt	r0, #1
   113a0:	movw	r6, #27232	; 0x6a60
   113a4:	movt	r6, #1
   113a8:	cmp	r5, r4
   113ac:	moveq	r6, r0
   113b0:	movw	r1, #28303	; 0x6e8f
   113b4:	movt	r1, #1
   113b8:	mov	r0, #0
   113bc:	mov	r2, #5
   113c0:	bl	10e74 <dcgettext@plt>
   113c4:	mov	r1, r0
   113c8:	mov	r0, #1
   113cc:	mov	r2, r5
   113d0:	mov	r3, r6
   113d4:	sub	sp, fp, #16
   113d8:	pop	{r4, r5, r6, sl, fp, lr}
   113dc:	b	10fac <__printf_chk@plt>
   113e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113e4:	add	fp, sp, #28
   113e8:	sub	sp, sp, #12
   113ec:	mov	r8, r1
   113f0:	mov	r5, r0
   113f4:	ldr	r0, [r1]
   113f8:	bl	13794 <__mempcpy_chk@plt+0x2740>
   113fc:	movw	r1, #27232	; 0x6a60
   11400:	movt	r1, #1
   11404:	mov	r0, #6
   11408:	bl	10fe8 <setlocale@plt>
   1140c:	movw	r6, #28003	; 0x6d63
   11410:	movt	r6, #1
   11414:	movw	r1, #27967	; 0x6d3f
   11418:	movt	r1, #1
   1141c:	mov	r0, r6
   11420:	bl	1100c <bindtextdomain@plt>
   11424:	mov	r0, r6
   11428:	bl	10e8c <textdomain@plt>
   1142c:	movw	r0, #9672	; 0x25c8
   11430:	movt	r0, #1
   11434:	bl	16994 <__mempcpy_chk@plt+0x5940>
   11438:	mov	r0, #0
   1143c:	movw	r4, #27991	; 0x6d57
   11440:	movt	r4, #1
   11444:	movw	r7, #28504	; 0x6f58
   11448:	movt	r7, #1
   1144c:	mov	r9, #0
   11450:	mov	sl, #0
   11454:	mov	r6, #1
   11458:	str	r0, [sp]
   1145c:	mov	r0, r5
   11460:	mov	r1, r8
   11464:	mov	r2, r4
   11468:	mov	r3, r7
   1146c:	bl	10f40 <getopt_long@plt>
   11470:	cmp	r0, #75	; 0x4b
   11474:	ble	11614 <__mempcpy_chk@plt+0x5c0>
   11478:	sub	r1, r0, #76	; 0x4c
   1147c:	cmp	r1, #46	; 0x2e
   11480:	bhi	11564 <__mempcpy_chk@plt+0x510>
   11484:	add	r0, pc, #0
   11488:	ldr	pc, [r0, r1, lsl #2]
   1148c:	andeq	r1, r1, r8, asr #10
   11490:	andeq	r1, r1, r8, ror #15
   11494:	andeq	r1, r1, r8, ror #15
   11498:	andeq	r1, r1, r8, ror #15
   1149c:	muleq	r1, ip, r5
   114a0:	andeq	r1, r1, r8, ror #15
   114a4:	andeq	r1, r1, r8, ror #15
   114a8:	andeq	r1, r1, r8, ror #15
   114ac:	andeq	r1, r1, r8, ror #15
   114b0:	andeq	r1, r1, r8, ror #15
   114b4:	andeq	r1, r1, r8, ror #15
   114b8:	andeq	r1, r1, r8, ror #15
   114bc:	andeq	r1, r1, r8, ror #15
   114c0:	andeq	r1, r1, r8, ror #15
   114c4:	andeq	r1, r1, r8, ror #15
   114c8:	andeq	r1, r1, r8, ror #15
   114cc:	andeq	r1, r1, r8, ror #15
   114d0:	andeq	r1, r1, r8, ror #15
   114d4:	andeq	r1, r1, r8, ror #15
   114d8:	andeq	r1, r1, r8, ror #15
   114dc:	andeq	r1, r1, r8, ror #15
   114e0:	andeq	r1, r1, r8, ror #15
   114e4:	andeq	r1, r1, r8, ror #15
   114e8:	andeq	r1, r1, r8, ror #15
   114ec:	andeq	r1, r1, r8, ror #15
   114f0:	muleq	r1, r0, r5
   114f4:	andeq	r1, r1, r8, ror #15
   114f8:	andeq	r1, r1, r8, ror #15
   114fc:	andeq	r1, r1, r8, ror #15
   11500:	andeq	r1, r1, r8, ror #15
   11504:	andeq	r1, r1, r8, ror #15
   11508:	andeq	r1, r1, r8, ror #15
   1150c:	andeq	r1, r1, r8, ror #15
   11510:	andeq	r1, r1, r0, lsl #11
   11514:	andeq	r1, r1, r8, ror #15
   11518:	andeq	r1, r1, r8, ror #15
   1151c:	andeq	r1, r1, r8, ror #15
   11520:	andeq	r1, r1, ip, asr #11
   11524:	andeq	r1, r1, r8, ror #15
   11528:			; <UNDEFINED> instruction: 0x000115b4
   1152c:	andeq	r1, r1, r8, ror #15
   11530:	andeq	r1, r1, r8, ror #15
   11534:	andeq	r1, r1, r8, ror #15
   11538:	andeq	r1, r1, r8, ror #15
   1153c:	andeq	r1, r1, r8, ror #15
   11540:	andeq	r1, r1, r8, ror #15
   11544:	ldrdeq	r1, [r1], -ip
   11548:	mov	r0, #1
   1154c:	movw	r1, #33104	; 0x8150
   11550:	movt	r1, #2
   11554:	strb	r0, [r1]
   11558:	orr	r6, r6, #4
   1155c:	mov	r0, #0
   11560:	b	11458 <__mempcpy_chk@plt+0x404>
   11564:	cmp	r0, #256	; 0x100
   11568:	bne	115f4 <__mempcpy_chk@plt+0x5a0>
   1156c:	movw	r0, #33096	; 0x8148
   11570:	movt	r0, #2
   11574:	ldr	r9, [r0]
   11578:	mov	r0, #0
   1157c:	b	11458 <__mempcpy_chk@plt+0x404>
   11580:	mov	r0, #2
   11584:	bfi	r6, r0, #0, #2
   11588:	mov	r0, #0
   1158c:	b	11458 <__mempcpy_chk@plt+0x404>
   11590:	bic	r6, r6, #3
   11594:	mov	r0, #0
   11598:	b	11458 <__mempcpy_chk@plt+0x404>
   1159c:	mov	r0, #0
   115a0:	movw	r1, #33104	; 0x8150
   115a4:	movt	r1, #2
   115a8:	strb	r0, [r1]
   115ac:	bic	r6, r6, #4
   115b0:	b	11458 <__mempcpy_chk@plt+0x404>
   115b4:	mov	r0, #0
   115b8:	movw	r1, #33104	; 0x8150
   115bc:	movt	r1, #2
   115c0:	strb	r0, [r1]
   115c4:	orr	r6, r6, #4
   115c8:	b	11458 <__mempcpy_chk@plt+0x404>
   115cc:	mov	r0, #1
   115d0:	movw	r1, #33105	; 0x8151
   115d4:	movt	r1, #2
   115d8:	b	115e8 <__mempcpy_chk@plt+0x594>
   115dc:	mov	r0, #1
   115e0:	movw	r1, #33106	; 0x8152
   115e4:	movt	r1, #2
   115e8:	strb	r0, [r1]
   115ec:	mov	r0, #0
   115f0:	b	11458 <__mempcpy_chk@plt+0x404>
   115f4:	movw	r1, #257	; 0x101
   115f8:	cmp	r0, r1
   115fc:	bne	117e8 <__mempcpy_chk@plt+0x794>
   11600:	movw	r0, #33096	; 0x8148
   11604:	movt	r0, #2
   11608:	ldr	sl, [r0]
   1160c:	mov	r0, #0
   11610:	b	11458 <__mempcpy_chk@plt+0x404>
   11614:	cmn	r0, #1
   11618:	bne	11764 <__mempcpy_chk@plt+0x710>
   1161c:	movw	r4, #33080	; 0x8138
   11620:	movt	r4, #2
   11624:	ldr	r0, [r4]
   11628:	cmp	r0, r5
   1162c:	bge	117c4 <__mempcpy_chk@plt+0x770>
   11630:	cmp	sl, #0
   11634:	mov	r7, sl
   11638:	moveq	r7, r9
   1163c:	cmp	r9, #0
   11640:	movne	r7, r9
   11644:	and	r9, r6, #3
   11648:	cmp	r7, #0
   1164c:	beq	11684 <__mempcpy_chk@plt+0x630>
   11650:	mov	r0, r7
   11654:	mov	r1, r6
   11658:	bl	11870 <__mempcpy_chk@plt+0x81c>
   1165c:	movw	r1, #33108	; 0x8154
   11660:	movt	r1, #2
   11664:	str	r0, [r1]
   11668:	cmp	r0, #0
   1166c:	beq	117f0 <__mempcpy_chk@plt+0x79c>
   11670:	cmp	r9, #0
   11674:	bne	11684 <__mempcpy_chk@plt+0x630>
   11678:	bl	118c8 <__mempcpy_chk@plt+0x874>
   1167c:	cmp	r0, #0
   11680:	beq	11838 <__mempcpy_chk@plt+0x7e4>
   11684:	cmp	sl, r7
   11688:	beq	116f0 <__mempcpy_chk@plt+0x69c>
   1168c:	cmp	sl, #0
   11690:	beq	11720 <__mempcpy_chk@plt+0x6cc>
   11694:	mov	r0, sl
   11698:	mov	r1, r6
   1169c:	bl	11870 <__mempcpy_chk@plt+0x81c>
   116a0:	cmp	r0, #0
   116a4:	beq	11808 <__mempcpy_chk@plt+0x7b4>
   116a8:	mov	r7, r0
   116ac:	cmp	r9, #0
   116b0:	bne	116c4 <__mempcpy_chk@plt+0x670>
   116b4:	mov	r0, r7
   116b8:	bl	118c8 <__mempcpy_chk@plt+0x874>
   116bc:	cmp	r0, #0
   116c0:	beq	11848 <__mempcpy_chk@plt+0x7f4>
   116c4:	movw	r9, #33108	; 0x8154
   116c8:	movt	r9, #2
   116cc:	ldr	r1, [r9]
   116d0:	mov	r0, r7
   116d4:	bl	11940 <__mempcpy_chk@plt+0x8ec>
   116d8:	cmp	r0, #0
   116dc:	beq	11700 <__mempcpy_chk@plt+0x6ac>
   116e0:	movw	r0, #33112	; 0x8158
   116e4:	movt	r0, #2
   116e8:	str	r7, [r0]
   116ec:	b	11720 <__mempcpy_chk@plt+0x6cc>
   116f0:	movw	r0, #33108	; 0x8154
   116f4:	movt	r0, #2
   116f8:	ldr	r0, [r0]
   116fc:	b	11714 <__mempcpy_chk@plt+0x6c0>
   11700:	mov	r0, r7
   11704:	bl	1277c <__mempcpy_chk@plt+0x1728>
   11708:	ldr	r0, [r9]
   1170c:	mov	r1, #0
   11710:	str	r1, [r9]
   11714:	movw	r1, #33112	; 0x8158
   11718:	movt	r1, #2
   1171c:	str	r0, [r1]
   11720:	ldr	r1, [r4]
   11724:	mov	r0, #0
   11728:	cmp	r1, r5
   1172c:	bge	1175c <__mempcpy_chk@plt+0x708>
   11730:	mov	r7, #1
   11734:	ldr	r0, [r8, r1, lsl #2]
   11738:	mov	r1, r6
   1173c:	bl	119e8 <__mempcpy_chk@plt+0x994>
   11740:	ldr	r1, [r4]
   11744:	add	r1, r1, #1
   11748:	str	r1, [r4]
   1174c:	and	r7, r7, r0
   11750:	cmp	r1, r5
   11754:	blt	11734 <__mempcpy_chk@plt+0x6e0>
   11758:	eor	r0, r7, #1
   1175c:	sub	sp, fp, #28
   11760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11764:	cmn	r0, #3
   11768:	bne	117b4 <__mempcpy_chk@plt+0x760>
   1176c:	movw	r0, #33000	; 0x80e8
   11770:	movt	r0, #2
   11774:	ldr	r3, [r0]
   11778:	movw	r0, #33092	; 0x8144
   1177c:	movt	r0, #2
   11780:	ldr	r0, [r0]
   11784:	mov	r1, #0
   11788:	movw	r2, #28013	; 0x6d6d
   1178c:	movt	r2, #1
   11790:	str	r2, [sp]
   11794:	str	r1, [sp, #4]
   11798:	movw	r1, #27958	; 0x6d36
   1179c:	movt	r1, #1
   117a0:	movw	r2, #27999	; 0x6d5f
   117a4:	movt	r2, #1
   117a8:	bl	158fc <__mempcpy_chk@plt+0x48a8>
   117ac:	mov	r0, #0
   117b0:	bl	10f64 <exit@plt>
   117b4:	cmn	r0, #2
   117b8:	bne	117e8 <__mempcpy_chk@plt+0x794>
   117bc:	mov	r0, #0
   117c0:	bl	11150 <__mempcpy_chk@plt+0xfc>
   117c4:	movw	r1, #28027	; 0x6d7b
   117c8:	movt	r1, #1
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	bl	10e74 <dcgettext@plt>
   117d8:	mov	r2, r0
   117dc:	mov	r0, #0
   117e0:	mov	r1, #0
   117e4:	bl	10f04 <error@plt>
   117e8:	mov	r0, #1
   117ec:	bl	11150 <__mempcpy_chk@plt+0xfc>
   117f0:	bl	10f88 <__errno_location@plt>
   117f4:	ldr	r4, [r0]
   117f8:	mov	r0, #0
   117fc:	mov	r1, #3
   11800:	mov	r2, r7
   11804:	b	1181c <__mempcpy_chk@plt+0x7c8>
   11808:	bl	10f88 <__errno_location@plt>
   1180c:	ldr	r4, [r0]
   11810:	mov	r0, #0
   11814:	mov	r1, #3
   11818:	mov	r2, sl
   1181c:	bl	14e48 <__mempcpy_chk@plt+0x3df4>
   11820:	mov	r3, r0
   11824:	movw	r2, #28828	; 0x709c
   11828:	movt	r2, #1
   1182c:	mov	r0, #1
   11830:	mov	r1, r4
   11834:	bl	10f04 <error@plt>
   11838:	mov	r0, #0
   1183c:	mov	r1, #3
   11840:	mov	r2, r7
   11844:	b	11854 <__mempcpy_chk@plt+0x800>
   11848:	mov	r0, #0
   1184c:	mov	r1, #3
   11850:	mov	r2, sl
   11854:	bl	14e48 <__mempcpy_chk@plt+0x3df4>
   11858:	mov	r3, r0
   1185c:	movw	r2, #28828	; 0x709c
   11860:	movt	r2, #1
   11864:	mov	r0, #1
   11868:	mov	r1, #20
   1186c:	bl	10f04 <error@plt>
   11870:	push	{r4, r5, fp, lr}
   11874:	add	fp, sp, #8
   11878:	mov	r5, r1
   1187c:	bl	11df4 <__mempcpy_chk@plt+0xda0>
   11880:	mov	r4, r0
   11884:	movw	r0, #33104	; 0x8150
   11888:	movt	r0, #2
   1188c:	ldrb	r0, [r0]
   11890:	cmp	r0, #1
   11894:	bne	118c0 <__mempcpy_chk@plt+0x86c>
   11898:	cmp	r4, #0
   1189c:	beq	118c0 <__mempcpy_chk@plt+0x86c>
   118a0:	bic	r1, r5, #4
   118a4:	mov	r0, r4
   118a8:	bl	11df4 <__mempcpy_chk@plt+0xda0>
   118ac:	mov	r5, r0
   118b0:	mov	r0, r4
   118b4:	bl	1277c <__mempcpy_chk@plt+0x1728>
   118b8:	mov	r0, r5
   118bc:	pop	{r4, r5, fp, pc}
   118c0:	mov	r0, r4
   118c4:	pop	{r4, r5, fp, pc}
   118c8:	push	{r4, r5, r6, sl, fp, lr}
   118cc:	add	fp, sp, #16
   118d0:	sub	sp, sp, #104	; 0x68
   118d4:	mov	r4, r0
   118d8:	mov	r1, sp
   118dc:	bl	169ac <__mempcpy_chk@plt+0x5958>
   118e0:	cmp	r0, #0
   118e4:	ldreq	r0, [sp, #16]
   118e8:	andeq	r0, r0, #61440	; 0xf000
   118ec:	subeq	r0, r0, #16384	; 0x4000
   118f0:	clzeq	r0, r0
   118f4:	lsreq	r0, r0, #5
   118f8:	subeq	sp, fp, #16
   118fc:	popeq	{r4, r5, r6, sl, fp, pc}
   11900:	bl	10f88 <__errno_location@plt>
   11904:	ldr	r5, [r0]
   11908:	movw	r1, #28482	; 0x6f42
   1190c:	movt	r1, #1
   11910:	mov	r0, #0
   11914:	mov	r2, #5
   11918:	bl	10e74 <dcgettext@plt>
   1191c:	mov	r6, r0
   11920:	mov	r0, #4
   11924:	mov	r1, r4
   11928:	bl	14d94 <__mempcpy_chk@plt+0x3d40>
   1192c:	mov	r3, r0
   11930:	mov	r0, #1
   11934:	mov	r1, r5
   11938:	mov	r2, r6
   1193c:	bl	10f04 <error@plt>
   11940:	push	{fp, lr}
   11944:	mov	fp, sp
   11948:	ldrb	ip, [r0, #1]
   1194c:	cmp	ip, #47	; 0x2f
   11950:	beq	1196c <__mempcpy_chk@plt+0x918>
   11954:	cmp	ip, #0
   11958:	bne	11984 <__mempcpy_chk@plt+0x930>
   1195c:	ldrb	r0, [r1, #1]
   11960:	subs	r0, r0, #47	; 0x2f
   11964:	movwne	r0, #1
   11968:	pop	{fp, pc}
   1196c:	ldrb	r3, [r1, #1]
   11970:	ldrb	r2, [r0, #2]
   11974:	cmp	r2, #0
   11978:	beq	119d8 <__mempcpy_chk@plt+0x984>
   1197c:	mov	ip, #47	; 0x2f
   11980:	b	11988 <__mempcpy_chk@plt+0x934>
   11984:	ldrb	r3, [r1, #1]
   11988:	add	r2, r0, #2
   1198c:	add	r1, r1, #2
   11990:	mov	r0, #0
   11994:	tst	r3, #255	; 0xff
   11998:	beq	119d4 <__mempcpy_chk@plt+0x980>
   1199c:	uxtb	lr, r3
   119a0:	uxtb	r3, ip
   119a4:	cmp	r3, lr
   119a8:	bne	119d4 <__mempcpy_chk@plt+0x980>
   119ac:	ldrb	ip, [r2], #1
   119b0:	ldrb	r3, [r1], #1
   119b4:	cmp	ip, #0
   119b8:	bne	11994 <__mempcpy_chk@plt+0x940>
   119bc:	clz	r0, r3
   119c0:	lsr	r0, r0, #5
   119c4:	sub	r1, r3, #47	; 0x2f
   119c8:	clz	r1, r1
   119cc:	lsr	r1, r1, #5
   119d0:	orr	r0, r1, r0
   119d4:	pop	{fp, pc}
   119d8:	sub	r0, r3, #47	; 0x2f
   119dc:	clz	r0, r0
   119e0:	lsr	r0, r0, #5
   119e4:	pop	{fp, pc}
   119e8:	push	{r4, r5, r6, sl, fp, lr}
   119ec:	add	fp, sp, #16
   119f0:	mov	r5, r0
   119f4:	bl	11870 <__mempcpy_chk@plt+0x81c>
   119f8:	cmp	r0, #0
   119fc:	beq	11a9c <__mempcpy_chk@plt+0xa48>
   11a00:	mov	r4, r0
   11a04:	movw	r0, #33108	; 0x8154
   11a08:	movt	r0, #2
   11a0c:	ldr	r5, [r0]
   11a10:	cmp	r5, #0
   11a14:	beq	11a58 <__mempcpy_chk@plt+0xa04>
   11a18:	movw	r0, #33112	; 0x8158
   11a1c:	movt	r0, #2
   11a20:	ldr	r0, [r0]
   11a24:	cmp	r0, #0
   11a28:	beq	11a3c <__mempcpy_chk@plt+0x9e8>
   11a2c:	mov	r1, r4
   11a30:	bl	11940 <__mempcpy_chk@plt+0x8ec>
   11a34:	cmp	r0, #0
   11a38:	beq	11a58 <__mempcpy_chk@plt+0xa04>
   11a3c:	mov	r0, r4
   11a40:	mov	r1, r5
   11a44:	mov	r2, #0
   11a48:	mov	r3, #0
   11a4c:	bl	11af8 <__mempcpy_chk@plt+0xaa4>
   11a50:	cmp	r0, #0
   11a54:	bne	11a6c <__mempcpy_chk@plt+0xa18>
   11a58:	movw	r0, #33092	; 0x8144
   11a5c:	movt	r0, #2
   11a60:	ldr	r1, [r0]
   11a64:	mov	r0, r4
   11a68:	bl	10dfc <fputs_unlocked@plt>
   11a6c:	movw	r0, #33106	; 0x8152
   11a70:	movt	r0, #2
   11a74:	ldrb	r1, [r0]
   11a78:	mov	r0, #10
   11a7c:	cmp	r1, #0
   11a80:	movwne	r0, #0
   11a84:	bl	1103c <putchar_unlocked@plt>
   11a88:	mov	r0, r4
   11a8c:	bl	1277c <__mempcpy_chk@plt+0x1728>
   11a90:	mov	r4, #1
   11a94:	mov	r0, r4
   11a98:	pop	{r4, r5, r6, sl, fp, pc}
   11a9c:	movw	r0, #33105	; 0x8151
   11aa0:	movt	r0, #2
   11aa4:	ldrb	r0, [r0]
   11aa8:	mov	r4, #0
   11aac:	cmp	r0, #0
   11ab0:	beq	11abc <__mempcpy_chk@plt+0xa68>
   11ab4:	mov	r0, r4
   11ab8:	pop	{r4, r5, r6, sl, fp, pc}
   11abc:	bl	10f88 <__errno_location@plt>
   11ac0:	ldr	r6, [r0]
   11ac4:	mov	r4, #0
   11ac8:	mov	r0, #0
   11acc:	mov	r1, #3
   11ad0:	mov	r2, r5
   11ad4:	bl	14e48 <__mempcpy_chk@plt+0x3df4>
   11ad8:	mov	r3, r0
   11adc:	movw	r2, #28828	; 0x709c
   11ae0:	movt	r2, #1
   11ae4:	mov	r0, #0
   11ae8:	mov	r1, r6
   11aec:	bl	10f04 <error@plt>
   11af0:	mov	r0, r4
   11af4:	pop	{r4, r5, r6, sl, fp, pc}
   11af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11afc:	add	fp, sp, #28
   11b00:	sub	sp, sp, #12
   11b04:	mov	r6, r1
   11b08:	mov	r9, r0
   11b0c:	str	r3, [sp, #4]
   11b10:	str	r2, [sp, #8]
   11b14:	mov	r0, r1
   11b18:	mov	r1, r9
   11b1c:	bl	11c94 <__mempcpy_chk@plt+0xc40>
   11b20:	cmp	r0, #0
   11b24:	beq	11c10 <__mempcpy_chk@plt+0xbbc>
   11b28:	ldrb	r1, [r9, r0]!
   11b2c:	cmp	r1, #47	; 0x2f
   11b30:	mov	r8, r9
   11b34:	addeq	r8, r8, #1
   11b38:	ldrb	r0, [r6, r0]!
   11b3c:	cmp	r0, #47	; 0x2f
   11b40:	addeq	r6, r6, #1
   11b44:	ldrb	r0, [r6]
   11b48:	sub	r1, r1, #47	; 0x2f
   11b4c:	clz	r1, r1
   11b50:	lsr	r1, r1, #5
   11b54:	cmp	r0, #0
   11b58:	beq	11c18 <__mempcpy_chk@plt+0xbc4>
   11b5c:	str	r1, [sp]
   11b60:	movw	r0, #28769	; 0x7061
   11b64:	movt	r0, #1
   11b68:	add	sl, sp, #8
   11b6c:	add	r4, sp, #4
   11b70:	mov	r1, sl
   11b74:	mov	r2, r4
   11b78:	bl	11d70 <__mempcpy_chk@plt+0xd1c>
   11b7c:	mov	r5, r0
   11b80:	movw	r7, #28768	; 0x7060
   11b84:	movt	r7, #1
   11b88:	b	11ba8 <__mempcpy_chk@plt+0xb54>
   11b8c:	mov	r0, r7
   11b90:	mov	r1, sl
   11b94:	mov	r2, r4
   11b98:	bl	11d70 <__mempcpy_chk@plt+0xd1c>
   11b9c:	and	r1, r5, #1
   11ba0:	orr	r5, r1, r0
   11ba4:	add	r6, r6, #1
   11ba8:	ldrb	r0, [r6]
   11bac:	cmp	r0, #47	; 0x2f
   11bb0:	beq	11b8c <__mempcpy_chk@plt+0xb38>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11ba4 <__mempcpy_chk@plt+0xb50>
   11bbc:	ldr	r0, [sp]
   11bc0:	ldrb	r0, [r9, r0]
   11bc4:	and	r6, r5, #1
   11bc8:	cmp	r0, #0
   11bcc:	beq	11c84 <__mempcpy_chk@plt+0xc30>
   11bd0:	movw	r0, #29943	; 0x74f7
   11bd4:	movt	r0, #1
   11bd8:	add	r4, sp, #8
   11bdc:	add	r5, sp, #4
   11be0:	mov	r1, r4
   11be4:	mov	r2, r5
   11be8:	bl	11d70 <__mempcpy_chk@plt+0xd1c>
   11bec:	orr	r6, r0, r6
   11bf0:	mov	r0, r8
   11bf4:	mov	r1, r4
   11bf8:	mov	r2, r5
   11bfc:	bl	11d70 <__mempcpy_chk@plt+0xd1c>
   11c00:	orrs	r0, r6, r0
   11c04:	bne	11c48 <__mempcpy_chk@plt+0xbf4>
   11c08:	mov	r4, #1
   11c0c:	b	11c78 <__mempcpy_chk@plt+0xc24>
   11c10:	mov	r4, #0
   11c14:	b	11c78 <__mempcpy_chk@plt+0xc24>
   11c18:	ldrb	r0, [r9, r1]
   11c1c:	movw	r1, #28770	; 0x7062
   11c20:	movt	r1, #1
   11c24:	cmp	r0, #0
   11c28:	moveq	r8, r1
   11c2c:	add	r1, sp, #8
   11c30:	add	r2, sp, #4
   11c34:	mov	r0, r8
   11c38:	bl	11d70 <__mempcpy_chk@plt+0xd1c>
   11c3c:	mov	r4, #1
   11c40:	cmp	r0, #0
   11c44:	beq	11c78 <__mempcpy_chk@plt+0xc24>
   11c48:	mov	r4, #0
   11c4c:	movw	r1, #28772	; 0x7064
   11c50:	movt	r1, #1
   11c54:	mov	r0, #0
   11c58:	mov	r2, #5
   11c5c:	bl	10e74 <dcgettext@plt>
   11c60:	mov	r3, r0
   11c64:	movw	r2, #28828	; 0x709c
   11c68:	movt	r2, #1
   11c6c:	mov	r0, #0
   11c70:	mov	r1, #36	; 0x24
   11c74:	bl	10f04 <error@plt>
   11c78:	mov	r0, r4
   11c7c:	sub	sp, fp, #28
   11c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c84:	mov	r4, #1
   11c88:	cmp	r6, #0
   11c8c:	bne	11c48 <__mempcpy_chk@plt+0xbf4>
   11c90:	b	11c78 <__mempcpy_chk@plt+0xc24>
   11c94:	push	{r4, r5, fp, lr}
   11c98:	add	fp, sp, #8
   11c9c:	mov	ip, r0
   11ca0:	ldrb	r0, [r1, #1]
   11ca4:	sub	r0, r0, #47	; 0x2f
   11ca8:	clz	r0, r0
   11cac:	lsr	r2, r0, #5
   11cb0:	ldrb	r0, [ip, #1]
   11cb4:	sub	r0, r0, #47	; 0x2f
   11cb8:	clz	r0, r0
   11cbc:	lsr	r3, r0, #5
   11cc0:	mov	r0, #0
   11cc4:	teq	r3, r2
   11cc8:	popne	{r4, r5, fp, pc}
   11ccc:	ldrb	lr, [r1]
   11cd0:	ldrb	r3, [ip]
   11cd4:	cmp	r3, #0
   11cd8:	beq	11d30 <__mempcpy_chk@plt+0xcdc>
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #1
   11ce4:	tst	lr, #255	; 0xff
   11ce8:	beq	11d50 <__mempcpy_chk@plt+0xcfc>
   11cec:	uxtb	r5, lr
   11cf0:	uxtb	r4, r3
   11cf4:	cmp	r4, r5
   11cf8:	bne	11d50 <__mempcpy_chk@plt+0xcfc>
   11cfc:	cmp	r4, #47	; 0x2f
   11d00:	moveq	r0, r2
   11d04:	ldrb	lr, [r1, r2]
   11d08:	ldrb	r3, [ip, r2]
   11d0c:	add	r2, r2, #1
   11d10:	cmp	r3, #0
   11d14:	bne	11ce4 <__mempcpy_chk@plt+0xc90>
   11d18:	add	r1, r1, r2
   11d1c:	sub	r1, r1, #1
   11d20:	sub	r2, r2, #1
   11d24:	cmp	lr, #0
   11d28:	bne	11d40 <__mempcpy_chk@plt+0xcec>
   11d2c:	b	11d68 <__mempcpy_chk@plt+0xd14>
   11d30:	mov	r2, #0
   11d34:	mov	r0, #0
   11d38:	cmp	lr, #0
   11d3c:	beq	11d68 <__mempcpy_chk@plt+0xd14>
   11d40:	ldrb	r1, [r1]
   11d44:	cmp	r1, #47	; 0x2f
   11d48:	moveq	r0, r2
   11d4c:	pop	{r4, r5, fp, pc}
   11d50:	uxtb	r1, r3
   11d54:	cmp	r1, #47	; 0x2f
   11d58:	tsteq	lr, #255	; 0xff
   11d5c:	beq	11d64 <__mempcpy_chk@plt+0xd10>
   11d60:	pop	{r4, r5, fp, pc}
   11d64:	sub	r2, r2, #1
   11d68:	mov	r0, r2
   11d6c:	pop	{r4, r5, fp, pc}
   11d70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11d74:	add	fp, sp, #24
   11d78:	mov	r6, r0
   11d7c:	ldr	r7, [r1]
   11d80:	cmp	r7, #0
   11d84:	beq	11dd8 <__mempcpy_chk@plt+0xd84>
   11d88:	mov	r8, r2
   11d8c:	mov	r5, r1
   11d90:	mov	r0, r6
   11d94:	bl	10f7c <strlen@plt>
   11d98:	mov	r4, r0
   11d9c:	ldr	r1, [r8]
   11da0:	mov	r0, #1
   11da4:	cmp	r4, r1
   11da8:	bcs	11df0 <__mempcpy_chk@plt+0xd9c>
   11dac:	add	r2, r4, #1
   11db0:	mov	r0, r7
   11db4:	mov	r1, r6
   11db8:	bl	10e5c <memcpy@plt>
   11dbc:	ldr	r0, [r5]
   11dc0:	add	r0, r0, r4
   11dc4:	str	r0, [r5]
   11dc8:	ldr	r0, [r8]
   11dcc:	sub	r0, r0, r4
   11dd0:	str	r0, [r8]
   11dd4:	b	11dec <__mempcpy_chk@plt+0xd98>
   11dd8:	movw	r0, #33092	; 0x8144
   11ddc:	movt	r0, #2
   11de0:	ldr	r1, [r0]
   11de4:	mov	r0, r6
   11de8:	bl	10dfc <fputs_unlocked@plt>
   11dec:	mov	r0, #0
   11df0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11df4:	push	{r4, r5, fp, lr}
   11df8:	add	fp, sp, #8
   11dfc:	sub	sp, sp, #8
   11e00:	sub	sp, sp, #1024	; 0x400
   11e04:	mov	r2, sp
   11e08:	bl	11e14 <__mempcpy_chk@plt+0xdc0>
   11e0c:	sub	sp, fp, #8
   11e10:	pop	{r4, r5, fp, pc}
   11e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e18:	add	fp, sp, #28
   11e1c:	sub	sp, sp, #164	; 0xa4
   11e20:	sub	sp, sp, #2048	; 0x800
   11e24:	mov	sl, r2
   11e28:	mov	r5, r1
   11e2c:	mov	r9, r0
   11e30:	mov	r6, #0
   11e34:	str	r6, [fp, #-36]	; 0xffffffdc
   11e38:	and	r0, r1, #3
   11e3c:	str	r0, [sp, #28]
   11e40:	bl	1241c <__mempcpy_chk@plt+0x13c8>
   11e44:	cmp	r0, #0
   11e48:	beq	11e5c <__mempcpy_chk@plt+0xe08>
   11e4c:	bl	10f88 <__errno_location@plt>
   11e50:	mov	r1, #22
   11e54:	str	r1, [r0]
   11e58:	b	123f4 <__mempcpy_chk@plt+0x13a0>
   11e5c:	cmp	r9, #0
   11e60:	beq	11ebc <__mempcpy_chk@plt+0xe68>
   11e64:	ldrb	r0, [r9]
   11e68:	cmp	r0, #0
   11e6c:	beq	11ec8 <__mempcpy_chk@plt+0xe74>
   11e70:	sub	r0, fp, #1072	; 0x430
   11e74:	bl	1242c <__mempcpy_chk@plt+0x13d8>
   11e78:	add	r0, sp, #136	; 0x88
   11e7c:	bl	1242c <__mempcpy_chk@plt+0x13d8>
   11e80:	mov	r0, sl
   11e84:	bl	1242c <__mempcpy_chk@plt+0x13d8>
   11e88:	ldr	r4, [sl]
   11e8c:	ldrb	r0, [r9]
   11e90:	cmp	r0, #47	; 0x2f
   11e94:	bne	11edc <__mempcpy_chk@plt+0xe88>
   11e98:	mov	r0, r4
   11e9c:	mov	r1, r9
   11ea0:	mov	r2, #0
   11ea4:	mvn	r3, #0
   11ea8:	bl	11054 <__mempcpy_chk@plt>
   11eac:	mov	r6, r0
   11eb0:	mov	r0, #47	; 0x2f
   11eb4:	strb	r0, [r6], #1
   11eb8:	b	11f00 <__mempcpy_chk@plt+0xeac>
   11ebc:	bl	10f88 <__errno_location@plt>
   11ec0:	mov	r1, #22
   11ec4:	b	11ed0 <__mempcpy_chk@plt+0xe7c>
   11ec8:	bl	10f88 <__errno_location@plt>
   11ecc:	mov	r1, #2
   11ed0:	str	r1, [r0]
   11ed4:	mov	r6, #0
   11ed8:	b	123f4 <__mempcpy_chk@plt+0x13a0>
   11edc:	ldr	r1, [sl, #4]
   11ee0:	mov	r0, r4
   11ee4:	bl	10f58 <getcwd@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	1234c <__mempcpy_chk@plt+0x12f8>
   11ef0:	mov	r0, r4
   11ef4:	mov	r1, #0
   11ef8:	bl	10e98 <rawmemchr@plt>
   11efc:	mov	r6, r0
   11f00:	ldrb	r0, [r9]
   11f04:	cmp	r0, #0
   11f08:	beq	12328 <__mempcpy_chk@plt+0x12d4>
   11f0c:	and	r1, r5, #4
   11f10:	str	r1, [sp, #24]
   11f14:	mov	r1, #0
   11f18:	str	r1, [sp, #4]
   11f1c:	mov	r1, #0
   11f20:	str	r1, [sp, #12]
   11f24:	str	sl, [sp, #20]
   11f28:	uxtb	r1, r0
   11f2c:	cmp	r1, #47	; 0x2f
   11f30:	bne	11f40 <__mempcpy_chk@plt+0xeec>
   11f34:	ldrb	r0, [r9, #1]!
   11f38:	cmp	r0, #47	; 0x2f
   11f3c:	beq	11f34 <__mempcpy_chk@plt+0xee0>
   11f40:	mov	r8, r9
   11f44:	b	11f4c <__mempcpy_chk@plt+0xef8>
   11f48:	add	r8, r8, #1
   11f4c:	ldrb	r1, [r8]
   11f50:	cmp	r1, #0
   11f54:	cmpne	r1, #47	; 0x2f
   11f58:	bne	11f48 <__mempcpy_chk@plt+0xef4>
   11f5c:	sub	r7, r8, r9
   11f60:	cmp	r7, #1
   11f64:	beq	11f7c <__mempcpy_chk@plt+0xf28>
   11f68:	cmp	r7, #2
   11f6c:	beq	11f8c <__mempcpy_chk@plt+0xf38>
   11f70:	cmp	r7, #0
   11f74:	bne	11fd4 <__mempcpy_chk@plt+0xf80>
   11f78:	b	12328 <__mempcpy_chk@plt+0x12d4>
   11f7c:	uxtb	r0, r0
   11f80:	cmp	r0, #46	; 0x2e
   11f84:	bne	11fd4 <__mempcpy_chk@plt+0xf80>
   11f88:	b	122c4 <__mempcpy_chk@plt+0x1270>
   11f8c:	uxtb	r0, r0
   11f90:	cmp	r0, #46	; 0x2e
   11f94:	bne	11fd4 <__mempcpy_chk@plt+0xf80>
   11f98:	ldrb	r0, [r9, #1]
   11f9c:	cmp	r0, #46	; 0x2e
   11fa0:	bne	11fd4 <__mempcpy_chk@plt+0xf80>
   11fa4:	add	r0, r4, #1
   11fa8:	cmp	r6, r0
   11fac:	bls	122c4 <__mempcpy_chk@plt+0x1270>
   11fb0:	sub	r0, r6, #1
   11fb4:	mov	r6, r0
   11fb8:	cmp	r0, r4
   11fbc:	bls	122c4 <__mempcpy_chk@plt+0x1270>
   11fc0:	mov	r0, r6
   11fc4:	ldrb	r1, [r0, #-1]!
   11fc8:	cmp	r1, #47	; 0x2f
   11fcc:	bne	11fb4 <__mempcpy_chk@plt+0xf60>
   11fd0:	b	122c4 <__mempcpy_chk@plt+0x1270>
   11fd4:	ldrb	r0, [r6, #-1]
   11fd8:	cmp	r0, #47	; 0x2f
   11fdc:	movne	r0, #47	; 0x2f
   11fe0:	strbne	r0, [r6], #1
   11fe4:	ldr	r0, [sl, #4]
   11fe8:	add	r0, r4, r0
   11fec:	sub	r0, r0, r6
   11ff0:	add	r5, r7, #2
   11ff4:	cmp	r0, r5
   11ff8:	bcs	1202c <__mempcpy_chk@plt+0xfd8>
   11ffc:	mov	r0, sl
   12000:	bl	15490 <__mempcpy_chk@plt+0x443c>
   12004:	cmp	r0, #0
   12008:	beq	12418 <__mempcpy_chk@plt+0x13c4>
   1200c:	sub	r0, r6, r4
   12010:	ldr	r4, [sl]
   12014:	ldr	r1, [sl, #4]
   12018:	add	r6, r4, r0
   1201c:	add	r0, r4, r1
   12020:	sub	r0, r0, r6
   12024:	cmp	r0, r5
   12028:	bcc	11ffc <__mempcpy_chk@plt+0xfa8>
   1202c:	mov	r0, r6
   12030:	mov	r1, r9
   12034:	str	r7, [sp, #16]
   12038:	mov	r2, r7
   1203c:	mvn	r3, #0
   12040:	bl	11054 <__mempcpy_chk@plt>
   12044:	mov	r6, r0
   12048:	mov	r0, #0
   1204c:	strb	r0, [r6]
   12050:	ldr	r0, [sp, #24]
   12054:	cmp	r0, #0
   12058:	bne	120b8 <__mempcpy_chk@plt+0x1064>
   1205c:	ldr	r5, [sp, #136]	; 0x88
   12060:	ldr	r0, [sp, #140]	; 0x8c
   12064:	sub	r7, r0, #1
   12068:	mov	r0, r4
   1206c:	mov	r1, r5
   12070:	mov	r2, r7
   12074:	bl	10eb0 <readlink@plt>
   12078:	cmp	r0, r7
   1207c:	blt	12094 <__mempcpy_chk@plt+0x1040>
   12080:	add	r0, sp, #136	; 0x88
   12084:	bl	1540c <__mempcpy_chk@plt+0x43b8>
   12088:	cmp	r0, #0
   1208c:	bne	1205c <__mempcpy_chk@plt+0x1008>
   12090:	b	12418 <__mempcpy_chk@plt+0x13c4>
   12094:	mov	sl, r0
   12098:	cmp	r0, #0
   1209c:	bmi	120b8 <__mempcpy_chk@plt+0x1064>
   120a0:	ldr	r0, [sp, #4]
   120a4:	cmp	r0, #19
   120a8:	bgt	12128 <__mempcpy_chk@plt+0x10d4>
   120ac:	add	r0, r0, #1
   120b0:	str	r0, [sp, #4]
   120b4:	b	121a0 <__mempcpy_chk@plt+0x114c>
   120b8:	ldr	r0, [sp, #28]
   120bc:	cmp	r0, #2
   120c0:	bne	120d0 <__mempcpy_chk@plt+0x107c>
   120c4:	mov	r9, r8
   120c8:	ldr	sl, [sp, #20]
   120cc:	b	1231c <__mempcpy_chk@plt+0x12c8>
   120d0:	mov	r0, r8
   120d4:	bl	124d8 <__mempcpy_chk@plt+0x1484>
   120d8:	cmp	r0, #0
   120dc:	beq	120fc <__mempcpy_chk@plt+0x10a8>
   120e0:	mov	r0, r4
   120e4:	mov	r1, r6
   120e8:	bl	12560 <__mempcpy_chk@plt+0x150c>
   120ec:	cmp	r0, #0
   120f0:	ldr	sl, [sp, #20]
   120f4:	bne	122c4 <__mempcpy_chk@plt+0x1270>
   120f8:	b	122dc <__mempcpy_chk@plt+0x1288>
   120fc:	ldr	r0, [sp, #24]
   12100:	cmp	r0, #0
   12104:	ldr	sl, [sp, #20]
   12108:	beq	122b4 <__mempcpy_chk@plt+0x1260>
   1210c:	ldrb	r0, [r8]
   12110:	cmp	r0, #0
   12114:	beq	122cc <__mempcpy_chk@plt+0x1278>
   12118:	mov	r9, r8
   1211c:	cmp	r0, #0
   12120:	bne	11f28 <__mempcpy_chk@plt+0xed4>
   12124:	b	12328 <__mempcpy_chk@plt+0x12d4>
   12128:	ldrb	r0, [r9]
   1212c:	cmp	r0, #0
   12130:	beq	121a0 <__mempcpy_chk@plt+0x114c>
   12134:	mov	r0, #0
   12138:	ldr	r7, [sp, #16]
   1213c:	strb	r0, [r6, -r7]
   12140:	ldrb	r0, [r4]
   12144:	cmp	r0, #0
   12148:	mov	r0, r4
   1214c:	movw	r1, #28770	; 0x7062
   12150:	movt	r1, #1
   12154:	moveq	r0, r1
   12158:	add	r1, sp, #32
   1215c:	bl	169ac <__mempcpy_chk@plt+0x5958>
   12160:	cmp	r0, #0
   12164:	bne	1240c <__mempcpy_chk@plt+0x13b8>
   12168:	rsb	r0, r7, #0
   1216c:	ldrb	r1, [r9]
   12170:	strb	r1, [r6, r0]
   12174:	sub	r0, fp, #36	; 0x24
   12178:	mov	r1, r9
   1217c:	add	r2, sp, #32
   12180:	bl	12440 <__mempcpy_chk@plt+0x13ec>
   12184:	cmp	r0, #0
   12188:	beq	121a0 <__mempcpy_chk@plt+0x114c>
   1218c:	ldr	r0, [sp, #28]
   12190:	cmp	r0, #2
   12194:	ldr	sl, [sp, #20]
   12198:	beq	122c4 <__mempcpy_chk@plt+0x1270>
   1219c:	b	12400 <__mempcpy_chk@plt+0x13ac>
   121a0:	mov	r0, #0
   121a4:	strb	r0, [r5, sl]
   121a8:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   121ac:	ldr	r0, [sp, #12]
   121b0:	tst	r0, #1
   121b4:	ldr	r0, [sp, #8]
   121b8:	subne	r0, r8, r9
   121bc:	str	r0, [sp, #8]
   121c0:	mov	r0, r8
   121c4:	bl	10f7c <strlen@plt>
   121c8:	mvn	r1, sl
   121cc:	cmp	r0, r1
   121d0:	bhi	12418 <__mempcpy_chk@plt+0x13c4>
   121d4:	str	r0, [sp, #16]
   121d8:	add	r7, r0, sl
   121dc:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   121e0:	cmp	r0, r7
   121e4:	bhi	12208 <__mempcpy_chk@plt+0x11b4>
   121e8:	sub	r0, fp, #1072	; 0x430
   121ec:	bl	15490 <__mempcpy_chk@plt+0x443c>
   121f0:	cmp	r0, #0
   121f4:	beq	12418 <__mempcpy_chk@plt+0x13c4>
   121f8:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   121fc:	cmp	r0, r7
   12200:	bls	121e8 <__mempcpy_chk@plt+0x1194>
   12204:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   12208:	ldr	r0, [sp, #12]
   1220c:	tst	r0, #1
   12210:	ldr	r0, [sp, #8]
   12214:	addne	r8, r9, r0
   12218:	add	r0, r9, sl
   1221c:	ldr	r1, [sp, #16]
   12220:	add	r2, r1, #1
   12224:	mov	r1, r8
   12228:	bl	10e2c <memmove@plt>
   1222c:	mov	r0, r9
   12230:	mov	r1, r5
   12234:	mov	r2, sl
   12238:	bl	10e5c <memcpy@plt>
   1223c:	ldrb	r0, [r5]
   12240:	cmp	r0, #47	; 0x2f
   12244:	bne	12278 <__mempcpy_chk@plt+0x1224>
   12248:	mov	r0, r4
   1224c:	mov	r1, r5
   12250:	mov	r2, #0
   12254:	mvn	r3, #0
   12258:	bl	11054 <__mempcpy_chk@plt>
   1225c:	mov	r6, r0
   12260:	mov	r0, #47	; 0x2f
   12264:	strb	r0, [r6], #1
   12268:	mov	r0, #1
   1226c:	str	r0, [sp, #12]
   12270:	ldr	sl, [sp, #20]
   12274:	b	1231c <__mempcpy_chk@plt+0x12c8>
   12278:	add	r0, r4, #1
   1227c:	mov	r1, #1
   12280:	str	r1, [sp, #12]
   12284:	cmp	r6, r0
   12288:	ldr	sl, [sp, #20]
   1228c:	bls	1231c <__mempcpy_chk@plt+0x12c8>
   12290:	sub	r0, r6, #1
   12294:	mov	r6, r0
   12298:	cmp	r0, r4
   1229c:	bls	1231c <__mempcpy_chk@plt+0x12c8>
   122a0:	mov	r0, r6
   122a4:	ldrb	r1, [r0, #-1]!
   122a8:	cmp	r1, #47	; 0x2f
   122ac:	bne	12294 <__mempcpy_chk@plt+0x1240>
   122b0:	b	1231c <__mempcpy_chk@plt+0x12c8>
   122b4:	bl	10f88 <__errno_location@plt>
   122b8:	ldr	r0, [r0]
   122bc:	cmp	r0, #22
   122c0:	bne	122dc <__mempcpy_chk@plt+0x1288>
   122c4:	mov	r9, r8
   122c8:	b	1231c <__mempcpy_chk@plt+0x12c8>
   122cc:	mov	r0, r4
   122d0:	bl	1256c <__mempcpy_chk@plt+0x1518>
   122d4:	cmp	r0, #0
   122d8:	bne	122c4 <__mempcpy_chk@plt+0x1270>
   122dc:	mov	r5, #1
   122e0:	ldr	r0, [sp, #28]
   122e4:	cmp	r0, #1
   122e8:	bne	1239c <__mempcpy_chk@plt+0x1348>
   122ec:	bl	10f88 <__errno_location@plt>
   122f0:	ldr	r0, [r0]
   122f4:	cmp	r0, #2
   122f8:	bne	1239c <__mempcpy_chk@plt+0x1348>
   122fc:	mov	r0, r8
   12300:	movw	r1, #29943	; 0x74f7
   12304:	movt	r1, #1
   12308:	bl	11048 <strspn@plt>
   1230c:	ldrb	r0, [r8, r0]
   12310:	cmp	r0, #0
   12314:	mov	r9, r8
   12318:	bne	1239c <__mempcpy_chk@plt+0x1348>
   1231c:	ldrb	r0, [r9]
   12320:	cmp	r0, #0
   12324:	bne	11f28 <__mempcpy_chk@plt+0xed4>
   12328:	add	r0, r4, #1
   1232c:	mov	r5, #0
   12330:	cmp	r6, r0
   12334:	bls	1239c <__mempcpy_chk@plt+0x1348>
   12338:	mov	r0, r6
   1233c:	ldrb	r1, [r0, #-1]!
   12340:	cmp	r1, #47	; 0x2f
   12344:	moveq	r6, r0
   12348:	b	1239c <__mempcpy_chk@plt+0x1348>
   1234c:	bl	10f88 <__errno_location@plt>
   12350:	mov	r6, r0
   12354:	ldr	r0, [r6]
   12358:	cmp	r0, #34	; 0x22
   1235c:	bne	1238c <__mempcpy_chk@plt+0x1338>
   12360:	mov	r0, sl
   12364:	bl	1540c <__mempcpy_chk@plt+0x43b8>
   12368:	cmp	r0, #0
   1236c:	beq	12418 <__mempcpy_chk@plt+0x13c4>
   12370:	ldr	r4, [sl]
   12374:	ldr	r1, [sl, #4]
   12378:	mov	r0, r4
   1237c:	bl	10f58 <getcwd@plt>
   12380:	cmp	r0, #0
   12384:	beq	12354 <__mempcpy_chk@plt+0x1300>
   12388:	b	11ef0 <__mempcpy_chk@plt+0xe9c>
   1238c:	cmp	r0, #12
   12390:	beq	12418 <__mempcpy_chk@plt+0x13c4>
   12394:	mov	r5, #1
   12398:	mov	r6, r4
   1239c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   123a0:	cmp	r0, #0
   123a4:	beq	123ac <__mempcpy_chk@plt+0x1358>
   123a8:	bl	12f08 <__mempcpy_chk@plt+0x1eb4>
   123ac:	sub	r0, fp, #1072	; 0x430
   123b0:	bl	12594 <__mempcpy_chk@plt+0x1540>
   123b4:	add	r0, sp, #136	; 0x88
   123b8:	bl	12594 <__mempcpy_chk@plt+0x1540>
   123bc:	cmp	r5, #0
   123c0:	beq	123d4 <__mempcpy_chk@plt+0x1380>
   123c4:	mov	r0, sl
   123c8:	bl	12594 <__mempcpy_chk@plt+0x1540>
   123cc:	mov	r6, #0
   123d0:	b	123f4 <__mempcpy_chk@plt+0x13a0>
   123d4:	mov	r0, #0
   123d8:	strb	r0, [r6], -r4
   123dc:	add	r1, r6, #1
   123e0:	mov	r0, sl
   123e4:	bl	153a0 <__mempcpy_chk@plt+0x434c>
   123e8:	mov	r6, r0
   123ec:	cmp	r0, #0
   123f0:	beq	12418 <__mempcpy_chk@plt+0x13c4>
   123f4:	mov	r0, r6
   123f8:	sub	sp, fp, #28
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12400:	bl	10f88 <__errno_location@plt>
   12404:	mov	r1, #40	; 0x28
   12408:	str	r1, [r0]
   1240c:	mov	r5, #1
   12410:	ldr	sl, [sp, #20]
   12414:	b	1239c <__mempcpy_chk@plt+0x1348>
   12418:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   1241c:	sub	r1, r0, #1
   12420:	ands	r0, r0, r1
   12424:	movwne	r0, #1
   12428:	bx	lr
   1242c:	mov	r1, #1024	; 0x400
   12430:	add	r2, r0, #8
   12434:	str	r2, [r0]
   12438:	str	r1, [r0, #4]
   1243c:	bx	lr
   12440:	push	{r4, r5, r6, sl, fp, lr}
   12444:	add	fp, sp, #16
   12448:	sub	sp, sp, #8
   1244c:	mov	r4, r2
   12450:	mov	r5, r1
   12454:	mov	r6, r0
   12458:	ldr	r0, [r0]
   1245c:	cmp	r0, #0
   12460:	bne	12498 <__mempcpy_chk@plt+0x1444>
   12464:	movw	r0, #14196	; 0x3774
   12468:	movt	r0, #1
   1246c:	str	r0, [sp]
   12470:	movw	r2, #14036	; 0x36d4
   12474:	movt	r2, #1
   12478:	movw	r3, #14092	; 0x370c
   1247c:	movt	r3, #1
   12480:	mov	r0, #7
   12484:	mov	r1, #0
   12488:	bl	12c2c <__mempcpy_chk@plt+0x1bd8>
   1248c:	str	r0, [r6]
   12490:	cmp	r0, #0
   12494:	beq	124d4 <__mempcpy_chk@plt+0x1480>
   12498:	ldr	r0, [r6]
   1249c:	mov	r1, r5
   124a0:	mov	r2, r4
   124a4:	bl	1272c <__mempcpy_chk@plt+0x16d8>
   124a8:	mov	r1, r0
   124ac:	mov	r0, #1
   124b0:	cmp	r1, #0
   124b4:	bne	124cc <__mempcpy_chk@plt+0x1478>
   124b8:	ldr	r0, [r6]
   124bc:	mov	r1, r5
   124c0:	mov	r2, r4
   124c4:	bl	126b0 <__mempcpy_chk@plt+0x165c>
   124c8:	mov	r0, #0
   124cc:	sub	sp, fp, #16
   124d0:	pop	{r4, r5, r6, sl, fp, pc}
   124d4:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   124d8:	mov	r1, r0
   124dc:	ldrb	r2, [r0]
   124e0:	mov	r0, #0
   124e4:	cmp	r2, #47	; 0x2f
   124e8:	bxne	lr
   124ec:	mov	r0, #1
   124f0:	mov	ip, #0
   124f4:	mov	r3, r1
   124f8:	ldrb	r2, [r1, #1]!
   124fc:	cmp	r2, #47	; 0x2f
   12500:	beq	124f4 <__mempcpy_chk@plt+0x14a0>
   12504:	cmp	r2, #46	; 0x2e
   12508:	bne	12548 <__mempcpy_chk@plt+0x14f4>
   1250c:	add	r1, r3, #2
   12510:	ldrb	r2, [r1]
   12514:	cmp	r2, #47	; 0x2f
   12518:	beq	124f4 <__mempcpy_chk@plt+0x14a0>
   1251c:	cmp	r2, #0
   12520:	moveq	ip, #1
   12524:	moveq	r0, ip
   12528:	bxeq	lr
   1252c:	cmp	r2, #46	; 0x2e
   12530:	bne	12558 <__mempcpy_chk@plt+0x1504>
   12534:	ldrb	r1, [r3, #3]
   12538:	cmp	r1, #0
   1253c:	cmpne	r1, #47	; 0x2f
   12540:	bne	12558 <__mempcpy_chk@plt+0x1504>
   12544:	bx	lr
   12548:	cmp	r2, #0
   1254c:	movne	r0, ip
   12550:	bxne	lr
   12554:	bx	lr
   12558:	mov	r0, #0
   1255c:	bx	lr
   12560:	mov	r2, #47	; 0x2f
   12564:	strh	r2, [r1]
   12568:	b	1256c <__mempcpy_chk@plt+0x1518>
   1256c:	push	{fp, lr}
   12570:	mov	fp, sp
   12574:	mov	r1, r0
   12578:	mvn	r0, #99	; 0x63
   1257c:	mov	r2, #0
   12580:	mov	r3, #512	; 0x200
   12584:	bl	10e44 <faccessat@plt>
   12588:	clz	r0, r0
   1258c:	lsr	r0, r0, #5
   12590:	pop	{fp, pc}
   12594:	mov	r1, r0
   12598:	ldr	r0, [r1], #8
   1259c:	cmp	r0, r1
   125a0:	bxeq	lr
   125a4:	b	1277c <__mempcpy_chk@plt+0x1728>
   125a8:	movw	r1, #33116	; 0x815c
   125ac:	movt	r1, #2
   125b0:	str	r0, [r1]
   125b4:	bx	lr
   125b8:	movw	r1, #33120	; 0x8160
   125bc:	movt	r1, #2
   125c0:	strb	r0, [r1]
   125c4:	bx	lr
   125c8:	push	{r4, r5, r6, sl, fp, lr}
   125cc:	add	fp, sp, #16
   125d0:	sub	sp, sp, #8
   125d4:	movw	r0, #33092	; 0x8144
   125d8:	movt	r0, #2
   125dc:	ldr	r0, [r0]
   125e0:	bl	16314 <__mempcpy_chk@plt+0x52c0>
   125e4:	cmp	r0, #0
   125e8:	beq	12610 <__mempcpy_chk@plt+0x15bc>
   125ec:	movw	r0, #33120	; 0x8160
   125f0:	movt	r0, #2
   125f4:	ldrb	r0, [r0]
   125f8:	cmp	r0, #0
   125fc:	beq	12630 <__mempcpy_chk@plt+0x15dc>
   12600:	bl	10f88 <__errno_location@plt>
   12604:	ldr	r0, [r0]
   12608:	cmp	r0, #32
   1260c:	bne	12630 <__mempcpy_chk@plt+0x15dc>
   12610:	movw	r0, #33088	; 0x8140
   12614:	movt	r0, #2
   12618:	ldr	r0, [r0]
   1261c:	bl	16314 <__mempcpy_chk@plt+0x52c0>
   12620:	cmp	r0, #0
   12624:	subeq	sp, fp, #16
   12628:	popeq	{r4, r5, r6, sl, fp, pc}
   1262c:	b	126a0 <__mempcpy_chk@plt+0x164c>
   12630:	movw	r1, #28812	; 0x708c
   12634:	movt	r1, #1
   12638:	mov	r0, #0
   1263c:	mov	r2, #5
   12640:	bl	10e74 <dcgettext@plt>
   12644:	mov	r4, r0
   12648:	movw	r0, #33116	; 0x815c
   1264c:	movt	r0, #2
   12650:	ldr	r6, [r0]
   12654:	bl	10f88 <__errno_location@plt>
   12658:	ldr	r5, [r0]
   1265c:	cmp	r6, #0
   12660:	bne	1267c <__mempcpy_chk@plt+0x1628>
   12664:	movw	r2, #28828	; 0x709c
   12668:	movt	r2, #1
   1266c:	mov	r0, #0
   12670:	mov	r1, r5
   12674:	mov	r3, r4
   12678:	b	1269c <__mempcpy_chk@plt+0x1648>
   1267c:	mov	r0, r6
   12680:	bl	14e38 <__mempcpy_chk@plt+0x3de4>
   12684:	mov	r3, r0
   12688:	str	r4, [sp]
   1268c:	movw	r2, #28824	; 0x7098
   12690:	movt	r2, #1
   12694:	mov	r0, #0
   12698:	mov	r1, r5
   1269c:	bl	10f04 <error@plt>
   126a0:	movw	r0, #33004	; 0x80ec
   126a4:	movt	r0, #2
   126a8:	ldr	r0, [r0]
   126ac:	bl	10e50 <_exit@plt>
   126b0:	push	{r4, r5, r6, r7, fp, lr}
   126b4:	add	fp, sp, #16
   126b8:	cmp	r0, #0
   126bc:	beq	12724 <__mempcpy_chk@plt+0x16d0>
   126c0:	mov	r6, r2
   126c4:	mov	r7, r1
   126c8:	mov	r5, r0
   126cc:	mov	r0, #24
   126d0:	bl	15a04 <__mempcpy_chk@plt+0x49b0>
   126d4:	mov	r4, r0
   126d8:	mov	r0, r7
   126dc:	bl	15d6c <__mempcpy_chk@plt+0x4d18>
   126e0:	str	r0, [r4]
   126e4:	ldrd	r0, [r6, #96]	; 0x60
   126e8:	str	r0, [r4, #8]
   126ec:	str	r1, [r4, #12]
   126f0:	ldrd	r0, [r6]
   126f4:	str	r1, [r4, #20]
   126f8:	str	r0, [r4, #16]
   126fc:	mov	r0, r5
   12700:	mov	r1, r4
   12704:	bl	134c8 <__mempcpy_chk@plt+0x2474>
   12708:	cmp	r0, #0
   1270c:	beq	12728 <__mempcpy_chk@plt+0x16d4>
   12710:	cmp	r0, r4
   12714:	beq	12724 <__mempcpy_chk@plt+0x16d0>
   12718:	mov	r0, r4
   1271c:	pop	{r4, r5, r6, r7, fp, lr}
   12720:	b	13774 <__mempcpy_chk@plt+0x2720>
   12724:	pop	{r4, r5, r6, r7, fp, pc}
   12728:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   1272c:	cmp	r0, #0
   12730:	moveq	r0, #0
   12734:	bxeq	lr
   12738:	push	{r4, r5, fp, lr}
   1273c:	add	fp, sp, #8
   12740:	sub	sp, sp, #24
   12744:	mov	ip, sp
   12748:	add	r3, ip, #8
   1274c:	add	ip, ip, #16
   12750:	str	r1, [sp]
   12754:	ldrd	r4, [r2, #96]	; 0x60
   12758:	strd	r4, [r3]
   1275c:	ldrd	r2, [r2]
   12760:	strd	r2, [ip]
   12764:	mov	r1, sp
   12768:	bl	12980 <__mempcpy_chk@plt+0x192c>
   1276c:	cmp	r0, #0
   12770:	movwne	r0, #1
   12774:	sub	sp, fp, #8
   12778:	pop	{r4, r5, fp, pc}
   1277c:	push	{r4, r5, r6, sl, fp, lr}
   12780:	add	fp, sp, #16
   12784:	mov	r4, r0
   12788:	bl	10f88 <__errno_location@plt>
   1278c:	mov	r5, r0
   12790:	ldr	r6, [r0]
   12794:	mov	r0, r4
   12798:	bl	10e38 <free@plt>
   1279c:	str	r6, [r5]
   127a0:	pop	{r4, r5, r6, sl, fp, pc}
   127a4:	andeq	r0, r0, r0
   127a8:	ldr	r0, [r0, #8]
   127ac:	bx	lr
   127b0:	ldr	r0, [r0, #12]
   127b4:	bx	lr
   127b8:	ldr	r0, [r0, #16]
   127bc:	bx	lr
   127c0:	mov	r2, r0
   127c4:	ldm	r0, {r1, r3}
   127c8:	mov	r0, #0
   127cc:	cmp	r1, r3
   127d0:	bxcs	lr
   127d4:	ldr	ip, [r2, #4]
   127d8:	mov	r0, #0
   127dc:	b	127ec <__mempcpy_chk@plt+0x1798>
   127e0:	add	r1, r1, #8
   127e4:	cmp	r1, ip
   127e8:	bcs	1281c <__mempcpy_chk@plt+0x17c8>
   127ec:	ldr	r2, [r1]
   127f0:	cmp	r2, #0
   127f4:	beq	127e0 <__mempcpy_chk@plt+0x178c>
   127f8:	mov	r3, #0
   127fc:	mov	r2, r1
   12800:	add	r3, r3, #1
   12804:	ldr	r2, [r2, #4]
   12808:	cmp	r2, #0
   1280c:	bne	12800 <__mempcpy_chk@plt+0x17ac>
   12810:	cmp	r3, r0
   12814:	movhi	r0, r3
   12818:	b	127e0 <__mempcpy_chk@plt+0x178c>
   1281c:	bx	lr
   12820:	push	{fp, lr}
   12824:	mov	fp, sp
   12828:	ldr	r3, [r0]
   1282c:	ldr	r1, [r0, #4]
   12830:	mov	lr, #0
   12834:	cmp	r3, r1
   12838:	mov	r1, #0
   1283c:	bcs	12884 <__mempcpy_chk@plt+0x1830>
   12840:	ldr	ip, [r0, #4]
   12844:	mov	r1, #0
   12848:	mov	lr, #0
   1284c:	b	1285c <__mempcpy_chk@plt+0x1808>
   12850:	add	r3, r3, #8
   12854:	cmp	r3, ip
   12858:	bcs	12884 <__mempcpy_chk@plt+0x1830>
   1285c:	ldr	r2, [r3]
   12860:	cmp	r2, #0
   12864:	beq	12850 <__mempcpy_chk@plt+0x17fc>
   12868:	mov	r2, r3
   1286c:	add	r1, r1, #1
   12870:	ldr	r2, [r2, #4]
   12874:	cmp	r2, #0
   12878:	bne	1286c <__mempcpy_chk@plt+0x1818>
   1287c:	add	lr, lr, #1
   12880:	b	12850 <__mempcpy_chk@plt+0x17fc>
   12884:	ldr	r2, [r0, #12]
   12888:	cmp	lr, r2
   1288c:	bne	128a4 <__mempcpy_chk@plt+0x1850>
   12890:	ldr	r2, [r0, #16]
   12894:	mov	r0, #1
   12898:	cmp	r1, r2
   1289c:	movne	r0, #0
   128a0:	pop	{fp, pc}
   128a4:	mov	r0, #0
   128a8:	pop	{fp, pc}
   128ac:	nop	{0}
   128b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   128b4:	add	fp, sp, #24
   128b8:	sub	sp, sp, #8
   128bc:	mov	r4, r1
   128c0:	mov	r5, r0
   128c4:	bl	127b8 <__mempcpy_chk@plt+0x1764>
   128c8:	mov	r8, r0
   128cc:	mov	r0, r5
   128d0:	bl	127a8 <__mempcpy_chk@plt+0x1754>
   128d4:	mov	r7, r0
   128d8:	mov	r0, r5
   128dc:	bl	127b0 <__mempcpy_chk@plt+0x175c>
   128e0:	mov	r6, r0
   128e4:	mov	r0, r5
   128e8:	bl	127c0 <__mempcpy_chk@plt+0x176c>
   128ec:	mov	r5, r0
   128f0:	movw	r2, #28831	; 0x709f
   128f4:	movt	r2, #1
   128f8:	mov	r0, r4
   128fc:	mov	r1, #1
   12900:	mov	r3, r8
   12904:	bl	10fc4 <__fprintf_chk@plt>
   12908:	movw	r2, #28855	; 0x70b7
   1290c:	movt	r2, #1
   12910:	mov	r0, r4
   12914:	mov	r1, #1
   12918:	mov	r3, r7
   1291c:	bl	10fc4 <__fprintf_chk@plt>
   12920:	vldr	d16, [pc, #80]	; 12978 <__mempcpy_chk@plt+0x1924>
   12924:	vmov	s0, r6
   12928:	vmov	s2, r7
   1292c:	vcvt.f64.u32	d17, s0
   12930:	vcvt.f64.u32	d18, s2
   12934:	vmul.f64	d16, d17, d16
   12938:	vdiv.f64	d16, d16, d18
   1293c:	vstr	d16, [sp]
   12940:	movw	r2, #28879	; 0x70cf
   12944:	movt	r2, #1
   12948:	mov	r0, r4
   1294c:	mov	r1, #1
   12950:	mov	r3, r6
   12954:	bl	10fc4 <__fprintf_chk@plt>
   12958:	movw	r2, #28912	; 0x70f0
   1295c:	movt	r2, #1
   12960:	mov	r0, r4
   12964:	mov	r1, #1
   12968:	mov	r3, r5
   1296c:	sub	sp, fp, #24
   12970:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12974:	b	10fc4 <__fprintf_chk@plt>
   12978:	andeq	r0, r0, r0
   1297c:	subsmi	r0, r9, r0
   12980:	push	{r4, r5, r6, r7, fp, lr}
   12984:	add	fp, sp, #16
   12988:	mov	r5, r1
   1298c:	mov	r6, r0
   12990:	bl	129f0 <__mempcpy_chk@plt+0x199c>
   12994:	mov	r7, r0
   12998:	ldr	r0, [r0]
   1299c:	mov	r4, #0
   129a0:	cmp	r0, #0
   129a4:	beq	129dc <__mempcpy_chk@plt+0x1988>
   129a8:	cmp	r7, #0
   129ac:	beq	129dc <__mempcpy_chk@plt+0x1988>
   129b0:	ldr	r1, [r7]
   129b4:	cmp	r1, r5
   129b8:	beq	129e4 <__mempcpy_chk@plt+0x1990>
   129bc:	ldr	r2, [r6, #28]
   129c0:	mov	r0, r5
   129c4:	blx	r2
   129c8:	cmp	r0, #0
   129cc:	bne	129e4 <__mempcpy_chk@plt+0x1990>
   129d0:	ldr	r7, [r7, #4]
   129d4:	cmp	r7, #0
   129d8:	bne	129b0 <__mempcpy_chk@plt+0x195c>
   129dc:	mov	r0, r4
   129e0:	pop	{r4, r5, r6, r7, fp, pc}
   129e4:	ldr	r4, [r7]
   129e8:	mov	r0, r4
   129ec:	pop	{r4, r5, r6, r7, fp, pc}
   129f0:	push	{r4, sl, fp, lr}
   129f4:	add	fp, sp, #8
   129f8:	mov	r2, r1
   129fc:	mov	r4, r0
   12a00:	ldr	r1, [r0, #8]
   12a04:	ldr	r3, [r0, #24]
   12a08:	mov	r0, r2
   12a0c:	blx	r3
   12a10:	ldr	r1, [r4, #8]
   12a14:	cmp	r0, r1
   12a18:	ldrcc	r1, [r4]
   12a1c:	addcc	r0, r1, r0, lsl #3
   12a20:	popcc	{r4, sl, fp, pc}
   12a24:	bl	11030 <abort@plt>
   12a28:	push	{fp, lr}
   12a2c:	mov	fp, sp
   12a30:	ldr	r1, [r0, #16]
   12a34:	cmp	r1, #0
   12a38:	beq	12a60 <__mempcpy_chk@plt+0x1a0c>
   12a3c:	ldr	r2, [r0]
   12a40:	ldr	r1, [r0, #4]
   12a44:	cmp	r2, r1
   12a48:	bcs	12a6c <__mempcpy_chk@plt+0x1a18>
   12a4c:	ldr	r1, [r2], #8
   12a50:	cmp	r1, #0
   12a54:	beq	12a40 <__mempcpy_chk@plt+0x19ec>
   12a58:	mov	r0, r1
   12a5c:	pop	{fp, pc}
   12a60:	mov	r1, #0
   12a64:	mov	r0, r1
   12a68:	pop	{fp, pc}
   12a6c:	bl	11030 <abort@plt>
   12a70:	push	{r4, r5, fp, lr}
   12a74:	add	fp, sp, #8
   12a78:	mov	r5, r1
   12a7c:	mov	r4, r0
   12a80:	bl	129f0 <__mempcpy_chk@plt+0x199c>
   12a84:	mov	r1, r0
   12a88:	b	12a98 <__mempcpy_chk@plt+0x1a44>
   12a8c:	ldr	r1, [r1, #4]
   12a90:	cmp	r1, #0
   12a94:	beq	12ab8 <__mempcpy_chk@plt+0x1a64>
   12a98:	ldr	r2, [r1]
   12a9c:	cmp	r2, r5
   12aa0:	bne	12a8c <__mempcpy_chk@plt+0x1a38>
   12aa4:	ldr	r2, [r1, #4]
   12aa8:	cmp	r2, #0
   12aac:	beq	12a8c <__mempcpy_chk@plt+0x1a38>
   12ab0:	ldr	r0, [r2]
   12ab4:	pop	{r4, r5, fp, pc}
   12ab8:	add	r1, r0, #8
   12abc:	ldr	r2, [r4, #4]
   12ac0:	cmp	r1, r2
   12ac4:	bcs	12ad8 <__mempcpy_chk@plt+0x1a84>
   12ac8:	ldr	r0, [r1], #8
   12acc:	cmp	r0, #0
   12ad0:	beq	12ac0 <__mempcpy_chk@plt+0x1a6c>
   12ad4:	pop	{r4, r5, fp, pc}
   12ad8:	mov	r0, #0
   12adc:	pop	{r4, r5, fp, pc}
   12ae0:	push	{r4, sl, fp, lr}
   12ae4:	add	fp, sp, #8
   12ae8:	mov	ip, r0
   12aec:	ldr	lr, [r0]
   12af0:	ldr	r3, [r0, #4]
   12af4:	mov	r0, #0
   12af8:	cmp	lr, r3
   12afc:	popcs	{r4, sl, fp, pc}
   12b00:	mov	r0, #0
   12b04:	b	12b18 <__mempcpy_chk@plt+0x1ac4>
   12b08:	ldr	r3, [ip, #4]
   12b0c:	add	lr, lr, #8
   12b10:	cmp	lr, r3
   12b14:	bcs	12b50 <__mempcpy_chk@plt+0x1afc>
   12b18:	ldr	r3, [lr]
   12b1c:	cmp	r3, #0
   12b20:	cmpne	lr, #0
   12b24:	beq	12b08 <__mempcpy_chk@plt+0x1ab4>
   12b28:	mov	r3, lr
   12b2c:	cmp	r0, r2
   12b30:	bcs	12b50 <__mempcpy_chk@plt+0x1afc>
   12b34:	ldr	r4, [r3]
   12b38:	str	r4, [r1, r0, lsl #2]
   12b3c:	add	r0, r0, #1
   12b40:	ldr	r3, [r3, #4]
   12b44:	cmp	r3, #0
   12b48:	bne	12b2c <__mempcpy_chk@plt+0x1ad8>
   12b4c:	b	12b08 <__mempcpy_chk@plt+0x1ab4>
   12b50:	pop	{r4, sl, fp, pc}
   12b54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b58:	add	fp, sp, #24
   12b5c:	mov	r8, r0
   12b60:	ldr	r9, [r0]
   12b64:	ldr	r0, [r0, #4]
   12b68:	mov	r6, #0
   12b6c:	cmp	r9, r0
   12b70:	bcs	12bd0 <__mempcpy_chk@plt+0x1b7c>
   12b74:	mov	r4, r2
   12b78:	mov	r5, r1
   12b7c:	mov	r6, #0
   12b80:	b	12b94 <__mempcpy_chk@plt+0x1b40>
   12b84:	ldr	r0, [r8, #4]
   12b88:	add	r9, r9, #8
   12b8c:	cmp	r9, r0
   12b90:	bcs	12bd0 <__mempcpy_chk@plt+0x1b7c>
   12b94:	ldr	r0, [r9]
   12b98:	cmp	r0, #0
   12b9c:	cmpne	r9, #0
   12ba0:	beq	12b84 <__mempcpy_chk@plt+0x1b30>
   12ba4:	mov	r7, r9
   12ba8:	ldr	r0, [r7]
   12bac:	mov	r1, r4
   12bb0:	blx	r5
   12bb4:	cmp	r0, #0
   12bb8:	beq	12bd0 <__mempcpy_chk@plt+0x1b7c>
   12bbc:	add	r6, r6, #1
   12bc0:	ldr	r7, [r7, #4]
   12bc4:	cmp	r7, #0
   12bc8:	bne	12ba8 <__mempcpy_chk@plt+0x1b54>
   12bcc:	b	12b84 <__mempcpy_chk@plt+0x1b30>
   12bd0:	mov	r0, r6
   12bd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12bd8:	ldrb	r2, [r0]
   12bdc:	cmp	r2, #0
   12be0:	moveq	r0, #0
   12be4:	bxeq	lr
   12be8:	add	r3, r0, #1
   12bec:	mov	r0, #0
   12bf0:	rsb	r0, r0, r0, lsl #5
   12bf4:	uxtab	r0, r0, r2
   12bf8:	udiv	r2, r0, r1
   12bfc:	mls	r0, r2, r1, r0
   12c00:	ldrb	r2, [r3], #1
   12c04:	cmp	r2, #0
   12c08:	bne	12bf0 <__mempcpy_chk@plt+0x1b9c>
   12c0c:	bx	lr
   12c10:	movw	r1, #28936	; 0x7108
   12c14:	movt	r1, #1
   12c18:	vld1.32	{d16-d17}, [r1]!
   12c1c:	vst1.32	{d16-d17}, [r0]!
   12c20:	ldr	r1, [r1]
   12c24:	str	r1, [r0]
   12c28:	bx	lr
   12c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c30:	add	fp, sp, #28
   12c34:	sub	sp, sp, #4
   12c38:	mov	r7, r1
   12c3c:	mov	r8, r0
   12c40:	movw	sl, #11564	; 0x2d2c
   12c44:	movt	sl, #1
   12c48:	cmp	r3, #0
   12c4c:	movne	sl, r3
   12c50:	movw	r5, #11532	; 0x2d0c
   12c54:	movt	r5, #1
   12c58:	cmp	r2, #0
   12c5c:	movne	r5, r2
   12c60:	mov	r0, #40	; 0x28
   12c64:	bl	15e24 <__mempcpy_chk@plt+0x4dd0>
   12c68:	mov	r9, #0
   12c6c:	cmp	r0, #0
   12c70:	beq	12d00 <__mempcpy_chk@plt+0x1cac>
   12c74:	mov	r4, r0
   12c78:	movw	r6, #28936	; 0x7108
   12c7c:	movt	r6, #1
   12c80:	cmp	r7, #0
   12c84:	movne	r6, r7
   12c88:	str	r6, [r0, #20]
   12c8c:	bl	12d3c <__mempcpy_chk@plt+0x1ce8>
   12c90:	cmp	r0, #0
   12c94:	beq	12cf8 <__mempcpy_chk@plt+0x1ca4>
   12c98:	mov	r0, r8
   12c9c:	mov	r1, r6
   12ca0:	bl	12de8 <__mempcpy_chk@plt+0x1d94>
   12ca4:	str	r0, [r4, #8]
   12ca8:	cmp	r0, #0
   12cac:	beq	12cf8 <__mempcpy_chk@plt+0x1ca4>
   12cb0:	mov	r1, #8
   12cb4:	bl	15dd0 <__mempcpy_chk@plt+0x4d7c>
   12cb8:	str	r0, [r4]
   12cbc:	cmp	r0, #0
   12cc0:	beq	12cf8 <__mempcpy_chk@plt+0x1ca4>
   12cc4:	ldr	r1, [fp, #8]
   12cc8:	mov	r2, #0
   12ccc:	str	r5, [r4, #24]
   12cd0:	str	sl, [r4, #28]
   12cd4:	str	r1, [r4, #32]
   12cd8:	str	r2, [r4, #36]	; 0x24
   12cdc:	str	r2, [r4, #12]
   12ce0:	str	r2, [r4, #16]
   12ce4:	ldr	r1, [r4, #8]
   12ce8:	add	r0, r0, r1, lsl #3
   12cec:	str	r0, [r4, #4]
   12cf0:	mov	r9, r4
   12cf4:	b	12d00 <__mempcpy_chk@plt+0x1cac>
   12cf8:	mov	r0, r4
   12cfc:	bl	1277c <__mempcpy_chk@plt+0x1728>
   12d00:	mov	r0, r9
   12d04:	sub	sp, fp, #28
   12d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d0c:	push	{r4, sl, fp, lr}
   12d10:	add	fp, sp, #8
   12d14:	mov	r4, r1
   12d18:	mov	r1, #3
   12d1c:	bl	15f78 <__mempcpy_chk@plt+0x4f24>
   12d20:	udiv	r1, r0, r4
   12d24:	mls	r0, r1, r4, r0
   12d28:	pop	{r4, sl, fp, pc}
   12d2c:	sub	r0, r0, r1
   12d30:	clz	r0, r0
   12d34:	lsr	r0, r0, #5
   12d38:	bx	lr
   12d3c:	mov	r1, r0
   12d40:	ldr	r3, [r0, #20]
   12d44:	mov	r0, #1
   12d48:	movw	r2, #28936	; 0x7108
   12d4c:	movt	r2, #1
   12d50:	cmp	r3, r2
   12d54:	beq	12dd8 <__mempcpy_chk@plt+0x1d84>
   12d58:	vldr	s2, [pc, #124]	; 12ddc <__mempcpy_chk@plt+0x1d88>
   12d5c:	vldr	s0, [r3, #8]
   12d60:	vcmpe.f32	s0, s2
   12d64:	vmrs	APSR_nzcv, fpscr
   12d68:	ble	12dd0 <__mempcpy_chk@plt+0x1d7c>
   12d6c:	vldr	s4, [pc, #108]	; 12de0 <__mempcpy_chk@plt+0x1d8c>
   12d70:	vcmpe.f32	s0, s4
   12d74:	vmrs	APSR_nzcv, fpscr
   12d78:	bpl	12dd0 <__mempcpy_chk@plt+0x1d7c>
   12d7c:	vldr	s4, [pc, #96]	; 12de4 <__mempcpy_chk@plt+0x1d90>
   12d80:	vldr	s6, [r3, #12]
   12d84:	vcmpe.f32	s6, s4
   12d88:	vmrs	APSR_nzcv, fpscr
   12d8c:	ble	12dd0 <__mempcpy_chk@plt+0x1d7c>
   12d90:	vldr	s4, [r3]
   12d94:	vcmpe.f32	s4, #0.0
   12d98:	vmrs	APSR_nzcv, fpscr
   12d9c:	blt	12dd0 <__mempcpy_chk@plt+0x1d7c>
   12da0:	vadd.f32	s2, s4, s2
   12da4:	vcmpe.f32	s2, s0
   12da8:	vmrs	APSR_nzcv, fpscr
   12dac:	bpl	12dd0 <__mempcpy_chk@plt+0x1d7c>
   12db0:	vldr	s0, [r3, #4]
   12db4:	vmov.f32	s4, #112	; 0x3f800000  1.0
   12db8:	vcmpe.f32	s0, s4
   12dbc:	vmrs	APSR_nzcv, fpscr
   12dc0:	bhi	12dd0 <__mempcpy_chk@plt+0x1d7c>
   12dc4:	vcmpe.f32	s2, s0
   12dc8:	vmrs	APSR_nzcv, fpscr
   12dcc:	bxmi	lr
   12dd0:	str	r2, [r1, #20]
   12dd4:	mov	r0, #0
   12dd8:	bx	lr
   12ddc:	stclcc	12, cr12, [ip, #820]	; 0x334
   12de0:	svccc	0x00666666
   12de4:	svccc	0x008ccccd
   12de8:	push	{fp, lr}
   12dec:	mov	fp, sp
   12df0:	ldrb	r2, [r1, #16]
   12df4:	cmp	r2, #0
   12df8:	bne	12e28 <__mempcpy_chk@plt+0x1dd4>
   12dfc:	vldr	s0, [r1, #8]
   12e00:	vmov	s2, r0
   12e04:	vcvt.f32.u32	s2, s2
   12e08:	vdiv.f32	s2, s2, s0
   12e0c:	vcvt.u32.f32	s0, s2
   12e10:	vldr	s4, [pc, #32]	; 12e38 <__mempcpy_chk@plt+0x1de4>
   12e14:	mov	r0, #0
   12e18:	vcmpe.f32	s2, s4
   12e1c:	vmrs	APSR_nzcv, fpscr
   12e20:	popge	{fp, pc}
   12e24:	vmov	r0, s0
   12e28:	bl	1361c <__mempcpy_chk@plt+0x25c8>
   12e2c:	cmn	r0, #-536870911	; 0xe0000001
   12e30:	movwhi	r0, #0
   12e34:	pop	{fp, pc}
   12e38:	svcmi	0x00800000
   12e3c:	push	{r4, r5, r6, r7, fp, lr}
   12e40:	add	fp, sp, #16
   12e44:	mov	r4, r0
   12e48:	ldr	r5, [r0]
   12e4c:	ldr	r0, [r0, #4]
   12e50:	cmp	r5, r0
   12e54:	bcs	12ef8 <__mempcpy_chk@plt+0x1ea4>
   12e58:	mov	r6, #0
   12e5c:	b	12e78 <__mempcpy_chk@plt+0x1e24>
   12e60:	str	r6, [r5]
   12e64:	str	r6, [r5, #4]
   12e68:	ldr	r0, [r4, #4]
   12e6c:	add	r5, r5, #8
   12e70:	cmp	r5, r0
   12e74:	bcs	12ef8 <__mempcpy_chk@plt+0x1ea4>
   12e78:	ldr	r0, [r5]
   12e7c:	cmp	r0, #0
   12e80:	beq	12e68 <__mempcpy_chk@plt+0x1e14>
   12e84:	ldr	r7, [r5, #4]
   12e88:	ldr	r1, [r4, #32]
   12e8c:	cmp	r1, #0
   12e90:	mov	r0, r1
   12e94:	movwne	r0, #1
   12e98:	cmp	r7, #0
   12e9c:	bne	12ee4 <__mempcpy_chk@plt+0x1e90>
   12ea0:	cmp	r0, #0
   12ea4:	beq	12e60 <__mempcpy_chk@plt+0x1e0c>
   12ea8:	ldr	r0, [r5]
   12eac:	blx	r1
   12eb0:	b	12e60 <__mempcpy_chk@plt+0x1e0c>
   12eb4:	str	r6, [r7]
   12eb8:	ldr	r2, [r7, #4]
   12ebc:	ldr	r0, [r4, #36]	; 0x24
   12ec0:	str	r0, [r7, #4]
   12ec4:	str	r7, [r4, #36]	; 0x24
   12ec8:	ldr	r1, [r4, #32]
   12ecc:	cmp	r1, #0
   12ed0:	mov	r0, r1
   12ed4:	movwne	r0, #1
   12ed8:	cmp	r2, #0
   12edc:	mov	r7, r2
   12ee0:	beq	12ea0 <__mempcpy_chk@plt+0x1e4c>
   12ee4:	tst	r0, #1
   12ee8:	beq	12eb4 <__mempcpy_chk@plt+0x1e60>
   12eec:	ldr	r0, [r7]
   12ef0:	blx	r1
   12ef4:	b	12eb4 <__mempcpy_chk@plt+0x1e60>
   12ef8:	mov	r0, #0
   12efc:	str	r0, [r4, #12]
   12f00:	str	r0, [r4, #16]
   12f04:	pop	{r4, r5, r6, r7, fp, pc}
   12f08:	push	{r4, r5, r6, sl, fp, lr}
   12f0c:	add	fp, sp, #16
   12f10:	mov	r4, r0
   12f14:	ldr	r0, [r0, #32]
   12f18:	cmp	r0, #0
   12f1c:	beq	12f80 <__mempcpy_chk@plt+0x1f2c>
   12f20:	ldr	r0, [r4, #16]
   12f24:	cmp	r0, #0
   12f28:	beq	12f80 <__mempcpy_chk@plt+0x1f2c>
   12f2c:	ldr	r5, [r4]
   12f30:	ldr	r0, [r4, #4]
   12f34:	cmp	r5, r0
   12f38:	bcc	12f50 <__mempcpy_chk@plt+0x1efc>
   12f3c:	b	12f80 <__mempcpy_chk@plt+0x1f2c>
   12f40:	ldr	r0, [r4, #4]
   12f44:	add	r5, r5, #8
   12f48:	cmp	r5, r0
   12f4c:	bcs	12f80 <__mempcpy_chk@plt+0x1f2c>
   12f50:	ldr	r0, [r5]
   12f54:	cmp	r0, #0
   12f58:	cmpne	r5, #0
   12f5c:	beq	12f40 <__mempcpy_chk@plt+0x1eec>
   12f60:	mov	r6, r5
   12f64:	ldr	r0, [r6]
   12f68:	ldr	r1, [r4, #32]
   12f6c:	blx	r1
   12f70:	ldr	r6, [r6, #4]
   12f74:	cmp	r6, #0
   12f78:	bne	12f64 <__mempcpy_chk@plt+0x1f10>
   12f7c:	b	12f40 <__mempcpy_chk@plt+0x1eec>
   12f80:	ldr	r5, [r4]
   12f84:	ldr	r0, [r4, #4]
   12f88:	cmp	r5, r0
   12f8c:	bcc	12fa4 <__mempcpy_chk@plt+0x1f50>
   12f90:	b	12fc8 <__mempcpy_chk@plt+0x1f74>
   12f94:	ldr	r0, [r4, #4]
   12f98:	add	r5, r5, #8
   12f9c:	cmp	r5, r0
   12fa0:	bcs	12fc8 <__mempcpy_chk@plt+0x1f74>
   12fa4:	ldr	r0, [r5, #4]
   12fa8:	cmp	r0, #0
   12fac:	beq	12f94 <__mempcpy_chk@plt+0x1f40>
   12fb0:	ldr	r6, [r0, #4]
   12fb4:	bl	1277c <__mempcpy_chk@plt+0x1728>
   12fb8:	cmp	r6, #0
   12fbc:	mov	r0, r6
   12fc0:	bne	12fb0 <__mempcpy_chk@plt+0x1f5c>
   12fc4:	b	12f94 <__mempcpy_chk@plt+0x1f40>
   12fc8:	ldr	r0, [r4, #36]	; 0x24
   12fcc:	cmp	r0, #0
   12fd0:	beq	12fe8 <__mempcpy_chk@plt+0x1f94>
   12fd4:	ldr	r5, [r0, #4]
   12fd8:	bl	1277c <__mempcpy_chk@plt+0x1728>
   12fdc:	cmp	r5, #0
   12fe0:	mov	r0, r5
   12fe4:	bne	12fd4 <__mempcpy_chk@plt+0x1f80>
   12fe8:	ldr	r0, [r4]
   12fec:	bl	1277c <__mempcpy_chk@plt+0x1728>
   12ff0:	mov	r0, r4
   12ff4:	pop	{r4, r5, r6, sl, fp, lr}
   12ff8:	b	1277c <__mempcpy_chk@plt+0x1728>
   12ffc:	push	{r4, r5, r6, sl, fp, lr}
   13000:	add	fp, sp, #16
   13004:	sub	sp, sp, #40	; 0x28
   13008:	mov	r2, r1
   1300c:	mov	r4, r0
   13010:	ldr	r1, [r0, #20]
   13014:	mov	r0, r2
   13018:	bl	12de8 <__mempcpy_chk@plt+0x1d94>
   1301c:	mov	r5, #0
   13020:	cmp	r0, #0
   13024:	beq	13100 <__mempcpy_chk@plt+0x20ac>
   13028:	mov	r6, r0
   1302c:	ldr	r0, [r4, #8]
   13030:	cmp	r6, r0
   13034:	bne	13040 <__mempcpy_chk@plt+0x1fec>
   13038:	mov	r5, #1
   1303c:	b	13100 <__mempcpy_chk@plt+0x20ac>
   13040:	mov	r0, r6
   13044:	mov	r1, #8
   13048:	bl	15dd0 <__mempcpy_chk@plt+0x4d7c>
   1304c:	str	r0, [sp]
   13050:	cmp	r0, #0
   13054:	beq	13100 <__mempcpy_chk@plt+0x20ac>
   13058:	mov	r0, #0
   1305c:	str	r0, [sp, #16]
   13060:	str	r0, [sp, #12]
   13064:	str	r6, [sp, #8]
   13068:	ldr	r0, [sp]
   1306c:	add	r0, r0, r6, lsl #3
   13070:	str	r0, [sp, #4]
   13074:	add	r6, r4, #20
   13078:	ldm	r6, {r0, r1, r2, r3, r6}
   1307c:	add	ip, sp, #20
   13080:	stm	ip, {r0, r1, r2, r3, r6}
   13084:	mov	r0, sp
   13088:	mov	r1, r4
   1308c:	mov	r2, #0
   13090:	bl	13110 <__mempcpy_chk@plt+0x20bc>
   13094:	cmp	r0, #0
   13098:	beq	130bc <__mempcpy_chk@plt+0x2068>
   1309c:	ldr	r0, [r4]
   130a0:	bl	1277c <__mempcpy_chk@plt+0x1728>
   130a4:	ldm	sp, {r0, r1, r2, r3}
   130a8:	stm	r4, {r0, r1, r2, r3}
   130ac:	ldr	r0, [sp, #36]	; 0x24
   130b0:	str	r0, [r4, #36]	; 0x24
   130b4:	mov	r5, #1
   130b8:	b	13100 <__mempcpy_chk@plt+0x20ac>
   130bc:	ldr	r0, [sp, #36]	; 0x24
   130c0:	str	r0, [r4, #36]	; 0x24
   130c4:	mov	r1, sp
   130c8:	mov	r0, r4
   130cc:	mov	r2, #1
   130d0:	bl	13110 <__mempcpy_chk@plt+0x20bc>
   130d4:	cmp	r0, #0
   130d8:	beq	1310c <__mempcpy_chk@plt+0x20b8>
   130dc:	mov	r1, sp
   130e0:	mov	r5, #0
   130e4:	mov	r0, r4
   130e8:	mov	r2, #0
   130ec:	bl	13110 <__mempcpy_chk@plt+0x20bc>
   130f0:	cmp	r0, #0
   130f4:	beq	1310c <__mempcpy_chk@plt+0x20b8>
   130f8:	ldr	r0, [sp]
   130fc:	bl	1277c <__mempcpy_chk@plt+0x1728>
   13100:	mov	r0, r5
   13104:	sub	sp, fp, #16
   13108:	pop	{r4, r5, r6, sl, fp, pc}
   1310c:	bl	11030 <abort@plt>
   13110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13114:	add	fp, sp, #28
   13118:	sub	sp, sp, #4
   1311c:	mov	r7, r0
   13120:	ldr	r6, [r1]
   13124:	ldr	r0, [r1, #4]
   13128:	cmp	r6, r0
   1312c:	bcs	13238 <__mempcpy_chk@plt+0x21e4>
   13130:	mov	r9, r2
   13134:	mov	sl, r1
   13138:	b	13170 <__mempcpy_chk@plt+0x211c>
   1313c:	str	r4, [r5]
   13140:	ldr	r0, [r7, #12]
   13144:	add	r0, r0, #1
   13148:	str	r0, [r7, #12]
   1314c:	mov	r0, #0
   13150:	str	r0, [r6]
   13154:	ldr	r0, [sl, #12]
   13158:	sub	r0, r0, #1
   1315c:	str	r0, [sl, #12]
   13160:	add	r6, r6, #8
   13164:	ldr	r0, [sl, #4]
   13168:	cmp	r6, r0
   1316c:	bcs	13238 <__mempcpy_chk@plt+0x21e4>
   13170:	ldr	r0, [r6]
   13174:	cmp	r0, #0
   13178:	beq	13160 <__mempcpy_chk@plt+0x210c>
   1317c:	ldr	r4, [r6, #4]
   13180:	cmp	r4, #0
   13184:	bne	131b4 <__mempcpy_chk@plt+0x2160>
   13188:	b	131e4 <__mempcpy_chk@plt+0x2190>
   1318c:	str	r5, [r0]
   13190:	ldr	r0, [r7, #12]
   13194:	add	r0, r0, #1
   13198:	str	r0, [r7, #12]
   1319c:	mov	r0, r7
   131a0:	mov	r1, r4
   131a4:	bl	136bc <__mempcpy_chk@plt+0x2668>
   131a8:	cmp	r8, #0
   131ac:	mov	r4, r8
   131b0:	beq	131e4 <__mempcpy_chk@plt+0x2190>
   131b4:	ldr	r5, [r4]
   131b8:	mov	r0, r7
   131bc:	mov	r1, r5
   131c0:	bl	129f0 <__mempcpy_chk@plt+0x199c>
   131c4:	ldr	r1, [r0]
   131c8:	ldr	r8, [r4, #4]
   131cc:	cmp	r1, #0
   131d0:	beq	1318c <__mempcpy_chk@plt+0x2138>
   131d4:	ldr	r1, [r0, #4]
   131d8:	str	r1, [r4, #4]
   131dc:	str	r4, [r0, #4]
   131e0:	b	131a8 <__mempcpy_chk@plt+0x2154>
   131e4:	mov	r0, #0
   131e8:	str	r0, [r6, #4]
   131ec:	cmp	r9, #0
   131f0:	bne	13160 <__mempcpy_chk@plt+0x210c>
   131f4:	ldr	r4, [r6]
   131f8:	mov	r0, r7
   131fc:	mov	r1, r4
   13200:	bl	129f0 <__mempcpy_chk@plt+0x199c>
   13204:	mov	r5, r0
   13208:	ldr	r0, [r0]
   1320c:	cmp	r0, #0
   13210:	beq	1313c <__mempcpy_chk@plt+0x20e8>
   13214:	mov	r0, r7
   13218:	bl	134a8 <__mempcpy_chk@plt+0x2454>
   1321c:	cmp	r0, #0
   13220:	beq	13244 <__mempcpy_chk@plt+0x21f0>
   13224:	str	r4, [r0]
   13228:	ldr	r1, [r5, #4]
   1322c:	str	r1, [r0, #4]
   13230:	str	r0, [r5, #4]
   13234:	b	1314c <__mempcpy_chk@plt+0x20f8>
   13238:	mov	r0, #1
   1323c:	sub	sp, fp, #28
   13240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13244:	mov	r0, #0
   13248:	sub	sp, fp, #28
   1324c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13250:	push	{r4, r5, r6, r7, fp, lr}
   13254:	add	fp, sp, #16
   13258:	sub	sp, sp, #8
   1325c:	cmp	r1, #0
   13260:	beq	133c0 <__mempcpy_chk@plt+0x236c>
   13264:	mov	r7, r2
   13268:	mov	r5, r1
   1326c:	mov	r4, r0
   13270:	add	r2, sp, #4
   13274:	mov	r6, #0
   13278:	mov	r3, #0
   1327c:	bl	133c8 <__mempcpy_chk@plt+0x2374>
   13280:	cmp	r0, #0
   13284:	beq	13294 <__mempcpy_chk@plt+0x2240>
   13288:	cmp	r7, #0
   1328c:	strne	r0, [r7]
   13290:	b	133b4 <__mempcpy_chk@plt+0x2360>
   13294:	vldr	s0, [r4, #8]
   13298:	vldr	s2, [r4, #12]
   1329c:	ldr	r0, [r4, #20]
   132a0:	vldr	s4, [r0, #8]
   132a4:	vcvt.f32.u32	s0, s0
   132a8:	vcvt.f32.u32	s2, s2
   132ac:	vmul.f32	s0, s4, s0
   132b0:	vcmpe.f32	s0, s2
   132b4:	vmrs	APSR_nzcv, fpscr
   132b8:	bpl	1334c <__mempcpy_chk@plt+0x22f8>
   132bc:	mov	r0, r4
   132c0:	bl	12d3c <__mempcpy_chk@plt+0x1ce8>
   132c4:	vldr	s0, [r4, #8]
   132c8:	vldr	s4, [r4, #12]
   132cc:	ldr	r0, [r4, #20]
   132d0:	vcvt.f32.u32	s2, s0
   132d4:	vldr	s0, [r0, #8]
   132d8:	vcvt.f32.u32	s4, s4
   132dc:	vmul.f32	s6, s0, s2
   132e0:	vcmpe.f32	s6, s4
   132e4:	vmrs	APSR_nzcv, fpscr
   132e8:	bpl	1334c <__mempcpy_chk@plt+0x22f8>
   132ec:	vldr	s4, [r0, #12]
   132f0:	vmul.f32	s2, s4, s2
   132f4:	ldrb	r0, [r0, #16]
   132f8:	vmul.f32	s0, s0, s2
   132fc:	mvn	r6, #0
   13300:	vldr	s4, [pc, #188]	; 133c4 <__mempcpy_chk@plt+0x2370>
   13304:	cmp	r0, #0
   13308:	vseleq.f32	s0, s0, s2
   1330c:	vcmpe.f32	s0, s4
   13310:	vmrs	APSR_nzcv, fpscr
   13314:	bge	133b4 <__mempcpy_chk@plt+0x2360>
   13318:	vcvt.u32.f32	s0, s0
   1331c:	vmov	r1, s0
   13320:	mov	r0, r4
   13324:	bl	12ffc <__mempcpy_chk@plt+0x1fa8>
   13328:	cmp	r0, #0
   1332c:	beq	133b4 <__mempcpy_chk@plt+0x2360>
   13330:	add	r2, sp, #4
   13334:	mov	r0, r4
   13338:	mov	r1, r5
   1333c:	mov	r3, #0
   13340:	bl	133c8 <__mempcpy_chk@plt+0x2374>
   13344:	cmp	r0, #0
   13348:	bne	133c0 <__mempcpy_chk@plt+0x236c>
   1334c:	ldr	r6, [sp, #4]
   13350:	ldr	r0, [r6]
   13354:	cmp	r0, #0
   13358:	beq	1338c <__mempcpy_chk@plt+0x2338>
   1335c:	mov	r0, r4
   13360:	bl	134a8 <__mempcpy_chk@plt+0x2454>
   13364:	cmp	r0, #0
   13368:	beq	133b0 <__mempcpy_chk@plt+0x235c>
   1336c:	str	r5, [r0]
   13370:	ldr	r1, [r6, #4]
   13374:	str	r1, [r0, #4]
   13378:	str	r0, [r6, #4]
   1337c:	ldr	r0, [r4, #16]
   13380:	add	r0, r0, #1
   13384:	str	r0, [r4, #16]
   13388:	b	133a8 <__mempcpy_chk@plt+0x2354>
   1338c:	str	r5, [r6]
   13390:	ldr	r0, [r4, #12]
   13394:	ldr	r1, [r4, #16]
   13398:	add	r1, r1, #1
   1339c:	add	r0, r0, #1
   133a0:	str	r0, [r4, #12]
   133a4:	str	r1, [r4, #16]
   133a8:	mov	r6, #1
   133ac:	b	133b4 <__mempcpy_chk@plt+0x2360>
   133b0:	mvn	r6, #0
   133b4:	mov	r0, r6
   133b8:	sub	sp, fp, #16
   133bc:	pop	{r4, r5, r6, r7, fp, pc}
   133c0:	bl	11030 <abort@plt>
   133c4:	svcmi	0x00800000
   133c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133cc:	add	fp, sp, #24
   133d0:	mov	r8, r3
   133d4:	mov	r4, r2
   133d8:	mov	r7, r1
   133dc:	mov	r5, r0
   133e0:	bl	129f0 <__mempcpy_chk@plt+0x199c>
   133e4:	str	r0, [r4]
   133e8:	ldr	r1, [r0]
   133ec:	mov	r4, #0
   133f0:	cmp	r1, #0
   133f4:	beq	134a0 <__mempcpy_chk@plt+0x244c>
   133f8:	mov	r6, r0
   133fc:	cmp	r1, r7
   13400:	beq	13418 <__mempcpy_chk@plt+0x23c4>
   13404:	ldr	r2, [r5, #28]
   13408:	mov	r0, r7
   1340c:	blx	r2
   13410:	cmp	r0, #0
   13414:	beq	1343c <__mempcpy_chk@plt+0x23e8>
   13418:	ldr	r4, [r6]
   1341c:	cmp	r8, #0
   13420:	beq	134a0 <__mempcpy_chk@plt+0x244c>
   13424:	ldr	r1, [r6, #4]
   13428:	cmp	r1, #0
   1342c:	beq	13498 <__mempcpy_chk@plt+0x2444>
   13430:	ldm	r1, {r0, r2}
   13434:	stm	r6, {r0, r2}
   13438:	b	13488 <__mempcpy_chk@plt+0x2434>
   1343c:	ldr	r0, [r6, #4]!
   13440:	cmp	r0, #0
   13444:	beq	134a0 <__mempcpy_chk@plt+0x244c>
   13448:	ldr	r1, [r0]
   1344c:	cmp	r1, r7
   13450:	beq	13470 <__mempcpy_chk@plt+0x241c>
   13454:	ldr	r2, [r5, #28]
   13458:	mov	r0, r7
   1345c:	blx	r2
   13460:	cmp	r0, #0
   13464:	bne	13470 <__mempcpy_chk@plt+0x241c>
   13468:	ldr	r6, [r6]
   1346c:	b	1343c <__mempcpy_chk@plt+0x23e8>
   13470:	ldr	r1, [r6]
   13474:	ldr	r4, [r1]
   13478:	cmp	r8, #0
   1347c:	beq	134a0 <__mempcpy_chk@plt+0x244c>
   13480:	ldr	r0, [r1, #4]
   13484:	str	r0, [r6]
   13488:	mov	r0, r5
   1348c:	bl	136bc <__mempcpy_chk@plt+0x2668>
   13490:	mov	r0, r4
   13494:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13498:	mov	r0, #0
   1349c:	str	r0, [r6]
   134a0:	mov	r0, r4
   134a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134a8:	mov	r1, r0
   134ac:	ldr	r0, [r0, #36]	; 0x24
   134b0:	cmp	r0, #0
   134b4:	ldrne	r2, [r0, #4]
   134b8:	strne	r2, [r1, #36]	; 0x24
   134bc:	bxne	lr
   134c0:	mov	r0, #8
   134c4:	b	15e24 <__mempcpy_chk@plt+0x4dd0>
   134c8:	push	{r4, sl, fp, lr}
   134cc:	add	fp, sp, #8
   134d0:	sub	sp, sp, #8
   134d4:	mov	r4, r1
   134d8:	add	r2, sp, #4
   134dc:	bl	13250 <__mempcpy_chk@plt+0x21fc>
   134e0:	cmn	r0, #1
   134e4:	beq	134f8 <__mempcpy_chk@plt+0x24a4>
   134e8:	ldr	r1, [sp, #4]
   134ec:	cmp	r0, #0
   134f0:	moveq	r4, r1
   134f4:	b	134fc <__mempcpy_chk@plt+0x24a8>
   134f8:	mov	r4, #0
   134fc:	mov	r0, r4
   13500:	sub	sp, fp, #8
   13504:	pop	{r4, sl, fp, pc}
   13508:	push	{r4, r5, r6, sl, fp, lr}
   1350c:	add	fp, sp, #16
   13510:	sub	sp, sp, #8
   13514:	mov	r4, r0
   13518:	add	r2, sp, #4
   1351c:	mov	r3, #1
   13520:	bl	133c8 <__mempcpy_chk@plt+0x2374>
   13524:	mov	r5, r0
   13528:	cmp	r0, #0
   1352c:	beq	1360c <__mempcpy_chk@plt+0x25b8>
   13530:	ldr	r0, [r4, #16]
   13534:	sub	r0, r0, #1
   13538:	str	r0, [r4, #16]
   1353c:	ldr	r0, [sp, #4]
   13540:	ldr	r0, [r0]
   13544:	cmp	r0, #0
   13548:	bne	1360c <__mempcpy_chk@plt+0x25b8>
   1354c:	ldr	r0, [r4, #12]
   13550:	sub	r0, r0, #1
   13554:	vldr	s0, [r4, #8]
   13558:	str	r0, [r4, #12]
   1355c:	ldr	r1, [r4, #20]
   13560:	vldr	s2, [r1]
   13564:	vcvt.f32.u32	s0, s0
   13568:	vmov	s4, r0
   1356c:	vcvt.f32.u32	s4, s4
   13570:	vmul.f32	s0, s2, s0
   13574:	vcmpe.f32	s0, s4
   13578:	vmrs	APSR_nzcv, fpscr
   1357c:	ble	1360c <__mempcpy_chk@plt+0x25b8>
   13580:	mov	r0, r4
   13584:	bl	12d3c <__mempcpy_chk@plt+0x1ce8>
   13588:	vldr	s0, [r4, #8]
   1358c:	vldr	s2, [r4, #12]
   13590:	ldr	r0, [r4, #20]
   13594:	vcvt.f32.u32	s0, s0
   13598:	vldr	s4, [r0]
   1359c:	vcvt.f32.u32	s2, s2
   135a0:	vmul.f32	s4, s4, s0
   135a4:	vcmpe.f32	s4, s2
   135a8:	vmrs	APSR_nzcv, fpscr
   135ac:	ble	1360c <__mempcpy_chk@plt+0x25b8>
   135b0:	vldr	s2, [r0, #4]
   135b4:	ldrb	r1, [r0, #16]
   135b8:	vmul.f32	s0, s2, s0
   135bc:	cmp	r1, #0
   135c0:	bne	135cc <__mempcpy_chk@plt+0x2578>
   135c4:	vldr	s2, [r0, #8]
   135c8:	vmul.f32	s0, s0, s2
   135cc:	vcvt.u32.f32	s0, s0
   135d0:	vmov	r1, s0
   135d4:	mov	r0, r4
   135d8:	bl	12ffc <__mempcpy_chk@plt+0x1fa8>
   135dc:	cmp	r0, #0
   135e0:	bne	1360c <__mempcpy_chk@plt+0x25b8>
   135e4:	ldr	r0, [r4, #36]	; 0x24
   135e8:	cmp	r0, #0
   135ec:	beq	13604 <__mempcpy_chk@plt+0x25b0>
   135f0:	ldr	r6, [r0, #4]
   135f4:	bl	1277c <__mempcpy_chk@plt+0x1728>
   135f8:	cmp	r6, #0
   135fc:	mov	r0, r6
   13600:	bne	135f0 <__mempcpy_chk@plt+0x259c>
   13604:	mov	r0, #0
   13608:	str	r0, [r4, #36]	; 0x24
   1360c:	mov	r0, r5
   13610:	sub	sp, fp, #16
   13614:	pop	{r4, r5, r6, sl, fp, pc}
   13618:	b	13508 <__mempcpy_chk@plt+0x24b4>
   1361c:	push	{r4, r5, fp, lr}
   13620:	add	fp, sp, #8
   13624:	cmp	r0, #10
   13628:	movls	r0, #10
   1362c:	orr	r5, r0, #1
   13630:	mvn	r4, #0
   13634:	cmn	r5, #1
   13638:	beq	13658 <__mempcpy_chk@plt+0x2604>
   1363c:	mov	r0, r5
   13640:	bl	1366c <__mempcpy_chk@plt+0x2618>
   13644:	cmp	r0, #0
   13648:	bne	13660 <__mempcpy_chk@plt+0x260c>
   1364c:	add	r5, r5, #2
   13650:	cmn	r5, #1
   13654:	bne	1363c <__mempcpy_chk@plt+0x25e8>
   13658:	mov	r0, r4
   1365c:	pop	{r4, r5, fp, pc}
   13660:	mov	r4, r5
   13664:	mov	r0, r4
   13668:	pop	{r4, r5, fp, pc}
   1366c:	mov	ip, #3
   13670:	cmp	r0, #10
   13674:	bcc	136a8 <__mempcpy_chk@plt+0x2654>
   13678:	mov	ip, #3
   1367c:	mov	r2, #9
   13680:	mov	r3, #16
   13684:	udiv	r1, r0, ip
   13688:	mls	r1, r1, ip, r0
   1368c:	cmp	r1, #0
   13690:	beq	136a8 <__mempcpy_chk@plt+0x2654>
   13694:	add	r2, r3, r2
   13698:	add	r3, r3, #8
   1369c:	add	ip, ip, #2
   136a0:	cmp	r2, r0
   136a4:	bcc	13684 <__mempcpy_chk@plt+0x2630>
   136a8:	udiv	r1, r0, ip
   136ac:	mls	r0, r1, ip, r0
   136b0:	cmp	r0, #0
   136b4:	movwne	r0, #1
   136b8:	bx	lr
   136bc:	mov	r2, #0
   136c0:	str	r2, [r1]
   136c4:	ldr	r2, [r0, #36]	; 0x24
   136c8:	str	r2, [r1, #4]
   136cc:	str	r1, [r0, #36]	; 0x24
   136d0:	bx	lr
   136d4:	push	{r4, r5, fp, lr}
   136d8:	add	fp, sp, #8
   136dc:	mov	r4, r1
   136e0:	mov	r5, r0
   136e4:	ldr	r0, [r0]
   136e8:	bl	16548 <__mempcpy_chk@plt+0x54f4>
   136ec:	ldrd	r2, [r5, #8]
   136f0:	eor	r0, r2, r0
   136f4:	mov	r1, r3
   136f8:	mov	r2, r4
   136fc:	mov	r3, #0
   13700:	bl	167bc <__mempcpy_chk@plt+0x5768>
   13704:	mov	r0, r2
   13708:	pop	{r4, r5, fp, pc}
   1370c:	push	{r4, r5, fp, lr}
   13710:	add	fp, sp, #8
   13714:	mov	lr, r1
   13718:	ldr	ip, [lr, #8]!
   1371c:	mov	r2, r0
   13720:	ldr	r3, [r2, #8]!
   13724:	eor	ip, r3, ip
   13728:	ldr	r3, [lr, #4]
   1372c:	ldr	r4, [r2, #4]
   13730:	eor	r3, r4, r3
   13734:	orrs	r3, ip, r3
   13738:	mov	ip, #0
   1373c:	bne	1376c <__mempcpy_chk@plt+0x2718>
   13740:	ldrd	r4, [lr, #8]
   13744:	ldrd	r2, [r2, #8]
   13748:	eor	r3, r3, r5
   1374c:	eor	r2, r2, r4
   13750:	orrs	r2, r2, r3
   13754:	bne	1376c <__mempcpy_chk@plt+0x2718>
   13758:	ldr	r1, [r1]
   1375c:	ldr	r0, [r0]
   13760:	bl	10e14 <strcmp@plt>
   13764:	clz	r0, r0
   13768:	lsr	ip, r0, #5
   1376c:	mov	r0, ip
   13770:	pop	{r4, r5, fp, pc}
   13774:	push	{r4, sl, fp, lr}
   13778:	add	fp, sp, #8
   1377c:	mov	r4, r0
   13780:	ldr	r0, [r0]
   13784:	bl	1277c <__mempcpy_chk@plt+0x1728>
   13788:	mov	r0, r4
   1378c:	pop	{r4, sl, fp, lr}
   13790:	b	1277c <__mempcpy_chk@plt+0x1728>
   13794:	push	{r4, r5, fp, lr}
   13798:	add	fp, sp, #8
   1379c:	cmp	r0, #0
   137a0:	beq	13834 <__mempcpy_chk@plt+0x27e0>
   137a4:	mov	r4, r0
   137a8:	mov	r1, #47	; 0x2f
   137ac:	bl	10ff4 <strrchr@plt>
   137b0:	cmp	r0, #0
   137b4:	mov	r5, r4
   137b8:	addne	r5, r0, #1
   137bc:	sub	r0, r5, r4
   137c0:	cmp	r0, #7
   137c4:	blt	13818 <__mempcpy_chk@plt+0x27c4>
   137c8:	sub	r0, r5, #7
   137cc:	movw	r1, #29012	; 0x7154
   137d0:	movt	r1, #1
   137d4:	mov	r2, #7
   137d8:	bl	11024 <strncmp@plt>
   137dc:	cmp	r0, #0
   137e0:	bne	13818 <__mempcpy_chk@plt+0x27c4>
   137e4:	movw	r1, #29020	; 0x715c
   137e8:	movt	r1, #1
   137ec:	mov	r0, r5
   137f0:	mov	r2, #3
   137f4:	bl	11024 <strncmp@plt>
   137f8:	cmp	r0, #0
   137fc:	beq	13808 <__mempcpy_chk@plt+0x27b4>
   13800:	mov	r4, r5
   13804:	b	13818 <__mempcpy_chk@plt+0x27c4>
   13808:	add	r4, r5, #3
   1380c:	movw	r0, #33072	; 0x8130
   13810:	movt	r0, #2
   13814:	str	r4, [r0]
   13818:	movw	r0, #33076	; 0x8134
   1381c:	movt	r0, #2
   13820:	str	r4, [r0]
   13824:	movw	r0, #33124	; 0x8164
   13828:	movt	r0, #2
   1382c:	str	r4, [r0]
   13830:	pop	{r4, r5, fp, pc}
   13834:	movw	r0, #33088	; 0x8140
   13838:	movt	r0, #2
   1383c:	ldr	r3, [r0]
   13840:	movw	r0, #28956	; 0x711c
   13844:	movt	r0, #1
   13848:	mov	r1, #55	; 0x37
   1384c:	mov	r2, #1
   13850:	bl	10ebc <fwrite@plt>
   13854:	bl	11030 <abort@plt>
   13858:	push	{r4, r5, r6, sl, fp, lr}
   1385c:	add	fp, sp, #16
   13860:	mov	r4, r0
   13864:	movw	r0, #33128	; 0x8168
   13868:	movt	r0, #2
   1386c:	cmp	r4, #0
   13870:	moveq	r4, r0
   13874:	bl	10f88 <__errno_location@plt>
   13878:	mov	r5, r0
   1387c:	ldr	r6, [r0]
   13880:	mov	r0, r4
   13884:	mov	r1, #48	; 0x30
   13888:	bl	15cec <__mempcpy_chk@plt+0x4c98>
   1388c:	str	r6, [r5]
   13890:	pop	{r4, r5, r6, sl, fp, pc}
   13894:	movw	r1, #33128	; 0x8168
   13898:	movt	r1, #2
   1389c:	cmp	r0, #0
   138a0:	movne	r1, r0
   138a4:	ldr	r0, [r1]
   138a8:	bx	lr
   138ac:	movw	r2, #33128	; 0x8168
   138b0:	movt	r2, #2
   138b4:	cmp	r0, #0
   138b8:	movne	r2, r0
   138bc:	str	r1, [r2]
   138c0:	bx	lr
   138c4:	movw	r3, #33128	; 0x8168
   138c8:	movt	r3, #2
   138cc:	cmp	r0, #0
   138d0:	movne	r3, r0
   138d4:	ubfx	r0, r1, #5, #3
   138d8:	add	ip, r3, r0, lsl #2
   138dc:	ldr	r3, [ip, #8]
   138e0:	and	r1, r1, #31
   138e4:	mov	r0, #1
   138e8:	and	r0, r0, r3, lsr r1
   138ec:	and	r2, r2, #1
   138f0:	eor	r2, r0, r2
   138f4:	eor	r1, r3, r2, lsl r1
   138f8:	str	r1, [ip, #8]
   138fc:	bx	lr
   13900:	movw	r2, #33128	; 0x8168
   13904:	movt	r2, #2
   13908:	cmp	r0, #0
   1390c:	movne	r2, r0
   13910:	ldr	r0, [r2, #4]
   13914:	str	r1, [r2, #4]
   13918:	bx	lr
   1391c:	push	{fp, lr}
   13920:	mov	fp, sp
   13924:	movw	r3, #33128	; 0x8168
   13928:	movt	r3, #2
   1392c:	cmp	r0, #0
   13930:	movne	r3, r0
   13934:	mov	r0, #10
   13938:	str	r0, [r3]
   1393c:	cmp	r1, #0
   13940:	cmpne	r2, #0
   13944:	bne	1394c <__mempcpy_chk@plt+0x28f8>
   13948:	bl	11030 <abort@plt>
   1394c:	str	r1, [r3, #40]	; 0x28
   13950:	str	r2, [r3, #44]	; 0x2c
   13954:	pop	{fp, pc}
   13958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1395c:	add	fp, sp, #28
   13960:	sub	sp, sp, #20
   13964:	mov	r8, r3
   13968:	mov	r9, r2
   1396c:	mov	sl, r1
   13970:	mov	r7, r0
   13974:	ldr	r0, [fp, #8]
   13978:	movw	r5, #33128	; 0x8168
   1397c:	movt	r5, #2
   13980:	cmp	r0, #0
   13984:	movne	r5, r0
   13988:	bl	10f88 <__errno_location@plt>
   1398c:	mov	r4, r0
   13990:	ldm	r5, {r0, r1}
   13994:	ldr	r2, [r5, #40]	; 0x28
   13998:	ldr	r3, [r5, #44]	; 0x2c
   1399c:	ldr	r6, [r4]
   139a0:	add	r5, r5, #8
   139a4:	stm	sp, {r0, r1, r5}
   139a8:	str	r2, [sp, #12]
   139ac:	str	r3, [sp, #16]
   139b0:	mov	r0, r7
   139b4:	mov	r1, sl
   139b8:	mov	r2, r9
   139bc:	mov	r3, r8
   139c0:	bl	139d0 <__mempcpy_chk@plt+0x297c>
   139c4:	str	r6, [r4]
   139c8:	sub	sp, fp, #28
   139cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d4:	add	fp, sp, #28
   139d8:	sub	sp, sp, #156	; 0x9c
   139dc:	mov	r9, r3
   139e0:	mov	r7, r1
   139e4:	mov	r6, r0
   139e8:	str	r2, [fp, #-80]	; 0xffffffb0
   139ec:	add	r0, r2, #1
   139f0:	str	r0, [sp, #76]	; 0x4c
   139f4:	ldr	r0, [fp, #12]
   139f8:	and	r1, r0, #1
   139fc:	str	r1, [sp, #40]	; 0x28
   13a00:	and	r1, r0, #4
   13a04:	str	r1, [sp, #36]	; 0x24
   13a08:	ubfx	r4, r0, #1, #1
   13a0c:	bl	10ed4 <__ctype_get_mb_cur_max@plt>
   13a10:	str	r0, [sp, #44]	; 0x2c
   13a14:	ldr	r0, [fp, #24]
   13a18:	str	r0, [sp, #88]	; 0x58
   13a1c:	ldr	r0, [fp, #20]
   13a20:	str	r0, [sp, #80]	; 0x50
   13a24:	ldr	r1, [fp, #8]
   13a28:	mov	r0, #0
   13a2c:	str	r0, [sp, #84]	; 0x54
   13a30:	mov	r0, #0
   13a34:	str	r0, [fp, #-84]	; 0xffffffac
   13a38:	mov	r0, #0
   13a3c:	str	r0, [fp, #-72]	; 0xffffffb8
   13a40:	mov	r0, #0
   13a44:	mov	r2, #0
   13a48:	str	r2, [fp, #-56]	; 0xffffffc8
   13a4c:	mov	r2, #0
   13a50:	str	r2, [sp, #64]	; 0x40
   13a54:	mov	r2, #1
   13a58:	str	r2, [fp, #-48]	; 0xffffffd0
   13a5c:	cmp	r1, #10
   13a60:	bhi	1498c <__mempcpy_chk@plt+0x3938>
   13a64:	mov	sl, r7
   13a68:	mov	r7, r1
   13a6c:	add	r1, pc, #24
   13a70:	mov	r8, #0
   13a74:	mov	r2, #1
   13a78:	mov	r3, #0
   13a7c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a80:	mov	lr, r9
   13a84:	mov	r5, r6
   13a88:	ldr	pc, [r1, r7, lsl #2]
   13a8c:	andeq	r3, r1, r0, ror #22
   13a90:	andeq	r3, r1, r0, lsr #23
   13a94:	andeq	r3, r1, r0, ror fp
   13a98:	andeq	r3, r1, r8, asr fp
   13a9c:	muleq	r1, r4, fp
   13aa0:	strdeq	r3, [r1], -r4
   13aa4:	andeq	r3, r1, r0, lsl #23
   13aa8:	andeq	r3, r1, r0, asr ip
   13aac:			; <UNDEFINED> instruction: 0x00013ab8
   13ab0:			; <UNDEFINED> instruction: 0x00013ab8
   13ab4:	andeq	r3, r1, r4, ror #21
   13ab8:	movw	r0, #29104	; 0x71b0
   13abc:	movt	r0, #1
   13ac0:	mov	r1, r7
   13ac4:	bl	14f94 <__mempcpy_chk@plt+0x3f40>
   13ac8:	str	r0, [sp, #80]	; 0x50
   13acc:	movw	r0, #29106	; 0x71b2
   13ad0:	movt	r0, #1
   13ad4:	mov	r1, r7
   13ad8:	bl	14f94 <__mempcpy_chk@plt+0x3f40>
   13adc:	mov	r5, r6
   13ae0:	str	r0, [sp, #88]	; 0x58
   13ae4:	mov	r8, #0
   13ae8:	tst	r4, #1
   13aec:	str	r7, [fp, #-64]	; 0xffffffc0
   13af0:	bne	13b28 <__mempcpy_chk@plt+0x2ad4>
   13af4:	ldr	r0, [sp, #80]	; 0x50
   13af8:	ldrb	r0, [r0]
   13afc:	cmp	r0, #0
   13b00:	beq	13b28 <__mempcpy_chk@plt+0x2ad4>
   13b04:	ldr	r1, [sp, #80]	; 0x50
   13b08:	add	r1, r1, #1
   13b0c:	mov	r8, #0
   13b10:	cmp	r8, sl
   13b14:	strbcc	r0, [r5, r8]
   13b18:	ldrb	r0, [r1, r8]
   13b1c:	add	r8, r8, #1
   13b20:	cmp	r0, #0
   13b24:	bne	13b10 <__mempcpy_chk@plt+0x2abc>
   13b28:	ldr	r7, [sp, #88]	; 0x58
   13b2c:	mov	r0, r7
   13b30:	bl	10f7c <strlen@plt>
   13b34:	mov	r5, r6
   13b38:	str	r0, [fp, #-72]	; 0xffffffb8
   13b3c:	str	r7, [fp, #-84]	; 0xffffffac
   13b40:	mov	r2, #1
   13b44:	mov	r3, r4
   13b48:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13b4c:	mov	lr, r9
   13b50:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b54:	b	13c50 <__mempcpy_chk@plt+0x2bfc>
   13b58:	mov	r0, #1
   13b5c:	b	13ba0 <__mempcpy_chk@plt+0x2b4c>
   13b60:	mov	r7, #0
   13b64:	mov	r8, #0
   13b68:	mov	r2, r0
   13b6c:	b	13c4c <__mempcpy_chk@plt+0x2bf8>
   13b70:	tst	r4, #1
   13b74:	bne	13ba0 <__mempcpy_chk@plt+0x2b4c>
   13b78:	mov	r2, r0
   13b7c:	b	13bc8 <__mempcpy_chk@plt+0x2b74>
   13b80:	mov	r0, #1
   13b84:	str	r0, [fp, #-72]	; 0xffffffb8
   13b88:	mov	r8, #0
   13b8c:	mov	r7, #5
   13b90:	b	13c0c <__mempcpy_chk@plt+0x2bb8>
   13b94:	mov	r2, #1
   13b98:	tst	r4, #1
   13b9c:	beq	13bc8 <__mempcpy_chk@plt+0x2b74>
   13ba0:	mov	r1, #1
   13ba4:	str	r1, [fp, #-72]	; 0xffffffb8
   13ba8:	mov	r8, #0
   13bac:	mov	r7, #2
   13bb0:	movw	r1, #29106	; 0x71b2
   13bb4:	movt	r1, #1
   13bb8:	str	r1, [fp, #-84]	; 0xffffffac
   13bbc:	mov	r2, r0
   13bc0:	mov	r3, #1
   13bc4:	b	13c50 <__mempcpy_chk@plt+0x2bfc>
   13bc8:	mov	r8, #1
   13bcc:	mov	r7, #2
   13bd0:	cmp	sl, #0
   13bd4:	movne	r0, #39	; 0x27
   13bd8:	strbne	r0, [r5]
   13bdc:	movw	r0, #29106	; 0x71b2
   13be0:	movt	r0, #1
   13be4:	str	r0, [fp, #-84]	; 0xffffffac
   13be8:	mov	r0, #1
   13bec:	str	r0, [fp, #-72]	; 0xffffffb8
   13bf0:	b	13c4c <__mempcpy_chk@plt+0x2bf8>
   13bf4:	mov	r7, #5
   13bf8:	tst	r4, #1
   13bfc:	beq	13c24 <__mempcpy_chk@plt+0x2bd0>
   13c00:	mov	r0, #1
   13c04:	str	r0, [fp, #-72]	; 0xffffffb8
   13c08:	mov	r8, #0
   13c0c:	movw	r0, #29102	; 0x71ae
   13c10:	movt	r0, #1
   13c14:	str	r0, [fp, #-84]	; 0xffffffac
   13c18:	mov	r2, #1
   13c1c:	mov	r3, #1
   13c20:	b	13c50 <__mempcpy_chk@plt+0x2bfc>
   13c24:	cmp	sl, #0
   13c28:	movne	r0, #34	; 0x22
   13c2c:	strbne	r0, [r5]
   13c30:	mov	r8, #1
   13c34:	movw	r0, #29102	; 0x71ae
   13c38:	movt	r0, #1
   13c3c:	str	r0, [fp, #-84]	; 0xffffffac
   13c40:	mov	r0, #1
   13c44:	str	r0, [fp, #-72]	; 0xffffffb8
   13c48:	mov	r2, #1
   13c4c:	mov	r3, #0
   13c50:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c54:	cmp	r0, #0
   13c58:	movwne	r0, #1
   13c5c:	and	r1, r0, r3
   13c60:	and	r1, r2, r1
   13c64:	str	r1, [sp, #56]	; 0x38
   13c68:	sub	r1, r7, #2
   13c6c:	clz	r1, r1
   13c70:	lsr	r1, r1, #5
   13c74:	and	r1, r1, r3
   13c78:	str	r1, [sp, #68]	; 0x44
   13c7c:	str	r7, [fp, #-64]	; 0xffffffc0
   13c80:	subs	r1, r7, #2
   13c84:	movwne	r1, #1
   13c88:	eor	r4, r3, #1
   13c8c:	str	r4, [fp, #-88]	; 0xffffffa8
   13c90:	orr	r4, r1, r4
   13c94:	str	r4, [sp, #72]	; 0x48
   13c98:	and	r1, r1, r2
   13c9c:	and	r0, r0, r1
   13ca0:	str	r0, [fp, #-60]	; 0xffffffc4
   13ca4:	str	r3, [fp, #-76]	; 0xffffffb4
   13ca8:	orr	r0, r1, r3
   13cac:	eor	r0, r0, #1
   13cb0:	ldr	r1, [fp, #16]
   13cb4:	clz	r1, r1
   13cb8:	lsr	r1, r1, #5
   13cbc:	orr	r0, r1, r0
   13cc0:	str	r0, [fp, #-68]	; 0xffffffbc
   13cc4:	str	r2, [sp, #92]	; 0x5c
   13cc8:	eor	r0, r2, #1
   13ccc:	str	r0, [sp, #60]	; 0x3c
   13cd0:	mov	r7, #0
   13cd4:	cmn	lr, #1
   13cd8:	beq	13ce8 <__mempcpy_chk@plt+0x2c94>
   13cdc:	cmp	r7, lr
   13ce0:	bne	13cf4 <__mempcpy_chk@plt+0x2ca0>
   13ce4:	b	14800 <__mempcpy_chk@plt+0x37ac>
   13ce8:	ldrb	r0, [ip, r7]
   13cec:	cmp	r0, #0
   13cf0:	beq	14800 <__mempcpy_chk@plt+0x37ac>
   13cf4:	mov	r9, #0
   13cf8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13cfc:	cmp	r0, #0
   13d00:	beq	13d34 <__mempcpy_chk@plt+0x2ce0>
   13d04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d08:	add	r4, r7, r0
   13d0c:	cmp	r0, #2
   13d10:	bcc	13d2c <__mempcpy_chk@plt+0x2cd8>
   13d14:	cmn	lr, #1
   13d18:	bne	13d2c <__mempcpy_chk@plt+0x2cd8>
   13d1c:	mov	r0, ip
   13d20:	bl	10f7c <strlen@plt>
   13d24:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13d28:	mov	lr, r0
   13d2c:	cmp	r4, lr
   13d30:	bls	13d40 <__mempcpy_chk@plt+0x2cec>
   13d34:	mov	r0, #0
   13d38:	str	r0, [fp, #-52]	; 0xffffffcc
   13d3c:	b	13d84 <__mempcpy_chk@plt+0x2d30>
   13d40:	mov	r4, lr
   13d44:	add	r0, ip, r7
   13d48:	ldr	r1, [fp, #-84]	; 0xffffffac
   13d4c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13d50:	bl	10f70 <bcmp@plt>
   13d54:	cmp	r0, #0
   13d58:	mov	r1, r0
   13d5c:	movwne	r1, #1
   13d60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d64:	orr	r1, r1, r2
   13d68:	tst	r1, #1
   13d6c:	beq	148d4 <__mempcpy_chk@plt+0x3880>
   13d70:	clz	r0, r0
   13d74:	lsr	r0, r0, #5
   13d78:	str	r0, [fp, #-52]	; 0xffffffcc
   13d7c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13d80:	mov	lr, r4
   13d84:	ldrb	r4, [ip, r7]
   13d88:	cmp	r4, #126	; 0x7e
   13d8c:	bhi	142bc <__mempcpy_chk@plt+0x3268>
   13d90:	mov	r6, #1
   13d94:	mov	r2, #110	; 0x6e
   13d98:	mov	r0, #97	; 0x61
   13d9c:	add	r3, pc, #4
   13da0:	mov	r1, #0
   13da4:	ldr	pc, [r3, r4, lsl #2]
   13da8:	andeq	r4, r1, ip, lsl r1
   13dac:			; <UNDEFINED> instruction: 0x000142bc
   13db0:			; <UNDEFINED> instruction: 0x000142bc
   13db4:			; <UNDEFINED> instruction: 0x000142bc
   13db8:			; <UNDEFINED> instruction: 0x000142bc
   13dbc:			; <UNDEFINED> instruction: 0x000142bc
   13dc0:			; <UNDEFINED> instruction: 0x000142bc
   13dc4:	muleq	r1, r0, r3
   13dc8:	strdeq	r4, [r1], -ip
   13dcc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dd0:	andeq	r4, r1, r8, lsl #2
   13dd4:	andeq	r4, r1, r4, lsr #4
   13dd8:	andeq	r4, r1, ip, ror #1
   13ddc:	andeq	r4, r1, r4, lsl #2
   13de0:			; <UNDEFINED> instruction: 0x000142bc
   13de4:			; <UNDEFINED> instruction: 0x000142bc
   13de8:			; <UNDEFINED> instruction: 0x000142bc
   13dec:			; <UNDEFINED> instruction: 0x000142bc
   13df0:			; <UNDEFINED> instruction: 0x000142bc
   13df4:			; <UNDEFINED> instruction: 0x000142bc
   13df8:			; <UNDEFINED> instruction: 0x000142bc
   13dfc:			; <UNDEFINED> instruction: 0x000142bc
   13e00:			; <UNDEFINED> instruction: 0x000142bc
   13e04:			; <UNDEFINED> instruction: 0x000142bc
   13e08:			; <UNDEFINED> instruction: 0x000142bc
   13e0c:			; <UNDEFINED> instruction: 0x000142bc
   13e10:			; <UNDEFINED> instruction: 0x000142bc
   13e14:			; <UNDEFINED> instruction: 0x000142bc
   13e18:			; <UNDEFINED> instruction: 0x000142bc
   13e1c:			; <UNDEFINED> instruction: 0x000142bc
   13e20:			; <UNDEFINED> instruction: 0x000142bc
   13e24:			; <UNDEFINED> instruction: 0x000142bc
   13e28:	andeq	r4, r1, r0, lsr #1
   13e2c:	andeq	r4, r1, r4, lsr #1
   13e30:	andeq	r4, r1, r4, lsr #1
   13e34:	andeq	r4, r1, ip, lsl #1
   13e38:	andeq	r4, r1, r4, lsr #1
   13e3c:	andeq	r3, r1, r4, lsr #31
   13e40:	andeq	r4, r1, r4, lsr #1
   13e44:	andeq	r4, r1, ip, lsr #4
   13e48:	andeq	r4, r1, r4, lsr #1
   13e4c:	andeq	r4, r1, r4, lsr #1
   13e50:	andeq	r4, r1, r4, lsr #1
   13e54:	andeq	r3, r1, r4, lsr #31
   13e58:	andeq	r3, r1, r4, lsr #31
   13e5c:	andeq	r3, r1, r4, lsr #31
   13e60:	andeq	r3, r1, r4, lsr #31
   13e64:	andeq	r3, r1, r4, lsr #31
   13e68:	andeq	r3, r1, r4, lsr #31
   13e6c:	andeq	r3, r1, r4, lsr #31
   13e70:	andeq	r3, r1, r4, lsr #31
   13e74:	andeq	r3, r1, r4, lsr #31
   13e78:	andeq	r3, r1, r4, lsr #31
   13e7c:	andeq	r3, r1, r4, lsr #31
   13e80:	andeq	r3, r1, r4, lsr #31
   13e84:	andeq	r3, r1, r4, lsr #31
   13e88:	andeq	r3, r1, r4, lsr #31
   13e8c:	andeq	r3, r1, r4, lsr #31
   13e90:	andeq	r3, r1, r4, lsr #31
   13e94:	andeq	r4, r1, r4, lsr #1
   13e98:	andeq	r4, r1, r4, lsr #1
   13e9c:	andeq	r4, r1, r4, lsr #1
   13ea0:	andeq	r4, r1, r4, lsr #1
   13ea4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ea8:			; <UNDEFINED> instruction: 0x000142bc
   13eac:	andeq	r3, r1, r4, lsr #31
   13eb0:	andeq	r3, r1, r4, lsr #31
   13eb4:	andeq	r3, r1, r4, lsr #31
   13eb8:	andeq	r3, r1, r4, lsr #31
   13ebc:	andeq	r3, r1, r4, lsr #31
   13ec0:	andeq	r3, r1, r4, lsr #31
   13ec4:	andeq	r3, r1, r4, lsr #31
   13ec8:	andeq	r3, r1, r4, lsr #31
   13ecc:	andeq	r3, r1, r4, lsr #31
   13ed0:	andeq	r3, r1, r4, lsr #31
   13ed4:	andeq	r3, r1, r4, lsr #31
   13ed8:	andeq	r3, r1, r4, lsr #31
   13edc:	andeq	r3, r1, r4, lsr #31
   13ee0:	andeq	r3, r1, r4, lsr #31
   13ee4:	andeq	r3, r1, r4, lsr #31
   13ee8:	andeq	r3, r1, r4, lsr #31
   13eec:	andeq	r3, r1, r4, lsr #31
   13ef0:	andeq	r3, r1, r4, lsr #31
   13ef4:	andeq	r3, r1, r4, lsr #31
   13ef8:	andeq	r3, r1, r4, lsr #31
   13efc:	andeq	r3, r1, r4, lsr #31
   13f00:	andeq	r3, r1, r4, lsr #31
   13f04:	andeq	r3, r1, r4, lsr #31
   13f08:	andeq	r3, r1, r4, lsr #31
   13f0c:	andeq	r3, r1, r4, lsr #31
   13f10:	andeq	r3, r1, r4, lsr #31
   13f14:	andeq	r4, r1, r4, lsr #1
   13f18:	andeq	r4, r1, ip, asr #1
   13f1c:	andeq	r3, r1, r4, lsr #31
   13f20:	andeq	r4, r1, r4, lsr #1
   13f24:	andeq	r3, r1, r4, lsr #31
   13f28:	andeq	r4, r1, r4, lsr #1
   13f2c:	andeq	r3, r1, r4, lsr #31
   13f30:	andeq	r3, r1, r4, lsr #31
   13f34:	andeq	r3, r1, r4, lsr #31
   13f38:	andeq	r3, r1, r4, lsr #31
   13f3c:	andeq	r3, r1, r4, lsr #31
   13f40:	andeq	r3, r1, r4, lsr #31
   13f44:	andeq	r3, r1, r4, lsr #31
   13f48:	andeq	r3, r1, r4, lsr #31
   13f4c:	andeq	r3, r1, r4, lsr #31
   13f50:	andeq	r3, r1, r4, lsr #31
   13f54:	andeq	r3, r1, r4, lsr #31
   13f58:	andeq	r3, r1, r4, lsr #31
   13f5c:	andeq	r3, r1, r4, lsr #31
   13f60:	andeq	r3, r1, r4, lsr #31
   13f64:	andeq	r3, r1, r4, lsr #31
   13f68:	andeq	r3, r1, r4, lsr #31
   13f6c:	andeq	r3, r1, r4, lsr #31
   13f70:	andeq	r3, r1, r4, lsr #31
   13f74:	andeq	r3, r1, r4, lsr #31
   13f78:	andeq	r3, r1, r4, lsr #31
   13f7c:	andeq	r3, r1, r4, lsr #31
   13f80:	andeq	r3, r1, r4, lsr #31
   13f84:	andeq	r3, r1, r4, lsr #31
   13f88:	andeq	r3, r1, r4, lsr #31
   13f8c:	andeq	r3, r1, r4, lsr #31
   13f90:	andeq	r3, r1, r4, lsr #31
   13f94:	andeq	r4, r1, r0, rrx
   13f98:	andeq	r4, r1, r4, lsr #1
   13f9c:	andeq	r4, r1, r0, rrx
   13fa0:	andeq	r4, r1, ip, lsl #1
   13fa4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13fa8:	tst	r0, #1
   13fac:	bne	13fd8 <__mempcpy_chk@plt+0x2f84>
   13fb0:	ubfx	r0, r4, #5, #3
   13fb4:	ldr	r1, [fp, #16]
   13fb8:	ldr	r0, [r1, r0, lsl #2]
   13fbc:	and	r1, r4, #31
   13fc0:	mov	r2, #1
   13fc4:	tst	r0, r2, lsl r1
   13fc8:	beq	13fd8 <__mempcpy_chk@plt+0x2f84>
   13fcc:	mov	r0, r4
   13fd0:	mov	r1, r6
   13fd4:	b	13fec <__mempcpy_chk@plt+0x2f98>
   13fd8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13fdc:	cmp	r0, #0
   13fe0:	mov	r0, r4
   13fe4:	mov	r1, r6
   13fe8:	beq	14324 <__mempcpy_chk@plt+0x32d0>
   13fec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ff0:	tst	r2, #1
   13ff4:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   13ff8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13ffc:	subs	r2, r2, #2
   14000:	movwne	r2, #1
   14004:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14008:	orr	r2, r2, r3
   1400c:	tst	r2, #1
   14010:	bne	1404c <__mempcpy_chk@plt+0x2ff8>
   14014:	cmp	r8, sl
   14018:	movcc	r2, #39	; 0x27
   1401c:	strbcc	r2, [r5, r8]
   14020:	add	r2, r8, #1
   14024:	cmp	r2, sl
   14028:	movcc	r3, #36	; 0x24
   1402c:	strbcc	r3, [r5, r2]
   14030:	add	r2, r8, #2
   14034:	cmp	r2, sl
   14038:	movcc	r3, #39	; 0x27
   1403c:	strbcc	r3, [r5, r2]
   14040:	add	r8, r8, #3
   14044:	mov	r2, #1
   14048:	str	r2, [fp, #-56]	; 0xffffffc8
   1404c:	cmp	r8, sl
   14050:	movcc	r2, #92	; 0x5c
   14054:	strbcc	r2, [r5, r8]
   14058:	add	r8, r8, #1
   1405c:	b	14368 <__mempcpy_chk@plt+0x3314>
   14060:	cmp	lr, #1
   14064:	beq	1408c <__mempcpy_chk@plt+0x3038>
   14068:	mov	r6, #0
   1406c:	cmn	lr, #1
   14070:	bne	14098 <__mempcpy_chk@plt+0x3044>
   14074:	ldrb	r0, [ip, #1]
   14078:	cmp	r0, #0
   1407c:	beq	1408c <__mempcpy_chk@plt+0x3038>
   14080:	mvn	lr, #0
   14084:	mov	r9, #0
   14088:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   1408c:	mov	r6, #0
   14090:	cmp	r7, #0
   14094:	beq	140a0 <__mempcpy_chk@plt+0x304c>
   14098:	mov	r9, #0
   1409c:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   140a0:	mov	r1, #1
   140a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140a8:	cmp	r0, #2
   140ac:	bne	140c4 <__mempcpy_chk@plt+0x3070>
   140b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   140b4:	tst	r0, #1
   140b8:	mov	r6, r1
   140bc:	beq	13fa4 <__mempcpy_chk@plt+0x2f50>
   140c0:	b	148e8 <__mempcpy_chk@plt+0x3894>
   140c4:	mov	r6, r1
   140c8:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   140cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140d0:	cmp	r0, #2
   140d4:	bne	14308 <__mempcpy_chk@plt+0x32b4>
   140d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   140dc:	tst	r0, #1
   140e0:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   140e4:	mov	r9, #0
   140e8:	b	1431c <__mempcpy_chk@plt+0x32c8>
   140ec:	mov	r0, #102	; 0x66
   140f0:	b	14390 <__mempcpy_chk@plt+0x333c>
   140f4:	mov	r2, #116	; 0x74
   140f8:	b	14108 <__mempcpy_chk@plt+0x30b4>
   140fc:	mov	r0, #98	; 0x62
   14100:	b	14390 <__mempcpy_chk@plt+0x333c>
   14104:	mov	r2, #114	; 0x72
   14108:	ldr	r0, [sp, #72]	; 0x48
   1410c:	tst	r0, #1
   14110:	mov	r0, r2
   14114:	bne	14390 <__mempcpy_chk@plt+0x333c>
   14118:	b	148e8 <__mempcpy_chk@plt+0x3894>
   1411c:	ldr	r0, [sp, #92]	; 0x5c
   14120:	tst	r0, #1
   14124:	beq	143ac <__mempcpy_chk@plt+0x3358>
   14128:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1412c:	tst	r0, #1
   14130:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   14134:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14138:	subs	r0, r0, #2
   1413c:	movwne	r0, #1
   14140:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14144:	orr	r0, r0, r1
   14148:	tst	r0, #1
   1414c:	bne	14188 <__mempcpy_chk@plt+0x3134>
   14150:	cmp	r8, sl
   14154:	movcc	r0, #39	; 0x27
   14158:	strbcc	r0, [r5, r8]
   1415c:	add	r0, r8, #1
   14160:	cmp	r0, sl
   14164:	movcc	r1, #36	; 0x24
   14168:	strbcc	r1, [r5, r0]
   1416c:	add	r0, r8, #2
   14170:	cmp	r0, sl
   14174:	movcc	r1, #39	; 0x27
   14178:	strbcc	r1, [r5, r0]
   1417c:	add	r8, r8, #3
   14180:	mov	r0, #1
   14184:	str	r0, [fp, #-56]	; 0xffffffc8
   14188:	cmp	r8, sl
   1418c:	movcc	r0, #92	; 0x5c
   14190:	strbcc	r0, [r5, r8]
   14194:	add	r0, r8, #1
   14198:	mov	r6, #0
   1419c:	mov	r9, #1
   141a0:	mov	r4, #48	; 0x30
   141a4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   141a8:	cmp	r1, #2
   141ac:	beq	14570 <__mempcpy_chk@plt+0x351c>
   141b0:	add	r1, r7, #1
   141b4:	cmp	r1, lr
   141b8:	bcs	14570 <__mempcpy_chk@plt+0x351c>
   141bc:	ldrb	r1, [ip, r1]
   141c0:	sub	r1, r1, #48	; 0x30
   141c4:	uxtb	r1, r1
   141c8:	cmp	r1, #9
   141cc:	bhi	14570 <__mempcpy_chk@plt+0x351c>
   141d0:	cmp	r0, sl
   141d4:	movcc	r1, #48	; 0x30
   141d8:	strbcc	r1, [r5, r0]
   141dc:	add	r0, r8, #2
   141e0:	cmp	r0, sl
   141e4:	movcc	r1, #48	; 0x30
   141e8:	strbcc	r1, [r5, r0]
   141ec:	add	r8, r8, #3
   141f0:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   141f4:	mov	r9, #0
   141f8:	mov	r4, #63	; 0x3f
   141fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14200:	cmp	r0, #5
   14204:	beq	14578 <__mempcpy_chk@plt+0x3524>
   14208:	cmp	r0, #2
   1420c:	bne	14620 <__mempcpy_chk@plt+0x35cc>
   14210:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14214:	tst	r0, #1
   14218:	mov	r6, #0
   1421c:	beq	13fa4 <__mempcpy_chk@plt+0x2f50>
   14220:	b	148e8 <__mempcpy_chk@plt+0x3894>
   14224:	mov	r0, #118	; 0x76
   14228:	b	14390 <__mempcpy_chk@plt+0x333c>
   1422c:	mov	r4, #39	; 0x27
   14230:	mov	r0, #1
   14234:	str	r0, [sp, #64]	; 0x40
   14238:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1423c:	cmp	r0, #2
   14240:	bne	143c8 <__mempcpy_chk@plt+0x3374>
   14244:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14248:	tst	r0, #1
   1424c:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   14250:	ldr	r2, [sp, #84]	; 0x54
   14254:	cmp	r2, #0
   14258:	mov	r0, r2
   1425c:	movwne	r0, #1
   14260:	clz	r1, sl
   14264:	lsr	r1, r1, #5
   14268:	orrs	r0, r0, r1
   1426c:	moveq	r2, sl
   14270:	str	r2, [sp, #84]	; 0x54
   14274:	moveq	sl, r0
   14278:	cmp	r8, sl
   1427c:	movcc	r0, #39	; 0x27
   14280:	strbcc	r0, [r5, r8]
   14284:	add	r0, r8, #1
   14288:	cmp	r0, sl
   1428c:	movcc	r1, #92	; 0x5c
   14290:	strbcc	r1, [r5, r0]
   14294:	add	r0, r8, #2
   14298:	cmp	r0, sl
   1429c:	movcc	r1, #39	; 0x27
   142a0:	strbcc	r1, [r5, r0]
   142a4:	add	r8, r8, #3
   142a8:	mov	r0, #0
   142ac:	str	r0, [fp, #-56]	; 0xffffffc8
   142b0:	mov	r9, #0
   142b4:	mov	r6, #1
   142b8:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   142bc:	ldr	r0, [sp, #44]	; 0x2c
   142c0:	cmp	r0, #1
   142c4:	bne	143d0 <__mempcpy_chk@plt+0x337c>
   142c8:	str	lr, [sp, #32]
   142cc:	bl	10f4c <__ctype_b_loc@plt>
   142d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   142d4:	ldr	r0, [r0]
   142d8:	add	r0, r0, r4, lsl #1
   142dc:	ldrb	r0, [r0, #1]
   142e0:	ubfx	r6, r0, #6, #1
   142e4:	mov	r2, #1
   142e8:	ldr	r0, [sp, #60]	; 0x3c
   142ec:	orr	r1, r6, r0
   142f0:	cmp	r2, #1
   142f4:	bhi	14628 <__mempcpy_chk@plt+0x35d4>
   142f8:	tst	r1, #1
   142fc:	beq	14628 <__mempcpy_chk@plt+0x35d4>
   14300:	ldr	lr, [sp, #32]
   14304:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   14308:	mov	r9, #0
   1430c:	mov	r0, #92	; 0x5c
   14310:	ldr	r1, [sp, #56]	; 0x38
   14314:	cmp	r1, #0
   14318:	beq	14390 <__mempcpy_chk@plt+0x333c>
   1431c:	mov	r4, #92	; 0x5c
   14320:	mov	r6, #0
   14324:	cmp	r9, #0
   14328:	bne	14360 <__mempcpy_chk@plt+0x330c>
   1432c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14330:	tst	r0, #1
   14334:	beq	14360 <__mempcpy_chk@plt+0x330c>
   14338:	cmp	r8, sl
   1433c:	movcc	r0, #39	; 0x27
   14340:	strbcc	r0, [r5, r8]
   14344:	add	r0, r8, #1
   14348:	cmp	r0, sl
   1434c:	movcc	r1, #39	; 0x27
   14350:	strbcc	r1, [r5, r0]
   14354:	add	r8, r8, #2
   14358:	mov	r0, #0
   1435c:	str	r0, [fp, #-56]	; 0xffffffc8
   14360:	mov	r1, r6
   14364:	mov	r0, r4
   14368:	cmp	r8, sl
   1436c:	strbcc	r0, [r5, r8]
   14370:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14374:	and	r0, r0, r1
   14378:	str	r0, [fp, #-48]	; 0xffffffd0
   1437c:	add	r8, r8, #1
   14380:	add	r7, r7, #1
   14384:	cmn	lr, #1
   14388:	bne	13cdc <__mempcpy_chk@plt+0x2c88>
   1438c:	b	13ce8 <__mempcpy_chk@plt+0x2c94>
   14390:	mov	r9, #0
   14394:	ldr	r1, [sp, #92]	; 0x5c
   14398:	tst	r1, #1
   1439c:	mov	r6, #0
   143a0:	mov	r1, #0
   143a4:	beq	13fa4 <__mempcpy_chk@plt+0x2f50>
   143a8:	b	13fec <__mempcpy_chk@plt+0x2f98>
   143ac:	mov	r4, #0
   143b0:	ldr	r0, [sp, #40]	; 0x28
   143b4:	cmp	r0, #0
   143b8:	mov	r9, #0
   143bc:	mov	r6, #0
   143c0:	beq	13fa4 <__mempcpy_chk@plt+0x2f50>
   143c4:	b	14380 <__mempcpy_chk@plt+0x332c>
   143c8:	mov	r6, #1
   143cc:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   143d0:	mov	r0, #0
   143d4:	str	r0, [fp, #-36]	; 0xffffffdc
   143d8:	str	r0, [fp, #-40]	; 0xffffffd8
   143dc:	cmn	lr, #1
   143e0:	bne	143f4 <__mempcpy_chk@plt+0x33a0>
   143e4:	mov	r0, ip
   143e8:	bl	10f7c <strlen@plt>
   143ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143f0:	mov	lr, r0
   143f4:	ldr	r0, [sp, #76]	; 0x4c
   143f8:	add	r0, r0, r7
   143fc:	str	r0, [sp, #24]
   14400:	mov	r6, #1
   14404:	mov	r2, #0
   14408:	sub	r0, fp, #40	; 0x28
   1440c:	mov	r3, r0
   14410:	str	r5, [sp, #28]
   14414:	str	lr, [sp, #32]
   14418:	b	1445c <__mempcpy_chk@plt+0x3408>
   1441c:	ldr	r5, [sp, #52]	; 0x34
   14420:	add	r5, r0, r5
   14424:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14428:	bl	10ea4 <iswprint@plt>
   1442c:	cmp	r0, #0
   14430:	movwne	r0, #1
   14434:	and	r6, r6, r0
   14438:	sub	r0, fp, #40	; 0x28
   1443c:	bl	10e68 <mbsinit@plt>
   14440:	sub	r3, fp, #40	; 0x28
   14444:	mov	r2, r5
   14448:	ldr	lr, [sp, #32]
   1444c:	cmp	r0, #0
   14450:	ldr	r5, [sp, #28]
   14454:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14458:	bne	142e8 <__mempcpy_chk@plt+0x3294>
   1445c:	str	r2, [sp, #52]	; 0x34
   14460:	add	r0, r2, r7
   14464:	add	r1, ip, r0
   14468:	str	r0, [sp, #48]	; 0x30
   1446c:	sub	r2, lr, r0
   14470:	sub	r0, fp, #44	; 0x2c
   14474:	bl	1660c <__mempcpy_chk@plt+0x55b8>
   14478:	cmp	r0, #0
   1447c:	beq	147f4 <__mempcpy_chk@plt+0x37a0>
   14480:	cmn	r0, #1
   14484:	beq	147b0 <__mempcpy_chk@plt+0x375c>
   14488:	cmn	r0, #2
   1448c:	ldr	lr, [sp, #32]
   14490:	beq	147b8 <__mempcpy_chk@plt+0x3764>
   14494:	cmp	r0, #2
   14498:	mov	r1, #0
   1449c:	movwcc	r1, #1
   144a0:	ldr	r2, [sp, #68]	; 0x44
   144a4:	eor	r2, r2, #1
   144a8:	orrs	r1, r2, r1
   144ac:	bne	1441c <__mempcpy_chk@plt+0x33c8>
   144b0:	ldr	r1, [sp, #52]	; 0x34
   144b4:	ldr	r2, [sp, #24]
   144b8:	add	r1, r2, r1
   144bc:	sub	r2, r0, #1
   144c0:	b	144d0 <__mempcpy_chk@plt+0x347c>
   144c4:	add	r1, r1, #1
   144c8:	subs	r2, r2, #1
   144cc:	beq	1441c <__mempcpy_chk@plt+0x33c8>
   144d0:	ldrb	r3, [r1]
   144d4:	sub	r3, r3, #91	; 0x5b
   144d8:	cmp	r3, #33	; 0x21
   144dc:	bhi	144c4 <__mempcpy_chk@plt+0x3470>
   144e0:	add	r5, pc, #0
   144e4:	ldr	pc, [r5, r3, lsl #2]
   144e8:	andeq	r4, r1, r0, ror #17
   144ec:	andeq	r4, r1, r0, ror #17
   144f0:	andeq	r4, r1, r4, asr #9
   144f4:	andeq	r4, r1, r0, ror #17
   144f8:	andeq	r4, r1, r4, asr #9
   144fc:	andeq	r4, r1, r0, ror #17
   14500:	andeq	r4, r1, r4, asr #9
   14504:	andeq	r4, r1, r4, asr #9
   14508:	andeq	r4, r1, r4, asr #9
   1450c:	andeq	r4, r1, r4, asr #9
   14510:	andeq	r4, r1, r4, asr #9
   14514:	andeq	r4, r1, r4, asr #9
   14518:	andeq	r4, r1, r4, asr #9
   1451c:	andeq	r4, r1, r4, asr #9
   14520:	andeq	r4, r1, r4, asr #9
   14524:	andeq	r4, r1, r4, asr #9
   14528:	andeq	r4, r1, r4, asr #9
   1452c:	andeq	r4, r1, r4, asr #9
   14530:	andeq	r4, r1, r4, asr #9
   14534:	andeq	r4, r1, r4, asr #9
   14538:	andeq	r4, r1, r4, asr #9
   1453c:	andeq	r4, r1, r4, asr #9
   14540:	andeq	r4, r1, r4, asr #9
   14544:	andeq	r4, r1, r4, asr #9
   14548:	andeq	r4, r1, r4, asr #9
   1454c:	andeq	r4, r1, r4, asr #9
   14550:	andeq	r4, r1, r4, asr #9
   14554:	andeq	r4, r1, r4, asr #9
   14558:	andeq	r4, r1, r4, asr #9
   1455c:	andeq	r4, r1, r4, asr #9
   14560:	andeq	r4, r1, r4, asr #9
   14564:	andeq	r4, r1, r4, asr #9
   14568:	andeq	r4, r1, r4, asr #9
   1456c:	andeq	r4, r1, r0, ror #17
   14570:	mov	r8, r0
   14574:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   14578:	ldr	r0, [sp, #36]	; 0x24
   1457c:	cmp	r0, #0
   14580:	beq	14620 <__mempcpy_chk@plt+0x35cc>
   14584:	add	r0, r7, #2
   14588:	cmp	r0, lr
   1458c:	bcs	14620 <__mempcpy_chk@plt+0x35cc>
   14590:	add	r1, r7, ip
   14594:	ldrb	r1, [r1, #1]
   14598:	cmp	r1, #63	; 0x3f
   1459c:	bne	14620 <__mempcpy_chk@plt+0x35cc>
   145a0:	ldrb	r1, [ip, r0]
   145a4:	sub	r2, r1, #33	; 0x21
   145a8:	cmp	r2, #29
   145ac:	bhi	14620 <__mempcpy_chk@plt+0x35cc>
   145b0:	mov	r3, #1
   145b4:	movw	r6, #20929	; 0x51c1
   145b8:	movt	r6, #14336	; 0x3800
   145bc:	tst	r6, r3, lsl r2
   145c0:	beq	14620 <__mempcpy_chk@plt+0x35cc>
   145c4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   145c8:	tst	r2, #1
   145cc:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   145d0:	cmp	r8, sl
   145d4:	movcc	r2, #63	; 0x3f
   145d8:	strbcc	r2, [r5, r8]
   145dc:	add	r2, r8, #1
   145e0:	cmp	r2, sl
   145e4:	movcc	r3, #34	; 0x22
   145e8:	strbcc	r3, [r5, r2]
   145ec:	add	r2, r8, #2
   145f0:	cmp	r2, sl
   145f4:	movcc	r3, #34	; 0x22
   145f8:	strbcc	r3, [r5, r2]
   145fc:	add	r2, r8, #3
   14600:	cmp	r2, sl
   14604:	movcc	r3, #63	; 0x3f
   14608:	strbcc	r3, [r5, r2]
   1460c:	add	r8, r8, #4
   14610:	mov	r7, r0
   14614:	mov	r4, r1
   14618:	mov	r6, #0
   1461c:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   14620:	mov	r6, #0
   14624:	b	13fa4 <__mempcpy_chk@plt+0x2f50>
   14628:	add	r0, r2, r7
   1462c:	str	r0, [sp, #52]	; 0x34
   14630:	mov	r2, #0
   14634:	ldr	lr, [sp, #32]
   14638:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1463c:	str	r1, [sp, #48]	; 0x30
   14640:	tst	r1, #1
   14644:	bne	14720 <__mempcpy_chk@plt+0x36cc>
   14648:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1464c:	tst	r1, #1
   14650:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   14654:	mov	r3, r0
   14658:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1465c:	subs	r1, r0, #2
   14660:	movwne	r1, #1
   14664:	orr	r1, r1, r3
   14668:	tst	r1, #1
   1466c:	bne	146a4 <__mempcpy_chk@plt+0x3650>
   14670:	cmp	r8, sl
   14674:	movcc	r0, #39	; 0x27
   14678:	strbcc	r0, [r5, r8]
   1467c:	add	r2, r8, #1
   14680:	cmp	r2, sl
   14684:	movcc	r0, #36	; 0x24
   14688:	strbcc	r0, [r5, r2]
   1468c:	add	r2, r8, #2
   14690:	cmp	r2, sl
   14694:	movcc	r0, #39	; 0x27
   14698:	strbcc	r0, [r5, r2]
   1469c:	add	r8, r8, #3
   146a0:	mov	r3, #1
   146a4:	cmp	r8, sl
   146a8:	movcc	r1, #92	; 0x5c
   146ac:	strbcc	r1, [r5, r8]
   146b0:	add	r2, r8, #1
   146b4:	cmp	r2, sl
   146b8:	bcs	146cc <__mempcpy_chk@plt+0x3678>
   146bc:	uxtb	r1, r4
   146c0:	mov	r0, #48	; 0x30
   146c4:	orr	r1, r0, r1, lsr #6
   146c8:	strb	r1, [r5, r2]
   146cc:	add	r2, r8, #2
   146d0:	cmp	r2, sl
   146d4:	lsrcc	r1, r4, #3
   146d8:	movcc	r0, #6
   146dc:	bficc	r1, r0, #3, #29
   146e0:	strbcc	r1, [r5, r2]
   146e4:	mov	r0, #6
   146e8:	bfi	r4, r0, #3, #29
   146ec:	add	r8, r8, #3
   146f0:	mov	r2, #1
   146f4:	mov	r0, r3
   146f8:	b	14744 <__mempcpy_chk@plt+0x36f0>
   146fc:	cmp	r8, sl
   14700:	strbcc	r4, [r5, r8]
   14704:	ldr	r1, [sp, #76]	; 0x4c
   14708:	ldrb	r4, [r1, r7]
   1470c:	add	r8, r8, #1
   14710:	mov	r7, r3
   14714:	ldr	r1, [sp, #48]	; 0x30
   14718:	tst	r1, #1
   1471c:	beq	14648 <__mempcpy_chk@plt+0x35f4>
   14720:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14724:	tst	r1, #1
   14728:	beq	1473c <__mempcpy_chk@plt+0x36e8>
   1472c:	cmp	r8, sl
   14730:	movcc	r1, #92	; 0x5c
   14734:	strbcc	r1, [r5, r8]
   14738:	add	r8, r8, #1
   1473c:	mov	r1, #0
   14740:	str	r1, [fp, #-52]	; 0xffffffcc
   14744:	and	r9, r2, #1
   14748:	add	r3, r7, #1
   1474c:	ldr	r1, [sp, #52]	; 0x34
   14750:	cmp	r1, r3
   14754:	bls	14798 <__mempcpy_chk@plt+0x3744>
   14758:	cmp	r9, #0
   1475c:	movwne	r9, #1
   14760:	mvn	r1, r0
   14764:	orr	r1, r1, r9
   14768:	tst	r1, #1
   1476c:	bne	146fc <__mempcpy_chk@plt+0x36a8>
   14770:	cmp	r8, sl
   14774:	movcc	r1, #39	; 0x27
   14778:	strbcc	r1, [r5, r8]
   1477c:	add	r1, r8, #1
   14780:	cmp	r1, sl
   14784:	movcc	r0, #39	; 0x27
   14788:	strbcc	r0, [r5, r1]
   1478c:	add	r8, r8, #2
   14790:	mov	r0, #0
   14794:	b	146fc <__mempcpy_chk@plt+0x36a8>
   14798:	str	r0, [fp, #-56]	; 0xffffffc8
   1479c:	cmp	r9, #0
   147a0:	movwne	r9, #1
   147a4:	cmp	r9, #0
   147a8:	beq	1432c <__mempcpy_chk@plt+0x32d8>
   147ac:	b	14360 <__mempcpy_chk@plt+0x330c>
   147b0:	mov	r6, #0
   147b4:	b	147f4 <__mempcpy_chk@plt+0x37a0>
   147b8:	mov	r6, #0
   147bc:	ldr	r0, [sp, #48]	; 0x30
   147c0:	cmp	r0, lr
   147c4:	bcs	147f4 <__mempcpy_chk@plt+0x37a0>
   147c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   147cc:	add	r0, ip, r7
   147d0:	ldr	r2, [sp, #52]	; 0x34
   147d4:	ldrb	r1, [r0, r2]
   147d8:	cmp	r1, #0
   147dc:	beq	142e8 <__mempcpy_chk@plt+0x3294>
   147e0:	add	r2, r2, #1
   147e4:	add	r1, r7, r2
   147e8:	cmp	r1, lr
   147ec:	bcc	147d4 <__mempcpy_chk@plt+0x3780>
   147f0:	b	142e8 <__mempcpy_chk@plt+0x3294>
   147f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   147f8:	ldr	r2, [sp, #52]	; 0x34
   147fc:	b	142e8 <__mempcpy_chk@plt+0x3294>
   14800:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14804:	eor	r0, r1, #2
   14808:	orr	r0, r0, r8
   1480c:	clz	r0, r0
   14810:	lsr	r0, r0, #5
   14814:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14818:	tst	r3, r0
   1481c:	bne	148e8 <__mempcpy_chk@plt+0x3894>
   14820:	mov	r6, r5
   14824:	subs	r0, r1, #2
   14828:	movwne	r0, #1
   1482c:	orr	r0, r3, r0
   14830:	tst	r0, #1
   14834:	ldr	r2, [sp, #92]	; 0x5c
   14838:	ldreq	r0, [sp, #64]	; 0x40
   1483c:	eoreq	r0, r0, #1
   14840:	tsteq	r0, #1
   14844:	bne	14884 <__mempcpy_chk@plt+0x3830>
   14848:	mov	r9, lr
   1484c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14850:	tst	r0, #1
   14854:	bne	14950 <__mempcpy_chk@plt+0x38fc>
   14858:	ldr	r0, [sp, #84]	; 0x54
   1485c:	cmp	r0, #0
   14860:	beq	14884 <__mempcpy_chk@plt+0x3830>
   14864:	mov	r0, #0
   14868:	str	r0, [fp, #-48]	; 0xffffffd0
   1486c:	mov	r1, #2
   14870:	cmp	sl, #0
   14874:	mov	r0, r2
   14878:	mov	r4, r3
   1487c:	ldr	r7, [sp, #84]	; 0x54
   14880:	beq	13a5c <__mempcpy_chk@plt+0x2a08>
   14884:	ldr	r1, [fp, #-84]	; 0xffffffac
   14888:	clz	r0, r1
   1488c:	lsr	r0, r0, #5
   14890:	orr	r0, r0, r3
   14894:	tst	r0, #1
   14898:	bne	148c4 <__mempcpy_chk@plt+0x3870>
   1489c:	ldrb	r0, [r1]
   148a0:	cmp	r0, #0
   148a4:	beq	148c4 <__mempcpy_chk@plt+0x3870>
   148a8:	add	r1, r1, #1
   148ac:	cmp	r8, sl
   148b0:	strbcc	r0, [r6, r8]
   148b4:	add	r8, r8, #1
   148b8:	ldrb	r0, [r1], #1
   148bc:	cmp	r0, #0
   148c0:	bne	148ac <__mempcpy_chk@plt+0x3858>
   148c4:	cmp	r8, sl
   148c8:	movcc	r0, #0
   148cc:	strbcc	r0, [r6, r8]
   148d0:	b	14944 <__mempcpy_chk@plt+0x38f0>
   148d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   148d8:	mov	lr, r4
   148dc:	b	148e8 <__mempcpy_chk@plt+0x3894>
   148e0:	ldr	r5, [sp, #28]
   148e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   148e8:	mov	r0, #0
   148ec:	ldr	r1, [fp, #12]
   148f0:	bic	r1, r1, #2
   148f4:	mov	r2, #2
   148f8:	ldr	r3, [sp, #92]	; 0x5c
   148fc:	tst	r3, #1
   14900:	movwne	r2, #4
   14904:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14908:	cmp	r3, #2
   1490c:	movne	r2, r3
   14910:	str	r2, [sp]
   14914:	str	r1, [sp, #4]
   14918:	str	r0, [sp, #8]
   1491c:	ldr	r0, [sp, #80]	; 0x50
   14920:	str	r0, [sp, #12]
   14924:	ldr	r0, [sp, #88]	; 0x58
   14928:	str	r0, [sp, #16]
   1492c:	mov	r0, r5
   14930:	mov	r1, sl
   14934:	mov	r2, ip
   14938:	mov	r3, lr
   1493c:	bl	139d0 <__mempcpy_chk@plt+0x297c>
   14940:	mov	r8, r0
   14944:	mov	r0, r8
   14948:	sub	sp, fp, #28
   1494c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14950:	mov	r0, #5
   14954:	str	r0, [sp]
   14958:	ldr	r0, [fp, #12]
   1495c:	str	r0, [sp, #4]
   14960:	ldr	r0, [fp, #16]
   14964:	str	r0, [sp, #8]
   14968:	ldr	r0, [sp, #80]	; 0x50
   1496c:	str	r0, [sp, #12]
   14970:	ldr	r0, [sp, #88]	; 0x58
   14974:	str	r0, [sp, #16]
   14978:	mov	r0, r6
   1497c:	ldr	r1, [sp, #84]	; 0x54
   14980:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14984:	mov	r3, r9
   14988:	b	1493c <__mempcpy_chk@plt+0x38e8>
   1498c:	bl	11030 <abort@plt>
   14990:	mov	r3, r2
   14994:	mov	r2, #0
   14998:	b	1499c <__mempcpy_chk@plt+0x3948>
   1499c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a0:	add	fp, sp, #28
   149a4:	sub	sp, sp, #36	; 0x24
   149a8:	mov	r4, r2
   149ac:	str	r2, [sp, #24]
   149b0:	mov	r5, r1
   149b4:	mov	r6, r0
   149b8:	str	r0, [sp, #20]
   149bc:	movw	r8, #33128	; 0x8168
   149c0:	movt	r8, #2
   149c4:	cmp	r3, #0
   149c8:	movne	r8, r3
   149cc:	bl	10f88 <__errno_location@plt>
   149d0:	str	r0, [sp, #28]
   149d4:	ldm	r8, {r3, r9}
   149d8:	ldr	r1, [r8, #40]	; 0x28
   149dc:	ldr	r2, [r8, #44]	; 0x2c
   149e0:	ldr	r7, [r0]
   149e4:	str	r7, [sp, #32]
   149e8:	add	sl, r8, #8
   149ec:	cmp	r4, #0
   149f0:	orreq	r9, r9, #1
   149f4:	stm	sp, {r3, r9, sl}
   149f8:	str	r1, [sp, #12]
   149fc:	str	r2, [sp, #16]
   14a00:	mov	r0, #0
   14a04:	mov	r1, #0
   14a08:	mov	r2, r6
   14a0c:	mov	r3, r5
   14a10:	mov	r7, r5
   14a14:	bl	139d0 <__mempcpy_chk@plt+0x297c>
   14a18:	mov	r5, r0
   14a1c:	add	r4, r0, #1
   14a20:	mov	r0, r4
   14a24:	bl	15a40 <__mempcpy_chk@plt+0x49ec>
   14a28:	mov	r6, r0
   14a2c:	ldr	r0, [r8]
   14a30:	ldr	r1, [r8, #40]	; 0x28
   14a34:	ldr	r2, [r8, #44]	; 0x2c
   14a38:	stm	sp, {r0, r9, sl}
   14a3c:	str	r1, [sp, #12]
   14a40:	str	r2, [sp, #16]
   14a44:	mov	r0, r6
   14a48:	mov	r1, r4
   14a4c:	ldr	r2, [sp, #20]
   14a50:	mov	r3, r7
   14a54:	bl	139d0 <__mempcpy_chk@plt+0x297c>
   14a58:	ldr	r0, [sp, #24]
   14a5c:	ldr	r1, [sp, #32]
   14a60:	ldr	r2, [sp, #28]
   14a64:	str	r1, [r2]
   14a68:	cmp	r0, #0
   14a6c:	strne	r5, [r0]
   14a70:	mov	r0, r6
   14a74:	sub	sp, fp, #28
   14a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a80:	add	fp, sp, #24
   14a84:	movw	r8, #33008	; 0x80f0
   14a88:	movt	r8, #2
   14a8c:	ldr	r4, [r8]
   14a90:	movw	r5, #33012	; 0x80f4
   14a94:	movt	r5, #2
   14a98:	ldr	r0, [r5]
   14a9c:	cmp	r0, #2
   14aa0:	blt	14acc <__mempcpy_chk@plt+0x3a78>
   14aa4:	add	r7, r4, #12
   14aa8:	mov	r6, #0
   14aac:	ldr	r0, [r7, r6, lsl #3]
   14ab0:	bl	1277c <__mempcpy_chk@plt+0x1728>
   14ab4:	add	r0, r6, #1
   14ab8:	ldr	r1, [r5]
   14abc:	add	r2, r6, #2
   14ac0:	cmp	r2, r1
   14ac4:	mov	r6, r0
   14ac8:	blt	14aac <__mempcpy_chk@plt+0x3a58>
   14acc:	ldr	r0, [r4, #4]
   14ad0:	movw	r9, #33176	; 0x8198
   14ad4:	movt	r9, #2
   14ad8:	cmp	r0, r9
   14adc:	movw	r7, #33016	; 0x80f8
   14ae0:	movt	r7, #2
   14ae4:	beq	14af4 <__mempcpy_chk@plt+0x3aa0>
   14ae8:	bl	1277c <__mempcpy_chk@plt+0x1728>
   14aec:	mov	r0, #256	; 0x100
   14af0:	stm	r7, {r0, r9}
   14af4:	cmp	r4, r7
   14af8:	beq	14b08 <__mempcpy_chk@plt+0x3ab4>
   14afc:	mov	r0, r4
   14b00:	bl	1277c <__mempcpy_chk@plt+0x1728>
   14b04:	str	r7, [r8]
   14b08:	mov	r0, #1
   14b0c:	str	r0, [r5]
   14b10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14b14:	movw	r3, #33128	; 0x8168
   14b18:	movt	r3, #2
   14b1c:	mvn	r2, #0
   14b20:	b	14b24 <__mempcpy_chk@plt+0x3ad0>
   14b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b28:	add	fp, sp, #28
   14b2c:	sub	sp, sp, #44	; 0x2c
   14b30:	mov	r7, r3
   14b34:	str	r2, [sp, #36]	; 0x24
   14b38:	str	r1, [sp, #32]
   14b3c:	mov	r5, r0
   14b40:	bl	10f88 <__errno_location@plt>
   14b44:	cmp	r5, #0
   14b48:	bmi	14cb8 <__mempcpy_chk@plt+0x3c64>
   14b4c:	cmn	r5, #-2147483647	; 0x80000001
   14b50:	beq	14cb8 <__mempcpy_chk@plt+0x3c64>
   14b54:	movw	r4, #33008	; 0x80f0
   14b58:	movt	r4, #2
   14b5c:	ldr	r6, [r4]
   14b60:	str	r0, [sp, #28]
   14b64:	ldr	r0, [r0]
   14b68:	str	r0, [sp, #24]
   14b6c:	movw	r8, #33012	; 0x80f4
   14b70:	movt	r8, #2
   14b74:	ldr	r1, [r8]
   14b78:	cmp	r1, r5
   14b7c:	ble	14b88 <__mempcpy_chk@plt+0x3b34>
   14b80:	mov	sl, r6
   14b84:	b	14bf4 <__mempcpy_chk@plt+0x3ba0>
   14b88:	str	r1, [fp, #-32]	; 0xffffffe0
   14b8c:	mov	r0, #8
   14b90:	str	r0, [sp]
   14b94:	movw	r9, #33016	; 0x80f8
   14b98:	movt	r9, #2
   14b9c:	subs	r0, r6, r9
   14ba0:	movne	r0, r6
   14ba4:	sub	r1, r5, r1
   14ba8:	add	r2, r1, #1
   14bac:	sub	r1, fp, #32
   14bb0:	mvn	r3, #-2147483648	; 0x80000000
   14bb4:	bl	15b1c <__mempcpy_chk@plt+0x4ac8>
   14bb8:	mov	sl, r0
   14bbc:	str	r0, [r4]
   14bc0:	cmp	r6, r9
   14bc4:	bne	14bd0 <__mempcpy_chk@plt+0x3b7c>
   14bc8:	ldrd	r0, [r9]
   14bcc:	stm	sl, {r0, r1}
   14bd0:	ldr	r1, [r8]
   14bd4:	add	r0, sl, r1, lsl #3
   14bd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14bdc:	sub	r1, r2, r1
   14be0:	lsl	r2, r1, #3
   14be4:	mov	r1, #0
   14be8:	bl	10fa0 <memset@plt>
   14bec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14bf0:	str	r0, [r8]
   14bf4:	mov	r9, sl
   14bf8:	ldr	r6, [r9, r5, lsl #3]!
   14bfc:	ldr	r4, [r9, #4]!
   14c00:	ldm	r7, {r0, r1}
   14c04:	ldr	r2, [r7, #40]	; 0x28
   14c08:	ldr	r3, [r7, #44]	; 0x2c
   14c0c:	orr	r8, r1, #1
   14c10:	add	r1, r7, #8
   14c14:	stm	sp, {r0, r8}
   14c18:	str	r1, [sp, #20]
   14c1c:	add	r0, sp, #8
   14c20:	stm	r0, {r1, r2, r3}
   14c24:	mov	r0, r4
   14c28:	mov	r1, r6
   14c2c:	ldr	r2, [sp, #32]
   14c30:	ldr	r3, [sp, #36]	; 0x24
   14c34:	bl	139d0 <__mempcpy_chk@plt+0x297c>
   14c38:	cmp	r6, r0
   14c3c:	bhi	14ca0 <__mempcpy_chk@plt+0x3c4c>
   14c40:	add	r6, r0, #1
   14c44:	str	r6, [sl, r5, lsl #3]
   14c48:	movw	r0, #33176	; 0x8198
   14c4c:	movt	r0, #2
   14c50:	cmp	r4, r0
   14c54:	beq	14c60 <__mempcpy_chk@plt+0x3c0c>
   14c58:	mov	r0, r4
   14c5c:	bl	1277c <__mempcpy_chk@plt+0x1728>
   14c60:	mov	r0, r6
   14c64:	bl	15a40 <__mempcpy_chk@plt+0x49ec>
   14c68:	mov	r4, r0
   14c6c:	str	r0, [r9]
   14c70:	ldr	r0, [r7]
   14c74:	ldr	r1, [r7, #40]	; 0x28
   14c78:	ldr	r2, [r7, #44]	; 0x2c
   14c7c:	stm	sp, {r0, r8}
   14c80:	ldr	r0, [sp, #20]
   14c84:	add	r3, sp, #8
   14c88:	stm	r3, {r0, r1, r2}
   14c8c:	mov	r0, r4
   14c90:	mov	r1, r6
   14c94:	ldr	r2, [sp, #32]
   14c98:	ldr	r3, [sp, #36]	; 0x24
   14c9c:	bl	139d0 <__mempcpy_chk@plt+0x297c>
   14ca0:	ldr	r0, [sp, #28]
   14ca4:	ldr	r1, [sp, #24]
   14ca8:	str	r1, [r0]
   14cac:	mov	r0, r4
   14cb0:	sub	sp, fp, #28
   14cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb8:	bl	11030 <abort@plt>
   14cbc:	movw	r3, #33128	; 0x8168
   14cc0:	movt	r3, #2
   14cc4:	b	14b24 <__mempcpy_chk@plt+0x3ad0>
   14cc8:	mov	r1, r0
   14ccc:	mov	r0, #0
   14cd0:	b	14b14 <__mempcpy_chk@plt+0x3ac0>
   14cd4:	mov	r2, r1
   14cd8:	mov	r1, r0
   14cdc:	mov	r0, #0
   14ce0:	b	14cbc <__mempcpy_chk@plt+0x3c68>
   14ce4:	push	{r4, r5, r6, sl, fp, lr}
   14ce8:	add	fp, sp, #16
   14cec:	sub	sp, sp, #48	; 0x30
   14cf0:	mov	r4, r2
   14cf4:	mov	r5, r0
   14cf8:	mov	r6, sp
   14cfc:	mov	r0, r6
   14d00:	bl	14d20 <__mempcpy_chk@plt+0x3ccc>
   14d04:	mov	r0, r5
   14d08:	mov	r1, r4
   14d0c:	mvn	r2, #0
   14d10:	mov	r3, r6
   14d14:	bl	14b24 <__mempcpy_chk@plt+0x3ad0>
   14d18:	sub	sp, fp, #16
   14d1c:	pop	{r4, r5, r6, sl, fp, pc}
   14d20:	push	{fp, lr}
   14d24:	mov	fp, sp
   14d28:	vmov.i32	q8, #0	; 0x00000000
   14d2c:	mov	r2, #32
   14d30:	mov	r3, r0
   14d34:	vst1.32	{d16-d17}, [r3], r2
   14d38:	vst1.32	{d16-d17}, [r3]
   14d3c:	add	r2, r0, #16
   14d40:	vst1.32	{d16-d17}, [r2]
   14d44:	cmp	r1, #10
   14d48:	strne	r1, [r0]
   14d4c:	popne	{fp, pc}
   14d50:	bl	11030 <abort@plt>
   14d54:	push	{r4, r5, r6, r7, fp, lr}
   14d58:	add	fp, sp, #16
   14d5c:	sub	sp, sp, #48	; 0x30
   14d60:	mov	r4, r3
   14d64:	mov	r5, r2
   14d68:	mov	r6, r0
   14d6c:	mov	r7, sp
   14d70:	mov	r0, r7
   14d74:	bl	14d20 <__mempcpy_chk@plt+0x3ccc>
   14d78:	mov	r0, r6
   14d7c:	mov	r1, r5
   14d80:	mov	r2, r4
   14d84:	mov	r3, r7
   14d88:	bl	14b24 <__mempcpy_chk@plt+0x3ad0>
   14d8c:	sub	sp, fp, #16
   14d90:	pop	{r4, r5, r6, r7, fp, pc}
   14d94:	mov	r2, r1
   14d98:	mov	r1, r0
   14d9c:	mov	r0, #0
   14da0:	b	14ce4 <__mempcpy_chk@plt+0x3c90>
   14da4:	mov	r3, r2
   14da8:	mov	r2, r1
   14dac:	mov	r1, r0
   14db0:	mov	r0, #0
   14db4:	b	14d54 <__mempcpy_chk@plt+0x3d00>
   14db8:	push	{r4, r5, r6, sl, fp, lr}
   14dbc:	add	fp, sp, #16
   14dc0:	sub	sp, sp, #48	; 0x30
   14dc4:	mov	r4, r1
   14dc8:	mov	r5, r0
   14dcc:	movw	r0, #33128	; 0x8168
   14dd0:	movt	r0, #2
   14dd4:	add	r1, r0, #16
   14dd8:	mov	r3, #32
   14ddc:	vld1.64	{d16-d17}, [r0], r3
   14de0:	vld1.64	{d18-d19}, [r1]
   14de4:	mov	r6, sp
   14de8:	add	r1, r6, #16
   14dec:	vld1.64	{d20-d21}, [r0]
   14df0:	vst1.64	{d18-d19}, [r1]
   14df4:	mov	r0, r6
   14df8:	vst1.64	{d16-d17}, [r0], r3
   14dfc:	vst1.64	{d20-d21}, [r0]
   14e00:	mov	r0, r6
   14e04:	mov	r1, r2
   14e08:	mov	r2, #1
   14e0c:	bl	138c4 <__mempcpy_chk@plt+0x2870>
   14e10:	mov	r0, #0
   14e14:	mov	r1, r5
   14e18:	mov	r2, r4
   14e1c:	mov	r3, r6
   14e20:	bl	14b24 <__mempcpy_chk@plt+0x3ad0>
   14e24:	sub	sp, fp, #16
   14e28:	pop	{r4, r5, r6, sl, fp, pc}
   14e2c:	mov	r2, r1
   14e30:	mvn	r1, #0
   14e34:	b	14db8 <__mempcpy_chk@plt+0x3d64>
   14e38:	mov	r1, #58	; 0x3a
   14e3c:	b	14e2c <__mempcpy_chk@plt+0x3dd8>
   14e40:	mov	r2, #58	; 0x3a
   14e44:	b	14db8 <__mempcpy_chk@plt+0x3d64>
   14e48:	push	{r4, r5, r6, sl, fp, lr}
   14e4c:	add	fp, sp, #16
   14e50:	sub	sp, sp, #48	; 0x30
   14e54:	mov	r4, r2
   14e58:	mov	r5, r0
   14e5c:	mov	r6, sp
   14e60:	mov	r0, r6
   14e64:	bl	14d20 <__mempcpy_chk@plt+0x3ccc>
   14e68:	mov	r0, r6
   14e6c:	mov	r1, #58	; 0x3a
   14e70:	mov	r2, #1
   14e74:	bl	138c4 <__mempcpy_chk@plt+0x2870>
   14e78:	mov	r0, r5
   14e7c:	mov	r1, r4
   14e80:	mvn	r2, #0
   14e84:	mov	r3, r6
   14e88:	bl	14b24 <__mempcpy_chk@plt+0x3ad0>
   14e8c:	sub	sp, fp, #16
   14e90:	pop	{r4, r5, r6, sl, fp, pc}
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	sub	sp, sp, #8
   14ea0:	mvn	ip, #0
   14ea4:	str	ip, [sp]
   14ea8:	bl	14eb4 <__mempcpy_chk@plt+0x3e60>
   14eac:	mov	sp, fp
   14eb0:	pop	{fp, pc}
   14eb4:	push	{r4, r5, r6, r7, fp, lr}
   14eb8:	add	fp, sp, #16
   14ebc:	sub	sp, sp, #48	; 0x30
   14ec0:	mov	r7, r3
   14ec4:	mov	r5, r0
   14ec8:	movw	r0, #33128	; 0x8168
   14ecc:	movt	r0, #2
   14ed0:	add	r3, r0, #16
   14ed4:	mov	r4, #32
   14ed8:	vld1.64	{d16-d17}, [r0], r4
   14edc:	vld1.64	{d18-d19}, [r3]
   14ee0:	mov	r6, sp
   14ee4:	add	r3, r6, #16
   14ee8:	vld1.64	{d20-d21}, [r0]
   14eec:	vst1.64	{d18-d19}, [r3]
   14ef0:	mov	r0, r6
   14ef4:	vst1.64	{d16-d17}, [r0], r4
   14ef8:	vst1.64	{d20-d21}, [r0]
   14efc:	mov	r0, r6
   14f00:	bl	1391c <__mempcpy_chk@plt+0x28c8>
   14f04:	ldr	r2, [fp, #8]
   14f08:	mov	r0, r5
   14f0c:	mov	r1, r7
   14f10:	mov	r3, r6
   14f14:	bl	14b24 <__mempcpy_chk@plt+0x3ad0>
   14f18:	sub	sp, fp, #16
   14f1c:	pop	{r4, r5, r6, r7, fp, pc}
   14f20:	mov	r3, r2
   14f24:	mov	r2, r1
   14f28:	mov	r1, r0
   14f2c:	mov	r0, #0
   14f30:	b	14e94 <__mempcpy_chk@plt+0x3e40>
   14f34:	push	{fp, lr}
   14f38:	mov	fp, sp
   14f3c:	sub	sp, sp, #8
   14f40:	mov	ip, r2
   14f44:	mov	r2, r1
   14f48:	mov	r1, r0
   14f4c:	str	r3, [sp]
   14f50:	mov	r0, #0
   14f54:	mov	r3, ip
   14f58:	bl	14eb4 <__mempcpy_chk@plt+0x3e60>
   14f5c:	mov	sp, fp
   14f60:	pop	{fp, pc}
   14f64:	movw	r3, #33024	; 0x8100
   14f68:	movt	r3, #2
   14f6c:	b	14b24 <__mempcpy_chk@plt+0x3ad0>
   14f70:	mov	r2, r1
   14f74:	mov	r1, r0
   14f78:	mov	r0, #0
   14f7c:	b	14f64 <__mempcpy_chk@plt+0x3f10>
   14f80:	mvn	r2, #0
   14f84:	b	14f64 <__mempcpy_chk@plt+0x3f10>
   14f88:	mov	r1, r0
   14f8c:	mov	r0, #0
   14f90:	b	14f80 <__mempcpy_chk@plt+0x3f2c>
   14f94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f98:	add	fp, sp, #24
   14f9c:	sub	sp, sp, #16
   14fa0:	mov	r4, r1
   14fa4:	mov	r5, r0
   14fa8:	mov	r7, #0
   14fac:	mov	r0, #0
   14fb0:	mov	r1, r5
   14fb4:	mov	r2, #5
   14fb8:	bl	10e74 <dcgettext@plt>
   14fbc:	cmp	r0, r5
   14fc0:	beq	14fcc <__mempcpy_chk@plt+0x3f78>
   14fc4:	sub	sp, fp, #24
   14fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fcc:	bl	165d4 <__mempcpy_chk@plt+0x5580>
   14fd0:	mov	r6, r0
   14fd4:	mov	r8, #56	; 0x38
   14fd8:	mov	r0, #45	; 0x2d
   14fdc:	stm	sp, {r0, r8}
   14fe0:	str	r7, [sp, #8]
   14fe4:	str	r7, [sp, #12]
   14fe8:	mov	r0, r6
   14fec:	mov	r1, #85	; 0x55
   14ff0:	mov	r2, #84	; 0x54
   14ff4:	mov	r3, #70	; 0x46
   14ff8:	bl	15090 <__mempcpy_chk@plt+0x403c>
   14ffc:	cmp	r0, #0
   15000:	beq	1501c <__mempcpy_chk@plt+0x3fc8>
   15004:	ldrb	r1, [r5]
   15008:	movw	r2, #29108	; 0x71b4
   1500c:	movt	r2, #1
   15010:	movw	r0, #29112	; 0x71b8
   15014:	movt	r0, #1
   15018:	b	15060 <__mempcpy_chk@plt+0x400c>
   1501c:	mov	r0, #48	; 0x30
   15020:	mov	r1, #51	; 0x33
   15024:	str	r8, [sp]
   15028:	stmib	sp, {r0, r1}
   1502c:	str	r0, [sp, #12]
   15030:	mov	r0, r6
   15034:	mov	r1, #71	; 0x47
   15038:	mov	r2, #66	; 0x42
   1503c:	mov	r3, #49	; 0x31
   15040:	bl	15090 <__mempcpy_chk@plt+0x403c>
   15044:	cmp	r0, #0
   15048:	beq	15070 <__mempcpy_chk@plt+0x401c>
   1504c:	ldrb	r1, [r5]
   15050:	movw	r2, #29116	; 0x71bc
   15054:	movt	r2, #1
   15058:	movw	r0, #29120	; 0x71c0
   1505c:	movt	r0, #1
   15060:	cmp	r1, #96	; 0x60
   15064:	moveq	r0, r2
   15068:	sub	sp, fp, #24
   1506c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15070:	movw	r1, #29102	; 0x71ae
   15074:	movt	r1, #1
   15078:	movw	r0, #29106	; 0x71b2
   1507c:	movt	r0, #1
   15080:	cmp	r4, #9
   15084:	moveq	r0, r1
   15088:	sub	sp, fp, #24
   1508c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15090:	push	{r4, r5, r6, r7, fp, lr}
   15094:	add	fp, sp, #16
   15098:	sub	sp, sp, #16
   1509c:	mov	r4, r3
   150a0:	mov	r5, r2
   150a4:	mov	r7, r1
   150a8:	mov	r6, r0
   150ac:	mov	r0, r1
   150b0:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   150b4:	ldrb	r1, [r6]
   150b8:	cmp	r0, #0
   150bc:	andne	r1, r1, #223	; 0xdf
   150c0:	mov	r0, #0
   150c4:	cmp	r1, r7
   150c8:	bne	15100 <__mempcpy_chk@plt+0x40ac>
   150cc:	cmp	r7, #0
   150d0:	beq	15108 <__mempcpy_chk@plt+0x40b4>
   150d4:	ldr	r0, [fp, #20]
   150d8:	ldr	r1, [fp, #16]
   150dc:	ldr	r2, [fp, #12]
   150e0:	ldr	r3, [fp, #8]
   150e4:	str	r2, [sp]
   150e8:	str	r1, [sp, #4]
   150ec:	str	r0, [sp, #8]
   150f0:	mov	r0, r6
   150f4:	mov	r1, r5
   150f8:	mov	r2, r4
   150fc:	bl	15114 <__mempcpy_chk@plt+0x40c0>
   15100:	sub	sp, fp, #16
   15104:	pop	{r4, r5, r6, r7, fp, pc}
   15108:	mov	r0, #1
   1510c:	sub	sp, fp, #16
   15110:	pop	{r4, r5, r6, r7, fp, pc}
   15114:	push	{r4, r5, r6, r7, fp, lr}
   15118:	add	fp, sp, #16
   1511c:	sub	sp, sp, #8
   15120:	mov	r4, r3
   15124:	mov	r5, r2
   15128:	mov	r7, r1
   1512c:	mov	r6, r0
   15130:	mov	r0, r1
   15134:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   15138:	ldrb	r1, [r6, #1]
   1513c:	cmp	r0, #0
   15140:	andne	r1, r1, #223	; 0xdf
   15144:	mov	r0, #0
   15148:	cmp	r1, r7
   1514c:	bne	1517c <__mempcpy_chk@plt+0x4128>
   15150:	cmp	r7, #0
   15154:	beq	15184 <__mempcpy_chk@plt+0x4130>
   15158:	ldr	r0, [fp, #16]
   1515c:	ldr	r1, [fp, #12]
   15160:	ldr	r3, [fp, #8]
   15164:	str	r1, [sp]
   15168:	str	r0, [sp, #4]
   1516c:	mov	r0, r6
   15170:	mov	r1, r5
   15174:	mov	r2, r4
   15178:	bl	15190 <__mempcpy_chk@plt+0x413c>
   1517c:	sub	sp, fp, #16
   15180:	pop	{r4, r5, r6, r7, fp, pc}
   15184:	mov	r0, #1
   15188:	sub	sp, fp, #16
   1518c:	pop	{r4, r5, r6, r7, fp, pc}
   15190:	push	{r4, r5, r6, r7, fp, lr}
   15194:	add	fp, sp, #16
   15198:	sub	sp, sp, #8
   1519c:	mov	r4, r3
   151a0:	mov	r5, r2
   151a4:	mov	r7, r1
   151a8:	mov	r6, r0
   151ac:	mov	r0, r1
   151b0:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   151b4:	ldrb	r1, [r6, #2]
   151b8:	cmp	r0, #0
   151bc:	andne	r1, r1, #223	; 0xdf
   151c0:	mov	r0, #0
   151c4:	cmp	r1, r7
   151c8:	bne	151f0 <__mempcpy_chk@plt+0x419c>
   151cc:	cmp	r7, #0
   151d0:	beq	151f8 <__mempcpy_chk@plt+0x41a4>
   151d4:	ldr	r0, [fp, #12]
   151d8:	ldr	r3, [fp, #8]
   151dc:	str	r0, [sp]
   151e0:	mov	r0, r6
   151e4:	mov	r1, r5
   151e8:	mov	r2, r4
   151ec:	bl	15204 <__mempcpy_chk@plt+0x41b0>
   151f0:	sub	sp, fp, #16
   151f4:	pop	{r4, r5, r6, r7, fp, pc}
   151f8:	mov	r0, #1
   151fc:	sub	sp, fp, #16
   15200:	pop	{r4, r5, r6, r7, fp, pc}
   15204:	push	{r4, r5, r6, r7, fp, lr}
   15208:	add	fp, sp, #16
   1520c:	mov	r4, r3
   15210:	mov	r5, r2
   15214:	mov	r7, r1
   15218:	mov	r6, r0
   1521c:	mov	r0, r1
   15220:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   15224:	ldrb	r1, [r6, #3]
   15228:	ldr	r3, [fp, #8]
   1522c:	cmp	r0, #0
   15230:	andne	r1, r1, #223	; 0xdf
   15234:	mov	r0, #0
   15238:	cmp	r1, r7
   1523c:	bne	15260 <__mempcpy_chk@plt+0x420c>
   15240:	cmp	r7, #0
   15244:	beq	1525c <__mempcpy_chk@plt+0x4208>
   15248:	mov	r0, r6
   1524c:	mov	r1, r5
   15250:	mov	r2, r4
   15254:	pop	{r4, r5, r6, r7, fp, lr}
   15258:	b	15264 <__mempcpy_chk@plt+0x4210>
   1525c:	mov	r0, #1
   15260:	pop	{r4, r5, r6, r7, fp, pc}
   15264:	push	{r4, r5, r6, r7, fp, lr}
   15268:	add	fp, sp, #16
   1526c:	mov	r4, r3
   15270:	mov	r5, r2
   15274:	mov	r7, r1
   15278:	mov	r6, r0
   1527c:	mov	r0, r1
   15280:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   15284:	ldrb	r1, [r6, #4]
   15288:	cmp	r0, #0
   1528c:	andne	r1, r1, #223	; 0xdf
   15290:	mov	r0, #0
   15294:	cmp	r1, r7
   15298:	bne	152bc <__mempcpy_chk@plt+0x4268>
   1529c:	cmp	r7, #0
   152a0:	beq	152b8 <__mempcpy_chk@plt+0x4264>
   152a4:	mov	r0, r6
   152a8:	mov	r1, r5
   152ac:	mov	r2, r4
   152b0:	pop	{r4, r5, r6, r7, fp, lr}
   152b4:	b	152c0 <__mempcpy_chk@plt+0x426c>
   152b8:	mov	r0, #1
   152bc:	pop	{r4, r5, r6, r7, fp, pc}
   152c0:	push	{r4, r5, r6, sl, fp, lr}
   152c4:	add	fp, sp, #16
   152c8:	mov	r4, r2
   152cc:	mov	r6, r1
   152d0:	mov	r5, r0
   152d4:	mov	r0, r1
   152d8:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   152dc:	ldrb	r1, [r5, #5]
   152e0:	cmp	r0, #0
   152e4:	andne	r1, r1, #223	; 0xdf
   152e8:	mov	r0, #0
   152ec:	cmp	r1, r6
   152f0:	bne	15310 <__mempcpy_chk@plt+0x42bc>
   152f4:	cmp	r6, #0
   152f8:	beq	1530c <__mempcpy_chk@plt+0x42b8>
   152fc:	mov	r0, r5
   15300:	mov	r1, r4
   15304:	pop	{r4, r5, r6, sl, fp, lr}
   15308:	b	15314 <__mempcpy_chk@plt+0x42c0>
   1530c:	mov	r0, #1
   15310:	pop	{r4, r5, r6, sl, fp, pc}
   15314:	push	{r4, r5, fp, lr}
   15318:	add	fp, sp, #8
   1531c:	mov	r5, r1
   15320:	mov	r4, r0
   15324:	mov	r0, r1
   15328:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   1532c:	ldrb	r1, [r4, #6]
   15330:	cmp	r0, #0
   15334:	andne	r1, r1, #223	; 0xdf
   15338:	mov	r0, #0
   1533c:	cmp	r1, r5
   15340:	popne	{r4, r5, fp, pc}
   15344:	cmp	r5, #0
   15348:	beq	15358 <__mempcpy_chk@plt+0x4304>
   1534c:	mov	r0, r4
   15350:	pop	{r4, r5, fp, lr}
   15354:	b	15360 <__mempcpy_chk@plt+0x430c>
   15358:	mov	r0, #1
   1535c:	pop	{r4, r5, fp, pc}
   15360:	push	{r4, sl, fp, lr}
   15364:	add	fp, sp, #8
   15368:	mov	r4, r0
   1536c:	mov	r0, #0
   15370:	bl	162a4 <__mempcpy_chk@plt+0x5250>
   15374:	ldrb	r1, [r4, #7]
   15378:	cmp	r0, #0
   1537c:	beq	15390 <__mempcpy_chk@plt+0x433c>
   15380:	tst	r1, #223	; 0xdf
   15384:	bne	15398 <__mempcpy_chk@plt+0x4344>
   15388:	mov	r0, #1
   1538c:	pop	{r4, sl, fp, pc}
   15390:	cmp	r1, #0
   15394:	beq	15388 <__mempcpy_chk@plt+0x4334>
   15398:	mov	r0, #0
   1539c:	pop	{r4, sl, fp, pc}
   153a0:	push	{r4, r5, r6, sl, fp, lr}
   153a4:	add	fp, sp, #16
   153a8:	mov	r5, r1
   153ac:	ldr	r4, [r0], #8
   153b0:	cmp	r4, r0
   153b4:	beq	153d8 <__mempcpy_chk@plt+0x4384>
   153b8:	mov	r0, r4
   153bc:	mov	r1, r5
   153c0:	bl	15e54 <__mempcpy_chk@plt+0x4e00>
   153c4:	mov	r6, r0
   153c8:	cmp	r0, #0
   153cc:	moveq	r6, r4
   153d0:	mov	r0, r6
   153d4:	pop	{r4, r5, r6, sl, fp, pc}
   153d8:	mov	r0, r5
   153dc:	bl	15e24 <__mempcpy_chk@plt+0x4dd0>
   153e0:	cmp	r0, #0
   153e4:	beq	15400 <__mempcpy_chk@plt+0x43ac>
   153e8:	mov	r6, r0
   153ec:	mov	r1, r4
   153f0:	mov	r2, r5
   153f4:	bl	10e5c <memcpy@plt>
   153f8:	mov	r0, r6
   153fc:	pop	{r4, r5, r6, sl, fp, pc}
   15400:	mov	r6, #0
   15404:	mov	r0, r6
   15408:	pop	{r4, r5, r6, sl, fp, pc}
   1540c:	push	{r4, r5, fp, lr}
   15410:	add	fp, sp, #8
   15414:	mov	r4, r0
   15418:	ldr	r5, [r0, #4]
   1541c:	bl	15468 <__mempcpy_chk@plt+0x4414>
   15420:	ldr	r0, [r4, #4]
   15424:	cmp	r0, r5, lsl #1
   15428:	bhi	1544c <__mempcpy_chk@plt+0x43f8>
   1542c:	lsl	r5, r5, #1
   15430:	mov	r0, r5
   15434:	bl	15e24 <__mempcpy_chk@plt+0x4dd0>
   15438:	cmp	r0, #0
   1543c:	stmne	r4, {r0, r5}
   15440:	movne	r0, #1
   15444:	popne	{r4, r5, fp, pc}
   15448:	b	15458 <__mempcpy_chk@plt+0x4404>
   1544c:	bl	10f88 <__errno_location@plt>
   15450:	mov	r1, #12
   15454:	str	r1, [r0]
   15458:	mov	r0, r4
   1545c:	bl	1547c <__mempcpy_chk@plt+0x4428>
   15460:	mov	r0, #0
   15464:	pop	{r4, r5, fp, pc}
   15468:	mov	r1, r0
   1546c:	ldr	r0, [r1], #8
   15470:	cmp	r0, r1
   15474:	bxeq	lr
   15478:	b	1277c <__mempcpy_chk@plt+0x1728>
   1547c:	mov	r1, #1024	; 0x400
   15480:	add	r2, r0, #8
   15484:	str	r2, [r0]
   15488:	str	r1, [r0, #4]
   1548c:	bx	lr
   15490:	push	{r4, r5, r6, r7, fp, lr}
   15494:	add	fp, sp, #16
   15498:	mov	r4, r0
   1549c:	add	r5, r0, #8
   154a0:	ldrd	r0, [r0]
   154a4:	lsl	r7, r1, #1
   154a8:	cmp	r0, r5
   154ac:	beq	154d0 <__mempcpy_chk@plt+0x447c>
   154b0:	cmp	r7, r1
   154b4:	bcc	15504 <__mempcpy_chk@plt+0x44b0>
   154b8:	mov	r1, r7
   154bc:	bl	15e54 <__mempcpy_chk@plt+0x4e00>
   154c0:	mov	r6, r0
   154c4:	cmp	r0, #0
   154c8:	bne	154f0 <__mempcpy_chk@plt+0x449c>
   154cc:	b	15510 <__mempcpy_chk@plt+0x44bc>
   154d0:	mov	r0, r7
   154d4:	bl	15e24 <__mempcpy_chk@plt+0x4dd0>
   154d8:	cmp	r0, #0
   154dc:	beq	154fc <__mempcpy_chk@plt+0x44a8>
   154e0:	mov	r6, r0
   154e4:	ldr	r2, [r4, #4]
   154e8:	mov	r1, r5
   154ec:	bl	10e5c <memcpy@plt>
   154f0:	strd	r6, [r4]
   154f4:	mov	r0, #1
   154f8:	pop	{r4, r5, r6, r7, fp, pc}
   154fc:	mov	r0, #0
   15500:	pop	{r4, r5, r6, r7, fp, pc}
   15504:	bl	10f88 <__errno_location@plt>
   15508:	mov	r1, #12
   1550c:	str	r1, [r0]
   15510:	ldr	r0, [r4]
   15514:	bl	1277c <__mempcpy_chk@plt+0x1728>
   15518:	mov	r0, r4
   1551c:	bl	15528 <__mempcpy_chk@plt+0x44d4>
   15520:	mov	r0, #0
   15524:	pop	{r4, r5, r6, r7, fp, pc}
   15528:	mov	r1, #1024	; 0x400
   1552c:	add	r2, r0, #8
   15530:	str	r2, [r0]
   15534:	str	r1, [r0, #4]
   15538:	bx	lr
   1553c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15540:	add	fp, sp, #24
   15544:	sub	sp, sp, #32
   15548:	mov	r4, r2
   1554c:	mov	r8, r0
   15550:	ldr	r6, [fp, #12]
   15554:	ldr	r7, [fp, #8]
   15558:	cmp	r1, #0
   1555c:	beq	15584 <__mempcpy_chk@plt+0x4530>
   15560:	mov	r5, r1
   15564:	str	r4, [sp]
   15568:	str	r3, [sp, #4]
   1556c:	movw	r2, #29208	; 0x7218
   15570:	movt	r2, #1
   15574:	mov	r0, r8
   15578:	mov	r1, #1
   1557c:	mov	r3, r5
   15580:	b	1559c <__mempcpy_chk@plt+0x4548>
   15584:	str	r3, [sp]
   15588:	movw	r2, #29220	; 0x7224
   1558c:	movt	r2, #1
   15590:	mov	r0, r8
   15594:	mov	r1, #1
   15598:	mov	r3, r4
   1559c:	bl	10fc4 <__fprintf_chk@plt>
   155a0:	movw	r1, #29227	; 0x722b
   155a4:	movt	r1, #1
   155a8:	mov	r0, #0
   155ac:	mov	r2, #5
   155b0:	bl	10e74 <dcgettext@plt>
   155b4:	mov	r3, r0
   155b8:	movw	r0, #2022	; 0x7e6
   155bc:	str	r0, [sp]
   155c0:	movw	r2, #29945	; 0x74f9
   155c4:	movt	r2, #1
   155c8:	mov	r0, r8
   155cc:	mov	r1, #1
   155d0:	bl	10fc4 <__fprintf_chk@plt>
   155d4:	movw	r4, #27231	; 0x6a5f
   155d8:	movt	r4, #1
   155dc:	mov	r0, r4
   155e0:	mov	r1, r8
   155e4:	bl	10dfc <fputs_unlocked@plt>
   155e8:	movw	r1, #29231	; 0x722f
   155ec:	movt	r1, #1
   155f0:	mov	r0, #0
   155f4:	mov	r2, #5
   155f8:	bl	10e74 <dcgettext@plt>
   155fc:	mov	r2, r0
   15600:	movw	r3, #29402	; 0x72da
   15604:	movt	r3, #1
   15608:	mov	r0, r8
   1560c:	mov	r1, #1
   15610:	bl	10fc4 <__fprintf_chk@plt>
   15614:	mov	r0, r4
   15618:	mov	r1, r8
   1561c:	bl	10dfc <fputs_unlocked@plt>
   15620:	cmp	r6, #9
   15624:	bhi	15660 <__mempcpy_chk@plt+0x460c>
   15628:	add	r0, pc, #0
   1562c:	ldr	pc, [r0, r6, lsl #2]
   15630:	andeq	r5, r1, r8, asr r6
   15634:	andeq	r5, r1, ip, ror #12
   15638:	muleq	r1, ip, r6
   1563c:	andeq	r5, r1, r4, asr #13
   15640:	andeq	r5, r1, ip, ror #13
   15644:	andeq	r5, r1, r4, lsl r7
   15648:	andeq	r5, r1, ip, lsr r7
   1564c:	andeq	r5, r1, r4, ror r7
   15650:	andeq	r5, r1, r4, lsl r8
   15654:			; <UNDEFINED> instruction: 0x000157bc
   15658:	sub	sp, fp, #24
   1565c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15660:	movw	r1, #29755	; 0x743b
   15664:	movt	r1, #1
   15668:	b	157c4 <__mempcpy_chk@plt+0x4770>
   1566c:	movw	r1, #29436	; 0x72fc
   15670:	movt	r1, #1
   15674:	mov	r0, #0
   15678:	mov	r2, #5
   1567c:	bl	10e74 <dcgettext@plt>
   15680:	mov	r2, r0
   15684:	ldr	r3, [r7]
   15688:	mov	r0, r8
   1568c:	mov	r1, #1
   15690:	sub	sp, fp, #24
   15694:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15698:	b	10fc4 <__fprintf_chk@plt>
   1569c:	movw	r1, #29452	; 0x730c
   156a0:	movt	r1, #1
   156a4:	mov	r0, #0
   156a8:	mov	r2, #5
   156ac:	bl	10e74 <dcgettext@plt>
   156b0:	mov	r2, r0
   156b4:	ldr	r3, [r7]
   156b8:	ldr	r0, [r7, #4]
   156bc:	str	r0, [sp]
   156c0:	b	157b0 <__mempcpy_chk@plt+0x475c>
   156c4:	movw	r1, #29475	; 0x7323
   156c8:	movt	r1, #1
   156cc:	mov	r0, #0
   156d0:	mov	r2, #5
   156d4:	bl	10e74 <dcgettext@plt>
   156d8:	mov	r2, r0
   156dc:	ldr	r3, [r7]
   156e0:	ldmib	r7, {r0, r1}
   156e4:	stm	sp, {r0, r1}
   156e8:	b	157b0 <__mempcpy_chk@plt+0x475c>
   156ec:	movw	r1, #29503	; 0x733f
   156f0:	movt	r1, #1
   156f4:	mov	r0, #0
   156f8:	mov	r2, #5
   156fc:	bl	10e74 <dcgettext@plt>
   15700:	mov	r2, r0
   15704:	ldr	r3, [r7]
   15708:	ldmib	r7, {r0, r1, r7}
   1570c:	stm	sp, {r0, r1, r7}
   15710:	b	157b0 <__mempcpy_chk@plt+0x475c>
   15714:	movw	r1, #29535	; 0x735f
   15718:	movt	r1, #1
   1571c:	mov	r0, #0
   15720:	mov	r2, #5
   15724:	bl	10e74 <dcgettext@plt>
   15728:	mov	r2, r0
   1572c:	ldr	r3, [r7]
   15730:	ldmib	r7, {r0, r1, r6, r7}
   15734:	stm	sp, {r0, r1, r6, r7}
   15738:	b	157b0 <__mempcpy_chk@plt+0x475c>
   1573c:	movw	r1, #29571	; 0x7383
   15740:	movt	r1, #1
   15744:	mov	r0, #0
   15748:	mov	r2, #5
   1574c:	bl	10e74 <dcgettext@plt>
   15750:	mov	r2, r0
   15754:	ldr	r3, [r7]
   15758:	ldmib	r7, {r0, r1, r6}
   1575c:	ldr	r5, [r7, #16]
   15760:	ldr	r7, [r7, #20]
   15764:	stm	sp, {r0, r1, r6}
   15768:	str	r5, [sp, #12]
   1576c:	str	r7, [sp, #16]
   15770:	b	157b0 <__mempcpy_chk@plt+0x475c>
   15774:	movw	r1, #29611	; 0x73ab
   15778:	movt	r1, #1
   1577c:	mov	r0, #0
   15780:	mov	r2, #5
   15784:	bl	10e74 <dcgettext@plt>
   15788:	mov	r2, r0
   1578c:	ldr	r3, [r7]
   15790:	ldmib	r7, {r0, r1, r6}
   15794:	ldr	r5, [r7, #16]
   15798:	ldr	r4, [r7, #20]
   1579c:	ldr	r7, [r7, #24]
   157a0:	stm	sp, {r0, r1, r6}
   157a4:	str	r5, [sp, #12]
   157a8:	str	r4, [sp, #16]
   157ac:	str	r7, [sp, #20]
   157b0:	mov	r0, r8
   157b4:	mov	r1, #1
   157b8:	b	15864 <__mempcpy_chk@plt+0x4810>
   157bc:	movw	r1, #29703	; 0x7407
   157c0:	movt	r1, #1
   157c4:	mov	r0, #0
   157c8:	mov	r2, #5
   157cc:	bl	10e74 <dcgettext@plt>
   157d0:	mov	ip, r0
   157d4:	ldr	r3, [r7]
   157d8:	ldr	r0, [r7, #4]
   157dc:	ldr	r1, [r7, #8]
   157e0:	ldr	r6, [r7, #12]
   157e4:	ldr	r5, [r7, #16]
   157e8:	ldr	r4, [r7, #20]
   157ec:	ldr	r2, [r7, #24]
   157f0:	ldr	lr, [r7, #28]
   157f4:	ldr	r7, [r7, #32]
   157f8:	stm	sp, {r0, r1, r6}
   157fc:	str	r5, [sp, #12]
   15800:	str	r4, [sp, #16]
   15804:	str	r2, [sp, #20]
   15808:	str	lr, [sp, #24]
   1580c:	str	r7, [sp, #28]
   15810:	b	15858 <__mempcpy_chk@plt+0x4804>
   15814:	movw	r1, #29655	; 0x73d7
   15818:	movt	r1, #1
   1581c:	mov	r0, #0
   15820:	mov	r2, #5
   15824:	bl	10e74 <dcgettext@plt>
   15828:	mov	ip, r0
   1582c:	ldr	r3, [r7]
   15830:	ldmib	r7, {r0, r1, r6}
   15834:	ldr	r5, [r7, #16]
   15838:	ldr	r4, [r7, #20]
   1583c:	ldr	r2, [r7, #24]
   15840:	ldr	r7, [r7, #28]
   15844:	stm	sp, {r0, r1, r6}
   15848:	str	r5, [sp, #12]
   1584c:	str	r4, [sp, #16]
   15850:	str	r2, [sp, #20]
   15854:	str	r7, [sp, #24]
   15858:	mov	r0, r8
   1585c:	mov	r1, #1
   15860:	mov	r2, ip
   15864:	bl	10fc4 <__fprintf_chk@plt>
   15868:	sub	sp, fp, #24
   1586c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15870:	push	{r4, sl, fp, lr}
   15874:	add	fp, sp, #8
   15878:	sub	sp, sp, #8
   1587c:	mov	lr, #0
   15880:	ldr	ip, [fp, #8]
   15884:	ldr	r4, [ip, lr, lsl #2]
   15888:	add	lr, lr, #1
   1588c:	cmp	r4, #0
   15890:	bne	15884 <__mempcpy_chk@plt+0x4830>
   15894:	sub	r4, lr, #1
   15898:	str	ip, [sp]
   1589c:	str	r4, [sp, #4]
   158a0:	bl	1553c <__mempcpy_chk@plt+0x44e8>
   158a4:	sub	sp, fp, #8
   158a8:	pop	{r4, sl, fp, pc}
   158ac:	push	{r4, r5, fp, lr}
   158b0:	add	fp, sp, #8
   158b4:	sub	sp, sp, #48	; 0x30
   158b8:	mov	ip, #0
   158bc:	ldr	r4, [fp, #8]
   158c0:	add	lr, sp, #8
   158c4:	ldr	r5, [r4]
   158c8:	str	r5, [lr, ip, lsl #2]
   158cc:	cmp	r5, #0
   158d0:	beq	158e8 <__mempcpy_chk@plt+0x4894>
   158d4:	add	ip, ip, #1
   158d8:	add	r4, r4, #4
   158dc:	cmp	ip, #10
   158e0:	bne	158c4 <__mempcpy_chk@plt+0x4870>
   158e4:	mov	ip, #10
   158e8:	str	lr, [sp]
   158ec:	str	ip, [sp, #4]
   158f0:	bl	1553c <__mempcpy_chk@plt+0x44e8>
   158f4:	sub	sp, fp, #8
   158f8:	pop	{r4, r5, fp, pc}
   158fc:	push	{fp, lr}
   15900:	mov	fp, sp
   15904:	sub	sp, sp, #8
   15908:	add	ip, fp, #8
   1590c:	str	ip, [sp, #4]
   15910:	str	ip, [sp]
   15914:	bl	158ac <__mempcpy_chk@plt+0x4858>
   15918:	mov	sp, fp
   1591c:	pop	{fp, pc}
   15920:	push	{fp, lr}
   15924:	mov	fp, sp
   15928:	movw	r0, #33092	; 0x8144
   1592c:	movt	r0, #2
   15930:	ldr	r1, [r0]
   15934:	movw	r0, #27231	; 0x6a5f
   15938:	movt	r0, #1
   1593c:	bl	10dfc <fputs_unlocked@plt>
   15940:	movw	r1, #29815	; 0x7477
   15944:	movt	r1, #1
   15948:	mov	r0, #0
   1594c:	mov	r2, #5
   15950:	bl	10e74 <dcgettext@plt>
   15954:	mov	r1, r0
   15958:	movw	r2, #29835	; 0x748b
   1595c:	movt	r2, #1
   15960:	mov	r0, #1
   15964:	bl	10fac <__printf_chk@plt>
   15968:	movw	r1, #29857	; 0x74a1
   1596c:	movt	r1, #1
   15970:	mov	r0, #0
   15974:	mov	r2, #5
   15978:	bl	10e74 <dcgettext@plt>
   1597c:	mov	r1, r0
   15980:	movw	r2, #27999	; 0x6d5f
   15984:	movt	r2, #1
   15988:	movw	r3, #28161	; 0x6e01
   1598c:	movt	r3, #1
   15990:	mov	r0, #1
   15994:	bl	10fac <__printf_chk@plt>
   15998:	movw	r1, #29877	; 0x74b5
   1599c:	movt	r1, #1
   159a0:	mov	r0, #0
   159a4:	mov	r2, #5
   159a8:	bl	10e74 <dcgettext@plt>
   159ac:	mov	r1, r0
   159b0:	movw	r2, #29916	; 0x74dc
   159b4:	movt	r2, #1
   159b8:	mov	r0, #1
   159bc:	pop	{fp, lr}
   159c0:	b	10fac <__printf_chk@plt>
   159c4:	b	159c8 <__mempcpy_chk@plt+0x4974>
   159c8:	push	{r4, r5, r6, sl, fp, lr}
   159cc:	add	fp, sp, #16
   159d0:	mov	r4, r2
   159d4:	mov	r5, r1
   159d8:	mov	r6, r0
   159dc:	bl	16670 <__mempcpy_chk@plt+0x561c>
   159e0:	cmp	r0, #0
   159e4:	popne	{r4, r5, r6, sl, fp, pc}
   159e8:	cmp	r6, #0
   159ec:	beq	15a00 <__mempcpy_chk@plt+0x49ac>
   159f0:	cmp	r5, #0
   159f4:	cmpne	r4, #0
   159f8:	bne	15a00 <__mempcpy_chk@plt+0x49ac>
   159fc:	pop	{r4, r5, r6, sl, fp, pc}
   15a00:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   15a04:	push	{fp, lr}
   15a08:	mov	fp, sp
   15a0c:	bl	15e24 <__mempcpy_chk@plt+0x4dd0>
   15a10:	pop	{fp, lr}
   15a14:	b	15a18 <__mempcpy_chk@plt+0x49c4>
   15a18:	cmp	r0, #0
   15a1c:	bxne	lr
   15a20:	push	{fp, lr}
   15a24:	mov	fp, sp
   15a28:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   15a2c:	push	{fp, lr}
   15a30:	mov	fp, sp
   15a34:	bl	165a0 <__mempcpy_chk@plt+0x554c>
   15a38:	pop	{fp, lr}
   15a3c:	b	15a18 <__mempcpy_chk@plt+0x49c4>
   15a40:	b	15a04 <__mempcpy_chk@plt+0x49b0>
   15a44:	push	{r4, r5, fp, lr}
   15a48:	add	fp, sp, #8
   15a4c:	mov	r4, r1
   15a50:	mov	r5, r0
   15a54:	bl	15e54 <__mempcpy_chk@plt+0x4e00>
   15a58:	cmp	r0, #0
   15a5c:	popne	{r4, r5, fp, pc}
   15a60:	cmp	r5, #0
   15a64:	beq	15a74 <__mempcpy_chk@plt+0x4a20>
   15a68:	cmp	r4, #0
   15a6c:	bne	15a74 <__mempcpy_chk@plt+0x4a20>
   15a70:	pop	{r4, r5, fp, pc}
   15a74:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   15a78:	push	{fp, lr}
   15a7c:	mov	fp, sp
   15a80:	bl	165a4 <__mempcpy_chk@plt+0x5550>
   15a84:	pop	{fp, lr}
   15a88:	b	15a18 <__mempcpy_chk@plt+0x49c4>
   15a8c:	push	{fp, lr}
   15a90:	mov	fp, sp
   15a94:	bl	165b4 <__mempcpy_chk@plt+0x5560>
   15a98:	pop	{fp, lr}
   15a9c:	b	15a18 <__mempcpy_chk@plt+0x49c4>
   15aa0:	mov	r2, r1
   15aa4:	mov	r1, r0
   15aa8:	mov	r0, #0
   15aac:	b	159c8 <__mempcpy_chk@plt+0x4974>
   15ab0:	mov	r2, r1
   15ab4:	mov	r1, r0
   15ab8:	mov	r0, #0
   15abc:	b	15a8c <__mempcpy_chk@plt+0x4a38>
   15ac0:	mov	r2, #1
   15ac4:	b	15ac8 <__mempcpy_chk@plt+0x4a74>
   15ac8:	push	{r4, r5, fp, lr}
   15acc:	add	fp, sp, #8
   15ad0:	mov	r4, r1
   15ad4:	ldr	r5, [r1]
   15ad8:	cmp	r0, #0
   15adc:	beq	15af4 <__mempcpy_chk@plt+0x4aa0>
   15ae0:	mov	r1, #1
   15ae4:	add	r1, r1, r5, lsr #1
   15ae8:	adds	r5, r5, r1
   15aec:	bcc	15b0c <__mempcpy_chk@plt+0x4ab8>
   15af0:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   15af4:	cmp	r5, #0
   15af8:	bne	15b0c <__mempcpy_chk@plt+0x4ab8>
   15afc:	mov	r1, #64	; 0x40
   15b00:	udiv	r5, r1, r2
   15b04:	cmp	r2, #64	; 0x40
   15b08:	addhi	r5, r5, #1
   15b0c:	mov	r1, r5
   15b10:	bl	159c8 <__mempcpy_chk@plt+0x4974>
   15b14:	str	r5, [r4]
   15b18:	pop	{r4, r5, fp, pc}
   15b1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b20:	add	fp, sp, #24
   15b24:	mov	r8, r1
   15b28:	ldr	r6, [r1]
   15b2c:	add	r1, r6, r6, asr #1
   15b30:	cmp	r1, r6
   15b34:	mvnvs	r1, #-2147483648	; 0x80000000
   15b38:	cmp	r1, r3
   15b3c:	mov	r5, r1
   15b40:	movgt	r5, r3
   15b44:	cmn	r3, #1
   15b48:	movle	r5, r1
   15b4c:	ldr	r4, [fp, #8]
   15b50:	cmn	r4, #1
   15b54:	ble	15b7c <__mempcpy_chk@plt+0x4b28>
   15b58:	cmp	r4, #0
   15b5c:	beq	15bd0 <__mempcpy_chk@plt+0x4b7c>
   15b60:	cmn	r5, #1
   15b64:	ble	15ba4 <__mempcpy_chk@plt+0x4b50>
   15b68:	mvn	r7, #-2147483648	; 0x80000000
   15b6c:	udiv	r1, r7, r4
   15b70:	cmp	r1, r5
   15b74:	bge	15bd0 <__mempcpy_chk@plt+0x4b7c>
   15b78:	b	15be0 <__mempcpy_chk@plt+0x4b8c>
   15b7c:	cmn	r5, #1
   15b80:	ble	15bc0 <__mempcpy_chk@plt+0x4b6c>
   15b84:	cmn	r4, #1
   15b88:	beq	15bd0 <__mempcpy_chk@plt+0x4b7c>
   15b8c:	mov	r1, #-2147483648	; 0x80000000
   15b90:	sdiv	r1, r1, r4
   15b94:	mvn	r7, #-2147483648	; 0x80000000
   15b98:	cmp	r1, r5
   15b9c:	bge	15bd0 <__mempcpy_chk@plt+0x4b7c>
   15ba0:	b	15be0 <__mempcpy_chk@plt+0x4b8c>
   15ba4:	beq	15bd0 <__mempcpy_chk@plt+0x4b7c>
   15ba8:	mov	r1, #-2147483648	; 0x80000000
   15bac:	sdiv	r1, r1, r5
   15bb0:	mvn	r7, #-2147483648	; 0x80000000
   15bb4:	cmp	r1, r4
   15bb8:	bge	15bd0 <__mempcpy_chk@plt+0x4b7c>
   15bbc:	b	15be0 <__mempcpy_chk@plt+0x4b8c>
   15bc0:	mvn	r7, #-2147483648	; 0x80000000
   15bc4:	sdiv	r1, r7, r4
   15bc8:	cmp	r5, r1
   15bcc:	blt	15be0 <__mempcpy_chk@plt+0x4b8c>
   15bd0:	mul	r1, r5, r4
   15bd4:	mov	r7, #64	; 0x40
   15bd8:	cmp	r1, #63	; 0x3f
   15bdc:	bgt	15be8 <__mempcpy_chk@plt+0x4b94>
   15be0:	sdiv	r5, r7, r4
   15be4:	mul	r1, r5, r4
   15be8:	cmp	r0, #0
   15bec:	moveq	r7, #0
   15bf0:	streq	r7, [r8]
   15bf4:	sub	r7, r5, r6
   15bf8:	cmp	r7, r2
   15bfc:	bge	15ca8 <__mempcpy_chk@plt+0x4c54>
   15c00:	add	r5, r6, r2
   15c04:	mov	r1, #0
   15c08:	cmp	r5, r3
   15c0c:	mov	r2, #0
   15c10:	movwgt	r2, #1
   15c14:	cmn	r3, #1
   15c18:	movwgt	r1, #1
   15c1c:	cmp	r5, r6
   15c20:	bvs	15c90 <__mempcpy_chk@plt+0x4c3c>
   15c24:	ands	r1, r1, r2
   15c28:	bne	15c90 <__mempcpy_chk@plt+0x4c3c>
   15c2c:	cmn	r4, #1
   15c30:	ble	15c58 <__mempcpy_chk@plt+0x4c04>
   15c34:	cmp	r4, #0
   15c38:	beq	15ca4 <__mempcpy_chk@plt+0x4c50>
   15c3c:	cmn	r5, #1
   15c40:	ble	15c7c <__mempcpy_chk@plt+0x4c28>
   15c44:	mvn	r1, #-2147483648	; 0x80000000
   15c48:	udiv	r1, r1, r4
   15c4c:	cmp	r1, r5
   15c50:	bge	15ca4 <__mempcpy_chk@plt+0x4c50>
   15c54:	b	15c90 <__mempcpy_chk@plt+0x4c3c>
   15c58:	cmn	r5, #1
   15c5c:	ble	15c94 <__mempcpy_chk@plt+0x4c40>
   15c60:	cmn	r4, #1
   15c64:	beq	15ca4 <__mempcpy_chk@plt+0x4c50>
   15c68:	mov	r1, #-2147483648	; 0x80000000
   15c6c:	sdiv	r1, r1, r4
   15c70:	cmp	r1, r5
   15c74:	bge	15ca4 <__mempcpy_chk@plt+0x4c50>
   15c78:	b	15c90 <__mempcpy_chk@plt+0x4c3c>
   15c7c:	beq	15ca4 <__mempcpy_chk@plt+0x4c50>
   15c80:	mov	r1, #-2147483648	; 0x80000000
   15c84:	sdiv	r1, r1, r5
   15c88:	cmp	r1, r4
   15c8c:	bge	15ca4 <__mempcpy_chk@plt+0x4c50>
   15c90:	bl	15d8c <__mempcpy_chk@plt+0x4d38>
   15c94:	mvn	r1, #-2147483648	; 0x80000000
   15c98:	sdiv	r1, r1, r4
   15c9c:	cmp	r5, r1
   15ca0:	blt	15c90 <__mempcpy_chk@plt+0x4c3c>
   15ca4:	mul	r1, r5, r4
   15ca8:	bl	15a44 <__mempcpy_chk@plt+0x49f0>
   15cac:	str	r5, [r8]
   15cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cb4:	mov	r1, #1
   15cb8:	b	15cbc <__mempcpy_chk@plt+0x4c68>
   15cbc:	push	{fp, lr}
   15cc0:	mov	fp, sp
   15cc4:	bl	15dd0 <__mempcpy_chk@plt+0x4d7c>
   15cc8:	pop	{fp, lr}
   15ccc:	b	15a18 <__mempcpy_chk@plt+0x49c4>
   15cd0:	mov	r1, #1
   15cd4:	b	15cd8 <__mempcpy_chk@plt+0x4c84>
   15cd8:	push	{fp, lr}
   15cdc:	mov	fp, sp
   15ce0:	bl	165b0 <__mempcpy_chk@plt+0x555c>
   15ce4:	pop	{fp, lr}
   15ce8:	b	15a18 <__mempcpy_chk@plt+0x49c4>
   15cec:	push	{r4, r5, fp, lr}
   15cf0:	add	fp, sp, #8
   15cf4:	mov	r4, r1
   15cf8:	mov	r5, r0
   15cfc:	mov	r0, r1
   15d00:	bl	15a04 <__mempcpy_chk@plt+0x49b0>
   15d04:	mov	r1, r5
   15d08:	mov	r2, r4
   15d0c:	pop	{r4, r5, fp, lr}
   15d10:	b	10e5c <memcpy@plt>
   15d14:	push	{r4, r5, fp, lr}
   15d18:	add	fp, sp, #8
   15d1c:	mov	r4, r1
   15d20:	mov	r5, r0
   15d24:	mov	r0, r1
   15d28:	bl	15a2c <__mempcpy_chk@plt+0x49d8>
   15d2c:	mov	r1, r5
   15d30:	mov	r2, r4
   15d34:	pop	{r4, r5, fp, lr}
   15d38:	b	10e5c <memcpy@plt>
   15d3c:	push	{r4, r5, fp, lr}
   15d40:	add	fp, sp, #8
   15d44:	mov	r4, r1
   15d48:	mov	r5, r0
   15d4c:	add	r0, r1, #1
   15d50:	bl	15a2c <__mempcpy_chk@plt+0x49d8>
   15d54:	mov	r1, #0
   15d58:	strb	r1, [r0, r4]
   15d5c:	mov	r1, r5
   15d60:	mov	r2, r4
   15d64:	pop	{r4, r5, fp, lr}
   15d68:	b	10e5c <memcpy@plt>
   15d6c:	push	{r4, sl, fp, lr}
   15d70:	add	fp, sp, #8
   15d74:	mov	r4, r0
   15d78:	bl	10f7c <strlen@plt>
   15d7c:	add	r1, r0, #1
   15d80:	mov	r0, r4
   15d84:	pop	{r4, sl, fp, lr}
   15d88:	b	15cec <__mempcpy_chk@plt+0x4c98>
   15d8c:	push	{fp, lr}
   15d90:	mov	fp, sp
   15d94:	movw	r0, #33004	; 0x80ec
   15d98:	movt	r0, #2
   15d9c:	ldr	r4, [r0]
   15da0:	movw	r1, #29992	; 0x7528
   15da4:	movt	r1, #1
   15da8:	mov	r0, #0
   15dac:	mov	r2, #5
   15db0:	bl	10e74 <dcgettext@plt>
   15db4:	mov	r3, r0
   15db8:	movw	r2, #28828	; 0x709c
   15dbc:	movt	r2, #1
   15dc0:	mov	r0, r4
   15dc4:	mov	r1, #0
   15dc8:	bl	10f04 <error@plt>
   15dcc:	bl	11030 <abort@plt>
   15dd0:	clz	r2, r1
   15dd4:	lsr	r2, r2, #5
   15dd8:	clz	r3, r0
   15ddc:	lsr	r3, r3, #5
   15de0:	orrs	r2, r3, r2
   15de4:	movwne	r1, #1
   15de8:	movwne	r0, #1
   15dec:	cmp	r1, #0
   15df0:	beq	15e20 <__mempcpy_chk@plt+0x4dcc>
   15df4:	mvn	r2, #-2147483648	; 0x80000000
   15df8:	udiv	r2, r2, r1
   15dfc:	cmp	r2, r0
   15e00:	bcs	15e20 <__mempcpy_chk@plt+0x4dcc>
   15e04:	push	{fp, lr}
   15e08:	mov	fp, sp
   15e0c:	bl	10f88 <__errno_location@plt>
   15e10:	mov	r1, #12
   15e14:	str	r1, [r0]
   15e18:	mov	r0, #0
   15e1c:	pop	{fp, pc}
   15e20:	b	10df0 <calloc@plt>
   15e24:	cmp	r0, #0
   15e28:	movweq	r0, #1
   15e2c:	cmn	r0, #1
   15e30:	ble	15e38 <__mempcpy_chk@plt+0x4de4>
   15e34:	b	10f10 <malloc@plt>
   15e38:	push	{fp, lr}
   15e3c:	mov	fp, sp
   15e40:	bl	10f88 <__errno_location@plt>
   15e44:	mov	r1, #12
   15e48:	str	r1, [r0]
   15e4c:	mov	r0, #0
   15e50:	pop	{fp, pc}
   15e54:	push	{fp, lr}
   15e58:	mov	fp, sp
   15e5c:	cmp	r0, #0
   15e60:	beq	15e7c <__mempcpy_chk@plt+0x4e28>
   15e64:	cmp	r1, #0
   15e68:	beq	15e88 <__mempcpy_chk@plt+0x4e34>
   15e6c:	cmn	r1, #1
   15e70:	ble	15e94 <__mempcpy_chk@plt+0x4e40>
   15e74:	pop	{fp, lr}
   15e78:	b	10e80 <realloc@plt>
   15e7c:	mov	r0, r1
   15e80:	pop	{fp, lr}
   15e84:	b	15e24 <__mempcpy_chk@plt+0x4dd0>
   15e88:	bl	1277c <__mempcpy_chk@plt+0x1728>
   15e8c:	mov	r0, #0
   15e90:	pop	{fp, pc}
   15e94:	bl	10f88 <__errno_location@plt>
   15e98:	mov	r1, #12
   15e9c:	str	r1, [r0]
   15ea0:	mov	r0, #0
   15ea4:	pop	{fp, pc}
   15ea8:	push	{r4, r5, r6, sl, fp, lr}
   15eac:	add	fp, sp, #16
   15eb0:	rsb	lr, r2, #64	; 0x40
   15eb4:	lsr	ip, r0, lr
   15eb8:	rsb	r3, lr, #32
   15ebc:	orr	r3, ip, r1, lsl r3
   15ec0:	rsbs	r5, r2, #32
   15ec4:	lsrpl	r3, r1, r5
   15ec8:	lsl	r4, r0, r2
   15ecc:	subs	r6, r2, #32
   15ed0:	movwpl	r4, #0
   15ed4:	orr	ip, r3, r4
   15ed8:	lsr	r3, r0, r5
   15edc:	orr	r2, r3, r1, lsl r2
   15ee0:	lslpl	r2, r0, r6
   15ee4:	lsr	r0, r1, lr
   15ee8:	cmp	r5, #0
   15eec:	movwpl	r0, #0
   15ef0:	orr	r1, r0, r2
   15ef4:	mov	r0, ip
   15ef8:	pop	{r4, r5, r6, sl, fp, pc}
   15efc:	push	{r4, r5, fp, lr}
   15f00:	add	fp, sp, #8
   15f04:	lsr	ip, r0, r2
   15f08:	rsb	r3, r2, #32
   15f0c:	orr	ip, ip, r1, lsl r3
   15f10:	subs	lr, r2, #32
   15f14:	lsrpl	ip, r1, lr
   15f18:	rsb	r4, r2, #64	; 0x40
   15f1c:	lsl	r5, r0, r4
   15f20:	cmp	r3, #0
   15f24:	movwpl	r5, #0
   15f28:	orr	ip, r5, ip
   15f2c:	rsb	r5, r4, #32
   15f30:	lsr	r5, r0, r5
   15f34:	orr	r4, r5, r1, lsl r4
   15f38:	cmp	r3, #0
   15f3c:	lslpl	r4, r0, r3
   15f40:	lsr	r0, r1, r2
   15f44:	cmp	lr, #0
   15f48:	movwpl	r0, #0
   15f4c:	orr	r1, r4, r0
   15f50:	mov	r0, ip
   15f54:	pop	{r4, r5, fp, pc}
   15f58:	rsb	r1, r1, #32
   15f5c:	ror	r0, r0, r1
   15f60:	bx	lr
   15f64:	ror	r0, r0, r1
   15f68:	bx	lr
   15f6c:	rsb	r1, r1, #32
   15f70:	ror	r0, r0, r1
   15f74:	bx	lr
   15f78:	ror	r0, r0, r1
   15f7c:	bx	lr
   15f80:	and	r2, r1, #15
   15f84:	lsl	r2, r0, r2
   15f88:	rsb	r1, r1, #0
   15f8c:	and	r1, r1, #15
   15f90:	orr	r0, r2, r0, lsr r1
   15f94:	uxth	r0, r0
   15f98:	bx	lr
   15f9c:	rsb	r2, r1, #0
   15fa0:	and	r2, r2, #15
   15fa4:	lsl	r2, r0, r2
   15fa8:	and	r1, r1, #15
   15fac:	orr	r0, r2, r0, lsr r1
   15fb0:	uxth	r0, r0
   15fb4:	bx	lr
   15fb8:	and	r2, r1, #7
   15fbc:	lsl	r2, r0, r2
   15fc0:	rsb	r1, r1, #0
   15fc4:	and	r1, r1, #7
   15fc8:	orr	r0, r2, r0, lsr r1
   15fcc:	uxtb	r0, r0
   15fd0:	bx	lr
   15fd4:	rsb	r2, r1, #0
   15fd8:	and	r2, r2, #7
   15fdc:	lsl	r2, r0, r2
   15fe0:	and	r1, r1, #7
   15fe4:	orr	r0, r2, r0, lsr r1
   15fe8:	uxtb	r0, r0
   15fec:	bx	lr
   15ff0:	mov	r1, r0
   15ff4:	sub	r2, r0, #65	; 0x41
   15ff8:	mov	r0, #1
   15ffc:	cmp	r2, #26
   16000:	subcs	r2, r1, #97	; 0x61
   16004:	cmpcs	r2, #26
   16008:	bcs	16010 <__mempcpy_chk@plt+0x4fbc>
   1600c:	bx	lr
   16010:	sub	r1, r1, #48	; 0x30
   16014:	cmp	r1, #10
   16018:	movcs	r0, #0
   1601c:	bx	lr
   16020:	mov	r1, r0
   16024:	sub	r2, r0, #65	; 0x41
   16028:	mov	r0, #1
   1602c:	cmp	r2, #26
   16030:	subcs	r1, r1, #97	; 0x61
   16034:	cmpcs	r1, #26
   16038:	movcs	r0, #0
   1603c:	bx	lr
   16040:	mov	r1, #0
   16044:	cmp	r0, #128	; 0x80
   16048:	movwcc	r1, #1
   1604c:	mov	r0, r1
   16050:	bx	lr
   16054:	sub	r1, r0, #9
   16058:	clz	r1, r1
   1605c:	lsr	r1, r1, #5
   16060:	sub	r0, r0, #32
   16064:	clz	r0, r0
   16068:	lsr	r0, r0, #5
   1606c:	orr	r0, r0, r1
   16070:	bx	lr
   16074:	mov	r1, r0
   16078:	mov	r0, #1
   1607c:	cmp	r1, #32
   16080:	bxcc	lr
   16084:	cmp	r1, #127	; 0x7f
   16088:	movne	r0, #0
   1608c:	bx	lr
   16090:	sub	r1, r0, #48	; 0x30
   16094:	mov	r0, #0
   16098:	cmp	r1, #10
   1609c:	movwcc	r0, #1
   160a0:	bx	lr
   160a4:	sub	r1, r0, #33	; 0x21
   160a8:	mov	r0, #0
   160ac:	cmp	r1, #94	; 0x5e
   160b0:	movwcc	r0, #1
   160b4:	bx	lr
   160b8:	sub	r1, r0, #97	; 0x61
   160bc:	mov	r0, #0
   160c0:	cmp	r1, #26
   160c4:	movwcc	r0, #1
   160c8:	bx	lr
   160cc:	sub	r1, r0, #32
   160d0:	mov	r0, #0
   160d4:	cmp	r1, #95	; 0x5f
   160d8:	movwcc	r0, #1
   160dc:	bx	lr
   160e0:	sub	r1, r0, #33	; 0x21
   160e4:	cmp	r1, #93	; 0x5d
   160e8:	bhi	16274 <__mempcpy_chk@plt+0x5220>
   160ec:	mov	r0, #1
   160f0:	add	r2, pc, #0
   160f4:	ldr	pc, [r2, r1, lsl #2]
   160f8:	andeq	r6, r1, r0, ror r2
   160fc:	andeq	r6, r1, r0, ror r2
   16100:	andeq	r6, r1, r0, ror r2
   16104:	andeq	r6, r1, r0, ror r2
   16108:	andeq	r6, r1, r0, ror r2
   1610c:	andeq	r6, r1, r0, ror r2
   16110:	andeq	r6, r1, r0, ror r2
   16114:	andeq	r6, r1, r0, ror r2
   16118:	andeq	r6, r1, r0, ror r2
   1611c:	andeq	r6, r1, r0, ror r2
   16120:	andeq	r6, r1, r0, ror r2
   16124:	andeq	r6, r1, r0, ror r2
   16128:	andeq	r6, r1, r0, ror r2
   1612c:	andeq	r6, r1, r0, ror r2
   16130:	andeq	r6, r1, r0, ror r2
   16134:	andeq	r6, r1, r4, ror r2
   16138:	andeq	r6, r1, r4, ror r2
   1613c:	andeq	r6, r1, r4, ror r2
   16140:	andeq	r6, r1, r4, ror r2
   16144:	andeq	r6, r1, r4, ror r2
   16148:	andeq	r6, r1, r4, ror r2
   1614c:	andeq	r6, r1, r4, ror r2
   16150:	andeq	r6, r1, r4, ror r2
   16154:	andeq	r6, r1, r4, ror r2
   16158:	andeq	r6, r1, r4, ror r2
   1615c:	andeq	r6, r1, r0, ror r2
   16160:	andeq	r6, r1, r0, ror r2
   16164:	andeq	r6, r1, r0, ror r2
   16168:	andeq	r6, r1, r0, ror r2
   1616c:	andeq	r6, r1, r0, ror r2
   16170:	andeq	r6, r1, r0, ror r2
   16174:	andeq	r6, r1, r0, ror r2
   16178:	andeq	r6, r1, r4, ror r2
   1617c:	andeq	r6, r1, r4, ror r2
   16180:	andeq	r6, r1, r4, ror r2
   16184:	andeq	r6, r1, r4, ror r2
   16188:	andeq	r6, r1, r4, ror r2
   1618c:	andeq	r6, r1, r4, ror r2
   16190:	andeq	r6, r1, r4, ror r2
   16194:	andeq	r6, r1, r4, ror r2
   16198:	andeq	r6, r1, r4, ror r2
   1619c:	andeq	r6, r1, r4, ror r2
   161a0:	andeq	r6, r1, r4, ror r2
   161a4:	andeq	r6, r1, r4, ror r2
   161a8:	andeq	r6, r1, r4, ror r2
   161ac:	andeq	r6, r1, r4, ror r2
   161b0:	andeq	r6, r1, r4, ror r2
   161b4:	andeq	r6, r1, r4, ror r2
   161b8:	andeq	r6, r1, r4, ror r2
   161bc:	andeq	r6, r1, r4, ror r2
   161c0:	andeq	r6, r1, r4, ror r2
   161c4:	andeq	r6, r1, r4, ror r2
   161c8:	andeq	r6, r1, r4, ror r2
   161cc:	andeq	r6, r1, r4, ror r2
   161d0:	andeq	r6, r1, r4, ror r2
   161d4:	andeq	r6, r1, r4, ror r2
   161d8:	andeq	r6, r1, r4, ror r2
   161dc:	andeq	r6, r1, r4, ror r2
   161e0:	andeq	r6, r1, r0, ror r2
   161e4:	andeq	r6, r1, r0, ror r2
   161e8:	andeq	r6, r1, r0, ror r2
   161ec:	andeq	r6, r1, r0, ror r2
   161f0:	andeq	r6, r1, r0, ror r2
   161f4:	andeq	r6, r1, r0, ror r2
   161f8:	andeq	r6, r1, r4, ror r2
   161fc:	andeq	r6, r1, r4, ror r2
   16200:	andeq	r6, r1, r4, ror r2
   16204:	andeq	r6, r1, r4, ror r2
   16208:	andeq	r6, r1, r4, ror r2
   1620c:	andeq	r6, r1, r4, ror r2
   16210:	andeq	r6, r1, r4, ror r2
   16214:	andeq	r6, r1, r4, ror r2
   16218:	andeq	r6, r1, r4, ror r2
   1621c:	andeq	r6, r1, r4, ror r2
   16220:	andeq	r6, r1, r4, ror r2
   16224:	andeq	r6, r1, r4, ror r2
   16228:	andeq	r6, r1, r4, ror r2
   1622c:	andeq	r6, r1, r4, ror r2
   16230:	andeq	r6, r1, r4, ror r2
   16234:	andeq	r6, r1, r4, ror r2
   16238:	andeq	r6, r1, r4, ror r2
   1623c:	andeq	r6, r1, r4, ror r2
   16240:	andeq	r6, r1, r4, ror r2
   16244:	andeq	r6, r1, r4, ror r2
   16248:	andeq	r6, r1, r4, ror r2
   1624c:	andeq	r6, r1, r4, ror r2
   16250:	andeq	r6, r1, r4, ror r2
   16254:	andeq	r6, r1, r4, ror r2
   16258:	andeq	r6, r1, r4, ror r2
   1625c:	andeq	r6, r1, r4, ror r2
   16260:	andeq	r6, r1, r0, ror r2
   16264:	andeq	r6, r1, r0, ror r2
   16268:	andeq	r6, r1, r0, ror r2
   1626c:	andeq	r6, r1, r0, ror r2
   16270:	bx	lr
   16274:	mov	r0, #0
   16278:	bx	lr
   1627c:	sub	r0, r0, #9
   16280:	cmp	r0, #23
   16284:	movhi	r0, #0
   16288:	bxhi	lr
   1628c:	bic	r0, r0, #-16777216	; 0xff000000
   16290:	movw	r1, #31
   16294:	movt	r1, #128	; 0x80
   16298:	mov	r2, #1
   1629c:	and	r0, r2, r1, lsr r0
   162a0:	bx	lr
   162a4:	sub	r1, r0, #65	; 0x41
   162a8:	mov	r0, #0
   162ac:	cmp	r1, #26
   162b0:	movwcc	r0, #1
   162b4:	bx	lr
   162b8:	mov	r1, r0
   162bc:	sub	r2, r0, #48	; 0x30
   162c0:	mov	r0, #1
   162c4:	cmp	r2, #22
   162c8:	bhi	162e0 <__mempcpy_chk@plt+0x528c>
   162cc:	mov	ip, #1
   162d0:	movw	r3, #1023	; 0x3ff
   162d4:	movt	r3, #126	; 0x7e
   162d8:	tst	r3, ip, lsl r2
   162dc:	bxne	lr
   162e0:	sub	r1, r1, #97	; 0x61
   162e4:	cmp	r1, #6
   162e8:	movcs	r0, #0
   162ec:	bxcs	lr
   162f0:	bx	lr
   162f4:	sub	r1, r0, #65	; 0x41
   162f8:	cmp	r1, #26
   162fc:	addcc	r0, r0, #32
   16300:	bx	lr
   16304:	sub	r1, r0, #97	; 0x61
   16308:	cmp	r1, #26
   1630c:	subcc	r0, r0, #32
   16310:	bx	lr
   16314:	push	{r4, r5, r6, sl, fp, lr}
   16318:	add	fp, sp, #16
   1631c:	mov	r4, r0
   16320:	bl	10ee0 <__fpending@plt>
   16324:	mov	r5, r0
   16328:	mov	r0, r4
   1632c:	bl	10eec <ferror_unlocked@plt>
   16330:	mov	r6, r0
   16334:	mov	r0, r4
   16338:	bl	16398 <__mempcpy_chk@plt+0x5344>
   1633c:	cmp	r6, #0
   16340:	beq	16364 <__mempcpy_chk@plt+0x5310>
   16344:	mvn	r4, #0
   16348:	cmp	r0, #0
   1634c:	bne	16390 <__mempcpy_chk@plt+0x533c>
   16350:	bl	10f88 <__errno_location@plt>
   16354:	mov	r1, #0
   16358:	str	r1, [r0]
   1635c:	mov	r0, r4
   16360:	pop	{r4, r5, r6, sl, fp, pc}
   16364:	cmp	r0, #0
   16368:	mov	r4, r0
   1636c:	mvnne	r4, #0
   16370:	cmp	r5, #0
   16374:	bne	16390 <__mempcpy_chk@plt+0x533c>
   16378:	cmp	r0, #0
   1637c:	beq	16390 <__mempcpy_chk@plt+0x533c>
   16380:	bl	10f88 <__errno_location@plt>
   16384:	ldr	r0, [r0]
   16388:	subs	r4, r0, #9
   1638c:	mvnne	r4, #0
   16390:	mov	r0, r4
   16394:	pop	{r4, r5, r6, sl, fp, pc}
   16398:	push	{r4, r5, fp, lr}
   1639c:	add	fp, sp, #8
   163a0:	sub	sp, sp, #8
   163a4:	mov	r4, r0
   163a8:	bl	10fb8 <fileno@plt>
   163ac:	cmn	r0, #1
   163b0:	ble	16428 <__mempcpy_chk@plt+0x53d4>
   163b4:	mov	r0, r4
   163b8:	bl	10f28 <__freading@plt>
   163bc:	cmp	r0, #0
   163c0:	beq	163ec <__mempcpy_chk@plt+0x5398>
   163c4:	mov	r0, r4
   163c8:	bl	10fb8 <fileno@plt>
   163cc:	mov	r1, #1
   163d0:	str	r1, [sp]
   163d4:	mov	r2, #0
   163d8:	mov	r3, #0
   163dc:	bl	10ec8 <lseek64@plt>
   163e0:	and	r0, r0, r1
   163e4:	cmn	r0, #1
   163e8:	beq	16428 <__mempcpy_chk@plt+0x53d4>
   163ec:	mov	r0, r4
   163f0:	bl	16438 <__mempcpy_chk@plt+0x53e4>
   163f4:	cmp	r0, #0
   163f8:	beq	16428 <__mempcpy_chk@plt+0x53d4>
   163fc:	bl	10f88 <__errno_location@plt>
   16400:	ldr	r5, [r0]
   16404:	mov	r0, r4
   16408:	bl	10fd0 <fclose@plt>
   1640c:	cmp	r5, #0
   16410:	beq	16420 <__mempcpy_chk@plt+0x53cc>
   16414:	bl	10f88 <__errno_location@plt>
   16418:	str	r5, [r0]
   1641c:	mvn	r0, #0
   16420:	sub	sp, fp, #8
   16424:	pop	{r4, r5, fp, pc}
   16428:	mov	r0, r4
   1642c:	sub	sp, fp, #8
   16430:	pop	{r4, r5, fp, lr}
   16434:	b	10fd0 <fclose@plt>
   16438:	push	{r4, sl, fp, lr}
   1643c:	add	fp, sp, #8
   16440:	mov	r4, r0
   16444:	cmp	r0, #0
   16448:	beq	16460 <__mempcpy_chk@plt+0x540c>
   1644c:	mov	r0, r4
   16450:	bl	10f28 <__freading@plt>
   16454:	cmp	r0, #0
   16458:	movne	r0, r4
   1645c:	blne	1646c <__mempcpy_chk@plt+0x5418>
   16460:	mov	r0, r4
   16464:	pop	{r4, sl, fp, lr}
   16468:	b	10e20 <fflush@plt>
   1646c:	push	{fp, lr}
   16470:	mov	fp, sp
   16474:	sub	sp, sp, #8
   16478:	ldrb	r1, [r0, #1]
   1647c:	tst	r1, #1
   16480:	beq	16498 <__mempcpy_chk@plt+0x5444>
   16484:	mov	r1, #1
   16488:	str	r1, [sp]
   1648c:	mov	r2, #0
   16490:	mov	r3, #0
   16494:	bl	164a0 <__mempcpy_chk@plt+0x544c>
   16498:	mov	sp, fp
   1649c:	pop	{fp, pc}
   164a0:	push	{r4, r5, r6, r7, fp, lr}
   164a4:	add	fp, sp, #16
   164a8:	sub	sp, sp, #8
   164ac:	mov	r5, r3
   164b0:	mov	r6, r2
   164b4:	mov	r4, r0
   164b8:	ldr	r0, [r0, #4]
   164bc:	ldr	r1, [r4, #8]
   164c0:	cmp	r1, r0
   164c4:	bne	164e0 <__mempcpy_chk@plt+0x548c>
   164c8:	ldrd	r0, [r4, #16]
   164cc:	cmp	r1, r0
   164d0:	bne	164e0 <__mempcpy_chk@plt+0x548c>
   164d4:	ldr	r0, [r4, #36]	; 0x24
   164d8:	cmp	r0, #0
   164dc:	beq	164f8 <__mempcpy_chk@plt+0x54a4>
   164e0:	mov	r0, r4
   164e4:	mov	r2, r6
   164e8:	mov	r3, r5
   164ec:	sub	sp, fp, #16
   164f0:	pop	{r4, r5, r6, r7, fp, lr}
   164f4:	b	10fdc <fseeko64@plt>
   164f8:	ldr	r7, [fp, #8]
   164fc:	mov	r0, r4
   16500:	bl	10fb8 <fileno@plt>
   16504:	str	r7, [sp]
   16508:	mov	r2, r6
   1650c:	mov	r3, r5
   16510:	bl	10ec8 <lseek64@plt>
   16514:	and	r2, r0, r1
   16518:	cmn	r2, #1
   1651c:	beq	1653c <__mempcpy_chk@plt+0x54e8>
   16520:	strd	r0, [r4, #80]	; 0x50
   16524:	ldr	r0, [r4]
   16528:	bic	r0, r0, #16
   1652c:	str	r0, [r4]
   16530:	mov	r0, #0
   16534:	sub	sp, fp, #16
   16538:	pop	{r4, r5, r6, r7, fp, pc}
   1653c:	mvn	r0, #0
   16540:	sub	sp, fp, #16
   16544:	pop	{r4, r5, r6, r7, fp, pc}
   16548:	ldrb	r2, [r0]
   1654c:	cmp	r2, #0
   16550:	beq	16574 <__mempcpy_chk@plt+0x5520>
   16554:	add	r3, r0, #1
   16558:	mov	r0, #0
   1655c:	ror	r0, r0, #23
   16560:	uxtab	r0, r0, r2
   16564:	ldrb	r2, [r3], #1
   16568:	cmp	r2, #0
   1656c:	bne	1655c <__mempcpy_chk@plt+0x5508>
   16570:	b	16578 <__mempcpy_chk@plt+0x5524>
   16574:	mov	r0, #0
   16578:	udiv	r2, r0, r1
   1657c:	mls	r0, r2, r1, r0
   16580:	bx	lr
   16584:	push	{fp, lr}
   16588:	mov	fp, sp
   1658c:	bl	10f88 <__errno_location@plt>
   16590:	mov	r1, #12
   16594:	str	r1, [r0]
   16598:	mov	r0, #0
   1659c:	pop	{fp, pc}
   165a0:	b	15e24 <__mempcpy_chk@plt+0x4dd0>
   165a4:	cmp	r1, #0
   165a8:	orreq	r1, r1, #1
   165ac:	b	15e54 <__mempcpy_chk@plt+0x4e00>
   165b0:	b	15dd0 <__mempcpy_chk@plt+0x4d7c>
   165b4:	clz	r3, r2
   165b8:	lsr	ip, r3, #5
   165bc:	clz	r3, r1
   165c0:	lsr	r3, r3, #5
   165c4:	orrs	r3, r3, ip
   165c8:	movwne	r1, #1
   165cc:	movwne	r2, #1
   165d0:	b	16670 <__mempcpy_chk@plt+0x561c>
   165d4:	push	{fp, lr}
   165d8:	mov	fp, sp
   165dc:	mov	r0, #14
   165e0:	bl	11000 <nl_langinfo@plt>
   165e4:	movw	r1, #27232	; 0x6a60
   165e8:	movt	r1, #1
   165ec:	cmp	r0, #0
   165f0:	movne	r1, r0
   165f4:	ldrb	r2, [r1]
   165f8:	movw	r0, #30009	; 0x7539
   165fc:	movt	r0, #1
   16600:	cmp	r2, #0
   16604:	movne	r0, r1
   16608:	pop	{fp, pc}
   1660c:	push	{r4, r5, r6, r7, fp, lr}
   16610:	add	fp, sp, #16
   16614:	sub	sp, sp, #8
   16618:	mov	r7, r2
   1661c:	mov	r4, r1
   16620:	add	r5, sp, #4
   16624:	cmp	r0, #0
   16628:	movne	r5, r0
   1662c:	mov	r0, r5
   16630:	bl	10ef8 <mbrtowc@plt>
   16634:	mov	r6, r0
   16638:	cmp	r7, #0
   1663c:	beq	16664 <__mempcpy_chk@plt+0x5610>
   16640:	cmn	r6, #2
   16644:	bcc	16664 <__mempcpy_chk@plt+0x5610>
   16648:	mov	r0, #0
   1664c:	bl	166ac <__mempcpy_chk@plt+0x5658>
   16650:	cmp	r0, #0
   16654:	bne	16664 <__mempcpy_chk@plt+0x5610>
   16658:	ldrb	r0, [r4]
   1665c:	str	r0, [r5]
   16660:	mov	r6, #1
   16664:	mov	r0, r6
   16668:	sub	sp, fp, #16
   1666c:	pop	{r4, r5, r6, r7, fp, pc}
   16670:	cmp	r2, #0
   16674:	beq	166a4 <__mempcpy_chk@plt+0x5650>
   16678:	mvn	r3, #0
   1667c:	udiv	r3, r3, r2
   16680:	cmp	r3, r1
   16684:	bcs	166a4 <__mempcpy_chk@plt+0x5650>
   16688:	push	{fp, lr}
   1668c:	mov	fp, sp
   16690:	bl	10f88 <__errno_location@plt>
   16694:	mov	r1, #12
   16698:	str	r1, [r0]
   1669c:	mov	r0, #0
   166a0:	pop	{fp, pc}
   166a4:	mul	r1, r2, r1
   166a8:	b	15e54 <__mempcpy_chk@plt+0x4e00>
   166ac:	push	{r4, sl, fp, lr}
   166b0:	add	fp, sp, #8
   166b4:	sub	sp, sp, #264	; 0x108
   166b8:	add	r1, sp, #7
   166bc:	movw	r2, #257	; 0x101
   166c0:	bl	16718 <__mempcpy_chk@plt+0x56c4>
   166c4:	mov	r4, #0
   166c8:	cmp	r0, #0
   166cc:	bne	1670c <__mempcpy_chk@plt+0x56b8>
   166d0:	add	r0, sp, #7
   166d4:	movw	r1, #30015	; 0x753f
   166d8:	movt	r1, #1
   166dc:	mov	r2, #2
   166e0:	bl	10f70 <bcmp@plt>
   166e4:	cmp	r0, #0
   166e8:	beq	1670c <__mempcpy_chk@plt+0x56b8>
   166ec:	add	r0, sp, #7
   166f0:	movw	r1, #30017	; 0x7541
   166f4:	movt	r1, #1
   166f8:	mov	r2, #6
   166fc:	bl	10f70 <bcmp@plt>
   16700:	mov	r4, r0
   16704:	cmp	r0, #0
   16708:	movwne	r4, #1
   1670c:	mov	r0, r4
   16710:	sub	sp, fp, #8
   16714:	pop	{r4, sl, fp, pc}
   16718:	b	1671c <__mempcpy_chk@plt+0x56c8>
   1671c:	push	{r4, r5, r6, r7, fp, lr}
   16720:	add	fp, sp, #16
   16724:	mov	r6, r2
   16728:	mov	r4, r1
   1672c:	bl	167b4 <__mempcpy_chk@plt+0x5760>
   16730:	cmp	r0, #0
   16734:	beq	16764 <__mempcpy_chk@plt+0x5710>
   16738:	mov	r7, r0
   1673c:	bl	10f7c <strlen@plt>
   16740:	cmp	r0, r6
   16744:	bcs	16780 <__mempcpy_chk@plt+0x572c>
   16748:	add	r2, r0, #1
   1674c:	mov	r0, r4
   16750:	mov	r1, r7
   16754:	bl	10e5c <memcpy@plt>
   16758:	mov	r5, #0
   1675c:	mov	r0, r5
   16760:	pop	{r4, r5, r6, r7, fp, pc}
   16764:	mov	r5, #22
   16768:	cmp	r6, #0
   1676c:	beq	167a8 <__mempcpy_chk@plt+0x5754>
   16770:	mov	r0, #0
   16774:	strb	r0, [r4]
   16778:	mov	r0, r5
   1677c:	pop	{r4, r5, r6, r7, fp, pc}
   16780:	mov	r5, #34	; 0x22
   16784:	cmp	r6, #0
   16788:	beq	167a8 <__mempcpy_chk@plt+0x5754>
   1678c:	sub	r6, r6, #1
   16790:	mov	r0, r4
   16794:	mov	r1, r7
   16798:	mov	r2, r6
   1679c:	bl	10e5c <memcpy@plt>
   167a0:	mov	r0, #0
   167a4:	strb	r0, [r4, r6]
   167a8:	mov	r0, r5
   167ac:	pop	{r4, r5, r6, r7, fp, pc}
   167b0:	b	167b4 <__mempcpy_chk@plt+0x5760>
   167b4:	mov	r1, #0
   167b8:	b	10fe8 <setlocale@plt>
   167bc:	cmp	r3, #0
   167c0:	cmpeq	r2, #0
   167c4:	bne	167dc <__mempcpy_chk@plt+0x5788>
   167c8:	cmp	r1, #0
   167cc:	cmpeq	r0, #0
   167d0:	mvnne	r1, #0
   167d4:	mvnne	r0, #0
   167d8:	b	167f8 <__mempcpy_chk@plt+0x57a4>
   167dc:	sub	sp, sp, #8
   167e0:	push	{sp, lr}
   167e4:	bl	16808 <__mempcpy_chk@plt+0x57b4>
   167e8:	ldr	lr, [sp, #4]
   167ec:	add	sp, sp, #8
   167f0:	pop	{r2, r3}
   167f4:	bx	lr
   167f8:	push	{r1, lr}
   167fc:	mov	r0, #8
   16800:	bl	10e08 <raise@plt>
   16804:	pop	{r1, pc}
   16808:	cmp	r1, r3
   1680c:	cmpeq	r0, r2
   16810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16814:	mov	r4, r0
   16818:	movcc	r0, #0
   1681c:	mov	r5, r1
   16820:	ldr	lr, [sp, #36]	; 0x24
   16824:	movcc	r1, r0
   16828:	bcc	16924 <__mempcpy_chk@plt+0x58d0>
   1682c:	cmp	r3, #0
   16830:	clzeq	ip, r2
   16834:	clzne	ip, r3
   16838:	addeq	ip, ip, #32
   1683c:	cmp	r5, #0
   16840:	clzeq	r1, r4
   16844:	addeq	r1, r1, #32
   16848:	clzne	r1, r5
   1684c:	sub	ip, ip, r1
   16850:	sub	sl, ip, #32
   16854:	lsl	r9, r3, ip
   16858:	rsb	fp, ip, #32
   1685c:	orr	r9, r9, r2, lsl sl
   16860:	orr	r9, r9, r2, lsr fp
   16864:	lsl	r8, r2, ip
   16868:	cmp	r5, r9
   1686c:	cmpeq	r4, r8
   16870:	movcc	r0, #0
   16874:	movcc	r1, r0
   16878:	bcc	16894 <__mempcpy_chk@plt+0x5840>
   1687c:	mov	r0, #1
   16880:	subs	r4, r4, r8
   16884:	lsl	r1, r0, sl
   16888:	orr	r1, r1, r0, lsr fp
   1688c:	lsl	r0, r0, ip
   16890:	sbc	r5, r5, r9
   16894:	cmp	ip, #0
   16898:	beq	16924 <__mempcpy_chk@plt+0x58d0>
   1689c:	lsr	r6, r8, #1
   168a0:	orr	r6, r6, r9, lsl #31
   168a4:	lsr	r7, r9, #1
   168a8:	mov	r2, ip
   168ac:	b	168d0 <__mempcpy_chk@plt+0x587c>
   168b0:	subs	r3, r4, r6
   168b4:	sbc	r8, r5, r7
   168b8:	adds	r3, r3, r3
   168bc:	adc	r8, r8, r8
   168c0:	adds	r4, r3, #1
   168c4:	adc	r5, r8, #0
   168c8:	subs	r2, r2, #1
   168cc:	beq	168ec <__mempcpy_chk@plt+0x5898>
   168d0:	cmp	r5, r7
   168d4:	cmpeq	r4, r6
   168d8:	bcs	168b0 <__mempcpy_chk@plt+0x585c>
   168dc:	adds	r4, r4, r4
   168e0:	adc	r5, r5, r5
   168e4:	subs	r2, r2, #1
   168e8:	bne	168d0 <__mempcpy_chk@plt+0x587c>
   168ec:	lsr	r3, r4, ip
   168f0:	orr	r3, r3, r5, lsl fp
   168f4:	lsr	r2, r5, ip
   168f8:	orr	r3, r3, r5, lsr sl
   168fc:	adds	r0, r0, r4
   16900:	mov	r4, r3
   16904:	lsl	r3, r2, ip
   16908:	orr	r3, r3, r4, lsl sl
   1690c:	lsl	ip, r4, ip
   16910:	orr	r3, r3, r4, lsr fp
   16914:	adc	r1, r1, r5
   16918:	subs	r0, r0, ip
   1691c:	mov	r5, r2
   16920:	sbc	r1, r1, r3
   16924:	cmp	lr, #0
   16928:	strdne	r4, [lr]
   1692c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16934:	mov	r7, r0
   16938:	ldr	r6, [pc, #72]	; 16988 <__mempcpy_chk@plt+0x5934>
   1693c:	ldr	r5, [pc, #72]	; 1698c <__mempcpy_chk@plt+0x5938>
   16940:	add	r6, pc, r6
   16944:	add	r5, pc, r5
   16948:	sub	r6, r6, r5
   1694c:	mov	r8, r1
   16950:	mov	r9, r2
   16954:	bl	10dd0 <calloc@plt-0x20>
   16958:	asrs	r6, r6, #2
   1695c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16960:	mov	r4, #0
   16964:	add	r4, r4, #1
   16968:	ldr	r3, [r5], #4
   1696c:	mov	r2, r9
   16970:	mov	r1, r8
   16974:	mov	r0, r7
   16978:	blx	r3
   1697c:	cmp	r6, r4
   16980:	bne	16964 <__mempcpy_chk@plt+0x5910>
   16984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16988:	andeq	r1, r1, r4, asr #11
   1698c:			; <UNDEFINED> instruction: 0x000115bc
   16990:	bx	lr
   16994:	ldr	r3, [pc, #12]	; 169a8 <__mempcpy_chk@plt+0x5954>
   16998:	mov	r1, #0
   1699c:	add	r3, pc, r3
   169a0:	ldr	r2, [r3]
   169a4:	b	10f94 <__cxa_atexit@plt>
   169a8:	andeq	r1, r1, r0, asr #14
   169ac:	mov	r2, r1
   169b0:	mov	r1, r0
   169b4:	mov	r0, #3
   169b8:	b	11018 <__xstat64@plt>

Disassembly of section .fini:

000169bc <.fini>:
   169bc:	push	{r3, lr}
   169c0:	pop	{r3, pc}
