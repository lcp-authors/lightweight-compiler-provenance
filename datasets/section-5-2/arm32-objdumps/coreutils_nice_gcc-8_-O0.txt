
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bb8 <.init>:
   10bb8:	push	{r3, lr}
   10bbc:	bl	10e60 <__assert_fail@plt+0x48>
   10bc0:	pop	{r3, pc}

Disassembly of section .plt:

00010bc4 <calloc@plt-0x14>:
   10bc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10bc8:	ldr	lr, [pc, #4]	; 10bd4 <calloc@plt-0x4>
   10bcc:	add	lr, pc, lr
   10bd0:	ldr	pc, [lr, #8]!
   10bd4:	andeq	r7, r1, ip, lsr #8

00010bd8 <calloc@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1068]!	; 0x42c

00010be4 <fputs_unlocked@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1060]!	; 0x424

00010bf0 <strcmp@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1052]!	; 0x41c

00010bfc <strtol@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1044]!	; 0x414

00010c08 <printf@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1036]!	; 0x40c

00010c14 <fflush@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1028]!	; 0x404

00010c20 <free@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c2c <_exit@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c38 <memcpy@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c44 <execvp@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c50 <mbsinit@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #988]!	; 0x3dc

00010c5c <memcmp@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #980]!	; 0x3d4

00010c68 <fputc_unlocked@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #972]!	; 0x3cc

00010c74 <realloc@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #964]!	; 0x3c4

00010c80 <getpriority@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #956]!	; 0x3bc

00010c8c <textdomain@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #948]!	; 0x3b4

00010c98 <iswprint@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #940]!	; 0x3ac

00010ca4 <fwrite@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #932]!	; 0x3a4

00010cb0 <lseek64@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #924]!	; 0x39c

00010cbc <__ctype_get_mb_cur_max@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #916]!	; 0x394

00010cc8 <__fpending@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #908]!	; 0x38c

00010cd4 <ferror_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #900]!	; 0x384

00010ce0 <mbrtowc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #892]!	; 0x37c

00010cec <error@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #884]!	; 0x374

00010cf8 <setpriority@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #876]!	; 0x36c

00010d04 <malloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #868]!	; 0x364

00010d10 <__libc_start_main@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #860]!	; 0x35c

00010d1c <__freading@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #852]!	; 0x354

00010d28 <__gmon_start__@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #844]!	; 0x34c

00010d34 <getopt_long@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #836]!	; 0x344

00010d40 <__ctype_b_loc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #828]!	; 0x33c

00010d4c <exit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #820]!	; 0x334

00010d58 <gettext@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #812]!	; 0x32c

00010d64 <strlen@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #804]!	; 0x324

00010d70 <strchr@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #796]!	; 0x31c

00010d7c <fprintf@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #788]!	; 0x314

00010d88 <__errno_location@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #780]!	; 0x30c

00010d94 <__cxa_atexit@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #772]!	; 0x304

00010da0 <memset@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #764]!	; 0x2fc

00010dac <fileno@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #756]!	; 0x2f4

00010db8 <fclose@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #748]!	; 0x2ec

00010dc4 <fseeko64@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #740]!	; 0x2e4

00010dd0 <setlocale@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #732]!	; 0x2dc

00010ddc <strrchr@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #724]!	; 0x2d4

00010de8 <nl_langinfo@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #716]!	; 0x2cc

00010df4 <bindtextdomain@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #708]!	; 0x2c4

00010e00 <strncmp@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #700]!	; 0x2bc

00010e0c <abort@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #692]!	; 0x2b4

00010e18 <__assert_fail@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #684]!	; 0x2ac

Disassembly of section .text:

00010e24 <.text>:
   10e24:	mov	fp, #0
   10e28:	mov	lr, #0
   10e2c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e30:	mov	r2, sp
   10e34:	push	{r2}		; (str r2, [sp, #-4]!)
   10e38:	push	{r0}		; (str r0, [sp, #-4]!)
   10e3c:	ldr	ip, [pc, #16]	; 10e54 <__assert_fail@plt+0x3c>
   10e40:	push	{ip}		; (str ip, [sp, #-4]!)
   10e44:	ldr	r0, [pc, #12]	; 10e58 <__assert_fail@plt+0x40>
   10e48:	ldr	r3, [pc, #12]	; 10e5c <__assert_fail@plt+0x44>
   10e4c:	bl	10d10 <__libc_start_main@plt>
   10e50:	bl	10e0c <abort@plt>
   10e54:	andeq	r6, r1, ip, lsl lr
   10e58:	strdeq	r1, [r1], -ip
   10e5c:			; <UNDEFINED> instruction: 0x00016dbc
   10e60:	ldr	r3, [pc, #20]	; 10e7c <__assert_fail@plt+0x64>
   10e64:	ldr	r2, [pc, #20]	; 10e80 <__assert_fail@plt+0x68>
   10e68:	add	r3, pc, r3
   10e6c:	ldr	r2, [r3, r2]
   10e70:	cmp	r2, #0
   10e74:	bxeq	lr
   10e78:	b	10d28 <__gmon_start__@plt>
   10e7c:	muleq	r1, r0, r1
   10e80:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e84:	ldr	r0, [pc, #24]	; 10ea4 <__assert_fail@plt+0x8c>
   10e88:	ldr	r3, [pc, #24]	; 10ea8 <__assert_fail@plt+0x90>
   10e8c:	cmp	r3, r0
   10e90:	bxeq	lr
   10e94:	ldr	r3, [pc, #16]	; 10eac <__assert_fail@plt+0x94>
   10e98:	cmp	r3, #0
   10e9c:	bxeq	lr
   10ea0:	bx	r3
   10ea4:	andeq	r8, r2, r4, lsr #2
   10ea8:	andeq	r8, r2, r4, lsr #2
   10eac:	andeq	r0, r0, r0
   10eb0:	ldr	r0, [pc, #36]	; 10edc <__assert_fail@plt+0xc4>
   10eb4:	ldr	r1, [pc, #36]	; 10ee0 <__assert_fail@plt+0xc8>
   10eb8:	sub	r1, r1, r0
   10ebc:	asr	r1, r1, #2
   10ec0:	add	r1, r1, r1, lsr #31
   10ec4:	asrs	r1, r1, #1
   10ec8:	bxeq	lr
   10ecc:	ldr	r3, [pc, #16]	; 10ee4 <__assert_fail@plt+0xcc>
   10ed0:	cmp	r3, #0
   10ed4:	bxeq	lr
   10ed8:	bx	r3
   10edc:	andeq	r8, r2, r4, lsr #2
   10ee0:	andeq	r8, r2, r4, lsr #2
   10ee4:	andeq	r0, r0, r0
   10ee8:	push	{r4, lr}
   10eec:	ldr	r4, [pc, #24]	; 10f0c <__assert_fail@plt+0xf4>
   10ef0:	ldrb	r3, [r4]
   10ef4:	cmp	r3, #0
   10ef8:	popne	{r4, pc}
   10efc:	bl	10e84 <__assert_fail@plt+0x6c>
   10f00:	mov	r3, #1
   10f04:	strb	r3, [r4]
   10f08:	pop	{r4, pc}
   10f0c:	andeq	r8, r2, r4, asr #2
   10f10:	b	10eb0 <__assert_fail@plt+0x98>
   10f14:	push	{fp}		; (str fp, [sp, #-4]!)
   10f18:	add	fp, sp, #0
   10f1c:	sub	sp, sp, #12
   10f20:	str	r0, [fp, #-8]
   10f24:	ldr	r3, [fp, #-8]
   10f28:	cmp	r3, #1
   10f2c:	beq	10f40 <__assert_fail@plt+0x128>
   10f30:	movw	r3, #32992	; 0x80e0
   10f34:	movt	r3, #2
   10f38:	ldr	r2, [fp, #-8]
   10f3c:	str	r2, [r3]
   10f40:	nop	{0}
   10f44:	add	sp, fp, #0
   10f48:	pop	{fp}		; (ldr fp, [sp], #4)
   10f4c:	bx	lr
   10f50:	str	fp, [sp, #-8]!
   10f54:	str	lr, [sp, #4]
   10f58:	add	fp, sp, #4
   10f5c:	movw	r0, #28228	; 0x6e44
   10f60:	movt	r0, #1
   10f64:	bl	10d58 <gettext@plt>
   10f68:	mov	r2, r0
   10f6c:	movw	r3, #33084	; 0x813c
   10f70:	movt	r3, #2
   10f74:	ldr	r3, [r3]
   10f78:	mov	r1, r3
   10f7c:	mov	r0, r2
   10f80:	bl	10be4 <fputs_unlocked@plt>
   10f84:	nop	{0}
   10f88:	sub	sp, fp, #4
   10f8c:	ldr	fp, [sp]
   10f90:	add	sp, sp, #4
   10f94:	pop	{pc}		; (ldr pc, [sp], #4)
   10f98:	str	fp, [sp, #-8]!
   10f9c:	str	lr, [sp, #4]
   10fa0:	add	fp, sp, #4
   10fa4:	sub	sp, sp, #80	; 0x50
   10fa8:	str	r0, [fp, #-80]	; 0xffffffb0
   10fac:	movw	r2, #28676	; 0x7004
   10fb0:	movt	r2, #1
   10fb4:	sub	r3, fp, #72	; 0x48
   10fb8:	ldrd	r0, [r2]
   10fbc:	strd	r0, [r3]
   10fc0:	ldrd	r0, [r2, #8]
   10fc4:	strd	r0, [r3, #8]
   10fc8:	ldrd	r0, [r2, #16]
   10fcc:	strd	r0, [r3, #16]
   10fd0:	ldrd	r0, [r2, #24]
   10fd4:	strd	r0, [r3, #24]
   10fd8:	ldrd	r0, [r2, #32]
   10fdc:	strd	r0, [r3, #32]
   10fe0:	ldrd	r0, [r2, #40]	; 0x28
   10fe4:	strd	r0, [r3, #40]	; 0x28
   10fe8:	ldrd	r0, [r2, #48]	; 0x30
   10fec:	strd	r0, [r3, #48]	; 0x30
   10ff0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   10ff4:	str	r3, [fp, #-8]
   10ff8:	sub	r3, fp, #72	; 0x48
   10ffc:	str	r3, [fp, #-12]
   11000:	b	11010 <__assert_fail@plt+0x1f8>
   11004:	ldr	r3, [fp, #-12]
   11008:	add	r3, r3, #8
   1100c:	str	r3, [fp, #-12]
   11010:	ldr	r3, [fp, #-12]
   11014:	ldr	r3, [r3]
   11018:	cmp	r3, #0
   1101c:	beq	11040 <__assert_fail@plt+0x228>
   11020:	ldr	r3, [fp, #-12]
   11024:	ldr	r3, [r3]
   11028:	mov	r1, r3
   1102c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11030:	bl	10bf0 <strcmp@plt>
   11034:	mov	r3, r0
   11038:	cmp	r3, #0
   1103c:	bne	11004 <__assert_fail@plt+0x1ec>
   11040:	ldr	r3, [fp, #-12]
   11044:	ldr	r3, [r3, #4]
   11048:	cmp	r3, #0
   1104c:	beq	1105c <__assert_fail@plt+0x244>
   11050:	ldr	r3, [fp, #-12]
   11054:	ldr	r3, [r3, #4]
   11058:	str	r3, [fp, #-8]
   1105c:	movw	r0, #28304	; 0x6e90
   11060:	movt	r0, #1
   11064:	bl	10d58 <gettext@plt>
   11068:	mov	r3, r0
   1106c:	movw	r2, #28328	; 0x6ea8
   11070:	movt	r2, #1
   11074:	movw	r1, #28368	; 0x6ed0
   11078:	movt	r1, #1
   1107c:	mov	r0, r3
   11080:	bl	10c08 <printf@plt>
   11084:	mov	r1, #0
   11088:	mov	r0, #5
   1108c:	bl	10dd0 <setlocale@plt>
   11090:	str	r0, [fp, #-16]
   11094:	ldr	r3, [fp, #-16]
   11098:	cmp	r3, #0
   1109c:	beq	110e8 <__assert_fail@plt+0x2d0>
   110a0:	mov	r2, #3
   110a4:	movw	r1, #28384	; 0x6ee0
   110a8:	movt	r1, #1
   110ac:	ldr	r0, [fp, #-16]
   110b0:	bl	10e00 <strncmp@plt>
   110b4:	mov	r3, r0
   110b8:	cmp	r3, #0
   110bc:	beq	110e8 <__assert_fail@plt+0x2d0>
   110c0:	movw	r0, #28388	; 0x6ee4
   110c4:	movt	r0, #1
   110c8:	bl	10d58 <gettext@plt>
   110cc:	mov	r2, r0
   110d0:	movw	r3, #33084	; 0x813c
   110d4:	movt	r3, #2
   110d8:	ldr	r3, [r3]
   110dc:	mov	r1, r3
   110e0:	mov	r0, r2
   110e4:	bl	10be4 <fputs_unlocked@plt>
   110e8:	movw	r0, #28460	; 0x6f2c
   110ec:	movt	r0, #1
   110f0:	bl	10d58 <gettext@plt>
   110f4:	mov	r3, r0
   110f8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   110fc:	movw	r1, #28328	; 0x6ea8
   11100:	movt	r1, #1
   11104:	mov	r0, r3
   11108:	bl	10c08 <printf@plt>
   1110c:	movw	r0, #28488	; 0x6f48
   11110:	movt	r0, #1
   11114:	bl	10d58 <gettext@plt>
   11118:	ldr	r2, [fp, #-8]
   1111c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11120:	cmp	r2, r3
   11124:	bne	11134 <__assert_fail@plt+0x31c>
   11128:	movw	r3, #28540	; 0x6f7c
   1112c:	movt	r3, #1
   11130:	b	1113c <__assert_fail@plt+0x324>
   11134:	movw	r3, #28552	; 0x6f88
   11138:	movt	r3, #1
   1113c:	mov	r2, r3
   11140:	ldr	r1, [fp, #-8]
   11144:	bl	10c08 <printf@plt>
   11148:	nop	{0}
   1114c:	sub	sp, fp, #4
   11150:	ldr	fp, [sp]
   11154:	add	sp, sp, #4
   11158:	pop	{pc}		; (ldr pc, [sp], #4)
   1115c:	str	r4, [sp, #-12]!
   11160:	str	fp, [sp, #4]
   11164:	str	lr, [sp, #8]
   11168:	add	fp, sp, #8
   1116c:	sub	sp, sp, #12
   11170:	str	r0, [fp, #-16]
   11174:	ldr	r3, [fp, #-16]
   11178:	cmp	r3, #0
   1117c:	beq	111b8 <__assert_fail@plt+0x3a0>
   11180:	movw	r3, #33080	; 0x8138
   11184:	movt	r3, #2
   11188:	ldr	r4, [r3]
   1118c:	movw	r0, #28824	; 0x7098
   11190:	movt	r0, #1
   11194:	bl	10d58 <gettext@plt>
   11198:	mov	r1, r0
   1119c:	movw	r3, #33104	; 0x8150
   111a0:	movt	r3, #2
   111a4:	ldr	r3, [r3]
   111a8:	mov	r2, r3
   111ac:	mov	r0, r4
   111b0:	bl	10d7c <fprintf@plt>
   111b4:	b	112a8 <__assert_fail@plt+0x490>
   111b8:	movw	r0, #28864	; 0x70c0
   111bc:	movt	r0, #1
   111c0:	bl	10d58 <gettext@plt>
   111c4:	mov	r2, r0
   111c8:	movw	r3, #33104	; 0x8150
   111cc:	movt	r3, #2
   111d0:	ldr	r3, [r3]
   111d4:	mov	r1, r3
   111d8:	mov	r0, r2
   111dc:	bl	10c08 <printf@plt>
   111e0:	movw	r0, #28904	; 0x70e8
   111e4:	movt	r0, #1
   111e8:	bl	10d58 <gettext@plt>
   111ec:	mov	r3, r0
   111f0:	mov	r2, #19
   111f4:	mvn	r1, #19
   111f8:	mov	r0, r3
   111fc:	bl	10c08 <printf@plt>
   11200:	bl	10f50 <__assert_fail@plt+0x138>
   11204:	movw	r0, #29128	; 0x71c8
   11208:	movt	r0, #1
   1120c:	bl	10d58 <gettext@plt>
   11210:	mov	r2, r0
   11214:	movw	r3, #33084	; 0x813c
   11218:	movt	r3, #2
   1121c:	ldr	r3, [r3]
   11220:	mov	r1, r3
   11224:	mov	r0, r2
   11228:	bl	10be4 <fputs_unlocked@plt>
   1122c:	movw	r0, #29196	; 0x720c
   11230:	movt	r0, #1
   11234:	bl	10d58 <gettext@plt>
   11238:	mov	r2, r0
   1123c:	movw	r3, #33084	; 0x813c
   11240:	movt	r3, #2
   11244:	ldr	r3, [r3]
   11248:	mov	r1, r3
   1124c:	mov	r0, r2
   11250:	bl	10be4 <fputs_unlocked@plt>
   11254:	movw	r0, #29244	; 0x723c
   11258:	movt	r0, #1
   1125c:	bl	10d58 <gettext@plt>
   11260:	mov	r2, r0
   11264:	movw	r3, #33084	; 0x813c
   11268:	movt	r3, #2
   1126c:	ldr	r3, [r3]
   11270:	mov	r1, r3
   11274:	mov	r0, r2
   11278:	bl	10be4 <fputs_unlocked@plt>
   1127c:	movw	r0, #29300	; 0x7274
   11280:	movt	r0, #1
   11284:	bl	10d58 <gettext@plt>
   11288:	mov	r3, r0
   1128c:	movw	r1, #29492	; 0x7334
   11290:	movt	r1, #1
   11294:	mov	r0, r3
   11298:	bl	10c08 <printf@plt>
   1129c:	movw	r0, #29492	; 0x7334
   112a0:	movt	r0, #1
   112a4:	bl	10f98 <__assert_fail@plt+0x180>
   112a8:	ldr	r0, [fp, #-16]
   112ac:	bl	10d4c <exit@plt>
   112b0:	push	{fp}		; (str fp, [sp, #-4]!)
   112b4:	add	fp, sp, #0
   112b8:	sub	sp, sp, #12
   112bc:	str	r0, [fp, #-8]
   112c0:	ldr	r3, [fp, #-8]
   112c4:	cmp	r3, #13
   112c8:	beq	112d8 <__assert_fail@plt+0x4c0>
   112cc:	ldr	r3, [fp, #-8]
   112d0:	cmp	r3, #1
   112d4:	bne	112e0 <__assert_fail@plt+0x4c8>
   112d8:	mov	r3, #1
   112dc:	b	112e4 <__assert_fail@plt+0x4cc>
   112e0:	mov	r3, #0
   112e4:	and	r3, r3, #1
   112e8:	uxtb	r3, r3
   112ec:	mov	r0, r3
   112f0:	add	sp, fp, #0
   112f4:	pop	{fp}		; (ldr fp, [sp], #4)
   112f8:	bx	lr
   112fc:	strd	r4, [sp, #-16]!
   11300:	str	fp, [sp, #8]
   11304:	str	lr, [sp, #12]
   11308:	add	fp, sp, #12
   1130c:	sub	sp, sp, #64	; 0x40
   11310:	str	r0, [fp, #-64]	; 0xffffffc0
   11314:	str	r1, [fp, #-68]	; 0xffffffbc
   11318:	mov	r3, #10
   1131c:	str	r3, [fp, #-16]
   11320:	mov	r3, #0
   11324:	str	r3, [fp, #-20]	; 0xffffffec
   11328:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1132c:	ldr	r3, [r3]
   11330:	mov	r0, r3
   11334:	bl	11a70 <__assert_fail@plt+0xc58>
   11338:	movw	r1, #28552	; 0x6f88
   1133c:	movt	r1, #1
   11340:	mov	r0, #6
   11344:	bl	10dd0 <setlocale@plt>
   11348:	movw	r1, #29500	; 0x733c
   1134c:	movt	r1, #1
   11350:	movw	r0, #28576	; 0x6fa0
   11354:	movt	r0, #1
   11358:	bl	10df4 <bindtextdomain@plt>
   1135c:	movw	r0, #28576	; 0x6fa0
   11360:	movt	r0, #1
   11364:	bl	10c8c <textdomain@plt>
   11368:	mov	r0, #125	; 0x7d
   1136c:	bl	10f14 <__assert_fail@plt+0xfc>
   11370:	movw	r0, #6432	; 0x1920
   11374:	movt	r0, #1
   11378:	bl	16e20 <__assert_fail@plt+0x6008>
   1137c:	mov	r3, #1
   11380:	str	r3, [fp, #-24]	; 0xffffffe8
   11384:	b	11570 <__assert_fail@plt+0x758>
   11388:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1138c:	lsl	r3, r3, #2
   11390:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11394:	add	r3, r2, r3
   11398:	ldr	r3, [r3]
   1139c:	str	r3, [fp, #-28]	; 0xffffffe4
   113a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113a4:	ldrb	r3, [r3]
   113a8:	cmp	r3, #45	; 0x2d
   113ac:	bne	11420 <__assert_fail@plt+0x608>
   113b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113b4:	add	r3, r3, #1
   113b8:	ldrb	r3, [r3]
   113bc:	cmp	r3, #45	; 0x2d
   113c0:	beq	113d8 <__assert_fail@plt+0x5c0>
   113c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113c8:	add	r3, r3, #1
   113cc:	ldrb	r3, [r3]
   113d0:	cmp	r3, #43	; 0x2b
   113d4:	bne	113e0 <__assert_fail@plt+0x5c8>
   113d8:	mov	r3, #1
   113dc:	b	113e4 <__assert_fail@plt+0x5cc>
   113e0:	mov	r3, #0
   113e4:	add	r3, r3, #1
   113e8:	mov	r2, r3
   113ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113f0:	add	r3, r3, r2
   113f4:	ldrb	r3, [r3]
   113f8:	sub	r3, r3, #48	; 0x30
   113fc:	cmp	r3, #9
   11400:	bhi	11420 <__assert_fail@plt+0x608>
   11404:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11408:	add	r3, r3, #1
   1140c:	str	r3, [fp, #-20]	; 0xffffffec
   11410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11414:	add	r3, r3, #1
   11418:	str	r3, [fp, #-24]	; 0xffffffe8
   1141c:	b	11570 <__assert_fail@plt+0x758>
   11420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11424:	sub	r3, r3, #1
   11428:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1142c:	sub	r3, r2, r3
   11430:	str	r3, [fp, #-32]	; 0xffffffe0
   11434:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11438:	sub	r3, r3, #-1073741823	; 0xc0000001
   1143c:	lsl	r3, r3, #2
   11440:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11444:	add	r3, r2, r3
   11448:	str	r3, [fp, #-36]	; 0xffffffdc
   1144c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11450:	ldr	r2, [r3]
   11454:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11458:	str	r2, [r3]
   1145c:	movw	r3, #33072	; 0x8130
   11460:	movt	r3, #2
   11464:	mov	r2, #0
   11468:	str	r2, [r3]
   1146c:	mov	r3, #0
   11470:	str	r3, [sp]
   11474:	movw	r3, #28760	; 0x7058
   11478:	movt	r3, #1
   1147c:	movw	r2, #29524	; 0x7354
   11480:	movt	r2, #1
   11484:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11488:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1148c:	bl	10d34 <getopt_long@plt>
   11490:	str	r0, [fp, #-40]	; 0xffffffd8
   11494:	movw	r3, #33072	; 0x8130
   11498:	movt	r3, #2
   1149c:	ldr	r3, [r3]
   114a0:	sub	r3, r3, #1
   114a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   114a8:	add	r3, r2, r3
   114ac:	str	r3, [fp, #-24]	; 0xffffffe8
   114b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114b4:	cmn	r3, #2
   114b8:	beq	11504 <__assert_fail@plt+0x6ec>
   114bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114c0:	cmn	r3, #2
   114c4:	bgt	114d8 <__assert_fail@plt+0x6c0>
   114c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114cc:	cmn	r3, #3
   114d0:	beq	1150c <__assert_fail@plt+0x6f4>
   114d4:	b	11558 <__assert_fail@plt+0x740>
   114d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114dc:	cmn	r3, #1
   114e0:	beq	11560 <__assert_fail@plt+0x748>
   114e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114e8:	cmp	r3, #110	; 0x6e
   114ec:	bne	11558 <__assert_fail@plt+0x740>
   114f0:	movw	r3, #33088	; 0x8140
   114f4:	movt	r3, #2
   114f8:	ldr	r3, [r3]
   114fc:	str	r3, [fp, #-20]	; 0xffffffec
   11500:	b	11564 <__assert_fail@plt+0x74c>
   11504:	mov	r0, #0
   11508:	bl	1115c <__assert_fail@plt+0x344>
   1150c:	movw	r3, #33084	; 0x813c
   11510:	movt	r3, #2
   11514:	ldr	r0, [r3]
   11518:	movw	r3, #32988	; 0x80dc
   1151c:	movt	r3, #2
   11520:	ldr	r2, [r3]
   11524:	mov	r3, #0
   11528:	str	r3, [sp, #4]
   1152c:	movw	r3, #29528	; 0x7358
   11530:	movt	r3, #1
   11534:	str	r3, [sp]
   11538:	mov	r3, r2
   1153c:	movw	r2, #28368	; 0x6ed0
   11540:	movt	r2, #1
   11544:	movw	r1, #29492	; 0x7334
   11548:	movt	r1, #1
   1154c:	bl	14ad8 <__assert_fail@plt+0x3cc0>
   11550:	mov	r0, #0
   11554:	bl	10d4c <exit@plt>
   11558:	mov	r0, #125	; 0x7d
   1155c:	bl	1115c <__assert_fail@plt+0x344>
   11560:	nop	{0}
   11564:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11568:	cmn	r3, #1
   1156c:	beq	11584 <__assert_fail@plt+0x76c>
   11570:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11574:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11578:	cmp	r2, r3
   1157c:	blt	11388 <__assert_fail@plt+0x570>
   11580:	b	11588 <__assert_fail@plt+0x770>
   11584:	nop	{0}
   11588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1158c:	cmp	r3, #0
   11590:	beq	11618 <__assert_fail@plt+0x800>
   11594:	sub	r2, fp, #56	; 0x38
   11598:	movw	r3, #28552	; 0x6f88
   1159c:	movt	r3, #1
   115a0:	str	r3, [sp]
   115a4:	mov	r3, r2
   115a8:	mov	r2, #10
   115ac:	mov	r1, #0
   115b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   115b4:	bl	15638 <__assert_fail@plt+0x4820>
   115b8:	mov	r3, r0
   115bc:	cmp	r3, #1
   115c0:	bls	115f0 <__assert_fail@plt+0x7d8>
   115c4:	movw	r0, #29544	; 0x7368
   115c8:	movt	r0, #1
   115cc:	bl	10d58 <gettext@plt>
   115d0:	mov	r4, r0
   115d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   115d8:	bl	143d0 <__assert_fail@plt+0x35b8>
   115dc:	mov	r3, r0
   115e0:	mov	r2, r4
   115e4:	mov	r1, #0
   115e8:	mov	r0, #125	; 0x7d
   115ec:	bl	10cec <error@plt>
   115f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   115f4:	cmn	r3, #39	; 0x27
   115f8:	blt	11610 <__assert_fail@plt+0x7f8>
   115fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11600:	cmp	r3, #39	; 0x27
   11604:	movlt	r3, r3
   11608:	movge	r3, #39	; 0x27
   1160c:	b	11614 <__assert_fail@plt+0x7fc>
   11610:	mvn	r3, #38	; 0x26
   11614:	str	r3, [fp, #-16]
   11618:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1161c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11620:	cmp	r2, r3
   11624:	bne	116e0 <__assert_fail@plt+0x8c8>
   11628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1162c:	cmp	r3, #0
   11630:	beq	1165c <__assert_fail@plt+0x844>
   11634:	movw	r0, #29568	; 0x7380
   11638:	movt	r0, #1
   1163c:	bl	10d58 <gettext@plt>
   11640:	mov	r3, r0
   11644:	mov	r2, r3
   11648:	mov	r1, #0
   1164c:	mov	r0, #0
   11650:	bl	10cec <error@plt>
   11654:	mov	r0, #125	; 0x7d
   11658:	bl	1115c <__assert_fail@plt+0x344>
   1165c:	bl	10d88 <__errno_location@plt>
   11660:	mov	r2, r0
   11664:	mov	r3, #0
   11668:	str	r3, [r2]
   1166c:	mov	r1, #0
   11670:	mov	r0, #0
   11674:	bl	10c80 <getpriority@plt>
   11678:	str	r0, [fp, #-44]	; 0xffffffd4
   1167c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11680:	cmn	r3, #1
   11684:	bne	116c8 <__assert_fail@plt+0x8b0>
   11688:	bl	10d88 <__errno_location@plt>
   1168c:	mov	r3, r0
   11690:	ldr	r3, [r3]
   11694:	cmp	r3, #0
   11698:	beq	116c8 <__assert_fail@plt+0x8b0>
   1169c:	bl	10d88 <__errno_location@plt>
   116a0:	mov	r3, r0
   116a4:	ldr	r4, [r3]
   116a8:	movw	r0, #29612	; 0x73ac
   116ac:	movt	r0, #1
   116b0:	bl	10d58 <gettext@plt>
   116b4:	mov	r3, r0
   116b8:	mov	r2, r3
   116bc:	mov	r1, r4
   116c0:	mov	r0, #125	; 0x7d
   116c4:	bl	10cec <error@plt>
   116c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   116cc:	movw	r0, #29632	; 0x73c0
   116d0:	movt	r0, #1
   116d4:	bl	10c08 <printf@plt>
   116d8:	mov	r3, #0
   116dc:	b	118a4 <__assert_fail@plt+0xa8c>
   116e0:	bl	10d88 <__errno_location@plt>
   116e4:	mov	r2, r0
   116e8:	mov	r3, #0
   116ec:	str	r3, [r2]
   116f0:	mov	r1, #0
   116f4:	mov	r0, #0
   116f8:	bl	10c80 <getpriority@plt>
   116fc:	str	r0, [fp, #-44]	; 0xffffffd4
   11700:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11704:	cmn	r3, #1
   11708:	bne	1174c <__assert_fail@plt+0x934>
   1170c:	bl	10d88 <__errno_location@plt>
   11710:	mov	r3, r0
   11714:	ldr	r3, [r3]
   11718:	cmp	r3, #0
   1171c:	beq	1174c <__assert_fail@plt+0x934>
   11720:	bl	10d88 <__errno_location@plt>
   11724:	mov	r3, r0
   11728:	ldr	r4, [r3]
   1172c:	movw	r0, #29612	; 0x73ac
   11730:	movt	r0, #1
   11734:	bl	10d58 <gettext@plt>
   11738:	mov	r3, r0
   1173c:	mov	r2, r3
   11740:	mov	r1, r4
   11744:	mov	r0, #125	; 0x7d
   11748:	bl	10cec <error@plt>
   1174c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11750:	ldr	r3, [fp, #-16]
   11754:	add	r3, r2, r3
   11758:	mov	r2, r3
   1175c:	mov	r1, #0
   11760:	mov	r0, #0
   11764:	bl	10cf8 <setpriority@plt>
   11768:	mov	r3, r0
   1176c:	cmp	r3, #0
   11770:	moveq	r3, #1
   11774:	movne	r3, #0
   11778:	strb	r3, [fp, #-45]	; 0xffffffd3
   1177c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   11780:	eor	r3, r3, #1
   11784:	uxtb	r3, r3
   11788:	cmp	r3, #0
   1178c:	beq	11810 <__assert_fail@plt+0x9f8>
   11790:	bl	10d88 <__errno_location@plt>
   11794:	mov	r3, r0
   11798:	ldr	r3, [r3]
   1179c:	mov	r0, r3
   117a0:	bl	112b0 <__assert_fail@plt+0x498>
   117a4:	mov	r3, r0
   117a8:	cmp	r3, #0
   117ac:	beq	117b8 <__assert_fail@plt+0x9a0>
   117b0:	mov	r4, #0
   117b4:	b	117bc <__assert_fail@plt+0x9a4>
   117b8:	mov	r4, #125	; 0x7d
   117bc:	bl	10d88 <__errno_location@plt>
   117c0:	mov	r3, r0
   117c4:	ldr	r5, [r3]
   117c8:	movw	r0, #29636	; 0x73c4
   117cc:	movt	r0, #1
   117d0:	bl	10d58 <gettext@plt>
   117d4:	mov	r3, r0
   117d8:	mov	r2, r3
   117dc:	mov	r1, r5
   117e0:	mov	r0, r4
   117e4:	bl	10cec <error@plt>
   117e8:	movw	r3, #33080	; 0x8138
   117ec:	movt	r3, #2
   117f0:	ldr	r3, [r3]
   117f4:	mov	r0, r3
   117f8:	bl	10cd4 <ferror_unlocked@plt>
   117fc:	mov	r3, r0
   11800:	cmp	r3, #0
   11804:	beq	11810 <__assert_fail@plt+0x9f8>
   11808:	mov	r3, #125	; 0x7d
   1180c:	b	118a4 <__assert_fail@plt+0xa8c>
   11810:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11814:	lsl	r3, r3, #2
   11818:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1181c:	add	r3, r2, r3
   11820:	ldr	r0, [r3]
   11824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11828:	lsl	r3, r3, #2
   1182c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11830:	add	r3, r2, r3
   11834:	mov	r1, r3
   11838:	bl	10c44 <execvp@plt>
   1183c:	bl	10d88 <__errno_location@plt>
   11840:	mov	r3, r0
   11844:	ldr	r3, [r3]
   11848:	cmp	r3, #2
   1184c:	bne	11858 <__assert_fail@plt+0xa40>
   11850:	mov	r3, #127	; 0x7f
   11854:	b	1185c <__assert_fail@plt+0xa44>
   11858:	mov	r3, #126	; 0x7e
   1185c:	str	r3, [fp, #-52]	; 0xffffffcc
   11860:	bl	10d88 <__errno_location@plt>
   11864:	mov	r3, r0
   11868:	ldr	r4, [r3]
   1186c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11870:	lsl	r3, r3, #2
   11874:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11878:	add	r3, r2, r3
   1187c:	ldr	r3, [r3]
   11880:	mov	r0, r3
   11884:	bl	143d0 <__assert_fail@plt+0x35b8>
   11888:	mov	r3, r0
   1188c:	movw	r2, #29656	; 0x73d8
   11890:	movt	r2, #1
   11894:	mov	r1, r4
   11898:	mov	r0, #0
   1189c:	bl	10cec <error@plt>
   118a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   118a4:	mov	r0, r3
   118a8:	sub	sp, fp, #12
   118ac:	ldrd	r4, [sp]
   118b0:	ldr	fp, [sp, #8]
   118b4:	add	sp, sp, #12
   118b8:	pop	{pc}		; (ldr pc, [sp], #4)
   118bc:	push	{fp}		; (str fp, [sp, #-4]!)
   118c0:	add	fp, sp, #0
   118c4:	sub	sp, sp, #12
   118c8:	str	r0, [fp, #-8]
   118cc:	movw	r3, #33096	; 0x8148
   118d0:	movt	r3, #2
   118d4:	ldr	r2, [fp, #-8]
   118d8:	str	r2, [r3]
   118dc:	nop	{0}
   118e0:	add	sp, fp, #0
   118e4:	pop	{fp}		; (ldr fp, [sp], #4)
   118e8:	bx	lr
   118ec:	push	{fp}		; (str fp, [sp, #-4]!)
   118f0:	add	fp, sp, #0
   118f4:	sub	sp, sp, #12
   118f8:	mov	r3, r0
   118fc:	strb	r3, [fp, #-5]
   11900:	movw	r3, #33100	; 0x814c
   11904:	movt	r3, #2
   11908:	ldrb	r2, [fp, #-5]
   1190c:	strb	r2, [r3]
   11910:	nop	{0}
   11914:	add	sp, fp, #0
   11918:	pop	{fp}		; (ldr fp, [sp], #4)
   1191c:	bx	lr
   11920:	str	r4, [sp, #-12]!
   11924:	str	fp, [sp, #4]
   11928:	str	lr, [sp, #8]
   1192c:	add	fp, sp, #8
   11930:	sub	sp, sp, #20
   11934:	movw	r3, #33084	; 0x813c
   11938:	movt	r3, #2
   1193c:	ldr	r3, [r3]
   11940:	mov	r0, r3
   11944:	bl	15edc <__assert_fail@plt+0x50c4>
   11948:	mov	r3, r0
   1194c:	cmp	r3, #0
   11950:	beq	11a24 <__assert_fail@plt+0xc0c>
   11954:	movw	r3, #33100	; 0x814c
   11958:	movt	r3, #2
   1195c:	ldrb	r3, [r3]
   11960:	eor	r3, r3, #1
   11964:	uxtb	r3, r3
   11968:	cmp	r3, #0
   1196c:	bne	11984 <__assert_fail@plt+0xb6c>
   11970:	bl	10d88 <__errno_location@plt>
   11974:	mov	r3, r0
   11978:	ldr	r3, [r3]
   1197c:	cmp	r3, #32
   11980:	beq	11a24 <__assert_fail@plt+0xc0c>
   11984:	movw	r0, #29676	; 0x73ec
   11988:	movt	r0, #1
   1198c:	bl	10d58 <gettext@plt>
   11990:	str	r0, [fp, #-16]
   11994:	movw	r3, #33096	; 0x8148
   11998:	movt	r3, #2
   1199c:	ldr	r3, [r3]
   119a0:	cmp	r3, #0
   119a4:	beq	119f0 <__assert_fail@plt+0xbd8>
   119a8:	bl	10d88 <__errno_location@plt>
   119ac:	mov	r3, r0
   119b0:	ldr	r4, [r3]
   119b4:	movw	r3, #33096	; 0x8148
   119b8:	movt	r3, #2
   119bc:	ldr	r3, [r3]
   119c0:	mov	r0, r3
   119c4:	bl	1405c <__assert_fail@plt+0x3244>
   119c8:	mov	r2, r0
   119cc:	ldr	r3, [fp, #-16]
   119d0:	str	r3, [sp]
   119d4:	mov	r3, r2
   119d8:	movw	r2, #29688	; 0x73f8
   119dc:	movt	r2, #1
   119e0:	mov	r1, r4
   119e4:	mov	r0, #0
   119e8:	bl	10cec <error@plt>
   119ec:	b	11a10 <__assert_fail@plt+0xbf8>
   119f0:	bl	10d88 <__errno_location@plt>
   119f4:	mov	r3, r0
   119f8:	ldr	r1, [r3]
   119fc:	ldr	r3, [fp, #-16]
   11a00:	movw	r2, #29696	; 0x7400
   11a04:	movt	r2, #1
   11a08:	mov	r0, #0
   11a0c:	bl	10cec <error@plt>
   11a10:	movw	r3, #32992	; 0x80e0
   11a14:	movt	r3, #2
   11a18:	ldr	r3, [r3]
   11a1c:	mov	r0, r3
   11a20:	bl	10c2c <_exit@plt>
   11a24:	movw	r3, #33080	; 0x8138
   11a28:	movt	r3, #2
   11a2c:	ldr	r3, [r3]
   11a30:	mov	r0, r3
   11a34:	bl	15edc <__assert_fail@plt+0x50c4>
   11a38:	mov	r3, r0
   11a3c:	cmp	r3, #0
   11a40:	beq	11a58 <__assert_fail@plt+0xc40>
   11a44:	movw	r3, #32992	; 0x80e0
   11a48:	movt	r3, #2
   11a4c:	ldr	r3, [r3]
   11a50:	mov	r0, r3
   11a54:	bl	10c2c <_exit@plt>
   11a58:	nop	{0}
   11a5c:	sub	sp, fp, #8
   11a60:	ldr	r4, [sp]
   11a64:	ldr	fp, [sp, #4]
   11a68:	add	sp, sp, #8
   11a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a70:	str	fp, [sp, #-8]!
   11a74:	str	lr, [sp, #4]
   11a78:	add	fp, sp, #4
   11a7c:	sub	sp, sp, #16
   11a80:	str	r0, [fp, #-16]
   11a84:	ldr	r3, [fp, #-16]
   11a88:	cmp	r3, #0
   11a8c:	bne	11ab4 <__assert_fail@plt+0xc9c>
   11a90:	movw	r3, #33080	; 0x8138
   11a94:	movt	r3, #2
   11a98:	ldr	r3, [r3]
   11a9c:	mov	r2, #55	; 0x37
   11aa0:	mov	r1, #1
   11aa4:	movw	r0, #29700	; 0x7404
   11aa8:	movt	r0, #1
   11aac:	bl	10ca4 <fwrite@plt>
   11ab0:	bl	10e0c <abort@plt>
   11ab4:	mov	r1, #47	; 0x2f
   11ab8:	ldr	r0, [fp, #-16]
   11abc:	bl	10ddc <strrchr@plt>
   11ac0:	str	r0, [fp, #-8]
   11ac4:	ldr	r3, [fp, #-8]
   11ac8:	cmp	r3, #0
   11acc:	beq	11adc <__assert_fail@plt+0xcc4>
   11ad0:	ldr	r3, [fp, #-8]
   11ad4:	add	r3, r3, #1
   11ad8:	b	11ae0 <__assert_fail@plt+0xcc8>
   11adc:	ldr	r3, [fp, #-16]
   11ae0:	str	r3, [fp, #-12]
   11ae4:	ldr	r2, [fp, #-12]
   11ae8:	ldr	r3, [fp, #-16]
   11aec:	sub	r3, r2, r3
   11af0:	cmp	r3, #6
   11af4:	ble	11b64 <__assert_fail@plt+0xd4c>
   11af8:	ldr	r3, [fp, #-12]
   11afc:	sub	r3, r3, #7
   11b00:	mov	r2, #7
   11b04:	movw	r1, #29756	; 0x743c
   11b08:	movt	r1, #1
   11b0c:	mov	r0, r3
   11b10:	bl	10e00 <strncmp@plt>
   11b14:	mov	r3, r0
   11b18:	cmp	r3, #0
   11b1c:	bne	11b64 <__assert_fail@plt+0xd4c>
   11b20:	ldr	r3, [fp, #-12]
   11b24:	str	r3, [fp, #-16]
   11b28:	mov	r2, #3
   11b2c:	movw	r1, #29764	; 0x7444
   11b30:	movt	r1, #1
   11b34:	ldr	r0, [fp, #-12]
   11b38:	bl	10e00 <strncmp@plt>
   11b3c:	mov	r3, r0
   11b40:	cmp	r3, #0
   11b44:	bne	11b64 <__assert_fail@plt+0xd4c>
   11b48:	ldr	r3, [fp, #-12]
   11b4c:	add	r3, r3, #3
   11b50:	str	r3, [fp, #-16]
   11b54:	movw	r3, #33064	; 0x8128
   11b58:	movt	r3, #2
   11b5c:	ldr	r2, [fp, #-16]
   11b60:	str	r2, [r3]
   11b64:	movw	r3, #33104	; 0x8150
   11b68:	movt	r3, #2
   11b6c:	ldr	r2, [fp, #-16]
   11b70:	str	r2, [r3]
   11b74:	movw	r3, #33068	; 0x812c
   11b78:	movt	r3, #2
   11b7c:	ldr	r2, [fp, #-16]
   11b80:	str	r2, [r3]
   11b84:	nop	{0}
   11b88:	sub	sp, fp, #4
   11b8c:	ldr	fp, [sp]
   11b90:	add	sp, sp, #4
   11b94:	pop	{pc}		; (ldr pc, [sp], #4)
   11b98:	str	fp, [sp, #-8]!
   11b9c:	str	lr, [sp, #4]
   11ba0:	add	fp, sp, #4
   11ba4:	sub	sp, sp, #16
   11ba8:	str	r0, [fp, #-16]
   11bac:	bl	10d88 <__errno_location@plt>
   11bb0:	mov	r3, r0
   11bb4:	ldr	r3, [r3]
   11bb8:	str	r3, [fp, #-8]
   11bbc:	ldr	r3, [fp, #-16]
   11bc0:	cmp	r3, #0
   11bc4:	beq	11bd0 <__assert_fail@plt+0xdb8>
   11bc8:	ldr	r3, [fp, #-16]
   11bcc:	b	11bd8 <__assert_fail@plt+0xdc0>
   11bd0:	movw	r3, #33108	; 0x8154
   11bd4:	movt	r3, #2
   11bd8:	mov	r1, #48	; 0x30
   11bdc:	mov	r0, r3
   11be0:	bl	15378 <__assert_fail@plt+0x4560>
   11be4:	mov	r3, r0
   11be8:	str	r3, [fp, #-12]
   11bec:	bl	10d88 <__errno_location@plt>
   11bf0:	mov	r2, r0
   11bf4:	ldr	r3, [fp, #-8]
   11bf8:	str	r3, [r2]
   11bfc:	ldr	r3, [fp, #-12]
   11c00:	mov	r0, r3
   11c04:	sub	sp, fp, #4
   11c08:	ldr	fp, [sp]
   11c0c:	add	sp, sp, #4
   11c10:	pop	{pc}		; (ldr pc, [sp], #4)
   11c14:	push	{fp}		; (str fp, [sp, #-4]!)
   11c18:	add	fp, sp, #0
   11c1c:	sub	sp, sp, #12
   11c20:	str	r0, [fp, #-8]
   11c24:	ldr	r3, [fp, #-8]
   11c28:	cmp	r3, #0
   11c2c:	beq	11c38 <__assert_fail@plt+0xe20>
   11c30:	ldr	r3, [fp, #-8]
   11c34:	b	11c40 <__assert_fail@plt+0xe28>
   11c38:	movw	r3, #33108	; 0x8154
   11c3c:	movt	r3, #2
   11c40:	ldr	r3, [r3]
   11c44:	mov	r0, r3
   11c48:	add	sp, fp, #0
   11c4c:	pop	{fp}		; (ldr fp, [sp], #4)
   11c50:	bx	lr
   11c54:	push	{fp}		; (str fp, [sp, #-4]!)
   11c58:	add	fp, sp, #0
   11c5c:	sub	sp, sp, #12
   11c60:	str	r0, [fp, #-8]
   11c64:	str	r1, [fp, #-12]
   11c68:	ldr	r3, [fp, #-8]
   11c6c:	cmp	r3, #0
   11c70:	beq	11c7c <__assert_fail@plt+0xe64>
   11c74:	ldr	r3, [fp, #-8]
   11c78:	b	11c84 <__assert_fail@plt+0xe6c>
   11c7c:	movw	r3, #33108	; 0x8154
   11c80:	movt	r3, #2
   11c84:	ldr	r2, [fp, #-12]
   11c88:	str	r2, [r3]
   11c8c:	nop	{0}
   11c90:	add	sp, fp, #0
   11c94:	pop	{fp}		; (ldr fp, [sp], #4)
   11c98:	bx	lr
   11c9c:	push	{fp}		; (str fp, [sp, #-4]!)
   11ca0:	add	fp, sp, #0
   11ca4:	sub	sp, sp, #36	; 0x24
   11ca8:	str	r0, [fp, #-24]	; 0xffffffe8
   11cac:	mov	r3, r1
   11cb0:	str	r2, [fp, #-32]	; 0xffffffe0
   11cb4:	strb	r3, [fp, #-25]	; 0xffffffe7
   11cb8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11cbc:	strb	r3, [fp, #-5]
   11cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cc4:	cmp	r3, #0
   11cc8:	beq	11cd4 <__assert_fail@plt+0xebc>
   11ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cd0:	b	11cdc <__assert_fail@plt+0xec4>
   11cd4:	movw	r3, #33108	; 0x8154
   11cd8:	movt	r3, #2
   11cdc:	add	r2, r3, #8
   11ce0:	ldrb	r3, [fp, #-5]
   11ce4:	lsr	r3, r3, #5
   11ce8:	uxtb	r3, r3
   11cec:	lsl	r3, r3, #2
   11cf0:	add	r3, r2, r3
   11cf4:	str	r3, [fp, #-12]
   11cf8:	ldrb	r3, [fp, #-5]
   11cfc:	and	r3, r3, #31
   11d00:	str	r3, [fp, #-16]
   11d04:	ldr	r3, [fp, #-12]
   11d08:	ldr	r2, [r3]
   11d0c:	ldr	r3, [fp, #-16]
   11d10:	lsr	r3, r2, r3
   11d14:	and	r3, r3, #1
   11d18:	str	r3, [fp, #-20]	; 0xffffffec
   11d1c:	ldr	r3, [fp, #-12]
   11d20:	ldr	r3, [r3]
   11d24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d28:	and	r1, r2, #1
   11d2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11d30:	eor	r1, r1, r2
   11d34:	ldr	r2, [fp, #-16]
   11d38:	lsl	r2, r1, r2
   11d3c:	eor	r2, r2, r3
   11d40:	ldr	r3, [fp, #-12]
   11d44:	str	r2, [r3]
   11d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   11d4c:	mov	r0, r3
   11d50:	add	sp, fp, #0
   11d54:	pop	{fp}		; (ldr fp, [sp], #4)
   11d58:	bx	lr
   11d5c:	push	{fp}		; (str fp, [sp, #-4]!)
   11d60:	add	fp, sp, #0
   11d64:	sub	sp, sp, #20
   11d68:	str	r0, [fp, #-16]
   11d6c:	str	r1, [fp, #-20]	; 0xffffffec
   11d70:	ldr	r3, [fp, #-16]
   11d74:	cmp	r3, #0
   11d78:	bne	11d88 <__assert_fail@plt+0xf70>
   11d7c:	movw	r3, #33108	; 0x8154
   11d80:	movt	r3, #2
   11d84:	str	r3, [fp, #-16]
   11d88:	ldr	r3, [fp, #-16]
   11d8c:	ldr	r3, [r3, #4]
   11d90:	str	r3, [fp, #-8]
   11d94:	ldr	r3, [fp, #-16]
   11d98:	ldr	r2, [fp, #-20]	; 0xffffffec
   11d9c:	str	r2, [r3, #4]
   11da0:	ldr	r3, [fp, #-8]
   11da4:	mov	r0, r3
   11da8:	add	sp, fp, #0
   11dac:	pop	{fp}		; (ldr fp, [sp], #4)
   11db0:	bx	lr
   11db4:	str	fp, [sp, #-8]!
   11db8:	str	lr, [sp, #4]
   11dbc:	add	fp, sp, #4
   11dc0:	sub	sp, sp, #16
   11dc4:	str	r0, [fp, #-8]
   11dc8:	str	r1, [fp, #-12]
   11dcc:	str	r2, [fp, #-16]
   11dd0:	ldr	r3, [fp, #-8]
   11dd4:	cmp	r3, #0
   11dd8:	bne	11de8 <__assert_fail@plt+0xfd0>
   11ddc:	movw	r3, #33108	; 0x8154
   11de0:	movt	r3, #2
   11de4:	str	r3, [fp, #-8]
   11de8:	ldr	r3, [fp, #-8]
   11dec:	mov	r2, #10
   11df0:	str	r2, [r3]
   11df4:	ldr	r3, [fp, #-12]
   11df8:	cmp	r3, #0
   11dfc:	beq	11e0c <__assert_fail@plt+0xff4>
   11e00:	ldr	r3, [fp, #-16]
   11e04:	cmp	r3, #0
   11e08:	bne	11e10 <__assert_fail@plt+0xff8>
   11e0c:	bl	10e0c <abort@plt>
   11e10:	ldr	r3, [fp, #-8]
   11e14:	ldr	r2, [fp, #-12]
   11e18:	str	r2, [r3, #40]	; 0x28
   11e1c:	ldr	r3, [fp, #-8]
   11e20:	ldr	r2, [fp, #-16]
   11e24:	str	r2, [r3, #44]	; 0x2c
   11e28:	nop	{0}
   11e2c:	sub	sp, fp, #4
   11e30:	ldr	fp, [sp]
   11e34:	add	sp, sp, #4
   11e38:	pop	{pc}		; (ldr pc, [sp], #4)
   11e3c:	str	fp, [sp, #-8]!
   11e40:	str	lr, [sp, #4]
   11e44:	add	fp, sp, #4
   11e48:	sub	sp, sp, #56	; 0x38
   11e4c:	str	r0, [fp, #-56]	; 0xffffffc8
   11e50:	str	r1, [fp, #-60]	; 0xffffffc4
   11e54:	sub	r1, fp, #52	; 0x34
   11e58:	mov	r2, #0
   11e5c:	mov	r3, #0
   11e60:	strd	r2, [r1]
   11e64:	strd	r2, [r1, #8]
   11e68:	strd	r2, [r1, #16]
   11e6c:	strd	r2, [r1, #24]
   11e70:	strd	r2, [r1, #32]
   11e74:	strd	r2, [r1, #40]	; 0x28
   11e78:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e7c:	cmp	r3, #10
   11e80:	bne	11e88 <__assert_fail@plt+0x1070>
   11e84:	bl	10e0c <abort@plt>
   11e88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e8c:	str	r3, [fp, #-52]	; 0xffffffcc
   11e90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11e94:	mov	r2, r3
   11e98:	sub	r3, fp, #52	; 0x34
   11e9c:	ldrd	r0, [r3]
   11ea0:	strd	r0, [r2]
   11ea4:	ldrd	r0, [r3, #8]
   11ea8:	strd	r0, [r2, #8]
   11eac:	ldrd	r0, [r3, #16]
   11eb0:	strd	r0, [r2, #16]
   11eb4:	ldrd	r0, [r3, #24]
   11eb8:	strd	r0, [r2, #24]
   11ebc:	ldrd	r0, [r3, #32]
   11ec0:	strd	r0, [r2, #32]
   11ec4:	ldrd	r0, [r3, #40]	; 0x28
   11ec8:	strd	r0, [r2, #40]	; 0x28
   11ecc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11ed0:	sub	sp, fp, #4
   11ed4:	ldr	fp, [sp]
   11ed8:	add	sp, sp, #4
   11edc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ee0:	str	fp, [sp, #-8]!
   11ee4:	str	lr, [sp, #4]
   11ee8:	add	fp, sp, #4
   11eec:	sub	sp, sp, #16
   11ef0:	str	r0, [fp, #-16]
   11ef4:	str	r1, [fp, #-20]	; 0xffffffec
   11ef8:	ldr	r0, [fp, #-16]
   11efc:	bl	10d58 <gettext@plt>
   11f00:	str	r0, [fp, #-8]
   11f04:	ldr	r2, [fp, #-8]
   11f08:	ldr	r3, [fp, #-16]
   11f0c:	cmp	r2, r3
   11f10:	beq	11f1c <__assert_fail@plt+0x1104>
   11f14:	ldr	r3, [fp, #-8]
   11f18:	b	11fcc <__assert_fail@plt+0x11b4>
   11f1c:	bl	16494 <__assert_fail@plt+0x567c>
   11f20:	str	r0, [fp, #-12]
   11f24:	movw	r1, #29956	; 0x7504
   11f28:	movt	r1, #1
   11f2c:	ldr	r0, [fp, #-12]
   11f30:	bl	15e30 <__assert_fail@plt+0x5018>
   11f34:	mov	r3, r0
   11f38:	cmp	r3, #0
   11f3c:	bne	11f68 <__assert_fail@plt+0x1150>
   11f40:	ldr	r3, [fp, #-16]
   11f44:	ldrb	r3, [r3]
   11f48:	cmp	r3, #96	; 0x60
   11f4c:	bne	11f5c <__assert_fail@plt+0x1144>
   11f50:	movw	r3, #29964	; 0x750c
   11f54:	movt	r3, #1
   11f58:	b	11fcc <__assert_fail@plt+0x11b4>
   11f5c:	movw	r3, #29968	; 0x7510
   11f60:	movt	r3, #1
   11f64:	b	11fcc <__assert_fail@plt+0x11b4>
   11f68:	movw	r1, #29972	; 0x7514
   11f6c:	movt	r1, #1
   11f70:	ldr	r0, [fp, #-12]
   11f74:	bl	15e30 <__assert_fail@plt+0x5018>
   11f78:	mov	r3, r0
   11f7c:	cmp	r3, #0
   11f80:	bne	11fac <__assert_fail@plt+0x1194>
   11f84:	ldr	r3, [fp, #-16]
   11f88:	ldrb	r3, [r3]
   11f8c:	cmp	r3, #96	; 0x60
   11f90:	bne	11fa0 <__assert_fail@plt+0x1188>
   11f94:	movw	r3, #29980	; 0x751c
   11f98:	movt	r3, #1
   11f9c:	b	11fcc <__assert_fail@plt+0x11b4>
   11fa0:	movw	r3, #29984	; 0x7520
   11fa4:	movt	r3, #1
   11fa8:	b	11fcc <__assert_fail@plt+0x11b4>
   11fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fb0:	cmp	r3, #9
   11fb4:	bne	11fc4 <__assert_fail@plt+0x11ac>
   11fb8:	movw	r3, #29988	; 0x7524
   11fbc:	movt	r3, #1
   11fc0:	b	11fcc <__assert_fail@plt+0x11b4>
   11fc4:	movw	r3, #29992	; 0x7528
   11fc8:	movt	r3, #1
   11fcc:	mov	r0, r3
   11fd0:	sub	sp, fp, #4
   11fd4:	ldr	fp, [sp]
   11fd8:	add	sp, sp, #4
   11fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   11fe0:	str	r4, [sp, #-12]!
   11fe4:	str	fp, [sp, #4]
   11fe8:	str	lr, [sp, #8]
   11fec:	add	fp, sp, #8
   11ff0:	sub	sp, sp, #116	; 0x74
   11ff4:	str	r0, [fp, #-88]	; 0xffffffa8
   11ff8:	str	r1, [fp, #-92]	; 0xffffffa4
   11ffc:	str	r2, [fp, #-96]	; 0xffffffa0
   12000:	str	r3, [fp, #-100]	; 0xffffff9c
   12004:	mov	r3, #0
   12008:	str	r3, [fp, #-20]	; 0xffffffec
   1200c:	mov	r3, #0
   12010:	str	r3, [fp, #-24]	; 0xffffffe8
   12014:	mov	r3, #0
   12018:	str	r3, [fp, #-28]	; 0xffffffe4
   1201c:	mov	r3, #0
   12020:	str	r3, [fp, #-32]	; 0xffffffe0
   12024:	mov	r3, #0
   12028:	strb	r3, [fp, #-33]	; 0xffffffdf
   1202c:	bl	10cbc <__ctype_get_mb_cur_max@plt>
   12030:	mov	r3, r0
   12034:	cmp	r3, #1
   12038:	moveq	r3, #1
   1203c:	movne	r3, #0
   12040:	strb	r3, [fp, #-57]	; 0xffffffc7
   12044:	ldr	r3, [fp, #8]
   12048:	and	r3, r3, #2
   1204c:	cmp	r3, #0
   12050:	movne	r3, #1
   12054:	moveq	r3, #0
   12058:	strb	r3, [fp, #-34]	; 0xffffffde
   1205c:	mov	r3, #0
   12060:	strb	r3, [fp, #-35]	; 0xffffffdd
   12064:	mov	r3, #0
   12068:	strb	r3, [fp, #-36]	; 0xffffffdc
   1206c:	mov	r3, #1
   12070:	strb	r3, [fp, #-37]	; 0xffffffdb
   12074:	ldr	r3, [fp, #4]
   12078:	cmp	r3, #10
   1207c:	ldrls	pc, [pc, r3, lsl #2]
   12080:	b	12298 <__assert_fail@plt+0x1480>
   12084:	andeq	r2, r1, ip, lsl #5
   12088:	andeq	r2, r1, r4, lsl #4
   1208c:	andeq	r2, r1, r8, lsr #4
   12090:	strdeq	r2, [r1], -ip
   12094:	andeq	r2, r1, ip, lsl #4
   12098:	andeq	r2, r1, r0, asr #1
   1209c:	strheq	r2, [r1], -r0
   120a0:	andeq	r2, r1, r4, lsr #2
   120a4:	andeq	r2, r1, r8, lsr r1
   120a8:	andeq	r2, r1, r8, lsr r1
   120ac:	andeq	r2, r1, r8, lsr r1
   120b0:	mov	r3, #5
   120b4:	str	r3, [fp, #4]
   120b8:	mov	r3, #1
   120bc:	strb	r3, [fp, #-34]	; 0xffffffde
   120c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   120c4:	eor	r3, r3, #1
   120c8:	uxtb	r3, r3
   120cc:	cmp	r3, #0
   120d0:	beq	12104 <__assert_fail@plt+0x12ec>
   120d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   120d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120dc:	cmp	r2, r3
   120e0:	bcs	120f8 <__assert_fail@plt+0x12e0>
   120e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   120e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120ec:	add	r3, r2, r3
   120f0:	mov	r2, #34	; 0x22
   120f4:	strb	r2, [r3]
   120f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120fc:	add	r3, r3, #1
   12100:	str	r3, [fp, #-20]	; 0xffffffec
   12104:	mov	r3, #1
   12108:	strb	r3, [fp, #-33]	; 0xffffffdf
   1210c:	movw	r3, #29988	; 0x7524
   12110:	movt	r3, #1
   12114:	str	r3, [fp, #-28]	; 0xffffffe4
   12118:	mov	r3, #1
   1211c:	str	r3, [fp, #-32]	; 0xffffffe0
   12120:	b	1229c <__assert_fail@plt+0x1484>
   12124:	mov	r3, #1
   12128:	strb	r3, [fp, #-33]	; 0xffffffdf
   1212c:	mov	r3, #0
   12130:	strb	r3, [fp, #-34]	; 0xffffffde
   12134:	b	1229c <__assert_fail@plt+0x1484>
   12138:	ldr	r3, [fp, #4]
   1213c:	cmp	r3, #10
   12140:	beq	1216c <__assert_fail@plt+0x1354>
   12144:	ldr	r1, [fp, #4]
   12148:	movw	r0, #29996	; 0x752c
   1214c:	movt	r0, #1
   12150:	bl	11ee0 <__assert_fail@plt+0x10c8>
   12154:	str	r0, [fp, #16]
   12158:	ldr	r1, [fp, #4]
   1215c:	movw	r0, #29992	; 0x7528
   12160:	movt	r0, #1
   12164:	bl	11ee0 <__assert_fail@plt+0x10c8>
   12168:	str	r0, [fp, #20]
   1216c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12170:	eor	r3, r3, #1
   12174:	uxtb	r3, r3
   12178:	cmp	r3, #0
   1217c:	beq	121dc <__assert_fail@plt+0x13c4>
   12180:	ldr	r3, [fp, #16]
   12184:	str	r3, [fp, #-28]	; 0xffffffe4
   12188:	b	121cc <__assert_fail@plt+0x13b4>
   1218c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12190:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12194:	cmp	r2, r3
   12198:	bcs	121b4 <__assert_fail@plt+0x139c>
   1219c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   121a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   121a4:	add	r3, r2, r3
   121a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   121ac:	ldrb	r2, [r2]
   121b0:	strb	r2, [r3]
   121b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   121b8:	add	r3, r3, #1
   121bc:	str	r3, [fp, #-20]	; 0xffffffec
   121c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121c4:	add	r3, r3, #1
   121c8:	str	r3, [fp, #-28]	; 0xffffffe4
   121cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121d0:	ldrb	r3, [r3]
   121d4:	cmp	r3, #0
   121d8:	bne	1218c <__assert_fail@plt+0x1374>
   121dc:	mov	r3, #1
   121e0:	strb	r3, [fp, #-33]	; 0xffffffdf
   121e4:	ldr	r3, [fp, #20]
   121e8:	str	r3, [fp, #-28]	; 0xffffffe4
   121ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   121f0:	bl	10d64 <strlen@plt>
   121f4:	str	r0, [fp, #-32]	; 0xffffffe0
   121f8:	b	1229c <__assert_fail@plt+0x1484>
   121fc:	mov	r3, #1
   12200:	strb	r3, [fp, #-33]	; 0xffffffdf
   12204:	mov	r3, #1
   12208:	strb	r3, [fp, #-34]	; 0xffffffde
   1220c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12210:	eor	r3, r3, #1
   12214:	uxtb	r3, r3
   12218:	cmp	r3, #0
   1221c:	beq	12228 <__assert_fail@plt+0x1410>
   12220:	mov	r3, #1
   12224:	strb	r3, [fp, #-33]	; 0xffffffdf
   12228:	mov	r3, #2
   1222c:	str	r3, [fp, #4]
   12230:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12234:	eor	r3, r3, #1
   12238:	uxtb	r3, r3
   1223c:	cmp	r3, #0
   12240:	beq	12274 <__assert_fail@plt+0x145c>
   12244:	ldr	r2, [fp, #-20]	; 0xffffffec
   12248:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1224c:	cmp	r2, r3
   12250:	bcs	12268 <__assert_fail@plt+0x1450>
   12254:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12258:	ldr	r3, [fp, #-20]	; 0xffffffec
   1225c:	add	r3, r2, r3
   12260:	mov	r2, #39	; 0x27
   12264:	strb	r2, [r3]
   12268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1226c:	add	r3, r3, #1
   12270:	str	r3, [fp, #-20]	; 0xffffffec
   12274:	movw	r3, #29992	; 0x7528
   12278:	movt	r3, #1
   1227c:	str	r3, [fp, #-28]	; 0xffffffe4
   12280:	mov	r3, #1
   12284:	str	r3, [fp, #-32]	; 0xffffffe0
   12288:	b	1229c <__assert_fail@plt+0x1484>
   1228c:	mov	r3, #0
   12290:	strb	r3, [fp, #-34]	; 0xffffffde
   12294:	b	1229c <__assert_fail@plt+0x1484>
   12298:	bl	10e0c <abort@plt>
   1229c:	mov	r3, #0
   122a0:	str	r3, [fp, #-16]
   122a4:	b	13440 <__assert_fail@plt+0x2628>
   122a8:	mov	r3, #0
   122ac:	strb	r3, [fp, #-40]	; 0xffffffd8
   122b0:	mov	r3, #0
   122b4:	strb	r3, [fp, #-41]	; 0xffffffd7
   122b8:	mov	r3, #0
   122bc:	strb	r3, [fp, #-42]	; 0xffffffd6
   122c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   122c4:	cmp	r3, #0
   122c8:	beq	12364 <__assert_fail@plt+0x154c>
   122cc:	ldr	r3, [fp, #4]
   122d0:	cmp	r3, #2
   122d4:	beq	12364 <__assert_fail@plt+0x154c>
   122d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122dc:	cmp	r3, #0
   122e0:	beq	12364 <__assert_fail@plt+0x154c>
   122e4:	ldr	r2, [fp, #-16]
   122e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122ec:	add	r4, r2, r3
   122f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   122f4:	cmn	r3, #1
   122f8:	bne	1231c <__assert_fail@plt+0x1504>
   122fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12300:	cmp	r3, #1
   12304:	bls	1231c <__assert_fail@plt+0x1504>
   12308:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1230c:	bl	10d64 <strlen@plt>
   12310:	str	r0, [fp, #-100]	; 0xffffff9c
   12314:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12318:	b	12320 <__assert_fail@plt+0x1508>
   1231c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12320:	cmp	r3, r4
   12324:	bcc	12364 <__assert_fail@plt+0x154c>
   12328:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1232c:	ldr	r3, [fp, #-16]
   12330:	add	r3, r2, r3
   12334:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12338:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1233c:	mov	r0, r3
   12340:	bl	10c5c <memcmp@plt>
   12344:	mov	r3, r0
   12348:	cmp	r3, #0
   1234c:	bne	12364 <__assert_fail@plt+0x154c>
   12350:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12354:	cmp	r3, #0
   12358:	bne	135fc <__assert_fail@plt+0x27e4>
   1235c:	mov	r3, #1
   12360:	strb	r3, [fp, #-40]	; 0xffffffd8
   12364:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12368:	ldr	r3, [fp, #-16]
   1236c:	add	r3, r2, r3
   12370:	ldrb	r3, [r3]
   12374:	strb	r3, [fp, #-38]	; 0xffffffda
   12378:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1237c:	cmp	r3, #126	; 0x7e
   12380:	ldrls	pc, [pc, r3, lsl #2]
   12384:	b	12bbc <__assert_fail@plt+0x1da4>
   12388:	andeq	r2, r1, r4, lsl #11
   1238c:			; <UNDEFINED> instruction: 0x00012bbc
   12390:			; <UNDEFINED> instruction: 0x00012bbc
   12394:			; <UNDEFINED> instruction: 0x00012bbc
   12398:			; <UNDEFINED> instruction: 0x00012bbc
   1239c:			; <UNDEFINED> instruction: 0x00012bbc
   123a0:			; <UNDEFINED> instruction: 0x00012bbc
   123a4:	andeq	r2, r1, r8, ror r9
   123a8:	andeq	r2, r1, r4, lsl #19
   123ac:			; <UNDEFINED> instruction: 0x000129b4
   123b0:	muleq	r1, ip, r9
   123b4:	andeq	r2, r1, r0, asr #19
   123b8:	muleq	r1, r0, r9
   123bc:	andeq	r2, r1, r8, lsr #19
   123c0:			; <UNDEFINED> instruction: 0x00012bbc
   123c4:			; <UNDEFINED> instruction: 0x00012bbc
   123c8:			; <UNDEFINED> instruction: 0x00012bbc
   123cc:			; <UNDEFINED> instruction: 0x00012bbc
   123d0:			; <UNDEFINED> instruction: 0x00012bbc
   123d4:			; <UNDEFINED> instruction: 0x00012bbc
   123d8:			; <UNDEFINED> instruction: 0x00012bbc
   123dc:			; <UNDEFINED> instruction: 0x00012bbc
   123e0:			; <UNDEFINED> instruction: 0x00012bbc
   123e4:			; <UNDEFINED> instruction: 0x00012bbc
   123e8:			; <UNDEFINED> instruction: 0x00012bbc
   123ec:			; <UNDEFINED> instruction: 0x00012bbc
   123f0:			; <UNDEFINED> instruction: 0x00012bbc
   123f4:			; <UNDEFINED> instruction: 0x00012bbc
   123f8:			; <UNDEFINED> instruction: 0x00012bbc
   123fc:			; <UNDEFINED> instruction: 0x00012bbc
   12400:			; <UNDEFINED> instruction: 0x00012bbc
   12404:			; <UNDEFINED> instruction: 0x00012bbc
   12408:	andeq	r2, r1, r0, lsr #21
   1240c:	andeq	r2, r1, r8, lsr #21
   12410:	andeq	r2, r1, r8, lsr #21
   12414:	muleq	r1, r4, sl
   12418:	andeq	r2, r1, r8, lsr #21
   1241c:			; <UNDEFINED> instruction: 0x00012bb0
   12420:	andeq	r2, r1, r8, lsr #21
   12424:	andeq	r2, r1, r4, asr #21
   12428:	andeq	r2, r1, r8, lsr #21
   1242c:	andeq	r2, r1, r8, lsr #21
   12430:	andeq	r2, r1, r8, lsr #21
   12434:			; <UNDEFINED> instruction: 0x00012bb0
   12438:			; <UNDEFINED> instruction: 0x00012bb0
   1243c:			; <UNDEFINED> instruction: 0x00012bb0
   12440:			; <UNDEFINED> instruction: 0x00012bb0
   12444:			; <UNDEFINED> instruction: 0x00012bb0
   12448:			; <UNDEFINED> instruction: 0x00012bb0
   1244c:			; <UNDEFINED> instruction: 0x00012bb0
   12450:			; <UNDEFINED> instruction: 0x00012bb0
   12454:			; <UNDEFINED> instruction: 0x00012bb0
   12458:			; <UNDEFINED> instruction: 0x00012bb0
   1245c:			; <UNDEFINED> instruction: 0x00012bb0
   12460:			; <UNDEFINED> instruction: 0x00012bb0
   12464:			; <UNDEFINED> instruction: 0x00012bb0
   12468:			; <UNDEFINED> instruction: 0x00012bb0
   1246c:			; <UNDEFINED> instruction: 0x00012bb0
   12470:			; <UNDEFINED> instruction: 0x00012bb0
   12474:	andeq	r2, r1, r8, lsr #21
   12478:	andeq	r2, r1, r8, lsr #21
   1247c:	andeq	r2, r1, r8, lsr #21
   12480:	andeq	r2, r1, r8, lsr #21
   12484:	andeq	r2, r1, r4, ror #14
   12488:			; <UNDEFINED> instruction: 0x00012bbc
   1248c:			; <UNDEFINED> instruction: 0x00012bb0
   12490:			; <UNDEFINED> instruction: 0x00012bb0
   12494:			; <UNDEFINED> instruction: 0x00012bb0
   12498:			; <UNDEFINED> instruction: 0x00012bb0
   1249c:			; <UNDEFINED> instruction: 0x00012bb0
   124a0:			; <UNDEFINED> instruction: 0x00012bb0
   124a4:			; <UNDEFINED> instruction: 0x00012bb0
   124a8:			; <UNDEFINED> instruction: 0x00012bb0
   124ac:			; <UNDEFINED> instruction: 0x00012bb0
   124b0:			; <UNDEFINED> instruction: 0x00012bb0
   124b4:			; <UNDEFINED> instruction: 0x00012bb0
   124b8:			; <UNDEFINED> instruction: 0x00012bb0
   124bc:			; <UNDEFINED> instruction: 0x00012bb0
   124c0:			; <UNDEFINED> instruction: 0x00012bb0
   124c4:			; <UNDEFINED> instruction: 0x00012bb0
   124c8:			; <UNDEFINED> instruction: 0x00012bb0
   124cc:			; <UNDEFINED> instruction: 0x00012bb0
   124d0:			; <UNDEFINED> instruction: 0x00012bb0
   124d4:			; <UNDEFINED> instruction: 0x00012bb0
   124d8:			; <UNDEFINED> instruction: 0x00012bb0
   124dc:			; <UNDEFINED> instruction: 0x00012bb0
   124e0:			; <UNDEFINED> instruction: 0x00012bb0
   124e4:			; <UNDEFINED> instruction: 0x00012bb0
   124e8:			; <UNDEFINED> instruction: 0x00012bb0
   124ec:			; <UNDEFINED> instruction: 0x00012bb0
   124f0:			; <UNDEFINED> instruction: 0x00012bb0
   124f4:	andeq	r2, r1, r8, lsr #21
   124f8:	andeq	r2, r1, ip, asr #19
   124fc:			; <UNDEFINED> instruction: 0x00012bb0
   12500:	andeq	r2, r1, r8, lsr #21
   12504:			; <UNDEFINED> instruction: 0x00012bb0
   12508:	andeq	r2, r1, r8, lsr #21
   1250c:			; <UNDEFINED> instruction: 0x00012bb0
   12510:			; <UNDEFINED> instruction: 0x00012bb0
   12514:			; <UNDEFINED> instruction: 0x00012bb0
   12518:			; <UNDEFINED> instruction: 0x00012bb0
   1251c:			; <UNDEFINED> instruction: 0x00012bb0
   12520:			; <UNDEFINED> instruction: 0x00012bb0
   12524:			; <UNDEFINED> instruction: 0x00012bb0
   12528:			; <UNDEFINED> instruction: 0x00012bb0
   1252c:			; <UNDEFINED> instruction: 0x00012bb0
   12530:			; <UNDEFINED> instruction: 0x00012bb0
   12534:			; <UNDEFINED> instruction: 0x00012bb0
   12538:			; <UNDEFINED> instruction: 0x00012bb0
   1253c:			; <UNDEFINED> instruction: 0x00012bb0
   12540:			; <UNDEFINED> instruction: 0x00012bb0
   12544:			; <UNDEFINED> instruction: 0x00012bb0
   12548:			; <UNDEFINED> instruction: 0x00012bb0
   1254c:			; <UNDEFINED> instruction: 0x00012bb0
   12550:			; <UNDEFINED> instruction: 0x00012bb0
   12554:			; <UNDEFINED> instruction: 0x00012bb0
   12558:			; <UNDEFINED> instruction: 0x00012bb0
   1255c:			; <UNDEFINED> instruction: 0x00012bb0
   12560:			; <UNDEFINED> instruction: 0x00012bb0
   12564:			; <UNDEFINED> instruction: 0x00012bb0
   12568:			; <UNDEFINED> instruction: 0x00012bb0
   1256c:			; <UNDEFINED> instruction: 0x00012bb0
   12570:			; <UNDEFINED> instruction: 0x00012bb0
   12574:	andeq	r2, r1, ip, asr #20
   12578:	andeq	r2, r1, r8, lsr #21
   1257c:	andeq	r2, r1, ip, asr #20
   12580:	muleq	r1, r4, sl
   12584:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12588:	cmp	r3, #0
   1258c:	beq	12750 <__assert_fail@plt+0x1938>
   12590:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12594:	cmp	r3, #0
   12598:	bne	13604 <__assert_fail@plt+0x27ec>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [fp, #-41]	; 0xffffffd7
   125a4:	ldr	r3, [fp, #4]
   125a8:	cmp	r3, #2
   125ac:	bne	1265c <__assert_fail@plt+0x1844>
   125b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   125b4:	eor	r3, r3, #1
   125b8:	uxtb	r3, r3
   125bc:	cmp	r3, #0
   125c0:	beq	1265c <__assert_fail@plt+0x1844>
   125c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   125c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125cc:	cmp	r2, r3
   125d0:	bcs	125e8 <__assert_fail@plt+0x17d0>
   125d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   125d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125dc:	add	r3, r2, r3
   125e0:	mov	r2, #39	; 0x27
   125e4:	strb	r2, [r3]
   125e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125ec:	add	r3, r3, #1
   125f0:	str	r3, [fp, #-20]	; 0xffffffec
   125f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   125f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125fc:	cmp	r2, r3
   12600:	bcs	12618 <__assert_fail@plt+0x1800>
   12604:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1260c:	add	r3, r2, r3
   12610:	mov	r2, #36	; 0x24
   12614:	strb	r2, [r3]
   12618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1261c:	add	r3, r3, #1
   12620:	str	r3, [fp, #-20]	; 0xffffffec
   12624:	ldr	r2, [fp, #-20]	; 0xffffffec
   12628:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1262c:	cmp	r2, r3
   12630:	bcs	12648 <__assert_fail@plt+0x1830>
   12634:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1263c:	add	r3, r2, r3
   12640:	mov	r2, #39	; 0x27
   12644:	strb	r2, [r3]
   12648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1264c:	add	r3, r3, #1
   12650:	str	r3, [fp, #-20]	; 0xffffffec
   12654:	mov	r3, #1
   12658:	strb	r3, [fp, #-35]	; 0xffffffdd
   1265c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12660:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12664:	cmp	r2, r3
   12668:	bcs	12680 <__assert_fail@plt+0x1868>
   1266c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12670:	ldr	r3, [fp, #-20]	; 0xffffffec
   12674:	add	r3, r2, r3
   12678:	mov	r2, #92	; 0x5c
   1267c:	strb	r2, [r3]
   12680:	ldr	r3, [fp, #-20]	; 0xffffffec
   12684:	add	r3, r3, #1
   12688:	str	r3, [fp, #-20]	; 0xffffffec
   1268c:	ldr	r3, [fp, #4]
   12690:	cmp	r3, #2
   12694:	beq	12744 <__assert_fail@plt+0x192c>
   12698:	ldr	r3, [fp, #-16]
   1269c:	add	r3, r3, #1
   126a0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   126a4:	cmp	r2, r3
   126a8:	bls	12744 <__assert_fail@plt+0x192c>
   126ac:	ldr	r3, [fp, #-16]
   126b0:	add	r3, r3, #1
   126b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   126b8:	add	r3, r2, r3
   126bc:	ldrb	r3, [r3]
   126c0:	cmp	r3, #47	; 0x2f
   126c4:	bls	12744 <__assert_fail@plt+0x192c>
   126c8:	ldr	r3, [fp, #-16]
   126cc:	add	r3, r3, #1
   126d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   126d4:	add	r3, r2, r3
   126d8:	ldrb	r3, [r3]
   126dc:	cmp	r3, #57	; 0x39
   126e0:	bhi	12744 <__assert_fail@plt+0x192c>
   126e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   126e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   126ec:	cmp	r2, r3
   126f0:	bcs	12708 <__assert_fail@plt+0x18f0>
   126f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   126f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   126fc:	add	r3, r2, r3
   12700:	mov	r2, #48	; 0x30
   12704:	strb	r2, [r3]
   12708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1270c:	add	r3, r3, #1
   12710:	str	r3, [fp, #-20]	; 0xffffffec
   12714:	ldr	r2, [fp, #-20]	; 0xffffffec
   12718:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1271c:	cmp	r2, r3
   12720:	bcs	12738 <__assert_fail@plt+0x1920>
   12724:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12728:	ldr	r3, [fp, #-20]	; 0xffffffec
   1272c:	add	r3, r2, r3
   12730:	mov	r2, #48	; 0x30
   12734:	strb	r2, [r3]
   12738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1273c:	add	r3, r3, #1
   12740:	str	r3, [fp, #-20]	; 0xffffffec
   12744:	mov	r3, #48	; 0x30
   12748:	strb	r3, [fp, #-38]	; 0xffffffda
   1274c:	b	1318c <__assert_fail@plt+0x2374>
   12750:	ldr	r3, [fp, #8]
   12754:	and	r3, r3, #1
   12758:	cmp	r3, #0
   1275c:	beq	1318c <__assert_fail@plt+0x2374>
   12760:	b	13434 <__assert_fail@plt+0x261c>
   12764:	ldr	r3, [fp, #4]
   12768:	cmp	r3, #2
   1276c:	beq	12780 <__assert_fail@plt+0x1968>
   12770:	ldr	r3, [fp, #4]
   12774:	cmp	r3, #5
   12778:	beq	12790 <__assert_fail@plt+0x1978>
   1277c:	b	12974 <__assert_fail@plt+0x1b5c>
   12780:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12784:	cmp	r3, #0
   12788:	beq	12968 <__assert_fail@plt+0x1b50>
   1278c:	b	13638 <__assert_fail@plt+0x2820>
   12790:	ldr	r3, [fp, #8]
   12794:	and	r3, r3, #4
   12798:	cmp	r3, #0
   1279c:	beq	12970 <__assert_fail@plt+0x1b58>
   127a0:	ldr	r3, [fp, #-16]
   127a4:	add	r3, r3, #2
   127a8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   127ac:	cmp	r2, r3
   127b0:	bls	12970 <__assert_fail@plt+0x1b58>
   127b4:	ldr	r3, [fp, #-16]
   127b8:	add	r3, r3, #1
   127bc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   127c0:	add	r3, r2, r3
   127c4:	ldrb	r3, [r3]
   127c8:	cmp	r3, #63	; 0x3f
   127cc:	bne	12970 <__assert_fail@plt+0x1b58>
   127d0:	ldr	r3, [fp, #-16]
   127d4:	add	r3, r3, #2
   127d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   127dc:	add	r3, r2, r3
   127e0:	ldrb	r3, [r3]
   127e4:	sub	r3, r3, #33	; 0x21
   127e8:	cmp	r3, #29
   127ec:	ldrls	pc, [pc, r3, lsl #2]
   127f0:	b	12960 <__assert_fail@plt+0x1b48>
   127f4:	andeq	r2, r1, ip, ror #16
   127f8:	andeq	r2, r1, r0, ror #18
   127fc:	andeq	r2, r1, r0, ror #18
   12800:	andeq	r2, r1, r0, ror #18
   12804:	andeq	r2, r1, r0, ror #18
   12808:	andeq	r2, r1, r0, ror #18
   1280c:	andeq	r2, r1, ip, ror #16
   12810:	andeq	r2, r1, ip, ror #16
   12814:	andeq	r2, r1, ip, ror #16
   12818:	andeq	r2, r1, r0, ror #18
   1281c:	andeq	r2, r1, r0, ror #18
   12820:	andeq	r2, r1, r0, ror #18
   12824:	andeq	r2, r1, ip, ror #16
   12828:	andeq	r2, r1, r0, ror #18
   1282c:	andeq	r2, r1, ip, ror #16
   12830:	andeq	r2, r1, r0, ror #18
   12834:	andeq	r2, r1, r0, ror #18
   12838:	andeq	r2, r1, r0, ror #18
   1283c:	andeq	r2, r1, r0, ror #18
   12840:	andeq	r2, r1, r0, ror #18
   12844:	andeq	r2, r1, r0, ror #18
   12848:	andeq	r2, r1, r0, ror #18
   1284c:	andeq	r2, r1, r0, ror #18
   12850:	andeq	r2, r1, r0, ror #18
   12854:	andeq	r2, r1, r0, ror #18
   12858:	andeq	r2, r1, r0, ror #18
   1285c:	andeq	r2, r1, r0, ror #18
   12860:	andeq	r2, r1, ip, ror #16
   12864:	andeq	r2, r1, ip, ror #16
   12868:	andeq	r2, r1, ip, ror #16
   1286c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12870:	cmp	r3, #0
   12874:	bne	1360c <__assert_fail@plt+0x27f4>
   12878:	ldr	r3, [fp, #-16]
   1287c:	add	r3, r3, #2
   12880:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12884:	add	r3, r2, r3
   12888:	ldrb	r3, [r3]
   1288c:	strb	r3, [fp, #-38]	; 0xffffffda
   12890:	ldr	r3, [fp, #-16]
   12894:	add	r3, r3, #2
   12898:	str	r3, [fp, #-16]
   1289c:	ldr	r2, [fp, #-20]	; 0xffffffec
   128a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128a4:	cmp	r2, r3
   128a8:	bcs	128c0 <__assert_fail@plt+0x1aa8>
   128ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128b4:	add	r3, r2, r3
   128b8:	mov	r2, #63	; 0x3f
   128bc:	strb	r2, [r3]
   128c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128c4:	add	r3, r3, #1
   128c8:	str	r3, [fp, #-20]	; 0xffffffec
   128cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   128d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128d4:	cmp	r2, r3
   128d8:	bcs	128f0 <__assert_fail@plt+0x1ad8>
   128dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128e4:	add	r3, r2, r3
   128e8:	mov	r2, #34	; 0x22
   128ec:	strb	r2, [r3]
   128f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128f4:	add	r3, r3, #1
   128f8:	str	r3, [fp, #-20]	; 0xffffffec
   128fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12900:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12904:	cmp	r2, r3
   12908:	bcs	12920 <__assert_fail@plt+0x1b08>
   1290c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12910:	ldr	r3, [fp, #-20]	; 0xffffffec
   12914:	add	r3, r2, r3
   12918:	mov	r2, #34	; 0x22
   1291c:	strb	r2, [r3]
   12920:	ldr	r3, [fp, #-20]	; 0xffffffec
   12924:	add	r3, r3, #1
   12928:	str	r3, [fp, #-20]	; 0xffffffec
   1292c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12930:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12934:	cmp	r2, r3
   12938:	bcs	12950 <__assert_fail@plt+0x1b38>
   1293c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12940:	ldr	r3, [fp, #-20]	; 0xffffffec
   12944:	add	r3, r2, r3
   12948:	mov	r2, #63	; 0x3f
   1294c:	strb	r2, [r3]
   12950:	ldr	r3, [fp, #-20]	; 0xffffffec
   12954:	add	r3, r3, #1
   12958:	str	r3, [fp, #-20]	; 0xffffffec
   1295c:	b	12964 <__assert_fail@plt+0x1b4c>
   12960:	nop	{0}
   12964:	b	12970 <__assert_fail@plt+0x1b58>
   12968:	nop	{0}
   1296c:	b	131c0 <__assert_fail@plt+0x23a8>
   12970:	nop	{0}
   12974:	b	131c0 <__assert_fail@plt+0x23a8>
   12978:	mov	r3, #97	; 0x61
   1297c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12980:	b	12a34 <__assert_fail@plt+0x1c1c>
   12984:	mov	r3, #98	; 0x62
   12988:	strb	r3, [fp, #-39]	; 0xffffffd9
   1298c:	b	12a34 <__assert_fail@plt+0x1c1c>
   12990:	mov	r3, #102	; 0x66
   12994:	strb	r3, [fp, #-39]	; 0xffffffd9
   12998:	b	12a34 <__assert_fail@plt+0x1c1c>
   1299c:	mov	r3, #110	; 0x6e
   129a0:	strb	r3, [fp, #-39]	; 0xffffffd9
   129a4:	b	12a18 <__assert_fail@plt+0x1c00>
   129a8:	mov	r3, #114	; 0x72
   129ac:	strb	r3, [fp, #-39]	; 0xffffffd9
   129b0:	b	12a18 <__assert_fail@plt+0x1c00>
   129b4:	mov	r3, #116	; 0x74
   129b8:	strb	r3, [fp, #-39]	; 0xffffffd9
   129bc:	b	12a18 <__assert_fail@plt+0x1c00>
   129c0:	mov	r3, #118	; 0x76
   129c4:	strb	r3, [fp, #-39]	; 0xffffffd9
   129c8:	b	12a34 <__assert_fail@plt+0x1c1c>
   129cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   129d0:	strb	r3, [fp, #-39]	; 0xffffffd9
   129d4:	ldr	r3, [fp, #4]
   129d8:	cmp	r3, #2
   129dc:	bne	129f0 <__assert_fail@plt+0x1bd8>
   129e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   129e4:	cmp	r3, #0
   129e8:	beq	1334c <__assert_fail@plt+0x2534>
   129ec:	b	13638 <__assert_fail@plt+0x2820>
   129f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   129f4:	cmp	r3, #0
   129f8:	beq	12a14 <__assert_fail@plt+0x1bfc>
   129fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a00:	cmp	r3, #0
   12a04:	beq	12a14 <__assert_fail@plt+0x1bfc>
   12a08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a0c:	cmp	r3, #0
   12a10:	bne	13354 <__assert_fail@plt+0x253c>
   12a14:	nop	{0}
   12a18:	ldr	r3, [fp, #4]
   12a1c:	cmp	r3, #2
   12a20:	bne	12a30 <__assert_fail@plt+0x1c18>
   12a24:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a28:	cmp	r3, #0
   12a2c:	bne	13614 <__assert_fail@plt+0x27fc>
   12a30:	nop	{0}
   12a34:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12a38:	cmp	r3, #0
   12a3c:	beq	13194 <__assert_fail@plt+0x237c>
   12a40:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   12a44:	strb	r3, [fp, #-38]	; 0xffffffda
   12a48:	b	1324c <__assert_fail@plt+0x2434>
   12a4c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12a50:	cmn	r3, #1
   12a54:	bne	12a78 <__assert_fail@plt+0x1c60>
   12a58:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12a5c:	add	r3, r3, #1
   12a60:	ldrb	r3, [r3]
   12a64:	cmp	r3, #0
   12a68:	movne	r3, #1
   12a6c:	moveq	r3, #0
   12a70:	uxtb	r3, r3
   12a74:	b	12a8c <__assert_fail@plt+0x1c74>
   12a78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12a7c:	cmp	r3, #1
   12a80:	movne	r3, #1
   12a84:	moveq	r3, #0
   12a88:	uxtb	r3, r3
   12a8c:	cmp	r3, #0
   12a90:	bne	1319c <__assert_fail@plt+0x2384>
   12a94:	ldr	r3, [fp, #-16]
   12a98:	cmp	r3, #0
   12a9c:	bne	131a4 <__assert_fail@plt+0x238c>
   12aa0:	mov	r3, #1
   12aa4:	strb	r3, [fp, #-42]	; 0xffffffd6
   12aa8:	ldr	r3, [fp, #4]
   12aac:	cmp	r3, #2
   12ab0:	bne	131ac <__assert_fail@plt+0x2394>
   12ab4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ab8:	cmp	r3, #0
   12abc:	beq	131ac <__assert_fail@plt+0x2394>
   12ac0:	b	13638 <__assert_fail@plt+0x2820>
   12ac4:	mov	r3, #1
   12ac8:	strb	r3, [fp, #-36]	; 0xffffffdc
   12acc:	mov	r3, #1
   12ad0:	strb	r3, [fp, #-42]	; 0xffffffd6
   12ad4:	ldr	r3, [fp, #4]
   12ad8:	cmp	r3, #2
   12adc:	bne	131b4 <__assert_fail@plt+0x239c>
   12ae0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ae4:	cmp	r3, #0
   12ae8:	bne	1361c <__assert_fail@plt+0x2804>
   12aec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12af0:	cmp	r3, #0
   12af4:	beq	12b14 <__assert_fail@plt+0x1cfc>
   12af8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12afc:	cmp	r3, #0
   12b00:	bne	12b14 <__assert_fail@plt+0x1cfc>
   12b04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12b08:	str	r3, [fp, #-24]	; 0xffffffe8
   12b0c:	mov	r3, #0
   12b10:	str	r3, [fp, #-92]	; 0xffffffa4
   12b14:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12b1c:	cmp	r2, r3
   12b20:	bcs	12b38 <__assert_fail@plt+0x1d20>
   12b24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b2c:	add	r3, r2, r3
   12b30:	mov	r2, #39	; 0x27
   12b34:	strb	r2, [r3]
   12b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b3c:	add	r3, r3, #1
   12b40:	str	r3, [fp, #-20]	; 0xffffffec
   12b44:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12b4c:	cmp	r2, r3
   12b50:	bcs	12b68 <__assert_fail@plt+0x1d50>
   12b54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b5c:	add	r3, r2, r3
   12b60:	mov	r2, #92	; 0x5c
   12b64:	strb	r2, [r3]
   12b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b6c:	add	r3, r3, #1
   12b70:	str	r3, [fp, #-20]	; 0xffffffec
   12b74:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12b7c:	cmp	r2, r3
   12b80:	bcs	12b98 <__assert_fail@plt+0x1d80>
   12b84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b8c:	add	r3, r2, r3
   12b90:	mov	r2, #39	; 0x27
   12b94:	strb	r2, [r3]
   12b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b9c:	add	r3, r3, #1
   12ba0:	str	r3, [fp, #-20]	; 0xffffffec
   12ba4:	mov	r3, #0
   12ba8:	strb	r3, [fp, #-35]	; 0xffffffdd
   12bac:	b	131b4 <__assert_fail@plt+0x239c>
   12bb0:	mov	r3, #1
   12bb4:	strb	r3, [fp, #-42]	; 0xffffffd6
   12bb8:	b	131c0 <__assert_fail@plt+0x23a8>
   12bbc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12bc0:	cmp	r3, #0
   12bc4:	beq	12c04 <__assert_fail@plt+0x1dec>
   12bc8:	mov	r3, #1
   12bcc:	str	r3, [fp, #-48]	; 0xffffffd0
   12bd0:	bl	10d40 <__ctype_b_loc@plt>
   12bd4:	mov	r3, r0
   12bd8:	ldr	r2, [r3]
   12bdc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12be0:	lsl	r3, r3, #1
   12be4:	add	r3, r2, r3
   12be8:	ldrh	r3, [r3]
   12bec:	and	r3, r3, #16384	; 0x4000
   12bf0:	cmp	r3, #0
   12bf4:	movne	r3, #1
   12bf8:	moveq	r3, #0
   12bfc:	strb	r3, [fp, #-49]	; 0xffffffcf
   12c00:	b	12e50 <__assert_fail@plt+0x2038>
   12c04:	sub	r3, fp, #76	; 0x4c
   12c08:	mov	r2, #8
   12c0c:	mov	r1, #0
   12c10:	mov	r0, r3
   12c14:	bl	10da0 <memset@plt>
   12c18:	mov	r3, #0
   12c1c:	str	r3, [fp, #-48]	; 0xffffffd0
   12c20:	mov	r3, #1
   12c24:	strb	r3, [fp, #-49]	; 0xffffffcf
   12c28:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12c2c:	cmn	r3, #1
   12c30:	bne	12c40 <__assert_fail@plt+0x1e28>
   12c34:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12c38:	bl	10d64 <strlen@plt>
   12c3c:	str	r0, [fp, #-100]	; 0xffffff9c
   12c40:	ldr	r2, [fp, #-16]
   12c44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c48:	add	r3, r2, r3
   12c4c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12c50:	add	r1, r2, r3
   12c54:	ldr	r2, [fp, #-16]
   12c58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c5c:	add	r3, r2, r3
   12c60:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12c64:	sub	r2, r2, r3
   12c68:	sub	r3, fp, #76	; 0x4c
   12c6c:	sub	r0, fp, #80	; 0x50
   12c70:	bl	164fc <__assert_fail@plt+0x56e4>
   12c74:	str	r0, [fp, #-64]	; 0xffffffc0
   12c78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c7c:	cmp	r3, #0
   12c80:	beq	12e44 <__assert_fail@plt+0x202c>
   12c84:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c88:	cmn	r3, #1
   12c8c:	bne	12c9c <__assert_fail@plt+0x1e84>
   12c90:	mov	r3, #0
   12c94:	strb	r3, [fp, #-49]	; 0xffffffcf
   12c98:	b	12e50 <__assert_fail@plt+0x2038>
   12c9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12ca0:	cmn	r3, #2
   12ca4:	bne	12cfc <__assert_fail@plt+0x1ee4>
   12ca8:	mov	r3, #0
   12cac:	strb	r3, [fp, #-49]	; 0xffffffcf
   12cb0:	b	12cc0 <__assert_fail@plt+0x1ea8>
   12cb4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12cb8:	add	r3, r3, #1
   12cbc:	str	r3, [fp, #-48]	; 0xffffffd0
   12cc0:	ldr	r2, [fp, #-16]
   12cc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12cc8:	add	r3, r2, r3
   12ccc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12cd0:	cmp	r2, r3
   12cd4:	bls	12e4c <__assert_fail@plt+0x2034>
   12cd8:	ldr	r2, [fp, #-16]
   12cdc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ce0:	add	r3, r2, r3
   12ce4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12ce8:	add	r3, r2, r3
   12cec:	ldrb	r3, [r3]
   12cf0:	cmp	r3, #0
   12cf4:	bne	12cb4 <__assert_fail@plt+0x1e9c>
   12cf8:	b	12e4c <__assert_fail@plt+0x2034>
   12cfc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d00:	cmp	r3, #0
   12d04:	beq	12df8 <__assert_fail@plt+0x1fe0>
   12d08:	ldr	r3, [fp, #4]
   12d0c:	cmp	r3, #2
   12d10:	bne	12df8 <__assert_fail@plt+0x1fe0>
   12d14:	mov	r3, #1
   12d18:	str	r3, [fp, #-56]	; 0xffffffc8
   12d1c:	b	12de8 <__assert_fail@plt+0x1fd0>
   12d20:	ldr	r2, [fp, #-16]
   12d24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d28:	add	r2, r2, r3
   12d2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d30:	add	r3, r2, r3
   12d34:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12d38:	add	r3, r2, r3
   12d3c:	ldrb	r3, [r3]
   12d40:	sub	r3, r3, #91	; 0x5b
   12d44:	cmp	r3, #33	; 0x21
   12d48:	ldrls	pc, [pc, r3, lsl #2]
   12d4c:	b	12dd8 <__assert_fail@plt+0x1fc0>
   12d50:	andeq	r3, r1, r8, lsr r6
   12d54:	andeq	r3, r1, r8, lsr r6
   12d58:	ldrdeq	r2, [r1], -r8
   12d5c:	andeq	r3, r1, r8, lsr r6
   12d60:	ldrdeq	r2, [r1], -r8
   12d64:	andeq	r3, r1, r8, lsr r6
   12d68:	ldrdeq	r2, [r1], -r8
   12d6c:	ldrdeq	r2, [r1], -r8
   12d70:	ldrdeq	r2, [r1], -r8
   12d74:	ldrdeq	r2, [r1], -r8
   12d78:	ldrdeq	r2, [r1], -r8
   12d7c:	ldrdeq	r2, [r1], -r8
   12d80:	ldrdeq	r2, [r1], -r8
   12d84:	ldrdeq	r2, [r1], -r8
   12d88:	ldrdeq	r2, [r1], -r8
   12d8c:	ldrdeq	r2, [r1], -r8
   12d90:	ldrdeq	r2, [r1], -r8
   12d94:	ldrdeq	r2, [r1], -r8
   12d98:	ldrdeq	r2, [r1], -r8
   12d9c:	ldrdeq	r2, [r1], -r8
   12da0:	ldrdeq	r2, [r1], -r8
   12da4:	ldrdeq	r2, [r1], -r8
   12da8:	ldrdeq	r2, [r1], -r8
   12dac:	ldrdeq	r2, [r1], -r8
   12db0:	ldrdeq	r2, [r1], -r8
   12db4:	ldrdeq	r2, [r1], -r8
   12db8:	ldrdeq	r2, [r1], -r8
   12dbc:	ldrdeq	r2, [r1], -r8
   12dc0:	ldrdeq	r2, [r1], -r8
   12dc4:	ldrdeq	r2, [r1], -r8
   12dc8:	ldrdeq	r2, [r1], -r8
   12dcc:	ldrdeq	r2, [r1], -r8
   12dd0:	ldrdeq	r2, [r1], -r8
   12dd4:	andeq	r3, r1, r8, lsr r6
   12dd8:	nop	{0}
   12ddc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12de0:	add	r3, r3, #1
   12de4:	str	r3, [fp, #-56]	; 0xffffffc8
   12de8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12dec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12df0:	cmp	r2, r3
   12df4:	bcc	12d20 <__assert_fail@plt+0x1f08>
   12df8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12dfc:	mov	r0, r3
   12e00:	bl	10c98 <iswprint@plt>
   12e04:	mov	r3, r0
   12e08:	cmp	r3, #0
   12e0c:	bne	12e18 <__assert_fail@plt+0x2000>
   12e10:	mov	r3, #0
   12e14:	strb	r3, [fp, #-49]	; 0xffffffcf
   12e18:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12e1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12e20:	add	r3, r2, r3
   12e24:	str	r3, [fp, #-48]	; 0xffffffd0
   12e28:	sub	r3, fp, #76	; 0x4c
   12e2c:	mov	r0, r3
   12e30:	bl	10c50 <mbsinit@plt>
   12e34:	mov	r3, r0
   12e38:	cmp	r3, #0
   12e3c:	beq	12c40 <__assert_fail@plt+0x1e28>
   12e40:	b	12e50 <__assert_fail@plt+0x2038>
   12e44:	nop	{0}
   12e48:	b	12e50 <__assert_fail@plt+0x2038>
   12e4c:	nop	{0}
   12e50:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12e54:	strb	r3, [fp, #-42]	; 0xffffffd6
   12e58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e5c:	cmp	r3, #1
   12e60:	bhi	12e84 <__assert_fail@plt+0x206c>
   12e64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12e68:	cmp	r3, #0
   12e6c:	beq	131bc <__assert_fail@plt+0x23a4>
   12e70:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12e74:	eor	r3, r3, #1
   12e78:	uxtb	r3, r3
   12e7c:	cmp	r3, #0
   12e80:	beq	131bc <__assert_fail@plt+0x23a4>
   12e84:	ldr	r2, [fp, #-16]
   12e88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e8c:	add	r3, r2, r3
   12e90:	str	r3, [fp, #-68]	; 0xffffffbc
   12e94:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12e98:	cmp	r3, #0
   12e9c:	beq	13050 <__assert_fail@plt+0x2238>
   12ea0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12ea4:	eor	r3, r3, #1
   12ea8:	uxtb	r3, r3
   12eac:	cmp	r3, #0
   12eb0:	beq	13050 <__assert_fail@plt+0x2238>
   12eb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12eb8:	cmp	r3, #0
   12ebc:	bne	13624 <__assert_fail@plt+0x280c>
   12ec0:	mov	r3, #1
   12ec4:	strb	r3, [fp, #-41]	; 0xffffffd7
   12ec8:	ldr	r3, [fp, #4]
   12ecc:	cmp	r3, #2
   12ed0:	bne	12f80 <__assert_fail@plt+0x2168>
   12ed4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12ed8:	eor	r3, r3, #1
   12edc:	uxtb	r3, r3
   12ee0:	cmp	r3, #0
   12ee4:	beq	12f80 <__assert_fail@plt+0x2168>
   12ee8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12eec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ef0:	cmp	r2, r3
   12ef4:	bcs	12f0c <__assert_fail@plt+0x20f4>
   12ef8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f00:	add	r3, r2, r3
   12f04:	mov	r2, #39	; 0x27
   12f08:	strb	r2, [r3]
   12f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f10:	add	r3, r3, #1
   12f14:	str	r3, [fp, #-20]	; 0xffffffec
   12f18:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f20:	cmp	r2, r3
   12f24:	bcs	12f3c <__assert_fail@plt+0x2124>
   12f28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f30:	add	r3, r2, r3
   12f34:	mov	r2, #36	; 0x24
   12f38:	strb	r2, [r3]
   12f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f40:	add	r3, r3, #1
   12f44:	str	r3, [fp, #-20]	; 0xffffffec
   12f48:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f50:	cmp	r2, r3
   12f54:	bcs	12f6c <__assert_fail@plt+0x2154>
   12f58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f60:	add	r3, r2, r3
   12f64:	mov	r2, #39	; 0x27
   12f68:	strb	r2, [r3]
   12f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f70:	add	r3, r3, #1
   12f74:	str	r3, [fp, #-20]	; 0xffffffec
   12f78:	mov	r3, #1
   12f7c:	strb	r3, [fp, #-35]	; 0xffffffdd
   12f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f88:	cmp	r2, r3
   12f8c:	bcs	12fa4 <__assert_fail@plt+0x218c>
   12f90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f98:	add	r3, r2, r3
   12f9c:	mov	r2, #92	; 0x5c
   12fa0:	strb	r2, [r3]
   12fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fa8:	add	r3, r3, #1
   12fac:	str	r3, [fp, #-20]	; 0xffffffec
   12fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12fb8:	cmp	r2, r3
   12fbc:	bcs	12fe4 <__assert_fail@plt+0x21cc>
   12fc0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12fc4:	lsr	r3, r3, #6
   12fc8:	uxtb	r2, r3
   12fcc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fd4:	add	r3, r1, r3
   12fd8:	add	r2, r2, #48	; 0x30
   12fdc:	uxtb	r2, r2
   12fe0:	strb	r2, [r3]
   12fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fe8:	add	r3, r3, #1
   12fec:	str	r3, [fp, #-20]	; 0xffffffec
   12ff0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ff4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ff8:	cmp	r2, r3
   12ffc:	bcs	1302c <__assert_fail@plt+0x2214>
   13000:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13004:	lsr	r3, r3, #3
   13008:	uxtb	r3, r3
   1300c:	and	r3, r3, #7
   13010:	uxtb	r2, r3
   13014:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13018:	ldr	r3, [fp, #-20]	; 0xffffffec
   1301c:	add	r3, r1, r3
   13020:	add	r2, r2, #48	; 0x30
   13024:	uxtb	r2, r2
   13028:	strb	r2, [r3]
   1302c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13030:	add	r3, r3, #1
   13034:	str	r3, [fp, #-20]	; 0xffffffec
   13038:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1303c:	and	r3, r3, #7
   13040:	uxtb	r3, r3
   13044:	add	r3, r3, #48	; 0x30
   13048:	strb	r3, [fp, #-38]	; 0xffffffda
   1304c:	b	13094 <__assert_fail@plt+0x227c>
   13050:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13054:	cmp	r3, #0
   13058:	beq	13094 <__assert_fail@plt+0x227c>
   1305c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13060:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13064:	cmp	r2, r3
   13068:	bcs	13080 <__assert_fail@plt+0x2268>
   1306c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13070:	ldr	r3, [fp, #-20]	; 0xffffffec
   13074:	add	r3, r2, r3
   13078:	mov	r2, #92	; 0x5c
   1307c:	strb	r2, [r3]
   13080:	ldr	r3, [fp, #-20]	; 0xffffffec
   13084:	add	r3, r3, #1
   13088:	str	r3, [fp, #-20]	; 0xffffffec
   1308c:	mov	r3, #0
   13090:	strb	r3, [fp, #-40]	; 0xffffffd8
   13094:	ldr	r3, [fp, #-16]
   13098:	add	r3, r3, #1
   1309c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   130a0:	cmp	r2, r3
   130a4:	bls	13184 <__assert_fail@plt+0x236c>
   130a8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   130ac:	cmp	r3, #0
   130b0:	beq	13130 <__assert_fail@plt+0x2318>
   130b4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   130b8:	eor	r3, r3, #1
   130bc:	uxtb	r3, r3
   130c0:	cmp	r3, #0
   130c4:	beq	13130 <__assert_fail@plt+0x2318>
   130c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   130cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130d0:	cmp	r2, r3
   130d4:	bcs	130ec <__assert_fail@plt+0x22d4>
   130d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   130e0:	add	r3, r2, r3
   130e4:	mov	r2, #39	; 0x27
   130e8:	strb	r2, [r3]
   130ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f0:	add	r3, r3, #1
   130f4:	str	r3, [fp, #-20]	; 0xffffffec
   130f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   130fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13100:	cmp	r2, r3
   13104:	bcs	1311c <__assert_fail@plt+0x2304>
   13108:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1310c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13110:	add	r3, r2, r3
   13114:	mov	r2, #39	; 0x27
   13118:	strb	r2, [r3]
   1311c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13120:	add	r3, r3, #1
   13124:	str	r3, [fp, #-20]	; 0xffffffec
   13128:	mov	r3, #0
   1312c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13130:	ldr	r2, [fp, #-20]	; 0xffffffec
   13134:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13138:	cmp	r2, r3
   1313c:	bcs	13154 <__assert_fail@plt+0x233c>
   13140:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13144:	ldr	r3, [fp, #-20]	; 0xffffffec
   13148:	add	r3, r2, r3
   1314c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13150:	strb	r2, [r3]
   13154:	ldr	r3, [fp, #-20]	; 0xffffffec
   13158:	add	r3, r3, #1
   1315c:	str	r3, [fp, #-20]	; 0xffffffec
   13160:	ldr	r3, [fp, #-16]
   13164:	add	r3, r3, #1
   13168:	str	r3, [fp, #-16]
   1316c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13170:	ldr	r3, [fp, #-16]
   13174:	add	r3, r2, r3
   13178:	ldrb	r3, [r3]
   1317c:	strb	r3, [fp, #-38]	; 0xffffffda
   13180:	b	12e94 <__assert_fail@plt+0x207c>
   13184:	nop	{0}
   13188:	b	13360 <__assert_fail@plt+0x2548>
   1318c:	nop	{0}
   13190:	b	131c0 <__assert_fail@plt+0x23a8>
   13194:	nop	{0}
   13198:	b	131c0 <__assert_fail@plt+0x23a8>
   1319c:	nop	{0}
   131a0:	b	131c0 <__assert_fail@plt+0x23a8>
   131a4:	nop	{0}
   131a8:	b	131c0 <__assert_fail@plt+0x23a8>
   131ac:	nop	{0}
   131b0:	b	131c0 <__assert_fail@plt+0x23a8>
   131b4:	nop	{0}
   131b8:	b	131c0 <__assert_fail@plt+0x23a8>
   131bc:	nop	{0}
   131c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   131c4:	eor	r3, r3, #1
   131c8:	uxtb	r3, r3
   131cc:	cmp	r3, #0
   131d0:	bne	131e0 <__assert_fail@plt+0x23c8>
   131d4:	ldr	r3, [fp, #4]
   131d8:	cmp	r3, #2
   131dc:	bne	131f4 <__assert_fail@plt+0x23dc>
   131e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131e4:	eor	r3, r3, #1
   131e8:	uxtb	r3, r3
   131ec:	cmp	r3, #0
   131f0:	bne	13234 <__assert_fail@plt+0x241c>
   131f4:	ldr	r3, [fp, #12]
   131f8:	cmp	r3, #0
   131fc:	beq	13234 <__assert_fail@plt+0x241c>
   13200:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13204:	lsr	r3, r3, #5
   13208:	uxtb	r3, r3
   1320c:	lsl	r3, r3, #2
   13210:	ldr	r2, [fp, #12]
   13214:	add	r3, r2, r3
   13218:	ldr	r2, [r3]
   1321c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13220:	and	r3, r3, #31
   13224:	lsr	r3, r2, r3
   13228:	and	r3, r3, #1
   1322c:	cmp	r3, #0
   13230:	bne	13248 <__assert_fail@plt+0x2430>
   13234:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13238:	eor	r3, r3, #1
   1323c:	uxtb	r3, r3
   13240:	cmp	r3, #0
   13244:	bne	1335c <__assert_fail@plt+0x2544>
   13248:	nop	{0}
   1324c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13250:	cmp	r3, #0
   13254:	bne	1362c <__assert_fail@plt+0x2814>
   13258:	mov	r3, #1
   1325c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13260:	ldr	r3, [fp, #4]
   13264:	cmp	r3, #2
   13268:	bne	13318 <__assert_fail@plt+0x2500>
   1326c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13270:	eor	r3, r3, #1
   13274:	uxtb	r3, r3
   13278:	cmp	r3, #0
   1327c:	beq	13318 <__assert_fail@plt+0x2500>
   13280:	ldr	r2, [fp, #-20]	; 0xffffffec
   13284:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13288:	cmp	r2, r3
   1328c:	bcs	132a4 <__assert_fail@plt+0x248c>
   13290:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13294:	ldr	r3, [fp, #-20]	; 0xffffffec
   13298:	add	r3, r2, r3
   1329c:	mov	r2, #39	; 0x27
   132a0:	strb	r2, [r3]
   132a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132a8:	add	r3, r3, #1
   132ac:	str	r3, [fp, #-20]	; 0xffffffec
   132b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   132b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132b8:	cmp	r2, r3
   132bc:	bcs	132d4 <__assert_fail@plt+0x24bc>
   132c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132c8:	add	r3, r2, r3
   132cc:	mov	r2, #36	; 0x24
   132d0:	strb	r2, [r3]
   132d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132d8:	add	r3, r3, #1
   132dc:	str	r3, [fp, #-20]	; 0xffffffec
   132e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   132e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132e8:	cmp	r2, r3
   132ec:	bcs	13304 <__assert_fail@plt+0x24ec>
   132f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132f8:	add	r3, r2, r3
   132fc:	mov	r2, #39	; 0x27
   13300:	strb	r2, [r3]
   13304:	ldr	r3, [fp, #-20]	; 0xffffffec
   13308:	add	r3, r3, #1
   1330c:	str	r3, [fp, #-20]	; 0xffffffec
   13310:	mov	r3, #1
   13314:	strb	r3, [fp, #-35]	; 0xffffffdd
   13318:	ldr	r2, [fp, #-20]	; 0xffffffec
   1331c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13320:	cmp	r2, r3
   13324:	bcs	1333c <__assert_fail@plt+0x2524>
   13328:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1332c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13330:	add	r3, r2, r3
   13334:	mov	r2, #92	; 0x5c
   13338:	strb	r2, [r3]
   1333c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13340:	add	r3, r3, #1
   13344:	str	r3, [fp, #-20]	; 0xffffffec
   13348:	b	13360 <__assert_fail@plt+0x2548>
   1334c:	nop	{0}
   13350:	b	13360 <__assert_fail@plt+0x2548>
   13354:	nop	{0}
   13358:	b	13360 <__assert_fail@plt+0x2548>
   1335c:	nop	{0}
   13360:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13364:	cmp	r3, #0
   13368:	beq	133e8 <__assert_fail@plt+0x25d0>
   1336c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13370:	eor	r3, r3, #1
   13374:	uxtb	r3, r3
   13378:	cmp	r3, #0
   1337c:	beq	133e8 <__assert_fail@plt+0x25d0>
   13380:	ldr	r2, [fp, #-20]	; 0xffffffec
   13384:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13388:	cmp	r2, r3
   1338c:	bcs	133a4 <__assert_fail@plt+0x258c>
   13390:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13394:	ldr	r3, [fp, #-20]	; 0xffffffec
   13398:	add	r3, r2, r3
   1339c:	mov	r2, #39	; 0x27
   133a0:	strb	r2, [r3]
   133a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133a8:	add	r3, r3, #1
   133ac:	str	r3, [fp, #-20]	; 0xffffffec
   133b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   133b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133b8:	cmp	r2, r3
   133bc:	bcs	133d4 <__assert_fail@plt+0x25bc>
   133c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133c8:	add	r3, r2, r3
   133cc:	mov	r2, #39	; 0x27
   133d0:	strb	r2, [r3]
   133d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133d8:	add	r3, r3, #1
   133dc:	str	r3, [fp, #-20]	; 0xffffffec
   133e0:	mov	r3, #0
   133e4:	strb	r3, [fp, #-35]	; 0xffffffdd
   133e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   133ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133f0:	cmp	r2, r3
   133f4:	bcs	1340c <__assert_fail@plt+0x25f4>
   133f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13400:	add	r3, r2, r3
   13404:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13408:	strb	r2, [r3]
   1340c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13410:	add	r3, r3, #1
   13414:	str	r3, [fp, #-20]	; 0xffffffec
   13418:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1341c:	eor	r3, r3, #1
   13420:	uxtb	r3, r3
   13424:	cmp	r3, #0
   13428:	beq	13434 <__assert_fail@plt+0x261c>
   1342c:	mov	r3, #0
   13430:	strb	r3, [fp, #-37]	; 0xffffffdb
   13434:	ldr	r3, [fp, #-16]
   13438:	add	r3, r3, #1
   1343c:	str	r3, [fp, #-16]
   13440:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13444:	cmn	r3, #1
   13448:	bne	13470 <__assert_fail@plt+0x2658>
   1344c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13450:	ldr	r3, [fp, #-16]
   13454:	add	r3, r2, r3
   13458:	ldrb	r3, [r3]
   1345c:	cmp	r3, #0
   13460:	movne	r3, #1
   13464:	moveq	r3, #0
   13468:	uxtb	r3, r3
   1346c:	b	13488 <__assert_fail@plt+0x2670>
   13470:	ldr	r2, [fp, #-16]
   13474:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13478:	cmp	r2, r3
   1347c:	movne	r3, #1
   13480:	moveq	r3, #0
   13484:	uxtb	r3, r3
   13488:	cmp	r3, #0
   1348c:	bne	122a8 <__assert_fail@plt+0x1490>
   13490:	ldr	r3, [fp, #-20]	; 0xffffffec
   13494:	cmp	r3, #0
   13498:	bne	134b4 <__assert_fail@plt+0x269c>
   1349c:	ldr	r3, [fp, #4]
   134a0:	cmp	r3, #2
   134a4:	bne	134b4 <__assert_fail@plt+0x269c>
   134a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   134ac:	cmp	r3, #0
   134b0:	bne	13634 <__assert_fail@plt+0x281c>
   134b4:	ldr	r3, [fp, #4]
   134b8:	cmp	r3, #2
   134bc:	bne	1355c <__assert_fail@plt+0x2744>
   134c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   134c4:	eor	r3, r3, #1
   134c8:	uxtb	r3, r3
   134cc:	cmp	r3, #0
   134d0:	beq	1355c <__assert_fail@plt+0x2744>
   134d4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   134d8:	cmp	r3, #0
   134dc:	beq	1355c <__assert_fail@plt+0x2744>
   134e0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   134e4:	cmp	r3, #0
   134e8:	beq	13530 <__assert_fail@plt+0x2718>
   134ec:	ldr	r3, [fp, #20]
   134f0:	str	r3, [sp, #16]
   134f4:	ldr	r3, [fp, #16]
   134f8:	str	r3, [sp, #12]
   134fc:	ldr	r3, [fp, #12]
   13500:	str	r3, [sp, #8]
   13504:	ldr	r3, [fp, #8]
   13508:	str	r3, [sp, #4]
   1350c:	mov	r3, #5
   13510:	str	r3, [sp]
   13514:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13518:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1351c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13520:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13524:	bl	11fe0 <__assert_fail@plt+0x11c8>
   13528:	mov	r3, r0
   1352c:	b	1369c <__assert_fail@plt+0x2884>
   13530:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13534:	cmp	r3, #0
   13538:	bne	1355c <__assert_fail@plt+0x2744>
   1353c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13540:	cmp	r3, #0
   13544:	beq	1355c <__assert_fail@plt+0x2744>
   13548:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1354c:	str	r3, [fp, #-92]	; 0xffffffa4
   13550:	mov	r3, #0
   13554:	str	r3, [fp, #-20]	; 0xffffffec
   13558:	b	12074 <__assert_fail@plt+0x125c>
   1355c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13560:	cmp	r3, #0
   13564:	beq	135d0 <__assert_fail@plt+0x27b8>
   13568:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1356c:	eor	r3, r3, #1
   13570:	uxtb	r3, r3
   13574:	cmp	r3, #0
   13578:	beq	135d0 <__assert_fail@plt+0x27b8>
   1357c:	b	135c0 <__assert_fail@plt+0x27a8>
   13580:	ldr	r2, [fp, #-20]	; 0xffffffec
   13584:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13588:	cmp	r2, r3
   1358c:	bcs	135a8 <__assert_fail@plt+0x2790>
   13590:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13594:	ldr	r3, [fp, #-20]	; 0xffffffec
   13598:	add	r3, r2, r3
   1359c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   135a0:	ldrb	r2, [r2]
   135a4:	strb	r2, [r3]
   135a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   135ac:	add	r3, r3, #1
   135b0:	str	r3, [fp, #-20]	; 0xffffffec
   135b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135b8:	add	r3, r3, #1
   135bc:	str	r3, [fp, #-28]	; 0xffffffe4
   135c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   135c4:	ldrb	r3, [r3]
   135c8:	cmp	r3, #0
   135cc:	bne	13580 <__assert_fail@plt+0x2768>
   135d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   135d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135d8:	cmp	r2, r3
   135dc:	bcs	135f4 <__assert_fail@plt+0x27dc>
   135e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   135e8:	add	r3, r2, r3
   135ec:	mov	r2, #0
   135f0:	strb	r2, [r3]
   135f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   135f8:	b	1369c <__assert_fail@plt+0x2884>
   135fc:	nop	{0}
   13600:	b	13638 <__assert_fail@plt+0x2820>
   13604:	nop	{0}
   13608:	b	13638 <__assert_fail@plt+0x2820>
   1360c:	nop	{0}
   13610:	b	13638 <__assert_fail@plt+0x2820>
   13614:	nop	{0}
   13618:	b	13638 <__assert_fail@plt+0x2820>
   1361c:	nop	{0}
   13620:	b	13638 <__assert_fail@plt+0x2820>
   13624:	nop	{0}
   13628:	b	13638 <__assert_fail@plt+0x2820>
   1362c:	nop	{0}
   13630:	b	13638 <__assert_fail@plt+0x2820>
   13634:	nop	{0}
   13638:	ldr	r3, [fp, #4]
   1363c:	cmp	r3, #2
   13640:	bne	13658 <__assert_fail@plt+0x2840>
   13644:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13648:	cmp	r3, #0
   1364c:	beq	13658 <__assert_fail@plt+0x2840>
   13650:	mov	r3, #4
   13654:	str	r3, [fp, #4]
   13658:	ldr	r3, [fp, #8]
   1365c:	bic	r3, r3, #2
   13660:	ldr	r2, [fp, #20]
   13664:	str	r2, [sp, #16]
   13668:	ldr	r2, [fp, #16]
   1366c:	str	r2, [sp, #12]
   13670:	mov	r2, #0
   13674:	str	r2, [sp, #8]
   13678:	str	r3, [sp, #4]
   1367c:	ldr	r3, [fp, #4]
   13680:	str	r3, [sp]
   13684:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13688:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1368c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13690:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13694:	bl	11fe0 <__assert_fail@plt+0x11c8>
   13698:	mov	r3, r0
   1369c:	mov	r0, r3
   136a0:	sub	sp, fp, #8
   136a4:	ldr	r4, [sp]
   136a8:	ldr	fp, [sp, #4]
   136ac:	add	sp, sp, #8
   136b0:	pop	{pc}		; (ldr pc, [sp], #4)
   136b4:	str	fp, [sp, #-8]!
   136b8:	str	lr, [sp, #4]
   136bc:	add	fp, sp, #4
   136c0:	sub	sp, sp, #56	; 0x38
   136c4:	str	r0, [fp, #-24]	; 0xffffffe8
   136c8:	str	r1, [fp, #-28]	; 0xffffffe4
   136cc:	str	r2, [fp, #-32]	; 0xffffffe0
   136d0:	str	r3, [fp, #-36]	; 0xffffffdc
   136d4:	ldr	r3, [fp, #4]
   136d8:	cmp	r3, #0
   136dc:	beq	136e8 <__assert_fail@plt+0x28d0>
   136e0:	ldr	r3, [fp, #4]
   136e4:	b	136f0 <__assert_fail@plt+0x28d8>
   136e8:	movw	r3, #33108	; 0x8154
   136ec:	movt	r3, #2
   136f0:	str	r3, [fp, #-8]
   136f4:	bl	10d88 <__errno_location@plt>
   136f8:	mov	r3, r0
   136fc:	ldr	r3, [r3]
   13700:	str	r3, [fp, #-12]
   13704:	ldr	r3, [fp, #-8]
   13708:	ldr	r3, [r3]
   1370c:	ldr	r2, [fp, #-8]
   13710:	ldr	r2, [r2, #4]
   13714:	ldr	r1, [fp, #-8]
   13718:	add	r1, r1, #8
   1371c:	ldr	r0, [fp, #-8]
   13720:	ldr	r0, [r0, #40]	; 0x28
   13724:	ldr	ip, [fp, #-8]
   13728:	ldr	ip, [ip, #44]	; 0x2c
   1372c:	str	ip, [sp, #16]
   13730:	str	r0, [sp, #12]
   13734:	str	r1, [sp, #8]
   13738:	str	r2, [sp, #4]
   1373c:	str	r3, [sp]
   13740:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13744:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13748:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1374c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13750:	bl	11fe0 <__assert_fail@plt+0x11c8>
   13754:	str	r0, [fp, #-16]
   13758:	bl	10d88 <__errno_location@plt>
   1375c:	mov	r2, r0
   13760:	ldr	r3, [fp, #-12]
   13764:	str	r3, [r2]
   13768:	ldr	r3, [fp, #-16]
   1376c:	mov	r0, r3
   13770:	sub	sp, fp, #4
   13774:	ldr	fp, [sp]
   13778:	add	sp, sp, #4
   1377c:	pop	{pc}		; (ldr pc, [sp], #4)
   13780:	str	fp, [sp, #-8]!
   13784:	str	lr, [sp, #4]
   13788:	add	fp, sp, #4
   1378c:	sub	sp, sp, #16
   13790:	str	r0, [fp, #-8]
   13794:	str	r1, [fp, #-12]
   13798:	str	r2, [fp, #-16]
   1379c:	ldr	r3, [fp, #-16]
   137a0:	mov	r2, #0
   137a4:	ldr	r1, [fp, #-12]
   137a8:	ldr	r0, [fp, #-8]
   137ac:	bl	137c8 <__assert_fail@plt+0x29b0>
   137b0:	mov	r3, r0
   137b4:	mov	r0, r3
   137b8:	sub	sp, fp, #4
   137bc:	ldr	fp, [sp]
   137c0:	add	sp, sp, #4
   137c4:	pop	{pc}		; (ldr pc, [sp], #4)
   137c8:	str	fp, [sp, #-8]!
   137cc:	str	lr, [sp, #4]
   137d0:	add	fp, sp, #4
   137d4:	sub	sp, sp, #64	; 0x40
   137d8:	str	r0, [fp, #-32]	; 0xffffffe0
   137dc:	str	r1, [fp, #-36]	; 0xffffffdc
   137e0:	str	r2, [fp, #-40]	; 0xffffffd8
   137e4:	str	r3, [fp, #-44]	; 0xffffffd4
   137e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137ec:	cmp	r3, #0
   137f0:	beq	137fc <__assert_fail@plt+0x29e4>
   137f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137f8:	b	13804 <__assert_fail@plt+0x29ec>
   137fc:	movw	r3, #33108	; 0x8154
   13800:	movt	r3, #2
   13804:	str	r3, [fp, #-8]
   13808:	bl	10d88 <__errno_location@plt>
   1380c:	mov	r3, r0
   13810:	ldr	r3, [r3]
   13814:	str	r3, [fp, #-12]
   13818:	ldr	r3, [fp, #-8]
   1381c:	ldr	r3, [r3, #4]
   13820:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13824:	cmp	r2, #0
   13828:	moveq	r2, #1
   1382c:	movne	r2, #0
   13830:	uxtb	r2, r2
   13834:	orr	r3, r3, r2
   13838:	str	r3, [fp, #-16]
   1383c:	ldr	r3, [fp, #-8]
   13840:	ldr	r3, [r3]
   13844:	ldr	r2, [fp, #-8]
   13848:	add	r2, r2, #8
   1384c:	ldr	r1, [fp, #-8]
   13850:	ldr	r1, [r1, #40]	; 0x28
   13854:	ldr	r0, [fp, #-8]
   13858:	ldr	r0, [r0, #44]	; 0x2c
   1385c:	str	r0, [sp, #16]
   13860:	str	r1, [sp, #12]
   13864:	str	r2, [sp, #8]
   13868:	ldr	r2, [fp, #-16]
   1386c:	str	r2, [sp, #4]
   13870:	str	r3, [sp]
   13874:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13878:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1387c:	mov	r1, #0
   13880:	mov	r0, #0
   13884:	bl	11fe0 <__assert_fail@plt+0x11c8>
   13888:	mov	r3, r0
   1388c:	add	r3, r3, #1
   13890:	str	r3, [fp, #-20]	; 0xffffffec
   13894:	ldr	r0, [fp, #-20]	; 0xffffffec
   13898:	bl	14cd8 <__assert_fail@plt+0x3ec0>
   1389c:	mov	r3, r0
   138a0:	str	r3, [fp, #-24]	; 0xffffffe8
   138a4:	ldr	r3, [fp, #-8]
   138a8:	ldr	r3, [r3]
   138ac:	ldr	r2, [fp, #-8]
   138b0:	add	r2, r2, #8
   138b4:	ldr	r1, [fp, #-8]
   138b8:	ldr	r1, [r1, #40]	; 0x28
   138bc:	ldr	r0, [fp, #-8]
   138c0:	ldr	r0, [r0, #44]	; 0x2c
   138c4:	str	r0, [sp, #16]
   138c8:	str	r1, [sp, #12]
   138cc:	str	r2, [sp, #8]
   138d0:	ldr	r2, [fp, #-16]
   138d4:	str	r2, [sp, #4]
   138d8:	str	r3, [sp]
   138dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   138e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   138e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   138ec:	bl	11fe0 <__assert_fail@plt+0x11c8>
   138f0:	bl	10d88 <__errno_location@plt>
   138f4:	mov	r2, r0
   138f8:	ldr	r3, [fp, #-12]
   138fc:	str	r3, [r2]
   13900:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13904:	cmp	r3, #0
   13908:	beq	1391c <__assert_fail@plt+0x2b04>
   1390c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13910:	sub	r2, r3, #1
   13914:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13918:	str	r2, [r3]
   1391c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13920:	mov	r0, r3
   13924:	sub	sp, fp, #4
   13928:	ldr	fp, [sp]
   1392c:	add	sp, sp, #4
   13930:	pop	{pc}		; (ldr pc, [sp], #4)
   13934:	str	fp, [sp, #-8]!
   13938:	str	lr, [sp, #4]
   1393c:	add	fp, sp, #4
   13940:	sub	sp, sp, #8
   13944:	movw	r3, #33008	; 0x80f0
   13948:	movt	r3, #2
   1394c:	ldr	r3, [r3]
   13950:	str	r3, [fp, #-12]
   13954:	mov	r3, #1
   13958:	str	r3, [fp, #-8]
   1395c:	b	13988 <__assert_fail@plt+0x2b70>
   13960:	ldr	r3, [fp, #-8]
   13964:	lsl	r3, r3, #3
   13968:	ldr	r2, [fp, #-12]
   1396c:	add	r3, r2, r3
   13970:	ldr	r3, [r3, #4]
   13974:	mov	r0, r3
   13978:	bl	16184 <__assert_fail@plt+0x536c>
   1397c:	ldr	r3, [fp, #-8]
   13980:	add	r3, r3, #1
   13984:	str	r3, [fp, #-8]
   13988:	movw	r3, #32996	; 0x80e4
   1398c:	movt	r3, #2
   13990:	ldr	r3, [r3]
   13994:	ldr	r2, [fp, #-8]
   13998:	cmp	r2, r3
   1399c:	blt	13960 <__assert_fail@plt+0x2b48>
   139a0:	ldr	r3, [fp, #-12]
   139a4:	ldr	r2, [r3, #4]
   139a8:	movw	r3, #33156	; 0x8184
   139ac:	movt	r3, #2
   139b0:	cmp	r2, r3
   139b4:	beq	139ec <__assert_fail@plt+0x2bd4>
   139b8:	ldr	r3, [fp, #-12]
   139bc:	ldr	r3, [r3, #4]
   139c0:	mov	r0, r3
   139c4:	bl	16184 <__assert_fail@plt+0x536c>
   139c8:	movw	r3, #33000	; 0x80e8
   139cc:	movt	r3, #2
   139d0:	mov	r2, #256	; 0x100
   139d4:	str	r2, [r3]
   139d8:	movw	r3, #33000	; 0x80e8
   139dc:	movt	r3, #2
   139e0:	movw	r2, #33156	; 0x8184
   139e4:	movt	r2, #2
   139e8:	str	r2, [r3, #4]
   139ec:	ldr	r2, [fp, #-12]
   139f0:	movw	r3, #33000	; 0x80e8
   139f4:	movt	r3, #2
   139f8:	cmp	r2, r3
   139fc:	beq	13a1c <__assert_fail@plt+0x2c04>
   13a00:	ldr	r0, [fp, #-12]
   13a04:	bl	16184 <__assert_fail@plt+0x536c>
   13a08:	movw	r3, #33008	; 0x80f0
   13a0c:	movt	r3, #2
   13a10:	movw	r2, #33000	; 0x80e8
   13a14:	movt	r2, #2
   13a18:	str	r2, [r3]
   13a1c:	movw	r3, #32996	; 0x80e4
   13a20:	movt	r3, #2
   13a24:	mov	r2, #1
   13a28:	str	r2, [r3]
   13a2c:	nop	{0}
   13a30:	sub	sp, fp, #4
   13a34:	ldr	fp, [sp]
   13a38:	add	sp, sp, #4
   13a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a40:	str	fp, [sp, #-8]!
   13a44:	str	lr, [sp, #4]
   13a48:	add	fp, sp, #4
   13a4c:	sub	sp, sp, #80	; 0x50
   13a50:	str	r0, [fp, #-48]	; 0xffffffd0
   13a54:	str	r1, [fp, #-52]	; 0xffffffcc
   13a58:	str	r2, [fp, #-56]	; 0xffffffc8
   13a5c:	str	r3, [fp, #-60]	; 0xffffffc4
   13a60:	bl	10d88 <__errno_location@plt>
   13a64:	mov	r3, r0
   13a68:	ldr	r3, [r3]
   13a6c:	str	r3, [fp, #-16]
   13a70:	movw	r3, #33008	; 0x80f0
   13a74:	movt	r3, #2
   13a78:	ldr	r3, [r3]
   13a7c:	str	r3, [fp, #-8]
   13a80:	mvn	r3, #-2147483648	; 0x80000000
   13a84:	str	r3, [fp, #-20]	; 0xffffffec
   13a88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a8c:	cmp	r3, #0
   13a90:	blt	13aa4 <__assert_fail@plt+0x2c8c>
   13a94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a9c:	cmp	r2, r3
   13aa0:	blt	13aa8 <__assert_fail@plt+0x2c90>
   13aa4:	bl	10e0c <abort@plt>
   13aa8:	movw	r3, #32996	; 0x80e4
   13aac:	movt	r3, #2
   13ab0:	ldr	r3, [r3]
   13ab4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ab8:	cmp	r2, r3
   13abc:	blt	13bb4 <__assert_fail@plt+0x2d9c>
   13ac0:	ldr	r2, [fp, #-8]
   13ac4:	movw	r3, #33000	; 0x80e8
   13ac8:	movt	r3, #2
   13acc:	cmp	r2, r3
   13ad0:	moveq	r3, #1
   13ad4:	movne	r3, #0
   13ad8:	strb	r3, [fp, #-21]	; 0xffffffeb
   13adc:	movw	r3, #32996	; 0x80e4
   13ae0:	movt	r3, #2
   13ae4:	ldr	r3, [r3]
   13ae8:	str	r3, [fp, #-40]	; 0xffffffd8
   13aec:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13af0:	cmp	r3, #0
   13af4:	beq	13b00 <__assert_fail@plt+0x2ce8>
   13af8:	mov	r0, #0
   13afc:	b	13b04 <__assert_fail@plt+0x2cec>
   13b00:	ldr	r0, [fp, #-8]
   13b04:	movw	r3, #32996	; 0x80e4
   13b08:	movt	r3, #2
   13b0c:	ldr	r3, [r3]
   13b10:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13b14:	sub	r3, r2, r3
   13b18:	add	r2, r3, #1
   13b1c:	sub	r1, fp, #40	; 0x28
   13b20:	mov	r3, #8
   13b24:	str	r3, [sp]
   13b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b2c:	bl	15038 <__assert_fail@plt+0x4220>
   13b30:	str	r0, [fp, #-8]
   13b34:	movw	r3, #33008	; 0x80f0
   13b38:	movt	r3, #2
   13b3c:	ldr	r2, [fp, #-8]
   13b40:	str	r2, [r3]
   13b44:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13b48:	cmp	r3, #0
   13b4c:	beq	13b68 <__assert_fail@plt+0x2d50>
   13b50:	ldr	r2, [fp, #-8]
   13b54:	movw	r3, #33000	; 0x80e8
   13b58:	movt	r3, #2
   13b5c:	mov	r1, r2
   13b60:	ldrd	r2, [r3]
   13b64:	strd	r2, [r1]
   13b68:	movw	r3, #32996	; 0x80e4
   13b6c:	movt	r3, #2
   13b70:	ldr	r3, [r3]
   13b74:	lsl	r3, r3, #3
   13b78:	ldr	r2, [fp, #-8]
   13b7c:	add	r0, r2, r3
   13b80:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13b84:	movw	r3, #32996	; 0x80e4
   13b88:	movt	r3, #2
   13b8c:	ldr	r3, [r3]
   13b90:	sub	r3, r2, r3
   13b94:	lsl	r3, r3, #3
   13b98:	mov	r2, r3
   13b9c:	mov	r1, #0
   13ba0:	bl	10da0 <memset@plt>
   13ba4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13ba8:	movw	r3, #32996	; 0x80e4
   13bac:	movt	r3, #2
   13bb0:	str	r2, [r3]
   13bb4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13bb8:	lsl	r3, r3, #3
   13bbc:	ldr	r2, [fp, #-8]
   13bc0:	add	r3, r2, r3
   13bc4:	ldr	r3, [r3]
   13bc8:	str	r3, [fp, #-28]	; 0xffffffe4
   13bcc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13bd0:	lsl	r3, r3, #3
   13bd4:	ldr	r2, [fp, #-8]
   13bd8:	add	r3, r2, r3
   13bdc:	ldr	r3, [r3, #4]
   13be0:	str	r3, [fp, #-12]
   13be4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13be8:	ldr	r3, [r3, #4]
   13bec:	orr	r3, r3, #1
   13bf0:	str	r3, [fp, #-32]	; 0xffffffe0
   13bf4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13bf8:	ldr	r3, [r3]
   13bfc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13c00:	add	r2, r2, #8
   13c04:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c08:	ldr	r1, [r1, #40]	; 0x28
   13c0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13c10:	ldr	r0, [r0, #44]	; 0x2c
   13c14:	str	r0, [sp, #16]
   13c18:	str	r1, [sp, #12]
   13c1c:	str	r2, [sp, #8]
   13c20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c24:	str	r2, [sp, #4]
   13c28:	str	r3, [sp]
   13c2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13c30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13c34:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13c38:	ldr	r0, [fp, #-12]
   13c3c:	bl	11fe0 <__assert_fail@plt+0x11c8>
   13c40:	str	r0, [fp, #-36]	; 0xffffffdc
   13c44:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13c48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c4c:	cmp	r2, r3
   13c50:	bhi	13d08 <__assert_fail@plt+0x2ef0>
   13c54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c58:	add	r3, r3, #1
   13c5c:	str	r3, [fp, #-28]	; 0xffffffe4
   13c60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c64:	lsl	r3, r3, #3
   13c68:	ldr	r2, [fp, #-8]
   13c6c:	add	r3, r2, r3
   13c70:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13c74:	str	r2, [r3]
   13c78:	ldr	r2, [fp, #-12]
   13c7c:	movw	r3, #33156	; 0x8184
   13c80:	movt	r3, #2
   13c84:	cmp	r2, r3
   13c88:	beq	13c94 <__assert_fail@plt+0x2e7c>
   13c8c:	ldr	r0, [fp, #-12]
   13c90:	bl	16184 <__assert_fail@plt+0x536c>
   13c94:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13c98:	bl	14cd8 <__assert_fail@plt+0x3ec0>
   13c9c:	mov	r3, r0
   13ca0:	str	r3, [fp, #-12]
   13ca4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13ca8:	lsl	r3, r3, #3
   13cac:	ldr	r2, [fp, #-8]
   13cb0:	add	r3, r2, r3
   13cb4:	ldr	r2, [fp, #-12]
   13cb8:	str	r2, [r3, #4]
   13cbc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13cc0:	ldr	r3, [r3]
   13cc4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13cc8:	add	r2, r2, #8
   13ccc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13cd0:	ldr	r1, [r1, #40]	; 0x28
   13cd4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13cd8:	ldr	r0, [r0, #44]	; 0x2c
   13cdc:	str	r0, [sp, #16]
   13ce0:	str	r1, [sp, #12]
   13ce4:	str	r2, [sp, #8]
   13ce8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cec:	str	r2, [sp, #4]
   13cf0:	str	r3, [sp]
   13cf4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13cf8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13cfc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13d00:	ldr	r0, [fp, #-12]
   13d04:	bl	11fe0 <__assert_fail@plt+0x11c8>
   13d08:	bl	10d88 <__errno_location@plt>
   13d0c:	mov	r2, r0
   13d10:	ldr	r3, [fp, #-16]
   13d14:	str	r3, [r2]
   13d18:	ldr	r3, [fp, #-12]
   13d1c:	mov	r0, r3
   13d20:	sub	sp, fp, #4
   13d24:	ldr	fp, [sp]
   13d28:	add	sp, sp, #4
   13d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d30:	str	fp, [sp, #-8]!
   13d34:	str	lr, [sp, #4]
   13d38:	add	fp, sp, #4
   13d3c:	sub	sp, sp, #8
   13d40:	str	r0, [fp, #-8]
   13d44:	str	r1, [fp, #-12]
   13d48:	movw	r3, #33108	; 0x8154
   13d4c:	movt	r3, #2
   13d50:	mvn	r2, #0
   13d54:	ldr	r1, [fp, #-12]
   13d58:	ldr	r0, [fp, #-8]
   13d5c:	bl	13a40 <__assert_fail@plt+0x2c28>
   13d60:	mov	r3, r0
   13d64:	mov	r0, r3
   13d68:	sub	sp, fp, #4
   13d6c:	ldr	fp, [sp]
   13d70:	add	sp, sp, #4
   13d74:	pop	{pc}		; (ldr pc, [sp], #4)
   13d78:	str	fp, [sp, #-8]!
   13d7c:	str	lr, [sp, #4]
   13d80:	add	fp, sp, #4
   13d84:	sub	sp, sp, #16
   13d88:	str	r0, [fp, #-8]
   13d8c:	str	r1, [fp, #-12]
   13d90:	str	r2, [fp, #-16]
   13d94:	movw	r3, #33108	; 0x8154
   13d98:	movt	r3, #2
   13d9c:	ldr	r2, [fp, #-16]
   13da0:	ldr	r1, [fp, #-12]
   13da4:	ldr	r0, [fp, #-8]
   13da8:	bl	13a40 <__assert_fail@plt+0x2c28>
   13dac:	mov	r3, r0
   13db0:	mov	r0, r3
   13db4:	sub	sp, fp, #4
   13db8:	ldr	fp, [sp]
   13dbc:	add	sp, sp, #4
   13dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc4:	str	fp, [sp, #-8]!
   13dc8:	str	lr, [sp, #4]
   13dcc:	add	fp, sp, #4
   13dd0:	sub	sp, sp, #8
   13dd4:	str	r0, [fp, #-8]
   13dd8:	ldr	r1, [fp, #-8]
   13ddc:	mov	r0, #0
   13de0:	bl	13d30 <__assert_fail@plt+0x2f18>
   13de4:	mov	r3, r0
   13de8:	mov	r0, r3
   13dec:	sub	sp, fp, #4
   13df0:	ldr	fp, [sp]
   13df4:	add	sp, sp, #4
   13df8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dfc:	str	fp, [sp, #-8]!
   13e00:	str	lr, [sp, #4]
   13e04:	add	fp, sp, #4
   13e08:	sub	sp, sp, #8
   13e0c:	str	r0, [fp, #-8]
   13e10:	str	r1, [fp, #-12]
   13e14:	ldr	r2, [fp, #-12]
   13e18:	ldr	r1, [fp, #-8]
   13e1c:	mov	r0, #0
   13e20:	bl	13d78 <__assert_fail@plt+0x2f60>
   13e24:	mov	r3, r0
   13e28:	mov	r0, r3
   13e2c:	sub	sp, fp, #4
   13e30:	ldr	fp, [sp]
   13e34:	add	sp, sp, #4
   13e38:	pop	{pc}		; (ldr pc, [sp], #4)
   13e3c:	str	fp, [sp, #-8]!
   13e40:	str	lr, [sp, #4]
   13e44:	add	fp, sp, #4
   13e48:	sub	sp, sp, #64	; 0x40
   13e4c:	str	r0, [fp, #-56]	; 0xffffffc8
   13e50:	str	r1, [fp, #-60]	; 0xffffffc4
   13e54:	str	r2, [fp, #-64]	; 0xffffffc0
   13e58:	sub	r3, fp, #52	; 0x34
   13e5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e60:	mov	r0, r3
   13e64:	bl	11e3c <__assert_fail@plt+0x1024>
   13e68:	sub	r3, fp, #52	; 0x34
   13e6c:	mvn	r2, #0
   13e70:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e78:	bl	13a40 <__assert_fail@plt+0x2c28>
   13e7c:	mov	r3, r0
   13e80:	mov	r0, r3
   13e84:	sub	sp, fp, #4
   13e88:	ldr	fp, [sp]
   13e8c:	add	sp, sp, #4
   13e90:	pop	{pc}		; (ldr pc, [sp], #4)
   13e94:	str	fp, [sp, #-8]!
   13e98:	str	lr, [sp, #4]
   13e9c:	add	fp, sp, #4
   13ea0:	sub	sp, sp, #64	; 0x40
   13ea4:	str	r0, [fp, #-56]	; 0xffffffc8
   13ea8:	str	r1, [fp, #-60]	; 0xffffffc4
   13eac:	str	r2, [fp, #-64]	; 0xffffffc0
   13eb0:	str	r3, [fp, #-68]	; 0xffffffbc
   13eb4:	sub	r3, fp, #52	; 0x34
   13eb8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13ebc:	mov	r0, r3
   13ec0:	bl	11e3c <__assert_fail@plt+0x1024>
   13ec4:	sub	r3, fp, #52	; 0x34
   13ec8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ecc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13ed0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ed4:	bl	13a40 <__assert_fail@plt+0x2c28>
   13ed8:	mov	r3, r0
   13edc:	mov	r0, r3
   13ee0:	sub	sp, fp, #4
   13ee4:	ldr	fp, [sp]
   13ee8:	add	sp, sp, #4
   13eec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef0:	str	fp, [sp, #-8]!
   13ef4:	str	lr, [sp, #4]
   13ef8:	add	fp, sp, #4
   13efc:	sub	sp, sp, #8
   13f00:	str	r0, [fp, #-8]
   13f04:	str	r1, [fp, #-12]
   13f08:	ldr	r2, [fp, #-12]
   13f0c:	ldr	r1, [fp, #-8]
   13f10:	mov	r0, #0
   13f14:	bl	13e3c <__assert_fail@plt+0x3024>
   13f18:	mov	r3, r0
   13f1c:	mov	r0, r3
   13f20:	sub	sp, fp, #4
   13f24:	ldr	fp, [sp]
   13f28:	add	sp, sp, #4
   13f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f30:	str	fp, [sp, #-8]!
   13f34:	str	lr, [sp, #4]
   13f38:	add	fp, sp, #4
   13f3c:	sub	sp, sp, #16
   13f40:	str	r0, [fp, #-8]
   13f44:	str	r1, [fp, #-12]
   13f48:	str	r2, [fp, #-16]
   13f4c:	ldr	r3, [fp, #-16]
   13f50:	ldr	r2, [fp, #-12]
   13f54:	ldr	r1, [fp, #-8]
   13f58:	mov	r0, #0
   13f5c:	bl	13e94 <__assert_fail@plt+0x307c>
   13f60:	mov	r3, r0
   13f64:	mov	r0, r3
   13f68:	sub	sp, fp, #4
   13f6c:	ldr	fp, [sp]
   13f70:	add	sp, sp, #4
   13f74:	pop	{pc}		; (ldr pc, [sp], #4)
   13f78:	str	fp, [sp, #-8]!
   13f7c:	str	lr, [sp, #4]
   13f80:	add	fp, sp, #4
   13f84:	sub	sp, sp, #64	; 0x40
   13f88:	str	r0, [fp, #-56]	; 0xffffffc8
   13f8c:	str	r1, [fp, #-60]	; 0xffffffc4
   13f90:	mov	r3, r2
   13f94:	strb	r3, [fp, #-61]	; 0xffffffc3
   13f98:	movw	r2, #33108	; 0x8154
   13f9c:	movt	r2, #2
   13fa0:	sub	r3, fp, #52	; 0x34
   13fa4:	ldrd	r0, [r2]
   13fa8:	strd	r0, [r3]
   13fac:	ldrd	r0, [r2, #8]
   13fb0:	strd	r0, [r3, #8]
   13fb4:	ldrd	r0, [r2, #16]
   13fb8:	strd	r0, [r3, #16]
   13fbc:	ldrd	r0, [r2, #24]
   13fc0:	strd	r0, [r3, #24]
   13fc4:	ldrd	r0, [r2, #32]
   13fc8:	strd	r0, [r3, #32]
   13fcc:	ldrd	r0, [r2, #40]	; 0x28
   13fd0:	strd	r0, [r3, #40]	; 0x28
   13fd4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   13fd8:	sub	r3, fp, #52	; 0x34
   13fdc:	mov	r2, #1
   13fe0:	mov	r0, r3
   13fe4:	bl	11c9c <__assert_fail@plt+0xe84>
   13fe8:	sub	r3, fp, #52	; 0x34
   13fec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13ff0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13ff4:	mov	r0, #0
   13ff8:	bl	13a40 <__assert_fail@plt+0x2c28>
   13ffc:	mov	r3, r0
   14000:	mov	r0, r3
   14004:	sub	sp, fp, #4
   14008:	ldr	fp, [sp]
   1400c:	add	sp, sp, #4
   14010:	pop	{pc}		; (ldr pc, [sp], #4)
   14014:	str	fp, [sp, #-8]!
   14018:	str	lr, [sp, #4]
   1401c:	add	fp, sp, #4
   14020:	sub	sp, sp, #8
   14024:	str	r0, [fp, #-8]
   14028:	mov	r3, r1
   1402c:	strb	r3, [fp, #-9]
   14030:	ldrb	r3, [fp, #-9]
   14034:	mov	r2, r3
   14038:	mvn	r1, #0
   1403c:	ldr	r0, [fp, #-8]
   14040:	bl	13f78 <__assert_fail@plt+0x3160>
   14044:	mov	r3, r0
   14048:	mov	r0, r3
   1404c:	sub	sp, fp, #4
   14050:	ldr	fp, [sp]
   14054:	add	sp, sp, #4
   14058:	pop	{pc}		; (ldr pc, [sp], #4)
   1405c:	str	fp, [sp, #-8]!
   14060:	str	lr, [sp, #4]
   14064:	add	fp, sp, #4
   14068:	sub	sp, sp, #8
   1406c:	str	r0, [fp, #-8]
   14070:	mov	r1, #58	; 0x3a
   14074:	ldr	r0, [fp, #-8]
   14078:	bl	14014 <__assert_fail@plt+0x31fc>
   1407c:	mov	r3, r0
   14080:	mov	r0, r3
   14084:	sub	sp, fp, #4
   14088:	ldr	fp, [sp]
   1408c:	add	sp, sp, #4
   14090:	pop	{pc}		; (ldr pc, [sp], #4)
   14094:	str	fp, [sp, #-8]!
   14098:	str	lr, [sp, #4]
   1409c:	add	fp, sp, #4
   140a0:	sub	sp, sp, #8
   140a4:	str	r0, [fp, #-8]
   140a8:	str	r1, [fp, #-12]
   140ac:	mov	r2, #58	; 0x3a
   140b0:	ldr	r1, [fp, #-12]
   140b4:	ldr	r0, [fp, #-8]
   140b8:	bl	13f78 <__assert_fail@plt+0x3160>
   140bc:	mov	r3, r0
   140c0:	mov	r0, r3
   140c4:	sub	sp, fp, #4
   140c8:	ldr	fp, [sp]
   140cc:	add	sp, sp, #4
   140d0:	pop	{pc}		; (ldr pc, [sp], #4)
   140d4:	str	fp, [sp, #-8]!
   140d8:	str	lr, [sp, #4]
   140dc:	add	fp, sp, #4
   140e0:	sub	sp, sp, #112	; 0x70
   140e4:	str	r0, [fp, #-56]	; 0xffffffc8
   140e8:	str	r1, [fp, #-60]	; 0xffffffc4
   140ec:	str	r2, [fp, #-64]	; 0xffffffc0
   140f0:	sub	r3, fp, #116	; 0x74
   140f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   140f8:	mov	r0, r3
   140fc:	bl	11e3c <__assert_fail@plt+0x1024>
   14100:	sub	r3, fp, #52	; 0x34
   14104:	sub	r2, fp, #116	; 0x74
   14108:	ldrd	r0, [r2]
   1410c:	strd	r0, [r3]
   14110:	ldrd	r0, [r2, #8]
   14114:	strd	r0, [r3, #8]
   14118:	ldrd	r0, [r2, #16]
   1411c:	strd	r0, [r3, #16]
   14120:	ldrd	r0, [r2, #24]
   14124:	strd	r0, [r3, #24]
   14128:	ldrd	r0, [r2, #32]
   1412c:	strd	r0, [r3, #32]
   14130:	ldrd	r0, [r2, #40]	; 0x28
   14134:	strd	r0, [r3, #40]	; 0x28
   14138:	sub	r3, fp, #52	; 0x34
   1413c:	mov	r2, #1
   14140:	mov	r1, #58	; 0x3a
   14144:	mov	r0, r3
   14148:	bl	11c9c <__assert_fail@plt+0xe84>
   1414c:	sub	r3, fp, #52	; 0x34
   14150:	mvn	r2, #0
   14154:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14158:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1415c:	bl	13a40 <__assert_fail@plt+0x2c28>
   14160:	mov	r3, r0
   14164:	mov	r0, r3
   14168:	sub	sp, fp, #4
   1416c:	ldr	fp, [sp]
   14170:	add	sp, sp, #4
   14174:	pop	{pc}		; (ldr pc, [sp], #4)
   14178:	str	fp, [sp, #-8]!
   1417c:	str	lr, [sp, #4]
   14180:	add	fp, sp, #4
   14184:	sub	sp, sp, #24
   14188:	str	r0, [fp, #-8]
   1418c:	str	r1, [fp, #-12]
   14190:	str	r2, [fp, #-16]
   14194:	str	r3, [fp, #-20]	; 0xffffffec
   14198:	mvn	r3, #0
   1419c:	str	r3, [sp]
   141a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141a4:	ldr	r2, [fp, #-16]
   141a8:	ldr	r1, [fp, #-12]
   141ac:	ldr	r0, [fp, #-8]
   141b0:	bl	141cc <__assert_fail@plt+0x33b4>
   141b4:	mov	r3, r0
   141b8:	mov	r0, r3
   141bc:	sub	sp, fp, #4
   141c0:	ldr	fp, [sp]
   141c4:	add	sp, sp, #4
   141c8:	pop	{pc}		; (ldr pc, [sp], #4)
   141cc:	str	fp, [sp, #-8]!
   141d0:	str	lr, [sp, #4]
   141d4:	add	fp, sp, #4
   141d8:	sub	sp, sp, #64	; 0x40
   141dc:	str	r0, [fp, #-56]	; 0xffffffc8
   141e0:	str	r1, [fp, #-60]	; 0xffffffc4
   141e4:	str	r2, [fp, #-64]	; 0xffffffc0
   141e8:	str	r3, [fp, #-68]	; 0xffffffbc
   141ec:	movw	r2, #33108	; 0x8154
   141f0:	movt	r2, #2
   141f4:	sub	r3, fp, #52	; 0x34
   141f8:	ldrd	r0, [r2]
   141fc:	strd	r0, [r3]
   14200:	ldrd	r0, [r2, #8]
   14204:	strd	r0, [r3, #8]
   14208:	ldrd	r0, [r2, #16]
   1420c:	strd	r0, [r3, #16]
   14210:	ldrd	r0, [r2, #24]
   14214:	strd	r0, [r3, #24]
   14218:	ldrd	r0, [r2, #32]
   1421c:	strd	r0, [r3, #32]
   14220:	ldrd	r0, [r2, #40]	; 0x28
   14224:	strd	r0, [r3, #40]	; 0x28
   14228:	sub	r3, fp, #52	; 0x34
   1422c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14230:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14234:	mov	r0, r3
   14238:	bl	11db4 <__assert_fail@plt+0xf9c>
   1423c:	sub	r3, fp, #52	; 0x34
   14240:	ldr	r2, [fp, #4]
   14244:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14248:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1424c:	bl	13a40 <__assert_fail@plt+0x2c28>
   14250:	mov	r3, r0
   14254:	mov	r0, r3
   14258:	sub	sp, fp, #4
   1425c:	ldr	fp, [sp]
   14260:	add	sp, sp, #4
   14264:	pop	{pc}		; (ldr pc, [sp], #4)
   14268:	str	fp, [sp, #-8]!
   1426c:	str	lr, [sp, #4]
   14270:	add	fp, sp, #4
   14274:	sub	sp, sp, #16
   14278:	str	r0, [fp, #-8]
   1427c:	str	r1, [fp, #-12]
   14280:	str	r2, [fp, #-16]
   14284:	ldr	r3, [fp, #-16]
   14288:	ldr	r2, [fp, #-12]
   1428c:	ldr	r1, [fp, #-8]
   14290:	mov	r0, #0
   14294:	bl	14178 <__assert_fail@plt+0x3360>
   14298:	mov	r3, r0
   1429c:	mov	r0, r3
   142a0:	sub	sp, fp, #4
   142a4:	ldr	fp, [sp]
   142a8:	add	sp, sp, #4
   142ac:	pop	{pc}		; (ldr pc, [sp], #4)
   142b0:	str	fp, [sp, #-8]!
   142b4:	str	lr, [sp, #4]
   142b8:	add	fp, sp, #4
   142bc:	sub	sp, sp, #24
   142c0:	str	r0, [fp, #-8]
   142c4:	str	r1, [fp, #-12]
   142c8:	str	r2, [fp, #-16]
   142cc:	str	r3, [fp, #-20]	; 0xffffffec
   142d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142d4:	str	r3, [sp]
   142d8:	ldr	r3, [fp, #-16]
   142dc:	ldr	r2, [fp, #-12]
   142e0:	ldr	r1, [fp, #-8]
   142e4:	mov	r0, #0
   142e8:	bl	141cc <__assert_fail@plt+0x33b4>
   142ec:	mov	r3, r0
   142f0:	mov	r0, r3
   142f4:	sub	sp, fp, #4
   142f8:	ldr	fp, [sp]
   142fc:	add	sp, sp, #4
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	str	fp, [sp, #-8]!
   14308:	str	lr, [sp, #4]
   1430c:	add	fp, sp, #4
   14310:	sub	sp, sp, #16
   14314:	str	r0, [fp, #-8]
   14318:	str	r1, [fp, #-12]
   1431c:	str	r2, [fp, #-16]
   14320:	movw	r3, #33012	; 0x80f4
   14324:	movt	r3, #2
   14328:	ldr	r2, [fp, #-16]
   1432c:	ldr	r1, [fp, #-12]
   14330:	ldr	r0, [fp, #-8]
   14334:	bl	13a40 <__assert_fail@plt+0x2c28>
   14338:	mov	r3, r0
   1433c:	mov	r0, r3
   14340:	sub	sp, fp, #4
   14344:	ldr	fp, [sp]
   14348:	add	sp, sp, #4
   1434c:	pop	{pc}		; (ldr pc, [sp], #4)
   14350:	str	fp, [sp, #-8]!
   14354:	str	lr, [sp, #4]
   14358:	add	fp, sp, #4
   1435c:	sub	sp, sp, #8
   14360:	str	r0, [fp, #-8]
   14364:	str	r1, [fp, #-12]
   14368:	ldr	r2, [fp, #-12]
   1436c:	ldr	r1, [fp, #-8]
   14370:	mov	r0, #0
   14374:	bl	14304 <__assert_fail@plt+0x34ec>
   14378:	mov	r3, r0
   1437c:	mov	r0, r3
   14380:	sub	sp, fp, #4
   14384:	ldr	fp, [sp]
   14388:	add	sp, sp, #4
   1438c:	pop	{pc}		; (ldr pc, [sp], #4)
   14390:	str	fp, [sp, #-8]!
   14394:	str	lr, [sp, #4]
   14398:	add	fp, sp, #4
   1439c:	sub	sp, sp, #8
   143a0:	str	r0, [fp, #-8]
   143a4:	str	r1, [fp, #-12]
   143a8:	mvn	r2, #0
   143ac:	ldr	r1, [fp, #-12]
   143b0:	ldr	r0, [fp, #-8]
   143b4:	bl	14304 <__assert_fail@plt+0x34ec>
   143b8:	mov	r3, r0
   143bc:	mov	r0, r3
   143c0:	sub	sp, fp, #4
   143c4:	ldr	fp, [sp]
   143c8:	add	sp, sp, #4
   143cc:	pop	{pc}		; (ldr pc, [sp], #4)
   143d0:	str	fp, [sp, #-8]!
   143d4:	str	lr, [sp, #4]
   143d8:	add	fp, sp, #4
   143dc:	sub	sp, sp, #8
   143e0:	str	r0, [fp, #-8]
   143e4:	ldr	r1, [fp, #-8]
   143e8:	mov	r0, #0
   143ec:	bl	14390 <__assert_fail@plt+0x3578>
   143f0:	mov	r3, r0
   143f4:	mov	r0, r3
   143f8:	sub	sp, fp, #4
   143fc:	ldr	fp, [sp]
   14400:	add	sp, sp, #4
   14404:	pop	{pc}		; (ldr pc, [sp], #4)
   14408:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1440c:	strd	r6, [sp, #8]
   14410:	str	fp, [sp, #16]
   14414:	str	lr, [sp, #20]
   14418:	add	fp, sp, #20
   1441c:	sub	sp, sp, #48	; 0x30
   14420:	str	r0, [fp, #-24]	; 0xffffffe8
   14424:	str	r1, [fp, #-28]	; 0xffffffe4
   14428:	str	r2, [fp, #-32]	; 0xffffffe0
   1442c:	str	r3, [fp, #-36]	; 0xffffffdc
   14430:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14434:	cmp	r3, #0
   14438:	beq	14460 <__assert_fail@plt+0x3648>
   1443c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14440:	str	r3, [sp]
   14444:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14448:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1444c:	movw	r1, #30000	; 0x7530
   14450:	movt	r1, #1
   14454:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14458:	bl	10d7c <fprintf@plt>
   1445c:	b	14478 <__assert_fail@plt+0x3660>
   14460:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14464:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14468:	movw	r1, #30012	; 0x753c
   1446c:	movt	r1, #1
   14470:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14474:	bl	10d7c <fprintf@plt>
   14478:	movw	r0, #30020	; 0x7544
   1447c:	movt	r0, #1
   14480:	bl	10d58 <gettext@plt>
   14484:	mov	r2, r0
   14488:	movw	r3, #2022	; 0x7e6
   1448c:	movw	r1, #30804	; 0x7854
   14490:	movt	r1, #1
   14494:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14498:	bl	10d7c <fprintf@plt>
   1449c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   144a0:	mov	r0, #10
   144a4:	bl	10c68 <fputc_unlocked@plt>
   144a8:	movw	r0, #30024	; 0x7548
   144ac:	movt	r0, #1
   144b0:	bl	10d58 <gettext@plt>
   144b4:	mov	r3, r0
   144b8:	movw	r2, #30196	; 0x75f4
   144bc:	movt	r2, #1
   144c0:	mov	r1, r3
   144c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144c8:	bl	10d7c <fprintf@plt>
   144cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   144d0:	mov	r0, #10
   144d4:	bl	10c68 <fputc_unlocked@plt>
   144d8:	ldr	r3, [fp, #8]
   144dc:	cmp	r3, #9
   144e0:	ldrls	pc, [pc, r3, lsl #2]
   144e4:	b	148c4 <__assert_fail@plt+0x3aac>
   144e8:	andeq	r4, r1, r0, ror r9
   144ec:	andeq	r4, r1, r0, lsl r5
   144f0:	andeq	r4, r1, r8, lsr r5
   144f4:	andeq	r4, r1, r8, ror #10
   144f8:	andeq	r4, r1, ip, lsr #11
   144fc:	andeq	r4, r1, r8, lsl #12
   14500:	andeq	r4, r1, r4, ror r6
   14504:	strdeq	r4, [r1], -r0
   14508:	andeq	r4, r1, ip, ror r7
   1450c:	andeq	r4, r1, r8, lsl r8
   14510:	movw	r0, #30232	; 0x7618
   14514:	movt	r0, #1
   14518:	bl	10d58 <gettext@plt>
   1451c:	mov	r1, r0
   14520:	ldr	r3, [fp, #4]
   14524:	ldr	r3, [r3]
   14528:	mov	r2, r3
   1452c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14530:	bl	10d7c <fprintf@plt>
   14534:	b	14974 <__assert_fail@plt+0x3b5c>
   14538:	movw	r0, #30248	; 0x7628
   1453c:	movt	r0, #1
   14540:	bl	10d58 <gettext@plt>
   14544:	mov	r1, r0
   14548:	ldr	r3, [fp, #4]
   1454c:	ldr	r2, [r3]
   14550:	ldr	r3, [fp, #4]
   14554:	add	r3, r3, #4
   14558:	ldr	r3, [r3]
   1455c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14560:	bl	10d7c <fprintf@plt>
   14564:	b	14974 <__assert_fail@plt+0x3b5c>
   14568:	movw	r0, #30272	; 0x7640
   1456c:	movt	r0, #1
   14570:	bl	10d58 <gettext@plt>
   14574:	ldr	r3, [fp, #4]
   14578:	ldr	r2, [r3]
   1457c:	ldr	r3, [fp, #4]
   14580:	add	r3, r3, #4
   14584:	ldr	r1, [r3]
   14588:	ldr	r3, [fp, #4]
   1458c:	add	r3, r3, #8
   14590:	ldr	r3, [r3]
   14594:	str	r3, [sp]
   14598:	mov	r3, r1
   1459c:	mov	r1, r0
   145a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145a4:	bl	10d7c <fprintf@plt>
   145a8:	b	14974 <__assert_fail@plt+0x3b5c>
   145ac:	movw	r0, #30300	; 0x765c
   145b0:	movt	r0, #1
   145b4:	bl	10d58 <gettext@plt>
   145b8:	mov	ip, r0
   145bc:	ldr	r3, [fp, #4]
   145c0:	ldr	r1, [r3]
   145c4:	ldr	r3, [fp, #4]
   145c8:	add	r3, r3, #4
   145cc:	ldr	r0, [r3]
   145d0:	ldr	r3, [fp, #4]
   145d4:	add	r3, r3, #8
   145d8:	ldr	r3, [r3]
   145dc:	ldr	r2, [fp, #4]
   145e0:	add	r2, r2, #12
   145e4:	ldr	r2, [r2]
   145e8:	str	r2, [sp, #4]
   145ec:	str	r3, [sp]
   145f0:	mov	r3, r0
   145f4:	mov	r2, r1
   145f8:	mov	r1, ip
   145fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14600:	bl	10d7c <fprintf@plt>
   14604:	b	14974 <__assert_fail@plt+0x3b5c>
   14608:	movw	r0, #30332	; 0x767c
   1460c:	movt	r0, #1
   14610:	bl	10d58 <gettext@plt>
   14614:	mov	lr, r0
   14618:	ldr	r3, [fp, #4]
   1461c:	ldr	r0, [r3]
   14620:	ldr	r3, [fp, #4]
   14624:	add	r3, r3, #4
   14628:	ldr	ip, [r3]
   1462c:	ldr	r3, [fp, #4]
   14630:	add	r3, r3, #8
   14634:	ldr	r3, [r3]
   14638:	ldr	r2, [fp, #4]
   1463c:	add	r2, r2, #12
   14640:	ldr	r2, [r2]
   14644:	ldr	r1, [fp, #4]
   14648:	add	r1, r1, #16
   1464c:	ldr	r1, [r1]
   14650:	str	r1, [sp, #8]
   14654:	str	r2, [sp, #4]
   14658:	str	r3, [sp]
   1465c:	mov	r3, ip
   14660:	mov	r2, r0
   14664:	mov	r1, lr
   14668:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1466c:	bl	10d7c <fprintf@plt>
   14670:	b	14974 <__assert_fail@plt+0x3b5c>
   14674:	movw	r0, #30368	; 0x76a0
   14678:	movt	r0, #1
   1467c:	bl	10d58 <gettext@plt>
   14680:	mov	r4, r0
   14684:	ldr	r3, [fp, #4]
   14688:	ldr	ip, [r3]
   1468c:	ldr	r3, [fp, #4]
   14690:	add	r3, r3, #4
   14694:	ldr	lr, [r3]
   14698:	ldr	r3, [fp, #4]
   1469c:	add	r3, r3, #8
   146a0:	ldr	r3, [r3]
   146a4:	ldr	r2, [fp, #4]
   146a8:	add	r2, r2, #12
   146ac:	ldr	r2, [r2]
   146b0:	ldr	r1, [fp, #4]
   146b4:	add	r1, r1, #16
   146b8:	ldr	r1, [r1]
   146bc:	ldr	r0, [fp, #4]
   146c0:	add	r0, r0, #20
   146c4:	ldr	r0, [r0]
   146c8:	str	r0, [sp, #12]
   146cc:	str	r1, [sp, #8]
   146d0:	str	r2, [sp, #4]
   146d4:	str	r3, [sp]
   146d8:	mov	r3, lr
   146dc:	mov	r2, ip
   146e0:	mov	r1, r4
   146e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   146e8:	bl	10d7c <fprintf@plt>
   146ec:	b	14974 <__assert_fail@plt+0x3b5c>
   146f0:	movw	r0, #30408	; 0x76c8
   146f4:	movt	r0, #1
   146f8:	bl	10d58 <gettext@plt>
   146fc:	mov	r5, r0
   14700:	ldr	r3, [fp, #4]
   14704:	ldr	lr, [r3]
   14708:	ldr	r3, [fp, #4]
   1470c:	add	r3, r3, #4
   14710:	ldr	r4, [r3]
   14714:	ldr	r3, [fp, #4]
   14718:	add	r3, r3, #8
   1471c:	ldr	r3, [r3]
   14720:	ldr	r2, [fp, #4]
   14724:	add	r2, r2, #12
   14728:	ldr	r2, [r2]
   1472c:	ldr	r1, [fp, #4]
   14730:	add	r1, r1, #16
   14734:	ldr	r1, [r1]
   14738:	ldr	r0, [fp, #4]
   1473c:	add	r0, r0, #20
   14740:	ldr	r0, [r0]
   14744:	ldr	ip, [fp, #4]
   14748:	add	ip, ip, #24
   1474c:	ldr	ip, [ip]
   14750:	str	ip, [sp, #16]
   14754:	str	r0, [sp, #12]
   14758:	str	r1, [sp, #8]
   1475c:	str	r2, [sp, #4]
   14760:	str	r3, [sp]
   14764:	mov	r3, r4
   14768:	mov	r2, lr
   1476c:	mov	r1, r5
   14770:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14774:	bl	10d7c <fprintf@plt>
   14778:	b	14974 <__assert_fail@plt+0x3b5c>
   1477c:	movw	r0, #30452	; 0x76f4
   14780:	movt	r0, #1
   14784:	bl	10d58 <gettext@plt>
   14788:	mov	r6, r0
   1478c:	ldr	r3, [fp, #4]
   14790:	ldr	r4, [r3]
   14794:	ldr	r3, [fp, #4]
   14798:	add	r3, r3, #4
   1479c:	ldr	r5, [r3]
   147a0:	ldr	r3, [fp, #4]
   147a4:	add	r3, r3, #8
   147a8:	ldr	r3, [r3]
   147ac:	ldr	r2, [fp, #4]
   147b0:	add	r2, r2, #12
   147b4:	ldr	r2, [r2]
   147b8:	ldr	r1, [fp, #4]
   147bc:	add	r1, r1, #16
   147c0:	ldr	r1, [r1]
   147c4:	ldr	r0, [fp, #4]
   147c8:	add	r0, r0, #20
   147cc:	ldr	r0, [r0]
   147d0:	ldr	ip, [fp, #4]
   147d4:	add	ip, ip, #24
   147d8:	ldr	ip, [ip]
   147dc:	ldr	lr, [fp, #4]
   147e0:	add	lr, lr, #28
   147e4:	ldr	lr, [lr]
   147e8:	str	lr, [sp, #20]
   147ec:	str	ip, [sp, #16]
   147f0:	str	r0, [sp, #12]
   147f4:	str	r1, [sp, #8]
   147f8:	str	r2, [sp, #4]
   147fc:	str	r3, [sp]
   14800:	mov	r3, r5
   14804:	mov	r2, r4
   14808:	mov	r1, r6
   1480c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14810:	bl	10d7c <fprintf@plt>
   14814:	b	14974 <__assert_fail@plt+0x3b5c>
   14818:	movw	r0, #30500	; 0x7724
   1481c:	movt	r0, #1
   14820:	bl	10d58 <gettext@plt>
   14824:	mov	r7, r0
   14828:	ldr	r3, [fp, #4]
   1482c:	ldr	r5, [r3]
   14830:	ldr	r3, [fp, #4]
   14834:	add	r3, r3, #4
   14838:	ldr	r6, [r3]
   1483c:	ldr	r3, [fp, #4]
   14840:	add	r3, r3, #8
   14844:	ldr	r3, [r3]
   14848:	ldr	r2, [fp, #4]
   1484c:	add	r2, r2, #12
   14850:	ldr	r2, [r2]
   14854:	ldr	r1, [fp, #4]
   14858:	add	r1, r1, #16
   1485c:	ldr	r1, [r1]
   14860:	ldr	r0, [fp, #4]
   14864:	add	r0, r0, #20
   14868:	ldr	r0, [r0]
   1486c:	ldr	ip, [fp, #4]
   14870:	add	ip, ip, #24
   14874:	ldr	ip, [ip]
   14878:	ldr	lr, [fp, #4]
   1487c:	add	lr, lr, #28
   14880:	ldr	lr, [lr]
   14884:	ldr	r4, [fp, #4]
   14888:	add	r4, r4, #32
   1488c:	ldr	r4, [r4]
   14890:	str	r4, [sp, #24]
   14894:	str	lr, [sp, #20]
   14898:	str	ip, [sp, #16]
   1489c:	str	r0, [sp, #12]
   148a0:	str	r1, [sp, #8]
   148a4:	str	r2, [sp, #4]
   148a8:	str	r3, [sp]
   148ac:	mov	r3, r6
   148b0:	mov	r2, r5
   148b4:	mov	r1, r7
   148b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148bc:	bl	10d7c <fprintf@plt>
   148c0:	b	14974 <__assert_fail@plt+0x3b5c>
   148c4:	movw	r0, #30552	; 0x7758
   148c8:	movt	r0, #1
   148cc:	bl	10d58 <gettext@plt>
   148d0:	mov	r7, r0
   148d4:	ldr	r3, [fp, #4]
   148d8:	ldr	r5, [r3]
   148dc:	ldr	r3, [fp, #4]
   148e0:	add	r3, r3, #4
   148e4:	ldr	r6, [r3]
   148e8:	ldr	r3, [fp, #4]
   148ec:	add	r3, r3, #8
   148f0:	ldr	r3, [r3]
   148f4:	ldr	r2, [fp, #4]
   148f8:	add	r2, r2, #12
   148fc:	ldr	r2, [r2]
   14900:	ldr	r1, [fp, #4]
   14904:	add	r1, r1, #16
   14908:	ldr	r1, [r1]
   1490c:	ldr	r0, [fp, #4]
   14910:	add	r0, r0, #20
   14914:	ldr	r0, [r0]
   14918:	ldr	ip, [fp, #4]
   1491c:	add	ip, ip, #24
   14920:	ldr	ip, [ip]
   14924:	ldr	lr, [fp, #4]
   14928:	add	lr, lr, #28
   1492c:	ldr	lr, [lr]
   14930:	ldr	r4, [fp, #4]
   14934:	add	r4, r4, #32
   14938:	ldr	r4, [r4]
   1493c:	str	r4, [sp, #24]
   14940:	str	lr, [sp, #20]
   14944:	str	ip, [sp, #16]
   14948:	str	r0, [sp, #12]
   1494c:	str	r1, [sp, #8]
   14950:	str	r2, [sp, #4]
   14954:	str	r3, [sp]
   14958:	mov	r3, r6
   1495c:	mov	r2, r5
   14960:	mov	r1, r7
   14964:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14968:	bl	10d7c <fprintf@plt>
   1496c:	b	14974 <__assert_fail@plt+0x3b5c>
   14970:	nop	{0}
   14974:	nop	{0}
   14978:	sub	sp, fp, #20
   1497c:	ldrd	r4, [sp]
   14980:	ldrd	r6, [sp, #8]
   14984:	ldr	fp, [sp, #16]
   14988:	add	sp, sp, #20
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	str	fp, [sp, #-8]!
   14994:	str	lr, [sp, #4]
   14998:	add	fp, sp, #4
   1499c:	sub	sp, sp, #32
   149a0:	str	r0, [fp, #-16]
   149a4:	str	r1, [fp, #-20]	; 0xffffffec
   149a8:	str	r2, [fp, #-24]	; 0xffffffe8
   149ac:	str	r3, [fp, #-28]	; 0xffffffe4
   149b0:	mov	r3, #0
   149b4:	str	r3, [fp, #-8]
   149b8:	b	149c8 <__assert_fail@plt+0x3bb0>
   149bc:	ldr	r3, [fp, #-8]
   149c0:	add	r3, r3, #1
   149c4:	str	r3, [fp, #-8]
   149c8:	ldr	r3, [fp, #-8]
   149cc:	lsl	r3, r3, #2
   149d0:	ldr	r2, [fp, #4]
   149d4:	add	r3, r2, r3
   149d8:	ldr	r3, [r3]
   149dc:	cmp	r3, #0
   149e0:	bne	149bc <__assert_fail@plt+0x3ba4>
   149e4:	ldr	r3, [fp, #-8]
   149e8:	str	r3, [sp, #4]
   149ec:	ldr	r3, [fp, #4]
   149f0:	str	r3, [sp]
   149f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   149fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a00:	ldr	r0, [fp, #-16]
   14a04:	bl	14408 <__assert_fail@plt+0x35f0>
   14a08:	nop	{0}
   14a0c:	sub	sp, fp, #4
   14a10:	ldr	fp, [sp]
   14a14:	add	sp, sp, #4
   14a18:	pop	{pc}		; (ldr pc, [sp], #4)
   14a1c:	str	fp, [sp, #-8]!
   14a20:	str	lr, [sp, #4]
   14a24:	add	fp, sp, #4
   14a28:	sub	sp, sp, #72	; 0x48
   14a2c:	str	r0, [fp, #-56]	; 0xffffffc8
   14a30:	str	r1, [fp, #-60]	; 0xffffffc4
   14a34:	str	r2, [fp, #-64]	; 0xffffffc0
   14a38:	str	r3, [fp, #-68]	; 0xffffffbc
   14a3c:	mov	r3, #0
   14a40:	str	r3, [fp, #-8]
   14a44:	b	14a54 <__assert_fail@plt+0x3c3c>
   14a48:	ldr	r3, [fp, #-8]
   14a4c:	add	r3, r3, #1
   14a50:	str	r3, [fp, #-8]
   14a54:	ldr	r3, [fp, #-8]
   14a58:	cmp	r3, #9
   14a5c:	bhi	14aa0 <__assert_fail@plt+0x3c88>
   14a60:	ldr	r3, [fp, #4]
   14a64:	add	r2, r3, #4
   14a68:	str	r2, [fp, #4]
   14a6c:	ldr	r2, [r3]
   14a70:	ldr	r3, [fp, #-8]
   14a74:	lsl	r3, r3, #2
   14a78:	sub	r1, fp, #4
   14a7c:	add	r3, r1, r3
   14a80:	str	r2, [r3, #-44]	; 0xffffffd4
   14a84:	ldr	r3, [fp, #-8]
   14a88:	lsl	r3, r3, #2
   14a8c:	sub	r2, fp, #4
   14a90:	add	r3, r2, r3
   14a94:	ldr	r3, [r3, #-44]	; 0xffffffd4
   14a98:	cmp	r3, #0
   14a9c:	bne	14a48 <__assert_fail@plt+0x3c30>
   14aa0:	ldr	r3, [fp, #-8]
   14aa4:	str	r3, [sp, #4]
   14aa8:	sub	r3, fp, #48	; 0x30
   14aac:	str	r3, [sp]
   14ab0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14ab4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14ab8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14abc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14ac0:	bl	14408 <__assert_fail@plt+0x35f0>
   14ac4:	nop	{0}
   14ac8:	sub	sp, fp, #4
   14acc:	ldr	fp, [sp]
   14ad0:	add	sp, sp, #4
   14ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad8:	push	{r3}		; (str r3, [sp, #-4]!)
   14adc:	str	fp, [sp, #-8]!
   14ae0:	str	lr, [sp, #4]
   14ae4:	add	fp, sp, #4
   14ae8:	sub	sp, sp, #36	; 0x24
   14aec:	str	r0, [fp, #-20]	; 0xffffffec
   14af0:	str	r1, [fp, #-24]	; 0xffffffe8
   14af4:	str	r2, [fp, #-28]	; 0xffffffe4
   14af8:	add	r3, fp, #8
   14afc:	str	r3, [fp, #-12]
   14b00:	ldr	r3, [fp, #-12]
   14b04:	str	r3, [sp]
   14b08:	ldr	r3, [fp, #4]
   14b0c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14b10:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14b14:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b18:	bl	14a1c <__assert_fail@plt+0x3c04>
   14b1c:	nop	{0}
   14b20:	sub	sp, fp, #4
   14b24:	ldr	fp, [sp]
   14b28:	ldr	lr, [sp, #4]
   14b2c:	add	sp, sp, #8
   14b30:	add	sp, sp, #4
   14b34:	bx	lr
   14b38:	str	fp, [sp, #-8]!
   14b3c:	str	lr, [sp, #4]
   14b40:	add	fp, sp, #4
   14b44:	movw	r3, #33084	; 0x813c
   14b48:	movt	r3, #2
   14b4c:	ldr	r3, [r3]
   14b50:	mov	r1, r3
   14b54:	mov	r0, #10
   14b58:	bl	10c68 <fputc_unlocked@plt>
   14b5c:	movw	r0, #30612	; 0x7794
   14b60:	movt	r0, #1
   14b64:	bl	10d58 <gettext@plt>
   14b68:	mov	r3, r0
   14b6c:	movw	r1, #30632	; 0x77a8
   14b70:	movt	r1, #1
   14b74:	mov	r0, r3
   14b78:	bl	10c08 <printf@plt>
   14b7c:	movw	r0, #30656	; 0x77c0
   14b80:	movt	r0, #1
   14b84:	bl	10d58 <gettext@plt>
   14b88:	mov	r3, r0
   14b8c:	movw	r2, #30676	; 0x77d4
   14b90:	movt	r2, #1
   14b94:	movw	r1, #30716	; 0x77fc
   14b98:	movt	r1, #1
   14b9c:	mov	r0, r3
   14ba0:	bl	10c08 <printf@plt>
   14ba4:	movw	r0, #30732	; 0x780c
   14ba8:	movt	r0, #1
   14bac:	bl	10d58 <gettext@plt>
   14bb0:	mov	r3, r0
   14bb4:	movw	r1, #30772	; 0x7834
   14bb8:	movt	r1, #1
   14bbc:	mov	r0, r3
   14bc0:	bl	10c08 <printf@plt>
   14bc4:	nop	{0}
   14bc8:	sub	sp, fp, #4
   14bcc:	ldr	fp, [sp]
   14bd0:	add	sp, sp, #4
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	str	fp, [sp, #-8]!
   14bdc:	str	lr, [sp, #4]
   14be0:	add	fp, sp, #4
   14be4:	sub	sp, sp, #16
   14be8:	str	r0, [fp, #-8]
   14bec:	str	r1, [fp, #-12]
   14bf0:	str	r2, [fp, #-16]
   14bf4:	ldr	r2, [fp, #-16]
   14bf8:	ldr	r1, [fp, #-12]
   14bfc:	ldr	r0, [fp, #-8]
   14c00:	bl	14dbc <__assert_fail@plt+0x3fa4>
   14c04:	mov	r3, r0
   14c08:	mov	r0, r3
   14c0c:	sub	sp, fp, #4
   14c10:	ldr	fp, [sp]
   14c14:	add	sp, sp, #4
   14c18:	pop	{pc}		; (ldr pc, [sp], #4)
   14c1c:	str	fp, [sp, #-8]!
   14c20:	str	lr, [sp, #4]
   14c24:	add	fp, sp, #4
   14c28:	sub	sp, sp, #8
   14c2c:	str	r0, [fp, #-8]
   14c30:	ldr	r3, [fp, #-8]
   14c34:	cmp	r3, #0
   14c38:	bne	14c40 <__assert_fail@plt+0x3e28>
   14c3c:	bl	154cc <__assert_fail@plt+0x46b4>
   14c40:	ldr	r3, [fp, #-8]
   14c44:	mov	r0, r3
   14c48:	sub	sp, fp, #4
   14c4c:	ldr	fp, [sp]
   14c50:	add	sp, sp, #4
   14c54:	pop	{pc}		; (ldr pc, [sp], #4)
   14c58:	str	fp, [sp, #-8]!
   14c5c:	str	lr, [sp, #4]
   14c60:	add	fp, sp, #4
   14c64:	sub	sp, sp, #8
   14c68:	str	r0, [fp, #-8]
   14c6c:	ldr	r0, [fp, #-8]
   14c70:	bl	15ce8 <__assert_fail@plt+0x4ed0>
   14c74:	mov	r3, r0
   14c78:	mov	r0, r3
   14c7c:	bl	14c1c <__assert_fail@plt+0x3e04>
   14c80:	mov	r3, r0
   14c84:	mov	r0, r3
   14c88:	sub	sp, fp, #4
   14c8c:	ldr	fp, [sp]
   14c90:	add	sp, sp, #4
   14c94:	pop	{pc}		; (ldr pc, [sp], #4)
   14c98:	str	fp, [sp, #-8]!
   14c9c:	str	lr, [sp, #4]
   14ca0:	add	fp, sp, #4
   14ca4:	sub	sp, sp, #8
   14ca8:	str	r0, [fp, #-8]
   14cac:	ldr	r0, [fp, #-8]
   14cb0:	bl	1634c <__assert_fail@plt+0x5534>
   14cb4:	mov	r3, r0
   14cb8:	mov	r0, r3
   14cbc:	bl	14c1c <__assert_fail@plt+0x3e04>
   14cc0:	mov	r3, r0
   14cc4:	mov	r0, r3
   14cc8:	sub	sp, fp, #4
   14ccc:	ldr	fp, [sp]
   14cd0:	add	sp, sp, #4
   14cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd8:	str	fp, [sp, #-8]!
   14cdc:	str	lr, [sp, #4]
   14ce0:	add	fp, sp, #4
   14ce4:	sub	sp, sp, #8
   14ce8:	str	r0, [fp, #-8]
   14cec:	ldr	r0, [fp, #-8]
   14cf0:	bl	14c58 <__assert_fail@plt+0x3e40>
   14cf4:	mov	r3, r0
   14cf8:	mov	r0, r3
   14cfc:	sub	sp, fp, #4
   14d00:	ldr	fp, [sp]
   14d04:	add	sp, sp, #4
   14d08:	pop	{pc}		; (ldr pc, [sp], #4)
   14d0c:	str	fp, [sp, #-8]!
   14d10:	str	lr, [sp, #4]
   14d14:	add	fp, sp, #4
   14d18:	sub	sp, sp, #16
   14d1c:	str	r0, [fp, #-16]
   14d20:	str	r1, [fp, #-20]	; 0xffffffec
   14d24:	ldr	r1, [fp, #-20]	; 0xffffffec
   14d28:	ldr	r0, [fp, #-16]
   14d2c:	bl	15d78 <__assert_fail@plt+0x4f60>
   14d30:	str	r0, [fp, #-8]
   14d34:	ldr	r3, [fp, #-8]
   14d38:	cmp	r3, #0
   14d3c:	bne	14d5c <__assert_fail@plt+0x3f44>
   14d40:	ldr	r3, [fp, #-16]
   14d44:	cmp	r3, #0
   14d48:	beq	14d58 <__assert_fail@plt+0x3f40>
   14d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d50:	cmp	r3, #0
   14d54:	beq	14d5c <__assert_fail@plt+0x3f44>
   14d58:	bl	154cc <__assert_fail@plt+0x46b4>
   14d5c:	ldr	r3, [fp, #-8]
   14d60:	mov	r0, r3
   14d64:	sub	sp, fp, #4
   14d68:	ldr	fp, [sp]
   14d6c:	add	sp, sp, #4
   14d70:	pop	{pc}		; (ldr pc, [sp], #4)
   14d74:	str	fp, [sp, #-8]!
   14d78:	str	lr, [sp, #4]
   14d7c:	add	fp, sp, #4
   14d80:	sub	sp, sp, #8
   14d84:	str	r0, [fp, #-8]
   14d88:	str	r1, [fp, #-12]
   14d8c:	ldr	r1, [fp, #-12]
   14d90:	ldr	r0, [fp, #-8]
   14d94:	bl	16384 <__assert_fail@plt+0x556c>
   14d98:	mov	r3, r0
   14d9c:	mov	r0, r3
   14da0:	bl	14c1c <__assert_fail@plt+0x3e04>
   14da4:	mov	r3, r0
   14da8:	mov	r0, r3
   14dac:	sub	sp, fp, #4
   14db0:	ldr	fp, [sp]
   14db4:	add	sp, sp, #4
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	str	fp, [sp, #-8]!
   14dc0:	str	lr, [sp, #4]
   14dc4:	add	fp, sp, #4
   14dc8:	sub	sp, sp, #24
   14dcc:	str	r0, [fp, #-16]
   14dd0:	str	r1, [fp, #-20]	; 0xffffffec
   14dd4:	str	r2, [fp, #-24]	; 0xffffffe8
   14dd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14ddc:	ldr	r1, [fp, #-20]	; 0xffffffec
   14de0:	ldr	r0, [fp, #-16]
   14de4:	bl	165b4 <__assert_fail@plt+0x579c>
   14de8:	str	r0, [fp, #-8]
   14dec:	ldr	r3, [fp, #-8]
   14df0:	cmp	r3, #0
   14df4:	bne	14e20 <__assert_fail@plt+0x4008>
   14df8:	ldr	r3, [fp, #-16]
   14dfc:	cmp	r3, #0
   14e00:	beq	14e1c <__assert_fail@plt+0x4004>
   14e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e08:	cmp	r3, #0
   14e0c:	beq	14e20 <__assert_fail@plt+0x4008>
   14e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e14:	cmp	r3, #0
   14e18:	beq	14e20 <__assert_fail@plt+0x4008>
   14e1c:	bl	154cc <__assert_fail@plt+0x46b4>
   14e20:	ldr	r3, [fp, #-8]
   14e24:	mov	r0, r3
   14e28:	sub	sp, fp, #4
   14e2c:	ldr	fp, [sp]
   14e30:	add	sp, sp, #4
   14e34:	pop	{pc}		; (ldr pc, [sp], #4)
   14e38:	str	fp, [sp, #-8]!
   14e3c:	str	lr, [sp, #4]
   14e40:	add	fp, sp, #4
   14e44:	sub	sp, sp, #16
   14e48:	str	r0, [fp, #-8]
   14e4c:	str	r1, [fp, #-12]
   14e50:	str	r2, [fp, #-16]
   14e54:	ldr	r2, [fp, #-16]
   14e58:	ldr	r1, [fp, #-12]
   14e5c:	ldr	r0, [fp, #-8]
   14e60:	bl	16424 <__assert_fail@plt+0x560c>
   14e64:	mov	r3, r0
   14e68:	mov	r0, r3
   14e6c:	bl	14c1c <__assert_fail@plt+0x3e04>
   14e70:	mov	r3, r0
   14e74:	mov	r0, r3
   14e78:	sub	sp, fp, #4
   14e7c:	ldr	fp, [sp]
   14e80:	add	sp, sp, #4
   14e84:	pop	{pc}		; (ldr pc, [sp], #4)
   14e88:	str	fp, [sp, #-8]!
   14e8c:	str	lr, [sp, #4]
   14e90:	add	fp, sp, #4
   14e94:	sub	sp, sp, #8
   14e98:	str	r0, [fp, #-8]
   14e9c:	str	r1, [fp, #-12]
   14ea0:	ldr	r2, [fp, #-12]
   14ea4:	ldr	r1, [fp, #-8]
   14ea8:	mov	r0, #0
   14eac:	bl	14dbc <__assert_fail@plt+0x3fa4>
   14eb0:	mov	r3, r0
   14eb4:	mov	r0, r3
   14eb8:	sub	sp, fp, #4
   14ebc:	ldr	fp, [sp]
   14ec0:	add	sp, sp, #4
   14ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec8:	str	fp, [sp, #-8]!
   14ecc:	str	lr, [sp, #4]
   14ed0:	add	fp, sp, #4
   14ed4:	sub	sp, sp, #8
   14ed8:	str	r0, [fp, #-8]
   14edc:	str	r1, [fp, #-12]
   14ee0:	ldr	r2, [fp, #-12]
   14ee4:	ldr	r1, [fp, #-8]
   14ee8:	mov	r0, #0
   14eec:	bl	14e38 <__assert_fail@plt+0x4020>
   14ef0:	mov	r3, r0
   14ef4:	mov	r0, r3
   14ef8:	sub	sp, fp, #4
   14efc:	ldr	fp, [sp]
   14f00:	add	sp, sp, #4
   14f04:	pop	{pc}		; (ldr pc, [sp], #4)
   14f08:	str	fp, [sp, #-8]!
   14f0c:	str	lr, [sp, #4]
   14f10:	add	fp, sp, #4
   14f14:	sub	sp, sp, #8
   14f18:	str	r0, [fp, #-8]
   14f1c:	str	r1, [fp, #-12]
   14f20:	mov	r2, #1
   14f24:	ldr	r1, [fp, #-12]
   14f28:	ldr	r0, [fp, #-8]
   14f2c:	bl	14f48 <__assert_fail@plt+0x4130>
   14f30:	mov	r3, r0
   14f34:	mov	r0, r3
   14f38:	sub	sp, fp, #4
   14f3c:	ldr	fp, [sp]
   14f40:	add	sp, sp, #4
   14f44:	pop	{pc}		; (ldr pc, [sp], #4)
   14f48:	str	fp, [sp, #-8]!
   14f4c:	str	lr, [sp, #4]
   14f50:	add	fp, sp, #4
   14f54:	sub	sp, sp, #24
   14f58:	str	r0, [fp, #-16]
   14f5c:	str	r1, [fp, #-20]	; 0xffffffec
   14f60:	str	r2, [fp, #-24]	; 0xffffffe8
   14f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f68:	ldr	r3, [r3]
   14f6c:	str	r3, [fp, #-8]
   14f70:	ldr	r3, [fp, #-16]
   14f74:	cmp	r3, #0
   14f78:	bne	14fc0 <__assert_fail@plt+0x41a8>
   14f7c:	ldr	r3, [fp, #-8]
   14f80:	cmp	r3, #0
   14f84:	bne	14ffc <__assert_fail@plt+0x41e4>
   14f88:	mov	r2, #64	; 0x40
   14f8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f90:	udiv	r3, r2, r3
   14f94:	str	r3, [fp, #-8]
   14f98:	ldr	r3, [fp, #-8]
   14f9c:	cmp	r3, #0
   14fa0:	moveq	r3, #1
   14fa4:	movne	r3, #0
   14fa8:	uxtb	r3, r3
   14fac:	mov	r2, r3
   14fb0:	ldr	r3, [fp, #-8]
   14fb4:	add	r3, r2, r3
   14fb8:	str	r3, [fp, #-8]
   14fbc:	b	14ffc <__assert_fail@plt+0x41e4>
   14fc0:	ldr	r2, [fp, #-8]
   14fc4:	ldr	r3, [fp, #-8]
   14fc8:	lsr	r3, r3, #1
   14fcc:	add	r3, r3, #1
   14fd0:	mov	r1, #0
   14fd4:	adds	r3, r2, r3
   14fd8:	bcc	14fe0 <__assert_fail@plt+0x41c8>
   14fdc:	mov	r1, #1
   14fe0:	str	r3, [fp, #-8]
   14fe4:	mov	r3, r1
   14fe8:	and	r3, r3, #1
   14fec:	uxtb	r3, r3
   14ff0:	cmp	r3, #0
   14ff4:	beq	14ffc <__assert_fail@plt+0x41e4>
   14ff8:	bl	154cc <__assert_fail@plt+0x46b4>
   14ffc:	ldr	r3, [fp, #-8]
   15000:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15004:	mov	r1, r3
   15008:	ldr	r0, [fp, #-16]
   1500c:	bl	14dbc <__assert_fail@plt+0x3fa4>
   15010:	str	r0, [fp, #-16]
   15014:	ldr	r2, [fp, #-8]
   15018:	ldr	r3, [fp, #-20]	; 0xffffffec
   1501c:	str	r2, [r3]
   15020:	ldr	r3, [fp, #-16]
   15024:	mov	r0, r3
   15028:	sub	sp, fp, #4
   1502c:	ldr	fp, [sp]
   15030:	add	sp, sp, #4
   15034:	pop	{pc}		; (ldr pc, [sp], #4)
   15038:	str	fp, [sp, #-8]!
   1503c:	str	lr, [sp, #4]
   15040:	add	fp, sp, #4
   15044:	sub	sp, sp, #32
   15048:	str	r0, [fp, #-24]	; 0xffffffe8
   1504c:	str	r1, [fp, #-28]	; 0xffffffe4
   15050:	str	r2, [fp, #-32]	; 0xffffffe0
   15054:	str	r3, [fp, #-36]	; 0xffffffdc
   15058:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1505c:	ldr	r3, [r3]
   15060:	str	r3, [fp, #-8]
   15064:	ldr	r3, [fp, #-8]
   15068:	asr	r3, r3, #1
   1506c:	mov	r1, #0
   15070:	ldr	r2, [fp, #-8]
   15074:	adds	r3, r2, r3
   15078:	bvc	15080 <__assert_fail@plt+0x4268>
   1507c:	mov	r1, #1
   15080:	str	r3, [fp, #-16]
   15084:	mov	r3, r1
   15088:	and	r3, r3, #1
   1508c:	uxtb	r3, r3
   15090:	cmp	r3, #0
   15094:	beq	150a0 <__assert_fail@plt+0x4288>
   15098:	mvn	r3, #-2147483648	; 0x80000000
   1509c:	str	r3, [fp, #-16]
   150a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   150a4:	cmp	r3, #0
   150a8:	blt	150c4 <__assert_fail@plt+0x42ac>
   150ac:	ldr	r3, [fp, #-16]
   150b0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   150b4:	cmp	r2, r3
   150b8:	bge	150c4 <__assert_fail@plt+0x42ac>
   150bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   150c0:	str	r3, [fp, #-16]
   150c4:	ldr	r2, [fp, #-16]
   150c8:	mov	lr, #0
   150cc:	ldr	r3, [fp, #4]
   150d0:	smull	r2, r3, r2, r3
   150d4:	mov	r0, #0
   150d8:	mov	r1, #0
   150dc:	mov	r0, r3
   150e0:	asr	r1, r3, #31
   150e4:	asr	ip, r2, #31
   150e8:	cmp	ip, r0
   150ec:	beq	150f4 <__assert_fail@plt+0x42dc>
   150f0:	mov	lr, #1
   150f4:	mov	r3, r2
   150f8:	str	r3, [fp, #-20]	; 0xffffffec
   150fc:	mov	r3, lr
   15100:	and	r3, r3, #1
   15104:	uxtb	r3, r3
   15108:	cmp	r3, #0
   1510c:	beq	15118 <__assert_fail@plt+0x4300>
   15110:	mvn	r3, #-2147483648	; 0x80000000
   15114:	b	15130 <__assert_fail@plt+0x4318>
   15118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1511c:	cmp	r3, #63	; 0x3f
   15120:	bgt	1512c <__assert_fail@plt+0x4314>
   15124:	mov	r3, #64	; 0x40
   15128:	b	15130 <__assert_fail@plt+0x4318>
   1512c:	mov	r3, #0
   15130:	str	r3, [fp, #-12]
   15134:	ldr	r3, [fp, #-12]
   15138:	cmp	r3, #0
   1513c:	beq	15174 <__assert_fail@plt+0x435c>
   15140:	ldr	r2, [fp, #-12]
   15144:	ldr	r3, [fp, #4]
   15148:	sdiv	r3, r2, r3
   1514c:	str	r3, [fp, #-16]
   15150:	ldr	r3, [fp, #-12]
   15154:	ldr	r2, [fp, #4]
   15158:	sdiv	r2, r3, r2
   1515c:	ldr	r1, [fp, #4]
   15160:	mul	r2, r1, r2
   15164:	sub	r3, r3, r2
   15168:	ldr	r2, [fp, #-12]
   1516c:	sub	r3, r2, r3
   15170:	str	r3, [fp, #-20]	; 0xffffffec
   15174:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15178:	cmp	r3, #0
   1517c:	bne	1518c <__assert_fail@plt+0x4374>
   15180:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15184:	mov	r2, #0
   15188:	str	r2, [r3]
   1518c:	ldr	r2, [fp, #-16]
   15190:	ldr	r3, [fp, #-8]
   15194:	sub	r3, r2, r3
   15198:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1519c:	cmp	r2, r3
   151a0:	ble	15240 <__assert_fail@plt+0x4428>
   151a4:	mov	r1, #0
   151a8:	ldr	r2, [fp, #-8]
   151ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   151b0:	adds	r3, r2, r3
   151b4:	bvc	151bc <__assert_fail@plt+0x43a4>
   151b8:	mov	r1, #1
   151bc:	str	r3, [fp, #-16]
   151c0:	mov	r3, r1
   151c4:	and	r3, r3, #1
   151c8:	uxtb	r3, r3
   151cc:	cmp	r3, #0
   151d0:	bne	1523c <__assert_fail@plt+0x4424>
   151d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   151d8:	cmp	r3, #0
   151dc:	blt	151f0 <__assert_fail@plt+0x43d8>
   151e0:	ldr	r3, [fp, #-16]
   151e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   151e8:	cmp	r2, r3
   151ec:	blt	1523c <__assert_fail@plt+0x4424>
   151f0:	ldr	r2, [fp, #-16]
   151f4:	mov	lr, #0
   151f8:	ldr	r3, [fp, #4]
   151fc:	smull	r2, r3, r2, r3
   15200:	mov	r0, #0
   15204:	mov	r1, #0
   15208:	mov	r0, r3
   1520c:	asr	r1, r3, #31
   15210:	asr	ip, r2, #31
   15214:	cmp	ip, r0
   15218:	beq	15220 <__assert_fail@plt+0x4408>
   1521c:	mov	lr, #1
   15220:	mov	r3, r2
   15224:	str	r3, [fp, #-20]	; 0xffffffec
   15228:	mov	r3, lr
   1522c:	and	r3, r3, #1
   15230:	uxtb	r3, r3
   15234:	cmp	r3, #0
   15238:	beq	15240 <__assert_fail@plt+0x4428>
   1523c:	bl	154cc <__assert_fail@plt+0x46b4>
   15240:	ldr	r3, [fp, #-20]	; 0xffffffec
   15244:	mov	r1, r3
   15248:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1524c:	bl	14d0c <__assert_fail@plt+0x3ef4>
   15250:	str	r0, [fp, #-24]	; 0xffffffe8
   15254:	ldr	r2, [fp, #-16]
   15258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1525c:	str	r2, [r3]
   15260:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15264:	mov	r0, r3
   15268:	sub	sp, fp, #4
   1526c:	ldr	fp, [sp]
   15270:	add	sp, sp, #4
   15274:	pop	{pc}		; (ldr pc, [sp], #4)
   15278:	str	fp, [sp, #-8]!
   1527c:	str	lr, [sp, #4]
   15280:	add	fp, sp, #4
   15284:	sub	sp, sp, #8
   15288:	str	r0, [fp, #-8]
   1528c:	mov	r1, #1
   15290:	ldr	r0, [fp, #-8]
   15294:	bl	152e8 <__assert_fail@plt+0x44d0>
   15298:	mov	r3, r0
   1529c:	mov	r0, r3
   152a0:	sub	sp, fp, #4
   152a4:	ldr	fp, [sp]
   152a8:	add	sp, sp, #4
   152ac:	pop	{pc}		; (ldr pc, [sp], #4)
   152b0:	str	fp, [sp, #-8]!
   152b4:	str	lr, [sp, #4]
   152b8:	add	fp, sp, #4
   152bc:	sub	sp, sp, #8
   152c0:	str	r0, [fp, #-8]
   152c4:	mov	r1, #1
   152c8:	ldr	r0, [fp, #-8]
   152cc:	bl	15330 <__assert_fail@plt+0x4518>
   152d0:	mov	r3, r0
   152d4:	mov	r0, r3
   152d8:	sub	sp, fp, #4
   152dc:	ldr	fp, [sp]
   152e0:	add	sp, sp, #4
   152e4:	pop	{pc}		; (ldr pc, [sp], #4)
   152e8:	str	fp, [sp, #-8]!
   152ec:	str	lr, [sp, #4]
   152f0:	add	fp, sp, #4
   152f4:	sub	sp, sp, #8
   152f8:	str	r0, [fp, #-8]
   152fc:	str	r1, [fp, #-12]
   15300:	ldr	r1, [fp, #-12]
   15304:	ldr	r0, [fp, #-8]
   15308:	bl	15c18 <__assert_fail@plt+0x4e00>
   1530c:	mov	r3, r0
   15310:	mov	r0, r3
   15314:	bl	14c1c <__assert_fail@plt+0x3e04>
   15318:	mov	r3, r0
   1531c:	mov	r0, r3
   15320:	sub	sp, fp, #4
   15324:	ldr	fp, [sp]
   15328:	add	sp, sp, #4
   1532c:	pop	{pc}		; (ldr pc, [sp], #4)
   15330:	str	fp, [sp, #-8]!
   15334:	str	lr, [sp, #4]
   15338:	add	fp, sp, #4
   1533c:	sub	sp, sp, #8
   15340:	str	r0, [fp, #-8]
   15344:	str	r1, [fp, #-12]
   15348:	ldr	r1, [fp, #-12]
   1534c:	ldr	r0, [fp, #-8]
   15350:	bl	163e0 <__assert_fail@plt+0x55c8>
   15354:	mov	r3, r0
   15358:	mov	r0, r3
   1535c:	bl	14c1c <__assert_fail@plt+0x3e04>
   15360:	mov	r3, r0
   15364:	mov	r0, r3
   15368:	sub	sp, fp, #4
   1536c:	ldr	fp, [sp]
   15370:	add	sp, sp, #4
   15374:	pop	{pc}		; (ldr pc, [sp], #4)
   15378:	str	fp, [sp, #-8]!
   1537c:	str	lr, [sp, #4]
   15380:	add	fp, sp, #4
   15384:	sub	sp, sp, #8
   15388:	str	r0, [fp, #-8]
   1538c:	str	r1, [fp, #-12]
   15390:	ldr	r0, [fp, #-12]
   15394:	bl	14c58 <__assert_fail@plt+0x3e40>
   15398:	mov	r3, r0
   1539c:	ldr	r2, [fp, #-12]
   153a0:	ldr	r1, [fp, #-8]
   153a4:	mov	r0, r3
   153a8:	bl	10c38 <memcpy@plt>
   153ac:	mov	r3, r0
   153b0:	mov	r0, r3
   153b4:	sub	sp, fp, #4
   153b8:	ldr	fp, [sp]
   153bc:	add	sp, sp, #4
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	str	fp, [sp, #-8]!
   153c8:	str	lr, [sp, #4]
   153cc:	add	fp, sp, #4
   153d0:	sub	sp, sp, #8
   153d4:	str	r0, [fp, #-8]
   153d8:	str	r1, [fp, #-12]
   153dc:	ldr	r0, [fp, #-12]
   153e0:	bl	14c98 <__assert_fail@plt+0x3e80>
   153e4:	mov	r3, r0
   153e8:	mov	r0, r3
   153ec:	ldr	r3, [fp, #-12]
   153f0:	mov	r2, r3
   153f4:	ldr	r1, [fp, #-8]
   153f8:	bl	10c38 <memcpy@plt>
   153fc:	mov	r3, r0
   15400:	mov	r0, r3
   15404:	sub	sp, fp, #4
   15408:	ldr	fp, [sp]
   1540c:	add	sp, sp, #4
   15410:	pop	{pc}		; (ldr pc, [sp], #4)
   15414:	str	fp, [sp, #-8]!
   15418:	str	lr, [sp, #4]
   1541c:	add	fp, sp, #4
   15420:	sub	sp, sp, #16
   15424:	str	r0, [fp, #-16]
   15428:	str	r1, [fp, #-20]	; 0xffffffec
   1542c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15430:	add	r3, r3, #1
   15434:	mov	r0, r3
   15438:	bl	14c98 <__assert_fail@plt+0x3e80>
   1543c:	mov	r3, r0
   15440:	str	r3, [fp, #-8]
   15444:	ldr	r3, [fp, #-20]	; 0xffffffec
   15448:	ldr	r2, [fp, #-8]
   1544c:	add	r3, r2, r3
   15450:	mov	r2, #0
   15454:	strb	r2, [r3]
   15458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1545c:	mov	r2, r3
   15460:	ldr	r1, [fp, #-16]
   15464:	ldr	r0, [fp, #-8]
   15468:	bl	10c38 <memcpy@plt>
   1546c:	mov	r3, r0
   15470:	mov	r0, r3
   15474:	sub	sp, fp, #4
   15478:	ldr	fp, [sp]
   1547c:	add	sp, sp, #4
   15480:	pop	{pc}		; (ldr pc, [sp], #4)
   15484:	str	fp, [sp, #-8]!
   15488:	str	lr, [sp, #4]
   1548c:	add	fp, sp, #4
   15490:	sub	sp, sp, #8
   15494:	str	r0, [fp, #-8]
   15498:	ldr	r0, [fp, #-8]
   1549c:	bl	10d64 <strlen@plt>
   154a0:	mov	r3, r0
   154a4:	add	r3, r3, #1
   154a8:	mov	r1, r3
   154ac:	ldr	r0, [fp, #-8]
   154b0:	bl	15378 <__assert_fail@plt+0x4560>
   154b4:	mov	r3, r0
   154b8:	mov	r0, r3
   154bc:	sub	sp, fp, #4
   154c0:	ldr	fp, [sp]
   154c4:	add	sp, sp, #4
   154c8:	pop	{pc}		; (ldr pc, [sp], #4)
   154cc:	strd	r4, [sp, #-16]!
   154d0:	str	fp, [sp, #8]
   154d4:	str	lr, [sp, #12]
   154d8:	add	fp, sp, #12
   154dc:	movw	r3, #32992	; 0x80e0
   154e0:	movt	r3, #2
   154e4:	ldr	r4, [r3]
   154e8:	movw	r0, #30852	; 0x7884
   154ec:	movt	r0, #1
   154f0:	bl	10d58 <gettext@plt>
   154f4:	mov	r3, r0
   154f8:	movw	r2, #30872	; 0x7898
   154fc:	movt	r2, #1
   15500:	mov	r1, #0
   15504:	mov	r0, r4
   15508:	bl	10cec <error@plt>
   1550c:	bl	10e0c <abort@plt>
   15510:	str	fp, [sp, #-8]!
   15514:	str	lr, [sp, #4]
   15518:	add	fp, sp, #4
   1551c:	sub	sp, sp, #16
   15520:	str	r0, [fp, #-16]
   15524:	str	r1, [fp, #-20]	; 0xffffffec
   15528:	ldr	r3, [fp, #-16]
   1552c:	ldr	r2, [r3]
   15530:	mov	lr, #0
   15534:	ldr	r3, [fp, #-20]	; 0xffffffec
   15538:	smull	r2, r3, r2, r3
   1553c:	mov	r0, #0
   15540:	mov	r1, #0
   15544:	mov	r0, r3
   15548:	asr	r1, r3, #31
   1554c:	asr	ip, r2, #31
   15550:	cmp	ip, r0
   15554:	beq	1555c <__assert_fail@plt+0x4744>
   15558:	mov	lr, #1
   1555c:	mov	r3, r2
   15560:	str	r3, [fp, #-8]
   15564:	mov	r3, lr
   15568:	and	r3, r3, #1
   1556c:	uxtb	r3, r3
   15570:	cmp	r3, #0
   15574:	beq	155a4 <__assert_fail@plt+0x478c>
   15578:	ldr	r3, [fp, #-16]
   1557c:	ldr	r3, [r3]
   15580:	cmp	r3, #0
   15584:	bge	15590 <__assert_fail@plt+0x4778>
   15588:	mov	r2, #-2147483648	; 0x80000000
   1558c:	b	15594 <__assert_fail@plt+0x477c>
   15590:	mvn	r2, #-2147483648	; 0x80000000
   15594:	ldr	r3, [fp, #-16]
   15598:	str	r2, [r3]
   1559c:	mov	r3, #1
   155a0:	b	155b4 <__assert_fail@plt+0x479c>
   155a4:	ldr	r2, [fp, #-8]
   155a8:	ldr	r3, [fp, #-16]
   155ac:	str	r2, [r3]
   155b0:	mov	r3, #0
   155b4:	mov	r0, r3
   155b8:	sub	sp, fp, #4
   155bc:	ldr	fp, [sp]
   155c0:	add	sp, sp, #4
   155c4:	pop	{pc}		; (ldr pc, [sp], #4)
   155c8:	str	fp, [sp, #-8]!
   155cc:	str	lr, [sp, #4]
   155d0:	add	fp, sp, #4
   155d4:	sub	sp, sp, #24
   155d8:	str	r0, [fp, #-16]
   155dc:	str	r1, [fp, #-20]	; 0xffffffec
   155e0:	str	r2, [fp, #-24]	; 0xffffffe8
   155e4:	mov	r3, #0
   155e8:	str	r3, [fp, #-8]
   155ec:	b	1560c <__assert_fail@plt+0x47f4>
   155f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   155f4:	ldr	r0, [fp, #-16]
   155f8:	bl	15510 <__assert_fail@plt+0x46f8>
   155fc:	mov	r2, r0
   15600:	ldr	r3, [fp, #-8]
   15604:	orr	r3, r3, r2
   15608:	str	r3, [fp, #-8]
   1560c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15610:	sub	r2, r3, #1
   15614:	str	r2, [fp, #-24]	; 0xffffffe8
   15618:	cmp	r3, #0
   1561c:	bne	155f0 <__assert_fail@plt+0x47d8>
   15620:	ldr	r3, [fp, #-8]
   15624:	mov	r0, r3
   15628:	sub	sp, fp, #4
   1562c:	ldr	fp, [sp]
   15630:	add	sp, sp, #4
   15634:	pop	{pc}		; (ldr pc, [sp], #4)
   15638:	str	fp, [sp, #-8]!
   1563c:	str	lr, [sp, #4]
   15640:	add	fp, sp, #4
   15644:	sub	sp, sp, #48	; 0x30
   15648:	str	r0, [fp, #-40]	; 0xffffffd8
   1564c:	str	r1, [fp, #-44]	; 0xffffffd4
   15650:	str	r2, [fp, #-48]	; 0xffffffd0
   15654:	str	r3, [fp, #-52]	; 0xffffffcc
   15658:	mov	r3, #0
   1565c:	str	r3, [fp, #-8]
   15660:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15664:	cmp	r3, #0
   15668:	blt	15678 <__assert_fail@plt+0x4860>
   1566c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15670:	cmp	r3, #36	; 0x24
   15674:	ble	15698 <__assert_fail@plt+0x4880>
   15678:	movw	r3, #30932	; 0x78d4
   1567c:	movt	r3, #1
   15680:	mov	r2, #85	; 0x55
   15684:	movw	r1, #30876	; 0x789c
   15688:	movt	r1, #1
   1568c:	movw	r0, #30892	; 0x78ac
   15690:	movt	r0, #1
   15694:	bl	10e18 <__assert_fail@plt>
   15698:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1569c:	cmp	r3, #0
   156a0:	bne	156ac <__assert_fail@plt+0x4894>
   156a4:	sub	r3, fp, #28
   156a8:	b	156b0 <__assert_fail@plt+0x4898>
   156ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156b0:	str	r3, [fp, #-24]	; 0xffffffe8
   156b4:	bl	10d88 <__errno_location@plt>
   156b8:	mov	r2, r0
   156bc:	mov	r3, #0
   156c0:	str	r3, [r2]
   156c4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   156c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   156cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   156d0:	bl	10bfc <strtol@plt>
   156d4:	mov	r3, r0
   156d8:	str	r3, [fp, #-32]	; 0xffffffe0
   156dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156e0:	ldr	r3, [r3]
   156e4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   156e8:	cmp	r2, r3
   156ec:	bne	15748 <__assert_fail@plt+0x4930>
   156f0:	ldr	r3, [fp, #4]
   156f4:	cmp	r3, #0
   156f8:	beq	15740 <__assert_fail@plt+0x4928>
   156fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15700:	ldr	r3, [r3]
   15704:	ldrb	r3, [r3]
   15708:	cmp	r3, #0
   1570c:	beq	15740 <__assert_fail@plt+0x4928>
   15710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15714:	ldr	r3, [r3]
   15718:	ldrb	r3, [r3]
   1571c:	mov	r1, r3
   15720:	ldr	r0, [fp, #4]
   15724:	bl	10d70 <strchr@plt>
   15728:	mov	r3, r0
   1572c:	cmp	r3, #0
   15730:	beq	15740 <__assert_fail@plt+0x4928>
   15734:	mov	r3, #1
   15738:	str	r3, [fp, #-32]	; 0xffffffe0
   1573c:	b	15780 <__assert_fail@plt+0x4968>
   15740:	mov	r3, #4
   15744:	b	15c04 <__assert_fail@plt+0x4dec>
   15748:	bl	10d88 <__errno_location@plt>
   1574c:	mov	r3, r0
   15750:	ldr	r3, [r3]
   15754:	cmp	r3, #0
   15758:	beq	15780 <__assert_fail@plt+0x4968>
   1575c:	bl	10d88 <__errno_location@plt>
   15760:	mov	r3, r0
   15764:	ldr	r3, [r3]
   15768:	cmp	r3, #34	; 0x22
   1576c:	beq	15778 <__assert_fail@plt+0x4960>
   15770:	mov	r3, #4
   15774:	b	15c04 <__assert_fail@plt+0x4dec>
   15778:	mov	r3, #1
   1577c:	str	r3, [fp, #-8]
   15780:	ldr	r3, [fp, #4]
   15784:	cmp	r3, #0
   15788:	bne	157a0 <__assert_fail@plt+0x4988>
   1578c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15790:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15794:	str	r2, [r3]
   15798:	ldr	r3, [fp, #-8]
   1579c:	b	15c04 <__assert_fail@plt+0x4dec>
   157a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157a4:	ldr	r3, [r3]
   157a8:	ldrb	r3, [r3]
   157ac:	cmp	r3, #0
   157b0:	beq	15bf4 <__assert_fail@plt+0x4ddc>
   157b4:	mov	r3, #1024	; 0x400
   157b8:	str	r3, [fp, #-12]
   157bc:	mov	r3, #1
   157c0:	str	r3, [fp, #-16]
   157c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157c8:	ldr	r3, [r3]
   157cc:	ldrb	r3, [r3]
   157d0:	mov	r1, r3
   157d4:	ldr	r0, [fp, #4]
   157d8:	bl	10d70 <strchr@plt>
   157dc:	mov	r3, r0
   157e0:	cmp	r3, #0
   157e4:	bne	15800 <__assert_fail@plt+0x49e8>
   157e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   157f0:	str	r2, [r3]
   157f4:	ldr	r3, [fp, #-8]
   157f8:	orr	r3, r3, #2
   157fc:	b	15c04 <__assert_fail@plt+0x4dec>
   15800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15804:	ldr	r3, [r3]
   15808:	ldrb	r3, [r3]
   1580c:	sub	r3, r3, #69	; 0x45
   15810:	cmp	r3, #47	; 0x2f
   15814:	ldrls	pc, [pc, r3, lsl #2]
   15818:	b	1596c <__assert_fail@plt+0x4b54>
   1581c:	ldrdeq	r5, [r1], -ip
   15820:	andeq	r5, r1, ip, ror #18
   15824:	ldrdeq	r5, [r1], -ip
   15828:	andeq	r5, r1, ip, ror #18
   1582c:	andeq	r5, r1, ip, ror #18
   15830:	andeq	r5, r1, ip, ror #18
   15834:	ldrdeq	r5, [r1], -ip
   15838:	andeq	r5, r1, ip, ror #18
   1583c:	ldrdeq	r5, [r1], -ip
   15840:	andeq	r5, r1, ip, ror #18
   15844:	andeq	r5, r1, ip, ror #18
   15848:	ldrdeq	r5, [r1], -ip
   1584c:	andeq	r5, r1, ip, ror #18
   15850:	andeq	r5, r1, ip, ror #18
   15854:	andeq	r5, r1, ip, ror #18
   15858:	ldrdeq	r5, [r1], -ip
   1585c:	andeq	r5, r1, ip, ror #18
   15860:	andeq	r5, r1, ip, ror #18
   15864:	andeq	r5, r1, ip, ror #18
   15868:	andeq	r5, r1, ip, ror #18
   1586c:	ldrdeq	r5, [r1], -ip
   15870:	ldrdeq	r5, [r1], -ip
   15874:	andeq	r5, r1, ip, ror #18
   15878:	andeq	r5, r1, ip, ror #18
   1587c:	andeq	r5, r1, ip, ror #18
   15880:	andeq	r5, r1, ip, ror #18
   15884:	andeq	r5, r1, ip, ror #18
   15888:	andeq	r5, r1, ip, ror #18
   1588c:	andeq	r5, r1, ip, ror #18
   15890:	andeq	r5, r1, ip, ror #18
   15894:	andeq	r5, r1, ip, ror #18
   15898:	andeq	r5, r1, ip, ror #18
   1589c:	andeq	r5, r1, ip, ror #18
   158a0:	andeq	r5, r1, ip, ror #18
   158a4:	ldrdeq	r5, [r1], -ip
   158a8:	andeq	r5, r1, ip, ror #18
   158ac:	andeq	r5, r1, ip, ror #18
   158b0:	andeq	r5, r1, ip, ror #18
   158b4:	ldrdeq	r5, [r1], -ip
   158b8:	andeq	r5, r1, ip, ror #18
   158bc:	ldrdeq	r5, [r1], -ip
   158c0:	andeq	r5, r1, ip, ror #18
   158c4:	andeq	r5, r1, ip, ror #18
   158c8:	andeq	r5, r1, ip, ror #18
   158cc:	andeq	r5, r1, ip, ror #18
   158d0:	andeq	r5, r1, ip, ror #18
   158d4:	andeq	r5, r1, ip, ror #18
   158d8:	ldrdeq	r5, [r1], -ip
   158dc:	mov	r1, #48	; 0x30
   158e0:	ldr	r0, [fp, #4]
   158e4:	bl	10d70 <strchr@plt>
   158e8:	mov	r3, r0
   158ec:	cmp	r3, #0
   158f0:	beq	15960 <__assert_fail@plt+0x4b48>
   158f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158f8:	ldr	r3, [r3]
   158fc:	add	r3, r3, #1
   15900:	ldrb	r3, [r3]
   15904:	cmp	r3, #68	; 0x44
   15908:	beq	15948 <__assert_fail@plt+0x4b30>
   1590c:	cmp	r3, #105	; 0x69
   15910:	beq	15920 <__assert_fail@plt+0x4b08>
   15914:	cmp	r3, #66	; 0x42
   15918:	beq	15948 <__assert_fail@plt+0x4b30>
   1591c:	b	1596c <__assert_fail@plt+0x4b54>
   15920:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15924:	ldr	r3, [r3]
   15928:	add	r3, r3, #2
   1592c:	ldrb	r3, [r3]
   15930:	cmp	r3, #66	; 0x42
   15934:	bne	15968 <__assert_fail@plt+0x4b50>
   15938:	ldr	r3, [fp, #-16]
   1593c:	add	r3, r3, #2
   15940:	str	r3, [fp, #-16]
   15944:	b	15968 <__assert_fail@plt+0x4b50>
   15948:	mov	r3, #1000	; 0x3e8
   1594c:	str	r3, [fp, #-12]
   15950:	ldr	r3, [fp, #-16]
   15954:	add	r3, r3, #1
   15958:	str	r3, [fp, #-16]
   1595c:	b	1596c <__assert_fail@plt+0x4b54>
   15960:	nop	{0}
   15964:	b	1596c <__assert_fail@plt+0x4b54>
   15968:	nop	{0}
   1596c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15970:	ldr	r3, [r3]
   15974:	ldrb	r3, [r3]
   15978:	sub	r3, r3, #66	; 0x42
   1597c:	cmp	r3, #53	; 0x35
   15980:	ldrls	pc, [pc, r3, lsl #2]
   15984:	b	15b94 <__assert_fail@plt+0x4d7c>
   15988:	andeq	r5, r1, r8, ror sl
   1598c:	muleq	r1, r4, fp
   15990:	muleq	r1, r4, fp
   15994:	muleq	r1, ip, sl
   15998:	muleq	r1, r4, fp
   1599c:			; <UNDEFINED> instruction: 0x00015ab8
   159a0:	muleq	r1, r4, fp
   159a4:	muleq	r1, r4, fp
   159a8:	muleq	r1, r4, fp
   159ac:	ldrdeq	r5, [r1], -r4
   159b0:	muleq	r1, r4, fp
   159b4:	strdeq	r5, [r1], -r0
   159b8:	muleq	r1, r4, fp
   159bc:	muleq	r1, r4, fp
   159c0:	andeq	r5, r1, ip, lsl #22
   159c4:	muleq	r1, r4, fp
   159c8:	muleq	r1, r4, fp
   159cc:	muleq	r1, r4, fp
   159d0:	andeq	r5, r1, r8, lsr #22
   159d4:	muleq	r1, r4, fp
   159d8:	muleq	r1, r4, fp
   159dc:	muleq	r1, r4, fp
   159e0:	muleq	r1, r4, fp
   159e4:	andeq	r5, r1, ip, asr fp
   159e8:	andeq	r5, r1, r8, ror fp
   159ec:	muleq	r1, r4, fp
   159f0:	muleq	r1, r4, fp
   159f4:	muleq	r1, r4, fp
   159f8:	muleq	r1, r4, fp
   159fc:	muleq	r1, r4, fp
   15a00:	muleq	r1, r4, fp
   15a04:	muleq	r1, r4, fp
   15a08:	andeq	r5, r1, r0, ror #20
   15a0c:	muleq	r1, r0, sl
   15a10:	muleq	r1, r4, fp
   15a14:	muleq	r1, r4, fp
   15a18:	muleq	r1, r4, fp
   15a1c:			; <UNDEFINED> instruction: 0x00015ab8
   15a20:	muleq	r1, r4, fp
   15a24:	muleq	r1, r4, fp
   15a28:	muleq	r1, r4, fp
   15a2c:	ldrdeq	r5, [r1], -r4
   15a30:	muleq	r1, r4, fp
   15a34:	strdeq	r5, [r1], -r0
   15a38:	muleq	r1, r4, fp
   15a3c:	muleq	r1, r4, fp
   15a40:	muleq	r1, r4, fp
   15a44:	muleq	r1, r4, fp
   15a48:	muleq	r1, r4, fp
   15a4c:	muleq	r1, r4, fp
   15a50:	andeq	r5, r1, r8, lsr #22
   15a54:	muleq	r1, r4, fp
   15a58:	muleq	r1, r4, fp
   15a5c:	andeq	r5, r1, r4, asr #22
   15a60:	sub	r3, fp, #32
   15a64:	mov	r1, #512	; 0x200
   15a68:	mov	r0, r3
   15a6c:	bl	15510 <__assert_fail@plt+0x46f8>
   15a70:	str	r0, [fp, #-20]	; 0xffffffec
   15a74:	b	15bac <__assert_fail@plt+0x4d94>
   15a78:	sub	r3, fp, #32
   15a7c:	mov	r1, #1024	; 0x400
   15a80:	mov	r0, r3
   15a84:	bl	15510 <__assert_fail@plt+0x46f8>
   15a88:	str	r0, [fp, #-20]	; 0xffffffec
   15a8c:	b	15bac <__assert_fail@plt+0x4d94>
   15a90:	mov	r3, #0
   15a94:	str	r3, [fp, #-20]	; 0xffffffec
   15a98:	b	15bac <__assert_fail@plt+0x4d94>
   15a9c:	sub	r3, fp, #32
   15aa0:	mov	r2, #6
   15aa4:	ldr	r1, [fp, #-12]
   15aa8:	mov	r0, r3
   15aac:	bl	155c8 <__assert_fail@plt+0x47b0>
   15ab0:	str	r0, [fp, #-20]	; 0xffffffec
   15ab4:	b	15bac <__assert_fail@plt+0x4d94>
   15ab8:	sub	r3, fp, #32
   15abc:	mov	r2, #3
   15ac0:	ldr	r1, [fp, #-12]
   15ac4:	mov	r0, r3
   15ac8:	bl	155c8 <__assert_fail@plt+0x47b0>
   15acc:	str	r0, [fp, #-20]	; 0xffffffec
   15ad0:	b	15bac <__assert_fail@plt+0x4d94>
   15ad4:	sub	r3, fp, #32
   15ad8:	mov	r2, #1
   15adc:	ldr	r1, [fp, #-12]
   15ae0:	mov	r0, r3
   15ae4:	bl	155c8 <__assert_fail@plt+0x47b0>
   15ae8:	str	r0, [fp, #-20]	; 0xffffffec
   15aec:	b	15bac <__assert_fail@plt+0x4d94>
   15af0:	sub	r3, fp, #32
   15af4:	mov	r2, #2
   15af8:	ldr	r1, [fp, #-12]
   15afc:	mov	r0, r3
   15b00:	bl	155c8 <__assert_fail@plt+0x47b0>
   15b04:	str	r0, [fp, #-20]	; 0xffffffec
   15b08:	b	15bac <__assert_fail@plt+0x4d94>
   15b0c:	sub	r3, fp, #32
   15b10:	mov	r2, #5
   15b14:	ldr	r1, [fp, #-12]
   15b18:	mov	r0, r3
   15b1c:	bl	155c8 <__assert_fail@plt+0x47b0>
   15b20:	str	r0, [fp, #-20]	; 0xffffffec
   15b24:	b	15bac <__assert_fail@plt+0x4d94>
   15b28:	sub	r3, fp, #32
   15b2c:	mov	r2, #4
   15b30:	ldr	r1, [fp, #-12]
   15b34:	mov	r0, r3
   15b38:	bl	155c8 <__assert_fail@plt+0x47b0>
   15b3c:	str	r0, [fp, #-20]	; 0xffffffec
   15b40:	b	15bac <__assert_fail@plt+0x4d94>
   15b44:	sub	r3, fp, #32
   15b48:	mov	r1, #2
   15b4c:	mov	r0, r3
   15b50:	bl	15510 <__assert_fail@plt+0x46f8>
   15b54:	str	r0, [fp, #-20]	; 0xffffffec
   15b58:	b	15bac <__assert_fail@plt+0x4d94>
   15b5c:	sub	r3, fp, #32
   15b60:	mov	r2, #8
   15b64:	ldr	r1, [fp, #-12]
   15b68:	mov	r0, r3
   15b6c:	bl	155c8 <__assert_fail@plt+0x47b0>
   15b70:	str	r0, [fp, #-20]	; 0xffffffec
   15b74:	b	15bac <__assert_fail@plt+0x4d94>
   15b78:	sub	r3, fp, #32
   15b7c:	mov	r2, #7
   15b80:	ldr	r1, [fp, #-12]
   15b84:	mov	r0, r3
   15b88:	bl	155c8 <__assert_fail@plt+0x47b0>
   15b8c:	str	r0, [fp, #-20]	; 0xffffffec
   15b90:	b	15bac <__assert_fail@plt+0x4d94>
   15b94:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15b98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15b9c:	str	r2, [r3]
   15ba0:	ldr	r3, [fp, #-8]
   15ba4:	orr	r3, r3, #2
   15ba8:	b	15c04 <__assert_fail@plt+0x4dec>
   15bac:	ldr	r2, [fp, #-8]
   15bb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bb4:	orr	r3, r2, r3
   15bb8:	str	r3, [fp, #-8]
   15bbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bc0:	ldr	r2, [r3]
   15bc4:	ldr	r3, [fp, #-16]
   15bc8:	add	r2, r2, r3
   15bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bd0:	str	r2, [r3]
   15bd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bd8:	ldr	r3, [r3]
   15bdc:	ldrb	r3, [r3]
   15be0:	cmp	r3, #0
   15be4:	beq	15bf4 <__assert_fail@plt+0x4ddc>
   15be8:	ldr	r3, [fp, #-8]
   15bec:	orr	r3, r3, #2
   15bf0:	str	r3, [fp, #-8]
   15bf4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15bf8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15bfc:	str	r2, [r3]
   15c00:	ldr	r3, [fp, #-8]
   15c04:	mov	r0, r3
   15c08:	sub	sp, fp, #4
   15c0c:	ldr	fp, [sp]
   15c10:	add	sp, sp, #4
   15c14:	pop	{pc}		; (ldr pc, [sp], #4)
   15c18:	str	fp, [sp, #-8]!
   15c1c:	str	lr, [sp, #4]
   15c20:	add	fp, sp, #4
   15c24:	sub	sp, sp, #16
   15c28:	str	r0, [fp, #-16]
   15c2c:	str	r1, [fp, #-20]	; 0xffffffec
   15c30:	ldr	r3, [fp, #-16]
   15c34:	cmp	r3, #0
   15c38:	beq	15c48 <__assert_fail@plt+0x4e30>
   15c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c40:	cmp	r3, #0
   15c44:	bne	15c58 <__assert_fail@plt+0x4e40>
   15c48:	mov	r3, #1
   15c4c:	str	r3, [fp, #-20]	; 0xffffffec
   15c50:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c54:	str	r3, [fp, #-16]
   15c58:	mov	ip, #0
   15c5c:	ldr	r2, [fp, #-16]
   15c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c64:	umull	r0, r1, r2, r3
   15c68:	mov	r2, #0
   15c6c:	mov	r3, #0
   15c70:	mov	r2, r1
   15c74:	mov	r3, #0
   15c78:	cmp	r2, #0
   15c7c:	beq	15c84 <__assert_fail@plt+0x4e6c>
   15c80:	mov	ip, #1
   15c84:	cmp	r0, #0
   15c88:	bge	15c90 <__assert_fail@plt+0x4e78>
   15c8c:	mov	ip, #1
   15c90:	mov	r3, ip
   15c94:	and	r3, r3, #1
   15c98:	uxtb	r3, r3
   15c9c:	cmp	r3, #0
   15ca0:	beq	15cbc <__assert_fail@plt+0x4ea4>
   15ca4:	bl	10d88 <__errno_location@plt>
   15ca8:	mov	r2, r0
   15cac:	mov	r3, #12
   15cb0:	str	r3, [r2]
   15cb4:	mov	r3, #0
   15cb8:	b	15cd4 <__assert_fail@plt+0x4ebc>
   15cbc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15cc0:	ldr	r0, [fp, #-16]
   15cc4:	bl	10bd8 <calloc@plt>
   15cc8:	mov	r3, r0
   15ccc:	str	r3, [fp, #-8]
   15cd0:	ldr	r3, [fp, #-8]
   15cd4:	mov	r0, r3
   15cd8:	sub	sp, fp, #4
   15cdc:	ldr	fp, [sp]
   15ce0:	add	sp, sp, #4
   15ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce8:	str	fp, [sp, #-8]!
   15cec:	str	lr, [sp, #4]
   15cf0:	add	fp, sp, #4
   15cf4:	sub	sp, sp, #16
   15cf8:	str	r0, [fp, #-16]
   15cfc:	ldr	r3, [fp, #-16]
   15d00:	cmp	r3, #0
   15d04:	bne	15d10 <__assert_fail@plt+0x4ef8>
   15d08:	mov	r3, #1
   15d0c:	str	r3, [fp, #-16]
   15d10:	mov	r2, #0
   15d14:	ldr	r3, [fp, #-16]
   15d18:	cmp	r3, #0
   15d1c:	bge	15d24 <__assert_fail@plt+0x4f0c>
   15d20:	mov	r2, #1
   15d24:	mov	r3, r2
   15d28:	and	r3, r3, #1
   15d2c:	uxtb	r3, r3
   15d30:	cmp	r3, #0
   15d34:	beq	15d50 <__assert_fail@plt+0x4f38>
   15d38:	bl	10d88 <__errno_location@plt>
   15d3c:	mov	r2, r0
   15d40:	mov	r3, #12
   15d44:	str	r3, [r2]
   15d48:	mov	r3, #0
   15d4c:	b	15d64 <__assert_fail@plt+0x4f4c>
   15d50:	ldr	r0, [fp, #-16]
   15d54:	bl	10d04 <malloc@plt>
   15d58:	mov	r3, r0
   15d5c:	str	r3, [fp, #-8]
   15d60:	ldr	r3, [fp, #-8]
   15d64:	mov	r0, r3
   15d68:	sub	sp, fp, #4
   15d6c:	ldr	fp, [sp]
   15d70:	add	sp, sp, #4
   15d74:	pop	{pc}		; (ldr pc, [sp], #4)
   15d78:	str	fp, [sp, #-8]!
   15d7c:	str	lr, [sp, #4]
   15d80:	add	fp, sp, #4
   15d84:	sub	sp, sp, #16
   15d88:	str	r0, [fp, #-16]
   15d8c:	str	r1, [fp, #-20]	; 0xffffffec
   15d90:	ldr	r3, [fp, #-16]
   15d94:	cmp	r3, #0
   15d98:	bne	15dac <__assert_fail@plt+0x4f94>
   15d9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15da0:	bl	15ce8 <__assert_fail@plt+0x4ed0>
   15da4:	mov	r3, r0
   15da8:	b	15e1c <__assert_fail@plt+0x5004>
   15dac:	ldr	r3, [fp, #-20]	; 0xffffffec
   15db0:	cmp	r3, #0
   15db4:	bne	15dc8 <__assert_fail@plt+0x4fb0>
   15db8:	ldr	r0, [fp, #-16]
   15dbc:	bl	16184 <__assert_fail@plt+0x536c>
   15dc0:	mov	r3, #0
   15dc4:	b	15e1c <__assert_fail@plt+0x5004>
   15dc8:	mov	r2, #0
   15dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15dd0:	cmp	r3, #0
   15dd4:	bge	15ddc <__assert_fail@plt+0x4fc4>
   15dd8:	mov	r2, #1
   15ddc:	mov	r3, r2
   15de0:	and	r3, r3, #1
   15de4:	uxtb	r3, r3
   15de8:	cmp	r3, #0
   15dec:	beq	15e08 <__assert_fail@plt+0x4ff0>
   15df0:	bl	10d88 <__errno_location@plt>
   15df4:	mov	r2, r0
   15df8:	mov	r3, #12
   15dfc:	str	r3, [r2]
   15e00:	mov	r3, #0
   15e04:	b	15e1c <__assert_fail@plt+0x5004>
   15e08:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e0c:	ldr	r0, [fp, #-16]
   15e10:	bl	10c74 <realloc@plt>
   15e14:	str	r0, [fp, #-8]
   15e18:	ldr	r3, [fp, #-8]
   15e1c:	mov	r0, r3
   15e20:	sub	sp, fp, #4
   15e24:	ldr	fp, [sp]
   15e28:	add	sp, sp, #4
   15e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e30:	strd	r4, [sp, #-16]!
   15e34:	str	fp, [sp, #8]
   15e38:	str	lr, [sp, #12]
   15e3c:	add	fp, sp, #12
   15e40:	sub	sp, sp, #16
   15e44:	str	r0, [fp, #-24]	; 0xffffffe8
   15e48:	str	r1, [fp, #-28]	; 0xffffffe4
   15e4c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   15e50:	ldr	r4, [fp, #-28]	; 0xffffffe4
   15e54:	cmp	r5, r4
   15e58:	bne	15e64 <__assert_fail@plt+0x504c>
   15e5c:	mov	r3, #0
   15e60:	b	15ec4 <__assert_fail@plt+0x50ac>
   15e64:	ldrb	r3, [r5]
   15e68:	mov	r0, r3
   15e6c:	bl	16b00 <__assert_fail@plt+0x5ce8>
   15e70:	mov	r3, r0
   15e74:	strb	r3, [fp, #-13]
   15e78:	ldrb	r3, [r4]
   15e7c:	mov	r0, r3
   15e80:	bl	16b00 <__assert_fail@plt+0x5ce8>
   15e84:	mov	r3, r0
   15e88:	strb	r3, [fp, #-14]
   15e8c:	ldrb	r3, [fp, #-13]
   15e90:	cmp	r3, #0
   15e94:	beq	15eb4 <__assert_fail@plt+0x509c>
   15e98:	add	r5, r5, #1
   15e9c:	add	r4, r4, #1
   15ea0:	ldrb	r2, [fp, #-13]
   15ea4:	ldrb	r3, [fp, #-14]
   15ea8:	cmp	r2, r3
   15eac:	beq	15e64 <__assert_fail@plt+0x504c>
   15eb0:	b	15eb8 <__assert_fail@plt+0x50a0>
   15eb4:	nop	{0}
   15eb8:	ldrb	r2, [fp, #-13]
   15ebc:	ldrb	r3, [fp, #-14]
   15ec0:	sub	r3, r2, r3
   15ec4:	mov	r0, r3
   15ec8:	sub	sp, fp, #12
   15ecc:	ldrd	r4, [sp]
   15ed0:	ldr	fp, [sp, #8]
   15ed4:	add	sp, sp, #12
   15ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   15edc:	str	fp, [sp, #-8]!
   15ee0:	str	lr, [sp, #4]
   15ee4:	add	fp, sp, #4
   15ee8:	sub	sp, sp, #16
   15eec:	str	r0, [fp, #-16]
   15ef0:	ldr	r0, [fp, #-16]
   15ef4:	bl	10cc8 <__fpending@plt>
   15ef8:	mov	r3, r0
   15efc:	cmp	r3, #0
   15f00:	movne	r3, #1
   15f04:	moveq	r3, #0
   15f08:	strb	r3, [fp, #-5]
   15f0c:	ldr	r0, [fp, #-16]
   15f10:	bl	10cd4 <ferror_unlocked@plt>
   15f14:	mov	r3, r0
   15f18:	cmp	r3, #0
   15f1c:	movne	r3, #1
   15f20:	moveq	r3, #0
   15f24:	strb	r3, [fp, #-6]
   15f28:	ldr	r0, [fp, #-16]
   15f2c:	bl	15fc0 <__assert_fail@plt+0x51a8>
   15f30:	mov	r3, r0
   15f34:	cmp	r3, #0
   15f38:	movne	r3, #1
   15f3c:	moveq	r3, #0
   15f40:	strb	r3, [fp, #-7]
   15f44:	ldrb	r3, [fp, #-6]
   15f48:	cmp	r3, #0
   15f4c:	bne	15f7c <__assert_fail@plt+0x5164>
   15f50:	ldrb	r3, [fp, #-7]
   15f54:	cmp	r3, #0
   15f58:	beq	15fa8 <__assert_fail@plt+0x5190>
   15f5c:	ldrb	r3, [fp, #-5]
   15f60:	cmp	r3, #0
   15f64:	bne	15f7c <__assert_fail@plt+0x5164>
   15f68:	bl	10d88 <__errno_location@plt>
   15f6c:	mov	r3, r0
   15f70:	ldr	r3, [r3]
   15f74:	cmp	r3, #9
   15f78:	beq	15fa8 <__assert_fail@plt+0x5190>
   15f7c:	ldrb	r3, [fp, #-7]
   15f80:	eor	r3, r3, #1
   15f84:	uxtb	r3, r3
   15f88:	cmp	r3, #0
   15f8c:	beq	15fa0 <__assert_fail@plt+0x5188>
   15f90:	bl	10d88 <__errno_location@plt>
   15f94:	mov	r2, r0
   15f98:	mov	r3, #0
   15f9c:	str	r3, [r2]
   15fa0:	mvn	r3, #0
   15fa4:	b	15fac <__assert_fail@plt+0x5194>
   15fa8:	mov	r3, #0
   15fac:	mov	r0, r3
   15fb0:	sub	sp, fp, #4
   15fb4:	ldr	fp, [sp]
   15fb8:	add	sp, sp, #4
   15fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc0:	str	fp, [sp, #-8]!
   15fc4:	str	lr, [sp, #4]
   15fc8:	add	fp, sp, #4
   15fcc:	sub	sp, sp, #32
   15fd0:	str	r0, [fp, #-24]	; 0xffffffe8
   15fd4:	mov	r3, #0
   15fd8:	str	r3, [fp, #-8]
   15fdc:	mov	r3, #0
   15fe0:	str	r3, [fp, #-12]
   15fe4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fe8:	bl	10dac <fileno@plt>
   15fec:	str	r0, [fp, #-16]
   15ff0:	ldr	r3, [fp, #-16]
   15ff4:	cmp	r3, #0
   15ff8:	bge	1600c <__assert_fail@plt+0x51f4>
   15ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16000:	bl	10db8 <fclose@plt>
   16004:	mov	r3, r0
   16008:	b	160b0 <__assert_fail@plt+0x5298>
   1600c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16010:	bl	10d1c <__freading@plt>
   16014:	mov	r3, r0
   16018:	cmp	r3, #0
   1601c:	beq	16058 <__assert_fail@plt+0x5240>
   16020:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16024:	bl	10dac <fileno@plt>
   16028:	mov	r1, r0
   1602c:	mov	r3, #1
   16030:	str	r3, [sp]
   16034:	mov	r2, #0
   16038:	mov	r3, #0
   1603c:	mov	r0, r1
   16040:	bl	10cb0 <lseek64@plt>
   16044:	mvn	r2, #0
   16048:	mvn	r3, #0
   1604c:	cmp	r1, r3
   16050:	cmpeq	r0, r2
   16054:	beq	1607c <__assert_fail@plt+0x5264>
   16058:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1605c:	bl	16118 <__assert_fail@plt+0x5300>
   16060:	mov	r3, r0
   16064:	cmp	r3, #0
   16068:	beq	1607c <__assert_fail@plt+0x5264>
   1606c:	bl	10d88 <__errno_location@plt>
   16070:	mov	r3, r0
   16074:	ldr	r3, [r3]
   16078:	str	r3, [fp, #-8]
   1607c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16080:	bl	10db8 <fclose@plt>
   16084:	str	r0, [fp, #-12]
   16088:	ldr	r3, [fp, #-8]
   1608c:	cmp	r3, #0
   16090:	beq	160ac <__assert_fail@plt+0x5294>
   16094:	bl	10d88 <__errno_location@plt>
   16098:	mov	r2, r0
   1609c:	ldr	r3, [fp, #-8]
   160a0:	str	r3, [r2]
   160a4:	mvn	r3, #0
   160a8:	str	r3, [fp, #-12]
   160ac:	ldr	r3, [fp, #-12]
   160b0:	mov	r0, r3
   160b4:	sub	sp, fp, #4
   160b8:	ldr	fp, [sp]
   160bc:	add	sp, sp, #4
   160c0:	pop	{pc}		; (ldr pc, [sp], #4)
   160c4:	str	fp, [sp, #-8]!
   160c8:	str	lr, [sp, #4]
   160cc:	add	fp, sp, #4
   160d0:	sub	sp, sp, #16
   160d4:	str	r0, [fp, #-8]
   160d8:	ldr	r3, [fp, #-8]
   160dc:	ldr	r3, [r3]
   160e0:	and	r3, r3, #256	; 0x100
   160e4:	cmp	r3, #0
   160e8:	beq	16104 <__assert_fail@plt+0x52ec>
   160ec:	mov	r3, #1
   160f0:	str	r3, [sp]
   160f4:	mov	r2, #0
   160f8:	mov	r3, #0
   160fc:	ldr	r0, [fp, #-8]
   16100:	bl	16228 <__assert_fail@plt+0x5410>
   16104:	nop	{0}
   16108:	sub	sp, fp, #4
   1610c:	ldr	fp, [sp]
   16110:	add	sp, sp, #4
   16114:	pop	{pc}		; (ldr pc, [sp], #4)
   16118:	str	fp, [sp, #-8]!
   1611c:	str	lr, [sp, #4]
   16120:	add	fp, sp, #4
   16124:	sub	sp, sp, #8
   16128:	str	r0, [fp, #-8]
   1612c:	ldr	r3, [fp, #-8]
   16130:	cmp	r3, #0
   16134:	beq	1614c <__assert_fail@plt+0x5334>
   16138:	ldr	r0, [fp, #-8]
   1613c:	bl	10d1c <__freading@plt>
   16140:	mov	r3, r0
   16144:	cmp	r3, #0
   16148:	bne	1615c <__assert_fail@plt+0x5344>
   1614c:	ldr	r0, [fp, #-8]
   16150:	bl	10c14 <fflush@plt>
   16154:	mov	r3, r0
   16158:	b	16170 <__assert_fail@plt+0x5358>
   1615c:	ldr	r0, [fp, #-8]
   16160:	bl	160c4 <__assert_fail@plt+0x52ac>
   16164:	ldr	r0, [fp, #-8]
   16168:	bl	10c14 <fflush@plt>
   1616c:	mov	r3, r0
   16170:	mov	r0, r3
   16174:	sub	sp, fp, #4
   16178:	ldr	fp, [sp]
   1617c:	add	sp, sp, #4
   16180:	pop	{pc}		; (ldr pc, [sp], #4)
   16184:	str	r4, [sp, #-12]!
   16188:	str	fp, [sp, #4]
   1618c:	str	lr, [sp, #8]
   16190:	add	fp, sp, #8
   16194:	sub	sp, sp, #20
   16198:	str	r0, [fp, #-24]	; 0xffffffe8
   1619c:	bl	10d88 <__errno_location@plt>
   161a0:	mov	r3, r0
   161a4:	ldr	r3, [r3]
   161a8:	str	r3, [fp, #-20]	; 0xffffffec
   161ac:	bl	10d88 <__errno_location@plt>
   161b0:	mov	r3, r0
   161b4:	ldr	r3, [r3]
   161b8:	str	r3, [fp, #-16]
   161bc:	bl	10d88 <__errno_location@plt>
   161c0:	mov	r2, r0
   161c4:	mov	r3, #0
   161c8:	str	r3, [r2]
   161cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   161d0:	bl	10c20 <free@plt>
   161d4:	bl	10d88 <__errno_location@plt>
   161d8:	mov	r3, r0
   161dc:	ldr	r3, [r3]
   161e0:	cmp	r3, #0
   161e4:	moveq	r3, #1
   161e8:	movne	r3, #0
   161ec:	uxtb	r3, r3
   161f0:	mov	r4, r3
   161f4:	bl	10d88 <__errno_location@plt>
   161f8:	mov	r2, r0
   161fc:	lsl	r3, r4, #2
   16200:	sub	r1, fp, #12
   16204:	add	r3, r1, r3
   16208:	ldr	r3, [r3, #-8]
   1620c:	str	r3, [r2]
   16210:	nop	{0}
   16214:	sub	sp, fp, #8
   16218:	ldr	r4, [sp]
   1621c:	ldr	fp, [sp, #4]
   16220:	add	sp, sp, #8
   16224:	pop	{pc}		; (ldr pc, [sp], #4)
   16228:	str	fp, [sp, #-8]!
   1622c:	str	lr, [sp, #4]
   16230:	add	fp, sp, #4
   16234:	sub	sp, sp, #32
   16238:	str	r0, [fp, #-16]
   1623c:	strd	r2, [fp, #-28]	; 0xffffffe4
   16240:	ldr	r3, [fp, #-16]
   16244:	ldr	r2, [r3, #8]
   16248:	ldr	r3, [fp, #-16]
   1624c:	ldr	r3, [r3, #4]
   16250:	cmp	r2, r3
   16254:	bne	162ec <__assert_fail@plt+0x54d4>
   16258:	ldr	r3, [fp, #-16]
   1625c:	ldr	r2, [r3, #20]
   16260:	ldr	r3, [fp, #-16]
   16264:	ldr	r3, [r3, #16]
   16268:	cmp	r2, r3
   1626c:	bne	162ec <__assert_fail@plt+0x54d4>
   16270:	ldr	r3, [fp, #-16]
   16274:	ldr	r3, [r3, #36]	; 0x24
   16278:	cmp	r3, #0
   1627c:	bne	162ec <__assert_fail@plt+0x54d4>
   16280:	ldr	r0, [fp, #-16]
   16284:	bl	10dac <fileno@plt>
   16288:	mov	r1, r0
   1628c:	ldr	r3, [fp, #4]
   16290:	str	r3, [sp]
   16294:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16298:	mov	r0, r1
   1629c:	bl	10cb0 <lseek64@plt>
   162a0:	strd	r0, [fp, #-12]
   162a4:	ldrd	r2, [fp, #-12]
   162a8:	mvn	r0, #0
   162ac:	mvn	r1, #0
   162b0:	cmp	r3, r1
   162b4:	cmpeq	r2, r0
   162b8:	bne	162c4 <__assert_fail@plt+0x54ac>
   162bc:	mvn	r3, #0
   162c0:	b	16304 <__assert_fail@plt+0x54ec>
   162c4:	ldr	r3, [fp, #-16]
   162c8:	ldr	r3, [r3]
   162cc:	bic	r2, r3, #16
   162d0:	ldr	r3, [fp, #-16]
   162d4:	str	r2, [r3]
   162d8:	ldr	r1, [fp, #-16]
   162dc:	ldrd	r2, [fp, #-12]
   162e0:	strd	r2, [r1, #80]	; 0x50
   162e4:	mov	r3, #0
   162e8:	b	16304 <__assert_fail@plt+0x54ec>
   162ec:	ldr	r3, [fp, #4]
   162f0:	str	r3, [sp]
   162f4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   162f8:	ldr	r0, [fp, #-16]
   162fc:	bl	10dc4 <fseeko64@plt>
   16300:	mov	r3, r0
   16304:	mov	r0, r3
   16308:	sub	sp, fp, #4
   1630c:	ldr	fp, [sp]
   16310:	add	sp, sp, #4
   16314:	pop	{pc}		; (ldr pc, [sp], #4)
   16318:	str	fp, [sp, #-8]!
   1631c:	str	lr, [sp, #4]
   16320:	add	fp, sp, #4
   16324:	bl	10d88 <__errno_location@plt>
   16328:	mov	r2, r0
   1632c:	mov	r3, #12
   16330:	str	r3, [r2]
   16334:	mov	r3, #0
   16338:	mov	r0, r3
   1633c:	sub	sp, fp, #4
   16340:	ldr	fp, [sp]
   16344:	add	sp, sp, #4
   16348:	pop	{pc}		; (ldr pc, [sp], #4)
   1634c:	str	fp, [sp, #-8]!
   16350:	str	lr, [sp, #4]
   16354:	add	fp, sp, #4
   16358:	sub	sp, sp, #8
   1635c:	str	r0, [fp, #-8]
   16360:	ldr	r3, [fp, #-8]
   16364:	mov	r0, r3
   16368:	bl	15ce8 <__assert_fail@plt+0x4ed0>
   1636c:	mov	r3, r0
   16370:	mov	r0, r3
   16374:	sub	sp, fp, #4
   16378:	ldr	fp, [sp]
   1637c:	add	sp, sp, #4
   16380:	pop	{pc}		; (ldr pc, [sp], #4)
   16384:	str	fp, [sp, #-8]!
   16388:	str	lr, [sp, #4]
   1638c:	add	fp, sp, #4
   16390:	sub	sp, sp, #8
   16394:	str	r0, [fp, #-8]
   16398:	str	r1, [fp, #-12]
   1639c:	ldr	r3, [fp, #-12]
   163a0:	cmp	r3, #0
   163a4:	moveq	r3, #1
   163a8:	movne	r3, #0
   163ac:	uxtb	r3, r3
   163b0:	mov	r2, r3
   163b4:	ldr	r3, [fp, #-12]
   163b8:	orr	r3, r2, r3
   163bc:	mov	r1, r3
   163c0:	ldr	r0, [fp, #-8]
   163c4:	bl	15d78 <__assert_fail@plt+0x4f60>
   163c8:	mov	r3, r0
   163cc:	mov	r0, r3
   163d0:	sub	sp, fp, #4
   163d4:	ldr	fp, [sp]
   163d8:	add	sp, sp, #4
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	str	fp, [sp, #-8]!
   163e4:	str	lr, [sp, #4]
   163e8:	add	fp, sp, #4
   163ec:	sub	sp, sp, #8
   163f0:	str	r0, [fp, #-8]
   163f4:	str	r1, [fp, #-12]
   163f8:	ldr	r3, [fp, #-8]
   163fc:	ldr	r2, [fp, #-12]
   16400:	mov	r1, r2
   16404:	mov	r0, r3
   16408:	bl	15c18 <__assert_fail@plt+0x4e00>
   1640c:	mov	r3, r0
   16410:	mov	r0, r3
   16414:	sub	sp, fp, #4
   16418:	ldr	fp, [sp]
   1641c:	add	sp, sp, #4
   16420:	pop	{pc}		; (ldr pc, [sp], #4)
   16424:	str	fp, [sp, #-8]!
   16428:	str	lr, [sp, #4]
   1642c:	add	fp, sp, #4
   16430:	sub	sp, sp, #16
   16434:	str	r0, [fp, #-8]
   16438:	str	r1, [fp, #-12]
   1643c:	str	r2, [fp, #-16]
   16440:	ldr	r3, [fp, #-12]
   16444:	cmp	r3, #0
   16448:	beq	16458 <__assert_fail@plt+0x5640>
   1644c:	ldr	r3, [fp, #-16]
   16450:	cmp	r3, #0
   16454:	bne	16468 <__assert_fail@plt+0x5650>
   16458:	mov	r3, #1
   1645c:	str	r3, [fp, #-16]
   16460:	ldr	r3, [fp, #-16]
   16464:	str	r3, [fp, #-12]
   16468:	ldr	r3, [fp, #-12]
   1646c:	ldr	r2, [fp, #-16]
   16470:	mov	r1, r3
   16474:	ldr	r0, [fp, #-8]
   16478:	bl	165b4 <__assert_fail@plt+0x579c>
   1647c:	mov	r3, r0
   16480:	mov	r0, r3
   16484:	sub	sp, fp, #4
   16488:	ldr	fp, [sp]
   1648c:	add	sp, sp, #4
   16490:	pop	{pc}		; (ldr pc, [sp], #4)
   16494:	str	fp, [sp, #-8]!
   16498:	str	lr, [sp, #4]
   1649c:	add	fp, sp, #4
   164a0:	sub	sp, sp, #8
   164a4:	mov	r0, #14
   164a8:	bl	10de8 <nl_langinfo@plt>
   164ac:	str	r0, [fp, #-8]
   164b0:	ldr	r3, [fp, #-8]
   164b4:	cmp	r3, #0
   164b8:	bne	164c8 <__assert_fail@plt+0x56b0>
   164bc:	movw	r3, #30940	; 0x78dc
   164c0:	movt	r3, #1
   164c4:	str	r3, [fp, #-8]
   164c8:	ldr	r3, [fp, #-8]
   164cc:	ldrb	r3, [r3]
   164d0:	cmp	r3, #0
   164d4:	bne	164e4 <__assert_fail@plt+0x56cc>
   164d8:	movw	r3, #30944	; 0x78e0
   164dc:	movt	r3, #1
   164e0:	str	r3, [fp, #-8]
   164e4:	ldr	r3, [fp, #-8]
   164e8:	mov	r0, r3
   164ec:	sub	sp, fp, #4
   164f0:	ldr	fp, [sp]
   164f4:	add	sp, sp, #4
   164f8:	pop	{pc}		; (ldr pc, [sp], #4)
   164fc:	str	fp, [sp, #-8]!
   16500:	str	lr, [sp, #4]
   16504:	add	fp, sp, #4
   16508:	sub	sp, sp, #32
   1650c:	str	r0, [fp, #-24]	; 0xffffffe8
   16510:	str	r1, [fp, #-28]	; 0xffffffe4
   16514:	str	r2, [fp, #-32]	; 0xffffffe0
   16518:	str	r3, [fp, #-36]	; 0xffffffdc
   1651c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16520:	cmp	r3, #0
   16524:	bne	16530 <__assert_fail@plt+0x5718>
   16528:	sub	r3, fp, #16
   1652c:	str	r3, [fp, #-24]	; 0xffffffe8
   16530:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16534:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16538:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1653c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16540:	bl	10ce0 <mbrtowc@plt>
   16544:	str	r0, [fp, #-8]
   16548:	ldr	r3, [fp, #-8]
   1654c:	cmn	r3, #3
   16550:	bls	1659c <__assert_fail@plt+0x5784>
   16554:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16558:	cmp	r3, #0
   1655c:	beq	1659c <__assert_fail@plt+0x5784>
   16560:	mov	r0, #0
   16564:	bl	16b80 <__assert_fail@plt+0x5d68>
   16568:	mov	r3, r0
   1656c:	eor	r3, r3, #1
   16570:	uxtb	r3, r3
   16574:	cmp	r3, #0
   16578:	beq	1659c <__assert_fail@plt+0x5784>
   1657c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16580:	ldrb	r3, [r3]
   16584:	strb	r3, [fp, #-9]
   16588:	ldrb	r2, [fp, #-9]
   1658c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16590:	str	r2, [r3]
   16594:	mov	r3, #1
   16598:	b	165a0 <__assert_fail@plt+0x5788>
   1659c:	ldr	r3, [fp, #-8]
   165a0:	mov	r0, r3
   165a4:	sub	sp, fp, #4
   165a8:	ldr	fp, [sp]
   165ac:	add	sp, sp, #4
   165b0:	pop	{pc}		; (ldr pc, [sp], #4)
   165b4:	str	fp, [sp, #-8]!
   165b8:	str	lr, [sp, #4]
   165bc:	add	fp, sp, #4
   165c0:	sub	sp, sp, #24
   165c4:	str	r0, [fp, #-16]
   165c8:	str	r1, [fp, #-20]	; 0xffffffec
   165cc:	str	r2, [fp, #-24]	; 0xffffffe8
   165d0:	mov	ip, #0
   165d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   165d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165dc:	umull	r0, r1, r2, r3
   165e0:	mov	r2, #0
   165e4:	mov	r3, #0
   165e8:	mov	r2, r1
   165ec:	mov	r3, #0
   165f0:	cmp	r2, #0
   165f4:	beq	165fc <__assert_fail@plt+0x57e4>
   165f8:	mov	ip, #1
   165fc:	mov	r3, r0
   16600:	str	r3, [fp, #-8]
   16604:	mov	r3, ip
   16608:	and	r3, r3, #1
   1660c:	uxtb	r3, r3
   16610:	cmp	r3, #0
   16614:	beq	16630 <__assert_fail@plt+0x5818>
   16618:	bl	10d88 <__errno_location@plt>
   1661c:	mov	r2, r0
   16620:	mov	r3, #12
   16624:	str	r3, [r2]
   16628:	mov	r3, #0
   1662c:	b	16644 <__assert_fail@plt+0x582c>
   16630:	ldr	r3, [fp, #-8]
   16634:	mov	r1, r3
   16638:	ldr	r0, [fp, #-16]
   1663c:	bl	15d78 <__assert_fail@plt+0x4f60>
   16640:	mov	r3, r0
   16644:	mov	r0, r3
   16648:	sub	sp, fp, #4
   1664c:	ldr	fp, [sp]
   16650:	add	sp, sp, #4
   16654:	pop	{pc}		; (ldr pc, [sp], #4)
   16658:	push	{fp}		; (str fp, [sp, #-4]!)
   1665c:	add	fp, sp, #0
   16660:	sub	sp, sp, #12
   16664:	str	r0, [fp, #-8]
   16668:	ldr	r3, [fp, #-8]
   1666c:	cmp	r3, #90	; 0x5a
   16670:	bgt	16694 <__assert_fail@plt+0x587c>
   16674:	ldr	r3, [fp, #-8]
   16678:	cmp	r3, #65	; 0x41
   1667c:	bge	166a4 <__assert_fail@plt+0x588c>
   16680:	ldr	r3, [fp, #-8]
   16684:	sub	r3, r3, #48	; 0x30
   16688:	cmp	r3, #9
   1668c:	bhi	166ac <__assert_fail@plt+0x5894>
   16690:	b	166a4 <__assert_fail@plt+0x588c>
   16694:	ldr	r3, [fp, #-8]
   16698:	sub	r3, r3, #97	; 0x61
   1669c:	cmp	r3, #25
   166a0:	bhi	166ac <__assert_fail@plt+0x5894>
   166a4:	mov	r3, #1
   166a8:	b	166b0 <__assert_fail@plt+0x5898>
   166ac:	mov	r3, #0
   166b0:	mov	r0, r3
   166b4:	add	sp, fp, #0
   166b8:	pop	{fp}		; (ldr fp, [sp], #4)
   166bc:	bx	lr
   166c0:	push	{fp}		; (str fp, [sp, #-4]!)
   166c4:	add	fp, sp, #0
   166c8:	sub	sp, sp, #12
   166cc:	str	r0, [fp, #-8]
   166d0:	ldr	r3, [fp, #-8]
   166d4:	cmp	r3, #65	; 0x41
   166d8:	blt	16700 <__assert_fail@plt+0x58e8>
   166dc:	ldr	r3, [fp, #-8]
   166e0:	cmp	r3, #90	; 0x5a
   166e4:	ble	166f8 <__assert_fail@plt+0x58e0>
   166e8:	ldr	r3, [fp, #-8]
   166ec:	sub	r3, r3, #97	; 0x61
   166f0:	cmp	r3, #25
   166f4:	bhi	16700 <__assert_fail@plt+0x58e8>
   166f8:	mov	r3, #1
   166fc:	b	16704 <__assert_fail@plt+0x58ec>
   16700:	mov	r3, #0
   16704:	mov	r0, r3
   16708:	add	sp, fp, #0
   1670c:	pop	{fp}		; (ldr fp, [sp], #4)
   16710:	bx	lr
   16714:	push	{fp}		; (str fp, [sp, #-4]!)
   16718:	add	fp, sp, #0
   1671c:	sub	sp, sp, #12
   16720:	str	r0, [fp, #-8]
   16724:	ldr	r3, [fp, #-8]
   16728:	cmp	r3, #127	; 0x7f
   1672c:	bhi	16738 <__assert_fail@plt+0x5920>
   16730:	mov	r3, #1
   16734:	b	1673c <__assert_fail@plt+0x5924>
   16738:	mov	r3, #0
   1673c:	mov	r0, r3
   16740:	add	sp, fp, #0
   16744:	pop	{fp}		; (ldr fp, [sp], #4)
   16748:	bx	lr
   1674c:	push	{fp}		; (str fp, [sp, #-4]!)
   16750:	add	fp, sp, #0
   16754:	sub	sp, sp, #12
   16758:	str	r0, [fp, #-8]
   1675c:	ldr	r3, [fp, #-8]
   16760:	cmp	r3, #32
   16764:	beq	16774 <__assert_fail@plt+0x595c>
   16768:	ldr	r3, [fp, #-8]
   1676c:	cmp	r3, #9
   16770:	bne	1677c <__assert_fail@plt+0x5964>
   16774:	mov	r3, #1
   16778:	b	16780 <__assert_fail@plt+0x5968>
   1677c:	mov	r3, #0
   16780:	and	r3, r3, #1
   16784:	uxtb	r3, r3
   16788:	mov	r0, r3
   1678c:	add	sp, fp, #0
   16790:	pop	{fp}		; (ldr fp, [sp], #4)
   16794:	bx	lr
   16798:	push	{fp}		; (str fp, [sp, #-4]!)
   1679c:	add	fp, sp, #0
   167a0:	sub	sp, sp, #12
   167a4:	str	r0, [fp, #-8]
   167a8:	ldr	r3, [fp, #-8]
   167ac:	cmp	r3, #0
   167b0:	blt	167d4 <__assert_fail@plt+0x59bc>
   167b4:	ldr	r3, [fp, #-8]
   167b8:	cmp	r3, #31
   167bc:	ble	167cc <__assert_fail@plt+0x59b4>
   167c0:	ldr	r3, [fp, #-8]
   167c4:	cmp	r3, #127	; 0x7f
   167c8:	bne	167d4 <__assert_fail@plt+0x59bc>
   167cc:	mov	r3, #1
   167d0:	b	167d8 <__assert_fail@plt+0x59c0>
   167d4:	mov	r3, #0
   167d8:	mov	r0, r3
   167dc:	add	sp, fp, #0
   167e0:	pop	{fp}		; (ldr fp, [sp], #4)
   167e4:	bx	lr
   167e8:	push	{fp}		; (str fp, [sp, #-4]!)
   167ec:	add	fp, sp, #0
   167f0:	sub	sp, sp, #12
   167f4:	str	r0, [fp, #-8]
   167f8:	ldr	r3, [fp, #-8]
   167fc:	sub	r3, r3, #48	; 0x30
   16800:	cmp	r3, #9
   16804:	bhi	16810 <__assert_fail@plt+0x59f8>
   16808:	mov	r3, #1
   1680c:	b	16814 <__assert_fail@plt+0x59fc>
   16810:	mov	r3, #0
   16814:	mov	r0, r3
   16818:	add	sp, fp, #0
   1681c:	pop	{fp}		; (ldr fp, [sp], #4)
   16820:	bx	lr
   16824:	push	{fp}		; (str fp, [sp, #-4]!)
   16828:	add	fp, sp, #0
   1682c:	sub	sp, sp, #12
   16830:	str	r0, [fp, #-8]
   16834:	ldr	r3, [fp, #-8]
   16838:	sub	r3, r3, #33	; 0x21
   1683c:	cmp	r3, #93	; 0x5d
   16840:	bhi	1684c <__assert_fail@plt+0x5a34>
   16844:	mov	r3, #1
   16848:	b	16850 <__assert_fail@plt+0x5a38>
   1684c:	mov	r3, #0
   16850:	mov	r0, r3
   16854:	add	sp, fp, #0
   16858:	pop	{fp}		; (ldr fp, [sp], #4)
   1685c:	bx	lr
   16860:	push	{fp}		; (str fp, [sp, #-4]!)
   16864:	add	fp, sp, #0
   16868:	sub	sp, sp, #12
   1686c:	str	r0, [fp, #-8]
   16870:	ldr	r3, [fp, #-8]
   16874:	sub	r3, r3, #97	; 0x61
   16878:	cmp	r3, #25
   1687c:	bhi	16888 <__assert_fail@plt+0x5a70>
   16880:	mov	r3, #1
   16884:	b	1688c <__assert_fail@plt+0x5a74>
   16888:	mov	r3, #0
   1688c:	mov	r0, r3
   16890:	add	sp, fp, #0
   16894:	pop	{fp}		; (ldr fp, [sp], #4)
   16898:	bx	lr
   1689c:	push	{fp}		; (str fp, [sp, #-4]!)
   168a0:	add	fp, sp, #0
   168a4:	sub	sp, sp, #12
   168a8:	str	r0, [fp, #-8]
   168ac:	ldr	r3, [fp, #-8]
   168b0:	sub	r3, r3, #32
   168b4:	cmp	r3, #94	; 0x5e
   168b8:	bhi	168c4 <__assert_fail@plt+0x5aac>
   168bc:	mov	r3, #1
   168c0:	b	168c8 <__assert_fail@plt+0x5ab0>
   168c4:	mov	r3, #0
   168c8:	mov	r0, r3
   168cc:	add	sp, fp, #0
   168d0:	pop	{fp}		; (ldr fp, [sp], #4)
   168d4:	bx	lr
   168d8:	push	{fp}		; (str fp, [sp, #-4]!)
   168dc:	add	fp, sp, #0
   168e0:	sub	sp, sp, #12
   168e4:	str	r0, [fp, #-8]
   168e8:	ldr	r3, [fp, #-8]
   168ec:	cmp	r3, #64	; 0x40
   168f0:	bgt	16914 <__assert_fail@plt+0x5afc>
   168f4:	ldr	r3, [fp, #-8]
   168f8:	cmp	r3, #58	; 0x3a
   168fc:	bge	1693c <__assert_fail@plt+0x5b24>
   16900:	ldr	r3, [fp, #-8]
   16904:	sub	r3, r3, #33	; 0x21
   16908:	cmp	r3, #14
   1690c:	bhi	16944 <__assert_fail@plt+0x5b2c>
   16910:	b	1693c <__assert_fail@plt+0x5b24>
   16914:	ldr	r3, [fp, #-8]
   16918:	cmp	r3, #91	; 0x5b
   1691c:	blt	16944 <__assert_fail@plt+0x5b2c>
   16920:	ldr	r3, [fp, #-8]
   16924:	cmp	r3, #96	; 0x60
   16928:	ble	1693c <__assert_fail@plt+0x5b24>
   1692c:	ldr	r3, [fp, #-8]
   16930:	sub	r3, r3, #123	; 0x7b
   16934:	cmp	r3, #3
   16938:	bhi	16944 <__assert_fail@plt+0x5b2c>
   1693c:	mov	r3, #1
   16940:	b	16948 <__assert_fail@plt+0x5b30>
   16944:	mov	r3, #0
   16948:	mov	r0, r3
   1694c:	add	sp, fp, #0
   16950:	pop	{fp}		; (ldr fp, [sp], #4)
   16954:	bx	lr
   16958:	push	{fp}		; (str fp, [sp, #-4]!)
   1695c:	add	fp, sp, #0
   16960:	sub	sp, sp, #12
   16964:	str	r0, [fp, #-8]
   16968:	ldr	r3, [fp, #-8]
   1696c:	cmp	r3, #9
   16970:	blt	16994 <__assert_fail@plt+0x5b7c>
   16974:	ldr	r3, [fp, #-8]
   16978:	cmp	r3, #13
   1697c:	ble	1698c <__assert_fail@plt+0x5b74>
   16980:	ldr	r3, [fp, #-8]
   16984:	cmp	r3, #32
   16988:	bne	16994 <__assert_fail@plt+0x5b7c>
   1698c:	mov	r3, #1
   16990:	b	16998 <__assert_fail@plt+0x5b80>
   16994:	mov	r3, #0
   16998:	mov	r0, r3
   1699c:	add	sp, fp, #0
   169a0:	pop	{fp}		; (ldr fp, [sp], #4)
   169a4:	bx	lr
   169a8:	push	{fp}		; (str fp, [sp, #-4]!)
   169ac:	add	fp, sp, #0
   169b0:	sub	sp, sp, #12
   169b4:	str	r0, [fp, #-8]
   169b8:	ldr	r3, [fp, #-8]
   169bc:	sub	r3, r3, #65	; 0x41
   169c0:	cmp	r3, #25
   169c4:	bhi	169d0 <__assert_fail@plt+0x5bb8>
   169c8:	mov	r3, #1
   169cc:	b	169d4 <__assert_fail@plt+0x5bbc>
   169d0:	mov	r3, #0
   169d4:	mov	r0, r3
   169d8:	add	sp, fp, #0
   169dc:	pop	{fp}		; (ldr fp, [sp], #4)
   169e0:	bx	lr
   169e4:	push	{fp}		; (str fp, [sp, #-4]!)
   169e8:	add	fp, sp, #0
   169ec:	sub	sp, sp, #12
   169f0:	str	r0, [fp, #-8]
   169f4:	ldr	r3, [fp, #-8]
   169f8:	sub	r3, r3, #48	; 0x30
   169fc:	cmp	r3, #54	; 0x36
   16a00:	ldrls	pc, [pc, r3, lsl #2]
   16a04:	b	16aec <__assert_fail@plt+0x5cd4>
   16a08:	andeq	r6, r1, r4, ror #21
   16a0c:	andeq	r6, r1, r4, ror #21
   16a10:	andeq	r6, r1, r4, ror #21
   16a14:	andeq	r6, r1, r4, ror #21
   16a18:	andeq	r6, r1, r4, ror #21
   16a1c:	andeq	r6, r1, r4, ror #21
   16a20:	andeq	r6, r1, r4, ror #21
   16a24:	andeq	r6, r1, r4, ror #21
   16a28:	andeq	r6, r1, r4, ror #21
   16a2c:	andeq	r6, r1, r4, ror #21
   16a30:	andeq	r6, r1, ip, ror #21
   16a34:	andeq	r6, r1, ip, ror #21
   16a38:	andeq	r6, r1, ip, ror #21
   16a3c:	andeq	r6, r1, ip, ror #21
   16a40:	andeq	r6, r1, ip, ror #21
   16a44:	andeq	r6, r1, ip, ror #21
   16a48:	andeq	r6, r1, ip, ror #21
   16a4c:	andeq	r6, r1, r4, ror #21
   16a50:	andeq	r6, r1, r4, ror #21
   16a54:	andeq	r6, r1, r4, ror #21
   16a58:	andeq	r6, r1, r4, ror #21
   16a5c:	andeq	r6, r1, r4, ror #21
   16a60:	andeq	r6, r1, r4, ror #21
   16a64:	andeq	r6, r1, ip, ror #21
   16a68:	andeq	r6, r1, ip, ror #21
   16a6c:	andeq	r6, r1, ip, ror #21
   16a70:	andeq	r6, r1, ip, ror #21
   16a74:	andeq	r6, r1, ip, ror #21
   16a78:	andeq	r6, r1, ip, ror #21
   16a7c:	andeq	r6, r1, ip, ror #21
   16a80:	andeq	r6, r1, ip, ror #21
   16a84:	andeq	r6, r1, ip, ror #21
   16a88:	andeq	r6, r1, ip, ror #21
   16a8c:	andeq	r6, r1, ip, ror #21
   16a90:	andeq	r6, r1, ip, ror #21
   16a94:	andeq	r6, r1, ip, ror #21
   16a98:	andeq	r6, r1, ip, ror #21
   16a9c:	andeq	r6, r1, ip, ror #21
   16aa0:	andeq	r6, r1, ip, ror #21
   16aa4:	andeq	r6, r1, ip, ror #21
   16aa8:	andeq	r6, r1, ip, ror #21
   16aac:	andeq	r6, r1, ip, ror #21
   16ab0:	andeq	r6, r1, ip, ror #21
   16ab4:	andeq	r6, r1, ip, ror #21
   16ab8:	andeq	r6, r1, ip, ror #21
   16abc:	andeq	r6, r1, ip, ror #21
   16ac0:	andeq	r6, r1, ip, ror #21
   16ac4:	andeq	r6, r1, ip, ror #21
   16ac8:	andeq	r6, r1, ip, ror #21
   16acc:	andeq	r6, r1, r4, ror #21
   16ad0:	andeq	r6, r1, r4, ror #21
   16ad4:	andeq	r6, r1, r4, ror #21
   16ad8:	andeq	r6, r1, r4, ror #21
   16adc:	andeq	r6, r1, r4, ror #21
   16ae0:	andeq	r6, r1, r4, ror #21
   16ae4:	mov	r3, #1
   16ae8:	b	16af0 <__assert_fail@plt+0x5cd8>
   16aec:	mov	r3, #0
   16af0:	mov	r0, r3
   16af4:	add	sp, fp, #0
   16af8:	pop	{fp}		; (ldr fp, [sp], #4)
   16afc:	bx	lr
   16b00:	push	{fp}		; (str fp, [sp, #-4]!)
   16b04:	add	fp, sp, #0
   16b08:	sub	sp, sp, #12
   16b0c:	str	r0, [fp, #-8]
   16b10:	ldr	r3, [fp, #-8]
   16b14:	sub	r3, r3, #65	; 0x41
   16b18:	cmp	r3, #25
   16b1c:	bhi	16b2c <__assert_fail@plt+0x5d14>
   16b20:	ldr	r3, [fp, #-8]
   16b24:	add	r3, r3, #32
   16b28:	b	16b30 <__assert_fail@plt+0x5d18>
   16b2c:	ldr	r3, [fp, #-8]
   16b30:	mov	r0, r3
   16b34:	add	sp, fp, #0
   16b38:	pop	{fp}		; (ldr fp, [sp], #4)
   16b3c:	bx	lr
   16b40:	push	{fp}		; (str fp, [sp, #-4]!)
   16b44:	add	fp, sp, #0
   16b48:	sub	sp, sp, #12
   16b4c:	str	r0, [fp, #-8]
   16b50:	ldr	r3, [fp, #-8]
   16b54:	sub	r3, r3, #97	; 0x61
   16b58:	cmp	r3, #25
   16b5c:	bhi	16b6c <__assert_fail@plt+0x5d54>
   16b60:	ldr	r3, [fp, #-8]
   16b64:	sub	r3, r3, #32
   16b68:	b	16b70 <__assert_fail@plt+0x5d58>
   16b6c:	ldr	r3, [fp, #-8]
   16b70:	mov	r0, r3
   16b74:	add	sp, fp, #0
   16b78:	pop	{fp}		; (ldr fp, [sp], #4)
   16b7c:	bx	lr
   16b80:	str	fp, [sp, #-8]!
   16b84:	str	lr, [sp, #4]
   16b88:	add	fp, sp, #4
   16b8c:	sub	sp, sp, #272	; 0x110
   16b90:	str	r0, [fp, #-272]	; 0xfffffef0
   16b94:	sub	r3, fp, #264	; 0x108
   16b98:	movw	r2, #257	; 0x101
   16b9c:	mov	r1, r3
   16ba0:	ldr	r0, [fp, #-272]	; 0xfffffef0
   16ba4:	bl	16d44 <__assert_fail@plt+0x5f2c>
   16ba8:	mov	r3, r0
   16bac:	cmp	r3, #0
   16bb0:	beq	16bbc <__assert_fail@plt+0x5da4>
   16bb4:	mov	r3, #0
   16bb8:	b	16c10 <__assert_fail@plt+0x5df8>
   16bbc:	sub	r3, fp, #264	; 0x108
   16bc0:	movw	r1, #30952	; 0x78e8
   16bc4:	movt	r1, #1
   16bc8:	mov	r0, r3
   16bcc:	bl	10bf0 <strcmp@plt>
   16bd0:	mov	r3, r0
   16bd4:	cmp	r3, #0
   16bd8:	beq	16c04 <__assert_fail@plt+0x5dec>
   16bdc:	sub	r3, fp, #264	; 0x108
   16be0:	movw	r1, #30956	; 0x78ec
   16be4:	movt	r1, #1
   16be8:	mov	r0, r3
   16bec:	bl	10bf0 <strcmp@plt>
   16bf0:	mov	r3, r0
   16bf4:	cmp	r3, #0
   16bf8:	beq	16c04 <__assert_fail@plt+0x5dec>
   16bfc:	mov	r3, #1
   16c00:	b	16c08 <__assert_fail@plt+0x5df0>
   16c04:	mov	r3, #0
   16c08:	and	r3, r3, #1
   16c0c:	uxtb	r3, r3
   16c10:	mov	r0, r3
   16c14:	sub	sp, fp, #4
   16c18:	ldr	fp, [sp]
   16c1c:	add	sp, sp, #4
   16c20:	pop	{pc}		; (ldr pc, [sp], #4)
   16c24:	str	fp, [sp, #-8]!
   16c28:	str	lr, [sp, #4]
   16c2c:	add	fp, sp, #4
   16c30:	sub	sp, sp, #16
   16c34:	str	r0, [fp, #-16]
   16c38:	mov	r1, #0
   16c3c:	ldr	r0, [fp, #-16]
   16c40:	bl	10dd0 <setlocale@plt>
   16c44:	str	r0, [fp, #-8]
   16c48:	ldr	r3, [fp, #-8]
   16c4c:	mov	r0, r3
   16c50:	sub	sp, fp, #4
   16c54:	ldr	fp, [sp]
   16c58:	add	sp, sp, #4
   16c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c60:	str	fp, [sp, #-8]!
   16c64:	str	lr, [sp, #4]
   16c68:	add	fp, sp, #4
   16c6c:	sub	sp, sp, #24
   16c70:	str	r0, [fp, #-16]
   16c74:	str	r1, [fp, #-20]	; 0xffffffec
   16c78:	str	r2, [fp, #-24]	; 0xffffffe8
   16c7c:	ldr	r0, [fp, #-16]
   16c80:	bl	16c24 <__assert_fail@plt+0x5e0c>
   16c84:	str	r0, [fp, #-8]
   16c88:	ldr	r3, [fp, #-8]
   16c8c:	cmp	r3, #0
   16c90:	bne	16cb4 <__assert_fail@plt+0x5e9c>
   16c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c98:	cmp	r3, #0
   16c9c:	beq	16cac <__assert_fail@plt+0x5e94>
   16ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca4:	mov	r2, #0
   16ca8:	strb	r2, [r3]
   16cac:	mov	r3, #22
   16cb0:	b	16d30 <__assert_fail@plt+0x5f18>
   16cb4:	ldr	r0, [fp, #-8]
   16cb8:	bl	10d64 <strlen@plt>
   16cbc:	str	r0, [fp, #-12]
   16cc0:	ldr	r2, [fp, #-12]
   16cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cc8:	cmp	r2, r3
   16ccc:	bcs	16cf0 <__assert_fail@plt+0x5ed8>
   16cd0:	ldr	r3, [fp, #-12]
   16cd4:	add	r3, r3, #1
   16cd8:	mov	r2, r3
   16cdc:	ldr	r1, [fp, #-8]
   16ce0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ce4:	bl	10c38 <memcpy@plt>
   16ce8:	mov	r3, #0
   16cec:	b	16d30 <__assert_fail@plt+0x5f18>
   16cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cf4:	cmp	r3, #0
   16cf8:	beq	16d2c <__assert_fail@plt+0x5f14>
   16cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d00:	sub	r3, r3, #1
   16d04:	mov	r2, r3
   16d08:	ldr	r1, [fp, #-8]
   16d0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16d10:	bl	10c38 <memcpy@plt>
   16d14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d18:	sub	r3, r3, #1
   16d1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d20:	add	r3, r2, r3
   16d24:	mov	r2, #0
   16d28:	strb	r2, [r3]
   16d2c:	mov	r3, #34	; 0x22
   16d30:	mov	r0, r3
   16d34:	sub	sp, fp, #4
   16d38:	ldr	fp, [sp]
   16d3c:	add	sp, sp, #4
   16d40:	pop	{pc}		; (ldr pc, [sp], #4)
   16d44:	str	fp, [sp, #-8]!
   16d48:	str	lr, [sp, #4]
   16d4c:	add	fp, sp, #4
   16d50:	sub	sp, sp, #16
   16d54:	str	r0, [fp, #-8]
   16d58:	str	r1, [fp, #-12]
   16d5c:	str	r2, [fp, #-16]
   16d60:	ldr	r2, [fp, #-16]
   16d64:	ldr	r1, [fp, #-12]
   16d68:	ldr	r0, [fp, #-8]
   16d6c:	bl	16c60 <__assert_fail@plt+0x5e48>
   16d70:	mov	r3, r0
   16d74:	mov	r0, r3
   16d78:	sub	sp, fp, #4
   16d7c:	ldr	fp, [sp]
   16d80:	add	sp, sp, #4
   16d84:	pop	{pc}		; (ldr pc, [sp], #4)
   16d88:	str	fp, [sp, #-8]!
   16d8c:	str	lr, [sp, #4]
   16d90:	add	fp, sp, #4
   16d94:	sub	sp, sp, #8
   16d98:	str	r0, [fp, #-8]
   16d9c:	ldr	r0, [fp, #-8]
   16da0:	bl	16c24 <__assert_fail@plt+0x5e0c>
   16da4:	mov	r3, r0
   16da8:	mov	r0, r3
   16dac:	sub	sp, fp, #4
   16db0:	ldr	fp, [sp]
   16db4:	add	sp, sp, #4
   16db8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dc0:	mov	r7, r0
   16dc4:	ldr	r6, [pc, #72]	; 16e14 <__assert_fail@plt+0x5ffc>
   16dc8:	ldr	r5, [pc, #72]	; 16e18 <__assert_fail@plt+0x6000>
   16dcc:	add	r6, pc, r6
   16dd0:	add	r5, pc, r5
   16dd4:	sub	r6, r6, r5
   16dd8:	mov	r8, r1
   16ddc:	mov	r9, r2
   16de0:	bl	10bb8 <calloc@plt-0x20>
   16de4:	asrs	r6, r6, #2
   16de8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16dec:	mov	r4, #0
   16df0:	add	r4, r4, #1
   16df4:	ldr	r3, [r5], #4
   16df8:	mov	r2, r9
   16dfc:	mov	r1, r8
   16e00:	mov	r0, r7
   16e04:	blx	r3
   16e08:	cmp	r6, r4
   16e0c:	bne	16df0 <__assert_fail@plt+0x5fd8>
   16e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e14:	andeq	r1, r1, r0, asr #2
   16e18:	andeq	r1, r1, r8, lsr r1
   16e1c:	bx	lr
   16e20:	ldr	r3, [pc, #12]	; 16e34 <__assert_fail@plt+0x601c>
   16e24:	mov	r1, #0
   16e28:	add	r3, pc, r3
   16e2c:	ldr	r2, [r3]
   16e30:	b	10d94 <__cxa_atexit@plt>
   16e34:	andeq	r1, r1, r8, lsr #5

Disassembly of section .fini:

00016e38 <.fini>:
   16e38:	push	{r3, lr}
   16e3c:	pop	{r3, pc}
