
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

000113c4 <.init>:
   113c4:	push	{r3, lr}
   113c8:	bl	117ec <__assert_fail@plt+0x48>
   113cc:	pop	{r3, pc}

Disassembly of section .plt:

000113d0 <fdopen@plt-0x14>:
   113d0:	push	{lr}		; (str lr, [sp, #-4]!)
   113d4:	ldr	lr, [pc, #4]	; 113e0 <fdopen@plt-0x4>
   113d8:	add	lr, pc, lr
   113dc:	ldr	pc, [lr, #8]!
   113e0:	andeq	sl, r1, r0, lsr #24

000113e4 <fdopen@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3104]!	; 0xc20

000113f0 <calloc@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3096]!	; 0xc18

000113fc <strcmp@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3088]!	; 0xc10

00011408 <strtol@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3080]!	; 0xc08

00011414 <printf@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3072]!	; 0xc00

00011420 <read@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001142c <fflush@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3056]!	; 0xbf0

00011438 <wcwidth@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3048]!	; 0xbe8

00011444 <free@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011450 <ferror@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3032]!	; 0xbd8

0001145c <_exit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3024]!	; 0xbd0

00011468 <memcpy@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3016]!	; 0xbc8

00011474 <execvp@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3008]!	; 0xbc0

00011480 <mbsinit@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3000]!	; 0xbb8

0001148c <signal@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #2992]!	; 0xbb0

00011498 <dcgettext@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #2984]!	; 0xba8

000114a4 <sysconf@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #2976]!	; 0xba0

000114b0 <dup2@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #2968]!	; 0xb98

000114bc <getrlimit64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #2960]!	; 0xb90

000114c8 <realloc@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #2952]!	; 0xb88

000114d4 <textdomain@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2944]!	; 0xb80

000114e0 <iswcntrl@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2936]!	; 0xb78

000114ec <iswprint@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2928]!	; 0xb70

000114f8 <poll@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2920]!	; 0xb68

00011504 <sigaction@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2912]!	; 0xb60

00011510 <lseek64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2904]!	; 0xb58

0001151c <waitpid@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2896]!	; 0xb50

00011528 <__ctype_get_mb_cur_max@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2888]!	; 0xb48

00011534 <strcpy@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2880]!	; 0xb40

00011540 <__fpending@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2872]!	; 0xb38

0001154c <mbrtowc@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2864]!	; 0xb30

00011558 <error@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2856]!	; 0xb28

00011564 <opendir@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2848]!	; 0xb20

00011570 <open64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2840]!	; 0xb18

0001157c <getenv@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2832]!	; 0xb10

00011588 <malloc@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2824]!	; 0xb08

00011594 <__libc_start_main@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2816]!	; 0xb00

000115a0 <__freading@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2808]!	; 0xaf8

000115ac <__gmon_start__@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2800]!	; 0xaf0

000115b8 <getopt_long@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2792]!	; 0xae8

000115c4 <__ctype_b_loc@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2784]!	; 0xae0

000115d0 <getpid@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2776]!	; 0xad8

000115dc <exit@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2768]!	; 0xad0

000115e8 <bcmp@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2760]!	; 0xac8

000115f4 <strtoul@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2752]!	; 0xac0

00011600 <strlen@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2744]!	; 0xab8

0001160c <strchr@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2736]!	; 0xab0

00011618 <setenv@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2728]!	; 0xaa8

00011624 <fprintf@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2720]!	; 0xaa0

00011630 <__errno_location@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2712]!	; 0xa98

0001163c <snprintf@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2704]!	; 0xa90

00011648 <__cxa_atexit@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2696]!	; 0xa88

00011654 <memset@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2688]!	; 0xa80

00011660 <strncpy@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2680]!	; 0xa78

0001166c <write@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2672]!	; 0xa70

00011678 <fileno@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2664]!	; 0xa68

00011684 <memchr@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2656]!	; 0xa60

00011690 <fclose@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2648]!	; 0xa58

0001169c <strnlen@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2640]!	; 0xa50

000116a8 <pipe@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2632]!	; 0xa48

000116b4 <fseeko64@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2624]!	; 0xa40

000116c0 <fcntl64@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2616]!	; 0xa38

000116cc <setlocale@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2608]!	; 0xa30

000116d8 <sigemptyset@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2600]!	; 0xa28

000116e4 <fork@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2592]!	; 0xa20

000116f0 <strrchr@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #106496	; 0x1a000
   116f8:	ldr	pc, [ip, #2584]!	; 0xa18

000116fc <nl_langinfo@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #106496	; 0x1a000
   11704:	ldr	pc, [ip, #2576]!	; 0xa10

00011708 <readdir64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #106496	; 0x1a000
   11710:	ldr	pc, [ip, #2568]!	; 0xa08

00011714 <fdopendir@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #106496	; 0x1a000
   1171c:	ldr	pc, [ip, #2560]!	; 0xa00

00011720 <putc@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #106496	; 0x1a000
   11728:	ldr	pc, [ip, #2552]!	; 0x9f8

0001172c <dirfd@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #106496	; 0x1a000
   11734:	ldr	pc, [ip, #2544]!	; 0x9f0

00011738 <bindtextdomain@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #106496	; 0x1a000
   11740:	ldr	pc, [ip, #2536]!	; 0x9e8

00011744 <isatty@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #106496	; 0x1a000
   1174c:	ldr	pc, [ip, #2528]!	; 0x9e0

00011750 <unsetenv@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #106496	; 0x1a000
   11758:	ldr	pc, [ip, #2520]!	; 0x9d8

0001175c <fputs@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #106496	; 0x1a000
   11764:	ldr	pc, [ip, #2512]!	; 0x9d0

00011768 <strncmp@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #106496	; 0x1a000
   11770:	ldr	pc, [ip, #2504]!	; 0x9c8

00011774 <abort@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #106496	; 0x1a000
   1177c:	ldr	pc, [ip, #2496]!	; 0x9c0

00011780 <getc@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #106496	; 0x1a000
   11788:	ldr	pc, [ip, #2488]!	; 0x9b8

0001178c <close@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #106496	; 0x1a000
   11794:	ldr	pc, [ip, #2480]!	; 0x9b0

00011798 <closedir@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #106496	; 0x1a000
   117a0:	ldr	pc, [ip, #2472]!	; 0x9a8

000117a4 <__assert_fail@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #106496	; 0x1a000
   117ac:	ldr	pc, [ip, #2464]!	; 0x9a0

Disassembly of section .text:

000117b0 <.text>:
   117b0:	mov	fp, #0
   117b4:	mov	lr, #0
   117b8:	pop	{r1}		; (ldr r1, [sp], #4)
   117bc:	mov	r2, sp
   117c0:	push	{r2}		; (str r2, [sp, #-4]!)
   117c4:	push	{r0}		; (str r0, [sp, #-4]!)
   117c8:	ldr	ip, [pc, #16]	; 117e0 <__assert_fail@plt+0x3c>
   117cc:	push	{ip}		; (str ip, [sp, #-4]!)
   117d0:	ldr	r0, [pc, #12]	; 117e4 <__assert_fail@plt+0x40>
   117d4:	ldr	r3, [pc, #12]	; 117e8 <__assert_fail@plt+0x44>
   117d8:	bl	11594 <__libc_start_main@plt>
   117dc:	bl	11774 <abort@plt>
   117e0:			; <UNDEFINED> instruction: 0x000196b8
   117e4:	andeq	r1, r1, r0, lsr #17
   117e8:	andeq	r9, r1, r8, asr r6
   117ec:	ldr	r3, [pc, #20]	; 11808 <__assert_fail@plt+0x64>
   117f0:	ldr	r2, [pc, #20]	; 1180c <__assert_fail@plt+0x68>
   117f4:	add	r3, pc, r3
   117f8:	ldr	r2, [r3, r2]
   117fc:	cmp	r2, #0
   11800:	bxeq	lr
   11804:	b	115ac <__gmon_start__@plt>
   11808:	andeq	sl, r1, r4, lsl #16
   1180c:	andeq	r0, r0, r0, asr r1
   11810:	ldr	r0, [pc, #24]	; 11830 <__assert_fail@plt+0x8c>
   11814:	ldr	r3, [pc, #24]	; 11834 <__assert_fail@plt+0x90>
   11818:	cmp	r3, r0
   1181c:	bxeq	lr
   11820:	ldr	r3, [pc, #16]	; 11838 <__assert_fail@plt+0x94>
   11824:	cmp	r3, #0
   11828:	bxeq	lr
   1182c:	bx	r3
   11830:			; <UNDEFINED> instruction: 0x0002c1b0
   11834:			; <UNDEFINED> instruction: 0x0002c1b0
   11838:	andeq	r0, r0, r0
   1183c:	ldr	r0, [pc, #36]	; 11868 <__assert_fail@plt+0xc4>
   11840:	ldr	r1, [pc, #36]	; 1186c <__assert_fail@plt+0xc8>
   11844:	sub	r1, r1, r0
   11848:	asr	r1, r1, #2
   1184c:	add	r1, r1, r1, lsr #31
   11850:	asrs	r1, r1, #1
   11854:	bxeq	lr
   11858:	ldr	r3, [pc, #16]	; 11870 <__assert_fail@plt+0xcc>
   1185c:	cmp	r3, #0
   11860:	bxeq	lr
   11864:	bx	r3
   11868:			; <UNDEFINED> instruction: 0x0002c1b0
   1186c:			; <UNDEFINED> instruction: 0x0002c1b0
   11870:	andeq	r0, r0, r0
   11874:	push	{r4, lr}
   11878:	ldr	r4, [pc, #24]	; 11898 <__assert_fail@plt+0xf4>
   1187c:	ldrb	r3, [r4]
   11880:	cmp	r3, #0
   11884:	popne	{r4, pc}
   11888:	bl	11810 <__assert_fail@plt+0x6c>
   1188c:	mov	r3, #1
   11890:	strb	r3, [r4]
   11894:	pop	{r4, pc}
   11898:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1189c:	b	1183c <__assert_fail@plt+0x98>
   118a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	add	fp, sp, #28
   118a8:	sub	sp, sp, #212	; 0xd4
   118ac:	mov	r9, r0
   118b0:	mov	r0, #0
   118b4:	mov	sl, r1
   118b8:	strb	r0, [fp, #-40]	; 0xffffffd8
   118bc:	movw	r0, #25445	; 0x6365
   118c0:	movt	r0, #28520	; 0x6f68
   118c4:	str	r0, [fp, #-44]	; 0xffffffd4
   118c8:	ldr	r0, [r1]
   118cc:	cmp	r0, #0
   118d0:	movweq	r0, #38629	; 0x96e5
   118d4:	movteq	r0, #1
   118d8:	bl	163ec <__assert_fail@plt+0x4c48>
   118dc:	bl	14bbc <__assert_fail@plt+0x3418>
   118e0:	bl	115d0 <getpid@plt>
   118e4:	movw	r1, #49632	; 0xc1e0
   118e8:	movt	r1, #2
   118ec:	str	r0, [r1]
   118f0:	movw	r1, #49636	; 0xc1e4
   118f4:	mov	r0, #0
   118f8:	movt	r1, #2
   118fc:	str	r0, [r1]
   11900:	movw	r1, #41939	; 0xa3d3
   11904:	mov	r0, #6
   11908:	movt	r1, #1
   1190c:	bl	116cc <setlocale@plt>
   11910:	movw	r4, #46118	; 0xb426
   11914:	movw	r1, #38635	; 0x96eb
   11918:	movt	r4, #1
   1191c:	movt	r1, #1
   11920:	mov	r0, r4
   11924:	bl	11738 <bindtextdomain@plt>
   11928:	mov	r0, r4
   1192c:	bl	114d4 <textdomain@plt>
   11930:	movw	r0, #21672	; 0x54a8
   11934:	movt	r0, #1
   11938:	bl	196bc <__assert_fail@plt+0x7f18>
   1193c:	cmp	r0, #0
   11940:	bne	128a4 <__assert_fail@plt+0x1100>
   11944:	movw	r0, #12268	; 0x2fec
   11948:	movt	r0, #1
   1194c:	bl	196bc <__assert_fail@plt+0x7f18>
   11950:	cmp	r0, #0
   11954:	bne	128a4 <__assert_fail@plt+0x1100>
   11958:	movw	r7, #49640	; 0xc1e8
   1195c:	mov	r1, #2048	; 0x800
   11960:	movt	r7, #2
   11964:	mov	r0, r7
   11968:	bl	1492c <__assert_fail@plt+0x3188>
   1196c:	mov	r4, r0
   11970:	sub	r0, r0, #1
   11974:	cmp	r0, #2
   11978:	str	r4, [sp, #32]
   1197c:	bcs	1198c <__assert_fail@plt+0x1e8>
   11980:	movw	r0, #12424	; 0x3088
   11984:	movt	r0, #1
   11988:	b	119e8 <__assert_fail@plt+0x244>
   1198c:	mov	r0, #0
   11990:	bl	114a4 <sysconf@plt>
   11994:	cmp	r0, #1
   11998:	blt	119bc <__assert_fail@plt+0x218>
   1199c:	cmp	r0, #2048	; 0x800
   119a0:	ble	12a08 <__assert_fail@plt+0x1264>
   119a4:	ldr	r1, [r7, #12]
   119a8:	sub	r0, r0, #2048	; 0x800
   119ac:	cmp	r1, r0
   119b0:	movcc	r0, r1
   119b4:	str	r0, [r7, #12]
   119b8:	b	119c0 <__assert_fail@plt+0x21c>
   119bc:	ldr	r0, [r7, #12]
   119c0:	mov	r1, #0
   119c4:	cmp	r1, r0, lsr #11
   119c8:	beq	129f0 <__assert_fail@plt+0x124c>
   119cc:	movw	r0, #12468	; 0x30b4
   119d0:	movt	r0, #1
   119d4:	str	r0, [r7, #32]
   119d8:	mov	r0, r7
   119dc:	bl	149fc <__assert_fail@plt+0x3258>
   119e0:	movw	r0, #12264	; 0x2fe8
   119e4:	movt	r0, #1
   119e8:	str	r0, [sp, #36]	; 0x24
   119ec:	movw	r0, #10792	; 0x2a28
   119f0:	movw	r5, #44636	; 0xae5c
   119f4:	mov	r4, #0
   119f8:	mov	r8, #1
   119fc:	mov	r1, #0
   11a00:	movt	r0, #1
   11a04:	movt	r5, #1
   11a08:	str	r0, [sp, #48]	; 0x30
   11a0c:	movw	r0, #46847	; 0xb6ff
   11a10:	movt	r0, #1
   11a14:	str	r0, [sp, #40]	; 0x28
   11a18:	mov	r0, #1
   11a1c:	str	r0, [sp, #28]
   11a20:	movw	r2, #38779	; 0x977b
   11a24:	sub	r0, fp, #36	; 0x24
   11a28:	mov	r6, r1
   11a2c:	mov	r1, sl
   11a30:	mov	r3, r5
   11a34:	movt	r2, #1
   11a38:	str	r0, [sp]
   11a3c:	mov	r0, r9
   11a40:	bl	115b8 <getopt_long@plt>
   11a44:	cmp	r0, #82	; 0x52
   11a48:	ble	11ad8 <__assert_fail@plt+0x334>
   11a4c:	sub	r1, r0, #97	; 0x61
   11a50:	cmp	r1, #23
   11a54:	bhi	11c88 <__assert_fail@plt+0x4e4>
   11a58:	add	r0, pc, #0
   11a5c:	ldr	pc, [r0, r1, lsl #2]
   11a60:	andeq	r1, r1, r0, asr #21
   11a64:	muleq	r1, ip, r8
   11a68:	muleq	r1, ip, r8
   11a6c:	muleq	r1, r8, sp
   11a70:	strdeq	r1, [r1], -r4
   11a74:	muleq	r1, ip, r8
   11a78:	muleq	r1, ip, r8
   11a7c:	muleq	r1, r4, r8
   11a80:	andeq	r1, r1, r4, asr #23
   11a84:	muleq	r1, ip, r8
   11a88:	muleq	r1, ip, r8
   11a8c:	strdeq	r1, [r1], -ip
   11a90:	muleq	r1, ip, r8
   11a94:	andeq	r1, r1, r8, lsr #28
   11a98:	andeq	r1, r1, r0, asr #29
   11a9c:	andeq	r1, r1, ip, asr #29
   11aa0:	muleq	r1, ip, r8
   11aa4:	andeq	r1, r1, ip, ror sp
   11aa8:	andeq	r1, r1, ip, ror #29
   11aac:	andeq	r1, r1, ip, lsl #27
   11ab0:	muleq	r1, ip, r8
   11ab4:	andeq	r2, r1, r0, lsl r3
   11ab8:	muleq	r1, ip, r8
   11abc:	andeq	r1, r1, r0, ror sp
   11ac0:	movw	r0, #49624	; 0xc1d8
   11ac4:	mov	r1, r6
   11ac8:	movt	r0, #2
   11acc:	ldr	r0, [r0]
   11ad0:	str	r0, [sp, #40]	; 0x28
   11ad4:	b	11a20 <__assert_fail@plt+0x27c>
   11ad8:	cmp	r0, #72	; 0x48
   11adc:	bgt	11b10 <__assert_fail@plt+0x36c>
   11ae0:	cmn	r0, #1
   11ae4:	beq	12158 <__assert_fail@plt+0x9b4>
   11ae8:	cmp	r0, #48	; 0x30
   11aec:	bne	11cec <__assert_fail@plt+0x548>
   11af0:	movw	r0, #49684	; 0xc214
   11af4:	mov	r1, r6
   11af8:	movt	r0, #2
   11afc:	strb	r4, [r0]
   11b00:	movw	r0, #13692	; 0x357c
   11b04:	movt	r0, #1
   11b08:	str	r0, [sp, #48]	; 0x30
   11b0c:	b	11a20 <__assert_fail@plt+0x27c>
   11b10:	cmp	r0, #73	; 0x49
   11b14:	beq	11bc4 <__assert_fail@plt+0x420>
   11b18:	cmp	r0, #76	; 0x4c
   11b1c:	bne	11d34 <__assert_fail@plt+0x590>
   11b20:	movw	r0, #49624	; 0xc1d8
   11b24:	mov	r1, #76	; 0x4c
   11b28:	mov	r2, #1
   11b2c:	mvn	r3, #0
   11b30:	str	r8, [sp]
   11b34:	movt	r0, #2
   11b38:	ldr	r0, [r0]
   11b3c:	bl	13a10 <__assert_fail@plt+0x226c>
   11b40:	str	r0, [r7, #36]	; 0x24
   11b44:	ldr	r0, [r7, #40]	; 0x28
   11b48:	cmp	r0, #0
   11b4c:	beq	11b90 <__assert_fail@plt+0x3ec>
   11b50:	movw	r1, #40525	; 0x9e4d
   11b54:	mov	r0, #0
   11b58:	mov	r2, #5
   11b5c:	movt	r1, #1
   11b60:	bl	11498 <dcgettext@plt>
   11b64:	mov	r2, r0
   11b68:	movw	r0, #38854	; 0x97c6
   11b6c:	movw	r3, #38831	; 0x97af
   11b70:	mov	r1, #0
   11b74:	movt	r0, #1
   11b78:	movt	r3, #1
   11b7c:	str	r0, [sp]
   11b80:	mov	r0, #0
   11b84:	str	r3, [sp, #4]
   11b88:	bl	11558 <error@plt>
   11b8c:	str	r4, [r7, #40]	; 0x28
   11b90:	ldr	r0, [r7, #24]
   11b94:	mov	r1, r6
   11b98:	cmp	r0, #0
   11b9c:	beq	11a20 <__assert_fail@plt+0x27c>
   11ba0:	movw	r1, #40525	; 0x9e4d
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	movt	r1, #1
   11bb0:	bl	11498 <dcgettext@plt>
   11bb4:	mov	r2, r0
   11bb8:	movw	r0, #38854	; 0x97c6
   11bbc:	movt	r0, #1
   11bc0:	b	12058 <__assert_fail@plt+0x8b4>
   11bc4:	movw	r0, #49624	; 0xc1d8
   11bc8:	movw	r1, #38812	; 0x979c
   11bcc:	movt	r0, #2
   11bd0:	movt	r1, #1
   11bd4:	ldr	r0, [r0]
   11bd8:	cmp	r0, #0
   11bdc:	moveq	r0, r1
   11be0:	str	r0, [r7, #24]
   11be4:	ldr	r0, [r7, #40]	; 0x28
   11be8:	cmp	r0, #0
   11bec:	beq	11c30 <__assert_fail@plt+0x48c>
   11bf0:	movw	r1, #40525	; 0x9e4d
   11bf4:	mov	r0, #0
   11bf8:	mov	r2, #5
   11bfc:	movt	r1, #1
   11c00:	bl	11498 <dcgettext@plt>
   11c04:	mov	r2, r0
   11c08:	movw	r0, #38815	; 0x979f
   11c0c:	movw	r3, #38831	; 0x97af
   11c10:	mov	r1, #0
   11c14:	movt	r0, #1
   11c18:	movt	r3, #1
   11c1c:	str	r0, [sp]
   11c20:	mov	r0, #0
   11c24:	str	r3, [sp, #4]
   11c28:	bl	11558 <error@plt>
   11c2c:	str	r4, [r7, #40]	; 0x28
   11c30:	ldr	r0, [r7, #36]	; 0x24
   11c34:	mov	r1, r6
   11c38:	cmp	r0, #0
   11c3c:	beq	11a20 <__assert_fail@plt+0x27c>
   11c40:	movw	r1, #40525	; 0x9e4d
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	11498 <dcgettext@plt>
   11c54:	mov	r2, r0
   11c58:	movw	r0, #38815	; 0x979f
   11c5c:	movw	r3, #38842	; 0x97ba
   11c60:	mov	r1, #0
   11c64:	movt	r0, #1
   11c68:	movt	r3, #1
   11c6c:	str	r0, [sp]
   11c70:	mov	r0, #0
   11c74:	str	r3, [sp, #4]
   11c78:	bl	11558 <error@plt>
   11c7c:	str	r4, [r7, #36]	; 0x24
   11c80:	mov	r1, r6
   11c84:	b	11a20 <__assert_fail@plt+0x27c>
   11c88:	cmp	r0, #83	; 0x53
   11c8c:	mov	r1, #1
   11c90:	beq	11a20 <__assert_fail@plt+0x27c>
   11c94:	cmp	r0, #256	; 0x100
   11c98:	bne	1289c <__assert_fail@plt+0x10f8>
   11c9c:	movw	r0, #49624	; 0xc1d8
   11ca0:	mov	r4, r5
   11ca4:	mov	r1, #61	; 0x3d
   11ca8:	movt	r0, #2
   11cac:	ldr	r5, [r0]
   11cb0:	mov	r0, r5
   11cb4:	bl	1160c <strchr@plt>
   11cb8:	cmp	r0, #0
   11cbc:	bne	128d0 <__assert_fail@plt+0x112c>
   11cc0:	movw	r0, #49696	; 0xc220
   11cc4:	movt	r0, #2
   11cc8:	str	r5, [r0]
   11ccc:	mov	r0, r5
   11cd0:	bl	11750 <unsetenv@plt>
   11cd4:	mov	r5, r4
   11cd8:	cmp	r0, #0
   11cdc:	mov	r1, r6
   11ce0:	mov	r4, #0
   11ce4:	beq	11a20 <__assert_fail@plt+0x27c>
   11ce8:	b	128f8 <__assert_fail@plt+0x1154>
   11cec:	cmp	r0, #69	; 0x45
   11cf0:	bne	1289c <__assert_fail@plt+0x10f8>
   11cf4:	movw	r0, #49624	; 0xc1d8
   11cf8:	movt	r0, #2
   11cfc:	ldr	r0, [r0]
   11d00:	cmp	r0, #0
   11d04:	beq	11d20 <__assert_fail@plt+0x57c>
   11d08:	ldrb	r1, [r0]
   11d0c:	cmp	r1, #0
   11d10:	beq	11d20 <__assert_fail@plt+0x57c>
   11d14:	movw	r1, #49688	; 0xc218
   11d18:	movt	r1, #2
   11d1c:	b	11d64 <__assert_fail@plt+0x5c0>
   11d20:	movw	r0, #49688	; 0xc218
   11d24:	mov	r1, r6
   11d28:	movt	r0, #2
   11d2c:	str	r4, [r0]
   11d30:	b	11a20 <__assert_fail@plt+0x27c>
   11d34:	cmp	r0, #80	; 0x50
   11d38:	bne	1289c <__assert_fail@plt+0x10f8>
   11d3c:	movw	r0, #49624	; 0xc1d8
   11d40:	mov	r1, #80	; 0x50
   11d44:	mov	r2, #0
   11d48:	mvn	r3, #-2147483648	; 0x80000000
   11d4c:	str	r8, [sp]
   11d50:	movt	r0, #2
   11d54:	ldr	r0, [r0]
   11d58:	bl	13a10 <__assert_fail@plt+0x226c>
   11d5c:	movw	r1, #49504	; 0xc160
   11d60:	movt	r1, #2
   11d64:	str	r0, [r1]
   11d68:	mov	r1, r6
   11d6c:	b	11a20 <__assert_fail@plt+0x27c>
   11d70:	str	r8, [r7]
   11d74:	mov	r1, r6
   11d78:	b	11a20 <__assert_fail@plt+0x27c>
   11d7c:	mov	r0, #0
   11d80:	mov	r1, r6
   11d84:	str	r0, [sp, #28]
   11d88:	b	11a20 <__assert_fail@plt+0x27c>
   11d8c:	movw	r0, #49692	; 0xc21c
   11d90:	movt	r0, #2
   11d94:	b	11ee0 <__assert_fail@plt+0x73c>
   11d98:	movw	r0, #49624	; 0xc1d8
   11d9c:	str	sl, [sp, #44]	; 0x2c
   11da0:	movt	r0, #2
   11da4:	ldr	r4, [r0]
   11da8:	mov	r0, r4
   11dac:	bl	11600 <strlen@plt>
   11db0:	mov	r1, r0
   11db4:	ldrb	r0, [r4]
   11db8:	cmp	r1, #1
   11dbc:	beq	12130 <__assert_fail@plt+0x98c>
   11dc0:	cmp	r0, #92	; 0x5c
   11dc4:	bne	12930 <__assert_fail@plt+0x118c>
   11dc8:	mov	r5, r4
   11dcc:	mov	sl, r7
   11dd0:	ldrb	r7, [r5, #1]!
   11dd4:	cmp	r7, #101	; 0x65
   11dd8:	bgt	11ff8 <__assert_fail@plt+0x854>
   11ddc:	cmp	r7, #92	; 0x5c
   11de0:	beq	12080 <__assert_fail@plt+0x8dc>
   11de4:	cmp	r7, #97	; 0x61
   11de8:	beq	12088 <__assert_fail@plt+0x8e4>
   11dec:	cmp	r7, #98	; 0x62
   11df0:	bne	120a0 <__assert_fail@plt+0x8fc>
   11df4:	mov	r0, #8
   11df8:	b	12124 <__assert_fail@plt+0x980>
   11dfc:	movw	r0, #49624	; 0xc1d8
   11e00:	movt	r0, #2
   11e04:	ldr	r0, [r0]
   11e08:	cmp	r0, #0
   11e0c:	beq	11f70 <__assert_fail@plt+0x7cc>
   11e10:	mov	r1, #108	; 0x6c
   11e14:	mov	r2, #1
   11e18:	mvn	r3, #0
   11e1c:	str	r8, [sp]
   11e20:	bl	13a10 <__assert_fail@plt+0x226c>
   11e24:	b	11f74 <__assert_fail@plt+0x7d0>
   11e28:	movw	r0, #49624	; 0xc1d8
   11e2c:	mov	r1, #110	; 0x6e
   11e30:	mov	r2, #1
   11e34:	mvn	r3, #0
   11e38:	str	r8, [sp]
   11e3c:	movt	r0, #2
   11e40:	ldr	r0, [r0]
   11e44:	bl	13a10 <__assert_fail@plt+0x226c>
   11e48:	str	r0, [r7, #40]	; 0x28
   11e4c:	ldr	r0, [r7, #36]	; 0x24
   11e50:	cmp	r0, #0
   11e54:	beq	11e98 <__assert_fail@plt+0x6f4>
   11e58:	movw	r1, #40525	; 0x9e4d
   11e5c:	mov	r0, #0
   11e60:	mov	r2, #5
   11e64:	movt	r1, #1
   11e68:	bl	11498 <dcgettext@plt>
   11e6c:	mov	r2, r0
   11e70:	movw	r0, #38882	; 0x97e2
   11e74:	movw	r3, #38842	; 0x97ba
   11e78:	mov	r1, #0
   11e7c:	movt	r0, #1
   11e80:	movt	r3, #1
   11e84:	str	r0, [sp]
   11e88:	mov	r0, #0
   11e8c:	str	r3, [sp, #4]
   11e90:	bl	11558 <error@plt>
   11e94:	str	r4, [r7, #36]	; 0x24
   11e98:	ldr	r0, [r7, #24]
   11e9c:	mov	r1, r6
   11ea0:	cmp	r0, #0
   11ea4:	beq	11a20 <__assert_fail@plt+0x27c>
   11ea8:	ldr	r0, [r7, #40]	; 0x28
   11eac:	cmp	r0, #1
   11eb0:	bne	12038 <__assert_fail@plt+0x894>
   11eb4:	str	r4, [r7, #40]	; 0x28
   11eb8:	mov	r1, r6
   11ebc:	b	11a20 <__assert_fail@plt+0x27c>
   11ec0:	movw	r0, #49693	; 0xc21d
   11ec4:	movt	r0, #2
   11ec8:	b	11ee0 <__assert_fail@plt+0x73c>
   11ecc:	movw	r0, #49692	; 0xc21c
   11ed0:	movt	r0, #2
   11ed4:	strb	r8, [r0]
   11ed8:	movw	r0, #49694	; 0xc21e
   11edc:	movt	r0, #2
   11ee0:	strb	r8, [r0]
   11ee4:	mov	r1, r6
   11ee8:	b	11a20 <__assert_fail@plt+0x27c>
   11eec:	ldr	r0, [sp, #36]	; 0x24
   11ef0:	mov	r8, r5
   11ef4:	blx	r0
   11ef8:	movw	r0, #49624	; 0xc1d8
   11efc:	ldr	r3, [r7, #4]
   11f00:	mov	r1, #115	; 0x73
   11f04:	mov	r2, #1
   11f08:	str	r4, [sp]
   11f0c:	movt	r0, #2
   11f10:	ldr	r0, [r0]
   11f14:	bl	13a10 <__assert_fail@plt+0x226c>
   11f18:	mov	r5, r0
   11f1c:	ldr	r0, [r7, #4]
   11f20:	cmp	r5, r0
   11f24:	bls	11f5c <__assert_fail@plt+0x7b8>
   11f28:	movw	r1, #38896	; 0x97f0
   11f2c:	mov	r0, #0
   11f30:	mov	r2, #5
   11f34:	movt	r1, #1
   11f38:	bl	11498 <dcgettext@plt>
   11f3c:	mov	r2, r0
   11f40:	ldr	r0, [r7, #4]
   11f44:	mov	r1, #0
   11f48:	mov	r3, r5
   11f4c:	str	r0, [sp]
   11f50:	mov	r0, #0
   11f54:	bl	11558 <error@plt>
   11f58:	ldr	r5, [r7, #4]
   11f5c:	str	r5, [r7, #12]
   11f60:	mov	r5, r8
   11f64:	mov	r1, r6
   11f68:	mov	r8, #1
   11f6c:	b	11a20 <__assert_fail@plt+0x27c>
   11f70:	mov	r0, #1
   11f74:	str	r0, [r7, #36]	; 0x24
   11f78:	ldr	r0, [r7, #40]	; 0x28
   11f7c:	cmp	r0, #0
   11f80:	beq	11fc4 <__assert_fail@plt+0x820>
   11f84:	movw	r1, #40525	; 0x9e4d
   11f88:	mov	r0, #0
   11f8c:	mov	r2, #5
   11f90:	movt	r1, #1
   11f94:	bl	11498 <dcgettext@plt>
   11f98:	mov	r2, r0
   11f9c:	movw	r0, #38867	; 0x97d3
   11fa0:	movw	r3, #38831	; 0x97af
   11fa4:	mov	r1, #0
   11fa8:	movt	r0, #1
   11fac:	movt	r3, #1
   11fb0:	str	r0, [sp]
   11fb4:	mov	r0, #0
   11fb8:	str	r3, [sp, #4]
   11fbc:	bl	11558 <error@plt>
   11fc0:	str	r4, [r7, #40]	; 0x28
   11fc4:	ldr	r0, [r7, #24]
   11fc8:	mov	r1, r6
   11fcc:	cmp	r0, #0
   11fd0:	beq	11a20 <__assert_fail@plt+0x27c>
   11fd4:	movw	r1, #40525	; 0x9e4d
   11fd8:	mov	r0, #0
   11fdc:	mov	r2, #5
   11fe0:	movt	r1, #1
   11fe4:	bl	11498 <dcgettext@plt>
   11fe8:	mov	r2, r0
   11fec:	movw	r0, #38867	; 0x97d3
   11ff0:	movt	r0, #1
   11ff4:	b	12058 <__assert_fail@plt+0x8b4>
   11ff8:	sub	r0, r7, #110	; 0x6e
   11ffc:	cmp	r0, #8
   12000:	bhi	12090 <__assert_fail@plt+0x8ec>
   12004:	add	r1, pc, #0
   12008:	ldr	pc, [r1, r0, lsl #2]
   1200c:	andeq	r2, r1, r0, lsr r0
   12010:	andeq	r2, r1, r0, lsr #1
   12014:	andeq	r2, r1, r0, lsr #1
   12018:	andeq	r2, r1, r0, lsr #1
   1201c:	strheq	r2, [r1], -r8
   12020:	andeq	r2, r1, r0, lsr #1
   12024:	andeq	r2, r1, r0, asr #1
   12028:	andeq	r2, r1, r0, lsr #1
   1202c:	andeq	r2, r1, r8, asr #1
   12030:	mov	r0, #10
   12034:	b	12124 <__assert_fail@plt+0x980>
   12038:	movw	r1, #40525	; 0x9e4d
   1203c:	mov	r0, #0
   12040:	mov	r2, #5
   12044:	movt	r1, #1
   12048:	bl	11498 <dcgettext@plt>
   1204c:	mov	r2, r0
   12050:	movw	r0, #38882	; 0x97e2
   12054:	movt	r0, #1
   12058:	movw	r3, #38857	; 0x97c9
   1205c:	str	r0, [sp]
   12060:	mov	r0, #0
   12064:	mov	r1, #0
   12068:	movt	r3, #1
   1206c:	str	r3, [sp, #4]
   12070:	bl	11558 <error@plt>
   12074:	str	r4, [r7, #24]
   12078:	mov	r1, r6
   1207c:	b	11a20 <__assert_fail@plt+0x27c>
   12080:	mov	r0, #92	; 0x5c
   12084:	b	12124 <__assert_fail@plt+0x980>
   12088:	mov	r0, #7
   1208c:	b	12124 <__assert_fail@plt+0x980>
   12090:	cmp	r7, #102	; 0x66
   12094:	bne	120a0 <__assert_fail@plt+0x8fc>
   12098:	mov	r0, #12
   1209c:	b	12124 <__assert_fail@plt+0x980>
   120a0:	cmp	r7, #120	; 0x78
   120a4:	str	r4, [sp, #48]	; 0x30
   120a8:	bne	120d0 <__assert_fail@plt+0x92c>
   120ac:	add	r5, r4, #2
   120b0:	mov	r4, #16
   120b4:	b	120ec <__assert_fail@plt+0x948>
   120b8:	mov	r0, #13
   120bc:	b	12124 <__assert_fail@plt+0x980>
   120c0:	mov	r0, #9
   120c4:	b	12124 <__assert_fail@plt+0x980>
   120c8:	mov	r0, #11
   120cc:	b	12124 <__assert_fail@plt+0x980>
   120d0:	bl	115c4 <__ctype_b_loc@plt>
   120d4:	ldr	r0, [r0]
   120d8:	mov	r4, #8
   120dc:	add	r0, r0, r7, lsl #1
   120e0:	ldrb	r0, [r0, #1]
   120e4:	tst	r0, #8
   120e8:	beq	12958 <__assert_fail@plt+0x11b4>
   120ec:	bl	11630 <__errno_location@plt>
   120f0:	mov	r1, #0
   120f4:	mov	r2, r4
   120f8:	str	r1, [r0]
   120fc:	str	r1, [sp, #52]	; 0x34
   12100:	mov	r0, r5
   12104:	add	r1, sp, #52	; 0x34
   12108:	bl	115f4 <strtoul@plt>
   1210c:	cmp	r0, #256	; 0x100
   12110:	bcs	12974 <__assert_fail@plt+0x11d0>
   12114:	ldr	r5, [sp, #52]	; 0x34
   12118:	ldrb	r1, [r5]
   1211c:	cmp	r1, #0
   12120:	bne	12988 <__assert_fail@plt+0x11e4>
   12124:	movw	r5, #44636	; 0xae5c
   12128:	mov	r7, sl
   1212c:	movt	r5, #1
   12130:	movw	r1, #49684	; 0xc214
   12134:	ldr	sl, [sp, #44]	; 0x2c
   12138:	mov	r4, #0
   1213c:	movt	r1, #2
   12140:	strb	r0, [r1]
   12144:	movw	r0, #13692	; 0x357c
   12148:	mov	r1, r6
   1214c:	movt	r0, #1
   12150:	str	r0, [sp, #48]	; 0x30
   12154:	b	11a20 <__assert_fail@plt+0x27c>
   12158:	ldr	r1, [sp, #48]	; 0x30
   1215c:	movw	r0, #13692	; 0x357c
   12160:	movt	r0, #1
   12164:	cmp	r1, r0
   12168:	bne	121a4 <__assert_fail@plt+0xa00>
   1216c:	movw	r0, #49688	; 0xc218
   12170:	movt	r0, #2
   12174:	ldr	r0, [r0]
   12178:	cmp	r0, #0
   1217c:	beq	121a4 <__assert_fail@plt+0xa00>
   12180:	movw	r1, #39058	; 0x9892
   12184:	mov	r0, #0
   12188:	mov	r2, #5
   1218c:	movt	r1, #1
   12190:	bl	11498 <dcgettext@plt>
   12194:	mov	r2, r0
   12198:	mov	r0, #0
   1219c:	mov	r1, #0
   121a0:	bl	11558 <error@plt>
   121a4:	ldr	r0, [sp, #36]	; 0x24
   121a8:	blx	r0
   121ac:	ldr	r0, [sp, #32]
   121b0:	ldr	r8, [sp, #40]	; 0x28
   121b4:	cmp	r0, #0
   121b8:	bne	129a8 <__assert_fail@plt+0x1204>
   121bc:	movw	r0, #15204	; 0x3b64
   121c0:	add	r5, sp, #52	; 0x34
   121c4:	movt	r0, #1
   121c8:	add	r4, r5, #4
   121cc:	str	r0, [sp, #52]	; 0x34
   121d0:	mov	r0, r4
   121d4:	bl	116d8 <sigemptyset@plt>
   121d8:	mov	r7, #0
   121dc:	mov	r0, #10
   121e0:	mov	r1, r5
   121e4:	mov	r2, #0
   121e8:	str	r7, [sp, #184]	; 0xb8
   121ec:	bl	11504 <sigaction@plt>
   121f0:	cmp	r0, #0
   121f4:	beq	12224 <__assert_fail@plt+0xa80>
   121f8:	bl	11630 <__errno_location@plt>
   121fc:	movw	r1, #39140	; 0x98e4
   12200:	ldr	r5, [r0]
   12204:	mov	r0, #0
   12208:	mov	r2, #5
   1220c:	movt	r1, #1
   12210:	bl	11498 <dcgettext@plt>
   12214:	mov	r2, r0
   12218:	mov	r0, #0
   1221c:	mov	r1, r5
   12220:	bl	11558 <error@plt>
   12224:	movw	r0, #15256	; 0x3b98
   12228:	movt	r0, #1
   1222c:	str	r0, [sp, #52]	; 0x34
   12230:	mov	r0, r4
   12234:	bl	116d8 <sigemptyset@plt>
   12238:	add	r1, sp, #52	; 0x34
   1223c:	mov	r0, #12
   12240:	mov	r2, #0
   12244:	str	r7, [sp, #184]	; 0xb8
   12248:	bl	11504 <sigaction@plt>
   1224c:	cmp	r0, #0
   12250:	beq	12280 <__assert_fail@plt+0xadc>
   12254:	bl	11630 <__errno_location@plt>
   12258:	movw	r1, #39174	; 0x9906
   1225c:	ldr	r4, [r0]
   12260:	mov	r0, #0
   12264:	mov	r2, #5
   12268:	movt	r1, #1
   1226c:	bl	11498 <dcgettext@plt>
   12270:	mov	r2, r0
   12274:	mov	r0, #0
   12278:	mov	r1, r4
   1227c:	bl	11558 <error@plt>
   12280:	movw	r1, #46847	; 0xb6ff
   12284:	mov	r0, r8
   12288:	movt	r1, #1
   1228c:	bl	113fc <strcmp@plt>
   12290:	movw	r4, #49700	; 0xc224
   12294:	movw	r7, #49640	; 0xc1e8
   12298:	cmp	r0, #0
   1229c:	movt	r4, #2
   122a0:	movt	r7, #2
   122a4:	beq	12324 <__assert_fail@plt+0xb80>
   122a8:	movw	r0, #49704	; 0xc228
   122ac:	mov	r1, #1
   122b0:	movt	r0, #2
   122b4:	strb	r1, [r0]
   122b8:	mov	r0, r8
   122bc:	bl	13bbc <__assert_fail@plt+0x2418>
   122c0:	cmp	r0, #0
   122c4:	str	r0, [r4]
   122c8:	bne	12334 <__assert_fail@plt+0xb90>
   122cc:	bl	11630 <__errno_location@plt>
   122d0:	movw	r1, #39208	; 0x9928
   122d4:	ldr	r4, [r0]
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	movt	r1, #1
   122e4:	bl	11498 <dcgettext@plt>
   122e8:	mov	r5, r0
   122ec:	mov	r0, #0
   122f0:	mov	r1, #8
   122f4:	mov	r2, r8
   122f8:	bl	179f8 <__assert_fail@plt+0x6254>
   122fc:	mov	r3, r0
   12300:	mov	r0, #1
   12304:	mov	r1, r4
   12308:	mov	r2, r5
   1230c:	bl	11558 <error@plt>
   12310:	movw	r0, #38629	; 0x96e5
   12314:	movt	r0, #1
   12318:	bl	150f8 <__assert_fail@plt+0x3954>
   1231c:	mov	r0, #0
   12320:	b	126e8 <__assert_fail@plt+0xf44>
   12324:	movw	r0, #49616	; 0xc1d0
   12328:	movt	r0, #2
   1232c:	ldr	r0, [r0]
   12330:	str	r0, [r4]
   12334:	ldr	r0, [r7, #24]
   12338:	cmp	r0, #0
   1233c:	ldreq	r0, [r7, #36]	; 0x24
   12340:	cmpeq	r0, #0
   12344:	beq	12350 <__assert_fail@plt+0xbac>
   12348:	mov	r0, #1
   1234c:	str	r0, [r7]
   12350:	movw	r8, #49600	; 0xc1c0
   12354:	movt	r8, #2
   12358:	ldr	r0, [r8]
   1235c:	cmp	r0, r9
   12360:	bne	1237c <__assert_fail@plt+0xbd8>
   12364:	mov	r0, #0
   12368:	mov	r9, #1
   1236c:	sub	sl, fp, #48	; 0x30
   12370:	str	r0, [r8]
   12374:	sub	r0, fp, #44	; 0x2c
   12378:	str	r0, [fp, #-48]	; 0xffffffd0
   1237c:	cmp	r6, #0
   12380:	bne	126f0 <__assert_fail@plt+0xf4c>
   12384:	ldr	r0, [r7, #12]
   12388:	add	r0, r0, #1
   1238c:	bl	1850c <__assert_fail@plt+0x6d68>
   12390:	movw	r1, #49708	; 0xc22c
   12394:	movt	r1, #2
   12398:	str	r0, [r1]
   1239c:	ldr	r0, [r7, #12]
   123a0:	add	r0, r0, #1
   123a4:	bl	1850c <__assert_fail@plt+0x6d68>
   123a8:	movw	r1, #49712	; 0xc230
   123ac:	movt	r1, #2
   123b0:	str	r0, [r1, #12]
   123b4:	mov	r0, #17
   123b8:	mov	r1, #0
   123bc:	bl	1148c <signal@plt>
   123c0:	ldr	r0, [r7, #24]
   123c4:	cmp	r0, #0
   123c8:	beq	12584 <__assert_fail@plt+0xde0>
   123cc:	lsl	r0, r9, #2
   123d0:	bl	1850c <__assert_fail@plt+0x6d68>
   123d4:	str	r0, [sp, #40]	; 0x28
   123d8:	ldr	r0, [r8]
   123dc:	cmp	r0, r9
   123e0:	bge	12408 <__assert_fail@plt+0xc64>
   123e4:	ldr	r1, [sp, #40]	; 0x28
   123e8:	add	r4, sl, r0, lsl #2
   123ec:	sub	r6, r9, r0
   123f0:	add	r5, r1, r0, lsl #2
   123f4:	ldr	r0, [r4], #4
   123f8:	bl	11600 <strlen@plt>
   123fc:	str	r0, [r5], #4
   12400:	subs	r6, r6, #1
   12404:	bne	123f4 <__assert_fail@plt+0xc50>
   12408:	ldr	r0, [r7, #24]
   1240c:	str	sl, [sp, #44]	; 0x2c
   12410:	str	r9, [sp, #36]	; 0x24
   12414:	bl	11600 <strlen@plt>
   12418:	str	r0, [r7, #20]
   1241c:	ldr	r0, [sp, #48]	; 0x30
   12420:	blx	r0
   12424:	movw	r6, #49712	; 0xc230
   12428:	cmn	r0, #1
   1242c:	movt	r6, #2
   12430:	beq	126cc <__assert_fail@plt+0xf28>
   12434:	mov	r4, r0
   12438:	ldr	r0, [sp, #40]	; 0x28
   1243c:	movw	r5, #49640	; 0xc1e8
   12440:	movw	r9, #49756	; 0xc25c
   12444:	mov	sl, #0
   12448:	movt	r5, #2
   1244c:	movt	r9, #2
   12450:	add	r0, r0, #4
   12454:	str	r0, [sp, #32]
   12458:	ldr	r0, [sp, #44]	; 0x2c
   1245c:	add	r0, r0, #4
   12460:	str	r0, [sp, #28]
   12464:	ldr	r0, [sp, #36]	; 0x24
   12468:	sub	r0, r0, #2
   1246c:	str	r0, [sp, #24]
   12470:	mov	r0, r5
   12474:	mov	r1, r6
   12478:	bl	1489c <__assert_fail@plt+0x30f8>
   1247c:	ldr	r0, [r8]
   12480:	ldr	r1, [sp, #44]	; 0x2c
   12484:	str	sl, [r6, #16]
   12488:	ldr	r2, [r1, r0, lsl #2]
   1248c:	ldr	r1, [sp, #40]	; 0x28
   12490:	str	sl, [sp]
   12494:	str	sl, [sp, #4]
   12498:	ldr	r0, [r1, r0, lsl #2]
   1249c:	ldrb	r1, [r9]
   124a0:	eor	r1, r1, #1
   124a4:	add	r3, r0, #1
   124a8:	mov	r0, r5
   124ac:	str	r1, [sp, #8]
   124b0:	mov	r1, r6
   124b4:	bl	14350 <__assert_fail@plt+0x2bac>
   124b8:	mov	r0, #1
   124bc:	ldr	r2, [sp, #36]	; 0x24
   124c0:	strb	r0, [r9]
   124c4:	ldr	r0, [r8]
   124c8:	add	r1, r0, #1
   124cc:	cmp	r1, r2
   124d0:	bge	12550 <__assert_fail@plt+0xdac>
   124d4:	ldr	r1, [sp, #32]
   124d8:	sub	r4, r4, #1
   124dc:	add	r7, r1, r0, lsl #2
   124e0:	ldr	r1, [sp, #28]
   124e4:	add	r8, r1, r0, lsl #2
   124e8:	ldr	r1, [sp, #24]
   124ec:	sub	r6, r1, r0
   124f0:	mov	r0, #1
   124f4:	mov	r1, #1
   124f8:	ldr	r2, [r8]
   124fc:	ldr	r3, [r7]
   12500:	str	sl, [sp]
   12504:	str	sl, [sp, #4]
   12508:	str	r4, [sp, #12]
   1250c:	bic	r0, r1, r0
   12510:	movw	r1, #49708	; 0xc22c
   12514:	movt	r1, #2
   12518:	str	r0, [sp, #16]
   1251c:	mov	r0, r5
   12520:	ldr	r1, [r1]
   12524:	str	r1, [sp, #8]
   12528:	movw	r1, #49712	; 0xc230
   1252c:	movt	r1, #2
   12530:	bl	141d4 <__assert_fail@plt+0x2a30>
   12534:	cmp	r6, #0
   12538:	beq	12550 <__assert_fail@plt+0xdac>
   1253c:	ldrb	r0, [r9]
   12540:	add	r7, r7, #4
   12544:	add	r8, r8, #4
   12548:	sub	r6, r6, #1
   1254c:	b	124f4 <__assert_fail@plt+0xd50>
   12550:	movw	r6, #49712	; 0xc230
   12554:	mov	r0, r5
   12558:	movt	r6, #2
   1255c:	mov	r1, r6
   12560:	bl	145c0 <__assert_fail@plt+0x2e1c>
   12564:	ldr	r0, [sp, #48]	; 0x30
   12568:	blx	r0
   1256c:	movw	r8, #49600	; 0xc1c0
   12570:	mov	r4, r0
   12574:	cmn	r0, #1
   12578:	movt	r8, #2
   1257c:	bne	12470 <__assert_fail@plt+0xccc>
   12580:	b	126cc <__assert_fail@plt+0xf28>
   12584:	ldr	r0, [r8]
   12588:	cmp	r0, r9
   1258c:	bge	125f4 <__assert_fail@plt+0xe50>
   12590:	movw	r4, #49640	; 0xc1e8
   12594:	movw	r5, #49712	; 0xc230
   12598:	mov	r7, #0
   1259c:	movt	r4, #2
   125a0:	movt	r5, #2
   125a4:	ldr	r6, [sl, r0, lsl #2]
   125a8:	mov	r0, r6
   125ac:	bl	11600 <strlen@plt>
   125b0:	movw	r1, #49756	; 0xc25c
   125b4:	add	r3, r0, #1
   125b8:	mov	r0, r4
   125bc:	mov	r2, r6
   125c0:	str	r7, [sp]
   125c4:	str	r7, [sp, #4]
   125c8:	movt	r1, #2
   125cc:	ldrb	r1, [r1]
   125d0:	eor	r1, r1, #1
   125d4:	str	r1, [sp, #8]
   125d8:	mov	r1, r5
   125dc:	bl	14350 <__assert_fail@plt+0x2bac>
   125e0:	ldr	r0, [r8]
   125e4:	add	r0, r0, #1
   125e8:	cmp	r0, r9
   125ec:	str	r0, [r8]
   125f0:	blt	125a4 <__assert_fail@plt+0xe00>
   125f4:	movw	r0, #49756	; 0xc25c
   125f8:	mov	r1, #1
   125fc:	movw	r7, #49640	; 0xc1e8
   12600:	movt	r0, #2
   12604:	movt	r7, #2
   12608:	strb	r1, [r0]
   1260c:	movw	r0, #49712	; 0xc230
   12610:	movt	r0, #2
   12614:	mov	r2, r0
   12618:	ldr	r0, [r0]
   1261c:	ldr	r1, [r2, #16]
   12620:	str	r0, [r7, #28]
   12624:	ldr	r0, [sp, #48]	; 0x30
   12628:	str	r1, [r2, #20]
   1262c:	blx	r0
   12630:	cmn	r0, #1
   12634:	beq	12680 <__assert_fail@plt+0xedc>
   12638:	movw	r5, #49760	; 0xc260
   1263c:	movw	r4, #49712	; 0xc230
   12640:	mov	r6, #0
   12644:	movt	r5, #2
   12648:	movt	r4, #2
   1264c:	ldr	r1, [r7, #36]	; 0x24
   12650:	ldr	r0, [r5]
   12654:	sub	r1, r1, #1
   12658:	cmp	r1, r0
   1265c:	bcs	12670 <__assert_fail@plt+0xecc>
   12660:	mov	r0, r7
   12664:	mov	r1, r4
   12668:	bl	145c0 <__assert_fail@plt+0x2e1c>
   1266c:	str	r6, [r5]
   12670:	ldr	r0, [sp, #48]	; 0x30
   12674:	blx	r0
   12678:	cmn	r0, #1
   1267c:	bne	1264c <__assert_fail@plt+0xea8>
   12680:	movw	r1, #49712	; 0xc230
   12684:	ldr	r0, [r7, #28]
   12688:	movt	r1, #2
   1268c:	ldr	r1, [r1]
   12690:	cmp	r1, r0
   12694:	bne	126b8 <__assert_fail@plt+0xf14>
   12698:	ldr	r0, [sp, #28]
   1269c:	cmp	r0, #0
   126a0:	beq	126cc <__assert_fail@plt+0xf28>
   126a4:	movw	r0, #49764	; 0xc264
   126a8:	movt	r0, #2
   126ac:	ldrb	r0, [r0]
   126b0:	cmp	r0, #0
   126b4:	bne	126cc <__assert_fail@plt+0xf28>
   126b8:	movw	r0, #49640	; 0xc1e8
   126bc:	movw	r1, #49712	; 0xc230
   126c0:	movt	r0, #2
   126c4:	movt	r1, #2
   126c8:	bl	145c0 <__assert_fail@plt+0x2e1c>
   126cc:	movw	r0, #49768	; 0xc268
   126d0:	movw	r2, #49636	; 0xc1e4
   126d4:	movt	r0, #2
   126d8:	movt	r2, #2
   126dc:	ldr	r1, [r0]
   126e0:	str	r1, [r2]
   126e4:	ldr	r0, [r0]
   126e8:	sub	sp, fp, #28
   126ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f0:	movw	r6, #49608	; 0xc1c8
   126f4:	movw	r1, #39234	; 0x9942
   126f8:	mov	r0, #0
   126fc:	mov	r2, #5
   12700:	movt	r6, #2
   12704:	movt	r1, #1
   12708:	ldr	r4, [r6]
   1270c:	bl	11498 <dcgettext@plt>
   12710:	mov	r5, r0
   12714:	bl	148dc <__assert_fail@plt+0x3138>
   12718:	mov	r2, r0
   1271c:	mov	r0, r4
   12720:	mov	r1, r5
   12724:	mov	r3, #0
   12728:	bl	11624 <fprintf@plt>
   1272c:	movw	r1, #39281	; 0x9971
   12730:	ldr	r4, [r6]
   12734:	mov	r0, #0
   12738:	mov	r2, #5
   1273c:	movt	r1, #1
   12740:	bl	11498 <dcgettext@plt>
   12744:	ldr	r2, [r7, #4]
   12748:	mov	r1, r0
   1274c:	mov	r0, r4
   12750:	mov	r3, #0
   12754:	bl	11624 <fprintf@plt>
   12758:	movw	r1, #39339	; 0x99ab
   1275c:	ldr	r4, [r6]
   12760:	mov	r0, #0
   12764:	mov	r2, #5
   12768:	movt	r1, #1
   1276c:	bl	11498 <dcgettext@plt>
   12770:	ldr	r2, [r7, #8]
   12774:	mov	r1, r0
   12778:	mov	r0, r4
   1277c:	mov	r3, #0
   12780:	bl	11624 <fprintf@plt>
   12784:	movw	r1, #39416	; 0x99f8
   12788:	ldr	r4, [r6]
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	movt	r1, #1
   12798:	bl	11498 <dcgettext@plt>
   1279c:	mov	r5, r0
   127a0:	movw	r0, #49640	; 0xc1e8
   127a4:	movt	r0, #2
   127a8:	ldr	r7, [r0, #4]
   127ac:	bl	148dc <__assert_fail@plt+0x3138>
   127b0:	sub	r2, r7, r0
   127b4:	movw	r7, #49640	; 0xc1e8
   127b8:	mov	r0, r4
   127bc:	mov	r1, r5
   127c0:	mov	r3, #0
   127c4:	movt	r7, #2
   127c8:	bl	11624 <fprintf@plt>
   127cc:	movw	r1, #39471	; 0x9a2f
   127d0:	ldr	r4, [r6]
   127d4:	mov	r0, #0
   127d8:	mov	r2, #5
   127dc:	movt	r1, #1
   127e0:	bl	11498 <dcgettext@plt>
   127e4:	ldr	r2, [r7, #12]
   127e8:	mov	r1, r0
   127ec:	mov	r0, r4
   127f0:	mov	r3, #0
   127f4:	bl	11624 <fprintf@plt>
   127f8:	movw	r1, #39523	; 0x9a63
   127fc:	ldr	r4, [r6]
   12800:	mov	r0, #0
   12804:	mov	r2, #5
   12808:	movt	r1, #1
   1280c:	bl	11498 <dcgettext@plt>
   12810:	mov	r1, r0
   12814:	mov	r0, r4
   12818:	mvn	r2, #-2147483648	; 0x80000000
   1281c:	mov	r3, #0
   12820:	bl	11624 <fprintf@plt>
   12824:	mov	r0, #0
   12828:	bl	11744 <isatty@plt>
   1282c:	cmp	r0, #0
   12830:	beq	12384 <__assert_fail@plt+0xbe0>
   12834:	movw	r1, #39583	; 0x9a9f
   12838:	ldr	r4, [r6]
   1283c:	mov	r0, #0
   12840:	mov	r2, #5
   12844:	movt	r1, #1
   12848:	bl	11498 <dcgettext@plt>
   1284c:	mov	r1, r0
   12850:	mov	r0, r4
   12854:	bl	11624 <fprintf@plt>
   12858:	ldr	r0, [sp, #28]
   1285c:	cmp	r0, #0
   12860:	beq	12384 <__assert_fail@plt+0xbe0>
   12864:	movw	r1, #39756	; 0x9b4c
   12868:	ldr	r4, [r6]
   1286c:	mov	r0, #0
   12870:	mov	r2, #5
   12874:	movt	r1, #1
   12878:	bl	11498 <dcgettext@plt>
   1287c:	mov	r1, r0
   12880:	ldr	r0, [r8]
   12884:	ldr	r2, [sl, r0, lsl #2]
   12888:	mov	r0, r4
   1288c:	bl	11624 <fprintf@plt>
   12890:	b	12384 <__assert_fail@plt+0xbe0>
   12894:	mov	r0, #0
   12898:	bl	136ec <__assert_fail@plt+0x1f48>
   1289c:	mov	r0, #1
   128a0:	bl	136ec <__assert_fail@plt+0x1f48>
   128a4:	bl	11630 <__errno_location@plt>
   128a8:	movw	r1, #38659	; 0x9703
   128ac:	ldr	r4, [r0]
   128b0:	mov	r0, #0
   128b4:	mov	r2, #5
   128b8:	movt	r1, #1
   128bc:	bl	11498 <dcgettext@plt>
   128c0:	mov	r2, r0
   128c4:	mov	r0, #1
   128c8:	mov	r1, r4
   128cc:	bl	11558 <error@plt>
   128d0:	movw	r1, #38961	; 0x9831
   128d4:	mov	r0, #0
   128d8:	mov	r2, #5
   128dc:	movt	r1, #1
   128e0:	bl	11498 <dcgettext@plt>
   128e4:	mov	r2, r0
   128e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   128ec:	mov	r1, #0
   128f0:	ldr	r3, [r4, r0, lsl #4]
   128f4:	b	12928 <__assert_fail@plt+0x1184>
   128f8:	bl	11630 <__errno_location@plt>
   128fc:	movw	r1, #39018	; 0x986a
   12900:	ldr	r4, [r0]
   12904:	mov	r0, #0
   12908:	mov	r2, #5
   1290c:	movt	r1, #1
   12910:	bl	11498 <dcgettext@plt>
   12914:	mov	r2, r0
   12918:	movw	r0, #49696	; 0xc220
   1291c:	mov	r1, r4
   12920:	movt	r0, #2
   12924:	ldr	r3, [r0]
   12928:	mov	r0, #1
   1292c:	bl	11558 <error@plt>
   12930:	movw	r1, #40037	; 0x9c65
   12934:	mov	r0, #0
   12938:	mov	r2, #5
   1293c:	movt	r1, #1
   12940:	bl	11498 <dcgettext@plt>
   12944:	mov	r2, r0
   12948:	mov	r0, #1
   1294c:	mov	r1, #0
   12950:	mov	r3, r4
   12954:	bl	11558 <error@plt>
   12958:	movw	r1, #40166	; 0x9ce6
   1295c:	mov	r0, #0
   12960:	mov	r2, #5
   12964:	movt	r1, #1
   12968:	bl	11498 <dcgettext@plt>
   1296c:	mov	r2, r0
   12970:	b	129e0 <__assert_fail@plt+0x123c>
   12974:	cmp	r4, #16
   12978:	bne	129c0 <__assert_fail@plt+0x121c>
   1297c:	movw	r1, #40227	; 0x9d23
   12980:	movt	r1, #1
   12984:	b	129c8 <__assert_fail@plt+0x1224>
   12988:	movw	r1, #40425	; 0x9de9
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	movt	r1, #1
   12998:	bl	11498 <dcgettext@plt>
   1299c:	mov	r2, r0
   129a0:	str	r5, [sp]
   129a4:	b	129e0 <__assert_fail@plt+0x123c>
   129a8:	movw	r0, #39117	; 0x98cd
   129ac:	movw	r1, #38721	; 0x9741
   129b0:	movw	r3, #38729	; 0x9749
   129b4:	movw	r2, #723	; 0x2d3
   129b8:	movt	r0, #1
   129bc:	b	12a1c <__assert_fail@plt+0x1278>
   129c0:	movw	r1, #40326	; 0x9d86
   129c4:	movt	r1, #1
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	bl	11498 <dcgettext@plt>
   129d4:	mov	r2, r0
   129d8:	mov	r0, #255	; 0xff
   129dc:	str	r0, [sp]
   129e0:	ldr	r3, [sp, #48]	; 0x30
   129e4:	mov	r0, #1
   129e8:	mov	r1, #0
   129ec:	bl	11558 <error@plt>
   129f0:	movw	r0, #38752	; 0x9760
   129f4:	movw	r1, #38721	; 0x9741
   129f8:	movw	r3, #38729	; 0x9749
   129fc:	movw	r2, #511	; 0x1ff
   12a00:	movt	r0, #1
   12a04:	b	12a1c <__assert_fail@plt+0x1278>
   12a08:	movw	r0, #38694	; 0x9726
   12a0c:	movw	r1, #38721	; 0x9741
   12a10:	movw	r3, #38729	; 0x9749
   12a14:	movw	r2, #483	; 0x1e3
   12a18:	movt	r0, #1
   12a1c:	movt	r1, #1
   12a20:	movt	r3, #1
   12a24:	bl	117a4 <__assert_fail@plt>
   12a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a2c:	add	fp, sp, #28
   12a30:	sub	sp, sp, #28
   12a34:	movw	r0, #49772	; 0xc26c
   12a38:	mvn	r4, #0
   12a3c:	movt	r0, #2
   12a40:	ldrb	r0, [r0]
   12a44:	cmp	r0, #0
   12a48:	bne	12ee4 <__assert_fail@plt+0x1740>
   12a4c:	movw	r0, #49640	; 0xc1e8
   12a50:	movt	r0, #2
   12a54:	ldr	r4, [r0, #12]
   12a58:	movw	r0, #49708	; 0xc22c
   12a5c:	movt	r0, #2
   12a60:	ldr	r8, [r0]
   12a64:	movw	r0, #49712	; 0xc230
   12a68:	movt	r0, #2
   12a6c:	ldr	r5, [r0, #20]
   12a70:	movw	r0, #49700	; 0xc224
   12a74:	movt	r0, #2
   12a78:	ldr	r0, [r0]
   12a7c:	bl	11780 <getc@plt>
   12a80:	movw	sl, #49688	; 0xc218
   12a84:	cmn	r0, #1
   12a88:	movt	sl, #2
   12a8c:	beq	12d90 <__assert_fail@plt+0x15ec>
   12a90:	movw	r6, #49760	; 0xc260
   12a94:	add	r1, r8, r4
   12a98:	mvn	r2, r5
   12a9c:	mvn	r9, #0
   12aa0:	mov	r4, #0
   12aa4:	mov	r7, #1
   12aa8:	add	r1, r2, r1
   12aac:	movt	r6, #2
   12ab0:	mov	r2, #0
   12ab4:	str	r1, [sp, #16]
   12ab8:	mov	r1, #1
   12abc:	str	r2, [sp, #24]
   12ac0:	str	r1, [sp, #20]
   12ac4:	mov	r5, r9
   12ac8:	mov	r9, r5
   12acc:	movw	r5, #49708	; 0xc22c
   12ad0:	movt	r5, #2
   12ad4:	mov	sl, r9
   12ad8:	mov	r9, r0
   12adc:	cmp	r7, #3
   12ae0:	bhi	12c20 <__assert_fail@plt+0x147c>
   12ae4:	add	r0, pc, #0
   12ae8:	ldr	pc, [r0, r7, lsl #2]
   12aec:	andeq	r2, r1, r8, lsr #22
   12af0:	strdeq	r2, [r1], -ip
   12af4:	ldrdeq	r2, [r1], -r4
   12af8:	andeq	r2, r1, ip, lsl ip
   12afc:	cmp	r9, #127	; 0x7f
   12b00:	bhi	12bc0 <__assert_fail@plt+0x141c>
   12b04:	bl	115c4 <__ctype_b_loc@plt>
   12b08:	sub	r1, r9, #10
   12b0c:	cmp	r1, #4
   12b10:	bcc	12b70 <__assert_fail@plt+0x13cc>
   12b14:	ldr	r0, [r0]
   12b18:	add	r0, r0, r9, lsl #1
   12b1c:	ldrh	r0, [r0]
   12b20:	ands	r0, r0, #1
   12b24:	bne	12b70 <__assert_fail@plt+0x13cc>
   12b28:	cmp	r9, #10
   12b2c:	bne	12b90 <__assert_fail@plt+0x13ec>
   12b30:	cmp	sl, #127	; 0x7f
   12b34:	bhi	12b4c <__assert_fail@plt+0x13a8>
   12b38:	bl	115c4 <__ctype_b_loc@plt>
   12b3c:	ldr	r0, [r0]
   12b40:	ldrb	r0, [r0, sl, lsl #1]
   12b44:	tst	r0, #1
   12b48:	bne	12b58 <__assert_fail@plt+0x13b4>
   12b4c:	ldr	r0, [r6]
   12b50:	add	r0, r0, #1
   12b54:	str	r0, [r6]
   12b58:	ldr	r7, [r5]
   12b5c:	subs	r0, r8, r7
   12b60:	movwne	r0, #1
   12b64:	orr	r0, r4, r0
   12b68:	tst	r0, #1
   12b6c:	bne	12e54 <__assert_fail@plt+0x16b0>
   12b70:	movw	r0, #49700	; 0xc224
   12b74:	movt	r0, #2
   12b78:	ldr	r0, [r0]
   12b7c:	bl	11780 <getc@plt>
   12b80:	mov	r7, #1
   12b84:	cmn	r0, #1
   12b88:	bne	12ad4 <__assert_fail@plt+0x1330>
   12b8c:	b	12da8 <__assert_fail@plt+0x1604>
   12b90:	cmp	r9, #127	; 0x7f
   12b94:	bhi	12bc0 <__assert_fail@plt+0x141c>
   12b98:	movw	r0, #49640	; 0xc1e8
   12b9c:	movt	r0, #2
   12ba0:	ldr	r0, [r0, #24]
   12ba4:	cmp	r0, #0
   12ba8:	bne	12bc0 <__assert_fail@plt+0x141c>
   12bac:	bl	115c4 <__ctype_b_loc@plt>
   12bb0:	ldr	r0, [r0]
   12bb4:	ldrb	r0, [r0, r9, lsl #1]
   12bb8:	tst	r0, #1
   12bbc:	bne	12ca8 <__assert_fail@plt+0x1504>
   12bc0:	mov	r7, #3
   12bc4:	cmp	r9, #92	; 0x5c
   12bc8:	bne	12c0c <__assert_fail@plt+0x1468>
   12bcc:	mov	r5, r9
   12bd0:	b	12bec <__assert_fail@plt+0x1448>
   12bd4:	cmp	r9, #10
   12bd8:	beq	12f5c <__assert_fail@plt+0x17b8>
   12bdc:	ldr	r5, [sp, #24]
   12be0:	mov	r7, #0
   12be4:	cmp	r9, r5
   12be8:	bne	12ca0 <__assert_fail@plt+0x14fc>
   12bec:	movw	r0, #49700	; 0xc224
   12bf0:	movt	r0, #2
   12bf4:	ldr	r0, [r0]
   12bf8:	bl	11780 <getc@plt>
   12bfc:	mov	r4, #1
   12c00:	cmn	r0, #1
   12c04:	bne	12ac8 <__assert_fail@plt+0x1324>
   12c08:	b	12f10 <__assert_fail@plt+0x176c>
   12c0c:	cmp	r9, #34	; 0x22
   12c10:	cmpne	r9, #39	; 0x27
   12c14:	beq	12d5c <__assert_fail@plt+0x15b8>
   12c18:	mov	r4, #1
   12c1c:	mov	r7, #0
   12c20:	cmp	r9, #0
   12c24:	bne	12c70 <__assert_fail@plt+0x14cc>
   12c28:	movw	r0, #49776	; 0xc270
   12c2c:	movt	r0, #2
   12c30:	ldrb	r0, [r0]
   12c34:	cmp	r0, #0
   12c38:	bne	12c70 <__assert_fail@plt+0x14cc>
   12c3c:	movw	r1, #40705	; 0x9f01
   12c40:	mov	r0, #0
   12c44:	mov	r2, #5
   12c48:	movt	r1, #1
   12c4c:	bl	11498 <dcgettext@plt>
   12c50:	mov	r2, r0
   12c54:	mov	r0, #0
   12c58:	mov	r1, #0
   12c5c:	bl	11558 <error@plt>
   12c60:	movw	r1, #49776	; 0xc270
   12c64:	mov	r0, #1
   12c68:	movt	r1, #2
   12c6c:	strb	r0, [r1]
   12c70:	ldr	r0, [sp, #16]
   12c74:	cmp	r8, r0
   12c78:	bcs	12f34 <__assert_fail@plt+0x1790>
   12c7c:	movw	r0, #49700	; 0xc224
   12c80:	strb	r9, [r8], #1
   12c84:	movt	r0, #2
   12c88:	ldr	r0, [r0]
   12c8c:	bl	11780 <getc@plt>
   12c90:	cmn	r0, #1
   12c94:	mov	r5, r9
   12c98:	bne	12ac8 <__assert_fail@plt+0x1324>
   12c9c:	b	12f10 <__assert_fail@plt+0x176c>
   12ca0:	mov	r7, #2
   12ca4:	b	12c20 <__assert_fail@plt+0x147c>
   12ca8:	mov	r0, #0
   12cac:	movw	sl, #49688	; 0xc218
   12cb0:	strb	r0, [r8]
   12cb4:	movt	sl, #2
   12cb8:	ldr	r7, [r5]
   12cbc:	sub	r0, r8, r7
   12cc0:	add	r4, r0, #1
   12cc4:	ldr	r0, [sl]
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cf0 <__assert_fail@plt+0x154c>
   12cd0:	ldrb	r1, [r7]
   12cd4:	ldrb	r2, [r0]
   12cd8:	cmp	r2, r1
   12cdc:	bne	12cf0 <__assert_fail@plt+0x154c>
   12ce0:	mov	r1, r7
   12ce4:	bl	113fc <strcmp@plt>
   12ce8:	cmp	r0, #0
   12cec:	beq	12ef0 <__assert_fail@plt+0x174c>
   12cf0:	movw	r0, #49756	; 0xc25c
   12cf4:	mov	r1, #0
   12cf8:	mov	r2, #0
   12cfc:	mov	r3, r4
   12d00:	movt	r0, #2
   12d04:	str	r1, [sp, #20]
   12d08:	movw	r1, #49712	; 0xc230
   12d0c:	str	r2, [sp]
   12d10:	str	r2, [sp, #4]
   12d14:	mov	r2, r7
   12d18:	movt	r1, #2
   12d1c:	ldrb	r0, [r0]
   12d20:	eor	r0, r0, #1
   12d24:	str	r0, [sp, #8]
   12d28:	movw	r0, #49640	; 0xc1e8
   12d2c:	movt	r0, #2
   12d30:	bl	14350 <__assert_fail@plt+0x2bac>
   12d34:	movw	r0, #49700	; 0xc224
   12d38:	ldr	r8, [r5]
   12d3c:	movt	r0, #2
   12d40:	ldr	r0, [r0]
   12d44:	bl	11780 <getc@plt>
   12d48:	mov	r4, #1
   12d4c:	cmn	r0, #1
   12d50:	mov	r7, #1
   12d54:	bne	12ac4 <__assert_fail@plt+0x1320>
   12d58:	b	12f24 <__assert_fail@plt+0x1780>
   12d5c:	movw	r0, #49700	; 0xc224
   12d60:	movt	r0, #2
   12d64:	ldr	r0, [r0]
   12d68:	bl	11780 <getc@plt>
   12d6c:	ldr	r1, [sp, #20]
   12d70:	movw	sl, #49688	; 0xc218
   12d74:	mov	r4, #1
   12d78:	mov	r7, #2
   12d7c:	cmn	r0, #1
   12d80:	str	r9, [sp, #24]
   12d84:	movt	sl, #2
   12d88:	bne	12ac0 <__assert_fail@plt+0x131c>
   12d8c:	b	12db8 <__assert_fail@plt+0x1614>
   12d90:	mov	r9, #0
   12d94:	mov	r1, #1
   12d98:	mov	r7, #1
   12d9c:	movw	r5, #49708	; 0xc22c
   12da0:	movt	r5, #2
   12da4:	b	12db8 <__assert_fail@plt+0x1614>
   12da8:	ldr	r9, [sp, #24]
   12dac:	ldr	r1, [sp, #20]
   12db0:	movw	sl, #49688	; 0xc218
   12db4:	movt	sl, #2
   12db8:	ldr	r6, [r5]
   12dbc:	movw	r0, #49772	; 0xc26c
   12dc0:	mov	r2, #1
   12dc4:	movt	r0, #2
   12dc8:	strb	r2, [r0]
   12dcc:	cmp	r8, r6
   12dd0:	beq	12e4c <__assert_fail@plt+0x16a8>
   12dd4:	mov	r0, #0
   12dd8:	cmp	r7, #2
   12ddc:	strb	r0, [r8], -r6
   12de0:	beq	12f94 <__assert_fail@plt+0x17f0>
   12de4:	ldr	r0, [sl]
   12de8:	mvn	r1, r1
   12dec:	mvn	r4, #0
   12df0:	clz	r2, r0
   12df4:	lsr	r2, r2, #5
   12df8:	orr	r1, r1, r2
   12dfc:	tst	r1, #1
   12e00:	bne	12e24 <__assert_fail@plt+0x1680>
   12e04:	ldrb	r1, [r6]
   12e08:	ldrb	r2, [r0]
   12e0c:	cmp	r2, r1
   12e10:	bne	12e24 <__assert_fail@plt+0x1680>
   12e14:	mov	r1, r6
   12e18:	bl	113fc <strcmp@plt>
   12e1c:	cmp	r0, #0
   12e20:	beq	12ee4 <__assert_fail@plt+0x1740>
   12e24:	movw	r0, #49640	; 0xc1e8
   12e28:	add	r4, r8, #1
   12e2c:	movt	r0, #2
   12e30:	ldr	r0, [r0, #24]
   12e34:	cmp	r0, #0
   12e38:	bne	12ee4 <__assert_fail@plt+0x1740>
   12e3c:	movw	r0, #49756	; 0xc25c
   12e40:	mov	r1, #0
   12e44:	mov	r2, r6
   12e48:	b	12eb4 <__assert_fail@plt+0x1710>
   12e4c:	mvn	r4, #0
   12e50:	b	12ee4 <__assert_fail@plt+0x1740>
   12e54:	mov	r0, #0
   12e58:	strb	r0, [r8], -r7
   12e5c:	movw	r0, #49688	; 0xc218
   12e60:	movt	r0, #2
   12e64:	add	r4, r8, #1
   12e68:	ldr	r0, [r0]
   12e6c:	cmp	r0, #0
   12e70:	beq	12e94 <__assert_fail@plt+0x16f0>
   12e74:	ldrb	r1, [r7]
   12e78:	ldrb	r2, [r0]
   12e7c:	cmp	r2, r1
   12e80:	bne	12e94 <__assert_fail@plt+0x16f0>
   12e84:	mov	r1, r7
   12e88:	bl	113fc <strcmp@plt>
   12e8c:	cmp	r0, #0
   12e90:	beq	12ef0 <__assert_fail@plt+0x174c>
   12e94:	movw	r0, #49640	; 0xc1e8
   12e98:	movt	r0, #2
   12e9c:	ldr	r0, [r0, #24]
   12ea0:	cmp	r0, #0
   12ea4:	bne	12ee4 <__assert_fail@plt+0x1740>
   12ea8:	movw	r0, #49756	; 0xc25c
   12eac:	mov	r1, #0
   12eb0:	mov	r2, r7
   12eb4:	movt	r0, #2
   12eb8:	str	r1, [sp]
   12ebc:	str	r1, [sp, #4]
   12ec0:	movw	r1, #49712	; 0xc230
   12ec4:	movt	r1, #2
   12ec8:	ldrb	r0, [r0]
   12ecc:	eor	r0, r0, #1
   12ed0:	str	r0, [sp, #8]
   12ed4:	movw	r0, #49640	; 0xc1e8
   12ed8:	movt	r0, #2
   12edc:	mov	r3, r4
   12ee0:	bl	14350 <__assert_fail@plt+0x2bac>
   12ee4:	mov	r0, r4
   12ee8:	sub	sp, fp, #28
   12eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ef0:	movw	r1, #49772	; 0xc26c
   12ef4:	mov	r0, #1
   12ef8:	movt	r1, #2
   12efc:	strb	r0, [r1]
   12f00:	ldr	r0, [sp, #20]
   12f04:	tst	r0, #1
   12f08:	mvnne	r4, #0
   12f0c:	b	12ee4 <__assert_fail@plt+0x1740>
   12f10:	ldr	r9, [sp, #24]
   12f14:	ldr	r1, [sp, #20]
   12f18:	movw	sl, #49688	; 0xc218
   12f1c:	movt	sl, #2
   12f20:	b	12d9c <__assert_fail@plt+0x15f8>
   12f24:	ldr	r9, [sp, #24]
   12f28:	mov	r7, #1
   12f2c:	mov	r1, #0
   12f30:	b	12db8 <__assert_fail@plt+0x1614>
   12f34:	bl	13c18 <__assert_fail@plt+0x2474>
   12f38:	movw	r1, #40844	; 0x9f8c
   12f3c:	mov	r0, #0
   12f40:	mov	r2, #5
   12f44:	movt	r1, #1
   12f48:	bl	11498 <dcgettext@plt>
   12f4c:	mov	r2, r0
   12f50:	mov	r0, #1
   12f54:	mov	r1, #0
   12f58:	bl	11558 <error@plt>
   12f5c:	bl	13c18 <__assert_fail@plt+0x2474>
   12f60:	movw	r1, #40603	; 0x9e9b
   12f64:	mov	r0, #0
   12f68:	mov	r2, #5
   12f6c:	movt	r1, #1
   12f70:	bl	11498 <dcgettext@plt>
   12f74:	ldr	r2, [sp, #24]
   12f78:	movw	r1, #40698	; 0x9efa
   12f7c:	mov	r4, r0
   12f80:	movw	r0, #40691	; 0x9ef3
   12f84:	movt	r0, #1
   12f88:	movt	r1, #1
   12f8c:	cmp	r2, #34	; 0x22
   12f90:	b	12fc4 <__assert_fail@plt+0x1820>
   12f94:	bl	13c18 <__assert_fail@plt+0x2474>
   12f98:	movw	r1, #40603	; 0x9e9b
   12f9c:	mov	r0, #0
   12fa0:	mov	r2, #5
   12fa4:	movt	r1, #1
   12fa8:	bl	11498 <dcgettext@plt>
   12fac:	movw	r1, #40698	; 0x9efa
   12fb0:	mov	r4, r0
   12fb4:	movw	r0, #40691	; 0x9ef3
   12fb8:	cmp	r9, #34	; 0x22
   12fbc:	movt	r0, #1
   12fc0:	movt	r1, #1
   12fc4:	moveq	r1, r0
   12fc8:	mov	r0, #0
   12fcc:	mov	r2, #5
   12fd0:	bl	11498 <dcgettext@plt>
   12fd4:	mov	r3, r0
   12fd8:	mov	r0, #1
   12fdc:	mov	r1, #0
   12fe0:	mov	r2, r4
   12fe4:	bl	11558 <error@plt>
   12fe8:	bx	lr
   12fec:	push	{r4, r5, fp, lr}
   12ff0:	add	fp, sp, #8
   12ff4:	bl	115d0 <getpid@plt>
   12ff8:	movw	r1, #49632	; 0xc1e0
   12ffc:	movt	r1, #2
   13000:	ldr	r1, [r1]
   13004:	cmp	r0, r1
   13008:	bne	13060 <__assert_fail@plt+0x18bc>
   1300c:	movw	r4, #49800	; 0xc288
   13010:	movt	r4, #2
   13014:	ldrb	r0, [r4]
   13018:	cmp	r0, #0
   1301c:	popne	{r4, r5, fp, pc}
   13020:	mov	r0, #1
   13024:	mov	r1, #0
   13028:	mov	r5, #0
   1302c:	strb	r0, [r4]
   13030:	mov	r0, #1
   13034:	bl	13c7c <__assert_fail@plt+0x24d8>
   13038:	movw	r0, #49636	; 0xc1e4
   1303c:	strb	r5, [r4]
   13040:	movt	r0, #2
   13044:	ldr	r1, [r0]
   13048:	movw	r0, #49768	; 0xc268
   1304c:	movt	r0, #2
   13050:	ldr	r2, [r0]
   13054:	cmp	r1, r2
   13058:	bne	13080 <__assert_fail@plt+0x18dc>
   1305c:	pop	{r4, r5, fp, pc}
   13060:	movw	r0, #41593	; 0xa279
   13064:	movw	r1, #38721	; 0x9741
   13068:	movw	r3, #41613	; 0xa28d
   1306c:	movw	r2, #1605	; 0x645
   13070:	movt	r0, #1
   13074:	movt	r1, #1
   13078:	movt	r3, #1
   1307c:	bl	117a4 <__assert_fail@plt>
   13080:	ldr	r0, [r0]
   13084:	bl	1145c <_exit@plt>
   13088:	push	{fp, lr}
   1308c:	mov	fp, sp
   13090:	movw	r1, #39868	; 0x9bbc
   13094:	mov	r0, #0
   13098:	mov	r2, #5
   1309c:	movt	r1, #1
   130a0:	bl	11498 <dcgettext@plt>
   130a4:	mov	r2, r0
   130a8:	mov	r0, #1
   130ac:	mov	r1, #0
   130b0:	bl	11558 <error@plt>
   130b4:	push	{r4, r5, r6, r7, fp, lr}
   130b8:	add	fp, sp, #16
   130bc:	sub	sp, sp, #32
   130c0:	movw	r5, #49504	; 0xc160
   130c4:	mov	r4, r3
   130c8:	movt	r5, #2
   130cc:	ldr	r0, [r5]
   130d0:	cmp	r0, #0
   130d4:	beq	13104 <__assert_fail@plt+0x1960>
   130d8:	ldr	r0, [r5]
   130dc:	movw	r6, #49780	; 0xc274
   130e0:	movt	r6, #2
   130e4:	ldr	r1, [r6]
   130e8:	cmp	r1, r0
   130ec:	bcc	13104 <__assert_fail@plt+0x1960>
   130f0:	mov	r0, #0
   130f4:	mov	r1, #1
   130f8:	bl	13c7c <__assert_fail@plt+0x24d8>
   130fc:	ldr	r0, [r5]
   13100:	b	130e4 <__assert_fail@plt+0x1940>
   13104:	movw	r5, #49694	; 0xc21e
   13108:	movt	r5, #2
   1310c:	ldrb	r0, [r5]
   13110:	cmp	r0, #1
   13114:	bne	13138 <__assert_fail@plt+0x1994>
   13118:	mov	r0, #1
   1311c:	mov	r6, #1
   13120:	bl	13f3c <__assert_fail@plt+0x2798>
   13124:	cmp	r0, #0
   13128:	beq	1329c <__assert_fail@plt+0x1af8>
   1312c:	ldrb	r0, [r5]
   13130:	cmp	r0, #0
   13134:	bne	13150 <__assert_fail@plt+0x19ac>
   13138:	movw	r0, #49692	; 0xc21c
   1313c:	movt	r0, #2
   13140:	ldrb	r0, [r0]
   13144:	cmp	r0, #1
   13148:	moveq	r0, #0
   1314c:	bleq	13f3c <__assert_fail@plt+0x2798>
   13150:	mov	r0, #0
   13154:	mov	r1, #0
   13158:	bl	13c7c <__assert_fail@plt+0x24d8>
   1315c:	add	r0, sp, #4
   13160:	bl	18000 <__assert_fail@plt+0x685c>
   13164:	cmp	r0, #0
   13168:	bne	132a8 <__assert_fail@plt+0x1b04>
   1316c:	ldr	r0, [sp, #8]
   13170:	mov	r1, #2
   13174:	mov	r2, #1
   13178:	bl	18e3c <__assert_fail@plt+0x7698>
   1317c:	bl	116e4 <fork@plt>
   13180:	mov	r5, r0
   13184:	cmn	r0, #1
   13188:	ble	13208 <__assert_fail@plt+0x1a64>
   1318c:	cmp	r5, #0
   13190:	beq	132bc <__assert_fail@plt+0x1b18>
   13194:	cmn	r5, #1
   13198:	beq	13398 <__assert_fail@plt+0x1bf4>
   1319c:	ldr	r0, [sp, #8]
   131a0:	bl	1178c <close@plt>
   131a4:	ldr	r0, [sp, #4]
   131a8:	add	r1, sp, #12
   131ac:	mov	r2, #4
   131b0:	bl	17f24 <__assert_fail@plt+0x6780>
   131b4:	cmp	r0, #4
   131b8:	beq	13274 <__assert_fail@plt+0x1ad0>
   131bc:	mov	r4, r0
   131c0:	cmp	r0, #0
   131c4:	beq	1325c <__assert_fail@plt+0x1ab8>
   131c8:	cmn	r4, #1
   131cc:	bne	133c4 <__assert_fail@plt+0x1c20>
   131d0:	ldr	r0, [sp, #4]
   131d4:	bl	1178c <close@plt>
   131d8:	bl	11630 <__errno_location@plt>
   131dc:	movw	r1, #40913	; 0x9fd1
   131e0:	ldr	r4, [r0]
   131e4:	mov	r0, #0
   131e8:	mov	r2, #5
   131ec:	movt	r1, #1
   131f0:	bl	11498 <dcgettext@plt>
   131f4:	mov	r2, r0
   131f8:	mov	r0, #0
   131fc:	mov	r1, r4
   13200:	bl	11558 <error@plt>
   13204:	b	13264 <__assert_fail@plt+0x1ac0>
   13208:	bl	11630 <__errno_location@plt>
   1320c:	mov	r6, r0
   13210:	ldr	r0, [r0]
   13214:	cmp	r0, #11
   13218:	bne	1318c <__assert_fail@plt+0x19e8>
   1321c:	movw	r7, #49780	; 0xc274
   13220:	movt	r7, #2
   13224:	ldr	r0, [r7]
   13228:	cmp	r0, #0
   1322c:	beq	1318c <__assert_fail@plt+0x19e8>
   13230:	mov	r0, #0
   13234:	mov	r1, #1
   13238:	bl	13c7c <__assert_fail@plt+0x24d8>
   1323c:	bl	116e4 <fork@plt>
   13240:	mov	r5, r0
   13244:	cmp	r0, #0
   13248:	bpl	1318c <__assert_fail@plt+0x19e8>
   1324c:	ldr	r0, [r6]
   13250:	cmp	r0, #11
   13254:	beq	13224 <__assert_fail@plt+0x1a80>
   13258:	b	1318c <__assert_fail@plt+0x19e8>
   1325c:	mov	r0, r5
   13260:	bl	140e4 <__assert_fail@plt+0x2940>
   13264:	ldr	r0, [sp, #4]
   13268:	bl	1178c <close@plt>
   1326c:	mov	r6, #1
   13270:	b	1329c <__assert_fail@plt+0x1af8>
   13274:	ldr	r0, [sp, #4]
   13278:	bl	1178c <close@plt>
   1327c:	mov	r1, sp
   13280:	mov	r0, r5
   13284:	mov	r2, #0
   13288:	mov	r6, #0
   1328c:	bl	1151c <waitpid@plt>
   13290:	ldr	r0, [sp, #12]
   13294:	cmp	r0, #7
   13298:	bne	133f4 <__assert_fail@plt+0x1c50>
   1329c:	mov	r0, r6
   132a0:	sub	sp, fp, #16
   132a4:	pop	{r4, r5, r6, r7, fp, pc}
   132a8:	bl	11630 <__errno_location@plt>
   132ac:	ldr	r4, [r0]
   132b0:	movw	r1, #40867	; 0x9fa3
   132b4:	movt	r1, #1
   132b8:	b	133a8 <__assert_fail@plt+0x1c04>
   132bc:	ldr	r0, [sp, #4]
   132c0:	bl	1178c <close@plt>
   132c4:	movw	r0, #49768	; 0xc268
   132c8:	mov	r1, #0
   132cc:	movt	r0, #2
   132d0:	str	r1, [r0]
   132d4:	bl	14fc4 <__assert_fail@plt+0x3820>
   132d8:	cmp	r0, #0
   132dc:	beq	132e4 <__assert_fail@plt+0x1b40>
   132e0:	bl	14fe4 <__assert_fail@plt+0x3840>
   132e4:	mov	r0, #0
   132e8:	bl	140e4 <__assert_fail@plt+0x2940>
   132ec:	movw	r2, #41420	; 0xa1cc
   132f0:	mov	r3, r0
   132f4:	add	r0, sp, #12
   132f8:	mov	r1, #19
   132fc:	movt	r2, #1
   13300:	bl	1163c <snprintf@plt>
   13304:	cmp	r0, #20
   13308:	bcs	13404 <__assert_fail@plt+0x1c60>
   1330c:	movw	r6, #49696	; 0xc220
   13310:	movt	r6, #2
   13314:	ldr	r0, [r6]
   13318:	cmp	r0, #0
   1331c:	beq	13364 <__assert_fail@plt+0x1bc0>
   13320:	add	r1, sp, #12
   13324:	mov	r2, #1
   13328:	bl	11618 <setenv@plt>
   1332c:	cmn	r0, #1
   13330:	bgt	13364 <__assert_fail@plt+0x1bc0>
   13334:	bl	11630 <__errno_location@plt>
   13338:	movw	r1, #41513	; 0xa229
   1333c:	ldr	r5, [r0]
   13340:	mov	r0, #0
   13344:	mov	r2, #5
   13348:	movt	r1, #1
   1334c:	bl	11498 <dcgettext@plt>
   13350:	ldr	r3, [r6]
   13354:	mov	r2, r0
   13358:	mov	r0, #0
   1335c:	mov	r1, r5
   13360:	bl	11558 <error@plt>
   13364:	movw	r1, #49704	; 0xc228
   13368:	movw	r7, #49693	; 0xc21d
   1336c:	movt	r1, #2
   13370:	movt	r7, #2
   13374:	ldrb	r1, [r1]
   13378:	ldrb	r0, [r7]
   1337c:	cmp	r1, #0
   13380:	beq	1342c <__assert_fail@plt+0x1c88>
   13384:	cmp	r0, #0
   13388:	beq	134d4 <__assert_fail@plt+0x1d30>
   1338c:	movw	r5, #41279	; 0xa13f
   13390:	movt	r5, #1
   13394:	b	13444 <__assert_fail@plt+0x1ca0>
   13398:	bl	11630 <__errno_location@plt>
   1339c:	ldr	r4, [r0]
   133a0:	movw	r1, #40901	; 0x9fc5
   133a4:	movt	r1, #1
   133a8:	mov	r0, #0
   133ac:	mov	r2, #5
   133b0:	bl	11498 <dcgettext@plt>
   133b4:	mov	r2, r0
   133b8:	mov	r0, #1
   133bc:	mov	r1, r4
   133c0:	bl	11558 <error@plt>
   133c4:	bl	11630 <__errno_location@plt>
   133c8:	movw	r1, #41003	; 0xa02b
   133cc:	ldr	r5, [r0]
   133d0:	mov	r0, #0
   133d4:	mov	r2, #5
   133d8:	movt	r1, #1
   133dc:	bl	11498 <dcgettext@plt>
   133e0:	mov	r2, r0
   133e4:	mov	r0, #1
   133e8:	mov	r1, r5
   133ec:	mov	r3, r4
   133f0:	bl	11558 <error@plt>
   133f4:	cmp	r0, #2
   133f8:	bne	13424 <__assert_fail@plt+0x1c80>
   133fc:	mov	r0, #127	; 0x7f
   13400:	bl	115dc <exit@plt>
   13404:	movw	r0, #41423	; 0xa1cf
   13408:	movw	r1, #38721	; 0x9741
   1340c:	movw	r3, #41481	; 0xa209
   13410:	movw	r2, #1190	; 0x4a6
   13414:	movt	r0, #1
   13418:	movt	r1, #1
   1341c:	movt	r3, #1
   13420:	bl	117a4 <__assert_fail@plt>
   13424:	mov	r0, #126	; 0x7e
   13428:	bl	115dc <exit@plt>
   1342c:	movw	r1, #41279	; 0xa13f
   13430:	movw	r5, #41355	; 0xa18b
   13434:	cmp	r0, #0
   13438:	movt	r1, #1
   1343c:	movt	r5, #1
   13440:	movne	r5, r1
   13444:	mov	r0, #0
   13448:	bl	1178c <close@plt>
   1344c:	mov	r0, r5
   13450:	mov	r1, #0
   13454:	bl	15754 <__assert_fail@plt+0x3fb0>
   13458:	cmn	r0, #1
   1345c:	bgt	1349c <__assert_fail@plt+0x1cf8>
   13460:	ldrb	r7, [r7]
   13464:	bl	11630 <__errno_location@plt>
   13468:	ldr	r6, [r0]
   1346c:	mov	r0, #0
   13470:	mov	r1, #8
   13474:	mov	r2, r5
   13478:	bl	179f8 <__assert_fail@plt+0x6254>
   1347c:	movw	r2, #46219	; 0xb48b
   13480:	mov	r3, r0
   13484:	cmp	r7, #1
   13488:	movt	r2, #1
   1348c:	bne	134c8 <__assert_fail@plt+0x1d24>
   13490:	mov	r0, #1
   13494:	mov	r1, r6
   13498:	bl	11558 <error@plt>
   1349c:	mov	r6, r0
   134a0:	cmp	r0, #0
   134a4:	beq	134d4 <__assert_fail@plt+0x1d30>
   134a8:	mov	r0, r6
   134ac:	mov	r1, #0
   134b0:	bl	114b0 <dup2@plt>
   134b4:	cmp	r0, #0
   134b8:	bne	13568 <__assert_fail@plt+0x1dc4>
   134bc:	mov	r0, r6
   134c0:	bl	1178c <close@plt>
   134c4:	b	134d4 <__assert_fail@plt+0x1d30>
   134c8:	mov	r0, #0
   134cc:	mov	r1, r6
   134d0:	bl	11558 <error@plt>
   134d4:	mov	r0, r4
   134d8:	bl	14aa8 <__assert_fail@plt+0x3304>
   134dc:	cmp	r0, #0
   134e0:	beq	134f8 <__assert_fail@plt+0x1d54>
   134e4:	bl	11630 <__errno_location@plt>
   134e8:	mov	r5, r0
   134ec:	mov	r0, #7
   134f0:	str	r0, [r5]
   134f4:	b	13518 <__assert_fail@plt+0x1d74>
   134f8:	ldr	r0, [r4]
   134fc:	mov	r1, r4
   13500:	bl	11474 <execvp@plt>
   13504:	bl	11630 <__errno_location@plt>
   13508:	mov	r5, r0
   1350c:	ldr	r0, [r0]
   13510:	cmp	r0, #0
   13514:	beq	13528 <__assert_fail@plt+0x1d84>
   13518:	ldr	r0, [sp, #8]
   1351c:	mov	r1, r5
   13520:	mov	r2, #4
   13524:	bl	1166c <write@plt>
   13528:	ldr	r0, [sp, #8]
   1352c:	bl	1178c <close@plt>
   13530:	ldr	r1, [r5]
   13534:	mov	r0, #126	; 0x7e
   13538:	cmp	r1, #7
   1353c:	beq	13564 <__assert_fail@plt+0x1dc0>
   13540:	ldr	r3, [r4]
   13544:	movw	r2, #46219	; 0xb48b
   13548:	mov	r0, #0
   1354c:	movt	r2, #1
   13550:	bl	11558 <error@plt>
   13554:	ldr	r1, [r5]
   13558:	mov	r0, #126	; 0x7e
   1355c:	cmp	r1, #2
   13560:	movweq	r0, #127	; 0x7f
   13564:	bl	1145c <_exit@plt>
   13568:	bl	11630 <__errno_location@plt>
   1356c:	ldr	r4, [r0]
   13570:	movw	r1, #41365	; 0xa195
   13574:	movt	r1, #1
   13578:	b	133a8 <__assert_fail@plt+0x1c04>
   1357c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13580:	add	fp, sp, #28
   13584:	sub	sp, sp, #12
   13588:	movw	sl, #49777	; 0xc271
   1358c:	mvn	r9, #0
   13590:	movt	sl, #2
   13594:	ldrb	r0, [sl]
   13598:	cmp	r0, #0
   1359c:	bne	136b8 <__assert_fail@plt+0x1f14>
   135a0:	movw	r0, #49640	; 0xc1e8
   135a4:	movw	r7, #49700	; 0xc224
   135a8:	movt	r0, #2
   135ac:	movt	r7, #2
   135b0:	ldr	r5, [r0, #12]
   135b4:	movw	r0, #49708	; 0xc22c
   135b8:	movt	r0, #2
   135bc:	ldr	r6, [r0]
   135c0:	movw	r0, #49712	; 0xc230
   135c4:	movt	r0, #2
   135c8:	ldr	r4, [r0, #20]
   135cc:	ldr	r0, [r7]
   135d0:	bl	11780 <getc@plt>
   135d4:	cmn	r0, #1
   135d8:	beq	13618 <__assert_fail@plt+0x1e74>
   135dc:	movw	r8, #49684	; 0xc214
   135e0:	add	r1, r6, r5
   135e4:	mvn	r2, r4
   135e8:	movt	r8, #2
   135ec:	add	r5, r2, r1
   135f0:	ldrb	r1, [r8]
   135f4:	cmp	r0, r1
   135f8:	beq	13644 <__assert_fail@plt+0x1ea0>
   135fc:	cmp	r6, r5
   13600:	bcs	136c4 <__assert_fail@plt+0x1f20>
   13604:	strb	r0, [r6], #1
   13608:	ldr	r0, [r7]
   1360c:	bl	11780 <getc@plt>
   13610:	cmn	r0, #1
   13614:	bne	135f0 <__assert_fail@plt+0x1e4c>
   13618:	mov	r0, #1
   1361c:	strb	r0, [sl]
   13620:	movw	r0, #49708	; 0xc22c
   13624:	movt	r0, #2
   13628:	ldr	r2, [r0]
   1362c:	cmp	r6, r2
   13630:	beq	136b8 <__assert_fail@plt+0x1f14>
   13634:	mov	r0, #0
   13638:	strb	r0, [r6], -r2
   1363c:	add	r9, r6, #1
   13640:	b	13674 <__assert_fail@plt+0x1ed0>
   13644:	movw	r0, #49760	; 0xc260
   13648:	movt	r0, #2
   1364c:	ldr	r1, [r0]
   13650:	add	r1, r1, #1
   13654:	str	r1, [r0]
   13658:	movw	r1, #49708	; 0xc22c
   1365c:	mov	r0, #0
   13660:	movt	r1, #2
   13664:	strb	r0, [r6]
   13668:	ldr	r2, [r1]
   1366c:	sub	r1, r6, r2
   13670:	add	r9, r1, #1
   13674:	movw	r1, #49640	; 0xc1e8
   13678:	movt	r1, #2
   1367c:	ldr	r1, [r1, #24]
   13680:	cmp	r1, #0
   13684:	bne	136b8 <__assert_fail@plt+0x1f14>
   13688:	movw	r1, #49756	; 0xc25c
   1368c:	str	r0, [sp]
   13690:	mov	r3, r9
   13694:	movt	r1, #2
   13698:	ldrb	r1, [r1]
   1369c:	eor	r1, r1, #1
   136a0:	stmib	sp, {r0, r1}
   136a4:	movw	r0, #49640	; 0xc1e8
   136a8:	movw	r1, #49712	; 0xc230
   136ac:	movt	r0, #2
   136b0:	movt	r1, #2
   136b4:	bl	14350 <__assert_fail@plt+0x2bac>
   136b8:	mov	r0, r9
   136bc:	sub	sp, fp, #28
   136c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c4:	bl	13c18 <__assert_fail@plt+0x2474>
   136c8:	movw	r1, #40844	; 0x9f8c
   136cc:	mov	r0, #0
   136d0:	mov	r2, #5
   136d4:	movt	r1, #1
   136d8:	bl	11498 <dcgettext@plt>
   136dc:	mov	r2, r0
   136e0:	mov	r0, #1
   136e4:	mov	r1, #0
   136e8:	bl	11558 <error@plt>
   136ec:	push	{fp, lr}
   136f0:	mov	fp, sp
   136f4:	cmp	r0, #0
   136f8:	bne	139cc <__assert_fail@plt+0x2228>
   136fc:	movw	r5, #49620	; 0xc1d4
   13700:	movw	r1, #41813	; 0xa355
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	movt	r5, #2
   13710:	movt	r1, #1
   13714:	ldr	r4, [r5]
   13718:	bl	11498 <dcgettext@plt>
   1371c:	movw	r6, #49832	; 0xc2a8
   13720:	mov	r1, r0
   13724:	mov	r0, r4
   13728:	movt	r6, #2
   1372c:	ldr	r2, [r6]
   13730:	bl	11624 <fprintf@plt>
   13734:	movw	r1, #41862	; 0xa386
   13738:	mov	r0, #0
   1373c:	mov	r2, #5
   13740:	movt	r1, #1
   13744:	bl	11498 <dcgettext@plt>
   13748:	ldr	r1, [r5]
   1374c:	bl	1175c <fputs@plt>
   13750:	movw	r1, #41940	; 0xa3d4
   13754:	mov	r0, #0
   13758:	mov	r2, #5
   1375c:	movt	r1, #1
   13760:	bl	11498 <dcgettext@plt>
   13764:	ldr	r1, [r5]
   13768:	bl	1175c <fputs@plt>
   1376c:	movw	r1, #42057	; 0xa449
   13770:	mov	r0, #0
   13774:	mov	r2, #5
   13778:	movt	r1, #1
   1377c:	bl	11498 <dcgettext@plt>
   13780:	ldr	r1, [r5]
   13784:	bl	1175c <fputs@plt>
   13788:	movw	r1, #42269	; 0xa51d
   1378c:	mov	r0, #0
   13790:	mov	r2, #5
   13794:	movt	r1, #1
   13798:	bl	11498 <dcgettext@plt>
   1379c:	ldr	r1, [r5]
   137a0:	bl	1175c <fputs@plt>
   137a4:	movw	r1, #42346	; 0xa56a
   137a8:	mov	r0, #0
   137ac:	mov	r2, #5
   137b0:	movt	r1, #1
   137b4:	bl	11498 <dcgettext@plt>
   137b8:	ldr	r1, [r5]
   137bc:	bl	1175c <fputs@plt>
   137c0:	movw	r1, #42580	; 0xa654
   137c4:	mov	r0, #0
   137c8:	mov	r2, #5
   137cc:	movt	r1, #1
   137d0:	bl	11498 <dcgettext@plt>
   137d4:	ldr	r1, [r5]
   137d8:	bl	1175c <fputs@plt>
   137dc:	movw	r1, #42805	; 0xa735
   137e0:	mov	r0, #0
   137e4:	mov	r2, #5
   137e8:	movt	r1, #1
   137ec:	bl	11498 <dcgettext@plt>
   137f0:	ldr	r1, [r5]
   137f4:	bl	1175c <fputs@plt>
   137f8:	movw	r1, #42954	; 0xa7ca
   137fc:	mov	r0, #0
   13800:	mov	r2, #5
   13804:	movt	r1, #1
   13808:	bl	11498 <dcgettext@plt>
   1380c:	ldr	r1, [r5]
   13810:	bl	1175c <fputs@plt>
   13814:	movw	r1, #43006	; 0xa7fe
   13818:	mov	r0, #0
   1381c:	mov	r2, #5
   13820:	movt	r1, #1
   13824:	bl	11498 <dcgettext@plt>
   13828:	ldr	r1, [r5]
   1382c:	bl	1175c <fputs@plt>
   13830:	movw	r1, #43217	; 0xa8d1
   13834:	mov	r0, #0
   13838:	mov	r2, #5
   1383c:	movt	r1, #1
   13840:	bl	11498 <dcgettext@plt>
   13844:	ldr	r1, [r5]
   13848:	bl	1175c <fputs@plt>
   1384c:	movw	r1, #43343	; 0xa94f
   13850:	mov	r0, #0
   13854:	mov	r2, #5
   13858:	movt	r1, #1
   1385c:	bl	11498 <dcgettext@plt>
   13860:	ldr	r1, [r5]
   13864:	bl	1175c <fputs@plt>
   13868:	movw	r1, #43502	; 0xa9ee
   1386c:	mov	r0, #0
   13870:	mov	r2, #5
   13874:	movt	r1, #1
   13878:	bl	11498 <dcgettext@plt>
   1387c:	ldr	r1, [r5]
   13880:	bl	1175c <fputs@plt>
   13884:	movw	r1, #43582	; 0xaa3e
   13888:	mov	r0, #0
   1388c:	mov	r2, #5
   13890:	movt	r1, #1
   13894:	bl	11498 <dcgettext@plt>
   13898:	ldr	r1, [r5]
   1389c:	bl	1175c <fputs@plt>
   138a0:	movw	r1, #43798	; 0xab16
   138a4:	mov	r0, #0
   138a8:	mov	r2, #5
   138ac:	movt	r1, #1
   138b0:	bl	11498 <dcgettext@plt>
   138b4:	ldr	r1, [r5]
   138b8:	bl	1175c <fputs@plt>
   138bc:	movw	r1, #43872	; 0xab60
   138c0:	mov	r0, #0
   138c4:	mov	r2, #5
   138c8:	movt	r1, #1
   138cc:	bl	11498 <dcgettext@plt>
   138d0:	ldr	r1, [r5]
   138d4:	bl	1175c <fputs@plt>
   138d8:	movw	r1, #43935	; 0xab9f
   138dc:	mov	r0, #0
   138e0:	mov	r2, #5
   138e4:	movt	r1, #1
   138e8:	bl	11498 <dcgettext@plt>
   138ec:	ldr	r1, [r5]
   138f0:	bl	1175c <fputs@plt>
   138f4:	movw	r1, #44015	; 0xabef
   138f8:	mov	r0, #0
   138fc:	mov	r2, #5
   13900:	movt	r1, #1
   13904:	bl	11498 <dcgettext@plt>
   13908:	ldr	r1, [r5]
   1390c:	bl	1175c <fputs@plt>
   13910:	movw	r1, #44228	; 0xacc4
   13914:	mov	r0, #0
   13918:	mov	r2, #5
   1391c:	movt	r1, #1
   13920:	bl	11498 <dcgettext@plt>
   13924:	ldr	r1, [r5]
   13928:	bl	1175c <fputs@plt>
   1392c:	movw	r1, #44302	; 0xad0e
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	movt	r1, #1
   1393c:	bl	11498 <dcgettext@plt>
   13940:	ldr	r1, [r5]
   13944:	bl	1175c <fputs@plt>
   13948:	movw	r1, #44369	; 0xad51
   1394c:	mov	r0, #0
   13950:	mov	r2, #5
   13954:	movt	r1, #1
   13958:	bl	11498 <dcgettext@plt>
   1395c:	ldr	r1, [r5]
   13960:	bl	1175c <fputs@plt>
   13964:	movw	r1, #44438	; 0xad96
   13968:	mov	r0, #0
   1396c:	mov	r2, #5
   13970:	movt	r1, #1
   13974:	bl	11498 <dcgettext@plt>
   13978:	ldr	r1, [r5]
   1397c:	bl	1175c <fputs@plt>
   13980:	movw	r1, #44508	; 0xaddc
   13984:	mov	r0, #0
   13988:	mov	r2, #5
   1398c:	movt	r1, #1
   13990:	bl	11498 <dcgettext@plt>
   13994:	ldr	r1, [r5]
   13998:	bl	1175c <fputs@plt>
   1399c:	movw	r1, #44567	; 0xae17
   139a0:	mov	r0, #0
   139a4:	mov	r2, #5
   139a8:	movt	r1, #1
   139ac:	bl	11498 <dcgettext@plt>
   139b0:	ldr	r1, [r5]
   139b4:	bl	1175c <fputs@plt>
   139b8:	ldr	r0, [r5]
   139bc:	ldr	r1, [r6]
   139c0:	bl	152b4 <__assert_fail@plt+0x3b10>
   139c4:	mov	r0, #0
   139c8:	bl	115dc <exit@plt>
   139cc:	mov	r4, r0
   139d0:	movw	r0, #49608	; 0xc1c8
   139d4:	movw	r1, #41774	; 0xa32e
   139d8:	mov	r2, #5
   139dc:	movt	r0, #2
   139e0:	movt	r1, #1
   139e4:	ldr	r5, [r0]
   139e8:	mov	r0, #0
   139ec:	bl	11498 <dcgettext@plt>
   139f0:	mov	r1, r0
   139f4:	movw	r0, #49832	; 0xc2a8
   139f8:	movt	r0, #2
   139fc:	ldr	r2, [r0]
   13a00:	mov	r0, r5
   13a04:	bl	11624 <fprintf@plt>
   13a08:	mov	r0, r4
   13a0c:	bl	115dc <exit@plt>
   13a10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a14:	add	fp, sp, #24
   13a18:	sub	sp, sp, #16
   13a1c:	mov	r6, r2
   13a20:	mov	r5, r1
   13a24:	add	r1, sp, #12
   13a28:	mov	r2, #10
   13a2c:	mov	r7, r3
   13a30:	mov	r4, r0
   13a34:	bl	11408 <strtol@plt>
   13a38:	ldr	r1, [sp, #12]
   13a3c:	cmp	r1, r4
   13a40:	beq	13b1c <__assert_fail@plt+0x2378>
   13a44:	ldrb	r1, [r1]
   13a48:	cmp	r1, #0
   13a4c:	bne	13b1c <__assert_fail@plt+0x2378>
   13a50:	ldr	r8, [fp, #8]
   13a54:	cmp	r0, r6
   13a58:	blt	13ad0 <__assert_fail@plt+0x232c>
   13a5c:	cmp	r7, #0
   13a60:	bmi	13ac0 <__assert_fail@plt+0x231c>
   13a64:	cmp	r0, r7
   13a68:	mov	r6, r0
   13a6c:	ble	13ac4 <__assert_fail@plt+0x2320>
   13a70:	movw	r0, #49608	; 0xc1c8
   13a74:	movw	r1, #41728	; 0xa300
   13a78:	mov	r2, #5
   13a7c:	movt	r0, #2
   13a80:	movt	r1, #1
   13a84:	ldr	r6, [r0]
   13a88:	mov	r0, #0
   13a8c:	bl	11498 <dcgettext@plt>
   13a90:	mov	r1, r0
   13a94:	movw	r0, #49832	; 0xc2a8
   13a98:	mov	r3, r4
   13a9c:	stm	sp, {r5, r7}
   13aa0:	movt	r0, #2
   13aa4:	ldr	r2, [r0]
   13aa8:	mov	r0, r6
   13aac:	bl	11624 <fprintf@plt>
   13ab0:	cmp	r8, #0
   13ab4:	mov	r6, r7
   13ab8:	beq	13ac4 <__assert_fail@plt+0x2320>
   13abc:	b	13b5c <__assert_fail@plt+0x23b8>
   13ac0:	mov	r6, r0
   13ac4:	mov	r0, r6
   13ac8:	sub	sp, fp, #24
   13acc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ad0:	movw	r0, #49608	; 0xc1c8
   13ad4:	movw	r1, #41682	; 0xa2d2
   13ad8:	mov	r2, #5
   13adc:	movt	r0, #2
   13ae0:	movt	r1, #1
   13ae4:	ldr	r7, [r0]
   13ae8:	mov	r0, #0
   13aec:	bl	11498 <dcgettext@plt>
   13af0:	mov	r1, r0
   13af4:	movw	r0, #49832	; 0xc2a8
   13af8:	mov	r3, r4
   13afc:	stm	sp, {r5, r6}
   13b00:	movt	r0, #2
   13b04:	ldr	r2, [r0]
   13b08:	mov	r0, r7
   13b0c:	bl	11624 <fprintf@plt>
   13b10:	cmp	r8, #0
   13b14:	beq	13ac4 <__assert_fail@plt+0x2320>
   13b18:	b	13b5c <__assert_fail@plt+0x23b8>
   13b1c:	movw	r0, #49608	; 0xc1c8
   13b20:	movw	r1, #41642	; 0xa2aa
   13b24:	mov	r2, #5
   13b28:	movt	r0, #2
   13b2c:	movt	r1, #1
   13b30:	ldr	r6, [r0]
   13b34:	mov	r0, #0
   13b38:	bl	11498 <dcgettext@plt>
   13b3c:	mov	r1, r0
   13b40:	movw	r0, #49832	; 0xc2a8
   13b44:	mov	r3, r4
   13b48:	str	r5, [sp]
   13b4c:	movt	r0, #2
   13b50:	ldr	r2, [r0]
   13b54:	mov	r0, r6
   13b58:	bl	11624 <fprintf@plt>
   13b5c:	mov	r0, #1
   13b60:	bl	136ec <__assert_fail@plt+0x1f48>
   13b64:	movw	r0, #49504	; 0xc160
   13b68:	movt	r0, #2
   13b6c:	ldr	r1, [r0]
   13b70:	cmn	r1, #-2147483647	; 0x80000001
   13b74:	beq	13b84 <__assert_fail@plt+0x23e0>
   13b78:	ldr	r1, [r0]
   13b7c:	add	r1, r1, #1
   13b80:	str	r1, [r0]
   13b84:	movw	r0, #49784	; 0xc278
   13b88:	mov	r1, #1
   13b8c:	movt	r0, #2
   13b90:	str	r1, [r0]
   13b94:	bx	lr
   13b98:	movw	r0, #49504	; 0xc160
   13b9c:	movt	r0, #2
   13ba0:	ldr	r1, [r0]
   13ba4:	cmp	r1, #2
   13ba8:	bxlt	lr
   13bac:	ldr	r1, [r0]
   13bb0:	sub	r1, r1, #1
   13bb4:	str	r1, [r0]
   13bb8:	bx	lr
   13bbc:	push	{r4, r5, r6, sl, fp, lr}
   13bc0:	add	fp, sp, #16
   13bc4:	mov	r1, #0
   13bc8:	mov	r5, #0
   13bcc:	bl	14ebc <__assert_fail@plt+0x3718>
   13bd0:	cmp	r0, #0
   13bd4:	bmi	13c10 <__assert_fail@plt+0x246c>
   13bd8:	movw	r1, #40022	; 0x9c56
   13bdc:	mov	r4, r0
   13be0:	movt	r1, #1
   13be4:	bl	113e4 <fdopen@plt>
   13be8:	mov	r5, r0
   13bec:	cmp	r0, #0
   13bf0:	bne	13c10 <__assert_fail@plt+0x246c>
   13bf4:	bl	11630 <__errno_location@plt>
   13bf8:	ldr	r6, [r0]
   13bfc:	mov	r5, r0
   13c00:	mov	r0, r4
   13c04:	bl	1178c <close@plt>
   13c08:	str	r6, [r5]
   13c0c:	mov	r5, #0
   13c10:	mov	r0, r5
   13c14:	pop	{r4, r5, r6, sl, fp, pc}
   13c18:	movw	r0, #49640	; 0xc1e8
   13c1c:	movt	r0, #2
   13c20:	ldr	r1, [r0, #24]
   13c24:	cmp	r1, #0
   13c28:	bne	13c78 <__assert_fail@plt+0x24d4>
   13c2c:	movw	r1, #49756	; 0xc25c
   13c30:	movt	r1, #2
   13c34:	ldrb	r1, [r1]
   13c38:	cmp	r1, #1
   13c3c:	bne	13c78 <__assert_fail@plt+0x24d4>
   13c40:	movw	r2, #49712	; 0xc230
   13c44:	ldr	r1, [r0, #28]
   13c48:	movt	r2, #2
   13c4c:	ldr	r2, [r2]
   13c50:	cmp	r2, r1
   13c54:	bxeq	lr
   13c58:	ldr	r0, [r0]
   13c5c:	cmp	r0, #0
   13c60:	bne	13c78 <__assert_fail@plt+0x24d4>
   13c64:	movw	r0, #49640	; 0xc1e8
   13c68:	movw	r1, #49712	; 0xc230
   13c6c:	movt	r0, #2
   13c70:	movt	r1, #2
   13c74:	b	145c0 <__assert_fail@plt+0x2e1c>
   13c78:	bx	lr
   13c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c80:	add	fp, sp, #28
   13c84:	sub	sp, sp, #20
   13c88:	mov	r5, r0
   13c8c:	movw	r0, #49780	; 0xc274
   13c90:	movt	r0, #2
   13c94:	ldr	r0, [r0]
   13c98:	cmp	r0, #0
   13c9c:	beq	13f10 <__assert_fail@plt+0x276c>
   13ca0:	movw	sl, #49784	; 0xc278
   13ca4:	movw	r8, #49788	; 0xc27c
   13ca8:	eor	r2, r5, #1
   13cac:	mov	r7, #0
   13cb0:	add	r6, sp, #16
   13cb4:	mov	r3, #0
   13cb8:	str	r1, [sp, #8]
   13cbc:	movt	sl, #2
   13cc0:	movt	r8, #2
   13cc4:	str	r2, [sp, #4]
   13cc8:	cmp	r3, r1
   13ccc:	mov	r0, #0
   13cd0:	str	r7, [sl]
   13cd4:	str	r3, [sp, #12]
   13cd8:	movwcs	r0, #1
   13cdc:	and	r7, r0, r2
   13ce0:	mvn	r0, #0
   13ce4:	mov	r1, r6
   13ce8:	mov	r2, r7
   13cec:	bl	1151c <waitpid@plt>
   13cf0:	cmn	r0, #1
   13cf4:	bne	13d44 <__assert_fail@plt+0x25a0>
   13cf8:	mov	r4, r8
   13cfc:	bl	11630 <__errno_location@plt>
   13d00:	mov	r8, r0
   13d04:	ldr	r9, [r8]
   13d08:	cmp	r9, #4
   13d0c:	bne	13f18 <__assert_fail@plt+0x2774>
   13d10:	ldr	r1, [sl]
   13d14:	cmp	r5, #0
   13d18:	mov	r0, r7
   13d1c:	moveq	r0, #1
   13d20:	cmp	r1, #0
   13d24:	mov	r1, r6
   13d28:	movne	r7, r0
   13d2c:	mvn	r0, #0
   13d30:	mov	r2, r7
   13d34:	bl	1151c <waitpid@plt>
   13d38:	cmn	r0, #1
   13d3c:	beq	13d04 <__assert_fail@plt+0x2560>
   13d40:	mov	r8, r4
   13d44:	cmp	r0, #0
   13d48:	beq	13ed8 <__assert_fail@plt+0x2734>
   13d4c:	ldr	r1, [r8]
   13d50:	cmp	r1, #0
   13d54:	beq	13d84 <__assert_fail@plt+0x25e0>
   13d58:	movw	r2, #49792	; 0xc280
   13d5c:	movt	r2, #2
   13d60:	ldr	r3, [r2]
   13d64:	mov	r2, #0
   13d68:	ldr	r4, [r3, r2, lsl #2]
   13d6c:	cmp	r0, r4
   13d70:	beq	13d88 <__assert_fail@plt+0x25e4>
   13d74:	add	r2, r2, #1
   13d78:	cmp	r2, r1
   13d7c:	bcc	13d68 <__assert_fail@plt+0x25c4>
   13d80:	b	13d88 <__assert_fail@plt+0x25e4>
   13d84:	mov	r2, #0
   13d88:	cmp	r2, r1
   13d8c:	beq	13ce0 <__assert_fail@plt+0x253c>
   13d90:	movw	r0, #49792	; 0xc280
   13d94:	movw	r4, #49780	; 0xc274
   13d98:	mov	r7, #0
   13d9c:	movt	r0, #2
   13da0:	movt	r4, #2
   13da4:	ldr	r0, [r0]
   13da8:	str	r7, [r0, r2, lsl #2]
   13dac:	ldr	r0, [r4]
   13db0:	sub	r0, r0, #1
   13db4:	str	r0, [r4]
   13db8:	ldr	r0, [sp, #16]
   13dbc:	and	r1, r0, #65280	; 0xff00
   13dc0:	cmp	r1, #65280	; 0xff00
   13dc4:	bne	13e00 <__assert_fail@plt+0x265c>
   13dc8:	movw	r1, #41156	; 0xa0c4
   13dcc:	mov	r0, #0
   13dd0:	mov	r2, #5
   13dd4:	movt	r1, #1
   13dd8:	bl	11498 <dcgettext@plt>
   13ddc:	mov	r2, r0
   13de0:	movw	r0, #49712	; 0xc230
   13de4:	mov	r1, #0
   13de8:	movt	r0, #2
   13dec:	ldr	r0, [r0, #4]
   13df0:	ldr	r3, [r0]
   13df4:	mov	r0, #124	; 0x7c
   13df8:	bl	11558 <error@plt>
   13dfc:	ldr	r0, [sp, #16]
   13e00:	uxtb	r1, r0
   13e04:	cmp	r1, #127	; 0x7f
   13e08:	bne	13e4c <__assert_fail@plt+0x26a8>
   13e0c:	movw	r1, #41193	; 0xa0e9
   13e10:	mov	r0, #0
   13e14:	mov	r2, #5
   13e18:	movt	r1, #1
   13e1c:	bl	11498 <dcgettext@plt>
   13e20:	mov	r2, r0
   13e24:	movw	r0, #49712	; 0xc230
   13e28:	mov	r1, #0
   13e2c:	movt	r0, #2
   13e30:	ldr	r0, [r0, #4]
   13e34:	ldr	r3, [r0]
   13e38:	ldrb	r0, [sp, #17]
   13e3c:	str	r0, [sp]
   13e40:	mov	r0, #125	; 0x7d
   13e44:	bl	11558 <error@plt>
   13e48:	ldr	r0, [sp, #16]
   13e4c:	mov	r1, #2130706432	; 0x7f000000
   13e50:	and	r1, r1, r0, lsl #24
   13e54:	add	r1, r1, #16777216	; 0x1000000
   13e58:	cmp	r1, #33554432	; 0x2000000
   13e5c:	blt	13ea4 <__assert_fail@plt+0x2700>
   13e60:	movw	r1, #41218	; 0xa102
   13e64:	mov	r0, #0
   13e68:	mov	r2, #5
   13e6c:	movt	r1, #1
   13e70:	bl	11498 <dcgettext@plt>
   13e74:	mov	r2, r0
   13e78:	movw	r0, #49712	; 0xc230
   13e7c:	mov	r1, #0
   13e80:	movt	r0, #2
   13e84:	ldr	r0, [r0, #4]
   13e88:	ldr	r3, [r0]
   13e8c:	ldr	r0, [sp, #16]
   13e90:	and	r0, r0, #127	; 0x7f
   13e94:	str	r0, [sp]
   13e98:	mov	r0, #125	; 0x7d
   13e9c:	bl	11558 <error@plt>
   13ea0:	ldr	r0, [sp, #16]
   13ea4:	tst	r0, #65280	; 0xff00
   13ea8:	ldr	r3, [sp, #12]
   13eac:	ldr	r2, [sp, #4]
   13eb0:	movwne	r0, #49768	; 0xc268
   13eb4:	movne	r1, #123	; 0x7b
   13eb8:	movtne	r0, #2
   13ebc:	strne	r1, [r0]
   13ec0:	add	r3, r3, #1
   13ec4:	ldr	r0, [r4]
   13ec8:	ldr	r1, [sp, #8]
   13ecc:	cmp	r0, #0
   13ed0:	bne	13cc8 <__assert_fail@plt+0x2524>
   13ed4:	b	13f10 <__assert_fail@plt+0x276c>
   13ed8:	tst	r7, #1
   13edc:	bne	13f10 <__assert_fail@plt+0x276c>
   13ee0:	movw	r1, #41113	; 0xa099
   13ee4:	mov	r0, #0
   13ee8:	mov	r2, #5
   13eec:	movt	r1, #1
   13ef0:	bl	11498 <dcgettext@plt>
   13ef4:	mov	r2, r0
   13ef8:	movw	r0, #49780	; 0xc274
   13efc:	mov	r1, #0
   13f00:	movt	r0, #2
   13f04:	ldr	r3, [r0]
   13f08:	mov	r0, #0
   13f0c:	bl	11558 <error@plt>
   13f10:	sub	sp, fp, #28
   13f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f18:	movw	r1, #41081	; 0xa079
   13f1c:	mov	r0, #0
   13f20:	mov	r2, #5
   13f24:	movt	r1, #1
   13f28:	bl	11498 <dcgettext@plt>
   13f2c:	mov	r2, r0
   13f30:	mov	r0, #1
   13f34:	mov	r1, r9
   13f38:	bl	11558 <error@plt>
   13f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f40:	add	fp, sp, #28
   13f44:	sub	sp, sp, #4
   13f48:	movw	r5, #49712	; 0xc230
   13f4c:	mov	r9, r0
   13f50:	movt	r5, #2
   13f54:	ldr	r0, [r5]
   13f58:	cmp	r0, #1
   13f5c:	bne	14018 <__assert_fail@plt+0x2874>
   13f60:	cmp	r9, #0
   13f64:	beq	13fe4 <__assert_fail@plt+0x2840>
   13f68:	movw	r5, #49796	; 0xc284
   13f6c:	movt	r5, #2
   13f70:	ldr	r0, [r5]
   13f74:	cmp	r0, #0
   13f78:	bne	13f94 <__assert_fail@plt+0x27f0>
   13f7c:	movw	r0, #41279	; 0xa13f
   13f80:	movt	r0, #1
   13f84:	bl	13bbc <__assert_fail@plt+0x2418>
   13f88:	cmp	r0, #0
   13f8c:	str	r0, [r5]
   13f90:	beq	140b8 <__assert_fail@plt+0x2914>
   13f94:	movw	r4, #49608	; 0xc1c8
   13f98:	movw	r0, #41324	; 0xa16c
   13f9c:	movt	r4, #2
   13fa0:	movt	r0, #1
   13fa4:	ldr	r1, [r4]
   13fa8:	bl	1175c <fputs@plt>
   13fac:	ldr	r0, [r4]
   13fb0:	bl	19014 <__assert_fail@plt+0x7870>
   13fb4:	cmp	r0, #0
   13fb8:	bne	14090 <__assert_fail@plt+0x28ec>
   13fbc:	ldr	r0, [r5]
   13fc0:	bl	11780 <getc@plt>
   13fc4:	mov	r4, r0
   13fc8:	cmp	r0, #10
   13fcc:	beq	14000 <__assert_fail@plt+0x285c>
   13fd0:	cmn	r0, #1
   13fd4:	beq	140a4 <__assert_fail@plt+0x2900>
   13fd8:	ldr	r0, [r5]
   13fdc:	bl	11780 <getc@plt>
   13fe0:	b	13fc8 <__assert_fail@plt+0x2824>
   13fe4:	movw	r0, #49608	; 0xc1c8
   13fe8:	movt	r0, #2
   13fec:	ldr	r1, [r0]
   13ff0:	mov	r0, #10
   13ff4:	bl	11720 <putc@plt>
   13ff8:	mov	r0, #0
   13ffc:	b	14010 <__assert_fail@plt+0x286c>
   14000:	orr	r1, r4, #32
   14004:	mov	r0, #1
   14008:	cmp	r1, #121	; 0x79
   1400c:	movne	r0, #0
   14010:	sub	sp, fp, #28
   14014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14018:	movw	sl, #49608	; 0xc1c8
   1401c:	movw	r8, #41246	; 0xa11e
   14020:	mov	r4, #0
   14024:	movt	sl, #2
   14028:	movt	r8, #1
   1402c:	movw	r0, #41939	; 0xa3d3
   14030:	movw	r6, #41251	; 0xa123
   14034:	cmp	r4, #0
   14038:	ldr	r7, [sl]
   1403c:	mov	r1, #3
   14040:	movt	r0, #1
   14044:	movt	r6, #1
   14048:	moveq	r6, r0
   1404c:	ldr	r0, [r5, #4]
   14050:	ldr	r2, [r0, r4, lsl #2]
   14054:	mov	r0, #0
   14058:	bl	179f8 <__assert_fail@plt+0x6254>
   1405c:	mov	r3, r0
   14060:	mov	r0, r7
   14064:	mov	r1, r8
   14068:	mov	r2, r6
   1406c:	bl	11624 <fprintf@plt>
   14070:	cmn	r0, #1
   14074:	ble	14090 <__assert_fail@plt+0x28ec>
   14078:	ldr	r0, [r5]
   1407c:	add	r4, r4, #1
   14080:	sub	r0, r0, #1
   14084:	cmp	r4, r0
   14088:	bcc	1402c <__assert_fail@plt+0x2888>
   1408c:	b	13f60 <__assert_fail@plt+0x27bc>
   14090:	bl	11630 <__errno_location@plt>
   14094:	ldr	r4, [r0]
   14098:	movw	r1, #41253	; 0xa125
   1409c:	movt	r1, #1
   140a0:	b	140c8 <__assert_fail@plt+0x2924>
   140a4:	bl	11630 <__errno_location@plt>
   140a8:	ldr	r4, [r0]
   140ac:	movw	r1, #41329	; 0xa171
   140b0:	movt	r1, #1
   140b4:	b	140c8 <__assert_fail@plt+0x2924>
   140b8:	bl	11630 <__errno_location@plt>
   140bc:	ldr	r4, [r0]
   140c0:	movw	r1, #41288	; 0xa148
   140c4:	movt	r1, #1
   140c8:	mov	r0, #0
   140cc:	mov	r2, #5
   140d0:	bl	11498 <dcgettext@plt>
   140d4:	mov	r2, r0
   140d8:	mov	r0, #1
   140dc:	mov	r1, r4
   140e0:	bl	11558 <error@plt>
   140e4:	push	{r4, r5, r6, r7, fp, lr}
   140e8:	add	fp, sp, #16
   140ec:	movw	r6, #49788	; 0xc27c
   140f0:	mov	r4, r0
   140f4:	movw	r7, #49792	; 0xc280
   140f8:	movt	r6, #2
   140fc:	movt	r7, #2
   14100:	ldr	r0, [r6]
   14104:	cmp	r0, #0
   14108:	beq	1413c <__assert_fail@plt+0x2998>
   1410c:	ldr	r1, [r7]
   14110:	mov	r5, #0
   14114:	ldr	r2, [r1, r5, lsl #2]
   14118:	cmp	r2, #0
   1411c:	beq	1412c <__assert_fail@plt+0x2988>
   14120:	add	r5, r5, #1
   14124:	cmp	r5, r0
   14128:	bcc	14114 <__assert_fail@plt+0x2970>
   1412c:	cmp	r5, r0
   14130:	beq	14140 <__assert_fail@plt+0x299c>
   14134:	ldr	r0, [r7]
   14138:	b	1417c <__assert_fail@plt+0x29d8>
   1413c:	mov	r5, #0
   14140:	ldr	r0, [r7]
   14144:	mov	r1, r6
   14148:	mov	r2, #4
   1414c:	bl	18618 <__assert_fail@plt+0x6e74>
   14150:	ldr	r1, [r6]
   14154:	str	r0, [r7]
   14158:	cmp	r5, r1
   1415c:	bcs	1417c <__assert_fail@plt+0x29d8>
   14160:	mov	r1, #0
   14164:	mov	r2, r5
   14168:	str	r1, [r0, r2, lsl #2]
   1416c:	add	r2, r2, #1
   14170:	ldr	r3, [r6]
   14174:	cmp	r2, r3
   14178:	bcc	14168 <__assert_fail@plt+0x29c4>
   1417c:	ldr	r1, [r0, r5, lsl #2]
   14180:	cmp	r1, #0
   14184:	streq	r4, [r0, r5, lsl #2]
   14188:	movweq	r0, #49764	; 0xc264
   1418c:	moveq	r1, #1
   14190:	movteq	r0, #2
   14194:	strbeq	r1, [r0]
   14198:	movweq	r0, #49780	; 0xc274
   1419c:	movteq	r0, #2
   141a0:	ldreq	r1, [r0]
   141a4:	addeq	r1, r1, #1
   141a8:	streq	r1, [r0]
   141ac:	moveq	r0, r5
   141b0:	popeq	{r4, r5, r6, r7, fp, pc}
   141b4:	movw	r0, #41551	; 0xa24f
   141b8:	movw	r1, #38721	; 0x9741
   141bc:	movw	r3, #41564	; 0xa25c
   141c0:	movw	r2, #1477	; 0x5c5
   141c4:	movt	r0, #1
   141c8:	movt	r1, #1
   141cc:	movt	r3, #1
   141d0:	bl	117a4 <__assert_fail@plt>
   141d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d8:	add	fp, sp, #28
   141dc:	sub	sp, sp, #20
   141e0:	movw	r5, #49804	; 0xc28c
   141e4:	str	r1, [sp, #12]
   141e8:	str	r0, [sp, #16]
   141ec:	ldr	r4, [r0, #12]
   141f0:	ldr	r0, [fp, #20]
   141f4:	ldr	r1, [fp, #12]
   141f8:	mov	r9, r3
   141fc:	mov	r7, r2
   14200:	movt	r5, #2
   14204:	ldr	r6, [r5]
   14208:	cmp	r6, #0
   1420c:	bne	1422c <__assert_fail@plt+0x2a88>
   14210:	mov	r8, r0
   14214:	add	r0, r4, #1
   14218:	bl	1850c <__assert_fail@plt+0x6d68>
   1421c:	ldr	r1, [fp, #12]
   14220:	mov	r6, r0
   14224:	mov	r0, r8
   14228:	str	r6, [r5]
   1422c:	sub	sl, r4, #1
   14230:	add	r5, r0, r1
   14234:	ldr	r0, [sp, #16]
   14238:	ldr	r1, [r0, #24]
   1423c:	mov	r0, r7
   14240:	bl	15790 <__assert_fail@plt+0x3fec>
   14244:	cmp	r0, #0
   14248:	mov	r4, r9
   1424c:	subne	r4, r0, r7
   14250:	cmp	sl, r4
   14254:	bls	142e0 <__assert_fail@plt+0x2b3c>
   14258:	mov	r8, r0
   1425c:	mov	r0, r6
   14260:	mov	r1, r7
   14264:	mov	r2, r4
   14268:	bl	11660 <strncpy@plt>
   1426c:	sub	r9, r9, r4
   14270:	add	r7, r7, r4
   14274:	add	r6, r6, r4
   14278:	sub	sl, sl, r4
   1427c:	cmp	r8, #0
   14280:	beq	142d0 <__assert_fail@plt+0x2b2c>
   14284:	ldr	r4, [fp, #12]
   14288:	ldr	r1, [fp, #8]
   1428c:	cmp	sl, r5
   14290:	bls	142e0 <__assert_fail@plt+0x2b3c>
   14294:	cmp	r1, #0
   14298:	beq	142a8 <__assert_fail@plt+0x2b04>
   1429c:	mov	r0, r6
   142a0:	bl	11534 <strcpy@plt>
   142a4:	add	r6, r6, r4
   142a8:	ldr	r1, [fp, #16]
   142ac:	mov	r0, r6
   142b0:	sub	sl, sl, r5
   142b4:	bl	11534 <strcpy@plt>
   142b8:	ldr	r0, [fp, #20]
   142bc:	add	r6, r6, r0
   142c0:	ldr	r0, [sp, #16]
   142c4:	ldr	r0, [r0, #20]
   142c8:	sub	r9, r9, r0
   142cc:	add	r7, r7, r0
   142d0:	ldrb	r0, [r7]
   142d4:	cmp	r0, #0
   142d8:	bne	14234 <__assert_fail@plt+0x2a90>
   142dc:	b	142ec <__assert_fail@plt+0x2b48>
   142e0:	ldrb	r0, [r7]
   142e4:	cmp	r0, #0
   142e8:	bne	1432c <__assert_fail@plt+0x2b88>
   142ec:	movw	r1, #49804	; 0xc28c
   142f0:	mov	r0, #0
   142f4:	movt	r1, #2
   142f8:	strb	r0, [r6]
   142fc:	str	r0, [sp]
   14300:	str	r0, [sp, #4]
   14304:	ldr	r0, [fp, #24]
   14308:	ldr	r2, [r1]
   1430c:	ldr	r1, [sp, #12]
   14310:	str	r0, [sp, #8]
   14314:	sub	r0, r6, r2
   14318:	add	r3, r0, #1
   1431c:	ldr	r0, [sp, #16]
   14320:	bl	14350 <__assert_fail@plt+0x2bac>
   14324:	sub	sp, fp, #28
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432c:	movw	r1, #44940	; 0xaf8c
   14330:	mov	r0, #0
   14334:	mov	r2, #5
   14338:	movt	r1, #1
   1433c:	bl	11498 <dcgettext@plt>
   14340:	mov	r2, r0
   14344:	mov	r0, #1
   14348:	mov	r1, #0
   1434c:	bl	11558 <error@plt>
   14350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14354:	add	fp, sp, #28
   14358:	sub	sp, sp, #4
   1435c:	cmp	r2, #0
   14360:	beq	14570 <__assert_fail@plt+0x2dcc>
   14364:	movw	sl, #45779	; 0xb2d3
   14368:	mov	r5, r0
   1436c:	ldr	r6, [fp, #16]
   14370:	ldr	r0, [fp, #12]
   14374:	mov	r9, r3
   14378:	mov	r8, r2
   1437c:	mov	r4, r1
   14380:	movt	sl, #1
   14384:	cmp	r2, sl
   14388:	beq	1443c <__assert_fail@plt+0x2c98>
   1438c:	ldr	r1, [r4, #16]
   14390:	add	r0, r0, r9
   14394:	add	r0, r0, r1
   14398:	ldr	r1, [r5, #12]
   1439c:	cmp	r0, r1
   143a0:	bls	143f8 <__assert_fail@plt+0x2c54>
   143a4:	cmp	r6, #0
   143a8:	bne	14590 <__assert_fail@plt+0x2dec>
   143ac:	ldr	r0, [r5, #28]
   143b0:	ldr	r1, [r4]
   143b4:	cmp	r1, r0
   143b8:	beq	14590 <__assert_fail@plt+0x2dec>
   143bc:	ldr	r0, [r5, #24]
   143c0:	cmp	r0, #0
   143c4:	bne	1459c <__assert_fail@plt+0x2df8>
   143c8:	ldr	r0, [r5]
   143cc:	cmp	r0, #0
   143d0:	beq	143e8 <__assert_fail@plt+0x2c44>
   143d4:	ldr	r0, [r5, #36]	; 0x24
   143d8:	cmp	r0, #0
   143dc:	ldreq	r0, [r5, #40]	; 0x28
   143e0:	cmpeq	r0, #0
   143e4:	bne	1459c <__assert_fail@plt+0x2df8>
   143e8:	mov	r0, r5
   143ec:	mov	r1, r4
   143f0:	bl	145c0 <__assert_fail@plt+0x2e1c>
   143f4:	b	14400 <__assert_fail@plt+0x2c5c>
   143f8:	cmp	r6, #0
   143fc:	bne	14420 <__assert_fail@plt+0x2c7c>
   14400:	ldr	r0, [r5, #40]	; 0x28
   14404:	cmp	r0, #0
   14408:	beq	14420 <__assert_fail@plt+0x2c7c>
   1440c:	ldr	r1, [r5, #28]
   14410:	ldr	r2, [r4]
   14414:	sub	r1, r2, r1
   14418:	cmp	r1, r0
   1441c:	beq	14430 <__assert_fail@plt+0x2c8c>
   14420:	ldr	r0, [r5, #16]
   14424:	ldr	r1, [r4]
   14428:	cmp	r1, r0
   1442c:	bne	1443c <__assert_fail@plt+0x2c98>
   14430:	mov	r0, r5
   14434:	mov	r1, r4
   14438:	bl	145c0 <__assert_fail@plt+0x2e1c>
   1443c:	cmp	r6, #0
   14440:	moveq	r0, #1
   14444:	streq	r0, [r4, #28]
   14448:	ldr	r0, [r4]
   1444c:	ldr	r1, [r4, #8]
   14450:	cmp	r0, r1
   14454:	bcc	1448c <__assert_fail@plt+0x2ce8>
   14458:	ldr	r0, [r4, #4]
   1445c:	cmp	r0, #0
   14460:	beq	14478 <__assert_fail@plt+0x2cd4>
   14464:	lsl	r2, r1, #1
   14468:	lsl	r1, r1, #3
   1446c:	str	r2, [r4, #8]
   14470:	bl	18554 <__assert_fail@plt+0x6db0>
   14474:	b	14488 <__assert_fail@plt+0x2ce4>
   14478:	mov	r0, #64	; 0x40
   1447c:	str	r0, [r4, #8]
   14480:	mov	r0, #256	; 0x100
   14484:	bl	1850c <__assert_fail@plt+0x6d68>
   14488:	str	r0, [r4, #4]
   1448c:	cmp	r8, sl
   14490:	beq	14518 <__assert_fail@plt+0x2d74>
   14494:	mov	sl, r6
   14498:	ldr	r1, [fp, #8]
   1449c:	ldm	r4, {r2, r3}
   144a0:	ldr	r6, [r4, #12]
   144a4:	ldr	r0, [r4, #16]
   144a8:	add	r7, r2, #1
   144ac:	str	r7, [r4]
   144b0:	add	r7, r6, r0
   144b4:	cmp	r1, #0
   144b8:	str	r7, [r3, r2, lsl #2]
   144bc:	beq	144dc <__assert_fail@plt+0x2d38>
   144c0:	ldr	r2, [r4, #12]
   144c4:	add	r0, r2, r0
   144c8:	bl	11534 <strcpy@plt>
   144cc:	ldr	r0, [r4, #16]
   144d0:	ldr	r1, [fp, #12]
   144d4:	add	r0, r0, r1
   144d8:	str	r0, [r4, #16]
   144dc:	ldr	r1, [r4, #12]
   144e0:	mov	r6, sl
   144e4:	add	r0, r1, r0
   144e8:	mov	r1, r8
   144ec:	bl	11534 <strcpy@plt>
   144f0:	ldr	r0, [r4, #16]
   144f4:	cmp	sl, #0
   144f8:	add	r0, r0, r9
   144fc:	str	r0, [r4, #16]
   14500:	beq	14530 <__assert_fail@plt+0x2d8c>
   14504:	ldr	r0, [r5, #16]
   14508:	ldr	r1, [r4]
   1450c:	cmp	r1, r0
   14510:	beq	14550 <__assert_fail@plt+0x2dac>
   14514:	b	1455c <__assert_fail@plt+0x2db8>
   14518:	ldm	r4, {r0, r1}
   1451c:	add	r2, r0, #1
   14520:	str	r2, [r4]
   14524:	mov	r2, #0
   14528:	str	r2, [r1, r0, lsl #2]
   1452c:	b	1455c <__assert_fail@plt+0x2db8>
   14530:	ldr	r0, [r5, #40]	; 0x28
   14534:	cmp	r0, #0
   14538:	beq	14504 <__assert_fail@plt+0x2d60>
   1453c:	ldr	r1, [r5, #28]
   14540:	ldr	r2, [r4]
   14544:	sub	r1, r2, r1
   14548:	cmp	r1, r0
   1454c:	bne	14504 <__assert_fail@plt+0x2d60>
   14550:	mov	r0, r5
   14554:	mov	r1, r4
   14558:	bl	145c0 <__assert_fail@plt+0x2e1c>
   1455c:	cmp	r6, #0
   14560:	ldrne	r0, [r4, #16]
   14564:	strne	r0, [r4, #20]
   14568:	sub	sp, fp, #28
   1456c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14570:	movw	r0, #45151	; 0xb05f
   14574:	movw	r1, #44977	; 0xafb1
   14578:	movw	r3, #45163	; 0xb06b
   1457c:	movw	r2, #341	; 0x155
   14580:	movt	r0, #1
   14584:	movt	r1, #1
   14588:	movt	r3, #1
   1458c:	bl	117a4 <__assert_fail@plt>
   14590:	movw	r1, #45281	; 0xb0e1
   14594:	movt	r1, #1
   14598:	b	145a4 <__assert_fail@plt+0x2e00>
   1459c:	movw	r1, #45340	; 0xb11c
   145a0:	movt	r1, #1
   145a4:	mov	r0, #0
   145a8:	mov	r2, #5
   145ac:	bl	11498 <dcgettext@plt>
   145b0:	mov	r2, r0
   145b4:	mov	r0, #1
   145b8:	mov	r1, #0
   145bc:	bl	11558 <error@plt>
   145c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c4:	add	fp, sp, #28
   145c8:	sub	sp, sp, #12
   145cc:	movw	r2, #45779	; 0xb2d3
   145d0:	mov	sl, r0
   145d4:	mov	r0, #0
   145d8:	mov	r3, #0
   145dc:	mov	r8, r1
   145e0:	movt	r2, #1
   145e4:	str	r0, [sp]
   145e8:	str	r0, [sp, #4]
   145ec:	str	r0, [sp, #8]
   145f0:	mov	r0, sl
   145f4:	bl	14350 <__assert_fail@plt+0x2bac>
   145f8:	ldr	r0, [r8]
   145fc:	cmp	r0, #0
   14600:	beq	147b0 <__assert_fail@plt+0x300c>
   14604:	ldr	r1, [r8, #4]
   14608:	add	r1, r1, r0, lsl #2
   1460c:	ldr	r1, [r1, #-4]
   14610:	cmp	r1, #0
   14614:	bne	147c8 <__assert_fail@plt+0x3024>
   14618:	mov	r1, #4
   1461c:	add	r0, r1, r0, lsl #2
   14620:	bl	1850c <__assert_fail@plt+0x6d68>
   14624:	ldr	r1, [r8]
   14628:	mov	r9, r0
   1462c:	ldr	r0, [sl, #28]
   14630:	mov	r5, #0
   14634:	mov	r7, r1
   14638:	cmp	r0, #0
   1463c:	beq	1465c <__assert_fail@plt+0x2eb8>
   14640:	ldr	r2, [r8, #4]
   14644:	mov	r3, r0
   14648:	mov	r6, r9
   1464c:	ldr	r4, [r2], #4
   14650:	subs	r3, r3, #1
   14654:	str	r4, [r6], #4
   14658:	bne	1464c <__assert_fail@plt+0x2ea8>
   1465c:	cmp	r0, r7
   14660:	mov	r4, r0
   14664:	bcs	146a4 <__assert_fail@plt+0x2f00>
   14668:	add	r2, r0, r5
   1466c:	mov	r4, r0
   14670:	cmp	r2, r1
   14674:	bcs	146a4 <__assert_fail@plt+0x2f00>
   14678:	ldr	r2, [r8, #4]
   1467c:	add	r3, r5, #1
   14680:	mov	r4, r0
   14684:	add	r2, r2, r5, lsl #2
   14688:	ldr	r6, [r2, r4, lsl #2]
   1468c:	str	r6, [r9, r4, lsl #2]
   14690:	add	r6, r3, r4
   14694:	add	r4, r4, #1
   14698:	cmp	r6, r1
   1469c:	cmpcc	r4, r7
   146a0:	bcc	14688 <__assert_fail@plt+0x2ee4>
   146a4:	cmp	r4, r0
   146a8:	bcc	1476c <__assert_fail@plt+0x2fc8>
   146ac:	mov	r0, #0
   146b0:	mov	r2, r4
   146b4:	mov	r3, r9
   146b8:	str	r0, [r9, r4, lsl #2]
   146bc:	mov	r0, sl
   146c0:	ldr	r1, [r8, #24]
   146c4:	ldr	r6, [sl, #32]
   146c8:	blx	r6
   146cc:	cmp	r0, #0
   146d0:	beq	146fc <__assert_fail@plt+0x2f58>
   146d4:	mov	r0, sl
   146d8:	mov	r1, r8
   146dc:	mov	r2, #1
   146e0:	mov	r3, r7
   146e4:	bl	147e8 <__assert_fail@plt+0x3044>
   146e8:	mov	r7, r0
   146ec:	ldr	r0, [sl, #28]
   146f0:	add	r1, r4, r5
   146f4:	sub	r5, r1, r0
   146f8:	b	14728 <__assert_fail@plt+0x2f84>
   146fc:	ldr	r0, [sl, #28]
   14700:	add	r0, r0, #1
   14704:	cmp	r7, r0
   14708:	bls	1478c <__assert_fail@plt+0x2fe8>
   1470c:	mov	r0, sl
   14710:	mov	r1, r8
   14714:	mov	r2, #0
   14718:	mov	r3, r7
   1471c:	bl	147e8 <__assert_fail@plt+0x3044>
   14720:	mov	r7, r0
   14724:	ldr	r0, [sl, #28]
   14728:	ldr	r1, [r8]
   1472c:	add	r3, r5, #1
   14730:	sub	r2, r1, r0
   14734:	cmp	r3, r2
   14738:	bcc	14638 <__assert_fail@plt+0x2e94>
   1473c:	mov	r0, r9
   14740:	bl	190b0 <__assert_fail@plt+0x790c>
   14744:	ldr	r0, [sl, #28]
   14748:	mov	r2, #0
   1474c:	mvn	r1, #0
   14750:	str	r2, [r8, #28]
   14754:	str	r1, [r8, #32]
   14758:	str	r0, [r8]
   1475c:	ldr	r0, [r8, #20]
   14760:	str	r0, [r8, #16]
   14764:	sub	sp, fp, #28
   14768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1476c:	movw	r0, #45656	; 0xb258
   14770:	movw	r1, #44977	; 0xafb1
   14774:	movw	r3, #45685	; 0xb275
   14778:	mov	r2, #242	; 0xf2
   1477c:	movt	r0, #1
   14780:	movt	r1, #1
   14784:	movt	r3, #1
   14788:	bl	117a4 <__assert_fail@plt>
   1478c:	movw	r1, #45099	; 0xb02b
   14790:	mov	r0, #0
   14794:	mov	r2, #5
   14798:	movt	r1, #1
   1479c:	bl	11498 <dcgettext@plt>
   147a0:	mov	r2, r0
   147a4:	mov	r0, #1
   147a8:	mov	r1, #0
   147ac:	bl	11558 <error@plt>
   147b0:	movw	r0, #44957	; 0xaf9d
   147b4:	movw	r1, #44977	; 0xafb1
   147b8:	movw	r3, #44988	; 0xafbc
   147bc:	movw	r2, #261	; 0x105
   147c0:	movt	r0, #1
   147c4:	b	147dc <__assert_fail@plt+0x3038>
   147c8:	movw	r0, #45056	; 0xb000
   147cc:	movw	r1, #44977	; 0xafb1
   147d0:	movw	r3, #44988	; 0xafbc
   147d4:	movw	r2, #262	; 0x106
   147d8:	movt	r0, #1
   147dc:	movt	r1, #1
   147e0:	movt	r3, #1
   147e4:	bl	117a4 <__assert_fail@plt>
   147e8:	cmp	r2, #0
   147ec:	beq	14800 <__assert_fail@plt+0x305c>
   147f0:	ldr	ip, [r1, #36]	; 0x24
   147f4:	cmp	ip, r3
   147f8:	strcc	r3, [r1, #36]	; 0x24
   147fc:	b	14810 <__assert_fail@plt+0x306c>
   14800:	ldr	ip, [r1, #40]	; 0x28
   14804:	sub	ip, ip, #1
   14808:	cmp	ip, r3
   1480c:	strcs	r3, [r1, #40]	; 0x28
   14810:	ldr	ip, [r1, #36]	; 0x24
   14814:	cmp	ip, #0
   14818:	beq	14848 <__assert_fail@plt+0x30a4>
   1481c:	ldr	r1, [r1, #40]	; 0x28
   14820:	cmp	r1, ip
   14824:	bls	14848 <__assert_fail@plt+0x30a4>
   14828:	sub	r1, r1, ip
   1482c:	cmp	r2, #0
   14830:	lsr	r1, r1, #1
   14834:	beq	14864 <__assert_fail@plt+0x30c0>
   14838:	cmp	r1, #0
   1483c:	addeq	r1, r3, #1
   14840:	addne	r1, r1, r3
   14844:	b	14870 <__assert_fail@plt+0x30cc>
   14848:	cmp	r2, #0
   1484c:	beq	1485c <__assert_fail@plt+0x30b8>
   14850:	adds	r1, r3, #1
   14854:	mvncs	r1, #0
   14858:	b	14870 <__assert_fail@plt+0x30cc>
   1485c:	lsr	r1, r3, #1
   14860:	b	14870 <__assert_fail@plt+0x30cc>
   14864:	cmp	r1, #0
   14868:	subeq	r1, r3, #1
   1486c:	subne	r1, r3, r1
   14870:	ldr	r0, [r0, #28]
   14874:	cmp	r0, #0
   14878:	beq	1488c <__assert_fail@plt+0x30e8>
   1487c:	add	r0, r0, #1
   14880:	cmp	r1, r0
   14884:	movhi	r0, r1
   14888:	b	14890 <__assert_fail@plt+0x30ec>
   1488c:	mov	r0, r1
   14890:	cmp	r0, #0
   14894:	movweq	r0, #1
   14898:	bx	lr
   1489c:	ldr	r0, [r0, #28]
   148a0:	mov	r3, #0
   148a4:	mvn	r2, #0
   148a8:	str	r3, [r1, #28]
   148ac:	str	r2, [r1, #32]
   148b0:	str	r0, [r1]
   148b4:	ldr	r0, [r1, #20]
   148b8:	str	r0, [r1, #16]
   148bc:	bx	lr
   148c0:	push	{fp, lr}
   148c4:	mov	fp, sp
   148c8:	mov	r0, #0
   148cc:	bl	114a4 <sysconf@plt>
   148d0:	cmp	r0, #0
   148d4:	mvnle	r0, #-2147483648	; 0x80000000
   148d8:	pop	{fp, pc}
   148dc:	push	{r4, r5, fp, lr}
   148e0:	add	fp, sp, #8
   148e4:	movw	r0, #49588	; 0xc1b4
   148e8:	movt	r0, #2
   148ec:	ldr	r1, [r0]
   148f0:	ldr	r0, [r1]
   148f4:	cmp	r0, #0
   148f8:	beq	14920 <__assert_fail@plt+0x317c>
   148fc:	add	r5, r1, #4
   14900:	mov	r4, #0
   14904:	bl	11600 <strlen@plt>
   14908:	add	r0, r4, r0
   1490c:	add	r4, r0, #1
   14910:	ldr	r0, [r5], #4
   14914:	cmp	r0, #0
   14918:	bne	14904 <__assert_fail@plt+0x3160>
   1491c:	b	14924 <__assert_fail@plt+0x3180>
   14920:	mov	r4, #0
   14924:	mov	r0, r4
   14928:	pop	{r4, r5, fp, pc}
   1492c:	push	{r4, r5, r6, r7, fp, lr}
   14930:	add	fp, sp, #16
   14934:	mov	r5, r1
   14938:	mov	r4, r0
   1493c:	bl	148dc <__assert_fail@plt+0x3138>
   14940:	mov	r6, r0
   14944:	mov	r0, #4096	; 0x1000
   14948:	mov	r7, #0
   1494c:	str	r0, [r4, #8]
   14950:	mov	r0, #0
   14954:	bl	114a4 <sysconf@plt>
   14958:	cmp	r0, #0
   1495c:	mov	r1, r0
   14960:	mov	r0, #1
   14964:	str	r7, [r4]
   14968:	mvnle	r1, #-2147483648	; 0x80000000
   1496c:	cmp	r1, r6
   14970:	str	r1, [r4, #4]
   14974:	bcc	149d0 <__assert_fail@plt+0x322c>
   14978:	add	r2, r6, r5
   1497c:	mov	r0, #2
   14980:	cmp	r2, r1
   14984:	bcs	149d0 <__assert_fail@plt+0x322c>
   14988:	sub	r0, r1, r6
   1498c:	sub	r1, r0, r5
   14990:	mvn	r0, #1
   14994:	add	r0, r0, r1, lsr #2
   14998:	str	r1, [r4, #4]
   1499c:	cmp	r0, #0
   149a0:	str	r0, [r4, #16]
   149a4:	beq	149d4 <__assert_fail@plt+0x3230>
   149a8:	movw	r2, #18932	; 0x49f4
   149ac:	mov	r0, #0
   149b0:	movt	r2, #1
   149b4:	str	r0, [r4, #20]
   149b8:	str	r0, [r4, #24]
   149bc:	str	r0, [r4, #28]
   149c0:	str	r2, [r4, #32]
   149c4:	str	r0, [r4, #36]	; 0x24
   149c8:	str	r0, [r4, #40]	; 0x28
   149cc:	str	r1, [r4, #12]
   149d0:	pop	{r4, r5, r6, r7, fp, pc}
   149d4:	movw	r0, #45363	; 0xb133
   149d8:	movw	r1, #44977	; 0xafb1
   149dc:	movw	r3, #45386	; 0xb14a
   149e0:	movw	r2, #518	; 0x206
   149e4:	movt	r0, #1
   149e8:	movt	r1, #1
   149ec:	movt	r3, #1
   149f0:	bl	117a4 <__assert_fail@plt>
   149f4:	mov	r0, #0
   149f8:	bx	lr
   149fc:	ldr	r1, [r0, #4]
   14a00:	mov	r2, #0
   14a04:	cmp	r2, r1, lsr #17
   14a08:	beq	14a18 <__assert_fail@plt+0x3274>
   14a0c:	ldr	r1, [r0, #8]
   14a10:	cmp	r1, #131072	; 0x20000
   14a14:	movls	r1, #131072	; 0x20000
   14a18:	str	r1, [r0, #12]
   14a1c:	bx	lr
   14a20:	push	{r4, r5, r6, sl, fp, lr}
   14a24:	add	fp, sp, #16
   14a28:	mov	r6, #0
   14a2c:	mov	r4, r1
   14a30:	str	r6, [r1, #16]
   14a34:	str	r6, [r1, #36]	; 0x24
   14a38:	str	r6, [r1, #40]	; 0x28
   14a3c:	str	r6, [r1]
   14a40:	str	r6, [r1, #4]
   14a44:	str	r6, [r1, #8]
   14a48:	movw	r1, #63488	; 0xf800
   14a4c:	ldr	r0, [r0, #12]
   14a50:	movt	r1, #32767	; 0x7fff
   14a54:	cmp	r0, r1
   14a58:	bcs	14a88 <__assert_fail@plt+0x32e4>
   14a5c:	add	r0, r0, #1
   14a60:	mov	r5, r2
   14a64:	bl	1850c <__assert_fail@plt+0x6d68>
   14a68:	mvn	r1, #0
   14a6c:	str	r0, [r4, #12]
   14a70:	str	r6, [r4, #16]
   14a74:	str	r6, [r4, #20]
   14a78:	str	r5, [r4, #24]
   14a7c:	str	r6, [r4, #28]
   14a80:	str	r1, [r4, #32]
   14a84:	pop	{r4, r5, r6, sl, fp, pc}
   14a88:	movw	r0, #45461	; 0xb195
   14a8c:	movw	r1, #44977	; 0xafb1
   14a90:	movw	r3, #45496	; 0xb1b8
   14a94:	mov	r2, #572	; 0x23c
   14a98:	movt	r0, #1
   14a9c:	movt	r1, #1
   14aa0:	movt	r3, #1
   14aa4:	bl	117a4 <__assert_fail@plt>
   14aa8:	push	{r4, r5, r6, sl, fp, lr}
   14aac:	add	fp, sp, #16
   14ab0:	mov	r1, r0
   14ab4:	ldr	r0, [r0]
   14ab8:	cmp	r0, #0
   14abc:	beq	14ae8 <__assert_fail@plt+0x3344>
   14ac0:	add	r6, r1, #4
   14ac4:	mov	r5, #0
   14ac8:	mov	r4, #0
   14acc:	bl	11600 <strlen@plt>
   14ad0:	add	r4, r0, r4
   14ad4:	ldr	r0, [r6, r5, lsl #2]
   14ad8:	add	r5, r5, #1
   14adc:	cmp	r0, #0
   14ae0:	bne	14acc <__assert_fail@plt+0x3328>
   14ae4:	b	14af0 <__assert_fail@plt+0x334c>
   14ae8:	mov	r4, #0
   14aec:	mov	r5, #0
   14af0:	movw	r0, #45581	; 0xb20d
   14af4:	mov	r1, r5
   14af8:	movt	r0, #1
   14afc:	bl	14b2c <__assert_fail@plt+0x3388>
   14b00:	mov	r1, r0
   14b04:	mov	r0, #1
   14b08:	cmp	r1, #0
   14b0c:	popne	{r4, r5, r6, sl, fp, pc}
   14b10:	movw	r0, #45618	; 0xb232
   14b14:	mov	r1, r4
   14b18:	movt	r0, #1
   14b1c:	bl	14b2c <__assert_fail@plt+0x3388>
   14b20:	cmp	r0, #0
   14b24:	movwne	r0, #1
   14b28:	pop	{r4, r5, r6, sl, fp, pc}
   14b2c:	push	{r4, r5, fp, lr}
   14b30:	add	fp, sp, #8
   14b34:	sub	sp, sp, #16
   14b38:	mov	r5, r1
   14b3c:	mov	r4, r0
   14b40:	bl	1157c <getenv@plt>
   14b44:	cmp	r0, #0
   14b48:	beq	14b80 <__assert_fail@plt+0x33dc>
   14b4c:	mov	r1, #0
   14b50:	add	r3, sp, #8
   14b54:	mov	r2, #10
   14b58:	str	r1, [sp]
   14b5c:	add	r1, sp, #12
   14b60:	bl	1897c <__assert_fail@plt+0x71d8>
   14b64:	cmp	r0, #0
   14b68:	bne	14b8c <__assert_fail@plt+0x33e8>
   14b6c:	ldr	r1, [sp, #8]
   14b70:	mov	r0, #1
   14b74:	cmp	r1, r5
   14b78:	movcs	r0, #0
   14b7c:	b	14b84 <__assert_fail@plt+0x33e0>
   14b80:	mov	r0, #0
   14b84:	sub	sp, fp, #8
   14b88:	pop	{r4, r5, fp, pc}
   14b8c:	bl	11630 <__errno_location@plt>
   14b90:	movw	r1, #45791	; 0xb2df
   14b94:	ldr	r5, [r0]
   14b98:	mov	r0, #0
   14b9c:	mov	r2, #5
   14ba0:	movt	r1, #1
   14ba4:	bl	11498 <dcgettext@plt>
   14ba8:	mov	r2, r0
   14bac:	mov	r0, #1
   14bb0:	mov	r1, r5
   14bb4:	mov	r3, r4
   14bb8:	bl	11558 <error@plt>
   14bbc:	push	{fp, lr}
   14bc0:	mov	fp, sp
   14bc4:	sub	sp, sp, #16
   14bc8:	bl	14c18 <__assert_fail@plt+0x3474>
   14bcc:	mov	r1, #0
   14bd0:	cmn	r0, #-2147483647	; 0x80000001
   14bd4:	add	r2, sp, #4
   14bd8:	str	r1, [sp, #12]
   14bdc:	str	r1, [sp, #4]
   14be0:	str	r1, [sp, #8]
   14be4:	movw	r1, #20052	; 0x4e54
   14be8:	addne	r0, r0, #1
   14bec:	movt	r1, #1
   14bf0:	bl	14d6c <__assert_fail@plt+0x35c8>
   14bf4:	movw	r2, #49808	; 0xc290
   14bf8:	ldmib	sp, {r0, r1}
   14bfc:	movt	r2, #2
   14c00:	str	r0, [r2]
   14c04:	movw	r0, #49812	; 0xc294
   14c08:	movt	r0, #2
   14c0c:	str	r1, [r0]
   14c10:	mov	sp, fp
   14c14:	pop	{fp, pc}
   14c18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c1c:	add	fp, sp, #24
   14c20:	sub	sp, sp, #16
   14c24:	movw	r0, #46086	; 0xb406
   14c28:	movt	r0, #1
   14c2c:	bl	156bc <__assert_fail@plt+0x3f18>
   14c30:	cmp	r0, #0
   14c34:	beq	14d0c <__assert_fail@plt+0x3568>
   14c38:	mov	r4, r0
   14c3c:	bl	11630 <__errno_location@plt>
   14c40:	mov	r7, #0
   14c44:	mov	r6, r0
   14c48:	str	r7, [r0]
   14c4c:	mov	r0, r4
   14c50:	bl	11708 <readdir64@plt>
   14c54:	cmp	r0, #0
   14c58:	beq	14cc8 <__assert_fail@plt+0x3524>
   14c5c:	mov	r8, #0
   14c60:	mvn	r5, #0
   14c64:	mov	r7, #0
   14c68:	mov	r1, r0
   14c6c:	ldrb	r2, [r1, #19]!
   14c70:	cmp	r2, #46	; 0x2e
   14c74:	bne	14c98 <__assert_fail@plt+0x34f4>
   14c78:	ldrb	r2, [r0, #20]
   14c7c:	cmp	r2, #0
   14c80:	beq	14cb0 <__assert_fail@plt+0x350c>
   14c84:	cmp	r2, #46	; 0x2e
   14c88:	bne	14c98 <__assert_fail@plt+0x34f4>
   14c8c:	ldrb	r0, [r0, #21]
   14c90:	cmp	r0, #0
   14c94:	beq	14cb0 <__assert_fail@plt+0x350c>
   14c98:	mov	r0, r1
   14c9c:	mov	r1, #0
   14ca0:	bl	151a8 <__assert_fail@plt+0x3a04>
   14ca4:	cmp	r0, r5
   14ca8:	mov	r7, #1
   14cac:	movgt	r5, r0
   14cb0:	mov	r0, r4
   14cb4:	str	r8, [r6]
   14cb8:	bl	11708 <readdir64@plt>
   14cbc:	cmp	r0, #0
   14cc0:	bne	14c68 <__assert_fail@plt+0x34c4>
   14cc4:	b	14ccc <__assert_fail@plt+0x3528>
   14cc8:	mvn	r5, #0
   14ccc:	ldr	r6, [r6]
   14cd0:	cmp	r6, #0
   14cd4:	beq	14d48 <__assert_fail@plt+0x35a4>
   14cd8:	movw	r2, #46086	; 0xb406
   14cdc:	mov	r0, #0
   14ce0:	mov	r1, #8
   14ce4:	movt	r2, #1
   14ce8:	bl	179f8 <__assert_fail@plt+0x6254>
   14cec:	movw	r2, #46219	; 0xb48b
   14cf0:	mov	r3, r0
   14cf4:	mov	r0, #0
   14cf8:	mov	r1, r6
   14cfc:	movt	r2, #1
   14d00:	bl	11558 <error@plt>
   14d04:	mov	r0, r4
   14d08:	bl	11798 <closedir@plt>
   14d0c:	mov	r0, #4
   14d10:	bl	114a4 <sysconf@plt>
   14d14:	mov	r5, r0
   14d18:	mov	r1, sp
   14d1c:	mov	r0, #7
   14d20:	bl	114bc <getrlimit64@plt>
   14d24:	cmn	r5, #1
   14d28:	movweq	r5, #20
   14d2c:	cmp	r0, #0
   14d30:	bne	14d60 <__assert_fail@plt+0x35bc>
   14d34:	ldm	sp, {r0, r1}
   14d38:	and	r1, r0, r1
   14d3c:	cmn	r1, #1
   14d40:	movne	r5, r0
   14d44:	b	14d60 <__assert_fail@plt+0x35bc>
   14d48:	mov	r0, r4
   14d4c:	bl	11798 <closedir@plt>
   14d50:	cmp	r7, #0
   14d54:	beq	14d0c <__assert_fail@plt+0x3568>
   14d58:	cmn	r5, #1
   14d5c:	ble	14d0c <__assert_fail@plt+0x3568>
   14d60:	mov	r0, r5
   14d64:	sub	sp, fp, #24
   14d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d70:	add	fp, sp, #28
   14d74:	sub	sp, sp, #532	; 0x214
   14d78:	cmp	r0, #1
   14d7c:	str	r2, [sp, #12]
   14d80:	str	r0, [sp, #8]
   14d84:	blt	14e4c <__assert_fail@plt+0x36a8>
   14d88:	add	r0, sp, #16
   14d8c:	mov	r5, r1
   14d90:	mov	r9, #0
   14d94:	mov	r8, #5
   14d98:	add	r1, r0, #6
   14d9c:	add	r0, r0, #4
   14da0:	str	r1, [sp]
   14da4:	str	r0, [sp, #4]
   14da8:	ldr	r0, [sp, #8]
   14dac:	sub	sl, r0, r9
   14db0:	cmp	sl, #64	; 0x40
   14db4:	mov	r7, sl
   14db8:	movge	r7, #64	; 0x40
   14dbc:	cmp	sl, #1
   14dc0:	blt	14de4 <__assert_fail@plt+0x3640>
   14dc4:	ldr	r1, [sp, #4]
   14dc8:	mov	r0, #0
   14dcc:	add	r2, r9, r0
   14dd0:	add	r0, r0, #1
   14dd4:	stmda	r1, {r2, r8}
   14dd8:	add	r1, r1, #8
   14ddc:	cmp	r0, r7
   14de0:	blt	14dcc <__assert_fail@plt+0x3628>
   14de4:	add	r0, sp, #16
   14de8:	mov	r1, r7
   14dec:	mov	r2, #0
   14df0:	bl	114f8 <poll@plt>
   14df4:	cmn	r0, #1
   14df8:	beq	14e4c <__assert_fail@plt+0x36a8>
   14dfc:	cmp	sl, #1
   14e00:	blt	14e3c <__assert_fail@plt+0x3698>
   14e04:	ldr	r4, [sp]
   14e08:	mov	r6, #0
   14e0c:	ldrh	r0, [r4]
   14e10:	cmp	r0, #32
   14e14:	beq	14e2c <__assert_fail@plt+0x3688>
   14e18:	ldr	r0, [r4, #-6]
   14e1c:	ldr	r1, [sp, #12]
   14e20:	blx	r5
   14e24:	cmp	r0, #0
   14e28:	bne	14e4c <__assert_fail@plt+0x36a8>
   14e2c:	add	r6, r6, #1
   14e30:	add	r4, r4, #8
   14e34:	cmp	r6, r7
   14e38:	blt	14e0c <__assert_fail@plt+0x3668>
   14e3c:	ldr	r0, [sp, #8]
   14e40:	add	r9, r7, r9
   14e44:	cmp	r9, r0
   14e48:	blt	14da8 <__assert_fail@plt+0x3604>
   14e4c:	sub	sp, fp, #28
   14e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e54:	push	{r4, r5, r6, sl, fp, lr}
   14e58:	add	fp, sp, #16
   14e5c:	mov	r5, r1
   14e60:	mov	r1, #1
   14e64:	mov	r6, r0
   14e68:	bl	18e3c <__assert_fail@plt+0x7698>
   14e6c:	mov	r4, #0
   14e70:	tst	r0, #1
   14e74:	bne	14eb4 <__assert_fail@plt+0x3710>
   14e78:	ldm	r5, {r0, r1}
   14e7c:	mov	r2, #4
   14e80:	add	r1, r2, r1, lsl #2
   14e84:	add	r2, r5, #8
   14e88:	bl	15320 <__assert_fail@plt+0x3b7c>
   14e8c:	cmp	r0, #0
   14e90:	beq	14eb0 <__assert_fail@plt+0x370c>
   14e94:	str	r0, [r5]
   14e98:	ldr	r1, [r5, #4]
   14e9c:	str	r6, [r0, r1, lsl #2]
   14ea0:	ldr	r0, [r5, #4]
   14ea4:	add	r0, r0, #1
   14ea8:	str	r0, [r5, #4]
   14eac:	b	14eb4 <__assert_fail@plt+0x3710>
   14eb0:	mvn	r4, #0
   14eb4:	mov	r0, r4
   14eb8:	pop	{r4, r5, r6, sl, fp, pc}
   14ebc:	sub	sp, sp, #8
   14ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	add	fp, sp, #28
   14ec8:	sub	sp, sp, #4
   14ecc:	movw	sl, #49817	; 0xc299
   14ed0:	mov	r4, r0
   14ed4:	str	r2, [fp, #8]
   14ed8:	str	r3, [fp, #12]
   14edc:	tst	r1, #64	; 0x40
   14ee0:	mov	r6, #0
   14ee4:	movw	r9, #49816	; 0xc298
   14ee8:	mov	r5, r1
   14eec:	movt	sl, #2
   14ef0:	ldrne	r6, [fp, #8]
   14ef4:	movt	r9, #2
   14ef8:	ldrb	r0, [sl]
   14efc:	cmp	r0, #0
   14f00:	bne	14f4c <__assert_fail@plt+0x37a8>
   14f04:	movw	r0, #47741	; 0xba7d
   14f08:	mov	r1, #524288	; 0x80000
   14f0c:	movt	r0, #1
   14f10:	bl	15754 <__assert_fail@plt+0x3fb0>
   14f14:	cmp	r0, #0
   14f18:	bmi	14f3c <__assert_fail@plt+0x3798>
   14f1c:	mov	r1, #1
   14f20:	mov	r7, r0
   14f24:	bl	18e3c <__assert_fail@plt+0x7698>
   14f28:	mov	r8, r0
   14f2c:	mov	r0, r7
   14f30:	bl	1178c <close@plt>
   14f34:	and	r0, r8, #1
   14f38:	b	14f40 <__assert_fail@plt+0x379c>
   14f3c:	mov	r0, #0
   14f40:	mov	r1, #1
   14f44:	strb	r0, [r9]
   14f48:	strb	r1, [sl]
   14f4c:	orr	r1, r5, #524288	; 0x80000
   14f50:	mov	r0, r4
   14f54:	mov	r2, r6
   14f58:	bl	15754 <__assert_fail@plt+0x3fb0>
   14f5c:	mov	r4, r0
   14f60:	cmp	r0, #0
   14f64:	bmi	14f80 <__assert_fail@plt+0x37dc>
   14f68:	ldrb	r0, [r9]
   14f6c:	cmp	r0, #0
   14f70:	bne	14f80 <__assert_fail@plt+0x37dc>
   14f74:	mov	r0, r4
   14f78:	mov	r1, #1
   14f7c:	bl	1542c <__assert_fail@plt+0x3c88>
   14f80:	mov	r0, r4
   14f84:	sub	sp, fp, #28
   14f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f8c:	add	sp, sp, #8
   14f90:	bx	lr
   14f94:	push	{r4, sl, fp, lr}
   14f98:	add	fp, sp, #8
   14f9c:	movw	r4, #49808	; 0xc290
   14fa0:	movt	r4, #2
   14fa4:	ldr	r0, [r4]
   14fa8:	bl	190b0 <__assert_fail@plt+0x790c>
   14fac:	movw	r0, #49812	; 0xc294
   14fb0:	mov	r1, #0
   14fb4:	movt	r0, #2
   14fb8:	str	r1, [r4]
   14fbc:	str	r1, [r0]
   14fc0:	pop	{r4, sl, fp, pc}
   14fc4:	push	{fp, lr}
   14fc8:	mov	fp, sp
   14fcc:	movw	r0, #45852	; 0xb31c
   14fd0:	movt	r0, #1
   14fd4:	bl	1157c <getenv@plt>
   14fd8:	cmp	r0, #0
   14fdc:	movwne	r0, #1
   14fe0:	pop	{fp, pc}
   14fe4:	push	{r4, r5, fp, lr}
   14fe8:	add	fp, sp, #8
   14fec:	sub	sp, sp, #16
   14ff0:	movw	r0, #49808	; 0xc290
   14ff4:	movt	r0, #2
   14ff8:	ldr	r4, [r0]
   14ffc:	movw	r0, #49812	; 0xc294
   15000:	movt	r0, #2
   15004:	ldr	r5, [r0]
   15008:	bl	14c18 <__assert_fail@plt+0x3474>
   1500c:	mvn	r1, #0
   15010:	cmn	r0, #-2147483647	; 0x80000001
   15014:	mov	r2, sp
   15018:	str	r1, [sp, #12]
   1501c:	mov	r1, #0
   15020:	addne	r0, r0, #1
   15024:	str	r1, [sp, #8]
   15028:	movw	r1, #20624	; 0x5090
   1502c:	stm	sp, {r4, r5}
   15030:	movt	r1, #1
   15034:	bl	14d6c <__assert_fail@plt+0x35c8>
   15038:	ldr	r4, [sp, #12]
   1503c:	cmp	r4, #0
   15040:	submi	sp, fp, #8
   15044:	popmi	{r4, r5, fp, pc}
   15048:	movw	r1, #45880	; 0xb338
   1504c:	mov	r0, #0
   15050:	mov	r2, #5
   15054:	movt	r1, #1
   15058:	bl	11498 <dcgettext@plt>
   1505c:	mov	r2, r0
   15060:	mov	r0, #0
   15064:	mov	r1, #0
   15068:	mov	r3, r4
   1506c:	bl	11558 <error@plt>
   15070:	movw	r0, #46032	; 0xb3d0
   15074:	movw	r1, #46041	; 0xb3d9
   15078:	movw	r3, #46050	; 0xb3e2
   1507c:	mov	r2, #396	; 0x18c
   15080:	movt	r0, #1
   15084:	movt	r1, #1
   15088:	movt	r3, #1
   1508c:	bl	117a4 <__assert_fail@plt>
   15090:	push	{r4, r5, r6, sl, fp, lr}
   15094:	add	fp, sp, #16
   15098:	mov	r6, r1
   1509c:	mov	r1, #1
   150a0:	mov	r5, r0
   150a4:	bl	18e3c <__assert_fail@plt+0x7698>
   150a8:	mov	r1, r0
   150ac:	mov	r0, #0
   150b0:	tst	r1, #1
   150b4:	bne	150f4 <__assert_fail@plt+0x3950>
   150b8:	ldmib	r6, {r1, r2}
   150bc:	cmp	r2, r1
   150c0:	bcs	150ec <__assert_fail@plt+0x3948>
   150c4:	ldr	r3, [r6]
   150c8:	ldr	r4, [r3, r2, lsl #2]
   150cc:	cmp	r4, r5
   150d0:	bge	150e8 <__assert_fail@plt+0x3944>
   150d4:	add	r2, r2, #1
   150d8:	cmp	r2, r1
   150dc:	str	r2, [r6, #8]
   150e0:	bcc	150c8 <__assert_fail@plt+0x3924>
   150e4:	b	150ec <__assert_fail@plt+0x3948>
   150e8:	beq	150f4 <__assert_fail@plt+0x3950>
   150ec:	mvn	r0, #0
   150f0:	str	r5, [r6, #12]
   150f4:	pop	{r4, r5, r6, sl, fp, pc}
   150f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150fc:	add	fp, sp, #24
   15100:	sub	sp, sp, #16
   15104:	mov	r8, r0
   15108:	movw	r0, #49608	; 0xc1c8
   1510c:	movt	r0, #2
   15110:	ldr	r0, [r0]
   15114:	bl	19014 <__assert_fail@plt+0x7870>
   15118:	movw	r0, #49620	; 0xc1d4
   1511c:	movw	r1, #46128	; 0xb430
   15120:	mov	r2, #5
   15124:	mov	r9, #0
   15128:	movt	r0, #2
   1512c:	movt	r1, #1
   15130:	ldr	r6, [r0]
   15134:	movw	r0, #49508	; 0xc164
   15138:	movt	r0, #2
   1513c:	ldr	r5, [r0]
   15140:	mov	r0, #0
   15144:	bl	11498 <dcgettext@plt>
   15148:	movw	r1, #46143	; 0xb43f
   1514c:	mov	r7, r0
   15150:	mov	r0, #0
   15154:	mov	r2, #5
   15158:	movt	r1, #1
   1515c:	bl	11498 <dcgettext@plt>
   15160:	movw	r1, #46158	; 0xb44e
   15164:	mov	r4, r0
   15168:	mov	r0, #0
   1516c:	mov	r2, #5
   15170:	movt	r1, #1
   15174:	bl	11498 <dcgettext@plt>
   15178:	movw	r2, #46114	; 0xb422
   1517c:	str	r0, [sp, #8]
   15180:	mov	r0, r6
   15184:	mov	r1, r8
   15188:	mov	r3, r5
   1518c:	str	r7, [sp]
   15190:	str	r4, [sp, #4]
   15194:	str	r9, [sp, #12]
   15198:	movt	r2, #1
   1519c:	bl	1841c <__assert_fail@plt+0x6c78>
   151a0:	sub	sp, fp, #24
   151a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   151ac:	add	fp, sp, #24
   151b0:	sub	sp, sp, #8
   151b4:	mov	r5, r1
   151b8:	mov	r4, r0
   151bc:	bl	11630 <__errno_location@plt>
   151c0:	mov	r6, r0
   151c4:	mov	r0, #0
   151c8:	add	r1, sp, #4
   151cc:	mov	r2, #10
   151d0:	str	r0, [r6]
   151d4:	mov	r0, r4
   151d8:	bl	11408 <strtol@plt>
   151dc:	add	r1, r0, #-2147483647	; 0x80000001
   151e0:	cmp	r1, #1
   151e4:	bls	15244 <__assert_fail@plt+0x3aa0>
   151e8:	ldr	r7, [sp, #4]
   151ec:	ldrb	r1, [r7]
   151f0:	cmp	r1, #0
   151f4:	bne	1525c <__assert_fail@plt+0x3ab8>
   151f8:	cmp	r7, r4
   151fc:	subne	sp, fp, #24
   15200:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15204:	movw	r1, #46198	; 0xb476
   15208:	ldr	r6, [r6]
   1520c:	mov	r0, #0
   15210:	mov	r2, #5
   15214:	movt	r1, #1
   15218:	bl	11498 <dcgettext@plt>
   1521c:	mov	r7, r0
   15220:	mov	r0, #0
   15224:	mov	r1, r5
   15228:	mov	r2, r4
   1522c:	bl	179f8 <__assert_fail@plt+0x6254>
   15230:	mov	r3, r0
   15234:	mov	r0, #1
   15238:	mov	r1, r6
   1523c:	mov	r2, r7
   15240:	bl	11558 <error@plt>
   15244:	ldr	r1, [r6]
   15248:	movw	r2, #46219	; 0xb48b
   1524c:	mov	r0, #1
   15250:	mov	r3, r4
   15254:	movt	r2, #1
   15258:	bl	11558 <error@plt>
   1525c:	movw	r1, #46171	; 0xb45b
   15260:	ldr	r8, [r6]
   15264:	mov	r0, #0
   15268:	mov	r2, #5
   1526c:	movt	r1, #1
   15270:	bl	11498 <dcgettext@plt>
   15274:	mov	r6, r0
   15278:	mov	r0, #0
   1527c:	mov	r1, r5
   15280:	mov	r2, r7
   15284:	bl	179f8 <__assert_fail@plt+0x6254>
   15288:	mov	r7, r0
   1528c:	mov	r0, #1
   15290:	mov	r1, r5
   15294:	mov	r2, r4
   15298:	bl	179f8 <__assert_fail@plt+0x6254>
   1529c:	str	r0, [sp]
   152a0:	mov	r0, #1
   152a4:	mov	r1, r8
   152a8:	mov	r2, r6
   152ac:	mov	r3, r7
   152b0:	bl	11558 <error@plt>
   152b4:	push	{r4, r5, fp, lr}
   152b8:	add	fp, sp, #8
   152bc:	sub	sp, sp, #16
   152c0:	mov	r4, r1
   152c4:	movw	r1, #46222	; 0xb48e
   152c8:	mov	r5, r0
   152cc:	mov	r0, #0
   152d0:	mov	r2, #5
   152d4:	movt	r1, #1
   152d8:	bl	11498 <dcgettext@plt>
   152dc:	movw	r2, #46467	; 0xb583
   152e0:	movw	r3, #46114	; 0xb422
   152e4:	mov	r1, r0
   152e8:	movw	r0, #46514	; 0xb5b2
   152ec:	movt	r2, #1
   152f0:	movt	r0, #1
   152f4:	movt	r3, #1
   152f8:	str	r2, [sp, #4]
   152fc:	movw	r2, #46428	; 0xb55c
   15300:	str	r3, [sp]
   15304:	str	r0, [sp, #8]
   15308:	mov	r0, r5
   1530c:	mov	r3, r4
   15310:	movt	r2, #1
   15314:	bl	11624 <fprintf@plt>
   15318:	sub	sp, fp, #8
   1531c:	pop	{r4, r5, fp, pc}
   15320:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15324:	add	fp, sp, #24
   15328:	mov	r6, r2
   1532c:	mov	r7, r1
   15330:	mov	r4, r0
   15334:	bl	11630 <__errno_location@plt>
   15338:	cmp	r7, #0
   1533c:	beq	153d0 <__assert_fail@plt+0x3c2c>
   15340:	mov	r5, r0
   15344:	ldr	r8, [r0]
   15348:	ldr	r0, [r6]
   1534c:	cmp	r0, #0
   15350:	mov	r1, r0
   15354:	movweq	r1, #16
   15358:	cmp	r1, r7
   1535c:	bcs	15374 <__assert_fail@plt+0x3bd0>
   15360:	lsl	r2, r1, #1
   15364:	cmp	r1, r1, lsl #1
   15368:	mov	r1, r2
   1536c:	bls	15358 <__assert_fail@plt+0x3bb4>
   15370:	mov	r1, r7
   15374:	cmp	r0, #0
   15378:	beq	153a4 <__assert_fail@plt+0x3c00>
   1537c:	cmp	r1, r0
   15380:	beq	153bc <__assert_fail@plt+0x3c18>
   15384:	mov	r0, r4
   15388:	str	r1, [r6]
   1538c:	bl	19210 <__assert_fail@plt+0x7a6c>
   15390:	mov	r4, r0
   15394:	cmp	r0, #0
   15398:	bne	153c4 <__assert_fail@plt+0x3c20>
   1539c:	mov	r4, #0
   153a0:	b	153c8 <__assert_fail@plt+0x3c24>
   153a4:	cmp	r4, #0
   153a8:	bne	153e8 <__assert_fail@plt+0x3c44>
   153ac:	mov	r0, r1
   153b0:	str	r1, [r6]
   153b4:	bl	1917c <__assert_fail@plt+0x79d8>
   153b8:	mov	r4, r0
   153bc:	cmp	r4, #0
   153c0:	beq	1539c <__assert_fail@plt+0x3bf8>
   153c4:	str	r8, [r5]
   153c8:	mov	r0, r4
   153cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153d0:	movw	r0, #46536	; 0xb5c8
   153d4:	movw	r1, #46548	; 0xb5d4
   153d8:	movw	r3, #46560	; 0xb5e0
   153dc:	mov	r2, #71	; 0x47
   153e0:	movt	r0, #1
   153e4:	b	153fc <__assert_fail@plt+0x3c58>
   153e8:	movw	r0, #46602	; 0xb60a
   153ec:	movw	r1, #46548	; 0xb5d4
   153f0:	movw	r3, #46560	; 0xb5e0
   153f4:	mov	r2, #79	; 0x4f
   153f8:	movt	r0, #1
   153fc:	movt	r1, #1
   15400:	movt	r3, #1
   15404:	bl	117a4 <__assert_fail@plt>
   15408:	push	{r4, sl, fp, lr}
   1540c:	add	fp, sp, #8
   15410:	mov	r4, r0
   15414:	bl	15320 <__assert_fail@plt+0x3b7c>
   15418:	cmp	r0, #0
   1541c:	popne	{r4, sl, fp, pc}
   15420:	mov	r0, r4
   15424:	bl	190b0 <__assert_fail@plt+0x790c>
   15428:	bl	18938 <__assert_fail@plt+0x7194>
   1542c:	push	{r4, r5, r6, sl, fp, lr}
   15430:	add	fp, sp, #16
   15434:	mov	r6, r1
   15438:	mov	r1, #1
   1543c:	mov	r2, #0
   15440:	mov	r4, r0
   15444:	mov	r5, #0
   15448:	bl	18e3c <__assert_fail@plt+0x7698>
   1544c:	cmp	r0, #0
   15450:	bmi	15480 <__assert_fail@plt+0x3cdc>
   15454:	cmp	r6, #0
   15458:	bic	r2, r0, #1
   1545c:	orrne	r2, r0, #1
   15460:	cmp	r0, r2
   15464:	beq	15484 <__assert_fail@plt+0x3ce0>
   15468:	mov	r0, r4
   1546c:	mov	r1, #2
   15470:	bl	18e3c <__assert_fail@plt+0x7698>
   15474:	cmn	r0, #1
   15478:	movwne	r0, #0
   1547c:	pop	{r4, r5, r6, sl, fp, pc}
   15480:	mvn	r5, #0
   15484:	mov	r0, r5
   15488:	pop	{r4, r5, r6, sl, fp, pc}
   1548c:	movw	r1, #1030	; 0x406
   15490:	mov	r2, #0
   15494:	b	18e3c <__assert_fail@plt+0x7698>
   15498:	movw	r1, #49820	; 0xc29c
   1549c:	movt	r1, #2
   154a0:	str	r0, [r1]
   154a4:	bx	lr
   154a8:	push	{r4, r5, r6, sl, fp, lr}
   154ac:	add	fp, sp, #16
   154b0:	sub	sp, sp, #8
   154b4:	movw	r6, #49616	; 0xc1d0
   154b8:	movt	r6, #2
   154bc:	ldr	r5, [r6]
   154c0:	mov	r0, r5
   154c4:	bl	19070 <__assert_fail@plt+0x78cc>
   154c8:	cmp	r0, #0
   154cc:	beq	1550c <__assert_fail@plt+0x3d68>
   154d0:	mov	r0, #1
   154d4:	mov	r2, #0
   154d8:	mov	r3, #0
   154dc:	mov	r4, #0
   154e0:	str	r0, [sp]
   154e4:	mov	r0, r5
   154e8:	bl	190d8 <__assert_fail@plt+0x7934>
   154ec:	cmp	r0, #0
   154f0:	bne	15510 <__assert_fail@plt+0x3d6c>
   154f4:	ldr	r0, [r6]
   154f8:	bl	19014 <__assert_fail@plt+0x7870>
   154fc:	cmp	r0, #0
   15500:	mov	r4, r0
   15504:	movwne	r4, #1
   15508:	b	15510 <__assert_fail@plt+0x3d6c>
   1550c:	mov	r4, #0
   15510:	ldr	r0, [r6]
   15514:	bl	1929c <__assert_fail@plt+0x7af8>
   15518:	cmp	r4, #0
   1551c:	cmpeq	r0, #0
   15520:	bne	15530 <__assert_fail@plt+0x3d8c>
   15524:	sub	sp, fp, #16
   15528:	pop	{r4, r5, r6, sl, fp, lr}
   1552c:	b	155d4 <__assert_fail@plt+0x3e30>
   15530:	movw	r1, #46619	; 0xb61b
   15534:	mov	r0, #0
   15538:	mov	r2, #5
   1553c:	movt	r1, #1
   15540:	bl	11498 <dcgettext@plt>
   15544:	mov	r4, r0
   15548:	movw	r0, #49820	; 0xc29c
   1554c:	movt	r0, #2
   15550:	ldr	r6, [r0]
   15554:	bl	11630 <__errno_location@plt>
   15558:	ldr	r5, [r0]
   1555c:	cmp	r6, #0
   15560:	bne	1557c <__assert_fail@plt+0x3dd8>
   15564:	movw	r2, #46219	; 0xb48b
   15568:	mov	r0, #0
   1556c:	mov	r1, r5
   15570:	mov	r3, r4
   15574:	movt	r2, #1
   15578:	b	1559c <__assert_fail@plt+0x3df8>
   1557c:	mov	r0, r6
   15580:	bl	17b98 <__assert_fail@plt+0x63f4>
   15584:	movw	r2, #46638	; 0xb62e
   15588:	mov	r3, r0
   1558c:	str	r4, [sp]
   15590:	mov	r0, #0
   15594:	mov	r1, r5
   15598:	movt	r2, #1
   1559c:	bl	11558 <error@plt>
   155a0:	bl	155d4 <__assert_fail@plt+0x3e30>
   155a4:	movw	r0, #49512	; 0xc168
   155a8:	movt	r0, #2
   155ac:	ldr	r0, [r0]
   155b0:	bl	1145c <_exit@plt>
   155b4:	movw	r1, #49824	; 0xc2a0
   155b8:	movt	r1, #2
   155bc:	str	r0, [r1]
   155c0:	bx	lr
   155c4:	movw	r1, #49828	; 0xc2a4
   155c8:	movt	r1, #2
   155cc:	strb	r0, [r1]
   155d0:	bx	lr
   155d4:	push	{r4, r5, r6, sl, fp, lr}
   155d8:	add	fp, sp, #16
   155dc:	sub	sp, sp, #8
   155e0:	movw	r0, #49620	; 0xc1d4
   155e4:	movt	r0, #2
   155e8:	ldr	r0, [r0]
   155ec:	bl	1929c <__assert_fail@plt+0x7af8>
   155f0:	cmp	r0, #0
   155f4:	beq	1561c <__assert_fail@plt+0x3e78>
   155f8:	movw	r0, #49828	; 0xc2a4
   155fc:	movt	r0, #2
   15600:	ldrb	r0, [r0]
   15604:	cmp	r0, #0
   15608:	beq	1563c <__assert_fail@plt+0x3e98>
   1560c:	bl	11630 <__errno_location@plt>
   15610:	ldr	r0, [r0]
   15614:	cmp	r0, #32
   15618:	bne	1563c <__assert_fail@plt+0x3e98>
   1561c:	movw	r0, #49608	; 0xc1c8
   15620:	movt	r0, #2
   15624:	ldr	r0, [r0]
   15628:	bl	1929c <__assert_fail@plt+0x7af8>
   1562c:	cmp	r0, #0
   15630:	subeq	sp, fp, #16
   15634:	popeq	{r4, r5, r6, sl, fp, pc}
   15638:	b	156ac <__assert_fail@plt+0x3f08>
   1563c:	movw	r1, #46645	; 0xb635
   15640:	mov	r0, #0
   15644:	mov	r2, #5
   15648:	movt	r1, #1
   1564c:	bl	11498 <dcgettext@plt>
   15650:	mov	r4, r0
   15654:	movw	r0, #49824	; 0xc2a0
   15658:	movt	r0, #2
   1565c:	ldr	r6, [r0]
   15660:	bl	11630 <__errno_location@plt>
   15664:	ldr	r5, [r0]
   15668:	cmp	r6, #0
   1566c:	bne	15688 <__assert_fail@plt+0x3ee4>
   15670:	movw	r2, #46219	; 0xb48b
   15674:	mov	r0, #0
   15678:	mov	r1, r5
   1567c:	mov	r3, r4
   15680:	movt	r2, #1
   15684:	b	156a8 <__assert_fail@plt+0x3f04>
   15688:	mov	r0, r6
   1568c:	bl	17b98 <__assert_fail@plt+0x63f4>
   15690:	movw	r2, #46638	; 0xb62e
   15694:	mov	r3, r0
   15698:	str	r4, [sp]
   1569c:	mov	r0, #0
   156a0:	mov	r1, r5
   156a4:	movt	r2, #1
   156a8:	bl	11558 <error@plt>
   156ac:	movw	r0, #49512	; 0xc168
   156b0:	movt	r0, #2
   156b4:	ldr	r0, [r0]
   156b8:	bl	1145c <_exit@plt>
   156bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156c0:	add	fp, sp, #24
   156c4:	bl	11564 <opendir@plt>
   156c8:	cmp	r0, #0
   156cc:	beq	15720 <__assert_fail@plt+0x3f7c>
   156d0:	mov	r4, r0
   156d4:	bl	1172c <dirfd@plt>
   156d8:	cmp	r0, #2
   156dc:	bhi	15728 <__assert_fail@plt+0x3f84>
   156e0:	movw	r1, #1030	; 0x406
   156e4:	mov	r2, #3
   156e8:	bl	18e3c <__assert_fail@plt+0x7698>
   156ec:	cmn	r0, #1
   156f0:	ble	15730 <__assert_fail@plt+0x3f8c>
   156f4:	mov	r7, r0
   156f8:	bl	11714 <fdopendir@plt>
   156fc:	mov	r5, r0
   15700:	bl	11630 <__errno_location@plt>
   15704:	ldr	r8, [r0]
   15708:	mov	r6, r0
   1570c:	cmp	r5, #0
   15710:	bne	15740 <__assert_fail@plt+0x3f9c>
   15714:	mov	r0, r7
   15718:	bl	1178c <close@plt>
   1571c:	b	1573c <__assert_fail@plt+0x3f98>
   15720:	mov	r5, #0
   15724:	b	1574c <__assert_fail@plt+0x3fa8>
   15728:	mov	r5, r4
   1572c:	b	1574c <__assert_fail@plt+0x3fa8>
   15730:	bl	11630 <__errno_location@plt>
   15734:	ldr	r8, [r0]
   15738:	mov	r6, r0
   1573c:	mov	r5, #0
   15740:	mov	r0, r4
   15744:	bl	11798 <closedir@plt>
   15748:	str	r8, [r6]
   1574c:	mov	r0, r5
   15750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15754:	sub	sp, sp, #8
   15758:	push	{fp, lr}
   1575c:	mov	fp, sp
   15760:	sub	sp, sp, #8
   15764:	str	r2, [fp, #8]
   15768:	str	r3, [fp, #12]
   1576c:	tst	r1, #64	; 0x40
   15770:	mov	r2, #0
   15774:	ldrne	r2, [fp, #8]
   15778:	bl	11570 <open64@plt>
   1577c:	bl	17fb8 <__assert_fail@plt+0x6814>
   15780:	mov	sp, fp
   15784:	pop	{fp, lr}
   15788:	add	sp, sp, #8
   1578c:	bx	lr
   15790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15794:	add	fp, sp, #28
   15798:	sub	sp, sp, #308	; 0x134
   1579c:	mov	r7, r1
   157a0:	mov	sl, r0
   157a4:	bl	11528 <__ctype_get_mb_cur_max@plt>
   157a8:	cmp	r0, #2
   157ac:	bcc	15b38 <__assert_fail@plt+0x4394>
   157b0:	mov	r4, #0
   157b4:	sub	r0, fp, #88	; 0x58
   157b8:	str	r4, [fp, #-80]	; 0xffffffb0
   157bc:	str	r4, [fp, #-84]	; 0xffffffac
   157c0:	strb	r4, [fp, #-76]	; 0xffffffb4
   157c4:	strb	r4, [fp, #-88]	; 0xffffffa8
   157c8:	str	r7, [fp, #-72]	; 0xffffffb8
   157cc:	bl	161c8 <__assert_fail@plt+0x4a24>
   157d0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   157d4:	cmp	r0, #0
   157d8:	beq	157e8 <__assert_fail@plt+0x4044>
   157dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   157e0:	cmp	r0, #0
   157e4:	beq	15c54 <__assert_fail@plt+0x44b0>
   157e8:	add	r0, sp, #136	; 0x88
   157ec:	str	r4, [fp, #-136]	; 0xffffff78
   157f0:	str	r4, [fp, #-140]	; 0xffffff74
   157f4:	str	r7, [fp, #-128]	; 0xffffff80
   157f8:	strb	r4, [fp, #-132]	; 0xffffff7c
   157fc:	str	r7, [sp, #12]
   15800:	strb	r4, [fp, #-144]	; 0xffffff70
   15804:	str	r4, [sp, #144]	; 0x90
   15808:	str	r4, [sp, #140]	; 0x8c
   1580c:	str	sl, [sp, #152]	; 0x98
   15810:	strb	r4, [sp, #148]	; 0x94
   15814:	strb	r4, [sp, #136]	; 0x88
   15818:	bl	161c8 <__assert_fail@plt+0x4a24>
   1581c:	ldrb	r0, [sp, #160]	; 0xa0
   15820:	cmp	r0, #0
   15824:	beq	15834 <__assert_fail@plt+0x4090>
   15828:	ldr	r0, [sp, #164]	; 0xa4
   1582c:	cmp	r0, #0
   15830:	beq	15c60 <__assert_fail@plt+0x44bc>
   15834:	add	r0, sp, #24
   15838:	mov	r5, #0
   1583c:	sub	r7, fp, #144	; 0x90
   15840:	mov	r1, #0
   15844:	mov	r6, #0
   15848:	mov	r9, #0
   1584c:	add	r0, r0, #4
   15850:	str	r0, [sp, #8]
   15854:	mov	r0, #1
   15858:	str	r0, [sp, #16]
   1585c:	add	r0, r9, r9, lsl #2
   15860:	mov	r8, r6
   15864:	cmp	r6, r0
   15868:	bcc	15918 <__assert_fail@plt+0x4174>
   1586c:	ldr	r0, [sp, #16]
   15870:	tst	r0, #1
   15874:	beq	15918 <__assert_fail@plt+0x4174>
   15878:	cmp	r9, #10
   1587c:	bcc	15918 <__assert_fail@plt+0x4174>
   15880:	subs	r0, r8, r1
   15884:	beq	158c8 <__assert_fail@plt+0x4124>
   15888:	sub	r6, r1, r8
   1588c:	mov	r0, r7
   15890:	bl	161c8 <__assert_fail@plt+0x4a24>
   15894:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15898:	cmp	r0, #0
   1589c:	beq	158ac <__assert_fail@plt+0x4108>
   158a0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   158a4:	cmp	r0, #0
   158a8:	beq	158c8 <__assert_fail@plt+0x4124>
   158ac:	strb	r5, [fp, #-132]	; 0xffffff7c
   158b0:	adds	r6, r6, #1
   158b4:	ldr	r0, [fp, #-128]	; 0xffffff80
   158b8:	ldr	r1, [fp, #-124]	; 0xffffff84
   158bc:	add	r0, r0, r1
   158c0:	str	r0, [fp, #-128]	; 0xffffff80
   158c4:	bcc	1588c <__assert_fail@plt+0x40e8>
   158c8:	mov	r0, r7
   158cc:	bl	161c8 <__assert_fail@plt+0x4a24>
   158d0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   158d4:	cmp	r0, #0
   158d8:	beq	15914 <__assert_fail@plt+0x4170>
   158dc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   158e0:	mov	r1, r8
   158e4:	cmp	r0, #0
   158e8:	bne	15918 <__assert_fail@plt+0x4174>
   158ec:	ldr	r1, [sp, #12]
   158f0:	mov	r0, sl
   158f4:	add	r2, sp, #80	; 0x50
   158f8:	bl	15c88 <__assert_fail@plt+0x44e4>
   158fc:	mov	r1, #0
   15900:	cmp	r0, #0
   15904:	str	r1, [sp, #16]
   15908:	mov	r1, r8
   1590c:	beq	15918 <__assert_fail@plt+0x4174>
   15910:	b	15c7c <__assert_fail@plt+0x44d8>
   15914:	mov	r1, r8
   15918:	ldrb	r0, [sp, #160]	; 0xa0
   1591c:	add	r6, r8, #1
   15920:	str	r1, [sp, #20]
   15924:	cmp	r0, #0
   15928:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1592c:	cmpne	r0, #0
   15930:	bne	1595c <__assert_fail@plt+0x41b8>
   15934:	ldr	r2, [sp, #156]	; 0x9c
   15938:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1593c:	cmp	r2, r0
   15940:	bne	15af4 <__assert_fail@plt+0x4350>
   15944:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15948:	ldr	r0, [sp, #152]	; 0x98
   1594c:	bl	115e8 <bcmp@plt>
   15950:	cmp	r0, #0
   15954:	bne	15af4 <__assert_fail@plt+0x4350>
   15958:	b	1596c <__assert_fail@plt+0x41c8>
   1595c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15960:	ldr	r1, [sp, #164]	; 0xa4
   15964:	cmp	r1, r0
   15968:	bne	15af4 <__assert_fail@plt+0x4350>
   1596c:	str	r9, [sp, #4]
   15970:	add	r1, sp, #136	; 0x88
   15974:	add	r0, sp, #80	; 0x50
   15978:	mov	ip, #0
   1597c:	ldm	r1!, {r2, r3, r5, r6}
   15980:	stmia	r0!, {r2, r3, r5, r6}
   15984:	ldm	r1!, {r2, r3, r4, r5, r6}
   15988:	stmia	r0!, {r2, r3, r4, r5, r6}
   1598c:	ldm	r1, {r2, r3, r4, r5, r6}
   15990:	stm	r0, {r2, r3, r4, r5, r6}
   15994:	strb	ip, [sp, #92]	; 0x5c
   15998:	mov	r4, #0
   1599c:	ldr	r0, [sp, #12]
   159a0:	ldr	r1, [sp, #100]	; 0x64
   159a4:	str	r0, [sp, #40]	; 0x28
   159a8:	ldr	r0, [sp, #96]	; 0x60
   159ac:	strb	ip, [sp, #24]
   159b0:	add	r0, r0, r1
   159b4:	str	r0, [sp, #96]	; 0x60
   159b8:	ldr	r0, [sp, #8]
   159bc:	str	ip, [r0]
   159c0:	str	ip, [r0, #4]
   159c4:	add	r0, sp, #24
   159c8:	strb	ip, [sp, #36]	; 0x24
   159cc:	bl	161c8 <__assert_fail@plt+0x4a24>
   159d0:	ldrb	r0, [sp, #48]	; 0x30
   159d4:	cmp	r0, #0
   159d8:	beq	159e8 <__assert_fail@plt+0x4244>
   159dc:	ldr	r0, [sp, #52]	; 0x34
   159e0:	cmp	r0, #0
   159e4:	beq	15c84 <__assert_fail@plt+0x44e0>
   159e8:	strb	r4, [sp, #36]	; 0x24
   159ec:	ldr	r0, [sp, #40]	; 0x28
   159f0:	ldr	r1, [sp, #44]	; 0x2c
   159f4:	add	r0, r0, r1
   159f8:	str	r0, [sp, #40]	; 0x28
   159fc:	add	r0, sp, #24
   15a00:	bl	161c8 <__assert_fail@plt+0x4a24>
   15a04:	ldrb	r0, [sp, #48]	; 0x30
   15a08:	add	r5, sp, #80	; 0x50
   15a0c:	cmp	r0, #0
   15a10:	beq	15a20 <__assert_fail@plt+0x427c>
   15a14:	ldr	r0, [sp, #52]	; 0x34
   15a18:	cmp	r0, #0
   15a1c:	beq	15c6c <__assert_fail@plt+0x44c8>
   15a20:	add	r6, r8, #2
   15a24:	mov	r0, r5
   15a28:	bl	161c8 <__assert_fail@plt+0x4a24>
   15a2c:	ldr	r0, [sp, #108]	; 0x6c
   15a30:	ldrb	r1, [sp, #104]	; 0x68
   15a34:	cmp	r0, #0
   15a38:	bne	15a44 <__assert_fail@plt+0x42a0>
   15a3c:	cmp	r1, #0
   15a40:	bne	15c5c <__assert_fail@plt+0x44b8>
   15a44:	cmp	r1, #0
   15a48:	ldrbne	r1, [sp, #48]	; 0x30
   15a4c:	cmpne	r1, #0
   15a50:	bne	15a8c <__assert_fail@plt+0x42e8>
   15a54:	ldr	r4, [sp, #100]	; 0x64
   15a58:	ldr	r0, [sp, #44]	; 0x2c
   15a5c:	cmp	r4, r0
   15a60:	bne	15aec <__assert_fail@plt+0x4348>
   15a64:	ldr	r8, [sp, #40]	; 0x28
   15a68:	ldr	r9, [sp, #96]	; 0x60
   15a6c:	mov	r2, r4
   15a70:	mov	r0, r9
   15a74:	mov	r1, r8
   15a78:	bl	115e8 <bcmp@plt>
   15a7c:	cmp	r0, #0
   15a80:	mov	r0, r4
   15a84:	beq	15aa8 <__assert_fail@plt+0x4304>
   15a88:	b	15aec <__assert_fail@plt+0x4348>
   15a8c:	ldr	r1, [sp, #52]	; 0x34
   15a90:	cmp	r0, r1
   15a94:	bne	15aec <__assert_fail@plt+0x4348>
   15a98:	ldr	r8, [sp, #40]	; 0x28
   15a9c:	ldr	r4, [sp, #44]	; 0x2c
   15aa0:	ldr	r9, [sp, #96]	; 0x60
   15aa4:	ldr	r0, [sp, #100]	; 0x64
   15aa8:	mov	r1, #0
   15aac:	add	r0, r9, r0
   15ab0:	strb	r1, [sp, #92]	; 0x5c
   15ab4:	str	r0, [sp, #96]	; 0x60
   15ab8:	add	r0, r8, r4
   15abc:	strb	r1, [sp, #36]	; 0x24
   15ac0:	str	r0, [sp, #40]	; 0x28
   15ac4:	add	r0, sp, #24
   15ac8:	bl	161c8 <__assert_fail@plt+0x4a24>
   15acc:	ldrb	r0, [sp, #48]	; 0x30
   15ad0:	add	r6, r6, #1
   15ad4:	cmp	r0, #0
   15ad8:	beq	15a24 <__assert_fail@plt+0x4280>
   15adc:	ldr	r0, [sp, #52]	; 0x34
   15ae0:	cmp	r0, #0
   15ae4:	bne	15a24 <__assert_fail@plt+0x4280>
   15ae8:	b	15c6c <__assert_fail@plt+0x44c8>
   15aec:	ldr	r9, [sp, #4]
   15af0:	mov	r5, #0
   15af4:	mov	r4, #0
   15af8:	add	r9, r9, #1
   15afc:	strb	r4, [sp, #148]	; 0x94
   15b00:	ldr	r0, [sp, #152]	; 0x98
   15b04:	ldr	r1, [sp, #156]	; 0x9c
   15b08:	add	r0, r0, r1
   15b0c:	str	r0, [sp, #152]	; 0x98
   15b10:	add	r0, sp, #136	; 0x88
   15b14:	bl	161c8 <__assert_fail@plt+0x4a24>
   15b18:	ldrb	r0, [sp, #160]	; 0xa0
   15b1c:	ldr	r1, [sp, #20]
   15b20:	cmp	r0, #0
   15b24:	beq	1585c <__assert_fail@plt+0x40b8>
   15b28:	ldr	r0, [sp, #164]	; 0xa4
   15b2c:	cmp	r0, #0
   15b30:	bne	1585c <__assert_fail@plt+0x40b8>
   15b34:	b	15c60 <__assert_fail@plt+0x44bc>
   15b38:	ldrb	r5, [r7]
   15b3c:	cmp	r5, #0
   15b40:	beq	15c54 <__assert_fail@plt+0x44b0>
   15b44:	ldrb	r9, [sl]
   15b48:	cmp	r9, #0
   15b4c:	beq	15c5c <__assert_fail@plt+0x44b8>
   15b50:	mov	lr, #1
   15b54:	mov	ip, #0
   15b58:	mov	r3, r7
   15b5c:	mov	r6, #0
   15b60:	mov	r8, #0
   15b64:	add	r0, r8, r8, lsl #2
   15b68:	cmp	r6, r0
   15b6c:	bcc	15bfc <__assert_fail@plt+0x4458>
   15b70:	tst	lr, #1
   15b74:	beq	15bfc <__assert_fail@plt+0x4458>
   15b78:	cmp	r8, #10
   15b7c:	bcc	15bfc <__assert_fail@plt+0x4458>
   15b80:	cmp	r3, #0
   15b84:	beq	15bc4 <__assert_fail@plt+0x4420>
   15b88:	sub	r1, r6, ip
   15b8c:	mov	r0, r3
   15b90:	str	r6, [sp, #20]
   15b94:	mov	r6, r5
   15b98:	mov	r4, lr
   15b9c:	mov	r5, r3
   15ba0:	bl	1169c <strnlen@plt>
   15ba4:	mov	r3, r5
   15ba8:	mov	r5, r6
   15bac:	ldr	r6, [sp, #20]
   15bb0:	mov	lr, r4
   15bb4:	ldrb	r0, [r3, r0]!
   15bb8:	mov	ip, r6
   15bbc:	cmp	r0, #0
   15bc0:	bne	15bfc <__assert_fail@plt+0x4458>
   15bc4:	mov	r0, r7
   15bc8:	mov	r4, ip
   15bcc:	bl	11600 <strlen@plt>
   15bd0:	mov	r2, r0
   15bd4:	mov	r0, sl
   15bd8:	mov	r1, r7
   15bdc:	sub	r3, fp, #88	; 0x58
   15be0:	bl	16080 <__assert_fail@plt+0x48dc>
   15be4:	cmp	r0, #0
   15be8:	bne	15c74 <__assert_fail@plt+0x44d0>
   15bec:	ldrb	r9, [sl]
   15bf0:	mov	lr, #0
   15bf4:	mov	r3, #0
   15bf8:	mov	ip, r4
   15bfc:	uxtb	r0, r9
   15c00:	cmp	r0, r5
   15c04:	bne	15c38 <__assert_fail@plt+0x4494>
   15c08:	mov	r0, #1
   15c0c:	ldrb	r1, [r7, r0]
   15c10:	cmp	r1, #0
   15c14:	beq	15c54 <__assert_fail@plt+0x44b0>
   15c18:	ldrb	r2, [sl, r0]
   15c1c:	cmp	r2, #0
   15c20:	beq	15c5c <__assert_fail@plt+0x44b8>
   15c24:	add	r0, r0, #1
   15c28:	cmp	r2, r1
   15c2c:	beq	15c0c <__assert_fail@plt+0x4468>
   15c30:	add	r6, r6, r0
   15c34:	b	15c3c <__assert_fail@plt+0x4498>
   15c38:	add	r6, r6, #1
   15c3c:	ldrb	r9, [sl, #1]!
   15c40:	add	r8, r8, #1
   15c44:	mov	r4, #0
   15c48:	cmp	r9, #0
   15c4c:	bne	15b64 <__assert_fail@plt+0x43c0>
   15c50:	b	15c60 <__assert_fail@plt+0x44bc>
   15c54:	mov	r4, sl
   15c58:	b	15c60 <__assert_fail@plt+0x44bc>
   15c5c:	mov	r4, #0
   15c60:	mov	r0, r4
   15c64:	sub	sp, fp, #28
   15c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6c:	ldr	r4, [sp, #152]	; 0x98
   15c70:	b	15c60 <__assert_fail@plt+0x44bc>
   15c74:	ldr	r4, [fp, #-88]	; 0xffffffa8
   15c78:	b	15c60 <__assert_fail@plt+0x44bc>
   15c7c:	ldr	r4, [sp, #80]	; 0x50
   15c80:	b	15c60 <__assert_fail@plt+0x44bc>
   15c84:	bl	11774 <abort@plt>
   15c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c8c:	add	fp, sp, #28
   15c90:	sub	sp, sp, #132	; 0x84
   15c94:	mov	r4, r0
   15c98:	mov	r0, r1
   15c9c:	mov	r8, r2
   15ca0:	mov	r7, r1
   15ca4:	bl	19504 <__assert_fail@plt+0x7d60>
   15ca8:	mov	sl, r0
   15cac:	movw	r0, #47662	; 0xba2e
   15cb0:	mov	r5, #0
   15cb4:	movt	r0, #744	; 0x2e8
   15cb8:	cmp	sl, r0
   15cbc:	bhi	16070 <__assert_fail@plt+0x48cc>
   15cc0:	mov	r0, #44	; 0x2c
   15cc4:	mul	r0, sl, r0
   15cc8:	cmp	r0, #4016	; 0xfb0
   15ccc:	bhi	15cec <__assert_fail@plt+0x4548>
   15cd0:	add	r0, r0, #22
   15cd4:	bic	r0, r0, #7
   15cd8:	sub	r0, sp, r0
   15cdc:	add	r1, r0, #15
   15ce0:	bic	r9, r1, #15
   15ce4:	mov	sp, r0
   15ce8:	b	15cf4 <__assert_fail@plt+0x4550>
   15cec:	bl	193c0 <__assert_fail@plt+0x7c1c>
   15cf0:	mov	r9, r0
   15cf4:	cmp	r9, #0
   15cf8:	beq	16070 <__assert_fail@plt+0x48cc>
   15cfc:	sub	r6, fp, #88	; 0x58
   15d00:	str	r4, [fp, #-160]	; 0xffffff60
   15d04:	mov	r4, #0
   15d08:	mov	r0, r6
   15d0c:	str	r4, [fp, #-80]	; 0xffffffb0
   15d10:	str	r4, [fp, #-84]	; 0xffffffac
   15d14:	strb	r4, [fp, #-76]	; 0xffffffb4
   15d18:	strb	r4, [fp, #-88]	; 0xffffffa8
   15d1c:	str	r7, [fp, #-72]	; 0xffffffb8
   15d20:	bl	161c8 <__assert_fail@plt+0x4a24>
   15d24:	add	r0, sl, sl, lsl #2
   15d28:	add	r3, r9, r0, lsl #3
   15d2c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15d30:	str	r3, [fp, #-148]	; 0xffffff6c
   15d34:	cmp	r0, #0
   15d38:	beq	15d48 <__assert_fail@plt+0x45a4>
   15d3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15d40:	cmp	r0, #0
   15d44:	beq	15dcc <__assert_fail@plt+0x4628>
   15d48:	add	r7, r9, #16
   15d4c:	add	r5, r6, #32
   15d50:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d54:	cmp	r0, r5
   15d58:	bne	15d70 <__assert_fail@plt+0x45cc>
   15d5c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15d60:	mov	r0, r7
   15d64:	mov	r1, r5
   15d68:	bl	11468 <memcpy@plt>
   15d6c:	mov	r0, r7
   15d70:	str	r0, [r7, #-16]
   15d74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15d78:	str	r0, [r7, #-12]
   15d7c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15d80:	strb	r0, [r7, #-8]
   15d84:	cmp	r0, #0
   15d88:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   15d8c:	strne	r0, [r7, #-4]
   15d90:	strb	r4, [fp, #-76]	; 0xffffffb4
   15d94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d98:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15d9c:	add	r0, r0, r1
   15da0:	str	r0, [fp, #-72]	; 0xffffffb8
   15da4:	mov	r0, r6
   15da8:	bl	161c8 <__assert_fail@plt+0x4a24>
   15dac:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   15db0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15db4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15db8:	add	r7, r7, #40	; 0x28
   15dbc:	cmp	r1, #0
   15dc0:	beq	15d50 <__assert_fail@plt+0x45ac>
   15dc4:	cmp	r0, #0
   15dc8:	bne	15d50 <__assert_fail@plt+0x45ac>
   15dcc:	mov	r0, #1
   15dd0:	cmp	sl, #3
   15dd4:	str	r8, [fp, #-156]	; 0xffffff64
   15dd8:	str	sl, [fp, #-152]	; 0xffffff68
   15ddc:	str	r0, [r3, #4]
   15de0:	bcc	15ea0 <__assert_fail@plt+0x46fc>
   15de4:	mov	r4, #2
   15de8:	mov	r5, #0
   15dec:	add	r0, r4, r4, lsl #2
   15df0:	add	r0, r9, r0, lsl #3
   15df4:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   15df8:	sub	sl, r0, #40	; 0x28
   15dfc:	sub	r6, r0, #36	; 0x24
   15e00:	sub	r7, r0, #28
   15e04:	cmp	r8, #0
   15e08:	beq	15e34 <__assert_fail@plt+0x4690>
   15e0c:	add	r0, r5, r5, lsl #2
   15e10:	add	r0, r9, r0, lsl #3
   15e14:	ldrb	r1, [r0, #8]
   15e18:	cmp	r1, #0
   15e1c:	beq	15e34 <__assert_fail@plt+0x4690>
   15e20:	ldr	r0, [r0, #12]
   15e24:	ldr	r1, [r7]
   15e28:	cmp	r1, r0
   15e2c:	bne	15e64 <__assert_fail@plt+0x46c0>
   15e30:	b	15e84 <__assert_fail@plt+0x46e0>
   15e34:	add	r0, r5, r5, lsl #2
   15e38:	ldr	r2, [r6]
   15e3c:	add	r1, r9, r0, lsl #3
   15e40:	ldr	r1, [r1, #4]
   15e44:	cmp	r2, r1
   15e48:	bne	15e64 <__assert_fail@plt+0x46c0>
   15e4c:	ldr	r1, [r9, r0, lsl #3]
   15e50:	ldr	r0, [sl]
   15e54:	bl	115e8 <bcmp@plt>
   15e58:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15e5c:	cmp	r0, #0
   15e60:	beq	15e84 <__assert_fail@plt+0x46e0>
   15e64:	cmp	r5, #0
   15e68:	beq	15e78 <__assert_fail@plt+0x46d4>
   15e6c:	ldr	r0, [r3, r5, lsl #2]
   15e70:	sub	r5, r5, r0
   15e74:	b	15e04 <__assert_fail@plt+0x4660>
   15e78:	mov	r5, #0
   15e7c:	mov	r0, r4
   15e80:	b	15e8c <__assert_fail@plt+0x46e8>
   15e84:	add	r5, r5, #1
   15e88:	sub	r0, r4, r5
   15e8c:	str	r0, [r3, r4, lsl #2]
   15e90:	ldr	r0, [fp, #-152]	; 0xffffff68
   15e94:	add	r4, r4, #1
   15e98:	cmp	r4, r0
   15e9c:	bne	15dec <__assert_fail@plt+0x4648>
   15ea0:	ldr	r8, [fp, #-156]	; 0xffffff64
   15ea4:	ldr	r0, [fp, #-160]	; 0xffffff60
   15ea8:	mov	r6, #0
   15eac:	str	r6, [r8]
   15eb0:	str	r6, [fp, #-80]	; 0xffffffb0
   15eb4:	str	r6, [fp, #-84]	; 0xffffffac
   15eb8:	strb	r6, [fp, #-76]	; 0xffffffb4
   15ebc:	strb	r6, [fp, #-88]	; 0xffffffa8
   15ec0:	str	r6, [fp, #-136]	; 0xffffff78
   15ec4:	str	r6, [fp, #-140]	; 0xffffff74
   15ec8:	str	r0, [fp, #-128]	; 0xffffff80
   15ecc:	str	r0, [fp, #-72]	; 0xffffffb8
   15ed0:	sub	r0, fp, #144	; 0x90
   15ed4:	strb	r6, [fp, #-132]	; 0xffffff7c
   15ed8:	strb	r6, [fp, #-144]	; 0xffffff70
   15edc:	bl	161c8 <__assert_fail@plt+0x4a24>
   15ee0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15ee4:	ldrb	r1, [fp, #-120]	; 0xffffff88
   15ee8:	cmp	r0, #0
   15eec:	bne	15ef8 <__assert_fail@plt+0x4754>
   15ef0:	cmp	r1, #0
   15ef4:	bne	16064 <__assert_fail@plt+0x48c0>
   15ef8:	clz	r1, r1
   15efc:	sub	r4, fp, #88	; 0x58
   15f00:	mov	sl, #0
   15f04:	lsr	r1, r1, #5
   15f08:	add	r2, sl, sl, lsl #2
   15f0c:	tst	r1, #1
   15f10:	add	r3, r9, r2, lsl #3
   15f14:	bne	15f3c <__assert_fail@plt+0x4798>
   15f18:	ldrb	r1, [r3, #8]
   15f1c:	cmp	r1, #0
   15f20:	beq	15f3c <__assert_fail@plt+0x4798>
   15f24:	ldr	r1, [r3, #12]
   15f28:	cmp	r1, r0
   15f2c:	bne	15f68 <__assert_fail@plt+0x47c4>
   15f30:	ldr	r7, [fp, #-128]	; 0xffffff80
   15f34:	ldr	r5, [fp, #-124]	; 0xffffff84
   15f38:	b	15fc4 <__assert_fail@plt+0x4820>
   15f3c:	ldr	r5, [r3, #4]
   15f40:	ldr	r0, [fp, #-124]	; 0xffffff84
   15f44:	cmp	r5, r0
   15f48:	bne	15f68 <__assert_fail@plt+0x47c4>
   15f4c:	ldr	r0, [r9, r2, lsl #3]
   15f50:	ldr	r7, [fp, #-128]	; 0xffffff80
   15f54:	mov	r2, r5
   15f58:	mov	r1, r7
   15f5c:	bl	115e8 <bcmp@plt>
   15f60:	cmp	r0, #0
   15f64:	beq	15fc4 <__assert_fail@plt+0x4820>
   15f68:	cmp	sl, #0
   15f6c:	beq	15fe4 <__assert_fail@plt+0x4840>
   15f70:	ldr	r0, [fp, #-148]	; 0xffffff6c
   15f74:	ldr	r5, [r0, sl, lsl #2]
   15f78:	sub	sl, sl, r5
   15f7c:	cmp	r5, #0
   15f80:	beq	16030 <__assert_fail@plt+0x488c>
   15f84:	mov	r0, r4
   15f88:	bl	161c8 <__assert_fail@plt+0x4a24>
   15f8c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15f90:	cmp	r0, #0
   15f94:	beq	15fa4 <__assert_fail@plt+0x4800>
   15f98:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15f9c:	cmp	r0, #0
   15fa0:	beq	1607c <__assert_fail@plt+0x48d8>
   15fa4:	strb	r6, [fp, #-76]	; 0xffffffb4
   15fa8:	subs	r5, r5, #1
   15fac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15fb0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15fb4:	add	r0, r0, r1
   15fb8:	str	r0, [fp, #-72]	; 0xffffffb8
   15fbc:	bne	15f84 <__assert_fail@plt+0x47e0>
   15fc0:	b	16030 <__assert_fail@plt+0x488c>
   15fc4:	add	r0, r7, r5
   15fc8:	strb	r6, [fp, #-132]	; 0xffffff7c
   15fcc:	add	sl, sl, #1
   15fd0:	str	r0, [fp, #-128]	; 0xffffff80
   15fd4:	ldr	r0, [fp, #-152]	; 0xffffff68
   15fd8:	cmp	sl, r0
   15fdc:	bne	16030 <__assert_fail@plt+0x488c>
   15fe0:	b	1605c <__assert_fail@plt+0x48b8>
   15fe4:	mov	r0, r4
   15fe8:	bl	161c8 <__assert_fail@plt+0x4a24>
   15fec:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15ff0:	cmp	r0, #0
   15ff4:	beq	16004 <__assert_fail@plt+0x4860>
   15ff8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15ffc:	cmp	r0, #0
   16000:	beq	1607c <__assert_fail@plt+0x48d8>
   16004:	mov	sl, #0
   16008:	strb	sl, [fp, #-76]	; 0xffffffb4
   1600c:	strb	sl, [fp, #-132]	; 0xffffff7c
   16010:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16014:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16018:	add	r0, r0, r1
   1601c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16020:	str	r0, [fp, #-72]	; 0xffffffb8
   16024:	ldr	r0, [fp, #-128]	; 0xffffff80
   16028:	add	r0, r0, r1
   1602c:	str	r0, [fp, #-128]	; 0xffffff80
   16030:	sub	r0, fp, #144	; 0x90
   16034:	bl	161c8 <__assert_fail@plt+0x4a24>
   16038:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1603c:	clz	r0, r2
   16040:	lsr	r1, r0, #5
   16044:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16048:	cmp	r0, #0
   1604c:	bne	15f08 <__assert_fail@plt+0x4764>
   16050:	cmp	r2, #0
   16054:	beq	15f08 <__assert_fail@plt+0x4764>
   16058:	b	16064 <__assert_fail@plt+0x48c0>
   1605c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16060:	str	r0, [r8]
   16064:	mov	r0, r9
   16068:	bl	19428 <__assert_fail@plt+0x7c84>
   1606c:	mov	r5, #1
   16070:	mov	r0, r5
   16074:	sub	sp, fp, #28
   16078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1607c:	bl	11774 <abort@plt>
   16080:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16084:	add	fp, sp, #24
   16088:	mov	r4, #0
   1608c:	cmn	r2, #-536870911	; 0xe0000001
   16090:	bhi	161bc <__assert_fail@plt+0x4a18>
   16094:	mov	r7, r0
   16098:	lsl	r0, r2, #2
   1609c:	mov	r8, r3
   160a0:	mov	r5, r2
   160a4:	mov	r6, r1
   160a8:	cmp	r0, #4016	; 0xfb0
   160ac:	bhi	160cc <__assert_fail@plt+0x4928>
   160b0:	add	r0, r0, #22
   160b4:	bic	r0, r0, #7
   160b8:	sub	r1, sp, r0
   160bc:	add	r0, r1, #15
   160c0:	bic	r0, r0, #15
   160c4:	mov	sp, r1
   160c8:	b	160d0 <__assert_fail@plt+0x492c>
   160cc:	bl	193c0 <__assert_fail@plt+0x7c1c>
   160d0:	cmp	r0, #0
   160d4:	beq	161bc <__assert_fail@plt+0x4a18>
   160d8:	mov	r1, #1
   160dc:	cmp	r5, #3
   160e0:	str	r1, [r0, #4]
   160e4:	bcc	16140 <__assert_fail@plt+0x499c>
   160e8:	mov	r1, #2
   160ec:	mov	r2, #0
   160f0:	add	r3, r1, r6
   160f4:	ldrb	r4, [r6, r2]
   160f8:	ldrb	r3, [r3, #-1]
   160fc:	cmp	r3, r4
   16100:	beq	1611c <__assert_fail@plt+0x4978>
   16104:	cmp	r2, #0
   16108:	beq	16128 <__assert_fail@plt+0x4984>
   1610c:	ldr	r4, [r0, r2, lsl #2]
   16110:	sub	r2, r2, r4
   16114:	ldrb	r4, [r6, r2]
   16118:	b	160fc <__assert_fail@plt+0x4958>
   1611c:	add	r2, r2, #1
   16120:	sub	r3, r1, r2
   16124:	b	16130 <__assert_fail@plt+0x498c>
   16128:	mov	r2, #0
   1612c:	mov	r3, r1
   16130:	str	r3, [r0, r1, lsl #2]
   16134:	add	r1, r1, #1
   16138:	cmp	r1, r5
   1613c:	bne	160f0 <__assert_fail@plt+0x494c>
   16140:	mov	r1, #0
   16144:	str	r1, [r8]
   16148:	ldrb	r3, [r7]
   1614c:	cmp	r3, #0
   16150:	beq	161b4 <__assert_fail@plt+0x4a10>
   16154:	mov	r2, r7
   16158:	ldrb	r4, [r6, r1]
   1615c:	uxtb	r3, r3
   16160:	cmp	r4, r3
   16164:	bne	1617c <__assert_fail@plt+0x49d8>
   16168:	add	r1, r1, #1
   1616c:	cmp	r1, r5
   16170:	beq	161b0 <__assert_fail@plt+0x4a0c>
   16174:	add	r7, r7, #1
   16178:	b	161a0 <__assert_fail@plt+0x49fc>
   1617c:	cmp	r1, #0
   16180:	beq	16194 <__assert_fail@plt+0x49f0>
   16184:	ldr	r3, [r0, r1, lsl #2]
   16188:	sub	r1, r1, r3
   1618c:	add	r2, r2, r3
   16190:	b	161a0 <__assert_fail@plt+0x49fc>
   16194:	add	r7, r7, #1
   16198:	add	r2, r2, #1
   1619c:	mov	r1, #0
   161a0:	ldrb	r3, [r7]
   161a4:	cmp	r3, #0
   161a8:	bne	16158 <__assert_fail@plt+0x49b4>
   161ac:	b	161b4 <__assert_fail@plt+0x4a10>
   161b0:	str	r2, [r8]
   161b4:	bl	19428 <__assert_fail@plt+0x7c84>
   161b8:	mov	r4, #1
   161bc:	mov	r0, r4
   161c0:	sub	sp, fp, #24
   161c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161c8:	push	{r4, r5, r6, r7, fp, lr}
   161cc:	add	fp, sp, #16
   161d0:	mov	r4, r0
   161d4:	ldrb	r0, [r0, #12]
   161d8:	cmp	r0, #0
   161dc:	popne	{r4, r5, r6, r7, fp, pc}
   161e0:	ldrb	r0, [r4]
   161e4:	ldr	r5, [r4, #16]
   161e8:	cmp	r0, #0
   161ec:	beq	16248 <__assert_fail@plt+0x4aa4>
   161f0:	bl	11528 <__ctype_get_mb_cur_max@plt>
   161f4:	mov	r1, r0
   161f8:	mov	r0, r5
   161fc:	bl	17f88 <__assert_fail@plt+0x67e4>
   16200:	add	r6, r4, #4
   16204:	add	r7, r4, #28
   16208:	mov	r2, r0
   1620c:	mov	r1, r5
   16210:	mov	r0, r7
   16214:	mov	r3, r6
   16218:	bl	191ac <__assert_fail@plt+0x7a08>
   1621c:	cmn	r0, #2
   16220:	str	r0, [r4, #20]
   16224:	beq	162c4 <__assert_fail@plt+0x4b20>
   16228:	cmp	r0, #0
   1622c:	beq	16280 <__assert_fail@plt+0x4adc>
   16230:	cmn	r0, #1
   16234:	bne	162a4 <__assert_fail@plt+0x4b00>
   16238:	mov	r0, #0
   1623c:	strb	r0, [r4, #24]
   16240:	mov	r0, #1
   16244:	b	162d4 <__assert_fail@plt+0x4b30>
   16248:	ldrb	r0, [r5]
   1624c:	movw	r2, #47952	; 0xbb50
   16250:	movt	r2, #1
   16254:	ubfx	r1, r0, #5, #3
   16258:	ldr	r1, [r2, r1, lsl #2]
   1625c:	and	r2, r0, #31
   16260:	mov	r0, #1
   16264:	tst	r1, r0, lsl r2
   16268:	beq	162e4 <__assert_fail@plt+0x4b40>
   1626c:	str	r0, [r4, #20]
   16270:	ldrb	r1, [r5]
   16274:	strb	r0, [r4, #24]
   16278:	str	r1, [r4, #28]
   1627c:	b	162d8 <__assert_fail@plt+0x4b34>
   16280:	mov	r0, #1
   16284:	str	r0, [r4, #20]
   16288:	ldr	r0, [r4, #16]
   1628c:	ldrb	r0, [r0]
   16290:	cmp	r0, #0
   16294:	bne	16300 <__assert_fail@plt+0x4b5c>
   16298:	ldr	r0, [r7]
   1629c:	cmp	r0, #0
   162a0:	bne	16318 <__assert_fail@plt+0x4b74>
   162a4:	mov	r0, #1
   162a8:	strb	r0, [r4, #24]
   162ac:	mov	r0, r6
   162b0:	bl	11480 <mbsinit@plt>
   162b4:	cmp	r0, #0
   162b8:	movne	r0, #0
   162bc:	strbne	r0, [r4]
   162c0:	b	162d8 <__assert_fail@plt+0x4b34>
   162c4:	ldr	r0, [r4, #16]
   162c8:	bl	11600 <strlen@plt>
   162cc:	mov	r1, #0
   162d0:	strb	r1, [r4, #24]
   162d4:	str	r0, [r4, #20]
   162d8:	mov	r0, #1
   162dc:	strb	r0, [r4, #12]
   162e0:	pop	{r4, r5, r6, r7, fp, pc}
   162e4:	add	r0, r4, #4
   162e8:	bl	11480 <mbsinit@plt>
   162ec:	cmp	r0, #0
   162f0:	beq	16330 <__assert_fail@plt+0x4b8c>
   162f4:	mov	r0, #1
   162f8:	strb	r0, [r4]
   162fc:	b	161f0 <__assert_fail@plt+0x4a4c>
   16300:	movw	r0, #46740	; 0xb694
   16304:	movw	r1, #46680	; 0xb658
   16308:	movw	r3, #46692	; 0xb664
   1630c:	mov	r2, #171	; 0xab
   16310:	movt	r0, #1
   16314:	b	16344 <__assert_fail@plt+0x4ba0>
   16318:	movw	r0, #46763	; 0xb6ab
   1631c:	movw	r1, #46680	; 0xb658
   16320:	movw	r3, #46692	; 0xb664
   16324:	mov	r2, #172	; 0xac
   16328:	movt	r0, #1
   1632c:	b	16344 <__assert_fail@plt+0x4ba0>
   16330:	movw	r0, #46657	; 0xb641
   16334:	movw	r1, #46680	; 0xb658
   16338:	movw	r3, #46692	; 0xb664
   1633c:	mov	r2, #143	; 0x8f
   16340:	movt	r0, #1
   16344:	movt	r1, #1
   16348:	movt	r3, #1
   1634c:	bl	117a4 <__assert_fail@plt>
   16350:	ldr	r2, [r0, #16]
   16354:	add	r1, r2, r1
   16358:	str	r1, [r0, #16]
   1635c:	bx	lr
   16360:	push	{r4, r5, r6, sl, fp, lr}
   16364:	add	fp, sp, #16
   16368:	mov	r5, r1
   1636c:	ldrb	r1, [r1]
   16370:	mov	r4, r0
   16374:	strb	r1, [r0], #4
   16378:	cmp	r1, #0
   1637c:	beq	1638c <__assert_fail@plt+0x4be8>
   16380:	ldmib	r5, {r1, r2}
   16384:	stm	r0, {r1, r2}
   16388:	b	16398 <__assert_fail@plt+0x4bf4>
   1638c:	mov	r1, #0
   16390:	str	r1, [r0]
   16394:	str	r1, [r0, #4]
   16398:	ldrb	r0, [r5, #12]
   1639c:	strb	r0, [r4, #12]
   163a0:	add	r0, r5, #32
   163a4:	ldr	r1, [r5, #16]
   163a8:	cmp	r1, r0
   163ac:	beq	163b8 <__assert_fail@plt+0x4c14>
   163b0:	mov	r6, r1
   163b4:	b	163c8 <__assert_fail@plt+0x4c24>
   163b8:	ldr	r2, [r5, #20]
   163bc:	add	r6, r4, #32
   163c0:	mov	r0, r6
   163c4:	bl	11468 <memcpy@plt>
   163c8:	str	r6, [r4, #16]
   163cc:	ldr	r0, [r5, #20]
   163d0:	str	r0, [r4, #20]
   163d4:	ldrb	r0, [r5, #24]
   163d8:	strb	r0, [r4, #24]
   163dc:	cmp	r0, #0
   163e0:	ldrne	r0, [r5, #28]
   163e4:	strne	r0, [r4, #28]
   163e8:	pop	{r4, r5, r6, sl, fp, pc}
   163ec:	push	{r4, r5, fp, lr}
   163f0:	add	fp, sp, #8
   163f4:	cmp	r0, #0
   163f8:	beq	1648c <__assert_fail@plt+0x4ce8>
   163fc:	mov	r1, #47	; 0x2f
   16400:	mov	r4, r0
   16404:	bl	116f0 <strrchr@plt>
   16408:	cmp	r0, #0
   1640c:	mov	r5, r4
   16410:	addne	r5, r0, #1
   16414:	sub	r0, r5, r4
   16418:	cmp	r0, #7
   1641c:	blt	16470 <__assert_fail@plt+0x4ccc>
   16420:	movw	r1, #46837	; 0xb6f5
   16424:	sub	r0, r5, #7
   16428:	mov	r2, #7
   1642c:	movt	r1, #1
   16430:	bl	11768 <strncmp@plt>
   16434:	cmp	r0, #0
   16438:	bne	16470 <__assert_fail@plt+0x4ccc>
   1643c:	movw	r1, #46845	; 0xb6fd
   16440:	mov	r0, r5
   16444:	mov	r2, #3
   16448:	movt	r1, #1
   1644c:	bl	11768 <strncmp@plt>
   16450:	cmp	r0, #0
   16454:	beq	16460 <__assert_fail@plt+0x4cbc>
   16458:	mov	r4, r5
   1645c:	b	16470 <__assert_fail@plt+0x4ccc>
   16460:	movw	r0, #49584	; 0xc1b0
   16464:	add	r4, r5, #3
   16468:	movt	r0, #2
   1646c:	str	r4, [r0]
   16470:	movw	r0, #49592	; 0xc1b8
   16474:	movt	r0, #2
   16478:	str	r4, [r0]
   1647c:	movw	r0, #49832	; 0xc2a8
   16480:	movt	r0, #2
   16484:	str	r4, [r0]
   16488:	pop	{r4, r5, fp, pc}
   1648c:	movw	r0, #49608	; 0xc1c8
   16490:	movt	r0, #2
   16494:	ldr	r1, [r0]
   16498:	movw	r0, #46781	; 0xb6bd
   1649c:	movt	r0, #1
   164a0:	bl	1175c <fputs@plt>
   164a4:	bl	11774 <abort@plt>
   164a8:	push	{r4, r5, r6, sl, fp, lr}
   164ac:	add	fp, sp, #16
   164b0:	mov	r4, r0
   164b4:	movw	r0, #49840	; 0xc2b0
   164b8:	movt	r0, #2
   164bc:	cmp	r4, #0
   164c0:	moveq	r4, r0
   164c4:	bl	11630 <__errno_location@plt>
   164c8:	ldr	r6, [r0]
   164cc:	mov	r5, r0
   164d0:	mov	r0, r4
   164d4:	mov	r1, #48	; 0x30
   164d8:	bl	1885c <__assert_fail@plt+0x70b8>
   164dc:	str	r6, [r5]
   164e0:	pop	{r4, r5, r6, sl, fp, pc}
   164e4:	movw	r1, #49840	; 0xc2b0
   164e8:	cmp	r0, #0
   164ec:	movt	r1, #2
   164f0:	movne	r1, r0
   164f4:	ldr	r0, [r1]
   164f8:	bx	lr
   164fc:	movw	r2, #49840	; 0xc2b0
   16500:	cmp	r0, #0
   16504:	movt	r2, #2
   16508:	movne	r2, r0
   1650c:	str	r1, [r2]
   16510:	bx	lr
   16514:	movw	r3, #49840	; 0xc2b0
   16518:	cmp	r0, #0
   1651c:	and	r2, r2, #1
   16520:	movt	r3, #2
   16524:	movne	r3, r0
   16528:	ubfx	r0, r1, #5, #3
   1652c:	and	r1, r1, #31
   16530:	add	ip, r3, r0, lsl #2
   16534:	mov	r0, #1
   16538:	ldr	r3, [ip, #8]
   1653c:	and	r0, r0, r3, lsr r1
   16540:	eor	r2, r0, r2
   16544:	eor	r1, r3, r2, lsl r1
   16548:	str	r1, [ip, #8]
   1654c:	bx	lr
   16550:	movw	r2, #49840	; 0xc2b0
   16554:	cmp	r0, #0
   16558:	movt	r2, #2
   1655c:	movne	r2, r0
   16560:	ldr	r0, [r2, #4]
   16564:	str	r1, [r2, #4]
   16568:	bx	lr
   1656c:	push	{fp, lr}
   16570:	mov	fp, sp
   16574:	movw	r3, #49840	; 0xc2b0
   16578:	cmp	r0, #0
   1657c:	movt	r3, #2
   16580:	movne	r3, r0
   16584:	cmp	r1, #0
   16588:	mov	r0, #10
   1658c:	cmpne	r2, #0
   16590:	str	r0, [r3]
   16594:	bne	1659c <__assert_fail@plt+0x4df8>
   16598:	bl	11774 <abort@plt>
   1659c:	str	r1, [r3, #40]	; 0x28
   165a0:	str	r2, [r3, #44]	; 0x2c
   165a4:	pop	{fp, pc}
   165a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165ac:	add	fp, sp, #28
   165b0:	sub	sp, sp, #20
   165b4:	mov	r7, r0
   165b8:	ldr	r0, [fp, #8]
   165bc:	movw	r5, #49840	; 0xc2b0
   165c0:	mov	r8, r3
   165c4:	mov	r9, r2
   165c8:	mov	sl, r1
   165cc:	movt	r5, #2
   165d0:	cmp	r0, #0
   165d4:	movne	r5, r0
   165d8:	bl	11630 <__errno_location@plt>
   165dc:	ldr	r2, [r5, #40]	; 0x28
   165e0:	ldr	r3, [r5, #44]	; 0x2c
   165e4:	mov	r4, r0
   165e8:	ldm	r5, {r0, r1}
   165ec:	add	r5, r5, #8
   165f0:	ldr	r6, [r4]
   165f4:	stm	sp, {r0, r1, r5}
   165f8:	mov	r0, r7
   165fc:	mov	r1, sl
   16600:	str	r2, [sp, #12]
   16604:	str	r3, [sp, #16]
   16608:	mov	r2, r9
   1660c:	mov	r3, r8
   16610:	bl	16620 <__assert_fail@plt+0x4e7c>
   16614:	str	r6, [r4]
   16618:	sub	sp, fp, #28
   1661c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16624:	add	fp, sp, #28
   16628:	sub	sp, sp, #156	; 0x9c
   1662c:	mov	r5, r0
   16630:	add	r0, r2, #1
   16634:	mov	r6, r1
   16638:	mov	sl, r3
   1663c:	str	r2, [fp, #-80]	; 0xffffffb0
   16640:	str	r0, [sp, #72]	; 0x48
   16644:	ldr	r0, [fp, #12]
   16648:	and	r1, r0, #1
   1664c:	str	r1, [sp, #32]
   16650:	and	r1, r0, #4
   16654:	str	r1, [sp, #28]
   16658:	ubfx	r9, r0, #1, #1
   1665c:	bl	11528 <__ctype_get_mb_cur_max@plt>
   16660:	str	r0, [sp, #40]	; 0x28
   16664:	ldr	r0, [fp, #24]
   16668:	ldr	r7, [fp, #8]
   1666c:	mov	r1, #0
   16670:	mov	lr, #0
   16674:	str	r5, [fp, #-84]	; 0xffffffac
   16678:	str	r1, [sp, #60]	; 0x3c
   1667c:	mov	r1, #1
   16680:	str	r1, [fp, #-48]	; 0xffffffd0
   16684:	str	r0, [sp, #80]	; 0x50
   16688:	ldr	r0, [fp, #20]
   1668c:	str	r0, [sp, #76]	; 0x4c
   16690:	mov	r0, #0
   16694:	str	r0, [sp, #56]	; 0x38
   16698:	mov	r0, #0
   1669c:	str	r0, [fp, #-88]	; 0xffffffa8
   166a0:	mov	r0, #0
   166a4:	str	r0, [fp, #-72]	; 0xffffffb8
   166a8:	mov	r0, #0
   166ac:	cmp	r7, #10
   166b0:	bhi	1768c <__assert_fail@plt+0x5ee8>
   166b4:	add	r1, pc, #24
   166b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   166bc:	mov	ip, r6
   166c0:	mov	r8, #0
   166c4:	mov	r2, #1
   166c8:	mov	r6, #0
   166cc:	mov	r3, sl
   166d0:	ldr	pc, [r1, r7, lsl #2]
   166d4:	andeq	r6, r1, r0, asr #15
   166d8:	andeq	r6, r1, r4, lsl r8
   166dc:	ldrdeq	r6, [r1], -r4
   166e0:			; <UNDEFINED> instruction: 0x000167b8
   166e4:	andeq	r6, r1, r8, lsl #16
   166e8:	andeq	r6, r1, ip, lsr r8
   166ec:	andeq	r6, r1, r4, ror #15
   166f0:	andeq	r6, r1, r0, asr #17
   166f4:	andeq	r6, r1, r0, lsl #14
   166f8:	andeq	r6, r1, r0, lsl #14
   166fc:	andeq	r6, r1, r0, asr #14
   16700:	movw	r0, #46927	; 0xb74f
   16704:	mov	r1, r7
   16708:	mov	r6, r5
   1670c:	mov	r4, ip
   16710:	mov	r5, lr
   16714:	movt	r0, #1
   16718:	bl	17df0 <__assert_fail@plt+0x664c>
   1671c:	str	r0, [sp, #76]	; 0x4c
   16720:	movw	r0, #46761	; 0xb6a9
   16724:	mov	r1, r7
   16728:	movt	r0, #1
   1672c:	bl	17df0 <__assert_fail@plt+0x664c>
   16730:	mov	lr, r5
   16734:	mov	r5, r6
   16738:	mov	ip, r4
   1673c:	str	r0, [sp, #80]	; 0x50
   16740:	mov	r8, #0
   16744:	tst	r9, #1
   16748:	str	lr, [sp, #44]	; 0x2c
   1674c:	bne	16784 <__assert_fail@plt+0x4fe0>
   16750:	ldr	r0, [sp, #76]	; 0x4c
   16754:	ldrb	r0, [r0]
   16758:	cmp	r0, #0
   1675c:	beq	16784 <__assert_fail@plt+0x4fe0>
   16760:	ldr	r1, [sp, #76]	; 0x4c
   16764:	mov	r8, #0
   16768:	add	r1, r1, #1
   1676c:	cmp	r8, ip
   16770:	strbcc	r0, [r5, r8]
   16774:	ldrb	r0, [r1, r8]
   16778:	add	r8, r8, #1
   1677c:	cmp	r0, #0
   16780:	bne	1676c <__assert_fail@plt+0x4fc8>
   16784:	ldr	r6, [sp, #80]	; 0x50
   16788:	mov	r4, ip
   1678c:	mov	r0, r6
   16790:	bl	11600 <strlen@plt>
   16794:	mov	ip, r4
   16798:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1679c:	ldr	lr, [sp, #44]	; 0x2c
   167a0:	str	r6, [fp, #-88]	; 0xffffffa8
   167a4:	str	r0, [fp, #-72]	; 0xffffffb8
   167a8:	mov	r2, #1
   167ac:	mov	r6, r9
   167b0:	mov	r3, sl
   167b4:	b	168c0 <__assert_fail@plt+0x511c>
   167b8:	mov	r0, #1
   167bc:	b	16814 <__assert_fail@plt+0x5070>
   167c0:	mov	r7, #0
   167c4:	mov	r8, #0
   167c8:	mov	r2, r0
   167cc:	mov	r6, #0
   167d0:	b	168c0 <__assert_fail@plt+0x511c>
   167d4:	tst	r9, #1
   167d8:	bne	16814 <__assert_fail@plt+0x5070>
   167dc:	mov	r2, r0
   167e0:	b	1686c <__assert_fail@plt+0x50c8>
   167e4:	mov	r0, #1
   167e8:	mov	r8, #0
   167ec:	mov	r7, #5
   167f0:	mov	r2, #1
   167f4:	str	r0, [fp, #-72]	; 0xffffffb8
   167f8:	movw	r0, #46925	; 0xb74d
   167fc:	movt	r0, #1
   16800:	str	r0, [fp, #-88]	; 0xffffffa8
   16804:	b	16834 <__assert_fail@plt+0x5090>
   16808:	mov	r2, #1
   1680c:	tst	r9, #1
   16810:	beq	1686c <__assert_fail@plt+0x50c8>
   16814:	mov	r1, #1
   16818:	mov	r8, #0
   1681c:	mov	r7, #2
   16820:	mov	r2, r0
   16824:	str	r1, [fp, #-72]	; 0xffffffb8
   16828:	movw	r1, #46761	; 0xb6a9
   1682c:	movt	r1, #1
   16830:	str	r1, [fp, #-88]	; 0xffffffa8
   16834:	mov	r6, #1
   16838:	b	168c0 <__assert_fail@plt+0x511c>
   1683c:	tst	r9, #1
   16840:	beq	16890 <__assert_fail@plt+0x50ec>
   16844:	mov	r0, #1
   16848:	mov	r8, #0
   1684c:	mov	r2, #1
   16850:	mov	r6, #1
   16854:	mov	r7, #5
   16858:	str	r0, [fp, #-72]	; 0xffffffb8
   1685c:	movw	r0, #46925	; 0xb74d
   16860:	movt	r0, #1
   16864:	str	r0, [fp, #-88]	; 0xffffffa8
   16868:	b	168c0 <__assert_fail@plt+0x511c>
   1686c:	cmp	ip, #0
   16870:	mov	r8, #1
   16874:	mov	r6, #0
   16878:	mov	r7, #2
   1687c:	movne	r0, #39	; 0x27
   16880:	strbne	r0, [r5]
   16884:	movw	r0, #46761	; 0xb6a9
   16888:	movt	r0, #1
   1688c:	b	168b4 <__assert_fail@plt+0x5110>
   16890:	cmp	ip, #0
   16894:	mov	r8, #1
   16898:	mov	r2, #1
   1689c:	mov	r7, #5
   168a0:	mov	r6, #0
   168a4:	movne	r0, #34	; 0x22
   168a8:	strbne	r0, [r5]
   168ac:	movw	r0, #46925	; 0xb74d
   168b0:	movt	r0, #1
   168b4:	str	r0, [fp, #-88]	; 0xffffffa8
   168b8:	mov	r0, #1
   168bc:	str	r0, [fp, #-72]	; 0xffffffb8
   168c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   168c4:	str	r7, [fp, #-68]	; 0xffffffbc
   168c8:	str	r6, [fp, #-76]	; 0xffffffb4
   168cc:	str	r2, [sp, #84]	; 0x54
   168d0:	cmp	r0, #0
   168d4:	movwne	r0, #1
   168d8:	and	r1, r0, r6
   168dc:	and	r1, r2, r1
   168e0:	str	r1, [sp, #48]	; 0x30
   168e4:	sub	r1, r7, #2
   168e8:	clz	r1, r1
   168ec:	lsr	r1, r1, #5
   168f0:	and	r1, r1, r6
   168f4:	str	r1, [sp, #64]	; 0x40
   168f8:	subs	r1, r7, #2
   168fc:	eor	r7, r6, #1
   16900:	movwne	r1, #1
   16904:	str	r7, [sp, #92]	; 0x5c
   16908:	orr	r7, r1, r7
   1690c:	and	r1, r1, r2
   16910:	and	r0, r0, r1
   16914:	str	r7, [sp, #68]	; 0x44
   16918:	mov	r7, #0
   1691c:	str	r0, [fp, #-60]	; 0xffffffc4
   16920:	orr	r0, r1, r6
   16924:	ldr	r1, [fp, #16]
   16928:	eor	r0, r0, #1
   1692c:	clz	r1, r1
   16930:	lsr	r1, r1, #5
   16934:	orr	r0, r1, r0
   16938:	str	r0, [fp, #-64]	; 0xffffffc0
   1693c:	eor	r0, r2, #1
   16940:	str	r0, [sp, #52]	; 0x34
   16944:	cmn	r3, #1
   16948:	beq	16958 <__assert_fail@plt+0x51b4>
   1694c:	cmp	r7, r3
   16950:	bne	16964 <__assert_fail@plt+0x51c0>
   16954:	b	174c0 <__assert_fail@plt+0x5d1c>
   16958:	ldrb	r0, [r4, r7]
   1695c:	cmp	r0, #0
   16960:	beq	174c8 <__assert_fail@plt+0x5d24>
   16964:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16968:	cmp	r0, #0
   1696c:	beq	169b4 <__assert_fail@plt+0x5210>
   16970:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16974:	add	r5, r7, r0
   16978:	cmp	r0, #2
   1697c:	bcc	169c8 <__assert_fail@plt+0x5224>
   16980:	mov	r0, #0
   16984:	cmn	r3, #1
   16988:	str	r0, [fp, #-56]	; 0xffffffc8
   1698c:	bne	169d0 <__assert_fail@plt+0x522c>
   16990:	mov	r0, r4
   16994:	mov	r4, ip
   16998:	mov	r6, lr
   1699c:	bl	11600 <strlen@plt>
   169a0:	mov	ip, r4
   169a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   169a8:	mov	lr, r6
   169ac:	mov	r3, r0
   169b0:	b	169d0 <__assert_fail@plt+0x522c>
   169b4:	mov	r0, #0
   169b8:	mov	sl, r3
   169bc:	str	r0, [fp, #-56]	; 0xffffffc8
   169c0:	mov	r0, #0
   169c4:	b	16a3c <__assert_fail@plt+0x5298>
   169c8:	mov	r0, #0
   169cc:	str	r0, [fp, #-56]	; 0xffffffc8
   169d0:	cmp	r5, r3
   169d4:	bls	169e8 <__assert_fail@plt+0x5244>
   169d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   169dc:	mov	r0, #0
   169e0:	mov	sl, r3
   169e4:	b	16a3c <__assert_fail@plt+0x5298>
   169e8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   169ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   169f0:	add	r0, r4, r7
   169f4:	mov	r5, lr
   169f8:	mov	r6, ip
   169fc:	mov	sl, r3
   16a00:	bl	115e8 <bcmp@plt>
   16a04:	ldr	r2, [sp, #92]	; 0x5c
   16a08:	cmp	r0, #0
   16a0c:	ldr	r3, [fp, #-84]	; 0xffffffac
   16a10:	mov	r1, r0
   16a14:	movwne	r1, #1
   16a18:	orr	r1, r1, r2
   16a1c:	tst	r1, #1
   16a20:	beq	1754c <__assert_fail@plt+0x5da8>
   16a24:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16a28:	clz	r0, r0
   16a2c:	mov	lr, r5
   16a30:	mov	ip, r6
   16a34:	mov	r5, r3
   16a38:	lsr	r0, r0, #5
   16a3c:	str	r0, [fp, #-52]	; 0xffffffcc
   16a40:	ldrb	r6, [r4, r7]
   16a44:	cmp	r6, #126	; 0x7e
   16a48:	bhi	16f70 <__assert_fail@plt+0x57cc>
   16a4c:	add	r3, pc, #16
   16a50:	mov	r9, #1
   16a54:	mov	r2, #110	; 0x6e
   16a58:	mov	r0, #97	; 0x61
   16a5c:	mov	r1, #0
   16a60:	ldr	pc, [r3, r6, lsl #2]
   16a64:	ldrdeq	r6, [r1], -r4
   16a68:	andeq	r6, r1, r0, ror pc
   16a6c:	andeq	r6, r1, r0, ror pc
   16a70:	andeq	r6, r1, r0, ror pc
   16a74:	andeq	r6, r1, r0, ror pc
   16a78:	andeq	r6, r1, r0, ror pc
   16a7c:	andeq	r6, r1, r0, ror pc
   16a80:	strdeq	r6, [r1], -r0
   16a84:			; <UNDEFINED> instruction: 0x00016db4
   16a88:	andeq	r6, r1, ip, lsr #27
   16a8c:	andeq	r6, r1, r0, asr #27
   16a90:	ldrdeq	r6, [r1], -r8
   16a94:	andeq	r6, r1, r4, lsr #27
   16a98:			; <UNDEFINED> instruction: 0x00016dbc
   16a9c:	andeq	r6, r1, r0, ror pc
   16aa0:	andeq	r6, r1, r0, ror pc
   16aa4:	andeq	r6, r1, r0, ror pc
   16aa8:	andeq	r6, r1, r0, ror pc
   16aac:	andeq	r6, r1, r0, ror pc
   16ab0:	andeq	r6, r1, r0, ror pc
   16ab4:	andeq	r6, r1, r0, ror pc
   16ab8:	andeq	r6, r1, r0, ror pc
   16abc:	andeq	r6, r1, r0, ror pc
   16ac0:	andeq	r6, r1, r0, ror pc
   16ac4:	andeq	r6, r1, r0, ror pc
   16ac8:	andeq	r6, r1, r0, ror pc
   16acc:	andeq	r6, r1, r0, ror pc
   16ad0:	andeq	r6, r1, r0, ror pc
   16ad4:	andeq	r6, r1, r0, ror pc
   16ad8:	andeq	r6, r1, r0, ror pc
   16adc:	andeq	r6, r1, r0, ror pc
   16ae0:	andeq	r6, r1, r0, ror pc
   16ae4:	andeq	r6, r1, r4, asr sp
   16ae8:	andeq	r6, r1, r8, asr sp
   16aec:	andeq	r6, r1, r8, asr sp
   16af0:	andeq	r6, r1, ip, lsr sp
   16af4:	andeq	r6, r1, r8, asr sp
   16af8:	andeq	r6, r1, r0, ror #24
   16afc:	andeq	r6, r1, r8, asr sp
   16b00:	andeq	r6, r1, r0, ror #29
   16b04:	andeq	r6, r1, r8, asr sp
   16b08:	andeq	r6, r1, r8, asr sp
   16b0c:	andeq	r6, r1, r8, asr sp
   16b10:	andeq	r6, r1, r0, ror #24
   16b14:	andeq	r6, r1, r0, ror #24
   16b18:	andeq	r6, r1, r0, ror #24
   16b1c:	andeq	r6, r1, r0, ror #24
   16b20:	andeq	r6, r1, r0, ror #24
   16b24:	andeq	r6, r1, r0, ror #24
   16b28:	andeq	r6, r1, r0, ror #24
   16b2c:	andeq	r6, r1, r0, ror #24
   16b30:	andeq	r6, r1, r0, ror #24
   16b34:	andeq	r6, r1, r0, ror #24
   16b38:	andeq	r6, r1, r0, ror #24
   16b3c:	andeq	r6, r1, r0, ror #24
   16b40:	andeq	r6, r1, r0, ror #24
   16b44:	andeq	r6, r1, r0, ror #24
   16b48:	andeq	r6, r1, r0, ror #24
   16b4c:	andeq	r6, r1, r0, ror #24
   16b50:	andeq	r6, r1, r8, asr sp
   16b54:	andeq	r6, r1, r8, asr sp
   16b58:	andeq	r6, r1, r8, asr sp
   16b5c:	andeq	r6, r1, r8, asr sp
   16b60:	andeq	r6, r1, ip, lsr #29
   16b64:	andeq	r6, r1, r0, ror pc
   16b68:	andeq	r6, r1, r0, ror #24
   16b6c:	andeq	r6, r1, r0, ror #24
   16b70:	andeq	r6, r1, r0, ror #24
   16b74:	andeq	r6, r1, r0, ror #24
   16b78:	andeq	r6, r1, r0, ror #24
   16b7c:	andeq	r6, r1, r0, ror #24
   16b80:	andeq	r6, r1, r0, ror #24
   16b84:	andeq	r6, r1, r0, ror #24
   16b88:	andeq	r6, r1, r0, ror #24
   16b8c:	andeq	r6, r1, r0, ror #24
   16b90:	andeq	r6, r1, r0, ror #24
   16b94:	andeq	r6, r1, r0, ror #24
   16b98:	andeq	r6, r1, r0, ror #24
   16b9c:	andeq	r6, r1, r0, ror #24
   16ba0:	andeq	r6, r1, r0, ror #24
   16ba4:	andeq	r6, r1, r0, ror #24
   16ba8:	andeq	r6, r1, r0, ror #24
   16bac:	andeq	r6, r1, r0, ror #24
   16bb0:	andeq	r6, r1, r0, ror #24
   16bb4:	andeq	r6, r1, r0, ror #24
   16bb8:	andeq	r6, r1, r0, ror #24
   16bbc:	andeq	r6, r1, r0, ror #24
   16bc0:	andeq	r6, r1, r0, ror #24
   16bc4:	andeq	r6, r1, r0, ror #24
   16bc8:	andeq	r6, r1, r0, ror #24
   16bcc:	andeq	r6, r1, r0, ror #24
   16bd0:	andeq	r6, r1, r8, asr sp
   16bd4:	andeq	r6, r1, r0, lsl #27
   16bd8:	andeq	r6, r1, r0, ror #24
   16bdc:	andeq	r6, r1, r8, asr sp
   16be0:	andeq	r6, r1, r0, ror #24
   16be4:	andeq	r6, r1, r8, asr sp
   16be8:	andeq	r6, r1, r0, ror #24
   16bec:	andeq	r6, r1, r0, ror #24
   16bf0:	andeq	r6, r1, r0, ror #24
   16bf4:	andeq	r6, r1, r0, ror #24
   16bf8:	andeq	r6, r1, r0, ror #24
   16bfc:	andeq	r6, r1, r0, ror #24
   16c00:	andeq	r6, r1, r0, ror #24
   16c04:	andeq	r6, r1, r0, ror #24
   16c08:	andeq	r6, r1, r0, ror #24
   16c0c:	andeq	r6, r1, r0, ror #24
   16c10:	andeq	r6, r1, r0, ror #24
   16c14:	andeq	r6, r1, r0, ror #24
   16c18:	andeq	r6, r1, r0, ror #24
   16c1c:	andeq	r6, r1, r0, ror #24
   16c20:	andeq	r6, r1, r0, ror #24
   16c24:	andeq	r6, r1, r0, ror #24
   16c28:	andeq	r6, r1, r0, ror #24
   16c2c:	andeq	r6, r1, r0, ror #24
   16c30:	andeq	r6, r1, r0, ror #24
   16c34:	andeq	r6, r1, r0, ror #24
   16c38:	andeq	r6, r1, r0, ror #24
   16c3c:	andeq	r6, r1, r0, ror #24
   16c40:	andeq	r6, r1, r0, ror #24
   16c44:	andeq	r6, r1, r0, ror #24
   16c48:	andeq	r6, r1, r0, ror #24
   16c4c:	andeq	r6, r1, r0, ror #24
   16c50:	andeq	r6, r1, r4, lsl sp
   16c54:	andeq	r6, r1, r8, asr sp
   16c58:	andeq	r6, r1, r4, lsl sp
   16c5c:	andeq	r6, r1, ip, lsr sp
   16c60:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16c64:	tst	r0, #1
   16c68:	bne	16c94 <__assert_fail@plt+0x54f0>
   16c6c:	ldr	r1, [fp, #16]
   16c70:	ubfx	r0, r6, #5, #3
   16c74:	mov	r2, #1
   16c78:	ldr	r0, [r1, r0, lsl #2]
   16c7c:	and	r1, r6, #31
   16c80:	tst	r0, r2, lsl r1
   16c84:	beq	16c94 <__assert_fail@plt+0x54f0>
   16c88:	mov	r0, r6
   16c8c:	mov	r1, r9
   16c90:	b	16ca8 <__assert_fail@plt+0x5504>
   16c94:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16c98:	mov	r1, r9
   16c9c:	cmp	r0, #0
   16ca0:	mov	r0, r6
   16ca4:	beq	173f4 <__assert_fail@plt+0x5c50>
   16ca8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16cac:	tst	r2, #1
   16cb0:	bne	17590 <__assert_fail@plt+0x5dec>
   16cb4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16cb8:	subs	r2, r2, #2
   16cbc:	movwne	r2, #1
   16cc0:	orr	r2, r2, lr
   16cc4:	tst	r2, #1
   16cc8:	bne	16d00 <__assert_fail@plt+0x555c>
   16ccc:	cmp	r8, ip
   16cd0:	mov	lr, #1
   16cd4:	movcc	r2, #39	; 0x27
   16cd8:	strbcc	r2, [r5, r8]
   16cdc:	add	r2, r8, #1
   16ce0:	cmp	r2, ip
   16ce4:	movcc	r3, #36	; 0x24
   16ce8:	strbcc	r3, [r5, r2]
   16cec:	add	r2, r8, #2
   16cf0:	add	r8, r8, #3
   16cf4:	cmp	r2, ip
   16cf8:	movcc	r3, #39	; 0x27
   16cfc:	strbcc	r3, [r5, r2]
   16d00:	cmp	r8, ip
   16d04:	movcc	r2, #92	; 0x5c
   16d08:	strbcc	r2, [r5, r8]
   16d0c:	add	r8, r8, #1
   16d10:	b	17434 <__assert_fail@plt+0x5c90>
   16d14:	cmp	sl, #1
   16d18:	beq	16d3c <__assert_fail@plt+0x5598>
   16d1c:	mov	r9, #0
   16d20:	cmn	sl, #1
   16d24:	bne	16d48 <__assert_fail@plt+0x55a4>
   16d28:	ldrb	r0, [r4, #1]
   16d2c:	cmp	r0, #0
   16d30:	beq	16d3c <__assert_fail@plt+0x5598>
   16d34:	mvn	sl, #0
   16d38:	b	16d48 <__assert_fail@plt+0x55a4>
   16d3c:	mov	r9, #0
   16d40:	cmp	r7, #0
   16d44:	beq	16d54 <__assert_fail@plt+0x55b0>
   16d48:	mov	r0, #0
   16d4c:	str	r0, [fp, #-56]	; 0xffffffc8
   16d50:	b	16c60 <__assert_fail@plt+0x54bc>
   16d54:	mov	r1, #1
   16d58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16d5c:	cmp	r0, #2
   16d60:	bne	16d78 <__assert_fail@plt+0x55d4>
   16d64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16d68:	mov	r9, r1
   16d6c:	tst	r0, #1
   16d70:	beq	16c60 <__assert_fail@plt+0x54bc>
   16d74:	b	17590 <__assert_fail@plt+0x5dec>
   16d78:	mov	r9, r1
   16d7c:	b	16c60 <__assert_fail@plt+0x54bc>
   16d80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16d84:	cmp	r0, #2
   16d88:	bne	16fcc <__assert_fail@plt+0x5828>
   16d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16d90:	tst	r0, #1
   16d94:	bne	17590 <__assert_fail@plt+0x5dec>
   16d98:	mov	r0, #0
   16d9c:	str	r0, [fp, #-56]	; 0xffffffc8
   16da0:	b	16fe4 <__assert_fail@plt+0x5840>
   16da4:	mov	r0, #102	; 0x66
   16da8:	b	16ff0 <__assert_fail@plt+0x584c>
   16dac:	mov	r2, #116	; 0x74
   16db0:	b	16dc0 <__assert_fail@plt+0x561c>
   16db4:	mov	r0, #98	; 0x62
   16db8:	b	16ff0 <__assert_fail@plt+0x584c>
   16dbc:	mov	r2, #114	; 0x72
   16dc0:	ldr	r0, [sp, #68]	; 0x44
   16dc4:	tst	r0, #1
   16dc8:	mov	r0, r2
   16dcc:	bne	16ff0 <__assert_fail@plt+0x584c>
   16dd0:	b	17590 <__assert_fail@plt+0x5dec>
   16dd4:	ldr	r0, [sp, #84]	; 0x54
   16dd8:	tst	r0, #1
   16ddc:	beq	17010 <__assert_fail@plt+0x586c>
   16de0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16de4:	tst	r0, #1
   16de8:	bne	1767c <__assert_fail@plt+0x5ed8>
   16dec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16df0:	mov	r2, sl
   16df4:	subs	r0, r0, #2
   16df8:	movwne	r0, #1
   16dfc:	orr	r0, r0, lr
   16e00:	tst	r0, #1
   16e04:	bne	16e3c <__assert_fail@plt+0x5698>
   16e08:	cmp	r8, ip
   16e0c:	mov	lr, #1
   16e10:	movcc	r0, #39	; 0x27
   16e14:	strbcc	r0, [r5, r8]
   16e18:	add	r0, r8, #1
   16e1c:	cmp	r0, ip
   16e20:	movcc	r1, #36	; 0x24
   16e24:	strbcc	r1, [r5, r0]
   16e28:	add	r0, r8, #2
   16e2c:	add	r8, r8, #3
   16e30:	cmp	r0, ip
   16e34:	movcc	r1, #39	; 0x27
   16e38:	strbcc	r1, [r5, r0]
   16e3c:	mov	r1, #1
   16e40:	cmp	r8, ip
   16e44:	mov	r9, #0
   16e48:	mov	r6, #48	; 0x30
   16e4c:	str	r1, [fp, #-56]	; 0xffffffc8
   16e50:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e54:	movcc	r0, #92	; 0x5c
   16e58:	strbcc	r0, [r5, r8]
   16e5c:	add	r0, r8, #1
   16e60:	cmp	r1, #2
   16e64:	beq	1716c <__assert_fail@plt+0x59c8>
   16e68:	add	r1, r7, #1
   16e6c:	cmp	r1, r2
   16e70:	bcs	1716c <__assert_fail@plt+0x59c8>
   16e74:	ldrb	r1, [r4, r1]
   16e78:	sub	r1, r1, #48	; 0x30
   16e7c:	uxtb	r1, r1
   16e80:	cmp	r1, #9
   16e84:	bhi	1716c <__assert_fail@plt+0x59c8>
   16e88:	cmp	r0, ip
   16e8c:	movcc	r1, #48	; 0x30
   16e90:	strbcc	r1, [r5, r0]
   16e94:	add	r0, r8, #2
   16e98:	add	r8, r8, #3
   16e9c:	cmp	r0, ip
   16ea0:	movcc	r1, #48	; 0x30
   16ea4:	strbcc	r1, [r5, r0]
   16ea8:	b	16c60 <__assert_fail@plt+0x54bc>
   16eac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16eb0:	mov	r6, #63	; 0x3f
   16eb4:	cmp	r0, #5
   16eb8:	beq	17174 <__assert_fail@plt+0x59d0>
   16ebc:	mov	r1, #0
   16ec0:	cmp	r0, #2
   16ec4:	str	r1, [fp, #-56]	; 0xffffffc8
   16ec8:	bne	17228 <__assert_fail@plt+0x5a84>
   16ecc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ed0:	mov	r9, #0
   16ed4:	b	16d6c <__assert_fail@plt+0x55c8>
   16ed8:	mov	r0, #118	; 0x76
   16edc:	b	16ff0 <__assert_fail@plt+0x584c>
   16ee0:	mov	r0, #1
   16ee4:	mov	r6, #39	; 0x27
   16ee8:	str	r0, [sp, #60]	; 0x3c
   16eec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16ef0:	cmp	r0, #2
   16ef4:	bne	16f68 <__assert_fail@plt+0x57c4>
   16ef8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16efc:	tst	r0, #1
   16f00:	bne	17590 <__assert_fail@plt+0x5dec>
   16f04:	ldr	r2, [sp, #56]	; 0x38
   16f08:	clz	r1, ip
   16f0c:	mov	lr, #0
   16f10:	lsr	r1, r1, #5
   16f14:	cmp	r2, #0
   16f18:	mov	r0, r2
   16f1c:	movwne	r0, #1
   16f20:	orrs	r0, r0, r1
   16f24:	moveq	r2, ip
   16f28:	moveq	ip, r0
   16f2c:	cmp	r8, ip
   16f30:	str	r2, [sp, #56]	; 0x38
   16f34:	movcc	r0, #39	; 0x27
   16f38:	strbcc	r0, [r5, r8]
   16f3c:	add	r0, r8, #1
   16f40:	cmp	r0, ip
   16f44:	movcc	r1, #92	; 0x5c
   16f48:	strbcc	r1, [r5, r0]
   16f4c:	add	r0, r8, #2
   16f50:	add	r8, r8, #3
   16f54:	cmp	r0, ip
   16f58:	movcc	r1, #39	; 0x27
   16f5c:	strbcc	r1, [r5, r0]
   16f60:	mov	r0, #0
   16f64:	str	r0, [fp, #-56]	; 0xffffffc8
   16f68:	mov	r9, #1
   16f6c:	b	16c60 <__assert_fail@plt+0x54bc>
   16f70:	ldr	r0, [sp, #40]	; 0x28
   16f74:	str	lr, [sp, #44]	; 0x2c
   16f78:	str	ip, [sp, #88]	; 0x58
   16f7c:	cmp	r0, #1
   16f80:	bne	17030 <__assert_fail@plt+0x588c>
   16f84:	str	sl, [sp, #36]	; 0x24
   16f88:	bl	115c4 <__ctype_b_loc@plt>
   16f8c:	ldr	r0, [r0]
   16f90:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16f94:	mov	r1, #1
   16f98:	add	r0, r0, r6, lsl #1
   16f9c:	ldrb	r0, [r0, #1]
   16fa0:	ubfx	r9, r0, #6, #1
   16fa4:	ldr	r0, [sp, #52]	; 0x34
   16fa8:	ldr	lr, [sp, #44]	; 0x2c
   16fac:	cmp	r1, #1
   16fb0:	orr	r3, r9, r0
   16fb4:	bhi	17230 <__assert_fail@plt+0x5a8c>
   16fb8:	tst	r3, #1
   16fbc:	beq	17230 <__assert_fail@plt+0x5a8c>
   16fc0:	ldr	sl, [sp, #36]	; 0x24
   16fc4:	ldr	ip, [sp, #88]	; 0x58
   16fc8:	b	16c60 <__assert_fail@plt+0x54bc>
   16fcc:	ldr	r1, [sp, #48]	; 0x30
   16fd0:	mov	r0, #0
   16fd4:	str	r0, [fp, #-56]	; 0xffffffc8
   16fd8:	mov	r0, #92	; 0x5c
   16fdc:	cmp	r1, #0
   16fe0:	beq	16ff0 <__assert_fail@plt+0x584c>
   16fe4:	mov	r6, #92	; 0x5c
   16fe8:	mov	r9, #0
   16fec:	b	173f4 <__assert_fail@plt+0x5c50>
   16ff0:	mov	r1, #0
   16ff4:	mov	r9, #0
   16ff8:	str	r1, [fp, #-56]	; 0xffffffc8
   16ffc:	ldr	r1, [sp, #84]	; 0x54
   17000:	tst	r1, #1
   17004:	mov	r1, #0
   17008:	beq	16c60 <__assert_fail@plt+0x54bc>
   1700c:	b	16ca8 <__assert_fail@plt+0x5504>
   17010:	ldr	r0, [sp, #32]
   17014:	mov	r6, #0
   17018:	mov	r9, #0
   1701c:	cmp	r0, #0
   17020:	mov	r0, #0
   17024:	str	r0, [fp, #-56]	; 0xffffffc8
   17028:	beq	16c60 <__assert_fail@plt+0x54bc>
   1702c:	b	1744c <__assert_fail@plt+0x5ca8>
   17030:	mov	r0, #0
   17034:	cmn	sl, #1
   17038:	sub	r3, fp, #40	; 0x28
   1703c:	str	r0, [fp, #-36]	; 0xffffffdc
   17040:	str	r0, [fp, #-40]	; 0xffffffd8
   17044:	bne	1705c <__assert_fail@plt+0x58b8>
   17048:	mov	r0, r4
   1704c:	bl	11600 <strlen@plt>
   17050:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17054:	sub	r3, fp, #40	; 0x28
   17058:	mov	sl, r0
   1705c:	ldr	r0, [sp, #72]	; 0x48
   17060:	mov	r9, #1
   17064:	mov	r1, #0
   17068:	str	sl, [sp, #36]	; 0x24
   1706c:	add	r0, r0, r7
   17070:	str	r0, [sp, #20]
   17074:	add	r0, r1, r7
   17078:	str	r1, [sp, #24]
   1707c:	add	r1, r4, r0
   17080:	mov	r4, r0
   17084:	sub	r2, sl, r0
   17088:	sub	r0, fp, #44	; 0x2c
   1708c:	bl	191ac <__assert_fail@plt+0x7a08>
   17090:	cmp	r0, #0
   17094:	beq	174a0 <__assert_fail@plt+0x5cfc>
   17098:	cmn	r0, #1
   1709c:	beq	17458 <__assert_fail@plt+0x5cb4>
   170a0:	ldr	r2, [sp, #36]	; 0x24
   170a4:	cmn	r0, #2
   170a8:	beq	17460 <__assert_fail@plt+0x5cbc>
   170ac:	ldr	r2, [sp, #64]	; 0x40
   170b0:	ldr	ip, [sp, #88]	; 0x58
   170b4:	ldr	r4, [sp, #84]	; 0x54
   170b8:	ldr	lr, [fp, #-48]	; 0xffffffd0
   170bc:	cmp	r0, #2
   170c0:	mov	r1, #0
   170c4:	movwcc	r1, #1
   170c8:	eor	r2, r2, #1
   170cc:	orrs	r1, r2, r1
   170d0:	bne	17120 <__assert_fail@plt+0x597c>
   170d4:	ldr	r1, [sp, #24]
   170d8:	ldr	r2, [sp, #20]
   170dc:	add	r1, r2, r1
   170e0:	sub	r2, r0, #1
   170e4:	ldrb	r3, [r1]
   170e8:	sub	r5, r3, #94	; 0x5e
   170ec:	cmp	r5, #30
   170f0:	bhi	17108 <__assert_fail@plt+0x5964>
   170f4:	mov	r4, #1
   170f8:	mov	sl, #1073741829	; 0x40000005
   170fc:	tst	sl, r4, lsl r5
   17100:	ldr	r4, [sp, #84]	; 0x54
   17104:	bne	17568 <__assert_fail@plt+0x5dc4>
   17108:	sub	r3, r3, #91	; 0x5b
   1710c:	cmp	r3, #2
   17110:	bcc	17568 <__assert_fail@plt+0x5dc4>
   17114:	add	r1, r1, #1
   17118:	subs	r2, r2, #1
   1711c:	bne	170e4 <__assert_fail@plt+0x5940>
   17120:	ldr	r5, [sp, #24]
   17124:	str	lr, [fp, #-48]	; 0xffffffd0
   17128:	add	r5, r0, r5
   1712c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17130:	bl	114ec <iswprint@plt>
   17134:	cmp	r0, #0
   17138:	sub	r4, fp, #40	; 0x28
   1713c:	movwne	r0, #1
   17140:	and	r9, r9, r0
   17144:	mov	r0, r4
   17148:	bl	11480 <mbsinit@plt>
   1714c:	mov	r1, r5
   17150:	mov	r3, r4
   17154:	ldr	sl, [sp, #36]	; 0x24
   17158:	ldr	r5, [fp, #-84]	; 0xffffffac
   1715c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17160:	cmp	r0, #0
   17164:	beq	17074 <__assert_fail@plt+0x58d0>
   17168:	b	16fa4 <__assert_fail@plt+0x5800>
   1716c:	mov	r8, r0
   17170:	b	16c60 <__assert_fail@plt+0x54bc>
   17174:	mov	r0, #0
   17178:	str	r0, [fp, #-56]	; 0xffffffc8
   1717c:	ldr	r0, [sp, #28]
   17180:	cmp	r0, #0
   17184:	beq	17228 <__assert_fail@plt+0x5a84>
   17188:	add	r0, r7, #2
   1718c:	mov	r1, sl
   17190:	cmp	r0, sl
   17194:	bcs	17228 <__assert_fail@plt+0x5a84>
   17198:	add	r1, r7, r4
   1719c:	ldrb	r1, [r1, #1]
   171a0:	cmp	r1, #63	; 0x3f
   171a4:	bne	17228 <__assert_fail@plt+0x5a84>
   171a8:	ldrb	r9, [r4, r0]
   171ac:	sub	r2, r9, #33	; 0x21
   171b0:	cmp	r2, #29
   171b4:	bhi	17228 <__assert_fail@plt+0x5a84>
   171b8:	mov	r1, r4
   171bc:	movw	r4, #20929	; 0x51c1
   171c0:	mov	r3, #1
   171c4:	movt	r4, #14336	; 0x3800
   171c8:	tst	r4, r3, lsl r2
   171cc:	beq	174b4 <__assert_fail@plt+0x5d10>
   171d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   171d4:	tst	r2, #1
   171d8:	bne	17684 <__assert_fail@plt+0x5ee0>
   171dc:	cmp	r8, ip
   171e0:	mov	r4, r1
   171e4:	mov	r7, r0
   171e8:	mov	r6, r9
   171ec:	movcc	r2, #63	; 0x3f
   171f0:	strbcc	r2, [r5, r8]
   171f4:	add	r2, r8, #1
   171f8:	cmp	r2, ip
   171fc:	movcc	r3, #34	; 0x22
   17200:	strbcc	r3, [r5, r2]
   17204:	add	r2, r8, #2
   17208:	cmp	r2, ip
   1720c:	movcc	r3, #34	; 0x22
   17210:	strbcc	r3, [r5, r2]
   17214:	add	r2, r8, #3
   17218:	add	r8, r8, #4
   1721c:	cmp	r2, ip
   17220:	movcc	r3, #63	; 0x3f
   17224:	strbcc	r3, [r5, r2]
   17228:	mov	r9, #0
   1722c:	b	16c60 <__assert_fail@plt+0x54bc>
   17230:	ldr	sl, [sp, #36]	; 0x24
   17234:	add	r0, r1, r7
   17238:	mov	r2, #0
   1723c:	str	r3, [sp, #24]
   17240:	str	r0, [fp, #-56]	; 0xffffffc8
   17244:	tst	r3, #1
   17248:	beq	17274 <__assert_fail@plt+0x5ad0>
   1724c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17250:	tst	r0, #1
   17254:	beq	1733c <__assert_fail@plt+0x5b98>
   17258:	ldr	r1, [sp, #88]	; 0x58
   1725c:	mov	r0, r3
   17260:	cmp	r8, r1
   17264:	movcc	r1, #92	; 0x5c
   17268:	strbcc	r1, [r5, r8]
   1726c:	add	r8, r8, #1
   17270:	b	17340 <__assert_fail@plt+0x5b9c>
   17274:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17278:	tst	r1, #1
   1727c:	bne	1758c <__assert_fail@plt+0x5de8>
   17280:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17284:	subs	r2, r1, #2
   17288:	movwne	r2, #1
   1728c:	orr	r2, r2, lr
   17290:	tst	r2, #1
   17294:	bne	172d8 <__assert_fail@plt+0x5b34>
   17298:	ldr	r1, [sp, #88]	; 0x58
   1729c:	add	r2, r8, #1
   172a0:	mov	lr, #1
   172a4:	cmp	r8, r1
   172a8:	movcc	r1, #39	; 0x27
   172ac:	strbcc	r1, [r5, r8]
   172b0:	ldr	r1, [sp, #88]	; 0x58
   172b4:	cmp	r2, r1
   172b8:	movcc	r1, #36	; 0x24
   172bc:	strbcc	r1, [r5, r2]
   172c0:	ldr	r1, [sp, #88]	; 0x58
   172c4:	add	r2, r8, #2
   172c8:	add	r8, r8, #3
   172cc:	cmp	r2, r1
   172d0:	movcc	r1, #39	; 0x27
   172d4:	strbcc	r1, [r5, r2]
   172d8:	ldr	r1, [sp, #88]	; 0x58
   172dc:	add	r2, r8, #1
   172e0:	mov	r0, r3
   172e4:	cmp	r8, r1
   172e8:	movcc	r1, #92	; 0x5c
   172ec:	strbcc	r1, [r5, r8]
   172f0:	ldr	r1, [sp, #88]	; 0x58
   172f4:	cmp	r2, r1
   172f8:	bcs	1730c <__assert_fail@plt+0x5b68>
   172fc:	uxtb	r3, r6
   17300:	mov	r1, #48	; 0x30
   17304:	orr	r3, r1, r3, lsr #6
   17308:	strb	r3, [r5, r2]
   1730c:	ldr	r1, [sp, #88]	; 0x58
   17310:	add	r2, r8, #2
   17314:	add	r8, r8, #3
   17318:	cmp	r2, r1
   1731c:	lsrcc	r3, r6, #3
   17320:	movcc	r1, #6
   17324:	bficc	r3, r1, #3, #29
   17328:	mov	r1, #6
   1732c:	bfi	r6, r1, #3, #29
   17330:	strbcc	r3, [r5, r2]
   17334:	mov	r2, #1
   17338:	b	17348 <__assert_fail@plt+0x5ba4>
   1733c:	mov	r0, r3
   17340:	mov	r1, #0
   17344:	str	r1, [fp, #-52]	; 0xffffffcc
   17348:	mov	ip, r2
   1734c:	and	r1, r2, #1
   17350:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17354:	add	r3, r7, #1
   17358:	cmp	r2, r3
   1735c:	bls	173e4 <__assert_fail@plt+0x5c40>
   17360:	cmp	r1, #0
   17364:	mvn	r5, lr
   17368:	movwne	r1, #1
   1736c:	orr	r5, r5, r1
   17370:	tst	r5, #1
   17374:	bne	173b8 <__assert_fail@plt+0x5c14>
   17378:	ldr	r1, [sp, #88]	; 0x58
   1737c:	ldr	r5, [fp, #-84]	; 0xffffffac
   17380:	mov	r2, r4
   17384:	ldr	r4, [sp, #88]	; 0x58
   17388:	ldr	r0, [sp, #24]
   1738c:	mov	lr, #0
   17390:	cmp	r8, r1
   17394:	movcc	r1, #39	; 0x27
   17398:	strbcc	r1, [r5, r8]
   1739c:	add	r1, r8, #1
   173a0:	add	r8, r8, #2
   173a4:	cmp	r1, r4
   173a8:	movcc	r4, #39	; 0x27
   173ac:	strbcc	r4, [r5, r1]
   173b0:	mov	r4, r2
   173b4:	b	173bc <__assert_fail@plt+0x5c18>
   173b8:	ldr	r5, [fp, #-84]	; 0xffffffac
   173bc:	ldr	r1, [sp, #88]	; 0x58
   173c0:	mov	r2, ip
   173c4:	cmp	r8, r1
   173c8:	ldr	r1, [sp, #72]	; 0x48
   173cc:	strbcc	r6, [r5, r8]
   173d0:	add	r8, r8, #1
   173d4:	ldrb	r6, [r1, r7]
   173d8:	mov	r7, r3
   173dc:	mov	r3, r0
   173e0:	b	17244 <__assert_fail@plt+0x5aa0>
   173e4:	ldr	ip, [sp, #88]	; 0x58
   173e8:	cmp	r1, #0
   173ec:	movwne	r1, #1
   173f0:	str	r1, [fp, #-56]	; 0xffffffc8
   173f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   173f8:	cmp	r0, #0
   173fc:	bne	1742c <__assert_fail@plt+0x5c88>
   17400:	tst	lr, #1
   17404:	beq	1742c <__assert_fail@plt+0x5c88>
   17408:	cmp	r8, ip
   1740c:	mov	lr, #0
   17410:	movcc	r0, #39	; 0x27
   17414:	strbcc	r0, [r5, r8]
   17418:	add	r0, r8, #1
   1741c:	add	r8, r8, #2
   17420:	cmp	r0, ip
   17424:	movcc	r1, #39	; 0x27
   17428:	strbcc	r1, [r5, r0]
   1742c:	mov	r1, r9
   17430:	mov	r0, r6
   17434:	cmp	r8, ip
   17438:	strbcc	r0, [r5, r8]
   1743c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17440:	add	r8, r8, #1
   17444:	and	r0, r0, r1
   17448:	str	r0, [fp, #-48]	; 0xffffffd0
   1744c:	mov	r3, sl
   17450:	add	r7, r7, #1
   17454:	b	16944 <__assert_fail@plt+0x51a0>
   17458:	mov	r9, #0
   1745c:	b	174a0 <__assert_fail@plt+0x5cfc>
   17460:	mov	r9, #0
   17464:	cmp	r2, r4
   17468:	bls	174a0 <__assert_fail@plt+0x5cfc>
   1746c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17470:	ldr	r1, [sp, #24]
   17474:	add	r0, r4, r7
   17478:	mov	r3, r1
   1747c:	ldrb	r1, [r0, r1]
   17480:	cmp	r1, #0
   17484:	beq	174ac <__assert_fail@plt+0x5d08>
   17488:	add	r3, r3, #1
   1748c:	add	r1, r7, r3
   17490:	cmp	r1, r2
   17494:	mov	r1, r3
   17498:	bcc	17478 <__assert_fail@plt+0x5cd4>
   1749c:	b	16fa4 <__assert_fail@plt+0x5800>
   174a0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   174a4:	ldr	r1, [sp, #24]
   174a8:	b	16fa4 <__assert_fail@plt+0x5800>
   174ac:	mov	r1, r3
   174b0:	b	16fa4 <__assert_fail@plt+0x5800>
   174b4:	mov	r9, #0
   174b8:	mov	r4, r1
   174bc:	b	16c60 <__assert_fail@plt+0x54bc>
   174c0:	mov	sl, r7
   174c4:	b	174cc <__assert_fail@plt+0x5d28>
   174c8:	mvn	sl, #0
   174cc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   174d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   174d4:	eor	r0, r1, #2
   174d8:	orr	r0, r0, r8
   174dc:	clz	r0, r0
   174e0:	lsr	r0, r0, #5
   174e4:	tst	r2, r0
   174e8:	bne	17590 <__assert_fail@plt+0x5dec>
   174ec:	subs	r0, r1, #2
   174f0:	movwne	r0, #1
   174f4:	orr	r0, r2, r0
   174f8:	tst	r0, #1
   174fc:	ldreq	r0, [sp, #60]	; 0x3c
   17500:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   17504:	eoreq	r0, r0, #1
   17508:	tsteq	r0, #1
   1750c:	bne	17624 <__assert_fail@plt+0x5e80>
   17510:	tst	r1, #1
   17514:	bne	175f0 <__assert_fail@plt+0x5e4c>
   17518:	ldr	r6, [sp, #56]	; 0x38
   1751c:	mov	r9, #0
   17520:	cmp	r6, #0
   17524:	beq	1761c <__assert_fail@plt+0x5e78>
   17528:	ldr	r0, [sp, #84]	; 0x54
   1752c:	mov	r1, #0
   17530:	mov	r7, #2
   17534:	cmp	ip, #0
   17538:	str	r1, [fp, #-48]	; 0xffffffd0
   1753c:	mov	r1, #0
   17540:	str	r1, [fp, #-76]	; 0xffffffb4
   17544:	beq	166ac <__assert_fail@plt+0x4f08>
   17548:	b	17624 <__assert_fail@plt+0x5e80>
   1754c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17550:	ldr	r1, [fp, #12]
   17554:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17558:	mov	r5, r3
   1755c:	mov	ip, r6
   17560:	mov	r3, sl
   17564:	b	175b4 <__assert_fail@plt+0x5e10>
   17568:	tst	r4, #1
   1756c:	ldr	r5, [fp, #-84]	; 0xffffffac
   17570:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17574:	ldr	r1, [fp, #12]
   17578:	ldr	r3, [sp, #36]	; 0x24
   1757c:	mov	r0, #2
   17580:	movwne	r0, #4
   17584:	mov	r2, r0
   17588:	b	175b4 <__assert_fail@plt+0x5e10>
   1758c:	ldr	ip, [sp, #88]	; 0x58
   17590:	ldr	r1, [sp, #84]	; 0x54
   17594:	mov	r0, #2
   17598:	tst	r1, #1
   1759c:	movwne	r0, #4
   175a0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   175a4:	ldr	r1, [fp, #12]
   175a8:	mov	r3, sl
   175ac:	cmp	r2, #2
   175b0:	moveq	r2, r0
   175b4:	mov	r0, #0
   175b8:	bic	r1, r1, #2
   175bc:	str	r2, [sp]
   175c0:	mov	r2, r4
   175c4:	str	r0, [sp, #8]
   175c8:	ldr	r0, [sp, #76]	; 0x4c
   175cc:	str	r1, [sp, #4]
   175d0:	mov	r1, ip
   175d4:	str	r0, [sp, #12]
   175d8:	ldr	r0, [sp, #80]	; 0x50
   175dc:	str	r0, [sp, #16]
   175e0:	mov	r0, r5
   175e4:	bl	16620 <__assert_fail@plt+0x4e7c>
   175e8:	mov	r8, r0
   175ec:	b	17670 <__assert_fail@plt+0x5ecc>
   175f0:	mov	r0, #5
   175f4:	ldr	r1, [sp, #56]	; 0x38
   175f8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   175fc:	mov	r3, sl
   17600:	str	r0, [sp]
   17604:	ldr	r0, [fp, #12]
   17608:	str	r0, [sp, #4]
   1760c:	ldr	r0, [fp, #16]
   17610:	str	r0, [sp, #8]
   17614:	ldr	r0, [sp, #76]	; 0x4c
   17618:	b	175d4 <__assert_fail@plt+0x5e30>
   1761c:	mov	r0, #0
   17620:	str	r0, [fp, #-76]	; 0xffffffb4
   17624:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17628:	cmp	r1, #0
   1762c:	beq	17664 <__assert_fail@plt+0x5ec0>
   17630:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17634:	tst	r0, #1
   17638:	bne	17664 <__assert_fail@plt+0x5ec0>
   1763c:	ldrb	r0, [r1]
   17640:	cmp	r0, #0
   17644:	beq	17664 <__assert_fail@plt+0x5ec0>
   17648:	add	r1, r1, #1
   1764c:	cmp	r8, ip
   17650:	strbcc	r0, [r5, r8]
   17654:	add	r8, r8, #1
   17658:	ldrb	r0, [r1], #1
   1765c:	cmp	r0, #0
   17660:	bne	1764c <__assert_fail@plt+0x5ea8>
   17664:	cmp	r8, ip
   17668:	movcc	r0, #0
   1766c:	strbcc	r0, [r5, r8]
   17670:	mov	r0, r8
   17674:	sub	sp, fp, #28
   17678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1767c:	mov	r0, #4
   17680:	b	175a0 <__assert_fail@plt+0x5dfc>
   17684:	mov	r4, r1
   17688:	b	17590 <__assert_fail@plt+0x5dec>
   1768c:	bl	11774 <abort@plt>
   17690:	mov	r3, r2
   17694:	mov	r2, #0
   17698:	b	1769c <__assert_fail@plt+0x5ef8>
   1769c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176a0:	add	fp, sp, #28
   176a4:	sub	sp, sp, #36	; 0x24
   176a8:	movw	r8, #49840	; 0xc2b0
   176ac:	cmp	r3, #0
   176b0:	mov	r4, r2
   176b4:	str	r2, [sp, #24]
   176b8:	mov	r5, r1
   176bc:	mov	r6, r0
   176c0:	str	r0, [sp, #20]
   176c4:	movt	r8, #2
   176c8:	movne	r8, r3
   176cc:	bl	11630 <__errno_location@plt>
   176d0:	str	r0, [sp, #28]
   176d4:	ldr	r1, [r8, #40]	; 0x28
   176d8:	ldr	r2, [r8, #44]	; 0x2c
   176dc:	ldr	r7, [r0]
   176e0:	cmp	r4, #0
   176e4:	add	sl, r8, #8
   176e8:	mov	r0, #0
   176ec:	ldm	r8, {r3, r9}
   176f0:	orreq	r9, r9, #1
   176f4:	stm	sp, {r3, r9, sl}
   176f8:	str	r1, [sp, #12]
   176fc:	str	r2, [sp, #16]
   17700:	mov	r1, #0
   17704:	mov	r2, r6
   17708:	mov	r3, r5
   1770c:	str	r7, [sp, #32]
   17710:	mov	r7, r5
   17714:	bl	16620 <__assert_fail@plt+0x4e7c>
   17718:	add	r4, r0, #1
   1771c:	mov	r5, r0
   17720:	mov	r0, r4
   17724:	bl	1853c <__assert_fail@plt+0x6d98>
   17728:	mov	r6, r0
   1772c:	ldr	r0, [r8]
   17730:	ldr	r2, [r8, #44]	; 0x2c
   17734:	ldr	r1, [r8, #40]	; 0x28
   17738:	mov	r3, r7
   1773c:	stm	sp, {r0, r9, sl}
   17740:	str	r2, [sp, #16]
   17744:	ldr	r2, [sp, #20]
   17748:	str	r1, [sp, #12]
   1774c:	mov	r0, r6
   17750:	mov	r1, r4
   17754:	bl	16620 <__assert_fail@plt+0x4e7c>
   17758:	ldr	r0, [sp, #24]
   1775c:	ldr	r1, [sp, #32]
   17760:	ldr	r2, [sp, #28]
   17764:	cmp	r0, #0
   17768:	str	r1, [r2]
   1776c:	strne	r5, [r0]
   17770:	mov	r0, r6
   17774:	sub	sp, fp, #28
   17778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1777c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17780:	add	fp, sp, #24
   17784:	movw	r5, #49524	; 0xc174
   17788:	movw	r8, #49520	; 0xc170
   1778c:	movt	r5, #2
   17790:	movt	r8, #2
   17794:	ldr	r0, [r5]
   17798:	ldr	r4, [r8]
   1779c:	cmp	r0, #2
   177a0:	blt	177cc <__assert_fail@plt+0x6028>
   177a4:	add	r7, r4, #12
   177a8:	mov	r6, #0
   177ac:	ldr	r0, [r7, r6, lsl #3]
   177b0:	bl	190b0 <__assert_fail@plt+0x790c>
   177b4:	ldr	r1, [r5]
   177b8:	add	r2, r6, #2
   177bc:	add	r0, r6, #1
   177c0:	mov	r6, r0
   177c4:	cmp	r2, r1
   177c8:	blt	177ac <__assert_fail@plt+0x6008>
   177cc:	ldr	r0, [r4, #4]
   177d0:	movw	r9, #49888	; 0xc2e0
   177d4:	movw	r7, #49528	; 0xc178
   177d8:	movt	r9, #2
   177dc:	movt	r7, #2
   177e0:	cmp	r0, r9
   177e4:	beq	177f4 <__assert_fail@plt+0x6050>
   177e8:	bl	190b0 <__assert_fail@plt+0x790c>
   177ec:	mov	r0, #256	; 0x100
   177f0:	stm	r7, {r0, r9}
   177f4:	cmp	r4, r7
   177f8:	beq	17808 <__assert_fail@plt+0x6064>
   177fc:	mov	r0, r4
   17800:	bl	190b0 <__assert_fail@plt+0x790c>
   17804:	str	r7, [r8]
   17808:	mov	r0, #1
   1780c:	str	r0, [r5]
   17810:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17814:	movw	r3, #49840	; 0xc2b0
   17818:	mvn	r2, #0
   1781c:	movt	r3, #2
   17820:	b	17824 <__assert_fail@plt+0x6080>
   17824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17828:	add	fp, sp, #28
   1782c:	sub	sp, sp, #44	; 0x2c
   17830:	mov	r7, r3
   17834:	str	r2, [sp, #36]	; 0x24
   17838:	str	r1, [sp, #32]
   1783c:	mov	r5, r0
   17840:	bl	11630 <__errno_location@plt>
   17844:	cmp	r5, #0
   17848:	bmi	179b8 <__assert_fail@plt+0x6214>
   1784c:	cmn	r5, #-2147483647	; 0x80000001
   17850:	beq	179b8 <__assert_fail@plt+0x6214>
   17854:	movw	r8, #49524	; 0xc174
   17858:	movw	r4, #49520	; 0xc170
   1785c:	str	r0, [sp, #28]
   17860:	ldr	r0, [r0]
   17864:	movt	r8, #2
   17868:	movt	r4, #2
   1786c:	ldr	r1, [r8]
   17870:	ldr	r6, [r4]
   17874:	str	r0, [sp, #24]
   17878:	cmp	r1, r5
   1787c:	ble	17888 <__assert_fail@plt+0x60e4>
   17880:	mov	sl, r6
   17884:	b	178f4 <__assert_fail@plt+0x6150>
   17888:	movw	r9, #49528	; 0xc178
   1788c:	mov	r0, #8
   17890:	str	r1, [fp, #-32]	; 0xffffffe0
   17894:	sub	r1, r5, r1
   17898:	mvn	r3, #-2147483648	; 0x80000000
   1789c:	movt	r9, #2
   178a0:	str	r0, [sp]
   178a4:	add	r2, r1, #1
   178a8:	sub	r1, fp, #32
   178ac:	subs	r0, r6, r9
   178b0:	movne	r0, r6
   178b4:	bl	1866c <__assert_fail@plt+0x6ec8>
   178b8:	mov	sl, r0
   178bc:	cmp	r6, r9
   178c0:	str	r0, [r4]
   178c4:	bne	178d0 <__assert_fail@plt+0x612c>
   178c8:	ldrd	r0, [r9]
   178cc:	stm	sl, {r0, r1}
   178d0:	ldr	r1, [r8]
   178d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   178d8:	add	r0, sl, r1, lsl #3
   178dc:	sub	r1, r2, r1
   178e0:	lsl	r2, r1, #3
   178e4:	mov	r1, #0
   178e8:	bl	11654 <memset@plt>
   178ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178f0:	str	r0, [r8]
   178f4:	mov	r9, sl
   178f8:	ldm	r7, {r0, r1}
   178fc:	orr	r8, r1, #1
   17900:	add	r1, r7, #8
   17904:	ldr	r2, [r7, #40]	; 0x28
   17908:	ldr	r3, [r7, #44]	; 0x2c
   1790c:	ldr	r6, [r9, r5, lsl #3]!
   17910:	str	r1, [sp, #20]
   17914:	ldr	r4, [r9, #4]!
   17918:	stm	sp, {r0, r8}
   1791c:	add	r0, sp, #8
   17920:	stm	r0, {r1, r2, r3}
   17924:	ldr	r2, [sp, #32]
   17928:	ldr	r3, [sp, #36]	; 0x24
   1792c:	mov	r1, r6
   17930:	mov	r0, r4
   17934:	bl	16620 <__assert_fail@plt+0x4e7c>
   17938:	cmp	r6, r0
   1793c:	bhi	179a0 <__assert_fail@plt+0x61fc>
   17940:	add	r6, r0, #1
   17944:	movw	r0, #49888	; 0xc2e0
   17948:	movt	r0, #2
   1794c:	str	r6, [sl, r5, lsl #3]
   17950:	cmp	r4, r0
   17954:	beq	17960 <__assert_fail@plt+0x61bc>
   17958:	mov	r0, r4
   1795c:	bl	190b0 <__assert_fail@plt+0x790c>
   17960:	mov	r0, r6
   17964:	bl	1853c <__assert_fail@plt+0x6d98>
   17968:	str	r0, [r9]
   1796c:	mov	r4, r0
   17970:	add	r3, sp, #8
   17974:	ldr	r0, [r7]
   17978:	ldr	r1, [r7, #40]	; 0x28
   1797c:	ldr	r2, [r7, #44]	; 0x2c
   17980:	stm	sp, {r0, r8}
   17984:	ldr	r0, [sp, #20]
   17988:	stm	r3, {r0, r1, r2}
   1798c:	ldr	r2, [sp, #32]
   17990:	ldr	r3, [sp, #36]	; 0x24
   17994:	mov	r0, r4
   17998:	mov	r1, r6
   1799c:	bl	16620 <__assert_fail@plt+0x4e7c>
   179a0:	ldr	r0, [sp, #28]
   179a4:	ldr	r1, [sp, #24]
   179a8:	str	r1, [r0]
   179ac:	mov	r0, r4
   179b0:	sub	sp, fp, #28
   179b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b8:	bl	11774 <abort@plt>
   179bc:	movw	r3, #49840	; 0xc2b0
   179c0:	movt	r3, #2
   179c4:	b	17824 <__assert_fail@plt+0x6080>
   179c8:	movw	r3, #49840	; 0xc2b0
   179cc:	mov	r1, r0
   179d0:	mov	r0, #0
   179d4:	mvn	r2, #0
   179d8:	movt	r3, #2
   179dc:	b	17824 <__assert_fail@plt+0x6080>
   179e0:	movw	r3, #49840	; 0xc2b0
   179e4:	mov	r2, r1
   179e8:	mov	r1, r0
   179ec:	mov	r0, #0
   179f0:	movt	r3, #2
   179f4:	b	17824 <__assert_fail@plt+0x6080>
   179f8:	push	{fp, lr}
   179fc:	mov	fp, sp
   17a00:	sub	sp, sp, #48	; 0x30
   17a04:	vmov.i32	q8, #0	; 0x00000000
   17a08:	mov	ip, #32
   17a0c:	mov	r3, sp
   17a10:	mov	lr, r2
   17a14:	cmp	r1, #10
   17a18:	add	r2, r3, #16
   17a1c:	vst1.64	{d16-d17}, [r3], ip
   17a20:	vst1.64	{d16-d17}, [r2]
   17a24:	vst1.64	{d16-d17}, [r3]
   17a28:	beq	17a48 <__assert_fail@plt+0x62a4>
   17a2c:	str	r1, [sp]
   17a30:	mov	r3, sp
   17a34:	mov	r1, lr
   17a38:	mvn	r2, #0
   17a3c:	bl	17824 <__assert_fail@plt+0x6080>
   17a40:	mov	sp, fp
   17a44:	pop	{fp, pc}
   17a48:	bl	11774 <abort@plt>
   17a4c:	push	{r4, sl, fp, lr}
   17a50:	add	fp, sp, #8
   17a54:	sub	sp, sp, #48	; 0x30
   17a58:	vmov.i32	q8, #0	; 0x00000000
   17a5c:	mov	ip, r3
   17a60:	mov	r3, sp
   17a64:	mov	lr, #32
   17a68:	cmp	r1, #10
   17a6c:	add	r4, r3, #16
   17a70:	vst1.64	{d16-d17}, [r3], lr
   17a74:	vst1.64	{d16-d17}, [r4]
   17a78:	vst1.64	{d16-d17}, [r3]
   17a7c:	beq	17a9c <__assert_fail@plt+0x62f8>
   17a80:	str	r1, [sp]
   17a84:	mov	r1, r2
   17a88:	mov	r3, sp
   17a8c:	mov	r2, ip
   17a90:	bl	17824 <__assert_fail@plt+0x6080>
   17a94:	sub	sp, fp, #8
   17a98:	pop	{r4, sl, fp, pc}
   17a9c:	bl	11774 <abort@plt>
   17aa0:	mov	r2, r1
   17aa4:	mov	r1, r0
   17aa8:	mov	r0, #0
   17aac:	b	179f8 <__assert_fail@plt+0x6254>
   17ab0:	mov	r3, r2
   17ab4:	mov	r2, r1
   17ab8:	mov	r1, r0
   17abc:	mov	r0, #0
   17ac0:	b	17a4c <__assert_fail@plt+0x62a8>
   17ac4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17ac8:	add	fp, sp, #24
   17acc:	sub	sp, sp, #48	; 0x30
   17ad0:	movw	r8, #49840	; 0xc2b0
   17ad4:	mov	lr, r0
   17ad8:	mov	r3, sp
   17adc:	mov	ip, r1
   17ae0:	movt	r8, #2
   17ae4:	mov	r1, r3
   17ae8:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   17aec:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17af0:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17af4:	stm	r1, {r0, r4, r5, r6, r7, r9}
   17af8:	ubfx	r0, r2, #5, #3
   17afc:	and	r2, r2, #31
   17b00:	mov	r4, #1
   17b04:	add	r0, r3, r0, lsl #2
   17b08:	ldr	r1, [r0, #8]
   17b0c:	bic	r4, r4, r1, lsr r2
   17b10:	eor	r1, r1, r4, lsl r2
   17b14:	mov	r2, ip
   17b18:	str	r1, [r0, #8]
   17b1c:	mov	r0, #0
   17b20:	mov	r1, lr
   17b24:	bl	17824 <__assert_fail@plt+0x6080>
   17b28:	sub	sp, fp, #24
   17b2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b34:	add	fp, sp, #24
   17b38:	sub	sp, sp, #48	; 0x30
   17b3c:	movw	lr, #49840	; 0xc2b0
   17b40:	mov	ip, r0
   17b44:	mov	r3, sp
   17b48:	movt	lr, #2
   17b4c:	mov	r2, r3
   17b50:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   17b54:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   17b58:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   17b5c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   17b60:	ubfx	r0, r1, #5, #3
   17b64:	and	r1, r1, #31
   17b68:	mov	r7, #1
   17b6c:	add	r0, r3, r0, lsl #2
   17b70:	ldr	r2, [r0, #8]
   17b74:	bic	r7, r7, r2, lsr r1
   17b78:	eor	r1, r2, r7, lsl r1
   17b7c:	mvn	r2, #0
   17b80:	str	r1, [r0, #8]
   17b84:	mov	r0, #0
   17b88:	mov	r1, ip
   17b8c:	bl	17824 <__assert_fail@plt+0x6080>
   17b90:	sub	sp, fp, #24
   17b94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b98:	push	{r4, r5, r6, r7, fp, lr}
   17b9c:	add	fp, sp, #16
   17ba0:	sub	sp, sp, #48	; 0x30
   17ba4:	movw	lr, #49840	; 0xc2b0
   17ba8:	mov	ip, r0
   17bac:	mov	r3, sp
   17bb0:	movt	lr, #2
   17bb4:	mov	r2, r3
   17bb8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17bbc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17bc0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17bc4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17bc8:	mov	r1, ip
   17bcc:	mvn	r2, #0
   17bd0:	ldr	r0, [sp, #12]
   17bd4:	orr	r0, r0, #67108864	; 0x4000000
   17bd8:	str	r0, [sp, #12]
   17bdc:	mov	r0, #0
   17be0:	bl	17824 <__assert_fail@plt+0x6080>
   17be4:	sub	sp, fp, #16
   17be8:	pop	{r4, r5, r6, r7, fp, pc}
   17bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17bf0:	add	fp, sp, #24
   17bf4:	sub	sp, sp, #48	; 0x30
   17bf8:	movw	r8, #49840	; 0xc2b0
   17bfc:	mov	ip, r1
   17c00:	mov	lr, r0
   17c04:	mov	r3, sp
   17c08:	movt	r8, #2
   17c0c:	mov	r2, r3
   17c10:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   17c14:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17c18:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   17c1c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17c20:	mov	r1, lr
   17c24:	mov	r2, ip
   17c28:	ldr	r0, [sp, #12]
   17c2c:	orr	r0, r0, #67108864	; 0x4000000
   17c30:	str	r0, [sp, #12]
   17c34:	mov	r0, #0
   17c38:	bl	17824 <__assert_fail@plt+0x6080>
   17c3c:	sub	sp, fp, #24
   17c40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c48:	add	fp, sp, #24
   17c4c:	sub	sp, sp, #96	; 0x60
   17c50:	vmov.i32	q8, #0	; 0x00000000
   17c54:	mov	lr, sp
   17c58:	mov	ip, r2
   17c5c:	cmp	r1, #10
   17c60:	add	r3, lr, #16
   17c64:	mov	r2, lr
   17c68:	vst1.64	{d16-d17}, [r3]
   17c6c:	mov	r3, #28
   17c70:	vst1.64	{d16-d17}, [r2], r3
   17c74:	vst1.32	{d16-d17}, [r2]
   17c78:	beq	17cb8 <__assert_fail@plt+0x6514>
   17c7c:	str	r1, [sp, #48]	; 0x30
   17c80:	add	r3, sp, #48	; 0x30
   17c84:	ldm	lr!, {r2, r4, r5, r6, r7}
   17c88:	add	r1, r3, #4
   17c8c:	stmia	r1!, {r2, r4, r5, r6, r7}
   17c90:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   17c94:	stm	r1, {r2, r4, r5, r6, r7, r8}
   17c98:	mvn	r2, #0
   17c9c:	ldr	r1, [sp, #60]	; 0x3c
   17ca0:	orr	r1, r1, #67108864	; 0x4000000
   17ca4:	str	r1, [sp, #60]	; 0x3c
   17ca8:	mov	r1, ip
   17cac:	bl	17824 <__assert_fail@plt+0x6080>
   17cb0:	sub	sp, fp, #24
   17cb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17cb8:	bl	11774 <abort@plt>
   17cbc:	push	{fp, lr}
   17cc0:	mov	fp, sp
   17cc4:	sub	sp, sp, #8
   17cc8:	mvn	ip, #0
   17ccc:	str	ip, [sp]
   17cd0:	bl	17cdc <__assert_fail@plt+0x6538>
   17cd4:	mov	sp, fp
   17cd8:	pop	{fp, pc}
   17cdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17ce0:	add	fp, sp, #24
   17ce4:	sub	sp, sp, #48	; 0x30
   17ce8:	movw	ip, #49840	; 0xc2b0
   17cec:	mov	lr, r3
   17cf0:	mov	r3, sp
   17cf4:	cmp	r1, #0
   17cf8:	movt	ip, #2
   17cfc:	cmpne	r2, #0
   17d00:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17d04:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   17d08:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   17d0c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   17d10:	mov	r3, #10
   17d14:	str	r3, [sp]
   17d18:	bne	17d20 <__assert_fail@plt+0x657c>
   17d1c:	bl	11774 <abort@plt>
   17d20:	ldr	ip, [fp, #8]
   17d24:	str	r2, [sp, #44]	; 0x2c
   17d28:	str	r1, [sp, #40]	; 0x28
   17d2c:	mov	r3, sp
   17d30:	mov	r1, lr
   17d34:	mov	r2, ip
   17d38:	bl	17824 <__assert_fail@plt+0x6080>
   17d3c:	sub	sp, fp, #24
   17d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17d44:	push	{fp, lr}
   17d48:	mov	fp, sp
   17d4c:	sub	sp, sp, #8
   17d50:	mov	r3, r2
   17d54:	mov	r2, r1
   17d58:	mov	r1, r0
   17d5c:	mvn	r0, #0
   17d60:	str	r0, [sp]
   17d64:	mov	r0, #0
   17d68:	bl	17cdc <__assert_fail@plt+0x6538>
   17d6c:	mov	sp, fp
   17d70:	pop	{fp, pc}
   17d74:	push	{fp, lr}
   17d78:	mov	fp, sp
   17d7c:	sub	sp, sp, #8
   17d80:	mov	ip, r2
   17d84:	mov	r2, r1
   17d88:	mov	r1, r0
   17d8c:	str	r3, [sp]
   17d90:	mov	r0, #0
   17d94:	mov	r3, ip
   17d98:	bl	17cdc <__assert_fail@plt+0x6538>
   17d9c:	mov	sp, fp
   17da0:	pop	{fp, pc}
   17da4:	movw	r3, #49536	; 0xc180
   17da8:	movt	r3, #2
   17dac:	b	17824 <__assert_fail@plt+0x6080>
   17db0:	movw	r3, #49536	; 0xc180
   17db4:	mov	r2, r1
   17db8:	mov	r1, r0
   17dbc:	mov	r0, #0
   17dc0:	movt	r3, #2
   17dc4:	b	17824 <__assert_fail@plt+0x6080>
   17dc8:	movw	r3, #49536	; 0xc180
   17dcc:	mvn	r2, #0
   17dd0:	movt	r3, #2
   17dd4:	b	17824 <__assert_fail@plt+0x6080>
   17dd8:	movw	r3, #49536	; 0xc180
   17ddc:	mov	r1, r0
   17de0:	mov	r0, #0
   17de4:	mvn	r2, #0
   17de8:	movt	r3, #2
   17dec:	b	17824 <__assert_fail@plt+0x6080>
   17df0:	push	{r4, r5, fp, lr}
   17df4:	add	fp, sp, #8
   17df8:	mov	r5, r0
   17dfc:	mov	r4, r1
   17e00:	mov	r0, #0
   17e04:	mov	r2, #5
   17e08:	mov	r1, r5
   17e0c:	bl	11498 <dcgettext@plt>
   17e10:	cmp	r0, r5
   17e14:	popne	{r4, r5, fp, pc}
   17e18:	bl	19388 <__assert_fail@plt+0x7be4>
   17e1c:	ldrb	r1, [r0]
   17e20:	and	r1, r1, #223	; 0xdf
   17e24:	cmp	r1, #71	; 0x47
   17e28:	beq	17e90 <__assert_fail@plt+0x66ec>
   17e2c:	cmp	r1, #85	; 0x55
   17e30:	bne	17ee8 <__assert_fail@plt+0x6744>
   17e34:	ldrb	r1, [r0, #1]
   17e38:	and	r1, r1, #223	; 0xdf
   17e3c:	cmp	r1, #84	; 0x54
   17e40:	bne	17ee8 <__assert_fail@plt+0x6744>
   17e44:	ldrb	r1, [r0, #2]
   17e48:	and	r1, r1, #223	; 0xdf
   17e4c:	cmp	r1, #70	; 0x46
   17e50:	bne	17ee8 <__assert_fail@plt+0x6744>
   17e54:	ldrb	r1, [r0, #3]
   17e58:	cmp	r1, #45	; 0x2d
   17e5c:	bne	17ee8 <__assert_fail@plt+0x6744>
   17e60:	ldrb	r1, [r0, #4]
   17e64:	cmp	r1, #56	; 0x38
   17e68:	bne	17ee8 <__assert_fail@plt+0x6744>
   17e6c:	ldrb	r0, [r0, #5]
   17e70:	cmp	r0, #0
   17e74:	bne	17ee8 <__assert_fail@plt+0x6744>
   17e78:	ldrb	r1, [r5]
   17e7c:	movw	r2, #46929	; 0xb751
   17e80:	movw	r0, #46933	; 0xb755
   17e84:	movt	r2, #1
   17e88:	movt	r0, #1
   17e8c:	b	17f18 <__assert_fail@plt+0x6774>
   17e90:	ldrb	r1, [r0, #1]
   17e94:	and	r1, r1, #223	; 0xdf
   17e98:	cmp	r1, #66	; 0x42
   17e9c:	bne	17ee8 <__assert_fail@plt+0x6744>
   17ea0:	ldrb	r1, [r0, #2]
   17ea4:	cmp	r1, #49	; 0x31
   17ea8:	bne	17ee8 <__assert_fail@plt+0x6744>
   17eac:	ldrb	r1, [r0, #3]
   17eb0:	cmp	r1, #56	; 0x38
   17eb4:	bne	17ee8 <__assert_fail@plt+0x6744>
   17eb8:	ldrb	r1, [r0, #4]
   17ebc:	cmp	r1, #48	; 0x30
   17ec0:	bne	17ee8 <__assert_fail@plt+0x6744>
   17ec4:	ldrb	r1, [r0, #5]
   17ec8:	cmp	r1, #51	; 0x33
   17ecc:	bne	17ee8 <__assert_fail@plt+0x6744>
   17ed0:	ldrb	r1, [r0, #6]
   17ed4:	cmp	r1, #48	; 0x30
   17ed8:	bne	17ee8 <__assert_fail@plt+0x6744>
   17edc:	ldrb	r0, [r0, #7]
   17ee0:	cmp	r0, #0
   17ee4:	beq	17f04 <__assert_fail@plt+0x6760>
   17ee8:	movw	r1, #46925	; 0xb74d
   17eec:	movw	r0, #46761	; 0xb6a9
   17ef0:	cmp	r4, #9
   17ef4:	movt	r1, #1
   17ef8:	movt	r0, #1
   17efc:	moveq	r0, r1
   17f00:	pop	{r4, r5, fp, pc}
   17f04:	ldrb	r1, [r5]
   17f08:	movw	r2, #46937	; 0xb759
   17f0c:	movw	r0, #46941	; 0xb75d
   17f10:	movt	r2, #1
   17f14:	movt	r0, #1
   17f18:	cmp	r1, #96	; 0x60
   17f1c:	moveq	r0, r2
   17f20:	pop	{r4, r5, fp, pc}
   17f24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17f28:	add	fp, sp, #24
   17f2c:	movw	r8, #0
   17f30:	mov	r6, r2
   17f34:	mov	r4, r1
   17f38:	mov	r5, r0
   17f3c:	movt	r8, #32752	; 0x7ff0
   17f40:	mov	r0, r5
   17f44:	mov	r1, r4
   17f48:	mov	r2, r6
   17f4c:	bl	11420 <read@plt>
   17f50:	mov	r7, r0
   17f54:	cmn	r0, #1
   17f58:	bgt	17f80 <__assert_fail@plt+0x67dc>
   17f5c:	bl	11630 <__errno_location@plt>
   17f60:	ldr	r0, [r0]
   17f64:	cmp	r0, #4
   17f68:	beq	17f40 <__assert_fail@plt+0x679c>
   17f6c:	cmp	r6, r8
   17f70:	bls	17f80 <__assert_fail@plt+0x67dc>
   17f74:	cmp	r0, #22
   17f78:	mov	r6, r8
   17f7c:	beq	17f40 <__assert_fail@plt+0x679c>
   17f80:	mov	r0, r7
   17f84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f88:	push	{r4, r5, fp, lr}
   17f8c:	add	fp, sp, #8
   17f90:	mov	r4, r1
   17f94:	mov	r1, #0
   17f98:	mov	r5, r0
   17f9c:	mov	r2, r4
   17fa0:	bl	11684 <memchr@plt>
   17fa4:	sub	r1, r0, r5
   17fa8:	cmp	r0, #0
   17fac:	addne	r4, r1, #1
   17fb0:	mov	r0, r4
   17fb4:	pop	{r4, r5, fp, pc}
   17fb8:	push	{r4, r5, r6, r7, fp, lr}
   17fbc:	add	fp, sp, #16
   17fc0:	mov	r4, r0
   17fc4:	cmp	r0, #2
   17fc8:	bhi	17ff8 <__assert_fail@plt+0x6854>
   17fcc:	mov	r0, r4
   17fd0:	bl	1964c <__assert_fail@plt+0x7ea8>
   17fd4:	mov	r5, r0
   17fd8:	bl	11630 <__errno_location@plt>
   17fdc:	ldr	r7, [r0]
   17fe0:	mov	r6, r0
   17fe4:	mov	r0, r4
   17fe8:	bl	1178c <close@plt>
   17fec:	mov	r0, r5
   17ff0:	str	r7, [r6]
   17ff4:	pop	{r4, r5, r6, r7, fp, pc}
   17ff8:	mov	r0, r4
   17ffc:	pop	{r4, r5, r6, r7, fp, pc}
   18000:	push	{r4, r5, r6, sl, fp, lr}
   18004:	add	fp, sp, #16
   18008:	mov	r5, r0
   1800c:	bl	116a8 <pipe@plt>
   18010:	mvn	r4, #0
   18014:	cmp	r0, #0
   18018:	bne	18064 <__assert_fail@plt+0x68c0>
   1801c:	mov	r6, #0
   18020:	ldr	r0, [r5, r6, lsl #2]
   18024:	bl	17fb8 <__assert_fail@plt+0x6814>
   18028:	cmn	r0, #1
   1802c:	str	r0, [r5, r6, lsl #2]
   18030:	ble	18048 <__assert_fail@plt+0x68a4>
   18034:	add	r6, r6, #1
   18038:	cmp	r6, #2
   1803c:	bne	18020 <__assert_fail@plt+0x687c>
   18040:	mov	r4, #0
   18044:	b	18064 <__assert_fail@plt+0x68c0>
   18048:	sub	r6, r5, r6, lsl #2
   1804c:	bl	11630 <__errno_location@plt>
   18050:	mov	r5, r0
   18054:	ldr	r0, [r6, #4]
   18058:	ldr	r6, [r5]
   1805c:	bl	1178c <close@plt>
   18060:	str	r6, [r5]
   18064:	mov	r0, r4
   18068:	pop	{r4, r5, r6, sl, fp, pc}
   1806c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18070:	add	fp, sp, #24
   18074:	sub	sp, sp, #32
   18078:	ldr	r7, [fp, #12]
   1807c:	ldr	r6, [fp, #8]
   18080:	mov	r4, r2
   18084:	mov	r5, r0
   18088:	cmp	r1, #0
   1808c:	beq	180ac <__assert_fail@plt+0x6908>
   18090:	mov	r2, r1
   18094:	movw	r1, #47028	; 0xb7b4
   18098:	str	r3, [sp]
   1809c:	mov	r0, r5
   180a0:	mov	r3, r4
   180a4:	movt	r1, #1
   180a8:	b	180bc <__assert_fail@plt+0x6918>
   180ac:	movw	r1, #47040	; 0xb7c0
   180b0:	mov	r0, r5
   180b4:	mov	r2, r4
   180b8:	movt	r1, #1
   180bc:	bl	11624 <fprintf@plt>
   180c0:	movw	r1, #47047	; 0xb7c7
   180c4:	mov	r0, #0
   180c8:	mov	r2, #5
   180cc:	movt	r1, #1
   180d0:	bl	11498 <dcgettext@plt>
   180d4:	movw	r1, #47743	; 0xba7f
   180d8:	mov	r2, r0
   180dc:	mov	r0, r5
   180e0:	movw	r3, #2022	; 0x7e6
   180e4:	movt	r1, #1
   180e8:	bl	11624 <fprintf@plt>
   180ec:	movw	r4, #41938	; 0xa3d2
   180f0:	mov	r1, r5
   180f4:	movt	r4, #1
   180f8:	mov	r0, r4
   180fc:	bl	1175c <fputs@plt>
   18100:	movw	r1, #47051	; 0xb7cb
   18104:	mov	r0, #0
   18108:	mov	r2, #5
   1810c:	movt	r1, #1
   18110:	bl	11498 <dcgettext@plt>
   18114:	movw	r2, #47222	; 0xb876
   18118:	mov	r1, r0
   1811c:	mov	r0, r5
   18120:	movt	r2, #1
   18124:	bl	11624 <fprintf@plt>
   18128:	mov	r0, r4
   1812c:	mov	r1, r5
   18130:	bl	1175c <fputs@plt>
   18134:	cmp	r7, #9
   18138:	bhi	18198 <__assert_fail@plt+0x69f4>
   1813c:	add	r0, pc, #0
   18140:	ldr	pc, [r0, r7, lsl #2]
   18144:	andeq	r8, r1, r8, lsl #7
   18148:	andeq	r8, r1, ip, ror #2
   1814c:	andeq	r8, r1, r4, lsr #3
   18150:	ldrdeq	r8, [r1], -r0
   18154:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18158:	andeq	r8, r1, r4, lsr #4
   1815c:	andeq	r8, r1, r8, asr r2
   18160:	muleq	r1, r8, r2
   18164:	andeq	r8, r1, r4, lsr r3
   18168:	ldrdeq	r8, [r1], -ip
   1816c:	movw	r1, #47256	; 0xb898
   18170:	mov	r0, #0
   18174:	mov	r2, #5
   18178:	movt	r1, #1
   1817c:	bl	11498 <dcgettext@plt>
   18180:	ldr	r2, [r6]
   18184:	mov	r1, r0
   18188:	mov	r0, r5
   1818c:	sub	sp, fp, #24
   18190:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18194:	b	11624 <fprintf@plt>
   18198:	movw	r1, #47575	; 0xb9d7
   1819c:	movt	r1, #1
   181a0:	b	182e4 <__assert_fail@plt+0x6b40>
   181a4:	movw	r1, #47272	; 0xb8a8
   181a8:	mov	r0, #0
   181ac:	mov	r2, #5
   181b0:	movt	r1, #1
   181b4:	bl	11498 <dcgettext@plt>
   181b8:	ldm	r6, {r2, r3}
   181bc:	mov	r1, r0
   181c0:	mov	r0, r5
   181c4:	sub	sp, fp, #24
   181c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   181cc:	b	11624 <fprintf@plt>
   181d0:	movw	r1, #47295	; 0xb8bf
   181d4:	mov	r0, #0
   181d8:	mov	r2, #5
   181dc:	movt	r1, #1
   181e0:	bl	11498 <dcgettext@plt>
   181e4:	mov	r1, r0
   181e8:	ldr	r0, [r6, #8]
   181ec:	ldm	r6, {r2, r3}
   181f0:	str	r0, [sp]
   181f4:	b	18290 <__assert_fail@plt+0x6aec>
   181f8:	movw	r1, #47323	; 0xb8db
   181fc:	mov	r0, #0
   18200:	mov	r2, #5
   18204:	movt	r1, #1
   18208:	bl	11498 <dcgettext@plt>
   1820c:	mov	r1, r0
   18210:	ldr	r0, [r6, #8]
   18214:	ldm	r6, {r2, r3}
   18218:	ldr	r7, [r6, #12]
   1821c:	stm	sp, {r0, r7}
   18220:	b	18290 <__assert_fail@plt+0x6aec>
   18224:	movw	r1, #47355	; 0xb8fb
   18228:	mov	r0, #0
   1822c:	mov	r2, #5
   18230:	movt	r1, #1
   18234:	bl	11498 <dcgettext@plt>
   18238:	mov	r1, r0
   1823c:	ldm	r6, {r2, r3}
   18240:	ldr	r0, [r6, #8]
   18244:	ldr	r7, [r6, #12]
   18248:	ldr	r6, [r6, #16]
   1824c:	stm	sp, {r0, r7}
   18250:	str	r6, [sp, #8]
   18254:	b	18290 <__assert_fail@plt+0x6aec>
   18258:	movw	r1, #47391	; 0xb91f
   1825c:	mov	r0, #0
   18260:	mov	r2, #5
   18264:	movt	r1, #1
   18268:	bl	11498 <dcgettext@plt>
   1826c:	mov	r1, r0
   18270:	ldm	r6, {r2, r3}
   18274:	ldr	r0, [r6, #8]
   18278:	ldr	r7, [r6, #12]
   1827c:	ldr	r4, [r6, #16]
   18280:	ldr	r6, [r6, #20]
   18284:	stm	sp, {r0, r7}
   18288:	str	r4, [sp, #8]
   1828c:	str	r6, [sp, #12]
   18290:	mov	r0, r5
   18294:	b	18384 <__assert_fail@plt+0x6be0>
   18298:	movw	r1, #47431	; 0xb947
   1829c:	mov	r0, #0
   182a0:	mov	r2, #5
   182a4:	movt	r1, #1
   182a8:	bl	11498 <dcgettext@plt>
   182ac:	mov	ip, r0
   182b0:	ldm	r6, {r2, r3}
   182b4:	ldr	r0, [r6, #8]
   182b8:	ldr	r7, [r6, #12]
   182bc:	ldr	r4, [r6, #16]
   182c0:	ldr	r1, [r6, #20]
   182c4:	ldr	r6, [r6, #24]
   182c8:	stm	sp, {r0, r7}
   182cc:	str	r4, [sp, #8]
   182d0:	str	r1, [sp, #12]
   182d4:	str	r6, [sp, #16]
   182d8:	b	1837c <__assert_fail@plt+0x6bd8>
   182dc:	movw	r1, #47523	; 0xb9a3
   182e0:	movt	r1, #1
   182e4:	mov	r0, #0
   182e8:	mov	r2, #5
   182ec:	bl	11498 <dcgettext@plt>
   182f0:	mov	ip, r0
   182f4:	ldr	r2, [r6]
   182f8:	ldr	r3, [r6, #4]
   182fc:	ldr	r0, [r6, #8]
   18300:	ldr	r7, [r6, #12]
   18304:	ldr	r4, [r6, #16]
   18308:	ldr	r1, [r6, #20]
   1830c:	ldr	lr, [r6, #24]
   18310:	ldr	r8, [r6, #28]
   18314:	ldr	r6, [r6, #32]
   18318:	stm	sp, {r0, r7}
   1831c:	str	r4, [sp, #8]
   18320:	str	r1, [sp, #12]
   18324:	str	lr, [sp, #16]
   18328:	str	r8, [sp, #20]
   1832c:	str	r6, [sp, #24]
   18330:	b	1837c <__assert_fail@plt+0x6bd8>
   18334:	movw	r1, #47475	; 0xb973
   18338:	mov	r0, #0
   1833c:	mov	r2, #5
   18340:	movt	r1, #1
   18344:	bl	11498 <dcgettext@plt>
   18348:	mov	ip, r0
   1834c:	ldm	r6, {r2, r3}
   18350:	ldr	r0, [r6, #8]
   18354:	ldr	r7, [r6, #12]
   18358:	ldr	r4, [r6, #16]
   1835c:	ldr	r1, [r6, #20]
   18360:	ldr	lr, [r6, #24]
   18364:	ldr	r6, [r6, #28]
   18368:	stm	sp, {r0, r7}
   1836c:	str	r4, [sp, #8]
   18370:	str	r1, [sp, #12]
   18374:	str	lr, [sp, #16]
   18378:	str	r6, [sp, #20]
   1837c:	mov	r0, r5
   18380:	mov	r1, ip
   18384:	bl	11624 <fprintf@plt>
   18388:	sub	sp, fp, #24
   1838c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18390:	push	{r4, sl, fp, lr}
   18394:	add	fp, sp, #8
   18398:	sub	sp, sp, #8
   1839c:	ldr	ip, [fp, #8]
   183a0:	mov	lr, #0
   183a4:	ldr	r4, [ip, lr, lsl #2]
   183a8:	add	lr, lr, #1
   183ac:	cmp	r4, #0
   183b0:	bne	183a4 <__assert_fail@plt+0x6c00>
   183b4:	sub	r4, lr, #1
   183b8:	str	ip, [sp]
   183bc:	str	r4, [sp, #4]
   183c0:	bl	1806c <__assert_fail@plt+0x68c8>
   183c4:	sub	sp, fp, #8
   183c8:	pop	{r4, sl, fp, pc}
   183cc:	push	{r4, r5, fp, lr}
   183d0:	add	fp, sp, #8
   183d4:	sub	sp, sp, #48	; 0x30
   183d8:	ldr	r4, [fp, #8]
   183dc:	mov	ip, #0
   183e0:	add	lr, sp, #8
   183e4:	ldr	r5, [r4]
   183e8:	cmp	r5, #0
   183ec:	str	r5, [lr, ip, lsl #2]
   183f0:	beq	18408 <__assert_fail@plt+0x6c64>
   183f4:	add	ip, ip, #1
   183f8:	add	r4, r4, #4
   183fc:	cmp	ip, #10
   18400:	bne	183e4 <__assert_fail@plt+0x6c40>
   18404:	mov	ip, #10
   18408:	str	lr, [sp]
   1840c:	str	ip, [sp, #4]
   18410:	bl	1806c <__assert_fail@plt+0x68c8>
   18414:	sub	sp, fp, #8
   18418:	pop	{r4, r5, fp, pc}
   1841c:	push	{fp, lr}
   18420:	mov	fp, sp
   18424:	sub	sp, sp, #8
   18428:	add	ip, fp, #8
   1842c:	str	ip, [sp, #4]
   18430:	str	ip, [sp]
   18434:	bl	183cc <__assert_fail@plt+0x6c28>
   18438:	mov	sp, fp
   1843c:	pop	{fp, pc}
   18440:	push	{fp, lr}
   18444:	mov	fp, sp
   18448:	movw	r0, #49620	; 0xc1d4
   1844c:	movt	r0, #2
   18450:	ldr	r1, [r0]
   18454:	movw	r0, #41938	; 0xa3d2
   18458:	movt	r0, #1
   1845c:	bl	1175c <fputs@plt>
   18460:	movw	r1, #47635	; 0xba13
   18464:	mov	r0, #0
   18468:	mov	r2, #5
   1846c:	movt	r1, #1
   18470:	bl	11498 <dcgettext@plt>
   18474:	movw	r1, #46514	; 0xb5b2
   18478:	movt	r1, #1
   1847c:	bl	11414 <printf@plt>
   18480:	movw	r1, #47655	; 0xba27
   18484:	mov	r0, #0
   18488:	mov	r2, #5
   1848c:	movt	r1, #1
   18490:	bl	11498 <dcgettext@plt>
   18494:	movw	r1, #46114	; 0xb422
   18498:	movw	r2, #46428	; 0xb55c
   1849c:	movt	r1, #1
   184a0:	movt	r2, #1
   184a4:	bl	11414 <printf@plt>
   184a8:	movw	r1, #47675	; 0xba3b
   184ac:	mov	r0, #0
   184b0:	mov	r2, #5
   184b4:	movt	r1, #1
   184b8:	bl	11498 <dcgettext@plt>
   184bc:	movw	r1, #47714	; 0xba62
   184c0:	movt	r1, #1
   184c4:	pop	{fp, lr}
   184c8:	b	11414 <printf@plt>
   184cc:	b	184d0 <__assert_fail@plt+0x6d2c>
   184d0:	push	{r4, r5, r6, sl, fp, lr}
   184d4:	add	fp, sp, #16
   184d8:	mov	r4, r2
   184dc:	mov	r5, r1
   184e0:	mov	r6, r0
   184e4:	bl	19260 <__assert_fail@plt+0x7abc>
   184e8:	cmp	r0, #0
   184ec:	popne	{r4, r5, r6, sl, fp, pc}
   184f0:	cmp	r6, #0
   184f4:	beq	18508 <__assert_fail@plt+0x6d64>
   184f8:	cmp	r5, #0
   184fc:	cmpne	r4, #0
   18500:	bne	18508 <__assert_fail@plt+0x6d64>
   18504:	pop	{r4, r5, r6, sl, fp, pc}
   18508:	bl	18938 <__assert_fail@plt+0x7194>
   1850c:	push	{fp, lr}
   18510:	mov	fp, sp
   18514:	bl	1917c <__assert_fail@plt+0x79d8>
   18518:	cmp	r0, #0
   1851c:	popne	{fp, pc}
   18520:	bl	18938 <__assert_fail@plt+0x7194>
   18524:	push	{fp, lr}
   18528:	mov	fp, sp
   1852c:	bl	1917c <__assert_fail@plt+0x79d8>
   18530:	cmp	r0, #0
   18534:	popne	{fp, pc}
   18538:	bl	18938 <__assert_fail@plt+0x7194>
   1853c:	push	{fp, lr}
   18540:	mov	fp, sp
   18544:	bl	1917c <__assert_fail@plt+0x79d8>
   18548:	cmp	r0, #0
   1854c:	popne	{fp, pc}
   18550:	bl	18938 <__assert_fail@plt+0x7194>
   18554:	push	{r4, r5, fp, lr}
   18558:	add	fp, sp, #8
   1855c:	mov	r4, r1
   18560:	mov	r5, r0
   18564:	bl	19210 <__assert_fail@plt+0x7a6c>
   18568:	cmp	r0, #0
   1856c:	popne	{r4, r5, fp, pc}
   18570:	cmp	r5, #0
   18574:	beq	18584 <__assert_fail@plt+0x6de0>
   18578:	cmp	r4, #0
   1857c:	bne	18584 <__assert_fail@plt+0x6de0>
   18580:	pop	{r4, r5, fp, pc}
   18584:	bl	18938 <__assert_fail@plt+0x7194>
   18588:	push	{fp, lr}
   1858c:	mov	fp, sp
   18590:	cmp	r1, #0
   18594:	orreq	r1, r1, #1
   18598:	bl	19210 <__assert_fail@plt+0x7a6c>
   1859c:	cmp	r0, #0
   185a0:	popne	{fp, pc}
   185a4:	bl	18938 <__assert_fail@plt+0x7194>
   185a8:	push	{fp, lr}
   185ac:	mov	fp, sp
   185b0:	clz	r3, r2
   185b4:	lsr	ip, r3, #5
   185b8:	clz	r3, r1
   185bc:	lsr	r3, r3, #5
   185c0:	orrs	r3, r3, ip
   185c4:	movwne	r1, #1
   185c8:	movwne	r2, #1
   185cc:	bl	19260 <__assert_fail@plt+0x7abc>
   185d0:	cmp	r0, #0
   185d4:	popne	{fp, pc}
   185d8:	bl	18938 <__assert_fail@plt+0x7194>
   185dc:	push	{fp, lr}
   185e0:	mov	fp, sp
   185e4:	mov	r2, r1
   185e8:	mov	r1, r0
   185ec:	mov	r0, #0
   185f0:	bl	19260 <__assert_fail@plt+0x7abc>
   185f4:	cmp	r0, #0
   185f8:	popne	{fp, pc}
   185fc:	bl	18938 <__assert_fail@plt+0x7194>
   18600:	mov	r2, r1
   18604:	mov	r1, r0
   18608:	mov	r0, #0
   1860c:	b	185a8 <__assert_fail@plt+0x6e04>
   18610:	mov	r2, #1
   18614:	b	18618 <__assert_fail@plt+0x6e74>
   18618:	push	{r4, r5, fp, lr}
   1861c:	add	fp, sp, #8
   18620:	ldr	r5, [r1]
   18624:	mov	r4, r1
   18628:	cmp	r0, #0
   1862c:	beq	18644 <__assert_fail@plt+0x6ea0>
   18630:	mov	r1, #1
   18634:	add	r1, r1, r5, lsr #1
   18638:	adds	r5, r5, r1
   1863c:	bcc	1865c <__assert_fail@plt+0x6eb8>
   18640:	bl	18938 <__assert_fail@plt+0x7194>
   18644:	cmp	r5, #0
   18648:	bne	1865c <__assert_fail@plt+0x6eb8>
   1864c:	mov	r1, #64	; 0x40
   18650:	cmp	r2, #64	; 0x40
   18654:	udiv	r5, r1, r2
   18658:	addhi	r5, r5, #1
   1865c:	mov	r1, r5
   18660:	bl	184d0 <__assert_fail@plt+0x6d2c>
   18664:	str	r5, [r4]
   18668:	pop	{r4, r5, fp, pc}
   1866c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18670:	add	fp, sp, #24
   18674:	ldr	r6, [r1]
   18678:	mov	r8, r1
   1867c:	ldr	r4, [fp, #8]
   18680:	add	r1, r6, r6, asr #1
   18684:	cmp	r1, r6
   18688:	mvnvs	r1, #-2147483648	; 0x80000000
   1868c:	cmp	r1, r3
   18690:	mov	r5, r1
   18694:	movgt	r5, r3
   18698:	cmn	r3, #1
   1869c:	movle	r5, r1
   186a0:	cmn	r4, #1
   186a4:	ble	186c4 <__assert_fail@plt+0x6f20>
   186a8:	cmp	r4, #0
   186ac:	beq	18718 <__assert_fail@plt+0x6f74>
   186b0:	cmn	r5, #1
   186b4:	ble	186ec <__assert_fail@plt+0x6f48>
   186b8:	mvn	r7, #-2147483648	; 0x80000000
   186bc:	udiv	r1, r7, r4
   186c0:	b	186e0 <__assert_fail@plt+0x6f3c>
   186c4:	cmn	r5, #1
   186c8:	ble	18708 <__assert_fail@plt+0x6f64>
   186cc:	cmn	r4, #1
   186d0:	beq	18718 <__assert_fail@plt+0x6f74>
   186d4:	mov	r1, #-2147483648	; 0x80000000
   186d8:	mvn	r7, #-2147483648	; 0x80000000
   186dc:	sdiv	r1, r1, r4
   186e0:	cmp	r1, r5
   186e4:	bge	18718 <__assert_fail@plt+0x6f74>
   186e8:	b	18728 <__assert_fail@plt+0x6f84>
   186ec:	beq	18718 <__assert_fail@plt+0x6f74>
   186f0:	mov	r1, #-2147483648	; 0x80000000
   186f4:	mvn	r7, #-2147483648	; 0x80000000
   186f8:	sdiv	r1, r1, r5
   186fc:	cmp	r1, r4
   18700:	bge	18718 <__assert_fail@plt+0x6f74>
   18704:	b	18728 <__assert_fail@plt+0x6f84>
   18708:	mvn	r7, #-2147483648	; 0x80000000
   1870c:	sdiv	r1, r7, r4
   18710:	cmp	r5, r1
   18714:	blt	18728 <__assert_fail@plt+0x6f84>
   18718:	mul	r1, r5, r4
   1871c:	mov	r7, #64	; 0x40
   18720:	cmp	r1, #63	; 0x3f
   18724:	bgt	18730 <__assert_fail@plt+0x6f8c>
   18728:	sdiv	r5, r7, r4
   1872c:	mul	r1, r5, r4
   18730:	cmp	r0, #0
   18734:	moveq	r7, #0
   18738:	streq	r7, [r8]
   1873c:	sub	r7, r5, r6
   18740:	cmp	r7, r2
   18744:	bge	187e8 <__assert_fail@plt+0x7044>
   18748:	add	r5, r6, r2
   1874c:	mov	r2, #0
   18750:	mov	r1, #0
   18754:	cmp	r5, r3
   18758:	movwgt	r2, #1
   1875c:	cmn	r3, #1
   18760:	movwgt	r1, #1
   18764:	cmp	r5, r6
   18768:	bvs	187d0 <__assert_fail@plt+0x702c>
   1876c:	ands	r1, r1, r2
   18770:	bne	187d0 <__assert_fail@plt+0x702c>
   18774:	cmn	r4, #1
   18778:	ble	18798 <__assert_fail@plt+0x6ff4>
   1877c:	cmp	r4, #0
   18780:	beq	187e4 <__assert_fail@plt+0x7040>
   18784:	cmn	r5, #1
   18788:	ble	187bc <__assert_fail@plt+0x7018>
   1878c:	mvn	r1, #-2147483648	; 0x80000000
   18790:	udiv	r1, r1, r4
   18794:	b	187b0 <__assert_fail@plt+0x700c>
   18798:	cmn	r5, #1
   1879c:	ble	187d4 <__assert_fail@plt+0x7030>
   187a0:	cmn	r4, #1
   187a4:	beq	187e4 <__assert_fail@plt+0x7040>
   187a8:	mov	r1, #-2147483648	; 0x80000000
   187ac:	sdiv	r1, r1, r4
   187b0:	cmp	r1, r5
   187b4:	bge	187e4 <__assert_fail@plt+0x7040>
   187b8:	b	187d0 <__assert_fail@plt+0x702c>
   187bc:	beq	187e4 <__assert_fail@plt+0x7040>
   187c0:	mov	r1, #-2147483648	; 0x80000000
   187c4:	sdiv	r1, r1, r5
   187c8:	cmp	r1, r4
   187cc:	bge	187e4 <__assert_fail@plt+0x7040>
   187d0:	bl	18938 <__assert_fail@plt+0x7194>
   187d4:	mvn	r1, #-2147483648	; 0x80000000
   187d8:	sdiv	r1, r1, r4
   187dc:	cmp	r5, r1
   187e0:	blt	187d0 <__assert_fail@plt+0x702c>
   187e4:	mul	r1, r5, r4
   187e8:	bl	18554 <__assert_fail@plt+0x6db0>
   187ec:	str	r5, [r8]
   187f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   187f4:	push	{fp, lr}
   187f8:	mov	fp, sp
   187fc:	mov	r1, #1
   18800:	bl	18de8 <__assert_fail@plt+0x7644>
   18804:	cmp	r0, #0
   18808:	popne	{fp, pc}
   1880c:	bl	18938 <__assert_fail@plt+0x7194>
   18810:	push	{fp, lr}
   18814:	mov	fp, sp
   18818:	bl	18de8 <__assert_fail@plt+0x7644>
   1881c:	cmp	r0, #0
   18820:	popne	{fp, pc}
   18824:	bl	18938 <__assert_fail@plt+0x7194>
   18828:	push	{fp, lr}
   1882c:	mov	fp, sp
   18830:	mov	r1, #1
   18834:	bl	18de8 <__assert_fail@plt+0x7644>
   18838:	cmp	r0, #0
   1883c:	popne	{fp, pc}
   18840:	bl	18938 <__assert_fail@plt+0x7194>
   18844:	push	{fp, lr}
   18848:	mov	fp, sp
   1884c:	bl	18de8 <__assert_fail@plt+0x7644>
   18850:	cmp	r0, #0
   18854:	popne	{fp, pc}
   18858:	bl	18938 <__assert_fail@plt+0x7194>
   1885c:	push	{r4, r5, fp, lr}
   18860:	add	fp, sp, #8
   18864:	mov	r5, r0
   18868:	mov	r0, r1
   1886c:	mov	r4, r1
   18870:	bl	1917c <__assert_fail@plt+0x79d8>
   18874:	cmp	r0, #0
   18878:	beq	1888c <__assert_fail@plt+0x70e8>
   1887c:	mov	r1, r5
   18880:	mov	r2, r4
   18884:	pop	{r4, r5, fp, lr}
   18888:	b	11468 <memcpy@plt>
   1888c:	bl	18938 <__assert_fail@plt+0x7194>
   18890:	push	{r4, r5, fp, lr}
   18894:	add	fp, sp, #8
   18898:	mov	r5, r0
   1889c:	mov	r0, r1
   188a0:	mov	r4, r1
   188a4:	bl	1917c <__assert_fail@plt+0x79d8>
   188a8:	cmp	r0, #0
   188ac:	beq	188c0 <__assert_fail@plt+0x711c>
   188b0:	mov	r1, r5
   188b4:	mov	r2, r4
   188b8:	pop	{r4, r5, fp, lr}
   188bc:	b	11468 <memcpy@plt>
   188c0:	bl	18938 <__assert_fail@plt+0x7194>
   188c4:	push	{r4, r5, fp, lr}
   188c8:	add	fp, sp, #8
   188cc:	mov	r5, r0
   188d0:	add	r0, r1, #1
   188d4:	mov	r4, r1
   188d8:	bl	1917c <__assert_fail@plt+0x79d8>
   188dc:	cmp	r0, #0
   188e0:	beq	188fc <__assert_fail@plt+0x7158>
   188e4:	mov	r1, #0
   188e8:	mov	r2, r4
   188ec:	strb	r1, [r0, r4]
   188f0:	mov	r1, r5
   188f4:	pop	{r4, r5, fp, lr}
   188f8:	b	11468 <memcpy@plt>
   188fc:	bl	18938 <__assert_fail@plt+0x7194>
   18900:	push	{r4, r5, fp, lr}
   18904:	add	fp, sp, #8
   18908:	mov	r4, r0
   1890c:	bl	11600 <strlen@plt>
   18910:	add	r5, r0, #1
   18914:	mov	r0, r5
   18918:	bl	1917c <__assert_fail@plt+0x79d8>
   1891c:	cmp	r0, #0
   18920:	beq	18934 <__assert_fail@plt+0x7190>
   18924:	mov	r1, r4
   18928:	mov	r2, r5
   1892c:	pop	{r4, r5, fp, lr}
   18930:	b	11468 <memcpy@plt>
   18934:	bl	18938 <__assert_fail@plt+0x7194>
   18938:	push	{fp, lr}
   1893c:	mov	fp, sp
   18940:	movw	r0, #49512	; 0xc168
   18944:	movw	r1, #47790	; 0xbaae
   18948:	mov	r2, #5
   1894c:	movt	r0, #2
   18950:	movt	r1, #1
   18954:	ldr	r4, [r0]
   18958:	mov	r0, #0
   1895c:	bl	11498 <dcgettext@plt>
   18960:	movw	r2, #46219	; 0xb48b
   18964:	mov	r3, r0
   18968:	mov	r0, r4
   1896c:	mov	r1, #0
   18970:	movt	r2, #1
   18974:	bl	11558 <error@plt>
   18978:	bl	11774 <abort@plt>
   1897c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18980:	add	fp, sp, #28
   18984:	sub	sp, sp, #12
   18988:	cmp	r2, #37	; 0x25
   1898c:	bcs	18dc8 <__assert_fail@plt+0x7624>
   18990:	ldr	r9, [fp, #8]
   18994:	mov	r7, r2
   18998:	mov	r6, r1
   1899c:	mov	r4, r0
   189a0:	str	r3, [sp, #4]
   189a4:	bl	11630 <__errno_location@plt>
   189a8:	mov	r5, r0
   189ac:	mov	r0, #0
   189b0:	str	r0, [r5]
   189b4:	bl	115c4 <__ctype_b_loc@plt>
   189b8:	ldr	r1, [r0]
   189bc:	mov	r2, r4
   189c0:	ldrb	r0, [r2], #1
   189c4:	add	r3, r1, r0, lsl #1
   189c8:	ldrb	r3, [r3, #1]
   189cc:	tst	r3, #32
   189d0:	bne	189c0 <__assert_fail@plt+0x721c>
   189d4:	cmp	r6, #0
   189d8:	add	r8, sp, #8
   189dc:	mov	sl, #4
   189e0:	movne	r8, r6
   189e4:	cmp	r0, #45	; 0x2d
   189e8:	beq	18dbc <__assert_fail@plt+0x7618>
   189ec:	mov	r0, r4
   189f0:	mov	r1, r8
   189f4:	mov	r2, r7
   189f8:	bl	115f4 <strtoul@plt>
   189fc:	ldr	r6, [r8]
   18a00:	cmp	r6, r4
   18a04:	beq	18a28 <__assert_fail@plt+0x7284>
   18a08:	mov	r7, r0
   18a0c:	ldr	r0, [r5]
   18a10:	cmp	r0, #0
   18a14:	beq	18a58 <__assert_fail@plt+0x72b4>
   18a18:	cmp	r0, #34	; 0x22
   18a1c:	bne	18dbc <__assert_fail@plt+0x7618>
   18a20:	mov	sl, #1
   18a24:	b	18a5c <__assert_fail@plt+0x72b8>
   18a28:	cmp	r9, #0
   18a2c:	beq	18dbc <__assert_fail@plt+0x7618>
   18a30:	ldrb	r1, [r4]
   18a34:	cmp	r1, #0
   18a38:	beq	18dbc <__assert_fail@plt+0x7618>
   18a3c:	mov	r0, r9
   18a40:	bl	1160c <strchr@plt>
   18a44:	cmp	r0, #0
   18a48:	beq	18dbc <__assert_fail@plt+0x7618>
   18a4c:	mov	r7, #1
   18a50:	mov	sl, #0
   18a54:	b	18a64 <__assert_fail@plt+0x72c0>
   18a58:	mov	sl, r0
   18a5c:	cmp	r9, #0
   18a60:	beq	18db4 <__assert_fail@plt+0x7610>
   18a64:	ldrb	r4, [r6]
   18a68:	cmp	r4, #0
   18a6c:	beq	18db4 <__assert_fail@plt+0x7610>
   18a70:	mov	r0, r9
   18a74:	mov	r1, r4
   18a78:	bl	1160c <strchr@plt>
   18a7c:	cmp	r0, #0
   18a80:	beq	18d3c <__assert_fail@plt+0x7598>
   18a84:	sub	r0, r4, #69	; 0x45
   18a88:	mov	r3, #1
   18a8c:	mov	r5, #1024	; 0x400
   18a90:	cmp	r0, #21
   18a94:	bhi	18aac <__assert_fail@plt+0x7308>
   18a98:	movw	r2, #35141	; 0x8945
   18a9c:	mov	r1, #1
   18aa0:	movt	r2, #48	; 0x30
   18aa4:	tst	r2, r1, lsl r0
   18aa8:	bne	18ac8 <__assert_fail@plt+0x7324>
   18aac:	sub	r0, r4, #103	; 0x67
   18ab0:	cmp	r0, #13
   18ab4:	bhi	18b18 <__assert_fail@plt+0x7374>
   18ab8:	mov	r1, #1
   18abc:	movw	r2, #8273	; 0x2051
   18ac0:	tst	r2, r1, lsl r0
   18ac4:	beq	18b18 <__assert_fail@plt+0x7374>
   18ac8:	mov	r0, r9
   18acc:	mov	r1, #48	; 0x30
   18ad0:	bl	1160c <strchr@plt>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18b14 <__assert_fail@plt+0x7370>
   18adc:	ldrb	r0, [r6, #1]
   18ae0:	cmp	r0, #66	; 0x42
   18ae4:	cmpne	r0, #68	; 0x44
   18ae8:	bne	18af8 <__assert_fail@plt+0x7354>
   18aec:	mov	r3, #2
   18af0:	mov	r5, #1000	; 0x3e8
   18af4:	b	18b18 <__assert_fail@plt+0x7374>
   18af8:	cmp	r0, #105	; 0x69
   18afc:	bne	18b14 <__assert_fail@plt+0x7370>
   18b00:	ldrb	r0, [r6, #2]
   18b04:	mov	r3, #1
   18b08:	cmp	r0, #66	; 0x42
   18b0c:	movweq	r3, #3
   18b10:	b	18b18 <__assert_fail@plt+0x7374>
   18b14:	mov	r3, #1
   18b18:	cmp	r4, #89	; 0x59
   18b1c:	bgt	18b8c <__assert_fail@plt+0x73e8>
   18b20:	sub	r0, r4, #66	; 0x42
   18b24:	cmp	r0, #14
   18b28:	bhi	18c00 <__assert_fail@plt+0x745c>
   18b2c:	add	r1, pc, #0
   18b30:	ldr	pc, [r1, r0, lsl #2]
   18b34:	andeq	r8, r1, r0, ror fp
   18b38:	andeq	r8, r1, ip, lsr sp
   18b3c:	andeq	r8, r1, ip, lsr sp
   18b40:	andeq	r8, r1, r8, asr #26
   18b44:	andeq	r8, r1, ip, lsr sp
   18b48:	andeq	r8, r1, r0, ror #24
   18b4c:	andeq	r8, r1, ip, lsr sp
   18b50:	andeq	r8, r1, ip, lsr sp
   18b54:	andeq	r8, r1, ip, lsr sp
   18b58:	andeq	r8, r1, ip, lsl #25
   18b5c:	andeq	r8, r1, ip, lsr sp
   18b60:			; <UNDEFINED> instruction: 0x00018cb0
   18b64:	andeq	r8, r1, ip, lsr sp
   18b68:	andeq	r8, r1, ip, lsr sp
   18b6c:	andeq	r8, r1, r4, ror sp
   18b70:	mov	r1, #0
   18b74:	lsr	r0, r7, #22
   18b78:	cmp	r1, r7, lsr #22
   18b7c:	lsl	r7, r7, #10
   18b80:	movwne	r0, #1
   18b84:	mvnne	r7, #0
   18b88:	b	18d9c <__assert_fail@plt+0x75f8>
   18b8c:	cmp	r4, #115	; 0x73
   18b90:	bgt	18c3c <__assert_fail@plt+0x7498>
   18b94:	sub	r1, r4, #98	; 0x62
   18b98:	cmp	r1, #11
   18b9c:	bhi	18d08 <__assert_fail@plt+0x7564>
   18ba0:	add	r2, pc, #4
   18ba4:	mov	r0, #0
   18ba8:	ldr	pc, [r2, r1, lsl #2]
   18bac:	ldrdeq	r8, [r1], -ip
   18bb0:	muleq	r1, ip, sp
   18bb4:	andeq	r8, r1, ip, lsr sp
   18bb8:	andeq	r8, r1, ip, lsr sp
   18bbc:	andeq	r8, r1, ip, lsr sp
   18bc0:	andeq	r8, r1, r0, ror #24
   18bc4:	andeq	r8, r1, ip, lsr sp
   18bc8:	andeq	r8, r1, ip, lsr sp
   18bcc:	andeq	r8, r1, ip, lsr sp
   18bd0:	andeq	r8, r1, ip, lsl #25
   18bd4:	andeq	r8, r1, ip, lsr sp
   18bd8:			; <UNDEFINED> instruction: 0x00018cb0
   18bdc:	movw	r0, #65535	; 0xffff
   18be0:	movt	r0, #63	; 0x3f
   18be4:	orr	r1, r0, #4194304	; 0x400000
   18be8:	mov	r0, #0
   18bec:	cmp	r7, r1
   18bf0:	lsl	r7, r7, #9
   18bf4:	movwhi	r0, #1
   18bf8:	mvnhi	r7, #0
   18bfc:	b	18d9c <__assert_fail@plt+0x75f8>
   18c00:	cmp	r4, #84	; 0x54
   18c04:	beq	18cdc <__assert_fail@plt+0x7538>
   18c08:	cmp	r4, #89	; 0x59
   18c0c:	bne	18d3c <__assert_fail@plt+0x7598>
   18c10:	mvn	r0, #0
   18c14:	mvn	r2, #7
   18c18:	udiv	r1, r0, r5
   18c1c:	mov	r0, #0
   18c20:	cmp	r1, r7
   18c24:	mul	r7, r7, r5
   18c28:	orrcc	r0, r0, #1
   18c2c:	mvncc	r7, #0
   18c30:	adds	r2, r2, #1
   18c34:	bcc	18c20 <__assert_fail@plt+0x747c>
   18c38:	b	18d9c <__assert_fail@plt+0x75f8>
   18c3c:	cmp	r4, #116	; 0x74
   18c40:	beq	18cdc <__assert_fail@plt+0x7538>
   18c44:	cmp	r4, #119	; 0x77
   18c48:	bne	18d3c <__assert_fail@plt+0x7598>
   18c4c:	cmp	r7, #0
   18c50:	lsl	r1, r7, #1
   18c54:	lsr	r0, r7, #31
   18c58:	mvnmi	r1, #0
   18c5c:	b	18ca8 <__assert_fail@plt+0x7504>
   18c60:	mvn	r0, #0
   18c64:	mvn	r2, #2
   18c68:	udiv	r1, r0, r5
   18c6c:	mov	r0, #0
   18c70:	cmp	r1, r7
   18c74:	mul	r7, r7, r5
   18c78:	orrcc	r0, r0, #1
   18c7c:	mvncc	r7, #0
   18c80:	adds	r2, r2, #1
   18c84:	bcc	18c70 <__assert_fail@plt+0x74cc>
   18c88:	b	18d9c <__assert_fail@plt+0x75f8>
   18c8c:	mvn	r0, #0
   18c90:	mul	r1, r7, r5
   18c94:	udiv	r0, r0, r5
   18c98:	cmp	r0, r7
   18c9c:	mov	r0, #0
   18ca0:	mvncc	r1, #0
   18ca4:	movwcc	r0, #1
   18ca8:	mov	r7, r1
   18cac:	b	18d9c <__assert_fail@plt+0x75f8>
   18cb0:	mvn	r0, #0
   18cb4:	mvn	r2, #1
   18cb8:	udiv	r1, r0, r5
   18cbc:	mov	r0, #0
   18cc0:	cmp	r1, r7
   18cc4:	mul	r7, r7, r5
   18cc8:	orrcc	r0, r0, #1
   18ccc:	mvncc	r7, #0
   18cd0:	adds	r2, r2, #1
   18cd4:	bcc	18cc0 <__assert_fail@plt+0x751c>
   18cd8:	b	18d9c <__assert_fail@plt+0x75f8>
   18cdc:	mvn	r0, #0
   18ce0:	mvn	r2, #3
   18ce4:	udiv	r1, r0, r5
   18ce8:	mov	r0, #0
   18cec:	cmp	r1, r7
   18cf0:	mul	r7, r7, r5
   18cf4:	orrcc	r0, r0, #1
   18cf8:	mvncc	r7, #0
   18cfc:	adds	r2, r2, #1
   18d00:	bcc	18cec <__assert_fail@plt+0x7548>
   18d04:	b	18d9c <__assert_fail@plt+0x75f8>
   18d08:	cmp	r4, #90	; 0x5a
   18d0c:	bne	18d3c <__assert_fail@plt+0x7598>
   18d10:	mvn	r0, #0
   18d14:	mvn	r2, #6
   18d18:	udiv	r1, r0, r5
   18d1c:	mov	r0, #0
   18d20:	cmp	r1, r7
   18d24:	mul	r7, r7, r5
   18d28:	orrcc	r0, r0, #1
   18d2c:	mvncc	r7, #0
   18d30:	adds	r2, r2, #1
   18d34:	bcc	18d20 <__assert_fail@plt+0x757c>
   18d38:	b	18d9c <__assert_fail@plt+0x75f8>
   18d3c:	ldr	r0, [sp, #4]
   18d40:	orr	sl, sl, #2
   18d44:	b	18db8 <__assert_fail@plt+0x7614>
   18d48:	mvn	r0, #0
   18d4c:	mvn	r2, #5
   18d50:	udiv	r1, r0, r5
   18d54:	mov	r0, #0
   18d58:	cmp	r1, r7
   18d5c:	mul	r7, r7, r5
   18d60:	orrcc	r0, r0, #1
   18d64:	mvncc	r7, #0
   18d68:	adds	r2, r2, #1
   18d6c:	bcc	18d58 <__assert_fail@plt+0x75b4>
   18d70:	b	18d9c <__assert_fail@plt+0x75f8>
   18d74:	mvn	r0, #0
   18d78:	mvn	r2, #4
   18d7c:	udiv	r1, r0, r5
   18d80:	mov	r0, #0
   18d84:	cmp	r1, r7
   18d88:	mul	r7, r7, r5
   18d8c:	orrcc	r0, r0, #1
   18d90:	mvncc	r7, #0
   18d94:	adds	r2, r2, #1
   18d98:	bcc	18d84 <__assert_fail@plt+0x75e0>
   18d9c:	add	r1, r6, r3
   18da0:	orr	sl, r0, sl
   18da4:	str	r1, [r8]
   18da8:	ldrb	r1, [r6, r3]
   18dac:	cmp	r1, #0
   18db0:	orrne	sl, sl, #2
   18db4:	ldr	r0, [sp, #4]
   18db8:	str	r7, [r0]
   18dbc:	mov	r0, sl
   18dc0:	sub	sp, fp, #28
   18dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc8:	movw	r0, #47807	; 0xbabf
   18dcc:	movw	r1, #47845	; 0xbae5
   18dd0:	movw	r3, #47857	; 0xbaf1
   18dd4:	mov	r2, #84	; 0x54
   18dd8:	movt	r0, #1
   18ddc:	movt	r1, #1
   18de0:	movt	r3, #1
   18de4:	bl	117a4 <__assert_fail@plt>
   18de8:	clz	r2, r1
   18dec:	clz	r3, r0
   18df0:	lsr	r2, r2, #5
   18df4:	lsr	r3, r3, #5
   18df8:	orrs	r2, r3, r2
   18dfc:	movwne	r1, #1
   18e00:	movwne	r0, #1
   18e04:	cmp	r1, #0
   18e08:	beq	18e38 <__assert_fail@plt+0x7694>
   18e0c:	mvn	r2, #-2147483648	; 0x80000000
   18e10:	udiv	r2, r2, r1
   18e14:	cmp	r2, r0
   18e18:	bcs	18e38 <__assert_fail@plt+0x7694>
   18e1c:	push	{fp, lr}
   18e20:	mov	fp, sp
   18e24:	bl	11630 <__errno_location@plt>
   18e28:	mov	r1, #12
   18e2c:	str	r1, [r0]
   18e30:	mov	r0, #0
   18e34:	pop	{fp, pc}
   18e38:	b	113f0 <calloc@plt>
   18e3c:	sub	sp, sp, #8
   18e40:	push	{r4, r5, r6, r7, fp, lr}
   18e44:	add	fp, sp, #16
   18e48:	sub	sp, sp, #8
   18e4c:	mov	r5, r0
   18e50:	add	r0, fp, #8
   18e54:	cmp	r1, #11
   18e58:	str	r2, [fp, #8]
   18e5c:	str	r3, [fp, #12]
   18e60:	str	r0, [sp, #4]
   18e64:	bhi	18ea0 <__assert_fail@plt+0x76fc>
   18e68:	mov	r0, #1
   18e6c:	movw	r2, #1300	; 0x514
   18e70:	tst	r2, r0, lsl r1
   18e74:	bne	18f58 <__assert_fail@plt+0x77b4>
   18e78:	movw	r2, #2570	; 0xa0a
   18e7c:	tst	r2, r0, lsl r1
   18e80:	bne	18ec8 <__assert_fail@plt+0x7724>
   18e84:	cmp	r1, #0
   18e88:	bne	18ea0 <__assert_fail@plt+0x76fc>
   18e8c:	ldr	r0, [sp, #4]
   18e90:	add	r1, r0, #4
   18e94:	str	r1, [sp, #4]
   18e98:	mov	r1, #0
   18e9c:	b	18f64 <__assert_fail@plt+0x77c0>
   18ea0:	sub	r0, r1, #1024	; 0x400
   18ea4:	cmp	r0, #10
   18ea8:	bhi	18f58 <__assert_fail@plt+0x77b4>
   18eac:	mov	r2, #1
   18eb0:	movw	r3, #645	; 0x285
   18eb4:	tst	r3, r2, lsl r0
   18eb8:	bne	18f58 <__assert_fail@plt+0x77b4>
   18ebc:	movw	r3, #1282	; 0x502
   18ec0:	tst	r3, r2, lsl r0
   18ec4:	beq	18ed4 <__assert_fail@plt+0x7730>
   18ec8:	mov	r0, r5
   18ecc:	bl	116c0 <fcntl64@plt>
   18ed0:	b	18f70 <__assert_fail@plt+0x77cc>
   18ed4:	cmp	r0, #6
   18ed8:	bne	18f58 <__assert_fail@plt+0x77b4>
   18edc:	ldr	r0, [sp, #4]
   18ee0:	movw	r7, #50144	; 0xc3e0
   18ee4:	movt	r7, #2
   18ee8:	add	r1, r0, #4
   18eec:	str	r1, [sp, #4]
   18ef0:	ldr	r6, [r0]
   18ef4:	ldr	r0, [r7]
   18ef8:	cmp	r0, #0
   18efc:	bmi	18f94 <__assert_fail@plt+0x77f0>
   18f00:	mov	r0, r5
   18f04:	movw	r1, #1030	; 0x406
   18f08:	mov	r2, r6
   18f0c:	bl	116c0 <fcntl64@plt>
   18f10:	mov	r4, r0
   18f14:	cmn	r0, #1
   18f18:	bgt	18f88 <__assert_fail@plt+0x77e4>
   18f1c:	bl	11630 <__errno_location@plt>
   18f20:	ldr	r0, [r0]
   18f24:	cmp	r0, #22
   18f28:	bne	18f88 <__assert_fail@plt+0x77e4>
   18f2c:	mov	r0, r5
   18f30:	mov	r1, #0
   18f34:	mov	r2, r6
   18f38:	bl	116c0 <fcntl64@plt>
   18f3c:	mov	r4, r0
   18f40:	cmp	r0, #0
   18f44:	bmi	18f74 <__assert_fail@plt+0x77d0>
   18f48:	mvn	r0, #0
   18f4c:	str	r0, [r7]
   18f50:	mov	r0, #1
   18f54:	b	18fb8 <__assert_fail@plt+0x7814>
   18f58:	ldr	r0, [sp, #4]
   18f5c:	add	r2, r0, #4
   18f60:	str	r2, [sp, #4]
   18f64:	ldr	r2, [r0]
   18f68:	mov	r0, r5
   18f6c:	bl	116c0 <fcntl64@plt>
   18f70:	mov	r4, r0
   18f74:	mov	r0, r4
   18f78:	sub	sp, fp, #16
   18f7c:	pop	{r4, r5, r6, r7, fp, lr}
   18f80:	add	sp, sp, #8
   18f84:	bx	lr
   18f88:	mov	r0, #1
   18f8c:	str	r0, [r7]
   18f90:	b	18f74 <__assert_fail@plt+0x77d0>
   18f94:	mov	r0, r5
   18f98:	mov	r1, #0
   18f9c:	mov	r2, r6
   18fa0:	bl	116c0 <fcntl64@plt>
   18fa4:	mov	r4, r0
   18fa8:	ldr	r0, [r7]
   18fac:	add	r0, r0, #1
   18fb0:	clz	r0, r0
   18fb4:	lsr	r0, r0, #5
   18fb8:	cmp	r0, #0
   18fbc:	beq	18f74 <__assert_fail@plt+0x77d0>
   18fc0:	cmp	r4, #0
   18fc4:	bmi	18f74 <__assert_fail@plt+0x77d0>
   18fc8:	mov	r0, r4
   18fcc:	mov	r1, #1
   18fd0:	bl	116c0 <fcntl64@plt>
   18fd4:	cmp	r0, #0
   18fd8:	bmi	18ff4 <__assert_fail@plt+0x7850>
   18fdc:	orr	r2, r0, #1
   18fe0:	mov	r0, r4
   18fe4:	mov	r1, #2
   18fe8:	bl	116c0 <fcntl64@plt>
   18fec:	cmn	r0, #1
   18ff0:	bne	18f74 <__assert_fail@plt+0x77d0>
   18ff4:	bl	11630 <__errno_location@plt>
   18ff8:	ldr	r6, [r0]
   18ffc:	mov	r5, r0
   19000:	mov	r0, r4
   19004:	bl	1178c <close@plt>
   19008:	str	r6, [r5]
   1900c:	mvn	r4, #0
   19010:	b	18f74 <__assert_fail@plt+0x77d0>
   19014:	push	{r4, sl, fp, lr}
   19018:	add	fp, sp, #8
   1901c:	sub	sp, sp, #8
   19020:	mov	r4, r0
   19024:	cmp	r0, #0
   19028:	beq	19060 <__assert_fail@plt+0x78bc>
   1902c:	mov	r0, r4
   19030:	bl	115a0 <__freading@plt>
   19034:	cmp	r0, #0
   19038:	beq	19060 <__assert_fail@plt+0x78bc>
   1903c:	ldrb	r0, [r4, #1]
   19040:	tst	r0, #1
   19044:	beq	19060 <__assert_fail@plt+0x78bc>
   19048:	mov	r0, #1
   1904c:	mov	r2, #0
   19050:	mov	r3, #0
   19054:	str	r0, [sp]
   19058:	mov	r0, r4
   1905c:	bl	190d8 <__assert_fail@plt+0x7934>
   19060:	mov	r0, r4
   19064:	sub	sp, fp, #8
   19068:	pop	{r4, sl, fp, lr}
   1906c:	b	1142c <fflush@plt>
   19070:	ldrd	r2, [r0, #16]
   19074:	mov	r1, #0
   19078:	cmp	r3, r2
   1907c:	bhi	190a8 <__assert_fail@plt+0x7904>
   19080:	ldrb	r3, [r0, #1]
   19084:	ldmib	r0, {r1, r2}
   19088:	sub	r1, r2, r1
   1908c:	mov	r2, #0
   19090:	tst	r3, #1
   19094:	beq	190a4 <__assert_fail@plt+0x7900>
   19098:	ldr	r2, [r0, #36]	; 0x24
   1909c:	ldr	r0, [r0, #44]	; 0x2c
   190a0:	sub	r2, r0, r2
   190a4:	add	r1, r1, r2
   190a8:	mov	r0, r1
   190ac:	bx	lr
   190b0:	push	{r4, r5, r6, sl, fp, lr}
   190b4:	add	fp, sp, #16
   190b8:	mov	r4, r0
   190bc:	bl	11630 <__errno_location@plt>
   190c0:	ldr	r6, [r0]
   190c4:	mov	r5, r0
   190c8:	mov	r0, r4
   190cc:	bl	11444 <free@plt>
   190d0:	str	r6, [r5]
   190d4:	pop	{r4, r5, r6, sl, fp, pc}
   190d8:	push	{r4, r5, r6, r7, fp, lr}
   190dc:	add	fp, sp, #16
   190e0:	sub	sp, sp, #8
   190e4:	mov	r4, r0
   190e8:	ldr	r0, [r0, #4]
   190ec:	mov	r5, r3
   190f0:	mov	r6, r2
   190f4:	ldr	r1, [r4, #8]
   190f8:	cmp	r1, r0
   190fc:	bne	19118 <__assert_fail@plt+0x7974>
   19100:	ldrd	r0, [r4, #16]
   19104:	cmp	r1, r0
   19108:	bne	19118 <__assert_fail@plt+0x7974>
   1910c:	ldr	r0, [r4, #36]	; 0x24
   19110:	cmp	r0, #0
   19114:	beq	19130 <__assert_fail@plt+0x798c>
   19118:	mov	r0, r4
   1911c:	mov	r2, r6
   19120:	mov	r3, r5
   19124:	sub	sp, fp, #16
   19128:	pop	{r4, r5, r6, r7, fp, lr}
   1912c:	b	116b4 <fseeko64@plt>
   19130:	ldr	r7, [fp, #8]
   19134:	mov	r0, r4
   19138:	bl	11678 <fileno@plt>
   1913c:	mov	r2, r6
   19140:	mov	r3, r5
   19144:	str	r7, [sp]
   19148:	bl	11510 <lseek64@plt>
   1914c:	and	r2, r0, r1
   19150:	cmn	r2, #1
   19154:	beq	19170 <__assert_fail@plt+0x79cc>
   19158:	strd	r0, [r4, #80]	; 0x50
   1915c:	ldr	r0, [r4]
   19160:	bic	r0, r0, #16
   19164:	str	r0, [r4]
   19168:	mov	r0, #0
   1916c:	b	19174 <__assert_fail@plt+0x79d0>
   19170:	mvn	r0, #0
   19174:	sub	sp, fp, #16
   19178:	pop	{r4, r5, r6, r7, fp, pc}
   1917c:	cmp	r0, #0
   19180:	movweq	r0, #1
   19184:	cmn	r0, #1
   19188:	ble	19190 <__assert_fail@plt+0x79ec>
   1918c:	b	11588 <malloc@plt>
   19190:	push	{fp, lr}
   19194:	mov	fp, sp
   19198:	bl	11630 <__errno_location@plt>
   1919c:	mov	r1, #12
   191a0:	str	r1, [r0]
   191a4:	mov	r0, #0
   191a8:	pop	{fp, pc}
   191ac:	push	{r4, r5, r6, r7, fp, lr}
   191b0:	add	fp, sp, #16
   191b4:	sub	sp, sp, #8
   191b8:	cmp	r0, #0
   191bc:	add	r5, sp, #4
   191c0:	mov	r7, r2
   191c4:	mov	r4, r1
   191c8:	movne	r5, r0
   191cc:	mov	r0, r5
   191d0:	bl	1154c <mbrtowc@plt>
   191d4:	mov	r6, r0
   191d8:	cmp	r7, #0
   191dc:	beq	19204 <__assert_fail@plt+0x7a60>
   191e0:	cmn	r6, #2
   191e4:	bcc	19204 <__assert_fail@plt+0x7a60>
   191e8:	mov	r0, #0
   191ec:	bl	1931c <__assert_fail@plt+0x7b78>
   191f0:	cmp	r0, #0
   191f4:	bne	19204 <__assert_fail@plt+0x7a60>
   191f8:	ldrb	r0, [r4]
   191fc:	mov	r6, #1
   19200:	str	r0, [r5]
   19204:	mov	r0, r6
   19208:	sub	sp, fp, #16
   1920c:	pop	{r4, r5, r6, r7, fp, pc}
   19210:	push	{fp, lr}
   19214:	mov	fp, sp
   19218:	cmp	r0, #0
   1921c:	beq	19238 <__assert_fail@plt+0x7a94>
   19220:	cmp	r1, #0
   19224:	beq	19244 <__assert_fail@plt+0x7aa0>
   19228:	cmn	r1, #1
   1922c:	ble	1924c <__assert_fail@plt+0x7aa8>
   19230:	pop	{fp, lr}
   19234:	b	114c8 <realloc@plt>
   19238:	mov	r0, r1
   1923c:	pop	{fp, lr}
   19240:	b	1917c <__assert_fail@plt+0x79d8>
   19244:	bl	190b0 <__assert_fail@plt+0x790c>
   19248:	b	19258 <__assert_fail@plt+0x7ab4>
   1924c:	bl	11630 <__errno_location@plt>
   19250:	mov	r1, #12
   19254:	str	r1, [r0]
   19258:	mov	r0, #0
   1925c:	pop	{fp, pc}
   19260:	cmp	r2, #0
   19264:	beq	19294 <__assert_fail@plt+0x7af0>
   19268:	mvn	r3, #0
   1926c:	udiv	r3, r3, r2
   19270:	cmp	r3, r1
   19274:	bcs	19294 <__assert_fail@plt+0x7af0>
   19278:	push	{fp, lr}
   1927c:	mov	fp, sp
   19280:	bl	11630 <__errno_location@plt>
   19284:	mov	r1, #12
   19288:	str	r1, [r0]
   1928c:	mov	r0, #0
   19290:	pop	{fp, pc}
   19294:	mul	r1, r2, r1
   19298:	b	19210 <__assert_fail@plt+0x7a6c>
   1929c:	push	{r4, r5, r6, sl, fp, lr}
   192a0:	add	fp, sp, #16
   192a4:	mov	r4, r0
   192a8:	bl	11540 <__fpending@plt>
   192ac:	mov	r5, r0
   192b0:	mov	r0, r4
   192b4:	bl	11450 <ferror@plt>
   192b8:	mov	r6, r0
   192bc:	mov	r0, r4
   192c0:	bl	11690 <fclose@plt>
   192c4:	cmp	r6, #0
   192c8:	beq	192e8 <__assert_fail@plt+0x7b44>
   192cc:	mvn	r4, #0
   192d0:	cmp	r0, #0
   192d4:	bne	19314 <__assert_fail@plt+0x7b70>
   192d8:	bl	11630 <__errno_location@plt>
   192dc:	mov	r1, #0
   192e0:	str	r1, [r0]
   192e4:	b	19314 <__assert_fail@plt+0x7b70>
   192e8:	cmp	r0, #0
   192ec:	mov	r4, r0
   192f0:	mvnne	r4, #0
   192f4:	cmp	r5, #0
   192f8:	bne	19314 <__assert_fail@plt+0x7b70>
   192fc:	cmp	r0, #0
   19300:	beq	19314 <__assert_fail@plt+0x7b70>
   19304:	bl	11630 <__errno_location@plt>
   19308:	ldr	r0, [r0]
   1930c:	subs	r4, r0, #9
   19310:	mvnne	r4, #0
   19314:	mov	r0, r4
   19318:	pop	{r4, r5, r6, sl, fp, pc}
   1931c:	push	{r4, sl, fp, lr}
   19320:	add	fp, sp, #8
   19324:	sub	sp, sp, #264	; 0x108
   19328:	add	r1, sp, #7
   1932c:	movw	r2, #257	; 0x101
   19330:	bl	195b8 <__assert_fail@plt+0x7e14>
   19334:	mov	r4, #0
   19338:	cmp	r0, #0
   1933c:	bne	1937c <__assert_fail@plt+0x7bd8>
   19340:	movw	r1, #47938	; 0xbb42
   19344:	add	r0, sp, #7
   19348:	mov	r2, #2
   1934c:	movt	r1, #1
   19350:	bl	115e8 <bcmp@plt>
   19354:	cmp	r0, #0
   19358:	beq	1937c <__assert_fail@plt+0x7bd8>
   1935c:	movw	r1, #47940	; 0xbb44
   19360:	add	r0, sp, #7
   19364:	mov	r2, #6
   19368:	movt	r1, #1
   1936c:	bl	115e8 <bcmp@plt>
   19370:	cmp	r0, #0
   19374:	mov	r4, r0
   19378:	movwne	r4, #1
   1937c:	mov	r0, r4
   19380:	sub	sp, fp, #8
   19384:	pop	{r4, sl, fp, pc}
   19388:	push	{fp, lr}
   1938c:	mov	fp, sp
   19390:	mov	r0, #14
   19394:	bl	116fc <nl_langinfo@plt>
   19398:	movw	r1, #41939	; 0xa3d3
   1939c:	cmp	r0, #0
   193a0:	movt	r1, #1
   193a4:	movne	r1, r0
   193a8:	movw	r0, #47946	; 0xbb4a
   193ac:	ldrb	r2, [r1]
   193b0:	movt	r0, #1
   193b4:	cmp	r2, #0
   193b8:	movne	r0, r1
   193bc:	pop	{fp, pc}
   193c0:	push	{r4, sl, fp, lr}
   193c4:	add	fp, sp, #8
   193c8:	mov	r4, #0
   193cc:	adds	r0, r0, #16
   193d0:	adc	r1, r4, #0
   193d4:	rsb	r2, r1, #0
   193d8:	eors	r2, r2, r1
   193dc:	movwne	r2, #1
   193e0:	cmp	r0, #0
   193e4:	bmi	19420 <__assert_fail@plt+0x7c7c>
   193e8:	cmp	r2, #0
   193ec:	asreq	r2, r0, #31
   193f0:	eoreq	r3, r0, r0
   193f4:	andeq	r2, r2, #1
   193f8:	eoreq	r1, r1, r2
   193fc:	orrseq	r1, r3, r1
   19400:	bne	19420 <__assert_fail@plt+0x7c7c>
   19404:	bl	11588 <malloc@plt>
   19408:	cmp	r0, #0
   1940c:	addne	r4, r0, #8
   19410:	movne	r1, #8
   19414:	bfine	r4, r1, #0, #4
   19418:	subne	r0, r4, r0
   1941c:	strbne	r0, [r4, #-1]
   19420:	mov	r0, r4
   19424:	pop	{r4, sl, fp, pc}
   19428:	push	{fp, lr}
   1942c:	mov	fp, sp
   19430:	tst	r0, #7
   19434:	bne	19450 <__assert_fail@plt+0x7cac>
   19438:	tst	r0, #8
   1943c:	popeq	{fp, pc}
   19440:	ldrb	r1, [r0, #-1]
   19444:	sub	r0, r0, r1
   19448:	pop	{fp, lr}
   1944c:	b	190b0 <__assert_fail@plt+0x790c>
   19450:	bl	11774 <abort@plt>
   19454:	push	{r4, sl, fp, lr}
   19458:	add	fp, sp, #8
   1945c:	mov	r4, r0
   19460:	bl	11438 <wcwidth@plt>
   19464:	cmn	r0, #1
   19468:	popgt	{r4, sl, fp, pc}
   1946c:	mov	r0, r4
   19470:	bl	114e0 <iswcntrl@plt>
   19474:	clz	r0, r0
   19478:	lsr	r0, r0, #5
   1947c:	pop	{r4, sl, fp, pc}
   19480:	push	{r4, r5, r6, sl, fp, lr}
   19484:	add	fp, sp, #16
   19488:	mov	r4, r0
   1948c:	mov	r0, r1
   19490:	mov	r5, r1
   19494:	ldr	r1, [r0], #16
   19498:	cmp	r1, r0
   1949c:	beq	194a8 <__assert_fail@plt+0x7d04>
   194a0:	mov	r6, r1
   194a4:	b	194b8 <__assert_fail@plt+0x7d14>
   194a8:	ldr	r2, [r5, #4]
   194ac:	add	r6, r4, #16
   194b0:	mov	r0, r6
   194b4:	bl	11468 <memcpy@plt>
   194b8:	str	r6, [r4]
   194bc:	ldr	r0, [r5, #4]
   194c0:	str	r0, [r4, #4]
   194c4:	ldrb	r0, [r5, #8]
   194c8:	strb	r0, [r4, #8]
   194cc:	cmp	r0, #0
   194d0:	ldrne	r0, [r5, #12]
   194d4:	strne	r0, [r4, #12]
   194d8:	pop	{r4, r5, r6, sl, fp, pc}
   194dc:	movw	r2, #47952	; 0xbb50
   194e0:	ubfx	r1, r0, #5, #3
   194e4:	and	r0, r0, #31
   194e8:	movt	r2, #1
   194ec:	ldr	r1, [r2, r1, lsl #2]
   194f0:	mov	r2, #1
   194f4:	and	r0, r1, r2, lsl r0
   194f8:	cmp	r0, #0
   194fc:	movwne	r0, #1
   19500:	bx	lr
   19504:	push	{r4, r5, r6, sl, fp, lr}
   19508:	add	fp, sp, #16
   1950c:	sub	sp, sp, #56	; 0x38
   19510:	mov	r5, r0
   19514:	bl	11528 <__ctype_get_mb_cur_max@plt>
   19518:	cmp	r0, #2
   1951c:	bcc	195a8 <__assert_fail@plt+0x7e04>
   19520:	mov	r4, #0
   19524:	mov	r0, sp
   19528:	str	r4, [sp, #8]
   1952c:	str	r4, [sp, #4]
   19530:	strb	r4, [sp, #12]
   19534:	strb	r4, [sp]
   19538:	str	r5, [sp, #16]
   1953c:	bl	161c8 <__assert_fail@plt+0x4a24>
   19540:	ldrb	r0, [sp, #24]
   19544:	cmp	r0, #0
   19548:	beq	19558 <__assert_fail@plt+0x7db4>
   1954c:	ldr	r0, [sp, #28]
   19550:	cmp	r0, #0
   19554:	beq	1959c <__assert_fail@plt+0x7df8>
   19558:	mov	r6, #0
   1955c:	mov	r5, sp
   19560:	mov	r4, #0
   19564:	strb	r6, [sp, #12]
   19568:	ldr	r0, [sp, #16]
   1956c:	ldr	r1, [sp, #20]
   19570:	add	r0, r0, r1
   19574:	str	r0, [sp, #16]
   19578:	mov	r0, r5
   1957c:	bl	161c8 <__assert_fail@plt+0x4a24>
   19580:	ldrb	r1, [sp, #24]
   19584:	ldr	r0, [sp, #28]
   19588:	add	r4, r4, #1
   1958c:	cmp	r1, #0
   19590:	beq	19564 <__assert_fail@plt+0x7dc0>
   19594:	cmp	r0, #0
   19598:	bne	19564 <__assert_fail@plt+0x7dc0>
   1959c:	mov	r0, r4
   195a0:	sub	sp, fp, #16
   195a4:	pop	{r4, r5, r6, sl, fp, pc}
   195a8:	mov	r0, r5
   195ac:	sub	sp, fp, #16
   195b0:	pop	{r4, r5, r6, sl, fp, lr}
   195b4:	b	11600 <strlen@plt>
   195b8:	push	{r4, r5, r6, r7, fp, lr}
   195bc:	add	fp, sp, #16
   195c0:	mov	r4, r1
   195c4:	mov	r1, #0
   195c8:	mov	r6, r2
   195cc:	bl	116cc <setlocale@plt>
   195d0:	cmp	r0, #0
   195d4:	beq	19600 <__assert_fail@plt+0x7e5c>
   195d8:	mov	r7, r0
   195dc:	bl	11600 <strlen@plt>
   195e0:	cmp	r0, r6
   195e4:	bcs	19614 <__assert_fail@plt+0x7e70>
   195e8:	add	r2, r0, #1
   195ec:	mov	r0, r4
   195f0:	mov	r1, r7
   195f4:	bl	11468 <memcpy@plt>
   195f8:	mov	r5, #0
   195fc:	b	1963c <__assert_fail@plt+0x7e98>
   19600:	cmp	r6, #0
   19604:	mov	r5, #22
   19608:	movne	r0, #0
   1960c:	strbne	r0, [r4]
   19610:	b	1963c <__assert_fail@plt+0x7e98>
   19614:	mov	r5, #34	; 0x22
   19618:	cmp	r6, #0
   1961c:	beq	1963c <__assert_fail@plt+0x7e98>
   19620:	sub	r6, r6, #1
   19624:	mov	r0, r4
   19628:	mov	r1, r7
   1962c:	mov	r2, r6
   19630:	bl	11468 <memcpy@plt>
   19634:	mov	r0, #0
   19638:	strb	r0, [r4, r6]
   1963c:	mov	r0, r5
   19640:	pop	{r4, r5, r6, r7, fp, pc}
   19644:	mov	r1, #0
   19648:	b	116cc <setlocale@plt>
   1964c:	mov	r1, #0
   19650:	mov	r2, #3
   19654:	b	18e3c <__assert_fail@plt+0x7698>
   19658:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1965c:	mov	r7, r0
   19660:	ldr	r6, [pc, #72]	; 196b0 <__assert_fail@plt+0x7f0c>
   19664:	ldr	r5, [pc, #72]	; 196b4 <__assert_fail@plt+0x7f10>
   19668:	add	r6, pc, r6
   1966c:	add	r5, pc, r5
   19670:	sub	r6, r6, r5
   19674:	mov	r8, r1
   19678:	mov	r9, r2
   1967c:	bl	113c4 <fdopen@plt-0x20>
   19680:	asrs	r6, r6, #2
   19684:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19688:	mov	r4, #0
   1968c:	add	r4, r4, #1
   19690:	ldr	r3, [r5], #4
   19694:	mov	r2, r9
   19698:	mov	r1, r8
   1969c:	mov	r0, r7
   196a0:	blx	r3
   196a4:	cmp	r6, r4
   196a8:	bne	1968c <__assert_fail@plt+0x7ee8>
   196ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196b0:	muleq	r1, ip, r8
   196b4:	muleq	r1, r4, r8
   196b8:	bx	lr
   196bc:	ldr	r3, [pc, #12]	; 196d0 <__assert_fail@plt+0x7f2c>
   196c0:	mov	r1, #0
   196c4:	add	r3, pc, r3
   196c8:	ldr	r2, [r3]
   196cc:	b	11648 <__cxa_atexit@plt>
   196d0:	muleq	r1, r0, sl

Disassembly of section .fini:

000196d4 <.fini>:
   196d4:	push	{r3, lr}
   196d8:	pop	{r3, pc}
