
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	sp, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #118784	; 0x1d000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #118784	; 0x1d000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <memcmp@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #118784	; 0x1d000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <realloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #118784	; 0x1d000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <malloc@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #118784	; 0x1d000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__libc_start_main@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #118784	; 0x1d000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <__gmon_start__@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #118784	; 0x1d000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #118784	; 0x1d000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #118784	; 0x1d000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #118784	; 0x1d000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #118784	; 0x1d000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #118784	; 0x1d000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #118784	; 0x1d000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #118784	; 0x1d000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	12748 <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	sp, r1, r4, asr #9
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	sp, r1, r4, ror #8
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12754 <__gmon_start__@plt>
   1280c:	andeq	sp, r1, r0, lsl #16
   12810:	andeq	r0, r0, r8, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	r0, r3, ip, asr r0
   12838:	andeq	r0, r3, ip, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	r0, r3, ip, asr r0
   12870:	andeq	r0, r3, ip, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	r0, r3, ip, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, fp, lr}
   128a8:	add	fp, sp, #8
   128ac:	sub	sp, sp, #280	; 0x118
   128b0:	movw	r2, #0
   128b4:	str	r2, [fp, #-12]
   128b8:	str	r0, [fp, #-16]
   128bc:	str	r1, [fp, #-20]	; 0xffffffec
   128c0:	add	r0, sp, #24
   128c4:	str	r0, [sp, #20]
   128c8:	ldr	r0, [sp, #20]
   128cc:	bl	141f0 <flatcc_builder_init@@Base>
   128d0:	ldr	r1, [sp, #20]
   128d4:	str	r0, [sp, #16]
   128d8:	mov	r0, r1
   128dc:	bl	12954 <main@@Base+0xb0>
   128e0:	ldr	r1, [pc, #104]	; 12950 <main@@Base+0xac>
   128e4:	add	r1, pc, r1
   128e8:	ldr	r2, [sp, #20]
   128ec:	str	r0, [sp, #12]
   128f0:	mov	r0, r2
   128f4:	bl	129a4 <main@@Base+0x100>
   128f8:	ldr	r1, [sp, #20]
   128fc:	str	r0, [sp, #8]
   12900:	mov	r0, r1
   12904:	bl	129f0 <main@@Base+0x14c>
   12908:	ldr	r1, [sp, #20]
   1290c:	str	r0, [sp, #4]
   12910:	mov	r0, r1
   12914:	sub	r1, fp, #32
   12918:	bl	1966c <flatcc_builder_get_direct_buffer@@Base>
   1291c:	ldr	r1, [pc, #40]	; 1294c <main@@Base+0xa8>
   12920:	add	r2, pc, r1
   12924:	str	r0, [fp, #-28]	; 0xffffffe4
   12928:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1292c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12930:	bl	12a30 <main@@Base+0x18c>
   12934:	str	r0, [fp, #-24]	; 0xffffffe8
   12938:	ldr	r0, [sp, #20]
   1293c:	bl	1449c <flatcc_builder_clear@@Base>
   12940:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12944:	sub	sp, fp, #8
   12948:	pop	{r4, r5, fp, pc}
   1294c:			; <UNDEFINED> instruction: 0x0000abb6
   12950:	andeq	sl, r0, r8, ror #23
   12954:	push	{fp, lr}
   12958:	mov	fp, sp
   1295c:	sub	sp, sp, #8
   12960:	ldr	r1, [pc, #56]	; 129a0 <main@@Base+0xfc>
   12964:	add	r1, pc, r1
   12968:	str	r0, [sp, #4]
   1296c:	ldr	r0, [sp, #4]
   12970:	bl	12a6c <main@@Base+0x1c8>
   12974:	cmp	r0, #0
   12978:	beq	12988 <main@@Base+0xe4>
   1297c:	mvn	r0, #0
   12980:	str	r0, [sp]
   12984:	b	12994 <main@@Base+0xf0>
   12988:	ldr	r0, [sp, #4]
   1298c:	bl	12aa0 <main@@Base+0x1fc>
   12990:	str	r0, [sp]
   12994:	ldr	r0, [sp]
   12998:	mov	sp, fp
   1299c:	pop	{fp, pc}
   129a0:	andeq	sl, r0, r2, ror fp
   129a4:	push	{fp, lr}
   129a8:	mov	fp, sp
   129ac:	sub	sp, sp, #16
   129b0:	str	r0, [fp, #-4]
   129b4:	str	r1, [sp, #8]
   129b8:	ldr	r0, [fp, #-4]
   129bc:	ldr	r1, [fp, #-4]
   129c0:	ldr	r2, [sp, #8]
   129c4:	str	r0, [sp, #4]
   129c8:	mov	r0, r1
   129cc:	mov	r1, r2
   129d0:	bl	18efc <flatcc_builder_create_string_str@@Base>
   129d4:	ldr	r1, [sp, #4]
   129d8:	str	r0, [sp]
   129dc:	mov	r0, r1
   129e0:	ldr	r1, [sp]
   129e4:	bl	12ac4 <main@@Base+0x220>
   129e8:	mov	sp, fp
   129ec:	pop	{fp, pc}
   129f0:	push	{fp, lr}
   129f4:	mov	fp, sp
   129f8:	sub	sp, sp, #16
   129fc:	str	r0, [fp, #-4]
   12a00:	ldr	r0, [fp, #-4]
   12a04:	ldr	r1, [fp, #-4]
   12a08:	str	r0, [sp, #8]
   12a0c:	mov	r0, r1
   12a10:	bl	12b58 <main@@Base+0x2b4>
   12a14:	ldr	r1, [sp, #8]
   12a18:	str	r0, [sp, #4]
   12a1c:	mov	r0, r1
   12a20:	ldr	r1, [sp, #4]
   12a24:	bl	12b30 <main@@Base+0x28c>
   12a28:	mov	sp, fp
   12a2c:	pop	{fp, pc}
   12a30:	push	{fp, lr}
   12a34:	mov	fp, sp
   12a38:	sub	sp, sp, #16
   12a3c:	ldr	r3, [pc, #36]	; 12a68 <main@@Base+0x1c4>
   12a40:	add	r3, pc, r3
   12a44:	str	r0, [fp, #-4]
   12a48:	str	r1, [sp, #8]
   12a4c:	str	r2, [sp, #4]
   12a50:	ldr	r0, [fp, #-4]
   12a54:	ldr	r1, [sp, #8]
   12a58:	ldr	r2, [sp, #4]
   12a5c:	bl	1c510 <flatcc_verify_table_as_root@@Base>
   12a60:	mov	sp, fp
   12a64:	pop	{fp, pc}
   12a68:	andeq	r0, r0, r0, lsl #3
   12a6c:	push	{fp, lr}
   12a70:	mov	fp, sp
   12a74:	sub	sp, sp, #8
   12a78:	str	r0, [sp, #4]
   12a7c:	str	r1, [sp]
   12a80:	ldr	r0, [sp, #4]
   12a84:	ldr	r1, [sp]
   12a88:	movw	r2, #0
   12a8c:	uxth	r2, r2
   12a90:	movw	r3, #0
   12a94:	bl	15334 <flatcc_builder_start_buffer@@Base>
   12a98:	mov	sp, fp
   12a9c:	pop	{fp, pc}
   12aa0:	push	{fp, lr}
   12aa4:	mov	fp, sp
   12aa8:	sub	sp, sp, #8
   12aac:	str	r0, [sp, #4]
   12ab0:	ldr	r0, [sp, #4]
   12ab4:	movw	r1, #36	; 0x24
   12ab8:	bl	16a68 <flatcc_builder_start_table@@Base>
   12abc:	mov	sp, fp
   12ac0:	pop	{fp, pc}
   12ac4:	push	{fp, lr}
   12ac8:	mov	fp, sp
   12acc:	sub	sp, sp, #16
   12ad0:	str	r0, [fp, #-4]
   12ad4:	str	r1, [sp, #8]
   12ad8:	ldr	r0, [sp, #8]
   12adc:	cmp	r0, #0
   12ae0:	beq	12b18 <main@@Base+0x274>
   12ae4:	ldr	r0, [fp, #-4]
   12ae8:	movw	r1, #3
   12aec:	bl	181f0 <flatcc_builder_table_add_offset@@Base>
   12af0:	str	r0, [sp, #4]
   12af4:	movw	r1, #0
   12af8:	cmp	r0, r1
   12afc:	beq	12b18 <main@@Base+0x274>
   12b00:	ldr	r0, [sp, #8]
   12b04:	ldr	r1, [sp, #4]
   12b08:	str	r0, [r1]
   12b0c:	movw	r0, #0
   12b10:	str	r0, [sp]
   12b14:	b	12b24 <main@@Base+0x280>
   12b18:	mvn	r0, #0
   12b1c:	str	r0, [sp]
   12b20:	b	12b24 <main@@Base+0x280>
   12b24:	ldr	r0, [sp]
   12b28:	mov	sp, fp
   12b2c:	pop	{fp, pc}
   12b30:	push	{fp, lr}
   12b34:	mov	fp, sp
   12b38:	sub	sp, sp, #8
   12b3c:	str	r0, [sp, #4]
   12b40:	str	r1, [sp]
   12b44:	ldr	r0, [sp, #4]
   12b48:	ldr	r1, [sp]
   12b4c:	bl	15678 <flatcc_builder_end_buffer@@Base>
   12b50:	mov	sp, fp
   12b54:	pop	{fp, pc}
   12b58:	push	{fp, lr}
   12b5c:	mov	fp, sp
   12b60:	sub	sp, sp, #8
   12b64:	ldr	r1, [pc, #76]	; 12bb8 <main@@Base+0x314>
   12b68:	add	r1, pc, r1
   12b6c:	str	r0, [sp, #4]
   12b70:	ldr	r0, [sp, #4]
   12b74:	movw	r2, #1
   12b78:	bl	175f0 <flatcc_builder_check_required@@Base>
   12b7c:	cmp	r0, #0
   12b80:	beq	12b88 <main@@Base+0x2e4>
   12b84:	b	12ba8 <main@@Base+0x304>
   12b88:	ldr	r0, [pc, #44]	; 12bbc <main@@Base+0x318>
   12b8c:	add	r0, pc, r0
   12b90:	ldr	r1, [pc, #40]	; 12bc0 <main@@Base+0x31c>
   12b94:	add	r1, pc, r1
   12b98:	ldr	r2, [pc, #36]	; 12bc4 <main@@Base+0x320>
   12b9c:	add	r3, pc, r2
   12ba0:	movw	r2, #2398	; 0x95e
   12ba4:	bl	127a8 <__assert_fail@plt>
   12ba8:	ldr	r0, [sp, #4]
   12bac:	bl	176e0 <flatcc_builder_end_table@@Base>
   12bb0:	mov	sp, fp
   12bb4:	pop	{fp, pc}
   12bb8:	strdeq	sl, [r0], -r8
   12bbc:	andeq	sl, r0, pc, asr #18
   12bc0:	strdeq	sl, [r0], -r5
   12bc4:	andeq	sl, r0, sl, ror #20
   12bc8:	push	{fp, lr}
   12bcc:	mov	fp, sp
   12bd0:	sub	sp, sp, #56	; 0x38
   12bd4:	str	r0, [fp, #-8]
   12bd8:	ldr	r0, [fp, #-8]
   12bdc:	movw	r1, #0
   12be0:	uxth	r1, r1
   12be4:	movw	r2, #32
   12be8:	movw	r3, #16
   12bec:	uxth	r3, r3
   12bf0:	bl	1ad38 <flatcc_verify_field@@Base>
   12bf4:	str	r0, [fp, #-12]
   12bf8:	cmp	r0, #0
   12bfc:	beq	12c0c <main@@Base+0x368>
   12c00:	ldr	r0, [fp, #-12]
   12c04:	str	r0, [fp, #-4]
   12c08:	b	13398 <main@@Base+0xaf4>
   12c0c:	ldr	r0, [fp, #-8]
   12c10:	movw	r1, #2
   12c14:	uxth	r2, r1
   12c18:	str	r1, [fp, #-16]
   12c1c:	mov	r1, r2
   12c20:	movw	r2, #2
   12c24:	ldr	r3, [fp, #-16]
   12c28:	uxth	r3, r3
   12c2c:	bl	1ad38 <flatcc_verify_field@@Base>
   12c30:	str	r0, [fp, #-12]
   12c34:	cmp	r0, #0
   12c38:	beq	12c48 <main@@Base+0x3a4>
   12c3c:	ldr	r0, [fp, #-12]
   12c40:	str	r0, [fp, #-4]
   12c44:	b	13398 <main@@Base+0xaf4>
   12c48:	ldr	r0, [fp, #-8]
   12c4c:	movw	r1, #1
   12c50:	uxth	r1, r1
   12c54:	movw	r2, #2
   12c58:	movw	r3, #2
   12c5c:	uxth	r3, r3
   12c60:	bl	1ad38 <flatcc_verify_field@@Base>
   12c64:	str	r0, [fp, #-12]
   12c68:	cmp	r0, #0
   12c6c:	beq	12c7c <main@@Base+0x3d8>
   12c70:	ldr	r0, [fp, #-12]
   12c74:	str	r0, [fp, #-4]
   12c78:	b	13398 <main@@Base+0xaf4>
   12c7c:	ldr	r0, [fp, #-8]
   12c80:	movw	r1, #3
   12c84:	uxth	r1, r1
   12c88:	movw	r2, #1
   12c8c:	bl	1af44 <flatcc_verify_string_field@@Base>
   12c90:	str	r0, [fp, #-12]
   12c94:	cmp	r0, #0
   12c98:	beq	12ca8 <main@@Base+0x404>
   12c9c:	ldr	r0, [fp, #-12]
   12ca0:	str	r0, [fp, #-4]
   12ca4:	b	13398 <main@@Base+0xaf4>
   12ca8:	ldr	r0, [fp, #-8]
   12cac:	movw	r1, #6
   12cb0:	uxth	r1, r1
   12cb4:	movw	r2, #1
   12cb8:	movw	r3, #1
   12cbc:	uxth	r3, r3
   12cc0:	bl	1ad38 <flatcc_verify_field@@Base>
   12cc4:	str	r0, [fp, #-12]
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cdc <main@@Base+0x438>
   12cd0:	ldr	r0, [fp, #-12]
   12cd4:	str	r0, [fp, #-4]
   12cd8:	b	13398 <main@@Base+0xaf4>
   12cdc:	ldr	r0, [fp, #-8]
   12ce0:	movw	r1, #5
   12ce4:	uxth	r1, r1
   12ce8:	movw	r2, #0
   12cec:	movw	r3, #1
   12cf0:	movw	ip, #1
   12cf4:	uxth	ip, ip
   12cf8:	str	ip, [sp]
   12cfc:	mvn	ip, #0
   12d00:	str	ip, [sp, #4]
   12d04:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   12d08:	str	r0, [fp, #-12]
   12d0c:	cmp	r0, #0
   12d10:	beq	12d20 <main@@Base+0x47c>
   12d14:	ldr	r0, [fp, #-12]
   12d18:	str	r0, [fp, #-4]
   12d1c:	b	13398 <main@@Base+0xaf4>
   12d20:	ldr	r0, [pc, #1660]	; 133a4 <main@@Base+0xb00>
   12d24:	add	r3, pc, r0
   12d28:	ldr	r0, [fp, #-8]
   12d2c:	movw	r1, #11
   12d30:	uxth	r1, r1
   12d34:	movw	r2, #0
   12d38:	bl	1bb2c <flatcc_verify_table_vector_field@@Base>
   12d3c:	str	r0, [fp, #-12]
   12d40:	cmp	r0, #0
   12d44:	beq	12d54 <main@@Base+0x4b0>
   12d48:	ldr	r0, [fp, #-12]
   12d4c:	str	r0, [fp, #-4]
   12d50:	b	13398 <main@@Base+0xaf4>
   12d54:	ldr	r0, [fp, #-8]
   12d58:	movw	r1, #10
   12d5c:	uxth	r1, r1
   12d60:	movw	r2, #0
   12d64:	bl	1b4e0 <flatcc_verify_string_vector_field@@Base>
   12d68:	str	r0, [fp, #-12]
   12d6c:	cmp	r0, #0
   12d70:	beq	12d80 <main@@Base+0x4dc>
   12d74:	ldr	r0, [fp, #-12]
   12d78:	str	r0, [fp, #-4]
   12d7c:	b	13398 <main@@Base+0xaf4>
   12d80:	ldr	r0, [fp, #-8]
   12d84:	movw	r1, #28
   12d88:	uxth	r1, r1
   12d8c:	movw	r2, #0
   12d90:	bl	1b4e0 <flatcc_verify_string_vector_field@@Base>
   12d94:	str	r0, [fp, #-12]
   12d98:	cmp	r0, #0
   12d9c:	beq	12dac <main@@Base+0x508>
   12da0:	ldr	r0, [fp, #-12]
   12da4:	str	r0, [fp, #-4]
   12da8:	b	13398 <main@@Base+0xaf4>
   12dac:	ldr	r0, [fp, #-8]
   12db0:	movw	r1, #24
   12db4:	uxth	r1, r1
   12db8:	movw	r2, #0
   12dbc:	movw	r3, #1
   12dc0:	movw	ip, #1
   12dc4:	uxth	ip, ip
   12dc8:	str	ip, [sp]
   12dcc:	mvn	ip, #0
   12dd0:	str	ip, [sp, #4]
   12dd4:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   12dd8:	str	r0, [fp, #-12]
   12ddc:	cmp	r0, #0
   12de0:	beq	12df0 <main@@Base+0x54c>
   12de4:	ldr	r0, [fp, #-12]
   12de8:	str	r0, [fp, #-4]
   12dec:	b	13398 <main@@Base+0xaf4>
   12df0:	ldr	r0, [pc, #1456]	; 133a8 <main@@Base+0xb04>
   12df4:	ldr	r1, [fp, #-8]
   12df8:	str	r0, [fp, #-20]	; 0xffffffec
   12dfc:	mov	r0, r1
   12e00:	movw	r1, #29
   12e04:	uxth	r1, r1
   12e08:	movw	r2, #0
   12e0c:	movw	r3, #8
   12e10:	movw	ip, #4
   12e14:	uxth	ip, ip
   12e18:	str	ip, [sp]
   12e1c:	ldr	ip, [fp, #-20]	; 0xffffffec
   12e20:	str	ip, [sp, #4]
   12e24:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   12e28:	str	r0, [fp, #-12]
   12e2c:	cmp	r0, #0
   12e30:	beq	12e40 <main@@Base+0x59c>
   12e34:	ldr	r0, [fp, #-12]
   12e38:	str	r0, [fp, #-4]
   12e3c:	b	13398 <main@@Base+0xaf4>
   12e40:	ldr	r0, [pc, #1380]	; 133ac <main@@Base+0xb08>
   12e44:	add	r3, pc, r0
   12e48:	ldr	r0, [fp, #-8]
   12e4c:	movw	r1, #12
   12e50:	uxth	r1, r1
   12e54:	movw	r2, #0
   12e58:	bl	1b760 <flatcc_verify_table_field@@Base>
   12e5c:	str	r0, [fp, #-12]
   12e60:	cmp	r0, #0
   12e64:	beq	12e74 <main@@Base+0x5d0>
   12e68:	ldr	r0, [fp, #-12]
   12e6c:	str	r0, [fp, #-4]
   12e70:	b	13398 <main@@Base+0xaf4>
   12e74:	ldr	r0, [pc, #1332]	; 133b0 <main@@Base+0xb0c>
   12e78:	add	r3, pc, r0
   12e7c:	ldr	r0, [fp, #-8]
   12e80:	movw	r1, #8
   12e84:	uxth	r1, r1
   12e88:	movw	r2, #0
   12e8c:	bl	1c9bc <flatcc_verify_union_field@@Base>
   12e90:	str	r0, [fp, #-12]
   12e94:	cmp	r0, #0
   12e98:	beq	12ea8 <main@@Base+0x604>
   12e9c:	ldr	r0, [fp, #-12]
   12ea0:	str	r0, [fp, #-4]
   12ea4:	b	13398 <main@@Base+0xaf4>
   12ea8:	ldr	r0, [pc, #1284]	; 133b4 <main@@Base+0xb10>
   12eac:	ldr	r1, [fp, #-8]
   12eb0:	str	r0, [fp, #-24]	; 0xffffffe8
   12eb4:	mov	r0, r1
   12eb8:	movw	r1, #9
   12ebc:	uxth	r1, r1
   12ec0:	movw	r2, #0
   12ec4:	movw	r3, #4
   12ec8:	movw	ip, #2
   12ecc:	uxth	ip, ip
   12ed0:	str	ip, [sp]
   12ed4:	ldr	ip, [fp, #-24]	; 0xffffffe8
   12ed8:	str	ip, [sp, #4]
   12edc:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   12ee0:	str	r0, [fp, #-12]
   12ee4:	cmp	r0, #0
   12ee8:	beq	12ef8 <main@@Base+0x654>
   12eec:	ldr	r0, [fp, #-12]
   12ef0:	str	r0, [fp, #-4]
   12ef4:	b	13398 <main@@Base+0xaf4>
   12ef8:	ldr	r0, [pc, #1204]	; 133b4 <main@@Base+0xb10>
   12efc:	ldr	r1, [fp, #-8]
   12f00:	str	r0, [sp, #28]
   12f04:	mov	r0, r1
   12f08:	movw	r1, #31
   12f0c:	uxth	r1, r1
   12f10:	movw	r2, #0
   12f14:	movw	r3, #4
   12f18:	movw	ip, #2
   12f1c:	uxth	ip, ip
   12f20:	str	ip, [sp]
   12f24:	ldr	ip, [sp, #28]
   12f28:	str	ip, [sp, #4]
   12f2c:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   12f30:	str	r0, [fp, #-12]
   12f34:	cmp	r0, #0
   12f38:	beq	12f48 <main@@Base+0x6a4>
   12f3c:	ldr	r0, [fp, #-12]
   12f40:	str	r0, [fp, #-4]
   12f44:	b	13398 <main@@Base+0xaf4>
   12f48:	ldr	r0, [pc, #1128]	; 133b8 <main@@Base+0xb14>
   12f4c:	add	r0, pc, r0
   12f50:	ldr	r1, [fp, #-8]
   12f54:	str	r0, [sp, #24]
   12f58:	mov	r0, r1
   12f5c:	movw	r1, #13
   12f60:	uxth	r1, r1
   12f64:	movw	r2, #0
   12f68:	str	r2, [sp, #20]
   12f6c:	ldr	r3, [sp, #20]
   12f70:	movw	ip, #1
   12f74:	uxth	ip, ip
   12f78:	str	ip, [sp]
   12f7c:	ldr	ip, [sp, #24]
   12f80:	str	ip, [sp, #4]
   12f84:	bl	1c814 <flatcc_verify_table_as_nested_root@@Base>
   12f88:	str	r0, [fp, #-12]
   12f8c:	cmp	r0, #0
   12f90:	beq	12fa0 <main@@Base+0x6fc>
   12f94:	ldr	r0, [fp, #-12]
   12f98:	str	r0, [fp, #-4]
   12f9c:	b	13398 <main@@Base+0xaf4>
   12fa0:	ldr	r0, [pc, #1044]	; 133bc <main@@Base+0xb18>
   12fa4:	add	r3, pc, r0
   12fa8:	ldr	r0, [fp, #-8]
   12fac:	movw	r1, #14
   12fb0:	uxth	r1, r1
   12fb4:	movw	r2, #0
   12fb8:	bl	1b760 <flatcc_verify_table_field@@Base>
   12fbc:	str	r0, [fp, #-12]
   12fc0:	cmp	r0, #0
   12fc4:	beq	12fd4 <main@@Base+0x730>
   12fc8:	ldr	r0, [fp, #-12]
   12fcc:	str	r0, [fp, #-4]
   12fd0:	b	13398 <main@@Base+0xaf4>
   12fd4:	ldr	r0, [fp, #-8]
   12fd8:	movw	r1, #15
   12fdc:	uxth	r1, r1
   12fe0:	movw	r2, #1
   12fe4:	movw	r3, #1
   12fe8:	uxth	r3, r3
   12fec:	bl	1ad38 <flatcc_verify_field@@Base>
   12ff0:	str	r0, [fp, #-12]
   12ff4:	cmp	r0, #0
   12ff8:	beq	13008 <main@@Base+0x764>
   12ffc:	ldr	r0, [fp, #-12]
   13000:	str	r0, [fp, #-4]
   13004:	b	13398 <main@@Base+0xaf4>
   13008:	ldr	r0, [fp, #-8]
   1300c:	movw	r1, #16
   13010:	uxth	r1, r1
   13014:	movw	r2, #4
   13018:	movw	r3, #4
   1301c:	uxth	r3, r3
   13020:	bl	1ad38 <flatcc_verify_field@@Base>
   13024:	str	r0, [fp, #-12]
   13028:	cmp	r0, #0
   1302c:	beq	1303c <main@@Base+0x798>
   13030:	ldr	r0, [fp, #-12]
   13034:	str	r0, [fp, #-4]
   13038:	b	13398 <main@@Base+0xaf4>
   1303c:	ldr	r0, [fp, #-8]
   13040:	movw	r1, #17
   13044:	uxth	r1, r1
   13048:	movw	r2, #4
   1304c:	movw	r3, #4
   13050:	uxth	r3, r3
   13054:	bl	1ad38 <flatcc_verify_field@@Base>
   13058:	str	r0, [fp, #-12]
   1305c:	cmp	r0, #0
   13060:	beq	13070 <main@@Base+0x7cc>
   13064:	ldr	r0, [fp, #-12]
   13068:	str	r0, [fp, #-4]
   1306c:	b	13398 <main@@Base+0xaf4>
   13070:	ldr	r0, [fp, #-8]
   13074:	movw	r1, #18
   13078:	uxth	r1, r1
   1307c:	movw	r2, #8
   13080:	movw	r3, #8
   13084:	uxth	r3, r3
   13088:	bl	1ad38 <flatcc_verify_field@@Base>
   1308c:	str	r0, [fp, #-12]
   13090:	cmp	r0, #0
   13094:	beq	130a4 <main@@Base+0x800>
   13098:	ldr	r0, [fp, #-12]
   1309c:	str	r0, [fp, #-4]
   130a0:	b	13398 <main@@Base+0xaf4>
   130a4:	ldr	r0, [fp, #-8]
   130a8:	movw	r1, #19
   130ac:	uxth	r1, r1
   130b0:	movw	r2, #8
   130b4:	movw	r3, #8
   130b8:	uxth	r3, r3
   130bc:	bl	1ad38 <flatcc_verify_field@@Base>
   130c0:	str	r0, [fp, #-12]
   130c4:	cmp	r0, #0
   130c8:	beq	130d8 <main@@Base+0x834>
   130cc:	ldr	r0, [fp, #-12]
   130d0:	str	r0, [fp, #-4]
   130d4:	b	13398 <main@@Base+0xaf4>
   130d8:	ldr	r0, [fp, #-8]
   130dc:	movw	r1, #20
   130e0:	uxth	r1, r1
   130e4:	movw	r2, #4
   130e8:	movw	r3, #4
   130ec:	uxth	r3, r3
   130f0:	bl	1ad38 <flatcc_verify_field@@Base>
   130f4:	str	r0, [fp, #-12]
   130f8:	cmp	r0, #0
   130fc:	beq	1310c <main@@Base+0x868>
   13100:	ldr	r0, [fp, #-12]
   13104:	str	r0, [fp, #-4]
   13108:	b	13398 <main@@Base+0xaf4>
   1310c:	ldr	r0, [fp, #-8]
   13110:	movw	r1, #21
   13114:	uxth	r1, r1
   13118:	movw	r2, #4
   1311c:	movw	r3, #4
   13120:	uxth	r3, r3
   13124:	bl	1ad38 <flatcc_verify_field@@Base>
   13128:	str	r0, [fp, #-12]
   1312c:	cmp	r0, #0
   13130:	beq	13140 <main@@Base+0x89c>
   13134:	ldr	r0, [fp, #-12]
   13138:	str	r0, [fp, #-4]
   1313c:	b	13398 <main@@Base+0xaf4>
   13140:	ldr	r0, [fp, #-8]
   13144:	movw	r1, #22
   13148:	uxth	r1, r1
   1314c:	movw	r2, #8
   13150:	movw	r3, #8
   13154:	uxth	r3, r3
   13158:	bl	1ad38 <flatcc_verify_field@@Base>
   1315c:	str	r0, [fp, #-12]
   13160:	cmp	r0, #0
   13164:	beq	13174 <main@@Base+0x8d0>
   13168:	ldr	r0, [fp, #-12]
   1316c:	str	r0, [fp, #-4]
   13170:	b	13398 <main@@Base+0xaf4>
   13174:	ldr	r0, [fp, #-8]
   13178:	movw	r1, #23
   1317c:	uxth	r1, r1
   13180:	movw	r2, #8
   13184:	movw	r3, #8
   13188:	uxth	r3, r3
   1318c:	bl	1ad38 <flatcc_verify_field@@Base>
   13190:	str	r0, [fp, #-12]
   13194:	cmp	r0, #0
   13198:	beq	131a8 <main@@Base+0x904>
   1319c:	ldr	r0, [fp, #-12]
   131a0:	str	r0, [fp, #-4]
   131a4:	b	13398 <main@@Base+0xaf4>
   131a8:	ldr	r0, [fp, #-8]
   131ac:	movw	r1, #25
   131b0:	uxth	r1, r1
   131b4:	movw	r2, #4
   131b8:	movw	r3, #4
   131bc:	uxth	r3, r3
   131c0:	bl	1ad38 <flatcc_verify_field@@Base>
   131c4:	str	r0, [fp, #-12]
   131c8:	cmp	r0, #0
   131cc:	beq	131dc <main@@Base+0x938>
   131d0:	ldr	r0, [fp, #-12]
   131d4:	str	r0, [fp, #-4]
   131d8:	b	13398 <main@@Base+0xaf4>
   131dc:	ldr	r0, [fp, #-8]
   131e0:	movw	r1, #26
   131e4:	uxth	r1, r1
   131e8:	movw	r2, #4
   131ec:	movw	r3, #4
   131f0:	uxth	r3, r3
   131f4:	bl	1ad38 <flatcc_verify_field@@Base>
   131f8:	str	r0, [fp, #-12]
   131fc:	cmp	r0, #0
   13200:	beq	13210 <main@@Base+0x96c>
   13204:	ldr	r0, [fp, #-12]
   13208:	str	r0, [fp, #-4]
   1320c:	b	13398 <main@@Base+0xaf4>
   13210:	ldr	r0, [fp, #-8]
   13214:	movw	r1, #27
   13218:	uxth	r1, r1
   1321c:	movw	r2, #4
   13220:	movw	r3, #4
   13224:	uxth	r3, r3
   13228:	bl	1ad38 <flatcc_verify_field@@Base>
   1322c:	str	r0, [fp, #-12]
   13230:	cmp	r0, #0
   13234:	beq	13244 <main@@Base+0x9a0>
   13238:	ldr	r0, [fp, #-12]
   1323c:	str	r0, [fp, #-4]
   13240:	b	13398 <main@@Base+0xaf4>
   13244:	ldr	r0, [fp, #-8]
   13248:	movw	r1, #30
   1324c:	uxth	r1, r1
   13250:	movw	r2, #0
   13254:	movw	r3, #1
   13258:	movw	ip, #1
   1325c:	uxth	ip, ip
   13260:	str	ip, [sp]
   13264:	mvn	ip, #0
   13268:	str	ip, [sp, #4]
   1326c:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   13270:	str	r0, [fp, #-12]
   13274:	cmp	r0, #0
   13278:	beq	13288 <main@@Base+0x9e4>
   1327c:	ldr	r0, [fp, #-12]
   13280:	str	r0, [fp, #-4]
   13284:	b	13398 <main@@Base+0xaf4>
   13288:	ldr	r0, [pc, #280]	; 133a8 <main@@Base+0xb04>
   1328c:	ldr	r1, [fp, #-8]
   13290:	str	r0, [sp, #16]
   13294:	mov	r0, r1
   13298:	movw	r1, #32
   1329c:	uxth	r1, r1
   132a0:	movw	r2, #0
   132a4:	movw	r3, #8
   132a8:	movw	ip, #8
   132ac:	uxth	ip, ip
   132b0:	str	ip, [sp]
   132b4:	ldr	ip, [sp, #16]
   132b8:	str	ip, [sp, #4]
   132bc:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   132c0:	str	r0, [fp, #-12]
   132c4:	cmp	r0, #0
   132c8:	beq	132d8 <main@@Base+0xa34>
   132cc:	ldr	r0, [fp, #-12]
   132d0:	str	r0, [fp, #-4]
   132d4:	b	13398 <main@@Base+0xaf4>
   132d8:	ldr	r0, [pc, #200]	; 133a8 <main@@Base+0xb04>
   132dc:	ldr	r1, [fp, #-8]
   132e0:	str	r0, [sp, #12]
   132e4:	mov	r0, r1
   132e8:	movw	r1, #33	; 0x21
   132ec:	uxth	r1, r1
   132f0:	movw	r2, #0
   132f4:	movw	r3, #8
   132f8:	movw	ip, #8
   132fc:	uxth	ip, ip
   13300:	str	ip, [sp]
   13304:	ldr	ip, [sp, #12]
   13308:	str	ip, [sp, #4]
   1330c:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   13310:	str	r0, [fp, #-12]
   13314:	cmp	r0, #0
   13318:	beq	13328 <main@@Base+0xa84>
   1331c:	ldr	r0, [fp, #-12]
   13320:	str	r0, [fp, #-4]
   13324:	b	13398 <main@@Base+0xaf4>
   13328:	ldr	r0, [pc, #144]	; 133c0 <main@@Base+0xb1c>
   1332c:	add	r3, pc, r0
   13330:	ldr	r0, [fp, #-8]
   13334:	movw	r1, #34	; 0x22
   13338:	uxth	r1, r1
   1333c:	movw	r2, #0
   13340:	bl	1b760 <flatcc_verify_table_field@@Base>
   13344:	str	r0, [fp, #-12]
   13348:	cmp	r0, #0
   1334c:	beq	1335c <main@@Base+0xab8>
   13350:	ldr	r0, [fp, #-12]
   13354:	str	r0, [fp, #-4]
   13358:	b	13398 <main@@Base+0xaf4>
   1335c:	ldr	r0, [pc, #96]	; 133c4 <main@@Base+0xb20>
   13360:	add	r3, pc, r0
   13364:	ldr	r0, [fp, #-8]
   13368:	movw	r1, #35	; 0x23
   1336c:	uxth	r1, r1
   13370:	movw	r2, #0
   13374:	bl	1b760 <flatcc_verify_table_field@@Base>
   13378:	str	r0, [fp, #-12]
   1337c:	cmp	r0, #0
   13380:	beq	13390 <main@@Base+0xaec>
   13384:	ldr	r0, [fp, #-12]
   13388:	str	r0, [fp, #-4]
   1338c:	b	13398 <main@@Base+0xaf4>
   13390:	movw	r0, #0
   13394:	str	r0, [fp, #-4]
   13398:	ldr	r0, [fp, #-4]
   1339c:	mov	sp, fp
   133a0:	pop	{fp, pc}
   133a4:			; <UNDEFINED> instruction: 0xfffffe9c
   133a8:	svcne	0x00ffffff
   133ac:			; <UNDEFINED> instruction: 0xfffffd7c
   133b0:	andeq	r0, r0, r8, asr #10
   133b4:	svccc	0x00ffffff
   133b8:			; <UNDEFINED> instruction: 0xfffffc74
   133bc:	andeq	r0, r0, r8, ror #9
   133c0:	andeq	r0, r0, r0, lsr #4
   133c4:	andeq	r0, r0, r0, lsl #4
   133c8:	push	{fp, lr}
   133cc:	mov	fp, sp
   133d0:	sub	sp, sp, #16
   133d4:	str	r0, [sp, #8]
   133d8:	ldr	r0, [sp, #8]
   133dc:	ldrb	r0, [r0, #12]
   133e0:	sub	r0, r0, #1
   133e4:	cmp	r0, #3
   133e8:	str	r0, [sp, #4]
   133ec:	bhi	13470 <main@@Base+0xbcc>
   133f0:	add	r0, pc, #8
   133f4:	ldr	r1, [sp, #4]
   133f8:	ldr	r2, [r0, r1, lsl #2]
   133fc:	add	pc, r0, r2
   13400:	andeq	r0, r0, r0, lsl r0
   13404:	andeq	r0, r0, r8, lsr #32
   13408:	andeq	r0, r0, r0, asr #32
   1340c:	andeq	r0, r0, r8, asr r0
   13410:	ldr	r0, [pc, #120]	; 13490 <main@@Base+0xbec>
   13414:	add	r1, pc, r0
   13418:	ldr	r0, [sp, #8]
   1341c:	bl	1be94 <flatcc_verify_union_table@@Base>
   13420:	str	r0, [fp, #-4]
   13424:	b	13478 <main@@Base+0xbd4>
   13428:	ldr	r0, [pc, #92]	; 1348c <main@@Base+0xbe8>
   1342c:	add	r1, pc, r0
   13430:	ldr	r0, [sp, #8]
   13434:	bl	1be94 <flatcc_verify_union_table@@Base>
   13438:	str	r0, [fp, #-4]
   1343c:	b	13478 <main@@Base+0xbd4>
   13440:	ldr	r0, [pc, #64]	; 13488 <main@@Base+0xbe4>
   13444:	add	r1, pc, r0
   13448:	ldr	r0, [sp, #8]
   1344c:	bl	1be94 <flatcc_verify_union_table@@Base>
   13450:	str	r0, [fp, #-4]
   13454:	b	13478 <main@@Base+0xbd4>
   13458:	ldr	r0, [pc, #36]	; 13484 <main@@Base+0xbe0>
   1345c:	add	r1, pc, r0
   13460:	ldr	r0, [sp, #8]
   13464:	bl	1be94 <flatcc_verify_union_table@@Base>
   13468:	str	r0, [fp, #-4]
   1346c:	b	13478 <main@@Base+0xbd4>
   13470:	movw	r0, #0
   13474:	str	r0, [fp, #-4]
   13478:	ldr	r0, [fp, #-4]
   1347c:	mov	sp, fp
   13480:	pop	{fp, pc}
   13484:	andeq	r0, r0, r4, lsr #6
   13488:	andeq	r0, r0, r8, lsr #6
   1348c:	andeq	r0, r0, r4, asr #4
   13490:			; <UNDEFINED> instruction: 0xfffff7ac
   13494:	push	{fp, lr}
   13498:	mov	fp, sp
   1349c:	sub	sp, sp, #16
   134a0:	str	r0, [sp, #8]
   134a4:	ldr	r0, [sp, #8]
   134a8:	movw	r1, #0
   134ac:	uxth	r1, r1
   134b0:	movw	r2, #0
   134b4:	bl	1af44 <flatcc_verify_string_field@@Base>
   134b8:	str	r0, [sp, #4]
   134bc:	cmp	r0, #0
   134c0:	beq	134d0 <main@@Base+0xc2c>
   134c4:	ldr	r0, [sp, #4]
   134c8:	str	r0, [fp, #-4]
   134cc:	b	13548 <main@@Base+0xca4>
   134d0:	ldr	r0, [sp, #8]
   134d4:	movw	r1, #1
   134d8:	uxth	r1, r1
   134dc:	movw	r2, #8
   134e0:	movw	r3, #8
   134e4:	uxth	r3, r3
   134e8:	bl	1ad38 <flatcc_verify_field@@Base>
   134ec:	str	r0, [sp, #4]
   134f0:	cmp	r0, #0
   134f4:	beq	13504 <main@@Base+0xc60>
   134f8:	ldr	r0, [sp, #4]
   134fc:	str	r0, [fp, #-4]
   13500:	b	13548 <main@@Base+0xca4>
   13504:	ldr	r0, [sp, #8]
   13508:	movw	r1, #2
   1350c:	uxth	r2, r1
   13510:	str	r1, [sp]
   13514:	mov	r1, r2
   13518:	movw	r2, #2
   1351c:	ldr	r3, [sp]
   13520:	uxth	r3, r3
   13524:	bl	1ad38 <flatcc_verify_field@@Base>
   13528:	str	r0, [sp, #4]
   1352c:	cmp	r0, #0
   13530:	beq	13540 <main@@Base+0xc9c>
   13534:	ldr	r0, [sp, #4]
   13538:	str	r0, [fp, #-4]
   1353c:	b	13548 <main@@Base+0xca4>
   13540:	movw	r0, #0
   13544:	str	r0, [fp, #-4]
   13548:	ldr	r0, [fp, #-4]
   1354c:	mov	sp, fp
   13550:	pop	{fp, pc}
   13554:	sub	sp, sp, #4
   13558:	str	r0, [sp]
   1355c:	movw	r0, #0
   13560:	add	sp, sp, #4
   13564:	bx	lr
   13568:	push	{fp, lr}
   1356c:	mov	fp, sp
   13570:	sub	sp, sp, #32
   13574:	str	r0, [fp, #-8]
   13578:	ldr	r0, [fp, #-8]
   1357c:	movw	r1, #0
   13580:	uxth	r1, r1
   13584:	movw	r2, #0
   13588:	movw	r3, #1
   1358c:	movw	ip, #1
   13590:	uxth	ip, ip
   13594:	str	ip, [sp]
   13598:	mvn	ip, #0
   1359c:	str	ip, [sp, #4]
   135a0:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   135a4:	str	r0, [fp, #-12]
   135a8:	cmp	r0, #0
   135ac:	beq	135bc <main@@Base+0xd18>
   135b0:	ldr	r0, [fp, #-12]
   135b4:	str	r0, [fp, #-4]
   135b8:	b	13668 <main@@Base+0xdc4>
   135bc:	ldr	r0, [fp, #-8]
   135c0:	movw	r1, #1
   135c4:	uxth	r2, r1
   135c8:	str	r1, [sp, #16]
   135cc:	mov	r1, r2
   135d0:	movw	r2, #0
   135d4:	movw	r3, #1
   135d8:	ldr	ip, [sp, #16]
   135dc:	uxth	lr, ip
   135e0:	str	lr, [sp]
   135e4:	mvn	lr, #0
   135e8:	str	lr, [sp, #4]
   135ec:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   135f0:	str	r0, [fp, #-12]
   135f4:	cmp	r0, #0
   135f8:	beq	13608 <main@@Base+0xd64>
   135fc:	ldr	r0, [fp, #-12]
   13600:	str	r0, [fp, #-4]
   13604:	b	13668 <main@@Base+0xdc4>
   13608:	ldr	r0, [pc, #100]	; 13674 <main@@Base+0xdd0>
   1360c:	add	r0, pc, r0
   13610:	ldr	r1, [fp, #-8]
   13614:	str	r0, [sp, #12]
   13618:	mov	r0, r1
   1361c:	movw	r1, #2
   13620:	uxth	r1, r1
   13624:	movw	r2, #0
   13628:	str	r2, [sp, #8]
   1362c:	ldr	r3, [sp, #8]
   13630:	movw	ip, #1
   13634:	uxth	ip, ip
   13638:	str	ip, [sp]
   1363c:	ldr	ip, [sp, #12]
   13640:	str	ip, [sp, #4]
   13644:	bl	1c814 <flatcc_verify_table_as_nested_root@@Base>
   13648:	str	r0, [fp, #-12]
   1364c:	cmp	r0, #0
   13650:	beq	13660 <main@@Base+0xdbc>
   13654:	ldr	r0, [fp, #-12]
   13658:	str	r0, [fp, #-4]
   1365c:	b	13668 <main@@Base+0xdc4>
   13660:	movw	r0, #0
   13664:	str	r0, [fp, #-4]
   13668:	ldr	r0, [fp, #-4]
   1366c:	mov	sp, fp
   13670:	pop	{fp, pc}
   13674:			; <UNDEFINED> instruction: 0xfffff5b4
   13678:	push	{fp, lr}
   1367c:	mov	fp, sp
   13680:	sub	sp, sp, #16
   13684:	str	r0, [sp, #8]
   13688:	ldr	r0, [sp, #8]
   1368c:	movw	r1, #0
   13690:	uxth	r1, r1
   13694:	movw	r2, #1
   13698:	movw	r3, #1
   1369c:	uxth	r3, r3
   136a0:	bl	1ad38 <flatcc_verify_field@@Base>
   136a4:	str	r0, [sp, #4]
   136a8:	cmp	r0, #0
   136ac:	beq	136bc <main@@Base+0xe18>
   136b0:	ldr	r0, [sp, #4]
   136b4:	str	r0, [fp, #-4]
   136b8:	b	13768 <main@@Base+0xec4>
   136bc:	ldr	r0, [sp, #8]
   136c0:	movw	r1, #1
   136c4:	uxth	r2, r1
   136c8:	str	r1, [sp]
   136cc:	mov	r1, r2
   136d0:	movw	r2, #1
   136d4:	ldr	r3, [sp]
   136d8:	uxth	r3, r3
   136dc:	bl	1ad38 <flatcc_verify_field@@Base>
   136e0:	str	r0, [sp, #4]
   136e4:	cmp	r0, #0
   136e8:	beq	136f8 <main@@Base+0xe54>
   136ec:	ldr	r0, [sp, #4]
   136f0:	str	r0, [fp, #-4]
   136f4:	b	13768 <main@@Base+0xec4>
   136f8:	ldr	r0, [sp, #8]
   136fc:	movw	r1, #2
   13700:	uxth	r1, r1
   13704:	movw	r2, #1
   13708:	movw	r3, #1
   1370c:	uxth	r3, r3
   13710:	bl	1ad38 <flatcc_verify_field@@Base>
   13714:	str	r0, [sp, #4]
   13718:	cmp	r0, #0
   1371c:	beq	1372c <main@@Base+0xe88>
   13720:	ldr	r0, [sp, #4]
   13724:	str	r0, [fp, #-4]
   13728:	b	13768 <main@@Base+0xec4>
   1372c:	ldr	r0, [sp, #8]
   13730:	movw	r1, #3
   13734:	uxth	r1, r1
   13738:	movw	r2, #1
   1373c:	movw	r3, #1
   13740:	uxth	r3, r3
   13744:	bl	1ad38 <flatcc_verify_field@@Base>
   13748:	str	r0, [sp, #4]
   1374c:	cmp	r0, #0
   13750:	beq	13760 <main@@Base+0xebc>
   13754:	ldr	r0, [sp, #4]
   13758:	str	r0, [fp, #-4]
   1375c:	b	13768 <main@@Base+0xec4>
   13760:	movw	r0, #0
   13764:	str	r0, [fp, #-4]
   13768:	ldr	r0, [fp, #-4]
   1376c:	mov	sp, fp
   13770:	pop	{fp, pc}
   13774:	sub	sp, sp, #4
   13778:	str	r0, [sp]
   1377c:	movw	r0, #0
   13780:	add	sp, sp, #4
   13784:	bx	lr
   13788:	push	{fp, lr}
   1378c:	mov	fp, sp
   13790:	sub	sp, sp, #16
   13794:	ldr	r1, [pc, #172]	; 13848 <main@@Base+0xfa4>
   13798:	add	r3, pc, r1
   1379c:	str	r0, [sp, #8]
   137a0:	ldr	r0, [sp, #8]
   137a4:	movw	r1, #0
   137a8:	uxth	r1, r1
   137ac:	movw	r2, #0
   137b0:	bl	1b760 <flatcc_verify_table_field@@Base>
   137b4:	str	r0, [sp, #4]
   137b8:	cmp	r0, #0
   137bc:	beq	137cc <main@@Base+0xf28>
   137c0:	ldr	r0, [sp, #4]
   137c4:	str	r0, [fp, #-4]
   137c8:	b	1383c <main@@Base+0xf98>
   137cc:	ldr	r0, [pc, #120]	; 1384c <main@@Base+0xfa8>
   137d0:	add	r3, pc, r0
   137d4:	ldr	r0, [sp, #8]
   137d8:	movw	r1, #1
   137dc:	uxth	r1, r1
   137e0:	movw	r2, #0
   137e4:	bl	1b760 <flatcc_verify_table_field@@Base>
   137e8:	str	r0, [sp, #4]
   137ec:	cmp	r0, #0
   137f0:	beq	13800 <main@@Base+0xf5c>
   137f4:	ldr	r0, [sp, #4]
   137f8:	str	r0, [fp, #-4]
   137fc:	b	1383c <main@@Base+0xf98>
   13800:	ldr	r0, [pc, #72]	; 13850 <main@@Base+0xfac>
   13804:	add	r3, pc, r0
   13808:	ldr	r0, [sp, #8]
   1380c:	movw	r1, #3
   13810:	uxth	r1, r1
   13814:	movw	r2, #0
   13818:	bl	1ccb4 <flatcc_verify_union_vector_field@@Base>
   1381c:	str	r0, [sp, #4]
   13820:	cmp	r0, #0
   13824:	beq	13834 <main@@Base+0xf90>
   13828:	ldr	r0, [sp, #4]
   1382c:	str	r0, [fp, #-4]
   13830:	b	1383c <main@@Base+0xf98>
   13834:	movw	r0, #0
   13838:	str	r0, [fp, #-4]
   1383c:	ldr	r0, [fp, #-4]
   13840:	mov	sp, fp
   13844:	pop	{fp, pc}
   13848:	strheq	r0, [r0], -r4
   1384c:	andeq	r0, r0, r8, asr #2
   13850:			; <UNDEFINED> instruction: 0xfffffbbc
   13854:	push	{fp, lr}
   13858:	mov	fp, sp
   1385c:	sub	sp, sp, #16
   13860:	ldr	r1, [pc, #172]	; 13914 <main@@Base+0x1070>
   13864:	add	r3, pc, r1
   13868:	str	r0, [sp, #8]
   1386c:	ldr	r0, [sp, #8]
   13870:	movw	r1, #0
   13874:	uxth	r1, r1
   13878:	movw	r2, #0
   1387c:	bl	1b760 <flatcc_verify_table_field@@Base>
   13880:	str	r0, [sp, #4]
   13884:	cmp	r0, #0
   13888:	beq	13898 <main@@Base+0xff4>
   1388c:	ldr	r0, [sp, #4]
   13890:	str	r0, [fp, #-4]
   13894:	b	13908 <main@@Base+0x1064>
   13898:	ldr	r0, [pc, #120]	; 13918 <main@@Base+0x1074>
   1389c:	add	r3, pc, r0
   138a0:	ldr	r0, [sp, #8]
   138a4:	movw	r1, #1
   138a8:	uxth	r1, r1
   138ac:	movw	r2, #0
   138b0:	bl	1b760 <flatcc_verify_table_field@@Base>
   138b4:	str	r0, [sp, #4]
   138b8:	cmp	r0, #0
   138bc:	beq	138cc <main@@Base+0x1028>
   138c0:	ldr	r0, [sp, #4]
   138c4:	str	r0, [fp, #-4]
   138c8:	b	13908 <main@@Base+0x1064>
   138cc:	ldr	r0, [pc, #72]	; 1391c <main@@Base+0x1078>
   138d0:	add	r3, pc, r0
   138d4:	ldr	r0, [sp, #8]
   138d8:	movw	r1, #2
   138dc:	uxth	r1, r1
   138e0:	movw	r2, #0
   138e4:	bl	1b760 <flatcc_verify_table_field@@Base>
   138e8:	str	r0, [sp, #4]
   138ec:	cmp	r0, #0
   138f0:	beq	13900 <main@@Base+0x105c>
   138f4:	ldr	r0, [sp, #4]
   138f8:	str	r0, [fp, #-4]
   138fc:	b	13908 <main@@Base+0x1064>
   13900:	movw	r0, #0
   13904:	str	r0, [fp, #-4]
   13908:	ldr	r0, [fp, #-4]
   1390c:	mov	sp, fp
   13910:	pop	{fp, pc}
   13914:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13918:	muleq	r0, r8, r3
   1391c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13920:	push	{fp, lr}
   13924:	mov	fp, sp
   13928:	sub	sp, sp, #16
   1392c:	ldr	r1, [pc, #276]	; 13a48 <main@@Base+0x11a4>
   13930:	add	r3, pc, r1
   13934:	str	r0, [sp, #8]
   13938:	ldr	r0, [sp, #8]
   1393c:	movw	r1, #1
   13940:	uxth	r1, r1
   13944:	movw	r2, #0
   13948:	bl	1c9bc <flatcc_verify_union_field@@Base>
   1394c:	str	r0, [sp, #4]
   13950:	cmp	r0, #0
   13954:	beq	13964 <main@@Base+0x10c0>
   13958:	ldr	r0, [sp, #4]
   1395c:	str	r0, [fp, #-4]
   13960:	b	13a3c <main@@Base+0x1198>
   13964:	ldr	r0, [pc, #224]	; 13a4c <main@@Base+0x11a8>
   13968:	add	r3, pc, r0
   1396c:	ldr	r0, [sp, #8]
   13970:	movw	r1, #3
   13974:	uxth	r1, r1
   13978:	movw	r2, #0
   1397c:	bl	1c9bc <flatcc_verify_union_field@@Base>
   13980:	str	r0, [sp, #4]
   13984:	cmp	r0, #0
   13988:	beq	13998 <main@@Base+0x10f4>
   1398c:	ldr	r0, [sp, #4]
   13990:	str	r0, [fp, #-4]
   13994:	b	13a3c <main@@Base+0x1198>
   13998:	ldr	r0, [pc, #176]	; 13a50 <main@@Base+0x11ac>
   1399c:	add	r3, pc, r0
   139a0:	ldr	r0, [sp, #8]
   139a4:	movw	r1, #5
   139a8:	uxth	r1, r1
   139ac:	movw	r2, #0
   139b0:	bl	1c9bc <flatcc_verify_union_field@@Base>
   139b4:	str	r0, [sp, #4]
   139b8:	cmp	r0, #0
   139bc:	beq	139cc <main@@Base+0x1128>
   139c0:	ldr	r0, [sp, #4]
   139c4:	str	r0, [fp, #-4]
   139c8:	b	13a3c <main@@Base+0x1198>
   139cc:	ldr	r0, [pc, #128]	; 13a54 <main@@Base+0x11b0>
   139d0:	add	r3, pc, r0
   139d4:	ldr	r0, [sp, #8]
   139d8:	movw	r1, #7
   139dc:	uxth	r1, r1
   139e0:	movw	r2, #0
   139e4:	bl	1c9bc <flatcc_verify_union_field@@Base>
   139e8:	str	r0, [sp, #4]
   139ec:	cmp	r0, #0
   139f0:	beq	13a00 <main@@Base+0x115c>
   139f4:	ldr	r0, [sp, #4]
   139f8:	str	r0, [fp, #-4]
   139fc:	b	13a3c <main@@Base+0x1198>
   13a00:	ldr	r0, [pc, #80]	; 13a58 <main@@Base+0x11b4>
   13a04:	add	r3, pc, r0
   13a08:	ldr	r0, [sp, #8]
   13a0c:	movw	r1, #9
   13a10:	uxth	r1, r1
   13a14:	movw	r2, #0
   13a18:	bl	1ccb4 <flatcc_verify_union_vector_field@@Base>
   13a1c:	str	r0, [sp, #4]
   13a20:	cmp	r0, #0
   13a24:	beq	13a34 <main@@Base+0x1190>
   13a28:	ldr	r0, [sp, #4]
   13a2c:	str	r0, [fp, #-4]
   13a30:	b	13a3c <main@@Base+0x1198>
   13a34:	movw	r0, #0
   13a38:	str	r0, [fp, #-4]
   13a3c:	ldr	r0, [fp, #-4]
   13a40:	mov	sp, fp
   13a44:	pop	{fp, pc}
   13a48:	andeq	r0, r0, ip, lsl r4
   13a4c:	andeq	r0, r0, r4, ror #7
   13a50:			; <UNDEFINED> instruction: 0x000003b0
   13a54:	andeq	r0, r0, ip, ror r3
   13a58:	andeq	r0, r0, r8, asr #6
   13a5c:	push	{fp, lr}
   13a60:	mov	fp, sp
   13a64:	sub	sp, sp, #16
   13a68:	str	r0, [sp, #8]
   13a6c:	ldr	r0, [sp, #8]
   13a70:	movw	r1, #0
   13a74:	uxth	r1, r1
   13a78:	movw	r2, #0
   13a7c:	bl	1af44 <flatcc_verify_string_field@@Base>
   13a80:	str	r0, [sp, #4]
   13a84:	cmp	r0, #0
   13a88:	beq	13a98 <main@@Base+0x11f4>
   13a8c:	ldr	r0, [sp, #4]
   13a90:	str	r0, [fp, #-4]
   13a94:	b	13c30 <main@@Base+0x138c>
   13a98:	ldr	r0, [sp, #8]
   13a9c:	movw	r1, #1
   13aa0:	uxth	r1, r1
   13aa4:	movw	r2, #4
   13aa8:	movw	r3, #4
   13aac:	uxth	r3, r3
   13ab0:	bl	1ad38 <flatcc_verify_field@@Base>
   13ab4:	str	r0, [sp, #4]
   13ab8:	cmp	r0, #0
   13abc:	beq	13acc <main@@Base+0x1228>
   13ac0:	ldr	r0, [sp, #4]
   13ac4:	str	r0, [fp, #-4]
   13ac8:	b	13c30 <main@@Base+0x138c>
   13acc:	ldr	r0, [sp, #8]
   13ad0:	movw	r1, #2
   13ad4:	uxth	r1, r1
   13ad8:	movw	r2, #0
   13adc:	bl	1af44 <flatcc_verify_string_field@@Base>
   13ae0:	str	r0, [sp, #4]
   13ae4:	cmp	r0, #0
   13ae8:	beq	13af8 <main@@Base+0x1254>
   13aec:	ldr	r0, [sp, #4]
   13af0:	str	r0, [fp, #-4]
   13af4:	b	13c30 <main@@Base+0x138c>
   13af8:	ldr	r0, [sp, #8]
   13afc:	movw	r1, #3
   13b00:	uxth	r1, r1
   13b04:	movw	r2, #8
   13b08:	movw	r3, #8
   13b0c:	uxth	r3, r3
   13b10:	bl	1ad38 <flatcc_verify_field@@Base>
   13b14:	str	r0, [sp, #4]
   13b18:	cmp	r0, #0
   13b1c:	beq	13b2c <main@@Base+0x1288>
   13b20:	ldr	r0, [sp, #4]
   13b24:	str	r0, [fp, #-4]
   13b28:	b	13c30 <main@@Base+0x138c>
   13b2c:	ldr	r0, [sp, #8]
   13b30:	movw	r1, #4
   13b34:	uxth	r1, r1
   13b38:	movw	r2, #0
   13b3c:	bl	1af44 <flatcc_verify_string_field@@Base>
   13b40:	str	r0, [sp, #4]
   13b44:	cmp	r0, #0
   13b48:	beq	13b58 <main@@Base+0x12b4>
   13b4c:	ldr	r0, [sp, #4]
   13b50:	str	r0, [fp, #-4]
   13b54:	b	13c30 <main@@Base+0x138c>
   13b58:	ldr	r0, [sp, #8]
   13b5c:	movw	r1, #5
   13b60:	uxth	r1, r1
   13b64:	movw	r2, #8
   13b68:	movw	r3, #8
   13b6c:	uxth	r3, r3
   13b70:	bl	1ad38 <flatcc_verify_field@@Base>
   13b74:	str	r0, [sp, #4]
   13b78:	cmp	r0, #0
   13b7c:	beq	13b8c <main@@Base+0x12e8>
   13b80:	ldr	r0, [sp, #4]
   13b84:	str	r0, [fp, #-4]
   13b88:	b	13c30 <main@@Base+0x138c>
   13b8c:	ldr	r0, [sp, #8]
   13b90:	movw	r1, #6
   13b94:	uxth	r1, r1
   13b98:	movw	r2, #4
   13b9c:	movw	r3, #4
   13ba0:	uxth	r3, r3
   13ba4:	bl	1ad38 <flatcc_verify_field@@Base>
   13ba8:	str	r0, [sp, #4]
   13bac:	cmp	r0, #0
   13bb0:	beq	13bc0 <main@@Base+0x131c>
   13bb4:	ldr	r0, [sp, #4]
   13bb8:	str	r0, [fp, #-4]
   13bbc:	b	13c30 <main@@Base+0x138c>
   13bc0:	ldr	r0, [sp, #8]
   13bc4:	movw	r1, #7
   13bc8:	uxth	r1, r1
   13bcc:	movw	r2, #8
   13bd0:	movw	r3, #8
   13bd4:	uxth	r3, r3
   13bd8:	bl	1ad38 <flatcc_verify_field@@Base>
   13bdc:	str	r0, [sp, #4]
   13be0:	cmp	r0, #0
   13be4:	beq	13bf4 <main@@Base+0x1350>
   13be8:	ldr	r0, [sp, #4]
   13bec:	str	r0, [fp, #-4]
   13bf0:	b	13c30 <main@@Base+0x138c>
   13bf4:	ldr	r0, [sp, #8]
   13bf8:	movw	r1, #8
   13bfc:	uxth	r1, r1
   13c00:	movw	r2, #4
   13c04:	movw	r3, #4
   13c08:	uxth	r3, r3
   13c0c:	bl	1ad38 <flatcc_verify_field@@Base>
   13c10:	str	r0, [sp, #4]
   13c14:	cmp	r0, #0
   13c18:	beq	13c28 <main@@Base+0x1384>
   13c1c:	ldr	r0, [sp, #4]
   13c20:	str	r0, [fp, #-4]
   13c24:	b	13c30 <main@@Base+0x138c>
   13c28:	movw	r0, #0
   13c2c:	str	r0, [fp, #-4]
   13c30:	ldr	r0, [fp, #-4]
   13c34:	mov	sp, fp
   13c38:	pop	{fp, pc}
   13c3c:	push	{fp, lr}
   13c40:	mov	fp, sp
   13c44:	sub	sp, sp, #16
   13c48:	str	r0, [sp, #8]
   13c4c:	ldr	r0, [sp, #8]
   13c50:	movw	r1, #0
   13c54:	uxth	r1, r1
   13c58:	movw	r2, #8
   13c5c:	movw	r3, #8
   13c60:	uxth	r3, r3
   13c64:	bl	1ad38 <flatcc_verify_field@@Base>
   13c68:	str	r0, [sp, #4]
   13c6c:	cmp	r0, #0
   13c70:	beq	13c80 <main@@Base+0x13dc>
   13c74:	ldr	r0, [sp, #4]
   13c78:	str	r0, [fp, #-4]
   13c7c:	b	13cbc <main@@Base+0x1418>
   13c80:	ldr	r0, [sp, #8]
   13c84:	movw	r1, #1
   13c88:	uxth	r1, r1
   13c8c:	movw	r2, #4
   13c90:	movw	r3, #4
   13c94:	uxth	r3, r3
   13c98:	bl	1ad38 <flatcc_verify_field@@Base>
   13c9c:	str	r0, [sp, #4]
   13ca0:	cmp	r0, #0
   13ca4:	beq	13cb4 <main@@Base+0x1410>
   13ca8:	ldr	r0, [sp, #4]
   13cac:	str	r0, [fp, #-4]
   13cb0:	b	13cbc <main@@Base+0x1418>
   13cb4:	movw	r0, #0
   13cb8:	str	r0, [fp, #-4]
   13cbc:	ldr	r0, [fp, #-4]
   13cc0:	mov	sp, fp
   13cc4:	pop	{fp, pc}
   13cc8:	push	{fp, lr}
   13ccc:	mov	fp, sp
   13cd0:	sub	sp, sp, #16
   13cd4:	str	r0, [sp, #8]
   13cd8:	ldr	r0, [sp, #8]
   13cdc:	movw	r1, #0
   13ce0:	uxth	r1, r1
   13ce4:	movw	r2, #8
   13ce8:	movw	r3, #8
   13cec:	uxth	r3, r3
   13cf0:	bl	1ad38 <flatcc_verify_field@@Base>
   13cf4:	str	r0, [sp, #4]
   13cf8:	cmp	r0, #0
   13cfc:	beq	13d0c <main@@Base+0x1468>
   13d00:	ldr	r0, [sp, #4]
   13d04:	str	r0, [fp, #-4]
   13d08:	b	13d48 <main@@Base+0x14a4>
   13d0c:	ldr	r0, [sp, #8]
   13d10:	movw	r1, #1
   13d14:	uxth	r1, r1
   13d18:	movw	r2, #4
   13d1c:	movw	r3, #4
   13d20:	uxth	r3, r3
   13d24:	bl	1ad38 <flatcc_verify_field@@Base>
   13d28:	str	r0, [sp, #4]
   13d2c:	cmp	r0, #0
   13d30:	beq	13d40 <main@@Base+0x149c>
   13d34:	ldr	r0, [sp, #4]
   13d38:	str	r0, [fp, #-4]
   13d3c:	b	13d48 <main@@Base+0x14a4>
   13d40:	movw	r0, #0
   13d44:	str	r0, [fp, #-4]
   13d48:	ldr	r0, [fp, #-4]
   13d4c:	mov	sp, fp
   13d50:	pop	{fp, pc}
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	sub	sp, sp, #16
   13d60:	str	r0, [sp, #8]
   13d64:	ldr	r0, [sp, #8]
   13d68:	ldrb	r0, [r0, #12]
   13d6c:	mov	r1, r0
   13d70:	cmp	r0, #2
   13d74:	str	r1, [sp, #4]
   13d78:	beq	13dd0 <main@@Base+0x152c>
   13d7c:	b	13d80 <main@@Base+0x14dc>
   13d80:	ldr	r0, [sp, #4]
   13d84:	cmp	r0, #8
   13d88:	beq	13de8 <main@@Base+0x1544>
   13d8c:	b	13d90 <main@@Base+0x14ec>
   13d90:	ldr	r0, [sp, #4]
   13d94:	cmp	r0, #9
   13d98:	beq	13e04 <main@@Base+0x1560>
   13d9c:	b	13da0 <main@@Base+0x14fc>
   13da0:	ldr	r0, [sp, #4]
   13da4:	cmp	r0, #10
   13da8:	beq	13e20 <main@@Base+0x157c>
   13dac:	b	13db0 <main@@Base+0x150c>
   13db0:	ldr	r0, [sp, #4]
   13db4:	cmp	r0, #11
   13db8:	beq	13e3c <main@@Base+0x1598>
   13dbc:	b	13dc0 <main@@Base+0x151c>
   13dc0:	ldr	r0, [sp, #4]
   13dc4:	cmp	r0, #255	; 0xff
   13dc8:	beq	13e4c <main@@Base+0x15a8>
   13dcc:	b	13e5c <main@@Base+0x15b8>
   13dd0:	ldr	r0, [pc, #152]	; 13e70 <main@@Base+0x15cc>
   13dd4:	add	r1, pc, r0
   13dd8:	ldr	r0, [sp, #8]
   13ddc:	bl	1be94 <flatcc_verify_union_table@@Base>
   13de0:	str	r0, [fp, #-4]
   13de4:	b	13e64 <main@@Base+0x15c0>
   13de8:	ldr	r0, [sp, #8]
   13dec:	movw	r1, #2
   13df0:	movw	r2, #2
   13df4:	uxth	r2, r2
   13df8:	bl	1bee8 <flatcc_verify_union_struct@@Base>
   13dfc:	str	r0, [fp, #-4]
   13e00:	b	13e64 <main@@Base+0x15c0>
   13e04:	ldr	r0, [sp, #8]
   13e08:	movw	r1, #4
   13e0c:	movw	r2, #4
   13e10:	uxth	r2, r2
   13e14:	bl	1bee8 <flatcc_verify_union_struct@@Base>
   13e18:	str	r0, [fp, #-4]
   13e1c:	b	13e64 <main@@Base+0x15c0>
   13e20:	ldr	r0, [sp, #8]
   13e24:	movw	r1, #4
   13e28:	movw	r2, #4
   13e2c:	uxth	r2, r2
   13e30:	bl	1bee8 <flatcc_verify_union_struct@@Base>
   13e34:	str	r0, [fp, #-4]
   13e38:	b	13e64 <main@@Base+0x15c0>
   13e3c:	ldr	r0, [sp, #8]
   13e40:	bl	1c070 <flatcc_verify_union_string@@Base>
   13e44:	str	r0, [fp, #-4]
   13e48:	b	13e64 <main@@Base+0x15c0>
   13e4c:	ldr	r0, [sp, #8]
   13e50:	bl	1c070 <flatcc_verify_union_string@@Base>
   13e54:	str	r0, [fp, #-4]
   13e58:	b	13e64 <main@@Base+0x15c0>
   13e5c:	movw	r0, #0
   13e60:	str	r0, [fp, #-4]
   13e64:	ldr	r0, [fp, #-4]
   13e68:	mov	sp, fp
   13e6c:	pop	{fp, pc}
   13e70:	muleq	r0, r8, r0
   13e74:	push	{fp, lr}
   13e78:	mov	fp, sp
   13e7c:	sub	sp, sp, #16
   13e80:	str	r0, [sp, #8]
   13e84:	ldr	r0, [sp, #8]
   13e88:	movw	r1, #0
   13e8c:	uxth	r1, r1
   13e90:	movw	r2, #4
   13e94:	movw	r3, #4
   13e98:	uxth	r3, r3
   13e9c:	bl	1ad38 <flatcc_verify_field@@Base>
   13ea0:	str	r0, [sp, #4]
   13ea4:	cmp	r0, #0
   13ea8:	beq	13eb8 <main@@Base+0x1614>
   13eac:	ldr	r0, [sp, #4]
   13eb0:	str	r0, [fp, #-4]
   13eb4:	b	13ec0 <main@@Base+0x161c>
   13eb8:	movw	r0, #0
   13ebc:	str	r0, [fp, #-4]
   13ec0:	ldr	r0, [fp, #-4]
   13ec4:	mov	sp, fp
   13ec8:	pop	{fp, pc}

00013ecc <flatcc_builder_default_alloc@@Base>:
   13ecc:	push	{fp, lr}
   13ed0:	mov	fp, sp
   13ed4:	sub	sp, sp, #40	; 0x28
   13ed8:	ldr	ip, [fp, #8]
   13edc:	str	r0, [fp, #-8]
   13ee0:	str	r1, [fp, #-12]
   13ee4:	str	r2, [fp, #-16]
   13ee8:	str	r3, [sp, #20]
   13eec:	ldr	r0, [fp, #-16]
   13ef0:	cmp	r0, #0
   13ef4:	str	ip, [sp, #8]
   13ef8:	bne	13f3c <flatcc_builder_default_alloc@@Base+0x70>
   13efc:	ldr	r0, [fp, #-12]
   13f00:	ldr	r0, [r0]
   13f04:	movw	r1, #0
   13f08:	cmp	r0, r1
   13f0c:	beq	13f30 <flatcc_builder_default_alloc@@Base+0x64>
   13f10:	ldr	r0, [fp, #-12]
   13f14:	ldr	r0, [r0]
   13f18:	bl	1270c <free@plt>
   13f1c:	ldr	r0, [fp, #-12]
   13f20:	movw	lr, #0
   13f24:	str	lr, [r0]
   13f28:	ldr	r0, [fp, #-12]
   13f2c:	str	lr, [r0, #4]
   13f30:	movw	r0, #0
   13f34:	str	r0, [fp, #-4]
   13f38:	b	140a8 <flatcc_builder_default_alloc@@Base+0x1dc>
   13f3c:	ldr	r0, [fp, #8]
   13f40:	sub	r0, r0, #1
   13f44:	cmp	r0, #6
   13f48:	str	r0, [sp, #4]
   13f4c:	bhi	13fac <flatcc_builder_default_alloc@@Base+0xe0>
   13f50:	add	r0, pc, #8
   13f54:	ldr	r1, [sp, #4]
   13f58:	ldr	r2, [r0, r1, lsl #2]
   13f5c:	add	pc, r0, r2
   13f60:	andeq	r0, r0, ip, lsl r0
   13f64:	andeq	r0, r0, ip, asr #32
   13f68:	andeq	r0, r0, ip, asr #32
   13f6c:	andeq	r0, r0, r4, lsr r0
   13f70:	andeq	r0, r0, r8, lsr #32
   13f74:	andeq	r0, r0, ip, asr #32
   13f78:	andeq	r0, r0, r0, asr #32
   13f7c:	movw	r0, #256	; 0x100
   13f80:	str	r0, [sp, #12]
   13f84:	b	13fb4 <flatcc_builder_default_alloc@@Base+0xe8>
   13f88:	ldr	r0, [fp, #-16]
   13f8c:	str	r0, [sp, #12]
   13f90:	b	13fb4 <flatcc_builder_default_alloc@@Base+0xe8>
   13f94:	movw	r0, #288	; 0x120
   13f98:	str	r0, [sp, #12]
   13f9c:	b	13fb4 <flatcc_builder_default_alloc@@Base+0xe8>
   13fa0:	movw	r0, #64	; 0x40
   13fa4:	str	r0, [sp, #12]
   13fa8:	b	13fb4 <flatcc_builder_default_alloc@@Base+0xe8>
   13fac:	movw	r0, #32
   13fb0:	str	r0, [sp, #12]
   13fb4:	b	13fb8 <flatcc_builder_default_alloc@@Base+0xec>
   13fb8:	ldr	r0, [sp, #12]
   13fbc:	ldr	r1, [fp, #-16]
   13fc0:	cmp	r0, r1
   13fc4:	bcs	13fd8 <flatcc_builder_default_alloc@@Base+0x10c>
   13fc8:	ldr	r0, [sp, #12]
   13fcc:	lsl	r0, r0, #1
   13fd0:	str	r0, [sp, #12]
   13fd4:	b	13fb8 <flatcc_builder_default_alloc@@Base+0xec>
   13fd8:	ldr	r0, [fp, #-16]
   13fdc:	ldr	r1, [fp, #-12]
   13fe0:	ldr	r1, [r1, #4]
   13fe4:	cmp	r0, r1
   13fe8:	bhi	14010 <flatcc_builder_default_alloc@@Base+0x144>
   13fec:	ldr	r0, [fp, #-12]
   13ff0:	ldr	r0, [r0, #4]
   13ff4:	lsr	r0, r0, #1
   13ff8:	ldr	r1, [sp, #12]
   13ffc:	cmp	r0, r1
   14000:	bcc	14010 <flatcc_builder_default_alloc@@Base+0x144>
   14004:	movw	r0, #0
   14008:	str	r0, [fp, #-4]
   1400c:	b	140a8 <flatcc_builder_default_alloc@@Base+0x1dc>
   14010:	ldr	r0, [fp, #-12]
   14014:	ldr	r0, [r0]
   14018:	ldr	r1, [sp, #12]
   1401c:	bl	12730 <realloc@plt>
   14020:	str	r0, [sp, #16]
   14024:	movw	r1, #0
   14028:	cmp	r0, r1
   1402c:	bne	1403c <flatcc_builder_default_alloc@@Base+0x170>
   14030:	mvn	r0, #0
   14034:	str	r0, [fp, #-4]
   14038:	b	140a8 <flatcc_builder_default_alloc@@Base+0x1dc>
   1403c:	ldr	r0, [sp, #20]
   14040:	cmp	r0, #0
   14044:	beq	14088 <flatcc_builder_default_alloc@@Base+0x1bc>
   14048:	ldr	r0, [fp, #-12]
   1404c:	ldr	r0, [r0, #4]
   14050:	ldr	r1, [sp, #12]
   14054:	cmp	r0, r1
   14058:	bcs	14088 <flatcc_builder_default_alloc@@Base+0x1bc>
   1405c:	ldr	r0, [sp, #16]
   14060:	ldr	r1, [fp, #-12]
   14064:	ldr	r1, [r1, #4]
   14068:	add	r0, r0, r1
   1406c:	ldr	r1, [sp, #12]
   14070:	ldr	r2, [fp, #-12]
   14074:	ldr	r2, [r2, #4]
   14078:	sub	r2, r1, r2
   1407c:	movw	r1, #0
   14080:	and	r1, r1, #255	; 0xff
   14084:	bl	12778 <memset@plt>
   14088:	ldr	r0, [sp, #16]
   1408c:	ldr	r1, [fp, #-12]
   14090:	str	r0, [r1]
   14094:	ldr	r0, [sp, #12]
   14098:	ldr	r1, [fp, #-12]
   1409c:	str	r0, [r1, #4]
   140a0:	movw	r0, #0
   140a4:	str	r0, [fp, #-4]
   140a8:	ldr	r0, [fp, #-4]
   140ac:	mov	sp, fp
   140b0:	pop	{fp, pc}

000140b4 <flatcc_builder_flush_vtable_cache@@Base>:
   140b4:	push	{fp, lr}
   140b8:	mov	fp, sp
   140bc:	sub	sp, sp, #8
   140c0:	str	r0, [sp, #4]
   140c4:	ldr	r0, [sp, #4]
   140c8:	add	r0, r0, #52	; 0x34
   140cc:	add	r0, r0, #40	; 0x28
   140d0:	str	r0, [sp]
   140d4:	ldr	r0, [sp, #4]
   140d8:	ldr	r0, [r0, #116]	; 0x74
   140dc:	cmp	r0, #0
   140e0:	bne	140e8 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   140e4:	b	1411c <flatcc_builder_flush_vtable_cache@@Base+0x68>
   140e8:	ldr	r0, [sp]
   140ec:	ldr	r0, [r0]
   140f0:	ldr	r1, [sp]
   140f4:	ldr	r2, [r1, #4]
   140f8:	movw	r1, #0
   140fc:	and	r1, r1, #255	; 0xff
   14100:	bl	12778 <memset@plt>
   14104:	ldr	r0, [sp, #4]
   14108:	movw	r1, #16
   1410c:	str	r1, [r0, #124]	; 0x7c
   14110:	ldr	r0, [sp, #4]
   14114:	movw	r1, #0
   14118:	str	r1, [r0, #120]	; 0x78
   1411c:	mov	sp, fp
   14120:	pop	{fp, pc}

00014124 <flatcc_builder_custom_init@@Base>:
   14124:	push	{fp, lr}
   14128:	mov	fp, sp
   1412c:	sub	sp, sp, #24
   14130:	ldr	ip, [fp, #8]
   14134:	str	r0, [fp, #-4]
   14138:	str	r1, [fp, #-8]
   1413c:	str	r2, [sp, #12]
   14140:	str	r3, [sp, #8]
   14144:	ldr	r0, [fp, #-4]
   14148:	movw	r1, #0
   1414c:	and	r1, r1, #255	; 0xff
   14150:	movw	r2, #232	; 0xe8
   14154:	str	ip, [sp, #4]
   14158:	bl	12778 <memset@plt>
   1415c:	ldr	r0, [fp, #-8]
   14160:	movw	r1, #0
   14164:	cmp	r0, r1
   14168:	bne	14190 <flatcc_builder_custom_init@@Base+0x6c>
   1416c:	ldr	r0, [pc, #116]	; 141e8 <flatcc_builder_custom_init@@Base+0xc4>
   14170:	ldr	r0, [pc, r0]
   14174:	ldr	r1, [fp, #-4]
   14178:	movw	r2, #1
   1417c:	str	r2, [r1, #184]	; 0xb8
   14180:	str	r0, [fp, #-8]
   14184:	ldr	r0, [fp, #-4]
   14188:	add	r0, r0, #188	; 0xbc
   1418c:	str	r0, [sp, #12]
   14190:	ldr	r0, [sp, #8]
   14194:	movw	r1, #0
   14198:	cmp	r0, r1
   1419c:	bne	141ac <flatcc_builder_custom_init@@Base+0x88>
   141a0:	ldr	r0, [pc, #68]	; 141ec <flatcc_builder_custom_init@@Base+0xc8>
   141a4:	ldr	r0, [pc, r0]
   141a8:	str	r0, [sp, #8]
   141ac:	ldr	r0, [fp, #8]
   141b0:	ldr	r1, [fp, #-4]
   141b4:	str	r0, [r1, #40]	; 0x28
   141b8:	ldr	r0, [sp, #8]
   141bc:	ldr	r1, [fp, #-4]
   141c0:	str	r0, [r1, #48]	; 0x30
   141c4:	ldr	r0, [sp, #12]
   141c8:	ldr	r1, [fp, #-4]
   141cc:	str	r0, [r1, #36]	; 0x24
   141d0:	ldr	r0, [fp, #-8]
   141d4:	ldr	r1, [fp, #-4]
   141d8:	str	r0, [r1, #44]	; 0x2c
   141dc:	movw	r0, #0
   141e0:	mov	sp, fp
   141e4:	pop	{fp, pc}
   141e8:	ldrdeq	fp, [r1], -r8
   141ec:	andeq	fp, r1, r0, lsr #29

000141f0 <flatcc_builder_init@@Base>:
   141f0:	push	{fp, lr}
   141f4:	mov	fp, sp
   141f8:	sub	sp, sp, #16
   141fc:	str	r0, [fp, #-4]
   14200:	ldr	r0, [fp, #-4]
   14204:	movw	r1, #0
   14208:	str	r1, [sp, #8]
   1420c:	ldr	r2, [sp, #8]
   14210:	ldr	r3, [sp, #8]
   14214:	ldr	ip, [sp, #8]
   14218:	str	ip, [sp]
   1421c:	bl	14124 <flatcc_builder_custom_init@@Base>
   14220:	mov	sp, fp
   14224:	pop	{fp, pc}

00014228 <flatcc_builder_custom_reset@@Base>:
   14228:	push	{r4, sl, fp, lr}
   1422c:	add	fp, sp, #8
   14230:	sub	sp, sp, #40	; 0x28
   14234:	str	r0, [fp, #-16]
   14238:	str	r1, [fp, #-20]	; 0xffffffec
   1423c:	str	r2, [sp, #24]
   14240:	movw	r0, #0
   14244:	str	r0, [sp, #16]
   14248:	ldr	r0, [sp, #16]
   1424c:	cmp	r0, #8
   14250:	bge	1435c <flatcc_builder_custom_reset@@Base+0x134>
   14254:	ldr	r0, [fp, #-16]
   14258:	add	r0, r0, #52	; 0x34
   1425c:	ldr	r1, [sp, #16]
   14260:	add	r0, r0, r1, lsl #3
   14264:	str	r0, [sp, #20]
   14268:	ldr	r0, [sp, #20]
   1426c:	ldr	r0, [r0]
   14270:	movw	r1, #0
   14274:	cmp	r0, r1
   14278:	beq	14310 <flatcc_builder_custom_reset@@Base+0xe8>
   1427c:	ldr	r0, [sp, #16]
   14280:	cmp	r0, #5
   14284:	beq	142f0 <flatcc_builder_custom_reset@@Base+0xc8>
   14288:	ldr	r0, [sp, #24]
   1428c:	cmp	r0, #0
   14290:	beq	142f0 <flatcc_builder_custom_reset@@Base+0xc8>
   14294:	ldr	r0, [fp, #-16]
   14298:	ldr	r0, [r0, #48]	; 0x30
   1429c:	ldr	r1, [fp, #-16]
   142a0:	ldr	r1, [r1, #40]	; 0x28
   142a4:	ldr	r2, [sp, #20]
   142a8:	ldr	r3, [sp, #16]
   142ac:	str	r0, [sp, #12]
   142b0:	mov	r0, r1
   142b4:	mov	r1, r2
   142b8:	movw	r2, #1
   142bc:	str	r2, [sp, #8]
   142c0:	ldr	ip, [sp, #8]
   142c4:	str	r3, [sp, #4]
   142c8:	mov	r3, ip
   142cc:	ldr	lr, [sp, #4]
   142d0:	str	lr, [sp]
   142d4:	ldr	r4, [sp, #12]
   142d8:	blx	r4
   142dc:	cmp	r0, #0
   142e0:	beq	142f0 <flatcc_builder_custom_reset@@Base+0xc8>
   142e4:	mvn	r0, #0
   142e8:	str	r0, [fp, #-12]
   142ec:	b	14458 <flatcc_builder_custom_reset@@Base+0x230>
   142f0:	ldr	r0, [sp, #20]
   142f4:	ldr	r0, [r0]
   142f8:	ldr	r1, [sp, #20]
   142fc:	ldr	r2, [r1, #4]
   14300:	movw	r1, #0
   14304:	and	r1, r1, #255	; 0xff
   14308:	bl	12778 <memset@plt>
   1430c:	b	14348 <flatcc_builder_custom_reset@@Base+0x120>
   14310:	ldr	r0, [sp, #20]
   14314:	ldr	r0, [r0, #4]
   14318:	cmp	r0, #0
   1431c:	bne	14324 <flatcc_builder_custom_reset@@Base+0xfc>
   14320:	b	14344 <flatcc_builder_custom_reset@@Base+0x11c>
   14324:	ldr	r0, [pc, #312]	; 14464 <flatcc_builder_custom_reset@@Base+0x23c>
   14328:	add	r0, pc, r0
   1432c:	ldr	r1, [pc, #308]	; 14468 <flatcc_builder_custom_reset@@Base+0x240>
   14330:	add	r1, pc, r1
   14334:	ldr	r2, [pc, #304]	; 1446c <flatcc_builder_custom_reset@@Base+0x244>
   14338:	add	r3, pc, r2
   1433c:	movw	r2, #434	; 0x1b2
   14340:	bl	127a8 <__assert_fail@plt>
   14344:	b	14348 <flatcc_builder_custom_reset@@Base+0x120>
   14348:	b	1434c <flatcc_builder_custom_reset@@Base+0x124>
   1434c:	ldr	r0, [sp, #16]
   14350:	add	r0, r0, #1
   14354:	str	r0, [sp, #16]
   14358:	b	14248 <flatcc_builder_custom_reset@@Base+0x20>
   1435c:	ldr	r0, [fp, #-16]
   14360:	movw	r1, #0
   14364:	str	r1, [r0, #120]	; 0x78
   14368:	ldr	r0, [fp, #-16]
   1436c:	ldr	r0, [r0, #124]	; 0x7c
   14370:	cmp	r0, #0
   14374:	bls	14384 <flatcc_builder_custom_reset@@Base+0x15c>
   14378:	ldr	r0, [fp, #-16]
   1437c:	movw	r1, #16
   14380:	str	r1, [r0, #124]	; 0x7c
   14384:	ldr	r0, [fp, #-16]
   14388:	movw	r1, #0
   1438c:	strh	r1, [r0, #128]	; 0x80
   14390:	ldr	r0, [fp, #-16]
   14394:	movw	r1, #0
   14398:	str	r1, [r0, #136]	; 0x88
   1439c:	ldr	r0, [fp, #-16]
   143a0:	str	r1, [r0, #140]	; 0x8c
   143a4:	ldr	r0, [fp, #-16]
   143a8:	str	r1, [r0, #156]	; 0x9c
   143ac:	ldr	r0, [fp, #-16]
   143b0:	str	r1, [r0, #160]	; 0xa0
   143b4:	ldr	r0, [fp, #-16]
   143b8:	str	r1, [r0, #20]
   143bc:	ldr	r0, [fp, #-16]
   143c0:	str	r1, [r0, #24]
   143c4:	ldr	r0, [fp, #-16]
   143c8:	str	r1, [r0, #148]	; 0x94
   143cc:	ldr	r0, [fp, #-16]
   143d0:	str	r1, [r0, #152]	; 0x98
   143d4:	ldr	r0, [fp, #-16]
   143d8:	ldr	r0, [r0, #60]	; 0x3c
   143dc:	ldr	r2, [fp, #-16]
   143e0:	str	r0, [r2, #16]
   143e4:	ldr	r0, [fp, #-16]
   143e8:	ldr	r0, [r0, #76]	; 0x4c
   143ec:	ldr	r2, [fp, #-16]
   143f0:	str	r0, [r2]
   143f4:	ldr	r0, [fp, #-16]
   143f8:	ldr	r0, [r0, #52]	; 0x34
   143fc:	ldr	r2, [fp, #-16]
   14400:	str	r0, [r2, #4]
   14404:	ldr	r0, [fp, #-16]
   14408:	str	r1, [r0, #32]
   1440c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14410:	cmp	r0, #0
   14414:	beq	14434 <flatcc_builder_custom_reset@@Base+0x20c>
   14418:	ldr	r0, [fp, #-16]
   1441c:	movw	r1, #0
   14420:	str	r1, [r0, #172]	; 0xac
   14424:	ldr	r0, [fp, #-16]
   14428:	str	r1, [r0, #176]	; 0xb0
   1442c:	ldr	r0, [fp, #-16]
   14430:	str	r1, [r0, #180]	; 0xb4
   14434:	ldr	r0, [fp, #-16]
   14438:	ldr	r0, [r0, #184]	; 0xb8
   1443c:	cmp	r0, #0
   14440:	beq	14450 <flatcc_builder_custom_reset@@Base+0x228>
   14444:	ldr	r0, [fp, #-16]
   14448:	add	r0, r0, #188	; 0xbc
   1444c:	bl	19e00 <flatcc_emitter_reset@@Base>
   14450:	movw	r0, #0
   14454:	str	r0, [fp, #-12]
   14458:	ldr	r0, [fp, #-12]
   1445c:	sub	sp, fp, #8
   14460:	pop	{r4, sl, fp, pc}
   14464:	andeq	r9, r0, ip, lsr r5
   14468:	andeq	r9, r0, r6, asr #10
   1446c:	muleq	r0, fp, r5

00014470 <flatcc_builder_reset@@Base>:
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	sub	sp, sp, #8
   1447c:	str	r0, [sp, #4]
   14480:	ldr	r0, [sp, #4]
   14484:	movw	r1, #0
   14488:	str	r1, [sp]
   1448c:	ldr	r2, [sp]
   14490:	bl	14228 <flatcc_builder_custom_reset@@Base>
   14494:	mov	sp, fp
   14498:	pop	{fp, pc}

0001449c <flatcc_builder_clear@@Base>:
   1449c:	push	{r4, sl, fp, lr}
   144a0:	add	fp, sp, #8
   144a4:	sub	sp, sp, #32
   144a8:	str	r0, [fp, #-12]
   144ac:	movw	r0, #0
   144b0:	str	r0, [sp, #20]
   144b4:	ldr	r0, [sp, #20]
   144b8:	cmp	r0, #8
   144bc:	bge	14530 <flatcc_builder_clear@@Base+0x94>
   144c0:	ldr	r0, [fp, #-12]
   144c4:	add	r0, r0, #52	; 0x34
   144c8:	ldr	r1, [sp, #20]
   144cc:	add	r0, r0, r1, lsl #3
   144d0:	str	r0, [fp, #-16]
   144d4:	ldr	r0, [fp, #-12]
   144d8:	ldr	r0, [r0, #48]	; 0x30
   144dc:	ldr	r1, [fp, #-12]
   144e0:	ldr	r1, [r1, #40]	; 0x28
   144e4:	ldr	r2, [fp, #-16]
   144e8:	ldr	r3, [sp, #20]
   144ec:	str	r0, [sp, #16]
   144f0:	mov	r0, r1
   144f4:	mov	r1, r2
   144f8:	movw	r2, #0
   144fc:	str	r2, [sp, #12]
   14500:	ldr	ip, [sp, #12]
   14504:	str	r3, [sp, #8]
   14508:	mov	r3, ip
   1450c:	ldr	lr, [sp, #8]
   14510:	str	lr, [sp]
   14514:	ldr	r4, [sp, #16]
   14518:	blx	r4
   1451c:	str	r0, [sp, #4]
   14520:	ldr	r0, [sp, #20]
   14524:	add	r0, r0, #1
   14528:	str	r0, [sp, #20]
   1452c:	b	144b4 <flatcc_builder_clear@@Base+0x18>
   14530:	ldr	r0, [fp, #-12]
   14534:	ldr	r0, [r0, #184]	; 0xb8
   14538:	cmp	r0, #0
   1453c:	beq	1454c <flatcc_builder_clear@@Base+0xb0>
   14540:	ldr	r0, [fp, #-12]
   14544:	add	r0, r0, #188	; 0xbc
   14548:	bl	19f98 <flatcc_emitter_clear@@Base>
   1454c:	ldr	r0, [fp, #-12]
   14550:	movw	r1, #0
   14554:	and	r1, r1, #255	; 0xff
   14558:	movw	r2, #232	; 0xe8
   1455c:	bl	12778 <memset@plt>
   14560:	sub	sp, fp, #8
   14564:	pop	{r4, sl, fp, pc}

00014568 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14568:	push	{fp, lr}
   1456c:	mov	fp, sp
   14570:	sub	sp, sp, #24
   14574:	str	r0, [fp, #-8]
   14578:	str	r1, [sp, #12]
   1457c:	ldr	r0, [sp, #12]
   14580:	add	r0, r0, #4
   14584:	sub	r0, r0, #1
   14588:	mvn	r1, #3
   1458c:	and	r0, r0, r1
   14590:	add	r0, r0, #4
   14594:	str	r0, [sp, #12]
   14598:	ldr	r0, [fp, #-8]
   1459c:	ldr	r1, [fp, #-8]
   145a0:	ldr	r2, [r1, #228]	; 0xe4
   145a4:	ldr	r3, [sp, #12]
   145a8:	movw	r1, #7
   145ac:	movw	ip, #0
   145b0:	str	ip, [sp]
   145b4:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   145b8:	str	r0, [sp, #8]
   145bc:	movw	r1, #0
   145c0:	cmp	r0, r1
   145c4:	bne	145d4 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   145c8:	movw	r0, #0
   145cc:	str	r0, [fp, #-4]
   145d0:	b	14630 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   145d4:	ldr	r0, [sp, #8]
   145d8:	ldr	r2, [sp, #12]
   145dc:	movw	r1, #0
   145e0:	and	r1, r1, #255	; 0xff
   145e4:	bl	12778 <memset@plt>
   145e8:	ldr	r0, [fp, #-8]
   145ec:	ldr	r0, [r0, #224]	; 0xe0
   145f0:	ldr	r1, [sp, #8]
   145f4:	add	r2, r1, #4
   145f8:	str	r2, [sp, #8]
   145fc:	str	r0, [r1]
   14600:	ldr	r0, [fp, #-8]
   14604:	ldr	r0, [r0, #228]	; 0xe4
   14608:	add	r0, r0, #4
   1460c:	ldr	r1, [fp, #-8]
   14610:	str	r0, [r1, #224]	; 0xe0
   14614:	ldr	r0, [sp, #12]
   14618:	ldr	r1, [fp, #-8]
   1461c:	ldr	r2, [r1, #228]	; 0xe4
   14620:	add	r0, r2, r0
   14624:	str	r0, [r1, #228]	; 0xe4
   14628:	ldr	r0, [sp, #8]
   1462c:	str	r0, [fp, #-4]
   14630:	ldr	r0, [fp, #-4]
   14634:	mov	sp, fp
   14638:	pop	{fp, pc}
   1463c:	push	{fp, lr}
   14640:	mov	fp, sp
   14644:	sub	sp, sp, #32
   14648:	ldr	ip, [fp, #8]
   1464c:	str	r0, [fp, #-4]
   14650:	str	r1, [fp, #-8]
   14654:	str	r2, [fp, #-12]
   14658:	str	r3, [sp, #16]
   1465c:	ldr	r0, [fp, #-4]
   14660:	add	r0, r0, #52	; 0x34
   14664:	ldr	r1, [fp, #-8]
   14668:	add	r0, r0, r1, lsl #3
   1466c:	str	r0, [sp, #12]
   14670:	ldr	r0, [fp, #-12]
   14674:	ldr	r1, [sp, #16]
   14678:	add	r0, r0, r1
   1467c:	ldr	r1, [sp, #12]
   14680:	ldr	r1, [r1, #4]
   14684:	cmp	r0, r1
   14688:	str	ip, [sp, #8]
   1468c:	bls	14704 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   14690:	ldr	r0, [fp, #-4]
   14694:	ldr	r0, [r0, #48]	; 0x30
   14698:	ldr	r1, [fp, #-4]
   1469c:	ldr	r1, [r1, #40]	; 0x28
   146a0:	ldr	r2, [sp, #12]
   146a4:	ldr	r3, [fp, #-12]
   146a8:	ldr	ip, [sp, #16]
   146ac:	add	r3, r3, ip
   146b0:	ldr	ip, [fp, #8]
   146b4:	ldr	lr, [fp, #-8]
   146b8:	str	r0, [sp, #4]
   146bc:	mov	r0, r1
   146c0:	mov	r1, r2
   146c4:	mov	r2, r3
   146c8:	mov	r3, ip
   146cc:	str	lr, [sp]
   146d0:	ldr	ip, [sp, #4]
   146d4:	blx	ip
   146d8:	cmp	r0, #0
   146dc:	beq	14700 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   146e0:	ldr	r0, [pc, #52]	; 1471c <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   146e4:	add	r0, pc, r0
   146e8:	ldr	r1, [pc, #48]	; 14720 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   146ec:	add	r1, pc, r1
   146f0:	ldr	r2, [pc, #44]	; 14724 <flatcc_builder_enter_user_frame_ptr@@Base+0x1bc>
   146f4:	add	r3, pc, r2
   146f8:	movw	r2, #308	; 0x134
   146fc:	bl	127a8 <__assert_fail@plt>
   14700:	b	14704 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   14704:	ldr	r0, [sp, #12]
   14708:	ldr	r0, [r0]
   1470c:	ldr	r1, [fp, #-12]
   14710:	add	r0, r0, r1
   14714:	mov	sp, fp
   14718:	pop	{fp, pc}
   1471c:	andeq	sl, r0, pc, asr #6
   14720:	andeq	r9, r0, sl, lsl #3
   14724:	andeq	sl, r0, r9, ror r1

00014728 <flatcc_builder_enter_user_frame@@Base>:
   14728:	push	{fp, lr}
   1472c:	mov	fp, sp
   14730:	sub	sp, sp, #24
   14734:	str	r0, [fp, #-8]
   14738:	str	r1, [sp, #12]
   1473c:	ldr	r0, [sp, #12]
   14740:	add	r0, r0, #4
   14744:	sub	r0, r0, #1
   14748:	mvn	r1, #3
   1474c:	and	r0, r0, r1
   14750:	add	r0, r0, #4
   14754:	str	r0, [sp, #12]
   14758:	ldr	r0, [fp, #-8]
   1475c:	ldr	r1, [fp, #-8]
   14760:	ldr	r2, [r1, #228]	; 0xe4
   14764:	ldr	r3, [sp, #12]
   14768:	movw	r1, #7
   1476c:	movw	ip, #0
   14770:	str	ip, [sp]
   14774:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14778:	str	r0, [sp, #8]
   1477c:	movw	r1, #0
   14780:	cmp	r0, r1
   14784:	bne	14794 <flatcc_builder_enter_user_frame@@Base+0x6c>
   14788:	movw	r0, #0
   1478c:	str	r0, [fp, #-4]
   14790:	b	147f4 <flatcc_builder_enter_user_frame@@Base+0xcc>
   14794:	ldr	r0, [sp, #8]
   14798:	ldr	r2, [sp, #12]
   1479c:	movw	r1, #0
   147a0:	and	r1, r1, #255	; 0xff
   147a4:	bl	12778 <memset@plt>
   147a8:	ldr	r0, [fp, #-8]
   147ac:	ldr	r0, [r0, #224]	; 0xe0
   147b0:	ldr	r1, [sp, #8]
   147b4:	add	r2, r1, #4
   147b8:	str	r2, [sp, #8]
   147bc:	str	r0, [r1]
   147c0:	ldr	r0, [fp, #-8]
   147c4:	ldr	r0, [r0, #228]	; 0xe4
   147c8:	add	r0, r0, #4
   147cc:	ldr	r1, [fp, #-8]
   147d0:	str	r0, [r1, #224]	; 0xe0
   147d4:	ldr	r0, [sp, #12]
   147d8:	ldr	r1, [fp, #-8]
   147dc:	ldr	r2, [r1, #228]	; 0xe4
   147e0:	add	r0, r2, r0
   147e4:	str	r0, [r1, #228]	; 0xe4
   147e8:	ldr	r0, [fp, #-8]
   147ec:	ldr	r0, [r0, #224]	; 0xe0
   147f0:	str	r0, [fp, #-4]
   147f4:	ldr	r0, [fp, #-4]
   147f8:	mov	sp, fp
   147fc:	pop	{fp, pc}

00014800 <flatcc_builder_exit_user_frame@@Base>:
   14800:	push	{fp, lr}
   14804:	mov	fp, sp
   14808:	sub	sp, sp, #8
   1480c:	str	r0, [sp, #4]
   14810:	ldr	r0, [sp, #4]
   14814:	ldr	r0, [r0, #224]	; 0xe0
   14818:	cmp	r0, #0
   1481c:	bls	14824 <flatcc_builder_exit_user_frame@@Base+0x24>
   14820:	b	14844 <flatcc_builder_exit_user_frame@@Base+0x44>
   14824:	ldr	r0, [pc, #100]	; 14890 <flatcc_builder_exit_user_frame@@Base+0x90>
   14828:	add	r0, pc, r0
   1482c:	ldr	r1, [pc, #96]	; 14894 <flatcc_builder_exit_user_frame@@Base+0x94>
   14830:	add	r1, pc, r1
   14834:	ldr	r2, [pc, #92]	; 14898 <flatcc_builder_exit_user_frame@@Base+0x98>
   14838:	add	r3, pc, r2
   1483c:	movw	r2, #542	; 0x21e
   14840:	bl	127a8 <__assert_fail@plt>
   14844:	ldr	r0, [sp, #4]
   14848:	ldr	r0, [r0, #108]	; 0x6c
   1484c:	ldr	r1, [sp, #4]
   14850:	ldr	r1, [r1, #224]	; 0xe0
   14854:	add	r0, r0, r1
   14858:	str	r0, [sp]
   1485c:	ldr	r0, [sp, #4]
   14860:	ldr	r0, [r0, #224]	; 0xe0
   14864:	sub	r0, r0, #4
   14868:	ldr	r1, [sp, #4]
   1486c:	str	r0, [r1, #228]	; 0xe4
   14870:	ldr	r0, [sp]
   14874:	mvn	r1, #3
   14878:	add	r0, r0, r1
   1487c:	ldr	r0, [r0]
   14880:	ldr	r1, [sp, #4]
   14884:	str	r0, [r1, #224]	; 0xe0
   14888:	mov	sp, fp
   1488c:	pop	{fp, pc}
   14890:	andeq	r9, r0, r9, ror #1
   14894:	andeq	r9, r0, r6, asr #32
   14898:	strdeq	r9, [r0], -r2

0001489c <flatcc_builder_exit_user_frame_at@@Base>:
   1489c:	push	{fp, lr}
   148a0:	mov	fp, sp
   148a4:	sub	sp, sp, #8
   148a8:	str	r0, [sp, #4]
   148ac:	str	r1, [sp]
   148b0:	ldr	r0, [sp, #4]
   148b4:	ldr	r0, [r0, #224]	; 0xe0
   148b8:	ldr	r1, [sp]
   148bc:	cmp	r0, r1
   148c0:	bcc	148c8 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   148c4:	b	148e8 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   148c8:	ldr	r0, [pc, #52]	; 14904 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   148cc:	add	r0, pc, r0
   148d0:	ldr	r1, [pc, #48]	; 14908 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   148d4:	add	r1, pc, r1
   148d8:	ldr	r2, [pc, #44]	; 1490c <flatcc_builder_exit_user_frame_at@@Base+0x70>
   148dc:	add	r3, pc, r2
   148e0:	movw	r2, #551	; 0x227
   148e4:	bl	127a8 <__assert_fail@plt>
   148e8:	ldr	r0, [sp]
   148ec:	ldr	r1, [sp, #4]
   148f0:	str	r0, [r1, #224]	; 0xe0
   148f4:	ldr	r0, [sp, #4]
   148f8:	bl	14800 <flatcc_builder_exit_user_frame@@Base>
   148fc:	mov	sp, fp
   14900:	pop	{fp, pc}
   14904:	muleq	r0, r8, r0
   14908:	andeq	r8, r0, r2, lsr #31
   1490c:	andeq	r9, r0, r7, lsr #1

00014910 <flatcc_builder_get_current_user_frame@@Base>:
   14910:	sub	sp, sp, #4
   14914:	str	r0, [sp]
   14918:	ldr	r0, [sp]
   1491c:	ldr	r0, [r0, #224]	; 0xe0
   14920:	add	sp, sp, #4
   14924:	bx	lr

00014928 <flatcc_builder_get_user_frame_ptr@@Base>:
   14928:	sub	sp, sp, #8
   1492c:	str	r0, [sp, #4]
   14930:	str	r1, [sp]
   14934:	ldr	r0, [sp, #4]
   14938:	ldr	r0, [r0, #108]	; 0x6c
   1493c:	ldr	r1, [sp]
   14940:	add	r0, r0, r1
   14944:	add	sp, sp, #8
   14948:	bx	lr

0001494c <flatcc_builder_embed_buffer@@Base>:
   1494c:	push	{fp, lr}
   14950:	mov	fp, sp
   14954:	sub	sp, sp, #120	; 0x78
   14958:	ldr	ip, [fp, #12]
   1495c:	ldr	lr, [fp, #8]
   14960:	str	r0, [fp, #-8]
   14964:	strh	r1, [fp, #-10]
   14968:	str	r2, [fp, #-16]
   1496c:	str	r3, [fp, #-20]	; 0xffffffec
   14970:	strh	lr, [fp, #-22]	; 0xffffffea
   14974:	ldr	r0, [fp, #12]
   14978:	and	r0, r0, #2
   1497c:	str	r0, [sp, #12]
   14980:	ldr	r0, [fp, #-8]
   14984:	ldrh	r1, [fp, #-10]
   14988:	ldr	r2, [fp, #-8]
   1498c:	ldr	r2, [r2, #152]	; 0x98
   14990:	cmp	r2, #0
   14994:	movw	r2, #0
   14998:	moveq	r2, #1
   1499c:	mvn	r3, #0
   149a0:	eor	r2, r2, r3
   149a4:	and	r3, r2, #1
   149a8:	sub	r2, fp, #22
   149ac:	str	r1, [sp, #8]
   149b0:	mov	r1, r2
   149b4:	ldr	r2, [sp, #8]
   149b8:	uxth	r2, r2
   149bc:	str	ip, [sp, #4]
   149c0:	bl	14b34 <flatcc_builder_embed_buffer@@Base+0x1e8>
   149c4:	cmp	r0, #0
   149c8:	beq	149d8 <flatcc_builder_embed_buffer@@Base+0x8c>
   149cc:	movw	r0, #0
   149d0:	str	r0, [fp, #-4]
   149d4:	b	14b24 <flatcc_builder_embed_buffer@@Base+0x1d8>
   149d8:	ldr	r0, [fp, #-8]
   149dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   149e0:	ldr	r2, [sp, #12]
   149e4:	cmp	r2, #0
   149e8:	movw	r2, #0
   149ec:	movne	r2, #1
   149f0:	tst	r2, #1
   149f4:	movw	r2, #4
   149f8:	moveq	r2, #0
   149fc:	add	r1, r1, r2
   14a00:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14a04:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   14a08:	str	r0, [fp, #-32]	; 0xffffffe0
   14a0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a10:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14a14:	add	r0, r0, r1
   14a18:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   14a1c:	str	r0, [fp, #-28]	; 0xffffffe4
   14a20:	movw	r0, #0
   14a24:	str	r0, [sp, #16]
   14a28:	str	r0, [sp, #20]
   14a2c:	ldr	r0, [fp, #-8]
   14a30:	ldr	r0, [r0, #152]	; 0x98
   14a34:	cmp	r0, #0
   14a38:	beq	14a78 <flatcc_builder_embed_buffer@@Base+0x12c>
   14a3c:	ldr	r0, [sp, #16]
   14a40:	add	r0, r0, #4
   14a44:	str	r0, [sp, #16]
   14a48:	add	r0, sp, #16
   14a4c:	add	r0, r0, #8
   14a50:	ldr	r1, [sp, #20]
   14a54:	sub	r2, fp, #28
   14a58:	str	r2, [r0, r1, lsl #3]
   14a5c:	ldr	r1, [sp, #20]
   14a60:	add	r0, r0, r1, lsl #3
   14a64:	movw	r1, #4
   14a68:	str	r1, [r0, #4]
   14a6c:	ldr	r0, [sp, #20]
   14a70:	add	r0, r0, #1
   14a74:	str	r0, [sp, #20]
   14a78:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a7c:	cmp	r0, #0
   14a80:	bls	14ac4 <flatcc_builder_embed_buffer@@Base+0x178>
   14a84:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a88:	ldr	r1, [sp, #16]
   14a8c:	add	r0, r1, r0
   14a90:	str	r0, [sp, #16]
   14a94:	ldr	r0, [fp, #-16]
   14a98:	add	r1, sp, #16
   14a9c:	add	r1, r1, #8
   14aa0:	ldr	r2, [sp, #20]
   14aa4:	str	r0, [r1, r2, lsl #3]
   14aa8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14aac:	ldr	r2, [sp, #20]
   14ab0:	add	r1, r1, r2, lsl #3
   14ab4:	str	r0, [r1, #4]
   14ab8:	ldr	r0, [sp, #20]
   14abc:	add	r0, r0, #1
   14ac0:	str	r0, [sp, #20]
   14ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ac8:	cmp	r0, #0
   14acc:	bls	14b14 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14ad0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ad4:	ldr	r1, [sp, #16]
   14ad8:	add	r0, r1, r0
   14adc:	str	r0, [sp, #16]
   14ae0:	add	r0, sp, #16
   14ae4:	add	r0, r0, #8
   14ae8:	ldr	r1, [sp, #20]
   14aec:	ldr	r2, [pc, #60]	; 14b30 <flatcc_builder_embed_buffer@@Base+0x1e4>
   14af0:	ldr	r2, [pc, r2]
   14af4:	str	r2, [r0, r1, lsl #3]
   14af8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14afc:	ldr	r2, [sp, #20]
   14b00:	add	r0, r0, r2, lsl #3
   14b04:	str	r1, [r0, #4]
   14b08:	ldr	r0, [sp, #20]
   14b0c:	add	r0, r0, #1
   14b10:	str	r0, [sp, #20]
   14b14:	ldr	r0, [fp, #-8]
   14b18:	add	r1, sp, #16
   14b1c:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   14b20:	str	r0, [fp, #-4]
   14b24:	ldr	r0, [fp, #-4]
   14b28:	mov	sp, fp
   14b2c:	pop	{fp, pc}
   14b30:	andeq	fp, r1, ip, asr #10
   14b34:	push	{fp, lr}
   14b38:	mov	fp, sp
   14b3c:	sub	sp, sp, #104	; 0x68
   14b40:	str	r0, [fp, #-4]
   14b44:	str	r1, [fp, #-8]
   14b48:	strh	r2, [fp, #-10]
   14b4c:	str	r3, [fp, #-16]
   14b50:	ldrh	r0, [fp, #-10]
   14b54:	cmp	r0, #0
   14b58:	beq	14b68 <flatcc_builder_embed_buffer@@Base+0x21c>
   14b5c:	ldrh	r0, [fp, #-10]
   14b60:	str	r0, [sp, #8]
   14b64:	b	14b9c <flatcc_builder_embed_buffer@@Base+0x250>
   14b68:	ldr	r0, [fp, #-4]
   14b6c:	ldrh	r0, [r0, #132]	; 0x84
   14b70:	cmp	r0, #0
   14b74:	beq	14b88 <flatcc_builder_embed_buffer@@Base+0x23c>
   14b78:	ldr	r0, [fp, #-4]
   14b7c:	ldrh	r0, [r0, #132]	; 0x84
   14b80:	str	r0, [sp, #4]
   14b84:	b	14b94 <flatcc_builder_embed_buffer@@Base+0x248>
   14b88:	movw	r0, #1
   14b8c:	str	r0, [sp, #4]
   14b90:	b	14b94 <flatcc_builder_embed_buffer@@Base+0x248>
   14b94:	ldr	r0, [sp, #4]
   14b98:	str	r0, [sp, #8]
   14b9c:	ldr	r0, [sp, #8]
   14ba0:	strh	r0, [fp, #-10]
   14ba4:	ldr	r0, [fp, #-8]
   14ba8:	movw	r1, #4
   14bac:	uxth	r1, r1
   14bb0:	bl	166a0 <flatcc_builder_start_vector@@Base+0xac>
   14bb4:	ldr	r0, [fp, #-8]
   14bb8:	ldrh	r1, [fp, #-10]
   14bbc:	bl	166a0 <flatcc_builder_start_vector@@Base+0xac>
   14bc0:	ldr	r0, [fp, #-16]
   14bc4:	cmp	r0, #0
   14bc8:	bne	14c84 <flatcc_builder_embed_buffer@@Base+0x338>
   14bcc:	ldr	r0, [fp, #-4]
   14bd0:	ldrh	r1, [fp, #-10]
   14bd4:	bl	19ae8 <flatcc_builder_get_emit_context@@Base+0x18>
   14bd8:	str	r0, [fp, #-20]	; 0xffffffec
   14bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14be0:	cmp	r0, #0
   14be4:	beq	14c80 <flatcc_builder_embed_buffer@@Base+0x334>
   14be8:	movw	r0, #0
   14bec:	str	r0, [sp, #12]
   14bf0:	str	r0, [sp, #16]
   14bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bf8:	cmp	r0, #0
   14bfc:	bls	14c44 <flatcc_builder_embed_buffer@@Base+0x2f8>
   14c00:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c04:	ldr	r1, [sp, #12]
   14c08:	add	r0, r1, r0
   14c0c:	str	r0, [sp, #12]
   14c10:	add	r0, sp, #12
   14c14:	add	r0, r0, #8
   14c18:	ldr	r1, [sp, #16]
   14c1c:	ldr	r2, [pc, #120]	; 14c9c <flatcc_builder_embed_buffer@@Base+0x350>
   14c20:	ldr	r2, [pc, r2]
   14c24:	str	r2, [r0, r1, lsl #3]
   14c28:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c2c:	ldr	r2, [sp, #16]
   14c30:	add	r0, r0, r2, lsl #3
   14c34:	str	r1, [r0, #4]
   14c38:	ldr	r0, [sp, #16]
   14c3c:	add	r0, r0, #1
   14c40:	str	r0, [sp, #16]
   14c44:	ldr	r0, [fp, #-4]
   14c48:	add	r1, sp, #12
   14c4c:	bl	16c84 <flatcc_builder_create_vtable@@Base+0x104>
   14c50:	movw	r1, #0
   14c54:	cmp	r1, r0
   14c58:	bne	14c7c <flatcc_builder_embed_buffer@@Base+0x330>
   14c5c:	ldr	r0, [pc, #44]	; 14c90 <flatcc_builder_embed_buffer@@Base+0x344>
   14c60:	add	r0, pc, r0
   14c64:	ldr	r1, [pc, #40]	; 14c94 <flatcc_builder_embed_buffer@@Base+0x348>
   14c68:	add	r1, pc, r1
   14c6c:	ldr	r2, [pc, #36]	; 14c98 <flatcc_builder_embed_buffer@@Base+0x34c>
   14c70:	add	r3, pc, r2
   14c74:	movw	r2, #702	; 0x2be
   14c78:	bl	127a8 <__assert_fail@plt>
   14c7c:	b	14c80 <flatcc_builder_embed_buffer@@Base+0x334>
   14c80:	b	14c84 <flatcc_builder_embed_buffer@@Base+0x338>
   14c84:	movw	r0, #0
   14c88:	mov	sp, fp
   14c8c:	pop	{fp, pc}
   14c90:	ldrdeq	r9, [r0], -r3
   14c94:	andeq	r8, r0, lr, lsl #24
   14c98:	andeq	r9, r0, r0, asr #24
   14c9c:	andeq	fp, r1, ip, lsl r4
   14ca0:	sub	sp, sp, #12
   14ca4:	str	r0, [sp, #8]
   14ca8:	str	r1, [sp, #4]
   14cac:	strh	r2, [sp, #2]
   14cb0:	ldr	r0, [sp, #8]
   14cb4:	ldr	r0, [r0, #136]	; 0x88
   14cb8:	ldr	r1, [sp, #4]
   14cbc:	sub	r0, r0, r1
   14cc0:	ldrh	r1, [sp, #2]
   14cc4:	sub	r1, r1, #1
   14cc8:	and	r0, r0, r1
   14ccc:	add	sp, sp, #12
   14cd0:	bx	lr
   14cd4:	sub	sp, sp, #4
   14cd8:	str	r0, [sp]
   14cdc:	ldr	r0, [sp]
   14ce0:	add	sp, sp, #4
   14ce4:	bx	lr
   14ce8:	push	{fp, lr}
   14cec:	mov	fp, sp
   14cf0:	sub	sp, sp, #24
   14cf4:	str	r0, [fp, #-4]
   14cf8:	str	r1, [fp, #-8]
   14cfc:	ldr	r0, [fp, #-4]
   14d00:	ldr	r0, [r0, #136]	; 0x88
   14d04:	ldr	r1, [fp, #-8]
   14d08:	ldr	r1, [r1]
   14d0c:	sub	r0, r0, r1
   14d10:	str	r0, [sp, #12]
   14d14:	ldr	r0, [fp, #-8]
   14d18:	ldr	r0, [r0]
   14d1c:	cmp	r0, #16
   14d20:	bls	14d38 <flatcc_builder_embed_buffer@@Base+0x3ec>
   14d24:	ldr	r0, [fp, #-8]
   14d28:	ldr	r0, [r0]
   14d2c:	sub	r0, r0, #16
   14d30:	cmn	r0, #1
   14d34:	bhi	14d4c <flatcc_builder_embed_buffer@@Base+0x400>
   14d38:	ldr	r0, [sp, #12]
   14d3c:	ldr	r1, [fp, #-4]
   14d40:	ldr	r1, [r1, #136]	; 0x88
   14d44:	cmp	r0, r1
   14d48:	blt	14d6c <flatcc_builder_embed_buffer@@Base+0x420>
   14d4c:	ldr	r0, [pc, #172]	; 14e00 <flatcc_builder_embed_buffer@@Base+0x4b4>
   14d50:	add	r0, pc, r0
   14d54:	ldr	r1, [pc, #168]	; 14e04 <flatcc_builder_embed_buffer@@Base+0x4b8>
   14d58:	add	r1, pc, r1
   14d5c:	ldr	r2, [pc, #164]	; 14e08 <flatcc_builder_embed_buffer@@Base+0x4bc>
   14d60:	add	r3, pc, r2
   14d64:	movw	r2, #647	; 0x287
   14d68:	bl	127a8 <__assert_fail@plt>
   14d6c:	ldr	r0, [fp, #-4]
   14d70:	ldr	r0, [r0, #44]	; 0x2c
   14d74:	ldr	r1, [fp, #-4]
   14d78:	ldr	r1, [r1, #36]	; 0x24
   14d7c:	ldr	r2, [fp, #-8]
   14d80:	add	r2, r2, #8
   14d84:	ldr	r3, [fp, #-8]
   14d88:	ldr	r3, [r3, #4]
   14d8c:	ldr	ip, [sp, #12]
   14d90:	ldr	lr, [fp, #-8]
   14d94:	ldr	lr, [lr]
   14d98:	str	r0, [sp, #8]
   14d9c:	mov	r0, r1
   14da0:	mov	r1, r2
   14da4:	mov	r2, r3
   14da8:	mov	r3, ip
   14dac:	str	lr, [sp]
   14db0:	ldr	ip, [sp, #8]
   14db4:	blx	ip
   14db8:	cmp	r0, #0
   14dbc:	beq	14de0 <flatcc_builder_embed_buffer@@Base+0x494>
   14dc0:	ldr	r0, [pc, #44]	; 14df4 <flatcc_builder_embed_buffer@@Base+0x4a8>
   14dc4:	add	r0, pc, r0
   14dc8:	ldr	r1, [pc, #40]	; 14df8 <flatcc_builder_embed_buffer@@Base+0x4ac>
   14dcc:	add	r1, pc, r1
   14dd0:	ldr	r2, [pc, #36]	; 14dfc <flatcc_builder_embed_buffer@@Base+0x4b0>
   14dd4:	add	r3, pc, r2
   14dd8:	movw	r2, #651	; 0x28b
   14ddc:	bl	127a8 <__assert_fail@plt>
   14de0:	ldr	r0, [sp, #12]
   14de4:	ldr	r1, [fp, #-4]
   14de8:	str	r0, [r1, #136]	; 0x88
   14dec:	mov	sp, fp
   14df0:	pop	{fp, pc}
   14df4:	andeq	r9, r0, pc, ror #24
   14df8:	andeq	r8, r0, sl, lsr #21
   14dfc:	andeq	r9, r0, lr, lsl fp
   14e00:	andeq	r9, r0, r3, ror #25
   14e04:	andeq	r8, r0, lr, lsl fp
   14e08:	muleq	r0, r2, fp

00014e0c <flatcc_builder_create_buffer@@Base>:
   14e0c:	push	{fp, lr}
   14e10:	mov	fp, sp
   14e14:	sub	sp, sp, #152	; 0x98
   14e18:	ldr	ip, [fp, #12]
   14e1c:	ldr	lr, [fp, #8]
   14e20:	str	r0, [fp, #-8]
   14e24:	str	r1, [fp, #-12]
   14e28:	strh	r2, [fp, #-14]
   14e2c:	str	r3, [fp, #-20]	; 0xffffffec
   14e30:	strh	lr, [fp, #-22]	; 0xffffffea
   14e34:	movw	r0, #0
   14e38:	str	r0, [fp, #-36]	; 0xffffffdc
   14e3c:	str	r0, [sp, #28]
   14e40:	ldr	r0, [fp, #12]
   14e44:	and	r0, r0, #1
   14e48:	cmp	r0, #0
   14e4c:	movw	r0, #0
   14e50:	movne	r0, #1
   14e54:	and	r0, r0, #1
   14e58:	str	r0, [sp, #24]
   14e5c:	ldr	r0, [fp, #12]
   14e60:	and	r0, r0, #2
   14e64:	cmp	r0, #0
   14e68:	movw	r0, #0
   14e6c:	movne	r0, #1
   14e70:	and	r0, r0, #1
   14e74:	str	r0, [sp, #20]
   14e78:	ldr	r0, [fp, #-8]
   14e7c:	ldrh	r1, [fp, #-14]
   14e80:	ldr	r3, [sp, #24]
   14e84:	sub	r2, fp, #22
   14e88:	str	r1, [sp, #16]
   14e8c:	mov	r1, r2
   14e90:	ldr	r2, [sp, #16]
   14e94:	uxth	r2, r2
   14e98:	str	ip, [sp, #12]
   14e9c:	bl	14b34 <flatcc_builder_embed_buffer@@Base+0x1e8>
   14ea0:	cmp	r0, #0
   14ea4:	beq	14eb4 <flatcc_builder_create_buffer@@Base+0xa8>
   14ea8:	movw	r0, #0
   14eac:	str	r0, [fp, #-4]
   14eb0:	b	15198 <flatcc_builder_create_buffer@@Base+0x38c>
   14eb4:	ldr	r0, [fp, #-8]
   14eb8:	ldrh	r1, [fp, #-22]	; 0xffffffea
   14ebc:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   14ec0:	ldr	r0, [fp, #-12]
   14ec4:	movw	r1, #0
   14ec8:	cmp	r0, r1
   14ecc:	beq	14f0c <flatcc_builder_create_buffer@@Base+0x100>
   14ed0:	ldr	r0, [fp, #-12]
   14ed4:	ldrb	r1, [r0]
   14ed8:	strb	r1, [sp, #28]
   14edc:	ldrb	r1, [r0, #1]
   14ee0:	strb	r1, [sp, #29]
   14ee4:	ldrb	r1, [r0, #2]
   14ee8:	strb	r1, [sp, #30]
   14eec:	ldrb	r0, [r0, #3]
   14ef0:	strb	r0, [sp, #31]
   14ef4:	ldr	r0, [sp, #28]
   14ef8:	bl	151e8 <flatcc_builder_create_buffer@@Base+0x3dc>
   14efc:	str	r0, [sp, #28]
   14f00:	ldr	r0, [sp, #28]
   14f04:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   14f08:	str	r0, [sp, #28]
   14f0c:	ldr	r0, [sp, #28]
   14f10:	cmp	r0, #0
   14f14:	movw	r0, #0
   14f18:	movne	r0, #1
   14f1c:	tst	r0, #1
   14f20:	movw	r0, #4
   14f24:	mov	r1, r0
   14f28:	moveq	r1, #0
   14f2c:	str	r1, [fp, #-36]	; 0xffffffdc
   14f30:	ldr	r1, [fp, #-8]
   14f34:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14f38:	add	r2, r2, #4
   14f3c:	ldr	r3, [sp, #20]
   14f40:	cmp	r3, #0
   14f44:	movw	r3, #0
   14f48:	movne	r3, #1
   14f4c:	tst	r3, #1
   14f50:	moveq	r0, #0
   14f54:	add	r0, r2, r0
   14f58:	str	r0, [sp, #8]
   14f5c:	mov	r0, r1
   14f60:	ldr	r1, [sp, #8]
   14f64:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14f68:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   14f6c:	str	r0, [fp, #-32]	; 0xffffffe0
   14f70:	movw	r0, #0
   14f74:	str	r0, [sp, #32]
   14f78:	str	r0, [sp, #36]	; 0x24
   14f7c:	ldr	r0, [sp, #24]
   14f80:	cmp	r0, #0
   14f84:	bne	14f94 <flatcc_builder_create_buffer@@Base+0x188>
   14f88:	ldr	r0, [sp, #20]
   14f8c:	cmp	r0, #0
   14f90:	beq	14fd0 <flatcc_builder_create_buffer@@Base+0x1c4>
   14f94:	ldr	r0, [sp, #32]
   14f98:	add	r0, r0, #4
   14f9c:	str	r0, [sp, #32]
   14fa0:	add	r0, sp, #32
   14fa4:	add	r0, r0, #8
   14fa8:	ldr	r1, [sp, #36]	; 0x24
   14fac:	sub	r2, fp, #44	; 0x2c
   14fb0:	str	r2, [r0, r1, lsl #3]
   14fb4:	ldr	r1, [sp, #36]	; 0x24
   14fb8:	add	r0, r0, r1, lsl #3
   14fbc:	movw	r1, #4
   14fc0:	str	r1, [r0, #4]
   14fc4:	ldr	r0, [sp, #36]	; 0x24
   14fc8:	add	r0, r0, #1
   14fcc:	str	r0, [sp, #36]	; 0x24
   14fd0:	ldr	r0, [sp, #32]
   14fd4:	add	r0, r0, #4
   14fd8:	str	r0, [sp, #32]
   14fdc:	add	r0, sp, #32
   14fe0:	add	r0, r0, #8
   14fe4:	ldr	r1, [sp, #36]	; 0x24
   14fe8:	sub	r2, fp, #40	; 0x28
   14fec:	str	r2, [r0, r1, lsl #3]
   14ff0:	ldr	r1, [sp, #36]	; 0x24
   14ff4:	add	r0, r0, r1, lsl #3
   14ff8:	movw	r1, #4
   14ffc:	str	r1, [r0, #4]
   15000:	ldr	r0, [sp, #36]	; 0x24
   15004:	add	r0, r0, #1
   15008:	str	r0, [sp, #36]	; 0x24
   1500c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15010:	cmp	r0, #0
   15014:	bls	15058 <flatcc_builder_create_buffer@@Base+0x24c>
   15018:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1501c:	ldr	r1, [sp, #32]
   15020:	add	r0, r1, r0
   15024:	str	r0, [sp, #32]
   15028:	add	r0, sp, #32
   1502c:	add	r0, r0, #8
   15030:	ldr	r1, [sp, #36]	; 0x24
   15034:	add	r2, sp, #28
   15038:	str	r2, [r0, r1, lsl #3]
   1503c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15040:	ldr	r2, [sp, #36]	; 0x24
   15044:	add	r0, r0, r2, lsl #3
   15048:	str	r1, [r0, #4]
   1504c:	ldr	r0, [sp, #36]	; 0x24
   15050:	add	r0, r0, #1
   15054:	str	r0, [sp, #36]	; 0x24
   15058:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1505c:	cmp	r0, #0
   15060:	bls	150a8 <flatcc_builder_create_buffer@@Base+0x29c>
   15064:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15068:	ldr	r1, [sp, #32]
   1506c:	add	r0, r1, r0
   15070:	str	r0, [sp, #32]
   15074:	add	r0, sp, #32
   15078:	add	r0, r0, #8
   1507c:	ldr	r1, [sp, #36]	; 0x24
   15080:	ldr	r2, [pc, #296]	; 151b0 <flatcc_builder_create_buffer@@Base+0x3a4>
   15084:	ldr	r2, [pc, r2]
   15088:	str	r2, [r0, r1, lsl #3]
   1508c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15090:	ldr	r2, [sp, #36]	; 0x24
   15094:	add	r0, r0, r2, lsl #3
   15098:	str	r1, [r0, #4]
   1509c:	ldr	r0, [sp, #36]	; 0x24
   150a0:	add	r0, r0, #1
   150a4:	str	r0, [sp, #36]	; 0x24
   150a8:	ldr	r0, [fp, #-8]
   150ac:	ldr	r0, [r0, #136]	; 0x88
   150b0:	ldr	r1, [sp, #32]
   150b4:	sub	r0, r0, r1
   150b8:	ldr	r1, [sp, #24]
   150bc:	cmp	r1, #0
   150c0:	movw	r1, #1
   150c4:	str	r0, [sp, #4]
   150c8:	str	r1, [sp]
   150cc:	bne	150e4 <flatcc_builder_create_buffer@@Base+0x2d8>
   150d0:	ldr	r0, [sp, #20]
   150d4:	cmp	r0, #0
   150d8:	movw	r0, #0
   150dc:	movne	r0, #1
   150e0:	str	r0, [sp]
   150e4:	ldr	r0, [sp]
   150e8:	tst	r0, #1
   150ec:	movw	r0, #4
   150f0:	moveq	r0, #0
   150f4:	ldr	r1, [sp, #4]
   150f8:	add	r0, r1, r0
   150fc:	str	r0, [fp, #-48]	; 0xffffffd0
   15100:	ldr	r0, [sp, #24]
   15104:	cmp	r0, #0
   15108:	beq	15128 <flatcc_builder_create_buffer@@Base+0x31c>
   1510c:	ldr	r0, [fp, #-8]
   15110:	ldr	r0, [r0, #144]	; 0x90
   15114:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15118:	sub	r0, r0, r1
   1511c:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   15120:	str	r0, [fp, #-44]	; 0xffffffd4
   15124:	b	15140 <flatcc_builder_create_buffer@@Base+0x334>
   15128:	ldr	r0, [fp, #-8]
   1512c:	ldr	r0, [r0, #140]	; 0x8c
   15130:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15134:	sub	r0, r0, r1
   15138:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   1513c:	str	r0, [fp, #-44]	; 0xffffffd4
   15140:	ldr	r0, [fp, #-20]	; 0xffffffec
   15144:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15148:	sub	r0, r0, r1
   1514c:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   15150:	str	r0, [fp, #-40]	; 0xffffffd8
   15154:	ldr	r0, [fp, #-8]
   15158:	add	r1, sp, #32
   1515c:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   15160:	str	r0, [fp, #-28]	; 0xffffffe4
   15164:	movw	r1, #0
   15168:	cmp	r1, r0
   1516c:	bne	15190 <flatcc_builder_create_buffer@@Base+0x384>
   15170:	ldr	r0, [pc, #44]	; 151a4 <flatcc_builder_create_buffer@@Base+0x398>
   15174:	add	r0, pc, r0
   15178:	ldr	r1, [pc, #40]	; 151a8 <flatcc_builder_create_buffer@@Base+0x39c>
   1517c:	add	r1, pc, r1
   15180:	ldr	r2, [pc, #36]	; 151ac <flatcc_builder_create_buffer@@Base+0x3a0>
   15184:	add	r3, pc, r2
   15188:	movw	r2, #772	; 0x304
   1518c:	bl	127a8 <__assert_fail@plt>
   15190:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15194:	str	r0, [fp, #-4]
   15198:	ldr	r0, [fp, #-4]
   1519c:	mov	sp, fp
   151a0:	pop	{fp, pc}
   151a4:			; <UNDEFINED> instruction: 0x000098bf
   151a8:	strdeq	r8, [r0], -sl
   151ac:	andeq	r8, r0, r4, asr #16
   151b0:			; <UNDEFINED> instruction: 0x0001afb8
   151b4:	sub	sp, sp, #8
   151b8:	str	r0, [sp, #4]
   151bc:	strh	r1, [sp, #2]
   151c0:	ldr	r0, [sp, #4]
   151c4:	ldrh	r0, [r0, #128]	; 0x80
   151c8:	ldrh	r1, [sp, #2]
   151cc:	cmp	r0, r1
   151d0:	bge	151e0 <flatcc_builder_create_buffer@@Base+0x3d4>
   151d4:	ldrh	r0, [sp, #2]
   151d8:	ldr	r1, [sp, #4]
   151dc:	strh	r0, [r1, #128]	; 0x80
   151e0:	add	sp, sp, #8
   151e4:	bx	lr
   151e8:	sub	sp, sp, #4
   151ec:	str	r0, [sp]
   151f0:	ldr	r0, [sp]
   151f4:	add	sp, sp, #4
   151f8:	bx	lr

000151fc <flatcc_builder_create_struct@@Base>:
   151fc:	push	{fp, lr}
   15200:	mov	fp, sp
   15204:	sub	sp, sp, #96	; 0x60
   15208:	str	r0, [fp, #-4]
   1520c:	str	r1, [fp, #-8]
   15210:	str	r2, [fp, #-12]
   15214:	strh	r3, [fp, #-14]
   15218:	ldrh	r0, [fp, #-14]
   1521c:	cmp	r0, #1
   15220:	blt	15228 <flatcc_builder_create_struct@@Base+0x2c>
   15224:	b	15248 <flatcc_builder_create_struct@@Base+0x4c>
   15228:	ldr	r0, [pc, #244]	; 15324 <flatcc_builder_create_struct@@Base+0x128>
   1522c:	add	r0, pc, r0
   15230:	ldr	r1, [pc, #240]	; 15328 <flatcc_builder_create_struct@@Base+0x12c>
   15234:	add	r1, pc, r1
   15238:	ldr	r2, [pc, #236]	; 1532c <flatcc_builder_create_struct@@Base+0x130>
   1523c:	add	r3, pc, r2
   15240:	movw	r2, #783	; 0x30f
   15244:	bl	127a8 <__assert_fail@plt>
   15248:	ldr	r0, [fp, #-4]
   1524c:	ldrh	r1, [fp, #-14]
   15250:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   15254:	ldr	r0, [fp, #-4]
   15258:	ldr	r1, [fp, #-12]
   1525c:	ldrh	r2, [fp, #-14]
   15260:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   15264:	str	r0, [fp, #-20]	; 0xffffffec
   15268:	movw	r0, #0
   1526c:	str	r0, [sp, #4]
   15270:	str	r0, [sp, #8]
   15274:	ldr	r0, [fp, #-12]
   15278:	cmp	r0, #0
   1527c:	bls	152c0 <flatcc_builder_create_struct@@Base+0xc4>
   15280:	ldr	r0, [fp, #-12]
   15284:	ldr	r1, [sp, #4]
   15288:	add	r0, r1, r0
   1528c:	str	r0, [sp, #4]
   15290:	ldr	r0, [fp, #-8]
   15294:	add	r1, sp, #4
   15298:	add	r1, r1, #8
   1529c:	ldr	r2, [sp, #8]
   152a0:	str	r0, [r1, r2, lsl #3]
   152a4:	ldr	r0, [fp, #-12]
   152a8:	ldr	r2, [sp, #8]
   152ac:	add	r1, r1, r2, lsl #3
   152b0:	str	r0, [r1, #4]
   152b4:	ldr	r0, [sp, #8]
   152b8:	add	r0, r0, #1
   152bc:	str	r0, [sp, #8]
   152c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   152c4:	cmp	r0, #0
   152c8:	bls	15310 <flatcc_builder_create_struct@@Base+0x114>
   152cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   152d0:	ldr	r1, [sp, #4]
   152d4:	add	r0, r1, r0
   152d8:	str	r0, [sp, #4]
   152dc:	add	r0, sp, #4
   152e0:	add	r0, r0, #8
   152e4:	ldr	r1, [sp, #8]
   152e8:	ldr	r2, [pc, #64]	; 15330 <flatcc_builder_create_struct@@Base+0x134>
   152ec:	ldr	r2, [pc, r2]
   152f0:	str	r2, [r0, r1, lsl #3]
   152f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   152f8:	ldr	r2, [sp, #8]
   152fc:	add	r0, r0, r2, lsl #3
   15300:	str	r1, [r0, #4]
   15304:	ldr	r0, [sp, #8]
   15308:	add	r0, r0, #1
   1530c:	str	r0, [sp, #8]
   15310:	ldr	r0, [fp, #-4]
   15314:	add	r1, sp, #4
   15318:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   1531c:	mov	sp, fp
   15320:	pop	{fp, pc}
   15324:	andeq	r8, r0, pc, lsl r8
   15328:	andeq	r8, r0, r2, asr #12
   1532c:	andeq	r8, r0, sl, lsl r8
   15330:	andeq	sl, r1, r0, asr sp

00015334 <flatcc_builder_start_buffer@@Base>:
   15334:	push	{fp, lr}
   15338:	mov	fp, sp
   1533c:	sub	sp, sp, #32
   15340:	str	r0, [fp, #-8]
   15344:	str	r1, [fp, #-12]
   15348:	strh	r2, [fp, #-14]
   1534c:	str	r3, [sp, #12]
   15350:	ldr	r0, [fp, #-8]
   15354:	ldr	r1, [fp, #-8]
   15358:	ldrh	r1, [r1, #128]	; 0x80
   1535c:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   15360:	cmp	r0, #0
   15364:	beq	15374 <flatcc_builder_start_buffer@@Base+0x40>
   15368:	mvn	r0, #0
   1536c:	str	r0, [fp, #-4]
   15370:	b	1549c <flatcc_builder_start_buffer@@Base+0x168>
   15374:	ldr	r0, [fp, #-8]
   15378:	movw	r1, #1
   1537c:	strh	r1, [r0, #128]	; 0x80
   15380:	ldr	r0, [fp, #-8]
   15384:	ldrh	r0, [r0, #132]	; 0x84
   15388:	ldr	r1, [fp, #-8]
   1538c:	ldr	r1, [r1, #32]
   15390:	strh	r0, [r1, #34]	; 0x22
   15394:	ldrh	r0, [fp, #-14]
   15398:	ldr	r1, [fp, #-8]
   1539c:	strh	r0, [r1, #132]	; 0x84
   153a0:	ldr	r0, [fp, #-8]
   153a4:	ldrh	r0, [r0, #164]	; 0xa4
   153a8:	ldr	r1, [fp, #-8]
   153ac:	ldr	r1, [r1, #32]
   153b0:	strh	r0, [r1, #32]
   153b4:	ldr	r0, [sp, #12]
   153b8:	ldr	r1, [fp, #-8]
   153bc:	strh	r0, [r1, #164]	; 0xa4
   153c0:	ldr	r0, [fp, #-8]
   153c4:	ldr	r0, [r0, #144]	; 0x90
   153c8:	ldr	r1, [fp, #-8]
   153cc:	ldr	r1, [r1, #32]
   153d0:	str	r0, [r1, #20]
   153d4:	ldr	r0, [fp, #-8]
   153d8:	ldr	r0, [r0, #152]	; 0x98
   153dc:	ldr	r1, [fp, #-8]
   153e0:	ldr	r1, [r1, #32]
   153e4:	str	r0, [r1, #28]
   153e8:	ldr	r0, [fp, #-8]
   153ec:	ldr	r0, [r0, #136]	; 0x88
   153f0:	ldr	r1, [fp, #-8]
   153f4:	str	r0, [r1, #144]	; 0x90
   153f8:	ldr	r0, [fp, #-8]
   153fc:	ldr	r1, [r0, #148]	; 0x94
   15400:	add	r2, r1, #1
   15404:	str	r2, [r0, #148]	; 0x94
   15408:	ldr	r0, [fp, #-8]
   1540c:	str	r1, [r0, #152]	; 0x98
   15410:	ldr	r0, [fp, #-8]
   15414:	ldr	r0, [r0, #168]	; 0xa8
   15418:	ldr	r1, [fp, #-8]
   1541c:	ldr	r1, [r1, #32]
   15420:	str	r0, [r1, #16]
   15424:	ldr	r0, [fp, #-8]
   15428:	add	r0, r0, #168	; 0xa8
   1542c:	ldr	r1, [fp, #-12]
   15430:	movw	r2, #0
   15434:	cmp	r1, r2
   15438:	str	r0, [sp, #8]
   1543c:	beq	1544c <flatcc_builder_start_buffer@@Base+0x118>
   15440:	ldr	r0, [fp, #-12]
   15444:	str	r0, [sp, #4]
   15448:	b	1545c <flatcc_builder_start_buffer@@Base+0x128>
   1544c:	ldr	r0, [pc, #84]	; 154a8 <flatcc_builder_start_buffer@@Base+0x174>
   15450:	ldr	r0, [pc, r0]
   15454:	str	r0, [sp, #4]
   15458:	b	1545c <flatcc_builder_start_buffer@@Base+0x128>
   1545c:	ldr	r0, [sp, #4]
   15460:	ldrb	r1, [r0]
   15464:	ldr	r2, [sp, #8]
   15468:	strb	r1, [r2]
   1546c:	ldrb	r1, [r0, #1]
   15470:	strb	r1, [r2, #1]
   15474:	ldrb	r1, [r0, #2]
   15478:	strb	r1, [r2, #2]
   1547c:	ldrb	r0, [r0, #3]
   15480:	strb	r0, [r2, #3]
   15484:	ldr	r0, [fp, #-8]
   15488:	ldr	r0, [r0, #32]
   1548c:	movw	r1, #1
   15490:	strh	r1, [r0, #14]
   15494:	movw	r0, #0
   15498:	str	r0, [fp, #-4]
   1549c:	ldr	r0, [fp, #-4]
   154a0:	mov	sp, fp
   154a4:	pop	{fp, pc}
   154a8:	andeq	sl, r1, ip, ror #23
   154ac:	push	{fp, lr}
   154b0:	mov	fp, sp
   154b4:	sub	sp, sp, #24
   154b8:	str	r0, [fp, #-8]
   154bc:	strh	r1, [fp, #-10]
   154c0:	ldr	r0, [fp, #-8]
   154c4:	ldr	r1, [r0, #156]	; 0x9c
   154c8:	add	r1, r1, #1
   154cc:	str	r1, [r0, #156]	; 0x9c
   154d0:	ldr	r0, [fp, #-8]
   154d4:	ldr	r0, [r0, #160]	; 0xa0
   154d8:	cmp	r1, r0
   154dc:	ble	155c8 <flatcc_builder_start_buffer@@Base+0x294>
   154e0:	ldr	r0, [fp, #-8]
   154e4:	ldr	r0, [r0, #176]	; 0xb0
   154e8:	cmp	r0, #0
   154ec:	ble	15514 <flatcc_builder_start_buffer@@Base+0x1e0>
   154f0:	ldr	r0, [fp, #-8]
   154f4:	ldr	r0, [r0, #156]	; 0x9c
   154f8:	ldr	r1, [fp, #-8]
   154fc:	ldr	r1, [r1, #176]	; 0xb0
   15500:	cmp	r0, r1
   15504:	ble	15514 <flatcc_builder_start_buffer@@Base+0x1e0>
   15508:	mvn	r0, #0
   1550c:	str	r0, [fp, #-4]
   15510:	b	1566c <flatcc_builder_start_buffer@@Base+0x338>
   15514:	ldr	r0, [fp, #-8]
   15518:	ldr	r1, [fp, #-8]
   1551c:	ldr	r1, [r1, #156]	; 0x9c
   15520:	sub	r1, r1, #1
   15524:	movw	r2, #36	; 0x24
   15528:	mul	r1, r1, r2
   1552c:	movw	r3, #4
   15530:	str	r1, [sp, #8]
   15534:	mov	r1, r3
   15538:	ldr	r3, [sp, #8]
   1553c:	str	r2, [sp, #4]
   15540:	mov	r2, r3
   15544:	ldr	r3, [sp, #4]
   15548:	movw	ip, #0
   1554c:	str	ip, [sp]
   15550:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15554:	ldr	r1, [fp, #-8]
   15558:	str	r0, [r1, #32]
   1555c:	movw	r1, #0
   15560:	cmp	r0, r1
   15564:	bne	15574 <flatcc_builder_start_buffer@@Base+0x240>
   15568:	mvn	r0, #0
   1556c:	str	r0, [fp, #-4]
   15570:	b	1566c <flatcc_builder_start_buffer@@Base+0x338>
   15574:	ldr	r0, [fp, #-8]
   15578:	ldr	r0, [r0, #88]	; 0x58
   1557c:	movw	r1, #36	; 0x24
   15580:	udiv	r0, r0, r1
   15584:	ldr	r1, [fp, #-8]
   15588:	str	r0, [r1, #160]	; 0xa0
   1558c:	ldr	r0, [fp, #-8]
   15590:	ldr	r0, [r0, #176]	; 0xb0
   15594:	cmp	r0, #0
   15598:	ble	155c4 <flatcc_builder_start_buffer@@Base+0x290>
   1559c:	ldr	r0, [fp, #-8]
   155a0:	ldr	r0, [r0, #176]	; 0xb0
   155a4:	ldr	r1, [fp, #-8]
   155a8:	ldr	r1, [r1, #160]	; 0xa0
   155ac:	cmp	r0, r1
   155b0:	bge	155c4 <flatcc_builder_start_buffer@@Base+0x290>
   155b4:	ldr	r0, [fp, #-8]
   155b8:	ldr	r0, [r0, #176]	; 0xb0
   155bc:	ldr	r1, [fp, #-8]
   155c0:	str	r0, [r1, #160]	; 0xa0
   155c4:	b	155d8 <flatcc_builder_start_buffer@@Base+0x2a4>
   155c8:	ldr	r0, [fp, #-8]
   155cc:	ldr	r1, [r0, #32]
   155d0:	add	r1, r1, #36	; 0x24
   155d4:	str	r1, [r0, #32]
   155d8:	ldr	r0, [fp, #-8]
   155dc:	ldr	r0, [r0, #20]
   155e0:	ldr	r1, [fp, #-8]
   155e4:	ldr	r1, [r1, #32]
   155e8:	str	r0, [r1, #8]
   155ec:	ldr	r0, [fp, #-8]
   155f0:	ldrh	r0, [r0, #130]	; 0x82
   155f4:	ldr	r1, [fp, #-8]
   155f8:	ldr	r1, [r1, #32]
   155fc:	strh	r0, [r1, #12]
   15600:	ldrh	r0, [fp, #-10]
   15604:	ldr	r1, [fp, #-8]
   15608:	strh	r0, [r1, #130]	; 0x82
   1560c:	ldr	r0, [fp, #-8]
   15610:	ldr	r0, [r0, #28]
   15614:	ldr	r1, [fp, #-8]
   15618:	ldr	r1, [r1, #32]
   1561c:	str	r0, [r1]
   15620:	ldr	r0, [fp, #-8]
   15624:	ldr	r0, [r0, #32]
   15628:	mvn	r1, #3
   1562c:	str	r1, [r0, #4]
   15630:	ldr	r0, [fp, #-8]
   15634:	ldr	r0, [r0, #28]
   15638:	ldr	r1, [fp, #-8]
   1563c:	ldr	r1, [r1, #20]
   15640:	add	r0, r0, r1
   15644:	add	r0, r0, #8
   15648:	sub	r0, r0, #1
   1564c:	mvn	r1, #7
   15650:	and	r0, r0, r1
   15654:	ldr	r1, [fp, #-8]
   15658:	str	r0, [r1, #28]
   1565c:	ldr	r0, [fp, #-8]
   15660:	movw	r1, #0
   15664:	str	r1, [r0, #20]
   15668:	str	r1, [fp, #-4]
   1566c:	ldr	r0, [fp, #-4]
   15670:	mov	sp, fp
   15674:	pop	{fp, pc}

00015678 <flatcc_builder_end_buffer@@Base>:
   15678:	push	{r4, sl, fp, lr}
   1567c:	add	fp, sp, #8
   15680:	sub	sp, sp, #32
   15684:	str	r0, [fp, #-16]
   15688:	str	r1, [sp, #20]
   1568c:	ldr	r0, [fp, #-16]
   15690:	ldrh	r0, [r0, #164]	; 0xa4
   15694:	and	r0, r0, #2
   15698:	str	r0, [sp, #12]
   1569c:	ldr	r0, [fp, #-16]
   156a0:	ldr	r0, [r0, #152]	; 0x98
   156a4:	cmp	r0, #0
   156a8:	movw	r0, #0
   156ac:	moveq	r0, #1
   156b0:	tst	r0, #1
   156b4:	movw	r0, #0
   156b8:	moveq	r0, #1
   156bc:	ldr	r1, [sp, #12]
   156c0:	orr	r0, r1, r0
   156c4:	str	r0, [sp, #12]
   156c8:	ldr	r0, [fp, #-16]
   156cc:	ldr	r0, [r0, #32]
   156d0:	ldrh	r0, [r0, #14]
   156d4:	cmp	r0, #1
   156d8:	bne	156e0 <flatcc_builder_end_buffer@@Base+0x68>
   156dc:	b	15700 <flatcc_builder_end_buffer@@Base+0x88>
   156e0:	ldr	r0, [pc, #244]	; 157dc <flatcc_builder_end_buffer@@Base+0x164>
   156e4:	add	r0, pc, r0
   156e8:	ldr	r1, [pc, #240]	; 157e0 <flatcc_builder_end_buffer@@Base+0x168>
   156ec:	add	r1, pc, r1
   156f0:	ldr	r2, [pc, #236]	; 157e4 <flatcc_builder_end_buffer@@Base+0x16c>
   156f4:	add	r3, pc, r2
   156f8:	movw	r2, #838	; 0x346
   156fc:	bl	127a8 <__assert_fail@plt>
   15700:	ldr	r0, [fp, #-16]
   15704:	ldr	r1, [fp, #-16]
   15708:	ldrh	r1, [r1, #132]	; 0x84
   1570c:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   15710:	ldr	r0, [fp, #-16]
   15714:	ldr	r1, [fp, #-16]
   15718:	add	r1, r1, #168	; 0xa8
   1571c:	ldr	lr, [fp, #-16]
   15720:	ldrh	lr, [lr, #132]	; 0x84
   15724:	ldr	r3, [sp, #20]
   15728:	ldr	r2, [fp, #-16]
   1572c:	ldrh	r2, [r2, #128]	; 0x80
   15730:	ldr	ip, [sp, #12]
   15734:	uxth	lr, lr
   15738:	str	r2, [sp, #8]
   1573c:	mov	r2, lr
   15740:	ldr	lr, [sp, #8]
   15744:	uxth	r4, lr
   15748:	str	r4, [sp]
   1574c:	str	ip, [sp, #4]
   15750:	bl	14e0c <flatcc_builder_create_buffer@@Base>
   15754:	str	r0, [sp, #16]
   15758:	movw	r1, #0
   1575c:	cmp	r1, r0
   15760:	bne	15770 <flatcc_builder_end_buffer@@Base+0xf8>
   15764:	movw	r0, #0
   15768:	str	r0, [fp, #-12]
   1576c:	b	157d0 <flatcc_builder_end_buffer@@Base+0x158>
   15770:	ldr	r0, [fp, #-16]
   15774:	ldr	r0, [r0, #32]
   15778:	ldr	r0, [r0, #20]
   1577c:	ldr	r1, [fp, #-16]
   15780:	str	r0, [r1, #144]	; 0x90
   15784:	ldr	r0, [fp, #-16]
   15788:	ldr	r0, [r0, #32]
   1578c:	ldr	r0, [r0, #28]
   15790:	ldr	r1, [fp, #-16]
   15794:	str	r0, [r1, #152]	; 0x98
   15798:	ldr	r0, [fp, #-16]
   1579c:	ldr	r0, [r0, #32]
   157a0:	ldr	r0, [r0, #16]
   157a4:	ldr	r1, [fp, #-16]
   157a8:	str	r0, [r1, #168]	; 0xa8
   157ac:	ldr	r0, [fp, #-16]
   157b0:	ldr	r0, [r0, #32]
   157b4:	ldrh	r0, [r0, #32]
   157b8:	ldr	r1, [fp, #-16]
   157bc:	strh	r0, [r1, #164]	; 0xa4
   157c0:	ldr	r0, [fp, #-16]
   157c4:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   157c8:	ldr	r0, [sp, #16]
   157cc:	str	r0, [fp, #-12]
   157d0:	ldr	r0, [fp, #-12]
   157d4:	sub	sp, fp, #8
   157d8:	pop	{r4, sl, fp, pc}
   157dc:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   157e0:	andeq	r8, r0, sl, lsl #3
   157e4:	strdeq	r8, [r0], -r4
   157e8:	push	{fp, lr}
   157ec:	mov	fp, sp
   157f0:	sub	sp, sp, #8
   157f4:	str	r0, [sp, #4]
   157f8:	ldr	r0, [sp, #4]
   157fc:	ldr	r0, [r0, #16]
   15800:	ldr	r1, [sp, #4]
   15804:	ldr	r2, [r1, #20]
   15808:	movw	r1, #0
   1580c:	and	r1, r1, #255	; 0xff
   15810:	bl	12778 <memset@plt>
   15814:	ldr	r0, [sp, #4]
   15818:	ldr	r0, [r0, #32]
   1581c:	ldr	r0, [r0, #8]
   15820:	ldr	r1, [sp, #4]
   15824:	str	r0, [r1, #20]
   15828:	ldr	r0, [sp, #4]
   1582c:	ldr	r0, [r0, #32]
   15830:	ldr	r0, [r0]
   15834:	ldr	r1, [sp, #4]
   15838:	str	r0, [r1, #28]
   1583c:	ldr	r0, [sp, #4]
   15840:	ldr	r1, [sp, #4]
   15844:	ldr	r1, [r1, #32]
   15848:	ldr	r1, [r1, #4]
   1584c:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   15850:	ldr	r0, [sp, #4]
   15854:	ldr	r1, [sp, #4]
   15858:	ldrh	r1, [r1, #130]	; 0x82
   1585c:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   15860:	ldr	r0, [sp, #4]
   15864:	ldr	r0, [r0, #32]
   15868:	ldrh	r0, [r0, #12]
   1586c:	ldr	r1, [sp, #4]
   15870:	strh	r0, [r1, #130]	; 0x82
   15874:	ldr	r0, [sp, #4]
   15878:	ldr	r1, [r0, #32]
   1587c:	mvn	r2, #35	; 0x23
   15880:	add	r1, r1, r2
   15884:	str	r1, [r0, #32]
   15888:	ldr	r0, [sp, #4]
   1588c:	ldr	r1, [r0, #156]	; 0x9c
   15890:	mvn	r2, #0
   15894:	add	r1, r1, r2
   15898:	str	r1, [r0, #156]	; 0x9c
   1589c:	mov	sp, fp
   158a0:	pop	{fp, pc}

000158a4 <flatcc_builder_start_struct@@Base>:
   158a4:	push	{fp, lr}
   158a8:	mov	fp, sp
   158ac:	sub	sp, sp, #16
   158b0:	str	r0, [sp, #8]
   158b4:	str	r1, [sp, #4]
   158b8:	strh	r2, [sp, #2]
   158bc:	ldr	r0, [sp, #8]
   158c0:	ldrh	r1, [sp, #2]
   158c4:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   158c8:	cmp	r0, #0
   158cc:	beq	158dc <flatcc_builder_start_struct@@Base+0x38>
   158d0:	movw	r0, #0
   158d4:	str	r0, [fp, #-4]
   158d8:	b	15908 <flatcc_builder_start_struct@@Base+0x64>
   158dc:	ldr	r0, [sp, #8]
   158e0:	ldr	r0, [r0, #32]
   158e4:	movw	r1, #2
   158e8:	strh	r1, [r0, #14]
   158ec:	ldr	r0, [sp, #8]
   158f0:	mvn	r1, #3
   158f4:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   158f8:	ldr	r0, [sp, #8]
   158fc:	ldr	r1, [sp, #4]
   15900:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   15904:	str	r0, [fp, #-4]
   15908:	ldr	r0, [fp, #-4]
   1590c:	mov	sp, fp
   15910:	pop	{fp, pc}
   15914:	sub	sp, sp, #12
   15918:	str	r0, [sp, #8]
   1591c:	str	r1, [sp, #4]
   15920:	ldr	r0, [sp, #8]
   15924:	add	r0, r0, #52	; 0x34
   15928:	add	r0, r0, #8
   1592c:	str	r0, [sp]
   15930:	ldr	r0, [sp, #8]
   15934:	ldr	r0, [r0, #60]	; 0x3c
   15938:	ldr	r1, [sp, #8]
   1593c:	ldr	r1, [r1, #28]
   15940:	add	r0, r0, r1
   15944:	ldr	r1, [sp, #8]
   15948:	str	r0, [r1, #16]
   1594c:	ldr	r0, [sp]
   15950:	ldr	r0, [r0, #4]
   15954:	ldr	r1, [sp, #8]
   15958:	ldr	r1, [r1, #28]
   1595c:	sub	r0, r0, r1
   15960:	ldr	r1, [sp, #8]
   15964:	str	r0, [r1, #24]
   15968:	ldr	r0, [sp, #8]
   1596c:	ldr	r0, [r0, #24]
   15970:	ldr	r1, [sp, #4]
   15974:	cmp	r0, r1
   15978:	bls	15988 <flatcc_builder_start_struct@@Base+0xe4>
   1597c:	ldr	r0, [sp, #4]
   15980:	ldr	r1, [sp, #8]
   15984:	str	r0, [r1, #24]
   15988:	ldr	r0, [sp, #4]
   1598c:	ldr	r1, [sp, #8]
   15990:	ldr	r1, [r1, #32]
   15994:	str	r0, [r1, #4]
   15998:	add	sp, sp, #12
   1599c:	bx	lr
   159a0:	push	{fp, lr}
   159a4:	mov	fp, sp
   159a8:	sub	sp, sp, #16
   159ac:	str	r0, [sp, #8]
   159b0:	str	r1, [sp, #4]
   159b4:	ldr	r0, [sp, #8]
   159b8:	ldr	r0, [r0, #20]
   159bc:	str	r0, [sp]
   159c0:	ldr	r0, [sp, #4]
   159c4:	ldr	r1, [sp, #8]
   159c8:	ldr	r2, [r1, #20]
   159cc:	add	r0, r2, r0
   159d0:	str	r0, [r1, #20]
   159d4:	ldr	r1, [sp, #8]
   159d8:	ldr	r1, [r1, #24]
   159dc:	cmp	r0, r1
   159e0:	bcc	15a14 <flatcc_builder_start_struct@@Base+0x170>
   159e4:	ldr	r0, [sp, #8]
   159e8:	ldr	r1, [sp, #8]
   159ec:	ldr	r1, [r1, #20]
   159f0:	add	r1, r1, #1
   159f4:	mvn	r2, #3
   159f8:	bl	19b10 <flatcc_builder_get_emit_context@@Base+0x40>
   159fc:	cmp	r0, #0
   15a00:	beq	15a10 <flatcc_builder_start_struct@@Base+0x16c>
   15a04:	movw	r0, #0
   15a08:	str	r0, [fp, #-4]
   15a0c:	b	15a28 <flatcc_builder_start_struct@@Base+0x184>
   15a10:	b	15a14 <flatcc_builder_start_struct@@Base+0x170>
   15a14:	ldr	r0, [sp, #8]
   15a18:	ldr	r0, [r0, #16]
   15a1c:	ldr	r1, [sp]
   15a20:	add	r0, r0, r1
   15a24:	str	r0, [fp, #-4]
   15a28:	ldr	r0, [fp, #-4]
   15a2c:	mov	sp, fp
   15a30:	pop	{fp, pc}

00015a34 <flatcc_builder_struct_edit@@Base>:
   15a34:	sub	sp, sp, #4
   15a38:	str	r0, [sp]
   15a3c:	ldr	r0, [sp]
   15a40:	ldr	r0, [r0, #16]
   15a44:	add	sp, sp, #4
   15a48:	bx	lr

00015a4c <flatcc_builder_end_struct@@Base>:
   15a4c:	push	{fp, lr}
   15a50:	mov	fp, sp
   15a54:	sub	sp, sp, #16
   15a58:	str	r0, [sp, #8]
   15a5c:	ldr	r0, [sp, #8]
   15a60:	ldr	r0, [r0, #32]
   15a64:	ldrh	r0, [r0, #14]
   15a68:	cmp	r0, #2
   15a6c:	bne	15a74 <flatcc_builder_end_struct@@Base+0x28>
   15a70:	b	15a94 <flatcc_builder_end_struct@@Base+0x48>
   15a74:	ldr	r0, [pc, #112]	; 15aec <flatcc_builder_end_struct@@Base+0xa0>
   15a78:	add	r0, pc, r0
   15a7c:	ldr	r1, [pc, #108]	; 15af0 <flatcc_builder_end_struct@@Base+0xa4>
   15a80:	add	r1, pc, r1
   15a84:	ldr	r2, [pc, #104]	; 15af4 <flatcc_builder_end_struct@@Base+0xa8>
   15a88:	add	r3, pc, r2
   15a8c:	movw	r2, #872	; 0x368
   15a90:	bl	127a8 <__assert_fail@plt>
   15a94:	ldr	r0, [sp, #8]
   15a98:	ldr	r1, [sp, #8]
   15a9c:	ldr	r1, [r1, #16]
   15aa0:	ldr	r2, [sp, #8]
   15aa4:	ldr	r2, [r2, #20]
   15aa8:	ldr	r3, [sp, #8]
   15aac:	ldrh	r3, [r3, #130]	; 0x82
   15ab0:	bl	151fc <flatcc_builder_create_struct@@Base>
   15ab4:	str	r0, [sp, #4]
   15ab8:	movw	r1, #0
   15abc:	cmp	r1, r0
   15ac0:	bne	15ad0 <flatcc_builder_end_struct@@Base+0x84>
   15ac4:	movw	r0, #0
   15ac8:	str	r0, [fp, #-4]
   15acc:	b	15ae0 <flatcc_builder_end_struct@@Base+0x94>
   15ad0:	ldr	r0, [sp, #8]
   15ad4:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   15ad8:	ldr	r0, [sp, #4]
   15adc:	str	r0, [fp, #-4]
   15ae0:	ldr	r0, [fp, #-4]
   15ae4:	mov	sp, fp
   15ae8:	pop	{fp, pc}
   15aec:	andeq	r8, r0, r9, asr #1
   15af0:	strdeq	r7, [r0], -r6
   15af4:	andeq	r8, r0, r5, ror #1

00015af8 <flatcc_builder_extend_vector@@Base>:
   15af8:	push	{fp, lr}
   15afc:	mov	fp, sp
   15b00:	sub	sp, sp, #16
   15b04:	str	r0, [sp, #8]
   15b08:	str	r1, [sp, #4]
   15b0c:	ldr	r0, [sp, #8]
   15b10:	ldr	r1, [sp, #4]
   15b14:	ldr	r2, [sp, #8]
   15b18:	ldr	r2, [r2, #32]
   15b1c:	ldr	r2, [r2, #24]
   15b20:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   15b24:	cmp	r0, #0
   15b28:	beq	15b38 <flatcc_builder_extend_vector@@Base+0x40>
   15b2c:	movw	r0, #0
   15b30:	str	r0, [fp, #-4]
   15b34:	b	15b58 <flatcc_builder_extend_vector@@Base+0x60>
   15b38:	ldr	r0, [sp, #8]
   15b3c:	ldr	r1, [sp, #8]
   15b40:	ldr	r1, [r1, #32]
   15b44:	ldr	r1, [r1, #16]
   15b48:	ldr	r2, [sp, #4]
   15b4c:	mul	r1, r1, r2
   15b50:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   15b54:	str	r0, [fp, #-4]
   15b58:	ldr	r0, [fp, #-4]
   15b5c:	mov	sp, fp
   15b60:	pop	{fp, pc}
   15b64:	push	{fp, lr}
   15b68:	mov	fp, sp
   15b6c:	sub	sp, sp, #24
   15b70:	str	r0, [fp, #-8]
   15b74:	str	r1, [sp, #12]
   15b78:	str	r2, [sp, #8]
   15b7c:	ldr	r0, [fp, #-8]
   15b80:	ldr	r0, [r0, #32]
   15b84:	ldr	r0, [r0, #20]
   15b88:	str	r0, [sp, #4]
   15b8c:	ldr	r0, [sp, #4]
   15b90:	ldr	r1, [sp, #12]
   15b94:	add	r0, r0, r1
   15b98:	str	r0, [sp]
   15b9c:	ldr	r0, [sp, #4]
   15ba0:	ldr	r1, [sp]
   15ba4:	cmp	r0, r1
   15ba8:	bhi	15bbc <flatcc_builder_extend_vector@@Base+0xc4>
   15bac:	ldr	r0, [sp]
   15bb0:	ldr	r1, [sp, #8]
   15bb4:	cmp	r0, r1
   15bb8:	bls	15c0c <flatcc_builder_extend_vector@@Base+0x114>
   15bbc:	ldr	r0, [sp, #4]
   15bc0:	ldr	r1, [sp]
   15bc4:	cmp	r0, r1
   15bc8:	bhi	15be0 <flatcc_builder_extend_vector@@Base+0xe8>
   15bcc:	ldr	r0, [sp]
   15bd0:	ldr	r1, [sp, #8]
   15bd4:	cmp	r0, r1
   15bd8:	bhi	15be0 <flatcc_builder_extend_vector@@Base+0xe8>
   15bdc:	b	15c00 <flatcc_builder_extend_vector@@Base+0x108>
   15be0:	ldr	r0, [pc, #72]	; 15c30 <flatcc_builder_extend_vector@@Base+0x138>
   15be4:	add	r0, pc, r0
   15be8:	ldr	r1, [pc, #68]	; 15c34 <flatcc_builder_extend_vector@@Base+0x13c>
   15bec:	add	r1, pc, r1
   15bf0:	ldr	r2, [pc, #64]	; 15c38 <flatcc_builder_extend_vector@@Base+0x140>
   15bf4:	add	r3, pc, r2
   15bf8:	movw	r2, #892	; 0x37c
   15bfc:	bl	127a8 <__assert_fail@plt>
   15c00:	mvn	r0, #0
   15c04:	str	r0, [fp, #-4]
   15c08:	b	15c24 <flatcc_builder_extend_vector@@Base+0x12c>
   15c0c:	ldr	r0, [sp]
   15c10:	ldr	r1, [fp, #-8]
   15c14:	ldr	r1, [r1, #32]
   15c18:	str	r0, [r1, #20]
   15c1c:	movw	r0, #0
   15c20:	str	r0, [fp, #-4]
   15c24:	ldr	r0, [fp, #-4]
   15c28:	mov	sp, fp
   15c2c:	pop	{fp, pc}
   15c30:	andeq	r8, r0, r8, asr sp
   15c34:	andeq	r7, r0, sl, lsl #25
   15c38:	andeq	r8, r0, r3, ror #26

00015c3c <flatcc_builder_vector_push@@Base>:
   15c3c:	push	{fp, lr}
   15c40:	mov	fp, sp
   15c44:	sub	sp, sp, #16
   15c48:	str	r0, [sp, #8]
   15c4c:	str	r1, [sp, #4]
   15c50:	ldr	r0, [sp, #8]
   15c54:	ldr	r0, [r0, #32]
   15c58:	ldrh	r0, [r0, #14]
   15c5c:	cmp	r0, #4
   15c60:	bne	15c68 <flatcc_builder_vector_push@@Base+0x2c>
   15c64:	b	15c88 <flatcc_builder_vector_push@@Base+0x4c>
   15c68:	ldr	r0, [pc, #196]	; 15d34 <flatcc_builder_vector_push@@Base+0xf8>
   15c6c:	add	r0, pc, r0
   15c70:	ldr	r1, [pc, #192]	; 15d38 <flatcc_builder_vector_push@@Base+0xfc>
   15c74:	add	r1, pc, r1
   15c78:	ldr	r2, [pc, #188]	; 15d3c <flatcc_builder_vector_push@@Base+0x100>
   15c7c:	add	r3, pc, r2
   15c80:	movw	r2, #907	; 0x38b
   15c84:	bl	127a8 <__assert_fail@plt>
   15c88:	ldr	r0, [sp, #8]
   15c8c:	ldr	r0, [r0, #32]
   15c90:	ldr	r0, [r0, #20]
   15c94:	ldr	r1, [sp, #8]
   15c98:	ldr	r1, [r1, #32]
   15c9c:	ldr	r1, [r1, #24]
   15ca0:	cmp	r0, r1
   15ca4:	bls	15cf8 <flatcc_builder_vector_push@@Base+0xbc>
   15ca8:	ldr	r0, [sp, #8]
   15cac:	ldr	r0, [r0, #32]
   15cb0:	ldr	r0, [r0, #20]
   15cb4:	ldr	r1, [sp, #8]
   15cb8:	ldr	r1, [r1, #32]
   15cbc:	ldr	r1, [r1, #24]
   15cc0:	cmp	r0, r1
   15cc4:	bhi	15ccc <flatcc_builder_vector_push@@Base+0x90>
   15cc8:	b	15cec <flatcc_builder_vector_push@@Base+0xb0>
   15ccc:	ldr	r0, [pc, #108]	; 15d40 <flatcc_builder_vector_push@@Base+0x104>
   15cd0:	add	r0, pc, r0
   15cd4:	ldr	r1, [pc, #104]	; 15d44 <flatcc_builder_vector_push@@Base+0x108>
   15cd8:	add	r1, pc, r1
   15cdc:	ldr	r2, [pc, #100]	; 15d48 <flatcc_builder_vector_push@@Base+0x10c>
   15ce0:	add	r3, pc, r2
   15ce4:	movw	r2, #908	; 0x38c
   15ce8:	bl	127a8 <__assert_fail@plt>
   15cec:	movw	r0, #0
   15cf0:	str	r0, [fp, #-4]
   15cf4:	b	15d28 <flatcc_builder_vector_push@@Base+0xec>
   15cf8:	ldr	r0, [sp, #8]
   15cfc:	ldr	r0, [r0, #32]
   15d00:	ldr	r1, [r0, #20]
   15d04:	add	r1, r1, #1
   15d08:	str	r1, [r0, #20]
   15d0c:	ldr	r0, [sp, #8]
   15d10:	ldr	r1, [sp, #4]
   15d14:	ldr	r2, [sp, #8]
   15d18:	ldr	r2, [r2, #32]
   15d1c:	ldr	r2, [r2, #16]
   15d20:	bl	15d4c <flatcc_builder_vector_push@@Base+0x110>
   15d24:	str	r0, [fp, #-4]
   15d28:	ldr	r0, [fp, #-4]
   15d2c:	mov	sp, fp
   15d30:	pop	{fp, pc}
   15d34:	andeq	r7, r0, r4, asr #30
   15d38:	andeq	r7, r0, r2, lsl #24
   15d3c:	andeq	r7, r0, r0, ror #30
   15d40:	andeq	r7, r0, pc, asr #30
   15d44:	muleq	r0, lr, fp
   15d48:	strdeq	r7, [r0], -ip
   15d4c:	push	{fp, lr}
   15d50:	mov	fp, sp
   15d54:	sub	sp, sp, #24
   15d58:	str	r0, [fp, #-8]
   15d5c:	str	r1, [sp, #12]
   15d60:	str	r2, [sp, #8]
   15d64:	ldr	r0, [fp, #-8]
   15d68:	ldr	r1, [sp, #8]
   15d6c:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   15d70:	str	r0, [sp, #4]
   15d74:	movw	r1, #0
   15d78:	cmp	r0, r1
   15d7c:	bne	15d8c <flatcc_builder_vector_push@@Base+0x150>
   15d80:	movw	r0, #0
   15d84:	str	r0, [fp, #-4]
   15d88:	b	15da4 <flatcc_builder_vector_push@@Base+0x168>
   15d8c:	ldr	r0, [sp, #4]
   15d90:	ldr	r1, [sp, #12]
   15d94:	ldr	r2, [sp, #8]
   15d98:	bl	12718 <memcpy@plt>
   15d9c:	ldr	r0, [sp, #4]
   15da0:	str	r0, [fp, #-4]
   15da4:	ldr	r0, [fp, #-4]
   15da8:	mov	sp, fp
   15dac:	pop	{fp, pc}

00015db0 <flatcc_builder_append_vector@@Base>:
   15db0:	push	{fp, lr}
   15db4:	mov	fp, sp
   15db8:	sub	sp, sp, #16
   15dbc:	str	r0, [sp, #8]
   15dc0:	str	r1, [sp, #4]
   15dc4:	str	r2, [sp]
   15dc8:	ldr	r0, [sp, #8]
   15dcc:	ldr	r0, [r0, #32]
   15dd0:	ldrh	r0, [r0, #14]
   15dd4:	cmp	r0, #4
   15dd8:	bne	15de0 <flatcc_builder_append_vector@@Base+0x30>
   15ddc:	b	15e00 <flatcc_builder_append_vector@@Base+0x50>
   15de0:	ldr	r0, [pc, #116]	; 15e5c <flatcc_builder_append_vector@@Base+0xac>
   15de4:	add	r0, pc, r0
   15de8:	ldr	r1, [pc, #112]	; 15e60 <flatcc_builder_append_vector@@Base+0xb0>
   15dec:	add	r1, pc, r1
   15df0:	ldr	r2, [pc, #108]	; 15e64 <flatcc_builder_append_vector@@Base+0xb4>
   15df4:	add	r3, pc, r2
   15df8:	movw	r2, #915	; 0x393
   15dfc:	bl	127a8 <__assert_fail@plt>
   15e00:	ldr	r0, [sp, #8]
   15e04:	ldr	r1, [sp]
   15e08:	ldr	r2, [sp, #8]
   15e0c:	ldr	r2, [r2, #32]
   15e10:	ldr	r2, [r2, #24]
   15e14:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   15e18:	cmp	r0, #0
   15e1c:	beq	15e2c <flatcc_builder_append_vector@@Base+0x7c>
   15e20:	movw	r0, #0
   15e24:	str	r0, [fp, #-4]
   15e28:	b	15e50 <flatcc_builder_append_vector@@Base+0xa0>
   15e2c:	ldr	r0, [sp, #8]
   15e30:	ldr	r1, [sp, #4]
   15e34:	ldr	r2, [sp, #8]
   15e38:	ldr	r2, [r2, #32]
   15e3c:	ldr	r2, [r2, #16]
   15e40:	ldr	r3, [sp]
   15e44:	mul	r2, r2, r3
   15e48:	bl	15d4c <flatcc_builder_vector_push@@Base+0x110>
   15e4c:	str	r0, [fp, #-4]
   15e50:	ldr	r0, [fp, #-4]
   15e54:	mov	sp, fp
   15e58:	pop	{fp, pc}
   15e5c:	andeq	r7, r0, ip, asr #27
   15e60:	andeq	r7, r0, sl, lsl #21
   15e64:	andeq	r7, r0, r8, ror #28

00015e68 <flatcc_builder_extend_offset_vector@@Base>:
   15e68:	push	{fp, lr}
   15e6c:	mov	fp, sp
   15e70:	sub	sp, sp, #16
   15e74:	ldr	r2, [pc, #68]	; 15ec0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   15e78:	str	r0, [sp, #8]
   15e7c:	str	r1, [sp, #4]
   15e80:	ldr	r0, [sp, #8]
   15e84:	ldr	r1, [sp, #4]
   15e88:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   15e8c:	cmp	r0, #0
   15e90:	beq	15ea0 <flatcc_builder_extend_offset_vector@@Base+0x38>
   15e94:	movw	r0, #0
   15e98:	str	r0, [fp, #-4]
   15e9c:	b	15eb4 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   15ea0:	ldr	r0, [sp, #8]
   15ea4:	ldr	r1, [sp, #4]
   15ea8:	lsl	r1, r1, #2
   15eac:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   15eb0:	str	r0, [fp, #-4]
   15eb4:	ldr	r0, [fp, #-4]
   15eb8:	mov	sp, fp
   15ebc:	pop	{fp, pc}
   15ec0:	svccc	0x00ffffff

00015ec4 <flatcc_builder_offset_vector_push@@Base>:
   15ec4:	push	{fp, lr}
   15ec8:	mov	fp, sp
   15ecc:	sub	sp, sp, #16
   15ed0:	str	r0, [sp, #8]
   15ed4:	str	r1, [sp, #4]
   15ed8:	ldr	r0, [sp, #8]
   15edc:	ldr	r0, [r0, #32]
   15ee0:	ldrh	r0, [r0, #14]
   15ee4:	cmp	r0, #5
   15ee8:	bne	15ef0 <flatcc_builder_offset_vector_push@@Base+0x2c>
   15eec:	b	15f10 <flatcc_builder_offset_vector_push@@Base+0x4c>
   15ef0:	ldr	r0, [pc, #152]	; 15f90 <flatcc_builder_offset_vector_push@@Base+0xcc>
   15ef4:	add	r0, pc, r0
   15ef8:	ldr	r1, [pc, #148]	; 15f94 <flatcc_builder_offset_vector_push@@Base+0xd0>
   15efc:	add	r1, pc, r1
   15f00:	ldr	r2, [pc, #144]	; 15f98 <flatcc_builder_offset_vector_push@@Base+0xd4>
   15f04:	add	r3, pc, r2
   15f08:	movw	r2, #934	; 0x3a6
   15f0c:	bl	127a8 <__assert_fail@plt>
   15f10:	ldr	r0, [pc, #132]	; 15f9c <flatcc_builder_offset_vector_push@@Base+0xd8>
   15f14:	ldr	r1, [sp, #8]
   15f18:	ldr	r1, [r1, #32]
   15f1c:	ldr	r1, [r1, #20]
   15f20:	cmp	r1, r0
   15f24:	bne	15f34 <flatcc_builder_offset_vector_push@@Base+0x70>
   15f28:	movw	r0, #0
   15f2c:	str	r0, [fp, #-4]
   15f30:	b	15f84 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15f34:	ldr	r0, [sp, #8]
   15f38:	ldr	r0, [r0, #32]
   15f3c:	ldr	r1, [r0, #20]
   15f40:	add	r1, r1, #1
   15f44:	str	r1, [r0, #20]
   15f48:	ldr	r0, [sp, #8]
   15f4c:	movw	r1, #4
   15f50:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   15f54:	str	r0, [sp]
   15f58:	movw	r1, #0
   15f5c:	cmp	r1, r0
   15f60:	bne	15f70 <flatcc_builder_offset_vector_push@@Base+0xac>
   15f64:	movw	r0, #0
   15f68:	str	r0, [fp, #-4]
   15f6c:	b	15f84 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15f70:	ldr	r0, [sp, #4]
   15f74:	ldr	r1, [sp]
   15f78:	str	r0, [r1]
   15f7c:	ldr	r0, [sp]
   15f80:	str	r0, [fp, #-4]
   15f84:	ldr	r0, [fp, #-4]
   15f88:	mov	sp, fp
   15f8c:	pop	{fp, pc}
   15f90:			; <UNDEFINED> instruction: 0x00007db5
   15f94:	andeq	r7, r0, sl, ror r9
   15f98:	ldrdeq	r7, [r0], -r8
   15f9c:	svccc	0x00ffffff

00015fa0 <flatcc_builder_append_offset_vector@@Base>:
   15fa0:	push	{fp, lr}
   15fa4:	mov	fp, sp
   15fa8:	sub	sp, sp, #16
   15fac:	str	r0, [sp, #8]
   15fb0:	str	r1, [sp, #4]
   15fb4:	str	r2, [sp]
   15fb8:	ldr	r0, [sp, #8]
   15fbc:	ldr	r0, [r0, #32]
   15fc0:	ldrh	r0, [r0, #14]
   15fc4:	cmp	r0, #5
   15fc8:	bne	15fd0 <flatcc_builder_append_offset_vector@@Base+0x30>
   15fcc:	b	15ff0 <flatcc_builder_append_offset_vector@@Base+0x50>
   15fd0:	ldr	r0, [pc, #96]	; 16038 <flatcc_builder_append_offset_vector@@Base+0x98>
   15fd4:	add	r0, pc, r0
   15fd8:	ldr	r1, [pc, #92]	; 1603c <flatcc_builder_append_offset_vector@@Base+0x9c>
   15fdc:	add	r1, pc, r1
   15fe0:	ldr	r2, [pc, #88]	; 16040 <flatcc_builder_append_offset_vector@@Base+0xa0>
   15fe4:	add	r3, pc, r2
   15fe8:	movw	r2, #948	; 0x3b4
   15fec:	bl	127a8 <__assert_fail@plt>
   15ff0:	ldr	r2, [pc, #76]	; 16044 <flatcc_builder_append_offset_vector@@Base+0xa4>
   15ff4:	ldr	r0, [sp, #8]
   15ff8:	ldr	r1, [sp]
   15ffc:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   16000:	cmp	r0, #0
   16004:	beq	16014 <flatcc_builder_append_offset_vector@@Base+0x74>
   16008:	movw	r0, #0
   1600c:	str	r0, [fp, #-4]
   16010:	b	1602c <flatcc_builder_append_offset_vector@@Base+0x8c>
   16014:	ldr	r0, [sp, #8]
   16018:	ldr	r1, [sp, #4]
   1601c:	ldr	r2, [sp]
   16020:	lsl	r2, r2, #2
   16024:	bl	15d4c <flatcc_builder_vector_push@@Base+0x110>
   16028:	str	r0, [fp, #-4]
   1602c:	ldr	r0, [fp, #-4]
   16030:	mov	sp, fp
   16034:	pop	{fp, pc}
   16038:	ldrdeq	r7, [r0], -r5
   1603c:	muleq	r0, sl, r8
   16040:	andeq	r7, r0, sl, asr sp
   16044:	svccc	0x00ffffff

00016048 <flatcc_builder_extend_string@@Base>:
   16048:	push	{fp, lr}
   1604c:	mov	fp, sp
   16050:	sub	sp, sp, #16
   16054:	str	r0, [sp, #8]
   16058:	str	r1, [sp, #4]
   1605c:	ldr	r0, [sp, #8]
   16060:	ldr	r0, [r0, #32]
   16064:	ldrh	r0, [r0, #14]
   16068:	cmp	r0, #6
   1606c:	bne	16074 <flatcc_builder_extend_string@@Base+0x2c>
   16070:	b	16094 <flatcc_builder_extend_string@@Base+0x4c>
   16074:	ldr	r0, [pc, #88]	; 160d4 <flatcc_builder_extend_string@@Base+0x8c>
   16078:	add	r0, pc, r0
   1607c:	ldr	r1, [pc, #84]	; 160d8 <flatcc_builder_extend_string@@Base+0x90>
   16080:	add	r1, pc, r1
   16084:	ldr	r2, [pc, #80]	; 160dc <flatcc_builder_extend_string@@Base+0x94>
   16088:	add	r3, pc, r2
   1608c:	movw	r2, #957	; 0x3bd
   16090:	bl	127a8 <__assert_fail@plt>
   16094:	ldr	r0, [sp, #8]
   16098:	ldr	r1, [sp, #4]
   1609c:	mvn	r2, #0
   160a0:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   160a4:	cmp	r0, #0
   160a8:	beq	160b8 <flatcc_builder_extend_string@@Base+0x70>
   160ac:	movw	r0, #0
   160b0:	str	r0, [fp, #-4]
   160b4:	b	160c8 <flatcc_builder_extend_string@@Base+0x80>
   160b8:	ldr	r0, [sp, #8]
   160bc:	ldr	r1, [sp, #4]
   160c0:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   160c4:	str	r0, [fp, #-4]
   160c8:	ldr	r0, [fp, #-4]
   160cc:	mov	sp, fp
   160d0:	pop	{fp, pc}
   160d4:	andeq	r7, r0, sl, lsr sp
   160d8:	strdeq	r7, [r0], -r6
   160dc:	andeq	r7, r0, r6, asr sp

000160e0 <flatcc_builder_append_string@@Base>:
   160e0:	push	{fp, lr}
   160e4:	mov	fp, sp
   160e8:	sub	sp, sp, #16
   160ec:	str	r0, [sp, #8]
   160f0:	str	r1, [sp, #4]
   160f4:	str	r2, [sp]
   160f8:	ldr	r0, [sp, #8]
   160fc:	ldr	r0, [r0, #32]
   16100:	ldrh	r0, [r0, #14]
   16104:	cmp	r0, #6
   16108:	bne	16110 <flatcc_builder_append_string@@Base+0x30>
   1610c:	b	16130 <flatcc_builder_append_string@@Base+0x50>
   16110:	ldr	r0, [pc, #92]	; 16174 <flatcc_builder_append_string@@Base+0x94>
   16114:	add	r0, pc, r0
   16118:	ldr	r1, [pc, #88]	; 16178 <flatcc_builder_append_string@@Base+0x98>
   1611c:	add	r1, pc, r1
   16120:	ldr	r2, [pc, #84]	; 1617c <flatcc_builder_append_string@@Base+0x9c>
   16124:	add	r3, pc, r2
   16128:	movw	r2, #966	; 0x3c6
   1612c:	bl	127a8 <__assert_fail@plt>
   16130:	ldr	r0, [sp, #8]
   16134:	ldr	r1, [sp]
   16138:	mvn	r2, #0
   1613c:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   16140:	cmp	r0, #0
   16144:	beq	16154 <flatcc_builder_append_string@@Base+0x74>
   16148:	movw	r0, #0
   1614c:	str	r0, [fp, #-4]
   16150:	b	16168 <flatcc_builder_append_string@@Base+0x88>
   16154:	ldr	r0, [sp, #8]
   16158:	ldr	r1, [sp, #4]
   1615c:	ldr	r2, [sp]
   16160:	bl	15d4c <flatcc_builder_vector_push@@Base+0x110>
   16164:	str	r0, [fp, #-4]
   16168:	ldr	r0, [fp, #-4]
   1616c:	mov	sp, fp
   16170:	pop	{fp, pc}
   16174:	muleq	r0, lr, ip
   16178:	andeq	r7, r0, sl, asr r7
   1617c:	strdeq	r7, [r0], -r9

00016180 <flatcc_builder_append_string_str@@Base>:
   16180:	push	{fp, lr}
   16184:	mov	fp, sp
   16188:	sub	sp, sp, #24
   1618c:	str	r0, [fp, #-4]
   16190:	str	r1, [fp, #-8]
   16194:	ldr	r0, [fp, #-4]
   16198:	ldr	r1, [fp, #-8]
   1619c:	ldr	r2, [fp, #-8]
   161a0:	str	r0, [sp, #12]
   161a4:	mov	r0, r2
   161a8:	str	r1, [sp, #8]
   161ac:	bl	12760 <strlen@plt>
   161b0:	ldr	r1, [sp, #12]
   161b4:	str	r0, [sp, #4]
   161b8:	mov	r0, r1
   161bc:	ldr	r1, [sp, #8]
   161c0:	ldr	r2, [sp, #4]
   161c4:	bl	160e0 <flatcc_builder_append_string@@Base>
   161c8:	mov	sp, fp
   161cc:	pop	{fp, pc}

000161d0 <flatcc_builder_append_string_strn@@Base>:
   161d0:	push	{fp, lr}
   161d4:	mov	fp, sp
   161d8:	sub	sp, sp, #24
   161dc:	str	r0, [fp, #-4]
   161e0:	str	r1, [fp, #-8]
   161e4:	str	r2, [sp, #12]
   161e8:	ldr	r0, [fp, #-4]
   161ec:	ldr	r1, [fp, #-8]
   161f0:	ldr	r2, [fp, #-8]
   161f4:	ldr	r3, [sp, #12]
   161f8:	str	r0, [sp, #8]
   161fc:	mov	r0, r2
   16200:	str	r1, [sp, #4]
   16204:	mov	r1, r3
   16208:	bl	1622c <flatcc_builder_append_string_strn@@Base+0x5c>
   1620c:	ldr	r1, [sp, #8]
   16210:	str	r0, [sp]
   16214:	mov	r0, r1
   16218:	ldr	r1, [sp, #4]
   1621c:	ldr	r2, [sp]
   16220:	bl	160e0 <flatcc_builder_append_string@@Base>
   16224:	mov	sp, fp
   16228:	pop	{fp, pc}
   1622c:	push	{fp, lr}
   16230:	mov	fp, sp
   16234:	sub	sp, sp, #16
   16238:	str	r0, [fp, #-4]
   1623c:	str	r1, [sp, #8]
   16240:	ldr	r0, [fp, #-4]
   16244:	ldr	r2, [sp, #8]
   16248:	mov	r1, #0
   1624c:	bl	12790 <memchr@plt>
   16250:	str	r0, [sp, #4]
   16254:	ldr	r0, [sp, #4]
   16258:	movw	r1, #0
   1625c:	cmp	r0, r1
   16260:	beq	16278 <flatcc_builder_append_string_strn@@Base+0xa8>
   16264:	ldr	r0, [sp, #4]
   16268:	ldr	r1, [fp, #-4]
   1626c:	sub	r0, r0, r1
   16270:	str	r0, [sp]
   16274:	b	16280 <flatcc_builder_append_string_strn@@Base+0xb0>
   16278:	ldr	r0, [sp, #8]
   1627c:	str	r0, [sp]
   16280:	ldr	r0, [sp]
   16284:	mov	sp, fp
   16288:	pop	{fp, pc}

0001628c <flatcc_builder_truncate_vector@@Base>:
   1628c:	push	{fp, lr}
   16290:	mov	fp, sp
   16294:	sub	sp, sp, #16
   16298:	str	r0, [sp, #8]
   1629c:	str	r1, [sp, #4]
   162a0:	ldr	r0, [sp, #8]
   162a4:	ldr	r0, [r0, #32]
   162a8:	ldrh	r0, [r0, #14]
   162ac:	cmp	r0, #4
   162b0:	bne	162b8 <flatcc_builder_truncate_vector@@Base+0x2c>
   162b4:	b	162d8 <flatcc_builder_truncate_vector@@Base+0x4c>
   162b8:	ldr	r0, [pc, #192]	; 16380 <flatcc_builder_truncate_vector@@Base+0xf4>
   162bc:	add	r0, pc, r0
   162c0:	ldr	r1, [pc, #188]	; 16384 <flatcc_builder_truncate_vector@@Base+0xf8>
   162c4:	add	r1, pc, r1
   162c8:	ldr	r2, [pc, #184]	; 16388 <flatcc_builder_truncate_vector@@Base+0xfc>
   162cc:	add	r3, pc, r2
   162d0:	movw	r2, #985	; 0x3d9
   162d4:	bl	127a8 <__assert_fail@plt>
   162d8:	ldr	r0, [sp, #8]
   162dc:	ldr	r0, [r0, #32]
   162e0:	ldr	r0, [r0, #20]
   162e4:	ldr	r1, [sp, #4]
   162e8:	cmp	r0, r1
   162ec:	bcs	16338 <flatcc_builder_truncate_vector@@Base+0xac>
   162f0:	ldr	r0, [sp, #8]
   162f4:	ldr	r0, [r0, #32]
   162f8:	ldr	r0, [r0, #20]
   162fc:	ldr	r1, [sp, #4]
   16300:	cmp	r0, r1
   16304:	bcc	1630c <flatcc_builder_truncate_vector@@Base+0x80>
   16308:	b	1632c <flatcc_builder_truncate_vector@@Base+0xa0>
   1630c:	ldr	r0, [pc, #120]	; 1638c <flatcc_builder_truncate_vector@@Base+0x100>
   16310:	add	r0, pc, r0
   16314:	ldr	r1, [pc, #116]	; 16390 <flatcc_builder_truncate_vector@@Base+0x104>
   16318:	add	r1, pc, r1
   1631c:	ldr	r2, [pc, #112]	; 16394 <flatcc_builder_truncate_vector@@Base+0x108>
   16320:	add	r3, pc, r2
   16324:	movw	r2, #986	; 0x3da
   16328:	bl	127a8 <__assert_fail@plt>
   1632c:	mvn	r0, #0
   16330:	str	r0, [fp, #-4]
   16334:	b	16374 <flatcc_builder_truncate_vector@@Base+0xe8>
   16338:	ldr	r0, [sp, #4]
   1633c:	ldr	r1, [sp, #8]
   16340:	ldr	r1, [r1, #32]
   16344:	ldr	r2, [r1, #20]
   16348:	sub	r0, r2, r0
   1634c:	str	r0, [r1, #20]
   16350:	ldr	r0, [sp, #8]
   16354:	ldr	r1, [sp, #8]
   16358:	ldr	r1, [r1, #32]
   1635c:	ldr	r1, [r1, #16]
   16360:	ldr	r2, [sp, #4]
   16364:	mul	r1, r1, r2
   16368:	bl	16398 <flatcc_builder_truncate_vector@@Base+0x10c>
   1636c:	movw	r0, #0
   16370:	str	r0, [fp, #-4]
   16374:	ldr	r0, [fp, #-4]
   16378:	mov	sp, fp
   1637c:	pop	{fp, pc}
   16380:	strdeq	r7, [r0], -r4
   16384:			; <UNDEFINED> instruction: 0x000075b2
   16388:	muleq	r0, lr, fp
   1638c:	muleq	r0, r9, fp
   16390:	andeq	r7, r0, lr, asr r5
   16394:	andeq	r7, r0, sl, asr #22
   16398:	push	{fp, lr}
   1639c:	mov	fp, sp
   163a0:	sub	sp, sp, #8
   163a4:	str	r0, [sp, #4]
   163a8:	str	r1, [sp]
   163ac:	ldr	r0, [sp]
   163b0:	ldr	r1, [sp, #4]
   163b4:	ldr	r2, [r1, #20]
   163b8:	sub	r0, r2, r0
   163bc:	str	r0, [r1, #20]
   163c0:	ldr	r0, [sp, #4]
   163c4:	ldr	r0, [r0, #16]
   163c8:	ldr	r1, [sp, #4]
   163cc:	ldr	r1, [r1, #20]
   163d0:	add	r0, r0, r1
   163d4:	ldr	r2, [sp]
   163d8:	movw	r1, #0
   163dc:	and	r1, r1, #255	; 0xff
   163e0:	bl	12778 <memset@plt>
   163e4:	mov	sp, fp
   163e8:	pop	{fp, pc}

000163ec <flatcc_builder_truncate_offset_vector@@Base>:
   163ec:	push	{fp, lr}
   163f0:	mov	fp, sp
   163f4:	sub	sp, sp, #16
   163f8:	str	r0, [sp, #8]
   163fc:	str	r1, [sp, #4]
   16400:	ldr	r0, [sp, #8]
   16404:	ldr	r0, [r0, #32]
   16408:	ldrh	r0, [r0, #14]
   1640c:	cmp	r0, #5
   16410:	bne	16418 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   16414:	b	16438 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16418:	ldr	r0, [pc, #192]	; 164e0 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   1641c:	add	r0, pc, r0
   16420:	ldr	r1, [pc, #188]	; 164e4 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   16424:	add	r1, pc, r1
   16428:	ldr	r2, [pc, #184]	; 164e8 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   1642c:	add	r3, pc, r2
   16430:	movw	r2, #994	; 0x3e2
   16434:	bl	127a8 <__assert_fail@plt>
   16438:	ldr	r0, [sp, #8]
   1643c:	ldr	r0, [r0, #32]
   16440:	ldr	r0, [r0, #20]
   16444:	ldr	r1, [sp, #4]
   16448:	cmp	r0, r1
   1644c:	bcs	16498 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   16450:	ldr	r0, [sp, #8]
   16454:	ldr	r0, [r0, #32]
   16458:	ldr	r0, [r0, #20]
   1645c:	ldr	r1, [sp, #4]
   16460:	cmp	r0, r1
   16464:	bcc	1646c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16468:	b	1648c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   1646c:	ldr	r0, [pc, #120]	; 164ec <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16470:	add	r0, pc, r0
   16474:	ldr	r1, [pc, #116]	; 164f0 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16478:	add	r1, pc, r1
   1647c:	ldr	r2, [pc, #112]	; 164f4 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16480:	add	r3, pc, r2
   16484:	movw	r2, #995	; 0x3e3
   16488:	bl	127a8 <__assert_fail@plt>
   1648c:	mvn	r0, #0
   16490:	str	r0, [fp, #-4]
   16494:	b	164d4 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16498:	ldr	r0, [sp, #4]
   1649c:	ldr	r1, [sp, #8]
   164a0:	ldr	r1, [r1, #32]
   164a4:	ldr	r2, [r1, #20]
   164a8:	sub	r0, r2, r0
   164ac:	str	r0, [r1, #20]
   164b0:	ldr	r0, [sp, #8]
   164b4:	ldr	r1, [sp, #8]
   164b8:	ldr	r1, [r1, #32]
   164bc:	ldr	r1, [r1, #16]
   164c0:	ldr	r2, [sp, #4]
   164c4:	mul	r1, r1, r2
   164c8:	bl	16398 <flatcc_builder_truncate_vector@@Base+0x10c>
   164cc:	movw	r0, #0
   164d0:	str	r0, [fp, #-4]
   164d4:	ldr	r0, [fp, #-4]
   164d8:	mov	sp, fp
   164dc:	pop	{fp, pc}
   164e0:	andeq	r7, r0, sp, lsl #17
   164e4:	andeq	r7, r0, r2, asr r4
   164e8:	andeq	r7, r0, r1, lsr #21
   164ec:	andeq	r7, r0, r3, lsr #21
   164f0:	strdeq	r7, [r0], -lr
   164f4:	andeq	r7, r0, sp, asr #20

000164f8 <flatcc_builder_truncate_string@@Base>:
   164f8:	push	{fp, lr}
   164fc:	mov	fp, sp
   16500:	sub	sp, sp, #16
   16504:	str	r0, [sp, #8]
   16508:	str	r1, [sp, #4]
   1650c:	ldr	r0, [sp, #8]
   16510:	ldr	r0, [r0, #32]
   16514:	ldrh	r0, [r0, #14]
   16518:	cmp	r0, #6
   1651c:	bne	16524 <flatcc_builder_truncate_string@@Base+0x2c>
   16520:	b	16544 <flatcc_builder_truncate_string@@Base+0x4c>
   16524:	ldr	r0, [pc, #176]	; 165dc <flatcc_builder_truncate_string@@Base+0xe4>
   16528:	add	r0, pc, r0
   1652c:	ldr	r1, [pc, #172]	; 165e0 <flatcc_builder_truncate_string@@Base+0xe8>
   16530:	add	r1, pc, r1
   16534:	ldr	r2, [pc, #168]	; 165e4 <flatcc_builder_truncate_string@@Base+0xec>
   16538:	add	r3, pc, r2
   1653c:	movw	r2, #1003	; 0x3eb
   16540:	bl	127a8 <__assert_fail@plt>
   16544:	ldr	r0, [sp, #8]
   16548:	ldr	r0, [r0, #32]
   1654c:	ldr	r0, [r0, #20]
   16550:	ldr	r1, [sp, #4]
   16554:	cmp	r0, r1
   16558:	bcs	165a4 <flatcc_builder_truncate_string@@Base+0xac>
   1655c:	ldr	r0, [sp, #8]
   16560:	ldr	r0, [r0, #32]
   16564:	ldr	r0, [r0, #20]
   16568:	ldr	r1, [sp, #4]
   1656c:	cmp	r0, r1
   16570:	bcc	16578 <flatcc_builder_truncate_string@@Base+0x80>
   16574:	b	16598 <flatcc_builder_truncate_string@@Base+0xa0>
   16578:	ldr	r0, [pc, #104]	; 165e8 <flatcc_builder_truncate_string@@Base+0xf0>
   1657c:	add	r0, pc, r0
   16580:	ldr	r1, [pc, #100]	; 165ec <flatcc_builder_truncate_string@@Base+0xf4>
   16584:	add	r1, pc, r1
   16588:	ldr	r2, [pc, #96]	; 165f0 <flatcc_builder_truncate_string@@Base+0xf8>
   1658c:	add	r3, pc, r2
   16590:	movw	r2, #1004	; 0x3ec
   16594:	bl	127a8 <__assert_fail@plt>
   16598:	mvn	r0, #0
   1659c:	str	r0, [fp, #-4]
   165a0:	b	165d0 <flatcc_builder_truncate_string@@Base+0xd8>
   165a4:	ldr	r0, [sp, #4]
   165a8:	ldr	r1, [sp, #8]
   165ac:	ldr	r1, [r1, #32]
   165b0:	ldr	r2, [r1, #20]
   165b4:	sub	r0, r2, r0
   165b8:	str	r0, [r1, #20]
   165bc:	ldr	r0, [sp, #8]
   165c0:	ldr	r1, [sp, #4]
   165c4:	bl	16398 <flatcc_builder_truncate_vector@@Base+0x10c>
   165c8:	movw	r0, #0
   165cc:	str	r0, [fp, #-4]
   165d0:	ldr	r0, [fp, #-4]
   165d4:	mov	sp, fp
   165d8:	pop	{fp, pc}
   165dc:	andeq	r7, r0, sl, lsl #17
   165e0:	andeq	r7, r0, r6, asr #6
   165e4:	andeq	r7, r0, r6, lsl sl
   165e8:	andeq	r7, r0, r1, lsl sl
   165ec:	strdeq	r7, [r0], -r2
   165f0:	andeq	r7, r0, r2, asr #19

000165f4 <flatcc_builder_start_vector@@Base>:
   165f4:	push	{fp, lr}
   165f8:	mov	fp, sp
   165fc:	sub	sp, sp, #24
   16600:	str	r0, [fp, #-8]
   16604:	str	r1, [sp, #12]
   16608:	strh	r2, [sp, #10]
   1660c:	str	r3, [sp, #4]
   16610:	add	r0, sp, #10
   16614:	movw	r1, #4
   16618:	uxth	r1, r1
   1661c:	bl	166a0 <flatcc_builder_start_vector@@Base+0xac>
   16620:	ldr	r0, [fp, #-8]
   16624:	ldrh	r1, [sp, #10]
   16628:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   1662c:	cmp	r0, #0
   16630:	beq	16640 <flatcc_builder_start_vector@@Base+0x4c>
   16634:	mvn	r0, #0
   16638:	str	r0, [fp, #-4]
   1663c:	b	16694 <flatcc_builder_start_vector@@Base+0xa0>
   16640:	ldr	r0, [sp, #12]
   16644:	ldr	r1, [fp, #-8]
   16648:	ldr	r1, [r1, #32]
   1664c:	str	r0, [r1, #16]
   16650:	ldr	r0, [fp, #-8]
   16654:	ldr	r0, [r0, #32]
   16658:	movw	r1, #0
   1665c:	str	r1, [r0, #20]
   16660:	ldr	r0, [sp, #4]
   16664:	ldr	r1, [fp, #-8]
   16668:	ldr	r1, [r1, #32]
   1666c:	str	r0, [r1, #24]
   16670:	ldr	r0, [fp, #-8]
   16674:	ldr	r0, [r0, #32]
   16678:	movw	r1, #4
   1667c:	strh	r1, [r0, #14]
   16680:	ldr	r0, [fp, #-8]
   16684:	mvn	r1, #3
   16688:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   1668c:	movw	r0, #0
   16690:	str	r0, [fp, #-4]
   16694:	ldr	r0, [fp, #-4]
   16698:	mov	sp, fp
   1669c:	pop	{fp, pc}
   166a0:	sub	sp, sp, #8
   166a4:	str	r0, [sp, #4]
   166a8:	strh	r1, [sp, #2]
   166ac:	ldr	r0, [sp, #4]
   166b0:	ldrh	r0, [r0]
   166b4:	ldrh	r1, [sp, #2]
   166b8:	cmp	r0, r1
   166bc:	bge	166cc <flatcc_builder_start_vector@@Base+0xd8>
   166c0:	ldrh	r0, [sp, #2]
   166c4:	ldr	r1, [sp, #4]
   166c8:	strh	r0, [r1]
   166cc:	add	sp, sp, #8
   166d0:	bx	lr

000166d4 <flatcc_builder_start_offset_vector@@Base>:
   166d4:	push	{fp, lr}
   166d8:	mov	fp, sp
   166dc:	sub	sp, sp, #8
   166e0:	str	r0, [sp]
   166e4:	ldr	r0, [sp]
   166e8:	movw	r1, #4
   166ec:	uxth	r1, r1
   166f0:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   166f4:	cmp	r0, #0
   166f8:	beq	16708 <flatcc_builder_start_offset_vector@@Base+0x34>
   166fc:	mvn	r0, #0
   16700:	str	r0, [sp, #4]
   16704:	b	1674c <flatcc_builder_start_offset_vector@@Base+0x78>
   16708:	ldr	r0, [sp]
   1670c:	ldr	r0, [r0, #32]
   16710:	movw	r1, #4
   16714:	str	r1, [r0, #16]
   16718:	ldr	r0, [sp]
   1671c:	ldr	r0, [r0, #32]
   16720:	movw	r1, #0
   16724:	str	r1, [r0, #20]
   16728:	ldr	r0, [sp]
   1672c:	ldr	r0, [r0, #32]
   16730:	movw	r1, #5
   16734:	strh	r1, [r0, #14]
   16738:	ldr	r0, [sp]
   1673c:	mvn	r1, #3
   16740:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   16744:	movw	r0, #0
   16748:	str	r0, [sp, #4]
   1674c:	ldr	r0, [sp, #4]
   16750:	mov	sp, fp
   16754:	pop	{fp, pc}

00016758 <flatcc_builder_create_offset_vector@@Base>:
   16758:	push	{fp, lr}
   1675c:	mov	fp, sp
   16760:	sub	sp, sp, #24
   16764:	str	r0, [fp, #-8]
   16768:	str	r1, [sp, #12]
   1676c:	str	r2, [sp, #8]
   16770:	ldr	r0, [fp, #-8]
   16774:	bl	166d4 <flatcc_builder_start_offset_vector@@Base>
   16778:	cmp	r0, #0
   1677c:	beq	1678c <flatcc_builder_create_offset_vector@@Base+0x34>
   16780:	movw	r0, #0
   16784:	str	r0, [fp, #-4]
   16788:	b	167d4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   1678c:	ldr	r0, [fp, #-8]
   16790:	ldr	r1, [sp, #8]
   16794:	bl	15e68 <flatcc_builder_extend_offset_vector@@Base>
   16798:	str	r0, [sp, #4]
   1679c:	movw	r1, #0
   167a0:	cmp	r0, r1
   167a4:	bne	167b4 <flatcc_builder_create_offset_vector@@Base+0x5c>
   167a8:	movw	r0, #0
   167ac:	str	r0, [fp, #-4]
   167b0:	b	167d4 <flatcc_builder_create_offset_vector@@Base+0x7c>
   167b4:	ldr	r0, [sp, #4]
   167b8:	ldr	r1, [sp, #12]
   167bc:	ldr	r2, [sp, #8]
   167c0:	lsl	r2, r2, #2
   167c4:	bl	12718 <memcpy@plt>
   167c8:	ldr	r0, [fp, #-8]
   167cc:	bl	167e0 <flatcc_builder_end_offset_vector@@Base>
   167d0:	str	r0, [fp, #-4]
   167d4:	ldr	r0, [fp, #-4]
   167d8:	mov	sp, fp
   167dc:	pop	{fp, pc}

000167e0 <flatcc_builder_end_offset_vector@@Base>:
   167e0:	push	{fp, lr}
   167e4:	mov	fp, sp
   167e8:	sub	sp, sp, #16
   167ec:	str	r0, [sp, #8]
   167f0:	ldr	r0, [sp, #8]
   167f4:	ldr	r0, [r0, #32]
   167f8:	ldrh	r0, [r0, #14]
   167fc:	cmp	r0, #5
   16800:	bne	16808 <flatcc_builder_end_offset_vector@@Base+0x28>
   16804:	b	16828 <flatcc_builder_end_offset_vector@@Base+0x48>
   16808:	ldr	r0, [pc, #108]	; 1687c <flatcc_builder_end_offset_vector@@Base+0x9c>
   1680c:	add	r0, pc, r0
   16810:	ldr	r1, [pc, #104]	; 16880 <flatcc_builder_end_offset_vector@@Base+0xa0>
   16814:	add	r1, pc, r1
   16818:	ldr	r2, [pc, #100]	; 16884 <flatcc_builder_end_offset_vector@@Base+0xa4>
   1681c:	add	r3, pc, r2
   16820:	movw	r2, #1480	; 0x5c8
   16824:	bl	127a8 <__assert_fail@plt>
   16828:	ldr	r0, [sp, #8]
   1682c:	ldr	r1, [sp, #8]
   16830:	ldr	r1, [r1, #16]
   16834:	ldr	r2, [sp, #8]
   16838:	ldr	r2, [r2, #32]
   1683c:	ldr	r2, [r2, #20]
   16840:	bl	17bf0 <flatcc_builder_create_offset_vector_direct@@Base>
   16844:	str	r0, [sp, #4]
   16848:	movw	r1, #0
   1684c:	cmp	r1, r0
   16850:	bne	16860 <flatcc_builder_end_offset_vector@@Base+0x80>
   16854:	movw	r0, #0
   16858:	str	r0, [fp, #-4]
   1685c:	b	16870 <flatcc_builder_end_offset_vector@@Base+0x90>
   16860:	ldr	r0, [sp, #8]
   16864:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   16868:	ldr	r0, [sp, #4]
   1686c:	str	r0, [fp, #-4]
   16870:	ldr	r0, [fp, #-4]
   16874:	mov	sp, fp
   16878:	pop	{fp, pc}
   1687c:	muleq	r0, sp, r4
   16880:	andeq	r7, r0, r2, rrx
   16884:			; <UNDEFINED> instruction: 0x00007abc

00016888 <flatcc_builder_start_string@@Base>:
   16888:	push	{fp, lr}
   1688c:	mov	fp, sp
   16890:	sub	sp, sp, #8
   16894:	str	r0, [sp]
   16898:	ldr	r0, [sp]
   1689c:	movw	r1, #1
   168a0:	uxth	r1, r1
   168a4:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   168a8:	cmp	r0, #0
   168ac:	beq	168bc <flatcc_builder_start_string@@Base+0x34>
   168b0:	mvn	r0, #0
   168b4:	str	r0, [sp, #4]
   168b8:	b	16900 <flatcc_builder_start_string@@Base+0x78>
   168bc:	ldr	r0, [sp]
   168c0:	ldr	r0, [r0, #32]
   168c4:	movw	r1, #1
   168c8:	str	r1, [r0, #16]
   168cc:	ldr	r0, [sp]
   168d0:	ldr	r0, [r0, #32]
   168d4:	movw	r1, #0
   168d8:	str	r1, [r0, #20]
   168dc:	ldr	r0, [sp]
   168e0:	ldr	r0, [r0, #32]
   168e4:	movw	r1, #6
   168e8:	strh	r1, [r0, #14]
   168ec:	ldr	r0, [sp]
   168f0:	mvn	r1, #3
   168f4:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   168f8:	movw	r0, #0
   168fc:	str	r0, [sp, #4]
   16900:	ldr	r0, [sp, #4]
   16904:	mov	sp, fp
   16908:	pop	{fp, pc}

0001690c <flatcc_builder_reserve_table@@Base>:
   1690c:	push	{fp, lr}
   16910:	mov	fp, sp
   16914:	sub	sp, sp, #8
   16918:	str	r0, [sp, #4]
   1691c:	str	r1, [sp]
   16920:	ldr	r0, [sp]
   16924:	cmp	r0, #0
   16928:	blt	16930 <flatcc_builder_reserve_table@@Base+0x24>
   1692c:	b	16950 <flatcc_builder_reserve_table@@Base+0x44>
   16930:	ldr	r0, [pc, #44]	; 16964 <flatcc_builder_reserve_table@@Base+0x58>
   16934:	add	r0, pc, r0
   16938:	ldr	r1, [pc, #40]	; 16968 <flatcc_builder_reserve_table@@Base+0x5c>
   1693c:	add	r1, pc, r1
   16940:	ldr	r2, [pc, #36]	; 1696c <flatcc_builder_reserve_table@@Base+0x60>
   16944:	add	r3, pc, r2
   16948:	movw	r2, #1065	; 0x429
   1694c:	bl	127a8 <__assert_fail@plt>
   16950:	ldr	r0, [sp, #4]
   16954:	ldr	r1, [sp]
   16958:	bl	16970 <flatcc_builder_reserve_table@@Base+0x64>
   1695c:	mov	sp, fp
   16960:	pop	{fp, pc}
   16964:			; <UNDEFINED> instruction: 0x000076bc
   16968:	andeq	r6, r0, sl, lsr pc
   1696c:	andeq	r7, r0, fp, ror #12
   16970:	push	{fp, lr}
   16974:	mov	fp, sp
   16978:	sub	sp, sp, #24
   1697c:	str	r0, [fp, #-8]
   16980:	str	r1, [sp, #12]
   16984:	ldr	r0, [fp, #-8]
   16988:	ldr	r0, [r0, #32]
   1698c:	ldr	r1, [r0, #16]
   16990:	ldrh	r0, [r0, #28]
   16994:	add	r0, r1, r0, lsl #1
   16998:	str	r0, [sp, #8]
   1699c:	ldr	r0, [sp, #12]
   169a0:	add	r0, r0, #2
   169a4:	lsl	r0, r0, #1
   169a8:	str	r0, [sp, #4]
   169ac:	ldr	r0, [fp, #-8]
   169b0:	ldr	r2, [sp, #8]
   169b4:	ldr	r3, [sp, #4]
   169b8:	movw	r1, #0
   169bc:	movw	ip, #1
   169c0:	str	ip, [sp]
   169c4:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   169c8:	ldr	r1, [fp, #-8]
   169cc:	str	r0, [r1, #4]
   169d0:	movw	r1, #0
   169d4:	cmp	r0, r1
   169d8:	bne	169e8 <flatcc_builder_reserve_table@@Base+0xdc>
   169dc:	mvn	r0, #0
   169e0:	str	r0, [fp, #-4]
   169e4:	b	16a5c <flatcc_builder_reserve_table@@Base+0x150>
   169e8:	ldr	r0, [fp, #-8]
   169ec:	ldr	r1, [r0, #4]
   169f0:	add	r1, r1, #4
   169f4:	str	r1, [r0, #4]
   169f8:	ldr	r0, [fp, #-8]
   169fc:	ldr	r0, [r0, #32]
   16a00:	ldr	r0, [r0, #20]
   16a04:	str	r0, [sp, #8]
   16a08:	ldr	r0, [sp, #12]
   16a0c:	lsl	r0, r0, #1
   16a10:	add	r0, r0, #1
   16a14:	str	r0, [sp, #4]
   16a18:	ldr	r0, [fp, #-8]
   16a1c:	ldr	r2, [sp, #8]
   16a20:	ldr	r3, [sp, #4]
   16a24:	movw	r1, #3
   16a28:	movw	ip, #0
   16a2c:	str	ip, [sp]
   16a30:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16a34:	ldr	r1, [fp, #-8]
   16a38:	str	r0, [r1]
   16a3c:	movw	r1, #0
   16a40:	cmp	r0, r1
   16a44:	bne	16a54 <flatcc_builder_reserve_table@@Base+0x148>
   16a48:	mvn	r0, #0
   16a4c:	str	r0, [fp, #-4]
   16a50:	b	16a5c <flatcc_builder_reserve_table@@Base+0x150>
   16a54:	movw	r0, #0
   16a58:	str	r0, [fp, #-4]
   16a5c:	ldr	r0, [fp, #-4]
   16a60:	mov	sp, fp
   16a64:	pop	{fp, pc}

00016a68 <flatcc_builder_start_table@@Base>:
   16a68:	push	{fp, lr}
   16a6c:	mov	fp, sp
   16a70:	sub	sp, sp, #16
   16a74:	str	r0, [sp, #8]
   16a78:	str	r1, [sp, #4]
   16a7c:	ldr	r0, [sp, #8]
   16a80:	movw	r1, #4
   16a84:	uxth	r1, r1
   16a88:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   16a8c:	cmp	r0, #0
   16a90:	beq	16aa0 <flatcc_builder_start_table@@Base+0x38>
   16a94:	mvn	r0, #0
   16a98:	str	r0, [fp, #-4]
   16a9c:	b	16b70 <flatcc_builder_start_table@@Base+0x108>
   16aa0:	ldr	r0, [pc, #212]	; 16b7c <flatcc_builder_start_table@@Base+0x114>
   16aa4:	ldr	r1, [sp, #8]
   16aa8:	ldr	r1, [r1, #4]
   16aac:	ldr	r2, [sp, #8]
   16ab0:	ldr	r2, [r2, #52]	; 0x34
   16ab4:	sub	r1, r1, r2
   16ab8:	ldr	r2, [sp, #8]
   16abc:	ldr	r2, [r2, #32]
   16ac0:	str	r1, [r2, #16]
   16ac4:	ldr	r1, [sp, #8]
   16ac8:	ldr	r1, [r1]
   16acc:	ldr	r2, [sp, #8]
   16ad0:	ldr	r2, [r2, #76]	; 0x4c
   16ad4:	sub	r1, r1, r2
   16ad8:	ldr	r2, [sp, #8]
   16adc:	ldr	r2, [r2, #32]
   16ae0:	str	r1, [r2, #20]
   16ae4:	ldr	r1, [sp, #8]
   16ae8:	ldr	r1, [r1, #12]
   16aec:	ldr	r2, [sp, #8]
   16af0:	ldr	r2, [r2, #32]
   16af4:	str	r1, [r2, #24]
   16af8:	ldr	r1, [sp, #8]
   16afc:	ldrh	r1, [r1, #8]
   16b00:	ldr	r2, [sp, #8]
   16b04:	ldr	r2, [r2, #32]
   16b08:	strh	r1, [r2, #28]
   16b0c:	ldr	r1, [sp, #8]
   16b10:	movw	r2, #0
   16b14:	str	r2, [r1, #12]
   16b18:	ldr	r1, [sp, #8]
   16b1c:	str	r0, [r1, #12]
   16b20:	ldr	r0, [sp, #8]
   16b24:	movw	r1, #0
   16b28:	strh	r1, [r0, #8]
   16b2c:	ldr	r0, [sp, #8]
   16b30:	ldr	r0, [r0, #32]
   16b34:	movw	r1, #3
   16b38:	strh	r1, [r0, #14]
   16b3c:	ldr	r0, [sp, #8]
   16b40:	ldr	r1, [sp, #4]
   16b44:	bl	16970 <flatcc_builder_reserve_table@@Base+0x64>
   16b48:	cmp	r0, #0
   16b4c:	beq	16b5c <flatcc_builder_start_table@@Base+0xf4>
   16b50:	mvn	r0, #0
   16b54:	str	r0, [fp, #-4]
   16b58:	b	16b70 <flatcc_builder_start_table@@Base+0x108>
   16b5c:	ldr	r0, [sp, #8]
   16b60:	movw	r1, #65532	; 0xfffc
   16b64:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   16b68:	movw	r0, #0
   16b6c:	str	r0, [fp, #-4]
   16b70:	ldr	r0, [fp, #-4]
   16b74:	mov	sp, fp
   16b78:	pop	{fp, pc}
   16b7c:	svccs	0x00693b52

00016b80 <flatcc_builder_create_vtable@@Base>:
   16b80:	push	{fp, lr}
   16b84:	mov	fp, sp
   16b88:	sub	sp, sp, #104	; 0x68
   16b8c:	str	r0, [fp, #-8]
   16b90:	str	r1, [fp, #-12]
   16b94:	strh	r2, [fp, #-14]
   16b98:	movw	r0, #0
   16b9c:	str	r0, [sp, #12]
   16ba0:	str	r0, [sp, #16]
   16ba4:	ldrh	r0, [fp, #-14]
   16ba8:	cmp	r0, #0
   16bac:	ble	16bf0 <flatcc_builder_create_vtable@@Base+0x70>
   16bb0:	ldrh	r0, [fp, #-14]
   16bb4:	ldr	r1, [sp, #12]
   16bb8:	add	r0, r1, r0
   16bbc:	str	r0, [sp, #12]
   16bc0:	ldr	r0, [fp, #-12]
   16bc4:	add	r1, sp, #12
   16bc8:	add	r1, r1, #8
   16bcc:	ldr	r2, [sp, #16]
   16bd0:	str	r0, [r1, r2, lsl #3]
   16bd4:	ldrh	r0, [fp, #-14]
   16bd8:	ldr	r2, [sp, #16]
   16bdc:	add	r1, r1, r2, lsl #3
   16be0:	str	r0, [r1, #4]
   16be4:	ldr	r0, [sp, #16]
   16be8:	add	r0, r0, #1
   16bec:	str	r0, [sp, #16]
   16bf0:	ldr	r0, [fp, #-8]
   16bf4:	ldr	r0, [r0, #152]	; 0x98
   16bf8:	cmp	r0, #0
   16bfc:	bne	16c3c <flatcc_builder_create_vtable@@Base+0xbc>
   16c00:	ldr	r0, [fp, #-8]
   16c04:	ldr	r0, [r0, #180]	; 0xb4
   16c08:	cmp	r0, #0
   16c0c:	bne	16c3c <flatcc_builder_create_vtable@@Base+0xbc>
   16c10:	ldr	r0, [fp, #-8]
   16c14:	add	r1, sp, #12
   16c18:	bl	16c84 <flatcc_builder_create_vtable@@Base+0x104>
   16c1c:	str	r0, [fp, #-20]	; 0xffffffec
   16c20:	movw	r1, #0
   16c24:	cmp	r1, r0
   16c28:	bne	16c38 <flatcc_builder_create_vtable@@Base+0xb8>
   16c2c:	movw	r0, #0
   16c30:	str	r0, [fp, #-4]
   16c34:	b	16c78 <flatcc_builder_create_vtable@@Base+0xf8>
   16c38:	b	16c70 <flatcc_builder_create_vtable@@Base+0xf0>
   16c3c:	ldr	r0, [fp, #-8]
   16c40:	add	r1, sp, #12
   16c44:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   16c48:	str	r0, [fp, #-20]	; 0xffffffec
   16c4c:	movw	r1, #0
   16c50:	cmp	r1, r0
   16c54:	bne	16c64 <flatcc_builder_create_vtable@@Base+0xe4>
   16c58:	movw	r0, #0
   16c5c:	str	r0, [fp, #-4]
   16c60:	b	16c78 <flatcc_builder_create_vtable@@Base+0xf8>
   16c64:	ldr	r0, [fp, #-20]	; 0xffffffec
   16c68:	add	r0, r0, #1
   16c6c:	str	r0, [fp, #-20]	; 0xffffffec
   16c70:	ldr	r0, [fp, #-20]	; 0xffffffec
   16c74:	str	r0, [fp, #-4]
   16c78:	ldr	r0, [fp, #-4]
   16c7c:	mov	sp, fp
   16c80:	pop	{fp, pc}
   16c84:	push	{fp, lr}
   16c88:	mov	fp, sp
   16c8c:	sub	sp, sp, #24
   16c90:	str	r0, [fp, #-4]
   16c94:	str	r1, [fp, #-8]
   16c98:	ldr	r0, [fp, #-4]
   16c9c:	ldr	r0, [r0, #140]	; 0x8c
   16ca0:	str	r0, [sp, #12]
   16ca4:	ldr	r0, [sp, #12]
   16ca8:	ldr	r1, [fp, #-8]
   16cac:	ldr	r1, [r1]
   16cb0:	add	r0, r0, r1
   16cb4:	ldr	r1, [fp, #-4]
   16cb8:	str	r0, [r1, #140]	; 0x8c
   16cbc:	ldr	r0, [fp, #-4]
   16cc0:	ldr	r0, [r0, #140]	; 0x8c
   16cc4:	ldr	r1, [sp, #12]
   16cc8:	cmp	r0, r1
   16ccc:	bge	16cf0 <flatcc_builder_create_vtable@@Base+0x170>
   16cd0:	ldr	r0, [pc, #168]	; 16d80 <flatcc_builder_create_vtable@@Base+0x200>
   16cd4:	add	r0, pc, r0
   16cd8:	ldr	r1, [pc, #164]	; 16d84 <flatcc_builder_create_vtable@@Base+0x204>
   16cdc:	add	r1, pc, r1
   16ce0:	ldr	r2, [pc, #160]	; 16d88 <flatcc_builder_create_vtable@@Base+0x208>
   16ce4:	add	r3, pc, r2
   16ce8:	movw	r2, #673	; 0x2a1
   16cec:	bl	127a8 <__assert_fail@plt>
   16cf0:	ldr	r0, [fp, #-4]
   16cf4:	ldr	r0, [r0, #44]	; 0x2c
   16cf8:	ldr	r1, [fp, #-4]
   16cfc:	ldr	r1, [r1, #36]	; 0x24
   16d00:	ldr	r2, [fp, #-8]
   16d04:	add	r2, r2, #8
   16d08:	ldr	r3, [fp, #-8]
   16d0c:	ldr	r3, [r3, #4]
   16d10:	ldr	ip, [sp, #12]
   16d14:	ldr	lr, [fp, #-8]
   16d18:	ldr	lr, [lr]
   16d1c:	str	r0, [sp, #8]
   16d20:	mov	r0, r1
   16d24:	mov	r1, r2
   16d28:	mov	r2, r3
   16d2c:	mov	r3, ip
   16d30:	str	lr, [sp]
   16d34:	ldr	ip, [sp, #8]
   16d38:	blx	ip
   16d3c:	cmp	r0, #0
   16d40:	beq	16d64 <flatcc_builder_create_vtable@@Base+0x1e4>
   16d44:	ldr	r0, [pc, #40]	; 16d74 <flatcc_builder_create_vtable@@Base+0x1f4>
   16d48:	add	r0, pc, r0
   16d4c:	ldr	r1, [pc, #36]	; 16d78 <flatcc_builder_create_vtable@@Base+0x1f8>
   16d50:	add	r1, pc, r1
   16d54:	ldr	r2, [pc, #32]	; 16d7c <flatcc_builder_create_vtable@@Base+0x1fc>
   16d58:	add	r3, pc, r2
   16d5c:	movw	r2, #677	; 0x2a5
   16d60:	bl	127a8 <__assert_fail@plt>
   16d64:	ldr	r0, [sp, #12]
   16d68:	add	r0, r0, #1
   16d6c:	mov	sp, fp
   16d70:	pop	{fp, pc}
   16d74:	andeq	r7, r0, fp, ror #25
   16d78:	andeq	r6, r0, r6, lsr #22
   16d7c:	andeq	r7, r0, r6, asr ip
   16d80:	andeq	r7, r0, pc, asr sp
   16d84:	muleq	r0, sl, fp
   16d88:	andeq	r7, r0, sl, asr #25

00016d8c <flatcc_builder_create_cached_vtable@@Base>:
   16d8c:	push	{fp, lr}
   16d90:	mov	fp, sp
   16d94:	sub	sp, sp, #48	; 0x30
   16d98:	str	r0, [fp, #-8]
   16d9c:	str	r1, [fp, #-12]
   16da0:	strh	r2, [fp, #-14]
   16da4:	str	r3, [fp, #-20]	; 0xffffffec
   16da8:	ldr	r0, [fp, #-8]
   16dac:	ldr	r1, [fp, #-20]	; 0xffffffec
   16db0:	bl	17098 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   16db4:	str	r0, [sp, #12]
   16db8:	movw	r1, #0
   16dbc:	cmp	r0, r1
   16dc0:	bne	16dd0 <flatcc_builder_create_cached_vtable@@Base+0x44>
   16dc4:	movw	r0, #0
   16dc8:	str	r0, [fp, #-4]
   16dcc:	b	1708c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16dd0:	ldr	r0, [sp, #12]
   16dd4:	str	r0, [sp, #16]
   16dd8:	ldr	r0, [sp, #16]
   16ddc:	ldr	r0, [r0]
   16de0:	str	r0, [sp, #8]
   16de4:	movw	r0, #0
   16de8:	str	r0, [sp, #20]
   16dec:	ldr	r0, [sp, #8]
   16df0:	cmp	r0, #0
   16df4:	beq	16ef8 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   16df8:	ldr	r0, [fp, #-8]
   16dfc:	ldr	r0, [r0, #100]	; 0x64
   16e00:	ldr	r1, [sp, #8]
   16e04:	add	r0, r0, r1
   16e08:	str	r0, [sp, #24]
   16e0c:	ldr	r0, [fp, #-8]
   16e10:	ldr	r0, [r0, #68]	; 0x44
   16e14:	ldr	r1, [sp, #24]
   16e18:	ldr	r1, [r1, #8]
   16e1c:	add	r0, r0, r1
   16e20:	str	r0, [sp, #4]
   16e24:	ldr	r0, [sp, #4]
   16e28:	ldrh	r0, [r0]
   16e2c:	ldrh	r1, [fp, #-14]
   16e30:	cmp	r0, r1
   16e34:	bne	16e54 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16e38:	ldr	r0, [fp, #-12]
   16e3c:	ldr	r1, [sp, #4]
   16e40:	ldrh	r2, [fp, #-14]
   16e44:	bl	12724 <memcmp@plt>
   16e48:	movw	r1, #0
   16e4c:	cmp	r1, r0
   16e50:	beq	16e70 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   16e54:	ldr	r0, [sp, #24]
   16e58:	add	r0, r0, #12
   16e5c:	str	r0, [sp, #16]
   16e60:	ldr	r0, [sp, #24]
   16e64:	ldr	r0, [r0, #12]
   16e68:	str	r0, [sp, #8]
   16e6c:	b	16dec <flatcc_builder_create_cached_vtable@@Base+0x60>
   16e70:	ldr	r0, [sp, #24]
   16e74:	ldr	r0, [r0, #4]
   16e78:	ldr	r1, [fp, #-8]
   16e7c:	ldr	r1, [r1, #152]	; 0x98
   16e80:	cmp	r0, r1
   16e84:	beq	16eac <flatcc_builder_create_cached_vtable@@Base+0x120>
   16e88:	ldr	r0, [sp, #24]
   16e8c:	str	r0, [sp, #20]
   16e90:	ldr	r0, [sp, #24]
   16e94:	add	r0, r0, #12
   16e98:	str	r0, [sp, #16]
   16e9c:	ldr	r0, [sp, #24]
   16ea0:	ldr	r0, [r0, #12]
   16ea4:	str	r0, [sp, #8]
   16ea8:	b	16dec <flatcc_builder_create_cached_vtable@@Base+0x60>
   16eac:	ldr	r0, [sp, #16]
   16eb0:	ldr	r1, [sp, #12]
   16eb4:	cmp	r0, r1
   16eb8:	beq	16ee8 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   16ebc:	ldr	r0, [sp, #24]
   16ec0:	ldr	r0, [r0, #12]
   16ec4:	ldr	r1, [sp, #16]
   16ec8:	str	r0, [r1]
   16ecc:	ldr	r0, [sp, #12]
   16ed0:	ldr	r0, [r0]
   16ed4:	ldr	r1, [sp, #24]
   16ed8:	str	r0, [r1, #12]
   16edc:	ldr	r0, [sp, #8]
   16ee0:	ldr	r1, [sp, #12]
   16ee4:	str	r0, [r1]
   16ee8:	ldr	r0, [sp, #24]
   16eec:	ldr	r0, [r0]
   16ef0:	str	r0, [fp, #-4]
   16ef4:	b	1708c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16ef8:	ldr	r0, [fp, #-8]
   16efc:	ldr	r1, [fp, #-8]
   16f00:	ldr	r2, [r1, #124]	; 0x7c
   16f04:	movw	r1, #6
   16f08:	movw	r3, #16
   16f0c:	movw	ip, #0
   16f10:	str	ip, [sp]
   16f14:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16f18:	str	r0, [sp, #24]
   16f1c:	movw	r1, #0
   16f20:	cmp	r0, r1
   16f24:	bne	16f34 <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   16f28:	movw	r0, #0
   16f2c:	str	r0, [fp, #-4]
   16f30:	b	1708c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16f34:	ldr	r0, [fp, #-8]
   16f38:	ldr	r0, [r0, #124]	; 0x7c
   16f3c:	str	r0, [sp, #8]
   16f40:	ldr	r0, [fp, #-8]
   16f44:	ldr	r1, [r0, #124]	; 0x7c
   16f48:	add	r1, r1, #16
   16f4c:	str	r1, [r0, #124]	; 0x7c
   16f50:	ldr	r0, [fp, #-8]
   16f54:	ldr	r0, [r0, #152]	; 0x98
   16f58:	ldr	r1, [sp, #24]
   16f5c:	str	r0, [r1, #4]
   16f60:	ldr	r0, [sp, #12]
   16f64:	ldr	r0, [r0]
   16f68:	ldr	r1, [sp, #24]
   16f6c:	str	r0, [r1, #12]
   16f70:	ldr	r0, [sp, #8]
   16f74:	ldr	r1, [sp, #12]
   16f78:	str	r0, [r1]
   16f7c:	ldr	r0, [fp, #-8]
   16f80:	ldr	r1, [fp, #-12]
   16f84:	ldrh	r2, [fp, #-14]
   16f88:	bl	16b80 <flatcc_builder_create_vtable@@Base>
   16f8c:	ldr	r1, [sp, #24]
   16f90:	str	r0, [r1]
   16f94:	movw	r1, #0
   16f98:	cmp	r1, r0
   16f9c:	bne	16fac <flatcc_builder_create_cached_vtable@@Base+0x220>
   16fa0:	movw	r0, #0
   16fa4:	str	r0, [fp, #-4]
   16fa8:	b	1708c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16fac:	ldr	r0, [sp, #20]
   16fb0:	movw	r1, #0
   16fb4:	cmp	r0, r1
   16fb8:	beq	16fd0 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16fbc:	ldr	r0, [sp, #20]
   16fc0:	ldr	r0, [r0, #8]
   16fc4:	ldr	r1, [sp, #24]
   16fc8:	str	r0, [r1, #8]
   16fcc:	b	17080 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16fd0:	ldr	r0, [fp, #-8]
   16fd4:	ldr	r0, [r0, #172]	; 0xac
   16fd8:	cmp	r0, #0
   16fdc:	beq	1700c <flatcc_builder_create_cached_vtable@@Base+0x280>
   16fe0:	ldr	r0, [fp, #-8]
   16fe4:	ldr	r0, [r0, #172]	; 0xac
   16fe8:	ldr	r1, [fp, #-8]
   16fec:	ldr	r1, [r1, #120]	; 0x78
   16ff0:	ldrh	r2, [fp, #-14]
   16ff4:	add	r1, r1, r2
   16ff8:	cmp	r0, r1
   16ffc:	bcs	1700c <flatcc_builder_create_cached_vtable@@Base+0x280>
   17000:	ldr	r0, [fp, #-8]
   17004:	bl	140b4 <flatcc_builder_flush_vtable_cache@@Base>
   17008:	b	1707c <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   1700c:	ldr	r0, [fp, #-8]
   17010:	ldr	r1, [fp, #-8]
   17014:	ldr	r2, [r1, #120]	; 0x78
   17018:	ldrh	r3, [fp, #-14]
   1701c:	movw	r1, #2
   17020:	movw	ip, #0
   17024:	str	ip, [sp]
   17028:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1702c:	str	r0, [sp, #4]
   17030:	movw	r1, #0
   17034:	cmp	r0, r1
   17038:	bne	17048 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   1703c:	mvn	r0, #0
   17040:	str	r0, [fp, #-4]
   17044:	b	1708c <flatcc_builder_create_cached_vtable@@Base+0x300>
   17048:	ldr	r0, [fp, #-8]
   1704c:	ldr	r0, [r0, #120]	; 0x78
   17050:	ldr	r1, [sp, #24]
   17054:	str	r0, [r1, #8]
   17058:	ldrh	r0, [fp, #-14]
   1705c:	ldr	r1, [fp, #-8]
   17060:	ldr	r2, [r1, #120]	; 0x78
   17064:	add	r0, r2, r0
   17068:	str	r0, [r1, #120]	; 0x78
   1706c:	ldr	r0, [sp, #4]
   17070:	ldr	r1, [fp, #-12]
   17074:	ldrh	r2, [fp, #-14]
   17078:	bl	12718 <memcpy@plt>
   1707c:	b	17080 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   17080:	ldr	r0, [sp, #24]
   17084:	ldr	r0, [r0]
   17088:	str	r0, [fp, #-4]
   1708c:	ldr	r0, [fp, #-4]
   17090:	mov	sp, fp
   17094:	pop	{fp, pc}
   17098:	push	{fp, lr}
   1709c:	mov	fp, sp
   170a0:	sub	sp, sp, #24
   170a4:	str	r0, [fp, #-8]
   170a8:	str	r1, [sp, #12]
   170ac:	ldr	r0, [fp, #-8]
   170b0:	ldr	r0, [r0, #116]	; 0x74
   170b4:	cmp	r0, #0
   170b8:	bne	170dc <flatcc_builder_create_cached_vtable@@Base+0x350>
   170bc:	ldr	r0, [fp, #-8]
   170c0:	bl	19bb8 <flatcc_builder_get_emit_context@@Base+0xe8>
   170c4:	cmp	r0, #0
   170c8:	beq	170d8 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   170cc:	movw	r0, #0
   170d0:	str	r0, [fp, #-4]
   170d4:	b	17110 <flatcc_builder_create_cached_vtable@@Base+0x384>
   170d8:	b	170dc <flatcc_builder_create_cached_vtable@@Base+0x350>
   170dc:	ldr	r0, [fp, #-8]
   170e0:	ldr	r0, [r0, #92]	; 0x5c
   170e4:	str	r0, [sp, #8]
   170e8:	ldr	r0, [sp, #8]
   170ec:	ldr	r1, [sp, #12]
   170f0:	ldr	r2, [fp, #-8]
   170f4:	ldr	r2, [r2, #116]	; 0x74
   170f8:	rsb	r2, r2, #32
   170fc:	lsr	r1, r1, r2
   17100:	mov	r2, r1
   17104:	add	r0, r0, r1, lsl #2
   17108:	str	r0, [fp, #-4]
   1710c:	str	r2, [sp, #4]
   17110:	ldr	r0, [fp, #-4]
   17114:	mov	sp, fp
   17118:	pop	{fp, pc}

0001711c <flatcc_builder_create_table@@Base>:
   1711c:	push	{r4, sl, fp, lr}
   17120:	add	fp, sp, #8
   17124:	sub	sp, sp, #136	; 0x88
   17128:	ldr	ip, [fp, #16]
   1712c:	ldr	lr, [fp, #12]
   17130:	ldr	r4, [fp, #8]
   17134:	str	r0, [fp, #-16]
   17138:	str	r1, [fp, #-20]	; 0xffffffec
   1713c:	str	r2, [fp, #-24]	; 0xffffffe8
   17140:	strh	r3, [fp, #-26]	; 0xffffffe6
   17144:	ldr	r0, [fp, #12]
   17148:	cmp	r0, #0
   1714c:	str	r4, [sp, #8]
   17150:	str	lr, [sp, #4]
   17154:	str	ip, [sp]
   17158:	blt	17160 <flatcc_builder_create_table@@Base+0x44>
   1715c:	b	17180 <flatcc_builder_create_table@@Base+0x64>
   17160:	ldr	r0, [pc, #616]	; 173d0 <flatcc_builder_create_table@@Base+0x2b4>
   17164:	add	r0, pc, r0
   17168:	ldr	r1, [pc, #612]	; 173d4 <flatcc_builder_create_table@@Base+0x2b8>
   1716c:	add	r1, pc, r1
   17170:	ldr	r2, [pc, #608]	; 173d8 <flatcc_builder_create_table@@Base+0x2bc>
   17174:	add	r3, pc, r2
   17178:	movw	r2, #1237	; 0x4d5
   1717c:	bl	127a8 <__assert_fail@plt>
   17180:	ldr	r0, [fp, #16]
   17184:	and	r0, r0, #1
   17188:	cmp	r0, #0
   1718c:	beq	17194 <flatcc_builder_create_table@@Base+0x78>
   17190:	b	171b4 <flatcc_builder_create_table@@Base+0x98>
   17194:	ldr	r0, [pc, #576]	; 173dc <flatcc_builder_create_table@@Base+0x2c0>
   17198:	add	r0, pc, r0
   1719c:	ldr	r1, [pc, #572]	; 173e0 <flatcc_builder_create_table@@Base+0x2c4>
   171a0:	add	r1, pc, r1
   171a4:	ldr	r2, [pc, #568]	; 173e4 <flatcc_builder_create_table@@Base+0x2c8>
   171a8:	add	r3, pc, r2
   171ac:	movw	r2, #1243	; 0x4db
   171b0:	bl	127a8 <__assert_fail@plt>
   171b4:	sub	r0, fp, #26
   171b8:	movw	r1, #4
   171bc:	uxth	r1, r1
   171c0:	bl	166a0 <flatcc_builder_start_vector@@Base+0xac>
   171c4:	ldr	r0, [fp, #-16]
   171c8:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   171cc:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   171d0:	ldr	r0, [fp, #-16]
   171d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   171d8:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   171dc:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   171e0:	str	r0, [fp, #-36]	; 0xffffffdc
   171e4:	ldr	r0, [fp, #-16]
   171e8:	ldr	r0, [r0, #136]	; 0x88
   171ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   171f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171f4:	add	r1, r1, r2
   171f8:	add	r1, r1, #4
   171fc:	sub	r0, r0, r1
   17200:	str	r0, [fp, #-52]	; 0xffffffcc
   17204:	ldr	r0, [fp, #16]
   17208:	sub	r0, r0, #1
   1720c:	str	r0, [fp, #-48]	; 0xffffffd0
   17210:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17214:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17218:	sub	r0, r0, r1
   1721c:	str	r0, [fp, #-40]	; 0xffffffd8
   17220:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17224:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17228:	sub	r0, r0, r1
   1722c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17230:	cmp	r0, r1
   17234:	beq	17244 <flatcc_builder_create_table@@Base+0x128>
   17238:	mvn	r0, #0
   1723c:	str	r0, [fp, #-12]
   17240:	b	173c4 <flatcc_builder_create_table@@Base+0x2a8>
   17244:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17248:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   1724c:	str	r0, [fp, #-44]	; 0xffffffd4
   17250:	movw	r0, #0
   17254:	str	r0, [fp, #-32]	; 0xffffffe0
   17258:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1725c:	ldr	r1, [fp, #12]
   17260:	cmp	r0, r1
   17264:	bge	172d0 <flatcc_builder_create_table@@Base+0x1b4>
   17268:	ldr	r0, [fp, #-20]	; 0xffffffec
   1726c:	ldr	r1, [fp, #8]
   17270:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17274:	add	r1, r1, r2, lsl #1
   17278:	ldrh	r1, [r1]
   1727c:	add	r0, r0, r1
   17280:	str	r0, [fp, #-60]	; 0xffffffc4
   17284:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17288:	ldr	r0, [r0]
   1728c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17290:	sub	r0, r0, r1
   17294:	ldr	r1, [fp, #8]
   17298:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1729c:	add	r1, r1, r2, lsl #1
   172a0:	ldrh	r1, [r1]
   172a4:	sub	r0, r0, r1
   172a8:	sub	r0, r0, #4
   172ac:	str	r0, [fp, #-56]	; 0xffffffc8
   172b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   172b4:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   172b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   172bc:	str	r0, [r1]
   172c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172c4:	add	r0, r0, #1
   172c8:	str	r0, [fp, #-32]	; 0xffffffe0
   172cc:	b	17258 <flatcc_builder_create_table@@Base+0x13c>
   172d0:	mov	r0, #0
   172d4:	str	r0, [sp, #12]
   172d8:	str	r0, [sp, #16]
   172dc:	ldr	r0, [sp, #12]
   172e0:	add	r0, r0, #4
   172e4:	str	r0, [sp, #12]
   172e8:	add	r0, sp, #12
   172ec:	add	r0, r0, #8
   172f0:	ldr	r1, [sp, #16]
   172f4:	sub	r2, fp, #44	; 0x2c
   172f8:	str	r2, [r0, r1, lsl #3]
   172fc:	ldr	r1, [sp, #16]
   17300:	add	r0, r0, r1, lsl #3
   17304:	movw	r1, #4
   17308:	str	r1, [r0, #4]
   1730c:	ldr	r0, [sp, #16]
   17310:	add	r0, r0, #1
   17314:	str	r0, [sp, #16]
   17318:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1731c:	cmp	r0, #0
   17320:	bls	17364 <flatcc_builder_create_table@@Base+0x248>
   17324:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17328:	ldr	r1, [sp, #12]
   1732c:	add	r0, r1, r0
   17330:	str	r0, [sp, #12]
   17334:	ldr	r0, [fp, #-20]	; 0xffffffec
   17338:	add	r1, sp, #12
   1733c:	add	r1, r1, #8
   17340:	ldr	r2, [sp, #16]
   17344:	str	r0, [r1, r2, lsl #3]
   17348:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1734c:	ldr	r2, [sp, #16]
   17350:	add	r1, r1, r2, lsl #3
   17354:	str	r0, [r1, #4]
   17358:	ldr	r0, [sp, #16]
   1735c:	add	r0, r0, #1
   17360:	str	r0, [sp, #16]
   17364:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17368:	cmp	r0, #0
   1736c:	bls	173b4 <flatcc_builder_create_table@@Base+0x298>
   17370:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17374:	ldr	r1, [sp, #12]
   17378:	add	r0, r1, r0
   1737c:	str	r0, [sp, #12]
   17380:	add	r0, sp, #12
   17384:	add	r0, r0, #8
   17388:	ldr	r1, [sp, #16]
   1738c:	ldr	r2, [pc, #84]	; 173e8 <flatcc_builder_create_table@@Base+0x2cc>
   17390:	ldr	r2, [pc, r2]
   17394:	str	r2, [r0, r1, lsl #3]
   17398:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1739c:	ldr	r2, [sp, #16]
   173a0:	add	r0, r0, r2, lsl #3
   173a4:	str	r1, [r0, #4]
   173a8:	ldr	r0, [sp, #16]
   173ac:	add	r0, r0, #1
   173b0:	str	r0, [sp, #16]
   173b4:	ldr	r0, [fp, #-16]
   173b8:	add	r1, sp, #12
   173bc:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   173c0:	str	r0, [fp, #-12]
   173c4:	ldr	r0, [fp, #-12]
   173c8:	sub	sp, fp, #8
   173cc:	pop	{r4, sl, fp, pc}
   173d0:	andeq	r6, r0, r5, lsl #29
   173d4:	andeq	r6, r0, sl, lsl #14
   173d8:	andeq	r6, r0, r7, lsl #29
   173dc:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   173e0:	ldrdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   173e4:	andeq	r6, r0, r3, asr lr
   173e8:	andeq	r8, r1, ip, lsr #25

000173ec <flatcc_builder_check_required_field@@Base>:
   173ec:	push	{fp, lr}
   173f0:	mov	fp, sp
   173f4:	sub	sp, sp, #16
   173f8:	str	r0, [fp, #-4]
   173fc:	strh	r1, [fp, #-6]
   17400:	ldr	r0, [fp, #-4]
   17404:	ldr	r0, [r0, #32]
   17408:	ldrh	r0, [r0, #14]
   1740c:	cmp	r0, #3
   17410:	bne	17418 <flatcc_builder_check_required_field@@Base+0x2c>
   17414:	b	17438 <flatcc_builder_check_required_field@@Base+0x4c>
   17418:	ldr	r0, [pc, #104]	; 17488 <flatcc_builder_check_required_field@@Base+0x9c>
   1741c:	add	r0, pc, r0
   17420:	ldr	r1, [pc, #100]	; 1748c <flatcc_builder_check_required_field@@Base+0xa0>
   17424:	add	r1, pc, r1
   17428:	ldr	r2, [pc, #96]	; 17490 <flatcc_builder_check_required_field@@Base+0xa4>
   1742c:	add	r3, pc, r2
   17430:	movw	r2, #1272	; 0x4f8
   17434:	bl	127a8 <__assert_fail@plt>
   17438:	ldrh	r0, [fp, #-6]
   1743c:	ldr	r1, [fp, #-4]
   17440:	ldrh	r1, [r1, #8]
   17444:	cmp	r0, r1
   17448:	movw	r0, #0
   1744c:	str	r0, [sp, #4]
   17450:	bge	17478 <flatcc_builder_check_required_field@@Base+0x8c>
   17454:	ldr	r0, [fp, #-4]
   17458:	ldr	r0, [r0, #4]
   1745c:	ldrh	r1, [fp, #-6]
   17460:	add	r0, r0, r1, lsl #1
   17464:	ldrh	r0, [r0]
   17468:	cmp	r0, #0
   1746c:	movw	r0, #0
   17470:	movne	r0, #1
   17474:	str	r0, [sp, #4]
   17478:	ldr	r0, [sp, #4]
   1747c:	and	r0, r0, #1
   17480:	mov	sp, fp
   17484:	pop	{fp, pc}
   17488:	andeq	r6, r0, r6, lsl #25
   1748c:	andeq	r6, r0, r2, asr r4
   17490:	andeq	r6, r0, r1, lsr #25

00017494 <flatcc_builder_check_union_field@@Base>:
   17494:	push	{fp, lr}
   17498:	mov	fp, sp
   1749c:	sub	sp, sp, #16
   174a0:	str	r0, [sp, #8]
   174a4:	strh	r1, [sp, #6]
   174a8:	ldr	r0, [sp, #8]
   174ac:	ldr	r0, [r0, #32]
   174b0:	ldrh	r0, [r0, #14]
   174b4:	cmp	r0, #3
   174b8:	bne	174c0 <flatcc_builder_check_union_field@@Base+0x2c>
   174bc:	b	174e0 <flatcc_builder_check_union_field@@Base+0x4c>
   174c0:	ldr	r0, [pc, #284]	; 175e4 <flatcc_builder_check_union_field@@Base+0x150>
   174c4:	add	r0, pc, r0
   174c8:	ldr	r1, [pc, #280]	; 175e8 <flatcc_builder_check_union_field@@Base+0x154>
   174cc:	add	r1, pc, r1
   174d0:	ldr	r2, [pc, #276]	; 175ec <flatcc_builder_check_union_field@@Base+0x158>
   174d4:	add	r3, pc, r2
   174d8:	movw	r2, #1279	; 0x4ff
   174dc:	bl	127a8 <__assert_fail@plt>
   174e0:	ldrh	r0, [sp, #6]
   174e4:	cmp	r0, #0
   174e8:	beq	17500 <flatcc_builder_check_union_field@@Base+0x6c>
   174ec:	ldrh	r0, [sp, #6]
   174f0:	ldr	r1, [sp, #8]
   174f4:	ldrh	r1, [r1, #8]
   174f8:	cmp	r0, r1
   174fc:	blt	1750c <flatcc_builder_check_union_field@@Base+0x78>
   17500:	movw	r0, #0
   17504:	str	r0, [fp, #-4]
   17508:	b	175d8 <flatcc_builder_check_union_field@@Base+0x144>
   1750c:	ldr	r0, [sp, #8]
   17510:	ldr	r0, [r0, #4]
   17514:	ldrh	r1, [sp, #6]
   17518:	sub	r1, r1, #1
   1751c:	add	r0, r0, r1, lsl #1
   17520:	ldrh	r0, [r0]
   17524:	cmp	r0, #0
   17528:	bne	17558 <flatcc_builder_check_union_field@@Base+0xc4>
   1752c:	ldr	r0, [sp, #8]
   17530:	ldr	r0, [r0, #4]
   17534:	ldrh	r1, [sp, #6]
   17538:	add	r0, r0, r1, lsl #1
   1753c:	ldrh	r0, [r0]
   17540:	cmp	r0, #0
   17544:	movw	r0, #0
   17548:	moveq	r0, #1
   1754c:	and	r0, r0, #1
   17550:	str	r0, [fp, #-4]
   17554:	b	175d8 <flatcc_builder_check_union_field@@Base+0x144>
   17558:	ldr	r0, [sp, #8]
   1755c:	ldr	r1, [r0, #4]
   17560:	ldr	r0, [r0, #16]
   17564:	ldrh	r2, [sp, #6]
   17568:	sub	r2, r2, #1
   1756c:	add	r1, r1, r2, lsl #1
   17570:	ldrh	r1, [r1]
   17574:	add	r0, r0, r1
   17578:	ldrsb	r0, [r0]
   1757c:	cmp	r0, #0
   17580:	beq	175b0 <flatcc_builder_check_union_field@@Base+0x11c>
   17584:	ldr	r0, [sp, #8]
   17588:	ldr	r0, [r0, #4]
   1758c:	ldrh	r1, [sp, #6]
   17590:	add	r0, r0, r1, lsl #1
   17594:	ldrh	r0, [r0]
   17598:	cmp	r0, #0
   1759c:	movw	r0, #0
   175a0:	movne	r0, #1
   175a4:	and	r0, r0, #1
   175a8:	str	r0, [fp, #-4]
   175ac:	b	175d8 <flatcc_builder_check_union_field@@Base+0x144>
   175b0:	ldr	r0, [sp, #8]
   175b4:	ldr	r0, [r0, #4]
   175b8:	ldrh	r1, [sp, #6]
   175bc:	add	r0, r0, r1, lsl #1
   175c0:	ldrh	r0, [r0]
   175c4:	cmp	r0, #0
   175c8:	movw	r0, #0
   175cc:	moveq	r0, #1
   175d0:	and	r0, r0, #1
   175d4:	str	r0, [fp, #-4]
   175d8:	ldr	r0, [fp, #-4]
   175dc:	mov	sp, fp
   175e0:	pop	{fp, pc}
   175e4:	ldrdeq	r6, [r0], -lr
   175e8:	andeq	r6, r0, sl, lsr #7
   175ec:	andeq	r6, r0, ip, asr #24

000175f0 <flatcc_builder_check_required@@Base>:
   175f0:	push	{fp, lr}
   175f4:	mov	fp, sp
   175f8:	sub	sp, sp, #24
   175fc:	str	r0, [fp, #-8]
   17600:	str	r1, [sp, #12]
   17604:	str	r2, [sp, #8]
   17608:	ldr	r0, [fp, #-8]
   1760c:	ldr	r0, [r0, #32]
   17610:	ldrh	r0, [r0, #14]
   17614:	cmp	r0, #3
   17618:	bne	17620 <flatcc_builder_check_required@@Base+0x30>
   1761c:	b	17640 <flatcc_builder_check_required@@Base+0x50>
   17620:	ldr	r0, [pc, #172]	; 176d4 <flatcc_builder_check_required@@Base+0xe4>
   17624:	add	r0, pc, r0
   17628:	ldr	r1, [pc, #168]	; 176d8 <flatcc_builder_check_required@@Base+0xe8>
   1762c:	add	r1, pc, r1
   17630:	ldr	r2, [pc, #164]	; 176dc <flatcc_builder_check_required@@Base+0xec>
   17634:	add	r3, pc, r2
   17638:	movw	r2, #1297	; 0x511
   1763c:	bl	127a8 <__assert_fail@plt>
   17640:	ldr	r0, [fp, #-8]
   17644:	ldrh	r0, [r0, #8]
   17648:	ldr	r1, [sp, #8]
   1764c:	cmp	r0, r1
   17650:	bge	17660 <flatcc_builder_check_required@@Base+0x70>
   17654:	movw	r0, #0
   17658:	str	r0, [fp, #-4]
   1765c:	b	176c8 <flatcc_builder_check_required@@Base+0xd8>
   17660:	movw	r0, #0
   17664:	str	r0, [sp, #4]
   17668:	ldr	r0, [sp, #4]
   1766c:	ldr	r1, [sp, #8]
   17670:	cmp	r0, r1
   17674:	bge	176c0 <flatcc_builder_check_required@@Base+0xd0>
   17678:	ldr	r0, [fp, #-8]
   1767c:	ldr	r0, [r0, #4]
   17680:	ldr	r1, [sp, #12]
   17684:	ldr	r2, [sp, #4]
   17688:	add	r1, r1, r2, lsl #1
   1768c:	ldrh	r1, [r1]
   17690:	add	r0, r0, r1, lsl #1
   17694:	ldrh	r0, [r0]
   17698:	cmp	r0, #0
   1769c:	bne	176ac <flatcc_builder_check_required@@Base+0xbc>
   176a0:	movw	r0, #0
   176a4:	str	r0, [fp, #-4]
   176a8:	b	176c8 <flatcc_builder_check_required@@Base+0xd8>
   176ac:	b	176b0 <flatcc_builder_check_required@@Base+0xc0>
   176b0:	ldr	r0, [sp, #4]
   176b4:	add	r0, r0, #1
   176b8:	str	r0, [sp, #4]
   176bc:	b	17668 <flatcc_builder_check_required@@Base+0x78>
   176c0:	movw	r0, #1
   176c4:	str	r0, [fp, #-4]
   176c8:	ldr	r0, [fp, #-4]
   176cc:	mov	sp, fp
   176d0:	pop	{fp, pc}
   176d4:	andeq	r6, r0, lr, ror sl
   176d8:	andeq	r6, r0, sl, asr #4
   176dc:	andeq	r6, r0, ip, lsr fp

000176e0 <flatcc_builder_end_table@@Base>:
   176e0:	push	{r4, r5, fp, lr}
   176e4:	add	fp, sp, #8
   176e8:	sub	sp, sp, #48	; 0x30
   176ec:	str	r0, [fp, #-16]
   176f0:	ldr	r0, [fp, #-16]
   176f4:	ldr	r0, [r0, #32]
   176f8:	ldrh	r0, [r0, #14]
   176fc:	cmp	r0, #3
   17700:	bne	17708 <flatcc_builder_end_table@@Base+0x28>
   17704:	b	17728 <flatcc_builder_end_table@@Base+0x48>
   17708:	ldr	r0, [pc, #500]	; 17904 <flatcc_builder_end_table@@Base+0x224>
   1770c:	add	r0, pc, r0
   17710:	ldr	r1, [pc, #496]	; 17908 <flatcc_builder_end_table@@Base+0x228>
   17714:	add	r1, pc, r1
   17718:	ldr	r2, [pc, #492]	; 1790c <flatcc_builder_end_table@@Base+0x22c>
   1771c:	add	r3, pc, r2
   17720:	movw	r2, #1317	; 0x525
   17724:	bl	127a8 <__assert_fail@plt>
   17728:	ldr	r0, [pc, #480]	; 17910 <flatcc_builder_end_table@@Base+0x230>
   1772c:	ldr	r1, [fp, #-16]
   17730:	ldr	r1, [r1, #4]
   17734:	sub	r1, r1, #4
   17738:	str	r1, [fp, #-20]	; 0xffffffec
   1773c:	ldr	r1, [fp, #-16]
   17740:	ldrh	r1, [r1, #8]
   17744:	add	r1, r1, #2
   17748:	lsl	r1, r1, #1
   1774c:	strh	r1, [fp, #-22]	; 0xffffffea
   17750:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17754:	ldr	r2, [fp, #-20]	; 0xffffffec
   17758:	strh	r1, [r2]
   1775c:	ldr	r1, [fp, #-16]
   17760:	ldr	r1, [r1, #20]
   17764:	uxth	r1, r1
   17768:	add	r1, r1, #4
   1776c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17770:	strh	r1, [r2, #2]
   17774:	ldr	r1, [fp, #-20]	; 0xffffffec
   17778:	ldrh	r1, [r1]
   1777c:	ldr	r2, [fp, #-16]
   17780:	ldr	r2, [r2, #12]
   17784:	eor	r1, r1, r2
   17788:	mul	r1, r1, r0
   1778c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17790:	ldrh	r2, [r2, #2]
   17794:	eor	r1, r1, r2
   17798:	mul	r0, r1, r0
   1779c:	ldr	r1, [fp, #-16]
   177a0:	str	r0, [r1, #12]
   177a4:	ldr	r0, [fp, #-16]
   177a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   177ac:	ldrh	r2, [fp, #-22]	; 0xffffffea
   177b0:	ldr	r3, [fp, #-16]
   177b4:	ldr	r3, [r3, #12]
   177b8:	uxth	r2, r2
   177bc:	bl	16d8c <flatcc_builder_create_cached_vtable@@Base>
   177c0:	str	r0, [sp, #24]
   177c4:	cmp	r0, #0
   177c8:	bne	177d8 <flatcc_builder_end_table@@Base+0xf8>
   177cc:	movw	r0, #0
   177d0:	str	r0, [fp, #-12]
   177d4:	b	178f8 <flatcc_builder_end_table@@Base+0x218>
   177d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   177dc:	ldrh	r2, [fp, #-22]	; 0xffffffea
   177e0:	mov	r1, #0
   177e4:	bl	12778 <memset@plt>
   177e8:	ldr	r1, [fp, #-16]
   177ec:	ldr	r2, [r1, #32]
   177f0:	ldr	r1, [r1, #76]	; 0x4c
   177f4:	ldr	r2, [r2, #20]
   177f8:	add	r1, r1, r2
   177fc:	str	r1, [sp, #16]
   17800:	ldr	r1, [fp, #-16]
   17804:	ldr	r1, [r1]
   17808:	ldr	r2, [sp, #16]
   1780c:	sub	r1, r1, r2
   17810:	asr	r1, r1, #1
   17814:	str	r1, [sp, #20]
   17818:	ldr	r1, [fp, #-16]
   1781c:	ldr	r2, [fp, #-16]
   17820:	ldr	r2, [r2, #16]
   17824:	ldr	lr, [fp, #-16]
   17828:	ldr	lr, [lr, #20]
   1782c:	ldr	r3, [fp, #-16]
   17830:	ldrh	r3, [r3, #130]	; 0x82
   17834:	ldr	ip, [sp, #16]
   17838:	ldr	r4, [sp, #20]
   1783c:	ldr	r5, [sp, #24]
   17840:	str	r0, [sp, #12]
   17844:	mov	r0, r1
   17848:	mov	r1, r2
   1784c:	mov	r2, lr
   17850:	uxth	r3, r3
   17854:	str	ip, [sp]
   17858:	str	r4, [sp, #4]
   1785c:	str	r5, [sp, #8]
   17860:	bl	1711c <flatcc_builder_create_table@@Base>
   17864:	str	r0, [sp, #28]
   17868:	movw	r1, #0
   1786c:	cmp	r1, r0
   17870:	bne	17880 <flatcc_builder_end_table@@Base+0x1a0>
   17874:	movw	r0, #0
   17878:	str	r0, [fp, #-12]
   1787c:	b	178f8 <flatcc_builder_end_table@@Base+0x218>
   17880:	ldr	r0, [fp, #-16]
   17884:	ldr	r0, [r0, #32]
   17888:	ldr	r0, [r0, #24]
   1788c:	ldr	r1, [fp, #-16]
   17890:	str	r0, [r1, #12]
   17894:	ldr	r0, [fp, #-16]
   17898:	ldr	r0, [r0, #32]
   1789c:	ldrh	r0, [r0, #28]
   178a0:	ldr	r1, [fp, #-16]
   178a4:	strh	r0, [r1, #8]
   178a8:	ldr	r0, [fp, #-16]
   178ac:	ldr	r0, [r0, #52]	; 0x34
   178b0:	ldr	r1, [fp, #-16]
   178b4:	ldr	r1, [r1, #32]
   178b8:	ldr	r1, [r1, #16]
   178bc:	add	r0, r0, r1
   178c0:	ldr	r1, [fp, #-16]
   178c4:	str	r0, [r1, #4]
   178c8:	ldr	r0, [fp, #-16]
   178cc:	ldr	r0, [r0, #76]	; 0x4c
   178d0:	ldr	r1, [fp, #-16]
   178d4:	ldr	r1, [r1, #32]
   178d8:	ldr	r1, [r1, #20]
   178dc:	add	r0, r0, r1
   178e0:	ldr	r1, [fp, #-16]
   178e4:	str	r0, [r1]
   178e8:	ldr	r0, [fp, #-16]
   178ec:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   178f0:	ldr	r0, [sp, #28]
   178f4:	str	r0, [fp, #-12]
   178f8:	ldr	r0, [fp, #-12]
   178fc:	sub	sp, fp, #8
   17900:	pop	{r4, r5, fp, pc}
   17904:	muleq	r0, r6, r9
   17908:	andeq	r6, r0, r2, ror #2
   1790c:	andeq	r6, r0, lr, lsr #21
   17910:			; <UNDEFINED> instruction: 0x9e3779b1

00017914 <flatcc_builder_create_vector@@Base>:
   17914:	push	{fp, lr}
   17918:	mov	fp, sp
   1791c:	sub	sp, sp, #112	; 0x70
   17920:	ldr	ip, [fp, #12]
   17924:	ldr	lr, [fp, #8]
   17928:	str	r0, [fp, #-8]
   1792c:	str	r1, [fp, #-12]
   17930:	str	r2, [fp, #-16]
   17934:	str	r3, [fp, #-20]	; 0xffffffec
   17938:	strh	lr, [fp, #-22]	; 0xffffffea
   1793c:	ldr	r0, [fp, #-16]
   17940:	ldr	r1, [fp, #12]
   17944:	cmp	r0, r1
   17948:	str	ip, [sp]
   1794c:	bls	17990 <flatcc_builder_create_vector@@Base+0x7c>
   17950:	ldr	r0, [fp, #-16]
   17954:	ldr	r1, [fp, #12]
   17958:	cmp	r0, r1
   1795c:	bhi	17964 <flatcc_builder_create_vector@@Base+0x50>
   17960:	b	17984 <flatcc_builder_create_vector@@Base+0x70>
   17964:	ldr	r0, [pc, #364]	; 17ad8 <flatcc_builder_create_vector@@Base+0x1c4>
   17968:	add	r0, pc, r0
   1796c:	ldr	r1, [pc, #360]	; 17adc <flatcc_builder_create_vector@@Base+0x1c8>
   17970:	add	r1, pc, r1
   17974:	ldr	r2, [pc, #356]	; 17ae0 <flatcc_builder_create_vector@@Base+0x1cc>
   17978:	add	r3, pc, r2
   1797c:	movw	r2, #1365	; 0x555
   17980:	bl	127a8 <__assert_fail@plt>
   17984:	movw	r0, #0
   17988:	str	r0, [fp, #-4]
   1798c:	b	17acc <flatcc_builder_create_vector@@Base+0x1b8>
   17990:	sub	r0, fp, #22
   17994:	mov	r1, #4
   17998:	bl	166a0 <flatcc_builder_start_vector@@Base+0xac>
   1799c:	ldr	r0, [fp, #-8]
   179a0:	ldrh	r1, [fp, #-22]	; 0xffffffea
   179a4:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   179a8:	ldr	r0, [fp, #-16]
   179ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   179b0:	mul	r0, r0, r1
   179b4:	str	r0, [fp, #-28]	; 0xffffffe4
   179b8:	ldr	r0, [fp, #-16]
   179bc:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   179c0:	str	r0, [fp, #-36]	; 0xffffffdc
   179c4:	ldr	r0, [fp, #-8]
   179c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   179cc:	ldrh	r2, [fp, #-22]	; 0xffffffea
   179d0:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   179d4:	str	r0, [fp, #-32]	; 0xffffffe0
   179d8:	mov	r0, #0
   179dc:	str	r0, [sp, #4]
   179e0:	str	r0, [sp, #8]
   179e4:	ldr	r0, [sp, #4]
   179e8:	add	r0, r0, #4
   179ec:	str	r0, [sp, #4]
   179f0:	add	r0, sp, #4
   179f4:	add	r0, r0, #8
   179f8:	ldr	r1, [sp, #8]
   179fc:	sub	r2, fp, #36	; 0x24
   17a00:	str	r2, [r0, r1, lsl #3]
   17a04:	ldr	r1, [sp, #8]
   17a08:	add	r0, r0, r1, lsl #3
   17a0c:	movw	r1, #4
   17a10:	str	r1, [r0, #4]
   17a14:	ldr	r0, [sp, #8]
   17a18:	add	r0, r0, #1
   17a1c:	str	r0, [sp, #8]
   17a20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17a24:	cmp	r0, #0
   17a28:	bls	17a6c <flatcc_builder_create_vector@@Base+0x158>
   17a2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17a30:	ldr	r1, [sp, #4]
   17a34:	add	r0, r1, r0
   17a38:	str	r0, [sp, #4]
   17a3c:	ldr	r0, [fp, #-12]
   17a40:	add	r1, sp, #4
   17a44:	add	r1, r1, #8
   17a48:	ldr	r2, [sp, #8]
   17a4c:	str	r0, [r1, r2, lsl #3]
   17a50:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17a54:	ldr	r2, [sp, #8]
   17a58:	add	r1, r1, r2, lsl #3
   17a5c:	str	r0, [r1, #4]
   17a60:	ldr	r0, [sp, #8]
   17a64:	add	r0, r0, #1
   17a68:	str	r0, [sp, #8]
   17a6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a70:	cmp	r0, #0
   17a74:	bls	17abc <flatcc_builder_create_vector@@Base+0x1a8>
   17a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a7c:	ldr	r1, [sp, #4]
   17a80:	add	r0, r1, r0
   17a84:	str	r0, [sp, #4]
   17a88:	add	r0, sp, #4
   17a8c:	add	r0, r0, #8
   17a90:	ldr	r1, [sp, #8]
   17a94:	ldr	r2, [pc, #72]	; 17ae4 <flatcc_builder_create_vector@@Base+0x1d0>
   17a98:	ldr	r2, [pc, r2]
   17a9c:	str	r2, [r0, r1, lsl #3]
   17aa0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17aa4:	ldr	r2, [sp, #8]
   17aa8:	add	r0, r0, r2, lsl #3
   17aac:	str	r1, [r0, #4]
   17ab0:	ldr	r0, [sp, #8]
   17ab4:	add	r0, r0, #1
   17ab8:	str	r0, [sp, #8]
   17abc:	ldr	r0, [fp, #-8]
   17ac0:	add	r1, sp, #4
   17ac4:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   17ac8:	str	r0, [fp, #-4]
   17acc:	ldr	r0, [fp, #-4]
   17ad0:	mov	sp, fp
   17ad4:	pop	{fp, pc}
   17ad8:	andeq	r6, r0, r4, lsr #17
   17adc:	andeq	r5, r0, r6, lsl #30
   17ae0:	andeq	r6, r0, r7, lsr #17
   17ae4:	andeq	r8, r1, r4, lsr #11

00017ae8 <flatcc_builder_end_vector@@Base>:
   17ae8:	push	{fp, lr}
   17aec:	mov	fp, sp
   17af0:	sub	sp, sp, #24
   17af4:	str	r0, [fp, #-8]
   17af8:	ldr	r0, [fp, #-8]
   17afc:	ldr	r0, [r0, #32]
   17b00:	ldrh	r0, [r0, #14]
   17b04:	cmp	r0, #4
   17b08:	bne	17b10 <flatcc_builder_end_vector@@Base+0x28>
   17b0c:	b	17b30 <flatcc_builder_end_vector@@Base+0x48>
   17b10:	ldr	r0, [pc, #152]	; 17bb0 <flatcc_builder_end_vector@@Base+0xc8>
   17b14:	add	r0, pc, r0
   17b18:	ldr	r1, [pc, #148]	; 17bb4 <flatcc_builder_end_vector@@Base+0xcc>
   17b1c:	add	r1, pc, r1
   17b20:	ldr	r2, [pc, #144]	; 17bb8 <flatcc_builder_end_vector@@Base+0xd0>
   17b24:	add	r3, pc, r2
   17b28:	movw	r2, #1400	; 0x578
   17b2c:	bl	127a8 <__assert_fail@plt>
   17b30:	ldr	r0, [fp, #-8]
   17b34:	ldr	r1, [fp, #-8]
   17b38:	ldr	r1, [r1, #16]
   17b3c:	ldr	r2, [fp, #-8]
   17b40:	ldr	r2, [r2, #32]
   17b44:	ldr	r2, [r2, #20]
   17b48:	ldr	r3, [fp, #-8]
   17b4c:	ldr	r3, [r3, #32]
   17b50:	ldr	r3, [r3, #16]
   17b54:	ldr	ip, [fp, #-8]
   17b58:	ldrh	ip, [ip, #130]	; 0x82
   17b5c:	ldr	lr, [fp, #-8]
   17b60:	ldr	lr, [lr, #32]
   17b64:	ldr	lr, [lr, #24]
   17b68:	uxth	ip, ip
   17b6c:	str	ip, [sp]
   17b70:	str	lr, [sp, #4]
   17b74:	bl	17914 <flatcc_builder_create_vector@@Base>
   17b78:	str	r0, [sp, #12]
   17b7c:	movw	r1, #0
   17b80:	cmp	r1, r0
   17b84:	bne	17b94 <flatcc_builder_end_vector@@Base+0xac>
   17b88:	movw	r0, #0
   17b8c:	str	r0, [fp, #-4]
   17b90:	b	17ba4 <flatcc_builder_end_vector@@Base+0xbc>
   17b94:	ldr	r0, [fp, #-8]
   17b98:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   17b9c:	ldr	r0, [sp, #12]
   17ba0:	str	r0, [fp, #-4]
   17ba4:	ldr	r0, [fp, #-4]
   17ba8:	mov	sp, fp
   17bac:	pop	{fp, pc}
   17bb0:	muleq	r0, ip, r0
   17bb4:	andeq	r5, r0, sl, asr sp
   17bb8:	andeq	r6, r0, r1, ror r7

00017bbc <flatcc_builder_vector_count@@Base>:
   17bbc:	sub	sp, sp, #4
   17bc0:	str	r0, [sp]
   17bc4:	ldr	r0, [sp]
   17bc8:	ldr	r0, [r0, #32]
   17bcc:	ldr	r0, [r0, #20]
   17bd0:	add	sp, sp, #4
   17bd4:	bx	lr

00017bd8 <flatcc_builder_vector_edit@@Base>:
   17bd8:	sub	sp, sp, #4
   17bdc:	str	r0, [sp]
   17be0:	ldr	r0, [sp]
   17be4:	ldr	r0, [r0, #16]
   17be8:	add	sp, sp, #4
   17bec:	bx	lr

00017bf0 <flatcc_builder_create_offset_vector_direct@@Base>:
   17bf0:	push	{fp, lr}
   17bf4:	mov	fp, sp
   17bf8:	sub	sp, sp, #16
   17bfc:	str	r0, [fp, #-4]
   17c00:	str	r1, [sp, #8]
   17c04:	str	r2, [sp, #4]
   17c08:	ldr	r0, [fp, #-4]
   17c0c:	ldr	r1, [sp, #8]
   17c10:	ldr	r2, [sp, #4]
   17c14:	movw	r3, #0
   17c18:	bl	17c24 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17c1c:	mov	sp, fp
   17c20:	pop	{fp, pc}
   17c24:	push	{fp, lr}
   17c28:	mov	fp, sp
   17c2c:	sub	sp, sp, #120	; 0x78
   17c30:	ldr	ip, [pc, #696]	; 17ef0 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   17c34:	str	r0, [fp, #-8]
   17c38:	str	r1, [fp, #-12]
   17c3c:	str	r2, [fp, #-16]
   17c40:	str	r3, [fp, #-20]	; 0xffffffec
   17c44:	ldr	r0, [fp, #-16]
   17c48:	cmp	r0, ip
   17c4c:	bls	17c5c <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   17c50:	movw	r0, #0
   17c54:	str	r0, [fp, #-4]
   17c58:	b	17ee4 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   17c5c:	ldr	r0, [fp, #-8]
   17c60:	mov	r1, #4
   17c64:	str	r1, [sp]
   17c68:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   17c6c:	ldr	r0, [fp, #-16]
   17c70:	lsl	r0, r0, #2
   17c74:	str	r0, [fp, #-24]	; 0xffffffe8
   17c78:	ldr	r0, [fp, #-16]
   17c7c:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   17c80:	str	r0, [fp, #-32]	; 0xffffffe0
   17c84:	ldr	r0, [fp, #-8]
   17c88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17c8c:	ldr	r2, [sp]
   17c90:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   17c94:	str	r0, [fp, #-28]	; 0xffffffe4
   17c98:	mov	r0, #0
   17c9c:	str	r0, [sp, #4]
   17ca0:	str	r0, [sp, #8]
   17ca4:	ldr	r0, [sp, #4]
   17ca8:	add	r0, r0, #4
   17cac:	str	r0, [sp, #4]
   17cb0:	add	r0, sp, #4
   17cb4:	add	r0, r0, #8
   17cb8:	ldr	r1, [sp, #8]
   17cbc:	sub	r2, fp, #32
   17cc0:	str	r2, [r0, r1, lsl #3]
   17cc4:	ldr	r1, [sp, #8]
   17cc8:	add	r0, r0, r1, lsl #3
   17ccc:	movw	r1, #4
   17cd0:	str	r1, [r0, #4]
   17cd4:	ldr	r0, [sp, #8]
   17cd8:	add	r0, r0, #1
   17cdc:	str	r0, [sp, #8]
   17ce0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ce4:	cmp	r0, #0
   17ce8:	bls	17d2c <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   17cec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cf0:	ldr	r1, [sp, #4]
   17cf4:	add	r0, r1, r0
   17cf8:	str	r0, [sp, #4]
   17cfc:	ldr	r0, [fp, #-12]
   17d00:	add	r1, sp, #4
   17d04:	add	r1, r1, #8
   17d08:	ldr	r2, [sp, #8]
   17d0c:	str	r0, [r1, r2, lsl #3]
   17d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d14:	ldr	r2, [sp, #8]
   17d18:	add	r1, r1, r2, lsl #3
   17d1c:	str	r0, [r1, #4]
   17d20:	ldr	r0, [sp, #8]
   17d24:	add	r0, r0, #1
   17d28:	str	r0, [sp, #8]
   17d2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17d30:	cmp	r0, #0
   17d34:	bls	17d7c <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   17d38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17d3c:	ldr	r1, [sp, #4]
   17d40:	add	r0, r1, r0
   17d44:	str	r0, [sp, #4]
   17d48:	add	r0, sp, #4
   17d4c:	add	r0, r0, #8
   17d50:	ldr	r1, [sp, #8]
   17d54:	ldr	r2, [pc, #444]	; 17f18 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   17d58:	ldr	r2, [pc, r2]
   17d5c:	str	r2, [r0, r1, lsl #3]
   17d60:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17d64:	ldr	r2, [sp, #8]
   17d68:	add	r0, r0, r2, lsl #3
   17d6c:	str	r1, [r0, #4]
   17d70:	ldr	r0, [sp, #8]
   17d74:	add	r0, r0, #1
   17d78:	str	r0, [sp, #8]
   17d7c:	ldr	r0, [fp, #-8]
   17d80:	ldr	r0, [r0, #136]	; 0x88
   17d84:	ldr	r1, [sp, #4]
   17d88:	sub	r0, r0, r1
   17d8c:	str	r0, [fp, #-36]	; 0xffffffdc
   17d90:	movw	r0, #0
   17d94:	str	r0, [fp, #-44]	; 0xffffffd4
   17d98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17d9c:	ldr	r1, [fp, #-16]
   17da0:	cmp	r0, r1
   17da4:	bcs	17ed4 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   17da8:	ldr	r0, [fp, #-12]
   17dac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17db0:	add	r0, r0, r1, lsl #2
   17db4:	ldr	r0, [r0]
   17db8:	cmp	r0, #0
   17dbc:	beq	17e4c <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   17dc0:	ldr	r0, [fp, #-12]
   17dc4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17dc8:	ldr	r0, [r0, r1, lsl #2]
   17dcc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17dd0:	sub	r0, r0, r2
   17dd4:	sub	r0, r0, r1, lsl #2
   17dd8:	sub	r0, r0, #4
   17ddc:	str	r0, [fp, #-40]	; 0xffffffd8
   17de0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17de4:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   17de8:	ldr	r1, [fp, #-12]
   17dec:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17df0:	add	r1, r1, r2, lsl #2
   17df4:	str	r0, [r1]
   17df8:	ldr	r0, [fp, #-20]	; 0xffffffec
   17dfc:	movw	r1, #0
   17e00:	cmp	r0, r1
   17e04:	beq	17e48 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17e08:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17e10:	add	r0, r0, r1
   17e14:	ldrb	r0, [r0]
   17e18:	cmp	r0, #0
   17e1c:	beq	17e24 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   17e20:	b	17e44 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   17e24:	ldr	r0, [pc, #224]	; 17f0c <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   17e28:	add	r0, pc, r0
   17e2c:	ldr	r1, [pc, #220]	; 17f10 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   17e30:	add	r1, pc, r1
   17e34:	ldr	r2, [pc, #216]	; 17f14 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   17e38:	add	r3, pc, r2
   17e3c:	movw	r2, #1457	; 0x5b1
   17e40:	bl	127a8 <__assert_fail@plt>
   17e44:	b	17e48 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17e48:	b	17ec0 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17e4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e50:	movw	r1, #0
   17e54:	cmp	r0, r1
   17e58:	beq	17e9c <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   17e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e60:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17e64:	add	r0, r0, r1
   17e68:	ldrb	r0, [r0]
   17e6c:	cmp	r0, #0
   17e70:	bne	17e78 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   17e74:	b	17e98 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   17e78:	ldr	r0, [pc, #128]	; 17f00 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   17e7c:	add	r0, pc, r0
   17e80:	ldr	r1, [pc, #124]	; 17f04 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   17e84:	add	r1, pc, r1
   17e88:	ldr	r2, [pc, #120]	; 17f08 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   17e8c:	add	r3, pc, r2
   17e90:	movw	r2, #1461	; 0x5b5
   17e94:	bl	127a8 <__assert_fail@plt>
   17e98:	b	17ebc <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   17e9c:	ldr	r0, [pc, #80]	; 17ef4 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   17ea0:	add	r0, pc, r0
   17ea4:	ldr	r1, [pc, #76]	; 17ef8 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   17ea8:	add	r1, pc, r1
   17eac:	ldr	r2, [pc, #72]	; 17efc <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   17eb0:	add	r3, pc, r2
   17eb4:	movw	r2, #1463	; 0x5b7
   17eb8:	bl	127a8 <__assert_fail@plt>
   17ebc:	b	17ec0 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17ec0:	b	17ec4 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   17ec4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17ec8:	add	r0, r0, #1
   17ecc:	str	r0, [fp, #-44]	; 0xffffffd4
   17ed0:	b	17d98 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   17ed4:	ldr	r0, [fp, #-8]
   17ed8:	add	r1, sp, #4
   17edc:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   17ee0:	str	r0, [fp, #-4]
   17ee4:	ldr	r0, [fp, #-4]
   17ee8:	mov	sp, fp
   17eec:	pop	{fp, pc}
   17ef0:	svccc	0x00ffffff
   17ef4:	muleq	r0, r3, fp
   17ef8:	andeq	r5, r0, lr, asr #19
   17efc:	andeq	r6, r0, r5, lsl #23
   17f00:	andeq	r6, r0, ip, lsr ip
   17f04:	strdeq	r5, [r0], -r2
   17f08:	andeq	r6, r0, r9, lsr #23
   17f0c:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   17f10:	andeq	r5, r0, r6, asr #20
   17f14:	strdeq	r6, [r0], -sp
   17f18:	andeq	r8, r1, r4, ror #5

00017f1c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17f1c:	push	{fp, lr}
   17f20:	mov	fp, sp
   17f24:	sub	sp, sp, #16
   17f28:	str	r0, [sp, #8]
   17f2c:	str	r1, [sp, #4]
   17f30:	ldr	r0, [sp, #8]
   17f34:	ldr	r0, [r0, #32]
   17f38:	ldrh	r0, [r0, #14]
   17f3c:	cmp	r0, #5
   17f40:	bne	17f48 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   17f44:	b	17f68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   17f48:	ldr	r0, [pc, #112]	; 17fc0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   17f4c:	add	r0, pc, r0
   17f50:	ldr	r1, [pc, #108]	; 17fc4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   17f54:	add	r1, pc, r1
   17f58:	ldr	r2, [pc, #104]	; 17fc8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   17f5c:	add	r3, pc, r2
   17f60:	movw	r2, #1493	; 0x5d5
   17f64:	bl	127a8 <__assert_fail@plt>
   17f68:	ldr	r0, [sp, #8]
   17f6c:	ldr	r1, [sp, #8]
   17f70:	ldr	r1, [r1, #16]
   17f74:	ldr	r2, [sp, #8]
   17f78:	ldr	r2, [r2, #32]
   17f7c:	ldr	r2, [r2, #20]
   17f80:	ldr	r3, [sp, #4]
   17f84:	bl	17c24 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17f88:	str	r0, [sp]
   17f8c:	movw	r1, #0
   17f90:	cmp	r1, r0
   17f94:	bne	17fa4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   17f98:	movw	r0, #0
   17f9c:	str	r0, [fp, #-4]
   17fa0:	b	17fb4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   17fa4:	ldr	r0, [sp, #8]
   17fa8:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   17fac:	ldr	r0, [sp]
   17fb0:	str	r0, [fp, #-4]
   17fb4:	ldr	r0, [fp, #-4]
   17fb8:	mov	sp, fp
   17fbc:	pop	{fp, pc}
   17fc0:	andeq	r5, r0, sp, asr sp
   17fc4:	andeq	r5, r0, r2, lsr #18
   17fc8:	andeq	r6, r0, r6, asr #7

00017fcc <flatcc_builder_offset_vector_edit@@Base>:
   17fcc:	sub	sp, sp, #4
   17fd0:	str	r0, [sp]
   17fd4:	ldr	r0, [sp]
   17fd8:	ldr	r0, [r0, #16]
   17fdc:	add	sp, sp, #4
   17fe0:	bx	lr

00017fe4 <flatcc_builder_offset_vector_count@@Base>:
   17fe4:	sub	sp, sp, #4
   17fe8:	str	r0, [sp]
   17fec:	ldr	r0, [sp]
   17ff0:	ldr	r0, [r0, #32]
   17ff4:	ldr	r0, [r0, #20]
   17ff8:	add	sp, sp, #4
   17ffc:	bx	lr

00018000 <flatcc_builder_table_add_union@@Base>:
   18000:	push	{fp, lr}
   18004:	mov	fp, sp
   18008:	sub	sp, sp, #32
   1800c:	str	r2, [fp, #-12]
   18010:	str	r3, [fp, #-8]
   18014:	str	r0, [sp, #16]
   18018:	str	r1, [sp, #12]
   1801c:	ldr	r0, [sp, #16]
   18020:	ldr	r0, [r0, #32]
   18024:	ldrh	r0, [r0, #14]
   18028:	cmp	r0, #3
   1802c:	bne	18034 <flatcc_builder_table_add_union@@Base+0x34>
   18030:	b	18054 <flatcc_builder_table_add_union@@Base+0x54>
   18034:	ldr	r0, [pc, #388]	; 181c0 <flatcc_builder_table_add_union@@Base+0x1c0>
   18038:	add	r0, pc, r0
   1803c:	ldr	r1, [pc, #384]	; 181c4 <flatcc_builder_table_add_union@@Base+0x1c4>
   18040:	add	r1, pc, r1
   18044:	ldr	r2, [pc, #380]	; 181c8 <flatcc_builder_table_add_union@@Base+0x1c8>
   18048:	add	r3, pc, r2
   1804c:	movw	r2, #1518	; 0x5ee
   18050:	bl	127a8 <__assert_fail@plt>
   18054:	ldrb	r0, [fp, #-12]
   18058:	cmp	r0, #0
   1805c:	bne	180b4 <flatcc_builder_table_add_union@@Base+0xb4>
   18060:	ldr	r0, [fp, #-8]
   18064:	cmp	r0, #0
   18068:	beq	180b4 <flatcc_builder_table_add_union@@Base+0xb4>
   1806c:	ldrb	r0, [fp, #-12]
   18070:	cmp	r0, #0
   18074:	bne	18084 <flatcc_builder_table_add_union@@Base+0x84>
   18078:	ldr	r0, [fp, #-8]
   1807c:	cmp	r0, #0
   18080:	bne	18088 <flatcc_builder_table_add_union@@Base+0x88>
   18084:	b	180a8 <flatcc_builder_table_add_union@@Base+0xa8>
   18088:	ldr	r0, [pc, #316]	; 181cc <flatcc_builder_table_add_union@@Base+0x1cc>
   1808c:	add	r0, pc, r0
   18090:	ldr	r1, [pc, #312]	; 181d0 <flatcc_builder_table_add_union@@Base+0x1d0>
   18094:	add	r1, pc, r1
   18098:	ldr	r2, [pc, #308]	; 181d4 <flatcc_builder_table_add_union@@Base+0x1d4>
   1809c:	add	r3, pc, r2
   180a0:	movw	r2, #1519	; 0x5ef
   180a4:	bl	127a8 <__assert_fail@plt>
   180a8:	mvn	r0, #0
   180ac:	str	r0, [fp, #-4]
   180b0:	b	181b4 <flatcc_builder_table_add_union@@Base+0x1b4>
   180b4:	ldr	r0, [fp, #-8]
   180b8:	cmp	r0, #0
   180bc:	beq	1812c <flatcc_builder_table_add_union@@Base+0x12c>
   180c0:	ldr	r0, [sp, #16]
   180c4:	ldr	r1, [sp, #12]
   180c8:	bl	181f0 <flatcc_builder_table_add_offset@@Base>
   180cc:	str	r0, [sp, #8]
   180d0:	ldr	r0, [sp, #8]
   180d4:	movw	r1, #0
   180d8:	cmp	r0, r1
   180dc:	bne	18120 <flatcc_builder_table_add_union@@Base+0x120>
   180e0:	ldr	r0, [sp, #8]
   180e4:	movw	r1, #0
   180e8:	cmp	r0, r1
   180ec:	beq	180f4 <flatcc_builder_table_add_union@@Base+0xf4>
   180f0:	b	18114 <flatcc_builder_table_add_union@@Base+0x114>
   180f4:	ldr	r0, [pc, #220]	; 181d8 <flatcc_builder_table_add_union@@Base+0x1d8>
   180f8:	add	r0, pc, r0
   180fc:	ldr	r1, [pc, #216]	; 181dc <flatcc_builder_table_add_union@@Base+0x1dc>
   18100:	add	r1, pc, r1
   18104:	ldr	r2, [pc, #212]	; 181e0 <flatcc_builder_table_add_union@@Base+0x1e0>
   18108:	add	r3, pc, r2
   1810c:	movw	r2, #1522	; 0x5f2
   18110:	bl	127a8 <__assert_fail@plt>
   18114:	mvn	r0, #0
   18118:	str	r0, [fp, #-4]
   1811c:	b	181b4 <flatcc_builder_table_add_union@@Base+0x1b4>
   18120:	ldr	r0, [fp, #-8]
   18124:	ldr	r1, [sp, #8]
   18128:	str	r0, [r1]
   1812c:	ldr	r0, [sp, #16]
   18130:	ldr	r1, [sp, #12]
   18134:	sub	r1, r1, #1
   18138:	movw	r2, #1
   1813c:	movw	r3, #1
   18140:	uxth	r3, r3
   18144:	bl	18320 <flatcc_builder_table_add@@Base>
   18148:	str	r0, [sp, #4]
   1814c:	ldr	r0, [sp, #4]
   18150:	movw	r1, #0
   18154:	cmp	r0, r1
   18158:	bne	1819c <flatcc_builder_table_add_union@@Base+0x19c>
   1815c:	ldr	r0, [sp, #4]
   18160:	movw	r1, #0
   18164:	cmp	r0, r1
   18168:	beq	18170 <flatcc_builder_table_add_union@@Base+0x170>
   1816c:	b	18190 <flatcc_builder_table_add_union@@Base+0x190>
   18170:	ldr	r0, [pc, #108]	; 181e4 <flatcc_builder_table_add_union@@Base+0x1e4>
   18174:	add	r0, pc, r0
   18178:	ldr	r1, [pc, #104]	; 181e8 <flatcc_builder_table_add_union@@Base+0x1e8>
   1817c:	add	r1, pc, r1
   18180:	ldr	r2, [pc, #100]	; 181ec <flatcc_builder_table_add_union@@Base+0x1ec>
   18184:	add	r3, pc, r2
   18188:	movw	r2, #1526	; 0x5f6
   1818c:	bl	127a8 <__assert_fail@plt>
   18190:	mvn	r0, #0
   18194:	str	r0, [fp, #-4]
   18198:	b	181b4 <flatcc_builder_table_add_union@@Base+0x1b4>
   1819c:	ldrb	r0, [fp, #-12]
   181a0:	bl	18488 <flatcc_builder_table_add@@Base+0x168>
   181a4:	ldr	lr, [sp, #4]
   181a8:	strb	r0, [lr]
   181ac:	movw	r0, #0
   181b0:	str	r0, [fp, #-4]
   181b4:	ldr	r0, [fp, #-4]
   181b8:	mov	sp, fp
   181bc:	pop	{fp, pc}
   181c0:	andeq	r6, r0, sl, rrx
   181c4:	andeq	r5, r0, r6, lsr r8
   181c8:	andeq	r6, r0, ip, asr #6
   181cc:	andeq	r6, r0, r0, ror #6
   181d0:	andeq	r5, r0, r2, ror #15
   181d4:	strdeq	r6, [r0], -r8
   181d8:	andeq	r6, r0, r6, lsl r3
   181dc:	andeq	r5, r0, r6, ror r7
   181e0:	andeq	r6, r0, ip, lsl #5
   181e4:	andeq	r6, r0, r4, lsr #5
   181e8:	strdeq	r5, [r0], -sl
   181ec:	andeq	r6, r0, r0, lsl r2

000181f0 <flatcc_builder_table_add_offset@@Base>:
   181f0:	push	{fp, lr}
   181f4:	mov	fp, sp
   181f8:	sub	sp, sp, #8
   181fc:	str	r0, [sp, #4]
   18200:	str	r1, [sp]
   18204:	ldr	r0, [sp, #4]
   18208:	ldr	r0, [r0, #32]
   1820c:	ldrh	r0, [r0, #14]
   18210:	cmp	r0, #3
   18214:	bne	1821c <flatcc_builder_table_add_offset@@Base+0x2c>
   18218:	b	1823c <flatcc_builder_table_add_offset@@Base+0x4c>
   1821c:	ldr	r0, [pc, #212]	; 182f8 <flatcc_builder_table_add_offset@@Base+0x108>
   18220:	add	r0, pc, r0
   18224:	ldr	r1, [pc, #208]	; 182fc <flatcc_builder_table_add_offset@@Base+0x10c>
   18228:	add	r1, pc, r1
   1822c:	ldr	r2, [pc, #204]	; 18300 <flatcc_builder_table_add_offset@@Base+0x110>
   18230:	add	r3, pc, r2
   18234:	movw	r2, #1811	; 0x713
   18238:	bl	127a8 <__assert_fail@plt>
   1823c:	ldr	r0, [sp]
   18240:	cmp	r0, #0
   18244:	blt	1825c <flatcc_builder_table_add_offset@@Base+0x6c>
   18248:	ldr	r0, [sp]
   1824c:	movw	r1, #32764	; 0x7ffc
   18250:	cmp	r0, r1
   18254:	bgt	1825c <flatcc_builder_table_add_offset@@Base+0x6c>
   18258:	b	1827c <flatcc_builder_table_add_offset@@Base+0x8c>
   1825c:	ldr	r0, [pc, #160]	; 18304 <flatcc_builder_table_add_offset@@Base+0x114>
   18260:	add	r0, pc, r0
   18264:	ldr	r1, [pc, #156]	; 18308 <flatcc_builder_table_add_offset@@Base+0x118>
   18268:	add	r1, pc, r1
   1826c:	ldr	r2, [pc, #152]	; 1830c <flatcc_builder_table_add_offset@@Base+0x11c>
   18270:	add	r3, pc, r2
   18274:	movw	r2, #1812	; 0x714
   18278:	bl	127a8 <__assert_fail@plt>
   1827c:	ldr	r0, [sp, #4]
   18280:	ldr	r0, [r0, #4]
   18284:	ldr	r1, [sp]
   18288:	add	r0, r0, r1, lsl #1
   1828c:	ldrh	r0, [r0]
   18290:	cmp	r0, #0
   18294:	beq	182b8 <flatcc_builder_table_add_offset@@Base+0xc8>
   18298:	ldr	r0, [pc, #116]	; 18314 <flatcc_builder_table_add_offset@@Base+0x124>
   1829c:	add	r0, pc, r0
   182a0:	ldr	r1, [pc, #112]	; 18318 <flatcc_builder_table_add_offset@@Base+0x128>
   182a4:	add	r1, pc, r1
   182a8:	ldr	r2, [pc, #108]	; 1831c <flatcc_builder_table_add_offset@@Base+0x12c>
   182ac:	add	r3, pc, r2
   182b0:	movw	r2, #1819	; 0x71b
   182b4:	bl	127a8 <__assert_fail@plt>
   182b8:	ldr	r0, [pc, #80]	; 18310 <flatcc_builder_table_add_offset@@Base+0x120>
   182bc:	ldr	r1, [sp]
   182c0:	ldr	r2, [sp, #4]
   182c4:	ldr	r2, [r2, #12]
   182c8:	eor	r1, r1, r2
   182cc:	mul	r1, r1, r0
   182d0:	eor	r1, r1, #4
   182d4:	mul	r0, r1, r0
   182d8:	ldr	r1, [sp, #4]
   182dc:	str	r0, [r1, #12]
   182e0:	ldr	r0, [sp, #4]
   182e4:	ldr	r1, [sp]
   182e8:	uxth	r1, r1
   182ec:	bl	192b0 <flatcc_builder_table_add_copy@@Base+0x64>
   182f0:	mov	sp, fp
   182f4:	pop	{fp, pc}
   182f8:	andeq	r5, r0, r2, lsl #29
   182fc:	andeq	r5, r0, lr, asr #12
   18300:	andeq	r6, r0, r6, ror #10
   18304:			; <UNDEFINED> instruction: 0x000064b6
   18308:	andeq	r5, r0, lr, lsl #12
   1830c:	andeq	r6, r0, r6, lsr #10
   18310:			; <UNDEFINED> instruction: 0x9e3779b1
   18314:	muleq	r0, r7, r7
   18318:	ldrdeq	r5, [r0], -r2
   1831c:	andeq	r6, r0, sl, ror #9

00018320 <flatcc_builder_table_add@@Base>:
   18320:	push	{fp, lr}
   18324:	mov	fp, sp
   18328:	sub	sp, sp, #16
   1832c:	str	r0, [fp, #-4]
   18330:	str	r1, [sp, #8]
   18334:	str	r2, [sp, #4]
   18338:	strh	r3, [sp, #2]
   1833c:	ldr	r0, [fp, #-4]
   18340:	ldr	r0, [r0, #32]
   18344:	ldrh	r0, [r0, #14]
   18348:	cmp	r0, #3
   1834c:	bne	18354 <flatcc_builder_table_add@@Base+0x34>
   18350:	b	18374 <flatcc_builder_table_add@@Base+0x54>
   18354:	ldr	r0, [pc, #260]	; 18460 <flatcc_builder_table_add@@Base+0x140>
   18358:	add	r0, pc, r0
   1835c:	ldr	r1, [pc, #256]	; 18464 <flatcc_builder_table_add@@Base+0x144>
   18360:	add	r1, pc, r1
   18364:	ldr	r2, [pc, #252]	; 18468 <flatcc_builder_table_add@@Base+0x148>
   18368:	add	r3, pc, r2
   1836c:	movw	r2, #1773	; 0x6ed
   18370:	bl	127a8 <__assert_fail@plt>
   18374:	ldr	r0, [sp, #8]
   18378:	cmp	r0, #0
   1837c:	blt	18394 <flatcc_builder_table_add@@Base+0x74>
   18380:	ldr	r0, [sp, #8]
   18384:	movw	r1, #32764	; 0x7ffc
   18388:	cmp	r0, r1
   1838c:	bgt	18394 <flatcc_builder_table_add@@Base+0x74>
   18390:	b	183b4 <flatcc_builder_table_add@@Base+0x94>
   18394:	ldr	r0, [pc, #208]	; 1846c <flatcc_builder_table_add@@Base+0x14c>
   18398:	add	r0, pc, r0
   1839c:	ldr	r1, [pc, #204]	; 18470 <flatcc_builder_table_add@@Base+0x150>
   183a0:	add	r1, pc, r1
   183a4:	ldr	r2, [pc, #200]	; 18474 <flatcc_builder_table_add@@Base+0x154>
   183a8:	add	r3, pc, r2
   183ac:	movw	r2, #1774	; 0x6ee
   183b0:	bl	127a8 <__assert_fail@plt>
   183b4:	ldrh	r0, [sp, #2]
   183b8:	ldr	r1, [fp, #-4]
   183bc:	ldrh	r1, [r1, #130]	; 0x82
   183c0:	cmp	r0, r1
   183c4:	ble	183d4 <flatcc_builder_table_add@@Base+0xb4>
   183c8:	ldrh	r0, [sp, #2]
   183cc:	ldr	r1, [fp, #-4]
   183d0:	strh	r0, [r1, #130]	; 0x82
   183d4:	ldr	r0, [fp, #-4]
   183d8:	ldr	r0, [r0, #4]
   183dc:	ldr	r1, [sp, #8]
   183e0:	add	r0, r0, r1, lsl #1
   183e4:	ldrh	r0, [r0]
   183e8:	cmp	r0, #0
   183ec:	beq	18410 <flatcc_builder_table_add@@Base+0xf0>
   183f0:	ldr	r0, [pc, #132]	; 1847c <flatcc_builder_table_add@@Base+0x15c>
   183f4:	add	r0, pc, r0
   183f8:	ldr	r1, [pc, #128]	; 18480 <flatcc_builder_table_add@@Base+0x160>
   183fc:	add	r1, pc, r1
   18400:	ldr	r2, [pc, #124]	; 18484 <flatcc_builder_table_add@@Base+0x164>
   18404:	add	r3, pc, r2
   18408:	movw	r2, #1784	; 0x6f8
   1840c:	bl	127a8 <__assert_fail@plt>
   18410:	ldr	r0, [pc, #96]	; 18478 <flatcc_builder_table_add@@Base+0x158>
   18414:	ldr	r1, [sp, #8]
   18418:	ldr	r2, [fp, #-4]
   1841c:	ldr	r2, [r2, #12]
   18420:	eor	r1, r1, r2
   18424:	mul	r1, r1, r0
   18428:	ldr	r2, [sp, #4]
   1842c:	eor	r1, r1, r2
   18430:	mul	r0, r1, r0
   18434:	ldr	r1, [fp, #-4]
   18438:	str	r0, [r1, #12]
   1843c:	ldr	r0, [fp, #-4]
   18440:	ldr	r1, [sp, #4]
   18444:	ldrh	r2, [sp, #2]
   18448:	ldr	r3, [sp, #8]
   1844c:	uxth	r2, r2
   18450:	uxth	r3, r3
   18454:	bl	190cc <flatcc_builder_string_len@@Base+0x1c>
   18458:	mov	sp, fp
   1845c:	pop	{fp, pc}
   18460:	andeq	r5, r0, sl, asr #26
   18464:	andeq	r5, r0, r6, lsl r5
   18468:	andeq	r6, r0, r4, ror #6
   1846c:	andeq	r6, r0, lr, ror r3
   18470:	ldrdeq	r5, [r0], -r6
   18474:	andeq	r6, r0, r4, lsr #6
   18478:			; <UNDEFINED> instruction: 0x9e3779b1
   1847c:	andeq	r6, r0, pc, lsr r6
   18480:	andeq	r5, r0, sl, ror r4
   18484:	andeq	r6, r0, r8, asr #5
   18488:	sub	sp, sp, #4
   1848c:	strb	r0, [sp, #3]
   18490:	ldrb	r0, [sp, #3]
   18494:	add	sp, sp, #4
   18498:	bx	lr

0001849c <flatcc_builder_table_add_union_vector@@Base>:
   1849c:	push	{fp, lr}
   184a0:	mov	fp, sp
   184a4:	sub	sp, sp, #24
   184a8:	str	r2, [sp, #12]
   184ac:	str	r3, [sp, #16]
   184b0:	str	r0, [sp, #8]
   184b4:	str	r1, [sp, #4]
   184b8:	ldr	r0, [sp, #8]
   184bc:	ldr	r0, [r0, #32]
   184c0:	ldrh	r0, [r0, #14]
   184c4:	cmp	r0, #3
   184c8:	bne	184d0 <flatcc_builder_table_add_union_vector@@Base+0x34>
   184cc:	b	184f0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   184d0:	ldr	r0, [pc, #420]	; 1867c <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   184d4:	add	r0, pc, r0
   184d8:	ldr	r1, [pc, #416]	; 18680 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   184dc:	add	r1, pc, r1
   184e0:	ldr	r2, [pc, #412]	; 18684 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   184e4:	add	r3, pc, r2
   184e8:	movw	r2, #1536	; 0x600
   184ec:	bl	127a8 <__assert_fail@plt>
   184f0:	ldr	r0, [sp, #12]
   184f4:	cmp	r0, #0
   184f8:	movw	r0, #0
   184fc:	moveq	r0, #1
   18500:	and	r0, r0, #1
   18504:	ldr	r1, [sp, #16]
   18508:	cmp	r1, #0
   1850c:	movw	r1, #0
   18510:	moveq	r1, #1
   18514:	and	r1, r1, #1
   18518:	cmp	r0, r1
   1851c:	beq	18580 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18520:	ldr	r0, [sp, #12]
   18524:	cmp	r0, #0
   18528:	movw	r0, #0
   1852c:	moveq	r0, #1
   18530:	and	r0, r0, #1
   18534:	ldr	r1, [sp, #16]
   18538:	cmp	r1, #0
   1853c:	movw	r1, #0
   18540:	moveq	r1, #1
   18544:	and	r1, r1, #1
   18548:	cmp	r0, r1
   1854c:	bne	18554 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   18550:	b	18574 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   18554:	ldr	r0, [pc, #300]	; 18688 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18558:	add	r0, pc, r0
   1855c:	ldr	r1, [pc, #296]	; 1868c <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18560:	add	r1, pc, r1
   18564:	ldr	r2, [pc, #292]	; 18690 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18568:	add	r3, pc, r2
   1856c:	movw	r2, #1537	; 0x601
   18570:	bl	127a8 <__assert_fail@plt>
   18574:	mvn	r0, #0
   18578:	str	r0, [fp, #-4]
   1857c:	b	18670 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18580:	ldr	r0, [sp, #12]
   18584:	cmp	r0, #0
   18588:	beq	18668 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   1858c:	ldr	r0, [sp, #8]
   18590:	ldr	r1, [sp, #4]
   18594:	sub	r1, r1, #1
   18598:	bl	181f0 <flatcc_builder_table_add_offset@@Base>
   1859c:	str	r0, [sp]
   185a0:	ldr	r0, [sp]
   185a4:	movw	r1, #0
   185a8:	cmp	r0, r1
   185ac:	bne	185f0 <flatcc_builder_table_add_union_vector@@Base+0x154>
   185b0:	ldr	r0, [sp]
   185b4:	movw	r1, #0
   185b8:	cmp	r0, r1
   185bc:	beq	185c4 <flatcc_builder_table_add_union_vector@@Base+0x128>
   185c0:	b	185e4 <flatcc_builder_table_add_union_vector@@Base+0x148>
   185c4:	ldr	r0, [pc, #200]	; 18694 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   185c8:	add	r0, pc, r0
   185cc:	ldr	r1, [pc, #196]	; 18698 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   185d0:	add	r1, pc, r1
   185d4:	ldr	r2, [pc, #192]	; 1869c <flatcc_builder_table_add_union_vector@@Base+0x200>
   185d8:	add	r3, pc, r2
   185dc:	movw	r2, #1540	; 0x604
   185e0:	bl	127a8 <__assert_fail@plt>
   185e4:	mvn	r0, #0
   185e8:	str	r0, [fp, #-4]
   185ec:	b	18670 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   185f0:	ldr	r0, [sp, #12]
   185f4:	ldr	r1, [sp]
   185f8:	str	r0, [r1]
   185fc:	ldr	r0, [sp, #8]
   18600:	ldr	r1, [sp, #4]
   18604:	bl	181f0 <flatcc_builder_table_add_offset@@Base>
   18608:	str	r0, [sp]
   1860c:	ldr	r0, [sp]
   18610:	movw	r1, #0
   18614:	cmp	r0, r1
   18618:	bne	1865c <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   1861c:	ldr	r0, [sp]
   18620:	movw	r1, #0
   18624:	cmp	r0, r1
   18628:	beq	18630 <flatcc_builder_table_add_union_vector@@Base+0x194>
   1862c:	b	18650 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18630:	ldr	r0, [pc, #104]	; 186a0 <flatcc_builder_table_add_union_vector@@Base+0x204>
   18634:	add	r0, pc, r0
   18638:	ldr	r1, [pc, #100]	; 186a4 <flatcc_builder_table_add_union_vector@@Base+0x208>
   1863c:	add	r1, pc, r1
   18640:	ldr	r2, [pc, #96]	; 186a8 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   18644:	add	r3, pc, r2
   18648:	movw	r2, #1544	; 0x608
   1864c:	bl	127a8 <__assert_fail@plt>
   18650:	mvn	r0, #0
   18654:	str	r0, [fp, #-4]
   18658:	b	18670 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1865c:	ldr	r0, [sp, #16]
   18660:	ldr	r1, [sp]
   18664:	str	r0, [r1]
   18668:	movw	r0, #0
   1866c:	str	r0, [fp, #-4]
   18670:	ldr	r0, [fp, #-4]
   18674:	mov	sp, fp
   18678:	pop	{fp, pc}
   1867c:	andeq	r5, r0, lr, asr #23
   18680:	muleq	r0, sl, r3
   18684:	andeq	r5, r0, r0, asr #30
   18688:	andeq	r5, r0, pc, lsr #30
   1868c:	andeq	r5, r0, r6, lsl r3
   18690:			; <UNDEFINED> instruction: 0x00005ebc
   18694:	andeq	r5, r0, r6, asr #28
   18698:	andeq	r5, r0, r6, lsr #5
   1869c:	andeq	r5, r0, ip, asr #28
   186a0:	ldrdeq	r5, [r0], -sl
   186a4:	andeq	r5, r0, sl, lsr r2
   186a8:	andeq	r5, r0, r0, ror #27

000186ac <flatcc_builder_create_union_vector@@Base>:
   186ac:	push	{fp, lr}
   186b0:	mov	fp, sp
   186b4:	sub	sp, sp, #48	; 0x30
   186b8:	str	r1, [fp, #-4]
   186bc:	str	r2, [fp, #-8]
   186c0:	str	r3, [fp, #-12]
   186c4:	mov	r1, r0
   186c8:	str	r0, [sp, #12]
   186cc:	mov	r0, r1
   186d0:	movw	r1, #0
   186d4:	and	r1, r1, #255	; 0xff
   186d8:	movw	r2, #8
   186dc:	bl	12778 <memset@plt>
   186e0:	ldr	r0, [fp, #-4]
   186e4:	bl	166d4 <flatcc_builder_start_offset_vector@@Base>
   186e8:	cmp	r0, #0
   186ec:	beq	186f4 <flatcc_builder_create_union_vector@@Base+0x48>
   186f0:	b	187d8 <flatcc_builder_create_union_vector@@Base+0x12c>
   186f4:	ldr	r0, [fp, #-4]
   186f8:	ldr	r1, [fp, #-12]
   186fc:	bl	15e68 <flatcc_builder_extend_offset_vector@@Base>
   18700:	movw	r1, #0
   18704:	cmp	r1, r0
   18708:	bne	18710 <flatcc_builder_create_union_vector@@Base+0x64>
   1870c:	b	187d8 <flatcc_builder_create_union_vector@@Base+0x12c>
   18710:	ldr	r0, [fp, #-4]
   18714:	ldr	r1, [fp, #-12]
   18718:	mov	r2, r1
   1871c:	str	r2, [sp, #8]
   18720:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   18724:	str	r0, [fp, #-16]
   18728:	movw	r1, #0
   1872c:	cmp	r1, r0
   18730:	bne	18738 <flatcc_builder_create_union_vector@@Base+0x8c>
   18734:	b	187d8 <flatcc_builder_create_union_vector@@Base+0x12c>
   18738:	ldr	r0, [fp, #-4]
   1873c:	bl	17fcc <flatcc_builder_offset_vector_edit@@Base>
   18740:	str	r0, [fp, #-20]	; 0xffffffec
   18744:	movw	r0, #0
   18748:	str	r0, [sp, #24]
   1874c:	ldr	r0, [sp, #24]
   18750:	ldr	r1, [fp, #-12]
   18754:	cmp	r0, r1
   18758:	bcs	1879c <flatcc_builder_create_union_vector@@Base+0xf0>
   1875c:	ldr	r0, [fp, #-8]
   18760:	ldr	r1, [sp, #24]
   18764:	ldrb	r0, [r0, r1, lsl #3]
   18768:	ldr	r2, [fp, #-16]
   1876c:	strb	r0, [r2, r1]
   18770:	ldr	r0, [fp, #-8]
   18774:	ldr	r1, [sp, #24]
   18778:	add	r0, r0, r1, lsl #3
   1877c:	ldr	r0, [r0, #4]
   18780:	ldr	r2, [fp, #-20]	; 0xffffffec
   18784:	add	r1, r2, r1, lsl #2
   18788:	str	r0, [r1]
   1878c:	ldr	r0, [sp, #24]
   18790:	add	r0, r0, #1
   18794:	str	r0, [sp, #24]
   18798:	b	1874c <flatcc_builder_create_union_vector@@Base+0xa0>
   1879c:	ldr	r1, [fp, #-4]
   187a0:	ldr	r2, [fp, #-16]
   187a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   187a8:	ldr	r0, [fp, #-12]
   187ac:	mov	ip, sp
   187b0:	str	r0, [ip]
   187b4:	add	r0, sp, #16
   187b8:	bl	187e0 <flatcc_builder_create_union_vector_direct@@Base>
   187bc:	ldr	r0, [sp, #16]
   187c0:	ldr	r1, [sp, #12]
   187c4:	str	r0, [r1]
   187c8:	ldr	r0, [sp, #20]
   187cc:	str	r0, [r1, #4]
   187d0:	ldr	r0, [fp, #-4]
   187d4:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   187d8:	mov	sp, fp
   187dc:	pop	{fp, pc}

000187e0 <flatcc_builder_create_union_vector_direct@@Base>:
   187e0:	push	{fp, lr}
   187e4:	mov	fp, sp
   187e8:	sub	sp, sp, #32
   187ec:	ldr	ip, [fp, #8]
   187f0:	str	r1, [fp, #-4]
   187f4:	str	r2, [fp, #-8]
   187f8:	str	r3, [fp, #-12]
   187fc:	mov	r1, r0
   18800:	str	r0, [sp, #16]
   18804:	mov	r0, r1
   18808:	movw	r1, #0
   1880c:	and	r1, r1, #255	; 0xff
   18810:	movw	r2, #8
   18814:	str	ip, [sp, #12]
   18818:	bl	12778 <memset@plt>
   1881c:	ldr	r0, [fp, #-4]
   18820:	ldr	r1, [fp, #-12]
   18824:	ldr	r2, [fp, #8]
   18828:	ldr	r3, [fp, #-8]
   1882c:	bl	17c24 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   18830:	ldr	r1, [sp, #16]
   18834:	str	r0, [r1, #4]
   18838:	movw	r2, #0
   1883c:	cmp	r2, r0
   18840:	bne	18848 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   18844:	b	1888c <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18848:	ldr	r0, [fp, #-4]
   1884c:	ldr	r1, [fp, #-8]
   18850:	ldr	r2, [fp, #8]
   18854:	movw	r3, #1
   18858:	movw	ip, #1
   1885c:	uxth	ip, ip
   18860:	str	ip, [sp]
   18864:	mvn	ip, #0
   18868:	str	ip, [sp, #4]
   1886c:	bl	17914 <flatcc_builder_create_vector@@Base>
   18870:	ldr	r1, [sp, #16]
   18874:	str	r0, [r1]
   18878:	movw	r2, #0
   1887c:	cmp	r2, r0
   18880:	bne	18888 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   18884:	b	1888c <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18888:	b	1888c <flatcc_builder_create_union_vector_direct@@Base+0xac>
   1888c:	mov	sp, fp
   18890:	pop	{fp, pc}

00018894 <flatcc_builder_start_union_vector@@Base>:
   18894:	push	{fp, lr}
   18898:	mov	fp, sp
   1889c:	sub	sp, sp, #8
   188a0:	str	r0, [sp]
   188a4:	ldr	r0, [sp]
   188a8:	movw	r1, #4
   188ac:	uxth	r1, r1
   188b0:	bl	154ac <flatcc_builder_start_buffer@@Base+0x178>
   188b4:	cmp	r0, #0
   188b8:	beq	188c8 <flatcc_builder_start_union_vector@@Base+0x34>
   188bc:	mvn	r0, #0
   188c0:	str	r0, [sp, #4]
   188c4:	b	1890c <flatcc_builder_start_union_vector@@Base+0x78>
   188c8:	ldr	r0, [sp]
   188cc:	ldr	r0, [r0, #32]
   188d0:	movw	r1, #8
   188d4:	str	r1, [r0, #16]
   188d8:	ldr	r0, [sp]
   188dc:	ldr	r0, [r0, #32]
   188e0:	movw	r1, #0
   188e4:	str	r1, [r0, #20]
   188e8:	ldr	r0, [sp]
   188ec:	ldr	r0, [r0, #32]
   188f0:	movw	r1, #7
   188f4:	strh	r1, [r0, #14]
   188f8:	ldr	r0, [sp]
   188fc:	mvn	r1, #3
   18900:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   18904:	movw	r0, #0
   18908:	str	r0, [sp, #4]
   1890c:	ldr	r0, [sp, #4]
   18910:	mov	sp, fp
   18914:	pop	{fp, pc}

00018918 <flatcc_builder_end_union_vector@@Base>:
   18918:	push	{fp, lr}
   1891c:	mov	fp, sp
   18920:	sub	sp, sp, #40	; 0x28
   18924:	str	r1, [fp, #-4]
   18928:	mov	r1, r0
   1892c:	str	r0, [sp, #4]
   18930:	mov	r0, r1
   18934:	movw	r1, #0
   18938:	and	r1, r1, #255	; 0xff
   1893c:	movw	r2, #8
   18940:	bl	12778 <memset@plt>
   18944:	ldr	r0, [fp, #-4]
   18948:	ldr	r0, [r0, #32]
   1894c:	ldrh	r0, [r0, #14]
   18950:	cmp	r0, #7
   18954:	bne	1895c <flatcc_builder_end_union_vector@@Base+0x44>
   18958:	b	1897c <flatcc_builder_end_union_vector@@Base+0x64>
   1895c:	ldr	r0, [pc, #260]	; 18a68 <flatcc_builder_end_union_vector@@Base+0x150>
   18960:	add	r0, pc, r0
   18964:	ldr	r1, [pc, #256]	; 18a6c <flatcc_builder_end_union_vector@@Base+0x154>
   18968:	add	r1, pc, r1
   1896c:	ldr	r2, [pc, #252]	; 18a70 <flatcc_builder_end_union_vector@@Base+0x158>
   18970:	add	r3, pc, r2
   18974:	movw	r2, #1617	; 0x651
   18978:	bl	127a8 <__assert_fail@plt>
   1897c:	ldr	r0, [fp, #-4]
   18980:	bl	18a74 <flatcc_builder_union_vector_count@@Base>
   18984:	str	r0, [sp, #16]
   18988:	ldr	r0, [fp, #-4]
   1898c:	ldr	lr, [sp, #16]
   18990:	movw	r1, #5
   18994:	mul	r1, lr, r1
   18998:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   1899c:	str	r0, [fp, #-16]
   189a0:	movw	r1, #0
   189a4:	cmp	r1, r0
   189a8:	bne	189b0 <flatcc_builder_end_union_vector@@Base+0x98>
   189ac:	b	18a60 <flatcc_builder_end_union_vector@@Base+0x148>
   189b0:	ldr	r0, [fp, #-16]
   189b4:	ldr	r1, [sp, #16]
   189b8:	add	r0, r0, r1, lsl #2
   189bc:	str	r0, [fp, #-8]
   189c0:	ldr	r0, [fp, #-4]
   189c4:	bl	18a90 <flatcc_builder_union_vector_edit@@Base>
   189c8:	str	r0, [fp, #-12]
   189cc:	movw	r0, #0
   189d0:	str	r0, [sp, #20]
   189d4:	ldr	r0, [sp, #20]
   189d8:	ldr	r1, [sp, #16]
   189dc:	cmp	r0, r1
   189e0:	bcs	18a24 <flatcc_builder_end_union_vector@@Base+0x10c>
   189e4:	ldr	r0, [fp, #-12]
   189e8:	ldr	r1, [sp, #20]
   189ec:	ldrb	r0, [r0, r1, lsl #3]
   189f0:	ldr	r2, [fp, #-8]
   189f4:	strb	r0, [r2, r1]
   189f8:	ldr	r0, [fp, #-12]
   189fc:	ldr	r1, [sp, #20]
   18a00:	add	r0, r0, r1, lsl #3
   18a04:	ldr	r0, [r0, #4]
   18a08:	ldr	r2, [fp, #-16]
   18a0c:	add	r1, r2, r1, lsl #2
   18a10:	str	r0, [r1]
   18a14:	ldr	r0, [sp, #20]
   18a18:	add	r0, r0, #1
   18a1c:	str	r0, [sp, #20]
   18a20:	b	189d4 <flatcc_builder_end_union_vector@@Base+0xbc>
   18a24:	ldr	r1, [fp, #-4]
   18a28:	ldr	r2, [fp, #-8]
   18a2c:	ldr	r3, [fp, #-16]
   18a30:	ldr	r0, [sp, #16]
   18a34:	mov	ip, sp
   18a38:	str	r0, [ip]
   18a3c:	add	r0, sp, #8
   18a40:	bl	187e0 <flatcc_builder_create_union_vector_direct@@Base>
   18a44:	ldr	r0, [sp, #8]
   18a48:	ldr	r1, [sp, #4]
   18a4c:	str	r0, [r1]
   18a50:	ldr	r0, [sp, #12]
   18a54:	str	r0, [r1, #4]
   18a58:	ldr	r0, [fp, #-4]
   18a5c:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   18a60:	mov	sp, fp
   18a64:	pop	{fp, pc}
   18a68:	andeq	r5, r0, pc, asr #22
   18a6c:	andeq	r4, r0, lr, lsl #30
   18a70:	andeq	r5, r0, r1, ror fp

00018a74 <flatcc_builder_union_vector_count@@Base>:
   18a74:	sub	sp, sp, #4
   18a78:	str	r0, [sp]
   18a7c:	ldr	r0, [sp]
   18a80:	ldr	r0, [r0, #32]
   18a84:	ldr	r0, [r0, #20]
   18a88:	add	sp, sp, #4
   18a8c:	bx	lr

00018a90 <flatcc_builder_union_vector_edit@@Base>:
   18a90:	sub	sp, sp, #4
   18a94:	str	r0, [sp]
   18a98:	ldr	r0, [sp]
   18a9c:	ldr	r0, [r0, #16]
   18aa0:	add	sp, sp, #4
   18aa4:	bx	lr

00018aa8 <flatcc_builder_extend_union_vector@@Base>:
   18aa8:	push	{fp, lr}
   18aac:	mov	fp, sp
   18ab0:	sub	sp, sp, #16
   18ab4:	ldr	r2, [pc, #68]	; 18b00 <flatcc_builder_extend_union_vector@@Base+0x58>
   18ab8:	str	r0, [sp, #8]
   18abc:	str	r1, [sp, #4]
   18ac0:	ldr	r0, [sp, #8]
   18ac4:	ldr	r1, [sp, #4]
   18ac8:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   18acc:	cmp	r0, #0
   18ad0:	beq	18ae0 <flatcc_builder_extend_union_vector@@Base+0x38>
   18ad4:	movw	r0, #0
   18ad8:	str	r0, [fp, #-4]
   18adc:	b	18af4 <flatcc_builder_extend_union_vector@@Base+0x4c>
   18ae0:	ldr	r0, [sp, #8]
   18ae4:	ldr	r1, [sp, #4]
   18ae8:	lsl	r1, r1, #3
   18aec:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   18af0:	str	r0, [fp, #-4]
   18af4:	ldr	r0, [fp, #-4]
   18af8:	mov	sp, fp
   18afc:	pop	{fp, pc}
   18b00:	svcne	0x00ffffff

00018b04 <flatcc_builder_truncate_union_vector@@Base>:
   18b04:	push	{fp, lr}
   18b08:	mov	fp, sp
   18b0c:	sub	sp, sp, #16
   18b10:	str	r0, [sp, #8]
   18b14:	str	r1, [sp, #4]
   18b18:	ldr	r0, [sp, #8]
   18b1c:	ldr	r0, [r0, #32]
   18b20:	ldrh	r0, [r0, #14]
   18b24:	cmp	r0, #7
   18b28:	bne	18b30 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   18b2c:	b	18b50 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   18b30:	ldr	r0, [pc, #192]	; 18bf8 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18b34:	add	r0, pc, r0
   18b38:	ldr	r1, [pc, #188]	; 18bfc <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18b3c:	add	r1, pc, r1
   18b40:	ldr	r2, [pc, #184]	; 18c00 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18b44:	add	r3, pc, r2
   18b48:	movw	r2, #1665	; 0x681
   18b4c:	bl	127a8 <__assert_fail@plt>
   18b50:	ldr	r0, [sp, #8]
   18b54:	ldr	r0, [r0, #32]
   18b58:	ldr	r0, [r0, #20]
   18b5c:	ldr	r1, [sp, #4]
   18b60:	cmp	r0, r1
   18b64:	bcs	18bb0 <flatcc_builder_truncate_union_vector@@Base+0xac>
   18b68:	ldr	r0, [sp, #8]
   18b6c:	ldr	r0, [r0, #32]
   18b70:	ldr	r0, [r0, #20]
   18b74:	ldr	r1, [sp, #4]
   18b78:	cmp	r0, r1
   18b7c:	bcc	18b84 <flatcc_builder_truncate_union_vector@@Base+0x80>
   18b80:	b	18ba4 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18b84:	ldr	r0, [pc, #120]	; 18c04 <flatcc_builder_truncate_union_vector@@Base+0x100>
   18b88:	add	r0, pc, r0
   18b8c:	ldr	r1, [pc, #116]	; 18c08 <flatcc_builder_truncate_union_vector@@Base+0x104>
   18b90:	add	r1, pc, r1
   18b94:	ldr	r2, [pc, #112]	; 18c0c <flatcc_builder_truncate_union_vector@@Base+0x108>
   18b98:	add	r3, pc, r2
   18b9c:	movw	r2, #1666	; 0x682
   18ba0:	bl	127a8 <__assert_fail@plt>
   18ba4:	mvn	r0, #0
   18ba8:	str	r0, [fp, #-4]
   18bac:	b	18bec <flatcc_builder_truncate_union_vector@@Base+0xe8>
   18bb0:	ldr	r0, [sp, #4]
   18bb4:	ldr	r1, [sp, #8]
   18bb8:	ldr	r1, [r1, #32]
   18bbc:	ldr	r2, [r1, #20]
   18bc0:	sub	r0, r2, r0
   18bc4:	str	r0, [r1, #20]
   18bc8:	ldr	r0, [sp, #8]
   18bcc:	ldr	r1, [sp, #8]
   18bd0:	ldr	r1, [r1, #32]
   18bd4:	ldr	r1, [r1, #16]
   18bd8:	ldr	r2, [sp, #4]
   18bdc:	mul	r1, r1, r2
   18be0:	bl	16398 <flatcc_builder_truncate_vector@@Base+0x10c>
   18be4:	movw	r0, #0
   18be8:	str	r0, [fp, #-4]
   18bec:	ldr	r0, [fp, #-4]
   18bf0:	mov	sp, fp
   18bf4:	pop	{fp, pc}
   18bf8:	andeq	r5, r0, fp, ror r9
   18bfc:	andeq	r4, r0, sl, lsr sp
   18c00:	strdeq	r5, [r0], -r0
   18c04:	andeq	r5, r0, fp, lsl #7
   18c08:	andeq	r4, r0, r6, ror #25
   18c0c:	muleq	r0, ip, r9

00018c10 <flatcc_builder_union_vector_push@@Base>:
   18c10:	push	{fp, lr}
   18c14:	mov	fp, sp
   18c18:	sub	sp, sp, #24
   18c1c:	str	r1, [sp, #12]
   18c20:	str	r2, [sp, #16]
   18c24:	str	r0, [sp, #8]
   18c28:	ldr	r0, [sp, #8]
   18c2c:	ldr	r0, [r0, #32]
   18c30:	ldrh	r0, [r0, #14]
   18c34:	cmp	r0, #7
   18c38:	bne	18c40 <flatcc_builder_union_vector_push@@Base+0x30>
   18c3c:	b	18c60 <flatcc_builder_union_vector_push@@Base+0x50>
   18c40:	ldr	r0, [pc, #160]	; 18ce8 <flatcc_builder_union_vector_push@@Base+0xd8>
   18c44:	add	r0, pc, r0
   18c48:	ldr	r1, [pc, #156]	; 18cec <flatcc_builder_union_vector_push@@Base+0xdc>
   18c4c:	add	r1, pc, r1
   18c50:	ldr	r2, [pc, #152]	; 18cf0 <flatcc_builder_union_vector_push@@Base+0xe0>
   18c54:	add	r3, pc, r2
   18c58:	movw	r2, #1677	; 0x68d
   18c5c:	bl	127a8 <__assert_fail@plt>
   18c60:	ldr	r0, [pc, #140]	; 18cf4 <flatcc_builder_union_vector_push@@Base+0xe4>
   18c64:	ldr	r1, [sp, #8]
   18c68:	ldr	r1, [r1, #32]
   18c6c:	ldr	r1, [r1, #20]
   18c70:	cmp	r1, r0
   18c74:	bne	18c84 <flatcc_builder_union_vector_push@@Base+0x74>
   18c78:	movw	r0, #0
   18c7c:	str	r0, [fp, #-4]
   18c80:	b	18cdc <flatcc_builder_union_vector_push@@Base+0xcc>
   18c84:	ldr	r0, [sp, #8]
   18c88:	ldr	r0, [r0, #32]
   18c8c:	ldr	r1, [r0, #20]
   18c90:	add	r1, r1, #1
   18c94:	str	r1, [r0, #20]
   18c98:	ldr	r0, [sp, #8]
   18c9c:	movw	r1, #8
   18ca0:	bl	159a0 <flatcc_builder_start_struct@@Base+0xfc>
   18ca4:	str	r0, [sp, #4]
   18ca8:	movw	r1, #0
   18cac:	cmp	r1, r0
   18cb0:	bne	18cc0 <flatcc_builder_union_vector_push@@Base+0xb0>
   18cb4:	movw	r0, #0
   18cb8:	str	r0, [fp, #-4]
   18cbc:	b	18cdc <flatcc_builder_union_vector_push@@Base+0xcc>
   18cc0:	ldr	r0, [sp, #4]
   18cc4:	ldr	r1, [sp, #12]
   18cc8:	str	r1, [r0]
   18ccc:	ldr	r1, [sp, #16]
   18cd0:	str	r1, [r0, #4]
   18cd4:	ldr	r0, [sp, #4]
   18cd8:	str	r0, [fp, #-4]
   18cdc:	ldr	r0, [fp, #-4]
   18ce0:	mov	sp, fp
   18ce4:	pop	{fp, pc}
   18ce8:	andeq	r5, r0, fp, ror #16
   18cec:	andeq	r4, r0, sl, lsr #24
   18cf0:	andeq	r5, r0, r5, lsr #18
   18cf4:	svcne	0x00ffffff

00018cf8 <flatcc_builder_append_union_vector@@Base>:
   18cf8:	push	{fp, lr}
   18cfc:	mov	fp, sp
   18d00:	sub	sp, sp, #16
   18d04:	str	r0, [sp, #8]
   18d08:	str	r1, [sp, #4]
   18d0c:	str	r2, [sp]
   18d10:	ldr	r0, [sp, #8]
   18d14:	ldr	r0, [r0, #32]
   18d18:	ldrh	r0, [r0, #14]
   18d1c:	cmp	r0, #7
   18d20:	bne	18d28 <flatcc_builder_append_union_vector@@Base+0x30>
   18d24:	b	18d48 <flatcc_builder_append_union_vector@@Base+0x50>
   18d28:	ldr	r0, [pc, #96]	; 18d90 <flatcc_builder_append_union_vector@@Base+0x98>
   18d2c:	add	r0, pc, r0
   18d30:	ldr	r1, [pc, #92]	; 18d94 <flatcc_builder_append_union_vector@@Base+0x9c>
   18d34:	add	r1, pc, r1
   18d38:	ldr	r2, [pc, #88]	; 18d98 <flatcc_builder_append_union_vector@@Base+0xa0>
   18d3c:	add	r3, pc, r2
   18d40:	movw	r2, #1692	; 0x69c
   18d44:	bl	127a8 <__assert_fail@plt>
   18d48:	ldr	r2, [pc, #76]	; 18d9c <flatcc_builder_append_union_vector@@Base+0xa4>
   18d4c:	ldr	r0, [sp, #8]
   18d50:	ldr	r1, [sp]
   18d54:	bl	15b64 <flatcc_builder_extend_vector@@Base+0x6c>
   18d58:	cmp	r0, #0
   18d5c:	beq	18d6c <flatcc_builder_append_union_vector@@Base+0x74>
   18d60:	movw	r0, #0
   18d64:	str	r0, [fp, #-4]
   18d68:	b	18d84 <flatcc_builder_append_union_vector@@Base+0x8c>
   18d6c:	ldr	r0, [sp, #8]
   18d70:	ldr	r1, [sp, #4]
   18d74:	ldr	r2, [sp]
   18d78:	lsl	r2, r2, #3
   18d7c:	bl	15d4c <flatcc_builder_vector_push@@Base+0x110>
   18d80:	str	r0, [fp, #-4]
   18d84:	ldr	r0, [fp, #-4]
   18d88:	mov	sp, fp
   18d8c:	pop	{fp, pc}
   18d90:	andeq	r5, r0, r3, lsl #15
   18d94:	andeq	r4, r0, r2, asr #22
   18d98:	andeq	r5, r0, sl, lsr #17
   18d9c:	svcne	0x00ffffff

00018da0 <flatcc_builder_create_string@@Base>:
   18da0:	push	{fp, lr}
   18da4:	mov	fp, sp
   18da8:	sub	sp, sp, #96	; 0x60
   18dac:	str	r0, [fp, #-8]
   18db0:	str	r1, [fp, #-12]
   18db4:	str	r2, [fp, #-16]
   18db8:	ldr	r0, [fp, #-16]
   18dbc:	cmn	r0, #1
   18dc0:	bls	18dd0 <flatcc_builder_create_string@@Base+0x30>
   18dc4:	movw	r0, #0
   18dc8:	str	r0, [fp, #-4]
   18dcc:	b	18eec <flatcc_builder_create_string@@Base+0x14c>
   18dd0:	ldr	r0, [fp, #-16]
   18dd4:	bl	14cd4 <flatcc_builder_embed_buffer@@Base+0x388>
   18dd8:	str	r0, [fp, #-24]	; 0xffffffe8
   18ddc:	ldr	r0, [fp, #-8]
   18de0:	ldr	lr, [fp, #-16]
   18de4:	add	r1, lr, #1
   18de8:	mov	r2, #4
   18dec:	bl	14ca0 <flatcc_builder_embed_buffer@@Base+0x354>
   18df0:	add	r0, r0, #1
   18df4:	str	r0, [fp, #-20]	; 0xffffffec
   18df8:	mov	r0, #0
   18dfc:	str	r0, [sp]
   18e00:	str	r0, [sp, #4]
   18e04:	ldr	r0, [sp]
   18e08:	add	r0, r0, #4
   18e0c:	str	r0, [sp]
   18e10:	mov	r0, sp
   18e14:	add	r0, r0, #8
   18e18:	ldr	r1, [sp, #4]
   18e1c:	sub	r2, fp, #24
   18e20:	str	r2, [r0, r1, lsl #3]
   18e24:	ldr	r1, [sp, #4]
   18e28:	add	r0, r0, r1, lsl #3
   18e2c:	movw	r1, #4
   18e30:	str	r1, [r0, #4]
   18e34:	ldr	r0, [sp, #4]
   18e38:	add	r0, r0, #1
   18e3c:	str	r0, [sp, #4]
   18e40:	ldr	r0, [fp, #-16]
   18e44:	cmp	r0, #0
   18e48:	bls	18e8c <flatcc_builder_create_string@@Base+0xec>
   18e4c:	ldr	r0, [fp, #-16]
   18e50:	ldr	r1, [sp]
   18e54:	add	r0, r1, r0
   18e58:	str	r0, [sp]
   18e5c:	ldr	r0, [fp, #-12]
   18e60:	mov	r1, sp
   18e64:	add	r1, r1, #8
   18e68:	ldr	r2, [sp, #4]
   18e6c:	str	r0, [r1, r2, lsl #3]
   18e70:	ldr	r0, [fp, #-16]
   18e74:	ldr	r2, [sp, #4]
   18e78:	add	r1, r1, r2, lsl #3
   18e7c:	str	r0, [r1, #4]
   18e80:	ldr	r0, [sp, #4]
   18e84:	add	r0, r0, #1
   18e88:	str	r0, [sp, #4]
   18e8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e90:	cmp	r0, #0
   18e94:	bls	18edc <flatcc_builder_create_string@@Base+0x13c>
   18e98:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e9c:	ldr	r1, [sp]
   18ea0:	add	r0, r1, r0
   18ea4:	str	r0, [sp]
   18ea8:	mov	r0, sp
   18eac:	add	r0, r0, #8
   18eb0:	ldr	r1, [sp, #4]
   18eb4:	ldr	r2, [pc, #60]	; 18ef8 <flatcc_builder_create_string@@Base+0x158>
   18eb8:	ldr	r2, [pc, r2]
   18ebc:	str	r2, [r0, r1, lsl #3]
   18ec0:	ldr	r1, [fp, #-20]	; 0xffffffec
   18ec4:	ldr	r2, [sp, #4]
   18ec8:	add	r0, r0, r2, lsl #3
   18ecc:	str	r1, [r0, #4]
   18ed0:	ldr	r0, [sp, #4]
   18ed4:	add	r0, r0, #1
   18ed8:	str	r0, [sp, #4]
   18edc:	ldr	r0, [fp, #-8]
   18ee0:	mov	r1, sp
   18ee4:	bl	14ce8 <flatcc_builder_embed_buffer@@Base+0x39c>
   18ee8:	str	r0, [fp, #-4]
   18eec:	ldr	r0, [fp, #-4]
   18ef0:	mov	sp, fp
   18ef4:	pop	{fp, pc}
   18ef8:	andeq	r7, r1, r4, lsl #3

00018efc <flatcc_builder_create_string_str@@Base>:
   18efc:	push	{fp, lr}
   18f00:	mov	fp, sp
   18f04:	sub	sp, sp, #24
   18f08:	str	r0, [fp, #-4]
   18f0c:	str	r1, [fp, #-8]
   18f10:	ldr	r0, [fp, #-4]
   18f14:	ldr	r1, [fp, #-8]
   18f18:	ldr	r2, [fp, #-8]
   18f1c:	str	r0, [sp, #12]
   18f20:	mov	r0, r2
   18f24:	str	r1, [sp, #8]
   18f28:	bl	12760 <strlen@plt>
   18f2c:	ldr	r1, [sp, #12]
   18f30:	str	r0, [sp, #4]
   18f34:	mov	r0, r1
   18f38:	ldr	r1, [sp, #8]
   18f3c:	ldr	r2, [sp, #4]
   18f40:	bl	18da0 <flatcc_builder_create_string@@Base>
   18f44:	mov	sp, fp
   18f48:	pop	{fp, pc}

00018f4c <flatcc_builder_create_string_strn@@Base>:
   18f4c:	push	{fp, lr}
   18f50:	mov	fp, sp
   18f54:	sub	sp, sp, #24
   18f58:	str	r0, [fp, #-4]
   18f5c:	str	r1, [fp, #-8]
   18f60:	str	r2, [sp, #12]
   18f64:	ldr	r0, [fp, #-4]
   18f68:	ldr	r1, [fp, #-8]
   18f6c:	ldr	r2, [fp, #-8]
   18f70:	ldr	r3, [sp, #12]
   18f74:	str	r0, [sp, #8]
   18f78:	mov	r0, r2
   18f7c:	str	r1, [sp, #4]
   18f80:	mov	r1, r3
   18f84:	bl	1622c <flatcc_builder_append_string_strn@@Base+0x5c>
   18f88:	ldr	r1, [sp, #8]
   18f8c:	str	r0, [sp]
   18f90:	mov	r0, r1
   18f94:	ldr	r1, [sp, #4]
   18f98:	ldr	r2, [sp]
   18f9c:	bl	18da0 <flatcc_builder_create_string@@Base>
   18fa0:	mov	sp, fp
   18fa4:	pop	{fp, pc}

00018fa8 <flatcc_builder_end_string@@Base>:
   18fa8:	push	{fp, lr}
   18fac:	mov	fp, sp
   18fb0:	sub	sp, sp, #16
   18fb4:	str	r0, [sp, #8]
   18fb8:	ldr	r0, [sp, #8]
   18fbc:	ldr	r0, [r0, #32]
   18fc0:	ldrh	r0, [r0, #14]
   18fc4:	cmp	r0, #6
   18fc8:	bne	18fd0 <flatcc_builder_end_string@@Base+0x28>
   18fcc:	b	18ff0 <flatcc_builder_end_string@@Base+0x48>
   18fd0:	ldr	r0, [pc, #168]	; 19080 <flatcc_builder_end_string@@Base+0xd8>
   18fd4:	add	r0, pc, r0
   18fd8:	ldr	r1, [pc, #164]	; 19084 <flatcc_builder_end_string@@Base+0xdc>
   18fdc:	add	r1, pc, r1
   18fe0:	ldr	r2, [pc, #160]	; 19088 <flatcc_builder_end_string@@Base+0xe0>
   18fe4:	add	r3, pc, r2
   18fe8:	movw	r2, #1732	; 0x6c4
   18fec:	bl	127a8 <__assert_fail@plt>
   18ff0:	ldr	r0, [sp, #8]
   18ff4:	ldr	r0, [r0, #32]
   18ff8:	ldr	r0, [r0, #20]
   18ffc:	ldr	r1, [sp, #8]
   19000:	ldr	r1, [r1, #20]
   19004:	cmp	r0, r1
   19008:	bne	19010 <flatcc_builder_end_string@@Base+0x68>
   1900c:	b	19030 <flatcc_builder_end_string@@Base+0x88>
   19010:	ldr	r0, [pc, #116]	; 1908c <flatcc_builder_end_string@@Base+0xe4>
   19014:	add	r0, pc, r0
   19018:	ldr	r1, [pc, #112]	; 19090 <flatcc_builder_end_string@@Base+0xe8>
   1901c:	add	r1, pc, r1
   19020:	ldr	r2, [pc, #108]	; 19094 <flatcc_builder_end_string@@Base+0xec>
   19024:	add	r3, pc, r2
   19028:	movw	r2, #1733	; 0x6c5
   1902c:	bl	127a8 <__assert_fail@plt>
   19030:	ldr	r0, [sp, #8]
   19034:	ldr	r1, [sp, #8]
   19038:	ldr	r1, [r1, #16]
   1903c:	ldr	r2, [sp, #8]
   19040:	ldr	r2, [r2, #20]
   19044:	bl	18da0 <flatcc_builder_create_string@@Base>
   19048:	str	r0, [sp, #4]
   1904c:	movw	r1, #0
   19050:	cmp	r1, r0
   19054:	bne	19064 <flatcc_builder_end_string@@Base+0xbc>
   19058:	movw	r0, #0
   1905c:	str	r0, [fp, #-4]
   19060:	b	19074 <flatcc_builder_end_string@@Base+0xcc>
   19064:	ldr	r0, [sp, #8]
   19068:	bl	157e8 <flatcc_builder_end_buffer@@Base+0x170>
   1906c:	ldr	r0, [sp, #4]
   19070:	str	r0, [fp, #-4]
   19074:	ldr	r0, [fp, #-4]
   19078:	mov	sp, fp
   1907c:	pop	{fp, pc}
   19080:	ldrdeq	r4, [r0], -lr
   19084:	muleq	r0, sl, r8
   19088:	andeq	r5, r0, r1, lsl #13
   1908c:	muleq	r0, r4, r6
   19090:	andeq	r4, r0, sl, asr r8
   19094:	andeq	r5, r0, r1, asr #12

00019098 <flatcc_builder_string_edit@@Base>:
   19098:	sub	sp, sp, #4
   1909c:	str	r0, [sp]
   190a0:	ldr	r0, [sp]
   190a4:	ldr	r0, [r0, #16]
   190a8:	add	sp, sp, #4
   190ac:	bx	lr

000190b0 <flatcc_builder_string_len@@Base>:
   190b0:	sub	sp, sp, #4
   190b4:	str	r0, [sp]
   190b8:	ldr	r0, [sp]
   190bc:	ldr	r0, [r0, #32]
   190c0:	ldr	r0, [r0, #20]
   190c4:	add	sp, sp, #4
   190c8:	bx	lr
   190cc:	push	{fp, lr}
   190d0:	mov	fp, sp
   190d4:	sub	sp, sp, #24
   190d8:	str	r0, [fp, #-8]
   190dc:	str	r1, [sp, #12]
   190e0:	strh	r2, [sp, #10]
   190e4:	strh	r3, [sp, #8]
   190e8:	ldr	r0, [fp, #-8]
   190ec:	ldr	r0, [r0, #20]
   190f0:	ldrh	r1, [sp, #10]
   190f4:	add	r0, r0, r1
   190f8:	sub	r0, r0, #1
   190fc:	ldrh	r1, [sp, #10]
   19100:	sub	r1, r1, #1
   19104:	mvn	r2, #0
   19108:	eor	r1, r1, r2
   1910c:	and	r0, r0, r1
   19110:	str	r0, [sp, #4]
   19114:	ldr	r0, [sp, #4]
   19118:	ldr	r1, [sp, #12]
   1911c:	add	r0, r0, r1
   19120:	ldr	r1, [fp, #-8]
   19124:	str	r0, [r1, #20]
   19128:	ldr	r1, [fp, #-8]
   1912c:	ldr	r1, [r1, #24]
   19130:	cmp	r0, r1
   19134:	bcc	19168 <flatcc_builder_string_len@@Base+0xb8>
   19138:	ldr	r0, [fp, #-8]
   1913c:	ldr	r1, [fp, #-8]
   19140:	ldr	r1, [r1, #20]
   19144:	add	r1, r1, #1
   19148:	movw	r2, #65532	; 0xfffc
   1914c:	bl	19b10 <flatcc_builder_get_emit_context@@Base+0x40>
   19150:	cmp	r0, #0
   19154:	beq	19164 <flatcc_builder_string_len@@Base+0xb4>
   19158:	movw	r0, #0
   1915c:	str	r0, [fp, #-4]
   19160:	b	191bc <flatcc_builder_string_len@@Base+0x10c>
   19164:	b	19168 <flatcc_builder_string_len@@Base+0xb8>
   19168:	ldr	r0, [sp, #4]
   1916c:	add	r0, r0, #4
   19170:	ldr	r1, [fp, #-8]
   19174:	ldr	r1, [r1, #4]
   19178:	ldrh	r2, [sp, #8]
   1917c:	add	r1, r1, r2, lsl #1
   19180:	strh	r0, [r1]
   19184:	ldrh	r0, [sp, #8]
   19188:	ldr	r1, [fp, #-8]
   1918c:	ldrh	r1, [r1, #8]
   19190:	cmp	r0, r1
   19194:	blt	191a8 <flatcc_builder_string_len@@Base+0xf8>
   19198:	ldrh	r0, [sp, #8]
   1919c:	add	r0, r0, #1
   191a0:	ldr	r1, [fp, #-8]
   191a4:	strh	r0, [r1, #8]
   191a8:	ldr	r0, [fp, #-8]
   191ac:	ldr	r0, [r0, #16]
   191b0:	ldr	r1, [sp, #4]
   191b4:	add	r0, r0, r1
   191b8:	str	r0, [fp, #-4]
   191bc:	ldr	r0, [fp, #-4]
   191c0:	mov	sp, fp
   191c4:	pop	{fp, pc}

000191c8 <flatcc_builder_table_edit@@Base>:
   191c8:	push	{fp, lr}
   191cc:	mov	fp, sp
   191d0:	sub	sp, sp, #8
   191d4:	str	r0, [sp, #4]
   191d8:	str	r1, [sp]
   191dc:	ldr	r0, [sp, #4]
   191e0:	ldr	r0, [r0, #32]
   191e4:	ldrh	r0, [r0, #14]
   191e8:	cmp	r0, #3
   191ec:	bne	191f4 <flatcc_builder_table_edit@@Base+0x2c>
   191f0:	b	19214 <flatcc_builder_table_edit@@Base+0x4c>
   191f4:	ldr	r0, [pc, #68]	; 19240 <flatcc_builder_table_edit@@Base+0x78>
   191f8:	add	r0, pc, r0
   191fc:	ldr	r1, [pc, #64]	; 19244 <flatcc_builder_table_edit@@Base+0x7c>
   19200:	add	r1, pc, r1
   19204:	ldr	r2, [pc, #60]	; 19248 <flatcc_builder_table_edit@@Base+0x80>
   19208:	add	r3, pc, r2
   1920c:	movw	r2, #1794	; 0x702
   19210:	bl	127a8 <__assert_fail@plt>
   19214:	ldr	r0, [sp, #4]
   19218:	ldr	r0, [r0, #16]
   1921c:	ldr	r1, [sp, #4]
   19220:	ldr	r1, [r1, #20]
   19224:	add	r0, r0, r1
   19228:	ldr	r1, [sp]
   1922c:	movw	r2, #0
   19230:	sub	r1, r2, r1
   19234:	add	r0, r0, r1
   19238:	mov	sp, fp
   1923c:	pop	{fp, pc}
   19240:	andeq	r4, r0, sl, lsr #29
   19244:	andeq	r4, r0, r6, ror r6
   19248:	andeq	r5, r0, r2, asr r5

0001924c <flatcc_builder_table_add_copy@@Base>:
   1924c:	push	{fp, lr}
   19250:	mov	fp, sp
   19254:	sub	sp, sp, #24
   19258:	ldr	ip, [fp, #8]
   1925c:	str	r0, [fp, #-4]
   19260:	str	r1, [fp, #-8]
   19264:	str	r2, [sp, #12]
   19268:	str	r3, [sp, #8]
   1926c:	strh	ip, [sp, #6]
   19270:	ldr	r0, [fp, #-4]
   19274:	ldr	r1, [fp, #-8]
   19278:	ldr	r2, [sp, #8]
   1927c:	ldrh	r3, [sp, #6]
   19280:	bl	18320 <flatcc_builder_table_add@@Base>
   19284:	str	r0, [sp]
   19288:	movw	r1, #0
   1928c:	cmp	r0, r1
   19290:	beq	192a4 <flatcc_builder_table_add_copy@@Base+0x58>
   19294:	ldr	r0, [sp]
   19298:	ldr	r1, [sp, #12]
   1929c:	ldr	r2, [sp, #8]
   192a0:	bl	12718 <memcpy@plt>
   192a4:	ldr	r0, [sp]
   192a8:	mov	sp, fp
   192ac:	pop	{fp, pc}
   192b0:	push	{fp, lr}
   192b4:	mov	fp, sp
   192b8:	sub	sp, sp, #16
   192bc:	str	r0, [sp, #8]
   192c0:	strh	r1, [sp, #6]
   192c4:	ldr	r0, [sp, #8]
   192c8:	ldr	r0, [r0, #20]
   192cc:	add	r0, r0, #4
   192d0:	sub	r0, r0, #1
   192d4:	mvn	r1, #3
   192d8:	and	r0, r0, r1
   192dc:	str	r0, [sp]
   192e0:	ldr	r0, [sp]
   192e4:	add	r0, r0, #4
   192e8:	ldr	r1, [sp, #8]
   192ec:	str	r0, [r1, #20]
   192f0:	ldr	r1, [sp, #8]
   192f4:	ldr	r1, [r1, #24]
   192f8:	cmp	r0, r1
   192fc:	bls	1932c <flatcc_builder_table_add_copy@@Base+0xe0>
   19300:	ldr	r0, [sp, #8]
   19304:	ldr	r1, [sp, #8]
   19308:	ldr	r1, [r1, #20]
   1930c:	movw	r2, #65532	; 0xfffc
   19310:	bl	19b10 <flatcc_builder_get_emit_context@@Base+0x40>
   19314:	cmp	r0, #0
   19318:	beq	19328 <flatcc_builder_table_add_copy@@Base+0xdc>
   1931c:	movw	r0, #0
   19320:	str	r0, [fp, #-4]
   19324:	b	19398 <flatcc_builder_table_add_copy@@Base+0x14c>
   19328:	b	1932c <flatcc_builder_table_add_copy@@Base+0xe0>
   1932c:	ldr	r0, [sp]
   19330:	add	r0, r0, #4
   19334:	ldr	r1, [sp, #8]
   19338:	ldr	r1, [r1, #4]
   1933c:	ldrh	r2, [sp, #6]
   19340:	add	r1, r1, r2, lsl #1
   19344:	strh	r0, [r1]
   19348:	ldrh	r0, [sp, #6]
   1934c:	ldr	r1, [sp, #8]
   19350:	ldrh	r1, [r1, #8]
   19354:	cmp	r0, r1
   19358:	blt	1936c <flatcc_builder_table_add_copy@@Base+0x120>
   1935c:	ldrh	r0, [sp, #6]
   19360:	add	r0, r0, #1
   19364:	ldr	r1, [sp, #8]
   19368:	strh	r0, [r1, #8]
   1936c:	ldr	r0, [sp]
   19370:	ldr	r1, [sp, #8]
   19374:	ldr	r2, [r1]
   19378:	add	r3, r2, #2
   1937c:	str	r3, [r1]
   19380:	strh	r0, [r2]
   19384:	ldr	r0, [sp, #8]
   19388:	ldr	r0, [r0, #16]
   1938c:	ldr	r1, [sp]
   19390:	add	r0, r0, r1
   19394:	str	r0, [fp, #-4]
   19398:	ldr	r0, [fp, #-4]
   1939c:	mov	sp, fp
   193a0:	pop	{fp, pc}

000193a4 <flatcc_builder_push_buffer_alignment@@Base>:
   193a4:	sub	sp, sp, #8
   193a8:	str	r0, [sp, #4]
   193ac:	ldr	r0, [sp, #4]
   193b0:	ldrh	r0, [r0, #128]	; 0x80
   193b4:	strh	r0, [sp, #2]
   193b8:	ldr	r0, [sp, #4]
   193bc:	movw	r1, #4
   193c0:	strh	r1, [r0, #128]	; 0x80
   193c4:	ldrh	r0, [sp, #2]
   193c8:	add	sp, sp, #8
   193cc:	bx	lr

000193d0 <flatcc_builder_pop_buffer_alignment@@Base>:
   193d0:	push	{fp, lr}
   193d4:	mov	fp, sp
   193d8:	sub	sp, sp, #8
   193dc:	str	r0, [sp, #4]
   193e0:	strh	r1, [sp, #2]
   193e4:	ldr	r0, [sp, #4]
   193e8:	ldrh	r1, [sp, #2]
   193ec:	bl	151b4 <flatcc_builder_create_buffer@@Base+0x3a8>
   193f0:	mov	sp, fp
   193f4:	pop	{fp, pc}

000193f8 <flatcc_builder_get_buffer_alignment@@Base>:
   193f8:	sub	sp, sp, #4
   193fc:	str	r0, [sp]
   19400:	ldr	r0, [sp]
   19404:	ldrh	r0, [r0, #128]	; 0x80
   19408:	add	sp, sp, #4
   1940c:	bx	lr

00019410 <flatcc_builder_set_vtable_clustering@@Base>:
   19410:	sub	sp, sp, #8
   19414:	str	r0, [sp, #4]
   19418:	str	r1, [sp]
   1941c:	ldr	r0, [sp]
   19420:	cmp	r0, #0
   19424:	movw	r0, #0
   19428:	movne	r0, #1
   1942c:	mvn	r1, #0
   19430:	eor	r0, r0, r1
   19434:	and	r0, r0, #1
   19438:	ldr	r1, [sp, #4]
   1943c:	str	r0, [r1, #180]	; 0xb4
   19440:	add	sp, sp, #8
   19444:	bx	lr

00019448 <flatcc_builder_set_block_align@@Base>:
   19448:	sub	sp, sp, #8
   1944c:	str	r0, [sp, #4]
   19450:	strh	r1, [sp, #2]
   19454:	ldrh	r0, [sp, #2]
   19458:	ldr	r1, [sp, #4]
   1945c:	strh	r0, [r1, #132]	; 0x84
   19460:	add	sp, sp, #8
   19464:	bx	lr

00019468 <flatcc_builder_get_level@@Base>:
   19468:	sub	sp, sp, #4
   1946c:	str	r0, [sp]
   19470:	ldr	r0, [sp]
   19474:	ldr	r0, [r0, #156]	; 0x9c
   19478:	add	sp, sp, #4
   1947c:	bx	lr

00019480 <flatcc_builder_set_max_level@@Base>:
   19480:	sub	sp, sp, #8
   19484:	str	r0, [sp, #4]
   19488:	str	r1, [sp]
   1948c:	ldr	r0, [sp]
   19490:	ldr	r1, [sp, #4]
   19494:	str	r0, [r1, #176]	; 0xb0
   19498:	ldr	r0, [sp, #4]
   1949c:	ldr	r0, [r0, #160]	; 0xa0
   194a0:	ldr	r1, [sp, #4]
   194a4:	ldr	r1, [r1, #176]	; 0xb0
   194a8:	cmp	r0, r1
   194ac:	bge	194c0 <flatcc_builder_set_max_level@@Base+0x40>
   194b0:	ldr	r0, [sp, #4]
   194b4:	ldr	r0, [r0, #176]	; 0xb0
   194b8:	ldr	r1, [sp, #4]
   194bc:	str	r0, [r1, #160]	; 0xa0
   194c0:	add	sp, sp, #8
   194c4:	bx	lr

000194c8 <flatcc_builder_get_buffer_size@@Base>:
   194c8:	sub	sp, sp, #4
   194cc:	str	r0, [sp]
   194d0:	ldr	r0, [sp]
   194d4:	ldr	r0, [r0, #140]	; 0x8c
   194d8:	ldr	r1, [sp]
   194dc:	ldr	r1, [r1, #136]	; 0x88
   194e0:	sub	r0, r0, r1
   194e4:	add	sp, sp, #4
   194e8:	bx	lr

000194ec <flatcc_builder_get_buffer_start@@Base>:
   194ec:	sub	sp, sp, #4
   194f0:	str	r0, [sp]
   194f4:	ldr	r0, [sp]
   194f8:	ldr	r0, [r0, #136]	; 0x88
   194fc:	add	sp, sp, #4
   19500:	bx	lr

00019504 <flatcc_builder_get_buffer_end@@Base>:
   19504:	sub	sp, sp, #4
   19508:	str	r0, [sp]
   1950c:	ldr	r0, [sp]
   19510:	ldr	r0, [r0, #140]	; 0x8c
   19514:	add	sp, sp, #4
   19518:	bx	lr

0001951c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1951c:	sub	sp, sp, #8
   19520:	str	r0, [sp, #4]
   19524:	str	r1, [sp]
   19528:	ldr	r0, [sp]
   1952c:	ldr	r1, [sp, #4]
   19530:	str	r0, [r1, #172]	; 0xac
   19534:	add	sp, sp, #8
   19538:	bx	lr

0001953c <flatcc_builder_set_identifier@@Base>:
   1953c:	sub	sp, sp, #16
   19540:	str	r0, [sp, #12]
   19544:	str	r1, [sp, #8]
   19548:	ldr	r0, [sp, #12]
   1954c:	add	r0, r0, #168	; 0xa8
   19550:	ldr	r1, [sp, #8]
   19554:	movw	r2, #0
   19558:	cmp	r1, r2
   1955c:	str	r0, [sp, #4]
   19560:	beq	19570 <flatcc_builder_set_identifier@@Base+0x34>
   19564:	ldr	r0, [sp, #8]
   19568:	str	r0, [sp]
   1956c:	b	19580 <flatcc_builder_set_identifier@@Base+0x44>
   19570:	ldr	r0, [pc, #56]	; 195b0 <flatcc_builder_set_identifier@@Base+0x74>
   19574:	ldr	r0, [pc, r0]
   19578:	str	r0, [sp]
   1957c:	b	19580 <flatcc_builder_set_identifier@@Base+0x44>
   19580:	ldr	r0, [sp]
   19584:	ldrb	r1, [r0]
   19588:	ldr	r2, [sp, #4]
   1958c:	strb	r1, [r2]
   19590:	ldrb	r1, [r0, #1]
   19594:	strb	r1, [r2, #1]
   19598:	ldrb	r1, [r0, #2]
   1959c:	strb	r1, [r2, #2]
   195a0:	ldrb	r0, [r0, #3]
   195a4:	strb	r0, [r2, #3]
   195a8:	add	sp, sp, #16
   195ac:	bx	lr
   195b0:	andeq	r6, r1, r8, asr #21

000195b4 <flatcc_builder_get_type@@Base>:
   195b4:	sub	sp, sp, #8
   195b8:	str	r0, [sp, #4]
   195bc:	ldr	r0, [sp, #4]
   195c0:	ldr	r0, [r0, #32]
   195c4:	movw	r1, #0
   195c8:	cmp	r0, r1
   195cc:	beq	195e4 <flatcc_builder_get_type@@Base+0x30>
   195d0:	ldr	r0, [sp, #4]
   195d4:	ldr	r0, [r0, #32]
   195d8:	ldrh	r0, [r0, #14]
   195dc:	str	r0, [sp]
   195e0:	b	195f0 <flatcc_builder_get_type@@Base+0x3c>
   195e4:	movw	r0, #0
   195e8:	str	r0, [sp]
   195ec:	b	195f0 <flatcc_builder_get_type@@Base+0x3c>
   195f0:	ldr	r0, [sp]
   195f4:	add	sp, sp, #8
   195f8:	bx	lr

000195fc <flatcc_builder_get_type_at@@Base>:
   195fc:	sub	sp, sp, #12
   19600:	str	r0, [sp, #4]
   19604:	str	r1, [sp]
   19608:	ldr	r0, [sp]
   1960c:	cmp	r0, #1
   19610:	blt	19628 <flatcc_builder_get_type_at@@Base+0x2c>
   19614:	ldr	r0, [sp]
   19618:	ldr	r1, [sp, #4]
   1961c:	ldr	r1, [r1, #156]	; 0x9c
   19620:	cmp	r0, r1
   19624:	ble	19634 <flatcc_builder_get_type_at@@Base+0x38>
   19628:	movw	r0, #0
   1962c:	str	r0, [sp, #8]
   19630:	b	19660 <flatcc_builder_get_type_at@@Base+0x64>
   19634:	ldr	r0, [sp, #4]
   19638:	ldr	r0, [r0, #32]
   1963c:	ldr	r1, [sp]
   19640:	ldr	r2, [sp, #4]
   19644:	ldr	r2, [r2, #156]	; 0x9c
   19648:	sub	r1, r1, r2
   1964c:	movw	r2, #36	; 0x24
   19650:	mul	r1, r1, r2
   19654:	add	r0, r0, r1
   19658:	ldrh	r0, [r0, #14]
   1965c:	str	r0, [sp, #8]
   19660:	ldr	r0, [sp, #8]
   19664:	add	sp, sp, #12
   19668:	bx	lr

0001966c <flatcc_builder_get_direct_buffer@@Base>:
   1966c:	push	{fp, lr}
   19670:	mov	fp, sp
   19674:	sub	sp, sp, #16
   19678:	str	r0, [sp, #8]
   1967c:	str	r1, [sp, #4]
   19680:	ldr	r0, [sp, #8]
   19684:	ldr	r0, [r0, #184]	; 0xb8
   19688:	cmp	r0, #0
   1968c:	beq	196a8 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   19690:	ldr	r0, [sp, #8]
   19694:	add	r0, r0, #188	; 0xbc
   19698:	ldr	r1, [sp, #4]
   1969c:	bl	196dc <flatcc_builder_get_direct_buffer@@Base+0x70>
   196a0:	str	r0, [fp, #-4]
   196a4:	b	196d0 <flatcc_builder_get_direct_buffer@@Base+0x64>
   196a8:	ldr	r0, [sp, #4]
   196ac:	movw	r1, #0
   196b0:	cmp	r0, r1
   196b4:	beq	196c4 <flatcc_builder_get_direct_buffer@@Base+0x58>
   196b8:	ldr	r0, [sp, #4]
   196bc:	movw	r1, #0
   196c0:	str	r1, [r0]
   196c4:	b	196c8 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   196c8:	movw	r0, #0
   196cc:	str	r0, [fp, #-4]
   196d0:	ldr	r0, [fp, #-4]
   196d4:	mov	sp, fp
   196d8:	pop	{fp, pc}
   196dc:	sub	sp, sp, #12
   196e0:	str	r0, [sp, #4]
   196e4:	str	r1, [sp]
   196e8:	ldr	r0, [sp, #4]
   196ec:	ldr	r0, [r0]
   196f0:	ldr	r1, [sp, #4]
   196f4:	ldr	r1, [r1, #4]
   196f8:	cmp	r0, r1
   196fc:	bne	19730 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   19700:	ldr	r0, [sp]
   19704:	movw	r1, #0
   19708:	cmp	r0, r1
   1970c:	beq	19720 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   19710:	ldr	r0, [sp, #4]
   19714:	ldr	r0, [r0, #24]
   19718:	ldr	r1, [sp]
   1971c:	str	r0, [r1]
   19720:	ldr	r0, [sp, #4]
   19724:	ldr	r0, [r0, #8]
   19728:	str	r0, [sp, #8]
   1972c:	b	19754 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   19730:	ldr	r0, [sp]
   19734:	movw	r1, #0
   19738:	cmp	r0, r1
   1973c:	beq	1974c <flatcc_builder_get_direct_buffer@@Base+0xe0>
   19740:	ldr	r0, [sp]
   19744:	movw	r1, #0
   19748:	str	r1, [r0]
   1974c:	movw	r0, #0
   19750:	str	r0, [sp, #8]
   19754:	ldr	r0, [sp, #8]
   19758:	add	sp, sp, #12
   1975c:	bx	lr

00019760 <flatcc_builder_copy_buffer@@Base>:
   19760:	push	{fp, lr}
   19764:	mov	fp, sp
   19768:	sub	sp, sp, #16
   1976c:	str	r0, [sp, #8]
   19770:	str	r1, [sp, #4]
   19774:	str	r2, [sp]
   19778:	ldr	r0, [sp, #8]
   1977c:	ldr	r0, [r0, #184]	; 0xb8
   19780:	cmp	r0, #0
   19784:	bne	19794 <flatcc_builder_copy_buffer@@Base+0x34>
   19788:	movw	r0, #0
   1978c:	str	r0, [fp, #-4]
   19790:	b	197e8 <flatcc_builder_copy_buffer@@Base+0x88>
   19794:	ldr	r0, [sp, #8]
   19798:	add	r0, r0, #188	; 0xbc
   1979c:	ldr	r1, [sp, #4]
   197a0:	ldr	r2, [sp]
   197a4:	bl	1a454 <flatcc_emitter_copy_buffer@@Base>
   197a8:	str	r0, [sp, #4]
   197ac:	ldr	r0, [sp, #4]
   197b0:	movw	r1, #0
   197b4:	cmp	r0, r1
   197b8:	beq	197c0 <flatcc_builder_copy_buffer@@Base+0x60>
   197bc:	b	197e0 <flatcc_builder_copy_buffer@@Base+0x80>
   197c0:	ldr	r0, [pc, #44]	; 197f4 <flatcc_builder_copy_buffer@@Base+0x94>
   197c4:	add	r0, pc, r0
   197c8:	ldr	r1, [pc, #40]	; 197f8 <flatcc_builder_copy_buffer@@Base+0x98>
   197cc:	add	r1, pc, r1
   197d0:	ldr	r2, [pc, #36]	; 197fc <flatcc_builder_copy_buffer@@Base+0x9c>
   197d4:	add	r3, pc, r2
   197d8:	movw	r2, #1926	; 0x786
   197dc:	bl	127a8 <__assert_fail@plt>
   197e0:	ldr	r0, [sp, #4]
   197e4:	str	r0, [fp, #-4]
   197e8:	ldr	r0, [fp, #-4]
   197ec:	mov	sp, fp
   197f0:	pop	{fp, pc}
   197f4:	andeq	r4, r0, sp, lsl r3
   197f8:	andeq	r4, r0, sl, lsr #1
   197fc:	andeq	r5, r0, r1, lsl r0

00019800 <flatcc_builder_finalize_buffer@@Base>:
   19800:	push	{fp, lr}
   19804:	mov	fp, sp
   19808:	sub	sp, sp, #16
   1980c:	str	r0, [fp, #-4]
   19810:	str	r1, [sp, #8]
   19814:	ldr	r0, [fp, #-4]
   19818:	bl	194c8 <flatcc_builder_get_buffer_size@@Base>
   1981c:	str	r0, [sp]
   19820:	ldr	r0, [sp, #8]
   19824:	movw	r1, #0
   19828:	cmp	r0, r1
   1982c:	beq	1983c <flatcc_builder_finalize_buffer@@Base+0x3c>
   19830:	ldr	r0, [sp]
   19834:	ldr	r1, [sp, #8]
   19838:	str	r0, [r1]
   1983c:	ldr	r0, [sp]
   19840:	bl	1273c <malloc@plt>
   19844:	str	r0, [sp, #4]
   19848:	ldr	r0, [sp, #4]
   1984c:	movw	lr, #0
   19850:	cmp	r0, lr
   19854:	bne	19878 <flatcc_builder_finalize_buffer@@Base+0x78>
   19858:	ldr	r0, [pc, #144]	; 198f0 <flatcc_builder_finalize_buffer@@Base+0xf0>
   1985c:	add	r0, pc, r0
   19860:	ldr	r1, [pc, #140]	; 198f4 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19864:	add	r1, pc, r1
   19868:	ldr	r2, [pc, #136]	; 198f8 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1986c:	add	r3, pc, r2
   19870:	movw	r2, #1944	; 0x798
   19874:	bl	127a8 <__assert_fail@plt>
   19878:	ldr	r0, [fp, #-4]
   1987c:	ldr	r1, [sp, #4]
   19880:	ldr	r2, [sp]
   19884:	bl	19760 <flatcc_builder_copy_buffer@@Base>
   19888:	movw	r1, #0
   1988c:	cmp	r0, r1
   19890:	bne	198b4 <flatcc_builder_finalize_buffer@@Base+0xb4>
   19894:	ldr	r0, [pc, #96]	; 198fc <flatcc_builder_finalize_buffer@@Base+0xfc>
   19898:	add	r0, pc, r0
   1989c:	ldr	r1, [pc, #92]	; 19900 <flatcc_builder_finalize_buffer@@Base+0x100>
   198a0:	add	r1, pc, r1
   198a4:	ldr	r2, [pc, #88]	; 19904 <flatcc_builder_finalize_buffer@@Base+0x104>
   198a8:	add	r3, pc, r2
   198ac:	movw	r2, #1948	; 0x79c
   198b0:	bl	127a8 <__assert_fail@plt>
   198b4:	b	198b8 <flatcc_builder_finalize_buffer@@Base+0xb8>
   198b8:	ldr	r0, [sp, #4]
   198bc:	movw	r1, #0
   198c0:	cmp	r0, r1
   198c4:	bne	198e4 <flatcc_builder_finalize_buffer@@Base+0xe4>
   198c8:	ldr	r0, [sp, #8]
   198cc:	movw	r1, #0
   198d0:	cmp	r0, r1
   198d4:	beq	198e4 <flatcc_builder_finalize_buffer@@Base+0xe4>
   198d8:	ldr	r0, [sp, #8]
   198dc:	movw	r1, #0
   198e0:	str	r1, [r0]
   198e4:	ldr	r0, [sp, #4]
   198e8:	mov	sp, fp
   198ec:	pop	{fp, pc}
   198f0:	ldrdeq	r5, [r0], -r7
   198f4:	andeq	r4, r0, r2, lsl r0
   198f8:			; <UNDEFINED> instruction: 0x00004fbe
   198fc:	muleq	r0, fp, r1
   19900:	ldrdeq	r3, [r0], -r6
   19904:	andeq	r4, r0, r2, lsl #31

00019908 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19908:	push	{fp, lr}
   1990c:	mov	fp, sp
   19910:	sub	sp, sp, #24
   19914:	str	r0, [fp, #-4]
   19918:	str	r1, [fp, #-8]
   1991c:	ldr	r0, [fp, #-4]
   19920:	bl	194c8 <flatcc_builder_get_buffer_size@@Base>
   19924:	str	r0, [sp, #4]
   19928:	ldr	r0, [fp, #-8]
   1992c:	movw	r1, #0
   19930:	cmp	r0, r1
   19934:	beq	19944 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   19938:	ldr	r0, [sp, #4]
   1993c:	ldr	r1, [fp, #-8]
   19940:	str	r0, [r1]
   19944:	ldr	r0, [fp, #-4]
   19948:	bl	193f8 <flatcc_builder_get_buffer_alignment@@Base>
   1994c:	uxth	r0, r0
   19950:	str	r0, [sp, #8]
   19954:	ldr	r0, [sp, #4]
   19958:	ldr	lr, [sp, #8]
   1995c:	add	r0, r0, lr
   19960:	sub	r0, r0, #1
   19964:	ldr	lr, [sp, #8]
   19968:	sub	lr, lr, #1
   1996c:	mvn	r1, #0
   19970:	eor	r1, lr, r1
   19974:	and	r0, r0, r1
   19978:	str	r0, [sp, #4]
   1997c:	ldr	r0, [sp, #8]
   19980:	ldr	r1, [sp, #4]
   19984:	bl	19a0c <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   19988:	str	r0, [sp, #12]
   1998c:	ldr	r0, [sp, #12]
   19990:	movw	r1, #0
   19994:	cmp	r0, r1
   19998:	bne	199a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   1999c:	b	199d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   199a0:	ldr	r0, [fp, #-4]
   199a4:	ldr	r1, [sp, #12]
   199a8:	ldr	r2, [sp, #4]
   199ac:	bl	19760 <flatcc_builder_copy_buffer@@Base>
   199b0:	movw	r1, #0
   199b4:	cmp	r0, r1
   199b8:	bne	199d0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   199bc:	ldr	r0, [sp, #12]
   199c0:	bl	1270c <free@plt>
   199c4:	movw	r0, #0
   199c8:	str	r0, [sp, #12]
   199cc:	b	199d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   199d0:	b	199d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   199d4:	ldr	r0, [sp, #12]
   199d8:	movw	r1, #0
   199dc:	cmp	r0, r1
   199e0:	bne	19a00 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   199e4:	ldr	r0, [fp, #-8]
   199e8:	movw	r1, #0
   199ec:	cmp	r0, r1
   199f0:	beq	19a00 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   199f4:	ldr	r0, [fp, #-8]
   199f8:	movw	r1, #0
   199fc:	str	r1, [r0]
   19a00:	ldr	r0, [sp, #12]
   19a04:	mov	sp, fp
   19a08:	pop	{fp, pc}
   19a0c:	push	{fp, lr}
   19a10:	mov	fp, sp
   19a14:	sub	sp, sp, #16
   19a18:	str	r0, [fp, #-4]
   19a1c:	str	r1, [sp, #8]
   19a20:	movw	r0, #0
   19a24:	str	r0, [sp]
   19a28:	ldr	r0, [fp, #-4]
   19a2c:	cmp	r0, #4
   19a30:	bcs	19a3c <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   19a34:	movw	r0, #4
   19a38:	str	r0, [fp, #-4]
   19a3c:	ldr	r1, [fp, #-4]
   19a40:	ldr	r2, [sp, #8]
   19a44:	mov	r0, sp
   19a48:	bl	1276c <posix_memalign@plt>
   19a4c:	str	r0, [sp, #4]
   19a50:	ldr	r0, [sp, #4]
   19a54:	cmp	r0, #0
   19a58:	beq	19a7c <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19a5c:	ldr	r0, [sp]
   19a60:	movw	r1, #0
   19a64:	cmp	r0, r1
   19a68:	beq	19a7c <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19a6c:	ldr	r0, [sp]
   19a70:	bl	1270c <free@plt>
   19a74:	movw	r0, #0
   19a78:	str	r0, [sp]
   19a7c:	ldr	r0, [sp]
   19a80:	mov	sp, fp
   19a84:	pop	{fp, pc}

00019a88 <flatcc_builder_aligned_alloc@@Base>:
   19a88:	push	{fp, lr}
   19a8c:	mov	fp, sp
   19a90:	sub	sp, sp, #8
   19a94:	str	r0, [sp, #4]
   19a98:	str	r1, [sp]
   19a9c:	ldr	r0, [sp, #4]
   19aa0:	ldr	r1, [sp]
   19aa4:	bl	19a0c <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   19aa8:	mov	sp, fp
   19aac:	pop	{fp, pc}

00019ab0 <flatcc_builder_aligned_free@@Base>:
   19ab0:	push	{fp, lr}
   19ab4:	mov	fp, sp
   19ab8:	sub	sp, sp, #8
   19abc:	str	r0, [sp, #4]
   19ac0:	ldr	r0, [sp, #4]
   19ac4:	bl	1270c <free@plt>
   19ac8:	mov	sp, fp
   19acc:	pop	{fp, pc}

00019ad0 <flatcc_builder_get_emit_context@@Base>:
   19ad0:	sub	sp, sp, #4
   19ad4:	str	r0, [sp]
   19ad8:	ldr	r0, [sp]
   19adc:	ldr	r0, [r0, #36]	; 0x24
   19ae0:	add	sp, sp, #4
   19ae4:	bx	lr
   19ae8:	sub	sp, sp, #8
   19aec:	str	r0, [sp, #4]
   19af0:	strh	r1, [sp, #2]
   19af4:	ldr	r0, [sp, #4]
   19af8:	ldr	r0, [r0, #140]	; 0x8c
   19afc:	ldrh	r1, [sp, #2]
   19b00:	sub	r1, r1, #1
   19b04:	and	r0, r0, r1
   19b08:	add	sp, sp, #8
   19b0c:	bx	lr
   19b10:	push	{fp, lr}
   19b14:	mov	fp, sp
   19b18:	sub	sp, sp, #32
   19b1c:	str	r0, [fp, #-8]
   19b20:	str	r1, [fp, #-12]
   19b24:	str	r2, [sp, #16]
   19b28:	ldr	r0, [fp, #-8]
   19b2c:	add	r0, r0, #52	; 0x34
   19b30:	add	r0, r0, #8
   19b34:	str	r0, [sp, #12]
   19b38:	ldr	r0, [fp, #-8]
   19b3c:	ldr	r0, [r0, #48]	; 0x30
   19b40:	ldr	r1, [fp, #-8]
   19b44:	ldr	r1, [r1, #40]	; 0x28
   19b48:	ldr	r2, [sp, #12]
   19b4c:	ldr	r3, [fp, #-8]
   19b50:	ldr	r3, [r3, #28]
   19b54:	ldr	ip, [fp, #-12]
   19b58:	add	r3, r3, ip
   19b5c:	str	r0, [sp, #8]
   19b60:	mov	r0, r1
   19b64:	mov	r1, r2
   19b68:	mov	r2, r3
   19b6c:	movw	r3, #1
   19b70:	str	r3, [sp, #4]
   19b74:	ldr	ip, [sp, #4]
   19b78:	str	ip, [sp]
   19b7c:	ldr	lr, [sp, #8]
   19b80:	blx	lr
   19b84:	cmp	r0, #0
   19b88:	beq	19b98 <flatcc_builder_get_emit_context@@Base+0xc8>
   19b8c:	mvn	r0, #0
   19b90:	str	r0, [fp, #-4]
   19b94:	b	19bac <flatcc_builder_get_emit_context@@Base+0xdc>
   19b98:	ldr	r0, [fp, #-8]
   19b9c:	ldr	r1, [sp, #16]
   19ba0:	bl	15914 <flatcc_builder_start_struct@@Base+0x70>
   19ba4:	movw	r0, #0
   19ba8:	str	r0, [fp, #-4]
   19bac:	ldr	r0, [fp, #-4]
   19bb0:	mov	sp, fp
   19bb4:	pop	{fp, pc}
   19bb8:	push	{fp, lr}
   19bbc:	mov	fp, sp
   19bc0:	sub	sp, sp, #32
   19bc4:	str	r0, [fp, #-8]
   19bc8:	ldr	r0, [fp, #-8]
   19bcc:	add	r0, r0, #52	; 0x34
   19bd0:	add	r0, r0, #40	; 0x28
   19bd4:	str	r0, [fp, #-12]
   19bd8:	ldr	r0, [fp, #-8]
   19bdc:	ldr	r0, [r0, #124]	; 0x7c
   19be0:	cmp	r0, #0
   19be4:	bne	19bec <flatcc_builder_get_emit_context@@Base+0x11c>
   19be8:	b	19c0c <flatcc_builder_get_emit_context@@Base+0x13c>
   19bec:	ldr	r0, [pc, #320]	; 19d34 <flatcc_builder_get_emit_context@@Base+0x264>
   19bf0:	add	r0, pc, r0
   19bf4:	ldr	r1, [pc, #316]	; 19d38 <flatcc_builder_get_emit_context@@Base+0x268>
   19bf8:	add	r1, pc, r1
   19bfc:	ldr	r2, [pc, #312]	; 19d3c <flatcc_builder_get_emit_context@@Base+0x26c>
   19c00:	add	r3, pc, r2
   19c04:	movw	r2, #342	; 0x156
   19c08:	bl	127a8 <__assert_fail@plt>
   19c0c:	ldr	r0, [fp, #-8]
   19c10:	ldr	r1, [fp, #-8]
   19c14:	ldr	r2, [r1, #124]	; 0x7c
   19c18:	movw	r1, #6
   19c1c:	movw	r3, #16
   19c20:	movw	ip, #0
   19c24:	str	ip, [sp]
   19c28:	bl	1463c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   19c2c:	movw	r1, #0
   19c30:	cmp	r0, r1
   19c34:	bne	19c44 <flatcc_builder_get_emit_context@@Base+0x174>
   19c38:	mvn	r0, #0
   19c3c:	str	r0, [fp, #-4]
   19c40:	b	19d28 <flatcc_builder_get_emit_context@@Base+0x258>
   19c44:	ldr	r0, [fp, #-8]
   19c48:	movw	r1, #16
   19c4c:	str	r1, [r0, #124]	; 0x7c
   19c50:	movw	r0, #256	; 0x100
   19c54:	str	r0, [sp, #16]
   19c58:	ldr	r0, [fp, #-8]
   19c5c:	ldr	r0, [r0, #48]	; 0x30
   19c60:	ldr	r1, [fp, #-8]
   19c64:	ldr	r1, [r1, #40]	; 0x28
   19c68:	ldr	r2, [fp, #-12]
   19c6c:	ldr	r3, [sp, #16]
   19c70:	str	r0, [sp, #8]
   19c74:	mov	r0, r1
   19c78:	mov	r1, r2
   19c7c:	mov	r2, r3
   19c80:	movw	r3, #1
   19c84:	movw	ip, #5
   19c88:	str	ip, [sp]
   19c8c:	ldr	ip, [sp, #8]
   19c90:	blx	ip
   19c94:	cmp	r0, #0
   19c98:	beq	19ca8 <flatcc_builder_get_emit_context@@Base+0x1d8>
   19c9c:	mvn	r0, #0
   19ca0:	str	r0, [fp, #-4]
   19ca4:	b	19d28 <flatcc_builder_get_emit_context@@Base+0x258>
   19ca8:	b	19cac <flatcc_builder_get_emit_context@@Base+0x1dc>
   19cac:	ldr	r0, [sp, #16]
   19cb0:	lsl	r0, r0, #1
   19cb4:	ldr	r1, [fp, #-12]
   19cb8:	ldr	r1, [r1, #4]
   19cbc:	cmp	r0, r1
   19cc0:	bhi	19cd4 <flatcc_builder_get_emit_context@@Base+0x204>
   19cc4:	ldr	r0, [sp, #16]
   19cc8:	lsl	r0, r0, #1
   19ccc:	str	r0, [sp, #16]
   19cd0:	b	19cac <flatcc_builder_get_emit_context@@Base+0x1dc>
   19cd4:	ldr	r0, [sp, #16]
   19cd8:	lsr	r0, r0, #2
   19cdc:	str	r0, [sp, #16]
   19ce0:	movw	r0, #0
   19ce4:	str	r0, [sp, #12]
   19ce8:	ldr	r0, [sp, #12]
   19cec:	movw	r1, #1
   19cf0:	lsl	r0, r1, r0
   19cf4:	ldr	r1, [sp, #16]
   19cf8:	cmp	r0, r1
   19cfc:	bcs	19d14 <flatcc_builder_get_emit_context@@Base+0x244>
   19d00:	b	19d04 <flatcc_builder_get_emit_context@@Base+0x234>
   19d04:	ldr	r0, [sp, #12]
   19d08:	add	r0, r0, #1
   19d0c:	str	r0, [sp, #12]
   19d10:	b	19ce8 <flatcc_builder_get_emit_context@@Base+0x218>
   19d14:	ldr	r0, [sp, #12]
   19d18:	ldr	r1, [fp, #-8]
   19d1c:	str	r0, [r1, #116]	; 0x74
   19d20:	movw	r0, #0
   19d24:	str	r0, [fp, #-4]
   19d28:	ldr	r0, [fp, #-4]
   19d2c:	mov	sp, fp
   19d30:	pop	{fp, pc}
   19d34:	andeq	r4, r0, r7, lsl #28
   19d38:	andeq	r3, r0, lr, ror ip
   19d3c:	andeq	r4, r0, r6, lsl #28

00019d40 <flatcc_emitter_recycle_page@@Base>:
   19d40:	sub	sp, sp, #12
   19d44:	str	r0, [sp, #4]
   19d48:	str	r1, [sp]
   19d4c:	ldr	r0, [sp]
   19d50:	ldr	r1, [sp, #4]
   19d54:	ldr	r1, [r1]
   19d58:	cmp	r0, r1
   19d5c:	beq	19d74 <flatcc_emitter_recycle_page@@Base+0x34>
   19d60:	ldr	r0, [sp]
   19d64:	ldr	r1, [sp, #4]
   19d68:	ldr	r1, [r1, #4]
   19d6c:	cmp	r0, r1
   19d70:	bne	19d80 <flatcc_emitter_recycle_page@@Base+0x40>
   19d74:	mvn	r0, #0
   19d78:	str	r0, [sp, #8]
   19d7c:	b	19df4 <flatcc_emitter_recycle_page@@Base+0xb4>
   19d80:	ldr	r0, [sp]
   19d84:	ldr	r0, [r0, #2948]	; 0xb84
   19d88:	ldr	r1, [sp]
   19d8c:	ldr	r1, [r1, #2944]	; 0xb80
   19d90:	str	r0, [r1, #2948]	; 0xb84
   19d94:	ldr	r0, [sp]
   19d98:	ldr	r0, [r0, #2944]	; 0xb80
   19d9c:	ldr	r1, [sp]
   19da0:	ldr	r1, [r1, #2948]	; 0xb84
   19da4:	str	r0, [r1, #2944]	; 0xb80
   19da8:	ldr	r0, [sp, #4]
   19dac:	ldr	r0, [r0]
   19db0:	ldr	r0, [r0, #2948]	; 0xb84
   19db4:	ldr	r1, [sp]
   19db8:	str	r0, [r1, #2948]	; 0xb84
   19dbc:	ldr	r0, [sp, #4]
   19dc0:	ldr	r0, [r0]
   19dc4:	ldr	r1, [sp]
   19dc8:	str	r0, [r1, #2944]	; 0xb80
   19dcc:	ldr	r0, [sp]
   19dd0:	ldr	r1, [sp]
   19dd4:	ldr	r1, [r1, #2948]	; 0xb84
   19dd8:	str	r0, [r1, #2944]	; 0xb80
   19ddc:	ldr	r0, [sp]
   19de0:	ldr	r1, [sp]
   19de4:	ldr	r1, [r1, #2944]	; 0xb80
   19de8:	str	r0, [r1, #2948]	; 0xb84
   19dec:	movw	r0, #0
   19df0:	str	r0, [sp, #8]
   19df4:	ldr	r0, [sp, #8]
   19df8:	add	sp, sp, #12
   19dfc:	bx	lr

00019e00 <flatcc_emitter_reset@@Base>:
   19e00:	push	{fp, lr}
   19e04:	mov	fp, sp
   19e08:	sub	sp, sp, #16
   19e0c:	str	r0, [fp, #-4]
   19e10:	ldr	r0, [fp, #-4]
   19e14:	ldr	r0, [r0]
   19e18:	str	r0, [sp, #8]
   19e1c:	ldr	r0, [fp, #-4]
   19e20:	ldr	r0, [r0]
   19e24:	movw	r1, #0
   19e28:	cmp	r0, r1
   19e2c:	bne	19e34 <flatcc_emitter_reset@@Base+0x34>
   19e30:	b	19f90 <flatcc_emitter_reset@@Base+0x190>
   19e34:	ldr	r0, [fp, #-4]
   19e38:	ldr	r0, [r0]
   19e3c:	ldr	r1, [fp, #-4]
   19e40:	str	r0, [r1, #4]
   19e44:	ldr	r0, [fp, #-4]
   19e48:	ldr	r0, [r0]
   19e4c:	add	r0, r0, #1472	; 0x5c0
   19e50:	ldr	r1, [fp, #-4]
   19e54:	str	r0, [r1, #8]
   19e58:	ldr	r0, [fp, #-4]
   19e5c:	ldr	r0, [r0, #8]
   19e60:	ldr	r1, [fp, #-4]
   19e64:	str	r0, [r1, #16]
   19e68:	ldr	r0, [fp, #-4]
   19e6c:	movw	r1, #1472	; 0x5c0
   19e70:	str	r1, [r0, #12]
   19e74:	ldr	r0, [fp, #-4]
   19e78:	str	r1, [r0, #20]
   19e7c:	ldr	r0, [fp, #-4]
   19e80:	ldr	r0, [r0, #12]
   19e84:	movw	r1, #0
   19e88:	sub	r0, r1, r0
   19e8c:	ldr	r1, [fp, #-4]
   19e90:	ldr	r1, [r1]
   19e94:	str	r0, [r1, #2952]	; 0xb88
   19e98:	ldr	r0, [fp, #-4]
   19e9c:	ldr	r0, [r0, #32]
   19ea0:	cmp	r0, #0
   19ea4:	bne	19eb8 <flatcc_emitter_reset@@Base+0xb8>
   19ea8:	ldr	r0, [fp, #-4]
   19eac:	ldr	r0, [r0, #24]
   19eb0:	ldr	r1, [fp, #-4]
   19eb4:	str	r0, [r1, #32]
   19eb8:	ldr	r0, [fp, #-4]
   19ebc:	ldr	r1, [r0, #24]
   19ec0:	ldr	r0, [r0, #32]
   19ec4:	add	r0, r0, r0, lsl #1
   19ec8:	lsr	r0, r0, #2
   19ecc:	lsr	r1, r1, #2
   19ed0:	add	r0, r0, r1
   19ed4:	ldr	r1, [fp, #-4]
   19ed8:	str	r0, [r1, #32]
   19edc:	ldr	r0, [fp, #-4]
   19ee0:	movw	r1, #0
   19ee4:	str	r1, [r0, #24]
   19ee8:	ldr	r0, [fp, #-4]
   19eec:	ldr	r0, [r0, #32]
   19ef0:	lsl	r0, r0, #1
   19ef4:	ldr	r1, [fp, #-4]
   19ef8:	ldr	r1, [r1, #28]
   19efc:	cmp	r0, r1
   19f00:	movw	r0, #0
   19f04:	str	r0, [sp, #4]
   19f08:	bcs	19f30 <flatcc_emitter_reset@@Base+0x130>
   19f0c:	ldr	r0, [fp, #-4]
   19f10:	ldr	r0, [r0, #4]
   19f14:	ldr	r0, [r0, #2944]	; 0xb80
   19f18:	ldr	r1, [fp, #-4]
   19f1c:	ldr	r1, [r1]
   19f20:	cmp	r0, r1
   19f24:	movw	r0, #0
   19f28:	movne	r0, #1
   19f2c:	str	r0, [sp, #4]
   19f30:	ldr	r0, [sp, #4]
   19f34:	tst	r0, #1
   19f38:	beq	19f90 <flatcc_emitter_reset@@Base+0x190>
   19f3c:	ldr	r0, [fp, #-4]
   19f40:	ldr	r0, [r0, #4]
   19f44:	ldr	r0, [r0, #2944]	; 0xb80
   19f48:	str	r0, [sp, #8]
   19f4c:	ldr	r0, [sp, #8]
   19f50:	ldr	r0, [r0, #2944]	; 0xb80
   19f54:	ldr	r1, [fp, #-4]
   19f58:	ldr	r1, [r1, #4]
   19f5c:	str	r0, [r1, #2944]	; 0xb80
   19f60:	ldr	r0, [fp, #-4]
   19f64:	ldr	r0, [r0, #4]
   19f68:	ldr	r1, [sp, #8]
   19f6c:	ldr	r1, [r1, #2944]	; 0xb80
   19f70:	str	r0, [r1, #2948]	; 0xb84
   19f74:	ldr	r0, [sp, #8]
   19f78:	bl	1270c <free@plt>
   19f7c:	ldr	r0, [fp, #-4]
   19f80:	ldr	r1, [r0, #28]
   19f84:	sub	r1, r1, #2944	; 0xb80
   19f88:	str	r1, [r0, #28]
   19f8c:	b	19ee8 <flatcc_emitter_reset@@Base+0xe8>
   19f90:	mov	sp, fp
   19f94:	pop	{fp, pc}

00019f98 <flatcc_emitter_clear@@Base>:
   19f98:	push	{fp, lr}
   19f9c:	mov	fp, sp
   19fa0:	sub	sp, sp, #8
   19fa4:	str	r0, [sp, #4]
   19fa8:	ldr	r0, [sp, #4]
   19fac:	ldr	r0, [r0]
   19fb0:	str	r0, [sp]
   19fb4:	ldr	r0, [sp]
   19fb8:	movw	r1, #0
   19fbc:	cmp	r0, r1
   19fc0:	bne	19fc8 <flatcc_emitter_clear@@Base+0x30>
   19fc4:	b	1a024 <flatcc_emitter_clear@@Base+0x8c>
   19fc8:	ldr	r0, [sp]
   19fcc:	ldr	r0, [r0, #2948]	; 0xb84
   19fd0:	movw	r1, #0
   19fd4:	str	r1, [r0, #2944]	; 0xb80
   19fd8:	ldr	r0, [sp]
   19fdc:	ldr	r0, [r0, #2944]	; 0xb80
   19fe0:	movw	r1, #0
   19fe4:	cmp	r0, r1
   19fe8:	beq	1a008 <flatcc_emitter_clear@@Base+0x70>
   19fec:	ldr	r0, [sp]
   19ff0:	ldr	r0, [r0, #2944]	; 0xb80
   19ff4:	str	r0, [sp]
   19ff8:	ldr	r0, [sp]
   19ffc:	ldr	r0, [r0, #2948]	; 0xb84
   1a000:	bl	1270c <free@plt>
   1a004:	b	19fd8 <flatcc_emitter_clear@@Base+0x40>
   1a008:	ldr	r0, [sp]
   1a00c:	bl	1270c <free@plt>
   1a010:	ldr	r0, [sp, #4]
   1a014:	movw	lr, #0
   1a018:	and	r1, lr, #255	; 0xff
   1a01c:	movw	r2, #36	; 0x24
   1a020:	bl	12778 <memset@plt>
   1a024:	mov	sp, fp
   1a028:	pop	{fp, pc}

0001a02c <flatcc_emitter@@Base>:
   1a02c:	push	{fp, lr}
   1a030:	mov	fp, sp
   1a034:	sub	sp, sp, #32
   1a038:	ldr	ip, [fp, #8]
   1a03c:	str	r0, [fp, #-8]
   1a040:	str	r1, [fp, #-12]
   1a044:	str	r2, [sp, #16]
   1a048:	str	r3, [sp, #12]
   1a04c:	ldr	r0, [fp, #-8]
   1a050:	str	r0, [sp, #8]
   1a054:	ldr	r0, [fp, #8]
   1a058:	ldr	r1, [sp, #8]
   1a05c:	ldr	r2, [r1, #24]
   1a060:	add	r0, r2, r0
   1a064:	str	r0, [r1, #24]
   1a068:	ldr	r0, [sp, #12]
   1a06c:	cmp	r0, #0
   1a070:	str	ip, [sp]
   1a074:	bge	1a138 <flatcc_emitter@@Base+0x10c>
   1a078:	ldr	r0, [fp, #8]
   1a07c:	ldr	r1, [sp, #8]
   1a080:	ldr	r1, [r1, #12]
   1a084:	cmp	r0, r1
   1a088:	bhi	1a0cc <flatcc_emitter@@Base+0xa0>
   1a08c:	ldr	r0, [fp, #8]
   1a090:	ldr	r1, [sp, #8]
   1a094:	ldr	r2, [r1, #8]
   1a098:	movw	r3, #0
   1a09c:	sub	r0, r3, r0
   1a0a0:	add	r0, r2, r0
   1a0a4:	str	r0, [r1, #8]
   1a0a8:	ldr	r0, [fp, #8]
   1a0ac:	ldr	r1, [sp, #8]
   1a0b0:	ldr	r2, [r1, #12]
   1a0b4:	sub	r0, r2, r0
   1a0b8:	str	r0, [r1, #12]
   1a0bc:	ldr	r0, [sp, #8]
   1a0c0:	ldr	r0, [r0, #8]
   1a0c4:	str	r0, [sp, #4]
   1a0c8:	b	1a1ec <flatcc_emitter@@Base+0x1c0>
   1a0cc:	ldr	r0, [sp, #16]
   1a0d0:	ldr	r1, [fp, #-12]
   1a0d4:	add	r0, r1, r0, lsl #3
   1a0d8:	str	r0, [fp, #-12]
   1a0dc:	ldr	r0, [sp, #16]
   1a0e0:	mvn	r1, #0
   1a0e4:	add	r1, r0, r1
   1a0e8:	str	r1, [sp, #16]
   1a0ec:	cmp	r0, #0
   1a0f0:	beq	1a134 <flatcc_emitter@@Base+0x108>
   1a0f4:	ldr	r0, [fp, #-12]
   1a0f8:	mvn	r1, #7
   1a0fc:	add	r0, r0, r1
   1a100:	str	r0, [fp, #-12]
   1a104:	ldr	r0, [sp, #8]
   1a108:	ldr	r1, [fp, #-12]
   1a10c:	ldr	r1, [r1]
   1a110:	ldr	r2, [fp, #-12]
   1a114:	ldr	r2, [r2, #4]
   1a118:	bl	1a258 <flatcc_emitter@@Base+0x22c>
   1a11c:	cmp	r0, #0
   1a120:	beq	1a130 <flatcc_emitter@@Base+0x104>
   1a124:	mvn	r0, #0
   1a128:	str	r0, [fp, #-4]
   1a12c:	b	1a24c <flatcc_emitter@@Base+0x220>
   1a130:	b	1a0dc <flatcc_emitter@@Base+0xb0>
   1a134:	b	1a1e0 <flatcc_emitter@@Base+0x1b4>
   1a138:	ldr	r0, [fp, #8]
   1a13c:	ldr	r1, [sp, #8]
   1a140:	ldr	r1, [r1, #20]
   1a144:	cmp	r0, r1
   1a148:	bhi	1a184 <flatcc_emitter@@Base+0x158>
   1a14c:	ldr	r0, [sp, #8]
   1a150:	ldr	r0, [r0, #16]
   1a154:	str	r0, [sp, #4]
   1a158:	ldr	r0, [fp, #8]
   1a15c:	ldr	r1, [sp, #8]
   1a160:	ldr	r2, [r1, #16]
   1a164:	add	r0, r2, r0
   1a168:	str	r0, [r1, #16]
   1a16c:	ldr	r0, [fp, #8]
   1a170:	ldr	r1, [sp, #8]
   1a174:	ldr	r2, [r1, #20]
   1a178:	sub	r0, r2, r0
   1a17c:	str	r0, [r1, #20]
   1a180:	b	1a1ec <flatcc_emitter@@Base+0x1c0>
   1a184:	b	1a188 <flatcc_emitter@@Base+0x15c>
   1a188:	ldr	r0, [sp, #16]
   1a18c:	mvn	r1, #0
   1a190:	add	r1, r0, r1
   1a194:	str	r1, [sp, #16]
   1a198:	cmp	r0, #0
   1a19c:	beq	1a1dc <flatcc_emitter@@Base+0x1b0>
   1a1a0:	ldr	r0, [sp, #8]
   1a1a4:	ldr	r1, [fp, #-12]
   1a1a8:	ldr	r1, [r1]
   1a1ac:	ldr	r2, [fp, #-12]
   1a1b0:	ldr	r2, [r2, #4]
   1a1b4:	bl	1a364 <flatcc_emitter@@Base+0x338>
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1cc <flatcc_emitter@@Base+0x1a0>
   1a1c0:	mvn	r0, #0
   1a1c4:	str	r0, [fp, #-4]
   1a1c8:	b	1a24c <flatcc_emitter@@Base+0x220>
   1a1cc:	ldr	r0, [fp, #-12]
   1a1d0:	add	r0, r0, #8
   1a1d4:	str	r0, [fp, #-12]
   1a1d8:	b	1a188 <flatcc_emitter@@Base+0x15c>
   1a1dc:	b	1a1e0 <flatcc_emitter@@Base+0x1b4>
   1a1e0:	movw	r0, #0
   1a1e4:	str	r0, [fp, #-4]
   1a1e8:	b	1a24c <flatcc_emitter@@Base+0x220>
   1a1ec:	b	1a1f0 <flatcc_emitter@@Base+0x1c4>
   1a1f0:	ldr	r0, [sp, #16]
   1a1f4:	mvn	r1, #0
   1a1f8:	add	r1, r0, r1
   1a1fc:	str	r1, [sp, #16]
   1a200:	cmp	r0, #0
   1a204:	beq	1a244 <flatcc_emitter@@Base+0x218>
   1a208:	ldr	r0, [sp, #4]
   1a20c:	ldr	r1, [fp, #-12]
   1a210:	ldr	r1, [r1]
   1a214:	ldr	r2, [fp, #-12]
   1a218:	ldr	r2, [r2, #4]
   1a21c:	bl	12718 <memcpy@plt>
   1a220:	ldr	r0, [fp, #-12]
   1a224:	ldr	r0, [r0, #4]
   1a228:	ldr	r1, [sp, #4]
   1a22c:	add	r0, r1, r0
   1a230:	str	r0, [sp, #4]
   1a234:	ldr	r0, [fp, #-12]
   1a238:	add	r0, r0, #8
   1a23c:	str	r0, [fp, #-12]
   1a240:	b	1a1f0 <flatcc_emitter@@Base+0x1c4>
   1a244:	movw	r0, #0
   1a248:	str	r0, [fp, #-4]
   1a24c:	ldr	r0, [fp, #-4]
   1a250:	mov	sp, fp
   1a254:	pop	{fp, pc}
   1a258:	push	{fp, lr}
   1a25c:	mov	fp, sp
   1a260:	sub	sp, sp, #24
   1a264:	str	r0, [fp, #-8]
   1a268:	str	r1, [sp, #12]
   1a26c:	str	r2, [sp, #8]
   1a270:	ldr	r0, [sp, #8]
   1a274:	ldr	r1, [sp, #12]
   1a278:	add	r0, r1, r0
   1a27c:	str	r0, [sp, #12]
   1a280:	ldr	r0, [sp, #8]
   1a284:	cmp	r0, #0
   1a288:	beq	1a350 <flatcc_emitter@@Base+0x324>
   1a28c:	ldr	r0, [sp, #8]
   1a290:	str	r0, [sp, #4]
   1a294:	ldr	r0, [sp, #4]
   1a298:	ldr	r1, [fp, #-8]
   1a29c:	ldr	r1, [r1, #12]
   1a2a0:	cmp	r0, r1
   1a2a4:	bls	1a2e4 <flatcc_emitter@@Base+0x2b8>
   1a2a8:	ldr	r0, [fp, #-8]
   1a2ac:	ldr	r0, [r0, #12]
   1a2b0:	str	r0, [sp, #4]
   1a2b4:	ldr	r0, [sp, #4]
   1a2b8:	cmp	r0, #0
   1a2bc:	bne	1a2e0 <flatcc_emitter@@Base+0x2b4>
   1a2c0:	ldr	r0, [fp, #-8]
   1a2c4:	bl	1a5a0 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a2dc <flatcc_emitter@@Base+0x2b0>
   1a2d0:	mvn	r0, #0
   1a2d4:	str	r0, [fp, #-4]
   1a2d8:	b	1a358 <flatcc_emitter@@Base+0x32c>
   1a2dc:	b	1a280 <flatcc_emitter@@Base+0x254>
   1a2e0:	b	1a2e4 <flatcc_emitter@@Base+0x2b8>
   1a2e4:	ldr	r0, [sp, #4]
   1a2e8:	ldr	r1, [fp, #-8]
   1a2ec:	ldr	r2, [r1, #8]
   1a2f0:	movw	r3, #0
   1a2f4:	sub	r0, r3, r0
   1a2f8:	add	r0, r2, r0
   1a2fc:	str	r0, [r1, #8]
   1a300:	ldr	r0, [sp, #4]
   1a304:	ldr	r1, [fp, #-8]
   1a308:	ldr	r2, [r1, #12]
   1a30c:	sub	r0, r2, r0
   1a310:	str	r0, [r1, #12]
   1a314:	ldr	r0, [sp, #4]
   1a318:	ldr	r1, [sp, #12]
   1a31c:	sub	r0, r3, r0
   1a320:	add	r0, r1, r0
   1a324:	str	r0, [sp, #12]
   1a328:	ldr	r0, [sp, #4]
   1a32c:	ldr	r1, [sp, #8]
   1a330:	sub	r0, r1, r0
   1a334:	str	r0, [sp, #8]
   1a338:	ldr	r0, [fp, #-8]
   1a33c:	ldr	r0, [r0, #8]
   1a340:	ldr	r1, [sp, #12]
   1a344:	ldr	r2, [sp, #4]
   1a348:	bl	12718 <memcpy@plt>
   1a34c:	b	1a280 <flatcc_emitter@@Base+0x254>
   1a350:	movw	r0, #0
   1a354:	str	r0, [fp, #-4]
   1a358:	ldr	r0, [fp, #-4]
   1a35c:	mov	sp, fp
   1a360:	pop	{fp, pc}
   1a364:	push	{fp, lr}
   1a368:	mov	fp, sp
   1a36c:	sub	sp, sp, #24
   1a370:	str	r0, [fp, #-8]
   1a374:	str	r1, [sp, #12]
   1a378:	str	r2, [sp, #8]
   1a37c:	ldr	r0, [sp, #8]
   1a380:	cmp	r0, #0
   1a384:	beq	1a440 <flatcc_emitter@@Base+0x414>
   1a388:	ldr	r0, [sp, #8]
   1a38c:	str	r0, [sp, #4]
   1a390:	ldr	r0, [sp, #4]
   1a394:	ldr	r1, [fp, #-8]
   1a398:	ldr	r1, [r1, #20]
   1a39c:	cmp	r0, r1
   1a3a0:	bls	1a3e0 <flatcc_emitter@@Base+0x3b4>
   1a3a4:	ldr	r0, [fp, #-8]
   1a3a8:	ldr	r0, [r0, #20]
   1a3ac:	str	r0, [sp, #4]
   1a3b0:	ldr	r0, [sp, #4]
   1a3b4:	cmp	r0, #0
   1a3b8:	bne	1a3dc <flatcc_emitter@@Base+0x3b0>
   1a3bc:	ldr	r0, [fp, #-8]
   1a3c0:	bl	1a7a0 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1a3c4:	cmp	r0, #0
   1a3c8:	beq	1a3d8 <flatcc_emitter@@Base+0x3ac>
   1a3cc:	mvn	r0, #0
   1a3d0:	str	r0, [fp, #-4]
   1a3d4:	b	1a448 <flatcc_emitter@@Base+0x41c>
   1a3d8:	b	1a37c <flatcc_emitter@@Base+0x350>
   1a3dc:	b	1a3e0 <flatcc_emitter@@Base+0x3b4>
   1a3e0:	ldr	r0, [fp, #-8]
   1a3e4:	ldr	r0, [r0, #16]
   1a3e8:	ldr	r1, [sp, #12]
   1a3ec:	ldr	r2, [sp, #4]
   1a3f0:	bl	12718 <memcpy@plt>
   1a3f4:	ldr	r0, [sp, #4]
   1a3f8:	ldr	r1, [sp, #8]
   1a3fc:	sub	r0, r1, r0
   1a400:	str	r0, [sp, #8]
   1a404:	ldr	r0, [sp, #4]
   1a408:	ldr	r1, [sp, #12]
   1a40c:	add	r0, r1, r0
   1a410:	str	r0, [sp, #12]
   1a414:	ldr	r0, [sp, #4]
   1a418:	ldr	r1, [fp, #-8]
   1a41c:	ldr	r2, [r1, #16]
   1a420:	add	r0, r2, r0
   1a424:	str	r0, [r1, #16]
   1a428:	ldr	r0, [sp, #4]
   1a42c:	ldr	r1, [fp, #-8]
   1a430:	ldr	r2, [r1, #20]
   1a434:	sub	r0, r2, r0
   1a438:	str	r0, [r1, #20]
   1a43c:	b	1a37c <flatcc_emitter@@Base+0x350>
   1a440:	movw	r0, #0
   1a444:	str	r0, [fp, #-4]
   1a448:	ldr	r0, [fp, #-4]
   1a44c:	mov	sp, fp
   1a450:	pop	{fp, pc}

0001a454 <flatcc_emitter_copy_buffer@@Base>:
   1a454:	push	{fp, lr}
   1a458:	mov	fp, sp
   1a45c:	sub	sp, sp, #24
   1a460:	str	r0, [fp, #-8]
   1a464:	str	r1, [sp, #12]
   1a468:	str	r2, [sp, #8]
   1a46c:	ldr	r0, [sp, #8]
   1a470:	ldr	r1, [fp, #-8]
   1a474:	ldr	r1, [r1, #24]
   1a478:	cmp	r0, r1
   1a47c:	bcs	1a48c <flatcc_emitter_copy_buffer@@Base+0x38>
   1a480:	movw	r0, #0
   1a484:	str	r0, [fp, #-4]
   1a488:	b	1a594 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a48c:	ldr	r0, [fp, #-8]
   1a490:	ldr	r0, [r0]
   1a494:	movw	r1, #0
   1a498:	cmp	r0, r1
   1a49c:	bne	1a4ac <flatcc_emitter_copy_buffer@@Base+0x58>
   1a4a0:	movw	r0, #0
   1a4a4:	str	r0, [fp, #-4]
   1a4a8:	b	1a594 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a4ac:	ldr	r0, [fp, #-8]
   1a4b0:	ldr	r0, [r0]
   1a4b4:	ldr	r1, [fp, #-8]
   1a4b8:	ldr	r1, [r1, #4]
   1a4bc:	cmp	r0, r1
   1a4c0:	bne	1a4e8 <flatcc_emitter_copy_buffer@@Base+0x94>
   1a4c4:	ldr	r0, [sp, #12]
   1a4c8:	ldr	r1, [fp, #-8]
   1a4cc:	ldr	r1, [r1, #8]
   1a4d0:	ldr	r2, [fp, #-8]
   1a4d4:	ldr	r2, [r2, #24]
   1a4d8:	bl	12718 <memcpy@plt>
   1a4dc:	ldr	r0, [sp, #12]
   1a4e0:	str	r0, [fp, #-4]
   1a4e4:	b	1a594 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a4e8:	ldr	r0, [fp, #-8]
   1a4ec:	ldr	r0, [r0, #12]
   1a4f0:	movw	r1, #2944	; 0xb80
   1a4f4:	sub	r0, r1, r0
   1a4f8:	str	r0, [sp]
   1a4fc:	ldr	r0, [sp, #12]
   1a500:	ldr	r1, [fp, #-8]
   1a504:	ldr	r1, [r1, #8]
   1a508:	ldr	r2, [sp]
   1a50c:	bl	12718 <memcpy@plt>
   1a510:	ldr	r0, [sp, #12]
   1a514:	ldr	r1, [sp]
   1a518:	add	r0, r0, r1
   1a51c:	str	r0, [sp, #12]
   1a520:	ldr	r0, [fp, #-8]
   1a524:	ldr	r0, [r0]
   1a528:	ldr	r0, [r0, #2944]	; 0xb80
   1a52c:	str	r0, [sp, #4]
   1a530:	ldr	r0, [sp, #4]
   1a534:	ldr	r1, [fp, #-8]
   1a538:	ldr	r1, [r1, #4]
   1a53c:	cmp	r0, r1
   1a540:	beq	1a570 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1a544:	ldr	r0, [sp, #12]
   1a548:	ldr	r1, [sp, #4]
   1a54c:	movw	r2, #2944	; 0xb80
   1a550:	bl	12718 <memcpy@plt>
   1a554:	ldr	r0, [sp, #12]
   1a558:	add	r0, r0, #2944	; 0xb80
   1a55c:	str	r0, [sp, #12]
   1a560:	ldr	r0, [sp, #4]
   1a564:	ldr	r0, [r0, #2944]	; 0xb80
   1a568:	str	r0, [sp, #4]
   1a56c:	b	1a530 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1a570:	ldr	r0, [sp, #12]
   1a574:	ldr	r1, [sp, #4]
   1a578:	ldr	r2, [fp, #-8]
   1a57c:	ldr	r2, [r2, #20]
   1a580:	movw	r3, #2944	; 0xb80
   1a584:	sub	r2, r3, r2
   1a588:	bl	12718 <memcpy@plt>
   1a58c:	ldr	r0, [sp, #12]
   1a590:	str	r0, [fp, #-4]
   1a594:	ldr	r0, [fp, #-4]
   1a598:	mov	sp, fp
   1a59c:	pop	{fp, pc}
   1a5a0:	push	{fp, lr}
   1a5a4:	mov	fp, sp
   1a5a8:	sub	sp, sp, #16
   1a5ac:	str	r0, [sp, #8]
   1a5b0:	movw	r0, #0
   1a5b4:	str	r0, [sp, #4]
   1a5b8:	ldr	r1, [sp, #8]
   1a5bc:	ldr	r1, [r1]
   1a5c0:	cmp	r1, r0
   1a5c4:	beq	1a61c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a5c8:	ldr	r0, [sp, #8]
   1a5cc:	ldr	r0, [r0]
   1a5d0:	ldr	r0, [r0, #2948]	; 0xb84
   1a5d4:	ldr	r1, [sp, #8]
   1a5d8:	ldr	r1, [r1, #4]
   1a5dc:	cmp	r0, r1
   1a5e0:	beq	1a61c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a5e4:	ldr	r0, [sp, #8]
   1a5e8:	ldr	r0, [r0]
   1a5ec:	ldr	r0, [r0, #2952]	; 0xb88
   1a5f0:	sub	r0, r0, #2944	; 0xb80
   1a5f4:	ldr	r1, [sp, #8]
   1a5f8:	ldr	r1, [r1]
   1a5fc:	ldr	r1, [r1, #2948]	; 0xb84
   1a600:	str	r0, [r1, #2952]	; 0xb88
   1a604:	ldr	r0, [sp, #8]
   1a608:	ldr	r0, [r0]
   1a60c:	ldr	r0, [r0, #2948]	; 0xb84
   1a610:	ldr	r1, [sp, #8]
   1a614:	str	r0, [r1]
   1a618:	b	1a74c <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a61c:	movw	r0, #2956	; 0xb8c
   1a620:	bl	1273c <malloc@plt>
   1a624:	str	r0, [sp, #4]
   1a628:	movw	lr, #0
   1a62c:	cmp	r0, lr
   1a630:	bne	1a640 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1a634:	mvn	r0, #0
   1a638:	str	r0, [fp, #-4]
   1a63c:	b	1a794 <flatcc_emitter_copy_buffer@@Base+0x340>
   1a640:	ldr	r0, [sp, #8]
   1a644:	ldr	r1, [r0, #28]
   1a648:	add	r1, r1, #2944	; 0xb80
   1a64c:	str	r1, [r0, #28]
   1a650:	ldr	r0, [sp, #8]
   1a654:	ldr	r0, [r0]
   1a658:	movw	r1, #0
   1a65c:	cmp	r0, r1
   1a660:	beq	1a6b4 <flatcc_emitter_copy_buffer@@Base+0x260>
   1a664:	ldr	r0, [sp, #8]
   1a668:	ldr	r0, [r0, #4]
   1a66c:	ldr	r1, [sp, #4]
   1a670:	str	r0, [r1, #2948]	; 0xb84
   1a674:	ldr	r0, [sp, #8]
   1a678:	ldr	r0, [r0]
   1a67c:	ldr	r1, [sp, #4]
   1a680:	str	r0, [r1, #2944]	; 0xb80
   1a684:	ldr	r0, [sp, #4]
   1a688:	ldr	r1, [sp, #8]
   1a68c:	ldr	r1, [r1]
   1a690:	str	r0, [r1, #2948]	; 0xb84
   1a694:	ldr	r0, [sp, #4]
   1a698:	ldr	r1, [sp, #8]
   1a69c:	ldr	r1, [r1, #4]
   1a6a0:	str	r0, [r1, #2944]	; 0xb80
   1a6a4:	ldr	r0, [sp, #4]
   1a6a8:	ldr	r1, [sp, #8]
   1a6ac:	str	r0, [r1]
   1a6b0:	b	1a74c <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a6b4:	ldr	r0, [sp, #4]
   1a6b8:	ldr	r1, [sp, #8]
   1a6bc:	str	r0, [r1]
   1a6c0:	ldr	r0, [sp, #4]
   1a6c4:	ldr	r1, [sp, #8]
   1a6c8:	str	r0, [r1, #4]
   1a6cc:	ldr	r0, [sp, #4]
   1a6d0:	ldr	r1, [sp, #4]
   1a6d4:	str	r0, [r1, #2944]	; 0xb80
   1a6d8:	ldr	r0, [sp, #4]
   1a6dc:	ldr	r1, [sp, #4]
   1a6e0:	str	r0, [r1, #2948]	; 0xb84
   1a6e4:	ldr	r0, [sp, #8]
   1a6e8:	ldr	r0, [r0]
   1a6ec:	add	r0, r0, #1472	; 0x5c0
   1a6f0:	ldr	r1, [sp, #8]
   1a6f4:	str	r0, [r1, #8]
   1a6f8:	ldr	r0, [sp, #8]
   1a6fc:	ldr	r0, [r0, #8]
   1a700:	ldr	r1, [sp, #8]
   1a704:	str	r0, [r1, #16]
   1a708:	ldr	r0, [sp, #8]
   1a70c:	movw	r1, #1472	; 0x5c0
   1a710:	str	r1, [r0, #12]
   1a714:	ldr	r0, [sp, #8]
   1a718:	ldr	r0, [r0, #12]
   1a71c:	movw	r1, #2944	; 0xb80
   1a720:	sub	r0, r1, r0
   1a724:	ldr	r1, [sp, #8]
   1a728:	str	r0, [r1, #20]
   1a72c:	ldr	r0, [sp, #8]
   1a730:	ldr	r0, [r0, #12]
   1a734:	movw	r1, #0
   1a738:	sub	r0, r1, r0
   1a73c:	ldr	r2, [sp, #4]
   1a740:	str	r0, [r2, #2952]	; 0xb88
   1a744:	str	r1, [fp, #-4]
   1a748:	b	1a794 <flatcc_emitter_copy_buffer@@Base+0x340>
   1a74c:	ldr	r0, [sp, #8]
   1a750:	ldr	r0, [r0]
   1a754:	add	r0, r0, #2944	; 0xb80
   1a758:	ldr	r1, [sp, #8]
   1a75c:	str	r0, [r1, #8]
   1a760:	ldr	r0, [sp, #8]
   1a764:	movw	r1, #2944	; 0xb80
   1a768:	str	r1, [r0, #12]
   1a76c:	ldr	r0, [sp, #8]
   1a770:	ldr	r0, [r0]
   1a774:	ldr	r0, [r0, #2944]	; 0xb80
   1a778:	ldr	r0, [r0, #2952]	; 0xb88
   1a77c:	sub	r0, r0, #2944	; 0xb80
   1a780:	ldr	r1, [sp, #8]
   1a784:	ldr	r1, [r1]
   1a788:	str	r0, [r1, #2952]	; 0xb88
   1a78c:	movw	r0, #0
   1a790:	str	r0, [fp, #-4]
   1a794:	ldr	r0, [fp, #-4]
   1a798:	mov	sp, fp
   1a79c:	pop	{fp, pc}
   1a7a0:	push	{fp, lr}
   1a7a4:	mov	fp, sp
   1a7a8:	sub	sp, sp, #16
   1a7ac:	str	r0, [sp, #8]
   1a7b0:	movw	r0, #0
   1a7b4:	str	r0, [sp, #4]
   1a7b8:	ldr	r1, [sp, #8]
   1a7bc:	ldr	r1, [r1, #4]
   1a7c0:	cmp	r1, r0
   1a7c4:	beq	1a7fc <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a7c8:	ldr	r0, [sp, #8]
   1a7cc:	ldr	r0, [r0, #4]
   1a7d0:	ldr	r0, [r0, #2944]	; 0xb80
   1a7d4:	ldr	r1, [sp, #8]
   1a7d8:	ldr	r1, [r1]
   1a7dc:	cmp	r0, r1
   1a7e0:	beq	1a7fc <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a7e4:	ldr	r0, [sp, #8]
   1a7e8:	ldr	r0, [r0, #4]
   1a7ec:	ldr	r0, [r0, #2944]	; 0xb80
   1a7f0:	ldr	r1, [sp, #8]
   1a7f4:	str	r0, [r1, #4]
   1a7f8:	b	1a92c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a7fc:	movw	r0, #2956	; 0xb8c
   1a800:	bl	1273c <malloc@plt>
   1a804:	str	r0, [sp, #4]
   1a808:	movw	lr, #0
   1a80c:	cmp	r0, lr
   1a810:	bne	1a820 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1a814:	mvn	r0, #0
   1a818:	str	r0, [fp, #-4]
   1a81c:	b	1a970 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a820:	ldr	r0, [sp, #8]
   1a824:	ldr	r1, [r0, #28]
   1a828:	add	r1, r1, #2944	; 0xb80
   1a82c:	str	r1, [r0, #28]
   1a830:	ldr	r0, [sp, #8]
   1a834:	ldr	r0, [r0, #4]
   1a838:	movw	r1, #0
   1a83c:	cmp	r0, r1
   1a840:	beq	1a894 <flatcc_emitter_copy_buffer@@Base+0x440>
   1a844:	ldr	r0, [sp, #8]
   1a848:	ldr	r0, [r0, #4]
   1a84c:	ldr	r1, [sp, #4]
   1a850:	str	r0, [r1, #2948]	; 0xb84
   1a854:	ldr	r0, [sp, #8]
   1a858:	ldr	r0, [r0]
   1a85c:	ldr	r1, [sp, #4]
   1a860:	str	r0, [r1, #2944]	; 0xb80
   1a864:	ldr	r0, [sp, #4]
   1a868:	ldr	r1, [sp, #8]
   1a86c:	ldr	r1, [r1]
   1a870:	str	r0, [r1, #2948]	; 0xb84
   1a874:	ldr	r0, [sp, #4]
   1a878:	ldr	r1, [sp, #8]
   1a87c:	ldr	r1, [r1, #4]
   1a880:	str	r0, [r1, #2944]	; 0xb80
   1a884:	ldr	r0, [sp, #4]
   1a888:	ldr	r1, [sp, #8]
   1a88c:	str	r0, [r1, #4]
   1a890:	b	1a92c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a894:	ldr	r0, [sp, #4]
   1a898:	ldr	r1, [sp, #8]
   1a89c:	str	r0, [r1]
   1a8a0:	ldr	r0, [sp, #4]
   1a8a4:	ldr	r1, [sp, #8]
   1a8a8:	str	r0, [r1, #4]
   1a8ac:	ldr	r0, [sp, #4]
   1a8b0:	ldr	r1, [sp, #4]
   1a8b4:	str	r0, [r1, #2944]	; 0xb80
   1a8b8:	ldr	r0, [sp, #4]
   1a8bc:	ldr	r1, [sp, #4]
   1a8c0:	str	r0, [r1, #2948]	; 0xb84
   1a8c4:	ldr	r0, [sp, #8]
   1a8c8:	ldr	r0, [r0]
   1a8cc:	add	r0, r0, #1472	; 0x5c0
   1a8d0:	ldr	r1, [sp, #8]
   1a8d4:	str	r0, [r1, #8]
   1a8d8:	ldr	r0, [sp, #8]
   1a8dc:	ldr	r0, [r0, #8]
   1a8e0:	ldr	r1, [sp, #8]
   1a8e4:	str	r0, [r1, #16]
   1a8e8:	ldr	r0, [sp, #8]
   1a8ec:	movw	r1, #1472	; 0x5c0
   1a8f0:	str	r1, [r0, #12]
   1a8f4:	ldr	r0, [sp, #8]
   1a8f8:	ldr	r0, [r0, #12]
   1a8fc:	movw	r1, #2944	; 0xb80
   1a900:	sub	r0, r1, r0
   1a904:	ldr	r1, [sp, #8]
   1a908:	str	r0, [r1, #20]
   1a90c:	ldr	r0, [sp, #8]
   1a910:	ldr	r0, [r0, #12]
   1a914:	movw	r1, #0
   1a918:	sub	r0, r1, r0
   1a91c:	ldr	r2, [sp, #4]
   1a920:	str	r0, [r2, #2952]	; 0xb88
   1a924:	str	r1, [fp, #-4]
   1a928:	b	1a970 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a92c:	ldr	r0, [sp, #8]
   1a930:	ldr	r0, [r0, #4]
   1a934:	ldr	r1, [sp, #8]
   1a938:	str	r0, [r1, #16]
   1a93c:	ldr	r0, [sp, #8]
   1a940:	movw	r1, #2944	; 0xb80
   1a944:	str	r1, [r0, #20]
   1a948:	ldr	r0, [sp, #8]
   1a94c:	ldr	r0, [r0, #4]
   1a950:	ldr	r0, [r0, #2948]	; 0xb84
   1a954:	ldr	r0, [r0, #2952]	; 0xb88
   1a958:	add	r0, r0, #2944	; 0xb80
   1a95c:	ldr	r1, [sp, #8]
   1a960:	ldr	r1, [r1, #4]
   1a964:	str	r0, [r1, #2952]	; 0xb88
   1a968:	movw	r0, #0
   1a96c:	str	r0, [fp, #-4]
   1a970:	ldr	r0, [fp, #-4]
   1a974:	mov	sp, fp
   1a978:	pop	{fp, pc}

0001a97c <flatcc_verify_error_string@@Base>:
   1a97c:	sub	sp, sp, #12
   1a980:	str	r0, [sp, #4]
   1a984:	ldr	r0, [sp, #4]
   1a988:	cmp	r0, #36	; 0x24
   1a98c:	str	r0, [sp]
   1a990:	bhi	1ac88 <flatcc_verify_error_string@@Base+0x30c>
   1a994:	add	r0, pc, #8
   1a998:	ldr	r1, [sp]
   1a99c:	ldr	r2, [r0, r1, lsl #2]
   1a9a0:	add	pc, r0, r2
   1a9a4:	muleq	r0, r4, r0
   1a9a8:	andeq	r0, r0, r4, lsr #1
   1a9ac:	strheq	r0, [r0], -r4
   1a9b0:	andeq	r0, r0, r4, asr #1
   1a9b4:	ldrdeq	r0, [r0], -r4
   1a9b8:	andeq	r0, r0, r4, ror #1
   1a9bc:	strdeq	r0, [r0], -r4
   1a9c0:	andeq	r0, r0, r4, lsl #2
   1a9c4:	andeq	r0, r0, r4, lsl r1
   1a9c8:	andeq	r0, r0, r4, lsr #2
   1a9cc:	andeq	r0, r0, r4, lsr r1
   1a9d0:	andeq	r0, r0, r4, asr #2
   1a9d4:	andeq	r0, r0, r4, asr r1
   1a9d8:	andeq	r0, r0, r4, ror #2
   1a9dc:	andeq	r0, r0, r4, ror r1
   1a9e0:	andeq	r0, r0, r4, lsl #3
   1a9e4:	muleq	r0, r4, r1
   1a9e8:	andeq	r0, r0, r4, lsr #3
   1a9ec:			; <UNDEFINED> instruction: 0x000001b4
   1a9f0:	andeq	r0, r0, r4, asr #3
   1a9f4:	ldrdeq	r0, [r0], -r4
   1a9f8:	andeq	r0, r0, r4, ror #3
   1a9fc:	strdeq	r0, [r0], -r4
   1aa00:	andeq	r0, r0, r4, lsl #4
   1aa04:	andeq	r0, r0, r4, lsl r2
   1aa08:	andeq	r0, r0, r4, lsr #4
   1aa0c:	andeq	r0, r0, r4, lsr r2
   1aa10:	andeq	r0, r0, r4, asr #4
   1aa14:	andeq	r0, r0, r4, asr r2
   1aa18:	andeq	r0, r0, r4, ror #4
   1aa1c:	andeq	r0, r0, r4, ror r2
   1aa20:	andeq	r0, r0, r4, lsl #5
   1aa24:	muleq	r0, r4, r2
   1aa28:	andeq	r0, r0, r4, lsr #5
   1aa2c:			; <UNDEFINED> instruction: 0x000002b4
   1aa30:	andeq	r0, r0, r4, asr #5
   1aa34:	ldrdeq	r0, [r0], -r4
   1aa38:	ldr	r0, [pc, #752]	; 1ad30 <flatcc_verify_error_string@@Base+0x3b4>
   1aa3c:	add	r0, pc, r0
   1aa40:	str	r0, [sp, #8]
   1aa44:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aa48:	ldr	r0, [pc, #732]	; 1ad2c <flatcc_verify_error_string@@Base+0x3b0>
   1aa4c:	add	r0, pc, r0
   1aa50:	str	r0, [sp, #8]
   1aa54:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aa58:	ldr	r0, [pc, #712]	; 1ad28 <flatcc_verify_error_string@@Base+0x3ac>
   1aa5c:	add	r0, pc, r0
   1aa60:	str	r0, [sp, #8]
   1aa64:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aa68:	ldr	r0, [pc, #692]	; 1ad24 <flatcc_verify_error_string@@Base+0x3a8>
   1aa6c:	add	r0, pc, r0
   1aa70:	str	r0, [sp, #8]
   1aa74:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aa78:	ldr	r0, [pc, #672]	; 1ad20 <flatcc_verify_error_string@@Base+0x3a4>
   1aa7c:	add	r0, pc, r0
   1aa80:	str	r0, [sp, #8]
   1aa84:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aa88:	ldr	r0, [pc, #652]	; 1ad1c <flatcc_verify_error_string@@Base+0x3a0>
   1aa8c:	add	r0, pc, r0
   1aa90:	str	r0, [sp, #8]
   1aa94:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aa98:	ldr	r0, [pc, #632]	; 1ad18 <flatcc_verify_error_string@@Base+0x39c>
   1aa9c:	add	r0, pc, r0
   1aaa0:	str	r0, [sp, #8]
   1aaa4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aaa8:	ldr	r0, [pc, #612]	; 1ad14 <flatcc_verify_error_string@@Base+0x398>
   1aaac:	add	r0, pc, r0
   1aab0:	str	r0, [sp, #8]
   1aab4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aab8:	ldr	r0, [pc, #592]	; 1ad10 <flatcc_verify_error_string@@Base+0x394>
   1aabc:	add	r0, pc, r0
   1aac0:	str	r0, [sp, #8]
   1aac4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aac8:	ldr	r0, [pc, #572]	; 1ad0c <flatcc_verify_error_string@@Base+0x390>
   1aacc:	add	r0, pc, r0
   1aad0:	str	r0, [sp, #8]
   1aad4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aad8:	ldr	r0, [pc, #552]	; 1ad08 <flatcc_verify_error_string@@Base+0x38c>
   1aadc:	add	r0, pc, r0
   1aae0:	str	r0, [sp, #8]
   1aae4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aae8:	ldr	r0, [pc, #532]	; 1ad04 <flatcc_verify_error_string@@Base+0x388>
   1aaec:	add	r0, pc, r0
   1aaf0:	str	r0, [sp, #8]
   1aaf4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aaf8:	ldr	r0, [pc, #512]	; 1ad00 <flatcc_verify_error_string@@Base+0x384>
   1aafc:	add	r0, pc, r0
   1ab00:	str	r0, [sp, #8]
   1ab04:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab08:	ldr	r0, [pc, #492]	; 1acfc <flatcc_verify_error_string@@Base+0x380>
   1ab0c:	add	r0, pc, r0
   1ab10:	str	r0, [sp, #8]
   1ab14:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab18:	ldr	r0, [pc, #472]	; 1acf8 <flatcc_verify_error_string@@Base+0x37c>
   1ab1c:	add	r0, pc, r0
   1ab20:	str	r0, [sp, #8]
   1ab24:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab28:	ldr	r0, [pc, #452]	; 1acf4 <flatcc_verify_error_string@@Base+0x378>
   1ab2c:	add	r0, pc, r0
   1ab30:	str	r0, [sp, #8]
   1ab34:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab38:	ldr	r0, [pc, #432]	; 1acf0 <flatcc_verify_error_string@@Base+0x374>
   1ab3c:	add	r0, pc, r0
   1ab40:	str	r0, [sp, #8]
   1ab44:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab48:	ldr	r0, [pc, #412]	; 1acec <flatcc_verify_error_string@@Base+0x370>
   1ab4c:	add	r0, pc, r0
   1ab50:	str	r0, [sp, #8]
   1ab54:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab58:	ldr	r0, [pc, #392]	; 1ace8 <flatcc_verify_error_string@@Base+0x36c>
   1ab5c:	add	r0, pc, r0
   1ab60:	str	r0, [sp, #8]
   1ab64:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab68:	ldr	r0, [pc, #372]	; 1ace4 <flatcc_verify_error_string@@Base+0x368>
   1ab6c:	add	r0, pc, r0
   1ab70:	str	r0, [sp, #8]
   1ab74:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab78:	ldr	r0, [pc, #352]	; 1ace0 <flatcc_verify_error_string@@Base+0x364>
   1ab7c:	add	r0, pc, r0
   1ab80:	str	r0, [sp, #8]
   1ab84:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab88:	ldr	r0, [pc, #332]	; 1acdc <flatcc_verify_error_string@@Base+0x360>
   1ab8c:	add	r0, pc, r0
   1ab90:	str	r0, [sp, #8]
   1ab94:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ab98:	ldr	r0, [pc, #312]	; 1acd8 <flatcc_verify_error_string@@Base+0x35c>
   1ab9c:	add	r0, pc, r0
   1aba0:	str	r0, [sp, #8]
   1aba4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1aba8:	ldr	r0, [pc, #292]	; 1acd4 <flatcc_verify_error_string@@Base+0x358>
   1abac:	add	r0, pc, r0
   1abb0:	str	r0, [sp, #8]
   1abb4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1abb8:	ldr	r0, [pc, #272]	; 1acd0 <flatcc_verify_error_string@@Base+0x354>
   1abbc:	add	r0, pc, r0
   1abc0:	str	r0, [sp, #8]
   1abc4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1abc8:	ldr	r0, [pc, #252]	; 1accc <flatcc_verify_error_string@@Base+0x350>
   1abcc:	add	r0, pc, r0
   1abd0:	str	r0, [sp, #8]
   1abd4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1abd8:	ldr	r0, [pc, #232]	; 1acc8 <flatcc_verify_error_string@@Base+0x34c>
   1abdc:	add	r0, pc, r0
   1abe0:	str	r0, [sp, #8]
   1abe4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1abe8:	ldr	r0, [pc, #212]	; 1acc4 <flatcc_verify_error_string@@Base+0x348>
   1abec:	add	r0, pc, r0
   1abf0:	str	r0, [sp, #8]
   1abf4:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1abf8:	ldr	r0, [pc, #192]	; 1acc0 <flatcc_verify_error_string@@Base+0x344>
   1abfc:	add	r0, pc, r0
   1ac00:	str	r0, [sp, #8]
   1ac04:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac08:	ldr	r0, [pc, #172]	; 1acbc <flatcc_verify_error_string@@Base+0x340>
   1ac0c:	add	r0, pc, r0
   1ac10:	str	r0, [sp, #8]
   1ac14:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac18:	ldr	r0, [pc, #152]	; 1acb8 <flatcc_verify_error_string@@Base+0x33c>
   1ac1c:	add	r0, pc, r0
   1ac20:	str	r0, [sp, #8]
   1ac24:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac28:	ldr	r0, [pc, #132]	; 1acb4 <flatcc_verify_error_string@@Base+0x338>
   1ac2c:	add	r0, pc, r0
   1ac30:	str	r0, [sp, #8]
   1ac34:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac38:	ldr	r0, [pc, #112]	; 1acb0 <flatcc_verify_error_string@@Base+0x334>
   1ac3c:	add	r0, pc, r0
   1ac40:	str	r0, [sp, #8]
   1ac44:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac48:	ldr	r0, [pc, #92]	; 1acac <flatcc_verify_error_string@@Base+0x330>
   1ac4c:	add	r0, pc, r0
   1ac50:	str	r0, [sp, #8]
   1ac54:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac58:	ldr	r0, [pc, #72]	; 1aca8 <flatcc_verify_error_string@@Base+0x32c>
   1ac5c:	add	r0, pc, r0
   1ac60:	str	r0, [sp, #8]
   1ac64:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac68:	ldr	r0, [pc, #52]	; 1aca4 <flatcc_verify_error_string@@Base+0x328>
   1ac6c:	add	r0, pc, r0
   1ac70:	str	r0, [sp, #8]
   1ac74:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac78:	ldr	r0, [pc, #32]	; 1aca0 <flatcc_verify_error_string@@Base+0x324>
   1ac7c:	add	r0, pc, r0
   1ac80:	str	r0, [sp, #8]
   1ac84:	b	1ac94 <flatcc_verify_error_string@@Base+0x318>
   1ac88:	ldr	r0, [pc, #164]	; 1ad34 <flatcc_verify_error_string@@Base+0x3b8>
   1ac8c:	add	r0, pc, r0
   1ac90:	str	r0, [sp, #8]
   1ac94:	ldr	r0, [sp, #8]
   1ac98:	add	sp, sp, #12
   1ac9c:	bx	lr
   1aca0:	andeq	r4, r0, r7, ror #4
   1aca4:	andeq	r4, r0, sp, asr r2
   1aca8:	andeq	r4, r0, r9, lsr r2
   1acac:	andeq	r4, r0, r4, lsr #4
   1acb0:	andeq	r4, r0, sp, lsl #4
   1acb4:	andeq	r4, r0, r8, lsl #4
   1acb8:	strdeq	r4, [r0], -r2
   1acbc:	ldrdeq	r4, [r0], -sl
   1acc0:	ldrdeq	r4, [r0], -r2
   1acc4:	andeq	r4, r0, r7, asr #3
   1acc8:	andeq	r4, r0, r3, asr #3
   1accc:	andeq	r4, r0, r4, lsr #3
   1acd0:	andeq	r4, r0, fp, lsl #3
   1acd4:	andeq	r4, r0, r2, ror r1
   1acd8:	andeq	r4, r0, pc, asr #2
   1acdc:	andeq	r4, r0, r3, lsr r1
   1ace0:	andeq	r4, r0, fp, lsr #2
   1ace4:	andeq	r4, r0, fp, ror r2
   1ace8:	andeq	r4, r0, r7, lsr r1
   1acec:	andeq	r4, r0, pc, lsl r1
   1acf0:	andeq	r4, r0, r7, lsl #2
   1acf4:	strdeq	r4, [r0], -r0
   1acf8:	andeq	r4, r0, r6, ror #1
   1acfc:	ldrdeq	r4, [r0], -sp
   1ad00:	ldrdeq	r4, [r0], -r5
   1ad04:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1ad08:	andeq	r4, r0, pc, asr #1
   1ad0c:	andeq	r4, r0, fp, asr #1
   1ad10:	andeq	r4, r0, r7, asr #1
   1ad14:	strheq	r4, [r0], -ip
   1ad18:	andeq	r4, r0, sp, lsr #1
   1ad1c:	muleq	r0, sl, r0
   1ad20:	muleq	r0, r3, r0
   1ad24:	andeq	r4, r0, r9, lsl #1
   1ad28:	andeq	r4, r0, r5, lsl #1
   1ad2c:	andeq	r4, r0, sp, ror r0
   1ad30:	andeq	r4, r0, sl, lsl #1
   1ad34:	andeq	r4, r0, r5, ror #4

0001ad38 <flatcc_verify_field@@Base>:
   1ad38:	push	{fp, lr}
   1ad3c:	mov	fp, sp
   1ad40:	sub	sp, sp, #24
   1ad44:	str	r0, [fp, #-8]
   1ad48:	strh	r1, [fp, #-10]
   1ad4c:	str	r2, [sp, #8]
   1ad50:	strh	r3, [sp, #6]
   1ad54:	ldr	r0, [fp, #-8]
   1ad58:	ldrh	r1, [fp, #-10]
   1ad5c:	ldr	r3, [sp, #8]
   1ad60:	uxth	r1, r1
   1ad64:	movw	r2, #0
   1ad68:	ldrh	ip, [sp, #6]
   1ad6c:	str	ip, [sp]
   1ad70:	bl	1adb8 <flatcc_verify_field@@Base+0x80>
   1ad74:	cmp	r0, #0
   1ad78:	beq	1ada4 <flatcc_verify_field@@Base+0x6c>
   1ad7c:	ldr	r0, [fp, #-8]
   1ad80:	ldrh	r1, [fp, #-10]
   1ad84:	ldr	r3, [sp, #8]
   1ad88:	uxth	r1, r1
   1ad8c:	movw	r2, #0
   1ad90:	ldrh	ip, [sp, #6]
   1ad94:	str	ip, [sp]
   1ad98:	bl	1adb8 <flatcc_verify_field@@Base+0x80>
   1ad9c:	str	r0, [fp, #-4]
   1ada0:	b	1adac <flatcc_verify_field@@Base+0x74>
   1ada4:	movw	r0, #0
   1ada8:	str	r0, [fp, #-4]
   1adac:	ldr	r0, [fp, #-4]
   1adb0:	mov	sp, fp
   1adb4:	pop	{fp, pc}
   1adb8:	push	{fp, lr}
   1adbc:	mov	fp, sp
   1adc0:	sub	sp, sp, #56	; 0x38
   1adc4:	ldr	ip, [fp, #8]
   1adc8:	str	r0, [fp, #-8]
   1adcc:	strh	r1, [fp, #-10]
   1add0:	str	r2, [fp, #-16]
   1add4:	str	r3, [fp, #-20]	; 0xffffffec
   1add8:	strh	ip, [fp, #-22]	; 0xffffffea
   1addc:	ldr	r0, [fp, #-8]
   1ade0:	ldr	r0, [r0]
   1ade4:	str	r0, [sp, #16]
   1ade8:	ldr	r0, [fp, #-8]
   1adec:	ldrh	r1, [fp, #-10]
   1adf0:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1adf4:	strh	r0, [sp, #22]
   1adf8:	ldrsh	r0, [sp, #22]
   1adfc:	cmp	r0, #0
   1ae00:	bne	1ae50 <flatcc_verify_field@@Base+0x118>
   1ae04:	b	1ae08 <flatcc_verify_field@@Base+0xd0>
   1ae08:	ldr	r0, [fp, #-16]
   1ae0c:	cmp	r0, #0
   1ae10:	movw	r0, #0
   1ae14:	movne	r0, #1
   1ae18:	mvn	r1, #0
   1ae1c:	eor	r0, r0, r1
   1ae20:	and	r0, r0, #1
   1ae24:	str	r0, [sp, #12]
   1ae28:	ldr	r0, [sp, #12]
   1ae2c:	cmp	r0, #0
   1ae30:	bne	1ae40 <flatcc_verify_field@@Base+0x108>
   1ae34:	movw	r0, #4
   1ae38:	str	r0, [fp, #-4]
   1ae3c:	b	1af38 <flatcc_verify_field@@Base+0x200>
   1ae40:	b	1ae44 <flatcc_verify_field@@Base+0x10c>
   1ae44:	movw	r0, #0
   1ae48:	str	r0, [fp, #-4]
   1ae4c:	b	1af38 <flatcc_verify_field@@Base+0x200>
   1ae50:	ldrh	r0, [sp, #22]
   1ae54:	str	r0, [sp, #28]
   1ae58:	ldr	r0, [sp, #28]
   1ae5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ae60:	add	r0, r0, r1
   1ae64:	str	r0, [sp, #24]
   1ae68:	ldr	r0, [sp, #24]
   1ae6c:	ldr	r1, [fp, #-8]
   1ae70:	ldrh	r1, [r1, #20]
   1ae74:	cmp	r0, r1
   1ae78:	movw	r0, #0
   1ae7c:	movls	r0, #1
   1ae80:	and	r0, r0, #1
   1ae84:	str	r0, [sp, #8]
   1ae88:	ldr	r0, [sp, #8]
   1ae8c:	cmp	r0, #0
   1ae90:	bne	1aea0 <flatcc_verify_field@@Base+0x168>
   1ae94:	movw	r0, #13
   1ae98:	str	r0, [fp, #-4]
   1ae9c:	b	1af38 <flatcc_verify_field@@Base+0x200>
   1aea0:	b	1aea4 <flatcc_verify_field@@Base+0x16c>
   1aea4:	b	1aea8 <flatcc_verify_field@@Base+0x170>
   1aea8:	movw	r0, #1
   1aeac:	str	r0, [sp, #4]
   1aeb0:	ldr	r0, [sp, #4]
   1aeb4:	cmp	r0, #0
   1aeb8:	bne	1aec8 <flatcc_verify_field@@Base+0x190>
   1aebc:	movw	r0, #14
   1aec0:	str	r0, [fp, #-4]
   1aec4:	b	1af38 <flatcc_verify_field@@Base+0x200>
   1aec8:	b	1aecc <flatcc_verify_field@@Base+0x194>
   1aecc:	ldr	r0, [fp, #-8]
   1aed0:	ldr	r0, [r0, #16]
   1aed4:	ldr	r1, [sp, #16]
   1aed8:	add	r0, r0, r1
   1aedc:	ldr	r1, [sp, #28]
   1aee0:	add	r0, r1, r0
   1aee4:	str	r0, [sp, #28]
   1aee8:	ldr	r0, [sp, #28]
   1aeec:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1aef0:	sub	r1, r1, #1
   1aef4:	and	r0, r0, r1
   1aef8:	cmp	r0, #0
   1aefc:	movw	r0, #0
   1af00:	movne	r0, #1
   1af04:	mvn	r1, #0
   1af08:	eor	r0, r0, r1
   1af0c:	and	r0, r0, #1
   1af10:	str	r0, [sp]
   1af14:	ldr	r0, [sp]
   1af18:	cmp	r0, #0
   1af1c:	bne	1af2c <flatcc_verify_field@@Base+0x1f4>
   1af20:	movw	r0, #12
   1af24:	str	r0, [fp, #-4]
   1af28:	b	1af38 <flatcc_verify_field@@Base+0x200>
   1af2c:	b	1af30 <flatcc_verify_field@@Base+0x1f8>
   1af30:	movw	r0, #0
   1af34:	str	r0, [fp, #-4]
   1af38:	ldr	r0, [fp, #-4]
   1af3c:	mov	sp, fp
   1af40:	pop	{fp, pc}

0001af44 <flatcc_verify_string_field@@Base>:
   1af44:	push	{fp, lr}
   1af48:	mov	fp, sp
   1af4c:	sub	sp, sp, #40	; 0x28
   1af50:	str	r0, [fp, #-8]
   1af54:	strh	r1, [fp, #-10]
   1af58:	str	r2, [fp, #-16]
   1af5c:	ldr	r0, [fp, #-8]
   1af60:	ldrh	r1, [fp, #-10]
   1af64:	ldr	r2, [fp, #-16]
   1af68:	uxth	r1, r1
   1af6c:	add	r3, sp, #20
   1af70:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1af74:	str	r0, [sp, #16]
   1af78:	ldr	r0, [sp, #16]
   1af7c:	cmp	r0, #0
   1af80:	bne	1af90 <flatcc_verify_string_field@@Base+0x4c>
   1af84:	ldr	r0, [sp, #20]
   1af88:	cmp	r0, #0
   1af8c:	bne	1af9c <flatcc_verify_string_field@@Base+0x58>
   1af90:	ldr	r0, [sp, #16]
   1af94:	str	r0, [fp, #-4]
   1af98:	b	1aff8 <flatcc_verify_string_field@@Base+0xb4>
   1af9c:	b	1afa0 <flatcc_verify_string_field@@Base+0x5c>
   1afa0:	ldr	r0, [fp, #-8]
   1afa4:	ldr	r0, [r0]
   1afa8:	ldr	r1, [fp, #-8]
   1afac:	ldr	r1, [r1, #4]
   1afb0:	ldr	r2, [sp, #20]
   1afb4:	ldr	r3, [fp, #-8]
   1afb8:	ldr	r3, [r3]
   1afbc:	ldr	ip, [sp, #20]
   1afc0:	str	r0, [sp, #12]
   1afc4:	mov	r0, r3
   1afc8:	str	r1, [sp, #8]
   1afcc:	mov	r1, ip
   1afd0:	str	r2, [sp, #4]
   1afd4:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1afd8:	ldr	r1, [sp, #12]
   1afdc:	str	r0, [sp]
   1afe0:	mov	r0, r1
   1afe4:	ldr	r1, [sp, #8]
   1afe8:	ldr	r2, [sp, #4]
   1afec:	ldr	r3, [sp]
   1aff0:	bl	1b158 <flatcc_verify_string_field@@Base+0x214>
   1aff4:	str	r0, [fp, #-4]
   1aff8:	ldr	r0, [fp, #-4]
   1affc:	mov	sp, fp
   1b000:	pop	{fp, pc}
   1b004:	push	{fp, lr}
   1b008:	mov	fp, sp
   1b00c:	sub	sp, sp, #48	; 0x30
   1b010:	str	r0, [fp, #-8]
   1b014:	strh	r1, [fp, #-10]
   1b018:	str	r2, [fp, #-16]
   1b01c:	str	r3, [fp, #-20]	; 0xffffffec
   1b020:	ldr	r0, [fp, #-8]
   1b024:	ldrh	r1, [fp, #-10]
   1b028:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1b02c:	strh	r0, [sp, #18]
   1b030:	ldrsh	r0, [sp, #18]
   1b034:	cmp	r0, #0
   1b038:	bne	1b06c <flatcc_verify_string_field@@Base+0x128>
   1b03c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b040:	movw	r1, #0
   1b044:	str	r1, [r0]
   1b048:	ldr	r0, [fp, #-16]
   1b04c:	cmp	r0, #0
   1b050:	beq	1b060 <flatcc_verify_string_field@@Base+0x11c>
   1b054:	movw	r0, #4
   1b058:	str	r0, [fp, #-4]
   1b05c:	b	1b14c <flatcc_verify_string_field@@Base+0x208>
   1b060:	movw	r0, #0
   1b064:	str	r0, [fp, #-4]
   1b068:	b	1b14c <flatcc_verify_string_field@@Base+0x208>
   1b06c:	ldrh	r0, [sp, #18]
   1b070:	str	r0, [sp, #24]
   1b074:	ldr	r0, [sp, #24]
   1b078:	add	r0, r0, #4
   1b07c:	str	r0, [sp, #20]
   1b080:	ldr	r0, [sp, #20]
   1b084:	ldr	r1, [fp, #-8]
   1b088:	ldrh	r1, [r1, #20]
   1b08c:	cmp	r0, r1
   1b090:	movw	r0, #0
   1b094:	movls	r0, #1
   1b098:	and	r0, r0, #1
   1b09c:	str	r0, [sp, #12]
   1b0a0:	ldr	r0, [sp, #12]
   1b0a4:	cmp	r0, #0
   1b0a8:	bne	1b0b8 <flatcc_verify_string_field@@Base+0x174>
   1b0ac:	movw	r0, #13
   1b0b0:	str	r0, [fp, #-4]
   1b0b4:	b	1b14c <flatcc_verify_string_field@@Base+0x208>
   1b0b8:	b	1b0bc <flatcc_verify_string_field@@Base+0x178>
   1b0bc:	b	1b0c0 <flatcc_verify_string_field@@Base+0x17c>
   1b0c0:	movw	r0, #1
   1b0c4:	str	r0, [sp, #8]
   1b0c8:	ldr	r0, [sp, #8]
   1b0cc:	cmp	r0, #0
   1b0d0:	bne	1b0e0 <flatcc_verify_string_field@@Base+0x19c>
   1b0d4:	movw	r0, #14
   1b0d8:	str	r0, [fp, #-4]
   1b0dc:	b	1b14c <flatcc_verify_string_field@@Base+0x208>
   1b0e0:	b	1b0e4 <flatcc_verify_string_field@@Base+0x1a0>
   1b0e4:	ldr	r0, [fp, #-8]
   1b0e8:	ldr	r0, [r0, #16]
   1b0ec:	ldr	r1, [sp, #24]
   1b0f0:	add	r0, r1, r0
   1b0f4:	str	r0, [sp, #24]
   1b0f8:	ldr	r0, [sp, #24]
   1b0fc:	and	r0, r0, #3
   1b100:	cmp	r0, #0
   1b104:	movw	r0, #0
   1b108:	movne	r0, #1
   1b10c:	mvn	r1, #0
   1b110:	eor	r0, r0, r1
   1b114:	and	r0, r0, #1
   1b118:	str	r0, [sp, #4]
   1b11c:	ldr	r0, [sp, #4]
   1b120:	cmp	r0, #0
   1b124:	bne	1b134 <flatcc_verify_string_field@@Base+0x1f0>
   1b128:	movw	r0, #12
   1b12c:	str	r0, [fp, #-4]
   1b130:	b	1b14c <flatcc_verify_string_field@@Base+0x208>
   1b134:	b	1b138 <flatcc_verify_string_field@@Base+0x1f4>
   1b138:	ldr	r0, [sp, #24]
   1b13c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b140:	str	r0, [r1]
   1b144:	movw	r0, #0
   1b148:	str	r0, [fp, #-4]
   1b14c:	ldr	r0, [fp, #-4]
   1b150:	mov	sp, fp
   1b154:	pop	{fp, pc}
   1b158:	push	{fp, lr}
   1b15c:	mov	fp, sp
   1b160:	sub	sp, sp, #40	; 0x28
   1b164:	str	r0, [fp, #-8]
   1b168:	str	r1, [fp, #-12]
   1b16c:	str	r2, [fp, #-16]
   1b170:	str	r3, [sp, #20]
   1b174:	ldr	r0, [fp, #-12]
   1b178:	ldr	r1, [fp, #-16]
   1b17c:	ldr	r2, [sp, #20]
   1b180:	bl	1d230 <flatcc_verify_union_vector_field@@Base+0x57c>
   1b184:	str	r0, [sp, #12]
   1b188:	ldr	r0, [sp, #12]
   1b18c:	cmp	r0, #0
   1b190:	bne	1b1a0 <flatcc_verify_string_field@@Base+0x25c>
   1b194:	movw	r0, #17
   1b198:	str	r0, [fp, #-4]
   1b19c:	b	1b268 <flatcc_verify_string_field@@Base+0x324>
   1b1a0:	b	1b1a4 <flatcc_verify_string_field@@Base+0x260>
   1b1a4:	ldr	r0, [sp, #20]
   1b1a8:	ldr	r1, [fp, #-16]
   1b1ac:	add	r0, r1, r0
   1b1b0:	str	r0, [fp, #-16]
   1b1b4:	ldr	r0, [fp, #-8]
   1b1b8:	ldr	r1, [fp, #-16]
   1b1bc:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b1c0:	str	r0, [sp, #16]
   1b1c4:	ldr	r0, [fp, #-16]
   1b1c8:	add	r0, r0, #4
   1b1cc:	str	r0, [fp, #-16]
   1b1d0:	ldr	r0, [fp, #-12]
   1b1d4:	ldr	r1, [fp, #-16]
   1b1d8:	sub	r0, r0, r1
   1b1dc:	ldr	r1, [sp, #16]
   1b1e0:	add	r1, r1, #1
   1b1e4:	cmp	r0, r1
   1b1e8:	movw	r0, #0
   1b1ec:	movcs	r0, #1
   1b1f0:	and	r0, r0, #1
   1b1f4:	str	r0, [sp, #8]
   1b1f8:	ldr	r0, [sp, #8]
   1b1fc:	cmp	r0, #0
   1b200:	bne	1b210 <flatcc_verify_string_field@@Base+0x2cc>
   1b204:	movw	r0, #8
   1b208:	str	r0, [fp, #-4]
   1b20c:	b	1b268 <flatcc_verify_string_field@@Base+0x324>
   1b210:	b	1b214 <flatcc_verify_string_field@@Base+0x2d0>
   1b214:	b	1b218 <flatcc_verify_string_field@@Base+0x2d4>
   1b218:	ldr	r0, [fp, #-8]
   1b21c:	ldr	r1, [fp, #-16]
   1b220:	add	r0, r0, r1
   1b224:	ldr	r1, [sp, #16]
   1b228:	add	r0, r0, r1
   1b22c:	ldrb	r0, [r0]
   1b230:	cmp	r0, #0
   1b234:	movw	r0, #0
   1b238:	moveq	r0, #1
   1b23c:	and	r0, r0, #1
   1b240:	str	r0, [sp, #4]
   1b244:	ldr	r0, [sp, #4]
   1b248:	cmp	r0, #0
   1b24c:	bne	1b25c <flatcc_verify_string_field@@Base+0x318>
   1b250:	movw	r0, #7
   1b254:	str	r0, [fp, #-4]
   1b258:	b	1b268 <flatcc_verify_string_field@@Base+0x324>
   1b25c:	b	1b260 <flatcc_verify_string_field@@Base+0x31c>
   1b260:	movw	r0, #0
   1b264:	str	r0, [fp, #-4]
   1b268:	ldr	r0, [fp, #-4]
   1b26c:	mov	sp, fp
   1b270:	pop	{fp, pc}
   1b274:	push	{fp, lr}
   1b278:	mov	fp, sp
   1b27c:	sub	sp, sp, #8
   1b280:	str	r0, [sp, #4]
   1b284:	str	r1, [sp]
   1b288:	ldr	r0, [sp, #4]
   1b28c:	ldr	r1, [sp]
   1b290:	add	r0, r0, r1
   1b294:	bl	1d2b4 <flatcc_verify_union_vector_field@@Base+0x600>
   1b298:	mov	sp, fp
   1b29c:	pop	{fp, pc}

0001b2a0 <flatcc_verify_vector_field@@Base>:
   1b2a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b2a4:	add	fp, sp, #24
   1b2a8:	sub	sp, sp, #80	; 0x50
   1b2ac:	ldr	ip, [fp, #12]
   1b2b0:	ldr	lr, [fp, #8]
   1b2b4:	str	r0, [fp, #-32]	; 0xffffffe0
   1b2b8:	strh	r1, [fp, #-34]	; 0xffffffde
   1b2bc:	str	r2, [fp, #-40]	; 0xffffffd8
   1b2c0:	str	r3, [fp, #-44]	; 0xffffffd4
   1b2c4:	strh	lr, [fp, #-46]	; 0xffffffd2
   1b2c8:	str	ip, [sp, #44]	; 0x2c
   1b2cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b2d0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1b2d4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b2d8:	uxth	r1, r1
   1b2dc:	add	r3, sp, #52	; 0x34
   1b2e0:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1b2e4:	str	r0, [sp, #48]	; 0x30
   1b2e8:	ldr	r0, [sp, #48]	; 0x30
   1b2ec:	cmp	r0, #0
   1b2f0:	bne	1b300 <flatcc_verify_vector_field@@Base+0x60>
   1b2f4:	ldr	r0, [sp, #52]	; 0x34
   1b2f8:	cmp	r0, #0
   1b2fc:	bne	1b30c <flatcc_verify_vector_field@@Base+0x6c>
   1b300:	ldr	r0, [sp, #48]	; 0x30
   1b304:	str	r0, [fp, #-28]	; 0xffffffe4
   1b308:	b	1b3a8 <flatcc_verify_vector_field@@Base+0x108>
   1b30c:	b	1b310 <flatcc_verify_vector_field@@Base+0x70>
   1b310:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b314:	ldr	r0, [r0]
   1b318:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b31c:	ldr	r1, [r1, #4]
   1b320:	ldr	r2, [sp, #52]	; 0x34
   1b324:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b328:	ldr	r3, [r3]
   1b32c:	ldr	ip, [sp, #52]	; 0x34
   1b330:	str	r0, [sp, #40]	; 0x28
   1b334:	mov	r0, r3
   1b338:	str	r1, [sp, #36]	; 0x24
   1b33c:	mov	r1, ip
   1b340:	str	r2, [sp, #32]
   1b344:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b348:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1b34c:	ldrh	r2, [fp, #-46]	; 0xffffffd2
   1b350:	ldr	r3, [fp, #12]
   1b354:	ldr	ip, [sp, #40]	; 0x28
   1b358:	str	r0, [sp, #28]
   1b35c:	mov	r0, ip
   1b360:	ldr	lr, [sp, #36]	; 0x24
   1b364:	str	r1, [sp, #24]
   1b368:	mov	r1, lr
   1b36c:	ldr	r4, [sp, #32]
   1b370:	str	r2, [sp, #20]
   1b374:	mov	r2, r4
   1b378:	ldr	r5, [sp, #28]
   1b37c:	str	r3, [sp, #16]
   1b380:	mov	r3, r5
   1b384:	ldr	r6, [sp, #24]
   1b388:	str	r6, [sp]
   1b38c:	ldr	r7, [sp, #20]
   1b390:	uxth	r8, r7
   1b394:	str	r8, [sp, #4]
   1b398:	ldr	r8, [sp, #16]
   1b39c:	str	r8, [sp, #8]
   1b3a0:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1b3a4:	str	r0, [fp, #-28]	; 0xffffffe4
   1b3a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b3ac:	sub	sp, fp, #24
   1b3b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b3b4:	push	{r4, sl, fp, lr}
   1b3b8:	add	fp, sp, #8
   1b3bc:	sub	sp, sp, #48	; 0x30
   1b3c0:	ldr	ip, [fp, #16]
   1b3c4:	ldr	lr, [fp, #12]
   1b3c8:	ldr	r4, [fp, #8]
   1b3cc:	str	r0, [fp, #-16]
   1b3d0:	str	r1, [fp, #-20]	; 0xffffffec
   1b3d4:	str	r2, [fp, #-24]	; 0xffffffe8
   1b3d8:	str	r3, [sp, #28]
   1b3dc:	strh	lr, [sp, #26]
   1b3e0:	str	r4, [sp, #4]
   1b3e4:	str	ip, [sp]
   1b3e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b3ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b3f0:	ldr	r2, [sp, #28]
   1b3f4:	ldrh	r3, [sp, #26]
   1b3f8:	bl	1d2ec <flatcc_verify_union_vector_field@@Base+0x638>
   1b3fc:	str	r0, [sp, #16]
   1b400:	ldr	r0, [sp, #16]
   1b404:	cmp	r0, #0
   1b408:	bne	1b418 <flatcc_verify_vector_field@@Base+0x178>
   1b40c:	movw	r0, #16
   1b410:	str	r0, [fp, #-12]
   1b414:	b	1b4d4 <flatcc_verify_vector_field@@Base+0x234>
   1b418:	b	1b41c <flatcc_verify_vector_field@@Base+0x17c>
   1b41c:	ldr	r0, [sp, #28]
   1b420:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b424:	add	r0, r1, r0
   1b428:	str	r0, [fp, #-24]	; 0xffffffe8
   1b42c:	ldr	r0, [fp, #-16]
   1b430:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b434:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b438:	str	r0, [sp, #20]
   1b43c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b440:	add	r0, r0, #4
   1b444:	str	r0, [fp, #-24]	; 0xffffffe8
   1b448:	ldr	r0, [sp, #20]
   1b44c:	ldr	r1, [fp, #16]
   1b450:	cmp	r0, r1
   1b454:	movw	r0, #0
   1b458:	movls	r0, #1
   1b45c:	and	r0, r0, #1
   1b460:	str	r0, [sp, #12]
   1b464:	ldr	r0, [sp, #12]
   1b468:	cmp	r0, #0
   1b46c:	bne	1b47c <flatcc_verify_vector_field@@Base+0x1dc>
   1b470:	movw	r0, #25
   1b474:	str	r0, [fp, #-12]
   1b478:	b	1b4d4 <flatcc_verify_vector_field@@Base+0x234>
   1b47c:	b	1b480 <flatcc_verify_vector_field@@Base+0x1e0>
   1b480:	b	1b484 <flatcc_verify_vector_field@@Base+0x1e4>
   1b484:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b488:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b48c:	sub	r0, r0, r1
   1b490:	ldr	r1, [sp, #20]
   1b494:	ldr	r2, [fp, #8]
   1b498:	mul	r1, r1, r2
   1b49c:	cmp	r0, r1
   1b4a0:	movw	r0, #0
   1b4a4:	movcs	r0, #1
   1b4a8:	and	r0, r0, #1
   1b4ac:	str	r0, [sp, #8]
   1b4b0:	ldr	r0, [sp, #8]
   1b4b4:	cmp	r0, #0
   1b4b8:	bne	1b4c8 <flatcc_verify_vector_field@@Base+0x228>
   1b4bc:	movw	r0, #26
   1b4c0:	str	r0, [fp, #-12]
   1b4c4:	b	1b4d4 <flatcc_verify_vector_field@@Base+0x234>
   1b4c8:	b	1b4cc <flatcc_verify_vector_field@@Base+0x22c>
   1b4cc:	movw	r0, #0
   1b4d0:	str	r0, [fp, #-12]
   1b4d4:	ldr	r0, [fp, #-12]
   1b4d8:	sub	sp, fp, #8
   1b4dc:	pop	{r4, sl, fp, pc}

0001b4e0 <flatcc_verify_string_vector_field@@Base>:
   1b4e0:	push	{fp, lr}
   1b4e4:	mov	fp, sp
   1b4e8:	sub	sp, sp, #40	; 0x28
   1b4ec:	str	r0, [fp, #-8]
   1b4f0:	strh	r1, [fp, #-10]
   1b4f4:	str	r2, [fp, #-16]
   1b4f8:	ldr	r0, [fp, #-8]
   1b4fc:	ldrh	r1, [fp, #-10]
   1b500:	ldr	r2, [fp, #-16]
   1b504:	uxth	r1, r1
   1b508:	add	r3, sp, #20
   1b50c:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1b510:	str	r0, [sp, #16]
   1b514:	ldr	r0, [sp, #16]
   1b518:	cmp	r0, #0
   1b51c:	bne	1b52c <flatcc_verify_string_vector_field@@Base+0x4c>
   1b520:	ldr	r0, [sp, #20]
   1b524:	cmp	r0, #0
   1b528:	bne	1b538 <flatcc_verify_string_vector_field@@Base+0x58>
   1b52c:	ldr	r0, [sp, #16]
   1b530:	str	r0, [fp, #-4]
   1b534:	b	1b594 <flatcc_verify_string_vector_field@@Base+0xb4>
   1b538:	b	1b53c <flatcc_verify_string_vector_field@@Base+0x5c>
   1b53c:	ldr	r0, [fp, #-8]
   1b540:	ldr	r0, [r0]
   1b544:	ldr	r1, [fp, #-8]
   1b548:	ldr	r1, [r1, #4]
   1b54c:	ldr	r2, [sp, #20]
   1b550:	ldr	r3, [fp, #-8]
   1b554:	ldr	r3, [r3]
   1b558:	ldr	ip, [sp, #20]
   1b55c:	str	r0, [sp, #12]
   1b560:	mov	r0, r3
   1b564:	str	r1, [sp, #8]
   1b568:	mov	r1, ip
   1b56c:	str	r2, [sp, #4]
   1b570:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b574:	ldr	r1, [sp, #12]
   1b578:	str	r0, [sp]
   1b57c:	mov	r0, r1
   1b580:	ldr	r1, [sp, #8]
   1b584:	ldr	r2, [sp, #4]
   1b588:	ldr	r3, [sp]
   1b58c:	bl	1b5a0 <flatcc_verify_string_vector_field@@Base+0xc0>
   1b590:	str	r0, [fp, #-4]
   1b594:	ldr	r0, [fp, #-4]
   1b598:	mov	sp, fp
   1b59c:	pop	{fp, pc}
   1b5a0:	push	{fp, lr}
   1b5a4:	mov	fp, sp
   1b5a8:	sub	sp, sp, #80	; 0x50
   1b5ac:	ldr	ip, [pc, #424]	; 1b75c <flatcc_verify_string_vector_field@@Base+0x27c>
   1b5b0:	str	r0, [fp, #-8]
   1b5b4:	str	r1, [fp, #-12]
   1b5b8:	str	r2, [fp, #-16]
   1b5bc:	str	r3, [fp, #-20]	; 0xffffffec
   1b5c0:	ldr	r0, [fp, #-8]
   1b5c4:	ldr	r1, [fp, #-12]
   1b5c8:	ldr	r2, [fp, #-16]
   1b5cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b5d0:	movw	lr, #4
   1b5d4:	str	lr, [sp]
   1b5d8:	movw	lr, #4
   1b5dc:	uxth	lr, lr
   1b5e0:	str	lr, [sp, #4]
   1b5e4:	str	ip, [sp, #8]
   1b5e8:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1b5ec:	cmp	r0, #0
   1b5f0:	beq	1b644 <flatcc_verify_string_vector_field@@Base+0x164>
   1b5f4:	ldr	r0, [pc, #352]	; 1b75c <flatcc_verify_string_vector_field@@Base+0x27c>
   1b5f8:	ldr	r1, [fp, #-8]
   1b5fc:	ldr	r2, [fp, #-12]
   1b600:	ldr	r3, [fp, #-16]
   1b604:	ldr	ip, [fp, #-20]	; 0xffffffec
   1b608:	str	r0, [fp, #-32]	; 0xffffffe0
   1b60c:	mov	r0, r1
   1b610:	mov	r1, r2
   1b614:	mov	r2, r3
   1b618:	mov	r3, ip
   1b61c:	movw	ip, #4
   1b620:	str	ip, [sp]
   1b624:	movw	ip, #4
   1b628:	uxth	ip, ip
   1b62c:	str	ip, [sp, #4]
   1b630:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1b634:	str	ip, [sp, #8]
   1b638:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1b63c:	str	r0, [fp, #-4]
   1b640:	b	1b750 <flatcc_verify_string_vector_field@@Base+0x270>
   1b644:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b648:	ldr	r1, [fp, #-16]
   1b64c:	add	r0, r1, r0
   1b650:	str	r0, [fp, #-16]
   1b654:	ldr	r0, [fp, #-8]
   1b658:	ldr	r1, [fp, #-16]
   1b65c:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b660:	str	r0, [fp, #-28]	; 0xffffffe4
   1b664:	ldr	r0, [fp, #-16]
   1b668:	add	r0, r0, #4
   1b66c:	str	r0, [fp, #-16]
   1b670:	movw	r0, #0
   1b674:	str	r0, [fp, #-24]	; 0xffffffe8
   1b678:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b67c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b680:	cmp	r0, r1
   1b684:	bcs	1b748 <flatcc_verify_string_vector_field@@Base+0x268>
   1b688:	ldr	r0, [fp, #-8]
   1b68c:	ldr	r1, [fp, #-12]
   1b690:	ldr	r2, [fp, #-16]
   1b694:	ldr	r3, [fp, #-8]
   1b698:	ldr	ip, [fp, #-16]
   1b69c:	str	r0, [fp, #-36]	; 0xffffffdc
   1b6a0:	mov	r0, r3
   1b6a4:	str	r1, [sp, #40]	; 0x28
   1b6a8:	mov	r1, ip
   1b6ac:	str	r2, [sp, #36]	; 0x24
   1b6b0:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b6b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b6b8:	str	r0, [sp, #32]
   1b6bc:	mov	r0, r1
   1b6c0:	ldr	r1, [sp, #40]	; 0x28
   1b6c4:	ldr	r2, [sp, #36]	; 0x24
   1b6c8:	ldr	r3, [sp, #32]
   1b6cc:	bl	1b158 <flatcc_verify_string_field@@Base+0x214>
   1b6d0:	cmp	r0, #0
   1b6d4:	beq	1b728 <flatcc_verify_string_vector_field@@Base+0x248>
   1b6d8:	ldr	r0, [fp, #-8]
   1b6dc:	ldr	r1, [fp, #-12]
   1b6e0:	ldr	r2, [fp, #-16]
   1b6e4:	ldr	r3, [fp, #-8]
   1b6e8:	ldr	ip, [fp, #-16]
   1b6ec:	str	r0, [sp, #28]
   1b6f0:	mov	r0, r3
   1b6f4:	str	r1, [sp, #24]
   1b6f8:	mov	r1, ip
   1b6fc:	str	r2, [sp, #20]
   1b700:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b704:	ldr	r1, [sp, #28]
   1b708:	str	r0, [sp, #16]
   1b70c:	mov	r0, r1
   1b710:	ldr	r1, [sp, #24]
   1b714:	ldr	r2, [sp, #20]
   1b718:	ldr	r3, [sp, #16]
   1b71c:	bl	1b158 <flatcc_verify_string_field@@Base+0x214>
   1b720:	str	r0, [fp, #-4]
   1b724:	b	1b750 <flatcc_verify_string_vector_field@@Base+0x270>
   1b728:	b	1b72c <flatcc_verify_string_vector_field@@Base+0x24c>
   1b72c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b730:	add	r0, r0, #1
   1b734:	str	r0, [fp, #-24]	; 0xffffffe8
   1b738:	ldr	r0, [fp, #-16]
   1b73c:	add	r0, r0, #4
   1b740:	str	r0, [fp, #-16]
   1b744:	b	1b678 <flatcc_verify_string_vector_field@@Base+0x198>
   1b748:	movw	r0, #0
   1b74c:	str	r0, [fp, #-4]
   1b750:	ldr	r0, [fp, #-4]
   1b754:	mov	sp, fp
   1b758:	pop	{fp, pc}
   1b75c:	svccc	0x00ffffff

0001b760 <flatcc_verify_table_field@@Base>:
   1b760:	push	{r4, r5, fp, lr}
   1b764:	add	fp, sp, #8
   1b768:	sub	sp, sp, #64	; 0x40
   1b76c:	str	r0, [fp, #-16]
   1b770:	strh	r1, [fp, #-18]	; 0xffffffee
   1b774:	str	r2, [fp, #-24]	; 0xffffffe8
   1b778:	str	r3, [fp, #-28]	; 0xffffffe4
   1b77c:	ldr	r0, [fp, #-16]
   1b780:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1b784:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b788:	uxth	r1, r1
   1b78c:	sub	r3, fp, #32
   1b790:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1b794:	str	r0, [sp, #36]	; 0x24
   1b798:	ldr	r0, [sp, #36]	; 0x24
   1b79c:	cmp	r0, #0
   1b7a0:	bne	1b7b0 <flatcc_verify_table_field@@Base+0x50>
   1b7a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b7a8:	cmp	r0, #0
   1b7ac:	bne	1b7bc <flatcc_verify_table_field@@Base+0x5c>
   1b7b0:	ldr	r0, [sp, #36]	; 0x24
   1b7b4:	str	r0, [fp, #-12]
   1b7b8:	b	1b844 <flatcc_verify_table_field@@Base+0xe4>
   1b7bc:	b	1b7c0 <flatcc_verify_table_field@@Base+0x60>
   1b7c0:	ldr	r0, [fp, #-16]
   1b7c4:	ldr	r0, [r0]
   1b7c8:	ldr	r1, [fp, #-16]
   1b7cc:	ldr	r1, [r1, #4]
   1b7d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b7d4:	ldr	r3, [fp, #-16]
   1b7d8:	ldr	r3, [r3]
   1b7dc:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1b7e0:	str	r0, [sp, #32]
   1b7e4:	mov	r0, r3
   1b7e8:	str	r1, [sp, #28]
   1b7ec:	mov	r1, ip
   1b7f0:	str	r2, [sp, #24]
   1b7f4:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b7f8:	ldr	r1, [fp, #-16]
   1b7fc:	ldr	r1, [r1, #8]
   1b800:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b804:	ldr	r3, [sp, #32]
   1b808:	str	r0, [sp, #20]
   1b80c:	mov	r0, r3
   1b810:	ldr	ip, [sp, #28]
   1b814:	str	r1, [sp, #16]
   1b818:	mov	r1, ip
   1b81c:	ldr	lr, [sp, #24]
   1b820:	str	r2, [sp, #12]
   1b824:	mov	r2, lr
   1b828:	ldr	r3, [sp, #20]
   1b82c:	ldr	r4, [sp, #16]
   1b830:	str	r4, [sp]
   1b834:	ldr	r5, [sp, #12]
   1b838:	str	r5, [sp, #4]
   1b83c:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1b840:	str	r0, [fp, #-12]
   1b844:	ldr	r0, [fp, #-12]
   1b848:	sub	sp, fp, #8
   1b84c:	pop	{r4, r5, fp, pc}
   1b850:	push	{fp, lr}
   1b854:	mov	fp, sp
   1b858:	sub	sp, sp, #112	; 0x70
   1b85c:	ldr	ip, [fp, #12]
   1b860:	ldr	lr, [fp, #8]
   1b864:	str	r0, [fp, #-8]
   1b868:	str	r1, [fp, #-12]
   1b86c:	str	r2, [fp, #-16]
   1b870:	str	r3, [fp, #-20]	; 0xffffffec
   1b874:	str	lr, [sp, #24]
   1b878:	str	ip, [sp, #20]
   1b87c:	ldr	r0, [fp, #8]
   1b880:	sub	r0, r0, #1
   1b884:	str	r0, [fp, #-44]	; 0xffffffd4
   1b888:	str	r0, [sp, #56]	; 0x38
   1b88c:	ldr	r0, [sp, #56]	; 0x38
   1b890:	cmp	r0, #0
   1b894:	bne	1b8a4 <flatcc_verify_table_field@@Base+0x144>
   1b898:	movw	r0, #3
   1b89c:	str	r0, [fp, #-4]
   1b8a0:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1b8a4:	b	1b8a8 <flatcc_verify_table_field@@Base+0x148>
   1b8a8:	b	1b8ac <flatcc_verify_table_field@@Base+0x14c>
   1b8ac:	ldr	r0, [fp, #-12]
   1b8b0:	ldr	r1, [fp, #-16]
   1b8b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b8b8:	bl	1d230 <flatcc_verify_union_vector_field@@Base+0x57c>
   1b8bc:	str	r0, [sp, #52]	; 0x34
   1b8c0:	ldr	r0, [sp, #52]	; 0x34
   1b8c4:	cmp	r0, #0
   1b8c8:	bne	1b8d8 <flatcc_verify_table_field@@Base+0x178>
   1b8cc:	movw	r0, #15
   1b8d0:	str	r0, [fp, #-4]
   1b8d4:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1b8d8:	b	1b8dc <flatcc_verify_table_field@@Base+0x17c>
   1b8dc:	ldr	r0, [fp, #-16]
   1b8e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b8e4:	add	r0, r0, r1
   1b8e8:	str	r0, [fp, #-36]	; 0xffffffdc
   1b8ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b8f0:	ldr	r1, [fp, #-8]
   1b8f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b8f8:	str	r0, [sp, #16]
   1b8fc:	mov	r0, r1
   1b900:	mov	r1, r2
   1b904:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1b908:	ldr	r1, [sp, #16]
   1b90c:	sub	r0, r1, r0
   1b910:	str	r0, [fp, #-24]	; 0xffffffe8
   1b914:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b918:	cmp	r0, #0
   1b91c:	movw	r0, #0
   1b920:	str	r0, [sp, #12]
   1b924:	blt	1b948 <flatcc_verify_table_field@@Base+0x1e8>
   1b928:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b92c:	and	r0, r0, #1
   1b930:	cmp	r0, #0
   1b934:	movw	r0, #0
   1b938:	movne	r0, #1
   1b93c:	mvn	r1, #0
   1b940:	eor	r0, r0, r1
   1b944:	str	r0, [sp, #12]
   1b948:	ldr	r0, [sp, #12]
   1b94c:	and	r0, r0, #1
   1b950:	str	r0, [sp, #48]	; 0x30
   1b954:	ldr	r0, [sp, #48]	; 0x30
   1b958:	cmp	r0, #0
   1b95c:	bne	1b96c <flatcc_verify_table_field@@Base+0x20c>
   1b960:	movw	r0, #29
   1b964:	str	r0, [fp, #-4]
   1b968:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1b96c:	b	1b970 <flatcc_verify_table_field@@Base+0x210>
   1b970:	b	1b974 <flatcc_verify_table_field@@Base+0x214>
   1b974:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b978:	add	r0, r0, #2
   1b97c:	ldr	r1, [fp, #-12]
   1b980:	cmp	r0, r1
   1b984:	movw	r0, #0
   1b988:	movls	r0, #1
   1b98c:	and	r0, r0, #1
   1b990:	str	r0, [sp, #44]	; 0x2c
   1b994:	ldr	r0, [sp, #44]	; 0x2c
   1b998:	cmp	r0, #0
   1b99c:	bne	1b9ac <flatcc_verify_table_field@@Base+0x24c>
   1b9a0:	movw	r0, #27
   1b9a4:	str	r0, [fp, #-4]
   1b9a8:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1b9ac:	b	1b9b0 <flatcc_verify_table_field@@Base+0x250>
   1b9b0:	ldr	r0, [fp, #-8]
   1b9b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b9b8:	bl	1d3ac <flatcc_verify_union_vector_field@@Base+0x6f8>
   1b9bc:	strh	r0, [fp, #-30]	; 0xffffffe2
   1b9c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b9c4:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1b9c8:	add	r0, r0, r1
   1b9cc:	str	r0, [fp, #-28]	; 0xffffffe4
   1b9d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b9d4:	ldr	r1, [fp, #-12]
   1b9d8:	cmp	r0, r1
   1b9dc:	movw	r0, #0
   1b9e0:	str	r0, [sp, #8]
   1b9e4:	bhi	1ba08 <flatcc_verify_table_field@@Base+0x2a8>
   1b9e8:	ldrh	r0, [fp, #-30]	; 0xffffffe2
   1b9ec:	and	r0, r0, #1
   1b9f0:	cmp	r0, #0
   1b9f4:	movw	r0, #0
   1b9f8:	movne	r0, #1
   1b9fc:	mvn	r1, #0
   1ba00:	eor	r0, r0, r1
   1ba04:	str	r0, [sp, #8]
   1ba08:	ldr	r0, [sp, #8]
   1ba0c:	and	r0, r0, #1
   1ba10:	str	r0, [sp, #40]	; 0x28
   1ba14:	ldr	r0, [sp, #40]	; 0x28
   1ba18:	cmp	r0, #0
   1ba1c:	bne	1ba2c <flatcc_verify_table_field@@Base+0x2cc>
   1ba20:	movw	r0, #30
   1ba24:	str	r0, [fp, #-4]
   1ba28:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1ba2c:	b	1ba30 <flatcc_verify_table_field@@Base+0x2d0>
   1ba30:	b	1ba34 <flatcc_verify_table_field@@Base+0x2d4>
   1ba34:	movw	r0, #1
   1ba38:	str	r0, [sp, #36]	; 0x24
   1ba3c:	ldr	r0, [sp, #36]	; 0x24
   1ba40:	cmp	r0, #0
   1ba44:	bne	1ba54 <flatcc_verify_table_field@@Base+0x2f4>
   1ba48:	movw	r0, #31
   1ba4c:	str	r0, [fp, #-4]
   1ba50:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1ba54:	b	1ba58 <flatcc_verify_table_field@@Base+0x2f8>
   1ba58:	b	1ba5c <flatcc_verify_table_field@@Base+0x2fc>
   1ba5c:	ldrh	r0, [fp, #-30]	; 0xffffffe2
   1ba60:	cmp	r0, #4
   1ba64:	movw	r0, #0
   1ba68:	movcs	r0, #1
   1ba6c:	and	r0, r0, #1
   1ba70:	str	r0, [sp, #32]
   1ba74:	ldr	r0, [sp, #32]
   1ba78:	cmp	r0, #0
   1ba7c:	bne	1ba8c <flatcc_verify_table_field@@Base+0x32c>
   1ba80:	movw	r0, #28
   1ba84:	str	r0, [fp, #-4]
   1ba88:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1ba8c:	b	1ba90 <flatcc_verify_table_field@@Base+0x330>
   1ba90:	ldr	r0, [fp, #-8]
   1ba94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ba98:	add	r1, r1, #2
   1ba9c:	bl	1d3ac <flatcc_verify_union_vector_field@@Base+0x6f8>
   1baa0:	strh	r0, [fp, #-32]	; 0xffffffe0
   1baa4:	ldr	r0, [fp, #-12]
   1baa8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1baac:	sub	r0, r0, r1
   1bab0:	ldrh	r1, [fp, #-32]	; 0xffffffe0
   1bab4:	cmp	r0, r1
   1bab8:	movw	r0, #0
   1babc:	movcs	r0, #1
   1bac0:	and	r0, r0, #1
   1bac4:	str	r0, [sp, #28]
   1bac8:	ldr	r0, [sp, #28]
   1bacc:	cmp	r0, #0
   1bad0:	bne	1bae0 <flatcc_verify_table_field@@Base+0x380>
   1bad4:	movw	r0, #20
   1bad8:	str	r0, [fp, #-4]
   1badc:	b	1bb20 <flatcc_verify_table_field@@Base+0x3c0>
   1bae0:	b	1bae4 <flatcc_verify_table_field@@Base+0x384>
   1bae4:	ldr	r0, [fp, #-8]
   1bae8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1baec:	add	r0, r0, r1
   1baf0:	str	r0, [fp, #-40]	; 0xffffffd8
   1baf4:	ldr	r0, [fp, #-8]
   1baf8:	str	r0, [fp, #-52]	; 0xffffffcc
   1bafc:	ldr	r0, [fp, #-12]
   1bb00:	str	r0, [fp, #-48]	; 0xffffffd0
   1bb04:	ldr	r0, [fp, #12]
   1bb08:	sub	r1, fp, #52	; 0x34
   1bb0c:	str	r0, [sp, #4]
   1bb10:	mov	r0, r1
   1bb14:	ldr	r1, [sp, #4]
   1bb18:	blx	r1
   1bb1c:	str	r0, [fp, #-4]
   1bb20:	ldr	r0, [fp, #-4]
   1bb24:	mov	sp, fp
   1bb28:	pop	{fp, pc}

0001bb2c <flatcc_verify_table_vector_field@@Base>:
   1bb2c:	push	{r4, r5, fp, lr}
   1bb30:	add	fp, sp, #8
   1bb34:	sub	sp, sp, #64	; 0x40
   1bb38:	str	r0, [fp, #-16]
   1bb3c:	strh	r1, [fp, #-18]	; 0xffffffee
   1bb40:	str	r2, [fp, #-24]	; 0xffffffe8
   1bb44:	str	r3, [fp, #-28]	; 0xffffffe4
   1bb48:	ldr	r0, [fp, #-16]
   1bb4c:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1bb50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bb54:	uxth	r1, r1
   1bb58:	sub	r3, fp, #32
   1bb5c:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1bb60:	str	r0, [sp, #36]	; 0x24
   1bb64:	ldr	r0, [sp, #36]	; 0x24
   1bb68:	cmp	r0, #0
   1bb6c:	bne	1bb7c <flatcc_verify_table_vector_field@@Base+0x50>
   1bb70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bb74:	cmp	r0, #0
   1bb78:	bne	1bb88 <flatcc_verify_table_vector_field@@Base+0x5c>
   1bb7c:	ldr	r0, [sp, #36]	; 0x24
   1bb80:	str	r0, [fp, #-12]
   1bb84:	b	1bc10 <flatcc_verify_table_vector_field@@Base+0xe4>
   1bb88:	b	1bb8c <flatcc_verify_table_vector_field@@Base+0x60>
   1bb8c:	ldr	r0, [fp, #-16]
   1bb90:	ldr	r0, [r0]
   1bb94:	ldr	r1, [fp, #-16]
   1bb98:	ldr	r1, [r1, #4]
   1bb9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bba0:	ldr	r3, [fp, #-16]
   1bba4:	ldr	r3, [r3]
   1bba8:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1bbac:	str	r0, [sp, #32]
   1bbb0:	mov	r0, r3
   1bbb4:	str	r1, [sp, #28]
   1bbb8:	mov	r1, ip
   1bbbc:	str	r2, [sp, #24]
   1bbc0:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1bbc4:	ldr	r1, [fp, #-16]
   1bbc8:	ldr	r1, [r1, #8]
   1bbcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bbd0:	ldr	r3, [sp, #32]
   1bbd4:	str	r0, [sp, #20]
   1bbd8:	mov	r0, r3
   1bbdc:	ldr	ip, [sp, #28]
   1bbe0:	str	r1, [sp, #16]
   1bbe4:	mov	r1, ip
   1bbe8:	ldr	lr, [sp, #24]
   1bbec:	str	r2, [sp, #12]
   1bbf0:	mov	r2, lr
   1bbf4:	ldr	r3, [sp, #20]
   1bbf8:	ldr	r4, [sp, #16]
   1bbfc:	str	r4, [sp]
   1bc00:	ldr	r5, [sp, #12]
   1bc04:	str	r5, [sp, #4]
   1bc08:	bl	1bc1c <flatcc_verify_table_vector_field@@Base+0xf0>
   1bc0c:	str	r0, [fp, #-12]
   1bc10:	ldr	r0, [fp, #-12]
   1bc14:	sub	sp, fp, #8
   1bc18:	pop	{r4, r5, fp, pc}
   1bc1c:	push	{r4, r5, fp, lr}
   1bc20:	add	fp, sp, #8
   1bc24:	sub	sp, sp, #112	; 0x70
   1bc28:	ldr	ip, [fp, #12]
   1bc2c:	ldr	lr, [fp, #8]
   1bc30:	str	r0, [fp, #-16]
   1bc34:	str	r1, [fp, #-20]	; 0xffffffec
   1bc38:	str	r2, [fp, #-24]	; 0xffffffe8
   1bc3c:	str	r3, [fp, #-28]	; 0xffffffe4
   1bc40:	str	lr, [fp, #-44]	; 0xffffffd4
   1bc44:	str	ip, [fp, #-48]	; 0xffffffd0
   1bc48:	ldr	r0, [fp, #8]
   1bc4c:	mvn	r1, #0
   1bc50:	add	r1, r0, r1
   1bc54:	str	r1, [fp, #8]
   1bc58:	cmp	r0, #0
   1bc5c:	movw	r0, #0
   1bc60:	movgt	r0, #1
   1bc64:	and	r0, r0, #1
   1bc68:	str	r0, [fp, #-40]	; 0xffffffd8
   1bc6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bc70:	cmp	r0, #0
   1bc74:	bne	1bc84 <flatcc_verify_table_vector_field@@Base+0x158>
   1bc78:	movw	r0, #3
   1bc7c:	str	r0, [fp, #-12]
   1bc80:	b	1be84 <flatcc_verify_table_vector_field@@Base+0x358>
   1bc84:	b	1bc88 <flatcc_verify_table_vector_field@@Base+0x15c>
   1bc88:	ldr	r0, [pc, #512]	; 1be90 <flatcc_verify_table_vector_field@@Base+0x364>
   1bc8c:	ldr	r1, [fp, #-16]
   1bc90:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bc98:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1bc9c:	str	r0, [fp, #-52]	; 0xffffffcc
   1bca0:	mov	r0, r1
   1bca4:	mov	r1, r2
   1bca8:	mov	r2, r3
   1bcac:	mov	r3, ip
   1bcb0:	movw	ip, #4
   1bcb4:	str	ip, [sp]
   1bcb8:	movw	ip, #4
   1bcbc:	uxth	ip, ip
   1bcc0:	str	ip, [sp, #4]
   1bcc4:	ldr	ip, [fp, #-52]	; 0xffffffcc
   1bcc8:	str	ip, [sp, #8]
   1bccc:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1bcd0:	cmp	r0, #0
   1bcd4:	beq	1bd28 <flatcc_verify_table_vector_field@@Base+0x1fc>
   1bcd8:	ldr	r0, [pc, #432]	; 1be90 <flatcc_verify_table_vector_field@@Base+0x364>
   1bcdc:	ldr	r1, [fp, #-16]
   1bce0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bce8:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1bcec:	str	r0, [fp, #-56]	; 0xffffffc8
   1bcf0:	mov	r0, r1
   1bcf4:	mov	r1, r2
   1bcf8:	mov	r2, r3
   1bcfc:	mov	r3, ip
   1bd00:	movw	ip, #4
   1bd04:	str	ip, [sp]
   1bd08:	movw	ip, #4
   1bd0c:	uxth	ip, ip
   1bd10:	str	ip, [sp, #4]
   1bd14:	ldr	ip, [fp, #-56]	; 0xffffffc8
   1bd18:	str	ip, [sp, #8]
   1bd1c:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1bd20:	str	r0, [fp, #-12]
   1bd24:	b	1be84 <flatcc_verify_table_vector_field@@Base+0x358>
   1bd28:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bd2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bd30:	add	r0, r1, r0
   1bd34:	str	r0, [fp, #-24]	; 0xffffffe8
   1bd38:	ldr	r0, [fp, #-16]
   1bd3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bd40:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1bd44:	str	r0, [fp, #-36]	; 0xffffffdc
   1bd48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bd4c:	add	r0, r0, #4
   1bd50:	str	r0, [fp, #-24]	; 0xffffffe8
   1bd54:	movw	r0, #0
   1bd58:	str	r0, [fp, #-32]	; 0xffffffe0
   1bd5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bd60:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bd64:	cmp	r0, r1
   1bd68:	bcs	1be7c <flatcc_verify_table_vector_field@@Base+0x350>
   1bd6c:	ldr	r0, [fp, #-16]
   1bd70:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bd74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bd78:	ldr	r3, [fp, #-16]
   1bd7c:	ldr	ip, [fp, #-24]	; 0xffffffe8
   1bd80:	str	r0, [sp, #60]	; 0x3c
   1bd84:	mov	r0, r3
   1bd88:	str	r1, [sp, #56]	; 0x38
   1bd8c:	mov	r1, ip
   1bd90:	str	r2, [sp, #52]	; 0x34
   1bd94:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1bd98:	ldr	r1, [fp, #8]
   1bd9c:	ldr	r2, [fp, #12]
   1bda0:	ldr	r3, [sp, #60]	; 0x3c
   1bda4:	str	r0, [sp, #48]	; 0x30
   1bda8:	mov	r0, r3
   1bdac:	ldr	ip, [sp, #56]	; 0x38
   1bdb0:	str	r1, [sp, #44]	; 0x2c
   1bdb4:	mov	r1, ip
   1bdb8:	ldr	lr, [sp, #52]	; 0x34
   1bdbc:	str	r2, [sp, #40]	; 0x28
   1bdc0:	mov	r2, lr
   1bdc4:	ldr	r3, [sp, #48]	; 0x30
   1bdc8:	ldr	r4, [sp, #44]	; 0x2c
   1bdcc:	str	r4, [sp]
   1bdd0:	ldr	r5, [sp, #40]	; 0x28
   1bdd4:	str	r5, [sp, #4]
   1bdd8:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1bddc:	cmp	r0, #0
   1bde0:	beq	1be5c <flatcc_verify_table_vector_field@@Base+0x330>
   1bde4:	ldr	r0, [fp, #-16]
   1bde8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bdec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bdf0:	ldr	r3, [fp, #-16]
   1bdf4:	ldr	ip, [fp, #-24]	; 0xffffffe8
   1bdf8:	str	r0, [sp, #36]	; 0x24
   1bdfc:	mov	r0, r3
   1be00:	str	r1, [sp, #32]
   1be04:	mov	r1, ip
   1be08:	str	r2, [sp, #28]
   1be0c:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1be10:	ldr	r1, [fp, #8]
   1be14:	ldr	r2, [fp, #12]
   1be18:	ldr	r3, [sp, #36]	; 0x24
   1be1c:	str	r0, [sp, #24]
   1be20:	mov	r0, r3
   1be24:	ldr	ip, [sp, #32]
   1be28:	str	r1, [sp, #20]
   1be2c:	mov	r1, ip
   1be30:	ldr	lr, [sp, #28]
   1be34:	str	r2, [sp, #16]
   1be38:	mov	r2, lr
   1be3c:	ldr	r3, [sp, #24]
   1be40:	ldr	r4, [sp, #20]
   1be44:	str	r4, [sp]
   1be48:	ldr	r5, [sp, #16]
   1be4c:	str	r5, [sp, #4]
   1be50:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1be54:	str	r0, [fp, #-12]
   1be58:	b	1be84 <flatcc_verify_table_vector_field@@Base+0x358>
   1be5c:	b	1be60 <flatcc_verify_table_vector_field@@Base+0x334>
   1be60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1be64:	add	r0, r0, #1
   1be68:	str	r0, [fp, #-32]	; 0xffffffe0
   1be6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1be70:	add	r0, r0, #4
   1be74:	str	r0, [fp, #-24]	; 0xffffffe8
   1be78:	b	1bd5c <flatcc_verify_table_vector_field@@Base+0x230>
   1be7c:	movw	r0, #0
   1be80:	str	r0, [fp, #-12]
   1be84:	ldr	r0, [fp, #-12]
   1be88:	sub	sp, fp, #8
   1be8c:	pop	{r4, r5, fp, pc}
   1be90:	svccc	0x00ffffff

0001be94 <flatcc_verify_union_table@@Base>:
   1be94:	push	{fp, lr}
   1be98:	mov	fp, sp
   1be9c:	sub	sp, sp, #16
   1bea0:	str	r0, [fp, #-4]
   1bea4:	str	r1, [sp, #8]
   1bea8:	ldr	r0, [fp, #-4]
   1beac:	ldr	r0, [r0]
   1beb0:	ldr	r1, [fp, #-4]
   1beb4:	ldr	r1, [r1, #4]
   1beb8:	ldr	r2, [fp, #-4]
   1bebc:	ldr	r2, [r2, #16]
   1bec0:	ldr	r3, [fp, #-4]
   1bec4:	ldr	r3, [r3, #20]
   1bec8:	ldr	ip, [fp, #-4]
   1becc:	ldr	ip, [ip, #8]
   1bed0:	ldr	lr, [sp, #8]
   1bed4:	str	ip, [sp]
   1bed8:	str	lr, [sp, #4]
   1bedc:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1bee0:	mov	sp, fp
   1bee4:	pop	{fp, pc}

0001bee8 <flatcc_verify_union_struct@@Base>:
   1bee8:	push	{fp, lr}
   1beec:	mov	fp, sp
   1bef0:	sub	sp, sp, #16
   1bef4:	str	r0, [fp, #-4]
   1bef8:	str	r1, [sp, #8]
   1befc:	strh	r2, [sp, #6]
   1bf00:	ldr	r0, [fp, #-4]
   1bf04:	ldr	r0, [r0, #4]
   1bf08:	ldr	r1, [fp, #-4]
   1bf0c:	ldr	r1, [r1, #16]
   1bf10:	ldr	r2, [fp, #-4]
   1bf14:	ldr	r2, [r2, #20]
   1bf18:	ldr	r3, [sp, #8]
   1bf1c:	ldrh	ip, [sp, #6]
   1bf20:	str	ip, [sp]
   1bf24:	bl	1bf30 <flatcc_verify_union_struct@@Base+0x48>
   1bf28:	mov	sp, fp
   1bf2c:	pop	{fp, pc}
   1bf30:	sub	sp, sp, #36	; 0x24
   1bf34:	ldr	ip, [sp, #36]	; 0x24
   1bf38:	str	r0, [sp, #28]
   1bf3c:	str	r1, [sp, #24]
   1bf40:	str	r2, [sp, #20]
   1bf44:	str	r3, [sp, #16]
   1bf48:	strh	ip, [sp, #14]
   1bf4c:	ldr	r0, [sp, #20]
   1bf50:	cmp	r0, #0
   1bf54:	beq	1bf70 <flatcc_verify_union_struct@@Base+0x88>
   1bf58:	ldr	r0, [sp, #24]
   1bf5c:	ldr	r1, [sp, #20]
   1bf60:	add	r0, r0, r1
   1bf64:	ldr	r1, [sp, #28]
   1bf68:	cmp	r0, r1
   1bf6c:	bls	1bf7c <flatcc_verify_union_struct@@Base+0x94>
   1bf70:	movw	r0, #18
   1bf74:	str	r0, [sp, #32]
   1bf78:	b	1c064 <flatcc_verify_union_struct@@Base+0x17c>
   1bf7c:	ldr	r0, [sp, #20]
   1bf80:	ldr	r1, [sp, #24]
   1bf84:	add	r0, r1, r0
   1bf88:	str	r0, [sp, #24]
   1bf8c:	ldr	r0, [sp, #24]
   1bf90:	ldr	r1, [sp, #16]
   1bf94:	add	r0, r0, r1
   1bf98:	ldr	r1, [sp, #24]
   1bf9c:	cmp	r0, r1
   1bfa0:	movw	r0, #0
   1bfa4:	movcs	r0, #1
   1bfa8:	and	r0, r0, #1
   1bfac:	str	r0, [sp, #8]
   1bfb0:	ldr	r0, [sp, #8]
   1bfb4:	cmp	r0, #0
   1bfb8:	bne	1bfc8 <flatcc_verify_union_struct@@Base+0xe0>
   1bfbc:	movw	r0, #10
   1bfc0:	str	r0, [sp, #32]
   1bfc4:	b	1c064 <flatcc_verify_union_struct@@Base+0x17c>
   1bfc8:	b	1bfcc <flatcc_verify_union_struct@@Base+0xe4>
   1bfcc:	b	1bfd0 <flatcc_verify_union_struct@@Base+0xe8>
   1bfd0:	ldr	r0, [sp, #24]
   1bfd4:	ldr	r1, [sp, #16]
   1bfd8:	add	r0, r0, r1
   1bfdc:	ldr	r1, [sp, #28]
   1bfe0:	cmp	r0, r1
   1bfe4:	movw	r0, #0
   1bfe8:	movls	r0, #1
   1bfec:	and	r0, r0, #1
   1bff0:	str	r0, [sp, #4]
   1bff4:	ldr	r0, [sp, #4]
   1bff8:	cmp	r0, #0
   1bffc:	bne	1c00c <flatcc_verify_union_struct@@Base+0x124>
   1c000:	movw	r0, #9
   1c004:	str	r0, [sp, #32]
   1c008:	b	1c064 <flatcc_verify_union_struct@@Base+0x17c>
   1c00c:	b	1c010 <flatcc_verify_union_struct@@Base+0x128>
   1c010:	b	1c014 <flatcc_verify_union_struct@@Base+0x12c>
   1c014:	ldr	r0, [sp, #24]
   1c018:	ldrh	r1, [sp, #14]
   1c01c:	sub	r1, r1, #1
   1c020:	and	r0, r0, r1
   1c024:	cmp	r0, #0
   1c028:	movw	r0, #0
   1c02c:	movne	r0, #1
   1c030:	mvn	r1, #0
   1c034:	eor	r0, r0, r1
   1c038:	and	r0, r0, #1
   1c03c:	str	r0, [sp]
   1c040:	ldr	r0, [sp]
   1c044:	cmp	r0, #0
   1c048:	bne	1c058 <flatcc_verify_union_struct@@Base+0x170>
   1c04c:	movw	r0, #11
   1c050:	str	r0, [sp, #32]
   1c054:	b	1c064 <flatcc_verify_union_struct@@Base+0x17c>
   1c058:	b	1c05c <flatcc_verify_union_struct@@Base+0x174>
   1c05c:	movw	r0, #0
   1c060:	str	r0, [sp, #32]
   1c064:	ldr	r0, [sp, #32]
   1c068:	add	sp, sp, #36	; 0x24
   1c06c:	bx	lr

0001c070 <flatcc_verify_union_string@@Base>:
   1c070:	push	{fp, lr}
   1c074:	mov	fp, sp
   1c078:	sub	sp, sp, #8
   1c07c:	str	r0, [sp, #4]
   1c080:	ldr	r0, [sp, #4]
   1c084:	ldr	r0, [r0]
   1c088:	ldr	r1, [sp, #4]
   1c08c:	ldr	r1, [r1, #4]
   1c090:	ldr	r2, [sp, #4]
   1c094:	ldr	r2, [r2, #16]
   1c098:	ldr	r3, [sp, #4]
   1c09c:	ldr	r3, [r3, #20]
   1c0a0:	bl	1b158 <flatcc_verify_string_field@@Base+0x214>
   1c0a4:	mov	sp, fp
   1c0a8:	pop	{fp, pc}

0001c0ac <flatcc_verify_buffer_header@@Base>:
   1c0ac:	push	{fp, lr}
   1c0b0:	mov	fp, sp
   1c0b4:	sub	sp, sp, #48	; 0x30
   1c0b8:	str	r0, [fp, #-8]
   1c0bc:	str	r1, [fp, #-12]
   1c0c0:	str	r2, [fp, #-16]
   1c0c4:	ldr	r0, [fp, #-8]
   1c0c8:	and	r0, r0, #3
   1c0cc:	cmp	r0, #0
   1c0d0:	movw	r0, #0
   1c0d4:	movne	r0, #1
   1c0d8:	mvn	r1, #0
   1c0dc:	eor	r0, r0, r1
   1c0e0:	and	r0, r0, #1
   1c0e4:	str	r0, [sp, #20]
   1c0e8:	ldr	r0, [sp, #20]
   1c0ec:	cmp	r0, #0
   1c0f0:	bne	1c100 <flatcc_verify_buffer_header@@Base+0x54>
   1c0f4:	movw	r0, #5
   1c0f8:	str	r0, [fp, #-4]
   1c0fc:	b	1c200 <flatcc_verify_buffer_header@@Base+0x154>
   1c100:	b	1c104 <flatcc_verify_buffer_header@@Base+0x58>
   1c104:	b	1c108 <flatcc_verify_buffer_header@@Base+0x5c>
   1c108:	ldr	r0, [fp, #-12]
   1c10c:	cmn	r0, #9
   1c110:	movw	r0, #0
   1c114:	movls	r0, #1
   1c118:	and	r0, r0, #1
   1c11c:	str	r0, [sp, #16]
   1c120:	ldr	r0, [sp, #16]
   1c124:	cmp	r0, #0
   1c128:	bne	1c138 <flatcc_verify_buffer_header@@Base+0x8c>
   1c12c:	movw	r0, #6
   1c130:	str	r0, [fp, #-4]
   1c134:	b	1c200 <flatcc_verify_buffer_header@@Base+0x154>
   1c138:	b	1c13c <flatcc_verify_buffer_header@@Base+0x90>
   1c13c:	b	1c140 <flatcc_verify_buffer_header@@Base+0x94>
   1c140:	ldr	r0, [fp, #-12]
   1c144:	cmp	r0, #8
   1c148:	movw	r0, #0
   1c14c:	movcs	r0, #1
   1c150:	and	r0, r0, #1
   1c154:	str	r0, [sp, #12]
   1c158:	ldr	r0, [sp, #12]
   1c15c:	cmp	r0, #0
   1c160:	bne	1c170 <flatcc_verify_buffer_header@@Base+0xc4>
   1c164:	movw	r0, #1
   1c168:	str	r0, [fp, #-4]
   1c16c:	b	1c200 <flatcc_verify_buffer_header@@Base+0x154>
   1c170:	b	1c174 <flatcc_verify_buffer_header@@Base+0xc8>
   1c174:	ldr	r0, [fp, #-16]
   1c178:	movw	r1, #0
   1c17c:	cmp	r0, r1
   1c180:	beq	1c1f8 <flatcc_verify_buffer_header@@Base+0x14c>
   1c184:	ldr	r0, [fp, #-16]
   1c188:	bl	1c20c <flatcc_verify_buffer_header@@Base+0x160>
   1c18c:	str	r0, [sp, #24]
   1c190:	ldr	r0, [fp, #-8]
   1c194:	movw	r1, #4
   1c198:	bl	1c24c <flatcc_verify_buffer_header@@Base+0x1a0>
   1c19c:	str	r0, [fp, #-20]	; 0xffffffec
   1c1a0:	ldr	r0, [sp, #24]
   1c1a4:	cmp	r0, #0
   1c1a8:	movw	r0, #1
   1c1ac:	str	r0, [sp, #4]
   1c1b0:	beq	1c1cc <flatcc_verify_buffer_header@@Base+0x120>
   1c1b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c1b8:	ldr	r1, [sp, #24]
   1c1bc:	cmp	r0, r1
   1c1c0:	movw	r0, #0
   1c1c4:	moveq	r0, #1
   1c1c8:	str	r0, [sp, #4]
   1c1cc:	ldr	r0, [sp, #4]
   1c1d0:	and	r0, r0, #1
   1c1d4:	str	r0, [sp, #8]
   1c1d8:	ldr	r0, [sp, #8]
   1c1dc:	cmp	r0, #0
   1c1e0:	bne	1c1f0 <flatcc_verify_buffer_header@@Base+0x144>
   1c1e4:	movw	r0, #2
   1c1e8:	str	r0, [fp, #-4]
   1c1ec:	b	1c200 <flatcc_verify_buffer_header@@Base+0x154>
   1c1f0:	b	1c1f4 <flatcc_verify_buffer_header@@Base+0x148>
   1c1f4:	b	1c1f8 <flatcc_verify_buffer_header@@Base+0x14c>
   1c1f8:	movw	r0, #0
   1c1fc:	str	r0, [fp, #-4]
   1c200:	ldr	r0, [fp, #-4]
   1c204:	mov	sp, fp
   1c208:	pop	{fp, pc}
   1c20c:	push	{fp, lr}
   1c210:	mov	fp, sp
   1c214:	sub	sp, sp, #16
   1c218:	str	r0, [fp, #-4]
   1c21c:	movw	r0, #0
   1c220:	str	r0, [sp, #8]
   1c224:	add	r0, sp, #8
   1c228:	ldr	r1, [fp, #-4]
   1c22c:	movw	r2, #4
   1c230:	bl	12784 <strncpy@plt>
   1c234:	ldr	r1, [sp, #8]
   1c238:	str	r0, [sp, #4]
   1c23c:	mov	r0, r1
   1c240:	bl	1d418 <flatcc_verify_union_vector_field@@Base+0x764>
   1c244:	mov	sp, fp
   1c248:	pop	{fp, pc}
   1c24c:	push	{fp, lr}
   1c250:	mov	fp, sp
   1c254:	sub	sp, sp, #8
   1c258:	str	r0, [sp, #4]
   1c25c:	str	r1, [sp]
   1c260:	ldr	r0, [sp, #4]
   1c264:	ldr	r1, [sp]
   1c268:	add	r0, r0, r1
   1c26c:	bl	1d42c <flatcc_verify_union_vector_field@@Base+0x778>
   1c270:	mov	sp, fp
   1c274:	pop	{fp, pc}

0001c278 <flatcc_verify_typed_buffer_header@@Base>:
   1c278:	push	{fp, lr}
   1c27c:	mov	fp, sp
   1c280:	sub	sp, sp, #48	; 0x30
   1c284:	str	r0, [fp, #-8]
   1c288:	str	r1, [fp, #-12]
   1c28c:	str	r2, [fp, #-16]
   1c290:	ldr	r0, [fp, #-8]
   1c294:	and	r0, r0, #3
   1c298:	cmp	r0, #0
   1c29c:	movw	r0, #0
   1c2a0:	movne	r0, #1
   1c2a4:	mvn	r1, #0
   1c2a8:	eor	r0, r0, r1
   1c2ac:	and	r0, r0, #1
   1c2b0:	str	r0, [sp, #20]
   1c2b4:	ldr	r0, [sp, #20]
   1c2b8:	cmp	r0, #0
   1c2bc:	bne	1c2cc <flatcc_verify_typed_buffer_header@@Base+0x54>
   1c2c0:	movw	r0, #5
   1c2c4:	str	r0, [fp, #-4]
   1c2c8:	b	1c3c4 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c2cc:	b	1c2d0 <flatcc_verify_typed_buffer_header@@Base+0x58>
   1c2d0:	b	1c2d4 <flatcc_verify_typed_buffer_header@@Base+0x5c>
   1c2d4:	ldr	r0, [fp, #-12]
   1c2d8:	cmn	r0, #9
   1c2dc:	movw	r0, #0
   1c2e0:	movls	r0, #1
   1c2e4:	and	r0, r0, #1
   1c2e8:	str	r0, [sp, #16]
   1c2ec:	ldr	r0, [sp, #16]
   1c2f0:	cmp	r0, #0
   1c2f4:	bne	1c304 <flatcc_verify_typed_buffer_header@@Base+0x8c>
   1c2f8:	movw	r0, #6
   1c2fc:	str	r0, [fp, #-4]
   1c300:	b	1c3c4 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c304:	b	1c308 <flatcc_verify_typed_buffer_header@@Base+0x90>
   1c308:	b	1c30c <flatcc_verify_typed_buffer_header@@Base+0x94>
   1c30c:	ldr	r0, [fp, #-12]
   1c310:	cmp	r0, #8
   1c314:	movw	r0, #0
   1c318:	movcs	r0, #1
   1c31c:	and	r0, r0, #1
   1c320:	str	r0, [sp, #12]
   1c324:	ldr	r0, [sp, #12]
   1c328:	cmp	r0, #0
   1c32c:	bne	1c33c <flatcc_verify_typed_buffer_header@@Base+0xc4>
   1c330:	movw	r0, #1
   1c334:	str	r0, [fp, #-4]
   1c338:	b	1c3c4 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c33c:	b	1c340 <flatcc_verify_typed_buffer_header@@Base+0xc8>
   1c340:	ldr	r0, [fp, #-16]
   1c344:	cmp	r0, #0
   1c348:	beq	1c3bc <flatcc_verify_typed_buffer_header@@Base+0x144>
   1c34c:	ldr	r0, [fp, #-16]
   1c350:	str	r0, [sp, #24]
   1c354:	ldr	r0, [fp, #-8]
   1c358:	movw	r1, #4
   1c35c:	bl	1c24c <flatcc_verify_buffer_header@@Base+0x1a0>
   1c360:	str	r0, [fp, #-20]	; 0xffffffec
   1c364:	ldr	r0, [sp, #24]
   1c368:	cmp	r0, #0
   1c36c:	movw	r0, #1
   1c370:	str	r0, [sp, #4]
   1c374:	beq	1c390 <flatcc_verify_typed_buffer_header@@Base+0x118>
   1c378:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c37c:	ldr	r1, [sp, #24]
   1c380:	cmp	r0, r1
   1c384:	movw	r0, #0
   1c388:	moveq	r0, #1
   1c38c:	str	r0, [sp, #4]
   1c390:	ldr	r0, [sp, #4]
   1c394:	and	r0, r0, #1
   1c398:	str	r0, [sp, #8]
   1c39c:	ldr	r0, [sp, #8]
   1c3a0:	cmp	r0, #0
   1c3a4:	bne	1c3b4 <flatcc_verify_typed_buffer_header@@Base+0x13c>
   1c3a8:	movw	r0, #2
   1c3ac:	str	r0, [fp, #-4]
   1c3b0:	b	1c3c4 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c3b4:	b	1c3b8 <flatcc_verify_typed_buffer_header@@Base+0x140>
   1c3b8:	b	1c3bc <flatcc_verify_typed_buffer_header@@Base+0x144>
   1c3bc:	movw	r0, #0
   1c3c0:	str	r0, [fp, #-4]
   1c3c4:	ldr	r0, [fp, #-4]
   1c3c8:	mov	sp, fp
   1c3cc:	pop	{fp, pc}

0001c3d0 <flatcc_verify_struct_as_root@@Base>:
   1c3d0:	push	{fp, lr}
   1c3d4:	mov	fp, sp
   1c3d8:	sub	sp, sp, #40	; 0x28
   1c3dc:	ldr	ip, [fp, #8]
   1c3e0:	str	r0, [fp, #-8]
   1c3e4:	str	r1, [fp, #-12]
   1c3e8:	str	r2, [fp, #-16]
   1c3ec:	str	r3, [sp, #20]
   1c3f0:	strh	ip, [sp, #18]
   1c3f4:	ldr	r0, [fp, #-8]
   1c3f8:	ldr	r1, [fp, #-12]
   1c3fc:	ldr	r2, [fp, #-16]
   1c400:	bl	1c0ac <flatcc_verify_buffer_header@@Base>
   1c404:	cmp	r0, #0
   1c408:	beq	1c424 <flatcc_verify_struct_as_root@@Base+0x54>
   1c40c:	ldr	r0, [fp, #-8]
   1c410:	ldr	r1, [fp, #-12]
   1c414:	ldr	r2, [fp, #-16]
   1c418:	bl	1c0ac <flatcc_verify_buffer_header@@Base>
   1c41c:	str	r0, [fp, #-4]
   1c420:	b	1c464 <flatcc_verify_struct_as_root@@Base+0x94>
   1c424:	ldr	r0, [fp, #-12]
   1c428:	ldr	r1, [fp, #-8]
   1c42c:	str	r0, [sp, #12]
   1c430:	mov	r0, r1
   1c434:	movw	r1, #0
   1c438:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c43c:	ldr	r3, [sp, #20]
   1c440:	ldr	r1, [sp, #12]
   1c444:	str	r0, [sp, #8]
   1c448:	mov	r0, r1
   1c44c:	movw	r1, #0
   1c450:	ldr	r2, [sp, #8]
   1c454:	ldrh	lr, [sp, #18]
   1c458:	str	lr, [sp]
   1c45c:	bl	1bf30 <flatcc_verify_union_struct@@Base+0x48>
   1c460:	str	r0, [fp, #-4]
   1c464:	ldr	r0, [fp, #-4]
   1c468:	mov	sp, fp
   1c46c:	pop	{fp, pc}

0001c470 <flatcc_verify_struct_as_typed_root@@Base>:
   1c470:	push	{fp, lr}
   1c474:	mov	fp, sp
   1c478:	sub	sp, sp, #40	; 0x28
   1c47c:	ldr	ip, [fp, #8]
   1c480:	str	r0, [fp, #-8]
   1c484:	str	r1, [fp, #-12]
   1c488:	str	r2, [fp, #-16]
   1c48c:	str	r3, [sp, #20]
   1c490:	strh	ip, [sp, #18]
   1c494:	ldr	r0, [fp, #-8]
   1c498:	ldr	r1, [fp, #-12]
   1c49c:	ldr	r2, [fp, #-16]
   1c4a0:	bl	1c278 <flatcc_verify_typed_buffer_header@@Base>
   1c4a4:	cmp	r0, #0
   1c4a8:	beq	1c4c4 <flatcc_verify_struct_as_typed_root@@Base+0x54>
   1c4ac:	ldr	r0, [fp, #-8]
   1c4b0:	ldr	r1, [fp, #-12]
   1c4b4:	ldr	r2, [fp, #-16]
   1c4b8:	bl	1c278 <flatcc_verify_typed_buffer_header@@Base>
   1c4bc:	str	r0, [fp, #-4]
   1c4c0:	b	1c504 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   1c4c4:	ldr	r0, [fp, #-12]
   1c4c8:	ldr	r1, [fp, #-8]
   1c4cc:	str	r0, [sp, #12]
   1c4d0:	mov	r0, r1
   1c4d4:	movw	r1, #0
   1c4d8:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c4dc:	ldr	r3, [sp, #20]
   1c4e0:	ldr	r1, [sp, #12]
   1c4e4:	str	r0, [sp, #8]
   1c4e8:	mov	r0, r1
   1c4ec:	movw	r1, #0
   1c4f0:	ldr	r2, [sp, #8]
   1c4f4:	ldrh	lr, [sp, #18]
   1c4f8:	str	lr, [sp]
   1c4fc:	bl	1bf30 <flatcc_verify_union_struct@@Base+0x48>
   1c500:	str	r0, [fp, #-4]
   1c504:	ldr	r0, [fp, #-4]
   1c508:	mov	sp, fp
   1c50c:	pop	{fp, pc}

0001c510 <flatcc_verify_table_as_root@@Base>:
   1c510:	push	{fp, lr}
   1c514:	mov	fp, sp
   1c518:	sub	sp, sp, #48	; 0x30
   1c51c:	str	r0, [fp, #-8]
   1c520:	str	r1, [fp, #-12]
   1c524:	str	r2, [fp, #-16]
   1c528:	str	r3, [fp, #-20]	; 0xffffffec
   1c52c:	ldr	r0, [fp, #-8]
   1c530:	ldr	r1, [fp, #-12]
   1c534:	ldr	r2, [fp, #-16]
   1c538:	bl	1c0ac <flatcc_verify_buffer_header@@Base>
   1c53c:	cmp	r0, #0
   1c540:	beq	1c55c <flatcc_verify_table_as_root@@Base+0x4c>
   1c544:	ldr	r0, [fp, #-8]
   1c548:	ldr	r1, [fp, #-12]
   1c54c:	ldr	r2, [fp, #-16]
   1c550:	bl	1c0ac <flatcc_verify_buffer_header@@Base>
   1c554:	str	r0, [fp, #-4]
   1c558:	b	1c5bc <flatcc_verify_table_as_root@@Base+0xac>
   1c55c:	ldr	r0, [fp, #-8]
   1c560:	ldr	r1, [fp, #-12]
   1c564:	ldr	r2, [fp, #-8]
   1c568:	str	r0, [sp, #24]
   1c56c:	mov	r0, r2
   1c570:	movw	r2, #0
   1c574:	str	r1, [sp, #20]
   1c578:	mov	r1, r2
   1c57c:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c580:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c584:	ldr	r2, [sp, #24]
   1c588:	str	r0, [sp, #16]
   1c58c:	mov	r0, r2
   1c590:	ldr	lr, [sp, #20]
   1c594:	str	r1, [sp, #12]
   1c598:	mov	r1, lr
   1c59c:	movw	r2, #0
   1c5a0:	ldr	r3, [sp, #16]
   1c5a4:	movw	ip, #100	; 0x64
   1c5a8:	str	ip, [sp]
   1c5ac:	ldr	ip, [sp, #12]
   1c5b0:	str	ip, [sp, #4]
   1c5b4:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1c5b8:	str	r0, [fp, #-4]
   1c5bc:	ldr	r0, [fp, #-4]
   1c5c0:	mov	sp, fp
   1c5c4:	pop	{fp, pc}

0001c5c8 <flatcc_verify_table_as_typed_root@@Base>:
   1c5c8:	push	{fp, lr}
   1c5cc:	mov	fp, sp
   1c5d0:	sub	sp, sp, #48	; 0x30
   1c5d4:	str	r0, [fp, #-8]
   1c5d8:	str	r1, [fp, #-12]
   1c5dc:	str	r2, [fp, #-16]
   1c5e0:	str	r3, [fp, #-20]	; 0xffffffec
   1c5e4:	ldr	r0, [fp, #-8]
   1c5e8:	ldr	r1, [fp, #-12]
   1c5ec:	ldr	r2, [fp, #-16]
   1c5f0:	bl	1c278 <flatcc_verify_typed_buffer_header@@Base>
   1c5f4:	cmp	r0, #0
   1c5f8:	beq	1c614 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   1c5fc:	ldr	r0, [fp, #-8]
   1c600:	ldr	r1, [fp, #-12]
   1c604:	ldr	r2, [fp, #-16]
   1c608:	bl	1c278 <flatcc_verify_typed_buffer_header@@Base>
   1c60c:	str	r0, [fp, #-4]
   1c610:	b	1c674 <flatcc_verify_table_as_typed_root@@Base+0xac>
   1c614:	ldr	r0, [fp, #-8]
   1c618:	ldr	r1, [fp, #-12]
   1c61c:	ldr	r2, [fp, #-8]
   1c620:	str	r0, [sp, #24]
   1c624:	mov	r0, r2
   1c628:	movw	r2, #0
   1c62c:	str	r1, [sp, #20]
   1c630:	mov	r1, r2
   1c634:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c638:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c63c:	ldr	r2, [sp, #24]
   1c640:	str	r0, [sp, #16]
   1c644:	mov	r0, r2
   1c648:	ldr	lr, [sp, #20]
   1c64c:	str	r1, [sp, #12]
   1c650:	mov	r1, lr
   1c654:	movw	r2, #0
   1c658:	ldr	r3, [sp, #16]
   1c65c:	movw	ip, #100	; 0x64
   1c660:	str	ip, [sp]
   1c664:	ldr	ip, [sp, #12]
   1c668:	str	ip, [sp, #4]
   1c66c:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1c670:	str	r0, [fp, #-4]
   1c674:	ldr	r0, [fp, #-4]
   1c678:	mov	sp, fp
   1c67c:	pop	{fp, pc}

0001c680 <flatcc_verify_struct_as_nested_root@@Base>:
   1c680:	push	{fp, lr}
   1c684:	mov	fp, sp
   1c688:	sub	sp, sp, #48	; 0x30
   1c68c:	ldr	ip, [fp, #12]
   1c690:	ldr	lr, [fp, #8]
   1c694:	str	r0, [fp, #-8]
   1c698:	strh	r1, [fp, #-10]
   1c69c:	str	r2, [fp, #-16]
   1c6a0:	str	r3, [fp, #-20]	; 0xffffffec
   1c6a4:	strh	ip, [fp, #-22]	; 0xffffffea
   1c6a8:	ldr	r0, [fp, #-8]
   1c6ac:	ldrh	r1, [fp, #-10]
   1c6b0:	ldr	r2, [fp, #-16]
   1c6b4:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1c6b8:	uxth	r1, r1
   1c6bc:	movw	ip, #1
   1c6c0:	uxth	ip, ip
   1c6c4:	str	ip, [sp]
   1c6c8:	mvn	ip, #0
   1c6cc:	str	ip, [sp, #4]
   1c6d0:	str	lr, [sp, #12]
   1c6d4:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   1c6d8:	cmp	r0, #0
   1c6dc:	beq	1c714 <flatcc_verify_struct_as_nested_root@@Base+0x94>
   1c6e0:	ldr	r0, [fp, #-8]
   1c6e4:	ldrh	r1, [fp, #-10]
   1c6e8:	ldr	r2, [fp, #-16]
   1c6ec:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1c6f0:	uxth	r1, r1
   1c6f4:	movw	ip, #1
   1c6f8:	uxth	ip, ip
   1c6fc:	str	ip, [sp]
   1c700:	mvn	ip, #0
   1c704:	str	ip, [sp, #4]
   1c708:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   1c70c:	str	r0, [fp, #-4]
   1c710:	b	1c79c <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   1c714:	ldr	r0, [fp, #-8]
   1c718:	ldrh	r1, [fp, #-10]
   1c71c:	bl	1c7a8 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   1c720:	str	r0, [sp, #20]
   1c724:	movw	r1, #0
   1c728:	cmp	r1, r0
   1c72c:	bne	1c73c <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   1c730:	movw	r0, #0
   1c734:	str	r0, [fp, #-4]
   1c738:	b	1c79c <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   1c73c:	ldr	r0, [sp, #20]
   1c740:	ldr	r1, [sp, #20]
   1c744:	str	r0, [sp, #8]
   1c748:	mov	r0, r1
   1c74c:	movw	r1, #0
   1c750:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c754:	ldr	r1, [sp, #8]
   1c758:	add	r0, r1, r0
   1c75c:	str	r0, [sp, #20]
   1c760:	ldr	r0, [sp, #20]
   1c764:	movw	r1, #0
   1c768:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c76c:	str	r0, [sp, #16]
   1c770:	ldr	r0, [sp, #20]
   1c774:	add	r0, r0, #4
   1c778:	str	r0, [sp, #20]
   1c77c:	ldr	r0, [sp, #20]
   1c780:	ldr	r1, [sp, #16]
   1c784:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c788:	ldr	r3, [fp, #8]
   1c78c:	ldrh	lr, [fp, #-22]	; 0xffffffea
   1c790:	str	lr, [sp]
   1c794:	bl	1c3d0 <flatcc_verify_struct_as_root@@Base>
   1c798:	str	r0, [fp, #-4]
   1c79c:	ldr	r0, [fp, #-4]
   1c7a0:	mov	sp, fp
   1c7a4:	pop	{fp, pc}
   1c7a8:	push	{fp, lr}
   1c7ac:	mov	fp, sp
   1c7b0:	sub	sp, sp, #16
   1c7b4:	str	r0, [fp, #-4]
   1c7b8:	strh	r1, [fp, #-6]
   1c7bc:	ldr	r0, [fp, #-4]
   1c7c0:	ldrh	r1, [fp, #-6]
   1c7c4:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1c7c8:	strh	r0, [sp, #8]
   1c7cc:	ldrh	r0, [sp, #8]
   1c7d0:	cmp	r0, #0
   1c7d4:	beq	1c7fc <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   1c7d8:	ldr	r0, [fp, #-4]
   1c7dc:	ldr	r0, [r0]
   1c7e0:	ldr	r1, [fp, #-4]
   1c7e4:	ldr	r1, [r1, #16]
   1c7e8:	add	r0, r0, r1
   1c7ec:	ldrh	r1, [sp, #8]
   1c7f0:	add	r0, r0, r1
   1c7f4:	str	r0, [sp, #4]
   1c7f8:	b	1c808 <flatcc_verify_struct_as_nested_root@@Base+0x188>
   1c7fc:	movw	r0, #0
   1c800:	str	r0, [sp, #4]
   1c804:	b	1c808 <flatcc_verify_struct_as_nested_root@@Base+0x188>
   1c808:	ldr	r0, [sp, #4]
   1c80c:	mov	sp, fp
   1c810:	pop	{fp, pc}

0001c814 <flatcc_verify_table_as_nested_root@@Base>:
   1c814:	push	{r4, sl, fp, lr}
   1c818:	add	fp, sp, #8
   1c81c:	sub	sp, sp, #72	; 0x48
   1c820:	ldr	ip, [fp, #12]
   1c824:	ldr	lr, [fp, #8]
   1c828:	str	r0, [fp, #-16]
   1c82c:	strh	r1, [fp, #-18]	; 0xffffffee
   1c830:	str	r2, [fp, #-24]	; 0xffffffe8
   1c834:	str	r3, [fp, #-28]	; 0xffffffe4
   1c838:	strh	lr, [fp, #-30]	; 0xffffffe2
   1c83c:	ldr	r0, [fp, #-16]
   1c840:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c844:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c848:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   1c84c:	uxth	r1, r1
   1c850:	movw	lr, #1
   1c854:	uxth	lr, lr
   1c858:	str	lr, [sp]
   1c85c:	mvn	lr, #0
   1c860:	str	lr, [sp, #4]
   1c864:	str	ip, [sp, #36]	; 0x24
   1c868:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   1c86c:	cmp	r0, #0
   1c870:	beq	1c8a8 <flatcc_verify_table_as_nested_root@@Base+0x94>
   1c874:	ldr	r0, [fp, #-16]
   1c878:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c87c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c880:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   1c884:	uxth	r1, r1
   1c888:	movw	ip, #1
   1c88c:	uxth	ip, ip
   1c890:	str	ip, [sp]
   1c894:	mvn	ip, #0
   1c898:	str	ip, [sp, #4]
   1c89c:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   1c8a0:	str	r0, [fp, #-12]
   1c8a4:	b	1c9b0 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   1c8a8:	ldr	r0, [fp, #-16]
   1c8ac:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c8b0:	bl	1c7a8 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   1c8b4:	str	r0, [fp, #-36]	; 0xffffffdc
   1c8b8:	movw	r1, #0
   1c8bc:	cmp	r1, r0
   1c8c0:	bne	1c8d0 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1c8c4:	movw	r0, #0
   1c8c8:	str	r0, [fp, #-12]
   1c8cc:	b	1c9b0 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   1c8d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c8d8:	str	r0, [sp, #32]
   1c8dc:	mov	r0, r1
   1c8e0:	movw	r1, #0
   1c8e4:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c8e8:	ldr	r1, [sp, #32]
   1c8ec:	add	r0, r1, r0
   1c8f0:	str	r0, [fp, #-36]	; 0xffffffdc
   1c8f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8f8:	movw	r1, #0
   1c8fc:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c900:	str	r0, [sp, #40]	; 0x28
   1c904:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c908:	add	r0, r0, #4
   1c90c:	str	r0, [fp, #-36]	; 0xffffffdc
   1c910:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c914:	ldr	r1, [sp, #40]	; 0x28
   1c918:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c91c:	bl	1c0ac <flatcc_verify_buffer_header@@Base>
   1c920:	cmp	r0, #0
   1c924:	beq	1c940 <flatcc_verify_table_as_nested_root@@Base+0x12c>
   1c928:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c92c:	ldr	r1, [sp, #40]	; 0x28
   1c930:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c934:	bl	1c0ac <flatcc_verify_buffer_header@@Base>
   1c938:	str	r0, [fp, #-12]
   1c93c:	b	1c9b0 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   1c940:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c944:	ldr	r1, [sp, #40]	; 0x28
   1c948:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c94c:	str	r0, [sp, #28]
   1c950:	mov	r0, r2
   1c954:	movw	r2, #0
   1c958:	str	r1, [sp, #24]
   1c95c:	mov	r1, r2
   1c960:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1c964:	ldr	r1, [fp, #-16]
   1c968:	ldr	r1, [r1, #8]
   1c96c:	ldr	r2, [fp, #12]
   1c970:	ldr	lr, [sp, #28]
   1c974:	str	r0, [sp, #20]
   1c978:	mov	r0, lr
   1c97c:	ldr	r3, [sp, #24]
   1c980:	str	r1, [sp, #16]
   1c984:	mov	r1, r3
   1c988:	movw	ip, #0
   1c98c:	str	r2, [sp, #12]
   1c990:	mov	r2, ip
   1c994:	ldr	r3, [sp, #20]
   1c998:	ldr	ip, [sp, #16]
   1c99c:	str	ip, [sp]
   1c9a0:	ldr	r4, [sp, #12]
   1c9a4:	str	r4, [sp, #4]
   1c9a8:	bl	1b850 <flatcc_verify_table_field@@Base+0xf0>
   1c9ac:	str	r0, [fp, #-12]
   1c9b0:	ldr	r0, [fp, #-12]
   1c9b4:	sub	sp, fp, #8
   1c9b8:	pop	{r4, sl, fp, pc}

0001c9bc <flatcc_verify_union_field@@Base>:
   1c9bc:	push	{fp, lr}
   1c9c0:	mov	fp, sp
   1c9c4:	sub	sp, sp, #88	; 0x58
   1c9c8:	str	r0, [fp, #-8]
   1c9cc:	strh	r1, [fp, #-10]
   1c9d0:	str	r2, [fp, #-16]
   1c9d4:	str	r3, [fp, #-20]	; 0xffffffec
   1c9d8:	ldr	r0, [fp, #-8]
   1c9dc:	ldrh	r1, [fp, #-10]
   1c9e0:	sub	r1, r1, #1
   1c9e4:	uxth	r1, r1
   1c9e8:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1c9ec:	strh	r0, [fp, #-22]	; 0xffffffea
   1c9f0:	uxth	r0, r0
   1c9f4:	movw	r1, #0
   1c9f8:	cmp	r1, r0
   1c9fc:	bne	1ca90 <flatcc_verify_union_field@@Base+0xd4>
   1ca00:	ldr	r0, [fp, #-8]
   1ca04:	ldrh	r1, [fp, #-10]
   1ca08:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1ca0c:	strh	r0, [fp, #-24]	; 0xffffffe8
   1ca10:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   1ca14:	cmp	r0, #0
   1ca18:	movw	r0, #0
   1ca1c:	moveq	r0, #1
   1ca20:	and	r0, r0, #1
   1ca24:	str	r0, [sp, #28]
   1ca28:	ldr	r0, [sp, #28]
   1ca2c:	cmp	r0, #0
   1ca30:	bne	1ca40 <flatcc_verify_union_field@@Base+0x84>
   1ca34:	movw	r0, #23
   1ca38:	str	r0, [fp, #-4]
   1ca3c:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1ca40:	b	1ca44 <flatcc_verify_union_field@@Base+0x88>
   1ca44:	b	1ca48 <flatcc_verify_union_field@@Base+0x8c>
   1ca48:	ldr	r0, [fp, #-16]
   1ca4c:	cmp	r0, #0
   1ca50:	movw	r0, #0
   1ca54:	movne	r0, #1
   1ca58:	mvn	r1, #0
   1ca5c:	eor	r0, r0, r1
   1ca60:	and	r0, r0, #1
   1ca64:	str	r0, [sp, #24]
   1ca68:	ldr	r0, [sp, #24]
   1ca6c:	cmp	r0, #0
   1ca70:	bne	1ca80 <flatcc_verify_union_field@@Base+0xc4>
   1ca74:	movw	r0, #21
   1ca78:	str	r0, [fp, #-4]
   1ca7c:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1ca80:	b	1ca84 <flatcc_verify_union_field@@Base+0xc8>
   1ca84:	movw	r0, #0
   1ca88:	str	r0, [fp, #-4]
   1ca8c:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1ca90:	ldr	r0, [fp, #-8]
   1ca94:	ldrh	r1, [fp, #-10]
   1ca98:	sub	r1, r1, #1
   1ca9c:	uxth	r1, r1
   1caa0:	movw	r2, #0
   1caa4:	movw	r3, #1
   1caa8:	movw	ip, #1
   1caac:	uxth	ip, ip
   1cab0:	str	ip, [sp]
   1cab4:	bl	1adb8 <flatcc_verify_field@@Base+0x80>
   1cab8:	cmp	r0, #0
   1cabc:	beq	1caf0 <flatcc_verify_union_field@@Base+0x134>
   1cac0:	ldr	r0, [fp, #-8]
   1cac4:	ldrh	r1, [fp, #-10]
   1cac8:	sub	r1, r1, #1
   1cacc:	uxth	r1, r1
   1cad0:	movw	r2, #0
   1cad4:	movw	r3, #1
   1cad8:	movw	ip, #1
   1cadc:	uxth	ip, ip
   1cae0:	str	ip, [sp]
   1cae4:	bl	1adb8 <flatcc_verify_field@@Base+0x80>
   1cae8:	str	r0, [fp, #-4]
   1caec:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1caf0:	ldr	r0, [fp, #-8]
   1caf4:	ldrh	r1, [fp, #-10]
   1caf8:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1cafc:	strh	r0, [fp, #-24]	; 0xffffffe8
   1cb00:	ldr	r0, [fp, #-8]
   1cb04:	ldr	r0, [r0]
   1cb08:	ldr	r1, [fp, #-8]
   1cb0c:	ldr	r1, [r1, #16]
   1cb10:	add	r0, r0, r1
   1cb14:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1cb18:	add	r0, r0, r1
   1cb1c:	str	r0, [fp, #-28]	; 0xffffffe4
   1cb20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cb24:	ldrb	r0, [r0]
   1cb28:	cmp	r0, #0
   1cb2c:	movw	r0, #1
   1cb30:	str	r0, [sp, #12]
   1cb34:	bne	1cb4c <flatcc_verify_union_field@@Base+0x190>
   1cb38:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   1cb3c:	cmp	r0, #0
   1cb40:	movw	r0, #0
   1cb44:	moveq	r0, #1
   1cb48:	str	r0, [sp, #12]
   1cb4c:	ldr	r0, [sp, #12]
   1cb50:	and	r0, r0, #1
   1cb54:	str	r0, [sp, #20]
   1cb58:	ldr	r0, [sp, #20]
   1cb5c:	cmp	r0, #0
   1cb60:	bne	1cb70 <flatcc_verify_union_field@@Base+0x1b4>
   1cb64:	movw	r0, #24
   1cb68:	str	r0, [fp, #-4]
   1cb6c:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1cb70:	b	1cb74 <flatcc_verify_union_field@@Base+0x1b8>
   1cb74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cb78:	ldrb	r0, [r0]
   1cb7c:	cmp	r0, #0
   1cb80:	bne	1cb90 <flatcc_verify_union_field@@Base+0x1d4>
   1cb84:	movw	r0, #0
   1cb88:	str	r0, [fp, #-4]
   1cb8c:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1cb90:	b	1cb94 <flatcc_verify_union_field@@Base+0x1d8>
   1cb94:	ldr	r0, [fp, #-8]
   1cb98:	ldrh	r1, [fp, #-10]
   1cb9c:	ldr	r2, [fp, #-16]
   1cba0:	uxth	r1, r1
   1cba4:	sub	r3, fp, #32
   1cba8:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1cbac:	str	r0, [sp, #16]
   1cbb0:	ldr	r0, [sp, #16]
   1cbb4:	cmp	r0, #0
   1cbb8:	bne	1cbc8 <flatcc_verify_union_field@@Base+0x20c>
   1cbbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cbc0:	cmp	r0, #0
   1cbc4:	bne	1cbd4 <flatcc_verify_union_field@@Base+0x218>
   1cbc8:	ldr	r0, [sp, #16]
   1cbcc:	str	r0, [fp, #-4]
   1cbd0:	b	1cc40 <flatcc_verify_union_field@@Base+0x284>
   1cbd4:	b	1cbd8 <flatcc_verify_union_field@@Base+0x21c>
   1cbd8:	ldr	r0, [fp, #-8]
   1cbdc:	ldr	r0, [r0]
   1cbe0:	str	r0, [sp, #32]
   1cbe4:	ldr	r0, [fp, #-8]
   1cbe8:	ldr	r0, [r0, #4]
   1cbec:	str	r0, [sp, #36]	; 0x24
   1cbf0:	ldr	r0, [fp, #-8]
   1cbf4:	ldr	r0, [r0, #8]
   1cbf8:	str	r0, [sp, #40]	; 0x28
   1cbfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cc00:	str	r0, [sp, #48]	; 0x30
   1cc04:	ldr	r0, [fp, #-8]
   1cc08:	ldr	r0, [r0]
   1cc0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cc10:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1cc14:	str	r0, [sp, #52]	; 0x34
   1cc18:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cc1c:	ldrb	r0, [r0]
   1cc20:	strb	r0, [sp, #44]	; 0x2c
   1cc24:	ldr	r0, [fp, #-20]	; 0xffffffec
   1cc28:	add	r1, sp, #32
   1cc2c:	str	r0, [sp, #8]
   1cc30:	mov	r0, r1
   1cc34:	ldr	r1, [sp, #8]
   1cc38:	blx	r1
   1cc3c:	str	r0, [fp, #-4]
   1cc40:	ldr	r0, [fp, #-4]
   1cc44:	mov	sp, fp
   1cc48:	pop	{fp, pc}
   1cc4c:	push	{fp, lr}
   1cc50:	mov	fp, sp
   1cc54:	sub	sp, sp, #16
   1cc58:	str	r0, [sp, #8]
   1cc5c:	strh	r1, [sp, #6]
   1cc60:	ldrh	r0, [sp, #6]
   1cc64:	add	r0, r0, #2
   1cc68:	lsl	r0, r0, #1
   1cc6c:	strh	r0, [sp, #4]
   1cc70:	ldrh	r0, [sp, #4]
   1cc74:	ldr	r1, [sp, #8]
   1cc78:	ldrh	r1, [r1, #22]
   1cc7c:	cmp	r0, r1
   1cc80:	blt	1cc90 <flatcc_verify_union_field@@Base+0x2d4>
   1cc84:	movw	r0, #0
   1cc88:	str	r0, [fp, #-4]
   1cc8c:	b	1cca8 <flatcc_verify_union_field@@Base+0x2ec>
   1cc90:	ldr	r0, [sp, #8]
   1cc94:	ldr	r0, [r0, #12]
   1cc98:	ldrh	r1, [sp, #4]
   1cc9c:	bl	1d3ac <flatcc_verify_union_vector_field@@Base+0x6f8>
   1cca0:	uxth	r0, r0
   1cca4:	str	r0, [fp, #-4]
   1cca8:	ldr	r0, [fp, #-4]
   1ccac:	mov	sp, fp
   1ccb0:	pop	{fp, pc}

0001ccb4 <flatcc_verify_union_vector_field@@Base>:
   1ccb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ccb8:	add	fp, sp, #24
   1ccbc:	sub	sp, sp, #96	; 0x60
   1ccc0:	str	r0, [fp, #-32]	; 0xffffffe0
   1ccc4:	strh	r1, [fp, #-34]	; 0xffffffde
   1ccc8:	str	r2, [fp, #-40]	; 0xffffffd8
   1cccc:	str	r3, [fp, #-44]	; 0xffffffd4
   1ccd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ccd4:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1ccd8:	sub	r1, r1, #1
   1ccdc:	uxth	r1, r1
   1cce0:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1cce4:	strh	r0, [fp, #-46]	; 0xffffffd2
   1cce8:	uxth	r0, r0
   1ccec:	movw	r1, #0
   1ccf0:	cmp	r1, r0
   1ccf4:	bne	1cd60 <flatcc_verify_union_vector_field@@Base+0xac>
   1ccf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ccfc:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cd00:	bl	1cc4c <flatcc_verify_union_field@@Base+0x290>
   1cd04:	strh	r0, [fp, #-48]	; 0xffffffd0
   1cd08:	uxth	r0, r0
   1cd0c:	movw	r1, #0
   1cd10:	cmp	r1, r0
   1cd14:	bne	1cd5c <flatcc_verify_union_vector_field@@Base+0xa8>
   1cd18:	b	1cd1c <flatcc_verify_union_vector_field@@Base+0x68>
   1cd1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cd20:	cmp	r0, #0
   1cd24:	movw	r0, #0
   1cd28:	movne	r0, #1
   1cd2c:	mvn	r1, #0
   1cd30:	eor	r0, r0, r1
   1cd34:	and	r0, r0, #1
   1cd38:	str	r0, [sp, #52]	; 0x34
   1cd3c:	ldr	r0, [sp, #52]	; 0x34
   1cd40:	cmp	r0, #0
   1cd44:	bne	1cd54 <flatcc_verify_union_vector_field@@Base+0xa0>
   1cd48:	movw	r0, #22
   1cd4c:	str	r0, [fp, #-28]	; 0xffffffe4
   1cd50:	b	1cf2c <flatcc_verify_union_vector_field@@Base+0x278>
   1cd54:	b	1cd58 <flatcc_verify_union_vector_field@@Base+0xa4>
   1cd58:	b	1cd5c <flatcc_verify_union_vector_field@@Base+0xa8>
   1cd5c:	b	1cd60 <flatcc_verify_union_vector_field@@Base+0xac>
   1cd60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cd64:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cd68:	sub	r1, r1, #1
   1cd6c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cd70:	uxth	r1, r1
   1cd74:	movw	r3, #1
   1cd78:	movw	ip, #1
   1cd7c:	uxth	ip, ip
   1cd80:	str	ip, [sp]
   1cd84:	mvn	ip, #0
   1cd88:	str	ip, [sp, #4]
   1cd8c:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   1cd90:	cmp	r0, #0
   1cd94:	beq	1cdd0 <flatcc_verify_union_vector_field@@Base+0x11c>
   1cd98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cd9c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cda0:	sub	r1, r1, #1
   1cda4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cda8:	uxth	r1, r1
   1cdac:	movw	r3, #1
   1cdb0:	movw	ip, #1
   1cdb4:	uxth	ip, ip
   1cdb8:	str	ip, [sp]
   1cdbc:	mvn	ip, #0
   1cdc0:	str	ip, [sp, #4]
   1cdc4:	bl	1b2a0 <flatcc_verify_vector_field@@Base>
   1cdc8:	str	r0, [fp, #-28]	; 0xffffffe4
   1cdcc:	b	1cf2c <flatcc_verify_union_vector_field@@Base+0x278>
   1cdd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cdd4:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cdd8:	sub	r1, r1, #1
   1cddc:	uxth	r1, r1
   1cde0:	bl	1c7a8 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   1cde4:	str	r0, [fp, #-52]	; 0xffffffcc
   1cde8:	movw	r1, #0
   1cdec:	cmp	r1, r0
   1cdf0:	bne	1ce00 <flatcc_verify_union_vector_field@@Base+0x14c>
   1cdf4:	movw	r0, #0
   1cdf8:	str	r0, [fp, #-28]	; 0xffffffe4
   1cdfc:	b	1cf2c <flatcc_verify_union_vector_field@@Base+0x278>
   1ce00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ce04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ce08:	str	r0, [sp, #44]	; 0x2c
   1ce0c:	mov	r0, r1
   1ce10:	movw	r1, #0
   1ce14:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1ce18:	ldr	r1, [sp, #44]	; 0x2c
   1ce1c:	add	r0, r1, r0
   1ce20:	str	r0, [fp, #-52]	; 0xffffffcc
   1ce24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ce28:	movw	r1, #0
   1ce2c:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1ce30:	str	r0, [sp, #60]	; 0x3c
   1ce34:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ce38:	add	r0, r0, #4
   1ce3c:	str	r0, [fp, #-52]	; 0xffffffcc
   1ce40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ce44:	str	r0, [fp, #-56]	; 0xffffffc8
   1ce48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce4c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1ce50:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ce54:	uxth	r1, r1
   1ce58:	add	r3, sp, #56	; 0x38
   1ce5c:	bl	1b004 <flatcc_verify_string_field@@Base+0xc0>
   1ce60:	str	r0, [sp, #48]	; 0x30
   1ce64:	ldr	r0, [sp, #48]	; 0x30
   1ce68:	cmp	r0, #0
   1ce6c:	bne	1ce7c <flatcc_verify_union_vector_field@@Base+0x1c8>
   1ce70:	ldr	r0, [sp, #56]	; 0x38
   1ce74:	cmp	r0, #0
   1ce78:	bne	1ce88 <flatcc_verify_union_vector_field@@Base+0x1d4>
   1ce7c:	ldr	r0, [sp, #48]	; 0x30
   1ce80:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce84:	b	1cf2c <flatcc_verify_union_vector_field@@Base+0x278>
   1ce88:	b	1ce8c <flatcc_verify_union_vector_field@@Base+0x1d8>
   1ce8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce90:	ldr	r0, [r0]
   1ce94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ce98:	ldr	r1, [r1, #4]
   1ce9c:	ldr	r2, [sp, #56]	; 0x38
   1cea0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cea4:	ldr	r3, [r3]
   1cea8:	ldr	ip, [sp, #56]	; 0x38
   1ceac:	str	r0, [sp, #40]	; 0x28
   1ceb0:	mov	r0, r3
   1ceb4:	str	r1, [sp, #36]	; 0x24
   1ceb8:	mov	r1, ip
   1cebc:	str	r2, [sp, #32]
   1cec0:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1cec4:	ldr	r1, [sp, #60]	; 0x3c
   1cec8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1cecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ced0:	ldr	r3, [r3, #8]
   1ced4:	ldr	ip, [fp, #-44]	; 0xffffffd4
   1ced8:	ldr	lr, [sp, #40]	; 0x28
   1cedc:	str	r0, [sp, #28]
   1cee0:	mov	r0, lr
   1cee4:	ldr	r4, [sp, #36]	; 0x24
   1cee8:	str	r1, [sp, #24]
   1ceec:	mov	r1, r4
   1cef0:	ldr	r5, [sp, #32]
   1cef4:	str	r2, [sp, #20]
   1cef8:	mov	r2, r5
   1cefc:	ldr	r6, [sp, #28]
   1cf00:	str	r3, [sp, #16]
   1cf04:	mov	r3, r6
   1cf08:	ldr	r7, [sp, #24]
   1cf0c:	str	r7, [sp]
   1cf10:	ldr	r8, [sp, #20]
   1cf14:	str	r8, [sp, #4]
   1cf18:	ldr	r9, [sp, #16]
   1cf1c:	str	r9, [sp, #8]
   1cf20:	str	ip, [sp, #12]
   1cf24:	bl	1cf38 <flatcc_verify_union_vector_field@@Base+0x284>
   1cf28:	str	r0, [fp, #-28]	; 0xffffffe4
   1cf2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cf30:	sub	sp, fp, #24
   1cf34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cf38:	push	{r4, r5, fp, lr}
   1cf3c:	add	fp, sp, #8
   1cf40:	sub	sp, sp, #120	; 0x78
   1cf44:	ldr	ip, [fp, #20]
   1cf48:	ldr	lr, [fp, #16]
   1cf4c:	ldr	r4, [fp, #12]
   1cf50:	ldr	r5, [fp, #8]
   1cf54:	str	r0, [fp, #-16]
   1cf58:	str	r1, [fp, #-20]	; 0xffffffec
   1cf5c:	str	r2, [fp, #-24]	; 0xffffffe8
   1cf60:	str	r3, [fp, #-28]	; 0xffffffe4
   1cf64:	str	r5, [sp, #44]	; 0x2c
   1cf68:	str	ip, [sp, #40]	; 0x28
   1cf6c:	str	lr, [sp, #36]	; 0x24
   1cf70:	str	r4, [sp, #32]
   1cf74:	ldr	r0, [fp, #16]
   1cf78:	mvn	r1, #0
   1cf7c:	add	r1, r0, r1
   1cf80:	str	r1, [fp, #16]
   1cf84:	cmp	r0, #0
   1cf88:	movw	r0, #0
   1cf8c:	movgt	r0, #1
   1cf90:	and	r0, r0, #1
   1cf94:	str	r0, [sp, #60]	; 0x3c
   1cf98:	ldr	r0, [sp, #60]	; 0x3c
   1cf9c:	cmp	r0, #0
   1cfa0:	bne	1cfb0 <flatcc_verify_union_vector_field@@Base+0x2fc>
   1cfa4:	movw	r0, #3
   1cfa8:	str	r0, [fp, #-12]
   1cfac:	b	1d220 <flatcc_verify_union_vector_field@@Base+0x56c>
   1cfb0:	b	1cfb4 <flatcc_verify_union_vector_field@@Base+0x300>
   1cfb4:	ldr	r0, [pc, #624]	; 1d22c <flatcc_verify_union_vector_field@@Base+0x578>
   1cfb8:	ldr	r1, [fp, #-16]
   1cfbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cfc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cfc4:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1cfc8:	str	r0, [sp, #28]
   1cfcc:	mov	r0, r1
   1cfd0:	mov	r1, r2
   1cfd4:	mov	r2, r3
   1cfd8:	mov	r3, ip
   1cfdc:	movw	ip, #4
   1cfe0:	str	ip, [sp]
   1cfe4:	movw	ip, #4
   1cfe8:	uxth	ip, ip
   1cfec:	str	ip, [sp, #4]
   1cff0:	ldr	ip, [sp, #28]
   1cff4:	str	ip, [sp, #8]
   1cff8:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1cffc:	cmp	r0, #0
   1d000:	beq	1d054 <flatcc_verify_union_vector_field@@Base+0x3a0>
   1d004:	ldr	r0, [pc, #544]	; 1d22c <flatcc_verify_union_vector_field@@Base+0x578>
   1d008:	ldr	r1, [fp, #-16]
   1d00c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d010:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d014:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1d018:	str	r0, [sp, #24]
   1d01c:	mov	r0, r1
   1d020:	mov	r1, r2
   1d024:	mov	r2, r3
   1d028:	mov	r3, ip
   1d02c:	movw	ip, #4
   1d030:	str	ip, [sp]
   1d034:	movw	ip, #4
   1d038:	uxth	ip, ip
   1d03c:	str	ip, [sp, #4]
   1d040:	ldr	ip, [sp, #24]
   1d044:	str	ip, [sp, #8]
   1d048:	bl	1b3b4 <flatcc_verify_vector_field@@Base+0x114>
   1d04c:	str	r0, [fp, #-12]
   1d050:	b	1d220 <flatcc_verify_union_vector_field@@Base+0x56c>
   1d054:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1d058:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d05c:	add	r0, r1, r0
   1d060:	str	r0, [fp, #-24]	; 0xffffffe8
   1d064:	ldr	r0, [fp, #-16]
   1d068:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d06c:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1d070:	str	r0, [fp, #-36]	; 0xffffffdc
   1d074:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d078:	ldr	r1, [fp, #8]
   1d07c:	cmp	r0, r1
   1d080:	movw	r0, #0
   1d084:	moveq	r0, #1
   1d088:	and	r0, r0, #1
   1d08c:	str	r0, [sp, #56]	; 0x38
   1d090:	ldr	r0, [sp, #56]	; 0x38
   1d094:	cmp	r0, #0
   1d098:	bne	1d0a8 <flatcc_verify_union_vector_field@@Base+0x3f4>
   1d09c:	movw	r0, #34	; 0x22
   1d0a0:	str	r0, [fp, #-12]
   1d0a4:	b	1d220 <flatcc_verify_union_vector_field@@Base+0x56c>
   1d0a8:	b	1d0ac <flatcc_verify_union_vector_field@@Base+0x3f8>
   1d0ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d0b0:	add	r0, r0, #4
   1d0b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1d0b8:	ldr	r0, [fp, #-16]
   1d0bc:	str	r0, [sp, #64]	; 0x40
   1d0c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d0c4:	str	r0, [sp, #68]	; 0x44
   1d0c8:	ldr	r0, [fp, #16]
   1d0cc:	str	r0, [sp, #72]	; 0x48
   1d0d0:	movw	r0, #0
   1d0d4:	str	r0, [fp, #-32]	; 0xffffffe0
   1d0d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d0dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d0e0:	cmp	r0, r1
   1d0e4:	bcs	1d218 <flatcc_verify_union_vector_field@@Base+0x564>
   1d0e8:	ldr	r0, [fp, #-16]
   1d0ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d0f0:	bl	1b274 <flatcc_verify_string_field@@Base+0x330>
   1d0f4:	str	r0, [fp, #-40]	; 0xffffffd8
   1d0f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d0fc:	cmp	r0, #0
   1d100:	bne	1d14c <flatcc_verify_union_vector_field@@Base+0x498>
   1d104:	b	1d108 <flatcc_verify_union_vector_field@@Base+0x454>
   1d108:	ldr	r0, [fp, #12]
   1d10c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d110:	add	r0, r0, r1
   1d114:	ldrb	r0, [r0]
   1d118:	cmp	r0, #0
   1d11c:	movw	r0, #0
   1d120:	moveq	r0, #1
   1d124:	and	r0, r0, #1
   1d128:	str	r0, [sp, #52]	; 0x34
   1d12c:	ldr	r0, [sp, #52]	; 0x34
   1d130:	cmp	r0, #0
   1d134:	bne	1d144 <flatcc_verify_union_vector_field@@Base+0x490>
   1d138:	movw	r0, #32
   1d13c:	str	r0, [fp, #-12]
   1d140:	b	1d220 <flatcc_verify_union_vector_field@@Base+0x56c>
   1d144:	b	1d148 <flatcc_verify_union_vector_field@@Base+0x494>
   1d148:	b	1d1f8 <flatcc_verify_union_vector_field@@Base+0x544>
   1d14c:	b	1d150 <flatcc_verify_union_vector_field@@Base+0x49c>
   1d150:	ldr	r0, [fp, #12]
   1d154:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d158:	add	r0, r0, r1
   1d15c:	ldrb	r0, [r0]
   1d160:	cmp	r0, #0
   1d164:	movw	r0, #0
   1d168:	movne	r0, #1
   1d16c:	and	r0, r0, #1
   1d170:	str	r0, [sp, #48]	; 0x30
   1d174:	ldr	r0, [sp, #48]	; 0x30
   1d178:	cmp	r0, #0
   1d17c:	bne	1d18c <flatcc_verify_union_vector_field@@Base+0x4d8>
   1d180:	movw	r0, #33	; 0x21
   1d184:	str	r0, [fp, #-12]
   1d188:	b	1d220 <flatcc_verify_union_vector_field@@Base+0x56c>
   1d18c:	b	1d190 <flatcc_verify_union_vector_field@@Base+0x4dc>
   1d190:	ldr	r0, [fp, #12]
   1d194:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d198:	add	r0, r0, r1
   1d19c:	ldrb	r0, [r0]
   1d1a0:	strb	r0, [sp, #76]	; 0x4c
   1d1a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d1a8:	str	r0, [sp, #80]	; 0x50
   1d1ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d1b0:	str	r0, [sp, #84]	; 0x54
   1d1b4:	ldr	r0, [fp, #20]
   1d1b8:	add	r1, sp, #64	; 0x40
   1d1bc:	str	r0, [sp, #20]
   1d1c0:	mov	r0, r1
   1d1c4:	ldr	r1, [sp, #20]
   1d1c8:	blx	r1
   1d1cc:	cmp	r0, #0
   1d1d0:	beq	1d1f4 <flatcc_verify_union_vector_field@@Base+0x540>
   1d1d4:	ldr	r0, [fp, #20]
   1d1d8:	add	r1, sp, #64	; 0x40
   1d1dc:	str	r0, [sp, #16]
   1d1e0:	mov	r0, r1
   1d1e4:	ldr	r1, [sp, #16]
   1d1e8:	blx	r1
   1d1ec:	str	r0, [fp, #-12]
   1d1f0:	b	1d220 <flatcc_verify_union_vector_field@@Base+0x56c>
   1d1f4:	b	1d1f8 <flatcc_verify_union_vector_field@@Base+0x544>
   1d1f8:	b	1d1fc <flatcc_verify_union_vector_field@@Base+0x548>
   1d1fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d200:	add	r0, r0, #1
   1d204:	str	r0, [fp, #-32]	; 0xffffffe0
   1d208:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d20c:	add	r0, r0, #4
   1d210:	str	r0, [fp, #-24]	; 0xffffffe8
   1d214:	b	1d0d8 <flatcc_verify_union_vector_field@@Base+0x424>
   1d218:	movw	r0, #0
   1d21c:	str	r0, [fp, #-12]
   1d220:	ldr	r0, [fp, #-12]
   1d224:	sub	sp, fp, #8
   1d228:	pop	{r4, r5, fp, pc}
   1d22c:	svccc	0x00ffffff
   1d230:	sub	sp, sp, #20
   1d234:	str	r0, [sp, #16]
   1d238:	str	r1, [sp, #12]
   1d23c:	str	r2, [sp, #8]
   1d240:	ldr	r0, [sp, #12]
   1d244:	ldr	r1, [sp, #8]
   1d248:	add	r0, r0, r1
   1d24c:	str	r0, [sp, #4]
   1d250:	ldr	r0, [sp, #4]
   1d254:	ldr	r1, [sp, #12]
   1d258:	cmp	r0, r1
   1d25c:	movw	r0, #0
   1d260:	str	r0, [sp]
   1d264:	bls	1d2a4 <flatcc_verify_union_vector_field@@Base+0x5f0>
   1d268:	ldr	r0, [sp, #4]
   1d26c:	add	r0, r0, #4
   1d270:	ldr	r1, [sp, #16]
   1d274:	cmp	r0, r1
   1d278:	movw	r0, #0
   1d27c:	str	r0, [sp]
   1d280:	bhi	1d2a4 <flatcc_verify_union_vector_field@@Base+0x5f0>
   1d284:	ldr	r0, [sp, #4]
   1d288:	and	r0, r0, #3
   1d28c:	cmp	r0, #0
   1d290:	movw	r0, #0
   1d294:	movne	r0, #1
   1d298:	mvn	r1, #0
   1d29c:	eor	r0, r0, r1
   1d2a0:	str	r0, [sp]
   1d2a4:	ldr	r0, [sp]
   1d2a8:	and	r0, r0, #1
   1d2ac:	add	sp, sp, #20
   1d2b0:	bx	lr
   1d2b4:	push	{fp, lr}
   1d2b8:	mov	fp, sp
   1d2bc:	sub	sp, sp, #8
   1d2c0:	str	r0, [sp, #4]
   1d2c4:	ldr	r0, [sp, #4]
   1d2c8:	ldr	r0, [r0]
   1d2cc:	bl	1d2d8 <flatcc_verify_union_vector_field@@Base+0x624>
   1d2d0:	mov	sp, fp
   1d2d4:	pop	{fp, pc}
   1d2d8:	sub	sp, sp, #4
   1d2dc:	str	r0, [sp]
   1d2e0:	ldr	r0, [sp]
   1d2e4:	add	sp, sp, #4
   1d2e8:	bx	lr
   1d2ec:	sub	sp, sp, #28
   1d2f0:	str	r0, [sp, #24]
   1d2f4:	str	r1, [sp, #20]
   1d2f8:	str	r2, [sp, #16]
   1d2fc:	strh	r3, [sp, #14]
   1d300:	ldr	r0, [sp, #20]
   1d304:	ldr	r1, [sp, #16]
   1d308:	add	r0, r0, r1
   1d30c:	str	r0, [sp, #8]
   1d310:	ldrh	r0, [sp, #14]
   1d314:	cmp	r0, #4
   1d318:	bcs	1d328 <flatcc_verify_union_vector_field@@Base+0x674>
   1d31c:	movw	r0, #4
   1d320:	str	r0, [sp, #4]
   1d324:	b	1d330 <flatcc_verify_union_vector_field@@Base+0x67c>
   1d328:	ldrh	r0, [sp, #14]
   1d32c:	str	r0, [sp, #4]
   1d330:	ldr	r0, [sp, #4]
   1d334:	strh	r0, [sp, #14]
   1d338:	ldr	r0, [sp, #8]
   1d33c:	ldr	r1, [sp, #20]
   1d340:	cmp	r0, r1
   1d344:	movw	r0, #0
   1d348:	str	r0, [sp]
   1d34c:	bls	1d39c <flatcc_verify_union_vector_field@@Base+0x6e8>
   1d350:	ldr	r0, [sp, #8]
   1d354:	add	r0, r0, #4
   1d358:	ldr	r1, [sp, #24]
   1d35c:	cmp	r0, r1
   1d360:	movw	r0, #0
   1d364:	str	r0, [sp]
   1d368:	bhi	1d39c <flatcc_verify_union_vector_field@@Base+0x6e8>
   1d36c:	ldr	r0, [sp, #8]
   1d370:	add	r0, r0, #4
   1d374:	ldrh	r1, [sp, #14]
   1d378:	sub	r1, r1, #1
   1d37c:	orr	r1, r1, #3
   1d380:	and	r0, r0, r1
   1d384:	cmp	r0, #0
   1d388:	movw	r0, #0
   1d38c:	movne	r0, #1
   1d390:	mvn	r1, #0
   1d394:	eor	r0, r0, r1
   1d398:	str	r0, [sp]
   1d39c:	ldr	r0, [sp]
   1d3a0:	and	r0, r0, #1
   1d3a4:	add	sp, sp, #28
   1d3a8:	bx	lr
   1d3ac:	push	{fp, lr}
   1d3b0:	mov	fp, sp
   1d3b4:	sub	sp, sp, #8
   1d3b8:	str	r0, [sp, #4]
   1d3bc:	str	r1, [sp]
   1d3c0:	ldr	r0, [sp, #4]
   1d3c4:	ldr	r1, [sp]
   1d3c8:	add	r0, r0, r1
   1d3cc:	bl	1d3dc <flatcc_verify_union_vector_field@@Base+0x728>
   1d3d0:	uxth	r0, r0
   1d3d4:	mov	sp, fp
   1d3d8:	pop	{fp, pc}
   1d3dc:	push	{fp, lr}
   1d3e0:	mov	fp, sp
   1d3e4:	sub	sp, sp, #8
   1d3e8:	str	r0, [sp, #4]
   1d3ec:	ldr	r0, [sp, #4]
   1d3f0:	ldrh	r0, [r0]
   1d3f4:	bl	1d404 <flatcc_verify_union_vector_field@@Base+0x750>
   1d3f8:	uxth	r0, r0
   1d3fc:	mov	sp, fp
   1d400:	pop	{fp, pc}
   1d404:	sub	sp, sp, #4
   1d408:	strh	r0, [sp, #2]
   1d40c:	ldrh	r0, [sp, #2]
   1d410:	add	sp, sp, #4
   1d414:	bx	lr
   1d418:	sub	sp, sp, #4
   1d41c:	str	r0, [sp]
   1d420:	ldr	r0, [sp]
   1d424:	add	sp, sp, #4
   1d428:	bx	lr
   1d42c:	push	{fp, lr}
   1d430:	mov	fp, sp
   1d434:	sub	sp, sp, #8
   1d438:	str	r0, [sp, #4]
   1d43c:	ldr	r0, [sp, #4]
   1d440:	ldr	r0, [r0]
   1d444:	bl	1d450 <flatcc_verify_union_vector_field@@Base+0x79c>
   1d448:	mov	sp, fp
   1d44c:	pop	{fp, pc}
   1d450:	sub	sp, sp, #4
   1d454:	str	r0, [sp]
   1d458:	ldr	r0, [sp]
   1d45c:	add	sp, sp, #4
   1d460:	bx	lr

0001d464 <__libc_csu_init@@Base>:
   1d464:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d468:	mov	r7, r0
   1d46c:	ldr	r6, [pc, #72]	; 1d4bc <__libc_csu_init@@Base+0x58>
   1d470:	ldr	r5, [pc, #72]	; 1d4c0 <__libc_csu_init@@Base+0x5c>
   1d474:	add	r6, pc, r6
   1d478:	add	r5, pc, r5
   1d47c:	sub	r6, r6, r5
   1d480:	mov	r8, r1
   1d484:	mov	r9, r2
   1d488:	bl	126ec <free@plt-0x20>
   1d48c:	asrs	r6, r6, #2
   1d490:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d494:	mov	r4, #0
   1d498:	add	r4, r4, #1
   1d49c:	ldr	r3, [r5], #4
   1d4a0:	mov	r2, r9
   1d4a4:	mov	r1, r8
   1d4a8:	mov	r0, r7
   1d4ac:	blx	r3
   1d4b0:	cmp	r6, r4
   1d4b4:	bne	1d498 <__libc_csu_init@@Base+0x34>
   1d4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d4bc:	muleq	r1, r0, sl
   1d4c0:	andeq	r2, r1, r8, lsl #21

0001d4c4 <__libc_csu_fini@@Base>:
   1d4c4:	bx	lr

Disassembly of section .fini:

0001d4c8 <.fini>:
   1d4c8:	push	{r3, lr}
   1d4cc:	pop	{r3, pc}
