
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010ec4 <.init>:
   10ec4:	push	{r3, lr}
   10ec8:	bl	11dc4 <__assert_fail@plt+0xbe0>
   10ecc:	pop	{r3, pc}

Disassembly of section .plt:

00010ed0 <fstatfs64@plt-0x14>:
   10ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ed4:	ldr	lr, [pc, #4]	; 10ee0 <fstatfs64@plt-0x4>
   10ed8:	add	lr, pc, lr
   10edc:	ldr	pc, [lr, #8]!
   10ee0:	andeq	r8, r1, r0, lsr #2

00010ee4 <fstatfs64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #288]!	; 0x120

00010ef0 <calloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #280]!	; 0x118

00010efc <fputs_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #272]!	; 0x110

00010f08 <raise@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #264]!	; 0x108

00010f14 <strcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #256]!	; 0x100

00010f20 <fflush@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #248]!	; 0xf8

00010f2c <memmove@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #240]!	; 0xf0

00010f38 <free@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #232]!	; 0xe8

00010f44 <_exit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #224]!	; 0xe0

00010f50 <memcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #216]!	; 0xd8

00010f5c <mbsinit@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #208]!	; 0xd0

00010f68 <memcmp@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #200]!	; 0xc8

00010f74 <fputc_unlocked@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #192]!	; 0xc0

00010f80 <dcgettext@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #184]!	; 0xb8

00010f8c <realloc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #176]!	; 0xb0

00010f98 <textdomain@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #168]!	; 0xa8

00010fa4 <__fxstatat64@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #160]!	; 0xa0

00010fb0 <iswprint@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #152]!	; 0x98

00010fbc <__fxstat64@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #144]!	; 0x90

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #136]!	; 0x88

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #128]!	; 0x80

00010fe0 <__fpending@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #120]!	; 0x78

00010fec <ferror_unlocked@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #112]!	; 0x70

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #104]!	; 0x68

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #96]!	; 0x60

00011010 <open64@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #88]!	; 0x58

0001101c <malloc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #80]!	; 0x50

00011028 <__libc_start_main@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #72]!	; 0x48

00011034 <__freading@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #64]!	; 0x40

00011040 <__gmon_start__@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #56]!	; 0x38

0001104c <getopt_long@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #48]!	; 0x30

00011058 <__ctype_b_loc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #40]!	; 0x28

00011064 <exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #32]!

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #24]!

0001107c <openat64@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #16]!

00011088 <fchmodat@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #8]!

00011094 <__errno_location@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #0]!

000110a0 <__sprintf_chk@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4080]!	; 0xff0

000110b8 <memset@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110c4 <__printf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d0 <fileno@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110dc <__fprintf_chk@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110e8 <fclose@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110f4 <fseeko64@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4032]!	; 0xfc0

00011100 <fcntl64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4024]!	; 0xfb8

0001110c <setlocale@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4016]!	; 0xfb0

00011118 <strrchr@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #4008]!	; 0xfa8

00011124 <nl_langinfo@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011130 <readdir64@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3992]!	; 0xf98

0001113c <fdopendir@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3984]!	; 0xf90

00011148 <dirfd@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3976]!	; 0xf88

00011154 <fchdir@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3968]!	; 0xf80

00011160 <qsort@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3960]!	; 0xf78

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3952]!	; 0xf70

00011178 <umask@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3944]!	; 0xf68

00011184 <chmod@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3936]!	; 0xf60

00011190 <__xstat64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3928]!	; 0xf58

0001119c <fputs@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3920]!	; 0xf50

000111a8 <strncmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3912]!	; 0xf48

000111b4 <abort@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3904]!	; 0xf40

000111c0 <close@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3896]!	; 0xf38

000111cc <__lxstat64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3888]!	; 0xf30

000111d8 <closedir@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3880]!	; 0xf28

000111e4 <__assert_fail@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3872]!	; 0xf20

Disassembly of section .text:

000111f0 <.text>:
   111f0:	push	{r4, lr}
   111f4:	bl	11094 <__errno_location@plt>
   111f8:	mov	r3, #12
   111fc:	str	r3, [r0]
   11200:	mov	r0, #0
   11204:	pop	{r4, pc}
   11208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1120c:	mov	r5, #0
   11210:	sub	sp, sp, #156	; 0x9c
   11214:	mov	r9, r0
   11218:	mov	r7, r1
   1121c:	mov	r8, r5
   11220:	mov	sl, r5
   11224:	ldr	r4, [pc, #2744]	; 11ce4 <__assert_fail@plt+0xb00>
   11228:	mov	r6, r5
   1122c:	str	r5, [sp, #32]
   11230:	ldr	r0, [r1]
   11234:	bl	15450 <__assert_fail@plt+0x426c>
   11238:	ldr	r1, [pc, #2728]	; 11ce8 <__assert_fail@plt+0xb04>
   1123c:	mov	r0, #6
   11240:	bl	1110c <setlocale@plt>
   11244:	ldr	r1, [pc, #2720]	; 11cec <__assert_fail@plt+0xb08>
   11248:	ldr	r0, [pc, #2720]	; 11cf0 <__assert_fail@plt+0xb0c>
   1124c:	bl	1116c <bindtextdomain@plt>
   11250:	ldr	r0, [pc, #2712]	; 11cf0 <__assert_fail@plt+0xb0c>
   11254:	bl	10f98 <textdomain@plt>
   11258:	ldr	r0, [pc, #2708]	; 11cf4 <__assert_fail@plt+0xb10>
   1125c:	bl	17cb8 <__assert_fail@plt+0x6ad4>
   11260:	strb	r5, [r4]
   11264:	strb	r5, [r4, #1]
   11268:	strb	r5, [r4, #2]
   1126c:	mov	fp, #0
   11270:	ldr	r3, [pc, #2688]	; 11cf8 <__assert_fail@plt+0xb14>
   11274:	mov	r1, r7
   11278:	mov	r0, r9
   1127c:	ldr	r2, [pc, #2680]	; 11cfc <__assert_fail@plt+0xb18>
   11280:	str	fp, [sp]
   11284:	bl	1104c <getopt_long@plt>
   11288:	cmn	r0, #1
   1128c:	bne	112f4 <__assert_fail@plt+0x110>
   11290:	cmp	r5, fp
   11294:	ldr	sl, [pc, #2660]	; 11d00 <__assert_fail@plt+0xb1c>
   11298:	beq	114cc <__assert_fail@plt+0x2e8>
   1129c:	cmp	r6, fp
   112a0:	movne	r2, #5
   112a4:	ldrne	r1, [pc, #2648]	; 11d04 <__assert_fail@plt+0xb20>
   112a8:	bne	112d8 <__assert_fail@plt+0xf4>
   112ac:	ldr	r3, [sl]
   112b0:	cmp	r3, r9
   112b4:	blt	11518 <__assert_fail@plt+0x334>
   112b8:	cmp	r6, #0
   112bc:	mov	r2, #5
   112c0:	beq	112d4 <__assert_fail@plt+0xf0>
   112c4:	sub	r3, r3, #-1073741823	; 0xc0000001
   112c8:	ldr	r3, [r7, r3, lsl #2]
   112cc:	cmp	r3, r6
   112d0:	beq	114e4 <__assert_fail@plt+0x300>
   112d4:	ldr	r1, [pc, #2604]	; 11d08 <__assert_fail@plt+0xb24>
   112d8:	mov	r0, #0
   112dc:	bl	10f80 <dcgettext@plt>
   112e0:	mov	r1, #0
   112e4:	mov	r2, r0
   112e8:	mov	r0, r1
   112ec:	bl	11004 <error@plt>
   112f0:	b	11324 <__assert_fail@plt+0x140>
   112f4:	cmp	r0, #99	; 0x63
   112f8:	beq	11464 <__assert_fail@plt+0x280>
   112fc:	bgt	113ec <__assert_fail@plt+0x208>
   11300:	cmp	r0, #55	; 0x37
   11304:	bgt	113bc <__assert_fail@plt+0x1d8>
   11308:	cmp	r0, #48	; 0x30
   1130c:	bge	11338 <__assert_fail@plt+0x154>
   11310:	cmn	r0, #2
   11314:	beq	11480 <__assert_fail@plt+0x29c>
   11318:	bgt	1132c <__assert_fail@plt+0x148>
   1131c:	cmn	r0, #3
   11320:	beq	11488 <__assert_fail@plt+0x2a4>
   11324:	mov	r0, #1
   11328:	b	11484 <__assert_fail@plt+0x2a0>
   1132c:	sub	r0, r0, #43	; 0x2b
   11330:	cmp	r0, #1
   11334:	bhi	11324 <__assert_fail@plt+0x140>
   11338:	ldr	r3, [pc, #2496]	; 11d00 <__assert_fail@plt+0xb1c>
   1133c:	ldr	r3, [r3]
   11340:	sub	r3, r3, #-1073741823	; 0xc0000001
   11344:	ldr	r3, [r7, r3, lsl #2]
   11348:	mov	r0, r3
   1134c:	str	r3, [sp, #20]
   11350:	bl	11070 <strlen@plt>
   11354:	ldr	r1, [sp, #32]
   11358:	cmp	sl, #0
   1135c:	moveq	r3, sl
   11360:	addne	r3, sl, #1
   11364:	mov	r2, r0
   11368:	add	fp, r0, r3
   1136c:	cmp	r1, fp
   11370:	bhi	11394 <__assert_fail@plt+0x1b0>
   11374:	add	r1, fp, #1
   11378:	mov	r0, r6
   1137c:	strd	r2, [sp, #24]
   11380:	str	r1, [sp, #32]
   11384:	add	r1, sp, #32
   11388:	bl	17110 <__assert_fail@plt+0x5f2c>
   1138c:	ldrd	r2, [sp, #24]
   11390:	mov	r6, r0
   11394:	mov	r1, #44	; 0x2c
   11398:	add	r2, r2, #1
   1139c:	add	r0, r6, r3
   113a0:	strb	r1, [r6, sl]
   113a4:	mov	sl, fp
   113a8:	ldr	r1, [sp, #20]
   113ac:	bl	10f50 <memcpy@plt>
   113b0:	mov	r2, #1
   113b4:	strb	r2, [r4]
   113b8:	b	1126c <__assert_fail@plt+0x88>
   113bc:	cmp	r0, #82	; 0x52
   113c0:	moveq	r3, #1
   113c4:	strbeq	r3, [r4, #2]
   113c8:	beq	1126c <__assert_fail@plt+0x88>
   113cc:	bgt	113dc <__assert_fail@plt+0x1f8>
   113d0:	cmp	r0, #61	; 0x3d
   113d4:	bne	11324 <__assert_fail@plt+0x140>
   113d8:	b	11338 <__assert_fail@plt+0x154>
   113dc:	cmp	r0, #88	; 0x58
   113e0:	beq	11338 <__assert_fail@plt+0x154>
   113e4:	cmp	r0, #97	; 0x61
   113e8:	b	113d4 <__assert_fail@plt+0x1f0>
   113ec:	cmp	r0, #118	; 0x76
   113f0:	beq	11474 <__assert_fail@plt+0x290>
   113f4:	bgt	11428 <__assert_fail@plt+0x244>
   113f8:	cmp	r0, #111	; 0x6f
   113fc:	beq	11338 <__assert_fail@plt+0x154>
   11400:	bgt	1141c <__assert_fail@plt+0x238>
   11404:	cmp	r0, #102	; 0x66
   11408:	moveq	r3, #1
   1140c:	strbeq	r3, [r4, #1]
   11410:	beq	1126c <__assert_fail@plt+0x88>
   11414:	cmp	r0, #103	; 0x67
   11418:	b	113d4 <__assert_fail@plt+0x1f0>
   1141c:	cmp	r0, #114	; 0x72
   11420:	blt	11324 <__assert_fail@plt+0x140>
   11424:	b	11338 <__assert_fail@plt+0x154>
   11428:	cmp	r0, #256	; 0x100
   1142c:	beq	114bc <__assert_fail@plt+0x2d8>
   11430:	bgt	11440 <__assert_fail@plt+0x25c>
   11434:	cmp	r0, #120	; 0x78
   11438:	bgt	11324 <__assert_fail@plt+0x140>
   1143c:	b	11338 <__assert_fail@plt+0x154>
   11440:	movw	r3, #257	; 0x101
   11444:	cmp	r0, r3
   11448:	beq	114c4 <__assert_fail@plt+0x2e0>
   1144c:	movw	r3, #258	; 0x102
   11450:	cmp	r0, r3
   11454:	bne	11324 <__assert_fail@plt+0x140>
   11458:	ldr	r3, [pc, #2220]	; 11d0c <__assert_fail@plt+0xb28>
   1145c:	ldr	r5, [r3]
   11460:	b	1126c <__assert_fail@plt+0x88>
   11464:	ldr	r2, [pc, #2212]	; 11d10 <__assert_fail@plt+0xb2c>
   11468:	mov	r3, #1
   1146c:	str	r3, [r2]
   11470:	b	1126c <__assert_fail@plt+0x88>
   11474:	ldr	r3, [pc, #2196]	; 11d10 <__assert_fail@plt+0xb2c>
   11478:	str	fp, [r3]
   1147c:	b	1126c <__assert_fail@plt+0x88>
   11480:	mov	r0, fp
   11484:	bl	11e78 <__assert_fail@plt+0xc94>
   11488:	ldr	r3, [pc, #2180]	; 11d14 <__assert_fail@plt+0xb30>
   1148c:	ldr	r0, [pc, #2180]	; 11d18 <__assert_fail@plt+0xb34>
   11490:	ldr	r2, [pc, #2180]	; 11d1c <__assert_fail@plt+0xb38>
   11494:	stmib	sp, {r3, fp}
   11498:	ldr	r3, [pc, #2176]	; 11d20 <__assert_fail@plt+0xb3c>
   1149c:	ldr	r1, [pc, #2176]	; 11d24 <__assert_fail@plt+0xb40>
   114a0:	str	r3, [sp]
   114a4:	ldr	r3, [pc, #2172]	; 11d28 <__assert_fail@plt+0xb44>
   114a8:	ldr	r0, [r0]
   114ac:	ldr	r3, [r3]
   114b0:	bl	16f18 <__assert_fail@plt+0x5d34>
   114b4:	mov	r0, fp
   114b8:	bl	11064 <exit@plt>
   114bc:	mov	r8, fp
   114c0:	b	1126c <__assert_fail@plt+0x88>
   114c4:	mov	r8, #1
   114c8:	b	1126c <__assert_fail@plt+0x88>
   114cc:	cmp	r6, #0
   114d0:	ldreq	r3, [sl]
   114d4:	addeq	r2, r3, #1
   114d8:	ldreq	r6, [r7, r3, lsl #2]
   114dc:	streq	r2, [sl]
   114e0:	b	112ac <__assert_fail@plt+0xc8>
   114e4:	ldr	r1, [pc, #2112]	; 11d2c <__assert_fail@plt+0xb48>
   114e8:	mov	r0, #0
   114ec:	sub	r9, r9, #-1073741823	; 0xc0000001
   114f0:	bl	10f80 <dcgettext@plt>
   114f4:	mov	r4, r0
   114f8:	ldr	r0, [r7, r9, lsl #2]
   114fc:	bl	16a50 <__assert_fail@plt+0x586c>
   11500:	mov	r1, #0
   11504:	mov	r3, r0
   11508:	mov	r2, r4
   1150c:	mov	r0, r1
   11510:	bl	11004 <error@plt>
   11514:	b	11324 <__assert_fail@plt+0x140>
   11518:	cmp	r5, #0
   1151c:	beq	11574 <__assert_fail@plt+0x390>
   11520:	mov	r0, r5
   11524:	bl	15278 <__assert_fail@plt+0x4094>
   11528:	cmp	r0, #0
   1152c:	mov	r6, r0
   11530:	str	r0, [r4, #4]
   11534:	bne	115ac <__assert_fail@plt+0x3c8>
   11538:	bl	11094 <__errno_location@plt>
   1153c:	mov	r2, #5
   11540:	ldr	r1, [pc, #2024]	; 11d30 <__assert_fail@plt+0xb4c>
   11544:	ldr	r4, [r0]
   11548:	mov	r0, r6
   1154c:	bl	10f80 <dcgettext@plt>
   11550:	mov	r6, r0
   11554:	mov	r1, r5
   11558:	mov	r0, #4
   1155c:	bl	1686c <__assert_fail@plt+0x5688>
   11560:	mov	r3, r0
   11564:	mov	r2, r6
   11568:	mov	r1, r4
   1156c:	mov	r0, #1
   11570:	bl	11004 <error@plt>
   11574:	mov	r0, r6
   11578:	bl	14f84 <__assert_fail@plt+0x3da0>
   1157c:	cmp	r0, #0
   11580:	str	r0, [r4, #4]
   11584:	bne	115a0 <__assert_fail@plt+0x3bc>
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #1952]	; 11d34 <__assert_fail@plt+0xb50>
   11590:	bl	10f80 <dcgettext@plt>
   11594:	mov	r4, r0
   11598:	mov	r0, r6
   1159c:	b	114fc <__assert_fail@plt+0x318>
   115a0:	mov	r0, r5
   115a4:	bl	11178 <umask@plt>
   115a8:	str	r0, [r4, #8]
   115ac:	ldrb	r3, [r4, #2]
   115b0:	ands	r8, r8, r3
   115b4:	streq	r8, [r4, #32]
   115b8:	beq	11608 <__assert_fail@plt+0x424>
   115bc:	ldr	r0, [pc, #1908]	; 11d38 <__assert_fail@plt+0xb54>
   115c0:	bl	16a5c <__assert_fail@plt+0x5878>
   115c4:	cmp	r0, #0
   115c8:	mov	r5, r0
   115cc:	str	r0, [r4, #32]
   115d0:	bne	11608 <__assert_fail@plt+0x424>
   115d4:	bl	11094 <__errno_location@plt>
   115d8:	mov	r2, #5
   115dc:	ldr	r1, [pc, #1868]	; 11d30 <__assert_fail@plt+0xb4c>
   115e0:	ldr	r4, [r0]
   115e4:	mov	r0, r5
   115e8:	bl	10f80 <dcgettext@plt>
   115ec:	mov	r5, r0
   115f0:	ldr	r1, [pc, #1860]	; 11d3c <__assert_fail@plt+0xb58>
   115f4:	mov	r0, #4
   115f8:	bl	1686c <__assert_fail@plt+0x5688>
   115fc:	mov	r3, r0
   11600:	mov	r2, r5
   11604:	b	11568 <__assert_fail@plt+0x384>
   11608:	ldr	r0, [sl]
   1160c:	mov	r2, #0
   11610:	movw	r1, #1041	; 0x411
   11614:	mov	fp, #1
   11618:	add	r0, r7, r0, lsl #2
   1161c:	bl	172d8 <__assert_fail@plt+0x60f4>
   11620:	str	r0, [sp, #20]
   11624:	ldr	r0, [sp, #20]
   11628:	bl	13a4c <__assert_fail@plt+0x2868>
   1162c:	subs	r6, r0, #0
   11630:	bne	116b8 <__assert_fail@plt+0x4d4>
   11634:	bl	11094 <__errno_location@plt>
   11638:	ldr	r7, [r0]
   1163c:	mov	r5, r0
   11640:	cmp	r7, #0
   11644:	beq	11678 <__assert_fail@plt+0x494>
   11648:	ldrb	fp, [r4, #1]
   1164c:	cmp	fp, #0
   11650:	movne	fp, r6
   11654:	bne	11678 <__assert_fail@plt+0x494>
   11658:	mov	r2, #5
   1165c:	ldr	r1, [pc, #1756]	; 11d40 <__assert_fail@plt+0xb5c>
   11660:	mov	r0, fp
   11664:	bl	10f80 <dcgettext@plt>
   11668:	mov	r2, r0
   1166c:	mov	r1, r7
   11670:	mov	r0, fp
   11674:	bl	11004 <error@plt>
   11678:	ldr	r0, [sp, #20]
   1167c:	bl	13934 <__assert_fail@plt+0x2750>
   11680:	cmp	r0, #0
   11684:	beq	116b0 <__assert_fail@plt+0x4cc>
   11688:	ldr	r4, [r5]
   1168c:	mov	r2, #5
   11690:	mov	r0, #0
   11694:	mov	fp, #0
   11698:	ldr	r1, [pc, #1700]	; 11d44 <__assert_fail@plt+0xb60>
   1169c:	bl	10f80 <dcgettext@plt>
   116a0:	mov	r2, r0
   116a4:	mov	r0, #0
   116a8:	mov	r1, r4
   116ac:	bl	11004 <error@plt>
   116b0:	eor	r0, fp, #1
   116b4:	b	114b8 <__assert_fail@plt+0x2d4>
   116b8:	ldrh	r3, [r6, #56]	; 0x38
   116bc:	ldr	sl, [r6, #24]
   116c0:	ldr	r7, [r6, #28]
   116c4:	sub	r3, r3, #2
   116c8:	cmp	r3, #11
   116cc:	ldrls	pc, [pc, r3, lsl #2]
   116d0:	b	11864 <__assert_fail@plt+0x680>
   116d4:	andeq	r1, r1, r0, lsl r8
   116d8:	andeq	r1, r1, r4, ror #16
   116dc:			; <UNDEFINED> instruction: 0x000117b8
   116e0:	andeq	r1, r1, r4, ror #16
   116e4:	ldrdeq	r1, [r1], -ip
   116e8:	andeq	r1, r1, r8, ror r7
   116ec:	andeq	r1, r1, r4, ror #16
   116f0:	andeq	r1, r1, r4, ror #16
   116f4:	andeq	r1, r1, r4, lsl #14
   116f8:	andeq	r1, r1, r4, ror #16
   116fc:	andeq	r1, r1, r4, ror #16
   11700:	ldrdeq	r1, [r1], -r4
   11704:	ldr	r3, [r6, #48]	; 0x30
   11708:	cmp	r3, #0
   1170c:	bne	1173c <__assert_fail@plt+0x558>
   11710:	ldr	r3, [r6, #16]
   11714:	cmp	r3, #0
   11718:	bne	1173c <__assert_fail@plt+0x558>
   1171c:	mov	r8, #1
   11720:	mov	r1, r6
   11724:	ldr	r0, [sp, #20]
   11728:	mov	r2, r8
   1172c:	str	r8, [r6, #16]
   11730:	bl	14010 <__assert_fail@plt+0x2e2c>
   11734:	and	fp, fp, r8
   11738:	b	11624 <__assert_fail@plt+0x440>
   1173c:	ldrb	r5, [r4, #1]
   11740:	cmp	r5, #0
   11744:	bne	11ad8 <__assert_fail@plt+0x8f4>
   11748:	ldr	r1, [pc, #1528]	; 11d48 <__assert_fail@plt+0xb64>
   1174c:	mov	r2, #5
   11750:	ldr	r8, [r6, #32]
   11754:	mov	r0, r5
   11758:	bl	10f80 <dcgettext@plt>
   1175c:	mov	r9, r0
   11760:	mov	r1, r7
   11764:	mov	r0, #4
   11768:	bl	1686c <__assert_fail@plt+0x5688>
   1176c:	mov	r3, r0
   11770:	mov	r2, r9
   11774:	b	117a0 <__assert_fail@plt+0x5bc>
   11778:	ldrb	r5, [r4, #1]
   1177c:	cmp	r5, #0
   11780:	bne	11ad8 <__assert_fail@plt+0x8f4>
   11784:	mov	r2, r7
   11788:	mov	r1, #3
   1178c:	ldr	r8, [r6, #32]
   11790:	mov	r0, r5
   11794:	bl	16910 <__assert_fail@plt+0x572c>
   11798:	ldr	r2, [pc, #1452]	; 11d4c <__assert_fail@plt+0xb68>
   1179c:	mov	r3, r0
   117a0:	mov	r1, r8
   117a4:	mov	r0, r5
   117a8:	bl	11004 <error@plt>
   117ac:	mov	r9, r5
   117b0:	mov	r8, r5
   117b4:	b	11a20 <__assert_fail@plt+0x83c>
   117b8:	ldrb	r5, [r4, #1]
   117bc:	cmp	r5, #0
   117c0:	bne	11ad8 <__assert_fail@plt+0x8f4>
   117c4:	mov	r2, #5
   117c8:	ldr	r1, [pc, #1408]	; 11d50 <__assert_fail@plt+0xb6c>
   117cc:	ldr	r8, [r6, #32]
   117d0:	b	11754 <__assert_fail@plt+0x570>
   117d4:	ldrb	r5, [r4, #1]
   117d8:	cmp	r5, #0
   117dc:	bne	11ad8 <__assert_fail@plt+0x8f4>
   117e0:	mov	r2, #5
   117e4:	ldr	r1, [pc, #1384]	; 11d54 <__assert_fail@plt+0xb70>
   117e8:	mov	r0, r5
   117ec:	bl	10f80 <dcgettext@plt>
   117f0:	mov	r8, r0
   117f4:	mov	r1, r7
   117f8:	mov	r0, #4
   117fc:	bl	1686c <__assert_fail@plt+0x5688>
   11800:	mov	r3, r0
   11804:	mov	r2, r8
   11808:	mov	r1, r5
   1180c:	b	117a4 <__assert_fail@plt+0x5c0>
   11810:	mov	r1, r6
   11814:	ldr	r0, [sp, #20]
   11818:	bl	17320 <__assert_fail@plt+0x613c>
   1181c:	cmp	r0, #0
   11820:	beq	11864 <__assert_fail@plt+0x680>
   11824:	mov	r2, #5
   11828:	ldr	r1, [pc, #1320]	; 11d58 <__assert_fail@plt+0xb74>
   1182c:	mov	r0, #0
   11830:	bl	10f80 <dcgettext@plt>
   11834:	mov	r5, r0
   11838:	mov	r2, r7
   1183c:	mov	r1, #3
   11840:	mov	r0, #0
   11844:	bl	16910 <__assert_fail@plt+0x572c>
   11848:	mov	r1, #0
   1184c:	mov	r3, r0
   11850:	mov	r2, r5
   11854:	mov	r0, r1
   11858:	bl	11004 <error@plt>
   1185c:	mov	r8, #0
   11860:	b	11734 <__assert_fail@plt+0x550>
   11864:	ldr	ip, [r4, #32]
   11868:	cmp	ip, #0
   1186c:	beq	11968 <__assert_fail@plt+0x784>
   11870:	ldrd	r2, [ip]
   11874:	ldrd	r0, [r6, #160]	; 0xa0
   11878:	cmp	r1, r3
   1187c:	cmpeq	r0, r2
   11880:	bne	11968 <__assert_fail@plt+0x784>
   11884:	ldrd	r0, [ip, #8]
   11888:	ldrd	r2, [r6, #64]	; 0x40
   1188c:	cmp	r3, r1
   11890:	cmpeq	r2, r0
   11894:	bne	11968 <__assert_fail@plt+0x784>
   11898:	ldr	r1, [pc, #1180]	; 11d3c <__assert_fail@plt+0xb58>
   1189c:	mov	r0, r7
   118a0:	bl	10f14 <strcmp@plt>
   118a4:	subs	r5, r0, #0
   118a8:	mov	r2, #5
   118ac:	bne	11918 <__assert_fail@plt+0x734>
   118b0:	ldr	r1, [pc, #1188]	; 11d5c <__assert_fail@plt+0xb78>
   118b4:	bl	10f80 <dcgettext@plt>
   118b8:	mov	r8, r0
   118bc:	mov	r1, r7
   118c0:	mov	r0, #4
   118c4:	bl	1686c <__assert_fail@plt+0x5688>
   118c8:	mov	r3, r0
   118cc:	mov	r2, r8
   118d0:	mov	r1, r5
   118d4:	mov	r0, r5
   118d8:	bl	11004 <error@plt>
   118dc:	mov	r2, #5
   118e0:	ldr	r1, [pc, #1144]	; 11d60 <__assert_fail@plt+0xb7c>
   118e4:	mov	r0, #0
   118e8:	bl	10f80 <dcgettext@plt>
   118ec:	mov	r1, #0
   118f0:	mov	r2, r0
   118f4:	mov	r0, r1
   118f8:	bl	11004 <error@plt>
   118fc:	mov	r2, #4
   11900:	mov	r1, r6
   11904:	ldr	r0, [sp, #20]
   11908:	bl	14010 <__assert_fail@plt+0x2e2c>
   1190c:	ldr	r0, [sp, #20]
   11910:	bl	13a4c <__assert_fail@plt+0x2868>
   11914:	b	1185c <__assert_fail@plt+0x678>
   11918:	ldr	r1, [pc, #1092]	; 11d64 <__assert_fail@plt+0xb80>
   1191c:	mov	r0, #0
   11920:	bl	10f80 <dcgettext@plt>
   11924:	mov	r5, r0
   11928:	mov	r2, r7
   1192c:	mov	r1, #4
   11930:	mov	r0, #0
   11934:	bl	16800 <__assert_fail@plt+0x561c>
   11938:	mov	r7, r0
   1193c:	ldr	r2, [pc, #1016]	; 11d3c <__assert_fail@plt+0xb58>
   11940:	mov	r1, #4
   11944:	mov	r0, #1
   11948:	bl	16800 <__assert_fail@plt+0x561c>
   1194c:	mov	r1, #0
   11950:	mov	r3, r7
   11954:	str	r0, [sp]
   11958:	mov	r2, r5
   1195c:	mov	r0, r1
   11960:	bl	11004 <error@plt>
   11964:	b	118dc <__assert_fail@plt+0x6f8>
   11968:	ldr	r9, [r6, #80]	; 0x50
   1196c:	and	r1, r9, #61440	; 0xf000
   11970:	cmp	r1, #40960	; 0xa000
   11974:	moveq	r5, #0
   11978:	moveq	r8, #2
   1197c:	moveq	r9, r5
   11980:	beq	11a20 <__assert_fail@plt+0x83c>
   11984:	mov	r3, #0
   11988:	sub	r1, r1, #16384	; 0x4000
   1198c:	clz	r1, r1
   11990:	mov	r0, r9
   11994:	lsr	r1, r1, #5
   11998:	str	r3, [sp]
   1199c:	ldr	r3, [r4, #4]
   119a0:	ldr	r2, [r4, #8]
   119a4:	bl	152c4 <__assert_fail@plt+0x40e0>
   119a8:	ldr	r3, [sp, #20]
   119ac:	mov	r2, r0
   119b0:	mov	r5, r0
   119b4:	mov	r1, sl
   119b8:	ldr	r0, [r3, #32]
   119bc:	bl	1212c <__assert_fail@plt+0xf48>
   119c0:	cmp	r0, #0
   119c4:	moveq	r8, #4
   119c8:	beq	11a20 <__assert_fail@plt+0x83c>
   119cc:	ldrb	r8, [r4, #1]
   119d0:	cmp	r8, #0
   119d4:	bne	11a1c <__assert_fail@plt+0x838>
   119d8:	bl	11094 <__errno_location@plt>
   119dc:	ldr	r3, [r0]
   119e0:	mov	r2, #5
   119e4:	mov	r0, r8
   119e8:	ldr	r1, [pc, #888]	; 11d68 <__assert_fail@plt+0xb84>
   119ec:	str	r3, [sp, #24]
   119f0:	bl	10f80 <dcgettext@plt>
   119f4:	mov	r2, r0
   119f8:	mov	r1, r7
   119fc:	mov	r0, #4
   11a00:	str	r2, [sp, #28]
   11a04:	bl	1686c <__assert_fail@plt+0x5688>
   11a08:	mov	r3, r0
   11a0c:	mov	r0, r8
   11a10:	ldr	r1, [sp, #24]
   11a14:	ldr	r2, [sp, #28]
   11a18:	bl	11004 <error@plt>
   11a1c:	mov	r8, #1
   11a20:	ldr	r3, [pc, #744]	; 11d10 <__assert_fail@plt+0xb2c>
   11a24:	ldr	r3, [r3]
   11a28:	cmp	r3, #2
   11a2c:	beq	11acc <__assert_fail@plt+0x8e8>
   11a30:	cmp	r8, #4
   11a34:	bne	11abc <__assert_fail@plt+0x8d8>
   11a38:	tst	r5, #3584	; 0xe00
   11a3c:	moveq	r3, r5
   11a40:	beq	11ae0 <__assert_fail@plt+0x8fc>
   11a44:	ldr	r0, [sp, #20]
   11a48:	mov	r3, #0
   11a4c:	add	r2, sp, #48	; 0x30
   11a50:	mov	r1, sl
   11a54:	ldr	r0, [r0, #32]
   11a58:	bl	17d00 <__assert_fail@plt+0x6b1c>
   11a5c:	cmp	r0, #0
   11a60:	ldreq	r3, [sp, #64]	; 0x40
   11a64:	beq	11ae0 <__assert_fail@plt+0x8fc>
   11a68:	ldrb	sl, [r4, #1]
   11a6c:	cmp	sl, #0
   11a70:	bne	11ab8 <__assert_fail@plt+0x8d4>
   11a74:	bl	11094 <__errno_location@plt>
   11a78:	ldr	r3, [r0]
   11a7c:	mov	r2, #5
   11a80:	mov	r0, sl
   11a84:	ldr	r1, [pc, #736]	; 11d6c <__assert_fail@plt+0xb88>
   11a88:	str	r3, [sp, #24]
   11a8c:	bl	10f80 <dcgettext@plt>
   11a90:	mov	r2, r0
   11a94:	mov	r1, r7
   11a98:	mov	r0, r8
   11a9c:	str	r2, [sp, #28]
   11aa0:	bl	1686c <__assert_fail@plt+0x5688>
   11aa4:	mov	r3, r0
   11aa8:	mov	r0, sl
   11aac:	ldr	r1, [sp, #24]
   11ab0:	ldr	r2, [sp, #28]
   11ab4:	bl	11004 <error@plt>
   11ab8:	mov	r8, #3
   11abc:	ldr	r3, [pc, #588]	; 11d10 <__assert_fail@plt+0xb2c>
   11ac0:	ldr	r3, [r3]
   11ac4:	cmp	r3, #0
   11ac8:	beq	11af0 <__assert_fail@plt+0x90c>
   11acc:	cmp	r8, #2
   11ad0:	bls	11b30 <__assert_fail@plt+0x94c>
   11ad4:	b	11c2c <__assert_fail@plt+0xa48>
   11ad8:	mov	r5, #0
   11adc:	b	117ac <__assert_fail@plt+0x5c8>
   11ae0:	eor	r3, r3, r9
   11ae4:	ubfx	r3, r3, #0, #12
   11ae8:	cmp	r3, #0
   11aec:	beq	11ab8 <__assert_fail@plt+0x8d4>
   11af0:	mov	r1, r7
   11af4:	mov	r0, #4
   11af8:	bl	1686c <__assert_fail@plt+0x5688>
   11afc:	cmp	r8, #0
   11b00:	mov	sl, r0
   11b04:	beq	11b5c <__assert_fail@plt+0x978>
   11b08:	cmp	r8, #2
   11b0c:	bne	11b68 <__assert_fail@plt+0x984>
   11b10:	ldr	r1, [pc, #600]	; 11d70 <__assert_fail@plt+0xb8c>
   11b14:	mov	r2, #5
   11b18:	mov	r0, #0
   11b1c:	bl	10f80 <dcgettext@plt>
   11b20:	mov	r1, r0
   11b24:	mov	r2, sl
   11b28:	mov	r0, #1
   11b2c:	bl	110c4 <__printf_chk@plt>
   11b30:	ldrb	r3, [r4, #2]
   11b34:	cmp	r3, #0
   11b38:	bne	11b4c <__assert_fail@plt+0x968>
   11b3c:	mov	r2, #4
   11b40:	mov	r1, r6
   11b44:	ldr	r0, [sp, #20]
   11b48:	bl	14010 <__assert_fail@plt+0x2e2c>
   11b4c:	cmp	r8, #1
   11b50:	movls	r8, #0
   11b54:	movhi	r8, #1
   11b58:	b	11734 <__assert_fail@plt+0x550>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #524]	; 11d74 <__assert_fail@plt+0xb90>
   11b64:	b	11b18 <__assert_fail@plt+0x934>
   11b68:	ubfx	r3, r5, #0, #12
   11b6c:	add	r1, sp, #36	; 0x24
   11b70:	mov	r0, r5
   11b74:	str	r3, [sp, #24]
   11b78:	bl	12338 <__assert_fail@plt+0x1154>
   11b7c:	mov	r3, #0
   11b80:	add	r1, sp, #48	; 0x30
   11b84:	mov	r0, r9
   11b88:	strb	r3, [sp, #46]	; 0x2e
   11b8c:	bl	12338 <__assert_fail@plt+0x1154>
   11b90:	mov	r3, #0
   11b94:	cmp	r8, #3
   11b98:	strb	r3, [sp, #58]	; 0x3a
   11b9c:	beq	11c00 <__assert_fail@plt+0xa1c>
   11ba0:	cmp	r8, #4
   11ba4:	beq	11bb4 <__assert_fail@plt+0x9d0>
   11ba8:	cmp	r8, #1
   11bac:	beq	11bf4 <__assert_fail@plt+0xa10>
   11bb0:	bl	111b4 <abort@plt>
   11bb4:	ldr	r1, [pc, #444]	; 11d78 <__assert_fail@plt+0xb94>
   11bb8:	mov	r2, #5
   11bbc:	mov	r0, r3
   11bc0:	bl	10f80 <dcgettext@plt>
   11bc4:	add	r3, sp, #37	; 0x25
   11bc8:	mov	r1, r0
   11bcc:	mov	r2, sl
   11bd0:	mov	r0, #1
   11bd4:	str	r3, [sp, #8]
   11bd8:	ubfx	r3, r5, #0, #12
   11bdc:	str	r3, [sp, #4]
   11be0:	add	r3, sp, #49	; 0x31
   11be4:	str	r3, [sp]
   11be8:	ubfx	r3, r9, #0, #12
   11bec:	bl	110c4 <__printf_chk@plt>
   11bf0:	b	11acc <__assert_fail@plt+0x8e8>
   11bf4:	mov	r2, #5
   11bf8:	ldr	r1, [pc, #380]	; 11d7c <__assert_fail@plt+0xb98>
   11bfc:	b	11bbc <__assert_fail@plt+0x9d8>
   11c00:	mov	r2, #5
   11c04:	ldr	r1, [pc, #372]	; 11d80 <__assert_fail@plt+0xb9c>
   11c08:	mov	r0, r3
   11c0c:	bl	10f80 <dcgettext@plt>
   11c10:	add	r3, sp, #37	; 0x25
   11c14:	mov	r1, r0
   11c18:	mov	r2, sl
   11c1c:	mov	r0, #1
   11c20:	str	r3, [sp]
   11c24:	ubfx	r3, r5, #0, #12
   11c28:	bl	110c4 <__printf_chk@plt>
   11c2c:	ldrb	r3, [r4]
   11c30:	cmp	r3, #0
   11c34:	beq	11b30 <__assert_fail@plt+0x94c>
   11c38:	and	r1, r9, #61440	; 0xf000
   11c3c:	mov	sl, #0
   11c40:	sub	r1, r1, #16384	; 0x4000
   11c44:	mov	r0, r9
   11c48:	clz	r1, r1
   11c4c:	mov	r2, sl
   11c50:	str	sl, [sp]
   11c54:	lsr	r1, r1, #5
   11c58:	ldr	r3, [r4, #4]
   11c5c:	bl	152c4 <__assert_fail@plt+0x40e0>
   11c60:	bics	r3, r5, r0
   11c64:	mov	r9, r0
   11c68:	beq	11b30 <__assert_fail@plt+0x94c>
   11c6c:	add	r1, sp, #36	; 0x24
   11c70:	mov	r0, r5
   11c74:	bl	12338 <__assert_fail@plt+0x1154>
   11c78:	add	r1, sp, #48	; 0x30
   11c7c:	mov	r0, r9
   11c80:	bl	12338 <__assert_fail@plt+0x1154>
   11c84:	mov	r2, #5
   11c88:	ldr	r1, [pc, #244]	; 11d84 <__assert_fail@plt+0xba0>
   11c8c:	mov	r0, sl
   11c90:	strb	sl, [sp, #46]	; 0x2e
   11c94:	mov	r8, #1
   11c98:	strb	sl, [sp, #58]	; 0x3a
   11c9c:	bl	10f80 <dcgettext@plt>
   11ca0:	mov	r5, r0
   11ca4:	mov	r2, r7
   11ca8:	mov	r1, #3
   11cac:	mov	r0, sl
   11cb0:	bl	16910 <__assert_fail@plt+0x572c>
   11cb4:	add	r3, sp, #49	; 0x31
   11cb8:	mov	r2, r5
   11cbc:	mov	r1, sl
   11cc0:	str	r3, [sp, #4]
   11cc4:	add	r3, sp, #37	; 0x25
   11cc8:	str	r3, [sp]
   11ccc:	mov	r3, r0
   11cd0:	mov	r0, sl
   11cd4:	bl	11004 <error@plt>
   11cd8:	b	11b30 <__assert_fail@plt+0x94c>
   11cdc:	mov	r8, #1
   11ce0:	b	11734 <__assert_fail@plt+0x550>
   11ce4:	andeq	r9, r2, r8, lsl #3
   11ce8:	andeq	r7, r1, r8, lsr pc
   11cec:	muleq	r1, fp, r2
   11cf0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11cf4:	andeq	r2, r1, ip, asr r1
   11cf8:	andeq	r7, r1, ip, ror #26
   11cfc:	ldrdeq	r8, [r1], -r0
   11d00:	andeq	r9, r2, r0, ror r1
   11d04:	andeq	r8, r1, r4, lsl r3
   11d08:	andeq	r8, r1, r0, asr #6
   11d0c:	andeq	r9, r2, r0, lsl #3
   11d10:	andeq	r9, r2, ip, lsl r1
   11d14:			; <UNDEFINED> instruction: 0x000182b3
   11d18:	andeq	r9, r2, ip, ror r1
   11d1c:	strdeq	r8, [r1], -r4
   11d20:	andeq	r8, r1, r0, asr #5
   11d24:	andeq	r7, r1, ip, lsl lr
   11d28:	andeq	r9, r2, r0, lsr #2
   11d2c:	andeq	r8, r1, r0, asr r3
   11d30:	andeq	r8, r1, r9, ror #6
   11d34:	andeq	r8, r1, r8, lsl #7
   11d38:	muleq	r2, r8, r1
   11d3c:	strdeq	r8, [r1], -r0
   11d40:	muleq	r1, r9, r3
   11d44:	andeq	r8, r1, r8, lsl #13
   11d48:	andeq	r8, r1, r9, lsr #7
   11d4c:	muleq	r1, r6, r3
   11d50:			; <UNDEFINED> instruction: 0x000183ba
   11d54:	ldrdeq	r8, [r1], -r3
   11d58:	strdeq	r8, [r1], -r9
   11d5c:			; <UNDEFINED> instruction: 0x000184b3
   11d60:	andeq	r8, r1, sl, lsl r5
   11d64:	andeq	r8, r1, r0, ror #9
   11d68:	andeq	r8, r1, fp, asr #10
   11d6c:	andeq	r8, r1, r6, ror #10
   11d70:	andeq	r8, r1, r3, lsl #11
   11d74:			; <UNDEFINED> instruction: 0x000185bb
   11d78:	ldrdeq	r8, [r1], -r5
   11d7c:	andeq	r8, r1, r7, lsl #12
   11d80:	andeq	r8, r1, r2, asr #12
   11d84:	andeq	r8, r1, r5, ror #12
   11d88:	mov	fp, #0
   11d8c:	mov	lr, #0
   11d90:	pop	{r1}		; (ldr r1, [sp], #4)
   11d94:	mov	r2, sp
   11d98:	push	{r2}		; (str r2, [sp, #-4]!)
   11d9c:	push	{r0}		; (str r0, [sp, #-4]!)
   11da0:	ldr	ip, [pc, #16]	; 11db8 <__assert_fail@plt+0xbd4>
   11da4:	push	{ip}		; (str ip, [sp, #-4]!)
   11da8:	ldr	r0, [pc, #12]	; 11dbc <__assert_fail@plt+0xbd8>
   11dac:	ldr	r3, [pc, #12]	; 11dc0 <__assert_fail@plt+0xbdc>
   11db0:	bl	11028 <__libc_start_main@plt>
   11db4:	bl	111b4 <abort@plt>
   11db8:			; <UNDEFINED> instruction: 0x00017cb4
   11dbc:	andeq	r1, r1, r8, lsl #4
   11dc0:	andeq	r7, r1, r4, asr ip
   11dc4:	ldr	r3, [pc, #20]	; 11de0 <__assert_fail@plt+0xbfc>
   11dc8:	ldr	r2, [pc, #20]	; 11de4 <__assert_fail@plt+0xc00>
   11dcc:	add	r3, pc, r3
   11dd0:	ldr	r2, [r3, r2]
   11dd4:	cmp	r2, #0
   11dd8:	bxeq	lr
   11ddc:	b	11040 <__gmon_start__@plt>
   11de0:	andeq	r7, r1, ip, lsr #4
   11de4:	andeq	r0, r0, r0, lsl r1
   11de8:	ldr	r0, [pc, #24]	; 11e08 <__assert_fail@plt+0xc24>
   11dec:	ldr	r3, [pc, #24]	; 11e0c <__assert_fail@plt+0xc28>
   11df0:	cmp	r3, r0
   11df4:	bxeq	lr
   11df8:	ldr	r3, [pc, #16]	; 11e10 <__assert_fail@plt+0xc2c>
   11dfc:	cmp	r3, #0
   11e00:	bxeq	lr
   11e04:	bx	r3
   11e08:	andeq	r9, r2, r8, ror #2
   11e0c:	andeq	r9, r2, r8, ror #2
   11e10:	andeq	r0, r0, r0
   11e14:	ldr	r0, [pc, #36]	; 11e40 <__assert_fail@plt+0xc5c>
   11e18:	ldr	r1, [pc, #36]	; 11e44 <__assert_fail@plt+0xc60>
   11e1c:	sub	r1, r1, r0
   11e20:	asr	r1, r1, #2
   11e24:	add	r1, r1, r1, lsr #31
   11e28:	asrs	r1, r1, #1
   11e2c:	bxeq	lr
   11e30:	ldr	r3, [pc, #16]	; 11e48 <__assert_fail@plt+0xc64>
   11e34:	cmp	r3, #0
   11e38:	bxeq	lr
   11e3c:	bx	r3
   11e40:	andeq	r9, r2, r8, ror #2
   11e44:	andeq	r9, r2, r8, ror #2
   11e48:	andeq	r0, r0, r0
   11e4c:	push	{r4, lr}
   11e50:	ldr	r4, [pc, #24]	; 11e70 <__assert_fail@plt+0xc8c>
   11e54:	ldrb	r3, [r4]
   11e58:	cmp	r3, #0
   11e5c:	popne	{r4, pc}
   11e60:	bl	11de8 <__assert_fail@plt+0xc04>
   11e64:	mov	r3, #1
   11e68:	strb	r3, [r4]
   11e6c:	pop	{r4, pc}
   11e70:	andeq	r9, r2, r4, lsl #3
   11e74:	b	11e14 <__assert_fail@plt+0xc30>
   11e78:	subs	r5, r0, #0
   11e7c:	push	{r7, lr}
   11e80:	sub	sp, sp, #64	; 0x40
   11e84:	ldr	r4, [pc, #576]	; 120cc <__assert_fail@plt+0xee8>
   11e88:	beq	11ec0 <__assert_fail@plt+0xcdc>
   11e8c:	mov	r2, #5
   11e90:	mov	r0, #0
   11e94:	ldr	r3, [pc, #564]	; 120d0 <__assert_fail@plt+0xeec>
   11e98:	ldr	r1, [pc, #564]	; 120d4 <__assert_fail@plt+0xef0>
   11e9c:	ldr	r6, [r3]
   11ea0:	bl	10f80 <dcgettext@plt>
   11ea4:	mov	r2, r0
   11ea8:	mov	r1, #1
   11eac:	ldr	r3, [r4]
   11eb0:	mov	r0, r6
   11eb4:	bl	110dc <__fprintf_chk@plt>
   11eb8:	mov	r0, r5
   11ebc:	bl	11064 <exit@plt>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #524]	; 120d8 <__assert_fail@plt+0xef4>
   11ec8:	add	r6, sp, #8
   11ecc:	bl	10f80 <dcgettext@plt>
   11ed0:	ldr	r3, [r4]
   11ed4:	mov	r1, r0
   11ed8:	mov	r0, #1
   11edc:	ldr	r4, [pc, #504]	; 120dc <__assert_fail@plt+0xef8>
   11ee0:	ldr	r7, [pc, #504]	; 120e0 <__assert_fail@plt+0xefc>
   11ee4:	mov	r2, r3
   11ee8:	str	r3, [sp]
   11eec:	bl	110c4 <__printf_chk@plt>
   11ef0:	mov	r2, #5
   11ef4:	ldr	r1, [pc, #488]	; 120e4 <__assert_fail@plt+0xf00>
   11ef8:	mov	r0, r5
   11efc:	bl	10f80 <dcgettext@plt>
   11f00:	ldr	r1, [r4]
   11f04:	bl	10efc <fputs_unlocked@plt>
   11f08:	mov	r2, #5
   11f0c:	ldr	r1, [pc, #468]	; 120e8 <__assert_fail@plt+0xf04>
   11f10:	mov	r0, r5
   11f14:	bl	10f80 <dcgettext@plt>
   11f18:	ldr	r1, [r4]
   11f1c:	bl	10efc <fputs_unlocked@plt>
   11f20:	mov	r2, #5
   11f24:	ldr	r1, [pc, #448]	; 120ec <__assert_fail@plt+0xf08>
   11f28:	mov	r0, r5
   11f2c:	bl	10f80 <dcgettext@plt>
   11f30:	ldr	r1, [r4]
   11f34:	bl	10efc <fputs_unlocked@plt>
   11f38:	mov	r2, #5
   11f3c:	ldr	r1, [pc, #428]	; 120f0 <__assert_fail@plt+0xf0c>
   11f40:	mov	r0, r5
   11f44:	bl	10f80 <dcgettext@plt>
   11f48:	ldr	r1, [r4]
   11f4c:	bl	10efc <fputs_unlocked@plt>
   11f50:	mov	r2, #5
   11f54:	ldr	r1, [pc, #408]	; 120f4 <__assert_fail@plt+0xf10>
   11f58:	mov	r0, r5
   11f5c:	bl	10f80 <dcgettext@plt>
   11f60:	ldr	r1, [r4]
   11f64:	bl	10efc <fputs_unlocked@plt>
   11f68:	mov	r2, #5
   11f6c:	ldr	r1, [pc, #388]	; 120f8 <__assert_fail@plt+0xf14>
   11f70:	mov	r0, r5
   11f74:	bl	10f80 <dcgettext@plt>
   11f78:	ldr	r1, [r4]
   11f7c:	bl	10efc <fputs_unlocked@plt>
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #368]	; 120fc <__assert_fail@plt+0xf18>
   11f88:	mov	r0, r5
   11f8c:	bl	10f80 <dcgettext@plt>
   11f90:	ldr	r1, [r4]
   11f94:	bl	10efc <fputs_unlocked@plt>
   11f98:	mov	r2, #5
   11f9c:	ldr	r1, [pc, #348]	; 12100 <__assert_fail@plt+0xf1c>
   11fa0:	mov	r0, r5
   11fa4:	bl	10f80 <dcgettext@plt>
   11fa8:	ldr	r1, [r4]
   11fac:	bl	10efc <fputs_unlocked@plt>
   11fb0:	ldr	lr, [pc, #332]	; 12104 <__assert_fail@plt+0xf20>
   11fb4:	add	ip, sp, #8
   11fb8:	ldm	lr!, {r0, r1, r2, r3}
   11fbc:	stmia	ip!, {r0, r1, r2, r3}
   11fc0:	ldm	lr!, {r0, r1, r2, r3}
   11fc4:	stmia	ip!, {r0, r1, r2, r3}
   11fc8:	ldm	lr!, {r0, r1, r2, r3}
   11fcc:	stmia	ip!, {r0, r1, r2, r3}
   11fd0:	ldm	lr, {r0, r1}
   11fd4:	stm	ip, {r0, r1}
   11fd8:	ldr	r1, [r6]
   11fdc:	cmp	r1, #0
   11fe0:	bne	12084 <__assert_fail@plt+0xea0>
   11fe4:	ldr	r6, [r6, #4]
   11fe8:	mov	r2, #5
   11fec:	mov	r0, #0
   11ff0:	ldr	r7, [pc, #232]	; 120e0 <__assert_fail@plt+0xefc>
   11ff4:	ldr	r1, [pc, #268]	; 12108 <__assert_fail@plt+0xf24>
   11ff8:	cmp	r6, #0
   11ffc:	moveq	r6, r7
   12000:	bl	10f80 <dcgettext@plt>
   12004:	mov	r1, r0
   12008:	ldr	r3, [pc, #252]	; 1210c <__assert_fail@plt+0xf28>
   1200c:	mov	r0, #1
   12010:	ldr	r2, [pc, #248]	; 12110 <__assert_fail@plt+0xf2c>
   12014:	bl	110c4 <__printf_chk@plt>
   12018:	mov	r1, #0
   1201c:	mov	r0, #5
   12020:	bl	1110c <setlocale@plt>
   12024:	cmp	r0, #0
   12028:	bne	1209c <__assert_fail@plt+0xeb8>
   1202c:	mov	r2, #5
   12030:	ldr	r1, [pc, #220]	; 12114 <__assert_fail@plt+0xf30>
   12034:	mov	r0, #0
   12038:	bl	10f80 <dcgettext@plt>
   1203c:	mov	r1, r0
   12040:	ldr	r3, [pc, #152]	; 120e0 <__assert_fail@plt+0xefc>
   12044:	mov	r0, #1
   12048:	ldr	r2, [pc, #188]	; 1210c <__assert_fail@plt+0xf28>
   1204c:	bl	110c4 <__printf_chk@plt>
   12050:	mov	r2, #5
   12054:	ldr	r1, [pc, #188]	; 12118 <__assert_fail@plt+0xf34>
   12058:	mov	r0, #0
   1205c:	bl	10f80 <dcgettext@plt>
   12060:	ldr	r2, [pc, #180]	; 1211c <__assert_fail@plt+0xf38>
   12064:	cmp	r6, r7
   12068:	mov	r1, r0
   1206c:	mov	r0, #1
   12070:	ldr	r3, [pc, #168]	; 12120 <__assert_fail@plt+0xf3c>
   12074:	moveq	r3, r2
   12078:	mov	r2, r6
   1207c:	bl	110c4 <__printf_chk@plt>
   12080:	b	11eb8 <__assert_fail@plt+0xcd4>
   12084:	mov	r0, r7
   12088:	bl	10f14 <strcmp@plt>
   1208c:	cmp	r0, #0
   12090:	beq	11fe4 <__assert_fail@plt+0xe00>
   12094:	add	r6, r6, #8
   12098:	b	11fd8 <__assert_fail@plt+0xdf4>
   1209c:	mov	r2, #3
   120a0:	ldr	r1, [pc, #124]	; 12124 <__assert_fail@plt+0xf40>
   120a4:	bl	111a8 <strncmp@plt>
   120a8:	cmp	r0, #0
   120ac:	beq	1202c <__assert_fail@plt+0xe48>
   120b0:	mov	r2, #5
   120b4:	ldr	r1, [pc, #108]	; 12128 <__assert_fail@plt+0xf44>
   120b8:	mov	r0, #0
   120bc:	bl	10f80 <dcgettext@plt>
   120c0:	ldr	r1, [r4]
   120c4:	bl	10efc <fputs_unlocked@plt>
   120c8:	b	1202c <__assert_fail@plt+0xe48>
   120cc:			; <UNDEFINED> instruction: 0x000291b4
   120d0:	andeq	r9, r2, r8, ror r1
   120d4:	andeq	r7, r1, r2, lsr #28
   120d8:	andeq	r7, r1, r9, asr #28
   120dc:	andeq	r9, r2, ip, ror r1
   120e0:	andeq	r7, r1, ip, lsl lr
   120e4:	ldrdeq	r7, [r1], -r0
   120e8:	andeq	r7, r1, r9, lsr pc
   120ec:	andeq	r8, r1, r2
   120f0:	andeq	r8, r1, r2, lsl #1
   120f4:	andeq	r8, r1, r4, asr #1
   120f8:	andeq	r8, r1, r7, lsl #2
   120fc:	andeq	r8, r1, r4, lsr r1
   12100:	andeq	r8, r1, sl, ror #2
   12104:	andeq	r7, r1, r4, lsr sp
   12108:			; <UNDEFINED> instruction: 0x000181b5
   1210c:	andeq	r8, r1, ip, asr #3
   12110:	strdeq	r8, [r1], -r4
   12114:	andeq	r8, r1, sp, asr #4
   12118:	andeq	r8, r1, r8, ror #4
   1211c:			; <UNDEFINED> instruction: 0x000186b5
   12120:	andeq	r7, r1, r8, lsr pc
   12124:	andeq	r8, r1, r2, lsl #4
   12128:	andeq	r8, r1, r6, lsl #4
   1212c:	mov	r3, #0
   12130:	b	12230 <__assert_fail@plt+0x104c>
   12134:	mov	r3, #256	; 0x100
   12138:	b	12230 <__assert_fail@plt+0x104c>
   1213c:	ldr	r3, [pc, #4]	; 12148 <__assert_fail@plt+0xf64>
   12140:	str	r0, [r3]
   12144:	bx	lr
   12148:	andeq	r9, r2, ip, lsr #3
   1214c:	ldr	r3, [pc, #4]	; 12158 <__assert_fail@plt+0xf74>
   12150:	strb	r0, [r3, #4]
   12154:	bx	lr
   12158:	andeq	r9, r2, ip, lsr #3
   1215c:	ldr	r3, [pc, #176]	; 12214 <__assert_fail@plt+0x1030>
   12160:	push	{r0, r1, r4, r5, r6, lr}
   12164:	ldr	r0, [r3]
   12168:	bl	1741c <__assert_fail@plt+0x6238>
   1216c:	cmp	r0, #0
   12170:	beq	121f8 <__assert_fail@plt+0x1014>
   12174:	ldr	r4, [pc, #156]	; 12218 <__assert_fail@plt+0x1034>
   12178:	bl	11094 <__errno_location@plt>
   1217c:	mov	r5, r0
   12180:	ldrb	r6, [r4, #4]
   12184:	cmp	r6, #0
   12188:	beq	12198 <__assert_fail@plt+0xfb4>
   1218c:	ldr	r3, [r0]
   12190:	cmp	r3, #32
   12194:	beq	121f8 <__assert_fail@plt+0x1014>
   12198:	mov	r2, #5
   1219c:	ldr	r1, [pc, #120]	; 1221c <__assert_fail@plt+0x1038>
   121a0:	mov	r0, #0
   121a4:	bl	10f80 <dcgettext@plt>
   121a8:	mov	r6, r0
   121ac:	ldr	r0, [r4]
   121b0:	cmp	r0, #0
   121b4:	beq	121e4 <__assert_fail@plt+0x1000>
   121b8:	ldr	r4, [r5]
   121bc:	bl	16900 <__assert_fail@plt+0x571c>
   121c0:	mov	r3, r0
   121c4:	ldr	r2, [pc, #84]	; 12220 <__assert_fail@plt+0x103c>
   121c8:	mov	r0, #0
   121cc:	str	r6, [sp]
   121d0:	mov	r1, r4
   121d4:	bl	11004 <error@plt>
   121d8:	ldr	r3, [pc, #68]	; 12224 <__assert_fail@plt+0x1040>
   121dc:	ldr	r0, [r3]
   121e0:	bl	10f44 <_exit@plt>
   121e4:	mov	r3, r6
   121e8:	ldr	r2, [pc, #56]	; 12228 <__assert_fail@plt+0x1044>
   121ec:	ldr	r1, [r5]
   121f0:	bl	11004 <error@plt>
   121f4:	b	121d8 <__assert_fail@plt+0xff4>
   121f8:	ldr	r3, [pc, #44]	; 1222c <__assert_fail@plt+0x1048>
   121fc:	ldr	r0, [r3]
   12200:	bl	1741c <__assert_fail@plt+0x6238>
   12204:	cmp	r0, #0
   12208:	bne	121d8 <__assert_fail@plt+0xff4>
   1220c:	add	sp, sp, #8
   12210:	pop	{r4, r5, r6, pc}
   12214:	andeq	r9, r2, ip, ror r1
   12218:	andeq	r9, r2, ip, lsr #3
   1221c:	andeq	r8, r1, r6, asr r7
   12220:	andeq	r8, r1, r2, ror #14
   12224:	andeq	r9, r2, r4, lsr #2
   12228:	muleq	r1, r6, r3
   1222c:	andeq	r9, r2, r8, ror r1
   12230:	cmp	r3, #256	; 0x100
   12234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12238:	mov	r9, r0
   1223c:	sub	sp, sp, #148	; 0x94
   12240:	mov	sl, r1
   12244:	mov	r8, r2
   12248:	movne	r7, r3
   1224c:	bne	12314 <__assert_fail@plt+0x1130>
   12250:	mov	r2, #2654208	; 0x288000
   12254:	bl	1107c <openat64@plt>
   12258:	subs	r5, r0, #0
   1225c:	movlt	r4, r5
   12260:	blt	1229c <__assert_fail@plt+0x10b8>
   12264:	mov	r3, #4096	; 0x1000
   12268:	add	r2, sp, #40	; 0x28
   1226c:	ldr	r1, [pc, #188]	; 12330 <__assert_fail@plt+0x114c>
   12270:	bl	17d00 <__assert_fail@plt+0x6b1c>
   12274:	mov	r7, r0
   12278:	bl	11094 <__errno_location@plt>
   1227c:	cmp	r7, #0
   12280:	mov	r6, r0
   12284:	beq	122a8 <__assert_fail@plt+0x10c4>
   12288:	ldr	r4, [r6]
   1228c:	mov	r0, r5
   12290:	bl	111c0 <close@plt>
   12294:	str	r4, [r6]
   12298:	mvn	r4, #0
   1229c:	mov	r0, r4
   122a0:	add	sp, sp, #148	; 0x94
   122a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a8:	ldr	r3, [sp, #56]	; 0x38
   122ac:	and	r3, r3, #61440	; 0xf000
   122b0:	cmp	r3, #40960	; 0xa000
   122b4:	bne	122cc <__assert_fail@plt+0x10e8>
   122b8:	mov	r0, r5
   122bc:	bl	111c0 <close@plt>
   122c0:	mov	r3, #95	; 0x5f
   122c4:	str	r3, [r6]
   122c8:	b	12298 <__assert_fail@plt+0x10b4>
   122cc:	ldr	r3, [pc, #96]	; 12334 <__assert_fail@plt+0x1150>
   122d0:	mov	r2, #26
   122d4:	mov	r1, #1
   122d8:	add	r0, sp, #12
   122dc:	str	r5, [sp]
   122e0:	bl	110a0 <__sprintf_chk@plt>
   122e4:	mov	r1, r8
   122e8:	add	r0, sp, #12
   122ec:	bl	11184 <chmod@plt>
   122f0:	mov	r4, r0
   122f4:	mov	r0, r5
   122f8:	ldr	fp, [r6]
   122fc:	bl	111c0 <close@plt>
   12300:	cmp	r4, #0
   12304:	beq	1229c <__assert_fail@plt+0x10b8>
   12308:	cmp	fp, #2
   1230c:	strne	fp, [r6]
   12310:	bne	1229c <__assert_fail@plt+0x10b8>
   12314:	mov	r3, r7
   12318:	mov	r2, r8
   1231c:	mov	r1, sl
   12320:	mov	r0, r9
   12324:	bl	11088 <fchmodat@plt>
   12328:	mov	r4, r0
   1232c:	b	1229c <__assert_fail@plt+0x10b8>
   12330:	andeq	r7, r1, r8, lsr pc
   12334:	andeq	r8, r1, r9, ror #14
   12338:	and	r3, r0, #61440	; 0xf000
   1233c:	cmp	r3, #32768	; 0x8000
   12340:	moveq	r3, #45	; 0x2d
   12344:	beq	12390 <__assert_fail@plt+0x11ac>
   12348:	cmp	r3, #16384	; 0x4000
   1234c:	moveq	r3, #100	; 0x64
   12350:	beq	12390 <__assert_fail@plt+0x11ac>
   12354:	cmp	r3, #24576	; 0x6000
   12358:	moveq	r3, #98	; 0x62
   1235c:	beq	12390 <__assert_fail@plt+0x11ac>
   12360:	cmp	r3, #8192	; 0x2000
   12364:	moveq	r3, #99	; 0x63
   12368:	beq	12390 <__assert_fail@plt+0x11ac>
   1236c:	cmp	r3, #40960	; 0xa000
   12370:	moveq	r3, #108	; 0x6c
   12374:	beq	12390 <__assert_fail@plt+0x11ac>
   12378:	cmp	r3, #4096	; 0x1000
   1237c:	moveq	r3, #112	; 0x70
   12380:	beq	12390 <__assert_fail@plt+0x11ac>
   12384:	cmp	r3, #49152	; 0xc000
   12388:	moveq	r3, #115	; 0x73
   1238c:	movne	r3, #63	; 0x3f
   12390:	tst	r0, #256	; 0x100
   12394:	strb	r3, [r1]
   12398:	movne	r3, #114	; 0x72
   1239c:	moveq	r3, #45	; 0x2d
   123a0:	tst	r0, #128	; 0x80
   123a4:	strb	r3, [r1, #1]
   123a8:	movne	r3, #119	; 0x77
   123ac:	moveq	r3, #45	; 0x2d
   123b0:	tst	r0, #2048	; 0x800
   123b4:	strb	r3, [r1, #2]
   123b8:	and	r3, r0, #64	; 0x40
   123bc:	beq	1245c <__assert_fail@plt+0x1278>
   123c0:	cmp	r3, #0
   123c4:	movne	r3, #115	; 0x73
   123c8:	moveq	r3, #83	; 0x53
   123cc:	tst	r0, #32
   123d0:	strb	r3, [r1, #3]
   123d4:	movne	r3, #114	; 0x72
   123d8:	moveq	r3, #45	; 0x2d
   123dc:	tst	r0, #16
   123e0:	strb	r3, [r1, #4]
   123e4:	movne	r3, #119	; 0x77
   123e8:	moveq	r3, #45	; 0x2d
   123ec:	tst	r0, #1024	; 0x400
   123f0:	strb	r3, [r1, #5]
   123f4:	and	r3, r0, #8
   123f8:	beq	1246c <__assert_fail@plt+0x1288>
   123fc:	cmp	r3, #0
   12400:	movne	r3, #115	; 0x73
   12404:	moveq	r3, #83	; 0x53
   12408:	tst	r0, #4
   1240c:	strb	r3, [r1, #6]
   12410:	movne	r3, #114	; 0x72
   12414:	moveq	r3, #45	; 0x2d
   12418:	tst	r0, #2
   1241c:	strb	r3, [r1, #7]
   12420:	movne	r3, #119	; 0x77
   12424:	moveq	r3, #45	; 0x2d
   12428:	tst	r0, #512	; 0x200
   1242c:	strb	r3, [r1, #8]
   12430:	and	r3, r0, #1
   12434:	beq	1247c <__assert_fail@plt+0x1298>
   12438:	cmp	r3, #0
   1243c:	movne	r3, #116	; 0x74
   12440:	moveq	r3, #84	; 0x54
   12444:	strb	r3, [r1, #9]
   12448:	mov	r3, #32
   1244c:	strb	r3, [r1, #10]
   12450:	mov	r3, #0
   12454:	strb	r3, [r1, #11]
   12458:	bx	lr
   1245c:	cmp	r3, #0
   12460:	movne	r3, #120	; 0x78
   12464:	moveq	r3, #45	; 0x2d
   12468:	b	123cc <__assert_fail@plt+0x11e8>
   1246c:	cmp	r3, #0
   12470:	movne	r3, #120	; 0x78
   12474:	moveq	r3, #45	; 0x2d
   12478:	b	12408 <__assert_fail@plt+0x1224>
   1247c:	cmp	r3, #0
   12480:	movne	r3, #120	; 0x78
   12484:	moveq	r3, #45	; 0x2d
   12488:	b	12444 <__assert_fail@plt+0x1260>
   1248c:	ldr	r0, [r0, #16]
   12490:	b	12338 <__assert_fail@plt+0x1154>
   12494:	push	{r4, r5, lr}
   12498:	ldrd	r2, [r1, #8]
   1249c:	ldrd	r4, [r0, #8]
   124a0:	cmp	r5, r3
   124a4:	cmpeq	r4, r2
   124a8:	bne	124c8 <__assert_fail@plt+0x12e4>
   124ac:	ldrd	r4, [r0]
   124b0:	ldrd	r2, [r1]
   124b4:	cmp	r5, r3
   124b8:	cmpeq	r4, r2
   124bc:	moveq	r0, #1
   124c0:	movne	r0, #0
   124c4:	pop	{r4, r5, pc}
   124c8:	mov	r0, #0
   124cc:	pop	{r4, r5, pc}
   124d0:	push	{r4, lr}
   124d4:	mov	r2, r1
   124d8:	mov	r3, #0
   124dc:	ldrd	r0, [r0, #8]
   124e0:	bl	17ae0 <__assert_fail@plt+0x68fc>
   124e4:	mov	r0, r2
   124e8:	pop	{r4, pc}
   124ec:	push	{r4, lr}
   124f0:	mov	r2, r1
   124f4:	mov	r3, #0
   124f8:	ldrd	r0, [r0]
   124fc:	bl	17ae0 <__assert_fail@plt+0x68fc>
   12500:	mov	r0, r2
   12504:	pop	{r4, pc}
   12508:	push	{r4, r5, lr}
   1250c:	ldrd	r2, [r1]
   12510:	ldrd	r4, [r0]
   12514:	cmp	r5, r3
   12518:	cmpeq	r4, r2
   1251c:	moveq	r0, #1
   12520:	movne	r0, #0
   12524:	pop	{r4, r5, pc}
   12528:	ldr	r3, [r0]
   1252c:	push	{r4, r5, lr}
   12530:	ldrd	r4, [r3, #160]	; 0xa0
   12534:	ldr	r3, [r1]
   12538:	ldrd	r2, [r3, #160]	; 0xa0
   1253c:	cmp	r5, r3
   12540:	cmpeq	r4, r2
   12544:	movhi	r0, #1
   12548:	movls	r0, #0
   1254c:	movcc	r3, #1
   12550:	movcs	r3, #0
   12554:	sub	r0, r0, r3
   12558:	pop	{r4, r5, pc}
   1255c:	push	{r4, r5, r6, lr}
   12560:	mov	r4, r1
   12564:	add	r5, r1, #64	; 0x40
   12568:	ldr	r1, [r1, #48]	; 0x30
   1256c:	ldr	r3, [r0, #48]	; 0x30
   12570:	cmp	r1, #0
   12574:	bne	12580 <__assert_fail@plt+0x139c>
   12578:	tst	r3, #1
   1257c:	bne	1258c <__assert_fail@plt+0x13a8>
   12580:	ubfx	r3, r3, #1, #1
   12584:	orrs	r3, r2, r3
   12588:	beq	125f4 <__assert_fail@plt+0x1410>
   1258c:	mov	r1, r5
   12590:	ldr	r0, [r4, #24]
   12594:	bl	17cd0 <__assert_fail@plt+0x6aec>
   12598:	cmp	r0, #0
   1259c:	beq	1261c <__assert_fail@plt+0x1438>
   125a0:	bl	11094 <__errno_location@plt>
   125a4:	ldr	r3, [r0]
   125a8:	mov	r6, r0
   125ac:	cmp	r3, #2
   125b0:	bne	125d4 <__assert_fail@plt+0x13f0>
   125b4:	mov	r1, r5
   125b8:	ldr	r0, [r4, #24]
   125bc:	bl	17cf0 <__assert_fail@plt+0x6b0c>
   125c0:	cmp	r0, #0
   125c4:	bne	125d4 <__assert_fail@plt+0x13f0>
   125c8:	str	r0, [r6]
   125cc:	mov	r0, #13
   125d0:	pop	{r4, r5, r6, pc}
   125d4:	ldr	r3, [r6]
   125d8:	mov	r2, #104	; 0x68
   125dc:	mov	r1, #0
   125e0:	str	r3, [r4, #32]
   125e4:	mov	r0, r5
   125e8:	bl	110b8 <memset@plt>
   125ec:	mov	r0, #10
   125f0:	pop	{r4, r5, r6, pc}
   125f4:	mov	r3, #256	; 0x100
   125f8:	mov	r2, r5
   125fc:	ldr	r1, [r4, #24]
   12600:	ldr	r0, [r0, #32]
   12604:	bl	17d00 <__assert_fail@plt+0x6b1c>
   12608:	cmp	r0, #0
   1260c:	beq	1261c <__assert_fail@plt+0x1438>
   12610:	bl	11094 <__errno_location@plt>
   12614:	ldr	r3, [r0]
   12618:	b	125d8 <__assert_fail@plt+0x13f4>
   1261c:	ldr	r3, [r4, #80]	; 0x50
   12620:	and	r3, r3, #61440	; 0xf000
   12624:	cmp	r3, #16384	; 0x4000
   12628:	bne	1266c <__assert_fail@plt+0x1488>
   1262c:	ldrb	r3, [r4, #168]	; 0xa8
   12630:	cmp	r3, #46	; 0x2e
   12634:	bne	12684 <__assert_fail@plt+0x14a0>
   12638:	ldrb	r3, [r4, #169]	; 0xa9
   1263c:	cmp	r3, #0
   12640:	beq	12658 <__assert_fail@plt+0x1474>
   12644:	ldr	r3, [r4, #168]	; 0xa8
   12648:	bic	r3, r3, #-16777216	; 0xff000000
   1264c:	bic	r3, r3, #255	; 0xff
   12650:	cmp	r3, #11776	; 0x2e00
   12654:	bne	12684 <__assert_fail@plt+0x14a0>
   12658:	ldr	r3, [r4, #48]	; 0x30
   1265c:	cmp	r3, #0
   12660:	moveq	r0, #1
   12664:	movne	r0, #5
   12668:	pop	{r4, r5, r6, pc}
   1266c:	cmp	r3, #40960	; 0xa000
   12670:	beq	1268c <__assert_fail@plt+0x14a8>
   12674:	cmp	r3, #32768	; 0x8000
   12678:	movne	r0, #3
   1267c:	moveq	r0, #8
   12680:	pop	{r4, r5, r6, pc}
   12684:	mov	r0, #1
   12688:	pop	{r4, r5, r6, pc}
   1268c:	mov	r0, #12
   12690:	pop	{r4, r5, r6, pc}
   12694:	ldr	r3, [r0, #40]	; 0x28
   12698:	push	{r4, r5, r6, r7, r8, lr}
   1269c:	mov	r4, r0
   126a0:	mov	r6, r1
   126a4:	mov	r5, r2
   126a8:	ldr	r7, [r0, #44]	; 0x2c
   126ac:	cmp	r3, r2
   126b0:	bcs	126f8 <__assert_fail@plt+0x1514>
   126b4:	add	r1, r2, #40	; 0x28
   126b8:	ldr	r0, [r0, #8]
   126bc:	cmn	r1, #-1073741823	; 0xc0000001
   126c0:	str	r1, [r4, #40]	; 0x28
   126c4:	bls	126e4 <__assert_fail@plt+0x1500>
   126c8:	ldr	r0, [r4, #8]
   126cc:	bl	17834 <__assert_fail@plt+0x6650>
   126d0:	mov	r3, #0
   126d4:	str	r3, [r4, #8]
   126d8:	str	r3, [r4, #40]	; 0x28
   126dc:	mov	r0, r6
   126e0:	pop	{r4, r5, r6, r7, r8, pc}
   126e4:	lsl	r1, r1, #2
   126e8:	bl	173d8 <__assert_fail@plt+0x61f4>
   126ec:	cmp	r0, #0
   126f0:	beq	126c8 <__assert_fail@plt+0x14e4>
   126f4:	str	r0, [r4, #8]
   126f8:	ldr	r0, [r4, #8]
   126fc:	mov	r2, r0
   12700:	cmp	r6, #0
   12704:	bne	12734 <__assert_fail@plt+0x1550>
   12708:	mov	r3, r7
   1270c:	mov	r2, #4
   12710:	mov	r1, r5
   12714:	bl	11160 <qsort@plt>
   12718:	ldr	r3, [r4, #8]
   1271c:	ldr	r6, [r3]
   12720:	subs	r5, r5, #1
   12724:	ldr	r2, [r3]
   12728:	bne	12740 <__assert_fail@plt+0x155c>
   1272c:	str	r5, [r2, #8]
   12730:	b	126dc <__assert_fail@plt+0x14f8>
   12734:	str	r6, [r2], #4
   12738:	ldr	r6, [r6, #8]
   1273c:	b	12700 <__assert_fail@plt+0x151c>
   12740:	ldr	r1, [r3, #4]!
   12744:	str	r1, [r2, #8]
   12748:	b	12720 <__assert_fail@plt+0x153c>
   1274c:	push	{r4, r5, r6, r7, r8, lr}
   12750:	mov	r6, r0
   12754:	add	r0, r2, #176	; 0xb0
   12758:	bic	r0, r0, #7
   1275c:	mov	r7, r1
   12760:	mov	r5, r2
   12764:	bl	173ac <__assert_fail@plt+0x61c8>
   12768:	subs	r4, r0, #0
   1276c:	beq	127b8 <__assert_fail@plt+0x15d4>
   12770:	mov	r2, r5
   12774:	mov	r1, r7
   12778:	add	r0, r4, #168	; 0xa8
   1277c:	bl	10f50 <memcpy@plt>
   12780:	mov	r3, #0
   12784:	add	r2, r4, r5
   12788:	strb	r3, [r2, #168]	; 0xa8
   1278c:	ldr	r2, [r6, #24]
   12790:	str	r3, [r4, #12]
   12794:	str	r3, [r4, #16]
   12798:	str	r3, [r4, #20]
   1279c:	str	r2, [r4, #28]
   127a0:	mov	r2, #3
   127a4:	str	r3, [r4, #32]
   127a8:	str	r6, [r4, #44]	; 0x2c
   127ac:	str	r5, [r4, #52]	; 0x34
   127b0:	strh	r3, [r4, #58]	; 0x3a
   127b4:	strh	r2, [r4, #60]	; 0x3c
   127b8:	mov	r0, r4
   127bc:	pop	{r4, r5, r6, r7, r8, pc}
   127c0:	mov	r3, r0
   127c4:	mov	r0, r1
   127c8:	ldr	ip, [r3, #48]	; 0x30
   127cc:	lsl	r2, ip, #11
   127d0:	tst	ip, #512	; 0x200
   127d4:	and	r2, r2, #32768	; 0x8000
   127d8:	orr	r2, r2, #540672	; 0x84000
   127dc:	orr	r2, r2, #2304	; 0x900
   127e0:	beq	127ec <__assert_fail@plt+0x1608>
   127e4:	ldr	r0, [r3, #32]
   127e8:	b	153cc <__assert_fail@plt+0x41e8>
   127ec:	mov	r1, r2
   127f0:	b	177b0 <__assert_fail@plt+0x65cc>
   127f4:	push	{r4, r5, r6, lr}
   127f8:	mov	r4, r0
   127fc:	cmp	r4, #0
   12800:	popeq	{r4, r5, r6, pc}
   12804:	ldr	r5, [r4, #8]
   12808:	ldr	r0, [r4, #12]
   1280c:	cmp	r0, #0
   12810:	beq	12818 <__assert_fail@plt+0x1634>
   12814:	bl	111d8 <closedir@plt>
   12818:	mov	r0, r4
   1281c:	mov	r4, r5
   12820:	bl	17834 <__assert_fail@plt+0x6650>
   12824:	b	127fc <__assert_fail@plt+0x1618>
   12828:	push	{r4, lr}
   1282c:	mov	r4, r0
   12830:	mov	r0, r4
   12834:	bl	14ef0 <__assert_fail@plt+0x3d0c>
   12838:	cmp	r0, #0
   1283c:	popne	{r4, pc}
   12840:	mov	r0, r4
   12844:	bl	14f3c <__assert_fail@plt+0x3d58>
   12848:	cmp	r0, #0
   1284c:	blt	12830 <__assert_fail@plt+0x164c>
   12850:	bl	111c0 <close@plt>
   12854:	b	12830 <__assert_fail@plt+0x164c>
   12858:	push	{r4, r5, r6, r7, lr}
   1285c:	sub	sp, sp, #100	; 0x64
   12860:	ldr	r5, [r0, #44]	; 0x2c
   12864:	ldr	r3, [r5, #48]	; 0x30
   12868:	tst	r3, #512	; 0x200
   1286c:	bne	1287c <__assert_fail@plt+0x1698>
   12870:	mov	r0, #0
   12874:	add	sp, sp, #100	; 0x64
   12878:	pop	{r4, r5, r6, r7, pc}
   1287c:	ldr	r4, [r5, #52]	; 0x34
   12880:	mov	r7, r1
   12884:	mov	r6, r0
   12888:	cmp	r4, #0
   1288c:	bne	128bc <__assert_fail@plt+0x16d8>
   12890:	ldr	r3, [pc, #184]	; 12950 <__assert_fail@plt+0x176c>
   12894:	mov	r1, r4
   12898:	mov	r0, #13
   1289c:	ldr	r2, [pc, #176]	; 12954 <__assert_fail@plt+0x1770>
   128a0:	str	r3, [sp]
   128a4:	ldr	r3, [pc, #172]	; 12958 <__assert_fail@plt+0x1774>
   128a8:	bl	148d0 <__assert_fail@plt+0x36ec>
   128ac:	cmp	r0, #0
   128b0:	mov	r4, r0
   128b4:	str	r0, [r5, #52]	; 0x34
   128b8:	beq	128dc <__assert_fail@plt+0x16f8>
   128bc:	ldrd	r2, [r6, #64]	; 0x40
   128c0:	add	r1, sp, #8
   128c4:	mov	r0, r4
   128c8:	strd	r2, [sp, #8]
   128cc:	bl	146c0 <__assert_fail@plt+0x34dc>
   128d0:	cmp	r0, #0
   128d4:	ldrne	r0, [r0, #8]
   128d8:	bne	12874 <__assert_fail@plt+0x1690>
   128dc:	cmp	r7, #0
   128e0:	blt	12870 <__assert_fail@plt+0x168c>
   128e4:	add	r1, sp, #8
   128e8:	mov	r0, r7
   128ec:	bl	10ee4 <fstatfs64@plt>
   128f0:	cmp	r0, #0
   128f4:	bne	12870 <__assert_fail@plt+0x168c>
   128f8:	cmp	r4, #0
   128fc:	beq	12948 <__assert_fail@plt+0x1764>
   12900:	mov	r0, #16
   12904:	bl	173ac <__assert_fail@plt+0x61c8>
   12908:	subs	r5, r0, #0
   1290c:	beq	12948 <__assert_fail@plt+0x1764>
   12910:	ldrd	r2, [r6, #64]	; 0x40
   12914:	mov	r1, r5
   12918:	mov	r0, r4
   1291c:	strd	r2, [r5]
   12920:	ldr	r3, [sp, #8]
   12924:	str	r3, [r5, #8]
   12928:	bl	14d98 <__assert_fail@plt+0x3bb4>
   1292c:	cmp	r0, #0
   12930:	beq	12940 <__assert_fail@plt+0x175c>
   12934:	cmp	r5, r0
   12938:	beq	12948 <__assert_fail@plt+0x1764>
   1293c:	bl	111b4 <abort@plt>
   12940:	mov	r0, r5
   12944:	bl	17834 <__assert_fail@plt+0x6650>
   12948:	ldr	r0, [sp, #8]
   1294c:	b	12874 <__assert_fail@plt+0x1690>
   12950:	andeq	r7, r1, r4, lsr r8
   12954:	andeq	r2, r1, ip, ror #9
   12958:	andeq	r2, r1, r8, lsl #10
   1295c:	push	{r4, r5, r6, lr}
   12960:	mov	r5, r1
   12964:	ldr	r1, [r0, #32]
   12968:	sub	r3, r1, r5
   1296c:	cmn	r1, #100	; 0x64
   12970:	clz	r3, r3
   12974:	lsr	r3, r3, #5
   12978:	moveq	r3, #0
   1297c:	cmp	r3, #0
   12980:	beq	12988 <__assert_fail@plt+0x17a4>
   12984:	bl	111b4 <abort@plt>
   12988:	cmp	r2, #0
   1298c:	mov	r4, r0
   12990:	beq	129b0 <__assert_fail@plt+0x17cc>
   12994:	add	r0, r0, #60	; 0x3c
   12998:	bl	14ef8 <__assert_fail@plt+0x3d14>
   1299c:	cmp	r0, #0
   129a0:	blt	129a8 <__assert_fail@plt+0x17c4>
   129a4:	bl	111c0 <close@plt>
   129a8:	str	r5, [r4, #32]
   129ac:	pop	{r4, r5, r6, pc}
   129b0:	ldr	r3, [r0, #48]	; 0x30
   129b4:	mvn	r2, r1
   129b8:	lsr	r2, r2, #31
   129bc:	eor	r3, r3, #4
   129c0:	ands	r3, r2, r3, lsr #2
   129c4:	beq	129a8 <__assert_fail@plt+0x17c4>
   129c8:	mov	r0, r1
   129cc:	b	129a4 <__assert_fail@plt+0x17c0>
   129d0:	ldr	r3, [r0, #48]	; 0x30
   129d4:	push	{r4, r5, r6, lr}
   129d8:	mov	r5, r0
   129dc:	ands	r4, r3, #4
   129e0:	movne	r4, #0
   129e4:	bne	129fc <__assert_fail@plt+0x1818>
   129e8:	tst	r3, #512	; 0x200
   129ec:	beq	12a0c <__assert_fail@plt+0x1828>
   129f0:	mov	r2, #1
   129f4:	mvn	r1, #99	; 0x63
   129f8:	bl	1295c <__assert_fail@plt+0x1778>
   129fc:	add	r0, r5, #60	; 0x3c
   12a00:	bl	12828 <__assert_fail@plt+0x1644>
   12a04:	mov	r0, r4
   12a08:	pop	{r4, r5, r6, pc}
   12a0c:	ldr	r0, [r0, #28]
   12a10:	bl	11154 <fchdir@plt>
   12a14:	adds	r4, r0, #0
   12a18:	movne	r4, #1
   12a1c:	b	129fc <__assert_fail@plt+0x1818>
   12a20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a24:	subs	sl, r3, #0
   12a28:	sub	sp, sp, #104	; 0x68
   12a2c:	mov	r7, r0
   12a30:	mov	r8, r1
   12a34:	mov	r6, r2
   12a38:	moveq	r9, sl
   12a3c:	beq	12a54 <__assert_fail@plt+0x1870>
   12a40:	ldr	r1, [pc, #368]	; 12bb8 <__assert_fail@plt+0x19d4>
   12a44:	mov	r0, sl
   12a48:	bl	10f14 <strcmp@plt>
   12a4c:	clz	r9, r0
   12a50:	lsr	r9, r9, #5
   12a54:	ldr	r3, [r7, #48]	; 0x30
   12a58:	ands	r4, r3, #4
   12a5c:	beq	12a88 <__assert_fail@plt+0x18a4>
   12a60:	mvn	r4, r6
   12a64:	lsr	r4, r4, #31
   12a68:	ands	r4, r4, r3, lsr #9
   12a6c:	beq	12a7c <__assert_fail@plt+0x1898>
   12a70:	mov	r0, r6
   12a74:	mov	r4, #0
   12a78:	bl	111c0 <close@plt>
   12a7c:	mov	r0, r4
   12a80:	add	sp, sp, #104	; 0x68
   12a84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a88:	ands	r2, r9, r6, lsr #31
   12a8c:	beq	12b78 <__assert_fail@plt+0x1994>
   12a90:	tst	r3, #512	; 0x200
   12a94:	bne	12ab4 <__assert_fail@plt+0x18d0>
   12a98:	mov	r1, sl
   12a9c:	mov	r0, r7
   12aa0:	bl	127c0 <__assert_fail@plt+0x15dc>
   12aa4:	subs	r5, r0, #0
   12aa8:	bge	12ae0 <__assert_fail@plt+0x18fc>
   12aac:	mvn	r4, #0
   12ab0:	b	12a7c <__assert_fail@plt+0x1898>
   12ab4:	add	r5, r7, #60	; 0x3c
   12ab8:	mov	r0, r5
   12abc:	bl	14ef0 <__assert_fail@plt+0x3d0c>
   12ac0:	cmp	r0, #0
   12ac4:	bne	12a98 <__assert_fail@plt+0x18b4>
   12ac8:	mov	r0, r5
   12acc:	bl	14f3c <__assert_fail@plt+0x3d58>
   12ad0:	subs	r5, r0, #0
   12ad4:	movge	r6, r5
   12ad8:	movge	sl, r4
   12adc:	blt	12a98 <__assert_fail@plt+0x18b4>
   12ae0:	ldr	r3, [r7, #48]	; 0x30
   12ae4:	tst	r3, #2
   12ae8:	bne	12b08 <__assert_fail@plt+0x1924>
   12aec:	cmp	sl, #0
   12af0:	beq	12b88 <__assert_fail@plt+0x19a4>
   12af4:	ldr	r1, [pc, #188]	; 12bb8 <__assert_fail@plt+0x19d4>
   12af8:	mov	r0, sl
   12afc:	bl	10f14 <strcmp@plt>
   12b00:	cmp	r0, #0
   12b04:	bne	12b88 <__assert_fail@plt+0x19a4>
   12b08:	mov	r1, sp
   12b0c:	mov	r0, r5
   12b10:	bl	17ce0 <__assert_fail@plt+0x6afc>
   12b14:	cmp	r0, #0
   12b18:	bne	12b50 <__assert_fail@plt+0x196c>
   12b1c:	ldrd	r2, [sp]
   12b20:	ldrd	r0, [r8, #64]	; 0x40
   12b24:	cmp	r1, r3
   12b28:	cmpeq	r0, r2
   12b2c:	bne	12b44 <__assert_fail@plt+0x1960>
   12b30:	ldrd	r2, [sp, #96]	; 0x60
   12b34:	ldrd	r0, [r8, #160]	; 0xa0
   12b38:	cmp	r1, r3
   12b3c:	cmpeq	r0, r2
   12b40:	beq	12b88 <__assert_fail@plt+0x19a4>
   12b44:	bl	11094 <__errno_location@plt>
   12b48:	mov	r3, #2
   12b4c:	str	r3, [r0]
   12b50:	mvn	r4, #0
   12b54:	cmp	r6, #0
   12b58:	bge	12a7c <__assert_fail@plt+0x1898>
   12b5c:	bl	11094 <__errno_location@plt>
   12b60:	mov	r6, r0
   12b64:	mov	r0, r5
   12b68:	ldr	r7, [r6]
   12b6c:	bl	111c0 <close@plt>
   12b70:	str	r7, [r6]
   12b74:	b	12a7c <__assert_fail@plt+0x1898>
   12b78:	cmp	r6, #0
   12b7c:	movge	r5, r6
   12b80:	bge	12ae0 <__assert_fail@plt+0x18fc>
   12b84:	b	12a98 <__assert_fail@plt+0x18b4>
   12b88:	ldr	r3, [r7, #48]	; 0x30
   12b8c:	tst	r3, #512	; 0x200
   12b90:	beq	12ba8 <__assert_fail@plt+0x19c4>
   12b94:	eor	r2, r9, #1
   12b98:	mov	r1, r5
   12b9c:	mov	r0, r7
   12ba0:	bl	1295c <__assert_fail@plt+0x1778>
   12ba4:	b	12a7c <__assert_fail@plt+0x1898>
   12ba8:	mov	r0, r5
   12bac:	bl	11154 <fchdir@plt>
   12bb0:	mov	r4, r0
   12bb4:	b	12b54 <__assert_fail@plt+0x1970>
   12bb8:	muleq	r1, r2, r7
   12bbc:	ldr	r3, [r0, #36]	; 0x24
   12bc0:	add	r1, r1, #256	; 0x100
   12bc4:	push	{r4, r5, r6, lr}
   12bc8:	mov	r5, r0
   12bcc:	ldr	r0, [r0, #24]
   12bd0:	adds	r1, r3, r1
   12bd4:	bcc	12bf8 <__assert_fail@plt+0x1a14>
   12bd8:	mov	r4, #0
   12bdc:	bl	17834 <__assert_fail@plt+0x6650>
   12be0:	str	r4, [r5, #24]
   12be4:	bl	11094 <__errno_location@plt>
   12be8:	mov	r3, #36	; 0x24
   12bec:	str	r3, [r0]
   12bf0:	mov	r0, r4
   12bf4:	pop	{r4, r5, r6, pc}
   12bf8:	str	r1, [r5, #36]	; 0x24
   12bfc:	bl	173d8 <__assert_fail@plt+0x61f4>
   12c00:	subs	r4, r0, #0
   12c04:	bne	12c18 <__assert_fail@plt+0x1a34>
   12c08:	ldr	r0, [r5, #24]
   12c0c:	bl	17834 <__assert_fail@plt+0x6650>
   12c10:	str	r4, [r5, #24]
   12c14:	b	12bf0 <__assert_fail@plt+0x1a0c>
   12c18:	mov	r0, #1
   12c1c:	str	r4, [r5, #24]
   12c20:	pop	{r4, r5, r6, pc}
   12c24:	ldr	r3, [r0, #48]	; 0x30
   12c28:	movw	r2, #258	; 0x102
   12c2c:	push	{r0, r1, r4, lr}
   12c30:	mov	r4, r0
   12c34:	tst	r2, r3
   12c38:	beq	12c6c <__assert_fail@plt+0x1a88>
   12c3c:	ldr	r3, [pc, #72]	; 12c8c <__assert_fail@plt+0x1aa8>
   12c40:	mov	r1, #0
   12c44:	mov	r0, #31
   12c48:	ldr	r2, [pc, #64]	; 12c90 <__assert_fail@plt+0x1aac>
   12c4c:	str	r3, [sp]
   12c50:	ldr	r3, [pc, #60]	; 12c94 <__assert_fail@plt+0x1ab0>
   12c54:	bl	148d0 <__assert_fail@plt+0x36ec>
   12c58:	str	r0, [r4, #56]	; 0x38
   12c5c:	adds	r0, r0, #0
   12c60:	movne	r0, #1
   12c64:	add	sp, sp, #8
   12c68:	pop	{r4, pc}
   12c6c:	mov	r0, #32
   12c70:	bl	173ac <__assert_fail@plt+0x61c8>
   12c74:	cmp	r0, #0
   12c78:	str	r0, [r4, #56]	; 0x38
   12c7c:	beq	12c64 <__assert_fail@plt+0x1a80>
   12c80:	bl	1748c <__assert_fail@plt+0x62a8>
   12c84:	mov	r0, #1
   12c88:	b	12c64 <__assert_fail@plt+0x1a80>
   12c8c:	andeq	r7, r1, r4, lsr r8
   12c90:	ldrdeq	r2, [r1], -r0
   12c94:	muleq	r1, r4, r4
   12c98:	mov	r3, r0
   12c9c:	movw	r2, #258	; 0x102
   12ca0:	ldr	r0, [r0, #56]	; 0x38
   12ca4:	ldr	r3, [r3, #48]	; 0x30
   12ca8:	tst	r2, r3
   12cac:	beq	12cbc <__assert_fail@plt+0x1ad8>
   12cb0:	cmp	r0, #0
   12cb4:	bxeq	lr
   12cb8:	b	14a38 <__assert_fail@plt+0x3854>
   12cbc:	b	17834 <__assert_fail@plt+0x6650>
   12cc0:	ldr	r3, [r0, #48]	; 0x30
   12cc4:	movw	r2, #258	; 0x102
   12cc8:	push	{r4, r5, r6, lr}
   12ccc:	mov	r6, r0
   12cd0:	mov	r4, r1
   12cd4:	tst	r2, r3
   12cd8:	beq	12d4c <__assert_fail@plt+0x1b68>
   12cdc:	mov	r0, #24
   12ce0:	bl	173ac <__assert_fail@plt+0x61c8>
   12ce4:	subs	r5, r0, #0
   12ce8:	bne	12cf4 <__assert_fail@plt+0x1b10>
   12cec:	mov	r0, #0
   12cf0:	pop	{r4, r5, r6, pc}
   12cf4:	ldrd	r2, [r4, #64]	; 0x40
   12cf8:	mov	r1, r5
   12cfc:	ldr	r0, [r6, #56]	; 0x38
   12d00:	strd	r2, [r5]
   12d04:	ldrd	r2, [r4, #160]	; 0xa0
   12d08:	str	r4, [r5, #16]
   12d0c:	strd	r2, [r5, #8]
   12d10:	bl	14d98 <__assert_fail@plt+0x3bb4>
   12d14:	cmp	r5, r0
   12d18:	mov	r6, r0
   12d1c:	bne	12d28 <__assert_fail@plt+0x1b44>
   12d20:	mov	r0, #1
   12d24:	pop	{r4, r5, r6, pc}
   12d28:	mov	r0, r5
   12d2c:	bl	17834 <__assert_fail@plt+0x6650>
   12d30:	cmp	r6, #0
   12d34:	beq	12cec <__assert_fail@plt+0x1b08>
   12d38:	ldr	r3, [r6, #16]
   12d3c:	str	r3, [r4]
   12d40:	mov	r3, #2
   12d44:	strh	r3, [r4, #56]	; 0x38
   12d48:	b	12d20 <__assert_fail@plt+0x1b3c>
   12d4c:	add	r1, r1, #64	; 0x40
   12d50:	ldr	r0, [r0, #56]	; 0x38
   12d54:	bl	174a8 <__assert_fail@plt+0x62c4>
   12d58:	cmp	r0, #0
   12d5c:	beq	12d20 <__assert_fail@plt+0x1b3c>
   12d60:	mov	r3, #2
   12d64:	str	r4, [r4]
   12d68:	strh	r3, [r4, #56]	; 0x38
   12d6c:	pop	{r4, r5, r6, pc}
   12d70:	ldr	r3, [r0, #48]	; 0x30
   12d74:	mov	r2, r1
   12d78:	movw	r1, #258	; 0x102
   12d7c:	push	{r4, r5, lr}
   12d80:	sub	sp, sp, #28
   12d84:	tst	r1, r3
   12d88:	beq	12dc0 <__assert_fail@plt+0x1bdc>
   12d8c:	ldrd	r4, [r2, #64]	; 0x40
   12d90:	mov	r1, sp
   12d94:	ldrd	r2, [r2, #160]	; 0xa0
   12d98:	ldr	r0, [r0, #56]	; 0x38
   12d9c:	strd	r4, [sp]
   12da0:	strd	r2, [sp, #8]
   12da4:	bl	14dc8 <__assert_fail@plt+0x3be4>
   12da8:	cmp	r0, #0
   12dac:	bne	12db4 <__assert_fail@plt+0x1bd0>
   12db0:	bl	111b4 <abort@plt>
   12db4:	bl	17834 <__assert_fail@plt+0x6650>
   12db8:	add	sp, sp, #28
   12dbc:	pop	{r4, r5, pc}
   12dc0:	ldr	ip, [r2, #4]
   12dc4:	cmp	ip, #0
   12dc8:	beq	12db8 <__assert_fail@plt+0x1bd4>
   12dcc:	ldr	r3, [ip, #48]	; 0x30
   12dd0:	cmp	r3, #0
   12dd4:	blt	12db8 <__assert_fail@plt+0x1bd4>
   12dd8:	ldr	r3, [r0, #56]	; 0x38
   12ddc:	ldrd	r0, [r3, #16]
   12de0:	orrs	r1, r0, r1
   12de4:	beq	12db0 <__assert_fail@plt+0x1bcc>
   12de8:	ldrd	r4, [r3]
   12dec:	ldrd	r0, [r2, #160]	; 0xa0
   12df0:	cmp	r5, r1
   12df4:	cmpeq	r4, r0
   12df8:	bne	12db8 <__assert_fail@plt+0x1bd4>
   12dfc:	ldrd	r0, [r3, #8]
   12e00:	ldrd	r4, [r2, #64]	; 0x40
   12e04:	cmp	r1, r5
   12e08:	cmpeq	r0, r4
   12e0c:	ldrdeq	r0, [ip, #64]	; 0x40
   12e10:	strdeq	r0, [r3, #8]
   12e14:	ldrdeq	r0, [ip, #160]	; 0xa0
   12e18:	strdeq	r0, [r3]
   12e1c:	b	12db8 <__assert_fail@plt+0x1bd4>
   12e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e24:	sub	sp, sp, #60	; 0x3c
   12e28:	mov	r4, r0
   12e2c:	ldr	r5, [r0]
   12e30:	str	r1, [sp, #8]
   12e34:	ldr	r3, [r5, #12]
   12e38:	cmp	r3, #0
   12e3c:	str	r3, [sp]
   12e40:	beq	12e94 <__assert_fail@plt+0x1cb0>
   12e44:	mov	r0, r3
   12e48:	bl	11148 <dirfd@plt>
   12e4c:	cmp	r0, #0
   12e50:	str	r0, [sp, #52]	; 0x34
   12e54:	bge	12f04 <__assert_fail@plt+0x1d20>
   12e58:	mov	r6, #0
   12e5c:	ldr	r0, [r5, #12]
   12e60:	bl	111d8 <closedir@plt>
   12e64:	str	r6, [r5, #12]
   12e68:	ldr	r3, [sp, #8]
   12e6c:	cmp	r3, #3
   12e70:	bne	1308c <__assert_fail@plt+0x1ea8>
   12e74:	mov	r3, #4
   12e78:	strh	r3, [r5, #56]	; 0x38
   12e7c:	bl	11094 <__errno_location@plt>
   12e80:	ldr	r3, [r0]
   12e84:	str	r3, [r5, #32]
   12e88:	mov	r0, r6
   12e8c:	add	sp, sp, #60	; 0x3c
   12e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e94:	ldr	r3, [r0, #48]	; 0x30
   12e98:	ldr	r1, [r5, #24]
   12e9c:	and	r2, r3, #516	; 0x204
   12ea0:	cmp	r2, #512	; 0x200
   12ea4:	ldreq	r0, [r0, #32]
   12ea8:	mvnne	r0, #99	; 0x63
   12eac:	ands	r2, r3, #16
   12eb0:	beq	12ecc <__assert_fail@plt+0x1ce8>
   12eb4:	tst	r3, #1
   12eb8:	moveq	r2, #32768	; 0x8000
   12ebc:	beq	12ecc <__assert_fail@plt+0x1ce8>
   12ec0:	ldr	r2, [r5, #48]	; 0x30
   12ec4:	cmp	r2, #0
   12ec8:	movne	r2, #32768	; 0x8000
   12ecc:	add	r3, sp, #52	; 0x34
   12ed0:	bl	15400 <__assert_fail@plt+0x421c>
   12ed4:	cmp	r0, #0
   12ed8:	mov	r6, r0
   12edc:	str	r0, [r5, #12]
   12ee0:	beq	12e68 <__assert_fail@plt+0x1c84>
   12ee4:	ldrh	r3, [r5, #56]	; 0x38
   12ee8:	cmp	r3, #11
   12eec:	bne	13094 <__assert_fail@plt+0x1eb0>
   12ef0:	mov	r2, #0
   12ef4:	mov	r1, r5
   12ef8:	mov	r0, r4
   12efc:	bl	1255c <__assert_fail@plt+0x1378>
   12f00:	strh	r0, [r5, #56]	; 0x38
   12f04:	ldr	r3, [r4, #44]	; 0x2c
   12f08:	cmp	r3, #0
   12f0c:	ldr	r3, [pc, #1812]	; 13628 <__assert_fail@plt+0x2444>
   12f10:	mvnne	r3, #0
   12f14:	str	r3, [sp, #36]	; 0x24
   12f18:	ldr	r3, [sp]
   12f1c:	cmp	r3, #0
   12f20:	beq	130e0 <__assert_fail@plt+0x1efc>
   12f24:	mov	r3, #1
   12f28:	str	r3, [sp, #24]
   12f2c:	ldr	r2, [r5, #28]
   12f30:	mov	r8, #0
   12f34:	mov	r9, r8
   12f38:	mov	r6, r8
   12f3c:	ldr	r3, [r5, #40]	; 0x28
   12f40:	str	r8, [sp, #20]
   12f44:	str	r8, [sp, #32]
   12f48:	sub	fp, r3, #1
   12f4c:	ldrb	r2, [r2, fp]
   12f50:	cmp	r2, #47	; 0x2f
   12f54:	movne	fp, r3
   12f58:	ldr	r3, [r4, #48]	; 0x30
   12f5c:	ands	r3, r3, #4
   12f60:	ldrne	r3, [r4, #24]
   12f64:	streq	r3, [sp, #4]
   12f68:	addne	r2, r3, fp
   12f6c:	addne	r2, r2, #1
   12f70:	strne	r2, [sp, #4]
   12f74:	movne	r2, #47	; 0x2f
   12f78:	strbne	r2, [r3, fp]
   12f7c:	add	r3, fp, #1
   12f80:	add	r2, fp, #1
   12f84:	str	r3, [sp, #16]
   12f88:	ldr	r3, [r4, #36]	; 0x24
   12f8c:	sub	r3, r3, r2
   12f90:	str	r3, [sp, #28]
   12f94:	ldr	r3, [r5, #48]	; 0x30
   12f98:	add	r3, r3, #1
   12f9c:	str	r3, [sp, #40]	; 0x28
   12fa0:	ldr	r7, [r5, #12]
   12fa4:	cmp	r7, #0
   12fa8:	beq	12ff4 <__assert_fail@plt+0x1e10>
   12fac:	bl	11094 <__errno_location@plt>
   12fb0:	mov	r3, #0
   12fb4:	str	r0, [sp, #12]
   12fb8:	str	r3, [r0]
   12fbc:	mov	r0, r7
   12fc0:	bl	11130 <readdir64@plt>
   12fc4:	subs	r3, r0, #0
   12fc8:	bne	13224 <__assert_fail@plt+0x2040>
   12fcc:	ldr	r3, [sp, #12]
   12fd0:	ldr	r3, [r3]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12ff4 <__assert_fail@plt+0x1e10>
   12fdc:	str	r3, [r5, #32]
   12fe0:	ldr	r3, [sp]
   12fe4:	orrs	r3, r3, r9
   12fe8:	moveq	r3, #4
   12fec:	movne	r3, #7
   12ff0:	strh	r3, [r5, #56]	; 0x38
   12ff4:	ldr	r0, [r5, #12]
   12ff8:	cmp	r0, #0
   12ffc:	beq	1300c <__assert_fail@plt+0x1e28>
   13000:	bl	111d8 <closedir@plt>
   13004:	mov	r3, #0
   13008:	str	r3, [r5, #12]
   1300c:	ldr	r3, [sp, #20]
   13010:	cmp	r3, #0
   13014:	bne	134e4 <__assert_fail@plt+0x2300>
   13018:	ldr	r3, [r4, #48]	; 0x30
   1301c:	tst	r3, #4
   13020:	bne	13560 <__assert_fail@plt+0x237c>
   13024:	ldr	r2, [sp]
   13028:	ldr	r3, [sp, #24]
   1302c:	cmp	r2, #0
   13030:	movne	r3, #0
   13034:	cmp	r3, #0
   13038:	beq	135a4 <__assert_fail@plt+0x23c0>
   1303c:	ldr	r3, [sp, #8]
   13040:	cmp	r9, #0
   13044:	cmpne	r3, #1
   13048:	bne	135d0 <__assert_fail@plt+0x23ec>
   1304c:	ldr	r3, [r5, #48]	; 0x30
   13050:	cmp	r3, #0
   13054:	bne	1358c <__assert_fail@plt+0x23a8>
   13058:	mov	r0, r4
   1305c:	bl	129d0 <__assert_fail@plt+0x17ec>
   13060:	adds	r0, r0, #0
   13064:	movne	r0, #1
   13068:	cmp	r0, #0
   1306c:	beq	135a4 <__assert_fail@plt+0x23c0>
   13070:	mov	r3, #7
   13074:	strh	r3, [r5, #56]	; 0x38
   13078:	ldr	r3, [r4, #48]	; 0x30
   1307c:	orr	r3, r3, #8192	; 0x2000
   13080:	str	r3, [r4, #48]	; 0x30
   13084:	mov	r0, r6
   13088:	bl	127f4 <__assert_fail@plt+0x1610>
   1308c:	mov	r6, #0
   13090:	b	12e88 <__assert_fail@plt+0x1ca4>
   13094:	ldr	r3, [r4, #48]	; 0x30
   13098:	tst	r3, #256	; 0x100
   1309c:	beq	12f04 <__assert_fail@plt+0x1d20>
   130a0:	mov	r1, r5
   130a4:	mov	r0, r4
   130a8:	bl	12d70 <__assert_fail@plt+0x1b8c>
   130ac:	mov	r2, #0
   130b0:	mov	r1, r5
   130b4:	mov	r0, r4
   130b8:	bl	1255c <__assert_fail@plt+0x1378>
   130bc:	mov	r1, r5
   130c0:	mov	r0, r4
   130c4:	bl	12cc0 <__assert_fail@plt+0x1adc>
   130c8:	subs	r6, r0, #0
   130cc:	bne	12f04 <__assert_fail@plt+0x1d20>
   130d0:	bl	11094 <__errno_location@plt>
   130d4:	mov	r3, #12
   130d8:	str	r3, [r0]
   130dc:	b	12e88 <__assert_fail@plt+0x1ca4>
   130e0:	ldr	r3, [sp, #8]
   130e4:	cmp	r3, #2
   130e8:	ldreq	r0, [sp]
   130ec:	beq	13160 <__assert_fail@plt+0x1f7c>
   130f0:	ldr	r3, [r4, #48]	; 0x30
   130f4:	and	r3, r3, #56	; 0x38
   130f8:	cmp	r3, #24
   130fc:	bne	1313c <__assert_fail@plt+0x1f58>
   13100:	ldr	r3, [r5, #84]	; 0x54
   13104:	cmp	r3, #2
   13108:	bne	1313c <__assert_fail@plt+0x1f58>
   1310c:	mov	r0, r5
   13110:	ldr	r1, [sp, #52]	; 0x34
   13114:	bl	12858 <__assert_fail@plt+0x1674>
   13118:	movw	r3, #26985	; 0x6969
   1311c:	cmp	r0, r3
   13120:	beq	1313c <__assert_fail@plt+0x1f58>
   13124:	bgt	13144 <__assert_fail@plt+0x1f60>
   13128:	ldr	r3, [pc, #1276]	; 1362c <__assert_fail@plt+0x2448>
   1312c:	cmp	r0, r3
   13130:	clzne	r0, r0
   13134:	lsrne	r0, r0, #5
   13138:	bne	13160 <__assert_fail@plt+0x1f7c>
   1313c:	mov	r0, #1
   13140:	b	13160 <__assert_fail@plt+0x1f7c>
   13144:	movw	r3, #40864	; 0x9fa0
   13148:	cmp	r0, r3
   1314c:	beq	1313c <__assert_fail@plt+0x1f58>
   13150:	ldr	r3, [pc, #1240]	; 13630 <__assert_fail@plt+0x244c>
   13154:	sub	r0, r0, r3
   13158:	clz	r0, r0
   1315c:	lsr	r0, r0, #5
   13160:	ldr	r3, [sp, #8]
   13164:	mov	r6, r0
   13168:	sub	r7, r3, #3
   1316c:	clz	r7, r7
   13170:	lsr	r7, r7, #5
   13174:	orrs	r3, r7, r0
   13178:	str	r3, [sp, #24]
   1317c:	beq	12f2c <__assert_fail@plt+0x1d48>
   13180:	ldr	r3, [r4, #48]	; 0x30
   13184:	tst	r3, #512	; 0x200
   13188:	beq	131a0 <__assert_fail@plt+0x1fbc>
   1318c:	mov	r2, #3
   13190:	movw	r1, #1030	; 0x406
   13194:	ldr	r0, [sp, #52]	; 0x34
   13198:	bl	17600 <__assert_fail@plt+0x641c>
   1319c:	str	r0, [sp, #52]	; 0x34
   131a0:	ldr	r2, [sp, #52]	; 0x34
   131a4:	cmp	r2, #0
   131a8:	bge	131f8 <__assert_fail@plt+0x2014>
   131ac:	tst	r7, r6
   131b0:	bne	13214 <__assert_fail@plt+0x2030>
   131b4:	ldrh	r3, [r5, #58]	; 0x3a
   131b8:	ldr	r0, [r5, #12]
   131bc:	orr	r3, r3, #1
   131c0:	strh	r3, [r5, #58]	; 0x3a
   131c4:	bl	111d8 <closedir@plt>
   131c8:	mov	r3, #0
   131cc:	str	r3, [r5, #12]
   131d0:	ldr	r3, [r4, #48]	; 0x30
   131d4:	tst	r3, #512	; 0x200
   131d8:	beq	131ec <__assert_fail@plt+0x2008>
   131dc:	ldr	r0, [sp, #52]	; 0x34
   131e0:	cmp	r0, #0
   131e4:	blt	131ec <__assert_fail@plt+0x2008>
   131e8:	bl	111c0 <close@plt>
   131ec:	mov	r3, #0
   131f0:	str	r3, [r5, #12]
   131f4:	b	12f28 <__assert_fail@plt+0x1d44>
   131f8:	mov	r3, #0
   131fc:	mov	r1, r5
   13200:	mov	r0, r4
   13204:	bl	12a20 <__assert_fail@plt+0x183c>
   13208:	cmp	r0, #0
   1320c:	bne	131ac <__assert_fail@plt+0x1fc8>
   13210:	b	12f24 <__assert_fail@plt+0x1d40>
   13214:	bl	11094 <__errno_location@plt>
   13218:	ldr	r3, [r0]
   1321c:	str	r3, [r5, #32]
   13220:	b	131b4 <__assert_fail@plt+0x1fd0>
   13224:	ldr	r2, [r4, #48]	; 0x30
   13228:	tst	r2, #32
   1322c:	bne	13254 <__assert_fail@plt+0x2070>
   13230:	ldrb	r2, [r3, #19]
   13234:	cmp	r2, #46	; 0x2e
   13238:	bne	13254 <__assert_fail@plt+0x2070>
   1323c:	ldrb	r2, [r3, #20]
   13240:	cmp	r2, #0
   13244:	beq	12fa0 <__assert_fail@plt+0x1dbc>
   13248:	ldrh	r2, [r3, #20]
   1324c:	cmp	r2, #46	; 0x2e
   13250:	beq	12fa0 <__assert_fail@plt+0x1dbc>
   13254:	add	r7, r3, #19
   13258:	str	r3, [sp, #44]	; 0x2c
   1325c:	mov	r0, r7
   13260:	bl	11070 <strlen@plt>
   13264:	mov	r2, r0
   13268:	mov	r1, r7
   1326c:	mov	sl, r0
   13270:	mov	r0, r4
   13274:	bl	1274c <__assert_fail@plt+0x1568>
   13278:	subs	r7, r0, #0
   1327c:	beq	132b8 <__assert_fail@plt+0x20d4>
   13280:	ldr	r3, [sp, #28]
   13284:	cmp	r3, sl
   13288:	ldr	r3, [sp, #44]	; 0x2c
   1328c:	bhi	13338 <__assert_fail@plt+0x2154>
   13290:	ldr	r2, [r4, #24]
   13294:	add	r1, fp, #2
   13298:	mov	r0, r4
   1329c:	add	r1, r1, sl
   132a0:	str	r2, [sp, #28]
   132a4:	bl	12bbc <__assert_fail@plt+0x19d8>
   132a8:	cmp	r0, #0
   132ac:	ldr	r2, [sp, #28]
   132b0:	ldr	r3, [sp, #44]	; 0x2c
   132b4:	bne	13300 <__assert_fail@plt+0x211c>
   132b8:	ldr	r3, [sp, #12]
   132bc:	mov	r0, r7
   132c0:	ldr	r8, [r3]
   132c4:	bl	17834 <__assert_fail@plt+0x6650>
   132c8:	mov	r0, r6
   132cc:	mov	r6, #0
   132d0:	bl	127f4 <__assert_fail@plt+0x1610>
   132d4:	ldr	r0, [r5, #12]
   132d8:	bl	111d8 <closedir@plt>
   132dc:	mov	r3, #7
   132e0:	str	r6, [r5, #12]
   132e4:	strh	r3, [r5, #56]	; 0x38
   132e8:	ldr	r3, [r4, #48]	; 0x30
   132ec:	orr	r3, r3, #8192	; 0x2000
   132f0:	str	r3, [r4, #48]	; 0x30
   132f4:	ldr	r3, [sp, #12]
   132f8:	str	r8, [r3]
   132fc:	b	12e88 <__assert_fail@plt+0x1ca4>
   13300:	ldr	r1, [r4, #24]
   13304:	cmp	r1, r2
   13308:	ldreq	r0, [sp, #20]
   1330c:	beq	13324 <__assert_fail@plt+0x2140>
   13310:	ldr	r2, [r4, #48]	; 0x30
   13314:	tst	r2, #4
   13318:	ldrne	r2, [sp, #16]
   1331c:	addne	r2, r1, r2
   13320:	strne	r2, [sp, #4]
   13324:	ldr	r1, [sp, #16]
   13328:	str	r0, [sp, #20]
   1332c:	ldr	r2, [r4, #36]	; 0x24
   13330:	sub	r2, r2, r1
   13334:	str	r2, [sp, #28]
   13338:	ldr	r2, [sp, #16]
   1333c:	adds	r2, r2, sl
   13340:	movcs	sl, #1
   13344:	movcc	sl, #0
   13348:	bcc	13390 <__assert_fail@plt+0x21ac>
   1334c:	mov	r0, r7
   13350:	bl	17834 <__assert_fail@plt+0x6650>
   13354:	mov	r0, r6
   13358:	mov	r6, #0
   1335c:	bl	127f4 <__assert_fail@plt+0x1610>
   13360:	ldr	r0, [r5, #12]
   13364:	bl	111d8 <closedir@plt>
   13368:	mov	r3, #7
   1336c:	ldr	r2, [sp, #12]
   13370:	str	r6, [r5, #12]
   13374:	strh	r3, [r5, #56]	; 0x38
   13378:	ldr	r3, [r4, #48]	; 0x30
   1337c:	orr	r3, r3, #8192	; 0x2000
   13380:	str	r3, [r4, #48]	; 0x30
   13384:	mov	r3, #36	; 0x24
   13388:	str	r3, [r2]
   1338c:	b	12e88 <__assert_fail@plt+0x1ca4>
   13390:	ldr	r1, [sp, #40]	; 0x28
   13394:	str	r1, [r7, #48]	; 0x30
   13398:	ldr	r1, [r4]
   1339c:	str	r1, [r7, #4]
   133a0:	str	r2, [r7, #40]	; 0x28
   133a4:	ldrd	r0, [r3]
   133a8:	ldr	r2, [r4, #48]	; 0x30
   133ac:	strd	r0, [r7, #160]	; 0xa0
   133b0:	add	r1, r7, #168	; 0xa8
   133b4:	tst	r2, #4
   133b8:	streq	r1, [r7, #24]
   133bc:	beq	133e0 <__assert_fail@plt+0x21fc>
   133c0:	ldr	r2, [r7, #28]
   133c4:	str	r3, [sp, #12]
   133c8:	ldr	r0, [sp, #4]
   133cc:	str	r2, [r7, #24]
   133d0:	ldr	r2, [r7, #52]	; 0x34
   133d4:	add	r2, r2, #1
   133d8:	bl	10f2c <memmove@plt>
   133dc:	ldr	r3, [sp, #12]
   133e0:	ldr	r2, [r4, #44]	; 0x2c
   133e4:	ldr	r1, [r4, #48]	; 0x30
   133e8:	cmp	r2, #0
   133ec:	beq	133f8 <__assert_fail@plt+0x2214>
   133f0:	ands	r2, r1, #1024	; 0x400
   133f4:	beq	134c8 <__assert_fail@plt+0x22e4>
   133f8:	ands	r2, r1, #8
   133fc:	ldrb	r3, [r3, #18]
   13400:	beq	1341c <__assert_fail@plt+0x2238>
   13404:	ands	r2, r3, #251	; 0xfb
   13408:	beq	1341c <__assert_fail@plt+0x2238>
   1340c:	ubfx	r1, r1, #4, #1
   13410:	cmp	r3, #10
   13414:	moveq	r2, r1
   13418:	orrne	r2, r1, #1
   1341c:	mov	r1, #11
   13420:	sub	r3, r3, #1
   13424:	cmp	r3, r1
   13428:	strh	r1, [r7, #56]	; 0x38
   1342c:	lslls	r3, r3, #1
   13430:	ldrls	r1, [pc, #508]	; 13634 <__assert_fail@plt+0x2450>
   13434:	ldrhls	sl, [r1, r3]
   13438:	cmp	r2, #0
   1343c:	mov	r3, #0
   13440:	movne	r2, #1
   13444:	moveq	r2, #2
   13448:	str	sl, [r7, #80]	; 0x50
   1344c:	strd	r2, [r7, #112]	; 0x70
   13450:	mov	r3, #0
   13454:	cmp	r6, r3
   13458:	str	r3, [r7, #8]
   1345c:	moveq	r6, r7
   13460:	ldrne	r3, [sp, #32]
   13464:	strne	r7, [r3, #8]
   13468:	movw	r3, #10000	; 0x2710
   1346c:	cmp	r9, r3
   13470:	bne	134b0 <__assert_fail@plt+0x22cc>
   13474:	ldr	sl, [r4, #44]	; 0x2c
   13478:	cmp	sl, #0
   1347c:	bne	134b0 <__assert_fail@plt+0x22cc>
   13480:	mov	r0, r5
   13484:	ldr	r1, [sp, #52]	; 0x34
   13488:	bl	12858 <__assert_fail@plt+0x1674>
   1348c:	movw	r3, #26985	; 0x6969
   13490:	cmp	r0, r3
   13494:	beq	134dc <__assert_fail@plt+0x22f8>
   13498:	ldr	r3, [pc, #408]	; 13638 <__assert_fail@plt+0x2454>
   1349c:	cmp	r0, r3
   134a0:	beq	134dc <__assert_fail@plt+0x22f8>
   134a4:	ldr	r3, [pc, #384]	; 1362c <__assert_fail@plt+0x2448>
   134a8:	subs	r8, r0, r3
   134ac:	movne	r8, #1
   134b0:	ldr	r3, [sp, #36]	; 0x24
   134b4:	add	r9, r9, #1
   134b8:	cmp	r3, r9
   134bc:	bls	1300c <__assert_fail@plt+0x1e28>
   134c0:	str	r7, [sp, #32]
   134c4:	b	12fa0 <__assert_fail@plt+0x1dbc>
   134c8:	mov	r1, r7
   134cc:	mov	r0, r4
   134d0:	bl	1255c <__assert_fail@plt+0x1378>
   134d4:	strh	r0, [r7, #56]	; 0x38
   134d8:	b	13450 <__assert_fail@plt+0x226c>
   134dc:	mov	r8, sl
   134e0:	b	134b0 <__assert_fail@plt+0x22cc>
   134e4:	ldr	r3, [r4, #4]
   134e8:	ldr	r1, [r4, #24]
   134ec:	cmp	r3, #0
   134f0:	bne	13538 <__assert_fail@plt+0x2354>
   134f4:	mov	r3, r6
   134f8:	ldr	r2, [r3, #48]	; 0x30
   134fc:	cmp	r2, #0
   13500:	blt	13018 <__assert_fail@plt+0x1e34>
   13504:	ldr	r2, [r3, #24]
   13508:	add	r0, r3, #168	; 0xa8
   1350c:	cmp	r2, r0
   13510:	ldrne	r0, [r3, #28]
   13514:	str	r1, [r3, #28]
   13518:	subne	r2, r2, r0
   1351c:	addne	r2, r1, r2
   13520:	strne	r2, [r3, #24]
   13524:	ldr	r2, [r3, #8]
   13528:	cmp	r2, #0
   1352c:	ldreq	r2, [r3, #4]
   13530:	mov	r3, r2
   13534:	b	134f8 <__assert_fail@plt+0x2314>
   13538:	ldr	r2, [r3, #24]
   1353c:	add	r0, r3, #168	; 0xa8
   13540:	cmp	r2, r0
   13544:	ldrne	r0, [r3, #28]
   13548:	str	r1, [r3, #28]
   1354c:	subne	r2, r2, r0
   13550:	addne	r2, r1, r2
   13554:	strne	r2, [r3, #24]
   13558:	ldr	r3, [r3, #8]
   1355c:	b	134ec <__assert_fail@plt+0x2308>
   13560:	ldr	r2, [sp, #16]
   13564:	ldr	r3, [r4, #36]	; 0x24
   13568:	cmp	r9, #0
   1356c:	cmpne	r3, r2
   13570:	ldreq	r3, [sp, #4]
   13574:	subeq	r3, r3, #1
   13578:	streq	r3, [sp, #4]
   1357c:	mov	r3, #0
   13580:	ldr	r2, [sp, #4]
   13584:	strb	r3, [r2]
   13588:	b	13024 <__assert_fail@plt+0x1e40>
   1358c:	ldr	r3, [pc, #168]	; 1363c <__assert_fail@plt+0x2458>
   13590:	mvn	r2, #0
   13594:	mov	r0, r4
   13598:	ldr	r1, [r5, #4]
   1359c:	bl	12a20 <__assert_fail@plt+0x183c>
   135a0:	b	13060 <__assert_fail@plt+0x1e7c>
   135a4:	cmp	r9, #0
   135a8:	bne	135d0 <__assert_fail@plt+0x23ec>
   135ac:	ldr	r3, [sp, #8]
   135b0:	cmp	r3, #3
   135b4:	bne	13084 <__assert_fail@plt+0x1ea0>
   135b8:	ldrh	r3, [r5, #56]	; 0x38
   135bc:	cmp	r3, #4
   135c0:	cmpne	r3, #7
   135c4:	movne	r3, #6
   135c8:	strhne	r3, [r5, #56]	; 0x38
   135cc:	b	13084 <__assert_fail@plt+0x1ea0>
   135d0:	cmp	r8, #0
   135d4:	beq	13600 <__assert_fail@plt+0x241c>
   135d8:	ldr	r3, [pc, #96]	; 13640 <__assert_fail@plt+0x245c>
   135dc:	mov	r1, r6
   135e0:	mov	r2, r9
   135e4:	mov	r0, r4
   135e8:	str	r3, [r4, #44]	; 0x2c
   135ec:	bl	12694 <__assert_fail@plt+0x14b0>
   135f0:	mov	r3, #0
   135f4:	mov	r6, r0
   135f8:	str	r3, [r4, #44]	; 0x2c
   135fc:	b	12e88 <__assert_fail@plt+0x1ca4>
   13600:	ldr	r3, [r4, #44]	; 0x2c
   13604:	cmp	r3, #0
   13608:	cmpne	r9, #1
   1360c:	beq	12e88 <__assert_fail@plt+0x1ca4>
   13610:	mov	r1, r6
   13614:	mov	r2, r9
   13618:	mov	r0, r4
   1361c:	bl	12694 <__assert_fail@plt+0x14b0>
   13620:	mov	r6, r0
   13624:	b	12e88 <__assert_fail@plt+0x1ca4>
   13628:	andeq	r8, r1, r0, lsr #13
   1362c:			; <UNDEFINED> instruction: 0xff534d42
   13630:	movtpl	r4, #24911	; 0x614f
   13634:	andeq	r8, r1, sl, ror r7
   13638:			; <UNDEFINED> instruction: 0x01021994
   1363c:	muleq	r1, r2, r7
   13640:	andeq	r2, r1, r8, lsr #10
   13644:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13648:	bic	r4, r1, #4080	; 0xff0
   1364c:	bic	r4, r4, #15
   13650:	cmp	r4, #0
   13654:	str	r0, [sp]
   13658:	beq	13670 <__assert_fail@plt+0x248c>
   1365c:	bl	11094 <__errno_location@plt>
   13660:	mov	r3, #22
   13664:	str	r3, [r0]
   13668:	mov	r4, #0
   1366c:	b	1368c <__assert_fail@plt+0x24a8>
   13670:	and	r3, r1, #516	; 0x204
   13674:	mov	r6, r1
   13678:	cmp	r3, #516	; 0x204
   1367c:	bne	13698 <__assert_fail@plt+0x24b4>
   13680:	bl	11094 <__errno_location@plt>
   13684:	mov	r3, #22
   13688:	str	r3, [r0]
   1368c:	mov	r0, r4
   13690:	add	sp, sp, #12
   13694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13698:	ands	r4, r1, #18
   1369c:	beq	13680 <__assert_fail@plt+0x249c>
   136a0:	mov	r1, #96	; 0x60
   136a4:	mov	r0, #1
   136a8:	mov	sl, r2
   136ac:	bl	17358 <__assert_fail@plt+0x6174>
   136b0:	subs	r4, r0, #0
   136b4:	beq	1368c <__assert_fail@plt+0x24a8>
   136b8:	tst	r6, #2
   136bc:	mov	r5, #0
   136c0:	str	sl, [r4, #44]	; 0x2c
   136c4:	bicne	r3, r6, #512	; 0x200
   136c8:	orrne	r3, r3, #4
   136cc:	streq	r6, [r4, #48]	; 0x30
   136d0:	strne	r3, [r4, #48]	; 0x30
   136d4:	mvn	r3, #99	; 0x63
   136d8:	str	r3, [r4, #32]
   136dc:	ldr	r3, [sp]
   136e0:	sub	r8, r3, #4
   136e4:	ldr	r7, [r8, #4]!
   136e8:	cmp	r7, #0
   136ec:	bne	13810 <__assert_fail@plt+0x262c>
   136f0:	add	r1, r5, #1
   136f4:	mov	r0, r4
   136f8:	cmp	r1, #4096	; 0x1000
   136fc:	movcc	r1, #4096	; 0x1000
   13700:	bl	12bbc <__assert_fail@plt+0x19d8>
   13704:	cmp	r0, #0
   13708:	beq	13920 <__assert_fail@plt+0x273c>
   1370c:	ldr	r3, [sp]
   13710:	ldr	r8, [r3]
   13714:	cmp	r8, #0
   13718:	beq	1373c <__assert_fail@plt+0x2558>
   1371c:	mov	r2, r7
   13720:	ldr	r1, [pc, #516]	; 1392c <__assert_fail@plt+0x2748>
   13724:	mov	r0, r4
   13728:	bl	1274c <__assert_fail@plt+0x1568>
   1372c:	subs	r8, r0, #0
   13730:	beq	13918 <__assert_fail@plt+0x2734>
   13734:	mvn	r3, #0
   13738:	str	r3, [r8, #48]	; 0x30
   1373c:	cmp	sl, #0
   13740:	eor	r6, r6, #2048	; 0x800
   13744:	ldrne	r3, [r4, #48]	; 0x30
   13748:	mov	fp, #0
   1374c:	ubfx	r6, r6, #11, #1
   13750:	moveq	r3, #1
   13754:	mov	r7, fp
   13758:	mov	r9, fp
   1375c:	ubfxne	r3, r3, #10, #1
   13760:	str	r3, [sp, #4]
   13764:	ldr	r3, [sp]
   13768:	ldr	r5, [r3, r9, lsl #2]
   1376c:	cmp	r5, #0
   13770:	bne	13824 <__assert_fail@plt+0x2640>
   13774:	cmp	sl, #0
   13778:	cmpne	r9, #1
   1377c:	bls	13794 <__assert_fail@plt+0x25b0>
   13780:	mov	r1, r7
   13784:	mov	r2, r9
   13788:	mov	r0, r4
   1378c:	bl	12694 <__assert_fail@plt+0x14b0>
   13790:	mov	r7, r0
   13794:	mov	r2, #0
   13798:	ldr	r1, [pc, #396]	; 1392c <__assert_fail@plt+0x2748>
   1379c:	mov	r0, r4
   137a0:	bl	1274c <__assert_fail@plt+0x1568>
   137a4:	cmp	r0, #0
   137a8:	str	r0, [r4]
   137ac:	beq	13908 <__assert_fail@plt+0x2724>
   137b0:	mov	r3, #9
   137b4:	str	r7, [r0, #8]
   137b8:	strh	r3, [r0, #56]	; 0x38
   137bc:	mov	r3, #1
   137c0:	str	r3, [r0, #48]	; 0x30
   137c4:	mov	r0, r4
   137c8:	bl	12c24 <__assert_fail@plt+0x1a40>
   137cc:	cmp	r0, #0
   137d0:	beq	13908 <__assert_fail@plt+0x2724>
   137d4:	ldr	r3, [r4, #48]	; 0x30
   137d8:	tst	r3, #516	; 0x204
   137dc:	bne	13800 <__assert_fail@plt+0x261c>
   137e0:	ldr	r1, [pc, #328]	; 13930 <__assert_fail@plt+0x274c>
   137e4:	mov	r0, r4
   137e8:	bl	127c0 <__assert_fail@plt+0x15dc>
   137ec:	cmp	r0, #0
   137f0:	str	r0, [r4, #28]
   137f4:	ldrlt	r3, [r4, #48]	; 0x30
   137f8:	orrlt	r3, r3, #4
   137fc:	strlt	r3, [r4, #48]	; 0x30
   13800:	mvn	r1, #0
   13804:	add	r0, r4, #60	; 0x3c
   13808:	bl	14ec4 <__assert_fail@plt+0x3ce0>
   1380c:	b	1368c <__assert_fail@plt+0x24a8>
   13810:	mov	r0, r7
   13814:	bl	11070 <strlen@plt>
   13818:	cmp	r5, r0
   1381c:	movcc	r5, r0
   13820:	b	136e4 <__assert_fail@plt+0x2500>
   13824:	mov	r0, r5
   13828:	bl	11070 <strlen@plt>
   1382c:	cmp	r0, #2
   13830:	movls	r1, #0
   13834:	andhi	r1, r6, #1
   13838:	mov	r2, r0
   1383c:	cmp	r1, #0
   13840:	beq	13858 <__assert_fail@plt+0x2674>
   13844:	add	r1, r5, r0
   13848:	ldrb	r1, [r1, #-1]
   1384c:	cmp	r1, #47	; 0x2f
   13850:	subeq	r0, r5, #2
   13854:	beq	138e4 <__assert_fail@plt+0x2700>
   13858:	mov	r1, r5
   1385c:	mov	r0, r4
   13860:	bl	1274c <__assert_fail@plt+0x1568>
   13864:	subs	r5, r0, #0
   13868:	beq	13908 <__assert_fail@plt+0x2724>
   1386c:	mov	r2, #0
   13870:	cmp	r7, #0
   13874:	str	r8, [r5, #4]
   13878:	str	r2, [r5, #48]	; 0x30
   1387c:	add	r2, r5, #168	; 0xa8
   13880:	str	r2, [r5, #24]
   13884:	ldr	r2, [sp, #4]
   13888:	moveq	r2, #0
   1388c:	cmp	r2, #0
   13890:	beq	138f4 <__assert_fail@plt+0x2710>
   13894:	mov	r2, #11
   13898:	mov	r0, #2
   1389c:	mov	r1, #0
   138a0:	strh	r2, [r5, #56]	; 0x38
   138a4:	strd	r0, [r5, #112]	; 0x70
   138a8:	cmp	sl, #0
   138ac:	strne	r7, [r5, #8]
   138b0:	bne	138cc <__assert_fail@plt+0x26e8>
   138b4:	cmp	r7, #0
   138b8:	str	sl, [r5, #8]
   138bc:	moveq	fp, r5
   138c0:	strne	r5, [fp, #8]
   138c4:	movne	fp, r5
   138c8:	movne	r5, r7
   138cc:	add	r9, r9, #1
   138d0:	mov	r7, r5
   138d4:	b	13764 <__assert_fail@plt+0x2580>
   138d8:	sub	r2, r2, #1
   138dc:	cmp	r2, #1
   138e0:	beq	13858 <__assert_fail@plt+0x2674>
   138e4:	ldrb	r1, [r0, r2]
   138e8:	cmp	r1, #47	; 0x2f
   138ec:	beq	138d8 <__assert_fail@plt+0x26f4>
   138f0:	b	13858 <__assert_fail@plt+0x2674>
   138f4:	mov	r1, r5
   138f8:	mov	r0, r4
   138fc:	bl	1255c <__assert_fail@plt+0x1378>
   13900:	strh	r0, [r5, #56]	; 0x38
   13904:	b	138a8 <__assert_fail@plt+0x26c4>
   13908:	mov	r0, r7
   1390c:	bl	127f4 <__assert_fail@plt+0x1610>
   13910:	mov	r0, r8
   13914:	bl	17834 <__assert_fail@plt+0x6650>
   13918:	ldr	r0, [r4, #24]
   1391c:	bl	17834 <__assert_fail@plt+0x6650>
   13920:	mov	r0, r4
   13924:	bl	17834 <__assert_fail@plt+0x6650>
   13928:	b	13668 <__assert_fail@plt+0x2484>
   1392c:	andeq	r7, r1, r8, lsr pc
   13930:	muleq	r1, r3, r7
   13934:	push	{r4, r5, r6, lr}
   13938:	mov	r4, r0
   1393c:	ldr	r0, [r0]
   13940:	cmp	r0, #0
   13944:	bne	139dc <__assert_fail@plt+0x27f8>
   13948:	ldr	r0, [r4, #4]
   1394c:	cmp	r0, #0
   13950:	beq	13958 <__assert_fail@plt+0x2774>
   13954:	bl	127f4 <__assert_fail@plt+0x1610>
   13958:	ldr	r0, [r4, #8]
   1395c:	bl	17834 <__assert_fail@plt+0x6650>
   13960:	ldr	r0, [r4, #24]
   13964:	bl	17834 <__assert_fail@plt+0x6650>
   13968:	ldr	r3, [r4, #48]	; 0x30
   1396c:	tst	r3, #512	; 0x200
   13970:	beq	13a08 <__assert_fail@plt+0x2824>
   13974:	ldr	r0, [r4, #32]
   13978:	cmp	r0, #0
   1397c:	bge	139f0 <__assert_fail@plt+0x280c>
   13980:	mov	r5, #0
   13984:	add	r0, r4, #60	; 0x3c
   13988:	bl	12828 <__assert_fail@plt+0x1644>
   1398c:	ldr	r0, [r4, #52]	; 0x34
   13990:	cmp	r0, #0
   13994:	beq	1399c <__assert_fail@plt+0x27b8>
   13998:	bl	14a38 <__assert_fail@plt+0x3854>
   1399c:	mov	r0, r4
   139a0:	bl	12c98 <__assert_fail@plt+0x1ab4>
   139a4:	mov	r0, r4
   139a8:	bl	17834 <__assert_fail@plt+0x6650>
   139ac:	cmp	r5, #0
   139b0:	beq	139c0 <__assert_fail@plt+0x27dc>
   139b4:	bl	11094 <__errno_location@plt>
   139b8:	str	r5, [r0]
   139bc:	mvn	r5, #0
   139c0:	mov	r0, r5
   139c4:	pop	{r4, r5, r6, pc}
   139c8:	ldr	r5, [r0, #8]
   139cc:	cmp	r5, #0
   139d0:	ldreq	r5, [r0, #4]
   139d4:	bl	17834 <__assert_fail@plt+0x6650>
   139d8:	mov	r0, r5
   139dc:	ldr	r3, [r0, #48]	; 0x30
   139e0:	cmp	r3, #0
   139e4:	bge	139c8 <__assert_fail@plt+0x27e4>
   139e8:	bl	17834 <__assert_fail@plt+0x6650>
   139ec:	b	13948 <__assert_fail@plt+0x2764>
   139f0:	bl	111c0 <close@plt>
   139f4:	cmp	r0, #0
   139f8:	beq	13980 <__assert_fail@plt+0x279c>
   139fc:	bl	11094 <__errno_location@plt>
   13a00:	ldr	r5, [r0]
   13a04:	b	13984 <__assert_fail@plt+0x27a0>
   13a08:	tst	r3, #4
   13a0c:	bne	13980 <__assert_fail@plt+0x279c>
   13a10:	ldr	r0, [r4, #28]
   13a14:	bl	11154 <fchdir@plt>
   13a18:	subs	r5, r0, #0
   13a1c:	beq	13a28 <__assert_fail@plt+0x2844>
   13a20:	bl	11094 <__errno_location@plt>
   13a24:	ldr	r5, [r0]
   13a28:	ldr	r0, [r4, #28]
   13a2c:	bl	111c0 <close@plt>
   13a30:	adds	r0, r0, #0
   13a34:	movne	r0, #1
   13a38:	cmp	r5, #0
   13a3c:	movne	r0, #0
   13a40:	cmp	r0, #0
   13a44:	beq	13984 <__assert_fail@plt+0x27a0>
   13a48:	b	139fc <__assert_fail@plt+0x2818>
   13a4c:	push	{r4, r5, r6, r7, r8, lr}
   13a50:	ldr	r4, [r0]
   13a54:	cmp	r4, #0
   13a58:	bne	13a68 <__assert_fail@plt+0x2884>
   13a5c:	mov	r4, #0
   13a60:	mov	r0, r4
   13a64:	pop	{r4, r5, r6, r7, r8, pc}
   13a68:	ldr	r1, [r0, #48]	; 0x30
   13a6c:	mov	r5, r0
   13a70:	ands	r2, r1, #8192	; 0x2000
   13a74:	bne	13a5c <__assert_fail@plt+0x2878>
   13a78:	ldrh	ip, [r4, #60]	; 0x3c
   13a7c:	mov	r3, #3
   13a80:	strh	r3, [r4, #60]	; 0x3c
   13a84:	cmp	ip, #1
   13a88:	bne	13a9c <__assert_fail@plt+0x28b8>
   13a8c:	mov	r1, r4
   13a90:	bl	1255c <__assert_fail@plt+0x1378>
   13a94:	strh	r0, [r4, #56]	; 0x38
   13a98:	b	13a60 <__assert_fail@plt+0x287c>
   13a9c:	cmp	ip, #2
   13aa0:	ldrh	r3, [r4, #56]	; 0x38
   13aa4:	bne	13b84 <__assert_fail@plt+0x29a0>
   13aa8:	sub	r2, r3, #12
   13aac:	cmp	r2, #1
   13ab0:	bhi	13f78 <__assert_fail@plt+0x2d94>
   13ab4:	mov	r2, #1
   13ab8:	mov	r1, r4
   13abc:	bl	1255c <__assert_fail@plt+0x1378>
   13ac0:	cmp	r0, #1
   13ac4:	strh	r0, [r4, #56]	; 0x38
   13ac8:	bne	13b10 <__assert_fail@plt+0x292c>
   13acc:	ldr	r3, [r5, #48]	; 0x30
   13ad0:	tst	r3, #4
   13ad4:	bne	13b10 <__assert_fail@plt+0x292c>
   13ad8:	ldr	r1, [pc, #1320]	; 14008 <__assert_fail@plt+0x2e24>
   13adc:	mov	r0, r5
   13ae0:	bl	127c0 <__assert_fail@plt+0x15dc>
   13ae4:	cmp	r0, #0
   13ae8:	str	r0, [r4, #36]	; 0x24
   13aec:	ldrhge	r3, [r4, #58]	; 0x3a
   13af0:	orrge	r3, r3, #2
   13af4:	strhge	r3, [r4, #58]	; 0x3a
   13af8:	bge	13b10 <__assert_fail@plt+0x292c>
   13afc:	bl	11094 <__errno_location@plt>
   13b00:	ldr	r3, [r0]
   13b04:	str	r3, [r4, #32]
   13b08:	mov	r3, #7
   13b0c:	strh	r3, [r4, #56]	; 0x38
   13b10:	ldrh	r3, [r4, #56]	; 0x38
   13b14:	str	r4, [r5]
   13b18:	cmp	r3, #11
   13b1c:	bne	13b44 <__assert_fail@plt+0x2960>
   13b20:	ldrd	r2, [r4, #112]	; 0x70
   13b24:	cmp	r3, #0
   13b28:	cmpeq	r2, #2
   13b2c:	bne	13dc0 <__assert_fail@plt+0x2bdc>
   13b30:	mov	r2, #0
   13b34:	mov	r1, r4
   13b38:	mov	r0, r5
   13b3c:	bl	1255c <__assert_fail@plt+0x1378>
   13b40:	strh	r0, [r4, #56]	; 0x38
   13b44:	ldrh	r3, [r4, #56]	; 0x38
   13b48:	cmp	r3, #1
   13b4c:	bne	13a60 <__assert_fail@plt+0x287c>
   13b50:	ldr	r3, [r4, #48]	; 0x30
   13b54:	mov	r0, r5
   13b58:	mov	r1, r4
   13b5c:	cmp	r3, #0
   13b60:	ldrdeq	r2, [r4, #64]	; 0x40
   13b64:	strdeq	r2, [r5, #16]
   13b68:	bl	12cc0 <__assert_fail@plt+0x1adc>
   13b6c:	subs	r5, r0, #0
   13b70:	bne	13a60 <__assert_fail@plt+0x287c>
   13b74:	bl	11094 <__errno_location@plt>
   13b78:	mov	r3, #12
   13b7c:	str	r3, [r0]
   13b80:	b	13a5c <__assert_fail@plt+0x2878>
   13b84:	cmp	r3, #1
   13b88:	bne	13f80 <__assert_fail@plt+0x2d9c>
   13b8c:	cmp	ip, #4
   13b90:	beq	13bb0 <__assert_fail@plt+0x29cc>
   13b94:	tst	r1, #64	; 0x40
   13b98:	beq	13bf4 <__assert_fail@plt+0x2a10>
   13b9c:	ldrd	r2, [r5, #16]
   13ba0:	ldrd	r6, [r4, #64]	; 0x40
   13ba4:	cmp	r7, r3
   13ba8:	cmpeq	r6, r2
   13bac:	beq	13bf4 <__assert_fail@plt+0x2a10>
   13bb0:	ldrh	r3, [r4, #58]	; 0x3a
   13bb4:	tst	r3, #2
   13bb8:	beq	13bc4 <__assert_fail@plt+0x29e0>
   13bbc:	ldr	r0, [r4, #36]	; 0x24
   13bc0:	bl	111c0 <close@plt>
   13bc4:	ldr	r0, [r5, #4]
   13bc8:	cmp	r0, #0
   13bcc:	beq	13bdc <__assert_fail@plt+0x29f8>
   13bd0:	bl	127f4 <__assert_fail@plt+0x1610>
   13bd4:	mov	r3, #0
   13bd8:	str	r3, [r5, #4]
   13bdc:	mov	r3, #6
   13be0:	strh	r3, [r4, #56]	; 0x38
   13be4:	mov	r1, r4
   13be8:	mov	r0, r5
   13bec:	bl	12d70 <__assert_fail@plt+0x1b8c>
   13bf0:	b	13a60 <__assert_fail@plt+0x287c>
   13bf4:	ldr	r0, [r5, #4]
   13bf8:	cmp	r0, #0
   13bfc:	beq	13c1c <__assert_fail@plt+0x2a38>
   13c00:	tst	r1, #4096	; 0x1000
   13c04:	beq	13ee8 <__assert_fail@plt+0x2d04>
   13c08:	bic	r1, r1, #4096	; 0x1000
   13c0c:	str	r1, [r5, #48]	; 0x30
   13c10:	bl	127f4 <__assert_fail@plt+0x1610>
   13c14:	mov	r3, #0
   13c18:	str	r3, [r5, #4]
   13c1c:	mov	r1, #3
   13c20:	mov	r0, r5
   13c24:	bl	12e20 <__assert_fail@plt+0x1c3c>
   13c28:	cmp	r0, #0
   13c2c:	str	r0, [r5, #4]
   13c30:	bne	13f28 <__assert_fail@plt+0x2d44>
   13c34:	ldr	r3, [r5, #48]	; 0x30
   13c38:	tst	r3, #8192	; 0x2000
   13c3c:	bne	13a5c <__assert_fail@plt+0x2878>
   13c40:	ldr	r3, [r4, #32]
   13c44:	cmp	r3, #0
   13c48:	beq	13be4 <__assert_fail@plt+0x2a00>
   13c4c:	ldrh	r3, [r4, #56]	; 0x38
   13c50:	cmp	r3, #4
   13c54:	beq	13be4 <__assert_fail@plt+0x2a00>
   13c58:	mov	r3, #7
   13c5c:	b	13be0 <__assert_fail@plt+0x29fc>
   13c60:	ldr	r2, [r3, #4]
   13c64:	ldr	r2, [r2, #24]
   13c68:	str	r2, [r3, #24]
   13c6c:	ldr	r3, [r3, #8]
   13c70:	b	13f20 <__assert_fail@plt+0x2d3c>
   13c74:	mov	r0, r6
   13c78:	bl	17834 <__assert_fail@plt+0x6650>
   13c7c:	b	13f34 <__assert_fail@plt+0x2d50>
   13c80:	mov	r0, r6
   13c84:	str	r4, [r5]
   13c88:	bl	17834 <__assert_fail@plt+0x6650>
   13c8c:	ldr	r6, [r4, #48]	; 0x30
   13c90:	cmp	r6, #0
   13c94:	bne	13d3c <__assert_fail@plt+0x2b58>
   13c98:	mov	r0, r5
   13c9c:	bl	129d0 <__assert_fail@plt+0x17ec>
   13ca0:	cmp	r0, #0
   13ca4:	ldrne	r3, [r5, #48]	; 0x30
   13ca8:	orrne	r3, r3, #8192	; 0x2000
   13cac:	strne	r3, [r5, #48]	; 0x30
   13cb0:	bne	13a5c <__assert_fail@plt+0x2878>
   13cb4:	mov	r0, r5
   13cb8:	add	r6, r4, #168	; 0xa8
   13cbc:	bl	12c98 <__assert_fail@plt+0x1ab4>
   13cc0:	ldr	r2, [r4, #52]	; 0x34
   13cc4:	mov	r1, r6
   13cc8:	ldr	r0, [r5, #24]
   13ccc:	str	r2, [r4, #40]	; 0x28
   13cd0:	add	r2, r2, #1
   13cd4:	bl	10f2c <memmove@plt>
   13cd8:	mov	r1, #47	; 0x2f
   13cdc:	mov	r0, r6
   13ce0:	bl	11118 <strrchr@plt>
   13ce4:	cmp	r0, #0
   13ce8:	beq	13d24 <__assert_fail@plt+0x2b40>
   13cec:	cmp	r6, r0
   13cf0:	bne	13d00 <__assert_fail@plt+0x2b1c>
   13cf4:	ldrb	r3, [r6, #1]
   13cf8:	cmp	r3, #0
   13cfc:	beq	13d24 <__assert_fail@plt+0x2b40>
   13d00:	add	r7, r0, #1
   13d04:	mov	r0, r7
   13d08:	bl	11070 <strlen@plt>
   13d0c:	mov	r8, r0
   13d10:	add	r2, r0, #1
   13d14:	mov	r1, r7
   13d18:	mov	r0, r6
   13d1c:	bl	10f2c <memmove@plt>
   13d20:	str	r8, [r4, #52]	; 0x34
   13d24:	ldr	r3, [r5, #24]
   13d28:	mov	r0, r5
   13d2c:	str	r3, [r4, #24]
   13d30:	str	r3, [r4, #28]
   13d34:	bl	12c24 <__assert_fail@plt+0x1a40>
   13d38:	b	13b10 <__assert_fail@plt+0x292c>
   13d3c:	ldrh	r3, [r4, #60]	; 0x3c
   13d40:	mov	r6, r4
   13d44:	cmp	r3, #4
   13d48:	beq	13f84 <__assert_fail@plt+0x2da0>
   13d4c:	cmp	r3, #2
   13d50:	bne	13f34 <__assert_fail@plt+0x2d50>
   13d54:	mov	r2, #1
   13d58:	mov	r1, r4
   13d5c:	mov	r0, r5
   13d60:	bl	1255c <__assert_fail@plt+0x1378>
   13d64:	cmp	r0, #1
   13d68:	strh	r0, [r4, #56]	; 0x38
   13d6c:	bne	13db4 <__assert_fail@plt+0x2bd0>
   13d70:	ldr	r3, [r5, #48]	; 0x30
   13d74:	tst	r3, #4
   13d78:	bne	13db4 <__assert_fail@plt+0x2bd0>
   13d7c:	ldr	r1, [pc, #644]	; 14008 <__assert_fail@plt+0x2e24>
   13d80:	mov	r0, r5
   13d84:	bl	127c0 <__assert_fail@plt+0x15dc>
   13d88:	cmp	r0, #0
   13d8c:	str	r0, [r4, #36]	; 0x24
   13d90:	ldrhge	r3, [r4, #58]	; 0x3a
   13d94:	orrge	r3, r3, #2
   13d98:	strhge	r3, [r4, #58]	; 0x3a
   13d9c:	bge	13db4 <__assert_fail@plt+0x2bd0>
   13da0:	bl	11094 <__errno_location@plt>
   13da4:	ldr	r3, [r0]
   13da8:	str	r3, [r4, #32]
   13dac:	mov	r3, #7
   13db0:	strh	r3, [r4, #56]	; 0x38
   13db4:	mov	r3, #3
   13db8:	strh	r3, [r4, #60]	; 0x3c
   13dbc:	b	13f34 <__assert_fail@plt+0x2d50>
   13dc0:	cmp	r3, #0
   13dc4:	cmpeq	r2, #1
   13dc8:	beq	13a60 <__assert_fail@plt+0x287c>
   13dcc:	bl	111b4 <abort@plt>
   13dd0:	ldrh	r3, [r4, #56]	; 0x38
   13dd4:	cmp	r3, #11
   13dd8:	beq	13dcc <__assert_fail@plt+0x2be8>
   13ddc:	ldr	r2, [r5, #24]
   13de0:	mov	r1, #0
   13de4:	ldr	r3, [r4, #40]	; 0x28
   13de8:	strb	r1, [r2, r3]
   13dec:	ldr	r3, [r4, #48]	; 0x30
   13df0:	cmp	r3, r1
   13df4:	bne	13e24 <__assert_fail@plt+0x2c40>
   13df8:	mov	r0, r5
   13dfc:	bl	129d0 <__assert_fail@plt+0x17ec>
   13e00:	cmp	r0, #0
   13e04:	beq	13e5c <__assert_fail@plt+0x2c78>
   13e08:	bl	11094 <__errno_location@plt>
   13e0c:	ldr	r3, [r0]
   13e10:	str	r3, [r4, #32]
   13e14:	ldr	r3, [r5, #48]	; 0x30
   13e18:	orr	r3, r3, #8192	; 0x2000
   13e1c:	str	r3, [r5, #48]	; 0x30
   13e20:	b	13e5c <__assert_fail@plt+0x2c78>
   13e24:	ldrh	r3, [r4, #58]	; 0x3a
   13e28:	tst	r3, #2
   13e2c:	beq	13ec8 <__assert_fail@plt+0x2ce4>
   13e30:	ldr	r3, [r5, #48]	; 0x30
   13e34:	tst	r3, #4
   13e38:	bne	13e54 <__assert_fail@plt+0x2c70>
   13e3c:	tst	r3, #512	; 0x200
   13e40:	ldr	r1, [r4, #36]	; 0x24
   13e44:	beq	13e9c <__assert_fail@plt+0x2cb8>
   13e48:	mov	r2, #1
   13e4c:	mov	r0, r5
   13e50:	bl	1295c <__assert_fail@plt+0x1778>
   13e54:	ldr	r0, [r4, #36]	; 0x24
   13e58:	bl	111c0 <close@plt>
   13e5c:	ldrh	r3, [r4, #56]	; 0x38
   13e60:	cmp	r3, #2
   13e64:	beq	13e8c <__assert_fail@plt+0x2ca8>
   13e68:	ldr	r3, [r4, #32]
   13e6c:	cmp	r3, #0
   13e70:	movne	r3, #7
   13e74:	moveq	r3, #6
   13e78:	strh	r3, [r4, #56]	; 0x38
   13e7c:	bne	13e8c <__assert_fail@plt+0x2ca8>
   13e80:	mov	r1, r4
   13e84:	mov	r0, r5
   13e88:	bl	12d70 <__assert_fail@plt+0x1b8c>
   13e8c:	ldr	r3, [r5, #48]	; 0x30
   13e90:	tst	r3, #8192	; 0x2000
   13e94:	beq	13a60 <__assert_fail@plt+0x287c>
   13e98:	b	13a5c <__assert_fail@plt+0x2878>
   13e9c:	mov	r0, r1
   13ea0:	bl	11154 <fchdir@plt>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13e54 <__assert_fail@plt+0x2c70>
   13eac:	bl	11094 <__errno_location@plt>
   13eb0:	ldr	r3, [r0]
   13eb4:	str	r3, [r4, #32]
   13eb8:	ldr	r3, [r5, #48]	; 0x30
   13ebc:	orr	r3, r3, #8192	; 0x2000
   13ec0:	str	r3, [r5, #48]	; 0x30
   13ec4:	b	13e54 <__assert_fail@plt+0x2c70>
   13ec8:	tst	r3, #1
   13ecc:	bne	13e5c <__assert_fail@plt+0x2c78>
   13ed0:	ldr	r3, [pc, #308]	; 1400c <__assert_fail@plt+0x2e28>
   13ed4:	mvn	r2, #0
   13ed8:	mov	r0, r5
   13edc:	ldr	r1, [r4, #4]
   13ee0:	bl	12a20 <__assert_fail@plt+0x183c>
   13ee4:	b	13e00 <__assert_fail@plt+0x2c1c>
   13ee8:	mvn	r2, #0
   13eec:	mov	r1, r4
   13ef0:	ldr	r3, [r4, #24]
   13ef4:	mov	r0, r5
   13ef8:	bl	12a20 <__assert_fail@plt+0x183c>
   13efc:	cmp	r0, #0
   13f00:	beq	13f28 <__assert_fail@plt+0x2d44>
   13f04:	bl	11094 <__errno_location@plt>
   13f08:	ldr	r3, [r0]
   13f0c:	str	r3, [r4, #32]
   13f10:	ldrh	r3, [r4, #58]	; 0x3a
   13f14:	orr	r3, r3, #1
   13f18:	strh	r3, [r4, #58]	; 0x3a
   13f1c:	ldr	r3, [r5, #4]
   13f20:	cmp	r3, #0
   13f24:	bne	13c60 <__assert_fail@plt+0x2a7c>
   13f28:	mov	r3, #0
   13f2c:	ldr	r4, [r5, #4]
   13f30:	str	r3, [r5, #4]
   13f34:	ldr	r0, [r4, #4]
   13f38:	ldr	r2, [r5, #24]
   13f3c:	ldr	r1, [r0, #40]	; 0x28
   13f40:	ldr	r0, [r0, #28]
   13f44:	sub	r3, r1, #1
   13f48:	ldrb	r0, [r0, r3]
   13f4c:	cmp	r0, #47	; 0x2f
   13f50:	movne	r3, r1
   13f54:	mov	r1, #47	; 0x2f
   13f58:	add	r0, r2, r3
   13f5c:	strb	r1, [r2, r3]
   13f60:	add	r0, r0, #1
   13f64:	add	r1, r4, #168	; 0xa8
   13f68:	ldr	r2, [r4, #52]	; 0x34
   13f6c:	add	r2, r2, #1
   13f70:	bl	10f2c <memmove@plt>
   13f74:	b	13b10 <__assert_fail@plt+0x292c>
   13f78:	cmp	r3, #1
   13f7c:	beq	13b94 <__assert_fail@plt+0x29b0>
   13f80:	mov	r6, r4
   13f84:	ldr	r4, [r6, #8]
   13f88:	cmp	r4, #0
   13f8c:	bne	13c80 <__assert_fail@plt+0x2a9c>
   13f90:	ldr	r3, [r6, #4]
   13f94:	ldr	r2, [r3, #12]
   13f98:	cmp	r2, #0
   13f9c:	beq	13fd0 <__assert_fail@plt+0x2dec>
   13fa0:	str	r3, [r5]
   13fa4:	mov	r1, #3
   13fa8:	mov	r0, r5
   13fac:	ldr	r2, [r5, #24]
   13fb0:	ldr	r3, [r3, #40]	; 0x28
   13fb4:	strb	r4, [r2, r3]
   13fb8:	bl	12e20 <__assert_fail@plt+0x1c3c>
   13fbc:	subs	r4, r0, #0
   13fc0:	bne	13c74 <__assert_fail@plt+0x2a90>
   13fc4:	ldr	r3, [r5, #48]	; 0x30
   13fc8:	tst	r3, #8192	; 0x2000
   13fcc:	bne	13a5c <__assert_fail@plt+0x2878>
   13fd0:	ldr	r4, [r6, #4]
   13fd4:	mov	r0, r6
   13fd8:	str	r4, [r5]
   13fdc:	bl	17834 <__assert_fail@plt+0x6650>
   13fe0:	ldr	r3, [r4, #48]	; 0x30
   13fe4:	cmn	r3, #1
   13fe8:	bne	13dd0 <__assert_fail@plt+0x2bec>
   13fec:	mov	r0, r4
   13ff0:	mov	r4, #0
   13ff4:	bl	17834 <__assert_fail@plt+0x6650>
   13ff8:	bl	11094 <__errno_location@plt>
   13ffc:	str	r4, [r0]
   14000:	str	r4, [r5]
   14004:	b	13a60 <__assert_fail@plt+0x287c>
   14008:	muleq	r1, r3, r7
   1400c:	muleq	r1, r2, r7
   14010:	cmp	r2, #4
   14014:	bls	14030 <__assert_fail@plt+0x2e4c>
   14018:	push	{r4, lr}
   1401c:	bl	11094 <__errno_location@plt>
   14020:	mov	r3, #22
   14024:	str	r3, [r0]
   14028:	mov	r0, #1
   1402c:	pop	{r4, pc}
   14030:	mov	r0, #0
   14034:	strh	r2, [r1, #60]	; 0x3c
   14038:	bx	lr
   1403c:	push	{r4, r5, r6, r7, r8, lr}
   14040:	mov	r7, r1
   14044:	mov	r5, r0
   14048:	bl	11094 <__errno_location@plt>
   1404c:	bics	r2, r7, #4096	; 0x1000
   14050:	mov	r6, r0
   14054:	beq	14068 <__assert_fail@plt+0x2e84>
   14058:	mov	r3, #22
   1405c:	str	r3, [r0]
   14060:	mov	r0, #0
   14064:	pop	{r4, r5, r6, r7, r8, pc}
   14068:	ldr	r4, [r5]
   1406c:	str	r2, [r0]
   14070:	ldr	r3, [r5, #48]	; 0x30
   14074:	ands	r0, r3, #8192	; 0x2000
   14078:	bne	14060 <__assert_fail@plt+0x2e7c>
   1407c:	ldrh	r3, [r4, #56]	; 0x38
   14080:	cmp	r3, #9
   14084:	bne	14090 <__assert_fail@plt+0x2eac>
   14088:	ldr	r0, [r4, #8]
   1408c:	pop	{r4, r5, r6, r7, r8, pc}
   14090:	cmp	r3, #1
   14094:	popne	{r4, r5, r6, r7, r8, pc}
   14098:	ldr	r0, [r5, #4]
   1409c:	cmp	r0, #0
   140a0:	beq	140a8 <__assert_fail@plt+0x2ec4>
   140a4:	bl	127f4 <__assert_fail@plt+0x1610>
   140a8:	cmp	r7, #4096	; 0x1000
   140ac:	ldreq	r3, [r5, #48]	; 0x30
   140b0:	moveq	r8, #2
   140b4:	movne	r8, #1
   140b8:	orreq	r3, r3, #4096	; 0x1000
   140bc:	streq	r3, [r5, #48]	; 0x30
   140c0:	ldr	r3, [r4, #48]	; 0x30
   140c4:	cmp	r3, #0
   140c8:	bne	140e8 <__assert_fail@plt+0x2f04>
   140cc:	ldr	r3, [r4, #24]
   140d0:	ldrb	r3, [r3]
   140d4:	cmp	r3, #47	; 0x2f
   140d8:	beq	140e8 <__assert_fail@plt+0x2f04>
   140dc:	ldr	r0, [r5, #48]	; 0x30
   140e0:	ands	r4, r0, #4
   140e4:	beq	140fc <__assert_fail@plt+0x2f18>
   140e8:	mov	r1, r8
   140ec:	mov	r0, r5
   140f0:	bl	12e20 <__assert_fail@plt+0x1c3c>
   140f4:	str	r0, [r5, #4]
   140f8:	pop	{r4, r5, r6, r7, r8, pc}
   140fc:	ldr	r1, [pc, #116]	; 14178 <__assert_fail@plt+0x2f94>
   14100:	mov	r0, r5
   14104:	bl	127c0 <__assert_fail@plt+0x15dc>
   14108:	subs	r7, r0, #0
   1410c:	strlt	r4, [r5, #4]
   14110:	blt	14060 <__assert_fail@plt+0x2e7c>
   14114:	mov	r1, r8
   14118:	mov	r0, r5
   1411c:	bl	12e20 <__assert_fail@plt+0x1c3c>
   14120:	str	r0, [r5, #4]
   14124:	ldr	r0, [r5, #48]	; 0x30
   14128:	ands	r4, r0, #512	; 0x200
   1412c:	beq	14148 <__assert_fail@plt+0x2f64>
   14130:	mov	r2, #1
   14134:	mov	r1, r7
   14138:	mov	r0, r5
   1413c:	bl	1295c <__assert_fail@plt+0x1778>
   14140:	ldr	r0, [r5, #4]
   14144:	pop	{r4, r5, r6, r7, r8, pc}
   14148:	mov	r0, r7
   1414c:	bl	11154 <fchdir@plt>
   14150:	cmp	r0, #0
   14154:	beq	1416c <__assert_fail@plt+0x2f88>
   14158:	ldr	r5, [r6]
   1415c:	mov	r0, r7
   14160:	bl	111c0 <close@plt>
   14164:	str	r5, [r6]
   14168:	b	14060 <__assert_fail@plt+0x2e7c>
   1416c:	mov	r0, r7
   14170:	bl	111c0 <close@plt>
   14174:	b	14140 <__assert_fail@plt+0x2f5c>
   14178:	muleq	r1, r3, r7
   1417c:	andeq	r0, r0, r0
   14180:	ror	r0, r0, #3
   14184:	udiv	r3, r0, r1
   14188:	mls	r0, r3, r1, r0
   1418c:	bx	lr
   14190:	sub	r0, r1, r0
   14194:	clz	r0, r0
   14198:	lsr	r0, r0, #5
   1419c:	bx	lr
   141a0:	ldrb	r3, [r1, #16]
   141a4:	cmp	r3, #0
   141a8:	bne	141d4 <__assert_fail@plt+0x2ff0>
   141ac:	vmov	s15, r0
   141b0:	vldr	s14, [r1, #8]
   141b4:	vcvt.f32.u32	s13, s15
   141b8:	vdiv.f32	s15, s13, s14
   141bc:	vldr	s14, [pc, #140]	; 14250 <__assert_fail@plt+0x306c>
   141c0:	vcmpe.f32	s15, s14
   141c4:	vmrs	APSR_nzcv, fpscr
   141c8:	bge	141e8 <__assert_fail@plt+0x3004>
   141cc:	vcvt.u32.f32	s15, s15
   141d0:	vmov	r0, s15
   141d4:	cmp	r0, #10
   141d8:	movcc	r0, #10
   141dc:	orr	r0, r0, #1
   141e0:	cmn	r0, #1
   141e4:	bne	1421c <__assert_fail@plt+0x3038>
   141e8:	mov	r0, #0
   141ec:	bx	lr
   141f0:	add	r2, r3, #1
   141f4:	add	r3, r3, #2
   141f8:	add	r1, r1, r2, lsl #2
   141fc:	udiv	r2, r0, r3
   14200:	cmp	r0, r1
   14204:	mls	r2, r3, r2, r0
   14208:	bls	14228 <__assert_fail@plt+0x3044>
   1420c:	cmp	r2, #0
   14210:	bne	141f0 <__assert_fail@plt+0x300c>
   14214:	add	r0, r0, #2
   14218:	b	141e0 <__assert_fail@plt+0x2ffc>
   1421c:	mov	r1, #9
   14220:	mov	r3, #3
   14224:	b	141fc <__assert_fail@plt+0x3018>
   14228:	cmp	r2, #0
   1422c:	beq	14214 <__assert_fail@plt+0x3030>
   14230:	lsrs	r3, r0, #30
   14234:	movne	r3, #1
   14238:	moveq	r3, #0
   1423c:	tst	r0, #536870912	; 0x20000000
   14240:	bne	141e8 <__assert_fail@plt+0x3004>
   14244:	cmp	r3, #0
   14248:	bxeq	lr
   1424c:	b	141e8 <__assert_fail@plt+0x3004>
   14250:	svcmi	0x00800000
   14254:	push	{r4, lr}
   14258:	mov	r4, r0
   1425c:	mov	r0, r1
   14260:	ldr	r1, [r4, #8]
   14264:	ldr	r3, [r4, #24]
   14268:	blx	r3
   1426c:	ldr	r3, [r4, #8]
   14270:	cmp	r3, r0
   14274:	bhi	1427c <__assert_fail@plt+0x3098>
   14278:	bl	111b4 <abort@plt>
   1427c:	ldr	r3, [r4]
   14280:	add	r0, r3, r0, lsl #3
   14284:	pop	{r4, pc}
   14288:	push	{r4, r5, r6, r7, r8, lr}
   1428c:	mov	r8, r2
   14290:	mov	r6, r1
   14294:	mov	r5, r0
   14298:	mov	r7, r3
   1429c:	bl	14254 <__assert_fail@plt+0x3070>
   142a0:	str	r0, [r8]
   142a4:	ldr	r1, [r0]
   142a8:	cmp	r1, #0
   142ac:	bne	142bc <__assert_fail@plt+0x30d8>
   142b0:	mov	r2, #0
   142b4:	mov	r0, r2
   142b8:	pop	{r4, r5, r6, r7, r8, pc}
   142bc:	cmp	r1, r6
   142c0:	mov	r4, r0
   142c4:	beq	142dc <__assert_fail@plt+0x30f8>
   142c8:	mov	r0, r6
   142cc:	ldr	r3, [r5, #28]
   142d0:	blx	r3
   142d4:	cmp	r0, #0
   142d8:	beq	14330 <__assert_fail@plt+0x314c>
   142dc:	cmp	r7, #0
   142e0:	ldr	r2, [r4]
   142e4:	beq	142b4 <__assert_fail@plt+0x30d0>
   142e8:	ldr	r3, [r4, #4]
   142ec:	cmp	r3, #0
   142f0:	streq	r3, [r4]
   142f4:	beq	142b4 <__assert_fail@plt+0x30d0>
   142f8:	ldm	r3, {r0, r1}
   142fc:	stm	r4, {r0, r1}
   14300:	mov	r1, #0
   14304:	str	r1, [r3]
   14308:	ldr	r1, [r5, #36]	; 0x24
   1430c:	str	r1, [r3, #4]
   14310:	str	r3, [r5, #36]	; 0x24
   14314:	b	142b4 <__assert_fail@plt+0x30d0>
   14318:	mov	r0, r6
   1431c:	ldr	r3, [r5, #28]
   14320:	blx	r3
   14324:	cmp	r0, #0
   14328:	bne	14348 <__assert_fail@plt+0x3164>
   1432c:	ldr	r4, [r4, #4]
   14330:	ldr	r3, [r4, #4]
   14334:	cmp	r3, #0
   14338:	beq	142b0 <__assert_fail@plt+0x30cc>
   1433c:	ldr	r1, [r3]
   14340:	cmp	r1, r6
   14344:	bne	14318 <__assert_fail@plt+0x3134>
   14348:	ldr	r3, [r4, #4]
   1434c:	cmp	r7, #0
   14350:	ldr	r2, [r3]
   14354:	beq	142b4 <__assert_fail@plt+0x30d0>
   14358:	ldr	r1, [r3, #4]
   1435c:	str	r1, [r4, #4]
   14360:	b	14300 <__assert_fail@plt+0x311c>
   14364:	ldr	r2, [pc, #164]	; 14410 <__assert_fail@plt+0x322c>
   14368:	ldr	r3, [r0]
   1436c:	cmp	r3, r2
   14370:	beq	143f8 <__assert_fail@plt+0x3214>
   14374:	vldr	s13, [pc, #132]	; 14400 <__assert_fail@plt+0x321c>
   14378:	vldr	s14, [r3, #8]
   1437c:	vcmpe.f32	s14, s13
   14380:	vmrs	APSR_nzcv, fpscr
   14384:	ble	143ec <__assert_fail@plt+0x3208>
   14388:	vldr	s15, [pc, #116]	; 14404 <__assert_fail@plt+0x3220>
   1438c:	vcmpe.f32	s14, s15
   14390:	vmrs	APSR_nzcv, fpscr
   14394:	bpl	143ec <__assert_fail@plt+0x3208>
   14398:	vldr	s15, [pc, #104]	; 14408 <__assert_fail@plt+0x3224>
   1439c:	vldr	s12, [r3, #12]
   143a0:	vcmpe.f32	s12, s15
   143a4:	vmrs	APSR_nzcv, fpscr
   143a8:	ble	143ec <__assert_fail@plt+0x3208>
   143ac:	vldr	s15, [r3]
   143b0:	vcmpe.f32	s15, #0.0
   143b4:	vmrs	APSR_nzcv, fpscr
   143b8:	blt	143ec <__assert_fail@plt+0x3208>
   143bc:	vadd.f32	s15, s15, s13
   143c0:	vldr	s13, [r3, #4]
   143c4:	vcmpe.f32	s15, s13
   143c8:	vmrs	APSR_nzcv, fpscr
   143cc:	bpl	143ec <__assert_fail@plt+0x3208>
   143d0:	vldr	s12, [pc, #52]	; 1440c <__assert_fail@plt+0x3228>
   143d4:	vcmpe.f32	s13, s12
   143d8:	vmrs	APSR_nzcv, fpscr
   143dc:	bhi	143ec <__assert_fail@plt+0x3208>
   143e0:	vcmpe.f32	s14, s15
   143e4:	vmrs	APSR_nzcv, fpscr
   143e8:	bgt	143f8 <__assert_fail@plt+0x3214>
   143ec:	str	r2, [r0]
   143f0:	mov	r0, #0
   143f4:	bx	lr
   143f8:	mov	r0, #1
   143fc:	bx	lr
   14400:	stclcc	12, cr12, [ip, #820]	; 0x334
   14404:	svccc	0x00666666
   14408:	svccc	0x008ccccd
   1440c:	svccc	0x00800000
   14410:	muleq	r1, r8, r7
   14414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14418:	mov	r5, r0
   1441c:	mov	r7, r1
   14420:	mov	r8, r2
   14424:	mov	r9, #0
   14428:	ldr	r4, [r1]
   1442c:	add	r4, r4, #8
   14430:	ldr	r2, [r7, #4]
   14434:	sub	r3, r4, #8
   14438:	cmp	r2, r3
   1443c:	bhi	1444c <__assert_fail@plt+0x3268>
   14440:	mov	r8, #1
   14444:	mov	r0, r8
   14448:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1444c:	ldr	r3, [r4, #-8]
   14450:	cmp	r3, #0
   14454:	ldrne	r6, [r4, #-4]
   14458:	bne	144b4 <__assert_fail@plt+0x32d0>
   1445c:	add	r4, r4, #8
   14460:	b	14430 <__assert_fail@plt+0x324c>
   14464:	ldr	sl, [r6]
   14468:	mov	r0, r5
   1446c:	mov	r1, sl
   14470:	bl	14254 <__assert_fail@plt+0x3070>
   14474:	ldr	r2, [r0]
   14478:	ldr	r1, [r6, #4]
   1447c:	cmp	r2, #0
   14480:	ldrne	r3, [r0, #4]
   14484:	strne	r3, [r6, #4]
   14488:	strne	r6, [r0, #4]
   1448c:	bne	144b0 <__assert_fail@plt+0x32cc>
   14490:	ldr	r3, [r5, #12]
   14494:	str	sl, [r0]
   14498:	add	r3, r3, #1
   1449c:	str	r3, [r5, #12]
   144a0:	str	r2, [r6]
   144a4:	ldr	r3, [r5, #36]	; 0x24
   144a8:	str	r3, [r6, #4]
   144ac:	str	r6, [r5, #36]	; 0x24
   144b0:	mov	r6, r1
   144b4:	cmp	r6, #0
   144b8:	bne	14464 <__assert_fail@plt+0x3280>
   144bc:	cmp	r8, #0
   144c0:	str	r6, [r4, #-4]
   144c4:	ldr	sl, [r4, #-8]
   144c8:	bne	1445c <__assert_fail@plt+0x3278>
   144cc:	mov	r1, sl
   144d0:	mov	r0, r5
   144d4:	bl	14254 <__assert_fail@plt+0x3070>
   144d8:	ldr	r3, [r0]
   144dc:	mov	r6, r0
   144e0:	cmp	r3, #0
   144e4:	beq	14530 <__assert_fail@plt+0x334c>
   144e8:	ldr	r0, [r5, #36]	; 0x24
   144ec:	cmp	r0, #0
   144f0:	ldrne	r3, [r0, #4]
   144f4:	strne	r3, [r5, #36]	; 0x24
   144f8:	bne	1450c <__assert_fail@plt+0x3328>
   144fc:	mov	r0, #8
   14500:	bl	173ac <__assert_fail@plt+0x61c8>
   14504:	cmp	r0, #0
   14508:	beq	14444 <__assert_fail@plt+0x3260>
   1450c:	ldr	r3, [r6, #4]
   14510:	str	sl, [r0]
   14514:	str	r3, [r0, #4]
   14518:	str	r0, [r6, #4]
   1451c:	ldr	r3, [r7, #12]
   14520:	str	r9, [r4, #-8]
   14524:	sub	r3, r3, #1
   14528:	str	r3, [r7, #12]
   1452c:	b	1445c <__assert_fail@plt+0x3278>
   14530:	ldr	r3, [r5, #12]
   14534:	str	sl, [r0]
   14538:	add	r3, r3, #1
   1453c:	str	r3, [r5, #12]
   14540:	b	1451c <__assert_fail@plt+0x3338>
   14544:	ldr	r0, [r0, #8]
   14548:	bx	lr
   1454c:	ldr	r0, [r0, #12]
   14550:	bx	lr
   14554:	ldr	r0, [r0, #16]
   14558:	bx	lr
   1455c:	ldm	r0, {r3, ip}
   14560:	mov	r0, #0
   14564:	cmp	ip, r3
   14568:	bxls	lr
   1456c:	ldr	r2, [r3]
   14570:	cmp	r2, #0
   14574:	beq	1459c <__assert_fail@plt+0x33b8>
   14578:	mov	r1, r3
   1457c:	mov	r2, #1
   14580:	b	14588 <__assert_fail@plt+0x33a4>
   14584:	add	r2, r2, #1
   14588:	ldr	r1, [r1, #4]
   1458c:	cmp	r1, #0
   14590:	bne	14584 <__assert_fail@plt+0x33a0>
   14594:	cmp	r0, r2
   14598:	movcc	r0, r2
   1459c:	add	r3, r3, #8
   145a0:	b	14564 <__assert_fail@plt+0x3380>
   145a4:	push	{lr}		; (str lr, [sp, #-4]!)
   145a8:	mov	r3, #0
   145ac:	mov	r1, r3
   145b0:	ldm	r0, {r2, lr}
   145b4:	cmp	lr, r2
   145b8:	bhi	145dc <__assert_fail@plt+0x33f8>
   145bc:	ldr	r2, [r0, #12]
   145c0:	cmp	r2, r1
   145c4:	ldreq	r0, [r0, #16]
   145c8:	subeq	r0, r0, r3
   145cc:	clzeq	r0, r0
   145d0:	lsreq	r0, r0, #5
   145d4:	movne	r0, #0
   145d8:	pop	{pc}		; (ldr pc, [sp], #4)
   145dc:	ldr	ip, [r2]
   145e0:	cmp	ip, #0
   145e4:	addne	r1, r1, #1
   145e8:	addne	r3, r3, #1
   145ec:	movne	ip, r2
   145f0:	bne	14600 <__assert_fail@plt+0x341c>
   145f4:	add	r2, r2, #8
   145f8:	b	145b4 <__assert_fail@plt+0x33d0>
   145fc:	add	r3, r3, #1
   14600:	ldr	ip, [ip, #4]
   14604:	cmp	ip, #0
   14608:	bne	145fc <__assert_fail@plt+0x3418>
   1460c:	b	145f4 <__assert_fail@plt+0x3410>
   14610:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14614:	mov	r6, r0
   14618:	mov	r4, r1
   1461c:	bl	1455c <__assert_fail@plt+0x3378>
   14620:	ldr	r5, [r6, #8]
   14624:	mov	r8, r0
   14628:	mov	r1, #1
   1462c:	mov	r0, r4
   14630:	ldr	r7, [r6, #12]
   14634:	ldr	r2, [pc, #116]	; 146b0 <__assert_fail@plt+0x34cc>
   14638:	ldr	r3, [r6, #16]
   1463c:	bl	110dc <__fprintf_chk@plt>
   14640:	mov	r3, r5
   14644:	ldr	r2, [pc, #104]	; 146b4 <__assert_fail@plt+0x34d0>
   14648:	mov	r1, #1
   1464c:	mov	r0, r4
   14650:	bl	110dc <__fprintf_chk@plt>
   14654:	vmov	s15, r7
   14658:	mov	r3, r7
   1465c:	mov	r1, #1
   14660:	ldr	r2, [pc, #80]	; 146b8 <__assert_fail@plt+0x34d4>
   14664:	mov	r0, r4
   14668:	vcvt.f64.u32	d6, s15
   1466c:	vldr	d7, [pc, #52]	; 146a8 <__assert_fail@plt+0x34c4>
   14670:	vmul.f64	d6, d6, d7
   14674:	vmov	s15, r5
   14678:	vcvt.f64.u32	d7, s15
   1467c:	vdiv.f64	d5, d6, d7
   14680:	vstr	d5, [sp]
   14684:	bl	110dc <__fprintf_chk@plt>
   14688:	ldr	r2, [pc, #44]	; 146bc <__assert_fail@plt+0x34d8>
   1468c:	mov	r3, r8
   14690:	mov	r1, #1
   14694:	mov	r0, r4
   14698:	add	sp, sp, #8
   1469c:	pop	{r4, r5, r6, r7, r8, lr}
   146a0:	b	110dc <__fprintf_chk@plt>
   146a4:	nop	{0}
   146a8:	andeq	r0, r0, r0
   146ac:	subsmi	r0, r9, r0
   146b0:	andeq	r8, r1, ip, lsr #15
   146b4:	andeq	r8, r1, r4, asr #15
   146b8:	ldrdeq	r8, [r1], -ip
   146bc:	strdeq	r8, [r1], -sp
   146c0:	push	{r4, r5, r6, lr}
   146c4:	mov	r6, r0
   146c8:	mov	r5, r1
   146cc:	bl	14254 <__assert_fail@plt+0x3070>
   146d0:	ldr	r3, [r0]
   146d4:	cmp	r3, #0
   146d8:	beq	14714 <__assert_fail@plt+0x3530>
   146dc:	mov	r4, r0
   146e0:	ldr	r1, [r4]
   146e4:	cmp	r1, r5
   146e8:	bne	146f4 <__assert_fail@plt+0x3510>
   146ec:	ldr	r0, [r4]
   146f0:	pop	{r4, r5, r6, pc}
   146f4:	mov	r0, r5
   146f8:	ldr	r3, [r6, #28]
   146fc:	blx	r3
   14700:	cmp	r0, #0
   14704:	bne	146ec <__assert_fail@plt+0x3508>
   14708:	ldr	r4, [r4, #4]
   1470c:	cmp	r4, #0
   14710:	bne	146e0 <__assert_fail@plt+0x34fc>
   14714:	mov	r0, #0
   14718:	pop	{r4, r5, r6, pc}
   1471c:	ldr	r3, [r0, #16]
   14720:	cmp	r3, #0
   14724:	beq	14754 <__assert_fail@plt+0x3570>
   14728:	ldr	r3, [r0]
   1472c:	ldr	r2, [r0, #4]
   14730:	cmp	r2, r3
   14734:	bhi	14740 <__assert_fail@plt+0x355c>
   14738:	push	{r4, lr}
   1473c:	bl	111b4 <abort@plt>
   14740:	ldr	r0, [r3]
   14744:	cmp	r0, #0
   14748:	bxne	lr
   1474c:	add	r3, r3, #8
   14750:	b	14730 <__assert_fail@plt+0x354c>
   14754:	mov	r0, r3
   14758:	bx	lr
   1475c:	push	{r4, r5, r6, lr}
   14760:	mov	r4, r0
   14764:	mov	r5, r1
   14768:	bl	14254 <__assert_fail@plt+0x3070>
   1476c:	mov	r2, r0
   14770:	mov	r3, r0
   14774:	ldm	r3, {r1, r3}
   14778:	cmp	r1, r5
   1477c:	bne	14790 <__assert_fail@plt+0x35ac>
   14780:	cmp	r3, #0
   14784:	beq	14798 <__assert_fail@plt+0x35b4>
   14788:	ldr	r0, [r3]
   1478c:	pop	{r4, r5, r6, pc}
   14790:	cmp	r3, #0
   14794:	bne	14774 <__assert_fail@plt+0x3590>
   14798:	ldr	r3, [r4, #4]
   1479c:	add	r2, r2, #8
   147a0:	cmp	r3, r2
   147a4:	bhi	147b0 <__assert_fail@plt+0x35cc>
   147a8:	mov	r0, #0
   147ac:	pop	{r4, r5, r6, pc}
   147b0:	ldr	r0, [r2]
   147b4:	cmp	r0, #0
   147b8:	beq	1479c <__assert_fail@plt+0x35b8>
   147bc:	pop	{r4, r5, r6, pc}
   147c0:	ldr	ip, [r0]
   147c4:	mov	r3, #0
   147c8:	push	{r4, r5, lr}
   147cc:	ldr	lr, [r0, #4]
   147d0:	cmp	lr, ip
   147d4:	bhi	147e0 <__assert_fail@plt+0x35fc>
   147d8:	mov	r0, r3
   147dc:	pop	{r4, r5, pc}
   147e0:	ldr	lr, [ip]
   147e4:	cmp	lr, #0
   147e8:	beq	14814 <__assert_fail@plt+0x3630>
   147ec:	add	r4, r1, r3, lsl #2
   147f0:	mov	lr, ip
   147f4:	cmp	r2, r3
   147f8:	bls	147d8 <__assert_fail@plt+0x35f4>
   147fc:	ldr	r5, [lr]
   14800:	add	r3, r3, #1
   14804:	str	r5, [r4], #4
   14808:	ldr	lr, [lr, #4]
   1480c:	cmp	lr, #0
   14810:	bne	147f4 <__assert_fail@plt+0x3610>
   14814:	add	ip, ip, #8
   14818:	b	147cc <__assert_fail@plt+0x35e8>
   1481c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14820:	mov	r7, r0
   14824:	mov	r8, r1
   14828:	mov	r9, r2
   1482c:	mov	r6, #0
   14830:	ldr	r4, [r0]
   14834:	ldr	r3, [r7, #4]
   14838:	cmp	r3, r4
   1483c:	bhi	14848 <__assert_fail@plt+0x3664>
   14840:	mov	r0, r6
   14844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14848:	ldr	r3, [r4]
   1484c:	cmp	r3, #0
   14850:	beq	1487c <__assert_fail@plt+0x3698>
   14854:	mov	r5, r4
   14858:	mov	r1, r9
   1485c:	ldr	r0, [r5]
   14860:	blx	r8
   14864:	cmp	r0, #0
   14868:	beq	14840 <__assert_fail@plt+0x365c>
   1486c:	ldr	r5, [r5, #4]
   14870:	add	r6, r6, #1
   14874:	cmp	r5, #0
   14878:	bne	14858 <__assert_fail@plt+0x3674>
   1487c:	add	r4, r4, #8
   14880:	b	14834 <__assert_fail@plt+0x3650>
   14884:	sub	r2, r0, #1
   14888:	mov	r0, #0
   1488c:	ldrb	r3, [r2, #1]!
   14890:	cmp	r3, #0
   14894:	bxeq	lr
   14898:	rsb	r0, r0, r0, lsl #5
   1489c:	add	r0, r0, r3
   148a0:	udiv	r3, r0, r1
   148a4:	mls	r0, r1, r3, r0
   148a8:	b	1488c <__assert_fail@plt+0x36a8>
   148ac:	push	{lr}		; (str lr, [sp, #-4]!)
   148b0:	mov	ip, r0
   148b4:	ldr	lr, [pc, #16]	; 148cc <__assert_fail@plt+0x36e8>
   148b8:	ldm	lr!, {r0, r1, r2, r3}
   148bc:	stmia	ip!, {r0, r1, r2, r3}
   148c0:	ldr	r3, [lr]
   148c4:	str	r3, [ip]
   148c8:	pop	{pc}		; (ldr pc, [sp], #4)
   148cc:	muleq	r1, r8, r7
   148d0:	cmp	r2, #0
   148d4:	push	{r4, r5, r6, r7, r8, lr}
   148d8:	mov	r8, r0
   148dc:	mov	r0, #40	; 0x28
   148e0:	mov	r5, r1
   148e4:	ldr	r7, [pc, #164]	; 14990 <__assert_fail@plt+0x37ac>
   148e8:	movne	r7, r2
   148ec:	cmp	r3, #0
   148f0:	ldr	r6, [pc, #156]	; 14994 <__assert_fail@plt+0x37b0>
   148f4:	movne	r6, r3
   148f8:	bl	173ac <__assert_fail@plt+0x61c8>
   148fc:	subs	r4, r0, #0
   14900:	beq	14978 <__assert_fail@plt+0x3794>
   14904:	ldr	r3, [pc, #140]	; 14998 <__assert_fail@plt+0x37b4>
   14908:	cmp	r5, #0
   1490c:	mov	r0, r4
   14910:	moveq	r5, r3
   14914:	str	r5, [r0, #20]!
   14918:	bl	14364 <__assert_fail@plt+0x3180>
   1491c:	cmp	r0, #0
   14920:	beq	14980 <__assert_fail@plt+0x379c>
   14924:	mov	r1, r5
   14928:	mov	r0, r8
   1492c:	bl	141a0 <__assert_fail@plt+0x2fbc>
   14930:	cmp	r0, #0
   14934:	str	r0, [r4, #8]
   14938:	beq	14980 <__assert_fail@plt+0x379c>
   1493c:	mov	r1, #8
   14940:	bl	17358 <__assert_fail@plt+0x6174>
   14944:	cmp	r0, #0
   14948:	str	r0, [r4]
   1494c:	beq	14980 <__assert_fail@plt+0x379c>
   14950:	ldr	r3, [r4, #8]
   14954:	str	r7, [r4, #24]
   14958:	ldr	r2, [sp, #24]
   1495c:	str	r6, [r4, #28]
   14960:	add	r0, r0, r3, lsl #3
   14964:	mov	r3, #0
   14968:	str	r0, [r4, #4]
   1496c:	str	r3, [r4, #12]
   14970:	str	r3, [r4, #16]
   14974:	strd	r2, [r4, #32]
   14978:	mov	r0, r4
   1497c:	pop	{r4, r5, r6, r7, r8, pc}
   14980:	mov	r0, r4
   14984:	mov	r4, #0
   14988:	bl	17834 <__assert_fail@plt+0x6650>
   1498c:	b	14978 <__assert_fail@plt+0x3794>
   14990:	andeq	r4, r1, r0, lsl #3
   14994:	muleq	r1, r0, r1
   14998:	muleq	r1, r8, r7
   1499c:	push	{r4, r5, r6, r7, r8, lr}
   149a0:	mov	r5, r0
   149a4:	mov	r7, #0
   149a8:	ldr	r4, [r0]
   149ac:	add	r4, r4, #8
   149b0:	ldr	r2, [r5, #4]
   149b4:	sub	r3, r4, #8
   149b8:	cmp	r2, r3
   149bc:	bhi	149d0 <__assert_fail@plt+0x37ec>
   149c0:	mov	r3, #0
   149c4:	str	r3, [r5, #12]
   149c8:	str	r3, [r5, #16]
   149cc:	pop	{r4, r5, r6, r7, r8, pc}
   149d0:	ldr	r3, [r4, #-8]
   149d4:	cmp	r3, #0
   149d8:	ldrne	r6, [r4, #-4]
   149dc:	bne	14a10 <__assert_fail@plt+0x382c>
   149e0:	add	r4, r4, #8
   149e4:	b	149b0 <__assert_fail@plt+0x37cc>
   149e8:	cmp	r3, #0
   149ec:	beq	149f8 <__assert_fail@plt+0x3814>
   149f0:	ldr	r0, [r6]
   149f4:	blx	r3
   149f8:	ldr	r3, [r6, #4]
   149fc:	ldr	r2, [r5, #36]	; 0x24
   14a00:	str	r7, [r6]
   14a04:	str	r2, [r6, #4]
   14a08:	str	r6, [r5, #36]	; 0x24
   14a0c:	mov	r6, r3
   14a10:	cmp	r6, #0
   14a14:	ldr	r3, [r5, #32]
   14a18:	bne	149e8 <__assert_fail@plt+0x3804>
   14a1c:	cmp	r3, #0
   14a20:	beq	14a2c <__assert_fail@plt+0x3848>
   14a24:	ldr	r0, [r4, #-8]
   14a28:	blx	r3
   14a2c:	str	r7, [r4, #-8]
   14a30:	str	r7, [r4, #-4]
   14a34:	b	149e0 <__assert_fail@plt+0x37fc>
   14a38:	ldr	r3, [r0, #32]
   14a3c:	push	{r4, r5, r6, lr}
   14a40:	mov	r4, r0
   14a44:	cmp	r3, #0
   14a48:	bne	14a7c <__assert_fail@plt+0x3898>
   14a4c:	ldr	r5, [r4]
   14a50:	ldr	r3, [r4, #4]
   14a54:	cmp	r3, r5
   14a58:	bhi	14acc <__assert_fail@plt+0x38e8>
   14a5c:	ldr	r0, [r4, #36]	; 0x24
   14a60:	cmp	r0, #0
   14a64:	bne	14aec <__assert_fail@plt+0x3908>
   14a68:	ldr	r0, [r4]
   14a6c:	bl	17834 <__assert_fail@plt+0x6650>
   14a70:	mov	r0, r4
   14a74:	pop	{r4, r5, r6, lr}
   14a78:	b	17834 <__assert_fail@plt+0x6650>
   14a7c:	ldr	r3, [r0, #16]
   14a80:	cmp	r3, #0
   14a84:	ldrne	r5, [r0]
   14a88:	beq	14a4c <__assert_fail@plt+0x3868>
   14a8c:	ldr	r3, [r4, #4]
   14a90:	cmp	r3, r5
   14a94:	bls	14a4c <__assert_fail@plt+0x3868>
   14a98:	ldr	r3, [r5]
   14a9c:	cmp	r3, #0
   14aa0:	bne	14aac <__assert_fail@plt+0x38c8>
   14aa4:	add	r5, r5, #8
   14aa8:	b	14a8c <__assert_fail@plt+0x38a8>
   14aac:	mov	r6, r5
   14ab0:	ldr	r0, [r6]
   14ab4:	ldr	r3, [r4, #32]
   14ab8:	blx	r3
   14abc:	ldr	r6, [r6, #4]
   14ac0:	cmp	r6, #0
   14ac4:	bne	14ab0 <__assert_fail@plt+0x38cc>
   14ac8:	b	14aa4 <__assert_fail@plt+0x38c0>
   14acc:	ldr	r0, [r5, #4]
   14ad0:	cmp	r0, #0
   14ad4:	addeq	r5, r5, #8
   14ad8:	beq	14a50 <__assert_fail@plt+0x386c>
   14adc:	ldr	r6, [r0, #4]
   14ae0:	bl	17834 <__assert_fail@plt+0x6650>
   14ae4:	mov	r0, r6
   14ae8:	b	14ad0 <__assert_fail@plt+0x38ec>
   14aec:	ldr	r5, [r0, #4]
   14af0:	bl	17834 <__assert_fail@plt+0x6650>
   14af4:	mov	r0, r5
   14af8:	b	14a60 <__assert_fail@plt+0x387c>
   14afc:	push	{r4, r5, lr}
   14b00:	mov	r4, r0
   14b04:	sub	sp, sp, #44	; 0x2c
   14b08:	mov	r0, r1
   14b0c:	ldr	r1, [r4, #20]
   14b10:	bl	141a0 <__assert_fail@plt+0x2fbc>
   14b14:	subs	r5, r0, #0
   14b18:	bne	14b2c <__assert_fail@plt+0x3948>
   14b1c:	mov	r5, #0
   14b20:	mov	r0, r5
   14b24:	add	sp, sp, #44	; 0x2c
   14b28:	pop	{r4, r5, pc}
   14b2c:	ldr	r3, [r4, #8]
   14b30:	cmp	r3, r5
   14b34:	beq	14c14 <__assert_fail@plt+0x3a30>
   14b38:	mov	r1, #8
   14b3c:	bl	17358 <__assert_fail@plt+0x6174>
   14b40:	cmp	r0, #0
   14b44:	str	r0, [sp]
   14b48:	beq	14b1c <__assert_fail@plt+0x3938>
   14b4c:	ldr	r3, [r4, #20]
   14b50:	mov	r2, #0
   14b54:	add	r0, r0, r5, lsl #3
   14b58:	mov	r1, r4
   14b5c:	stmib	sp, {r0, r5}
   14b60:	mov	r0, sp
   14b64:	str	r2, [sp, #12]
   14b68:	strd	r2, [sp, #16]
   14b6c:	ldr	r3, [r4, #24]
   14b70:	str	r3, [sp, #24]
   14b74:	ldr	r3, [r4, #28]
   14b78:	str	r3, [sp, #28]
   14b7c:	ldr	r3, [r4, #32]
   14b80:	str	r3, [sp, #32]
   14b84:	ldr	r3, [r4, #36]	; 0x24
   14b88:	str	r3, [sp, #36]	; 0x24
   14b8c:	bl	14414 <__assert_fail@plt+0x3230>
   14b90:	subs	r5, r0, #0
   14b94:	beq	14bcc <__assert_fail@plt+0x39e8>
   14b98:	ldr	r0, [r4]
   14b9c:	bl	17834 <__assert_fail@plt+0x6650>
   14ba0:	ldr	r3, [sp]
   14ba4:	str	r3, [r4]
   14ba8:	ldr	r3, [sp, #4]
   14bac:	str	r3, [r4, #4]
   14bb0:	ldr	r3, [sp, #8]
   14bb4:	str	r3, [r4, #8]
   14bb8:	ldr	r3, [sp, #12]
   14bbc:	str	r3, [r4, #12]
   14bc0:	ldr	r3, [sp, #36]	; 0x24
   14bc4:	str	r3, [r4, #36]	; 0x24
   14bc8:	b	14b20 <__assert_fail@plt+0x393c>
   14bcc:	ldr	r3, [sp, #36]	; 0x24
   14bd0:	mov	r2, #1
   14bd4:	mov	r1, sp
   14bd8:	mov	r0, r4
   14bdc:	str	r3, [r4, #36]	; 0x24
   14be0:	bl	14414 <__assert_fail@plt+0x3230>
   14be4:	cmp	r0, #0
   14be8:	bne	14bf0 <__assert_fail@plt+0x3a0c>
   14bec:	bl	111b4 <abort@plt>
   14bf0:	mov	r2, r5
   14bf4:	mov	r1, sp
   14bf8:	mov	r0, r4
   14bfc:	bl	14414 <__assert_fail@plt+0x3230>
   14c00:	cmp	r0, #0
   14c04:	beq	14bec <__assert_fail@plt+0x3a08>
   14c08:	ldr	r0, [sp]
   14c0c:	bl	17834 <__assert_fail@plt+0x6650>
   14c10:	b	14b20 <__assert_fail@plt+0x393c>
   14c14:	mov	r5, #1
   14c18:	b	14b20 <__assert_fail@plt+0x393c>
   14c1c:	push	{r0, r1, r4, r5, r6, lr}
   14c20:	subs	r6, r1, #0
   14c24:	bne	14c2c <__assert_fail@plt+0x3a48>
   14c28:	bl	111b4 <abort@plt>
   14c2c:	mov	r5, r2
   14c30:	mov	r3, #0
   14c34:	add	r2, sp, #4
   14c38:	mov	r4, r0
   14c3c:	bl	14288 <__assert_fail@plt+0x30a4>
   14c40:	cmp	r0, #0
   14c44:	beq	14c5c <__assert_fail@plt+0x3a78>
   14c48:	cmp	r5, #0
   14c4c:	strne	r0, [r5]
   14c50:	movne	r0, #0
   14c54:	moveq	r0, r5
   14c58:	b	14cdc <__assert_fail@plt+0x3af8>
   14c5c:	vldr	s15, [r4, #12]
   14c60:	ldr	r3, [r4, #20]
   14c64:	vcvt.f32.u32	s14, s15
   14c68:	vldr	s15, [r4, #8]
   14c6c:	vldr	s13, [r3, #8]
   14c70:	vcvt.f32.u32	s15, s15
   14c74:	vmul.f32	s15, s15, s13
   14c78:	vcmpe.f32	s14, s15
   14c7c:	vmrs	APSR_nzcv, fpscr
   14c80:	ble	14d18 <__assert_fail@plt+0x3b34>
   14c84:	add	r0, r4, #20
   14c88:	bl	14364 <__assert_fail@plt+0x3180>
   14c8c:	vldr	s15, [r4, #8]
   14c90:	vldr	s14, [r4, #12]
   14c94:	ldr	r3, [r4, #20]
   14c98:	vcvt.f32.u32	s15, s15
   14c9c:	vcvt.f32.u32	s14, s14
   14ca0:	vldr	s13, [r3, #8]
   14ca4:	vmul.f32	s12, s13, s15
   14ca8:	vcmpe.f32	s14, s12
   14cac:	vmrs	APSR_nzcv, fpscr
   14cb0:	ble	14d18 <__assert_fail@plt+0x3b34>
   14cb4:	vldr	s14, [r3, #12]
   14cb8:	ldrb	r3, [r3, #16]
   14cbc:	vmul.f32	s15, s15, s14
   14cc0:	vldr	s14, [pc, #204]	; 14d94 <__assert_fail@plt+0x3bb0>
   14cc4:	cmp	r3, #0
   14cc8:	vmuleq.f32	s15, s15, s13
   14ccc:	vcmpe.f32	s15, s14
   14cd0:	vmrs	APSR_nzcv, fpscr
   14cd4:	blt	14ce4 <__assert_fail@plt+0x3b00>
   14cd8:	mvn	r0, #0
   14cdc:	add	sp, sp, #8
   14ce0:	pop	{r4, r5, r6, pc}
   14ce4:	vcvt.u32.f32	s15, s15
   14ce8:	mov	r0, r4
   14cec:	vmov	r1, s15
   14cf0:	bl	14afc <__assert_fail@plt+0x3918>
   14cf4:	cmp	r0, #0
   14cf8:	beq	14cd8 <__assert_fail@plt+0x3af4>
   14cfc:	mov	r3, #0
   14d00:	add	r2, sp, #4
   14d04:	mov	r1, r6
   14d08:	mov	r0, r4
   14d0c:	bl	14288 <__assert_fail@plt+0x30a4>
   14d10:	cmp	r0, #0
   14d14:	bne	14c28 <__assert_fail@plt+0x3a44>
   14d18:	ldr	r3, [sp, #4]
   14d1c:	ldr	r2, [r3]
   14d20:	cmp	r2, #0
   14d24:	beq	14d74 <__assert_fail@plt+0x3b90>
   14d28:	ldr	r0, [r4, #36]	; 0x24
   14d2c:	cmp	r0, #0
   14d30:	ldrne	r3, [r0, #4]
   14d34:	strne	r3, [r4, #36]	; 0x24
   14d38:	bne	14d4c <__assert_fail@plt+0x3b68>
   14d3c:	mov	r0, #8
   14d40:	bl	173ac <__assert_fail@plt+0x61c8>
   14d44:	cmp	r0, #0
   14d48:	beq	14cd8 <__assert_fail@plt+0x3af4>
   14d4c:	ldr	r3, [sp, #4]
   14d50:	ldr	r2, [r3, #4]
   14d54:	str	r6, [r0]
   14d58:	str	r2, [r0, #4]
   14d5c:	str	r0, [r3, #4]
   14d60:	ldr	r3, [r4, #16]
   14d64:	add	r3, r3, #1
   14d68:	str	r3, [r4, #16]
   14d6c:	mov	r0, #1
   14d70:	b	14cdc <__assert_fail@plt+0x3af8>
   14d74:	str	r6, [r3]
   14d78:	ldr	r3, [r4, #16]
   14d7c:	add	r3, r3, #1
   14d80:	str	r3, [r4, #16]
   14d84:	ldr	r3, [r4, #12]
   14d88:	add	r3, r3, #1
   14d8c:	str	r3, [r4, #12]
   14d90:	b	14d6c <__assert_fail@plt+0x3b88>
   14d94:	svcmi	0x00800000
   14d98:	push	{r0, r1, r4, lr}
   14d9c:	add	r2, sp, #4
   14da0:	mov	r4, r1
   14da4:	bl	14c1c <__assert_fail@plt+0x3a38>
   14da8:	cmn	r0, #1
   14dac:	moveq	r4, #0
   14db0:	beq	14dbc <__assert_fail@plt+0x3bd8>
   14db4:	cmp	r0, #0
   14db8:	ldreq	r4, [sp, #4]
   14dbc:	mov	r0, r4
   14dc0:	add	sp, sp, #8
   14dc4:	pop	{r4, pc}
   14dc8:	push	{r0, r1, r4, r5, r6, lr}
   14dcc:	mov	r3, #1
   14dd0:	add	r2, sp, #4
   14dd4:	mov	r4, r0
   14dd8:	bl	14288 <__assert_fail@plt+0x30a4>
   14ddc:	subs	r5, r0, #0
   14de0:	beq	14e98 <__assert_fail@plt+0x3cb4>
   14de4:	ldr	r3, [r4, #16]
   14de8:	sub	r3, r3, #1
   14dec:	str	r3, [r4, #16]
   14df0:	ldr	r3, [sp, #4]
   14df4:	ldr	r3, [r3]
   14df8:	cmp	r3, #0
   14dfc:	bne	14e98 <__assert_fail@plt+0x3cb4>
   14e00:	vldr	s14, [r4, #8]
   14e04:	ldr	r3, [r4, #12]
   14e08:	vcvt.f32.u32	s14, s14
   14e0c:	sub	r3, r3, #1
   14e10:	vmov	s15, r3
   14e14:	str	r3, [r4, #12]
   14e18:	ldr	r3, [r4, #20]
   14e1c:	vldr	s13, [r3]
   14e20:	vcvt.f32.u32	s15, s15
   14e24:	vmul.f32	s14, s14, s13
   14e28:	vcmpe.f32	s15, s14
   14e2c:	vmrs	APSR_nzcv, fpscr
   14e30:	bpl	14e98 <__assert_fail@plt+0x3cb4>
   14e34:	add	r0, r4, #20
   14e38:	bl	14364 <__assert_fail@plt+0x3180>
   14e3c:	vldr	s15, [r4, #8]
   14e40:	vldr	s14, [r4, #12]
   14e44:	ldr	r3, [r4, #20]
   14e48:	vcvt.f32.u32	s15, s15
   14e4c:	vcvt.f32.u32	s13, s14
   14e50:	vldr	s14, [r3]
   14e54:	vmul.f32	s14, s15, s14
   14e58:	vcmpe.f32	s13, s14
   14e5c:	vmrs	APSR_nzcv, fpscr
   14e60:	bpl	14e98 <__assert_fail@plt+0x3cb4>
   14e64:	ldrb	r2, [r3, #16]
   14e68:	mov	r0, r4
   14e6c:	vldr	s14, [r3, #4]
   14e70:	cmp	r2, #0
   14e74:	vmul.f32	s15, s15, s14
   14e78:	vldreq	s14, [r3, #8]
   14e7c:	vmuleq.f32	s15, s15, s14
   14e80:	vcvt.u32.f32	s15, s15
   14e84:	vmov	r1, s15
   14e88:	bl	14afc <__assert_fail@plt+0x3918>
   14e8c:	cmp	r0, #0
   14e90:	ldreq	r0, [r4, #36]	; 0x24
   14e94:	beq	14eb0 <__assert_fail@plt+0x3ccc>
   14e98:	mov	r0, r5
   14e9c:	add	sp, sp, #8
   14ea0:	pop	{r4, r5, r6, pc}
   14ea4:	ldr	r6, [r0, #4]
   14ea8:	bl	17834 <__assert_fail@plt+0x6650>
   14eac:	mov	r0, r6
   14eb0:	cmp	r0, #0
   14eb4:	bne	14ea4 <__assert_fail@plt+0x3cc0>
   14eb8:	str	r0, [r4, #36]	; 0x24
   14ebc:	b	14e98 <__assert_fail@plt+0x3cb4>
   14ec0:	b	14dc8 <__assert_fail@plt+0x3be4>
   14ec4:	mov	r3, #1
   14ec8:	str	r1, [r0]
   14ecc:	str	r1, [r0, #4]
   14ed0:	str	r1, [r0, #8]
   14ed4:	strb	r3, [r0, #28]
   14ed8:	mov	r3, #0
   14edc:	str	r1, [r0, #12]
   14ee0:	str	r1, [r0, #16]
   14ee4:	str	r3, [r0, #20]
   14ee8:	str	r3, [r0, #24]
   14eec:	bx	lr
   14ef0:	ldrb	r0, [r0, #28]
   14ef4:	bx	lr
   14ef8:	ldrb	r2, [r0, #28]
   14efc:	mov	r3, r0
   14f00:	ldr	ip, [r0, #20]
   14f04:	eor	r2, r2, #1
   14f08:	add	ip, r2, ip
   14f0c:	and	ip, ip, #3
   14f10:	ldr	r0, [r0, ip, lsl #2]
   14f14:	str	r1, [r3, ip, lsl #2]
   14f18:	ldr	r1, [r3, #24]
   14f1c:	str	ip, [r3, #20]
   14f20:	cmp	r1, ip
   14f24:	addeq	r2, r2, r1
   14f28:	andeq	r2, r2, #3
   14f2c:	streq	r2, [r3, #24]
   14f30:	mov	r2, #0
   14f34:	strb	r2, [r3, #28]
   14f38:	bx	lr
   14f3c:	ldrb	r2, [r0, #28]
   14f40:	cmp	r2, #0
   14f44:	beq	14f50 <__assert_fail@plt+0x3d6c>
   14f48:	push	{r4, lr}
   14f4c:	bl	111b4 <abort@plt>
   14f50:	ldr	r1, [r0, #16]
   14f54:	mov	r3, r0
   14f58:	ldr	r2, [r0, #20]
   14f5c:	ldr	r0, [r0, r2, lsl #2]
   14f60:	str	r1, [r3, r2, lsl #2]
   14f64:	ldr	r1, [r3, #24]
   14f68:	cmp	r2, r1
   14f6c:	addne	r2, r2, #3
   14f70:	moveq	r2, #1
   14f74:	andne	r2, r2, #3
   14f78:	strbeq	r2, [r3, #28]
   14f7c:	strne	r2, [r3, #20]
   14f80:	bx	lr
   14f84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f88:	mov	r5, r0
   14f8c:	ldrb	r3, [r0]
   14f90:	sub	r3, r3, #48	; 0x30
   14f94:	cmp	r3, #7
   14f98:	subhi	r3, r0, #1
   14f9c:	movhi	r0, #1
   14fa0:	bhi	15034 <__assert_fail@plt+0x3e50>
   14fa4:	mov	r3, r5
   14fa8:	mov	r4, #0
   14fac:	ldrb	r2, [r3], #1
   14fb0:	lsl	r4, r4, #3
   14fb4:	sub	r4, r4, #48	; 0x30
   14fb8:	add	r4, r2, r4
   14fbc:	cmp	r4, #4096	; 0x1000
   14fc0:	bcs	15270 <__assert_fail@plt+0x408c>
   14fc4:	ldrb	r2, [r3]
   14fc8:	sub	r1, r2, #48	; 0x30
   14fcc:	cmp	r1, #7
   14fd0:	bls	14fac <__assert_fail@plt+0x3dc8>
   14fd4:	cmp	r2, #0
   14fd8:	bne	15270 <__assert_fail@plt+0x408c>
   14fdc:	sub	r3, r3, r5
   14fe0:	mov	r0, #32
   14fe4:	cmp	r3, #4
   14fe8:	andle	r5, r4, #3072	; 0xc00
   14fec:	movwgt	r5, #4095	; 0xfff
   14ff0:	mvnle	r5, r5, lsr #10
   14ff4:	mvnle	r5, r5, lsl #10
   14ff8:	bl	16fe0 <__assert_fail@plt+0x5dfc>
   14ffc:	movw	r3, #317	; 0x13d
   15000:	strh	r3, [r0]
   15004:	movw	r3, #4095	; 0xfff
   15008:	strd	r4, [r0, #8]
   1500c:	str	r3, [r0, #4]
   15010:	mov	r3, #0
   15014:	strb	r3, [r0, #17]
   15018:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1501c:	and	ip, r4, #239	; 0xef
   15020:	cmp	r4, #43	; 0x2b
   15024:	cmpne	ip, #45	; 0x2d
   15028:	moveq	ip, #1
   1502c:	movne	ip, #0
   15030:	add	r0, r0, ip
   15034:	ldrb	r4, [r3, #1]!
   15038:	cmp	r4, #0
   1503c:	bne	1501c <__assert_fail@plt+0x3e38>
   15040:	mov	r1, #16
   15044:	movw	r7, #519	; 0x207
   15048:	bl	170a0 <__assert_fail@plt+0x5ebc>
   1504c:	movw	r8, #1080	; 0x438
   15050:	mov	ip, r4
   15054:	mov	r1, #0
   15058:	ldrb	r3, [r5]
   1505c:	mov	r2, r5
   15060:	add	r5, r5, #1
   15064:	cmp	r3, #97	; 0x61
   15068:	beq	15124 <__assert_fail@plt+0x3f40>
   1506c:	bhi	150f4 <__assert_fail@plt+0x3f10>
   15070:	cmp	r3, #45	; 0x2d
   15074:	beq	15088 <__assert_fail@plt+0x3ea4>
   15078:	cmp	r3, #61	; 0x3d
   1507c:	beq	15088 <__assert_fail@plt+0x3ea4>
   15080:	cmp	r3, #43	; 0x2b
   15084:	bne	1526c <__assert_fail@plt+0x4088>
   15088:	add	r4, r0, ip, lsl #4
   1508c:	ldrb	lr, [r2, #1]
   15090:	mov	r3, r2
   15094:	ldrb	r9, [r3], #1
   15098:	cmp	lr, #103	; 0x67
   1509c:	beq	151e8 <__assert_fail@plt+0x4004>
   150a0:	bhi	1512c <__assert_fail@plt+0x3f48>
   150a4:	sub	lr, lr, #48	; 0x30
   150a8:	cmp	lr, #7
   150ac:	movls	r2, r3
   150b0:	movls	r3, #0
   150b4:	bls	15150 <__assert_fail@plt+0x3f6c>
   150b8:	mov	lr, r3
   150bc:	mov	r5, #1
   150c0:	mov	r3, #0
   150c4:	ldrb	r6, [lr]
   150c8:	mov	r2, lr
   150cc:	add	lr, lr, #1
   150d0:	cmp	r6, #115	; 0x73
   150d4:	beq	15248 <__assert_fail@plt+0x4064>
   150d8:	bhi	15210 <__assert_fail@plt+0x402c>
   150dc:	cmp	r6, #88	; 0x58
   150e0:	beq	15250 <__assert_fail@plt+0x406c>
   150e4:	cmp	r6, #114	; 0x72
   150e8:	beq	15230 <__assert_fail@plt+0x404c>
   150ec:	mov	lr, #0
   150f0:	b	15198 <__assert_fail@plt+0x3fb4>
   150f4:	cmp	r3, #111	; 0x6f
   150f8:	beq	1511c <__assert_fail@plt+0x3f38>
   150fc:	cmp	r3, #117	; 0x75
   15100:	beq	15114 <__assert_fail@plt+0x3f30>
   15104:	cmp	r3, #103	; 0x67
   15108:	bne	1526c <__assert_fail@plt+0x4088>
   1510c:	orr	r1, r1, r8
   15110:	b	15058 <__assert_fail@plt+0x3e74>
   15114:	orr	r1, r1, #2496	; 0x9c0
   15118:	b	15058 <__assert_fail@plt+0x3e74>
   1511c:	orr	r1, r1, r7
   15120:	b	15058 <__assert_fail@plt+0x3e74>
   15124:	movw	r1, #4095	; 0xfff
   15128:	b	15058 <__assert_fail@plt+0x3e74>
   1512c:	cmp	lr, #111	; 0x6f
   15130:	beq	151fc <__assert_fail@plt+0x4018>
   15134:	cmp	lr, #117	; 0x75
   15138:	bne	150b8 <__assert_fail@plt+0x3ed4>
   1513c:	add	r2, r2, #2
   15140:	mov	r5, #3
   15144:	mov	lr, #0
   15148:	mov	r3, #448	; 0x1c0
   1514c:	b	15198 <__assert_fail@plt+0x3fb4>
   15150:	ldrb	lr, [r2], #1
   15154:	lsl	r3, r3, #3
   15158:	sub	r3, r3, #48	; 0x30
   1515c:	add	r3, lr, r3
   15160:	cmp	r3, #4096	; 0x1000
   15164:	bcs	1526c <__assert_fail@plt+0x4088>
   15168:	ldrb	lr, [r2]
   1516c:	sub	r5, lr, #48	; 0x30
   15170:	cmp	r5, #7
   15174:	bls	15150 <__assert_fail@plt+0x3f6c>
   15178:	cmp	r1, #0
   1517c:	bne	1526c <__assert_fail@plt+0x4088>
   15180:	cmp	lr, #0
   15184:	cmpne	lr, #44	; 0x2c
   15188:	bne	1526c <__assert_fail@plt+0x4088>
   1518c:	movw	r1, #4095	; 0xfff
   15190:	mov	r5, #1
   15194:	mov	lr, r1
   15198:	cmp	lr, #0
   1519c:	add	ip, ip, #1
   151a0:	strb	r9, [r4]
   151a4:	strb	r5, [r4, #1]
   151a8:	stmib	r4, {r1, r3}
   151ac:	bne	151bc <__assert_fail@plt+0x3fd8>
   151b0:	cmp	r1, #0
   151b4:	andne	lr, r1, r3
   151b8:	moveq	lr, r3
   151bc:	ldrb	r3, [r2]
   151c0:	add	r4, r4, #16
   151c4:	str	lr, [r4, #-4]
   151c8:	and	lr, r3, #239	; 0xef
   151cc:	cmp	r3, #43	; 0x2b
   151d0:	cmpne	lr, #45	; 0x2d
   151d4:	beq	1508c <__assert_fail@plt+0x3ea8>
   151d8:	cmp	r3, #44	; 0x2c
   151dc:	bne	15258 <__assert_fail@plt+0x4074>
   151e0:	add	r5, r2, #1
   151e4:	b	15054 <__assert_fail@plt+0x3e70>
   151e8:	add	r2, r2, #2
   151ec:	mov	r5, #3
   151f0:	mov	lr, #0
   151f4:	mov	r3, #56	; 0x38
   151f8:	b	15198 <__assert_fail@plt+0x3fb4>
   151fc:	add	r2, r2, #2
   15200:	mov	r5, #3
   15204:	mov	lr, #0
   15208:	mov	r3, #7
   1520c:	b	15198 <__assert_fail@plt+0x3fb4>
   15210:	cmp	r6, #119	; 0x77
   15214:	beq	15238 <__assert_fail@plt+0x4054>
   15218:	cmp	r6, #120	; 0x78
   1521c:	beq	15240 <__assert_fail@plt+0x405c>
   15220:	cmp	r6, #116	; 0x74
   15224:	bne	150ec <__assert_fail@plt+0x3f08>
   15228:	orr	r3, r3, #512	; 0x200
   1522c:	b	150c4 <__assert_fail@plt+0x3ee0>
   15230:	orr	r3, r3, #292	; 0x124
   15234:	b	150c4 <__assert_fail@plt+0x3ee0>
   15238:	orr	r3, r3, #146	; 0x92
   1523c:	b	150c4 <__assert_fail@plt+0x3ee0>
   15240:	orr	r3, r3, #73	; 0x49
   15244:	b	150c4 <__assert_fail@plt+0x3ee0>
   15248:	orr	r3, r3, #3072	; 0xc00
   1524c:	b	150c4 <__assert_fail@plt+0x3ee0>
   15250:	mov	r5, #2
   15254:	b	150c4 <__assert_fail@plt+0x3ee0>
   15258:	cmp	r3, #0
   1525c:	bne	1526c <__assert_fail@plt+0x4088>
   15260:	add	ip, r0, ip, lsl #4
   15264:	strb	r3, [ip, #1]
   15268:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1526c:	bl	17834 <__assert_fail@plt+0x6650>
   15270:	mov	r0, #0
   15274:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15278:	push	{r4, r5, lr}
   1527c:	sub	sp, sp, #108	; 0x6c
   15280:	mov	r1, sp
   15284:	bl	17cd0 <__assert_fail@plt+0x6aec>
   15288:	subs	r4, r0, #0
   1528c:	movne	r0, #0
   15290:	bne	152bc <__assert_fail@plt+0x40d8>
   15294:	mov	r0, #32
   15298:	ldr	r5, [sp, #16]
   1529c:	bl	16fe0 <__assert_fail@plt+0x5dfc>
   152a0:	movw	r3, #317	; 0x13d
   152a4:	strh	r3, [r0]
   152a8:	movw	r3, #4095	; 0xfff
   152ac:	str	r3, [r0, #4]
   152b0:	str	r5, [r0, #8]
   152b4:	str	r3, [r0, #12]
   152b8:	strb	r4, [r0, #17]
   152bc:	add	sp, sp, #108	; 0x6c
   152c0:	pop	{r4, r5, pc}
   152c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   152c8:	cmp	r1, #0
   152cc:	ubfx	r0, r0, #0, #12
   152d0:	movne	r6, #3072	; 0xc00
   152d4:	moveq	r6, #0
   152d8:	add	r3, r3, #16
   152dc:	mov	r4, #0
   152e0:	ldr	r5, [sp, #28]
   152e4:	mvn	r2, r2
   152e8:	ldrb	r7, [r3, #-15]
   152ec:	cmp	r7, #0
   152f0:	bne	15300 <__assert_fail@plt+0x411c>
   152f4:	cmp	r5, #0
   152f8:	strne	r4, [r5]
   152fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15300:	cmp	r7, #2
   15304:	ldr	ip, [r3, #-12]
   15308:	ldr	r8, [r3, #-4]
   1530c:	ldr	lr, [r3, #-8]
   15310:	bic	r8, r6, r8
   15314:	beq	15394 <__assert_fail@plt+0x41b0>
   15318:	cmp	r7, #3
   1531c:	bne	15354 <__assert_fail@plt+0x4170>
   15320:	and	lr, lr, r0
   15324:	tst	lr, #292	; 0x124
   15328:	movne	r7, #292	; 0x124
   1532c:	moveq	r7, #0
   15330:	tst	lr, #146	; 0x92
   15334:	movne	r9, #146	; 0x92
   15338:	moveq	r9, #0
   1533c:	tst	lr, #73	; 0x49
   15340:	orr	r7, r7, r9
   15344:	movne	r9, #73	; 0x49
   15348:	moveq	r9, #0
   1534c:	orr	r7, r7, r9
   15350:	orr	lr, r7, lr
   15354:	cmp	ip, #0
   15358:	bic	lr, lr, r8
   1535c:	movne	r7, ip
   15360:	moveq	r7, r2
   15364:	and	lr, lr, r7
   15368:	ldrb	r7, [r3, #-16]
   1536c:	cmp	r7, #45	; 0x2d
   15370:	orreq	r4, r4, lr
   15374:	biceq	r0, r0, lr
   15378:	beq	153c4 <__assert_fail@plt+0x41e0>
   1537c:	cmp	r7, #61	; 0x3d
   15380:	beq	153a4 <__assert_fail@plt+0x41c0>
   15384:	cmp	r7, #43	; 0x2b
   15388:	orreq	r4, r4, lr
   1538c:	orreq	r0, r0, lr
   15390:	b	153c4 <__assert_fail@plt+0x41e0>
   15394:	and	r7, r0, #73	; 0x49
   15398:	orrs	r7, r7, r1
   1539c:	orrne	lr, lr, #73	; 0x49
   153a0:	b	15354 <__assert_fail@plt+0x4170>
   153a4:	cmp	ip, #0
   153a8:	mvnne	ip, ip
   153ac:	orr	ip, ip, r8
   153b0:	mvn	r7, ip
   153b4:	and	ip, ip, r0
   153b8:	ubfx	r7, r7, #0, #12
   153bc:	orr	r0, ip, lr
   153c0:	orr	r4, r4, r7
   153c4:	add	r3, r3, #16
   153c8:	b	152e8 <__assert_fail@plt+0x4104>
   153cc:	push	{r2, r3}
   153d0:	push	{r0, r1, r2, lr}
   153d4:	ldr	r2, [sp, #16]
   153d8:	ands	r3, r2, #64	; 0x40
   153dc:	addne	r3, sp, #20
   153e0:	strne	r3, [sp, #4]
   153e4:	ldrne	r3, [sp, #20]
   153e8:	bl	1107c <openat64@plt>
   153ec:	bl	16a9c <__assert_fail@plt+0x58b8>
   153f0:	add	sp, sp, #12
   153f4:	pop	{lr}		; (ldr lr, [sp], #4)
   153f8:	add	sp, sp, #8
   153fc:	bx	lr
   15400:	orr	r2, r2, #540672	; 0x84000
   15404:	push	{r4, r5, r6, r7, r8, lr}
   15408:	mov	r5, r3
   1540c:	orr	r2, r2, #2304	; 0x900
   15410:	bl	153cc <__assert_fail@plt+0x41e8>
   15414:	subs	r6, r0, #0
   15418:	movlt	r4, #0
   1541c:	blt	15448 <__assert_fail@plt+0x4264>
   15420:	bl	1113c <fdopendir@plt>
   15424:	subs	r4, r0, #0
   15428:	strne	r6, [r5]
   1542c:	bne	15448 <__assert_fail@plt+0x4264>
   15430:	bl	11094 <__errno_location@plt>
   15434:	mov	r5, r0
   15438:	mov	r0, r6
   1543c:	ldr	r7, [r5]
   15440:	bl	111c0 <close@plt>
   15444:	str	r7, [r5]
   15448:	mov	r0, r4
   1544c:	pop	{r4, r5, r6, r7, r8, pc}
   15450:	push	{r4, r5, r6, lr}
   15454:	subs	r4, r0, #0
   15458:	bne	15470 <__assert_fail@plt+0x428c>
   1545c:	ldr	r3, [pc, #124]	; 154e0 <__assert_fail@plt+0x42fc>
   15460:	ldr	r0, [pc, #124]	; 154e4 <__assert_fail@plt+0x4300>
   15464:	ldr	r1, [r3]
   15468:	bl	1119c <fputs@plt>
   1546c:	bl	111b4 <abort@plt>
   15470:	mov	r1, #47	; 0x2f
   15474:	bl	11118 <strrchr@plt>
   15478:	subs	r6, r0, #0
   1547c:	beq	154cc <__assert_fail@plt+0x42e8>
   15480:	add	r5, r6, #1
   15484:	sub	r3, r5, r4
   15488:	cmp	r3, #6
   1548c:	ble	154cc <__assert_fail@plt+0x42e8>
   15490:	mov	r2, #7
   15494:	ldr	r1, [pc, #76]	; 154e8 <__assert_fail@plt+0x4304>
   15498:	sub	r0, r6, #6
   1549c:	bl	111a8 <strncmp@plt>
   154a0:	cmp	r0, #0
   154a4:	bne	154cc <__assert_fail@plt+0x42e8>
   154a8:	mov	r2, #3
   154ac:	ldr	r1, [pc, #56]	; 154ec <__assert_fail@plt+0x4308>
   154b0:	mov	r0, r5
   154b4:	bl	111a8 <strncmp@plt>
   154b8:	cmp	r0, #0
   154bc:	ldreq	r3, [pc, #44]	; 154f0 <__assert_fail@plt+0x430c>
   154c0:	addeq	r4, r6, #4
   154c4:	movne	r4, r5
   154c8:	streq	r4, [r3]
   154cc:	ldr	r3, [pc, #32]	; 154f4 <__assert_fail@plt+0x4310>
   154d0:	str	r4, [r3]
   154d4:	ldr	r3, [pc, #28]	; 154f8 <__assert_fail@plt+0x4314>
   154d8:	str	r4, [r3]
   154dc:	pop	{r4, r5, r6, pc}
   154e0:	andeq	r9, r2, r8, ror r1
   154e4:	andeq	r8, r1, r5, lsl r8
   154e8:	andeq	r8, r1, sp, asr #16
   154ec:	andeq	r8, r1, r5, asr r8
   154f0:	andeq	r9, r2, r8, ror #2
   154f4:			; <UNDEFINED> instruction: 0x000291b4
   154f8:	andeq	r9, r2, ip, ror #2
   154fc:	push	{r4, lr}
   15500:	mov	r2, #48	; 0x30
   15504:	mov	r4, r1
   15508:	mov	r1, #0
   1550c:	bl	110b8 <memset@plt>
   15510:	cmp	r4, #10
   15514:	bne	1551c <__assert_fail@plt+0x4338>
   15518:	bl	111b4 <abort@plt>
   1551c:	str	r4, [r0]
   15520:	pop	{r4, pc}
   15524:	push	{r4, r5, r6, lr}
   15528:	mov	r2, #5
   1552c:	mov	r6, r0
   15530:	mov	r5, r1
   15534:	mov	r1, r0
   15538:	mov	r0, #0
   1553c:	bl	10f80 <dcgettext@plt>
   15540:	cmp	r6, r0
   15544:	mov	r4, r0
   15548:	bne	155b8 <__assert_fail@plt+0x43d4>
   1554c:	bl	17944 <__assert_fail@plt+0x6760>
   15550:	ldrb	r3, [r0]
   15554:	bic	r3, r3, #32
   15558:	cmp	r3, #85	; 0x55
   1555c:	bne	155c0 <__assert_fail@plt+0x43dc>
   15560:	ldrb	r3, [r0, #1]
   15564:	bic	r3, r3, #32
   15568:	cmp	r3, #84	; 0x54
   1556c:	bne	15630 <__assert_fail@plt+0x444c>
   15570:	ldrb	r3, [r0, #2]
   15574:	bic	r3, r3, #32
   15578:	cmp	r3, #70	; 0x46
   1557c:	bne	15630 <__assert_fail@plt+0x444c>
   15580:	ldrb	r3, [r0, #3]
   15584:	cmp	r3, #45	; 0x2d
   15588:	bne	15630 <__assert_fail@plt+0x444c>
   1558c:	ldrb	r3, [r0, #4]
   15590:	cmp	r3, #56	; 0x38
   15594:	bne	15630 <__assert_fail@plt+0x444c>
   15598:	ldrb	r3, [r0, #5]
   1559c:	cmp	r3, #0
   155a0:	bne	15630 <__assert_fail@plt+0x444c>
   155a4:	ldrb	r2, [r4]
   155a8:	ldr	r3, [pc, #144]	; 15640 <__assert_fail@plt+0x445c>
   155ac:	ldr	r4, [pc, #144]	; 15644 <__assert_fail@plt+0x4460>
   155b0:	cmp	r2, #96	; 0x60
   155b4:	movne	r4, r3
   155b8:	mov	r0, r4
   155bc:	pop	{r4, r5, r6, pc}
   155c0:	cmp	r3, #71	; 0x47
   155c4:	bne	15630 <__assert_fail@plt+0x444c>
   155c8:	ldrb	r3, [r0, #1]
   155cc:	bic	r3, r3, #32
   155d0:	cmp	r3, #66	; 0x42
   155d4:	bne	15630 <__assert_fail@plt+0x444c>
   155d8:	ldrb	r3, [r0, #2]
   155dc:	cmp	r3, #49	; 0x31
   155e0:	bne	15630 <__assert_fail@plt+0x444c>
   155e4:	ldrb	r3, [r0, #3]
   155e8:	cmp	r3, #56	; 0x38
   155ec:	bne	15630 <__assert_fail@plt+0x444c>
   155f0:	ldrb	r3, [r0, #4]
   155f4:	cmp	r3, #48	; 0x30
   155f8:	bne	15630 <__assert_fail@plt+0x444c>
   155fc:	ldrb	r3, [r0, #5]
   15600:	cmp	r3, #51	; 0x33
   15604:	bne	15630 <__assert_fail@plt+0x444c>
   15608:	ldrb	r3, [r0, #6]
   1560c:	cmp	r3, #48	; 0x30
   15610:	bne	15630 <__assert_fail@plt+0x444c>
   15614:	ldrb	r3, [r0, #7]
   15618:	cmp	r3, #0
   1561c:	bne	15630 <__assert_fail@plt+0x444c>
   15620:	ldrb	r2, [r4]
   15624:	ldr	r3, [pc, #28]	; 15648 <__assert_fail@plt+0x4464>
   15628:	ldr	r4, [pc, #28]	; 1564c <__assert_fail@plt+0x4468>
   1562c:	b	155b0 <__assert_fail@plt+0x43cc>
   15630:	ldr	r4, [pc, #24]	; 15650 <__assert_fail@plt+0x446c>
   15634:	cmp	r5, #9
   15638:	ldr	r3, [pc, #20]	; 15654 <__assert_fail@plt+0x4470>
   1563c:	b	155b4 <__assert_fail@plt+0x43d0>
   15640:			; <UNDEFINED> instruction: 0x000188b2
   15644:			; <UNDEFINED> instruction: 0x000188bd
   15648:			; <UNDEFINED> instruction: 0x000188b6
   1564c:			; <UNDEFINED> instruction: 0x000188b9
   15650:			; <UNDEFINED> instruction: 0x000188b0
   15654:	andeq	r8, r1, r1, asr #17
   15658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1565c:	sub	sp, sp, #108	; 0x6c
   15660:	mov	r8, r0
   15664:	mov	r5, r1
   15668:	mov	r6, #0
   1566c:	str	r3, [sp, #40]	; 0x28
   15670:	str	r2, [sp, #48]	; 0x30
   15674:	ldr	sl, [sp, #144]	; 0x90
   15678:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   1567c:	ldr	r3, [sp, #148]	; 0x94
   15680:	str	r6, [sp, #24]
   15684:	str	r6, [sp, #32]
   15688:	str	r6, [sp, #44]	; 0x2c
   1568c:	str	r6, [sp, #52]	; 0x34
   15690:	ubfx	r7, r3, #1, #1
   15694:	mov	r3, #1
   15698:	str	r6, [sp, #60]	; 0x3c
   1569c:	str	r3, [sp, #72]	; 0x48
   156a0:	str	r0, [sp, #76]	; 0x4c
   156a4:	cmp	sl, #10
   156a8:	ldrls	pc, [pc, sl, lsl #2]
   156ac:	b	158f0 <__assert_fail@plt+0x470c>
   156b0:	ldrdeq	r5, [r1], -ip
   156b4:	andeq	r5, r1, r8, lsl #18
   156b8:	andeq	r5, r1, ip, lsl #17
   156bc:	andeq	r5, r1, r4, lsr #17
   156c0:	andeq	r5, r1, r4, ror r8
   156c4:	andeq	r5, r1, ip, asr #15
   156c8:	andeq	r5, r1, ip, lsr #15
   156cc:	strdeq	r5, [r1], -r4
   156d0:	strdeq	r5, [r1], -ip
   156d4:	strdeq	r5, [r1], -ip
   156d8:	strdeq	r5, [r1], -ip
   156dc:	mov	r4, sl
   156e0:	mov	r7, #0
   156e4:	mov	r9, r5
   156e8:	mov	r3, #0
   156ec:	str	r6, [sp, #68]	; 0x44
   156f0:	str	r3, [sp, #28]
   156f4:	ldr	r3, [sp, #40]	; 0x28
   156f8:	cmn	r3, #1
   156fc:	bne	1629c <__assert_fail@plt+0x50b8>
   15700:	ldr	r2, [sp, #28]
   15704:	ldr	r3, [sp, #48]	; 0x30
   15708:	ldrb	r3, [r3, r2]
   1570c:	adds	r3, r3, #0
   15710:	movne	r3, #1
   15714:	str	r3, [sp, #36]	; 0x24
   15718:	ldr	r3, [sp, #36]	; 0x24
   1571c:	cmp	r3, #0
   15720:	bne	1592c <__assert_fail@plt+0x4748>
   15724:	sub	r3, sl, #2
   15728:	cmp	r4, #0
   1572c:	clz	r3, r3
   15730:	movne	r2, #0
   15734:	lsr	r3, r3, #5
   15738:	andeq	r2, r3, r7
   1573c:	cmp	r2, #0
   15740:	bne	15af0 <__assert_fail@plt+0x490c>
   15744:	eor	r7, r7, #1
   15748:	ands	r3, r3, r7
   1574c:	beq	16314 <__assert_fail@plt+0x5130>
   15750:	ldr	r2, [sp, #68]	; 0x44
   15754:	cmp	r2, #0
   15758:	beq	162dc <__assert_fail@plt+0x50f8>
   1575c:	ldr	r3, [sp, #72]	; 0x48
   15760:	cmp	r3, #0
   15764:	beq	162b0 <__assert_fail@plt+0x50cc>
   15768:	ldr	r2, [sp, #48]	; 0x30
   1576c:	ldr	r3, [sp, #160]	; 0xa0
   15770:	ldr	r1, [sp, #60]	; 0x3c
   15774:	str	r3, [sp, #16]
   15778:	ldr	r3, [sp, #156]	; 0x9c
   1577c:	str	r3, [sp, #12]
   15780:	ldr	r3, [sp, #152]	; 0x98
   15784:	str	r3, [sp, #8]
   15788:	ldr	r3, [sp, #148]	; 0x94
   1578c:	str	r3, [sp, #4]
   15790:	mov	r3, #5
   15794:	str	r3, [sp]
   15798:	ldr	r3, [sp, #40]	; 0x28
   1579c:	mov	r0, r8
   157a0:	bl	15658 <__assert_fail@plt+0x4474>
   157a4:	mov	r4, r0
   157a8:	b	16308 <__assert_fail@plt+0x5124>
   157ac:	ldr	r3, [pc, #2948]	; 16338 <__assert_fail@plt+0x5154>
   157b0:	mov	r7, #1
   157b4:	mov	r4, #0
   157b8:	mov	sl, #5
   157bc:	str	r7, [sp, #24]
   157c0:	str	r7, [sp, #32]
   157c4:	str	r3, [sp, #44]	; 0x2c
   157c8:	b	156e4 <__assert_fail@plt+0x4500>
   157cc:	cmp	r7, #0
   157d0:	bne	15914 <__assert_fail@plt+0x4730>
   157d4:	cmp	r5, #0
   157d8:	mov	r4, #1
   157dc:	movne	r3, #34	; 0x22
   157e0:	strbne	r3, [r8]
   157e4:	mov	r3, #1
   157e8:	str	r3, [sp, #24]
   157ec:	str	r3, [sp, #32]
   157f0:	ldr	r3, [pc, #2880]	; 16338 <__assert_fail@plt+0x5154>
   157f4:	str	r3, [sp, #44]	; 0x2c
   157f8:	b	156e4 <__assert_fail@plt+0x4500>
   157fc:	cmp	sl, #10
   15800:	beq	15824 <__assert_fail@plt+0x4640>
   15804:	mov	r1, sl
   15808:	ldr	r0, [pc, #2860]	; 1633c <__assert_fail@plt+0x5158>
   1580c:	bl	15524 <__assert_fail@plt+0x4340>
   15810:	mov	r1, sl
   15814:	str	r0, [sp, #156]	; 0x9c
   15818:	ldr	r0, [pc, #2848]	; 16340 <__assert_fail@plt+0x515c>
   1581c:	bl	15524 <__assert_fail@plt+0x4340>
   15820:	str	r0, [sp, #160]	; 0xa0
   15824:	cmp	r7, #0
   15828:	moveq	r4, r7
   1582c:	beq	15844 <__assert_fail@plt+0x4660>
   15830:	mov	r4, #0
   15834:	b	15854 <__assert_fail@plt+0x4670>
   15838:	cmp	r5, r4
   1583c:	strbhi	r3, [r8, r4]
   15840:	add	r4, r4, #1
   15844:	ldr	r3, [sp, #156]	; 0x9c
   15848:	ldrb	r3, [r3, r4]
   1584c:	cmp	r3, #0
   15850:	bne	15838 <__assert_fail@plt+0x4654>
   15854:	ldr	r0, [sp, #160]	; 0xa0
   15858:	bl	11070 <strlen@plt>
   1585c:	ldr	r3, [sp, #160]	; 0xa0
   15860:	str	r0, [sp, #32]
   15864:	str	r3, [sp, #44]	; 0x2c
   15868:	mov	r3, #1
   1586c:	str	r3, [sp, #24]
   15870:	b	156e4 <__assert_fail@plt+0x4500>
   15874:	mov	r3, #1
   15878:	cmp	r7, #0
   1587c:	streq	r3, [sp, #24]
   15880:	beq	158c4 <__assert_fail@plt+0x46e0>
   15884:	str	r3, [sp, #32]
   15888:	b	158b0 <__assert_fail@plt+0x46cc>
   1588c:	cmp	r7, #0
   15890:	beq	158c4 <__assert_fail@plt+0x46e0>
   15894:	mov	r3, #1
   15898:	str	r3, [sp, #32]
   1589c:	ldr	r3, [pc, #2716]	; 16340 <__assert_fail@plt+0x515c>
   158a0:	b	15924 <__assert_fail@plt+0x4740>
   158a4:	mov	r7, #1
   158a8:	str	r7, [sp, #24]
   158ac:	str	r7, [sp, #32]
   158b0:	ldr	r3, [pc, #2696]	; 16340 <__assert_fail@plt+0x515c>
   158b4:	mov	r4, #0
   158b8:	str	r3, [sp, #44]	; 0x2c
   158bc:	mov	sl, #2
   158c0:	b	156e4 <__assert_fail@plt+0x4500>
   158c4:	cmp	r5, #0
   158c8:	movne	r3, #39	; 0x27
   158cc:	movne	r7, #0
   158d0:	strbne	r3, [r8]
   158d4:	moveq	r7, r5
   158d8:	mov	r3, #1
   158dc:	mov	r4, #1
   158e0:	str	r3, [sp, #32]
   158e4:	ldr	r3, [pc, #2644]	; 16340 <__assert_fail@plt+0x515c>
   158e8:	str	r3, [sp, #44]	; 0x2c
   158ec:	b	158bc <__assert_fail@plt+0x46d8>
   158f0:	bl	111b4 <abort@plt>
   158f4:	mov	r3, #1
   158f8:	mov	r7, #0
   158fc:	str	r3, [sp, #24]
   15900:	mov	r4, #0
   15904:	b	156e4 <__assert_fail@plt+0x4500>
   15908:	mov	r7, #1
   1590c:	str	sl, [sp, #32]
   15910:	b	158b0 <__assert_fail@plt+0x46cc>
   15914:	mov	r3, #1
   15918:	str	r7, [sp, #24]
   1591c:	str	r3, [sp, #32]
   15920:	ldr	r3, [pc, #2576]	; 16338 <__assert_fail@plt+0x5154>
   15924:	str	r3, [sp, #44]	; 0x2c
   15928:	b	15900 <__assert_fail@plt+0x471c>
   1592c:	ldr	fp, [sp, #24]
   15930:	ldr	r3, [sp, #32]
   15934:	cmp	sl, #2
   15938:	moveq	fp, #0
   1593c:	andne	fp, fp, #1
   15940:	adds	r5, r3, #0
   15944:	movne	r5, #1
   15948:	ands	r3, fp, r5
   1594c:	str	r3, [sp, #64]	; 0x40
   15950:	beq	15a20 <__assert_fail@plt+0x483c>
   15954:	ldr	r3, [sp, #28]
   15958:	ldr	r2, [sp, #32]
   1595c:	cmp	r2, #1
   15960:	add	r6, r3, r2
   15964:	mov	r3, r2
   15968:	ldr	r2, [sp, #40]	; 0x28
   1596c:	movls	r3, #0
   15970:	movhi	r3, #1
   15974:	cmn	r2, #1
   15978:	movne	r3, #0
   1597c:	cmp	r3, #0
   15980:	beq	15990 <__assert_fail@plt+0x47ac>
   15984:	ldr	r0, [sp, #48]	; 0x30
   15988:	bl	11070 <strlen@plt>
   1598c:	str	r0, [sp, #40]	; 0x28
   15990:	ldr	r3, [sp, #40]	; 0x28
   15994:	cmp	r6, r3
   15998:	bhi	15a18 <__assert_fail@plt+0x4834>
   1599c:	ldr	r0, [sp, #28]
   159a0:	ldr	r2, [sp, #32]
   159a4:	ldr	r3, [sp, #48]	; 0x30
   159a8:	ldr	r1, [sp, #44]	; 0x2c
   159ac:	add	r0, r3, r0
   159b0:	bl	10f68 <memcmp@plt>
   159b4:	cmp	r0, #0
   159b8:	bne	15a18 <__assert_fail@plt+0x4834>
   159bc:	cmp	r7, #0
   159c0:	beq	15a20 <__assert_fail@plt+0x483c>
   159c4:	str	r7, [sp, #24]
   159c8:	ldr	r3, [sp, #24]
   159cc:	mov	r1, r9
   159d0:	ldr	r2, [sp, #48]	; 0x30
   159d4:	cmp	sl, #2
   159d8:	movne	r3, #0
   159dc:	andeq	r3, r3, #1
   159e0:	cmp	r3, #0
   159e4:	ldr	r3, [sp, #160]	; 0xa0
   159e8:	movne	sl, #4
   159ec:	str	sl, [sp]
   159f0:	str	r3, [sp, #16]
   159f4:	ldr	r3, [sp, #156]	; 0x9c
   159f8:	str	r3, [sp, #12]
   159fc:	mov	r3, #0
   15a00:	str	r3, [sp, #8]
   15a04:	ldr	r3, [sp, #148]	; 0x94
   15a08:	bic	r3, r3, #2
   15a0c:	str	r3, [sp, #4]
   15a10:	ldr	r3, [sp, #40]	; 0x28
   15a14:	b	1579c <__assert_fail@plt+0x45b8>
   15a18:	mov	r3, #0
   15a1c:	str	r3, [sp, #64]	; 0x40
   15a20:	ldr	r2, [sp, #28]
   15a24:	ldr	r3, [sp, #48]	; 0x30
   15a28:	add	r3, r3, r2
   15a2c:	str	r3, [sp, #80]	; 0x50
   15a30:	ldr	r3, [sp, #48]	; 0x30
   15a34:	ldrb	r6, [r3, r2]
   15a38:	cmp	r6, #58	; 0x3a
   15a3c:	bhi	15ba0 <__assert_fail@plt+0x49bc>
   15a40:	cmp	r6, #43	; 0x2b
   15a44:	bcs	15d60 <__assert_fail@plt+0x4b7c>
   15a48:	cmp	r6, #32
   15a4c:	beq	15db4 <__assert_fail@plt+0x4bd0>
   15a50:	bhi	15af8 <__assert_fail@plt+0x4914>
   15a54:	cmp	r6, #9
   15a58:	beq	15f5c <__assert_fail@plt+0x4d78>
   15a5c:	bhi	15abc <__assert_fail@plt+0x48d8>
   15a60:	cmp	r6, #7
   15a64:	beq	15f6c <__assert_fail@plt+0x4d88>
   15a68:	bhi	15f88 <__assert_fail@plt+0x4da4>
   15a6c:	cmp	r6, #0
   15a70:	beq	15dd0 <__assert_fail@plt+0x4bec>
   15a74:	ldr	r3, [sp, #76]	; 0x4c
   15a78:	cmp	r3, #1
   15a7c:	bne	15fd4 <__assert_fail@plt+0x4df0>
   15a80:	bl	11058 <__ctype_b_loc@plt>
   15a84:	ldr	r2, [r0]
   15a88:	sxth	r3, r6
   15a8c:	lsl	r3, r3, #1
   15a90:	ldrh	r5, [r2, r3]
   15a94:	ldr	r3, [sp, #76]	; 0x4c
   15a98:	ubfx	r5, r5, #14, #1
   15a9c:	str	r3, [sp, #56]	; 0x38
   15aa0:	ldr	r3, [sp, #24]
   15aa4:	eor	fp, r5, #1
   15aa8:	and	fp, fp, r3
   15aac:	ands	fp, fp, #255	; 0xff
   15ab0:	beq	15c90 <__assert_fail@plt+0x4aac>
   15ab4:	mov	r5, #0
   15ab8:	b	16080 <__assert_fail@plt+0x4e9c>
   15abc:	cmp	r6, #11
   15ac0:	beq	15f90 <__assert_fail@plt+0x4dac>
   15ac4:	bcc	15f64 <__assert_fail@plt+0x4d80>
   15ac8:	cmp	r6, #12
   15acc:	beq	15f98 <__assert_fail@plt+0x4db4>
   15ad0:	cmp	r6, #13
   15ad4:	moveq	r3, #114	; 0x72
   15ad8:	bne	15a74 <__assert_fail@plt+0x4890>
   15adc:	cmp	sl, #2
   15ae0:	movne	r2, #0
   15ae4:	andeq	r2, r7, #1
   15ae8:	cmp	r2, #0
   15aec:	beq	15f70 <__assert_fail@plt+0x4d8c>
   15af0:	mov	sl, #2
   15af4:	b	159c8 <__assert_fail@plt+0x47e4>
   15af8:	cmp	r6, #37	; 0x25
   15afc:	beq	15d60 <__assert_fail@plt+0x4b7c>
   15b00:	bhi	15b14 <__assert_fail@plt+0x4930>
   15b04:	cmp	r6, #35	; 0x23
   15b08:	beq	15da8 <__assert_fail@plt+0x4bc4>
   15b0c:	mov	r5, #0
   15b10:	b	15db8 <__assert_fail@plt+0x4bd4>
   15b14:	cmp	r6, #39	; 0x27
   15b18:	bne	15b0c <__assert_fail@plt+0x4928>
   15b1c:	cmp	sl, #2
   15b20:	ldrne	r5, [sp, #36]	; 0x24
   15b24:	movne	r3, r5
   15b28:	strne	r3, [sp, #68]	; 0x44
   15b2c:	bne	15eac <__assert_fail@plt+0x4cc8>
   15b30:	cmp	r7, #0
   15b34:	bne	159c8 <__assert_fail@plt+0x47e4>
   15b38:	ldr	r3, [sp, #60]	; 0x3c
   15b3c:	cmp	r9, #0
   15b40:	clz	r3, r3
   15b44:	lsr	r3, r3, #5
   15b48:	moveq	r3, #0
   15b4c:	cmp	r3, #0
   15b50:	strne	r9, [sp, #60]	; 0x3c
   15b54:	movne	r9, #0
   15b58:	bne	15b68 <__assert_fail@plt+0x4984>
   15b5c:	cmp	r9, r4
   15b60:	movhi	r3, #39	; 0x27
   15b64:	strbhi	r3, [r8, r4]
   15b68:	add	r3, r4, #1
   15b6c:	ldr	r5, [sp, #36]	; 0x24
   15b70:	mov	fp, #0
   15b74:	cmp	r3, r9
   15b78:	movcc	r2, #92	; 0x5c
   15b7c:	str	fp, [sp, #52]	; 0x34
   15b80:	strbcc	r2, [r8, r3]
   15b84:	add	r3, r4, #2
   15b88:	add	r4, r4, #3
   15b8c:	cmp	r3, r9
   15b90:	str	r5, [sp, #68]	; 0x44
   15b94:	movcc	r2, #39	; 0x27
   15b98:	strbcc	r2, [r8, r3]
   15b9c:	b	15c90 <__assert_fail@plt+0x4aac>
   15ba0:	cmp	r6, #94	; 0x5e
   15ba4:	beq	15b0c <__assert_fail@plt+0x4928>
   15ba8:	bhi	15d68 <__assert_fail@plt+0x4b84>
   15bac:	cmp	r6, #90	; 0x5a
   15bb0:	bhi	15d54 <__assert_fail@plt+0x4b70>
   15bb4:	cmp	r6, #65	; 0x41
   15bb8:	bcs	15d60 <__assert_fail@plt+0x4b7c>
   15bbc:	cmp	r6, #62	; 0x3e
   15bc0:	bls	15b0c <__assert_fail@plt+0x4928>
   15bc4:	cmp	r6, #63	; 0x3f
   15bc8:	bne	15a74 <__assert_fail@plt+0x4890>
   15bcc:	cmp	sl, #2
   15bd0:	beq	15eb4 <__assert_fail@plt+0x4cd0>
   15bd4:	cmp	sl, #5
   15bd8:	movne	fp, #0
   15bdc:	bne	16284 <__assert_fail@plt+0x50a0>
   15be0:	ldr	r3, [sp, #148]	; 0x94
   15be4:	tst	r3, #4
   15be8:	beq	15ebc <__assert_fail@plt+0x4cd8>
   15bec:	ldr	r3, [sp, #28]
   15bf0:	add	r2, r3, #2
   15bf4:	ldr	r3, [sp, #40]	; 0x28
   15bf8:	cmp	r2, r3
   15bfc:	bcs	15ebc <__assert_fail@plt+0x4cd8>
   15c00:	ldr	r1, [sp, #28]
   15c04:	ldr	r3, [sp, #48]	; 0x30
   15c08:	add	r3, r3, r1
   15c0c:	ldrb	r1, [r3, #1]
   15c10:	cmp	r1, #63	; 0x3f
   15c14:	bne	15ebc <__assert_fail@plt+0x4cd8>
   15c18:	ldr	r3, [sp, #48]	; 0x30
   15c1c:	ldrb	r6, [r3, r2]
   15c20:	sub	r3, r6, #33	; 0x21
   15c24:	uxtb	r3, r3
   15c28:	cmp	r3, #29
   15c2c:	bhi	1628c <__assert_fail@plt+0x50a8>
   15c30:	ldr	r0, [pc, #1804]	; 16344 <__assert_fail@plt+0x5160>
   15c34:	mov	r5, #1
   15c38:	ands	r5, r0, r5, lsl r3
   15c3c:	beq	16294 <__assert_fail@plt+0x50b0>
   15c40:	cmp	r7, #0
   15c44:	bne	159c8 <__assert_fail@plt+0x47e4>
   15c48:	cmp	r9, r4
   15c4c:	add	r3, r4, #1
   15c50:	str	r2, [sp, #28]
   15c54:	mov	r5, #0
   15c58:	strbhi	r1, [r8, r4]
   15c5c:	cmp	r9, r3
   15c60:	mov	fp, r5
   15c64:	movhi	r1, #34	; 0x22
   15c68:	strbhi	r1, [r8, r3]
   15c6c:	add	r3, r4, #2
   15c70:	cmp	r9, r3
   15c74:	movhi	r1, #34	; 0x22
   15c78:	strbhi	r1, [r8, r3]
   15c7c:	add	r3, r4, #3
   15c80:	add	r4, r4, #4
   15c84:	cmp	r9, r3
   15c88:	movhi	r1, #63	; 0x3f
   15c8c:	strbhi	r1, [r8, r3]
   15c90:	ldr	r3, [sp, #24]
   15c94:	eor	r3, r3, #1
   15c98:	cmp	sl, #2
   15c9c:	orreq	r3, r3, #1
   15ca0:	eor	r3, r3, #1
   15ca4:	orr	r3, r7, r3
   15ca8:	tst	r3, #255	; 0xff
   15cac:	beq	15cd8 <__assert_fail@plt+0x4af4>
   15cb0:	ldr	r3, [sp, #152]	; 0x98
   15cb4:	cmp	r3, #0
   15cb8:	beq	15cd8 <__assert_fail@plt+0x4af4>
   15cbc:	ldr	r1, [sp, #152]	; 0x98
   15cc0:	ubfx	r2, r6, #5, #8
   15cc4:	and	r3, r6, #31
   15cc8:	ldr	r2, [r1, r2, lsl #2]
   15ccc:	lsr	r3, r2, r3
   15cd0:	tst	r3, #1
   15cd4:	bne	15ce4 <__assert_fail@plt+0x4b00>
   15cd8:	ldr	r3, [sp, #64]	; 0x40
   15cdc:	cmp	r3, #0
   15ce0:	beq	15edc <__assert_fail@plt+0x4cf8>
   15ce4:	sub	r3, sl, #2
   15ce8:	cmp	r7, #0
   15cec:	clz	r3, r3
   15cf0:	lsr	r3, r3, #5
   15cf4:	bne	159c8 <__assert_fail@plt+0x47e4>
   15cf8:	ldr	r2, [sp, #52]	; 0x34
   15cfc:	eor	r2, r2, #1
   15d00:	ands	r3, r3, r2
   15d04:	beq	15d3c <__assert_fail@plt+0x4b58>
   15d08:	cmp	r9, r4
   15d0c:	str	r3, [sp, #52]	; 0x34
   15d10:	movhi	r2, #39	; 0x27
   15d14:	strbhi	r2, [r8, r4]
   15d18:	add	r2, r4, #1
   15d1c:	cmp	r9, r2
   15d20:	movhi	r1, #36	; 0x24
   15d24:	strbhi	r1, [r8, r2]
   15d28:	add	r2, r4, #2
   15d2c:	add	r4, r4, #3
   15d30:	cmp	r9, r2
   15d34:	movhi	r1, #39	; 0x27
   15d38:	strbhi	r1, [r8, r2]
   15d3c:	cmp	r9, r4
   15d40:	ldr	fp, [sp, #36]	; 0x24
   15d44:	movhi	r3, #92	; 0x5c
   15d48:	strbhi	r3, [r8, r4]
   15d4c:	add	r4, r4, #1
   15d50:	b	15edc <__assert_fail@plt+0x4cf8>
   15d54:	cmp	r6, #92	; 0x5c
   15d58:	beq	15ec4 <__assert_fail@plt+0x4ce0>
   15d5c:	bls	15b0c <__assert_fail@plt+0x4928>
   15d60:	ldr	r5, [sp, #36]	; 0x24
   15d64:	b	15eac <__assert_fail@plt+0x4cc8>
   15d68:	cmp	r6, #122	; 0x7a
   15d6c:	bhi	15d8c <__assert_fail@plt+0x4ba8>
   15d70:	cmp	r6, #97	; 0x61
   15d74:	bcs	15d60 <__assert_fail@plt+0x4b7c>
   15d78:	cmp	r6, #95	; 0x5f
   15d7c:	beq	15d60 <__assert_fail@plt+0x4b7c>
   15d80:	cmp	r6, #96	; 0x60
   15d84:	bne	15a74 <__assert_fail@plt+0x4890>
   15d88:	b	15b0c <__assert_fail@plt+0x4928>
   15d8c:	cmp	r6, #124	; 0x7c
   15d90:	beq	15b0c <__assert_fail@plt+0x4928>
   15d94:	bcc	15fa0 <__assert_fail@plt+0x4dbc>
   15d98:	cmp	r6, #125	; 0x7d
   15d9c:	beq	15fa0 <__assert_fail@plt+0x4dbc>
   15da0:	cmp	r6, #126	; 0x7e
   15da4:	bne	15a74 <__assert_fail@plt+0x4890>
   15da8:	ldr	r3, [sp, #28]
   15dac:	cmp	r3, #0
   15db0:	bne	15ebc <__assert_fail@plt+0x4cd8>
   15db4:	ldr	r5, [sp, #36]	; 0x24
   15db8:	cmp	sl, #2
   15dbc:	movne	fp, #0
   15dc0:	andeq	fp, r7, #1
   15dc4:	cmp	fp, #0
   15dc8:	beq	15c90 <__assert_fail@plt+0x4aac>
   15dcc:	b	15af0 <__assert_fail@plt+0x490c>
   15dd0:	ldr	r3, [sp, #24]
   15dd4:	cmp	r3, #0
   15dd8:	beq	15ea0 <__assert_fail@plt+0x4cbc>
   15ddc:	sub	r2, sl, #2
   15de0:	cmp	r7, #0
   15de4:	clz	r2, r2
   15de8:	lsr	r2, r2, #5
   15dec:	bne	159c4 <__assert_fail@plt+0x47e0>
   15df0:	ldr	r3, [sp, #52]	; 0x34
   15df4:	eor	r3, r3, #1
   15df8:	ands	r2, r2, r3
   15dfc:	moveq	r3, r4
   15e00:	beq	15e38 <__assert_fail@plt+0x4c54>
   15e04:	cmp	r9, r4
   15e08:	str	r2, [sp, #52]	; 0x34
   15e0c:	movhi	r3, #39	; 0x27
   15e10:	strbhi	r3, [r8, r4]
   15e14:	add	r3, r4, #1
   15e18:	cmp	r9, r3
   15e1c:	movhi	r1, #36	; 0x24
   15e20:	strbhi	r1, [r8, r3]
   15e24:	add	r3, r4, #2
   15e28:	cmp	r9, r3
   15e2c:	movhi	r1, #39	; 0x27
   15e30:	strbhi	r1, [r8, r3]
   15e34:	add	r3, r4, #3
   15e38:	cmp	r9, r3
   15e3c:	add	r4, r3, #1
   15e40:	movhi	r2, #92	; 0x5c
   15e44:	strbhi	r2, [r8, r3]
   15e48:	cmp	fp, #0
   15e4c:	beq	16274 <__assert_fail@plt+0x5090>
   15e50:	ldr	r2, [sp, #28]
   15e54:	ldr	r1, [sp, #40]	; 0x28
   15e58:	add	r2, r2, #1
   15e5c:	cmp	r2, r1
   15e60:	bcs	15e98 <__assert_fail@plt+0x4cb4>
   15e64:	ldr	r1, [sp, #48]	; 0x30
   15e68:	mov	r6, #48	; 0x30
   15e6c:	ldrb	r2, [r1, r2]
   15e70:	sub	r2, r2, #48	; 0x30
   15e74:	cmp	r2, #9
   15e78:	bhi	16284 <__assert_fail@plt+0x50a0>
   15e7c:	cmp	r9, r4
   15e80:	add	r2, r3, #2
   15e84:	strbhi	r6, [r8, r4]
   15e88:	cmp	r9, r2
   15e8c:	add	r4, r3, #3
   15e90:	movhi	r1, #48	; 0x30
   15e94:	strbhi	r1, [r8, r2]
   15e98:	mov	r5, #0
   15e9c:	b	1627c <__assert_fail@plt+0x5098>
   15ea0:	ldr	r3, [sp, #148]	; 0x94
   15ea4:	ands	r5, r3, #1
   15ea8:	bne	15f30 <__assert_fail@plt+0x4d4c>
   15eac:	mov	fp, #0
   15eb0:	b	15c90 <__assert_fail@plt+0x4aac>
   15eb4:	cmp	r7, #0
   15eb8:	bne	159c8 <__assert_fail@plt+0x47e4>
   15ebc:	mov	r5, #0
   15ec0:	b	15eac <__assert_fail@plt+0x4cc8>
   15ec4:	cmp	sl, #2
   15ec8:	bne	15f3c <__assert_fail@plt+0x4d58>
   15ecc:	cmp	r7, #0
   15ed0:	bne	159c8 <__assert_fail@plt+0x47e4>
   15ed4:	mov	r5, r7
   15ed8:	mov	fp, r7
   15edc:	ldr	r3, [sp, #52]	; 0x34
   15ee0:	eor	fp, fp, #1
   15ee4:	tst	r3, fp
   15ee8:	beq	15f14 <__assert_fail@plt+0x4d30>
   15eec:	cmp	r9, r4
   15ef0:	movhi	r3, #39	; 0x27
   15ef4:	strbhi	r3, [r8, r4]
   15ef8:	add	r3, r4, #1
   15efc:	add	r4, r4, #2
   15f00:	cmp	r9, r3
   15f04:	movhi	r2, #39	; 0x27
   15f08:	strbhi	r2, [r8, r3]
   15f0c:	mov	r3, #0
   15f10:	str	r3, [sp, #52]	; 0x34
   15f14:	cmp	r9, r4
   15f18:	ldr	r3, [sp, #72]	; 0x48
   15f1c:	strbhi	r6, [r8, r4]
   15f20:	cmp	r5, #0
   15f24:	add	r4, r4, #1
   15f28:	moveq	r3, #0
   15f2c:	str	r3, [sp, #72]	; 0x48
   15f30:	ldr	r3, [sp, #28]
   15f34:	add	r3, r3, #1
   15f38:	b	156f0 <__assert_fail@plt+0x450c>
   15f3c:	ldr	r3, [sp, #24]
   15f40:	and	r3, r3, r7
   15f44:	tst	r5, r3
   15f48:	moveq	r3, r6
   15f4c:	beq	15adc <__assert_fail@plt+0x48f8>
   15f50:	mov	fp, #0
   15f54:	mov	r5, fp
   15f58:	b	15edc <__assert_fail@plt+0x4cf8>
   15f5c:	mov	r3, #116	; 0x74
   15f60:	b	15adc <__assert_fail@plt+0x48f8>
   15f64:	mov	r3, #110	; 0x6e
   15f68:	b	15adc <__assert_fail@plt+0x48f8>
   15f6c:	mov	r3, #97	; 0x61
   15f70:	ldr	r2, [sp, #24]
   15f74:	cmp	r2, #0
   15f78:	beq	15ebc <__assert_fail@plt+0x4cd8>
   15f7c:	mov	r6, r3
   15f80:	mov	r5, #0
   15f84:	b	15ce4 <__assert_fail@plt+0x4b00>
   15f88:	mov	r3, #98	; 0x62
   15f8c:	b	15f70 <__assert_fail@plt+0x4d8c>
   15f90:	mov	r3, #118	; 0x76
   15f94:	b	15f70 <__assert_fail@plt+0x4d8c>
   15f98:	mov	r3, #102	; 0x66
   15f9c:	b	15f70 <__assert_fail@plt+0x4d8c>
   15fa0:	ldr	r3, [sp, #40]	; 0x28
   15fa4:	cmn	r3, #1
   15fa8:	bne	15fc8 <__assert_fail@plt+0x4de4>
   15fac:	ldr	r3, [sp, #48]	; 0x30
   15fb0:	ldrb	r3, [r3, #1]
   15fb4:	adds	r3, r3, #0
   15fb8:	movne	r3, #1
   15fbc:	cmp	r3, #0
   15fc0:	bne	15ebc <__assert_fail@plt+0x4cd8>
   15fc4:	b	15da8 <__assert_fail@plt+0x4bc4>
   15fc8:	ldr	r3, [sp, #40]	; 0x28
   15fcc:	subs	r3, r3, #1
   15fd0:	b	15fb8 <__assert_fail@plt+0x4dd4>
   15fd4:	mov	r3, #0
   15fd8:	mov	r2, #0
   15fdc:	strd	r2, [sp, #96]	; 0x60
   15fe0:	ldr	r3, [sp, #40]	; 0x28
   15fe4:	cmn	r3, #1
   15fe8:	bne	15ff8 <__assert_fail@plt+0x4e14>
   15fec:	ldr	r0, [sp, #48]	; 0x30
   15ff0:	bl	11070 <strlen@plt>
   15ff4:	str	r0, [sp, #40]	; 0x28
   15ff8:	ldr	r5, [sp, #36]	; 0x24
   15ffc:	mov	r3, #0
   16000:	str	r3, [sp, #56]	; 0x38
   16004:	ldr	r3, [sp, #28]
   16008:	add	r0, sp, #92	; 0x5c
   1600c:	ldr	r1, [sp, #40]	; 0x28
   16010:	ldr	r2, [sp, #56]	; 0x38
   16014:	add	r2, r3, r2
   16018:	ldr	r3, [sp, #48]	; 0x30
   1601c:	add	fp, r3, r2
   16020:	sub	r2, r1, r2
   16024:	add	r3, sp, #96	; 0x60
   16028:	mov	r1, fp
   1602c:	bl	17978 <__assert_fail@plt+0x6794>
   16030:	subs	r2, r0, #0
   16034:	beq	16074 <__assert_fail@plt+0x4e90>
   16038:	cmn	r2, #1
   1603c:	beq	16248 <__assert_fail@plt+0x5064>
   16040:	cmn	r2, #2
   16044:	bne	161b8 <__assert_fail@plt+0x4fd4>
   16048:	ldr	r3, [sp, #28]
   1604c:	ldr	r2, [sp, #56]	; 0x38
   16050:	add	r3, r3, r2
   16054:	ldr	r2, [sp, #40]	; 0x28
   16058:	cmp	r2, r3
   1605c:	bls	16248 <__assert_fail@plt+0x5064>
   16060:	ldr	r2, [sp, #56]	; 0x38
   16064:	ldr	r3, [sp, #80]	; 0x50
   16068:	ldrb	r5, [r3, r2]
   1606c:	cmp	r5, #0
   16070:	bne	161a8 <__assert_fail@plt+0x4fc4>
   16074:	ldr	r3, [sp, #56]	; 0x38
   16078:	cmp	r3, #1
   1607c:	bls	15aa0 <__assert_fail@plt+0x48bc>
   16080:	ldr	r3, [sp, #28]
   16084:	mov	fp, #0
   16088:	mov	ip, #92	; 0x5c
   1608c:	ldr	r2, [sp, #56]	; 0x38
   16090:	add	r3, r3, r2
   16094:	ldr	r2, [sp, #24]
   16098:	str	r3, [sp, #36]	; 0x24
   1609c:	eor	r3, r5, #1
   160a0:	and	r3, r3, r2
   160a4:	mov	r2, #39	; 0x27
   160a8:	uxtb	r3, r3
   160ac:	cmp	r3, #0
   160b0:	beq	16250 <__assert_fail@plt+0x506c>
   160b4:	sub	r0, sl, #2
   160b8:	cmp	r7, #0
   160bc:	clz	r0, r0
   160c0:	lsr	r0, r0, #5
   160c4:	bne	159c4 <__assert_fail@plt+0x47e0>
   160c8:	ldr	r1, [sp, #52]	; 0x34
   160cc:	eor	r1, r1, #1
   160d0:	ands	r1, r0, r1
   160d4:	beq	16104 <__assert_fail@plt+0x4f20>
   160d8:	cmp	r9, r4
   160dc:	add	r0, r4, #1
   160e0:	str	r1, [sp, #52]	; 0x34
   160e4:	strbhi	r2, [r8, r4]
   160e8:	cmp	r9, r0
   160ec:	movhi	lr, #36	; 0x24
   160f0:	strbhi	lr, [r8, r0]
   160f4:	add	r0, r4, #2
   160f8:	add	r4, r4, #3
   160fc:	cmp	r9, r0
   16100:	strbhi	r2, [r8, r0]
   16104:	cmp	r9, r4
   16108:	add	r0, r4, #1
   1610c:	mov	fp, r3
   16110:	strbhi	ip, [r8, r4]
   16114:	cmp	r9, r0
   16118:	lsrhi	r1, r6, #6
   1611c:	addhi	r1, r1, #48	; 0x30
   16120:	strbhi	r1, [r8, r0]
   16124:	add	r0, r4, #2
   16128:	add	r4, r4, #3
   1612c:	cmp	r9, r0
   16130:	ubfxhi	r1, r6, #3, #3
   16134:	and	r6, r6, #7
   16138:	add	r6, r6, #48	; 0x30
   1613c:	addhi	r1, r1, #48	; 0x30
   16140:	strbhi	r1, [r8, r0]
   16144:	eor	r0, fp, #1
   16148:	ldr	r1, [sp, #28]
   1614c:	ldr	lr, [sp, #52]	; 0x34
   16150:	add	r1, r1, #1
   16154:	and	r0, r0, lr
   16158:	ldr	lr, [sp, #36]	; 0x24
   1615c:	cmp	r1, lr
   16160:	bcs	15edc <__assert_fail@plt+0x4cf8>
   16164:	cmp	r0, #0
   16168:	beq	1618c <__assert_fail@plt+0x4fa8>
   1616c:	cmp	r9, r4
   16170:	add	r0, r4, #1
   16174:	strbhi	r2, [r8, r4]
   16178:	cmp	r9, r0
   1617c:	add	r4, r4, #2
   16180:	strbhi	r2, [r8, r0]
   16184:	mov	r0, #0
   16188:	str	r0, [sp, #52]	; 0x34
   1618c:	ldr	r0, [sp, #48]	; 0x30
   16190:	cmp	r9, r4
   16194:	str	r1, [sp, #28]
   16198:	strbhi	r6, [r8, r4]
   1619c:	add	r4, r4, #1
   161a0:	ldrb	r6, [r0, r1]
   161a4:	b	160ac <__assert_fail@plt+0x4ec8>
   161a8:	ldr	r3, [sp, #56]	; 0x38
   161ac:	add	r3, r3, #1
   161b0:	str	r3, [sp, #56]	; 0x38
   161b4:	b	16048 <__assert_fail@plt+0x4e64>
   161b8:	cmp	sl, #2
   161bc:	movne	r3, #0
   161c0:	andeq	r3, r7, #1
   161c4:	cmp	r3, #0
   161c8:	movne	r1, #1
   161cc:	bne	16228 <__assert_fail@plt+0x5044>
   161d0:	ldr	r0, [sp, #92]	; 0x5c
   161d4:	str	r2, [sp, #84]	; 0x54
   161d8:	bl	10fb0 <iswprint@plt>
   161dc:	ldr	r3, [sp, #56]	; 0x38
   161e0:	cmp	r0, #0
   161e4:	add	r0, sp, #96	; 0x60
   161e8:	moveq	r5, #0
   161ec:	ldr	r2, [sp, #84]	; 0x54
   161f0:	add	r3, r3, r2
   161f4:	str	r3, [sp, #56]	; 0x38
   161f8:	bl	10f5c <mbsinit@plt>
   161fc:	cmp	r0, #0
   16200:	beq	16004 <__assert_fail@plt+0x4e20>
   16204:	b	16074 <__assert_fail@plt+0x4e90>
   16208:	ldrb	r3, [fp, #1]!
   1620c:	cmp	r3, #94	; 0x5e
   16210:	beq	15af0 <__assert_fail@plt+0x490c>
   16214:	bhi	16234 <__assert_fail@plt+0x5050>
   16218:	sub	r3, r3, #91	; 0x5b
   1621c:	cmp	r3, #1
   16220:	bls	15af0 <__assert_fail@plt+0x490c>
   16224:	add	r1, r1, #1
   16228:	cmp	r1, r2
   1622c:	bne	16208 <__assert_fail@plt+0x5024>
   16230:	b	161d0 <__assert_fail@plt+0x4fec>
   16234:	cmp	r3, #96	; 0x60
   16238:	beq	15af0 <__assert_fail@plt+0x490c>
   1623c:	cmp	r3, #124	; 0x7c
   16240:	bne	16224 <__assert_fail@plt+0x5040>
   16244:	b	15af0 <__assert_fail@plt+0x490c>
   16248:	mov	r5, #0
   1624c:	b	16074 <__assert_fail@plt+0x4e90>
   16250:	ldr	r1, [sp, #64]	; 0x40
   16254:	cmp	r1, #0
   16258:	beq	16144 <__assert_fail@plt+0x4f60>
   1625c:	cmp	r9, r4
   16260:	mov	r1, #0
   16264:	strbhi	ip, [r8, r4]
   16268:	add	r4, r4, #1
   1626c:	str	r1, [sp, #64]	; 0x40
   16270:	b	16144 <__assert_fail@plt+0x4f60>
   16274:	mov	r5, fp
   16278:	ldr	fp, [sp, #24]
   1627c:	mov	r6, #48	; 0x30
   16280:	b	15c90 <__assert_fail@plt+0x4aac>
   16284:	mov	r5, #0
   16288:	b	15c90 <__assert_fail@plt+0x4aac>
   1628c:	mov	r6, r1
   16290:	b	15ebc <__assert_fail@plt+0x4cd8>
   16294:	mov	r6, r1
   16298:	b	15eac <__assert_fail@plt+0x4cc8>
   1629c:	ldr	r2, [sp, #28]
   162a0:	ldr	r3, [sp, #40]	; 0x28
   162a4:	subs	r3, r3, r2
   162a8:	movne	r3, #1
   162ac:	b	15714 <__assert_fail@plt+0x4530>
   162b0:	ldr	r3, [sp, #60]	; 0x3c
   162b4:	mov	sl, #2
   162b8:	ldr	r7, [sp, #72]	; 0x48
   162bc:	adds	r6, r3, #0
   162c0:	mov	r5, r3
   162c4:	movne	r6, #1
   162c8:	cmp	r9, #0
   162cc:	movne	r6, #0
   162d0:	cmp	r6, #0
   162d4:	bne	156a4 <__assert_fail@plt+0x44c0>
   162d8:	ldr	r3, [sp, #68]	; 0x44
   162dc:	ldr	r2, [sp, #44]	; 0x2c
   162e0:	cmp	r2, #0
   162e4:	moveq	r3, #0
   162e8:	andne	r3, r3, #1
   162ec:	cmp	r3, #0
   162f0:	movne	r3, r2
   162f4:	subne	r3, r3, #1
   162f8:	bne	16328 <__assert_fail@plt+0x5144>
   162fc:	cmp	r9, r4
   16300:	movhi	r3, #0
   16304:	strbhi	r3, [r8, r4]
   16308:	mov	r0, r4
   1630c:	add	sp, sp, #108	; 0x6c
   16310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16314:	mov	r3, r7
   16318:	b	162dc <__assert_fail@plt+0x50f8>
   1631c:	cmp	r9, r4
   16320:	strbhi	r2, [r8, r4]
   16324:	add	r4, r4, #1
   16328:	ldrb	r2, [r3, #1]!
   1632c:	cmp	r2, #0
   16330:	bne	1631c <__assert_fail@plt+0x5138>
   16334:	b	162fc <__assert_fail@plt+0x5118>
   16338:			; <UNDEFINED> instruction: 0x000188b0
   1633c:	andeq	r8, r1, r3, asr #17
   16340:	andeq	r8, r1, r1, asr #17
   16344:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1634c:	sub	sp, sp, #52	; 0x34
   16350:	mov	r6, r0
   16354:	mov	r5, r3
   16358:	mov	r8, r1
   1635c:	mov	r9, r2
   16360:	bl	11094 <__errno_location@plt>
   16364:	ldr	r3, [r0]
   16368:	cmn	r6, #-2147483647	; 0x80000001
   1636c:	str	r0, [sp, #24]
   16370:	ldr	r7, [pc, #368]	; 164e8 <__assert_fail@plt+0x5304>
   16374:	str	r3, [sp, #32]
   16378:	movne	r3, #0
   1637c:	moveq	r3, #1
   16380:	orrs	r3, r3, r6, lsr #31
   16384:	ldr	r4, [r7]
   16388:	beq	16390 <__assert_fail@plt+0x51ac>
   1638c:	bl	111b4 <abort@plt>
   16390:	ldr	r2, [r7, #4]
   16394:	cmp	r2, r6
   16398:	bgt	16408 <__assert_fail@plt+0x5224>
   1639c:	add	sl, r7, #8
   163a0:	mov	r3, #8
   163a4:	cmp	r4, sl
   163a8:	add	r1, sp, #44	; 0x2c
   163ac:	str	r2, [sp, #44]	; 0x2c
   163b0:	sub	r2, r6, r2
   163b4:	movne	r0, r4
   163b8:	moveq	r0, #0
   163bc:	add	r2, r2, #1
   163c0:	str	r3, [sp]
   163c4:	mvn	r3, #-2147483648	; 0x80000000
   163c8:	bl	17118 <__assert_fail@plt+0x5f34>
   163cc:	cmp	r4, sl
   163d0:	mov	fp, r0
   163d4:	str	r0, [r7]
   163d8:	ldmeq	r4, {r0, r1}
   163dc:	mov	r4, fp
   163e0:	ldr	r2, [sp, #44]	; 0x2c
   163e4:	stmeq	fp, {r0, r1}
   163e8:	mov	r1, #0
   163ec:	ldr	r0, [r7, #4]
   163f0:	sub	r2, r2, r0
   163f4:	add	r0, fp, r0, lsl #3
   163f8:	lsl	r2, r2, #3
   163fc:	bl	110b8 <memset@plt>
   16400:	ldr	r3, [sp, #44]	; 0x2c
   16404:	str	r3, [r7, #4]
   16408:	ldr	r3, [r5, #4]
   1640c:	add	sl, r4, r6, lsl #3
   16410:	mov	r2, r8
   16414:	ldr	fp, [r4, r6, lsl #3]
   16418:	ldr	r7, [sl, #4]
   1641c:	orr	r3, r3, #1
   16420:	str	r3, [sp, #28]
   16424:	add	r3, r5, #8
   16428:	mov	r1, fp
   1642c:	str	r3, [sp, #36]	; 0x24
   16430:	mov	r0, r7
   16434:	ldr	r3, [r5, #44]	; 0x2c
   16438:	str	r3, [sp, #16]
   1643c:	ldr	r3, [r5, #40]	; 0x28
   16440:	str	r3, [sp, #12]
   16444:	add	r3, r5, #8
   16448:	str	r3, [sp, #8]
   1644c:	ldr	r3, [sp, #28]
   16450:	str	r3, [sp, #4]
   16454:	ldr	r3, [r5]
   16458:	str	r3, [sp]
   1645c:	mov	r3, r9
   16460:	bl	15658 <__assert_fail@plt+0x4474>
   16464:	cmp	fp, r0
   16468:	bhi	164d0 <__assert_fail@plt+0x52ec>
   1646c:	ldr	r3, [pc, #120]	; 164ec <__assert_fail@plt+0x5308>
   16470:	add	fp, r0, #1
   16474:	str	fp, [r4, r6, lsl #3]
   16478:	cmp	r7, r3
   1647c:	beq	16488 <__assert_fail@plt+0x52a4>
   16480:	mov	r0, r7
   16484:	bl	17834 <__assert_fail@plt+0x6650>
   16488:	mov	r0, fp
   1648c:	bl	17008 <__assert_fail@plt+0x5e24>
   16490:	ldr	r3, [r5, #44]	; 0x2c
   16494:	mov	r2, r8
   16498:	mov	r1, fp
   1649c:	str	r0, [sl, #4]
   164a0:	mov	r7, r0
   164a4:	str	r3, [sp, #16]
   164a8:	ldr	r3, [r5, #40]	; 0x28
   164ac:	str	r3, [sp, #12]
   164b0:	add	r3, r5, #8
   164b4:	str	r3, [sp, #8]
   164b8:	ldr	r3, [sp, #28]
   164bc:	str	r3, [sp, #4]
   164c0:	ldr	r3, [r5]
   164c4:	str	r3, [sp]
   164c8:	mov	r3, r9
   164cc:	bl	15658 <__assert_fail@plt+0x4474>
   164d0:	ldr	r3, [sp, #24]
   164d4:	mov	r0, r7
   164d8:	ldr	r2, [sp, #32]
   164dc:	str	r2, [r3]
   164e0:	add	sp, sp, #52	; 0x34
   164e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e8:	andeq	r9, r2, r8, lsr #2
   164ec:			; <UNDEFINED> instruction: 0x000291b8
   164f0:	push	{r4, r5, r6, lr}
   164f4:	mov	r5, r0
   164f8:	bl	11094 <__errno_location@plt>
   164fc:	mov	r4, r0
   16500:	cmp	r5, #0
   16504:	ldr	r0, [pc, #20]	; 16520 <__assert_fail@plt+0x533c>
   16508:	mov	r1, #48	; 0x30
   1650c:	movne	r0, r5
   16510:	ldr	r6, [r4]
   16514:	bl	17208 <__assert_fail@plt+0x6024>
   16518:	str	r6, [r4]
   1651c:	pop	{r4, r5, r6, pc}
   16520:			; <UNDEFINED> instruction: 0x000292b8
   16524:	ldr	r3, [pc, #12]	; 16538 <__assert_fail@plt+0x5354>
   16528:	cmp	r0, #0
   1652c:	moveq	r0, r3
   16530:	ldr	r0, [r0]
   16534:	bx	lr
   16538:			; <UNDEFINED> instruction: 0x000292b8
   1653c:	ldr	r3, [pc, #12]	; 16550 <__assert_fail@plt+0x536c>
   16540:	cmp	r0, #0
   16544:	moveq	r0, r3
   16548:	str	r1, [r0]
   1654c:	bx	lr
   16550:			; <UNDEFINED> instruction: 0x000292b8
   16554:	ldr	r3, [pc, #52]	; 16590 <__assert_fail@plt+0x53ac>
   16558:	cmp	r0, #0
   1655c:	push	{lr}		; (str lr, [sp, #-4]!)
   16560:	lsr	lr, r1, #5
   16564:	and	r1, r1, #31
   16568:	moveq	r0, r3
   1656c:	add	r3, r0, #8
   16570:	ldr	ip, [r3, lr, lsl #2]
   16574:	lsr	r0, ip, r1
   16578:	eor	r2, r2, r0
   1657c:	and	r0, r0, #1
   16580:	and	r2, r2, #1
   16584:	eor	r1, ip, r2, lsl r1
   16588:	str	r1, [r3, lr, lsl #2]
   1658c:	pop	{pc}		; (ldr pc, [sp], #4)
   16590:			; <UNDEFINED> instruction: 0x000292b8
   16594:	ldr	r3, [pc, #16]	; 165ac <__assert_fail@plt+0x53c8>
   16598:	cmp	r0, #0
   1659c:	movne	r3, r0
   165a0:	ldr	r0, [r3, #4]
   165a4:	str	r1, [r3, #4]
   165a8:	bx	lr
   165ac:			; <UNDEFINED> instruction: 0x000292b8
   165b0:	ldr	r3, [pc, #44]	; 165e4 <__assert_fail@plt+0x5400>
   165b4:	cmp	r0, #0
   165b8:	moveq	r0, r3
   165bc:	mov	r3, #10
   165c0:	cmp	r2, #0
   165c4:	cmpne	r1, #0
   165c8:	str	r3, [r0]
   165cc:	bne	165d8 <__assert_fail@plt+0x53f4>
   165d0:	push	{r4, lr}
   165d4:	bl	111b4 <abort@plt>
   165d8:	str	r1, [r0, #40]	; 0x28
   165dc:	str	r2, [r0, #44]	; 0x2c
   165e0:	bx	lr
   165e4:			; <UNDEFINED> instruction: 0x000292b8
   165e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165ec:	sub	sp, sp, #24
   165f0:	mov	sl, r3
   165f4:	mov	r7, r0
   165f8:	mov	r8, r1
   165fc:	mov	r9, r2
   16600:	ldr	r4, [sp, #56]	; 0x38
   16604:	ldr	r3, [pc, #88]	; 16664 <__assert_fail@plt+0x5480>
   16608:	cmp	r4, #0
   1660c:	moveq	r4, r3
   16610:	bl	11094 <__errno_location@plt>
   16614:	ldr	r3, [r4, #44]	; 0x2c
   16618:	mov	r5, r0
   1661c:	mov	r2, r9
   16620:	mov	r1, r8
   16624:	mov	r0, r7
   16628:	ldr	r6, [r5]
   1662c:	str	r3, [sp, #16]
   16630:	ldr	r3, [r4, #40]	; 0x28
   16634:	str	r3, [sp, #12]
   16638:	add	r3, r4, #8
   1663c:	str	r3, [sp, #8]
   16640:	ldr	r3, [r4, #4]
   16644:	str	r3, [sp, #4]
   16648:	ldr	r3, [r4]
   1664c:	str	r3, [sp]
   16650:	mov	r3, sl
   16654:	bl	15658 <__assert_fail@plt+0x4474>
   16658:	str	r6, [r5]
   1665c:	add	sp, sp, #24
   16660:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16664:			; <UNDEFINED> instruction: 0x000292b8
   16668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1666c:	cmp	r3, #0
   16670:	sub	sp, sp, #44	; 0x2c
   16674:	mov	r6, r2
   16678:	mov	sl, r1
   1667c:	mov	r9, r0
   16680:	ldr	r4, [pc, #176]	; 16738 <__assert_fail@plt+0x5554>
   16684:	movne	r4, r3
   16688:	bl	11094 <__errno_location@plt>
   1668c:	ldr	r3, [r0]
   16690:	mov	r1, #0
   16694:	mov	r2, r9
   16698:	mov	r8, r0
   1669c:	mov	r0, r1
   166a0:	ldr	r5, [r4, #4]
   166a4:	add	fp, r4, #8
   166a8:	str	r3, [sp, #28]
   166ac:	ldr	r3, [r4, #44]	; 0x2c
   166b0:	cmp	r6, #0
   166b4:	orreq	r5, r5, #1
   166b8:	str	r3, [sp, #16]
   166bc:	ldr	r3, [r4, #40]	; 0x28
   166c0:	stmib	sp, {r5, fp}
   166c4:	str	r3, [sp, #12]
   166c8:	ldr	r3, [r4]
   166cc:	str	r3, [sp]
   166d0:	mov	r3, sl
   166d4:	bl	15658 <__assert_fail@plt+0x4474>
   166d8:	add	r1, r0, #1
   166dc:	mov	r7, r0
   166e0:	mov	r0, r1
   166e4:	str	r1, [sp, #36]	; 0x24
   166e8:	bl	17008 <__assert_fail@plt+0x5e24>
   166ec:	ldr	r3, [r4, #44]	; 0x2c
   166f0:	mov	r2, r9
   166f4:	ldr	r1, [sp, #36]	; 0x24
   166f8:	str	r3, [sp, #16]
   166fc:	ldr	r3, [r4, #40]	; 0x28
   16700:	stmib	sp, {r5, fp}
   16704:	str	r0, [sp, #32]
   16708:	str	r3, [sp, #12]
   1670c:	ldr	r3, [r4]
   16710:	str	r3, [sp]
   16714:	mov	r3, sl
   16718:	bl	15658 <__assert_fail@plt+0x4474>
   1671c:	ldr	r3, [sp, #28]
   16720:	cmp	r6, #0
   16724:	ldr	r0, [sp, #32]
   16728:	str	r3, [r8]
   1672c:	strne	r7, [r6]
   16730:	add	sp, sp, #44	; 0x2c
   16734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16738:			; <UNDEFINED> instruction: 0x000292b8
   1673c:	mov	r3, r2
   16740:	mov	r2, #0
   16744:	b	16668 <__assert_fail@plt+0x5484>
   16748:	push	{r4, r5, r6, r7, r8, lr}
   1674c:	mov	r6, #1
   16750:	ldr	r4, [pc, #100]	; 167bc <__assert_fail@plt+0x55d8>
   16754:	ldr	r5, [r4]
   16758:	add	r7, r5, #4
   1675c:	ldr	r3, [r4, #4]
   16760:	cmp	r3, r6
   16764:	bgt	167ac <__assert_fail@plt+0x55c8>
   16768:	ldr	r6, [pc, #80]	; 167c0 <__assert_fail@plt+0x55dc>
   1676c:	ldr	r0, [r5, #4]
   16770:	cmp	r0, r6
   16774:	beq	16788 <__assert_fail@plt+0x55a4>
   16778:	bl	17834 <__assert_fail@plt+0x6650>
   1677c:	mov	r3, #256	; 0x100
   16780:	str	r3, [r4, #8]
   16784:	str	r6, [r4, #12]
   16788:	ldr	r6, [pc, #52]	; 167c4 <__assert_fail@plt+0x55e0>
   1678c:	cmp	r5, r6
   16790:	beq	167a0 <__assert_fail@plt+0x55bc>
   16794:	mov	r0, r5
   16798:	bl	17834 <__assert_fail@plt+0x6650>
   1679c:	str	r6, [r4]
   167a0:	mov	r3, #1
   167a4:	str	r3, [r4, #4]
   167a8:	pop	{r4, r5, r6, r7, r8, pc}
   167ac:	ldr	r0, [r7, r6, lsl #3]
   167b0:	add	r6, r6, #1
   167b4:	bl	17834 <__assert_fail@plt+0x6650>
   167b8:	b	1675c <__assert_fail@plt+0x5578>
   167bc:	andeq	r9, r2, r8, lsr #2
   167c0:			; <UNDEFINED> instruction: 0x000291b8
   167c4:	andeq	r9, r2, r0, lsr r1
   167c8:	ldr	r3, [pc, #4]	; 167d4 <__assert_fail@plt+0x55f0>
   167cc:	mvn	r2, #0
   167d0:	b	16348 <__assert_fail@plt+0x5164>
   167d4:			; <UNDEFINED> instruction: 0x000292b8
   167d8:	ldr	r3, [pc]	; 167e0 <__assert_fail@plt+0x55fc>
   167dc:	b	16348 <__assert_fail@plt+0x5164>
   167e0:			; <UNDEFINED> instruction: 0x000292b8
   167e4:	mov	r1, r0
   167e8:	mov	r0, #0
   167ec:	b	167c8 <__assert_fail@plt+0x55e4>
   167f0:	mov	r2, r1
   167f4:	mov	r1, r0
   167f8:	mov	r0, #0
   167fc:	b	167d8 <__assert_fail@plt+0x55f4>
   16800:	push	{r4, r5, lr}
   16804:	sub	sp, sp, #52	; 0x34
   16808:	mov	r5, r2
   1680c:	mov	r4, r0
   16810:	mov	r0, sp
   16814:	bl	154fc <__assert_fail@plt+0x4318>
   16818:	mov	r3, sp
   1681c:	mvn	r2, #0
   16820:	mov	r1, r5
   16824:	mov	r0, r4
   16828:	bl	16348 <__assert_fail@plt+0x5164>
   1682c:	add	sp, sp, #52	; 0x34
   16830:	pop	{r4, r5, pc}
   16834:	push	{r4, r5, r6, lr}
   16838:	sub	sp, sp, #48	; 0x30
   1683c:	mov	r5, r2
   16840:	mov	r6, r3
   16844:	mov	r4, r0
   16848:	mov	r0, sp
   1684c:	bl	154fc <__assert_fail@plt+0x4318>
   16850:	mov	r3, sp
   16854:	mov	r2, r6
   16858:	mov	r1, r5
   1685c:	mov	r0, r4
   16860:	bl	16348 <__assert_fail@plt+0x5164>
   16864:	add	sp, sp, #48	; 0x30
   16868:	pop	{r4, r5, r6, pc}
   1686c:	mov	r2, r1
   16870:	mov	r1, r0
   16874:	mov	r0, #0
   16878:	b	16800 <__assert_fail@plt+0x561c>
   1687c:	mov	r3, r2
   16880:	mov	r2, r1
   16884:	mov	r1, r0
   16888:	mov	r0, #0
   1688c:	b	16834 <__assert_fail@plt+0x5650>
   16890:	push	{r4, r5, r6, lr}
   16894:	mov	r4, r0
   16898:	mov	r5, r1
   1689c:	mov	r6, r2
   168a0:	sub	sp, sp, #48	; 0x30
   168a4:	mov	ip, sp
   168a8:	ldr	lr, [pc, #64]	; 168f0 <__assert_fail@plt+0x570c>
   168ac:	ldm	lr!, {r0, r1, r2, r3}
   168b0:	stmia	ip!, {r0, r1, r2, r3}
   168b4:	ldm	lr!, {r0, r1, r2, r3}
   168b8:	stmia	ip!, {r0, r1, r2, r3}
   168bc:	ldm	lr, {r0, r1, r2, r3}
   168c0:	stm	ip, {r0, r1, r2, r3}
   168c4:	mov	r1, r6
   168c8:	mov	r2, #1
   168cc:	mov	r0, sp
   168d0:	bl	16554 <__assert_fail@plt+0x5370>
   168d4:	mov	r3, sp
   168d8:	mov	r2, r5
   168dc:	mov	r1, r4
   168e0:	mov	r0, #0
   168e4:	bl	16348 <__assert_fail@plt+0x5164>
   168e8:	add	sp, sp, #48	; 0x30
   168ec:	pop	{r4, r5, r6, pc}
   168f0:			; <UNDEFINED> instruction: 0x000292b8
   168f4:	mov	r2, r1
   168f8:	mvn	r1, #0
   168fc:	b	16890 <__assert_fail@plt+0x56ac>
   16900:	mov	r1, #58	; 0x3a
   16904:	b	168f4 <__assert_fail@plt+0x5710>
   16908:	mov	r2, #58	; 0x3a
   1690c:	b	16890 <__assert_fail@plt+0x56ac>
   16910:	push	{r4, r5, lr}
   16914:	sub	sp, sp, #100	; 0x64
   16918:	mov	r4, r0
   1691c:	mov	r0, sp
   16920:	mov	r5, r2
   16924:	bl	154fc <__assert_fail@plt+0x4318>
   16928:	mov	ip, sp
   1692c:	add	lr, sp, #48	; 0x30
   16930:	ldm	ip!, {r0, r1, r2, r3}
   16934:	stmia	lr!, {r0, r1, r2, r3}
   16938:	ldm	ip!, {r0, r1, r2, r3}
   1693c:	stmia	lr!, {r0, r1, r2, r3}
   16940:	ldm	ip, {r0, r1, r2, r3}
   16944:	stm	lr, {r0, r1, r2, r3}
   16948:	mov	r2, #1
   1694c:	mov	r1, #58	; 0x3a
   16950:	add	r0, sp, #48	; 0x30
   16954:	bl	16554 <__assert_fail@plt+0x5370>
   16958:	add	r3, sp, #48	; 0x30
   1695c:	mvn	r2, #0
   16960:	mov	r1, r5
   16964:	mov	r0, r4
   16968:	bl	16348 <__assert_fail@plt+0x5164>
   1696c:	add	sp, sp, #100	; 0x64
   16970:	pop	{r4, r5, pc}
   16974:	push	{r4, r5, r6, r7, lr}
   16978:	mov	r4, r0
   1697c:	mov	r6, r1
   16980:	mov	r7, r2
   16984:	mov	r5, r3
   16988:	sub	sp, sp, #52	; 0x34
   1698c:	ldr	lr, [pc, #68]	; 169d8 <__assert_fail@plt+0x57f4>
   16990:	mov	ip, sp
   16994:	ldm	lr!, {r0, r1, r2, r3}
   16998:	stmia	ip!, {r0, r1, r2, r3}
   1699c:	ldm	lr!, {r0, r1, r2, r3}
   169a0:	stmia	ip!, {r0, r1, r2, r3}
   169a4:	ldm	lr, {r0, r1, r2, r3}
   169a8:	stm	ip, {r0, r1, r2, r3}
   169ac:	mov	r2, r7
   169b0:	mov	r1, r6
   169b4:	mov	r0, sp
   169b8:	bl	165b0 <__assert_fail@plt+0x53cc>
   169bc:	ldr	r2, [sp, #72]	; 0x48
   169c0:	mov	r3, sp
   169c4:	mov	r1, r5
   169c8:	mov	r0, r4
   169cc:	bl	16348 <__assert_fail@plt+0x5164>
   169d0:	add	sp, sp, #52	; 0x34
   169d4:	pop	{r4, r5, r6, r7, pc}
   169d8:			; <UNDEFINED> instruction: 0x000292b8
   169dc:	mvn	ip, #0
   169e0:	push	{r0, r1, r2, lr}
   169e4:	str	ip, [sp]
   169e8:	bl	16974 <__assert_fail@plt+0x5790>
   169ec:	add	sp, sp, #12
   169f0:	pop	{pc}		; (ldr pc, [sp], #4)
   169f4:	mov	r3, r2
   169f8:	mov	r2, r1
   169fc:	mov	r1, r0
   16a00:	mov	r0, #0
   16a04:	b	169dc <__assert_fail@plt+0x57f8>
   16a08:	push	{r0, r1, r2, lr}
   16a0c:	str	r3, [sp]
   16a10:	mov	r3, r2
   16a14:	mov	r2, r1
   16a18:	mov	r1, r0
   16a1c:	mov	r0, #0
   16a20:	bl	16974 <__assert_fail@plt+0x5790>
   16a24:	add	sp, sp, #12
   16a28:	pop	{pc}		; (ldr pc, [sp], #4)
   16a2c:	ldr	r3, [pc]	; 16a34 <__assert_fail@plt+0x5850>
   16a30:	b	16348 <__assert_fail@plt+0x5164>
   16a34:	andeq	r9, r2, r8, lsr r1
   16a38:	mov	r2, r1
   16a3c:	mov	r1, r0
   16a40:	mov	r0, #0
   16a44:	b	16a2c <__assert_fail@plt+0x5848>
   16a48:	mvn	r2, #0
   16a4c:	b	16a2c <__assert_fail@plt+0x5848>
   16a50:	mov	r1, r0
   16a54:	mov	r0, #0
   16a58:	b	16a48 <__assert_fail@plt+0x5864>
   16a5c:	push	{r4, lr}
   16a60:	sub	sp, sp, #104	; 0x68
   16a64:	mov	r4, r0
   16a68:	mov	r1, sp
   16a6c:	ldr	r0, [pc, #36]	; 16a98 <__assert_fail@plt+0x58b4>
   16a70:	bl	17cf0 <__assert_fail@plt+0x6b0c>
   16a74:	cmp	r0, #0
   16a78:	ldrdeq	r2, [sp, #96]	; 0x60
   16a7c:	movne	r4, #0
   16a80:	mov	r0, r4
   16a84:	strdeq	r2, [r4]
   16a88:	ldrdeq	r2, [sp]
   16a8c:	strdeq	r2, [r4, #8]
   16a90:	add	sp, sp, #104	; 0x68
   16a94:	pop	{r4, pc}
   16a98:	strdeq	r8, [r1], -r0
   16a9c:	cmp	r0, #2
   16aa0:	push	{r4, r5, r6, r7, r8, lr}
   16aa4:	mov	r4, r0
   16aa8:	bhi	16ad0 <__assert_fail@plt+0x58ec>
   16aac:	bl	179f4 <__assert_fail@plt+0x6810>
   16ab0:	mov	r6, r0
   16ab4:	bl	11094 <__errno_location@plt>
   16ab8:	mov	r5, r0
   16abc:	mov	r0, r4
   16ac0:	ldr	r7, [r5]
   16ac4:	mov	r4, r6
   16ac8:	bl	111c0 <close@plt>
   16acc:	str	r7, [r5]
   16ad0:	mov	r0, r4
   16ad4:	pop	{r4, r5, r6, r7, r8, pc}
   16ad8:	push	{r4, r5, r6, lr}
   16adc:	cmp	r1, #0
   16ae0:	sub	sp, sp, #32
   16ae4:	mov	r5, r0
   16ae8:	ldr	r4, [sp, #48]	; 0x30
   16aec:	ldr	r6, [sp, #52]	; 0x34
   16af0:	beq	16ba4 <__assert_fail@plt+0x59c0>
   16af4:	strd	r2, [sp]
   16af8:	mov	r3, r1
   16afc:	mov	r1, #1
   16b00:	ldr	r2, [pc, #856]	; 16e60 <__assert_fail@plt+0x5c7c>
   16b04:	bl	110dc <__fprintf_chk@plt>
   16b08:	mov	r2, #5
   16b0c:	ldr	r1, [pc, #848]	; 16e64 <__assert_fail@plt+0x5c80>
   16b10:	mov	r0, #0
   16b14:	bl	10f80 <dcgettext@plt>
   16b18:	movw	r3, #2022	; 0x7e6
   16b1c:	ldr	r2, [pc, #836]	; 16e68 <__assert_fail@plt+0x5c84>
   16b20:	mov	r1, #1
   16b24:	str	r3, [sp]
   16b28:	mov	r3, r0
   16b2c:	mov	r0, r5
   16b30:	bl	110dc <__fprintf_chk@plt>
   16b34:	mov	r1, r5
   16b38:	mov	r0, #10
   16b3c:	bl	10f74 <fputc_unlocked@plt>
   16b40:	mov	r2, #5
   16b44:	ldr	r1, [pc, #800]	; 16e6c <__assert_fail@plt+0x5c88>
   16b48:	mov	r0, #0
   16b4c:	bl	10f80 <dcgettext@plt>
   16b50:	mov	r2, r0
   16b54:	mov	r1, #1
   16b58:	ldr	r3, [pc, #784]	; 16e70 <__assert_fail@plt+0x5c8c>
   16b5c:	mov	r0, r5
   16b60:	bl	110dc <__fprintf_chk@plt>
   16b64:	mov	r1, r5
   16b68:	mov	r0, #10
   16b6c:	bl	10f74 <fputc_unlocked@plt>
   16b70:	cmp	r6, #9
   16b74:	ldrls	pc, [pc, r6, lsl #2]
   16b78:	b	16e54 <__assert_fail@plt+0x5c70>
   16b7c:	muleq	r1, r4, ip
   16b80:			; <UNDEFINED> instruction: 0x00016bbc
   16b84:	andeq	r6, r1, r8, ror #23
   16b88:	andeq	r6, r1, ip, lsl ip
   16b8c:	andeq	r6, r1, r8, asr ip
   16b90:	muleq	r1, ip, ip
   16b94:	andeq	r6, r1, r4, ror #25
   16b98:	andeq	r6, r1, r4, lsr sp
   16b9c:	andeq	r6, r1, ip, lsl #27
   16ba0:	andeq	r6, r1, ip, ror #27
   16ba4:	mov	r1, #1
   16ba8:	str	r3, [sp]
   16bac:	mov	r3, r2
   16bb0:	ldr	r2, [pc, #700]	; 16e74 <__assert_fail@plt+0x5c90>
   16bb4:	bl	110dc <__fprintf_chk@plt>
   16bb8:	b	16b08 <__assert_fail@plt+0x5924>
   16bbc:	mov	r2, #5
   16bc0:	ldr	r1, [pc, #688]	; 16e78 <__assert_fail@plt+0x5c94>
   16bc4:	mov	r0, #0
   16bc8:	bl	10f80 <dcgettext@plt>
   16bcc:	ldr	r3, [r4]
   16bd0:	mov	r2, r0
   16bd4:	mov	r1, #1
   16bd8:	mov	r0, r5
   16bdc:	add	sp, sp, #32
   16be0:	pop	{r4, r5, r6, lr}
   16be4:	b	110dc <__fprintf_chk@plt>
   16be8:	mov	r2, #5
   16bec:	ldr	r1, [pc, #648]	; 16e7c <__assert_fail@plt+0x5c98>
   16bf0:	mov	r0, #0
   16bf4:	bl	10f80 <dcgettext@plt>
   16bf8:	ldr	r3, [r4, #4]
   16bfc:	mov	r2, r0
   16c00:	mov	r1, #1
   16c04:	mov	r0, r5
   16c08:	str	r3, [sp, #48]	; 0x30
   16c0c:	ldr	r3, [r4]
   16c10:	add	sp, sp, #32
   16c14:	pop	{r4, r5, r6, lr}
   16c18:	b	110dc <__fprintf_chk@plt>
   16c1c:	mov	r2, #5
   16c20:	ldr	r1, [pc, #600]	; 16e80 <__assert_fail@plt+0x5c9c>
   16c24:	mov	r0, #0
   16c28:	bl	10f80 <dcgettext@plt>
   16c2c:	ldr	r3, [r4, #8]
   16c30:	mov	r2, r0
   16c34:	mov	r1, #1
   16c38:	mov	r0, r5
   16c3c:	str	r3, [sp, #52]	; 0x34
   16c40:	ldr	r3, [r4, #4]
   16c44:	str	r3, [sp, #48]	; 0x30
   16c48:	ldr	r3, [r4]
   16c4c:	add	sp, sp, #32
   16c50:	pop	{r4, r5, r6, lr}
   16c54:	b	110dc <__fprintf_chk@plt>
   16c58:	mov	r2, #5
   16c5c:	ldr	r1, [pc, #544]	; 16e84 <__assert_fail@plt+0x5ca0>
   16c60:	mov	r0, #0
   16c64:	bl	10f80 <dcgettext@plt>
   16c68:	ldr	r3, [r4, #12]
   16c6c:	mov	r2, r0
   16c70:	mov	r1, #1
   16c74:	mov	r0, r5
   16c78:	str	r3, [sp, #8]
   16c7c:	ldr	r3, [r4, #8]
   16c80:	str	r3, [sp, #4]
   16c84:	ldr	r3, [r4, #4]
   16c88:	str	r3, [sp]
   16c8c:	ldr	r3, [r4]
   16c90:	bl	110dc <__fprintf_chk@plt>
   16c94:	add	sp, sp, #32
   16c98:	pop	{r4, r5, r6, pc}
   16c9c:	mov	r2, #5
   16ca0:	ldr	r1, [pc, #480]	; 16e88 <__assert_fail@plt+0x5ca4>
   16ca4:	mov	r0, #0
   16ca8:	bl	10f80 <dcgettext@plt>
   16cac:	ldr	r3, [r4, #16]
   16cb0:	mov	r2, r0
   16cb4:	mov	r1, #1
   16cb8:	mov	r0, r5
   16cbc:	str	r3, [sp, #12]
   16cc0:	ldr	r3, [r4, #12]
   16cc4:	str	r3, [sp, #8]
   16cc8:	ldr	r3, [r4, #8]
   16ccc:	str	r3, [sp, #4]
   16cd0:	ldr	r3, [r4, #4]
   16cd4:	str	r3, [sp]
   16cd8:	ldr	r3, [r4]
   16cdc:	bl	110dc <__fprintf_chk@plt>
   16ce0:	b	16c94 <__assert_fail@plt+0x5ab0>
   16ce4:	mov	r2, #5
   16ce8:	ldr	r1, [pc, #412]	; 16e8c <__assert_fail@plt+0x5ca8>
   16cec:	mov	r0, #0
   16cf0:	bl	10f80 <dcgettext@plt>
   16cf4:	ldr	r3, [r4, #20]
   16cf8:	mov	r2, r0
   16cfc:	mov	r1, #1
   16d00:	mov	r0, r5
   16d04:	str	r3, [sp, #16]
   16d08:	ldr	r3, [r4, #16]
   16d0c:	str	r3, [sp, #12]
   16d10:	ldr	r3, [r4, #12]
   16d14:	str	r3, [sp, #8]
   16d18:	ldr	r3, [r4, #8]
   16d1c:	str	r3, [sp, #4]
   16d20:	ldr	r3, [r4, #4]
   16d24:	str	r3, [sp]
   16d28:	ldr	r3, [r4]
   16d2c:	bl	110dc <__fprintf_chk@plt>
   16d30:	b	16c94 <__assert_fail@plt+0x5ab0>
   16d34:	mov	r2, #5
   16d38:	ldr	r1, [pc, #336]	; 16e90 <__assert_fail@plt+0x5cac>
   16d3c:	mov	r0, #0
   16d40:	bl	10f80 <dcgettext@plt>
   16d44:	ldr	r3, [r4, #24]
   16d48:	mov	r2, r0
   16d4c:	mov	r1, #1
   16d50:	mov	r0, r5
   16d54:	str	r3, [sp, #20]
   16d58:	ldr	r3, [r4, #20]
   16d5c:	str	r3, [sp, #16]
   16d60:	ldr	r3, [r4, #16]
   16d64:	str	r3, [sp, #12]
   16d68:	ldr	r3, [r4, #12]
   16d6c:	str	r3, [sp, #8]
   16d70:	ldr	r3, [r4, #8]
   16d74:	str	r3, [sp, #4]
   16d78:	ldr	r3, [r4, #4]
   16d7c:	str	r3, [sp]
   16d80:	ldr	r3, [r4]
   16d84:	bl	110dc <__fprintf_chk@plt>
   16d88:	b	16c94 <__assert_fail@plt+0x5ab0>
   16d8c:	mov	r2, #5
   16d90:	ldr	r1, [pc, #252]	; 16e94 <__assert_fail@plt+0x5cb0>
   16d94:	mov	r0, #0
   16d98:	bl	10f80 <dcgettext@plt>
   16d9c:	ldr	r3, [r4, #28]
   16da0:	mov	r2, r0
   16da4:	mov	r1, #1
   16da8:	mov	r0, r5
   16dac:	str	r3, [sp, #24]
   16db0:	ldr	r3, [r4, #24]
   16db4:	str	r3, [sp, #20]
   16db8:	ldr	r3, [r4, #20]
   16dbc:	str	r3, [sp, #16]
   16dc0:	ldr	r3, [r4, #16]
   16dc4:	str	r3, [sp, #12]
   16dc8:	ldr	r3, [r4, #12]
   16dcc:	str	r3, [sp, #8]
   16dd0:	ldr	r3, [r4, #8]
   16dd4:	str	r3, [sp, #4]
   16dd8:	ldr	r3, [r4, #4]
   16ddc:	str	r3, [sp]
   16de0:	ldr	r3, [r4]
   16de4:	bl	110dc <__fprintf_chk@plt>
   16de8:	b	16c94 <__assert_fail@plt+0x5ab0>
   16dec:	ldr	r1, [pc, #164]	; 16e98 <__assert_fail@plt+0x5cb4>
   16df0:	mov	r2, #5
   16df4:	mov	r0, #0
   16df8:	bl	10f80 <dcgettext@plt>
   16dfc:	ldr	r3, [r4, #32]
   16e00:	mov	r2, r0
   16e04:	mov	r1, #1
   16e08:	mov	r0, r5
   16e0c:	str	r3, [sp, #28]
   16e10:	ldr	r3, [r4, #28]
   16e14:	str	r3, [sp, #24]
   16e18:	ldr	r3, [r4, #24]
   16e1c:	str	r3, [sp, #20]
   16e20:	ldr	r3, [r4, #20]
   16e24:	str	r3, [sp, #16]
   16e28:	ldr	r3, [r4, #16]
   16e2c:	str	r3, [sp, #12]
   16e30:	ldr	r3, [r4, #12]
   16e34:	str	r3, [sp, #8]
   16e38:	ldr	r3, [r4, #8]
   16e3c:	str	r3, [sp, #4]
   16e40:	ldr	r3, [r4, #4]
   16e44:	str	r3, [sp]
   16e48:	ldr	r3, [r4]
   16e4c:	bl	110dc <__fprintf_chk@plt>
   16e50:	b	16c94 <__assert_fail@plt+0x5ab0>
   16e54:	mov	r2, #5
   16e58:	ldr	r1, [pc, #60]	; 16e9c <__assert_fail@plt+0x5cb8>
   16e5c:	b	16df4 <__assert_fail@plt+0x5c10>
   16e60:	andeq	r8, r1, r1, lsl r9
   16e64:	andeq	r8, r1, r4, lsr #18
   16e68:	strdeq	r8, [r1], -r2
   16e6c:	andeq	r8, r1, r8, lsr #18
   16e70:	ldrdeq	r8, [r1], -r3
   16e74:	andeq	r8, r1, sp, lsl r9
   16e78:	strdeq	r8, [r1], -r5
   16e7c:	andeq	r8, r1, r5, lsl #20
   16e80:	andeq	r8, r1, ip, lsl sl
   16e84:	andeq	r8, r1, r8, lsr sl
   16e88:	andeq	r8, r1, r8, asr sl
   16e8c:	andeq	r8, r1, ip, ror sl
   16e90:	andeq	r8, r1, r4, lsr #21
   16e94:	ldrdeq	r8, [r1], -r0
   16e98:	andeq	r8, r1, r0, lsl #22
   16e9c:	andeq	r8, r1, r4, lsr fp
   16ea0:	push	{r0, r1, r4, lr}
   16ea4:	mov	ip, #0
   16ea8:	ldr	lr, [sp, #16]
   16eac:	ldr	r4, [lr, ip, lsl #2]
   16eb0:	cmp	r4, #0
   16eb4:	bne	16ecc <__assert_fail@plt+0x5ce8>
   16eb8:	str	lr, [sp]
   16ebc:	str	ip, [sp, #4]
   16ec0:	bl	16ad8 <__assert_fail@plt+0x58f4>
   16ec4:	add	sp, sp, #8
   16ec8:	pop	{r4, pc}
   16ecc:	add	ip, ip, #1
   16ed0:	b	16eac <__assert_fail@plt+0x5cc8>
   16ed4:	push	{r4, r5, r6, lr}
   16ed8:	sub	sp, sp, #48	; 0x30
   16edc:	mov	ip, #0
   16ee0:	add	lr, sp, #8
   16ee4:	mov	r5, lr
   16ee8:	ldr	r6, [sp, #64]	; 0x40
   16eec:	ldr	r4, [r6, ip, lsl #2]
   16ef0:	cmp	r4, #0
   16ef4:	str	r4, [lr], #4
   16ef8:	beq	16f08 <__assert_fail@plt+0x5d24>
   16efc:	add	ip, ip, #1
   16f00:	cmp	ip, #10
   16f04:	bne	16eec <__assert_fail@plt+0x5d08>
   16f08:	stm	sp, {r5, ip}
   16f0c:	bl	16ad8 <__assert_fail@plt+0x58f4>
   16f10:	add	sp, sp, #48	; 0x30
   16f14:	pop	{r4, r5, r6, pc}
   16f18:	push	{r3}		; (str r3, [sp, #-4]!)
   16f1c:	push	{r0, r1, r2, r3, lr}
   16f20:	add	r3, sp, #24
   16f24:	str	r3, [sp]
   16f28:	str	r3, [sp, #12]
   16f2c:	ldr	r3, [sp, #20]
   16f30:	bl	16ed4 <__assert_fail@plt+0x5cf0>
   16f34:	add	sp, sp, #16
   16f38:	pop	{lr}		; (ldr lr, [sp], #4)
   16f3c:	add	sp, sp, #4
   16f40:	bx	lr
   16f44:	ldr	r3, [pc, #116]	; 16fc0 <__assert_fail@plt+0x5ddc>
   16f48:	mov	r0, #10
   16f4c:	push	{r4, lr}
   16f50:	ldr	r1, [r3]
   16f54:	bl	10f74 <fputc_unlocked@plt>
   16f58:	mov	r2, #5
   16f5c:	ldr	r1, [pc, #96]	; 16fc4 <__assert_fail@plt+0x5de0>
   16f60:	mov	r0, #0
   16f64:	bl	10f80 <dcgettext@plt>
   16f68:	mov	r1, r0
   16f6c:	ldr	r2, [pc, #84]	; 16fc8 <__assert_fail@plt+0x5de4>
   16f70:	mov	r0, #1
   16f74:	bl	110c4 <__printf_chk@plt>
   16f78:	mov	r2, #5
   16f7c:	ldr	r1, [pc, #72]	; 16fcc <__assert_fail@plt+0x5de8>
   16f80:	mov	r0, #0
   16f84:	bl	10f80 <dcgettext@plt>
   16f88:	mov	r1, r0
   16f8c:	ldr	r3, [pc, #60]	; 16fd0 <__assert_fail@plt+0x5dec>
   16f90:	mov	r0, #1
   16f94:	ldr	r2, [pc, #56]	; 16fd4 <__assert_fail@plt+0x5df0>
   16f98:	bl	110c4 <__printf_chk@plt>
   16f9c:	mov	r2, #5
   16fa0:	ldr	r1, [pc, #48]	; 16fd8 <__assert_fail@plt+0x5df4>
   16fa4:	mov	r0, #0
   16fa8:	bl	10f80 <dcgettext@plt>
   16fac:	mov	r1, r0
   16fb0:	ldr	r2, [pc, #36]	; 16fdc <__assert_fail@plt+0x5df8>
   16fb4:	mov	r0, #1
   16fb8:	pop	{r4, lr}
   16fbc:	b	110c4 <__printf_chk@plt>
   16fc0:	andeq	r9, r2, ip, ror r1
   16fc4:	andeq	r8, r1, r0, ror fp
   16fc8:	andeq	r8, r1, r4, lsl #23
   16fcc:	muleq	r1, sl, fp
   16fd0:	andeq	r8, r1, ip, asr #3
   16fd4:	strdeq	r8, [r1], -r4
   16fd8:	andeq	r8, r1, lr, lsr #23
   16fdc:	ldrdeq	r8, [r1], -r5
   16fe0:	push	{r4, lr}
   16fe4:	bl	173ac <__assert_fail@plt+0x61c8>
   16fe8:	cmp	r0, #0
   16fec:	popne	{r4, pc}
   16ff0:	bl	17298 <__assert_fail@plt+0x60b4>
   16ff4:	push	{r4, lr}
   16ff8:	bl	173ac <__assert_fail@plt+0x61c8>
   16ffc:	cmp	r0, #0
   17000:	popne	{r4, pc}
   17004:	bl	17298 <__assert_fail@plt+0x60b4>
   17008:	b	16fe0 <__assert_fail@plt+0x5dfc>
   1700c:	push	{r4, r5, r6, lr}
   17010:	mov	r5, r0
   17014:	mov	r4, r1
   17018:	bl	173d8 <__assert_fail@plt+0x61f4>
   1701c:	cmp	r0, #0
   17020:	popne	{r4, r5, r6, pc}
   17024:	adds	r4, r4, #0
   17028:	movne	r4, #1
   1702c:	cmp	r5, #0
   17030:	moveq	r4, #1
   17034:	cmp	r4, #0
   17038:	popeq	{r4, r5, r6, pc}
   1703c:	bl	17298 <__assert_fail@plt+0x60b4>
   17040:	push	{r4, lr}
   17044:	bl	17920 <__assert_fail@plt+0x673c>
   17048:	cmp	r0, #0
   1704c:	popne	{r4, pc}
   17050:	bl	17298 <__assert_fail@plt+0x60b4>
   17054:	push	{r4, r5, r6, lr}
   17058:	mov	r6, r0
   1705c:	mov	r5, r1
   17060:	mov	r4, r2
   17064:	bl	179c8 <__assert_fail@plt+0x67e4>
   17068:	cmp	r0, #0
   1706c:	popne	{r4, r5, r6, pc}
   17070:	cmp	r6, #0
   17074:	beq	17084 <__assert_fail@plt+0x5ea0>
   17078:	cmp	r5, #0
   1707c:	cmpne	r4, #0
   17080:	popeq	{r4, r5, r6, pc}
   17084:	bl	17298 <__assert_fail@plt+0x60b4>
   17088:	b	17054 <__assert_fail@plt+0x5e70>
   1708c:	push	{r4, lr}
   17090:	bl	17930 <__assert_fail@plt+0x674c>
   17094:	cmp	r0, #0
   17098:	popne	{r4, pc}
   1709c:	bl	17298 <__assert_fail@plt+0x60b4>
   170a0:	mov	r2, r1
   170a4:	mov	r1, r0
   170a8:	mov	r0, #0
   170ac:	b	17054 <__assert_fail@plt+0x5e70>
   170b0:	mov	r2, r1
   170b4:	mov	r1, r0
   170b8:	mov	r0, #0
   170bc:	b	1708c <__assert_fail@plt+0x5ea8>
   170c0:	cmp	r0, #0
   170c4:	push	{r4, r5, r6, lr}
   170c8:	mov	r5, r1
   170cc:	ldr	r4, [r1]
   170d0:	bne	170fc <__assert_fail@plt+0x5f18>
   170d4:	cmp	r4, #0
   170d8:	bne	170ec <__assert_fail@plt+0x5f08>
   170dc:	mov	r4, #64	; 0x40
   170e0:	udiv	r4, r4, r2
   170e4:	cmp	r2, #64	; 0x40
   170e8:	addhi	r4, r4, #1
   170ec:	mov	r1, r4
   170f0:	bl	17054 <__assert_fail@plt+0x5e70>
   170f4:	str	r4, [r5]
   170f8:	pop	{r4, r5, r6, pc}
   170fc:	lsr	r3, r4, #1
   17100:	add	r3, r3, #1
   17104:	adds	r4, r4, r3
   17108:	bcc	170ec <__assert_fail@plt+0x5f08>
   1710c:	bl	17298 <__assert_fail@plt+0x60b4>
   17110:	mov	r2, #1
   17114:	b	170c0 <__assert_fail@plt+0x5edc>
   17118:	ldr	ip, [r1]
   1711c:	push	{r4, r5, r6, r7, r8, lr}
   17120:	mov	r5, r1
   17124:	mvn	r8, r3
   17128:	lsr	r8, r8, #31
   1712c:	ldr	lr, [sp, #24]
   17130:	asr	r1, ip, #1
   17134:	adds	r4, ip, r1
   17138:	mvnvs	r4, #-2147483648	; 0x80000000
   1713c:	cmp	r3, r4
   17140:	movge	r1, #0
   17144:	andlt	r1, r8, #1
   17148:	cmp	r1, #0
   1714c:	movne	r4, r3
   17150:	smull	r6, r7, r4, lr
   17154:	cmp	r7, r6, asr #31
   17158:	bne	17170 <__assert_fail@plt+0x5f8c>
   1715c:	cmp	r6, #63	; 0x3f
   17160:	mov	r1, r6
   17164:	bgt	17180 <__assert_fail@plt+0x5f9c>
   17168:	mov	r1, #64	; 0x40
   1716c:	b	17174 <__assert_fail@plt+0x5f90>
   17170:	mvn	r1, #-2147483648	; 0x80000000
   17174:	sdiv	r4, r1, lr
   17178:	mls	r6, lr, r4, r1
   1717c:	sub	r1, r1, r6
   17180:	cmp	r0, #0
   17184:	sub	r6, r4, ip
   17188:	streq	r0, [r5]
   1718c:	cmp	r6, r2
   17190:	bge	171c4 <__assert_fail@plt+0x5fe0>
   17194:	adds	r4, ip, r2
   17198:	bvs	171c0 <__assert_fail@plt+0x5fdc>
   1719c:	cmp	r4, r3
   171a0:	movle	r3, #0
   171a4:	andgt	r3, r8, #1
   171a8:	cmp	r3, #0
   171ac:	bne	171c0 <__assert_fail@plt+0x5fdc>
   171b0:	smull	r2, r3, r4, lr
   171b4:	cmp	r3, r2, asr #31
   171b8:	mov	r1, r2
   171bc:	beq	171c4 <__assert_fail@plt+0x5fe0>
   171c0:	bl	17298 <__assert_fail@plt+0x60b4>
   171c4:	bl	1700c <__assert_fail@plt+0x5e28>
   171c8:	str	r4, [r5]
   171cc:	pop	{r4, r5, r6, r7, r8, pc}
   171d0:	push	{r4, lr}
   171d4:	bl	17358 <__assert_fail@plt+0x6174>
   171d8:	cmp	r0, #0
   171dc:	popne	{r4, pc}
   171e0:	bl	17298 <__assert_fail@plt+0x60b4>
   171e4:	mov	r1, #1
   171e8:	b	171d0 <__assert_fail@plt+0x5fec>
   171ec:	push	{r4, lr}
   171f0:	bl	17358 <__assert_fail@plt+0x6174>
   171f4:	cmp	r0, #0
   171f8:	popne	{r4, pc}
   171fc:	bl	17298 <__assert_fail@plt+0x60b4>
   17200:	mov	r1, #1
   17204:	b	171ec <__assert_fail@plt+0x6008>
   17208:	push	{r4, r5, r6, lr}
   1720c:	mov	r4, r1
   17210:	mov	r5, r0
   17214:	mov	r0, r1
   17218:	bl	16fe0 <__assert_fail@plt+0x5dfc>
   1721c:	mov	r2, r4
   17220:	mov	r1, r5
   17224:	pop	{r4, r5, r6, lr}
   17228:	b	10f50 <memcpy@plt>
   1722c:	push	{r4, r5, r6, lr}
   17230:	mov	r4, r1
   17234:	mov	r5, r0
   17238:	mov	r0, r1
   1723c:	bl	16ff4 <__assert_fail@plt+0x5e10>
   17240:	mov	r2, r4
   17244:	mov	r1, r5
   17248:	pop	{r4, r5, r6, lr}
   1724c:	b	10f50 <memcpy@plt>
   17250:	push	{r4, r5, r6, lr}
   17254:	mov	r5, r0
   17258:	add	r0, r1, #1
   1725c:	mov	r4, r1
   17260:	bl	16ff4 <__assert_fail@plt+0x5e10>
   17264:	mov	r2, #0
   17268:	mov	r1, r5
   1726c:	strb	r2, [r0, r4]
   17270:	mov	r2, r4
   17274:	pop	{r4, r5, r6, lr}
   17278:	b	10f50 <memcpy@plt>
   1727c:	push	{r4, lr}
   17280:	mov	r4, r0
   17284:	bl	11070 <strlen@plt>
   17288:	add	r1, r0, #1
   1728c:	mov	r0, r4
   17290:	pop	{r4, lr}
   17294:	b	17208 <__assert_fail@plt+0x6024>
   17298:	ldr	r3, [pc, #44]	; 172cc <__assert_fail@plt+0x60e8>
   1729c:	mov	r2, #5
   172a0:	mov	r0, #0
   172a4:	push	{r4, lr}
   172a8:	ldr	r1, [pc, #32]	; 172d0 <__assert_fail@plt+0x60ec>
   172ac:	ldr	r4, [r3]
   172b0:	bl	10f80 <dcgettext@plt>
   172b4:	mov	r3, r0
   172b8:	ldr	r2, [pc, #20]	; 172d4 <__assert_fail@plt+0x60f0>
   172bc:	mov	r1, #0
   172c0:	mov	r0, r4
   172c4:	bl	11004 <error@plt>
   172c8:	bl	111b4 <abort@plt>
   172cc:	andeq	r9, r2, r4, lsr #2
   172d0:	andeq	r8, r1, r1, lsr #24
   172d4:	muleq	r1, r6, r3
   172d8:	push	{r4, lr}
   172dc:	orr	r1, r1, #512	; 0x200
   172e0:	bl	13644 <__assert_fail@plt+0x2460>
   172e4:	cmp	r0, #0
   172e8:	popne	{r4, pc}
   172ec:	bl	11094 <__errno_location@plt>
   172f0:	ldr	r3, [r0]
   172f4:	cmp	r3, #22
   172f8:	bne	17310 <__assert_fail@plt+0x612c>
   172fc:	ldr	r3, [pc, #16]	; 17314 <__assert_fail@plt+0x6130>
   17300:	mov	r2, #41	; 0x29
   17304:	ldr	r1, [pc, #12]	; 17318 <__assert_fail@plt+0x6134>
   17308:	ldr	r0, [pc, #12]	; 1731c <__assert_fail@plt+0x6138>
   1730c:	bl	111e4 <__assert_fail@plt>
   17310:	bl	17298 <__assert_fail@plt+0x60b4>
   17314:	andeq	r8, r1, r2, lsr ip
   17318:	andeq	r8, r1, ip, lsr ip
   1731c:	andeq	r8, r1, r7, asr #24
   17320:	ldr	r3, [r0, #48]	; 0x30
   17324:	and	r3, r3, #17
   17328:	cmp	r3, #16
   1732c:	beq	17348 <__assert_fail@plt+0x6164>
   17330:	cmp	r3, #17
   17334:	bne	17350 <__assert_fail@plt+0x616c>
   17338:	ldr	r0, [r1, #48]	; 0x30
   1733c:	adds	r0, r0, #0
   17340:	movne	r0, #1
   17344:	bx	lr
   17348:	mov	r0, #1
   1734c:	bx	lr
   17350:	mov	r0, #0
   17354:	bx	lr
   17358:	cmp	r1, #0
   1735c:	cmpne	r0, #0
   17360:	beq	17398 <__assert_fail@plt+0x61b4>
   17364:	push	{r4, r5, r6, lr}
   17368:	umull	r4, r5, r0, r1
   1736c:	adds	r3, r5, #0
   17370:	movne	r3, #1
   17374:	cmp	r4, #0
   17378:	blt	17384 <__assert_fail@plt+0x61a0>
   1737c:	cmp	r3, #0
   17380:	beq	173a4 <__assert_fail@plt+0x61c0>
   17384:	bl	11094 <__errno_location@plt>
   17388:	mov	r3, #12
   1738c:	str	r3, [r0]
   17390:	mov	r0, #0
   17394:	pop	{r4, r5, r6, pc}
   17398:	mov	r1, #1
   1739c:	mov	r0, r1
   173a0:	b	10ef0 <calloc@plt>
   173a4:	pop	{r4, r5, r6, lr}
   173a8:	b	173a0 <__assert_fail@plt+0x61bc>
   173ac:	cmp	r0, #0
   173b0:	beq	173d0 <__assert_fail@plt+0x61ec>
   173b4:	bge	173d4 <__assert_fail@plt+0x61f0>
   173b8:	push	{r4, lr}
   173bc:	bl	11094 <__errno_location@plt>
   173c0:	mov	r3, #12
   173c4:	str	r3, [r0]
   173c8:	mov	r0, #0
   173cc:	pop	{r4, pc}
   173d0:	mov	r0, #1
   173d4:	b	1101c <malloc@plt>
   173d8:	cmp	r0, #0
   173dc:	bne	173e8 <__assert_fail@plt+0x6204>
   173e0:	mov	r0, r1
   173e4:	b	173ac <__assert_fail@plt+0x61c8>
   173e8:	cmp	r1, #0
   173ec:	push	{r4, lr}
   173f0:	bne	17400 <__assert_fail@plt+0x621c>
   173f4:	bl	17834 <__assert_fail@plt+0x6650>
   173f8:	mov	r0, #0
   173fc:	pop	{r4, pc}
   17400:	blt	1740c <__assert_fail@plt+0x6228>
   17404:	pop	{r4, lr}
   17408:	b	10f8c <realloc@plt>
   1740c:	bl	11094 <__errno_location@plt>
   17410:	mov	r3, #12
   17414:	str	r3, [r0]
   17418:	b	173f8 <__assert_fail@plt+0x6214>
   1741c:	push	{r4, r5, r6, lr}
   17420:	mov	r4, r0
   17424:	bl	10fe0 <__fpending@plt>
   17428:	mov	r5, r0
   1742c:	mov	r0, r4
   17430:	bl	10fec <ferror_unlocked@plt>
   17434:	mov	r6, r0
   17438:	mov	r0, r4
   1743c:	bl	17558 <__assert_fail@plt+0x6374>
   17440:	cmp	r6, #0
   17444:	mov	r4, r0
   17448:	bne	17474 <__assert_fail@plt+0x6290>
   1744c:	cmp	r0, #0
   17450:	beq	1746c <__assert_fail@plt+0x6288>
   17454:	cmp	r5, #0
   17458:	bne	17484 <__assert_fail@plt+0x62a0>
   1745c:	bl	11094 <__errno_location@plt>
   17460:	ldr	r4, [r0]
   17464:	subs	r4, r4, #9
   17468:	mvnne	r4, #0
   1746c:	mov	r0, r4
   17470:	pop	{r4, r5, r6, pc}
   17474:	cmp	r0, #0
   17478:	bne	17484 <__assert_fail@plt+0x62a0>
   1747c:	bl	11094 <__errno_location@plt>
   17480:	str	r4, [r0]
   17484:	mvn	r4, #0
   17488:	b	1746c <__assert_fail@plt+0x6288>
   1748c:	mov	r3, #0
   17490:	mov	r2, #0
   17494:	strd	r2, [r0, #16]
   17498:	ldr	r3, [pc, #4]	; 174a4 <__assert_fail@plt+0x62c0>
   1749c:	str	r3, [r0, #24]
   174a0:	bx	lr
   174a4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   174a8:	ldr	r3, [pc, #152]	; 17548 <__assert_fail@plt+0x6364>
   174ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174b0:	ldr	r2, [r0, #24]
   174b4:	cmp	r2, r3
   174b8:	beq	174d0 <__assert_fail@plt+0x62ec>
   174bc:	ldr	r3, [pc, #136]	; 1754c <__assert_fail@plt+0x6368>
   174c0:	mov	r2, #60	; 0x3c
   174c4:	ldr	r1, [pc, #132]	; 17550 <__assert_fail@plt+0x636c>
   174c8:	ldr	r0, [pc, #132]	; 17554 <__assert_fail@plt+0x6370>
   174cc:	bl	111e4 <__assert_fail@plt>
   174d0:	ldrd	r6, [r0, #16]
   174d4:	orrs	r3, r6, r7
   174d8:	beq	1750c <__assert_fail@plt+0x6328>
   174dc:	ldrd	r2, [r0]
   174e0:	ldrd	r4, [r1, #96]	; 0x60
   174e4:	cmp	r5, r3
   174e8:	cmpeq	r4, r2
   174ec:	bne	1750c <__assert_fail@plt+0x6328>
   174f0:	ldrd	r4, [r1]
   174f4:	ldrd	r2, [r0, #8]
   174f8:	cmp	r5, r3
   174fc:	cmpeq	r4, r2
   17500:	bne	1750c <__assert_fail@plt+0x6328>
   17504:	mov	r0, #1
   17508:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1750c:	adds	r8, r6, #1
   17510:	adc	r9, r7, #0
   17514:	and	r2, r6, r8
   17518:	and	r3, r7, r9
   1751c:	orrs	r3, r2, r3
   17520:	strd	r8, [r0, #16]
   17524:	bne	17540 <__assert_fail@plt+0x635c>
   17528:	orrs	r3, r8, r9
   1752c:	beq	17504 <__assert_fail@plt+0x6320>
   17530:	ldrd	r2, [r1]
   17534:	strd	r2, [r0, #8]
   17538:	ldrd	r2, [r1, #96]	; 0x60
   1753c:	strd	r2, [r0]
   17540:	mov	r0, #0
   17544:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17548:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1754c:	andeq	r8, r1, r7, asr ip
   17550:	andeq	r8, r1, r3, ror #24
   17554:	andeq	r8, r1, r5, ror ip
   17558:	push	{r0, r1, r2, r4, r5, lr}
   1755c:	mov	r4, r0
   17560:	bl	110d0 <fileno@plt>
   17564:	cmp	r0, #0
   17568:	mov	r0, r4
   1756c:	bge	1757c <__assert_fail@plt+0x6398>
   17570:	add	sp, sp, #12
   17574:	pop	{r4, r5, lr}
   17578:	b	110e8 <fclose@plt>
   1757c:	bl	11034 <__freading@plt>
   17580:	cmp	r0, #0
   17584:	bne	175c0 <__assert_fail@plt+0x63dc>
   17588:	mov	r0, r4
   1758c:	bl	177e4 <__assert_fail@plt+0x6600>
   17590:	cmp	r0, #0
   17594:	bne	175f4 <__assert_fail@plt+0x6410>
   17598:	mov	r5, #0
   1759c:	mov	r0, r4
   175a0:	bl	110e8 <fclose@plt>
   175a4:	cmp	r5, #0
   175a8:	beq	175b8 <__assert_fail@plt+0x63d4>
   175ac:	bl	11094 <__errno_location@plt>
   175b0:	str	r5, [r0]
   175b4:	mvn	r0, #0
   175b8:	add	sp, sp, #12
   175bc:	pop	{r4, r5, pc}
   175c0:	mov	r0, r4
   175c4:	bl	110d0 <fileno@plt>
   175c8:	mov	r3, #1
   175cc:	mov	r2, #0
   175d0:	str	r3, [sp]
   175d4:	mov	r3, #0
   175d8:	bl	10fc8 <lseek64@plt>
   175dc:	mvn	r3, #0
   175e0:	mvn	r2, #0
   175e4:	cmp	r1, r3
   175e8:	cmpeq	r0, r2
   175ec:	bne	17588 <__assert_fail@plt+0x63a4>
   175f0:	b	17598 <__assert_fail@plt+0x63b4>
   175f4:	bl	11094 <__errno_location@plt>
   175f8:	ldr	r5, [r0]
   175fc:	b	1759c <__assert_fail@plt+0x63b8>
   17600:	push	{r1, r2, r3}
   17604:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   17608:	add	r2, sp, #40	; 0x28
   1760c:	ldr	r1, [sp, #36]	; 0x24
   17610:	str	r2, [sp, #4]
   17614:	cmp	r1, #0
   17618:	beq	17668 <__assert_fail@plt+0x6484>
   1761c:	movw	r3, #1030	; 0x406
   17620:	mov	r5, r0
   17624:	cmp	r1, r3
   17628:	beq	17674 <__assert_fail@plt+0x6490>
   1762c:	cmp	r1, #11
   17630:	beq	17658 <__assert_fail@plt+0x6474>
   17634:	bgt	17768 <__assert_fail@plt+0x6584>
   17638:	cmp	r1, #4
   1763c:	beq	17780 <__assert_fail@plt+0x659c>
   17640:	bgt	17760 <__assert_fail@plt+0x657c>
   17644:	cmp	r1, #2
   17648:	beq	17780 <__assert_fail@plt+0x659c>
   1764c:	bgt	17658 <__assert_fail@plt+0x6474>
   17650:	cmp	r1, #1
   17654:	bne	17780 <__assert_fail@plt+0x659c>
   17658:	mov	r0, r5
   1765c:	bl	11100 <fcntl64@plt>
   17660:	mov	r4, r0
   17664:	b	176bc <__assert_fail@plt+0x64d8>
   17668:	ldr	r2, [sp, #40]	; 0x28
   1766c:	bl	11100 <fcntl64@plt>
   17670:	b	17660 <__assert_fail@plt+0x647c>
   17674:	ldr	r6, [pc, #304]	; 177ac <__assert_fail@plt+0x65c8>
   17678:	add	r3, sp, #44	; 0x2c
   1767c:	str	r3, [sp, #4]
   17680:	ldr	r7, [r2]
   17684:	ldr	r3, [r6]
   17688:	mov	r8, r6
   1768c:	mov	r2, r7
   17690:	cmp	r3, #0
   17694:	blt	17724 <__assert_fail@plt+0x6540>
   17698:	bl	11100 <fcntl64@plt>
   1769c:	subs	r4, r0, #0
   176a0:	bge	176b4 <__assert_fail@plt+0x64d0>
   176a4:	bl	11094 <__errno_location@plt>
   176a8:	ldr	r3, [r0]
   176ac:	cmp	r3, #22
   176b0:	beq	176d0 <__assert_fail@plt+0x64ec>
   176b4:	mov	r3, #1
   176b8:	str	r3, [r8]
   176bc:	mov	r0, r4
   176c0:	add	sp, sp, #12
   176c4:	pop	{r4, r5, r6, r7, r8, lr}
   176c8:	add	sp, sp, #12
   176cc:	bx	lr
   176d0:	mov	r2, r7
   176d4:	mov	r1, #0
   176d8:	mov	r0, r5
   176dc:	bl	11100 <fcntl64@plt>
   176e0:	subs	r4, r0, #0
   176e4:	mvnge	r3, #0
   176e8:	strge	r3, [r6]
   176ec:	blt	176bc <__assert_fail@plt+0x64d8>
   176f0:	mov	r1, #1
   176f4:	mov	r0, r4
   176f8:	bl	11100 <fcntl64@plt>
   176fc:	subs	r2, r0, #0
   17700:	bge	17744 <__assert_fail@plt+0x6560>
   17704:	bl	11094 <__errno_location@plt>
   17708:	mov	r5, r0
   1770c:	mov	r0, r4
   17710:	ldr	r6, [r5]
   17714:	mvn	r4, #0
   17718:	bl	111c0 <close@plt>
   1771c:	str	r6, [r5]
   17720:	b	176bc <__assert_fail@plt+0x64d8>
   17724:	mov	r1, #0
   17728:	bl	11100 <fcntl64@plt>
   1772c:	subs	r4, r0, #0
   17730:	blt	176bc <__assert_fail@plt+0x64d8>
   17734:	ldr	r3, [r6]
   17738:	cmn	r3, #1
   1773c:	bne	176bc <__assert_fail@plt+0x64d8>
   17740:	b	176f0 <__assert_fail@plt+0x650c>
   17744:	orr	r2, r2, #1
   17748:	mov	r1, #2
   1774c:	mov	r0, r4
   17750:	bl	11100 <fcntl64@plt>
   17754:	cmn	r0, #1
   17758:	bne	176bc <__assert_fail@plt+0x64d8>
   1775c:	b	17704 <__assert_fail@plt+0x6520>
   17760:	cmp	r1, #9
   17764:	b	17654 <__assert_fail@plt+0x6470>
   17768:	movw	r2, #1031	; 0x407
   1776c:	cmp	r1, r2
   17770:	bgt	17790 <__assert_fail@plt+0x65ac>
   17774:	cmp	r1, r3
   17778:	movwlt	r3, #1025	; 0x401
   1777c:	blt	177a4 <__assert_fail@plt+0x65c0>
   17780:	ldr	r3, [sp, #4]
   17784:	mov	r0, r5
   17788:	ldr	r2, [r3]
   1778c:	b	1766c <__assert_fail@plt+0x6488>
   17790:	movw	r3, #1033	; 0x409
   17794:	cmp	r1, r3
   17798:	beq	17780 <__assert_fail@plt+0x659c>
   1779c:	blt	17658 <__assert_fail@plt+0x6474>
   177a0:	movw	r3, #1034	; 0x40a
   177a4:	cmp	r1, r3
   177a8:	b	17654 <__assert_fail@plt+0x6470>
   177ac:	andeq	r9, r2, r8, ror #5
   177b0:	push	{r1, r2, r3}
   177b4:	push	{r0, r1, lr}
   177b8:	ldr	r1, [sp, #12]
   177bc:	ands	r2, r1, #64	; 0x40
   177c0:	ldrne	r2, [sp, #16]
   177c4:	addne	r3, sp, #16
   177c8:	strne	r3, [sp, #4]
   177cc:	bl	11010 <open64@plt>
   177d0:	bl	16a9c <__assert_fail@plt+0x58b8>
   177d4:	add	sp, sp, #8
   177d8:	pop	{lr}		; (ldr lr, [sp], #4)
   177dc:	add	sp, sp, #12
   177e0:	bx	lr
   177e4:	push	{r0, r1, r4, lr}
   177e8:	subs	r4, r0, #0
   177ec:	bne	17800 <__assert_fail@plt+0x661c>
   177f0:	mov	r0, r4
   177f4:	add	sp, sp, #8
   177f8:	pop	{r4, lr}
   177fc:	b	10f20 <fflush@plt>
   17800:	bl	11034 <__freading@plt>
   17804:	cmp	r0, #0
   17808:	beq	177f0 <__assert_fail@plt+0x660c>
   1780c:	ldr	r3, [r4]
   17810:	tst	r3, #256	; 0x100
   17814:	beq	177f0 <__assert_fail@plt+0x660c>
   17818:	mov	r3, #1
   1781c:	mov	r2, #0
   17820:	mov	r0, r4
   17824:	str	r3, [sp]
   17828:	mov	r3, #0
   1782c:	bl	17884 <__assert_fail@plt+0x66a0>
   17830:	b	177f0 <__assert_fail@plt+0x660c>
   17834:	push	{r0, r1, r2, r4, r5, lr}
   17838:	mov	r5, r0
   1783c:	bl	11094 <__errno_location@plt>
   17840:	mov	r4, r0
   17844:	mov	r0, r5
   17848:	ldr	r3, [r4]
   1784c:	str	r3, [sp]
   17850:	str	r3, [sp, #4]
   17854:	mov	r3, #0
   17858:	str	r3, [r4]
   1785c:	bl	10f38 <free@plt>
   17860:	ldr	r3, [r4]
   17864:	add	r2, sp, #8
   17868:	clz	r3, r3
   1786c:	lsr	r3, r3, #5
   17870:	add	r3, r2, r3, lsl #2
   17874:	ldr	r3, [r3, #-8]
   17878:	str	r3, [r4]
   1787c:	add	sp, sp, #12
   17880:	pop	{r4, r5, pc}
   17884:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   17888:	mov	r4, r0
   1788c:	ldmib	r0, {ip, lr}
   17890:	ldr	r8, [sp, #32]
   17894:	cmp	lr, ip
   17898:	bne	17908 <__assert_fail@plt+0x6724>
   1789c:	ldr	ip, [r0, #16]
   178a0:	ldr	lr, [r0, #20]
   178a4:	cmp	lr, ip
   178a8:	bne	17908 <__assert_fail@plt+0x6724>
   178ac:	ldr	r5, [r0, #36]	; 0x24
   178b0:	cmp	r5, #0
   178b4:	bne	17908 <__assert_fail@plt+0x6724>
   178b8:	mov	r6, r2
   178bc:	mov	r7, r3
   178c0:	bl	110d0 <fileno@plt>
   178c4:	mov	r2, r6
   178c8:	mov	r3, r7
   178cc:	str	r8, [sp]
   178d0:	bl	10fc8 <lseek64@plt>
   178d4:	mvn	r3, #0
   178d8:	mvn	r2, #0
   178dc:	cmp	r1, r3
   178e0:	cmpeq	r0, r2
   178e4:	mvneq	r0, #0
   178e8:	beq	17900 <__assert_fail@plt+0x671c>
   178ec:	ldr	r3, [r4]
   178f0:	strd	r0, [r4, #80]	; 0x50
   178f4:	mov	r0, r5
   178f8:	bic	r3, r3, #16
   178fc:	str	r3, [r4]
   17900:	add	sp, sp, #8
   17904:	pop	{r4, r5, r6, r7, r8, pc}
   17908:	mov	r0, r4
   1790c:	str	r8, [sp, #32]
   17910:	add	sp, sp, #8
   17914:	pop	{r4, r5, r6, r7, r8, lr}
   17918:	b	110f4 <fseeko64@plt>
   1791c:	b	173ac <__assert_fail@plt+0x61c8>
   17920:	cmp	r1, #0
   17924:	orreq	r1, r1, #1
   17928:	b	173d8 <__assert_fail@plt+0x61f4>
   1792c:	b	17358 <__assert_fail@plt+0x6174>
   17930:	cmp	r2, #0
   17934:	cmpne	r1, #0
   17938:	moveq	r2, #1
   1793c:	moveq	r1, r2
   17940:	b	179c8 <__assert_fail@plt+0x67e4>
   17944:	push	{r4, lr}
   17948:	mov	r0, #14
   1794c:	bl	11124 <nl_langinfo@plt>
   17950:	cmp	r0, #0
   17954:	beq	1796c <__assert_fail@plt+0x6788>
   17958:	ldrb	r2, [r0]
   1795c:	ldr	r3, [pc, #16]	; 17974 <__assert_fail@plt+0x6790>
   17960:	cmp	r2, #0
   17964:	moveq	r0, r3
   17968:	pop	{r4, pc}
   1796c:	ldr	r0, [pc]	; 17974 <__assert_fail@plt+0x6790>
   17970:	pop	{r4, pc}
   17974:	andeq	r8, r1, sp, lsl #25
   17978:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1797c:	subs	r5, r0, #0
   17980:	mov	r7, r2
   17984:	addeq	r5, sp, #4
   17988:	mov	r6, r1
   1798c:	mov	r0, r5
   17990:	bl	10ff8 <mbrtowc@plt>
   17994:	cmp	r7, #0
   17998:	cmnne	r0, #3
   1799c:	mov	r4, r0
   179a0:	bls	179bc <__assert_fail@plt+0x67d8>
   179a4:	mov	r0, #0
   179a8:	bl	17a00 <__assert_fail@plt+0x681c>
   179ac:	cmp	r0, #0
   179b0:	ldrbeq	r3, [r6]
   179b4:	moveq	r4, #1
   179b8:	streq	r3, [r5]
   179bc:	mov	r0, r4
   179c0:	add	sp, sp, #12
   179c4:	pop	{r4, r5, r6, r7, pc}
   179c8:	umull	r2, r3, r1, r2
   179cc:	cmp	r3, #0
   179d0:	bne	179dc <__assert_fail@plt+0x67f8>
   179d4:	mov	r1, r2
   179d8:	b	173d8 <__assert_fail@plt+0x61f4>
   179dc:	push	{r4, lr}
   179e0:	bl	11094 <__errno_location@plt>
   179e4:	mov	r3, #12
   179e8:	str	r3, [r0]
   179ec:	mov	r0, #0
   179f0:	pop	{r4, pc}
   179f4:	mov	r2, #3
   179f8:	mov	r1, #0
   179fc:	b	17600 <__assert_fail@plt+0x641c>
   17a00:	push	{lr}		; (str lr, [sp, #-4]!)
   17a04:	sub	sp, sp, #268	; 0x10c
   17a08:	movw	r2, #257	; 0x101
   17a0c:	add	r1, sp, #4
   17a10:	bl	17a5c <__assert_fail@plt+0x6878>
   17a14:	cmp	r0, #0
   17a18:	movne	r0, #0
   17a1c:	bne	17a4c <__assert_fail@plt+0x6868>
   17a20:	ldr	r1, [pc, #44]	; 17a54 <__assert_fail@plt+0x6870>
   17a24:	add	r0, sp, #4
   17a28:	bl	10f14 <strcmp@plt>
   17a2c:	cmp	r0, #0
   17a30:	beq	17a48 <__assert_fail@plt+0x6864>
   17a34:	ldr	r1, [pc, #28]	; 17a58 <__assert_fail@plt+0x6874>
   17a38:	add	r0, sp, #4
   17a3c:	bl	10f14 <strcmp@plt>
   17a40:	adds	r0, r0, #0
   17a44:	movne	r0, #1
   17a48:	and	r0, r0, #1
   17a4c:	add	sp, sp, #268	; 0x10c
   17a50:	pop	{pc}		; (ldr pc, [sp], #4)
   17a54:	muleq	r1, r3, ip
   17a58:	muleq	r1, r5, ip
   17a5c:	push	{r4, r5, r6, lr}
   17a60:	mov	r5, r1
   17a64:	mov	r1, #0
   17a68:	mov	r4, r2
   17a6c:	bl	1110c <setlocale@plt>
   17a70:	subs	r6, r0, #0
   17a74:	bne	17a88 <__assert_fail@plt+0x68a4>
   17a78:	cmp	r4, #0
   17a7c:	mov	r0, #22
   17a80:	strbne	r6, [r5]
   17a84:	pop	{r4, r5, r6, pc}
   17a88:	bl	11070 <strlen@plt>
   17a8c:	cmp	r4, r0
   17a90:	bls	17aac <__assert_fail@plt+0x68c8>
   17a94:	add	r2, r0, #1
   17a98:	mov	r1, r6
   17a9c:	mov	r0, r5
   17aa0:	bl	10f50 <memcpy@plt>
   17aa4:	mov	r0, #0
   17aa8:	pop	{r4, r5, r6, pc}
   17aac:	cmp	r4, #0
   17ab0:	beq	17ad0 <__assert_fail@plt+0x68ec>
   17ab4:	sub	r4, r4, #1
   17ab8:	mov	r1, r6
   17abc:	mov	r2, r4
   17ac0:	mov	r0, r5
   17ac4:	bl	10f50 <memcpy@plt>
   17ac8:	mov	r3, #0
   17acc:	strb	r3, [r5, r4]
   17ad0:	mov	r0, #34	; 0x22
   17ad4:	pop	{r4, r5, r6, pc}
   17ad8:	mov	r1, #0
   17adc:	b	1110c <setlocale@plt>
   17ae0:	cmp	r3, #0
   17ae4:	cmpeq	r2, #0
   17ae8:	bne	17b00 <__assert_fail@plt+0x691c>
   17aec:	cmp	r1, #0
   17af0:	cmpeq	r0, #0
   17af4:	mvnne	r1, #0
   17af8:	mvnne	r0, #0
   17afc:	b	17b1c <__assert_fail@plt+0x6938>
   17b00:	sub	sp, sp, #8
   17b04:	push	{sp, lr}
   17b08:	bl	17b2c <__assert_fail@plt+0x6948>
   17b0c:	ldr	lr, [sp, #4]
   17b10:	add	sp, sp, #8
   17b14:	pop	{r2, r3}
   17b18:	bx	lr
   17b1c:	push	{r1, lr}
   17b20:	mov	r0, #8
   17b24:	bl	10f08 <raise@plt>
   17b28:	pop	{r1, pc}
   17b2c:	cmp	r1, r3
   17b30:	cmpeq	r0, r2
   17b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b38:	mov	r4, r0
   17b3c:	movcc	r0, #0
   17b40:	mov	r5, r1
   17b44:	ldr	lr, [sp, #36]	; 0x24
   17b48:	movcc	r1, r0
   17b4c:	bcc	17c48 <__assert_fail@plt+0x6a64>
   17b50:	cmp	r3, #0
   17b54:	clzeq	ip, r2
   17b58:	clzne	ip, r3
   17b5c:	addeq	ip, ip, #32
   17b60:	cmp	r5, #0
   17b64:	clzeq	r1, r4
   17b68:	addeq	r1, r1, #32
   17b6c:	clzne	r1, r5
   17b70:	sub	ip, ip, r1
   17b74:	sub	sl, ip, #32
   17b78:	lsl	r9, r3, ip
   17b7c:	rsb	fp, ip, #32
   17b80:	orr	r9, r9, r2, lsl sl
   17b84:	orr	r9, r9, r2, lsr fp
   17b88:	lsl	r8, r2, ip
   17b8c:	cmp	r5, r9
   17b90:	cmpeq	r4, r8
   17b94:	movcc	r0, #0
   17b98:	movcc	r1, r0
   17b9c:	bcc	17bb8 <__assert_fail@plt+0x69d4>
   17ba0:	mov	r0, #1
   17ba4:	subs	r4, r4, r8
   17ba8:	lsl	r1, r0, sl
   17bac:	orr	r1, r1, r0, lsr fp
   17bb0:	lsl	r0, r0, ip
   17bb4:	sbc	r5, r5, r9
   17bb8:	cmp	ip, #0
   17bbc:	beq	17c48 <__assert_fail@plt+0x6a64>
   17bc0:	lsr	r6, r8, #1
   17bc4:	orr	r6, r6, r9, lsl #31
   17bc8:	lsr	r7, r9, #1
   17bcc:	mov	r2, ip
   17bd0:	b	17bf4 <__assert_fail@plt+0x6a10>
   17bd4:	subs	r3, r4, r6
   17bd8:	sbc	r8, r5, r7
   17bdc:	adds	r3, r3, r3
   17be0:	adc	r8, r8, r8
   17be4:	adds	r4, r3, #1
   17be8:	adc	r5, r8, #0
   17bec:	subs	r2, r2, #1
   17bf0:	beq	17c10 <__assert_fail@plt+0x6a2c>
   17bf4:	cmp	r5, r7
   17bf8:	cmpeq	r4, r6
   17bfc:	bcs	17bd4 <__assert_fail@plt+0x69f0>
   17c00:	adds	r4, r4, r4
   17c04:	adc	r5, r5, r5
   17c08:	subs	r2, r2, #1
   17c0c:	bne	17bf4 <__assert_fail@plt+0x6a10>
   17c10:	lsr	r3, r4, ip
   17c14:	orr	r3, r3, r5, lsl fp
   17c18:	lsr	r2, r5, ip
   17c1c:	orr	r3, r3, r5, lsr sl
   17c20:	adds	r0, r0, r4
   17c24:	mov	r4, r3
   17c28:	lsl	r3, r2, ip
   17c2c:	orr	r3, r3, r4, lsl sl
   17c30:	lsl	ip, r4, ip
   17c34:	orr	r3, r3, r4, lsr fp
   17c38:	adc	r1, r1, r5
   17c3c:	subs	r0, r0, ip
   17c40:	mov	r5, r2
   17c44:	sbc	r1, r1, r3
   17c48:	cmp	lr, #0
   17c4c:	strdne	r4, [lr]
   17c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c58:	mov	r7, r0
   17c5c:	ldr	r6, [pc, #72]	; 17cac <__assert_fail@plt+0x6ac8>
   17c60:	ldr	r5, [pc, #72]	; 17cb0 <__assert_fail@plt+0x6acc>
   17c64:	add	r6, pc, r6
   17c68:	add	r5, pc, r5
   17c6c:	sub	r6, r6, r5
   17c70:	mov	r8, r1
   17c74:	mov	r9, r2
   17c78:	bl	10ec4 <fstatfs64@plt-0x20>
   17c7c:	asrs	r6, r6, #2
   17c80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c84:	mov	r4, #0
   17c88:	add	r4, r4, #1
   17c8c:	ldr	r3, [r5], #4
   17c90:	mov	r2, r9
   17c94:	mov	r1, r8
   17c98:	mov	r0, r7
   17c9c:	blx	r3
   17ca0:	cmp	r6, r4
   17ca4:	bne	17c88 <__assert_fail@plt+0x6aa4>
   17ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17cac:	andeq	r1, r1, r8, lsr #5
   17cb0:	andeq	r1, r1, r0, lsr #5
   17cb4:	bx	lr
   17cb8:	ldr	r3, [pc, #12]	; 17ccc <__assert_fail@plt+0x6ae8>
   17cbc:	mov	r1, #0
   17cc0:	add	r3, pc, r3
   17cc4:	ldr	r2, [r3]
   17cc8:	b	110ac <__cxa_atexit@plt>
   17ccc:	andeq	r1, r1, r0, asr r4
   17cd0:	mov	r2, r1
   17cd4:	mov	r1, r0
   17cd8:	mov	r0, #3
   17cdc:	b	11190 <__xstat64@plt>
   17ce0:	mov	r2, r1
   17ce4:	mov	r1, r0
   17ce8:	mov	r0, #3
   17cec:	b	10fbc <__fxstat64@plt>
   17cf0:	mov	r2, r1
   17cf4:	mov	r1, r0
   17cf8:	mov	r0, #3
   17cfc:	b	111cc <__lxstat64@plt>
   17d00:	push	{lr}		; (str lr, [sp, #-4]!)
   17d04:	sub	sp, sp, #12
   17d08:	str	r3, [sp]
   17d0c:	mov	r3, r2
   17d10:	mov	r2, r1
   17d14:	mov	r1, r0
   17d18:	mov	r0, #3
   17d1c:	bl	10fa4 <__fxstatat64@plt>
   17d20:	add	sp, sp, #12
   17d24:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00017d28 <.fini>:
   17d28:	push	{r3, lr}
   17d2c:	pop	{r3, pc}
