
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r9, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <dcgettext@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <realloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <textdomain@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <iswprint@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <fwrite@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <lseek64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <__ctype_get_mb_cur_max@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__fpending@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <mbrtowc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <error@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <malloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__freading@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__gmon_start__@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <getopt_long@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <bcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f38 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r8, r1, r0, lsl r9
   110c8:	andeq	r1, r1, r8, lsl r5
   110cc:			; <UNDEFINED> instruction: 0x000188b0
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f50 <__gmon_start__@plt>
   110ec:	andeq	r8, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	sl, r2, r0, lsr r1
   11118:	andeq	sl, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	sl, r2, r0, lsr r1
   11150:	andeq	sl, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	sl, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	114d4 <__assert_fail@plt+0x44c>
   1119c:	movw	r1, #35171	; 0x8963
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10eb4 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #41332	; 0xa174
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #35201	; 0x8981
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10eb4 <dcgettext@plt>
   111dc:	movw	r7, #41292	; 0xa14c
   111e0:	movt	r7, #2
   111e4:	ldr	r1, [r7]
   111e8:	bl	10e30 <fputs_unlocked@plt>
   111ec:	movw	r1, #36670	; 0x8f3e
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10eb4 <dcgettext@plt>
   11200:	ldr	r1, [r7]
   11204:	bl	10e30 <fputs_unlocked@plt>
   11208:	movw	r1, #36726	; 0x8f76
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10eb4 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e30 <fputs_unlocked@plt>
   11224:	movw	r1, #35271	; 0x89c7
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10eb4 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e30 <fputs_unlocked@plt>
   11240:	movw	r1, #35341	; 0x8a0d
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10eb4 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e30 <fputs_unlocked@plt>
   1125c:	movw	r1, #35412	; 0x8a54
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10eb4 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e30 <fputs_unlocked@plt>
   11278:	movw	r1, #35482	; 0x8a9a
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10eb4 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e30 <fputs_unlocked@plt>
   11294:	movw	r1, #35556	; 0x8ae4
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10eb4 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e30 <fputs_unlocked@plt>
   112b0:	movw	r1, #35614	; 0x8b1e
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10eb4 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10e30 <fputs_unlocked@plt>
   112cc:	movw	r1, #35688	; 0x8b68
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10eb4 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10e30 <fputs_unlocked@plt>
   112e8:	movw	r1, #35763	; 0x8bb3
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10eb4 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10e30 <fputs_unlocked@plt>
   11304:	movw	r1, #36005	; 0x8ca5
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10eb4 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10e30 <fputs_unlocked@plt>
   11320:	movw	r1, #36227	; 0x8d83
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10eb4 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10e30 <fputs_unlocked@plt>
   1133c:	movw	r1, #36272	; 0x8db0
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10eb4 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10e30 <fputs_unlocked@plt>
   11358:	movw	r1, #36326	; 0x8de6
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10eb4 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10e30 <fputs_unlocked@plt>
   11374:	movw	r0, #37696	; 0x9340
   11378:	mov	r2, #48	; 0x30
   1137c:	mov	r6, sp
   11380:	movw	r5, #36524	; 0x8eac
   11384:	movt	r0, #1
   11388:	movt	r5, #1
   1138c:	add	r1, r0, #32
   11390:	add	r3, r0, #16
   11394:	vld1.64	{d18-d19}, [r0], r2
   11398:	vld1.64	{d16-d17}, [r1]
   1139c:	vld1.64	{d20-d21}, [r3]
   113a0:	vldr	d22, [r0]
   113a4:	add	r1, r6, #32
   113a8:	add	r0, r6, #16
   113ac:	vst1.64	{d16-d17}, [r1]
   113b0:	movw	r1, #36801	; 0x8fc1
   113b4:	vst1.64	{d20-d21}, [r0]
   113b8:	mov	r0, r6
   113bc:	movt	r1, #1
   113c0:	vst1.64	{d18-d19}, [r0], r2
   113c4:	vstr	d22, [r0]
   113c8:	mov	r0, r5
   113cc:	bl	10e48 <strcmp@plt>
   113d0:	cmp	r0, #0
   113d4:	ldrne	r1, [r6, #8]!
   113d8:	cmpne	r1, #0
   113dc:	bne	113c8 <__assert_fail@plt+0x340>
   113e0:	movw	r1, #36896	; 0x9020
   113e4:	ldr	r6, [r6, #4]
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	movt	r1, #1
   113f4:	bl	10eb4 <dcgettext@plt>
   113f8:	movw	r2, #36585	; 0x8ee9
   113fc:	movw	r3, #36919	; 0x9037
   11400:	mov	r1, r0
   11404:	mov	r0, #1
   11408:	movt	r2, #1
   1140c:	movt	r3, #1
   11410:	bl	10fc8 <__printf_chk@plt>
   11414:	cmp	r6, #0
   11418:	mov	r0, #5
   1141c:	mov	r1, #0
   11420:	moveq	r6, r5
   11424:	bl	1101c <setlocale@plt>
   11428:	cmp	r0, #0
   1142c:	beq	11464 <__assert_fail@plt+0x3dc>
   11430:	movw	r1, #36959	; 0x905f
   11434:	mov	r2, #3
   11438:	movt	r1, #1
   1143c:	bl	11070 <strncmp@plt>
   11440:	cmp	r0, #0
   11444:	beq	11464 <__assert_fail@plt+0x3dc>
   11448:	movw	r1, #36963	; 0x9063
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	10eb4 <dcgettext@plt>
   1145c:	ldr	r1, [r7]
   11460:	bl	10e30 <fputs_unlocked@plt>
   11464:	movw	r1, #37034	; 0x90aa
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	10eb4 <dcgettext@plt>
   11478:	movw	r2, #36919	; 0x9037
   1147c:	mov	r1, r0
   11480:	mov	r0, #1
   11484:	mov	r3, r5
   11488:	movt	r2, #1
   1148c:	bl	10fc8 <__printf_chk@plt>
   11490:	movw	r1, #37061	; 0x90c5
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	movt	r1, #1
   114a0:	bl	10eb4 <dcgettext@plt>
   114a4:	mov	r1, r0
   114a8:	movw	r0, #36829	; 0x8fdd
   114ac:	movw	r3, #37111	; 0x90f7
   114b0:	cmp	r6, r5
   114b4:	mov	r2, r6
   114b8:	movt	r0, #1
   114bc:	movt	r3, #1
   114c0:	moveq	r3, r0
   114c4:	mov	r0, #1
   114c8:	bl	10fc8 <__printf_chk@plt>
   114cc:	mov	r0, r4
   114d0:	bl	10f74 <exit@plt>
   114d4:	movw	r0, #41280	; 0xa140
   114d8:	movw	r1, #35132	; 0x893c
   114dc:	mov	r2, #5
   114e0:	movt	r0, #2
   114e4:	movt	r1, #1
   114e8:	ldr	r5, [r0]
   114ec:	mov	r0, #0
   114f0:	bl	10eb4 <dcgettext@plt>
   114f4:	mov	r2, r0
   114f8:	movw	r0, #41332	; 0xa174
   114fc:	mov	r1, #1
   11500:	movt	r0, #2
   11504:	ldr	r3, [r0]
   11508:	mov	r0, r5
   1150c:	bl	10fe0 <__fprintf_chk@plt>
   11510:	mov	r0, r4
   11514:	bl	10f74 <exit@plt>
   11518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1151c:	add	fp, sp, #28
   11520:	sub	sp, sp, #36	; 0x24
   11524:	mov	r5, r0
   11528:	ldr	r0, [r1]
   1152c:	mov	r4, r1
   11530:	bl	14038 <__assert_fail@plt+0x2fb0>
   11534:	movw	r1, #37111	; 0x90f7
   11538:	mov	r0, #6
   1153c:	movt	r1, #1
   11540:	bl	1101c <setlocale@plt>
   11544:	movw	r6, #36589	; 0x8eed
   11548:	movw	r1, #36531	; 0x8eb3
   1154c:	movt	r6, #1
   11550:	movt	r1, #1
   11554:	mov	r0, r6
   11558:	bl	11058 <bindtextdomain@plt>
   1155c:	mov	r0, r6
   11560:	bl	10ecc <textdomain@plt>
   11564:	movw	r0, #15688	; 0x3d48
   11568:	movt	r0, #1
   1156c:	bl	18914 <__assert_fail@plt+0x788c>
   11570:	mov	r0, #0
   11574:	movw	r7, #36555	; 0x8ecb
   11578:	movw	r6, #37472	; 0x9260
   1157c:	mov	sl, #0
   11580:	mov	r9, #76	; 0x4c
   11584:	str	r0, [sp, #20]
   11588:	mov	r0, #0
   1158c:	movt	r7, #1
   11590:	movt	r6, #1
   11594:	str	r0, [sp, #16]
   11598:	mov	r0, #0
   1159c:	b	115ac <__assert_fail@plt+0x524>
   115a0:	mov	r0, #1
   115a4:	str	r0, [sp, #20]
   115a8:	mov	r0, r8
   115ac:	mov	r8, r0
   115b0:	mov	r0, r5
   115b4:	mov	r1, r4
   115b8:	mov	r2, r7
   115bc:	mov	r3, r6
   115c0:	str	sl, [sp]
   115c4:	bl	10f5c <getopt_long@plt>
   115c8:	sub	r1, r0, #256	; 0x100
   115cc:	cmp	r1, #8
   115d0:	bcc	115ac <__assert_fail@plt+0x524>
   115d4:	cmp	r0, #99	; 0x63
   115d8:	ble	1165c <__assert_fail@plt+0x5d4>
   115dc:	cmp	r0, #100	; 0x64
   115e0:	beq	115a0 <__assert_fail@plt+0x518>
   115e4:	cmp	r0, #105	; 0x69
   115e8:	beq	11650 <__assert_fail@plt+0x5c8>
   115ec:	cmp	r0, #119	; 0x77
   115f0:	bne	117b0 <__assert_fail@plt+0x728>
   115f4:	movw	r0, #41296	; 0xa150
   115f8:	movw	r1, #37111	; 0x90f7
   115fc:	mov	r2, #10
   11600:	add	r3, sp, #24
   11604:	movt	r0, #2
   11608:	movt	r1, #1
   1160c:	ldr	r0, [r0]
   11610:	str	r1, [sp]
   11614:	mov	r1, #0
   11618:	bl	16a10 <__assert_fail@plt+0x5988>
   1161c:	cmp	r0, #1
   11620:	bhi	118b8 <__assert_fail@plt+0x830>
   11624:	ldr	r1, [sp, #28]
   11628:	cmn	r1, #1
   1162c:	ble	118b8 <__assert_fail@plt+0x830>
   11630:	ldr	r2, [sp, #24]
   11634:	mvn	r3, #-2147483648	; 0x80000000
   11638:	subs	r3, r3, r2
   1163c:	rscs	r1, r1, #0
   11640:	movwlt	r2, #0
   11644:	subs	r9, r0, #1
   11648:	movne	r9, r2
   1164c:	b	115a8 <__assert_fail@plt+0x520>
   11650:	mov	r0, #1
   11654:	str	r0, [sp, #16]
   11658:	b	115a8 <__assert_fail@plt+0x520>
   1165c:	cmn	r0, #3
   11660:	beq	11754 <__assert_fail@plt+0x6cc>
   11664:	cmn	r0, #2
   11668:	beq	117a8 <__assert_fail@plt+0x720>
   1166c:	cmn	r0, #1
   11670:	bne	117b0 <__assert_fail@plt+0x728>
   11674:	sub	r0, r8, #256	; 0x100
   11678:	cmp	r0, #8
   1167c:	bcs	117b8 <__assert_fail@plt+0x730>
   11680:	movw	r1, #38044	; 0x949c
   11684:	movw	r2, #41308	; 0xa15c
   11688:	movw	r6, #41272	; 0xa138
   1168c:	movt	r1, #1
   11690:	movt	r2, #2
   11694:	movt	r6, #2
   11698:	ldr	r1, [r1, r0, lsl #2]
   1169c:	str	r1, [r2]
   116a0:	movw	r1, #38012	; 0x947c
   116a4:	movw	r2, #41304	; 0xa158
   116a8:	movt	r1, #1
   116ac:	movt	r2, #2
   116b0:	ldr	r1, [r1, r0, lsl #2]
   116b4:	str	r1, [r2]
   116b8:	movw	r1, #38076	; 0x94bc
   116bc:	movw	r2, #41312	; 0xa160
   116c0:	movt	r1, #1
   116c4:	movt	r2, #2
   116c8:	ldr	r1, [r1, r0, lsl #2]
   116cc:	str	r1, [r2]
   116d0:	movw	r1, #38108	; 0x94dc
   116d4:	movw	r2, #41316	; 0xa164
   116d8:	movt	r1, #1
   116dc:	movt	r2, #2
   116e0:	ldr	r1, [r1, r0, lsl #2]
   116e4:	str	r1, [r2]
   116e8:	movw	r1, #38140	; 0x94fc
   116ec:	movt	r1, #1
   116f0:	ldr	r0, [r1, r0, lsl #2]
   116f4:	movw	r1, #41320	; 0xa168
   116f8:	movt	r1, #2
   116fc:	str	r0, [r1]
   11700:	ldr	r0, [r6]
   11704:	sub	r1, r5, r0
   11708:	cmp	r1, #2
   1170c:	blt	117e4 <__assert_fail@plt+0x75c>
   11710:	movw	r1, #36650	; 0x8f2a
   11714:	mov	r0, #0
   11718:	mov	r2, #5
   1171c:	movt	r1, #1
   11720:	bl	10eb4 <dcgettext@plt>
   11724:	mov	r5, r0
   11728:	ldr	r0, [r6]
   1172c:	add	r0, r4, r0, lsl #2
   11730:	ldr	r0, [r0, #4]
   11734:	bl	15c8c <__assert_fail@plt+0x4c04>
   11738:	mov	r3, r0
   1173c:	mov	r0, #0
   11740:	mov	r1, #0
   11744:	mov	r2, r5
   11748:	bl	10f20 <error@plt>
   1174c:	mov	r0, #1
   11750:	bl	11184 <__assert_fail@plt+0xfc>
   11754:	movw	r0, #41192	; 0xa0e8
   11758:	movw	r2, #36615	; 0x8f07
   1175c:	mov	r1, #0
   11760:	movw	r7, #36599	; 0x8ef7
   11764:	movt	r0, #2
   11768:	movt	r2, #1
   1176c:	str	r1, [sp, #8]
   11770:	movw	r1, #36524	; 0x8eac
   11774:	movt	r7, #1
   11778:	movt	r1, #1
   1177c:	ldr	r3, [r0]
   11780:	movw	r0, #41292	; 0xa14c
   11784:	str	r2, [sp, #4]
   11788:	movw	r2, #36585	; 0x8ee9
   1178c:	str	r7, [sp]
   11790:	movt	r0, #2
   11794:	movt	r2, #1
   11798:	ldr	r0, [r0]
   1179c:	bl	1625c <__assert_fail@plt+0x51d4>
   117a0:	mov	r0, #0
   117a4:	bl	10f74 <exit@plt>
   117a8:	mov	r0, #0
   117ac:	bl	11184 <__assert_fail@plt+0xfc>
   117b0:	mov	r0, #1
   117b4:	bl	11184 <__assert_fail@plt+0xfc>
   117b8:	movw	r1, #36628	; 0x8f14
   117bc:	mov	r0, #0
   117c0:	mov	r2, #5
   117c4:	movt	r1, #1
   117c8:	bl	10eb4 <dcgettext@plt>
   117cc:	mov	r2, r0
   117d0:	mov	r0, #0
   117d4:	mov	r1, #0
   117d8:	bl	10f20 <error@plt>
   117dc:	mov	r0, #1
   117e0:	bl	11184 <__assert_fail@plt+0xfc>
   117e4:	cmp	r0, r5
   117e8:	bge	117f4 <__assert_fail@plt+0x76c>
   117ec:	ldr	r4, [r4, r0, lsl #2]
   117f0:	b	117fc <__assert_fail@plt+0x774>
   117f4:	movw	r4, #38877	; 0x97dd
   117f8:	movt	r4, #1
   117fc:	movw	r1, #38877	; 0x97dd
   11800:	mov	r0, r4
   11804:	movt	r1, #1
   11808:	bl	10e48 <strcmp@plt>
   1180c:	cmp	r0, #0
   11810:	bne	11824 <__assert_fail@plt+0x79c>
   11814:	movw	r0, #41288	; 0xa148
   11818:	movt	r0, #2
   1181c:	ldr	r5, [r0]
   11820:	b	11870 <__assert_fail@plt+0x7e8>
   11824:	movw	r1, #36667	; 0x8f3b
   11828:	mov	r0, r4
   1182c:	movt	r1, #1
   11830:	bl	1104c <fopen64@plt>
   11834:	mov	r5, r0
   11838:	cmp	r0, #0
   1183c:	bne	11870 <__assert_fail@plt+0x7e8>
   11840:	bl	10fa4 <__errno_location@plt>
   11844:	ldr	r5, [r0]
   11848:	mov	r0, #0
   1184c:	mov	r1, #3
   11850:	mov	r2, r4
   11854:	bl	159e0 <__assert_fail@plt+0x4958>
   11858:	movw	r2, #36564	; 0x8ed4
   1185c:	mov	r3, r0
   11860:	mov	r0, #1
   11864:	mov	r1, r5
   11868:	movt	r2, #1
   1186c:	bl	10f20 <error@plt>
   11870:	mov	r0, r5
   11874:	mov	r1, #2
   11878:	bl	13e34 <__assert_fail@plt+0x2dac>
   1187c:	movw	r0, #41292	; 0xa14c
   11880:	movt	r0, #2
   11884:	ldr	r2, [r0]
   11888:	ldr	r0, [sp, #20]
   1188c:	tst	r0, #1
   11890:	beq	118a8 <__assert_fail@plt+0x820>
   11894:	ldr	r0, [sp, #16]
   11898:	mov	r1, r4
   1189c:	and	r3, r0, #1
   118a0:	mov	r0, r5
   118a4:	bl	1259c <__assert_fail@plt+0x1514>
   118a8:	mov	r0, r5
   118ac:	mov	r1, r4
   118b0:	mov	r3, r9
   118b4:	bl	127fc <__assert_fail@plt+0x1774>
   118b8:	movw	r1, #36567	; 0x8ed7
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	10eb4 <dcgettext@plt>
   118cc:	mov	r4, r0
   118d0:	movw	r0, #41296	; 0xa150
   118d4:	movt	r0, #2
   118d8:	ldr	r0, [r0]
   118dc:	bl	15c8c <__assert_fail@plt+0x4c04>
   118e0:	movw	r2, #36560	; 0x8ed0
   118e4:	str	r0, [sp]
   118e8:	mov	r0, #1
   118ec:	mov	r1, #0
   118f0:	mov	r3, r4
   118f4:	movt	r2, #1
   118f8:	bl	10f20 <error@plt>
   118fc:	movw	r1, #21846	; 0x5556
   11900:	add	r0, r0, #2
   11904:	movt	r1, #21845	; 0x5555
   11908:	smmul	r0, r0, r1
   1190c:	add	r0, r0, r0, lsr #31
   11910:	lsl	r0, r0, #2
   11914:	bx	lr
   11918:	add	r0, r0, #4
   1191c:	b	135a4 <__assert_fail@plt+0x251c>
   11920:	push	{r4, sl, fp, lr}
   11924:	add	fp, sp, #8
   11928:	sub	sp, sp, #8
   1192c:	mov	r4, r0
   11930:	ldr	r0, [fp, #8]
   11934:	str	r0, [sp]
   11938:	add	r0, r4, #4
   1193c:	bl	135b0 <__assert_fail@plt+0x2528>
   11940:	ldr	r1, [r4, #4]
   11944:	str	r1, [r4]
   11948:	sub	sp, fp, #8
   1194c:	pop	{r4, sl, fp, pc}
   11950:	mov	r1, r0
   11954:	mov	r0, #1
   11958:	cmp	r1, #46	; 0x2e
   1195c:	bgt	11974 <__assert_fail@plt+0x8ec>
   11960:	cmp	r1, #43	; 0x2b
   11964:	beq	1198c <__assert_fail@plt+0x904>
   11968:	cmp	r1, #45	; 0x2d
   1196c:	bne	11984 <__assert_fail@plt+0x8fc>
   11970:	bx	lr
   11974:	cmp	r1, #47	; 0x2f
   11978:	beq	1198c <__assert_fail@plt+0x904>
   1197c:	cmp	r1, #95	; 0x5f
   11980:	bxeq	lr
   11984:	mov	r0, r1
   11988:	b	13584 <__assert_fail@plt+0x24fc>
   1198c:	mov	r0, #0
   11990:	bx	lr
   11994:	push	{r4, r5, fp, lr}
   11998:	add	fp, sp, #8
   1199c:	mov	r5, r3
   119a0:	mov	r4, r2
   119a4:	bl	1332c <__assert_fail@plt+0x22a4>
   119a8:	cmp	r5, #0
   119ac:	beq	11a54 <__assert_fail@plt+0x9cc>
   119b0:	tst	r5, #1
   119b4:	bne	119c0 <__assert_fail@plt+0x938>
   119b8:	mov	r0, r5
   119bc:	b	119ec <__assert_fail@plt+0x964>
   119c0:	ldrb	r0, [r4]
   119c4:	cmp	r0, #43	; 0x2b
   119c8:	beq	119dc <__assert_fail@plt+0x954>
   119cc:	cmp	r0, #47	; 0x2f
   119d0:	bne	119e4 <__assert_fail@plt+0x95c>
   119d4:	mov	r0, #95	; 0x5f
   119d8:	b	119e0 <__assert_fail@plt+0x958>
   119dc:	mov	r0, #45	; 0x2d
   119e0:	strb	r0, [r4]
   119e4:	sub	r0, r5, #1
   119e8:	add	r4, r4, #1
   119ec:	cmp	r5, #1
   119f0:	popeq	{r4, r5, fp, pc}
   119f4:	add	r1, r4, #1
   119f8:	b	11a10 <__assert_fail@plt+0x988>
   119fc:	mov	r2, #45	; 0x2d
   11a00:	strb	r2, [r1]
   11a04:	add	r1, r1, #2
   11a08:	cmp	r0, #0
   11a0c:	beq	11a54 <__assert_fail@plt+0x9cc>
   11a10:	ldrb	r2, [r1, #-1]
   11a14:	cmp	r2, #43	; 0x2b
   11a18:	beq	11a2c <__assert_fail@plt+0x9a4>
   11a1c:	cmp	r2, #47	; 0x2f
   11a20:	bne	11a34 <__assert_fail@plt+0x9ac>
   11a24:	mov	r2, #95	; 0x5f
   11a28:	b	11a30 <__assert_fail@plt+0x9a8>
   11a2c:	mov	r2, #45	; 0x2d
   11a30:	strb	r2, [r1, #-1]
   11a34:	ldrb	r2, [r1]
   11a38:	sub	r0, r0, #2
   11a3c:	cmp	r2, #43	; 0x2b
   11a40:	beq	119fc <__assert_fail@plt+0x974>
   11a44:	cmp	r2, #47	; 0x2f
   11a48:	bne	11a04 <__assert_fail@plt+0x97c>
   11a4c:	mov	r2, #95	; 0x5f
   11a50:	b	11a00 <__assert_fail@plt+0x978>
   11a54:	pop	{r4, r5, fp, pc}
   11a58:	push	{r4, sl, fp, lr}
   11a5c:	add	fp, sp, #8
   11a60:	mov	r4, r0
   11a64:	add	r0, r0, #4
   11a68:	bl	135a4 <__assert_fail@plt+0x251c>
   11a6c:	movw	r0, #4200	; 0x1068
   11a70:	str	r0, [r4, #20]
   11a74:	movw	r0, #4200	; 0x1068
   11a78:	bl	164c0 <__assert_fail@plt+0x5438>
   11a7c:	str	r0, [r4, #16]
   11a80:	pop	{r4, sl, fp, pc}
   11a84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a88:	add	fp, sp, #24
   11a8c:	sub	sp, sp, #8
   11a90:	mov	r4, r0
   11a94:	ldr	r0, [r0, #20]
   11a98:	mov	r5, r3
   11a9c:	mov	r6, r2
   11aa0:	mov	r7, r1
   11aa4:	cmp	r0, r2
   11aa8:	bge	11ac8 <__assert_fail@plt+0xa40>
   11aac:	lsl	r1, r6, #1
   11ab0:	mov	r2, #1
   11ab4:	str	r1, [r4, #20]
   11ab8:	ldr	r0, [r4, #16]
   11abc:	bl	16454 <__assert_fail@plt+0x53cc>
   11ac0:	str	r0, [r4, #16]
   11ac4:	b	11acc <__assert_fail@plt+0xa44>
   11ac8:	ldr	r0, [r4, #16]
   11acc:	ldr	r8, [fp, #8]
   11ad0:	mov	r1, r7
   11ad4:	mov	r2, r6
   11ad8:	bl	10e90 <memcpy@plt>
   11adc:	ldr	r1, [r4, #16]
   11ae0:	cmp	r6, #0
   11ae4:	beq	11b50 <__assert_fail@plt+0xac8>
   11ae8:	mov	r0, r6
   11aec:	b	11b0c <__assert_fail@plt+0xa84>
   11af0:	cmp	r2, #95	; 0x5f
   11af4:	bne	11b30 <__assert_fail@plt+0xaa8>
   11af8:	mov	r3, #47	; 0x2f
   11afc:	strb	r3, [r1]
   11b00:	subs	r0, r0, #1
   11b04:	add	r1, r1, #1
   11b08:	beq	11b4c <__assert_fail@plt+0xac4>
   11b0c:	ldrb	r2, [r1]
   11b10:	cmp	r2, #46	; 0x2e
   11b14:	bgt	11af0 <__assert_fail@plt+0xa68>
   11b18:	mov	r3, #43	; 0x2b
   11b1c:	cmp	r2, #45	; 0x2d
   11b20:	beq	11afc <__assert_fail@plt+0xa74>
   11b24:	cmp	r2, #43	; 0x2b
   11b28:	bne	11b00 <__assert_fail@plt+0xa78>
   11b2c:	b	11b38 <__assert_fail@plt+0xab0>
   11b30:	cmp	r2, #47	; 0x2f
   11b34:	bne	11b00 <__assert_fail@plt+0xa78>
   11b38:	mov	r0, #0
   11b3c:	str	r0, [r8]
   11b40:	mov	r0, #0
   11b44:	sub	sp, fp, #24
   11b48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b4c:	ldr	r1, [r4, #16]
   11b50:	add	r0, r4, #4
   11b54:	mov	r2, r6
   11b58:	mov	r3, r5
   11b5c:	str	r8, [sp]
   11b60:	bl	135b0 <__assert_fail@plt+0x2528>
   11b64:	ldr	r1, [r4, #4]
   11b68:	str	r1, [r4]
   11b6c:	sub	sp, fp, #24
   11b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b74:	movw	r1, #26215	; 0x6667
   11b78:	add	r0, r0, #4
   11b7c:	movt	r1, #26214	; 0x6666
   11b80:	smmul	r0, r0, r1
   11b84:	lsr	r1, r0, #1
   11b88:	add	r0, r1, r0, lsr #31
   11b8c:	lsl	r0, r0, #3
   11b90:	bx	lr
   11b94:	add	r0, r0, #4
   11b98:	b	12e00 <__assert_fail@plt+0x1d78>
   11b9c:	push	{r4, sl, fp, lr}
   11ba0:	add	fp, sp, #8
   11ba4:	sub	sp, sp, #8
   11ba8:	mov	r4, r0
   11bac:	ldr	r0, [fp, #8]
   11bb0:	str	r0, [sp]
   11bb4:	add	r0, r4, #4
   11bb8:	bl	12e0c <__assert_fail@plt+0x1d84>
   11bbc:	ldr	r1, [r4, #4]
   11bc0:	str	r1, [r4]
   11bc4:	sub	sp, fp, #8
   11bc8:	pop	{r4, sl, fp, pc}
   11bcc:	sub	r1, r0, #65	; 0x41
   11bd0:	sub	r0, r0, #48	; 0x30
   11bd4:	mov	r2, #0
   11bd8:	uxtb	r1, r1
   11bdc:	uxtb	r0, r0
   11be0:	cmp	r1, #22
   11be4:	mov	r1, #0
   11be8:	movwcc	r1, #1
   11bec:	cmp	r0, #10
   11bf0:	movwcc	r2, #1
   11bf4:	orr	r0, r2, r1
   11bf8:	bx	lr
   11bfc:	push	{r4, r5, fp, lr}
   11c00:	add	fp, sp, #8
   11c04:	mov	r4, r3
   11c08:	mov	r5, r2
   11c0c:	bl	12b0c <__assert_fail@plt+0x1a84>
   11c10:	cmp	r4, #0
   11c14:	popeq	{r4, r5, fp, pc}
   11c18:	movw	r0, #37752	; 0x9378
   11c1c:	movt	r0, #1
   11c20:	ldrb	r1, [r5]
   11c24:	sub	r2, r1, #50	; 0x32
   11c28:	uxtb	r2, r2
   11c2c:	cmp	r2, #41	; 0x29
   11c30:	bcs	11c4c <__assert_fail@plt+0xbc4>
   11c34:	add	r1, r1, r0
   11c38:	subs	r4, r4, #1
   11c3c:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11c40:	strb	r1, [r5], #1
   11c44:	bne	11c20 <__assert_fail@plt+0xb98>
   11c48:	pop	{r4, r5, fp, pc}
   11c4c:	movw	r0, #37217	; 0x9161
   11c50:	movw	r1, #37242	; 0x917a
   11c54:	movw	r3, #37255	; 0x9187
   11c58:	mov	r2, #452	; 0x1c4
   11c5c:	movt	r0, #1
   11c60:	movt	r1, #1
   11c64:	movt	r3, #1
   11c68:	bl	11088 <__assert_fail@plt>
   11c6c:	push	{r4, sl, fp, lr}
   11c70:	add	fp, sp, #8
   11c74:	mov	r4, r0
   11c78:	add	r0, r0, #4
   11c7c:	bl	12e00 <__assert_fail@plt+0x1d78>
   11c80:	movw	r0, #4200	; 0x1068
   11c84:	str	r0, [r4, #20]
   11c88:	movw	r0, #4200	; 0x1068
   11c8c:	bl	164c0 <__assert_fail@plt+0x5438>
   11c90:	str	r0, [r4, #16]
   11c94:	pop	{r4, sl, fp, pc}
   11c98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c9c:	add	fp, sp, #24
   11ca0:	sub	sp, sp, #8
   11ca4:	mov	r4, r0
   11ca8:	ldr	r0, [r0, #20]
   11cac:	mov	r8, r3
   11cb0:	mov	r6, r2
   11cb4:	mov	r7, r1
   11cb8:	cmp	r0, r2
   11cbc:	bge	11ce0 <__assert_fail@plt+0xc58>
   11cc0:	lsl	r1, r6, #1
   11cc4:	mov	r2, #1
   11cc8:	str	r1, [r4, #20]
   11ccc:	ldr	r0, [r4, #16]
   11cd0:	bl	16454 <__assert_fail@plt+0x53cc>
   11cd4:	mov	r1, r0
   11cd8:	str	r0, [r4, #16]
   11cdc:	b	11ce4 <__assert_fail@plt+0xc5c>
   11ce0:	ldr	r1, [r4, #16]
   11ce4:	ldr	ip, [fp, #8]
   11ce8:	cmp	r6, #0
   11cec:	beq	11d44 <__assert_fail@plt+0xcbc>
   11cf0:	movw	r2, #37793	; 0x93a1
   11cf4:	mov	r3, r6
   11cf8:	movt	r2, #1
   11cfc:	b	11d10 <__assert_fail@plt+0xc88>
   11d00:	strb	r0, [r1], #1
   11d04:	add	r7, r7, #1
   11d08:	cmp	r3, #0
   11d0c:	beq	11d40 <__assert_fail@plt+0xcb8>
   11d10:	ldrb	r0, [r7]
   11d14:	sub	r3, r3, #1
   11d18:	sub	r5, r0, #48	; 0x30
   11d1c:	uxtb	r5, r5
   11d20:	cmp	r5, #10
   11d24:	subcs	r5, r0, #65	; 0x41
   11d28:	uxtbcs	r5, r5
   11d2c:	cmpcs	r5, #21
   11d30:	bhi	11d00 <__assert_fail@plt+0xc78>
   11d34:	add	r0, r0, r2
   11d38:	ldrb	r0, [r0, #-48]	; 0xffffffd0
   11d3c:	b	11d00 <__assert_fail@plt+0xc78>
   11d40:	ldr	r1, [r4, #16]
   11d44:	add	r0, r4, #4
   11d48:	mov	r2, r6
   11d4c:	mov	r3, r8
   11d50:	str	ip, [sp]
   11d54:	bl	12e0c <__assert_fail@plt+0x1d84>
   11d58:	ldr	r1, [r4, #4]
   11d5c:	str	r1, [r4]
   11d60:	sub	sp, fp, #24
   11d64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d68:	lsl	r0, r0, #1
   11d6c:	bx	lr
   11d70:	sub	r1, r0, #65	; 0x41
   11d74:	sub	r0, r0, #48	; 0x30
   11d78:	mov	r2, #0
   11d7c:	uxtb	r1, r1
   11d80:	uxtb	r0, r0
   11d84:	cmp	r1, #6
   11d88:	mov	r1, #0
   11d8c:	movwcc	r1, #1
   11d90:	cmp	r0, #10
   11d94:	movwcc	r2, #1
   11d98:	orr	r0, r2, r1
   11d9c:	bx	lr
   11da0:	push	{fp, lr}
   11da4:	mov	fp, sp
   11da8:	cmp	r1, #0
   11dac:	popeq	{fp, pc}
   11db0:	movw	ip, #38172	; 0x951c
   11db4:	movt	ip, #1
   11db8:	ldrb	lr, [r0], #1
   11dbc:	subs	r1, r1, #1
   11dc0:	ldrb	r3, [ip, lr, lsr #4]
   11dc4:	strb	r3, [r2]
   11dc8:	and	r3, lr, #15
   11dcc:	ldrb	r3, [ip, r3]
   11dd0:	strb	r3, [r2, #1]
   11dd4:	add	r2, r2, #2
   11dd8:	bne	11db8 <__assert_fail@plt+0xd30>
   11ddc:	pop	{fp, pc}
   11de0:	push	{r4, sl, fp, lr}
   11de4:	add	fp, sp, #8
   11de8:	mov	r4, r0
   11dec:	movw	r0, #4200	; 0x1068
   11df0:	str	r0, [r4, #20]
   11df4:	movw	r0, #4200	; 0x1068
   11df8:	bl	164c0 <__assert_fail@plt+0x5438>
   11dfc:	str	r0, [r4, #16]
   11e00:	mov	r0, #0
   11e04:	strb	r0, [r4, #5]
   11e08:	mov	r0, #1
   11e0c:	str	r0, [r4]
   11e10:	pop	{r4, sl, fp, pc}
   11e14:	push	{r4, r5, fp, lr}
   11e18:	add	fp, sp, #8
   11e1c:	ldr	ip, [fp, #8]
   11e20:	mov	r4, #0
   11e24:	cmp	r2, #0
   11e28:	str	r4, [ip]
   11e2c:	beq	11ec0 <__assert_fail@plt+0xe38>
   11e30:	cmp	r2, #0
   11e34:	beq	11eb8 <__assert_fail@plt+0xe30>
   11e38:	ldrb	lr, [r1], #1
   11e3c:	sub	r2, r2, #1
   11e40:	cmp	lr, #10
   11e44:	beq	11e30 <__assert_fail@plt+0xda8>
   11e48:	sub	r4, lr, #48	; 0x30
   11e4c:	uxtb	r5, r4
   11e50:	mvn	r4, #47	; 0x2f
   11e54:	cmp	r5, #10
   11e58:	bcc	11e70 <__assert_fail@plt+0xde8>
   11e5c:	sub	r4, lr, #65	; 0x41
   11e60:	uxtb	r5, r4
   11e64:	mvn	r4, #54	; 0x36
   11e68:	cmp	r5, #5
   11e6c:	bhi	11ed0 <__assert_fail@plt+0xe48>
   11e70:	ldrb	r5, [r0, #5]
   11e74:	add	r4, r4, lr
   11e78:	cmp	r5, #0
   11e7c:	beq	11ea0 <__assert_fail@plt+0xe18>
   11e80:	ldrb	r5, [r0, #4]
   11e84:	add	r5, r4, r5, lsl #4
   11e88:	strb	r5, [r3], #1
   11e8c:	ldr	r5, [ip]
   11e90:	add	r5, r5, #1
   11e94:	str	r5, [ip]
   11e98:	ldrb	r4, [r0, #5]
   11e9c:	b	11ea8 <__assert_fail@plt+0xe20>
   11ea0:	strb	r4, [r0, #4]
   11ea4:	mov	r4, #0
   11ea8:	eor	r5, r4, #1
   11eac:	strb	r5, [r0, #5]
   11eb0:	cmp	r2, #0
   11eb4:	bne	11e38 <__assert_fail@plt+0xdb0>
   11eb8:	mov	r0, #1
   11ebc:	pop	{r4, r5, fp, pc}
   11ec0:	ldrb	r0, [r0, #5]
   11ec4:	clz	r0, r0
   11ec8:	lsr	r0, r0, #5
   11ecc:	pop	{r4, r5, fp, pc}
   11ed0:	mov	r0, #0
   11ed4:	pop	{r4, r5, fp, pc}
   11ed8:	lsl	r0, r0, #3
   11edc:	bx	lr
   11ee0:	orr	r0, r0, #1
   11ee4:	sub	r0, r0, #49	; 0x31
   11ee8:	clz	r0, r0
   11eec:	lsr	r0, r0, #5
   11ef0:	bx	lr
   11ef4:	push	{fp, lr}
   11ef8:	mov	fp, sp
   11efc:	cmp	r1, #0
   11f00:	popeq	{fp, pc}
   11f04:	mov	ip, #24
   11f08:	ldrb	lr, [r0], #1
   11f0c:	mov	r3, lr
   11f10:	tst	lr, #2
   11f14:	bfi	r3, ip, #1, #31
   11f18:	strb	r3, [r2, #7]
   11f1c:	mov	r3, #49	; 0x31
   11f20:	movweq	r3, #48	; 0x30
   11f24:	tst	lr, #4
   11f28:	strb	r3, [r2, #6]
   11f2c:	mov	r3, #49	; 0x31
   11f30:	movweq	r3, #48	; 0x30
   11f34:	tst	lr, #8
   11f38:	strb	r3, [r2, #5]
   11f3c:	mov	r3, #49	; 0x31
   11f40:	movweq	r3, #48	; 0x30
   11f44:	tst	lr, #16
   11f48:	strb	r3, [r2, #4]
   11f4c:	mov	r3, #49	; 0x31
   11f50:	movweq	r3, #48	; 0x30
   11f54:	tst	lr, #32
   11f58:	strb	r3, [r2, #3]
   11f5c:	mov	r3, #49	; 0x31
   11f60:	movweq	r3, #48	; 0x30
   11f64:	tst	lr, #64	; 0x40
   11f68:	strb	r3, [r2, #2]
   11f6c:	mov	r3, #49	; 0x31
   11f70:	movweq	r3, #48	; 0x30
   11f74:	strb	r3, [r2, #1]
   11f78:	sxtb	r3, lr
   11f7c:	cmn	r3, #1
   11f80:	mov	r3, #49	; 0x31
   11f84:	movwgt	r3, #48	; 0x30
   11f88:	subs	r1, r1, #1
   11f8c:	strb	r3, [r2]
   11f90:	add	r2, r2, #8
   11f94:	bne	11f08 <__assert_fail@plt+0xe80>
   11f98:	pop	{fp, pc}
   11f9c:	push	{r4, sl, fp, lr}
   11fa0:	add	fp, sp, #8
   11fa4:	mov	r4, r0
   11fa8:	movw	r0, #4200	; 0x1068
   11fac:	str	r0, [r4, #20]
   11fb0:	movw	r0, #4200	; 0x1068
   11fb4:	bl	164c0 <__assert_fail@plt+0x5438>
   11fb8:	str	r0, [r4, #16]
   11fbc:	mov	r0, #0
   11fc0:	strb	r0, [r4, #4]
   11fc4:	str	r0, [r4]
   11fc8:	pop	{r4, sl, fp, pc}
   11fcc:	push	{r4, r5, r6, sl, fp, lr}
   11fd0:	add	fp, sp, #16
   11fd4:	ldr	ip, [fp, #8]
   11fd8:	mov	lr, #0
   11fdc:	cmp	r2, #0
   11fe0:	str	lr, [ip]
   11fe4:	beq	1207c <__assert_fail@plt+0xff4>
   11fe8:	add	r1, r1, #1
   11fec:	rsb	r4, r2, #1
   11ff0:	ldrb	r2, [r1, #-1]
   11ff4:	cmp	r2, #10
   11ff8:	bne	12010 <__assert_fail@plt+0xf88>
   11ffc:	add	r4, r4, #1
   12000:	add	r1, r1, #1
   12004:	cmp	r4, #1
   12008:	bne	11ff0 <__assert_fail@plt+0xf68>
   1200c:	b	12074 <__assert_fail@plt+0xfec>
   12010:	orr	r5, r2, #1
   12014:	cmp	r5, #49	; 0x31
   12018:	bne	1208c <__assert_fail@plt+0x1004>
   1201c:	ldr	r5, [r0]
   12020:	sub	r2, r2, #49	; 0x31
   12024:	clz	r2, r2
   12028:	lsr	r2, r2, #5
   1202c:	cmp	r5, #0
   12030:	moveq	r5, #8
   12034:	streq	r5, [r0]
   12038:	subs	r5, r5, #1
   1203c:	str	r5, [r0]
   12040:	ldrb	r6, [r0, #4]
   12044:	orr	r2, r6, r2, lsl r5
   12048:	strb	r2, [r0, #4]
   1204c:	bne	12068 <__assert_fail@plt+0xfe0>
   12050:	strb	r2, [r3], #1
   12054:	strb	lr, [r0, #4]
   12058:	ldr	r2, [ip]
   1205c:	add	r2, r2, #1
   12060:	str	r2, [ip]
   12064:	str	lr, [r0]
   12068:	rsb	r2, r4, #0
   1206c:	cmp	r4, #0
   12070:	bne	11fe8 <__assert_fail@plt+0xf60>
   12074:	mov	r0, #1
   12078:	pop	{r4, r5, r6, sl, fp, pc}
   1207c:	ldr	r0, [r0]
   12080:	clz	r0, r0
   12084:	lsr	r0, r0, #5
   12088:	pop	{r4, r5, r6, sl, fp, pc}
   1208c:	mov	r0, #0
   12090:	pop	{r4, r5, r6, sl, fp, pc}
   12094:	push	{r4, sl, fp, lr}
   12098:	add	fp, sp, #8
   1209c:	cmp	r1, #0
   120a0:	popeq	{r4, sl, fp, pc}
   120a4:	mov	ip, #48	; 0x30
   120a8:	mov	lr, #24
   120ac:	ldrb	r3, [r0], #1
   120b0:	subs	r1, r1, #1
   120b4:	orr	r4, ip, r3, lsr #7
   120b8:	strb	r4, [r2, #7]
   120bc:	mov	r4, r3
   120c0:	bfi	r4, lr, #1, #31
   120c4:	strb	r4, [r2]
   120c8:	lsr	r4, r3, #6
   120cc:	bfi	r4, lr, #1, #31
   120d0:	strb	r4, [r2, #6]
   120d4:	lsr	r4, r3, #5
   120d8:	bfi	r4, lr, #1, #31
   120dc:	strb	r4, [r2, #5]
   120e0:	lsr	r4, r3, #4
   120e4:	bfi	r4, lr, #1, #31
   120e8:	strb	r4, [r2, #4]
   120ec:	lsr	r4, r3, #3
   120f0:	bfi	r4, lr, #1, #31
   120f4:	strb	r4, [r2, #3]
   120f8:	lsr	r4, r3, #2
   120fc:	lsr	r3, r3, #1
   12100:	bfi	r4, lr, #1, #31
   12104:	bfi	r3, lr, #1, #31
   12108:	strb	r4, [r2, #2]
   1210c:	strb	r3, [r2, #1]
   12110:	add	r2, r2, #8
   12114:	bne	120ac <__assert_fail@plt+0x1024>
   12118:	pop	{r4, sl, fp, pc}
   1211c:	push	{r4, r5, r6, sl, fp, lr}
   12120:	add	fp, sp, #16
   12124:	ldr	ip, [fp, #8]
   12128:	mov	lr, #0
   1212c:	cmp	r2, #0
   12130:	str	lr, [ip]
   12134:	beq	121c4 <__assert_fail@plt+0x113c>
   12138:	add	r1, r1, #1
   1213c:	rsb	r4, r2, #1
   12140:	ldrb	r2, [r1, #-1]
   12144:	cmp	r2, #10
   12148:	bne	12160 <__assert_fail@plt+0x10d8>
   1214c:	add	r4, r4, #1
   12150:	add	r1, r1, #1
   12154:	cmp	r4, #1
   12158:	bne	12140 <__assert_fail@plt+0x10b8>
   1215c:	b	121bc <__assert_fail@plt+0x1134>
   12160:	orr	r5, r2, #1
   12164:	cmp	r5, #49	; 0x31
   12168:	bne	121d4 <__assert_fail@plt+0x114c>
   1216c:	ldr	r5, [r0]
   12170:	ldrb	r6, [r0, #4]
   12174:	sub	r2, r2, #49	; 0x31
   12178:	clz	r2, r2
   1217c:	lsr	r2, r2, #5
   12180:	orr	r2, r6, r2, lsl r5
   12184:	add	r5, r5, #1
   12188:	cmp	r5, #8
   1218c:	strb	r2, [r0, #4]
   12190:	str	r5, [r0]
   12194:	bne	121b0 <__assert_fail@plt+0x1128>
   12198:	strb	r2, [r3], #1
   1219c:	strb	lr, [r0, #4]
   121a0:	ldr	r2, [ip]
   121a4:	add	r2, r2, #1
   121a8:	str	r2, [ip]
   121ac:	str	lr, [r0]
   121b0:	rsb	r2, r4, #0
   121b4:	cmp	r4, #0
   121b8:	bne	12138 <__assert_fail@plt+0x10b0>
   121bc:	mov	r0, #1
   121c0:	pop	{r4, r5, r6, sl, fp, pc}
   121c4:	ldr	r0, [r0]
   121c8:	clz	r0, r0
   121cc:	lsr	r0, r0, #5
   121d0:	pop	{r4, r5, r6, sl, fp, pc}
   121d4:	mov	r0, #0
   121d8:	pop	{r4, r5, r6, sl, fp, pc}
   121dc:	add	r0, r0, r0, lsl #2
   121e0:	asr	r1, r0, #31
   121e4:	add	r0, r0, r1, lsr #30
   121e8:	asr	r0, r0, #2
   121ec:	bx	lr
   121f0:	push	{r4, sl, fp, lr}
   121f4:	add	fp, sp, #8
   121f8:	mov	r4, r0
   121fc:	bl	13a04 <__assert_fail@plt+0x297c>
   12200:	mov	r1, r0
   12204:	mov	r0, #1
   12208:	cmp	r1, #0
   1220c:	popne	{r4, sl, fp, pc}
   12210:	movw	r0, #37329	; 0x91d1
   12214:	mov	r1, r4
   12218:	mov	r2, #24
   1221c:	movt	r0, #1
   12220:	bl	10fec <memchr@plt>
   12224:	cmp	r0, #0
   12228:	movwne	r0, #1
   1222c:	pop	{r4, sl, fp, pc}
   12230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12234:	add	fp, sp, #28
   12238:	sub	sp, sp, #20
   1223c:	cmp	r1, #0
   12240:	beq	12404 <__assert_fail@plt+0x137c>
   12244:	mov	r8, r3
   12248:	mov	r4, r2
   1224c:	mov	r6, r1
   12250:	mov	r9, #0
   12254:	add	r3, sp, #16
   12258:	mov	r2, #0
   1225c:	b	1227c <__assert_fail@plt+0x11f4>
   12260:	ldr	r0, [sp, #12]
   12264:	add	r9, r9, #5
   12268:	add	r4, r4, #5
   1226c:	mov	r2, #0
   12270:	add	r3, sp, #16
   12274:	cmp	r6, #0
   12278:	beq	123fc <__assert_fail@plt+0x1374>
   1227c:	ldrb	r1, [r0], #1
   12280:	sub	r6, r6, #1
   12284:	strb	r1, [r3, r2]
   12288:	add	r2, r2, #1
   1228c:	cmp	r2, #4
   12290:	bne	12274 <__assert_fail@plt+0x11ec>
   12294:	str	r0, [sp, #12]
   12298:	ldr	r0, [sp, #16]
   1229c:	mov	r1, #0
   122a0:	mov	r2, #85	; 0x55
   122a4:	mov	r3, #0
   122a8:	rev	r7, r0
   122ac:	mov	r0, r7
   122b0:	bl	1873c <__assert_fail@plt+0x76b4>
   122b4:	mov	r5, r0
   122b8:	add	r0, r9, #4
   122bc:	mov	sl, r1
   122c0:	cmp	r0, r8
   122c4:	bge	122e0 <__assert_fail@plt+0x1258>
   122c8:	mov	r0, #85	; 0x55
   122cc:	movw	r1, #37834	; 0x93ca
   122d0:	mls	r0, r5, r0, r7
   122d4:	movt	r1, #1
   122d8:	ldrb	r0, [r1, r0]
   122dc:	strb	r0, [r4, #4]
   122e0:	mov	r0, r7
   122e4:	mov	r1, #0
   122e8:	movw	r2, #7225	; 0x1c39
   122ec:	mov	r3, #0
   122f0:	bl	1873c <__assert_fail@plt+0x76b4>
   122f4:	str	r0, [sp, #4]
   122f8:	add	r0, r9, #3
   122fc:	str	r1, [sp]
   12300:	cmp	r0, r8
   12304:	bge	1232c <__assert_fail@plt+0x12a4>
   12308:	mov	r0, r5
   1230c:	mov	r1, sl
   12310:	mov	r2, #85	; 0x55
   12314:	mov	r3, #0
   12318:	bl	1873c <__assert_fail@plt+0x76b4>
   1231c:	movw	r0, #37834	; 0x93ca
   12320:	movt	r0, #1
   12324:	ldrb	r0, [r0, r2]
   12328:	strb	r0, [r4, #3]
   1232c:	movw	r2, #24301	; 0x5eed
   12330:	mov	r0, r7
   12334:	mov	r1, #0
   12338:	mov	r3, #0
   1233c:	movt	r2, #9
   12340:	bl	1873c <__assert_fail@plt+0x76b4>
   12344:	mov	sl, r0
   12348:	add	r0, r9, #2
   1234c:	str	r1, [sp, #8]
   12350:	cmp	r0, r8
   12354:	bge	1237c <__assert_fail@plt+0x12f4>
   12358:	ldr	r0, [sp, #4]
   1235c:	ldr	r1, [sp]
   12360:	mov	r2, #85	; 0x55
   12364:	mov	r3, #0
   12368:	bl	1873c <__assert_fail@plt+0x76b4>
   1236c:	movw	r0, #37834	; 0x93ca
   12370:	movt	r0, #1
   12374:	ldrb	r0, [r0, r2]
   12378:	strb	r0, [r4, #2]
   1237c:	movw	r2, #33969	; 0x84b1
   12380:	mov	r0, r7
   12384:	mov	r1, #0
   12388:	mov	r3, #0
   1238c:	movt	r2, #796	; 0x31c
   12390:	bl	1873c <__assert_fail@plt+0x76b4>
   12394:	mov	r5, r0
   12398:	add	r0, r9, #1
   1239c:	mov	r7, r1
   123a0:	cmp	r0, r8
   123a4:	bge	123cc <__assert_fail@plt+0x1344>
   123a8:	ldr	r1, [sp, #8]
   123ac:	mov	r0, sl
   123b0:	mov	r2, #85	; 0x55
   123b4:	mov	r3, #0
   123b8:	bl	1873c <__assert_fail@plt+0x76b4>
   123bc:	movw	r0, #37834	; 0x93ca
   123c0:	movt	r0, #1
   123c4:	ldrb	r0, [r0, r2]
   123c8:	strb	r0, [r4, #1]
   123cc:	cmp	r9, r8
   123d0:	bge	12260 <__assert_fail@plt+0x11d8>
   123d4:	mov	r0, r5
   123d8:	mov	r1, r7
   123dc:	mov	r2, #85	; 0x55
   123e0:	mov	r3, #0
   123e4:	bl	1873c <__assert_fail@plt+0x76b4>
   123e8:	movw	r0, #37834	; 0x93ca
   123ec:	movt	r0, #1
   123f0:	ldrb	r0, [r0, r2]
   123f4:	strb	r0, [r4]
   123f8:	b	12260 <__assert_fail@plt+0x11d8>
   123fc:	cmp	r2, #0
   12400:	bne	1240c <__assert_fail@plt+0x1384>
   12404:	sub	sp, fp, #28
   12408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1240c:	movw	r1, #37353	; 0x91e9
   12410:	mov	r0, #0
   12414:	mov	r2, #5
   12418:	movt	r1, #1
   1241c:	bl	10eb4 <dcgettext@plt>
   12420:	mov	r2, r0
   12424:	mov	r0, #1
   12428:	mov	r1, #0
   1242c:	bl	10f20 <error@plt>
   12430:	push	{r4, sl, fp, lr}
   12434:	add	fp, sp, #8
   12438:	mov	r4, r0
   1243c:	movw	r0, #4200	; 0x1068
   12440:	str	r0, [r4, #20]
   12444:	movw	r0, #4200	; 0x1068
   12448:	bl	164c0 <__assert_fail@plt+0x5438>
   1244c:	str	r0, [r4, #16]
   12450:	mov	r1, #1
   12454:	mov	r0, #0
   12458:	str	r1, [r4]
   1245c:	str	r0, [r4, #4]
   12460:	pop	{r4, sl, fp, pc}
   12464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12468:	add	fp, sp, #28
   1246c:	ldr	lr, [fp, #8]
   12470:	mov	ip, #0
   12474:	cmp	r2, #0
   12478:	str	ip, [lr]
   1247c:	beq	12588 <__assert_fail@plt+0x1500>
   12480:	movw	r9, #37919	; 0x941f
   12484:	movw	r8, #33969	; 0x84b1
   12488:	movt	r9, #1
   1248c:	movt	r8, #796	; 0x31c
   12490:	add	r1, r1, #1
   12494:	rsb	r6, r2, #1
   12498:	ldrb	r2, [r1, #-1]
   1249c:	cmp	r2, #10
   124a0:	bne	124b8 <__assert_fail@plt+0x1430>
   124a4:	add	r6, r6, #1
   124a8:	add	r1, r1, #1
   124ac:	cmp	r6, #1
   124b0:	bne	12498 <__assert_fail@plt+0x1410>
   124b4:	b	12574 <__assert_fail@plt+0x14ec>
   124b8:	sub	r7, r2, #33	; 0x21
   124bc:	mov	ip, #0
   124c0:	uxtb	r7, r7
   124c4:	cmp	r7, #92	; 0x5c
   124c8:	bhi	12580 <__assert_fail@plt+0x14f8>
   124cc:	add	r2, r2, r9
   124d0:	ldrsb	r2, [r2, #-33]	; 0xffffffdf
   124d4:	cmp	r2, #0
   124d8:	bmi	12580 <__assert_fail@plt+0x14f8>
   124dc:	mov	r4, r0
   124e0:	ldr	r5, [r4, #4]!
   124e4:	mov	r7, r4
   124e8:	add	ip, r5, #1
   124ec:	str	ip, [r7], r5
   124f0:	strb	r2, [r7, #4]
   124f4:	ldr	r7, [r4]
   124f8:	cmp	r7, #5
   124fc:	bne	12564 <__assert_fail@plt+0x14dc>
   12500:	ldrb	r2, [r0, #9]
   12504:	movw	r4, #24301	; 0x5eed
   12508:	ldrb	r7, [r0, #10]
   1250c:	ldrb	r5, [r0, #11]
   12510:	ldrb	sl, [r0, #8]
   12514:	mov	ip, #0
   12518:	movt	r4, #9
   1251c:	mul	r2, r2, r4
   12520:	movw	r4, #7225	; 0x1c39
   12524:	smlabb	r2, r7, r4, r2
   12528:	mov	r7, #85	; 0x55
   1252c:	smlabb	r2, r5, r7, r2
   12530:	ldrb	r7, [r0, #12]
   12534:	mov	r5, #0
   12538:	add	r2, r2, r7
   1253c:	umlal	r2, r5, sl, r8
   12540:	tst	r5, #7
   12544:	bne	12580 <__assert_fail@plt+0x14f8>
   12548:	rev	r2, r2
   1254c:	mov	r7, #0
   12550:	str	r2, [r3], #4
   12554:	ldr	r2, [lr]
   12558:	add	r2, r2, #4
   1255c:	str	r2, [lr]
   12560:	str	r7, [r0, #4]
   12564:	rsb	r2, r6, #0
   12568:	cmp	r6, #0
   1256c:	bne	12490 <__assert_fail@plt+0x1408>
   12570:	b	12578 <__assert_fail@plt+0x14f0>
   12574:	ldr	r7, [r0, #4]
   12578:	mov	ip, #1
   1257c:	str	r7, [r0]
   12580:	mov	r0, ip
   12584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12588:	ldr	r0, [r0, #4]
   1258c:	cmp	r0, #1
   12590:	movwlt	ip, #1
   12594:	mov	r0, ip
   12598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1259c:	push	{fp, lr}
   125a0:	mov	fp, sp
   125a4:	sub	sp, sp, #48	; 0x30
   125a8:	mov	r8, r0
   125ac:	movw	r0, #41304	; 0xa158
   125b0:	stmib	sp, {r1, r2, r3}
   125b4:	movt	r0, #2
   125b8:	ldr	r1, [r0]
   125bc:	movw	r0, #4200	; 0x1068
   125c0:	blx	r1
   125c4:	bl	16490 <__assert_fail@plt+0x5408>
   125c8:	mov	r4, r0
   125cc:	movw	r0, #4200	; 0x1068
   125d0:	bl	16490 <__assert_fail@plt+0x5408>
   125d4:	mov	r9, r0
   125d8:	movw	r0, #41316	; 0xa164
   125dc:	mov	sl, #0
   125e0:	movt	r0, #2
   125e4:	str	sl, [sp, #40]	; 0x28
   125e8:	ldr	r1, [r0]
   125ec:	add	r0, sp, #24
   125f0:	blx	r1
   125f4:	str	r8, [sp, #16]
   125f8:	b	12608 <__assert_fail@plt+0x1580>
   125fc:	mov	sl, #0
   12600:	cmp	r0, #0
   12604:	bne	127f0 <__assert_fail@plt+0x1768>
   12608:	movw	r0, #41304	; 0xa158
   1260c:	movt	r0, #2
   12610:	ldr	r1, [r0]
   12614:	movw	r0, #4200	; 0x1068
   12618:	blx	r1
   1261c:	add	r5, r4, sl
   12620:	sub	r2, r0, sl
   12624:	mov	r1, #1
   12628:	mov	r3, r8
   1262c:	mov	r0, r5
   12630:	bl	11064 <fread_unlocked@plt>
   12634:	mov	r8, r0
   12638:	cmp	r0, #1
   1263c:	blt	126b0 <__assert_fail@plt+0x1628>
   12640:	ldr	r0, [sp, #12]
   12644:	cmp	r0, #0
   12648:	beq	126b0 <__assert_fail@plt+0x1628>
   1264c:	mov	r7, #0
   12650:	movw	r1, #41308	; 0xa15c
   12654:	add	r6, r7, sl
   12658:	movt	r1, #2
   1265c:	ldrb	r0, [r4, r6]
   12660:	ldr	r1, [r1]
   12664:	blx	r1
   12668:	cmp	r0, #0
   1266c:	bne	1267c <__assert_fail@plt+0x15f4>
   12670:	ldrb	r0, [r4, r6]
   12674:	cmp	r0, #61	; 0x3d
   12678:	bne	12694 <__assert_fail@plt+0x160c>
   1267c:	add	r7, r7, #1
   12680:	cmp	r8, #1
   12684:	blt	126b0 <__assert_fail@plt+0x1628>
   12688:	cmp	r7, r8
   1268c:	blt	12650 <__assert_fail@plt+0x15c8>
   12690:	b	126b0 <__assert_fail@plt+0x1628>
   12694:	sub	r8, r8, #1
   12698:	add	r0, r5, r7
   1269c:	sub	r2, r8, r7
   126a0:	add	r1, r0, #1
   126a4:	bl	10e6c <memmove@plt>
   126a8:	cmp	r8, #1
   126ac:	bge	12688 <__assert_fail@plt+0x1600>
   126b0:	ldr	r0, [sp, #16]
   126b4:	ldrb	r0, [r0]
   126b8:	tst	r0, #32
   126bc:	bne	127dc <__assert_fail@plt+0x1754>
   126c0:	movw	r0, #41304	; 0xa158
   126c4:	add	sl, r8, sl
   126c8:	movt	r0, #2
   126cc:	ldr	r1, [r0]
   126d0:	movw	r0, #4200	; 0x1068
   126d4:	blx	r1
   126d8:	ldr	r8, [sp, #16]
   126dc:	cmp	sl, r0
   126e0:	bge	126f0 <__assert_fail@plt+0x1668>
   126e4:	ldrb	r0, [r8]
   126e8:	tst	r0, #16
   126ec:	beq	12608 <__assert_fail@plt+0x1580>
   126f0:	ldr	r5, [sp, #8]
   126f4:	mov	r1, #0
   126f8:	movw	r0, #4200	; 0x1068
   126fc:	cmp	r1, #0
   12700:	mov	r2, #0
   12704:	mov	r6, r1
   12708:	mov	r1, r4
   1270c:	mov	r3, r9
   12710:	str	r0, [sp, #20]
   12714:	movw	r0, #41320	; 0xa168
   12718:	moveq	r2, sl
   1271c:	movt	r0, #2
   12720:	ldr	r7, [r0]
   12724:	add	r0, sp, #20
   12728:	str	r0, [sp]
   1272c:	add	r0, sp, #24
   12730:	blx	r7
   12734:	ldr	r2, [sp, #20]
   12738:	mov	r7, r0
   1273c:	mov	r0, r9
   12740:	mov	r1, #1
   12744:	mov	r3, r5
   12748:	bl	10ea8 <fwrite_unlocked@plt>
   1274c:	ldr	r1, [sp, #20]
   12750:	cmp	r0, r1
   12754:	bcc	1278c <__assert_fail@plt+0x1704>
   12758:	cmp	r7, #0
   1275c:	beq	127b8 <__assert_fail@plt+0x1730>
   12760:	ldr	r0, [r8]
   12764:	mov	r2, #2
   12768:	add	r1, r6, #1
   1276c:	ands	r0, r0, #16
   12770:	movweq	r2, #1
   12774:	cmp	r1, r2
   12778:	bcs	125fc <__assert_fail@plt+0x1574>
   1277c:	ldr	r2, [sp, #24]
   12780:	orrs	r2, r6, r2
   12784:	bne	126f8 <__assert_fail@plt+0x1670>
   12788:	b	125fc <__assert_fail@plt+0x1574>
   1278c:	bl	10fa4 <__errno_location@plt>
   12790:	ldr	r4, [r0]
   12794:	movw	r1, #37420	; 0x922c
   12798:	movt	r1, #1
   1279c:	mov	r0, #0
   127a0:	mov	r2, #5
   127a4:	bl	10eb4 <dcgettext@plt>
   127a8:	mov	r2, r0
   127ac:	mov	r0, #1
   127b0:	mov	r1, r4
   127b4:	bl	10f20 <error@plt>
   127b8:	movw	r1, #37432	; 0x9238
   127bc:	mov	r0, #0
   127c0:	mov	r2, #5
   127c4:	movt	r1, #1
   127c8:	bl	10eb4 <dcgettext@plt>
   127cc:	mov	r2, r0
   127d0:	mov	r0, #1
   127d4:	mov	r1, #0
   127d8:	bl	10f20 <error@plt>
   127dc:	bl	10fa4 <__errno_location@plt>
   127e0:	ldr	r4, [r0]
   127e4:	movw	r1, #37409	; 0x9221
   127e8:	movt	r1, #1
   127ec:	b	1279c <__assert_fail@plt+0x1714>
   127f0:	ldr	r1, [sp, #4]
   127f4:	mov	r0, r8
   127f8:	bl	12a7c <__assert_fail@plt+0x19f4>
   127fc:	push	{fp, lr}
   12800:	mov	fp, sp
   12804:	sub	sp, sp, #16
   12808:	mov	r5, r0
   1280c:	mov	r0, #30720	; 0x7800
   12810:	str	r3, [fp, #-4]
   12814:	stm	sp, {r1, r2}
   12818:	bl	16490 <__assert_fail@plt+0x5408>
   1281c:	mov	r4, r0
   12820:	movw	r0, #41304	; 0xa158
   12824:	movt	r0, #2
   12828:	ldr	r1, [r0]
   1282c:	mov	r0, #30720	; 0x7800
   12830:	blx	r1
   12834:	bl	16490 <__assert_fail@plt+0x5408>
   12838:	mov	sl, #0
   1283c:	mov	r3, r0
   12840:	str	r0, [sp, #8]
   12844:	mov	r6, #0
   12848:	add	r0, r4, r6
   1284c:	rsb	r2, r6, #30720	; 0x7800
   12850:	mov	r1, #1
   12854:	mov	r3, r5
   12858:	bl	11064 <fread_unlocked@plt>
   1285c:	add	r6, r0, r6
   12860:	ldr	r0, [r5]
   12864:	tst	r0, #16
   12868:	bne	1287c <__assert_fail@plt+0x17f4>
   1286c:	cmp	r6, #30720	; 0x7800
   12870:	bge	1287c <__assert_fail@plt+0x17f4>
   12874:	ands	r0, r0, #32
   12878:	beq	12848 <__assert_fail@plt+0x17c0>
   1287c:	cmp	r6, #1
   12880:	blt	129c0 <__assert_fail@plt+0x1938>
   12884:	movw	r0, #41312	; 0xa160
   12888:	movt	r0, #2
   1288c:	ldr	r9, [r0]
   12890:	movw	r0, #41304	; 0xa158
   12894:	movt	r0, #2
   12898:	ldr	r1, [r0]
   1289c:	mov	r8, r0
   128a0:	mov	r0, r6
   128a4:	blx	r1
   128a8:	ldr	r7, [sp, #8]
   128ac:	mov	r3, r0
   128b0:	mov	r0, r4
   128b4:	mov	r1, r6
   128b8:	mov	r2, r7
   128bc:	blx	r9
   128c0:	ldr	r1, [r8]
   128c4:	mov	r0, r6
   128c8:	blx	r1
   128cc:	mov	r8, r0
   128d0:	ldr	r0, [fp, #-4]
   128d4:	cmp	r0, #0
   128d8:	beq	128f0 <__assert_fail@plt+0x1868>
   128dc:	cmp	r8, #1
   128e0:	blt	129c0 <__assert_fail@plt+0x1938>
   128e4:	ldr	r3, [sp, #8]
   128e8:	mov	r7, #0
   128ec:	b	12938 <__assert_fail@plt+0x18b0>
   128f0:	movw	r0, #41292	; 0xa14c
   128f4:	mov	r1, #1
   128f8:	mov	r2, r8
   128fc:	movt	r0, #2
   12900:	ldr	r3, [r0]
   12904:	mov	r0, r7
   12908:	bl	10ea8 <fwrite_unlocked@plt>
   1290c:	cmp	r0, r8
   12910:	bcs	129c0 <__assert_fail@plt+0x1938>
   12914:	b	12a24 <__assert_fail@plt+0x199c>
   12918:	mov	r1, #10
   1291c:	bl	11010 <__overflow@plt>
   12920:	ldr	r3, [sp, #8]
   12924:	mov	sl, #0
   12928:	cmn	r0, #1
   1292c:	beq	12a24 <__assert_fail@plt+0x199c>
   12930:	cmp	r7, r8
   12934:	bge	129c0 <__assert_fail@plt+0x1938>
   12938:	ldr	r0, [fp, #-4]
   1293c:	sub	r9, r8, r7
   12940:	sub	r0, r0, sl
   12944:	cmp	r0, r9
   12948:	movlt	r9, r0
   1294c:	cmp	r9, #0
   12950:	beq	12990 <__assert_fail@plt+0x1908>
   12954:	movw	r1, #41292	; 0xa14c
   12958:	add	r0, r3, r7
   1295c:	mov	r2, r9
   12960:	movt	r1, #2
   12964:	ldr	r3, [r1]
   12968:	mov	r1, #1
   1296c:	bl	10ea8 <fwrite_unlocked@plt>
   12970:	cmp	r0, r9
   12974:	bcc	12a24 <__assert_fail@plt+0x199c>
   12978:	ldr	r3, [sp, #8]
   1297c:	add	r7, r9, r7
   12980:	add	sl, r9, sl
   12984:	cmp	r7, r8
   12988:	blt	12938 <__assert_fail@plt+0x18b0>
   1298c:	b	129c0 <__assert_fail@plt+0x1938>
   12990:	ldr	r0, [sp, #4]
   12994:	ldr	r2, [r0, #20]
   12998:	ldr	r1, [r0, #24]
   1299c:	cmp	r2, r1
   129a0:	bcs	12918 <__assert_fail@plt+0x1890>
   129a4:	add	r1, r2, #1
   129a8:	mov	sl, #0
   129ac:	str	r1, [r0, #20]
   129b0:	mov	r0, #10
   129b4:	strb	r0, [r2]
   129b8:	cmp	r7, r8
   129bc:	blt	12938 <__assert_fail@plt+0x18b0>
   129c0:	ldr	r0, [r5]
   129c4:	tst	r0, #16
   129c8:	cmpeq	r6, #30720	; 0x7800
   129cc:	bne	129d8 <__assert_fail@plt+0x1950>
   129d0:	ands	r0, r0, #32
   129d4:	beq	12844 <__assert_fail@plt+0x17bc>
   129d8:	ldr	r0, [fp, #-4]
   129dc:	cmp	r0, #0
   129e0:	beq	12a38 <__assert_fail@plt+0x19b0>
   129e4:	cmp	sl, #1
   129e8:	blt	12a38 <__assert_fail@plt+0x19b0>
   129ec:	ldr	r0, [sp, #4]
   129f0:	ldr	r2, [r0, #20]
   129f4:	ldr	r1, [r0, #24]
   129f8:	cmp	r2, r1
   129fc:	bcs	12a14 <__assert_fail@plt+0x198c>
   12a00:	add	r1, r2, #1
   12a04:	str	r1, [r0, #20]
   12a08:	mov	r1, #10
   12a0c:	strb	r1, [r2]
   12a10:	b	12a38 <__assert_fail@plt+0x19b0>
   12a14:	mov	r1, #10
   12a18:	bl	11010 <__overflow@plt>
   12a1c:	cmn	r0, #1
   12a20:	bne	12a38 <__assert_fail@plt+0x19b0>
   12a24:	bl	10fa4 <__errno_location@plt>
   12a28:	ldr	r4, [r0]
   12a2c:	movw	r1, #37420	; 0x922c
   12a30:	movt	r1, #1
   12a34:	b	12a60 <__assert_fail@plt+0x19d8>
   12a38:	ldrb	r0, [r5]
   12a3c:	tst	r0, #32
   12a40:	bne	12a50 <__assert_fail@plt+0x19c8>
   12a44:	ldr	r1, [sp]
   12a48:	mov	r0, r5
   12a4c:	bl	12a7c <__assert_fail@plt+0x19f4>
   12a50:	bl	10fa4 <__errno_location@plt>
   12a54:	ldr	r4, [r0]
   12a58:	movw	r1, #37409	; 0x9221
   12a5c:	movt	r1, #1
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	bl	10eb4 <dcgettext@plt>
   12a6c:	mov	r2, r0
   12a70:	mov	r0, #1
   12a74:	mov	r1, r4
   12a78:	bl	10f20 <error@plt>
   12a7c:	push	{fp, lr}
   12a80:	mov	fp, sp
   12a84:	mov	r5, r1
   12a88:	bl	13e70 <__assert_fail@plt+0x2de8>
   12a8c:	cmp	r0, #0
   12a90:	bne	12a9c <__assert_fail@plt+0x1a14>
   12a94:	mov	r0, #0
   12a98:	bl	10f74 <exit@plt>
   12a9c:	movw	r1, #38877	; 0x97dd
   12aa0:	mov	r0, r5
   12aa4:	movt	r1, #1
   12aa8:	bl	10e48 <strcmp@plt>
   12aac:	mov	r6, r0
   12ab0:	bl	10fa4 <__errno_location@plt>
   12ab4:	ldr	r4, [r0]
   12ab8:	cmp	r6, #0
   12abc:	bne	12ae4 <__assert_fail@plt+0x1a5c>
   12ac0:	movw	r1, #37446	; 0x9246
   12ac4:	mov	r0, #0
   12ac8:	mov	r2, #5
   12acc:	movt	r1, #1
   12ad0:	bl	10eb4 <dcgettext@plt>
   12ad4:	mov	r2, r0
   12ad8:	mov	r0, #1
   12adc:	mov	r1, r4
   12ae0:	bl	10f20 <error@plt>
   12ae4:	mov	r0, #0
   12ae8:	mov	r1, #3
   12aec:	mov	r2, r5
   12af0:	bl	159e0 <__assert_fail@plt+0x4958>
   12af4:	movw	r2, #36564	; 0x8ed4
   12af8:	mov	r3, r0
   12afc:	mov	r0, #1
   12b00:	mov	r1, r4
   12b04:	movt	r2, #1
   12b08:	bl	10f20 <error@plt>
   12b0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b10:	add	fp, sp, #24
   12b14:	cmp	r1, #0
   12b18:	cmpne	r3, #0
   12b1c:	bne	12b34 <__assert_fail@plt+0x1aac>
   12b20:	cmp	r3, #0
   12b24:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12b28:	mov	r0, #0
   12b2c:	strb	r0, [r2]
   12b30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12b34:	movw	r8, #38203	; 0x953b
   12b38:	add	r0, r0, #2
   12b3c:	rsb	lr, r3, #0
   12b40:	mov	ip, #0
   12b44:	mov	r9, #0
   12b48:	movt	r8, #1
   12b4c:	ldrb	r3, [r0, #-2]
   12b50:	mov	r5, r2
   12b54:	add	r6, lr, r9
   12b58:	ldrb	r3, [r8, r3, lsr #3]
   12b5c:	strb	r3, [r5, r9]!
   12b60:	adds	r3, r6, #1
   12b64:	bcs	12b30 <__assert_fail@plt+0x1aa8>
   12b68:	cmp	r1, #1
   12b6c:	ldrb	r3, [r0, #-2]
   12b70:	mov	r4, #0
   12b74:	add	r7, r6, #2
   12b78:	ldrbne	r4, [r0, #-1]
   12b7c:	lsl	r3, r3, #2
   12b80:	lsrne	r4, r4, #6
   12b84:	cmp	r7, #0
   12b88:	add	r3, r4, r3
   12b8c:	and	r3, r3, #31
   12b90:	ldrb	r3, [r8, r3]
   12b94:	strb	r3, [r5, #1]
   12b98:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12b9c:	add	r7, r6, #3
   12ba0:	mov	r3, #61	; 0x3d
   12ba4:	cmp	r1, #1
   12ba8:	beq	12bb8 <__assert_fail@plt+0x1b30>
   12bac:	ldrb	r3, [r0, #-1]
   12bb0:	ubfx	r3, r3, #1, #5
   12bb4:	ldrb	r3, [r8, r3]
   12bb8:	cmp	r7, #0
   12bbc:	strb	r3, [r5, #2]
   12bc0:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12bc4:	add	r7, r6, #4
   12bc8:	cmp	r1, #1
   12bcc:	beq	12bec <__assert_fail@plt+0x1b64>
   12bd0:	ldrb	r3, [r0, #-1]
   12bd4:	subs	r1, r1, #2
   12bd8:	lsl	r3, r3, #4
   12bdc:	beq	12bf8 <__assert_fail@plt+0x1b70>
   12be0:	ldrb	r4, [r0]
   12be4:	lsr	r4, r4, #4
   12be8:	b	12bfc <__assert_fail@plt+0x1b74>
   12bec:	mov	r3, #61	; 0x3d
   12bf0:	mov	r1, #0
   12bf4:	b	12c08 <__assert_fail@plt+0x1b80>
   12bf8:	mov	r4, #0
   12bfc:	add	r3, r4, r3
   12c00:	and	r3, r3, #31
   12c04:	ldrb	r3, [r8, r3]
   12c08:	cmp	r7, #0
   12c0c:	strb	r3, [r5, #3]
   12c10:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12c14:	add	r7, r6, #5
   12c18:	cmp	r1, #0
   12c1c:	beq	12c3c <__assert_fail@plt+0x1bb4>
   12c20:	ldrb	r3, [r0]
   12c24:	subs	r1, r1, #1
   12c28:	lsl	r3, r3, #1
   12c2c:	beq	12c48 <__assert_fail@plt+0x1bc0>
   12c30:	ldrb	r4, [r0, #1]
   12c34:	lsr	r4, r4, #7
   12c38:	b	12c4c <__assert_fail@plt+0x1bc4>
   12c3c:	mov	r3, #61	; 0x3d
   12c40:	mov	r1, #0
   12c44:	b	12c58 <__assert_fail@plt+0x1bd0>
   12c48:	mov	r4, #0
   12c4c:	add	r3, r4, r3
   12c50:	and	r3, r3, #31
   12c54:	ldrb	r3, [r8, r3]
   12c58:	cmp	r7, #0
   12c5c:	strb	r3, [r5, #4]
   12c60:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12c64:	add	r7, r6, #6
   12c68:	cmp	r1, #0
   12c6c:	beq	12c80 <__assert_fail@plt+0x1bf8>
   12c70:	ldrb	r3, [r0, #1]
   12c74:	ubfx	r3, r3, #2, #5
   12c78:	ldrb	r3, [r8, r3]
   12c7c:	b	12c84 <__assert_fail@plt+0x1bfc>
   12c80:	mov	r3, #61	; 0x3d
   12c84:	cmp	r7, #0
   12c88:	strb	r3, [r5, #5]
   12c8c:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12c90:	add	r7, r6, #7
   12c94:	cmp	r1, #0
   12c98:	beq	12cb8 <__assert_fail@plt+0x1c30>
   12c9c:	ldrb	r3, [r0, #1]
   12ca0:	subs	r1, r1, #1
   12ca4:	lsl	r3, r3, #3
   12ca8:	beq	12cc4 <__assert_fail@plt+0x1c3c>
   12cac:	ldrb	r4, [r0, #2]
   12cb0:	lsr	r4, r4, #5
   12cb4:	b	12cc8 <__assert_fail@plt+0x1c40>
   12cb8:	mov	r3, #61	; 0x3d
   12cbc:	mov	r1, #0
   12cc0:	b	12cd4 <__assert_fail@plt+0x1c4c>
   12cc4:	mov	r4, #0
   12cc8:	add	r3, r4, r3
   12ccc:	and	r3, r3, #31
   12cd0:	ldrb	r3, [r8, r3]
   12cd4:	cmp	r7, #0
   12cd8:	strb	r3, [r5, #6]
   12cdc:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12ce0:	cmp	r1, #0
   12ce4:	beq	12cf8 <__assert_fail@plt+0x1c70>
   12ce8:	ldrb	r3, [r0, #2]
   12cec:	and	r3, r3, #31
   12cf0:	ldrb	r3, [r8, r3]
   12cf4:	b	12cfc <__assert_fail@plt+0x1c74>
   12cf8:	mov	r3, #61	; 0x3d
   12cfc:	cmn	r6, #8
   12d00:	strb	r3, [r5, #7]
   12d04:	beq	12b30 <__assert_fail@plt+0x1aa8>
   12d08:	subs	r1, r1, #1
   12d0c:	add	r9, r9, #8
   12d10:	adc	r3, ip, #0
   12d14:	cmp	r1, #0
   12d18:	addne	r0, r0, #5
   12d1c:	cmpne	r3, #0
   12d20:	bne	12b4c <__assert_fail@plt+0x1ac4>
   12d24:	add	r2, r2, r9
   12d28:	b	12b28 <__assert_fail@plt+0x1aa0>
   12d2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d30:	add	fp, sp, #24
   12d34:	mov	r8, r0
   12d38:	movw	r0, #26215	; 0x6667
   12d3c:	mov	r4, r1
   12d40:	mov	r6, r2
   12d44:	movt	r0, #26214	; 0x6666
   12d48:	smmul	r0, r1, r0
   12d4c:	asr	r1, r0, #1
   12d50:	add	r0, r1, r0, lsr #31
   12d54:	add	r1, r0, r0, lsl #2
   12d58:	subs	r1, r4, r1
   12d5c:	addne	r0, r0, #1
   12d60:	cmn	r0, #1
   12d64:	ble	12d74 <__assert_fail@plt+0x1cec>
   12d68:	cmn	r0, #-268435455	; 0xf0000001
   12d6c:	ble	12d88 <__assert_fail@plt+0x1d00>
   12d70:	b	12dc8 <__assert_fail@plt+0x1d40>
   12d74:	beq	12d88 <__assert_fail@plt+0x1d00>
   12d78:	mov	r1, #-2147483648	; 0x80000000
   12d7c:	sdiv	r1, r1, r0
   12d80:	cmp	r1, #8
   12d84:	blt	12dc8 <__assert_fail@plt+0x1d40>
   12d88:	cmn	r4, #1
   12d8c:	ble	12dc8 <__assert_fail@plt+0x1d40>
   12d90:	lsl	r7, r0, #3
   12d94:	orr	r5, r7, #1
   12d98:	mov	r0, r5
   12d9c:	bl	1837c <__assert_fail@plt+0x72f4>
   12da0:	cmp	r0, #0
   12da4:	str	r0, [r6]
   12da8:	beq	12dd8 <__assert_fail@plt+0x1d50>
   12dac:	mov	r2, r0
   12db0:	mov	r0, r8
   12db4:	mov	r1, r4
   12db8:	mov	r3, r5
   12dbc:	bl	12b0c <__assert_fail@plt+0x1a84>
   12dc0:	mov	r0, r7
   12dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12dc8:	mov	r7, #0
   12dcc:	mov	r0, r7
   12dd0:	str	r7, [r6]
   12dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12dd8:	mov	r0, r5
   12ddc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12de0:	movw	r1, #38235	; 0x955b
   12de4:	movt	r1, #1
   12de8:	add	r0, r1, r0
   12dec:	ldrsb	r1, [r0]
   12df0:	mov	r0, #0
   12df4:	cmn	r1, #1
   12df8:	movwgt	r0, #1
   12dfc:	bx	lr
   12e00:	mov	r1, #0
   12e04:	str	r1, [r0]
   12e08:	bx	lr
   12e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e10:	add	fp, sp, #28
   12e14:	sub	sp, sp, #28
   12e18:	mov	r6, r2
   12e1c:	mov	r2, r0
   12e20:	ldr	r0, [fp, #8]
   12e24:	str	r3, [sp, #24]
   12e28:	mov	r5, r1
   12e2c:	mov	r8, #0
   12e30:	cmp	r2, #0
   12e34:	ldr	r7, [r0]
   12e38:	mov	r0, #0
   12e3c:	str	r7, [sp, #20]
   12e40:	beq	12e58 <__assert_fail@plt+0x1dd0>
   12e44:	clz	r0, r6
   12e48:	lsr	r8, r0, #5
   12e4c:	ldr	r0, [r2]
   12e50:	cmp	r0, #0
   12e54:	movwne	r0, #1
   12e58:	orr	r0, r0, r8
   12e5c:	add	sl, sp, #24
   12e60:	add	r4, sp, #20
   12e64:	str	r2, [sp, #16]
   12e68:	str	r0, [sp, #8]
   12e6c:	add	r0, r2, #4
   12e70:	str	r0, [sp, #4]
   12e74:	clz	r0, r2
   12e78:	lsr	r0, r0, #5
   12e7c:	str	r0, [sp, #12]
   12e80:	b	12e90 <__assert_fail@plt+0x1e08>
   12e84:	ldr	r7, [sp, #20]
   12e88:	sub	r6, r6, #1
   12e8c:	add	r5, r5, #1
   12e90:	ldr	r0, [sp, #8]
   12e94:	cmp	r0, #0
   12e98:	bne	12ecc <__assert_fail@plt+0x1e44>
   12e9c:	mov	r0, r5
   12ea0:	mov	r1, r6
   12ea4:	mov	r2, sl
   12ea8:	mov	r3, r4
   12eac:	bl	13070 <__assert_fail@plt+0x1fe8>
   12eb0:	cmp	r0, #0
   12eb4:	beq	12ec8 <__assert_fail@plt+0x1e40>
   12eb8:	ldr	r7, [sp, #20]
   12ebc:	add	r5, r5, #8
   12ec0:	sub	r6, r6, #8
   12ec4:	b	12e9c <__assert_fail@plt+0x1e14>
   12ec8:	ldr	r2, [sp, #16]
   12ecc:	cmp	r6, #0
   12ed0:	mov	r0, r6
   12ed4:	movwne	r0, #1
   12ed8:	orr	r0, r8, r0
   12edc:	cmp	r0, #1
   12ee0:	bne	13044 <__assert_fail@plt+0x1fbc>
   12ee4:	cmp	r6, #0
   12ee8:	beq	12f04 <__assert_fail@plt+0x1e7c>
   12eec:	ldrb	r0, [r5]
   12ef0:	ldr	r1, [sp, #12]
   12ef4:	subs	r0, r0, #10
   12ef8:	movwne	r0, #1
   12efc:	orrs	r0, r0, r1
   12f00:	beq	12e84 <__assert_fail@plt+0x1dfc>
   12f04:	ldr	r0, [sp, #20]
   12f08:	ldr	r1, [sp, #24]
   12f0c:	add	r9, r5, r6
   12f10:	cmp	r2, #0
   12f14:	str	r7, [sp, #20]
   12f18:	sub	r0, r0, r7
   12f1c:	add	r0, r1, r0
   12f20:	str	r0, [sp, #24]
   12f24:	beq	12fc8 <__assert_fail@plt+0x1f40>
   12f28:	ldr	r7, [r2]
   12f2c:	cmp	r7, #0
   12f30:	beq	12f44 <__assert_fail@plt+0x1ebc>
   12f34:	cmp	r7, #8
   12f38:	bne	12f70 <__assert_fail@plt+0x1ee8>
   12f3c:	mov	r0, #0
   12f40:	str	r0, [r2]
   12f44:	sub	r0, r9, r5
   12f48:	mov	r7, #0
   12f4c:	cmp	r0, #8
   12f50:	blt	12f70 <__assert_fail@plt+0x1ee8>
   12f54:	mov	r0, r5
   12f58:	mov	r1, #10
   12f5c:	mov	r2, #8
   12f60:	bl	10fec <memchr@plt>
   12f64:	ldr	r2, [sp, #16]
   12f68:	cmp	r0, #0
   12f6c:	beq	13030 <__assert_fail@plt+0x1fa8>
   12f70:	cmp	r6, #1
   12f74:	blt	12fd0 <__assert_fail@plt+0x1f48>
   12f78:	mov	r6, r7
   12f7c:	mov	r0, r5
   12f80:	ldrb	r1, [r5], #1
   12f84:	cmp	r1, #10
   12f88:	bne	12f98 <__assert_fail@plt+0x1f10>
   12f8c:	cmp	r5, r9
   12f90:	bcc	12f7c <__assert_fail@plt+0x1ef4>
   12f94:	b	12fc0 <__assert_fail@plt+0x1f38>
   12f98:	add	r7, r6, #1
   12f9c:	mov	r3, r2
   12fa0:	add	r5, r0, #1
   12fa4:	str	r7, [r3], r6
   12fa8:	cmp	r5, r9
   12fac:	strb	r1, [r3, #4]
   12fb0:	ldr	r6, [r2]
   12fb4:	bcs	12fc0 <__assert_fail@plt+0x1f38>
   12fb8:	cmp	r6, #8
   12fbc:	bne	12f7c <__assert_fail@plt+0x1ef4>
   12fc0:	add	r5, r0, #1
   12fc4:	b	12fd4 <__assert_fail@plt+0x1f4c>
   12fc8:	mov	r0, r5
   12fcc:	b	12fd8 <__assert_fail@plt+0x1f50>
   12fd0:	mov	r6, r7
   12fd4:	ldr	r0, [sp, #4]
   12fd8:	mov	r1, #0
   12fdc:	cmp	r6, #0
   12fe0:	beq	13048 <__assert_fail@plt+0x1fc0>
   12fe4:	ldr	r3, [sp, #12]
   12fe8:	cmp	r6, #7
   12fec:	mov	r2, #0
   12ff0:	movwgt	r2, #1
   12ff4:	orr	r2, r8, r2
   12ff8:	orr	r2, r2, r3
   12ffc:	cmp	r2, #1
   13000:	bne	13048 <__assert_fail@plt+0x1fc0>
   13004:	mov	r1, r6
   13008:	mov	r2, sl
   1300c:	mov	r3, r4
   13010:	bl	13070 <__assert_fail@plt+0x1fe8>
   13014:	cmp	r0, #0
   13018:	mov	r1, r6
   1301c:	beq	13048 <__assert_fail@plt+0x1fc0>
   13020:	ldr	r7, [sp, #20]
   13024:	ldr	r2, [sp, #16]
   13028:	sub	r6, r9, r5
   1302c:	b	12e90 <__assert_fail@plt+0x1e08>
   13030:	add	r1, r5, #8
   13034:	mov	r0, r5
   13038:	mov	r6, #8
   1303c:	mov	r5, r1
   13040:	b	13004 <__assert_fail@plt+0x1f7c>
   13044:	mov	r1, r6
   13048:	ldr	r0, [fp, #8]
   1304c:	ldr	r2, [sp, #20]
   13050:	mov	r3, r0
   13054:	ldr	r0, [r0]
   13058:	sub	r0, r0, r2
   1305c:	str	r0, [r3]
   13060:	clz	r0, r1
   13064:	lsr	r0, r0, #5
   13068:	sub	sp, fp, #28
   1306c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13070:	push	{r4, r5, r6, sl, fp, lr}
   13074:	add	fp, sp, #16
   13078:	mov	ip, #0
   1307c:	cmp	r1, #8
   13080:	blt	131e8 <__assert_fail@plt+0x2160>
   13084:	ldrb	r1, [r0]
   13088:	movw	lr, #38235	; 0x955b
   1308c:	movt	lr, #1
   13090:	add	r1, lr, r1
   13094:	ldrsb	r4, [r1]
   13098:	cmp	r4, #0
   1309c:	bmi	131e8 <__assert_fail@plt+0x2160>
   130a0:	ldrb	r1, [r0, #1]
   130a4:	add	r1, lr, r1
   130a8:	ldrsb	r1, [r1]
   130ac:	cmp	r1, #0
   130b0:	bmi	131e8 <__assert_fail@plt+0x2160>
   130b4:	ldr	r5, [r3]
   130b8:	ldr	ip, [r2]
   130bc:	cmp	r5, #0
   130c0:	beq	130e4 <__assert_fail@plt+0x205c>
   130c4:	uxtb	r5, r1
   130c8:	lsr	r5, r5, #2
   130cc:	orr	r4, r5, r4, lsl #3
   130d0:	strb	r4, [ip], #1
   130d4:	ldr	r4, [r3]
   130d8:	sub	r5, r4, #1
   130dc:	str	r5, [r3]
   130e0:	b	130e8 <__assert_fail@plt+0x2060>
   130e4:	mov	r5, #0
   130e8:	ldrb	r4, [r0, #2]
   130ec:	cmp	r4, #61	; 0x3d
   130f0:	bne	13110 <__assert_fail@plt+0x2088>
   130f4:	ldrb	r1, [r0, #3]
   130f8:	cmp	r1, #61	; 0x3d
   130fc:	bne	13288 <__assert_fail@plt+0x2200>
   13100:	ldrb	r1, [r0, #4]
   13104:	cmp	r1, #61	; 0x3d
   13108:	beq	13170 <__assert_fail@plt+0x20e8>
   1310c:	b	13288 <__assert_fail@plt+0x2200>
   13110:	add	r4, lr, r4
   13114:	ldrsb	r6, [r4]
   13118:	cmp	r6, #0
   1311c:	bmi	13288 <__assert_fail@plt+0x2200>
   13120:	ldrb	r4, [r0, #3]
   13124:	add	r4, lr, r4
   13128:	ldrsb	r4, [r4]
   1312c:	cmn	r4, #1
   13130:	ble	13288 <__assert_fail@plt+0x2200>
   13134:	cmp	r5, #0
   13138:	beq	13160 <__assert_fail@plt+0x20d8>
   1313c:	lsl	r5, r6, #1
   13140:	orr	r1, r5, r1, lsl #6
   13144:	uxtb	r5, r4
   13148:	orr	r1, r1, r5, lsr #4
   1314c:	strb	r1, [ip], #1
   13150:	ldr	r1, [r3]
   13154:	sub	r5, r1, #1
   13158:	str	r5, [r3]
   1315c:	b	13164 <__assert_fail@plt+0x20dc>
   13160:	mov	r5, #0
   13164:	ldrb	r1, [r0, #4]
   13168:	cmp	r1, #61	; 0x3d
   1316c:	bne	13180 <__assert_fail@plt+0x20f8>
   13170:	ldrb	r1, [r0, #5]
   13174:	cmp	r1, #61	; 0x3d
   13178:	beq	131c8 <__assert_fail@plt+0x2140>
   1317c:	b	13288 <__assert_fail@plt+0x2200>
   13180:	add	r1, lr, r1
   13184:	ldrsb	r1, [r1]
   13188:	cmn	r1, #1
   1318c:	ble	13288 <__assert_fail@plt+0x2200>
   13190:	cmp	r5, #0
   13194:	beq	131b8 <__assert_fail@plt+0x2130>
   13198:	uxtb	r5, r1
   1319c:	lsr	r5, r5, #1
   131a0:	orr	r4, r5, r4, lsl #4
   131a4:	strb	r4, [ip], #1
   131a8:	ldr	r4, [r3]
   131ac:	sub	r4, r4, #1
   131b0:	str	r4, [r3]
   131b4:	b	131bc <__assert_fail@plt+0x2134>
   131b8:	mov	r4, #0
   131bc:	ldrb	r5, [r0, #5]
   131c0:	cmp	r5, #61	; 0x3d
   131c4:	bne	131f0 <__assert_fail@plt+0x2168>
   131c8:	ldrb	r1, [r0, #6]
   131cc:	cmp	r1, #61	; 0x3d
   131d0:	bne	13288 <__assert_fail@plt+0x2200>
   131d4:	ldrb	r0, [r0, #7]
   131d8:	cmp	r0, #61	; 0x3d
   131dc:	bne	13288 <__assert_fail@plt+0x2200>
   131e0:	str	ip, [r2]
   131e4:	mov	ip, #1
   131e8:	mov	r0, ip
   131ec:	pop	{r4, r5, r6, sl, fp, pc}
   131f0:	add	r5, lr, r5
   131f4:	ldrsb	r5, [r5]
   131f8:	cmp	r5, #0
   131fc:	bmi	13288 <__assert_fail@plt+0x2200>
   13200:	ldrb	r6, [r0, #6]
   13204:	add	r6, lr, r6
   13208:	ldrsb	r6, [r6]
   1320c:	cmn	r6, #1
   13210:	ble	13288 <__assert_fail@plt+0x2200>
   13214:	cmp	r4, #0
   13218:	beq	13240 <__assert_fail@plt+0x21b8>
   1321c:	uxtb	r4, r6
   13220:	lsr	r4, r4, #3
   13224:	orr	r4, r4, r5, lsl #2
   13228:	orr	r1, r4, r1, lsl #7
   1322c:	strb	r1, [ip], #1
   13230:	ldr	r1, [r3]
   13234:	sub	r1, r1, #1
   13238:	str	r1, [r3]
   1323c:	b	13244 <__assert_fail@plt+0x21bc>
   13240:	mov	r1, #0
   13244:	ldrb	r4, [r0, #7]
   13248:	cmp	r4, #61	; 0x3d
   1324c:	beq	131e0 <__assert_fail@plt+0x2158>
   13250:	add	r4, lr, r4
   13254:	ldrsb	r4, [r4]
   13258:	cmn	r4, #1
   1325c:	ble	13288 <__assert_fail@plt+0x2200>
   13260:	cmp	r1, #0
   13264:	beq	131e0 <__assert_fail@plt+0x2158>
   13268:	ldrb	r0, [r0, #6]
   1326c:	ldrb	r0, [lr, r0]
   13270:	orr	r0, r4, r0, lsl #5
   13274:	strb	r0, [ip], #1
   13278:	ldr	r0, [r3]
   1327c:	sub	r0, r0, #1
   13280:	str	r0, [r3]
   13284:	b	131e0 <__assert_fail@plt+0x2158>
   13288:	str	ip, [r2]
   1328c:	mov	ip, #0
   13290:	mov	r0, ip
   13294:	pop	{r4, r5, r6, sl, fp, pc}
   13298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1329c:	add	fp, sp, #24
   132a0:	sub	sp, sp, #8
   132a4:	mov	r7, r0
   132a8:	asr	r0, r2, #3
   132ac:	mov	r4, r3
   132b0:	mov	r6, r2
   132b4:	mov	r8, r1
   132b8:	add	r0, r0, r0, lsl #2
   132bc:	add	r0, r0, #5
   132c0:	str	r0, [sp, #4]
   132c4:	bl	1837c <__assert_fail@plt+0x72f4>
   132c8:	mov	r5, #1
   132cc:	cmp	r0, #0
   132d0:	str	r0, [r4]
   132d4:	beq	13320 <__assert_fail@plt+0x2298>
   132d8:	mov	r3, r0
   132dc:	add	r0, sp, #4
   132e0:	mov	r1, r8
   132e4:	mov	r2, r6
   132e8:	str	r0, [sp]
   132ec:	mov	r0, r7
   132f0:	bl	12e0c <__assert_fail@plt+0x1d84>
   132f4:	cmp	r0, #0
   132f8:	beq	13310 <__assert_fail@plt+0x2288>
   132fc:	ldr	r0, [fp, #8]
   13300:	cmp	r0, #0
   13304:	ldrne	r1, [sp, #4]
   13308:	strne	r1, [r0]
   1330c:	b	13320 <__assert_fail@plt+0x2298>
   13310:	ldr	r0, [r4]
   13314:	bl	13f68 <__assert_fail@plt+0x2ee0>
   13318:	mov	r5, #0
   1331c:	str	r5, [r4]
   13320:	mov	r0, r5
   13324:	sub	sp, fp, #24
   13328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1332c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13330:	add	fp, sp, #28
   13334:	tst	r3, #3
   13338:	bne	133b0 <__assert_fail@plt+0x2328>
   1333c:	asr	r7, r3, #2
   13340:	add	r7, r7, r7, lsl #1
   13344:	cmp	r7, r1
   13348:	bne	133b0 <__assert_fail@plt+0x2328>
   1334c:	cmp	r1, #0
   13350:	beq	133cc <__assert_fail@plt+0x2344>
   13354:	movw	r3, #38491	; 0x965b
   13358:	movt	r3, #1
   1335c:	ldrb	r7, [r0]
   13360:	subs	r1, r1, #3
   13364:	ldrb	r6, [r3, r7, lsr #2]
   13368:	strb	r6, [r2]
   1336c:	ldrb	r6, [r0, #1]
   13370:	lsr	r5, r6, #4
   13374:	bfi	r5, r7, #4, #2
   13378:	ldrb	r7, [r3, r5]
   1337c:	strb	r7, [r2, #1]
   13380:	ldrb	r7, [r0, #2]
   13384:	add	r0, r0, #3
   13388:	and	r5, r7, #63	; 0x3f
   1338c:	lsr	r7, r7, #6
   13390:	bfi	r7, r6, #2, #4
   13394:	ldrb	r5, [r3, r5]
   13398:	ldrb	r7, [r3, r7]
   1339c:	strb	r5, [r2, #3]
   133a0:	strb	r7, [r2, #2]
   133a4:	add	r2, r2, #4
   133a8:	bne	1335c <__assert_fail@plt+0x22d4>
   133ac:	b	133cc <__assert_fail@plt+0x2344>
   133b0:	cmp	r1, #0
   133b4:	cmpne	r3, #0
   133b8:	bne	133d0 <__assert_fail@plt+0x2348>
   133bc:	cmp	r3, #0
   133c0:	beq	133cc <__assert_fail@plt+0x2344>
   133c4:	mov	r0, #0
   133c8:	strb	r0, [r2]
   133cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d0:	movw	r6, #38491	; 0x965b
   133d4:	add	r0, r0, #1
   133d8:	sub	ip, r3, #3
   133dc:	sub	lr, r3, #2
   133e0:	sub	sl, r3, #1
   133e4:	sub	r9, r3, #4
   133e8:	mov	r8, #0
   133ec:	mov	r7, #0
   133f0:	movt	r6, #1
   133f4:	ldrb	r3, [r0, #-1]
   133f8:	mov	r5, r2
   133fc:	cmp	sl, r7
   13400:	ldrb	r3, [r6, r3, lsr #2]
   13404:	strb	r3, [r5, r7]!
   13408:	beq	133cc <__assert_fail@plt+0x2344>
   1340c:	cmp	r1, #1
   13410:	ldrb	r3, [r0, #-1]
   13414:	mov	r4, #0
   13418:	ldrbne	r4, [r0]
   1341c:	lsl	r3, r3, #4
   13420:	lsrne	r4, r4, #4
   13424:	cmp	lr, r7
   13428:	add	r3, r4, r3
   1342c:	and	r3, r3, #63	; 0x3f
   13430:	ldrb	r3, [r6, r3]
   13434:	strb	r3, [r5, #1]
   13438:	beq	133cc <__assert_fail@plt+0x2344>
   1343c:	cmp	r1, #1
   13440:	beq	13460 <__assert_fail@plt+0x23d8>
   13444:	ldrb	r3, [r0]
   13448:	subs	r1, r1, #2
   1344c:	lsl	r3, r3, #2
   13450:	beq	1346c <__assert_fail@plt+0x23e4>
   13454:	ldrb	r4, [r0, #1]
   13458:	lsr	r4, r4, #6
   1345c:	b	13470 <__assert_fail@plt+0x23e8>
   13460:	mov	r3, #61	; 0x3d
   13464:	mov	r1, #0
   13468:	b	1347c <__assert_fail@plt+0x23f4>
   1346c:	mov	r4, #0
   13470:	add	r3, r4, r3
   13474:	and	r3, r3, #63	; 0x3f
   13478:	ldrb	r3, [r6, r3]
   1347c:	cmp	ip, r7
   13480:	strb	r3, [r5, #2]
   13484:	beq	133cc <__assert_fail@plt+0x2344>
   13488:	cmp	r1, #0
   1348c:	beq	134a0 <__assert_fail@plt+0x2418>
   13490:	ldrb	r3, [r0, #1]
   13494:	and	r3, r3, #63	; 0x3f
   13498:	ldrb	r3, [r6, r3]
   1349c:	b	134a4 <__assert_fail@plt+0x241c>
   134a0:	mov	r3, #61	; 0x3d
   134a4:	cmp	r9, r7
   134a8:	strb	r3, [r5, #3]
   134ac:	beq	133cc <__assert_fail@plt+0x2344>
   134b0:	subs	r1, r1, #1
   134b4:	add	r7, r7, #4
   134b8:	adc	r3, r8, #0
   134bc:	cmp	r1, #0
   134c0:	addne	r0, r0, #3
   134c4:	cmpne	r3, #0
   134c8:	bne	133f4 <__assert_fail@plt+0x236c>
   134cc:	add	r2, r2, r7
   134d0:	b	133c4 <__assert_fail@plt+0x233c>
   134d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134d8:	add	fp, sp, #24
   134dc:	mov	r8, r0
   134e0:	movw	r0, #21846	; 0x5556
   134e4:	mov	r4, r1
   134e8:	mov	r6, r2
   134ec:	movt	r0, #21845	; 0x5555
   134f0:	smmul	r0, r1, r0
   134f4:	add	r0, r0, r0, lsr #31
   134f8:	add	r1, r0, r0, lsl #1
   134fc:	subs	r1, r4, r1
   13500:	addne	r0, r0, #1
   13504:	cmn	r0, #1
   13508:	ble	13518 <__assert_fail@plt+0x2490>
   1350c:	cmn	r0, #-536870911	; 0xe0000001
   13510:	ble	1352c <__assert_fail@plt+0x24a4>
   13514:	b	1356c <__assert_fail@plt+0x24e4>
   13518:	beq	1352c <__assert_fail@plt+0x24a4>
   1351c:	mov	r1, #-2147483648	; 0x80000000
   13520:	sdiv	r1, r1, r0
   13524:	cmp	r1, #4
   13528:	blt	1356c <__assert_fail@plt+0x24e4>
   1352c:	cmn	r4, #1
   13530:	ble	1356c <__assert_fail@plt+0x24e4>
   13534:	lsl	r7, r0, #2
   13538:	orr	r5, r7, #1
   1353c:	mov	r0, r5
   13540:	bl	1837c <__assert_fail@plt+0x72f4>
   13544:	cmp	r0, #0
   13548:	str	r0, [r6]
   1354c:	beq	1357c <__assert_fail@plt+0x24f4>
   13550:	mov	r2, r0
   13554:	mov	r0, r8
   13558:	mov	r1, r4
   1355c:	mov	r3, r5
   13560:	bl	1332c <__assert_fail@plt+0x22a4>
   13564:	mov	r0, r7
   13568:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1356c:	mov	r7, #0
   13570:	mov	r0, r7
   13574:	str	r7, [r6]
   13578:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1357c:	mov	r0, r5
   13580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13584:	movw	r1, #38555	; 0x969b
   13588:	movt	r1, #1
   1358c:	add	r0, r1, r0
   13590:	ldrsb	r1, [r0]
   13594:	mov	r0, #0
   13598:	cmn	r1, #1
   1359c:	movwgt	r0, #1
   135a0:	bx	lr
   135a4:	mov	r1, #0
   135a8:	str	r1, [r0]
   135ac:	bx	lr
   135b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b4:	add	fp, sp, #28
   135b8:	sub	sp, sp, #28
   135bc:	mov	r6, r2
   135c0:	mov	r2, r0
   135c4:	ldr	r0, [fp, #8]
   135c8:	str	r3, [sp, #24]
   135cc:	mov	r5, r1
   135d0:	mov	r8, #0
   135d4:	cmp	r2, #0
   135d8:	ldr	r7, [r0]
   135dc:	mov	r0, #0
   135e0:	str	r7, [sp, #20]
   135e4:	beq	135fc <__assert_fail@plt+0x2574>
   135e8:	clz	r0, r6
   135ec:	lsr	r8, r0, #5
   135f0:	ldr	r0, [r2]
   135f4:	cmp	r0, #0
   135f8:	movwne	r0, #1
   135fc:	orr	r0, r0, r8
   13600:	add	sl, sp, #24
   13604:	add	r4, sp, #20
   13608:	str	r2, [sp, #16]
   1360c:	str	r0, [sp, #8]
   13610:	add	r0, r2, #4
   13614:	str	r0, [sp, #4]
   13618:	clz	r0, r2
   1361c:	lsr	r0, r0, #5
   13620:	str	r0, [sp, #12]
   13624:	b	13634 <__assert_fail@plt+0x25ac>
   13628:	ldr	r7, [sp, #20]
   1362c:	sub	r6, r6, #1
   13630:	add	r5, r5, #1
   13634:	ldr	r0, [sp, #8]
   13638:	cmp	r0, #0
   1363c:	bne	13670 <__assert_fail@plt+0x25e8>
   13640:	mov	r0, r5
   13644:	mov	r1, r6
   13648:	mov	r2, sl
   1364c:	mov	r3, r4
   13650:	bl	13814 <__assert_fail@plt+0x278c>
   13654:	cmp	r0, #0
   13658:	beq	1366c <__assert_fail@plt+0x25e4>
   1365c:	ldr	r7, [sp, #20]
   13660:	add	r5, r5, #4
   13664:	sub	r6, r6, #4
   13668:	b	13640 <__assert_fail@plt+0x25b8>
   1366c:	ldr	r2, [sp, #16]
   13670:	cmp	r6, #0
   13674:	mov	r0, r6
   13678:	movwne	r0, #1
   1367c:	orr	r0, r8, r0
   13680:	cmp	r0, #1
   13684:	bne	137e8 <__assert_fail@plt+0x2760>
   13688:	cmp	r6, #0
   1368c:	beq	136a8 <__assert_fail@plt+0x2620>
   13690:	ldrb	r0, [r5]
   13694:	ldr	r1, [sp, #12]
   13698:	subs	r0, r0, #10
   1369c:	movwne	r0, #1
   136a0:	orrs	r0, r0, r1
   136a4:	beq	13628 <__assert_fail@plt+0x25a0>
   136a8:	ldr	r0, [sp, #20]
   136ac:	ldr	r1, [sp, #24]
   136b0:	add	r9, r5, r6
   136b4:	cmp	r2, #0
   136b8:	str	r7, [sp, #20]
   136bc:	sub	r0, r0, r7
   136c0:	add	r0, r1, r0
   136c4:	str	r0, [sp, #24]
   136c8:	beq	1376c <__assert_fail@plt+0x26e4>
   136cc:	ldr	r7, [r2]
   136d0:	cmp	r7, #0
   136d4:	beq	136e8 <__assert_fail@plt+0x2660>
   136d8:	cmp	r7, #4
   136dc:	bne	13714 <__assert_fail@plt+0x268c>
   136e0:	mov	r0, #0
   136e4:	str	r0, [r2]
   136e8:	sub	r0, r9, r5
   136ec:	mov	r7, #0
   136f0:	cmp	r0, #4
   136f4:	blt	13714 <__assert_fail@plt+0x268c>
   136f8:	mov	r0, r5
   136fc:	mov	r1, #10
   13700:	mov	r2, #4
   13704:	bl	10fec <memchr@plt>
   13708:	ldr	r2, [sp, #16]
   1370c:	cmp	r0, #0
   13710:	beq	137d4 <__assert_fail@plt+0x274c>
   13714:	cmp	r6, #1
   13718:	blt	13774 <__assert_fail@plt+0x26ec>
   1371c:	mov	r6, r7
   13720:	mov	r0, r5
   13724:	ldrb	r1, [r5], #1
   13728:	cmp	r1, #10
   1372c:	bne	1373c <__assert_fail@plt+0x26b4>
   13730:	cmp	r5, r9
   13734:	bcc	13720 <__assert_fail@plt+0x2698>
   13738:	b	13764 <__assert_fail@plt+0x26dc>
   1373c:	add	r7, r6, #1
   13740:	mov	r3, r2
   13744:	add	r5, r0, #1
   13748:	str	r7, [r3], r6
   1374c:	cmp	r5, r9
   13750:	strb	r1, [r3, #4]
   13754:	ldr	r6, [r2]
   13758:	bcs	13764 <__assert_fail@plt+0x26dc>
   1375c:	cmp	r6, #4
   13760:	bne	13720 <__assert_fail@plt+0x2698>
   13764:	add	r5, r0, #1
   13768:	b	13778 <__assert_fail@plt+0x26f0>
   1376c:	mov	r0, r5
   13770:	b	1377c <__assert_fail@plt+0x26f4>
   13774:	mov	r6, r7
   13778:	ldr	r0, [sp, #4]
   1377c:	mov	r1, #0
   13780:	cmp	r6, #0
   13784:	beq	137ec <__assert_fail@plt+0x2764>
   13788:	ldr	r3, [sp, #12]
   1378c:	cmp	r6, #3
   13790:	mov	r2, #0
   13794:	movwgt	r2, #1
   13798:	orr	r2, r8, r2
   1379c:	orr	r2, r2, r3
   137a0:	cmp	r2, #1
   137a4:	bne	137ec <__assert_fail@plt+0x2764>
   137a8:	mov	r1, r6
   137ac:	mov	r2, sl
   137b0:	mov	r3, r4
   137b4:	bl	13814 <__assert_fail@plt+0x278c>
   137b8:	cmp	r0, #0
   137bc:	mov	r1, r6
   137c0:	beq	137ec <__assert_fail@plt+0x2764>
   137c4:	ldr	r7, [sp, #20]
   137c8:	ldr	r2, [sp, #16]
   137cc:	sub	r6, r9, r5
   137d0:	b	13634 <__assert_fail@plt+0x25ac>
   137d4:	add	r1, r5, #4
   137d8:	mov	r0, r5
   137dc:	mov	r6, #4
   137e0:	mov	r5, r1
   137e4:	b	137a8 <__assert_fail@plt+0x2720>
   137e8:	mov	r1, r6
   137ec:	ldr	r0, [fp, #8]
   137f0:	ldr	r2, [sp, #20]
   137f4:	mov	r3, r0
   137f8:	ldr	r0, [r0]
   137fc:	sub	r0, r0, r2
   13800:	str	r0, [r3]
   13804:	clz	r0, r1
   13808:	lsr	r0, r0, #5
   1380c:	sub	sp, fp, #28
   13810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13814:	push	{r4, r5, r6, sl, fp, lr}
   13818:	add	fp, sp, #16
   1381c:	mov	ip, #0
   13820:	cmp	r1, #2
   13824:	blt	13958 <__assert_fail@plt+0x28d0>
   13828:	ldrb	r4, [r0]
   1382c:	movw	lr, #38555	; 0x969b
   13830:	movt	lr, #1
   13834:	add	r4, lr, r4
   13838:	ldrsb	r5, [r4]
   1383c:	cmp	r5, #0
   13840:	bmi	13958 <__assert_fail@plt+0x28d0>
   13844:	ldrb	r4, [r0, #1]
   13848:	add	r4, lr, r4
   1384c:	ldrsb	r4, [r4]
   13850:	cmp	r4, #0
   13854:	bmi	13958 <__assert_fail@plt+0x28d0>
   13858:	ldr	r6, [r3]
   1385c:	ldr	ip, [r2]
   13860:	cmp	r6, #0
   13864:	beq	13890 <__assert_fail@plt+0x2808>
   13868:	uxtb	r6, r4
   1386c:	lsr	r6, r6, #4
   13870:	orr	r5, r6, r5, lsl #2
   13874:	strb	r5, [ip], #1
   13878:	ldr	r5, [r3]
   1387c:	sub	r6, r5, #1
   13880:	str	r6, [r3]
   13884:	cmp	r1, #2
   13888:	bne	1389c <__assert_fail@plt+0x2814>
   1388c:	b	13960 <__assert_fail@plt+0x28d8>
   13890:	mov	r6, #0
   13894:	cmp	r1, #2
   13898:	beq	13960 <__assert_fail@plt+0x28d8>
   1389c:	ldrb	r5, [r0, #2]
   138a0:	cmp	r5, #61	; 0x3d
   138a4:	bne	138c0 <__assert_fail@plt+0x2838>
   138a8:	cmp	r1, #4
   138ac:	bne	13960 <__assert_fail@plt+0x28d8>
   138b0:	ldrb	r0, [r0, #3]
   138b4:	cmp	r0, #61	; 0x3d
   138b8:	beq	13950 <__assert_fail@plt+0x28c8>
   138bc:	b	13960 <__assert_fail@plt+0x28d8>
   138c0:	add	r5, lr, r5
   138c4:	ldrsb	r5, [r5]
   138c8:	cmn	r5, #1
   138cc:	ble	13960 <__assert_fail@plt+0x28d8>
   138d0:	cmp	r6, #0
   138d4:	beq	13900 <__assert_fail@plt+0x2878>
   138d8:	uxtb	r6, r5
   138dc:	lsr	r6, r6, #2
   138e0:	orr	r4, r6, r4, lsl #4
   138e4:	strb	r4, [ip], #1
   138e8:	ldr	r4, [r3]
   138ec:	sub	r4, r4, #1
   138f0:	str	r4, [r3]
   138f4:	cmp	r1, #3
   138f8:	bne	1390c <__assert_fail@plt+0x2884>
   138fc:	b	13960 <__assert_fail@plt+0x28d8>
   13900:	mov	r4, #0
   13904:	cmp	r1, #3
   13908:	beq	13960 <__assert_fail@plt+0x28d8>
   1390c:	ldrb	r0, [r0, #3]
   13910:	cmp	r0, #61	; 0x3d
   13914:	bne	13924 <__assert_fail@plt+0x289c>
   13918:	cmp	r1, #4
   1391c:	beq	13950 <__assert_fail@plt+0x28c8>
   13920:	b	13960 <__assert_fail@plt+0x28d8>
   13924:	add	r0, lr, r0
   13928:	ldrsb	r0, [r0]
   1392c:	cmn	r0, #1
   13930:	ble	13960 <__assert_fail@plt+0x28d8>
   13934:	cmp	r4, #0
   13938:	beq	13950 <__assert_fail@plt+0x28c8>
   1393c:	orr	r0, r0, r5, lsl #6
   13940:	strb	r0, [ip], #1
   13944:	ldr	r0, [r3]
   13948:	sub	r0, r0, #1
   1394c:	str	r0, [r3]
   13950:	str	ip, [r2]
   13954:	mov	ip, #1
   13958:	mov	r0, ip
   1395c:	pop	{r4, r5, r6, sl, fp, pc}
   13960:	str	ip, [r2]
   13964:	mov	ip, #0
   13968:	mov	r0, ip
   1396c:	pop	{r4, r5, r6, sl, fp, pc}
   13970:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13974:	add	fp, sp, #24
   13978:	sub	sp, sp, #8
   1397c:	mov	r7, r0
   13980:	asr	r0, r2, #2
   13984:	mov	r4, r3
   13988:	mov	r6, r2
   1398c:	mov	r8, r1
   13990:	add	r0, r0, r0, lsl #1
   13994:	add	r0, r0, #3
   13998:	str	r0, [sp, #4]
   1399c:	bl	1837c <__assert_fail@plt+0x72f4>
   139a0:	mov	r5, #1
   139a4:	cmp	r0, #0
   139a8:	str	r0, [r4]
   139ac:	beq	139f8 <__assert_fail@plt+0x2970>
   139b0:	mov	r3, r0
   139b4:	add	r0, sp, #4
   139b8:	mov	r1, r8
   139bc:	mov	r2, r6
   139c0:	str	r0, [sp]
   139c4:	mov	r0, r7
   139c8:	bl	135b0 <__assert_fail@plt+0x2528>
   139cc:	cmp	r0, #0
   139d0:	beq	139e8 <__assert_fail@plt+0x2960>
   139d4:	ldr	r0, [fp, #8]
   139d8:	cmp	r0, #0
   139dc:	ldrne	r1, [sp, #4]
   139e0:	strne	r1, [r0]
   139e4:	b	139f8 <__assert_fail@plt+0x2970>
   139e8:	ldr	r0, [r4]
   139ec:	bl	13f68 <__assert_fail@plt+0x2ee0>
   139f0:	mov	r5, #0
   139f4:	str	r5, [r4]
   139f8:	mov	r0, r5
   139fc:	sub	sp, fp, #24
   13a00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a04:	sub	r2, r0, #65	; 0x41
   13a08:	mov	r1, r0
   13a0c:	mov	r0, #1
   13a10:	cmp	r2, #26
   13a14:	subcs	r2, r1, #97	; 0x61
   13a18:	cmpcs	r2, #26
   13a1c:	bcs	13a24 <__assert_fail@plt+0x299c>
   13a20:	bx	lr
   13a24:	sub	r1, r1, #48	; 0x30
   13a28:	cmp	r1, #10
   13a2c:	movcs	r0, #0
   13a30:	bx	lr
   13a34:	sub	r2, r0, #65	; 0x41
   13a38:	mov	r1, r0
   13a3c:	mov	r0, #1
   13a40:	cmp	r2, #26
   13a44:	subcs	r1, r1, #97	; 0x61
   13a48:	cmpcs	r1, #26
   13a4c:	movcs	r0, #0
   13a50:	bx	lr
   13a54:	cmp	r0, #128	; 0x80
   13a58:	mov	r1, #0
   13a5c:	movwcc	r1, #1
   13a60:	mov	r0, r1
   13a64:	bx	lr
   13a68:	sub	r1, r0, #9
   13a6c:	sub	r0, r0, #32
   13a70:	clz	r1, r1
   13a74:	clz	r0, r0
   13a78:	lsr	r1, r1, #5
   13a7c:	lsr	r0, r0, #5
   13a80:	orr	r0, r0, r1
   13a84:	bx	lr
   13a88:	mov	r1, r0
   13a8c:	mov	r0, #1
   13a90:	cmp	r1, #32
   13a94:	bxcc	lr
   13a98:	cmp	r1, #127	; 0x7f
   13a9c:	movne	r0, #0
   13aa0:	bx	lr
   13aa4:	sub	r1, r0, #48	; 0x30
   13aa8:	mov	r0, #0
   13aac:	cmp	r1, #10
   13ab0:	movwcc	r0, #1
   13ab4:	bx	lr
   13ab8:	sub	r1, r0, #33	; 0x21
   13abc:	mov	r0, #0
   13ac0:	cmp	r1, #94	; 0x5e
   13ac4:	movwcc	r0, #1
   13ac8:	bx	lr
   13acc:	sub	r1, r0, #97	; 0x61
   13ad0:	mov	r0, #0
   13ad4:	cmp	r1, #26
   13ad8:	movwcc	r0, #1
   13adc:	bx	lr
   13ae0:	sub	r1, r0, #32
   13ae4:	mov	r0, #0
   13ae8:	cmp	r1, #95	; 0x5f
   13aec:	movwcc	r0, #1
   13af0:	bx	lr
   13af4:	sub	r1, r0, #33	; 0x21
   13af8:	cmp	r1, #93	; 0x5d
   13afc:	bhi	13c88 <__assert_fail@plt+0x2c00>
   13b00:	add	r2, pc, #4
   13b04:	mov	r0, #1
   13b08:	ldr	pc, [r2, r1, lsl #2]
   13b0c:	andeq	r3, r1, r4, lsl #25
   13b10:	andeq	r3, r1, r4, lsl #25
   13b14:	andeq	r3, r1, r4, lsl #25
   13b18:	andeq	r3, r1, r4, lsl #25
   13b1c:	andeq	r3, r1, r4, lsl #25
   13b20:	andeq	r3, r1, r4, lsl #25
   13b24:	andeq	r3, r1, r4, lsl #25
   13b28:	andeq	r3, r1, r4, lsl #25
   13b2c:	andeq	r3, r1, r4, lsl #25
   13b30:	andeq	r3, r1, r4, lsl #25
   13b34:	andeq	r3, r1, r4, lsl #25
   13b38:	andeq	r3, r1, r4, lsl #25
   13b3c:	andeq	r3, r1, r4, lsl #25
   13b40:	andeq	r3, r1, r4, lsl #25
   13b44:	andeq	r3, r1, r4, lsl #25
   13b48:	andeq	r3, r1, r8, lsl #25
   13b4c:	andeq	r3, r1, r8, lsl #25
   13b50:	andeq	r3, r1, r8, lsl #25
   13b54:	andeq	r3, r1, r8, lsl #25
   13b58:	andeq	r3, r1, r8, lsl #25
   13b5c:	andeq	r3, r1, r8, lsl #25
   13b60:	andeq	r3, r1, r8, lsl #25
   13b64:	andeq	r3, r1, r8, lsl #25
   13b68:	andeq	r3, r1, r8, lsl #25
   13b6c:	andeq	r3, r1, r8, lsl #25
   13b70:	andeq	r3, r1, r4, lsl #25
   13b74:	andeq	r3, r1, r4, lsl #25
   13b78:	andeq	r3, r1, r4, lsl #25
   13b7c:	andeq	r3, r1, r4, lsl #25
   13b80:	andeq	r3, r1, r4, lsl #25
   13b84:	andeq	r3, r1, r4, lsl #25
   13b88:	andeq	r3, r1, r4, lsl #25
   13b8c:	andeq	r3, r1, r8, lsl #25
   13b90:	andeq	r3, r1, r8, lsl #25
   13b94:	andeq	r3, r1, r8, lsl #25
   13b98:	andeq	r3, r1, r8, lsl #25
   13b9c:	andeq	r3, r1, r8, lsl #25
   13ba0:	andeq	r3, r1, r8, lsl #25
   13ba4:	andeq	r3, r1, r8, lsl #25
   13ba8:	andeq	r3, r1, r8, lsl #25
   13bac:	andeq	r3, r1, r8, lsl #25
   13bb0:	andeq	r3, r1, r8, lsl #25
   13bb4:	andeq	r3, r1, r8, lsl #25
   13bb8:	andeq	r3, r1, r8, lsl #25
   13bbc:	andeq	r3, r1, r8, lsl #25
   13bc0:	andeq	r3, r1, r8, lsl #25
   13bc4:	andeq	r3, r1, r8, lsl #25
   13bc8:	andeq	r3, r1, r8, lsl #25
   13bcc:	andeq	r3, r1, r8, lsl #25
   13bd0:	andeq	r3, r1, r8, lsl #25
   13bd4:	andeq	r3, r1, r8, lsl #25
   13bd8:	andeq	r3, r1, r8, lsl #25
   13bdc:	andeq	r3, r1, r8, lsl #25
   13be0:	andeq	r3, r1, r8, lsl #25
   13be4:	andeq	r3, r1, r8, lsl #25
   13be8:	andeq	r3, r1, r8, lsl #25
   13bec:	andeq	r3, r1, r8, lsl #25
   13bf0:	andeq	r3, r1, r8, lsl #25
   13bf4:	andeq	r3, r1, r4, lsl #25
   13bf8:	andeq	r3, r1, r4, lsl #25
   13bfc:	andeq	r3, r1, r4, lsl #25
   13c00:	andeq	r3, r1, r4, lsl #25
   13c04:	andeq	r3, r1, r4, lsl #25
   13c08:	andeq	r3, r1, r4, lsl #25
   13c0c:	andeq	r3, r1, r8, lsl #25
   13c10:	andeq	r3, r1, r8, lsl #25
   13c14:	andeq	r3, r1, r8, lsl #25
   13c18:	andeq	r3, r1, r8, lsl #25
   13c1c:	andeq	r3, r1, r8, lsl #25
   13c20:	andeq	r3, r1, r8, lsl #25
   13c24:	andeq	r3, r1, r8, lsl #25
   13c28:	andeq	r3, r1, r8, lsl #25
   13c2c:	andeq	r3, r1, r8, lsl #25
   13c30:	andeq	r3, r1, r8, lsl #25
   13c34:	andeq	r3, r1, r8, lsl #25
   13c38:	andeq	r3, r1, r8, lsl #25
   13c3c:	andeq	r3, r1, r8, lsl #25
   13c40:	andeq	r3, r1, r8, lsl #25
   13c44:	andeq	r3, r1, r8, lsl #25
   13c48:	andeq	r3, r1, r8, lsl #25
   13c4c:	andeq	r3, r1, r8, lsl #25
   13c50:	andeq	r3, r1, r8, lsl #25
   13c54:	andeq	r3, r1, r8, lsl #25
   13c58:	andeq	r3, r1, r8, lsl #25
   13c5c:	andeq	r3, r1, r8, lsl #25
   13c60:	andeq	r3, r1, r8, lsl #25
   13c64:	andeq	r3, r1, r8, lsl #25
   13c68:	andeq	r3, r1, r8, lsl #25
   13c6c:	andeq	r3, r1, r8, lsl #25
   13c70:	andeq	r3, r1, r8, lsl #25
   13c74:	andeq	r3, r1, r4, lsl #25
   13c78:	andeq	r3, r1, r4, lsl #25
   13c7c:	andeq	r3, r1, r4, lsl #25
   13c80:	andeq	r3, r1, r4, lsl #25
   13c84:	bx	lr
   13c88:	mov	r0, #0
   13c8c:	bx	lr
   13c90:	sub	r0, r0, #9
   13c94:	cmp	r0, #23
   13c98:	movhi	r0, #0
   13c9c:	bxhi	lr
   13ca0:	movw	r1, #31
   13ca4:	bic	r0, r0, #-16777216	; 0xff000000
   13ca8:	mov	r2, #1
   13cac:	movt	r1, #128	; 0x80
   13cb0:	and	r0, r2, r1, lsr r0
   13cb4:	bx	lr
   13cb8:	sub	r1, r0, #65	; 0x41
   13cbc:	mov	r0, #0
   13cc0:	cmp	r1, #26
   13cc4:	movwcc	r0, #1
   13cc8:	bx	lr
   13ccc:	sub	r2, r0, #48	; 0x30
   13cd0:	mov	r1, r0
   13cd4:	mov	r0, #1
   13cd8:	cmp	r2, #22
   13cdc:	bhi	13cf4 <__assert_fail@plt+0x2c6c>
   13ce0:	movw	r3, #1023	; 0x3ff
   13ce4:	mov	ip, #1
   13ce8:	movt	r3, #126	; 0x7e
   13cec:	tst	r3, ip, lsl r2
   13cf0:	bxne	lr
   13cf4:	sub	r1, r1, #97	; 0x61
   13cf8:	cmp	r1, #6
   13cfc:	movcs	r0, #0
   13d00:	bxcs	lr
   13d04:	bx	lr
   13d08:	sub	r1, r0, #65	; 0x41
   13d0c:	cmp	r1, #26
   13d10:	addcc	r0, r0, #32
   13d14:	bx	lr
   13d18:	sub	r1, r0, #97	; 0x61
   13d1c:	cmp	r1, #26
   13d20:	subcc	r0, r0, #32
   13d24:	bx	lr
   13d28:	movw	r1, #41324	; 0xa16c
   13d2c:	movt	r1, #2
   13d30:	str	r0, [r1]
   13d34:	bx	lr
   13d38:	movw	r1, #41328	; 0xa170
   13d3c:	movt	r1, #2
   13d40:	strb	r0, [r1]
   13d44:	bx	lr
   13d48:	push	{r4, r5, r6, sl, fp, lr}
   13d4c:	add	fp, sp, #16
   13d50:	sub	sp, sp, #8
   13d54:	movw	r0, #41292	; 0xa14c
   13d58:	movt	r0, #2
   13d5c:	ldr	r0, [r0]
   13d60:	bl	18400 <__assert_fail@plt+0x7378>
   13d64:	cmp	r0, #0
   13d68:	beq	13d90 <__assert_fail@plt+0x2d08>
   13d6c:	movw	r0, #41328	; 0xa170
   13d70:	movt	r0, #2
   13d74:	ldrb	r0, [r0]
   13d78:	cmp	r0, #0
   13d7c:	beq	13db0 <__assert_fail@plt+0x2d28>
   13d80:	bl	10fa4 <__errno_location@plt>
   13d84:	ldr	r0, [r0]
   13d88:	cmp	r0, #32
   13d8c:	bne	13db0 <__assert_fail@plt+0x2d28>
   13d90:	movw	r0, #41280	; 0xa140
   13d94:	movt	r0, #2
   13d98:	ldr	r0, [r0]
   13d9c:	bl	18400 <__assert_fail@plt+0x7378>
   13da0:	cmp	r0, #0
   13da4:	subeq	sp, fp, #16
   13da8:	popeq	{r4, r5, r6, sl, fp, pc}
   13dac:	b	13e20 <__assert_fail@plt+0x2d98>
   13db0:	movw	r1, #37420	; 0x922c
   13db4:	mov	r0, #0
   13db8:	mov	r2, #5
   13dbc:	movt	r1, #1
   13dc0:	bl	10eb4 <dcgettext@plt>
   13dc4:	mov	r4, r0
   13dc8:	movw	r0, #41324	; 0xa16c
   13dcc:	movt	r0, #2
   13dd0:	ldr	r6, [r0]
   13dd4:	bl	10fa4 <__errno_location@plt>
   13dd8:	ldr	r5, [r0]
   13ddc:	cmp	r6, #0
   13de0:	bne	13dfc <__assert_fail@plt+0x2d74>
   13de4:	movw	r2, #36564	; 0x8ed4
   13de8:	mov	r0, #0
   13dec:	mov	r1, r5
   13df0:	mov	r3, r4
   13df4:	movt	r2, #1
   13df8:	b	13e1c <__assert_fail@plt+0x2d94>
   13dfc:	mov	r0, r6
   13e00:	bl	15904 <__assert_fail@plt+0x487c>
   13e04:	movw	r2, #36560	; 0x8ed0
   13e08:	mov	r3, r0
   13e0c:	str	r4, [sp]
   13e10:	mov	r0, #0
   13e14:	mov	r1, r5
   13e18:	movt	r2, #1
   13e1c:	bl	10f20 <error@plt>
   13e20:	movw	r0, #41196	; 0xa0ec
   13e24:	movt	r0, #2
   13e28:	ldr	r0, [r0]
   13e2c:	bl	10e84 <_exit@plt>
   13e30:	b	10e54 <posix_fadvise64@plt>
   13e34:	cmp	r0, #0
   13e38:	bxeq	lr
   13e3c:	push	{r4, sl, fp, lr}
   13e40:	add	fp, sp, #8
   13e44:	sub	sp, sp, #16
   13e48:	mov	r4, r1
   13e4c:	bl	10fd4 <fileno@plt>
   13e50:	mov	r1, #0
   13e54:	mov	r2, #0
   13e58:	mov	r3, #0
   13e5c:	str	r1, [sp]
   13e60:	stmib	sp, {r1, r4}
   13e64:	bl	10e54 <posix_fadvise64@plt>
   13e68:	sub	sp, fp, #8
   13e6c:	pop	{r4, sl, fp, pc}
   13e70:	push	{r4, r5, r6, sl, fp, lr}
   13e74:	add	fp, sp, #16
   13e78:	sub	sp, sp, #8
   13e7c:	mov	r4, r0
   13e80:	bl	10fd4 <fileno@plt>
   13e84:	cmn	r0, #1
   13e88:	ble	13efc <__assert_fail@plt+0x2e74>
   13e8c:	mov	r0, r4
   13e90:	bl	10f44 <__freading@plt>
   13e94:	cmp	r0, #0
   13e98:	beq	13ec4 <__assert_fail@plt+0x2e3c>
   13e9c:	mov	r0, r4
   13ea0:	bl	10fd4 <fileno@plt>
   13ea4:	mov	r1, #1
   13ea8:	mov	r2, #0
   13eac:	mov	r3, #0
   13eb0:	str	r1, [sp]
   13eb4:	bl	10ef0 <lseek64@plt>
   13eb8:	and	r0, r0, r1
   13ebc:	cmn	r0, #1
   13ec0:	beq	13efc <__assert_fail@plt+0x2e74>
   13ec4:	mov	r0, r4
   13ec8:	bl	13f0c <__assert_fail@plt+0x2e84>
   13ecc:	cmp	r0, #0
   13ed0:	beq	13efc <__assert_fail@plt+0x2e74>
   13ed4:	bl	10fa4 <__errno_location@plt>
   13ed8:	ldr	r6, [r0]
   13edc:	mov	r5, r0
   13ee0:	mov	r0, r4
   13ee4:	bl	10ff8 <fclose@plt>
   13ee8:	cmp	r6, #0
   13eec:	strne	r6, [r5]
   13ef0:	mvnne	r0, #0
   13ef4:	sub	sp, fp, #16
   13ef8:	pop	{r4, r5, r6, sl, fp, pc}
   13efc:	mov	r0, r4
   13f00:	sub	sp, fp, #16
   13f04:	pop	{r4, r5, r6, sl, fp, lr}
   13f08:	b	10ff8 <fclose@plt>
   13f0c:	push	{r4, sl, fp, lr}
   13f10:	add	fp, sp, #8
   13f14:	sub	sp, sp, #8
   13f18:	mov	r4, r0
   13f1c:	cmp	r0, #0
   13f20:	beq	13f58 <__assert_fail@plt+0x2ed0>
   13f24:	mov	r0, r4
   13f28:	bl	10f44 <__freading@plt>
   13f2c:	cmp	r0, #0
   13f30:	beq	13f58 <__assert_fail@plt+0x2ed0>
   13f34:	ldrb	r0, [r4, #1]
   13f38:	tst	r0, #1
   13f3c:	beq	13f58 <__assert_fail@plt+0x2ed0>
   13f40:	mov	r0, #1
   13f44:	mov	r2, #0
   13f48:	mov	r3, #0
   13f4c:	str	r0, [sp]
   13f50:	mov	r0, r4
   13f54:	bl	13f90 <__assert_fail@plt+0x2f08>
   13f58:	mov	r0, r4
   13f5c:	sub	sp, fp, #8
   13f60:	pop	{r4, sl, fp, lr}
   13f64:	b	10e60 <fflush@plt>
   13f68:	push	{r4, r5, r6, sl, fp, lr}
   13f6c:	add	fp, sp, #16
   13f70:	mov	r4, r0
   13f74:	bl	10fa4 <__errno_location@plt>
   13f78:	ldr	r6, [r0]
   13f7c:	mov	r5, r0
   13f80:	mov	r0, r4
   13f84:	bl	10e78 <free@plt>
   13f88:	str	r6, [r5]
   13f8c:	pop	{r4, r5, r6, sl, fp, pc}
   13f90:	push	{r4, r5, r6, r7, fp, lr}
   13f94:	add	fp, sp, #16
   13f98:	sub	sp, sp, #8
   13f9c:	mov	r4, r0
   13fa0:	ldr	r0, [r0, #4]
   13fa4:	mov	r5, r3
   13fa8:	mov	r6, r2
   13fac:	ldr	r1, [r4, #8]
   13fb0:	cmp	r1, r0
   13fb4:	bne	13fd0 <__assert_fail@plt+0x2f48>
   13fb8:	ldrd	r0, [r4, #16]
   13fbc:	cmp	r1, r0
   13fc0:	bne	13fd0 <__assert_fail@plt+0x2f48>
   13fc4:	ldr	r0, [r4, #36]	; 0x24
   13fc8:	cmp	r0, #0
   13fcc:	beq	13fe8 <__assert_fail@plt+0x2f60>
   13fd0:	mov	r0, r4
   13fd4:	mov	r2, r6
   13fd8:	mov	r3, r5
   13fdc:	sub	sp, fp, #16
   13fe0:	pop	{r4, r5, r6, r7, fp, lr}
   13fe4:	b	11004 <fseeko64@plt>
   13fe8:	ldr	r7, [fp, #8]
   13fec:	mov	r0, r4
   13ff0:	bl	10fd4 <fileno@plt>
   13ff4:	mov	r2, r6
   13ff8:	mov	r3, r5
   13ffc:	str	r7, [sp]
   14000:	bl	10ef0 <lseek64@plt>
   14004:	and	r2, r0, r1
   14008:	cmn	r2, #1
   1400c:	beq	1402c <__assert_fail@plt+0x2fa4>
   14010:	strd	r0, [r4, #80]	; 0x50
   14014:	ldr	r0, [r4]
   14018:	bic	r0, r0, #16
   1401c:	str	r0, [r4]
   14020:	mov	r0, #0
   14024:	sub	sp, fp, #16
   14028:	pop	{r4, r5, r6, r7, fp, pc}
   1402c:	mvn	r0, #0
   14030:	sub	sp, fp, #16
   14034:	pop	{r4, r5, r6, r7, fp, pc}
   14038:	push	{r4, r5, fp, lr}
   1403c:	add	fp, sp, #8
   14040:	cmp	r0, #0
   14044:	beq	140d8 <__assert_fail@plt+0x3050>
   14048:	mov	r1, #47	; 0x2f
   1404c:	mov	r4, r0
   14050:	bl	11028 <strrchr@plt>
   14054:	cmp	r0, #0
   14058:	mov	r5, r4
   1405c:	addne	r5, r0, #1
   14060:	sub	r0, r5, r4
   14064:	cmp	r0, #7
   14068:	blt	140bc <__assert_fail@plt+0x3034>
   1406c:	movw	r1, #38867	; 0x97d3
   14070:	sub	r0, r5, #7
   14074:	mov	r2, #7
   14078:	movt	r1, #1
   1407c:	bl	11070 <strncmp@plt>
   14080:	cmp	r0, #0
   14084:	bne	140bc <__assert_fail@plt+0x3034>
   14088:	movw	r1, #38875	; 0x97db
   1408c:	mov	r0, r5
   14090:	mov	r2, #3
   14094:	movt	r1, #1
   14098:	bl	11070 <strncmp@plt>
   1409c:	cmp	r0, #0
   140a0:	beq	140ac <__assert_fail@plt+0x3024>
   140a4:	mov	r4, r5
   140a8:	b	140bc <__assert_fail@plt+0x3034>
   140ac:	movw	r0, #41264	; 0xa130
   140b0:	add	r4, r5, #3
   140b4:	movt	r0, #2
   140b8:	str	r4, [r0]
   140bc:	movw	r0, #41268	; 0xa134
   140c0:	movt	r0, #2
   140c4:	str	r4, [r0]
   140c8:	movw	r0, #41332	; 0xa174
   140cc:	movt	r0, #2
   140d0:	str	r4, [r0]
   140d4:	pop	{r4, r5, fp, pc}
   140d8:	movw	r0, #41280	; 0xa140
   140dc:	mov	r1, #55	; 0x37
   140e0:	mov	r2, #1
   140e4:	movt	r0, #2
   140e8:	ldr	r3, [r0]
   140ec:	movw	r0, #38811	; 0x979b
   140f0:	movt	r0, #1
   140f4:	bl	10ee4 <fwrite@plt>
   140f8:	bl	1107c <abort@plt>
   140fc:	push	{r4, r5, r6, sl, fp, lr}
   14100:	add	fp, sp, #16
   14104:	mov	r4, r0
   14108:	movw	r0, #41336	; 0xa178
   1410c:	movt	r0, #2
   14110:	cmp	r4, #0
   14114:	moveq	r4, r0
   14118:	bl	10fa4 <__errno_location@plt>
   1411c:	ldr	r6, [r0]
   14120:	mov	r5, r0
   14124:	mov	r0, r4
   14128:	mov	r1, #48	; 0x30
   1412c:	bl	168f0 <__assert_fail@plt+0x5868>
   14130:	str	r6, [r5]
   14134:	pop	{r4, r5, r6, sl, fp, pc}
   14138:	movw	r1, #41336	; 0xa178
   1413c:	cmp	r0, #0
   14140:	movt	r1, #2
   14144:	movne	r1, r0
   14148:	ldr	r0, [r1]
   1414c:	bx	lr
   14150:	movw	r2, #41336	; 0xa178
   14154:	cmp	r0, #0
   14158:	movt	r2, #2
   1415c:	movne	r2, r0
   14160:	str	r1, [r2]
   14164:	bx	lr
   14168:	movw	r3, #41336	; 0xa178
   1416c:	cmp	r0, #0
   14170:	and	r2, r2, #1
   14174:	movt	r3, #2
   14178:	movne	r3, r0
   1417c:	ubfx	r0, r1, #5, #3
   14180:	and	r1, r1, #31
   14184:	add	ip, r3, r0, lsl #2
   14188:	mov	r0, #1
   1418c:	ldr	r3, [ip, #8]
   14190:	and	r0, r0, r3, lsr r1
   14194:	eor	r2, r0, r2
   14198:	eor	r1, r3, r2, lsl r1
   1419c:	str	r1, [ip, #8]
   141a0:	bx	lr
   141a4:	movw	r2, #41336	; 0xa178
   141a8:	cmp	r0, #0
   141ac:	movt	r2, #2
   141b0:	movne	r2, r0
   141b4:	ldr	r0, [r2, #4]
   141b8:	str	r1, [r2, #4]
   141bc:	bx	lr
   141c0:	push	{fp, lr}
   141c4:	mov	fp, sp
   141c8:	movw	r3, #41336	; 0xa178
   141cc:	cmp	r0, #0
   141d0:	movt	r3, #2
   141d4:	movne	r3, r0
   141d8:	cmp	r1, #0
   141dc:	mov	r0, #10
   141e0:	cmpne	r2, #0
   141e4:	str	r0, [r3]
   141e8:	bne	141f0 <__assert_fail@plt+0x3168>
   141ec:	bl	1107c <abort@plt>
   141f0:	str	r1, [r3, #40]	; 0x28
   141f4:	str	r2, [r3, #44]	; 0x2c
   141f8:	pop	{fp, pc}
   141fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14200:	add	fp, sp, #28
   14204:	sub	sp, sp, #20
   14208:	mov	r7, r0
   1420c:	ldr	r0, [fp, #8]
   14210:	movw	r5, #41336	; 0xa178
   14214:	mov	r8, r3
   14218:	mov	r9, r2
   1421c:	mov	sl, r1
   14220:	movt	r5, #2
   14224:	cmp	r0, #0
   14228:	movne	r5, r0
   1422c:	bl	10fa4 <__errno_location@plt>
   14230:	ldr	r2, [r5, #40]	; 0x28
   14234:	ldr	r3, [r5, #44]	; 0x2c
   14238:	mov	r4, r0
   1423c:	ldm	r5, {r0, r1}
   14240:	add	r5, r5, #8
   14244:	ldr	r6, [r4]
   14248:	stm	sp, {r0, r1, r5}
   1424c:	mov	r0, r7
   14250:	mov	r1, sl
   14254:	str	r2, [sp, #12]
   14258:	str	r3, [sp, #16]
   1425c:	mov	r2, r9
   14260:	mov	r3, r8
   14264:	bl	14274 <__assert_fail@plt+0x31ec>
   14268:	str	r6, [r4]
   1426c:	sub	sp, fp, #28
   14270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14278:	add	fp, sp, #28
   1427c:	sub	sp, sp, #156	; 0x9c
   14280:	mov	r5, r0
   14284:	add	r0, r2, #1
   14288:	mov	r6, r1
   1428c:	mov	sl, r3
   14290:	str	r2, [fp, #-80]	; 0xffffffb0
   14294:	str	r0, [sp, #72]	; 0x48
   14298:	ldr	r0, [fp, #12]
   1429c:	and	r1, r0, #1
   142a0:	str	r1, [sp, #36]	; 0x24
   142a4:	and	r1, r0, #4
   142a8:	str	r1, [sp, #32]
   142ac:	ubfx	r9, r0, #1, #1
   142b0:	bl	10efc <__ctype_get_mb_cur_max@plt>
   142b4:	str	r0, [sp, #40]	; 0x28
   142b8:	ldr	r0, [fp, #24]
   142bc:	ldr	r7, [fp, #8]
   142c0:	mov	r1, #0
   142c4:	str	r5, [fp, #-84]	; 0xffffffac
   142c8:	str	r1, [fp, #-56]	; 0xffffffc8
   142cc:	mov	r1, #0
   142d0:	str	r1, [sp, #60]	; 0x3c
   142d4:	mov	r1, #1
   142d8:	str	r1, [fp, #-48]	; 0xffffffd0
   142dc:	str	r0, [sp, #80]	; 0x50
   142e0:	ldr	r0, [fp, #20]
   142e4:	str	r0, [sp, #76]	; 0x4c
   142e8:	mov	r0, #0
   142ec:	str	r0, [sp, #56]	; 0x38
   142f0:	mov	r0, #0
   142f4:	str	r0, [fp, #-88]	; 0xffffffa8
   142f8:	mov	r0, #0
   142fc:	str	r0, [fp, #-72]	; 0xffffffb8
   14300:	mov	r0, #0
   14304:	cmp	r7, #10
   14308:	bhi	1529c <__assert_fail@plt+0x4214>
   1430c:	add	r1, pc, #24
   14310:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14314:	mov	r4, r6
   14318:	mov	r8, #0
   1431c:	mov	r2, #1
   14320:	mov	r3, #0
   14324:	mov	lr, sl
   14328:	ldr	pc, [r1, r7, lsl #2]
   1432c:	strdeq	r4, [r1], -r0
   14330:	andeq	r4, r1, r4, asr #8
   14334:	andeq	r4, r1, r4, lsl #8
   14338:	andeq	r4, r1, r8, ror #7
   1433c:	andeq	r4, r1, r8, lsr r4
   14340:	andeq	r4, r1, ip, ror #8
   14344:	andeq	r4, r1, r4, lsl r4
   14348:	strdeq	r4, [r1], -r0
   1434c:	andeq	r4, r1, r8, asr r3
   14350:	andeq	r4, r1, r8, asr r3
   14354:	andeq	r4, r1, r0, lsl #7
   14358:	movw	r0, #38957	; 0x982d
   1435c:	mov	r1, r7
   14360:	movt	r0, #1
   14364:	bl	15ca4 <__assert_fail@plt+0x4c1c>
   14368:	str	r0, [sp, #76]	; 0x4c
   1436c:	movw	r0, #38959	; 0x982f
   14370:	mov	r1, r7
   14374:	movt	r0, #1
   14378:	bl	15ca4 <__assert_fail@plt+0x4c1c>
   1437c:	str	r0, [sp, #80]	; 0x50
   14380:	mov	r8, #0
   14384:	tst	r9, #1
   14388:	bne	143c0 <__assert_fail@plt+0x3338>
   1438c:	ldr	r0, [sp, #76]	; 0x4c
   14390:	ldrb	r0, [r0]
   14394:	cmp	r0, #0
   14398:	beq	143c0 <__assert_fail@plt+0x3338>
   1439c:	ldr	r1, [sp, #76]	; 0x4c
   143a0:	mov	r8, #0
   143a4:	add	r1, r1, #1
   143a8:	cmp	r8, r4
   143ac:	strbcc	r0, [r5, r8]
   143b0:	ldrb	r0, [r1, r8]
   143b4:	add	r8, r8, #1
   143b8:	cmp	r0, #0
   143bc:	bne	143a8 <__assert_fail@plt+0x3320>
   143c0:	ldr	r6, [sp, #80]	; 0x50
   143c4:	mov	r0, r6
   143c8:	bl	10f8c <strlen@plt>
   143cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143d0:	str	r0, [fp, #-72]	; 0xffffffb8
   143d4:	str	r6, [fp, #-88]	; 0xffffffa8
   143d8:	mov	r2, #1
   143dc:	mov	r3, r9
   143e0:	mov	lr, sl
   143e4:	b	144f0 <__assert_fail@plt+0x3468>
   143e8:	mov	r0, #1
   143ec:	b	14444 <__assert_fail@plt+0x33bc>
   143f0:	mov	r7, #0
   143f4:	mov	r8, #0
   143f8:	mov	r2, r0
   143fc:	mov	r3, #0
   14400:	b	144f0 <__assert_fail@plt+0x3468>
   14404:	tst	r9, #1
   14408:	bne	14444 <__assert_fail@plt+0x33bc>
   1440c:	mov	r2, r0
   14410:	b	1449c <__assert_fail@plt+0x3414>
   14414:	mov	r0, #1
   14418:	mov	r8, #0
   1441c:	mov	r7, #5
   14420:	mov	r2, #1
   14424:	str	r0, [fp, #-72]	; 0xffffffb8
   14428:	movw	r0, #38955	; 0x982b
   1442c:	movt	r0, #1
   14430:	str	r0, [fp, #-88]	; 0xffffffa8
   14434:	b	14464 <__assert_fail@plt+0x33dc>
   14438:	mov	r2, #1
   1443c:	tst	r9, #1
   14440:	beq	1449c <__assert_fail@plt+0x3414>
   14444:	mov	r1, #1
   14448:	mov	r8, #0
   1444c:	mov	r7, #2
   14450:	mov	r2, r0
   14454:	str	r1, [fp, #-72]	; 0xffffffb8
   14458:	movw	r1, #38959	; 0x982f
   1445c:	movt	r1, #1
   14460:	str	r1, [fp, #-88]	; 0xffffffa8
   14464:	mov	r3, #1
   14468:	b	144f0 <__assert_fail@plt+0x3468>
   1446c:	tst	r9, #1
   14470:	beq	144c0 <__assert_fail@plt+0x3438>
   14474:	mov	r0, #1
   14478:	mov	r8, #0
   1447c:	mov	r2, #1
   14480:	mov	r3, #1
   14484:	mov	r7, #5
   14488:	str	r0, [fp, #-72]	; 0xffffffb8
   1448c:	movw	r0, #38955	; 0x982b
   14490:	movt	r0, #1
   14494:	str	r0, [fp, #-88]	; 0xffffffa8
   14498:	b	144f0 <__assert_fail@plt+0x3468>
   1449c:	cmp	r4, #0
   144a0:	mov	r8, #1
   144a4:	mov	r3, #0
   144a8:	mov	r7, #2
   144ac:	movne	r0, #39	; 0x27
   144b0:	strbne	r0, [r5]
   144b4:	movw	r0, #38959	; 0x982f
   144b8:	movt	r0, #1
   144bc:	b	144e4 <__assert_fail@plt+0x345c>
   144c0:	cmp	r4, #0
   144c4:	mov	r8, #1
   144c8:	mov	r2, #1
   144cc:	mov	r7, #5
   144d0:	mov	r3, #0
   144d4:	movne	r0, #34	; 0x22
   144d8:	strbne	r0, [r5]
   144dc:	movw	r0, #38955	; 0x982b
   144e0:	movt	r0, #1
   144e4:	str	r0, [fp, #-88]	; 0xffffffa8
   144e8:	mov	r0, #1
   144ec:	str	r0, [fp, #-72]	; 0xffffffb8
   144f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   144f4:	eor	r6, r3, #1
   144f8:	str	r7, [fp, #-68]	; 0xffffffbc
   144fc:	str	r3, [fp, #-76]	; 0xffffffb4
   14500:	str	r2, [sp, #84]	; 0x54
   14504:	str	r6, [sp, #92]	; 0x5c
   14508:	cmp	r0, #0
   1450c:	movwne	r0, #1
   14510:	and	r1, r0, r3
   14514:	and	r1, r2, r1
   14518:	str	r1, [sp, #48]	; 0x30
   1451c:	sub	r1, r7, #2
   14520:	clz	r1, r1
   14524:	lsr	r1, r1, #5
   14528:	and	r1, r1, r3
   1452c:	str	r1, [sp, #64]	; 0x40
   14530:	subs	r1, r7, #2
   14534:	mov	r7, #0
   14538:	movwne	r1, #1
   1453c:	orr	r6, r1, r6
   14540:	and	r1, r1, r2
   14544:	and	r0, r0, r1
   14548:	str	r6, [sp, #68]	; 0x44
   1454c:	str	r0, [fp, #-60]	; 0xffffffc4
   14550:	orr	r0, r1, r3
   14554:	ldr	r1, [fp, #16]
   14558:	eor	r0, r0, #1
   1455c:	clz	r1, r1
   14560:	lsr	r1, r1, #5
   14564:	orr	r0, r1, r0
   14568:	str	r0, [fp, #-64]	; 0xffffffc0
   1456c:	eor	r0, r2, #1
   14570:	str	r0, [sp, #52]	; 0x34
   14574:	cmn	lr, #1
   14578:	beq	14588 <__assert_fail@plt+0x3500>
   1457c:	cmp	r7, lr
   14580:	bne	14594 <__assert_fail@plt+0x350c>
   14584:	b	150dc <__assert_fail@plt+0x4054>
   14588:	ldrb	r0, [ip, r7]
   1458c:	cmp	r0, #0
   14590:	beq	150e4 <__assert_fail@plt+0x405c>
   14594:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14598:	mov	sl, #0
   1459c:	cmp	r0, #0
   145a0:	beq	145d8 <__assert_fail@plt+0x3550>
   145a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145a8:	add	r5, r7, r0
   145ac:	cmp	r0, #2
   145b0:	bcc	145cc <__assert_fail@plt+0x3544>
   145b4:	cmn	lr, #1
   145b8:	bne	145cc <__assert_fail@plt+0x3544>
   145bc:	mov	r0, ip
   145c0:	bl	10f8c <strlen@plt>
   145c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   145c8:	mov	lr, r0
   145cc:	cmp	r5, lr
   145d0:	bls	145e0 <__assert_fail@plt+0x3558>
   145d4:	ldr	r5, [fp, #-84]	; 0xffffffac
   145d8:	mov	r0, #0
   145dc:	b	1462c <__assert_fail@plt+0x35a4>
   145e0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   145e4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   145e8:	add	r0, ip, r7
   145ec:	mov	r6, r4
   145f0:	mov	r4, lr
   145f4:	bl	10f80 <bcmp@plt>
   145f8:	ldr	r2, [sp, #92]	; 0x5c
   145fc:	cmp	r0, #0
   14600:	ldr	r5, [fp, #-84]	; 0xffffffac
   14604:	mov	r1, r0
   14608:	movwne	r1, #1
   1460c:	orr	r1, r1, r2
   14610:	tst	r1, #1
   14614:	beq	1516c <__assert_fail@plt+0x40e4>
   14618:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1461c:	clz	r0, r0
   14620:	mov	lr, r4
   14624:	mov	r4, r6
   14628:	lsr	r0, r0, #5
   1462c:	str	r0, [fp, #-52]	; 0xffffffcc
   14630:	ldrb	r6, [ip, r7]
   14634:	cmp	r6, #126	; 0x7e
   14638:	bhi	14b68 <__assert_fail@plt+0x3ae0>
   1463c:	add	r3, pc, #16
   14640:	mov	r9, #1
   14644:	mov	r2, #110	; 0x6e
   14648:	mov	r0, #97	; 0x61
   1464c:	mov	r1, #0
   14650:	ldr	pc, [r3, r6, lsl #2]
   14654:	andeq	r4, r1, r8, asr #19
   14658:	andeq	r4, r1, r8, ror #22
   1465c:	andeq	r4, r1, r8, ror #22
   14660:	andeq	r4, r1, r8, ror #22
   14664:	andeq	r4, r1, r8, ror #22
   14668:	andeq	r4, r1, r8, ror #22
   1466c:	andeq	r4, r1, r8, ror #22
   14670:	andeq	r4, r1, r4, asr #24
   14674:	andeq	r4, r1, r8, lsr #19
   14678:	andeq	r4, r1, r0, lsr #19
   1467c:			; <UNDEFINED> instruction: 0x000149b4
   14680:	ldrdeq	r4, [r1], -r0
   14684:	muleq	r1, r8, r9
   14688:			; <UNDEFINED> instruction: 0x000149b0
   1468c:	andeq	r4, r1, r8, ror #22
   14690:	andeq	r4, r1, r8, ror #22
   14694:	andeq	r4, r1, r8, ror #22
   14698:	andeq	r4, r1, r8, ror #22
   1469c:	andeq	r4, r1, r8, ror #22
   146a0:	andeq	r4, r1, r8, ror #22
   146a4:	andeq	r4, r1, r8, ror #22
   146a8:	andeq	r4, r1, r8, ror #22
   146ac:	andeq	r4, r1, r8, ror #22
   146b0:	andeq	r4, r1, r8, ror #22
   146b4:	andeq	r4, r1, r8, ror #22
   146b8:	andeq	r4, r1, r8, ror #22
   146bc:	andeq	r4, r1, r8, ror #22
   146c0:	andeq	r4, r1, r8, ror #22
   146c4:	andeq	r4, r1, r8, ror #22
   146c8:	andeq	r4, r1, r8, ror #22
   146cc:	andeq	r4, r1, r8, ror #22
   146d0:	andeq	r4, r1, r8, ror #22
   146d4:	andeq	r4, r1, ip, asr #18
   146d8:	andeq	r4, r1, r0, asr r9
   146dc:	andeq	r4, r1, r0, asr r9
   146e0:	andeq	r4, r1, r8, lsr r9
   146e4:	andeq	r4, r1, r0, asr r9
   146e8:	andeq	r4, r1, r0, asr r8
   146ec:	andeq	r4, r1, r0, asr r9
   146f0:	ldrdeq	r4, [r1], -r8
   146f4:	andeq	r4, r1, r0, asr r9
   146f8:	andeq	r4, r1, r0, asr r9
   146fc:	andeq	r4, r1, r0, asr r9
   14700:	andeq	r4, r1, r0, asr r8
   14704:	andeq	r4, r1, r0, asr r8
   14708:	andeq	r4, r1, r0, asr r8
   1470c:	andeq	r4, r1, r0, asr r8
   14710:	andeq	r4, r1, r0, asr r8
   14714:	andeq	r4, r1, r0, asr r8
   14718:	andeq	r4, r1, r0, asr r8
   1471c:	andeq	r4, r1, r0, asr r8
   14720:	andeq	r4, r1, r0, asr r8
   14724:	andeq	r4, r1, r0, asr r8
   14728:	andeq	r4, r1, r0, asr r8
   1472c:	andeq	r4, r1, r0, asr r8
   14730:	andeq	r4, r1, r0, asr r8
   14734:	andeq	r4, r1, r0, asr r8
   14738:	andeq	r4, r1, r0, asr r8
   1473c:	andeq	r4, r1, r0, asr r8
   14740:	andeq	r4, r1, r0, asr r9
   14744:	andeq	r4, r1, r0, asr r9
   14748:	andeq	r4, r1, r0, asr r9
   1474c:	andeq	r4, r1, r0, asr r9
   14750:	andeq	r4, r1, r0, lsr #21
   14754:	andeq	r4, r1, r8, ror #22
   14758:	andeq	r4, r1, r0, asr r8
   1475c:	andeq	r4, r1, r0, asr r8
   14760:	andeq	r4, r1, r0, asr r8
   14764:	andeq	r4, r1, r0, asr r8
   14768:	andeq	r4, r1, r0, asr r8
   1476c:	andeq	r4, r1, r0, asr r8
   14770:	andeq	r4, r1, r0, asr r8
   14774:	andeq	r4, r1, r0, asr r8
   14778:	andeq	r4, r1, r0, asr r8
   1477c:	andeq	r4, r1, r0, asr r8
   14780:	andeq	r4, r1, r0, asr r8
   14784:	andeq	r4, r1, r0, asr r8
   14788:	andeq	r4, r1, r0, asr r8
   1478c:	andeq	r4, r1, r0, asr r8
   14790:	andeq	r4, r1, r0, asr r8
   14794:	andeq	r4, r1, r0, asr r8
   14798:	andeq	r4, r1, r0, asr r8
   1479c:	andeq	r4, r1, r0, asr r8
   147a0:	andeq	r4, r1, r0, asr r8
   147a4:	andeq	r4, r1, r0, asr r8
   147a8:	andeq	r4, r1, r0, asr r8
   147ac:	andeq	r4, r1, r0, asr r8
   147b0:	andeq	r4, r1, r0, asr r8
   147b4:	andeq	r4, r1, r0, asr r8
   147b8:	andeq	r4, r1, r0, asr r8
   147bc:	andeq	r4, r1, r0, asr r8
   147c0:	andeq	r4, r1, r0, asr r9
   147c4:	andeq	r4, r1, r8, ror r9
   147c8:	andeq	r4, r1, r0, asr r8
   147cc:	andeq	r4, r1, r0, asr r9
   147d0:	andeq	r4, r1, r0, asr r8
   147d4:	andeq	r4, r1, r0, asr r9
   147d8:	andeq	r4, r1, r0, asr r8
   147dc:	andeq	r4, r1, r0, asr r8
   147e0:	andeq	r4, r1, r0, asr r8
   147e4:	andeq	r4, r1, r0, asr r8
   147e8:	andeq	r4, r1, r0, asr r8
   147ec:	andeq	r4, r1, r0, asr r8
   147f0:	andeq	r4, r1, r0, asr r8
   147f4:	andeq	r4, r1, r0, asr r8
   147f8:	andeq	r4, r1, r0, asr r8
   147fc:	andeq	r4, r1, r0, asr r8
   14800:	andeq	r4, r1, r0, asr r8
   14804:	andeq	r4, r1, r0, asr r8
   14808:	andeq	r4, r1, r0, asr r8
   1480c:	andeq	r4, r1, r0, asr r8
   14810:	andeq	r4, r1, r0, asr r8
   14814:	andeq	r4, r1, r0, asr r8
   14818:	andeq	r4, r1, r0, asr r8
   1481c:	andeq	r4, r1, r0, asr r8
   14820:	andeq	r4, r1, r0, asr r8
   14824:	andeq	r4, r1, r0, asr r8
   14828:	andeq	r4, r1, r0, asr r8
   1482c:	andeq	r4, r1, r0, asr r8
   14830:	andeq	r4, r1, r0, asr r8
   14834:	andeq	r4, r1, r0, asr r8
   14838:	andeq	r4, r1, r0, asr r8
   1483c:	andeq	r4, r1, r0, asr r8
   14840:	andeq	r4, r1, ip, lsl #18
   14844:	andeq	r4, r1, r0, asr r9
   14848:	andeq	r4, r1, ip, lsl #18
   1484c:	andeq	r4, r1, r8, lsr r9
   14850:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14854:	tst	r0, #1
   14858:	bne	14884 <__assert_fail@plt+0x37fc>
   1485c:	ldr	r1, [fp, #16]
   14860:	ubfx	r0, r6, #5, #3
   14864:	mov	r2, #1
   14868:	ldr	r0, [r1, r0, lsl #2]
   1486c:	and	r1, r6, #31
   14870:	tst	r0, r2, lsl r1
   14874:	beq	14884 <__assert_fail@plt+0x37fc>
   14878:	mov	r0, r6
   1487c:	mov	r1, r9
   14880:	b	14898 <__assert_fail@plt+0x3810>
   14884:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14888:	mov	r1, r9
   1488c:	cmp	r0, #0
   14890:	mov	r0, r6
   14894:	beq	14bd8 <__assert_fail@plt+0x3b50>
   14898:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1489c:	tst	r2, #1
   148a0:	bne	151a8 <__assert_fail@plt+0x4120>
   148a4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   148a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   148ac:	subs	r2, r2, #2
   148b0:	movwne	r2, #1
   148b4:	orr	r2, r2, r3
   148b8:	tst	r2, #1
   148bc:	bne	148f8 <__assert_fail@plt+0x3870>
   148c0:	cmp	r8, r4
   148c4:	movcc	r2, #39	; 0x27
   148c8:	strbcc	r2, [r5, r8]
   148cc:	add	r2, r8, #1
   148d0:	cmp	r2, r4
   148d4:	movcc	r3, #36	; 0x24
   148d8:	strbcc	r3, [r5, r2]
   148dc:	add	r2, r8, #2
   148e0:	add	r8, r8, #3
   148e4:	cmp	r2, r4
   148e8:	movcc	r3, #39	; 0x27
   148ec:	strbcc	r3, [r5, r2]
   148f0:	mov	r2, #1
   148f4:	str	r2, [fp, #-56]	; 0xffffffc8
   148f8:	cmp	r8, r4
   148fc:	movcc	r2, #92	; 0x5c
   14900:	strbcc	r2, [r5, r8]
   14904:	add	r8, r8, #1
   14908:	b	14c1c <__assert_fail@plt+0x3b94>
   1490c:	cmp	lr, #1
   14910:	beq	14938 <__assert_fail@plt+0x38b0>
   14914:	mov	r9, #0
   14918:	cmn	lr, #1
   1491c:	bne	14944 <__assert_fail@plt+0x38bc>
   14920:	ldrb	r0, [ip, #1]
   14924:	cmp	r0, #0
   14928:	beq	14938 <__assert_fail@plt+0x38b0>
   1492c:	mvn	lr, #0
   14930:	mov	sl, #0
   14934:	b	14850 <__assert_fail@plt+0x37c8>
   14938:	mov	r9, #0
   1493c:	cmp	r7, #0
   14940:	beq	1494c <__assert_fail@plt+0x38c4>
   14944:	mov	sl, #0
   14948:	b	14850 <__assert_fail@plt+0x37c8>
   1494c:	mov	r1, #1
   14950:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14954:	cmp	r0, #2
   14958:	bne	14970 <__assert_fail@plt+0x38e8>
   1495c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14960:	mov	r9, r1
   14964:	tst	r0, #1
   14968:	beq	14850 <__assert_fail@plt+0x37c8>
   1496c:	b	151a8 <__assert_fail@plt+0x4120>
   14970:	mov	r9, r1
   14974:	b	14850 <__assert_fail@plt+0x37c8>
   14978:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1497c:	cmp	r0, #2
   14980:	bne	14bbc <__assert_fail@plt+0x3b34>
   14984:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14988:	tst	r0, #1
   1498c:	bne	151a8 <__assert_fail@plt+0x4120>
   14990:	mov	sl, #0
   14994:	b	14bd0 <__assert_fail@plt+0x3b48>
   14998:	mov	r0, #102	; 0x66
   1499c:	b	14c44 <__assert_fail@plt+0x3bbc>
   149a0:	mov	r2, #116	; 0x74
   149a4:	b	149b4 <__assert_fail@plt+0x392c>
   149a8:	mov	r0, #98	; 0x62
   149ac:	b	14c44 <__assert_fail@plt+0x3bbc>
   149b0:	mov	r2, #114	; 0x72
   149b4:	ldr	r0, [sp, #68]	; 0x44
   149b8:	tst	r0, #1
   149bc:	mov	r0, r2
   149c0:	bne	14c44 <__assert_fail@plt+0x3bbc>
   149c4:	b	151a8 <__assert_fail@plt+0x4120>
   149c8:	ldr	r0, [sp, #84]	; 0x54
   149cc:	tst	r0, #1
   149d0:	beq	14c60 <__assert_fail@plt+0x3bd8>
   149d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   149d8:	tst	r0, #1
   149dc:	bne	15294 <__assert_fail@plt+0x420c>
   149e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   149e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   149e8:	subs	r0, r0, #2
   149ec:	movwne	r0, #1
   149f0:	orr	r0, r0, r1
   149f4:	tst	r0, #1
   149f8:	bne	14a34 <__assert_fail@plt+0x39ac>
   149fc:	cmp	r8, r4
   14a00:	movcc	r0, #39	; 0x27
   14a04:	strbcc	r0, [r5, r8]
   14a08:	add	r0, r8, #1
   14a0c:	cmp	r0, r4
   14a10:	movcc	r1, #36	; 0x24
   14a14:	strbcc	r1, [r5, r0]
   14a18:	add	r0, r8, #2
   14a1c:	add	r8, r8, #3
   14a20:	cmp	r0, r4
   14a24:	movcc	r1, #39	; 0x27
   14a28:	strbcc	r1, [r5, r0]
   14a2c:	mov	r0, #1
   14a30:	str	r0, [fp, #-56]	; 0xffffffc8
   14a34:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14a38:	cmp	r8, r4
   14a3c:	mov	r9, #0
   14a40:	mov	sl, #1
   14a44:	mov	r6, #48	; 0x30
   14a48:	movcc	r0, #92	; 0x5c
   14a4c:	strbcc	r0, [r5, r8]
   14a50:	add	r0, r8, #1
   14a54:	cmp	r1, #2
   14a58:	beq	14e28 <__assert_fail@plt+0x3da0>
   14a5c:	add	r1, r7, #1
   14a60:	cmp	r1, lr
   14a64:	bcs	14e28 <__assert_fail@plt+0x3da0>
   14a68:	ldrb	r1, [ip, r1]
   14a6c:	sub	r1, r1, #48	; 0x30
   14a70:	uxtb	r1, r1
   14a74:	cmp	r1, #9
   14a78:	bhi	14e28 <__assert_fail@plt+0x3da0>
   14a7c:	cmp	r0, r4
   14a80:	movcc	r1, #48	; 0x30
   14a84:	strbcc	r1, [r5, r0]
   14a88:	add	r0, r8, #2
   14a8c:	add	r8, r8, #3
   14a90:	cmp	r0, r4
   14a94:	movcc	r1, #48	; 0x30
   14a98:	strbcc	r1, [r5, r0]
   14a9c:	b	14850 <__assert_fail@plt+0x37c8>
   14aa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14aa4:	mov	sl, #0
   14aa8:	mov	r6, #63	; 0x3f
   14aac:	cmp	r0, #5
   14ab0:	beq	14e30 <__assert_fail@plt+0x3da8>
   14ab4:	cmp	r0, #2
   14ab8:	bne	14ed8 <__assert_fail@plt+0x3e50>
   14abc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ac0:	mov	r9, #0
   14ac4:	tst	r0, #1
   14ac8:	beq	14850 <__assert_fail@plt+0x37c8>
   14acc:	b	151a8 <__assert_fail@plt+0x4120>
   14ad0:	mov	r0, #118	; 0x76
   14ad4:	b	14c44 <__assert_fail@plt+0x3bbc>
   14ad8:	mov	r0, #1
   14adc:	mov	r6, #39	; 0x27
   14ae0:	str	r0, [sp, #60]	; 0x3c
   14ae4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ae8:	cmp	r0, #2
   14aec:	bne	14c7c <__assert_fail@plt+0x3bf4>
   14af0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14af4:	tst	r0, #1
   14af8:	bne	151a8 <__assert_fail@plt+0x4120>
   14afc:	ldr	r2, [sp, #56]	; 0x38
   14b00:	clz	r1, r4
   14b04:	mov	sl, #0
   14b08:	mov	r9, #1
   14b0c:	lsr	r1, r1, #5
   14b10:	cmp	r2, #0
   14b14:	mov	r0, r2
   14b18:	movwne	r0, #1
   14b1c:	orrs	r0, r0, r1
   14b20:	moveq	r2, r4
   14b24:	moveq	r4, r0
   14b28:	cmp	r8, r4
   14b2c:	str	r2, [sp, #56]	; 0x38
   14b30:	movcc	r0, #39	; 0x27
   14b34:	strbcc	r0, [r5, r8]
   14b38:	add	r0, r8, #1
   14b3c:	cmp	r0, r4
   14b40:	movcc	r1, #92	; 0x5c
   14b44:	strbcc	r1, [r5, r0]
   14b48:	add	r0, r8, #2
   14b4c:	add	r8, r8, #3
   14b50:	cmp	r0, r4
   14b54:	movcc	r1, #39	; 0x27
   14b58:	strbcc	r1, [r5, r0]
   14b5c:	mov	r0, #0
   14b60:	str	r0, [fp, #-56]	; 0xffffffc8
   14b64:	b	14850 <__assert_fail@plt+0x37c8>
   14b68:	ldr	r0, [sp, #40]	; 0x28
   14b6c:	str	r4, [sp, #88]	; 0x58
   14b70:	cmp	r0, #1
   14b74:	bne	14c84 <__assert_fail@plt+0x3bfc>
   14b78:	str	lr, [sp, #28]
   14b7c:	bl	10f68 <__ctype_b_loc@plt>
   14b80:	ldr	r0, [r0]
   14b84:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14b88:	mov	r2, #1
   14b8c:	add	r0, r0, r6, lsl #1
   14b90:	ldrb	r0, [r0, #1]
   14b94:	ubfx	r9, r0, #6, #1
   14b98:	ldr	r0, [sp, #52]	; 0x34
   14b9c:	cmp	r2, #1
   14ba0:	orr	r0, r9, r0
   14ba4:	bhi	14ee0 <__assert_fail@plt+0x3e58>
   14ba8:	tst	r0, #1
   14bac:	beq	14ee0 <__assert_fail@plt+0x3e58>
   14bb0:	ldr	lr, [sp, #28]
   14bb4:	ldr	r4, [sp, #88]	; 0x58
   14bb8:	b	14850 <__assert_fail@plt+0x37c8>
   14bbc:	ldr	r1, [sp, #48]	; 0x30
   14bc0:	mov	sl, #0
   14bc4:	mov	r0, #92	; 0x5c
   14bc8:	cmp	r1, #0
   14bcc:	beq	14c44 <__assert_fail@plt+0x3bbc>
   14bd0:	mov	r6, #92	; 0x5c
   14bd4:	mov	r9, #0
   14bd8:	cmp	sl, #0
   14bdc:	bne	14c14 <__assert_fail@plt+0x3b8c>
   14be0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14be4:	tst	r0, #1
   14be8:	beq	14c14 <__assert_fail@plt+0x3b8c>
   14bec:	cmp	r8, r4
   14bf0:	movcc	r0, #39	; 0x27
   14bf4:	strbcc	r0, [r5, r8]
   14bf8:	add	r0, r8, #1
   14bfc:	add	r8, r8, #2
   14c00:	cmp	r0, r4
   14c04:	movcc	r1, #39	; 0x27
   14c08:	strbcc	r1, [r5, r0]
   14c0c:	mov	r0, #0
   14c10:	str	r0, [fp, #-56]	; 0xffffffc8
   14c14:	mov	r1, r9
   14c18:	mov	r0, r6
   14c1c:	cmp	r8, r4
   14c20:	strbcc	r0, [r5, r8]
   14c24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14c28:	add	r8, r8, #1
   14c2c:	and	r0, r0, r1
   14c30:	str	r0, [fp, #-48]	; 0xffffffd0
   14c34:	add	r7, r7, #1
   14c38:	cmn	lr, #1
   14c3c:	bne	1457c <__assert_fail@plt+0x34f4>
   14c40:	b	14588 <__assert_fail@plt+0x3500>
   14c44:	ldr	r1, [sp, #84]	; 0x54
   14c48:	mov	sl, #0
   14c4c:	mov	r9, #0
   14c50:	tst	r1, #1
   14c54:	mov	r1, #0
   14c58:	beq	14850 <__assert_fail@plt+0x37c8>
   14c5c:	b	14898 <__assert_fail@plt+0x3810>
   14c60:	ldr	r0, [sp, #36]	; 0x24
   14c64:	mov	r6, #0
   14c68:	mov	sl, #0
   14c6c:	mov	r9, #0
   14c70:	cmp	r0, #0
   14c74:	beq	14850 <__assert_fail@plt+0x37c8>
   14c78:	b	14c34 <__assert_fail@plt+0x3bac>
   14c7c:	mov	r9, #1
   14c80:	b	14850 <__assert_fail@plt+0x37c8>
   14c84:	mov	r0, #0
   14c88:	cmn	lr, #1
   14c8c:	sub	r4, fp, #40	; 0x28
   14c90:	str	r0, [fp, #-36]	; 0xffffffdc
   14c94:	str	r0, [fp, #-40]	; 0xffffffd8
   14c98:	bne	14cac <__assert_fail@plt+0x3c24>
   14c9c:	mov	r0, ip
   14ca0:	bl	10f8c <strlen@plt>
   14ca4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14ca8:	mov	lr, r0
   14cac:	ldr	r0, [sp, #72]	; 0x48
   14cb0:	mov	r9, #1
   14cb4:	mov	r2, #0
   14cb8:	str	lr, [sp, #28]
   14cbc:	add	r0, r0, r7
   14cc0:	str	r0, [sp, #20]
   14cc4:	b	14d08 <__assert_fail@plt+0x3c80>
   14cc8:	ldr	r5, [sp, #44]	; 0x2c
   14ccc:	add	r5, r0, r5
   14cd0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14cd4:	bl	10ed8 <iswprint@plt>
   14cd8:	cmp	r0, #0
   14cdc:	sub	r4, fp, #40	; 0x28
   14ce0:	movwne	r0, #1
   14ce4:	and	r9, r9, r0
   14ce8:	mov	r0, r4
   14cec:	bl	10e9c <mbsinit@plt>
   14cf0:	mov	r2, r5
   14cf4:	ldr	lr, [sp, #28]
   14cf8:	ldr	r5, [fp, #-84]	; 0xffffffac
   14cfc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14d00:	cmp	r0, #0
   14d04:	bne	14b98 <__assert_fail@plt+0x3b10>
   14d08:	add	r0, r2, r7
   14d0c:	str	r2, [sp, #44]	; 0x2c
   14d10:	mov	r3, r4
   14d14:	add	r1, ip, r0
   14d18:	str	r0, [sp, #24]
   14d1c:	sub	r2, lr, r0
   14d20:	sub	r0, fp, #44	; 0x2c
   14d24:	bl	184bc <__assert_fail@plt+0x7434>
   14d28:	cmp	r0, #0
   14d2c:	beq	150d0 <__assert_fail@plt+0x4048>
   14d30:	cmn	r0, #1
   14d34:	beq	1508c <__assert_fail@plt+0x4004>
   14d38:	ldr	lr, [sp, #28]
   14d3c:	cmn	r0, #2
   14d40:	beq	15094 <__assert_fail@plt+0x400c>
   14d44:	ldr	r2, [sp, #64]	; 0x40
   14d48:	ldr	r4, [sp, #88]	; 0x58
   14d4c:	ldr	ip, [sp, #84]	; 0x54
   14d50:	cmp	r0, #2
   14d54:	mov	r1, #0
   14d58:	movwcc	r1, #1
   14d5c:	eor	r2, r2, #1
   14d60:	orrs	r1, r2, r1
   14d64:	bne	14cc8 <__assert_fail@plt+0x3c40>
   14d68:	ldr	r1, [sp, #44]	; 0x2c
   14d6c:	ldr	r2, [sp, #20]
   14d70:	add	r1, r2, r1
   14d74:	sub	r2, r0, #1
   14d78:	b	14d88 <__assert_fail@plt+0x3d00>
   14d7c:	add	r1, r1, #1
   14d80:	subs	r2, r2, #1
   14d84:	beq	14cc8 <__assert_fail@plt+0x3c40>
   14d88:	ldrb	r3, [r1]
   14d8c:	sub	r3, r3, #91	; 0x5b
   14d90:	cmp	r3, #33	; 0x21
   14d94:	bhi	14d7c <__assert_fail@plt+0x3cf4>
   14d98:	add	r5, pc, #0
   14d9c:	ldr	pc, [r5, r3, lsl #2]
   14da0:	andeq	r5, r1, r4, lsl #3
   14da4:	andeq	r5, r1, r4, lsl #3
   14da8:	andeq	r4, r1, ip, ror sp
   14dac:	andeq	r5, r1, r4, lsl #3
   14db0:	andeq	r4, r1, ip, ror sp
   14db4:	andeq	r5, r1, r4, lsl #3
   14db8:	andeq	r4, r1, ip, ror sp
   14dbc:	andeq	r4, r1, ip, ror sp
   14dc0:	andeq	r4, r1, ip, ror sp
   14dc4:	andeq	r4, r1, ip, ror sp
   14dc8:	andeq	r4, r1, ip, ror sp
   14dcc:	andeq	r4, r1, ip, ror sp
   14dd0:	andeq	r4, r1, ip, ror sp
   14dd4:	andeq	r4, r1, ip, ror sp
   14dd8:	andeq	r4, r1, ip, ror sp
   14ddc:	andeq	r4, r1, ip, ror sp
   14de0:	andeq	r4, r1, ip, ror sp
   14de4:	andeq	r4, r1, ip, ror sp
   14de8:	andeq	r4, r1, ip, ror sp
   14dec:	andeq	r4, r1, ip, ror sp
   14df0:	andeq	r4, r1, ip, ror sp
   14df4:	andeq	r4, r1, ip, ror sp
   14df8:	andeq	r4, r1, ip, ror sp
   14dfc:	andeq	r4, r1, ip, ror sp
   14e00:	andeq	r4, r1, ip, ror sp
   14e04:	andeq	r4, r1, ip, ror sp
   14e08:	andeq	r4, r1, ip, ror sp
   14e0c:	andeq	r4, r1, ip, ror sp
   14e10:	andeq	r4, r1, ip, ror sp
   14e14:	andeq	r4, r1, ip, ror sp
   14e18:	andeq	r4, r1, ip, ror sp
   14e1c:	andeq	r4, r1, ip, ror sp
   14e20:	andeq	r4, r1, ip, ror sp
   14e24:	andeq	r5, r1, r4, lsl #3
   14e28:	mov	r8, r0
   14e2c:	b	14850 <__assert_fail@plt+0x37c8>
   14e30:	ldr	r0, [sp, #32]
   14e34:	cmp	r0, #0
   14e38:	beq	14ed8 <__assert_fail@plt+0x3e50>
   14e3c:	add	r0, r7, #2
   14e40:	cmp	r0, lr
   14e44:	bcs	14ed8 <__assert_fail@plt+0x3e50>
   14e48:	add	r1, r7, ip
   14e4c:	ldrb	r1, [r1, #1]
   14e50:	cmp	r1, #63	; 0x3f
   14e54:	bne	14ed8 <__assert_fail@plt+0x3e50>
   14e58:	ldrb	r9, [ip, r0]
   14e5c:	sub	r2, r9, #33	; 0x21
   14e60:	cmp	r2, #29
   14e64:	bhi	14ed8 <__assert_fail@plt+0x3e50>
   14e68:	movw	r1, #20929	; 0x51c1
   14e6c:	mov	r3, #1
   14e70:	movt	r1, #14336	; 0x3800
   14e74:	tst	r1, r3, lsl r2
   14e78:	beq	14ed8 <__assert_fail@plt+0x3e50>
   14e7c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14e80:	tst	r1, #1
   14e84:	bne	151a8 <__assert_fail@plt+0x4120>
   14e88:	cmp	r8, r4
   14e8c:	add	r2, r8, #1
   14e90:	mov	r6, r9
   14e94:	mov	r7, r0
   14e98:	mov	r9, #0
   14e9c:	movcc	r1, #63	; 0x3f
   14ea0:	strbcc	r1, [r5, r8]
   14ea4:	cmp	r2, r4
   14ea8:	movcc	r1, #34	; 0x22
   14eac:	strbcc	r1, [r5, r2]
   14eb0:	add	r2, r8, #2
   14eb4:	cmp	r2, r4
   14eb8:	movcc	r1, #34	; 0x22
   14ebc:	strbcc	r1, [r5, r2]
   14ec0:	add	r2, r8, #3
   14ec4:	add	r8, r8, #4
   14ec8:	cmp	r2, r4
   14ecc:	movcc	r1, #63	; 0x3f
   14ed0:	strbcc	r1, [r5, r2]
   14ed4:	b	14850 <__assert_fail@plt+0x37c8>
   14ed8:	mov	r9, #0
   14edc:	b	14850 <__assert_fail@plt+0x37c8>
   14ee0:	ldr	lr, [sp, #28]
   14ee4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   14ee8:	add	r1, r2, r7
   14eec:	mov	r2, #0
   14ef0:	str	r1, [sp, #44]	; 0x2c
   14ef4:	tst	r0, #1
   14ef8:	bne	15014 <__assert_fail@plt+0x3f8c>
   14efc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14f00:	tst	r1, #1
   14f04:	bne	151a4 <__assert_fail@plt+0x411c>
   14f08:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14f0c:	subs	r2, r1, #2
   14f10:	movwne	r2, #1
   14f14:	orr	r2, r2, r4
   14f18:	tst	r2, #1
   14f1c:	bne	14f60 <__assert_fail@plt+0x3ed8>
   14f20:	ldr	r1, [sp, #88]	; 0x58
   14f24:	add	r2, r8, #1
   14f28:	mov	r4, #1
   14f2c:	cmp	r8, r1
   14f30:	movcc	r1, #39	; 0x27
   14f34:	strbcc	r1, [r5, r8]
   14f38:	ldr	r1, [sp, #88]	; 0x58
   14f3c:	cmp	r2, r1
   14f40:	movcc	r1, #36	; 0x24
   14f44:	strbcc	r1, [r5, r2]
   14f48:	ldr	r1, [sp, #88]	; 0x58
   14f4c:	add	r2, r8, #2
   14f50:	add	r8, r8, #3
   14f54:	cmp	r2, r1
   14f58:	movcc	r1, #39	; 0x27
   14f5c:	strbcc	r1, [r5, r2]
   14f60:	ldr	r1, [sp, #88]	; 0x58
   14f64:	add	r2, r8, #1
   14f68:	cmp	r8, r1
   14f6c:	movcc	r1, #92	; 0x5c
   14f70:	strbcc	r1, [r5, r8]
   14f74:	ldr	r1, [sp, #88]	; 0x58
   14f78:	cmp	r2, r1
   14f7c:	bcs	14f90 <__assert_fail@plt+0x3f08>
   14f80:	uxtb	r3, r6
   14f84:	mov	r1, #48	; 0x30
   14f88:	orr	r3, r1, r3, lsr #6
   14f8c:	strb	r3, [r5, r2]
   14f90:	ldr	r1, [sp, #88]	; 0x58
   14f94:	add	r2, r8, #2
   14f98:	add	r8, r8, #3
   14f9c:	cmp	r2, r1
   14fa0:	lsrcc	r3, r6, #3
   14fa4:	movcc	r1, #6
   14fa8:	bficc	r3, r1, #3, #29
   14fac:	mov	r1, #6
   14fb0:	bfi	r6, r1, #3, #29
   14fb4:	strbcc	r3, [r5, r2]
   14fb8:	mov	r2, #1
   14fbc:	b	1503c <__assert_fail@plt+0x3fb4>
   14fc0:	ldr	r1, [sp, #88]	; 0x58
   14fc4:	ldr	r5, [fp, #-84]	; 0xffffffac
   14fc8:	ldr	r4, [sp, #88]	; 0x58
   14fcc:	cmp	r8, r1
   14fd0:	movcc	r1, #39	; 0x27
   14fd4:	strbcc	r1, [r5, r8]
   14fd8:	add	r1, r8, #1
   14fdc:	add	r8, r8, #2
   14fe0:	cmp	r1, r4
   14fe4:	movcc	r4, #39	; 0x27
   14fe8:	strbcc	r4, [r5, r1]
   14fec:	mov	r4, #0
   14ff0:	ldr	r1, [sp, #88]	; 0x58
   14ff4:	cmp	r8, r1
   14ff8:	ldr	r1, [sp, #72]	; 0x48
   14ffc:	strbcc	r6, [r5, r8]
   15000:	add	r8, r8, #1
   15004:	ldrb	r6, [r1, r7]
   15008:	mov	r7, r3
   1500c:	tst	r0, #1
   15010:	beq	14efc <__assert_fail@plt+0x3e74>
   15014:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15018:	tst	r1, #1
   1501c:	beq	15034 <__assert_fail@plt+0x3fac>
   15020:	ldr	r1, [sp, #88]	; 0x58
   15024:	cmp	r8, r1
   15028:	movcc	r1, #92	; 0x5c
   1502c:	strbcc	r1, [r5, r8]
   15030:	add	r8, r8, #1
   15034:	mov	r1, #0
   15038:	str	r1, [fp, #-52]	; 0xffffffcc
   1503c:	ldr	r1, [sp, #44]	; 0x2c
   15040:	add	r3, r7, #1
   15044:	and	sl, r2, #1
   15048:	cmp	r1, r3
   1504c:	bls	15070 <__assert_fail@plt+0x3fe8>
   15050:	cmp	sl, #0
   15054:	mvn	r5, r4
   15058:	movwne	sl, #1
   1505c:	orr	r5, r5, sl
   15060:	tst	r5, #1
   15064:	beq	14fc0 <__assert_fail@plt+0x3f38>
   15068:	ldr	r5, [fp, #-84]	; 0xffffffac
   1506c:	b	14ff0 <__assert_fail@plt+0x3f68>
   15070:	str	r4, [fp, #-56]	; 0xffffffc8
   15074:	ldr	r4, [sp, #88]	; 0x58
   15078:	cmp	sl, #0
   1507c:	movwne	sl, #1
   15080:	cmp	sl, #0
   15084:	beq	14be0 <__assert_fail@plt+0x3b58>
   15088:	b	14c14 <__assert_fail@plt+0x3b8c>
   1508c:	mov	r9, #0
   15090:	b	150d0 <__assert_fail@plt+0x4048>
   15094:	ldr	r0, [sp, #24]
   15098:	mov	r9, #0
   1509c:	cmp	lr, r0
   150a0:	bls	150d0 <__assert_fail@plt+0x4048>
   150a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   150a8:	ldr	r2, [sp, #44]	; 0x2c
   150ac:	add	r0, ip, r7
   150b0:	ldrb	r1, [r0, r2]
   150b4:	cmp	r1, #0
   150b8:	beq	14b98 <__assert_fail@plt+0x3b10>
   150bc:	add	r2, r2, #1
   150c0:	add	r1, r7, r2
   150c4:	cmp	r1, lr
   150c8:	bcc	150b0 <__assert_fail@plt+0x4028>
   150cc:	b	14b98 <__assert_fail@plt+0x3b10>
   150d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   150d4:	ldr	r2, [sp, #44]	; 0x2c
   150d8:	b	14b98 <__assert_fail@plt+0x3b10>
   150dc:	mov	lr, r7
   150e0:	b	150e8 <__assert_fail@plt+0x4060>
   150e4:	mvn	lr, #0
   150e8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   150ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   150f0:	eor	r0, r1, #2
   150f4:	orr	r0, r0, r8
   150f8:	clz	r0, r0
   150fc:	lsr	r0, r0, #5
   15100:	tst	r2, r0
   15104:	bne	151a8 <__assert_fail@plt+0x4120>
   15108:	subs	r0, r1, #2
   1510c:	movwne	r0, #1
   15110:	orr	r0, r2, r0
   15114:	tst	r0, #1
   15118:	ldreq	r0, [sp, #60]	; 0x3c
   1511c:	eoreq	r0, r0, #1
   15120:	tsteq	r0, #1
   15124:	bne	1523c <__assert_fail@plt+0x41b4>
   15128:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1512c:	mov	sl, lr
   15130:	tst	r0, #1
   15134:	bne	15208 <__assert_fail@plt+0x4180>
   15138:	ldr	r6, [sp, #56]	; 0x38
   1513c:	mov	r9, #0
   15140:	cmp	r6, #0
   15144:	beq	15234 <__assert_fail@plt+0x41ac>
   15148:	ldr	r0, [sp, #84]	; 0x54
   1514c:	mov	r1, #0
   15150:	mov	r7, #2
   15154:	cmp	r4, #0
   15158:	str	r1, [fp, #-48]	; 0xffffffd0
   1515c:	mov	r1, #0
   15160:	str	r1, [fp, #-76]	; 0xffffffb4
   15164:	beq	14304 <__assert_fail@plt+0x327c>
   15168:	b	1523c <__assert_fail@plt+0x41b4>
   1516c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15170:	ldr	r1, [fp, #12]
   15174:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15178:	mov	lr, r4
   1517c:	mov	r4, r6
   15180:	b	151c8 <__assert_fail@plt+0x4140>
   15184:	tst	ip, #1
   15188:	ldr	r5, [fp, #-84]	; 0xffffffac
   1518c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15190:	ldr	r1, [fp, #12]
   15194:	mov	r0, #2
   15198:	movwne	r0, #4
   1519c:	mov	r2, r0
   151a0:	b	151c8 <__assert_fail@plt+0x4140>
   151a4:	ldr	r4, [sp, #88]	; 0x58
   151a8:	ldr	r1, [sp, #84]	; 0x54
   151ac:	mov	r0, #2
   151b0:	tst	r1, #1
   151b4:	movwne	r0, #4
   151b8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   151bc:	ldr	r1, [fp, #12]
   151c0:	cmp	r2, #2
   151c4:	moveq	r2, r0
   151c8:	mov	r0, #0
   151cc:	bic	r1, r1, #2
   151d0:	str	r2, [sp]
   151d4:	mov	r2, ip
   151d8:	mov	r3, lr
   151dc:	str	r0, [sp, #8]
   151e0:	ldr	r0, [sp, #76]	; 0x4c
   151e4:	str	r1, [sp, #4]
   151e8:	mov	r1, r4
   151ec:	str	r0, [sp, #12]
   151f0:	ldr	r0, [sp, #80]	; 0x50
   151f4:	str	r0, [sp, #16]
   151f8:	mov	r0, r5
   151fc:	bl	14274 <__assert_fail@plt+0x31ec>
   15200:	mov	r8, r0
   15204:	b	15288 <__assert_fail@plt+0x4200>
   15208:	mov	r0, #5
   1520c:	ldr	r1, [sp, #56]	; 0x38
   15210:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15214:	mov	r3, sl
   15218:	str	r0, [sp]
   1521c:	ldr	r0, [fp, #12]
   15220:	str	r0, [sp, #4]
   15224:	ldr	r0, [fp, #16]
   15228:	str	r0, [sp, #8]
   1522c:	ldr	r0, [sp, #76]	; 0x4c
   15230:	b	151ec <__assert_fail@plt+0x4164>
   15234:	mov	r0, #0
   15238:	str	r0, [fp, #-76]	; 0xffffffb4
   1523c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15240:	cmp	r1, #0
   15244:	beq	1527c <__assert_fail@plt+0x41f4>
   15248:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1524c:	tst	r0, #1
   15250:	bne	1527c <__assert_fail@plt+0x41f4>
   15254:	ldrb	r0, [r1]
   15258:	cmp	r0, #0
   1525c:	beq	1527c <__assert_fail@plt+0x41f4>
   15260:	add	r1, r1, #1
   15264:	cmp	r8, r4
   15268:	strbcc	r0, [r5, r8]
   1526c:	add	r8, r8, #1
   15270:	ldrb	r0, [r1], #1
   15274:	cmp	r0, #0
   15278:	bne	15264 <__assert_fail@plt+0x41dc>
   1527c:	cmp	r8, r4
   15280:	movcc	r0, #0
   15284:	strbcc	r0, [r5, r8]
   15288:	mov	r0, r8
   1528c:	sub	sp, fp, #28
   15290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15294:	mov	r0, #4
   15298:	b	151b8 <__assert_fail@plt+0x4130>
   1529c:	bl	1107c <abort@plt>
   152a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152a4:	add	fp, sp, #28
   152a8:	sub	sp, sp, #28
   152ac:	movw	r5, #41336	; 0xa178
   152b0:	cmp	r2, #0
   152b4:	mov	r4, r1
   152b8:	mov	r7, r0
   152bc:	str	r0, [sp, #20]
   152c0:	movt	r5, #2
   152c4:	movne	r5, r2
   152c8:	bl	10fa4 <__errno_location@plt>
   152cc:	mov	sl, r0
   152d0:	ldr	r2, [r5, #40]	; 0x28
   152d4:	ldr	r3, [r5, #44]	; 0x2c
   152d8:	ldm	r5, {r0, r1}
   152dc:	orr	r8, r1, #1
   152e0:	add	r9, r5, #8
   152e4:	mov	r1, #0
   152e8:	ldr	r6, [sl]
   152ec:	stm	sp, {r0, r8, r9}
   152f0:	mov	r0, #0
   152f4:	str	r2, [sp, #12]
   152f8:	str	r3, [sp, #16]
   152fc:	mov	r2, r7
   15300:	mov	r3, r4
   15304:	str	r6, [sp, #24]
   15308:	mov	r6, r4
   1530c:	bl	14274 <__assert_fail@plt+0x31ec>
   15310:	add	r7, r0, #1
   15314:	mov	r0, r7
   15318:	bl	164c0 <__assert_fail@plt+0x5438>
   1531c:	mov	r4, r0
   15320:	ldr	r0, [r5]
   15324:	ldr	r2, [r5, #44]	; 0x2c
   15328:	ldr	r1, [r5, #40]	; 0x28
   1532c:	mov	r3, r6
   15330:	stm	sp, {r0, r8, r9}
   15334:	str	r2, [sp, #16]
   15338:	ldr	r2, [sp, #20]
   1533c:	str	r1, [sp, #12]
   15340:	mov	r0, r4
   15344:	mov	r1, r7
   15348:	bl	14274 <__assert_fail@plt+0x31ec>
   1534c:	ldr	r0, [sp, #24]
   15350:	str	r0, [sl]
   15354:	mov	r0, r4
   15358:	sub	sp, fp, #28
   1535c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15364:	add	fp, sp, #28
   15368:	sub	sp, sp, #36	; 0x24
   1536c:	movw	r8, #41336	; 0xa178
   15370:	cmp	r3, #0
   15374:	mov	r4, r2
   15378:	str	r2, [sp, #24]
   1537c:	mov	r5, r1
   15380:	mov	r6, r0
   15384:	str	r0, [sp, #20]
   15388:	movt	r8, #2
   1538c:	movne	r8, r3
   15390:	bl	10fa4 <__errno_location@plt>
   15394:	str	r0, [sp, #28]
   15398:	ldr	r1, [r8, #40]	; 0x28
   1539c:	ldr	r2, [r8, #44]	; 0x2c
   153a0:	ldr	r7, [r0]
   153a4:	cmp	r4, #0
   153a8:	add	sl, r8, #8
   153ac:	mov	r0, #0
   153b0:	ldm	r8, {r3, r9}
   153b4:	orreq	r9, r9, #1
   153b8:	stm	sp, {r3, r9, sl}
   153bc:	str	r1, [sp, #12]
   153c0:	str	r2, [sp, #16]
   153c4:	mov	r1, #0
   153c8:	mov	r2, r6
   153cc:	mov	r3, r5
   153d0:	str	r7, [sp, #32]
   153d4:	mov	r7, r5
   153d8:	bl	14274 <__assert_fail@plt+0x31ec>
   153dc:	add	r4, r0, #1
   153e0:	mov	r5, r0
   153e4:	mov	r0, r4
   153e8:	bl	164c0 <__assert_fail@plt+0x5438>
   153ec:	mov	r6, r0
   153f0:	ldr	r0, [r8]
   153f4:	ldr	r2, [r8, #44]	; 0x2c
   153f8:	ldr	r1, [r8, #40]	; 0x28
   153fc:	mov	r3, r7
   15400:	stm	sp, {r0, r9, sl}
   15404:	str	r2, [sp, #16]
   15408:	ldr	r2, [sp, #20]
   1540c:	str	r1, [sp, #12]
   15410:	mov	r0, r6
   15414:	mov	r1, r4
   15418:	bl	14274 <__assert_fail@plt+0x31ec>
   1541c:	ldr	r0, [sp, #24]
   15420:	ldr	r1, [sp, #32]
   15424:	ldr	r2, [sp, #28]
   15428:	cmp	r0, #0
   1542c:	str	r1, [r2]
   15430:	strne	r5, [r0]
   15434:	mov	r0, r6
   15438:	sub	sp, fp, #28
   1543c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15440:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15444:	add	fp, sp, #24
   15448:	movw	r5, #41204	; 0xa0f4
   1544c:	movw	r8, #41200	; 0xa0f0
   15450:	movt	r5, #2
   15454:	movt	r8, #2
   15458:	ldr	r0, [r5]
   1545c:	ldr	r4, [r8]
   15460:	cmp	r0, #2
   15464:	blt	15490 <__assert_fail@plt+0x4408>
   15468:	add	r7, r4, #12
   1546c:	mov	r6, #0
   15470:	ldr	r0, [r7, r6, lsl #3]
   15474:	bl	13f68 <__assert_fail@plt+0x2ee0>
   15478:	ldr	r1, [r5]
   1547c:	add	r2, r6, #2
   15480:	add	r0, r6, #1
   15484:	mov	r6, r0
   15488:	cmp	r2, r1
   1548c:	blt	15470 <__assert_fail@plt+0x43e8>
   15490:	ldr	r0, [r4, #4]
   15494:	movw	r9, #41384	; 0xa1a8
   15498:	movw	r7, #41208	; 0xa0f8
   1549c:	movt	r9, #2
   154a0:	movt	r7, #2
   154a4:	cmp	r0, r9
   154a8:	beq	154b8 <__assert_fail@plt+0x4430>
   154ac:	bl	13f68 <__assert_fail@plt+0x2ee0>
   154b0:	mov	r0, #256	; 0x100
   154b4:	stm	r7, {r0, r9}
   154b8:	cmp	r4, r7
   154bc:	beq	154cc <__assert_fail@plt+0x4444>
   154c0:	mov	r0, r4
   154c4:	bl	13f68 <__assert_fail@plt+0x2ee0>
   154c8:	str	r7, [r8]
   154cc:	mov	r0, #1
   154d0:	str	r0, [r5]
   154d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154d8:	movw	r3, #41336	; 0xa178
   154dc:	mvn	r2, #0
   154e0:	movt	r3, #2
   154e4:	b	154e8 <__assert_fail@plt+0x4460>
   154e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154ec:	add	fp, sp, #28
   154f0:	sub	sp, sp, #44	; 0x2c
   154f4:	mov	r7, r3
   154f8:	str	r2, [sp, #36]	; 0x24
   154fc:	str	r1, [sp, #32]
   15500:	mov	r5, r0
   15504:	bl	10fa4 <__errno_location@plt>
   15508:	cmp	r5, #0
   1550c:	bmi	1567c <__assert_fail@plt+0x45f4>
   15510:	cmn	r5, #-2147483647	; 0x80000001
   15514:	beq	1567c <__assert_fail@plt+0x45f4>
   15518:	movw	r8, #41204	; 0xa0f4
   1551c:	movw	r4, #41200	; 0xa0f0
   15520:	str	r0, [sp, #28]
   15524:	ldr	r0, [r0]
   15528:	movt	r8, #2
   1552c:	movt	r4, #2
   15530:	ldr	r1, [r8]
   15534:	ldr	r6, [r4]
   15538:	str	r0, [sp, #24]
   1553c:	cmp	r1, r5
   15540:	ble	1554c <__assert_fail@plt+0x44c4>
   15544:	mov	sl, r6
   15548:	b	155b8 <__assert_fail@plt+0x4530>
   1554c:	movw	r9, #41208	; 0xa0f8
   15550:	mov	r0, #8
   15554:	str	r1, [fp, #-32]	; 0xffffffe0
   15558:	sub	r1, r5, r1
   1555c:	mvn	r3, #-2147483648	; 0x80000000
   15560:	movt	r9, #2
   15564:	str	r0, [sp]
   15568:	add	r2, r1, #1
   1556c:	sub	r1, fp, #32
   15570:	subs	r0, r6, r9
   15574:	movne	r0, r6
   15578:	bl	166c0 <__assert_fail@plt+0x5638>
   1557c:	mov	sl, r0
   15580:	cmp	r6, r9
   15584:	str	r0, [r4]
   15588:	bne	15594 <__assert_fail@plt+0x450c>
   1558c:	ldrd	r0, [r9]
   15590:	stm	sl, {r0, r1}
   15594:	ldr	r1, [r8]
   15598:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1559c:	add	r0, sl, r1, lsl #3
   155a0:	sub	r1, r2, r1
   155a4:	lsl	r2, r1, #3
   155a8:	mov	r1, #0
   155ac:	bl	10fbc <memset@plt>
   155b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   155b4:	str	r0, [r8]
   155b8:	mov	r9, sl
   155bc:	ldm	r7, {r0, r1}
   155c0:	orr	r8, r1, #1
   155c4:	add	r1, r7, #8
   155c8:	ldr	r2, [r7, #40]	; 0x28
   155cc:	ldr	r3, [r7, #44]	; 0x2c
   155d0:	ldr	r6, [r9, r5, lsl #3]!
   155d4:	str	r1, [sp, #20]
   155d8:	ldr	r4, [r9, #4]!
   155dc:	stm	sp, {r0, r8}
   155e0:	add	r0, sp, #8
   155e4:	stm	r0, {r1, r2, r3}
   155e8:	ldr	r2, [sp, #32]
   155ec:	ldr	r3, [sp, #36]	; 0x24
   155f0:	mov	r1, r6
   155f4:	mov	r0, r4
   155f8:	bl	14274 <__assert_fail@plt+0x31ec>
   155fc:	cmp	r6, r0
   15600:	bhi	15664 <__assert_fail@plt+0x45dc>
   15604:	add	r6, r0, #1
   15608:	movw	r0, #41384	; 0xa1a8
   1560c:	movt	r0, #2
   15610:	str	r6, [sl, r5, lsl #3]
   15614:	cmp	r4, r0
   15618:	beq	15624 <__assert_fail@plt+0x459c>
   1561c:	mov	r0, r4
   15620:	bl	13f68 <__assert_fail@plt+0x2ee0>
   15624:	mov	r0, r6
   15628:	bl	164c0 <__assert_fail@plt+0x5438>
   1562c:	str	r0, [r9]
   15630:	mov	r4, r0
   15634:	add	r3, sp, #8
   15638:	ldr	r0, [r7]
   1563c:	ldr	r1, [r7, #40]	; 0x28
   15640:	ldr	r2, [r7, #44]	; 0x2c
   15644:	stm	sp, {r0, r8}
   15648:	ldr	r0, [sp, #20]
   1564c:	stm	r3, {r0, r1, r2}
   15650:	ldr	r2, [sp, #32]
   15654:	ldr	r3, [sp, #36]	; 0x24
   15658:	mov	r0, r4
   1565c:	mov	r1, r6
   15660:	bl	14274 <__assert_fail@plt+0x31ec>
   15664:	ldr	r0, [sp, #28]
   15668:	ldr	r1, [sp, #24]
   1566c:	str	r1, [r0]
   15670:	mov	r0, r4
   15674:	sub	sp, fp, #28
   15678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1567c:	bl	1107c <abort@plt>
   15680:	movw	r3, #41336	; 0xa178
   15684:	movt	r3, #2
   15688:	b	154e8 <__assert_fail@plt+0x4460>
   1568c:	movw	r3, #41336	; 0xa178
   15690:	mov	r1, r0
   15694:	mov	r0, #0
   15698:	mvn	r2, #0
   1569c:	movt	r3, #2
   156a0:	b	154e8 <__assert_fail@plt+0x4460>
   156a4:	movw	r3, #41336	; 0xa178
   156a8:	mov	r2, r1
   156ac:	mov	r1, r0
   156b0:	mov	r0, #0
   156b4:	movt	r3, #2
   156b8:	b	154e8 <__assert_fail@plt+0x4460>
   156bc:	push	{fp, lr}
   156c0:	mov	fp, sp
   156c4:	sub	sp, sp, #48	; 0x30
   156c8:	vmov.i32	q8, #0	; 0x00000000
   156cc:	mov	ip, #32
   156d0:	mov	r3, sp
   156d4:	mov	lr, r2
   156d8:	cmp	r1, #10
   156dc:	add	r2, r3, #16
   156e0:	vst1.64	{d16-d17}, [r3], ip
   156e4:	vst1.64	{d16-d17}, [r2]
   156e8:	vst1.64	{d16-d17}, [r3]
   156ec:	beq	1570c <__assert_fail@plt+0x4684>
   156f0:	str	r1, [sp]
   156f4:	mov	r3, sp
   156f8:	mov	r1, lr
   156fc:	mvn	r2, #0
   15700:	bl	154e8 <__assert_fail@plt+0x4460>
   15704:	mov	sp, fp
   15708:	pop	{fp, pc}
   1570c:	bl	1107c <abort@plt>
   15710:	push	{r4, sl, fp, lr}
   15714:	add	fp, sp, #8
   15718:	sub	sp, sp, #48	; 0x30
   1571c:	vmov.i32	q8, #0	; 0x00000000
   15720:	mov	ip, r3
   15724:	mov	r3, sp
   15728:	mov	lr, #32
   1572c:	cmp	r1, #10
   15730:	add	r4, r3, #16
   15734:	vst1.64	{d16-d17}, [r3], lr
   15738:	vst1.64	{d16-d17}, [r4]
   1573c:	vst1.64	{d16-d17}, [r3]
   15740:	beq	15760 <__assert_fail@plt+0x46d8>
   15744:	str	r1, [sp]
   15748:	mov	r1, r2
   1574c:	mov	r3, sp
   15750:	mov	r2, ip
   15754:	bl	154e8 <__assert_fail@plt+0x4460>
   15758:	sub	sp, fp, #8
   1575c:	pop	{r4, sl, fp, pc}
   15760:	bl	1107c <abort@plt>
   15764:	push	{fp, lr}
   15768:	mov	fp, sp
   1576c:	sub	sp, sp, #48	; 0x30
   15770:	vmov.i32	q8, #0	; 0x00000000
   15774:	mov	r3, sp
   15778:	mov	ip, #32
   1577c:	cmp	r0, #10
   15780:	add	r2, r3, #16
   15784:	vst1.64	{d16-d17}, [r3], ip
   15788:	vst1.64	{d16-d17}, [r2]
   1578c:	vst1.64	{d16-d17}, [r3]
   15790:	beq	157b0 <__assert_fail@plt+0x4728>
   15794:	str	r0, [sp]
   15798:	mov	r3, sp
   1579c:	mov	r0, #0
   157a0:	mvn	r2, #0
   157a4:	bl	154e8 <__assert_fail@plt+0x4460>
   157a8:	mov	sp, fp
   157ac:	pop	{fp, pc}
   157b0:	bl	1107c <abort@plt>
   157b4:	push	{fp, lr}
   157b8:	mov	fp, sp
   157bc:	sub	sp, sp, #48	; 0x30
   157c0:	vmov.i32	q8, #0	; 0x00000000
   157c4:	mov	r3, sp
   157c8:	mov	ip, #32
   157cc:	cmp	r0, #10
   157d0:	add	lr, r3, #16
   157d4:	vst1.64	{d16-d17}, [r3], ip
   157d8:	vst1.64	{d16-d17}, [lr]
   157dc:	vst1.64	{d16-d17}, [r3]
   157e0:	beq	157fc <__assert_fail@plt+0x4774>
   157e4:	str	r0, [sp]
   157e8:	mov	r3, sp
   157ec:	mov	r0, #0
   157f0:	bl	154e8 <__assert_fail@plt+0x4460>
   157f4:	mov	sp, fp
   157f8:	pop	{fp, pc}
   157fc:	bl	1107c <abort@plt>
   15800:	push	{r4, sl, fp, lr}
   15804:	add	fp, sp, #8
   15808:	sub	sp, sp, #48	; 0x30
   1580c:	mov	lr, r0
   15810:	movw	r0, #41336	; 0xa178
   15814:	mov	ip, r1
   15818:	mov	r1, #32
   1581c:	mov	r4, #1
   15820:	movt	r0, #2
   15824:	add	r3, r0, #16
   15828:	vld1.64	{d16-d17}, [r0], r1
   1582c:	vld1.64	{d20-d21}, [r0]
   15830:	vld1.64	{d18-d19}, [r3]
   15834:	mov	r3, sp
   15838:	add	r0, r3, #32
   1583c:	add	r1, r3, #16
   15840:	vst1.64	{d20-d21}, [r0]
   15844:	mov	r0, #28
   15848:	vst1.64	{d18-d19}, [r1]
   1584c:	mov	r1, r3
   15850:	and	r0, r0, r2, lsr #3
   15854:	and	r2, r2, #31
   15858:	vst1.64	{d16-d17}, [r1], r0
   1585c:	ldr	r0, [r1, #8]
   15860:	bic	r4, r4, r0, lsr r2
   15864:	eor	r0, r0, r4, lsl r2
   15868:	mov	r2, ip
   1586c:	str	r0, [r1, #8]
   15870:	mov	r0, #0
   15874:	mov	r1, lr
   15878:	bl	154e8 <__assert_fail@plt+0x4460>
   1587c:	sub	sp, fp, #8
   15880:	pop	{r4, sl, fp, pc}
   15884:	push	{fp, lr}
   15888:	mov	fp, sp
   1588c:	sub	sp, sp, #48	; 0x30
   15890:	mov	ip, r0
   15894:	movw	r0, #41336	; 0xa178
   15898:	mov	r2, #32
   1589c:	movt	r0, #2
   158a0:	add	r3, r0, #16
   158a4:	vld1.64	{d16-d17}, [r0], r2
   158a8:	vld1.64	{d20-d21}, [r0]
   158ac:	vld1.64	{d18-d19}, [r3]
   158b0:	mov	r3, sp
   158b4:	add	r0, r3, #32
   158b8:	add	r2, r3, #16
   158bc:	vst1.64	{d20-d21}, [r0]
   158c0:	mov	r0, #28
   158c4:	vst1.64	{d18-d19}, [r2]
   158c8:	mov	r2, r3
   158cc:	and	r0, r0, r1, lsr #3
   158d0:	and	r1, r1, #31
   158d4:	vst1.64	{d16-d17}, [r2], r0
   158d8:	mov	r0, #1
   158dc:	ldr	lr, [r2, #8]
   158e0:	bic	r0, r0, lr, lsr r1
   158e4:	eor	r0, lr, r0, lsl r1
   158e8:	mov	r1, ip
   158ec:	str	r0, [r2, #8]
   158f0:	mov	r0, #0
   158f4:	mvn	r2, #0
   158f8:	bl	154e8 <__assert_fail@plt+0x4460>
   158fc:	mov	sp, fp
   15900:	pop	{fp, pc}
   15904:	push	{fp, lr}
   15908:	mov	fp, sp
   1590c:	sub	sp, sp, #48	; 0x30
   15910:	mov	r1, r0
   15914:	movw	r0, #41336	; 0xa178
   15918:	mov	r3, #32
   1591c:	movt	r0, #2
   15920:	add	r2, r0, #16
   15924:	vld1.64	{d16-d17}, [r0], r3
   15928:	mov	r3, sp
   1592c:	vld1.64	{d18-d19}, [r2]
   15930:	vld1.64	{d20-d21}, [r0]
   15934:	add	r2, r3, #16
   15938:	add	r0, r3, #32
   1593c:	vst1.64	{d18-d19}, [r2]
   15940:	vst1.64	{d20-d21}, [r0]
   15944:	mov	r0, #12
   15948:	mov	r2, r3
   1594c:	vst1.64	{d16-d17}, [r2], r0
   15950:	ldr	r0, [r2]
   15954:	orr	r0, r0, #67108864	; 0x4000000
   15958:	str	r0, [r2]
   1595c:	mov	r0, #0
   15960:	mvn	r2, #0
   15964:	bl	154e8 <__assert_fail@plt+0x4460>
   15968:	mov	sp, fp
   1596c:	pop	{fp, pc}
   15970:	push	{fp, lr}
   15974:	mov	fp, sp
   15978:	sub	sp, sp, #48	; 0x30
   1597c:	mov	ip, r1
   15980:	mov	r1, r0
   15984:	movw	r0, #41336	; 0xa178
   15988:	mov	r2, #32
   1598c:	movt	r0, #2
   15990:	add	r3, r0, #16
   15994:	vld1.64	{d16-d17}, [r0], r2
   15998:	vld1.64	{d18-d19}, [r3]
   1599c:	vld1.64	{d20-d21}, [r0]
   159a0:	mov	r3, sp
   159a4:	add	r2, r3, #16
   159a8:	add	r0, r3, #32
   159ac:	vst1.64	{d18-d19}, [r2]
   159b0:	vst1.64	{d20-d21}, [r0]
   159b4:	mov	r0, #12
   159b8:	mov	r2, r3
   159bc:	vst1.64	{d16-d17}, [r2], r0
   159c0:	ldr	r0, [r2]
   159c4:	orr	r0, r0, #67108864	; 0x4000000
   159c8:	str	r0, [r2]
   159cc:	mov	r0, #0
   159d0:	mov	r2, ip
   159d4:	bl	154e8 <__assert_fail@plt+0x4460>
   159d8:	mov	sp, fp
   159dc:	pop	{fp, pc}
   159e0:	push	{r4, sl, fp, lr}
   159e4:	add	fp, sp, #8
   159e8:	sub	sp, sp, #96	; 0x60
   159ec:	vmov.i32	q8, #0	; 0x00000000
   159f0:	mov	ip, r2
   159f4:	mov	r2, sp
   159f8:	mov	r4, #28
   159fc:	cmp	r1, #10
   15a00:	mov	r3, r2
   15a04:	add	lr, r2, #16
   15a08:	vst1.64	{d16-d17}, [r3], r4
   15a0c:	vst1.64	{d16-d17}, [lr]
   15a10:	vst1.32	{d16-d17}, [r3]
   15a14:	beq	15a64 <__assert_fail@plt+0x49dc>
   15a18:	vld1.64	{d16-d17}, [r2], r4
   15a1c:	vld1.64	{d18-d19}, [lr]
   15a20:	add	r3, sp, #48	; 0x30
   15a24:	vld1.32	{d20-d21}, [r2]
   15a28:	add	r2, r3, #20
   15a2c:	add	r4, r3, #4
   15a30:	vst1.32	{d18-d19}, [r2]
   15a34:	add	r2, r3, #32
   15a38:	vst1.32	{d16-d17}, [r4]
   15a3c:	vst1.32	{d20-d21}, [r2]
   15a40:	str	r1, [sp, #48]	; 0x30
   15a44:	mvn	r2, #0
   15a48:	ldr	r1, [sp, #60]	; 0x3c
   15a4c:	orr	r1, r1, #67108864	; 0x4000000
   15a50:	str	r1, [sp, #60]	; 0x3c
   15a54:	mov	r1, ip
   15a58:	bl	154e8 <__assert_fail@plt+0x4460>
   15a5c:	sub	sp, fp, #8
   15a60:	pop	{r4, sl, fp, pc}
   15a64:	bl	1107c <abort@plt>
   15a68:	push	{r4, r5, r6, sl, fp, lr}
   15a6c:	add	fp, sp, #16
   15a70:	sub	sp, sp, #48	; 0x30
   15a74:	mov	ip, r3
   15a78:	movw	r3, #41336	; 0xa178
   15a7c:	mov	r6, #32
   15a80:	cmp	r1, #0
   15a84:	mov	r4, sp
   15a88:	movt	r3, #2
   15a8c:	cmpne	r2, #0
   15a90:	add	r5, r4, #16
   15a94:	add	lr, r3, #16
   15a98:	vld1.64	{d16-d17}, [r3], r6
   15a9c:	vld1.64	{d18-d19}, [lr]
   15aa0:	vld1.64	{d20-d21}, [r3]
   15aa4:	mov	r3, #10
   15aa8:	vst1.64	{d16-d17}, [r4], r6
   15aac:	vst1.64	{d18-d19}, [r5]
   15ab0:	vst1.64	{d20-d21}, [r4]
   15ab4:	str	r3, [sp]
   15ab8:	bne	15ac0 <__assert_fail@plt+0x4a38>
   15abc:	bl	1107c <abort@plt>
   15ac0:	str	r2, [sp, #44]	; 0x2c
   15ac4:	str	r1, [sp, #40]	; 0x28
   15ac8:	mov	r3, sp
   15acc:	mov	r1, ip
   15ad0:	mvn	r2, #0
   15ad4:	bl	154e8 <__assert_fail@plt+0x4460>
   15ad8:	sub	sp, fp, #16
   15adc:	pop	{r4, r5, r6, sl, fp, pc}
   15ae0:	push	{r4, r5, r6, sl, fp, lr}
   15ae4:	add	fp, sp, #16
   15ae8:	sub	sp, sp, #48	; 0x30
   15aec:	mov	lr, r3
   15af0:	movw	r3, #41336	; 0xa178
   15af4:	mov	r6, #32
   15af8:	cmp	r1, #0
   15afc:	mov	r4, sp
   15b00:	movt	r3, #2
   15b04:	cmpne	r2, #0
   15b08:	add	r5, r4, #16
   15b0c:	add	ip, r3, #16
   15b10:	vld1.64	{d16-d17}, [r3], r6
   15b14:	vld1.64	{d18-d19}, [ip]
   15b18:	vld1.64	{d20-d21}, [r3]
   15b1c:	mov	r3, #10
   15b20:	vst1.64	{d16-d17}, [r4], r6
   15b24:	vst1.64	{d18-d19}, [r5]
   15b28:	vst1.64	{d20-d21}, [r4]
   15b2c:	str	r3, [sp]
   15b30:	bne	15b38 <__assert_fail@plt+0x4ab0>
   15b34:	bl	1107c <abort@plt>
   15b38:	ldr	ip, [fp, #8]
   15b3c:	str	r2, [sp, #44]	; 0x2c
   15b40:	str	r1, [sp, #40]	; 0x28
   15b44:	mov	r3, sp
   15b48:	mov	r1, lr
   15b4c:	mov	r2, ip
   15b50:	bl	154e8 <__assert_fail@plt+0x4460>
   15b54:	sub	sp, fp, #16
   15b58:	pop	{r4, r5, r6, sl, fp, pc}
   15b5c:	push	{r4, sl, fp, lr}
   15b60:	add	fp, sp, #8
   15b64:	sub	sp, sp, #48	; 0x30
   15b68:	movw	r3, #41336	; 0xa178
   15b6c:	mov	lr, #32
   15b70:	mov	ip, r2
   15b74:	cmp	r0, #0
   15b78:	movt	r3, #2
   15b7c:	cmpne	r1, #0
   15b80:	add	r2, r3, #16
   15b84:	vld1.64	{d16-d17}, [r3], lr
   15b88:	vld1.64	{d20-d21}, [r3]
   15b8c:	vld1.64	{d18-d19}, [r2]
   15b90:	mov	r2, sp
   15b94:	add	r4, r2, #16
   15b98:	vst1.64	{d16-d17}, [r2], lr
   15b9c:	vst1.64	{d20-d21}, [r2]
   15ba0:	mov	r2, #10
   15ba4:	vst1.64	{d18-d19}, [r4]
   15ba8:	str	r2, [sp]
   15bac:	bne	15bb4 <__assert_fail@plt+0x4b2c>
   15bb0:	bl	1107c <abort@plt>
   15bb4:	str	r1, [sp, #44]	; 0x2c
   15bb8:	str	r0, [sp, #40]	; 0x28
   15bbc:	mov	r3, sp
   15bc0:	mov	r0, #0
   15bc4:	mov	r1, ip
   15bc8:	mvn	r2, #0
   15bcc:	bl	154e8 <__assert_fail@plt+0x4460>
   15bd0:	sub	sp, fp, #8
   15bd4:	pop	{r4, sl, fp, pc}
   15bd8:	push	{r4, r5, fp, lr}
   15bdc:	add	fp, sp, #8
   15be0:	sub	sp, sp, #48	; 0x30
   15be4:	mov	ip, r3
   15be8:	movw	r3, #41336	; 0xa178
   15bec:	mov	r4, #32
   15bf0:	mov	lr, r2
   15bf4:	cmp	r0, #0
   15bf8:	movt	r3, #2
   15bfc:	cmpne	r1, #0
   15c00:	add	r2, r3, #16
   15c04:	vld1.64	{d16-d17}, [r3], r4
   15c08:	vld1.64	{d20-d21}, [r3]
   15c0c:	vld1.64	{d18-d19}, [r2]
   15c10:	mov	r2, sp
   15c14:	add	r5, r2, #16
   15c18:	vst1.64	{d16-d17}, [r2], r4
   15c1c:	vst1.64	{d20-d21}, [r2]
   15c20:	mov	r2, #10
   15c24:	vst1.64	{d18-d19}, [r5]
   15c28:	str	r2, [sp]
   15c2c:	bne	15c34 <__assert_fail@plt+0x4bac>
   15c30:	bl	1107c <abort@plt>
   15c34:	str	r1, [sp, #44]	; 0x2c
   15c38:	str	r0, [sp, #40]	; 0x28
   15c3c:	mov	r3, sp
   15c40:	mov	r0, #0
   15c44:	mov	r1, lr
   15c48:	mov	r2, ip
   15c4c:	bl	154e8 <__assert_fail@plt+0x4460>
   15c50:	sub	sp, fp, #8
   15c54:	pop	{r4, r5, fp, pc}
   15c58:	movw	r3, #41216	; 0xa100
   15c5c:	movt	r3, #2
   15c60:	b	154e8 <__assert_fail@plt+0x4460>
   15c64:	movw	r3, #41216	; 0xa100
   15c68:	mov	r2, r1
   15c6c:	mov	r1, r0
   15c70:	mov	r0, #0
   15c74:	movt	r3, #2
   15c78:	b	154e8 <__assert_fail@plt+0x4460>
   15c7c:	movw	r3, #41216	; 0xa100
   15c80:	mvn	r2, #0
   15c84:	movt	r3, #2
   15c88:	b	154e8 <__assert_fail@plt+0x4460>
   15c8c:	movw	r3, #41216	; 0xa100
   15c90:	mov	r1, r0
   15c94:	mov	r0, #0
   15c98:	mvn	r2, #0
   15c9c:	movt	r3, #2
   15ca0:	b	154e8 <__assert_fail@plt+0x4460>
   15ca4:	push	{r4, r5, fp, lr}
   15ca8:	add	fp, sp, #8
   15cac:	mov	r5, r0
   15cb0:	mov	r4, r1
   15cb4:	mov	r0, #0
   15cb8:	mov	r2, #5
   15cbc:	mov	r1, r5
   15cc0:	bl	10eb4 <dcgettext@plt>
   15cc4:	cmp	r0, r5
   15cc8:	popne	{r4, r5, fp, pc}
   15ccc:	bl	18484 <__assert_fail@plt+0x73fc>
   15cd0:	ldrb	r1, [r0]
   15cd4:	and	r1, r1, #223	; 0xdf
   15cd8:	cmp	r1, #71	; 0x47
   15cdc:	beq	15d44 <__assert_fail@plt+0x4cbc>
   15ce0:	cmp	r1, #85	; 0x55
   15ce4:	bne	15d9c <__assert_fail@plt+0x4d14>
   15ce8:	ldrb	r1, [r0, #1]
   15cec:	and	r1, r1, #223	; 0xdf
   15cf0:	cmp	r1, #84	; 0x54
   15cf4:	bne	15d9c <__assert_fail@plt+0x4d14>
   15cf8:	ldrb	r1, [r0, #2]
   15cfc:	and	r1, r1, #223	; 0xdf
   15d00:	cmp	r1, #70	; 0x46
   15d04:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d08:	ldrb	r1, [r0, #3]
   15d0c:	cmp	r1, #45	; 0x2d
   15d10:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d14:	ldrb	r1, [r0, #4]
   15d18:	cmp	r1, #56	; 0x38
   15d1c:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d20:	ldrb	r0, [r0, #5]
   15d24:	cmp	r0, #0
   15d28:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d2c:	ldrb	r1, [r5]
   15d30:	movw	r2, #38961	; 0x9831
   15d34:	movw	r0, #38965	; 0x9835
   15d38:	movt	r2, #1
   15d3c:	movt	r0, #1
   15d40:	b	15dcc <__assert_fail@plt+0x4d44>
   15d44:	ldrb	r1, [r0, #1]
   15d48:	and	r1, r1, #223	; 0xdf
   15d4c:	cmp	r1, #66	; 0x42
   15d50:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d54:	ldrb	r1, [r0, #2]
   15d58:	cmp	r1, #49	; 0x31
   15d5c:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d60:	ldrb	r1, [r0, #3]
   15d64:	cmp	r1, #56	; 0x38
   15d68:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d6c:	ldrb	r1, [r0, #4]
   15d70:	cmp	r1, #48	; 0x30
   15d74:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d78:	ldrb	r1, [r0, #5]
   15d7c:	cmp	r1, #51	; 0x33
   15d80:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d84:	ldrb	r1, [r0, #6]
   15d88:	cmp	r1, #48	; 0x30
   15d8c:	bne	15d9c <__assert_fail@plt+0x4d14>
   15d90:	ldrb	r0, [r0, #7]
   15d94:	cmp	r0, #0
   15d98:	beq	15db8 <__assert_fail@plt+0x4d30>
   15d9c:	movw	r1, #38955	; 0x982b
   15da0:	movw	r0, #38959	; 0x982f
   15da4:	cmp	r4, #9
   15da8:	movt	r1, #1
   15dac:	movt	r0, #1
   15db0:	moveq	r0, r1
   15db4:	pop	{r4, r5, fp, pc}
   15db8:	ldrb	r1, [r5]
   15dbc:	movw	r2, #38969	; 0x9839
   15dc0:	movw	r0, #38973	; 0x983d
   15dc4:	movt	r2, #1
   15dc8:	movt	r0, #1
   15dcc:	cmp	r1, #96	; 0x60
   15dd0:	moveq	r0, r2
   15dd4:	pop	{r4, r5, fp, pc}
   15dd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ddc:	add	fp, sp, #24
   15de0:	sub	sp, sp, #32
   15de4:	ldr	r6, [fp, #12]
   15de8:	ldr	r7, [fp, #8]
   15dec:	mov	r4, r2
   15df0:	mov	r8, r0
   15df4:	cmp	r1, #0
   15df8:	beq	15e20 <__assert_fail@plt+0x4d98>
   15dfc:	movw	r2, #39060	; 0x9894
   15e00:	mov	r5, r1
   15e04:	str	r3, [sp, #4]
   15e08:	str	r4, [sp]
   15e0c:	mov	r0, r8
   15e10:	mov	r1, #1
   15e14:	movt	r2, #1
   15e18:	mov	r3, r5
   15e1c:	b	15e38 <__assert_fail@plt+0x4db0>
   15e20:	movw	r2, #39072	; 0x98a0
   15e24:	str	r3, [sp]
   15e28:	mov	r0, r8
   15e2c:	mov	r1, #1
   15e30:	mov	r3, r4
   15e34:	movt	r2, #1
   15e38:	bl	10fe0 <__fprintf_chk@plt>
   15e3c:	movw	r1, #39079	; 0x98a7
   15e40:	mov	r0, #0
   15e44:	mov	r2, #5
   15e48:	movt	r1, #1
   15e4c:	bl	10eb4 <dcgettext@plt>
   15e50:	movw	r2, #39797	; 0x9b75
   15e54:	mov	r3, r0
   15e58:	movw	r0, #2022	; 0x7e6
   15e5c:	mov	r1, #1
   15e60:	movt	r2, #1
   15e64:	str	r0, [sp]
   15e68:	mov	r0, r8
   15e6c:	bl	10fe0 <__fprintf_chk@plt>
   15e70:	movw	r4, #37110	; 0x90f6
   15e74:	mov	r1, r8
   15e78:	movt	r4, #1
   15e7c:	mov	r0, r4
   15e80:	bl	10e30 <fputs_unlocked@plt>
   15e84:	movw	r1, #39083	; 0x98ab
   15e88:	mov	r0, #0
   15e8c:	mov	r2, #5
   15e90:	movt	r1, #1
   15e94:	bl	10eb4 <dcgettext@plt>
   15e98:	movw	r3, #39254	; 0x9956
   15e9c:	mov	r2, r0
   15ea0:	mov	r0, r8
   15ea4:	mov	r1, #1
   15ea8:	movt	r3, #1
   15eac:	bl	10fe0 <__fprintf_chk@plt>
   15eb0:	mov	r0, r4
   15eb4:	mov	r1, r8
   15eb8:	bl	10e30 <fputs_unlocked@plt>
   15ebc:	cmp	r6, #9
   15ec0:	bhi	15efc <__assert_fail@plt+0x4e74>
   15ec4:	add	r0, pc, #0
   15ec8:	ldr	pc, [r0, r6, lsl #2]
   15ecc:	strdeq	r5, [r1], -r4
   15ed0:	andeq	r5, r1, r8, lsl #30
   15ed4:	andeq	r5, r1, r8, lsr pc
   15ed8:	andeq	r5, r1, r0, ror #30
   15edc:	andeq	r5, r1, r8, lsl #31
   15ee0:			; <UNDEFINED> instruction: 0x00015fb0
   15ee4:	ldrdeq	r5, [r1], -r8
   15ee8:	andeq	r6, r1, r0, lsl r0
   15eec:	strheq	r6, [r1], -r0
   15ef0:	andeq	r6, r1, r8, asr r0
   15ef4:	sub	sp, fp, #24
   15ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15efc:	movw	r1, #39607	; 0x9ab7
   15f00:	movt	r1, #1
   15f04:	b	16060 <__assert_fail@plt+0x4fd8>
   15f08:	movw	r1, #39288	; 0x9978
   15f0c:	mov	r0, #0
   15f10:	mov	r2, #5
   15f14:	movt	r1, #1
   15f18:	bl	10eb4 <dcgettext@plt>
   15f1c:	ldr	r3, [r7]
   15f20:	mov	r2, r0
   15f24:	mov	r0, r8
   15f28:	mov	r1, #1
   15f2c:	sub	sp, fp, #24
   15f30:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f34:	b	10fe0 <__fprintf_chk@plt>
   15f38:	movw	r1, #39304	; 0x9988
   15f3c:	mov	r0, #0
   15f40:	mov	r2, #5
   15f44:	movt	r1, #1
   15f48:	bl	10eb4 <dcgettext@plt>
   15f4c:	mov	r2, r0
   15f50:	ldr	r3, [r7]
   15f54:	ldr	r0, [r7, #4]
   15f58:	str	r0, [sp]
   15f5c:	b	1604c <__assert_fail@plt+0x4fc4>
   15f60:	movw	r1, #39327	; 0x999f
   15f64:	mov	r0, #0
   15f68:	mov	r2, #5
   15f6c:	movt	r1, #1
   15f70:	bl	10eb4 <dcgettext@plt>
   15f74:	mov	r2, r0
   15f78:	ldr	r3, [r7]
   15f7c:	ldmib	r7, {r0, r1}
   15f80:	stm	sp, {r0, r1}
   15f84:	b	1604c <__assert_fail@plt+0x4fc4>
   15f88:	movw	r1, #39355	; 0x99bb
   15f8c:	mov	r0, #0
   15f90:	mov	r2, #5
   15f94:	movt	r1, #1
   15f98:	bl	10eb4 <dcgettext@plt>
   15f9c:	ldr	r3, [r7]
   15fa0:	mov	r2, r0
   15fa4:	ldmib	r7, {r0, r1, r7}
   15fa8:	stm	sp, {r0, r1, r7}
   15fac:	b	1604c <__assert_fail@plt+0x4fc4>
   15fb0:	movw	r1, #39387	; 0x99db
   15fb4:	mov	r0, #0
   15fb8:	mov	r2, #5
   15fbc:	movt	r1, #1
   15fc0:	bl	10eb4 <dcgettext@plt>
   15fc4:	ldr	r3, [r7]
   15fc8:	mov	r2, r0
   15fcc:	ldmib	r7, {r0, r1, r6, r7}
   15fd0:	stm	sp, {r0, r1, r6, r7}
   15fd4:	b	1604c <__assert_fail@plt+0x4fc4>
   15fd8:	movw	r1, #39423	; 0x99ff
   15fdc:	mov	r0, #0
   15fe0:	mov	r2, #5
   15fe4:	movt	r1, #1
   15fe8:	bl	10eb4 <dcgettext@plt>
   15fec:	mov	r2, r0
   15ff0:	ldr	r3, [r7]
   15ff4:	ldmib	r7, {r0, r1, r6}
   15ff8:	ldr	r5, [r7, #16]
   15ffc:	ldr	r7, [r7, #20]
   16000:	stm	sp, {r0, r1, r6}
   16004:	str	r5, [sp, #12]
   16008:	str	r7, [sp, #16]
   1600c:	b	1604c <__assert_fail@plt+0x4fc4>
   16010:	movw	r1, #39463	; 0x9a27
   16014:	mov	r0, #0
   16018:	mov	r2, #5
   1601c:	movt	r1, #1
   16020:	bl	10eb4 <dcgettext@plt>
   16024:	mov	r2, r0
   16028:	ldr	r3, [r7]
   1602c:	ldmib	r7, {r0, r1, r6}
   16030:	ldr	r5, [r7, #16]
   16034:	ldr	r4, [r7, #20]
   16038:	ldr	r7, [r7, #24]
   1603c:	stm	sp, {r0, r1, r6}
   16040:	str	r5, [sp, #12]
   16044:	str	r4, [sp, #16]
   16048:	str	r7, [sp, #20]
   1604c:	mov	r0, r8
   16050:	mov	r1, #1
   16054:	b	16100 <__assert_fail@plt+0x5078>
   16058:	movw	r1, #39555	; 0x9a83
   1605c:	movt	r1, #1
   16060:	mov	r0, #0
   16064:	mov	r2, #5
   16068:	bl	10eb4 <dcgettext@plt>
   1606c:	mov	ip, r0
   16070:	ldr	r3, [r7]
   16074:	ldr	r0, [r7, #4]
   16078:	ldr	r1, [r7, #8]
   1607c:	ldr	r6, [r7, #12]
   16080:	ldr	r5, [r7, #16]
   16084:	ldr	r4, [r7, #20]
   16088:	ldr	r2, [r7, #24]
   1608c:	ldr	lr, [r7, #28]
   16090:	ldr	r7, [r7, #32]
   16094:	stm	sp, {r0, r1, r6}
   16098:	str	r5, [sp, #12]
   1609c:	str	r4, [sp, #16]
   160a0:	str	r2, [sp, #20]
   160a4:	str	lr, [sp, #24]
   160a8:	str	r7, [sp, #28]
   160ac:	b	160f4 <__assert_fail@plt+0x506c>
   160b0:	movw	r1, #39507	; 0x9a53
   160b4:	mov	r0, #0
   160b8:	mov	r2, #5
   160bc:	movt	r1, #1
   160c0:	bl	10eb4 <dcgettext@plt>
   160c4:	mov	ip, r0
   160c8:	ldr	r3, [r7]
   160cc:	ldmib	r7, {r0, r1, r6}
   160d0:	ldr	r5, [r7, #16]
   160d4:	ldr	r4, [r7, #20]
   160d8:	ldr	r2, [r7, #24]
   160dc:	ldr	r7, [r7, #28]
   160e0:	stm	sp, {r0, r1, r6}
   160e4:	str	r5, [sp, #12]
   160e8:	str	r4, [sp, #16]
   160ec:	str	r2, [sp, #20]
   160f0:	str	r7, [sp, #24]
   160f4:	mov	r0, r8
   160f8:	mov	r1, #1
   160fc:	mov	r2, ip
   16100:	bl	10fe0 <__fprintf_chk@plt>
   16104:	sub	sp, fp, #24
   16108:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1610c:	push	{r4, sl, fp, lr}
   16110:	add	fp, sp, #8
   16114:	sub	sp, sp, #8
   16118:	ldr	ip, [fp, #8]
   1611c:	mov	lr, #0
   16120:	ldr	r4, [ip, lr, lsl #2]
   16124:	add	lr, lr, #1
   16128:	cmp	r4, #0
   1612c:	bne	16120 <__assert_fail@plt+0x5098>
   16130:	sub	r4, lr, #1
   16134:	str	ip, [sp]
   16138:	str	r4, [sp, #4]
   1613c:	bl	15dd8 <__assert_fail@plt+0x4d50>
   16140:	sub	sp, fp, #8
   16144:	pop	{r4, sl, fp, pc}
   16148:	push	{fp, lr}
   1614c:	mov	fp, sp
   16150:	sub	sp, sp, #48	; 0x30
   16154:	ldr	ip, [fp, #8]
   16158:	ldr	lr, [ip]
   1615c:	cmp	lr, #0
   16160:	str	lr, [sp, #8]
   16164:	beq	16200 <__assert_fail@plt+0x5178>
   16168:	ldr	lr, [ip, #4]
   1616c:	cmp	lr, #0
   16170:	str	lr, [sp, #12]
   16174:	beq	16208 <__assert_fail@plt+0x5180>
   16178:	ldr	lr, [ip, #8]
   1617c:	cmp	lr, #0
   16180:	str	lr, [sp, #16]
   16184:	beq	16210 <__assert_fail@plt+0x5188>
   16188:	ldr	lr, [ip, #12]
   1618c:	cmp	lr, #0
   16190:	str	lr, [sp, #20]
   16194:	beq	16218 <__assert_fail@plt+0x5190>
   16198:	ldr	lr, [ip, #16]
   1619c:	cmp	lr, #0
   161a0:	str	lr, [sp, #24]
   161a4:	beq	16220 <__assert_fail@plt+0x5198>
   161a8:	ldr	lr, [ip, #20]
   161ac:	cmp	lr, #0
   161b0:	str	lr, [sp, #28]
   161b4:	beq	16228 <__assert_fail@plt+0x51a0>
   161b8:	ldr	lr, [ip, #24]
   161bc:	cmp	lr, #0
   161c0:	str	lr, [sp, #32]
   161c4:	beq	16230 <__assert_fail@plt+0x51a8>
   161c8:	ldr	lr, [ip, #28]
   161cc:	cmp	lr, #0
   161d0:	str	lr, [sp, #36]	; 0x24
   161d4:	beq	16238 <__assert_fail@plt+0x51b0>
   161d8:	ldr	lr, [ip, #32]
   161dc:	cmp	lr, #0
   161e0:	str	lr, [sp, #40]	; 0x28
   161e4:	beq	16240 <__assert_fail@plt+0x51b8>
   161e8:	ldr	lr, [ip, #36]	; 0x24
   161ec:	mov	ip, #10
   161f0:	cmp	lr, #0
   161f4:	str	lr, [sp, #44]	; 0x2c
   161f8:	movweq	ip, #9
   161fc:	b	16244 <__assert_fail@plt+0x51bc>
   16200:	mov	ip, #0
   16204:	b	16244 <__assert_fail@plt+0x51bc>
   16208:	mov	ip, #1
   1620c:	b	16244 <__assert_fail@plt+0x51bc>
   16210:	mov	ip, #2
   16214:	b	16244 <__assert_fail@plt+0x51bc>
   16218:	mov	ip, #3
   1621c:	b	16244 <__assert_fail@plt+0x51bc>
   16220:	mov	ip, #4
   16224:	b	16244 <__assert_fail@plt+0x51bc>
   16228:	mov	ip, #5
   1622c:	b	16244 <__assert_fail@plt+0x51bc>
   16230:	mov	ip, #6
   16234:	b	16244 <__assert_fail@plt+0x51bc>
   16238:	mov	ip, #7
   1623c:	b	16244 <__assert_fail@plt+0x51bc>
   16240:	mov	ip, #8
   16244:	add	lr, sp, #8
   16248:	str	ip, [sp, #4]
   1624c:	str	lr, [sp]
   16250:	bl	15dd8 <__assert_fail@plt+0x4d50>
   16254:	mov	sp, fp
   16258:	pop	{fp, pc}
   1625c:	push	{fp, lr}
   16260:	mov	fp, sp
   16264:	sub	sp, sp, #56	; 0x38
   16268:	add	ip, fp, #8
   1626c:	str	ip, [sp, #12]
   16270:	ldr	lr, [fp, #8]
   16274:	cmp	lr, #0
   16278:	str	lr, [sp, #16]
   1627c:	beq	16318 <__assert_fail@plt+0x5290>
   16280:	ldr	lr, [ip, #4]
   16284:	cmp	lr, #0
   16288:	str	lr, [sp, #20]
   1628c:	beq	16320 <__assert_fail@plt+0x5298>
   16290:	ldr	lr, [ip, #8]
   16294:	cmp	lr, #0
   16298:	str	lr, [sp, #24]
   1629c:	beq	16328 <__assert_fail@plt+0x52a0>
   162a0:	ldr	lr, [ip, #12]
   162a4:	cmp	lr, #0
   162a8:	str	lr, [sp, #28]
   162ac:	beq	16330 <__assert_fail@plt+0x52a8>
   162b0:	ldr	lr, [ip, #16]
   162b4:	cmp	lr, #0
   162b8:	str	lr, [sp, #32]
   162bc:	beq	16338 <__assert_fail@plt+0x52b0>
   162c0:	ldr	lr, [ip, #20]
   162c4:	cmp	lr, #0
   162c8:	str	lr, [sp, #36]	; 0x24
   162cc:	beq	16340 <__assert_fail@plt+0x52b8>
   162d0:	ldr	lr, [ip, #24]
   162d4:	cmp	lr, #0
   162d8:	str	lr, [sp, #40]	; 0x28
   162dc:	beq	16348 <__assert_fail@plt+0x52c0>
   162e0:	ldr	lr, [ip, #28]
   162e4:	cmp	lr, #0
   162e8:	str	lr, [sp, #44]	; 0x2c
   162ec:	beq	16350 <__assert_fail@plt+0x52c8>
   162f0:	ldr	lr, [ip, #32]
   162f4:	cmp	lr, #0
   162f8:	str	lr, [sp, #48]	; 0x30
   162fc:	beq	16358 <__assert_fail@plt+0x52d0>
   16300:	ldr	lr, [ip, #36]	; 0x24
   16304:	mov	ip, #10
   16308:	cmp	lr, #0
   1630c:	str	lr, [sp, #52]	; 0x34
   16310:	movweq	ip, #9
   16314:	b	1635c <__assert_fail@plt+0x52d4>
   16318:	mov	ip, #0
   1631c:	b	1635c <__assert_fail@plt+0x52d4>
   16320:	mov	ip, #1
   16324:	b	1635c <__assert_fail@plt+0x52d4>
   16328:	mov	ip, #2
   1632c:	b	1635c <__assert_fail@plt+0x52d4>
   16330:	mov	ip, #3
   16334:	b	1635c <__assert_fail@plt+0x52d4>
   16338:	mov	ip, #4
   1633c:	b	1635c <__assert_fail@plt+0x52d4>
   16340:	mov	ip, #5
   16344:	b	1635c <__assert_fail@plt+0x52d4>
   16348:	mov	ip, #6
   1634c:	b	1635c <__assert_fail@plt+0x52d4>
   16350:	mov	ip, #7
   16354:	b	1635c <__assert_fail@plt+0x52d4>
   16358:	mov	ip, #8
   1635c:	add	lr, sp, #16
   16360:	str	ip, [sp, #4]
   16364:	str	lr, [sp]
   16368:	bl	15dd8 <__assert_fail@plt+0x4d50>
   1636c:	mov	sp, fp
   16370:	pop	{fp, pc}
   16374:	push	{fp, lr}
   16378:	mov	fp, sp
   1637c:	movw	r0, #41292	; 0xa14c
   16380:	movt	r0, #2
   16384:	ldr	r1, [r0]
   16388:	movw	r0, #37110	; 0x90f6
   1638c:	movt	r0, #1
   16390:	bl	10e30 <fputs_unlocked@plt>
   16394:	movw	r1, #39667	; 0x9af3
   16398:	mov	r0, #0
   1639c:	mov	r2, #5
   163a0:	movt	r1, #1
   163a4:	bl	10eb4 <dcgettext@plt>
   163a8:	movw	r2, #39687	; 0x9b07
   163ac:	mov	r1, r0
   163b0:	mov	r0, #1
   163b4:	movt	r2, #1
   163b8:	bl	10fc8 <__printf_chk@plt>
   163bc:	movw	r1, #39709	; 0x9b1d
   163c0:	mov	r0, #0
   163c4:	mov	r2, #5
   163c8:	movt	r1, #1
   163cc:	bl	10eb4 <dcgettext@plt>
   163d0:	movw	r2, #36585	; 0x8ee9
   163d4:	movw	r3, #36919	; 0x9037
   163d8:	mov	r1, r0
   163dc:	mov	r0, #1
   163e0:	movt	r2, #1
   163e4:	movt	r3, #1
   163e8:	bl	10fc8 <__printf_chk@plt>
   163ec:	movw	r1, #39729	; 0x9b31
   163f0:	mov	r0, #0
   163f4:	mov	r2, #5
   163f8:	movt	r1, #1
   163fc:	bl	10eb4 <dcgettext@plt>
   16400:	movw	r2, #39768	; 0x9b58
   16404:	mov	r1, r0
   16408:	mov	r0, #1
   1640c:	movt	r2, #1
   16410:	pop	{fp, lr}
   16414:	b	10fc8 <__printf_chk@plt>
   16418:	push	{r4, r5, r6, sl, fp, lr}
   1641c:	add	fp, sp, #16
   16420:	mov	r4, r2
   16424:	mov	r5, r1
   16428:	mov	r6, r0
   1642c:	bl	18520 <__assert_fail@plt+0x7498>
   16430:	cmp	r0, #0
   16434:	popne	{r4, r5, r6, sl, fp, pc}
   16438:	cmp	r6, #0
   1643c:	beq	16450 <__assert_fail@plt+0x53c8>
   16440:	cmp	r5, #0
   16444:	cmpne	r4, #0
   16448:	bne	16450 <__assert_fail@plt+0x53c8>
   1644c:	pop	{r4, r5, r6, sl, fp, pc}
   16450:	bl	169cc <__assert_fail@plt+0x5944>
   16454:	push	{r4, r5, r6, sl, fp, lr}
   16458:	add	fp, sp, #16
   1645c:	mov	r4, r2
   16460:	mov	r5, r1
   16464:	mov	r6, r0
   16468:	bl	18520 <__assert_fail@plt+0x7498>
   1646c:	cmp	r0, #0
   16470:	popne	{r4, r5, r6, sl, fp, pc}
   16474:	cmp	r6, #0
   16478:	beq	1648c <__assert_fail@plt+0x5404>
   1647c:	cmp	r5, #0
   16480:	cmpne	r4, #0
   16484:	bne	1648c <__assert_fail@plt+0x5404>
   16488:	pop	{r4, r5, r6, sl, fp, pc}
   1648c:	bl	169cc <__assert_fail@plt+0x5944>
   16490:	push	{fp, lr}
   16494:	mov	fp, sp
   16498:	bl	1837c <__assert_fail@plt+0x72f4>
   1649c:	cmp	r0, #0
   164a0:	popne	{fp, pc}
   164a4:	bl	169cc <__assert_fail@plt+0x5944>
   164a8:	push	{fp, lr}
   164ac:	mov	fp, sp
   164b0:	bl	1837c <__assert_fail@plt+0x72f4>
   164b4:	cmp	r0, #0
   164b8:	popne	{fp, pc}
   164bc:	bl	169cc <__assert_fail@plt+0x5944>
   164c0:	push	{fp, lr}
   164c4:	mov	fp, sp
   164c8:	bl	1837c <__assert_fail@plt+0x72f4>
   164cc:	cmp	r0, #0
   164d0:	popne	{fp, pc}
   164d4:	bl	169cc <__assert_fail@plt+0x5944>
   164d8:	push	{r4, r5, fp, lr}
   164dc:	add	fp, sp, #8
   164e0:	mov	r4, r1
   164e4:	mov	r5, r0
   164e8:	bl	183ac <__assert_fail@plt+0x7324>
   164ec:	cmp	r0, #0
   164f0:	popne	{r4, r5, fp, pc}
   164f4:	cmp	r5, #0
   164f8:	beq	16508 <__assert_fail@plt+0x5480>
   164fc:	cmp	r4, #0
   16500:	bne	16508 <__assert_fail@plt+0x5480>
   16504:	pop	{r4, r5, fp, pc}
   16508:	bl	169cc <__assert_fail@plt+0x5944>
   1650c:	push	{fp, lr}
   16510:	mov	fp, sp
   16514:	cmp	r1, #0
   16518:	orreq	r1, r1, #1
   1651c:	bl	183ac <__assert_fail@plt+0x7324>
   16520:	cmp	r0, #0
   16524:	popne	{fp, pc}
   16528:	bl	169cc <__assert_fail@plt+0x5944>
   1652c:	push	{fp, lr}
   16530:	mov	fp, sp
   16534:	clz	r3, r2
   16538:	lsr	ip, r3, #5
   1653c:	clz	r3, r1
   16540:	lsr	r3, r3, #5
   16544:	orrs	r3, r3, ip
   16548:	movwne	r1, #1
   1654c:	movwne	r2, #1
   16550:	bl	18520 <__assert_fail@plt+0x7498>
   16554:	cmp	r0, #0
   16558:	popne	{fp, pc}
   1655c:	bl	169cc <__assert_fail@plt+0x5944>
   16560:	push	{fp, lr}
   16564:	mov	fp, sp
   16568:	mov	r2, r1
   1656c:	mov	r1, r0
   16570:	mov	r0, #0
   16574:	bl	18520 <__assert_fail@plt+0x7498>
   16578:	cmp	r0, #0
   1657c:	popne	{fp, pc}
   16580:	bl	169cc <__assert_fail@plt+0x5944>
   16584:	push	{fp, lr}
   16588:	mov	fp, sp
   1658c:	mov	r2, r1
   16590:	mov	r1, r0
   16594:	clz	r0, r2
   16598:	clz	r3, r1
   1659c:	lsr	r0, r0, #5
   165a0:	lsr	r3, r3, #5
   165a4:	orrs	r0, r3, r0
   165a8:	mov	r0, #0
   165ac:	movwne	r1, #1
   165b0:	movwne	r2, #1
   165b4:	bl	18520 <__assert_fail@plt+0x7498>
   165b8:	cmp	r0, #0
   165bc:	popne	{fp, pc}
   165c0:	bl	169cc <__assert_fail@plt+0x5944>
   165c4:	push	{r4, r5, r6, sl, fp, lr}
   165c8:	add	fp, sp, #16
   165cc:	ldr	r5, [r1]
   165d0:	mov	r4, r1
   165d4:	mov	r6, r0
   165d8:	cmp	r0, #0
   165dc:	beq	165f4 <__assert_fail@plt+0x556c>
   165e0:	mov	r0, #1
   165e4:	add	r0, r0, r5, lsr #1
   165e8:	adds	r5, r5, r0
   165ec:	bcc	165fc <__assert_fail@plt+0x5574>
   165f0:	b	16638 <__assert_fail@plt+0x55b0>
   165f4:	cmp	r5, #0
   165f8:	movweq	r5, #64	; 0x40
   165fc:	mov	r0, r6
   16600:	mov	r1, r5
   16604:	mov	r2, #1
   16608:	bl	18520 <__assert_fail@plt+0x7498>
   1660c:	cmp	r5, #0
   16610:	mov	r1, r5
   16614:	movwne	r1, #1
   16618:	cmp	r0, #0
   1661c:	bne	16630 <__assert_fail@plt+0x55a8>
   16620:	clz	r2, r6
   16624:	lsr	r2, r2, #5
   16628:	orrs	r1, r2, r1
   1662c:	bne	16638 <__assert_fail@plt+0x55b0>
   16630:	str	r5, [r4]
   16634:	pop	{r4, r5, r6, sl, fp, pc}
   16638:	bl	169cc <__assert_fail@plt+0x5944>
   1663c:	push	{r4, r5, r6, r7, fp, lr}
   16640:	add	fp, sp, #16
   16644:	ldr	r5, [r1]
   16648:	mov	r6, r2
   1664c:	mov	r4, r1
   16650:	mov	r7, r0
   16654:	cmp	r0, #0
   16658:	beq	16670 <__assert_fail@plt+0x55e8>
   1665c:	mov	r0, #1
   16660:	add	r0, r0, r5, lsr #1
   16664:	adds	r5, r5, r0
   16668:	bcc	16688 <__assert_fail@plt+0x5600>
   1666c:	b	166bc <__assert_fail@plt+0x5634>
   16670:	cmp	r5, #0
   16674:	bne	16688 <__assert_fail@plt+0x5600>
   16678:	mov	r0, #64	; 0x40
   1667c:	cmp	r6, #64	; 0x40
   16680:	udiv	r5, r0, r6
   16684:	addhi	r5, r5, #1
   16688:	mov	r0, r7
   1668c:	mov	r1, r5
   16690:	mov	r2, r6
   16694:	bl	18520 <__assert_fail@plt+0x7498>
   16698:	cmp	r0, #0
   1669c:	bne	166b4 <__assert_fail@plt+0x562c>
   166a0:	cmp	r7, #0
   166a4:	beq	166bc <__assert_fail@plt+0x5634>
   166a8:	cmp	r6, #0
   166ac:	cmpne	r5, #0
   166b0:	bne	166bc <__assert_fail@plt+0x5634>
   166b4:	str	r5, [r4]
   166b8:	pop	{r4, r5, r6, r7, fp, pc}
   166bc:	bl	169cc <__assert_fail@plt+0x5944>
   166c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166c4:	add	fp, sp, #24
   166c8:	mov	r8, r1
   166cc:	ldr	r1, [r1]
   166d0:	mov	r5, r0
   166d4:	add	r0, r1, r1, asr #1
   166d8:	cmp	r0, r1
   166dc:	mvnvs	r0, #-2147483648	; 0x80000000
   166e0:	cmp	r0, r3
   166e4:	mov	r7, r0
   166e8:	movgt	r7, r3
   166ec:	cmn	r3, #1
   166f0:	movle	r7, r0
   166f4:	ldr	r0, [fp, #8]
   166f8:	cmn	r0, #1
   166fc:	ble	16724 <__assert_fail@plt+0x569c>
   16700:	cmp	r0, #0
   16704:	beq	16778 <__assert_fail@plt+0x56f0>
   16708:	cmn	r7, #1
   1670c:	ble	1674c <__assert_fail@plt+0x56c4>
   16710:	mvn	r4, #-2147483648	; 0x80000000
   16714:	udiv	r6, r4, r0
   16718:	cmp	r6, r7
   1671c:	bge	16778 <__assert_fail@plt+0x56f0>
   16720:	b	16788 <__assert_fail@plt+0x5700>
   16724:	cmn	r7, #1
   16728:	ble	16768 <__assert_fail@plt+0x56e0>
   1672c:	cmn	r0, #1
   16730:	beq	16778 <__assert_fail@plt+0x56f0>
   16734:	mov	r6, #-2147483648	; 0x80000000
   16738:	mvn	r4, #-2147483648	; 0x80000000
   1673c:	sdiv	r6, r6, r0
   16740:	cmp	r6, r7
   16744:	bge	16778 <__assert_fail@plt+0x56f0>
   16748:	b	16788 <__assert_fail@plt+0x5700>
   1674c:	beq	16778 <__assert_fail@plt+0x56f0>
   16750:	mov	r6, #-2147483648	; 0x80000000
   16754:	mvn	r4, #-2147483648	; 0x80000000
   16758:	sdiv	r6, r6, r7
   1675c:	cmp	r6, r0
   16760:	bge	16778 <__assert_fail@plt+0x56f0>
   16764:	b	16788 <__assert_fail@plt+0x5700>
   16768:	mvn	r4, #-2147483648	; 0x80000000
   1676c:	sdiv	r6, r4, r0
   16770:	cmp	r7, r6
   16774:	blt	16788 <__assert_fail@plt+0x5700>
   16778:	mul	r6, r7, r0
   1677c:	mov	r4, #64	; 0x40
   16780:	cmp	r6, #63	; 0x3f
   16784:	bgt	16790 <__assert_fail@plt+0x5708>
   16788:	sdiv	r7, r4, r0
   1678c:	mul	r6, r7, r0
   16790:	cmp	r5, #0
   16794:	moveq	r4, #0
   16798:	streq	r4, [r8]
   1679c:	sub	r4, r7, r1
   167a0:	cmp	r4, r2
   167a4:	bge	16850 <__assert_fail@plt+0x57c8>
   167a8:	add	r7, r1, r2
   167ac:	mov	r6, #0
   167b0:	mov	r2, #0
   167b4:	cmp	r7, r3
   167b8:	movwgt	r6, #1
   167bc:	cmn	r3, #1
   167c0:	movwgt	r2, #1
   167c4:	cmp	r7, r1
   167c8:	bvs	16884 <__assert_fail@plt+0x57fc>
   167cc:	ands	r1, r2, r6
   167d0:	bne	16884 <__assert_fail@plt+0x57fc>
   167d4:	cmn	r0, #1
   167d8:	ble	16800 <__assert_fail@plt+0x5778>
   167dc:	cmp	r0, #0
   167e0:	beq	1684c <__assert_fail@plt+0x57c4>
   167e4:	cmn	r7, #1
   167e8:	ble	16824 <__assert_fail@plt+0x579c>
   167ec:	mvn	r1, #-2147483648	; 0x80000000
   167f0:	udiv	r1, r1, r0
   167f4:	cmp	r1, r7
   167f8:	bge	1684c <__assert_fail@plt+0x57c4>
   167fc:	b	16884 <__assert_fail@plt+0x57fc>
   16800:	cmn	r7, #1
   16804:	ble	1683c <__assert_fail@plt+0x57b4>
   16808:	cmn	r0, #1
   1680c:	beq	1684c <__assert_fail@plt+0x57c4>
   16810:	mov	r1, #-2147483648	; 0x80000000
   16814:	sdiv	r1, r1, r0
   16818:	cmp	r1, r7
   1681c:	bge	1684c <__assert_fail@plt+0x57c4>
   16820:	b	16884 <__assert_fail@plt+0x57fc>
   16824:	beq	1684c <__assert_fail@plt+0x57c4>
   16828:	mov	r1, #-2147483648	; 0x80000000
   1682c:	sdiv	r1, r1, r7
   16830:	cmp	r1, r0
   16834:	bge	1684c <__assert_fail@plt+0x57c4>
   16838:	b	16884 <__assert_fail@plt+0x57fc>
   1683c:	mvn	r1, #-2147483648	; 0x80000000
   16840:	sdiv	r1, r1, r0
   16844:	cmp	r7, r1
   16848:	blt	16884 <__assert_fail@plt+0x57fc>
   1684c:	mul	r6, r7, r0
   16850:	mov	r0, r5
   16854:	mov	r1, r6
   16858:	bl	183ac <__assert_fail@plt+0x7324>
   1685c:	cmp	r6, #0
   16860:	movwne	r6, #1
   16864:	cmp	r0, #0
   16868:	bne	1687c <__assert_fail@plt+0x57f4>
   1686c:	clz	r1, r5
   16870:	lsr	r1, r1, #5
   16874:	orrs	r1, r1, r6
   16878:	bne	16884 <__assert_fail@plt+0x57fc>
   1687c:	str	r7, [r8]
   16880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16884:	bl	169cc <__assert_fail@plt+0x5944>
   16888:	push	{fp, lr}
   1688c:	mov	fp, sp
   16890:	mov	r1, #1
   16894:	bl	18328 <__assert_fail@plt+0x72a0>
   16898:	cmp	r0, #0
   1689c:	popne	{fp, pc}
   168a0:	bl	169cc <__assert_fail@plt+0x5944>
   168a4:	push	{fp, lr}
   168a8:	mov	fp, sp
   168ac:	bl	18328 <__assert_fail@plt+0x72a0>
   168b0:	cmp	r0, #0
   168b4:	popne	{fp, pc}
   168b8:	bl	169cc <__assert_fail@plt+0x5944>
   168bc:	push	{fp, lr}
   168c0:	mov	fp, sp
   168c4:	mov	r1, #1
   168c8:	bl	18328 <__assert_fail@plt+0x72a0>
   168cc:	cmp	r0, #0
   168d0:	popne	{fp, pc}
   168d4:	bl	169cc <__assert_fail@plt+0x5944>
   168d8:	push	{fp, lr}
   168dc:	mov	fp, sp
   168e0:	bl	18328 <__assert_fail@plt+0x72a0>
   168e4:	cmp	r0, #0
   168e8:	popne	{fp, pc}
   168ec:	bl	169cc <__assert_fail@plt+0x5944>
   168f0:	push	{r4, r5, fp, lr}
   168f4:	add	fp, sp, #8
   168f8:	mov	r5, r0
   168fc:	mov	r0, r1
   16900:	mov	r4, r1
   16904:	bl	1837c <__assert_fail@plt+0x72f4>
   16908:	cmp	r0, #0
   1690c:	beq	16920 <__assert_fail@plt+0x5898>
   16910:	mov	r1, r5
   16914:	mov	r2, r4
   16918:	pop	{r4, r5, fp, lr}
   1691c:	b	10e90 <memcpy@plt>
   16920:	bl	169cc <__assert_fail@plt+0x5944>
   16924:	push	{r4, r5, fp, lr}
   16928:	add	fp, sp, #8
   1692c:	mov	r5, r0
   16930:	mov	r0, r1
   16934:	mov	r4, r1
   16938:	bl	1837c <__assert_fail@plt+0x72f4>
   1693c:	cmp	r0, #0
   16940:	beq	16954 <__assert_fail@plt+0x58cc>
   16944:	mov	r1, r5
   16948:	mov	r2, r4
   1694c:	pop	{r4, r5, fp, lr}
   16950:	b	10e90 <memcpy@plt>
   16954:	bl	169cc <__assert_fail@plt+0x5944>
   16958:	push	{r4, r5, fp, lr}
   1695c:	add	fp, sp, #8
   16960:	mov	r5, r0
   16964:	add	r0, r1, #1
   16968:	mov	r4, r1
   1696c:	bl	1837c <__assert_fail@plt+0x72f4>
   16970:	cmp	r0, #0
   16974:	beq	16990 <__assert_fail@plt+0x5908>
   16978:	mov	r1, #0
   1697c:	mov	r2, r4
   16980:	strb	r1, [r0, r4]
   16984:	mov	r1, r5
   16988:	pop	{r4, r5, fp, lr}
   1698c:	b	10e90 <memcpy@plt>
   16990:	bl	169cc <__assert_fail@plt+0x5944>
   16994:	push	{r4, r5, fp, lr}
   16998:	add	fp, sp, #8
   1699c:	mov	r4, r0
   169a0:	bl	10f8c <strlen@plt>
   169a4:	add	r5, r0, #1
   169a8:	mov	r0, r5
   169ac:	bl	1837c <__assert_fail@plt+0x72f4>
   169b0:	cmp	r0, #0
   169b4:	beq	169c8 <__assert_fail@plt+0x5940>
   169b8:	mov	r1, r4
   169bc:	mov	r2, r5
   169c0:	pop	{r4, r5, fp, lr}
   169c4:	b	10e90 <memcpy@plt>
   169c8:	bl	169cc <__assert_fail@plt+0x5944>
   169cc:	push	{fp, lr}
   169d0:	mov	fp, sp
   169d4:	movw	r0, #41196	; 0xa0ec
   169d8:	movw	r1, #39844	; 0x9ba4
   169dc:	mov	r2, #5
   169e0:	movt	r0, #2
   169e4:	movt	r1, #1
   169e8:	ldr	r4, [r0]
   169ec:	mov	r0, #0
   169f0:	bl	10eb4 <dcgettext@plt>
   169f4:	movw	r2, #36564	; 0x8ed4
   169f8:	mov	r3, r0
   169fc:	mov	r0, r4
   16a00:	mov	r1, #0
   16a04:	movt	r2, #1
   16a08:	bl	10f20 <error@plt>
   16a0c:	bl	1107c <abort@plt>
   16a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a14:	add	fp, sp, #28
   16a18:	sub	sp, sp, #36	; 0x24
   16a1c:	cmp	r2, #37	; 0x25
   16a20:	bcs	18308 <__assert_fail@plt+0x7280>
   16a24:	ldr	r8, [fp, #8]
   16a28:	mov	r9, r3
   16a2c:	mov	r6, r2
   16a30:	mov	r7, r1
   16a34:	mov	r4, r0
   16a38:	bl	10fa4 <__errno_location@plt>
   16a3c:	cmp	r7, #0
   16a40:	add	sl, sp, #32
   16a44:	mov	r5, r0
   16a48:	mov	r0, #0
   16a4c:	mov	r2, r6
   16a50:	mov	r3, #0
   16a54:	movne	sl, r7
   16a58:	str	r0, [r5]
   16a5c:	mov	r0, r4
   16a60:	mov	r1, sl
   16a64:	bl	11040 <__strtoll_internal@plt>
   16a68:	mov	r7, r1
   16a6c:	ldr	r1, [sl]
   16a70:	cmp	r1, r4
   16a74:	beq	16aa4 <__assert_fail@plt+0x5a1c>
   16a78:	mov	r6, r0
   16a7c:	ldr	r0, [r5]
   16a80:	cmp	r0, #0
   16a84:	beq	16ae4 <__assert_fail@plt+0x5a5c>
   16a88:	mov	r5, #4
   16a8c:	cmp	r0, #34	; 0x22
   16a90:	bne	17f18 <__assert_fail@plt+0x6e90>
   16a94:	mov	r5, #1
   16a98:	cmp	r8, #0
   16a9c:	bne	16af0 <__assert_fail@plt+0x5a68>
   16aa0:	b	17f14 <__assert_fail@plt+0x6e8c>
   16aa4:	mov	r5, #4
   16aa8:	cmp	r8, #0
   16aac:	beq	17f18 <__assert_fail@plt+0x6e90>
   16ab0:	mov	r6, r1
   16ab4:	ldrb	r1, [r4]
   16ab8:	cmp	r1, #0
   16abc:	beq	17f18 <__assert_fail@plt+0x6e90>
   16ac0:	mov	r0, r8
   16ac4:	bl	10f98 <strchr@plt>
   16ac8:	cmp	r0, #0
   16acc:	beq	17f18 <__assert_fail@plt+0x6e90>
   16ad0:	mov	r1, r6
   16ad4:	mov	r5, #0
   16ad8:	mov	r6, #1
   16adc:	mov	r7, #0
   16ae0:	b	16af0 <__assert_fail@plt+0x5a68>
   16ae4:	mov	r5, r0
   16ae8:	cmp	r8, #0
   16aec:	beq	17f14 <__assert_fail@plt+0x6e8c>
   16af0:	ldrb	r4, [r1]
   16af4:	cmp	r4, #0
   16af8:	beq	17f14 <__assert_fail@plt+0x6e8c>
   16afc:	str	r1, [sp, #20]
   16b00:	mov	r0, r8
   16b04:	mov	r1, r4
   16b08:	bl	10f98 <strchr@plt>
   16b0c:	cmp	r0, #0
   16b10:	beq	16d9c <__assert_fail@plt+0x5d14>
   16b14:	sub	r0, r4, #69	; 0x45
   16b18:	mov	r1, #1
   16b1c:	mov	r3, #0
   16b20:	mov	r2, #1024	; 0x400
   16b24:	cmp	r0, #47	; 0x2f
   16b28:	str	r1, [sp, #16]
   16b2c:	bhi	16c68 <__assert_fail@plt+0x5be0>
   16b30:	add	r1, pc, #0
   16b34:	ldr	pc, [r1, r0, lsl #2]
   16b38:	strdeq	r6, [r1], -r8
   16b3c:	andeq	r6, r1, r8, ror #24
   16b40:	strdeq	r6, [r1], -r8
   16b44:	andeq	r6, r1, r8, ror #24
   16b48:	andeq	r6, r1, r8, ror #24
   16b4c:	andeq	r6, r1, r8, ror #24
   16b50:	strdeq	r6, [r1], -r8
   16b54:	andeq	r6, r1, r8, ror #24
   16b58:	strdeq	r6, [r1], -r8
   16b5c:	andeq	r6, r1, r8, ror #24
   16b60:	andeq	r6, r1, r8, ror #24
   16b64:	strdeq	r6, [r1], -r8
   16b68:	andeq	r6, r1, r8, ror #24
   16b6c:	andeq	r6, r1, r8, ror #24
   16b70:	andeq	r6, r1, r8, ror #24
   16b74:	strdeq	r6, [r1], -r8
   16b78:	andeq	r6, r1, r8, ror #24
   16b7c:	andeq	r6, r1, r8, ror #24
   16b80:	andeq	r6, r1, r8, ror #24
   16b84:	andeq	r6, r1, r8, ror #24
   16b88:	strdeq	r6, [r1], -r8
   16b8c:	strdeq	r6, [r1], -r8
   16b90:	andeq	r6, r1, r8, ror #24
   16b94:	andeq	r6, r1, r8, ror #24
   16b98:	andeq	r6, r1, r8, ror #24
   16b9c:	andeq	r6, r1, r8, ror #24
   16ba0:	andeq	r6, r1, r8, ror #24
   16ba4:	andeq	r6, r1, r8, ror #24
   16ba8:	andeq	r6, r1, r8, ror #24
   16bac:	andeq	r6, r1, r8, ror #24
   16bb0:	andeq	r6, r1, r8, ror #24
   16bb4:	andeq	r6, r1, r8, ror #24
   16bb8:	andeq	r6, r1, r8, ror #24
   16bbc:	andeq	r6, r1, r8, ror #24
   16bc0:	strdeq	r6, [r1], -r8
   16bc4:	andeq	r6, r1, r8, ror #24
   16bc8:	andeq	r6, r1, r8, ror #24
   16bcc:	andeq	r6, r1, r8, ror #24
   16bd0:	strdeq	r6, [r1], -r8
   16bd4:	andeq	r6, r1, r8, ror #24
   16bd8:	strdeq	r6, [r1], -r8
   16bdc:	andeq	r6, r1, r8, ror #24
   16be0:	andeq	r6, r1, r8, ror #24
   16be4:	andeq	r6, r1, r8, ror #24
   16be8:	andeq	r6, r1, r8, ror #24
   16bec:	andeq	r6, r1, r8, ror #24
   16bf0:	andeq	r6, r1, r8, ror #24
   16bf4:	strdeq	r6, [r1], -r8
   16bf8:	mov	r0, r8
   16bfc:	mov	r1, #48	; 0x30
   16c00:	bl	10f98 <strchr@plt>
   16c04:	cmp	r0, #0
   16c08:	beq	16c34 <__assert_fail@plt+0x5bac>
   16c0c:	ldr	r1, [sp, #20]
   16c10:	ldrb	r0, [r1, #1]
   16c14:	cmp	r0, #66	; 0x42
   16c18:	cmpne	r0, #68	; 0x44
   16c1c:	bne	16c3c <__assert_fail@plt+0x5bb4>
   16c20:	mov	r0, #2
   16c24:	mov	r2, #1000	; 0x3e8
   16c28:	mov	r3, #0
   16c2c:	str	r0, [sp, #16]
   16c30:	b	16c68 <__assert_fail@plt+0x5be0>
   16c34:	mov	r3, #0
   16c38:	b	16c64 <__assert_fail@plt+0x5bdc>
   16c3c:	cmp	r0, #105	; 0x69
   16c40:	mov	r3, #0
   16c44:	bne	16c64 <__assert_fail@plt+0x5bdc>
   16c48:	ldrb	r0, [r1, #2]
   16c4c:	mov	r1, #1
   16c50:	mov	r2, #1024	; 0x400
   16c54:	cmp	r0, #66	; 0x42
   16c58:	movweq	r1, #3
   16c5c:	str	r1, [sp, #16]
   16c60:	b	16c68 <__assert_fail@plt+0x5be0>
   16c64:	mov	r2, #1024	; 0x400
   16c68:	sub	r0, r4, #66	; 0x42
   16c6c:	cmp	r0, #53	; 0x35
   16c70:	bhi	16d9c <__assert_fail@plt+0x5d14>
   16c74:	add	r1, pc, #8
   16c78:	str	r3, [sp, #28]
   16c7c:	str	r2, [sp, #24]
   16c80:	ldr	pc, [r1, r0, lsl #2]
   16c84:	muleq	r1, ip, lr
   16c88:	muleq	r1, ip, sp
   16c8c:	muleq	r1, ip, sp
   16c90:			; <UNDEFINED> instruction: 0x00016eb0
   16c94:	muleq	r1, ip, sp
   16c98:	andeq	r6, r1, ip, asr sp
   16c9c:	muleq	r1, ip, sp
   16ca0:	muleq	r1, ip, sp
   16ca4:	muleq	r1, ip, sp
   16ca8:	andeq	r6, r1, r4, lsr #27
   16cac:	muleq	r1, ip, sp
   16cb0:	ldrdeq	r6, [r1], -r4
   16cb4:	muleq	r1, ip, sp
   16cb8:	muleq	r1, ip, sp
   16cbc:	strdeq	r6, [r1], -r4
   16cc0:	muleq	r1, ip, sp
   16cc4:	muleq	r1, ip, sp
   16cc8:	muleq	r1, ip, sp
   16ccc:	andeq	r6, r1, r4, lsl lr
   16cd0:	muleq	r1, ip, sp
   16cd4:	muleq	r1, ip, sp
   16cd8:	muleq	r1, ip, sp
   16cdc:	muleq	r1, ip, sp
   16ce0:	andeq	r6, r1, r8, lsr pc
   16ce4:	andeq	r6, r1, r8, asr lr
   16ce8:	muleq	r1, ip, sp
   16cec:	muleq	r1, ip, sp
   16cf0:	muleq	r1, ip, sp
   16cf4:	muleq	r1, ip, sp
   16cf8:	muleq	r1, ip, sp
   16cfc:	muleq	r1, ip, sp
   16d00:	muleq	r1, ip, sp
   16d04:	andeq	r6, r1, ip, ror pc
   16d08:	strdeq	r7, [r1], -r4
   16d0c:	muleq	r1, ip, sp
   16d10:	muleq	r1, ip, sp
   16d14:	muleq	r1, ip, sp
   16d18:	andeq	r6, r1, ip, asr sp
   16d1c:	muleq	r1, ip, sp
   16d20:	muleq	r1, ip, sp
   16d24:	muleq	r1, ip, sp
   16d28:	andeq	r6, r1, r4, lsr #27
   16d2c:	muleq	r1, ip, sp
   16d30:	ldrdeq	r6, [r1], -r4
   16d34:	muleq	r1, ip, sp
   16d38:	muleq	r1, ip, sp
   16d3c:	muleq	r1, ip, sp
   16d40:	muleq	r1, ip, sp
   16d44:	muleq	r1, ip, sp
   16d48:	muleq	r1, ip, sp
   16d4c:	andeq	r6, r1, r4, lsl lr
   16d50:	muleq	r1, ip, sp
   16d54:	muleq	r1, ip, sp
   16d58:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16d5c:	cmn	r7, #1
   16d60:	str	r9, [sp, #12]
   16d64:	ble	16fa4 <__assert_fail@plt+0x5f1c>
   16d68:	ldr	r3, [sp, #28]
   16d6c:	mvn	r0, #0
   16d70:	mvn	r1, #-2147483648	; 0x80000000
   16d74:	mvn	r8, #0
   16d78:	mvn	r9, #-2147483648	; 0x80000000
   16d7c:	bl	1873c <__assert_fail@plt+0x76b4>
   16d80:	ldr	r2, [sp, #24]
   16d84:	ldr	r3, [sp, #28]
   16d88:	subs	r0, r0, r6
   16d8c:	mov	r4, #1
   16d90:	sbcs	r0, r1, r7
   16d94:	bge	16fe4 <__assert_fail@plt+0x5f5c>
   16d98:	b	16ffc <__assert_fail@plt+0x5f74>
   16d9c:	orr	r5, r5, #2
   16da0:	b	17f14 <__assert_fail@plt+0x6e8c>
   16da4:	cmn	r7, #1
   16da8:	ble	17038 <__assert_fail@plt+0x5fb0>
   16dac:	ldr	r3, [sp, #28]
   16db0:	mvn	r0, #0
   16db4:	mvn	r1, #-2147483648	; 0x80000000
   16db8:	bl	1873c <__assert_fail@plt+0x76b4>
   16dbc:	ldr	r2, [sp, #24]
   16dc0:	ldr	r3, [sp, #28]
   16dc4:	subs	r0, r0, r6
   16dc8:	sbcs	r0, r1, r7
   16dcc:	bge	1706c <__assert_fail@plt+0x5fe4>
   16dd0:	b	1777c <__assert_fail@plt+0x66f4>
   16dd4:	cmn	r7, #1
   16dd8:	str	r9, [sp, #12]
   16ddc:	ble	17080 <__assert_fail@plt+0x5ff8>
   16de0:	ldr	r3, [sp, #28]
   16de4:	mvn	r0, #0
   16de8:	mvn	r1, #-2147483648	; 0x80000000
   16dec:	mvn	r8, #0
   16df0:	mvn	r9, #-2147483648	; 0x80000000
   16df4:	bl	1873c <__assert_fail@plt+0x76b4>
   16df8:	ldr	r2, [sp, #24]
   16dfc:	ldr	r3, [sp, #28]
   16e00:	subs	r0, r0, r6
   16e04:	mov	r4, #1
   16e08:	sbcs	r0, r1, r7
   16e0c:	bge	170c0 <__assert_fail@plt+0x6038>
   16e10:	b	170d8 <__assert_fail@plt+0x6050>
   16e14:	cmn	r7, #1
   16e18:	str	r9, [sp, #12]
   16e1c:	ble	17110 <__assert_fail@plt+0x6088>
   16e20:	ldr	r3, [sp, #28]
   16e24:	mvn	r0, #0
   16e28:	mvn	r1, #-2147483648	; 0x80000000
   16e2c:	mvn	r9, #-2147483648	; 0x80000000
   16e30:	str	r0, [sp, #8]
   16e34:	mvn	r0, #0
   16e38:	bl	1873c <__assert_fail@plt+0x76b4>
   16e3c:	ldr	r2, [sp, #24]
   16e40:	ldr	r3, [sp, #28]
   16e44:	subs	r0, r0, r6
   16e48:	mov	r4, #1
   16e4c:	sbcs	r0, r1, r7
   16e50:	bge	17154 <__assert_fail@plt+0x60cc>
   16e54:	b	17170 <__assert_fail@plt+0x60e8>
   16e58:	cmp	r7, #0
   16e5c:	str	r9, [sp, #12]
   16e60:	bmi	17458 <__assert_fail@plt+0x63d0>
   16e64:	ldr	r3, [sp, #28]
   16e68:	mvn	r0, #0
   16e6c:	mvn	r1, #-2147483648	; 0x80000000
   16e70:	mvn	r9, #-2147483648	; 0x80000000
   16e74:	str	r0, [sp, #8]
   16e78:	mvn	r0, #0
   16e7c:	bl	1873c <__assert_fail@plt+0x76b4>
   16e80:	ldr	r2, [sp, #24]
   16e84:	ldr	r3, [sp, #28]
   16e88:	subs	r0, r0, r6
   16e8c:	mov	r4, #1
   16e90:	sbcs	r0, r1, r7
   16e94:	bge	1749c <__assert_fail@plt+0x6414>
   16e98:	b	174b8 <__assert_fail@plt+0x6430>
   16e9c:	cmn	r7, #1
   16ea0:	ble	174f4 <__assert_fail@plt+0x646c>
   16ea4:	cmp	r7, #2097152	; 0x200000
   16ea8:	blt	17524 <__assert_fail@plt+0x649c>
   16eac:	b	1777c <__assert_fail@plt+0x66f4>
   16eb0:	cmp	r7, #0
   16eb4:	str	r9, [sp, #12]
   16eb8:	bmi	17534 <__assert_fail@plt+0x64ac>
   16ebc:	ldr	r3, [sp, #28]
   16ec0:	mvn	r0, #0
   16ec4:	mvn	r1, #-2147483648	; 0x80000000
   16ec8:	mvn	r9, #-2147483648	; 0x80000000
   16ecc:	str	r0, [sp, #8]
   16ed0:	mvn	r0, #0
   16ed4:	bl	1873c <__assert_fail@plt+0x76b4>
   16ed8:	ldr	r2, [sp, #24]
   16edc:	ldr	r3, [sp, #28]
   16ee0:	subs	r0, r0, r6
   16ee4:	mov	r4, #1
   16ee8:	sbcs	r0, r1, r7
   16eec:	bge	17578 <__assert_fail@plt+0x64f0>
   16ef0:	b	17594 <__assert_fail@plt+0x650c>
   16ef4:	cmp	r7, #0
   16ef8:	str	r9, [sp, #12]
   16efc:	bmi	175d0 <__assert_fail@plt+0x6548>
   16f00:	ldr	r3, [sp, #28]
   16f04:	mvn	r0, #0
   16f08:	mvn	r1, #-2147483648	; 0x80000000
   16f0c:	mvn	r8, #-2147483648	; 0x80000000
   16f10:	str	r0, [sp, #8]
   16f14:	mvn	r0, #0
   16f18:	bl	1873c <__assert_fail@plt+0x76b4>
   16f1c:	ldr	r2, [sp, #24]
   16f20:	ldr	r3, [sp, #28]
   16f24:	subs	r0, r0, r6
   16f28:	mov	r4, #1
   16f2c:	sbcs	r0, r1, r7
   16f30:	bge	17614 <__assert_fail@plt+0x658c>
   16f34:	b	17630 <__assert_fail@plt+0x65a8>
   16f38:	cmp	r7, #0
   16f3c:	str	r9, [sp, #12]
   16f40:	bmi	1766c <__assert_fail@plt+0x65e4>
   16f44:	ldr	r3, [sp, #28]
   16f48:	mvn	r0, #0
   16f4c:	mvn	r1, #-2147483648	; 0x80000000
   16f50:	mvn	r9, #-2147483648	; 0x80000000
   16f54:	str	r0, [sp, #8]
   16f58:	mvn	r0, #0
   16f5c:	bl	1873c <__assert_fail@plt+0x76b4>
   16f60:	ldr	r2, [sp, #24]
   16f64:	ldr	r3, [sp, #28]
   16f68:	subs	r0, r0, r6
   16f6c:	mov	r4, #1
   16f70:	sbcs	r0, r1, r7
   16f74:	bge	176b0 <__assert_fail@plt+0x6628>
   16f78:	b	176cc <__assert_fail@plt+0x6644>
   16f7c:	cmn	r7, #1
   16f80:	ble	1770c <__assert_fail@plt+0x6684>
   16f84:	cmp	r7, #4194304	; 0x400000
   16f88:	blt	1773c <__assert_fail@plt+0x66b4>
   16f8c:	b	1777c <__assert_fail@plt+0x66f4>
   16f90:	cmn	r7, #1
   16f94:	ble	1774c <__assert_fail@plt+0x66c4>
   16f98:	cmp	r7, #1073741824	; 0x40000000
   16f9c:	bge	1777c <__assert_fail@plt+0x66f4>
   16fa0:	b	1779c <__assert_fail@plt+0x6714>
   16fa4:	and	r0, r6, r7
   16fa8:	cmn	r0, #1
   16fac:	beq	16fe4 <__assert_fail@plt+0x5f5c>
   16fb0:	mov	r0, #0
   16fb4:	mov	r1, #-2147483648	; 0x80000000
   16fb8:	mov	r2, r6
   16fbc:	mov	r3, r7
   16fc0:	mov	r8, #0
   16fc4:	mov	r9, #-2147483648	; 0x80000000
   16fc8:	bl	18668 <__assert_fail@plt+0x75e0>
   16fcc:	ldr	r2, [sp, #24]
   16fd0:	ldr	r3, [sp, #28]
   16fd4:	mov	r4, #1
   16fd8:	subs	r0, r0, r2
   16fdc:	sbcs	r0, r1, r3
   16fe0:	blt	171ac <__assert_fail@plt+0x6124>
   16fe4:	umull	r8, r0, r6, r2
   16fe8:	mov	r4, #0
   16fec:	mla	r0, r6, r3, r0
   16ff0:	mla	r9, r7, r2, r0
   16ff4:	cmp	r9, #0
   16ff8:	bmi	171ac <__assert_fail@plt+0x6124>
   16ffc:	ldr	r3, [sp, #28]
   17000:	mvn	r0, #-2147483648	; 0x80000000
   17004:	mvn	r1, #-2147483648	; 0x80000000
   17008:	mov	r6, r4
   1700c:	mvn	r4, #0
   17010:	str	r0, [sp, #8]
   17014:	mvn	r0, #0
   17018:	bl	1873c <__assert_fail@plt+0x76b4>
   1701c:	ldr	r2, [sp, #24]
   17020:	ldr	r3, [sp, #28]
   17024:	subs	r0, r0, r8
   17028:	mov	r7, #1
   1702c:	sbcs	r0, r1, r9
   17030:	bge	171e8 <__assert_fail@plt+0x6160>
   17034:	b	17204 <__assert_fail@plt+0x617c>
   17038:	and	r0, r6, r7
   1703c:	cmn	r0, #1
   17040:	beq	1706c <__assert_fail@plt+0x5fe4>
   17044:	mov	r0, #0
   17048:	mov	r1, #-2147483648	; 0x80000000
   1704c:	mov	r2, r6
   17050:	mov	r3, r7
   17054:	bl	18668 <__assert_fail@plt+0x75e0>
   17058:	ldr	r2, [sp, #24]
   1705c:	ldr	r3, [sp, #28]
   17060:	subs	r0, r0, r2
   17064:	sbcs	r0, r1, r3
   17068:	blt	1777c <__assert_fail@plt+0x66f4>
   1706c:	umull	r0, r1, r6, r2
   17070:	mla	r1, r6, r3, r1
   17074:	mla	r7, r7, r2, r1
   17078:	mov	r6, r0
   1707c:	b	17ef4 <__assert_fail@plt+0x6e6c>
   17080:	and	r0, r6, r7
   17084:	cmn	r0, #1
   17088:	beq	170c0 <__assert_fail@plt+0x6038>
   1708c:	mov	r0, #0
   17090:	mov	r1, #-2147483648	; 0x80000000
   17094:	mov	r2, r6
   17098:	mov	r3, r7
   1709c:	mov	r8, #0
   170a0:	mov	r9, #-2147483648	; 0x80000000
   170a4:	bl	18668 <__assert_fail@plt+0x75e0>
   170a8:	ldr	r2, [sp, #24]
   170ac:	ldr	r3, [sp, #28]
   170b0:	mov	r4, #1
   170b4:	subs	r0, r0, r2
   170b8:	sbcs	r0, r1, r3
   170bc:	blt	17298 <__assert_fail@plt+0x6210>
   170c0:	umull	r8, r0, r6, r2
   170c4:	mov	r4, #0
   170c8:	mla	r0, r6, r3, r0
   170cc:	mla	r9, r7, r2, r0
   170d0:	cmp	r9, #0
   170d4:	bmi	17298 <__assert_fail@plt+0x6210>
   170d8:	ldr	r3, [sp, #28]
   170dc:	mvn	r0, #0
   170e0:	mvn	r1, #-2147483648	; 0x80000000
   170e4:	str	r4, [sp, #8]
   170e8:	mvn	r6, #0
   170ec:	mvn	r7, #-2147483648	; 0x80000000
   170f0:	bl	1873c <__assert_fail@plt+0x76b4>
   170f4:	ldr	r4, [sp, #24]
   170f8:	ldr	r3, [sp, #28]
   170fc:	subs	r0, r0, r8
   17100:	mov	r2, #1
   17104:	sbcs	r0, r1, r9
   17108:	bge	172d0 <__assert_fail@plt+0x6248>
   1710c:	b	17408 <__assert_fail@plt+0x6380>
   17110:	and	r0, r6, r7
   17114:	cmn	r0, #1
   17118:	beq	17154 <__assert_fail@plt+0x60cc>
   1711c:	mov	r0, #0
   17120:	mov	r1, #-2147483648	; 0x80000000
   17124:	mov	r2, r6
   17128:	mov	r3, r7
   1712c:	bl	18668 <__assert_fail@plt+0x75e0>
   17130:	ldr	r2, [sp, #24]
   17134:	ldr	r3, [sp, #28]
   17138:	mov	r4, #1
   1713c:	mov	r9, #-2147483648	; 0x80000000
   17140:	subs	r0, r0, r2
   17144:	sbcs	r0, r1, r3
   17148:	mov	r0, #0
   1714c:	str	r0, [sp, #8]
   17150:	blt	172e4 <__assert_fail@plt+0x625c>
   17154:	umull	r1, r0, r6, r2
   17158:	mov	r4, #0
   1715c:	mla	r0, r6, r3, r0
   17160:	mla	r9, r7, r2, r0
   17164:	str	r1, [sp, #8]
   17168:	cmp	r9, #0
   1716c:	bmi	172e4 <__assert_fail@plt+0x625c>
   17170:	ldr	r3, [sp, #28]
   17174:	mvn	r0, #0
   17178:	mvn	r1, #-2147483648	; 0x80000000
   1717c:	str	r4, [sp, #4]
   17180:	mvn	r6, #0
   17184:	mvn	r8, #-2147483648	; 0x80000000
   17188:	bl	1873c <__assert_fail@plt+0x76b4>
   1718c:	ldr	r4, [sp, #8]
   17190:	ldr	r2, [sp, #24]
   17194:	ldr	r3, [sp, #28]
   17198:	mov	r7, #1
   1719c:	subs	r0, r0, r4
   171a0:	sbcs	r0, r1, r9
   171a4:	bge	17320 <__assert_fail@plt+0x6298>
   171a8:	b	17338 <__assert_fail@plt+0x62b0>
   171ac:	mov	r0, #-2147483648	; 0x80000000
   171b0:	mov	r1, #-2147483648	; 0x80000000
   171b4:	mov	r2, r8
   171b8:	mov	r3, r9
   171bc:	mov	r6, r4
   171c0:	mov	r4, #0
   171c4:	str	r0, [sp, #8]
   171c8:	mov	r0, #0
   171cc:	bl	18668 <__assert_fail@plt+0x75e0>
   171d0:	ldr	r2, [sp, #24]
   171d4:	ldr	r3, [sp, #28]
   171d8:	mov	r7, #1
   171dc:	subs	r0, r0, r2
   171e0:	sbcs	r0, r1, r3
   171e4:	blt	17258 <__assert_fail@plt+0x61d0>
   171e8:	umull	r4, r0, r8, r2
   171ec:	mov	r7, r6
   171f0:	mla	r0, r8, r3, r0
   171f4:	mla	r0, r9, r2, r0
   171f8:	cmp	r0, #0
   171fc:	str	r0, [sp, #8]
   17200:	bmi	17258 <__assert_fail@plt+0x61d0>
   17204:	ldr	r3, [sp, #28]
   17208:	mvn	r0, #0
   1720c:	mvn	r1, #-2147483648	; 0x80000000
   17210:	mov	r9, r7
   17214:	mvn	r6, #0
   17218:	mvn	r7, #-2147483648	; 0x80000000
   1721c:	bl	1873c <__assert_fail@plt+0x76b4>
   17220:	ldr	r8, [sp, #8]
   17224:	ldr	r3, [sp, #24]
   17228:	ldr	ip, [sp, #28]
   1722c:	subs	r0, r0, r4
   17230:	mov	r2, #1
   17234:	sbcs	r0, r1, r8
   17238:	blt	1724c <__assert_fail@plt+0x61c4>
   1723c:	umull	r6, r0, r4, r3
   17240:	mov	r2, #0
   17244:	mla	r0, r4, ip, r0
   17248:	mla	r7, r8, r3, r0
   1724c:	orr	r3, r2, r9
   17250:	ldr	r9, [sp, #12]
   17254:	b	17ef4 <__assert_fail@plt+0x6e6c>
   17258:	ldr	r8, [sp, #8]
   1725c:	mov	r0, #0
   17260:	mov	r1, #-2147483648	; 0x80000000
   17264:	mov	r2, r4
   17268:	mov	r9, r7
   1726c:	mov	r6, #0
   17270:	mov	r7, #-2147483648	; 0x80000000
   17274:	mov	r3, r8
   17278:	bl	18668 <__assert_fail@plt+0x75e0>
   1727c:	ldr	r3, [sp, #24]
   17280:	ldr	ip, [sp, #28]
   17284:	mov	r2, #1
   17288:	subs	r0, r0, r3
   1728c:	sbcs	r0, r1, ip
   17290:	bge	1723c <__assert_fail@plt+0x61b4>
   17294:	b	1724c <__assert_fail@plt+0x61c4>
   17298:	mov	r0, #0
   1729c:	mov	r1, #-2147483648	; 0x80000000
   172a0:	mov	r2, r8
   172a4:	mov	r3, r9
   172a8:	str	r4, [sp, #8]
   172ac:	mov	r6, #0
   172b0:	mov	r7, #-2147483648	; 0x80000000
   172b4:	bl	18668 <__assert_fail@plt+0x75e0>
   172b8:	ldr	r4, [sp, #24]
   172bc:	ldr	r3, [sp, #28]
   172c0:	mov	r2, #1
   172c4:	subs	r0, r0, r4
   172c8:	sbcs	r0, r1, r3
   172cc:	blt	17408 <__assert_fail@plt+0x6380>
   172d0:	umull	r6, r0, r8, r4
   172d4:	mov	r2, #0
   172d8:	mla	r0, r8, r3, r0
   172dc:	mla	r7, r9, r4, r0
   172e0:	b	17408 <__assert_fail@plt+0x6380>
   172e4:	str	r4, [sp, #4]
   172e8:	ldr	r4, [sp, #8]
   172ec:	mov	r0, #0
   172f0:	mov	r1, #-2147483648	; 0x80000000
   172f4:	mov	r3, r9
   172f8:	mov	r2, r4
   172fc:	bl	18668 <__assert_fail@plt+0x75e0>
   17300:	ldr	r2, [sp, #24]
   17304:	ldr	r3, [sp, #28]
   17308:	mov	r7, #1
   1730c:	mov	r6, #0
   17310:	mov	r8, #-2147483648	; 0x80000000
   17314:	subs	r0, r0, r2
   17318:	sbcs	r0, r1, r3
   1731c:	blt	17370 <__assert_fail@plt+0x62e8>
   17320:	umull	r6, r0, r4, r2
   17324:	ldr	r7, [sp, #4]
   17328:	mla	r0, r4, r3, r0
   1732c:	mla	r8, r9, r2, r0
   17330:	cmp	r8, #0
   17334:	bmi	17370 <__assert_fail@plt+0x62e8>
   17338:	ldr	r3, [sp, #28]
   1733c:	mvn	r0, #0
   17340:	mvn	r1, #-2147483648	; 0x80000000
   17344:	str	r7, [sp, #8]
   17348:	mvn	r4, #0
   1734c:	mvn	r9, #-2147483648	; 0x80000000
   17350:	bl	1873c <__assert_fail@plt+0x76b4>
   17354:	ldr	r2, [sp, #24]
   17358:	ldr	r3, [sp, #28]
   1735c:	subs	r0, r0, r6
   17360:	mov	r7, #1
   17364:	sbcs	r0, r1, r8
   17368:	bge	173a8 <__assert_fail@plt+0x6320>
   1736c:	b	173c0 <__assert_fail@plt+0x6338>
   17370:	mov	r0, #0
   17374:	mov	r1, #-2147483648	; 0x80000000
   17378:	mov	r2, r6
   1737c:	mov	r3, r8
   17380:	str	r7, [sp, #8]
   17384:	bl	18668 <__assert_fail@plt+0x75e0>
   17388:	ldr	r2, [sp, #24]
   1738c:	ldr	r3, [sp, #28]
   17390:	mov	r7, #1
   17394:	mov	r4, #0
   17398:	mov	r9, #-2147483648	; 0x80000000
   1739c:	subs	r0, r0, r2
   173a0:	sbcs	r0, r1, r3
   173a4:	blt	17418 <__assert_fail@plt+0x6390>
   173a8:	umull	r4, r0, r6, r2
   173ac:	ldr	r7, [sp, #8]
   173b0:	mla	r0, r6, r3, r0
   173b4:	mla	r9, r8, r2, r0
   173b8:	cmp	r9, #0
   173bc:	bmi	17418 <__assert_fail@plt+0x6390>
   173c0:	ldr	r3, [sp, #28]
   173c4:	mvn	r0, #0
   173c8:	mvn	r1, #-2147483648	; 0x80000000
   173cc:	str	r7, [sp, #8]
   173d0:	mvn	r6, #0
   173d4:	mvn	r7, #-2147483648	; 0x80000000
   173d8:	bl	1873c <__assert_fail@plt+0x76b4>
   173dc:	ldr	r3, [sp, #24]
   173e0:	ldr	ip, [sp, #28]
   173e4:	subs	r0, r0, r4
   173e8:	mov	r2, #1
   173ec:	mov	r8, r4
   173f0:	sbcs	r0, r1, r9
   173f4:	blt	17408 <__assert_fail@plt+0x6380>
   173f8:	umull	r6, r0, r8, r3
   173fc:	mov	r2, #0
   17400:	mla	r0, r8, ip, r0
   17404:	mla	r7, r9, r3, r0
   17408:	ldr	r0, [sp, #8]
   1740c:	ldr	r9, [sp, #12]
   17410:	orr	r3, r2, r0
   17414:	b	17ef4 <__assert_fail@plt+0x6e6c>
   17418:	mov	r0, #0
   1741c:	mov	r1, #-2147483648	; 0x80000000
   17420:	mov	r2, r4
   17424:	mov	r3, r9
   17428:	str	r7, [sp, #8]
   1742c:	mov	r8, r4
   17430:	bl	18668 <__assert_fail@plt+0x75e0>
   17434:	ldr	r3, [sp, #24]
   17438:	ldr	ip, [sp, #28]
   1743c:	mov	r2, #1
   17440:	mov	r6, #0
   17444:	mov	r7, #-2147483648	; 0x80000000
   17448:	subs	r0, r0, r3
   1744c:	sbcs	r0, r1, ip
   17450:	bge	173f8 <__assert_fail@plt+0x6370>
   17454:	b	17408 <__assert_fail@plt+0x6380>
   17458:	and	r0, r6, r7
   1745c:	cmn	r0, #1
   17460:	beq	1749c <__assert_fail@plt+0x6414>
   17464:	mov	r0, #0
   17468:	mov	r1, #-2147483648	; 0x80000000
   1746c:	mov	r2, r6
   17470:	mov	r3, r7
   17474:	bl	18668 <__assert_fail@plt+0x75e0>
   17478:	ldr	r2, [sp, #24]
   1747c:	ldr	r3, [sp, #28]
   17480:	mov	r4, #1
   17484:	mov	r9, #-2147483648	; 0x80000000
   17488:	subs	r0, r0, r2
   1748c:	sbcs	r0, r1, r3
   17490:	mov	r0, #0
   17494:	str	r0, [sp, #8]
   17498:	blt	177ac <__assert_fail@plt+0x6724>
   1749c:	umull	r1, r0, r6, r2
   174a0:	mov	r4, #0
   174a4:	mla	r0, r6, r3, r0
   174a8:	mla	r9, r7, r2, r0
   174ac:	str	r1, [sp, #8]
   174b0:	cmp	r9, #0
   174b4:	bmi	177ac <__assert_fail@plt+0x6724>
   174b8:	ldr	r3, [sp, #28]
   174bc:	mvn	r0, #0
   174c0:	mvn	r1, #-2147483648	; 0x80000000
   174c4:	str	r4, [sp, #4]
   174c8:	mvn	r8, #0
   174cc:	mvn	r4, #-2147483648	; 0x80000000
   174d0:	bl	1873c <__assert_fail@plt+0x76b4>
   174d4:	ldr	r6, [sp, #8]
   174d8:	ldr	r2, [sp, #24]
   174dc:	ldr	r3, [sp, #28]
   174e0:	mov	r7, #1
   174e4:	subs	r0, r0, r6
   174e8:	sbcs	r0, r1, r9
   174ec:	bge	177e8 <__assert_fail@plt+0x6760>
   174f0:	b	17800 <__assert_fail@plt+0x6778>
   174f4:	and	r0, r6, r7
   174f8:	cmn	r0, #1
   174fc:	beq	17524 <__assert_fail@plt+0x649c>
   17500:	mov	r0, #0
   17504:	mov	r1, #-2147483648	; 0x80000000
   17508:	mov	r2, r6
   1750c:	mov	r3, r7
   17510:	bl	18668 <__assert_fail@plt+0x75e0>
   17514:	ldr	r3, [sp, #28]
   17518:	subs	r0, r0, #1024	; 0x400
   1751c:	sbcs	r0, r1, #0
   17520:	blt	1777c <__assert_fail@plt+0x66f4>
   17524:	lsl	r0, r7, #10
   17528:	orr	r7, r0, r6, lsr #22
   1752c:	lsl	r6, r6, #10
   17530:	b	17ef4 <__assert_fail@plt+0x6e6c>
   17534:	and	r0, r6, r7
   17538:	cmn	r0, #1
   1753c:	beq	17578 <__assert_fail@plt+0x64f0>
   17540:	mov	r0, #0
   17544:	mov	r1, #-2147483648	; 0x80000000
   17548:	mov	r2, r6
   1754c:	mov	r3, r7
   17550:	bl	18668 <__assert_fail@plt+0x75e0>
   17554:	ldr	r2, [sp, #24]
   17558:	ldr	r3, [sp, #28]
   1755c:	mov	r4, #1
   17560:	mov	r9, #-2147483648	; 0x80000000
   17564:	subs	r0, r0, r2
   17568:	sbcs	r0, r1, r3
   1756c:	mov	r0, #0
   17570:	str	r0, [sp, #8]
   17574:	blt	17ac4 <__assert_fail@plt+0x6a3c>
   17578:	umull	r1, r0, r6, r2
   1757c:	mov	r4, #0
   17580:	mla	r0, r6, r3, r0
   17584:	mla	r9, r7, r2, r0
   17588:	str	r1, [sp, #8]
   1758c:	cmp	r9, #0
   17590:	bmi	17ac4 <__assert_fail@plt+0x6a3c>
   17594:	ldr	r3, [sp, #28]
   17598:	mvn	r0, #0
   1759c:	mvn	r1, #-2147483648	; 0x80000000
   175a0:	str	r4, [sp, #4]
   175a4:	mvn	r8, #0
   175a8:	mvn	r4, #-2147483648	; 0x80000000
   175ac:	bl	1873c <__assert_fail@plt+0x76b4>
   175b0:	ldr	r6, [sp, #8]
   175b4:	ldr	r2, [sp, #24]
   175b8:	ldr	r3, [sp, #28]
   175bc:	mov	r7, #1
   175c0:	subs	r0, r0, r6
   175c4:	sbcs	r0, r1, r9
   175c8:	bge	17b00 <__assert_fail@plt+0x6a78>
   175cc:	b	17b18 <__assert_fail@plt+0x6a90>
   175d0:	and	r0, r6, r7
   175d4:	cmn	r0, #1
   175d8:	beq	17614 <__assert_fail@plt+0x658c>
   175dc:	mov	r0, #0
   175e0:	mov	r1, #-2147483648	; 0x80000000
   175e4:	mov	r2, r6
   175e8:	mov	r3, r7
   175ec:	bl	18668 <__assert_fail@plt+0x75e0>
   175f0:	ldr	r2, [sp, #24]
   175f4:	ldr	r3, [sp, #28]
   175f8:	mov	r4, #1
   175fc:	mov	r8, #-2147483648	; 0x80000000
   17600:	subs	r0, r0, r2
   17604:	sbcs	r0, r1, r3
   17608:	mov	r0, #0
   1760c:	str	r0, [sp, #8]
   17610:	blt	17d40 <__assert_fail@plt+0x6cb8>
   17614:	umull	r1, r0, r6, r2
   17618:	mov	r4, #0
   1761c:	mla	r0, r6, r3, r0
   17620:	mla	r8, r7, r2, r0
   17624:	str	r1, [sp, #8]
   17628:	cmp	r8, #0
   1762c:	bmi	17d40 <__assert_fail@plt+0x6cb8>
   17630:	ldr	r3, [sp, #28]
   17634:	mvn	r0, #0
   17638:	mvn	r1, #-2147483648	; 0x80000000
   1763c:	str	r4, [sp, #4]
   17640:	mvn	r9, #0
   17644:	mvn	r4, #-2147483648	; 0x80000000
   17648:	bl	1873c <__assert_fail@plt+0x76b4>
   1764c:	ldr	r6, [sp, #8]
   17650:	ldr	r2, [sp, #24]
   17654:	ldr	r3, [sp, #28]
   17658:	mov	r7, #1
   1765c:	subs	r0, r0, r6
   17660:	sbcs	r0, r1, r8
   17664:	bge	17d7c <__assert_fail@plt+0x6cf4>
   17668:	b	17d94 <__assert_fail@plt+0x6d0c>
   1766c:	and	r0, r6, r7
   17670:	cmn	r0, #1
   17674:	beq	176b0 <__assert_fail@plt+0x6628>
   17678:	mov	r0, #0
   1767c:	mov	r1, #-2147483648	; 0x80000000
   17680:	mov	r2, r6
   17684:	mov	r3, r7
   17688:	bl	18668 <__assert_fail@plt+0x75e0>
   1768c:	ldr	r2, [sp, #24]
   17690:	ldr	r3, [sp, #28]
   17694:	mov	r4, #1
   17698:	mov	r9, #-2147483648	; 0x80000000
   1769c:	subs	r0, r0, r2
   176a0:	sbcs	r0, r1, r3
   176a4:	mov	r0, #0
   176a8:	str	r0, [sp, #8]
   176ac:	blt	17f5c <__assert_fail@plt+0x6ed4>
   176b0:	umull	r1, r0, r6, r2
   176b4:	mov	r4, #0
   176b8:	mla	r0, r6, r3, r0
   176bc:	mla	r9, r7, r2, r0
   176c0:	str	r1, [sp, #8]
   176c4:	cmp	r9, #0
   176c8:	bmi	17f5c <__assert_fail@plt+0x6ed4>
   176cc:	ldr	r3, [sp, #28]
   176d0:	mvn	r0, #0
   176d4:	mvn	r1, #-2147483648	; 0x80000000
   176d8:	str	r4, [sp]
   176dc:	mvn	r8, #-2147483648	; 0x80000000
   176e0:	str	r0, [sp, #4]
   176e4:	mvn	r0, #0
   176e8:	bl	1873c <__assert_fail@plt+0x76b4>
   176ec:	ldr	r6, [sp, #8]
   176f0:	ldr	r2, [sp, #24]
   176f4:	ldr	r3, [sp, #28]
   176f8:	mov	r7, #1
   176fc:	subs	r0, r0, r6
   17700:	sbcs	r0, r1, r9
   17704:	bge	17f9c <__assert_fail@plt+0x6f14>
   17708:	b	17fb8 <__assert_fail@plt+0x6f30>
   1770c:	and	r0, r6, r7
   17710:	cmn	r0, #1
   17714:	beq	1773c <__assert_fail@plt+0x66b4>
   17718:	mov	r0, #0
   1771c:	mov	r1, #-2147483648	; 0x80000000
   17720:	mov	r2, r6
   17724:	mov	r3, r7
   17728:	bl	18668 <__assert_fail@plt+0x75e0>
   1772c:	ldr	r3, [sp, #28]
   17730:	subs	r0, r0, #512	; 0x200
   17734:	sbcs	r0, r1, #0
   17738:	blt	1777c <__assert_fail@plt+0x66f4>
   1773c:	lsl	r0, r7, #9
   17740:	orr	r7, r0, r6, lsr #23
   17744:	lsl	r6, r6, #9
   17748:	b	17ef4 <__assert_fail@plt+0x6e6c>
   1774c:	and	r0, r6, r7
   17750:	cmn	r0, #1
   17754:	beq	1779c <__assert_fail@plt+0x6714>
   17758:	mov	r0, #0
   1775c:	mov	r1, #-2147483648	; 0x80000000
   17760:	mov	r2, r6
   17764:	mov	r3, r7
   17768:	bl	18668 <__assert_fail@plt+0x75e0>
   1776c:	ldr	r3, [sp, #28]
   17770:	subs	r0, r0, #2
   17774:	sbcs	r0, r1, #0
   17778:	bge	1779c <__assert_fail@plt+0x6714>
   1777c:	cmp	r7, #0
   17780:	mvn	r0, #-2147483648	; 0x80000000
   17784:	mvn	r6, #0
   17788:	mov	r3, #1
   1778c:	movmi	r0, #-2147483648	; 0x80000000
   17790:	movwmi	r6, #0
   17794:	mov	r7, r0
   17798:	b	17ef4 <__assert_fail@plt+0x6e6c>
   1779c:	lsl	r0, r7, #1
   177a0:	orr	r7, r0, r6, lsr #31
   177a4:	lsl	r6, r6, #1
   177a8:	b	17ef4 <__assert_fail@plt+0x6e6c>
   177ac:	ldr	r6, [sp, #8]
   177b0:	mov	r0, #0
   177b4:	mov	r1, #-2147483648	; 0x80000000
   177b8:	mov	r3, r9
   177bc:	str	r4, [sp, #4]
   177c0:	mov	r2, r6
   177c4:	bl	18668 <__assert_fail@plt+0x75e0>
   177c8:	ldr	r2, [sp, #24]
   177cc:	ldr	r3, [sp, #28]
   177d0:	mov	r7, #1
   177d4:	mov	r8, #0
   177d8:	mov	r4, #-2147483648	; 0x80000000
   177dc:	subs	r0, r0, r2
   177e0:	sbcs	r0, r1, r3
   177e4:	blt	17838 <__assert_fail@plt+0x67b0>
   177e8:	umull	r8, r0, r6, r2
   177ec:	ldr	r7, [sp, #4]
   177f0:	mla	r0, r6, r3, r0
   177f4:	mla	r4, r9, r2, r0
   177f8:	cmp	r4, #0
   177fc:	bmi	17838 <__assert_fail@plt+0x67b0>
   17800:	ldr	r3, [sp, #28]
   17804:	mvn	r0, #0
   17808:	mvn	r1, #-2147483648	; 0x80000000
   1780c:	str	r7, [sp, #8]
   17810:	mvn	r7, #0
   17814:	mvn	r9, #-2147483648	; 0x80000000
   17818:	bl	1873c <__assert_fail@plt+0x76b4>
   1781c:	ldr	r2, [sp, #24]
   17820:	ldr	r3, [sp, #28]
   17824:	subs	r0, r0, r8
   17828:	mov	r6, #1
   1782c:	sbcs	r0, r1, r4
   17830:	bge	17870 <__assert_fail@plt+0x67e8>
   17834:	b	17888 <__assert_fail@plt+0x6800>
   17838:	mov	r0, #0
   1783c:	mov	r1, #-2147483648	; 0x80000000
   17840:	mov	r2, r8
   17844:	mov	r3, r4
   17848:	str	r7, [sp, #8]
   1784c:	bl	18668 <__assert_fail@plt+0x75e0>
   17850:	ldr	r2, [sp, #24]
   17854:	ldr	r3, [sp, #28]
   17858:	mov	r6, #1
   1785c:	mov	r7, #0
   17860:	mov	r9, #-2147483648	; 0x80000000
   17864:	subs	r0, r0, r2
   17868:	sbcs	r0, r1, r3
   1786c:	blt	178c8 <__assert_fail@plt+0x6840>
   17870:	umull	r7, r0, r8, r2
   17874:	ldr	r6, [sp, #8]
   17878:	mla	r0, r8, r3, r0
   1787c:	mla	r9, r4, r2, r0
   17880:	cmp	r9, #0
   17884:	bmi	178c8 <__assert_fail@plt+0x6840>
   17888:	ldr	r3, [sp, #28]
   1788c:	mvn	r0, #0
   17890:	mvn	r1, #-2147483648	; 0x80000000
   17894:	str	r6, [sp, #8]
   17898:	mvn	r8, #0
   1789c:	mvn	r4, #-2147483648	; 0x80000000
   178a0:	bl	1873c <__assert_fail@plt+0x76b4>
   178a4:	ldr	r2, [sp, #24]
   178a8:	ldr	r3, [sp, #28]
   178ac:	subs	r0, r0, r7
   178b0:	sbcs	r0, r1, r9
   178b4:	bge	1790c <__assert_fail@plt+0x6884>
   178b8:	mov	r0, #1
   178bc:	mov	r6, #0
   178c0:	str	r0, [sp, #8]
   178c4:	b	17924 <__assert_fail@plt+0x689c>
   178c8:	mov	r0, #0
   178cc:	mov	r1, #-2147483648	; 0x80000000
   178d0:	mov	r2, r7
   178d4:	mov	r3, r9
   178d8:	str	r6, [sp, #8]
   178dc:	bl	18668 <__assert_fail@plt+0x75e0>
   178e0:	ldr	r2, [sp, #24]
   178e4:	ldr	r3, [sp, #28]
   178e8:	subs	r0, r0, r2
   178ec:	sbcs	r0, r1, r3
   178f0:	bge	1790c <__assert_fail@plt+0x6884>
   178f4:	mov	r0, #1
   178f8:	mov	r8, #0
   178fc:	mov	r4, #-2147483648	; 0x80000000
   17900:	mov	r6, #0
   17904:	str	r0, [sp, #8]
   17908:	b	1795c <__assert_fail@plt+0x68d4>
   1790c:	umull	r8, r0, r7, r2
   17910:	mov	r6, #0
   17914:	mla	r0, r7, r3, r0
   17918:	mla	r4, r9, r2, r0
   1791c:	cmp	r4, #0
   17920:	bmi	1795c <__assert_fail@plt+0x68d4>
   17924:	ldr	r3, [sp, #28]
   17928:	mvn	r0, #0
   1792c:	mvn	r1, #-2147483648	; 0x80000000
   17930:	mvn	r9, #0
   17934:	mvn	r7, #-2147483648	; 0x80000000
   17938:	bl	1873c <__assert_fail@plt+0x76b4>
   1793c:	ldr	r2, [sp, #24]
   17940:	ldr	r3, [sp, #28]
   17944:	subs	r0, r0, r8
   17948:	sbcs	r0, r1, r4
   1794c:	bge	17998 <__assert_fail@plt+0x6910>
   17950:	mov	r0, #1
   17954:	str	r0, [sp, #8]
   17958:	b	179ac <__assert_fail@plt+0x6924>
   1795c:	mov	r0, #0
   17960:	mov	r1, #-2147483648	; 0x80000000
   17964:	mov	r2, r8
   17968:	mov	r3, r4
   1796c:	bl	18668 <__assert_fail@plt+0x75e0>
   17970:	ldr	r2, [sp, #24]
   17974:	ldr	r3, [sp, #28]
   17978:	subs	r0, r0, r2
   1797c:	sbcs	r0, r1, r3
   17980:	bge	17998 <__assert_fail@plt+0x6910>
   17984:	mov	r0, #1
   17988:	mov	r9, #0
   1798c:	mov	r7, #-2147483648	; 0x80000000
   17990:	str	r0, [sp, #8]
   17994:	b	179e8 <__assert_fail@plt+0x6960>
   17998:	umull	r9, r0, r8, r2
   1799c:	mla	r0, r8, r3, r0
   179a0:	mla	r7, r4, r2, r0
   179a4:	cmp	r7, #0
   179a8:	bmi	179e8 <__assert_fail@plt+0x6960>
   179ac:	ldr	r3, [sp, #28]
   179b0:	mvn	r0, #0
   179b4:	mvn	r1, #-2147483648	; 0x80000000
   179b8:	mvn	r8, #0
   179bc:	mvn	r4, #-2147483648	; 0x80000000
   179c0:	bl	1873c <__assert_fail@plt+0x76b4>
   179c4:	ldr	r2, [sp, #24]
   179c8:	ldr	r3, [sp, #28]
   179cc:	subs	r0, r0, r9
   179d0:	sbcs	r0, r1, r7
   179d4:	bge	17a28 <__assert_fail@plt+0x69a0>
   179d8:	ldr	r9, [sp, #12]
   179dc:	mov	r0, #1
   179e0:	str	r0, [sp, #8]
   179e4:	b	17a40 <__assert_fail@plt+0x69b8>
   179e8:	mov	r0, #0
   179ec:	mov	r1, #-2147483648	; 0x80000000
   179f0:	mov	r2, r9
   179f4:	mov	r3, r7
   179f8:	bl	18668 <__assert_fail@plt+0x75e0>
   179fc:	ldr	r2, [sp, #24]
   17a00:	ldr	r3, [sp, #28]
   17a04:	subs	r0, r0, r2
   17a08:	sbcs	r0, r1, r3
   17a0c:	bge	17a28 <__assert_fail@plt+0x69a0>
   17a10:	ldr	r9, [sp, #12]
   17a14:	mov	r0, #1
   17a18:	mov	r8, #0
   17a1c:	mov	r4, #-2147483648	; 0x80000000
   17a20:	str	r0, [sp, #8]
   17a24:	b	17a90 <__assert_fail@plt+0x6a08>
   17a28:	umull	r8, r0, r9, r2
   17a2c:	mla	r0, r9, r3, r0
   17a30:	ldr	r9, [sp, #12]
   17a34:	mla	r4, r7, r2, r0
   17a38:	cmp	r4, #0
   17a3c:	bmi	17a90 <__assert_fail@plt+0x6a08>
   17a40:	ldr	r3, [sp, #28]
   17a44:	mvn	r0, #0
   17a48:	mvn	r1, #-2147483648	; 0x80000000
   17a4c:	mvn	r6, #0
   17a50:	bl	1873c <__assert_fail@plt+0x76b4>
   17a54:	ldr	r7, [sp, #24]
   17a58:	ldr	r3, [sp, #28]
   17a5c:	subs	r0, r0, r8
   17a60:	mov	r2, #1
   17a64:	sbcs	r0, r1, r4
   17a68:	mvn	r0, #-2147483648	; 0x80000000
   17a6c:	blt	17a80 <__assert_fail@plt+0x69f8>
   17a70:	umull	r6, r0, r8, r7
   17a74:	mov	r2, #0
   17a78:	mla	r0, r8, r3, r0
   17a7c:	mla	r0, r4, r7, r0
   17a80:	ldr	r1, [sp, #8]
   17a84:	mov	r7, r0
   17a88:	orr	r3, r2, r1
   17a8c:	b	17ef4 <__assert_fail@plt+0x6e6c>
   17a90:	mov	r0, #0
   17a94:	mov	r1, #-2147483648	; 0x80000000
   17a98:	mov	r2, r8
   17a9c:	mov	r3, r4
   17aa0:	bl	18668 <__assert_fail@plt+0x75e0>
   17aa4:	ldr	r7, [sp, #24]
   17aa8:	ldr	r3, [sp, #28]
   17aac:	mov	r2, #1
   17ab0:	subs	r0, r0, r7
   17ab4:	sbcs	r0, r1, r3
   17ab8:	mov	r0, #-2147483648	; 0x80000000
   17abc:	bge	17a70 <__assert_fail@plt+0x69e8>
   17ac0:	b	17a80 <__assert_fail@plt+0x69f8>
   17ac4:	ldr	r6, [sp, #8]
   17ac8:	mov	r0, #0
   17acc:	mov	r1, #-2147483648	; 0x80000000
   17ad0:	mov	r3, r9
   17ad4:	str	r4, [sp, #4]
   17ad8:	mov	r2, r6
   17adc:	bl	18668 <__assert_fail@plt+0x75e0>
   17ae0:	ldr	r2, [sp, #24]
   17ae4:	ldr	r3, [sp, #28]
   17ae8:	mov	r7, #1
   17aec:	mov	r8, #0
   17af0:	mov	r4, #-2147483648	; 0x80000000
   17af4:	subs	r0, r0, r2
   17af8:	sbcs	r0, r1, r3
   17afc:	blt	17b54 <__assert_fail@plt+0x6acc>
   17b00:	umull	r8, r0, r6, r2
   17b04:	ldr	r7, [sp, #4]
   17b08:	mla	r0, r6, r3, r0
   17b0c:	mla	r4, r9, r2, r0
   17b10:	cmp	r4, #0
   17b14:	bmi	17b54 <__assert_fail@plt+0x6acc>
   17b18:	ldr	r3, [sp, #28]
   17b1c:	mvn	r0, #0
   17b20:	mvn	r1, #-2147483648	; 0x80000000
   17b24:	str	r7, [sp, #4]
   17b28:	mvn	r7, #0
   17b2c:	mvn	r9, #-2147483648	; 0x80000000
   17b30:	bl	1873c <__assert_fail@plt+0x76b4>
   17b34:	ldr	r2, [sp, #24]
   17b38:	ldr	r3, [sp, #28]
   17b3c:	subs	r0, r0, r8
   17b40:	mov	r6, #1
   17b44:	sbcs	r0, r1, r4
   17b48:	str	r6, [sp, #8]
   17b4c:	bge	17b90 <__assert_fail@plt+0x6b08>
   17b50:	b	17bac <__assert_fail@plt+0x6b24>
   17b54:	mov	r0, #0
   17b58:	mov	r1, #-2147483648	; 0x80000000
   17b5c:	mov	r2, r8
   17b60:	mov	r3, r4
   17b64:	str	r7, [sp, #4]
   17b68:	bl	18668 <__assert_fail@plt+0x75e0>
   17b6c:	ldr	r2, [sp, #24]
   17b70:	ldr	r3, [sp, #28]
   17b74:	mov	r7, #1
   17b78:	mov	r9, #-2147483648	; 0x80000000
   17b7c:	str	r7, [sp, #8]
   17b80:	mov	r7, #0
   17b84:	subs	r0, r0, r2
   17b88:	sbcs	r0, r1, r3
   17b8c:	blt	17be4 <__assert_fail@plt+0x6b5c>
   17b90:	umull	r7, r0, r8, r2
   17b94:	mla	r0, r8, r3, r0
   17b98:	mla	r9, r4, r2, r0
   17b9c:	ldr	r0, [sp, #4]
   17ba0:	cmp	r9, #0
   17ba4:	str	r0, [sp, #8]
   17ba8:	bmi	17be4 <__assert_fail@plt+0x6b5c>
   17bac:	ldr	r3, [sp, #28]
   17bb0:	mvn	r0, #0
   17bb4:	mvn	r1, #-2147483648	; 0x80000000
   17bb8:	mvn	r4, #0
   17bbc:	mvn	r8, #-2147483648	; 0x80000000
   17bc0:	bl	1873c <__assert_fail@plt+0x76b4>
   17bc4:	ldr	r2, [sp, #24]
   17bc8:	ldr	r3, [sp, #28]
   17bcc:	subs	r0, r0, r7
   17bd0:	sbcs	r0, r1, r9
   17bd4:	bge	17c20 <__assert_fail@plt+0x6b98>
   17bd8:	mov	r0, #1
   17bdc:	str	r0, [sp, #8]
   17be0:	b	17c34 <__assert_fail@plt+0x6bac>
   17be4:	mov	r0, #0
   17be8:	mov	r1, #-2147483648	; 0x80000000
   17bec:	mov	r2, r7
   17bf0:	mov	r3, r9
   17bf4:	bl	18668 <__assert_fail@plt+0x75e0>
   17bf8:	ldr	r2, [sp, #24]
   17bfc:	ldr	r3, [sp, #28]
   17c00:	subs	r0, r0, r2
   17c04:	sbcs	r0, r1, r3
   17c08:	bge	17c20 <__assert_fail@plt+0x6b98>
   17c0c:	mov	r0, #1
   17c10:	mov	r4, #0
   17c14:	mov	r8, #-2147483648	; 0x80000000
   17c18:	str	r0, [sp, #8]
   17c1c:	b	17c68 <__assert_fail@plt+0x6be0>
   17c20:	umull	r4, r0, r7, r2
   17c24:	mla	r0, r7, r3, r0
   17c28:	mla	r8, r9, r2, r0
   17c2c:	cmp	r8, #0
   17c30:	bmi	17c68 <__assert_fail@plt+0x6be0>
   17c34:	ldr	r3, [sp, #28]
   17c38:	mvn	r0, #0
   17c3c:	mvn	r1, #-2147483648	; 0x80000000
   17c40:	mvn	r6, #0
   17c44:	mvn	r9, #-2147483648	; 0x80000000
   17c48:	bl	1873c <__assert_fail@plt+0x76b4>
   17c4c:	ldr	r2, [sp, #24]
   17c50:	ldr	r3, [sp, #28]
   17c54:	subs	r0, r0, r4
   17c58:	sbcs	r0, r1, r8
   17c5c:	bge	17ca0 <__assert_fail@plt+0x6c18>
   17c60:	mov	r8, #1
   17c64:	b	17cb8 <__assert_fail@plt+0x6c30>
   17c68:	mov	r0, #0
   17c6c:	mov	r1, #-2147483648	; 0x80000000
   17c70:	mov	r2, r4
   17c74:	mov	r3, r8
   17c78:	bl	18668 <__assert_fail@plt+0x75e0>
   17c7c:	ldr	r2, [sp, #24]
   17c80:	ldr	r3, [sp, #28]
   17c84:	subs	r0, r0, r2
   17c88:	sbcs	r0, r1, r3
   17c8c:	bge	17ca0 <__assert_fail@plt+0x6c18>
   17c90:	mov	r8, #1
   17c94:	mov	r6, #0
   17c98:	mov	r9, #-2147483648	; 0x80000000
   17c9c:	b	17d08 <__assert_fail@plt+0x6c80>
   17ca0:	umull	r6, r0, r4, r2
   17ca4:	mla	r0, r4, r3, r0
   17ca8:	mla	r9, r8, r2, r0
   17cac:	ldr	r8, [sp, #8]
   17cb0:	cmp	r9, #0
   17cb4:	bmi	17d08 <__assert_fail@plt+0x6c80>
   17cb8:	ldr	r3, [sp, #28]
   17cbc:	mvn	r0, #0
   17cc0:	mvn	r1, #-2147483648	; 0x80000000
   17cc4:	mvn	r4, #0
   17cc8:	mvn	r7, #-2147483648	; 0x80000000
   17ccc:	bl	1873c <__assert_fail@plt+0x76b4>
   17cd0:	ldr	r3, [sp, #24]
   17cd4:	ldr	ip, [sp, #28]
   17cd8:	subs	r0, r0, r6
   17cdc:	mov	r2, #1
   17ce0:	sbcs	r0, r1, r9
   17ce4:	blt	17cf8 <__assert_fail@plt+0x6c70>
   17ce8:	umull	r4, r0, r6, r3
   17cec:	mov	r2, #0
   17cf0:	mla	r0, r6, ip, r0
   17cf4:	mla	r7, r9, r3, r0
   17cf8:	ldr	r9, [sp, #12]
   17cfc:	orr	r3, r2, r8
   17d00:	mov	r6, r4
   17d04:	b	17ef4 <__assert_fail@plt+0x6e6c>
   17d08:	mov	r0, #0
   17d0c:	mov	r1, #-2147483648	; 0x80000000
   17d10:	mov	r2, r6
   17d14:	mov	r3, r9
   17d18:	bl	18668 <__assert_fail@plt+0x75e0>
   17d1c:	ldr	r3, [sp, #24]
   17d20:	ldr	ip, [sp, #28]
   17d24:	mov	r2, #1
   17d28:	mov	r4, #0
   17d2c:	mov	r7, #-2147483648	; 0x80000000
   17d30:	subs	r0, r0, r3
   17d34:	sbcs	r0, r1, ip
   17d38:	bge	17ce8 <__assert_fail@plt+0x6c60>
   17d3c:	b	17cf8 <__assert_fail@plt+0x6c70>
   17d40:	ldr	r6, [sp, #8]
   17d44:	mov	r0, #0
   17d48:	mov	r1, #-2147483648	; 0x80000000
   17d4c:	mov	r3, r8
   17d50:	str	r4, [sp, #4]
   17d54:	mov	r2, r6
   17d58:	bl	18668 <__assert_fail@plt+0x75e0>
   17d5c:	ldr	r2, [sp, #24]
   17d60:	ldr	r3, [sp, #28]
   17d64:	mov	r7, #1
   17d68:	mov	r9, #0
   17d6c:	mov	r4, #-2147483648	; 0x80000000
   17d70:	subs	r0, r0, r2
   17d74:	sbcs	r0, r1, r3
   17d78:	blt	17dd0 <__assert_fail@plt+0x6d48>
   17d7c:	umull	r9, r0, r6, r2
   17d80:	ldr	r7, [sp, #4]
   17d84:	mla	r0, r6, r3, r0
   17d88:	mla	r4, r8, r2, r0
   17d8c:	cmp	r4, #0
   17d90:	bmi	17dd0 <__assert_fail@plt+0x6d48>
   17d94:	ldr	r3, [sp, #28]
   17d98:	mvn	r0, #0
   17d9c:	mvn	r1, #-2147483648	; 0x80000000
   17da0:	str	r7, [sp, #4]
   17da4:	mvn	r8, #0
   17da8:	mvn	r7, #-2147483648	; 0x80000000
   17dac:	bl	1873c <__assert_fail@plt+0x76b4>
   17db0:	ldr	r2, [sp, #24]
   17db4:	ldr	r3, [sp, #28]
   17db8:	subs	r0, r0, r9
   17dbc:	mov	r6, #1
   17dc0:	sbcs	r0, r1, r4
   17dc4:	str	r6, [sp, #8]
   17dc8:	bge	17e0c <__assert_fail@plt+0x6d84>
   17dcc:	b	17e28 <__assert_fail@plt+0x6da0>
   17dd0:	mov	r0, #0
   17dd4:	mov	r1, #-2147483648	; 0x80000000
   17dd8:	mov	r2, r9
   17ddc:	mov	r3, r4
   17de0:	str	r7, [sp, #4]
   17de4:	bl	18668 <__assert_fail@plt+0x75e0>
   17de8:	ldr	r2, [sp, #24]
   17dec:	ldr	r3, [sp, #28]
   17df0:	mov	r7, #1
   17df4:	mov	r8, #0
   17df8:	str	r7, [sp, #8]
   17dfc:	mov	r7, #-2147483648	; 0x80000000
   17e00:	subs	r0, r0, r2
   17e04:	sbcs	r0, r1, r3
   17e08:	blt	17e5c <__assert_fail@plt+0x6dd4>
   17e0c:	umull	r8, r0, r9, r2
   17e10:	mla	r0, r9, r3, r0
   17e14:	mla	r7, r4, r2, r0
   17e18:	ldr	r0, [sp, #4]
   17e1c:	cmp	r7, #0
   17e20:	str	r0, [sp, #8]
   17e24:	bmi	17e5c <__assert_fail@plt+0x6dd4>
   17e28:	ldr	r3, [sp, #28]
   17e2c:	mvn	r0, #0
   17e30:	mvn	r1, #-2147483648	; 0x80000000
   17e34:	mvn	r4, #0
   17e38:	mvn	r9, #-2147483648	; 0x80000000
   17e3c:	bl	1873c <__assert_fail@plt+0x76b4>
   17e40:	ldr	r2, [sp, #24]
   17e44:	ldr	r3, [sp, #28]
   17e48:	subs	r0, r0, r8
   17e4c:	sbcs	r0, r1, r7
   17e50:	bge	17e94 <__assert_fail@plt+0x6e0c>
   17e54:	mov	r8, #1
   17e58:	b	17eac <__assert_fail@plt+0x6e24>
   17e5c:	mov	r0, #0
   17e60:	mov	r1, #-2147483648	; 0x80000000
   17e64:	mov	r2, r8
   17e68:	mov	r3, r7
   17e6c:	bl	18668 <__assert_fail@plt+0x75e0>
   17e70:	ldr	r2, [sp, #24]
   17e74:	ldr	r3, [sp, #28]
   17e78:	subs	r0, r0, r2
   17e7c:	sbcs	r0, r1, r3
   17e80:	bge	17e94 <__assert_fail@plt+0x6e0c>
   17e84:	mov	r8, #1
   17e88:	mov	r4, #0
   17e8c:	mov	r9, #-2147483648	; 0x80000000
   17e90:	b	17f24 <__assert_fail@plt+0x6e9c>
   17e94:	umull	r4, r0, r8, r2
   17e98:	mla	r0, r8, r3, r0
   17e9c:	ldr	r8, [sp, #8]
   17ea0:	mla	r9, r7, r2, r0
   17ea4:	cmp	r9, #0
   17ea8:	bmi	17f24 <__assert_fail@plt+0x6e9c>
   17eac:	ldr	r3, [sp, #28]
   17eb0:	mvn	r0, #0
   17eb4:	mvn	r1, #-2147483648	; 0x80000000
   17eb8:	mvn	r6, #0
   17ebc:	mvn	r7, #-2147483648	; 0x80000000
   17ec0:	bl	1873c <__assert_fail@plt+0x76b4>
   17ec4:	ldr	r3, [sp, #24]
   17ec8:	ldr	ip, [sp, #28]
   17ecc:	subs	r0, r0, r4
   17ed0:	mov	r2, #1
   17ed4:	sbcs	r0, r1, r9
   17ed8:	blt	17eec <__assert_fail@plt+0x6e64>
   17edc:	umull	r6, r0, r4, r3
   17ee0:	mov	r2, #0
   17ee4:	mla	r0, r4, ip, r0
   17ee8:	mla	r7, r9, r3, r0
   17eec:	ldr	r9, [sp, #12]
   17ef0:	orr	r3, r2, r8
   17ef4:	ldr	r1, [sp, #20]
   17ef8:	ldr	r2, [sp, #16]
   17efc:	orr	r5, r3, r5
   17f00:	add	r0, r1, r2
   17f04:	str	r0, [sl]
   17f08:	ldrb	r0, [r1, r2]
   17f0c:	cmp	r0, #0
   17f10:	orrne	r5, r5, #2
   17f14:	strd	r6, [r9]
   17f18:	mov	r0, r5
   17f1c:	sub	sp, fp, #28
   17f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f24:	mov	r0, #0
   17f28:	mov	r1, #-2147483648	; 0x80000000
   17f2c:	mov	r2, r4
   17f30:	mov	r3, r9
   17f34:	bl	18668 <__assert_fail@plt+0x75e0>
   17f38:	ldr	r3, [sp, #24]
   17f3c:	ldr	ip, [sp, #28]
   17f40:	mov	r2, #1
   17f44:	mov	r6, #0
   17f48:	mov	r7, #-2147483648	; 0x80000000
   17f4c:	subs	r0, r0, r3
   17f50:	sbcs	r0, r1, ip
   17f54:	bge	17edc <__assert_fail@plt+0x6e54>
   17f58:	b	17eec <__assert_fail@plt+0x6e64>
   17f5c:	ldr	r6, [sp, #8]
   17f60:	mov	r0, #0
   17f64:	mov	r1, #-2147483648	; 0x80000000
   17f68:	mov	r3, r9
   17f6c:	str	r4, [sp]
   17f70:	mov	r2, r6
   17f74:	bl	18668 <__assert_fail@plt+0x75e0>
   17f78:	ldr	r2, [sp, #24]
   17f7c:	ldr	r3, [sp, #28]
   17f80:	mov	r7, #1
   17f84:	mov	r8, #-2147483648	; 0x80000000
   17f88:	subs	r0, r0, r2
   17f8c:	sbcs	r0, r1, r3
   17f90:	mov	r0, #0
   17f94:	str	r0, [sp, #4]
   17f98:	blt	17ff8 <__assert_fail@plt+0x6f70>
   17f9c:	umull	r1, r0, r6, r2
   17fa0:	ldr	r7, [sp]
   17fa4:	mla	r0, r6, r3, r0
   17fa8:	mla	r8, r9, r2, r0
   17fac:	str	r1, [sp, #4]
   17fb0:	cmp	r8, #0
   17fb4:	bmi	17ff8 <__assert_fail@plt+0x6f70>
   17fb8:	ldr	r3, [sp, #28]
   17fbc:	mvn	r0, #0
   17fc0:	mvn	r1, #-2147483648	; 0x80000000
   17fc4:	str	r7, [sp]
   17fc8:	mvn	r7, #0
   17fcc:	mvn	r4, #-2147483648	; 0x80000000
   17fd0:	bl	1873c <__assert_fail@plt+0x76b4>
   17fd4:	mov	r6, #1
   17fd8:	ldr	r2, [sp, #24]
   17fdc:	ldr	r3, [sp, #28]
   17fe0:	str	r6, [sp, #8]
   17fe4:	ldr	r6, [sp, #4]
   17fe8:	subs	r0, r0, r6
   17fec:	sbcs	r0, r1, r8
   17ff0:	bge	18038 <__assert_fail@plt+0x6fb0>
   17ff4:	b	18054 <__assert_fail@plt+0x6fcc>
   17ff8:	ldr	r6, [sp, #4]
   17ffc:	mov	r0, #0
   18000:	mov	r1, #-2147483648	; 0x80000000
   18004:	mov	r3, r8
   18008:	str	r7, [sp]
   1800c:	mov	r2, r6
   18010:	bl	18668 <__assert_fail@plt+0x75e0>
   18014:	ldr	r2, [sp, #24]
   18018:	ldr	r3, [sp, #28]
   1801c:	mov	r7, #1
   18020:	mov	r4, #-2147483648	; 0x80000000
   18024:	str	r7, [sp, #8]
   18028:	mov	r7, #0
   1802c:	subs	r0, r0, r2
   18030:	sbcs	r0, r1, r3
   18034:	blt	1808c <__assert_fail@plt+0x7004>
   18038:	umull	r7, r0, r6, r2
   1803c:	mla	r0, r6, r3, r0
   18040:	mla	r4, r8, r2, r0
   18044:	ldr	r0, [sp]
   18048:	cmp	r4, #0
   1804c:	str	r0, [sp, #8]
   18050:	bmi	1808c <__assert_fail@plt+0x7004>
   18054:	ldr	r3, [sp, #28]
   18058:	mvn	r0, #0
   1805c:	mvn	r1, #-2147483648	; 0x80000000
   18060:	mvn	r9, #0
   18064:	mvn	r8, #-2147483648	; 0x80000000
   18068:	bl	1873c <__assert_fail@plt+0x76b4>
   1806c:	ldr	r2, [sp, #24]
   18070:	ldr	r3, [sp, #28]
   18074:	subs	r0, r0, r7
   18078:	sbcs	r0, r1, r4
   1807c:	bge	180c8 <__assert_fail@plt+0x7040>
   18080:	mov	r0, #1
   18084:	str	r0, [sp, #8]
   18088:	b	180dc <__assert_fail@plt+0x7054>
   1808c:	mov	r0, #0
   18090:	mov	r1, #-2147483648	; 0x80000000
   18094:	mov	r2, r7
   18098:	mov	r3, r4
   1809c:	bl	18668 <__assert_fail@plt+0x75e0>
   180a0:	ldr	r2, [sp, #24]
   180a4:	ldr	r3, [sp, #28]
   180a8:	subs	r0, r0, r2
   180ac:	sbcs	r0, r1, r3
   180b0:	bge	180c8 <__assert_fail@plt+0x7040>
   180b4:	mov	r0, #1
   180b8:	mov	r9, #0
   180bc:	mov	r8, #-2147483648	; 0x80000000
   180c0:	str	r0, [sp, #8]
   180c4:	b	18114 <__assert_fail@plt+0x708c>
   180c8:	umull	r9, r0, r7, r2
   180cc:	mla	r0, r7, r3, r0
   180d0:	mla	r8, r4, r2, r0
   180d4:	cmp	r8, #0
   180d8:	bmi	18114 <__assert_fail@plt+0x708c>
   180dc:	ldr	r3, [sp, #28]
   180e0:	mvn	r0, #0
   180e4:	mvn	r1, #-2147483648	; 0x80000000
   180e8:	mvn	r4, #0
   180ec:	mvn	r7, #-2147483648	; 0x80000000
   180f0:	bl	1873c <__assert_fail@plt+0x76b4>
   180f4:	ldr	r2, [sp, #24]
   180f8:	ldr	r3, [sp, #28]
   180fc:	subs	r0, r0, r9
   18100:	sbcs	r0, r1, r8
   18104:	bge	18150 <__assert_fail@plt+0x70c8>
   18108:	mov	r0, #1
   1810c:	str	r0, [sp, #8]
   18110:	b	18164 <__assert_fail@plt+0x70dc>
   18114:	mov	r0, #0
   18118:	mov	r1, #-2147483648	; 0x80000000
   1811c:	mov	r2, r9
   18120:	mov	r3, r8
   18124:	bl	18668 <__assert_fail@plt+0x75e0>
   18128:	ldr	r2, [sp, #24]
   1812c:	ldr	r3, [sp, #28]
   18130:	subs	r0, r0, r2
   18134:	sbcs	r0, r1, r3
   18138:	bge	18150 <__assert_fail@plt+0x70c8>
   1813c:	mov	r0, #1
   18140:	mov	r4, #0
   18144:	mov	r7, #-2147483648	; 0x80000000
   18148:	str	r0, [sp, #8]
   1814c:	b	1819c <__assert_fail@plt+0x7114>
   18150:	umull	r4, r0, r9, r2
   18154:	mla	r0, r9, r3, r0
   18158:	mla	r7, r8, r2, r0
   1815c:	cmp	r7, #0
   18160:	bmi	1819c <__assert_fail@plt+0x7114>
   18164:	ldr	r3, [sp, #28]
   18168:	mvn	r0, #0
   1816c:	mvn	r1, #-2147483648	; 0x80000000
   18170:	mvn	r8, #0
   18174:	mvn	r9, #-2147483648	; 0x80000000
   18178:	bl	1873c <__assert_fail@plt+0x76b4>
   1817c:	ldr	r2, [sp, #24]
   18180:	ldr	r3, [sp, #28]
   18184:	subs	r0, r0, r4
   18188:	sbcs	r0, r1, r7
   1818c:	bge	181d8 <__assert_fail@plt+0x7150>
   18190:	mov	r0, #1
   18194:	str	r0, [sp, #8]
   18198:	b	181ec <__assert_fail@plt+0x7164>
   1819c:	mov	r0, #0
   181a0:	mov	r1, #-2147483648	; 0x80000000
   181a4:	mov	r2, r4
   181a8:	mov	r3, r7
   181ac:	bl	18668 <__assert_fail@plt+0x75e0>
   181b0:	ldr	r2, [sp, #24]
   181b4:	ldr	r3, [sp, #28]
   181b8:	subs	r0, r0, r2
   181bc:	sbcs	r0, r1, r3
   181c0:	bge	181d8 <__assert_fail@plt+0x7150>
   181c4:	mov	r0, #1
   181c8:	mov	r8, #0
   181cc:	mov	r9, #-2147483648	; 0x80000000
   181d0:	str	r0, [sp, #8]
   181d4:	b	18228 <__assert_fail@plt+0x71a0>
   181d8:	umull	r8, r0, r4, r2
   181dc:	mla	r0, r4, r3, r0
   181e0:	mla	r9, r7, r2, r0
   181e4:	cmp	r9, #0
   181e8:	bmi	18228 <__assert_fail@plt+0x71a0>
   181ec:	ldr	r3, [sp, #28]
   181f0:	mvn	r0, #0
   181f4:	mvn	r1, #-2147483648	; 0x80000000
   181f8:	mvn	r4, #0
   181fc:	mvn	r6, #-2147483648	; 0x80000000
   18200:	bl	1873c <__assert_fail@plt+0x76b4>
   18204:	ldr	r2, [sp, #24]
   18208:	ldr	r3, [sp, #28]
   1820c:	subs	r0, r0, r8
   18210:	sbcs	r0, r1, r9
   18214:	bge	18268 <__assert_fail@plt+0x71e0>
   18218:	ldr	r9, [sp, #12]
   1821c:	mov	r0, #1
   18220:	str	r0, [sp, #8]
   18224:	b	18280 <__assert_fail@plt+0x71f8>
   18228:	mov	r0, #0
   1822c:	mov	r1, #-2147483648	; 0x80000000
   18230:	mov	r2, r8
   18234:	mov	r3, r9
   18238:	bl	18668 <__assert_fail@plt+0x75e0>
   1823c:	ldr	r2, [sp, #24]
   18240:	ldr	r3, [sp, #28]
   18244:	subs	r0, r0, r2
   18248:	sbcs	r0, r1, r3
   1824c:	bge	18268 <__assert_fail@plt+0x71e0>
   18250:	ldr	r9, [sp, #12]
   18254:	mov	r0, #1
   18258:	mov	r4, #0
   1825c:	mov	r6, #-2147483648	; 0x80000000
   18260:	str	r0, [sp, #8]
   18264:	b	182cc <__assert_fail@plt+0x7244>
   18268:	umull	r4, r0, r8, r2
   1826c:	mla	r0, r8, r3, r0
   18270:	mla	r6, r9, r2, r0
   18274:	ldr	r9, [sp, #12]
   18278:	cmp	r6, #0
   1827c:	bmi	182cc <__assert_fail@plt+0x7244>
   18280:	ldr	r3, [sp, #28]
   18284:	mvn	r0, #0
   18288:	mvn	r1, #-2147483648	; 0x80000000
   1828c:	mov	r8, r6
   18290:	mvn	r6, #0
   18294:	mvn	r7, #-2147483648	; 0x80000000
   18298:	bl	1873c <__assert_fail@plt+0x76b4>
   1829c:	ldr	r3, [sp, #24]
   182a0:	ldr	ip, [sp, #28]
   182a4:	subs	r0, r0, r4
   182a8:	mov	r2, #1
   182ac:	sbcs	r0, r1, r8
   182b0:	blt	182c4 <__assert_fail@plt+0x723c>
   182b4:	umull	r6, r0, r4, r3
   182b8:	mov	r2, #0
   182bc:	mla	r0, r4, ip, r0
   182c0:	mla	r7, r8, r3, r0
   182c4:	ldr	r0, [sp, #8]
   182c8:	b	17410 <__assert_fail@plt+0x6388>
   182cc:	mov	r0, #0
   182d0:	mov	r1, #-2147483648	; 0x80000000
   182d4:	mov	r2, r4
   182d8:	mov	r3, r6
   182dc:	bl	18668 <__assert_fail@plt+0x75e0>
   182e0:	ldr	r3, [sp, #24]
   182e4:	ldr	ip, [sp, #28]
   182e8:	mov	r8, r6
   182ec:	mov	r2, #1
   182f0:	mov	r6, #0
   182f4:	mov	r7, #-2147483648	; 0x80000000
   182f8:	subs	r0, r0, r3
   182fc:	sbcs	r0, r1, ip
   18300:	bge	182b4 <__assert_fail@plt+0x722c>
   18304:	b	182c4 <__assert_fail@plt+0x723c>
   18308:	movw	r0, #39861	; 0x9bb5
   1830c:	movw	r1, #39899	; 0x9bdb
   18310:	movw	r3, #39915	; 0x9beb
   18314:	mov	r2, #85	; 0x55
   18318:	movt	r0, #1
   1831c:	movt	r1, #1
   18320:	movt	r3, #1
   18324:	bl	11088 <__assert_fail@plt>
   18328:	clz	r2, r1
   1832c:	clz	r3, r0
   18330:	lsr	r2, r2, #5
   18334:	lsr	r3, r3, #5
   18338:	orrs	r2, r3, r2
   1833c:	movwne	r1, #1
   18340:	movwne	r0, #1
   18344:	cmp	r1, #0
   18348:	beq	18378 <__assert_fail@plt+0x72f0>
   1834c:	mvn	r2, #-2147483648	; 0x80000000
   18350:	udiv	r2, r2, r1
   18354:	cmp	r2, r0
   18358:	bcs	18378 <__assert_fail@plt+0x72f0>
   1835c:	push	{fp, lr}
   18360:	mov	fp, sp
   18364:	bl	10fa4 <__errno_location@plt>
   18368:	mov	r1, #12
   1836c:	str	r1, [r0]
   18370:	mov	r0, #0
   18374:	pop	{fp, pc}
   18378:	b	10e24 <calloc@plt>
   1837c:	cmp	r0, #0
   18380:	movweq	r0, #1
   18384:	cmn	r0, #1
   18388:	ble	18390 <__assert_fail@plt+0x7308>
   1838c:	b	10f2c <malloc@plt>
   18390:	push	{fp, lr}
   18394:	mov	fp, sp
   18398:	bl	10fa4 <__errno_location@plt>
   1839c:	mov	r1, #12
   183a0:	str	r1, [r0]
   183a4:	mov	r0, #0
   183a8:	pop	{fp, pc}
   183ac:	push	{fp, lr}
   183b0:	mov	fp, sp
   183b4:	cmp	r0, #0
   183b8:	beq	183d4 <__assert_fail@plt+0x734c>
   183bc:	cmp	r1, #0
   183c0:	beq	183e0 <__assert_fail@plt+0x7358>
   183c4:	cmn	r1, #1
   183c8:	ble	183ec <__assert_fail@plt+0x7364>
   183cc:	pop	{fp, lr}
   183d0:	b	10ec0 <realloc@plt>
   183d4:	mov	r0, r1
   183d8:	pop	{fp, lr}
   183dc:	b	1837c <__assert_fail@plt+0x72f4>
   183e0:	bl	13f68 <__assert_fail@plt+0x2ee0>
   183e4:	mov	r0, #0
   183e8:	pop	{fp, pc}
   183ec:	bl	10fa4 <__errno_location@plt>
   183f0:	mov	r1, #12
   183f4:	str	r1, [r0]
   183f8:	mov	r0, #0
   183fc:	pop	{fp, pc}
   18400:	push	{r4, r5, r6, sl, fp, lr}
   18404:	add	fp, sp, #16
   18408:	mov	r4, r0
   1840c:	bl	10f08 <__fpending@plt>
   18410:	ldr	r6, [r4]
   18414:	mov	r5, r0
   18418:	mov	r0, r4
   1841c:	bl	13e70 <__assert_fail@plt+0x2de8>
   18420:	tst	r6, #32
   18424:	bne	1845c <__assert_fail@plt+0x73d4>
   18428:	cmp	r0, #0
   1842c:	mov	r4, r0
   18430:	mvnne	r4, #0
   18434:	cmp	r5, #0
   18438:	bne	18468 <__assert_fail@plt+0x73e0>
   1843c:	cmp	r0, #0
   18440:	beq	18468 <__assert_fail@plt+0x73e0>
   18444:	bl	10fa4 <__errno_location@plt>
   18448:	ldr	r0, [r0]
   1844c:	subs	r4, r0, #9
   18450:	mvnne	r4, #0
   18454:	mov	r0, r4
   18458:	pop	{r4, r5, r6, sl, fp, pc}
   1845c:	mvn	r4, #0
   18460:	cmp	r0, #0
   18464:	beq	18470 <__assert_fail@plt+0x73e8>
   18468:	mov	r0, r4
   1846c:	pop	{r4, r5, r6, sl, fp, pc}
   18470:	bl	10fa4 <__errno_location@plt>
   18474:	mov	r1, #0
   18478:	str	r1, [r0]
   1847c:	mov	r0, r4
   18480:	pop	{r4, r5, r6, sl, fp, pc}
   18484:	push	{fp, lr}
   18488:	mov	fp, sp
   1848c:	mov	r0, #14
   18490:	bl	11034 <nl_langinfo@plt>
   18494:	movw	r1, #37111	; 0x90f7
   18498:	cmp	r0, #0
   1849c:	movt	r1, #1
   184a0:	movne	r1, r0
   184a4:	movw	r0, #39993	; 0x9c39
   184a8:	ldrb	r2, [r1]
   184ac:	movt	r0, #1
   184b0:	cmp	r2, #0
   184b4:	movne	r0, r1
   184b8:	pop	{fp, pc}
   184bc:	push	{r4, r5, r6, r7, fp, lr}
   184c0:	add	fp, sp, #16
   184c4:	sub	sp, sp, #8
   184c8:	cmp	r0, #0
   184cc:	add	r5, sp, #4
   184d0:	mov	r7, r2
   184d4:	mov	r4, r1
   184d8:	movne	r5, r0
   184dc:	mov	r0, r5
   184e0:	bl	10f14 <mbrtowc@plt>
   184e4:	mov	r6, r0
   184e8:	cmp	r7, #0
   184ec:	beq	18514 <__assert_fail@plt+0x748c>
   184f0:	cmn	r6, #2
   184f4:	bcc	18514 <__assert_fail@plt+0x748c>
   184f8:	mov	r0, #0
   184fc:	bl	1855c <__assert_fail@plt+0x74d4>
   18500:	cmp	r0, #0
   18504:	bne	18514 <__assert_fail@plt+0x748c>
   18508:	ldrb	r0, [r4]
   1850c:	mov	r6, #1
   18510:	str	r0, [r5]
   18514:	mov	r0, r6
   18518:	sub	sp, fp, #16
   1851c:	pop	{r4, r5, r6, r7, fp, pc}
   18520:	cmp	r2, #0
   18524:	beq	18554 <__assert_fail@plt+0x74cc>
   18528:	mvn	r3, #0
   1852c:	udiv	r3, r3, r2
   18530:	cmp	r3, r1
   18534:	bcs	18554 <__assert_fail@plt+0x74cc>
   18538:	push	{fp, lr}
   1853c:	mov	fp, sp
   18540:	bl	10fa4 <__errno_location@plt>
   18544:	mov	r1, #12
   18548:	str	r1, [r0]
   1854c:	mov	r0, #0
   18550:	pop	{fp, pc}
   18554:	mul	r1, r2, r1
   18558:	b	183ac <__assert_fail@plt+0x7324>
   1855c:	push	{r4, sl, fp, lr}
   18560:	add	fp, sp, #8
   18564:	sub	sp, sp, #264	; 0x108
   18568:	add	r1, sp, #7
   1856c:	movw	r2, #257	; 0x101
   18570:	bl	185c8 <__assert_fail@plt+0x7540>
   18574:	mov	r4, #0
   18578:	cmp	r0, #0
   1857c:	bne	185bc <__assert_fail@plt+0x7534>
   18580:	movw	r1, #39999	; 0x9c3f
   18584:	add	r0, sp, #7
   18588:	mov	r2, #2
   1858c:	movt	r1, #1
   18590:	bl	10f80 <bcmp@plt>
   18594:	cmp	r0, #0
   18598:	beq	185bc <__assert_fail@plt+0x7534>
   1859c:	movw	r1, #40001	; 0x9c41
   185a0:	add	r0, sp, #7
   185a4:	mov	r2, #6
   185a8:	movt	r1, #1
   185ac:	bl	10f80 <bcmp@plt>
   185b0:	cmp	r0, #0
   185b4:	mov	r4, r0
   185b8:	movwne	r4, #1
   185bc:	mov	r0, r4
   185c0:	sub	sp, fp, #8
   185c4:	pop	{r4, sl, fp, pc}
   185c8:	push	{r4, r5, r6, r7, fp, lr}
   185cc:	add	fp, sp, #16
   185d0:	mov	r4, r1
   185d4:	mov	r1, #0
   185d8:	mov	r6, r2
   185dc:	bl	1101c <setlocale@plt>
   185e0:	cmp	r0, #0
   185e4:	beq	18614 <__assert_fail@plt+0x758c>
   185e8:	mov	r7, r0
   185ec:	bl	10f8c <strlen@plt>
   185f0:	cmp	r0, r6
   185f4:	bcs	18630 <__assert_fail@plt+0x75a8>
   185f8:	add	r2, r0, #1
   185fc:	mov	r0, r4
   18600:	mov	r1, r7
   18604:	bl	10e90 <memcpy@plt>
   18608:	mov	r5, #0
   1860c:	mov	r0, r5
   18610:	pop	{r4, r5, r6, r7, fp, pc}
   18614:	mov	r5, #22
   18618:	cmp	r6, #0
   1861c:	beq	18658 <__assert_fail@plt+0x75d0>
   18620:	mov	r0, #0
   18624:	strb	r0, [r4]
   18628:	mov	r0, r5
   1862c:	pop	{r4, r5, r6, r7, fp, pc}
   18630:	mov	r5, #34	; 0x22
   18634:	cmp	r6, #0
   18638:	beq	18658 <__assert_fail@plt+0x75d0>
   1863c:	sub	r6, r6, #1
   18640:	mov	r0, r4
   18644:	mov	r1, r7
   18648:	mov	r2, r6
   1864c:	bl	10e90 <memcpy@plt>
   18650:	mov	r0, #0
   18654:	strb	r0, [r4, r6]
   18658:	mov	r0, r5
   1865c:	pop	{r4, r5, r6, r7, fp, pc}
   18660:	mov	r1, #0
   18664:	b	1101c <setlocale@plt>
   18668:	cmp	r3, #0
   1866c:	cmpeq	r2, #0
   18670:	bne	18694 <__assert_fail@plt+0x760c>
   18674:	cmp	r1, #0
   18678:	movlt	r1, #-2147483648	; 0x80000000
   1867c:	movlt	r0, #0
   18680:	blt	18690 <__assert_fail@plt+0x7608>
   18684:	cmpeq	r0, #0
   18688:	mvnne	r1, #-2147483648	; 0x80000000
   1868c:	mvnne	r0, #0
   18690:	b	18778 <__assert_fail@plt+0x76f0>
   18694:	sub	sp, sp, #8
   18698:	push	{sp, lr}
   1869c:	cmp	r1, #0
   186a0:	blt	186c0 <__assert_fail@plt+0x7638>
   186a4:	cmp	r3, #0
   186a8:	blt	186f4 <__assert_fail@plt+0x766c>
   186ac:	bl	18788 <__assert_fail@plt+0x7700>
   186b0:	ldr	lr, [sp, #4]
   186b4:	add	sp, sp, #8
   186b8:	pop	{r2, r3}
   186bc:	bx	lr
   186c0:	rsbs	r0, r0, #0
   186c4:	sbc	r1, r1, r1, lsl #1
   186c8:	cmp	r3, #0
   186cc:	blt	18718 <__assert_fail@plt+0x7690>
   186d0:	bl	18788 <__assert_fail@plt+0x7700>
   186d4:	ldr	lr, [sp, #4]
   186d8:	add	sp, sp, #8
   186dc:	pop	{r2, r3}
   186e0:	rsbs	r0, r0, #0
   186e4:	sbc	r1, r1, r1, lsl #1
   186e8:	rsbs	r2, r2, #0
   186ec:	sbc	r3, r3, r3, lsl #1
   186f0:	bx	lr
   186f4:	rsbs	r2, r2, #0
   186f8:	sbc	r3, r3, r3, lsl #1
   186fc:	bl	18788 <__assert_fail@plt+0x7700>
   18700:	ldr	lr, [sp, #4]
   18704:	add	sp, sp, #8
   18708:	pop	{r2, r3}
   1870c:	rsbs	r0, r0, #0
   18710:	sbc	r1, r1, r1, lsl #1
   18714:	bx	lr
   18718:	rsbs	r2, r2, #0
   1871c:	sbc	r3, r3, r3, lsl #1
   18720:	bl	18788 <__assert_fail@plt+0x7700>
   18724:	ldr	lr, [sp, #4]
   18728:	add	sp, sp, #8
   1872c:	pop	{r2, r3}
   18730:	rsbs	r2, r2, #0
   18734:	sbc	r3, r3, r3, lsl #1
   18738:	bx	lr
   1873c:	cmp	r3, #0
   18740:	cmpeq	r2, #0
   18744:	bne	1875c <__assert_fail@plt+0x76d4>
   18748:	cmp	r1, #0
   1874c:	cmpeq	r0, #0
   18750:	mvnne	r1, #0
   18754:	mvnne	r0, #0
   18758:	b	18778 <__assert_fail@plt+0x76f0>
   1875c:	sub	sp, sp, #8
   18760:	push	{sp, lr}
   18764:	bl	18788 <__assert_fail@plt+0x7700>
   18768:	ldr	lr, [sp, #4]
   1876c:	add	sp, sp, #8
   18770:	pop	{r2, r3}
   18774:	bx	lr
   18778:	push	{r1, lr}
   1877c:	mov	r0, #8
   18780:	bl	10e3c <raise@plt>
   18784:	pop	{r1, pc}
   18788:	cmp	r1, r3
   1878c:	cmpeq	r0, r2
   18790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18794:	mov	r4, r0
   18798:	movcc	r0, #0
   1879c:	mov	r5, r1
   187a0:	ldr	lr, [sp, #36]	; 0x24
   187a4:	movcc	r1, r0
   187a8:	bcc	188a4 <__assert_fail@plt+0x781c>
   187ac:	cmp	r3, #0
   187b0:	clzeq	ip, r2
   187b4:	clzne	ip, r3
   187b8:	addeq	ip, ip, #32
   187bc:	cmp	r5, #0
   187c0:	clzeq	r1, r4
   187c4:	addeq	r1, r1, #32
   187c8:	clzne	r1, r5
   187cc:	sub	ip, ip, r1
   187d0:	sub	sl, ip, #32
   187d4:	lsl	r9, r3, ip
   187d8:	rsb	fp, ip, #32
   187dc:	orr	r9, r9, r2, lsl sl
   187e0:	orr	r9, r9, r2, lsr fp
   187e4:	lsl	r8, r2, ip
   187e8:	cmp	r5, r9
   187ec:	cmpeq	r4, r8
   187f0:	movcc	r0, #0
   187f4:	movcc	r1, r0
   187f8:	bcc	18814 <__assert_fail@plt+0x778c>
   187fc:	mov	r0, #1
   18800:	subs	r4, r4, r8
   18804:	lsl	r1, r0, sl
   18808:	orr	r1, r1, r0, lsr fp
   1880c:	lsl	r0, r0, ip
   18810:	sbc	r5, r5, r9
   18814:	cmp	ip, #0
   18818:	beq	188a4 <__assert_fail@plt+0x781c>
   1881c:	lsr	r6, r8, #1
   18820:	orr	r6, r6, r9, lsl #31
   18824:	lsr	r7, r9, #1
   18828:	mov	r2, ip
   1882c:	b	18850 <__assert_fail@plt+0x77c8>
   18830:	subs	r3, r4, r6
   18834:	sbc	r8, r5, r7
   18838:	adds	r3, r3, r3
   1883c:	adc	r8, r8, r8
   18840:	adds	r4, r3, #1
   18844:	adc	r5, r8, #0
   18848:	subs	r2, r2, #1
   1884c:	beq	1886c <__assert_fail@plt+0x77e4>
   18850:	cmp	r5, r7
   18854:	cmpeq	r4, r6
   18858:	bcs	18830 <__assert_fail@plt+0x77a8>
   1885c:	adds	r4, r4, r4
   18860:	adc	r5, r5, r5
   18864:	subs	r2, r2, #1
   18868:	bne	18850 <__assert_fail@plt+0x77c8>
   1886c:	lsr	r3, r4, ip
   18870:	orr	r3, r3, r5, lsl fp
   18874:	lsr	r2, r5, ip
   18878:	orr	r3, r3, r5, lsr sl
   1887c:	adds	r0, r0, r4
   18880:	mov	r4, r3
   18884:	lsl	r3, r2, ip
   18888:	orr	r3, r3, r4, lsl sl
   1888c:	lsl	ip, r4, ip
   18890:	orr	r3, r3, r4, lsr fp
   18894:	adc	r1, r1, r5
   18898:	subs	r0, r0, ip
   1889c:	mov	r5, r2
   188a0:	sbc	r1, r1, r3
   188a4:	cmp	lr, #0
   188a8:	strdne	r4, [lr]
   188ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   188b4:	mov	r7, r0
   188b8:	ldr	r6, [pc, #72]	; 18908 <__assert_fail@plt+0x7880>
   188bc:	ldr	r5, [pc, #72]	; 1890c <__assert_fail@plt+0x7884>
   188c0:	add	r6, pc, r6
   188c4:	add	r5, pc, r5
   188c8:	sub	r6, r6, r5
   188cc:	mov	r8, r1
   188d0:	mov	r9, r2
   188d4:	bl	10e04 <calloc@plt-0x20>
   188d8:	asrs	r6, r6, #2
   188dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   188e0:	mov	r4, #0
   188e4:	add	r4, r4, #1
   188e8:	ldr	r3, [r5], #4
   188ec:	mov	r2, r9
   188f0:	mov	r1, r8
   188f4:	mov	r0, r7
   188f8:	blx	r3
   188fc:	cmp	r6, r4
   18900:	bne	188e4 <__assert_fail@plt+0x785c>
   18904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18908:	andeq	r1, r1, r4, asr #12
   1890c:	andeq	r1, r1, ip, lsr r6
   18910:	bx	lr
   18914:	ldr	r3, [pc, #12]	; 18928 <__assert_fail@plt+0x78a0>
   18918:	mov	r1, #0
   1891c:	add	r3, pc, r3
   18920:	ldr	r2, [r3]
   18924:	b	10fb0 <__cxa_atexit@plt>
   18928:	andeq	r1, r1, r0, asr #15

Disassembly of section .fini:

0001892c <.fini>:
   1892c:	push	{r3, lr}
   18930:	pop	{r3, pc}
