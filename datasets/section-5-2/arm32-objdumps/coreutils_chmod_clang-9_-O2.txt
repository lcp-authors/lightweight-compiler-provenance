
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

0001109c <.init>:
   1109c:	push	{r3, lr}
   110a0:	bl	113ec <__assert_fail@plt+0x48>
   110a4:	pop	{r3, pc}

Disassembly of section .plt:

000110a8 <fstatfs64@plt-0x14>:
   110a8:	push	{lr}		; (str lr, [sp, #-4]!)
   110ac:	ldr	lr, [pc, #4]	; 110b8 <fstatfs64@plt-0x4>
   110b0:	add	lr, pc, lr
   110b4:	ldr	pc, [lr, #8]!
   110b8:	andeq	sl, r1, r8, asr #30

000110bc <fstatfs64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3912]!	; 0xf48

000110c8 <calloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3904]!	; 0xf40

000110d4 <fputs_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3896]!	; 0xf38

000110e0 <raise@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3888]!	; 0xf30

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3880]!	; 0xf28

000110f8 <fflush@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3872]!	; 0xf20

00011104 <memmove@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3864]!	; 0xf18

00011110 <free@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3856]!	; 0xf10

0001111c <_exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3848]!	; 0xf08

00011128 <memcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3840]!	; 0xf00

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3832]!	; 0xef8

00011140 <dcgettext@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3824]!	; 0xef0

0001114c <realloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3816]!	; 0xee8

00011158 <textdomain@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3808]!	; 0xee0

00011164 <__fxstatat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3800]!	; 0xed8

00011170 <iswprint@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3792]!	; 0xed0

0001117c <__fxstat64@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3784]!	; 0xec8

00011188 <fwrite@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3776]!	; 0xec0

00011194 <lseek64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a0 <__ctype_get_mb_cur_max@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111ac <__fpending@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3752]!	; 0xea8

000111b8 <mbrtowc@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3744]!	; 0xea0

000111c4 <error@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3736]!	; 0xe98

000111d0 <open64@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3728]!	; 0xe90

000111dc <malloc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3720]!	; 0xe88

000111e8 <__libc_start_main@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3712]!	; 0xe80

000111f4 <__freading@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3704]!	; 0xe78

00011200 <__gmon_start__@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3696]!	; 0xe70

0001120c <getopt_long@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3688]!	; 0xe68

00011218 <__ctype_b_loc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3680]!	; 0xe60

00011224 <exit@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3672]!	; 0xe58

00011230 <bcmp@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3664]!	; 0xe50

0001123c <strlen@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3656]!	; 0xe48

00011248 <openat64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3648]!	; 0xe40

00011254 <fchmodat@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3640]!	; 0xe38

00011260 <__errno_location@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3632]!	; 0xe30

0001126c <__sprintf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3624]!	; 0xe28

00011278 <__cxa_atexit@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3616]!	; 0xe20

00011284 <memset@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3608]!	; 0xe18

00011290 <__printf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3600]!	; 0xe10

0001129c <fileno@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3592]!	; 0xe08

000112a8 <__fprintf_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3584]!	; 0xe00

000112b4 <fclose@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c0 <fseeko64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112cc <fcntl64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3560]!	; 0xde8

000112d8 <setlocale@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3552]!	; 0xde0

000112e4 <strrchr@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f0 <nl_langinfo@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112fc <readdir64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3528]!	; 0xdc8

00011308 <fdopendir@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3520]!	; 0xdc0

00011314 <dirfd@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011320 <fchdir@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3504]!	; 0xdb0

0001132c <qsort@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3496]!	; 0xda8

00011338 <bindtextdomain@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3488]!	; 0xda0

00011344 <umask@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3480]!	; 0xd98

00011350 <chmod@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3472]!	; 0xd90

0001135c <__xstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3464]!	; 0xd88

00011368 <strncmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3456]!	; 0xd80

00011374 <abort@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3448]!	; 0xd78

00011380 <close@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3440]!	; 0xd70

0001138c <__lxstat64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3432]!	; 0xd68

00011398 <closedir@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3424]!	; 0xd60

000113a4 <__assert_fail@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113b0 <.text>:
   113b0:	mov	fp, #0
   113b4:	mov	lr, #0
   113b8:	pop	{r1}		; (ldr r1, [sp], #4)
   113bc:	mov	r2, sp
   113c0:	push	{r2}		; (str r2, [sp, #-4]!)
   113c4:	push	{r0}		; (str r0, [sp, #-4]!)
   113c8:	ldr	ip, [pc, #16]	; 113e0 <__assert_fail@plt+0x3c>
   113cc:	push	{ip}		; (str ip, [sp, #-4]!)
   113d0:	ldr	r0, [pc, #12]	; 113e4 <__assert_fail@plt+0x40>
   113d4:	ldr	r3, [pc, #12]	; 113e8 <__assert_fail@plt+0x44>
   113d8:	bl	111e8 <__libc_start_main@plt>
   113dc:	bl	11374 <abort@plt>
   113e0:	andeq	r9, r1, ip, asr pc
   113e4:	andeq	r1, r1, r8, ror r7
   113e8:	strdeq	r9, [r1], -ip
   113ec:	ldr	r3, [pc, #20]	; 11408 <__assert_fail@plt+0x64>
   113f0:	ldr	r2, [pc, #20]	; 1140c <__assert_fail@plt+0x68>
   113f4:	add	r3, pc, r3
   113f8:	ldr	r2, [r3, r2]
   113fc:	cmp	r2, #0
   11400:	bxeq	lr
   11404:	b	11200 <__gmon_start__@plt>
   11408:	andeq	sl, r1, r4, lsl #24
   1140c:	andeq	r0, r0, r8, lsl #2
   11410:	ldr	r0, [pc, #24]	; 11430 <__assert_fail@plt+0x8c>
   11414:	ldr	r3, [pc, #24]	; 11434 <__assert_fail@plt+0x90>
   11418:	cmp	r3, r0
   1141c:	bxeq	lr
   11420:	ldr	r3, [pc, #16]	; 11438 <__assert_fail@plt+0x94>
   11424:	cmp	r3, #0
   11428:	bxeq	lr
   1142c:	bx	r3
   11430:	andeq	ip, r2, r8, ror #2
   11434:	andeq	ip, r2, r8, ror #2
   11438:	andeq	r0, r0, r0
   1143c:	ldr	r0, [pc, #36]	; 11468 <__assert_fail@plt+0xc4>
   11440:	ldr	r1, [pc, #36]	; 1146c <__assert_fail@plt+0xc8>
   11444:	sub	r1, r1, r0
   11448:	asr	r1, r1, #2
   1144c:	add	r1, r1, r1, lsr #31
   11450:	asrs	r1, r1, #1
   11454:	bxeq	lr
   11458:	ldr	r3, [pc, #16]	; 11470 <__assert_fail@plt+0xcc>
   1145c:	cmp	r3, #0
   11460:	bxeq	lr
   11464:	bx	r3
   11468:	andeq	ip, r2, r8, ror #2
   1146c:	andeq	ip, r2, r8, ror #2
   11470:	andeq	r0, r0, r0
   11474:	push	{r4, lr}
   11478:	ldr	r4, [pc, #24]	; 11498 <__assert_fail@plt+0xf4>
   1147c:	ldrb	r3, [r4]
   11480:	cmp	r3, #0
   11484:	popne	{r4, pc}
   11488:	bl	11410 <__assert_fail@plt+0x6c>
   1148c:	mov	r3, #1
   11490:	strb	r3, [r4]
   11494:	pop	{r4, pc}
   11498:	andeq	ip, r2, r4, lsl #3
   1149c:	b	1143c <__assert_fail@plt+0x98>
   114a0:	push	{fp, lr}
   114a4:	mov	fp, sp
   114a8:	sub	sp, sp, #64	; 0x40
   114ac:	mov	r4, r0
   114b0:	cmp	r0, #0
   114b4:	bne	11734 <__assert_fail@plt+0x390>
   114b8:	movw	r1, #40875	; 0x9fab
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	11140 <dcgettext@plt>
   114cc:	mov	r1, r0
   114d0:	movw	r0, #49588	; 0xc1b4
   114d4:	movt	r0, #2
   114d8:	ldr	r2, [r0]
   114dc:	mov	r0, #1
   114e0:	mov	r3, r2
   114e4:	str	r2, [sp]
   114e8:	bl	11290 <__printf_chk@plt>
   114ec:	movw	r1, #41010	; 0xa032
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	movt	r1, #1
   114fc:	bl	11140 <dcgettext@plt>
   11500:	movw	r7, #49532	; 0xc17c
   11504:	movt	r7, #2
   11508:	ldr	r1, [r7]
   1150c:	bl	110d4 <fputs_unlocked@plt>
   11510:	movw	r1, #41115	; 0xa09b
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11140 <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	110d4 <fputs_unlocked@plt>
   1152c:	movw	r1, #41316	; 0xa164
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11140 <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	110d4 <fputs_unlocked@plt>
   11548:	movw	r1, #41444	; 0xa1e4
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	11140 <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	110d4 <fputs_unlocked@plt>
   11564:	movw	r1, #41510	; 0xa226
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	11140 <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	110d4 <fputs_unlocked@plt>
   11580:	movw	r1, #41577	; 0xa269
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	11140 <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	110d4 <fputs_unlocked@plt>
   1159c:	movw	r1, #41622	; 0xa296
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	11140 <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	110d4 <fputs_unlocked@plt>
   115b8:	movw	r1, #41676	; 0xa2cc
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11140 <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	110d4 <fputs_unlocked@plt>
   115d4:	movw	r0, #43360	; 0xa960
   115d8:	mov	r2, #48	; 0x30
   115dc:	add	r6, sp, #8
   115e0:	movw	r5, #41751	; 0xa317
   115e4:	movt	r0, #1
   115e8:	movt	r5, #1
   115ec:	add	r1, r0, #32
   115f0:	add	r3, r0, #16
   115f4:	vld1.64	{d18-d19}, [r0], r2
   115f8:	vld1.64	{d16-d17}, [r1]
   115fc:	vld1.64	{d20-d21}, [r3]
   11600:	vldr	d22, [r0]
   11604:	add	r1, r6, #32
   11608:	add	r0, r6, #16
   1160c:	vst1.64	{d16-d17}, [r1]
   11610:	movw	r1, #42025	; 0xa429
   11614:	vst1.64	{d20-d21}, [r0]
   11618:	mov	r0, r6
   1161c:	movt	r1, #1
   11620:	vst1.64	{d18-d19}, [r0], r2
   11624:	vstr	d22, [r0]
   11628:	mov	r0, r5
   1162c:	bl	110ec <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	ldrne	r1, [r6, #8]!
   11638:	cmpne	r1, #0
   1163c:	bne	11628 <__assert_fail@plt+0x284>
   11640:	movw	r1, #42120	; 0xa488
   11644:	ldr	r6, [r6, #4]
   11648:	mov	r0, #0
   1164c:	mov	r2, #5
   11650:	movt	r1, #1
   11654:	bl	11140 <dcgettext@plt>
   11658:	movw	r2, #41849	; 0xa379
   1165c:	movw	r3, #42143	; 0xa49f
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	movt	r2, #1
   1166c:	movt	r3, #1
   11670:	bl	11290 <__printf_chk@plt>
   11674:	cmp	r6, #0
   11678:	mov	r0, #5
   1167c:	mov	r1, #0
   11680:	moveq	r6, r5
   11684:	bl	112d8 <setlocale@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116c4 <__assert_fail@plt+0x320>
   11690:	movw	r1, #42183	; 0xa4c7
   11694:	mov	r2, #3
   11698:	movt	r1, #1
   1169c:	bl	11368 <strncmp@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	116c4 <__assert_fail@plt+0x320>
   116a8:	movw	r1, #42187	; 0xa4cb
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	11140 <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	110d4 <fputs_unlocked@plt>
   116c4:	movw	r1, #42258	; 0xa512
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	11140 <dcgettext@plt>
   116d8:	movw	r2, #42143	; 0xa49f
   116dc:	mov	r1, r0
   116e0:	mov	r0, #1
   116e4:	mov	r3, r5
   116e8:	movt	r2, #1
   116ec:	bl	11290 <__printf_chk@plt>
   116f0:	movw	r1, #42285	; 0xa52d
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	11140 <dcgettext@plt>
   11704:	mov	r1, r0
   11708:	movw	r0, #42053	; 0xa445
   1170c:	movw	r3, #41114	; 0xa09a
   11710:	cmp	r6, r5
   11714:	mov	r2, r6
   11718:	movt	r0, #1
   1171c:	movt	r3, #1
   11720:	moveq	r3, r0
   11724:	mov	r0, #1
   11728:	bl	11290 <__printf_chk@plt>
   1172c:	mov	r0, r4
   11730:	bl	11224 <exit@plt>
   11734:	movw	r0, #49528	; 0xc178
   11738:	movw	r1, #40836	; 0x9f84
   1173c:	mov	r2, #5
   11740:	movt	r0, #2
   11744:	movt	r1, #1
   11748:	ldr	r5, [r0]
   1174c:	mov	r0, #0
   11750:	bl	11140 <dcgettext@plt>
   11754:	mov	r2, r0
   11758:	movw	r0, #49588	; 0xc1b4
   1175c:	mov	r1, #1
   11760:	movt	r0, #2
   11764:	ldr	r3, [r0]
   11768:	mov	r0, r5
   1176c:	bl	112a8 <__fprintf_chk@plt>
   11770:	mov	r0, r4
   11774:	bl	11224 <exit@plt>
   11778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1177c:	add	fp, sp, #28
   11780:	sub	sp, sp, #156	; 0x9c
   11784:	mov	r4, #0
   11788:	mov	r7, r0
   1178c:	mov	r5, r1
   11790:	str	r4, [sp, #36]	; 0x24
   11794:	ldr	r0, [r1]
   11798:	bl	16a74 <__assert_fail@plt+0x56d0>
   1179c:	movw	r1, #41114	; 0xa09a
   117a0:	mov	r0, #6
   117a4:	movt	r1, #1
   117a8:	bl	112d8 <setlocale@plt>
   117ac:	movw	r6, #41853	; 0xa37d
   117b0:	movw	r1, #41757	; 0xa31d
   117b4:	movt	r6, #1
   117b8:	movt	r1, #1
   117bc:	mov	r0, r6
   117c0:	bl	11338 <bindtextdomain@plt>
   117c4:	mov	r0, r6
   117c8:	bl	11158 <textdomain@plt>
   117cc:	movw	r0, #10500	; 0x2904
   117d0:	movt	r0, #1
   117d4:	bl	19f60 <__assert_fail@plt+0x8bbc>
   117d8:	movw	r0, #49544	; 0xc188
   117dc:	mov	r1, #0
   117e0:	str	r7, [sp, #28]
   117e4:	movt	r0, #2
   117e8:	str	r1, [sp, #32]
   117ec:	strb	r4, [r0]
   117f0:	movw	r0, #49545	; 0xc189
   117f4:	movt	r0, #2
   117f8:	strb	r4, [r0]
   117fc:	movw	r0, #49546	; 0xc18a
   11800:	movt	r0, #2
   11804:	strb	r4, [r0]
   11808:	mov	r0, #0
   1180c:	mov	r4, #0
   11810:	str	r0, [sp, #24]
   11814:	mov	r0, #0
   11818:	b	11870 <__assert_fail@plt+0x4cc>
   1181c:	add	r0, r6, #1
   11820:	add	r1, sp, #36	; 0x24
   11824:	str	r0, [sp, #36]	; 0x24
   11828:	ldr	r0, [sp, #32]
   1182c:	bl	190a0 <__assert_fail@plt+0x7cfc>
   11830:	mov	r1, r0
   11834:	mov	r0, #44	; 0x2c
   11838:	str	r1, [sp, #32]
   1183c:	add	r2, r9, #1
   11840:	strb	r0, [r1, r4]
   11844:	add	r0, r1, r5
   11848:	mov	r1, r8
   1184c:	bl	11128 <memcpy@plt>
   11850:	movw	r0, #49544	; 0xc188
   11854:	mov	r5, r7
   11858:	ldr	r7, [sp, #28]
   1185c:	mov	r1, #1
   11860:	mov	r4, r6
   11864:	movt	r0, #2
   11868:	strb	r1, [r0]
   1186c:	mov	r0, sl
   11870:	movw	r2, #41781	; 0xa335
   11874:	movw	r3, #43184	; 0xa8b0
   11878:	mov	sl, r0
   1187c:	mov	r0, #0
   11880:	mov	r1, r5
   11884:	movt	r2, #1
   11888:	movt	r3, #1
   1188c:	str	r0, [sp]
   11890:	mov	r0, r7
   11894:	bl	1120c <getopt_long@plt>
   11898:	add	r1, r0, #3
   1189c:	lsr	r0, r1, #1
   118a0:	cmp	r0, #130	; 0x82
   118a4:	bhi	12874 <__assert_fail@plt+0x14d0>
   118a8:	add	r2, pc, #4
   118ac:	mov	r0, #0
   118b0:	ldr	pc, [r2, r1, lsl #2]
   118b4:	andeq	r2, r1, r4, asr #15
   118b8:	andeq	r2, r1, r8, lsl r8
   118bc:	andeq	r1, r1, ip, ror sp
   118c0:	andeq	r2, r1, r4, ror r8
   118c4:	andeq	r2, r1, r4, ror r8
   118c8:	andeq	r2, r1, r4, ror r8
   118cc:	andeq	r2, r1, r4, ror r8
   118d0:	andeq	r2, r1, r4, ror r8
   118d4:	andeq	r2, r1, r4, ror r8
   118d8:	andeq	r2, r1, r4, ror r8
   118dc:	andeq	r2, r1, r4, ror r8
   118e0:	andeq	r2, r1, r4, ror r8
   118e4:	andeq	r2, r1, r4, ror r8
   118e8:	andeq	r2, r1, r4, ror r8
   118ec:	andeq	r2, r1, r4, ror r8
   118f0:	andeq	r2, r1, r4, ror r8
   118f4:	andeq	r2, r1, r4, ror r8
   118f8:	andeq	r2, r1, r4, ror r8
   118fc:	andeq	r2, r1, r4, ror r8
   11900:	andeq	r2, r1, r4, ror r8
   11904:	andeq	r2, r1, r4, ror r8
   11908:	andeq	r2, r1, r4, ror r8
   1190c:	andeq	r2, r1, r4, ror r8
   11910:	andeq	r2, r1, r4, ror r8
   11914:	andeq	r2, r1, r4, ror r8
   11918:	andeq	r2, r1, r4, ror r8
   1191c:	andeq	r2, r1, r4, ror r8
   11920:	andeq	r2, r1, r4, ror r8
   11924:	andeq	r2, r1, r4, ror r8
   11928:	andeq	r2, r1, r4, ror r8
   1192c:	andeq	r2, r1, r4, ror r8
   11930:	andeq	r2, r1, r4, ror r8
   11934:	andeq	r2, r1, r4, ror r8
   11938:	andeq	r2, r1, r4, ror r8
   1193c:	andeq	r2, r1, r4, ror r8
   11940:	andeq	r2, r1, r4, ror r8
   11944:	andeq	r2, r1, r4, ror r8
   11948:	andeq	r2, r1, r4, ror r8
   1194c:	andeq	r2, r1, r4, ror r8
   11950:	andeq	r2, r1, r4, ror r8
   11954:	andeq	r2, r1, r4, ror r8
   11958:	andeq	r2, r1, r4, ror r8
   1195c:	andeq	r2, r1, r4, ror r8
   11960:	andeq	r2, r1, r4, ror r8
   11964:	andeq	r2, r1, r4, ror r8
   11968:	andeq	r2, r1, r4, ror r8
   1196c:	andeq	r1, r1, ip, asr #25
   11970:	andeq	r1, r1, ip, asr #25
   11974:	andeq	r2, r1, r4, ror r8
   11978:	andeq	r2, r1, r4, ror r8
   1197c:	andeq	r2, r1, r4, ror r8
   11980:	andeq	r1, r1, ip, asr #25
   11984:	andeq	r1, r1, ip, asr #25
   11988:	andeq	r1, r1, ip, asr #25
   1198c:	andeq	r1, r1, ip, asr #25
   11990:	andeq	r1, r1, ip, asr #25
   11994:	andeq	r1, r1, ip, asr #25
   11998:	andeq	r1, r1, ip, asr #25
   1199c:	andeq	r1, r1, ip, asr #25
   119a0:	andeq	r2, r1, r4, ror r8
   119a4:	andeq	r2, r1, r4, ror r8
   119a8:	andeq	r2, r1, r4, ror r8
   119ac:	andeq	r2, r1, r4, ror r8
   119b0:	andeq	r2, r1, r4, ror r8
   119b4:	andeq	r1, r1, ip, asr #25
   119b8:	andeq	r2, r1, r4, ror r8
   119bc:	andeq	r2, r1, r4, ror r8
   119c0:	andeq	r2, r1, r4, ror r8
   119c4:	andeq	r2, r1, r4, ror r8
   119c8:	andeq	r2, r1, r4, ror r8
   119cc:	andeq	r2, r1, r4, ror r8
   119d0:	andeq	r2, r1, r4, ror r8
   119d4:	andeq	r2, r1, r4, ror r8
   119d8:	andeq	r2, r1, r4, ror r8
   119dc:	andeq	r2, r1, r4, ror r8
   119e0:	andeq	r2, r1, r4, ror r8
   119e4:	andeq	r2, r1, r4, ror r8
   119e8:	andeq	r2, r1, r4, ror r8
   119ec:	andeq	r2, r1, r4, ror r8
   119f0:	andeq	r2, r1, r4, ror r8
   119f4:	andeq	r2, r1, r4, ror r8
   119f8:	andeq	r2, r1, r4, ror r8
   119fc:	andeq	r2, r1, r4, ror r8
   11a00:	andeq	r2, r1, r4, ror r8
   11a04:	andeq	r2, r1, r4, ror r8
   11a08:	andeq	r1, r1, ip, lsr #26
   11a0c:	andeq	r2, r1, r4, ror r8
   11a10:	andeq	r2, r1, r4, ror r8
   11a14:	andeq	r2, r1, r4, ror r8
   11a18:	andeq	r2, r1, r4, ror r8
   11a1c:	andeq	r2, r1, r4, ror r8
   11a20:	andeq	r1, r1, ip, asr #25
   11a24:	andeq	r2, r1, r4, ror r8
   11a28:	andeq	r2, r1, r4, ror r8
   11a2c:	andeq	r2, r1, r4, ror r8
   11a30:	andeq	r2, r1, r4, ror r8
   11a34:	andeq	r2, r1, r4, ror r8
   11a38:	andeq	r2, r1, r4, ror r8
   11a3c:	andeq	r2, r1, r4, ror r8
   11a40:	andeq	r2, r1, r4, ror r8
   11a44:	andeq	r1, r1, ip, asr #25
   11a48:	andeq	r2, r1, r4, ror r8
   11a4c:	andeq	r1, r1, r4, asr #26
   11a50:	andeq	r2, r1, r4, ror r8
   11a54:	andeq	r2, r1, r4, ror r8
   11a58:	andeq	r1, r1, r0, lsr #26
   11a5c:	andeq	r1, r1, ip, asr #25
   11a60:	andeq	r2, r1, r4, ror r8
   11a64:	andeq	r2, r1, r4, ror r8
   11a68:	andeq	r2, r1, r4, ror r8
   11a6c:	andeq	r2, r1, r4, ror r8
   11a70:	andeq	r2, r1, r4, ror r8
   11a74:	andeq	r2, r1, r4, ror r8
   11a78:	andeq	r2, r1, r4, ror r8
   11a7c:	andeq	r1, r1, ip, asr #25
   11a80:	andeq	r2, r1, r4, ror r8
   11a84:	andeq	r2, r1, r4, ror r8
   11a88:	andeq	r1, r1, ip, asr #25
   11a8c:	andeq	r1, r1, ip, asr #25
   11a90:	andeq	r1, r1, ip, asr #25
   11a94:	andeq	r1, r1, ip, asr #25
   11a98:	andeq	r1, r1, r4, lsl sp
   11a9c:	andeq	r1, r1, ip, asr #25
   11aa0:	andeq	r1, r1, ip, asr #25
   11aa4:	andeq	r2, r1, r4, ror r8
   11aa8:	andeq	r2, r1, r4, ror r8
   11aac:	andeq	r2, r1, r4, ror r8
   11ab0:	andeq	r2, r1, r4, ror r8
   11ab4:	andeq	r2, r1, r4, ror r8
   11ab8:	andeq	r2, r1, r4, ror r8
   11abc:	andeq	r2, r1, r4, ror r8
   11ac0:	andeq	r2, r1, r4, ror r8
   11ac4:	andeq	r2, r1, r4, ror r8
   11ac8:	andeq	r2, r1, r4, ror r8
   11acc:	andeq	r2, r1, r4, ror r8
   11ad0:	andeq	r2, r1, r4, ror r8
   11ad4:	andeq	r2, r1, r4, ror r8
   11ad8:	andeq	r2, r1, r4, ror r8
   11adc:	andeq	r2, r1, r4, ror r8
   11ae0:	andeq	r2, r1, r4, ror r8
   11ae4:	andeq	r2, r1, r4, ror r8
   11ae8:	andeq	r2, r1, r4, ror r8
   11aec:	andeq	r2, r1, r4, ror r8
   11af0:	andeq	r2, r1, r4, ror r8
   11af4:	andeq	r2, r1, r4, ror r8
   11af8:	andeq	r2, r1, r4, ror r8
   11afc:	andeq	r2, r1, r4, ror r8
   11b00:	andeq	r2, r1, r4, ror r8
   11b04:	andeq	r2, r1, r4, ror r8
   11b08:	andeq	r2, r1, r4, ror r8
   11b0c:	andeq	r2, r1, r4, ror r8
   11b10:	andeq	r2, r1, r4, ror r8
   11b14:	andeq	r2, r1, r4, ror r8
   11b18:	andeq	r2, r1, r4, ror r8
   11b1c:	andeq	r2, r1, r4, ror r8
   11b20:	andeq	r2, r1, r4, ror r8
   11b24:	andeq	r2, r1, r4, ror r8
   11b28:	andeq	r2, r1, r4, ror r8
   11b2c:	andeq	r2, r1, r4, ror r8
   11b30:	andeq	r2, r1, r4, ror r8
   11b34:	andeq	r2, r1, r4, ror r8
   11b38:	andeq	r2, r1, r4, ror r8
   11b3c:	andeq	r2, r1, r4, ror r8
   11b40:	andeq	r2, r1, r4, ror r8
   11b44:	andeq	r2, r1, r4, ror r8
   11b48:	andeq	r2, r1, r4, ror r8
   11b4c:	andeq	r2, r1, r4, ror r8
   11b50:	andeq	r2, r1, r4, ror r8
   11b54:	andeq	r2, r1, r4, ror r8
   11b58:	andeq	r2, r1, r4, ror r8
   11b5c:	andeq	r2, r1, r4, ror r8
   11b60:	andeq	r2, r1, r4, ror r8
   11b64:	andeq	r2, r1, r4, ror r8
   11b68:	andeq	r2, r1, r4, ror r8
   11b6c:	andeq	r2, r1, r4, ror r8
   11b70:	andeq	r2, r1, r4, ror r8
   11b74:	andeq	r2, r1, r4, ror r8
   11b78:	andeq	r2, r1, r4, ror r8
   11b7c:	andeq	r2, r1, r4, ror r8
   11b80:	andeq	r2, r1, r4, ror r8
   11b84:	andeq	r2, r1, r4, ror r8
   11b88:	andeq	r2, r1, r4, ror r8
   11b8c:	andeq	r2, r1, r4, ror r8
   11b90:	andeq	r2, r1, r4, ror r8
   11b94:	andeq	r2, r1, r4, ror r8
   11b98:	andeq	r2, r1, r4, ror r8
   11b9c:	andeq	r2, r1, r4, ror r8
   11ba0:	andeq	r2, r1, r4, ror r8
   11ba4:	andeq	r2, r1, r4, ror r8
   11ba8:	andeq	r2, r1, r4, ror r8
   11bac:	andeq	r2, r1, r4, ror r8
   11bb0:	andeq	r2, r1, r4, ror r8
   11bb4:	andeq	r2, r1, r4, ror r8
   11bb8:	andeq	r2, r1, r4, ror r8
   11bbc:	andeq	r2, r1, r4, ror r8
   11bc0:	andeq	r2, r1, r4, ror r8
   11bc4:	andeq	r2, r1, r4, ror r8
   11bc8:	andeq	r2, r1, r4, ror r8
   11bcc:	andeq	r2, r1, r4, ror r8
   11bd0:	andeq	r2, r1, r4, ror r8
   11bd4:	andeq	r2, r1, r4, ror r8
   11bd8:	andeq	r2, r1, r4, ror r8
   11bdc:	andeq	r2, r1, r4, ror r8
   11be0:	andeq	r2, r1, r4, ror r8
   11be4:	andeq	r2, r1, r4, ror r8
   11be8:	andeq	r2, r1, r4, ror r8
   11bec:	andeq	r2, r1, r4, ror r8
   11bf0:	andeq	r2, r1, r4, ror r8
   11bf4:	andeq	r2, r1, r4, ror r8
   11bf8:	andeq	r2, r1, r4, ror r8
   11bfc:	andeq	r2, r1, r4, ror r8
   11c00:	andeq	r2, r1, r4, ror r8
   11c04:	andeq	r2, r1, r4, ror r8
   11c08:	andeq	r2, r1, r4, ror r8
   11c0c:	andeq	r2, r1, r4, ror r8
   11c10:	andeq	r2, r1, r4, ror r8
   11c14:	andeq	r2, r1, r4, ror r8
   11c18:	andeq	r2, r1, r4, ror r8
   11c1c:	andeq	r2, r1, r4, ror r8
   11c20:	andeq	r2, r1, r4, ror r8
   11c24:	andeq	r2, r1, r4, ror r8
   11c28:	andeq	r2, r1, r4, ror r8
   11c2c:	andeq	r2, r1, r4, ror r8
   11c30:	andeq	r2, r1, r4, ror r8
   11c34:	andeq	r2, r1, r4, ror r8
   11c38:	andeq	r2, r1, r4, ror r8
   11c3c:	andeq	r2, r1, r4, ror r8
   11c40:	andeq	r2, r1, r4, ror r8
   11c44:	andeq	r2, r1, r4, ror r8
   11c48:	andeq	r2, r1, r4, ror r8
   11c4c:	andeq	r2, r1, r4, ror r8
   11c50:	andeq	r2, r1, r4, ror r8
   11c54:	andeq	r2, r1, r4, ror r8
   11c58:	andeq	r2, r1, r4, ror r8
   11c5c:	andeq	r2, r1, r4, ror r8
   11c60:	andeq	r2, r1, r4, ror r8
   11c64:	andeq	r2, r1, r4, ror r8
   11c68:	andeq	r2, r1, r4, ror r8
   11c6c:	andeq	r2, r1, r4, ror r8
   11c70:	andeq	r2, r1, r4, ror r8
   11c74:	andeq	r2, r1, r4, ror r8
   11c78:	andeq	r2, r1, r4, ror r8
   11c7c:	andeq	r2, r1, r4, ror r8
   11c80:	andeq	r2, r1, r4, ror r8
   11c84:	andeq	r2, r1, r4, ror r8
   11c88:	andeq	r2, r1, r4, ror r8
   11c8c:	andeq	r2, r1, r4, ror r8
   11c90:	andeq	r2, r1, r4, ror r8
   11c94:	andeq	r2, r1, r4, ror r8
   11c98:	andeq	r2, r1, r4, ror r8
   11c9c:	andeq	r2, r1, r4, ror r8
   11ca0:	andeq	r2, r1, r4, ror r8
   11ca4:	andeq	r2, r1, r4, ror r8
   11ca8:	andeq	r2, r1, r4, ror r8
   11cac:	andeq	r2, r1, r4, ror r8
   11cb0:	andeq	r2, r1, r4, ror r8
   11cb4:	andeq	r2, r1, r4, ror r8
   11cb8:	andeq	r2, r1, r4, ror r8
   11cbc:	andeq	r2, r1, r4, ror r8
   11cc0:	andeq	r1, r1, r0, ror r8
   11cc4:	andeq	r1, r1, ip, asr sp
   11cc8:	andeq	r1, r1, r4, ror #26
   11ccc:	movw	r0, #49520	; 0xc170
   11cd0:	mov	r7, r5
   11cd4:	movt	r0, #2
   11cd8:	ldr	r0, [r0]
   11cdc:	add	r0, r5, r0, lsl #2
   11ce0:	ldr	r8, [r0, #-4]
   11ce4:	mov	r0, r8
   11ce8:	bl	1123c <strlen@plt>
   11cec:	cmp	r4, #0
   11cf0:	mov	r5, r4
   11cf4:	mov	r9, r0
   11cf8:	addne	r5, r5, #1
   11cfc:	add	r6, r0, r5
   11d00:	ldr	r0, [sp, #36]	; 0x24
   11d04:	cmp	r0, r6
   11d08:	bls	1181c <__assert_fail@plt+0x478>
   11d0c:	ldr	r1, [sp, #32]
   11d10:	b	11834 <__assert_fail@plt+0x490>
   11d14:	movw	r0, #49432	; 0xc118
   11d18:	mov	r1, #0
   11d1c:	b	11d4c <__assert_fail@plt+0x9a8>
   11d20:	movw	r0, #49545	; 0xc189
   11d24:	movt	r0, #2
   11d28:	b	11d34 <__assert_fail@plt+0x990>
   11d2c:	movw	r0, #49546	; 0xc18a
   11d30:	movt	r0, #2
   11d34:	mov	r1, #1
   11d38:	strb	r1, [r0]
   11d3c:	mov	r0, sl
   11d40:	b	11870 <__assert_fail@plt+0x4cc>
   11d44:	movw	r0, #49432	; 0xc118
   11d48:	mov	r1, #1
   11d4c:	movt	r0, #2
   11d50:	str	r1, [r0]
   11d54:	mov	r0, sl
   11d58:	b	11870 <__assert_fail@plt+0x4cc>
   11d5c:	mov	r0, #1
   11d60:	b	11870 <__assert_fail@plt+0x4cc>
   11d64:	movw	r0, #49536	; 0xc180
   11d68:	movt	r0, #2
   11d6c:	ldr	r0, [r0]
   11d70:	str	r0, [sp, #24]
   11d74:	mov	r0, sl
   11d78:	b	11870 <__assert_fail@plt+0x4cc>
   11d7c:	ldr	r4, [sp, #24]
   11d80:	cmp	r4, #0
   11d84:	beq	11da4 <__assert_fail@plt+0xa00>
   11d88:	ldr	r0, [sp, #32]
   11d8c:	mov	r6, #0
   11d90:	cmp	r0, #0
   11d94:	beq	11dcc <__assert_fail@plt+0xa28>
   11d98:	movw	r1, #41892	; 0xa3a4
   11d9c:	movt	r1, #1
   11da0:	b	12884 <__assert_fail@plt+0x14e0>
   11da4:	ldr	r6, [sp, #32]
   11da8:	cmp	r6, #0
   11dac:	bne	11dcc <__assert_fail@plt+0xa28>
   11db0:	movw	r0, #49520	; 0xc170
   11db4:	movt	r0, #2
   11db8:	mov	r2, r0
   11dbc:	ldr	r0, [r0]
   11dc0:	add	r1, r0, #1
   11dc4:	str	r1, [r2]
   11dc8:	ldr	r6, [r5, r0, lsl #2]
   11dcc:	movw	r0, #49520	; 0xc170
   11dd0:	movt	r0, #2
   11dd4:	ldr	r0, [r0]
   11dd8:	cmp	r0, r7
   11ddc:	bge	12824 <__assert_fail@plt+0x1480>
   11de0:	cmp	r4, #0
   11de4:	beq	11e44 <__assert_fail@plt+0xaa0>
   11de8:	mov	r0, r4
   11dec:	bl	16870 <__assert_fail@plt+0x54cc>
   11df0:	movw	r1, #49548	; 0xc18c
   11df4:	cmp	r0, #0
   11df8:	movt	r1, #2
   11dfc:	str	r0, [r1]
   11e00:	bne	11e74 <__assert_fail@plt+0xad0>
   11e04:	bl	11260 <__errno_location@plt>
   11e08:	movw	r1, #41977	; 0xa3f9
   11e0c:	ldr	r6, [r0]
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	movt	r1, #1
   11e1c:	bl	11140 <dcgettext@plt>
   11e20:	mov	r5, r0
   11e24:	mov	r0, #4
   11e28:	mov	r1, r4
   11e2c:	bl	181a0 <__assert_fail@plt+0x6dfc>
   11e30:	mov	r3, r0
   11e34:	mov	r0, #1
   11e38:	mov	r1, r6
   11e3c:	mov	r2, r5
   11e40:	bl	111c4 <error@plt>
   11e44:	mov	r0, r6
   11e48:	bl	16440 <__assert_fail@plt+0x509c>
   11e4c:	movw	r1, #49548	; 0xc18c
   11e50:	cmp	r0, #0
   11e54:	movt	r1, #2
   11e58:	str	r0, [r1]
   11e5c:	beq	128a8 <__assert_fail@plt+0x1504>
   11e60:	mov	r0, #0
   11e64:	bl	11344 <umask@plt>
   11e68:	movw	r1, #49552	; 0xc190
   11e6c:	movt	r1, #2
   11e70:	str	r0, [r1]
   11e74:	movw	r0, #49546	; 0xc18a
   11e78:	movw	r4, #49576	; 0xc1a8
   11e7c:	movt	r0, #2
   11e80:	movt	r4, #2
   11e84:	ldrb	r0, [r0]
   11e88:	and	r0, sl, r0
   11e8c:	tst	r0, #1
   11e90:	beq	11ef8 <__assert_fail@plt+0xb54>
   11e94:	movw	r0, #49560	; 0xc198
   11e98:	movt	r0, #2
   11e9c:	bl	18814 <__assert_fail@plt+0x7470>
   11ea0:	movw	sl, #49545	; 0xc189
   11ea4:	cmp	r0, #0
   11ea8:	str	r0, [r4]
   11eac:	movt	sl, #2
   11eb0:	bne	11f08 <__assert_fail@plt+0xb64>
   11eb4:	bl	11260 <__errno_location@plt>
   11eb8:	movw	r1, #41977	; 0xa3f9
   11ebc:	ldr	r4, [r0]
   11ec0:	mov	r0, #0
   11ec4:	mov	r2, #5
   11ec8:	movt	r1, #1
   11ecc:	bl	11140 <dcgettext@plt>
   11ed0:	movw	r1, #44639	; 0xae5f
   11ed4:	mov	r5, r0
   11ed8:	mov	r0, #4
   11edc:	movt	r1, #1
   11ee0:	bl	181a0 <__assert_fail@plt+0x6dfc>
   11ee4:	mov	r3, r0
   11ee8:	mov	r0, #1
   11eec:	mov	r1, r4
   11ef0:	mov	r2, r5
   11ef4:	bl	111c4 <error@plt>
   11ef8:	movw	sl, #49545	; 0xc189
   11efc:	mov	r0, #0
   11f00:	movt	sl, #2
   11f04:	str	r0, [r4]
   11f08:	movw	r0, #49520	; 0xc170
   11f0c:	movw	r1, #1041	; 0x411
   11f10:	mov	r2, #0
   11f14:	movt	r0, #2
   11f18:	ldr	r0, [r0]
   11f1c:	add	r0, r5, r0, lsl #2
   11f20:	bl	194ec <__assert_fail@plt+0x8148>
   11f24:	str	r0, [sp, #32]
   11f28:	bl	135f0 <__assert_fail@plt+0x224c>
   11f2c:	cmp	r0, #0
   11f30:	beq	1272c <__assert_fail@plt+0x1388>
   11f34:	mov	r8, r0
   11f38:	sub	r0, fp, #40	; 0x28
   11f3c:	mov	r4, #1
   11f40:	add	r0, r0, #1
   11f44:	str	r0, [sp, #20]
   11f48:	add	r0, sp, #40	; 0x28
   11f4c:	add	r0, r0, #1
   11f50:	str	r0, [sp, #24]
   11f54:	b	11f7c <__assert_fail@plt+0xbd8>
   11f58:	cmp	r6, #1
   11f5c:	mov	r6, #0
   11f60:	movwhi	r6, #1
   11f64:	ldr	r0, [sp, #32]
   11f68:	and	r4, r4, r6
   11f6c:	bl	135f0 <__assert_fail@plt+0x224c>
   11f70:	mov	r8, r0
   11f74:	cmp	r0, #0
   11f78:	beq	12730 <__assert_fail@plt+0x138c>
   11f7c:	ldrh	r0, [r8, #56]	; 0x38
   11f80:	ldr	r9, [r8, #24]
   11f84:	ldr	r7, [r8, #28]
   11f88:	sub	r0, r0, #2
   11f8c:	cmp	r0, #11
   11f90:	bhi	12028 <__assert_fail@plt+0xc84>
   11f94:	add	r1, pc, #4
   11f98:	mov	r6, #1
   11f9c:	ldr	pc, [r1, r0, lsl #2]
   11fa0:	ldrdeq	r1, [r1], -r0
   11fa4:	andeq	r2, r1, r8, lsr #32
   11fa8:	andeq	r2, r1, r0, lsl r1
   11fac:	andeq	r2, r1, r8, lsr #32
   11fb0:	andeq	r1, r1, r4, ror #30
   11fb4:	muleq	r1, ip, r1
   11fb8:	andeq	r2, r1, r8, lsr #32
   11fbc:	andeq	r2, r1, r8, lsr #32
   11fc0:	andeq	r2, r1, r8, ror #3
   11fc4:	andeq	r2, r1, r8, lsr #32
   11fc8:	andeq	r2, r1, r8, lsr #32
   11fcc:	andeq	r2, r1, r4, asr #2
   11fd0:	ldr	r0, [sp, #32]
   11fd4:	mov	r1, r8
   11fd8:	bl	19538 <__assert_fail@plt+0x8194>
   11fdc:	cmp	r0, #0
   11fe0:	beq	12028 <__assert_fail@plt+0xc84>
   11fe4:	movw	r1, #42528	; 0xa620
   11fe8:	mov	r0, #0
   11fec:	mov	r2, #5
   11ff0:	mov	r6, #0
   11ff4:	movt	r1, #1
   11ff8:	bl	11140 <dcgettext@plt>
   11ffc:	mov	r5, r0
   12000:	mov	r0, #0
   12004:	mov	r1, #3
   12008:	mov	r2, r7
   1200c:	bl	1841c <__assert_fail@plt+0x7078>
   12010:	mov	r3, r0
   12014:	mov	r0, #0
   12018:	mov	r1, #0
   1201c:	mov	r2, r5
   12020:	bl	111c4 <error@plt>
   12024:	b	11f64 <__assert_fail@plt+0xbc0>
   12028:	movw	r0, #49576	; 0xc1a8
   1202c:	str	r7, [sp, #28]
   12030:	movt	r0, #2
   12034:	ldr	r0, [r0]
   12038:	cmp	r0, #0
   1203c:	beq	120f4 <__assert_fail@plt+0xd50>
   12040:	add	r1, r8, #160	; 0xa0
   12044:	ldrd	r2, [r0]
   12048:	ldrd	r6, [r1]
   1204c:	eor	r1, r7, r3
   12050:	eor	r2, r6, r2
   12054:	orrs	r1, r2, r1
   12058:	bne	120f4 <__assert_fail@plt+0xd50>
   1205c:	add	r1, r8, #64	; 0x40
   12060:	ldr	r3, [r0, #12]
   12064:	ldr	r0, [r0, #8]
   12068:	ldr	r2, [r1]
   1206c:	ldr	r1, [r1, #4]
   12070:	eor	r1, r1, r3
   12074:	eor	r0, r2, r0
   12078:	orrs	r0, r0, r1
   1207c:	bne	120f4 <__assert_fail@plt+0xd50>
   12080:	ldr	r7, [sp, #28]
   12084:	movw	r6, #44639	; 0xae5f
   12088:	movt	r6, #1
   1208c:	mov	r1, r6
   12090:	mov	r0, r7
   12094:	bl	110ec <strcmp@plt>
   12098:	cmp	r0, #0
   1209c:	beq	126ac <__assert_fail@plt+0x1308>
   120a0:	movw	r1, #42759	; 0xa707
   120a4:	mov	r0, #0
   120a8:	mov	r2, #5
   120ac:	movt	r1, #1
   120b0:	bl	11140 <dcgettext@plt>
   120b4:	mov	r5, r0
   120b8:	mov	r0, #0
   120bc:	mov	r1, #4
   120c0:	mov	r2, r7
   120c4:	bl	180f8 <__assert_fail@plt+0x6d54>
   120c8:	mov	r7, r0
   120cc:	mov	r0, #1
   120d0:	mov	r1, #4
   120d4:	mov	r2, r6
   120d8:	bl	180f8 <__assert_fail@plt+0x6d54>
   120dc:	str	r0, [sp]
   120e0:	mov	r0, #0
   120e4:	mov	r1, #0
   120e8:	mov	r2, r5
   120ec:	mov	r3, r7
   120f0:	b	126e0 <__assert_fail@plt+0x133c>
   120f4:	ldr	r7, [r8, #80]	; 0x50
   120f8:	and	r0, r7, #61440	; 0xf000
   120fc:	cmp	r0, #40960	; 0xa000
   12100:	bne	1230c <__assert_fail@plt+0xf68>
   12104:	mov	r7, #0
   12108:	mov	r6, #2
   1210c:	b	12260 <__assert_fail@plt+0xebc>
   12110:	ldrb	r0, [sl]
   12114:	str	r7, [sp, #28]
   12118:	mov	r6, #0
   1211c:	mov	r7, #0
   12120:	mov	r5, #0
   12124:	cmp	r0, #0
   12128:	bne	12264 <__assert_fail@plt+0xec0>
   1212c:	ldr	r5, [r8, #32]
   12130:	movw	r1, #42465	; 0xa5e1
   12134:	mov	r6, #0
   12138:	mov	r0, #0
   1213c:	movt	r1, #1
   12140:	b	12230 <__assert_fail@plt+0xe8c>
   12144:	ldrb	r0, [sl]
   12148:	str	r7, [sp, #28]
   1214c:	mov	r6, #0
   12150:	mov	r7, #0
   12154:	mov	r5, #0
   12158:	cmp	r0, #0
   1215c:	bne	12264 <__assert_fail@plt+0xec0>
   12160:	movw	r1, #42490	; 0xa5fa
   12164:	mov	r0, #0
   12168:	mov	r2, #5
   1216c:	mov	r6, #0
   12170:	movt	r1, #1
   12174:	bl	11140 <dcgettext@plt>
   12178:	ldr	r1, [sp, #28]
   1217c:	mov	r5, r0
   12180:	mov	r0, #4
   12184:	bl	181a0 <__assert_fail@plt+0x6dfc>
   12188:	mov	r3, r0
   1218c:	mov	r0, #0
   12190:	mov	r1, #0
   12194:	mov	r2, r5
   12198:	b	12258 <__assert_fail@plt+0xeb4>
   1219c:	ldrb	r0, [sl]
   121a0:	str	r7, [sp, #28]
   121a4:	mov	r6, #0
   121a8:	mov	r7, #0
   121ac:	mov	r5, #0
   121b0:	cmp	r0, #0
   121b4:	bne	12264 <__assert_fail@plt+0xec0>
   121b8:	ldr	r2, [sp, #28]
   121bc:	ldr	r5, [r8, #32]
   121c0:	mov	r0, #0
   121c4:	mov	r1, #3
   121c8:	mov	r6, #0
   121cc:	bl	1841c <__assert_fail@plt+0x7078>
   121d0:	movw	r2, #42022	; 0xa426
   121d4:	mov	r3, r0
   121d8:	mov	r0, #0
   121dc:	mov	r1, r5
   121e0:	movt	r2, #1
   121e4:	b	12258 <__assert_fail@plt+0xeb4>
   121e8:	ldr	r0, [r8, #48]	; 0x30
   121ec:	cmp	r0, #0
   121f0:	bne	12200 <__assert_fail@plt+0xe5c>
   121f4:	ldr	r0, [r8, #16]
   121f8:	cmp	r0, #0
   121fc:	beq	12690 <__assert_fail@plt+0x12ec>
   12200:	ldrb	r0, [sl]
   12204:	str	r7, [sp, #28]
   12208:	mov	r6, #0
   1220c:	mov	r7, #0
   12210:	mov	r5, #0
   12214:	cmp	r0, #0
   12218:	bne	12264 <__assert_fail@plt+0xec0>
   1221c:	ldr	r5, [r8, #32]
   12220:	movw	r1, #42448	; 0xa5d0
   12224:	mov	r6, #0
   12228:	mov	r0, #0
   1222c:	movt	r1, #1
   12230:	mov	r2, #5
   12234:	bl	11140 <dcgettext@plt>
   12238:	ldr	r1, [sp, #28]
   1223c:	mov	r7, r0
   12240:	mov	r0, #4
   12244:	bl	181a0 <__assert_fail@plt+0x6dfc>
   12248:	mov	r3, r0
   1224c:	mov	r0, #0
   12250:	mov	r1, r5
   12254:	mov	r2, r7
   12258:	bl	111c4 <error@plt>
   1225c:	mov	r7, #0
   12260:	mov	r5, #0
   12264:	movw	r0, #49432	; 0xc118
   12268:	movt	r0, #2
   1226c:	ldr	r0, [r0]
   12270:	cmp	r0, #2
   12274:	beq	12444 <__assert_fail@plt+0x10a0>
   12278:	cmp	r6, #4
   1227c:	bne	12428 <__assert_fail@plt+0x1084>
   12280:	tst	r5, #3584	; 0xe00
   12284:	mov	r0, r5
   12288:	beq	123c8 <__assert_fail@plt+0x1024>
   1228c:	ldr	r0, [sp, #32]
   12290:	mov	r2, r9
   12294:	add	r3, sp, #40	; 0x28
   12298:	ldr	r1, [r0, #32]
   1229c:	mov	r0, #0
   122a0:	str	r0, [sp]
   122a4:	mov	r0, #3
   122a8:	bl	11164 <__fxstatat64@plt>
   122ac:	cmp	r0, #0
   122b0:	beq	123c4 <__assert_fail@plt+0x1020>
   122b4:	ldrb	r0, [sl]
   122b8:	cmp	r0, #0
   122bc:	bne	12424 <__assert_fail@plt+0x1080>
   122c0:	bl	11260 <__errno_location@plt>
   122c4:	movw	r1, #42928	; 0xa7b0
   122c8:	ldr	r9, [r0]
   122cc:	mov	r0, #0
   122d0:	mov	r2, #5
   122d4:	movt	r1, #1
   122d8:	bl	11140 <dcgettext@plt>
   122dc:	ldr	r1, [sp, #28]
   122e0:	mov	sl, r0
   122e4:	mov	r0, #4
   122e8:	bl	181a0 <__assert_fail@plt+0x6dfc>
   122ec:	mov	r3, r0
   122f0:	mov	r2, sl
   122f4:	movw	sl, #49545	; 0xc189
   122f8:	mov	r0, #0
   122fc:	mov	r1, r9
   12300:	movt	sl, #2
   12304:	bl	111c4 <error@plt>
   12308:	b	12424 <__assert_fail@plt+0x1080>
   1230c:	movw	r1, #49548	; 0xc18c
   12310:	sub	r0, r0, #16384	; 0x4000
   12314:	movt	r1, #2
   12318:	clz	r0, r0
   1231c:	ldr	r3, [r1]
   12320:	movw	r1, #49552	; 0xc190
   12324:	movt	r1, #2
   12328:	ldr	r2, [r1]
   1232c:	mov	r1, #0
   12330:	str	r1, [sp]
   12334:	lsr	r1, r0, #5
   12338:	mov	r0, r7
   1233c:	bl	168d4 <__assert_fail@plt+0x5530>
   12340:	mov	r5, r0
   12344:	ldr	r0, [sp, #32]
   12348:	mov	r1, r9
   1234c:	mov	r3, #0
   12350:	mov	r2, r5
   12354:	ldr	r0, [r0, #32]
   12358:	bl	129ec <__assert_fail@plt+0x1648>
   1235c:	cmp	r0, #0
   12360:	beq	12614 <__assert_fail@plt+0x1270>
   12364:	ldrb	r0, [sl]
   12368:	mov	r6, #1
   1236c:	cmp	r0, #0
   12370:	bne	12264 <__assert_fail@plt+0xec0>
   12374:	bl	11260 <__errno_location@plt>
   12378:	ldr	r0, [r0]
   1237c:	movw	r1, #42866	; 0xa772
   12380:	mov	r2, #5
   12384:	movt	r1, #1
   12388:	str	r0, [sp, #16]
   1238c:	mov	r0, #0
   12390:	bl	11140 <dcgettext@plt>
   12394:	ldr	r1, [sp, #28]
   12398:	mov	sl, r0
   1239c:	mov	r0, #4
   123a0:	bl	181a0 <__assert_fail@plt+0x6dfc>
   123a4:	ldr	r1, [sp, #16]
   123a8:	mov	r3, r0
   123ac:	mov	r2, sl
   123b0:	movw	sl, #49545	; 0xc189
   123b4:	mov	r0, #0
   123b8:	movt	sl, #2
   123bc:	bl	111c4 <error@plt>
   123c0:	b	12264 <__assert_fail@plt+0xec0>
   123c4:	ldr	r0, [sp, #56]	; 0x38
   123c8:	eor	r0, r0, r7
   123cc:	movw	r1, #4095	; 0xfff
   123d0:	tst	r0, r1
   123d4:	beq	12424 <__assert_fail@plt+0x1080>
   123d8:	ldr	r1, [sp, #28]
   123dc:	mov	r0, #4
   123e0:	mov	r6, #4
   123e4:	bl	181a0 <__assert_fail@plt+0x6dfc>
   123e8:	mov	r9, r0
   123ec:	mov	r0, r5
   123f0:	add	r1, sp, #40	; 0x28
   123f4:	bl	12b24 <__assert_fail@plt+0x1780>
   123f8:	mov	sl, #0
   123fc:	mov	r0, r7
   12400:	sub	r1, fp, #40	; 0x28
   12404:	strb	sl, [sp, #50]	; 0x32
   12408:	bl	12b24 <__assert_fail@plt+0x1780>
   1240c:	movw	r1, #43039	; 0xa81f
   12410:	strb	sl, [fp, #-30]	; 0xffffffe2
   12414:	mov	sl, r5
   12418:	bfc	sl, #12, #20
   1241c:	movt	r1, #1
   12420:	b	12624 <__assert_fail@plt+0x1280>
   12424:	mov	r6, #3
   12428:	cmp	r6, #4
   1242c:	beq	12518 <__assert_fail@plt+0x1174>
   12430:	movw	r0, #49432	; 0xc118
   12434:	movt	r0, #2
   12438:	ldr	r0, [r0]
   1243c:	cmp	r0, #0
   12440:	beq	12518 <__assert_fail@plt+0x1174>
   12444:	cmp	r6, #3
   12448:	bcc	12668 <__assert_fail@plt+0x12c4>
   1244c:	movw	r0, #49544	; 0xc188
   12450:	movt	r0, #2
   12454:	ldrb	r0, [r0]
   12458:	cmp	r0, #1
   1245c:	bne	12668 <__assert_fail@plt+0x12c4>
   12460:	movw	r0, #49548	; 0xc18c
   12464:	mov	r2, #0
   12468:	movt	r0, #2
   1246c:	ldr	r3, [r0]
   12470:	mov	r0, #0
   12474:	str	r0, [sp]
   12478:	and	r0, r7, #61440	; 0xf000
   1247c:	sub	r0, r0, #16384	; 0x4000
   12480:	clz	r0, r0
   12484:	lsr	r1, r0, #5
   12488:	mov	r0, r7
   1248c:	bl	168d4 <__assert_fail@plt+0x5530>
   12490:	mov	r7, r0
   12494:	mvn	r0, r0
   12498:	tst	r5, r0
   1249c:	beq	12668 <__assert_fail@plt+0x12c4>
   124a0:	mov	r0, r5
   124a4:	add	r1, sp, #40	; 0x28
   124a8:	bl	12b24 <__assert_fail@plt+0x1780>
   124ac:	mov	r0, r7
   124b0:	sub	r1, fp, #40	; 0x28
   124b4:	bl	12b24 <__assert_fail@plt+0x1780>
   124b8:	movw	r1, #42893	; 0xa78d
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	movt	r1, #1
   124c8:	strb	r0, [sp, #50]	; 0x32
   124cc:	strb	r0, [fp, #-30]	; 0xffffffe2
   124d0:	mov	r0, #0
   124d4:	bl	11140 <dcgettext@plt>
   124d8:	ldr	r2, [sp, #28]
   124dc:	mov	r5, r0
   124e0:	mov	r0, #0
   124e4:	mov	r1, #3
   124e8:	bl	1841c <__assert_fail@plt+0x7078>
   124ec:	mov	r3, r0
   124f0:	ldr	r0, [sp, #24]
   124f4:	mov	r1, #0
   124f8:	mov	r2, r5
   124fc:	str	r0, [sp]
   12500:	ldr	r0, [sp, #20]
   12504:	str	r0, [sp, #4]
   12508:	mov	r0, #0
   1250c:	bl	111c4 <error@plt>
   12510:	mov	r6, #1
   12514:	b	12668 <__assert_fail@plt+0x12c4>
   12518:	ldr	r1, [sp, #28]
   1251c:	mov	r0, #4
   12520:	bl	181a0 <__assert_fail@plt+0x6dfc>
   12524:	mov	r9, r0
   12528:	cmp	r6, #0
   1252c:	beq	1256c <__assert_fail@plt+0x11c8>
   12530:	cmp	r6, #2
   12534:	bne	125a0 <__assert_fail@plt+0x11fc>
   12538:	movw	r1, #42957	; 0xa7cd
   1253c:	mov	r0, #0
   12540:	mov	r2, #5
   12544:	movt	r1, #1
   12548:	bl	11140 <dcgettext@plt>
   1254c:	mov	r1, r0
   12550:	mov	r0, #1
   12554:	mov	r2, r9
   12558:	bl	11290 <__printf_chk@plt>
   1255c:	mov	r6, #2
   12560:	cmp	r6, #3
   12564:	bcs	1244c <__assert_fail@plt+0x10a8>
   12568:	b	12668 <__assert_fail@plt+0x12c4>
   1256c:	movw	r1, #43013	; 0xa805
   12570:	mov	r0, #0
   12574:	mov	r2, #5
   12578:	mov	r6, #0
   1257c:	movt	r1, #1
   12580:	bl	11140 <dcgettext@plt>
   12584:	mov	r1, r0
   12588:	mov	r0, #1
   1258c:	mov	r2, r9
   12590:	bl	11290 <__printf_chk@plt>
   12594:	cmp	r6, #3
   12598:	bcs	1244c <__assert_fail@plt+0x10a8>
   1259c:	b	12668 <__assert_fail@plt+0x12c4>
   125a0:	mov	r0, r5
   125a4:	add	r1, sp, #40	; 0x28
   125a8:	bl	12b24 <__assert_fail@plt+0x1780>
   125ac:	mov	sl, #0
   125b0:	mov	r0, r7
   125b4:	sub	r1, fp, #40	; 0x28
   125b8:	strb	sl, [sp, #50]	; 0x32
   125bc:	bl	12b24 <__assert_fail@plt+0x1780>
   125c0:	strb	sl, [fp, #-30]	; 0xffffffe2
   125c4:	mov	sl, r5
   125c8:	cmp	r6, #1
   125cc:	bfc	sl, #12, #20
   125d0:	beq	1261c <__assert_fail@plt+0x1278>
   125d4:	cmp	r6, #3
   125d8:	bne	12820 <__assert_fail@plt+0x147c>
   125dc:	movw	r1, #43148	; 0xa88c
   125e0:	mov	r0, #0
   125e4:	mov	r2, #5
   125e8:	movt	r1, #1
   125ec:	bl	11140 <dcgettext@plt>
   125f0:	mov	r1, r0
   125f4:	ldr	r0, [sp, #24]
   125f8:	mov	r2, r9
   125fc:	mov	r3, sl
   12600:	str	r0, [sp]
   12604:	mov	r0, #1
   12608:	bl	11290 <__printf_chk@plt>
   1260c:	mov	r6, #3
   12610:	b	12658 <__assert_fail@plt+0x12b4>
   12614:	mov	r6, #4
   12618:	b	12264 <__assert_fail@plt+0xec0>
   1261c:	movw	r1, #43089	; 0xa851
   12620:	movt	r1, #1
   12624:	mov	r0, #0
   12628:	mov	r2, #5
   1262c:	bl	11140 <dcgettext@plt>
   12630:	mov	r1, r0
   12634:	ldr	r0, [sp, #20]
   12638:	mov	r3, r7
   1263c:	mov	r2, r9
   12640:	bfc	r3, #12, #20
   12644:	stm	sp, {r0, sl}
   12648:	ldr	r0, [sp, #24]
   1264c:	str	r0, [sp, #8]
   12650:	mov	r0, #1
   12654:	bl	11290 <__printf_chk@plt>
   12658:	movw	sl, #49545	; 0xc189
   1265c:	movt	sl, #2
   12660:	cmp	r6, #3
   12664:	bcs	1244c <__assert_fail@plt+0x10a8>
   12668:	movw	r0, #49546	; 0xc18a
   1266c:	movt	r0, #2
   12670:	ldrb	r0, [r0]
   12674:	cmp	r0, #0
   12678:	bne	11f58 <__assert_fail@plt+0xbb4>
   1267c:	ldr	r0, [sp, #32]
   12680:	mov	r1, r8
   12684:	mov	r2, #4
   12688:	bl	14c74 <__assert_fail@plt+0x38d0>
   1268c:	b	11f58 <__assert_fail@plt+0xbb4>
   12690:	ldr	r0, [sp, #32]
   12694:	mov	r6, #1
   12698:	mov	r1, r8
   1269c:	mov	r2, #1
   126a0:	str	r6, [r8, #16]
   126a4:	bl	14c74 <__assert_fail@plt+0x38d0>
   126a8:	b	11f64 <__assert_fail@plt+0xbc0>
   126ac:	movw	r1, #42714	; 0xa6da
   126b0:	mov	r0, #0
   126b4:	mov	r2, #5
   126b8:	movt	r1, #1
   126bc:	bl	11140 <dcgettext@plt>
   126c0:	mov	r5, r0
   126c4:	mov	r0, #4
   126c8:	mov	r1, r7
   126cc:	bl	181a0 <__assert_fail@plt+0x6dfc>
   126d0:	mov	r3, r0
   126d4:	mov	r0, #0
   126d8:	mov	r1, #0
   126dc:	mov	r2, r5
   126e0:	bl	111c4 <error@plt>
   126e4:	movw	r1, #42817	; 0xa741
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	mov	r6, #0
   126f4:	movt	r1, #1
   126f8:	bl	11140 <dcgettext@plt>
   126fc:	mov	r2, r0
   12700:	mov	r0, #0
   12704:	mov	r1, #0
   12708:	bl	111c4 <error@plt>
   1270c:	ldr	r5, [sp, #32]
   12710:	mov	r1, r8
   12714:	mov	r2, #4
   12718:	mov	r0, r5
   1271c:	bl	14c74 <__assert_fail@plt+0x38d0>
   12720:	mov	r0, r5
   12724:	bl	135f0 <__assert_fail@plt+0x224c>
   12728:	b	11f64 <__assert_fail@plt+0xbc0>
   1272c:	mov	r4, #1
   12730:	bl	11260 <__errno_location@plt>
   12734:	ldr	r6, [r0]
   12738:	mov	r5, r0
   1273c:	cmp	r6, #0
   12740:	beq	1277c <__assert_fail@plt+0x13d8>
   12744:	ldrb	r0, [sl]
   12748:	mov	r4, #0
   1274c:	cmp	r0, #0
   12750:	bne	1277c <__assert_fail@plt+0x13d8>
   12754:	movw	r1, #42415	; 0xa5af
   12758:	mov	r0, #0
   1275c:	mov	r2, #5
   12760:	mov	r4, #0
   12764:	movt	r1, #1
   12768:	bl	11140 <dcgettext@plt>
   1276c:	mov	r2, r0
   12770:	mov	r0, #0
   12774:	mov	r1, r6
   12778:	bl	111c4 <error@plt>
   1277c:	ldr	r0, [sp, #32]
   12780:	bl	13448 <__assert_fail@plt+0x20a4>
   12784:	cmp	r0, #0
   12788:	beq	127b8 <__assert_fail@plt+0x1414>
   1278c:	movw	r1, #42431	; 0xa5bf
   12790:	ldr	r5, [r5]
   12794:	mov	r0, #0
   12798:	mov	r2, #5
   1279c:	mov	r4, #0
   127a0:	movt	r1, #1
   127a4:	bl	11140 <dcgettext@plt>
   127a8:	mov	r2, r0
   127ac:	mov	r0, #0
   127b0:	mov	r1, r5
   127b4:	bl	111c4 <error@plt>
   127b8:	eor	r0, r4, #1
   127bc:	sub	sp, fp, #28
   127c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c4:	movw	r0, #49436	; 0xc11c
   127c8:	movw	r2, #41879	; 0xa397
   127cc:	mov	r1, #0
   127d0:	movw	r7, #41863	; 0xa387
   127d4:	movt	r0, #2
   127d8:	movt	r2, #1
   127dc:	str	r1, [sp, #8]
   127e0:	movw	r1, #41751	; 0xa317
   127e4:	movt	r7, #1
   127e8:	movt	r1, #1
   127ec:	ldr	r3, [r0]
   127f0:	movw	r0, #49532	; 0xc17c
   127f4:	str	r2, [sp, #4]
   127f8:	movw	r2, #41849	; 0xa379
   127fc:	str	r7, [sp]
   12800:	movt	r0, #2
   12804:	movt	r2, #1
   12808:	ldr	r0, [r0]
   1280c:	bl	18d38 <__assert_fail@plt+0x7994>
   12810:	mov	r0, #0
   12814:	bl	11224 <exit@plt>
   12818:	mov	r0, #0
   1281c:	bl	114a0 <__assert_fail@plt+0xfc>
   12820:	bl	11374 <abort@plt>
   12824:	cmp	r6, #0
   12828:	beq	1287c <__assert_fail@plt+0x14d8>
   1282c:	add	r0, r5, r0, lsl #2
   12830:	ldr	r0, [r0, #-4]
   12834:	cmp	r6, r0
   12838:	bne	1287c <__assert_fail@plt+0x14d8>
   1283c:	movw	r1, #41952	; 0xa3e0
   12840:	mov	r0, #0
   12844:	mov	r2, #5
   12848:	movt	r1, #1
   1284c:	bl	11140 <dcgettext@plt>
   12850:	mov	r6, r0
   12854:	add	r0, r5, r7, lsl #2
   12858:	ldr	r0, [r0, #-4]
   1285c:	bl	186c8 <__assert_fail@plt+0x7324>
   12860:	mov	r3, r0
   12864:	mov	r0, #0
   12868:	mov	r1, #0
   1286c:	mov	r2, r6
   12870:	bl	111c4 <error@plt>
   12874:	mov	r0, #1
   12878:	bl	114a0 <__assert_fail@plt+0xfc>
   1287c:	movw	r1, #41936	; 0xa3d0
   12880:	movt	r1, #1
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	bl	11140 <dcgettext@plt>
   12890:	mov	r2, r0
   12894:	mov	r0, #0
   12898:	mov	r1, #0
   1289c:	bl	111c4 <error@plt>
   128a0:	mov	r0, #1
   128a4:	bl	114a0 <__assert_fail@plt+0xfc>
   128a8:	movw	r1, #42008	; 0xa418
   128ac:	mov	r0, #0
   128b0:	mov	r2, #5
   128b4:	movt	r1, #1
   128b8:	bl	11140 <dcgettext@plt>
   128bc:	mov	r4, r0
   128c0:	mov	r0, r6
   128c4:	bl	186c8 <__assert_fail@plt+0x7324>
   128c8:	mov	r3, r0
   128cc:	mov	r0, #0
   128d0:	mov	r1, #0
   128d4:	mov	r2, r4
   128d8:	bl	111c4 <error@plt>
   128dc:	mov	r0, #1
   128e0:	bl	114a0 <__assert_fail@plt+0xfc>
   128e4:	movw	r1, #49580	; 0xc1ac
   128e8:	movt	r1, #2
   128ec:	str	r0, [r1]
   128f0:	bx	lr
   128f4:	movw	r1, #49584	; 0xc1b0
   128f8:	movt	r1, #2
   128fc:	strb	r0, [r1]
   12900:	bx	lr
   12904:	push	{r4, r5, r6, sl, fp, lr}
   12908:	add	fp, sp, #16
   1290c:	sub	sp, sp, #8
   12910:	movw	r0, #49532	; 0xc17c
   12914:	movt	r0, #2
   12918:	ldr	r0, [r0]
   1291c:	bl	19640 <__assert_fail@plt+0x829c>
   12920:	cmp	r0, #0
   12924:	beq	1294c <__assert_fail@plt+0x15a8>
   12928:	movw	r0, #49584	; 0xc1b0
   1292c:	movt	r0, #2
   12930:	ldrb	r0, [r0]
   12934:	cmp	r0, #0
   12938:	beq	1296c <__assert_fail@plt+0x15c8>
   1293c:	bl	11260 <__errno_location@plt>
   12940:	ldr	r0, [r0]
   12944:	cmp	r0, #32
   12948:	bne	1296c <__assert_fail@plt+0x15c8>
   1294c:	movw	r0, #49528	; 0xc178
   12950:	movt	r0, #2
   12954:	ldr	r0, [r0]
   12958:	bl	19640 <__assert_fail@plt+0x829c>
   1295c:	cmp	r0, #0
   12960:	subeq	sp, fp, #16
   12964:	popeq	{r4, r5, r6, sl, fp, pc}
   12968:	b	129dc <__assert_fail@plt+0x1638>
   1296c:	movw	r1, #43431	; 0xa9a7
   12970:	mov	r0, #0
   12974:	mov	r2, #5
   12978:	movt	r1, #1
   1297c:	bl	11140 <dcgettext@plt>
   12980:	mov	r4, r0
   12984:	movw	r0, #49580	; 0xc1ac
   12988:	movt	r0, #2
   1298c:	ldr	r6, [r0]
   12990:	bl	11260 <__errno_location@plt>
   12994:	ldr	r5, [r0]
   12998:	cmp	r6, #0
   1299c:	bne	129b8 <__assert_fail@plt+0x1614>
   129a0:	movw	r2, #42022	; 0xa426
   129a4:	mov	r0, #0
   129a8:	mov	r1, r5
   129ac:	mov	r3, r4
   129b0:	movt	r2, #1
   129b4:	b	129d8 <__assert_fail@plt+0x1634>
   129b8:	mov	r0, r6
   129bc:	bl	18340 <__assert_fail@plt+0x6f9c>
   129c0:	movw	r2, #43443	; 0xa9b3
   129c4:	mov	r3, r0
   129c8:	str	r4, [sp]
   129cc:	mov	r0, #0
   129d0:	mov	r1, r5
   129d4:	movt	r2, #1
   129d8:	bl	111c4 <error@plt>
   129dc:	movw	r0, #49440	; 0xc120
   129e0:	movt	r0, #2
   129e4:	ldr	r0, [r0]
   129e8:	bl	1111c <_exit@plt>
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f0:	add	fp, sp, #28
   129f4:	sub	sp, sp, #140	; 0x8c
   129f8:	mov	r8, r2
   129fc:	mov	r5, r1
   12a00:	mov	r6, r0
   12a04:	cmp	r3, #256	; 0x100
   12a08:	bne	12afc <__assert_fail@plt+0x1758>
   12a0c:	mov	r0, r6
   12a10:	mov	r1, r5
   12a14:	mov	r2, #2654208	; 0x288000
   12a18:	bl	11248 <openat64@plt>
   12a1c:	mov	r4, r0
   12a20:	cmp	r0, #0
   12a24:	bmi	12a70 <__assert_fail@plt+0x16cc>
   12a28:	movw	r2, #41114	; 0xa09a
   12a2c:	mov	r0, #4096	; 0x1000
   12a30:	add	r3, sp, #32
   12a34:	mov	r1, r4
   12a38:	movt	r2, #1
   12a3c:	str	r0, [sp]
   12a40:	mov	r0, #3
   12a44:	bl	11164 <__fxstatat64@plt>
   12a48:	cmp	r0, #0
   12a4c:	beq	12a78 <__assert_fail@plt+0x16d4>
   12a50:	bl	11260 <__errno_location@plt>
   12a54:	ldr	r6, [r0]
   12a58:	mov	r5, r0
   12a5c:	mov	r0, r4
   12a60:	bl	11380 <close@plt>
   12a64:	str	r6, [r5]
   12a68:	mvn	r7, #0
   12a6c:	b	12b10 <__assert_fail@plt+0x176c>
   12a70:	mov	r7, r4
   12a74:	b	12b10 <__assert_fail@plt+0x176c>
   12a78:	ldr	r0, [sp, #48]	; 0x30
   12a7c:	and	r0, r0, #61440	; 0xf000
   12a80:	cmp	r0, #40960	; 0xa000
   12a84:	bne	12aa4 <__assert_fail@plt+0x1700>
   12a88:	mov	r0, r4
   12a8c:	bl	11380 <close@plt>
   12a90:	bl	11260 <__errno_location@plt>
   12a94:	mov	r1, #95	; 0x5f
   12a98:	mvn	r7, #0
   12a9c:	str	r1, [r0]
   12aa0:	b	12b10 <__assert_fail@plt+0x176c>
   12aa4:	movw	r3, #43450	; 0xa9ba
   12aa8:	add	r7, sp, #6
   12aac:	mov	r1, #1
   12ab0:	mov	r2, #26
   12ab4:	str	r4, [sp]
   12ab8:	movt	r3, #1
   12abc:	mov	r0, r7
   12ac0:	bl	1126c <__sprintf_chk@plt>
   12ac4:	mov	r0, r7
   12ac8:	mov	r1, r8
   12acc:	bl	11350 <chmod@plt>
   12ad0:	mov	r7, r0
   12ad4:	bl	11260 <__errno_location@plt>
   12ad8:	ldr	sl, [r0]
   12adc:	mov	r9, r0
   12ae0:	mov	r0, r4
   12ae4:	bl	11380 <close@plt>
   12ae8:	cmp	r7, #0
   12aec:	beq	12b10 <__assert_fail@plt+0x176c>
   12af0:	cmp	sl, #2
   12af4:	bne	12b1c <__assert_fail@plt+0x1778>
   12af8:	mov	r3, #0
   12afc:	mov	r0, r6
   12b00:	mov	r1, r5
   12b04:	mov	r2, r8
   12b08:	bl	11254 <fchmodat@plt>
   12b0c:	mov	r7, r0
   12b10:	mov	r0, r7
   12b14:	sub	sp, fp, #28
   12b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b1c:	str	sl, [r9]
   12b20:	b	12b10 <__assert_fail@plt+0x176c>
   12b24:	push	{fp, lr}
   12b28:	mov	fp, sp
   12b2c:	and	r2, r0, #61440	; 0xf000
   12b30:	sub	r2, r2, #4096	; 0x1000
   12b34:	lsr	r3, r2, #12
   12b38:	cmp	r3, #11
   12b3c:	bhi	12b8c <__assert_fail@plt+0x17e8>
   12b40:	add	r2, pc, #4
   12b44:	mov	ip, #45	; 0x2d
   12b48:	ldr	pc, [r2, r3, lsl #2]
   12b4c:	andeq	r2, r1, ip, ror fp
   12b50:	andeq	r2, r1, r4, lsl #23
   12b54:	andeq	r2, r1, ip, lsl #23
   12b58:	muleq	r1, r4, fp
   12b5c:	andeq	r2, r1, ip, lsl #23
   12b60:	andeq	r2, r1, ip, lsr #23
   12b64:	andeq	r2, r1, ip, lsl #23
   12b68:			; <UNDEFINED> instruction: 0x00012bb0
   12b6c:	andeq	r2, r1, ip, lsl #23
   12b70:	muleq	r1, ip, fp
   12b74:	andeq	r2, r1, ip, lsl #23
   12b78:	andeq	r2, r1, r4, lsr #23
   12b7c:	mov	ip, #112	; 0x70
   12b80:	b	12bb0 <__assert_fail@plt+0x180c>
   12b84:	mov	ip, #99	; 0x63
   12b88:	b	12bb0 <__assert_fail@plt+0x180c>
   12b8c:	mov	ip, #63	; 0x3f
   12b90:	b	12bb0 <__assert_fail@plt+0x180c>
   12b94:	mov	ip, #100	; 0x64
   12b98:	b	12bb0 <__assert_fail@plt+0x180c>
   12b9c:	mov	ip, #108	; 0x6c
   12ba0:	b	12bb0 <__assert_fail@plt+0x180c>
   12ba4:	mov	ip, #115	; 0x73
   12ba8:	b	12bb0 <__assert_fail@plt+0x180c>
   12bac:	mov	ip, #98	; 0x62
   12bb0:	tst	r0, #2
   12bb4:	mov	r3, #119	; 0x77
   12bb8:	mov	r2, #32
   12bbc:	mov	lr, #45	; 0x2d
   12bc0:	movweq	r3, #45	; 0x2d
   12bc4:	tst	r0, #4
   12bc8:	strh	r2, [r1, #10]
   12bcc:	mov	r2, #114	; 0x72
   12bd0:	strb	ip, [r1]
   12bd4:	mov	ip, #119	; 0x77
   12bd8:	movweq	r2, #45	; 0x2d
   12bdc:	tst	r0, #16
   12be0:	strb	r3, [r1, #8]
   12be4:	mov	r3, #114	; 0x72
   12be8:	strb	r2, [r1, #7]
   12bec:	mov	r2, #119	; 0x77
   12bf0:	movweq	r2, #45	; 0x2d
   12bf4:	tst	r0, #32
   12bf8:	strb	r2, [r1, #5]
   12bfc:	mov	r2, #114	; 0x72
   12c00:	movweq	r2, #45	; 0x2d
   12c04:	tst	r0, #128	; 0x80
   12c08:	movweq	ip, #45	; 0x2d
   12c0c:	tst	r0, #256	; 0x100
   12c10:	strb	r2, [r1, #4]
   12c14:	movweq	r3, #45	; 0x2d
   12c18:	ands	r2, r0, #1
   12c1c:	strb	ip, [r1, #2]
   12c20:	mov	r2, #84	; 0x54
   12c24:	mov	ip, #45	; 0x2d
   12c28:	strb	r3, [r1, #1]
   12c2c:	mov	r3, #45	; 0x2d
   12c30:	movwne	r3, #120	; 0x78
   12c34:	movwne	r2, #116	; 0x74
   12c38:	tst	r0, #512	; 0x200
   12c3c:	moveq	r2, r3
   12c40:	mov	r3, #83	; 0x53
   12c44:	strb	r2, [r1, #9]
   12c48:	ands	r2, r0, #8
   12c4c:	mov	r2, #83	; 0x53
   12c50:	movwne	lr, #120	; 0x78
   12c54:	movwne	r2, #115	; 0x73
   12c58:	tst	r0, #1024	; 0x400
   12c5c:	moveq	r2, lr
   12c60:	strb	r2, [r1, #6]
   12c64:	ands	r2, r0, #64	; 0x40
   12c68:	movwne	ip, #120	; 0x78
   12c6c:	movwne	r3, #115	; 0x73
   12c70:	tst	r0, #2048	; 0x800
   12c74:	moveq	r3, ip
   12c78:	strb	r3, [r1, #3]
   12c7c:	pop	{fp, pc}
   12c80:	ldr	r0, [r0, #16]
   12c84:	b	12b24 <__assert_fail@plt+0x1780>
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	add	fp, sp, #28
   12c90:	sub	sp, sp, #28
   12c94:	cmp	r1, #4096	; 0x1000
   12c98:	bcs	12cb4 <__assert_fail@plt+0x1910>
   12c9c:	mov	r7, r0
   12ca0:	and	r0, r1, #516	; 0x204
   12ca4:	mov	r5, r1
   12ca8:	cmp	r0, #516	; 0x204
   12cac:	tstne	r5, #18
   12cb0:	bne	12cd0 <__assert_fail@plt+0x192c>
   12cb4:	bl	11260 <__errno_location@plt>
   12cb8:	mov	r1, #22
   12cbc:	mov	r4, #0
   12cc0:	str	r1, [r0]
   12cc4:	mov	r0, r4
   12cc8:	sub	sp, fp, #28
   12ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd0:	mov	r0, #1
   12cd4:	mov	r1, #96	; 0x60
   12cd8:	mov	sl, r2
   12cdc:	bl	19568 <__assert_fail@plt+0x81c4>
   12ce0:	cmp	r0, #0
   12ce4:	beq	130ec <__assert_fail@plt+0x1d48>
   12ce8:	mov	r4, r0
   12cec:	mvn	r0, #99	; 0x63
   12cf0:	tst	r5, #2
   12cf4:	mov	r1, r5
   12cf8:	str	r0, [r4, #32]
   12cfc:	bic	r0, r5, #516	; 0x204
   12d00:	str	sl, [r4, #44]	; 0x2c
   12d04:	str	r4, [sp, #24]
   12d08:	orrne	r1, r0, #4
   12d0c:	str	r1, [r4, #48]	; 0x30
   12d10:	ldr	r0, [r7]
   12d14:	cmp	r0, #0
   12d18:	beq	12d50 <__assert_fail@plt+0x19ac>
   12d1c:	add	r6, r7, #4
   12d20:	mov	r4, #0
   12d24:	bl	1123c <strlen@plt>
   12d28:	cmp	r0, r4
   12d2c:	movhi	r4, r0
   12d30:	ldr	r0, [r6], #4
   12d34:	cmp	r0, #0
   12d38:	bne	12d24 <__assert_fail@plt+0x1980>
   12d3c:	add	r0, r4, #1
   12d40:	ldr	r4, [sp, #24]
   12d44:	cmp	r0, #4096	; 0x1000
   12d48:	movls	r0, #4096	; 0x1000
   12d4c:	b	12d54 <__assert_fail@plt+0x19b0>
   12d50:	mov	r0, #4096	; 0x1000
   12d54:	ldr	r1, [r4, #36]	; 0x24
   12d58:	add	r0, r0, #256	; 0x100
   12d5c:	adds	r1, r0, r1
   12d60:	bcc	12d84 <__assert_fail@plt+0x19e0>
   12d64:	ldr	r0, [r4, #24]
   12d68:	bl	19ac8 <__assert_fail@plt+0x8724>
   12d6c:	mov	r0, #0
   12d70:	str	r0, [r4, #24]
   12d74:	bl	11260 <__errno_location@plt>
   12d78:	mov	r1, #36	; 0x24
   12d7c:	str	r1, [r0]
   12d80:	b	130e4 <__assert_fail@plt+0x1d40>
   12d84:	str	r1, [r4, #36]	; 0x24
   12d88:	ldr	r0, [r4, #24]
   12d8c:	bl	195ec <__assert_fail@plt+0x8248>
   12d90:	cmp	r0, #0
   12d94:	beq	12e08 <__assert_fail@plt+0x1a64>
   12d98:	str	r0, [r4, #24]
   12d9c:	ldr	r0, [r7]
   12da0:	cmp	r0, #0
   12da4:	beq	12e1c <__assert_fail@plt+0x1a78>
   12da8:	mov	r0, #176	; 0xb0
   12dac:	bl	195bc <__assert_fail@plt+0x8218>
   12db0:	cmp	r0, #0
   12db4:	beq	130dc <__assert_fail@plt+0x1d38>
   12db8:	ldr	r1, [r4, #24]
   12dbc:	mov	r6, r0
   12dc0:	mov	r0, #0
   12dc4:	mov	r2, #196608	; 0x30000
   12dc8:	strb	r0, [r6, #168]	; 0xa8
   12dcc:	str	r2, [r6, #58]	; 0x3a
   12dd0:	mvn	r2, #0
   12dd4:	str	r4, [r6, #44]	; 0x2c
   12dd8:	str	r2, [r6, #48]	; 0x30
   12ddc:	str	r0, [r6, #52]	; 0x34
   12de0:	str	r0, [r6, #12]
   12de4:	str	r0, [r6, #16]
   12de8:	str	r0, [r6, #20]
   12dec:	str	r1, [r6, #28]
   12df0:	str	r0, [r6, #32]
   12df4:	cmp	sl, #0
   12df8:	beq	12e28 <__assert_fail@plt+0x1a84>
   12dfc:	ldrb	r0, [r4, #49]	; 0x31
   12e00:	ubfx	r0, r0, #2, #1
   12e04:	b	12e2c <__assert_fail@plt+0x1a88>
   12e08:	ldr	r0, [r4, #24]
   12e0c:	bl	19ac8 <__assert_fail@plt+0x8724>
   12e10:	mov	r0, #0
   12e14:	str	r0, [r4, #24]
   12e18:	b	130e4 <__assert_fail@plt+0x1d40>
   12e1c:	mov	r6, #0
   12e20:	cmp	sl, #0
   12e24:	bne	12dfc <__assert_fail@plt+0x1a58>
   12e28:	mov	r0, #1
   12e2c:	ldr	r4, [r7]
   12e30:	cmp	r4, #0
   12e34:	beq	12fa0 <__assert_fail@plt+0x1bfc>
   12e38:	eor	r0, r0, #1
   12e3c:	str	r6, [sp, #20]
   12e40:	and	r1, r5, #2048	; 0x800
   12e44:	mov	r9, #0
   12e48:	mov	r6, #0
   12e4c:	str	sl, [sp, #8]
   12e50:	str	r0, [sp, #12]
   12e54:	mov	r0, #0
   12e58:	str	r1, [sp, #16]
   12e5c:	str	r0, [sp, #4]
   12e60:	b	12e8c <__assert_fail@plt+0x1ae8>
   12e64:	cmp	r9, #0
   12e68:	str	r4, [r5, #8]
   12e6c:	beq	12f94 <__assert_fail@plt+0x1bf0>
   12e70:	ldr	r0, [sp, #4]
   12e74:	str	r5, [sp, #4]
   12e78:	str	r5, [r0, #8]
   12e7c:	ldr	r4, [r7, #4]!
   12e80:	add	r6, r6, #1
   12e84:	cmp	r4, #0
   12e88:	beq	12fbc <__assert_fail@plt+0x1c18>
   12e8c:	mov	r0, r4
   12e90:	bl	1123c <strlen@plt>
   12e94:	mov	r8, r0
   12e98:	ldr	r0, [sp, #16]
   12e9c:	cmp	r0, #0
   12ea0:	bne	12ed8 <__assert_fail@plt+0x1b34>
   12ea4:	cmp	r8, #3
   12ea8:	bcc	12ed8 <__assert_fail@plt+0x1b34>
   12eac:	add	r0, r8, r4
   12eb0:	ldrb	r0, [r0, #-1]
   12eb4:	cmp	r0, #47	; 0x2f
   12eb8:	bne	12ed8 <__assert_fail@plt+0x1b34>
   12ebc:	sub	r0, r4, #2
   12ec0:	ldrb	r1, [r0, r8]
   12ec4:	cmp	r1, #47	; 0x2f
   12ec8:	bne	12ed8 <__assert_fail@plt+0x1b34>
   12ecc:	sub	r8, r8, #1
   12ed0:	cmp	r8, #1
   12ed4:	bhi	12ec0 <__assert_fail@plt+0x1b1c>
   12ed8:	add	r0, r8, #176	; 0xb0
   12edc:	bic	r0, r0, #7
   12ee0:	bl	195bc <__assert_fail@plt+0x8218>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12fac <__assert_fail@plt+0x1c08>
   12eec:	add	sl, r0, #168	; 0xa8
   12ef0:	mov	r5, r0
   12ef4:	mov	r1, r4
   12ef8:	mov	r2, r8
   12efc:	mov	r0, sl
   12f00:	bl	11128 <memcpy@plt>
   12f04:	ldr	r0, [sp, #24]
   12f08:	ldr	r2, [sp, #20]
   12f0c:	mov	r4, #0
   12f10:	strb	r4, [sl, r8]
   12f14:	str	r2, [r5, #4]
   12f18:	add	r2, r5, #44	; 0x2c
   12f1c:	ldr	r1, [r0, #24]
   12f20:	stm	r2, {r0, r4, r8}
   12f24:	mov	r2, #196608	; 0x30000
   12f28:	str	r2, [r5, #58]	; 0x3a
   12f2c:	ldr	r2, [sp, #12]
   12f30:	str	r4, [r5, #12]
   12f34:	str	r4, [r5, #16]
   12f38:	str	r4, [r5, #20]
   12f3c:	str	sl, [r5, #24]
   12f40:	str	r1, [r5, #28]
   12f44:	clz	r1, r9
   12f48:	str	r4, [r5, #32]
   12f4c:	lsr	r1, r1, #5
   12f50:	orrs	r1, r2, r1
   12f54:	bne	12f6c <__assert_fail@plt+0x1bc8>
   12f58:	mov	r0, #2
   12f5c:	str	r0, [r5, #112]	; 0x70
   12f60:	str	r4, [r5, #116]	; 0x74
   12f64:	mov	r0, #11
   12f68:	b	12f78 <__assert_fail@plt+0x1bd4>
   12f6c:	mov	r1, r5
   12f70:	mov	r2, #0
   12f74:	bl	13180 <__assert_fail@plt+0x1ddc>
   12f78:	ldr	sl, [sp, #8]
   12f7c:	strh	r0, [r5, #56]	; 0x38
   12f80:	cmp	sl, #0
   12f84:	beq	12e64 <__assert_fail@plt+0x1ac0>
   12f88:	str	r9, [r5, #8]
   12f8c:	mov	r9, r5
   12f90:	b	12e7c <__assert_fail@plt+0x1ad8>
   12f94:	mov	r0, r5
   12f98:	str	r5, [sp, #4]
   12f9c:	b	12f8c <__assert_fail@plt+0x1be8>
   12fa0:	ldr	r4, [sp, #24]
   12fa4:	mov	r9, #0
   12fa8:	b	12ff0 <__assert_fail@plt+0x1c4c>
   12fac:	ldr	r6, [sp, #20]
   12fb0:	cmp	r9, #0
   12fb4:	bne	130b8 <__assert_fail@plt+0x1d14>
   12fb8:	b	130d0 <__assert_fail@plt+0x1d2c>
   12fbc:	cmp	sl, #0
   12fc0:	beq	12fe8 <__assert_fail@plt+0x1c44>
   12fc4:	ldr	r4, [sp, #24]
   12fc8:	cmp	r6, #2
   12fcc:	bcc	12fec <__assert_fail@plt+0x1c48>
   12fd0:	mov	r0, r4
   12fd4:	mov	r1, r9
   12fd8:	mov	r2, r6
   12fdc:	bl	13318 <__assert_fail@plt+0x1f74>
   12fe0:	mov	r9, r0
   12fe4:	b	12fec <__assert_fail@plt+0x1c48>
   12fe8:	ldr	r4, [sp, #24]
   12fec:	ldr	r6, [sp, #20]
   12ff0:	mov	r0, #176	; 0xb0
   12ff4:	bl	195bc <__assert_fail@plt+0x8218>
   12ff8:	cmp	r0, #0
   12ffc:	beq	13090 <__assert_fail@plt+0x1cec>
   13000:	ldr	r2, [r4, #24]
   13004:	mov	r1, #0
   13008:	mov	r3, #196608	; 0x30000
   1300c:	str	r0, [r4]
   13010:	str	r1, [r0, #52]	; 0x34
   13014:	strb	r1, [r0, #168]	; 0xa8
   13018:	str	r4, [r0, #44]	; 0x2c
   1301c:	str	r3, [r0, #58]	; 0x3a
   13020:	str	r2, [r0, #28]
   13024:	mov	r2, #9
   13028:	str	r1, [r0, #32]
   1302c:	strh	r2, [r0, #56]	; 0x38
   13030:	str	r9, [r0, #8]
   13034:	str	r1, [r0, #12]
   13038:	str	r1, [r0, #16]
   1303c:	str	r1, [r0, #20]
   13040:	mov	r1, #1
   13044:	str	r1, [r0, #48]	; 0x30
   13048:	ldrh	r0, [r4, #48]	; 0x30
   1304c:	movw	r1, #258	; 0x102
   13050:	tst	r0, r1
   13054:	beq	130f4 <__assert_fail@plt+0x1d50>
   13058:	movw	r0, #39624	; 0x9ac8
   1305c:	movw	r2, #20108	; 0x4e8c
   13060:	movw	r3, #20140	; 0x4eac
   13064:	mov	r1, #0
   13068:	movt	r0, #1
   1306c:	movt	r2, #1
   13070:	movt	r3, #1
   13074:	str	r0, [sp]
   13078:	mov	r0, #31
   1307c:	bl	1553c <__assert_fail@plt+0x4198>
   13080:	cmp	r0, #0
   13084:	str	r0, [r4, #56]	; 0x38
   13088:	bne	1310c <__assert_fail@plt+0x1d68>
   1308c:	b	13098 <__assert_fail@plt+0x1cf4>
   13090:	mov	r0, #0
   13094:	str	r0, [r4]
   13098:	cmp	r9, #0
   1309c:	bne	130b8 <__assert_fail@plt+0x1d14>
   130a0:	b	130d0 <__assert_fail@plt+0x1d2c>
   130a4:	mov	r0, r9
   130a8:	bl	19ac8 <__assert_fail@plt+0x8724>
   130ac:	cmp	r4, #0
   130b0:	mov	r9, r4
   130b4:	beq	130d0 <__assert_fail@plt+0x1d2c>
   130b8:	ldrd	r4, [r9, #8]
   130bc:	cmp	r5, #0
   130c0:	beq	130a4 <__assert_fail@plt+0x1d00>
   130c4:	mov	r0, r5
   130c8:	bl	11398 <closedir@plt>
   130cc:	b	130a4 <__assert_fail@plt+0x1d00>
   130d0:	mov	r0, r6
   130d4:	bl	19ac8 <__assert_fail@plt+0x8724>
   130d8:	ldr	r4, [sp, #24]
   130dc:	ldr	r0, [r4, #24]
   130e0:	bl	19ac8 <__assert_fail@plt+0x8724>
   130e4:	mov	r0, r4
   130e8:	bl	19ac8 <__assert_fail@plt+0x8724>
   130ec:	mov	r4, #0
   130f0:	b	12cc4 <__assert_fail@plt+0x1920>
   130f4:	mov	r0, #32
   130f8:	bl	195bc <__assert_fail@plt+0x8218>
   130fc:	cmp	r0, #0
   13100:	str	r0, [r4, #56]	; 0x38
   13104:	beq	13098 <__assert_fail@plt+0x1cf4>
   13108:	bl	196c4 <__assert_fail@plt+0x8320>
   1310c:	ldr	r4, [sp, #24]
   13110:	ldr	r0, [r4, #48]	; 0x30
   13114:	tst	r0, #516	; 0x204
   13118:	bne	13170 <__assert_fail@plt+0x1dcc>
   1311c:	mov	r1, #32768	; 0x8000
   13120:	tst	r0, #512	; 0x200
   13124:	and	r1, r1, r0, lsl #11
   13128:	orr	r1, r1, #18688	; 0x4900
   1312c:	orr	r2, r1, #524288	; 0x80000
   13130:	bne	13148 <__assert_fail@plt+0x1da4>
   13134:	movw	r0, #43468	; 0xa9cc
   13138:	mov	r1, r2
   1313c:	movt	r0, #1
   13140:	bl	19a30 <__assert_fail@plt+0x868c>
   13144:	b	13158 <__assert_fail@plt+0x1db4>
   13148:	ldr	r0, [r4, #32]
   1314c:	movw	r1, #43468	; 0xa9cc
   13150:	movt	r1, #1
   13154:	bl	169dc <__assert_fail@plt+0x5638>
   13158:	cmn	r0, #1
   1315c:	str	r0, [r4, #28]
   13160:	bgt	13170 <__assert_fail@plt+0x1dcc>
   13164:	ldr	r0, [r4, #48]	; 0x30
   13168:	orr	r0, r0, #4
   1316c:	str	r0, [r4, #48]	; 0x30
   13170:	add	r0, r4, #60	; 0x3c
   13174:	mvn	r1, #0
   13178:	bl	16378 <__assert_fail@plt+0x4fd4>
   1317c:	b	12cc4 <__assert_fail@plt+0x1920>
   13180:	push	{r4, r5, r6, sl, fp, lr}
   13184:	add	fp, sp, #16
   13188:	sub	sp, sp, #8
   1318c:	mov	r4, r1
   13190:	ldr	r1, [r0, #48]	; 0x30
   13194:	ldr	r3, [r4, #48]	; 0x30
   13198:	add	r5, r4, #64	; 0x40
   1319c:	cmp	r3, #0
   131a0:	andeq	r3, r1, #1
   131a4:	orreq	r2, r3, r2
   131a8:	cmp	r2, #0
   131ac:	andseq	r1, r1, #2
   131b0:	beq	1320c <__assert_fail@plt+0x1e68>
   131b4:	ldr	r1, [r4, #24]
   131b8:	mov	r0, #3
   131bc:	mov	r2, r5
   131c0:	bl	1135c <__xstat64@plt>
   131c4:	cmp	r0, #0
   131c8:	beq	1328c <__assert_fail@plt+0x1ee8>
   131cc:	bl	11260 <__errno_location@plt>
   131d0:	mov	r6, r0
   131d4:	ldr	r0, [r0]
   131d8:	cmp	r0, #2
   131dc:	bne	1323c <__assert_fail@plt+0x1e98>
   131e0:	ldr	r1, [r4, #24]
   131e4:	mov	r0, #3
   131e8:	mov	r2, r5
   131ec:	bl	1138c <__lxstat64@plt>
   131f0:	cmp	r0, #0
   131f4:	bne	13238 <__assert_fail@plt+0x1e94>
   131f8:	mov	r0, #0
   131fc:	str	r0, [r6]
   13200:	mov	r0, #13
   13204:	sub	sp, fp, #16
   13208:	pop	{r4, r5, r6, sl, fp, pc}
   1320c:	ldr	r1, [r0, #32]
   13210:	ldr	r2, [r4, #24]
   13214:	mov	r0, #256	; 0x100
   13218:	mov	r3, r5
   1321c:	str	r0, [sp]
   13220:	mov	r0, #3
   13224:	bl	11164 <__fxstatat64@plt>
   13228:	cmp	r0, #0
   1322c:	beq	1328c <__assert_fail@plt+0x1ee8>
   13230:	bl	11260 <__errno_location@plt>
   13234:	mov	r6, r0
   13238:	ldr	r0, [r6]
   1323c:	vmov.i32	q8, #0	; 0x00000000
   13240:	add	r1, r5, #80	; 0x50
   13244:	str	r0, [r4, #32]
   13248:	mov	r0, #0
   1324c:	str	r0, [r5, #96]	; 0x60
   13250:	vst1.64	{d16-d17}, [r1]
   13254:	add	r1, r5, #64	; 0x40
   13258:	vst1.64	{d16-d17}, [r1]
   1325c:	add	r1, r5, #48	; 0x30
   13260:	vst1.64	{d16-d17}, [r1]
   13264:	add	r1, r5, #32
   13268:	vst1.64	{d16-d17}, [r1]
   1326c:	add	r1, r5, #16
   13270:	vst1.64	{d16-d17}, [r1]
   13274:	mov	r1, #100	; 0x64
   13278:	vst1.64	{d16-d17}, [r5], r1
   1327c:	str	r0, [r5]
   13280:	mov	r0, #10
   13284:	sub	sp, fp, #16
   13288:	pop	{r4, r5, r6, sl, fp, pc}
   1328c:	ldr	r0, [r4, #80]	; 0x50
   13290:	and	r0, r0, #61440	; 0xf000
   13294:	cmp	r0, #40960	; 0xa000
   13298:	beq	13300 <__assert_fail@plt+0x1f5c>
   1329c:	cmp	r0, #32768	; 0x8000
   132a0:	beq	132f4 <__assert_fail@plt+0x1f50>
   132a4:	cmp	r0, #16384	; 0x4000
   132a8:	bne	1330c <__assert_fail@plt+0x1f68>
   132ac:	ldrb	r1, [r4, #168]	; 0xa8
   132b0:	mov	r0, #1
   132b4:	cmp	r1, #46	; 0x2e
   132b8:	bne	13310 <__assert_fail@plt+0x1f6c>
   132bc:	ldrb	r1, [r4, #169]	; 0xa9
   132c0:	cmp	r1, #0
   132c4:	beq	132dc <__assert_fail@plt+0x1f38>
   132c8:	cmp	r1, #46	; 0x2e
   132cc:	bne	13310 <__assert_fail@plt+0x1f6c>
   132d0:	ldrb	r1, [r4, #170]	; 0xaa
   132d4:	cmp	r1, #0
   132d8:	bne	13310 <__assert_fail@plt+0x1f6c>
   132dc:	ldr	r1, [r4, #48]	; 0x30
   132e0:	mov	r0, #5
   132e4:	cmp	r1, #0
   132e8:	movweq	r0, #1
   132ec:	sub	sp, fp, #16
   132f0:	pop	{r4, r5, r6, sl, fp, pc}
   132f4:	mov	r0, #8
   132f8:	sub	sp, fp, #16
   132fc:	pop	{r4, r5, r6, sl, fp, pc}
   13300:	mov	r0, #12
   13304:	sub	sp, fp, #16
   13308:	pop	{r4, r5, r6, sl, fp, pc}
   1330c:	mov	r0, #3
   13310:	sub	sp, fp, #16
   13314:	pop	{r4, r5, r6, sl, fp, pc}
   13318:	push	{r4, r5, r6, r7, fp, lr}
   1331c:	add	fp, sp, #16
   13320:	mov	r6, r0
   13324:	ldr	r7, [r0, #44]	; 0x2c
   13328:	ldr	r0, [r0, #40]	; 0x28
   1332c:	mov	r5, r2
   13330:	mov	r4, r1
   13334:	cmp	r0, r2
   13338:	bcs	13370 <__assert_fail@plt+0x1fcc>
   1333c:	add	r1, r5, #40	; 0x28
   13340:	cmn	r1, #-1073741823	; 0xc0000001
   13344:	str	r1, [r6, #40]	; 0x28
   13348:	bhi	13414 <__assert_fail@plt+0x2070>
   1334c:	ldr	r0, [r6, #8]
   13350:	lsl	r1, r1, #2
   13354:	bl	195ec <__assert_fail@plt+0x8248>
   13358:	cmp	r0, #0
   1335c:	beq	13414 <__assert_fail@plt+0x2070>
   13360:	str	r0, [r6, #8]
   13364:	cmp	r4, #0
   13368:	bne	1337c <__assert_fail@plt+0x1fd8>
   1336c:	b	13390 <__assert_fail@plt+0x1fec>
   13370:	ldr	r0, [r6, #8]
   13374:	cmp	r4, #0
   13378:	beq	13390 <__assert_fail@plt+0x1fec>
   1337c:	str	r4, [r0], #4
   13380:	ldr	r4, [r4, #8]
   13384:	cmp	r4, #0
   13388:	bne	1337c <__assert_fail@plt+0x1fd8>
   1338c:	ldr	r0, [r6, #8]
   13390:	mov	r1, r5
   13394:	mov	r2, #4
   13398:	mov	r3, r7
   1339c:	bl	1132c <qsort@plt>
   133a0:	ldr	r0, [r6, #8]
   133a4:	cmp	r5, #1
   133a8:	ldr	r4, [r0]
   133ac:	mov	r1, r4
   133b0:	beq	13438 <__assert_fail@plt+0x2094>
   133b4:	mov	r2, r0
   133b8:	ldr	r1, [r2, #4]!
   133bc:	str	r1, [r4, #8]
   133c0:	subs	r1, r5, #2
   133c4:	beq	13430 <__assert_fail@plt+0x208c>
   133c8:	tst	r1, #1
   133cc:	beq	133e4 <__assert_fail@plt+0x2040>
   133d0:	ldr	r1, [r0, #8]!
   133d4:	ldr	r2, [r0, #-4]
   133d8:	str	r1, [r2, #8]
   133dc:	sub	r1, r5, #3
   133e0:	mov	r2, r0
   133e4:	cmp	r5, #3
   133e8:	beq	13434 <__assert_fail@plt+0x2090>
   133ec:	mov	r0, r2
   133f0:	ldm	r2, {r3, r7}
   133f4:	subs	r1, r1, #2
   133f8:	str	r7, [r3, #8]
   133fc:	ldr	r3, [r0, #8]!
   13400:	ldr	r2, [r2, #4]
   13404:	str	r3, [r2, #8]
   13408:	mov	r2, r0
   1340c:	bne	133f0 <__assert_fail@plt+0x204c>
   13410:	b	13434 <__assert_fail@plt+0x2090>
   13414:	ldr	r0, [r6, #8]
   13418:	bl	19ac8 <__assert_fail@plt+0x8724>
   1341c:	mov	r0, #0
   13420:	str	r0, [r6, #40]	; 0x28
   13424:	str	r0, [r6, #8]
   13428:	mov	r0, r4
   1342c:	pop	{r4, r5, r6, r7, fp, pc}
   13430:	mov	r0, r2
   13434:	ldr	r1, [r0]
   13438:	mov	r0, #0
   1343c:	str	r0, [r1, #8]
   13440:	mov	r0, r4
   13444:	pop	{r4, r5, r6, r7, fp, pc}
   13448:	push	{r4, r5, r6, r7, fp, lr}
   1344c:	add	fp, sp, #16
   13450:	mov	r4, r0
   13454:	ldr	r0, [r0]
   13458:	cmp	r0, #0
   1345c:	beq	1349c <__assert_fail@plt+0x20f8>
   13460:	ldr	r1, [r0, #48]	; 0x30
   13464:	cmp	r1, #0
   13468:	bmi	13490 <__assert_fail@plt+0x20ec>
   1346c:	ldr	r5, [r0, #8]
   13470:	cmp	r5, #0
   13474:	ldreq	r5, [r0, #4]
   13478:	bl	19ac8 <__assert_fail@plt+0x8724>
   1347c:	ldr	r0, [r5, #48]	; 0x30
   13480:	cmn	r0, #1
   13484:	mov	r0, r5
   13488:	bgt	1346c <__assert_fail@plt+0x20c8>
   1348c:	b	13494 <__assert_fail@plt+0x20f0>
   13490:	mov	r5, r0
   13494:	mov	r0, r5
   13498:	bl	19ac8 <__assert_fail@plt+0x8724>
   1349c:	ldr	r5, [r4, #4]
   134a0:	cmp	r5, #0
   134a4:	bne	134c0 <__assert_fail@plt+0x211c>
   134a8:	b	134d8 <__assert_fail@plt+0x2134>
   134ac:	mov	r0, r5
   134b0:	bl	19ac8 <__assert_fail@plt+0x8724>
   134b4:	cmp	r6, #0
   134b8:	mov	r5, r6
   134bc:	beq	134d8 <__assert_fail@plt+0x2134>
   134c0:	ldrd	r6, [r5, #8]
   134c4:	cmp	r7, #0
   134c8:	beq	134ac <__assert_fail@plt+0x2108>
   134cc:	mov	r0, r7
   134d0:	bl	11398 <closedir@plt>
   134d4:	b	134ac <__assert_fail@plt+0x2108>
   134d8:	ldr	r0, [r4, #8]
   134dc:	bl	19ac8 <__assert_fail@plt+0x8724>
   134e0:	ldr	r0, [r4, #24]
   134e4:	bl	19ac8 <__assert_fail@plt+0x8724>
   134e8:	ldr	r0, [r4, #48]	; 0x30
   134ec:	tst	r0, #512	; 0x200
   134f0:	bne	1351c <__assert_fail@plt+0x2178>
   134f4:	mov	r6, #0
   134f8:	tst	r0, #4
   134fc:	bne	13560 <__assert_fail@plt+0x21bc>
   13500:	ldr	r0, [r4, #28]
   13504:	bl	11320 <fchdir@plt>
   13508:	cmp	r0, #0
   1350c:	beq	1353c <__assert_fail@plt+0x2198>
   13510:	bl	11260 <__errno_location@plt>
   13514:	ldr	r6, [r0]
   13518:	b	13540 <__assert_fail@plt+0x219c>
   1351c:	ldr	r0, [r4, #32]
   13520:	mov	r6, #0
   13524:	cmp	r0, #0
   13528:	bmi	13560 <__assert_fail@plt+0x21bc>
   1352c:	bl	11380 <close@plt>
   13530:	cmp	r0, #0
   13534:	bne	13558 <__assert_fail@plt+0x21b4>
   13538:	b	13560 <__assert_fail@plt+0x21bc>
   1353c:	mov	r6, #0
   13540:	ldr	r0, [r4, #28]
   13544:	bl	11380 <close@plt>
   13548:	cmp	r6, #0
   1354c:	bne	13560 <__assert_fail@plt+0x21bc>
   13550:	cmp	r0, #0
   13554:	beq	13560 <__assert_fail@plt+0x21bc>
   13558:	bl	11260 <__errno_location@plt>
   1355c:	ldr	r6, [r0]
   13560:	add	r5, r4, #60	; 0x3c
   13564:	mov	r0, r5
   13568:	bl	1639c <__assert_fail@plt+0x4ff8>
   1356c:	cmp	r0, #0
   13570:	bne	1358c <__assert_fail@plt+0x21e8>
   13574:	mov	r0, r5
   13578:	bl	163f0 <__assert_fail@plt+0x504c>
   1357c:	cmp	r0, #0
   13580:	bmi	13564 <__assert_fail@plt+0x21c0>
   13584:	bl	11380 <close@plt>
   13588:	b	13564 <__assert_fail@plt+0x21c0>
   1358c:	ldr	r0, [r4, #52]	; 0x34
   13590:	cmp	r0, #0
   13594:	beq	1359c <__assert_fail@plt+0x21f8>
   13598:	bl	15840 <__assert_fail@plt+0x449c>
   1359c:	ldrh	r0, [r4, #48]	; 0x30
   135a0:	movw	r1, #258	; 0x102
   135a4:	tst	r0, r1
   135a8:	beq	135c0 <__assert_fail@plt+0x221c>
   135ac:	ldr	r0, [r4, #56]	; 0x38
   135b0:	cmp	r0, #0
   135b4:	beq	135c8 <__assert_fail@plt+0x2224>
   135b8:	bl	15840 <__assert_fail@plt+0x449c>
   135bc:	b	135c8 <__assert_fail@plt+0x2224>
   135c0:	ldr	r0, [r4, #56]	; 0x38
   135c4:	bl	19ac8 <__assert_fail@plt+0x8724>
   135c8:	mov	r0, r4
   135cc:	bl	19ac8 <__assert_fail@plt+0x8724>
   135d0:	cmp	r6, #0
   135d4:	beq	135e8 <__assert_fail@plt+0x2244>
   135d8:	bl	11260 <__errno_location@plt>
   135dc:	str	r6, [r0]
   135e0:	mvn	r0, #0
   135e4:	pop	{r4, r5, r6, r7, fp, pc}
   135e8:	mov	r0, #0
   135ec:	pop	{r4, r5, r6, r7, fp, pc}
   135f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135f4:	add	fp, sp, #24
   135f8:	sub	sp, sp, #8
   135fc:	ldr	r6, [r0]
   13600:	mov	r5, #0
   13604:	cmp	r6, #0
   13608:	beq	13d48 <__assert_fail@plt+0x29a4>
   1360c:	mov	r4, r0
   13610:	ldr	r0, [r0, #48]	; 0x30
   13614:	tst	r0, #8192	; 0x2000
   13618:	bne	13d48 <__assert_fail@plt+0x29a4>
   1361c:	ldrh	r1, [r6, #60]	; 0x3c
   13620:	mov	r2, #3
   13624:	strh	r2, [r6, #60]	; 0x3c
   13628:	cmp	r1, #1
   1362c:	beq	1369c <__assert_fail@plt+0x22f8>
   13630:	cmp	r1, #2
   13634:	bne	136b8 <__assert_fail@plt+0x2314>
   13638:	ldrh	r2, [r6, #56]	; 0x38
   1363c:	bic	r3, r2, #1
   13640:	cmp	r3, #12
   13644:	bne	136bc <__assert_fail@plt+0x2318>
   13648:	mov	r0, r4
   1364c:	mov	r1, r6
   13650:	mov	r2, #1
   13654:	bl	13180 <__assert_fail@plt+0x1ddc>
   13658:	cmp	r0, #1
   1365c:	strh	r0, [r6, #56]	; 0x38
   13660:	bne	137ac <__assert_fail@plt+0x2408>
   13664:	ldr	r0, [r4, #48]	; 0x30
   13668:	tst	r0, #4
   1366c:	bne	137ac <__assert_fail@plt+0x2408>
   13670:	mov	r1, #32768	; 0x8000
   13674:	tst	r0, #512	; 0x200
   13678:	and	r1, r1, r0, lsl #11
   1367c:	orr	r1, r1, #18688	; 0x4900
   13680:	orr	r2, r1, #524288	; 0x80000
   13684:	bne	13990 <__assert_fail@plt+0x25ec>
   13688:	movw	r0, #43468	; 0xa9cc
   1368c:	mov	r1, r2
   13690:	movt	r0, #1
   13694:	bl	19a30 <__assert_fail@plt+0x868c>
   13698:	b	139a0 <__assert_fail@plt+0x25fc>
   1369c:	mov	r0, r4
   136a0:	mov	r1, r6
   136a4:	mov	r2, #0
   136a8:	bl	13180 <__assert_fail@plt+0x1ddc>
   136ac:	strh	r0, [r6, #56]	; 0x38
   136b0:	mov	r5, r6
   136b4:	b	13d48 <__assert_fail@plt+0x29a4>
   136b8:	ldrh	r2, [r6, #56]	; 0x38
   136bc:	cmp	r2, #1
   136c0:	bne	1371c <__assert_fail@plt+0x2378>
   136c4:	cmp	r1, #4
   136c8:	bne	137b4 <__assert_fail@plt+0x2410>
   136cc:	ldrb	r0, [r6, #58]	; 0x3a
   136d0:	tst	r0, #2
   136d4:	beq	136e0 <__assert_fail@plt+0x233c>
   136d8:	ldr	r0, [r6, #36]	; 0x24
   136dc:	bl	11380 <close@plt>
   136e0:	ldr	r5, [r4, #4]
   136e4:	cmp	r5, #0
   136e8:	bne	13704 <__assert_fail@plt+0x2360>
   136ec:	b	1384c <__assert_fail@plt+0x24a8>
   136f0:	mov	r0, r5
   136f4:	bl	19ac8 <__assert_fail@plt+0x8724>
   136f8:	cmp	r8, #0
   136fc:	mov	r5, r8
   13700:	beq	13844 <__assert_fail@plt+0x24a0>
   13704:	ldrd	r8, [r5, #8]
   13708:	cmp	r9, #0
   1370c:	beq	136f0 <__assert_fail@plt+0x234c>
   13710:	mov	r0, r9
   13714:	bl	11398 <closedir@plt>
   13718:	b	136f0 <__assert_fail@plt+0x234c>
   1371c:	ldr	r5, [r6, #8]
   13720:	cmp	r5, #0
   13724:	beq	13868 <__assert_fail@plt+0x24c4>
   13728:	mov	r0, r6
   1372c:	str	r5, [r4]
   13730:	bl	19ac8 <__assert_fail@plt+0x8724>
   13734:	ldr	r0, [r5, #48]	; 0x30
   13738:	cmp	r0, #0
   1373c:	beq	138b4 <__assert_fail@plt+0x2510>
   13740:	ldrh	r0, [r5, #60]	; 0x3c
   13744:	mov	r6, r5
   13748:	cmp	r0, #4
   1374c:	beq	1371c <__assert_fail@plt+0x2378>
   13750:	cmp	r0, #2
   13754:	bne	13c10 <__assert_fail@plt+0x286c>
   13758:	mov	r0, r4
   1375c:	mov	r1, r5
   13760:	mov	r2, #1
   13764:	bl	13180 <__assert_fail@plt+0x1ddc>
   13768:	cmp	r0, #1
   1376c:	strh	r0, [r5, #56]	; 0x38
   13770:	bne	13c08 <__assert_fail@plt+0x2864>
   13774:	ldr	r0, [r4, #48]	; 0x30
   13778:	tst	r0, #4
   1377c:	bne	13c08 <__assert_fail@plt+0x2864>
   13780:	mov	r1, #32768	; 0x8000
   13784:	tst	r0, #512	; 0x200
   13788:	and	r1, r1, r0, lsl #11
   1378c:	orr	r1, r1, #18688	; 0x4900
   13790:	orr	r2, r1, #524288	; 0x80000
   13794:	bne	13bc8 <__assert_fail@plt+0x2824>
   13798:	movw	r0, #43468	; 0xa9cc
   1379c:	mov	r1, r2
   137a0:	movt	r0, #1
   137a4:	bl	19a30 <__assert_fail@plt+0x868c>
   137a8:	b	13bd8 <__assert_fail@plt+0x2834>
   137ac:	mov	r5, r6
   137b0:	b	13c4c <__assert_fail@plt+0x28a8>
   137b4:	tst	r0, #64	; 0x40
   137b8:	beq	137d4 <__assert_fail@plt+0x2430>
   137bc:	ldrd	r2, [r4, #16]
   137c0:	ldrd	r8, [r6, #64]	; 0x40
   137c4:	eor	r1, r9, r3
   137c8:	eor	r2, r8, r2
   137cc:	orrs	r1, r2, r1
   137d0:	bne	136cc <__assert_fail@plt+0x2328>
   137d4:	ldr	r5, [r4, #4]
   137d8:	cmp	r5, #0
   137dc:	beq	13938 <__assert_fail@plt+0x2594>
   137e0:	tst	r0, #4096	; 0x1000
   137e4:	bne	138f8 <__assert_fail@plt+0x2554>
   137e8:	ldr	r3, [r6, #24]
   137ec:	mov	r0, r4
   137f0:	mov	r1, r6
   137f4:	mvn	r2, #0
   137f8:	bl	13e34 <__assert_fail@plt+0x2a90>
   137fc:	cmp	r0, #0
   13800:	beq	13950 <__assert_fail@plt+0x25ac>
   13804:	bl	11260 <__errno_location@plt>
   13808:	ldr	r0, [r0]
   1380c:	str	r0, [r6, #32]
   13810:	ldrh	r0, [r6, #58]	; 0x3a
   13814:	orr	r0, r0, #1
   13818:	strh	r0, [r6, #58]	; 0x3a
   1381c:	ldr	r0, [r4, #4]
   13820:	cmp	r0, #0
   13824:	beq	13950 <__assert_fail@plt+0x25ac>
   13828:	ldmib	r0, {r1, r2}
   1382c:	cmp	r2, #0
   13830:	ldr	r1, [r1, #24]
   13834:	str	r1, [r0, #24]
   13838:	mov	r0, r2
   1383c:	bne	13828 <__assert_fail@plt+0x2484>
   13840:	b	13950 <__assert_fail@plt+0x25ac>
   13844:	mov	r0, #0
   13848:	str	r0, [r4, #4]
   1384c:	mov	r0, #6
   13850:	strh	r0, [r6, #56]	; 0x38
   13854:	mov	r0, r4
   13858:	mov	r1, r6
   1385c:	bl	13d58 <__assert_fail@plt+0x29b4>
   13860:	mov	r5, r6
   13864:	b	13d48 <__assert_fail@plt+0x29a4>
   13868:	ldr	r5, [r6, #4]
   1386c:	ldr	r0, [r5, #12]
   13870:	cmp	r0, #0
   13874:	beq	139d0 <__assert_fail@plt+0x262c>
   13878:	str	r5, [r4]
   1387c:	ldr	r1, [r5, #40]	; 0x28
   13880:	ldr	r0, [r4, #24]
   13884:	mov	r5, #0
   13888:	strb	r5, [r0, r1]
   1388c:	mov	r0, r4
   13890:	mov	r1, #3
   13894:	bl	14094 <__assert_fail@plt+0x2cf0>
   13898:	cmp	r0, #0
   1389c:	beq	139c0 <__assert_fail@plt+0x261c>
   138a0:	mov	r7, r0
   138a4:	mov	r0, r6
   138a8:	bl	19ac8 <__assert_fail@plt+0x8724>
   138ac:	mov	r5, r7
   138b0:	b	13c10 <__assert_fail@plt+0x286c>
   138b4:	mov	r0, r4
   138b8:	bl	14b24 <__assert_fail@plt+0x3780>
   138bc:	ldr	r1, [r4, #48]	; 0x30
   138c0:	cmp	r0, #0
   138c4:	beq	138d8 <__assert_fail@plt+0x2534>
   138c8:	orr	r0, r1, #8192	; 0x2000
   138cc:	mov	r5, #0
   138d0:	str	r0, [r4, #48]	; 0x30
   138d4:	b	13d48 <__assert_fail@plt+0x29a4>
   138d8:	movw	r0, #258	; 0x102
   138dc:	tst	r1, r0
   138e0:	beq	13a80 <__assert_fail@plt+0x26dc>
   138e4:	ldr	r0, [r4, #56]	; 0x38
   138e8:	cmp	r0, #0
   138ec:	beq	13a88 <__assert_fail@plt+0x26e4>
   138f0:	bl	15840 <__assert_fail@plt+0x449c>
   138f4:	b	13a88 <__assert_fail@plt+0x26e4>
   138f8:	bic	r0, r0, #4096	; 0x1000
   138fc:	str	r0, [r4, #48]	; 0x30
   13900:	b	13918 <__assert_fail@plt+0x2574>
   13904:	mov	r0, r5
   13908:	bl	19ac8 <__assert_fail@plt+0x8724>
   1390c:	cmp	r8, #0
   13910:	mov	r5, r8
   13914:	beq	13930 <__assert_fail@plt+0x258c>
   13918:	ldrd	r8, [r5, #8]
   1391c:	cmp	r9, #0
   13920:	beq	13904 <__assert_fail@plt+0x2560>
   13924:	mov	r0, r9
   13928:	bl	11398 <closedir@plt>
   1392c:	b	13904 <__assert_fail@plt+0x2560>
   13930:	mov	r0, #0
   13934:	str	r0, [r4, #4]
   13938:	mov	r0, r4
   1393c:	mov	r1, #3
   13940:	bl	14094 <__assert_fail@plt+0x2cf0>
   13944:	cmp	r0, #0
   13948:	str	r0, [r4, #4]
   1394c:	beq	13960 <__assert_fail@plt+0x25bc>
   13950:	ldr	r5, [r4, #4]
   13954:	mov	r0, #0
   13958:	str	r0, [r4, #4]
   1395c:	b	13c10 <__assert_fail@plt+0x286c>
   13960:	ldrb	r0, [r4, #49]	; 0x31
   13964:	mov	r5, #0
   13968:	tst	r0, #32
   1396c:	bne	13d48 <__assert_fail@plt+0x29a4>
   13970:	ldr	r0, [r6, #32]
   13974:	cmp	r0, #0
   13978:	beq	13854 <__assert_fail@plt+0x24b0>
   1397c:	ldrh	r0, [r6, #56]	; 0x38
   13980:	cmp	r0, #4
   13984:	beq	13854 <__assert_fail@plt+0x24b0>
   13988:	mov	r0, #7
   1398c:	b	13850 <__assert_fail@plt+0x24ac>
   13990:	ldr	r0, [r4, #32]
   13994:	movw	r1, #43468	; 0xa9cc
   13998:	movt	r1, #1
   1399c:	bl	169dc <__assert_fail@plt+0x5638>
   139a0:	cmn	r0, #1
   139a4:	str	r0, [r6, #36]	; 0x24
   139a8:	ble	13a64 <__assert_fail@plt+0x26c0>
   139ac:	ldrh	r0, [r6, #58]	; 0x3a
   139b0:	mov	r5, r6
   139b4:	orr	r0, r0, #2
   139b8:	strh	r0, [r6, #58]	; 0x3a
   139bc:	b	13c4c <__assert_fail@plt+0x28a8>
   139c0:	ldrb	r0, [r4, #49]	; 0x31
   139c4:	tst	r0, #32
   139c8:	bne	13d48 <__assert_fail@plt+0x29a4>
   139cc:	ldr	r5, [r6, #4]
   139d0:	mov	r0, r6
   139d4:	str	r5, [r4]
   139d8:	bl	19ac8 <__assert_fail@plt+0x8724>
   139dc:	ldr	r0, [r5, #48]	; 0x30
   139e0:	cmn	r0, #1
   139e4:	beq	13a48 <__assert_fail@plt+0x26a4>
   139e8:	ldrh	r0, [r5, #56]	; 0x38
   139ec:	cmp	r0, #11
   139f0:	beq	13d54 <__assert_fail@plt+0x29b0>
   139f4:	ldr	r0, [r5, #40]	; 0x28
   139f8:	ldr	r1, [r4, #24]
   139fc:	mov	r2, #0
   13a00:	strb	r2, [r1, r0]
   13a04:	ldr	r0, [r5, #48]	; 0x30
   13a08:	cmp	r0, #0
   13a0c:	beq	13b58 <__assert_fail@plt+0x27b4>
   13a10:	ldrh	r0, [r5, #58]	; 0x3a
   13a14:	tst	r0, #2
   13a18:	bne	13b84 <__assert_fail@plt+0x27e0>
   13a1c:	tst	r0, #1
   13a20:	bne	13d0c <__assert_fail@plt+0x2968>
   13a24:	ldr	r1, [r5, #4]
   13a28:	movw	r3, #43467	; 0xa9cb
   13a2c:	mov	r0, r4
   13a30:	mvn	r2, #0
   13a34:	movt	r3, #1
   13a38:	bl	13e34 <__assert_fail@plt+0x2a90>
   13a3c:	cmp	r0, #0
   13a40:	bne	13b68 <__assert_fail@plt+0x27c4>
   13a44:	b	13d0c <__assert_fail@plt+0x2968>
   13a48:	mov	r0, r5
   13a4c:	bl	19ac8 <__assert_fail@plt+0x8724>
   13a50:	bl	11260 <__errno_location@plt>
   13a54:	mov	r5, #0
   13a58:	str	r5, [r0]
   13a5c:	str	r5, [r4]
   13a60:	b	13d48 <__assert_fail@plt+0x29a4>
   13a64:	bl	11260 <__errno_location@plt>
   13a68:	ldr	r0, [r0]
   13a6c:	mov	r1, #7
   13a70:	mov	r5, r6
   13a74:	strh	r1, [r6, #56]	; 0x38
   13a78:	str	r0, [r6, #32]
   13a7c:	b	13c4c <__assert_fail@plt+0x28a8>
   13a80:	ldr	r0, [r4, #56]	; 0x38
   13a84:	bl	19ac8 <__assert_fail@plt+0x8724>
   13a88:	ldr	r1, [r5, #52]	; 0x34
   13a8c:	add	r6, r5, #168	; 0xa8
   13a90:	str	r1, [r5, #40]	; 0x28
   13a94:	add	r2, r1, #1
   13a98:	mov	r1, r6
   13a9c:	ldr	r0, [r4, #24]
   13aa0:	bl	11104 <memmove@plt>
   13aa4:	mov	r0, r6
   13aa8:	mov	r1, #47	; 0x2f
   13aac:	bl	112e4 <strrchr@plt>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13af0 <__assert_fail@plt+0x274c>
   13ab8:	cmp	r0, r6
   13abc:	bne	13acc <__assert_fail@plt+0x2728>
   13ac0:	ldrb	r1, [r5, #169]	; 0xa9
   13ac4:	cmp	r1, #0
   13ac8:	beq	13af0 <__assert_fail@plt+0x274c>
   13acc:	add	r7, r0, #1
   13ad0:	mov	r0, r7
   13ad4:	bl	1123c <strlen@plt>
   13ad8:	mov	r8, r0
   13adc:	add	r2, r0, #1
   13ae0:	mov	r0, r6
   13ae4:	mov	r1, r7
   13ae8:	bl	11104 <memmove@plt>
   13aec:	str	r8, [r5, #52]	; 0x34
   13af0:	ldr	r0, [r4, #24]
   13af4:	movw	r1, #258	; 0x102
   13af8:	str	r0, [r5, #24]
   13afc:	str	r0, [r5, #28]
   13b00:	ldrh	r0, [r4, #48]	; 0x30
   13b04:	tst	r0, r1
   13b08:	beq	13b3c <__assert_fail@plt+0x2798>
   13b0c:	movw	r0, #39624	; 0x9ac8
   13b10:	movw	r2, #20108	; 0x4e8c
   13b14:	movw	r3, #20140	; 0x4eac
   13b18:	mov	r1, #0
   13b1c:	movt	r0, #1
   13b20:	movt	r2, #1
   13b24:	movt	r3, #1
   13b28:	str	r0, [sp]
   13b2c:	mov	r0, #31
   13b30:	bl	1553c <__assert_fail@plt+0x4198>
   13b34:	str	r0, [r4, #56]	; 0x38
   13b38:	b	13c4c <__assert_fail@plt+0x28a8>
   13b3c:	mov	r0, #32
   13b40:	bl	195bc <__assert_fail@plt+0x8218>
   13b44:	cmp	r0, #0
   13b48:	str	r0, [r4, #56]	; 0x38
   13b4c:	beq	13c4c <__assert_fail@plt+0x28a8>
   13b50:	bl	196c4 <__assert_fail@plt+0x8320>
   13b54:	b	13c4c <__assert_fail@plt+0x28a8>
   13b58:	mov	r0, r4
   13b5c:	bl	14b24 <__assert_fail@plt+0x3780>
   13b60:	cmp	r0, #0
   13b64:	beq	13d0c <__assert_fail@plt+0x2968>
   13b68:	bl	11260 <__errno_location@plt>
   13b6c:	ldr	r0, [r0]
   13b70:	str	r0, [r5, #32]
   13b74:	ldr	r0, [r4, #48]	; 0x30
   13b78:	orr	r0, r0, #8192	; 0x2000
   13b7c:	str	r0, [r4, #48]	; 0x30
   13b80:	b	13d0c <__assert_fail@plt+0x2968>
   13b84:	ldr	r0, [r4, #48]	; 0x30
   13b88:	tst	r0, #4
   13b8c:	bne	13d04 <__assert_fail@plt+0x2960>
   13b90:	ldr	r6, [r5, #36]	; 0x24
   13b94:	tst	r0, #512	; 0x200
   13b98:	bne	13cd8 <__assert_fail@plt+0x2934>
   13b9c:	mov	r0, r6
   13ba0:	bl	11320 <fchdir@plt>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13d04 <__assert_fail@plt+0x2960>
   13bac:	bl	11260 <__errno_location@plt>
   13bb0:	ldr	r0, [r0]
   13bb4:	str	r0, [r5, #32]
   13bb8:	ldr	r0, [r4, #48]	; 0x30
   13bbc:	orr	r0, r0, #8192	; 0x2000
   13bc0:	str	r0, [r4, #48]	; 0x30
   13bc4:	b	13d04 <__assert_fail@plt+0x2960>
   13bc8:	ldr	r0, [r4, #32]
   13bcc:	movw	r1, #43468	; 0xa9cc
   13bd0:	movt	r1, #1
   13bd4:	bl	169dc <__assert_fail@plt+0x5638>
   13bd8:	cmn	r0, #1
   13bdc:	str	r0, [r5, #36]	; 0x24
   13be0:	ble	13bf4 <__assert_fail@plt+0x2850>
   13be4:	ldrh	r0, [r5, #58]	; 0x3a
   13be8:	orr	r0, r0, #2
   13bec:	strh	r0, [r5, #58]	; 0x3a
   13bf0:	b	13c08 <__assert_fail@plt+0x2864>
   13bf4:	bl	11260 <__errno_location@plt>
   13bf8:	ldr	r0, [r0]
   13bfc:	mov	r1, #7
   13c00:	strh	r1, [r5, #56]	; 0x38
   13c04:	str	r0, [r5, #32]
   13c08:	mov	r0, #3
   13c0c:	strh	r0, [r5, #60]	; 0x3c
   13c10:	ldr	r0, [r5, #4]
   13c14:	ldr	r1, [r0, #28]
   13c18:	ldr	r0, [r0, #40]	; 0x28
   13c1c:	sub	r2, r0, #1
   13c20:	ldrb	r1, [r1, r2]
   13c24:	cmp	r1, #47	; 0x2f
   13c28:	ldr	r1, [r4, #24]
   13c2c:	moveq	r0, r2
   13c30:	mov	r2, #47	; 0x2f
   13c34:	strb	r2, [r1, r0]!
   13c38:	ldr	r2, [r5, #52]	; 0x34
   13c3c:	add	r0, r1, #1
   13c40:	add	r1, r5, #168	; 0xa8
   13c44:	add	r2, r2, #1
   13c48:	bl	11104 <memmove@plt>
   13c4c:	str	r5, [r4]
   13c50:	ldrh	r0, [r5, #56]	; 0x38
   13c54:	cmp	r0, #11
   13c58:	bne	13c90 <__assert_fail@plt+0x28ec>
   13c5c:	add	r0, r5, #112	; 0x70
   13c60:	ldrd	r0, [r0]
   13c64:	eor	r2, r0, #1
   13c68:	orrs	r2, r2, r1
   13c6c:	beq	13d48 <__assert_fail@plt+0x29a4>
   13c70:	eor	r0, r0, #2
   13c74:	orrs	r0, r0, r1
   13c78:	bne	13d54 <__assert_fail@plt+0x29b0>
   13c7c:	mov	r0, r4
   13c80:	mov	r1, r5
   13c84:	mov	r2, #0
   13c88:	bl	13180 <__assert_fail@plt+0x1ddc>
   13c8c:	strh	r0, [r5, #56]	; 0x38
   13c90:	cmp	r0, #1
   13c94:	bne	13d48 <__assert_fail@plt+0x29a4>
   13c98:	ldr	r0, [r5, #48]	; 0x30
   13c9c:	cmp	r0, #0
   13ca0:	bne	13cb0 <__assert_fail@plt+0x290c>
   13ca4:	add	r0, r5, #64	; 0x40
   13ca8:	ldrd	r0, [r0]
   13cac:	strd	r0, [r4, #16]
   13cb0:	mov	r0, r4
   13cb4:	mov	r1, r5
   13cb8:	bl	14bb4 <__assert_fail@plt+0x3810>
   13cbc:	cmp	r0, #0
   13cc0:	bne	13d48 <__assert_fail@plt+0x29a4>
   13cc4:	bl	11260 <__errno_location@plt>
   13cc8:	mov	r1, #12
   13ccc:	mov	r5, #0
   13cd0:	str	r1, [r0]
   13cd4:	b	13d48 <__assert_fail@plt+0x29a4>
   13cd8:	ldr	r1, [r4, #32]
   13cdc:	cmp	r1, r6
   13ce0:	bne	13cec <__assert_fail@plt+0x2948>
   13ce4:	cmn	r1, #100	; 0x64
   13ce8:	bne	13d54 <__assert_fail@plt+0x29b0>
   13cec:	add	r0, r4, #60	; 0x3c
   13cf0:	bl	163a4 <__assert_fail@plt+0x5000>
   13cf4:	cmp	r0, #0
   13cf8:	bmi	13d00 <__assert_fail@plt+0x295c>
   13cfc:	bl	11380 <close@plt>
   13d00:	str	r6, [r4, #32]
   13d04:	ldr	r0, [r5, #36]	; 0x24
   13d08:	bl	11380 <close@plt>
   13d0c:	ldrh	r0, [r5, #56]	; 0x38
   13d10:	cmp	r0, #2
   13d14:	beq	13d3c <__assert_fail@plt+0x2998>
   13d18:	ldr	r0, [r5, #32]
   13d1c:	mov	r1, #7
   13d20:	cmp	r0, #0
   13d24:	movweq	r1, #6
   13d28:	strh	r1, [r5, #56]	; 0x38
   13d2c:	bne	13d3c <__assert_fail@plt+0x2998>
   13d30:	mov	r0, r4
   13d34:	mov	r1, r5
   13d38:	bl	13d58 <__assert_fail@plt+0x29b4>
   13d3c:	ldrb	r0, [r4, #49]	; 0x31
   13d40:	tst	r0, #32
   13d44:	movne	r5, #0
   13d48:	mov	r0, r5
   13d4c:	sub	sp, fp, #24
   13d50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d54:	bl	11374 <abort@plt>
   13d58:	push	{r4, r5, r7, sl, fp, lr}
   13d5c:	add	fp, sp, #16
   13d60:	sub	sp, sp, #24
   13d64:	ldrh	r2, [r0, #48]	; 0x30
   13d68:	movw	r3, #258	; 0x102
   13d6c:	add	lr, r1, #64	; 0x40
   13d70:	add	r4, r1, #160	; 0xa0
   13d74:	tst	r2, r3
   13d78:	beq	13db0 <__assert_fail@plt+0x2a0c>
   13d7c:	ldrd	r2, [lr]
   13d80:	mov	r1, sp
   13d84:	stm	sp, {r2, r3}
   13d88:	ldrd	r2, [r4]
   13d8c:	str	r3, [sp, #12]
   13d90:	str	r2, [sp, #8]
   13d94:	ldr	r0, [r0, #56]	; 0x38
   13d98:	bl	160d0 <__assert_fail@plt+0x4d2c>
   13d9c:	cmp	r0, #0
   13da0:	beq	13e30 <__assert_fail@plt+0x2a8c>
   13da4:	bl	19ac8 <__assert_fail@plt+0x8724>
   13da8:	sub	sp, fp, #16
   13dac:	pop	{r4, r5, r7, sl, fp, pc}
   13db0:	ldr	r1, [r1, #4]
   13db4:	cmp	r1, #0
   13db8:	beq	13e28 <__assert_fail@plt+0x2a84>
   13dbc:	ldr	r2, [r1, #48]	; 0x30
   13dc0:	cmp	r2, #0
   13dc4:	bmi	13e28 <__assert_fail@plt+0x2a84>
   13dc8:	ldr	ip, [r0, #56]	; 0x38
   13dcc:	ldrd	r2, [ip, #16]
   13dd0:	orrs	r2, r2, r3
   13dd4:	beq	13e30 <__assert_fail@plt+0x2a8c>
   13dd8:	ldrd	r2, [r4]
   13ddc:	ldrd	r4, [ip]
   13de0:	eor	r3, r5, r3
   13de4:	eor	r2, r4, r2
   13de8:	orrs	r2, r2, r3
   13dec:	bne	13e28 <__assert_fail@plt+0x2a84>
   13df0:	add	r3, ip, #8
   13df4:	ldm	lr, {r2, r5}
   13df8:	ldm	r3, {r4, r7}
   13dfc:	eor	r7, r7, r5
   13e00:	eor	r2, r4, r2
   13e04:	orrs	r2, r2, r7
   13e08:	bne	13e28 <__assert_fail@plt+0x2a84>
   13e0c:	add	r2, r1, #64	; 0x40
   13e10:	add	r1, r1, #160	; 0xa0
   13e14:	ldm	r2, {r2, r5}
   13e18:	stm	r3, {r2, r5}
   13e1c:	ldr	r0, [r0, #56]	; 0x38
   13e20:	ldrd	r2, [r1]
   13e24:	strd	r2, [r0]
   13e28:	sub	sp, fp, #16
   13e2c:	pop	{r4, r5, r7, sl, fp, pc}
   13e30:	bl	11374 <abort@plt>
   13e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e38:	add	fp, sp, #28
   13e3c:	sub	sp, sp, #108	; 0x6c
   13e40:	mov	r7, r3
   13e44:	mov	r4, r2
   13e48:	mov	r8, r1
   13e4c:	mov	sl, r0
   13e50:	cmp	r3, #0
   13e54:	beq	13e78 <__assert_fail@plt+0x2ad4>
   13e58:	movw	r1, #43467	; 0xa9cb
   13e5c:	mov	r0, r7
   13e60:	movt	r1, #1
   13e64:	bl	110ec <strcmp@plt>
   13e68:	cmp	r0, #0
   13e6c:	mov	r6, r0
   13e70:	movwne	r6, #1
   13e74:	b	13e7c <__assert_fail@plt+0x2ad8>
   13e78:	mov	r6, #1
   13e7c:	ldr	r0, [sl, #48]	; 0x30
   13e80:	tst	r0, #4
   13e84:	bne	13edc <__assert_fail@plt+0x2b38>
   13e88:	cmn	r4, #1
   13e8c:	mov	r1, #0
   13e90:	mov	r9, #0
   13e94:	movwgt	r1, #1
   13e98:	orrs	r1, r1, r6
   13e9c:	bne	13efc <__assert_fail@plt+0x2b58>
   13ea0:	ands	r0, r0, #512	; 0x200
   13ea4:	beq	13efc <__assert_fail@plt+0x2b58>
   13ea8:	add	r4, sl, #60	; 0x3c
   13eac:	mov	r0, r4
   13eb0:	bl	1639c <__assert_fail@plt+0x4ff8>
   13eb4:	cmp	r0, #0
   13eb8:	bne	13f04 <__assert_fail@plt+0x2b60>
   13ebc:	mov	r0, r4
   13ec0:	bl	163f0 <__assert_fail@plt+0x504c>
   13ec4:	cmn	r0, #1
   13ec8:	ble	13f04 <__assert_fail@plt+0x2b60>
   13ecc:	mov	r4, r0
   13ed0:	mov	r9, #0
   13ed4:	mov	r7, #0
   13ed8:	b	13f4c <__assert_fail@plt+0x2ba8>
   13edc:	mov	r5, #0
   13ee0:	cmp	r4, #0
   13ee4:	bmi	14084 <__assert_fail@plt+0x2ce0>
   13ee8:	ands	r0, r0, #512	; 0x200
   13eec:	beq	14084 <__assert_fail@plt+0x2ce0>
   13ef0:	mov	r0, r4
   13ef4:	bl	11380 <close@plt>
   13ef8:	b	14084 <__assert_fail@plt+0x2ce0>
   13efc:	cmn	r4, #1
   13f00:	bgt	13f4c <__assert_fail@plt+0x2ba8>
   13f04:	ldr	r0, [sl, #48]	; 0x30
   13f08:	mov	r1, #32768	; 0x8000
   13f0c:	and	r1, r1, r0, lsl #11
   13f10:	tst	r0, #512	; 0x200
   13f14:	orr	r1, r1, #18688	; 0x4900
   13f18:	orr	r2, r1, #524288	; 0x80000
   13f1c:	bne	13f30 <__assert_fail@plt+0x2b8c>
   13f20:	mov	r0, r7
   13f24:	mov	r1, r2
   13f28:	bl	19a30 <__assert_fail@plt+0x868c>
   13f2c:	b	13f3c <__assert_fail@plt+0x2b98>
   13f30:	ldr	r0, [sl, #32]
   13f34:	mov	r1, r7
   13f38:	bl	169dc <__assert_fail@plt+0x5638>
   13f3c:	mov	r4, r0
   13f40:	mov	r9, #1
   13f44:	cmp	r0, #0
   13f48:	bmi	14028 <__assert_fail@plt+0x2c84>
   13f4c:	ldr	r5, [sl, #48]	; 0x30
   13f50:	tst	r5, #2
   13f54:	bne	13f98 <__assert_fail@plt+0x2bf4>
   13f58:	cmp	r7, #0
   13f5c:	beq	13f78 <__assert_fail@plt+0x2bd4>
   13f60:	movw	r1, #43467	; 0xa9cb
   13f64:	mov	r0, r7
   13f68:	movt	r1, #1
   13f6c:	bl	110ec <strcmp@plt>
   13f70:	cmp	r0, #0
   13f74:	beq	13f98 <__assert_fail@plt+0x2bf4>
   13f78:	tst	r5, #512	; 0x200
   13f7c:	bne	13ff8 <__assert_fail@plt+0x2c54>
   13f80:	mov	r0, r4
   13f84:	bl	11320 <fchdir@plt>
   13f88:	mov	r5, r0
   13f8c:	cmp	r9, #0
   13f90:	bne	14048 <__assert_fail@plt+0x2ca4>
   13f94:	b	14084 <__assert_fail@plt+0x2ce0>
   13f98:	mov	r2, sp
   13f9c:	mov	r0, #3
   13fa0:	mov	r1, r4
   13fa4:	bl	1117c <__fxstat64@plt>
   13fa8:	cmp	r0, #0
   13fac:	bne	1403c <__assert_fail@plt+0x2c98>
   13fb0:	add	r0, r8, #64	; 0x40
   13fb4:	ldm	sp, {r2, r3}
   13fb8:	ldrd	r0, [r0]
   13fbc:	eor	r1, r1, r3
   13fc0:	eor	r0, r0, r2
   13fc4:	orrs	r0, r0, r1
   13fc8:	bne	14030 <__assert_fail@plt+0x2c8c>
   13fcc:	add	r0, r8, #160	; 0xa0
   13fd0:	ldr	r2, [sp, #96]	; 0x60
   13fd4:	ldr	r3, [sp, #100]	; 0x64
   13fd8:	ldrd	r0, [r0]
   13fdc:	eor	r1, r1, r3
   13fe0:	eor	r0, r0, r2
   13fe4:	orrs	r0, r0, r1
   13fe8:	bne	14030 <__assert_fail@plt+0x2c8c>
   13fec:	ldr	r5, [sl, #48]	; 0x30
   13ff0:	tst	r5, #512	; 0x200
   13ff4:	beq	13f80 <__assert_fail@plt+0x2bdc>
   13ff8:	ldr	r1, [sl, #32]
   13ffc:	cmp	r1, r4
   14000:	bne	1400c <__assert_fail@plt+0x2c68>
   14004:	cmn	r1, #100	; 0x64
   14008:	bne	14090 <__assert_fail@plt+0x2cec>
   1400c:	cmp	r6, #0
   14010:	beq	14064 <__assert_fail@plt+0x2cc0>
   14014:	add	r0, sl, #60	; 0x3c
   14018:	bl	163a4 <__assert_fail@plt+0x5000>
   1401c:	cmp	r0, #0
   14020:	bpl	14078 <__assert_fail@plt+0x2cd4>
   14024:	b	1407c <__assert_fail@plt+0x2cd8>
   14028:	mvn	r5, #0
   1402c:	b	14084 <__assert_fail@plt+0x2ce0>
   14030:	bl	11260 <__errno_location@plt>
   14034:	mov	r1, #2
   14038:	str	r1, [r0]
   1403c:	mvn	r5, #0
   14040:	cmp	r9, #0
   14044:	beq	14084 <__assert_fail@plt+0x2ce0>
   14048:	bl	11260 <__errno_location@plt>
   1404c:	ldr	r7, [r0]
   14050:	mov	r6, r0
   14054:	mov	r0, r4
   14058:	bl	11380 <close@plt>
   1405c:	str	r7, [r6]
   14060:	b	14084 <__assert_fail@plt+0x2ce0>
   14064:	tst	r5, #4
   14068:	bne	1407c <__assert_fail@plt+0x2cd8>
   1406c:	cmp	r1, #0
   14070:	bmi	1407c <__assert_fail@plt+0x2cd8>
   14074:	mov	r0, r1
   14078:	bl	11380 <close@plt>
   1407c:	str	r4, [sl, #32]
   14080:	mov	r5, #0
   14084:	mov	r0, r5
   14088:	sub	sp, fp, #28
   1408c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14090:	bl	11374 <abort@plt>
   14094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14098:	add	fp, sp, #28
   1409c:	sub	sp, sp, #68	; 0x44
   140a0:	ldr	sl, [r0]
   140a4:	mov	r7, r1
   140a8:	mov	r5, r0
   140ac:	str	r0, [sp, #48]	; 0x30
   140b0:	ldr	r4, [sl, #12]
   140b4:	cmp	r4, #0
   140b8:	beq	14100 <__assert_fail@plt+0x2d5c>
   140bc:	mov	r0, r4
   140c0:	bl	11314 <dirfd@plt>
   140c4:	cmn	r0, #1
   140c8:	str	r0, [fp, #-32]	; 0xffffffe0
   140cc:	ble	14134 <__assert_fail@plt+0x2d90>
   140d0:	mov	r1, r5
   140d4:	str	r4, [sp, #12]
   140d8:	str	r7, [sp, #4]
   140dc:	mov	ip, #0
   140e0:	ldr	r0, [r1, #44]!	; 0x2c
   140e4:	str	r1, [sp, #20]
   140e8:	mvn	r1, #0
   140ec:	cmp	r0, #0
   140f0:	movweq	r1, #34464	; 0x86a0
   140f4:	movteq	r1, #1
   140f8:	str	r1, [sp, #32]
   140fc:	b	14384 <__assert_fail@plt+0x2fe0>
   14100:	ldr	r3, [r5, #48]	; 0x30
   14104:	mvn	r0, #99	; 0x63
   14108:	mov	r2, #0
   1410c:	and	r1, r3, #516	; 0x204
   14110:	cmp	r1, #512	; 0x200
   14114:	ldr	r1, [sl, #24]
   14118:	ldreq	r0, [r5, #32]
   1411c:	tst	r3, #16
   14120:	beq	1415c <__assert_fail@plt+0x2db8>
   14124:	tst	r3, #1
   14128:	bne	14150 <__assert_fail@plt+0x2dac>
   1412c:	mov	r2, #32768	; 0x8000
   14130:	b	1415c <__assert_fail@plt+0x2db8>
   14134:	ldr	r0, [sl, #12]
   14138:	bl	11398 <closedir@plt>
   1413c:	mov	r6, #0
   14140:	str	r6, [sl, #12]
   14144:	cmp	r7, #3
   14148:	beq	141a0 <__assert_fail@plt+0x2dfc>
   1414c:	b	14b18 <__assert_fail@plt+0x3774>
   14150:	ldr	r3, [sl, #48]	; 0x30
   14154:	cmp	r3, #0
   14158:	movne	r2, #32768	; 0x8000
   1415c:	sub	r3, fp, #32
   14160:	bl	16a14 <__assert_fail@plt+0x5670>
   14164:	cmp	r0, #0
   14168:	str	r0, [sl, #12]
   1416c:	beq	14194 <__assert_fail@plt+0x2df0>
   14170:	ldrh	r0, [sl, #56]	; 0x38
   14174:	cmp	r0, #11
   14178:	bne	141b8 <__assert_fail@plt+0x2e14>
   1417c:	mov	r0, r5
   14180:	mov	r1, sl
   14184:	mov	r2, #0
   14188:	bl	13180 <__assert_fail@plt+0x1ddc>
   1418c:	strh	r0, [sl, #56]	; 0x38
   14190:	b	141f8 <__assert_fail@plt+0x2e54>
   14194:	mov	r6, #0
   14198:	cmp	r7, #3
   1419c:	bne	14b18 <__assert_fail@plt+0x3774>
   141a0:	mov	r0, #4
   141a4:	strh	r0, [sl, #56]	; 0x38
   141a8:	bl	11260 <__errno_location@plt>
   141ac:	ldr	r0, [r0]
   141b0:	str	r0, [sl, #32]
   141b4:	b	14b18 <__assert_fail@plt+0x3774>
   141b8:	ldrb	r0, [r5, #49]	; 0x31
   141bc:	tst	r0, #1
   141c0:	beq	141f8 <__assert_fail@plt+0x2e54>
   141c4:	mov	r0, r5
   141c8:	mov	r1, sl
   141cc:	bl	13d58 <__assert_fail@plt+0x29b4>
   141d0:	mov	r0, r5
   141d4:	mov	r1, sl
   141d8:	mov	r2, #0
   141dc:	mov	r6, #0
   141e0:	bl	13180 <__assert_fail@plt+0x1ddc>
   141e4:	mov	r0, r5
   141e8:	mov	r1, sl
   141ec:	bl	14bb4 <__assert_fail@plt+0x3810>
   141f0:	cmp	r0, #0
   141f4:	beq	1429c <__assert_fail@plt+0x2ef8>
   141f8:	mov	r1, r5
   141fc:	str	r7, [sp, #4]
   14200:	str	r4, [sp, #12]
   14204:	ldr	r0, [r1, #44]!	; 0x2c
   14208:	str	r1, [sp, #20]
   1420c:	mvn	r1, #0
   14210:	cmp	r0, #0
   14214:	movweq	r1, #34464	; 0x86a0
   14218:	movteq	r1, #1
   1421c:	cmp	r7, #2
   14220:	str	r1, [sp, #32]
   14224:	bne	14240 <__assert_fail@plt+0x2e9c>
   14228:	mov	ip, #1
   1422c:	cmp	r7, #3
   14230:	bne	14384 <__assert_fail@plt+0x2fe0>
   14234:	sub	r0, r7, #3
   14238:	mov	r5, #0
   1423c:	b	142c8 <__assert_fail@plt+0x2f24>
   14240:	ldr	r0, [r5, #48]	; 0x30
   14244:	and	r0, r0, #56	; 0x38
   14248:	cmp	r0, #24
   1424c:	bne	142c0 <__assert_fail@plt+0x2f1c>
   14250:	ldr	r0, [sl, #84]	; 0x54
   14254:	cmp	r0, #2
   14258:	bne	142c0 <__assert_fail@plt+0x2f1c>
   1425c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14260:	mov	r0, sl
   14264:	bl	14f2c <__assert_fail@plt+0x3b88>
   14268:	movw	r1, #26984	; 0x6968
   1426c:	cmp	r0, r1
   14270:	ble	142ac <__assert_fail@plt+0x2f08>
   14274:	movw	r1, #26985	; 0x6969
   14278:	cmp	r0, r1
   1427c:	movwne	r1, #16719	; 0x414f
   14280:	movtne	r1, #21318	; 0x5346
   14284:	cmpne	r0, r1
   14288:	beq	142c0 <__assert_fail@plt+0x2f1c>
   1428c:	movw	r1, #40864	; 0x9fa0
   14290:	cmp	r0, r1
   14294:	beq	142c0 <__assert_fail@plt+0x2f1c>
   14298:	b	14228 <__assert_fail@plt+0x2e84>
   1429c:	bl	11260 <__errno_location@plt>
   142a0:	mov	r1, #12
   142a4:	str	r1, [r0]
   142a8:	b	14b18 <__assert_fail@plt+0x3774>
   142ac:	movw	r1, #19778	; 0x4d42
   142b0:	movt	r1, #65363	; 0xff53
   142b4:	cmp	r0, r1
   142b8:	cmpne	r0, #0
   142bc:	bne	14228 <__assert_fail@plt+0x2e84>
   142c0:	sub	r0, r7, #3
   142c4:	mov	r5, #1
   142c8:	clz	r0, r0
   142cc:	lsr	r6, r0, #5
   142d0:	ldr	r0, [sp, #48]	; 0x30
   142d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   142d8:	ldrb	r0, [r0, #49]	; 0x31
   142dc:	tst	r0, #2
   142e0:	beq	142fc <__assert_fail@plt+0x2f58>
   142e4:	mov	r0, r2
   142e8:	movw	r1, #1030	; 0x406
   142ec:	mov	r2, #3
   142f0:	bl	19850 <__assert_fail@plt+0x84ac>
   142f4:	mov	r2, r0
   142f8:	str	r0, [fp, #-32]	; 0xffffffe0
   142fc:	cmp	r2, #0
   14300:	bmi	1431c <__assert_fail@plt+0x2f78>
   14304:	ldr	r0, [sp, #48]	; 0x30
   14308:	mov	r1, sl
   1430c:	mov	r3, #0
   14310:	bl	13e34 <__assert_fail@plt+0x2a90>
   14314:	cmp	r0, #0
   14318:	beq	1437c <__assert_fail@plt+0x2fd8>
   1431c:	and	r0, r6, r5
   14320:	cmp	r0, #1
   14324:	bne	14334 <__assert_fail@plt+0x2f90>
   14328:	bl	11260 <__errno_location@plt>
   1432c:	ldr	r0, [r0]
   14330:	str	r0, [sl, #32]
   14334:	ldrh	r0, [sl, #58]	; 0x3a
   14338:	orr	r0, r0, #1
   1433c:	strh	r0, [sl, #58]	; 0x3a
   14340:	ldr	r0, [sl, #12]
   14344:	bl	11398 <closedir@plt>
   14348:	ldr	r5, [sp, #48]	; 0x30
   1434c:	mov	r4, #0
   14350:	str	r4, [sl, #12]
   14354:	ldrb	r0, [r5, #49]	; 0x31
   14358:	tst	r0, #2
   1435c:	beq	14370 <__assert_fail@plt+0x2fcc>
   14360:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14364:	cmp	r0, #0
   14368:	bmi	14370 <__assert_fail@plt+0x2fcc>
   1436c:	bl	11380 <close@plt>
   14370:	mov	ip, #1
   14374:	str	r4, [sl, #12]
   14378:	b	14384 <__assert_fail@plt+0x2fe0>
   1437c:	ldr	r5, [sp, #48]	; 0x30
   14380:	mov	ip, #0
   14384:	ldr	r0, [sl, #40]	; 0x28
   14388:	ldr	r1, [sl, #28]
   1438c:	mov	r9, #0
   14390:	sub	r2, r0, #1
   14394:	ldrb	r1, [r1, r2]
   14398:	cmp	r1, #47	; 0x2f
   1439c:	ldrb	r1, [r5, #48]	; 0x30
   143a0:	moveq	r0, r2
   143a4:	tst	r1, #4
   143a8:	mov	r1, #0
   143ac:	str	r1, [sp, #40]	; 0x28
   143b0:	beq	143c8 <__assert_fail@plt+0x3024>
   143b4:	ldr	r1, [r5, #24]
   143b8:	mov	r2, #47	; 0x2f
   143bc:	strb	r2, [r1, r0]!
   143c0:	add	r1, r1, #1
   143c4:	str	r1, [sp, #40]	; 0x28
   143c8:	ldr	r6, [sl, #12]
   143cc:	add	r1, r0, #1
   143d0:	str	r1, [fp, #-44]	; 0xffffffd4
   143d4:	cmp	r6, #0
   143d8:	beq	14738 <__assert_fail@plt+0x3394>
   143dc:	ldr	r0, [sl, #48]	; 0x30
   143e0:	str	ip, [sp]
   143e4:	mov	r4, #0
   143e8:	add	r0, r0, #1
   143ec:	str	r0, [sp, #24]
   143f0:	ldr	r0, [r5, #36]	; 0x24
   143f4:	sub	r0, r0, r1
   143f8:	str	r0, [fp, #-36]	; 0xffffffdc
   143fc:	bl	11260 <__errno_location@plt>
   14400:	str	r0, [sp, #36]	; 0x24
   14404:	mov	r0, #0
   14408:	mov	r9, #0
   1440c:	mov	r7, #0
   14410:	str	sl, [sp, #28]
   14414:	str	r0, [sp, #44]	; 0x2c
   14418:	mov	r0, #0
   1441c:	str	r0, [sp, #8]
   14420:	mov	r0, #0
   14424:	str	r0, [sp, #16]
   14428:	ldr	r0, [sp, #36]	; 0x24
   1442c:	str	r4, [r0]
   14430:	mov	r0, r6
   14434:	bl	112fc <readdir64@plt>
   14438:	cmp	r0, #0
   1443c:	beq	14744 <__assert_fail@plt+0x33a0>
   14440:	mov	r8, r0
   14444:	ldrb	r0, [r5, #48]	; 0x30
   14448:	tst	r0, #32
   1444c:	bne	1447c <__assert_fail@plt+0x30d8>
   14450:	ldrb	r0, [r8, #19]
   14454:	cmp	r0, #46	; 0x2e
   14458:	bne	1447c <__assert_fail@plt+0x30d8>
   1445c:	ldrb	r0, [r8, #20]
   14460:	cmp	r0, #0
   14464:	beq	14714 <__assert_fail@plt+0x3370>
   14468:	cmp	r0, #46	; 0x2e
   1446c:	bne	1447c <__assert_fail@plt+0x30d8>
   14470:	ldrb	r0, [r8, #21]
   14474:	cmp	r0, #0
   14478:	beq	14714 <__assert_fail@plt+0x3370>
   1447c:	add	r4, r8, #19
   14480:	mov	r0, r4
   14484:	bl	1123c <strlen@plt>
   14488:	mov	r5, r0
   1448c:	add	r0, r0, #176	; 0xb0
   14490:	bic	r0, r0, #7
   14494:	bl	195bc <__assert_fail@plt+0x8218>
   14498:	mov	r6, r0
   1449c:	cmp	r0, #0
   144a0:	beq	14aa0 <__assert_fail@plt+0x36fc>
   144a4:	add	sl, r6, #168	; 0xa8
   144a8:	mov	r1, r4
   144ac:	mov	r2, r5
   144b0:	str	r7, [fp, #-40]	; 0xffffffd8
   144b4:	mov	r0, sl
   144b8:	bl	11128 <memcpy@plt>
   144bc:	ldr	r2, [sp, #48]	; 0x30
   144c0:	mov	r0, #0
   144c4:	mov	r1, #196608	; 0x30000
   144c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   144cc:	strb	r0, [sl, r5]
   144d0:	str	r5, [r6, #52]	; 0x34
   144d4:	str	r2, [r6, #44]	; 0x2c
   144d8:	add	r7, r5, r3
   144dc:	ldr	r4, [r2, #24]
   144e0:	str	r0, [r6, #12]
   144e4:	str	r0, [r6, #16]
   144e8:	str	r0, [r6, #20]
   144ec:	str	r1, [r6, #58]	; 0x3a
   144f0:	str	r4, [r6, #28]
   144f4:	str	r0, [r6, #32]
   144f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   144fc:	cmp	r5, r0
   14500:	bcs	14514 <__assert_fail@plt+0x3170>
   14504:	mov	r5, r2
   14508:	cmp	r7, r3
   1450c:	bcs	14584 <__assert_fail@plt+0x31e0>
   14510:	b	14990 <__assert_fail@plt+0x35ec>
   14514:	ldr	r1, [r2, #36]	; 0x24
   14518:	movw	r0, #257	; 0x101
   1451c:	mov	r5, r2
   14520:	add	r0, r7, r0
   14524:	adds	r1, r0, r1
   14528:	bcs	14a6c <__assert_fail@plt+0x36c8>
   1452c:	mov	r0, r4
   14530:	str	r1, [r5, #36]	; 0x24
   14534:	bl	195ec <__assert_fail@plt+0x8248>
   14538:	cmp	r0, #0
   1453c:	beq	14a8c <__assert_fail@plt+0x36e8>
   14540:	cmp	r0, r4
   14544:	str	r0, [r5, #24]
   14548:	beq	14570 <__assert_fail@plt+0x31cc>
   1454c:	ldrb	r1, [r5, #48]	; 0x30
   14550:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14554:	tst	r1, #4
   14558:	ldr	r1, [sp, #40]	; 0x28
   1455c:	addne	r1, r0, r3
   14560:	mov	r0, #1
   14564:	str	r1, [sp, #40]	; 0x28
   14568:	str	r0, [sp, #16]
   1456c:	b	14574 <__assert_fail@plt+0x31d0>
   14570:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14574:	ldr	r0, [r5, #36]	; 0x24
   14578:	sub	r0, r0, r3
   1457c:	cmp	r7, r3
   14580:	bcc	14990 <__assert_fail@plt+0x35ec>
   14584:	str	r0, [fp, #-36]	; 0xffffffdc
   14588:	ldr	r0, [sp, #24]
   1458c:	add	r4, r6, #112	; 0x70
   14590:	str	r0, [r6, #48]	; 0x30
   14594:	ldr	r0, [r5]
   14598:	str	r7, [r6, #40]	; 0x28
   1459c:	str	r0, [r6, #4]
   145a0:	ldrd	r0, [r8]
   145a4:	strd	r0, [r4, #48]	; 0x30
   145a8:	ldrb	r0, [r5, #48]	; 0x30
   145ac:	tst	r0, #4
   145b0:	bne	145bc <__assert_fail@plt+0x3218>
   145b4:	str	sl, [r6, #24]
   145b8:	b	145d8 <__assert_fail@plt+0x3234>
   145bc:	ldr	r0, [r6, #28]
   145c0:	ldr	r1, [r6, #52]	; 0x34
   145c4:	str	r0, [r6, #24]
   145c8:	ldr	r0, [sp, #40]	; 0x28
   145cc:	add	r2, r1, #1
   145d0:	mov	r1, sl
   145d4:	bl	11104 <memmove@plt>
   145d8:	ldr	r0, [r5, #44]	; 0x2c
   145dc:	ldr	r7, [fp, #-40]	; 0xffffffd8
   145e0:	ldr	r2, [r5, #48]	; 0x30
   145e4:	ldr	sl, [sp, #28]
   145e8:	cmp	r0, #0
   145ec:	beq	14610 <__assert_fail@plt+0x326c>
   145f0:	ands	r0, r2, #1024	; 0x400
   145f4:	bne	14610 <__assert_fail@plt+0x326c>
   145f8:	mov	r0, r5
   145fc:	mov	r1, r6
   14600:	mov	r2, #0
   14604:	bl	13180 <__assert_fail@plt+0x1ddc>
   14608:	strh	r0, [r6, #56]	; 0x38
   1460c:	b	14684 <__assert_fail@plt+0x32e0>
   14610:	ldrb	r3, [r8, #18]
   14614:	mov	r0, #0
   14618:	tst	r2, #8
   1461c:	mov	r1, #0
   14620:	beq	14644 <__assert_fail@plt+0x32a0>
   14624:	orr	r1, r3, #4
   14628:	cmp	r1, #4
   1462c:	mov	r1, #0
   14630:	beq	14644 <__assert_fail@plt+0x32a0>
   14634:	eor	r1, r3, #10
   14638:	and	r2, r2, #16
   1463c:	orrs	r1, r2, r1
   14640:	movwne	r1, #1
   14644:	mov	r2, #11
   14648:	strh	r2, [r6, #56]	; 0x38
   1464c:	sub	r2, r3, #1
   14650:	uxtb	r3, r2
   14654:	cmp	r3, #11
   14658:	bhi	1466c <__assert_fail@plt+0x32c8>
   1465c:	sxtb	r0, r2
   14660:	movw	r2, #43472	; 0xa9d0
   14664:	movt	r2, #1
   14668:	ldr	r0, [r2, r0, lsl #2]
   1466c:	cmp	r1, #0
   14670:	str	r0, [r6, #80]	; 0x50
   14674:	mov	r0, #2
   14678:	mov	r1, #0
   1467c:	movwne	r0, #1
   14680:	strd	r0, [r4]
   14684:	mov	r4, #0
   14688:	cmp	r9, #0
   1468c:	str	r4, [r6, #8]
   14690:	beq	146a0 <__assert_fail@plt+0x32fc>
   14694:	ldr	r0, [sp, #44]	; 0x2c
   14698:	str	r6, [r0, #8]
   1469c:	b	146a4 <__assert_fail@plt+0x3300>
   146a0:	mov	r9, r6
   146a4:	movw	r0, #10000	; 0x2710
   146a8:	cmp	r7, r0
   146ac:	bne	14700 <__assert_fail@plt+0x335c>
   146b0:	ldr	r0, [sp, #20]
   146b4:	ldr	r0, [r0]
   146b8:	cmp	r0, #0
   146bc:	bne	14700 <__assert_fail@plt+0x335c>
   146c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   146c4:	mov	r0, sl
   146c8:	bl	14f2c <__assert_fail@plt+0x3b88>
   146cc:	mov	r1, #0
   146d0:	str	r1, [sp, #8]
   146d4:	movw	r1, #19778	; 0x4d42
   146d8:	movt	r1, #65363	; 0xff53
   146dc:	cmp	r0, r1
   146e0:	movwne	r1, #26985	; 0x6969
   146e4:	cmpne	r0, r1
   146e8:	beq	14700 <__assert_fail@plt+0x335c>
   146ec:	movw	r1, #6548	; 0x1994
   146f0:	movt	r1, #258	; 0x102
   146f4:	cmp	r0, r1
   146f8:	movne	r0, #1
   146fc:	strne	r0, [sp, #8]
   14700:	ldr	r0, [sp, #32]
   14704:	add	r7, r7, #1
   14708:	cmp	r0, r7
   1470c:	bls	14720 <__assert_fail@plt+0x337c>
   14710:	str	r6, [sp, #44]	; 0x2c
   14714:	ldr	r6, [sl, #12]
   14718:	cmp	r6, #0
   1471c:	bne	14428 <__assert_fail@plt+0x3084>
   14720:	ldr	r0, [sp, #16]
   14724:	ldr	ip, [sp]
   14728:	ldr	r4, [sp, #8]
   1472c:	tst	r0, #1
   14730:	bne	14798 <__assert_fail@plt+0x33f4>
   14734:	b	14838 <__assert_fail@plt+0x3494>
   14738:	mov	r7, #0
   1473c:	mov	r4, #0
   14740:	b	14838 <__assert_fail@plt+0x3494>
   14744:	ldr	r0, [sp, #36]	; 0x24
   14748:	ldr	r0, [r0]
   1474c:	cmp	r0, #0
   14750:	beq	1476c <__assert_fail@plt+0x33c8>
   14754:	str	r0, [sl, #32]
   14758:	ldr	r0, [sp, #12]
   1475c:	orrs	r0, r0, r7
   14760:	mov	r0, #4
   14764:	movwne	r0, #7
   14768:	strh	r0, [sl, #56]	; 0x38
   1476c:	ldr	r0, [sl, #12]
   14770:	ldr	r4, [sp, #8]
   14774:	cmp	r0, #0
   14778:	beq	14788 <__assert_fail@plt+0x33e4>
   1477c:	bl	11398 <closedir@plt>
   14780:	mov	r0, #0
   14784:	str	r0, [sl, #12]
   14788:	ldr	r0, [sp, #16]
   1478c:	ldr	ip, [sp]
   14790:	tst	r0, #1
   14794:	beq	14838 <__assert_fail@plt+0x3494>
   14798:	ldr	r1, [r5, #4]
   1479c:	ldr	r0, [r5, #24]
   147a0:	cmp	r1, #0
   147a4:	bne	147bc <__assert_fail@plt+0x3418>
   147a8:	b	147e0 <__assert_fail@plt+0x343c>
   147ac:	str	r0, [r1, #28]
   147b0:	ldr	r1, [r1, #8]
   147b4:	cmp	r1, #0
   147b8:	beq	147e0 <__assert_fail@plt+0x343c>
   147bc:	ldr	r2, [r1, #24]
   147c0:	add	r3, r1, #168	; 0xa8
   147c4:	cmp	r2, r3
   147c8:	beq	147ac <__assert_fail@plt+0x3408>
   147cc:	ldr	r3, [r1, #28]
   147d0:	sub	r2, r2, r3
   147d4:	add	r2, r0, r2
   147d8:	str	r2, [r1, #24]
   147dc:	b	147ac <__assert_fail@plt+0x3408>
   147e0:	ldr	r1, [r9, #48]	; 0x30
   147e4:	cmp	r1, #0
   147e8:	bmi	14838 <__assert_fail@plt+0x3494>
   147ec:	mov	r1, r9
   147f0:	b	14814 <__assert_fail@plt+0x3470>
   147f4:	str	r0, [r1, #28]
   147f8:	ldr	r2, [r1, #8]
   147fc:	cmp	r2, #0
   14800:	ldreq	r2, [r1, #4]
   14804:	ldr	r1, [r2, #48]	; 0x30
   14808:	cmn	r1, #1
   1480c:	mov	r1, r2
   14810:	ble	14838 <__assert_fail@plt+0x3494>
   14814:	ldr	r2, [r1, #24]
   14818:	add	r3, r1, #168	; 0xa8
   1481c:	cmp	r2, r3
   14820:	beq	147f4 <__assert_fail@plt+0x3450>
   14824:	ldr	r3, [r1, #28]
   14828:	sub	r2, r2, r3
   1482c:	add	r2, r0, r2
   14830:	str	r2, [r1, #24]
   14834:	b	147f4 <__assert_fail@plt+0x3450>
   14838:	ldrb	r0, [r5, #48]	; 0x30
   1483c:	tst	r0, #4
   14840:	beq	1486c <__assert_fail@plt+0x34c8>
   14844:	ldr	r2, [sp, #40]	; 0x28
   14848:	ldr	r0, [r5, #36]	; 0x24
   1484c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14850:	cmp	r3, r0
   14854:	sub	r1, r2, #1
   14858:	mov	r0, #0
   1485c:	moveq	r2, r1
   14860:	cmp	r7, #0
   14864:	moveq	r2, r1
   14868:	strb	r0, [r2]
   1486c:	ldr	r0, [sp, #12]
   14870:	cmp	r0, #0
   14874:	movwne	r0, #1
   14878:	orrs	r0, r0, ip
   1487c:	beq	148e4 <__assert_fail@plt+0x3540>
   14880:	cmp	r7, #0
   14884:	bne	14924 <__assert_fail@plt+0x3580>
   14888:	ldr	r0, [sp, #4]
   1488c:	cmp	r0, #3
   14890:	bne	148a8 <__assert_fail@plt+0x3504>
   14894:	ldrh	r0, [sl, #56]	; 0x38
   14898:	cmp	r0, #4
   1489c:	cmpne	r0, #7
   148a0:	movne	r0, #6
   148a4:	strhne	r0, [sl, #56]	; 0x38
   148a8:	mov	r6, #0
   148ac:	cmp	r9, #0
   148b0:	bne	148cc <__assert_fail@plt+0x3528>
   148b4:	b	14b18 <__assert_fail@plt+0x3774>
   148b8:	mov	r0, r9
   148bc:	bl	19ac8 <__assert_fail@plt+0x8724>
   148c0:	cmp	r4, #0
   148c4:	mov	r9, r4
   148c8:	beq	14b18 <__assert_fail@plt+0x3774>
   148cc:	ldrd	r4, [r9, #8]
   148d0:	cmp	r5, #0
   148d4:	beq	148b8 <__assert_fail@plt+0x3514>
   148d8:	mov	r0, r5
   148dc:	bl	11398 <closedir@plt>
   148e0:	b	148b8 <__assert_fail@plt+0x3514>
   148e4:	ldr	r0, [sp, #4]
   148e8:	cmp	r0, #1
   148ec:	cmpne	r7, #0
   148f0:	bne	14924 <__assert_fail@plt+0x3580>
   148f4:	ldr	r0, [sl, #48]	; 0x30
   148f8:	cmp	r0, #0
   148fc:	beq	14a0c <__assert_fail@plt+0x3668>
   14900:	ldr	r1, [sl, #4]
   14904:	movw	r3, #43467	; 0xa9cb
   14908:	mov	r0, r5
   1490c:	mvn	r2, #0
   14910:	movt	r3, #1
   14914:	bl	13e34 <__assert_fail@plt+0x2a90>
   14918:	cmp	r0, #0
   1491c:	bne	14a1c <__assert_fail@plt+0x3678>
   14920:	b	14880 <__assert_fail@plt+0x34dc>
   14924:	tst	r4, #1
   14928:	beq	14958 <__assert_fail@plt+0x35b4>
   1492c:	movw	r0, #20212	; 0x4ef4
   14930:	mov	r1, r9
   14934:	mov	r2, r7
   14938:	movt	r0, #1
   1493c:	str	r0, [r5, #44]	; 0x2c
   14940:	mov	r0, r5
   14944:	bl	13318 <__assert_fail@plt+0x1f74>
   14948:	mov	r6, r0
   1494c:	mov	r0, #0
   14950:	str	r0, [r5, #44]	; 0x2c
   14954:	b	14b18 <__assert_fail@plt+0x3774>
   14958:	cmp	r7, #2
   1495c:	bcc	14988 <__assert_fail@plt+0x35e4>
   14960:	ldr	r0, [sp, #20]
   14964:	ldr	r0, [r0]
   14968:	cmp	r0, #0
   1496c:	beq	14988 <__assert_fail@plt+0x35e4>
   14970:	mov	r0, r5
   14974:	mov	r1, r9
   14978:	mov	r2, r7
   1497c:	bl	13318 <__assert_fail@plt+0x1f74>
   14980:	mov	r6, r0
   14984:	b	14b18 <__assert_fail@plt+0x3774>
   14988:	mov	r6, r9
   1498c:	b	14b18 <__assert_fail@plt+0x3774>
   14990:	mov	r0, r6
   14994:	bl	19ac8 <__assert_fail@plt+0x8724>
   14998:	ldr	r7, [sp, #28]
   1499c:	cmp	r9, #0
   149a0:	bne	149bc <__assert_fail@plt+0x3618>
   149a4:	b	149d4 <__assert_fail@plt+0x3630>
   149a8:	mov	r0, r9
   149ac:	bl	19ac8 <__assert_fail@plt+0x8724>
   149b0:	cmp	r4, #0
   149b4:	mov	r9, r4
   149b8:	beq	149d4 <__assert_fail@plt+0x3630>
   149bc:	ldrd	r4, [r9, #8]
   149c0:	cmp	r5, #0
   149c4:	beq	149a8 <__assert_fail@plt+0x3604>
   149c8:	mov	r0, r5
   149cc:	bl	11398 <closedir@plt>
   149d0:	b	149a8 <__assert_fail@plt+0x3604>
   149d4:	ldr	r0, [r7, #12]
   149d8:	bl	11398 <closedir@plt>
   149dc:	ldr	r1, [sp, #48]	; 0x30
   149e0:	mov	r0, #7
   149e4:	mov	r6, #0
   149e8:	strh	r0, [r7, #56]	; 0x38
   149ec:	str	r6, [r7, #12]
   149f0:	ldr	r0, [r1, #48]	; 0x30
   149f4:	orr	r0, r0, #8192	; 0x2000
   149f8:	str	r0, [r1, #48]	; 0x30
   149fc:	ldr	r1, [sp, #36]	; 0x24
   14a00:	mov	r0, #36	; 0x24
   14a04:	str	r0, [r1]
   14a08:	b	14b18 <__assert_fail@plt+0x3774>
   14a0c:	mov	r0, r5
   14a10:	bl	14b24 <__assert_fail@plt+0x3780>
   14a14:	cmp	r0, #0
   14a18:	beq	14880 <__assert_fail@plt+0x34dc>
   14a1c:	mov	r0, #7
   14a20:	mov	r6, #0
   14a24:	cmp	r9, #0
   14a28:	strh	r0, [sl, #56]	; 0x38
   14a2c:	ldr	r0, [r5, #48]	; 0x30
   14a30:	orr	r0, r0, #8192	; 0x2000
   14a34:	str	r0, [r5, #48]	; 0x30
   14a38:	bne	14a54 <__assert_fail@plt+0x36b0>
   14a3c:	b	14b18 <__assert_fail@plt+0x3774>
   14a40:	mov	r0, r9
   14a44:	bl	19ac8 <__assert_fail@plt+0x8724>
   14a48:	cmp	r4, #0
   14a4c:	mov	r9, r4
   14a50:	beq	14b18 <__assert_fail@plt+0x3774>
   14a54:	ldrd	r4, [r9, #8]
   14a58:	cmp	r5, #0
   14a5c:	beq	14a40 <__assert_fail@plt+0x369c>
   14a60:	mov	r0, r5
   14a64:	bl	11398 <closedir@plt>
   14a68:	b	14a40 <__assert_fail@plt+0x369c>
   14a6c:	mov	r0, r4
   14a70:	bl	19ac8 <__assert_fail@plt+0x8724>
   14a74:	ldr	r1, [sp, #36]	; 0x24
   14a78:	mov	r0, #0
   14a7c:	str	r0, [r5, #24]
   14a80:	mov	r0, #36	; 0x24
   14a84:	str	r0, [r1]
   14a88:	b	14a9c <__assert_fail@plt+0x36f8>
   14a8c:	ldr	r0, [r5, #24]
   14a90:	bl	19ac8 <__assert_fail@plt+0x8724>
   14a94:	mov	r0, #0
   14a98:	str	r0, [r5, #24]
   14a9c:	ldr	sl, [sp, #28]
   14aa0:	ldr	r0, [sp, #36]	; 0x24
   14aa4:	ldr	r4, [r0]
   14aa8:	mov	r0, r6
   14aac:	bl	19ac8 <__assert_fail@plt+0x8724>
   14ab0:	ldr	r5, [sp, #48]	; 0x30
   14ab4:	cmp	r9, #0
   14ab8:	bne	14ad4 <__assert_fail@plt+0x3730>
   14abc:	b	14aec <__assert_fail@plt+0x3748>
   14ac0:	mov	r0, r9
   14ac4:	bl	19ac8 <__assert_fail@plt+0x8724>
   14ac8:	cmp	r6, #0
   14acc:	mov	r9, r6
   14ad0:	beq	14aec <__assert_fail@plt+0x3748>
   14ad4:	ldrd	r6, [r9, #8]
   14ad8:	cmp	r7, #0
   14adc:	beq	14ac0 <__assert_fail@plt+0x371c>
   14ae0:	mov	r0, r7
   14ae4:	bl	11398 <closedir@plt>
   14ae8:	b	14ac0 <__assert_fail@plt+0x371c>
   14aec:	ldr	r0, [sl, #12]
   14af0:	bl	11398 <closedir@plt>
   14af4:	mov	r0, #7
   14af8:	mov	r6, #0
   14afc:	strh	r0, [sl, #56]	; 0x38
   14b00:	str	r6, [sl, #12]
   14b04:	ldr	r0, [r5, #48]	; 0x30
   14b08:	orr	r0, r0, #8192	; 0x2000
   14b0c:	str	r0, [r5, #48]	; 0x30
   14b10:	ldr	r0, [sp, #36]	; 0x24
   14b14:	str	r4, [r0]
   14b18:	mov	r0, r6
   14b1c:	sub	sp, fp, #28
   14b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b24:	push	{r4, r5, fp, lr}
   14b28:	add	fp, sp, #8
   14b2c:	mov	r5, r0
   14b30:	ldr	r0, [r0, #48]	; 0x30
   14b34:	mov	r4, #0
   14b38:	tst	r0, #4
   14b3c:	bne	14b80 <__assert_fail@plt+0x37dc>
   14b40:	tst	r0, #512	; 0x200
   14b44:	bne	14b60 <__assert_fail@plt+0x37bc>
   14b48:	ldr	r0, [r5, #28]
   14b4c:	bl	11320 <fchdir@plt>
   14b50:	cmp	r0, #0
   14b54:	mov	r4, r0
   14b58:	movwne	r4, #1
   14b5c:	b	14b80 <__assert_fail@plt+0x37dc>
   14b60:	ldr	r1, [r5, #32]
   14b64:	add	r0, r5, #60	; 0x3c
   14b68:	bl	163a4 <__assert_fail@plt+0x5000>
   14b6c:	cmp	r0, #0
   14b70:	bmi	14b78 <__assert_fail@plt+0x37d4>
   14b74:	bl	11380 <close@plt>
   14b78:	mvn	r0, #99	; 0x63
   14b7c:	str	r0, [r5, #32]
   14b80:	add	r5, r5, #60	; 0x3c
   14b84:	mov	r0, r5
   14b88:	bl	1639c <__assert_fail@plt+0x4ff8>
   14b8c:	cmp	r0, #0
   14b90:	bne	14bac <__assert_fail@plt+0x3808>
   14b94:	mov	r0, r5
   14b98:	bl	163f0 <__assert_fail@plt+0x504c>
   14b9c:	cmp	r0, #0
   14ba0:	bmi	14b84 <__assert_fail@plt+0x37e0>
   14ba4:	bl	11380 <close@plt>
   14ba8:	b	14b84 <__assert_fail@plt+0x37e0>
   14bac:	mov	r0, r4
   14bb0:	pop	{r4, r5, fp, pc}
   14bb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bb8:	add	fp, sp, #24
   14bbc:	mov	r6, r0
   14bc0:	ldrh	r0, [r0, #48]	; 0x30
   14bc4:	mov	r4, r1
   14bc8:	add	r5, r1, #64	; 0x40
   14bcc:	movw	r1, #258	; 0x102
   14bd0:	tst	r0, r1
   14bd4:	beq	14c4c <__assert_fail@plt+0x38a8>
   14bd8:	mov	r0, #24
   14bdc:	bl	195bc <__assert_fail@plt+0x8218>
   14be0:	mov	r8, #0
   14be4:	cmp	r0, #0
   14be8:	beq	14c6c <__assert_fail@plt+0x38c8>
   14bec:	ldrd	r2, [r5]
   14bf0:	mov	r7, r0
   14bf4:	add	r0, r4, #160	; 0xa0
   14bf8:	stm	r7, {r2, r3}
   14bfc:	add	r2, r7, #8
   14c00:	ldrd	r0, [r0]
   14c04:	stm	r2, {r0, r1, r4}
   14c08:	mov	r1, r7
   14c0c:	ldr	r0, [r6, #56]	; 0x38
   14c10:	bl	16090 <__assert_fail@plt+0x4cec>
   14c14:	cmp	r0, r7
   14c18:	beq	14c40 <__assert_fail@plt+0x389c>
   14c1c:	mov	r5, r0
   14c20:	mov	r0, r7
   14c24:	bl	19ac8 <__assert_fail@plt+0x8724>
   14c28:	cmp	r5, #0
   14c2c:	beq	14c6c <__assert_fail@plt+0x38c8>
   14c30:	ldr	r0, [r5, #16]
   14c34:	mov	r1, #2
   14c38:	strh	r1, [r4, #56]	; 0x38
   14c3c:	str	r0, [r4]
   14c40:	mov	r8, #1
   14c44:	mov	r0, r8
   14c48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c4c:	ldr	r0, [r6, #56]	; 0x38
   14c50:	mov	r1, r5
   14c54:	bl	196e0 <__assert_fail@plt+0x833c>
   14c58:	cmp	r0, #0
   14c5c:	mov	r8, #1
   14c60:	movne	r0, #2
   14c64:	strhne	r0, [r4, #56]	; 0x38
   14c68:	strne	r4, [r4]
   14c6c:	mov	r0, r8
   14c70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c74:	push	{fp, lr}
   14c78:	mov	fp, sp
   14c7c:	cmp	r2, #5
   14c80:	bcc	14c98 <__assert_fail@plt+0x38f4>
   14c84:	bl	11260 <__errno_location@plt>
   14c88:	mov	r1, #22
   14c8c:	str	r1, [r0]
   14c90:	mov	r0, #1
   14c94:	pop	{fp, pc}
   14c98:	mov	r0, #0
   14c9c:	strh	r2, [r1, #60]	; 0x3c
   14ca0:	pop	{fp, pc}
   14ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ca8:	add	fp, sp, #28
   14cac:	sub	sp, sp, #4
   14cb0:	mov	r9, r0
   14cb4:	mvn	r0, #4096	; 0x1000
   14cb8:	tst	r1, r0
   14cbc:	beq	14cd4 <__assert_fail@plt+0x3930>
   14cc0:	bl	11260 <__errno_location@plt>
   14cc4:	mov	r1, #22
   14cc8:	mov	r5, #0
   14ccc:	str	r1, [r0]
   14cd0:	b	14dd4 <__assert_fail@plt+0x3a30>
   14cd4:	ldr	r8, [r9]
   14cd8:	mov	r7, r1
   14cdc:	bl	11260 <__errno_location@plt>
   14ce0:	mov	r5, #0
   14ce4:	mov	sl, r0
   14ce8:	str	r5, [r0]
   14cec:	ldrb	r0, [r9, #49]	; 0x31
   14cf0:	tst	r0, #32
   14cf4:	bne	14dd4 <__assert_fail@plt+0x3a30>
   14cf8:	ldrh	r0, [r8, #56]	; 0x38
   14cfc:	cmp	r0, #1
   14d00:	beq	14d10 <__assert_fail@plt+0x396c>
   14d04:	cmp	r0, #9
   14d08:	ldreq	r5, [r8, #8]
   14d0c:	b	14dd4 <__assert_fail@plt+0x3a30>
   14d10:	ldr	r6, [r9, #4]
   14d14:	cmp	r6, #0
   14d18:	bne	14d34 <__assert_fail@plt+0x3990>
   14d1c:	b	14d50 <__assert_fail@plt+0x39ac>
   14d20:	mov	r0, r6
   14d24:	bl	19ac8 <__assert_fail@plt+0x8724>
   14d28:	cmp	r4, #0
   14d2c:	mov	r6, r4
   14d30:	beq	14d50 <__assert_fail@plt+0x39ac>
   14d34:	ldr	r1, [r6, #12]
   14d38:	ldr	r4, [r6, #8]
   14d3c:	cmp	r1, #0
   14d40:	beq	14d20 <__assert_fail@plt+0x397c>
   14d44:	mov	r0, r1
   14d48:	bl	11398 <closedir@plt>
   14d4c:	b	14d20 <__assert_fail@plt+0x397c>
   14d50:	mov	r4, #1
   14d54:	cmp	r7, #4096	; 0x1000
   14d58:	bne	14d6c <__assert_fail@plt+0x39c8>
   14d5c:	ldr	r0, [r9, #48]	; 0x30
   14d60:	mov	r4, #2
   14d64:	orr	r0, r0, #4096	; 0x1000
   14d68:	str	r0, [r9, #48]	; 0x30
   14d6c:	ldr	r0, [r8, #48]	; 0x30
   14d70:	cmp	r0, #0
   14d74:	bne	14dc0 <__assert_fail@plt+0x3a1c>
   14d78:	ldr	r0, [r8, #24]
   14d7c:	ldrb	r0, [r0]
   14d80:	cmp	r0, #47	; 0x2f
   14d84:	beq	14dc0 <__assert_fail@plt+0x3a1c>
   14d88:	ldr	r0, [r9, #48]	; 0x30
   14d8c:	tst	r0, #4
   14d90:	bne	14dc0 <__assert_fail@plt+0x3a1c>
   14d94:	mov	r1, #32768	; 0x8000
   14d98:	tst	r0, #512	; 0x200
   14d9c:	and	r1, r1, r0, lsl #11
   14da0:	orr	r1, r1, #18688	; 0x4900
   14da4:	orr	r2, r1, #524288	; 0x80000
   14da8:	bne	14de0 <__assert_fail@plt+0x3a3c>
   14dac:	movw	r0, #43468	; 0xa9cc
   14db0:	mov	r1, r2
   14db4:	movt	r0, #1
   14db8:	bl	19a30 <__assert_fail@plt+0x868c>
   14dbc:	b	14df0 <__assert_fail@plt+0x3a4c>
   14dc0:	mov	r0, r9
   14dc4:	mov	r1, r4
   14dc8:	bl	14094 <__assert_fail@plt+0x2cf0>
   14dcc:	mov	r5, r0
   14dd0:	str	r0, [r9, #4]
   14dd4:	mov	r0, r5
   14dd8:	sub	sp, fp, #28
   14ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de0:	ldr	r0, [r9, #32]
   14de4:	movw	r1, #43468	; 0xa9cc
   14de8:	movt	r1, #1
   14dec:	bl	169dc <__assert_fail@plt+0x5638>
   14df0:	mov	r8, r0
   14df4:	cmn	r0, #1
   14df8:	ble	14e3c <__assert_fail@plt+0x3a98>
   14dfc:	mov	r0, r9
   14e00:	mov	r1, r4
   14e04:	bl	14094 <__assert_fail@plt+0x2cf0>
   14e08:	str	r0, [r9, #4]
   14e0c:	ldrb	r0, [r9, #49]	; 0x31
   14e10:	tst	r0, #2
   14e14:	bne	14e48 <__assert_fail@plt+0x3aa4>
   14e18:	mov	r0, r8
   14e1c:	bl	11320 <fchdir@plt>
   14e20:	cmp	r0, #0
   14e24:	beq	14e78 <__assert_fail@plt+0x3ad4>
   14e28:	ldr	r4, [sl]
   14e2c:	mov	r0, r8
   14e30:	bl	11380 <close@plt>
   14e34:	str	r4, [sl]
   14e38:	b	14dd4 <__assert_fail@plt+0x3a30>
   14e3c:	mov	r5, #0
   14e40:	str	r5, [r9, #4]
   14e44:	b	14dd4 <__assert_fail@plt+0x3a30>
   14e48:	ldr	r1, [r9, #32]
   14e4c:	cmp	r1, r8
   14e50:	bne	14e5c <__assert_fail@plt+0x3ab8>
   14e54:	cmn	r1, #100	; 0x64
   14e58:	bne	14e88 <__assert_fail@plt+0x3ae4>
   14e5c:	add	r0, r9, #60	; 0x3c
   14e60:	bl	163a4 <__assert_fail@plt+0x5000>
   14e64:	cmp	r0, #0
   14e68:	bmi	14e70 <__assert_fail@plt+0x3acc>
   14e6c:	bl	11380 <close@plt>
   14e70:	str	r8, [r9, #32]
   14e74:	b	14e80 <__assert_fail@plt+0x3adc>
   14e78:	mov	r0, r8
   14e7c:	bl	11380 <close@plt>
   14e80:	ldr	r5, [r9, #4]
   14e84:	b	14dd4 <__assert_fail@plt+0x3a30>
   14e88:	bl	11374 <abort@plt>
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	mov	r2, r1
   14e98:	ldrd	r0, [r0, #8]
   14e9c:	mov	r3, #0
   14ea0:	bl	19d88 <__assert_fail@plt+0x89e4>
   14ea4:	mov	r0, r2
   14ea8:	pop	{fp, pc}
   14eac:	push	{r4, r5, fp, lr}
   14eb0:	add	fp, sp, #8
   14eb4:	ldrd	r2, [r1, #8]
   14eb8:	ldrd	r4, [r0, #8]
   14ebc:	eor	r3, r5, r3
   14ec0:	eor	r2, r4, r2
   14ec4:	orrs	r2, r2, r3
   14ec8:	mov	r2, #0
   14ecc:	bne	14eec <__assert_fail@plt+0x3b48>
   14ed0:	ldrd	r2, [r1]
   14ed4:	ldrd	r0, [r0]
   14ed8:	eor	r1, r1, r3
   14edc:	eor	r0, r0, r2
   14ee0:	orr	r0, r0, r1
   14ee4:	clz	r0, r0
   14ee8:	lsr	r2, r0, #5
   14eec:	mov	r0, r2
   14ef0:	pop	{r4, r5, fp, pc}
   14ef4:	push	{r4, r5, fp, lr}
   14ef8:	add	fp, sp, #8
   14efc:	ldr	r0, [r0]
   14f00:	ldrd	r2, [r0, #160]	; 0xa0
   14f04:	ldr	r0, [r1]
   14f08:	ldrd	r4, [r0, #160]	; 0xa0
   14f0c:	mov	r0, #0
   14f10:	subs	r1, r4, r2
   14f14:	sbcs	r1, r5, r3
   14f18:	movwcc	r0, #1
   14f1c:	subs	r1, r2, r4
   14f20:	sbcs	r1, r3, r5
   14f24:	subcc	r0, r0, #1
   14f28:	pop	{r4, r5, fp, pc}
   14f2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f30:	add	fp, sp, #24
   14f34:	sub	sp, sp, #96	; 0x60
   14f38:	ldr	r7, [r0, #44]	; 0x2c
   14f3c:	mov	r4, r0
   14f40:	mov	r5, #0
   14f44:	ldrb	r0, [r7, #49]	; 0x31
   14f48:	tst	r0, #2
   14f4c:	beq	15048 <__assert_fail@plt+0x3ca4>
   14f50:	ldr	r6, [r7, #52]	; 0x34
   14f54:	mov	r9, r1
   14f58:	cmp	r6, #0
   14f5c:	bne	14f9c <__assert_fail@plt+0x3bf8>
   14f60:	movw	r0, #39624	; 0x9ac8
   14f64:	movw	r2, #20564	; 0x5054
   14f68:	movw	r3, #20596	; 0x5074
   14f6c:	mov	r1, #0
   14f70:	mov	r8, #0
   14f74:	movt	r0, #1
   14f78:	movt	r2, #1
   14f7c:	movt	r3, #1
   14f80:	str	r0, [sp]
   14f84:	mov	r0, #13
   14f88:	bl	1553c <__assert_fail@plt+0x4198>
   14f8c:	mov	r6, r0
   14f90:	cmp	r0, #0
   14f94:	str	r0, [r7, #52]	; 0x34
   14f98:	beq	14fd4 <__assert_fail@plt+0x3c30>
   14f9c:	ldrd	r0, [r4, #64]	; 0x40
   14fa0:	str	r1, [sp, #12]
   14fa4:	str	r0, [sp, #8]
   14fa8:	add	r1, sp, #8
   14fac:	mov	r0, r6
   14fb0:	bl	15288 <__assert_fail@plt+0x3ee4>
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fc4 <__assert_fail@plt+0x3c20>
   14fbc:	ldr	r5, [r0, #8]
   14fc0:	b	15048 <__assert_fail@plt+0x3ca4>
   14fc4:	mov	r8, #1
   14fc8:	cmp	r9, #0
   14fcc:	bpl	14fe0 <__assert_fail@plt+0x3c3c>
   14fd0:	b	15048 <__assert_fail@plt+0x3ca4>
   14fd4:	mov	r6, #0
   14fd8:	cmp	r9, #0
   14fdc:	bmi	15048 <__assert_fail@plt+0x3ca4>
   14fe0:	add	r1, sp, #8
   14fe4:	mov	r0, r9
   14fe8:	bl	110bc <fstatfs64@plt>
   14fec:	cmp	r0, #0
   14ff0:	bne	15048 <__assert_fail@plt+0x3ca4>
   14ff4:	cmp	r8, #0
   14ff8:	beq	15044 <__assert_fail@plt+0x3ca0>
   14ffc:	mov	r0, #16
   15000:	bl	195bc <__assert_fail@plt+0x8218>
   15004:	cmp	r0, #0
   15008:	beq	15044 <__assert_fail@plt+0x3ca0>
   1500c:	mov	r5, r0
   15010:	ldrd	r0, [r4, #64]	; 0x40
   15014:	ldr	r2, [sp, #8]
   15018:	stm	r5, {r0, r1, r2}
   1501c:	mov	r0, r6
   15020:	mov	r1, r5
   15024:	bl	16090 <__assert_fail@plt+0x4cec>
   15028:	cmp	r0, #0
   1502c:	beq	1503c <__assert_fail@plt+0x3c98>
   15030:	cmp	r0, r5
   15034:	beq	15044 <__assert_fail@plt+0x3ca0>
   15038:	bl	11374 <abort@plt>
   1503c:	mov	r0, r5
   15040:	bl	19ac8 <__assert_fail@plt+0x8724>
   15044:	ldr	r5, [sp, #8]
   15048:	mov	r0, r5
   1504c:	sub	sp, fp, #24
   15050:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15054:	push	{fp, lr}
   15058:	mov	fp, sp
   1505c:	mov	r2, r1
   15060:	ldrd	r0, [r0]
   15064:	mov	r3, #0
   15068:	bl	19d88 <__assert_fail@plt+0x89e4>
   1506c:	mov	r0, r2
   15070:	pop	{fp, pc}
   15074:	ldrd	r2, [r1]
   15078:	ldrd	r0, [r0]
   1507c:	eor	r1, r1, r3
   15080:	eor	r0, r0, r2
   15084:	orr	r0, r0, r1
   15088:	clz	r0, r0
   1508c:	lsr	r0, r0, #5
   15090:	bx	lr
   15094:	andeq	r0, r0, r0
   15098:	ldr	r0, [r0, #8]
   1509c:	bx	lr
   150a0:	ldr	r0, [r0, #12]
   150a4:	bx	lr
   150a8:	ldr	r0, [r0, #16]
   150ac:	bx	lr
   150b0:	ldm	r0, {r2, ip}
   150b4:	mov	r0, #0
   150b8:	cmp	r2, ip
   150bc:	bxcs	lr
   150c0:	mov	r0, #0
   150c4:	b	150d4 <__assert_fail@plt+0x3d30>
   150c8:	add	r2, r2, #8
   150cc:	cmp	r2, ip
   150d0:	bcs	15104 <__assert_fail@plt+0x3d60>
   150d4:	ldr	r1, [r2]
   150d8:	cmp	r1, #0
   150dc:	beq	150c8 <__assert_fail@plt+0x3d24>
   150e0:	mov	r3, #0
   150e4:	mov	r1, r2
   150e8:	ldr	r1, [r1, #4]
   150ec:	add	r3, r3, #1
   150f0:	cmp	r1, #0
   150f4:	bne	150e8 <__assert_fail@plt+0x3d44>
   150f8:	cmp	r3, r0
   150fc:	movhi	r0, r3
   15100:	b	150c8 <__assert_fail@plt+0x3d24>
   15104:	bx	lr
   15108:	push	{fp, lr}
   1510c:	mov	fp, sp
   15110:	ldm	r0, {r3, ip}
   15114:	mov	lr, #0
   15118:	mov	r1, #0
   1511c:	cmp	r3, ip
   15120:	bcs	15164 <__assert_fail@plt+0x3dc0>
   15124:	mov	r1, #0
   15128:	mov	lr, #0
   1512c:	b	1513c <__assert_fail@plt+0x3d98>
   15130:	add	r3, r3, #8
   15134:	cmp	r3, ip
   15138:	bcs	15164 <__assert_fail@plt+0x3dc0>
   1513c:	ldr	r2, [r3]
   15140:	cmp	r2, #0
   15144:	beq	15130 <__assert_fail@plt+0x3d8c>
   15148:	mov	r2, r3
   1514c:	ldr	r2, [r2, #4]
   15150:	add	r1, r1, #1
   15154:	cmp	r2, #0
   15158:	bne	1514c <__assert_fail@plt+0x3da8>
   1515c:	add	lr, lr, #1
   15160:	b	15130 <__assert_fail@plt+0x3d8c>
   15164:	ldr	r2, [r0, #12]
   15168:	cmp	lr, r2
   1516c:	bne	15184 <__assert_fail@plt+0x3de0>
   15170:	ldr	r2, [r0, #16]
   15174:	mov	r0, #1
   15178:	cmp	r1, r2
   1517c:	movne	r0, #0
   15180:	pop	{fp, pc}
   15184:	mov	r0, #0
   15188:	pop	{fp, pc}
   1518c:	nop	{0}
   15190:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15194:	add	fp, sp, #24
   15198:	sub	sp, sp, #8
   1519c:	ldr	r6, [r0]
   151a0:	ldmib	r0, {r2, r7, r8}
   151a4:	ldr	r3, [r0, #16]
   151a8:	mov	r4, r1
   151ac:	mov	r5, #0
   151b0:	cmp	r6, r2
   151b4:	bcs	151fc <__assert_fail@plt+0x3e58>
   151b8:	mov	r5, #0
   151bc:	b	151cc <__assert_fail@plt+0x3e28>
   151c0:	add	r6, r6, #8
   151c4:	cmp	r6, r2
   151c8:	bcs	151fc <__assert_fail@plt+0x3e58>
   151cc:	ldr	r0, [r6]
   151d0:	cmp	r0, #0
   151d4:	beq	151c0 <__assert_fail@plt+0x3e1c>
   151d8:	mov	r0, #0
   151dc:	mov	r1, r6
   151e0:	ldr	r1, [r1, #4]
   151e4:	add	r0, r0, #1
   151e8:	cmp	r1, #0
   151ec:	bne	151e0 <__assert_fail@plt+0x3e3c>
   151f0:	cmp	r0, r5
   151f4:	movhi	r5, r0
   151f8:	b	151c0 <__assert_fail@plt+0x3e1c>
   151fc:	movw	r2, #43520	; 0xaa00
   15200:	mov	r0, r4
   15204:	mov	r1, #1
   15208:	movt	r2, #1
   1520c:	bl	112a8 <__fprintf_chk@plt>
   15210:	movw	r2, #43544	; 0xaa18
   15214:	mov	r0, r4
   15218:	mov	r1, #1
   1521c:	mov	r3, r7
   15220:	movt	r2, #1
   15224:	bl	112a8 <__fprintf_chk@plt>
   15228:	vmov	s0, r8
   1522c:	vldr	d16, [pc, #76]	; 15280 <__assert_fail@plt+0x3edc>
   15230:	movw	r2, #43568	; 0xaa30
   15234:	mov	r0, r4
   15238:	mov	r1, #1
   1523c:	mov	r3, r8
   15240:	movt	r2, #1
   15244:	vcvt.f64.u32	d17, s0
   15248:	vmov	s0, r7
   1524c:	vcvt.f64.u32	d18, s0
   15250:	vmul.f64	d16, d17, d16
   15254:	vdiv.f64	d16, d16, d18
   15258:	vstr	d16, [sp]
   1525c:	bl	112a8 <__fprintf_chk@plt>
   15260:	movw	r2, #43601	; 0xaa51
   15264:	mov	r0, r4
   15268:	mov	r1, #1
   1526c:	mov	r3, r5
   15270:	movt	r2, #1
   15274:	sub	sp, fp, #24
   15278:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1527c:	b	112a8 <__fprintf_chk@plt>
   15280:	andeq	r0, r0, r0
   15284:	subsmi	r0, r9, r0
   15288:	push	{r4, r5, r6, r7, fp, lr}
   1528c:	add	fp, sp, #16
   15290:	mov	r4, r1
   15294:	ldr	r1, [r0, #8]
   15298:	ldr	r2, [r0, #24]
   1529c:	mov	r5, r0
   152a0:	mov	r0, r4
   152a4:	blx	r2
   152a8:	ldr	r1, [r5, #8]
   152ac:	cmp	r0, r1
   152b0:	bcs	15318 <__assert_fail@plt+0x3f74>
   152b4:	ldr	r7, [r5]
   152b8:	mov	r6, #0
   152bc:	ldr	r1, [r7, r0, lsl #3]!
   152c0:	cmp	r1, #0
   152c4:	cmpne	r7, #0
   152c8:	bne	152f8 <__assert_fail@plt+0x3f54>
   152cc:	mov	r0, r6
   152d0:	pop	{r4, r5, r6, r7, fp, pc}
   152d4:	ldr	r2, [r5, #28]
   152d8:	mov	r0, r4
   152dc:	blx	r2
   152e0:	cmp	r0, #0
   152e4:	bne	1530c <__assert_fail@plt+0x3f68>
   152e8:	ldr	r7, [r7, #4]
   152ec:	cmp	r7, #0
   152f0:	beq	152cc <__assert_fail@plt+0x3f28>
   152f4:	ldr	r1, [r7]
   152f8:	cmp	r1, r4
   152fc:	bne	152d4 <__assert_fail@plt+0x3f30>
   15300:	mov	r6, r4
   15304:	mov	r0, r6
   15308:	pop	{r4, r5, r6, r7, fp, pc}
   1530c:	ldr	r6, [r7]
   15310:	mov	r0, r6
   15314:	pop	{r4, r5, r6, r7, fp, pc}
   15318:	bl	11374 <abort@plt>
   1531c:	push	{fp, lr}
   15320:	mov	fp, sp
   15324:	ldr	r1, [r0, #16]
   15328:	cmp	r1, #0
   1532c:	beq	1534c <__assert_fail@plt+0x3fa8>
   15330:	ldm	r0, {r1, r2}
   15334:	cmp	r1, r2
   15338:	bcs	15354 <__assert_fail@plt+0x3fb0>
   1533c:	ldr	r0, [r1], #8
   15340:	cmp	r0, #0
   15344:	beq	15334 <__assert_fail@plt+0x3f90>
   15348:	pop	{fp, pc}
   1534c:	mov	r0, #0
   15350:	pop	{fp, pc}
   15354:	bl	11374 <abort@plt>
   15358:	push	{r4, r5, fp, lr}
   1535c:	add	fp, sp, #8
   15360:	mov	r5, r1
   15364:	ldr	r1, [r0, #8]
   15368:	ldr	r2, [r0, #24]
   1536c:	mov	r4, r0
   15370:	mov	r0, r5
   15374:	blx	r2
   15378:	ldr	r1, [r4, #8]
   1537c:	cmp	r0, r1
   15380:	bcs	153e4 <__assert_fail@plt+0x4040>
   15384:	ldr	r1, [r4]
   15388:	add	r2, r1, r0, lsl #3
   1538c:	ldr	r3, [r2]
   15390:	ldr	r2, [r2, #4]
   15394:	cmp	r3, r5
   15398:	beq	153a8 <__assert_fail@plt+0x4004>
   1539c:	cmp	r2, #0
   153a0:	bne	1538c <__assert_fail@plt+0x3fe8>
   153a4:	b	153b8 <__assert_fail@plt+0x4014>
   153a8:	cmp	r2, #0
   153ac:	beq	153b8 <__assert_fail@plt+0x4014>
   153b0:	ldr	r0, [r2]
   153b4:	pop	{r4, r5, fp, pc}
   153b8:	ldr	r2, [r4, #4]
   153bc:	add	r0, r1, r0, lsl #3
   153c0:	add	r1, r0, #8
   153c4:	cmp	r1, r2
   153c8:	bcs	153dc <__assert_fail@plt+0x4038>
   153cc:	ldr	r0, [r1], #8
   153d0:	cmp	r0, #0
   153d4:	beq	153c4 <__assert_fail@plt+0x4020>
   153d8:	pop	{r4, r5, fp, pc}
   153dc:	mov	r0, #0
   153e0:	pop	{r4, r5, fp, pc}
   153e4:	bl	11374 <abort@plt>
   153e8:	push	{r4, r5, fp, lr}
   153ec:	add	fp, sp, #8
   153f0:	ldm	r0, {r5, lr}
   153f4:	mov	ip, r0
   153f8:	mov	r0, #0
   153fc:	cmp	r5, lr
   15400:	popcs	{r4, r5, fp, pc}
   15404:	mov	r0, #0
   15408:	b	1541c <__assert_fail@plt+0x4078>
   1540c:	ldr	lr, [ip, #4]
   15410:	add	r5, r5, #8
   15414:	cmp	r5, lr
   15418:	bcs	15454 <__assert_fail@plt+0x40b0>
   1541c:	ldr	r3, [r5]
   15420:	cmp	r3, #0
   15424:	cmpne	r5, #0
   15428:	beq	15410 <__assert_fail@plt+0x406c>
   1542c:	mov	r3, r5
   15430:	cmp	r0, r2
   15434:	bcs	15454 <__assert_fail@plt+0x40b0>
   15438:	ldr	r4, [r3]
   1543c:	str	r4, [r1, r0, lsl #2]
   15440:	add	r0, r0, #1
   15444:	ldr	r3, [r3, #4]
   15448:	cmp	r3, #0
   1544c:	bne	15430 <__assert_fail@plt+0x408c>
   15450:	b	1540c <__assert_fail@plt+0x4068>
   15454:	pop	{r4, r5, fp, pc}
   15458:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1545c:	add	fp, sp, #24
   15460:	mov	r5, r1
   15464:	ldr	r4, [r0]
   15468:	ldr	r1, [r0, #4]
   1546c:	mov	r6, #0
   15470:	cmp	r4, r1
   15474:	bcs	154e0 <__assert_fail@plt+0x413c>
   15478:	mov	r9, r2
   1547c:	mov	r8, r0
   15480:	mov	r6, #0
   15484:	b	15498 <__assert_fail@plt+0x40f4>
   15488:	ldr	r1, [r8, #4]
   1548c:	add	r4, r4, #8
   15490:	cmp	r4, r1
   15494:	bcs	154e0 <__assert_fail@plt+0x413c>
   15498:	ldr	r0, [r4]
   1549c:	cmp	r0, #0
   154a0:	cmpne	r4, #0
   154a4:	beq	1548c <__assert_fail@plt+0x40e8>
   154a8:	mov	r1, r9
   154ac:	blx	r5
   154b0:	cmp	r0, #0
   154b4:	beq	154e0 <__assert_fail@plt+0x413c>
   154b8:	mov	r7, r4
   154bc:	ldr	r7, [r7, #4]
   154c0:	add	r6, r6, #1
   154c4:	cmp	r7, #0
   154c8:	beq	15488 <__assert_fail@plt+0x40e4>
   154cc:	ldr	r0, [r7]
   154d0:	mov	r1, r9
   154d4:	blx	r5
   154d8:	cmp	r0, #0
   154dc:	bne	154bc <__assert_fail@plt+0x4118>
   154e0:	mov	r0, r6
   154e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154e8:	ldrb	r2, [r0]
   154ec:	cmp	r2, #0
   154f0:	moveq	r0, #0
   154f4:	bxeq	lr
   154f8:	add	r3, r0, #1
   154fc:	mov	r0, #0
   15500:	rsb	r0, r0, r0, lsl #5
   15504:	uxtab	r0, r0, r2
   15508:	udiv	r2, r0, r1
   1550c:	mls	r0, r2, r1, r0
   15510:	ldrb	r2, [r3], #1
   15514:	cmp	r2, #0
   15518:	bne	15500 <__assert_fail@plt+0x415c>
   1551c:	bx	lr
   15520:	movw	r1, #43632	; 0xaa70
   15524:	movt	r1, #1
   15528:	vld1.32	{d16-d17}, [r1]!
   1552c:	ldr	r1, [r1]
   15530:	vst1.32	{d16-d17}, [r0]!
   15534:	str	r1, [r0]
   15538:	bx	lr
   1553c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15540:	add	fp, sp, #24
   15544:	movw	r9, #22372	; 0x5764
   15548:	cmp	r3, #0
   1554c:	movw	r5, #22352	; 0x5750
   15550:	mov	r6, r0
   15554:	mov	r0, #40	; 0x28
   15558:	mov	r7, r1
   1555c:	movt	r9, #1
   15560:	movne	r9, r3
   15564:	cmp	r2, #0
   15568:	movt	r5, #1
   1556c:	movne	r5, r2
   15570:	bl	195bc <__assert_fail@plt+0x8218>
   15574:	mov	r8, #0
   15578:	cmp	r0, #0
   1557c:	beq	15738 <__assert_fail@plt+0x4394>
   15580:	mov	r4, r0
   15584:	movw	r0, #43632	; 0xaa70
   15588:	cmp	r7, #0
   1558c:	movt	r0, #1
   15590:	moveq	r7, r0
   15594:	cmp	r7, r0
   15598:	str	r7, [r4, #20]
   1559c:	beq	15618 <__assert_fail@plt+0x4274>
   155a0:	vldr	s2, [pc, #408]	; 15740 <__assert_fail@plt+0x439c>
   155a4:	vldr	s0, [r7, #8]
   155a8:	vcmpe.f32	s0, s2
   155ac:	vmrs	APSR_nzcv, fpscr
   155b0:	ble	156c4 <__assert_fail@plt+0x4320>
   155b4:	vldr	s4, [pc, #392]	; 15744 <__assert_fail@plt+0x43a0>
   155b8:	vcmpe.f32	s0, s4
   155bc:	vmrs	APSR_nzcv, fpscr
   155c0:	bpl	156c4 <__assert_fail@plt+0x4320>
   155c4:	vldr	s4, [pc, #380]	; 15748 <__assert_fail@plt+0x43a4>
   155c8:	vldr	s6, [r7, #12]
   155cc:	vcmpe.f32	s6, s4
   155d0:	vmrs	APSR_nzcv, fpscr
   155d4:	ble	156c4 <__assert_fail@plt+0x4320>
   155d8:	vldr	s4, [r7]
   155dc:	vcmpe.f32	s4, #0.0
   155e0:	vmrs	APSR_nzcv, fpscr
   155e4:	blt	156c4 <__assert_fail@plt+0x4320>
   155e8:	vadd.f32	s2, s4, s2
   155ec:	vcmpe.f32	s2, s0
   155f0:	vmrs	APSR_nzcv, fpscr
   155f4:	bpl	156c4 <__assert_fail@plt+0x4320>
   155f8:	vldr	s0, [r7, #4]
   155fc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15600:	vcmpe.f32	s0, s4
   15604:	vmrs	APSR_nzcv, fpscr
   15608:	bhi	156c4 <__assert_fail@plt+0x4320>
   1560c:	vcmpe.f32	s2, s0
   15610:	vmrs	APSR_nzcv, fpscr
   15614:	bpl	156c4 <__assert_fail@plt+0x4320>
   15618:	ldrb	r0, [r7, #16]
   1561c:	cmp	r0, #0
   15620:	bne	1564c <__assert_fail@plt+0x42a8>
   15624:	vmov	s2, r6
   15628:	vldr	s0, [r7, #8]
   1562c:	vldr	s4, [pc, #280]	; 1574c <__assert_fail@plt+0x43a8>
   15630:	vcvt.f32.u32	s2, s2
   15634:	vdiv.f32	s2, s2, s0
   15638:	vcvt.u32.f32	s0, s2
   1563c:	vcmpe.f32	s2, s4
   15640:	vmrs	APSR_nzcv, fpscr
   15644:	bge	156d4 <__assert_fail@plt+0x4330>
   15648:	vmov	r6, s0
   1564c:	cmp	r6, #10
   15650:	movls	r6, #10
   15654:	orr	r0, r6, #1
   15658:	cmn	r0, #1
   1565c:	beq	156d4 <__assert_fail@plt+0x4330>
   15660:	ldr	r6, [fp, #8]
   15664:	mov	r1, #3
   15668:	cmp	r0, #10
   1566c:	bcc	156a4 <__assert_fail@plt+0x4300>
   15670:	mov	r1, #3
   15674:	mov	r3, #9
   15678:	mov	r2, #12
   1567c:	udiv	r7, r0, r1
   15680:	mls	r7, r7, r1, r0
   15684:	cmp	r7, #0
   15688:	beq	156a4 <__assert_fail@plt+0x4300>
   1568c:	add	r3, r3, r2
   15690:	add	r2, r2, #8
   15694:	add	r1, r1, #2
   15698:	add	r3, r3, #4
   1569c:	cmp	r3, r0
   156a0:	bcc	1567c <__assert_fail@plt+0x42d8>
   156a4:	udiv	r2, r0, r1
   156a8:	mls	r1, r2, r1, r0
   156ac:	cmp	r1, #0
   156b0:	bne	156cc <__assert_fail@plt+0x4328>
   156b4:	add	r0, r0, #2
   156b8:	cmn	r0, #1
   156bc:	bne	15664 <__assert_fail@plt+0x42c0>
   156c0:	b	156d4 <__assert_fail@plt+0x4330>
   156c4:	str	r0, [r4, #20]
   156c8:	b	156dc <__assert_fail@plt+0x4338>
   156cc:	cmp	r0, #536870912	; 0x20000000
   156d0:	bcc	156ec <__assert_fail@plt+0x4348>
   156d4:	mov	r0, #0
   156d8:	str	r0, [r4, #8]
   156dc:	mov	r0, r4
   156e0:	bl	19ac8 <__assert_fail@plt+0x8724>
   156e4:	mov	r0, r8
   156e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156ec:	cmp	r0, #0
   156f0:	str	r0, [r4, #8]
   156f4:	beq	156dc <__assert_fail@plt+0x4338>
   156f8:	mov	r1, #8
   156fc:	bl	19568 <__assert_fail@plt+0x81c4>
   15700:	cmp	r0, #0
   15704:	str	r0, [r4]
   15708:	beq	156dc <__assert_fail@plt+0x4338>
   1570c:	mov	r1, #0
   15710:	str	r5, [r4, #24]
   15714:	str	r9, [r4, #28]
   15718:	str	r6, [r4, #32]
   1571c:	mov	r8, r4
   15720:	str	r1, [r4, #36]	; 0x24
   15724:	str	r1, [r4, #12]
   15728:	str	r1, [r4, #16]
   1572c:	ldr	r1, [r4, #8]
   15730:	add	r0, r0, r1, lsl #3
   15734:	str	r0, [r4, #4]
   15738:	mov	r0, r8
   1573c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15740:	stclcc	12, cr12, [ip, #820]	; 0x334
   15744:	svccc	0x00666666
   15748:	svccc	0x008ccccd
   1574c:	svcmi	0x00800000
   15750:	ror	r2, r0, #3
   15754:	udiv	r2, r2, r1
   15758:	mul	r1, r2, r1
   1575c:	rsb	r0, r1, r0, ror #3
   15760:	bx	lr
   15764:	sub	r0, r0, r1
   15768:	clz	r0, r0
   1576c:	lsr	r0, r0, #5
   15770:	bx	lr
   15774:	push	{r4, r5, r6, r7, fp, lr}
   15778:	add	fp, sp, #16
   1577c:	mov	r4, r0
   15780:	ldr	r5, [r0]
   15784:	ldr	r0, [r0, #4]
   15788:	cmp	r5, r0
   1578c:	bcs	15830 <__assert_fail@plt+0x448c>
   15790:	mov	r6, #0
   15794:	b	157b0 <__assert_fail@plt+0x440c>
   15798:	str	r6, [r5]
   1579c:	str	r6, [r5, #4]
   157a0:	ldr	r0, [r4, #4]
   157a4:	add	r5, r5, #8
   157a8:	cmp	r5, r0
   157ac:	bcs	15830 <__assert_fail@plt+0x448c>
   157b0:	ldr	r1, [r5]
   157b4:	cmp	r1, #0
   157b8:	beq	157a4 <__assert_fail@plt+0x4400>
   157bc:	ldr	r1, [r4, #32]
   157c0:	ldr	r7, [r5, #4]
   157c4:	cmp	r1, #0
   157c8:	mov	r0, r1
   157cc:	movwne	r0, #1
   157d0:	cmp	r7, #0
   157d4:	bne	15818 <__assert_fail@plt+0x4474>
   157d8:	cmp	r0, #0
   157dc:	beq	15798 <__assert_fail@plt+0x43f4>
   157e0:	ldr	r0, [r5]
   157e4:	blx	r1
   157e8:	b	15798 <__assert_fail@plt+0x43f4>
   157ec:	str	r6, [r7]
   157f0:	cmp	r1, #0
   157f4:	ldr	r2, [r7, #4]
   157f8:	ldr	r0, [r4, #36]	; 0x24
   157fc:	str	r0, [r7, #4]
   15800:	mov	r0, r1
   15804:	str	r7, [r4, #36]	; 0x24
   15808:	movwne	r0, #1
   1580c:	cmp	r2, #0
   15810:	mov	r7, r2
   15814:	beq	157d8 <__assert_fail@plt+0x4434>
   15818:	tst	r0, #1
   1581c:	beq	157ec <__assert_fail@plt+0x4448>
   15820:	ldr	r0, [r7]
   15824:	blx	r1
   15828:	ldr	r1, [r4, #32]
   1582c:	b	157ec <__assert_fail@plt+0x4448>
   15830:	mov	r0, #0
   15834:	str	r0, [r4, #12]
   15838:	str	r0, [r4, #16]
   1583c:	pop	{r4, r5, r6, r7, fp, pc}
   15840:	push	{r4, r5, r6, sl, fp, lr}
   15844:	add	fp, sp, #16
   15848:	mov	r4, r0
   1584c:	ldr	r0, [r0, #32]
   15850:	cmp	r0, #0
   15854:	beq	158c8 <__assert_fail@plt+0x4524>
   15858:	ldr	r0, [r4, #16]
   1585c:	cmp	r0, #0
   15860:	beq	158c8 <__assert_fail@plt+0x4524>
   15864:	ldr	r5, [r4]
   15868:	ldr	r1, [r4, #4]
   1586c:	cmp	r5, r1
   15870:	bcc	15888 <__assert_fail@plt+0x44e4>
   15874:	b	158c8 <__assert_fail@plt+0x4524>
   15878:	ldr	r1, [r4, #4]
   1587c:	add	r5, r5, #8
   15880:	cmp	r5, r1
   15884:	bcs	158c8 <__assert_fail@plt+0x4524>
   15888:	ldr	r0, [r5]
   1588c:	cmp	r0, #0
   15890:	cmpne	r5, #0
   15894:	beq	1587c <__assert_fail@plt+0x44d8>
   15898:	ldr	r1, [r4, #32]
   1589c:	blx	r1
   158a0:	ldr	r6, [r5, #4]
   158a4:	cmp	r6, #0
   158a8:	beq	15878 <__assert_fail@plt+0x44d4>
   158ac:	ldr	r1, [r4, #32]
   158b0:	ldr	r0, [r6]
   158b4:	blx	r1
   158b8:	ldr	r6, [r6, #4]
   158bc:	cmp	r6, #0
   158c0:	bne	158ac <__assert_fail@plt+0x4508>
   158c4:	b	15878 <__assert_fail@plt+0x44d4>
   158c8:	ldr	r5, [r4]
   158cc:	ldr	r1, [r4, #4]
   158d0:	cmp	r5, r1
   158d4:	bcc	158e8 <__assert_fail@plt+0x4544>
   158d8:	b	15910 <__assert_fail@plt+0x456c>
   158dc:	add	r5, r5, #8
   158e0:	cmp	r5, r1
   158e4:	bcs	15910 <__assert_fail@plt+0x456c>
   158e8:	ldr	r0, [r5, #4]
   158ec:	cmp	r0, #0
   158f0:	beq	158dc <__assert_fail@plt+0x4538>
   158f4:	ldr	r6, [r0, #4]
   158f8:	bl	19ac8 <__assert_fail@plt+0x8724>
   158fc:	cmp	r6, #0
   15900:	mov	r0, r6
   15904:	bne	158f4 <__assert_fail@plt+0x4550>
   15908:	ldr	r1, [r4, #4]
   1590c:	b	158dc <__assert_fail@plt+0x4538>
   15910:	ldr	r0, [r4, #36]	; 0x24
   15914:	cmp	r0, #0
   15918:	beq	15930 <__assert_fail@plt+0x458c>
   1591c:	ldr	r5, [r0, #4]
   15920:	bl	19ac8 <__assert_fail@plt+0x8724>
   15924:	cmp	r5, #0
   15928:	mov	r0, r5
   1592c:	bne	1591c <__assert_fail@plt+0x4578>
   15930:	ldr	r0, [r4]
   15934:	bl	19ac8 <__assert_fail@plt+0x8724>
   15938:	mov	r0, r4
   1593c:	pop	{r4, r5, r6, sl, fp, lr}
   15940:	b	19ac8 <__assert_fail@plt+0x8724>
   15944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15948:	add	fp, sp, #28
   1594c:	sub	sp, sp, #44	; 0x2c
   15950:	mov	r7, r0
   15954:	mov	r4, r0
   15958:	ldr	r0, [r7, #20]!
   1595c:	ldrb	r2, [r0, #16]
   15960:	cmp	r2, #0
   15964:	bne	15994 <__assert_fail@plt+0x45f0>
   15968:	vmov	s2, r1
   1596c:	vldr	s0, [r0, #8]
   15970:	vldr	s4, [pc, #564]	; 15bac <__assert_fail@plt+0x4808>
   15974:	mov	r5, #0
   15978:	vcvt.f32.u32	s2, s2
   1597c:	vdiv.f32	s2, s2, s0
   15980:	vcvt.u32.f32	s0, s2
   15984:	vcmpe.f32	s2, s4
   15988:	vmrs	APSR_nzcv, fpscr
   1598c:	bge	15b9c <__assert_fail@plt+0x47f8>
   15990:	vmov	r1, s0
   15994:	cmp	r1, #10
   15998:	mov	r5, #0
   1599c:	movls	r1, #10
   159a0:	orr	r6, r1, #1
   159a4:	cmn	r6, #1
   159a8:	beq	15b9c <__assert_fail@plt+0x47f8>
   159ac:	mov	r0, #3
   159b0:	cmp	r6, #10
   159b4:	bcc	159ec <__assert_fail@plt+0x4648>
   159b8:	mov	r0, #3
   159bc:	mov	r2, #9
   159c0:	mov	r1, #12
   159c4:	udiv	r3, r6, r0
   159c8:	mls	r3, r3, r0, r6
   159cc:	cmp	r3, #0
   159d0:	beq	159ec <__assert_fail@plt+0x4648>
   159d4:	add	r2, r2, r1
   159d8:	add	r1, r1, #8
   159dc:	add	r0, r0, #2
   159e0:	add	r2, r2, #4
   159e4:	cmp	r2, r6
   159e8:	bcc	159c4 <__assert_fail@plt+0x4620>
   159ec:	udiv	r1, r6, r0
   159f0:	mls	r0, r1, r0, r6
   159f4:	cmp	r0, #0
   159f8:	bne	15a0c <__assert_fail@plt+0x4668>
   159fc:	add	r6, r6, #2
   15a00:	cmn	r6, #1
   15a04:	bne	159ac <__assert_fail@plt+0x4608>
   15a08:	b	15b9c <__assert_fail@plt+0x47f8>
   15a0c:	sub	r0, r6, #1
   15a10:	cmn	r0, #-536870910	; 0xe0000002
   15a14:	bhi	15b9c <__assert_fail@plt+0x47f8>
   15a18:	ldr	r0, [r4, #8]
   15a1c:	cmp	r6, r0
   15a20:	bne	15a2c <__assert_fail@plt+0x4688>
   15a24:	mov	r5, #1
   15a28:	b	15b9c <__assert_fail@plt+0x47f8>
   15a2c:	mov	r0, r6
   15a30:	mov	r1, #8
   15a34:	bl	19568 <__assert_fail@plt+0x81c4>
   15a38:	cmp	r0, #0
   15a3c:	str	r0, [sp, #4]
   15a40:	beq	15b9c <__assert_fail@plt+0x47f8>
   15a44:	add	r0, r0, r6, lsl #3
   15a48:	mov	r1, #0
   15a4c:	add	r5, sp, #4
   15a50:	mov	sl, r4
   15a54:	mov	r2, #0
   15a58:	str	r1, [sp, #20]
   15a5c:	str	r1, [sp, #16]
   15a60:	str	r6, [sp, #12]
   15a64:	mov	r1, r4
   15a68:	str	r0, [sp, #8]
   15a6c:	add	r0, r5, #20
   15a70:	vld1.32	{d16-d17}, [r7]
   15a74:	vst1.32	{d16-d17}, [r0]
   15a78:	ldr	r0, [sl, #36]!	; 0x24
   15a7c:	str	r0, [sp, #40]	; 0x28
   15a80:	mov	r0, r5
   15a84:	bl	15bb0 <__assert_fail@plt+0x480c>
   15a88:	cmp	r0, #0
   15a8c:	beq	15ab4 <__assert_fail@plt+0x4710>
   15a90:	ldr	r0, [r4]
   15a94:	bl	19ac8 <__assert_fail@plt+0x8724>
   15a98:	mov	r0, #36	; 0x24
   15a9c:	vld1.32	{d16-d17}, [r5], r0
   15aa0:	vst1.32	{d16-d17}, [r4], r0
   15aa4:	ldr	r0, [r5]
   15aa8:	mov	r5, #1
   15aac:	str	r0, [r4]
   15ab0:	b	15b9c <__assert_fail@plt+0x47f8>
   15ab4:	ldr	r0, [sp, #40]	; 0x28
   15ab8:	str	r0, [sl]
   15abc:	ldr	r0, [sp, #8]
   15ac0:	ldr	r8, [sp, #4]
   15ac4:	cmp	r8, r0
   15ac8:	str	r0, [sp]
   15acc:	bcs	15b78 <__assert_fail@plt+0x47d4>
   15ad0:	mov	r9, #0
   15ad4:	b	15aec <__assert_fail@plt+0x4748>
   15ad8:	str	r9, [r8, #4]
   15adc:	ldr	r0, [sp]
   15ae0:	add	r8, r8, #8
   15ae4:	cmp	r8, r0
   15ae8:	bcs	15b78 <__assert_fail@plt+0x47d4>
   15aec:	ldr	r0, [r8]
   15af0:	cmp	r0, #0
   15af4:	beq	15adc <__assert_fail@plt+0x4738>
   15af8:	ldr	r6, [r8, #4]
   15afc:	cmp	r6, #0
   15b00:	beq	15ad8 <__assert_fail@plt+0x4734>
   15b04:	ldr	r1, [r4, #8]
   15b08:	b	15b2c <__assert_fail@plt+0x4788>
   15b0c:	add	r0, r3, r0, lsl #3
   15b10:	add	r0, r0, #4
   15b14:	ldr	r3, [r0]
   15b18:	cmp	r2, #0
   15b1c:	str	r3, [r6, #4]
   15b20:	str	r6, [r0]
   15b24:	mov	r6, r2
   15b28:	beq	15ad8 <__assert_fail@plt+0x4734>
   15b2c:	ldr	r5, [r6]
   15b30:	ldr	r2, [r4, #24]
   15b34:	mov	r0, r5
   15b38:	blx	r2
   15b3c:	ldr	r1, [r4, #8]
   15b40:	cmp	r0, r1
   15b44:	bcs	15ba8 <__assert_fail@plt+0x4804>
   15b48:	ldr	r3, [r4]
   15b4c:	ldr	r2, [r6, #4]
   15b50:	ldr	r7, [r3, r0, lsl #3]
   15b54:	cmp	r7, #0
   15b58:	bne	15b0c <__assert_fail@plt+0x4768>
   15b5c:	str	r5, [r3, r0, lsl #3]
   15b60:	ldr	r0, [r4, #12]
   15b64:	add	r0, r0, #1
   15b68:	str	r0, [r4, #12]
   15b6c:	mov	r0, sl
   15b70:	str	r9, [r6]
   15b74:	b	15b14 <__assert_fail@plt+0x4770>
   15b78:	add	r1, sp, #4
   15b7c:	mov	r0, r4
   15b80:	mov	r2, #0
   15b84:	mov	r5, #0
   15b88:	bl	15bb0 <__assert_fail@plt+0x480c>
   15b8c:	cmp	r0, #0
   15b90:	beq	15ba8 <__assert_fail@plt+0x4804>
   15b94:	ldr	r0, [sp, #4]
   15b98:	bl	19ac8 <__assert_fail@plt+0x8724>
   15b9c:	mov	r0, r5
   15ba0:	sub	sp, fp, #28
   15ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba8:	bl	11374 <abort@plt>
   15bac:	svcmi	0x00800000
   15bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb4:	add	fp, sp, #28
   15bb8:	sub	sp, sp, #12
   15bbc:	ldr	sl, [r1]
   15bc0:	str	r1, [sp, #8]
   15bc4:	ldr	r1, [r1, #4]
   15bc8:	mov	r7, r0
   15bcc:	mov	r0, #1
   15bd0:	str	r2, [sp, #4]
   15bd4:	cmp	sl, r1
   15bd8:	bcs	15d34 <__assert_fail@plt+0x4990>
   15bdc:	add	r8, r7, #36	; 0x24
   15be0:	mov	r9, #0
   15be4:	b	15c20 <__assert_fail@plt+0x487c>
   15be8:	str	r4, [r6, r5, lsl #3]
   15bec:	ldr	r0, [r7, #12]
   15bf0:	add	r0, r0, #1
   15bf4:	str	r0, [r7, #12]
   15bf8:	ldr	r1, [sp, #8]
   15bfc:	str	r9, [sl]
   15c00:	ldr	r0, [r1, #12]
   15c04:	sub	r0, r0, #1
   15c08:	str	r0, [r1, #12]
   15c0c:	ldr	r0, [sp, #8]
   15c10:	add	sl, sl, #8
   15c14:	ldr	r0, [r0, #4]
   15c18:	cmp	sl, r0
   15c1c:	bcs	15d30 <__assert_fail@plt+0x498c>
   15c20:	ldr	r4, [sl]
   15c24:	cmp	r4, #0
   15c28:	beq	15c0c <__assert_fail@plt+0x4868>
   15c2c:	ldr	r5, [sl, #4]
   15c30:	cmp	r5, #0
   15c34:	beq	15cb0 <__assert_fail@plt+0x490c>
   15c38:	ldr	r1, [r7, #8]
   15c3c:	b	15c70 <__assert_fail@plt+0x48cc>
   15c40:	str	r4, [r3, r0, lsl #3]
   15c44:	ldr	r0, [r7, #12]
   15c48:	add	r0, r0, #1
   15c4c:	str	r0, [r7, #12]
   15c50:	mov	r0, r8
   15c54:	str	r9, [r5]
   15c58:	ldr	r3, [r0]
   15c5c:	cmp	r2, #0
   15c60:	str	r3, [r5, #4]
   15c64:	str	r5, [r0]
   15c68:	mov	r5, r2
   15c6c:	beq	15cac <__assert_fail@plt+0x4908>
   15c70:	ldr	r4, [r5]
   15c74:	ldr	r2, [r7, #24]
   15c78:	mov	r0, r4
   15c7c:	blx	r2
   15c80:	ldr	r1, [r7, #8]
   15c84:	cmp	r0, r1
   15c88:	bcs	15d48 <__assert_fail@plt+0x49a4>
   15c8c:	ldr	r3, [r7]
   15c90:	ldr	r2, [r5, #4]
   15c94:	ldr	r6, [r3, r0, lsl #3]
   15c98:	cmp	r6, #0
   15c9c:	beq	15c40 <__assert_fail@plt+0x489c>
   15ca0:	add	r0, r3, r0, lsl #3
   15ca4:	add	r0, r0, #4
   15ca8:	b	15c58 <__assert_fail@plt+0x48b4>
   15cac:	ldr	r4, [sl]
   15cb0:	ldr	r0, [sp, #4]
   15cb4:	str	r9, [sl, #4]
   15cb8:	cmp	r0, #0
   15cbc:	bne	15c0c <__assert_fail@plt+0x4868>
   15cc0:	ldr	r1, [r7, #8]
   15cc4:	ldr	r2, [r7, #24]
   15cc8:	mov	r0, r4
   15ccc:	blx	r2
   15cd0:	mov	r5, r0
   15cd4:	ldr	r0, [r7, #8]
   15cd8:	cmp	r5, r0
   15cdc:	bcs	15d48 <__assert_fail@plt+0x49a4>
   15ce0:	ldr	r6, [r7]
   15ce4:	ldr	r0, [r6, r5, lsl #3]
   15ce8:	cmp	r0, #0
   15cec:	beq	15be8 <__assert_fail@plt+0x4844>
   15cf0:	ldr	r0, [r8]
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d08 <__assert_fail@plt+0x4964>
   15cfc:	ldr	r1, [r0, #4]
   15d00:	str	r1, [r8]
   15d04:	b	15d18 <__assert_fail@plt+0x4974>
   15d08:	mov	r0, #8
   15d0c:	bl	195bc <__assert_fail@plt+0x8218>
   15d10:	cmp	r0, #0
   15d14:	beq	15d3c <__assert_fail@plt+0x4998>
   15d18:	add	r1, r6, r5, lsl #3
   15d1c:	str	r4, [r0]
   15d20:	ldr	r2, [r1, #4]
   15d24:	str	r2, [r0, #4]
   15d28:	str	r0, [r1, #4]
   15d2c:	b	15bf8 <__assert_fail@plt+0x4854>
   15d30:	mov	r0, #1
   15d34:	sub	sp, fp, #28
   15d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d3c:	mov	r0, #0
   15d40:	sub	sp, fp, #28
   15d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d48:	bl	11374 <abort@plt>
   15d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d50:	add	fp, sp, #28
   15d54:	sub	sp, sp, #4
   15d58:	cmp	r1, #0
   15d5c:	beq	16078 <__assert_fail@plt+0x4cd4>
   15d60:	mov	r8, r2
   15d64:	mov	sl, r1
   15d68:	ldr	r1, [r0, #8]
   15d6c:	ldr	r2, [r0, #24]
   15d70:	mov	r4, r0
   15d74:	mov	r0, sl
   15d78:	blx	r2
   15d7c:	mov	r7, r0
   15d80:	ldr	r0, [r4, #8]
   15d84:	cmp	r7, r0
   15d88:	bcs	16078 <__assert_fail@plt+0x4cd4>
   15d8c:	ldr	r5, [r4]
   15d90:	mov	r9, r5
   15d94:	ldr	r1, [r9, r7, lsl #3]!
   15d98:	cmp	r1, #0
   15d9c:	beq	15e28 <__assert_fail@plt+0x4a84>
   15da0:	cmp	r1, sl
   15da4:	beq	15dd0 <__assert_fail@plt+0x4a2c>
   15da8:	ldr	r2, [r4, #28]
   15dac:	mov	r0, sl
   15db0:	blx	r2
   15db4:	cmp	r0, #0
   15db8:	mov	r6, r9
   15dbc:	beq	15de4 <__assert_fail@plt+0x4a40>
   15dc0:	ldr	r0, [r6]
   15dc4:	cmp	r0, #0
   15dc8:	bne	15dd4 <__assert_fail@plt+0x4a30>
   15dcc:	b	15e28 <__assert_fail@plt+0x4a84>
   15dd0:	mov	r0, sl
   15dd4:	cmp	r8, #0
   15dd8:	mov	r7, #0
   15ddc:	strne	r0, [r8]
   15de0:	b	16014 <__assert_fail@plt+0x4c70>
   15de4:	add	r6, r5, r7, lsl #3
   15de8:	ldr	r0, [r6, #4]!
   15dec:	cmp	r0, #0
   15df0:	beq	15e28 <__assert_fail@plt+0x4a84>
   15df4:	ldr	r1, [r0]
   15df8:	cmp	r1, sl
   15dfc:	beq	15e1c <__assert_fail@plt+0x4a78>
   15e00:	ldr	r2, [r4, #28]
   15e04:	mov	r0, sl
   15e08:	blx	r2
   15e0c:	ldr	r6, [r6]
   15e10:	cmp	r0, #0
   15e14:	beq	15de8 <__assert_fail@plt+0x4a44>
   15e18:	b	15dc0 <__assert_fail@plt+0x4a1c>
   15e1c:	mov	r0, sl
   15e20:	cmp	r0, #0
   15e24:	bne	15dd4 <__assert_fail@plt+0x4a30>
   15e28:	vldr	s0, [r4, #8]
   15e2c:	vldr	s2, [r4, #12]
   15e30:	ldr	r0, [r4, #20]
   15e34:	vcvt.f32.u32	s0, s0
   15e38:	vcvt.f32.u32	s4, s2
   15e3c:	vldr	s2, [r0, #8]
   15e40:	vmul.f32	s6, s2, s0
   15e44:	vcmpe.f32	s6, s4
   15e48:	vmrs	APSR_nzcv, fpscr
   15e4c:	bpl	15fa0 <__assert_fail@plt+0x4bfc>
   15e50:	movw	r1, #43632	; 0xaa70
   15e54:	movt	r1, #1
   15e58:	cmp	r0, r1
   15e5c:	beq	15ee8 <__assert_fail@plt+0x4b44>
   15e60:	vldr	s6, [pc, #532]	; 1607c <__assert_fail@plt+0x4cd8>
   15e64:	vcmpe.f32	s2, s6
   15e68:	vmrs	APSR_nzcv, fpscr
   15e6c:	ble	15ed4 <__assert_fail@plt+0x4b30>
   15e70:	vldr	s8, [pc, #520]	; 16080 <__assert_fail@plt+0x4cdc>
   15e74:	vcmpe.f32	s2, s8
   15e78:	vmrs	APSR_nzcv, fpscr
   15e7c:	bpl	15ed4 <__assert_fail@plt+0x4b30>
   15e80:	vldr	s8, [pc, #508]	; 16084 <__assert_fail@plt+0x4ce0>
   15e84:	vldr	s10, [r0, #12]
   15e88:	vcmpe.f32	s10, s8
   15e8c:	vmrs	APSR_nzcv, fpscr
   15e90:	ble	15ed4 <__assert_fail@plt+0x4b30>
   15e94:	vldr	s8, [r0]
   15e98:	vcmpe.f32	s8, #0.0
   15e9c:	vmrs	APSR_nzcv, fpscr
   15ea0:	blt	15ed4 <__assert_fail@plt+0x4b30>
   15ea4:	vadd.f32	s6, s8, s6
   15ea8:	vcmpe.f32	s6, s2
   15eac:	vmrs	APSR_nzcv, fpscr
   15eb0:	bpl	15ed4 <__assert_fail@plt+0x4b30>
   15eb4:	vldr	s8, [r0, #4]
   15eb8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   15ebc:	vcmpe.f32	s8, s10
   15ec0:	vmrs	APSR_nzcv, fpscr
   15ec4:	bhi	15ed4 <__assert_fail@plt+0x4b30>
   15ec8:	vcmpe.f32	s6, s8
   15ecc:	vmrs	APSR_nzcv, fpscr
   15ed0:	bmi	15eec <__assert_fail@plt+0x4b48>
   15ed4:	vldr	s2, [pc, #428]	; 16088 <__assert_fail@plt+0x4ce4>
   15ed8:	movw	r0, #43632	; 0xaa70
   15edc:	movt	r0, #1
   15ee0:	str	r0, [r4, #20]
   15ee4:	b	15eec <__assert_fail@plt+0x4b48>
   15ee8:	mov	r0, r1
   15eec:	vmul.f32	s6, s2, s0
   15ef0:	vcmpe.f32	s6, s4
   15ef4:	vmrs	APSR_nzcv, fpscr
   15ef8:	bpl	15fa0 <__assert_fail@plt+0x4bfc>
   15efc:	vldr	s4, [r0, #12]
   15f00:	ldrb	r0, [r0, #16]
   15f04:	mvn	r7, #0
   15f08:	cmp	r0, #0
   15f0c:	vmul.f32	s0, s4, s0
   15f10:	vldr	s4, [pc, #372]	; 1608c <__assert_fail@plt+0x4ce8>
   15f14:	vmul.f32	s2, s2, s0
   15f18:	vseleq.f32	s0, s2, s0
   15f1c:	vcmpe.f32	s0, s4
   15f20:	vmrs	APSR_nzcv, fpscr
   15f24:	bge	16014 <__assert_fail@plt+0x4c70>
   15f28:	vcvt.u32.f32	s0, s0
   15f2c:	mov	r0, r4
   15f30:	vmov	r1, s0
   15f34:	bl	15944 <__assert_fail@plt+0x45a0>
   15f38:	cmp	r0, #0
   15f3c:	beq	16014 <__assert_fail@plt+0x4c70>
   15f40:	ldr	r1, [r4, #8]
   15f44:	ldr	r2, [r4, #24]
   15f48:	mov	r0, sl
   15f4c:	blx	r2
   15f50:	mov	r7, r0
   15f54:	ldr	r0, [r4, #8]
   15f58:	cmp	r7, r0
   15f5c:	bcs	16078 <__assert_fail@plt+0x4cd4>
   15f60:	ldr	r5, [r4]
   15f64:	mov	r9, r5
   15f68:	ldr	r1, [r9, r7, lsl #3]!
   15f6c:	cmp	r1, #0
   15f70:	beq	15fa0 <__assert_fail@plt+0x4bfc>
   15f74:	cmp	r1, sl
   15f78:	mov	r0, sl
   15f7c:	beq	15f98 <__assert_fail@plt+0x4bf4>
   15f80:	ldr	r2, [r4, #28]
   15f84:	mov	r0, sl
   15f88:	blx	r2
   15f8c:	cmp	r0, #0
   15f90:	beq	16028 <__assert_fail@plt+0x4c84>
   15f94:	ldr	r0, [r9]
   15f98:	cmp	r0, #0
   15f9c:	bne	16078 <__assert_fail@plt+0x4cd4>
   15fa0:	ldr	r0, [r9]
   15fa4:	cmp	r0, #0
   15fa8:	beq	15fc4 <__assert_fail@plt+0x4c20>
   15fac:	ldr	r0, [r4, #36]	; 0x24
   15fb0:	cmp	r0, #0
   15fb4:	beq	15fe4 <__assert_fail@plt+0x4c40>
   15fb8:	ldr	r1, [r0, #4]
   15fbc:	str	r1, [r4, #36]	; 0x24
   15fc0:	b	15ff4 <__assert_fail@plt+0x4c50>
   15fc4:	str	sl, [r9]
   15fc8:	ldr	r0, [r4, #12]
   15fcc:	ldr	r1, [r4, #16]
   15fd0:	add	r0, r0, #1
   15fd4:	add	r1, r1, #1
   15fd8:	str	r0, [r4, #12]
   15fdc:	str	r1, [r4, #16]
   15fe0:	b	16010 <__assert_fail@plt+0x4c6c>
   15fe4:	mov	r0, #8
   15fe8:	bl	195bc <__assert_fail@plt+0x8218>
   15fec:	cmp	r0, #0
   15ff0:	beq	16020 <__assert_fail@plt+0x4c7c>
   15ff4:	str	sl, [r0]
   15ff8:	ldr	r1, [r9, #4]
   15ffc:	str	r1, [r0, #4]
   16000:	str	r0, [r9, #4]
   16004:	ldr	r0, [r4, #16]
   16008:	add	r0, r0, #1
   1600c:	str	r0, [r4, #16]
   16010:	mov	r7, #1
   16014:	mov	r0, r7
   16018:	sub	sp, fp, #28
   1601c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16020:	mvn	r7, #0
   16024:	b	16014 <__assert_fail@plt+0x4c70>
   16028:	add	r6, r5, r7, lsl #3
   1602c:	ldr	r0, [r6, #4]!
   16030:	cmp	r0, #0
   16034:	beq	15fa0 <__assert_fail@plt+0x4bfc>
   16038:	ldr	r1, [r0]
   1603c:	cmp	r1, sl
   16040:	beq	1606c <__assert_fail@plt+0x4cc8>
   16044:	ldr	r2, [r4, #28]
   16048:	mov	r0, sl
   1604c:	blx	r2
   16050:	ldr	r6, [r6]
   16054:	cmp	r0, #0
   16058:	beq	1602c <__assert_fail@plt+0x4c88>
   1605c:	ldr	r0, [r6]
   16060:	cmp	r0, #0
   16064:	beq	15fa0 <__assert_fail@plt+0x4bfc>
   16068:	b	16078 <__assert_fail@plt+0x4cd4>
   1606c:	mov	r0, sl
   16070:	cmp	r0, #0
   16074:	beq	15fa0 <__assert_fail@plt+0x4bfc>
   16078:	bl	11374 <abort@plt>
   1607c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16080:	svccc	0x00666666
   16084:	svccc	0x008ccccd
   16088:	svccc	0x004ccccd
   1608c:	svcmi	0x00800000
   16090:	push	{r4, sl, fp, lr}
   16094:	add	fp, sp, #8
   16098:	sub	sp, sp, #8
   1609c:	add	r2, sp, #4
   160a0:	mov	r4, r1
   160a4:	bl	15d4c <__assert_fail@plt+0x49a8>
   160a8:	cmn	r0, #1
   160ac:	beq	160c0 <__assert_fail@plt+0x4d1c>
   160b0:	ldr	r1, [sp, #4]
   160b4:	cmp	r0, #0
   160b8:	moveq	r4, r1
   160bc:	b	160c4 <__assert_fail@plt+0x4d20>
   160c0:	mov	r4, #0
   160c4:	mov	r0, r4
   160c8:	sub	sp, fp, #8
   160cc:	pop	{r4, sl, fp, pc}
   160d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   160d4:	add	fp, sp, #24
   160d8:	mov	r9, r1
   160dc:	ldr	r1, [r0, #8]
   160e0:	ldr	r2, [r0, #24]
   160e4:	mov	r5, r0
   160e8:	mov	r0, r9
   160ec:	blx	r2
   160f0:	mov	r7, r0
   160f4:	ldr	r0, [r5, #8]
   160f8:	cmp	r7, r0
   160fc:	bcs	16360 <__assert_fail@plt+0x4fbc>
   16100:	ldr	r6, [r5]
   16104:	mov	r8, #0
   16108:	mov	r4, r6
   1610c:	ldr	r1, [r4, r7, lsl #3]!
   16110:	cmp	r1, #0
   16114:	beq	161c8 <__assert_fail@plt+0x4e24>
   16118:	cmp	r1, r9
   1611c:	beq	16138 <__assert_fail@plt+0x4d94>
   16120:	ldr	r2, [r5, #28]
   16124:	mov	r0, r9
   16128:	blx	r2
   1612c:	cmp	r0, #0
   16130:	beq	16170 <__assert_fail@plt+0x4dcc>
   16134:	ldr	r9, [r4]
   16138:	add	r0, r6, r7, lsl #3
   1613c:	ldr	r0, [r0, #4]
   16140:	cmp	r0, #0
   16144:	beq	161b8 <__assert_fail@plt+0x4e14>
   16148:	ldm	r0, {r1, r2}
   1614c:	stm	r4, {r1, r2}
   16150:	mov	r1, #0
   16154:	str	r1, [r0]
   16158:	ldr	r1, [r5, #36]	; 0x24
   1615c:	str	r1, [r0, #4]
   16160:	str	r0, [r5, #36]	; 0x24
   16164:	cmp	r9, #0
   16168:	bne	16200 <__assert_fail@plt+0x4e5c>
   1616c:	b	161c8 <__assert_fail@plt+0x4e24>
   16170:	add	r7, r6, r7, lsl #3
   16174:	ldr	r0, [r7, #4]!
   16178:	cmp	r0, #0
   1617c:	beq	161c8 <__assert_fail@plt+0x4e24>
   16180:	ldr	r1, [r0]
   16184:	cmp	r1, r9
   16188:	beq	161d0 <__assert_fail@plt+0x4e2c>
   1618c:	ldr	r2, [r5, #28]
   16190:	mov	r0, r9
   16194:	blx	r2
   16198:	ldr	r1, [r7]
   1619c:	cmp	r0, #0
   161a0:	bne	161d8 <__assert_fail@plt+0x4e34>
   161a4:	ldr	r0, [r1, #4]!
   161a8:	mov	r7, r1
   161ac:	cmp	r0, #0
   161b0:	bne	16180 <__assert_fail@plt+0x4ddc>
   161b4:	b	161c8 <__assert_fail@plt+0x4e24>
   161b8:	mov	r0, #0
   161bc:	str	r0, [r4]
   161c0:	cmp	r9, #0
   161c4:	bne	16200 <__assert_fail@plt+0x4e5c>
   161c8:	mov	r0, r8
   161cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   161d0:	mov	r1, r0
   161d4:	b	161dc <__assert_fail@plt+0x4e38>
   161d8:	ldr	r9, [r1]
   161dc:	ldr	r0, [r1, #4]
   161e0:	str	r0, [r7]
   161e4:	mov	r0, #0
   161e8:	str	r0, [r1]
   161ec:	ldr	r0, [r5, #36]	; 0x24
   161f0:	str	r0, [r1, #4]
   161f4:	str	r1, [r5, #36]	; 0x24
   161f8:	cmp	r9, #0
   161fc:	beq	161c8 <__assert_fail@plt+0x4e24>
   16200:	ldr	r0, [r5, #16]
   16204:	sub	r0, r0, #1
   16208:	str	r0, [r5, #16]
   1620c:	ldr	r0, [r4]
   16210:	cmp	r0, #0
   16214:	bne	16354 <__assert_fail@plt+0x4fb0>
   16218:	ldr	r0, [r5, #12]
   1621c:	vldr	s0, [r5, #8]
   16220:	sub	r1, r0, #1
   16224:	str	r1, [r5, #12]
   16228:	vmov	s2, r1
   1622c:	ldr	r0, [r5, #20]
   16230:	vcvt.f32.u32	s0, s0
   16234:	vcvt.f32.u32	s2, s2
   16238:	vldr	s4, [r0]
   1623c:	vmul.f32	s6, s4, s0
   16240:	vcmpe.f32	s6, s2
   16244:	vmrs	APSR_nzcv, fpscr
   16248:	ble	16354 <__assert_fail@plt+0x4fb0>
   1624c:	movw	r1, #43632	; 0xaa70
   16250:	movt	r1, #1
   16254:	cmp	r0, r1
   16258:	beq	162e4 <__assert_fail@plt+0x4f40>
   1625c:	vldr	s8, [pc, #256]	; 16364 <__assert_fail@plt+0x4fc0>
   16260:	vldr	s6, [r0, #8]
   16264:	vcmpe.f32	s6, s8
   16268:	vmrs	APSR_nzcv, fpscr
   1626c:	ble	162d0 <__assert_fail@plt+0x4f2c>
   16270:	vldr	s10, [pc, #240]	; 16368 <__assert_fail@plt+0x4fc4>
   16274:	vcmpe.f32	s6, s10
   16278:	vmrs	APSR_nzcv, fpscr
   1627c:	bpl	162d0 <__assert_fail@plt+0x4f2c>
   16280:	vcmpe.f32	s4, #0.0
   16284:	vmrs	APSR_nzcv, fpscr
   16288:	blt	162d0 <__assert_fail@plt+0x4f2c>
   1628c:	vldr	s10, [r0, #12]
   16290:	vldr	s12, [pc, #212]	; 1636c <__assert_fail@plt+0x4fc8>
   16294:	vcmpe.f32	s10, s12
   16298:	vmrs	APSR_nzcv, fpscr
   1629c:	ble	162d0 <__assert_fail@plt+0x4f2c>
   162a0:	vadd.f32	s8, s4, s8
   162a4:	vcmpe.f32	s8, s6
   162a8:	vmrs	APSR_nzcv, fpscr
   162ac:	bpl	162d0 <__assert_fail@plt+0x4f2c>
   162b0:	vldr	s6, [r0, #4]
   162b4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   162b8:	vcmpe.f32	s6, s10
   162bc:	vmrs	APSR_nzcv, fpscr
   162c0:	bhi	162d0 <__assert_fail@plt+0x4f2c>
   162c4:	vcmpe.f32	s8, s6
   162c8:	vmrs	APSR_nzcv, fpscr
   162cc:	bmi	162e8 <__assert_fail@plt+0x4f44>
   162d0:	vldr	s4, [pc, #152]	; 16370 <__assert_fail@plt+0x4fcc>
   162d4:	movw	r0, #43632	; 0xaa70
   162d8:	movt	r0, #1
   162dc:	str	r0, [r5, #20]
   162e0:	b	162e8 <__assert_fail@plt+0x4f44>
   162e4:	mov	r0, r1
   162e8:	vmul.f32	s4, s4, s0
   162ec:	vcmpe.f32	s4, s2
   162f0:	vmrs	APSR_nzcv, fpscr
   162f4:	ble	16354 <__assert_fail@plt+0x4fb0>
   162f8:	vldr	s2, [r0, #4]
   162fc:	ldrb	r1, [r0, #16]
   16300:	cmp	r1, #0
   16304:	vmul.f32	s0, s2, s0
   16308:	bne	16314 <__assert_fail@plt+0x4f70>
   1630c:	vldr	s2, [r0, #8]
   16310:	vmul.f32	s0, s0, s2
   16314:	vcvt.u32.f32	s0, s0
   16318:	mov	r0, r5
   1631c:	vmov	r1, s0
   16320:	bl	15944 <__assert_fail@plt+0x45a0>
   16324:	cmp	r0, #0
   16328:	bne	16354 <__assert_fail@plt+0x4fb0>
   1632c:	ldr	r0, [r5, #36]	; 0x24
   16330:	cmp	r0, #0
   16334:	beq	1634c <__assert_fail@plt+0x4fa8>
   16338:	ldr	r4, [r0, #4]
   1633c:	bl	19ac8 <__assert_fail@plt+0x8724>
   16340:	cmp	r4, #0
   16344:	mov	r0, r4
   16348:	bne	16338 <__assert_fail@plt+0x4f94>
   1634c:	mov	r0, #0
   16350:	str	r0, [r5, #36]	; 0x24
   16354:	mov	r8, r9
   16358:	mov	r0, r8
   1635c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16360:	bl	11374 <abort@plt>
   16364:	stclcc	12, cr12, [ip, #820]	; 0x334
   16368:	svccc	0x00666666
   1636c:	svccc	0x008ccccd
   16370:	andeq	r0, r0, r0
   16374:	b	160d0 <__assert_fail@plt+0x4d2c>
   16378:	vdup.32	q8, r1
   1637c:	mov	r2, #0
   16380:	str	r2, [r0, #20]
   16384:	str	r2, [r0, #24]
   16388:	mov	r2, #1
   1638c:	strb	r2, [r0, #28]
   16390:	vst1.32	{d16-d17}, [r0]!
   16394:	str	r1, [r0]
   16398:	bx	lr
   1639c:	ldrb	r0, [r0, #28]
   163a0:	bx	lr
   163a4:	push	{fp, lr}
   163a8:	mov	fp, sp
   163ac:	ldrb	r3, [r0, #28]
   163b0:	ldr	r2, [r0, #20]
   163b4:	eor	lr, r3, #1
   163b8:	add	r2, r2, lr
   163bc:	and	r3, r2, #3
   163c0:	ldr	ip, [r0, r3, lsl #2]
   163c4:	str	r1, [r0, r3, lsl #2]
   163c8:	str	r3, [r0, #20]
   163cc:	ldr	r1, [r0, #24]
   163d0:	cmp	r3, r1
   163d4:	addeq	r1, r2, lr
   163d8:	andeq	r1, r1, #3
   163dc:	streq	r1, [r0, #24]
   163e0:	mov	r1, #0
   163e4:	strb	r1, [r0, #28]
   163e8:	mov	r0, ip
   163ec:	pop	{fp, pc}
   163f0:	push	{fp, lr}
   163f4:	mov	fp, sp
   163f8:	ldrb	r1, [r0, #28]
   163fc:	cmp	r1, #0
   16400:	bne	1643c <__assert_fail@plt+0x5098>
   16404:	ldr	r3, [r0, #20]
   16408:	ldr	r2, [r0, #16]
   1640c:	ldr	r1, [r0, r3, lsl #2]
   16410:	str	r2, [r0, r3, lsl #2]
   16414:	ldr	r2, [r0, #20]
   16418:	ldr	r3, [r0, #24]
   1641c:	cmp	r2, r3
   16420:	moveq	r2, #1
   16424:	strbeq	r2, [r0, #28]
   16428:	subne	r2, r2, #1
   1642c:	andne	r2, r2, #3
   16430:	strne	r2, [r0, #20]
   16434:	mov	r0, r1
   16438:	pop	{fp, pc}
   1643c:	bl	11374 <abort@plt>
   16440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16444:	add	fp, sp, #28
   16448:	sub	sp, sp, #4
   1644c:	ldrb	r1, [r0]
   16450:	mov	r4, r0
   16454:	and	r0, r1, #248	; 0xf8
   16458:	cmp	r0, #48	; 0x30
   1645c:	bne	164a8 <__assert_fail@plt+0x5104>
   16460:	mov	r0, #0
   16464:	mov	r5, #0
   16468:	mov	r2, r4
   1646c:	lsl	r3, r5, #3
   16470:	uxtab	r1, r3, r1
   16474:	sub	r5, r1, #48	; 0x30
   16478:	cmp	r0, r5, lsr #12
   1647c:	bne	164a0 <__assert_fail@plt+0x50fc>
   16480:	ldrb	r1, [r2, #1]
   16484:	add	r6, r2, #1
   16488:	and	r2, r1, #248	; 0xf8
   1648c:	cmp	r2, #48	; 0x30
   16490:	mov	r2, r6
   16494:	beq	1646c <__assert_fail@plt+0x50c8>
   16498:	cmp	r1, #0
   1649c:	beq	16800 <__assert_fail@plt+0x545c>
   164a0:	sub	sp, fp, #28
   164a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a8:	movw	sl, #5
   164ac:	mov	r2, #1
   164b0:	mvn	r3, #42	; 0x2a
   164b4:	mov	r7, #1
   164b8:	mov	r0, #1
   164bc:	movt	sl, #4
   164c0:	b	164dc <__assert_fail@plt+0x5138>
   164c4:	cmp	r1, #0
   164c8:	beq	164fc <__assert_fail@plt+0x5158>
   164cc:	mov	r6, #0
   164d0:	ldrb	r1, [r4, r7]
   164d4:	add	r0, r6, r0
   164d8:	add	r7, r7, #1
   164dc:	uxtab	r6, r3, r1
   164e0:	uxtb	r1, r1
   164e4:	cmp	r6, #18
   164e8:	bhi	164c4 <__assert_fail@plt+0x5120>
   164ec:	tst	sl, r2, lsl r6
   164f0:	mov	r6, #1
   164f4:	bne	164d0 <__assert_fail@plt+0x512c>
   164f8:	b	164c4 <__assert_fail@plt+0x5120>
   164fc:	mov	r1, #16
   16500:	bl	1903c <__assert_fail@plt+0x7c98>
   16504:	mov	r9, #0
   16508:	mov	ip, #1
   1650c:	mvn	lr, #87	; 0x57
   16510:	mov	r8, #0
   16514:	mov	r2, #0
   16518:	b	16528 <__assert_fail@plt+0x5184>
   1651c:	movw	r1, #4095	; 0xfff
   16520:	orr	r2, r2, r1
   16524:	add	r4, r4, #1
   16528:	ldrb	r6, [r4]
   1652c:	sub	r3, r6, #97	; 0x61
   16530:	cmp	r3, #20
   16534:	bhi	165a8 <__assert_fail@plt+0x5204>
   16538:	add	r5, pc, #4
   1653c:	mov	r1, #2496	; 0x9c0
   16540:	ldr	pc, [r5, r3, lsl #2]
   16544:	andeq	r6, r1, ip, lsl r5
   16548:	andeq	r6, r1, r0, ror #16
   1654c:	andeq	r6, r1, r0, ror #16
   16550:	andeq	r6, r1, r0, ror #16
   16554:	andeq	r6, r1, r0, ror #16
   16558:	andeq	r6, r1, r0, ror #16
   1655c:	muleq	r1, r8, r5
   16560:	andeq	r6, r1, r0, ror #16
   16564:	andeq	r6, r1, r0, ror #16
   16568:	andeq	r6, r1, r0, ror #16
   1656c:	andeq	r6, r1, r0, ror #16
   16570:	andeq	r6, r1, r0, ror #16
   16574:	andeq	r6, r1, r0, ror #16
   16578:	andeq	r6, r1, r0, ror #16
   1657c:	andeq	r6, r1, r0, lsr #11
   16580:	andeq	r6, r1, r0, ror #16
   16584:	andeq	r6, r1, r0, ror #16
   16588:	andeq	r6, r1, r0, ror #16
   1658c:	andeq	r6, r1, r0, ror #16
   16590:	andeq	r6, r1, r0, ror #16
   16594:	andeq	r6, r1, r0, lsr #10
   16598:	movw	r1, #1080	; 0x438
   1659c:	b	16520 <__assert_fail@plt+0x517c>
   165a0:	movw	r1, #519	; 0x207
   165a4:	b	16520 <__assert_fail@plt+0x517c>
   165a8:	sub	r1, r6, #43	; 0x2b
   165ac:	cmp	r1, #18
   165b0:	bhi	16860 <__assert_fail@plt+0x54bc>
   165b4:	tst	sl, ip, lsl r1
   165b8:	beq	16860 <__assert_fail@plt+0x54bc>
   165bc:	ldrb	r1, [r4, #1]
   165c0:	sub	r3, r1, #48	; 0x30
   165c4:	cmp	r3, #8
   165c8:	bcs	16624 <__assert_fail@plt+0x5280>
   165cc:	add	r3, r4, #2
   165d0:	mov	r7, #0
   165d4:	lsl	r4, r7, #3
   165d8:	uxtab	r1, r4, r1
   165dc:	sub	r7, r1, #48	; 0x30
   165e0:	cmp	r9, r7, lsr #12
   165e4:	bne	16860 <__assert_fail@plt+0x54bc>
   165e8:	ldrb	r1, [r3], #1
   165ec:	and	r4, r1, #248	; 0xf8
   165f0:	cmp	r4, #48	; 0x30
   165f4:	beq	165d4 <__assert_fail@plt+0x5230>
   165f8:	cmp	r2, #0
   165fc:	bne	16860 <__assert_fail@plt+0x54bc>
   16600:	sub	r4, r3, #1
   16604:	mov	r5, #1
   16608:	movw	r2, #4095	; 0xfff
   1660c:	cmp	r1, #0
   16610:	beq	16650 <__assert_fail@plt+0x52ac>
   16614:	cmp	r1, #44	; 0x2c
   16618:	movw	r1, #4095	; 0xfff
   1661c:	beq	1675c <__assert_fail@plt+0x53b8>
   16620:	b	16860 <__assert_fail@plt+0x54bc>
   16624:	add	r4, r4, #2
   16628:	cmp	r1, #103	; 0x67
   1662c:	beq	16658 <__assert_fail@plt+0x52b4>
   16630:	cmp	r1, #111	; 0x6f
   16634:	beq	16668 <__assert_fail@plt+0x52c4>
   16638:	cmp	r1, #117	; 0x75
   1663c:	bne	16678 <__assert_fail@plt+0x52d4>
   16640:	mov	r5, #3
   16644:	mov	r1, #0
   16648:	mov	r7, #448	; 0x1c0
   1664c:	b	1675c <__assert_fail@plt+0x53b8>
   16650:	movw	r1, #4095	; 0xfff
   16654:	b	1675c <__assert_fail@plt+0x53b8>
   16658:	mov	r5, #3
   1665c:	mov	r1, #0
   16660:	mov	r7, #56	; 0x38
   16664:	b	1675c <__assert_fail@plt+0x53b8>
   16668:	mov	r5, #3
   1666c:	mov	r1, #0
   16670:	mov	r7, #7
   16674:	b	1675c <__assert_fail@plt+0x53b8>
   16678:	mov	r3, #1
   1667c:	mov	r7, #0
   16680:	b	16690 <__assert_fail@plt+0x52ec>
   16684:	orr	r7, r7, #512	; 0x200
   16688:	mov	r3, r5
   1668c:	ldrb	r1, [r4], #1
   16690:	uxtab	r1, lr, r1
   16694:	mov	r5, r3
   16698:	cmp	r1, #32
   1669c:	bhi	16750 <__assert_fail@plt+0x53ac>
   166a0:	add	ip, pc, #4
   166a4:	mov	r3, #2
   166a8:	ldr	pc, [ip, r1, lsl #2]
   166ac:	andeq	r6, r1, ip, lsl #13
   166b0:	andeq	r6, r1, r0, asr r7
   166b4:	andeq	r6, r1, r0, asr r7
   166b8:	andeq	r6, r1, r0, asr r7
   166bc:	andeq	r6, r1, r0, asr r7
   166c0:	andeq	r6, r1, r0, asr r7
   166c4:	andeq	r6, r1, r0, asr r7
   166c8:	andeq	r6, r1, r0, asr r7
   166cc:	andeq	r6, r1, r0, asr r7
   166d0:	andeq	r6, r1, r0, asr r7
   166d4:	andeq	r6, r1, r0, asr r7
   166d8:	andeq	r6, r1, r0, asr r7
   166dc:	andeq	r6, r1, r0, asr r7
   166e0:	andeq	r6, r1, r0, asr r7
   166e4:	andeq	r6, r1, r0, asr r7
   166e8:	andeq	r6, r1, r0, asr r7
   166ec:	andeq	r6, r1, r0, asr r7
   166f0:	andeq	r6, r1, r0, asr r7
   166f4:	andeq	r6, r1, r0, asr r7
   166f8:	andeq	r6, r1, r0, asr r7
   166fc:	andeq	r6, r1, r0, asr r7
   16700:	andeq	r6, r1, r0, asr r7
   16704:	andeq	r6, r1, r0, asr r7
   16708:	andeq	r6, r1, r0, asr r7
   1670c:	andeq	r6, r1, r0, asr r7
   16710:	andeq	r6, r1, r0, asr r7
   16714:	andeq	r6, r1, r0, lsr r7
   16718:	andeq	r6, r1, r8, lsr r7
   1671c:	andeq	r6, r1, r4, lsl #13
   16720:	andeq	r6, r1, r0, asr r7
   16724:	andeq	r6, r1, r0, asr r7
   16728:	andeq	r6, r1, r0, asr #14
   1672c:	andeq	r6, r1, r8, asr #14
   16730:	orr	r7, r7, #292	; 0x124
   16734:	b	16688 <__assert_fail@plt+0x52e4>
   16738:	orr	r7, r7, #3072	; 0xc00
   1673c:	b	16688 <__assert_fail@plt+0x52e4>
   16740:	orr	r7, r7, #146	; 0x92
   16744:	b	16688 <__assert_fail@plt+0x52e4>
   16748:	orr	r7, r7, #73	; 0x49
   1674c:	b	16688 <__assert_fail@plt+0x52e4>
   16750:	sub	r4, r4, #1
   16754:	mov	r1, #0
   16758:	mov	ip, #1
   1675c:	mov	r3, r0
   16760:	cmp	r1, #0
   16764:	strb	r6, [r3, r8, lsl #4]!
   16768:	stmib	r3, {r2, r7}
   1676c:	strb	r5, [r3, #1]
   16770:	bne	16780 <__assert_fail@plt+0x53dc>
   16774:	cmp	r2, #0
   16778:	andne	r7, r7, r2
   1677c:	mov	r1, r7
   16780:	add	r7, r0, r8, lsl #4
   16784:	add	r3, r8, #1
   16788:	str	r1, [r7, #12]
   1678c:	ldrb	r6, [r4]
   16790:	sub	r1, r6, #43	; 0x2b
   16794:	cmp	r1, #18
   16798:	bhi	16844 <__assert_fail@plt+0x54a0>
   1679c:	add	r7, pc, #4
   167a0:	mov	r8, r3
   167a4:	ldr	pc, [r7, r1, lsl #2]
   167a8:			; <UNDEFINED> instruction: 0x000165bc
   167ac:	strdeq	r6, [r1], -r4
   167b0:			; <UNDEFINED> instruction: 0x000165bc
   167b4:	andeq	r6, r1, r0, ror #16
   167b8:	andeq	r6, r1, r0, ror #16
   167bc:	andeq	r6, r1, r0, ror #16
   167c0:	andeq	r6, r1, r0, ror #16
   167c4:	andeq	r6, r1, r0, ror #16
   167c8:	andeq	r6, r1, r0, ror #16
   167cc:	andeq	r6, r1, r0, ror #16
   167d0:	andeq	r6, r1, r0, ror #16
   167d4:	andeq	r6, r1, r0, ror #16
   167d8:	andeq	r6, r1, r0, ror #16
   167dc:	andeq	r6, r1, r0, ror #16
   167e0:	andeq	r6, r1, r0, ror #16
   167e4:	andeq	r6, r1, r0, ror #16
   167e8:	andeq	r6, r1, r0, ror #16
   167ec:	andeq	r6, r1, r0, ror #16
   167f0:			; <UNDEFINED> instruction: 0x000165bc
   167f4:	add	r4, r4, #1
   167f8:	mov	r8, r3
   167fc:	b	16514 <__assert_fail@plt+0x5170>
   16800:	mov	r0, #32
   16804:	bl	18f6c <__assert_fail@plt+0x7bc8>
   16808:	mov	r1, #0
   1680c:	movw	r2, #317	; 0x13d
   16810:	and	r3, r5, #3072	; 0xc00
   16814:	movw	r7, #1023	; 0x3ff
   16818:	strb	r1, [r0, #17]
   1681c:	strh	r2, [r0]
   16820:	sub	r2, r6, r4
   16824:	movw	r1, #4095	; 0xfff
   16828:	cmp	r2, #5
   1682c:	str	r1, [r0, #4]
   16830:	str	r5, [r0, #8]
   16834:	orrlt	r1, r3, r7
   16838:	str	r1, [r0, #12]
   1683c:	sub	sp, fp, #28
   16840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16844:	cmp	r6, #0
   16848:	bne	16860 <__assert_fail@plt+0x54bc>
   1684c:	add	r1, r0, r3, lsl #4
   16850:	mov	r2, #0
   16854:	strb	r2, [r1, #1]
   16858:	sub	sp, fp, #28
   1685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16860:	bl	19ac8 <__assert_fail@plt+0x8724>
   16864:	mov	r0, #0
   16868:	sub	sp, fp, #28
   1686c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16870:	push	{r4, sl, fp, lr}
   16874:	add	fp, sp, #8
   16878:	sub	sp, sp, #104	; 0x68
   1687c:	mov	r1, r0
   16880:	mov	r2, sp
   16884:	mov	r0, #3
   16888:	bl	1135c <__xstat64@plt>
   1688c:	mov	r1, r0
   16890:	mov	r0, #0
   16894:	cmp	r1, #0
   16898:	beq	168a4 <__assert_fail@plt+0x5500>
   1689c:	sub	sp, fp, #8
   168a0:	pop	{r4, sl, fp, pc}
   168a4:	ldr	r4, [sp, #16]
   168a8:	mov	r0, #32
   168ac:	bl	18f6c <__assert_fail@plt+0x7bc8>
   168b0:	mov	r1, #0
   168b4:	strb	r1, [r0, #17]
   168b8:	movw	r1, #4095	; 0xfff
   168bc:	stmib	r0, {r1, r4}
   168c0:	str	r1, [r0, #12]
   168c4:	movw	r1, #317	; 0x13d
   168c8:	strh	r1, [r0]
   168cc:	sub	sp, fp, #8
   168d0:	pop	{r4, sl, fp, pc}
   168d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   168d8:	add	fp, sp, #24
   168dc:	ldrb	r4, [r3, #1]
   168e0:	ldr	ip, [fp, #8]
   168e4:	bfc	r0, #12, #20
   168e8:	cmp	r4, #0
   168ec:	beq	169cc <__assert_fail@plt+0x5628>
   168f0:	cmp	r1, #0
   168f4:	mov	lr, r1
   168f8:	add	r3, r3, #8
   168fc:	mov	r9, #0
   16900:	movw	r8, #4095	; 0xfff
   16904:	movwne	lr, #3072	; 0xc00
   16908:	b	16924 <__assert_fail@plt+0x5580>
   1690c:	bic	r0, r0, r3
   16910:	orr	r9, r3, r9
   16914:	ldrb	r4, [r5, #9]
   16918:	add	r3, r5, #16
   1691c:	cmp	r4, #0
   16920:	beq	169d0 <__assert_fail@plt+0x562c>
   16924:	mov	r5, r3
   16928:	ldr	r7, [r3, #-4]
   1692c:	ldr	r3, [r3]
   16930:	uxtb	r4, r4
   16934:	ldr	r6, [r5, #4]
   16938:	cmp	r4, #2
   1693c:	bic	r6, lr, r6
   16940:	beq	1696c <__assert_fail@plt+0x55c8>
   16944:	cmp	r4, #3
   16948:	bne	16978 <__assert_fail@plt+0x55d4>
   1694c:	and	r4, r3, r0
   16950:	tst	r4, #146	; 0x92
   16954:	mov	r3, r4
   16958:	orrne	r3, r3, #146	; 0x92
   1695c:	tst	r4, #292	; 0x124
   16960:	orrne	r3, r3, #292	; 0x124
   16964:	tst	r4, #73	; 0x49
   16968:	b	16974 <__assert_fail@plt+0x55d0>
   1696c:	and	r4, r0, #73	; 0x49
   16970:	orrs	r4, r4, r1
   16974:	orrne	r3, r3, #73	; 0x49
   16978:	cmp	r7, #0
   1697c:	mov	r4, r7
   16980:	mvneq	r4, r2
   16984:	bic	r4, r4, r6
   16988:	and	r3, r4, r3
   1698c:	ldrb	r4, [r5, #-8]
   16990:	cmp	r4, #43	; 0x2b
   16994:	beq	169c4 <__assert_fail@plt+0x5620>
   16998:	cmp	r4, #45	; 0x2d
   1699c:	beq	1690c <__assert_fail@plt+0x5568>
   169a0:	cmp	r4, #61	; 0x3d
   169a4:	bne	16914 <__assert_fail@plt+0x5570>
   169a8:	mvn	r4, r7
   169ac:	cmp	r7, #0
   169b0:	orrne	r6, r6, r4
   169b4:	and	r0, r6, r0
   169b8:	orr	r0, r3, r0
   169bc:	bic	r3, r8, r6
   169c0:	b	16910 <__assert_fail@plt+0x556c>
   169c4:	orr	r0, r3, r0
   169c8:	b	16910 <__assert_fail@plt+0x556c>
   169cc:	mov	r9, #0
   169d0:	cmp	ip, #0
   169d4:	strne	r9, [ip]
   169d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169dc:	sub	sp, sp, #4
   169e0:	push	{fp, lr}
   169e4:	mov	fp, sp
   169e8:	sub	sp, sp, #4
   169ec:	str	r3, [fp, #8]
   169f0:	tst	r2, #64	; 0x40
   169f4:	mov	r3, #0
   169f8:	ldrne	r3, [fp, #8]
   169fc:	bl	11248 <openat64@plt>
   16a00:	bl	1886c <__assert_fail@plt+0x74c8>
   16a04:	mov	sp, fp
   16a08:	pop	{fp, lr}
   16a0c:	add	sp, sp, #4
   16a10:	bx	lr
   16a14:	push	{r4, r5, r6, sl, fp, lr}
   16a18:	add	fp, sp, #16
   16a1c:	orr	r2, r2, #18688	; 0x4900
   16a20:	mov	r4, r3
   16a24:	orr	r2, r2, #524288	; 0x80000
   16a28:	bl	169dc <__assert_fail@plt+0x5638>
   16a2c:	mov	r5, r0
   16a30:	mov	r0, #0
   16a34:	cmp	r5, #0
   16a38:	bmi	16a70 <__assert_fail@plt+0x56cc>
   16a3c:	mov	r0, r5
   16a40:	bl	11308 <fdopendir@plt>
   16a44:	cmp	r0, #0
   16a48:	beq	16a54 <__assert_fail@plt+0x56b0>
   16a4c:	str	r5, [r4]
   16a50:	pop	{r4, r5, r6, sl, fp, pc}
   16a54:	bl	11260 <__errno_location@plt>
   16a58:	ldr	r6, [r0]
   16a5c:	mov	r4, r0
   16a60:	mov	r0, r5
   16a64:	bl	11380 <close@plt>
   16a68:	mov	r0, #0
   16a6c:	str	r6, [r4]
   16a70:	pop	{r4, r5, r6, sl, fp, pc}
   16a74:	push	{r4, r5, fp, lr}
   16a78:	add	fp, sp, #8
   16a7c:	cmp	r0, #0
   16a80:	beq	16b14 <__assert_fail@plt+0x5770>
   16a84:	mov	r1, #47	; 0x2f
   16a88:	mov	r4, r0
   16a8c:	bl	112e4 <strrchr@plt>
   16a90:	cmp	r0, #0
   16a94:	mov	r5, r4
   16a98:	addne	r5, r0, #1
   16a9c:	sub	r0, r5, r4
   16aa0:	cmp	r0, #7
   16aa4:	blt	16af8 <__assert_fail@plt+0x5754>
   16aa8:	movw	r1, #43708	; 0xaabc
   16aac:	sub	r0, r5, #7
   16ab0:	mov	r2, #7
   16ab4:	movt	r1, #1
   16ab8:	bl	11368 <strncmp@plt>
   16abc:	cmp	r0, #0
   16ac0:	bne	16af8 <__assert_fail@plt+0x5754>
   16ac4:	movw	r1, #43716	; 0xaac4
   16ac8:	mov	r0, r5
   16acc:	mov	r2, #3
   16ad0:	movt	r1, #1
   16ad4:	bl	11368 <strncmp@plt>
   16ad8:	cmp	r0, #0
   16adc:	beq	16ae8 <__assert_fail@plt+0x5744>
   16ae0:	mov	r4, r5
   16ae4:	b	16af8 <__assert_fail@plt+0x5754>
   16ae8:	movw	r0, #49512	; 0xc168
   16aec:	add	r4, r5, #3
   16af0:	movt	r0, #2
   16af4:	str	r4, [r0]
   16af8:	movw	r0, #49516	; 0xc16c
   16afc:	movt	r0, #2
   16b00:	str	r4, [r0]
   16b04:	movw	r0, #49588	; 0xc1b4
   16b08:	movt	r0, #2
   16b0c:	str	r4, [r0]
   16b10:	pop	{r4, r5, fp, pc}
   16b14:	movw	r0, #49528	; 0xc178
   16b18:	mov	r1, #55	; 0x37
   16b1c:	mov	r2, #1
   16b20:	movt	r0, #2
   16b24:	ldr	r3, [r0]
   16b28:	movw	r0, #43652	; 0xaa84
   16b2c:	movt	r0, #1
   16b30:	bl	11188 <fwrite@plt>
   16b34:	bl	11374 <abort@plt>
   16b38:	push	{r4, r5, r6, sl, fp, lr}
   16b3c:	add	fp, sp, #16
   16b40:	mov	r4, r0
   16b44:	movw	r0, #49592	; 0xc1b8
   16b48:	movt	r0, #2
   16b4c:	cmp	r4, #0
   16b50:	moveq	r4, r0
   16b54:	bl	11260 <__errno_location@plt>
   16b58:	ldr	r6, [r0]
   16b5c:	mov	r5, r0
   16b60:	mov	r0, r4
   16b64:	mov	r1, #48	; 0x30
   16b68:	bl	193cc <__assert_fail@plt+0x8028>
   16b6c:	str	r6, [r5]
   16b70:	pop	{r4, r5, r6, sl, fp, pc}
   16b74:	movw	r1, #49592	; 0xc1b8
   16b78:	cmp	r0, #0
   16b7c:	movt	r1, #2
   16b80:	movne	r1, r0
   16b84:	ldr	r0, [r1]
   16b88:	bx	lr
   16b8c:	movw	r2, #49592	; 0xc1b8
   16b90:	cmp	r0, #0
   16b94:	movt	r2, #2
   16b98:	movne	r2, r0
   16b9c:	str	r1, [r2]
   16ba0:	bx	lr
   16ba4:	movw	r3, #49592	; 0xc1b8
   16ba8:	cmp	r0, #0
   16bac:	and	r2, r2, #1
   16bb0:	movt	r3, #2
   16bb4:	movne	r3, r0
   16bb8:	ubfx	r0, r1, #5, #3
   16bbc:	and	r1, r1, #31
   16bc0:	add	ip, r3, r0, lsl #2
   16bc4:	mov	r0, #1
   16bc8:	ldr	r3, [ip, #8]
   16bcc:	and	r0, r0, r3, lsr r1
   16bd0:	eor	r2, r0, r2
   16bd4:	eor	r1, r3, r2, lsl r1
   16bd8:	str	r1, [ip, #8]
   16bdc:	bx	lr
   16be0:	movw	r2, #49592	; 0xc1b8
   16be4:	cmp	r0, #0
   16be8:	movt	r2, #2
   16bec:	movne	r2, r0
   16bf0:	ldr	r0, [r2, #4]
   16bf4:	str	r1, [r2, #4]
   16bf8:	bx	lr
   16bfc:	push	{fp, lr}
   16c00:	mov	fp, sp
   16c04:	movw	r3, #49592	; 0xc1b8
   16c08:	cmp	r0, #0
   16c0c:	movt	r3, #2
   16c10:	movne	r3, r0
   16c14:	cmp	r1, #0
   16c18:	mov	r0, #10
   16c1c:	cmpne	r2, #0
   16c20:	str	r0, [r3]
   16c24:	bne	16c2c <__assert_fail@plt+0x5888>
   16c28:	bl	11374 <abort@plt>
   16c2c:	str	r1, [r3, #40]	; 0x28
   16c30:	str	r2, [r3, #44]	; 0x2c
   16c34:	pop	{fp, pc}
   16c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c3c:	add	fp, sp, #28
   16c40:	sub	sp, sp, #20
   16c44:	mov	r7, r0
   16c48:	ldr	r0, [fp, #8]
   16c4c:	movw	r5, #49592	; 0xc1b8
   16c50:	mov	r8, r3
   16c54:	mov	r9, r2
   16c58:	mov	sl, r1
   16c5c:	movt	r5, #2
   16c60:	cmp	r0, #0
   16c64:	movne	r5, r0
   16c68:	bl	11260 <__errno_location@plt>
   16c6c:	ldr	r2, [r5, #40]	; 0x28
   16c70:	ldr	r3, [r5, #44]	; 0x2c
   16c74:	mov	r4, r0
   16c78:	ldm	r5, {r0, r1}
   16c7c:	add	r5, r5, #8
   16c80:	ldr	r6, [r4]
   16c84:	stm	sp, {r0, r1, r5}
   16c88:	mov	r0, r7
   16c8c:	mov	r1, sl
   16c90:	str	r2, [sp, #12]
   16c94:	str	r3, [sp, #16]
   16c98:	mov	r2, r9
   16c9c:	mov	r3, r8
   16ca0:	bl	16cb0 <__assert_fail@plt+0x590c>
   16ca4:	str	r6, [r4]
   16ca8:	sub	sp, fp, #28
   16cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cb4:	add	fp, sp, #28
   16cb8:	sub	sp, sp, #156	; 0x9c
   16cbc:	mov	r5, r0
   16cc0:	add	r0, r2, #1
   16cc4:	mov	r6, r1
   16cc8:	mov	sl, r3
   16ccc:	str	r2, [fp, #-80]	; 0xffffffb0
   16cd0:	str	r0, [sp, #72]	; 0x48
   16cd4:	ldr	r0, [fp, #12]
   16cd8:	and	r1, r0, #1
   16cdc:	str	r1, [sp, #36]	; 0x24
   16ce0:	and	r1, r0, #4
   16ce4:	str	r1, [sp, #32]
   16ce8:	ubfx	r9, r0, #1, #1
   16cec:	bl	111a0 <__ctype_get_mb_cur_max@plt>
   16cf0:	str	r0, [sp, #40]	; 0x28
   16cf4:	ldr	r0, [fp, #24]
   16cf8:	ldr	r7, [fp, #8]
   16cfc:	mov	r1, #0
   16d00:	str	r5, [fp, #-84]	; 0xffffffac
   16d04:	str	r1, [fp, #-56]	; 0xffffffc8
   16d08:	mov	r1, #0
   16d0c:	str	r1, [sp, #60]	; 0x3c
   16d10:	mov	r1, #1
   16d14:	str	r1, [fp, #-48]	; 0xffffffd0
   16d18:	str	r0, [sp, #80]	; 0x50
   16d1c:	ldr	r0, [fp, #20]
   16d20:	str	r0, [sp, #76]	; 0x4c
   16d24:	mov	r0, #0
   16d28:	str	r0, [sp, #56]	; 0x38
   16d2c:	mov	r0, #0
   16d30:	str	r0, [fp, #-88]	; 0xffffffa8
   16d34:	mov	r0, #0
   16d38:	str	r0, [fp, #-72]	; 0xffffffb8
   16d3c:	mov	r0, #0
   16d40:	cmp	r7, #10
   16d44:	bhi	17cd8 <__assert_fail@plt+0x6934>
   16d48:	add	r1, pc, #24
   16d4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16d50:	mov	r4, r6
   16d54:	mov	r8, #0
   16d58:	mov	r2, #1
   16d5c:	mov	r3, #0
   16d60:	mov	lr, sl
   16d64:	ldr	pc, [r1, r7, lsl #2]
   16d68:	andeq	r6, r1, ip, lsr #28
   16d6c:	andeq	r6, r1, r0, lsl #29
   16d70:	andeq	r6, r1, r0, asr #28
   16d74:	andeq	r6, r1, r4, lsr #28
   16d78:	andeq	r6, r1, r4, ror lr
   16d7c:	andeq	r6, r1, r8, lsr #29
   16d80:	andeq	r6, r1, r0, asr lr
   16d84:	andeq	r6, r1, ip, lsr #30
   16d88:	muleq	r1, r4, sp
   16d8c:	muleq	r1, r4, sp
   16d90:			; <UNDEFINED> instruction: 0x00016dbc
   16d94:	movw	r0, #43798	; 0xab16
   16d98:	mov	r1, r7
   16d9c:	movt	r0, #1
   16da0:	bl	186e0 <__assert_fail@plt+0x733c>
   16da4:	str	r0, [sp, #76]	; 0x4c
   16da8:	movw	r0, #43800	; 0xab18
   16dac:	mov	r1, r7
   16db0:	movt	r0, #1
   16db4:	bl	186e0 <__assert_fail@plt+0x733c>
   16db8:	str	r0, [sp, #80]	; 0x50
   16dbc:	mov	r8, #0
   16dc0:	tst	r9, #1
   16dc4:	bne	16dfc <__assert_fail@plt+0x5a58>
   16dc8:	ldr	r0, [sp, #76]	; 0x4c
   16dcc:	ldrb	r0, [r0]
   16dd0:	cmp	r0, #0
   16dd4:	beq	16dfc <__assert_fail@plt+0x5a58>
   16dd8:	ldr	r1, [sp, #76]	; 0x4c
   16ddc:	mov	r8, #0
   16de0:	add	r1, r1, #1
   16de4:	cmp	r8, r4
   16de8:	strbcc	r0, [r5, r8]
   16dec:	ldrb	r0, [r1, r8]
   16df0:	add	r8, r8, #1
   16df4:	cmp	r0, #0
   16df8:	bne	16de4 <__assert_fail@plt+0x5a40>
   16dfc:	ldr	r6, [sp, #80]	; 0x50
   16e00:	mov	r0, r6
   16e04:	bl	1123c <strlen@plt>
   16e08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16e0c:	str	r0, [fp, #-72]	; 0xffffffb8
   16e10:	str	r6, [fp, #-88]	; 0xffffffa8
   16e14:	mov	r2, #1
   16e18:	mov	r3, r9
   16e1c:	mov	lr, sl
   16e20:	b	16f2c <__assert_fail@plt+0x5b88>
   16e24:	mov	r0, #1
   16e28:	b	16e80 <__assert_fail@plt+0x5adc>
   16e2c:	mov	r7, #0
   16e30:	mov	r8, #0
   16e34:	mov	r2, r0
   16e38:	mov	r3, #0
   16e3c:	b	16f2c <__assert_fail@plt+0x5b88>
   16e40:	tst	r9, #1
   16e44:	bne	16e80 <__assert_fail@plt+0x5adc>
   16e48:	mov	r2, r0
   16e4c:	b	16ed8 <__assert_fail@plt+0x5b34>
   16e50:	mov	r0, #1
   16e54:	mov	r8, #0
   16e58:	mov	r7, #5
   16e5c:	mov	r2, #1
   16e60:	str	r0, [fp, #-72]	; 0xffffffb8
   16e64:	movw	r0, #43796	; 0xab14
   16e68:	movt	r0, #1
   16e6c:	str	r0, [fp, #-88]	; 0xffffffa8
   16e70:	b	16ea0 <__assert_fail@plt+0x5afc>
   16e74:	mov	r2, #1
   16e78:	tst	r9, #1
   16e7c:	beq	16ed8 <__assert_fail@plt+0x5b34>
   16e80:	mov	r1, #1
   16e84:	mov	r8, #0
   16e88:	mov	r7, #2
   16e8c:	mov	r2, r0
   16e90:	str	r1, [fp, #-72]	; 0xffffffb8
   16e94:	movw	r1, #43800	; 0xab18
   16e98:	movt	r1, #1
   16e9c:	str	r1, [fp, #-88]	; 0xffffffa8
   16ea0:	mov	r3, #1
   16ea4:	b	16f2c <__assert_fail@plt+0x5b88>
   16ea8:	tst	r9, #1
   16eac:	beq	16efc <__assert_fail@plt+0x5b58>
   16eb0:	mov	r0, #1
   16eb4:	mov	r8, #0
   16eb8:	mov	r2, #1
   16ebc:	mov	r3, #1
   16ec0:	mov	r7, #5
   16ec4:	str	r0, [fp, #-72]	; 0xffffffb8
   16ec8:	movw	r0, #43796	; 0xab14
   16ecc:	movt	r0, #1
   16ed0:	str	r0, [fp, #-88]	; 0xffffffa8
   16ed4:	b	16f2c <__assert_fail@plt+0x5b88>
   16ed8:	cmp	r4, #0
   16edc:	mov	r8, #1
   16ee0:	mov	r3, #0
   16ee4:	mov	r7, #2
   16ee8:	movne	r0, #39	; 0x27
   16eec:	strbne	r0, [r5]
   16ef0:	movw	r0, #43800	; 0xab18
   16ef4:	movt	r0, #1
   16ef8:	b	16f20 <__assert_fail@plt+0x5b7c>
   16efc:	cmp	r4, #0
   16f00:	mov	r8, #1
   16f04:	mov	r2, #1
   16f08:	mov	r7, #5
   16f0c:	mov	r3, #0
   16f10:	movne	r0, #34	; 0x22
   16f14:	strbne	r0, [r5]
   16f18:	movw	r0, #43796	; 0xab14
   16f1c:	movt	r0, #1
   16f20:	str	r0, [fp, #-88]	; 0xffffffa8
   16f24:	mov	r0, #1
   16f28:	str	r0, [fp, #-72]	; 0xffffffb8
   16f2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16f30:	eor	r6, r3, #1
   16f34:	str	r7, [fp, #-68]	; 0xffffffbc
   16f38:	str	r3, [fp, #-76]	; 0xffffffb4
   16f3c:	str	r2, [sp, #84]	; 0x54
   16f40:	str	r6, [sp, #92]	; 0x5c
   16f44:	cmp	r0, #0
   16f48:	movwne	r0, #1
   16f4c:	and	r1, r0, r3
   16f50:	and	r1, r2, r1
   16f54:	str	r1, [sp, #48]	; 0x30
   16f58:	sub	r1, r7, #2
   16f5c:	clz	r1, r1
   16f60:	lsr	r1, r1, #5
   16f64:	and	r1, r1, r3
   16f68:	str	r1, [sp, #64]	; 0x40
   16f6c:	subs	r1, r7, #2
   16f70:	mov	r7, #0
   16f74:	movwne	r1, #1
   16f78:	orr	r6, r1, r6
   16f7c:	and	r1, r1, r2
   16f80:	and	r0, r0, r1
   16f84:	str	r6, [sp, #68]	; 0x44
   16f88:	str	r0, [fp, #-60]	; 0xffffffc4
   16f8c:	orr	r0, r1, r3
   16f90:	ldr	r1, [fp, #16]
   16f94:	eor	r0, r0, #1
   16f98:	clz	r1, r1
   16f9c:	lsr	r1, r1, #5
   16fa0:	orr	r0, r1, r0
   16fa4:	str	r0, [fp, #-64]	; 0xffffffc0
   16fa8:	eor	r0, r2, #1
   16fac:	str	r0, [sp, #52]	; 0x34
   16fb0:	cmn	lr, #1
   16fb4:	beq	16fc4 <__assert_fail@plt+0x5c20>
   16fb8:	cmp	r7, lr
   16fbc:	bne	16fd0 <__assert_fail@plt+0x5c2c>
   16fc0:	b	17b18 <__assert_fail@plt+0x6774>
   16fc4:	ldrb	r0, [ip, r7]
   16fc8:	cmp	r0, #0
   16fcc:	beq	17b20 <__assert_fail@plt+0x677c>
   16fd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16fd4:	mov	sl, #0
   16fd8:	cmp	r0, #0
   16fdc:	beq	17014 <__assert_fail@plt+0x5c70>
   16fe0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16fe4:	add	r5, r7, r0
   16fe8:	cmp	r0, #2
   16fec:	bcc	17008 <__assert_fail@plt+0x5c64>
   16ff0:	cmn	lr, #1
   16ff4:	bne	17008 <__assert_fail@plt+0x5c64>
   16ff8:	mov	r0, ip
   16ffc:	bl	1123c <strlen@plt>
   17000:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17004:	mov	lr, r0
   17008:	cmp	r5, lr
   1700c:	bls	1701c <__assert_fail@plt+0x5c78>
   17010:	ldr	r5, [fp, #-84]	; 0xffffffac
   17014:	mov	r0, #0
   17018:	b	17068 <__assert_fail@plt+0x5cc4>
   1701c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17020:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17024:	add	r0, ip, r7
   17028:	mov	r6, r4
   1702c:	mov	r4, lr
   17030:	bl	11230 <bcmp@plt>
   17034:	ldr	r2, [sp, #92]	; 0x5c
   17038:	cmp	r0, #0
   1703c:	ldr	r5, [fp, #-84]	; 0xffffffac
   17040:	mov	r1, r0
   17044:	movwne	r1, #1
   17048:	orr	r1, r1, r2
   1704c:	tst	r1, #1
   17050:	beq	17ba8 <__assert_fail@plt+0x6804>
   17054:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17058:	clz	r0, r0
   1705c:	mov	lr, r4
   17060:	mov	r4, r6
   17064:	lsr	r0, r0, #5
   17068:	str	r0, [fp, #-52]	; 0xffffffcc
   1706c:	ldrb	r6, [ip, r7]
   17070:	cmp	r6, #126	; 0x7e
   17074:	bhi	175a4 <__assert_fail@plt+0x6200>
   17078:	add	r3, pc, #16
   1707c:	mov	r9, #1
   17080:	mov	r2, #110	; 0x6e
   17084:	mov	r0, #97	; 0x61
   17088:	mov	r1, #0
   1708c:	ldr	pc, [r3, r6, lsl #2]
   17090:	andeq	r7, r1, r4, lsl #8
   17094:	andeq	r7, r1, r4, lsr #11
   17098:	andeq	r7, r1, r4, lsr #11
   1709c:	andeq	r7, r1, r4, lsr #11
   170a0:	andeq	r7, r1, r4, lsr #11
   170a4:	andeq	r7, r1, r4, lsr #11
   170a8:	andeq	r7, r1, r4, lsr #11
   170ac:	andeq	r7, r1, r0, lsl #13
   170b0:	andeq	r7, r1, r4, ror #7
   170b4:	ldrdeq	r7, [r1], -ip
   170b8:	strdeq	r7, [r1], -r0
   170bc:	andeq	r7, r1, ip, lsl #10
   170c0:	ldrdeq	r7, [r1], -r4
   170c4:	andeq	r7, r1, ip, ror #7
   170c8:	andeq	r7, r1, r4, lsr #11
   170cc:	andeq	r7, r1, r4, lsr #11
   170d0:	andeq	r7, r1, r4, lsr #11
   170d4:	andeq	r7, r1, r4, lsr #11
   170d8:	andeq	r7, r1, r4, lsr #11
   170dc:	andeq	r7, r1, r4, lsr #11
   170e0:	andeq	r7, r1, r4, lsr #11
   170e4:	andeq	r7, r1, r4, lsr #11
   170e8:	andeq	r7, r1, r4, lsr #11
   170ec:	andeq	r7, r1, r4, lsr #11
   170f0:	andeq	r7, r1, r4, lsr #11
   170f4:	andeq	r7, r1, r4, lsr #11
   170f8:	andeq	r7, r1, r4, lsr #11
   170fc:	andeq	r7, r1, r4, lsr #11
   17100:	andeq	r7, r1, r4, lsr #11
   17104:	andeq	r7, r1, r4, lsr #11
   17108:	andeq	r7, r1, r4, lsr #11
   1710c:	andeq	r7, r1, r4, lsr #11
   17110:	andeq	r7, r1, r8, lsl #7
   17114:	andeq	r7, r1, ip, lsl #7
   17118:	andeq	r7, r1, ip, lsl #7
   1711c:	andeq	r7, r1, r4, ror r3
   17120:	andeq	r7, r1, ip, lsl #7
   17124:	andeq	r7, r1, ip, lsl #5
   17128:	andeq	r7, r1, ip, lsl #7
   1712c:	andeq	r7, r1, r4, lsl r5
   17130:	andeq	r7, r1, ip, lsl #7
   17134:	andeq	r7, r1, ip, lsl #7
   17138:	andeq	r7, r1, ip, lsl #7
   1713c:	andeq	r7, r1, ip, lsl #5
   17140:	andeq	r7, r1, ip, lsl #5
   17144:	andeq	r7, r1, ip, lsl #5
   17148:	andeq	r7, r1, ip, lsl #5
   1714c:	andeq	r7, r1, ip, lsl #5
   17150:	andeq	r7, r1, ip, lsl #5
   17154:	andeq	r7, r1, ip, lsl #5
   17158:	andeq	r7, r1, ip, lsl #5
   1715c:	andeq	r7, r1, ip, lsl #5
   17160:	andeq	r7, r1, ip, lsl #5
   17164:	andeq	r7, r1, ip, lsl #5
   17168:	andeq	r7, r1, ip, lsl #5
   1716c:	andeq	r7, r1, ip, lsl #5
   17170:	andeq	r7, r1, ip, lsl #5
   17174:	andeq	r7, r1, ip, lsl #5
   17178:	andeq	r7, r1, ip, lsl #5
   1717c:	andeq	r7, r1, ip, lsl #7
   17180:	andeq	r7, r1, ip, lsl #7
   17184:	andeq	r7, r1, ip, lsl #7
   17188:	andeq	r7, r1, ip, lsl #7
   1718c:	ldrdeq	r7, [r1], -ip
   17190:	andeq	r7, r1, r4, lsr #11
   17194:	andeq	r7, r1, ip, lsl #5
   17198:	andeq	r7, r1, ip, lsl #5
   1719c:	andeq	r7, r1, ip, lsl #5
   171a0:	andeq	r7, r1, ip, lsl #5
   171a4:	andeq	r7, r1, ip, lsl #5
   171a8:	andeq	r7, r1, ip, lsl #5
   171ac:	andeq	r7, r1, ip, lsl #5
   171b0:	andeq	r7, r1, ip, lsl #5
   171b4:	andeq	r7, r1, ip, lsl #5
   171b8:	andeq	r7, r1, ip, lsl #5
   171bc:	andeq	r7, r1, ip, lsl #5
   171c0:	andeq	r7, r1, ip, lsl #5
   171c4:	andeq	r7, r1, ip, lsl #5
   171c8:	andeq	r7, r1, ip, lsl #5
   171cc:	andeq	r7, r1, ip, lsl #5
   171d0:	andeq	r7, r1, ip, lsl #5
   171d4:	andeq	r7, r1, ip, lsl #5
   171d8:	andeq	r7, r1, ip, lsl #5
   171dc:	andeq	r7, r1, ip, lsl #5
   171e0:	andeq	r7, r1, ip, lsl #5
   171e4:	andeq	r7, r1, ip, lsl #5
   171e8:	andeq	r7, r1, ip, lsl #5
   171ec:	andeq	r7, r1, ip, lsl #5
   171f0:	andeq	r7, r1, ip, lsl #5
   171f4:	andeq	r7, r1, ip, lsl #5
   171f8:	andeq	r7, r1, ip, lsl #5
   171fc:	andeq	r7, r1, ip, lsl #7
   17200:			; <UNDEFINED> instruction: 0x000173b4
   17204:	andeq	r7, r1, ip, lsl #5
   17208:	andeq	r7, r1, ip, lsl #7
   1720c:	andeq	r7, r1, ip, lsl #5
   17210:	andeq	r7, r1, ip, lsl #7
   17214:	andeq	r7, r1, ip, lsl #5
   17218:	andeq	r7, r1, ip, lsl #5
   1721c:	andeq	r7, r1, ip, lsl #5
   17220:	andeq	r7, r1, ip, lsl #5
   17224:	andeq	r7, r1, ip, lsl #5
   17228:	andeq	r7, r1, ip, lsl #5
   1722c:	andeq	r7, r1, ip, lsl #5
   17230:	andeq	r7, r1, ip, lsl #5
   17234:	andeq	r7, r1, ip, lsl #5
   17238:	andeq	r7, r1, ip, lsl #5
   1723c:	andeq	r7, r1, ip, lsl #5
   17240:	andeq	r7, r1, ip, lsl #5
   17244:	andeq	r7, r1, ip, lsl #5
   17248:	andeq	r7, r1, ip, lsl #5
   1724c:	andeq	r7, r1, ip, lsl #5
   17250:	andeq	r7, r1, ip, lsl #5
   17254:	andeq	r7, r1, ip, lsl #5
   17258:	andeq	r7, r1, ip, lsl #5
   1725c:	andeq	r7, r1, ip, lsl #5
   17260:	andeq	r7, r1, ip, lsl #5
   17264:	andeq	r7, r1, ip, lsl #5
   17268:	andeq	r7, r1, ip, lsl #5
   1726c:	andeq	r7, r1, ip, lsl #5
   17270:	andeq	r7, r1, ip, lsl #5
   17274:	andeq	r7, r1, ip, lsl #5
   17278:	andeq	r7, r1, ip, lsl #5
   1727c:	andeq	r7, r1, r8, asr #6
   17280:	andeq	r7, r1, ip, lsl #7
   17284:	andeq	r7, r1, r8, asr #6
   17288:	andeq	r7, r1, r4, ror r3
   1728c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17290:	tst	r0, #1
   17294:	bne	172c0 <__assert_fail@plt+0x5f1c>
   17298:	ldr	r1, [fp, #16]
   1729c:	ubfx	r0, r6, #5, #3
   172a0:	mov	r2, #1
   172a4:	ldr	r0, [r1, r0, lsl #2]
   172a8:	and	r1, r6, #31
   172ac:	tst	r0, r2, lsl r1
   172b0:	beq	172c0 <__assert_fail@plt+0x5f1c>
   172b4:	mov	r0, r6
   172b8:	mov	r1, r9
   172bc:	b	172d4 <__assert_fail@plt+0x5f30>
   172c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   172c4:	mov	r1, r9
   172c8:	cmp	r0, #0
   172cc:	mov	r0, r6
   172d0:	beq	17614 <__assert_fail@plt+0x6270>
   172d4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   172d8:	tst	r2, #1
   172dc:	bne	17be4 <__assert_fail@plt+0x6840>
   172e0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   172e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   172e8:	subs	r2, r2, #2
   172ec:	movwne	r2, #1
   172f0:	orr	r2, r2, r3
   172f4:	tst	r2, #1
   172f8:	bne	17334 <__assert_fail@plt+0x5f90>
   172fc:	cmp	r8, r4
   17300:	movcc	r2, #39	; 0x27
   17304:	strbcc	r2, [r5, r8]
   17308:	add	r2, r8, #1
   1730c:	cmp	r2, r4
   17310:	movcc	r3, #36	; 0x24
   17314:	strbcc	r3, [r5, r2]
   17318:	add	r2, r8, #2
   1731c:	add	r8, r8, #3
   17320:	cmp	r2, r4
   17324:	movcc	r3, #39	; 0x27
   17328:	strbcc	r3, [r5, r2]
   1732c:	mov	r2, #1
   17330:	str	r2, [fp, #-56]	; 0xffffffc8
   17334:	cmp	r8, r4
   17338:	movcc	r2, #92	; 0x5c
   1733c:	strbcc	r2, [r5, r8]
   17340:	add	r8, r8, #1
   17344:	b	17658 <__assert_fail@plt+0x62b4>
   17348:	cmp	lr, #1
   1734c:	beq	17374 <__assert_fail@plt+0x5fd0>
   17350:	mov	r9, #0
   17354:	cmn	lr, #1
   17358:	bne	17380 <__assert_fail@plt+0x5fdc>
   1735c:	ldrb	r0, [ip, #1]
   17360:	cmp	r0, #0
   17364:	beq	17374 <__assert_fail@plt+0x5fd0>
   17368:	mvn	lr, #0
   1736c:	mov	sl, #0
   17370:	b	1728c <__assert_fail@plt+0x5ee8>
   17374:	mov	r9, #0
   17378:	cmp	r7, #0
   1737c:	beq	17388 <__assert_fail@plt+0x5fe4>
   17380:	mov	sl, #0
   17384:	b	1728c <__assert_fail@plt+0x5ee8>
   17388:	mov	r1, #1
   1738c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17390:	cmp	r0, #2
   17394:	bne	173ac <__assert_fail@plt+0x6008>
   17398:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1739c:	mov	r9, r1
   173a0:	tst	r0, #1
   173a4:	beq	1728c <__assert_fail@plt+0x5ee8>
   173a8:	b	17be4 <__assert_fail@plt+0x6840>
   173ac:	mov	r9, r1
   173b0:	b	1728c <__assert_fail@plt+0x5ee8>
   173b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   173b8:	cmp	r0, #2
   173bc:	bne	175f8 <__assert_fail@plt+0x6254>
   173c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   173c4:	tst	r0, #1
   173c8:	bne	17be4 <__assert_fail@plt+0x6840>
   173cc:	mov	sl, #0
   173d0:	b	1760c <__assert_fail@plt+0x6268>
   173d4:	mov	r0, #102	; 0x66
   173d8:	b	17680 <__assert_fail@plt+0x62dc>
   173dc:	mov	r2, #116	; 0x74
   173e0:	b	173f0 <__assert_fail@plt+0x604c>
   173e4:	mov	r0, #98	; 0x62
   173e8:	b	17680 <__assert_fail@plt+0x62dc>
   173ec:	mov	r2, #114	; 0x72
   173f0:	ldr	r0, [sp, #68]	; 0x44
   173f4:	tst	r0, #1
   173f8:	mov	r0, r2
   173fc:	bne	17680 <__assert_fail@plt+0x62dc>
   17400:	b	17be4 <__assert_fail@plt+0x6840>
   17404:	ldr	r0, [sp, #84]	; 0x54
   17408:	tst	r0, #1
   1740c:	beq	1769c <__assert_fail@plt+0x62f8>
   17410:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17414:	tst	r0, #1
   17418:	bne	17cd0 <__assert_fail@plt+0x692c>
   1741c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17420:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17424:	subs	r0, r0, #2
   17428:	movwne	r0, #1
   1742c:	orr	r0, r0, r1
   17430:	tst	r0, #1
   17434:	bne	17470 <__assert_fail@plt+0x60cc>
   17438:	cmp	r8, r4
   1743c:	movcc	r0, #39	; 0x27
   17440:	strbcc	r0, [r5, r8]
   17444:	add	r0, r8, #1
   17448:	cmp	r0, r4
   1744c:	movcc	r1, #36	; 0x24
   17450:	strbcc	r1, [r5, r0]
   17454:	add	r0, r8, #2
   17458:	add	r8, r8, #3
   1745c:	cmp	r0, r4
   17460:	movcc	r1, #39	; 0x27
   17464:	strbcc	r1, [r5, r0]
   17468:	mov	r0, #1
   1746c:	str	r0, [fp, #-56]	; 0xffffffc8
   17470:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17474:	cmp	r8, r4
   17478:	mov	r9, #0
   1747c:	mov	sl, #1
   17480:	mov	r6, #48	; 0x30
   17484:	movcc	r0, #92	; 0x5c
   17488:	strbcc	r0, [r5, r8]
   1748c:	add	r0, r8, #1
   17490:	cmp	r1, #2
   17494:	beq	17864 <__assert_fail@plt+0x64c0>
   17498:	add	r1, r7, #1
   1749c:	cmp	r1, lr
   174a0:	bcs	17864 <__assert_fail@plt+0x64c0>
   174a4:	ldrb	r1, [ip, r1]
   174a8:	sub	r1, r1, #48	; 0x30
   174ac:	uxtb	r1, r1
   174b0:	cmp	r1, #9
   174b4:	bhi	17864 <__assert_fail@plt+0x64c0>
   174b8:	cmp	r0, r4
   174bc:	movcc	r1, #48	; 0x30
   174c0:	strbcc	r1, [r5, r0]
   174c4:	add	r0, r8, #2
   174c8:	add	r8, r8, #3
   174cc:	cmp	r0, r4
   174d0:	movcc	r1, #48	; 0x30
   174d4:	strbcc	r1, [r5, r0]
   174d8:	b	1728c <__assert_fail@plt+0x5ee8>
   174dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   174e0:	mov	sl, #0
   174e4:	mov	r6, #63	; 0x3f
   174e8:	cmp	r0, #5
   174ec:	beq	1786c <__assert_fail@plt+0x64c8>
   174f0:	cmp	r0, #2
   174f4:	bne	17914 <__assert_fail@plt+0x6570>
   174f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   174fc:	mov	r9, #0
   17500:	tst	r0, #1
   17504:	beq	1728c <__assert_fail@plt+0x5ee8>
   17508:	b	17be4 <__assert_fail@plt+0x6840>
   1750c:	mov	r0, #118	; 0x76
   17510:	b	17680 <__assert_fail@plt+0x62dc>
   17514:	mov	r0, #1
   17518:	mov	r6, #39	; 0x27
   1751c:	str	r0, [sp, #60]	; 0x3c
   17520:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17524:	cmp	r0, #2
   17528:	bne	176b8 <__assert_fail@plt+0x6314>
   1752c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17530:	tst	r0, #1
   17534:	bne	17be4 <__assert_fail@plt+0x6840>
   17538:	ldr	r2, [sp, #56]	; 0x38
   1753c:	clz	r1, r4
   17540:	mov	sl, #0
   17544:	mov	r9, #1
   17548:	lsr	r1, r1, #5
   1754c:	cmp	r2, #0
   17550:	mov	r0, r2
   17554:	movwne	r0, #1
   17558:	orrs	r0, r0, r1
   1755c:	moveq	r2, r4
   17560:	moveq	r4, r0
   17564:	cmp	r8, r4
   17568:	str	r2, [sp, #56]	; 0x38
   1756c:	movcc	r0, #39	; 0x27
   17570:	strbcc	r0, [r5, r8]
   17574:	add	r0, r8, #1
   17578:	cmp	r0, r4
   1757c:	movcc	r1, #92	; 0x5c
   17580:	strbcc	r1, [r5, r0]
   17584:	add	r0, r8, #2
   17588:	add	r8, r8, #3
   1758c:	cmp	r0, r4
   17590:	movcc	r1, #39	; 0x27
   17594:	strbcc	r1, [r5, r0]
   17598:	mov	r0, #0
   1759c:	str	r0, [fp, #-56]	; 0xffffffc8
   175a0:	b	1728c <__assert_fail@plt+0x5ee8>
   175a4:	ldr	r0, [sp, #40]	; 0x28
   175a8:	str	r4, [sp, #88]	; 0x58
   175ac:	cmp	r0, #1
   175b0:	bne	176c0 <__assert_fail@plt+0x631c>
   175b4:	str	lr, [sp, #28]
   175b8:	bl	11218 <__ctype_b_loc@plt>
   175bc:	ldr	r0, [r0]
   175c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   175c4:	mov	r2, #1
   175c8:	add	r0, r0, r6, lsl #1
   175cc:	ldrb	r0, [r0, #1]
   175d0:	ubfx	r9, r0, #6, #1
   175d4:	ldr	r0, [sp, #52]	; 0x34
   175d8:	cmp	r2, #1
   175dc:	orr	r0, r9, r0
   175e0:	bhi	1791c <__assert_fail@plt+0x6578>
   175e4:	tst	r0, #1
   175e8:	beq	1791c <__assert_fail@plt+0x6578>
   175ec:	ldr	lr, [sp, #28]
   175f0:	ldr	r4, [sp, #88]	; 0x58
   175f4:	b	1728c <__assert_fail@plt+0x5ee8>
   175f8:	ldr	r1, [sp, #48]	; 0x30
   175fc:	mov	sl, #0
   17600:	mov	r0, #92	; 0x5c
   17604:	cmp	r1, #0
   17608:	beq	17680 <__assert_fail@plt+0x62dc>
   1760c:	mov	r6, #92	; 0x5c
   17610:	mov	r9, #0
   17614:	cmp	sl, #0
   17618:	bne	17650 <__assert_fail@plt+0x62ac>
   1761c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17620:	tst	r0, #1
   17624:	beq	17650 <__assert_fail@plt+0x62ac>
   17628:	cmp	r8, r4
   1762c:	movcc	r0, #39	; 0x27
   17630:	strbcc	r0, [r5, r8]
   17634:	add	r0, r8, #1
   17638:	add	r8, r8, #2
   1763c:	cmp	r0, r4
   17640:	movcc	r1, #39	; 0x27
   17644:	strbcc	r1, [r5, r0]
   17648:	mov	r0, #0
   1764c:	str	r0, [fp, #-56]	; 0xffffffc8
   17650:	mov	r1, r9
   17654:	mov	r0, r6
   17658:	cmp	r8, r4
   1765c:	strbcc	r0, [r5, r8]
   17660:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17664:	add	r8, r8, #1
   17668:	and	r0, r0, r1
   1766c:	str	r0, [fp, #-48]	; 0xffffffd0
   17670:	add	r7, r7, #1
   17674:	cmn	lr, #1
   17678:	bne	16fb8 <__assert_fail@plt+0x5c14>
   1767c:	b	16fc4 <__assert_fail@plt+0x5c20>
   17680:	ldr	r1, [sp, #84]	; 0x54
   17684:	mov	sl, #0
   17688:	mov	r9, #0
   1768c:	tst	r1, #1
   17690:	mov	r1, #0
   17694:	beq	1728c <__assert_fail@plt+0x5ee8>
   17698:	b	172d4 <__assert_fail@plt+0x5f30>
   1769c:	ldr	r0, [sp, #36]	; 0x24
   176a0:	mov	r6, #0
   176a4:	mov	sl, #0
   176a8:	mov	r9, #0
   176ac:	cmp	r0, #0
   176b0:	beq	1728c <__assert_fail@plt+0x5ee8>
   176b4:	b	17670 <__assert_fail@plt+0x62cc>
   176b8:	mov	r9, #1
   176bc:	b	1728c <__assert_fail@plt+0x5ee8>
   176c0:	mov	r0, #0
   176c4:	cmn	lr, #1
   176c8:	sub	r4, fp, #40	; 0x28
   176cc:	str	r0, [fp, #-36]	; 0xffffffdc
   176d0:	str	r0, [fp, #-40]	; 0xffffffd8
   176d4:	bne	176e8 <__assert_fail@plt+0x6344>
   176d8:	mov	r0, ip
   176dc:	bl	1123c <strlen@plt>
   176e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   176e4:	mov	lr, r0
   176e8:	ldr	r0, [sp, #72]	; 0x48
   176ec:	mov	r9, #1
   176f0:	mov	r2, #0
   176f4:	str	lr, [sp, #28]
   176f8:	add	r0, r0, r7
   176fc:	str	r0, [sp, #20]
   17700:	b	17744 <__assert_fail@plt+0x63a0>
   17704:	ldr	r5, [sp, #44]	; 0x2c
   17708:	add	r5, r0, r5
   1770c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17710:	bl	11170 <iswprint@plt>
   17714:	cmp	r0, #0
   17718:	sub	r4, fp, #40	; 0x28
   1771c:	movwne	r0, #1
   17720:	and	r9, r9, r0
   17724:	mov	r0, r4
   17728:	bl	11134 <mbsinit@plt>
   1772c:	mov	r2, r5
   17730:	ldr	lr, [sp, #28]
   17734:	ldr	r5, [fp, #-84]	; 0xffffffac
   17738:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1773c:	cmp	r0, #0
   17740:	bne	175d4 <__assert_fail@plt+0x6230>
   17744:	add	r0, r2, r7
   17748:	str	r2, [sp, #44]	; 0x2c
   1774c:	mov	r3, r4
   17750:	add	r1, ip, r0
   17754:	str	r0, [sp, #24]
   17758:	sub	r2, lr, r0
   1775c:	sub	r0, fp, #44	; 0x2c
   17760:	bl	19bd0 <__assert_fail@plt+0x882c>
   17764:	cmp	r0, #0
   17768:	beq	17b0c <__assert_fail@plt+0x6768>
   1776c:	cmn	r0, #1
   17770:	beq	17ac8 <__assert_fail@plt+0x6724>
   17774:	ldr	lr, [sp, #28]
   17778:	cmn	r0, #2
   1777c:	beq	17ad0 <__assert_fail@plt+0x672c>
   17780:	ldr	r2, [sp, #64]	; 0x40
   17784:	ldr	r4, [sp, #88]	; 0x58
   17788:	ldr	ip, [sp, #84]	; 0x54
   1778c:	cmp	r0, #2
   17790:	mov	r1, #0
   17794:	movwcc	r1, #1
   17798:	eor	r2, r2, #1
   1779c:	orrs	r1, r2, r1
   177a0:	bne	17704 <__assert_fail@plt+0x6360>
   177a4:	ldr	r1, [sp, #44]	; 0x2c
   177a8:	ldr	r2, [sp, #20]
   177ac:	add	r1, r2, r1
   177b0:	sub	r2, r0, #1
   177b4:	b	177c4 <__assert_fail@plt+0x6420>
   177b8:	add	r1, r1, #1
   177bc:	subs	r2, r2, #1
   177c0:	beq	17704 <__assert_fail@plt+0x6360>
   177c4:	ldrb	r3, [r1]
   177c8:	sub	r3, r3, #91	; 0x5b
   177cc:	cmp	r3, #33	; 0x21
   177d0:	bhi	177b8 <__assert_fail@plt+0x6414>
   177d4:	add	r5, pc, #0
   177d8:	ldr	pc, [r5, r3, lsl #2]
   177dc:	andeq	r7, r1, r0, asr #23
   177e0:	andeq	r7, r1, r0, asr #23
   177e4:			; <UNDEFINED> instruction: 0x000177b8
   177e8:	andeq	r7, r1, r0, asr #23
   177ec:			; <UNDEFINED> instruction: 0x000177b8
   177f0:	andeq	r7, r1, r0, asr #23
   177f4:			; <UNDEFINED> instruction: 0x000177b8
   177f8:			; <UNDEFINED> instruction: 0x000177b8
   177fc:			; <UNDEFINED> instruction: 0x000177b8
   17800:			; <UNDEFINED> instruction: 0x000177b8
   17804:			; <UNDEFINED> instruction: 0x000177b8
   17808:			; <UNDEFINED> instruction: 0x000177b8
   1780c:			; <UNDEFINED> instruction: 0x000177b8
   17810:			; <UNDEFINED> instruction: 0x000177b8
   17814:			; <UNDEFINED> instruction: 0x000177b8
   17818:			; <UNDEFINED> instruction: 0x000177b8
   1781c:			; <UNDEFINED> instruction: 0x000177b8
   17820:			; <UNDEFINED> instruction: 0x000177b8
   17824:			; <UNDEFINED> instruction: 0x000177b8
   17828:			; <UNDEFINED> instruction: 0x000177b8
   1782c:			; <UNDEFINED> instruction: 0x000177b8
   17830:			; <UNDEFINED> instruction: 0x000177b8
   17834:			; <UNDEFINED> instruction: 0x000177b8
   17838:			; <UNDEFINED> instruction: 0x000177b8
   1783c:			; <UNDEFINED> instruction: 0x000177b8
   17840:			; <UNDEFINED> instruction: 0x000177b8
   17844:			; <UNDEFINED> instruction: 0x000177b8
   17848:			; <UNDEFINED> instruction: 0x000177b8
   1784c:			; <UNDEFINED> instruction: 0x000177b8
   17850:			; <UNDEFINED> instruction: 0x000177b8
   17854:			; <UNDEFINED> instruction: 0x000177b8
   17858:			; <UNDEFINED> instruction: 0x000177b8
   1785c:			; <UNDEFINED> instruction: 0x000177b8
   17860:	andeq	r7, r1, r0, asr #23
   17864:	mov	r8, r0
   17868:	b	1728c <__assert_fail@plt+0x5ee8>
   1786c:	ldr	r0, [sp, #32]
   17870:	cmp	r0, #0
   17874:	beq	17914 <__assert_fail@plt+0x6570>
   17878:	add	r0, r7, #2
   1787c:	cmp	r0, lr
   17880:	bcs	17914 <__assert_fail@plt+0x6570>
   17884:	add	r1, r7, ip
   17888:	ldrb	r1, [r1, #1]
   1788c:	cmp	r1, #63	; 0x3f
   17890:	bne	17914 <__assert_fail@plt+0x6570>
   17894:	ldrb	r9, [ip, r0]
   17898:	sub	r2, r9, #33	; 0x21
   1789c:	cmp	r2, #29
   178a0:	bhi	17914 <__assert_fail@plt+0x6570>
   178a4:	movw	r1, #20929	; 0x51c1
   178a8:	mov	r3, #1
   178ac:	movt	r1, #14336	; 0x3800
   178b0:	tst	r1, r3, lsl r2
   178b4:	beq	17914 <__assert_fail@plt+0x6570>
   178b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   178bc:	tst	r1, #1
   178c0:	bne	17be4 <__assert_fail@plt+0x6840>
   178c4:	cmp	r8, r4
   178c8:	add	r2, r8, #1
   178cc:	mov	r6, r9
   178d0:	mov	r7, r0
   178d4:	mov	r9, #0
   178d8:	movcc	r1, #63	; 0x3f
   178dc:	strbcc	r1, [r5, r8]
   178e0:	cmp	r2, r4
   178e4:	movcc	r1, #34	; 0x22
   178e8:	strbcc	r1, [r5, r2]
   178ec:	add	r2, r8, #2
   178f0:	cmp	r2, r4
   178f4:	movcc	r1, #34	; 0x22
   178f8:	strbcc	r1, [r5, r2]
   178fc:	add	r2, r8, #3
   17900:	add	r8, r8, #4
   17904:	cmp	r2, r4
   17908:	movcc	r1, #63	; 0x3f
   1790c:	strbcc	r1, [r5, r2]
   17910:	b	1728c <__assert_fail@plt+0x5ee8>
   17914:	mov	r9, #0
   17918:	b	1728c <__assert_fail@plt+0x5ee8>
   1791c:	ldr	lr, [sp, #28]
   17920:	ldr	r4, [fp, #-56]	; 0xffffffc8
   17924:	add	r1, r2, r7
   17928:	mov	r2, #0
   1792c:	str	r1, [sp, #44]	; 0x2c
   17930:	tst	r0, #1
   17934:	bne	17a50 <__assert_fail@plt+0x66ac>
   17938:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1793c:	tst	r1, #1
   17940:	bne	17be0 <__assert_fail@plt+0x683c>
   17944:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17948:	subs	r2, r1, #2
   1794c:	movwne	r2, #1
   17950:	orr	r2, r2, r4
   17954:	tst	r2, #1
   17958:	bne	1799c <__assert_fail@plt+0x65f8>
   1795c:	ldr	r1, [sp, #88]	; 0x58
   17960:	add	r2, r8, #1
   17964:	mov	r4, #1
   17968:	cmp	r8, r1
   1796c:	movcc	r1, #39	; 0x27
   17970:	strbcc	r1, [r5, r8]
   17974:	ldr	r1, [sp, #88]	; 0x58
   17978:	cmp	r2, r1
   1797c:	movcc	r1, #36	; 0x24
   17980:	strbcc	r1, [r5, r2]
   17984:	ldr	r1, [sp, #88]	; 0x58
   17988:	add	r2, r8, #2
   1798c:	add	r8, r8, #3
   17990:	cmp	r2, r1
   17994:	movcc	r1, #39	; 0x27
   17998:	strbcc	r1, [r5, r2]
   1799c:	ldr	r1, [sp, #88]	; 0x58
   179a0:	add	r2, r8, #1
   179a4:	cmp	r8, r1
   179a8:	movcc	r1, #92	; 0x5c
   179ac:	strbcc	r1, [r5, r8]
   179b0:	ldr	r1, [sp, #88]	; 0x58
   179b4:	cmp	r2, r1
   179b8:	bcs	179cc <__assert_fail@plt+0x6628>
   179bc:	uxtb	r3, r6
   179c0:	mov	r1, #48	; 0x30
   179c4:	orr	r3, r1, r3, lsr #6
   179c8:	strb	r3, [r5, r2]
   179cc:	ldr	r1, [sp, #88]	; 0x58
   179d0:	add	r2, r8, #2
   179d4:	add	r8, r8, #3
   179d8:	cmp	r2, r1
   179dc:	lsrcc	r3, r6, #3
   179e0:	movcc	r1, #6
   179e4:	bficc	r3, r1, #3, #29
   179e8:	mov	r1, #6
   179ec:	bfi	r6, r1, #3, #29
   179f0:	strbcc	r3, [r5, r2]
   179f4:	mov	r2, #1
   179f8:	b	17a78 <__assert_fail@plt+0x66d4>
   179fc:	ldr	r1, [sp, #88]	; 0x58
   17a00:	ldr	r5, [fp, #-84]	; 0xffffffac
   17a04:	ldr	r4, [sp, #88]	; 0x58
   17a08:	cmp	r8, r1
   17a0c:	movcc	r1, #39	; 0x27
   17a10:	strbcc	r1, [r5, r8]
   17a14:	add	r1, r8, #1
   17a18:	add	r8, r8, #2
   17a1c:	cmp	r1, r4
   17a20:	movcc	r4, #39	; 0x27
   17a24:	strbcc	r4, [r5, r1]
   17a28:	mov	r4, #0
   17a2c:	ldr	r1, [sp, #88]	; 0x58
   17a30:	cmp	r8, r1
   17a34:	ldr	r1, [sp, #72]	; 0x48
   17a38:	strbcc	r6, [r5, r8]
   17a3c:	add	r8, r8, #1
   17a40:	ldrb	r6, [r1, r7]
   17a44:	mov	r7, r3
   17a48:	tst	r0, #1
   17a4c:	beq	17938 <__assert_fail@plt+0x6594>
   17a50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17a54:	tst	r1, #1
   17a58:	beq	17a70 <__assert_fail@plt+0x66cc>
   17a5c:	ldr	r1, [sp, #88]	; 0x58
   17a60:	cmp	r8, r1
   17a64:	movcc	r1, #92	; 0x5c
   17a68:	strbcc	r1, [r5, r8]
   17a6c:	add	r8, r8, #1
   17a70:	mov	r1, #0
   17a74:	str	r1, [fp, #-52]	; 0xffffffcc
   17a78:	ldr	r1, [sp, #44]	; 0x2c
   17a7c:	add	r3, r7, #1
   17a80:	and	sl, r2, #1
   17a84:	cmp	r1, r3
   17a88:	bls	17aac <__assert_fail@plt+0x6708>
   17a8c:	cmp	sl, #0
   17a90:	mvn	r5, r4
   17a94:	movwne	sl, #1
   17a98:	orr	r5, r5, sl
   17a9c:	tst	r5, #1
   17aa0:	beq	179fc <__assert_fail@plt+0x6658>
   17aa4:	ldr	r5, [fp, #-84]	; 0xffffffac
   17aa8:	b	17a2c <__assert_fail@plt+0x6688>
   17aac:	str	r4, [fp, #-56]	; 0xffffffc8
   17ab0:	ldr	r4, [sp, #88]	; 0x58
   17ab4:	cmp	sl, #0
   17ab8:	movwne	sl, #1
   17abc:	cmp	sl, #0
   17ac0:	beq	1761c <__assert_fail@plt+0x6278>
   17ac4:	b	17650 <__assert_fail@plt+0x62ac>
   17ac8:	mov	r9, #0
   17acc:	b	17b0c <__assert_fail@plt+0x6768>
   17ad0:	ldr	r0, [sp, #24]
   17ad4:	mov	r9, #0
   17ad8:	cmp	lr, r0
   17adc:	bls	17b0c <__assert_fail@plt+0x6768>
   17ae0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17ae4:	ldr	r2, [sp, #44]	; 0x2c
   17ae8:	add	r0, ip, r7
   17aec:	ldrb	r1, [r0, r2]
   17af0:	cmp	r1, #0
   17af4:	beq	175d4 <__assert_fail@plt+0x6230>
   17af8:	add	r2, r2, #1
   17afc:	add	r1, r7, r2
   17b00:	cmp	r1, lr
   17b04:	bcc	17aec <__assert_fail@plt+0x6748>
   17b08:	b	175d4 <__assert_fail@plt+0x6230>
   17b0c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17b10:	ldr	r2, [sp, #44]	; 0x2c
   17b14:	b	175d4 <__assert_fail@plt+0x6230>
   17b18:	mov	lr, r7
   17b1c:	b	17b24 <__assert_fail@plt+0x6780>
   17b20:	mvn	lr, #0
   17b24:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17b28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17b2c:	eor	r0, r1, #2
   17b30:	orr	r0, r0, r8
   17b34:	clz	r0, r0
   17b38:	lsr	r0, r0, #5
   17b3c:	tst	r2, r0
   17b40:	bne	17be4 <__assert_fail@plt+0x6840>
   17b44:	subs	r0, r1, #2
   17b48:	movwne	r0, #1
   17b4c:	orr	r0, r2, r0
   17b50:	tst	r0, #1
   17b54:	ldreq	r0, [sp, #60]	; 0x3c
   17b58:	eoreq	r0, r0, #1
   17b5c:	tsteq	r0, #1
   17b60:	bne	17c78 <__assert_fail@plt+0x68d4>
   17b64:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17b68:	mov	sl, lr
   17b6c:	tst	r0, #1
   17b70:	bne	17c44 <__assert_fail@plt+0x68a0>
   17b74:	ldr	r6, [sp, #56]	; 0x38
   17b78:	mov	r9, #0
   17b7c:	cmp	r6, #0
   17b80:	beq	17c70 <__assert_fail@plt+0x68cc>
   17b84:	ldr	r0, [sp, #84]	; 0x54
   17b88:	mov	r1, #0
   17b8c:	mov	r7, #2
   17b90:	cmp	r4, #0
   17b94:	str	r1, [fp, #-48]	; 0xffffffd0
   17b98:	mov	r1, #0
   17b9c:	str	r1, [fp, #-76]	; 0xffffffb4
   17ba0:	beq	16d40 <__assert_fail@plt+0x599c>
   17ba4:	b	17c78 <__assert_fail@plt+0x68d4>
   17ba8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17bac:	ldr	r1, [fp, #12]
   17bb0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17bb4:	mov	lr, r4
   17bb8:	mov	r4, r6
   17bbc:	b	17c04 <__assert_fail@plt+0x6860>
   17bc0:	tst	ip, #1
   17bc4:	ldr	r5, [fp, #-84]	; 0xffffffac
   17bc8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17bcc:	ldr	r1, [fp, #12]
   17bd0:	mov	r0, #2
   17bd4:	movwne	r0, #4
   17bd8:	mov	r2, r0
   17bdc:	b	17c04 <__assert_fail@plt+0x6860>
   17be0:	ldr	r4, [sp, #88]	; 0x58
   17be4:	ldr	r1, [sp, #84]	; 0x54
   17be8:	mov	r0, #2
   17bec:	tst	r1, #1
   17bf0:	movwne	r0, #4
   17bf4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17bf8:	ldr	r1, [fp, #12]
   17bfc:	cmp	r2, #2
   17c00:	moveq	r2, r0
   17c04:	mov	r0, #0
   17c08:	bic	r1, r1, #2
   17c0c:	str	r2, [sp]
   17c10:	mov	r2, ip
   17c14:	mov	r3, lr
   17c18:	str	r0, [sp, #8]
   17c1c:	ldr	r0, [sp, #76]	; 0x4c
   17c20:	str	r1, [sp, #4]
   17c24:	mov	r1, r4
   17c28:	str	r0, [sp, #12]
   17c2c:	ldr	r0, [sp, #80]	; 0x50
   17c30:	str	r0, [sp, #16]
   17c34:	mov	r0, r5
   17c38:	bl	16cb0 <__assert_fail@plt+0x590c>
   17c3c:	mov	r8, r0
   17c40:	b	17cc4 <__assert_fail@plt+0x6920>
   17c44:	mov	r0, #5
   17c48:	ldr	r1, [sp, #56]	; 0x38
   17c4c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17c50:	mov	r3, sl
   17c54:	str	r0, [sp]
   17c58:	ldr	r0, [fp, #12]
   17c5c:	str	r0, [sp, #4]
   17c60:	ldr	r0, [fp, #16]
   17c64:	str	r0, [sp, #8]
   17c68:	ldr	r0, [sp, #76]	; 0x4c
   17c6c:	b	17c28 <__assert_fail@plt+0x6884>
   17c70:	mov	r0, #0
   17c74:	str	r0, [fp, #-76]	; 0xffffffb4
   17c78:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17c7c:	cmp	r1, #0
   17c80:	beq	17cb8 <__assert_fail@plt+0x6914>
   17c84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17c88:	tst	r0, #1
   17c8c:	bne	17cb8 <__assert_fail@plt+0x6914>
   17c90:	ldrb	r0, [r1]
   17c94:	cmp	r0, #0
   17c98:	beq	17cb8 <__assert_fail@plt+0x6914>
   17c9c:	add	r1, r1, #1
   17ca0:	cmp	r8, r4
   17ca4:	strbcc	r0, [r5, r8]
   17ca8:	add	r8, r8, #1
   17cac:	ldrb	r0, [r1], #1
   17cb0:	cmp	r0, #0
   17cb4:	bne	17ca0 <__assert_fail@plt+0x68fc>
   17cb8:	cmp	r8, r4
   17cbc:	movcc	r0, #0
   17cc0:	strbcc	r0, [r5, r8]
   17cc4:	mov	r0, r8
   17cc8:	sub	sp, fp, #28
   17ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cd0:	mov	r0, #4
   17cd4:	b	17bf4 <__assert_fail@plt+0x6850>
   17cd8:	bl	11374 <abort@plt>
   17cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ce0:	add	fp, sp, #28
   17ce4:	sub	sp, sp, #28
   17ce8:	movw	r5, #49592	; 0xc1b8
   17cec:	cmp	r2, #0
   17cf0:	mov	r4, r1
   17cf4:	mov	r7, r0
   17cf8:	str	r0, [sp, #20]
   17cfc:	movt	r5, #2
   17d00:	movne	r5, r2
   17d04:	bl	11260 <__errno_location@plt>
   17d08:	mov	sl, r0
   17d0c:	ldr	r2, [r5, #40]	; 0x28
   17d10:	ldr	r3, [r5, #44]	; 0x2c
   17d14:	ldm	r5, {r0, r1}
   17d18:	orr	r8, r1, #1
   17d1c:	add	r9, r5, #8
   17d20:	mov	r1, #0
   17d24:	ldr	r6, [sl]
   17d28:	stm	sp, {r0, r8, r9}
   17d2c:	mov	r0, #0
   17d30:	str	r2, [sp, #12]
   17d34:	str	r3, [sp, #16]
   17d38:	mov	r2, r7
   17d3c:	mov	r3, r4
   17d40:	str	r6, [sp, #24]
   17d44:	mov	r6, r4
   17d48:	bl	16cb0 <__assert_fail@plt+0x590c>
   17d4c:	add	r7, r0, #1
   17d50:	mov	r0, r7
   17d54:	bl	18f9c <__assert_fail@plt+0x7bf8>
   17d58:	mov	r4, r0
   17d5c:	ldr	r0, [r5]
   17d60:	ldr	r2, [r5, #44]	; 0x2c
   17d64:	ldr	r1, [r5, #40]	; 0x28
   17d68:	mov	r3, r6
   17d6c:	stm	sp, {r0, r8, r9}
   17d70:	str	r2, [sp, #16]
   17d74:	ldr	r2, [sp, #20]
   17d78:	str	r1, [sp, #12]
   17d7c:	mov	r0, r4
   17d80:	mov	r1, r7
   17d84:	bl	16cb0 <__assert_fail@plt+0x590c>
   17d88:	ldr	r0, [sp, #24]
   17d8c:	str	r0, [sl]
   17d90:	mov	r0, r4
   17d94:	sub	sp, fp, #28
   17d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17da0:	add	fp, sp, #28
   17da4:	sub	sp, sp, #36	; 0x24
   17da8:	movw	r8, #49592	; 0xc1b8
   17dac:	cmp	r3, #0
   17db0:	mov	r4, r2
   17db4:	str	r2, [sp, #24]
   17db8:	mov	r5, r1
   17dbc:	mov	r6, r0
   17dc0:	str	r0, [sp, #20]
   17dc4:	movt	r8, #2
   17dc8:	movne	r8, r3
   17dcc:	bl	11260 <__errno_location@plt>
   17dd0:	str	r0, [sp, #28]
   17dd4:	ldr	r1, [r8, #40]	; 0x28
   17dd8:	ldr	r2, [r8, #44]	; 0x2c
   17ddc:	ldr	r7, [r0]
   17de0:	cmp	r4, #0
   17de4:	add	sl, r8, #8
   17de8:	mov	r0, #0
   17dec:	ldm	r8, {r3, r9}
   17df0:	orreq	r9, r9, #1
   17df4:	stm	sp, {r3, r9, sl}
   17df8:	str	r1, [sp, #12]
   17dfc:	str	r2, [sp, #16]
   17e00:	mov	r1, #0
   17e04:	mov	r2, r6
   17e08:	mov	r3, r5
   17e0c:	str	r7, [sp, #32]
   17e10:	mov	r7, r5
   17e14:	bl	16cb0 <__assert_fail@plt+0x590c>
   17e18:	add	r4, r0, #1
   17e1c:	mov	r5, r0
   17e20:	mov	r0, r4
   17e24:	bl	18f9c <__assert_fail@plt+0x7bf8>
   17e28:	mov	r6, r0
   17e2c:	ldr	r0, [r8]
   17e30:	ldr	r2, [r8, #44]	; 0x2c
   17e34:	ldr	r1, [r8, #40]	; 0x28
   17e38:	mov	r3, r7
   17e3c:	stm	sp, {r0, r9, sl}
   17e40:	str	r2, [sp, #16]
   17e44:	ldr	r2, [sp, #20]
   17e48:	str	r1, [sp, #12]
   17e4c:	mov	r0, r6
   17e50:	mov	r1, r4
   17e54:	bl	16cb0 <__assert_fail@plt+0x590c>
   17e58:	ldr	r0, [sp, #24]
   17e5c:	ldr	r1, [sp, #32]
   17e60:	ldr	r2, [sp, #28]
   17e64:	cmp	r0, #0
   17e68:	str	r1, [r2]
   17e6c:	strne	r5, [r0]
   17e70:	mov	r0, r6
   17e74:	sub	sp, fp, #28
   17e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17e80:	add	fp, sp, #24
   17e84:	movw	r5, #49452	; 0xc12c
   17e88:	movw	r8, #49448	; 0xc128
   17e8c:	movt	r5, #2
   17e90:	movt	r8, #2
   17e94:	ldr	r0, [r5]
   17e98:	ldr	r4, [r8]
   17e9c:	cmp	r0, #2
   17ea0:	blt	17ecc <__assert_fail@plt+0x6b28>
   17ea4:	add	r7, r4, #12
   17ea8:	mov	r6, #0
   17eac:	ldr	r0, [r7, r6, lsl #3]
   17eb0:	bl	19ac8 <__assert_fail@plt+0x8724>
   17eb4:	ldr	r1, [r5]
   17eb8:	add	r2, r6, #2
   17ebc:	add	r0, r6, #1
   17ec0:	mov	r6, r0
   17ec4:	cmp	r2, r1
   17ec8:	blt	17eac <__assert_fail@plt+0x6b08>
   17ecc:	ldr	r0, [r4, #4]
   17ed0:	movw	r9, #49640	; 0xc1e8
   17ed4:	movw	r7, #49456	; 0xc130
   17ed8:	movt	r9, #2
   17edc:	movt	r7, #2
   17ee0:	cmp	r0, r9
   17ee4:	beq	17ef4 <__assert_fail@plt+0x6b50>
   17ee8:	bl	19ac8 <__assert_fail@plt+0x8724>
   17eec:	mov	r0, #256	; 0x100
   17ef0:	stm	r7, {r0, r9}
   17ef4:	cmp	r4, r7
   17ef8:	beq	17f08 <__assert_fail@plt+0x6b64>
   17efc:	mov	r0, r4
   17f00:	bl	19ac8 <__assert_fail@plt+0x8724>
   17f04:	str	r7, [r8]
   17f08:	mov	r0, #1
   17f0c:	str	r0, [r5]
   17f10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17f14:	movw	r3, #49592	; 0xc1b8
   17f18:	mvn	r2, #0
   17f1c:	movt	r3, #2
   17f20:	b	17f24 <__assert_fail@plt+0x6b80>
   17f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f28:	add	fp, sp, #28
   17f2c:	sub	sp, sp, #44	; 0x2c
   17f30:	mov	r7, r3
   17f34:	str	r2, [sp, #36]	; 0x24
   17f38:	str	r1, [sp, #32]
   17f3c:	mov	r5, r0
   17f40:	bl	11260 <__errno_location@plt>
   17f44:	cmp	r5, #0
   17f48:	bmi	180b8 <__assert_fail@plt+0x6d14>
   17f4c:	cmn	r5, #-2147483647	; 0x80000001
   17f50:	beq	180b8 <__assert_fail@plt+0x6d14>
   17f54:	movw	r8, #49452	; 0xc12c
   17f58:	movw	r4, #49448	; 0xc128
   17f5c:	str	r0, [sp, #28]
   17f60:	ldr	r0, [r0]
   17f64:	movt	r8, #2
   17f68:	movt	r4, #2
   17f6c:	ldr	r1, [r8]
   17f70:	ldr	r6, [r4]
   17f74:	str	r0, [sp, #24]
   17f78:	cmp	r1, r5
   17f7c:	ble	17f88 <__assert_fail@plt+0x6be4>
   17f80:	mov	sl, r6
   17f84:	b	17ff4 <__assert_fail@plt+0x6c50>
   17f88:	movw	r9, #49456	; 0xc130
   17f8c:	mov	r0, #8
   17f90:	str	r1, [fp, #-32]	; 0xffffffe0
   17f94:	sub	r1, r5, r1
   17f98:	mvn	r3, #-2147483648	; 0x80000000
   17f9c:	movt	r9, #2
   17fa0:	str	r0, [sp]
   17fa4:	add	r2, r1, #1
   17fa8:	sub	r1, fp, #32
   17fac:	subs	r0, r6, r9
   17fb0:	movne	r0, r6
   17fb4:	bl	1919c <__assert_fail@plt+0x7df8>
   17fb8:	mov	sl, r0
   17fbc:	cmp	r6, r9
   17fc0:	str	r0, [r4]
   17fc4:	bne	17fd0 <__assert_fail@plt+0x6c2c>
   17fc8:	ldrd	r0, [r9]
   17fcc:	stm	sl, {r0, r1}
   17fd0:	ldr	r1, [r8]
   17fd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17fd8:	add	r0, sl, r1, lsl #3
   17fdc:	sub	r1, r2, r1
   17fe0:	lsl	r2, r1, #3
   17fe4:	mov	r1, #0
   17fe8:	bl	11284 <memset@plt>
   17fec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ff0:	str	r0, [r8]
   17ff4:	mov	r9, sl
   17ff8:	ldm	r7, {r0, r1}
   17ffc:	orr	r8, r1, #1
   18000:	add	r1, r7, #8
   18004:	ldr	r2, [r7, #40]	; 0x28
   18008:	ldr	r3, [r7, #44]	; 0x2c
   1800c:	ldr	r6, [r9, r5, lsl #3]!
   18010:	str	r1, [sp, #20]
   18014:	ldr	r4, [r9, #4]!
   18018:	stm	sp, {r0, r8}
   1801c:	add	r0, sp, #8
   18020:	stm	r0, {r1, r2, r3}
   18024:	ldr	r2, [sp, #32]
   18028:	ldr	r3, [sp, #36]	; 0x24
   1802c:	mov	r1, r6
   18030:	mov	r0, r4
   18034:	bl	16cb0 <__assert_fail@plt+0x590c>
   18038:	cmp	r6, r0
   1803c:	bhi	180a0 <__assert_fail@plt+0x6cfc>
   18040:	add	r6, r0, #1
   18044:	movw	r0, #49640	; 0xc1e8
   18048:	movt	r0, #2
   1804c:	str	r6, [sl, r5, lsl #3]
   18050:	cmp	r4, r0
   18054:	beq	18060 <__assert_fail@plt+0x6cbc>
   18058:	mov	r0, r4
   1805c:	bl	19ac8 <__assert_fail@plt+0x8724>
   18060:	mov	r0, r6
   18064:	bl	18f9c <__assert_fail@plt+0x7bf8>
   18068:	str	r0, [r9]
   1806c:	mov	r4, r0
   18070:	add	r3, sp, #8
   18074:	ldr	r0, [r7]
   18078:	ldr	r1, [r7, #40]	; 0x28
   1807c:	ldr	r2, [r7, #44]	; 0x2c
   18080:	stm	sp, {r0, r8}
   18084:	ldr	r0, [sp, #20]
   18088:	stm	r3, {r0, r1, r2}
   1808c:	ldr	r2, [sp, #32]
   18090:	ldr	r3, [sp, #36]	; 0x24
   18094:	mov	r0, r4
   18098:	mov	r1, r6
   1809c:	bl	16cb0 <__assert_fail@plt+0x590c>
   180a0:	ldr	r0, [sp, #28]
   180a4:	ldr	r1, [sp, #24]
   180a8:	str	r1, [r0]
   180ac:	mov	r0, r4
   180b0:	sub	sp, fp, #28
   180b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180b8:	bl	11374 <abort@plt>
   180bc:	movw	r3, #49592	; 0xc1b8
   180c0:	movt	r3, #2
   180c4:	b	17f24 <__assert_fail@plt+0x6b80>
   180c8:	movw	r3, #49592	; 0xc1b8
   180cc:	mov	r1, r0
   180d0:	mov	r0, #0
   180d4:	mvn	r2, #0
   180d8:	movt	r3, #2
   180dc:	b	17f24 <__assert_fail@plt+0x6b80>
   180e0:	movw	r3, #49592	; 0xc1b8
   180e4:	mov	r2, r1
   180e8:	mov	r1, r0
   180ec:	mov	r0, #0
   180f0:	movt	r3, #2
   180f4:	b	17f24 <__assert_fail@plt+0x6b80>
   180f8:	push	{fp, lr}
   180fc:	mov	fp, sp
   18100:	sub	sp, sp, #48	; 0x30
   18104:	vmov.i32	q8, #0	; 0x00000000
   18108:	mov	ip, #32
   1810c:	mov	r3, sp
   18110:	mov	lr, r2
   18114:	cmp	r1, #10
   18118:	add	r2, r3, #16
   1811c:	vst1.64	{d16-d17}, [r3], ip
   18120:	vst1.64	{d16-d17}, [r2]
   18124:	vst1.64	{d16-d17}, [r3]
   18128:	beq	18148 <__assert_fail@plt+0x6da4>
   1812c:	str	r1, [sp]
   18130:	mov	r3, sp
   18134:	mov	r1, lr
   18138:	mvn	r2, #0
   1813c:	bl	17f24 <__assert_fail@plt+0x6b80>
   18140:	mov	sp, fp
   18144:	pop	{fp, pc}
   18148:	bl	11374 <abort@plt>
   1814c:	push	{r4, sl, fp, lr}
   18150:	add	fp, sp, #8
   18154:	sub	sp, sp, #48	; 0x30
   18158:	vmov.i32	q8, #0	; 0x00000000
   1815c:	mov	ip, r3
   18160:	mov	r3, sp
   18164:	mov	lr, #32
   18168:	cmp	r1, #10
   1816c:	add	r4, r3, #16
   18170:	vst1.64	{d16-d17}, [r3], lr
   18174:	vst1.64	{d16-d17}, [r4]
   18178:	vst1.64	{d16-d17}, [r3]
   1817c:	beq	1819c <__assert_fail@plt+0x6df8>
   18180:	str	r1, [sp]
   18184:	mov	r1, r2
   18188:	mov	r3, sp
   1818c:	mov	r2, ip
   18190:	bl	17f24 <__assert_fail@plt+0x6b80>
   18194:	sub	sp, fp, #8
   18198:	pop	{r4, sl, fp, pc}
   1819c:	bl	11374 <abort@plt>
   181a0:	push	{fp, lr}
   181a4:	mov	fp, sp
   181a8:	sub	sp, sp, #48	; 0x30
   181ac:	vmov.i32	q8, #0	; 0x00000000
   181b0:	mov	r3, sp
   181b4:	mov	ip, #32
   181b8:	cmp	r0, #10
   181bc:	add	r2, r3, #16
   181c0:	vst1.64	{d16-d17}, [r3], ip
   181c4:	vst1.64	{d16-d17}, [r2]
   181c8:	vst1.64	{d16-d17}, [r3]
   181cc:	beq	181ec <__assert_fail@plt+0x6e48>
   181d0:	str	r0, [sp]
   181d4:	mov	r3, sp
   181d8:	mov	r0, #0
   181dc:	mvn	r2, #0
   181e0:	bl	17f24 <__assert_fail@plt+0x6b80>
   181e4:	mov	sp, fp
   181e8:	pop	{fp, pc}
   181ec:	bl	11374 <abort@plt>
   181f0:	push	{fp, lr}
   181f4:	mov	fp, sp
   181f8:	sub	sp, sp, #48	; 0x30
   181fc:	vmov.i32	q8, #0	; 0x00000000
   18200:	mov	r3, sp
   18204:	mov	ip, #32
   18208:	cmp	r0, #10
   1820c:	add	lr, r3, #16
   18210:	vst1.64	{d16-d17}, [r3], ip
   18214:	vst1.64	{d16-d17}, [lr]
   18218:	vst1.64	{d16-d17}, [r3]
   1821c:	beq	18238 <__assert_fail@plt+0x6e94>
   18220:	str	r0, [sp]
   18224:	mov	r3, sp
   18228:	mov	r0, #0
   1822c:	bl	17f24 <__assert_fail@plt+0x6b80>
   18230:	mov	sp, fp
   18234:	pop	{fp, pc}
   18238:	bl	11374 <abort@plt>
   1823c:	push	{r4, sl, fp, lr}
   18240:	add	fp, sp, #8
   18244:	sub	sp, sp, #48	; 0x30
   18248:	mov	lr, r0
   1824c:	movw	r0, #49592	; 0xc1b8
   18250:	mov	ip, r1
   18254:	mov	r1, #32
   18258:	mov	r4, #1
   1825c:	movt	r0, #2
   18260:	add	r3, r0, #16
   18264:	vld1.64	{d16-d17}, [r0], r1
   18268:	vld1.64	{d20-d21}, [r0]
   1826c:	vld1.64	{d18-d19}, [r3]
   18270:	mov	r3, sp
   18274:	add	r0, r3, #32
   18278:	add	r1, r3, #16
   1827c:	vst1.64	{d20-d21}, [r0]
   18280:	mov	r0, #28
   18284:	vst1.64	{d18-d19}, [r1]
   18288:	mov	r1, r3
   1828c:	and	r0, r0, r2, lsr #3
   18290:	and	r2, r2, #31
   18294:	vst1.64	{d16-d17}, [r1], r0
   18298:	ldr	r0, [r1, #8]
   1829c:	bic	r4, r4, r0, lsr r2
   182a0:	eor	r0, r0, r4, lsl r2
   182a4:	mov	r2, ip
   182a8:	str	r0, [r1, #8]
   182ac:	mov	r0, #0
   182b0:	mov	r1, lr
   182b4:	bl	17f24 <__assert_fail@plt+0x6b80>
   182b8:	sub	sp, fp, #8
   182bc:	pop	{r4, sl, fp, pc}
   182c0:	push	{fp, lr}
   182c4:	mov	fp, sp
   182c8:	sub	sp, sp, #48	; 0x30
   182cc:	mov	ip, r0
   182d0:	movw	r0, #49592	; 0xc1b8
   182d4:	mov	r2, #32
   182d8:	movt	r0, #2
   182dc:	add	r3, r0, #16
   182e0:	vld1.64	{d16-d17}, [r0], r2
   182e4:	vld1.64	{d20-d21}, [r0]
   182e8:	vld1.64	{d18-d19}, [r3]
   182ec:	mov	r3, sp
   182f0:	add	r0, r3, #32
   182f4:	add	r2, r3, #16
   182f8:	vst1.64	{d20-d21}, [r0]
   182fc:	mov	r0, #28
   18300:	vst1.64	{d18-d19}, [r2]
   18304:	mov	r2, r3
   18308:	and	r0, r0, r1, lsr #3
   1830c:	and	r1, r1, #31
   18310:	vst1.64	{d16-d17}, [r2], r0
   18314:	mov	r0, #1
   18318:	ldr	lr, [r2, #8]
   1831c:	bic	r0, r0, lr, lsr r1
   18320:	eor	r0, lr, r0, lsl r1
   18324:	mov	r1, ip
   18328:	str	r0, [r2, #8]
   1832c:	mov	r0, #0
   18330:	mvn	r2, #0
   18334:	bl	17f24 <__assert_fail@plt+0x6b80>
   18338:	mov	sp, fp
   1833c:	pop	{fp, pc}
   18340:	push	{fp, lr}
   18344:	mov	fp, sp
   18348:	sub	sp, sp, #48	; 0x30
   1834c:	mov	r1, r0
   18350:	movw	r0, #49592	; 0xc1b8
   18354:	mov	r3, #32
   18358:	movt	r0, #2
   1835c:	add	r2, r0, #16
   18360:	vld1.64	{d16-d17}, [r0], r3
   18364:	mov	r3, sp
   18368:	vld1.64	{d18-d19}, [r2]
   1836c:	vld1.64	{d20-d21}, [r0]
   18370:	add	r2, r3, #16
   18374:	add	r0, r3, #32
   18378:	vst1.64	{d18-d19}, [r2]
   1837c:	vst1.64	{d20-d21}, [r0]
   18380:	mov	r0, #12
   18384:	mov	r2, r3
   18388:	vst1.64	{d16-d17}, [r2], r0
   1838c:	ldr	r0, [r2]
   18390:	orr	r0, r0, #67108864	; 0x4000000
   18394:	str	r0, [r2]
   18398:	mov	r0, #0
   1839c:	mvn	r2, #0
   183a0:	bl	17f24 <__assert_fail@plt+0x6b80>
   183a4:	mov	sp, fp
   183a8:	pop	{fp, pc}
   183ac:	push	{fp, lr}
   183b0:	mov	fp, sp
   183b4:	sub	sp, sp, #48	; 0x30
   183b8:	mov	ip, r1
   183bc:	mov	r1, r0
   183c0:	movw	r0, #49592	; 0xc1b8
   183c4:	mov	r2, #32
   183c8:	movt	r0, #2
   183cc:	add	r3, r0, #16
   183d0:	vld1.64	{d16-d17}, [r0], r2
   183d4:	vld1.64	{d18-d19}, [r3]
   183d8:	vld1.64	{d20-d21}, [r0]
   183dc:	mov	r3, sp
   183e0:	add	r2, r3, #16
   183e4:	add	r0, r3, #32
   183e8:	vst1.64	{d18-d19}, [r2]
   183ec:	vst1.64	{d20-d21}, [r0]
   183f0:	mov	r0, #12
   183f4:	mov	r2, r3
   183f8:	vst1.64	{d16-d17}, [r2], r0
   183fc:	ldr	r0, [r2]
   18400:	orr	r0, r0, #67108864	; 0x4000000
   18404:	str	r0, [r2]
   18408:	mov	r0, #0
   1840c:	mov	r2, ip
   18410:	bl	17f24 <__assert_fail@plt+0x6b80>
   18414:	mov	sp, fp
   18418:	pop	{fp, pc}
   1841c:	push	{r4, sl, fp, lr}
   18420:	add	fp, sp, #8
   18424:	sub	sp, sp, #96	; 0x60
   18428:	vmov.i32	q8, #0	; 0x00000000
   1842c:	mov	ip, r2
   18430:	mov	r2, sp
   18434:	mov	r4, #28
   18438:	cmp	r1, #10
   1843c:	mov	r3, r2
   18440:	add	lr, r2, #16
   18444:	vst1.64	{d16-d17}, [r3], r4
   18448:	vst1.64	{d16-d17}, [lr]
   1844c:	vst1.32	{d16-d17}, [r3]
   18450:	beq	184a0 <__assert_fail@plt+0x70fc>
   18454:	vld1.64	{d16-d17}, [r2], r4
   18458:	vld1.64	{d18-d19}, [lr]
   1845c:	add	r3, sp, #48	; 0x30
   18460:	vld1.32	{d20-d21}, [r2]
   18464:	add	r2, r3, #20
   18468:	add	r4, r3, #4
   1846c:	vst1.32	{d18-d19}, [r2]
   18470:	add	r2, r3, #32
   18474:	vst1.32	{d16-d17}, [r4]
   18478:	vst1.32	{d20-d21}, [r2]
   1847c:	str	r1, [sp, #48]	; 0x30
   18480:	mvn	r2, #0
   18484:	ldr	r1, [sp, #60]	; 0x3c
   18488:	orr	r1, r1, #67108864	; 0x4000000
   1848c:	str	r1, [sp, #60]	; 0x3c
   18490:	mov	r1, ip
   18494:	bl	17f24 <__assert_fail@plt+0x6b80>
   18498:	sub	sp, fp, #8
   1849c:	pop	{r4, sl, fp, pc}
   184a0:	bl	11374 <abort@plt>
   184a4:	push	{r4, r5, r6, sl, fp, lr}
   184a8:	add	fp, sp, #16
   184ac:	sub	sp, sp, #48	; 0x30
   184b0:	mov	ip, r3
   184b4:	movw	r3, #49592	; 0xc1b8
   184b8:	mov	r6, #32
   184bc:	cmp	r1, #0
   184c0:	mov	r4, sp
   184c4:	movt	r3, #2
   184c8:	cmpne	r2, #0
   184cc:	add	r5, r4, #16
   184d0:	add	lr, r3, #16
   184d4:	vld1.64	{d16-d17}, [r3], r6
   184d8:	vld1.64	{d18-d19}, [lr]
   184dc:	vld1.64	{d20-d21}, [r3]
   184e0:	mov	r3, #10
   184e4:	vst1.64	{d16-d17}, [r4], r6
   184e8:	vst1.64	{d18-d19}, [r5]
   184ec:	vst1.64	{d20-d21}, [r4]
   184f0:	str	r3, [sp]
   184f4:	bne	184fc <__assert_fail@plt+0x7158>
   184f8:	bl	11374 <abort@plt>
   184fc:	str	r2, [sp, #44]	; 0x2c
   18500:	str	r1, [sp, #40]	; 0x28
   18504:	mov	r3, sp
   18508:	mov	r1, ip
   1850c:	mvn	r2, #0
   18510:	bl	17f24 <__assert_fail@plt+0x6b80>
   18514:	sub	sp, fp, #16
   18518:	pop	{r4, r5, r6, sl, fp, pc}
   1851c:	push	{r4, r5, r6, sl, fp, lr}
   18520:	add	fp, sp, #16
   18524:	sub	sp, sp, #48	; 0x30
   18528:	mov	lr, r3
   1852c:	movw	r3, #49592	; 0xc1b8
   18530:	mov	r6, #32
   18534:	cmp	r1, #0
   18538:	mov	r4, sp
   1853c:	movt	r3, #2
   18540:	cmpne	r2, #0
   18544:	add	r5, r4, #16
   18548:	add	ip, r3, #16
   1854c:	vld1.64	{d16-d17}, [r3], r6
   18550:	vld1.64	{d18-d19}, [ip]
   18554:	vld1.64	{d20-d21}, [r3]
   18558:	mov	r3, #10
   1855c:	vst1.64	{d16-d17}, [r4], r6
   18560:	vst1.64	{d18-d19}, [r5]
   18564:	vst1.64	{d20-d21}, [r4]
   18568:	str	r3, [sp]
   1856c:	bne	18574 <__assert_fail@plt+0x71d0>
   18570:	bl	11374 <abort@plt>
   18574:	ldr	ip, [fp, #8]
   18578:	str	r2, [sp, #44]	; 0x2c
   1857c:	str	r1, [sp, #40]	; 0x28
   18580:	mov	r3, sp
   18584:	mov	r1, lr
   18588:	mov	r2, ip
   1858c:	bl	17f24 <__assert_fail@plt+0x6b80>
   18590:	sub	sp, fp, #16
   18594:	pop	{r4, r5, r6, sl, fp, pc}
   18598:	push	{r4, sl, fp, lr}
   1859c:	add	fp, sp, #8
   185a0:	sub	sp, sp, #48	; 0x30
   185a4:	movw	r3, #49592	; 0xc1b8
   185a8:	mov	lr, #32
   185ac:	mov	ip, r2
   185b0:	cmp	r0, #0
   185b4:	movt	r3, #2
   185b8:	cmpne	r1, #0
   185bc:	add	r2, r3, #16
   185c0:	vld1.64	{d16-d17}, [r3], lr
   185c4:	vld1.64	{d20-d21}, [r3]
   185c8:	vld1.64	{d18-d19}, [r2]
   185cc:	mov	r2, sp
   185d0:	add	r4, r2, #16
   185d4:	vst1.64	{d16-d17}, [r2], lr
   185d8:	vst1.64	{d20-d21}, [r2]
   185dc:	mov	r2, #10
   185e0:	vst1.64	{d18-d19}, [r4]
   185e4:	str	r2, [sp]
   185e8:	bne	185f0 <__assert_fail@plt+0x724c>
   185ec:	bl	11374 <abort@plt>
   185f0:	str	r1, [sp, #44]	; 0x2c
   185f4:	str	r0, [sp, #40]	; 0x28
   185f8:	mov	r3, sp
   185fc:	mov	r0, #0
   18600:	mov	r1, ip
   18604:	mvn	r2, #0
   18608:	bl	17f24 <__assert_fail@plt+0x6b80>
   1860c:	sub	sp, fp, #8
   18610:	pop	{r4, sl, fp, pc}
   18614:	push	{r4, r5, fp, lr}
   18618:	add	fp, sp, #8
   1861c:	sub	sp, sp, #48	; 0x30
   18620:	mov	ip, r3
   18624:	movw	r3, #49592	; 0xc1b8
   18628:	mov	r4, #32
   1862c:	mov	lr, r2
   18630:	cmp	r0, #0
   18634:	movt	r3, #2
   18638:	cmpne	r1, #0
   1863c:	add	r2, r3, #16
   18640:	vld1.64	{d16-d17}, [r3], r4
   18644:	vld1.64	{d20-d21}, [r3]
   18648:	vld1.64	{d18-d19}, [r2]
   1864c:	mov	r2, sp
   18650:	add	r5, r2, #16
   18654:	vst1.64	{d16-d17}, [r2], r4
   18658:	vst1.64	{d20-d21}, [r2]
   1865c:	mov	r2, #10
   18660:	vst1.64	{d18-d19}, [r5]
   18664:	str	r2, [sp]
   18668:	bne	18670 <__assert_fail@plt+0x72cc>
   1866c:	bl	11374 <abort@plt>
   18670:	str	r1, [sp, #44]	; 0x2c
   18674:	str	r0, [sp, #40]	; 0x28
   18678:	mov	r3, sp
   1867c:	mov	r0, #0
   18680:	mov	r1, lr
   18684:	mov	r2, ip
   18688:	bl	17f24 <__assert_fail@plt+0x6b80>
   1868c:	sub	sp, fp, #8
   18690:	pop	{r4, r5, fp, pc}
   18694:	movw	r3, #49464	; 0xc138
   18698:	movt	r3, #2
   1869c:	b	17f24 <__assert_fail@plt+0x6b80>
   186a0:	movw	r3, #49464	; 0xc138
   186a4:	mov	r2, r1
   186a8:	mov	r1, r0
   186ac:	mov	r0, #0
   186b0:	movt	r3, #2
   186b4:	b	17f24 <__assert_fail@plt+0x6b80>
   186b8:	movw	r3, #49464	; 0xc138
   186bc:	mvn	r2, #0
   186c0:	movt	r3, #2
   186c4:	b	17f24 <__assert_fail@plt+0x6b80>
   186c8:	movw	r3, #49464	; 0xc138
   186cc:	mov	r1, r0
   186d0:	mov	r0, #0
   186d4:	mvn	r2, #0
   186d8:	movt	r3, #2
   186dc:	b	17f24 <__assert_fail@plt+0x6b80>
   186e0:	push	{r4, r5, fp, lr}
   186e4:	add	fp, sp, #8
   186e8:	mov	r5, r0
   186ec:	mov	r4, r1
   186f0:	mov	r0, #0
   186f4:	mov	r2, #5
   186f8:	mov	r1, r5
   186fc:	bl	11140 <dcgettext@plt>
   18700:	cmp	r0, r5
   18704:	popne	{r4, r5, fp, pc}
   18708:	bl	19b98 <__assert_fail@plt+0x87f4>
   1870c:	ldrb	r1, [r0]
   18710:	and	r1, r1, #223	; 0xdf
   18714:	cmp	r1, #71	; 0x47
   18718:	beq	18780 <__assert_fail@plt+0x73dc>
   1871c:	cmp	r1, #85	; 0x55
   18720:	bne	187d8 <__assert_fail@plt+0x7434>
   18724:	ldrb	r1, [r0, #1]
   18728:	and	r1, r1, #223	; 0xdf
   1872c:	cmp	r1, #84	; 0x54
   18730:	bne	187d8 <__assert_fail@plt+0x7434>
   18734:	ldrb	r1, [r0, #2]
   18738:	and	r1, r1, #223	; 0xdf
   1873c:	cmp	r1, #70	; 0x46
   18740:	bne	187d8 <__assert_fail@plt+0x7434>
   18744:	ldrb	r1, [r0, #3]
   18748:	cmp	r1, #45	; 0x2d
   1874c:	bne	187d8 <__assert_fail@plt+0x7434>
   18750:	ldrb	r1, [r0, #4]
   18754:	cmp	r1, #56	; 0x38
   18758:	bne	187d8 <__assert_fail@plt+0x7434>
   1875c:	ldrb	r0, [r0, #5]
   18760:	cmp	r0, #0
   18764:	bne	187d8 <__assert_fail@plt+0x7434>
   18768:	ldrb	r1, [r5]
   1876c:	movw	r2, #43802	; 0xab1a
   18770:	movw	r0, #43806	; 0xab1e
   18774:	movt	r2, #1
   18778:	movt	r0, #1
   1877c:	b	18808 <__assert_fail@plt+0x7464>
   18780:	ldrb	r1, [r0, #1]
   18784:	and	r1, r1, #223	; 0xdf
   18788:	cmp	r1, #66	; 0x42
   1878c:	bne	187d8 <__assert_fail@plt+0x7434>
   18790:	ldrb	r1, [r0, #2]
   18794:	cmp	r1, #49	; 0x31
   18798:	bne	187d8 <__assert_fail@plt+0x7434>
   1879c:	ldrb	r1, [r0, #3]
   187a0:	cmp	r1, #56	; 0x38
   187a4:	bne	187d8 <__assert_fail@plt+0x7434>
   187a8:	ldrb	r1, [r0, #4]
   187ac:	cmp	r1, #48	; 0x30
   187b0:	bne	187d8 <__assert_fail@plt+0x7434>
   187b4:	ldrb	r1, [r0, #5]
   187b8:	cmp	r1, #51	; 0x33
   187bc:	bne	187d8 <__assert_fail@plt+0x7434>
   187c0:	ldrb	r1, [r0, #6]
   187c4:	cmp	r1, #48	; 0x30
   187c8:	bne	187d8 <__assert_fail@plt+0x7434>
   187cc:	ldrb	r0, [r0, #7]
   187d0:	cmp	r0, #0
   187d4:	beq	187f4 <__assert_fail@plt+0x7450>
   187d8:	movw	r1, #43796	; 0xab14
   187dc:	movw	r0, #43800	; 0xab18
   187e0:	cmp	r4, #9
   187e4:	movt	r1, #1
   187e8:	movt	r0, #1
   187ec:	moveq	r0, r1
   187f0:	pop	{r4, r5, fp, pc}
   187f4:	ldrb	r1, [r5]
   187f8:	movw	r2, #43810	; 0xab22
   187fc:	movw	r0, #43814	; 0xab26
   18800:	movt	r2, #1
   18804:	movt	r0, #1
   18808:	cmp	r1, #96	; 0x60
   1880c:	moveq	r0, r2
   18810:	pop	{r4, r5, fp, pc}
   18814:	push	{r4, sl, fp, lr}
   18818:	add	fp, sp, #8
   1881c:	sub	sp, sp, #104	; 0x68
   18820:	movw	r1, #44639	; 0xae5f
   18824:	mov	r4, r0
   18828:	mov	r2, sp
   1882c:	mov	r0, #3
   18830:	movt	r1, #1
   18834:	bl	1138c <__lxstat64@plt>
   18838:	mov	r1, r0
   1883c:	mov	r0, #0
   18840:	cmp	r1, #0
   18844:	beq	18850 <__assert_fail@plt+0x74ac>
   18848:	sub	sp, fp, #8
   1884c:	pop	{r4, sl, fp, pc}
   18850:	ldr	r0, [sp, #96]	; 0x60
   18854:	ldr	r1, [sp, #100]	; 0x64
   18858:	ldm	sp, {r2, r3}
   1885c:	stm	r4, {r0, r1, r2, r3}
   18860:	mov	r0, r4
   18864:	sub	sp, fp, #8
   18868:	pop	{r4, sl, fp, pc}
   1886c:	push	{r4, r5, r6, r7, fp, lr}
   18870:	add	fp, sp, #16
   18874:	mov	r4, r0
   18878:	cmp	r0, #2
   1887c:	bhi	188ac <__assert_fail@plt+0x7508>
   18880:	mov	r0, r4
   18884:	bl	19c70 <__assert_fail@plt+0x88cc>
   18888:	mov	r5, r0
   1888c:	bl	11260 <__errno_location@plt>
   18890:	ldr	r7, [r0]
   18894:	mov	r6, r0
   18898:	mov	r0, r4
   1889c:	bl	11380 <close@plt>
   188a0:	mov	r0, r5
   188a4:	str	r7, [r6]
   188a8:	pop	{r4, r5, r6, r7, fp, pc}
   188ac:	mov	r0, r4
   188b0:	pop	{r4, r5, r6, r7, fp, pc}
   188b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   188b8:	add	fp, sp, #24
   188bc:	sub	sp, sp, #32
   188c0:	ldr	r6, [fp, #12]
   188c4:	ldr	r7, [fp, #8]
   188c8:	mov	r4, r2
   188cc:	mov	r8, r0
   188d0:	cmp	r1, #0
   188d4:	beq	188fc <__assert_fail@plt+0x7558>
   188d8:	movw	r2, #43904	; 0xab80
   188dc:	mov	r5, r1
   188e0:	str	r3, [sp, #4]
   188e4:	str	r4, [sp]
   188e8:	mov	r0, r8
   188ec:	mov	r1, #1
   188f0:	movt	r2, #1
   188f4:	mov	r3, r5
   188f8:	b	18914 <__assert_fail@plt+0x7570>
   188fc:	movw	r2, #43916	; 0xab8c
   18900:	str	r3, [sp]
   18904:	mov	r0, r8
   18908:	mov	r1, #1
   1890c:	mov	r3, r4
   18910:	movt	r2, #1
   18914:	bl	112a8 <__fprintf_chk@plt>
   18918:	movw	r1, #43923	; 0xab93
   1891c:	mov	r0, #0
   18920:	mov	r2, #5
   18924:	movt	r1, #1
   18928:	bl	11140 <dcgettext@plt>
   1892c:	movw	r2, #44641	; 0xae61
   18930:	mov	r3, r0
   18934:	movw	r0, #2022	; 0x7e6
   18938:	mov	r1, #1
   1893c:	movt	r2, #1
   18940:	str	r0, [sp]
   18944:	mov	r0, r8
   18948:	bl	112a8 <__fprintf_chk@plt>
   1894c:	movw	r4, #41113	; 0xa099
   18950:	mov	r1, r8
   18954:	movt	r4, #1
   18958:	mov	r0, r4
   1895c:	bl	110d4 <fputs_unlocked@plt>
   18960:	movw	r1, #43927	; 0xab97
   18964:	mov	r0, #0
   18968:	mov	r2, #5
   1896c:	movt	r1, #1
   18970:	bl	11140 <dcgettext@plt>
   18974:	movw	r3, #44098	; 0xac42
   18978:	mov	r2, r0
   1897c:	mov	r0, r8
   18980:	mov	r1, #1
   18984:	movt	r3, #1
   18988:	bl	112a8 <__fprintf_chk@plt>
   1898c:	mov	r0, r4
   18990:	mov	r1, r8
   18994:	bl	110d4 <fputs_unlocked@plt>
   18998:	cmp	r6, #9
   1899c:	bhi	189d8 <__assert_fail@plt+0x7634>
   189a0:	add	r0, pc, #0
   189a4:	ldr	pc, [r0, r6, lsl #2]
   189a8:	ldrdeq	r8, [r1], -r0
   189ac:	andeq	r8, r1, r4, ror #19
   189b0:	andeq	r8, r1, r4, lsl sl
   189b4:	andeq	r8, r1, ip, lsr sl
   189b8:	andeq	r8, r1, r4, ror #20
   189bc:	andeq	r8, r1, ip, lsl #21
   189c0:			; <UNDEFINED> instruction: 0x00018ab4
   189c4:	andeq	r8, r1, ip, ror #21
   189c8:	andeq	r8, r1, ip, lsl #23
   189cc:	andeq	r8, r1, r4, lsr fp
   189d0:	sub	sp, fp, #24
   189d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   189d8:	movw	r1, #44451	; 0xada3
   189dc:	movt	r1, #1
   189e0:	b	18b3c <__assert_fail@plt+0x7798>
   189e4:	movw	r1, #44132	; 0xac64
   189e8:	mov	r0, #0
   189ec:	mov	r2, #5
   189f0:	movt	r1, #1
   189f4:	bl	11140 <dcgettext@plt>
   189f8:	ldr	r3, [r7]
   189fc:	mov	r2, r0
   18a00:	mov	r0, r8
   18a04:	mov	r1, #1
   18a08:	sub	sp, fp, #24
   18a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a10:	b	112a8 <__fprintf_chk@plt>
   18a14:	movw	r1, #44148	; 0xac74
   18a18:	mov	r0, #0
   18a1c:	mov	r2, #5
   18a20:	movt	r1, #1
   18a24:	bl	11140 <dcgettext@plt>
   18a28:	mov	r2, r0
   18a2c:	ldr	r3, [r7]
   18a30:	ldr	r0, [r7, #4]
   18a34:	str	r0, [sp]
   18a38:	b	18b28 <__assert_fail@plt+0x7784>
   18a3c:	movw	r1, #44171	; 0xac8b
   18a40:	mov	r0, #0
   18a44:	mov	r2, #5
   18a48:	movt	r1, #1
   18a4c:	bl	11140 <dcgettext@plt>
   18a50:	mov	r2, r0
   18a54:	ldr	r3, [r7]
   18a58:	ldmib	r7, {r0, r1}
   18a5c:	stm	sp, {r0, r1}
   18a60:	b	18b28 <__assert_fail@plt+0x7784>
   18a64:	movw	r1, #44199	; 0xaca7
   18a68:	mov	r0, #0
   18a6c:	mov	r2, #5
   18a70:	movt	r1, #1
   18a74:	bl	11140 <dcgettext@plt>
   18a78:	ldr	r3, [r7]
   18a7c:	mov	r2, r0
   18a80:	ldmib	r7, {r0, r1, r7}
   18a84:	stm	sp, {r0, r1, r7}
   18a88:	b	18b28 <__assert_fail@plt+0x7784>
   18a8c:	movw	r1, #44231	; 0xacc7
   18a90:	mov	r0, #0
   18a94:	mov	r2, #5
   18a98:	movt	r1, #1
   18a9c:	bl	11140 <dcgettext@plt>
   18aa0:	ldr	r3, [r7]
   18aa4:	mov	r2, r0
   18aa8:	ldmib	r7, {r0, r1, r6, r7}
   18aac:	stm	sp, {r0, r1, r6, r7}
   18ab0:	b	18b28 <__assert_fail@plt+0x7784>
   18ab4:	movw	r1, #44267	; 0xaceb
   18ab8:	mov	r0, #0
   18abc:	mov	r2, #5
   18ac0:	movt	r1, #1
   18ac4:	bl	11140 <dcgettext@plt>
   18ac8:	mov	r2, r0
   18acc:	ldr	r3, [r7]
   18ad0:	ldmib	r7, {r0, r1, r6}
   18ad4:	ldr	r5, [r7, #16]
   18ad8:	ldr	r7, [r7, #20]
   18adc:	stm	sp, {r0, r1, r6}
   18ae0:	str	r5, [sp, #12]
   18ae4:	str	r7, [sp, #16]
   18ae8:	b	18b28 <__assert_fail@plt+0x7784>
   18aec:	movw	r1, #44307	; 0xad13
   18af0:	mov	r0, #0
   18af4:	mov	r2, #5
   18af8:	movt	r1, #1
   18afc:	bl	11140 <dcgettext@plt>
   18b00:	mov	r2, r0
   18b04:	ldr	r3, [r7]
   18b08:	ldmib	r7, {r0, r1, r6}
   18b0c:	ldr	r5, [r7, #16]
   18b10:	ldr	r4, [r7, #20]
   18b14:	ldr	r7, [r7, #24]
   18b18:	stm	sp, {r0, r1, r6}
   18b1c:	str	r5, [sp, #12]
   18b20:	str	r4, [sp, #16]
   18b24:	str	r7, [sp, #20]
   18b28:	mov	r0, r8
   18b2c:	mov	r1, #1
   18b30:	b	18bdc <__assert_fail@plt+0x7838>
   18b34:	movw	r1, #44399	; 0xad6f
   18b38:	movt	r1, #1
   18b3c:	mov	r0, #0
   18b40:	mov	r2, #5
   18b44:	bl	11140 <dcgettext@plt>
   18b48:	mov	ip, r0
   18b4c:	ldr	r3, [r7]
   18b50:	ldr	r0, [r7, #4]
   18b54:	ldr	r1, [r7, #8]
   18b58:	ldr	r6, [r7, #12]
   18b5c:	ldr	r5, [r7, #16]
   18b60:	ldr	r4, [r7, #20]
   18b64:	ldr	r2, [r7, #24]
   18b68:	ldr	lr, [r7, #28]
   18b6c:	ldr	r7, [r7, #32]
   18b70:	stm	sp, {r0, r1, r6}
   18b74:	str	r5, [sp, #12]
   18b78:	str	r4, [sp, #16]
   18b7c:	str	r2, [sp, #20]
   18b80:	str	lr, [sp, #24]
   18b84:	str	r7, [sp, #28]
   18b88:	b	18bd0 <__assert_fail@plt+0x782c>
   18b8c:	movw	r1, #44351	; 0xad3f
   18b90:	mov	r0, #0
   18b94:	mov	r2, #5
   18b98:	movt	r1, #1
   18b9c:	bl	11140 <dcgettext@plt>
   18ba0:	mov	ip, r0
   18ba4:	ldr	r3, [r7]
   18ba8:	ldmib	r7, {r0, r1, r6}
   18bac:	ldr	r5, [r7, #16]
   18bb0:	ldr	r4, [r7, #20]
   18bb4:	ldr	r2, [r7, #24]
   18bb8:	ldr	r7, [r7, #28]
   18bbc:	stm	sp, {r0, r1, r6}
   18bc0:	str	r5, [sp, #12]
   18bc4:	str	r4, [sp, #16]
   18bc8:	str	r2, [sp, #20]
   18bcc:	str	r7, [sp, #24]
   18bd0:	mov	r0, r8
   18bd4:	mov	r1, #1
   18bd8:	mov	r2, ip
   18bdc:	bl	112a8 <__fprintf_chk@plt>
   18be0:	sub	sp, fp, #24
   18be4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18be8:	push	{r4, sl, fp, lr}
   18bec:	add	fp, sp, #8
   18bf0:	sub	sp, sp, #8
   18bf4:	ldr	ip, [fp, #8]
   18bf8:	mov	lr, #0
   18bfc:	ldr	r4, [ip, lr, lsl #2]
   18c00:	add	lr, lr, #1
   18c04:	cmp	r4, #0
   18c08:	bne	18bfc <__assert_fail@plt+0x7858>
   18c0c:	sub	r4, lr, #1
   18c10:	str	ip, [sp]
   18c14:	str	r4, [sp, #4]
   18c18:	bl	188b4 <__assert_fail@plt+0x7510>
   18c1c:	sub	sp, fp, #8
   18c20:	pop	{r4, sl, fp, pc}
   18c24:	push	{fp, lr}
   18c28:	mov	fp, sp
   18c2c:	sub	sp, sp, #48	; 0x30
   18c30:	ldr	ip, [fp, #8]
   18c34:	ldr	lr, [ip]
   18c38:	cmp	lr, #0
   18c3c:	str	lr, [sp, #8]
   18c40:	beq	18cdc <__assert_fail@plt+0x7938>
   18c44:	ldr	lr, [ip, #4]
   18c48:	cmp	lr, #0
   18c4c:	str	lr, [sp, #12]
   18c50:	beq	18ce4 <__assert_fail@plt+0x7940>
   18c54:	ldr	lr, [ip, #8]
   18c58:	cmp	lr, #0
   18c5c:	str	lr, [sp, #16]
   18c60:	beq	18cec <__assert_fail@plt+0x7948>
   18c64:	ldr	lr, [ip, #12]
   18c68:	cmp	lr, #0
   18c6c:	str	lr, [sp, #20]
   18c70:	beq	18cf4 <__assert_fail@plt+0x7950>
   18c74:	ldr	lr, [ip, #16]
   18c78:	cmp	lr, #0
   18c7c:	str	lr, [sp, #24]
   18c80:	beq	18cfc <__assert_fail@plt+0x7958>
   18c84:	ldr	lr, [ip, #20]
   18c88:	cmp	lr, #0
   18c8c:	str	lr, [sp, #28]
   18c90:	beq	18d04 <__assert_fail@plt+0x7960>
   18c94:	ldr	lr, [ip, #24]
   18c98:	cmp	lr, #0
   18c9c:	str	lr, [sp, #32]
   18ca0:	beq	18d0c <__assert_fail@plt+0x7968>
   18ca4:	ldr	lr, [ip, #28]
   18ca8:	cmp	lr, #0
   18cac:	str	lr, [sp, #36]	; 0x24
   18cb0:	beq	18d14 <__assert_fail@plt+0x7970>
   18cb4:	ldr	lr, [ip, #32]
   18cb8:	cmp	lr, #0
   18cbc:	str	lr, [sp, #40]	; 0x28
   18cc0:	beq	18d1c <__assert_fail@plt+0x7978>
   18cc4:	ldr	lr, [ip, #36]	; 0x24
   18cc8:	mov	ip, #10
   18ccc:	cmp	lr, #0
   18cd0:	str	lr, [sp, #44]	; 0x2c
   18cd4:	movweq	ip, #9
   18cd8:	b	18d20 <__assert_fail@plt+0x797c>
   18cdc:	mov	ip, #0
   18ce0:	b	18d20 <__assert_fail@plt+0x797c>
   18ce4:	mov	ip, #1
   18ce8:	b	18d20 <__assert_fail@plt+0x797c>
   18cec:	mov	ip, #2
   18cf0:	b	18d20 <__assert_fail@plt+0x797c>
   18cf4:	mov	ip, #3
   18cf8:	b	18d20 <__assert_fail@plt+0x797c>
   18cfc:	mov	ip, #4
   18d00:	b	18d20 <__assert_fail@plt+0x797c>
   18d04:	mov	ip, #5
   18d08:	b	18d20 <__assert_fail@plt+0x797c>
   18d0c:	mov	ip, #6
   18d10:	b	18d20 <__assert_fail@plt+0x797c>
   18d14:	mov	ip, #7
   18d18:	b	18d20 <__assert_fail@plt+0x797c>
   18d1c:	mov	ip, #8
   18d20:	add	lr, sp, #8
   18d24:	str	ip, [sp, #4]
   18d28:	str	lr, [sp]
   18d2c:	bl	188b4 <__assert_fail@plt+0x7510>
   18d30:	mov	sp, fp
   18d34:	pop	{fp, pc}
   18d38:	push	{fp, lr}
   18d3c:	mov	fp, sp
   18d40:	sub	sp, sp, #56	; 0x38
   18d44:	add	ip, fp, #8
   18d48:	str	ip, [sp, #12]
   18d4c:	ldr	lr, [fp, #8]
   18d50:	cmp	lr, #0
   18d54:	str	lr, [sp, #16]
   18d58:	beq	18df4 <__assert_fail@plt+0x7a50>
   18d5c:	ldr	lr, [ip, #4]
   18d60:	cmp	lr, #0
   18d64:	str	lr, [sp, #20]
   18d68:	beq	18dfc <__assert_fail@plt+0x7a58>
   18d6c:	ldr	lr, [ip, #8]
   18d70:	cmp	lr, #0
   18d74:	str	lr, [sp, #24]
   18d78:	beq	18e04 <__assert_fail@plt+0x7a60>
   18d7c:	ldr	lr, [ip, #12]
   18d80:	cmp	lr, #0
   18d84:	str	lr, [sp, #28]
   18d88:	beq	18e0c <__assert_fail@plt+0x7a68>
   18d8c:	ldr	lr, [ip, #16]
   18d90:	cmp	lr, #0
   18d94:	str	lr, [sp, #32]
   18d98:	beq	18e14 <__assert_fail@plt+0x7a70>
   18d9c:	ldr	lr, [ip, #20]
   18da0:	cmp	lr, #0
   18da4:	str	lr, [sp, #36]	; 0x24
   18da8:	beq	18e1c <__assert_fail@plt+0x7a78>
   18dac:	ldr	lr, [ip, #24]
   18db0:	cmp	lr, #0
   18db4:	str	lr, [sp, #40]	; 0x28
   18db8:	beq	18e24 <__assert_fail@plt+0x7a80>
   18dbc:	ldr	lr, [ip, #28]
   18dc0:	cmp	lr, #0
   18dc4:	str	lr, [sp, #44]	; 0x2c
   18dc8:	beq	18e2c <__assert_fail@plt+0x7a88>
   18dcc:	ldr	lr, [ip, #32]
   18dd0:	cmp	lr, #0
   18dd4:	str	lr, [sp, #48]	; 0x30
   18dd8:	beq	18e34 <__assert_fail@plt+0x7a90>
   18ddc:	ldr	lr, [ip, #36]	; 0x24
   18de0:	mov	ip, #10
   18de4:	cmp	lr, #0
   18de8:	str	lr, [sp, #52]	; 0x34
   18dec:	movweq	ip, #9
   18df0:	b	18e38 <__assert_fail@plt+0x7a94>
   18df4:	mov	ip, #0
   18df8:	b	18e38 <__assert_fail@plt+0x7a94>
   18dfc:	mov	ip, #1
   18e00:	b	18e38 <__assert_fail@plt+0x7a94>
   18e04:	mov	ip, #2
   18e08:	b	18e38 <__assert_fail@plt+0x7a94>
   18e0c:	mov	ip, #3
   18e10:	b	18e38 <__assert_fail@plt+0x7a94>
   18e14:	mov	ip, #4
   18e18:	b	18e38 <__assert_fail@plt+0x7a94>
   18e1c:	mov	ip, #5
   18e20:	b	18e38 <__assert_fail@plt+0x7a94>
   18e24:	mov	ip, #6
   18e28:	b	18e38 <__assert_fail@plt+0x7a94>
   18e2c:	mov	ip, #7
   18e30:	b	18e38 <__assert_fail@plt+0x7a94>
   18e34:	mov	ip, #8
   18e38:	add	lr, sp, #16
   18e3c:	str	ip, [sp, #4]
   18e40:	str	lr, [sp]
   18e44:	bl	188b4 <__assert_fail@plt+0x7510>
   18e48:	mov	sp, fp
   18e4c:	pop	{fp, pc}
   18e50:	push	{fp, lr}
   18e54:	mov	fp, sp
   18e58:	movw	r0, #49532	; 0xc17c
   18e5c:	movt	r0, #2
   18e60:	ldr	r1, [r0]
   18e64:	movw	r0, #41113	; 0xa099
   18e68:	movt	r0, #1
   18e6c:	bl	110d4 <fputs_unlocked@plt>
   18e70:	movw	r1, #44511	; 0xaddf
   18e74:	mov	r0, #0
   18e78:	mov	r2, #5
   18e7c:	movt	r1, #1
   18e80:	bl	11140 <dcgettext@plt>
   18e84:	movw	r2, #44531	; 0xadf3
   18e88:	mov	r1, r0
   18e8c:	mov	r0, #1
   18e90:	movt	r2, #1
   18e94:	bl	11290 <__printf_chk@plt>
   18e98:	movw	r1, #44553	; 0xae09
   18e9c:	mov	r0, #0
   18ea0:	mov	r2, #5
   18ea4:	movt	r1, #1
   18ea8:	bl	11140 <dcgettext@plt>
   18eac:	movw	r2, #41849	; 0xa379
   18eb0:	movw	r3, #42143	; 0xa49f
   18eb4:	mov	r1, r0
   18eb8:	mov	r0, #1
   18ebc:	movt	r2, #1
   18ec0:	movt	r3, #1
   18ec4:	bl	11290 <__printf_chk@plt>
   18ec8:	movw	r1, #44573	; 0xae1d
   18ecc:	mov	r0, #0
   18ed0:	mov	r2, #5
   18ed4:	movt	r1, #1
   18ed8:	bl	11140 <dcgettext@plt>
   18edc:	movw	r2, #44612	; 0xae44
   18ee0:	mov	r1, r0
   18ee4:	mov	r0, #1
   18ee8:	movt	r2, #1
   18eec:	pop	{fp, lr}
   18ef0:	b	11290 <__printf_chk@plt>
   18ef4:	push	{r4, r5, r6, sl, fp, lr}
   18ef8:	add	fp, sp, #16
   18efc:	mov	r4, r2
   18f00:	mov	r5, r1
   18f04:	mov	r6, r0
   18f08:	bl	19c34 <__assert_fail@plt+0x8890>
   18f0c:	cmp	r0, #0
   18f10:	popne	{r4, r5, r6, sl, fp, pc}
   18f14:	cmp	r6, #0
   18f18:	beq	18f2c <__assert_fail@plt+0x7b88>
   18f1c:	cmp	r5, #0
   18f20:	cmpne	r4, #0
   18f24:	bne	18f2c <__assert_fail@plt+0x7b88>
   18f28:	pop	{r4, r5, r6, sl, fp, pc}
   18f2c:	bl	194a8 <__assert_fail@plt+0x8104>
   18f30:	push	{r4, r5, r6, sl, fp, lr}
   18f34:	add	fp, sp, #16
   18f38:	mov	r4, r2
   18f3c:	mov	r5, r1
   18f40:	mov	r6, r0
   18f44:	bl	19c34 <__assert_fail@plt+0x8890>
   18f48:	cmp	r0, #0
   18f4c:	popne	{r4, r5, r6, sl, fp, pc}
   18f50:	cmp	r6, #0
   18f54:	beq	18f68 <__assert_fail@plt+0x7bc4>
   18f58:	cmp	r5, #0
   18f5c:	cmpne	r4, #0
   18f60:	bne	18f68 <__assert_fail@plt+0x7bc4>
   18f64:	pop	{r4, r5, r6, sl, fp, pc}
   18f68:	bl	194a8 <__assert_fail@plt+0x8104>
   18f6c:	push	{fp, lr}
   18f70:	mov	fp, sp
   18f74:	bl	195bc <__assert_fail@plt+0x8218>
   18f78:	cmp	r0, #0
   18f7c:	popne	{fp, pc}
   18f80:	bl	194a8 <__assert_fail@plt+0x8104>
   18f84:	push	{fp, lr}
   18f88:	mov	fp, sp
   18f8c:	bl	195bc <__assert_fail@plt+0x8218>
   18f90:	cmp	r0, #0
   18f94:	popne	{fp, pc}
   18f98:	bl	194a8 <__assert_fail@plt+0x8104>
   18f9c:	push	{fp, lr}
   18fa0:	mov	fp, sp
   18fa4:	bl	195bc <__assert_fail@plt+0x8218>
   18fa8:	cmp	r0, #0
   18fac:	popne	{fp, pc}
   18fb0:	bl	194a8 <__assert_fail@plt+0x8104>
   18fb4:	push	{r4, r5, fp, lr}
   18fb8:	add	fp, sp, #8
   18fbc:	mov	r4, r1
   18fc0:	mov	r5, r0
   18fc4:	bl	195ec <__assert_fail@plt+0x8248>
   18fc8:	cmp	r0, #0
   18fcc:	popne	{r4, r5, fp, pc}
   18fd0:	cmp	r5, #0
   18fd4:	beq	18fe4 <__assert_fail@plt+0x7c40>
   18fd8:	cmp	r4, #0
   18fdc:	bne	18fe4 <__assert_fail@plt+0x7c40>
   18fe0:	pop	{r4, r5, fp, pc}
   18fe4:	bl	194a8 <__assert_fail@plt+0x8104>
   18fe8:	push	{fp, lr}
   18fec:	mov	fp, sp
   18ff0:	cmp	r1, #0
   18ff4:	orreq	r1, r1, #1
   18ff8:	bl	195ec <__assert_fail@plt+0x8248>
   18ffc:	cmp	r0, #0
   19000:	popne	{fp, pc}
   19004:	bl	194a8 <__assert_fail@plt+0x8104>
   19008:	push	{fp, lr}
   1900c:	mov	fp, sp
   19010:	clz	r3, r2
   19014:	lsr	ip, r3, #5
   19018:	clz	r3, r1
   1901c:	lsr	r3, r3, #5
   19020:	orrs	r3, r3, ip
   19024:	movwne	r1, #1
   19028:	movwne	r2, #1
   1902c:	bl	19c34 <__assert_fail@plt+0x8890>
   19030:	cmp	r0, #0
   19034:	popne	{fp, pc}
   19038:	bl	194a8 <__assert_fail@plt+0x8104>
   1903c:	push	{fp, lr}
   19040:	mov	fp, sp
   19044:	mov	r2, r1
   19048:	mov	r1, r0
   1904c:	mov	r0, #0
   19050:	bl	19c34 <__assert_fail@plt+0x8890>
   19054:	cmp	r0, #0
   19058:	popne	{fp, pc}
   1905c:	bl	194a8 <__assert_fail@plt+0x8104>
   19060:	push	{fp, lr}
   19064:	mov	fp, sp
   19068:	mov	r2, r1
   1906c:	mov	r1, r0
   19070:	clz	r0, r2
   19074:	clz	r3, r1
   19078:	lsr	r0, r0, #5
   1907c:	lsr	r3, r3, #5
   19080:	orrs	r0, r3, r0
   19084:	mov	r0, #0
   19088:	movwne	r1, #1
   1908c:	movwne	r2, #1
   19090:	bl	19c34 <__assert_fail@plt+0x8890>
   19094:	cmp	r0, #0
   19098:	popne	{fp, pc}
   1909c:	bl	194a8 <__assert_fail@plt+0x8104>
   190a0:	push	{r4, r5, r6, sl, fp, lr}
   190a4:	add	fp, sp, #16
   190a8:	ldr	r5, [r1]
   190ac:	mov	r4, r1
   190b0:	mov	r6, r0
   190b4:	cmp	r0, #0
   190b8:	beq	190d0 <__assert_fail@plt+0x7d2c>
   190bc:	mov	r0, #1
   190c0:	add	r0, r0, r5, lsr #1
   190c4:	adds	r5, r5, r0
   190c8:	bcc	190d8 <__assert_fail@plt+0x7d34>
   190cc:	b	19114 <__assert_fail@plt+0x7d70>
   190d0:	cmp	r5, #0
   190d4:	movweq	r5, #64	; 0x40
   190d8:	mov	r0, r6
   190dc:	mov	r1, r5
   190e0:	mov	r2, #1
   190e4:	bl	19c34 <__assert_fail@plt+0x8890>
   190e8:	cmp	r5, #0
   190ec:	mov	r1, r5
   190f0:	movwne	r1, #1
   190f4:	cmp	r0, #0
   190f8:	bne	1910c <__assert_fail@plt+0x7d68>
   190fc:	clz	r2, r6
   19100:	lsr	r2, r2, #5
   19104:	orrs	r1, r2, r1
   19108:	bne	19114 <__assert_fail@plt+0x7d70>
   1910c:	str	r5, [r4]
   19110:	pop	{r4, r5, r6, sl, fp, pc}
   19114:	bl	194a8 <__assert_fail@plt+0x8104>
   19118:	push	{r4, r5, r6, r7, fp, lr}
   1911c:	add	fp, sp, #16
   19120:	ldr	r5, [r1]
   19124:	mov	r6, r2
   19128:	mov	r4, r1
   1912c:	mov	r7, r0
   19130:	cmp	r0, #0
   19134:	beq	1914c <__assert_fail@plt+0x7da8>
   19138:	mov	r0, #1
   1913c:	add	r0, r0, r5, lsr #1
   19140:	adds	r5, r5, r0
   19144:	bcc	19164 <__assert_fail@plt+0x7dc0>
   19148:	b	19198 <__assert_fail@plt+0x7df4>
   1914c:	cmp	r5, #0
   19150:	bne	19164 <__assert_fail@plt+0x7dc0>
   19154:	mov	r0, #64	; 0x40
   19158:	cmp	r6, #64	; 0x40
   1915c:	udiv	r5, r0, r6
   19160:	addhi	r5, r5, #1
   19164:	mov	r0, r7
   19168:	mov	r1, r5
   1916c:	mov	r2, r6
   19170:	bl	19c34 <__assert_fail@plt+0x8890>
   19174:	cmp	r0, #0
   19178:	bne	19190 <__assert_fail@plt+0x7dec>
   1917c:	cmp	r7, #0
   19180:	beq	19198 <__assert_fail@plt+0x7df4>
   19184:	cmp	r6, #0
   19188:	cmpne	r5, #0
   1918c:	bne	19198 <__assert_fail@plt+0x7df4>
   19190:	str	r5, [r4]
   19194:	pop	{r4, r5, r6, r7, fp, pc}
   19198:	bl	194a8 <__assert_fail@plt+0x8104>
   1919c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   191a0:	add	fp, sp, #24
   191a4:	mov	r8, r1
   191a8:	ldr	r1, [r1]
   191ac:	mov	r5, r0
   191b0:	add	r0, r1, r1, asr #1
   191b4:	cmp	r0, r1
   191b8:	mvnvs	r0, #-2147483648	; 0x80000000
   191bc:	cmp	r0, r3
   191c0:	mov	r7, r0
   191c4:	movgt	r7, r3
   191c8:	cmn	r3, #1
   191cc:	movle	r7, r0
   191d0:	ldr	r0, [fp, #8]
   191d4:	cmn	r0, #1
   191d8:	ble	19200 <__assert_fail@plt+0x7e5c>
   191dc:	cmp	r0, #0
   191e0:	beq	19254 <__assert_fail@plt+0x7eb0>
   191e4:	cmn	r7, #1
   191e8:	ble	19228 <__assert_fail@plt+0x7e84>
   191ec:	mvn	r4, #-2147483648	; 0x80000000
   191f0:	udiv	r6, r4, r0
   191f4:	cmp	r6, r7
   191f8:	bge	19254 <__assert_fail@plt+0x7eb0>
   191fc:	b	19264 <__assert_fail@plt+0x7ec0>
   19200:	cmn	r7, #1
   19204:	ble	19244 <__assert_fail@plt+0x7ea0>
   19208:	cmn	r0, #1
   1920c:	beq	19254 <__assert_fail@plt+0x7eb0>
   19210:	mov	r6, #-2147483648	; 0x80000000
   19214:	mvn	r4, #-2147483648	; 0x80000000
   19218:	sdiv	r6, r6, r0
   1921c:	cmp	r6, r7
   19220:	bge	19254 <__assert_fail@plt+0x7eb0>
   19224:	b	19264 <__assert_fail@plt+0x7ec0>
   19228:	beq	19254 <__assert_fail@plt+0x7eb0>
   1922c:	mov	r6, #-2147483648	; 0x80000000
   19230:	mvn	r4, #-2147483648	; 0x80000000
   19234:	sdiv	r6, r6, r7
   19238:	cmp	r6, r0
   1923c:	bge	19254 <__assert_fail@plt+0x7eb0>
   19240:	b	19264 <__assert_fail@plt+0x7ec0>
   19244:	mvn	r4, #-2147483648	; 0x80000000
   19248:	sdiv	r6, r4, r0
   1924c:	cmp	r7, r6
   19250:	blt	19264 <__assert_fail@plt+0x7ec0>
   19254:	mul	r6, r7, r0
   19258:	mov	r4, #64	; 0x40
   1925c:	cmp	r6, #63	; 0x3f
   19260:	bgt	1926c <__assert_fail@plt+0x7ec8>
   19264:	sdiv	r7, r4, r0
   19268:	mul	r6, r7, r0
   1926c:	cmp	r5, #0
   19270:	moveq	r4, #0
   19274:	streq	r4, [r8]
   19278:	sub	r4, r7, r1
   1927c:	cmp	r4, r2
   19280:	bge	1932c <__assert_fail@plt+0x7f88>
   19284:	add	r7, r1, r2
   19288:	mov	r6, #0
   1928c:	mov	r2, #0
   19290:	cmp	r7, r3
   19294:	movwgt	r6, #1
   19298:	cmn	r3, #1
   1929c:	movwgt	r2, #1
   192a0:	cmp	r7, r1
   192a4:	bvs	19360 <__assert_fail@plt+0x7fbc>
   192a8:	ands	r1, r2, r6
   192ac:	bne	19360 <__assert_fail@plt+0x7fbc>
   192b0:	cmn	r0, #1
   192b4:	ble	192dc <__assert_fail@plt+0x7f38>
   192b8:	cmp	r0, #0
   192bc:	beq	19328 <__assert_fail@plt+0x7f84>
   192c0:	cmn	r7, #1
   192c4:	ble	19300 <__assert_fail@plt+0x7f5c>
   192c8:	mvn	r1, #-2147483648	; 0x80000000
   192cc:	udiv	r1, r1, r0
   192d0:	cmp	r1, r7
   192d4:	bge	19328 <__assert_fail@plt+0x7f84>
   192d8:	b	19360 <__assert_fail@plt+0x7fbc>
   192dc:	cmn	r7, #1
   192e0:	ble	19318 <__assert_fail@plt+0x7f74>
   192e4:	cmn	r0, #1
   192e8:	beq	19328 <__assert_fail@plt+0x7f84>
   192ec:	mov	r1, #-2147483648	; 0x80000000
   192f0:	sdiv	r1, r1, r0
   192f4:	cmp	r1, r7
   192f8:	bge	19328 <__assert_fail@plt+0x7f84>
   192fc:	b	19360 <__assert_fail@plt+0x7fbc>
   19300:	beq	19328 <__assert_fail@plt+0x7f84>
   19304:	mov	r1, #-2147483648	; 0x80000000
   19308:	sdiv	r1, r1, r7
   1930c:	cmp	r1, r0
   19310:	bge	19328 <__assert_fail@plt+0x7f84>
   19314:	b	19360 <__assert_fail@plt+0x7fbc>
   19318:	mvn	r1, #-2147483648	; 0x80000000
   1931c:	sdiv	r1, r1, r0
   19320:	cmp	r7, r1
   19324:	blt	19360 <__assert_fail@plt+0x7fbc>
   19328:	mul	r6, r7, r0
   1932c:	mov	r0, r5
   19330:	mov	r1, r6
   19334:	bl	195ec <__assert_fail@plt+0x8248>
   19338:	cmp	r6, #0
   1933c:	movwne	r6, #1
   19340:	cmp	r0, #0
   19344:	bne	19358 <__assert_fail@plt+0x7fb4>
   19348:	clz	r1, r5
   1934c:	lsr	r1, r1, #5
   19350:	orrs	r1, r1, r6
   19354:	bne	19360 <__assert_fail@plt+0x7fbc>
   19358:	str	r7, [r8]
   1935c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19360:	bl	194a8 <__assert_fail@plt+0x8104>
   19364:	push	{fp, lr}
   19368:	mov	fp, sp
   1936c:	mov	r1, #1
   19370:	bl	19568 <__assert_fail@plt+0x81c4>
   19374:	cmp	r0, #0
   19378:	popne	{fp, pc}
   1937c:	bl	194a8 <__assert_fail@plt+0x8104>
   19380:	push	{fp, lr}
   19384:	mov	fp, sp
   19388:	bl	19568 <__assert_fail@plt+0x81c4>
   1938c:	cmp	r0, #0
   19390:	popne	{fp, pc}
   19394:	bl	194a8 <__assert_fail@plt+0x8104>
   19398:	push	{fp, lr}
   1939c:	mov	fp, sp
   193a0:	mov	r1, #1
   193a4:	bl	19568 <__assert_fail@plt+0x81c4>
   193a8:	cmp	r0, #0
   193ac:	popne	{fp, pc}
   193b0:	bl	194a8 <__assert_fail@plt+0x8104>
   193b4:	push	{fp, lr}
   193b8:	mov	fp, sp
   193bc:	bl	19568 <__assert_fail@plt+0x81c4>
   193c0:	cmp	r0, #0
   193c4:	popne	{fp, pc}
   193c8:	bl	194a8 <__assert_fail@plt+0x8104>
   193cc:	push	{r4, r5, fp, lr}
   193d0:	add	fp, sp, #8
   193d4:	mov	r5, r0
   193d8:	mov	r0, r1
   193dc:	mov	r4, r1
   193e0:	bl	195bc <__assert_fail@plt+0x8218>
   193e4:	cmp	r0, #0
   193e8:	beq	193fc <__assert_fail@plt+0x8058>
   193ec:	mov	r1, r5
   193f0:	mov	r2, r4
   193f4:	pop	{r4, r5, fp, lr}
   193f8:	b	11128 <memcpy@plt>
   193fc:	bl	194a8 <__assert_fail@plt+0x8104>
   19400:	push	{r4, r5, fp, lr}
   19404:	add	fp, sp, #8
   19408:	mov	r5, r0
   1940c:	mov	r0, r1
   19410:	mov	r4, r1
   19414:	bl	195bc <__assert_fail@plt+0x8218>
   19418:	cmp	r0, #0
   1941c:	beq	19430 <__assert_fail@plt+0x808c>
   19420:	mov	r1, r5
   19424:	mov	r2, r4
   19428:	pop	{r4, r5, fp, lr}
   1942c:	b	11128 <memcpy@plt>
   19430:	bl	194a8 <__assert_fail@plt+0x8104>
   19434:	push	{r4, r5, fp, lr}
   19438:	add	fp, sp, #8
   1943c:	mov	r5, r0
   19440:	add	r0, r1, #1
   19444:	mov	r4, r1
   19448:	bl	195bc <__assert_fail@plt+0x8218>
   1944c:	cmp	r0, #0
   19450:	beq	1946c <__assert_fail@plt+0x80c8>
   19454:	mov	r1, #0
   19458:	mov	r2, r4
   1945c:	strb	r1, [r0, r4]
   19460:	mov	r1, r5
   19464:	pop	{r4, r5, fp, lr}
   19468:	b	11128 <memcpy@plt>
   1946c:	bl	194a8 <__assert_fail@plt+0x8104>
   19470:	push	{r4, r5, fp, lr}
   19474:	add	fp, sp, #8
   19478:	mov	r4, r0
   1947c:	bl	1123c <strlen@plt>
   19480:	add	r5, r0, #1
   19484:	mov	r0, r5
   19488:	bl	195bc <__assert_fail@plt+0x8218>
   1948c:	cmp	r0, #0
   19490:	beq	194a4 <__assert_fail@plt+0x8100>
   19494:	mov	r1, r4
   19498:	mov	r2, r5
   1949c:	pop	{r4, r5, fp, lr}
   194a0:	b	11128 <memcpy@plt>
   194a4:	bl	194a8 <__assert_fail@plt+0x8104>
   194a8:	push	{fp, lr}
   194ac:	mov	fp, sp
   194b0:	movw	r0, #49440	; 0xc120
   194b4:	movw	r1, #44688	; 0xae90
   194b8:	mov	r2, #5
   194bc:	movt	r0, #2
   194c0:	movt	r1, #1
   194c4:	ldr	r4, [r0]
   194c8:	mov	r0, #0
   194cc:	bl	11140 <dcgettext@plt>
   194d0:	movw	r2, #42022	; 0xa426
   194d4:	mov	r3, r0
   194d8:	mov	r0, r4
   194dc:	mov	r1, #0
   194e0:	movt	r2, #1
   194e4:	bl	111c4 <error@plt>
   194e8:	bl	11374 <abort@plt>
   194ec:	push	{fp, lr}
   194f0:	mov	fp, sp
   194f4:	orr	r1, r1, #512	; 0x200
   194f8:	bl	12c88 <__assert_fail@plt+0x18e4>
   194fc:	cmp	r0, #0
   19500:	popne	{fp, pc}
   19504:	bl	11260 <__errno_location@plt>
   19508:	ldr	r0, [r0]
   1950c:	cmp	r0, #22
   19510:	bne	19534 <__assert_fail@plt+0x8190>
   19514:	movw	r0, #44705	; 0xaea1
   19518:	movw	r1, #44721	; 0xaeb1
   1951c:	movw	r3, #44732	; 0xaebc
   19520:	mov	r2, #41	; 0x29
   19524:	movt	r0, #1
   19528:	movt	r1, #1
   1952c:	movt	r3, #1
   19530:	bl	113a4 <__assert_fail@plt>
   19534:	bl	194a8 <__assert_fail@plt+0x8104>
   19538:	ldr	r0, [r0, #48]	; 0x30
   1953c:	and	r0, r0, #17
   19540:	cmp	r0, #16
   19544:	moveq	r0, #1
   19548:	bxeq	lr
   1954c:	cmp	r0, #17
   19550:	movne	r0, #0
   19554:	bxne	lr
   19558:	ldr	r0, [r1, #48]	; 0x30
   1955c:	cmp	r0, #0
   19560:	movwne	r0, #1
   19564:	bx	lr
   19568:	clz	r2, r1
   1956c:	clz	r3, r0
   19570:	lsr	r2, r2, #5
   19574:	lsr	r3, r3, #5
   19578:	orrs	r2, r3, r2
   1957c:	movwne	r1, #1
   19580:	movwne	r0, #1
   19584:	cmp	r1, #0
   19588:	beq	195b8 <__assert_fail@plt+0x8214>
   1958c:	mvn	r2, #-2147483648	; 0x80000000
   19590:	udiv	r2, r2, r1
   19594:	cmp	r2, r0
   19598:	bcs	195b8 <__assert_fail@plt+0x8214>
   1959c:	push	{fp, lr}
   195a0:	mov	fp, sp
   195a4:	bl	11260 <__errno_location@plt>
   195a8:	mov	r1, #12
   195ac:	str	r1, [r0]
   195b0:	mov	r0, #0
   195b4:	pop	{fp, pc}
   195b8:	b	110c8 <calloc@plt>
   195bc:	cmp	r0, #0
   195c0:	movweq	r0, #1
   195c4:	cmn	r0, #1
   195c8:	ble	195d0 <__assert_fail@plt+0x822c>
   195cc:	b	111dc <malloc@plt>
   195d0:	push	{fp, lr}
   195d4:	mov	fp, sp
   195d8:	bl	11260 <__errno_location@plt>
   195dc:	mov	r1, #12
   195e0:	str	r1, [r0]
   195e4:	mov	r0, #0
   195e8:	pop	{fp, pc}
   195ec:	push	{fp, lr}
   195f0:	mov	fp, sp
   195f4:	cmp	r0, #0
   195f8:	beq	19614 <__assert_fail@plt+0x8270>
   195fc:	cmp	r1, #0
   19600:	beq	19620 <__assert_fail@plt+0x827c>
   19604:	cmn	r1, #1
   19608:	ble	1962c <__assert_fail@plt+0x8288>
   1960c:	pop	{fp, lr}
   19610:	b	1114c <realloc@plt>
   19614:	mov	r0, r1
   19618:	pop	{fp, lr}
   1961c:	b	195bc <__assert_fail@plt+0x8218>
   19620:	bl	19ac8 <__assert_fail@plt+0x8724>
   19624:	mov	r0, #0
   19628:	pop	{fp, pc}
   1962c:	bl	11260 <__errno_location@plt>
   19630:	mov	r1, #12
   19634:	str	r1, [r0]
   19638:	mov	r0, #0
   1963c:	pop	{fp, pc}
   19640:	push	{r4, r5, r6, sl, fp, lr}
   19644:	add	fp, sp, #16
   19648:	mov	r4, r0
   1964c:	bl	111ac <__fpending@plt>
   19650:	ldr	r6, [r4]
   19654:	mov	r5, r0
   19658:	mov	r0, r4
   1965c:	bl	197b4 <__assert_fail@plt+0x8410>
   19660:	tst	r6, #32
   19664:	bne	1969c <__assert_fail@plt+0x82f8>
   19668:	cmp	r0, #0
   1966c:	mov	r4, r0
   19670:	mvnne	r4, #0
   19674:	cmp	r5, #0
   19678:	bne	196a8 <__assert_fail@plt+0x8304>
   1967c:	cmp	r0, #0
   19680:	beq	196a8 <__assert_fail@plt+0x8304>
   19684:	bl	11260 <__errno_location@plt>
   19688:	ldr	r0, [r0]
   1968c:	subs	r4, r0, #9
   19690:	mvnne	r4, #0
   19694:	mov	r0, r4
   19698:	pop	{r4, r5, r6, sl, fp, pc}
   1969c:	mvn	r4, #0
   196a0:	cmp	r0, #0
   196a4:	beq	196b0 <__assert_fail@plt+0x830c>
   196a8:	mov	r0, r4
   196ac:	pop	{r4, r5, r6, sl, fp, pc}
   196b0:	bl	11260 <__errno_location@plt>
   196b4:	mov	r1, #0
   196b8:	str	r1, [r0]
   196bc:	mov	r0, r4
   196c0:	pop	{r4, r5, r6, sl, fp, pc}
   196c4:	movw	r2, #62998	; 0xf616
   196c8:	mov	r1, #0
   196cc:	movt	r2, #149	; 0x95
   196d0:	str	r1, [r0, #16]
   196d4:	str	r1, [r0, #20]
   196d8:	str	r2, [r0, #24]
   196dc:	bx	lr
   196e0:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   196e4:	add	fp, sp, #24
   196e8:	ldr	r2, [r0, #24]
   196ec:	movw	r3, #62998	; 0xf616
   196f0:	movt	r3, #149	; 0x95
   196f4:	cmp	r2, r3
   196f8:	bne	19794 <__assert_fail@plt+0x83f0>
   196fc:	add	r3, r0, #16
   19700:	add	ip, r0, #8
   19704:	ldrd	r4, [r3]
   19708:	orrs	r2, r4, r5
   1970c:	beq	19748 <__assert_fail@plt+0x83a4>
   19710:	ldr	r6, [r1, #96]	; 0x60
   19714:	ldr	r9, [r1, #100]	; 0x64
   19718:	ldm	r0, {r2, r7}
   1971c:	eor	r7, r9, r7
   19720:	eor	r2, r6, r2
   19724:	orrs	r2, r2, r7
   19728:	bne	19748 <__assert_fail@plt+0x83a4>
   1972c:	ldm	ip, {r2, r7}
   19730:	ldm	r1, {r6, r9}
   19734:	eor	r7, r9, r7
   19738:	eor	r2, r6, r2
   1973c:	orrs	r2, r2, r7
   19740:	mov	r2, #1
   19744:	beq	19780 <__assert_fail@plt+0x83dc>
   19748:	adds	r6, r4, #1
   1974c:	adc	r7, r5, #0
   19750:	and	r2, r6, r4
   19754:	strd	r6, [r3]
   19758:	and	r3, r7, r5
   1975c:	orrs	r2, r2, r3
   19760:	mov	r2, #0
   19764:	bne	19780 <__assert_fail@plt+0x83dc>
   19768:	orrs	r3, r6, r7
   1976c:	beq	19788 <__assert_fail@plt+0x83e4>
   19770:	ldrd	r4, [r1]
   19774:	strd	r4, [ip]
   19778:	ldrd	r4, [r1, #96]	; 0x60
   1977c:	strd	r4, [r0]
   19780:	mov	r0, r2
   19784:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19788:	mov	r2, #1
   1978c:	mov	r0, r2
   19790:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19794:	movw	r0, #44810	; 0xaf0a
   19798:	movw	r1, #44834	; 0xaf22
   1979c:	movw	r3, #44852	; 0xaf34
   197a0:	mov	r2, #60	; 0x3c
   197a4:	movt	r0, #1
   197a8:	movt	r1, #1
   197ac:	movt	r3, #1
   197b0:	bl	113a4 <__assert_fail@plt>
   197b4:	push	{r4, r5, r6, sl, fp, lr}
   197b8:	add	fp, sp, #16
   197bc:	sub	sp, sp, #8
   197c0:	mov	r4, r0
   197c4:	bl	1129c <fileno@plt>
   197c8:	cmn	r0, #1
   197cc:	ble	19840 <__assert_fail@plt+0x849c>
   197d0:	mov	r0, r4
   197d4:	bl	111f4 <__freading@plt>
   197d8:	cmp	r0, #0
   197dc:	beq	19808 <__assert_fail@plt+0x8464>
   197e0:	mov	r0, r4
   197e4:	bl	1129c <fileno@plt>
   197e8:	mov	r1, #1
   197ec:	mov	r2, #0
   197f0:	mov	r3, #0
   197f4:	str	r1, [sp]
   197f8:	bl	11194 <lseek64@plt>
   197fc:	and	r0, r0, r1
   19800:	cmn	r0, #1
   19804:	beq	19840 <__assert_fail@plt+0x849c>
   19808:	mov	r0, r4
   1980c:	bl	19a6c <__assert_fail@plt+0x86c8>
   19810:	cmp	r0, #0
   19814:	beq	19840 <__assert_fail@plt+0x849c>
   19818:	bl	11260 <__errno_location@plt>
   1981c:	ldr	r6, [r0]
   19820:	mov	r5, r0
   19824:	mov	r0, r4
   19828:	bl	112b4 <fclose@plt>
   1982c:	cmp	r6, #0
   19830:	strne	r6, [r5]
   19834:	mvnne	r0, #0
   19838:	sub	sp, fp, #16
   1983c:	pop	{r4, r5, r6, sl, fp, pc}
   19840:	mov	r0, r4
   19844:	sub	sp, fp, #16
   19848:	pop	{r4, r5, r6, sl, fp, lr}
   1984c:	b	112b4 <fclose@plt>
   19850:	sub	sp, sp, #8
   19854:	push	{r4, r5, r6, r7, fp, lr}
   19858:	add	fp, sp, #16
   1985c:	sub	sp, sp, #8
   19860:	mov	r5, r0
   19864:	add	r0, fp, #8
   19868:	cmp	r1, #11
   1986c:	str	r2, [fp, #8]
   19870:	str	r3, [fp, #12]
   19874:	str	r0, [sp, #4]
   19878:	bhi	198b4 <__assert_fail@plt+0x8510>
   1987c:	mov	r0, #1
   19880:	movw	r2, #1300	; 0x514
   19884:	tst	r2, r0, lsl r1
   19888:	bne	19974 <__assert_fail@plt+0x85d0>
   1988c:	movw	r2, #2570	; 0xa0a
   19890:	tst	r2, r0, lsl r1
   19894:	bne	198dc <__assert_fail@plt+0x8538>
   19898:	cmp	r1, #0
   1989c:	bne	198b4 <__assert_fail@plt+0x8510>
   198a0:	ldr	r0, [sp, #4]
   198a4:	add	r1, r0, #4
   198a8:	str	r1, [sp, #4]
   198ac:	mov	r1, #0
   198b0:	b	19980 <__assert_fail@plt+0x85dc>
   198b4:	sub	r0, r1, #1024	; 0x400
   198b8:	cmp	r0, #10
   198bc:	bhi	19974 <__assert_fail@plt+0x85d0>
   198c0:	mov	r2, #1
   198c4:	movw	r3, #645	; 0x285
   198c8:	tst	r3, r2, lsl r0
   198cc:	bne	19974 <__assert_fail@plt+0x85d0>
   198d0:	movw	r3, #1282	; 0x502
   198d4:	tst	r3, r2, lsl r0
   198d8:	beq	198e8 <__assert_fail@plt+0x8544>
   198dc:	mov	r0, r5
   198e0:	bl	112cc <fcntl64@plt>
   198e4:	b	1998c <__assert_fail@plt+0x85e8>
   198e8:	cmp	r0, #6
   198ec:	bne	19974 <__assert_fail@plt+0x85d0>
   198f0:	ldr	r0, [sp, #4]
   198f4:	movw	r7, #49896	; 0xc2e8
   198f8:	movt	r7, #2
   198fc:	add	r1, r0, #4
   19900:	str	r1, [sp, #4]
   19904:	ldr	r6, [r0]
   19908:	ldr	r0, [r7]
   1990c:	cmp	r0, #0
   19910:	bmi	199b0 <__assert_fail@plt+0x860c>
   19914:	mov	r0, r5
   19918:	movw	r1, #1030	; 0x406
   1991c:	mov	r2, r6
   19920:	bl	112cc <fcntl64@plt>
   19924:	mov	r4, r0
   19928:	cmn	r0, #1
   1992c:	bgt	199a4 <__assert_fail@plt+0x8600>
   19930:	bl	11260 <__errno_location@plt>
   19934:	ldr	r0, [r0]
   19938:	cmp	r0, #22
   1993c:	bne	199a4 <__assert_fail@plt+0x8600>
   19940:	mov	r0, r5
   19944:	mov	r1, #0
   19948:	mov	r2, r6
   1994c:	bl	112cc <fcntl64@plt>
   19950:	mov	r4, r0
   19954:	cmp	r0, #0
   19958:	bmi	19990 <__assert_fail@plt+0x85ec>
   1995c:	mvn	r0, #0
   19960:	str	r0, [r7]
   19964:	mov	r0, #1
   19968:	cmp	r0, #0
   1996c:	bne	199dc <__assert_fail@plt+0x8638>
   19970:	b	19990 <__assert_fail@plt+0x85ec>
   19974:	ldr	r0, [sp, #4]
   19978:	add	r2, r0, #4
   1997c:	str	r2, [sp, #4]
   19980:	ldr	r2, [r0]
   19984:	mov	r0, r5
   19988:	bl	112cc <fcntl64@plt>
   1998c:	mov	r4, r0
   19990:	mov	r0, r4
   19994:	sub	sp, fp, #16
   19998:	pop	{r4, r5, r6, r7, fp, lr}
   1999c:	add	sp, sp, #8
   199a0:	bx	lr
   199a4:	mov	r0, #1
   199a8:	str	r0, [r7]
   199ac:	b	19990 <__assert_fail@plt+0x85ec>
   199b0:	mov	r0, r5
   199b4:	mov	r1, #0
   199b8:	mov	r2, r6
   199bc:	bl	112cc <fcntl64@plt>
   199c0:	mov	r4, r0
   199c4:	ldr	r0, [r7]
   199c8:	add	r0, r0, #1
   199cc:	clz	r0, r0
   199d0:	lsr	r0, r0, #5
   199d4:	cmp	r0, #0
   199d8:	beq	19990 <__assert_fail@plt+0x85ec>
   199dc:	cmp	r4, #0
   199e0:	bmi	19990 <__assert_fail@plt+0x85ec>
   199e4:	mov	r0, r4
   199e8:	mov	r1, #1
   199ec:	bl	112cc <fcntl64@plt>
   199f0:	cmp	r0, #0
   199f4:	bmi	19a10 <__assert_fail@plt+0x866c>
   199f8:	orr	r2, r0, #1
   199fc:	mov	r0, r4
   19a00:	mov	r1, #2
   19a04:	bl	112cc <fcntl64@plt>
   19a08:	cmn	r0, #1
   19a0c:	bne	19990 <__assert_fail@plt+0x85ec>
   19a10:	bl	11260 <__errno_location@plt>
   19a14:	ldr	r6, [r0]
   19a18:	mov	r5, r0
   19a1c:	mov	r0, r4
   19a20:	bl	11380 <close@plt>
   19a24:	str	r6, [r5]
   19a28:	mvn	r4, #0
   19a2c:	b	19990 <__assert_fail@plt+0x85ec>
   19a30:	sub	sp, sp, #8
   19a34:	push	{fp, lr}
   19a38:	mov	fp, sp
   19a3c:	sub	sp, sp, #8
   19a40:	str	r2, [fp, #8]
   19a44:	str	r3, [fp, #12]
   19a48:	tst	r1, #64	; 0x40
   19a4c:	mov	r2, #0
   19a50:	ldrne	r2, [fp, #8]
   19a54:	bl	111d0 <open64@plt>
   19a58:	bl	1886c <__assert_fail@plt+0x74c8>
   19a5c:	mov	sp, fp
   19a60:	pop	{fp, lr}
   19a64:	add	sp, sp, #8
   19a68:	bx	lr
   19a6c:	push	{r4, sl, fp, lr}
   19a70:	add	fp, sp, #8
   19a74:	sub	sp, sp, #8
   19a78:	mov	r4, r0
   19a7c:	cmp	r0, #0
   19a80:	beq	19ab8 <__assert_fail@plt+0x8714>
   19a84:	mov	r0, r4
   19a88:	bl	111f4 <__freading@plt>
   19a8c:	cmp	r0, #0
   19a90:	beq	19ab8 <__assert_fail@plt+0x8714>
   19a94:	ldrb	r0, [r4, #1]
   19a98:	tst	r0, #1
   19a9c:	beq	19ab8 <__assert_fail@plt+0x8714>
   19aa0:	mov	r0, #1
   19aa4:	mov	r2, #0
   19aa8:	mov	r3, #0
   19aac:	str	r0, [sp]
   19ab0:	mov	r0, r4
   19ab4:	bl	19af0 <__assert_fail@plt+0x874c>
   19ab8:	mov	r0, r4
   19abc:	sub	sp, fp, #8
   19ac0:	pop	{r4, sl, fp, lr}
   19ac4:	b	110f8 <fflush@plt>
   19ac8:	push	{r4, r5, r6, sl, fp, lr}
   19acc:	add	fp, sp, #16
   19ad0:	mov	r4, r0
   19ad4:	bl	11260 <__errno_location@plt>
   19ad8:	ldr	r6, [r0]
   19adc:	mov	r5, r0
   19ae0:	mov	r0, r4
   19ae4:	bl	11110 <free@plt>
   19ae8:	str	r6, [r5]
   19aec:	pop	{r4, r5, r6, sl, fp, pc}
   19af0:	push	{r4, r5, r6, r7, fp, lr}
   19af4:	add	fp, sp, #16
   19af8:	sub	sp, sp, #8
   19afc:	mov	r4, r0
   19b00:	ldr	r0, [r0, #4]
   19b04:	mov	r5, r3
   19b08:	mov	r6, r2
   19b0c:	ldr	r1, [r4, #8]
   19b10:	cmp	r1, r0
   19b14:	bne	19b30 <__assert_fail@plt+0x878c>
   19b18:	ldrd	r0, [r4, #16]
   19b1c:	cmp	r1, r0
   19b20:	bne	19b30 <__assert_fail@plt+0x878c>
   19b24:	ldr	r0, [r4, #36]	; 0x24
   19b28:	cmp	r0, #0
   19b2c:	beq	19b48 <__assert_fail@plt+0x87a4>
   19b30:	mov	r0, r4
   19b34:	mov	r2, r6
   19b38:	mov	r3, r5
   19b3c:	sub	sp, fp, #16
   19b40:	pop	{r4, r5, r6, r7, fp, lr}
   19b44:	b	112c0 <fseeko64@plt>
   19b48:	ldr	r7, [fp, #8]
   19b4c:	mov	r0, r4
   19b50:	bl	1129c <fileno@plt>
   19b54:	mov	r2, r6
   19b58:	mov	r3, r5
   19b5c:	str	r7, [sp]
   19b60:	bl	11194 <lseek64@plt>
   19b64:	and	r2, r0, r1
   19b68:	cmn	r2, #1
   19b6c:	beq	19b8c <__assert_fail@plt+0x87e8>
   19b70:	strd	r0, [r4, #80]	; 0x50
   19b74:	ldr	r0, [r4]
   19b78:	bic	r0, r0, #16
   19b7c:	str	r0, [r4]
   19b80:	mov	r0, #0
   19b84:	sub	sp, fp, #16
   19b88:	pop	{r4, r5, r6, r7, fp, pc}
   19b8c:	mvn	r0, #0
   19b90:	sub	sp, fp, #16
   19b94:	pop	{r4, r5, r6, r7, fp, pc}
   19b98:	push	{fp, lr}
   19b9c:	mov	fp, sp
   19ba0:	mov	r0, #14
   19ba4:	bl	112f0 <nl_langinfo@plt>
   19ba8:	movw	r1, #41114	; 0xa09a
   19bac:	cmp	r0, #0
   19bb0:	movt	r1, #1
   19bb4:	movne	r1, r0
   19bb8:	movw	r0, #44919	; 0xaf77
   19bbc:	ldrb	r2, [r1]
   19bc0:	movt	r0, #1
   19bc4:	cmp	r2, #0
   19bc8:	movne	r0, r1
   19bcc:	pop	{fp, pc}
   19bd0:	push	{r4, r5, r6, r7, fp, lr}
   19bd4:	add	fp, sp, #16
   19bd8:	sub	sp, sp, #8
   19bdc:	cmp	r0, #0
   19be0:	add	r5, sp, #4
   19be4:	mov	r7, r2
   19be8:	mov	r4, r1
   19bec:	movne	r5, r0
   19bf0:	mov	r0, r5
   19bf4:	bl	111b8 <mbrtowc@plt>
   19bf8:	mov	r6, r0
   19bfc:	cmp	r7, #0
   19c00:	beq	19c28 <__assert_fail@plt+0x8884>
   19c04:	cmn	r6, #2
   19c08:	bcc	19c28 <__assert_fail@plt+0x8884>
   19c0c:	mov	r0, #0
   19c10:	bl	19c7c <__assert_fail@plt+0x88d8>
   19c14:	cmp	r0, #0
   19c18:	bne	19c28 <__assert_fail@plt+0x8884>
   19c1c:	ldrb	r0, [r4]
   19c20:	mov	r6, #1
   19c24:	str	r0, [r5]
   19c28:	mov	r0, r6
   19c2c:	sub	sp, fp, #16
   19c30:	pop	{r4, r5, r6, r7, fp, pc}
   19c34:	cmp	r2, #0
   19c38:	beq	19c68 <__assert_fail@plt+0x88c4>
   19c3c:	mvn	r3, #0
   19c40:	udiv	r3, r3, r2
   19c44:	cmp	r3, r1
   19c48:	bcs	19c68 <__assert_fail@plt+0x88c4>
   19c4c:	push	{fp, lr}
   19c50:	mov	fp, sp
   19c54:	bl	11260 <__errno_location@plt>
   19c58:	mov	r1, #12
   19c5c:	str	r1, [r0]
   19c60:	mov	r0, #0
   19c64:	pop	{fp, pc}
   19c68:	mul	r1, r2, r1
   19c6c:	b	195ec <__assert_fail@plt+0x8248>
   19c70:	mov	r1, #0
   19c74:	mov	r2, #3
   19c78:	b	19850 <__assert_fail@plt+0x84ac>
   19c7c:	push	{r4, sl, fp, lr}
   19c80:	add	fp, sp, #8
   19c84:	sub	sp, sp, #264	; 0x108
   19c88:	add	r1, sp, #7
   19c8c:	movw	r2, #257	; 0x101
   19c90:	bl	19ce8 <__assert_fail@plt+0x8944>
   19c94:	mov	r4, #0
   19c98:	cmp	r0, #0
   19c9c:	bne	19cdc <__assert_fail@plt+0x8938>
   19ca0:	movw	r1, #44925	; 0xaf7d
   19ca4:	add	r0, sp, #7
   19ca8:	mov	r2, #2
   19cac:	movt	r1, #1
   19cb0:	bl	11230 <bcmp@plt>
   19cb4:	cmp	r0, #0
   19cb8:	beq	19cdc <__assert_fail@plt+0x8938>
   19cbc:	movw	r1, #44927	; 0xaf7f
   19cc0:	add	r0, sp, #7
   19cc4:	mov	r2, #6
   19cc8:	movt	r1, #1
   19ccc:	bl	11230 <bcmp@plt>
   19cd0:	cmp	r0, #0
   19cd4:	mov	r4, r0
   19cd8:	movwne	r4, #1
   19cdc:	mov	r0, r4
   19ce0:	sub	sp, fp, #8
   19ce4:	pop	{r4, sl, fp, pc}
   19ce8:	push	{r4, r5, r6, r7, fp, lr}
   19cec:	add	fp, sp, #16
   19cf0:	mov	r4, r1
   19cf4:	mov	r1, #0
   19cf8:	mov	r6, r2
   19cfc:	bl	112d8 <setlocale@plt>
   19d00:	cmp	r0, #0
   19d04:	beq	19d34 <__assert_fail@plt+0x8990>
   19d08:	mov	r7, r0
   19d0c:	bl	1123c <strlen@plt>
   19d10:	cmp	r0, r6
   19d14:	bcs	19d50 <__assert_fail@plt+0x89ac>
   19d18:	add	r2, r0, #1
   19d1c:	mov	r0, r4
   19d20:	mov	r1, r7
   19d24:	bl	11128 <memcpy@plt>
   19d28:	mov	r5, #0
   19d2c:	mov	r0, r5
   19d30:	pop	{r4, r5, r6, r7, fp, pc}
   19d34:	mov	r5, #22
   19d38:	cmp	r6, #0
   19d3c:	beq	19d78 <__assert_fail@plt+0x89d4>
   19d40:	mov	r0, #0
   19d44:	strb	r0, [r4]
   19d48:	mov	r0, r5
   19d4c:	pop	{r4, r5, r6, r7, fp, pc}
   19d50:	mov	r5, #34	; 0x22
   19d54:	cmp	r6, #0
   19d58:	beq	19d78 <__assert_fail@plt+0x89d4>
   19d5c:	sub	r6, r6, #1
   19d60:	mov	r0, r4
   19d64:	mov	r1, r7
   19d68:	mov	r2, r6
   19d6c:	bl	11128 <memcpy@plt>
   19d70:	mov	r0, #0
   19d74:	strb	r0, [r4, r6]
   19d78:	mov	r0, r5
   19d7c:	pop	{r4, r5, r6, r7, fp, pc}
   19d80:	mov	r1, #0
   19d84:	b	112d8 <setlocale@plt>
   19d88:	cmp	r3, #0
   19d8c:	cmpeq	r2, #0
   19d90:	bne	19da8 <__assert_fail@plt+0x8a04>
   19d94:	cmp	r1, #0
   19d98:	cmpeq	r0, #0
   19d9c:	mvnne	r1, #0
   19da0:	mvnne	r0, #0
   19da4:	b	19dc4 <__assert_fail@plt+0x8a20>
   19da8:	sub	sp, sp, #8
   19dac:	push	{sp, lr}
   19db0:	bl	19dd4 <__assert_fail@plt+0x8a30>
   19db4:	ldr	lr, [sp, #4]
   19db8:	add	sp, sp, #8
   19dbc:	pop	{r2, r3}
   19dc0:	bx	lr
   19dc4:	push	{r1, lr}
   19dc8:	mov	r0, #8
   19dcc:	bl	110e0 <raise@plt>
   19dd0:	pop	{r1, pc}
   19dd4:	cmp	r1, r3
   19dd8:	cmpeq	r0, r2
   19ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19de0:	mov	r4, r0
   19de4:	movcc	r0, #0
   19de8:	mov	r5, r1
   19dec:	ldr	lr, [sp, #36]	; 0x24
   19df0:	movcc	r1, r0
   19df4:	bcc	19ef0 <__assert_fail@plt+0x8b4c>
   19df8:	cmp	r3, #0
   19dfc:	clzeq	ip, r2
   19e00:	clzne	ip, r3
   19e04:	addeq	ip, ip, #32
   19e08:	cmp	r5, #0
   19e0c:	clzeq	r1, r4
   19e10:	addeq	r1, r1, #32
   19e14:	clzne	r1, r5
   19e18:	sub	ip, ip, r1
   19e1c:	sub	sl, ip, #32
   19e20:	lsl	r9, r3, ip
   19e24:	rsb	fp, ip, #32
   19e28:	orr	r9, r9, r2, lsl sl
   19e2c:	orr	r9, r9, r2, lsr fp
   19e30:	lsl	r8, r2, ip
   19e34:	cmp	r5, r9
   19e38:	cmpeq	r4, r8
   19e3c:	movcc	r0, #0
   19e40:	movcc	r1, r0
   19e44:	bcc	19e60 <__assert_fail@plt+0x8abc>
   19e48:	mov	r0, #1
   19e4c:	subs	r4, r4, r8
   19e50:	lsl	r1, r0, sl
   19e54:	orr	r1, r1, r0, lsr fp
   19e58:	lsl	r0, r0, ip
   19e5c:	sbc	r5, r5, r9
   19e60:	cmp	ip, #0
   19e64:	beq	19ef0 <__assert_fail@plt+0x8b4c>
   19e68:	lsr	r6, r8, #1
   19e6c:	orr	r6, r6, r9, lsl #31
   19e70:	lsr	r7, r9, #1
   19e74:	mov	r2, ip
   19e78:	b	19e9c <__assert_fail@plt+0x8af8>
   19e7c:	subs	r3, r4, r6
   19e80:	sbc	r8, r5, r7
   19e84:	adds	r3, r3, r3
   19e88:	adc	r8, r8, r8
   19e8c:	adds	r4, r3, #1
   19e90:	adc	r5, r8, #0
   19e94:	subs	r2, r2, #1
   19e98:	beq	19eb8 <__assert_fail@plt+0x8b14>
   19e9c:	cmp	r5, r7
   19ea0:	cmpeq	r4, r6
   19ea4:	bcs	19e7c <__assert_fail@plt+0x8ad8>
   19ea8:	adds	r4, r4, r4
   19eac:	adc	r5, r5, r5
   19eb0:	subs	r2, r2, #1
   19eb4:	bne	19e9c <__assert_fail@plt+0x8af8>
   19eb8:	lsr	r3, r4, ip
   19ebc:	orr	r3, r3, r5, lsl fp
   19ec0:	lsr	r2, r5, ip
   19ec4:	orr	r3, r3, r5, lsr sl
   19ec8:	adds	r0, r0, r4
   19ecc:	mov	r4, r3
   19ed0:	lsl	r3, r2, ip
   19ed4:	orr	r3, r3, r4, lsl sl
   19ed8:	lsl	ip, r4, ip
   19edc:	orr	r3, r3, r4, lsr fp
   19ee0:	adc	r1, r1, r5
   19ee4:	subs	r0, r0, ip
   19ee8:	mov	r5, r2
   19eec:	sbc	r1, r1, r3
   19ef0:	cmp	lr, #0
   19ef4:	strdne	r4, [lr]
   19ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19efc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f00:	mov	r7, r0
   19f04:	ldr	r6, [pc, #72]	; 19f54 <__assert_fail@plt+0x8bb0>
   19f08:	ldr	r5, [pc, #72]	; 19f58 <__assert_fail@plt+0x8bb4>
   19f0c:	add	r6, pc, r6
   19f10:	add	r5, pc, r5
   19f14:	sub	r6, r6, r5
   19f18:	mov	r8, r1
   19f1c:	mov	r9, r2
   19f20:	bl	1109c <fstatfs64@plt-0x20>
   19f24:	asrs	r6, r6, #2
   19f28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f2c:	mov	r4, #0
   19f30:	add	r4, r4, #1
   19f34:	ldr	r3, [r5], #4
   19f38:	mov	r2, r9
   19f3c:	mov	r1, r8
   19f40:	mov	r0, r7
   19f44:	blx	r3
   19f48:	cmp	r6, r4
   19f4c:	bne	19f30 <__assert_fail@plt+0x8b8c>
   19f50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f54:	strdeq	r1, [r1], -r8
   19f58:	strdeq	r1, [r1], -r0
   19f5c:	bx	lr
   19f60:	ldr	r3, [pc, #12]	; 19f74 <__assert_fail@plt+0x8bd0>
   19f64:	mov	r1, #0
   19f68:	add	r3, pc, r3
   19f6c:	ldr	r2, [r3]
   19f70:	b	11278 <__cxa_atexit@plt>
   19f74:	andeq	r2, r1, r4, lsr #3

Disassembly of section .fini:

00019f78 <.fini>:
   19f78:	push	{r3, lr}
   19f7c:	pop	{r3, pc}
