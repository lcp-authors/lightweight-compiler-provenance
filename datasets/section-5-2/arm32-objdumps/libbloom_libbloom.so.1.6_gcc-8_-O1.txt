
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

000004c4 <.init>:
 4c4:	push	{r3, lr}
 4c8:	bl	560 <bloom_init@plt+0x10>
 4cc:	pop	{r3, pc}

Disassembly of section .plt:

000004d0 <calloc@plt-0x14>:
 4d0:	push	{lr}		; (str lr, [sp, #-4]!)
 4d4:	ldr	lr, [pc, #4]	; 4e0 <calloc@plt-0x4>
 4d8:	add	lr, pc, lr
 4dc:	ldr	pc, [lr, #8]!
 4e0:	andeq	r0, r1, r0, lsr #22

000004e4 <calloc@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #16, 20	; 0x10000
 4ec:	ldr	pc, [ip, #2848]!	; 0xb20

000004f0 <log@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2840]!	; 0xb18

000004fc <__cxa_finalize@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2832]!	; 0xb10

00000508 <printf@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2824]!	; 0xb08

00000514 <murmurhash2@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2816]!	; 0xb00

00000520 <free@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #16, 20	; 0x10000
 528:	ldr	pc, [ip, #2808]!	; 0xaf8

0000052c <__gmon_start__@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #16, 20	; 0x10000
 534:	ldr	pc, [ip, #2800]!	; 0xaf0

00000538 <memset@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #16, 20	; 0x10000
 540:	ldr	pc, [ip, #2792]!	; 0xae8

00000544 <ceil@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #16, 20	; 0x10000
 54c:	ldr	pc, [ip, #2784]!	; 0xae0

00000550 <bloom_init@plt>:
 550:	add	ip, pc, #0, 12
 554:	add	ip, ip, #16, 20	; 0x10000
 558:	ldr	pc, [ip, #2776]!	; 0xad8

Disassembly of section .text:

00000560 <bloom_init@@Base-0x22c>:
 560:	ldr	r3, [pc, #20]	; 57c <bloom_init@plt+0x2c>
 564:	ldr	r2, [pc, #20]	; 580 <bloom_init@plt+0x30>
 568:	add	r3, pc, r3
 56c:	ldr	r2, [r3, r2]
 570:	cmp	r2, #0
 574:	bxeq	lr
 578:	b	52c <__gmon_start__@plt>
 57c:	muleq	r1, r0, sl
 580:	andeq	r0, r0, ip, lsr r0
 584:	ldr	r0, [pc, #44]	; 5b8 <bloom_init@plt+0x68>
 588:	ldr	r3, [pc, #44]	; 5bc <bloom_init@plt+0x6c>
 58c:	add	r0, pc, r0
 590:	add	r3, pc, r3
 594:	cmp	r3, r0
 598:	ldr	r3, [pc, #32]	; 5c0 <bloom_init@plt+0x70>
 59c:	add	r3, pc, r3
 5a0:	bxeq	lr
 5a4:	ldr	r2, [pc, #24]	; 5c4 <bloom_init@plt+0x74>
 5a8:	ldr	r3, [r3, r2]
 5ac:	cmp	r3, #0
 5b0:	bxeq	lr
 5b4:	bx	r3
 5b8:			; <UNDEFINED> instruction: 0x00010ab4
 5bc:			; <UNDEFINED> instruction: 0x00010ab0
 5c0:	andeq	r0, r1, ip, asr sl
 5c4:	andeq	r0, r0, r8, lsr r0
 5c8:	ldr	r0, [pc, #56]	; 608 <bloom_init@plt+0xb8>
 5cc:	ldr	r3, [pc, #56]	; 60c <bloom_init@plt+0xbc>
 5d0:	add	r0, pc, r0
 5d4:	add	r3, pc, r3
 5d8:	sub	r1, r3, r0
 5dc:	ldr	r3, [pc, #44]	; 610 <bloom_init@plt+0xc0>
 5e0:	asr	r1, r1, #2
 5e4:	add	r3, pc, r3
 5e8:	add	r1, r1, r1, lsr #31
 5ec:	asrs	r1, r1, #1
 5f0:	bxeq	lr
 5f4:	ldr	r2, [pc, #24]	; 614 <bloom_init@plt+0xc4>
 5f8:	ldr	r3, [r3, r2]
 5fc:	cmp	r3, #0
 600:	bxeq	lr
 604:	bx	r3
 608:	andeq	r0, r1, r0, ror sl
 60c:	andeq	r0, r1, ip, ror #20
 610:	andeq	r0, r1, r4, lsl sl
 614:	andeq	r0, r0, r0, asr #32
 618:	ldr	r3, [pc, #76]	; 66c <bloom_init@plt+0x11c>
 61c:	ldr	r2, [pc, #76]	; 670 <bloom_init@plt+0x120>
 620:	add	r3, pc, r3
 624:	add	r2, pc, r2
 628:	ldrb	r3, [r3]
 62c:	cmp	r3, #0
 630:	bxne	lr
 634:	ldr	r3, [pc, #56]	; 674 <bloom_init@plt+0x124>
 638:	push	{r4, lr}
 63c:	ldr	r3, [r2, r3]
 640:	cmp	r3, #0
 644:	beq	654 <bloom_init@plt+0x104>
 648:	ldr	r3, [pc, #40]	; 678 <bloom_init@plt+0x128>
 64c:	ldr	r0, [pc, r3]
 650:	bl	4fc <__cxa_finalize@plt>
 654:	bl	584 <bloom_init@plt+0x34>
 658:	ldr	r3, [pc, #28]	; 67c <bloom_init@plt+0x12c>
 65c:	mov	r2, #1
 660:	add	r3, pc, r3
 664:	strb	r2, [r3]
 668:	pop	{r4, pc}
 66c:	andeq	r0, r1, r0, lsr #20
 670:	ldrdeq	r0, [r1], -r4
 674:	andeq	r0, r0, r4, lsr r0
 678:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 67c:	andeq	r0, r1, r0, ror #19
 680:	b	5c8 <bloom_init@plt+0x78>
 684:	andeq	r0, r0, r0
 688:	strd	r4, [sp, #-24]!	; 0xffffffe8
 68c:	strd	r6, [sp, #8]
 690:	str	r8, [sp, #16]
 694:	str	lr, [sp, #20]
 698:	mov	r5, r0
 69c:	mov	r6, r3
 6a0:	ldr	r3, [r0, #44]	; 0x2c
 6a4:	cmp	r3, #0
 6a8:	beq	6f8 <bloom_init@plt+0x1a8>
 6ac:	mov	r7, r1
 6b0:	mov	r8, r2
 6b4:	movw	r2, #45708	; 0xb28c
 6b8:	movt	r2, #38727	; 0x9747
 6bc:	mov	r1, r8
 6c0:	mov	r0, r7
 6c4:	bl	514 <murmurhash2@plt>
 6c8:	mov	r4, r0
 6cc:	mov	r2, r0
 6d0:	mov	r1, r8
 6d4:	mov	r0, r7
 6d8:	bl	514 <murmurhash2@plt>
 6dc:	ldr	r3, [r5, #24]
 6e0:	cmp	r3, #0
 6e4:	beq	760 <bloom_init@plt+0x210>
 6e8:	mov	r1, #0
 6ec:	mov	lr, r1
 6f0:	mov	r7, #1
 6f4:	b	724 <bloom_init@plt+0x1d4>
 6f8:	mov	r1, r0
 6fc:	ldr	r0, [pc, #132]	; 788 <bloom_init@plt+0x238>
 700:	add	r0, pc, r0
 704:	bl	508 <printf@plt>
 708:	mvn	r6, #0
 70c:	b	770 <bloom_init@plt+0x220>
 710:	add	r1, r1, #1
 714:	ldr	r3, [r5, #24]
 718:	add	r4, r4, r0
 71c:	cmp	r3, r1
 720:	bls	764 <bloom_init@plt+0x214>
 724:	ldr	r2, [r5, #16]
 728:	udiv	r3, r4, r2
 72c:	mls	r3, r2, r3, r4
 730:	ldr	r8, [r5, #40]	; 0x28
 734:	ldrb	ip, [r8, r3, lsr #3]
 738:	and	r2, r3, #7
 73c:	lsl	r2, r7, r2
 740:	tst	r2, ip
 744:	addne	lr, lr, #1
 748:	bne	710 <bloom_init@plt+0x1c0>
 74c:	cmp	r6, #0
 750:	beq	770 <bloom_init@plt+0x220>
 754:	orr	r2, ip, r2
 758:	strb	r2, [r8, r3, lsr #3]
 75c:	b	710 <bloom_init@plt+0x1c0>
 760:	mov	lr, r3
 764:	cmp	r3, lr
 768:	movne	r6, #0
 76c:	moveq	r6, #1
 770:	mov	r0, r6
 774:	ldrd	r4, [sp]
 778:	ldrd	r6, [sp, #8]
 77c:	ldr	r8, [sp, #16]
 780:	add	sp, sp, #20
 784:	pop	{pc}		; (ldr pc, [sp], #4)
 788:	andeq	r0, r0, r4, asr #7

0000078c <bloom_init@@Base>:
 78c:	mov	r3, #0
 790:	str	r3, [r0, #44]	; 0x2c
 794:	vcmp.f64	d0, #0.0
 798:	vmrs	APSR_nzcv, fpscr
 79c:	moveq	r3, #1
 7a0:	cmp	r1, #1000	; 0x3e8
 7a4:	orrlt	r3, r3, #1
 7a8:	cmp	r3, #0
 7ac:	beq	7b8 <bloom_init@@Base+0x2c>
 7b0:	mov	r0, #1
 7b4:	bx	lr
 7b8:	strd	r4, [sp, #-16]!
 7bc:	str	r6, [sp, #8]
 7c0:	str	lr, [sp, #12]
 7c4:	mov	r4, r1
 7c8:	mov	r5, r0
 7cc:	str	r1, [r5]
 7d0:	vstr	d0, [r0, #8]
 7d4:	bl	4f0 <log@plt>
 7d8:	vldr	d7, [pc, #160]	; 880 <bloom_init@@Base+0xf4>
 7dc:	vdiv.f64	d0, d0, d7
 7e0:	vneg.f64	d0, d0
 7e4:	vstr	d0, [r5, #32]
 7e8:	vmov	s15, r4
 7ec:	vcvt.f64.s32	d7, s15
 7f0:	vmul.f64	d7, d7, d0
 7f4:	vcvt.s32.f64	s15, d7
 7f8:	vmov	r3, s15
 7fc:	vstr	s15, [r5, #16]
 800:	tst	r3, #7
 804:	beq	86c <bloom_init@@Base+0xe0>
 808:	add	r4, r3, #7
 80c:	cmp	r3, #0
 810:	movlt	r3, r4
 814:	asr	r4, r3, #3
 818:	add	r4, r4, #1
 81c:	str	r4, [r5, #20]
 820:	vldr	d7, [pc, #96]	; 888 <bloom_init@@Base+0xfc>
 824:	vmul.f64	d0, d0, d7
 828:	bl	544 <ceil@plt>
 82c:	vcvt.s32.f64	s0, d0
 830:	vstr	s0, [r5, #24]
 834:	mov	r1, #1
 838:	mov	r0, r4
 83c:	bl	4e4 <calloc@plt>
 840:	str	r0, [r5, #40]	; 0x28
 844:	cmp	r0, #0
 848:	moveq	r0, #1
 84c:	beq	85c <bloom_init@@Base+0xd0>
 850:	mov	r3, #1
 854:	str	r3, [r5, #44]	; 0x2c
 858:	mov	r0, #0
 85c:	ldrd	r4, [sp]
 860:	ldr	r6, [sp, #8]
 864:	add	sp, sp, #12
 868:	pop	{pc}		; (ldr pc, [sp], #4)
 86c:	add	r4, r3, #7
 870:	cmp	r3, #0
 874:	movlt	r3, r4
 878:	asr	r4, r3, #3
 87c:	b	81c <bloom_init@@Base+0x90>
 880:			; <UNDEFINED> instruction: 0xff82c587
 884:	svccc	0x00debfbd
 888:			; <UNDEFINED> instruction: 0xfefa39ec
 88c:	svccc	0x00e62e42

00000890 <bloom_init_size@@Base>:
 890:	str	r4, [sp, #-8]!
 894:	str	lr, [sp, #4]
 898:	bl	550 <bloom_init@plt>
 89c:	ldr	r4, [sp]
 8a0:	add	sp, sp, #4
 8a4:	pop	{pc}		; (ldr pc, [sp], #4)

000008a8 <bloom_check@@Base>:
 8a8:	str	r4, [sp, #-8]!
 8ac:	str	lr, [sp, #4]
 8b0:	mov	r3, #0
 8b4:	bl	688 <bloom_init@plt+0x138>
 8b8:	ldr	r4, [sp]
 8bc:	add	sp, sp, #4
 8c0:	pop	{pc}		; (ldr pc, [sp], #4)

000008c4 <bloom_add@@Base>:
 8c4:	str	r4, [sp, #-8]!
 8c8:	str	lr, [sp, #4]
 8cc:	mov	r3, #1
 8d0:	bl	688 <bloom_init@plt+0x138>
 8d4:	ldr	r4, [sp]
 8d8:	add	sp, sp, #4
 8dc:	pop	{pc}		; (ldr pc, [sp], #4)

000008e0 <bloom_print@@Base>:
 8e0:	str	r4, [sp, #-8]!
 8e4:	str	lr, [sp, #4]
 8e8:	mov	r4, r0
 8ec:	mov	r1, r0
 8f0:	ldr	r0, [pc, #112]	; 968 <bloom_print@@Base+0x88>
 8f4:	add	r0, pc, r0
 8f8:	bl	508 <printf@plt>
 8fc:	ldr	r1, [r4]
 900:	ldr	r0, [pc, #100]	; 96c <bloom_print@@Base+0x8c>
 904:	add	r0, pc, r0
 908:	bl	508 <printf@plt>
 90c:	ldrd	r2, [r4, #8]
 910:	ldr	r0, [pc, #88]	; 970 <bloom_print@@Base+0x90>
 914:	add	r0, pc, r0
 918:	bl	508 <printf@plt>
 91c:	ldr	r1, [r4, #16]
 920:	ldr	r0, [pc, #76]	; 974 <bloom_print@@Base+0x94>
 924:	add	r0, pc, r0
 928:	bl	508 <printf@plt>
 92c:	ldrd	r2, [r4, #32]
 930:	ldr	r0, [pc, #64]	; 978 <bloom_print@@Base+0x98>
 934:	add	r0, pc, r0
 938:	bl	508 <printf@plt>
 93c:	ldr	r1, [r4, #20]
 940:	ldr	r0, [pc, #52]	; 97c <bloom_print@@Base+0x9c>
 944:	add	r0, pc, r0
 948:	bl	508 <printf@plt>
 94c:	ldr	r1, [r4, #24]
 950:	ldr	r0, [pc, #40]	; 980 <bloom_print@@Base+0xa0>
 954:	add	r0, pc, r0
 958:	bl	508 <printf@plt>
 95c:	ldr	r4, [sp]
 960:	add	sp, sp, #4
 964:	pop	{pc}		; (ldr pc, [sp], #4)
 968:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 96c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 970:	strdeq	r0, [r0], -r4
 974:	strdeq	r0, [r0], -r4
 978:	strdeq	r0, [r0], -r4
 97c:	strdeq	r0, [r0], -ip
 980:	strdeq	r0, [r0], -ip

00000984 <bloom_free@@Base>:
 984:	str	r4, [sp, #-8]!
 988:	str	lr, [sp, #4]
 98c:	mov	r4, r0
 990:	ldr	r3, [r0, #44]	; 0x2c
 994:	cmp	r3, #0
 998:	bne	9b0 <bloom_free@@Base+0x2c>
 99c:	mov	r3, #0
 9a0:	str	r3, [r4, #44]	; 0x2c
 9a4:	ldr	r4, [sp]
 9a8:	add	sp, sp, #4
 9ac:	pop	{pc}		; (ldr pc, [sp], #4)
 9b0:	ldr	r0, [r0, #40]	; 0x28
 9b4:	bl	520 <free@plt>
 9b8:	b	99c <bloom_free@@Base+0x18>

000009bc <bloom_reset@@Base>:
 9bc:	ldr	r3, [r0, #44]	; 0x2c
 9c0:	cmp	r3, #0
 9c4:	bne	9d0 <bloom_reset@@Base+0x14>
 9c8:	mov	r0, #1
 9cc:	bx	lr
 9d0:	str	r4, [sp, #-8]!
 9d4:	str	lr, [sp, #4]
 9d8:	ldr	r2, [r0, #20]
 9dc:	mov	r1, #0
 9e0:	ldr	r0, [r0, #40]	; 0x28
 9e4:	bl	538 <memset@plt>
 9e8:	mov	r0, #0
 9ec:	ldr	r4, [sp]
 9f0:	add	sp, sp, #4
 9f4:	pop	{pc}		; (ldr pc, [sp], #4)

000009f8 <bloom_version@@Base>:
 9f8:	ldr	r0, [pc, #4]	; a04 <bloom_version@@Base+0xc>
 9fc:	add	r0, pc, r0
 a00:	bx	lr
 a04:	andeq	r0, r0, ip, ror #2

00000a08 <murmurhash2@@Base>:
 a08:	str	r4, [sp, #-8]!
 a0c:	str	lr, [sp, #4]
 a10:	eor	r2, r2, r1
 a14:	cmp	r1, #3
 a18:	ble	a78 <murmurhash2@@Base+0x70>
 a1c:	sub	r4, r1, #4
 a20:	lsr	r4, r4, #2
 a24:	add	lr, r4, #1
 a28:	add	lr, r0, lr, lsl #2
 a2c:	movw	ip, #59797	; 0xe995
 a30:	movt	ip, #23505	; 0x5bd1
 a34:	ldr	r3, [r0], #4
 a38:	mul	r3, ip, r3
 a3c:	eor	r3, r3, r3, lsr #24
 a40:	mul	r2, ip, r2
 a44:	mul	r3, ip, r3
 a48:	eor	r2, r2, r3
 a4c:	cmp	r0, lr
 a50:	bne	a34 <murmurhash2@@Base+0x2c>
 a54:	sub	r1, r1, #4
 a58:	sub	r1, r1, r4, lsl #2
 a5c:	cmp	r1, #2
 a60:	beq	a88 <murmurhash2@@Base+0x80>
 a64:	cmp	r1, #3
 a68:	beq	a80 <murmurhash2@@Base+0x78>
 a6c:	cmp	r1, #1
 a70:	bne	aa4 <murmurhash2@@Base+0x9c>
 a74:	b	a90 <murmurhash2@@Base+0x88>
 a78:	mov	lr, r0
 a7c:	b	a5c <murmurhash2@@Base+0x54>
 a80:	ldrb	r3, [lr, #2]
 a84:	eor	r2, r2, r3, lsl #16
 a88:	ldrb	r3, [lr, #1]
 a8c:	eor	r2, r2, r3, lsl #8
 a90:	ldrb	r3, [lr]
 a94:	eor	r3, r3, r2
 a98:	movw	r2, #59797	; 0xe995
 a9c:	movt	r2, #23505	; 0x5bd1
 aa0:	mul	r2, r2, r3
 aa4:	eor	r3, r2, r2, lsr #13
 aa8:	movw	r0, #59797	; 0xe995
 aac:	movt	r0, #23505	; 0x5bd1
 ab0:	mul	r0, r0, r3
 ab4:	eor	r0, r0, r0, lsr #15
 ab8:	ldr	r4, [sp]
 abc:	add	sp, sp, #4
 ac0:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00000ac4 <.fini>:
 ac4:	push	{r3, lr}
 ac8:	pop	{r3, pc}
