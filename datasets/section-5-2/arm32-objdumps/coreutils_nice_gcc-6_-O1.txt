
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bc4 <.init>:
   10bc4:	push	{r3, lr}
   10bc8:	bl	10e6c <__assert_fail@plt+0x48>
   10bcc:	pop	{r3, pc}

Disassembly of section .plt:

00010bd0 <calloc@plt-0x14>:
   10bd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bd4:	ldr	lr, [pc, #4]	; 10be0 <calloc@plt-0x4>
   10bd8:	add	lr, pc, lr
   10bdc:	ldr	pc, [lr, #8]!
   10be0:	andeq	r5, r1, r0, lsr #8

00010be4 <calloc@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1056]!	; 0x420

00010bf0 <fputs_unlocked@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1048]!	; 0x418

00010bfc <raise@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1040]!	; 0x410

00010c08 <strcmp@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1032]!	; 0x408

00010c14 <strtol@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1024]!	; 0x400

00010c20 <fflush@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c2c <free@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c38 <_exit@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c44 <memcpy@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c50 <execvp@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #984]!	; 0x3d8

00010c5c <mbsinit@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #976]!	; 0x3d0

00010c68 <memcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #968]!	; 0x3c8

00010c74 <fputc_unlocked@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c80 <dcgettext@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #952]!	; 0x3b8

00010c8c <realloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #944]!	; 0x3b0

00010c98 <getpriority@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #936]!	; 0x3a8

00010ca4 <textdomain@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb0 <iswprint@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #920]!	; 0x398

00010cbc <fwrite@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #912]!	; 0x390

00010cc8 <lseek64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #904]!	; 0x388

00010cd4 <__ctype_get_mb_cur_max@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #896]!	; 0x380

00010ce0 <__fpending@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #888]!	; 0x378

00010cec <mbrtowc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #880]!	; 0x370

00010cf8 <error@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #872]!	; 0x368

00010d04 <setpriority@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #864]!	; 0x360

00010d10 <malloc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #856]!	; 0x358

00010d1c <__libc_start_main@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #848]!	; 0x350

00010d28 <__freading@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #840]!	; 0x348

00010d34 <__gmon_start__@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #832]!	; 0x340

00010d40 <getopt_long@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #824]!	; 0x338

00010d4c <__ctype_b_loc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #816]!	; 0x330

00010d58 <exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #808]!	; 0x328

00010d64 <strlen@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #800]!	; 0x320

00010d70 <strchr@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #792]!	; 0x318

00010d7c <__errno_location@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #784]!	; 0x310

00010d88 <__cxa_atexit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #776]!	; 0x308

00010d94 <memset@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #768]!	; 0x300

00010da0 <__printf_chk@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #760]!	; 0x2f8

00010dac <fileno@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #752]!	; 0x2f0

00010db8 <__fprintf_chk@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #744]!	; 0x2e8

00010dc4 <fclose@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #736]!	; 0x2e0

00010dd0 <fseeko64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #728]!	; 0x2d8

00010ddc <setlocale@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #720]!	; 0x2d0

00010de8 <strrchr@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #712]!	; 0x2c8

00010df4 <nl_langinfo@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #704]!	; 0x2c0

00010e00 <bindtextdomain@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #696]!	; 0x2b8

00010e0c <strncmp@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #688]!	; 0x2b0

00010e18 <abort@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #680]!	; 0x2a8

00010e24 <__assert_fail@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #672]!	; 0x2a0

Disassembly of section .text:

00010e30 <.text>:
   10e30:	mov	fp, #0
   10e34:	mov	lr, #0
   10e38:	pop	{r1}		; (ldr r1, [sp], #4)
   10e3c:	mov	r2, sp
   10e40:	push	{r2}		; (str r2, [sp, #-4]!)
   10e44:	push	{r0}		; (str r0, [sp, #-4]!)
   10e48:	ldr	ip, [pc, #16]	; 10e60 <__assert_fail@plt+0x3c>
   10e4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e50:	ldr	r0, [pc, #12]	; 10e64 <__assert_fail@plt+0x40>
   10e54:	ldr	r3, [pc, #12]	; 10e68 <__assert_fail@plt+0x44>
   10e58:	bl	10d1c <__libc_start_main@plt>
   10e5c:	bl	10e18 <abort@plt>
   10e60:	andeq	r4, r1, r8, lsl #28
   10e64:	andeq	r1, r1, ip, asr #5
   10e68:	andeq	r4, r1, r8, lsr #27
   10e6c:	ldr	r3, [pc, #20]	; 10e88 <__assert_fail@plt+0x64>
   10e70:	ldr	r2, [pc, #20]	; 10e8c <__assert_fail@plt+0x68>
   10e74:	add	r3, pc, r3
   10e78:	ldr	r2, [r3, r2]
   10e7c:	cmp	r2, #0
   10e80:	bxeq	lr
   10e84:	b	10d34 <__gmon_start__@plt>
   10e88:	andeq	r5, r1, r4, lsl #3
   10e8c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e90:	ldr	r3, [pc, #28]	; 10eb4 <__assert_fail@plt+0x90>
   10e94:	ldr	r0, [pc, #28]	; 10eb8 <__assert_fail@plt+0x94>
   10e98:	sub	r3, r3, r0
   10e9c:	cmp	r3, #6
   10ea0:	bxls	lr
   10ea4:	ldr	r3, [pc, #16]	; 10ebc <__assert_fail@plt+0x98>
   10ea8:	cmp	r3, #0
   10eac:	bxeq	lr
   10eb0:	bx	r3
   10eb4:	andeq	r6, r2, r7, lsr #2
   10eb8:	andeq	r6, r2, r4, lsr #2
   10ebc:	andeq	r0, r0, r0
   10ec0:	ldr	r1, [pc, #36]	; 10eec <__assert_fail@plt+0xc8>
   10ec4:	ldr	r0, [pc, #36]	; 10ef0 <__assert_fail@plt+0xcc>
   10ec8:	sub	r1, r1, r0
   10ecc:	asr	r1, r1, #2
   10ed0:	add	r1, r1, r1, lsr #31
   10ed4:	asrs	r1, r1, #1
   10ed8:	bxeq	lr
   10edc:	ldr	r3, [pc, #16]	; 10ef4 <__assert_fail@plt+0xd0>
   10ee0:	cmp	r3, #0
   10ee4:	bxeq	lr
   10ee8:	bx	r3
   10eec:	andeq	r6, r2, r4, lsr #2
   10ef0:	andeq	r6, r2, r4, lsr #2
   10ef4:	andeq	r0, r0, r0
   10ef8:	push	{r4, lr}
   10efc:	ldr	r4, [pc, #24]	; 10f1c <__assert_fail@plt+0xf8>
   10f00:	ldrb	r3, [r4]
   10f04:	cmp	r3, #0
   10f08:	popne	{r4, pc}
   10f0c:	bl	10e90 <__assert_fail@plt+0x6c>
   10f10:	mov	r3, #1
   10f14:	strb	r3, [r4]
   10f18:	pop	{r4, pc}
   10f1c:	andeq	r6, r2, r4, asr #2
   10f20:	ldr	r0, [pc, #40]	; 10f50 <__assert_fail@plt+0x12c>
   10f24:	ldr	r3, [r0]
   10f28:	cmp	r3, #0
   10f2c:	bne	10f34 <__assert_fail@plt+0x110>
   10f30:	b	10ec0 <__assert_fail@plt+0x9c>
   10f34:	ldr	r3, [pc, #24]	; 10f54 <__assert_fail@plt+0x130>
   10f38:	cmp	r3, #0
   10f3c:	beq	10f30 <__assert_fail@plt+0x10c>
   10f40:	push	{r4, lr}
   10f44:	blx	r3
   10f48:	pop	{r4, lr}
   10f4c:	b	10ec0 <__assert_fail@plt+0x9c>
   10f50:	andeq	r5, r2, r4, lsl pc
   10f54:	andeq	r0, r0, r0
   10f58:	push	{lr}		; (str lr, [sp, #-4]!)
   10f5c:	sub	sp, sp, #60	; 0x3c
   10f60:	subs	r6, r0, #0
   10f64:	beq	10fa0 <__assert_fail@plt+0x17c>
   10f68:	ldr	r3, [pc, #772]	; 11274 <__assert_fail@plt+0x450>
   10f6c:	ldr	r4, [r3]
   10f70:	mov	r2, #5
   10f74:	ldr	r1, [pc, #764]	; 11278 <__assert_fail@plt+0x454>
   10f78:	mov	r0, #0
   10f7c:	bl	10c80 <dcgettext@plt>
   10f80:	ldr	r3, [pc, #756]	; 1127c <__assert_fail@plt+0x458>
   10f84:	ldr	r3, [r3]
   10f88:	mov	r2, r0
   10f8c:	mov	r1, #1
   10f90:	mov	r0, r4
   10f94:	bl	10db8 <__fprintf_chk@plt>
   10f98:	mov	r0, r6
   10f9c:	bl	10d58 <exit@plt>
   10fa0:	mov	r2, #5
   10fa4:	ldr	r1, [pc, #724]	; 11280 <__assert_fail@plt+0x45c>
   10fa8:	mov	r0, #0
   10fac:	bl	10c80 <dcgettext@plt>
   10fb0:	ldr	r3, [pc, #708]	; 1127c <__assert_fail@plt+0x458>
   10fb4:	ldr	r2, [r3]
   10fb8:	mov	r1, r0
   10fbc:	mov	r0, #1
   10fc0:	bl	10da0 <__printf_chk@plt>
   10fc4:	mov	r2, #5
   10fc8:	ldr	r1, [pc, #692]	; 11284 <__assert_fail@plt+0x460>
   10fcc:	mov	r0, #0
   10fd0:	bl	10c80 <dcgettext@plt>
   10fd4:	mov	r3, #19
   10fd8:	mvn	r2, #19
   10fdc:	mov	r1, r0
   10fe0:	mov	r0, #1
   10fe4:	bl	10da0 <__printf_chk@plt>
   10fe8:	mov	r2, #5
   10fec:	ldr	r1, [pc, #660]	; 11288 <__assert_fail@plt+0x464>
   10ff0:	mov	r0, #0
   10ff4:	bl	10c80 <dcgettext@plt>
   10ff8:	ldr	r4, [pc, #652]	; 1128c <__assert_fail@plt+0x468>
   10ffc:	ldr	r1, [r4]
   11000:	bl	10bf0 <fputs_unlocked@plt>
   11004:	mov	r2, #5
   11008:	ldr	r1, [pc, #640]	; 11290 <__assert_fail@plt+0x46c>
   1100c:	mov	r0, #0
   11010:	bl	10c80 <dcgettext@plt>
   11014:	ldr	r1, [r4]
   11018:	bl	10bf0 <fputs_unlocked@plt>
   1101c:	mov	r2, #5
   11020:	ldr	r1, [pc, #620]	; 11294 <__assert_fail@plt+0x470>
   11024:	mov	r0, #0
   11028:	bl	10c80 <dcgettext@plt>
   1102c:	ldr	r1, [r4]
   11030:	bl	10bf0 <fputs_unlocked@plt>
   11034:	mov	r2, #5
   11038:	ldr	r1, [pc, #600]	; 11298 <__assert_fail@plt+0x474>
   1103c:	mov	r0, #0
   11040:	bl	10c80 <dcgettext@plt>
   11044:	ldr	r1, [r4]
   11048:	bl	10bf0 <fputs_unlocked@plt>
   1104c:	mov	r2, #5
   11050:	ldr	r1, [pc, #580]	; 1129c <__assert_fail@plt+0x478>
   11054:	mov	r0, #0
   11058:	bl	10c80 <dcgettext@plt>
   1105c:	ldr	r2, [pc, #572]	; 112a0 <__assert_fail@plt+0x47c>
   11060:	mov	r1, r0
   11064:	mov	r0, #1
   11068:	bl	10da0 <__printf_chk@plt>
   1106c:	mov	ip, sp
   11070:	ldr	lr, [pc, #556]	; 112a4 <__assert_fail@plt+0x480>
   11074:	ldm	lr!, {r0, r1, r2, r3}
   11078:	stmia	ip!, {r0, r1, r2, r3}
   1107c:	ldm	lr!, {r0, r1, r2, r3}
   11080:	stmia	ip!, {r0, r1, r2, r3}
   11084:	ldm	lr!, {r0, r1, r2, r3}
   11088:	stmia	ip!, {r0, r1, r2, r3}
   1108c:	ldm	lr, {r0, r1}
   11090:	stm	ip, {r0, r1}
   11094:	ldr	r1, [sp]
   11098:	cmp	r1, #0
   1109c:	moveq	r4, sp
   110a0:	beq	110c8 <__assert_fail@plt+0x2a4>
   110a4:	mov	r4, sp
   110a8:	ldr	r5, [pc, #496]	; 112a0 <__assert_fail@plt+0x47c>
   110ac:	mov	r0, r5
   110b0:	bl	10c08 <strcmp@plt>
   110b4:	cmp	r0, #0
   110b8:	beq	110c8 <__assert_fail@plt+0x2a4>
   110bc:	ldr	r1, [r4, #8]!
   110c0:	cmp	r1, #0
   110c4:	bne	110ac <__assert_fail@plt+0x288>
   110c8:	ldr	r4, [r4, #4]
   110cc:	cmp	r4, #0
   110d0:	beq	111e4 <__assert_fail@plt+0x3c0>
   110d4:	mov	r2, #5
   110d8:	ldr	r1, [pc, #456]	; 112a8 <__assert_fail@plt+0x484>
   110dc:	mov	r0, #0
   110e0:	bl	10c80 <dcgettext@plt>
   110e4:	ldr	r3, [pc, #448]	; 112ac <__assert_fail@plt+0x488>
   110e8:	ldr	r2, [pc, #448]	; 112b0 <__assert_fail@plt+0x48c>
   110ec:	mov	r1, r0
   110f0:	mov	r0, #1
   110f4:	bl	10da0 <__printf_chk@plt>
   110f8:	mov	r1, #0
   110fc:	mov	r0, #5
   11100:	bl	10ddc <setlocale@plt>
   11104:	cmp	r0, #0
   11108:	beq	11120 <__assert_fail@plt+0x2fc>
   1110c:	mov	r2, #3
   11110:	ldr	r1, [pc, #412]	; 112b4 <__assert_fail@plt+0x490>
   11114:	bl	10e0c <strncmp@plt>
   11118:	cmp	r0, #0
   1111c:	bne	11180 <__assert_fail@plt+0x35c>
   11120:	mov	r2, #5
   11124:	ldr	r1, [pc, #396]	; 112b8 <__assert_fail@plt+0x494>
   11128:	mov	r0, #0
   1112c:	bl	10c80 <dcgettext@plt>
   11130:	ldr	r5, [pc, #360]	; 112a0 <__assert_fail@plt+0x47c>
   11134:	mov	r3, r5
   11138:	ldr	r2, [pc, #364]	; 112ac <__assert_fail@plt+0x488>
   1113c:	mov	r1, r0
   11140:	mov	r0, #1
   11144:	bl	10da0 <__printf_chk@plt>
   11148:	mov	r2, #5
   1114c:	ldr	r1, [pc, #360]	; 112bc <__assert_fail@plt+0x498>
   11150:	mov	r0, #0
   11154:	bl	10c80 <dcgettext@plt>
   11158:	mov	r1, r0
   1115c:	ldr	r2, [pc, #348]	; 112c0 <__assert_fail@plt+0x49c>
   11160:	ldr	r3, [pc, #348]	; 112c4 <__assert_fail@plt+0x4a0>
   11164:	cmp	r4, r5
   11168:	movne	r3, r2
   1116c:	mov	r2, r4
   11170:	mov	r0, #1
   11174:	bl	10da0 <__printf_chk@plt>
   11178:	b	10f98 <__assert_fail@plt+0x174>
   1117c:	ldr	r4, [pc, #284]	; 112a0 <__assert_fail@plt+0x47c>
   11180:	mov	r2, #5
   11184:	ldr	r1, [pc, #316]	; 112c8 <__assert_fail@plt+0x4a4>
   11188:	mov	r0, #0
   1118c:	bl	10c80 <dcgettext@plt>
   11190:	ldr	r3, [pc, #244]	; 1128c <__assert_fail@plt+0x468>
   11194:	ldr	r1, [r3]
   11198:	bl	10bf0 <fputs_unlocked@plt>
   1119c:	b	11120 <__assert_fail@plt+0x2fc>
   111a0:	mov	r2, #5
   111a4:	ldr	r1, [pc, #268]	; 112b8 <__assert_fail@plt+0x494>
   111a8:	mov	r0, #0
   111ac:	bl	10c80 <dcgettext@plt>
   111b0:	ldr	r4, [pc, #232]	; 112a0 <__assert_fail@plt+0x47c>
   111b4:	mov	r3, r4
   111b8:	ldr	r2, [pc, #236]	; 112ac <__assert_fail@plt+0x488>
   111bc:	mov	r1, r0
   111c0:	mov	r0, #1
   111c4:	bl	10da0 <__printf_chk@plt>
   111c8:	mov	r2, #5
   111cc:	ldr	r1, [pc, #232]	; 112bc <__assert_fail@plt+0x498>
   111d0:	mov	r0, #0
   111d4:	bl	10c80 <dcgettext@plt>
   111d8:	mov	r1, r0
   111dc:	ldr	r3, [pc, #224]	; 112c4 <__assert_fail@plt+0x4a0>
   111e0:	b	1116c <__assert_fail@plt+0x348>
   111e4:	mov	r2, #5
   111e8:	ldr	r1, [pc, #184]	; 112a8 <__assert_fail@plt+0x484>
   111ec:	mov	r0, #0
   111f0:	bl	10c80 <dcgettext@plt>
   111f4:	ldr	r3, [pc, #176]	; 112ac <__assert_fail@plt+0x488>
   111f8:	ldr	r2, [pc, #176]	; 112b0 <__assert_fail@plt+0x48c>
   111fc:	mov	r1, r0
   11200:	mov	r0, #1
   11204:	bl	10da0 <__printf_chk@plt>
   11208:	mov	r1, #0
   1120c:	mov	r0, #5
   11210:	bl	10ddc <setlocale@plt>
   11214:	cmp	r0, #0
   11218:	beq	111a0 <__assert_fail@plt+0x37c>
   1121c:	mov	r2, #3
   11220:	ldr	r1, [pc, #140]	; 112b4 <__assert_fail@plt+0x490>
   11224:	bl	10e0c <strncmp@plt>
   11228:	cmp	r0, #0
   1122c:	bne	1117c <__assert_fail@plt+0x358>
   11230:	mov	r2, #5
   11234:	ldr	r1, [pc, #124]	; 112b8 <__assert_fail@plt+0x494>
   11238:	mov	r0, #0
   1123c:	bl	10c80 <dcgettext@plt>
   11240:	ldr	r4, [pc, #88]	; 112a0 <__assert_fail@plt+0x47c>
   11244:	mov	r3, r4
   11248:	ldr	r2, [pc, #92]	; 112ac <__assert_fail@plt+0x488>
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	bl	10da0 <__printf_chk@plt>
   11258:	mov	r2, #5
   1125c:	ldr	r1, [pc, #88]	; 112bc <__assert_fail@plt+0x498>
   11260:	mov	r0, #0
   11264:	bl	10c80 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	ldr	r3, [pc, #80]	; 112c4 <__assert_fail@plt+0x4a0>
   11270:	b	1116c <__assert_fail@plt+0x348>
   11274:	andeq	r6, r2, r8, lsr r1
   11278:			; <UNDEFINED> instruction: 0x00014eb0
   1127c:	andeq	r6, r2, r0, asr r1
   11280:	ldrdeq	r4, [r1], -r8
   11284:	andeq	r4, r1, r0, lsl #30
   11288:	andeq	r4, r1, r0, ror #31
   1128c:	andeq	r6, r2, ip, lsr r1
   11290:	andeq	r5, r1, ip, lsr #32
   11294:	andeq	r5, r1, r0, ror r0
   11298:	andeq	r5, r1, r0, lsr #1
   1129c:	ldrdeq	r5, [r1], -r8
   112a0:	andeq	r4, r1, r8, lsr #29
   112a4:	andeq	r4, r1, r0, lsr lr
   112a8:	muleq	r1, r8, r1
   112ac:			; <UNDEFINED> instruction: 0x000151b0
   112b0:	ldrdeq	r5, [r1], -r8
   112b4:	andeq	r5, r1, r8, ror #3
   112b8:	andeq	r5, r1, r4, lsr r2
   112bc:	andeq	r5, r1, r0, asr r2
   112c0:	muleq	r1, ip, r0
   112c4:	andeq	r5, r1, r8, lsr #6
   112c8:	andeq	r5, r1, ip, ror #3
   112cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d0:	sub	sp, sp, #20
   112d4:	mov	r6, r0
   112d8:	mov	r5, r1
   112dc:	ldr	r0, [r1]
   112e0:	bl	117c8 <__assert_fail@plt+0x9a4>
   112e4:	ldr	r1, [pc, #884]	; 11660 <__assert_fail@plt+0x83c>
   112e8:	mov	r0, #6
   112ec:	bl	10ddc <setlocale@plt>
   112f0:	ldr	r4, [pc, #876]	; 11664 <__assert_fail@plt+0x840>
   112f4:	ldr	r1, [pc, #876]	; 11668 <__assert_fail@plt+0x844>
   112f8:	mov	r0, r4
   112fc:	bl	10e00 <bindtextdomain@plt>
   11300:	mov	r0, r4
   11304:	bl	10ca4 <textdomain@plt>
   11308:	mov	r2, #125	; 0x7d
   1130c:	ldr	r3, [pc, #856]	; 1166c <__assert_fail@plt+0x848>
   11310:	str	r2, [r3]
   11314:	ldr	r0, [pc, #852]	; 11670 <__assert_fail@plt+0x84c>
   11318:	bl	14e0c <__assert_fail@plt+0x3fe8>
   1131c:	cmp	r6, #1
   11320:	ble	11580 <__assert_fail@plt+0x75c>
   11324:	mov	r4, #1
   11328:	mov	sl, #0
   1132c:	ldr	r8, [pc, #832]	; 11674 <__assert_fail@plt+0x850>
   11330:	mov	r7, sl
   11334:	ldr	r9, [pc, #828]	; 11678 <__assert_fail@plt+0x854>
   11338:	ldr	fp, [pc, #828]	; 1167c <__assert_fail@plt+0x858>
   1133c:	b	11378 <__assert_fail@plt+0x554>
   11340:	ldrb	r3, [r2, #1]
   11344:	sub	r3, r3, #43	; 0x2b
   11348:	and	r3, r3, #253	; 0xfd
   1134c:	cmp	r3, #0
   11350:	movne	r3, r2
   11354:	addeq	r3, r2, #1
   11358:	ldrb	r3, [r3, #1]
   1135c:	sub	r3, r3, #48	; 0x30
   11360:	cmp	r3, #9
   11364:	addls	sl, r2, #1
   11368:	addls	r4, r4, #1
   1136c:	bhi	1138c <__assert_fail@plt+0x568>
   11370:	cmp	r6, r4
   11374:	ble	11434 <__assert_fail@plt+0x610>
   11378:	lsl	r1, r4, #2
   1137c:	ldr	r2, [r5, r4, lsl #2]
   11380:	ldrb	r3, [r2]
   11384:	cmp	r3, #45	; 0x2d
   11388:	beq	11340 <__assert_fail@plt+0x51c>
   1138c:	sub	r1, r1, #4
   11390:	ldr	r3, [r5]
   11394:	str	r3, [r5, r1]
   11398:	str	r7, [r8]
   1139c:	sub	r0, r4, #1
   113a0:	str	r7, [sp]
   113a4:	mov	r3, r9
   113a8:	ldr	r2, [pc, #720]	; 11680 <__assert_fail@plt+0x85c>
   113ac:	add	r1, r5, r1
   113b0:	sub	r0, r6, r0
   113b4:	bl	10d40 <getopt_long@plt>
   113b8:	ldr	r3, [r8]
   113bc:	sub	r3, r3, #1
   113c0:	add	r4, r4, r3
   113c4:	cmn	r0, #2
   113c8:	beq	11424 <__assert_fail@plt+0x600>
   113cc:	ble	113e8 <__assert_fail@plt+0x5c4>
   113d0:	cmn	r0, #1
   113d4:	beq	11434 <__assert_fail@plt+0x610>
   113d8:	cmp	r0, #110	; 0x6e
   113dc:	bne	1142c <__assert_fail@plt+0x608>
   113e0:	ldr	sl, [fp]
   113e4:	b	11370 <__assert_fail@plt+0x54c>
   113e8:	cmn	r0, #3
   113ec:	bne	1142c <__assert_fail@plt+0x608>
   113f0:	mov	r4, #0
   113f4:	str	r4, [sp, #4]
   113f8:	ldr	r3, [pc, #644]	; 11684 <__assert_fail@plt+0x860>
   113fc:	str	r3, [sp]
   11400:	ldr	r3, [pc, #640]	; 11688 <__assert_fail@plt+0x864>
   11404:	ldr	r3, [r3]
   11408:	ldr	r2, [pc, #636]	; 1168c <__assert_fail@plt+0x868>
   1140c:	ldr	r1, [pc, #636]	; 11690 <__assert_fail@plt+0x86c>
   11410:	ldr	r0, [pc, #636]	; 11694 <__assert_fail@plt+0x870>
   11414:	ldr	r0, [r0]
   11418:	bl	137e4 <__assert_fail@plt+0x29c0>
   1141c:	mov	r0, r4
   11420:	bl	10d58 <exit@plt>
   11424:	mov	r0, #0
   11428:	bl	10f58 <__assert_fail@plt+0x134>
   1142c:	mov	r0, #125	; 0x7d
   11430:	bl	10f58 <__assert_fail@plt+0x134>
   11434:	cmp	sl, #0
   11438:	beq	11650 <__assert_fail@plt+0x82c>
   1143c:	ldr	r3, [pc, #540]	; 11660 <__assert_fail@plt+0x83c>
   11440:	str	r3, [sp]
   11444:	add	r3, sp, #12
   11448:	mov	r2, #10
   1144c:	mov	r1, #0
   11450:	mov	r0, sl
   11454:	bl	13fdc <__assert_fail@plt+0x31b8>
   11458:	cmp	r0, #1
   1145c:	bhi	11550 <__assert_fail@plt+0x72c>
   11460:	ldr	r7, [sp, #12]
   11464:	cmp	r7, #39	; 0x27
   11468:	movge	r7, #39	; 0x27
   1146c:	mvn	r3, #38	; 0x26
   11470:	cmp	r7, r3
   11474:	movlt	r7, r3
   11478:	cmp	r4, r6
   1147c:	beq	115dc <__assert_fail@plt+0x7b8>
   11480:	bl	10d7c <__errno_location@plt>
   11484:	mov	r6, r0
   11488:	mov	r0, #0
   1148c:	str	r0, [r6]
   11490:	mov	r1, r0
   11494:	bl	10c98 <getpriority@plt>
   11498:	cmn	r0, #1
   1149c:	beq	11624 <__assert_fail@plt+0x800>
   114a0:	add	r2, r0, r7
   114a4:	mov	r1, #0
   114a8:	mov	r0, r1
   114ac:	bl	10d04 <setpriority@plt>
   114b0:	cmp	r0, #0
   114b4:	beq	11510 <__assert_fail@plt+0x6ec>
   114b8:	ldr	r8, [r6]
   114bc:	cmp	r8, #1
   114c0:	cmpne	r8, #13
   114c4:	moveq	r7, #1
   114c8:	movne	r7, #0
   114cc:	cmp	r7, #0
   114d0:	moveq	r7, #125	; 0x7d
   114d4:	movne	r7, #0
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #436]	; 11698 <__assert_fail@plt+0x874>
   114e0:	mov	r0, #0
   114e4:	bl	10c80 <dcgettext@plt>
   114e8:	mov	r2, r0
   114ec:	mov	r1, r8
   114f0:	mov	r0, r7
   114f4:	bl	10cf8 <error@plt>
   114f8:	ldr	r3, [pc, #412]	; 1169c <__assert_fail@plt+0x878>
   114fc:	ldr	r3, [r3]
   11500:	ldr	r3, [r3]
   11504:	tst	r3, #32
   11508:	movne	r4, #125	; 0x7d
   1150c:	bne	115d0 <__assert_fail@plt+0x7ac>
   11510:	lsl	r7, r4, #2
   11514:	add	r1, r5, r7
   11518:	ldr	r0, [r5, r4, lsl #2]
   1151c:	bl	10c50 <execvp@plt>
   11520:	ldr	r6, [r6]
   11524:	cmp	r6, #2
   11528:	moveq	r4, #127	; 0x7f
   1152c:	movne	r4, #126	; 0x7e
   11530:	ldr	r0, [r5, r7]
   11534:	bl	13318 <__assert_fail@plt+0x24f4>
   11538:	mov	r3, r0
   1153c:	ldr	r2, [pc, #348]	; 116a0 <__assert_fail@plt+0x87c>
   11540:	mov	r1, r6
   11544:	mov	r0, #0
   11548:	bl	10cf8 <error@plt>
   1154c:	b	115d0 <__assert_fail@plt+0x7ac>
   11550:	mov	r2, #5
   11554:	ldr	r1, [pc, #328]	; 116a4 <__assert_fail@plt+0x880>
   11558:	mov	r0, #0
   1155c:	bl	10c80 <dcgettext@plt>
   11560:	mov	r4, r0
   11564:	mov	r0, sl
   11568:	bl	13318 <__assert_fail@plt+0x24f4>
   1156c:	mov	r3, r0
   11570:	mov	r2, r4
   11574:	mov	r1, #0
   11578:	mov	r0, #125	; 0x7d
   1157c:	bl	10cf8 <error@plt>
   11580:	cmp	r6, #1
   11584:	movne	r4, #1
   11588:	movne	r7, #10
   1158c:	bne	11480 <__assert_fail@plt+0x65c>
   11590:	bl	10d7c <__errno_location@plt>
   11594:	mov	r4, r0
   11598:	mov	r0, #0
   1159c:	str	r0, [r4]
   115a0:	mov	r1, r0
   115a4:	bl	10c98 <getpriority@plt>
   115a8:	mov	r2, r0
   115ac:	cmn	r0, #1
   115b0:	bne	115c0 <__assert_fail@plt+0x79c>
   115b4:	ldr	r4, [r4]
   115b8:	cmp	r4, #0
   115bc:	bne	11604 <__assert_fail@plt+0x7e0>
   115c0:	ldr	r1, [pc, #224]	; 116a8 <__assert_fail@plt+0x884>
   115c4:	mov	r0, #1
   115c8:	bl	10da0 <__printf_chk@plt>
   115cc:	mov	r4, #0
   115d0:	mov	r0, r4
   115d4:	add	sp, sp, #20
   115d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115dc:	mov	r2, #5
   115e0:	ldr	r1, [pc, #196]	; 116ac <__assert_fail@plt+0x888>
   115e4:	mov	r0, #0
   115e8:	bl	10c80 <dcgettext@plt>
   115ec:	mov	r2, r0
   115f0:	mov	r1, #0
   115f4:	mov	r0, r1
   115f8:	bl	10cf8 <error@plt>
   115fc:	mov	r0, #125	; 0x7d
   11600:	bl	10f58 <__assert_fail@plt+0x134>
   11604:	mov	r2, #5
   11608:	ldr	r1, [pc, #160]	; 116b0 <__assert_fail@plt+0x88c>
   1160c:	mov	r0, #0
   11610:	bl	10c80 <dcgettext@plt>
   11614:	mov	r2, r0
   11618:	mov	r1, r4
   1161c:	mov	r0, #125	; 0x7d
   11620:	bl	10cf8 <error@plt>
   11624:	ldr	r8, [r6]
   11628:	cmp	r8, #0
   1162c:	beq	114a0 <__assert_fail@plt+0x67c>
   11630:	mov	r2, #5
   11634:	ldr	r1, [pc, #116]	; 116b0 <__assert_fail@plt+0x88c>
   11638:	mov	r0, #0
   1163c:	bl	10c80 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	mov	r1, r8
   11648:	mov	r0, #125	; 0x7d
   1164c:	bl	10cf8 <error@plt>
   11650:	cmp	r4, r6
   11654:	movne	r7, #10
   11658:	bne	11480 <__assert_fail@plt+0x65c>
   1165c:	b	11590 <__assert_fail@plt+0x76c>
   11660:	muleq	r1, ip, r0
   11664:	ldrdeq	r5, [r1], -ip
   11668:	andeq	r5, r1, r4, lsl #5
   1166c:	andeq	r6, r2, r0, ror #1
   11670:	ldrdeq	r1, [r1], -r4
   11674:	andeq	r6, r2, r0, lsr r1
   11678:	andeq	r4, r1, r8, ror #28
   1167c:	andeq	r6, r2, r0, asr #2
   11680:	muleq	r1, ip, r2
   11684:	andeq	r5, r1, r0, lsr #5
   11688:	ldrdeq	r6, [r2], -ip
   1168c:	ldrdeq	r5, [r1], -r8
   11690:	andeq	r4, r1, r8, lsr #29
   11694:	andeq	r6, r2, ip, lsr r1
   11698:	andeq	r5, r1, ip, lsl #6
   1169c:	andeq	r6, r2, r8, lsr r1
   116a0:			; <UNDEFINED> instruction: 0x000153bc
   116a4:			; <UNDEFINED> instruction: 0x000152b0
   116a8:	andeq	r5, r1, r8, lsl #6
   116ac:	andeq	r5, r1, r8, asr #5
   116b0:	strdeq	r5, [r1], -r4
   116b4:	ldr	r3, [pc, #4]	; 116c0 <__assert_fail@plt+0x89c>
   116b8:	str	r0, [r3]
   116bc:	bx	lr
   116c0:	andeq	r6, r2, r8, asr #2
   116c4:	ldr	r3, [pc, #4]	; 116d0 <__assert_fail@plt+0x8ac>
   116c8:	strb	r0, [r3, #4]
   116cc:	bx	lr
   116d0:	andeq	r6, r2, r8, asr #2
   116d4:	push	{r4, r5, r6, lr}
   116d8:	sub	sp, sp, #8
   116dc:	ldr	r3, [pc, #200]	; 117ac <__assert_fail@plt+0x988>
   116e0:	ldr	r0, [r3]
   116e4:	bl	144e8 <__assert_fail@plt+0x36c4>
   116e8:	cmp	r0, #0
   116ec:	beq	11710 <__assert_fail@plt+0x8ec>
   116f0:	ldr	r3, [pc, #184]	; 117b0 <__assert_fail@plt+0x98c>
   116f4:	ldrb	r3, [r3, #4]
   116f8:	cmp	r3, #0
   116fc:	beq	1172c <__assert_fail@plt+0x908>
   11700:	bl	10d7c <__errno_location@plt>
   11704:	ldr	r3, [r0]
   11708:	cmp	r3, #32
   1170c:	bne	1172c <__assert_fail@plt+0x908>
   11710:	ldr	r3, [pc, #156]	; 117b4 <__assert_fail@plt+0x990>
   11714:	ldr	r0, [r3]
   11718:	bl	144e8 <__assert_fail@plt+0x36c4>
   1171c:	cmp	r0, #0
   11720:	bne	117a0 <__assert_fail@plt+0x97c>
   11724:	add	sp, sp, #8
   11728:	pop	{r4, r5, r6, pc}
   1172c:	mov	r2, #5
   11730:	ldr	r1, [pc, #128]	; 117b8 <__assert_fail@plt+0x994>
   11734:	mov	r0, #0
   11738:	bl	10c80 <dcgettext@plt>
   1173c:	mov	r4, r0
   11740:	ldr	r3, [pc, #104]	; 117b0 <__assert_fail@plt+0x98c>
   11744:	ldr	r5, [r3]
   11748:	cmp	r5, #0
   1174c:	beq	11784 <__assert_fail@plt+0x960>
   11750:	bl	10d7c <__errno_location@plt>
   11754:	ldr	r6, [r0]
   11758:	mov	r0, r5
   1175c:	bl	13190 <__assert_fail@plt+0x236c>
   11760:	str	r4, [sp]
   11764:	mov	r3, r0
   11768:	ldr	r2, [pc, #76]	; 117bc <__assert_fail@plt+0x998>
   1176c:	mov	r1, r6
   11770:	mov	r0, #0
   11774:	bl	10cf8 <error@plt>
   11778:	ldr	r3, [pc, #64]	; 117c0 <__assert_fail@plt+0x99c>
   1177c:	ldr	r0, [r3]
   11780:	bl	10c38 <_exit@plt>
   11784:	bl	10d7c <__errno_location@plt>
   11788:	mov	r3, r4
   1178c:	ldr	r2, [pc, #48]	; 117c4 <__assert_fail@plt+0x9a0>
   11790:	ldr	r1, [r0]
   11794:	mov	r0, #0
   11798:	bl	10cf8 <error@plt>
   1179c:	b	11778 <__assert_fail@plt+0x954>
   117a0:	ldr	r3, [pc, #24]	; 117c0 <__assert_fail@plt+0x99c>
   117a4:	ldr	r0, [r3]
   117a8:	bl	10c38 <_exit@plt>
   117ac:	andeq	r6, r2, ip, lsr r1
   117b0:	andeq	r6, r2, r8, asr #2
   117b4:	andeq	r6, r2, r8, lsr r1
   117b8:	andeq	r5, r1, ip, lsr #7
   117bc:			; <UNDEFINED> instruction: 0x000153b8
   117c0:	andeq	r6, r2, r0, ror #1
   117c4:			; <UNDEFINED> instruction: 0x000153bc
   117c8:	push	{r4, r5, r6, lr}
   117cc:	subs	r4, r0, #0
   117d0:	beq	11848 <__assert_fail@plt+0xa24>
   117d4:	mov	r1, #47	; 0x2f
   117d8:	mov	r0, r4
   117dc:	bl	10de8 <strrchr@plt>
   117e0:	cmp	r0, #0
   117e4:	addne	r5, r0, #1
   117e8:	moveq	r5, r4
   117ec:	sub	r3, r5, r4
   117f0:	cmp	r3, #6
   117f4:	ble	11834 <__assert_fail@plt+0xa10>
   117f8:	mov	r2, #7
   117fc:	ldr	r1, [pc, #96]	; 11864 <__assert_fail@plt+0xa40>
   11800:	sub	r0, r5, #7
   11804:	bl	10e0c <strncmp@plt>
   11808:	cmp	r0, #0
   1180c:	bne	11834 <__assert_fail@plt+0xa10>
   11810:	mov	r2, #3
   11814:	ldr	r1, [pc, #76]	; 11868 <__assert_fail@plt+0xa44>
   11818:	mov	r0, r5
   1181c:	bl	10e0c <strncmp@plt>
   11820:	cmp	r0, #0
   11824:	addeq	r4, r5, #3
   11828:	ldreq	r3, [pc, #60]	; 1186c <__assert_fail@plt+0xa48>
   1182c:	streq	r4, [r3]
   11830:	movne	r4, r5
   11834:	ldr	r3, [pc, #52]	; 11870 <__assert_fail@plt+0xa4c>
   11838:	str	r4, [r3]
   1183c:	ldr	r3, [pc, #48]	; 11874 <__assert_fail@plt+0xa50>
   11840:	str	r4, [r3]
   11844:	pop	{r4, r5, r6, pc}
   11848:	ldr	r3, [pc, #40]	; 11878 <__assert_fail@plt+0xa54>
   1184c:	ldr	r3, [r3]
   11850:	mov	r2, #55	; 0x37
   11854:	mov	r1, #1
   11858:	ldr	r0, [pc, #28]	; 1187c <__assert_fail@plt+0xa58>
   1185c:	bl	10cbc <fwrite@plt>
   11860:	bl	10e18 <abort@plt>
   11864:	strdeq	r5, [r1], -r8
   11868:	andeq	r5, r1, r0, lsl #8
   1186c:	andeq	r6, r2, r8, lsr #2
   11870:	andeq	r6, r2, r0, asr r1
   11874:	andeq	r6, r2, ip, lsr #2
   11878:	andeq	r6, r2, r8, lsr r1
   1187c:	andeq	r5, r1, r0, asr #7
   11880:	push	{r4, r5, r6, lr}
   11884:	mov	r5, r0
   11888:	mov	r4, r1
   1188c:	mov	r2, #48	; 0x30
   11890:	mov	r1, #0
   11894:	bl	10d94 <memset@plt>
   11898:	cmp	r4, #10
   1189c:	beq	118ac <__assert_fail@plt+0xa88>
   118a0:	str	r4, [r5]
   118a4:	mov	r0, r5
   118a8:	pop	{r4, r5, r6, pc}
   118ac:	bl	10e18 <abort@plt>
   118b0:	push	{r4, r5, r6, lr}
   118b4:	mov	r4, r0
   118b8:	mov	r5, r1
   118bc:	mov	r2, #5
   118c0:	mov	r1, r0
   118c4:	mov	r0, #0
   118c8:	bl	10c80 <dcgettext@plt>
   118cc:	cmp	r4, r0
   118d0:	popne	{r4, r5, r6, pc}
   118d4:	bl	1476c <__assert_fail@plt+0x3948>
   118d8:	ldrb	r3, [r0]
   118dc:	bic	r3, r3, #32
   118e0:	cmp	r3, #85	; 0x55
   118e4:	beq	11960 <__assert_fail@plt+0xb3c>
   118e8:	cmp	r3, #71	; 0x47
   118ec:	bne	119bc <__assert_fail@plt+0xb98>
   118f0:	ldrb	r3, [r0, #1]
   118f4:	bic	r3, r3, #32
   118f8:	cmp	r3, #66	; 0x42
   118fc:	bne	119bc <__assert_fail@plt+0xb98>
   11900:	ldrb	r3, [r0, #2]
   11904:	cmp	r3, #49	; 0x31
   11908:	bne	119bc <__assert_fail@plt+0xb98>
   1190c:	ldrb	r3, [r0, #3]
   11910:	cmp	r3, #56	; 0x38
   11914:	bne	119bc <__assert_fail@plt+0xb98>
   11918:	ldrb	r3, [r0, #4]
   1191c:	cmp	r3, #48	; 0x30
   11920:	bne	119bc <__assert_fail@plt+0xb98>
   11924:	ldrb	r3, [r0, #5]
   11928:	cmp	r3, #51	; 0x33
   1192c:	bne	119bc <__assert_fail@plt+0xb98>
   11930:	ldrb	r3, [r0, #6]
   11934:	cmp	r3, #48	; 0x30
   11938:	bne	119bc <__assert_fail@plt+0xb98>
   1193c:	ldrb	r3, [r0, #7]
   11940:	cmp	r3, #0
   11944:	bne	119bc <__assert_fail@plt+0xb98>
   11948:	ldrb	r2, [r4]
   1194c:	ldr	r3, [pc, #124]	; 119d0 <__assert_fail@plt+0xbac>
   11950:	ldr	r0, [pc, #124]	; 119d4 <__assert_fail@plt+0xbb0>
   11954:	cmp	r2, #96	; 0x60
   11958:	movne	r0, r3
   1195c:	pop	{r4, r5, r6, pc}
   11960:	ldrb	r3, [r0, #1]
   11964:	bic	r3, r3, #32
   11968:	cmp	r3, #84	; 0x54
   1196c:	bne	119bc <__assert_fail@plt+0xb98>
   11970:	ldrb	r3, [r0, #2]
   11974:	bic	r3, r3, #32
   11978:	cmp	r3, #70	; 0x46
   1197c:	bne	119bc <__assert_fail@plt+0xb98>
   11980:	ldrb	r3, [r0, #3]
   11984:	cmp	r3, #45	; 0x2d
   11988:	bne	119bc <__assert_fail@plt+0xb98>
   1198c:	ldrb	r3, [r0, #4]
   11990:	cmp	r3, #56	; 0x38
   11994:	bne	119bc <__assert_fail@plt+0xb98>
   11998:	ldrb	r3, [r0, #5]
   1199c:	cmp	r3, #0
   119a0:	bne	119bc <__assert_fail@plt+0xb98>
   119a4:	ldrb	r2, [r4]
   119a8:	ldr	r3, [pc, #40]	; 119d8 <__assert_fail@plt+0xbb4>
   119ac:	ldr	r0, [pc, #40]	; 119dc <__assert_fail@plt+0xbb8>
   119b0:	cmp	r2, #96	; 0x60
   119b4:	movne	r0, r3
   119b8:	pop	{r4, r5, r6, pc}
   119bc:	ldr	r3, [pc, #28]	; 119e0 <__assert_fail@plt+0xbbc>
   119c0:	ldr	r0, [pc, #28]	; 119e4 <__assert_fail@plt+0xbc0>
   119c4:	cmp	r5, #9
   119c8:	movne	r0, r3
   119cc:	pop	{r4, r5, r6, pc}
   119d0:	andeq	r5, r1, ip, asr r4
   119d4:	andeq	r5, r1, r8, ror #8
   119d8:	andeq	r5, r1, r8, asr r4
   119dc:	andeq	r5, r1, ip, ror #8
   119e0:	andeq	r5, r1, r0, ror #8
   119e4:	andeq	r5, r1, r4, ror #8
   119e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119ec:	sub	sp, sp, #116	; 0x74
   119f0:	str	r0, [sp, #36]	; 0x24
   119f4:	mov	sl, r1
   119f8:	str	r2, [sp, #52]	; 0x34
   119fc:	str	r3, [sp, #28]
   11a00:	ldr	r8, [sp, #152]	; 0x98
   11a04:	bl	10cd4 <__ctype_get_mb_cur_max@plt>
   11a08:	str	r0, [sp, #84]	; 0x54
   11a0c:	ldr	r3, [sp, #156]	; 0x9c
   11a10:	lsr	r3, r3, #1
   11a14:	and	r3, r3, #1
   11a18:	str	r3, [sp, #32]
   11a1c:	mov	r3, #1
   11a20:	str	r3, [sp, #40]	; 0x28
   11a24:	mov	r3, #0
   11a28:	str	r3, [sp, #80]	; 0x50
   11a2c:	str	r3, [sp, #44]	; 0x2c
   11a30:	str	r3, [sp, #48]	; 0x30
   11a34:	str	r3, [sp, #60]	; 0x3c
   11a38:	str	r3, [sp, #72]	; 0x48
   11a3c:	str	r3, [sp, #76]	; 0x4c
   11a40:	mov	r7, sl
   11a44:	mov	sl, r8
   11a48:	cmp	sl, #10
   11a4c:	ldrls	pc, [pc, sl, lsl #2]
   11a50:	b	11c08 <__assert_fail@plt+0xde4>
   11a54:			; <UNDEFINED> instruction: 0x00011ab8
   11a58:	andeq	r1, r1, r8, lsl #21
   11a5c:	andeq	r1, r1, r4, ror #23
   11a60:	andeq	r1, r1, r0, lsl #21
   11a64:	muleq	r1, r8, fp
   11a68:	andeq	r1, r1, r8, asr #21
   11a6c:	andeq	r2, r1, r4, lsr fp
   11a70:	andeq	r1, r1, ip, lsl #24
   11a74:	andeq	r1, r1, r4, lsl #22
   11a78:	andeq	r1, r1, r4, lsl #22
   11a7c:	andeq	r1, r1, r4, lsl #22
   11a80:	mov	r3, #1
   11a84:	str	r3, [sp, #48]	; 0x30
   11a88:	mov	r3, #1
   11a8c:	str	r3, [sp, #32]
   11a90:	str	r3, [sp, #60]	; 0x3c
   11a94:	ldr	r3, [pc, #4068]	; 12a80 <__assert_fail@plt+0x1c5c>
   11a98:	str	r3, [sp, #72]	; 0x48
   11a9c:	mov	fp, #0
   11aa0:	mov	sl, #2
   11aa4:	mov	r6, #0
   11aa8:	ldr	r3, [sp, #48]	; 0x30
   11aac:	eor	r3, r3, #1
   11ab0:	str	r3, [sp, #68]	; 0x44
   11ab4:	b	1239c <__assert_fail@plt+0x1578>
   11ab8:	mov	r3, #0
   11abc:	str	r3, [sp, #32]
   11ac0:	mov	fp, r3
   11ac4:	b	11aa4 <__assert_fail@plt+0xc80>
   11ac8:	ldr	r3, [sp, #32]
   11acc:	cmp	r3, #0
   11ad0:	bne	11c24 <__assert_fail@plt+0xe00>
   11ad4:	cmp	r7, #0
   11ad8:	beq	11c44 <__assert_fail@plt+0xe20>
   11adc:	ldr	r3, [sp, #36]	; 0x24
   11ae0:	mov	r2, #34	; 0x22
   11ae4:	strb	r2, [r3]
   11ae8:	mov	r3, #1
   11aec:	str	r3, [sp, #48]	; 0x30
   11af0:	str	r3, [sp, #60]	; 0x3c
   11af4:	ldr	r3, [pc, #3980]	; 12a88 <__assert_fail@plt+0x1c64>
   11af8:	str	r3, [sp, #72]	; 0x48
   11afc:	mov	fp, #1
   11b00:	b	11aa4 <__assert_fail@plt+0xc80>
   11b04:	cmp	sl, #10
   11b08:	beq	11b2c <__assert_fail@plt+0xd08>
   11b0c:	mov	r1, sl
   11b10:	ldr	r0, [pc, #3948]	; 12a84 <__assert_fail@plt+0x1c60>
   11b14:	bl	118b0 <__assert_fail@plt+0xa8c>
   11b18:	str	r0, [sp, #164]	; 0xa4
   11b1c:	mov	r1, sl
   11b20:	ldr	r0, [pc, #3928]	; 12a80 <__assert_fail@plt+0x1c5c>
   11b24:	bl	118b0 <__assert_fail@plt+0xa8c>
   11b28:	str	r0, [sp, #168]	; 0xa8
   11b2c:	ldr	r3, [sp, #32]
   11b30:	cmp	r3, #0
   11b34:	movne	fp, #0
   11b38:	bne	11b70 <__assert_fail@plt+0xd4c>
   11b3c:	ldr	r3, [sp, #164]	; 0xa4
   11b40:	ldrb	r3, [r3]
   11b44:	cmp	r3, #0
   11b48:	beq	11b90 <__assert_fail@plt+0xd6c>
   11b4c:	ldr	r2, [sp, #164]	; 0xa4
   11b50:	mov	fp, #0
   11b54:	ldr	r1, [sp, #36]	; 0x24
   11b58:	cmp	r7, fp
   11b5c:	strbhi	r3, [r1, fp]
   11b60:	add	fp, fp, #1
   11b64:	ldrb	r3, [r2, #1]!
   11b68:	cmp	r3, #0
   11b6c:	bne	11b58 <__assert_fail@plt+0xd34>
   11b70:	ldr	r0, [sp, #168]	; 0xa8
   11b74:	bl	10d64 <strlen@plt>
   11b78:	str	r0, [sp, #60]	; 0x3c
   11b7c:	ldr	r3, [sp, #168]	; 0xa8
   11b80:	str	r3, [sp, #72]	; 0x48
   11b84:	mov	r3, #1
   11b88:	str	r3, [sp, #48]	; 0x30
   11b8c:	b	11aa4 <__assert_fail@plt+0xc80>
   11b90:	mov	fp, #0
   11b94:	b	11b70 <__assert_fail@plt+0xd4c>
   11b98:	ldr	r3, [sp, #32]
   11b9c:	cmp	r3, #0
   11ba0:	bne	11c60 <__assert_fail@plt+0xe3c>
   11ba4:	mov	r3, #1
   11ba8:	str	r3, [sp, #48]	; 0x30
   11bac:	cmp	r7, #0
   11bb0:	beq	11c7c <__assert_fail@plt+0xe58>
   11bb4:	ldr	r3, [sp, #36]	; 0x24
   11bb8:	mov	r2, #39	; 0x27
   11bbc:	strb	r2, [r3]
   11bc0:	mov	r3, #0
   11bc4:	str	r3, [sp, #32]
   11bc8:	mov	r3, #1
   11bcc:	str	r3, [sp, #60]	; 0x3c
   11bd0:	ldr	r3, [pc, #3752]	; 12a80 <__assert_fail@plt+0x1c5c>
   11bd4:	str	r3, [sp, #72]	; 0x48
   11bd8:	mov	fp, #1
   11bdc:	mov	sl, #2
   11be0:	b	11aa4 <__assert_fail@plt+0xc80>
   11be4:	ldr	r3, [sp, #32]
   11be8:	cmp	r3, #0
   11bec:	beq	11bac <__assert_fail@plt+0xd88>
   11bf0:	mov	r3, #1
   11bf4:	str	r3, [sp, #60]	; 0x3c
   11bf8:	ldr	r3, [pc, #3712]	; 12a80 <__assert_fail@plt+0x1c5c>
   11bfc:	str	r3, [sp, #72]	; 0x48
   11c00:	mov	fp, #0
   11c04:	b	11aa4 <__assert_fail@plt+0xc80>
   11c08:	bl	10e18 <abort@plt>
   11c0c:	mov	r3, #0
   11c10:	str	r3, [sp, #32]
   11c14:	mov	r3, #1
   11c18:	str	r3, [sp, #48]	; 0x30
   11c1c:	mov	fp, #0
   11c20:	b	11aa4 <__assert_fail@plt+0xc80>
   11c24:	ldr	r3, [sp, #32]
   11c28:	str	r3, [sp, #48]	; 0x30
   11c2c:	mov	r3, #1
   11c30:	str	r3, [sp, #60]	; 0x3c
   11c34:	ldr	r3, [pc, #3660]	; 12a88 <__assert_fail@plt+0x1c64>
   11c38:	str	r3, [sp, #72]	; 0x48
   11c3c:	mov	fp, #0
   11c40:	b	11aa4 <__assert_fail@plt+0xc80>
   11c44:	mov	r3, #1
   11c48:	str	r3, [sp, #48]	; 0x30
   11c4c:	str	r3, [sp, #60]	; 0x3c
   11c50:	ldr	r3, [pc, #3632]	; 12a88 <__assert_fail@plt+0x1c64>
   11c54:	str	r3, [sp, #72]	; 0x48
   11c58:	mov	fp, #1
   11c5c:	b	11aa4 <__assert_fail@plt+0xc80>
   11c60:	mov	r3, #1
   11c64:	str	r3, [sp, #60]	; 0x3c
   11c68:	ldr	r3, [pc, #3600]	; 12a80 <__assert_fail@plt+0x1c5c>
   11c6c:	str	r3, [sp, #72]	; 0x48
   11c70:	mov	fp, #0
   11c74:	mov	sl, #2
   11c78:	b	11aa4 <__assert_fail@plt+0xc80>
   11c7c:	mov	r3, #0
   11c80:	str	r3, [sp, #32]
   11c84:	mov	r3, #1
   11c88:	str	r3, [sp, #60]	; 0x3c
   11c8c:	ldr	r3, [pc, #3564]	; 12a80 <__assert_fail@plt+0x1c5c>
   11c90:	str	r3, [sp, #72]	; 0x48
   11c94:	mov	fp, #1
   11c98:	mov	sl, #2
   11c9c:	b	11aa4 <__assert_fail@plt+0xc80>
   11ca0:	mov	r3, #0
   11ca4:	str	r3, [sp, #56]	; 0x38
   11ca8:	ldr	r3, [sp, #52]	; 0x34
   11cac:	add	r2, r3, r6
   11cb0:	str	r2, [sp, #64]	; 0x40
   11cb4:	ldrb	r4, [r3, r6]
   11cb8:	cmp	r4, #126	; 0x7e
   11cbc:	ldrls	pc, [pc, r4, lsl #2]
   11cc0:	b	124fc <__assert_fail@plt+0x16d8>
   11cc4:	ldrdeq	r1, [r1], -ip
   11cc8:	strdeq	r2, [r1], -ip
   11ccc:	strdeq	r2, [r1], -ip
   11cd0:	strdeq	r2, [r1], -ip
   11cd4:	strdeq	r2, [r1], -ip
   11cd8:	strdeq	r2, [r1], -ip
   11cdc:	strdeq	r2, [r1], -ip
   11ce0:	andeq	r2, r1, r8, lsr r2
   11ce4:	ldrdeq	r1, [r1], -r4
   11ce8:	strdeq	r2, [r1], -r0
   11cec:	andeq	r2, r1, r8, ror #3
   11cf0:	andeq	r2, r1, r8, asr r1
   11cf4:	andeq	r2, r1, r0, asr r1
   11cf8:	andeq	r1, r1, ip, asr #29
   11cfc:	strdeq	r2, [r1], -ip
   11d00:	strdeq	r2, [r1], -ip
   11d04:	strdeq	r2, [r1], -ip
   11d08:	strdeq	r2, [r1], -ip
   11d0c:	strdeq	r2, [r1], -ip
   11d10:	strdeq	r2, [r1], -ip
   11d14:	strdeq	r2, [r1], -ip
   11d18:	strdeq	r2, [r1], -ip
   11d1c:	strdeq	r2, [r1], -ip
   11d20:	strdeq	r2, [r1], -ip
   11d24:	strdeq	r2, [r1], -ip
   11d28:	strdeq	r2, [r1], -ip
   11d2c:	strdeq	r2, [r1], -ip
   11d30:	strdeq	r2, [r1], -ip
   11d34:	strdeq	r2, [r1], -ip
   11d38:	strdeq	r2, [r1], -ip
   11d3c:	strdeq	r2, [r1], -ip
   11d40:	strdeq	r2, [r1], -ip
   11d44:	andeq	r2, r1, ip, lsl #5
   11d48:	andeq	r2, r1, r8, lsl #5
   11d4c:	andeq	r2, r1, r8, lsl #5
   11d50:	andeq	r2, r1, r0, ror #4
   11d54:	andeq	r2, r1, r8, lsl #5
   11d58:	ldrdeq	r2, [r1], -r0
   11d5c:	andeq	r2, r1, r8, lsl #5
   11d60:	andeq	r2, r1, r0, ror #8
   11d64:	andeq	r2, r1, r8, lsl #5
   11d68:	andeq	r2, r1, r8, lsl #5
   11d6c:	andeq	r2, r1, r8, lsl #5
   11d70:	ldrdeq	r2, [r1], -r0
   11d74:	ldrdeq	r2, [r1], -r0
   11d78:	ldrdeq	r2, [r1], -r0
   11d7c:	ldrdeq	r2, [r1], -r0
   11d80:	ldrdeq	r2, [r1], -r0
   11d84:	ldrdeq	r2, [r1], -r0
   11d88:	ldrdeq	r2, [r1], -r0
   11d8c:	ldrdeq	r2, [r1], -r0
   11d90:	ldrdeq	r2, [r1], -r0
   11d94:	ldrdeq	r2, [r1], -r0
   11d98:	ldrdeq	r2, [r1], -r0
   11d9c:	ldrdeq	r2, [r1], -r0
   11da0:	ldrdeq	r2, [r1], -r0
   11da4:	ldrdeq	r2, [r1], -r0
   11da8:	ldrdeq	r2, [r1], -r0
   11dac:	ldrdeq	r2, [r1], -r0
   11db0:	andeq	r2, r1, r8, lsl #5
   11db4:	andeq	r2, r1, r8, lsl #5
   11db8:	andeq	r2, r1, r8, lsl #5
   11dbc:	andeq	r2, r1, r8, lsl #5
   11dc0:	andeq	r1, r1, r4, ror #31
   11dc4:	strdeq	r2, [r1], -ip
   11dc8:	ldrdeq	r2, [r1], -r0
   11dcc:	ldrdeq	r2, [r1], -r0
   11dd0:	ldrdeq	r2, [r1], -r0
   11dd4:	ldrdeq	r2, [r1], -r0
   11dd8:	ldrdeq	r2, [r1], -r0
   11ddc:	ldrdeq	r2, [r1], -r0
   11de0:	ldrdeq	r2, [r1], -r0
   11de4:	ldrdeq	r2, [r1], -r0
   11de8:	ldrdeq	r2, [r1], -r0
   11dec:	ldrdeq	r2, [r1], -r0
   11df0:	ldrdeq	r2, [r1], -r0
   11df4:	ldrdeq	r2, [r1], -r0
   11df8:	ldrdeq	r2, [r1], -r0
   11dfc:	ldrdeq	r2, [r1], -r0
   11e00:	ldrdeq	r2, [r1], -r0
   11e04:	ldrdeq	r2, [r1], -r0
   11e08:	ldrdeq	r2, [r1], -r0
   11e0c:	ldrdeq	r2, [r1], -r0
   11e10:	ldrdeq	r2, [r1], -r0
   11e14:	ldrdeq	r2, [r1], -r0
   11e18:	ldrdeq	r2, [r1], -r0
   11e1c:	ldrdeq	r2, [r1], -r0
   11e20:	ldrdeq	r2, [r1], -r0
   11e24:	ldrdeq	r2, [r1], -r0
   11e28:	ldrdeq	r2, [r1], -r0
   11e2c:	ldrdeq	r2, [r1], -r0
   11e30:	andeq	r2, r1, r8, lsl #5
   11e34:	andeq	r2, r1, r0, ror #2
   11e38:	ldrdeq	r2, [r1], -r0
   11e3c:	andeq	r2, r1, r8, lsl #5
   11e40:	ldrdeq	r2, [r1], -r0
   11e44:	andeq	r2, r1, r8, lsl #5
   11e48:	ldrdeq	r2, [r1], -r0
   11e4c:	ldrdeq	r2, [r1], -r0
   11e50:	ldrdeq	r2, [r1], -r0
   11e54:	ldrdeq	r2, [r1], -r0
   11e58:	ldrdeq	r2, [r1], -r0
   11e5c:	ldrdeq	r2, [r1], -r0
   11e60:	ldrdeq	r2, [r1], -r0
   11e64:	ldrdeq	r2, [r1], -r0
   11e68:	ldrdeq	r2, [r1], -r0
   11e6c:	ldrdeq	r2, [r1], -r0
   11e70:	ldrdeq	r2, [r1], -r0
   11e74:	ldrdeq	r2, [r1], -r0
   11e78:	ldrdeq	r2, [r1], -r0
   11e7c:	ldrdeq	r2, [r1], -r0
   11e80:	ldrdeq	r2, [r1], -r0
   11e84:	ldrdeq	r2, [r1], -r0
   11e88:	ldrdeq	r2, [r1], -r0
   11e8c:	ldrdeq	r2, [r1], -r0
   11e90:	ldrdeq	r2, [r1], -r0
   11e94:	ldrdeq	r2, [r1], -r0
   11e98:	ldrdeq	r2, [r1], -r0
   11e9c:	ldrdeq	r2, [r1], -r0
   11ea0:	ldrdeq	r2, [r1], -r0
   11ea4:	ldrdeq	r2, [r1], -r0
   11ea8:	ldrdeq	r2, [r1], -r0
   11eac:	ldrdeq	r2, [r1], -r0
   11eb0:	andeq	r2, r1, r0, asr #4
   11eb4:	andeq	r2, r1, r8, lsl #5
   11eb8:	andeq	r2, r1, r0, asr #4
   11ebc:	andeq	r2, r1, r0, ror #4
   11ec0:	mov	r3, #0
   11ec4:	str	r3, [sp, #56]	; 0x38
   11ec8:	b	11ca8 <__assert_fail@plt+0xe84>
   11ecc:	mov	r3, #114	; 0x72
   11ed0:	b	121f4 <__assert_fail@plt+0x13d0>
   11ed4:	mov	r3, #98	; 0x62
   11ed8:	b	1220c <__assert_fail@plt+0x13e8>
   11edc:	ldr	r3, [sp, #48]	; 0x30
   11ee0:	cmp	r3, #0
   11ee4:	beq	11fcc <__assert_fail@plt+0x11a8>
   11ee8:	ldr	r3, [sp, #32]
   11eec:	cmp	r3, #0
   11ef0:	bne	12a54 <__assert_fail@plt+0x1c30>
   11ef4:	ldr	r3, [sp, #44]	; 0x2c
   11ef8:	eor	r3, r3, #1
   11efc:	cmp	sl, #2
   11f00:	movne	r3, #0
   11f04:	andeq	r3, r3, #1
   11f08:	cmp	r3, #0
   11f0c:	moveq	r2, fp
   11f10:	beq	11f54 <__assert_fail@plt+0x1130>
   11f14:	cmp	r7, fp
   11f18:	ldrhi	r2, [sp, #36]	; 0x24
   11f1c:	movhi	r1, #39	; 0x27
   11f20:	strbhi	r1, [r2, fp]
   11f24:	add	r2, fp, #1
   11f28:	cmp	r7, r2
   11f2c:	ldrhi	r1, [sp, #36]	; 0x24
   11f30:	movhi	r0, #36	; 0x24
   11f34:	strbhi	r0, [r1, r2]
   11f38:	add	r2, fp, #2
   11f3c:	cmp	r7, r2
   11f40:	ldrhi	r1, [sp, #36]	; 0x24
   11f44:	movhi	r0, #39	; 0x27
   11f48:	strbhi	r0, [r1, r2]
   11f4c:	add	r2, fp, #3
   11f50:	str	r3, [sp, #44]	; 0x2c
   11f54:	cmp	r7, r2
   11f58:	ldrhi	r3, [sp, #36]	; 0x24
   11f5c:	movhi	r1, #92	; 0x5c
   11f60:	strbhi	r1, [r3, r2]
   11f64:	add	fp, r2, #1
   11f68:	cmp	r5, #0
   11f6c:	beq	128d8 <__assert_fail@plt+0x1ab4>
   11f70:	add	r3, r6, #1
   11f74:	ldr	r1, [sp, #28]
   11f78:	cmp	r1, r3
   11f7c:	bls	128e8 <__assert_fail@plt+0x1ac4>
   11f80:	ldr	r1, [sp, #52]	; 0x34
   11f84:	ldrb	r3, [r1, r3]
   11f88:	sub	r3, r3, #48	; 0x30
   11f8c:	uxtb	r3, r3
   11f90:	cmp	r3, #9
   11f94:	bhi	128f4 <__assert_fail@plt+0x1ad0>
   11f98:	cmp	r7, fp
   11f9c:	movhi	r3, #48	; 0x30
   11fa0:	ldrhi	r1, [sp, #36]	; 0x24
   11fa4:	strbhi	r3, [r1, fp]
   11fa8:	add	r3, r2, #2
   11fac:	cmp	r7, r3
   11fb0:	movhi	r1, #48	; 0x30
   11fb4:	ldrhi	r0, [sp, #36]	; 0x24
   11fb8:	strbhi	r1, [r0, r3]
   11fbc:	add	fp, r2, #3
   11fc0:	ldr	r8, [sp, #32]
   11fc4:	mov	r4, #48	; 0x30
   11fc8:	b	122a4 <__assert_fail@plt+0x1480>
   11fcc:	ldr	r3, [sp, #156]	; 0x9c
   11fd0:	tst	r3, #1
   11fd4:	bne	12398 <__assert_fail@plt+0x1574>
   11fd8:	ldr	r5, [sp, #48]	; 0x30
   11fdc:	mov	r8, r5
   11fe0:	b	122a4 <__assert_fail@plt+0x1480>
   11fe4:	cmp	sl, #2
   11fe8:	beq	12000 <__assert_fail@plt+0x11dc>
   11fec:	cmp	sl, #5
   11ff0:	beq	12018 <__assert_fail@plt+0x11f4>
   11ff4:	mov	r8, #0
   11ff8:	mov	r5, r8
   11ffc:	b	122a4 <__assert_fail@plt+0x1480>
   12000:	ldr	r3, [sp, #32]
   12004:	cmp	r3, #0
   12008:	bne	12a68 <__assert_fail@plt+0x1c44>
   1200c:	mov	r8, r3
   12010:	mov	r5, r3
   12014:	b	122a4 <__assert_fail@plt+0x1480>
   12018:	ldr	r3, [sp, #156]	; 0x9c
   1201c:	tst	r3, #4
   12020:	beq	12900 <__assert_fail@plt+0x1adc>
   12024:	add	r3, r6, #2
   12028:	ldr	r2, [sp, #28]
   1202c:	cmp	r2, r3
   12030:	bls	1290c <__assert_fail@plt+0x1ae8>
   12034:	ldr	r2, [sp, #52]	; 0x34
   12038:	add	r2, r2, r6
   1203c:	ldrb	r2, [r2, #1]
   12040:	cmp	r2, #63	; 0x3f
   12044:	movne	r8, #0
   12048:	movne	r5, r8
   1204c:	bne	122a4 <__assert_fail@plt+0x1480>
   12050:	ldr	r2, [sp, #52]	; 0x34
   12054:	ldrb	r2, [r2, r3]
   12058:	sub	r1, r2, #33	; 0x21
   1205c:	cmp	r1, #29
   12060:	ldrls	pc, [pc, r1, lsl #2]
   12064:	b	12918 <__assert_fail@plt+0x1af4>
   12068:	andeq	r2, r1, r0, ror #1
   1206c:	andeq	r2, r1, r8, lsl r9
   12070:	andeq	r2, r1, r8, lsl r9
   12074:	andeq	r2, r1, r8, lsl r9
   12078:	andeq	r2, r1, r8, lsl r9
   1207c:	andeq	r2, r1, r8, lsl r9
   12080:	andeq	r2, r1, r0, ror #1
   12084:	andeq	r2, r1, r0, ror #1
   12088:	andeq	r2, r1, r0, ror #1
   1208c:	andeq	r2, r1, r8, lsl r9
   12090:	andeq	r2, r1, r8, lsl r9
   12094:	andeq	r2, r1, r8, lsl r9
   12098:	andeq	r2, r1, r0, ror #1
   1209c:	andeq	r2, r1, r8, lsl r9
   120a0:	andeq	r2, r1, r0, ror #1
   120a4:	andeq	r2, r1, r8, lsl r9
   120a8:	andeq	r2, r1, r8, lsl r9
   120ac:	andeq	r2, r1, r8, lsl r9
   120b0:	andeq	r2, r1, r8, lsl r9
   120b4:	andeq	r2, r1, r8, lsl r9
   120b8:	andeq	r2, r1, r8, lsl r9
   120bc:	andeq	r2, r1, r8, lsl r9
   120c0:	andeq	r2, r1, r8, lsl r9
   120c4:	andeq	r2, r1, r8, lsl r9
   120c8:	andeq	r2, r1, r8, lsl r9
   120cc:	andeq	r2, r1, r8, lsl r9
   120d0:	andeq	r2, r1, r8, lsl r9
   120d4:	andeq	r2, r1, r0, ror #1
   120d8:	andeq	r2, r1, r0, ror #1
   120dc:	andeq	r2, r1, r0, ror #1
   120e0:	ldr	r1, [sp, #32]
   120e4:	cmp	r1, #0
   120e8:	bne	12b28 <__assert_fail@plt+0x1d04>
   120ec:	cmp	r7, fp
   120f0:	movhi	r1, #63	; 0x3f
   120f4:	ldrhi	r0, [sp, #36]	; 0x24
   120f8:	strbhi	r1, [r0, fp]
   120fc:	add	r1, fp, #1
   12100:	cmp	r7, r1
   12104:	ldrhi	r0, [sp, #36]	; 0x24
   12108:	movhi	ip, #34	; 0x22
   1210c:	strbhi	ip, [r0, r1]
   12110:	add	r1, fp, #2
   12114:	cmp	r7, r1
   12118:	ldrhi	r0, [sp, #36]	; 0x24
   1211c:	movhi	ip, #34	; 0x22
   12120:	strbhi	ip, [r0, r1]
   12124:	add	r1, fp, #3
   12128:	cmp	r7, r1
   1212c:	movhi	r0, #63	; 0x3f
   12130:	ldrhi	ip, [sp, #36]	; 0x24
   12134:	strbhi	r0, [ip, r1]
   12138:	add	fp, fp, #4
   1213c:	ldr	r5, [sp, #32]
   12140:	mov	r8, r5
   12144:	mov	r4, r2
   12148:	mov	r6, r3
   1214c:	b	122a4 <__assert_fail@plt+0x1480>
   12150:	mov	r3, #102	; 0x66
   12154:	b	1220c <__assert_fail@plt+0x13e8>
   12158:	mov	r3, #118	; 0x76
   1215c:	b	1220c <__assert_fail@plt+0x13e8>
   12160:	cmp	sl, #2
   12164:	beq	121d0 <__assert_fail@plt+0x13ac>
   12168:	ldr	r3, [sp, #48]	; 0x30
   1216c:	ldr	r2, [sp, #32]
   12170:	and	r3, r3, r2
   12174:	tst	r9, r3
   12178:	moveq	r3, r4
   1217c:	beq	1220c <__assert_fail@plt+0x13e8>
   12180:	mov	r8, #0
   12184:	mov	r5, r8
   12188:	eor	r5, r5, #1
   1218c:	ldr	r3, [sp, #44]	; 0x2c
   12190:	and	r5, r5, r3
   12194:	tst	r5, #255	; 0xff
   12198:	beq	12378 <__assert_fail@plt+0x1554>
   1219c:	cmp	r7, fp
   121a0:	ldrhi	r3, [sp, #36]	; 0x24
   121a4:	movhi	r2, #39	; 0x27
   121a8:	strbhi	r2, [r3, fp]
   121ac:	add	r3, fp, #1
   121b0:	cmp	r7, r3
   121b4:	ldrhi	r2, [sp, #36]	; 0x24
   121b8:	movhi	r1, #39	; 0x27
   121bc:	strbhi	r1, [r2, r3]
   121c0:	add	fp, fp, #2
   121c4:	mov	r3, #0
   121c8:	str	r3, [sp, #44]	; 0x2c
   121cc:	b	12378 <__assert_fail@plt+0x1554>
   121d0:	ldr	r3, [sp, #32]
   121d4:	cmp	r3, #0
   121d8:	bne	12a74 <__assert_fail@plt+0x1c50>
   121dc:	mov	r8, r3
   121e0:	mov	r5, r3
   121e4:	b	12188 <__assert_fail@plt+0x1364>
   121e8:	mov	r3, #110	; 0x6e
   121ec:	b	121f4 <__assert_fail@plt+0x13d0>
   121f0:	mov	r3, #116	; 0x74
   121f4:	ldr	r2, [sp, #32]
   121f8:	cmp	sl, #2
   121fc:	movne	r2, #0
   12200:	andeq	r2, r2, #1
   12204:	cmp	r2, #0
   12208:	bne	1222c <__assert_fail@plt+0x1408>
   1220c:	ldr	r2, [sp, #48]	; 0x30
   12210:	cmp	r2, #0
   12214:	moveq	r8, r2
   12218:	moveq	r5, r2
   1221c:	beq	122a4 <__assert_fail@plt+0x1480>
   12220:	mov	r4, r3
   12224:	mov	r8, #0
   12228:	b	122fc <__assert_fail@plt+0x14d8>
   1222c:	mov	r8, sl
   12230:	mov	sl, r7
   12234:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12238:	mov	r3, #97	; 0x61
   1223c:	b	1220c <__assert_fail@plt+0x13e8>
   12240:	ldr	r3, [sp, #28]
   12244:	cmn	r3, #1
   12248:	beq	12274 <__assert_fail@plt+0x1450>
   1224c:	ldr	r3, [sp, #28]
   12250:	subs	r3, r3, #1
   12254:	movne	r3, #1
   12258:	cmp	r3, #0
   1225c:	bne	12924 <__assert_fail@plt+0x1b00>
   12260:	cmp	r6, #0
   12264:	beq	1228c <__assert_fail@plt+0x1468>
   12268:	mov	r8, #0
   1226c:	mov	r5, r8
   12270:	b	122a4 <__assert_fail@plt+0x1480>
   12274:	ldr	r3, [sp, #52]	; 0x34
   12278:	ldrb	r3, [r3, #1]
   1227c:	adds	r3, r3, #0
   12280:	movne	r3, #1
   12284:	b	12258 <__assert_fail@plt+0x1434>
   12288:	mov	r8, #0
   1228c:	ldr	r5, [sp, #32]
   12290:	cmp	sl, #2
   12294:	movne	r5, #0
   12298:	andeq	r5, r5, #1
   1229c:	cmp	r5, #0
   122a0:	bne	12454 <__assert_fail@plt+0x1630>
   122a4:	ldr	r3, [sp, #68]	; 0x44
   122a8:	cmp	sl, #2
   122ac:	orreq	r3, r3, #1
   122b0:	eor	r3, r3, #1
   122b4:	ldr	r2, [sp, #32]
   122b8:	orr	r3, r2, r3
   122bc:	tst	r3, #255	; 0xff
   122c0:	beq	122f0 <__assert_fail@plt+0x14cc>
   122c4:	ldr	r3, [sp, #160]	; 0xa0
   122c8:	cmp	r3, #0
   122cc:	beq	122f0 <__assert_fail@plt+0x14cc>
   122d0:	lsr	r2, r4, #5
   122d4:	uxtb	r2, r2
   122d8:	and	r3, r4, #31
   122dc:	ldr	r1, [sp, #160]	; 0xa0
   122e0:	ldr	r2, [r1, r2, lsl #2]
   122e4:	lsr	r3, r2, r3
   122e8:	tst	r3, #1
   122ec:	bne	122fc <__assert_fail@plt+0x14d8>
   122f0:	ldr	r3, [sp, #56]	; 0x38
   122f4:	cmp	r3, #0
   122f8:	beq	12188 <__assert_fail@plt+0x1364>
   122fc:	ldr	r3, [sp, #32]
   12300:	cmp	r3, #0
   12304:	bne	12b10 <__assert_fail@plt+0x1cec>
   12308:	ldr	r3, [sp, #44]	; 0x2c
   1230c:	eor	r3, r3, #1
   12310:	cmp	sl, #2
   12314:	movne	r3, #0
   12318:	andeq	r3, r3, #1
   1231c:	cmp	r3, #0
   12320:	beq	12364 <__assert_fail@plt+0x1540>
   12324:	cmp	r7, fp
   12328:	ldrhi	r2, [sp, #36]	; 0x24
   1232c:	movhi	r1, #39	; 0x27
   12330:	strbhi	r1, [r2, fp]
   12334:	add	r2, fp, #1
   12338:	cmp	r7, r2
   1233c:	ldrhi	r1, [sp, #36]	; 0x24
   12340:	movhi	r0, #36	; 0x24
   12344:	strbhi	r0, [r1, r2]
   12348:	add	r2, fp, #2
   1234c:	cmp	r7, r2
   12350:	ldrhi	r1, [sp, #36]	; 0x24
   12354:	movhi	r0, #39	; 0x27
   12358:	strbhi	r0, [r1, r2]
   1235c:	add	fp, fp, #3
   12360:	str	r3, [sp, #44]	; 0x2c
   12364:	cmp	r7, fp
   12368:	ldrhi	r3, [sp, #36]	; 0x24
   1236c:	movhi	r2, #92	; 0x5c
   12370:	strbhi	r2, [r3, fp]
   12374:	add	fp, fp, #1
   12378:	cmp	fp, r7
   1237c:	ldrcc	r3, [sp, #36]	; 0x24
   12380:	strbcc	r4, [r3, fp]
   12384:	add	fp, fp, #1
   12388:	ldr	r3, [sp, #40]	; 0x28
   1238c:	cmp	r8, #0
   12390:	moveq	r3, #0
   12394:	str	r3, [sp, #40]	; 0x28
   12398:	add	r6, r6, #1
   1239c:	ldr	r3, [sp, #28]
   123a0:	cmn	r3, #1
   123a4:	beq	12930 <__assert_fail@plt+0x1b0c>
   123a8:	ldr	r3, [sp, #28]
   123ac:	subs	r8, r3, r6
   123b0:	movne	r8, #1
   123b4:	cmp	r8, #0
   123b8:	beq	12944 <__assert_fail@plt+0x1b20>
   123bc:	ldr	r5, [sp, #48]	; 0x30
   123c0:	cmp	sl, #2
   123c4:	moveq	r5, #0
   123c8:	andne	r5, r5, #1
   123cc:	ldr	r3, [sp, #60]	; 0x3c
   123d0:	adds	r9, r3, #0
   123d4:	movne	r9, #1
   123d8:	ands	r2, r5, r9
   123dc:	str	r2, [sp, #56]	; 0x38
   123e0:	beq	11ca8 <__assert_fail@plt+0xe84>
   123e4:	add	r4, r6, r3
   123e8:	ldr	r2, [sp, #28]
   123ec:	cmp	r3, #1
   123f0:	movls	r3, #0
   123f4:	movhi	r3, #1
   123f8:	cmn	r2, #1
   123fc:	movne	r3, #0
   12400:	cmp	r3, #0
   12404:	beq	12414 <__assert_fail@plt+0x15f0>
   12408:	ldr	r0, [sp, #52]	; 0x34
   1240c:	bl	10d64 <strlen@plt>
   12410:	str	r0, [sp, #28]
   12414:	ldr	r3, [sp, #28]
   12418:	cmp	r3, r4
   1241c:	bcc	11ca0 <__assert_fail@plt+0xe7c>
   12420:	ldr	r2, [sp, #60]	; 0x3c
   12424:	ldr	r1, [sp, #72]	; 0x48
   12428:	ldr	r3, [sp, #52]	; 0x34
   1242c:	add	r0, r3, r6
   12430:	bl	10c68 <memcmp@plt>
   12434:	cmp	r0, #0
   12438:	bne	11ec0 <__assert_fail@plt+0x109c>
   1243c:	ldr	r3, [sp, #32]
   12440:	cmp	r3, #0
   12444:	beq	11ca8 <__assert_fail@plt+0xe84>
   12448:	mov	r8, sl
   1244c:	mov	sl, r7
   12450:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12454:	mov	r8, sl
   12458:	mov	sl, r7
   1245c:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12460:	cmp	sl, #2
   12464:	strne	r8, [sp, #80]	; 0x50
   12468:	movne	r5, #0
   1246c:	bne	122a4 <__assert_fail@plt+0x1480>
   12470:	ldr	r3, [sp, #32]
   12474:	cmp	r3, #0
   12478:	bne	12a8c <__assert_fail@plt+0x1c68>
   1247c:	ldr	r2, [sp, #76]	; 0x4c
   12480:	adds	r3, r7, #0
   12484:	movne	r3, #1
   12488:	cmp	r2, #0
   1248c:	movne	r3, #0
   12490:	cmp	r3, #0
   12494:	movne	r3, #0
   12498:	bne	124c8 <__assert_fail@plt+0x16a4>
   1249c:	cmp	r7, fp
   124a0:	ldrhi	r3, [sp, #36]	; 0x24
   124a4:	movhi	r2, #39	; 0x27
   124a8:	strbhi	r2, [r3, fp]
   124ac:	add	r3, fp, #1
   124b0:	cmp	r7, r3
   124b4:	ldrhi	r2, [sp, #36]	; 0x24
   124b8:	movhi	r1, #92	; 0x5c
   124bc:	strbhi	r1, [r2, r3]
   124c0:	mov	r3, r7
   124c4:	ldr	r7, [sp, #76]	; 0x4c
   124c8:	add	r2, fp, #2
   124cc:	cmp	r2, r3
   124d0:	ldrcc	r1, [sp, #36]	; 0x24
   124d4:	movcc	r0, #39	; 0x27
   124d8:	strbcc	r0, [r1, r2]
   124dc:	add	fp, fp, #3
   124e0:	ldr	r2, [sp, #32]
   124e4:	mov	r5, r2
   124e8:	str	r8, [sp, #80]	; 0x50
   124ec:	str	r2, [sp, #44]	; 0x2c
   124f0:	str	r7, [sp, #76]	; 0x4c
   124f4:	mov	r7, r3
   124f8:	b	122a4 <__assert_fail@plt+0x1480>
   124fc:	ldr	r5, [sp, #84]	; 0x54
   12500:	cmp	r5, #1
   12504:	beq	12534 <__assert_fail@plt+0x1710>
   12508:	mov	r3, #0
   1250c:	str	r3, [sp, #104]	; 0x68
   12510:	str	r3, [sp, #108]	; 0x6c
   12514:	ldr	r3, [sp, #28]
   12518:	cmn	r3, #1
   1251c:	beq	12568 <__assert_fail@plt+0x1744>
   12520:	mov	r3, #0
   12524:	str	r4, [sp, #88]	; 0x58
   12528:	str	fp, [sp, #92]	; 0x5c
   1252c:	mov	fp, r3
   12530:	b	12690 <__assert_fail@plt+0x186c>
   12534:	bl	10d4c <__ctype_b_loc@plt>
   12538:	ldr	r2, [r0]
   1253c:	lsl	r3, r4, #1
   12540:	ldrh	r8, [r2, r3]
   12544:	lsr	r8, r8, #14
   12548:	and	r8, r8, #1
   1254c:	mov	r2, r5
   12550:	eor	r5, r8, #1
   12554:	ldr	r3, [sp, #48]	; 0x30
   12558:	and	r5, r5, r3
   1255c:	ands	r5, r5, #255	; 0xff
   12560:	beq	122a4 <__assert_fail@plt+0x1480>
   12564:	b	12728 <__assert_fail@plt+0x1904>
   12568:	ldr	r0, [sp, #52]	; 0x34
   1256c:	bl	10d64 <strlen@plt>
   12570:	str	r0, [sp, #28]
   12574:	b	12520 <__assert_fail@plt+0x16fc>
   12578:	mov	r2, fp
   1257c:	mov	r1, r4
   12580:	ldr	r4, [sp, #88]	; 0x58
   12584:	ldr	fp, [sp, #92]	; 0x5c
   12588:	ldr	r0, [sp, #28]
   1258c:	cmp	r0, r5
   12590:	bls	1275c <__assert_fail@plt+0x1938>
   12594:	ldrb	r3, [r1]
   12598:	cmp	r3, #0
   1259c:	beq	12764 <__assert_fail@plt+0x1940>
   125a0:	mov	r3, r1
   125a4:	add	r2, r2, #1
   125a8:	add	r1, r6, r2
   125ac:	cmp	r0, r1
   125b0:	bls	1276c <__assert_fail@plt+0x1948>
   125b4:	ldrb	r1, [r3, #1]!
   125b8:	cmp	r1, #0
   125bc:	bne	125a4 <__assert_fail@plt+0x1780>
   125c0:	mov	r8, #0
   125c4:	b	12720 <__assert_fail@plt+0x18fc>
   125c8:	cmp	r4, r5
   125cc:	beq	1266c <__assert_fail@plt+0x1848>
   125d0:	ldrb	r3, [r4, #1]!
   125d4:	sub	r3, r3, #91	; 0x5b
   125d8:	cmp	r3, #33	; 0x21
   125dc:	ldrls	pc, [pc, r3, lsl #2]
   125e0:	b	125c8 <__assert_fail@plt+0x17a4>
   125e4:	muleq	r1, r8, sl
   125e8:	muleq	r1, r8, sl
   125ec:	andeq	r2, r1, r8, asr #11
   125f0:	muleq	r1, r8, sl
   125f4:	andeq	r2, r1, r8, asr #11
   125f8:	muleq	r1, r8, sl
   125fc:	andeq	r2, r1, r8, asr #11
   12600:	andeq	r2, r1, r8, asr #11
   12604:	andeq	r2, r1, r8, asr #11
   12608:	andeq	r2, r1, r8, asr #11
   1260c:	andeq	r2, r1, r8, asr #11
   12610:	andeq	r2, r1, r8, asr #11
   12614:	andeq	r2, r1, r8, asr #11
   12618:	andeq	r2, r1, r8, asr #11
   1261c:	andeq	r2, r1, r8, asr #11
   12620:	andeq	r2, r1, r8, asr #11
   12624:	andeq	r2, r1, r8, asr #11
   12628:	andeq	r2, r1, r8, asr #11
   1262c:	andeq	r2, r1, r8, asr #11
   12630:	andeq	r2, r1, r8, asr #11
   12634:	andeq	r2, r1, r8, asr #11
   12638:	andeq	r2, r1, r8, asr #11
   1263c:	andeq	r2, r1, r8, asr #11
   12640:	andeq	r2, r1, r8, asr #11
   12644:	andeq	r2, r1, r8, asr #11
   12648:	andeq	r2, r1, r8, asr #11
   1264c:	andeq	r2, r1, r8, asr #11
   12650:	andeq	r2, r1, r8, asr #11
   12654:	andeq	r2, r1, r8, asr #11
   12658:	andeq	r2, r1, r8, asr #11
   1265c:	andeq	r2, r1, r8, asr #11
   12660:	andeq	r2, r1, r8, asr #11
   12664:	andeq	r2, r1, r8, asr #11
   12668:	muleq	r1, r8, sl
   1266c:	ldr	r0, [sp, #100]	; 0x64
   12670:	bl	10cb0 <iswprint@plt>
   12674:	cmp	r0, #0
   12678:	moveq	r8, #0
   1267c:	add	fp, fp, r9
   12680:	add	r0, sp, #104	; 0x68
   12684:	bl	10c5c <mbsinit@plt>
   12688:	cmp	r0, #0
   1268c:	bne	12700 <__assert_fail@plt+0x18dc>
   12690:	add	r5, r6, fp
   12694:	ldr	r3, [sp, #52]	; 0x34
   12698:	add	r4, r3, r5
   1269c:	add	r3, sp, #104	; 0x68
   126a0:	ldr	r2, [sp, #28]
   126a4:	sub	r2, r2, r5
   126a8:	mov	r1, r4
   126ac:	add	r0, sp, #100	; 0x64
   126b0:	bl	147a0 <__assert_fail@plt+0x397c>
   126b4:	subs	r9, r0, #0
   126b8:	beq	12774 <__assert_fail@plt+0x1950>
   126bc:	cmn	r9, #1
   126c0:	beq	12710 <__assert_fail@plt+0x18ec>
   126c4:	cmn	r9, #2
   126c8:	beq	12578 <__assert_fail@plt+0x1754>
   126cc:	ldr	r3, [sp, #32]
   126d0:	cmp	sl, #2
   126d4:	movne	r3, #0
   126d8:	andeq	r3, r3, #1
   126dc:	cmp	r3, #0
   126e0:	beq	1266c <__assert_fail@plt+0x1848>
   126e4:	cmp	r9, #1
   126e8:	bls	1266c <__assert_fail@plt+0x1848>
   126ec:	sub	r3, r9, #1
   126f0:	add	r5, r3, r5
   126f4:	ldr	r3, [sp, #52]	; 0x34
   126f8:	add	r5, r3, r5
   126fc:	b	125d0 <__assert_fail@plt+0x17ac>
   12700:	ldr	r4, [sp, #88]	; 0x58
   12704:	mov	r2, fp
   12708:	ldr	fp, [sp, #92]	; 0x5c
   1270c:	b	12720 <__assert_fail@plt+0x18fc>
   12710:	ldr	r4, [sp, #88]	; 0x58
   12714:	mov	r2, fp
   12718:	ldr	fp, [sp, #92]	; 0x5c
   1271c:	mov	r8, #0
   12720:	cmp	r2, #1
   12724:	bls	12550 <__assert_fail@plt+0x172c>
   12728:	add	r1, r6, r2
   1272c:	ldr	ip, [sp, #64]	; 0x40
   12730:	mov	r5, #0
   12734:	eor	r3, r8, #1
   12738:	ldr	r2, [sp, #48]	; 0x30
   1273c:	and	r3, r3, r2
   12740:	uxtb	r3, r3
   12744:	ldr	r9, [sp, #32]
   12748:	ldr	lr, [sp, #44]	; 0x2c
   1274c:	ldr	r2, [sp, #56]	; 0x38
   12750:	str	r8, [sp, #56]	; 0x38
   12754:	ldr	r0, [sp, #36]	; 0x24
   12758:	b	127f4 <__assert_fail@plt+0x19d0>
   1275c:	mov	r8, #0
   12760:	b	12720 <__assert_fail@plt+0x18fc>
   12764:	mov	r8, #0
   12768:	b	12720 <__assert_fail@plt+0x18fc>
   1276c:	mov	r8, #0
   12770:	b	12720 <__assert_fail@plt+0x18fc>
   12774:	ldr	r4, [sp, #88]	; 0x58
   12778:	mov	r2, fp
   1277c:	ldr	fp, [sp, #92]	; 0x5c
   12780:	b	12720 <__assert_fail@plt+0x18fc>
   12784:	cmp	r2, #0
   12788:	beq	1279c <__assert_fail@plt+0x1978>
   1278c:	cmp	r7, fp
   12790:	movhi	r2, #92	; 0x5c
   12794:	strbhi	r2, [r0, fp]
   12798:	add	fp, fp, #1
   1279c:	add	r8, r6, #1
   127a0:	cmp	r1, r8
   127a4:	bls	128ac <__assert_fail@plt+0x1a88>
   127a8:	eor	r2, r5, #1
   127ac:	and	r2, r2, lr
   127b0:	ands	r2, r2, #255	; 0xff
   127b4:	beq	128c8 <__assert_fail@plt+0x1aa4>
   127b8:	cmp	r7, fp
   127bc:	movhi	r2, #39	; 0x27
   127c0:	strbhi	r2, [r0, fp]
   127c4:	add	r2, fp, #1
   127c8:	cmp	r7, r2
   127cc:	movhi	lr, #39	; 0x27
   127d0:	strbhi	lr, [r0, r2]
   127d4:	add	fp, fp, #2
   127d8:	mov	r6, r8
   127dc:	mov	r2, r3
   127e0:	mov	lr, r3
   127e4:	cmp	r7, fp
   127e8:	strbhi	r4, [r0, fp]
   127ec:	add	fp, fp, #1
   127f0:	ldrb	r4, [ip, #1]!
   127f4:	cmp	r3, #0
   127f8:	beq	12784 <__assert_fail@plt+0x1960>
   127fc:	cmp	r9, #0
   12800:	bne	12b04 <__assert_fail@plt+0x1ce0>
   12804:	eor	r5, lr, #1
   12808:	cmp	sl, #2
   1280c:	movne	r5, #0
   12810:	andeq	r5, r5, #1
   12814:	cmp	r5, #0
   12818:	beq	12850 <__assert_fail@plt+0x1a2c>
   1281c:	cmp	r7, fp
   12820:	movhi	lr, #39	; 0x27
   12824:	strbhi	lr, [r0, fp]
   12828:	add	lr, fp, #1
   1282c:	cmp	r7, lr
   12830:	movhi	r8, #36	; 0x24
   12834:	strbhi	r8, [r0, lr]
   12838:	add	lr, fp, #2
   1283c:	cmp	r7, lr
   12840:	movhi	r8, #39	; 0x27
   12844:	strbhi	r8, [r0, lr]
   12848:	add	fp, fp, #3
   1284c:	mov	lr, r5
   12850:	cmp	r7, fp
   12854:	movhi	r5, #92	; 0x5c
   12858:	strbhi	r5, [r0, fp]
   1285c:	add	r5, fp, #1
   12860:	cmp	r7, r5
   12864:	lsrhi	r8, r4, #6
   12868:	addhi	r8, r8, #48	; 0x30
   1286c:	strbhi	r8, [r0, r5]
   12870:	add	r8, fp, #2
   12874:	cmp	r7, r8
   12878:	lsrhi	r5, r4, #3
   1287c:	andhi	r5, r5, #7
   12880:	addhi	r5, r5, #48	; 0x30
   12884:	strbhi	r5, [r0, r8]
   12888:	add	fp, fp, #3
   1288c:	and	r4, r4, #7
   12890:	add	r4, r4, #48	; 0x30
   12894:	add	r5, r6, #1
   12898:	cmp	r1, r5
   1289c:	bls	128b8 <__assert_fail@plt+0x1a94>
   128a0:	mov	r6, r5
   128a4:	mov	r5, r3
   128a8:	b	127e4 <__assert_fail@plt+0x19c0>
   128ac:	str	lr, [sp, #44]	; 0x2c
   128b0:	ldr	r8, [sp, #56]	; 0x38
   128b4:	b	12188 <__assert_fail@plt+0x1364>
   128b8:	str	lr, [sp, #44]	; 0x2c
   128bc:	ldr	r8, [sp, #56]	; 0x38
   128c0:	mov	r5, r3
   128c4:	b	12188 <__assert_fail@plt+0x1364>
   128c8:	mov	r6, r8
   128cc:	b	127e4 <__assert_fail@plt+0x19c0>
   128d0:	mov	r5, #0
   128d4:	b	122a4 <__assert_fail@plt+0x1480>
   128d8:	mov	r8, r5
   128dc:	ldr	r5, [sp, #48]	; 0x30
   128e0:	mov	r4, #48	; 0x30
   128e4:	b	122a4 <__assert_fail@plt+0x1480>
   128e8:	ldr	r8, [sp, #32]
   128ec:	mov	r4, #48	; 0x30
   128f0:	b	122a4 <__assert_fail@plt+0x1480>
   128f4:	ldr	r8, [sp, #32]
   128f8:	mov	r4, #48	; 0x30
   128fc:	b	122a4 <__assert_fail@plt+0x1480>
   12900:	mov	r8, #0
   12904:	mov	r5, r8
   12908:	b	122a4 <__assert_fail@plt+0x1480>
   1290c:	mov	r8, #0
   12910:	mov	r5, r8
   12914:	b	122a4 <__assert_fail@plt+0x1480>
   12918:	mov	r8, #0
   1291c:	mov	r5, r8
   12920:	b	122a4 <__assert_fail@plt+0x1480>
   12924:	mov	r8, #0
   12928:	mov	r5, r8
   1292c:	b	122a4 <__assert_fail@plt+0x1480>
   12930:	ldr	r3, [sp, #52]	; 0x34
   12934:	ldrb	r8, [r3, r6]
   12938:	adds	r8, r8, #0
   1293c:	movne	r8, #1
   12940:	b	123b4 <__assert_fail@plt+0x1590>
   12944:	cmp	sl, #2
   12948:	movne	r3, #0
   1294c:	moveq	r3, #1
   12950:	ldr	r1, [sp, #32]
   12954:	mov	r2, r1
   12958:	and	r2, r2, r3
   1295c:	cmp	fp, #0
   12960:	movne	r2, #0
   12964:	andeq	r2, r2, #1
   12968:	cmp	r2, #0
   1296c:	bne	12b1c <__assert_fail@plt+0x1cf8>
   12970:	eor	r2, r1, #1
   12974:	and	r3, r3, r2
   12978:	ldr	r1, [sp, #80]	; 0x50
   1297c:	tst	r1, r3
   12980:	beq	129f8 <__assert_fail@plt+0x1bd4>
   12984:	ldr	r3, [sp, #40]	; 0x28
   12988:	cmp	r3, #0
   1298c:	bne	129b4 <__assert_fail@plt+0x1b90>
   12990:	ldr	r1, [sp, #76]	; 0x4c
   12994:	clz	r3, r7
   12998:	lsr	r3, r3, #5
   1299c:	cmp	r1, #0
   129a0:	moveq	r3, #0
   129a4:	cmp	r3, #0
   129a8:	beq	129f8 <__assert_fail@plt+0x1bd4>
   129ac:	ldr	r7, [sp, #76]	; 0x4c
   129b0:	b	11a48 <__assert_fail@plt+0xc24>
   129b4:	ldr	r3, [sp, #168]	; 0xa8
   129b8:	str	r3, [sp, #16]
   129bc:	ldr	r3, [sp, #164]	; 0xa4
   129c0:	str	r3, [sp, #12]
   129c4:	ldr	r3, [sp, #160]	; 0xa0
   129c8:	str	r3, [sp, #8]
   129cc:	ldr	r3, [sp, #156]	; 0x9c
   129d0:	str	r3, [sp, #4]
   129d4:	mov	r3, #5
   129d8:	str	r3, [sp]
   129dc:	ldr	r3, [sp, #28]
   129e0:	ldr	r2, [sp, #52]	; 0x34
   129e4:	ldr	r1, [sp, #76]	; 0x4c
   129e8:	ldr	r0, [sp, #36]	; 0x24
   129ec:	bl	119e8 <__assert_fail@plt+0xbc4>
   129f0:	mov	fp, r0
   129f4:	b	12af8 <__assert_fail@plt+0x1cd4>
   129f8:	mov	sl, r7
   129fc:	ldr	r3, [sp, #72]	; 0x48
   12a00:	cmp	r3, #0
   12a04:	moveq	r2, #0
   12a08:	andne	r2, r2, #1
   12a0c:	cmp	r2, #0
   12a10:	beq	12a40 <__assert_fail@plt+0x1c1c>
   12a14:	mov	r2, r3
   12a18:	ldrb	r3, [r3]
   12a1c:	cmp	r3, #0
   12a20:	beq	12a40 <__assert_fail@plt+0x1c1c>
   12a24:	ldr	r1, [sp, #36]	; 0x24
   12a28:	cmp	sl, fp
   12a2c:	strbhi	r3, [r1, fp]
   12a30:	add	fp, fp, #1
   12a34:	ldrb	r3, [r2, #1]!
   12a38:	cmp	r3, #0
   12a3c:	bne	12a28 <__assert_fail@plt+0x1c04>
   12a40:	cmp	sl, fp
   12a44:	movhi	r3, #0
   12a48:	ldrhi	r2, [sp, #36]	; 0x24
   12a4c:	strbhi	r3, [r2, fp]
   12a50:	b	12af8 <__assert_fail@plt+0x1cd4>
   12a54:	mov	r8, sl
   12a58:	mov	sl, r7
   12a5c:	ldr	r3, [sp, #32]
   12a60:	str	r3, [sp, #48]	; 0x30
   12a64:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12a68:	mov	r8, sl
   12a6c:	mov	sl, r7
   12a70:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12a74:	mov	r8, sl
   12a78:	mov	sl, r7
   12a7c:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12a80:	andeq	r5, r1, r0, ror #8
   12a84:	andeq	r5, r1, r0, ror r4
   12a88:	andeq	r5, r1, r4, ror #8
   12a8c:	mov	r8, sl
   12a90:	mov	sl, r7
   12a94:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12a98:	mov	r8, sl
   12a9c:	mov	sl, r7
   12aa0:	ldr	r3, [sp, #48]	; 0x30
   12aa4:	cmp	r8, #2
   12aa8:	movne	r3, #0
   12aac:	andeq	r3, r3, #1
   12ab0:	cmp	r3, #0
   12ab4:	movne	r8, #4
   12ab8:	ldr	r3, [sp, #168]	; 0xa8
   12abc:	str	r3, [sp, #16]
   12ac0:	ldr	r3, [sp, #164]	; 0xa4
   12ac4:	str	r3, [sp, #12]
   12ac8:	mov	r3, #0
   12acc:	str	r3, [sp, #8]
   12ad0:	ldr	r3, [sp, #156]	; 0x9c
   12ad4:	bic	r3, r3, #2
   12ad8:	str	r3, [sp, #4]
   12adc:	str	r8, [sp]
   12ae0:	ldr	r3, [sp, #28]
   12ae4:	ldr	r2, [sp, #52]	; 0x34
   12ae8:	mov	r1, sl
   12aec:	ldr	r0, [sp, #36]	; 0x24
   12af0:	bl	119e8 <__assert_fail@plt+0xbc4>
   12af4:	mov	fp, r0
   12af8:	mov	r0, fp
   12afc:	add	sp, sp, #116	; 0x74
   12b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b04:	mov	r8, sl
   12b08:	mov	sl, r7
   12b0c:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12b10:	mov	r8, sl
   12b14:	mov	sl, r7
   12b18:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12b1c:	mov	r8, sl
   12b20:	mov	sl, r7
   12b24:	b	12aa0 <__assert_fail@plt+0x1c7c>
   12b28:	mov	r8, sl
   12b2c:	mov	sl, r7
   12b30:	b	12ab8 <__assert_fail@plt+0x1c94>
   12b34:	mov	r3, #1
   12b38:	str	r3, [sp, #32]
   12b3c:	str	r3, [sp, #48]	; 0x30
   12b40:	str	r3, [sp, #60]	; 0x3c
   12b44:	ldr	r3, [pc, #-196]	; 12a88 <__assert_fail@plt+0x1c64>
   12b48:	str	r3, [sp, #72]	; 0x48
   12b4c:	mov	fp, #0
   12b50:	mov	sl, #5
   12b54:	b	11aa4 <__assert_fail@plt+0xc80>
   12b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b5c:	sub	sp, sp, #52	; 0x34
   12b60:	mov	r5, r0
   12b64:	str	r1, [sp, #24]
   12b68:	str	r2, [sp, #28]
   12b6c:	mov	r4, r3
   12b70:	bl	10d7c <__errno_location@plt>
   12b74:	str	r0, [sp, #32]
   12b78:	ldr	r3, [r0]
   12b7c:	str	r3, [sp, #36]	; 0x24
   12b80:	ldr	r3, [pc, #396]	; 12d14 <__assert_fail@plt+0x1ef0>
   12b84:	ldr	r6, [r3]
   12b88:	cmn	r5, #-2147483647	; 0x80000001
   12b8c:	movne	r3, #0
   12b90:	moveq	r3, #1
   12b94:	orrs	r3, r3, r5, lsr #31
   12b98:	bne	12cd8 <__assert_fail@plt+0x1eb4>
   12b9c:	ldr	r3, [pc, #368]	; 12d14 <__assert_fail@plt+0x1ef0>
   12ba0:	ldr	r2, [r3, #4]
   12ba4:	cmp	r5, r2
   12ba8:	blt	12c10 <__assert_fail@plt+0x1dec>
   12bac:	str	r2, [sp, #44]	; 0x2c
   12bb0:	add	r3, r3, #8
   12bb4:	cmp	r6, r3
   12bb8:	beq	12cdc <__assert_fail@plt+0x1eb8>
   12bbc:	sub	r2, r5, r2
   12bc0:	mov	r3, #8
   12bc4:	str	r3, [sp]
   12bc8:	mvn	r3, #-2147483648	; 0x80000000
   12bcc:	add	r2, r2, #1
   12bd0:	add	r1, sp, #44	; 0x2c
   12bd4:	mov	r0, r6
   12bd8:	bl	13a5c <__assert_fail@plt+0x2c38>
   12bdc:	mov	r6, r0
   12be0:	ldr	r3, [pc, #300]	; 12d14 <__assert_fail@plt+0x1ef0>
   12be4:	str	r0, [r3]
   12be8:	ldr	r7, [pc, #292]	; 12d14 <__assert_fail@plt+0x1ef0>
   12bec:	ldr	r0, [r7, #4]
   12bf0:	ldr	r2, [sp, #44]	; 0x2c
   12bf4:	sub	r2, r2, r0
   12bf8:	lsl	r2, r2, #3
   12bfc:	mov	r1, #0
   12c00:	add	r0, r6, r0, lsl #3
   12c04:	bl	10d94 <memset@plt>
   12c08:	ldr	r3, [sp, #44]	; 0x2c
   12c0c:	str	r3, [r7, #4]
   12c10:	add	fp, r6, r5, lsl #3
   12c14:	ldr	r8, [r6, r5, lsl #3]
   12c18:	ldr	r7, [fp, #4]
   12c1c:	ldr	r9, [r4, #4]
   12c20:	orr	r9, r9, #1
   12c24:	add	sl, r4, #8
   12c28:	ldr	r3, [r4, #44]	; 0x2c
   12c2c:	str	r3, [sp, #16]
   12c30:	ldr	r3, [r4, #40]	; 0x28
   12c34:	str	r3, [sp, #12]
   12c38:	str	sl, [sp, #8]
   12c3c:	str	r9, [sp, #4]
   12c40:	ldr	r3, [r4]
   12c44:	str	r3, [sp]
   12c48:	ldr	r3, [sp, #28]
   12c4c:	ldr	r2, [sp, #24]
   12c50:	mov	r1, r8
   12c54:	mov	r0, r7
   12c58:	bl	119e8 <__assert_fail@plt+0xbc4>
   12c5c:	cmp	r8, r0
   12c60:	bhi	12cc0 <__assert_fail@plt+0x1e9c>
   12c64:	add	r8, r0, #1
   12c68:	str	r8, [r6, r5, lsl #3]
   12c6c:	ldr	r3, [pc, #164]	; 12d18 <__assert_fail@plt+0x1ef4>
   12c70:	cmp	r7, r3
   12c74:	beq	12c80 <__assert_fail@plt+0x1e5c>
   12c78:	mov	r0, r7
   12c7c:	bl	1466c <__assert_fail@plt+0x3848>
   12c80:	mov	r0, r8
   12c84:	bl	138d8 <__assert_fail@plt+0x2ab4>
   12c88:	mov	r7, r0
   12c8c:	str	r0, [fp, #4]
   12c90:	ldr	r3, [r4, #44]	; 0x2c
   12c94:	str	r3, [sp, #16]
   12c98:	ldr	r3, [r4, #40]	; 0x28
   12c9c:	str	r3, [sp, #12]
   12ca0:	str	sl, [sp, #8]
   12ca4:	str	r9, [sp, #4]
   12ca8:	ldr	r3, [r4]
   12cac:	str	r3, [sp]
   12cb0:	ldr	r3, [sp, #28]
   12cb4:	ldr	r2, [sp, #24]
   12cb8:	mov	r1, r8
   12cbc:	bl	119e8 <__assert_fail@plt+0xbc4>
   12cc0:	ldr	r3, [sp, #32]
   12cc4:	ldr	r2, [sp, #36]	; 0x24
   12cc8:	str	r2, [r3]
   12ccc:	mov	r0, r7
   12cd0:	add	sp, sp, #52	; 0x34
   12cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd8:	bl	10e18 <abort@plt>
   12cdc:	sub	r2, r5, r2
   12ce0:	mov	r3, #8
   12ce4:	str	r3, [sp]
   12ce8:	mvn	r3, #-2147483648	; 0x80000000
   12cec:	add	r2, r2, #1
   12cf0:	add	r1, sp, #44	; 0x2c
   12cf4:	mov	r0, #0
   12cf8:	bl	13a5c <__assert_fail@plt+0x2c38>
   12cfc:	mov	r6, r0
   12d00:	ldr	r3, [pc, #12]	; 12d14 <__assert_fail@plt+0x1ef0>
   12d04:	str	r0, [r3], #8
   12d08:	ldm	r3, {r0, r1}
   12d0c:	stm	r6, {r0, r1}
   12d10:	b	12be8 <__assert_fail@plt+0x1dc4>
   12d14:	andeq	r6, r2, r4, ror #1
   12d18:	andeq	r6, r2, r4, asr r1
   12d1c:	push	{r4, r5, r6, lr}
   12d20:	mov	r4, r0
   12d24:	bl	10d7c <__errno_location@plt>
   12d28:	mov	r5, r0
   12d2c:	ldr	r6, [r0]
   12d30:	cmp	r4, #0
   12d34:	ldr	r3, [pc, #20]	; 12d50 <__assert_fail@plt+0x1f2c>
   12d38:	moveq	r4, r3
   12d3c:	mov	r1, #48	; 0x30
   12d40:	mov	r0, r4
   12d44:	bl	13dc4 <__assert_fail@plt+0x2fa0>
   12d48:	str	r6, [r5]
   12d4c:	pop	{r4, r5, r6, pc}
   12d50:	andeq	r6, r2, r4, asr r2
   12d54:	subs	r3, r0, #0
   12d58:	ldr	r2, [pc, #8]	; 12d68 <__assert_fail@plt+0x1f44>
   12d5c:	moveq	r3, r2
   12d60:	ldr	r0, [r3]
   12d64:	bx	lr
   12d68:	andeq	r6, r2, r4, asr r2
   12d6c:	subs	r3, r0, #0
   12d70:	ldr	r2, [pc, #8]	; 12d80 <__assert_fail@plt+0x1f5c>
   12d74:	moveq	r3, r2
   12d78:	str	r1, [r3]
   12d7c:	bx	lr
   12d80:	andeq	r6, r2, r4, asr r2
   12d84:	push	{lr}		; (str lr, [sp, #-4]!)
   12d88:	subs	r3, r0, #0
   12d8c:	ldr	r0, [pc, #44]	; 12dc0 <__assert_fail@plt+0x1f9c>
   12d90:	moveq	r3, r0
   12d94:	add	r3, r3, #8
   12d98:	lsr	lr, r1, #5
   12d9c:	and	r1, r1, #31
   12da0:	ldr	ip, [r3, lr, lsl #2]
   12da4:	lsr	r0, ip, r1
   12da8:	eor	r2, r2, r0
   12dac:	and	r2, r2, #1
   12db0:	eor	r1, ip, r2, lsl r1
   12db4:	str	r1, [r3, lr, lsl #2]
   12db8:	and	r0, r0, #1
   12dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12dc0:	andeq	r6, r2, r4, asr r2
   12dc4:	subs	r3, r0, #0
   12dc8:	ldr	r2, [pc, #12]	; 12ddc <__assert_fail@plt+0x1fb8>
   12dcc:	moveq	r3, r2
   12dd0:	ldr	r0, [r3, #4]
   12dd4:	str	r1, [r3, #4]
   12dd8:	bx	lr
   12ddc:	andeq	r6, r2, r4, asr r2
   12de0:	subs	r3, r0, #0
   12de4:	ldr	r0, [pc, #40]	; 12e14 <__assert_fail@plt+0x1ff0>
   12de8:	moveq	r3, r0
   12dec:	mov	r0, #10
   12df0:	str	r0, [r3]
   12df4:	cmp	r2, #0
   12df8:	cmpne	r1, #0
   12dfc:	beq	12e0c <__assert_fail@plt+0x1fe8>
   12e00:	str	r1, [r3, #40]	; 0x28
   12e04:	str	r2, [r3, #44]	; 0x2c
   12e08:	bx	lr
   12e0c:	push	{r4, lr}
   12e10:	bl	10e18 <abort@plt>
   12e14:	andeq	r6, r2, r4, asr r2
   12e18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e1c:	sub	sp, sp, #24
   12e20:	mov	r7, r0
   12e24:	mov	r8, r1
   12e28:	mov	r9, r2
   12e2c:	mov	sl, r3
   12e30:	ldr	r4, [sp, #56]	; 0x38
   12e34:	cmp	r4, #0
   12e38:	ldr	r3, [pc, #84]	; 12e94 <__assert_fail@plt+0x2070>
   12e3c:	moveq	r4, r3
   12e40:	bl	10d7c <__errno_location@plt>
   12e44:	mov	r5, r0
   12e48:	ldr	r6, [r0]
   12e4c:	ldr	r3, [r4, #44]	; 0x2c
   12e50:	str	r3, [sp, #16]
   12e54:	ldr	r3, [r4, #40]	; 0x28
   12e58:	str	r3, [sp, #12]
   12e5c:	add	r3, r4, #8
   12e60:	str	r3, [sp, #8]
   12e64:	ldr	r3, [r4, #4]
   12e68:	str	r3, [sp, #4]
   12e6c:	ldr	r3, [r4]
   12e70:	str	r3, [sp]
   12e74:	mov	r3, sl
   12e78:	mov	r2, r9
   12e7c:	mov	r1, r8
   12e80:	mov	r0, r7
   12e84:	bl	119e8 <__assert_fail@plt+0xbc4>
   12e88:	str	r6, [r5]
   12e8c:	add	sp, sp, #24
   12e90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e94:	andeq	r6, r2, r4, asr r2
   12e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e9c:	sub	sp, sp, #44	; 0x2c
   12ea0:	str	r0, [sp, #28]
   12ea4:	str	r1, [sp, #32]
   12ea8:	mov	r6, r2
   12eac:	subs	r4, r3, #0
   12eb0:	ldr	r3, [pc, #172]	; 12f64 <__assert_fail@plt+0x2140>
   12eb4:	moveq	r4, r3
   12eb8:	bl	10d7c <__errno_location@plt>
   12ebc:	mov	r7, r0
   12ec0:	ldr	fp, [r0]
   12ec4:	ldr	r5, [r4, #4]
   12ec8:	cmp	r6, #0
   12ecc:	orreq	r5, r5, #1
   12ed0:	add	r9, r4, #8
   12ed4:	ldr	r3, [r4, #44]	; 0x2c
   12ed8:	str	r3, [sp, #16]
   12edc:	ldr	r3, [r4, #40]	; 0x28
   12ee0:	str	r3, [sp, #12]
   12ee4:	str	r9, [sp, #8]
   12ee8:	str	r5, [sp, #4]
   12eec:	ldr	r3, [r4]
   12ef0:	str	r3, [sp]
   12ef4:	ldr	r3, [sp, #32]
   12ef8:	ldr	r2, [sp, #28]
   12efc:	mov	r1, #0
   12f00:	mov	r0, r1
   12f04:	bl	119e8 <__assert_fail@plt+0xbc4>
   12f08:	mov	sl, r0
   12f0c:	add	r8, r0, #1
   12f10:	mov	r0, r8
   12f14:	bl	138d8 <__assert_fail@plt+0x2ab4>
   12f18:	str	r0, [sp, #36]	; 0x24
   12f1c:	ldr	r3, [r4, #44]	; 0x2c
   12f20:	str	r3, [sp, #16]
   12f24:	ldr	r3, [r4, #40]	; 0x28
   12f28:	str	r3, [sp, #12]
   12f2c:	str	r9, [sp, #8]
   12f30:	str	r5, [sp, #4]
   12f34:	ldr	r3, [r4]
   12f38:	str	r3, [sp]
   12f3c:	ldr	r3, [sp, #32]
   12f40:	ldr	r2, [sp, #28]
   12f44:	mov	r1, r8
   12f48:	bl	119e8 <__assert_fail@plt+0xbc4>
   12f4c:	str	fp, [r7]
   12f50:	cmp	r6, #0
   12f54:	strne	sl, [r6]
   12f58:	ldr	r0, [sp, #36]	; 0x24
   12f5c:	add	sp, sp, #44	; 0x2c
   12f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f64:	andeq	r6, r2, r4, asr r2
   12f68:	push	{r4, lr}
   12f6c:	mov	r3, r2
   12f70:	mov	r2, #0
   12f74:	bl	12e98 <__assert_fail@plt+0x2074>
   12f78:	pop	{r4, pc}
   12f7c:	push	{r4, r5, r6, r7, r8, lr}
   12f80:	ldr	r3, [pc, #140]	; 13014 <__assert_fail@plt+0x21f0>
   12f84:	ldr	r7, [r3]
   12f88:	ldr	r3, [r3, #4]
   12f8c:	cmp	r3, #1
   12f90:	ble	12fbc <__assert_fail@plt+0x2198>
   12f94:	mov	r5, r7
   12f98:	mov	r4, #1
   12f9c:	ldr	r6, [pc, #112]	; 13014 <__assert_fail@plt+0x21f0>
   12fa0:	ldr	r0, [r5, #12]
   12fa4:	bl	1466c <__assert_fail@plt+0x3848>
   12fa8:	add	r4, r4, #1
   12fac:	add	r5, r5, #8
   12fb0:	ldr	r3, [r6, #4]
   12fb4:	cmp	r3, r4
   12fb8:	bgt	12fa0 <__assert_fail@plt+0x217c>
   12fbc:	ldr	r0, [r7, #4]
   12fc0:	ldr	r3, [pc, #80]	; 13018 <__assert_fail@plt+0x21f4>
   12fc4:	cmp	r0, r3
   12fc8:	beq	12fe4 <__assert_fail@plt+0x21c0>
   12fcc:	bl	1466c <__assert_fail@plt+0x3848>
   12fd0:	ldr	r3, [pc, #60]	; 13014 <__assert_fail@plt+0x21f0>
   12fd4:	mov	r2, #256	; 0x100
   12fd8:	str	r2, [r3, #8]
   12fdc:	ldr	r2, [pc, #52]	; 13018 <__assert_fail@plt+0x21f4>
   12fe0:	str	r2, [r3, #12]
   12fe4:	ldr	r3, [pc, #48]	; 1301c <__assert_fail@plt+0x21f8>
   12fe8:	cmp	r7, r3
   12fec:	beq	13004 <__assert_fail@plt+0x21e0>
   12ff0:	mov	r0, r7
   12ff4:	bl	1466c <__assert_fail@plt+0x3848>
   12ff8:	ldr	r3, [pc, #20]	; 13014 <__assert_fail@plt+0x21f0>
   12ffc:	add	r2, r3, #8
   13000:	str	r2, [r3]
   13004:	mov	r2, #1
   13008:	ldr	r3, [pc, #4]	; 13014 <__assert_fail@plt+0x21f0>
   1300c:	str	r2, [r3, #4]
   13010:	pop	{r4, r5, r6, r7, r8, pc}
   13014:	andeq	r6, r2, r4, ror #1
   13018:	andeq	r6, r2, r4, asr r1
   1301c:	andeq	r6, r2, ip, ror #1
   13020:	push	{r4, lr}
   13024:	ldr	r3, [pc, #8]	; 13034 <__assert_fail@plt+0x2210>
   13028:	mvn	r2, #0
   1302c:	bl	12b58 <__assert_fail@plt+0x1d34>
   13030:	pop	{r4, pc}
   13034:	andeq	r6, r2, r4, asr r2
   13038:	push	{r4, lr}
   1303c:	ldr	r3, [pc, #4]	; 13048 <__assert_fail@plt+0x2224>
   13040:	bl	12b58 <__assert_fail@plt+0x1d34>
   13044:	pop	{r4, pc}
   13048:	andeq	r6, r2, r4, asr r2
   1304c:	push	{r4, lr}
   13050:	mov	r1, r0
   13054:	mov	r0, #0
   13058:	bl	13020 <__assert_fail@plt+0x21fc>
   1305c:	pop	{r4, pc}
   13060:	push	{r4, lr}
   13064:	mov	r2, r1
   13068:	mov	r1, r0
   1306c:	mov	r0, #0
   13070:	bl	13038 <__assert_fail@plt+0x2214>
   13074:	pop	{r4, pc}
   13078:	push	{r4, r5, lr}
   1307c:	sub	sp, sp, #52	; 0x34
   13080:	mov	r4, r0
   13084:	mov	r5, r2
   13088:	mov	r0, sp
   1308c:	bl	11880 <__assert_fail@plt+0xa5c>
   13090:	mov	r3, sp
   13094:	mvn	r2, #0
   13098:	mov	r1, r5
   1309c:	mov	r0, r4
   130a0:	bl	12b58 <__assert_fail@plt+0x1d34>
   130a4:	add	sp, sp, #52	; 0x34
   130a8:	pop	{r4, r5, pc}
   130ac:	push	{r4, r5, r6, lr}
   130b0:	sub	sp, sp, #48	; 0x30
   130b4:	mov	r4, r0
   130b8:	mov	r5, r2
   130bc:	mov	r6, r3
   130c0:	mov	r0, sp
   130c4:	bl	11880 <__assert_fail@plt+0xa5c>
   130c8:	mov	r3, sp
   130cc:	mov	r2, r6
   130d0:	mov	r1, r5
   130d4:	mov	r0, r4
   130d8:	bl	12b58 <__assert_fail@plt+0x1d34>
   130dc:	add	sp, sp, #48	; 0x30
   130e0:	pop	{r4, r5, r6, pc}
   130e4:	push	{r4, lr}
   130e8:	mov	r2, r1
   130ec:	mov	r1, r0
   130f0:	mov	r0, #0
   130f4:	bl	13078 <__assert_fail@plt+0x2254>
   130f8:	pop	{r4, pc}
   130fc:	push	{r4, lr}
   13100:	mov	r3, r2
   13104:	mov	r2, r1
   13108:	mov	r1, r0
   1310c:	mov	r0, #0
   13110:	bl	130ac <__assert_fail@plt+0x2288>
   13114:	pop	{r4, pc}
   13118:	push	{r4, r5, r6, lr}
   1311c:	sub	sp, sp, #48	; 0x30
   13120:	mov	r4, r0
   13124:	mov	r5, r1
   13128:	mov	r6, r2
   1312c:	mov	ip, sp
   13130:	ldr	lr, [pc, #64]	; 13178 <__assert_fail@plt+0x2354>
   13134:	ldm	lr!, {r0, r1, r2, r3}
   13138:	stmia	ip!, {r0, r1, r2, r3}
   1313c:	ldm	lr!, {r0, r1, r2, r3}
   13140:	stmia	ip!, {r0, r1, r2, r3}
   13144:	ldm	lr, {r0, r1, r2, r3}
   13148:	stm	ip, {r0, r1, r2, r3}
   1314c:	mov	r2, #1
   13150:	mov	r1, r6
   13154:	mov	r0, sp
   13158:	bl	12d84 <__assert_fail@plt+0x1f60>
   1315c:	mov	r3, sp
   13160:	mov	r2, r5
   13164:	mov	r1, r4
   13168:	mov	r0, #0
   1316c:	bl	12b58 <__assert_fail@plt+0x1d34>
   13170:	add	sp, sp, #48	; 0x30
   13174:	pop	{r4, r5, r6, pc}
   13178:	andeq	r6, r2, r4, asr r2
   1317c:	push	{r4, lr}
   13180:	mov	r2, r1
   13184:	mvn	r1, #0
   13188:	bl	13118 <__assert_fail@plt+0x22f4>
   1318c:	pop	{r4, pc}
   13190:	push	{r4, lr}
   13194:	mov	r1, #58	; 0x3a
   13198:	bl	1317c <__assert_fail@plt+0x2358>
   1319c:	pop	{r4, pc}
   131a0:	push	{r4, lr}
   131a4:	mov	r2, #58	; 0x3a
   131a8:	bl	13118 <__assert_fail@plt+0x22f4>
   131ac:	pop	{r4, pc}
   131b0:	push	{r4, r5, lr}
   131b4:	sub	sp, sp, #100	; 0x64
   131b8:	mov	r4, r0
   131bc:	mov	r5, r2
   131c0:	mov	r0, sp
   131c4:	bl	11880 <__assert_fail@plt+0xa5c>
   131c8:	add	lr, sp, #48	; 0x30
   131cc:	mov	ip, sp
   131d0:	ldm	ip!, {r0, r1, r2, r3}
   131d4:	stmia	lr!, {r0, r1, r2, r3}
   131d8:	ldm	ip!, {r0, r1, r2, r3}
   131dc:	stmia	lr!, {r0, r1, r2, r3}
   131e0:	ldm	ip, {r0, r1, r2, r3}
   131e4:	stm	lr, {r0, r1, r2, r3}
   131e8:	mov	r2, #1
   131ec:	mov	r1, #58	; 0x3a
   131f0:	add	r0, sp, #48	; 0x30
   131f4:	bl	12d84 <__assert_fail@plt+0x1f60>
   131f8:	add	r3, sp, #48	; 0x30
   131fc:	mvn	r2, #0
   13200:	mov	r1, r5
   13204:	mov	r0, r4
   13208:	bl	12b58 <__assert_fail@plt+0x1d34>
   1320c:	add	sp, sp, #100	; 0x64
   13210:	pop	{r4, r5, pc}
   13214:	push	{r4, r5, r6, r7, lr}
   13218:	sub	sp, sp, #52	; 0x34
   1321c:	mov	r4, r0
   13220:	mov	r6, r1
   13224:	mov	r7, r2
   13228:	mov	r5, r3
   1322c:	mov	ip, sp
   13230:	ldr	lr, [pc, #64]	; 13278 <__assert_fail@plt+0x2454>
   13234:	ldm	lr!, {r0, r1, r2, r3}
   13238:	stmia	ip!, {r0, r1, r2, r3}
   1323c:	ldm	lr!, {r0, r1, r2, r3}
   13240:	stmia	ip!, {r0, r1, r2, r3}
   13244:	ldm	lr, {r0, r1, r2, r3}
   13248:	stm	ip, {r0, r1, r2, r3}
   1324c:	mov	r2, r7
   13250:	mov	r1, r6
   13254:	mov	r0, sp
   13258:	bl	12de0 <__assert_fail@plt+0x1fbc>
   1325c:	mov	r3, sp
   13260:	ldr	r2, [sp, #72]	; 0x48
   13264:	mov	r1, r5
   13268:	mov	r0, r4
   1326c:	bl	12b58 <__assert_fail@plt+0x1d34>
   13270:	add	sp, sp, #52	; 0x34
   13274:	pop	{r4, r5, r6, r7, pc}
   13278:	andeq	r6, r2, r4, asr r2
   1327c:	push	{lr}		; (str lr, [sp, #-4]!)
   13280:	sub	sp, sp, #12
   13284:	mvn	ip, #0
   13288:	str	ip, [sp]
   1328c:	bl	13214 <__assert_fail@plt+0x23f0>
   13290:	add	sp, sp, #12
   13294:	pop	{pc}		; (ldr pc, [sp], #4)
   13298:	push	{r4, lr}
   1329c:	mov	r3, r2
   132a0:	mov	r2, r1
   132a4:	mov	r1, r0
   132a8:	mov	r0, #0
   132ac:	bl	1327c <__assert_fail@plt+0x2458>
   132b0:	pop	{r4, pc}
   132b4:	push	{lr}		; (str lr, [sp, #-4]!)
   132b8:	sub	sp, sp, #12
   132bc:	str	r3, [sp]
   132c0:	mov	r3, r2
   132c4:	mov	r2, r1
   132c8:	mov	r1, r0
   132cc:	mov	r0, #0
   132d0:	bl	13214 <__assert_fail@plt+0x23f0>
   132d4:	add	sp, sp, #12
   132d8:	pop	{pc}		; (ldr pc, [sp], #4)
   132dc:	push	{r4, lr}
   132e0:	ldr	r3, [pc, #4]	; 132ec <__assert_fail@plt+0x24c8>
   132e4:	bl	12b58 <__assert_fail@plt+0x1d34>
   132e8:	pop	{r4, pc}
   132ec:	strdeq	r6, [r2], -r4
   132f0:	push	{r4, lr}
   132f4:	mov	r2, r1
   132f8:	mov	r1, r0
   132fc:	mov	r0, #0
   13300:	bl	132dc <__assert_fail@plt+0x24b8>
   13304:	pop	{r4, pc}
   13308:	push	{r4, lr}
   1330c:	mvn	r2, #0
   13310:	bl	132dc <__assert_fail@plt+0x24b8>
   13314:	pop	{r4, pc}
   13318:	push	{r4, lr}
   1331c:	mov	r1, r0
   13320:	mov	r0, #0
   13324:	bl	13308 <__assert_fail@plt+0x24e4>
   13328:	pop	{r4, pc}
   1332c:	push	{r4, r5, r6, lr}
   13330:	sub	sp, sp, #32
   13334:	mov	r4, r0
   13338:	ldr	r5, [sp, #48]	; 0x30
   1333c:	ldr	r6, [sp, #52]	; 0x34
   13340:	cmp	r1, #0
   13344:	beq	133fc <__assert_fail@plt+0x25d8>
   13348:	str	r3, [sp, #4]
   1334c:	str	r2, [sp]
   13350:	mov	r3, r1
   13354:	ldr	r2, [pc, #940]	; 13708 <__assert_fail@plt+0x28e4>
   13358:	mov	r1, #1
   1335c:	bl	10db8 <__fprintf_chk@plt>
   13360:	mov	r2, #5
   13364:	ldr	r1, [pc, #928]	; 1370c <__assert_fail@plt+0x28e8>
   13368:	mov	r0, #0
   1336c:	bl	10c80 <dcgettext@plt>
   13370:	ldr	r3, [pc, #920]	; 13710 <__assert_fail@plt+0x28ec>
   13374:	str	r3, [sp]
   13378:	mov	r3, r0
   1337c:	ldr	r2, [pc, #912]	; 13714 <__assert_fail@plt+0x28f0>
   13380:	mov	r1, #1
   13384:	mov	r0, r4
   13388:	bl	10db8 <__fprintf_chk@plt>
   1338c:	mov	r1, r4
   13390:	mov	r0, #10
   13394:	bl	10c74 <fputc_unlocked@plt>
   13398:	mov	r2, #5
   1339c:	ldr	r1, [pc, #884]	; 13718 <__assert_fail@plt+0x28f4>
   133a0:	mov	r0, #0
   133a4:	bl	10c80 <dcgettext@plt>
   133a8:	ldr	r3, [pc, #876]	; 1371c <__assert_fail@plt+0x28f8>
   133ac:	mov	r2, r0
   133b0:	mov	r1, #1
   133b4:	mov	r0, r4
   133b8:	bl	10db8 <__fprintf_chk@plt>
   133bc:	mov	r1, r4
   133c0:	mov	r0, #10
   133c4:	bl	10c74 <fputc_unlocked@plt>
   133c8:	cmp	r6, #9
   133cc:	ldrls	pc, [pc, r6, lsl #2]
   133d0:	b	136a0 <__assert_fail@plt+0x287c>
   133d4:	andeq	r3, r1, r8, lsr r4
   133d8:	andeq	r3, r1, r4, lsl r4
   133dc:	andeq	r3, r1, r0, asr #8
   133e0:	andeq	r3, r1, r0, ror r4
   133e4:	andeq	r3, r1, r8, lsr #9
   133e8:	andeq	r3, r1, r8, ror #9
   133ec:	andeq	r3, r1, r0, lsr r5
   133f0:	andeq	r3, r1, r0, lsl #11
   133f4:	ldrdeq	r3, [r1], -r8
   133f8:	andeq	r3, r1, r8, lsr r6
   133fc:	str	r3, [sp]
   13400:	mov	r3, r2
   13404:	ldr	r2, [pc, #788]	; 13720 <__assert_fail@plt+0x28fc>
   13408:	mov	r1, #1
   1340c:	bl	10db8 <__fprintf_chk@plt>
   13410:	b	13360 <__assert_fail@plt+0x253c>
   13414:	mov	r2, #5
   13418:	ldr	r1, [pc, #772]	; 13724 <__assert_fail@plt+0x2900>
   1341c:	mov	r0, #0
   13420:	bl	10c80 <dcgettext@plt>
   13424:	ldr	r3, [r5]
   13428:	mov	r2, r0
   1342c:	mov	r1, #1
   13430:	mov	r0, r4
   13434:	bl	10db8 <__fprintf_chk@plt>
   13438:	add	sp, sp, #32
   1343c:	pop	{r4, r5, r6, pc}
   13440:	mov	r2, #5
   13444:	ldr	r1, [pc, #732]	; 13728 <__assert_fail@plt+0x2904>
   13448:	mov	r0, #0
   1344c:	bl	10c80 <dcgettext@plt>
   13450:	ldr	r3, [r5]
   13454:	ldr	r2, [r5, #4]
   13458:	str	r2, [sp]
   1345c:	mov	r2, r0
   13460:	mov	r1, #1
   13464:	mov	r0, r4
   13468:	bl	10db8 <__fprintf_chk@plt>
   1346c:	b	13438 <__assert_fail@plt+0x2614>
   13470:	mov	r2, #5
   13474:	ldr	r1, [pc, #688]	; 1372c <__assert_fail@plt+0x2908>
   13478:	mov	r0, #0
   1347c:	bl	10c80 <dcgettext@plt>
   13480:	ldr	r3, [r5]
   13484:	ldr	r2, [r5, #8]
   13488:	str	r2, [sp, #4]
   1348c:	ldr	r2, [r5, #4]
   13490:	str	r2, [sp]
   13494:	mov	r2, r0
   13498:	mov	r1, #1
   1349c:	mov	r0, r4
   134a0:	bl	10db8 <__fprintf_chk@plt>
   134a4:	b	13438 <__assert_fail@plt+0x2614>
   134a8:	mov	r2, #5
   134ac:	ldr	r1, [pc, #636]	; 13730 <__assert_fail@plt+0x290c>
   134b0:	mov	r0, #0
   134b4:	bl	10c80 <dcgettext@plt>
   134b8:	ldr	r3, [r5]
   134bc:	ldr	r2, [r5, #12]
   134c0:	str	r2, [sp, #8]
   134c4:	ldr	r2, [r5, #8]
   134c8:	str	r2, [sp, #4]
   134cc:	ldr	r2, [r5, #4]
   134d0:	str	r2, [sp]
   134d4:	mov	r2, r0
   134d8:	mov	r1, #1
   134dc:	mov	r0, r4
   134e0:	bl	10db8 <__fprintf_chk@plt>
   134e4:	b	13438 <__assert_fail@plt+0x2614>
   134e8:	mov	r2, #5
   134ec:	ldr	r1, [pc, #576]	; 13734 <__assert_fail@plt+0x2910>
   134f0:	mov	r0, #0
   134f4:	bl	10c80 <dcgettext@plt>
   134f8:	ldr	r3, [r5]
   134fc:	ldr	r2, [r5, #16]
   13500:	str	r2, [sp, #12]
   13504:	ldr	r2, [r5, #12]
   13508:	str	r2, [sp, #8]
   1350c:	ldr	r2, [r5, #8]
   13510:	str	r2, [sp, #4]
   13514:	ldr	r2, [r5, #4]
   13518:	str	r2, [sp]
   1351c:	mov	r2, r0
   13520:	mov	r1, #1
   13524:	mov	r0, r4
   13528:	bl	10db8 <__fprintf_chk@plt>
   1352c:	b	13438 <__assert_fail@plt+0x2614>
   13530:	mov	r2, #5
   13534:	ldr	r1, [pc, #508]	; 13738 <__assert_fail@plt+0x2914>
   13538:	mov	r0, #0
   1353c:	bl	10c80 <dcgettext@plt>
   13540:	ldr	r3, [r5]
   13544:	ldr	r2, [r5, #20]
   13548:	str	r2, [sp, #16]
   1354c:	ldr	r2, [r5, #16]
   13550:	str	r2, [sp, #12]
   13554:	ldr	r2, [r5, #12]
   13558:	str	r2, [sp, #8]
   1355c:	ldr	r2, [r5, #8]
   13560:	str	r2, [sp, #4]
   13564:	ldr	r2, [r5, #4]
   13568:	str	r2, [sp]
   1356c:	mov	r2, r0
   13570:	mov	r1, #1
   13574:	mov	r0, r4
   13578:	bl	10db8 <__fprintf_chk@plt>
   1357c:	b	13438 <__assert_fail@plt+0x2614>
   13580:	mov	r2, #5
   13584:	ldr	r1, [pc, #432]	; 1373c <__assert_fail@plt+0x2918>
   13588:	mov	r0, #0
   1358c:	bl	10c80 <dcgettext@plt>
   13590:	ldr	r3, [r5]
   13594:	ldr	r2, [r5, #24]
   13598:	str	r2, [sp, #20]
   1359c:	ldr	r2, [r5, #20]
   135a0:	str	r2, [sp, #16]
   135a4:	ldr	r2, [r5, #16]
   135a8:	str	r2, [sp, #12]
   135ac:	ldr	r2, [r5, #12]
   135b0:	str	r2, [sp, #8]
   135b4:	ldr	r2, [r5, #8]
   135b8:	str	r2, [sp, #4]
   135bc:	ldr	r2, [r5, #4]
   135c0:	str	r2, [sp]
   135c4:	mov	r2, r0
   135c8:	mov	r1, #1
   135cc:	mov	r0, r4
   135d0:	bl	10db8 <__fprintf_chk@plt>
   135d4:	b	13438 <__assert_fail@plt+0x2614>
   135d8:	mov	r2, #5
   135dc:	ldr	r1, [pc, #348]	; 13740 <__assert_fail@plt+0x291c>
   135e0:	mov	r0, #0
   135e4:	bl	10c80 <dcgettext@plt>
   135e8:	ldr	r3, [r5]
   135ec:	ldr	r2, [r5, #28]
   135f0:	str	r2, [sp, #24]
   135f4:	ldr	r2, [r5, #24]
   135f8:	str	r2, [sp, #20]
   135fc:	ldr	r2, [r5, #20]
   13600:	str	r2, [sp, #16]
   13604:	ldr	r2, [r5, #16]
   13608:	str	r2, [sp, #12]
   1360c:	ldr	r2, [r5, #12]
   13610:	str	r2, [sp, #8]
   13614:	ldr	r2, [r5, #8]
   13618:	str	r2, [sp, #4]
   1361c:	ldr	r2, [r5, #4]
   13620:	str	r2, [sp]
   13624:	mov	r2, r0
   13628:	mov	r1, #1
   1362c:	mov	r0, r4
   13630:	bl	10db8 <__fprintf_chk@plt>
   13634:	b	13438 <__assert_fail@plt+0x2614>
   13638:	mov	r2, #5
   1363c:	ldr	r1, [pc, #256]	; 13744 <__assert_fail@plt+0x2920>
   13640:	mov	r0, #0
   13644:	bl	10c80 <dcgettext@plt>
   13648:	ldr	r3, [r5]
   1364c:	ldr	r2, [r5, #32]
   13650:	str	r2, [sp, #28]
   13654:	ldr	r2, [r5, #28]
   13658:	str	r2, [sp, #24]
   1365c:	ldr	r2, [r5, #24]
   13660:	str	r2, [sp, #20]
   13664:	ldr	r2, [r5, #20]
   13668:	str	r2, [sp, #16]
   1366c:	ldr	r2, [r5, #16]
   13670:	str	r2, [sp, #12]
   13674:	ldr	r2, [r5, #12]
   13678:	str	r2, [sp, #8]
   1367c:	ldr	r2, [r5, #8]
   13680:	str	r2, [sp, #4]
   13684:	ldr	r2, [r5, #4]
   13688:	str	r2, [sp]
   1368c:	mov	r2, r0
   13690:	mov	r1, #1
   13694:	mov	r0, r4
   13698:	bl	10db8 <__fprintf_chk@plt>
   1369c:	b	13438 <__assert_fail@plt+0x2614>
   136a0:	mov	r2, #5
   136a4:	ldr	r1, [pc, #156]	; 13748 <__assert_fail@plt+0x2924>
   136a8:	mov	r0, #0
   136ac:	bl	10c80 <dcgettext@plt>
   136b0:	ldr	r3, [r5]
   136b4:	ldr	r2, [r5, #32]
   136b8:	str	r2, [sp, #28]
   136bc:	ldr	r2, [r5, #28]
   136c0:	str	r2, [sp, #24]
   136c4:	ldr	r2, [r5, #24]
   136c8:	str	r2, [sp, #20]
   136cc:	ldr	r2, [r5, #20]
   136d0:	str	r2, [sp, #16]
   136d4:	ldr	r2, [r5, #16]
   136d8:	str	r2, [sp, #12]
   136dc:	ldr	r2, [r5, #12]
   136e0:	str	r2, [sp, #8]
   136e4:	ldr	r2, [r5, #8]
   136e8:	str	r2, [sp, #4]
   136ec:	ldr	r2, [r5, #4]
   136f0:	str	r2, [sp]
   136f4:	mov	r2, r0
   136f8:	mov	r1, #1
   136fc:	mov	r0, r4
   13700:	bl	10db8 <__fprintf_chk@plt>
   13704:	b	13438 <__assert_fail@plt+0x2614>
   13708:	ldrdeq	r5, [r1], -r8
   1370c:	andeq	r5, r1, ip, ror #9
   13710:	andeq	r0, r0, r6, ror #15
   13714:	andeq	r5, r1, r4, asr #15
   13718:	strdeq	r5, [r1], -r0
   1371c:	muleq	r1, ip, r5
   13720:	andeq	r5, r1, r4, ror #9
   13724:	andeq	r5, r1, r0, asr #11
   13728:	ldrdeq	r5, [r1], -r0
   1372c:	andeq	r5, r1, r8, ror #11
   13730:	andeq	r5, r1, r4, lsl #12
   13734:	andeq	r5, r1, r4, lsr #12
   13738:	andeq	r5, r1, r8, asr #12
   1373c:	andeq	r5, r1, r0, ror r6
   13740:	muleq	r1, ip, r6
   13744:	andeq	r5, r1, ip, asr #13
   13748:	andeq	r5, r1, r0, lsl #14
   1374c:	push	{r4, r5, lr}
   13750:	sub	sp, sp, #12
   13754:	ldr	r5, [sp, #24]
   13758:	ldr	ip, [r5]
   1375c:	cmp	ip, #0
   13760:	beq	13790 <__assert_fail@plt+0x296c>
   13764:	mov	lr, r5
   13768:	mov	ip, #0
   1376c:	add	ip, ip, #1
   13770:	ldr	r4, [lr, #4]!
   13774:	cmp	r4, #0
   13778:	bne	1376c <__assert_fail@plt+0x2948>
   1377c:	str	ip, [sp, #4]
   13780:	str	r5, [sp]
   13784:	bl	1332c <__assert_fail@plt+0x2508>
   13788:	add	sp, sp, #12
   1378c:	pop	{r4, r5, pc}
   13790:	mov	ip, #0
   13794:	b	1377c <__assert_fail@plt+0x2958>
   13798:	push	{r4, r5, lr}
   1379c:	sub	sp, sp, #52	; 0x34
   137a0:	ldr	r4, [sp, #64]	; 0x40
   137a4:	sub	r4, r4, #4
   137a8:	add	r5, sp, #4
   137ac:	mov	ip, #0
   137b0:	ldr	lr, [r4, #4]!
   137b4:	str	lr, [r5, #4]!
   137b8:	cmp	lr, #0
   137bc:	beq	137cc <__assert_fail@plt+0x29a8>
   137c0:	add	ip, ip, #1
   137c4:	cmp	ip, #10
   137c8:	bne	137b0 <__assert_fail@plt+0x298c>
   137cc:	str	ip, [sp, #4]
   137d0:	add	ip, sp, #8
   137d4:	str	ip, [sp]
   137d8:	bl	1332c <__assert_fail@plt+0x2508>
   137dc:	add	sp, sp, #52	; 0x34
   137e0:	pop	{r4, r5, pc}
   137e4:	push	{r3}		; (str r3, [sp, #-4]!)
   137e8:	push	{lr}		; (str lr, [sp, #-4]!)
   137ec:	sub	sp, sp, #16
   137f0:	add	r3, sp, #24
   137f4:	str	r3, [sp, #12]
   137f8:	str	r3, [sp]
   137fc:	ldr	r3, [sp, #20]
   13800:	bl	13798 <__assert_fail@plt+0x2974>
   13804:	add	sp, sp, #16
   13808:	pop	{lr}		; (ldr lr, [sp], #4)
   1380c:	add	sp, sp, #4
   13810:	bx	lr
   13814:	push	{r4, lr}
   13818:	ldr	r3, [pc, #112]	; 13890 <__assert_fail@plt+0x2a6c>
   1381c:	ldr	r1, [r3]
   13820:	mov	r0, #10
   13824:	bl	10c74 <fputc_unlocked@plt>
   13828:	mov	r2, #5
   1382c:	ldr	r1, [pc, #96]	; 13894 <__assert_fail@plt+0x2a70>
   13830:	mov	r0, #0
   13834:	bl	10c80 <dcgettext@plt>
   13838:	ldr	r2, [pc, #88]	; 13898 <__assert_fail@plt+0x2a74>
   1383c:	mov	r1, r0
   13840:	mov	r0, #1
   13844:	bl	10da0 <__printf_chk@plt>
   13848:	mov	r2, #5
   1384c:	ldr	r1, [pc, #72]	; 1389c <__assert_fail@plt+0x2a78>
   13850:	mov	r0, #0
   13854:	bl	10c80 <dcgettext@plt>
   13858:	ldr	r3, [pc, #64]	; 138a0 <__assert_fail@plt+0x2a7c>
   1385c:	ldr	r2, [pc, #64]	; 138a4 <__assert_fail@plt+0x2a80>
   13860:	mov	r1, r0
   13864:	mov	r0, #1
   13868:	bl	10da0 <__printf_chk@plt>
   1386c:	mov	r2, #5
   13870:	ldr	r1, [pc, #48]	; 138a8 <__assert_fail@plt+0x2a84>
   13874:	mov	r0, #0
   13878:	bl	10c80 <dcgettext@plt>
   1387c:	ldr	r2, [pc, #40]	; 138ac <__assert_fail@plt+0x2a88>
   13880:	mov	r1, r0
   13884:	mov	r0, #1
   13888:	bl	10da0 <__printf_chk@plt>
   1388c:	pop	{r4, pc}
   13890:	andeq	r6, r2, ip, lsr r1
   13894:	andeq	r5, r1, ip, lsr r7
   13898:	andeq	r5, r1, r0, asr r7
   1389c:	andeq	r5, r1, r8, ror #14
   138a0:			; <UNDEFINED> instruction: 0x000151b0
   138a4:	ldrdeq	r5, [r1], -r8
   138a8:	andeq	r5, r1, ip, ror r7
   138ac:	andeq	r5, r1, r4, lsr #15
   138b0:	push	{r4, lr}
   138b4:	bl	14468 <__assert_fail@plt+0x3644>
   138b8:	cmp	r0, #0
   138bc:	popne	{r4, pc}
   138c0:	bl	13e54 <__assert_fail@plt+0x3030>
   138c4:	push	{r4, lr}
   138c8:	bl	14468 <__assert_fail@plt+0x3644>
   138cc:	cmp	r0, #0
   138d0:	popne	{r4, pc}
   138d4:	bl	13e54 <__assert_fail@plt+0x3030>
   138d8:	push	{r4, lr}
   138dc:	bl	138b0 <__assert_fail@plt+0x2a8c>
   138e0:	pop	{r4, pc}
   138e4:	push	{r4, r5, r6, lr}
   138e8:	mov	r5, r0
   138ec:	mov	r4, r1
   138f0:	bl	14498 <__assert_fail@plt+0x3674>
   138f4:	cmp	r0, #0
   138f8:	popne	{r4, r5, r6, pc}
   138fc:	adds	r4, r4, #0
   13900:	movne	r4, #1
   13904:	cmp	r5, #0
   13908:	orreq	r4, r4, #1
   1390c:	cmp	r4, #0
   13910:	popeq	{r4, r5, r6, pc}
   13914:	bl	13e54 <__assert_fail@plt+0x3030>
   13918:	push	{r4, lr}
   1391c:	cmp	r1, #0
   13920:	orreq	r1, r1, #1
   13924:	bl	14498 <__assert_fail@plt+0x3674>
   13928:	cmp	r0, #0
   1392c:	popne	{r4, pc}
   13930:	bl	13e54 <__assert_fail@plt+0x3030>
   13934:	push	{r4, r5, r6, lr}
   13938:	mov	r6, r0
   1393c:	mov	r5, r1
   13940:	mov	r4, r2
   13944:	bl	147f8 <__assert_fail@plt+0x39d4>
   13948:	cmp	r0, #0
   1394c:	popne	{r4, r5, r6, pc}
   13950:	cmp	r6, #0
   13954:	beq	13964 <__assert_fail@plt+0x2b40>
   13958:	cmp	r5, #0
   1395c:	cmpne	r4, #0
   13960:	popeq	{r4, r5, r6, pc}
   13964:	bl	13e54 <__assert_fail@plt+0x3030>
   13968:	push	{r4, lr}
   1396c:	bl	13934 <__assert_fail@plt+0x2b10>
   13970:	pop	{r4, pc}
   13974:	push	{r4, lr}
   13978:	mov	ip, r1
   1397c:	mov	r3, r2
   13980:	cmp	r2, #0
   13984:	cmpne	r1, #0
   13988:	moveq	r3, #1
   1398c:	moveq	ip, r3
   13990:	mov	r2, r3
   13994:	mov	r1, ip
   13998:	bl	147f8 <__assert_fail@plt+0x39d4>
   1399c:	cmp	r0, #0
   139a0:	popne	{r4, pc}
   139a4:	bl	13e54 <__assert_fail@plt+0x3030>
   139a8:	push	{r4, lr}
   139ac:	mov	r2, r1
   139b0:	mov	r1, r0
   139b4:	mov	r0, #0
   139b8:	bl	13934 <__assert_fail@plt+0x2b10>
   139bc:	pop	{r4, pc}
   139c0:	push	{r4, lr}
   139c4:	mov	r2, r1
   139c8:	mov	r1, r0
   139cc:	mov	r0, #0
   139d0:	bl	13974 <__assert_fail@plt+0x2b50>
   139d4:	pop	{r4, pc}
   139d8:	push	{r4, r5, r6, r7, r8, lr}
   139dc:	mov	r5, r1
   139e0:	mov	r6, r2
   139e4:	ldr	r4, [r1]
   139e8:	subs	r7, r0, #0
   139ec:	beq	13a08 <__assert_fail@plt+0x2be4>
   139f0:	lsr	r2, r4, #1
   139f4:	add	r3, r2, #1
   139f8:	mvn	r3, r3
   139fc:	cmp	r4, r3
   13a00:	bls	13a2c <__assert_fail@plt+0x2c08>
   13a04:	bl	13e54 <__assert_fail@plt+0x3030>
   13a08:	cmp	r4, #0
   13a0c:	bne	13a34 <__assert_fail@plt+0x2c10>
   13a10:	mov	r1, r2
   13a14:	mov	r0, #64	; 0x40
   13a18:	bl	1494c <__assert_fail@plt+0x3b28>
   13a1c:	cmp	r0, #0
   13a20:	movne	r4, r0
   13a24:	addeq	r4, r0, #1
   13a28:	b	13a34 <__assert_fail@plt+0x2c10>
   13a2c:	add	r4, r4, #1
   13a30:	add	r4, r4, r2
   13a34:	mov	r2, r6
   13a38:	mov	r1, r4
   13a3c:	mov	r0, r7
   13a40:	bl	13934 <__assert_fail@plt+0x2b10>
   13a44:	str	r4, [r5]
   13a48:	pop	{r4, r5, r6, r7, r8, pc}
   13a4c:	push	{r4, lr}
   13a50:	mov	r2, #1
   13a54:	bl	139d8 <__assert_fail@plt+0x2bb4>
   13a58:	pop	{r4, pc}
   13a5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a60:	sub	sp, sp, #12
   13a64:	mov	fp, r0
   13a68:	mov	sl, r1
   13a6c:	mov	r9, r2
   13a70:	mov	r7, r3
   13a74:	ldr	r6, [sp, #48]	; 0x30
   13a78:	ldr	r5, [r1]
   13a7c:	asrs	r4, r5, #1
   13a80:	bmi	13bdc <__assert_fail@plt+0x2db8>
   13a84:	cmp	r5, #0
   13a88:	blt	13bf0 <__assert_fail@plt+0x2dcc>
   13a8c:	mvn	r3, #-2147483648	; 0x80000000
   13a90:	sub	r3, r3, r4
   13a94:	cmp	r5, r3
   13a98:	movle	r3, #0
   13a9c:	movgt	r3, #1
   13aa0:	cmp	r3, #0
   13aa4:	addeq	r4, r4, r5
   13aa8:	mvnne	r4, #-2147483648	; 0x80000000
   13aac:	mvn	r8, r7
   13ab0:	lsr	r8, r8, #31
   13ab4:	cmp	r7, r4
   13ab8:	movge	r3, #0
   13abc:	andlt	r3, r8, #1
   13ac0:	cmp	r3, #0
   13ac4:	movne	r4, r7
   13ac8:	cmp	r6, #0
   13acc:	blt	13c04 <__assert_fail@plt+0x2de0>
   13ad0:	cmp	r6, #0
   13ad4:	beq	13cb0 <__assert_fail@plt+0x2e8c>
   13ad8:	cmp	r4, #0
   13adc:	blt	13c60 <__assert_fail@plt+0x2e3c>
   13ae0:	mov	r1, r6
   13ae4:	mvn	r0, #-2147483648	; 0x80000000
   13ae8:	bl	14b58 <__assert_fail@plt+0x3d34>
   13aec:	cmp	r0, r4
   13af0:	movge	r0, #0
   13af4:	movlt	r0, #1
   13af8:	cmp	r0, #0
   13afc:	mvnne	r3, #-2147483648	; 0x80000000
   13b00:	strne	r3, [sp, #4]
   13b04:	beq	13c98 <__assert_fail@plt+0x2e74>
   13b08:	mov	r1, r6
   13b0c:	ldr	r0, [sp, #4]
   13b10:	bl	14b58 <__assert_fail@plt+0x3d34>
   13b14:	mov	r4, r0
   13b18:	mov	r1, r6
   13b1c:	ldr	r0, [sp, #4]
   13b20:	bl	14d78 <__assert_fail@plt+0x3f54>
   13b24:	ldr	r3, [sp, #4]
   13b28:	sub	r1, r3, r1
   13b2c:	cmp	fp, #0
   13b30:	moveq	r3, #0
   13b34:	streq	r3, [sl]
   13b38:	sub	r3, r4, r5
   13b3c:	cmp	r3, r9
   13b40:	bge	13bc8 <__assert_fail@plt+0x2da4>
   13b44:	cmp	r9, #0
   13b48:	blt	13cbc <__assert_fail@plt+0x2e98>
   13b4c:	cmp	r5, #0
   13b50:	blt	13cd0 <__assert_fail@plt+0x2eac>
   13b54:	mvn	r3, #-2147483648	; 0x80000000
   13b58:	sub	r3, r3, r9
   13b5c:	cmp	r5, r3
   13b60:	movle	r3, #0
   13b64:	movgt	r3, #1
   13b68:	cmp	r3, #0
   13b6c:	bne	13d78 <__assert_fail@plt+0x2f54>
   13b70:	add	r5, r5, r9
   13b74:	mov	r4, r5
   13b78:	cmp	r7, r5
   13b7c:	movge	r7, #0
   13b80:	andlt	r7, r8, #1
   13b84:	cmp	r7, #0
   13b88:	bne	13d78 <__assert_fail@plt+0x2f54>
   13b8c:	cmp	r6, #0
   13b90:	blt	13ce4 <__assert_fail@plt+0x2ec0>
   13b94:	cmp	r6, #0
   13b98:	beq	13bc4 <__assert_fail@plt+0x2da0>
   13b9c:	cmp	r5, #0
   13ba0:	blt	13d40 <__assert_fail@plt+0x2f1c>
   13ba4:	mov	r1, r6
   13ba8:	mvn	r0, #-2147483648	; 0x80000000
   13bac:	bl	14b58 <__assert_fail@plt+0x3d34>
   13bb0:	cmp	r5, r0
   13bb4:	movle	r0, #0
   13bb8:	movgt	r0, #1
   13bbc:	cmp	r0, #0
   13bc0:	bne	13d78 <__assert_fail@plt+0x2f54>
   13bc4:	mul	r1, r5, r6
   13bc8:	mov	r0, fp
   13bcc:	bl	138e4 <__assert_fail@plt+0x2ac0>
   13bd0:	str	r4, [sl]
   13bd4:	add	sp, sp, #12
   13bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bdc:	rsb	r3, r4, #-2147483648	; 0x80000000
   13be0:	cmp	r5, r3
   13be4:	movge	r3, #0
   13be8:	movlt	r3, #1
   13bec:	b	13aa0 <__assert_fail@plt+0x2c7c>
   13bf0:	rsb	r3, r5, #-2147483648	; 0x80000000
   13bf4:	cmp	r4, r3
   13bf8:	movge	r3, #0
   13bfc:	movlt	r3, #1
   13c00:	b	13aa0 <__assert_fail@plt+0x2c7c>
   13c04:	cmp	r4, #0
   13c08:	blt	13c30 <__assert_fail@plt+0x2e0c>
   13c0c:	cmn	r6, #1
   13c10:	beq	13c4c <__assert_fail@plt+0x2e28>
   13c14:	mov	r1, r6
   13c18:	mov	r0, #-2147483648	; 0x80000000
   13c1c:	bl	14b58 <__assert_fail@plt+0x3d34>
   13c20:	cmp	r0, r4
   13c24:	movge	r0, #0
   13c28:	movlt	r0, #1
   13c2c:	b	13af8 <__assert_fail@plt+0x2cd4>
   13c30:	mov	r1, r6
   13c34:	mvn	r0, #-2147483648	; 0x80000000
   13c38:	bl	14b58 <__assert_fail@plt+0x3d34>
   13c3c:	cmp	r0, r4
   13c40:	movle	r0, #0
   13c44:	movgt	r0, #1
   13c48:	b	13af8 <__assert_fail@plt+0x2cd4>
   13c4c:	add	r0, r4, #-2147483648	; 0x80000000
   13c50:	cmp	r0, #0
   13c54:	movle	r0, #0
   13c58:	movgt	r0, #1
   13c5c:	b	13af8 <__assert_fail@plt+0x2cd4>
   13c60:	cmn	r4, #1
   13c64:	beq	13c84 <__assert_fail@plt+0x2e60>
   13c68:	mov	r1, r4
   13c6c:	mov	r0, #-2147483648	; 0x80000000
   13c70:	bl	14b58 <__assert_fail@plt+0x3d34>
   13c74:	cmp	r6, r0
   13c78:	movle	r0, #0
   13c7c:	movgt	r0, #1
   13c80:	b	13af8 <__assert_fail@plt+0x2cd4>
   13c84:	add	r0, r6, #-2147483648	; 0x80000000
   13c88:	cmp	r0, #0
   13c8c:	movle	r0, #0
   13c90:	movgt	r0, #1
   13c94:	b	13af8 <__assert_fail@plt+0x2cd4>
   13c98:	mul	r1, r6, r4
   13c9c:	cmp	r1, #63	; 0x3f
   13ca0:	movle	r3, #64	; 0x40
   13ca4:	strle	r3, [sp, #4]
   13ca8:	bgt	13b2c <__assert_fail@plt+0x2d08>
   13cac:	b	13b08 <__assert_fail@plt+0x2ce4>
   13cb0:	mov	r3, #64	; 0x40
   13cb4:	str	r3, [sp, #4]
   13cb8:	b	13b08 <__assert_fail@plt+0x2ce4>
   13cbc:	rsb	r3, r9, #-2147483648	; 0x80000000
   13cc0:	cmp	r5, r3
   13cc4:	movge	r3, #0
   13cc8:	movlt	r3, #1
   13ccc:	b	13b68 <__assert_fail@plt+0x2d44>
   13cd0:	rsb	r3, r5, #-2147483648	; 0x80000000
   13cd4:	cmp	r9, r3
   13cd8:	movge	r3, #0
   13cdc:	movlt	r3, #1
   13ce0:	b	13b68 <__assert_fail@plt+0x2d44>
   13ce4:	cmp	r5, #0
   13ce8:	blt	13d10 <__assert_fail@plt+0x2eec>
   13cec:	cmn	r6, #1
   13cf0:	beq	13d2c <__assert_fail@plt+0x2f08>
   13cf4:	mov	r1, r6
   13cf8:	mov	r0, #-2147483648	; 0x80000000
   13cfc:	bl	14b58 <__assert_fail@plt+0x3d34>
   13d00:	cmp	r5, r0
   13d04:	movle	r0, #0
   13d08:	movgt	r0, #1
   13d0c:	b	13bbc <__assert_fail@plt+0x2d98>
   13d10:	mov	r1, r6
   13d14:	mvn	r0, #-2147483648	; 0x80000000
   13d18:	bl	14b58 <__assert_fail@plt+0x3d34>
   13d1c:	cmp	r5, r0
   13d20:	movge	r0, #0
   13d24:	movlt	r0, #1
   13d28:	b	13bbc <__assert_fail@plt+0x2d98>
   13d2c:	add	r0, r5, #-2147483648	; 0x80000000
   13d30:	cmp	r0, #0
   13d34:	movle	r0, #0
   13d38:	movgt	r0, #1
   13d3c:	b	13bbc <__assert_fail@plt+0x2d98>
   13d40:	cmn	r5, #1
   13d44:	beq	13d64 <__assert_fail@plt+0x2f40>
   13d48:	mov	r1, r5
   13d4c:	mov	r0, #-2147483648	; 0x80000000
   13d50:	bl	14b58 <__assert_fail@plt+0x3d34>
   13d54:	cmp	r6, r0
   13d58:	movle	r0, #0
   13d5c:	movgt	r0, #1
   13d60:	b	13bbc <__assert_fail@plt+0x2d98>
   13d64:	add	r0, r6, #-2147483648	; 0x80000000
   13d68:	cmp	r0, #0
   13d6c:	movle	r0, #0
   13d70:	movgt	r0, #1
   13d74:	b	13bbc <__assert_fail@plt+0x2d98>
   13d78:	bl	13e54 <__assert_fail@plt+0x3030>
   13d7c:	push	{r4, lr}
   13d80:	bl	14418 <__assert_fail@plt+0x35f4>
   13d84:	cmp	r0, #0
   13d88:	popne	{r4, pc}
   13d8c:	bl	13e54 <__assert_fail@plt+0x3030>
   13d90:	push	{r4, lr}
   13d94:	mov	r1, #1
   13d98:	bl	13d7c <__assert_fail@plt+0x2f58>
   13d9c:	pop	{r4, pc}
   13da0:	push	{r4, lr}
   13da4:	bl	14418 <__assert_fail@plt+0x35f4>
   13da8:	cmp	r0, #0
   13dac:	popne	{r4, pc}
   13db0:	bl	13e54 <__assert_fail@plt+0x3030>
   13db4:	push	{r4, lr}
   13db8:	mov	r1, #1
   13dbc:	bl	13da0 <__assert_fail@plt+0x2f7c>
   13dc0:	pop	{r4, pc}
   13dc4:	push	{r4, r5, r6, lr}
   13dc8:	mov	r5, r0
   13dcc:	mov	r4, r1
   13dd0:	mov	r0, r1
   13dd4:	bl	138b0 <__assert_fail@plt+0x2a8c>
   13dd8:	mov	r2, r4
   13ddc:	mov	r1, r5
   13de0:	bl	10c44 <memcpy@plt>
   13de4:	pop	{r4, r5, r6, pc}
   13de8:	push	{r4, r5, r6, lr}
   13dec:	mov	r5, r0
   13df0:	mov	r4, r1
   13df4:	mov	r0, r1
   13df8:	bl	138c4 <__assert_fail@plt+0x2aa0>
   13dfc:	mov	r2, r4
   13e00:	mov	r1, r5
   13e04:	bl	10c44 <memcpy@plt>
   13e08:	pop	{r4, r5, r6, pc}
   13e0c:	push	{r4, r5, r6, lr}
   13e10:	mov	r5, r0
   13e14:	mov	r4, r1
   13e18:	add	r0, r1, #1
   13e1c:	bl	138c4 <__assert_fail@plt+0x2aa0>
   13e20:	mov	r2, #0
   13e24:	strb	r2, [r0, r4]
   13e28:	mov	r2, r4
   13e2c:	mov	r1, r5
   13e30:	bl	10c44 <memcpy@plt>
   13e34:	pop	{r4, r5, r6, pc}
   13e38:	push	{r4, lr}
   13e3c:	mov	r4, r0
   13e40:	bl	10d64 <strlen@plt>
   13e44:	add	r1, r0, #1
   13e48:	mov	r0, r4
   13e4c:	bl	13dc4 <__assert_fail@plt+0x2fa0>
   13e50:	pop	{r4, pc}
   13e54:	push	{r4, lr}
   13e58:	ldr	r3, [pc, #40]	; 13e88 <__assert_fail@plt+0x3064>
   13e5c:	ldr	r4, [r3]
   13e60:	mov	r2, #5
   13e64:	ldr	r1, [pc, #32]	; 13e8c <__assert_fail@plt+0x3068>
   13e68:	mov	r0, #0
   13e6c:	bl	10c80 <dcgettext@plt>
   13e70:	mov	r3, r0
   13e74:	ldr	r2, [pc, #20]	; 13e90 <__assert_fail@plt+0x306c>
   13e78:	mov	r1, #0
   13e7c:	mov	r0, r4
   13e80:	bl	10cf8 <error@plt>
   13e84:	bl	10e18 <abort@plt>
   13e88:	andeq	r6, r2, r0, ror #1
   13e8c:	strdeq	r5, [r1], -r4
   13e90:			; <UNDEFINED> instruction: 0x000153bc
   13e94:	push	{r4, r5, r6, lr}
   13e98:	mov	r5, r0
   13e9c:	subs	r6, r1, #0
   13ea0:	blt	13ee8 <__assert_fail@plt+0x30c4>
   13ea4:	cmp	r6, #0
   13ea8:	beq	13f3c <__assert_fail@plt+0x3118>
   13eac:	ldr	r4, [r0]
   13eb0:	cmp	r4, #0
   13eb4:	blt	13f64 <__assert_fail@plt+0x3140>
   13eb8:	mov	r1, r6
   13ebc:	mvn	r0, #-2147483648	; 0x80000000
   13ec0:	bl	14b58 <__assert_fail@plt+0x3d34>
   13ec4:	cmp	r4, r0
   13ec8:	movle	r0, #0
   13ecc:	movgt	r0, #1
   13ed0:	cmp	r0, #0
   13ed4:	mvnne	r3, #-2147483648	; 0x80000000
   13ed8:	beq	13f3c <__assert_fail@plt+0x3118>
   13edc:	str	r3, [r5]
   13ee0:	mov	r0, #1
   13ee4:	pop	{r4, r5, r6, pc}
   13ee8:	ldr	r4, [r0]
   13eec:	cmp	r4, #0
   13ef0:	blt	13f18 <__assert_fail@plt+0x30f4>
   13ef4:	cmn	r6, #1
   13ef8:	beq	13f50 <__assert_fail@plt+0x312c>
   13efc:	mov	r1, r6
   13f00:	mov	r0, #-2147483648	; 0x80000000
   13f04:	bl	14b58 <__assert_fail@plt+0x3d34>
   13f08:	cmp	r4, r0
   13f0c:	movle	r0, #0
   13f10:	movgt	r0, #1
   13f14:	b	13ed0 <__assert_fail@plt+0x30ac>
   13f18:	mov	r1, r6
   13f1c:	mvn	r0, #-2147483648	; 0x80000000
   13f20:	bl	14b58 <__assert_fail@plt+0x3d34>
   13f24:	cmp	r4, r0
   13f28:	movge	r0, #0
   13f2c:	movlt	r0, #1
   13f30:	cmp	r0, #0
   13f34:	movne	r3, #-2147483648	; 0x80000000
   13f38:	bne	13edc <__assert_fail@plt+0x30b8>
   13f3c:	ldr	r3, [r5]
   13f40:	mul	r6, r6, r3
   13f44:	str	r6, [r5]
   13f48:	mov	r0, #0
   13f4c:	pop	{r4, r5, r6, pc}
   13f50:	add	r0, r4, #-2147483648	; 0x80000000
   13f54:	cmp	r0, #0
   13f58:	movle	r0, #0
   13f5c:	movgt	r0, #1
   13f60:	b	13ed0 <__assert_fail@plt+0x30ac>
   13f64:	cmn	r4, #1
   13f68:	beq	13f88 <__assert_fail@plt+0x3164>
   13f6c:	mov	r1, r4
   13f70:	mov	r0, #-2147483648	; 0x80000000
   13f74:	bl	14b58 <__assert_fail@plt+0x3d34>
   13f78:	cmp	r6, r0
   13f7c:	movle	r0, #0
   13f80:	movgt	r0, #1
   13f84:	b	13f30 <__assert_fail@plt+0x310c>
   13f88:	add	r0, r6, #-2147483648	; 0x80000000
   13f8c:	cmp	r0, #0
   13f90:	movle	r0, #0
   13f94:	movgt	r0, #1
   13f98:	b	13f30 <__assert_fail@plt+0x310c>
   13f9c:	push	{r4, r5, r6, r7, r8, lr}
   13fa0:	subs	r4, r2, #0
   13fa4:	beq	13fd4 <__assert_fail@plt+0x31b0>
   13fa8:	mov	r7, r1
   13fac:	mov	r6, r0
   13fb0:	mov	r5, #0
   13fb4:	mov	r1, r7
   13fb8:	mov	r0, r6
   13fbc:	bl	13e94 <__assert_fail@plt+0x3070>
   13fc0:	orr	r5, r5, r0
   13fc4:	subs	r4, r4, #1
   13fc8:	bne	13fb4 <__assert_fail@plt+0x3190>
   13fcc:	mov	r0, r5
   13fd0:	pop	{r4, r5, r6, r7, r8, pc}
   13fd4:	mov	r5, #0
   13fd8:	b	13fcc <__assert_fail@plt+0x31a8>
   13fdc:	push	{r4, r5, r6, r7, r8, lr}
   13fe0:	sub	sp, sp, #8
   13fe4:	cmp	r2, #36	; 0x24
   13fe8:	bhi	14054 <__assert_fail@plt+0x3230>
   13fec:	mov	r6, r0
   13ff0:	mov	r4, r1
   13ff4:	mov	r5, r2
   13ff8:	mov	r8, r3
   13ffc:	cmp	r1, #0
   14000:	addeq	r4, sp, #4
   14004:	bl	10d7c <__errno_location@plt>
   14008:	mov	r7, r0
   1400c:	mov	r3, #0
   14010:	str	r3, [r0]
   14014:	mov	r2, r5
   14018:	mov	r1, r4
   1401c:	mov	r0, r6
   14020:	bl	10c14 <strtol@plt>
   14024:	str	r0, [sp]
   14028:	ldr	r5, [r4]
   1402c:	cmp	r6, r5
   14030:	beq	14068 <__assert_fail@plt+0x3244>
   14034:	ldr	r3, [r7]
   14038:	cmp	r3, #0
   1403c:	beq	140ac <__assert_fail@plt+0x3288>
   14040:	cmp	r3, #34	; 0x22
   14044:	moveq	r6, #1
   14048:	beq	140b0 <__assert_fail@plt+0x328c>
   1404c:	mov	r6, #4
   14050:	b	14400 <__assert_fail@plt+0x35dc>
   14054:	ldr	r3, [pc, #944]	; 1440c <__assert_fail@plt+0x35e8>
   14058:	mov	r2, #85	; 0x55
   1405c:	ldr	r1, [pc, #940]	; 14410 <__assert_fail@plt+0x35ec>
   14060:	ldr	r0, [pc, #940]	; 14414 <__assert_fail@plt+0x35f0>
   14064:	bl	10e24 <__assert_fail@plt>
   14068:	ldr	r3, [sp, #32]
   1406c:	cmp	r3, #0
   14070:	moveq	r6, #4
   14074:	beq	14400 <__assert_fail@plt+0x35dc>
   14078:	ldrb	r1, [r5]
   1407c:	cmp	r1, #0
   14080:	moveq	r6, #4
   14084:	beq	14400 <__assert_fail@plt+0x35dc>
   14088:	mov	r0, r3
   1408c:	bl	10d70 <strchr@plt>
   14090:	cmp	r0, #0
   14094:	moveq	r6, #4
   14098:	beq	14400 <__assert_fail@plt+0x35dc>
   1409c:	mov	r3, #1
   140a0:	str	r3, [sp]
   140a4:	mov	r6, #0
   140a8:	b	140c0 <__assert_fail@plt+0x329c>
   140ac:	mov	r6, #0
   140b0:	ldr	r3, [sp, #32]
   140b4:	cmp	r3, #0
   140b8:	streq	r0, [r8]
   140bc:	beq	14400 <__assert_fail@plt+0x35dc>
   140c0:	ldrb	r7, [r5]
   140c4:	cmp	r7, #0
   140c8:	beq	143f8 <__assert_fail@plt+0x35d4>
   140cc:	mov	r1, r7
   140d0:	ldr	r0, [sp, #32]
   140d4:	bl	10d70 <strchr@plt>
   140d8:	cmp	r0, #0
   140dc:	beq	141b0 <__assert_fail@plt+0x338c>
   140e0:	sub	r3, r7, #69	; 0x45
   140e4:	cmp	r3, #47	; 0x2f
   140e8:	ldrls	pc, [pc, r3, lsl #2]
   140ec:	b	1421c <__assert_fail@plt+0x33f8>
   140f0:	andeq	r4, r1, r0, asr #3
   140f4:	andeq	r4, r1, ip, lsl r2
   140f8:	andeq	r4, r1, r0, asr #3
   140fc:	andeq	r4, r1, ip, lsl r2
   14100:	andeq	r4, r1, ip, lsl r2
   14104:	andeq	r4, r1, ip, lsl r2
   14108:	andeq	r4, r1, r0, asr #3
   1410c:	andeq	r4, r1, ip, lsl r2
   14110:	andeq	r4, r1, r0, asr #3
   14114:	andeq	r4, r1, ip, lsl r2
   14118:	andeq	r4, r1, ip, lsl r2
   1411c:	andeq	r4, r1, r0, asr #3
   14120:	andeq	r4, r1, ip, lsl r2
   14124:	andeq	r4, r1, ip, lsl r2
   14128:	andeq	r4, r1, ip, lsl r2
   1412c:	andeq	r4, r1, r0, asr #3
   14130:	andeq	r4, r1, ip, lsl r2
   14134:	andeq	r4, r1, ip, lsl r2
   14138:	andeq	r4, r1, ip, lsl r2
   1413c:	andeq	r4, r1, ip, lsl r2
   14140:	andeq	r4, r1, r0, asr #3
   14144:	andeq	r4, r1, r0, asr #3
   14148:	andeq	r4, r1, ip, lsl r2
   1414c:	andeq	r4, r1, ip, lsl r2
   14150:	andeq	r4, r1, ip, lsl r2
   14154:	andeq	r4, r1, ip, lsl r2
   14158:	andeq	r4, r1, ip, lsl r2
   1415c:	andeq	r4, r1, ip, lsl r2
   14160:	andeq	r4, r1, ip, lsl r2
   14164:	andeq	r4, r1, ip, lsl r2
   14168:	andeq	r4, r1, ip, lsl r2
   1416c:	andeq	r4, r1, ip, lsl r2
   14170:	andeq	r4, r1, ip, lsl r2
   14174:	andeq	r4, r1, ip, lsl r2
   14178:	andeq	r4, r1, r0, asr #3
   1417c:	andeq	r4, r1, ip, lsl r2
   14180:	andeq	r4, r1, ip, lsl r2
   14184:	andeq	r4, r1, ip, lsl r2
   14188:	andeq	r4, r1, r0, asr #3
   1418c:	andeq	r4, r1, ip, lsl r2
   14190:	andeq	r4, r1, r0, asr #3
   14194:	andeq	r4, r1, ip, lsl r2
   14198:	andeq	r4, r1, ip, lsl r2
   1419c:	andeq	r4, r1, ip, lsl r2
   141a0:	andeq	r4, r1, ip, lsl r2
   141a4:	andeq	r4, r1, ip, lsl r2
   141a8:	andeq	r4, r1, ip, lsl r2
   141ac:	andeq	r4, r1, r0, asr #3
   141b0:	ldr	r3, [sp]
   141b4:	str	r3, [r8]
   141b8:	orr	r6, r6, #2
   141bc:	b	14400 <__assert_fail@plt+0x35dc>
   141c0:	mov	r1, #48	; 0x30
   141c4:	ldr	r0, [sp, #32]
   141c8:	bl	10d70 <strchr@plt>
   141cc:	cmp	r0, #0
   141d0:	beq	1430c <__assert_fail@plt+0x34e8>
   141d4:	ldrb	r3, [r5, #1]
   141d8:	cmp	r3, #68	; 0x44
   141dc:	beq	141f8 <__assert_fail@plt+0x33d4>
   141e0:	cmp	r3, #105	; 0x69
   141e4:	beq	14204 <__assert_fail@plt+0x33e0>
   141e8:	cmp	r3, #66	; 0x42
   141ec:	movne	r5, #1
   141f0:	movne	r1, #1024	; 0x400
   141f4:	bne	14224 <__assert_fail@plt+0x3400>
   141f8:	mov	r5, #2
   141fc:	mov	r1, #1000	; 0x3e8
   14200:	b	14224 <__assert_fail@plt+0x3400>
   14204:	ldrb	r5, [r5, #2]
   14208:	cmp	r5, #66	; 0x42
   1420c:	movne	r5, #1
   14210:	moveq	r5, #3
   14214:	mov	r1, #1024	; 0x400
   14218:	b	14224 <__assert_fail@plt+0x3400>
   1421c:	mov	r5, #1
   14220:	mov	r1, #1024	; 0x400
   14224:	sub	r7, r7, #66	; 0x42
   14228:	cmp	r7, #53	; 0x35
   1422c:	ldrls	pc, [pc, r7, lsl #2]
   14230:	b	143c8 <__assert_fail@plt+0x35a4>
   14234:	andeq	r4, r1, r8, lsr #6
   14238:	andeq	r4, r1, r8, asr #7
   1423c:	andeq	r4, r1, r8, asr #7
   14240:	andeq	r4, r1, r8, lsr r3
   14244:	andeq	r4, r1, r8, asr #7
   14248:	andeq	r4, r1, r8, asr #6
   1424c:	andeq	r4, r1, r8, asr #7
   14250:	andeq	r4, r1, r8, asr #7
   14254:	andeq	r4, r1, r8, asr #7
   14258:	andeq	r4, r1, r8, asr r3
   1425c:	andeq	r4, r1, r8, asr #7
   14260:	andeq	r4, r1, r8, ror #6
   14264:	andeq	r4, r1, r8, asr #7
   14268:	andeq	r4, r1, r8, asr #7
   1426c:	andeq	r4, r1, r8, ror r3
   14270:	andeq	r4, r1, r8, asr #7
   14274:	andeq	r4, r1, r8, asr #7
   14278:	andeq	r4, r1, r8, asr #7
   1427c:	andeq	r4, r1, r8, lsl #7
   14280:	andeq	r4, r1, r8, asr #7
   14284:	andeq	r4, r1, r8, asr #7
   14288:	andeq	r4, r1, r8, asr #7
   1428c:	andeq	r4, r1, r8, asr #7
   14290:	andeq	r4, r1, r8, lsr #7
   14294:			; <UNDEFINED> instruction: 0x000143b8
   14298:	andeq	r4, r1, r8, asr #7
   1429c:	andeq	r4, r1, r8, asr #7
   142a0:	andeq	r4, r1, r8, asr #7
   142a4:	andeq	r4, r1, r8, asr #7
   142a8:	andeq	r4, r1, r8, asr #7
   142ac:	andeq	r4, r1, r8, asr #7
   142b0:	andeq	r4, r1, r8, asr #7
   142b4:	andeq	r4, r1, r8, lsl r3
   142b8:	ldrdeq	r4, [r1], -r8
   142bc:	andeq	r4, r1, r8, asr #7
   142c0:	andeq	r4, r1, r8, asr #7
   142c4:	andeq	r4, r1, r8, asr #7
   142c8:	andeq	r4, r1, r8, asr #6
   142cc:	andeq	r4, r1, r8, asr #7
   142d0:	andeq	r4, r1, r8, asr #7
   142d4:	andeq	r4, r1, r8, asr #7
   142d8:	andeq	r4, r1, r8, asr r3
   142dc:	andeq	r4, r1, r8, asr #7
   142e0:	andeq	r4, r1, r8, ror #6
   142e4:	andeq	r4, r1, r8, asr #7
   142e8:	andeq	r4, r1, r8, asr #7
   142ec:	andeq	r4, r1, r8, asr #7
   142f0:	andeq	r4, r1, r8, asr #7
   142f4:	andeq	r4, r1, r8, asr #7
   142f8:	andeq	r4, r1, r8, asr #7
   142fc:	andeq	r4, r1, r8, lsl #7
   14300:	andeq	r4, r1, r8, asr #7
   14304:	andeq	r4, r1, r8, asr #7
   14308:	muleq	r1, r8, r3
   1430c:	mov	r5, #1
   14310:	mov	r1, #1024	; 0x400
   14314:	b	14224 <__assert_fail@plt+0x3400>
   14318:	mov	r1, #512	; 0x200
   1431c:	mov	r0, sp
   14320:	bl	13e94 <__assert_fail@plt+0x3070>
   14324:	b	143dc <__assert_fail@plt+0x35b8>
   14328:	mov	r1, #1024	; 0x400
   1432c:	mov	r0, sp
   14330:	bl	13e94 <__assert_fail@plt+0x3070>
   14334:	b	143dc <__assert_fail@plt+0x35b8>
   14338:	mov	r2, #6
   1433c:	mov	r0, sp
   14340:	bl	13f9c <__assert_fail@plt+0x3178>
   14344:	b	143dc <__assert_fail@plt+0x35b8>
   14348:	mov	r2, #3
   1434c:	mov	r0, sp
   14350:	bl	13f9c <__assert_fail@plt+0x3178>
   14354:	b	143dc <__assert_fail@plt+0x35b8>
   14358:	mov	r2, #1
   1435c:	mov	r0, sp
   14360:	bl	13f9c <__assert_fail@plt+0x3178>
   14364:	b	143dc <__assert_fail@plt+0x35b8>
   14368:	mov	r2, #2
   1436c:	mov	r0, sp
   14370:	bl	13f9c <__assert_fail@plt+0x3178>
   14374:	b	143dc <__assert_fail@plt+0x35b8>
   14378:	mov	r2, #5
   1437c:	mov	r0, sp
   14380:	bl	13f9c <__assert_fail@plt+0x3178>
   14384:	b	143dc <__assert_fail@plt+0x35b8>
   14388:	mov	r2, #4
   1438c:	mov	r0, sp
   14390:	bl	13f9c <__assert_fail@plt+0x3178>
   14394:	b	143dc <__assert_fail@plt+0x35b8>
   14398:	mov	r1, #2
   1439c:	mov	r0, sp
   143a0:	bl	13e94 <__assert_fail@plt+0x3070>
   143a4:	b	143dc <__assert_fail@plt+0x35b8>
   143a8:	mov	r2, #8
   143ac:	mov	r0, sp
   143b0:	bl	13f9c <__assert_fail@plt+0x3178>
   143b4:	b	143dc <__assert_fail@plt+0x35b8>
   143b8:	mov	r2, #7
   143bc:	mov	r0, sp
   143c0:	bl	13f9c <__assert_fail@plt+0x3178>
   143c4:	b	143dc <__assert_fail@plt+0x35b8>
   143c8:	ldr	r3, [sp]
   143cc:	str	r3, [r8]
   143d0:	orr	r6, r6, #2
   143d4:	b	14400 <__assert_fail@plt+0x35dc>
   143d8:	mov	r0, #0
   143dc:	orr	r6, r6, r0
   143e0:	ldr	r3, [r4]
   143e4:	add	r2, r3, r5
   143e8:	str	r2, [r4]
   143ec:	ldrb	r3, [r3, r5]
   143f0:	cmp	r3, #0
   143f4:	orrne	r6, r6, #2
   143f8:	ldr	r3, [sp]
   143fc:	str	r3, [r8]
   14400:	mov	r0, r6
   14404:	add	sp, sp, #8
   14408:	pop	{r4, r5, r6, r7, r8, pc}
   1440c:	andeq	r5, r1, r8, lsl #16
   14410:	andeq	r5, r1, r0, lsl r8
   14414:	andeq	r5, r1, r0, lsr #16
   14418:	push	{r4, lr}
   1441c:	mov	r2, r0
   14420:	mov	r3, r1
   14424:	cmp	r1, #0
   14428:	cmpne	r0, #0
   1442c:	moveq	r3, #1
   14430:	moveq	r2, r3
   14434:	umull	r0, r1, r2, r3
   14438:	cmp	r0, #0
   1443c:	cmpge	r1, #0
   14440:	bne	14454 <__assert_fail@plt+0x3630>
   14444:	mov	r1, r3
   14448:	mov	r0, r2
   1444c:	bl	10be4 <calloc@plt>
   14450:	pop	{r4, pc}
   14454:	bl	10d7c <__errno_location@plt>
   14458:	mov	r3, #12
   1445c:	str	r3, [r0]
   14460:	mov	r0, #0
   14464:	pop	{r4, pc}
   14468:	push	{r4, lr}
   1446c:	cmp	r0, #0
   14470:	moveq	r0, #1
   14474:	cmp	r0, #0
   14478:	blt	14484 <__assert_fail@plt+0x3660>
   1447c:	bl	10d10 <malloc@plt>
   14480:	pop	{r4, pc}
   14484:	bl	10d7c <__errno_location@plt>
   14488:	mov	r3, #12
   1448c:	str	r3, [r0]
   14490:	mov	r0, #0
   14494:	pop	{r4, pc}
   14498:	push	{r4, lr}
   1449c:	cmp	r0, #0
   144a0:	beq	144bc <__assert_fail@plt+0x3698>
   144a4:	cmp	r1, #0
   144a8:	beq	144c8 <__assert_fail@plt+0x36a4>
   144ac:	cmp	r1, #0
   144b0:	blt	144d4 <__assert_fail@plt+0x36b0>
   144b4:	bl	10c8c <realloc@plt>
   144b8:	pop	{r4, pc}
   144bc:	mov	r0, r1
   144c0:	bl	14468 <__assert_fail@plt+0x3644>
   144c4:	pop	{r4, pc}
   144c8:	bl	1466c <__assert_fail@plt+0x3848>
   144cc:	mov	r0, #0
   144d0:	pop	{r4, pc}
   144d4:	bl	10d7c <__errno_location@plt>
   144d8:	mov	r3, #12
   144dc:	str	r3, [r0]
   144e0:	mov	r0, #0
   144e4:	pop	{r4, pc}
   144e8:	push	{r4, r5, r6, lr}
   144ec:	mov	r5, r0
   144f0:	bl	10ce0 <__fpending@plt>
   144f4:	mov	r6, r0
   144f8:	ldr	r4, [r5]
   144fc:	and	r4, r4, #32
   14500:	mov	r0, r5
   14504:	bl	14560 <__assert_fail@plt+0x373c>
   14508:	cmp	r4, #0
   1450c:	bne	14534 <__assert_fail@plt+0x3710>
   14510:	cmp	r0, #0
   14514:	popeq	{r4, r5, r6, pc}
   14518:	cmp	r6, #0
   1451c:	bne	14550 <__assert_fail@plt+0x372c>
   14520:	bl	10d7c <__errno_location@plt>
   14524:	ldr	r0, [r0]
   14528:	subs	r0, r0, #9
   1452c:	mvnne	r0, #0
   14530:	pop	{r4, r5, r6, pc}
   14534:	cmp	r0, #0
   14538:	bne	14558 <__assert_fail@plt+0x3734>
   1453c:	bl	10d7c <__errno_location@plt>
   14540:	mov	r3, #0
   14544:	str	r3, [r0]
   14548:	mvn	r0, #0
   1454c:	pop	{r4, r5, r6, pc}
   14550:	mvn	r0, #0
   14554:	pop	{r4, r5, r6, pc}
   14558:	mvn	r0, #0
   1455c:	pop	{r4, r5, r6, pc}
   14560:	push	{r4, r5, r6, lr}
   14564:	sub	sp, sp, #8
   14568:	mov	r4, r0
   1456c:	bl	10dac <fileno@plt>
   14570:	cmp	r0, #0
   14574:	blt	145ec <__assert_fail@plt+0x37c8>
   14578:	mov	r0, r4
   1457c:	bl	10d28 <__freading@plt>
   14580:	cmp	r0, #0
   14584:	beq	145b8 <__assert_fail@plt+0x3794>
   14588:	mov	r0, r4
   1458c:	bl	10dac <fileno@plt>
   14590:	mov	r3, #1
   14594:	str	r3, [sp]
   14598:	mov	r2, #0
   1459c:	mov	r3, #0
   145a0:	bl	10cc8 <lseek64@plt>
   145a4:	mvn	r2, #0
   145a8:	mvn	r3, #0
   145ac:	cmp	r1, r3
   145b0:	cmpeq	r0, r2
   145b4:	beq	145f8 <__assert_fail@plt+0x37d4>
   145b8:	mov	r0, r4
   145bc:	bl	14608 <__assert_fail@plt+0x37e4>
   145c0:	cmp	r0, #0
   145c4:	beq	145f8 <__assert_fail@plt+0x37d4>
   145c8:	bl	10d7c <__errno_location@plt>
   145cc:	mov	r5, r0
   145d0:	ldr	r6, [r0]
   145d4:	mov	r0, r4
   145d8:	bl	10dc4 <fclose@plt>
   145dc:	cmp	r6, #0
   145e0:	strne	r6, [r5]
   145e4:	mvnne	r0, #0
   145e8:	b	14600 <__assert_fail@plt+0x37dc>
   145ec:	mov	r0, r4
   145f0:	bl	10dc4 <fclose@plt>
   145f4:	b	14600 <__assert_fail@plt+0x37dc>
   145f8:	mov	r0, r4
   145fc:	bl	10dc4 <fclose@plt>
   14600:	add	sp, sp, #8
   14604:	pop	{r4, r5, r6, pc}
   14608:	push	{r4, lr}
   1460c:	sub	sp, sp, #8
   14610:	subs	r4, r0, #0
   14614:	beq	14628 <__assert_fail@plt+0x3804>
   14618:	mov	r0, r4
   1461c:	bl	10d28 <__freading@plt>
   14620:	cmp	r0, #0
   14624:	bne	14638 <__assert_fail@plt+0x3814>
   14628:	mov	r0, r4
   1462c:	bl	10c20 <fflush@plt>
   14630:	add	sp, sp, #8
   14634:	pop	{r4, pc}
   14638:	ldr	r3, [r4]
   1463c:	tst	r3, #256	; 0x100
   14640:	bne	14650 <__assert_fail@plt+0x382c>
   14644:	mov	r0, r4
   14648:	bl	10c20 <fflush@plt>
   1464c:	b	14630 <__assert_fail@plt+0x380c>
   14650:	mov	r3, #1
   14654:	str	r3, [sp]
   14658:	mov	r2, #0
   1465c:	mov	r3, #0
   14660:	mov	r0, r4
   14664:	bl	146c4 <__assert_fail@plt+0x38a0>
   14668:	b	14644 <__assert_fail@plt+0x3820>
   1466c:	push	{r4, r5, lr}
   14670:	sub	sp, sp, #12
   14674:	mov	r5, r0
   14678:	bl	10d7c <__errno_location@plt>
   1467c:	mov	r4, r0
   14680:	ldr	r3, [r0]
   14684:	str	r3, [sp]
   14688:	str	r3, [sp, #4]
   1468c:	mov	r3, #0
   14690:	str	r3, [r0]
   14694:	mov	r0, r5
   14698:	bl	10c2c <free@plt>
   1469c:	ldr	r3, [r4]
   146a0:	cmp	r3, #0
   146a4:	moveq	r3, #4
   146a8:	movne	r3, #0
   146ac:	add	r2, sp, #8
   146b0:	add	r3, r2, r3
   146b4:	ldr	r3, [r3, #-8]
   146b8:	str	r3, [r4]
   146bc:	add	sp, sp, #12
   146c0:	pop	{r4, r5, pc}
   146c4:	push	{r4, r5, r6, r7, lr}
   146c8:	sub	sp, sp, #12
   146cc:	mov	r4, r0
   146d0:	mov	r6, r2
   146d4:	mov	r7, r3
   146d8:	ldr	r5, [sp, #32]
   146dc:	ldr	r2, [r0, #8]
   146e0:	ldr	r3, [r0, #4]
   146e4:	cmp	r2, r3
   146e8:	beq	14708 <__assert_fail@plt+0x38e4>
   146ec:	str	r5, [sp]
   146f0:	mov	r2, r6
   146f4:	mov	r3, r7
   146f8:	mov	r0, r4
   146fc:	bl	10dd0 <fseeko64@plt>
   14700:	add	sp, sp, #12
   14704:	pop	{r4, r5, r6, r7, pc}
   14708:	ldr	r2, [r0, #20]
   1470c:	ldr	r3, [r0, #16]
   14710:	cmp	r2, r3
   14714:	bne	146ec <__assert_fail@plt+0x38c8>
   14718:	ldr	r3, [r0, #36]	; 0x24
   1471c:	cmp	r3, #0
   14720:	bne	146ec <__assert_fail@plt+0x38c8>
   14724:	bl	10dac <fileno@plt>
   14728:	str	r5, [sp]
   1472c:	mov	r2, r6
   14730:	mov	r3, r7
   14734:	bl	10cc8 <lseek64@plt>
   14738:	mvn	r2, #0
   1473c:	mvn	r3, #0
   14740:	cmp	r1, r3
   14744:	cmpeq	r0, r2
   14748:	beq	14764 <__assert_fail@plt+0x3940>
   1474c:	ldr	r3, [r4]
   14750:	bic	r3, r3, #16
   14754:	str	r3, [r4]
   14758:	strd	r0, [r4, #80]	; 0x50
   1475c:	mov	r0, #0
   14760:	b	14700 <__assert_fail@plt+0x38dc>
   14764:	mvn	r0, #0
   14768:	b	14700 <__assert_fail@plt+0x38dc>
   1476c:	push	{r4, lr}
   14770:	mov	r0, #14
   14774:	bl	10df4 <nl_langinfo@plt>
   14778:	cmp	r0, #0
   1477c:	beq	14794 <__assert_fail@plt+0x3970>
   14780:	ldrb	r2, [r0]
   14784:	ldr	r3, [pc, #16]	; 1479c <__assert_fail@plt+0x3978>
   14788:	cmp	r2, #0
   1478c:	moveq	r0, r3
   14790:	pop	{r4, pc}
   14794:	ldr	r0, [pc]	; 1479c <__assert_fail@plt+0x3978>
   14798:	pop	{r4, pc}
   1479c:	andeq	r5, r1, r8, asr #16
   147a0:	push	{r4, r5, r6, r7, lr}
   147a4:	sub	sp, sp, #12
   147a8:	mov	r7, r1
   147ac:	mov	r5, r2
   147b0:	subs	r6, r0, #0
   147b4:	addeq	r6, sp, #4
   147b8:	mov	r0, r6
   147bc:	bl	10cec <mbrtowc@plt>
   147c0:	mov	r4, r0
   147c4:	cmp	r5, #0
   147c8:	cmnne	r0, #3
   147cc:	bhi	147dc <__assert_fail@plt+0x39b8>
   147d0:	mov	r0, r4
   147d4:	add	sp, sp, #12
   147d8:	pop	{r4, r5, r6, r7, pc}
   147dc:	mov	r0, #0
   147e0:	bl	14844 <__assert_fail@plt+0x3a20>
   147e4:	cmp	r0, #0
   147e8:	ldrbeq	r3, [r7]
   147ec:	streq	r3, [r6]
   147f0:	moveq	r4, #1
   147f4:	b	147d0 <__assert_fail@plt+0x39ac>
   147f8:	push	{r4, r5, r6, lr}
   147fc:	mov	r6, r0
   14800:	mov	r5, r1
   14804:	subs	r4, r2, #0
   14808:	beq	14834 <__assert_fail@plt+0x3a10>
   1480c:	mov	r1, r4
   14810:	mvn	r0, #0
   14814:	bl	1494c <__assert_fail@plt+0x3b28>
   14818:	cmp	r0, r5
   1481c:	bcs	14834 <__assert_fail@plt+0x3a10>
   14820:	bl	10d7c <__errno_location@plt>
   14824:	mov	r3, #12
   14828:	str	r3, [r0]
   1482c:	mov	r0, #0
   14830:	pop	{r4, r5, r6, pc}
   14834:	mul	r1, r5, r4
   14838:	mov	r0, r6
   1483c:	bl	14498 <__assert_fail@plt+0x3674>
   14840:	pop	{r4, r5, r6, pc}
   14844:	push	{lr}		; (str lr, [sp, #-4]!)
   14848:	sub	sp, sp, #268	; 0x10c
   1484c:	ldr	r2, [pc, #68]	; 14898 <__assert_fail@plt+0x3a74>
   14850:	add	r1, sp, #4
   14854:	bl	148a4 <__assert_fail@plt+0x3a80>
   14858:	cmp	r0, #0
   1485c:	movne	r0, #0
   14860:	bne	14890 <__assert_fail@plt+0x3a6c>
   14864:	ldr	r1, [pc, #48]	; 1489c <__assert_fail@plt+0x3a78>
   14868:	add	r0, sp, #4
   1486c:	bl	10c08 <strcmp@plt>
   14870:	cmp	r0, #0
   14874:	moveq	r0, #0
   14878:	beq	14890 <__assert_fail@plt+0x3a6c>
   1487c:	ldr	r1, [pc, #28]	; 148a0 <__assert_fail@plt+0x3a7c>
   14880:	add	r0, sp, #4
   14884:	bl	10c08 <strcmp@plt>
   14888:	adds	r0, r0, #0
   1488c:	movne	r0, #1
   14890:	add	sp, sp, #268	; 0x10c
   14894:	pop	{pc}		; (ldr pc, [sp], #4)
   14898:	andeq	r0, r0, r1, lsl #2
   1489c:	andeq	r5, r1, r0, asr r8
   148a0:	andeq	r5, r1, r4, asr r8
   148a4:	push	{r4, r5, r6, lr}
   148a8:	mov	r6, r1
   148ac:	mov	r4, r2
   148b0:	mov	r1, #0
   148b4:	bl	10ddc <setlocale@plt>
   148b8:	subs	r5, r0, #0
   148bc:	beq	148e0 <__assert_fail@plt+0x3abc>
   148c0:	mov	r0, r5
   148c4:	bl	10d64 <strlen@plt>
   148c8:	cmp	r4, r0
   148cc:	bhi	148f8 <__assert_fail@plt+0x3ad4>
   148d0:	cmp	r4, #0
   148d4:	bne	14910 <__assert_fail@plt+0x3aec>
   148d8:	mov	r0, #34	; 0x22
   148dc:	pop	{r4, r5, r6, pc}
   148e0:	cmp	r4, #0
   148e4:	beq	14934 <__assert_fail@plt+0x3b10>
   148e8:	mov	r3, #0
   148ec:	strb	r3, [r6]
   148f0:	mov	r0, #22
   148f4:	pop	{r4, r5, r6, pc}
   148f8:	add	r2, r0, #1
   148fc:	mov	r1, r5
   14900:	mov	r0, r6
   14904:	bl	10c44 <memcpy@plt>
   14908:	mov	r0, #0
   1490c:	pop	{r4, r5, r6, pc}
   14910:	sub	r4, r4, #1
   14914:	mov	r2, r4
   14918:	mov	r1, r5
   1491c:	mov	r0, r6
   14920:	bl	10c44 <memcpy@plt>
   14924:	mov	r3, #0
   14928:	strb	r3, [r6, r4]
   1492c:	mov	r0, #34	; 0x22
   14930:	pop	{r4, r5, r6, pc}
   14934:	mov	r0, #22
   14938:	pop	{r4, r5, r6, pc}
   1493c:	push	{r4, lr}
   14940:	mov	r1, #0
   14944:	bl	10ddc <setlocale@plt>
   14948:	pop	{r4, pc}
   1494c:	subs	r2, r1, #1
   14950:	bxeq	lr
   14954:	bcc	14b2c <__assert_fail@plt+0x3d08>
   14958:	cmp	r0, r1
   1495c:	bls	14b10 <__assert_fail@plt+0x3cec>
   14960:	tst	r1, r2
   14964:	beq	14b1c <__assert_fail@plt+0x3cf8>
   14968:	clz	r3, r0
   1496c:	clz	r2, r1
   14970:	sub	r3, r2, r3
   14974:	rsbs	r3, r3, #31
   14978:	addne	r3, r3, r3, lsl #1
   1497c:	mov	r2, #0
   14980:	addne	pc, pc, r3, lsl #2
   14984:	nop			; (mov r0, r0)
   14988:	cmp	r0, r1, lsl #31
   1498c:	adc	r2, r2, r2
   14990:	subcs	r0, r0, r1, lsl #31
   14994:	cmp	r0, r1, lsl #30
   14998:	adc	r2, r2, r2
   1499c:	subcs	r0, r0, r1, lsl #30
   149a0:	cmp	r0, r1, lsl #29
   149a4:	adc	r2, r2, r2
   149a8:	subcs	r0, r0, r1, lsl #29
   149ac:	cmp	r0, r1, lsl #28
   149b0:	adc	r2, r2, r2
   149b4:	subcs	r0, r0, r1, lsl #28
   149b8:	cmp	r0, r1, lsl #27
   149bc:	adc	r2, r2, r2
   149c0:	subcs	r0, r0, r1, lsl #27
   149c4:	cmp	r0, r1, lsl #26
   149c8:	adc	r2, r2, r2
   149cc:	subcs	r0, r0, r1, lsl #26
   149d0:	cmp	r0, r1, lsl #25
   149d4:	adc	r2, r2, r2
   149d8:	subcs	r0, r0, r1, lsl #25
   149dc:	cmp	r0, r1, lsl #24
   149e0:	adc	r2, r2, r2
   149e4:	subcs	r0, r0, r1, lsl #24
   149e8:	cmp	r0, r1, lsl #23
   149ec:	adc	r2, r2, r2
   149f0:	subcs	r0, r0, r1, lsl #23
   149f4:	cmp	r0, r1, lsl #22
   149f8:	adc	r2, r2, r2
   149fc:	subcs	r0, r0, r1, lsl #22
   14a00:	cmp	r0, r1, lsl #21
   14a04:	adc	r2, r2, r2
   14a08:	subcs	r0, r0, r1, lsl #21
   14a0c:	cmp	r0, r1, lsl #20
   14a10:	adc	r2, r2, r2
   14a14:	subcs	r0, r0, r1, lsl #20
   14a18:	cmp	r0, r1, lsl #19
   14a1c:	adc	r2, r2, r2
   14a20:	subcs	r0, r0, r1, lsl #19
   14a24:	cmp	r0, r1, lsl #18
   14a28:	adc	r2, r2, r2
   14a2c:	subcs	r0, r0, r1, lsl #18
   14a30:	cmp	r0, r1, lsl #17
   14a34:	adc	r2, r2, r2
   14a38:	subcs	r0, r0, r1, lsl #17
   14a3c:	cmp	r0, r1, lsl #16
   14a40:	adc	r2, r2, r2
   14a44:	subcs	r0, r0, r1, lsl #16
   14a48:	cmp	r0, r1, lsl #15
   14a4c:	adc	r2, r2, r2
   14a50:	subcs	r0, r0, r1, lsl #15
   14a54:	cmp	r0, r1, lsl #14
   14a58:	adc	r2, r2, r2
   14a5c:	subcs	r0, r0, r1, lsl #14
   14a60:	cmp	r0, r1, lsl #13
   14a64:	adc	r2, r2, r2
   14a68:	subcs	r0, r0, r1, lsl #13
   14a6c:	cmp	r0, r1, lsl #12
   14a70:	adc	r2, r2, r2
   14a74:	subcs	r0, r0, r1, lsl #12
   14a78:	cmp	r0, r1, lsl #11
   14a7c:	adc	r2, r2, r2
   14a80:	subcs	r0, r0, r1, lsl #11
   14a84:	cmp	r0, r1, lsl #10
   14a88:	adc	r2, r2, r2
   14a8c:	subcs	r0, r0, r1, lsl #10
   14a90:	cmp	r0, r1, lsl #9
   14a94:	adc	r2, r2, r2
   14a98:	subcs	r0, r0, r1, lsl #9
   14a9c:	cmp	r0, r1, lsl #8
   14aa0:	adc	r2, r2, r2
   14aa4:	subcs	r0, r0, r1, lsl #8
   14aa8:	cmp	r0, r1, lsl #7
   14aac:	adc	r2, r2, r2
   14ab0:	subcs	r0, r0, r1, lsl #7
   14ab4:	cmp	r0, r1, lsl #6
   14ab8:	adc	r2, r2, r2
   14abc:	subcs	r0, r0, r1, lsl #6
   14ac0:	cmp	r0, r1, lsl #5
   14ac4:	adc	r2, r2, r2
   14ac8:	subcs	r0, r0, r1, lsl #5
   14acc:	cmp	r0, r1, lsl #4
   14ad0:	adc	r2, r2, r2
   14ad4:	subcs	r0, r0, r1, lsl #4
   14ad8:	cmp	r0, r1, lsl #3
   14adc:	adc	r2, r2, r2
   14ae0:	subcs	r0, r0, r1, lsl #3
   14ae4:	cmp	r0, r1, lsl #2
   14ae8:	adc	r2, r2, r2
   14aec:	subcs	r0, r0, r1, lsl #2
   14af0:	cmp	r0, r1, lsl #1
   14af4:	adc	r2, r2, r2
   14af8:	subcs	r0, r0, r1, lsl #1
   14afc:	cmp	r0, r1
   14b00:	adc	r2, r2, r2
   14b04:	subcs	r0, r0, r1
   14b08:	mov	r0, r2
   14b0c:	bx	lr
   14b10:	moveq	r0, #1
   14b14:	movne	r0, #0
   14b18:	bx	lr
   14b1c:	clz	r2, r1
   14b20:	rsb	r2, r2, #31
   14b24:	lsr	r0, r0, r2
   14b28:	bx	lr
   14b2c:	cmp	r0, #0
   14b30:	mvnne	r0, #0
   14b34:	b	14d98 <__assert_fail@plt+0x3f74>
   14b38:	cmp	r1, #0
   14b3c:	beq	14b2c <__assert_fail@plt+0x3d08>
   14b40:	push	{r0, r1, lr}
   14b44:	bl	1494c <__assert_fail@plt+0x3b28>
   14b48:	pop	{r1, r2, lr}
   14b4c:	mul	r3, r2, r0
   14b50:	sub	r1, r1, r3
   14b54:	bx	lr
   14b58:	cmp	r1, #0
   14b5c:	beq	14d68 <__assert_fail@plt+0x3f44>
   14b60:	eor	ip, r0, r1
   14b64:	rsbmi	r1, r1, #0
   14b68:	subs	r2, r1, #1
   14b6c:	beq	14d34 <__assert_fail@plt+0x3f10>
   14b70:	movs	r3, r0
   14b74:	rsbmi	r3, r0, #0
   14b78:	cmp	r3, r1
   14b7c:	bls	14d40 <__assert_fail@plt+0x3f1c>
   14b80:	tst	r1, r2
   14b84:	beq	14d50 <__assert_fail@plt+0x3f2c>
   14b88:	clz	r2, r3
   14b8c:	clz	r0, r1
   14b90:	sub	r2, r0, r2
   14b94:	rsbs	r2, r2, #31
   14b98:	addne	r2, r2, r2, lsl #1
   14b9c:	mov	r0, #0
   14ba0:	addne	pc, pc, r2, lsl #2
   14ba4:	nop			; (mov r0, r0)
   14ba8:	cmp	r3, r1, lsl #31
   14bac:	adc	r0, r0, r0
   14bb0:	subcs	r3, r3, r1, lsl #31
   14bb4:	cmp	r3, r1, lsl #30
   14bb8:	adc	r0, r0, r0
   14bbc:	subcs	r3, r3, r1, lsl #30
   14bc0:	cmp	r3, r1, lsl #29
   14bc4:	adc	r0, r0, r0
   14bc8:	subcs	r3, r3, r1, lsl #29
   14bcc:	cmp	r3, r1, lsl #28
   14bd0:	adc	r0, r0, r0
   14bd4:	subcs	r3, r3, r1, lsl #28
   14bd8:	cmp	r3, r1, lsl #27
   14bdc:	adc	r0, r0, r0
   14be0:	subcs	r3, r3, r1, lsl #27
   14be4:	cmp	r3, r1, lsl #26
   14be8:	adc	r0, r0, r0
   14bec:	subcs	r3, r3, r1, lsl #26
   14bf0:	cmp	r3, r1, lsl #25
   14bf4:	adc	r0, r0, r0
   14bf8:	subcs	r3, r3, r1, lsl #25
   14bfc:	cmp	r3, r1, lsl #24
   14c00:	adc	r0, r0, r0
   14c04:	subcs	r3, r3, r1, lsl #24
   14c08:	cmp	r3, r1, lsl #23
   14c0c:	adc	r0, r0, r0
   14c10:	subcs	r3, r3, r1, lsl #23
   14c14:	cmp	r3, r1, lsl #22
   14c18:	adc	r0, r0, r0
   14c1c:	subcs	r3, r3, r1, lsl #22
   14c20:	cmp	r3, r1, lsl #21
   14c24:	adc	r0, r0, r0
   14c28:	subcs	r3, r3, r1, lsl #21
   14c2c:	cmp	r3, r1, lsl #20
   14c30:	adc	r0, r0, r0
   14c34:	subcs	r3, r3, r1, lsl #20
   14c38:	cmp	r3, r1, lsl #19
   14c3c:	adc	r0, r0, r0
   14c40:	subcs	r3, r3, r1, lsl #19
   14c44:	cmp	r3, r1, lsl #18
   14c48:	adc	r0, r0, r0
   14c4c:	subcs	r3, r3, r1, lsl #18
   14c50:	cmp	r3, r1, lsl #17
   14c54:	adc	r0, r0, r0
   14c58:	subcs	r3, r3, r1, lsl #17
   14c5c:	cmp	r3, r1, lsl #16
   14c60:	adc	r0, r0, r0
   14c64:	subcs	r3, r3, r1, lsl #16
   14c68:	cmp	r3, r1, lsl #15
   14c6c:	adc	r0, r0, r0
   14c70:	subcs	r3, r3, r1, lsl #15
   14c74:	cmp	r3, r1, lsl #14
   14c78:	adc	r0, r0, r0
   14c7c:	subcs	r3, r3, r1, lsl #14
   14c80:	cmp	r3, r1, lsl #13
   14c84:	adc	r0, r0, r0
   14c88:	subcs	r3, r3, r1, lsl #13
   14c8c:	cmp	r3, r1, lsl #12
   14c90:	adc	r0, r0, r0
   14c94:	subcs	r3, r3, r1, lsl #12
   14c98:	cmp	r3, r1, lsl #11
   14c9c:	adc	r0, r0, r0
   14ca0:	subcs	r3, r3, r1, lsl #11
   14ca4:	cmp	r3, r1, lsl #10
   14ca8:	adc	r0, r0, r0
   14cac:	subcs	r3, r3, r1, lsl #10
   14cb0:	cmp	r3, r1, lsl #9
   14cb4:	adc	r0, r0, r0
   14cb8:	subcs	r3, r3, r1, lsl #9
   14cbc:	cmp	r3, r1, lsl #8
   14cc0:	adc	r0, r0, r0
   14cc4:	subcs	r3, r3, r1, lsl #8
   14cc8:	cmp	r3, r1, lsl #7
   14ccc:	adc	r0, r0, r0
   14cd0:	subcs	r3, r3, r1, lsl #7
   14cd4:	cmp	r3, r1, lsl #6
   14cd8:	adc	r0, r0, r0
   14cdc:	subcs	r3, r3, r1, lsl #6
   14ce0:	cmp	r3, r1, lsl #5
   14ce4:	adc	r0, r0, r0
   14ce8:	subcs	r3, r3, r1, lsl #5
   14cec:	cmp	r3, r1, lsl #4
   14cf0:	adc	r0, r0, r0
   14cf4:	subcs	r3, r3, r1, lsl #4
   14cf8:	cmp	r3, r1, lsl #3
   14cfc:	adc	r0, r0, r0
   14d00:	subcs	r3, r3, r1, lsl #3
   14d04:	cmp	r3, r1, lsl #2
   14d08:	adc	r0, r0, r0
   14d0c:	subcs	r3, r3, r1, lsl #2
   14d10:	cmp	r3, r1, lsl #1
   14d14:	adc	r0, r0, r0
   14d18:	subcs	r3, r3, r1, lsl #1
   14d1c:	cmp	r3, r1
   14d20:	adc	r0, r0, r0
   14d24:	subcs	r3, r3, r1
   14d28:	cmp	ip, #0
   14d2c:	rsbmi	r0, r0, #0
   14d30:	bx	lr
   14d34:	teq	ip, r0
   14d38:	rsbmi	r0, r0, #0
   14d3c:	bx	lr
   14d40:	movcc	r0, #0
   14d44:	asreq	r0, ip, #31
   14d48:	orreq	r0, r0, #1
   14d4c:	bx	lr
   14d50:	clz	r2, r1
   14d54:	rsb	r2, r2, #31
   14d58:	cmp	ip, #0
   14d5c:	lsr	r0, r3, r2
   14d60:	rsbmi	r0, r0, #0
   14d64:	bx	lr
   14d68:	cmp	r0, #0
   14d6c:	mvngt	r0, #-2147483648	; 0x80000000
   14d70:	movlt	r0, #-2147483648	; 0x80000000
   14d74:	b	14d98 <__assert_fail@plt+0x3f74>
   14d78:	cmp	r1, #0
   14d7c:	beq	14d68 <__assert_fail@plt+0x3f44>
   14d80:	push	{r0, r1, lr}
   14d84:	bl	14b60 <__assert_fail@plt+0x3d3c>
   14d88:	pop	{r1, r2, lr}
   14d8c:	mul	r3, r2, r0
   14d90:	sub	r1, r1, r3
   14d94:	bx	lr
   14d98:	push	{r1, lr}
   14d9c:	mov	r0, #8
   14da0:	bl	10bfc <raise@plt>
   14da4:	pop	{r1, pc}
   14da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14dac:	mov	r7, r0
   14db0:	ldr	r6, [pc, #72]	; 14e00 <__assert_fail@plt+0x3fdc>
   14db4:	ldr	r5, [pc, #72]	; 14e04 <__assert_fail@plt+0x3fe0>
   14db8:	add	r6, pc, r6
   14dbc:	add	r5, pc, r5
   14dc0:	sub	r6, r6, r5
   14dc4:	mov	r8, r1
   14dc8:	mov	r9, r2
   14dcc:	bl	10bc4 <calloc@plt-0x20>
   14dd0:	asrs	r6, r6, #2
   14dd4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14dd8:	mov	r4, #0
   14ddc:	add	r4, r4, #1
   14de0:	ldr	r3, [r5], #4
   14de4:	mov	r2, r9
   14de8:	mov	r1, r8
   14dec:	mov	r0, r7
   14df0:	blx	r3
   14df4:	cmp	r6, r4
   14df8:	bne	14ddc <__assert_fail@plt+0x3fb8>
   14dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e00:	andeq	r1, r1, r0, asr r1
   14e04:	andeq	r1, r1, r8, asr #2
   14e08:	bx	lr
   14e0c:	ldr	r3, [pc, #12]	; 14e20 <__assert_fail@plt+0x3ffc>
   14e10:	mov	r1, #0
   14e14:	add	r3, pc, r3
   14e18:	ldr	r2, [r3]
   14e1c:	b	10d88 <__cxa_atexit@plt>
   14e20:			; <UNDEFINED> instruction: 0x000112bc

Disassembly of section .fini:

00014e24 <.fini>:
   14e24:	push	{r3, lr}
   14e28:	pop	{r3, pc}
