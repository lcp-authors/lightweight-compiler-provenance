
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011244 <.init>:
   11244:	push	{r3, lr}
   11248:	bl	11600 <__assert_fail@plt+0x48>
   1124c:	pop	{r3, pc}

Disassembly of section .plt:

00011250 <calloc@plt-0x14>:
   11250:	push	{lr}		; (str lr, [sp, #-4]!)
   11254:	ldr	lr, [pc, #4]	; 11260 <calloc@plt-0x4>
   11258:	add	lr, pc, lr
   1125c:	ldr	pc, [lr, #8]!
   11260:	andeq	r1, r2, r0, lsr #27

00011264 <calloc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #135168	; 0x21000
   1126c:	ldr	pc, [ip, #3488]!	; 0xda0

00011270 <fputs_unlocked@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #135168	; 0x21000
   11278:	ldr	pc, [ip, #3480]!	; 0xd98

0001127c <raise@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #135168	; 0x21000
   11284:	ldr	pc, [ip, #3472]!	; 0xd90

00011288 <gmtime_r@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #135168	; 0x21000
   11290:	ldr	pc, [ip, #3464]!	; 0xd88

00011294 <utimensat@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #135168	; 0x21000
   1129c:	ldr	pc, [ip, #3456]!	; 0xd80

000112a0 <strcmp@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #135168	; 0x21000
   112a8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ac <strtol@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #135168	; 0x21000
   112b4:	ldr	pc, [ip, #3440]!	; 0xd70

000112b8 <mktime@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #135168	; 0x21000
   112c0:	ldr	pc, [ip, #3432]!	; 0xd68

000112c4 <fflush@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #135168	; 0x21000
   112cc:	ldr	pc, [ip, #3424]!	; 0xd60

000112d0 <free@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #135168	; 0x21000
   112d8:	ldr	pc, [ip, #3416]!	; 0xd58

000112dc <clock_gettime@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #135168	; 0x21000
   112e4:	ldr	pc, [ip, #3408]!	; 0xd50

000112e8 <_exit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #135168	; 0x21000
   112f0:	ldr	pc, [ip, #3400]!	; 0xd48

000112f4 <memcpy@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #135168	; 0x21000
   112fc:	ldr	pc, [ip, #3392]!	; 0xd40

00011300 <mbsinit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #135168	; 0x21000
   11308:	ldr	pc, [ip, #3384]!	; 0xd38

0001130c <time@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #135168	; 0x21000
   11314:	ldr	pc, [ip, #3376]!	; 0xd30

00011318 <dcgettext@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #135168	; 0x21000
   11320:	ldr	pc, [ip, #3368]!	; 0xd28

00011324 <dup2@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #135168	; 0x21000
   1132c:	ldr	pc, [ip, #3360]!	; 0xd20

00011330 <realloc@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #135168	; 0x21000
   11338:	ldr	pc, [ip, #3352]!	; 0xd18

0001133c <localtime_r@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #135168	; 0x21000
   11344:	ldr	pc, [ip, #3344]!	; 0xd10

00011348 <textdomain@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #135168	; 0x21000
   11350:	ldr	pc, [ip, #3336]!	; 0xd08

00011354 <iswprint@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #135168	; 0x21000
   1135c:	ldr	pc, [ip, #3328]!	; 0xd00

00011360 <tzset@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #135168	; 0x21000
   11368:	ldr	pc, [ip, #3320]!	; 0xcf8

0001136c <fwrite@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #135168	; 0x21000
   11374:	ldr	pc, [ip, #3312]!	; 0xcf0

00011378 <lseek64@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #135168	; 0x21000
   11380:	ldr	pc, [ip, #3304]!	; 0xce8

00011384 <__ctype_get_mb_cur_max@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #135168	; 0x21000
   1138c:	ldr	pc, [ip, #3296]!	; 0xce0

00011390 <__fpending@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #135168	; 0x21000
   11398:	ldr	pc, [ip, #3288]!	; 0xcd8

0001139c <mbrtowc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #135168	; 0x21000
   113a4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113a8 <error@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #135168	; 0x21000
   113b0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113b4 <open64@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #135168	; 0x21000
   113bc:	ldr	pc, [ip, #3264]!	; 0xcc0

000113c0 <getenv@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #135168	; 0x21000
   113c8:	ldr	pc, [ip, #3256]!	; 0xcb8

000113cc <malloc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #135168	; 0x21000
   113d4:	ldr	pc, [ip, #3248]!	; 0xcb0

000113d8 <__libc_start_main@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #135168	; 0x21000
   113e0:	ldr	pc, [ip, #3240]!	; 0xca8

000113e4 <strftime@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #135168	; 0x21000
   113ec:	ldr	pc, [ip, #3232]!	; 0xca0

000113f0 <__vfprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #135168	; 0x21000
   113f8:	ldr	pc, [ip, #3224]!	; 0xc98

000113fc <__freading@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #135168	; 0x21000
   11404:	ldr	pc, [ip, #3216]!	; 0xc90

00011408 <localtime@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #135168	; 0x21000
   11410:	ldr	pc, [ip, #3208]!	; 0xc88

00011414 <__ctype_tolower_loc@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #135168	; 0x21000
   1141c:	ldr	pc, [ip, #3200]!	; 0xc80

00011420 <__ctype_toupper_loc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #135168	; 0x21000
   11428:	ldr	pc, [ip, #3192]!	; 0xc78

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #135168	; 0x21000
   11434:	ldr	pc, [ip, #3184]!	; 0xc70

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #135168	; 0x21000
   11440:	ldr	pc, [ip, #3176]!	; 0xc68

00011444 <__ctype_b_loc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #135168	; 0x21000
   1144c:	ldr	pc, [ip, #3168]!	; 0xc60

00011450 <exit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #135168	; 0x21000
   11458:	ldr	pc, [ip, #3160]!	; 0xc58

0001145c <bcmp@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #135168	; 0x21000
   11464:	ldr	pc, [ip, #3152]!	; 0xc50

00011468 <strlen@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #135168	; 0x21000
   11470:	ldr	pc, [ip, #3144]!	; 0xc48

00011474 <strchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #135168	; 0x21000
   1147c:	ldr	pc, [ip, #3136]!	; 0xc40

00011480 <setenv@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #135168	; 0x21000
   11488:	ldr	pc, [ip, #3128]!	; 0xc38

0001148c <__errno_location@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #135168	; 0x21000
   11494:	ldr	pc, [ip, #3120]!	; 0xc30

00011498 <__sprintf_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #135168	; 0x21000
   114a0:	ldr	pc, [ip, #3112]!	; 0xc28

000114a4 <__cxa_atexit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #135168	; 0x21000
   114ac:	ldr	pc, [ip, #3104]!	; 0xc20

000114b0 <memset@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #135168	; 0x21000
   114b8:	ldr	pc, [ip, #3096]!	; 0xc18

000114bc <__printf_chk@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #135168	; 0x21000
   114c4:	ldr	pc, [ip, #3088]!	; 0xc10

000114c8 <fileno@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #135168	; 0x21000
   114d0:	ldr	pc, [ip, #3080]!	; 0xc08

000114d4 <__fprintf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #135168	; 0x21000
   114dc:	ldr	pc, [ip, #3072]!	; 0xc00

000114e0 <fclose@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #135168	; 0x21000
   114e8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ec <fseeko64@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #135168	; 0x21000
   114f4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114f8 <__overflow@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #135168	; 0x21000
   11500:	ldr	pc, [ip, #3048]!	; 0xbe8

00011504 <setlocale@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #135168	; 0x21000
   1150c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011510 <strrchr@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #135168	; 0x21000
   11518:	ldr	pc, [ip, #3032]!	; 0xbd8

0001151c <nl_langinfo@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #135168	; 0x21000
   11524:	ldr	pc, [ip, #3024]!	; 0xbd0

00011528 <fputc@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #135168	; 0x21000
   11530:	ldr	pc, [ip, #3016]!	; 0xbc8

00011534 <timegm@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #135168	; 0x21000
   1153c:	ldr	pc, [ip, #3008]!	; 0xbc0

00011540 <futimens@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #135168	; 0x21000
   11548:	ldr	pc, [ip, #3000]!	; 0xbb8

0001154c <bindtextdomain@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #135168	; 0x21000
   11554:	ldr	pc, [ip, #2992]!	; 0xbb0

00011558 <__xstat64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #135168	; 0x21000
   11560:	ldr	pc, [ip, #2984]!	; 0xba8

00011564 <unsetenv@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #135168	; 0x21000
   1156c:	ldr	pc, [ip, #2976]!	; 0xba0

00011570 <fputs@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #135168	; 0x21000
   11578:	ldr	pc, [ip, #2968]!	; 0xb98

0001157c <strncmp@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #135168	; 0x21000
   11584:	ldr	pc, [ip, #2960]!	; 0xb90

00011588 <abort@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #135168	; 0x21000
   11590:	ldr	pc, [ip, #2952]!	; 0xb88

00011594 <close@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #135168	; 0x21000
   1159c:	ldr	pc, [ip, #2944]!	; 0xb80

000115a0 <__lxstat64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #135168	; 0x21000
   115a8:	ldr	pc, [ip, #2936]!	; 0xb78

000115ac <__snprintf_chk@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #135168	; 0x21000
   115b4:	ldr	pc, [ip, #2928]!	; 0xb70

000115b8 <__assert_fail@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #135168	; 0x21000
   115c0:	ldr	pc, [ip, #2920]!	; 0xb68

Disassembly of section .text:

000115c4 <.text>:
   115c4:	mov	fp, #0
   115c8:	mov	lr, #0
   115cc:	pop	{r1}		; (ldr r1, [sp], #4)
   115d0:	mov	r2, sp
   115d4:	push	{r2}		; (str r2, [sp, #-4]!)
   115d8:	push	{r0}		; (str r0, [sp, #-4]!)
   115dc:	ldr	ip, [pc, #16]	; 115f4 <__assert_fail@plt+0x3c>
   115e0:	push	{ip}		; (str ip, [sp, #-4]!)
   115e4:	ldr	r0, [pc, #12]	; 115f8 <__assert_fail@plt+0x40>
   115e8:	ldr	r3, [pc, #12]	; 115fc <__assert_fail@plt+0x44>
   115ec:	bl	113d8 <__libc_start_main@plt>
   115f0:	bl	11588 <abort@plt>
   115f4:	andeq	r0, r2, r0, lsl r4
   115f8:	andeq	r1, r1, r4, lsl #19
   115fc:			; <UNDEFINED> instruction: 0x000203b0
   11600:	ldr	r3, [pc, #20]	; 1161c <__assert_fail@plt+0x64>
   11604:	ldr	r2, [pc, #20]	; 11620 <__assert_fail@plt+0x68>
   11608:	add	r3, pc, r3
   1160c:	ldr	r2, [r3, r2]
   11610:	cmp	r2, #0
   11614:	bxeq	lr
   11618:	b	1142c <__gmon_start__@plt>
   1161c:	strdeq	r1, [r2], -r0
   11620:	andeq	r0, r0, ip, lsr #2
   11624:	ldr	r0, [pc, #24]	; 11644 <__assert_fail@plt+0x8c>
   11628:	ldr	r3, [pc, #24]	; 11648 <__assert_fail@plt+0x90>
   1162c:	cmp	r3, r0
   11630:	bxeq	lr
   11634:	ldr	r3, [pc, #16]	; 1164c <__assert_fail@plt+0x94>
   11638:	cmp	r3, #0
   1163c:	bxeq	lr
   11640:	bx	r3
   11644:	andeq	r3, r3, r8, lsl #3
   11648:	andeq	r3, r3, r8, lsl #3
   1164c:	andeq	r0, r0, r0
   11650:	ldr	r0, [pc, #36]	; 1167c <__assert_fail@plt+0xc4>
   11654:	ldr	r1, [pc, #36]	; 11680 <__assert_fail@plt+0xc8>
   11658:	sub	r1, r1, r0
   1165c:	asr	r1, r1, #2
   11660:	add	r1, r1, r1, lsr #31
   11664:	asrs	r1, r1, #1
   11668:	bxeq	lr
   1166c:	ldr	r3, [pc, #16]	; 11684 <__assert_fail@plt+0xcc>
   11670:	cmp	r3, #0
   11674:	bxeq	lr
   11678:	bx	r3
   1167c:	andeq	r3, r3, r8, lsl #3
   11680:	andeq	r3, r3, r8, lsl #3
   11684:	andeq	r0, r0, r0
   11688:	push	{r4, lr}
   1168c:	ldr	r4, [pc, #24]	; 116ac <__assert_fail@plt+0xf4>
   11690:	ldrb	r3, [r4]
   11694:	cmp	r3, #0
   11698:	popne	{r4, pc}
   1169c:	bl	11624 <__assert_fail@plt+0x6c>
   116a0:	mov	r3, #1
   116a4:	strb	r3, [r4]
   116a8:	pop	{r4, pc}
   116ac:	andeq	r3, r3, ip, lsr #3
   116b0:	b	11650 <__assert_fail@plt+0x98>
   116b4:	push	{fp, lr}
   116b8:	mov	fp, sp
   116bc:	sub	sp, sp, #56	; 0x38
   116c0:	mov	r4, r0
   116c4:	cmp	r0, #0
   116c8:	bne	11940 <__assert_fail@plt+0x388>
   116cc:	movw	r1, #1123	; 0x463
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #2
   116dc:	bl	11318 <dcgettext@plt>
   116e0:	mov	r1, r0
   116e4:	movw	r0, #12760	; 0x31d8
   116e8:	movt	r0, #3
   116ec:	ldr	r2, [r0]
   116f0:	mov	r0, #1
   116f4:	bl	114bc <__printf_chk@plt>
   116f8:	movw	r1, #1154	; 0x482
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #2
   11708:	bl	11318 <dcgettext@plt>
   1170c:	movw	r7, #12708	; 0x31a4
   11710:	movt	r7, #3
   11714:	ldr	r1, [r7]
   11718:	bl	11270 <fputs_unlocked@plt>
   1171c:	movw	r1, #2772	; 0xad4
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	movt	r1, #2
   1172c:	bl	11318 <dcgettext@plt>
   11730:	ldr	r1, [r7]
   11734:	bl	11270 <fputs_unlocked@plt>
   11738:	movw	r1, #1446	; 0x5a6
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #2
   11748:	bl	11318 <dcgettext@plt>
   1174c:	ldr	r1, [r7]
   11750:	bl	11270 <fputs_unlocked@plt>
   11754:	movw	r1, #1657	; 0x679
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #2
   11764:	bl	11318 <dcgettext@plt>
   11768:	ldr	r1, [r7]
   1176c:	bl	11270 <fputs_unlocked@plt>
   11770:	movw	r1, #1918	; 0x77e
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	movt	r1, #2
   11780:	bl	11318 <dcgettext@plt>
   11784:	ldr	r1, [r7]
   11788:	bl	11270 <fputs_unlocked@plt>
   1178c:	movw	r1, #2261	; 0x8d5
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	movt	r1, #2
   1179c:	bl	11318 <dcgettext@plt>
   117a0:	ldr	r1, [r7]
   117a4:	bl	11270 <fputs_unlocked@plt>
   117a8:	movw	r1, #2306	; 0x902
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	movt	r1, #2
   117b8:	bl	11318 <dcgettext@plt>
   117bc:	ldr	r1, [r7]
   117c0:	bl	11270 <fputs_unlocked@plt>
   117c4:	movw	r1, #2360	; 0x938
   117c8:	mov	r0, #0
   117cc:	mov	r2, #5
   117d0:	movt	r1, #2
   117d4:	bl	11318 <dcgettext@plt>
   117d8:	ldr	r1, [r7]
   117dc:	bl	11270 <fputs_unlocked@plt>
   117e0:	movw	r0, #3528	; 0xdc8
   117e4:	mov	r2, #48	; 0x30
   117e8:	mov	r6, sp
   117ec:	movw	r5, #2430	; 0x97e
   117f0:	movt	r0, #2
   117f4:	movt	r5, #2
   117f8:	add	r1, r0, #32
   117fc:	add	r3, r0, #16
   11800:	vld1.64	{d18-d19}, [r0], r2
   11804:	vld1.64	{d16-d17}, [r1]
   11808:	vld1.64	{d20-d21}, [r3]
   1180c:	vldr	d22, [r0]
   11810:	add	r1, r6, #32
   11814:	add	r0, r6, #16
   11818:	vst1.64	{d16-d17}, [r1]
   1181c:	movw	r1, #2847	; 0xb1f
   11820:	vst1.64	{d20-d21}, [r0]
   11824:	mov	r0, r6
   11828:	movt	r1, #2
   1182c:	vst1.64	{d18-d19}, [r0], r2
   11830:	vstr	d22, [r0]
   11834:	mov	r0, r5
   11838:	bl	112a0 <strcmp@plt>
   1183c:	cmp	r0, #0
   11840:	ldrne	r1, [r6, #8]!
   11844:	cmpne	r1, #0
   11848:	bne	11834 <__assert_fail@plt+0x27c>
   1184c:	movw	r1, #2942	; 0xb7e
   11850:	ldr	r6, [r6, #4]
   11854:	mov	r0, #0
   11858:	mov	r2, #5
   1185c:	movt	r1, #2
   11860:	bl	11318 <dcgettext@plt>
   11864:	movw	r2, #2502	; 0x9c6
   11868:	movw	r3, #2965	; 0xb95
   1186c:	mov	r1, r0
   11870:	mov	r0, #1
   11874:	movt	r2, #2
   11878:	movt	r3, #2
   1187c:	bl	114bc <__printf_chk@plt>
   11880:	cmp	r6, #0
   11884:	mov	r0, #5
   11888:	mov	r1, #0
   1188c:	moveq	r6, r5
   11890:	bl	11504 <setlocale@plt>
   11894:	cmp	r0, #0
   11898:	beq	118d0 <__assert_fail@plt+0x318>
   1189c:	movw	r1, #3005	; 0xbbd
   118a0:	mov	r2, #3
   118a4:	movt	r1, #2
   118a8:	bl	1157c <strncmp@plt>
   118ac:	cmp	r0, #0
   118b0:	beq	118d0 <__assert_fail@plt+0x318>
   118b4:	movw	r1, #3009	; 0xbc1
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #2
   118c4:	bl	11318 <dcgettext@plt>
   118c8:	ldr	r1, [r7]
   118cc:	bl	11270 <fputs_unlocked@plt>
   118d0:	movw	r1, #3080	; 0xc08
   118d4:	mov	r0, #0
   118d8:	mov	r2, #5
   118dc:	movt	r1, #2
   118e0:	bl	11318 <dcgettext@plt>
   118e4:	movw	r2, #2965	; 0xb95
   118e8:	mov	r1, r0
   118ec:	mov	r0, #1
   118f0:	mov	r3, r5
   118f4:	movt	r2, #2
   118f8:	bl	114bc <__printf_chk@plt>
   118fc:	movw	r1, #3107	; 0xc23
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	movt	r1, #2
   1190c:	bl	11318 <dcgettext@plt>
   11910:	mov	r1, r0
   11914:	movw	r0, #2875	; 0xb3b
   11918:	movw	r3, #9721	; 0x25f9
   1191c:	cmp	r6, r5
   11920:	mov	r2, r6
   11924:	movt	r0, #2
   11928:	movt	r3, #2
   1192c:	moveq	r3, r0
   11930:	mov	r0, #1
   11934:	bl	114bc <__printf_chk@plt>
   11938:	mov	r0, r4
   1193c:	bl	11450 <exit@plt>
   11940:	movw	r0, #12704	; 0x31a0
   11944:	movw	r1, #1084	; 0x43c
   11948:	mov	r2, #5
   1194c:	movt	r0, #3
   11950:	movt	r1, #2
   11954:	ldr	r5, [r0]
   11958:	mov	r0, #0
   1195c:	bl	11318 <dcgettext@plt>
   11960:	mov	r2, r0
   11964:	movw	r0, #12760	; 0x31d8
   11968:	mov	r1, #1
   1196c:	movt	r0, #3
   11970:	ldr	r3, [r0]
   11974:	mov	r0, r5
   11978:	bl	114d4 <__fprintf_chk@plt>
   1197c:	mov	r0, r4
   11980:	bl	11450 <exit@plt>
   11984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11988:	add	fp, sp, #28
   1198c:	sub	sp, sp, #172	; 0xac
   11990:	str	r0, [sp, #44]	; 0x2c
   11994:	ldr	r0, [r1]
   11998:	str	r1, [sp, #40]	; 0x28
   1199c:	bl	1ac58 <__assert_fail@plt+0x96a0>
   119a0:	movw	r1, #9721	; 0x25f9
   119a4:	mov	r0, #6
   119a8:	movt	r1, #2
   119ac:	bl	11504 <setlocale@plt>
   119b0:	movw	r6, #2506	; 0x9ca
   119b4:	movw	r1, #2436	; 0x984
   119b8:	movt	r6, #2
   119bc:	movt	r1, #2
   119c0:	mov	r0, r6
   119c4:	bl	1154c <bindtextdomain@plt>
   119c8:	mov	r0, r6
   119cc:	bl	11348 <textdomain@plt>
   119d0:	movw	r0, #10196	; 0x27d4
   119d4:	movt	r0, #1
   119d8:	bl	20414 <__assert_fail@plt+0xee5c>
   119dc:	movw	sl, #12720	; 0x31b0
   119e0:	movw	r9, #2460	; 0x99c
   119e4:	movw	r6, #3352	; 0xd18
   119e8:	movw	r8, #3480	; 0xd98
   119ec:	mov	r0, #0
   119f0:	mov	r4, #0
   119f4:	mov	r7, #1
   119f8:	mov	r5, #0
   119fc:	movt	sl, #3
   11a00:	movt	r9, #2
   11a04:	movt	r6, #2
   11a08:	movt	r8, #2
   11a0c:	str	r0, [sp, #36]	; 0x24
   11a10:	str	r4, [sl, #4]
   11a14:	strh	r4, [sl]
   11a18:	ldr	r0, [sp, #44]	; 0x2c
   11a1c:	ldr	r1, [sp, #40]	; 0x28
   11a20:	mov	r2, r9
   11a24:	mov	r3, r6
   11a28:	str	r4, [sp]
   11a2c:	bl	11438 <getopt_long@plt>
   11a30:	cmp	r0, #96	; 0x60
   11a34:	ble	11b8c <__assert_fail@plt+0x5d4>
   11a38:	sub	r1, r0, #97	; 0x61
   11a3c:	cmp	r1, #19
   11a40:	bhi	11b20 <__assert_fail@plt+0x568>
   11a44:	add	r0, pc, #0
   11a48:	ldr	pc, [r0, r1, lsl #2]
   11a4c:	muleq	r1, ip, sl
   11a50:			; <UNDEFINED> instruction: 0x000121b8
   11a54:	andeq	r1, r1, r8, asr #21
   11a58:			; <UNDEFINED> instruction: 0x00011ab4
   11a5c:			; <UNDEFINED> instruction: 0x000121b8
   11a60:	andeq	r1, r1, r8, lsl sl
   11a64:			; <UNDEFINED> instruction: 0x000121b8
   11a68:	andeq	r1, r1, ip, lsr #21
   11a6c:			; <UNDEFINED> instruction: 0x000121b8
   11a70:			; <UNDEFINED> instruction: 0x000121b8
   11a74:			; <UNDEFINED> instruction: 0x000121b8
   11a78:			; <UNDEFINED> instruction: 0x000121b8
   11a7c:	andeq	r1, r1, ip, ror fp
   11a80:			; <UNDEFINED> instruction: 0x000121b8
   11a84:			; <UNDEFINED> instruction: 0x000121b8
   11a88:			; <UNDEFINED> instruction: 0x000121b8
   11a8c:			; <UNDEFINED> instruction: 0x000121b8
   11a90:	ldrdeq	r1, [r1], -r0
   11a94:			; <UNDEFINED> instruction: 0x000121b8
   11a98:	andeq	r1, r1, r8, ror #21
   11a9c:	ldr	r0, [sl, #4]
   11aa0:	orr	r0, r0, #1
   11aa4:	str	r0, [sl, #4]
   11aa8:	b	11a18 <__assert_fail@plt+0x460>
   11aac:	strb	r7, [sl, #2]
   11ab0:	b	11a18 <__assert_fail@plt+0x460>
   11ab4:	movw	r0, #12712	; 0x31a8
   11ab8:	movt	r0, #3
   11abc:	ldr	r0, [r0]
   11ac0:	str	r0, [sp, #36]	; 0x24
   11ac4:	b	11a18 <__assert_fail@plt+0x460>
   11ac8:	strb	r7, [sl, #1]
   11acc:	b	11a18 <__assert_fail@plt+0x460>
   11ad0:	movw	r0, #12712	; 0x31a8
   11ad4:	strb	r7, [sl]
   11ad8:	movt	r0, #3
   11adc:	ldr	r0, [r0]
   11ae0:	str	r0, [sl, #8]
   11ae4:	b	11a18 <__assert_fail@plt+0x460>
   11ae8:	movw	r0, #12712	; 0x31a8
   11aec:	mov	r2, #6
   11af0:	movt	r0, #3
   11af4:	ldr	r1, [r0]
   11af8:	add	r0, sl, #16
   11afc:	bl	1a898 <__assert_fail@plt+0x92e0>
   11b00:	cmp	r0, #0
   11b04:	beq	121c0 <__assert_fail@plt+0xc08>
   11b08:	ldr	r0, [sl, #16]
   11b0c:	str	r4, [sl, #20]
   11b10:	str	r4, [sl, #28]
   11b14:	mov	r5, #1
   11b18:	str	r0, [sl, #24]
   11b1c:	b	11a18 <__assert_fail@plt+0x460>
   11b20:	cmp	r0, #256	; 0x100
   11b24:	bne	121b8 <__assert_fail@plt+0xc00>
   11b28:	movw	r0, #12712	; 0x31a8
   11b2c:	mov	r2, #4
   11b30:	mov	r3, r8
   11b34:	movt	r0, #3
   11b38:	str	r2, [sp]
   11b3c:	movw	r2, #3500	; 0xdac
   11b40:	movt	r2, #2
   11b44:	ldr	r1, [r0]
   11b48:	movw	r0, #12604	; 0x313c
   11b4c:	movt	r0, #3
   11b50:	ldr	r0, [r0]
   11b54:	stmib	sp, {r0, r7}
   11b58:	movw	r0, #2495	; 0x9bf
   11b5c:	movt	r0, #2
   11b60:	bl	12600 <__assert_fail@plt+0x1048>
   11b64:	ldr	r0, [r8, r0, lsl #2]
   11b68:	ldr	r1, [sl, #4]
   11b6c:	mov	r7, #1
   11b70:	orr	r0, r1, r0
   11b74:	str	r0, [sl, #4]
   11b78:	b	11a18 <__assert_fail@plt+0x460>
   11b7c:	ldr	r0, [sl, #4]
   11b80:	orr	r0, r0, #2
   11b84:	str	r0, [sl, #4]
   11b88:	b	11a18 <__assert_fail@plt+0x460>
   11b8c:	cmn	r0, #1
   11b90:	bne	12114 <__assert_fail@plt+0xb5c>
   11b94:	ldr	r0, [sl, #4]
   11b98:	ldr	r7, [sp, #36]	; 0x24
   11b9c:	cmp	r0, #0
   11ba0:	moveq	r0, #3
   11ba4:	streq	r0, [sl, #4]
   11ba8:	tst	r5, #1
   11bac:	ldrb	r0, [sl]
   11bb0:	beq	11e60 <__assert_fail@plt+0x8a8>
   11bb4:	clz	r1, r7
   11bb8:	eor	r0, r0, #1
   11bbc:	lsr	r1, r1, #5
   11bc0:	tst	r1, r0
   11bc4:	beq	12208 <__assert_fail@plt+0xc50>
   11bc8:	movw	r0, #12696	; 0x3198
   11bcc:	movt	r0, #3
   11bd0:	ldr	r1, [r0]
   11bd4:	ldr	r0, [sp, #44]	; 0x2c
   11bd8:	cmp	r1, r0
   11bdc:	beq	121fc <__assert_fail@plt+0xc44>
   11be0:	mov	r0, #0
   11be4:	bge	11e94 <__assert_fail@plt+0x8dc>
   11be8:	add	r0, sl, #20
   11bec:	mov	r9, #1
   11bf0:	str	r0, [sp, #32]
   11bf4:	add	r0, sl, #28
   11bf8:	str	r0, [sp, #28]
   11bfc:	add	r0, sl, #16
   11c00:	str	r0, [sp, #36]	; 0x24
   11c04:	b	11c6c <__assert_fail@plt+0x6b4>
   11c08:	movw	r1, #3313	; 0xcf1
   11c0c:	movt	r1, #2
   11c10:	mov	r5, #0
   11c14:	mov	r0, #0
   11c18:	mov	r2, #5
   11c1c:	bl	11318 <dcgettext@plt>
   11c20:	mov	r4, r0
   11c24:	mov	r0, #4
   11c28:	mov	r1, r7
   11c2c:	bl	1c6f4 <__assert_fail@plt+0xb13c>
   11c30:	mov	r3, r0
   11c34:	mov	r0, #0
   11c38:	mov	r1, r6
   11c3c:	mov	r2, r4
   11c40:	bl	113a8 <error@plt>
   11c44:	movw	r0, #12696	; 0x3198
   11c48:	and	r9, r9, r5
   11c4c:	movt	r0, #3
   11c50:	mov	r2, r0
   11c54:	ldr	r0, [r0]
   11c58:	add	r1, r0, #1
   11c5c:	ldr	r0, [sp, #44]	; 0x2c
   11c60:	str	r1, [r2]
   11c64:	cmp	r1, r0
   11c68:	bge	11e90 <__assert_fail@plt+0x8d8>
   11c6c:	ldr	r0, [sp, #40]	; 0x28
   11c70:	ldr	r7, [r0, r1, lsl #2]
   11c74:	movw	r1, #9812	; 0x2654
   11c78:	movt	r1, #2
   11c7c:	mov	r0, r7
   11c80:	bl	112a0 <strcmp@plt>
   11c84:	cmp	r0, #0
   11c88:	mov	r6, #0
   11c8c:	mov	r8, #1
   11c90:	beq	11cec <__assert_fail@plt+0x734>
   11c94:	ldrb	r0, [sl, #1]
   11c98:	mvn	r8, #0
   11c9c:	cmp	r0, #0
   11ca0:	beq	11cb8 <__assert_fail@plt+0x700>
   11ca4:	mov	r6, #0
   11ca8:	ldr	r0, [sl, #4]
   11cac:	cmp	r0, #1
   11cb0:	bne	11cf8 <__assert_fail@plt+0x740>
   11cb4:	b	11d24 <__assert_fail@plt+0x76c>
   11cb8:	ldrb	r0, [sl, #2]
   11cbc:	mov	r6, #0
   11cc0:	cmp	r0, #0
   11cc4:	bne	11cec <__assert_fail@plt+0x734>
   11cc8:	mov	r0, #0
   11ccc:	mov	r1, r7
   11cd0:	movw	r2, #2369	; 0x941
   11cd4:	movw	r3, #438	; 0x1b6
   11cd8:	mov	r6, #0
   11cdc:	bl	128c0 <__assert_fail@plt+0x1308>
   11ce0:	mov	r8, r0
   11ce4:	cmn	r0, #1
   11ce8:	ble	11d10 <__assert_fail@plt+0x758>
   11cec:	ldr	r0, [sl, #4]
   11cf0:	cmp	r0, #1
   11cf4:	beq	11d24 <__assert_fail@plt+0x76c>
   11cf8:	ldr	r1, [sp, #32]
   11cfc:	cmp	r0, #2
   11d00:	beq	11d28 <__assert_fail@plt+0x770>
   11d04:	cmp	r0, #3
   11d08:	beq	11d30 <__assert_fail@plt+0x778>
   11d0c:	b	12188 <__assert_fail@plt+0xbd0>
   11d10:	bl	1148c <__errno_location@plt>
   11d14:	ldr	r6, [r0]
   11d18:	ldr	r0, [sl, #4]
   11d1c:	cmp	r0, #1
   11d20:	bne	11cf8 <__assert_fail@plt+0x740>
   11d24:	ldr	r1, [sp, #28]
   11d28:	mvn	r0, #-1073741823	; 0xc0000001
   11d2c:	str	r0, [r1]
   11d30:	ldrb	r0, [sl, #2]
   11d34:	ldrb	r1, [sl, #3]
   11d38:	ldr	r3, [sp, #36]	; 0x24
   11d3c:	cmp	r0, #0
   11d40:	movwne	r0, #256	; 0x100
   11d44:	subs	r2, r8, #1
   11d48:	movne	r2, r7
   11d4c:	cmp	r1, #0
   11d50:	str	r0, [sp]
   11d54:	mov	r0, r8
   11d58:	mvn	r1, #99	; 0x63
   11d5c:	movwne	r3, #0
   11d60:	bl	12928 <__assert_fail@plt+0x1370>
   11d64:	cmp	r0, #0
   11d68:	beq	11d98 <__assert_fail@plt+0x7e0>
   11d6c:	bl	1148c <__errno_location@plt>
   11d70:	ldr	r4, [r0]
   11d74:	cmp	r8, #0
   11d78:	beq	11da4 <__assert_fail@plt+0x7ec>
   11d7c:	cmp	r8, #1
   11d80:	cmpeq	r4, #9
   11d84:	beq	11dd0 <__assert_fail@plt+0x818>
   11d88:	cmp	r4, #0
   11d8c:	bne	11de0 <__assert_fail@plt+0x828>
   11d90:	mov	r5, #1
   11d94:	b	11c44 <__assert_fail@plt+0x68c>
   11d98:	mov	r4, #0
   11d9c:	cmp	r8, #0
   11da0:	bne	11d7c <__assert_fail@plt+0x7c4>
   11da4:	mov	r0, #0
   11da8:	bl	11594 <close@plt>
   11dac:	cmp	r0, #0
   11db0:	beq	11d88 <__assert_fail@plt+0x7d0>
   11db4:	bl	1148c <__errno_location@plt>
   11db8:	ldr	r6, [r0]
   11dbc:	movw	r1, #3294	; 0xcde
   11dc0:	mov	r5, #0
   11dc4:	mov	r0, #0
   11dc8:	movt	r1, #2
   11dcc:	b	11c18 <__assert_fail@plt+0x660>
   11dd0:	ldrb	r0, [sl, #1]
   11dd4:	mov	r5, #1
   11dd8:	cmp	r0, #0
   11ddc:	bne	11c44 <__assert_fail@plt+0x68c>
   11de0:	cmp	r6, #0
   11de4:	cmpne	r6, #21
   11de8:	bne	11e14 <__assert_fail@plt+0x85c>
   11dec:	cmp	r4, #2
   11df0:	bne	11e50 <__assert_fail@plt+0x898>
   11df4:	ldrb	r0, [sl, #1]
   11df8:	movw	r1, #3329	; 0xd01
   11dfc:	mov	r5, #1
   11e00:	mov	r6, r4
   11e04:	movt	r1, #2
   11e08:	cmp	r0, #0
   11e0c:	bne	11c44 <__assert_fail@plt+0x68c>
   11e10:	b	11c10 <__assert_fail@plt+0x658>
   11e14:	cmp	r6, #22
   11e18:	bne	11c08 <__assert_fail@plt+0x650>
   11e1c:	mov	r0, #3
   11e20:	mov	r1, r7
   11e24:	add	r2, sp, #64	; 0x40
   11e28:	bl	11558 <__xstat64@plt>
   11e2c:	cmp	r0, #0
   11e30:	bne	11c08 <__assert_fail@plt+0x650>
   11e34:	ldr	r0, [sp, #80]	; 0x50
   11e38:	movw	r1, #3313	; 0xcf1
   11e3c:	movt	r1, #2
   11e40:	and	r0, r0, #61440	; 0xf000
   11e44:	cmp	r0, #16384	; 0x4000
   11e48:	bne	11c10 <__assert_fail@plt+0x658>
   11e4c:	b	11dec <__assert_fail@plt+0x834>
   11e50:	movw	r1, #3329	; 0xd01
   11e54:	mov	r6, r4
   11e58:	movt	r1, #2
   11e5c:	b	11c10 <__assert_fail@plt+0x658>
   11e60:	cmp	r0, #0
   11e64:	beq	11e9c <__assert_fail@plt+0x8e4>
   11e68:	ldrb	r0, [sl, #2]
   11e6c:	ldr	r1, [sl, #8]
   11e70:	add	r2, sp, #64	; 0x40
   11e74:	cmp	r0, #1
   11e78:	bne	1205c <__assert_fail@plt+0xaa4>
   11e7c:	mov	r0, #3
   11e80:	bl	115a0 <__lxstat64@plt>
   11e84:	cmp	r0, #0
   11e88:	beq	1206c <__assert_fail@plt+0xab4>
   11e8c:	b	12234 <__assert_fail@plt+0xc7c>
   11e90:	eor	r0, r9, #1
   11e94:	sub	sp, fp, #28
   11e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e9c:	cmp	r7, #0
   11ea0:	beq	11f44 <__assert_fail@plt+0x98c>
   11ea4:	add	r6, sp, #64	; 0x40
   11ea8:	mov	r0, r6
   11eac:	bl	129c8 <__assert_fail@plt+0x1410>
   11eb0:	add	r0, sl, #16
   11eb4:	mov	r1, r7
   11eb8:	mov	r2, r6
   11ebc:	bl	1a620 <__assert_fail@plt+0x9068>
   11ec0:	cmp	r0, #0
   11ec4:	beq	120cc <__assert_fail@plt+0xb14>
   11ec8:	ldr	r1, [sl, #4]
   11ecc:	ldr	r0, [sl, #16]
   11ed0:	ldr	r3, [sl, #20]
   11ed4:	cmp	r1, #3
   11ed8:	str	r0, [sl, #24]
   11edc:	str	r3, [sl, #28]
   11ee0:	bne	11bc8 <__assert_fail@plt+0x610>
   11ee4:	ldr	r1, [sp, #64]	; 0x40
   11ee8:	cmp	r1, r0
   11eec:	bne	11bc8 <__assert_fail@plt+0x610>
   11ef0:	ldr	r1, [sl, #20]
   11ef4:	ldr	r2, [sp, #68]	; 0x44
   11ef8:	cmp	r1, r2
   11efc:	bne	11bc8 <__assert_fail@plt+0x610>
   11f00:	eor	r0, r0, #1
   11f04:	str	r1, [sp, #60]	; 0x3c
   11f08:	add	r2, sp, #56	; 0x38
   11f0c:	mov	r1, r7
   11f10:	str	r0, [sp, #56]	; 0x38
   11f14:	add	r0, sp, #48	; 0x30
   11f18:	bl	1a620 <__assert_fail@plt+0x9068>
   11f1c:	cmp	r0, #0
   11f20:	beq	120cc <__assert_fail@plt+0xb14>
   11f24:	ldr	r0, [sp, #56]	; 0x38
   11f28:	ldr	r1, [sp, #48]	; 0x30
   11f2c:	cmp	r1, r0
   11f30:	bne	11bc8 <__assert_fail@plt+0x610>
   11f34:	ldr	r0, [sp, #60]	; 0x3c
   11f38:	ldr	r1, [sp, #52]	; 0x34
   11f3c:	cmp	r1, r0
   11f40:	bne	11bc8 <__assert_fail@plt+0x610>
   11f44:	movw	r0, #12696	; 0x3198
   11f48:	ldr	r1, [sp, #44]	; 0x2c
   11f4c:	movt	r0, #3
   11f50:	ldr	r0, [r0]
   11f54:	sub	r0, r1, r0
   11f58:	cmp	r0, #2
   11f5c:	blt	120ec <__assert_fail@plt+0xb34>
   11f60:	bl	1abfc <__assert_fail@plt+0x9644>
   11f64:	movw	r1, #3503	; 0xdaf
   11f68:	movt	r1, #3
   11f6c:	cmp	r0, r1
   11f70:	bgt	120ec <__assert_fail@plt+0xb34>
   11f74:	movw	r0, #12696	; 0x3198
   11f78:	ldr	r1, [sp, #40]	; 0x28
   11f7c:	add	r6, sl, #16
   11f80:	mov	r2, #9
   11f84:	movt	r0, #3
   11f88:	ldr	r0, [r0]
   11f8c:	ldr	r1, [r1, r0, lsl #2]
   11f90:	mov	r0, r6
   11f94:	bl	1a898 <__assert_fail@plt+0x92e0>
   11f98:	cmp	r0, #0
   11f9c:	beq	120ec <__assert_fail@plt+0xb34>
   11fa0:	mov	r0, #0
   11fa4:	ldr	r1, [sl, #16]
   11fa8:	str	r0, [sl, #20]
   11fac:	str	r0, [sl, #28]
   11fb0:	movw	r0, #2660	; 0xa64
   11fb4:	movt	r0, #2
   11fb8:	str	r1, [sl, #24]
   11fbc:	bl	113c0 <getenv@plt>
   11fc0:	cmp	r0, #0
   11fc4:	bne	12040 <__assert_fail@plt+0xa88>
   11fc8:	mov	r0, r6
   11fcc:	bl	11408 <localtime@plt>
   11fd0:	cmp	r0, #0
   11fd4:	beq	12040 <__assert_fail@plt+0xa88>
   11fd8:	movw	r1, #2676	; 0xa74
   11fdc:	mov	r6, r0
   11fe0:	mov	r0, #0
   11fe4:	mov	r2, #5
   11fe8:	movt	r1, #2
   11fec:	bl	11318 <dcgettext@plt>
   11ff0:	mov	ip, r0
   11ff4:	movw	r0, #12696	; 0x3198
   11ff8:	ldr	r1, [sp, #40]	; 0x28
   11ffc:	ldr	r4, [r6, #16]
   12000:	ldr	r5, [r6, #12]
   12004:	movw	r2, #1900	; 0x76c
   12008:	movt	r0, #3
   1200c:	ldr	r0, [r0]
   12010:	add	r4, r4, #1
   12014:	ldr	r3, [r1, r0, lsl #2]
   12018:	ldm	r6, {r0, r1, r7}
   1201c:	ldr	r6, [r6, #20]
   12020:	add	r2, r6, r2
   12024:	stm	sp, {r2, r4, r5, r7}
   12028:	str	r1, [sp, #16]
   1202c:	str	r0, [sp, #20]
   12030:	mov	r0, #0
   12034:	mov	r1, #0
   12038:	mov	r2, ip
   1203c:	bl	113a8 <error@plt>
   12040:	movw	r0, #12696	; 0x3198
   12044:	movt	r0, #3
   12048:	mov	r1, r0
   1204c:	ldr	r0, [r0]
   12050:	add	r0, r0, #1
   12054:	str	r0, [r1]
   12058:	b	11bc8 <__assert_fail@plt+0x610>
   1205c:	mov	r0, #3
   12060:	bl	11558 <__xstat64@plt>
   12064:	cmp	r0, #0
   12068:	bne	12234 <__assert_fail@plt+0xc7c>
   1206c:	add	r0, sp, #64	; 0x40
   12070:	cmp	r7, #0
   12074:	add	r0, r0, #72	; 0x48
   12078:	vld1.64	{d16-d17}, [r0]
   1207c:	add	r0, sl, #16
   12080:	vst1.64	{d16-d17}, [r0 :128]
   12084:	beq	11bc8 <__assert_fail@plt+0x610>
   12088:	ldr	r1, [sl, #4]
   1208c:	tst	r1, #1
   12090:	beq	120ac <__assert_fail@plt+0xaf4>
   12094:	mov	r1, r7
   12098:	mov	r2, r0
   1209c:	bl	1a620 <__assert_fail@plt+0x9068>
   120a0:	cmp	r0, #0
   120a4:	beq	120cc <__assert_fail@plt+0xb14>
   120a8:	ldr	r1, [sl, #4]
   120ac:	tst	r1, #2
   120b0:	beq	11bc8 <__assert_fail@plt+0x610>
   120b4:	add	r0, sl, #24
   120b8:	mov	r1, r7
   120bc:	mov	r2, r0
   120c0:	bl	1a620 <__assert_fail@plt+0x9068>
   120c4:	cmp	r0, #0
   120c8:	bne	11bc8 <__assert_fail@plt+0x610>
   120cc:	movw	r1, #2472	; 0x9a8
   120d0:	mov	r0, #0
   120d4:	mov	r2, #5
   120d8:	movt	r1, #2
   120dc:	bl	11318 <dcgettext@plt>
   120e0:	mov	r4, r0
   120e4:	mov	r0, r7
   120e8:	b	121e4 <__assert_fail@plt+0xc2c>
   120ec:	ldr	r0, [sl, #4]
   120f0:	cmp	r0, #3
   120f4:	bne	12104 <__assert_fail@plt+0xb4c>
   120f8:	mov	r0, #1
   120fc:	strb	r0, [sl, #3]
   12100:	b	11bc8 <__assert_fail@plt+0x610>
   12104:	mvn	r0, #-1073741824	; 0xc0000000
   12108:	str	r0, [sl, #28]
   1210c:	str	r0, [sl, #20]
   12110:	b	11bc8 <__assert_fail@plt+0x610>
   12114:	cmn	r0, #3
   12118:	bne	121a8 <__assert_fail@plt+0xbf0>
   1211c:	movw	r0, #12600	; 0x3138
   12120:	movw	r2, #2570	; 0xa0a
   12124:	movw	r4, #2516	; 0x9d4
   12128:	movw	r7, #2554	; 0x9fa
   1212c:	movw	r6, #2542	; 0x9ee
   12130:	movw	r5, #2527	; 0x9df
   12134:	mov	r1, #0
   12138:	movt	r0, #3
   1213c:	movt	r2, #2
   12140:	movt	r4, #2
   12144:	movt	r7, #2
   12148:	movt	r6, #2
   1214c:	movt	r5, #2
   12150:	ldr	r3, [r0]
   12154:	movw	r0, #12708	; 0x31a4
   12158:	stm	sp, {r4, r5, r6, r7}
   1215c:	str	r2, [sp, #16]
   12160:	movw	r2, #2502	; 0x9c6
   12164:	str	r1, [sp, #20]
   12168:	movw	r1, #2430	; 0x97e
   1216c:	movt	r0, #3
   12170:	movt	r1, #2
   12174:	movt	r2, #2
   12178:	ldr	r0, [r0]
   1217c:	bl	1d858 <__assert_fail@plt+0xc2a0>
   12180:	mov	r0, #0
   12184:	bl	11450 <exit@plt>
   12188:	movw	r0, #3231	; 0xc9f
   1218c:	movw	r1, #3256	; 0xcb8
   12190:	movw	r3, #3268	; 0xcc4
   12194:	mov	r2, #147	; 0x93
   12198:	movt	r0, #2
   1219c:	movt	r1, #2
   121a0:	movt	r3, #2
   121a4:	bl	115b8 <__assert_fail@plt>
   121a8:	cmn	r0, #2
   121ac:	bne	121b8 <__assert_fail@plt+0xc00>
   121b0:	mov	r0, #0
   121b4:	bl	116b4 <__assert_fail@plt+0xfc>
   121b8:	mov	r0, #1
   121bc:	bl	116b4 <__assert_fail@plt+0xfc>
   121c0:	movw	r1, #2472	; 0x9a8
   121c4:	mov	r0, #0
   121c8:	mov	r2, #5
   121cc:	movt	r1, #2
   121d0:	bl	11318 <dcgettext@plt>
   121d4:	mov	r4, r0
   121d8:	movw	r0, #12712	; 0x31a8
   121dc:	movt	r0, #3
   121e0:	ldr	r0, [r0]
   121e4:	bl	1cc1c <__assert_fail@plt+0xb664>
   121e8:	mov	r3, r0
   121ec:	mov	r0, #1
   121f0:	mov	r1, #0
   121f4:	mov	r2, r4
   121f8:	bl	113a8 <error@plt>
   121fc:	movw	r1, #2751	; 0xabf
   12200:	movt	r1, #2
   12204:	b	12210 <__assert_fail@plt+0xc58>
   12208:	movw	r1, #2582	; 0xa16
   1220c:	movt	r1, #2
   12210:	mov	r0, #0
   12214:	mov	r2, #5
   12218:	bl	11318 <dcgettext@plt>
   1221c:	mov	r2, r0
   12220:	mov	r0, #0
   12224:	mov	r1, #0
   12228:	bl	113a8 <error@plt>
   1222c:	mov	r0, #1
   12230:	bl	116b4 <__assert_fail@plt+0xfc>
   12234:	bl	1148c <__errno_location@plt>
   12238:	movw	r1, #2629	; 0xa45
   1223c:	ldr	r4, [r0]
   12240:	mov	r0, #0
   12244:	mov	r2, #5
   12248:	movt	r1, #2
   1224c:	bl	11318 <dcgettext@plt>
   12250:	ldr	r1, [sl, #8]
   12254:	mov	r5, r0
   12258:	mov	r0, #4
   1225c:	bl	1c6f4 <__assert_fail@plt+0xb13c>
   12260:	mov	r3, r0
   12264:	mov	r0, #1
   12268:	mov	r1, r4
   1226c:	mov	r2, r5
   12270:	bl	113a8 <error@plt>
   12274:	mov	r0, #1
   12278:	b	116b4 <__assert_fail@plt+0xfc>
   1227c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12280:	add	fp, sp, #28
   12284:	sub	sp, sp, #12
   12288:	mov	r4, r3
   1228c:	mov	r9, r2
   12290:	mov	r7, r1
   12294:	mov	r8, r0
   12298:	bl	11468 <strlen@plt>
   1229c:	ldr	r6, [r7]
   122a0:	cmp	r6, #0
   122a4:	beq	12350 <__assert_fail@plt+0xd98>
   122a8:	mov	r5, r0
   122ac:	cmp	r9, #0
   122b0:	beq	12360 <__assert_fail@plt+0xda8>
   122b4:	add	r0, r7, #4
   122b8:	mvn	sl, #0
   122bc:	mov	r7, #0
   122c0:	str	r9, [sp]
   122c4:	str	r0, [sp, #8]
   122c8:	mov	r0, #0
   122cc:	str	r0, [sp, #4]
   122d0:	mov	r0, r9
   122d4:	b	12318 <__assert_fail@plt+0xd60>
   122d8:	ldr	r0, [sp]
   122dc:	mov	r1, r9
   122e0:	mov	r2, r4
   122e4:	mla	r0, sl, r4, r0
   122e8:	bl	1145c <bcmp@plt>
   122ec:	ldr	r1, [sp, #4]
   122f0:	cmp	r0, #0
   122f4:	movwne	r0, #1
   122f8:	orr	r1, r1, r0
   122fc:	str	r1, [sp, #4]
   12300:	ldr	r0, [sp, #8]
   12304:	add	r9, r9, r4
   12308:	ldr	r6, [r0, r7, lsl #2]
   1230c:	add	r7, r7, #1
   12310:	cmp	r6, #0
   12314:	beq	123d4 <__assert_fail@plt+0xe1c>
   12318:	mov	r0, r6
   1231c:	mov	r1, r8
   12320:	mov	r2, r5
   12324:	bl	1157c <strncmp@plt>
   12328:	cmp	r0, #0
   1232c:	bne	12300 <__assert_fail@plt+0xd48>
   12330:	mov	r0, r6
   12334:	bl	11468 <strlen@plt>
   12338:	cmp	r0, r5
   1233c:	beq	12354 <__assert_fail@plt+0xd9c>
   12340:	cmn	sl, #1
   12344:	bne	122d8 <__assert_fail@plt+0xd20>
   12348:	mov	sl, r7
   1234c:	b	12300 <__assert_fail@plt+0xd48>
   12350:	mvn	r7, #0
   12354:	mov	r0, r7
   12358:	sub	sp, fp, #28
   1235c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12360:	add	r4, r7, #4
   12364:	mov	r0, #0
   12368:	mvn	r9, #0
   1236c:	mvn	sl, #0
   12370:	mov	r7, #0
   12374:	str	r0, [sp, #4]
   12378:	b	123a8 <__assert_fail@plt+0xdf0>
   1237c:	ldr	r1, [sp, #4]
   12380:	subs	r0, sl, r9
   12384:	movwne	r0, #1
   12388:	cmn	sl, #1
   1238c:	moveq	sl, r7
   12390:	orr	r1, r1, r0
   12394:	str	r1, [sp, #4]
   12398:	ldr	r6, [r4, r7, lsl #2]
   1239c:	add	r7, r7, #1
   123a0:	cmp	r6, #0
   123a4:	beq	123d4 <__assert_fail@plt+0xe1c>
   123a8:	mov	r0, r6
   123ac:	mov	r1, r8
   123b0:	mov	r2, r5
   123b4:	bl	1157c <strncmp@plt>
   123b8:	cmp	r0, #0
   123bc:	bne	12398 <__assert_fail@plt+0xde0>
   123c0:	mov	r0, r6
   123c4:	bl	11468 <strlen@plt>
   123c8:	cmp	r0, r5
   123cc:	bne	1237c <__assert_fail@plt+0xdc4>
   123d0:	b	12354 <__assert_fail@plt+0xd9c>
   123d4:	ldr	r0, [sp, #4]
   123d8:	tst	r0, #1
   123dc:	mvnne	sl, #1
   123e0:	mov	r0, sl
   123e4:	sub	sp, fp, #28
   123e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123ec:	push	{r4, r5, r6, r7, fp, lr}
   123f0:	add	fp, sp, #16
   123f4:	mov	r5, r0
   123f8:	ldr	r0, [r1]
   123fc:	mvn	r4, #0
   12400:	cmp	r0, #0
   12404:	beq	12430 <__assert_fail@plt+0xe78>
   12408:	add	r7, r1, #4
   1240c:	mov	r6, #0
   12410:	mov	r1, r5
   12414:	bl	112a0 <strcmp@plt>
   12418:	cmp	r0, #0
   1241c:	beq	12438 <__assert_fail@plt+0xe80>
   12420:	ldr	r0, [r7, r6, lsl #2]
   12424:	add	r6, r6, #1
   12428:	cmp	r0, #0
   1242c:	bne	12410 <__assert_fail@plt+0xe58>
   12430:	mov	r0, r4
   12434:	pop	{r4, r5, r6, r7, fp, pc}
   12438:	mov	r0, r6
   1243c:	pop	{r4, r5, r6, r7, fp, pc}
   12440:	push	{r4, r5, r6, sl, fp, lr}
   12444:	add	fp, sp, #16
   12448:	sub	sp, sp, #8
   1244c:	mov	r5, r0
   12450:	movw	r0, #3599	; 0xe0f
   12454:	mov	r4, r1
   12458:	movw	r1, #3626	; 0xe2a
   1245c:	cmn	r2, #1
   12460:	mov	r2, #5
   12464:	movt	r0, #2
   12468:	movt	r1, #2
   1246c:	moveq	r1, r0
   12470:	mov	r0, #0
   12474:	bl	11318 <dcgettext@plt>
   12478:	mov	r6, r0
   1247c:	mov	r0, #0
   12480:	mov	r1, #8
   12484:	mov	r2, r4
   12488:	bl	1c64c <__assert_fail@plt+0xb094>
   1248c:	mov	r4, r0
   12490:	mov	r0, #1
   12494:	mov	r1, r5
   12498:	bl	1cc0c <__assert_fail@plt+0xb654>
   1249c:	str	r0, [sp]
   124a0:	mov	r0, #0
   124a4:	mov	r1, #0
   124a8:	mov	r2, r6
   124ac:	mov	r3, r4
   124b0:	bl	113a8 <error@plt>
   124b4:	sub	sp, fp, #16
   124b8:	pop	{r4, r5, r6, sl, fp, pc}
   124bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c0:	add	fp, sp, #28
   124c4:	sub	sp, sp, #4
   124c8:	mov	sl, r1
   124cc:	movw	r1, #3655	; 0xe47
   124d0:	mov	r4, r2
   124d4:	mov	r6, r0
   124d8:	mov	r0, #0
   124dc:	mov	r2, #5
   124e0:	mov	r8, #0
   124e4:	movt	r1, #2
   124e8:	bl	11318 <dcgettext@plt>
   124ec:	movw	r1, #12704	; 0x31a0
   124f0:	movt	r1, #3
   124f4:	ldr	r1, [r1]
   124f8:	bl	11270 <fputs_unlocked@plt>
   124fc:	ldr	r7, [r6]
   12500:	cmp	r7, #0
   12504:	beq	125c0 <__assert_fail@plt+0x1008>
   12508:	add	r0, r6, #4
   1250c:	mov	r9, #0
   12510:	mov	r6, #0
   12514:	str	r0, [sp]
   12518:	cmp	r9, #0
   1251c:	bne	12574 <__assert_fail@plt+0xfbc>
   12520:	mov	r5, #0
   12524:	movw	r0, #12704	; 0x31a0
   12528:	movt	r0, #3
   1252c:	ldr	r6, [r0]
   12530:	mov	r0, r7
   12534:	bl	1cc1c <__assert_fail@plt+0xb664>
   12538:	movw	r2, #3676	; 0xe5c
   1253c:	mov	r3, r0
   12540:	mov	r0, r6
   12544:	mov	r1, #1
   12548:	movt	r2, #2
   1254c:	bl	114d4 <__fprintf_chk@plt>
   12550:	add	r6, sl, r5
   12554:	ldr	r0, [sp]
   12558:	add	r8, r8, r4
   1255c:	ldr	r7, [r0, -r9, lsl #2]
   12560:	sub	r9, r9, #1
   12564:	cmp	r7, #0
   12568:	beq	125c0 <__assert_fail@plt+0x1008>
   1256c:	cmp	r9, #0
   12570:	beq	12520 <__assert_fail@plt+0xf68>
   12574:	add	r1, sl, r8
   12578:	mov	r0, r6
   1257c:	mov	r2, r4
   12580:	bl	1145c <bcmp@plt>
   12584:	cmp	r0, #0
   12588:	mov	r5, r8
   1258c:	bne	12524 <__assert_fail@plt+0xf6c>
   12590:	movw	r0, #12704	; 0x31a0
   12594:	movt	r0, #3
   12598:	ldr	r5, [r0]
   1259c:	mov	r0, r7
   125a0:	bl	1cc1c <__assert_fail@plt+0xb664>
   125a4:	movw	r2, #3684	; 0xe64
   125a8:	mov	r3, r0
   125ac:	mov	r0, r5
   125b0:	mov	r1, #1
   125b4:	movt	r2, #2
   125b8:	bl	114d4 <__fprintf_chk@plt>
   125bc:	b	12554 <__assert_fail@plt+0xf9c>
   125c0:	movw	r0, #12704	; 0x31a0
   125c4:	movt	r0, #3
   125c8:	ldr	r0, [r0]
   125cc:	ldr	r1, [r0, #20]
   125d0:	ldr	r2, [r0, #24]
   125d4:	cmp	r1, r2
   125d8:	addcc	r2, r1, #1
   125dc:	strcc	r2, [r0, #20]
   125e0:	movcc	r0, #10
   125e4:	strbcc	r0, [r1]
   125e8:	subcc	sp, fp, #28
   125ec:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125f0:	mov	r1, #10
   125f4:	sub	sp, fp, #28
   125f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125fc:	b	114f8 <__overflow@plt>
   12600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12604:	add	fp, sp, #28
   12608:	sub	sp, sp, #12
   1260c:	mov	sl, r0
   12610:	ldr	r0, [fp, #16]
   12614:	ldr	r9, [fp, #8]
   12618:	mov	r5, r3
   1261c:	mov	r8, r2
   12620:	mov	r6, r1
   12624:	cmp	r0, #0
   12628:	beq	12658 <__assert_fail@plt+0x10a0>
   1262c:	mov	r0, r6
   12630:	mov	r1, r8
   12634:	mov	r2, r5
   12638:	mov	r3, r9
   1263c:	bl	1227c <__assert_fail@plt+0xcc4>
   12640:	mov	r4, r0
   12644:	cmn	r4, #1
   12648:	ble	126a8 <__assert_fail@plt+0x10f0>
   1264c:	mov	r0, r4
   12650:	sub	sp, fp, #28
   12654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12658:	ldr	r0, [r8]
   1265c:	movw	r7, #3599	; 0xe0f
   12660:	str	r5, [sp, #8]
   12664:	movt	r7, #2
   12668:	cmp	r0, #0
   1266c:	beq	126c0 <__assert_fail@plt+0x1108>
   12670:	add	r5, r8, #4
   12674:	mov	r4, #0
   12678:	mov	r1, r6
   1267c:	bl	112a0 <strcmp@plt>
   12680:	cmp	r0, #0
   12684:	beq	1269c <__assert_fail@plt+0x10e4>
   12688:	ldr	r0, [r5, r4, lsl #2]
   1268c:	add	r4, r4, #1
   12690:	cmp	r0, #0
   12694:	bne	12678 <__assert_fail@plt+0x10c0>
   12698:	b	126c0 <__assert_fail@plt+0x1108>
   1269c:	ldr	r5, [sp, #8]
   126a0:	cmn	r4, #1
   126a4:	bgt	1264c <__assert_fail@plt+0x1094>
   126a8:	movw	r0, #3599	; 0xe0f
   126ac:	movw	r7, #3626	; 0xe2a
   126b0:	str	r5, [sp, #8]
   126b4:	movt	r0, #2
   126b8:	movt	r7, #2
   126bc:	moveq	r7, r0
   126c0:	ldr	r5, [fp, #12]
   126c4:	mov	r0, #0
   126c8:	mov	r1, r7
   126cc:	mov	r2, #5
   126d0:	bl	11318 <dcgettext@plt>
   126d4:	mov	r4, r0
   126d8:	mov	r0, #0
   126dc:	mov	r1, #8
   126e0:	mov	r2, r6
   126e4:	bl	1c64c <__assert_fail@plt+0xb094>
   126e8:	mov	r6, r0
   126ec:	mov	r0, #1
   126f0:	mov	r1, sl
   126f4:	bl	1cc0c <__assert_fail@plt+0xb654>
   126f8:	str	r0, [sp]
   126fc:	mov	r0, #0
   12700:	mov	r1, #0
   12704:	mov	r2, r4
   12708:	mov	r3, r6
   1270c:	bl	113a8 <error@plt>
   12710:	ldr	r1, [sp, #8]
   12714:	mov	r0, r8
   12718:	mov	r2, r9
   1271c:	bl	124bc <__assert_fail@plt+0xf04>
   12720:	blx	r5
   12724:	mvn	r4, #0
   12728:	mov	r0, r4
   1272c:	sub	sp, fp, #28
   12730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12734:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12738:	add	fp, sp, #24
   1273c:	ldr	r6, [r1]
   12740:	cmp	r6, #0
   12744:	beq	127a8 <__assert_fail@plt+0x11f0>
   12748:	mov	r8, r1
   1274c:	mov	r7, r2
   12750:	mov	r1, r2
   12754:	mov	r2, r3
   12758:	mov	r4, r3
   1275c:	mov	r9, r0
   12760:	bl	1145c <bcmp@plt>
   12764:	cmp	r0, #0
   12768:	beq	127a0 <__assert_fail@plt+0x11e8>
   1276c:	add	r7, r7, r4
   12770:	add	r5, r8, #4
   12774:	ldr	r6, [r5]
   12778:	cmp	r6, #0
   1277c:	beq	127a8 <__assert_fail@plt+0x11f0>
   12780:	mov	r0, r9
   12784:	mov	r1, r7
   12788:	mov	r2, r4
   1278c:	bl	1145c <bcmp@plt>
   12790:	add	r7, r7, r4
   12794:	add	r5, r5, #4
   12798:	cmp	r0, #0
   1279c:	bne	12774 <__assert_fail@plt+0x11bc>
   127a0:	mov	r0, r6
   127a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127a8:	mov	r6, #0
   127ac:	mov	r0, r6
   127b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127b4:	movw	r1, #12752	; 0x31d0
   127b8:	movt	r1, #3
   127bc:	str	r0, [r1, #4]
   127c0:	bx	lr
   127c4:	movw	r1, #12752	; 0x31d0
   127c8:	movt	r1, #3
   127cc:	strb	r0, [r1]
   127d0:	bx	lr
   127d4:	push	{r4, r5, r6, sl, fp, lr}
   127d8:	add	fp, sp, #16
   127dc:	sub	sp, sp, #8
   127e0:	movw	r0, #12708	; 0x31a4
   127e4:	movt	r0, #3
   127e8:	ldr	r0, [r0]
   127ec:	bl	1e0e4 <__assert_fail@plt+0xcb2c>
   127f0:	cmp	r0, #0
   127f4:	beq	1281c <__assert_fail@plt+0x1264>
   127f8:	movw	r5, #12752	; 0x31d0
   127fc:	movt	r5, #3
   12800:	ldrb	r0, [r5]
   12804:	cmp	r0, #0
   12808:	beq	12848 <__assert_fail@plt+0x1290>
   1280c:	bl	1148c <__errno_location@plt>
   12810:	ldr	r0, [r0]
   12814:	cmp	r0, #32
   12818:	bne	12848 <__assert_fail@plt+0x1290>
   1281c:	movw	r0, #12704	; 0x31a0
   12820:	movt	r0, #3
   12824:	ldr	r0, [r0]
   12828:	bl	1e0e4 <__assert_fail@plt+0xcb2c>
   1282c:	cmp	r0, #0
   12830:	subeq	sp, fp, #16
   12834:	popeq	{r4, r5, r6, sl, fp, pc}
   12838:	movw	r0, #12608	; 0x3140
   1283c:	movt	r0, #3
   12840:	ldr	r0, [r0]
   12844:	bl	112e8 <_exit@plt>
   12848:	movw	r1, #3689	; 0xe69
   1284c:	mov	r0, #0
   12850:	mov	r2, #5
   12854:	movt	r1, #2
   12858:	bl	11318 <dcgettext@plt>
   1285c:	ldr	r6, [r5, #4]
   12860:	mov	r4, r0
   12864:	bl	1148c <__errno_location@plt>
   12868:	ldr	r5, [r0]
   1286c:	cmp	r6, #0
   12870:	bne	1288c <__assert_fail@plt+0x12d4>
   12874:	movw	r2, #3686	; 0xe66
   12878:	mov	r0, #0
   1287c:	mov	r1, r5
   12880:	mov	r3, r4
   12884:	movt	r2, #2
   12888:	b	128ac <__assert_fail@plt+0x12f4>
   1288c:	mov	r0, r6
   12890:	bl	1c894 <__assert_fail@plt+0xb2dc>
   12894:	movw	r2, #3701	; 0xe75
   12898:	mov	r3, r0
   1289c:	str	r4, [sp]
   128a0:	mov	r0, #0
   128a4:	mov	r1, r5
   128a8:	movt	r2, #2
   128ac:	bl	113a8 <error@plt>
   128b0:	movw	r0, #12608	; 0x3140
   128b4:	movt	r0, #3
   128b8:	ldr	r0, [r0]
   128bc:	bl	112e8 <_exit@plt>
   128c0:	push	{r4, r5, r6, r7, fp, lr}
   128c4:	add	fp, sp, #16
   128c8:	mov	r5, r0
   128cc:	mov	r0, r1
   128d0:	mov	r1, r2
   128d4:	mov	r2, r3
   128d8:	bl	113b4 <open64@plt>
   128dc:	mov	r4, r0
   128e0:	cmp	r0, r5
   128e4:	beq	12920 <__assert_fail@plt+0x1368>
   128e8:	cmp	r4, #0
   128ec:	bmi	12920 <__assert_fail@plt+0x1368>
   128f0:	mov	r0, r4
   128f4:	mov	r1, r5
   128f8:	bl	11324 <dup2@plt>
   128fc:	mov	r5, r0
   12900:	bl	1148c <__errno_location@plt>
   12904:	ldr	r7, [r0]
   12908:	mov	r6, r0
   1290c:	mov	r0, r4
   12910:	bl	11594 <close@plt>
   12914:	mov	r0, r5
   12918:	str	r7, [r6]
   1291c:	pop	{r4, r5, r6, r7, fp, pc}
   12920:	mov	r0, r4
   12924:	pop	{r4, r5, r6, r7, fp, pc}
   12928:	push	{r4, r5, r6, r7, fp, lr}
   1292c:	add	fp, sp, #16
   12930:	mov	r4, r3
   12934:	mov	r5, r2
   12938:	mov	r6, r1
   1293c:	mov	r7, r0
   12940:	cmp	r0, #0
   12944:	bmi	129a0 <__assert_fail@plt+0x13e8>
   12948:	mov	r0, r7
   1294c:	mov	r1, r4
   12950:	bl	11540 <futimens@plt>
   12954:	cmp	r5, #0
   12958:	beq	129ac <__assert_fail@plt+0x13f4>
   1295c:	cmp	r7, #0
   12960:	bmi	12980 <__assert_fail@plt+0x13c8>
   12964:	cmn	r0, #1
   12968:	bne	129ac <__assert_fail@plt+0x13f4>
   1296c:	bl	1148c <__errno_location@plt>
   12970:	ldr	r1, [r0]
   12974:	mvn	r0, #0
   12978:	cmp	r1, #38	; 0x26
   1297c:	bne	129c4 <__assert_fail@plt+0x140c>
   12980:	ldr	r3, [fp, #8]
   12984:	mov	r0, r6
   12988:	mov	r1, r5
   1298c:	mov	r2, r4
   12990:	bl	11294 <utimensat@plt>
   12994:	cmp	r0, #1
   12998:	beq	129b4 <__assert_fail@plt+0x13fc>
   1299c:	b	129c4 <__assert_fail@plt+0x140c>
   129a0:	mov	r0, #1
   129a4:	cmp	r5, #0
   129a8:	bne	1295c <__assert_fail@plt+0x13a4>
   129ac:	cmp	r0, #1
   129b0:	bne	129c4 <__assert_fail@plt+0x140c>
   129b4:	bl	1148c <__errno_location@plt>
   129b8:	mov	r1, #9
   129bc:	str	r1, [r0]
   129c0:	mvn	r0, #0
   129c4:	pop	{r4, r5, r6, r7, fp, pc}
   129c8:	mov	r1, r0
   129cc:	mov	r0, #0
   129d0:	b	112dc <clock_gettime@plt>
   129d4:	push	{fp, lr}
   129d8:	mov	fp, sp
   129dc:	mov	r1, r0
   129e0:	mov	r0, #0
   129e4:	bl	112dc <clock_gettime@plt>
   129e8:	pop	{fp, pc}
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f0:	add	fp, sp, #28
   129f4:	sub	sp, sp, #4
   129f8:	vpush	{d8-d9}
   129fc:	sub	sp, sp, #408	; 0x198
   12a00:	sub	sp, sp, #1024	; 0x400
   12a04:	mov	r9, r0
   12a08:	add	r0, r0, #48	; 0x30
   12a0c:	sub	r1, fp, #72	; 0x48
   12a10:	movw	lr, #3768	; 0xeb8
   12a14:	vmov.i32	q4, #0	; 0x00000000
   12a18:	add	r3, sp, #248	; 0xf8
   12a1c:	sub	r4, fp, #112	; 0x70
   12a20:	mov	r8, #0
   12a24:	mov	r7, #0
   12a28:	str	r0, [sp, #92]	; 0x5c
   12a2c:	add	r0, r1, #1
   12a30:	movt	lr, #2
   12a34:	add	ip, r1, #19
   12a38:	str	r0, [sp, #84]	; 0x54
   12a3c:	add	r0, r9, #8
   12a40:	str	ip, [sp, #176]	; 0xb0
   12a44:	str	r0, [sp, #96]	; 0x60
   12a48:	add	r0, r9, #32
   12a4c:	str	r0, [sp, #100]	; 0x64
   12a50:	add	r0, r9, #40	; 0x28
   12a54:	str	r0, [sp, #88]	; 0x58
   12a58:	add	r0, r9, #56	; 0x38
   12a5c:	str	r0, [sp, #168]	; 0xa8
   12a60:	add	r0, r9, #64	; 0x40
   12a64:	str	r0, [sp, #164]	; 0xa4
   12a68:	add	r0, r9, #72	; 0x48
   12a6c:	str	r0, [sp, #144]	; 0x90
   12a70:	add	r0, r9, #80	; 0x50
   12a74:	str	r0, [sp, #140]	; 0x8c
   12a78:	add	r0, r9, #88	; 0x58
   12a7c:	str	r0, [sp, #80]	; 0x50
   12a80:	add	r0, r9, #96	; 0x60
   12a84:	str	r0, [sp, #124]	; 0x7c
   12a88:	add	r0, r9, #104	; 0x68
   12a8c:	str	r0, [sp, #120]	; 0x78
   12a90:	add	r0, r9, #112	; 0x70
   12a94:	str	r0, [sp, #116]	; 0x74
   12a98:	add	r0, r9, #120	; 0x78
   12a9c:	str	r0, [sp, #112]	; 0x70
   12aa0:	add	r0, r9, #128	; 0x80
   12aa4:	str	r0, [sp, #108]	; 0x6c
   12aa8:	add	r0, r9, #136	; 0x88
   12aac:	str	r0, [sp, #104]	; 0x68
   12ab0:	mov	r0, #0
   12ab4:	strh	r0, [fp, #-112]	; 0xffffff90
   12ab8:	mvn	r0, #1
   12abc:	str	r0, [sp, #184]	; 0xb8
   12ac0:	mov	r0, #0
   12ac4:	str	r0, [sp, #128]	; 0x80
   12ac8:	mov	r0, #0
   12acc:	str	r0, [sp, #132]	; 0x84
   12ad0:	mov	r0, #0
   12ad4:	str	r0, [sp, #136]	; 0x88
   12ad8:	mov	r0, #0
   12adc:	str	r0, [sp, #152]	; 0x98
   12ae0:	mov	r0, #0
   12ae4:	str	r0, [sp, #160]	; 0xa0
   12ae8:	mov	r0, #0
   12aec:	str	r0, [sp, #148]	; 0x94
   12af0:	cmp	r8, #12
   12af4:	bne	12b28 <__assert_fail@plt+0x1570>
   12af8:	b	16b68 <__assert_fail@plt+0x55b0>
   12afc:	movw	r1, #4710	; 0x1266
   12b00:	movt	r1, #2
   12b04:	add	r0, r1, r0
   12b08:	ldrsb	r8, [r0]
   12b0c:	add	r7, r7, #1
   12b10:	add	r0, r4, r7, lsl #1
   12b14:	cmp	r7, #18
   12b18:	strh	r8, [r0]
   12b1c:	bgt	16b70 <__assert_fail@plt+0x55b8>
   12b20:	cmp	r8, #12
   12b24:	beq	16b68 <__assert_fail@plt+0x55b0>
   12b28:	add	r0, lr, r8
   12b2c:	str	r7, [sp, #192]	; 0xc0
   12b30:	ldrsb	sl, [r0]
   12b34:	cmn	sl, #93	; 0x5d
   12b38:	beq	1417c <__assert_fail@plt+0x2bc4>
   12b3c:	ldr	r6, [sp, #184]	; 0xb8
   12b40:	cmn	r6, #2
   12b44:	bne	140f0 <__assert_fail@plt+0x2b38>
   12b48:	ldr	r5, [r9]
   12b4c:	str	r3, [sp, #180]	; 0xb4
   12b50:	ldrb	r0, [r5]
   12b54:	sub	r1, r0, #9
   12b58:	cmp	r1, #5
   12b5c:	bcs	12b78 <__assert_fail@plt+0x15c0>
   12b60:	add	r5, r5, #1
   12b64:	str	r5, [r9]
   12b68:	ldrb	r0, [r5]
   12b6c:	sub	r1, r0, #9
   12b70:	cmp	r1, #5
   12b74:	bcc	12b60 <__assert_fail@plt+0x15a8>
   12b78:	cmp	r0, #32
   12b7c:	beq	12b60 <__assert_fail@plt+0x15a8>
   12b80:	sub	r1, r0, #48	; 0x30
   12b84:	cmp	r1, #10
   12b88:	bcs	12b9c <__assert_fail@plt+0x15e4>
   12b8c:	cmp	r0, #45	; 0x2d
   12b90:	cmpne	r0, #43	; 0x2b
   12b94:	beq	12cfc <__assert_fail@plt+0x1744>
   12b98:	b	12fc4 <__assert_fail@plt+0x1a0c>
   12b9c:	sub	r1, r0, #40	; 0x28
   12ba0:	cmp	r1, #82	; 0x52
   12ba4:	bhi	13f70 <__assert_fail@plt+0x29b8>
   12ba8:	add	r2, pc, #0
   12bac:	ldr	pc, [r2, r1, lsl #2]
   12bb0:	andeq	r2, r1, r0, asr #26
   12bb4:	andeq	r3, r1, r0, ror pc
   12bb8:	andeq	r3, r1, r0, ror pc
   12bbc:	strdeq	r2, [r1], -ip
   12bc0:	andeq	r3, r1, r0, ror pc
   12bc4:	strdeq	r2, [r1], -ip
   12bc8:	andeq	r3, r1, r0, ror pc
   12bcc:	andeq	r3, r1, r0, ror pc
   12bd0:	andeq	r3, r1, r0, ror pc
   12bd4:	andeq	r3, r1, r0, ror pc
   12bd8:	andeq	r3, r1, r0, ror pc
   12bdc:	andeq	r3, r1, r0, ror pc
   12be0:	andeq	r3, r1, r0, ror pc
   12be4:	andeq	r3, r1, r0, ror pc
   12be8:	andeq	r3, r1, r0, ror pc
   12bec:	andeq	r3, r1, r0, ror pc
   12bf0:	andeq	r3, r1, r0, ror pc
   12bf4:	andeq	r3, r1, r0, ror pc
   12bf8:	andeq	r3, r1, r0, ror pc
   12bfc:	andeq	r3, r1, r0, ror pc
   12c00:	andeq	r3, r1, r0, ror pc
   12c04:	andeq	r3, r1, r0, ror pc
   12c08:	andeq	r3, r1, r0, ror pc
   12c0c:	andeq	r3, r1, r0, ror pc
   12c10:	andeq	r3, r1, r0, ror pc
   12c14:	ldrdeq	r2, [r1], -r4
   12c18:	ldrdeq	r2, [r1], -r4
   12c1c:	ldrdeq	r2, [r1], -r4
   12c20:	ldrdeq	r2, [r1], -r4
   12c24:	ldrdeq	r2, [r1], -r4
   12c28:	ldrdeq	r2, [r1], -r4
   12c2c:	ldrdeq	r2, [r1], -r4
   12c30:	ldrdeq	r2, [r1], -r4
   12c34:	ldrdeq	r2, [r1], -r4
   12c38:	ldrdeq	r2, [r1], -r4
   12c3c:	ldrdeq	r2, [r1], -r4
   12c40:	ldrdeq	r2, [r1], -r4
   12c44:	ldrdeq	r2, [r1], -r4
   12c48:	ldrdeq	r2, [r1], -r4
   12c4c:	ldrdeq	r2, [r1], -r4
   12c50:	ldrdeq	r2, [r1], -r4
   12c54:	ldrdeq	r2, [r1], -r4
   12c58:	ldrdeq	r2, [r1], -r4
   12c5c:	ldrdeq	r2, [r1], -r4
   12c60:	ldrdeq	r2, [r1], -r4
   12c64:	ldrdeq	r2, [r1], -r4
   12c68:	ldrdeq	r2, [r1], -r4
   12c6c:	ldrdeq	r2, [r1], -r4
   12c70:	ldrdeq	r2, [r1], -r4
   12c74:	ldrdeq	r2, [r1], -r4
   12c78:	ldrdeq	r2, [r1], -r4
   12c7c:	andeq	r3, r1, r0, ror pc
   12c80:	andeq	r3, r1, r0, ror pc
   12c84:	andeq	r3, r1, r0, ror pc
   12c88:	andeq	r3, r1, r0, ror pc
   12c8c:	andeq	r3, r1, r0, ror pc
   12c90:	andeq	r3, r1, r0, ror pc
   12c94:	ldrdeq	r2, [r1], -r4
   12c98:	ldrdeq	r2, [r1], -r4
   12c9c:	ldrdeq	r2, [r1], -r4
   12ca0:	ldrdeq	r2, [r1], -r4
   12ca4:	ldrdeq	r2, [r1], -r4
   12ca8:	ldrdeq	r2, [r1], -r4
   12cac:	ldrdeq	r2, [r1], -r4
   12cb0:	ldrdeq	r2, [r1], -r4
   12cb4:	ldrdeq	r2, [r1], -r4
   12cb8:	ldrdeq	r2, [r1], -r4
   12cbc:	ldrdeq	r2, [r1], -r4
   12cc0:	ldrdeq	r2, [r1], -r4
   12cc4:	ldrdeq	r2, [r1], -r4
   12cc8:	ldrdeq	r2, [r1], -r4
   12ccc:	ldrdeq	r2, [r1], -r4
   12cd0:	ldrdeq	r2, [r1], -r4
   12cd4:	ldrdeq	r2, [r1], -r4
   12cd8:	ldrdeq	r2, [r1], -r4
   12cdc:	ldrdeq	r2, [r1], -r4
   12ce0:	ldrdeq	r2, [r1], -r4
   12ce4:	ldrdeq	r2, [r1], -r4
   12ce8:	ldrdeq	r2, [r1], -r4
   12cec:	ldrdeq	r2, [r1], -r4
   12cf0:	ldrdeq	r2, [r1], -r4
   12cf4:	ldrdeq	r2, [r1], -r4
   12cf8:	ldrdeq	r2, [r1], -r4
   12cfc:	add	r2, r5, #1
   12d00:	mov	r1, r5
   12d04:	b	12d10 <__assert_fail@plt+0x1758>
   12d08:	add	r1, r1, #1
   12d0c:	add	r2, r2, #1
   12d10:	str	r2, [r9]
   12d14:	ldrb	r3, [r2]
   12d18:	sub	r6, r3, #9
   12d1c:	cmp	r6, #5
   12d20:	bcc	12d08 <__assert_fail@plt+0x1750>
   12d24:	cmp	r3, #32
   12d28:	beq	12d08 <__assert_fail@plt+0x1750>
   12d2c:	sub	r6, r3, #48	; 0x30
   12d30:	mov	r5, r2
   12d34:	cmp	r6, #9
   12d38:	bhi	12b68 <__assert_fail@plt+0x15b0>
   12d3c:	b	12d98 <__assert_fail@plt+0x17e0>
   12d40:	mov	r0, #0
   12d44:	b	12d54 <__assert_fail@plt+0x179c>
   12d48:	sub	r0, r0, #1
   12d4c:	cmp	r0, #0
   12d50:	beq	12b68 <__assert_fail@plt+0x15b0>
   12d54:	mov	r1, r5
   12d58:	add	r5, r5, #1
   12d5c:	str	r5, [r9]
   12d60:	ldrb	r1, [r1]
   12d64:	cmp	r1, #40	; 0x28
   12d68:	beq	12d80 <__assert_fail@plt+0x17c8>
   12d6c:	cmp	r1, #41	; 0x29
   12d70:	beq	12d48 <__assert_fail@plt+0x1790>
   12d74:	cmp	r1, #0
   12d78:	bne	12d4c <__assert_fail@plt+0x1794>
   12d7c:	b	12d90 <__assert_fail@plt+0x17d8>
   12d80:	add	r0, r0, #1
   12d84:	cmp	r0, #0
   12d88:	bne	12d54 <__assert_fail@plt+0x179c>
   12d8c:	b	12b68 <__assert_fail@plt+0x15b0>
   12d90:	ldr	r3, [sp, #180]	; 0xb4
   12d94:	b	1412c <__assert_fail@plt+0x2b74>
   12d98:	cmp	r0, #45	; 0x2d
   12d9c:	bne	13af0 <__assert_fail@plt+0x2538>
   12da0:	mov	r0, #0
   12da4:	cmp	r0, #0
   12da8:	bmi	12dc0 <__assert_fail@plt+0x1808>
   12dac:	movw	r5, #52428	; 0xcccc
   12db0:	movt	r5, #3276	; 0xccc
   12db4:	cmp	r0, r5
   12db8:	ble	12dd8 <__assert_fail@plt+0x1820>
   12dbc:	b	13bac <__assert_fail@plt+0x25f4>
   12dc0:	cmn	r0, #1
   12dc4:	beq	12dd8 <__assert_fail@plt+0x1820>
   12dc8:	mov	r5, #-2147483648	; 0x80000000
   12dcc:	sdiv	r6, r5, r0
   12dd0:	cmp	r6, #10
   12dd4:	blt	13bac <__assert_fail@plt+0x25f4>
   12dd8:	add	r6, r0, r0, lsl #2
   12ddc:	uxtb	r0, r3
   12de0:	rsb	r0, r0, r6, lsl #1
   12de4:	add	r0, r0, #48	; 0x30
   12de8:	cmp	r0, r6, lsl #1
   12dec:	bvs	13bac <__assert_fail@plt+0x25f4>
   12df0:	ldrb	r3, [r1, #2]
   12df4:	add	r6, r1, #1
   12df8:	sub	r1, r3, #48	; 0x30
   12dfc:	cmp	r1, #10
   12e00:	mov	r1, r6
   12e04:	bcc	12da4 <__assert_fail@plt+0x17ec>
   12e08:	mvn	r1, #0
   12e0c:	add	r5, r6, #1
   12e10:	str	r1, [sp, #244]	; 0xf4
   12e14:	mov	r1, #1
   12e18:	str	r1, [sp, #240]	; 0xf0
   12e1c:	orr	r1, r3, #2
   12e20:	cmp	r1, #46	; 0x2e
   12e24:	bne	13b70 <__assert_fail@plt+0x25b8>
   12e28:	ldrb	r1, [r6, #2]
   12e2c:	sub	r3, r1, #48	; 0x30
   12e30:	cmp	r3, #9
   12e34:	bhi	13b70 <__assert_fail@plt+0x25b8>
   12e38:	mov	r1, r6
   12e3c:	add	r3, r3, r3, lsl #2
   12e40:	ldrb	r2, [r1, #3]!
   12e44:	sub	r2, r2, #48	; 0x30
   12e48:	cmp	r2, #10
   12e4c:	str	r2, [sp, #236]	; 0xec
   12e50:	mov	r2, #3
   12e54:	movwcc	r2, #4
   12e58:	addcc	r1, r6, #4
   12e5c:	ldrb	r2, [r6, r2]
   12e60:	sub	r2, r2, #48	; 0x30
   12e64:	cmp	r2, #10
   12e68:	str	r2, [sp, #232]	; 0xe8
   12e6c:	addcc	r1, r1, #1
   12e70:	mov	r2, r1
   12e74:	ldrb	r6, [r2], #1
   12e78:	sub	r7, r6, #48	; 0x30
   12e7c:	cmp	r7, #10
   12e80:	str	r7, [sp, #228]	; 0xe4
   12e84:	movcs	r2, r1
   12e88:	mov	r1, r2
   12e8c:	ldrb	r6, [r1], #1
   12e90:	sub	r7, r6, #48	; 0x30
   12e94:	cmp	r7, #10
   12e98:	movcs	r1, r2
   12e9c:	mov	r2, r1
   12ea0:	ldrb	r5, [r2], #1
   12ea4:	sub	r5, r5, #48	; 0x30
   12ea8:	cmp	r5, #10
   12eac:	movcs	r2, r1
   12eb0:	mov	r1, r2
   12eb4:	ldrb	r6, [r1], #1
   12eb8:	sub	r4, r6, #48	; 0x30
   12ebc:	cmp	r4, #10
   12ec0:	movcs	r1, r2
   12ec4:	mov	r6, r1
   12ec8:	ldrb	r2, [r6], #1
   12ecc:	sub	lr, r2, #48	; 0x30
   12ed0:	cmp	lr, #10
   12ed4:	movcs	r6, r1
   12ed8:	mov	r2, r6
   12edc:	ldrb	r1, [r2], #1
   12ee0:	sub	ip, r1, #48	; 0x30
   12ee4:	ldr	r1, [sp, #236]	; 0xec
   12ee8:	cmp	ip, #10
   12eec:	movcs	r2, r6
   12ef0:	lsl	r6, r3, #1
   12ef4:	cmp	r1, #10
   12ef8:	addcc	r6, r1, r3, lsl #1
   12efc:	ldr	r1, [sp, #232]	; 0xe8
   12f00:	add	r3, r6, r6, lsl #2
   12f04:	cmp	r1, #10
   12f08:	lsl	r6, r3, #1
   12f0c:	addcc	r6, r1, r3, lsl #1
   12f10:	ldr	r1, [sp, #228]	; 0xe4
   12f14:	add	r3, r6, r6, lsl #2
   12f18:	cmp	r1, #10
   12f1c:	lsl	r6, r3, #1
   12f20:	addcc	r6, r1, r3, lsl #1
   12f24:	cmp	r7, #10
   12f28:	add	r3, r6, r6, lsl #2
   12f2c:	lsl	r6, r3, #1
   12f30:	addcc	r6, r7, r3, lsl #1
   12f34:	cmp	r5, #10
   12f38:	add	r3, r6, r6, lsl #2
   12f3c:	lsl	r6, r3, #1
   12f40:	addcc	r6, r5, r3, lsl #1
   12f44:	cmp	r4, #10
   12f48:	add	r3, r6, r6, lsl #2
   12f4c:	lsl	r5, r3, #1
   12f50:	addcc	r5, r4, r3, lsl #1
   12f54:	cmp	lr, #10
   12f58:	add	r3, r5, r5, lsl #2
   12f5c:	ldr	r5, [sp, #240]	; 0xf0
   12f60:	lsl	r6, r3, #1
   12f64:	addcc	r6, lr, r3, lsl #1
   12f68:	cmp	ip, #10
   12f6c:	add	r6, r6, r6, lsl #2
   12f70:	lsl	r3, r6, #1
   12f74:	addcc	r3, ip, r6, lsl #1
   12f78:	cmp	r5, #0
   12f7c:	beq	13bcc <__assert_fail@plt+0x2614>
   12f80:	ldrb	r1, [r2]
   12f84:	ldr	ip, [sp, #176]	; 0xb0
   12f88:	ldr	r7, [sp, #192]	; 0xc0
   12f8c:	movw	lr, #3768	; 0xeb8
   12f90:	sub	r4, fp, #112	; 0x70
   12f94:	movt	lr, #2
   12f98:	sub	r6, r1, #48	; 0x30
   12f9c:	cmp	r6, #9
   12fa0:	bhi	13ec0 <__assert_fail@plt+0x2908>
   12fa4:	uxtb	r1, r1
   12fa8:	cmp	r1, #48	; 0x30
   12fac:	bne	13ebc <__assert_fail@plt+0x2904>
   12fb0:	ldrb	r1, [r2, #1]!
   12fb4:	sub	r6, r1, #48	; 0x30
   12fb8:	cmp	r6, #10
   12fbc:	bcc	12fa4 <__assert_fail@plt+0x19ec>
   12fc0:	b	13ec0 <__assert_fail@plt+0x2908>
   12fc4:	mov	r6, #0
   12fc8:	mov	r2, r5
   12fcc:	mov	r3, r0
   12fd0:	b	13af8 <__assert_fail@plt+0x2540>
   12fd4:	sub	r1, fp, #72	; 0x48
   12fd8:	cmp	r1, ip
   12fdc:	bcs	12fec <__assert_fail@plt+0x1a34>
   12fe0:	strb	r0, [r1], #1
   12fe4:	ldr	r0, [r9]
   12fe8:	b	12ff0 <__assert_fail@plt+0x1a38>
   12fec:	mov	r0, r5
   12ff0:	add	r5, r0, #1
   12ff4:	mov	r2, #1
   12ff8:	str	r5, [r9]
   12ffc:	ldrb	r0, [r0, #1]
   13000:	sub	r3, r0, #65	; 0x41
   13004:	cmp	r3, #26
   13008:	subcs	r3, r0, #97	; 0x61
   1300c:	cmpcs	r3, #26
   13010:	movcs	r2, #0
   13014:	cmp	r0, #46	; 0x2e
   13018:	beq	12fd8 <__assert_fail@plt+0x1a20>
   1301c:	cmp	r2, #0
   13020:	bne	12fd8 <__assert_fail@plt+0x1a20>
   13024:	mov	r0, #0
   13028:	mov	r5, r4
   1302c:	mvn	r3, #96	; 0x60
   13030:	strb	r0, [r1]
   13034:	ldrb	r0, [fp, #-72]	; 0xffffffb8
   13038:	cmp	r0, #0
   1303c:	beq	13064 <__assert_fail@plt+0x1aac>
   13040:	ldr	r1, [sp, #84]	; 0x54
   13044:	uxtab	r2, r3, r0
   13048:	cmp	r2, #26
   1304c:	subcc	r0, r0, #32
   13050:	strb	r0, [r1, #-1]
   13054:	ldrb	r0, [r1]
   13058:	add	r1, r1, #1
   1305c:	cmp	r0, #0
   13060:	bne	13044 <__assert_fail@plt+0x1a8c>
   13064:	movw	r1, #7093	; 0x1bb5
   13068:	sub	r4, fp, #72	; 0x48
   1306c:	mov	r2, #3
   13070:	movt	r1, #2
   13074:	mov	r0, r4
   13078:	bl	1145c <bcmp@plt>
   1307c:	cmp	r0, #0
   13080:	movw	r0, #4920	; 0x1338
   13084:	movt	r0, #2
   13088:	beq	140bc <__assert_fail@plt+0x2b04>
   1308c:	movw	r1, #7096	; 0x1bb8
   13090:	mov	r0, r4
   13094:	mov	r2, #5
   13098:	movt	r1, #2
   1309c:	bl	1145c <bcmp@plt>
   130a0:	cmp	r0, #0
   130a4:	beq	13bbc <__assert_fail@plt+0x2604>
   130a8:	movw	r1, #7101	; 0x1bbd
   130ac:	mov	r0, r4
   130b0:	mov	r2, #3
   130b4:	movt	r1, #2
   130b8:	bl	1145c <bcmp@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	13be4 <__assert_fail@plt+0x262c>
   130c4:	movw	r1, #7104	; 0x1bc0
   130c8:	mov	r0, r4
   130cc:	mov	r2, #5
   130d0:	movt	r1, #2
   130d4:	bl	1145c <bcmp@plt>
   130d8:	cmp	r0, #0
   130dc:	beq	13bf4 <__assert_fail@plt+0x263c>
   130e0:	mov	r0, r4
   130e4:	bl	11468 <strlen@plt>
   130e8:	mov	r6, r0
   130ec:	cmp	r0, #3
   130f0:	beq	13108 <__assert_fail@plt+0x1b50>
   130f4:	cmp	r6, #4
   130f8:	bne	13c04 <__assert_fail@plt+0x264c>
   130fc:	ldrb	r0, [fp, #-69]	; 0xffffffbb
   13100:	cmp	r0, #46	; 0x2e
   13104:	bne	13c04 <__assert_fail@plt+0x264c>
   13108:	movw	r1, #7109	; 0x1bc5
   1310c:	mov	r0, r4
   13110:	mov	r2, #3
   13114:	movt	r1, #2
   13118:	bl	1145c <bcmp@plt>
   1311c:	cmp	r0, #0
   13120:	movw	r0, #4980	; 0x1374
   13124:	movt	r0, #2
   13128:	beq	140bc <__assert_fail@plt+0x2b04>
   1312c:	movw	r1, #7117	; 0x1bcd
   13130:	mov	r0, r4
   13134:	mov	r2, #3
   13138:	movt	r1, #2
   1313c:	bl	1145c <bcmp@plt>
   13140:	cmp	r0, #0
   13144:	beq	13f54 <__assert_fail@plt+0x299c>
   13148:	movw	r1, #7126	; 0x1bd6
   1314c:	mov	r0, r4
   13150:	mov	r2, #3
   13154:	movt	r1, #2
   13158:	bl	1145c <bcmp@plt>
   1315c:	cmp	r0, #0
   13160:	beq	13f60 <__assert_fail@plt+0x29a8>
   13164:	movw	r1, #7132	; 0x1bdc
   13168:	mov	r0, r4
   1316c:	mov	r2, #3
   13170:	movt	r1, #2
   13174:	bl	1145c <bcmp@plt>
   13178:	cmp	r0, #0
   1317c:	beq	13f80 <__assert_fail@plt+0x29c8>
   13180:	movw	r1, #7138	; 0x1be2
   13184:	mov	r0, r4
   13188:	mov	r2, #3
   1318c:	movt	r1, #2
   13190:	bl	1145c <bcmp@plt>
   13194:	cmp	r0, #0
   13198:	beq	13f90 <__assert_fail@plt+0x29d8>
   1319c:	movw	r1, #7142	; 0x1be6
   131a0:	mov	r0, r4
   131a4:	mov	r2, #3
   131a8:	movt	r1, #2
   131ac:	bl	1145c <bcmp@plt>
   131b0:	cmp	r0, #0
   131b4:	beq	13fa0 <__assert_fail@plt+0x29e8>
   131b8:	movw	r1, #7147	; 0x1beb
   131bc:	mov	r0, r4
   131c0:	mov	r2, #3
   131c4:	movt	r1, #2
   131c8:	bl	1145c <bcmp@plt>
   131cc:	cmp	r0, #0
   131d0:	beq	13fb0 <__assert_fail@plt+0x29f8>
   131d4:	movw	r1, #7152	; 0x1bf0
   131d8:	mov	r0, r4
   131dc:	mov	r2, #3
   131e0:	movt	r1, #2
   131e4:	bl	1145c <bcmp@plt>
   131e8:	cmp	r0, #0
   131ec:	beq	13fc0 <__assert_fail@plt+0x2a08>
   131f0:	movw	r1, #7159	; 0x1bf7
   131f4:	mov	r0, r4
   131f8:	mov	r2, #3
   131fc:	movt	r1, #2
   13200:	bl	1145c <bcmp@plt>
   13204:	cmp	r0, #0
   13208:	beq	13fd0 <__assert_fail@plt+0x2a18>
   1320c:	movw	r1, #7169	; 0x1c01
   13210:	mov	r0, r4
   13214:	mov	r2, #3
   13218:	movt	r1, #2
   1321c:	bl	1145c <bcmp@plt>
   13220:	cmp	r0, #0
   13224:	beq	13fe0 <__assert_fail@plt+0x2a28>
   13228:	movw	r1, #7174	; 0x1c06
   1322c:	mov	r0, r4
   13230:	mov	r2, #3
   13234:	movt	r1, #2
   13238:	bl	1145c <bcmp@plt>
   1323c:	cmp	r0, #0
   13240:	beq	13ff0 <__assert_fail@plt+0x2a38>
   13244:	movw	r1, #7182	; 0x1c0e
   13248:	mov	r0, r4
   1324c:	mov	r2, #3
   13250:	movt	r1, #2
   13254:	bl	1145c <bcmp@plt>
   13258:	cmp	r0, #0
   1325c:	beq	14000 <__assert_fail@plt+0x2a48>
   13260:	movw	r1, #7191	; 0x1c17
   13264:	mov	r0, r4
   13268:	mov	r2, #3
   1326c:	movt	r1, #2
   13270:	bl	1145c <bcmp@plt>
   13274:	cmp	r0, #0
   13278:	beq	14010 <__assert_fail@plt+0x2a58>
   1327c:	movw	r1, #7200	; 0x1c20
   13280:	mov	r0, r4
   13284:	mov	r2, #3
   13288:	movt	r1, #2
   1328c:	bl	1145c <bcmp@plt>
   13290:	cmp	r0, #0
   13294:	beq	14020 <__assert_fail@plt+0x2a68>
   13298:	movw	r1, #7207	; 0x1c27
   1329c:	sub	r0, fp, #72	; 0x48
   132a0:	mov	r2, #3
   132a4:	movt	r1, #2
   132a8:	bl	1145c <bcmp@plt>
   132ac:	cmp	r0, #0
   132b0:	beq	14030 <__assert_fail@plt+0x2a78>
   132b4:	movw	r1, #7214	; 0x1c2e
   132b8:	sub	r0, fp, #72	; 0x48
   132bc:	mov	r2, #3
   132c0:	movt	r1, #2
   132c4:	bl	1145c <bcmp@plt>
   132c8:	cmp	r0, #0
   132cc:	beq	14040 <__assert_fail@plt+0x2a88>
   132d0:	movw	r1, #7222	; 0x1c36
   132d4:	sub	r0, fp, #72	; 0x48
   132d8:	mov	r2, #3
   132dc:	movt	r1, #2
   132e0:	bl	1145c <bcmp@plt>
   132e4:	cmp	r0, #0
   132e8:	beq	14050 <__assert_fail@plt+0x2a98>
   132ec:	movw	r1, #7227	; 0x1c3b
   132f0:	sub	r0, fp, #72	; 0x48
   132f4:	mov	r2, #3
   132f8:	movt	r1, #2
   132fc:	bl	1145c <bcmp@plt>
   13300:	cmp	r0, #0
   13304:	beq	14060 <__assert_fail@plt+0x2aa8>
   13308:	movw	r1, #7237	; 0x1c45
   1330c:	sub	r0, fp, #72	; 0x48
   13310:	mov	r2, #3
   13314:	movt	r1, #2
   13318:	bl	1145c <bcmp@plt>
   1331c:	cmp	r0, #0
   13320:	beq	14070 <__assert_fail@plt+0x2ab8>
   13324:	movw	r1, #7244	; 0x1c4c
   13328:	sub	r0, fp, #72	; 0x48
   1332c:	mov	r2, #3
   13330:	movt	r1, #2
   13334:	bl	1145c <bcmp@plt>
   13338:	cmp	r0, #0
   1333c:	beq	14080 <__assert_fail@plt+0x2ac8>
   13340:	movw	r1, #7253	; 0x1c55
   13344:	sub	r0, fp, #72	; 0x48
   13348:	mov	r2, #3
   1334c:	movt	r1, #2
   13350:	bl	1145c <bcmp@plt>
   13354:	cmp	r0, #0
   13358:	beq	14090 <__assert_fail@plt+0x2ad8>
   1335c:	movw	r1, #7258	; 0x1c5a
   13360:	sub	r0, fp, #72	; 0x48
   13364:	mov	r2, #3
   13368:	movt	r1, #2
   1336c:	bl	1145c <bcmp@plt>
   13370:	cmp	r0, #0
   13374:	beq	140a0 <__assert_fail@plt+0x2ae8>
   13378:	movw	r1, #7264	; 0x1c60
   1337c:	sub	r0, fp, #72	; 0x48
   13380:	mov	r2, #3
   13384:	movt	r1, #2
   13388:	bl	1145c <bcmp@plt>
   1338c:	cmp	r0, #0
   13390:	beq	140b0 <__assert_fail@plt+0x2af8>
   13394:	movw	r1, #7271	; 0x1c67
   13398:	sub	r0, fp, #72	; 0x48
   1339c:	mov	r2, #3
   133a0:	movt	r1, #2
   133a4:	bl	1145c <bcmp@plt>
   133a8:	cmp	r0, #0
   133ac:	beq	13eac <__assert_fail@plt+0x28f4>
   133b0:	sub	r4, fp, #72	; 0x48
   133b4:	mov	r0, r9
   133b8:	mov	r1, r4
   133bc:	bl	1a7a0 <__assert_fail@plt+0x91e8>
   133c0:	cmp	r0, #0
   133c4:	bne	140bc <__assert_fail@plt+0x2b04>
   133c8:	movw	r1, #6940	; 0x1b1c
   133cc:	mov	r0, r4
   133d0:	mov	r2, #4
   133d4:	movt	r1, #2
   133d8:	bl	1145c <bcmp@plt>
   133dc:	cmp	r0, #0
   133e0:	movw	r0, #5280	; 0x14a0
   133e4:	movt	r0, #2
   133e8:	beq	140bc <__assert_fail@plt+0x2b04>
   133ec:	movw	r1, #7473	; 0x1d31
   133f0:	mov	r0, r4
   133f4:	mov	r2, #5
   133f8:	movt	r1, #2
   133fc:	bl	1145c <bcmp@plt>
   13400:	cmp	r0, #0
   13404:	movw	r0, #5292	; 0x14ac
   13408:	movt	r0, #2
   1340c:	beq	140bc <__assert_fail@plt+0x2b04>
   13410:	movw	r1, #7478	; 0x1d36
   13414:	mov	r0, r4
   13418:	mov	r2, #6
   1341c:	movt	r1, #2
   13420:	bl	1145c <bcmp@plt>
   13424:	movw	r1, #5292	; 0x14ac
   13428:	cmp	r0, #0
   1342c:	movt	r1, #2
   13430:	add	r1, r1, #12
   13434:	str	r1, [sp, #244]	; 0xf4
   13438:	beq	167cc <__assert_fail@plt+0x5214>
   1343c:	movw	r1, #7484	; 0x1d3c
   13440:	sub	r0, fp, #72	; 0x48
   13444:	mov	r2, #10
   13448:	movt	r1, #2
   1344c:	bl	1145c <bcmp@plt>
   13450:	movw	r1, #5292	; 0x14ac
   13454:	cmp	r0, #0
   13458:	movt	r1, #2
   1345c:	add	r1, r1, #24
   13460:	str	r1, [sp, #240]	; 0xf0
   13464:	beq	167d4 <__assert_fail@plt+0x521c>
   13468:	movw	r1, #7494	; 0x1d46
   1346c:	sub	r0, fp, #72	; 0x48
   13470:	mov	r2, #5
   13474:	movt	r1, #2
   13478:	bl	1145c <bcmp@plt>
   1347c:	movw	r1, #5292	; 0x14ac
   13480:	cmp	r0, #0
   13484:	movt	r1, #2
   13488:	add	r1, r1, #36	; 0x24
   1348c:	str	r1, [sp, #236]	; 0xec
   13490:	beq	167dc <__assert_fail@plt+0x5224>
   13494:	movw	r1, #7267	; 0x1c63
   13498:	sub	r0, fp, #72	; 0x48
   1349c:	mov	r2, #4
   134a0:	movt	r1, #2
   134a4:	bl	1145c <bcmp@plt>
   134a8:	movw	r1, #5292	; 0x14ac
   134ac:	cmp	r0, #0
   134b0:	movt	r1, #2
   134b4:	add	r1, r1, #48	; 0x30
   134b8:	str	r1, [sp, #232]	; 0xe8
   134bc:	beq	167e4 <__assert_fail@plt+0x522c>
   134c0:	movw	r1, #7499	; 0x1d4b
   134c4:	sub	r0, fp, #72	; 0x48
   134c8:	mov	r2, #5
   134cc:	movt	r1, #2
   134d0:	bl	1145c <bcmp@plt>
   134d4:	movw	r1, #5292	; 0x14ac
   134d8:	cmp	r0, #0
   134dc:	movt	r1, #2
   134e0:	add	r1, r1, #60	; 0x3c
   134e4:	str	r1, [sp, #228]	; 0xe4
   134e8:	beq	167ec <__assert_fail@plt+0x5234>
   134ec:	movw	r1, #7504	; 0x1d50
   134f0:	sub	r0, fp, #72	; 0x48
   134f4:	mov	r2, #7
   134f8:	movt	r1, #2
   134fc:	bl	1145c <bcmp@plt>
   13500:	movw	r1, #5292	; 0x14ac
   13504:	cmp	r0, #0
   13508:	movt	r1, #2
   1350c:	add	r1, r1, #72	; 0x48
   13510:	str	r1, [sp, #224]	; 0xe0
   13514:	beq	167f4 <__assert_fail@plt+0x523c>
   13518:	movw	r1, #7511	; 0x1d57
   1351c:	sub	r0, fp, #72	; 0x48
   13520:	mov	r2, #4
   13524:	movt	r1, #2
   13528:	bl	1145c <bcmp@plt>
   1352c:	movw	r1, #5292	; 0x14ac
   13530:	cmp	r0, #0
   13534:	movt	r1, #2
   13538:	add	r1, r1, #84	; 0x54
   1353c:	str	r1, [sp, #220]	; 0xdc
   13540:	beq	167fc <__assert_fail@plt+0x5244>
   13544:	movw	r1, #7515	; 0x1d5b
   13548:	sub	r0, fp, #72	; 0x48
   1354c:	mov	r2, #7
   13550:	movt	r1, #2
   13554:	bl	1145c <bcmp@plt>
   13558:	movw	r1, #5292	; 0x14ac
   1355c:	cmp	r0, #0
   13560:	movt	r1, #2
   13564:	add	r1, r1, #96	; 0x60
   13568:	str	r1, [sp, #216]	; 0xd8
   1356c:	beq	16804 <__assert_fail@plt+0x524c>
   13570:	movw	r1, #7522	; 0x1d62
   13574:	sub	r0, fp, #72	; 0x48
   13578:	mov	r2, #4
   1357c:	movt	r1, #2
   13580:	bl	1145c <bcmp@plt>
   13584:	movw	r1, #5292	; 0x14ac
   13588:	cmp	r0, #0
   1358c:	movt	r1, #2
   13590:	add	r1, r1, #108	; 0x6c
   13594:	str	r1, [sp, #212]	; 0xd4
   13598:	beq	1680c <__assert_fail@plt+0x5254>
   1359c:	sub	r1, r6, #1
   135a0:	sub	r0, fp, #72	; 0x48
   135a4:	ldrb	r0, [r0, r1]
   135a8:	str	r1, [sp, #208]	; 0xd0
   135ac:	cmp	r0, #83	; 0x53
   135b0:	bne	13714 <__assert_fail@plt+0x215c>
   135b4:	ldr	r1, [sp, #208]	; 0xd0
   135b8:	sub	r4, fp, #72	; 0x48
   135bc:	mov	r0, #0
   135c0:	mov	r2, #5
   135c4:	strb	r0, [r4, r1]
   135c8:	movw	r1, #7473	; 0x1d31
   135cc:	mov	r0, r4
   135d0:	movt	r1, #2
   135d4:	bl	1145c <bcmp@plt>
   135d8:	cmp	r0, #0
   135dc:	movw	r0, #5292	; 0x14ac
   135e0:	movt	r0, #2
   135e4:	beq	140bc <__assert_fail@plt+0x2b04>
   135e8:	movw	r1, #7478	; 0x1d36
   135ec:	mov	r0, r4
   135f0:	mov	r2, #6
   135f4:	movt	r1, #2
   135f8:	bl	1145c <bcmp@plt>
   135fc:	cmp	r0, #0
   13600:	ldr	r0, [sp, #244]	; 0xf4
   13604:	beq	140bc <__assert_fail@plt+0x2b04>
   13608:	movw	r1, #7484	; 0x1d3c
   1360c:	mov	r0, r4
   13610:	mov	r2, #10
   13614:	movt	r1, #2
   13618:	bl	1145c <bcmp@plt>
   1361c:	cmp	r0, #0
   13620:	ldr	r0, [sp, #240]	; 0xf0
   13624:	beq	140bc <__assert_fail@plt+0x2b04>
   13628:	movw	r1, #7494	; 0x1d46
   1362c:	mov	r0, r4
   13630:	mov	r2, #5
   13634:	movt	r1, #2
   13638:	bl	1145c <bcmp@plt>
   1363c:	cmp	r0, #0
   13640:	ldr	r0, [sp, #236]	; 0xec
   13644:	beq	140bc <__assert_fail@plt+0x2b04>
   13648:	movw	r1, #7267	; 0x1c63
   1364c:	mov	r0, r4
   13650:	mov	r2, #4
   13654:	movt	r1, #2
   13658:	bl	1145c <bcmp@plt>
   1365c:	cmp	r0, #0
   13660:	ldr	r0, [sp, #232]	; 0xe8
   13664:	beq	140bc <__assert_fail@plt+0x2b04>
   13668:	movw	r1, #7499	; 0x1d4b
   1366c:	mov	r0, r4
   13670:	mov	r2, #5
   13674:	movt	r1, #2
   13678:	bl	1145c <bcmp@plt>
   1367c:	cmp	r0, #0
   13680:	ldr	r0, [sp, #228]	; 0xe4
   13684:	beq	140bc <__assert_fail@plt+0x2b04>
   13688:	movw	r1, #7504	; 0x1d50
   1368c:	mov	r0, r4
   13690:	mov	r2, #7
   13694:	movt	r1, #2
   13698:	bl	1145c <bcmp@plt>
   1369c:	cmp	r0, #0
   136a0:	ldr	r0, [sp, #224]	; 0xe0
   136a4:	beq	140bc <__assert_fail@plt+0x2b04>
   136a8:	movw	r1, #7511	; 0x1d57
   136ac:	mov	r0, r4
   136b0:	mov	r2, #4
   136b4:	movt	r1, #2
   136b8:	bl	1145c <bcmp@plt>
   136bc:	cmp	r0, #0
   136c0:	ldr	r0, [sp, #220]	; 0xdc
   136c4:	beq	140bc <__assert_fail@plt+0x2b04>
   136c8:	movw	r1, #7515	; 0x1d5b
   136cc:	mov	r0, r4
   136d0:	mov	r2, #7
   136d4:	movt	r1, #2
   136d8:	bl	1145c <bcmp@plt>
   136dc:	cmp	r0, #0
   136e0:	ldr	r0, [sp, #216]	; 0xd8
   136e4:	beq	140bc <__assert_fail@plt+0x2b04>
   136e8:	movw	r1, #7522	; 0x1d62
   136ec:	mov	r0, r4
   136f0:	mov	r2, #4
   136f4:	movt	r1, #2
   136f8:	bl	1145c <bcmp@plt>
   136fc:	cmp	r0, #0
   13700:	ldr	r0, [sp, #212]	; 0xd4
   13704:	beq	140bc <__assert_fail@plt+0x2b04>
   13708:	ldr	r1, [sp, #208]	; 0xd0
   1370c:	mov	r0, #83	; 0x53
   13710:	strb	r0, [r4, r1]
   13714:	movw	r1, #7526	; 0x1d66
   13718:	sub	r4, fp, #72	; 0x48
   1371c:	mov	r2, #9
   13720:	movt	r1, #2
   13724:	mov	r0, r4
   13728:	bl	1145c <bcmp@plt>
   1372c:	cmp	r0, #0
   13730:	movw	r0, #5424	; 0x1530
   13734:	movt	r0, #2
   13738:	beq	140bc <__assert_fail@plt+0x2b04>
   1373c:	movw	r1, #7535	; 0x1d6f
   13740:	mov	r0, r4
   13744:	mov	r2, #10
   13748:	movt	r1, #2
   1374c:	bl	1145c <bcmp@plt>
   13750:	cmp	r0, #0
   13754:	beq	16814 <__assert_fail@plt+0x525c>
   13758:	movw	r1, #7545	; 0x1d79
   1375c:	sub	r0, fp, #72	; 0x48
   13760:	mov	r2, #6
   13764:	movt	r1, #2
   13768:	bl	1145c <bcmp@plt>
   1376c:	cmp	r0, #0
   13770:	beq	16820 <__assert_fail@plt+0x5268>
   13774:	movw	r1, #7551	; 0x1d7f
   13778:	sub	r0, fp, #72	; 0x48
   1377c:	mov	r2, #4
   13780:	movt	r1, #2
   13784:	bl	1145c <bcmp@plt>
   13788:	cmp	r0, #0
   1378c:	beq	16830 <__assert_fail@plt+0x5278>
   13790:	movw	r1, #7555	; 0x1d83
   13794:	sub	r0, fp, #72	; 0x48
   13798:	mov	r2, #5
   1379c:	movt	r1, #2
   137a0:	bl	1145c <bcmp@plt>
   137a4:	cmp	r0, #0
   137a8:	beq	16840 <__assert_fail@plt+0x5288>
   137ac:	movw	r1, #7560	; 0x1d88
   137b0:	sub	r0, fp, #72	; 0x48
   137b4:	mov	r2, #5
   137b8:	movt	r1, #2
   137bc:	bl	1145c <bcmp@plt>
   137c0:	cmp	r0, #0
   137c4:	beq	16850 <__assert_fail@plt+0x5298>
   137c8:	movw	r1, #7565	; 0x1d8d
   137cc:	sub	r0, fp, #72	; 0x48
   137d0:	mov	r2, #5
   137d4:	movt	r1, #2
   137d8:	bl	1145c <bcmp@plt>
   137dc:	cmp	r0, #0
   137e0:	beq	16860 <__assert_fail@plt+0x52a8>
   137e4:	movw	r1, #7570	; 0x1d92
   137e8:	sub	r0, fp, #72	; 0x48
   137ec:	mov	r2, #6
   137f0:	movt	r1, #2
   137f4:	bl	1145c <bcmp@plt>
   137f8:	cmp	r0, #0
   137fc:	beq	16870 <__assert_fail@plt+0x52b8>
   13800:	movw	r1, #7576	; 0x1d98
   13804:	sub	r0, fp, #72	; 0x48
   13808:	mov	r2, #6
   1380c:	movt	r1, #2
   13810:	bl	1145c <bcmp@plt>
   13814:	cmp	r0, #0
   13818:	beq	16880 <__assert_fail@plt+0x52c8>
   1381c:	movw	r1, #7582	; 0x1d9e
   13820:	sub	r0, fp, #72	; 0x48
   13824:	mov	r2, #7
   13828:	movt	r1, #2
   1382c:	bl	1145c <bcmp@plt>
   13830:	cmp	r0, #0
   13834:	beq	16890 <__assert_fail@plt+0x52d8>
   13838:	movw	r1, #7589	; 0x1da5
   1383c:	sub	r0, fp, #72	; 0x48
   13840:	mov	r2, #6
   13844:	movt	r1, #2
   13848:	bl	1145c <bcmp@plt>
   1384c:	cmp	r0, #0
   13850:	beq	168a0 <__assert_fail@plt+0x52e8>
   13854:	movw	r1, #7595	; 0x1dab
   13858:	sub	r0, fp, #72	; 0x48
   1385c:	mov	r2, #6
   13860:	movt	r1, #2
   13864:	bl	1145c <bcmp@plt>
   13868:	cmp	r0, #0
   1386c:	beq	168b0 <__assert_fail@plt+0x52f8>
   13870:	movw	r1, #7601	; 0x1db1
   13874:	sub	r0, fp, #72	; 0x48
   13878:	mov	r2, #8
   1387c:	movt	r1, #2
   13880:	bl	1145c <bcmp@plt>
   13884:	cmp	r0, #0
   13888:	beq	168c0 <__assert_fail@plt+0x5308>
   1388c:	movw	r1, #7609	; 0x1db9
   13890:	sub	r0, fp, #72	; 0x48
   13894:	mov	r2, #7
   13898:	movt	r1, #2
   1389c:	bl	1145c <bcmp@plt>
   138a0:	cmp	r0, #0
   138a4:	beq	168d0 <__assert_fail@plt+0x5318>
   138a8:	movw	r1, #7616	; 0x1dc0
   138ac:	sub	r0, fp, #72	; 0x48
   138b0:	mov	r2, #6
   138b4:	movt	r1, #2
   138b8:	bl	1145c <bcmp@plt>
   138bc:	cmp	r0, #0
   138c0:	beq	168e0 <__assert_fail@plt+0x5328>
   138c4:	movw	r1, #7622	; 0x1dc6
   138c8:	sub	r0, fp, #72	; 0x48
   138cc:	mov	r2, #6
   138d0:	movt	r1, #2
   138d4:	bl	1145c <bcmp@plt>
   138d8:	cmp	r0, #0
   138dc:	beq	168f0 <__assert_fail@plt+0x5338>
   138e0:	movw	r1, #7628	; 0x1dcc
   138e4:	sub	r0, fp, #72	; 0x48
   138e8:	mov	r2, #9
   138ec:	movt	r1, #2
   138f0:	bl	1145c <bcmp@plt>
   138f4:	cmp	r0, #0
   138f8:	beq	16900 <__assert_fail@plt+0x5348>
   138fc:	movw	r1, #7637	; 0x1dd5
   13900:	sub	r0, fp, #72	; 0x48
   13904:	mov	r2, #8
   13908:	movt	r1, #2
   1390c:	bl	1145c <bcmp@plt>
   13910:	cmp	r0, #0
   13914:	beq	16910 <__assert_fail@plt+0x5358>
   13918:	movw	r1, #7645	; 0x1ddd
   1391c:	sub	r0, fp, #72	; 0x48
   13920:	mov	r2, #4
   13924:	movt	r1, #2
   13928:	bl	1145c <bcmp@plt>
   1392c:	cmp	r0, #0
   13930:	beq	16920 <__assert_fail@plt+0x5368>
   13934:	movw	r1, #7649	; 0x1de1
   13938:	sub	r0, fp, #72	; 0x48
   1393c:	mov	r2, #6
   13940:	movt	r1, #2
   13944:	bl	1145c <bcmp@plt>
   13948:	cmp	r0, #0
   1394c:	beq	16930 <__assert_fail@plt+0x5378>
   13950:	ldrb	r1, [fp, #-72]	; 0xffffffb8
   13954:	cmp	r6, #1
   13958:	bne	16940 <__assert_fail@plt+0x5388>
   1395c:	cmp	r1, #90	; 0x5a
   13960:	sub	r4, fp, #72	; 0x48
   13964:	bhi	1694c <__assert_fail@plt+0x5394>
   13968:	movw	r0, #5676	; 0x162c
   1396c:	add	r2, pc, #4
   13970:	movt	r0, #2
   13974:	ldr	pc, [r2, r1, lsl #2]
   13978:	andeq	r6, r1, r4, asr #19
   1397c:	andeq	r6, r1, ip, asr #18
   13980:	andeq	r6, r1, ip, asr #18
   13984:	andeq	r6, r1, ip, asr #18
   13988:	andeq	r6, r1, ip, asr #18
   1398c:	andeq	r6, r1, ip, asr #18
   13990:	andeq	r6, r1, ip, asr #18
   13994:	andeq	r6, r1, ip, asr #18
   13998:	andeq	r6, r1, ip, asr #18
   1399c:	andeq	r6, r1, ip, asr #18
   139a0:	andeq	r6, r1, ip, asr #18
   139a4:	andeq	r6, r1, ip, asr #18
   139a8:	andeq	r6, r1, ip, asr #18
   139ac:	andeq	r6, r1, ip, asr #18
   139b0:	andeq	r6, r1, ip, asr #18
   139b4:	andeq	r6, r1, ip, asr #18
   139b8:	andeq	r6, r1, ip, asr #18
   139bc:	andeq	r6, r1, ip, asr #18
   139c0:	andeq	r6, r1, ip, asr #18
   139c4:	andeq	r6, r1, ip, asr #18
   139c8:	andeq	r6, r1, ip, asr #18
   139cc:	andeq	r6, r1, ip, asr #18
   139d0:	andeq	r6, r1, ip, asr #18
   139d4:	andeq	r6, r1, ip, asr #18
   139d8:	andeq	r6, r1, ip, asr #18
   139dc:	andeq	r6, r1, ip, asr #18
   139e0:	andeq	r6, r1, ip, asr #18
   139e4:	andeq	r6, r1, ip, asr #18
   139e8:	andeq	r6, r1, ip, asr #18
   139ec:	andeq	r6, r1, ip, asr #18
   139f0:	andeq	r6, r1, ip, asr #18
   139f4:	andeq	r6, r1, ip, asr #18
   139f8:	andeq	r6, r1, ip, asr #18
   139fc:	andeq	r6, r1, ip, asr #18
   13a00:	andeq	r6, r1, ip, asr #18
   13a04:	andeq	r6, r1, ip, asr #18
   13a08:	andeq	r6, r1, ip, asr #18
   13a0c:	andeq	r6, r1, ip, asr #18
   13a10:	andeq	r6, r1, ip, asr #18
   13a14:	andeq	r6, r1, ip, asr #18
   13a18:	andeq	r6, r1, ip, asr #18
   13a1c:	andeq	r6, r1, ip, asr #18
   13a20:	andeq	r6, r1, ip, asr #18
   13a24:	andeq	r6, r1, ip, asr #18
   13a28:	andeq	r6, r1, ip, asr #18
   13a2c:	andeq	r6, r1, ip, asr #18
   13a30:	andeq	r6, r1, ip, asr #18
   13a34:	andeq	r6, r1, ip, asr #18
   13a38:	andeq	r6, r1, ip, asr #18
   13a3c:	andeq	r6, r1, ip, asr #18
   13a40:	andeq	r6, r1, ip, asr #18
   13a44:	andeq	r6, r1, ip, asr #18
   13a48:	andeq	r6, r1, ip, asr #18
   13a4c:	andeq	r6, r1, ip, asr #18
   13a50:	andeq	r6, r1, ip, asr #18
   13a54:	andeq	r6, r1, ip, asr #18
   13a58:	andeq	r6, r1, ip, asr #18
   13a5c:	andeq	r6, r1, ip, asr #18
   13a60:	andeq	r6, r1, ip, asr #18
   13a64:	andeq	r6, r1, ip, asr #18
   13a68:	andeq	r6, r1, ip, asr #18
   13a6c:	andeq	r6, r1, ip, asr #18
   13a70:	andeq	r6, r1, ip, asr #18
   13a74:	andeq	r6, r1, ip, asr #18
   13a78:	andeq	r6, r1, ip, asr #18
   13a7c:	strheq	r4, [r1], -ip
   13a80:	andeq	r3, r1, r4, ror #21
   13a84:	strdeq	r6, [r1], -r8
   13a88:	andeq	r6, r1, r8, lsl #20
   13a8c:	andeq	r6, r1, r8, lsl sl
   13a90:	andeq	r6, r1, r8, lsr #20
   13a94:	andeq	r6, r1, r8, lsr sl
   13a98:	andeq	r6, r1, r8, asr #20
   13a9c:	andeq	r6, r1, r8, asr sl
   13aa0:	andeq	r6, r1, ip, asr #18
   13aa4:	andeq	r6, r1, r8, ror #20
   13aa8:	andeq	r6, r1, r8, ror sl
   13aac:	andeq	r6, r1, r8, lsl #21
   13ab0:	muleq	r1, r8, sl
   13ab4:	andeq	r6, r1, r8, lsr #21
   13ab8:			; <UNDEFINED> instruction: 0x00016ab8
   13abc:	andeq	r6, r1, r8, asr #21
   13ac0:	ldrdeq	r6, [r1], -r8
   13ac4:	andeq	r6, r1, r8, ror #21
   13ac8:	strdeq	r6, [r1], -r8
   13acc:	andeq	r6, r1, r8, lsl #22
   13ad0:	andeq	r6, r1, r8, lsl fp
   13ad4:	andeq	r6, r1, r8, lsr #22
   13ad8:	andeq	r6, r1, r8, lsr fp
   13adc:	andeq	r6, r1, r4, asr #22
   13ae0:	andeq	r6, r1, r0, asr fp
   13ae4:	movw	r0, #5676	; 0x162c
   13ae8:	movt	r0, #2
   13aec:	b	13bc4 <__assert_fail@plt+0x260c>
   13af0:	mov	r6, #1
   13af4:	mov	r5, r2
   13af8:	mov	r0, #0
   13afc:	cmn	r0, #1
   13b00:	ble	13b18 <__assert_fail@plt+0x2560>
   13b04:	movw	r1, #52428	; 0xcccc
   13b08:	movt	r1, #3276	; 0xccc
   13b0c:	cmp	r0, r1
   13b10:	ble	13b2c <__assert_fail@plt+0x2574>
   13b14:	b	13bac <__assert_fail@plt+0x25f4>
   13b18:	beq	13b2c <__assert_fail@plt+0x2574>
   13b1c:	mov	r1, #-2147483648	; 0x80000000
   13b20:	sdiv	r1, r1, r0
   13b24:	cmp	r1, #10
   13b28:	blt	13bac <__assert_fail@plt+0x25f4>
   13b2c:	add	r1, r0, r0, lsl #2
   13b30:	lsl	r0, r1, #1
   13b34:	uxtab	r0, r0, r3
   13b38:	sub	r0, r0, #48	; 0x30
   13b3c:	cmp	r0, r1, lsl #1
   13b40:	bvs	13bac <__assert_fail@plt+0x25f4>
   13b44:	ldrb	r3, [r5, #1]!
   13b48:	sub	r1, r3, #48	; 0x30
   13b4c:	cmp	r1, #10
   13b50:	bcc	13afc <__assert_fail@plt+0x2544>
   13b54:	str	r6, [sp, #244]	; 0xf4
   13b58:	sub	r6, r5, #1
   13b5c:	mov	r1, #0
   13b60:	str	r1, [sp, #240]	; 0xf0
   13b64:	orr	r1, r3, #2
   13b68:	cmp	r1, #46	; 0x2e
   13b6c:	beq	12e28 <__assert_fail@plt+0x1870>
   13b70:	ldr	r3, [sp, #244]	; 0xf4
   13b74:	movw	r1, #274	; 0x112
   13b78:	str	r5, [r9]
   13b7c:	str	r0, [sp, #128]	; 0x80
   13b80:	cmp	r3, #0
   13b84:	movweq	r1, #275	; 0x113
   13b88:	str	r1, [sp, #184]	; 0xb8
   13b8c:	sub	r1, r5, r2
   13b90:	str	r1, [sp, #136]	; 0x88
   13b94:	asr	r1, r0, #31
   13b98:	str	r1, [sp, #132]	; 0x84
   13b9c:	lsr	r1, r3, #31
   13ba0:	ldr	r3, [sp, #180]	; 0xb4
   13ba4:	str	r1, [sp, #160]	; 0xa0
   13ba8:	b	1410c <__assert_fail@plt+0x2b54>
   13bac:	ldr	r3, [sp, #180]	; 0xb4
   13bb0:	mov	r0, #63	; 0x3f
   13bb4:	str	r0, [sp, #184]	; 0xb8
   13bb8:	b	1410c <__assert_fail@plt+0x2b54>
   13bbc:	movw	r0, #4920	; 0x1338
   13bc0:	movt	r0, #2
   13bc4:	add	r0, r0, #12
   13bc8:	b	140bc <__assert_fail@plt+0x2b04>
   13bcc:	ldr	ip, [sp, #176]	; 0xb0
   13bd0:	ldr	r7, [sp, #192]	; 0xc0
   13bd4:	movw	lr, #3768	; 0xeb8
   13bd8:	sub	r4, fp, #112	; 0x70
   13bdc:	movt	lr, #2
   13be0:	b	13ec0 <__assert_fail@plt+0x2908>
   13be4:	movw	r0, #4920	; 0x1338
   13be8:	movt	r0, #2
   13bec:	add	r0, r0, #24
   13bf0:	b	140bc <__assert_fail@plt+0x2b04>
   13bf4:	movw	r0, #4920	; 0x1338
   13bf8:	movt	r0, #2
   13bfc:	add	r0, r0, #36	; 0x24
   13c00:	b	140bc <__assert_fail@plt+0x2b04>
   13c04:	movw	r1, #7109	; 0x1bc5
   13c08:	mov	r0, r4
   13c0c:	mov	r2, #8
   13c10:	movt	r1, #2
   13c14:	bl	1145c <bcmp@plt>
   13c18:	cmp	r0, #0
   13c1c:	movw	r0, #4980	; 0x1374
   13c20:	movt	r0, #2
   13c24:	beq	140bc <__assert_fail@plt+0x2b04>
   13c28:	movw	r1, #7117	; 0x1bcd
   13c2c:	mov	r0, r4
   13c30:	mov	r2, #9
   13c34:	movt	r1, #2
   13c38:	bl	1145c <bcmp@plt>
   13c3c:	cmp	r0, #0
   13c40:	beq	13f54 <__assert_fail@plt+0x299c>
   13c44:	movw	r1, #7126	; 0x1bd6
   13c48:	mov	r0, r4
   13c4c:	mov	r2, #6
   13c50:	movt	r1, #2
   13c54:	bl	1145c <bcmp@plt>
   13c58:	cmp	r0, #0
   13c5c:	beq	13f60 <__assert_fail@plt+0x29a8>
   13c60:	movw	r1, #7132	; 0x1bdc
   13c64:	mov	r0, r4
   13c68:	mov	r2, #6
   13c6c:	movt	r1, #2
   13c70:	bl	1145c <bcmp@plt>
   13c74:	cmp	r0, #0
   13c78:	beq	13f80 <__assert_fail@plt+0x29c8>
   13c7c:	movw	r1, #7138	; 0x1be2
   13c80:	mov	r0, r4
   13c84:	mov	r2, #4
   13c88:	movt	r1, #2
   13c8c:	bl	1145c <bcmp@plt>
   13c90:	cmp	r0, #0
   13c94:	beq	13f90 <__assert_fail@plt+0x29d8>
   13c98:	movw	r1, #7142	; 0x1be6
   13c9c:	mov	r0, r4
   13ca0:	mov	r2, #5
   13ca4:	movt	r1, #2
   13ca8:	bl	1145c <bcmp@plt>
   13cac:	cmp	r0, #0
   13cb0:	beq	13fa0 <__assert_fail@plt+0x29e8>
   13cb4:	movw	r1, #7147	; 0x1beb
   13cb8:	mov	r0, r4
   13cbc:	mov	r2, #5
   13cc0:	movt	r1, #2
   13cc4:	bl	1145c <bcmp@plt>
   13cc8:	cmp	r0, #0
   13ccc:	beq	13fb0 <__assert_fail@plt+0x29f8>
   13cd0:	movw	r1, #7152	; 0x1bf0
   13cd4:	mov	r0, r4
   13cd8:	mov	r2, #7
   13cdc:	movt	r1, #2
   13ce0:	bl	1145c <bcmp@plt>
   13ce4:	cmp	r0, #0
   13ce8:	beq	13fc0 <__assert_fail@plt+0x2a08>
   13cec:	movw	r1, #7159	; 0x1bf7
   13cf0:	mov	r0, r4
   13cf4:	mov	r2, #10
   13cf8:	movt	r1, #2
   13cfc:	bl	1145c <bcmp@plt>
   13d00:	cmp	r0, #0
   13d04:	beq	13fd0 <__assert_fail@plt+0x2a18>
   13d08:	movw	r1, #7169	; 0x1c01
   13d0c:	mov	r0, r4
   13d10:	mov	r2, #5
   13d14:	movt	r1, #2
   13d18:	bl	1145c <bcmp@plt>
   13d1c:	cmp	r0, #0
   13d20:	beq	13fe0 <__assert_fail@plt+0x2a28>
   13d24:	movw	r1, #7174	; 0x1c06
   13d28:	mov	r0, r4
   13d2c:	mov	r2, #8
   13d30:	movt	r1, #2
   13d34:	bl	1145c <bcmp@plt>
   13d38:	cmp	r0, #0
   13d3c:	beq	13ff0 <__assert_fail@plt+0x2a38>
   13d40:	movw	r1, #7182	; 0x1c0e
   13d44:	mov	r0, r4
   13d48:	mov	r2, #9
   13d4c:	movt	r1, #2
   13d50:	bl	1145c <bcmp@plt>
   13d54:	cmp	r0, #0
   13d58:	beq	14000 <__assert_fail@plt+0x2a48>
   13d5c:	movw	r1, #7191	; 0x1c17
   13d60:	mov	r0, r4
   13d64:	mov	r2, #9
   13d68:	movt	r1, #2
   13d6c:	bl	1145c <bcmp@plt>
   13d70:	cmp	r0, #0
   13d74:	beq	14010 <__assert_fail@plt+0x2a58>
   13d78:	movw	r1, #7200	; 0x1c20
   13d7c:	mov	r0, r4
   13d80:	mov	r2, #7
   13d84:	movt	r1, #2
   13d88:	bl	1145c <bcmp@plt>
   13d8c:	cmp	r0, #0
   13d90:	beq	14020 <__assert_fail@plt+0x2a68>
   13d94:	movw	r1, #7207	; 0x1c27
   13d98:	sub	r0, fp, #72	; 0x48
   13d9c:	mov	r2, #7
   13da0:	movt	r1, #2
   13da4:	bl	1145c <bcmp@plt>
   13da8:	cmp	r0, #0
   13dac:	beq	14030 <__assert_fail@plt+0x2a78>
   13db0:	movw	r1, #7214	; 0x1c2e
   13db4:	sub	r0, fp, #72	; 0x48
   13db8:	mov	r2, #8
   13dbc:	movt	r1, #2
   13dc0:	bl	1145c <bcmp@plt>
   13dc4:	cmp	r0, #0
   13dc8:	beq	14040 <__assert_fail@plt+0x2a88>
   13dcc:	movw	r1, #7222	; 0x1c36
   13dd0:	sub	r0, fp, #72	; 0x48
   13dd4:	mov	r2, #5
   13dd8:	movt	r1, #2
   13ddc:	bl	1145c <bcmp@plt>
   13de0:	cmp	r0, #0
   13de4:	beq	14050 <__assert_fail@plt+0x2a98>
   13de8:	movw	r1, #7227	; 0x1c3b
   13dec:	sub	r0, fp, #72	; 0x48
   13df0:	mov	r2, #10
   13df4:	movt	r1, #2
   13df8:	bl	1145c <bcmp@plt>
   13dfc:	cmp	r0, #0
   13e00:	beq	14060 <__assert_fail@plt+0x2aa8>
   13e04:	movw	r1, #7237	; 0x1c45
   13e08:	sub	r0, fp, #72	; 0x48
   13e0c:	mov	r2, #7
   13e10:	movt	r1, #2
   13e14:	bl	1145c <bcmp@plt>
   13e18:	cmp	r0, #0
   13e1c:	beq	14070 <__assert_fail@plt+0x2ab8>
   13e20:	movw	r1, #7244	; 0x1c4c
   13e24:	sub	r0, fp, #72	; 0x48
   13e28:	mov	r2, #9
   13e2c:	movt	r1, #2
   13e30:	bl	1145c <bcmp@plt>
   13e34:	cmp	r0, #0
   13e38:	beq	14080 <__assert_fail@plt+0x2ac8>
   13e3c:	movw	r1, #7253	; 0x1c55
   13e40:	sub	r0, fp, #72	; 0x48
   13e44:	mov	r2, #5
   13e48:	movt	r1, #2
   13e4c:	bl	1145c <bcmp@plt>
   13e50:	cmp	r0, #0
   13e54:	beq	14090 <__assert_fail@plt+0x2ad8>
   13e58:	movw	r1, #7258	; 0x1c5a
   13e5c:	sub	r0, fp, #72	; 0x48
   13e60:	mov	r2, #6
   13e64:	movt	r1, #2
   13e68:	bl	1145c <bcmp@plt>
   13e6c:	cmp	r0, #0
   13e70:	beq	140a0 <__assert_fail@plt+0x2ae8>
   13e74:	movw	r1, #7264	; 0x1c60
   13e78:	sub	r0, fp, #72	; 0x48
   13e7c:	mov	r2, #7
   13e80:	movt	r1, #2
   13e84:	bl	1145c <bcmp@plt>
   13e88:	cmp	r0, #0
   13e8c:	beq	140b0 <__assert_fail@plt+0x2af8>
   13e90:	movw	r1, #7271	; 0x1c67
   13e94:	sub	r0, fp, #72	; 0x48
   13e98:	mov	r2, #9
   13e9c:	movt	r1, #2
   13ea0:	bl	1145c <bcmp@plt>
   13ea4:	cmp	r0, #0
   13ea8:	bne	133b0 <__assert_fail@plt+0x1df8>
   13eac:	movw	r0, #4980	; 0x1374
   13eb0:	movt	r0, #2
   13eb4:	add	r0, r0, #276	; 0x114
   13eb8:	b	140bc <__assert_fail@plt+0x2b04>
   13ebc:	add	r3, r3, #1
   13ec0:	sub	r1, r2, #1
   13ec4:	ldrb	r2, [r1, #1]!
   13ec8:	sub	r2, r2, #48	; 0x30
   13ecc:	cmp	r2, #10
   13ed0:	bcc	13ec4 <__assert_fail@plt+0x290c>
   13ed4:	clz	r6, r3
   13ed8:	eor	r2, r5, #1
   13edc:	lsr	r6, r6, #5
   13ee0:	orrs	r2, r2, r6
   13ee4:	bne	13f08 <__assert_fail@plt+0x2950>
   13ee8:	mov	r5, #63	; 0x3f
   13eec:	sub	r2, r0, #1
   13ef0:	str	r5, [sp, #184]	; 0xb8
   13ef4:	ldr	r5, [sp, #244]	; 0xf4
   13ef8:	cmp	r2, r0
   13efc:	bvc	13f14 <__assert_fail@plt+0x295c>
   13f00:	ldr	r3, [sp, #180]	; 0xb4
   13f04:	b	1410c <__assert_fail@plt+0x2b54>
   13f08:	ldr	r5, [sp, #244]	; 0xf4
   13f0c:	str	r3, [sp, #152]	; 0x98
   13f10:	b	13f28 <__assert_fail@plt+0x2970>
   13f14:	movw	r0, #51712	; 0xca00
   13f18:	movt	r0, #15258	; 0x3b9a
   13f1c:	sub	r0, r0, r3
   13f20:	str	r0, [sp, #152]	; 0x98
   13f24:	mov	r0, r2
   13f28:	ldr	r3, [sp, #180]	; 0xb4
   13f2c:	cmp	r5, #0
   13f30:	str	r1, [r9]
   13f34:	mov	r1, #276	; 0x114
   13f38:	str	r0, [sp, #160]	; 0xa0
   13f3c:	movweq	r1, #277	; 0x115
   13f40:	str	r1, [sp, #184]	; 0xb8
   13f44:	mov	r1, r0
   13f48:	lsr	r0, r0, #8
   13f4c:	str	r0, [sp, #148]	; 0x94
   13f50:	b	1410c <__assert_fail@plt+0x2b54>
   13f54:	movw	r0, #4980	; 0x1374
   13f58:	movt	r0, #2
   13f5c:	b	13bc4 <__assert_fail@plt+0x260c>
   13f60:	movw	r0, #4980	; 0x1374
   13f64:	movt	r0, #2
   13f68:	add	r0, r0, #24
   13f6c:	b	140bc <__assert_fail@plt+0x2b04>
   13f70:	add	r0, r5, #1
   13f74:	str	r0, [r9]
   13f78:	ldrb	r6, [r5]
   13f7c:	b	140ec <__assert_fail@plt+0x2b34>
   13f80:	movw	r0, #4980	; 0x1374
   13f84:	movt	r0, #2
   13f88:	add	r0, r0, #36	; 0x24
   13f8c:	b	140bc <__assert_fail@plt+0x2b04>
   13f90:	movw	r0, #4980	; 0x1374
   13f94:	movt	r0, #2
   13f98:	add	r0, r0, #48	; 0x30
   13f9c:	b	140bc <__assert_fail@plt+0x2b04>
   13fa0:	movw	r0, #4980	; 0x1374
   13fa4:	movt	r0, #2
   13fa8:	add	r0, r0, #60	; 0x3c
   13fac:	b	140bc <__assert_fail@plt+0x2b04>
   13fb0:	movw	r0, #4980	; 0x1374
   13fb4:	movt	r0, #2
   13fb8:	add	r0, r0, #72	; 0x48
   13fbc:	b	140bc <__assert_fail@plt+0x2b04>
   13fc0:	movw	r0, #4980	; 0x1374
   13fc4:	movt	r0, #2
   13fc8:	add	r0, r0, #84	; 0x54
   13fcc:	b	140bc <__assert_fail@plt+0x2b04>
   13fd0:	movw	r0, #4980	; 0x1374
   13fd4:	movt	r0, #2
   13fd8:	add	r0, r0, #96	; 0x60
   13fdc:	b	140bc <__assert_fail@plt+0x2b04>
   13fe0:	movw	r0, #4980	; 0x1374
   13fe4:	movt	r0, #2
   13fe8:	add	r0, r0, #108	; 0x6c
   13fec:	b	140bc <__assert_fail@plt+0x2b04>
   13ff0:	movw	r0, #4980	; 0x1374
   13ff4:	movt	r0, #2
   13ff8:	add	r0, r0, #120	; 0x78
   13ffc:	b	140bc <__assert_fail@plt+0x2b04>
   14000:	movw	r0, #4980	; 0x1374
   14004:	movt	r0, #2
   14008:	add	r0, r0, #132	; 0x84
   1400c:	b	140bc <__assert_fail@plt+0x2b04>
   14010:	movw	r0, #4980	; 0x1374
   14014:	movt	r0, #2
   14018:	add	r0, r0, #144	; 0x90
   1401c:	b	140bc <__assert_fail@plt+0x2b04>
   14020:	movw	r0, #4980	; 0x1374
   14024:	movt	r0, #2
   14028:	add	r0, r0, #156	; 0x9c
   1402c:	b	140bc <__assert_fail@plt+0x2b04>
   14030:	movw	r0, #4980	; 0x1374
   14034:	movt	r0, #2
   14038:	add	r0, r0, #168	; 0xa8
   1403c:	b	140bc <__assert_fail@plt+0x2b04>
   14040:	movw	r0, #4980	; 0x1374
   14044:	movt	r0, #2
   14048:	add	r0, r0, #180	; 0xb4
   1404c:	b	140bc <__assert_fail@plt+0x2b04>
   14050:	movw	r0, #4980	; 0x1374
   14054:	movt	r0, #2
   14058:	add	r0, r0, #192	; 0xc0
   1405c:	b	140bc <__assert_fail@plt+0x2b04>
   14060:	movw	r0, #4980	; 0x1374
   14064:	movt	r0, #2
   14068:	add	r0, r0, #204	; 0xcc
   1406c:	b	140bc <__assert_fail@plt+0x2b04>
   14070:	movw	r0, #4980	; 0x1374
   14074:	movt	r0, #2
   14078:	add	r0, r0, #216	; 0xd8
   1407c:	b	140bc <__assert_fail@plt+0x2b04>
   14080:	movw	r0, #4980	; 0x1374
   14084:	movt	r0, #2
   14088:	add	r0, r0, #228	; 0xe4
   1408c:	b	140bc <__assert_fail@plt+0x2b04>
   14090:	movw	r0, #4980	; 0x1374
   14094:	movt	r0, #2
   14098:	add	r0, r0, #240	; 0xf0
   1409c:	b	140bc <__assert_fail@plt+0x2b04>
   140a0:	movw	r0, #4980	; 0x1374
   140a4:	movt	r0, #2
   140a8:	add	r0, r0, #252	; 0xfc
   140ac:	b	140bc <__assert_fail@plt+0x2b04>
   140b0:	movw	r0, #4980	; 0x1374
   140b4:	movt	r0, #2
   140b8:	add	r0, r0, #264	; 0x108
   140bc:	ldr	r1, [r0, #8]
   140c0:	ldr	r6, [r0, #4]
   140c4:	asr	r0, r1, #31
   140c8:	str	r1, [sp, #160]	; 0xa0
   140cc:	str	r0, [sp, #152]	; 0x98
   140d0:	mov	r0, r1
   140d4:	lsr	r0, r1, #8
   140d8:	str	r0, [sp, #148]	; 0x94
   140dc:	ldr	ip, [sp, #176]	; 0xb0
   140e0:	movw	lr, #3768	; 0xeb8
   140e4:	mov	r4, r5
   140e8:	movt	lr, #2
   140ec:	ldr	r3, [sp, #180]	; 0xb4
   140f0:	cmp	r6, #1
   140f4:	blt	1412c <__assert_fail@plt+0x2b74>
   140f8:	lsr	r1, r6, #1
   140fc:	mov	r0, #2
   14100:	str	r6, [sp, #184]	; 0xb8
   14104:	cmp	r1, #138	; 0x8a
   14108:	bhi	1411c <__assert_fail@plt+0x2b64>
   1410c:	ldr	r1, [sp, #184]	; 0xb8
   14110:	movw	r0, #3882	; 0xf2a
   14114:	movt	r0, #2
   14118:	ldrb	r0, [r0, r1]
   1411c:	add	r1, r0, sl
   14120:	cmp	r1, #112	; 0x70
   14124:	bhi	1417c <__assert_fail@plt+0x2bc4>
   14128:	b	14144 <__assert_fail@plt+0x2b8c>
   1412c:	mov	r1, #0
   14130:	mov	r0, #0
   14134:	str	r1, [sp, #184]	; 0xb8
   14138:	add	r1, r0, sl
   1413c:	cmp	r1, #112	; 0x70
   14140:	bhi	1417c <__assert_fail@plt+0x2bc4>
   14144:	movw	r2, #4160	; 0x1040
   14148:	movt	r2, #2
   1414c:	add	r2, r2, r1
   14150:	ldrsb	r2, [r2]
   14154:	cmp	r0, r2
   14158:	bne	1417c <__assert_fail@plt+0x2bc4>
   1415c:	movw	r0, #4273	; 0x10b1
   14160:	movt	r0, #2
   14164:	ldrb	r8, [r0, r1]
   14168:	orr	r0, r1, #4
   1416c:	cmp	r0, #111	; 0x6f
   14170:	bne	146a8 <__assert_fail@plt+0x30f0>
   14174:	rsb	r2, r8, #0
   14178:	b	14190 <__assert_fail@plt+0x2bd8>
   1417c:	movw	r0, #4386	; 0x1122
   14180:	movt	r0, #2
   14184:	ldrb	r2, [r0, r8]
   14188:	cmp	r2, #0
   1418c:	beq	16b60 <__assert_fail@plt+0x55a8>
   14190:	movw	r0, #4500	; 0x1194
   14194:	mov	r1, r3
   14198:	movt	r0, #2
   1419c:	ldrb	r4, [r0, r2]
   141a0:	rsb	r0, r4, #1
   141a4:	rsb	r0, r0, r0, lsl #3
   141a8:	ldr	r0, [r1, r0, lsl #3]!
   141ac:	ldr	r5, [r1, #52]	; 0x34
   141b0:	str	r0, [sp, #244]	; 0xf4
   141b4:	ldr	r0, [r1, #44]	; 0x2c
   141b8:	str	r5, [sp, #188]	; 0xbc
   141bc:	str	r0, [sp, #200]	; 0xc8
   141c0:	ldr	r0, [r1, #40]	; 0x28
   141c4:	str	r0, [sp, #208]	; 0xd0
   141c8:	ldr	r0, [r1, #36]	; 0x24
   141cc:	str	r0, [sp, #204]	; 0xcc
   141d0:	ldr	r0, [r1, #4]
   141d4:	str	r0, [sp, #240]	; 0xf0
   141d8:	ldr	r0, [r1, #8]
   141dc:	str	r0, [sp, #236]	; 0xec
   141e0:	ldr	r0, [r1, #12]
   141e4:	str	r0, [sp, #228]	; 0xe4
   141e8:	ldr	r0, [r1, #16]
   141ec:	str	r0, [sp, #232]	; 0xe8
   141f0:	ldr	r0, [r1, #20]
   141f4:	str	r0, [sp, #224]	; 0xe0
   141f8:	ldr	r0, [r1, #24]
   141fc:	str	r0, [sp, #220]	; 0xdc
   14200:	ldr	r0, [r1, #28]
   14204:	str	r0, [sp, #216]	; 0xd8
   14208:	ldr	r0, [r1, #32]
   1420c:	ldr	r1, [r1, #48]	; 0x30
   14210:	str	r0, [sp, #212]	; 0xd4
   14214:	sub	r0, r2, #4
   14218:	str	r1, [sp, #196]	; 0xc4
   1421c:	cmp	r0, #87	; 0x57
   14220:	bhi	166a8 <__assert_fail@plt+0x50f0>
   14224:	add	r1, pc, #20
   14228:	add	r7, r3, #8
   1422c:	add	sl, r3, #16
   14230:	add	r5, r3, #24
   14234:	add	r8, r3, #32
   14238:	add	r6, r3, #40	; 0x28
   1423c:	ldr	pc, [r1, r0, lsl #2]
   14240:	andeq	r5, r1, r0, lsl #7
   14244:	andeq	r6, r1, r8, lsr #13
   14248:	andeq	r6, r1, r8, lsr #13
   1424c:	andeq	r5, r1, r8, lsr #7
   14250:	andeq	r5, r1, r0, lsr r2
   14254:	andeq	r5, r1, ip, ror #9
   14258:	andeq	r5, r1, r4, lsl r5
   1425c:	andeq	r5, r1, r0, lsl r3
   14260:	andeq	r5, r1, ip, asr #7
   14264:	andeq	r5, r1, r4, ror #7
   14268:	muleq	r1, r8, r5
   1426c:	andeq	r5, r1, ip, ror #10
   14270:	andeq	r6, r1, r8, lsr #13
   14274:	andeq	r6, r1, r8, lsr #13
   14278:	ldrdeq	r4, [r1], -ip
   1427c:	andeq	r5, r1, r8, lsr #6
   14280:	ldrdeq	r5, [r1], -ip
   14284:	andeq	r6, r1, r8, lsr #13
   14288:	andeq	r4, r1, r0, lsr #26
   1428c:	strdeq	r5, [r1], -r0
   14290:	muleq	r1, r4, r4
   14294:	andeq	r6, r1, r8, lsr #13
   14298:	andeq	r6, r1, r8, lsr #13
   1429c:	andeq	r5, r1, r4, lsl r6
   142a0:	ldrdeq	r5, [r1], -ip
   142a4:	strdeq	r4, [r1], -r8
   142a8:	andeq	r5, r1, r4, lsr #4
   142ac:	andeq	r5, r1, ip, asr #15
   142b0:	andeq	r4, r1, r0, lsl sp
   142b4:	andeq	r4, r1, r0, lsl #29
   142b8:	andeq	r4, r1, r4, asr sp
   142bc:	andeq	r5, r1, r0, ror r3
   142c0:	andeq	r4, r1, ip, asr #26
   142c4:	andeq	r5, r1, ip, lsl r9
   142c8:	andeq	r5, r1, r0, lsl #18
   142cc:	andeq	r4, r1, r8, ror lr
   142d0:	andeq	r5, r1, r8, asr #4
   142d4:	andeq	r5, r1, r4, ror #9
   142d8:	andeq	r5, r1, r8, ror r2
   142dc:	andeq	r5, r1, r8, ror #18
   142e0:	andeq	r4, r1, r8, lsl #28
   142e4:	andeq	r5, r1, r8, ror #11
   142e8:	andeq	r5, r1, r8, lsr r9
   142ec:	andeq	r4, r1, r8, asr #25
   142f0:	andeq	r5, r1, ip, lsr #10
   142f4:	andeq	r6, r1, r8, lsr #13
   142f8:	andeq	r4, r1, r8, asr ip
   142fc:	andeq	r4, r1, r4, lsr #18
   14300:	andeq	r4, r1, r0, lsr #7
   14304:	andeq	r4, r1, r0, lsr #7
   14308:	andeq	r5, r1, r4, ror #14
   1430c:	andeq	r4, r1, ip, ror #14
   14310:	andeq	r5, r1, r0, lsr r4
   14314:	andeq	r5, r1, ip, asr #10
   14318:	andeq	r4, r1, ip, ror r7
   1431c:	andeq	r4, r1, r4, lsl r9
   14320:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14324:	andeq	r4, r1, r8, lsl #14
   14328:	andeq	r4, r1, r4, lsl #15
   1432c:	andeq	r5, r1, r8, lsr #13
   14330:	muleq	r1, r4, r7
   14334:	ldrdeq	r5, [r1], -ip
   14338:	andeq	r5, r1, r0, lsl sl
   1433c:	andeq	r4, r1, r4, ror r7
   14340:	ldrdeq	r5, [r1], -r8
   14344:	andeq	r5, r1, r4, lsl r7
   14348:	muleq	r1, ip, r7
   1434c:	andeq	r4, r1, r4, lsr #15
   14350:	andeq	r4, r1, r4, lsr #15
   14354:	andeq	r5, r1, r4, asr #19
   14358:	andeq	r6, r1, r8, lsr #13
   1435c:	andeq	r4, r1, ip, ror #14
   14360:	andeq	r4, r1, ip, ror r7
   14364:	andeq	r4, r1, r8, lsl #14
   14368:	muleq	r1, r4, r7
   1436c:	andeq	r4, r1, r4, ror r7
   14370:	muleq	r1, ip, r7
   14374:	andeq	r4, r1, r4, lsl #15
   14378:	andeq	r6, r1, r8, lsr #13
   1437c:	andeq	r6, r1, r8, lsr #13
   14380:	andeq	r6, r1, r8, lsr #13
   14384:	andeq	r4, r1, r0, asr r7
   14388:	andeq	r6, r1, r8, lsr #13
   1438c:	andeq	r4, r1, r0, asr r7
   14390:	andeq	r5, r1, r8, lsl #16
   14394:	strdeq	r4, [r1], -ip
   14398:	andeq	r4, r1, r8, ror #25
   1439c:	andeq	r5, r1, r4, lsl #10
   143a0:	ldr	r0, [r3, #4]
   143a4:	ldr	r1, [r3]
   143a8:	str	r4, [sp, #172]	; 0xac
   143ac:	str	r3, [sp, #180]	; 0xb4
   143b0:	str	r2, [sp, #156]	; 0x9c
   143b4:	ldr	r3, [r6, #8]
   143b8:	ldr	r4, [r6]
   143bc:	str	r0, [sp, #76]	; 0x4c
   143c0:	ldm	r7, {r0, lr}
   143c4:	str	r1, [sp, #28]
   143c8:	ldr	r1, [r5, #4]
   143cc:	str	lr, [sp, #64]	; 0x40
   143d0:	ldr	r5, [r5]
   143d4:	str	r0, [sp, #60]	; 0x3c
   143d8:	ldm	sl, {r0, ip}
   143dc:	str	ip, [sp, #52]	; 0x34
   143e0:	ldr	sl, [r6, #4]
   143e4:	str	r1, [sp, #40]	; 0x28
   143e8:	str	r0, [sp, #56]	; 0x38
   143ec:	ldm	r8, {r0, r7}
   143f0:	str	r7, [sp, #36]	; 0x24
   143f4:	ldr	r2, [r9, #144]	; 0x90
   143f8:	str	r2, [sp, #72]	; 0x48
   143fc:	add	r2, r2, r3
   14400:	str	r2, [sp, #68]	; 0x44
   14404:	str	r2, [r9, #144]	; 0x90
   14408:	ldr	r2, [sp, #104]	; 0x68
   1440c:	ldr	r6, [r2]
   14410:	ldr	r3, [r2, #4]
   14414:	adds	r6, r6, r4
   14418:	adc	r8, r3, sl
   1441c:	stm	r2, {r6, r8}
   14420:	ldr	r4, [sp, #108]	; 0x6c
   14424:	ldr	r6, [r4]
   14428:	ldr	r2, [r4, #4]
   1442c:	adds	r0, r6, r0
   14430:	adc	r6, r2, r7
   14434:	stm	r4, {r0, r6}
   14438:	ldr	r0, [sp, #112]	; 0x70
   1443c:	ldr	r7, [r0]
   14440:	ldr	r4, [r0, #4]
   14444:	adds	r5, r7, r5
   14448:	str	r4, [sp, #32]
   1444c:	adc	r7, r4, r1
   14450:	stm	r0, {r5, r7}
   14454:	ldr	r0, [sp, #116]	; 0x74
   14458:	ldr	r1, [sp, #56]	; 0x38
   1445c:	ldrd	r4, [r0]
   14460:	adds	r4, r4, r1
   14464:	adc	r1, r5, ip
   14468:	str	r1, [sp, #44]	; 0x2c
   1446c:	str	r4, [r0]
   14470:	str	r1, [r0, #4]
   14474:	ldr	ip, [sp, #120]	; 0x78
   14478:	ldr	r1, [sp, #60]	; 0x3c
   1447c:	ldr	r4, [ip]
   14480:	ldr	r0, [ip, #4]
   14484:	adds	r4, r4, r1
   14488:	str	r0, [sp, #48]	; 0x30
   1448c:	adc	r1, r0, lr
   14490:	str	r1, [sp, #56]	; 0x38
   14494:	str	r4, [ip]
   14498:	str	r1, [ip, #4]
   1449c:	ldr	lr, [sp, #124]	; 0x7c
   144a0:	ldr	r0, [sp, #28]
   144a4:	ldr	r4, [lr]
   144a8:	ldr	r1, [lr, #4]
   144ac:	adds	r4, r4, r0
   144b0:	ldr	r0, [sp, #76]	; 0x4c
   144b4:	str	r1, [sp, #60]	; 0x3c
   144b8:	adc	ip, r1, r0
   144bc:	cmn	r3, #1
   144c0:	mov	r0, #0
   144c4:	mov	r1, #0
   144c8:	stm	lr, {r4, ip}
   144cc:	mov	r3, #0
   144d0:	mov	lr, #0
   144d4:	mov	r4, #0
   144d8:	movwgt	r0, #1
   144dc:	cmn	r8, #1
   144e0:	mov	r8, #0
   144e4:	movwgt	r1, #1
   144e8:	str	r0, [sp, #28]
   144ec:	subs	r0, r0, r1
   144f0:	mov	r1, #0
   144f4:	movwne	r0, #1
   144f8:	cmn	sl, #1
   144fc:	str	r0, [sp, #24]
   14500:	mov	r0, #0
   14504:	movwgt	r0, #1
   14508:	cmn	r2, #1
   1450c:	mov	r2, #0
   14510:	str	r0, [sp, #20]
   14514:	mov	r0, #0
   14518:	movwgt	r0, #1
   1451c:	cmn	r6, #1
   14520:	mov	r6, #0
   14524:	movwgt	r1, #1
   14528:	str	r0, [sp, #16]
   1452c:	subs	r0, r0, r1
   14530:	ldr	r1, [sp, #44]	; 0x2c
   14534:	movwne	r0, #1
   14538:	str	r0, [sp, #12]
   1453c:	ldr	r0, [sp, #36]	; 0x24
   14540:	cmn	r0, #1
   14544:	mov	r0, #0
   14548:	movwgt	r0, #1
   1454c:	str	r0, [sp, #36]	; 0x24
   14550:	ldr	r0, [sp, #32]
   14554:	cmn	r0, #1
   14558:	mov	r0, #0
   1455c:	movwgt	r8, #1
   14560:	cmn	r7, #1
   14564:	movwgt	r0, #1
   14568:	subs	r0, r8, r0
   1456c:	movwne	r0, #1
   14570:	str	r0, [sp, #32]
   14574:	ldr	r0, [sp, #40]	; 0x28
   14578:	cmn	r0, #1
   1457c:	mov	r0, #0
   14580:	movwgt	r0, #1
   14584:	cmn	r5, #1
   14588:	mov	r5, #0
   1458c:	movwgt	r3, #1
   14590:	cmn	r1, #1
   14594:	mov	r1, #0
   14598:	movwgt	r1, #1
   1459c:	subs	r1, r3, r1
   145a0:	movwne	r1, #1
   145a4:	str	r1, [sp, #44]	; 0x2c
   145a8:	ldr	r1, [sp, #52]	; 0x34
   145ac:	cmn	r1, #1
   145b0:	ldr	r1, [sp, #48]	; 0x30
   145b4:	movwgt	lr, #1
   145b8:	cmn	r1, #1
   145bc:	ldr	r1, [sp, #56]	; 0x38
   145c0:	movwgt	r5, #1
   145c4:	cmn	r1, #1
   145c8:	ldr	r1, [sp, #64]	; 0x40
   145cc:	movwgt	r2, #1
   145d0:	subs	r7, r5, r2
   145d4:	mov	r2, #0
   145d8:	movwne	r7, #1
   145dc:	cmn	r1, #1
   145e0:	ldr	r1, [sp, #60]	; 0x3c
   145e4:	movwgt	r2, #1
   145e8:	cmn	r1, #1
   145ec:	mov	r1, #0
   145f0:	movwgt	r6, #1
   145f4:	cmn	ip, #1
   145f8:	ldr	ip, [sp, #68]	; 0x44
   145fc:	movwgt	r4, #1
   14600:	subs	sl, r6, r4
   14604:	ldr	r4, [sp, #76]	; 0x4c
   14608:	movwne	sl, #1
   1460c:	cmn	r4, #1
   14610:	ldr	r4, [sp, #72]	; 0x48
   14614:	movwgt	r1, #1
   14618:	str	r1, [sp, #76]	; 0x4c
   1461c:	cmp	ip, r4
   14620:	bvs	16b60 <__assert_fail@plt+0x55a8>
   14624:	ldr	r4, [sp, #28]
   14628:	ldr	r1, [sp, #20]
   1462c:	sub	r4, r4, r1
   14630:	ldr	r1, [sp, #24]
   14634:	clz	r4, r4
   14638:	lsr	r4, r4, #5
   1463c:	ands	r4, r4, r1
   14640:	ldreq	r1, [sp, #16]
   14644:	ldreq	r4, [sp, #36]	; 0x24
   14648:	subeq	r4, r1, r4
   1464c:	ldreq	r1, [sp, #12]
   14650:	clzeq	r4, r4
   14654:	lsreq	r4, r4, #5
   14658:	andseq	r4, r4, r1
   1465c:	bne	16b60 <__assert_fail@plt+0x55a8>
   14660:	ldr	r1, [sp, #32]
   14664:	sub	r0, r8, r0
   14668:	ldr	r4, [sp, #172]	; 0xac
   1466c:	clz	r0, r0
   14670:	lsr	r0, r0, #5
   14674:	ands	r0, r0, r1
   14678:	ldreq	r1, [sp, #44]	; 0x2c
   1467c:	subeq	r0, r3, lr
   14680:	clzeq	r0, r0
   14684:	lsreq	r0, r0, #5
   14688:	andseq	r0, r0, r1
   1468c:	bne	16b60 <__assert_fail@plt+0x55a8>
   14690:	sub	r0, r5, r2
   14694:	clz	r0, r0
   14698:	lsr	r0, r0, #5
   1469c:	ands	r0, r0, r7
   146a0:	beq	162e4 <__assert_fail@plt+0x4d2c>
   146a4:	b	16b60 <__assert_fail@plt+0x55a8>
   146a8:	ldr	r2, [sp, #160]	; 0xa0
   146ac:	ldr	r5, [sp, #148]	; 0x94
   146b0:	add	r0, r3, #56	; 0x38
   146b4:	add	r1, r3, #64	; 0x40
   146b8:	uxtb	r2, r2
   146bc:	orr	r2, r2, r5, lsl #8
   146c0:	ldr	r5, [sp, #152]	; 0x98
   146c4:	stm	r0, {r2, r5}
   146c8:	ldr	r5, [sp, #128]	; 0x80
   146cc:	ldr	r2, [sp, #132]	; 0x84
   146d0:	str	r5, [r1]
   146d4:	str	r2, [r1, #4]
   146d8:	add	r1, r3, #76	; 0x4c
   146dc:	vst1.32	{d8-d9}, [r1]
   146e0:	ldr	r1, [sp, #136]	; 0x88
   146e4:	str	r1, [r3, #72]	; 0x48
   146e8:	add	r1, r3, #92	; 0x5c
   146ec:	vst1.32	{d8-d9}, [r1]
   146f0:	mov	r1, #0
   146f4:	str	r1, [r3, #108]	; 0x6c
   146f8:	mvn	r1, #1
   146fc:	mov	r3, r0
   14700:	str	r1, [sp, #184]	; 0xb8
   14704:	b	12b0c <__assert_fail@plt+0x1554>
   14708:	ldrd	r6, [r3]
   1470c:	cmn	r7, #1
   14710:	ble	15a50 <__assert_fail@plt+0x4498>
   14714:	ldr	r8, [r3, #-48]	; 0xffffffd0
   14718:	ldr	r5, [r3, #-44]	; 0xffffffd4
   1471c:	orrs	r0, r6, r7
   14720:	beq	1663c <__assert_fail@plt+0x5084>
   14724:	cmn	r5, #1
   14728:	ble	15b9c <__assert_fail@plt+0x45e4>
   1472c:	mov	sl, r2
   14730:	str	r4, [sp, #172]	; 0xac
   14734:	mov	r4, r3
   14738:	mvn	r0, #0
   1473c:	mvn	r1, #-2147483648	; 0x80000000
   14740:	mov	r2, r6
   14744:	mov	r3, r7
   14748:	bl	2023c <__assert_fail@plt+0xec84>
   1474c:	b	15a8c <__assert_fail@plt+0x44d4>
   14750:	ldr	r5, [r7]
   14754:	ldr	r1, [r7, #4]
   14758:	adds	r0, r5, #-2147483648	; 0x80000000
   1475c:	adcs	r0, r1, #0
   14760:	bne	16b60 <__assert_fail@plt+0x55a8>
   14764:	str	r5, [sp, #244]	; 0xf4
   14768:	b	166a0 <__assert_fail@plt+0x50e8>
   1476c:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14770:	b	15768 <__assert_fail@plt+0x41b0>
   14774:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14778:	b	15a14 <__assert_fail@plt+0x445c>
   1477c:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14780:	b	15550 <__assert_fail@plt+0x3f98>
   14784:	ldrd	r0, [r3]
   14788:	str	r1, [sp, #224]	; 0xe0
   1478c:	str	r0, [sp, #232]	; 0xe8
   14790:	b	16650 <__assert_fail@plt+0x5098>
   14794:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14798:	b	156ac <__assert_fail@plt+0x40f4>
   1479c:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   147a0:	b	15718 <__assert_fail@plt+0x4160>
   147a4:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   147a8:	str	r0, [sp, #208]	; 0xd0
   147ac:	asr	r0, r0, #31
   147b0:	str	r1, [sp, #196]	; 0xc4
   147b4:	str	r0, [sp, #200]	; 0xc8
   147b8:	mov	r0, #0
   147bc:	str	r0, [sp, #236]	; 0xec
   147c0:	mov	r0, #0
   147c4:	str	r0, [sp, #228]	; 0xe4
   147c8:	mov	r0, #0
   147cc:	str	r0, [sp, #232]	; 0xe8
   147d0:	mov	r0, #0
   147d4:	str	r0, [sp, #224]	; 0xe0
   147d8:	mov	r0, #0
   147dc:	str	r0, [sp, #220]	; 0xdc
   147e0:	mov	r0, #0
   147e4:	str	r0, [sp, #216]	; 0xd8
   147e8:	mov	r0, #0
   147ec:	str	r0, [sp, #212]	; 0xd4
   147f0:	mov	r0, #0
   147f4:	str	r0, [sp, #204]	; 0xcc
   147f8:	b	16698 <__assert_fail@plt+0x50e0>
   147fc:	sub	r1, r3, #56	; 0x38
   14800:	ldr	r0, [r9, #156]	; 0x9c
   14804:	ldr	lr, [r3, #-40]	; 0xffffffd8
   14808:	str	r3, [sp, #180]	; 0xb4
   1480c:	str	r2, [sp, #156]	; 0x9c
   14810:	str	r4, [sp, #172]	; 0xac
   14814:	vld1.64	{d16-d17}, [r1]
   14818:	cmp	r0, #0
   1481c:	beq	14854 <__assert_fail@plt+0x329c>
   14820:	ldr	r1, [sp, #92]	; 0x5c
   14824:	ldr	r1, [r1]
   14828:	cmp	r1, #0
   1482c:	bne	14854 <__assert_fail@plt+0x329c>
   14830:	ldrb	r1, [r9, #153]	; 0x99
   14834:	cmp	r1, #0
   14838:	bne	14854 <__assert_fail@plt+0x329c>
   1483c:	ldr	ip, [r3, #-36]	; 0xffffffdc
   14840:	cmp	lr, #2
   14844:	bgt	16790 <__assert_fail@plt+0x51d8>
   14848:	ldr	r2, [r9, #172]	; 0xac
   1484c:	cmp	r2, #0
   14850:	bne	16790 <__assert_fail@plt+0x51d8>
   14854:	cmp	lr, #5
   14858:	blt	15b30 <__assert_fail@plt+0x4578>
   1485c:	vmov.32	r4, d17[0]
   14860:	vmov.32	r1, d17[1]
   14864:	add	r0, r0, #1
   14868:	mov	r2, #100	; 0x64
   1486c:	mov	r3, #0
   14870:	str	lr, [sp, #72]	; 0x48
   14874:	str	r0, [r9, #156]	; 0x9c
   14878:	mov	r0, r4
   1487c:	str	r1, [sp, #76]	; 0x4c
   14880:	str	r4, [sp, #68]	; 0x44
   14884:	bl	20168 <__assert_fail@plt+0xebb0>
   14888:	mov	ip, #100	; 0x64
   1488c:	umull	r2, r3, r0, ip
   14890:	mla	r3, r1, ip, r3
   14894:	subs	r2, r4, r2
   14898:	ldr	r4, [sp, #76]	; 0x4c
   1489c:	sbc	r3, r4, r3
   148a0:	ldr	r4, [sp, #164]	; 0xa4
   148a4:	strd	r2, [r4]
   148a8:	mov	r2, #100	; 0x64
   148ac:	mov	r3, #0
   148b0:	bl	20168 <__assert_fail@plt+0xebb0>
   148b4:	mov	r0, r2
   148b8:	ldr	r2, [sp, #168]	; 0xa8
   148bc:	mov	r1, r3
   148c0:	mov	r3, #0
   148c4:	strd	r0, [r2]
   148c8:	movw	r2, #10000	; 0x2710
   148cc:	ldr	r0, [sp, #68]	; 0x44
   148d0:	ldr	r1, [sp, #76]	; 0x4c
   148d4:	bl	20168 <__assert_fail@plt+0xebb0>
   148d8:	ldr	r2, [sp, #88]	; 0x58
   148dc:	ldr	r3, [sp, #180]	; 0xb4
   148e0:	strd	r0, [r2]
   148e4:	ldr	r0, [sp, #72]	; 0x48
   148e8:	sub	r0, r0, #4
   148ec:	str	r0, [r9, #48]	; 0x30
   148f0:	b	15fe4 <__assert_fail@plt+0x4a2c>
   148f4:	ldrd	r6, [r3]
   148f8:	cmn	r7, #1
   148fc:	ble	15bf0 <__assert_fail@plt+0x4638>
   14900:	ldr	r8, [r3, #-56]	; 0xffffffc8
   14904:	ldr	r5, [r3, #-52]	; 0xffffffcc
   14908:	orrs	r0, r6, r7
   1490c:	bne	14724 <__assert_fail@plt+0x316c>
   14910:	b	1663c <__assert_fail@plt+0x5084>
   14914:	mov	r0, #0
   14918:	str	r0, [sp, #228]	; 0xe4
   1491c:	mov	r0, #1
   14920:	b	15554 <__assert_fail@plt+0x3f9c>
   14924:	mov	r0, r3
   14928:	str	r2, [sp, #156]	; 0x9c
   1492c:	str	r4, [sp, #172]	; 0xac
   14930:	ldr	r7, [r3, #-12]
   14934:	ldr	r1, [r3, #-16]
   14938:	ldr	r6, [r3, #-20]	; 0xffffffec
   1493c:	ldr	r3, [r3, #-24]	; 0xffffffe8
   14940:	ldr	r2, [r0, #-56]	; 0xffffffc8
   14944:	ldr	r5, [r0]
   14948:	ldr	lr, [r0, #-40]	; 0xffffffd8
   1494c:	ldr	ip, [r0, #-32]	; 0xffffffe0
   14950:	ldr	sl, [r0, #-28]	; 0xffffffe4
   14954:	ldr	r4, [r0, #-8]
   14958:	str	r0, [sp, #180]	; 0xb4
   1495c:	str	r2, [sp, #60]	; 0x3c
   14960:	ldr	r2, [r0, #-52]	; 0xffffffcc
   14964:	cmn	r5, #1
   14968:	str	r2, [sp, #68]	; 0x44
   1496c:	ldr	r2, [r0, #-48]	; 0xffffffd0
   14970:	str	r2, [sp, #56]	; 0x38
   14974:	ldr	r2, [r0, #-44]	; 0xffffffd4
   14978:	str	r2, [sp, #76]	; 0x4c
   1497c:	ldr	r2, [r0, #-36]	; 0xffffffdc
   14980:	str	r2, [sp, #72]	; 0x48
   14984:	ldr	r2, [r9, #144]	; 0x90
   14988:	str	r2, [sp, #64]	; 0x40
   1498c:	ble	15c48 <__assert_fail@plt+0x4690>
   14990:	add	r0, r2, r4
   14994:	str	r0, [sp, #52]	; 0x34
   14998:	str	r0, [r9, #144]	; 0x90
   1499c:	ldr	r0, [sp, #104]	; 0x68
   149a0:	ldrd	r4, [r0]
   149a4:	adds	r4, r4, r1
   149a8:	adc	r1, r5, r7
   149ac:	str	r4, [r0]
   149b0:	str	r1, [r0, #4]
   149b4:	ldr	r0, [sp, #108]	; 0x6c
   149b8:	ldr	r4, [r0]
   149bc:	ldr	r2, [r0, #4]
   149c0:	adds	r4, r4, r3
   149c4:	adc	r3, r2, r6
   149c8:	str	r4, [r0]
   149cc:	str	r3, [r0, #4]
   149d0:	str	r6, [sp, #32]
   149d4:	str	r7, [sp, #28]
   149d8:	ldr	r0, [sp, #112]	; 0x70
   149dc:	ldr	r8, [r0]
   149e0:	ldr	r4, [r0, #4]
   149e4:	str	sl, [sp, #40]	; 0x28
   149e8:	adds	r8, r8, ip
   149ec:	adc	r7, r4, sl
   149f0:	str	r8, [r0]
   149f4:	str	r7, [r0, #4]
   149f8:	ldr	ip, [sp, #116]	; 0x74
   149fc:	ldr	r6, [sp, #72]	; 0x48
   14a00:	ldr	r8, [ip]
   14a04:	ldr	r0, [ip, #4]
   14a08:	adds	r8, r8, lr
   14a0c:	str	r0, [sp, #36]	; 0x24
   14a10:	adc	sl, r0, r6
   14a14:	stm	ip, {r8, sl}
   14a18:	ldr	ip, [sp, #120]	; 0x78
   14a1c:	ldr	r0, [sp, #56]	; 0x38
   14a20:	ldr	r8, [ip]
   14a24:	ldr	r6, [ip, #4]
   14a28:	adds	r8, r8, r0
   14a2c:	ldr	r0, [sp, #76]	; 0x4c
   14a30:	str	r6, [sp, #44]	; 0x2c
   14a34:	adc	r0, r6, r0
   14a38:	str	r0, [sp, #48]	; 0x30
   14a3c:	str	r8, [ip]
   14a40:	str	r0, [ip, #4]
   14a44:	ldr	lr, [sp, #124]	; 0x7c
   14a48:	ldr	r6, [sp, #60]	; 0x3c
   14a4c:	ldr	ip, [sp, #68]	; 0x44
   14a50:	ldr	r8, [lr]
   14a54:	ldr	r0, [lr, #4]
   14a58:	adds	r8, r8, r6
   14a5c:	str	r0, [sp, #56]	; 0x38
   14a60:	adc	r6, r0, ip
   14a64:	cmn	r5, #1
   14a68:	mov	r0, #0
   14a6c:	str	r8, [lr]
   14a70:	mov	r5, #0
   14a74:	mov	r8, #0
   14a78:	movwgt	r0, #1
   14a7c:	cmn	r1, #1
   14a80:	mov	r1, #0
   14a84:	str	r6, [lr, #4]
   14a88:	mov	lr, #0
   14a8c:	movwgt	r1, #1
   14a90:	str	r0, [sp, #60]	; 0x3c
   14a94:	subs	r0, r0, r1
   14a98:	mov	r1, #0
   14a9c:	movwne	r0, #1
   14aa0:	str	r0, [sp, #24]
   14aa4:	ldr	r0, [sp, #28]
   14aa8:	cmn	r0, #1
   14aac:	mov	r0, #0
   14ab0:	movwgt	r0, #1
   14ab4:	cmn	r2, #1
   14ab8:	ldr	r2, [sp, #48]	; 0x30
   14abc:	movwgt	r1, #1
   14ac0:	cmn	r3, #1
   14ac4:	str	r0, [sp, #28]
   14ac8:	mov	r0, #0
   14acc:	mov	r3, #0
   14ad0:	movwgt	r0, #1
   14ad4:	str	r1, [sp, #20]
   14ad8:	subs	r0, r1, r0
   14adc:	ldr	r1, [sp, #36]	; 0x24
   14ae0:	movwne	r0, #1
   14ae4:	str	r0, [sp, #16]
   14ae8:	ldr	r0, [sp, #32]
   14aec:	cmn	r0, #1
   14af0:	mov	r0, #0
   14af4:	movwgt	r0, #1
   14af8:	cmn	r4, #1
   14afc:	mov	r4, #0
   14b00:	movwgt	r5, #1
   14b04:	cmn	r7, #1
   14b08:	str	r0, [sp, #32]
   14b0c:	mov	r0, #0
   14b10:	movwgt	r0, #1
   14b14:	subs	r0, r5, r0
   14b18:	movwne	r0, #1
   14b1c:	str	r0, [sp, #12]
   14b20:	ldr	r0, [sp, #40]	; 0x28
   14b24:	cmn	r0, #1
   14b28:	mov	r0, #0
   14b2c:	movwgt	r0, #1
   14b30:	cmn	r1, #1
   14b34:	mov	r1, #0
   14b38:	movwgt	lr, #1
   14b3c:	cmn	sl, #1
   14b40:	movwgt	r1, #1
   14b44:	subs	r1, lr, r1
   14b48:	movwne	r1, #1
   14b4c:	str	r1, [sp, #40]	; 0x28
   14b50:	ldr	r1, [sp, #72]	; 0x48
   14b54:	cmn	r1, #1
   14b58:	ldr	r1, [sp, #44]	; 0x2c
   14b5c:	movwgt	r8, #1
   14b60:	cmn	r1, #1
   14b64:	mov	r1, #0
   14b68:	movwgt	r1, #1
   14b6c:	cmn	r2, #1
   14b70:	mov	r2, #0
   14b74:	movwgt	r2, #1
   14b78:	subs	r7, r1, r2
   14b7c:	ldr	r2, [sp, #76]	; 0x4c
   14b80:	movwne	r7, #1
   14b84:	cmn	r2, #1
   14b88:	ldr	r2, [sp, #56]	; 0x38
   14b8c:	movwgt	r3, #1
   14b90:	cmn	r2, #1
   14b94:	mov	r2, #0
   14b98:	movwgt	r2, #1
   14b9c:	cmn	r6, #1
   14ba0:	mov	r6, #0
   14ba4:	movwgt	r4, #1
   14ba8:	subs	sl, r2, r4
   14bac:	ldr	r4, [sp, #52]	; 0x34
   14bb0:	movwne	sl, #1
   14bb4:	cmn	ip, #1
   14bb8:	ldr	ip, [sp, #64]	; 0x40
   14bbc:	movwgt	r6, #1
   14bc0:	str	r6, [sp, #76]	; 0x4c
   14bc4:	cmp	r4, ip
   14bc8:	bvs	16b60 <__assert_fail@plt+0x55a8>
   14bcc:	ldr	r4, [sp, #60]	; 0x3c
   14bd0:	ldr	r6, [sp, #28]
   14bd4:	sub	r4, r4, r6
   14bd8:	ldr	r6, [sp, #24]
   14bdc:	clz	r4, r4
   14be0:	lsr	r4, r4, #5
   14be4:	ands	r4, r4, r6
   14be8:	ldreq	r6, [sp, #20]
   14bec:	ldreq	r4, [sp, #32]
   14bf0:	subeq	r4, r6, r4
   14bf4:	ldreq	r6, [sp, #16]
   14bf8:	clzeq	r4, r4
   14bfc:	lsreq	r4, r4, #5
   14c00:	andseq	r4, r4, r6
   14c04:	bne	16b60 <__assert_fail@plt+0x55a8>
   14c08:	ldr	r6, [sp, #12]
   14c0c:	sub	r0, r5, r0
   14c10:	ldr	r4, [sp, #172]	; 0xac
   14c14:	clz	r0, r0
   14c18:	lsr	r0, r0, #5
   14c1c:	ands	r0, r0, r6
   14c20:	bne	16b60 <__assert_fail@plt+0x55a8>
   14c24:	ldr	r6, [sp, #40]	; 0x28
   14c28:	sub	r0, lr, r8
   14c2c:	clz	r0, r0
   14c30:	lsr	r0, r0, #5
   14c34:	ands	r0, r0, r6
   14c38:	subeq	r0, r1, r3
   14c3c:	clzeq	r0, r0
   14c40:	lsreq	r0, r0, #5
   14c44:	andseq	r0, r0, r7
   14c48:	bne	16b60 <__assert_fail@plt+0x55a8>
   14c4c:	ldr	r0, [sp, #76]	; 0x4c
   14c50:	sub	r0, r2, r0
   14c54:	b	162ec <__assert_fail@plt+0x4d34>
   14c58:	sub	r0, r3, #112	; 0x70
   14c5c:	vldr	d18, [r3, #-96]	; 0xffffffa0
   14c60:	mov	r5, r2
   14c64:	ldr	r2, [sp, #168]	; 0xa8
   14c68:	mov	r8, r4
   14c6c:	mov	r4, r3
   14c70:	mov	r6, #1
   14c74:	vld1.64	{d16-d17}, [r0]
   14c78:	ldr	r0, [sp, #100]	; 0x64
   14c7c:	vst1.64	{d16-d17}, [r0]!
   14c80:	vstr	d18, [r0]
   14c84:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14c88:	rsbs	r0, r0, #0
   14c8c:	rsc	r3, r1, #0
   14c90:	stm	r2, {r0, r3}
   14c94:	ands	r0, r1, r3
   14c98:	bmi	16b74 <__assert_fail@plt+0x55bc>
   14c9c:	ldrd	r0, [r7]
   14ca0:	ldr	r2, [sp, #164]	; 0xa4
   14ca4:	rsbs	r0, r0, #0
   14ca8:	rsc	r3, r1, #0
   14cac:	stm	r2, {r0, r3}
   14cb0:	mov	r2, r5
   14cb4:	ands	r0, r1, r3
   14cb8:	mov	r3, r4
   14cbc:	mov	r4, r8
   14cc0:	bpl	166a8 <__assert_fail@plt+0x50f0>
   14cc4:	b	16b74 <__assert_fail@plt+0x55bc>
   14cc8:	mov	r5, r4
   14ccc:	mov	r4, r2
   14cd0:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14cd4:	ldr	r2, [sp, #164]	; 0xa4
   14cd8:	strd	r0, [r2]
   14cdc:	ldrd	r0, [r3]
   14ce0:	ldr	r2, [sp, #168]	; 0xa8
   14ce4:	b	15604 <__assert_fail@plt+0x404c>
   14ce8:	mvn	r0, #0
   14cec:	str	r0, [sp, #244]	; 0xf4
   14cf0:	mvn	r0, #0
   14cf4:	b	166a4 <__assert_fail@plt+0x50ec>
   14cf8:	mov	r0, #1
   14cfc:	str	r0, [r9, #20]
   14d00:	ldr	r0, [r9, #168]	; 0xa8
   14d04:	add	r0, r0, #1
   14d08:	str	r0, [r9, #168]	; 0xa8
   14d0c:	b	166a8 <__assert_fail@plt+0x50f0>
   14d10:	ldr	r0, [r3, #-56]	; 0xffffffc8
   14d14:	str	r4, [sp, #172]	; 0xac
   14d18:	str	r2, [sp, #156]	; 0x9c
   14d1c:	b	14e90 <__assert_fail@plt+0x38d8>
   14d20:	mov	r5, r4
   14d24:	mov	r4, r2
   14d28:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14d2c:	ldr	r2, [sp, #144]	; 0x90
   14d30:	vmov.i32	q8, #0	; 0x00000000
   14d34:	strd	r0, [r2]
   14d38:	mov	r2, r4
   14d3c:	mov	r4, r5
   14d40:	ldr	r0, [sp, #140]	; 0x8c
   14d44:	vst1.64	{d16-d17}, [r0]
   14d48:	b	154d8 <__assert_fail@plt+0x3f20>
   14d4c:	ldr	r0, [r3, #-56]	; 0xffffffc8
   14d50:	b	15374 <__assert_fail@plt+0x3dbc>
   14d54:	ldr	r1, [r3, #-40]	; 0xffffffd8
   14d58:	ldr	r5, [r3, #4]
   14d5c:	ldr	r0, [r3, #-48]	; 0xffffffd0
   14d60:	ldr	r7, [r3, #-44]	; 0xffffffd4
   14d64:	str	r2, [sp, #156]	; 0x9c
   14d68:	mov	r2, #0
   14d6c:	mov	r8, #100	; 0x64
   14d70:	str	r3, [sp, #180]	; 0xb4
   14d74:	cmp	r1, #3
   14d78:	mov	r1, #0
   14d7c:	movwlt	r1, #1
   14d80:	cmp	r5, #0
   14d84:	movwmi	r2, #1
   14d88:	ands	r1, r2, r1
   14d8c:	umull	r6, r1, r0, r8
   14d90:	moveq	r6, r0
   14d94:	mlane	r7, r7, r8, r1
   14d98:	cmn	r5, #1
   14d9c:	ble	15f04 <__assert_fail@plt+0x494c>
   14da0:	ldr	r0, [r3, #-56]	; 0xffffffc8
   14da4:	ldr	r8, [r3]
   14da8:	cmn	r7, #1
   14dac:	str	r4, [sp, #172]	; 0xac
   14db0:	str	r0, [sp, #76]	; 0x4c
   14db4:	ble	16384 <__assert_fail@plt+0x4dcc>
   14db8:	movw	r1, #8738	; 0x2222
   14dbc:	movw	r0, #8738	; 0x2222
   14dc0:	mov	sl, #1
   14dc4:	movt	r1, #8738	; 0x2222
   14dc8:	movt	r0, #546	; 0x222
   14dcc:	subs	r1, r1, r6
   14dd0:	sbcs	r0, r0, r7
   14dd4:	blt	163bc <__assert_fail@plt+0x4e04>
   14dd8:	b	163b8 <__assert_fail@plt+0x4e00>
   14ddc:	mov	r5, r4
   14de0:	mov	r4, r2
   14de4:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14de8:	ldr	r2, [sp, #144]	; 0x90
   14dec:	vmov.i32	q8, #0	; 0x00000000
   14df0:	strd	r0, [r2]
   14df4:	mov	r2, r4
   14df8:	mov	r4, r5
   14dfc:	ldr	r0, [sp, #140]	; 0x8c
   14e00:	vst1.64	{d16-d17}, [r0]
   14e04:	b	15364 <__assert_fail@plt+0x3dac>
   14e08:	mov	r5, r2
   14e0c:	ldrd	r0, [r3, #-112]	; 0xffffff90
   14e10:	ldr	r2, [sp, #168]	; 0xa8
   14e14:	mov	r8, r4
   14e18:	mov	r4, r3
   14e1c:	mov	r6, #1
   14e20:	strd	r0, [r2]
   14e24:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14e28:	ldr	r2, [sp, #164]	; 0xa4
   14e2c:	rsbs	r0, r0, #0
   14e30:	rsc	r3, r1, #0
   14e34:	stm	r2, {r0, r3}
   14e38:	ands	r0, r1, r3
   14e3c:	bmi	16b74 <__assert_fail@plt+0x55bc>
   14e40:	ldrd	r0, [r7]
   14e44:	ldr	r2, [sp, #88]	; 0x58
   14e48:	rsbs	r0, r0, #0
   14e4c:	rsc	r3, r1, #0
   14e50:	stm	r2, {r0, r3}
   14e54:	ands	r0, r1, r3
   14e58:	bmi	16b74 <__assert_fail@plt+0x55bc>
   14e5c:	mov	r3, r4
   14e60:	ldr	r1, [sp, #92]	; 0x5c
   14e64:	mov	r2, r5
   14e68:	mov	r4, r8
   14e6c:	ldr	r0, [r3, #16]
   14e70:	str	r0, [r1]
   14e74:	b	166a8 <__assert_fail@plt+0x50f0>
   14e78:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   14e7c:	b	1524c <__assert_fail@plt+0x3c94>
   14e80:	movw	r0, #40336	; 0x9d90
   14e84:	str	r4, [sp, #172]	; 0xac
   14e88:	str	r2, [sp, #156]	; 0x9c
   14e8c:	movt	r0, #65535	; 0xffff
   14e90:	str	r0, [r9, #24]
   14e94:	str	r3, [sp, #180]	; 0xb4
   14e98:	ldr	r0, [r3, #4]
   14e9c:	ldr	r1, [r3]
   14ea0:	ldr	r3, [r6, #8]
   14ea4:	ldr	r4, [r6]
   14ea8:	str	r0, [sp, #76]	; 0x4c
   14eac:	ldm	r7, {r0, lr}
   14eb0:	str	r1, [sp, #28]
   14eb4:	ldr	r1, [r5, #4]
   14eb8:	str	lr, [sp, #64]	; 0x40
   14ebc:	ldr	r5, [r5]
   14ec0:	str	r0, [sp, #60]	; 0x3c
   14ec4:	ldm	sl, {r0, ip}
   14ec8:	str	ip, [sp, #52]	; 0x34
   14ecc:	ldr	sl, [r6, #4]
   14ed0:	str	r1, [sp, #40]	; 0x28
   14ed4:	str	r0, [sp, #56]	; 0x38
   14ed8:	ldm	r8, {r0, r7}
   14edc:	str	r7, [sp, #36]	; 0x24
   14ee0:	ldr	r2, [r9, #144]	; 0x90
   14ee4:	str	r2, [sp, #72]	; 0x48
   14ee8:	add	r2, r2, r3
   14eec:	str	r2, [sp, #68]	; 0x44
   14ef0:	str	r2, [r9, #144]	; 0x90
   14ef4:	ldr	r2, [sp, #104]	; 0x68
   14ef8:	ldr	r6, [r2]
   14efc:	ldr	r3, [r2, #4]
   14f00:	adds	r6, r6, r4
   14f04:	adc	r8, r3, sl
   14f08:	stm	r2, {r6, r8}
   14f0c:	ldr	r4, [sp, #108]	; 0x6c
   14f10:	ldr	r6, [r4]
   14f14:	ldr	r2, [r4, #4]
   14f18:	adds	r0, r6, r0
   14f1c:	adc	r6, r2, r7
   14f20:	stm	r4, {r0, r6}
   14f24:	ldr	r0, [sp, #112]	; 0x70
   14f28:	ldr	r7, [r0]
   14f2c:	ldr	r4, [r0, #4]
   14f30:	adds	r5, r7, r5
   14f34:	str	r4, [sp, #32]
   14f38:	adc	r7, r4, r1
   14f3c:	stm	r0, {r5, r7}
   14f40:	ldr	r0, [sp, #116]	; 0x74
   14f44:	ldr	r1, [sp, #56]	; 0x38
   14f48:	ldrd	r4, [r0]
   14f4c:	adds	r4, r4, r1
   14f50:	adc	r1, r5, ip
   14f54:	str	r1, [sp, #44]	; 0x2c
   14f58:	str	r4, [r0]
   14f5c:	str	r1, [r0, #4]
   14f60:	ldr	ip, [sp, #120]	; 0x78
   14f64:	ldr	r1, [sp, #60]	; 0x3c
   14f68:	ldr	r4, [ip]
   14f6c:	ldr	r0, [ip, #4]
   14f70:	adds	r4, r4, r1
   14f74:	str	r0, [sp, #48]	; 0x30
   14f78:	adc	r1, r0, lr
   14f7c:	str	r1, [sp, #56]	; 0x38
   14f80:	str	r4, [ip]
   14f84:	str	r1, [ip, #4]
   14f88:	ldr	lr, [sp, #124]	; 0x7c
   14f8c:	ldr	r0, [sp, #28]
   14f90:	ldr	r4, [lr]
   14f94:	ldr	r1, [lr, #4]
   14f98:	adds	r4, r4, r0
   14f9c:	ldr	r0, [sp, #76]	; 0x4c
   14fa0:	str	r1, [sp, #60]	; 0x3c
   14fa4:	adc	ip, r1, r0
   14fa8:	cmn	r3, #1
   14fac:	mov	r0, #0
   14fb0:	mov	r1, #0
   14fb4:	stm	lr, {r4, ip}
   14fb8:	mov	r3, #0
   14fbc:	mov	lr, #0
   14fc0:	mov	r4, #0
   14fc4:	movwgt	r0, #1
   14fc8:	cmn	r8, #1
   14fcc:	mov	r8, #0
   14fd0:	movwgt	r1, #1
   14fd4:	str	r0, [sp, #28]
   14fd8:	subs	r0, r0, r1
   14fdc:	mov	r1, #0
   14fe0:	movwne	r0, #1
   14fe4:	cmn	sl, #1
   14fe8:	str	r0, [sp, #24]
   14fec:	mov	r0, #0
   14ff0:	movwgt	r0, #1
   14ff4:	cmn	r2, #1
   14ff8:	mov	r2, #0
   14ffc:	str	r0, [sp, #20]
   15000:	mov	r0, #0
   15004:	movwgt	r0, #1
   15008:	cmn	r6, #1
   1500c:	mov	r6, #0
   15010:	movwgt	r1, #1
   15014:	str	r0, [sp, #16]
   15018:	subs	r0, r0, r1
   1501c:	ldr	r1, [sp, #44]	; 0x2c
   15020:	movwne	r0, #1
   15024:	str	r0, [sp, #12]
   15028:	ldr	r0, [sp, #36]	; 0x24
   1502c:	cmn	r0, #1
   15030:	mov	r0, #0
   15034:	movwgt	r0, #1
   15038:	str	r0, [sp, #36]	; 0x24
   1503c:	ldr	r0, [sp, #32]
   15040:	cmn	r0, #1
   15044:	mov	r0, #0
   15048:	movwgt	r8, #1
   1504c:	cmn	r7, #1
   15050:	movwgt	r0, #1
   15054:	subs	r0, r8, r0
   15058:	movwne	r0, #1
   1505c:	str	r0, [sp, #32]
   15060:	ldr	r0, [sp, #40]	; 0x28
   15064:	cmn	r0, #1
   15068:	mov	r0, #0
   1506c:	movwgt	r0, #1
   15070:	cmn	r5, #1
   15074:	mov	r5, #0
   15078:	movwgt	r3, #1
   1507c:	cmn	r1, #1
   15080:	mov	r1, #0
   15084:	movwgt	r1, #1
   15088:	subs	r1, r3, r1
   1508c:	movwne	r1, #1
   15090:	str	r1, [sp, #44]	; 0x2c
   15094:	ldr	r1, [sp, #52]	; 0x34
   15098:	cmn	r1, #1
   1509c:	ldr	r1, [sp, #48]	; 0x30
   150a0:	movwgt	lr, #1
   150a4:	cmn	r1, #1
   150a8:	ldr	r1, [sp, #56]	; 0x38
   150ac:	movwgt	r5, #1
   150b0:	cmn	r1, #1
   150b4:	ldr	r1, [sp, #64]	; 0x40
   150b8:	movwgt	r2, #1
   150bc:	subs	r7, r5, r2
   150c0:	mov	r2, #0
   150c4:	movwne	r7, #1
   150c8:	cmn	r1, #1
   150cc:	ldr	r1, [sp, #60]	; 0x3c
   150d0:	movwgt	r2, #1
   150d4:	cmn	r1, #1
   150d8:	mov	r1, #0
   150dc:	movwgt	r6, #1
   150e0:	cmn	ip, #1
   150e4:	ldr	ip, [sp, #68]	; 0x44
   150e8:	movwgt	r4, #1
   150ec:	subs	sl, r6, r4
   150f0:	ldr	r4, [sp, #76]	; 0x4c
   150f4:	movwne	sl, #1
   150f8:	cmn	r4, #1
   150fc:	ldr	r4, [sp, #72]	; 0x48
   15100:	movwgt	r1, #1
   15104:	str	r1, [sp, #76]	; 0x4c
   15108:	cmp	ip, r4
   1510c:	bvs	16b60 <__assert_fail@plt+0x55a8>
   15110:	ldr	r4, [sp, #28]
   15114:	ldr	r1, [sp, #20]
   15118:	sub	r4, r4, r1
   1511c:	ldr	r1, [sp, #24]
   15120:	clz	r4, r4
   15124:	lsr	r4, r4, #5
   15128:	ands	r4, r4, r1
   1512c:	ldreq	r1, [sp, #16]
   15130:	ldreq	r4, [sp, #36]	; 0x24
   15134:	subeq	r4, r1, r4
   15138:	ldreq	r1, [sp, #12]
   1513c:	clzeq	r4, r4
   15140:	lsreq	r4, r4, #5
   15144:	andseq	r4, r4, r1
   15148:	bne	16b60 <__assert_fail@plt+0x55a8>
   1514c:	ldr	r1, [sp, #32]
   15150:	sub	r0, r8, r0
   15154:	ldr	r4, [sp, #172]	; 0xac
   15158:	clz	r0, r0
   1515c:	lsr	r0, r0, #5
   15160:	ands	r0, r0, r1
   15164:	bne	16b60 <__assert_fail@plt+0x55a8>
   15168:	ldr	r1, [sp, #44]	; 0x2c
   1516c:	sub	r0, r3, lr
   15170:	clz	r0, r0
   15174:	lsr	r0, r0, #5
   15178:	ands	r0, r0, r1
   1517c:	subeq	r0, r5, r2
   15180:	clzeq	r0, r0
   15184:	lsreq	r0, r0, #5
   15188:	andseq	r0, r0, r7
   1518c:	bne	16b60 <__assert_fail@plt+0x55a8>
   15190:	ldr	r0, [sp, #76]	; 0x4c
   15194:	sub	r0, r6, r0
   15198:	mov	r6, #1
   1519c:	clz	r0, r0
   151a0:	lsr	r0, r0, #5
   151a4:	ands	r0, r0, sl
   151a8:	bne	16b74 <__assert_fail@plt+0x55bc>
   151ac:	movw	r1, #6654	; 0x19fe
   151b0:	mov	r0, #1
   151b4:	mov	r2, #5
   151b8:	movt	r1, #2
   151bc:	strb	r0, [r9, #153]	; 0x99
   151c0:	mov	r0, #0
   151c4:	bl	11318 <dcgettext@plt>
   151c8:	mov	r1, r9
   151cc:	bl	17008 <__assert_fail@plt+0x5a50>
   151d0:	ldr	r2, [sp, #156]	; 0x9c
   151d4:	ldr	r3, [sp, #180]	; 0xb4
   151d8:	b	155cc <__assert_fail@plt+0x4014>
   151dc:	mov	r0, r2
   151e0:	mov	r1, r4
   151e4:	mov	r4, r3
   151e8:	ldr	r8, [r3, #-56]	; 0xffffffc8
   151ec:	ldr	sl, [r3, #-52]	; 0xffffffcc
   151f0:	ldr	r2, [r3, #-272]	; 0xfffffef0
   151f4:	ldr	r3, [r3, #-268]	; 0xfffffef4
   151f8:	ldr	r5, [sp, #144]	; 0x90
   151fc:	ldrd	r6, [r4, #-160]	; 0xffffff60
   15200:	strd	r2, [r5]
   15204:	mov	r3, r4
   15208:	mov	r4, r1
   1520c:	ldr	r2, [sp, #140]	; 0x8c
   15210:	strd	r6, [r2]
   15214:	str	r8, [r9, #88]	; 0x58
   15218:	mov	r2, r0
   1521c:	str	sl, [r9, #92]	; 0x5c
   15220:	b	15364 <__assert_fail@plt+0x3dac>
   15224:	ldr	r0, [r3]
   15228:	str	r0, [r9, #24]
   1522c:	b	166a8 <__assert_fail@plt+0x50f0>
   15230:	ldr	r0, [r9, #172]	; 0xac
   15234:	movw	r1, #2497	; 0x9c1
   15238:	movt	r1, #2
   1523c:	add	r0, r0, #1
   15240:	str	r0, [r9, #172]	; 0xac
   15244:	b	155a0 <__assert_fail@plt+0x3fe8>
   15248:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   1524c:	mov	r5, r4
   15250:	mov	r4, r2
   15254:	ldr	r2, [sp, #96]	; 0x60
   15258:	strd	r0, [r2]
   1525c:	mov	r1, #1
   15260:	mov	r2, r4
   15264:	mov	r4, r5
   15268:	ldr	r0, [r3]
   1526c:	strb	r1, [r9, #188]	; 0xbc
   15270:	str	r0, [r9, #16]
   15274:	b	166a8 <__assert_fail@plt+0x50f0>
   15278:	ldr	r6, [r3, #-208]	; 0xffffff30
   1527c:	ldrb	r0, [r9, #181]	; 0xb5
   15280:	cmp	r6, #4
   15284:	blt	15ab4 <__assert_fail@plt+0x44fc>
   15288:	mov	r8, r2
   1528c:	sub	r5, r3, #224	; 0xe0
   15290:	cmp	r0, #0
   15294:	beq	152dc <__assert_fail@plt+0x3d24>
   15298:	movw	r1, #6677	; 0x1a15
   1529c:	mov	r0, #0
   152a0:	mov	r2, #5
   152a4:	mov	sl, r4
   152a8:	mov	r4, r3
   152ac:	movt	r1, #2
   152b0:	bl	11318 <dcgettext@plt>
   152b4:	ldrd	r2, [r4, #-216]	; 0xffffff28
   152b8:	asr	r1, r6, #31
   152bc:	str	r6, [sp]
   152c0:	str	r1, [sp, #4]
   152c4:	bl	172b8 <__assert_fail@plt+0x5d00>
   152c8:	ldr	ip, [sp, #176]	; 0xb0
   152cc:	movw	lr, #3768	; 0xeb8
   152d0:	mov	r3, r4
   152d4:	mov	r4, sl
   152d8:	movt	lr, #2
   152dc:	vld1.64	{d16-d17}, [r5]!
   152e0:	ldr	r0, [sp, #100]	; 0x64
   152e4:	ldr	r2, [sp, #168]	; 0xa8
   152e8:	vldr	d18, [r5]
   152ec:	vst1.64	{d16-d17}, [r0]!
   152f0:	vstr	d18, [r0]
   152f4:	ldrd	r0, [r3, #-104]	; 0xffffff98
   152f8:	strd	r0, [r2]
   152fc:	ldrd	r0, [r7]
   15300:	ldr	r2, [sp, #164]	; 0xa4
   15304:	strd	r0, [r2]
   15308:	mov	r2, r8
   1530c:	b	166a8 <__assert_fail@plt+0x50f0>
   15310:	ldr	r0, [r9, #156]	; 0x9c
   15314:	movw	r1, #3168	; 0xc60
   15318:	movt	r1, #2
   1531c:	add	r0, r0, #1
   15320:	str	r0, [r9, #156]	; 0x9c
   15324:	b	155a0 <__assert_fail@plt+0x3fe8>
   15328:	ldrd	r0, [r3, #-160]	; 0xffffff60
   1532c:	ldr	r7, [sp, #144]	; 0x90
   15330:	mov	r6, r4
   15334:	mov	r4, r3
   15338:	mov	r5, r2
   1533c:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   15340:	strd	r0, [r7]
   15344:	ldr	r0, [sp, #140]	; 0x8c
   15348:	strd	r2, [r0]
   1534c:	mov	r0, #0
   15350:	mov	r3, r4
   15354:	mov	r2, r5
   15358:	mov	r4, r6
   1535c:	str	r0, [r9, #88]	; 0x58
   15360:	str	r0, [r9, #92]	; 0x5c
   15364:	ldr	r0, [r3]
   15368:	str	r0, [r9, #28]
   1536c:	b	166a8 <__assert_fail@plt+0x50f0>
   15370:	ldr	r0, [r3]
   15374:	add	r0, r0, #3600	; 0xe10
   15378:	str	r0, [r9, #24]
   1537c:	b	166a8 <__assert_fail@plt+0x50f0>
   15380:	mov	r5, r2
   15384:	ldrd	r0, [r3]
   15388:	ldr	r2, [sp, #80]	; 0x50
   1538c:	strd	r0, [r2]
   15390:	movw	r1, #6612	; 0x19d4
   15394:	mov	r0, #1
   15398:	strb	r0, [r9, #152]	; 0x98
   1539c:	movt	r1, #2
   153a0:	mov	r0, #0
   153a4:	b	155a8 <__assert_fail@plt+0x3ff0>
   153a8:	ldr	r1, [r9, #172]	; 0xac
   153ac:	ldr	r0, [r9, #156]	; 0x9c
   153b0:	add	r1, r1, #1
   153b4:	add	r0, r0, #1
   153b8:	str	r1, [r9, #172]	; 0xac
   153bc:	movw	r1, #6630	; 0x19e6
   153c0:	str	r0, [r9, #156]	; 0x9c
   153c4:	movt	r1, #2
   153c8:	b	155a0 <__assert_fail@plt+0x3fe8>
   153cc:	ldr	r0, [r9, #160]	; 0xa0
   153d0:	movw	r1, #6650	; 0x19fa
   153d4:	movt	r1, #2
   153d8:	add	r0, r0, #1
   153dc:	str	r0, [r9, #160]	; 0xa0
   153e0:	b	155a0 <__assert_fail@plt+0x3fe8>
   153e4:	movw	r1, #6654	; 0x19fe
   153e8:	movt	r1, #2
   153ec:	b	15574 <__assert_fail@plt+0x3fbc>
   153f0:	ldrd	r0, [r3, #-160]	; 0xffffff60
   153f4:	ldr	r7, [sp, #144]	; 0x90
   153f8:	mov	r6, r4
   153fc:	mov	r4, r3
   15400:	mov	r5, r2
   15404:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   15408:	strd	r0, [r7]
   1540c:	ldr	r0, [sp, #140]	; 0x8c
   15410:	strd	r2, [r0]
   15414:	mov	r0, #0
   15418:	mov	r3, r4
   1541c:	mov	r2, r5
   15420:	mov	r4, r6
   15424:	str	r0, [r9, #88]	; 0x58
   15428:	str	r0, [r9, #92]	; 0x5c
   1542c:	b	154d8 <__assert_fail@plt+0x3f20>
   15430:	mov	r0, #0
   15434:	str	r0, [sp, #236]	; 0xec
   15438:	mov	r0, #1
   1543c:	str	r0, [sp, #244]	; 0xf4
   15440:	mov	r0, #0
   15444:	str	r0, [sp, #228]	; 0xe4
   15448:	mov	r0, #0
   1544c:	str	r0, [sp, #232]	; 0xe8
   15450:	mov	r0, #0
   15454:	str	r0, [sp, #224]	; 0xe0
   15458:	mov	r0, #0
   1545c:	str	r0, [sp, #220]	; 0xdc
   15460:	mov	r0, #0
   15464:	str	r0, [sp, #216]	; 0xd8
   15468:	mov	r0, #0
   1546c:	str	r0, [sp, #212]	; 0xd4
   15470:	mov	r0, #0
   15474:	str	r0, [sp, #204]	; 0xcc
   15478:	mov	r0, #0
   1547c:	str	r0, [sp, #208]	; 0xd0
   15480:	mov	r0, #0
   15484:	str	r0, [sp, #200]	; 0xc8
   15488:	mov	r0, #0
   1548c:	str	r0, [sp, #196]	; 0xc4
   15490:	b	166a0 <__assert_fail@plt+0x50e8>
   15494:	mov	r0, r2
   15498:	mov	r1, r4
   1549c:	mov	r4, r3
   154a0:	ldr	r8, [r3, #-56]	; 0xffffffc8
   154a4:	ldr	sl, [r3, #-52]	; 0xffffffcc
   154a8:	ldr	r2, [r3, #-272]	; 0xfffffef0
   154ac:	ldr	r3, [r3, #-268]	; 0xfffffef4
   154b0:	ldr	r5, [sp, #144]	; 0x90
   154b4:	ldrd	r6, [r4, #-160]	; 0xffffff60
   154b8:	strd	r2, [r5]
   154bc:	mov	r3, r4
   154c0:	mov	r4, r1
   154c4:	ldr	r2, [sp, #140]	; 0x8c
   154c8:	strd	r6, [r2]
   154cc:	str	r8, [r9, #88]	; 0x58
   154d0:	mov	r2, r0
   154d4:	str	sl, [r9, #92]	; 0x5c
   154d8:	mov	r0, #2
   154dc:	str	r0, [r9, #28]
   154e0:	b	166a8 <__assert_fail@plt+0x50f0>
   154e4:	ldrd	r0, [r3, #-104]	; 0xffffff98
   154e8:	b	155ec <__assert_fail@plt+0x4034>
   154ec:	ldr	r0, [r9, #164]	; 0xa4
   154f0:	movw	r1, #6639	; 0x19ef
   154f4:	movt	r1, #2
   154f8:	add	r0, r0, #1
   154fc:	str	r0, [r9, #164]	; 0xa4
   15500:	b	155a0 <__assert_fail@plt+0x3fe8>
   15504:	ldrd	r0, [r7]
   15508:	str	r1, [sp, #240]	; 0xf0
   1550c:	str	r0, [sp, #244]	; 0xf4
   15510:	b	166a8 <__assert_fail@plt+0x50f0>
   15514:	ldr	r0, [r9, #176]	; 0xb0
   15518:	movw	r1, #6645	; 0x19f5
   1551c:	movt	r1, #2
   15520:	add	r0, r0, #1
   15524:	str	r0, [r9, #176]	; 0xb0
   15528:	b	155a0 <__assert_fail@plt+0x3fe8>
   1552c:	mov	r5, r4
   15530:	mov	r4, r2
   15534:	ldrd	r0, [r3, #-104]	; 0xffffff98
   15538:	ldr	r2, [sp, #164]	; 0xa4
   1553c:	strd	r0, [r2]
   15540:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15544:	ldr	r2, [sp, #168]	; 0xa8
   15548:	b	15954 <__assert_fail@plt+0x439c>
   1554c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15550:	str	r1, [sp, #228]	; 0xe4
   15554:	str	r0, [sp, #236]	; 0xec
   15558:	mov	r0, #0
   1555c:	str	r0, [sp, #232]	; 0xe8
   15560:	mov	r0, #0
   15564:	str	r0, [sp, #224]	; 0xe0
   15568:	b	16660 <__assert_fail@plt+0x50a8>
   1556c:	movw	r1, #6670	; 0x1a0e
   15570:	movt	r1, #2
   15574:	mov	r5, r2
   15578:	mov	r0, #0
   1557c:	mov	r2, #5
   15580:	mov	r6, r4
   15584:	mov	r4, r3
   15588:	bl	11318 <dcgettext@plt>
   1558c:	mov	r1, r9
   15590:	bl	17008 <__assert_fail@plt+0x5a50>
   15594:	b	155c0 <__assert_fail@plt+0x4008>
   15598:	movw	r1, #6663	; 0x1a07
   1559c:	movt	r1, #2
   155a0:	mov	r0, #0
   155a4:	mov	r5, r2
   155a8:	mov	r2, #5
   155ac:	mov	r6, r4
   155b0:	mov	r4, r3
   155b4:	bl	11318 <dcgettext@plt>
   155b8:	mov	r1, r9
   155bc:	bl	16b88 <__assert_fail@plt+0x55d0>
   155c0:	mov	r3, r4
   155c4:	mov	r2, r5
   155c8:	mov	r4, r6
   155cc:	ldr	ip, [sp, #176]	; 0xb0
   155d0:	movw	lr, #3768	; 0xeb8
   155d4:	movt	lr, #2
   155d8:	b	166a8 <__assert_fail@plt+0x50f0>
   155dc:	ldr	r0, [r3]
   155e0:	str	r0, [r9, #20]
   155e4:	b	166a8 <__assert_fail@plt+0x50f0>
   155e8:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   155ec:	mov	r5, r4
   155f0:	mov	r4, r2
   155f4:	ldr	r2, [sp, #168]	; 0xa8
   155f8:	strd	r0, [r2]
   155fc:	ldrd	r0, [r7]
   15600:	ldr	r2, [sp, #164]	; 0xa4
   15604:	strd	r0, [r2]
   15608:	mov	r2, r4
   1560c:	mov	r4, r5
   15610:	b	166a8 <__assert_fail@plt+0x50f0>
   15614:	ldr	r0, [r9, #176]	; 0xb0
   15618:	str	r2, [sp, #156]	; 0x9c
   1561c:	mov	r2, #0
   15620:	mov	r6, #100	; 0x64
   15624:	str	r4, [sp, #172]	; 0xac
   15628:	str	r3, [sp, #180]	; 0xb4
   1562c:	add	r0, r0, #1
   15630:	str	r0, [r9, #176]	; 0xb0
   15634:	ldr	r1, [r3, #-40]	; 0xffffffd8
   15638:	ldr	sl, [r3, #4]
   1563c:	ldr	r0, [r3, #-48]	; 0xffffffd0
   15640:	ldr	r5, [r3, #-44]	; 0xffffffd4
   15644:	cmp	r1, #3
   15648:	mov	r1, #0
   1564c:	movwlt	r1, #1
   15650:	cmp	sl, #0
   15654:	movwmi	r2, #1
   15658:	ands	r1, r2, r1
   1565c:	umull	r7, r1, r0, r6
   15660:	moveq	r7, r0
   15664:	mlane	r5, r5, r6, r1
   15668:	cmn	sl, #1
   1566c:	ble	15f48 <__assert_fail@plt+0x4990>
   15670:	ldr	r0, [r3, #-56]	; 0xffffffc8
   15674:	ldr	r4, [r3]
   15678:	cmn	r5, #1
   1567c:	str	r0, [sp, #76]	; 0x4c
   15680:	ble	16518 <__assert_fail@plt+0x4f60>
   15684:	movw	r1, #8738	; 0x2222
   15688:	movw	r0, #8738	; 0x2222
   1568c:	mov	r2, #1
   15690:	movt	r1, #8738	; 0x2222
   15694:	movt	r0, #546	; 0x222
   15698:	subs	r1, r1, r7
   1569c:	sbcs	r0, r0, r5
   156a0:	blt	16550 <__assert_fail@plt+0x4f98>
   156a4:	b	1654c <__assert_fail@plt+0x4f94>
   156a8:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   156ac:	str	r0, [sp, #220]	; 0xdc
   156b0:	mov	r0, #0
   156b4:	str	r1, [sp, #216]	; 0xd8
   156b8:	str	r0, [sp, #236]	; 0xec
   156bc:	mov	r0, #0
   156c0:	str	r0, [sp, #228]	; 0xe4
   156c4:	mov	r0, #0
   156c8:	str	r0, [sp, #232]	; 0xe8
   156cc:	mov	r0, #0
   156d0:	str	r0, [sp, #224]	; 0xe0
   156d4:	b	16670 <__assert_fail@plt+0x50b8>
   156d8:	mov	r0, #0
   156dc:	str	r0, [sp, #236]	; 0xec
   156e0:	mov	r0, #1
   156e4:	str	r0, [sp, #212]	; 0xd4
   156e8:	mov	r0, #0
   156ec:	str	r0, [sp, #228]	; 0xe4
   156f0:	mov	r0, #0
   156f4:	str	r0, [sp, #232]	; 0xe8
   156f8:	mov	r0, #0
   156fc:	str	r0, [sp, #224]	; 0xe0
   15700:	mov	r0, #0
   15704:	str	r0, [sp, #220]	; 0xdc
   15708:	mov	r0, #0
   1570c:	str	r0, [sp, #216]	; 0xd8
   15710:	b	16678 <__assert_fail@plt+0x50c0>
   15714:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15718:	str	r0, [sp, #208]	; 0xd0
   1571c:	mov	r0, #0
   15720:	str	r1, [sp, #200]	; 0xc8
   15724:	str	r0, [sp, #236]	; 0xec
   15728:	mov	r0, #0
   1572c:	str	r0, [sp, #228]	; 0xe4
   15730:	mov	r0, #0
   15734:	str	r0, [sp, #232]	; 0xe8
   15738:	mov	r0, #0
   1573c:	str	r0, [sp, #224]	; 0xe0
   15740:	mov	r0, #0
   15744:	str	r0, [sp, #220]	; 0xdc
   15748:	mov	r0, #0
   1574c:	str	r0, [sp, #216]	; 0xd8
   15750:	mov	r0, #0
   15754:	str	r0, [sp, #212]	; 0xd4
   15758:	mov	r0, #0
   1575c:	str	r0, [sp, #204]	; 0xcc
   15760:	b	16690 <__assert_fail@plt+0x50d8>
   15764:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15768:	str	r0, [sp, #244]	; 0xf4
   1576c:	mov	r0, #0
   15770:	str	r1, [sp, #240]	; 0xf0
   15774:	str	r0, [sp, #236]	; 0xec
   15778:	mov	r0, #0
   1577c:	str	r0, [sp, #228]	; 0xe4
   15780:	mov	r0, #0
   15784:	str	r0, [sp, #232]	; 0xe8
   15788:	mov	r0, #0
   1578c:	str	r0, [sp, #224]	; 0xe0
   15790:	mov	r0, #0
   15794:	str	r0, [sp, #220]	; 0xdc
   15798:	mov	r0, #0
   1579c:	str	r0, [sp, #216]	; 0xd8
   157a0:	mov	r0, #0
   157a4:	str	r0, [sp, #212]	; 0xd4
   157a8:	mov	r0, #0
   157ac:	str	r0, [sp, #204]	; 0xcc
   157b0:	mov	r0, #0
   157b4:	str	r0, [sp, #208]	; 0xd0
   157b8:	mov	r0, #0
   157bc:	str	r0, [sp, #200]	; 0xc8
   157c0:	mov	r0, #0
   157c4:	str	r0, [sp, #196]	; 0xc4
   157c8:	b	166a8 <__assert_fail@plt+0x50f0>
   157cc:	movw	r0, #40336	; 0x9d90
   157d0:	movt	r0, #65535	; 0xffff
   157d4:	str	r0, [r9, #24]
   157d8:	b	166a8 <__assert_fail@plt+0x50f0>
   157dc:	mov	r0, #0
   157e0:	str	r0, [sp, #236]	; 0xec
   157e4:	mov	r0, #1
   157e8:	str	r0, [sp, #220]	; 0xdc
   157ec:	mov	r0, #0
   157f0:	str	r0, [sp, #228]	; 0xe4
   157f4:	mov	r0, #0
   157f8:	str	r0, [sp, #232]	; 0xe8
   157fc:	mov	r0, #0
   15800:	str	r0, [sp, #224]	; 0xe0
   15804:	b	16668 <__assert_fail@plt+0x50b0>
   15808:	ldr	r0, [r9, #156]	; 0x9c
   1580c:	vld1.64	{d16-d17}, [r3]
   15810:	ldr	r6, [sl]
   15814:	cmp	r0, #0
   15818:	beq	15850 <__assert_fail@plt+0x4298>
   1581c:	ldr	r1, [sp, #92]	; 0x5c
   15820:	ldr	r1, [r1]
   15824:	cmp	r1, #0
   15828:	bne	15850 <__assert_fail@plt+0x4298>
   1582c:	ldrb	r1, [r9, #153]	; 0x99
   15830:	cmp	r1, #0
   15834:	bne	15850 <__assert_fail@plt+0x4298>
   15838:	ldr	r7, [sl, #4]
   1583c:	cmp	r6, #2
   15840:	bgt	167b0 <__assert_fail@plt+0x51f8>
   15844:	ldr	r1, [r9, #172]	; 0xac
   15848:	cmp	r1, #0
   1584c:	bne	167b0 <__assert_fail@plt+0x51f8>
   15850:	cmp	r6, #5
   15854:	str	r4, [sp, #172]	; 0xac
   15858:	blt	15b60 <__assert_fail@plt+0x45a8>
   1585c:	vmov.32	r5, d17[1]
   15860:	vmov.32	sl, d17[0]
   15864:	add	r0, r0, #1
   15868:	str	r2, [sp, #156]	; 0x9c
   1586c:	mov	r8, r3
   15870:	mov	r2, #100	; 0x64
   15874:	mov	r3, #0
   15878:	mov	r4, #100	; 0x64
   1587c:	str	r0, [r9, #156]	; 0x9c
   15880:	mov	r0, sl
   15884:	mov	r1, r5
   15888:	bl	20168 <__assert_fail@plt+0xebb0>
   1588c:	umull	r2, r3, r0, r4
   15890:	ldr	r7, [sp, #164]	; 0xa4
   15894:	mla	r3, r1, r4, r3
   15898:	subs	r2, sl, r2
   1589c:	sbc	r3, r5, r3
   158a0:	strd	r2, [r7]
   158a4:	mov	r2, #100	; 0x64
   158a8:	mov	r3, #0
   158ac:	bl	20168 <__assert_fail@plt+0xebb0>
   158b0:	mov	r0, r2
   158b4:	ldr	r2, [sp, #168]	; 0xa8
   158b8:	mov	r1, r3
   158bc:	mov	r3, #0
   158c0:	strd	r0, [r2]
   158c4:	mov	r0, sl
   158c8:	mov	r1, r5
   158cc:	movw	r2, #10000	; 0x2710
   158d0:	bl	20168 <__assert_fail@plt+0xebb0>
   158d4:	ldr	r2, [sp, #88]	; 0x58
   158d8:	ldr	ip, [sp, #176]	; 0xb0
   158dc:	movw	lr, #3768	; 0xeb8
   158e0:	mov	r3, r8
   158e4:	movt	lr, #2
   158e8:	strd	r0, [r2]
   158ec:	sub	r0, r6, #4
   158f0:	ldr	r2, [sp, #156]	; 0x9c
   158f4:	ldr	r4, [sp, #172]	; 0xac
   158f8:	str	r0, [r9, #48]	; 0x30
   158fc:	b	166a8 <__assert_fail@plt+0x50f0>
   15900:	ldr	r1, [sp, #96]	; 0x60
   15904:	mov	r0, #0
   15908:	str	r0, [r1]
   1590c:	str	r0, [r1, #4]
   15910:	ldr	r0, [r3, #-56]	; 0xffffffc8
   15914:	str	r0, [r9, #16]
   15918:	b	166a8 <__assert_fail@plt+0x50f0>
   1591c:	ldr	r1, [sp, #96]	; 0x60
   15920:	mov	r0, #0
   15924:	str	r0, [r1]
   15928:	str	r0, [r1, #4]
   1592c:	ldr	r0, [r3]
   15930:	str	r0, [r9, #16]
   15934:	b	166a8 <__assert_fail@plt+0x50f0>
   15938:	mov	r5, r4
   1593c:	mov	r4, r2
   15940:	ldrd	r0, [r3, #-168]	; 0xffffff58
   15944:	ldr	r2, [sp, #168]	; 0xa8
   15948:	strd	r0, [r2]
   1594c:	ldrd	r0, [r3, #-104]	; 0xffffff98
   15950:	ldr	r2, [sp, #164]	; 0xa4
   15954:	strd	r0, [r2]
   15958:	mov	r0, r3
   1595c:	mov	r2, r4
   15960:	mov	r4, r5
   15964:	b	15b18 <__assert_fail@plt+0x4560>
   15968:	mov	r5, r2
   1596c:	ldrd	r0, [r3, #-104]	; 0xffffff98
   15970:	ldr	r2, [sp, #164]	; 0xa4
   15974:	mov	r6, r4
   15978:	mov	r4, r3
   1597c:	strd	r0, [r2]
   15980:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15984:	ldr	r2, [sp, #168]	; 0xa8
   15988:	strd	r0, [r2]
   1598c:	ldrd	r0, [r7]
   15990:	ldr	r2, [sp, #88]	; 0x58
   15994:	rsbs	r0, r0, #0
   15998:	rsc	r3, r1, #0
   1599c:	stm	r2, {r0, r3}
   159a0:	ands	r0, r1, r3
   159a4:	bmi	16b60 <__assert_fail@plt+0x55a8>
   159a8:	ldr	r0, [r4, #16]
   159ac:	ldr	r1, [sp, #92]	; 0x5c
   159b0:	mov	r3, r4
   159b4:	mov	r2, r5
   159b8:	mov	r4, r6
   159bc:	str	r0, [r1]
   159c0:	b	166a8 <__assert_fail@plt+0x50f0>
   159c4:	mov	r0, #0
   159c8:	str	r0, [sp, #236]	; 0xec
   159cc:	mov	r0, #1
   159d0:	str	r0, [sp, #208]	; 0xd0
   159d4:	mov	r0, #0
   159d8:	str	r0, [sp, #228]	; 0xe4
   159dc:	mov	r0, #0
   159e0:	str	r0, [sp, #232]	; 0xe8
   159e4:	mov	r0, #0
   159e8:	str	r0, [sp, #224]	; 0xe0
   159ec:	mov	r0, #0
   159f0:	str	r0, [sp, #220]	; 0xdc
   159f4:	mov	r0, #0
   159f8:	str	r0, [sp, #216]	; 0xd8
   159fc:	mov	r0, #0
   15a00:	str	r0, [sp, #212]	; 0xd4
   15a04:	mov	r0, #0
   15a08:	str	r0, [sp, #204]	; 0xcc
   15a0c:	b	16688 <__assert_fail@plt+0x50d0>
   15a10:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15a14:	str	r0, [sp, #212]	; 0xd4
   15a18:	mov	r0, #0
   15a1c:	str	r1, [sp, #204]	; 0xcc
   15a20:	str	r0, [sp, #236]	; 0xec
   15a24:	mov	r0, #0
   15a28:	str	r0, [sp, #228]	; 0xe4
   15a2c:	mov	r0, #0
   15a30:	str	r0, [sp, #232]	; 0xe8
   15a34:	mov	r0, #0
   15a38:	str	r0, [sp, #224]	; 0xe0
   15a3c:	mov	r0, #0
   15a40:	str	r0, [sp, #220]	; 0xdc
   15a44:	mov	r0, #0
   15a48:	str	r0, [sp, #216]	; 0xd8
   15a4c:	b	16680 <__assert_fail@plt+0x50c8>
   15a50:	ldr	r8, [r3, #-48]	; 0xffffffd0
   15a54:	ldr	r5, [r3, #-44]	; 0xffffffd4
   15a58:	cmn	r5, #1
   15a5c:	ble	15c00 <__assert_fail@plt+0x4648>
   15a60:	and	r0, r6, r7
   15a64:	cmn	r0, #1
   15a68:	beq	1663c <__assert_fail@plt+0x5084>
   15a6c:	mov	sl, r2
   15a70:	str	r4, [sp, #172]	; 0xac
   15a74:	mov	r4, r3
   15a78:	mov	r0, #0
   15a7c:	mov	r1, #-2147483648	; 0x80000000
   15a80:	mov	r2, r6
   15a84:	mov	r3, r7
   15a88:	bl	20168 <__assert_fail@plt+0xebb0>
   15a8c:	mov	r3, r4
   15a90:	ldr	r4, [sp, #172]	; 0xac
   15a94:	ldr	ip, [sp, #176]	; 0xb0
   15a98:	movw	lr, #3768	; 0xeb8
   15a9c:	subs	r0, r0, r8
   15aa0:	mov	r2, sl
   15aa4:	movt	lr, #2
   15aa8:	sbcs	r0, r1, r5
   15aac:	bge	1663c <__assert_fail@plt+0x5084>
   15ab0:	b	16b60 <__assert_fail@plt+0x55a8>
   15ab4:	mov	r5, r2
   15ab8:	cmp	r0, #0
   15abc:	beq	15af8 <__assert_fail@plt+0x4540>
   15ac0:	movw	r1, #6735	; 0x1a4f
   15ac4:	mov	r0, #0
   15ac8:	mov	r2, #5
   15acc:	mov	r6, r4
   15ad0:	mov	r4, r3
   15ad4:	movt	r1, #2
   15ad8:	bl	11318 <dcgettext@plt>
   15adc:	ldrd	r2, [r4, #-216]	; 0xffffff28
   15ae0:	bl	172b8 <__assert_fail@plt+0x5d00>
   15ae4:	ldr	ip, [sp, #176]	; 0xb0
   15ae8:	movw	lr, #3768	; 0xeb8
   15aec:	mov	r3, r4
   15af0:	mov	r4, r6
   15af4:	movt	lr, #2
   15af8:	ldrd	r0, [r3, #-216]	; 0xffffff28
   15afc:	ldr	r2, [sp, #168]	; 0xa8
   15b00:	strd	r0, [r2]
   15b04:	ldrd	r0, [r3, #-104]	; 0xffffff98
   15b08:	ldr	r2, [sp, #164]	; 0xa4
   15b0c:	strd	r0, [r2]
   15b10:	mov	r0, r3
   15b14:	mov	r2, r5
   15b18:	vld1.64	{d16-d17}, [r0]!
   15b1c:	vldr	d18, [r0]
   15b20:	ldr	r0, [sp, #100]	; 0x64
   15b24:	vst1.64	{d16-d17}, [r0]!
   15b28:	vstr	d18, [r0]
   15b2c:	b	166a8 <__assert_fail@plt+0x50f0>
   15b30:	ldr	r0, [r9, #172]	; 0xac
   15b34:	vmov.32	r4, d17[1]
   15b38:	mov	r2, #0
   15b3c:	cmp	lr, #3
   15b40:	add	r0, r0, #1
   15b44:	str	r0, [r9, #172]	; 0xac
   15b48:	vmov.32	r0, d17[0]
   15b4c:	bge	15f8c <__assert_fail@plt+0x49d4>
   15b50:	mov	r1, r4
   15b54:	mov	ip, #0
   15b58:	mov	r3, #0
   15b5c:	b	15fbc <__assert_fail@plt+0x4a04>
   15b60:	vmov.32	sl, d17[1]
   15b64:	vmov.32	r7, d17[0]
   15b68:	ldr	r0, [r9, #172]	; 0xac
   15b6c:	mov	r4, r2
   15b70:	mov	r5, r3
   15b74:	mov	r8, #0
   15b78:	cmp	r6, #3
   15b7c:	add	r0, r0, #1
   15b80:	str	r0, [r9, #172]	; 0xac
   15b84:	bge	16320 <__assert_fail@plt+0x4d68>
   15b88:	mov	r0, r7
   15b8c:	mov	r1, sl
   15b90:	mov	r2, #0
   15b94:	mov	r3, #0
   15b98:	b	16354 <__assert_fail@plt+0x4d9c>
   15b9c:	and	r0, r8, r5
   15ba0:	cmn	r0, #1
   15ba4:	beq	16634 <__assert_fail@plt+0x507c>
   15ba8:	mov	sl, r2
   15bac:	str	r4, [sp, #172]	; 0xac
   15bb0:	mov	r4, r3
   15bb4:	mov	r0, #0
   15bb8:	mov	r1, #-2147483648	; 0x80000000
   15bbc:	mov	r2, r8
   15bc0:	mov	r3, r5
   15bc4:	bl	20168 <__assert_fail@plt+0xebb0>
   15bc8:	mov	r3, r4
   15bcc:	ldr	r4, [sp, #172]	; 0xac
   15bd0:	ldr	ip, [sp, #176]	; 0xb0
   15bd4:	movw	lr, #3768	; 0xeb8
   15bd8:	subs	r0, r0, r6
   15bdc:	mov	r2, sl
   15be0:	movt	lr, #2
   15be4:	sbcs	r0, r1, r7
   15be8:	bge	1663c <__assert_fail@plt+0x5084>
   15bec:	b	16b60 <__assert_fail@plt+0x55a8>
   15bf0:	ldr	r8, [r3, #-56]	; 0xffffffc8
   15bf4:	ldr	r5, [r3, #-52]	; 0xffffffcc
   15bf8:	cmn	r5, #1
   15bfc:	bgt	15a60 <__assert_fail@plt+0x44a8>
   15c00:	mov	sl, r2
   15c04:	str	r4, [sp, #172]	; 0xac
   15c08:	mov	r4, r3
   15c0c:	mvn	r0, #0
   15c10:	mvn	r1, #-2147483648	; 0x80000000
   15c14:	mov	r2, r6
   15c18:	mov	r3, r7
   15c1c:	bl	20168 <__assert_fail@plt+0xebb0>
   15c20:	mov	r3, r4
   15c24:	ldr	r4, [sp, #172]	; 0xac
   15c28:	ldr	ip, [sp, #176]	; 0xb0
   15c2c:	movw	lr, #3768	; 0xeb8
   15c30:	subs	r0, r8, r0
   15c34:	mov	r2, sl
   15c38:	movt	lr, #2
   15c3c:	sbcs	r0, r5, r1
   15c40:	bge	1663c <__assert_fail@plt+0x5084>
   15c44:	b	16b60 <__assert_fail@plt+0x55a8>
   15c48:	ldr	r0, [sp, #104]	; 0x68
   15c4c:	sub	r5, r2, r4
   15c50:	str	r4, [sp, #52]	; 0x34
   15c54:	str	r5, [r9, #144]	; 0x90
   15c58:	ldrd	r4, [r0]
   15c5c:	subs	r4, r4, r1
   15c60:	sbc	r1, r5, r7
   15c64:	str	r4, [r0]
   15c68:	mov	r4, r6
   15c6c:	str	r1, [r0, #4]
   15c70:	ldr	r0, [sp, #108]	; 0x6c
   15c74:	ldr	r8, [r0]
   15c78:	ldr	r6, [r0, #4]
   15c7c:	subs	r8, r8, r3
   15c80:	str	r6, [sp, #24]
   15c84:	sbc	r3, r6, r4
   15c88:	str	r8, [r0]
   15c8c:	str	r3, [r0, #4]
   15c90:	ldr	r0, [sp, #112]	; 0x70
   15c94:	ldr	r8, [r0]
   15c98:	ldr	r6, [r0, #4]
   15c9c:	subs	r8, r8, ip
   15ca0:	str	r6, [sp, #28]
   15ca4:	sbc	r6, r6, sl
   15ca8:	str	r6, [sp, #32]
   15cac:	str	r8, [r0]
   15cb0:	str	r6, [r0, #4]
   15cb4:	ldr	ip, [sp, #116]	; 0x74
   15cb8:	ldr	r6, [sp, #72]	; 0x48
   15cbc:	ldr	r8, [ip]
   15cc0:	ldr	r0, [ip, #4]
   15cc4:	subs	r8, r8, lr
   15cc8:	str	r0, [sp, #36]	; 0x24
   15ccc:	sbc	r6, r0, r6
   15cd0:	str	r6, [sp, #44]	; 0x2c
   15cd4:	str	r8, [ip]
   15cd8:	str	r6, [ip, #4]
   15cdc:	ldr	ip, [sp, #120]	; 0x78
   15ce0:	ldr	r2, [sp, #56]	; 0x38
   15ce4:	ldr	r6, [ip]
   15ce8:	ldr	r0, [ip, #4]
   15cec:	subs	r8, r6, r2
   15cf0:	ldr	r2, [sp, #76]	; 0x4c
   15cf4:	str	r0, [sp, #48]	; 0x30
   15cf8:	sbc	r6, r0, r2
   15cfc:	str	r6, [sp, #56]	; 0x38
   15d00:	str	r8, [ip]
   15d04:	str	r6, [ip, #4]
   15d08:	mov	ip, #0
   15d0c:	ldr	r6, [sp, #124]	; 0x7c
   15d10:	ldr	r0, [sp, #60]	; 0x3c
   15d14:	ldm	r6, {r2, lr}
   15d18:	subs	r8, r2, r0
   15d1c:	ldr	r0, [sp, #68]	; 0x44
   15d20:	mov	r2, #0
   15d24:	sbc	r0, lr, r0
   15d28:	cmn	r7, #1
   15d2c:	str	r0, [sp, #60]	; 0x3c
   15d30:	str	r8, [r6]
   15d34:	str	r0, [r6, #4]
   15d38:	mov	r0, #0
   15d3c:	movwgt	r0, #1
   15d40:	cmn	r5, #1
   15d44:	mov	r6, #0
   15d48:	mov	r5, #0
   15d4c:	movwgt	r2, #1
   15d50:	subs	r0, r2, r0
   15d54:	movwne	r0, #1
   15d58:	cmn	r1, #1
   15d5c:	ldr	r1, [sp, #24]
   15d60:	str	r0, [sp, #20]
   15d64:	mov	r0, #0
   15d68:	movwgt	r0, #1
   15d6c:	subs	r0, r2, r0
   15d70:	ldr	r2, [sp, #44]	; 0x2c
   15d74:	movwne	r0, #1
   15d78:	cmn	r4, #1
   15d7c:	mov	r4, #0
   15d80:	str	r0, [sp, #16]
   15d84:	mov	r0, #0
   15d88:	movwgt	r0, #1
   15d8c:	cmn	r1, #1
   15d90:	mov	r1, #0
   15d94:	movwgt	r1, #1
   15d98:	subs	r0, r1, r0
   15d9c:	movwne	r0, #1
   15da0:	cmn	r3, #1
   15da4:	str	r0, [sp, #24]
   15da8:	mov	r0, #0
   15dac:	movwgt	r0, #1
   15db0:	subs	r8, r1, r0
   15db4:	ldr	r1, [sp, #28]
   15db8:	mov	r0, #0
   15dbc:	movwne	r8, #1
   15dc0:	cmn	sl, #1
   15dc4:	movwgt	r0, #1
   15dc8:	cmn	r1, #1
   15dcc:	mov	r1, #0
   15dd0:	movwgt	r1, #1
   15dd4:	subs	r7, r1, r0
   15dd8:	ldr	r0, [sp, #32]
   15ddc:	movwne	r7, #1
   15de0:	cmn	r0, #1
   15de4:	mov	r0, #0
   15de8:	movwgt	r0, #1
   15dec:	subs	r3, r1, r0
   15df0:	ldr	r0, [sp, #72]	; 0x48
   15df4:	ldr	r1, [sp, #36]	; 0x24
   15df8:	movwne	r3, #1
   15dfc:	cmn	r0, #1
   15e00:	mov	r0, #0
   15e04:	movwgt	r0, #1
   15e08:	cmn	r1, #1
   15e0c:	mov	r1, #0
   15e10:	movwgt	r1, #1
   15e14:	subs	r0, r1, r0
   15e18:	movwne	r0, #1
   15e1c:	cmn	r2, #1
   15e20:	ldr	r2, [sp, #48]	; 0x30
   15e24:	movwgt	r6, #1
   15e28:	subs	sl, r1, r6
   15e2c:	ldr	r1, [sp, #76]	; 0x4c
   15e30:	movwne	sl, #1
   15e34:	cmn	r1, #1
   15e38:	mov	r1, #0
   15e3c:	movwgt	r1, #1
   15e40:	cmn	r2, #1
   15e44:	ldr	r2, [sp, #56]	; 0x38
   15e48:	movwgt	r5, #1
   15e4c:	subs	r1, r5, r1
   15e50:	movwne	r1, #1
   15e54:	cmn	r2, #1
   15e58:	ldr	r2, [sp, #68]	; 0x44
   15e5c:	movwgt	r4, #1
   15e60:	subs	r5, r5, r4
   15e64:	mov	r4, #0
   15e68:	movwne	r5, #1
   15e6c:	cmn	r2, #1
   15e70:	mov	r2, #0
   15e74:	movwgt	r4, #1
   15e78:	cmn	lr, #1
   15e7c:	movwgt	r2, #1
   15e80:	subs	lr, r2, r4
   15e84:	ldr	r4, [sp, #60]	; 0x3c
   15e88:	movwne	lr, #1
   15e8c:	cmn	r4, #1
   15e90:	ldr	r4, [sp, #64]	; 0x40
   15e94:	movwgt	ip, #1
   15e98:	subs	ip, r2, ip
   15e9c:	ldr	r2, [sp, #52]	; 0x34
   15ea0:	movwne	ip, #1
   15ea4:	cmp	r4, r2
   15ea8:	bvs	16b60 <__assert_fail@plt+0x55a8>
   15eac:	ldr	r2, [sp, #20]
   15eb0:	ldr	r4, [sp, #16]
   15eb4:	ands	r2, r2, r4
   15eb8:	bne	16b60 <__assert_fail@plt+0x55a8>
   15ebc:	ldr	r2, [sp, #24]
   15ec0:	ldr	r4, [sp, #172]	; 0xac
   15ec4:	ands	r2, r2, r8
   15ec8:	bne	16b60 <__assert_fail@plt+0x55a8>
   15ecc:	ands	r2, r7, r3
   15ed0:	mov	r6, #1
   15ed4:	bne	16b74 <__assert_fail@plt+0x55bc>
   15ed8:	ldr	r3, [sp, #180]	; 0xb4
   15edc:	ldr	r2, [sp, #156]	; 0x9c
   15ee0:	ands	r0, r0, sl
   15ee4:	andseq	r0, r1, r5
   15ee8:	bne	16b74 <__assert_fail@plt+0x55bc>
   15eec:	ands	r0, lr, ip
   15ef0:	ldr	ip, [sp, #176]	; 0xb0
   15ef4:	movw	lr, #3768	; 0xeb8
   15ef8:	movt	lr, #2
   15efc:	beq	16314 <__assert_fail@plt+0x4d5c>
   15f00:	b	16b74 <__assert_fail@plt+0x55bc>
   15f04:	mov	r0, r6
   15f08:	mov	r1, r7
   15f0c:	mov	r2, #100	; 0x64
   15f10:	mov	r3, #0
   15f14:	bl	20168 <__assert_fail@plt+0xebb0>
   15f18:	umull	r2, r3, r0, r8
   15f1c:	mla	r3, r1, r8, r3
   15f20:	rsb	r1, r1, r1, lsl #4
   15f24:	subs	r2, r6, r2
   15f28:	sbc	r3, r7, r3
   15f2c:	mov	r7, #60	; 0x3c
   15f30:	umull	r0, r7, r0, r7
   15f34:	add	r1, r7, r1, lsl #2
   15f38:	adds	r0, r0, r2
   15f3c:	mov	r2, #1
   15f40:	adc	r1, r1, r3
   15f44:	b	16460 <__assert_fail@plt+0x4ea8>
   15f48:	mov	r0, r7
   15f4c:	mov	r1, r5
   15f50:	mov	r2, #100	; 0x64
   15f54:	mov	r3, #0
   15f58:	bl	20168 <__assert_fail@plt+0xebb0>
   15f5c:	umull	r2, r3, r0, r6
   15f60:	mla	r3, r1, r6, r3
   15f64:	rsb	r1, r1, r1, lsl #4
   15f68:	subs	r2, r7, r2
   15f6c:	mov	r7, #60	; 0x3c
   15f70:	umull	r0, r7, r0, r7
   15f74:	sbc	r3, r5, r3
   15f78:	add	r1, r7, r1, lsl #2
   15f7c:	adds	r0, r0, r2
   15f80:	mov	r7, #1
   15f84:	adc	r1, r1, r3
   15f88:	b	165ec <__assert_fail@plt+0x5034>
   15f8c:	mov	r1, r4
   15f90:	mov	r2, #100	; 0x64
   15f94:	mov	r3, #0
   15f98:	str	r0, [sp, #76]	; 0x4c
   15f9c:	bl	20168 <__assert_fail@plt+0xebb0>
   15fa0:	mov	lr, #100	; 0x64
   15fa4:	mov	r2, #0
   15fa8:	umull	ip, r3, r0, lr
   15fac:	mla	lr, r1, lr, r3
   15fb0:	ldr	r3, [sp, #76]	; 0x4c
   15fb4:	subs	ip, r3, ip
   15fb8:	sbc	r3, r4, lr
   15fbc:	ldr	r4, [sp, #144]	; 0x90
   15fc0:	strd	r0, [r4]
   15fc4:	ldr	r0, [sp, #140]	; 0x8c
   15fc8:	str	ip, [r0]
   15fcc:	str	r3, [r0, #4]
   15fd0:	mov	r0, #2
   15fd4:	str	r2, [r9, #88]	; 0x58
   15fd8:	str	r2, [r9, #92]	; 0x5c
   15fdc:	ldr	r3, [sp, #180]	; 0xb4
   15fe0:	str	r0, [r9, #28]
   15fe4:	ldr	r0, [r3, #4]
   15fe8:	ldr	r1, [r3]
   15fec:	ldr	r3, [r6, #8]
   15ff0:	ldr	r2, [r8, #4]
   15ff4:	ldm	sl, {r4, lr}
   15ff8:	ldm	r5, {sl, ip}
   15ffc:	ldr	r8, [r8]
   16000:	ldr	r5, [r6]
   16004:	str	lr, [sp, #56]	; 0x38
   16008:	str	ip, [sp, #44]	; 0x2c
   1600c:	str	r0, [sp, #76]	; 0x4c
   16010:	ldr	r0, [r7, #4]
   16014:	str	r1, [sp, #32]
   16018:	ldr	r1, [r7]
   1601c:	str	r2, [sp, #36]	; 0x24
   16020:	str	r0, [sp, #72]	; 0x48
   16024:	ldr	r0, [r9, #144]	; 0x90
   16028:	str	r1, [sp, #60]	; 0x3c
   1602c:	ldr	r1, [r6, #4]
   16030:	str	r0, [sp, #68]	; 0x44
   16034:	add	r0, r0, r3
   16038:	str	r1, [sp, #28]
   1603c:	str	r0, [sp, #64]	; 0x40
   16040:	str	r0, [r9, #144]	; 0x90
   16044:	ldr	r0, [sp, #104]	; 0x68
   16048:	ldrd	r6, [r0]
   1604c:	adds	r6, r6, r5
   16050:	adc	r3, r7, r1
   16054:	str	r6, [r0]
   16058:	str	r3, [r0, #4]
   1605c:	ldr	r0, [sp, #108]	; 0x6c
   16060:	ldr	r6, [r0]
   16064:	ldr	r5, [r0, #4]
   16068:	adds	r8, r6, r8
   1606c:	adc	r6, r5, r2
   16070:	str	r8, [r0]
   16074:	str	r6, [r0, #4]
   16078:	ldr	r1, [sp, #112]	; 0x70
   1607c:	ldm	r1, {r0, r8}
   16080:	adds	r0, r0, sl
   16084:	adc	sl, r8, ip
   16088:	stm	r1, {r0, sl}
   1608c:	mov	ip, #0
   16090:	ldr	r1, [sp, #116]	; 0x74
   16094:	ldm	r1, {r0, r2}
   16098:	str	r2, [sp, #40]	; 0x28
   1609c:	adds	r4, r0, r4
   160a0:	adc	r0, r2, lr
   160a4:	str	r0, [sp, #48]	; 0x30
   160a8:	str	r4, [r1]
   160ac:	str	r0, [r1, #4]
   160b0:	ldr	r0, [sp, #120]	; 0x78
   160b4:	ldr	r2, [sp, #60]	; 0x3c
   160b8:	ldr	r4, [r0]
   160bc:	ldr	r1, [r0, #4]
   160c0:	adds	r4, r4, r2
   160c4:	ldr	r2, [sp, #72]	; 0x48
   160c8:	str	r1, [sp, #52]	; 0x34
   160cc:	str	r4, [r0]
   160d0:	adc	r2, r1, r2
   160d4:	str	r2, [r0, #4]
   160d8:	ldr	lr, [sp, #124]	; 0x7c
   160dc:	ldr	r0, [sp, #32]
   160e0:	ldr	r4, [lr]
   160e4:	ldr	r1, [lr, #4]
   160e8:	adds	r4, r4, r0
   160ec:	ldr	r0, [sp, #76]	; 0x4c
   160f0:	str	r1, [sp, #60]	; 0x3c
   160f4:	str	r4, [lr]
   160f8:	adc	r0, r1, r0
   160fc:	cmn	r7, #1
   16100:	mov	r1, #0
   16104:	str	r0, [lr, #4]
   16108:	mov	r4, r0
   1610c:	mov	r0, #0
   16110:	movwgt	r0, #1
   16114:	cmn	r3, #1
   16118:	mov	r3, #0
   1611c:	mov	lr, #0
   16120:	movwgt	r1, #1
   16124:	str	r0, [sp, #32]
   16128:	subs	r0, r0, r1
   1612c:	mov	r1, #0
   16130:	movwne	r0, #1
   16134:	str	r0, [sp, #24]
   16138:	ldr	r0, [sp, #28]
   1613c:	cmn	r0, #1
   16140:	mov	r0, #0
   16144:	movwgt	r0, #1
   16148:	cmn	r5, #1
   1614c:	mov	r5, #0
   16150:	str	r0, [sp, #28]
   16154:	mov	r0, #0
   16158:	movwgt	r0, #1
   1615c:	cmn	r6, #1
   16160:	mov	r6, #0
   16164:	movwgt	r1, #1
   16168:	str	r0, [sp, #20]
   1616c:	subs	r0, r0, r1
   16170:	mov	r1, #0
   16174:	movwne	r0, #1
   16178:	str	r0, [sp, #16]
   1617c:	ldr	r0, [sp, #36]	; 0x24
   16180:	cmn	r0, #1
   16184:	mov	r0, #0
   16188:	movwgt	r0, #1
   1618c:	cmn	r8, #1
   16190:	mov	r8, #0
   16194:	movwgt	r8, #1
   16198:	cmn	sl, #1
   1619c:	str	r0, [sp, #36]	; 0x24
   161a0:	movwgt	r1, #1
   161a4:	subs	r0, r8, r1
   161a8:	ldr	r1, [sp, #72]	; 0x48
   161ac:	movwne	r0, #1
   161b0:	str	r0, [sp, #12]
   161b4:	ldr	r0, [sp, #44]	; 0x2c
   161b8:	cmn	r0, #1
   161bc:	ldr	r0, [sp, #40]	; 0x28
   161c0:	movwgt	r5, #1
   161c4:	cmn	r0, #1
   161c8:	ldr	r0, [sp, #48]	; 0x30
   161cc:	movwgt	r3, #1
   161d0:	cmn	r0, #1
   161d4:	mov	r0, #0
   161d8:	movwgt	r0, #1
   161dc:	subs	r0, r3, r0
   161e0:	movwne	r0, #1
   161e4:	str	r0, [sp, #48]	; 0x30
   161e8:	ldr	r0, [sp, #56]	; 0x38
   161ec:	cmn	r0, #1
   161f0:	ldr	r0, [sp, #52]	; 0x34
   161f4:	movwgt	lr, #1
   161f8:	cmn	r0, #1
   161fc:	mov	r0, #0
   16200:	movwgt	r0, #1
   16204:	cmn	r2, #1
   16208:	mov	r2, #0
   1620c:	movwgt	r2, #1
   16210:	subs	r7, r0, r2
   16214:	mov	r2, #0
   16218:	movwne	r7, #1
   1621c:	cmn	r1, #1
   16220:	ldr	r1, [sp, #60]	; 0x3c
   16224:	movwgt	r2, #1
   16228:	cmn	r1, #1
   1622c:	movwgt	r6, #1
   16230:	cmn	r4, #1
   16234:	mov	r4, #0
   16238:	movwgt	r4, #1
   1623c:	subs	sl, r6, r4
   16240:	ldr	r4, [sp, #76]	; 0x4c
   16244:	movwne	sl, #1
   16248:	cmn	r4, #1
   1624c:	ldr	r4, [sp, #68]	; 0x44
   16250:	movwgt	ip, #1
   16254:	str	ip, [sp, #76]	; 0x4c
   16258:	ldr	ip, [sp, #64]	; 0x40
   1625c:	cmp	ip, r4
   16260:	bvs	16b60 <__assert_fail@plt+0x55a8>
   16264:	ldr	r4, [sp, #32]
   16268:	ldr	r1, [sp, #28]
   1626c:	sub	r4, r4, r1
   16270:	ldr	r1, [sp, #24]
   16274:	clz	r4, r4
   16278:	lsr	r4, r4, #5
   1627c:	ands	r4, r4, r1
   16280:	ldreq	r1, [sp, #20]
   16284:	ldreq	r4, [sp, #36]	; 0x24
   16288:	subeq	r4, r1, r4
   1628c:	ldreq	r1, [sp, #16]
   16290:	clzeq	r4, r4
   16294:	lsreq	r4, r4, #5
   16298:	andseq	r4, r4, r1
   1629c:	bne	16b60 <__assert_fail@plt+0x55a8>
   162a0:	ldr	r1, [sp, #12]
   162a4:	sub	r5, r8, r5
   162a8:	ldr	r4, [sp, #172]	; 0xac
   162ac:	clz	r5, r5
   162b0:	lsr	r5, r5, #5
   162b4:	ands	r5, r5, r1
   162b8:	ldreq	r1, [sp, #48]	; 0x30
   162bc:	subeq	r3, r3, lr
   162c0:	clzeq	r3, r3
   162c4:	lsreq	r3, r3, #5
   162c8:	andseq	r1, r3, r1
   162cc:	bne	16b60 <__assert_fail@plt+0x55a8>
   162d0:	sub	r0, r0, r2
   162d4:	clz	r0, r0
   162d8:	lsr	r0, r0, #5
   162dc:	ands	r0, r0, r7
   162e0:	bne	16b60 <__assert_fail@plt+0x55a8>
   162e4:	ldr	r0, [sp, #76]	; 0x4c
   162e8:	sub	r0, r6, r0
   162ec:	ldr	ip, [sp, #176]	; 0xb0
   162f0:	ldr	r3, [sp, #180]	; 0xb4
   162f4:	ldr	r2, [sp, #156]	; 0x9c
   162f8:	clz	r0, r0
   162fc:	movw	lr, #3768	; 0xeb8
   16300:	mov	r6, #1
   16304:	lsr	r0, r0, #5
   16308:	movt	lr, #2
   1630c:	ands	r0, r0, sl
   16310:	bne	16b74 <__assert_fail@plt+0x55bc>
   16314:	mov	r0, #1
   16318:	strb	r0, [r9, #153]	; 0x99
   1631c:	b	166a8 <__assert_fail@plt+0x50f0>
   16320:	mov	r0, r7
   16324:	mov	r1, sl
   16328:	mov	r2, #100	; 0x64
   1632c:	mov	r3, #0
   16330:	mov	r6, #100	; 0x64
   16334:	bl	20168 <__assert_fail@plt+0xebb0>
   16338:	umull	r2, r3, r0, r6
   1633c:	ldr	ip, [sp, #176]	; 0xb0
   16340:	movw	lr, #3768	; 0xeb8
   16344:	movt	lr, #2
   16348:	mla	r3, r1, r6, r3
   1634c:	subs	r2, r7, r2
   16350:	sbc	r3, sl, r3
   16354:	ldr	r7, [sp, #144]	; 0x90
   16358:	strd	r0, [r7]
   1635c:	ldr	r0, [sp, #140]	; 0x8c
   16360:	strd	r2, [r0]
   16364:	mov	r2, r4
   16368:	mov	r0, #2
   1636c:	str	r8, [r9, #88]	; 0x58
   16370:	str	r8, [r9, #92]	; 0x5c
   16374:	mov	r3, r5
   16378:	ldr	r4, [sp, #172]	; 0xac
   1637c:	str	r0, [r9, #28]
   16380:	b	166a8 <__assert_fail@plt+0x50f0>
   16384:	and	r0, r6, r7
   16388:	cmn	r0, #1
   1638c:	beq	163b8 <__assert_fail@plt+0x4e00>
   16390:	mov	r0, #0
   16394:	mov	r1, #-2147483648	; 0x80000000
   16398:	mov	r2, r6
   1639c:	mov	r3, r7
   163a0:	bl	20168 <__assert_fail@plt+0xebb0>
   163a4:	subs	r0, r0, #60	; 0x3c
   163a8:	mov	sl, #1
   163ac:	sbcs	r0, r1, #0
   163b0:	movge	sl, #0
   163b4:	b	163bc <__assert_fail@plt+0x4e04>
   163b8:	mov	sl, #0
   163bc:	mov	r0, #60	; 0x3c
   163c0:	cmn	r5, #1
   163c4:	mov	r4, #0
   163c8:	mov	r2, #0
   163cc:	mov	lr, r8
   163d0:	mov	r3, #0
   163d4:	umull	ip, r1, r6, r0
   163d8:	rsb	r6, r7, r7, lsl #4
   163dc:	movwgt	r4, #1
   163e0:	add	r6, r1, r6, lsl #2
   163e4:	cmn	r6, #1
   163e8:	movwgt	r2, #1
   163ec:	subs	r7, r2, r4
   163f0:	movwne	r7, #1
   163f4:	subs	r0, ip, r8
   163f8:	mov	r8, #0
   163fc:	sbc	r1, r6, r5
   16400:	str	r0, [sp, #72]	; 0x48
   16404:	cmn	r1, #1
   16408:	movwgt	r8, #1
   1640c:	subs	r0, r2, r8
   16410:	movwne	r0, #1
   16414:	and	r7, r7, r0
   16418:	adds	r0, ip, lr
   1641c:	adc	r6, r6, r5
   16420:	ldr	r5, [sp, #76]	; 0x4c
   16424:	cmn	r6, #1
   16428:	movwgt	r3, #1
   1642c:	subs	r3, r2, r3
   16430:	sub	r2, r2, r4
   16434:	ldr	r4, [sp, #172]	; 0xac
   16438:	clz	r2, r2
   1643c:	movwne	r3, #1
   16440:	ands	r5, r5, #1
   16444:	lsr	r2, r2, #5
   16448:	moveq	r1, r6
   1644c:	andeq	r7, r2, r3
   16450:	ldr	r3, [sp, #72]	; 0x48
   16454:	orr	r2, sl, r7
   16458:	eor	r2, r2, #1
   1645c:	movne	r0, r3
   16460:	adds	r3, r0, #1440	; 0x5a0
   16464:	mov	r6, #1
   16468:	adc	r1, r1, #0
   1646c:	cmp	r2, #0
   16470:	beq	16b74 <__assert_fail@plt+0x55bc>
   16474:	rsbs	r2, r3, #2880	; 0xb40
   16478:	rscs	r1, r1, #0
   1647c:	bcc	16b74 <__assert_fail@plt+0x55bc>
   16480:	rsb	r0, r0, r0, lsl #4
   16484:	mov	r8, r4
   16488:	mov	r3, #0
   1648c:	mov	r2, #0
   16490:	lsl	r1, r0, #2
   16494:	str	r1, [r9, #24]
   16498:	sbfx	r1, r0, #29, #1
   1649c:	ldr	r7, [sp, #180]	; 0xb4
   164a0:	cmn	r1, #1
   164a4:	movwgt	r3, #1
   164a8:	ldrd	r4, [r7, #-112]	; 0xffffff90
   164ac:	mov	r7, #0
   164b0:	adds	r0, r4, r0, lsl #2
   164b4:	adc	r1, r1, r5
   164b8:	cmn	r1, #1
   164bc:	str	r0, [r9, #24]
   164c0:	movwgt	r7, #1
   164c4:	subs	r7, r3, r7
   164c8:	movwne	r7, #1
   164cc:	cmn	r5, #1
   164d0:	movwgt	r2, #1
   164d4:	sub	r2, r3, r2
   164d8:	clz	r2, r2
   164dc:	lsr	r2, r2, #5
   164e0:	tst	r2, r7
   164e4:	bne	16b74 <__assert_fail@plt+0x55bc>
   164e8:	asr	r2, r0, #31
   164ec:	ldr	ip, [sp, #176]	; 0xb0
   164f0:	ldr	r3, [sp, #180]	; 0xb4
   164f4:	movw	lr, #3768	; 0xeb8
   164f8:	eor	r0, r0, r0
   164fc:	mov	r4, r8
   16500:	eor	r1, r1, r2
   16504:	ldr	r2, [sp, #156]	; 0x9c
   16508:	movt	lr, #2
   1650c:	orrs	r0, r0, r1
   16510:	beq	166a8 <__assert_fail@plt+0x50f0>
   16514:	b	16b74 <__assert_fail@plt+0x55bc>
   16518:	and	r0, r7, r5
   1651c:	cmn	r0, #1
   16520:	beq	1654c <__assert_fail@plt+0x4f94>
   16524:	mov	r0, #0
   16528:	mov	r1, #-2147483648	; 0x80000000
   1652c:	mov	r2, r7
   16530:	mov	r3, r5
   16534:	bl	20168 <__assert_fail@plt+0xebb0>
   16538:	subs	r0, r0, #60	; 0x3c
   1653c:	mov	r2, #1
   16540:	sbcs	r0, r1, #0
   16544:	movge	r2, #0
   16548:	b	16550 <__assert_fail@plt+0x4f98>
   1654c:	mov	r2, #0
   16550:	mov	r0, #60	; 0x3c
   16554:	str	r2, [sp, #72]	; 0x48
   16558:	rsb	r2, r5, r5, lsl #4
   1655c:	cmn	sl, #1
   16560:	mov	r6, #0
   16564:	mov	ip, #0
   16568:	mov	r3, #0
   1656c:	umull	lr, r1, r7, r0
   16570:	movwgt	r6, #1
   16574:	mov	r7, #0
   16578:	add	r2, r1, r2, lsl #2
   1657c:	cmn	r2, #1
   16580:	movwgt	r7, #1
   16584:	subs	r0, r7, r6
   16588:	movwne	r0, #1
   1658c:	subs	r8, lr, r4
   16590:	sbc	r1, r2, sl
   16594:	cmn	r1, #1
   16598:	movwgt	ip, #1
   1659c:	subs	r5, r7, ip
   165a0:	movwne	r5, #1
   165a4:	and	r5, r0, r5
   165a8:	adds	r0, lr, r4
   165ac:	adc	r2, r2, sl
   165b0:	cmn	r2, #1
   165b4:	movwgt	r3, #1
   165b8:	subs	r3, r7, r3
   165bc:	sub	r7, r7, r6
   165c0:	ldr	r6, [sp, #76]	; 0x4c
   165c4:	clz	r7, r7
   165c8:	movwne	r3, #1
   165cc:	lsr	r7, r7, #5
   165d0:	ands	r6, r6, #1
   165d4:	andeq	r5, r7, r3
   165d8:	ldr	r3, [sp, #72]	; 0x48
   165dc:	moveq	r1, r2
   165e0:	movne	r0, r8
   165e4:	orr	r3, r3, r5
   165e8:	eor	r7, r3, #1
   165ec:	ldr	ip, [sp, #176]	; 0xb0
   165f0:	movw	lr, #3768	; 0xeb8
   165f4:	adds	r3, r0, #1440	; 0x5a0
   165f8:	mov	r6, #1
   165fc:	movt	lr, #2
   16600:	adc	r1, r1, #0
   16604:	cmp	r7, #0
   16608:	beq	16b74 <__assert_fail@plt+0x55bc>
   1660c:	rsbs	r2, r3, #2880	; 0xb40
   16610:	ldr	r3, [sp, #180]	; 0xb4
   16614:	ldr	r2, [sp, #156]	; 0x9c
   16618:	ldr	r4, [sp, #172]	; 0xac
   1661c:	rscs	r1, r1, #0
   16620:	bcc	16b74 <__assert_fail@plt+0x55bc>
   16624:	rsb	r0, r0, r0, lsl #4
   16628:	lsl	r0, r0, #2
   1662c:	str	r0, [r9, #24]
   16630:	b	166a8 <__assert_fail@plt+0x50f0>
   16634:	mvn	r8, #0
   16638:	mvn	r5, #0
   1663c:	umull	r1, r0, r8, r6
   16640:	mla	r0, r8, r7, r0
   16644:	mla	r0, r5, r6, r0
   16648:	str	r1, [sp, #232]	; 0xe8
   1664c:	str	r0, [sp, #224]	; 0xe0
   16650:	mov	r0, #0
   16654:	str	r0, [sp, #236]	; 0xec
   16658:	mov	r0, #0
   1665c:	str	r0, [sp, #228]	; 0xe4
   16660:	mov	r0, #0
   16664:	str	r0, [sp, #220]	; 0xdc
   16668:	mov	r0, #0
   1666c:	str	r0, [sp, #216]	; 0xd8
   16670:	mov	r0, #0
   16674:	str	r0, [sp, #212]	; 0xd4
   16678:	mov	r0, #0
   1667c:	str	r0, [sp, #204]	; 0xcc
   16680:	mov	r0, #0
   16684:	str	r0, [sp, #208]	; 0xd0
   16688:	mov	r0, #0
   1668c:	str	r0, [sp, #200]	; 0xc8
   16690:	mov	r0, #0
   16694:	str	r0, [sp, #196]	; 0xc4
   16698:	mov	r0, #0
   1669c:	str	r0, [sp, #244]	; 0xf4
   166a0:	mov	r0, #0
   166a4:	str	r0, [sp, #240]	; 0xf0
   166a8:	sub	r0, r4, r4, lsl #3
   166ac:	ldr	r7, [sp, #192]	; 0xc0
   166b0:	add	r3, r3, r0, lsl #3
   166b4:	ldr	r0, [sp, #244]	; 0xf4
   166b8:	sub	r7, r7, r4
   166bc:	sub	r4, fp, #112	; 0x70
   166c0:	str	r0, [r3, #56]!	; 0x38
   166c4:	ldr	r0, [sp, #240]	; 0xf0
   166c8:	str	r0, [r3, #4]
   166cc:	ldr	r0, [sp, #236]	; 0xec
   166d0:	str	r0, [r3, #8]
   166d4:	ldr	r0, [sp, #228]	; 0xe4
   166d8:	str	r0, [r3, #12]
   166dc:	ldr	r0, [sp, #232]	; 0xe8
   166e0:	str	r0, [r3, #16]
   166e4:	ldr	r0, [sp, #224]	; 0xe0
   166e8:	str	r0, [r3, #20]
   166ec:	ldr	r0, [sp, #220]	; 0xdc
   166f0:	str	r0, [r3, #24]
   166f4:	ldr	r0, [sp, #216]	; 0xd8
   166f8:	str	r0, [r3, #28]
   166fc:	ldr	r0, [sp, #212]	; 0xd4
   16700:	str	r0, [r3, #32]
   16704:	ldr	r0, [sp, #204]	; 0xcc
   16708:	str	r0, [r3, #36]	; 0x24
   1670c:	ldr	r0, [sp, #208]	; 0xd0
   16710:	str	r0, [r3, #40]	; 0x28
   16714:	ldr	r0, [sp, #200]	; 0xc8
   16718:	str	r0, [r3, #44]	; 0x2c
   1671c:	ldr	r0, [sp, #196]	; 0xc4
   16720:	str	r0, [r3, #48]	; 0x30
   16724:	ldr	r0, [sp, #188]	; 0xbc
   16728:	str	r0, [r3, #52]	; 0x34
   1672c:	add	r0, r4, r7, lsl #1
   16730:	ldrsh	r1, [r0]
   16734:	movw	r0, #4592	; 0x11f0
   16738:	movt	r0, #2
   1673c:	ldrb	r0, [r0, r2]
   16740:	movw	r2, #4684	; 0x124c
   16744:	movt	r2, #2
   16748:	sub	r0, r0, #28
   1674c:	add	r2, r2, r0
   16750:	ldrsb	r2, [r2]
   16754:	add	r2, r1, r2
   16758:	cmp	r2, #112	; 0x70
   1675c:	bhi	12afc <__assert_fail@plt+0x1544>
   16760:	mov	r5, r3
   16764:	movw	r3, #4160	; 0x1040
   16768:	movt	r3, #2
   1676c:	add	r3, r3, r2
   16770:	ldrsb	r3, [r3]
   16774:	cmp	r3, r1
   16778:	mov	r3, r5
   1677c:	bne	12afc <__assert_fail@plt+0x1544>
   16780:	movw	r0, #4273	; 0x10b1
   16784:	movt	r0, #2
   16788:	ldrb	r8, [r0, r2]
   1678c:	b	12b0c <__assert_fail@plt+0x1554>
   16790:	mov	r0, #1
   16794:	strb	r0, [r9, #180]	; 0xb4
   16798:	ldr	r0, [sp, #100]	; 0x64
   1679c:	vst1.64	{d16-d17}, [r0]
   167a0:	ldr	r0, [sp, #92]	; 0x5c
   167a4:	str	lr, [r0]
   167a8:	str	ip, [r0, #4]
   167ac:	b	15fe4 <__assert_fail@plt+0x4a2c>
   167b0:	mov	r0, #1
   167b4:	strb	r0, [r9, #180]	; 0xb4
   167b8:	ldr	r0, [sp, #100]	; 0x64
   167bc:	vst1.64	{d16-d17}, [r0]
   167c0:	ldr	r0, [sp, #92]	; 0x5c
   167c4:	strd	r6, [r0]
   167c8:	b	166a8 <__assert_fail@plt+0x50f0>
   167cc:	ldr	r0, [sp, #244]	; 0xf4
   167d0:	b	140bc <__assert_fail@plt+0x2b04>
   167d4:	ldr	r0, [sp, #240]	; 0xf0
   167d8:	b	140bc <__assert_fail@plt+0x2b04>
   167dc:	ldr	r0, [sp, #236]	; 0xec
   167e0:	b	140bc <__assert_fail@plt+0x2b04>
   167e4:	ldr	r0, [sp, #232]	; 0xe8
   167e8:	b	140bc <__assert_fail@plt+0x2b04>
   167ec:	ldr	r0, [sp, #228]	; 0xe4
   167f0:	b	140bc <__assert_fail@plt+0x2b04>
   167f4:	ldr	r0, [sp, #224]	; 0xe0
   167f8:	b	140bc <__assert_fail@plt+0x2b04>
   167fc:	ldr	r0, [sp, #220]	; 0xdc
   16800:	b	140bc <__assert_fail@plt+0x2b04>
   16804:	ldr	r0, [sp, #216]	; 0xd8
   16808:	b	140bc <__assert_fail@plt+0x2b04>
   1680c:	ldr	r0, [sp, #212]	; 0xd4
   16810:	b	140bc <__assert_fail@plt+0x2b04>
   16814:	movw	r0, #5424	; 0x1530
   16818:	movt	r0, #2
   1681c:	b	13bc4 <__assert_fail@plt+0x260c>
   16820:	movw	r0, #5424	; 0x1530
   16824:	movt	r0, #2
   16828:	add	r0, r0, #24
   1682c:	b	140bc <__assert_fail@plt+0x2b04>
   16830:	movw	r0, #5424	; 0x1530
   16834:	movt	r0, #2
   16838:	add	r0, r0, #36	; 0x24
   1683c:	b	140bc <__assert_fail@plt+0x2b04>
   16840:	movw	r0, #5424	; 0x1530
   16844:	movt	r0, #2
   16848:	add	r0, r0, #48	; 0x30
   1684c:	b	140bc <__assert_fail@plt+0x2b04>
   16850:	movw	r0, #5424	; 0x1530
   16854:	movt	r0, #2
   16858:	add	r0, r0, #60	; 0x3c
   1685c:	b	140bc <__assert_fail@plt+0x2b04>
   16860:	movw	r0, #5424	; 0x1530
   16864:	movt	r0, #2
   16868:	add	r0, r0, #72	; 0x48
   1686c:	b	140bc <__assert_fail@plt+0x2b04>
   16870:	movw	r0, #5424	; 0x1530
   16874:	movt	r0, #2
   16878:	add	r0, r0, #84	; 0x54
   1687c:	b	140bc <__assert_fail@plt+0x2b04>
   16880:	movw	r0, #5424	; 0x1530
   16884:	movt	r0, #2
   16888:	add	r0, r0, #96	; 0x60
   1688c:	b	140bc <__assert_fail@plt+0x2b04>
   16890:	movw	r0, #5424	; 0x1530
   16894:	movt	r0, #2
   16898:	add	r0, r0, #108	; 0x6c
   1689c:	b	140bc <__assert_fail@plt+0x2b04>
   168a0:	movw	r0, #5424	; 0x1530
   168a4:	movt	r0, #2
   168a8:	add	r0, r0, #120	; 0x78
   168ac:	b	140bc <__assert_fail@plt+0x2b04>
   168b0:	movw	r0, #5424	; 0x1530
   168b4:	movt	r0, #2
   168b8:	add	r0, r0, #132	; 0x84
   168bc:	b	140bc <__assert_fail@plt+0x2b04>
   168c0:	movw	r0, #5424	; 0x1530
   168c4:	movt	r0, #2
   168c8:	add	r0, r0, #144	; 0x90
   168cc:	b	140bc <__assert_fail@plt+0x2b04>
   168d0:	movw	r0, #5424	; 0x1530
   168d4:	movt	r0, #2
   168d8:	add	r0, r0, #156	; 0x9c
   168dc:	b	140bc <__assert_fail@plt+0x2b04>
   168e0:	movw	r0, #5424	; 0x1530
   168e4:	movt	r0, #2
   168e8:	add	r0, r0, #168	; 0xa8
   168ec:	b	140bc <__assert_fail@plt+0x2b04>
   168f0:	movw	r0, #5424	; 0x1530
   168f4:	movt	r0, #2
   168f8:	add	r0, r0, #180	; 0xb4
   168fc:	b	140bc <__assert_fail@plt+0x2b04>
   16900:	movw	r0, #5424	; 0x1530
   16904:	movt	r0, #2
   16908:	add	r0, r0, #192	; 0xc0
   1690c:	b	140bc <__assert_fail@plt+0x2b04>
   16910:	movw	r0, #5424	; 0x1530
   16914:	movt	r0, #2
   16918:	add	r0, r0, #204	; 0xcc
   1691c:	b	140bc <__assert_fail@plt+0x2b04>
   16920:	movw	r0, #5424	; 0x1530
   16924:	movt	r0, #2
   16928:	add	r0, r0, #216	; 0xd8
   1692c:	b	140bc <__assert_fail@plt+0x2b04>
   16930:	movw	r0, #5424	; 0x1530
   16934:	movt	r0, #2
   16938:	add	r0, r0, #228	; 0xe4
   1693c:	b	140bc <__assert_fail@plt+0x2b04>
   16940:	cmp	r1, #0
   16944:	sub	r4, fp, #72	; 0x48
   16948:	beq	169c4 <__assert_fail@plt+0x540c>
   1694c:	ldrb	r2, [fp, #-71]	; 0xffffffb9
   16950:	cmp	r1, #46	; 0x2e
   16954:	sub	r1, r1, #46	; 0x2e
   16958:	ldr	r0, [sp, #84]	; 0x54
   1695c:	clz	r1, r1
   16960:	moveq	r0, r4
   16964:	lsr	r1, r1, #5
   16968:	cmp	r2, #0
   1696c:	strb	r2, [r0]
   16970:	beq	169a4 <__assert_fail@plt+0x53ec>
   16974:	ldr	r2, [sp, #84]	; 0x54
   16978:	ldrb	r3, [r2]
   1697c:	ldrb	r6, [r2, #1]!
   16980:	cmp	r3, #46	; 0x2e
   16984:	sub	r3, r3, #46	; 0x2e
   16988:	clz	r3, r3
   1698c:	addne	r0, r0, #1
   16990:	cmp	r6, #0
   16994:	lsr	r3, r3, #5
   16998:	strb	r6, [r0]
   1699c:	orr	r1, r1, r3
   169a0:	bne	16978 <__assert_fail@plt+0x53c0>
   169a4:	tst	r1, #1
   169a8:	sub	r4, fp, #72	; 0x48
   169ac:	beq	169c4 <__assert_fail@plt+0x540c>
   169b0:	mov	r1, r4
   169b4:	mov	r0, r9
   169b8:	bl	1a7a0 <__assert_fail@plt+0x91e8>
   169bc:	cmp	r0, #0
   169c0:	bne	140bc <__assert_fail@plt+0x2b04>
   169c4:	ldrb	r0, [r9, #181]	; 0xb5
   169c8:	mov	r6, #63	; 0x3f
   169cc:	cmp	r0, #0
   169d0:	beq	140dc <__assert_fail@plt+0x2b24>
   169d4:	movw	r1, #7067	; 0x1b9b
   169d8:	mov	r0, #0
   169dc:	mov	r2, #5
   169e0:	movt	r1, #2
   169e4:	bl	11318 <dcgettext@plt>
   169e8:	sub	r4, fp, #72	; 0x48
   169ec:	mov	r1, r4
   169f0:	bl	172b8 <__assert_fail@plt+0x5d00>
   169f4:	b	140dc <__assert_fail@plt+0x2b24>
   169f8:	movw	r0, #5676	; 0x162c
   169fc:	movt	r0, #2
   16a00:	add	r0, r0, #24
   16a04:	b	140bc <__assert_fail@plt+0x2b04>
   16a08:	movw	r0, #5676	; 0x162c
   16a0c:	movt	r0, #2
   16a10:	add	r0, r0, #36	; 0x24
   16a14:	b	140bc <__assert_fail@plt+0x2b04>
   16a18:	movw	r0, #5676	; 0x162c
   16a1c:	movt	r0, #2
   16a20:	add	r0, r0, #48	; 0x30
   16a24:	b	140bc <__assert_fail@plt+0x2b04>
   16a28:	movw	r0, #5676	; 0x162c
   16a2c:	movt	r0, #2
   16a30:	add	r0, r0, #60	; 0x3c
   16a34:	b	140bc <__assert_fail@plt+0x2b04>
   16a38:	movw	r0, #5676	; 0x162c
   16a3c:	movt	r0, #2
   16a40:	add	r0, r0, #72	; 0x48
   16a44:	b	140bc <__assert_fail@plt+0x2b04>
   16a48:	movw	r0, #5676	; 0x162c
   16a4c:	movt	r0, #2
   16a50:	add	r0, r0, #84	; 0x54
   16a54:	b	140bc <__assert_fail@plt+0x2b04>
   16a58:	movw	r0, #5676	; 0x162c
   16a5c:	movt	r0, #2
   16a60:	add	r0, r0, #96	; 0x60
   16a64:	b	140bc <__assert_fail@plt+0x2b04>
   16a68:	movw	r0, #5676	; 0x162c
   16a6c:	movt	r0, #2
   16a70:	add	r0, r0, #108	; 0x6c
   16a74:	b	140bc <__assert_fail@plt+0x2b04>
   16a78:	movw	r0, #5676	; 0x162c
   16a7c:	movt	r0, #2
   16a80:	add	r0, r0, #120	; 0x78
   16a84:	b	140bc <__assert_fail@plt+0x2b04>
   16a88:	movw	r0, #5676	; 0x162c
   16a8c:	movt	r0, #2
   16a90:	add	r0, r0, #132	; 0x84
   16a94:	b	140bc <__assert_fail@plt+0x2b04>
   16a98:	movw	r0, #5676	; 0x162c
   16a9c:	movt	r0, #2
   16aa0:	add	r0, r0, #144	; 0x90
   16aa4:	b	140bc <__assert_fail@plt+0x2b04>
   16aa8:	movw	r0, #5676	; 0x162c
   16aac:	movt	r0, #2
   16ab0:	add	r0, r0, #156	; 0x9c
   16ab4:	b	140bc <__assert_fail@plt+0x2b04>
   16ab8:	movw	r0, #5676	; 0x162c
   16abc:	movt	r0, #2
   16ac0:	add	r0, r0, #168	; 0xa8
   16ac4:	b	140bc <__assert_fail@plt+0x2b04>
   16ac8:	movw	r0, #5676	; 0x162c
   16acc:	movt	r0, #2
   16ad0:	add	r0, r0, #180	; 0xb4
   16ad4:	b	140bc <__assert_fail@plt+0x2b04>
   16ad8:	movw	r0, #5676	; 0x162c
   16adc:	movt	r0, #2
   16ae0:	add	r0, r0, #192	; 0xc0
   16ae4:	b	140bc <__assert_fail@plt+0x2b04>
   16ae8:	movw	r0, #5676	; 0x162c
   16aec:	movt	r0, #2
   16af0:	add	r0, r0, #204	; 0xcc
   16af4:	b	140bc <__assert_fail@plt+0x2b04>
   16af8:	movw	r0, #5676	; 0x162c
   16afc:	movt	r0, #2
   16b00:	add	r0, r0, #216	; 0xd8
   16b04:	b	140bc <__assert_fail@plt+0x2b04>
   16b08:	movw	r0, #5676	; 0x162c
   16b0c:	movt	r0, #2
   16b10:	add	r0, r0, #228	; 0xe4
   16b14:	b	140bc <__assert_fail@plt+0x2b04>
   16b18:	movw	r0, #5676	; 0x162c
   16b1c:	movt	r0, #2
   16b20:	add	r0, r0, #240	; 0xf0
   16b24:	b	140bc <__assert_fail@plt+0x2b04>
   16b28:	movw	r0, #5676	; 0x162c
   16b2c:	movt	r0, #2
   16b30:	add	r0, r0, #252	; 0xfc
   16b34:	b	140bc <__assert_fail@plt+0x2b04>
   16b38:	movw	r0, #5676	; 0x162c
   16b3c:	movt	r0, #2
   16b40:	b	140b8 <__assert_fail@plt+0x2b00>
   16b44:	movw	r0, #5676	; 0x162c
   16b48:	movt	r0, #2
   16b4c:	b	13eb4 <__assert_fail@plt+0x28fc>
   16b50:	movw	r0, #5676	; 0x162c
   16b54:	movt	r0, #2
   16b58:	add	r0, r0, #288	; 0x120
   16b5c:	b	140bc <__assert_fail@plt+0x2b04>
   16b60:	mov	r6, #1
   16b64:	b	16b74 <__assert_fail@plt+0x55bc>
   16b68:	mov	r6, #0
   16b6c:	b	16b74 <__assert_fail@plt+0x55bc>
   16b70:	mov	r6, #2
   16b74:	mov	r0, r6
   16b78:	sub	sp, fp, #48	; 0x30
   16b7c:	vpop	{d8-d9}
   16b80:	add	sp, sp, #4
   16b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b8c:	add	fp, sp, #28
   16b90:	sub	sp, sp, #132	; 0x84
   16b94:	mov	r5, r0
   16b98:	ldrb	r0, [r1, #181]	; 0xb5
   16b9c:	cmp	r0, #0
   16ba0:	bne	16bac <__assert_fail@plt+0x55f4>
   16ba4:	sub	sp, fp, #28
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bac:	mov	r4, r1
   16bb0:	add	r6, r1, #40	; 0x28
   16bb4:	movw	r1, #6805	; 0x1a95
   16bb8:	mov	r0, #0
   16bbc:	mov	r2, #5
   16bc0:	mov	r7, #0
   16bc4:	movt	r1, #2
   16bc8:	bl	11318 <dcgettext@plt>
   16bcc:	mov	r1, r5
   16bd0:	bl	172b8 <__assert_fail@plt+0x5d00>
   16bd4:	ldr	r0, [r4, #156]	; 0x9c
   16bd8:	movw	r8, #12704	; 0x31a0
   16bdc:	movt	r8, #3
   16be0:	cmp	r0, #0
   16be4:	beq	16c38 <__assert_fail@plt+0x5680>
   16be8:	ldrb	r0, [r4, #182]	; 0xb6
   16bec:	cmp	r0, #0
   16bf0:	bne	16c38 <__assert_fail@plt+0x5680>
   16bf4:	add	r2, r4, #64	; 0x40
   16bf8:	add	r1, r4, #56	; 0x38
   16bfc:	ldm	r6, {r3, r5}
   16c00:	ldr	r0, [r8]
   16c04:	ldm	r2, {r2, r9}
   16c08:	ldm	r1, {r1, r7}
   16c0c:	stm	sp, {r3, r5}
   16c10:	str	r7, [sp, #12]
   16c14:	str	r9, [sp, #20]
   16c18:	mov	r7, #1
   16c1c:	str	r2, [sp, #16]
   16c20:	movw	r2, #6822	; 0x1aa6
   16c24:	str	r1, [sp, #8]
   16c28:	mov	r1, #1
   16c2c:	movt	r2, #2
   16c30:	bl	114d4 <__fprintf_chk@plt>
   16c34:	strb	r7, [r4, #182]	; 0xb6
   16c38:	ldrb	r0, [r4, #180]	; 0xb4
   16c3c:	ldrb	r1, [r4, #187]	; 0xbb
   16c40:	cmp	r0, r1
   16c44:	beq	16c98 <__assert_fail@plt+0x56e0>
   16c48:	cmp	r7, #0
   16c4c:	beq	16c5c <__assert_fail@plt+0x56a4>
   16c50:	ldr	r1, [r8]
   16c54:	mov	r0, #32
   16c58:	bl	11528 <fputc@plt>
   16c5c:	movw	r1, #6851	; 0x1ac3
   16c60:	ldr	r5, [r8]
   16c64:	mov	r0, #0
   16c68:	mov	r2, #5
   16c6c:	movt	r1, #2
   16c70:	bl	11318 <dcgettext@plt>
   16c74:	mov	r2, r0
   16c78:	ldrd	r0, [r6]
   16c7c:	mov	r7, #1
   16c80:	stm	sp, {r0, r1}
   16c84:	mov	r0, r5
   16c88:	mov	r1, #1
   16c8c:	bl	114d4 <__fprintf_chk@plt>
   16c90:	ldrb	r0, [r4, #180]	; 0xb4
   16c94:	strb	r0, [r4, #187]	; 0xbb
   16c98:	ldr	r0, [r4, #172]	; 0xac
   16c9c:	cmp	r0, #0
   16ca0:	beq	16d44 <__assert_fail@plt+0x578c>
   16ca4:	ldrb	r0, [r4, #185]	; 0xb9
   16ca8:	cmp	r0, #0
   16cac:	bne	16d44 <__assert_fail@plt+0x578c>
   16cb0:	add	r1, r4, #72	; 0x48
   16cb4:	add	r2, r4, #80	; 0x50
   16cb8:	ldr	r5, [r4, #88]	; 0x58
   16cbc:	ldr	r0, [r8]
   16cc0:	ldr	r6, [r1]
   16cc4:	ldr	r1, [r1, #4]
   16cc8:	ldm	r2, {r2, r9}
   16ccc:	asr	r3, r5, #31
   16cd0:	str	r6, [sp]
   16cd4:	stmib	sp, {r1, r2, r9}
   16cd8:	movw	r2, #6864	; 0x1ad0
   16cdc:	eor	r1, r7, #1
   16ce0:	str	r5, [sp, #16]
   16ce4:	str	r3, [sp, #20]
   16ce8:	movt	r2, #2
   16cec:	add	r2, r2, r1
   16cf0:	mov	r1, #1
   16cf4:	bl	114d4 <__fprintf_chk@plt>
   16cf8:	ldr	r3, [r4, #92]	; 0x5c
   16cfc:	cmp	r3, #0
   16d00:	beq	16d18 <__assert_fail@plt+0x5760>
   16d04:	ldr	r0, [r8]
   16d08:	movw	r2, #6886	; 0x1ae6
   16d0c:	mov	r1, #1
   16d10:	movt	r2, #2
   16d14:	bl	114d4 <__fprintf_chk@plt>
   16d18:	ldr	r0, [r4, #28]
   16d1c:	cmp	r0, #1
   16d20:	bne	16d3c <__assert_fail@plt+0x5784>
   16d24:	ldr	r3, [r8]
   16d28:	movw	r0, #6892	; 0x1aec
   16d2c:	mov	r1, #2
   16d30:	mov	r2, #1
   16d34:	movt	r0, #2
   16d38:	bl	1136c <fwrite@plt>
   16d3c:	mov	r7, #1
   16d40:	strb	r7, [r4, #185]	; 0xb9
   16d44:	ldr	r0, [r4, #160]	; 0xa0
   16d48:	cmp	r0, #0
   16d4c:	beq	16dc4 <__assert_fail@plt+0x580c>
   16d50:	ldrb	r0, [r4, #183]	; 0xb7
   16d54:	cmp	r0, #0
   16d58:	bne	16dc4 <__assert_fail@plt+0x580c>
   16d5c:	add	r9, r4, #8
   16d60:	cmp	r7, #0
   16d64:	beq	16d74 <__assert_fail@plt+0x57bc>
   16d68:	ldr	r1, [r8]
   16d6c:	mov	r0, #32
   16d70:	bl	11528 <fputc@plt>
   16d74:	movw	r1, #6895	; 0x1aef
   16d78:	ldr	r5, [r8]
   16d7c:	mov	r0, #0
   16d80:	mov	r2, #5
   16d84:	movt	r1, #2
   16d88:	bl	11318 <dcgettext@plt>
   16d8c:	mov	r6, r0
   16d90:	add	r1, sp, #32
   16d94:	mov	r0, r4
   16d98:	bl	1a694 <__assert_fail@plt+0x90dc>
   16d9c:	mov	r3, r0
   16da0:	ldrd	r0, [r9]
   16da4:	ldr	r2, [r4, #16]
   16da8:	mov	r7, #1
   16dac:	stm	sp, {r0, r1, r2}
   16db0:	mov	r0, r5
   16db4:	mov	r1, #1
   16db8:	mov	r2, r6
   16dbc:	bl	114d4 <__fprintf_chk@plt>
   16dc0:	strb	r7, [r4, #183]	; 0xb7
   16dc4:	ldr	r0, [r4, #164]	; 0xa4
   16dc8:	cmp	r0, #0
   16dcc:	beq	16e24 <__assert_fail@plt+0x586c>
   16dd0:	ldrb	r0, [r4, #184]	; 0xb8
   16dd4:	cmp	r0, #0
   16dd8:	bne	16e24 <__assert_fail@plt+0x586c>
   16ddc:	ldr	r0, [r4, #168]	; 0xa8
   16de0:	movw	r1, #9721	; 0x25f9
   16de4:	movw	r2, #6939	; 0x1b1b
   16de8:	ldr	r3, [r4, #20]
   16dec:	movt	r1, #2
   16df0:	movt	r2, #2
   16df4:	cmp	r0, #0
   16df8:	ldr	r0, [r8]
   16dfc:	moveq	r2, r1
   16e00:	eor	r1, r7, #1
   16e04:	mov	r7, #1
   16e08:	str	r2, [sp]
   16e0c:	movw	r2, #6927	; 0x1b0f
   16e10:	movt	r2, #2
   16e14:	add	r2, r2, r1
   16e18:	mov	r1, #1
   16e1c:	bl	114d4 <__fprintf_chk@plt>
   16e20:	strb	r7, [r4, #184]	; 0xb8
   16e24:	ldr	r0, [r4, #176]	; 0xb0
   16e28:	cmp	r0, #0
   16e2c:	beq	16f3c <__assert_fail@plt+0x5984>
   16e30:	ldrb	r0, [r4, #186]	; 0xba
   16e34:	cmp	r0, #0
   16e38:	bne	16f3c <__assert_fail@plt+0x5984>
   16e3c:	ldr	r6, [r4, #24]
   16e40:	mov	r0, #43	; 0x2b
   16e44:	ldr	r1, [r8]
   16e48:	movw	r3, #6975	; 0x1b3f
   16e4c:	add	sl, sp, #32
   16e50:	mov	r2, #27
   16e54:	mov	r5, #1
   16e58:	movt	r3, #2
   16e5c:	cmp	r6, #0
   16e60:	str	r1, [sp, #28]
   16e64:	movwmi	r0, #45	; 0x2d
   16e68:	str	r0, [sp]
   16e6c:	movw	r0, #46021	; 0xb3c5
   16e70:	movt	r0, #37282	; 0x91a2
   16e74:	smmla	r0, r6, r0, r6
   16e78:	asr	r1, r0, #11
   16e7c:	add	r9, r1, r0, lsr #31
   16e80:	mov	r1, #1
   16e84:	cmp	r9, #0
   16e88:	mov	r0, r9
   16e8c:	rsbmi	r0, r9, #0
   16e90:	str	r0, [sp, #4]
   16e94:	mov	r0, sl
   16e98:	bl	11498 <__sprintf_chk@plt>
   16e9c:	mov	r1, #3600	; 0xe10
   16ea0:	movw	r3, #6944	; 0x1b20
   16ea4:	eor	r2, r7, #1
   16ea8:	mls	r1, r9, r1, r6
   16eac:	movt	r3, #2
   16eb0:	add	r2, r3, r2
   16eb4:	cmp	r1, #0
   16eb8:	beq	16f88 <__assert_fail@plt+0x59d0>
   16ebc:	add	r9, sl, r0
   16ec0:	mov	r3, #58	; 0x3a
   16ec4:	rsbmi	r1, r1, #0
   16ec8:	mov	ip, #48	; 0x30
   16ecc:	movw	lr, #52429	; 0xcccd
   16ed0:	strb	r3, [r9]
   16ed4:	movw	r3, #33205	; 0x81b5
   16ed8:	uxth	r7, r1
   16edc:	movt	lr, #52428	; 0xcccc
   16ee0:	movt	r3, #6990	; 0x1b4e
   16ee4:	umull	r3, r6, r7, r3
   16ee8:	add	r6, ip, r6, lsr #6
   16eec:	strb	r6, [r9, #1]
   16ef0:	movw	r6, #34953	; 0x8889
   16ef4:	movt	r6, #34952	; 0x8888
   16ef8:	umull	r7, r6, r7, r6
   16efc:	ubfx	r3, r6, #5, #8
   16f00:	umull	r7, r0, r3, lr
   16f04:	lsr	r0, r0, #3
   16f08:	add	r0, r0, r0, lsl #2
   16f0c:	sub	r0, r3, r0, lsl #1
   16f10:	orr	r0, r0, #48	; 0x30
   16f14:	strb	r0, [r9, #2]
   16f18:	lsr	r0, r6, #5
   16f1c:	lsl	r0, r0, #4
   16f20:	sub	r0, r0, r6, lsr #5
   16f24:	sub	r1, r1, r0, lsl #2
   16f28:	movw	r0, #65535	; 0xffff
   16f2c:	tst	r1, r0
   16f30:	bne	16f50 <__assert_fail@plt+0x5998>
   16f34:	add	r0, r9, #3
   16f38:	b	16f80 <__assert_fail@plt+0x59c8>
   16f3c:	mov	r5, r7
   16f40:	ldrb	r0, [r4, #152]	; 0x98
   16f44:	cmp	r0, #0
   16f48:	bne	16fa8 <__assert_fail@plt+0x59f0>
   16f4c:	b	16ff4 <__assert_fail@plt+0x5a3c>
   16f50:	mov	r0, #58	; 0x3a
   16f54:	strb	r0, [r9, #3]
   16f58:	uxtb	r0, r1
   16f5c:	umull	r0, r3, r0, lr
   16f60:	orr	r0, ip, r3, lsr #3
   16f64:	strb	r0, [r9, #4]
   16f68:	lsr	r0, r3, #3
   16f6c:	add	r0, r0, r0, lsl #2
   16f70:	sub	r0, r1, r0, lsl #1
   16f74:	orr	r0, r0, #48	; 0x30
   16f78:	strb	r0, [r9, #5]
   16f7c:	add	r0, r9, #6
   16f80:	mov	r1, #0
   16f84:	strb	r1, [r0]
   16f88:	ldr	r0, [sp, #28]
   16f8c:	add	r3, sp, #32
   16f90:	mov	r1, #1
   16f94:	bl	114d4 <__fprintf_chk@plt>
   16f98:	strb	r5, [r4, #186]	; 0xba
   16f9c:	ldrb	r0, [r4, #152]	; 0x98
   16fa0:	cmp	r0, #0
   16fa4:	beq	16ff4 <__assert_fail@plt+0x5a3c>
   16fa8:	ldr	r6, [r4, #88]	; 0x58
   16fac:	cmp	r5, #0
   16fb0:	beq	16fc0 <__assert_fail@plt+0x5a08>
   16fb4:	ldr	r1, [r8]
   16fb8:	mov	r0, #32
   16fbc:	bl	11528 <fputc@plt>
   16fc0:	movw	r1, #6951	; 0x1b27
   16fc4:	ldr	r4, [r8]
   16fc8:	mov	r0, #0
   16fcc:	mov	r2, #5
   16fd0:	movt	r1, #2
   16fd4:	bl	11318 <dcgettext@plt>
   16fd8:	mov	r2, r0
   16fdc:	asr	r0, r6, #31
   16fe0:	mov	r1, #1
   16fe4:	str	r6, [sp]
   16fe8:	str	r0, [sp, #4]
   16fec:	mov	r0, r4
   16ff0:	bl	114d4 <__fprintf_chk@plt>
   16ff4:	ldr	r1, [r8]
   16ff8:	mov	r0, #10
   16ffc:	bl	11528 <fputc@plt>
   17000:	sub	sp, fp, #28
   17004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1700c:	add	fp, sp, #28
   17010:	sub	sp, sp, #28
   17014:	mov	r5, r0
   17018:	ldrb	r0, [r1, #181]	; 0xb5
   1701c:	cmp	r0, #0
   17020:	beq	170d4 <__assert_fail@plt+0x5b1c>
   17024:	add	r0, r1, #112	; 0x70
   17028:	mov	r4, r1
   1702c:	add	r7, r1, #96	; 0x60
   17030:	add	sl, r1, #104	; 0x68
   17034:	add	r9, r1, #128	; 0x80
   17038:	add	r8, r1, #136	; 0x88
   1703c:	mov	r2, #5
   17040:	str	r0, [sp, #20]
   17044:	add	r0, r1, #120	; 0x78
   17048:	movw	r1, #6805	; 0x1a95
   1704c:	movt	r1, #2
   17050:	str	r0, [sp, #16]
   17054:	mov	r0, #0
   17058:	bl	11318 <dcgettext@plt>
   1705c:	mov	r1, r5
   17060:	bl	172b8 <__assert_fail@plt+0x5d00>
   17064:	ldr	r2, [r7]
   17068:	ldr	r1, [r7, #4]
   1706c:	movw	r6, #12704	; 0x31a0
   17070:	movw	r5, #7050	; 0x1b8a
   17074:	str	r8, [sp, #24]
   17078:	movt	r6, #3
   1707c:	movt	r5, #2
   17080:	orrs	r0, r2, r1
   17084:	beq	170dc <__assert_fail@plt+0x5b24>
   17088:	ldr	r0, [r6]
   1708c:	movw	r3, #6998	; 0x1b56
   17090:	str	r2, [sp]
   17094:	add	r2, r5, #1
   17098:	mov	r7, #1
   1709c:	movt	r3, #2
   170a0:	stmib	sp, {r1, r3}
   170a4:	mov	r1, #1
   170a8:	bl	114d4 <__fprintf_chk@plt>
   170ac:	ldr	r2, [sl]
   170b0:	ldr	r1, [sl, #4]
   170b4:	mov	sl, r5
   170b8:	mov	r5, r6
   170bc:	ldr	r8, [sp, #16]
   170c0:	ldr	r6, [sp, #20]
   170c4:	mov	r3, #0
   170c8:	orrs	r0, r2, r1
   170cc:	bne	17100 <__assert_fail@plt+0x5b48>
   170d0:	b	17124 <__assert_fail@plt+0x5b6c>
   170d4:	sub	sp, fp, #28
   170d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170dc:	ldr	r2, [sl]
   170e0:	ldr	r1, [sl, #4]
   170e4:	mov	sl, r5
   170e8:	mov	r5, r6
   170ec:	ldr	r8, [sp, #16]
   170f0:	ldr	r6, [sp, #20]
   170f4:	mov	r3, #1
   170f8:	orrs	r0, r2, r1
   170fc:	beq	17250 <__assert_fail@plt+0x5c98>
   17100:	ldr	r0, [r5]
   17104:	movw	r7, #7006	; 0x1b5e
   17108:	str	r2, [sp]
   1710c:	add	r2, sl, r3
   17110:	movt	r7, #2
   17114:	stmib	sp, {r1, r7}
   17118:	mov	r1, #1
   1711c:	mov	r7, #1
   17120:	bl	114d4 <__fprintf_chk@plt>
   17124:	ldr	r2, [r6]
   17128:	ldr	r1, [r6, #4]
   1712c:	orrs	r0, r2, r1
   17130:	beq	1715c <__assert_fail@plt+0x5ba4>
   17134:	ldr	r0, [r5]
   17138:	movw	r3, #7015	; 0x1b67
   1713c:	str	r2, [sp]
   17140:	movt	r3, #2
   17144:	stmib	sp, {r1, r3}
   17148:	eor	r1, r7, #1
   1714c:	mov	r7, #1
   17150:	add	r2, sl, r1
   17154:	mov	r1, #1
   17158:	bl	114d4 <__fprintf_chk@plt>
   1715c:	ldr	r2, [r8]
   17160:	ldr	r1, [r8, #4]
   17164:	orrs	r0, r2, r1
   17168:	beq	17194 <__assert_fail@plt+0x5bdc>
   1716c:	ldr	r0, [r5]
   17170:	movw	r3, #7022	; 0x1b6e
   17174:	str	r2, [sp]
   17178:	movt	r3, #2
   1717c:	stmib	sp, {r1, r3}
   17180:	eor	r1, r7, #1
   17184:	mov	r7, #1
   17188:	add	r2, sl, r1
   1718c:	mov	r1, #1
   17190:	bl	114d4 <__fprintf_chk@plt>
   17194:	ldr	r2, [r9]
   17198:	ldr	r1, [r9, #4]
   1719c:	orrs	r0, r2, r1
   171a0:	beq	171cc <__assert_fail@plt+0x5c14>
   171a4:	ldr	r0, [r5]
   171a8:	movw	r3, #7030	; 0x1b76
   171ac:	str	r2, [sp]
   171b0:	movt	r3, #2
   171b4:	stmib	sp, {r1, r3}
   171b8:	eor	r1, r7, #1
   171bc:	mov	r7, #1
   171c0:	add	r2, sl, r1
   171c4:	mov	r1, #1
   171c8:	bl	114d4 <__fprintf_chk@plt>
   171cc:	ldr	r0, [sp, #24]
   171d0:	ldr	r2, [r0]
   171d4:	ldr	r1, [r0, #4]
   171d8:	orrs	r0, r2, r1
   171dc:	beq	17208 <__assert_fail@plt+0x5c50>
   171e0:	ldr	r0, [r5]
   171e4:	movw	r3, #6622	; 0x19de
   171e8:	str	r2, [sp]
   171ec:	movt	r3, #2
   171f0:	stmib	sp, {r1, r3}
   171f4:	eor	r1, r7, #1
   171f8:	mov	r7, #1
   171fc:	add	r2, sl, r1
   17200:	mov	r1, #1
   17204:	bl	114d4 <__fprintf_chk@plt>
   17208:	ldr	r1, [r4, #144]	; 0x90
   1720c:	cmp	r1, #0
   17210:	beq	1723c <__assert_fail@plt+0x5c84>
   17214:	movw	r2, #7038	; 0x1b7e
   17218:	ldr	r0, [r5]
   1721c:	asr	r3, r1, #31
   17220:	stm	sp, {r1, r3}
   17224:	eor	r1, r7, #1
   17228:	movt	r2, #2
   1722c:	str	r2, [sp, #8]
   17230:	add	r2, sl, r1
   17234:	mov	r1, #1
   17238:	bl	114d4 <__fprintf_chk@plt>
   1723c:	ldr	r1, [r5]
   17240:	mov	r0, #10
   17244:	sub	sp, fp, #28
   17248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1724c:	b	11528 <fputc@plt>
   17250:	ldrd	r0, [r6]
   17254:	mov	r7, #0
   17258:	orrs	r0, r0, r1
   1725c:	bne	17124 <__assert_fail@plt+0x5b6c>
   17260:	ldrd	r0, [r8]
   17264:	orrs	r0, r0, r1
   17268:	bne	17124 <__assert_fail@plt+0x5b6c>
   1726c:	ldrd	r0, [r9]
   17270:	orrs	r0, r0, r1
   17274:	bne	17124 <__assert_fail@plt+0x5b6c>
   17278:	ldr	r0, [sp, #24]
   1727c:	ldrd	r0, [r0]
   17280:	orrs	r0, r0, r1
   17284:	bne	17124 <__assert_fail@plt+0x5b6c>
   17288:	ldr	r0, [r4, #144]	; 0x90
   1728c:	cmp	r0, #0
   17290:	bne	17124 <__assert_fail@plt+0x5b6c>
   17294:	movw	r1, #6982	; 0x1b46
   17298:	mov	r0, #0
   1729c:	mov	r2, #5
   172a0:	movt	r1, #2
   172a4:	bl	11318 <dcgettext@plt>
   172a8:	ldr	r1, [r5]
   172ac:	sub	sp, fp, #28
   172b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172b4:	b	11570 <fputs@plt>
   172b8:	sub	sp, sp, #12
   172bc:	push	{r4, r5, fp, lr}
   172c0:	add	fp, sp, #8
   172c4:	sub	sp, sp, #4
   172c8:	movw	r5, #12704	; 0x31a0
   172cc:	mov	r4, r0
   172d0:	add	r0, fp, #8
   172d4:	movt	r5, #3
   172d8:	stm	r0, {r1, r2, r3}
   172dc:	movw	r0, #7060	; 0x1b94
   172e0:	mov	r1, #6
   172e4:	mov	r2, #1
   172e8:	movt	r0, #2
   172ec:	ldr	r3, [r5]
   172f0:	bl	1136c <fwrite@plt>
   172f4:	ldr	r0, [r5]
   172f8:	add	r3, fp, #8
   172fc:	mov	r1, #1
   17300:	mov	r2, r4
   17304:	str	r3, [sp]
   17308:	bl	113f0 <__vfprintf_chk@plt>
   1730c:	sub	sp, fp, #8
   17310:	pop	{r4, r5, fp, lr}
   17314:	add	sp, sp, #12
   17318:	bx	lr
   1731c:	b	17320 <__assert_fail@plt+0x5d68>
   17320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17324:	add	fp, sp, #28
   17328:	sub	sp, sp, #924	; 0x39c
   1732c:	str	r0, [sp, #68]	; 0x44
   17330:	mov	r0, r1
   17334:	str	r3, [sp, #80]	; 0x50
   17338:	mov	r7, r2
   1733c:	mov	r4, r1
   17340:	bl	11468 <strlen@plt>
   17344:	mov	r5, r0
   17348:	add	sl, sp, #160	; 0xa0
   1734c:	cmp	r7, #0
   17350:	bne	17360 <__assert_fail@plt+0x5da8>
   17354:	sub	r7, fp, #456	; 0x1c8
   17358:	mov	r0, r7
   1735c:	bl	129c8 <__assert_fail@plt+0x1410>
   17360:	add	r0, r4, r5
   17364:	ldr	r2, [fp, #12]
   17368:	ldr	r6, [r7]
   1736c:	add	r3, sl, #40	; 0x28
   17370:	add	r5, sl, #88	; 0x58
   17374:	add	r9, r4, #4
   17378:	str	r0, [sp, #60]	; 0x3c
   1737c:	add	r0, sl, #8
   17380:	str	r0, [sp, #52]	; 0x34
   17384:	add	r0, sl, #56	; 0x38
   17388:	str	r0, [sp, #104]	; 0x68
   1738c:	add	r0, sl, #64	; 0x40
   17390:	str	r0, [sp, #100]	; 0x64
   17394:	add	r0, sl, #72	; 0x48
   17398:	str	r0, [sp, #96]	; 0x60
   1739c:	add	r0, sl, #80	; 0x50
   173a0:	str	r0, [sp, #92]	; 0x5c
   173a4:	add	r0, sl, #96	; 0x60
   173a8:	str	r0, [sp, #88]	; 0x58
   173ac:	add	r0, sl, #104	; 0x68
   173b0:	str	r0, [sp, #44]	; 0x2c
   173b4:	add	r0, sl, #112	; 0x70
   173b8:	str	r0, [sp, #48]	; 0x30
   173bc:	add	r0, sl, #120	; 0x78
   173c0:	str	r0, [sp, #40]	; 0x28
   173c4:	add	r0, sl, #128	; 0x80
   173c8:	str	r0, [sp, #36]	; 0x24
   173cc:	add	r0, sl, #136	; 0x88
   173d0:	str	r0, [sp, #32]
   173d4:	ldr	r0, [r7, #4]
   173d8:	str	r0, [sp, #76]	; 0x4c
   173dc:	ldrb	r0, [r9, #-4]
   173e0:	sub	r1, r0, #9
   173e4:	cmp	r1, #5
   173e8:	bcs	17400 <__assert_fail@plt+0x5e48>
   173ec:	add	r9, r9, #1
   173f0:	ldrb	r0, [r9, #-4]
   173f4:	sub	r1, r0, #9
   173f8:	cmp	r1, #5
   173fc:	bcc	173ec <__assert_fail@plt+0x5e34>
   17400:	cmp	r0, #32
   17404:	beq	173ec <__assert_fail@plt+0x5e34>
   17408:	vmov.i32	q8, #0	; 0x00000000
   1740c:	str	r6, [sp, #84]	; 0x54
   17410:	add	r6, sp, #440	; 0x1b8
   17414:	mov	r0, #52	; 0x34
   17418:	sub	r8, r9, #4
   1741c:	str	r2, [sp, #64]	; 0x40
   17420:	mov	r2, #4
   17424:	str	r3, [sp, #108]	; 0x6c
   17428:	mov	r1, r6
   1742c:	add	r4, r6, #32
   17430:	vst1.64	{d16-d17}, [r1], r0
   17434:	mov	r0, #0
   17438:	vst1.64	{d16-d17}, [r4]
   1743c:	str	r0, [r1]
   17440:	add	r1, r6, #16
   17444:	str	r0, [sp, #488]	; 0x1e8
   17448:	mov	r0, r8
   1744c:	str	r1, [sp, #72]	; 0x48
   17450:	vst1.64	{d16-d17}, [r1]
   17454:	movw	r1, #7671	; 0x1df7
   17458:	movt	r1, #2
   1745c:	bl	1157c <strncmp@plt>
   17460:	cmp	r0, #0
   17464:	str	r5, [sp, #56]	; 0x38
   17468:	beq	1773c <__assert_fail@plt+0x6184>
   1746c:	ldr	r9, [fp, #8]
   17470:	mov	r0, #0
   17474:	str	r0, [sp, #112]	; 0x70
   17478:	mov	r5, r9
   1747c:	add	r2, sp, #396	; 0x18c
   17480:	mov	r0, r5
   17484:	mov	r1, r7
   17488:	bl	1ccf8 <__assert_fail@plt+0xb740>
   1748c:	cmp	r0, #0
   17490:	mov	r7, #0
   17494:	beq	18028 <__assert_fail@plt+0x6a70>
   17498:	ldrb	r0, [r8]
   1749c:	ldr	r1, [sp, #80]	; 0x50
   174a0:	movw	r2, #1900	; 0x76c
   174a4:	vld1.64	{d18-d19}, [r4]
   174a8:	ldr	r4, [sp, #72]	; 0x48
   174ac:	ldr	r7, [sp, #88]	; 0x58
   174b0:	add	lr, sp, #256	; 0x100
   174b4:	cmp	r0, #0
   174b8:	ldr	r0, [sp, #416]	; 0x1a0
   174bc:	and	r1, r1, #1
   174c0:	vld1.64	{d20-d21}, [r4]
   174c4:	ldr	r4, [sp, #84]	; 0x54
   174c8:	strb	r1, [sp, #341]	; 0x155
   174cc:	movw	r1, #7831	; 0x1e97
   174d0:	movt	r1, #2
   174d4:	movne	r1, r8
   174d8:	str	r1, [sp, #160]	; 0xa0
   174dc:	asr	r1, r0, #31
   174e0:	adds	r0, r0, r2
   174e4:	ldr	r2, [sp, #108]	; 0x6c
   174e8:	adc	r1, r1, #0
   174ec:	strd	r0, [r2]
   174f0:	ldr	r1, [sp, #412]	; 0x19c
   174f4:	mov	r0, #0
   174f8:	str	r0, [sp, #208]	; 0xd0
   174fc:	add	r2, r1, #1
   17500:	ldr	r1, [sp, #104]	; 0x68
   17504:	asr	r3, r2, #31
   17508:	strd	r2, [r1]
   1750c:	ldr	r2, [sp, #408]	; 0x198
   17510:	ldr	r1, [sp, #100]	; 0x64
   17514:	asr	r3, r2, #31
   17518:	strd	r2, [r1]
   1751c:	ldr	r2, [sp, #404]	; 0x194
   17520:	ldr	r1, [sp, #96]	; 0x60
   17524:	asr	r3, r2, #31
   17528:	strd	r2, [r1]
   1752c:	ldr	r2, [sp, #400]	; 0x190
   17530:	ldr	r1, [sp, #92]	; 0x5c
   17534:	asr	r3, r2, #31
   17538:	strd	r2, [r1]
   1753c:	ldr	r2, [sp, #76]	; 0x4c
   17540:	mov	r1, #48	; 0x30
   17544:	ldr	r3, [sp, #428]	; 0x1ac
   17548:	vld1.64	{d16-d17}, [r6], r1
   1754c:	vldr	d22, [r6]
   17550:	str	r2, [sp, #252]	; 0xfc
   17554:	mov	r2, #2
   17558:	str	r3, [fp, #-144]	; 0xffffff70
   1755c:	str	r2, [sp, #188]	; 0xbc
   17560:	ldr	r2, [sp, #396]	; 0x18c
   17564:	str	r2, [sp, #248]	; 0xf8
   17568:	add	r2, r7, #32
   1756c:	vst1.64	{d18-d19}, [r2]
   17570:	add	r2, r7, #16
   17574:	vst1.64	{d20-d21}, [r2]
   17578:	mov	r2, r7
   1757c:	vst1.64	{d16-d17}, [r2], r1
   17580:	vmov.i32	q8, #0	; 0x00000000
   17584:	add	r1, sl, #156	; 0x9c
   17588:	vstr	d22, [r2]
   1758c:	vst1.32	{d16-d17}, [r1]
   17590:	add	r1, sl, #165	; 0xa5
   17594:	vst1.8	{d16-d17}, [r1]
   17598:	strh	r0, [lr, #56]	; 0x38
   1759c:	str	r0, [sp, #342]	; 0x156
   175a0:	str	r0, [sp, #345]	; 0x159
   175a4:	str	r0, [sp, #364]	; 0x16c
   175a8:	movw	r0, #269	; 0x10d
   175ac:	str	r3, [sp, #360]	; 0x168
   175b0:	str	r0, [sp, #356]	; 0x164
   175b4:	ldr	r0, [sp, #436]	; 0x1b4
   175b8:	str	r0, [sp, #352]	; 0x160
   175bc:	add	r0, r4, #42752	; 0xa700
   175c0:	add	r0, r0, #7733248	; 0x760000
   175c4:	cmp	r0, r4
   175c8:	str	r0, [fp, #-348]	; 0xfffffea4
   175cc:	bvs	176ac <__assert_fail@plt+0x60f4>
   175d0:	sub	r1, fp, #348	; 0x15c
   175d4:	sub	r2, fp, #132	; 0x84
   175d8:	mov	r0, r5
   175dc:	bl	1ccf8 <__assert_fail@plt+0xb740>
   175e0:	cmp	r0, #0
   175e4:	beq	17604 <__assert_fail@plt+0x604c>
   175e8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   175ec:	cmp	r0, #0
   175f0:	beq	17604 <__assert_fail@plt+0x604c>
   175f4:	ldr	r1, [fp, #-100]	; 0xffffff9c
   175f8:	ldr	r2, [sp, #360]	; 0x168
   175fc:	cmp	r1, r2
   17600:	bne	17694 <__assert_fail@plt+0x60dc>
   17604:	add	r0, r4, #19968	; 0x4e00
   17608:	add	r0, r0, #15532032	; 0xed0000
   1760c:	cmp	r0, r4
   17610:	str	r0, [fp, #-348]	; 0xfffffea4
   17614:	bvs	176ac <__assert_fail@plt+0x60f4>
   17618:	sub	r1, fp, #348	; 0x15c
   1761c:	sub	r2, fp, #132	; 0x84
   17620:	mov	r0, r5
   17624:	bl	1ccf8 <__assert_fail@plt+0xb740>
   17628:	cmp	r0, #0
   1762c:	beq	1764c <__assert_fail@plt+0x6094>
   17630:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17634:	cmp	r0, #0
   17638:	beq	1764c <__assert_fail@plt+0x6094>
   1763c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   17640:	ldr	r2, [sp, #360]	; 0x168
   17644:	cmp	r1, r2
   17648:	bne	17694 <__assert_fail@plt+0x60dc>
   1764c:	movw	r0, #62720	; 0xf500
   17650:	movt	r0, #355	; 0x163
   17654:	adds	r0, r4, r0
   17658:	str	r0, [fp, #-348]	; 0xfffffea4
   1765c:	bvs	176ac <__assert_fail@plt+0x60f4>
   17660:	sub	r1, fp, #348	; 0x15c
   17664:	sub	r2, fp, #132	; 0x84
   17668:	mov	r0, r5
   1766c:	bl	1ccf8 <__assert_fail@plt+0xb740>
   17670:	cmp	r0, #0
   17674:	beq	176ac <__assert_fail@plt+0x60f4>
   17678:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1767c:	cmp	r0, #0
   17680:	beq	176ac <__assert_fail@plt+0x60f4>
   17684:	ldr	r1, [fp, #-100]	; 0xffffff9c
   17688:	ldr	r2, [sp, #360]	; 0x168
   1768c:	cmp	r1, r2
   17690:	beq	176ac <__assert_fail@plt+0x60f4>
   17694:	mov	r2, #0
   17698:	str	r2, [sp, #376]	; 0x178
   1769c:	str	r1, [sp, #372]	; 0x174
   176a0:	movw	r1, #269	; 0x10d
   176a4:	str	r1, [sp, #368]	; 0x170
   176a8:	str	r0, [sp, #364]	; 0x16c
   176ac:	ldr	r0, [sp, #352]	; 0x160
   176b0:	cmp	r0, #0
   176b4:	beq	176dc <__assert_fail@plt+0x6124>
   176b8:	ldr	r1, [sp, #364]	; 0x16c
   176bc:	cmp	r1, #0
   176c0:	beq	176dc <__assert_fail@plt+0x6124>
   176c4:	bl	112a0 <strcmp@plt>
   176c8:	cmp	r0, #0
   176cc:	moveq	r0, #0
   176d0:	streq	r0, [sp, #364]	; 0x16c
   176d4:	mvneq	r0, #0
   176d8:	streq	r0, [sp, #360]	; 0x168
   176dc:	add	r0, sp, #160	; 0xa0
   176e0:	bl	129ec <__assert_fail@plt+0x1434>
   176e4:	ldrb	r1, [sp, #341]	; 0x155
   176e8:	cmp	r0, #0
   176ec:	beq	1778c <__assert_fail@plt+0x61d4>
   176f0:	cmp	r1, #0
   176f4:	beq	18ce4 <__assert_fail@plt+0x772c>
   176f8:	ldr	r0, [sp, #160]	; 0xa0
   176fc:	ldr	r3, [sp, #60]	; 0x3c
   17700:	movw	r2, #7699	; 0x1e13
   17704:	movw	r1, #7676	; 0x1dfc
   17708:	mov	r7, #0
   1770c:	movt	r2, #2
   17710:	movt	r1, #2
   17714:	cmp	r3, r0
   17718:	mov	r0, #0
   1771c:	movhi	r1, r2
   17720:	mov	r2, #5
   17724:	bl	11318 <dcgettext@plt>
   17728:	ldr	r1, [sp, #160]	; 0xa0
   1772c:	bl	172b8 <__assert_fail@plt+0x5d00>
   17730:	cmp	r5, r9
   17734:	bne	18030 <__assert_fail@plt+0x6a78>
   17738:	b	18038 <__assert_fail@plt+0x6a80>
   1773c:	mov	r0, #1
   17740:	mov	r1, r9
   17744:	ldrb	r2, [r1]
   17748:	cmp	r2, #92	; 0x5c
   1774c:	beq	17764 <__assert_fail@plt+0x61ac>
   17750:	cmp	r2, #0
   17754:	beq	1746c <__assert_fail@plt+0x5eb4>
   17758:	cmp	r2, #34	; 0x22
   1775c:	bne	17774 <__assert_fail@plt+0x61bc>
   17760:	b	17808 <__assert_fail@plt+0x6250>
   17764:	ldrb	r2, [r1, #1]!
   17768:	cmp	r2, #34	; 0x22
   1776c:	cmpne	r2, #92	; 0x5c
   17770:	bne	1746c <__assert_fail@plt+0x5eb4>
   17774:	add	r0, r0, #1
   17778:	add	r1, r1, #1
   1777c:	ldrb	r2, [r1]
   17780:	cmp	r2, #92	; 0x5c
   17784:	bne	17750 <__assert_fail@plt+0x6198>
   17788:	b	17764 <__assert_fail@plt+0x61ac>
   1778c:	cmp	r1, #0
   17790:	bne	17af0 <__assert_fail@plt+0x6538>
   17794:	ldrb	r0, [sp, #312]	; 0x138
   17798:	cmp	r0, #0
   1779c:	beq	17d7c <__assert_fail@plt+0x67c4>
   177a0:	ldr	r0, [sp, #56]	; 0x38
   177a4:	ldr	r2, [sp, #68]	; 0x44
   177a8:	ldrd	r0, [r0]
   177ac:	stm	r2, {r0, r1}
   177b0:	ldrb	r0, [sp, #341]	; 0x155
   177b4:	ldr	r4, [sp, #64]	; 0x40
   177b8:	mov	r7, #1
   177bc:	cmp	r0, #0
   177c0:	beq	18028 <__assert_fail@plt+0x6a70>
   177c4:	cmp	r4, #0
   177c8:	beq	178c8 <__assert_fail@plt+0x6310>
   177cc:	movw	r1, #7828	; 0x1e94
   177d0:	mov	r0, r4
   177d4:	movt	r1, #2
   177d8:	bl	112a0 <strcmp@plt>
   177dc:	mov	r8, r5
   177e0:	cmp	r0, #0
   177e4:	beq	178d8 <__assert_fail@plt+0x6320>
   177e8:	movw	r1, #9462	; 0x24f6
   177ec:	mov	r0, #0
   177f0:	mov	r2, #5
   177f4:	movt	r1, #2
   177f8:	bl	11318 <dcgettext@plt>
   177fc:	mov	r1, r4
   17800:	bl	172b8 <__assert_fail@plt+0x5d00>
   17804:	b	178f0 <__assert_fail@plt+0x6338>
   17808:	cmp	r0, #101	; 0x65
   1780c:	bcc	1782c <__assert_fail@plt+0x6274>
   17810:	bl	1e060 <__assert_fail@plt+0xcaa8>
   17814:	cmp	r0, #0
   17818:	mov	r5, r0
   1781c:	bne	17834 <__assert_fail@plt+0x627c>
   17820:	mov	r7, #0
   17824:	mov	r5, #0
   17828:	b	1803c <__assert_fail@plt+0x6a84>
   1782c:	mov	r5, #0
   17830:	sub	r0, fp, #448	; 0x1c0
   17834:	ldrb	r1, [r9]
   17838:	mov	r2, r0
   1783c:	cmp	r1, #34	; 0x22
   17840:	beq	17864 <__assert_fail@plt+0x62ac>
   17844:	uxtb	r1, r1
   17848:	cmp	r1, #92	; 0x5c
   1784c:	addeq	r9, r9, #1
   17850:	ldrb	r1, [r9]
   17854:	strb	r1, [r2], #1
   17858:	ldrb	r1, [r9, #1]!
   1785c:	cmp	r1, #34	; 0x22
   17860:	bne	17844 <__assert_fail@plt+0x628c>
   17864:	mov	r1, #0
   17868:	str	r0, [sp, #64]	; 0x40
   1786c:	strb	r1, [r2]
   17870:	bl	1cc34 <__assert_fail@plt+0xb67c>
   17874:	cmp	r0, #0
   17878:	beq	178c0 <__assert_fail@plt+0x6308>
   1787c:	add	r8, r9, #1
   17880:	ldr	r9, [fp, #8]
   17884:	str	r5, [sp, #112]	; 0x70
   17888:	mov	r5, r0
   1788c:	mov	r1, r0
   17890:	ldrb	r0, [r8]
   17894:	sub	r1, r0, #9
   17898:	cmp	r1, #5
   1789c:	bcs	178b4 <__assert_fail@plt+0x62fc>
   178a0:	add	r8, r8, #1
   178a4:	ldrb	r0, [r8]
   178a8:	sub	r1, r0, #9
   178ac:	cmp	r1, #5
   178b0:	bcc	178a0 <__assert_fail@plt+0x62e8>
   178b4:	cmp	r0, #32
   178b8:	beq	178a0 <__assert_fail@plt+0x62e8>
   178bc:	b	1747c <__assert_fail@plt+0x5ec4>
   178c0:	mov	r7, #0
   178c4:	b	1803c <__assert_fail@plt+0x6a84>
   178c8:	movw	r1, #9410	; 0x24c2
   178cc:	mov	r8, r5
   178d0:	movt	r1, #2
   178d4:	b	178e0 <__assert_fail@plt+0x6328>
   178d8:	movw	r1, #9436	; 0x24dc
   178dc:	movt	r1, #2
   178e0:	mov	r0, #0
   178e4:	mov	r2, #5
   178e8:	bl	11318 <dcgettext@plt>
   178ec:	bl	172b8 <__assert_fail@plt+0x5d00>
   178f0:	ldr	r7, [sp, #68]	; 0x44
   178f4:	movw	r1, #9499	; 0x251b
   178f8:	mov	r0, #0
   178fc:	mov	r2, #5
   17900:	mov	r4, #0
   17904:	movt	r1, #2
   17908:	ldr	r6, [r7]
   1790c:	ldr	r5, [r7, #4]
   17910:	bl	11318 <dcgettext@plt>
   17914:	asr	r3, r6, #31
   17918:	mov	r2, r6
   1791c:	str	r5, [sp]
   17920:	bl	172b8 <__assert_fail@plt+0x5d00>
   17924:	sub	r1, fp, #132	; 0x84
   17928:	mov	r0, r7
   1792c:	bl	11288 <gmtime_r@plt>
   17930:	cmp	r0, #0
   17934:	beq	17980 <__assert_fail@plt+0x63c8>
   17938:	movw	r1, #9533	; 0x253d
   1793c:	mov	r0, #0
   17940:	mov	r2, #5
   17944:	movt	r1, #2
   17948:	bl	11318 <dcgettext@plt>
   1794c:	movw	r2, #10007	; 0x2717
   17950:	sub	r7, fp, #348	; 0x15c
   17954:	mov	r6, r0
   17958:	sub	r3, fp, #132	; 0x84
   1795c:	mov	r1, #100	; 0x64
   17960:	str	r4, [sp]
   17964:	str	r4, [sp, #4]
   17968:	movt	r2, #2
   1796c:	mov	r0, r7
   17970:	bl	1e3cc <__assert_fail@plt+0xce14>
   17974:	mov	r0, r6
   17978:	mov	r1, r7
   1797c:	bl	172b8 <__assert_fail@plt+0x5d00>
   17980:	ldr	r1, [sp, #68]	; 0x44
   17984:	add	r2, sp, #116	; 0x74
   17988:	mov	r0, r8
   1798c:	mov	r5, r8
   17990:	bl	1ccf8 <__assert_fail@plt+0xb740>
   17994:	cmp	r0, #0
   17998:	beq	17b64 <__assert_fail@plt+0x65ac>
   1799c:	movw	r1, #9550	; 0x254e
   179a0:	ldr	r4, [sp, #152]	; 0x98
   179a4:	mov	r0, #0
   179a8:	mov	r2, #5
   179ac:	mov	sl, r5
   179b0:	mov	r5, #0
   179b4:	movt	r1, #2
   179b8:	bl	11318 <dcgettext@plt>
   179bc:	movw	r2, #10007	; 0x2717
   179c0:	mov	r8, r0
   179c4:	sub	r0, fp, #348	; 0x15c
   179c8:	add	r3, sp, #116	; 0x74
   179cc:	mov	r1, #100	; 0x64
   179d0:	str	r5, [sp]
   179d4:	str	r5, [sp, #4]
   179d8:	movt	r2, #2
   179dc:	bl	1e3cc <__assert_fail@plt+0xce14>
   179e0:	movw	r0, #46021	; 0xb3c5
   179e4:	movw	r3, #6975	; 0x1b3f
   179e8:	sub	r7, fp, #247	; 0xf7
   179ec:	mov	r2, #27
   179f0:	movt	r0, #37282	; 0x91a2
   179f4:	movt	r3, #2
   179f8:	smmla	r0, r4, r0, r4
   179fc:	asr	r1, r0, #11
   17a00:	add	r5, r1, r0, lsr #31
   17a04:	mov	r1, #43	; 0x2b
   17a08:	cmp	r5, #0
   17a0c:	mov	r0, r5
   17a10:	rsbmi	r0, r5, #0
   17a14:	cmp	r4, #0
   17a18:	movwmi	r1, #45	; 0x2d
   17a1c:	str	r0, [sp, #4]
   17a20:	mov	r0, r7
   17a24:	str	r1, [sp]
   17a28:	mov	r1, #1
   17a2c:	bl	11498 <__sprintf_chk@plt>
   17a30:	mov	r1, #3600	; 0xe10
   17a34:	mls	r1, r5, r1, r4
   17a38:	mov	r5, sl
   17a3c:	cmp	r1, #0
   17a40:	beq	17b54 <__assert_fail@plt+0x659c>
   17a44:	add	r0, r7, r0
   17a48:	mov	r2, #58	; 0x3a
   17a4c:	rsbmi	r1, r1, #0
   17a50:	strb	r2, [r0]
   17a54:	movw	r2, #33205	; 0x81b5
   17a58:	uxth	r3, r1
   17a5c:	movt	r2, #6990	; 0x1b4e
   17a60:	umull	r2, r7, r3, r2
   17a64:	mov	r2, #48	; 0x30
   17a68:	add	r7, r2, r7, lsr #6
   17a6c:	strb	r7, [r0, #1]
   17a70:	movw	r7, #34953	; 0x8889
   17a74:	movt	r7, #34952	; 0x8888
   17a78:	umull	r3, r7, r3, r7
   17a7c:	movw	r3, #52429	; 0xcccd
   17a80:	movt	r3, #52428	; 0xcccc
   17a84:	ubfx	r5, r7, #5, #8
   17a88:	umull	r4, r6, r5, r3
   17a8c:	lsr	r6, r6, #3
   17a90:	add	r6, r6, r6, lsl #2
   17a94:	sub	r6, r5, r6, lsl #1
   17a98:	orr	r6, r6, #48	; 0x30
   17a9c:	strb	r6, [r0, #2]
   17aa0:	lsr	r6, r7, #5
   17aa4:	lsl	r6, r6, #4
   17aa8:	sub	r7, r6, r7, lsr #5
   17aac:	sub	r1, r1, r7, lsl #2
   17ab0:	movw	r7, #65535	; 0xffff
   17ab4:	tst	r1, r7
   17ab8:	beq	17b44 <__assert_fail@plt+0x658c>
   17abc:	mov	r7, #58	; 0x3a
   17ac0:	strb	r7, [r0, #3]
   17ac4:	uxtb	r7, r1
   17ac8:	umull	r3, r7, r7, r3
   17acc:	orr	r2, r2, r7, lsr #3
   17ad0:	strb	r2, [r0, #4]
   17ad4:	lsr	r2, r7, #3
   17ad8:	add	r2, r2, r2, lsl #2
   17adc:	sub	r1, r1, r2, lsl #1
   17ae0:	orr	r1, r1, #48	; 0x30
   17ae4:	strb	r1, [r0, #5]
   17ae8:	add	r0, r0, #6
   17aec:	b	17b48 <__assert_fail@plt+0x6590>
   17af0:	movw	r1, #7739	; 0x1e3b
   17af4:	mov	r0, #0
   17af8:	mov	r2, #5
   17afc:	movt	r1, #2
   17b00:	bl	11318 <dcgettext@plt>
   17b04:	bl	172b8 <__assert_fail@plt+0x5d00>
   17b08:	ldrb	r0, [sp, #312]	; 0x138
   17b0c:	movw	r8, #12704	; 0x31a0
   17b10:	movt	r8, #3
   17b14:	cmp	r0, #0
   17b18:	bne	17b74 <__assert_fail@plt+0x65bc>
   17b1c:	ldr	r0, [sp, #336]	; 0x150
   17b20:	cmp	r0, #0
   17b24:	bne	17b84 <__assert_fail@plt+0x65cc>
   17b28:	ldr	r6, [sp, #64]	; 0x40
   17b2c:	cmp	r6, #0
   17b30:	bne	17ce0 <__assert_fail@plt+0x6728>
   17b34:	ldr	r4, [r8]
   17b38:	movw	r1, #7893	; 0x1ed5
   17b3c:	movt	r1, #2
   17b40:	b	17b90 <__assert_fail@plt+0x65d8>
   17b44:	add	r0, r0, #3
   17b48:	mov	r5, sl
   17b4c:	mov	r1, #0
   17b50:	strb	r1, [r0]
   17b54:	sub	r1, fp, #348	; 0x15c
   17b58:	sub	r2, fp, #247	; 0xf7
   17b5c:	mov	r0, r8
   17b60:	bl	172b8 <__assert_fail@plt+0x5d00>
   17b64:	mov	r7, #1
   17b68:	cmp	r5, r9
   17b6c:	bne	18030 <__assert_fail@plt+0x6a78>
   17b70:	b	18038 <__assert_fail@plt+0x6a80>
   17b74:	ldr	r4, [r8]
   17b78:	movw	r1, #7756	; 0x1e4c
   17b7c:	movt	r1, #2
   17b80:	b	17b90 <__assert_fail@plt+0x65d8>
   17b84:	ldr	r4, [r8]
   17b88:	movw	r1, #7781	; 0x1e65
   17b8c:	movt	r1, #2
   17b90:	mov	r0, #0
   17b94:	mov	r2, #5
   17b98:	bl	11318 <dcgettext@plt>
   17b9c:	mov	r2, r0
   17ba0:	mov	r0, r4
   17ba4:	mov	r1, #1
   17ba8:	bl	114d4 <__fprintf_chk@plt>
   17bac:	ldr	r1, [sp, #324]	; 0x144
   17bb0:	ldr	r0, [sp, #336]	; 0x150
   17bb4:	cmp	r1, #0
   17bb8:	beq	17be8 <__assert_fail@plt+0x6630>
   17bbc:	cmp	r0, #0
   17bc0:	bne	17be8 <__assert_fail@plt+0x6630>
   17bc4:	ldr	r0, [sp, #180]	; 0xb4
   17bc8:	cmp	r0, #1
   17bcc:	blt	17d64 <__assert_fail@plt+0x67ac>
   17bd0:	ldr	r0, [r8]
   17bd4:	movw	r2, #7908	; 0x1ee4
   17bd8:	mov	r1, #1
   17bdc:	movt	r2, #2
   17be0:	bl	114d4 <__fprintf_chk@plt>
   17be4:	ldr	r0, [sp, #336]	; 0x150
   17be8:	cmp	r0, #0
   17bec:	beq	17d64 <__assert_fail@plt+0x67ac>
   17bf0:	ldr	r7, [sp, #184]	; 0xb8
   17bf4:	mov	r0, #43	; 0x2b
   17bf8:	mov	r4, r5
   17bfc:	movw	r3, #6975	; 0x1b3f
   17c00:	ldr	sl, [r8]
   17c04:	sub	r6, fp, #247	; 0xf7
   17c08:	mov	r2, #27
   17c0c:	movt	r3, #2
   17c10:	cmp	r7, #0
   17c14:	movwmi	r0, #45	; 0x2d
   17c18:	str	r0, [sp]
   17c1c:	movw	r0, #46021	; 0xb3c5
   17c20:	movt	r0, #37282	; 0x91a2
   17c24:	smmla	r0, r7, r0, r7
   17c28:	asr	r1, r0, #11
   17c2c:	add	r5, r1, r0, lsr #31
   17c30:	mov	r1, #1
   17c34:	cmp	r5, #0
   17c38:	mov	r0, r5
   17c3c:	rsbmi	r0, r5, #0
   17c40:	str	r0, [sp, #4]
   17c44:	mov	r0, r6
   17c48:	bl	11498 <__sprintf_chk@plt>
   17c4c:	mov	r1, #3600	; 0xe10
   17c50:	mls	r1, r5, r1, r7
   17c54:	mov	r5, r4
   17c58:	cmp	r1, #0
   17c5c:	beq	17d4c <__assert_fail@plt+0x6794>
   17c60:	add	r0, r6, r0
   17c64:	mov	r2, #58	; 0x3a
   17c68:	rsbmi	r1, r1, #0
   17c6c:	mov	ip, #48	; 0x30
   17c70:	strb	r2, [r0]
   17c74:	movw	r2, #33205	; 0x81b5
   17c78:	uxth	r3, r1
   17c7c:	movt	r2, #6990	; 0x1b4e
   17c80:	umull	r2, r7, r3, r2
   17c84:	add	r7, ip, r7, lsr #6
   17c88:	strb	r7, [r0, #1]
   17c8c:	movw	r7, #34953	; 0x8889
   17c90:	movt	r7, #34952	; 0x8888
   17c94:	umull	r3, r7, r3, r7
   17c98:	movw	r3, #52429	; 0xcccd
   17c9c:	movt	r3, #52428	; 0xcccc
   17ca0:	ubfx	r6, r7, #5, #8
   17ca4:	umull	r5, r2, r6, r3
   17ca8:	lsr	r2, r2, #3
   17cac:	add	r2, r2, r2, lsl #2
   17cb0:	sub	r2, r6, r2, lsl #1
   17cb4:	orr	r2, r2, #48	; 0x30
   17cb8:	strb	r2, [r0, #2]
   17cbc:	lsr	r2, r7, #5
   17cc0:	lsl	r2, r2, #4
   17cc4:	sub	r2, r2, r7, lsr #5
   17cc8:	sub	r1, r1, r2, lsl #2
   17ccc:	movw	r2, #65535	; 0xffff
   17cd0:	tst	r1, r2
   17cd4:	bne	17d10 <__assert_fail@plt+0x6758>
   17cd8:	add	r0, r0, #3
   17cdc:	b	17d40 <__assert_fail@plt+0x6788>
   17ce0:	cmp	r5, r9
   17ce4:	bne	1816c <__assert_fail@plt+0x6bb4>
   17ce8:	movw	r1, #7828	; 0x1e94
   17cec:	mov	r0, r6
   17cf0:	movt	r1, #2
   17cf4:	bl	112a0 <strcmp@plt>
   17cf8:	ldr	r4, [r8]
   17cfc:	cmp	r0, #0
   17d00:	bne	1822c <__assert_fail@plt+0x6c74>
   17d04:	movw	r1, #7833	; 0x1e99
   17d08:	movt	r1, #2
   17d0c:	b	17b90 <__assert_fail@plt+0x65d8>
   17d10:	mov	r2, #58	; 0x3a
   17d14:	strb	r2, [r0, #3]
   17d18:	uxtb	r2, r1
   17d1c:	umull	r2, r3, r2, r3
   17d20:	orr	r2, ip, r3, lsr #3
   17d24:	strb	r2, [r0, #4]
   17d28:	lsr	r2, r3, #3
   17d2c:	add	r2, r2, r2, lsl #2
   17d30:	sub	r1, r1, r2, lsl #1
   17d34:	orr	r1, r1, #48	; 0x30
   17d38:	strb	r1, [r0, #5]
   17d3c:	add	r0, r0, #6
   17d40:	mov	r5, r4
   17d44:	mov	r1, #0
   17d48:	strb	r1, [r0]
   17d4c:	movw	r2, #7914	; 0x1eea
   17d50:	sub	r3, fp, #247	; 0xf7
   17d54:	mov	r0, sl
   17d58:	mov	r1, #1
   17d5c:	movt	r2, #2
   17d60:	bl	114d4 <__fprintf_chk@plt>
   17d64:	ldr	r1, [r8]
   17d68:	mov	r0, #10
   17d6c:	bl	11528 <fputc@plt>
   17d70:	ldrb	r0, [sp, #312]	; 0x138
   17d74:	cmp	r0, #0
   17d78:	bne	177a0 <__assert_fail@plt+0x61e8>
   17d7c:	ldr	r1, [sp, #324]	; 0x144
   17d80:	ldr	r7, [sp, #336]	; 0x150
   17d84:	ldr	r0, [sp, #316]	; 0x13c
   17d88:	ldr	r2, [sp, #320]	; 0x140
   17d8c:	ldr	r3, [sp, #328]	; 0x148
   17d90:	mov	r8, r5
   17d94:	ldrb	r5, [sp, #341]	; 0x155
   17d98:	add	r7, r7, r1
   17d9c:	ldr	r1, [sp, #332]	; 0x14c
   17da0:	orr	r6, r0, r1
   17da4:	orr	r2, r6, r2
   17da8:	orr	r2, r2, r3
   17dac:	orr	r2, r2, r7
   17db0:	cmp	r2, #2
   17db4:	blt	17e10 <__assert_fail@plt+0x6858>
   17db8:	mov	r7, #0
   17dbc:	cmp	r5, #0
   17dc0:	beq	17ef8 <__assert_fail@plt+0x6940>
   17dc4:	cmp	r1, #2
   17dc8:	mov	r5, r8
   17dcc:	blt	17e94 <__assert_fail@plt+0x68dc>
   17dd0:	movw	r0, #7920	; 0x1ef0
   17dd4:	movt	r0, #2
   17dd8:	bl	172b8 <__assert_fail@plt+0x5d00>
   17ddc:	ldr	r0, [sp, #316]	; 0x13c
   17de0:	cmp	r0, #2
   17de4:	bge	17e9c <__assert_fail@plt+0x68e4>
   17de8:	ldr	r0, [sp, #320]	; 0x140
   17dec:	cmp	r0, #2
   17df0:	blt	17eb4 <__assert_fail@plt+0x68fc>
   17df4:	movw	r0, #7986	; 0x1f32
   17df8:	movt	r0, #2
   17dfc:	bl	172b8 <__assert_fail@plt+0x5d00>
   17e00:	ldr	r0, [sp, #328]	; 0x148
   17e04:	cmp	r0, #2
   17e08:	bge	17ec0 <__assert_fail@plt+0x6908>
   17e0c:	b	17ecc <__assert_fail@plt+0x6914>
   17e10:	ldr	r0, [sp, #108]	; 0x6c
   17e14:	mvn	sl, #0
   17e18:	ldrd	r6, [r0]
   17e1c:	cmp	r7, #0
   17e20:	bmi	17f08 <__assert_fail@plt+0x6950>
   17e24:	add	r0, r0, #8
   17e28:	ldr	r0, [r0]
   17e2c:	cmp	r0, #2
   17e30:	bne	17f28 <__assert_fail@plt+0x6970>
   17e34:	subs	r1, r6, #69	; 0x45
   17e38:	mov	r0, #0
   17e3c:	sbcs	r1, r7, #0
   17e40:	movw	r1, #1900	; 0x76c
   17e44:	movwlt	r0, #1
   17e48:	cmp	r0, #0
   17e4c:	movwne	r1, #2000	; 0x7d0
   17e50:	adds	r9, r1, r6
   17e54:	adc	r4, r7, #0
   17e58:	cmp	r5, #0
   17e5c:	beq	17e88 <__assert_fail@plt+0x68d0>
   17e60:	movw	r1, #9569	; 0x2561
   17e64:	mov	r0, #0
   17e68:	mov	r2, #5
   17e6c:	movt	r1, #2
   17e70:	bl	11318 <dcgettext@plt>
   17e74:	mov	r2, r6
   17e78:	mov	r3, r7
   17e7c:	str	r9, [sp]
   17e80:	str	r4, [sp, #4]
   17e84:	bl	172b8 <__assert_fail@plt+0x5d00>
   17e88:	cmn	r4, #1
   17e8c:	bgt	17f30 <__assert_fail@plt+0x6978>
   17e90:	b	17f10 <__assert_fail@plt+0x6958>
   17e94:	cmp	r0, #2
   17e98:	blt	17de8 <__assert_fail@plt+0x6830>
   17e9c:	movw	r0, #7953	; 0x1f11
   17ea0:	movt	r0, #2
   17ea4:	bl	172b8 <__assert_fail@plt+0x5d00>
   17ea8:	ldr	r0, [sp, #320]	; 0x140
   17eac:	cmp	r0, #2
   17eb0:	bge	17df4 <__assert_fail@plt+0x683c>
   17eb4:	ldr	r0, [sp, #328]	; 0x148
   17eb8:	cmp	r0, #2
   17ebc:	blt	17ecc <__assert_fail@plt+0x6914>
   17ec0:	movw	r0, #8019	; 0x1f53
   17ec4:	movt	r0, #2
   17ec8:	bl	172b8 <__assert_fail@plt+0x5d00>
   17ecc:	ldr	r0, [sp, #324]	; 0x144
   17ed0:	ldr	r1, [sp, #336]	; 0x150
   17ed4:	add	r0, r1, r0
   17ed8:	cmp	r0, #2
   17edc:	blt	18028 <__assert_fail@plt+0x6a70>
   17ee0:	movw	r0, #8063	; 0x1f7f
   17ee4:	movt	r0, #2
   17ee8:	bl	172b8 <__assert_fail@plt+0x5d00>
   17eec:	cmp	r5, r9
   17ef0:	bne	18030 <__assert_fail@plt+0x6a78>
   17ef4:	b	18038 <__assert_fail@plt+0x6a80>
   17ef8:	mov	r5, r8
   17efc:	cmp	r5, r9
   17f00:	bne	18030 <__assert_fail@plt+0x6a78>
   17f04:	b	18038 <__assert_fail@plt+0x6a80>
   17f08:	mov	r9, r6
   17f0c:	mov	r4, r7
   17f10:	movw	r0, #63636	; 0xf894
   17f14:	movt	r0, #65535	; 0xffff
   17f18:	subs	r0, r0, r9
   17f1c:	str	r0, [fp, #-156]	; 0xffffff64
   17f20:	sbc	r1, sl, r4
   17f24:	b	17f40 <__assert_fail@plt+0x6988>
   17f28:	mov	r9, r6
   17f2c:	mov	r4, r7
   17f30:	movw	r0, #1900	; 0x76c
   17f34:	subs	r0, r9, r0
   17f38:	sbc	r1, r4, #0
   17f3c:	str	r0, [fp, #-156]	; 0xffffff64
   17f40:	eor	r1, r1, r0, asr #31
   17f44:	clz	r0, r1
   17f48:	cmp	r1, #0
   17f4c:	lsr	r0, r0, #5
   17f50:	beq	17f98 <__assert_fail@plt+0x69e0>
   17f54:	cmp	r5, #0
   17f58:	mov	r5, r8
   17f5c:	beq	17f9c <__assert_fail@plt+0x69e4>
   17f60:	movw	r1, #9613	; 0x258d
   17f64:	mov	r0, #0
   17f68:	mov	r2, #5
   17f6c:	movt	r1, #2
   17f70:	bl	11318 <dcgettext@plt>
   17f74:	mov	r2, r9
   17f78:	mov	r3, r4
   17f7c:	bl	172b8 <__assert_fail@plt+0x5d00>
   17f80:	ldr	r9, [fp, #8]
   17f84:	ldrb	r0, [sp, #341]	; 0x155
   17f88:	mov	r7, #0
   17f8c:	cmp	r0, #0
   17f90:	bne	18010 <__assert_fail@plt+0x6a58>
   17f94:	b	18028 <__assert_fail@plt+0x6a70>
   17f98:	mov	r5, r8
   17f9c:	ldr	r9, [fp, #8]
   17fa0:	cmp	r0, #0
   17fa4:	beq	18000 <__assert_fail@plt+0x6a48>
   17fa8:	ldr	r0, [sp, #104]	; 0x68
   17fac:	mov	r7, #0
   17fb0:	mov	r6, #0
   17fb4:	mov	r2, #0
   17fb8:	ldm	r0, {r0, r3}
   17fbc:	cmn	r3, #1
   17fc0:	movwgt	r7, #1
   17fc4:	subs	r0, r0, #1
   17fc8:	sbc	r1, r3, #0
   17fcc:	str	r0, [fp, #-160]	; 0xffffff60
   17fd0:	cmn	r1, #1
   17fd4:	movwgt	r6, #1
   17fd8:	subs	r7, r7, r6
   17fdc:	movwne	r7, #1
   17fe0:	cmp	r3, #0
   17fe4:	movwmi	r2, #1
   17fe8:	tst	r2, r7
   17fec:	asreq	r2, r0, #31
   17ff0:	eoreq	r0, r0, r0
   17ff4:	eoreq	r1, r1, r2
   17ff8:	orrseq	r0, r0, r1
   17ffc:	beq	18050 <__assert_fail@plt+0x6a98>
   18000:	ldrb	r0, [sp, #341]	; 0x155
   18004:	mov	r7, #0
   18008:	cmp	r0, #0
   1800c:	beq	18028 <__assert_fail@plt+0x6a70>
   18010:	movw	r1, #8101	; 0x1fa5
   18014:	mov	r0, #0
   18018:	mov	r2, #5
   1801c:	movt	r1, #2
   18020:	bl	11318 <dcgettext@plt>
   18024:	bl	172b8 <__assert_fail@plt+0x5d00>
   18028:	cmp	r5, r9
   1802c:	beq	18038 <__assert_fail@plt+0x6a80>
   18030:	mov	r0, r5
   18034:	bl	1ccd0 <__assert_fail@plt+0xb718>
   18038:	ldr	r5, [sp, #112]	; 0x70
   1803c:	mov	r0, r5
   18040:	bl	1e260 <__assert_fail@plt+0xcca8>
   18044:	mov	r0, r7
   18048:	sub	sp, fp, #28
   1804c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18050:	ldr	r0, [sp, #100]	; 0x64
   18054:	ldrd	r0, [r0]
   18058:	teq	r1, r0, asr #31
   1805c:	str	r0, [fp, #-164]	; 0xffffff5c
   18060:	bne	18000 <__assert_fail@plt+0x6a48>
   18064:	ldr	r0, [sp, #332]	; 0x14c
   18068:	cmp	r0, #0
   1806c:	bne	1808c <__assert_fail@plt+0x6ad4>
   18070:	ldrb	r1, [sp, #313]	; 0x139
   18074:	cmp	r1, #0
   18078:	beq	18268 <__assert_fail@plt+0x6cb0>
   1807c:	ldr	r1, [sp, #316]	; 0x13c
   18080:	ldr	r2, [sp, #320]	; 0x140
   18084:	orrs	r1, r2, r1
   18088:	bne	18268 <__assert_fail@plt+0x6cb0>
   1808c:	ldr	r1, [sp, #96]	; 0x60
   18090:	ldrd	r2, [r1]
   18094:	ldr	r1, [sp, #188]	; 0xbc
   18098:	cmp	r1, #0
   1809c:	beq	1817c <__assert_fail@plt+0x6bc4>
   180a0:	cmp	r1, #1
   180a4:	bne	18210 <__assert_fail@plt+0x6c58>
   180a8:	eor	r7, r2, #12
   180ac:	orrs	r7, r7, r3
   180b0:	mvn	r7, #0
   180b4:	movweq	r7, #12
   180b8:	subs	r6, r2, #1
   180bc:	sbc	r3, r3, #0
   180c0:	subs	r6, r6, #11
   180c4:	sbcs	r3, r3, #0
   180c8:	addcc	r7, r2, #12
   180cc:	mov	r2, r7
   180d0:	cmn	r2, #1
   180d4:	str	r2, [fp, #-168]	; 0xffffff58
   180d8:	ble	181a8 <__assert_fail@plt+0x6bf0>
   180dc:	ldr	r1, [sp, #92]	; 0x5c
   180e0:	ldr	r2, [sp, #248]	; 0xf8
   180e4:	ldr	r1, [r1]
   180e8:	str	r2, [fp, #-176]	; 0xffffff50
   180ec:	str	r1, [fp, #-172]	; 0xffffff54
   180f0:	ldrb	r1, [sp, #341]	; 0x155
   180f4:	cmp	r1, #0
   180f8:	beq	18294 <__assert_fail@plt+0x6cdc>
   180fc:	movw	r2, #8215	; 0x2017
   18100:	movw	r1, #8169	; 0x1fe9
   18104:	cmp	r0, #0
   18108:	mov	r0, #0
   1810c:	movt	r2, #2
   18110:	movt	r1, #2
   18114:	moveq	r1, r2
   18118:	mov	r2, #5
   1811c:	bl	11318 <dcgettext@plt>
   18120:	sub	r2, fp, #176	; 0xb0
   18124:	mov	r4, r0
   18128:	movw	r3, #9644	; 0x25ac
   1812c:	sub	r6, fp, #348	; 0x15c
   18130:	ldm	r2, {r0, r1, r2}
   18134:	movt	r3, #2
   18138:	str	r2, [sp, #4]
   1813c:	str	r1, [sp, #8]
   18140:	mov	r1, #100	; 0x64
   18144:	mov	r2, #1
   18148:	str	r3, [sp]
   1814c:	mov	r3, #100	; 0x64
   18150:	str	r0, [sp, #12]
   18154:	mov	r0, r6
   18158:	bl	115ac <__snprintf_chk@plt>
   1815c:	mov	r0, r4
   18160:	mov	r1, r6
   18164:	bl	172b8 <__assert_fail@plt+0x5d00>
   18168:	b	18294 <__assert_fail@plt+0x6cdc>
   1816c:	ldr	r4, [r8]
   18170:	movw	r1, #7805	; 0x1e7d
   18174:	movt	r1, #2
   18178:	b	18234 <__assert_fail@plt+0x6c7c>
   1817c:	eor	r7, r2, #12
   18180:	orrs	r7, r7, r3
   18184:	mvnne	r7, #0
   18188:	subs	r6, r2, #1
   1818c:	sbc	r3, r3, #0
   18190:	subs	r6, r6, #11
   18194:	sbcs	r3, r3, #0
   18198:	movcs	r2, r7
   1819c:	cmn	r2, #1
   181a0:	str	r2, [fp, #-168]	; 0xffffff58
   181a4:	bgt	180dc <__assert_fail@plt+0x6b24>
   181a8:	ldrb	r0, [sp, #341]	; 0x155
   181ac:	cmp	r0, #0
   181b0:	beq	18ce4 <__assert_fail@plt+0x772c>
   181b4:	movw	r0, #6892	; 0x1aec
   181b8:	movw	r2, #9721	; 0x25f9
   181bc:	cmp	r1, #1
   181c0:	movw	r4, #8138	; 0x1fca
   181c4:	mov	r7, #0
   181c8:	movt	r0, #2
   181cc:	movt	r2, #2
   181d0:	movt	r4, #2
   181d4:	moveq	r2, r0
   181d8:	cmp	r1, #0
   181dc:	movw	r1, #8141	; 0x1fcd
   181e0:	mov	r0, #0
   181e4:	movt	r1, #2
   181e8:	movne	r4, r2
   181ec:	mov	r2, #5
   181f0:	bl	11318 <dcgettext@plt>
   181f4:	ldr	r1, [sp, #96]	; 0x60
   181f8:	str	r4, [sp]
   181fc:	ldrd	r2, [r1]
   18200:	bl	172b8 <__assert_fail@plt+0x5d00>
   18204:	cmp	r5, r9
   18208:	bne	18030 <__assert_fail@plt+0x6a78>
   1820c:	b	18038 <__assert_fail@plt+0x6a80>
   18210:	subs	r7, r2, #24
   18214:	sbcs	r3, r3, #0
   18218:	mvncs	r2, #0
   1821c:	cmn	r2, #1
   18220:	str	r2, [fp, #-168]	; 0xffffff58
   18224:	bgt	180dc <__assert_fail@plt+0x6b24>
   18228:	b	181a8 <__assert_fail@plt+0x6bf0>
   1822c:	movw	r1, #7867	; 0x1ebb
   18230:	movt	r1, #2
   18234:	mov	r0, #0
   18238:	mov	r2, #5
   1823c:	bl	11318 <dcgettext@plt>
   18240:	mov	r2, r0
   18244:	mov	r0, r4
   18248:	mov	r1, #1
   1824c:	mov	r3, r6
   18250:	bl	114d4 <__fprintf_chk@plt>
   18254:	ldr	r1, [sp, #324]	; 0x144
   18258:	ldr	r0, [sp, #336]	; 0x150
   1825c:	cmp	r1, #0
   18260:	bne	17bbc <__assert_fail@plt+0x6604>
   18264:	b	17be8 <__assert_fail@plt+0x6630>
   18268:	mov	r0, #0
   1826c:	str	r0, [sp, #252]	; 0xfc
   18270:	str	r0, [fp, #-168]	; 0xffffff58
   18274:	str	r0, [fp, #-172]	; 0xffffff54
   18278:	str	r0, [fp, #-176]	; 0xffffff50
   1827c:	ldrb	r0, [sp, #341]	; 0x155
   18280:	cmp	r0, #0
   18284:	beq	18294 <__assert_fail@plt+0x6cdc>
   18288:	movw	r0, #8259	; 0x2043
   1828c:	movt	r0, #2
   18290:	bl	172b8 <__assert_fail@plt+0x5d00>
   18294:	ldr	r0, [sp, #316]	; 0x13c
   18298:	ldr	r1, [sp, #320]	; 0x140
   1829c:	ldr	r2, [sp, #332]	; 0x14c
   182a0:	orr	r0, r1, r0
   182a4:	orrs	r0, r0, r2
   182a8:	mvnne	r0, #0
   182ac:	strne	r0, [fp, #-144]	; 0xffffff70
   182b0:	ldr	r0, [sp, #324]	; 0x144
   182b4:	cmp	r0, #0
   182b8:	beq	182c8 <__assert_fail@plt+0x6d10>
   182bc:	ldr	r0, [sp, #180]	; 0xb4
   182c0:	str	r0, [fp, #-144]	; 0xffffff70
   182c4:	b	182cc <__assert_fail@plt+0x6d14>
   182c8:	ldr	r0, [fp, #-144]	; 0xffffff70
   182cc:	str	r0, [fp, #-188]	; 0xffffff44
   182d0:	mvn	r0, #0
   182d4:	sub	r1, fp, #176	; 0xb0
   182d8:	str	r0, [fp, #-152]	; 0xffffff68
   182dc:	mov	r0, r8
   182e0:	ldr	r4, [fp, #-176]	; 0xffffff50
   182e4:	ldr	sl, [fp, #-172]	; 0xffffff54
   182e8:	ldr	r7, [fp, #-168]	; 0xffffff58
   182ec:	ldr	r5, [fp, #-164]	; 0xffffff5c
   182f0:	ldr	r9, [fp, #-160]	; 0xffffff60
   182f4:	ldr	r6, [fp, #-156]	; 0xffffff64
   182f8:	str	r4, [fp, #-220]	; 0xffffff24
   182fc:	str	sl, [fp, #-216]	; 0xffffff28
   18300:	str	r7, [fp, #-212]	; 0xffffff2c
   18304:	str	r5, [fp, #-208]	; 0xffffff30
   18308:	str	r9, [fp, #-204]	; 0xffffff34
   1830c:	str	r6, [fp, #-200]	; 0xffffff38
   18310:	bl	1d0ec <__assert_fail@plt+0xbb34>
   18314:	mov	ip, r0
   18318:	ldr	r0, [fp, #-152]	; 0xffffff68
   1831c:	cmp	r0, #0
   18320:	bmi	18364 <__assert_fail@plt+0x6dac>
   18324:	sub	r3, fp, #176	; 0xb0
   18328:	ldm	r3, {r0, r1, r2, r3}
   1832c:	eor	r1, r1, sl
   18330:	eor	r0, r0, r4
   18334:	orr	r0, r1, r0
   18338:	eor	r1, r2, r7
   1833c:	orr	r0, r0, r1
   18340:	eor	r1, r3, r5
   18344:	orr	r0, r0, r1
   18348:	ldr	r1, [fp, #-160]	; 0xffffff60
   1834c:	eor	r1, r1, r9
   18350:	orr	r0, r0, r1
   18354:	ldr	r1, [fp, #-156]	; 0xffffff64
   18358:	eor	r1, r1, r6
   1835c:	orrs	r0, r0, r1
   18360:	beq	185d4 <__assert_fail@plt+0x701c>
   18364:	ldr	sl, [sp, #336]	; 0x150
   18368:	ldr	r9, [fp, #8]
   1836c:	cmp	sl, #0
   18370:	beq	18684 <__assert_fail@plt+0x70cc>
   18374:	ldr	r5, [sp, #184]	; 0xb8
   18378:	mov	r0, #88	; 0x58
   1837c:	movw	r3, #6975	; 0x1b3f
   18380:	mov	r2, #27
   18384:	strb	r0, [fp, #-130]	; 0xffffff7e
   18388:	movw	r0, #22616	; 0x5858
   1838c:	movt	r3, #2
   18390:	strh	r0, [fp, #-132]	; 0xffffff7c
   18394:	mov	r0, #43	; 0x2b
   18398:	cmp	r5, #0
   1839c:	movwmi	r0, #45	; 0x2d
   183a0:	str	r0, [sp]
   183a4:	movw	r0, #46021	; 0xb3c5
   183a8:	movt	r0, #37282	; 0x91a2
   183ac:	smmla	r0, r5, r0, r5
   183b0:	asr	r1, r0, #11
   183b4:	add	r4, r1, r0, lsr #31
   183b8:	mov	r1, #1
   183bc:	cmp	r4, #0
   183c0:	mov	r0, r4
   183c4:	rsbmi	r0, r4, #0
   183c8:	str	r0, [sp, #4]
   183cc:	sub	r0, fp, #132	; 0x84
   183d0:	add	r6, r0, #3
   183d4:	mov	r0, r6
   183d8:	bl	11498 <__sprintf_chk@plt>
   183dc:	mov	r1, #3600	; 0xe10
   183e0:	mls	r1, r4, r1, r5
   183e4:	mov	r5, r8
   183e8:	cmp	r1, #0
   183ec:	beq	184a8 <__assert_fail@plt+0x6ef0>
   183f0:	add	r0, r6, r0
   183f4:	mov	r2, #58	; 0x3a
   183f8:	rsbmi	r1, r1, #0
   183fc:	strb	r2, [r0]
   18400:	movw	r2, #33205	; 0x81b5
   18404:	uxth	r3, r1
   18408:	movt	r2, #6990	; 0x1b4e
   1840c:	umull	r2, r7, r3, r2
   18410:	mov	r2, #48	; 0x30
   18414:	add	r7, r2, r7, lsr #6
   18418:	strb	r7, [r0, #1]
   1841c:	movw	r7, #34953	; 0x8889
   18420:	movt	r7, #34952	; 0x8888
   18424:	umull	r3, r7, r3, r7
   18428:	movw	r3, #52429	; 0xcccd
   1842c:	movt	r3, #52428	; 0xcccc
   18430:	ubfx	r6, r7, #5, #8
   18434:	umull	r5, r4, r6, r3
   18438:	lsr	r5, r4, #3
   1843c:	add	r5, r5, r5, lsl #2
   18440:	sub	r6, r6, r5, lsl #1
   18444:	orr	r6, r6, #48	; 0x30
   18448:	strb	r6, [r0, #2]
   1844c:	lsr	r6, r7, #5
   18450:	add	r0, r0, #3
   18454:	lsl	r6, r6, #4
   18458:	sub	r7, r6, r7, lsr #5
   1845c:	sub	r1, r1, r7, lsl #2
   18460:	movw	r7, #65535	; 0xffff
   18464:	tst	r1, r7
   18468:	beq	1849c <__assert_fail@plt+0x6ee4>
   1846c:	mov	r7, #58	; 0x3a
   18470:	strb	r7, [r0]
   18474:	uxtb	r7, r1
   18478:	umull	r3, r7, r7, r3
   1847c:	orr	r2, r2, r7, lsr #3
   18480:	strb	r2, [r0, #1]
   18484:	lsr	r2, r7, #3
   18488:	add	r2, r2, r2, lsl #2
   1848c:	sub	r1, r1, r2, lsl #1
   18490:	orr	r1, r1, #48	; 0x30
   18494:	strb	r1, [r0, #2]
   18498:	add	r0, r0, #3
   1849c:	mov	r5, r8
   184a0:	mov	r1, #0
   184a4:	strb	r1, [r0]
   184a8:	sub	r0, fp, #132	; 0x84
   184ac:	bl	1cc34 <__assert_fail@plt+0xb67c>
   184b0:	cmp	r0, #0
   184b4:	beq	18644 <__assert_fail@plt+0x708c>
   184b8:	mov	r7, r0
   184bc:	mov	r0, #32
   184c0:	sub	r3, fp, #220	; 0xdc
   184c4:	sub	r1, fp, #176	; 0xb0
   184c8:	ldr	r2, [fp, #-200]	; 0xffffff38
   184cc:	vld1.32	{d16-d17}, [r3], r0
   184d0:	mov	r0, #24
   184d4:	mov	r4, r1
   184d8:	vst1.32	{d16-d17}, [r4], r0
   184dc:	mvn	r0, #0
   184e0:	str	r0, [r4]
   184e4:	ldr	r0, [fp, #-204]	; 0xffffff34
   184e8:	str	r0, [fp, #-160]	; 0xffffff60
   184ec:	ldr	r0, [r3]
   184f0:	str	r2, [fp, #-156]	; 0xffffff64
   184f4:	str	r0, [fp, #-144]	; 0xffffff70
   184f8:	mov	r0, r7
   184fc:	bl	1d0ec <__assert_fail@plt+0xbb34>
   18500:	ldr	r1, [r4]
   18504:	cmn	r1, #1
   18508:	ble	1867c <__assert_fail@plt+0x70c4>
   1850c:	str	r0, [sp, #104]	; 0x68
   18510:	ldr	r0, [fp, #-156]	; 0xffffff64
   18514:	str	sl, [sp, #108]	; 0x6c
   18518:	ldr	r9, [fp, #-172]	; 0xffffff54
   1851c:	ldr	r6, [fp, #-220]	; 0xffffff24
   18520:	ldr	r4, [fp, #-216]	; 0xffffff28
   18524:	ldr	r5, [fp, #-212]	; 0xffffff2c
   18528:	ldr	sl, [fp, #-208]	; 0xffffff30
   1852c:	str	r0, [sp, #100]	; 0x64
   18530:	ldr	r0, [fp, #-200]	; 0xffffff38
   18534:	str	r0, [sp, #96]	; 0x60
   18538:	ldr	r0, [fp, #-160]	; 0xffffff60
   1853c:	str	r0, [sp, #92]	; 0x5c
   18540:	ldr	r0, [fp, #-204]	; 0xffffff34
   18544:	str	r0, [sp, #84]	; 0x54
   18548:	ldr	r0, [fp, #-176]	; 0xffffff50
   1854c:	str	r0, [sp, #72]	; 0x48
   18550:	ldr	r0, [fp, #-168]	; 0xffffff58
   18554:	str	r0, [sp, #76]	; 0x4c
   18558:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1855c:	str	r0, [sp, #80]	; 0x50
   18560:	mov	r0, r7
   18564:	bl	1ccd0 <__assert_fail@plt+0xb718>
   18568:	ldr	r0, [sp, #72]	; 0x48
   1856c:	eor	r1, r9, r4
   18570:	ldr	r2, [sp, #84]	; 0x54
   18574:	ldr	r9, [fp, #8]
   18578:	eor	r0, r0, r6
   1857c:	orr	r0, r1, r0
   18580:	ldr	r1, [sp, #76]	; 0x4c
   18584:	eor	r1, r1, r5
   18588:	orr	r0, r0, r1
   1858c:	ldr	r1, [sp, #80]	; 0x50
   18590:	eor	r1, r1, sl
   18594:	ldr	sl, [sp, #108]	; 0x6c
   18598:	orr	r0, r0, r1
   1859c:	ldr	r1, [sp, #92]	; 0x5c
   185a0:	eor	r1, r1, r2
   185a4:	ldr	r2, [sp, #96]	; 0x60
   185a8:	orr	r0, r0, r1
   185ac:	ldr	r1, [sp, #100]	; 0x64
   185b0:	eor	r1, r1, r2
   185b4:	orrs	r0, r0, r1
   185b8:	bne	18684 <__assert_fail@plt+0x70cc>
   185bc:	ldr	ip, [sp, #104]	; 0x68
   185c0:	ldr	r0, [sp, #320]	; 0x140
   185c4:	mvn	r2, #0
   185c8:	cmp	r0, #0
   185cc:	bne	185e8 <__assert_fail@plt+0x7030>
   185d0:	b	19484 <__assert_fail@plt+0x7ecc>
   185d4:	ldr	r9, [fp, #8]
   185d8:	ldr	r0, [sp, #320]	; 0x140
   185dc:	mvn	r2, #0
   185e0:	cmp	r0, #0
   185e4:	beq	19484 <__assert_fail@plt+0x7ecc>
   185e8:	ldr	r0, [sp, #316]	; 0x13c
   185ec:	cmp	r0, #0
   185f0:	bne	19484 <__assert_fail@plt+0x7ecc>
   185f4:	ldr	r0, [sp, #52]	; 0x34
   185f8:	ldrd	r4, [r0]
   185fc:	subs	r0, r4, #1
   18600:	sbcs	r0, r5, #0
   18604:	blt	188d8 <__assert_fail@plt+0x7320>
   18608:	ldr	r0, [sp, #176]	; 0xb0
   1860c:	ldr	r1, [fp, #-152]	; 0xffffff68
   18610:	subs	r0, r1, r0
   18614:	movwne	r0, #1
   18618:	subs	r0, r4, r0
   1861c:	sbcs	r0, r5, #0
   18620:	bge	188e8 <__assert_fail@plt+0x7330>
   18624:	subs	r0, r4, #1
   18628:	sbcs	r0, r5, #0
   1862c:	blt	18cf4 <__assert_fail@plt+0x773c>
   18630:	ldr	r0, [sp, #176]	; 0xb0
   18634:	ldr	r1, [fp, #-152]	; 0xffffff68
   18638:	subs	r0, r1, r0
   1863c:	movwne	r0, #1
   18640:	b	18cf8 <__assert_fail@plt+0x7740>
   18644:	ldrb	r0, [sp, #341]	; 0x155
   18648:	cmp	r0, #0
   1864c:	beq	18ce4 <__assert_fail@plt+0x772c>
   18650:	movw	r1, #8311	; 0x2077
   18654:	mov	r0, #0
   18658:	mov	r2, #5
   1865c:	movt	r1, #2
   18660:	bl	11318 <dcgettext@plt>
   18664:	sub	r1, fp, #132	; 0x84
   18668:	bl	172b8 <__assert_fail@plt+0x5d00>
   1866c:	mov	r7, #0
   18670:	cmp	r5, r9
   18674:	bne	18030 <__assert_fail@plt+0x6a78>
   18678:	b	18038 <__assert_fail@plt+0x6a80>
   1867c:	mov	r0, r7
   18680:	bl	1ccd0 <__assert_fail@plt+0xb718>
   18684:	ldr	r2, [fp, #-168]	; 0xffffff58
   18688:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1868c:	ldrb	r1, [sp, #341]	; 0x155
   18690:	mov	r5, r8
   18694:	subs	r0, r3, r2
   18698:	movwne	r0, #1
   1869c:	cmp	r1, #0
   186a0:	beq	18ce4 <__assert_fail@plt+0x772c>
   186a4:	str	r2, [sp, #88]	; 0x58
   186a8:	ldr	r6, [fp, #-176]	; 0xffffff50
   186ac:	ldr	r1, [fp, #-172]	; 0xffffff54
   186b0:	ldr	r5, [fp, #-220]	; 0xffffff24
   186b4:	ldr	r2, [fp, #-216]	; 0xffffff28
   186b8:	str	r3, [sp, #84]	; 0x54
   186bc:	ldr	r3, [fp, #-164]	; 0xffffff5c
   186c0:	ldr	r7, [fp, #-208]	; 0xffffff30
   186c4:	str	sl, [sp, #108]	; 0x6c
   186c8:	str	r1, [sp, #72]	; 0x48
   186cc:	str	r2, [sp, #68]	; 0x44
   186d0:	eor	r1, r2, r1
   186d4:	eor	r2, r5, r6
   186d8:	str	r5, [sp, #60]	; 0x3c
   186dc:	str	r6, [sp, #64]	; 0x40
   186e0:	str	r3, [sp, #96]	; 0x60
   186e4:	str	r7, [sp, #92]	; 0x5c
   186e8:	mov	r6, #0
   186ec:	orr	r1, r2, r1
   186f0:	ldr	r2, [fp, #-204]	; 0xffffff34
   186f4:	clz	r1, r1
   186f8:	lsr	r1, r1, #5
   186fc:	and	r4, r1, r0
   18700:	sub	r0, r7, r3
   18704:	ldr	r1, [fp, #-200]	; 0xffffff38
   18708:	clz	r0, r0
   1870c:	str	r2, [sp, #100]	; 0x64
   18710:	lsr	r5, r0, #5
   18714:	ldr	r0, [fp, #-156]	; 0xffffff64
   18718:	str	r1, [sp, #76]	; 0x4c
   1871c:	str	r0, [sp, #80]	; 0x50
   18720:	eor	r0, r1, r0
   18724:	ldr	r1, [fp, #-160]	; 0xffffff60
   18728:	str	r1, [sp, #104]	; 0x68
   1872c:	eor	r1, r2, r1
   18730:	mov	r2, #5
   18734:	orr	r0, r1, r0
   18738:	movw	r1, #9659	; 0x25bb
   1873c:	clz	r0, r0
   18740:	movt	r1, #2
   18744:	str	r0, [sp, #56]	; 0x38
   18748:	mov	r0, #0
   1874c:	bl	11318 <dcgettext@plt>
   18750:	bl	172b8 <__assert_fail@plt+0x5d00>
   18754:	movw	r1, #9692	; 0x25dc
   18758:	mov	r0, #0
   1875c:	mov	r2, #5
   18760:	movt	r1, #2
   18764:	bl	11318 <dcgettext@plt>
   18768:	movw	r2, #10007	; 0x2717
   1876c:	sub	r9, fp, #132	; 0x84
   18770:	mov	r7, r0
   18774:	sub	r3, fp, #220	; 0xdc
   18778:	mov	r1, #100	; 0x64
   1877c:	str	r6, [sp]
   18780:	str	r6, [sp, #4]
   18784:	movt	r2, #2
   18788:	mov	r0, r9
   1878c:	bl	1e3cc <__assert_fail@plt+0xce14>
   18790:	cmp	r0, #99	; 0x63
   18794:	bgt	18938 <__assert_fail@plt+0x7380>
   18798:	mov	r6, r0
   1879c:	ldr	r0, [sp, #336]	; 0x150
   187a0:	cmp	r0, #0
   187a4:	beq	18938 <__assert_fail@plt+0x7380>
   187a8:	str	r4, [sp, #52]	; 0x34
   187ac:	ldr	r4, [sp, #184]	; 0xb8
   187b0:	mov	r0, #43	; 0x2b
   187b4:	str	r5, [sp, #48]	; 0x30
   187b8:	movw	r3, #6975	; 0x1b3f
   187bc:	add	sl, sp, #116	; 0x74
   187c0:	mov	r2, #27
   187c4:	str	r7, [sp, #44]	; 0x2c
   187c8:	movt	r3, #2
   187cc:	cmp	r4, #0
   187d0:	movwmi	r0, #45	; 0x2d
   187d4:	str	r0, [sp]
   187d8:	movw	r0, #46021	; 0xb3c5
   187dc:	movt	r0, #37282	; 0x91a2
   187e0:	smmla	r0, r4, r0, r4
   187e4:	asr	r1, r0, #11
   187e8:	add	r5, r1, r0, lsr #31
   187ec:	mov	r1, #1
   187f0:	cmp	r5, #0
   187f4:	mov	r0, r5
   187f8:	rsbmi	r0, r5, #0
   187fc:	str	r0, [sp, #4]
   18800:	mov	r0, sl
   18804:	bl	11498 <__sprintf_chk@plt>
   18808:	mov	r2, r0
   1880c:	mov	r0, #3600	; 0xe10
   18810:	rsb	r1, r6, #100	; 0x64
   18814:	mls	r3, r5, r0, r4
   18818:	ldr	r4, [sp, #52]	; 0x34
   1881c:	ldr	r5, [sp, #48]	; 0x30
   18820:	add	r0, r9, r6
   18824:	cmp	r3, #0
   18828:	beq	1891c <__assert_fail@plt+0x7364>
   1882c:	add	r2, sl, r2
   18830:	mov	r7, #58	; 0x3a
   18834:	rsbmi	r3, r3, #0
   18838:	mov	ip, #48	; 0x30
   1883c:	movw	lr, #52429	; 0xcccd
   18840:	strb	r7, [r2]
   18844:	movw	r7, #33205	; 0x81b5
   18848:	uxth	r6, r3
   1884c:	movt	lr, #52428	; 0xcccc
   18850:	movt	r7, #6990	; 0x1b4e
   18854:	umull	r7, r5, r6, r7
   18858:	add	r5, ip, r5, lsr #6
   1885c:	strb	r5, [r2, #1]
   18860:	movw	r5, #34953	; 0x8889
   18864:	movt	r5, #34952	; 0x8888
   18868:	umull	r6, r5, r6, r5
   1886c:	ubfx	r4, r5, #5, #8
   18870:	umull	r7, r6, r4, lr
   18874:	lsr	r6, r6, #3
   18878:	add	r6, r6, r6, lsl #2
   1887c:	sub	r4, r4, r6, lsl #1
   18880:	orr	r4, r4, #48	; 0x30
   18884:	strb	r4, [r2, #2]
   18888:	lsr	r4, r5, #5
   1888c:	lsl	r4, r4, #4
   18890:	sub	r4, r4, r5, lsr #5
   18894:	sub	r3, r3, r4, lsl #2
   18898:	movw	r4, #65535	; 0xffff
   1889c:	tst	r3, r4
   188a0:	beq	18908 <__assert_fail@plt+0x7350>
   188a4:	mov	r4, #58	; 0x3a
   188a8:	strb	r4, [r2, #3]
   188ac:	uxtb	r4, r3
   188b0:	umull	r7, r6, r4, lr
   188b4:	orr	r7, ip, r6, lsr #3
   188b8:	strb	r7, [r2, #4]
   188bc:	lsr	r7, r6, #3
   188c0:	add	r7, r7, r7, lsl #2
   188c4:	sub	r3, r3, r7, lsl #1
   188c8:	orr	r3, r3, #48	; 0x30
   188cc:	strb	r3, [r2, #5]
   188d0:	add	r2, r2, #6
   188d4:	b	1890c <__assert_fail@plt+0x7354>
   188d8:	mov	r0, #0
   188dc:	subs	r0, r4, r0
   188e0:	sbcs	r0, r5, #0
   188e4:	blt	18624 <__assert_fail@plt+0x706c>
   188e8:	subs	r0, r4, #1
   188ec:	sbcs	r0, r5, #0
   188f0:	blt	18d30 <__assert_fail@plt+0x7778>
   188f4:	ldr	r0, [sp, #176]	; 0xb0
   188f8:	ldr	r1, [fp, #-152]	; 0xffffff68
   188fc:	subs	r0, r1, r0
   18900:	movwne	r0, #1
   18904:	b	18d34 <__assert_fail@plt+0x777c>
   18908:	add	r2, r2, #3
   1890c:	ldr	r4, [sp, #52]	; 0x34
   18910:	ldr	r5, [sp, #48]	; 0x30
   18914:	mov	r3, #0
   18918:	strb	r3, [r2]
   1891c:	movw	r2, #10033	; 0x2731
   18920:	mvn	r3, #0
   18924:	movt	r2, #2
   18928:	stm	sp, {r2, sl}
   1892c:	mov	r2, #1
   18930:	bl	115ac <__snprintf_chk@plt>
   18934:	ldr	r7, [sp, #44]	; 0x2c
   18938:	ldr	r0, [sp, #56]	; 0x38
   1893c:	sub	sl, fp, #132	; 0x84
   18940:	and	r4, r4, r5
   18944:	mov	r1, sl
   18948:	lsr	r5, r0, #5
   1894c:	mov	r0, r7
   18950:	bl	172b8 <__assert_fail@plt+0x5d00>
   18954:	movw	r1, #9722	; 0x25fa
   18958:	mov	r0, #0
   1895c:	mov	r2, #5
   18960:	movt	r1, #2
   18964:	bl	11318 <dcgettext@plt>
   18968:	movw	r2, #10007	; 0x2717
   1896c:	mov	r7, r0
   18970:	mov	r0, #0
   18974:	sub	r3, fp, #176	; 0xb0
   18978:	mov	r1, #100	; 0x64
   1897c:	movt	r2, #2
   18980:	str	r0, [sp]
   18984:	str	r0, [sp, #4]
   18988:	mov	r0, sl
   1898c:	bl	1e3cc <__assert_fail@plt+0xce14>
   18990:	cmp	r0, #99	; 0x63
   18994:	bgt	18b08 <__assert_fail@plt+0x7550>
   18998:	mov	r6, r0
   1899c:	ldr	r0, [sp, #336]	; 0x150
   189a0:	cmp	r0, #0
   189a4:	beq	18b08 <__assert_fail@plt+0x7550>
   189a8:	str	r5, [sp, #56]	; 0x38
   189ac:	ldr	r5, [sp, #184]	; 0xb8
   189b0:	mov	r0, #43	; 0x2b
   189b4:	str	r4, [sp, #52]	; 0x34
   189b8:	movw	r3, #6975	; 0x1b3f
   189bc:	add	r9, sp, #116	; 0x74
   189c0:	mov	r2, #27
   189c4:	movt	r3, #2
   189c8:	cmp	r5, #0
   189cc:	movwmi	r0, #45	; 0x2d
   189d0:	str	r0, [sp]
   189d4:	movw	r0, #46021	; 0xb3c5
   189d8:	movt	r0, #37282	; 0x91a2
   189dc:	smmla	r0, r5, r0, r5
   189e0:	asr	r1, r0, #11
   189e4:	add	r4, r1, r0, lsr #31
   189e8:	mov	r1, #1
   189ec:	cmp	r4, #0
   189f0:	mov	r0, r4
   189f4:	rsbmi	r0, r4, #0
   189f8:	str	r0, [sp, #4]
   189fc:	mov	r0, r9
   18a00:	bl	11498 <__sprintf_chk@plt>
   18a04:	mov	r2, r0
   18a08:	mov	r0, #3600	; 0xe10
   18a0c:	rsb	r1, r6, #100	; 0x64
   18a10:	mls	r3, r4, r0, r5
   18a14:	ldr	r4, [sp, #52]	; 0x34
   18a18:	ldr	r5, [sp, #56]	; 0x38
   18a1c:	add	r0, sl, r6
   18a20:	cmp	r3, #0
   18a24:	beq	18af0 <__assert_fail@plt+0x7538>
   18a28:	mov	sl, r7
   18a2c:	add	r2, r9, r2
   18a30:	mov	r7, #58	; 0x3a
   18a34:	rsbmi	r3, r3, #0
   18a38:	mov	ip, #48	; 0x30
   18a3c:	movw	lr, #52429	; 0xcccd
   18a40:	strb	r7, [r2]
   18a44:	movw	r7, #33205	; 0x81b5
   18a48:	uxth	r6, r3
   18a4c:	movt	lr, #52428	; 0xcccc
   18a50:	movt	r7, #6990	; 0x1b4e
   18a54:	umull	r7, r5, r6, r7
   18a58:	add	r5, ip, r5, lsr #6
   18a5c:	strb	r5, [r2, #1]
   18a60:	movw	r5, #34953	; 0x8889
   18a64:	movt	r5, #34952	; 0x8888
   18a68:	umull	r6, r5, r6, r5
   18a6c:	ubfx	r4, r5, #5, #8
   18a70:	umull	r7, r6, r4, lr
   18a74:	lsr	r6, r6, #3
   18a78:	add	r6, r6, r6, lsl #2
   18a7c:	sub	r4, r4, r6, lsl #1
   18a80:	orr	r4, r4, #48	; 0x30
   18a84:	strb	r4, [r2, #2]
   18a88:	lsr	r4, r5, #5
   18a8c:	lsl	r4, r4, #4
   18a90:	sub	r4, r4, r5, lsr #5
   18a94:	sub	r3, r3, r4, lsl #2
   18a98:	movw	r4, #65535	; 0xffff
   18a9c:	tst	r3, r4
   18aa0:	beq	18ad8 <__assert_fail@plt+0x7520>
   18aa4:	mov	r4, #58	; 0x3a
   18aa8:	strb	r4, [r2, #3]
   18aac:	uxtb	r4, r3
   18ab0:	umull	r7, r6, r4, lr
   18ab4:	orr	r7, ip, r6, lsr #3
   18ab8:	strb	r7, [r2, #4]
   18abc:	lsr	r7, r6, #3
   18ac0:	add	r7, r7, r7, lsl #2
   18ac4:	sub	r3, r3, r7, lsl #1
   18ac8:	orr	r3, r3, #48	; 0x30
   18acc:	strb	r3, [r2, #5]
   18ad0:	add	r2, r2, #6
   18ad4:	b	18adc <__assert_fail@plt+0x7524>
   18ad8:	add	r2, r2, #3
   18adc:	ldr	r4, [sp, #52]	; 0x34
   18ae0:	ldr	r5, [sp, #56]	; 0x38
   18ae4:	mov	r3, #0
   18ae8:	mov	r7, sl
   18aec:	strb	r3, [r2]
   18af0:	movw	r2, #10033	; 0x2731
   18af4:	mvn	r3, #0
   18af8:	movt	r2, #2
   18afc:	stm	sp, {r2, r9}
   18b00:	mov	r2, #1
   18b04:	bl	115ac <__snprintf_chk@plt>
   18b08:	sub	r6, fp, #132	; 0x84
   18b0c:	mov	r0, r7
   18b10:	and	r5, r4, r5
   18b14:	mov	r1, r6
   18b18:	bl	172b8 <__assert_fail@plt+0x5d00>
   18b1c:	ldr	r2, [sp, #64]	; 0x40
   18b20:	ldr	r3, [sp, #60]	; 0x3c
   18b24:	movw	r0, #9721	; 0x25f9
   18b28:	movw	r1, #9811	; 0x2653
   18b2c:	ldr	r7, [sp, #96]	; 0x60
   18b30:	ldr	r4, [sp, #92]	; 0x5c
   18b34:	movt	r0, #2
   18b38:	movt	r1, #2
   18b3c:	cmp	r3, r2
   18b40:	mov	r2, r1
   18b44:	ldr	r3, [sp, #68]	; 0x44
   18b48:	moveq	r2, r0
   18b4c:	str	r2, [sp, #24]
   18b50:	ldr	r2, [sp, #72]	; 0x48
   18b54:	cmp	r3, r2
   18b58:	mov	r2, r1
   18b5c:	ldr	r3, [sp, #84]	; 0x54
   18b60:	moveq	r2, r0
   18b64:	str	r2, [sp, #20]
   18b68:	ldr	r2, [sp, #88]	; 0x58
   18b6c:	cmp	r3, r2
   18b70:	mov	r2, r1
   18b74:	ldr	r3, [sp, #100]	; 0x64
   18b78:	moveq	r2, r0
   18b7c:	cmp	r4, r7
   18b80:	str	r2, [sp, #16]
   18b84:	mov	r2, r1
   18b88:	moveq	r2, r0
   18b8c:	str	r2, [sp, #12]
   18b90:	ldr	r2, [sp, #104]	; 0x68
   18b94:	cmp	r3, r2
   18b98:	ldr	r2, [sp, #80]	; 0x50
   18b9c:	ldr	r3, [sp, #76]	; 0x4c
   18ba0:	moveq	r1, r0
   18ba4:	str	r1, [sp, #8]
   18ba8:	movw	r1, #9809	; 0x2651
   18bac:	movt	r1, #2
   18bb0:	cmp	r3, r2
   18bb4:	mov	r2, #1
   18bb8:	mov	r3, #100	; 0x64
   18bbc:	moveq	r1, r0
   18bc0:	movw	r0, #9752	; 0x2618
   18bc4:	movt	r0, #2
   18bc8:	str	r1, [sp, #4]
   18bcc:	mov	r1, #100	; 0x64
   18bd0:	str	r0, [sp]
   18bd4:	mov	r0, r6
   18bd8:	bl	115ac <__snprintf_chk@plt>
   18bdc:	ldr	r9, [fp, #8]
   18be0:	ldr	sl, [sp, #108]	; 0x6c
   18be4:	cmp	r0, #0
   18be8:	bmi	18c1c <__assert_fail@plt+0x7664>
   18bec:	cmp	r0, #99	; 0x63
   18bf0:	movcs	r0, #99	; 0x63
   18bf4:	mov	r1, r0
   18bf8:	cmp	r0, #1
   18bfc:	blt	18c14 <__assert_fail@plt+0x765c>
   18c00:	add	r0, r6, r1
   18c04:	ldrb	r2, [r0, #-1]
   18c08:	sub	r0, r1, #1
   18c0c:	cmp	r2, #32
   18c10:	beq	18bf4 <__assert_fail@plt+0x763c>
   18c14:	mov	r0, #0
   18c18:	strb	r0, [r6, r1]
   18c1c:	movw	r0, #9967	; 0x26ef
   18c20:	sub	r1, fp, #132	; 0x84
   18c24:	movt	r0, #2
   18c28:	bl	172b8 <__assert_fail@plt+0x5d00>
   18c2c:	movw	r1, #9814	; 0x2656
   18c30:	mov	r0, #0
   18c34:	mov	r2, #5
   18c38:	movt	r1, #2
   18c3c:	bl	11318 <dcgettext@plt>
   18c40:	bl	172b8 <__assert_fail@plt+0x5d00>
   18c44:	cmp	r5, #0
   18c48:	beq	18c64 <__assert_fail@plt+0x76ac>
   18c4c:	movw	r1, #9838	; 0x266e
   18c50:	mov	r0, #0
   18c54:	mov	r2, #5
   18c58:	movt	r1, #2
   18c5c:	bl	11318 <dcgettext@plt>
   18c60:	bl	172b8 <__assert_fail@plt+0x5d00>
   18c64:	cmp	r4, r7
   18c68:	mov	r5, r8
   18c6c:	beq	18c98 <__assert_fail@plt+0x76e0>
   18c70:	ldr	r0, [sp, #104]	; 0x68
   18c74:	ldr	r1, [sp, #100]	; 0x64
   18c78:	cmp	r1, r0
   18c7c:	beq	18c98 <__assert_fail@plt+0x76e0>
   18c80:	movw	r1, #9888	; 0x26a0
   18c84:	mov	r0, #0
   18c88:	mov	r2, #5
   18c8c:	movt	r1, #2
   18c90:	bl	11318 <dcgettext@plt>
   18c94:	bl	172b8 <__assert_fail@plt+0x5d00>
   18c98:	movw	r1, #9927	; 0x26c7
   18c9c:	mov	r0, #0
   18ca0:	mov	r2, #5
   18ca4:	movt	r1, #2
   18ca8:	bl	11318 <dcgettext@plt>
   18cac:	bl	172b8 <__assert_fail@plt+0x5d00>
   18cb0:	movw	r0, #9971	; 0x26f3
   18cb4:	movw	r1, #9990	; 0x2706
   18cb8:	cmp	sl, #0
   18cbc:	mov	r2, #5
   18cc0:	movt	r0, #2
   18cc4:	movt	r1, #2
   18cc8:	movne	r1, r0
   18ccc:	mov	r0, #0
   18cd0:	bl	11318 <dcgettext@plt>
   18cd4:	mov	r1, r0
   18cd8:	movw	r0, #9960	; 0x26e8
   18cdc:	movt	r0, #2
   18ce0:	bl	172b8 <__assert_fail@plt+0x5d00>
   18ce4:	mov	r7, #0
   18ce8:	cmp	r5, r9
   18cec:	bne	18030 <__assert_fail@plt+0x6a78>
   18cf0:	b	18038 <__assert_fail@plt+0x6a80>
   18cf4:	mov	r0, #0
   18cf8:	subs	r0, r4, r0
   18cfc:	sbc	r1, r5, #0
   18d00:	eor	r0, r0, r2
   18d04:	eor	r1, r1, r2
   18d08:	orrs	r0, r0, r1
   18d0c:	beq	18d84 <__assert_fail@plt+0x77cc>
   18d10:	subs	r0, r4, #1
   18d14:	sbcs	r0, r5, #0
   18d18:	blt	18d5c <__assert_fail@plt+0x77a4>
   18d1c:	ldr	r0, [sp, #176]	; 0xb0
   18d20:	ldr	r1, [fp, #-152]	; 0xffffff68
   18d24:	subs	r0, r1, r0
   18d28:	movwne	r0, #1
   18d2c:	b	18d60 <__assert_fail@plt+0x77a8>
   18d30:	mov	r0, #0
   18d34:	movw	r3, #37449	; 0x9249
   18d38:	movw	r2, #9362	; 0x2492
   18d3c:	subs	r0, r4, r0
   18d40:	movt	r3, #18724	; 0x4924
   18d44:	movt	r2, #4681	; 0x1249
   18d48:	sbc	r1, r5, #0
   18d4c:	subs	r0, r3, r0
   18d50:	sbcs	r0, r2, r1
   18d54:	bge	18d84 <__assert_fail@plt+0x77cc>
   18d58:	b	18e9c <__assert_fail@plt+0x78e4>
   18d5c:	mov	r0, #0
   18d60:	subs	r2, r4, r0
   18d64:	mov	r0, #0
   18d68:	mov	r1, #-2147483648	; 0x80000000
   18d6c:	sbc	r3, r5, #0
   18d70:	bl	20168 <__assert_fail@plt+0xebb0>
   18d74:	ldr	r9, [fp, #8]
   18d78:	subs	r0, r0, #7
   18d7c:	sbcs	r0, r1, #0
   18d80:	blt	18e9c <__assert_fail@plt+0x78e4>
   18d84:	rsbs	r0, r4, #0
   18d88:	rscs	r0, r5, #0
   18d8c:	bge	18da4 <__assert_fail@plt+0x77ec>
   18d90:	ldr	r1, [sp, #176]	; 0xb0
   18d94:	ldr	r0, [fp, #-152]	; 0xffffff68
   18d98:	subs	r2, r0, r1
   18d9c:	movwne	r2, #1
   18da0:	b	18db0 <__assert_fail@plt+0x77f8>
   18da4:	ldr	r0, [fp, #-152]	; 0xffffff68
   18da8:	ldr	r1, [sp, #176]	; 0xb0
   18dac:	mov	r2, #0
   18db0:	sub	r0, r1, r0
   18db4:	movw	r1, #9363	; 0x2493
   18db8:	subs	r2, r4, r2
   18dbc:	mov	r3, #7
   18dc0:	mov	r6, #0
   18dc4:	movt	r1, #37449	; 0x9249
   18dc8:	add	r0, r0, #7
   18dcc:	umull	r2, r3, r2, r3
   18dd0:	sbc	r7, r5, #0
   18dd4:	rsb	r7, r7, r7, lsl #3
   18dd8:	smmla	r1, r0, r1, r0
   18ddc:	add	r3, r3, r7
   18de0:	asr	r7, r1, #2
   18de4:	add	r1, r7, r1, lsr #31
   18de8:	sub	r1, r1, r1, lsl #3
   18dec:	add	r0, r0, r1
   18df0:	asr	r7, r0, #31
   18df4:	adds	r2, r0, r2
   18df8:	mov	r0, #0
   18dfc:	adc	r1, r7, r3
   18e00:	cmn	r1, #1
   18e04:	movwgt	r6, #1
   18e08:	cmn	r7, #1
   18e0c:	mov	r7, #0
   18e10:	movwgt	r7, #1
   18e14:	subs	r6, r7, r6
   18e18:	movwne	r6, #1
   18e1c:	cmn	r3, #1
   18e20:	mov	r3, #0
   18e24:	movwgt	r3, #1
   18e28:	sub	r3, r7, r3
   18e2c:	clz	r3, r3
   18e30:	lsr	r3, r3, #5
   18e34:	ands	r3, r3, r6
   18e38:	bne	18e9c <__assert_fail@plt+0x78e4>
   18e3c:	ldr	r7, [fp, #-164]	; 0xffffff5c
   18e40:	cmn	r1, #1
   18e44:	mov	r3, #0
   18e48:	mov	r6, #0
   18e4c:	movwgt	r3, #1
   18e50:	adds	r2, r2, r7
   18e54:	adc	r1, r1, r7, asr #31
   18e58:	asr	r7, r7, #31
   18e5c:	str	r2, [fp, #-164]	; 0xffffff5c
   18e60:	cmn	r1, #1
   18e64:	movwgt	r6, #1
   18e68:	subs	r6, r3, r6
   18e6c:	movwne	r6, #1
   18e70:	cmn	r7, #1
   18e74:	movwgt	r0, #1
   18e78:	sub	r0, r3, r0
   18e7c:	clz	r0, r0
   18e80:	lsr	r0, r0, #5
   18e84:	tst	r0, r6
   18e88:	asreq	r0, r2, #31
   18e8c:	eoreq	r2, r2, r2
   18e90:	eoreq	r0, r1, r0
   18e94:	orrseq	r0, r2, r0
   18e98:	beq	1912c <__assert_fail@plt+0x7b74>
   18e9c:	ldrb	r0, [sp, #341]	; 0x155
   18ea0:	cmp	r0, #0
   18ea4:	mov	r5, r8
   18ea8:	beq	18ce4 <__assert_fail@plt+0x772c>
   18eac:	movw	r1, #8341	; 0x2095
   18eb0:	mov	r0, #0
   18eb4:	mov	r2, #5
   18eb8:	mov	r4, #0
   18ebc:	movt	r1, #2
   18ec0:	bl	11318 <dcgettext@plt>
   18ec4:	ldrb	r1, [sp, #348]	; 0x15c
   18ec8:	str	r0, [sp, #108]	; 0x6c
   18ecc:	cmp	r1, #0
   18ed0:	beq	18f18 <__assert_fail@plt+0x7960>
   18ed4:	ldr	r0, [sp, #52]	; 0x34
   18ed8:	ldrd	r0, [r0]
   18edc:	adds	r2, r0, #1
   18ee0:	adc	r3, r1, #0
   18ee4:	rsbs	r2, r2, #13
   18ee8:	rscs	r2, r3, #0
   18eec:	bcc	18f2c <__assert_fail@plt+0x7974>
   18ef0:	movw	r2, #4736	; 0x1280
   18ef4:	mov	r3, #11
   18ef8:	movw	r1, #3686	; 0xe66
   18efc:	movt	r2, #2
   18f00:	movt	r1, #2
   18f04:	mla	r0, r0, r3, r2
   18f08:	str	r1, [sp]
   18f0c:	add	r0, r0, #11
   18f10:	str	r0, [sp, #4]
   18f14:	b	18f40 <__assert_fail@plt+0x7988>
   18f18:	strb	r4, [fp, #-132]	; 0xffffff7c
   18f1c:	ldr	r6, [sp, #176]	; 0xb0
   18f20:	cmp	r6, #0
   18f24:	bpl	18f64 <__assert_fail@plt+0x79ac>
   18f28:	b	18fb4 <__assert_fail@plt+0x79fc>
   18f2c:	str	r0, [sp, #8]
   18f30:	movw	r0, #6970	; 0x1b3a
   18f34:	str	r1, [sp, #12]
   18f38:	movt	r0, #2
   18f3c:	str	r0, [sp]
   18f40:	sub	r0, fp, #132	; 0x84
   18f44:	mov	r1, #100	; 0x64
   18f48:	mov	r2, #1
   18f4c:	mov	r3, #100	; 0x64
   18f50:	bl	115ac <__snprintf_chk@plt>
   18f54:	mov	r4, r0
   18f58:	ldr	r6, [sp, #176]	; 0xb0
   18f5c:	cmp	r6, #0
   18f60:	bmi	18fb4 <__assert_fail@plt+0x79fc>
   18f64:	cmp	r4, #99	; 0x63
   18f68:	bhi	18fb4 <__assert_fail@plt+0x79fc>
   18f6c:	cmp	r6, #6
   18f70:	bgt	18fb4 <__assert_fail@plt+0x79fc>
   18f74:	movw	r0, #4890	; 0x131a
   18f78:	movw	r1, #3685	; 0xe65
   18f7c:	cmp	r4, #0
   18f80:	mov	r2, #1
   18f84:	mvn	r3, #0
   18f88:	movt	r0, #2
   18f8c:	movt	r1, #2
   18f90:	add	r0, r0, r6, lsl #2
   18f94:	addeq	r1, r1, #1
   18f98:	str	r1, [sp]
   18f9c:	rsb	r1, r4, #100	; 0x64
   18fa0:	str	r0, [sp, #4]
   18fa4:	sub	r0, fp, #132	; 0x84
   18fa8:	add	r0, r0, r4
   18fac:	bl	115ac <__snprintf_chk@plt>
   18fb0:	ldr	r6, [sp, #176]	; 0xb0
   18fb4:	ldr	r0, [sp, #52]	; 0x34
   18fb8:	movw	r2, #10007	; 0x2717
   18fbc:	sub	r4, fp, #348	; 0x15c
   18fc0:	sub	r3, fp, #176	; 0xb0
   18fc4:	mov	r1, #100	; 0x64
   18fc8:	mov	r5, r8
   18fcc:	movt	r2, #2
   18fd0:	ldm	r0, {r7, sl}
   18fd4:	mov	r0, #0
   18fd8:	str	r0, [sp]
   18fdc:	str	r0, [sp, #4]
   18fe0:	mov	r0, r4
   18fe4:	bl	1e3cc <__assert_fail@plt+0xce14>
   18fe8:	cmp	r0, #99	; 0x63
   18fec:	bgt	191fc <__assert_fail@plt+0x7c44>
   18ff0:	mov	r9, r0
   18ff4:	ldr	r0, [sp, #336]	; 0x150
   18ff8:	cmp	r0, #0
   18ffc:	beq	191fc <__assert_fail@plt+0x7c44>
   19000:	ldr	r5, [sp, #184]	; 0xb8
   19004:	add	r0, sp, #96	; 0x60
   19008:	movw	r3, #6975	; 0x1b3f
   1900c:	mov	r2, #27
   19010:	stm	r0, {r6, r7, sl}
   19014:	mov	r0, #43	; 0x2b
   19018:	add	r6, sp, #116	; 0x74
   1901c:	movt	r3, #2
   19020:	cmp	r5, #0
   19024:	movwmi	r0, #45	; 0x2d
   19028:	str	r0, [sp]
   1902c:	movw	r0, #46021	; 0xb3c5
   19030:	movt	r0, #37282	; 0x91a2
   19034:	smmla	r0, r5, r0, r5
   19038:	asr	r1, r0, #11
   1903c:	add	sl, r1, r0, lsr #31
   19040:	mov	r1, #1
   19044:	cmp	sl, #0
   19048:	mov	r0, sl
   1904c:	rsbmi	r0, sl, #0
   19050:	str	r0, [sp, #4]
   19054:	mov	r0, r6
   19058:	bl	11498 <__sprintf_chk@plt>
   1905c:	mov	r2, r0
   19060:	mov	r0, #3600	; 0xe10
   19064:	sub	r4, fp, #348	; 0x15c
   19068:	rsb	r1, r9, #100	; 0x64
   1906c:	mls	r3, sl, r0, r5
   19070:	add	r0, r4, r9
   19074:	cmp	r3, #0
   19078:	beq	191d8 <__assert_fail@plt+0x7c20>
   1907c:	movw	r7, #33205	; 0x81b5
   19080:	add	r2, r6, r2
   19084:	mov	r4, #58	; 0x3a
   19088:	rsbmi	r3, r3, #0
   1908c:	mov	r9, r6
   19090:	mov	ip, #48	; 0x30
   19094:	movw	lr, #52429	; 0xcccd
   19098:	strb	r4, [r2]
   1909c:	uxth	r4, r3
   190a0:	movt	r7, #6990	; 0x1b4e
   190a4:	movt	lr, #52428	; 0xcccc
   190a8:	umull	r7, r6, r4, r7
   190ac:	add	r7, ip, r6, lsr #6
   190b0:	strb	r7, [r2, #1]
   190b4:	movw	r7, #34953	; 0x8889
   190b8:	movt	r7, #34952	; 0x8888
   190bc:	umull	r7, r6, r4, r7
   190c0:	ubfx	r7, r6, #5, #8
   190c4:	umull	r4, r5, r7, lr
   190c8:	lsr	r4, r5, #3
   190cc:	add	r4, r4, r4, lsl #2
   190d0:	sub	r4, r7, r4, lsl #1
   190d4:	orr	r4, r4, #48	; 0x30
   190d8:	strb	r4, [r2, #2]
   190dc:	lsr	r4, r6, #5
   190e0:	lsl	r4, r4, #4
   190e4:	sub	r4, r4, r6, lsr #5
   190e8:	sub	r3, r3, r4, lsl #2
   190ec:	movw	r4, #65535	; 0xffff
   190f0:	tst	r3, r4
   190f4:	beq	191c4 <__assert_fail@plt+0x7c0c>
   190f8:	mov	r4, #58	; 0x3a
   190fc:	strb	r4, [r2, #3]
   19100:	uxtb	r4, r3
   19104:	umull	r7, r6, r4, lr
   19108:	orr	r7, ip, r6, lsr #3
   1910c:	strb	r7, [r2, #4]
   19110:	lsr	r7, r6, #3
   19114:	add	r7, r7, r7, lsl #2
   19118:	sub	r3, r3, r7, lsl #1
   1911c:	orr	r3, r3, #48	; 0x30
   19120:	strb	r3, [r2, #5]
   19124:	add	r2, r2, #6
   19128:	b	191c8 <__assert_fail@plt+0x7c10>
   1912c:	mvn	r0, #0
   19130:	sub	r1, fp, #176	; 0xb0
   19134:	str	r0, [fp, #-144]	; 0xffffff70
   19138:	mov	r0, r8
   1913c:	bl	1d0ec <__assert_fail@plt+0xbb34>
   19140:	ldrb	r1, [sp, #341]	; 0x155
   19144:	cmn	r0, #1
   19148:	beq	1922c <__assert_fail@plt+0x7c74>
   1914c:	mov	sl, r0
   19150:	cmp	r1, #0
   19154:	beq	19240 <__assert_fail@plt+0x7c88>
   19158:	movw	r1, #8421	; 0x20e5
   1915c:	mov	r0, #0
   19160:	mov	r2, #5
   19164:	mov	r4, #0
   19168:	movt	r1, #2
   1916c:	bl	11318 <dcgettext@plt>
   19170:	mov	r9, r0
   19174:	ldrb	r0, [sp, #348]	; 0x15c
   19178:	cmp	r0, #0
   1917c:	beq	1924c <__assert_fail@plt+0x7c94>
   19180:	ldr	r0, [sp, #52]	; 0x34
   19184:	ldrd	r0, [r0]
   19188:	adds	r2, r0, #1
   1918c:	adc	r3, r1, #0
   19190:	rsbs	r2, r2, #13
   19194:	rscs	r2, r3, #0
   19198:	bcc	19260 <__assert_fail@plt+0x7ca8>
   1919c:	movw	r2, #4736	; 0x1280
   191a0:	mov	r3, #11
   191a4:	movw	r1, #3686	; 0xe66
   191a8:	movt	r2, #2
   191ac:	movt	r1, #2
   191b0:	mla	r0, r0, r3, r2
   191b4:	str	r1, [sp]
   191b8:	add	r0, r0, #11
   191bc:	str	r0, [sp, #4]
   191c0:	b	19274 <__assert_fail@plt+0x7cbc>
   191c4:	add	r2, r2, #3
   191c8:	mov	r3, #0
   191cc:	sub	r4, fp, #348	; 0x15c
   191d0:	mov	r6, r9
   191d4:	strb	r3, [r2]
   191d8:	movw	r2, #10033	; 0x2731
   191dc:	mvn	r3, #0
   191e0:	movt	r2, #2
   191e4:	stm	sp, {r2, r6}
   191e8:	mov	r2, #1
   191ec:	bl	115ac <__snprintf_chk@plt>
   191f0:	add	sl, sp, #96	; 0x60
   191f4:	mov	r5, r8
   191f8:	ldm	sl, {r6, r7, sl}
   191fc:	ldr	r0, [sp, #108]	; 0x6c
   19200:	sub	r1, fp, #132	; 0x84
   19204:	mov	r2, r7
   19208:	mov	r3, sl
   1920c:	str	r6, [sp]
   19210:	str	r4, [sp, #4]
   19214:	bl	172b8 <__assert_fail@plt+0x5d00>
   19218:	ldr	r9, [fp, #8]
   1921c:	mov	r7, #0
   19220:	cmp	r5, r9
   19224:	bne	18030 <__assert_fail@plt+0x6a78>
   19228:	b	18038 <__assert_fail@plt+0x6a80>
   1922c:	ldr	r9, [fp, #8]
   19230:	cmp	r1, #0
   19234:	mov	r5, r8
   19238:	bne	18eac <__assert_fail@plt+0x78f4>
   1923c:	b	18ce4 <__assert_fail@plt+0x772c>
   19240:	ldr	r9, [fp, #8]
   19244:	mov	ip, sl
   19248:	b	19840 <__assert_fail@plt+0x8288>
   1924c:	strb	r4, [fp, #-132]	; 0xffffff7c
   19250:	ldr	r0, [sp, #176]	; 0xb0
   19254:	cmp	r0, #0
   19258:	bpl	19298 <__assert_fail@plt+0x7ce0>
   1925c:	b	192e4 <__assert_fail@plt+0x7d2c>
   19260:	str	r0, [sp, #8]
   19264:	movw	r0, #6970	; 0x1b3a
   19268:	str	r1, [sp, #12]
   1926c:	movt	r0, #2
   19270:	str	r0, [sp]
   19274:	sub	r0, fp, #132	; 0x84
   19278:	mov	r1, #100	; 0x64
   1927c:	mov	r2, #1
   19280:	mov	r3, #100	; 0x64
   19284:	bl	115ac <__snprintf_chk@plt>
   19288:	mov	r4, r0
   1928c:	ldr	r0, [sp, #176]	; 0xb0
   19290:	cmp	r0, #0
   19294:	bmi	192e4 <__assert_fail@plt+0x7d2c>
   19298:	cmp	r4, #99	; 0x63
   1929c:	bhi	192e4 <__assert_fail@plt+0x7d2c>
   192a0:	cmp	r0, #6
   192a4:	bgt	192e4 <__assert_fail@plt+0x7d2c>
   192a8:	movw	r1, #4890	; 0x131a
   192ac:	cmp	r4, #0
   192b0:	mov	r2, #1
   192b4:	mvn	r3, #0
   192b8:	movt	r1, #2
   192bc:	add	r0, r1, r0, lsl #2
   192c0:	movw	r1, #3685	; 0xe65
   192c4:	movt	r1, #2
   192c8:	str	r0, [sp, #4]
   192cc:	sub	r0, fp, #132	; 0x84
   192d0:	addeq	r1, r1, #1
   192d4:	add	r0, r0, r4
   192d8:	str	r1, [sp]
   192dc:	rsb	r1, r4, #100	; 0x64
   192e0:	bl	115ac <__snprintf_chk@plt>
   192e4:	movw	r2, #10007	; 0x2717
   192e8:	mov	r0, #0
   192ec:	sub	r4, fp, #348	; 0x15c
   192f0:	sub	r3, fp, #176	; 0xb0
   192f4:	mov	r1, #100	; 0x64
   192f8:	movt	r2, #2
   192fc:	str	r0, [sp]
   19300:	str	r0, [sp, #4]
   19304:	mov	r0, r4
   19308:	bl	1e3cc <__assert_fail@plt+0xce14>
   1930c:	cmp	r0, #99	; 0x63
   19310:	bgt	1946c <__assert_fail@plt+0x7eb4>
   19314:	mov	r7, r0
   19318:	ldr	r0, [sp, #336]	; 0x150
   1931c:	cmp	r0, #0
   19320:	beq	1946c <__assert_fail@plt+0x7eb4>
   19324:	ldr	r5, [sp, #184]	; 0xb8
   19328:	mov	r0, #43	; 0x2b
   1932c:	movw	r3, #6975	; 0x1b3f
   19330:	mov	r2, #27
   19334:	movt	r3, #2
   19338:	cmp	r5, #0
   1933c:	movwmi	r0, #45	; 0x2d
   19340:	str	r0, [sp]
   19344:	movw	r0, #46021	; 0xb3c5
   19348:	movt	r0, #37282	; 0x91a2
   1934c:	smmla	r0, r5, r0, r5
   19350:	asr	r1, r0, #11
   19354:	add	r6, r1, r0, lsr #31
   19358:	mov	r1, #1
   1935c:	cmp	r6, #0
   19360:	mov	r0, r6
   19364:	rsbmi	r0, r6, #0
   19368:	str	r0, [sp, #4]
   1936c:	add	r0, sp, #116	; 0x74
   19370:	bl	11498 <__sprintf_chk@plt>
   19374:	mov	r2, r0
   19378:	mov	r0, #3600	; 0xe10
   1937c:	rsb	r1, r7, #100	; 0x64
   19380:	mls	r3, r6, r0, r5
   19384:	add	r0, r4, r7
   19388:	cmp	r3, #0
   1938c:	beq	1944c <__assert_fail@plt+0x7e94>
   19390:	add	r7, sp, #116	; 0x74
   19394:	rsbmi	r3, r3, #0
   19398:	mov	ip, #48	; 0x30
   1939c:	movw	lr, #52429	; 0xcccd
   193a0:	add	r2, r7, r2
   193a4:	mov	r7, #58	; 0x3a
   193a8:	uxth	r6, r3
   193ac:	movt	lr, #52428	; 0xcccc
   193b0:	strb	r7, [r2]
   193b4:	movw	r7, #33205	; 0x81b5
   193b8:	movt	r7, #6990	; 0x1b4e
   193bc:	umull	r7, r5, r6, r7
   193c0:	add	r5, ip, r5, lsr #6
   193c4:	strb	r5, [r2, #1]
   193c8:	movw	r5, #34953	; 0x8889
   193cc:	movt	r5, #34952	; 0x8888
   193d0:	umull	r6, r5, r6, r5
   193d4:	ubfx	r4, r5, #5, #8
   193d8:	umull	r7, r6, r4, lr
   193dc:	lsr	r6, r6, #3
   193e0:	add	r6, r6, r6, lsl #2
   193e4:	sub	r4, r4, r6, lsl #1
   193e8:	orr	r4, r4, #48	; 0x30
   193ec:	strb	r4, [r2, #2]
   193f0:	lsr	r4, r5, #5
   193f4:	lsl	r4, r4, #4
   193f8:	sub	r4, r4, r5, lsr #5
   193fc:	sub	r3, r3, r4, lsl #2
   19400:	movw	r4, #65535	; 0xffff
   19404:	tst	r3, r4
   19408:	beq	19440 <__assert_fail@plt+0x7e88>
   1940c:	mov	r4, #58	; 0x3a
   19410:	strb	r4, [r2, #3]
   19414:	uxtb	r4, r3
   19418:	umull	r7, r6, r4, lr
   1941c:	orr	r7, ip, r6, lsr #3
   19420:	strb	r7, [r2, #4]
   19424:	lsr	r7, r6, #3
   19428:	add	r7, r7, r7, lsl #2
   1942c:	sub	r3, r3, r7, lsl #1
   19430:	orr	r3, r3, #48	; 0x30
   19434:	strb	r3, [r2, #5]
   19438:	add	r2, r2, #6
   1943c:	b	19444 <__assert_fail@plt+0x7e8c>
   19440:	add	r2, r2, #3
   19444:	mov	r3, #0
   19448:	strb	r3, [r2]
   1944c:	movw	r2, #10033	; 0x2731
   19450:	mvn	r3, #0
   19454:	movt	r2, #2
   19458:	str	r2, [sp]
   1945c:	add	r2, sp, #116	; 0x74
   19460:	str	r2, [sp, #4]
   19464:	mov	r2, #1
   19468:	bl	115ac <__snprintf_chk@plt>
   1946c:	sub	r1, fp, #132	; 0x84
   19470:	sub	r2, fp, #348	; 0x15c
   19474:	mov	r0, r9
   19478:	bl	172b8 <__assert_fail@plt+0x5d00>
   1947c:	ldr	r9, [fp, #8]
   19480:	mov	ip, sl
   19484:	ldrb	r0, [sp, #341]	; 0x155
   19488:	cmp	r0, #0
   1948c:	beq	19840 <__assert_fail@plt+0x8288>
   19490:	ldr	r0, [sp, #316]	; 0x13c
   19494:	ldr	r1, [sp, #320]	; 0x140
   19498:	str	ip, [sp, #104]	; 0x68
   1949c:	orrs	r2, r1, r0
   194a0:	bne	19574 <__assert_fail@plt+0x7fbc>
   194a4:	movw	r1, #8451	; 0x2103
   194a8:	mov	r0, #0
   194ac:	mov	r2, #5
   194b0:	movt	r1, #2
   194b4:	bl	11318 <dcgettext@plt>
   194b8:	mov	r4, r0
   194bc:	ldr	r0, [fp, #-156]	; 0xffffff64
   194c0:	movw	r1, #34079	; 0x851f
   194c4:	mvn	r3, #18
   194c8:	movt	r1, #20971	; 0x51eb
   194cc:	smmul	r1, r0, r1
   194d0:	asr	r2, r1, #5
   194d4:	add	r1, r2, r1, lsr #31
   194d8:	mov	r2, #100	; 0x64
   194dc:	mls	r2, r1, r2, r0
   194e0:	cmp	r2, #0
   194e4:	rsbmi	r2, r2, #0
   194e8:	adds	r7, r1, #19
   194ec:	submi	r7, r3, r1
   194f0:	movw	r1, #63635	; 0xf893
   194f4:	movw	r3, #10061	; 0x274d
   194f8:	str	r2, [sp, #4]
   194fc:	mov	r2, #13
   19500:	movt	r1, #65535	; 0xffff
   19504:	movt	r3, #2
   19508:	str	r7, [sp]
   1950c:	add	r7, sp, #116	; 0x74
   19510:	cmp	r0, r1
   19514:	mov	r0, r7
   19518:	mov	r1, #1
   1951c:	addgt	r3, r3, #1
   19520:	bl	11498 <__sprintf_chk@plt>
   19524:	ldr	r1, [fp, #-160]	; 0xffffff60
   19528:	movw	r2, #10040	; 0x2738
   1952c:	ldr	r0, [fp, #-164]	; 0xffffff5c
   19530:	mov	r3, #100	; 0x64
   19534:	movt	r2, #2
   19538:	stm	sp, {r2, r7}
   1953c:	sub	r7, fp, #348	; 0x15c
   19540:	mov	r2, #1
   19544:	add	r1, r1, #1
   19548:	str	r0, [sp, #12]
   1954c:	mov	r0, r7
   19550:	str	r1, [sp, #8]
   19554:	mov	r1, #100	; 0x64
   19558:	bl	115ac <__snprintf_chk@plt>
   1955c:	mov	r0, r4
   19560:	mov	r1, r7
   19564:	bl	172b8 <__assert_fail@plt+0x5d00>
   19568:	ldr	r0, [sp, #316]	; 0x13c
   1956c:	ldr	r1, [sp, #320]	; 0x140
   19570:	ldr	r9, [fp, #8]
   19574:	cmp	r1, #0
   19578:	cmpne	r0, #0
   1957c:	beq	19694 <__assert_fail@plt+0x80dc>
   19580:	movw	r1, #8495	; 0x212f
   19584:	mov	r0, #0
   19588:	mov	r2, #5
   1958c:	mov	r7, #0
   19590:	movt	r1, #2
   19594:	bl	11318 <dcgettext@plt>
   19598:	mov	r4, r0
   1959c:	ldrb	r0, [sp, #348]	; 0x15c
   195a0:	cmp	r0, #0
   195a4:	beq	195ec <__assert_fail@plt+0x8034>
   195a8:	ldr	r0, [sp, #52]	; 0x34
   195ac:	ldrd	r0, [r0]
   195b0:	adds	r2, r0, #1
   195b4:	adc	r3, r1, #0
   195b8:	rsbs	r2, r2, #13
   195bc:	rscs	r2, r3, #0
   195c0:	bcc	19600 <__assert_fail@plt+0x8048>
   195c4:	movw	r2, #4736	; 0x1280
   195c8:	mov	r3, #11
   195cc:	movw	r1, #3686	; 0xe66
   195d0:	movt	r2, #2
   195d4:	movt	r1, #2
   195d8:	mla	r0, r0, r3, r2
   195dc:	str	r1, [sp]
   195e0:	add	r0, r0, #11
   195e4:	str	r0, [sp, #4]
   195e8:	b	19614 <__assert_fail@plt+0x805c>
   195ec:	strb	r7, [fp, #-132]	; 0xffffff7c
   195f0:	ldr	r0, [sp, #176]	; 0xb0
   195f4:	cmp	r0, #0
   195f8:	bpl	19638 <__assert_fail@plt+0x8080>
   195fc:	b	19684 <__assert_fail@plt+0x80cc>
   19600:	str	r0, [sp, #8]
   19604:	movw	r0, #6970	; 0x1b3a
   19608:	str	r1, [sp, #12]
   1960c:	movt	r0, #2
   19610:	str	r0, [sp]
   19614:	sub	r0, fp, #132	; 0x84
   19618:	mov	r1, #100	; 0x64
   1961c:	mov	r2, #1
   19620:	mov	r3, #100	; 0x64
   19624:	bl	115ac <__snprintf_chk@plt>
   19628:	mov	r7, r0
   1962c:	ldr	r0, [sp, #176]	; 0xb0
   19630:	cmp	r0, #0
   19634:	bmi	19684 <__assert_fail@plt+0x80cc>
   19638:	cmp	r7, #99	; 0x63
   1963c:	bhi	19684 <__assert_fail@plt+0x80cc>
   19640:	cmp	r0, #6
   19644:	bgt	19684 <__assert_fail@plt+0x80cc>
   19648:	movw	r1, #4890	; 0x131a
   1964c:	cmp	r7, #0
   19650:	mov	r2, #1
   19654:	mvn	r3, #0
   19658:	movt	r1, #2
   1965c:	add	r0, r1, r0, lsl #2
   19660:	movw	r1, #3685	; 0xe65
   19664:	movt	r1, #2
   19668:	str	r0, [sp, #4]
   1966c:	sub	r0, fp, #132	; 0x84
   19670:	addeq	r1, r1, #1
   19674:	add	r0, r0, r7
   19678:	str	r1, [sp]
   1967c:	rsb	r1, r7, #100	; 0x64
   19680:	bl	115ac <__snprintf_chk@plt>
   19684:	sub	r1, fp, #132	; 0x84
   19688:	mov	r0, r4
   1968c:	bl	172b8 <__assert_fail@plt+0x5d00>
   19690:	ldr	r9, [fp, #8]
   19694:	movw	r1, #8552	; 0x2168
   19698:	mov	r0, #0
   1969c:	mov	r2, #5
   196a0:	mov	r4, #0
   196a4:	movt	r1, #2
   196a8:	bl	11318 <dcgettext@plt>
   196ac:	movw	r2, #10007	; 0x2717
   196b0:	sub	r7, fp, #348	; 0x15c
   196b4:	mov	sl, r0
   196b8:	sub	r3, fp, #176	; 0xb0
   196bc:	mov	r1, #100	; 0x64
   196c0:	str	r4, [sp]
   196c4:	str	r4, [sp, #4]
   196c8:	movt	r2, #2
   196cc:	mov	r0, r7
   196d0:	bl	1e3cc <__assert_fail@plt+0xce14>
   196d4:	cmp	r0, #99	; 0x63
   196d8:	bgt	19830 <__assert_fail@plt+0x8278>
   196dc:	mov	r4, r0
   196e0:	ldr	r0, [sp, #336]	; 0x150
   196e4:	cmp	r0, #0
   196e8:	beq	19830 <__assert_fail@plt+0x8278>
   196ec:	ldr	r5, [sp, #184]	; 0xb8
   196f0:	mov	r0, #43	; 0x2b
   196f4:	movw	r3, #6975	; 0x1b3f
   196f8:	add	r9, sp, #116	; 0x74
   196fc:	mov	r2, #27
   19700:	movt	r3, #2
   19704:	cmp	r5, #0
   19708:	movwmi	r0, #45	; 0x2d
   1970c:	str	r0, [sp]
   19710:	movw	r0, #46021	; 0xb3c5
   19714:	movt	r0, #37282	; 0x91a2
   19718:	smmla	r0, r5, r0, r5
   1971c:	asr	r1, r0, #11
   19720:	add	r6, r1, r0, lsr #31
   19724:	mov	r1, #1
   19728:	cmp	r6, #0
   1972c:	mov	r0, r6
   19730:	rsbmi	r0, r6, #0
   19734:	str	r0, [sp, #4]
   19738:	mov	r0, r9
   1973c:	bl	11498 <__sprintf_chk@plt>
   19740:	mov	r2, r0
   19744:	mov	r0, #3600	; 0xe10
   19748:	rsb	r1, r4, #100	; 0x64
   1974c:	mls	r3, r6, r0, r5
   19750:	add	r0, r7, r4
   19754:	cmp	r3, #0
   19758:	beq	19814 <__assert_fail@plt+0x825c>
   1975c:	add	r2, r9, r2
   19760:	mov	r7, #58	; 0x3a
   19764:	rsbmi	r3, r3, #0
   19768:	mov	ip, #48	; 0x30
   1976c:	movw	lr, #52429	; 0xcccd
   19770:	strb	r7, [r2]
   19774:	movw	r7, #33205	; 0x81b5
   19778:	uxth	r6, r3
   1977c:	movt	lr, #52428	; 0xcccc
   19780:	movt	r7, #6990	; 0x1b4e
   19784:	umull	r7, r5, r6, r7
   19788:	add	r5, ip, r5, lsr #6
   1978c:	strb	r5, [r2, #1]
   19790:	movw	r5, #34953	; 0x8889
   19794:	movt	r5, #34952	; 0x8888
   19798:	umull	r6, r5, r6, r5
   1979c:	ubfx	r4, r5, #5, #8
   197a0:	umull	r7, r6, r4, lr
   197a4:	lsr	r6, r6, #3
   197a8:	add	r6, r6, r6, lsl #2
   197ac:	sub	r4, r4, r6, lsl #1
   197b0:	orr	r4, r4, #48	; 0x30
   197b4:	strb	r4, [r2, #2]
   197b8:	lsr	r4, r5, #5
   197bc:	lsl	r4, r4, #4
   197c0:	sub	r4, r4, r5, lsr #5
   197c4:	sub	r3, r3, r4, lsl #2
   197c8:	movw	r4, #65535	; 0xffff
   197cc:	tst	r3, r4
   197d0:	beq	19808 <__assert_fail@plt+0x8250>
   197d4:	mov	r4, #58	; 0x3a
   197d8:	strb	r4, [r2, #3]
   197dc:	uxtb	r4, r3
   197e0:	umull	r7, r6, r4, lr
   197e4:	orr	r7, ip, r6, lsr #3
   197e8:	strb	r7, [r2, #4]
   197ec:	lsr	r7, r6, #3
   197f0:	add	r7, r7, r7, lsl #2
   197f4:	sub	r3, r3, r7, lsl #1
   197f8:	orr	r3, r3, #48	; 0x30
   197fc:	strb	r3, [r2, #5]
   19800:	add	r2, r2, #6
   19804:	b	1980c <__assert_fail@plt+0x8254>
   19808:	add	r2, r2, #3
   1980c:	mov	r3, #0
   19810:	strb	r3, [r2]
   19814:	movw	r2, #10033	; 0x2731
   19818:	mvn	r3, #0
   1981c:	movt	r2, #2
   19820:	stm	sp, {r2, r9}
   19824:	mov	r2, #1
   19828:	bl	115ac <__snprintf_chk@plt>
   1982c:	ldr	r9, [fp, #8]
   19830:	sub	r1, fp, #348	; 0x15c
   19834:	mov	r0, sl
   19838:	bl	172b8 <__assert_fail@plt+0x5d00>
   1983c:	ldr	ip, [sp, #104]	; 0x68
   19840:	ldr	r0, [sp, #88]	; 0x58
   19844:	ldrd	r4, [r0]
   19848:	ldr	r0, [sp, #44]	; 0x2c
   1984c:	ldrd	r6, [r0]
   19850:	ldr	r0, [sp, #48]	; 0x30
   19854:	ldrd	r0, [r0]
   19858:	orr	r2, r7, r5
   1985c:	orr	r3, r6, r4
   19860:	orr	r7, r2, r1
   19864:	orr	r6, r3, r0
   19868:	orrs	r7, r6, r7
   1986c:	beq	19fc0 <__assert_fail@plt+0x8a08>
   19870:	ldrb	r7, [sp, #341]	; 0x155
   19874:	cmp	r7, #0
   19878:	beq	198d4 <__assert_fail@plt+0x831c>
   1987c:	orrs	r2, r3, r2
   19880:	ldrne	r2, [fp, #-164]	; 0xffffff5c
   19884:	cmpne	r2, #15
   19888:	beq	198ac <__assert_fail@plt+0x82f4>
   1988c:	movw	r1, #8578	; 0x2182
   19890:	mov	r0, #0
   19894:	mov	r2, #5
   19898:	movt	r1, #2
   1989c:	bl	11318 <dcgettext@plt>
   198a0:	bl	172b8 <__assert_fail@plt+0x5d00>
   198a4:	ldr	r0, [sp, #48]	; 0x30
   198a8:	ldrd	r0, [r0]
   198ac:	orrs	r0, r0, r1
   198b0:	ldrne	r0, [fp, #-168]	; 0xffffff58
   198b4:	cmpne	r0, #12
   198b8:	beq	198d4 <__assert_fail@plt+0x831c>
   198bc:	movw	r1, #8675	; 0x21e3
   198c0:	mov	r0, #0
   198c4:	mov	r2, #5
   198c8:	movt	r1, #2
   198cc:	bl	11318 <dcgettext@plt>
   198d0:	bl	172b8 <__assert_fail@plt+0x5d00>
   198d4:	ldr	r7, [sp, #88]	; 0x58
   198d8:	ldr	r0, [fp, #-156]	; 0xffffff64
   198dc:	mov	r3, #0
   198e0:	mov	r2, #0
   198e4:	ldm	r7, {r4, r7}
   198e8:	asr	r1, r0, #31
   198ec:	cmn	r1, #1
   198f0:	movwgt	r3, #1
   198f4:	adds	r5, r0, r4
   198f8:	adc	r0, r1, r7
   198fc:	mov	r1, #0
   19900:	cmn	r0, #1
   19904:	movwgt	r1, #1
   19908:	subs	r1, r3, r1
   1990c:	movwne	r1, #1
   19910:	cmn	r7, #1
   19914:	movwgt	r2, #1
   19918:	sub	r2, r3, r2
   1991c:	clz	r2, r2
   19920:	lsr	r2, r2, #5
   19924:	tst	r2, r1
   19928:	asreq	r1, r5, #31
   1992c:	eoreq	r2, r5, r5
   19930:	eoreq	r0, r0, r1
   19934:	orrseq	r0, r2, r0
   19938:	bne	199a4 <__assert_fail@plt+0x83ec>
   1993c:	ldr	r7, [sp, #44]	; 0x2c
   19940:	ldr	r0, [fp, #-160]	; 0xffffff60
   19944:	mov	r3, #0
   19948:	mov	r2, #0
   1994c:	ldm	r7, {r4, r9}
   19950:	asr	r1, r0, #31
   19954:	cmn	r1, #1
   19958:	movwgt	r3, #1
   1995c:	adds	r7, r0, r4
   19960:	adc	r0, r1, r9
   19964:	mov	r1, #0
   19968:	cmn	r0, #1
   1996c:	movwgt	r1, #1
   19970:	subs	r1, r3, r1
   19974:	movwne	r1, #1
   19978:	cmn	r9, #1
   1997c:	movwgt	r2, #1
   19980:	sub	r2, r3, r2
   19984:	clz	r2, r2
   19988:	lsr	r2, r2, #5
   1998c:	tst	r2, r1
   19990:	asreq	r1, r7, #31
   19994:	eoreq	r2, r7, r7
   19998:	eoreq	r0, r0, r1
   1999c:	orrseq	r0, r2, r0
   199a0:	beq	199ec <__assert_fail@plt+0x8434>
   199a4:	ldrb	r0, [sp, #341]	; 0x155
   199a8:	ldr	r9, [fp, #8]
   199ac:	mov	r5, r8
   199b0:	cmp	r0, #0
   199b4:	beq	18ce4 <__assert_fail@plt+0x772c>
   199b8:	movw	r1, #8746	; 0x222a
   199bc:	mov	r0, #0
   199c0:	mov	r2, #5
   199c4:	movt	r1, #2
   199c8:	bl	11318 <dcgettext@plt>
   199cc:	movw	r1, #8760	; 0x2238
   199d0:	movw	r2, #2149	; 0x865
   199d4:	movt	r1, #2
   199d8:	bl	172b8 <__assert_fail@plt+0x5d00>
   199dc:	mov	r7, #0
   199e0:	cmp	r5, r9
   199e4:	bne	18030 <__assert_fail@plt+0x6a78>
   199e8:	b	18038 <__assert_fail@plt+0x6a80>
   199ec:	ldr	r6, [sp, #48]	; 0x30
   199f0:	ldr	r0, [fp, #-164]	; 0xffffff5c
   199f4:	mov	r3, #0
   199f8:	mov	r2, #0
   199fc:	ldm	r6, {r4, r9}
   19a00:	asr	r1, r0, #31
   19a04:	cmn	r1, #1
   19a08:	movwgt	r3, #1
   19a0c:	adds	sl, r0, r4
   19a10:	adc	r0, r1, r9
   19a14:	mov	r1, #0
   19a18:	cmn	r0, #1
   19a1c:	movwgt	r1, #1
   19a20:	subs	r1, r3, r1
   19a24:	movwne	r1, #1
   19a28:	cmn	r9, #1
   19a2c:	movwgt	r2, #1
   19a30:	sub	r2, r3, r2
   19a34:	clz	r2, r2
   19a38:	lsr	r2, r2, #5
   19a3c:	tst	r2, r1
   19a40:	asreq	r1, sl, #31
   19a44:	eoreq	r2, sl, sl
   19a48:	eoreq	r0, r0, r1
   19a4c:	orrseq	r0, r2, r0
   19a50:	bne	199a4 <__assert_fail@plt+0x83ec>
   19a54:	sub	r2, fp, #220	; 0xdc
   19a58:	ldr	r3, [fp, #-188]	; 0xffffff44
   19a5c:	sub	ip, fp, #176	; 0xb0
   19a60:	str	r7, [fp, #-160]	; 0xffffff60
   19a64:	str	r5, [fp, #-156]	; 0xffffff64
   19a68:	str	sl, [fp, #-164]	; 0xffffff5c
   19a6c:	ldm	r2, {r0, r1, r2}
   19a70:	stm	ip, {r0, r1, r2}
   19a74:	sub	r1, fp, #176	; 0xb0
   19a78:	mov	r0, r8
   19a7c:	str	r3, [fp, #-144]	; 0xffffff70
   19a80:	bl	1d0ec <__assert_fail@plt+0xbb34>
   19a84:	ldrb	r1, [sp, #341]	; 0x155
   19a88:	cmn	r0, #1
   19a8c:	str	r0, [sp, #104]	; 0x68
   19a90:	beq	19c58 <__assert_fail@plt+0x86a0>
   19a94:	cmp	r1, #0
   19a98:	beq	19fb8 <__assert_fail@plt+0x8a00>
   19a9c:	movw	r1, #8840	; 0x2288
   19aa0:	mov	r0, #0
   19aa4:	mov	r2, #5
   19aa8:	mov	r9, #0
   19aac:	movt	r1, #2
   19ab0:	bl	11318 <dcgettext@plt>
   19ab4:	ldr	r1, [sp, #88]	; 0x58
   19ab8:	ldr	r2, [sp, #48]	; 0x30
   19abc:	ldm	r1, {r4, ip}
   19ac0:	ldr	r1, [sp, #44]	; 0x2c
   19ac4:	ldrd	r2, [r2]
   19ac8:	ldr	r6, [r1]
   19acc:	ldr	r1, [r1, #4]
   19ad0:	str	r6, [sp]
   19ad4:	stmib	sp, {r1, r2, r3}
   19ad8:	mov	r2, r4
   19adc:	mov	r3, ip
   19ae0:	bl	172b8 <__assert_fail@plt+0x5d00>
   19ae4:	movw	r1, #8904	; 0x22c8
   19ae8:	mov	r0, #0
   19aec:	mov	r2, #5
   19af0:	movt	r1, #2
   19af4:	bl	11318 <dcgettext@plt>
   19af8:	movw	r2, #10007	; 0x2717
   19afc:	str	r0, [sp, #108]	; 0x6c
   19b00:	sub	r0, fp, #348	; 0x15c
   19b04:	sub	r3, fp, #176	; 0xb0
   19b08:	mov	r1, #100	; 0x64
   19b0c:	str	r9, [sp]
   19b10:	str	r9, [sp, #4]
   19b14:	movt	r2, #2
   19b18:	bl	1e3cc <__assert_fail@plt+0xce14>
   19b1c:	cmp	r0, #99	; 0x63
   19b20:	bgt	19e08 <__assert_fail@plt+0x8850>
   19b24:	mov	r9, r0
   19b28:	ldr	r0, [sp, #336]	; 0x150
   19b2c:	cmp	r0, #0
   19b30:	beq	19e08 <__assert_fail@plt+0x8850>
   19b34:	ldr	r4, [sp, #184]	; 0xb8
   19b38:	mov	r0, #43	; 0x2b
   19b3c:	movw	r3, #6975	; 0x1b3f
   19b40:	mov	r2, #27
   19b44:	movt	r3, #2
   19b48:	cmp	r4, #0
   19b4c:	movwmi	r0, #45	; 0x2d
   19b50:	str	r0, [sp]
   19b54:	movw	r0, #46021	; 0xb3c5
   19b58:	movt	r0, #37282	; 0x91a2
   19b5c:	smmla	r0, r4, r0, r4
   19b60:	asr	r1, r0, #11
   19b64:	add	r6, r1, r0, lsr #31
   19b68:	mov	r1, #1
   19b6c:	cmp	r6, #0
   19b70:	mov	r0, r6
   19b74:	rsbmi	r0, r6, #0
   19b78:	str	r0, [sp, #4]
   19b7c:	add	r0, sp, #116	; 0x74
   19b80:	bl	11498 <__sprintf_chk@plt>
   19b84:	mov	r2, r0
   19b88:	mov	r0, #3600	; 0xe10
   19b8c:	rsb	r1, r9, #100	; 0x64
   19b90:	mls	ip, r6, r0, r4
   19b94:	sub	r0, fp, #348	; 0x15c
   19b98:	add	r0, r0, r9
   19b9c:	cmp	ip, #0
   19ba0:	beq	19de8 <__assert_fail@plt+0x8830>
   19ba4:	add	r3, sp, #116	; 0x74
   19ba8:	movw	r4, #33205	; 0x81b5
   19bac:	mov	r6, #58	; 0x3a
   19bb0:	rsbmi	ip, ip, #0
   19bb4:	add	r9, r3, r2
   19bb8:	movt	r4, #6990	; 0x1b4e
   19bbc:	mov	r2, #48	; 0x30
   19bc0:	strb	r6, [r9]
   19bc4:	uxth	r6, ip
   19bc8:	umull	r4, lr, r6, r4
   19bcc:	add	r4, r2, lr, lsr #6
   19bd0:	movw	lr, #52429	; 0xcccd
   19bd4:	movt	lr, #52428	; 0xcccc
   19bd8:	strb	r4, [r9, #1]
   19bdc:	movw	r4, #34953	; 0x8889
   19be0:	movt	r4, #34952	; 0x8888
   19be4:	umull	r6, r4, r6, r4
   19be8:	ubfx	r6, r4, #5, #8
   19bec:	umull	r2, r3, r6, lr
   19bf0:	lsr	r2, r3, #3
   19bf4:	add	r2, r2, r2, lsl #2
   19bf8:	sub	r2, r6, r2, lsl #1
   19bfc:	orr	r2, r2, #48	; 0x30
   19c00:	strb	r2, [r9, #2]
   19c04:	lsr	r2, r4, #5
   19c08:	lsl	r2, r2, #4
   19c0c:	sub	r2, r2, r4, lsr #5
   19c10:	sub	r3, ip, r2, lsl #2
   19c14:	movw	r2, #65535	; 0xffff
   19c18:	tst	r3, r2
   19c1c:	beq	19ddc <__assert_fail@plt+0x8824>
   19c20:	mov	r2, #58	; 0x3a
   19c24:	strb	r2, [r9, #3]
   19c28:	uxtb	r2, r3
   19c2c:	umull	r2, r6, r2, lr
   19c30:	mov	r2, #48	; 0x30
   19c34:	orr	r2, r2, r6, lsr #3
   19c38:	strb	r2, [r9, #4]
   19c3c:	lsr	r2, r6, #3
   19c40:	add	r2, r2, r2, lsl #2
   19c44:	sub	r2, r3, r2, lsl #1
   19c48:	orr	r2, r2, #48	; 0x30
   19c4c:	strb	r2, [r9, #5]
   19c50:	add	r2, r9, #6
   19c54:	b	19de0 <__assert_fail@plt+0x8828>
   19c58:	ldr	r9, [fp, #8]
   19c5c:	cmp	r1, #0
   19c60:	mov	r5, r8
   19c64:	beq	18ce4 <__assert_fail@plt+0x772c>
   19c68:	movw	r1, #8777	; 0x2249
   19c6c:	mov	r0, #0
   19c70:	mov	r2, #5
   19c74:	mov	r4, #0
   19c78:	movt	r1, #2
   19c7c:	bl	11318 <dcgettext@plt>
   19c80:	movw	r2, #10007	; 0x2717
   19c84:	sub	r7, fp, #348	; 0x15c
   19c88:	mov	r9, r0
   19c8c:	sub	r3, fp, #176	; 0xb0
   19c90:	mov	r1, #100	; 0x64
   19c94:	str	r4, [sp]
   19c98:	str	r4, [sp, #4]
   19c9c:	movt	r2, #2
   19ca0:	mov	r0, r7
   19ca4:	bl	1e3cc <__assert_fail@plt+0xce14>
   19ca8:	cmp	r0, #99	; 0x63
   19cac:	bgt	1a5fc <__assert_fail@plt+0x9044>
   19cb0:	mov	r6, r0
   19cb4:	ldr	r0, [sp, #336]	; 0x150
   19cb8:	cmp	r0, #0
   19cbc:	beq	1a5fc <__assert_fail@plt+0x9044>
   19cc0:	ldr	r5, [sp, #184]	; 0xb8
   19cc4:	mov	r0, #43	; 0x2b
   19cc8:	movw	r3, #6975	; 0x1b3f
   19ccc:	add	sl, sp, #116	; 0x74
   19cd0:	mov	r2, #27
   19cd4:	movt	r3, #2
   19cd8:	cmp	r5, #0
   19cdc:	movwmi	r0, #45	; 0x2d
   19ce0:	str	r0, [sp]
   19ce4:	movw	r0, #46021	; 0xb3c5
   19ce8:	movt	r0, #37282	; 0x91a2
   19cec:	smmla	r0, r5, r0, r5
   19cf0:	asr	r1, r0, #11
   19cf4:	add	r4, r1, r0, lsr #31
   19cf8:	mov	r1, #1
   19cfc:	cmp	r4, #0
   19d00:	mov	r0, r4
   19d04:	rsbmi	r0, r4, #0
   19d08:	str	r0, [sp, #4]
   19d0c:	mov	r0, sl
   19d10:	bl	11498 <__sprintf_chk@plt>
   19d14:	mov	r2, r0
   19d18:	mov	r0, #3600	; 0xe10
   19d1c:	rsb	r1, r6, #100	; 0x64
   19d20:	mls	r3, r4, r0, r5
   19d24:	add	r0, r7, r6
   19d28:	cmp	r3, #0
   19d2c:	beq	1a5e4 <__assert_fail@plt+0x902c>
   19d30:	add	r2, sl, r2
   19d34:	mov	r7, #58	; 0x3a
   19d38:	rsbmi	r3, r3, #0
   19d3c:	mov	ip, #48	; 0x30
   19d40:	movw	lr, #52429	; 0xcccd
   19d44:	strb	r7, [r2]
   19d48:	movw	r7, #33205	; 0x81b5
   19d4c:	uxth	r6, r3
   19d50:	movt	lr, #52428	; 0xcccc
   19d54:	movt	r7, #6990	; 0x1b4e
   19d58:	umull	r7, r5, r6, r7
   19d5c:	add	r5, ip, r5, lsr #6
   19d60:	strb	r5, [r2, #1]
   19d64:	movw	r5, #34953	; 0x8889
   19d68:	movt	r5, #34952	; 0x8888
   19d6c:	umull	r6, r5, r6, r5
   19d70:	ubfx	r4, r5, #5, #8
   19d74:	umull	r7, r6, r4, lr
   19d78:	lsr	r6, r6, #3
   19d7c:	add	r6, r6, r6, lsl #2
   19d80:	sub	r4, r4, r6, lsl #1
   19d84:	orr	r4, r4, #48	; 0x30
   19d88:	strb	r4, [r2, #2]
   19d8c:	lsr	r4, r5, #5
   19d90:	lsl	r4, r4, #4
   19d94:	sub	r4, r4, r5, lsr #5
   19d98:	sub	r3, r3, r4, lsl #2
   19d9c:	movw	r4, #65535	; 0xffff
   19da0:	tst	r3, r4
   19da4:	beq	1a5d8 <__assert_fail@plt+0x9020>
   19da8:	mov	r4, #58	; 0x3a
   19dac:	strb	r4, [r2, #3]
   19db0:	uxtb	r4, r3
   19db4:	umull	r7, r6, r4, lr
   19db8:	orr	r7, ip, r6, lsr #3
   19dbc:	strb	r7, [r2, #4]
   19dc0:	lsr	r7, r6, #3
   19dc4:	add	r7, r7, r7, lsl #2
   19dc8:	sub	r3, r3, r7, lsl #1
   19dcc:	orr	r3, r3, #48	; 0x30
   19dd0:	strb	r3, [r2, #5]
   19dd4:	add	r2, r2, #6
   19dd8:	b	1a5dc <__assert_fail@plt+0x9024>
   19ddc:	add	r2, r9, #3
   19de0:	mov	r3, #0
   19de4:	strb	r3, [r2]
   19de8:	movw	r2, #10033	; 0x2731
   19dec:	mvn	r3, #0
   19df0:	movt	r2, #2
   19df4:	str	r2, [sp]
   19df8:	add	r2, sp, #116	; 0x74
   19dfc:	str	r2, [sp, #4]
   19e00:	mov	r2, #1
   19e04:	bl	115ac <__snprintf_chk@plt>
   19e08:	ldr	r0, [sp, #108]	; 0x6c
   19e0c:	sub	r1, fp, #348	; 0x15c
   19e10:	bl	172b8 <__assert_fail@plt+0x5d00>
   19e14:	ldr	r0, [fp, #-188]	; 0xffffff44
   19e18:	cmn	r0, #1
   19e1c:	ldrne	r1, [fp, #-144]	; 0xffffff70
   19e20:	cmpne	r1, r0
   19e24:	beq	19e40 <__assert_fail@plt+0x8888>
   19e28:	movw	r1, #8930	; 0x22e2
   19e2c:	mov	r0, #0
   19e30:	mov	r2, #5
   19e34:	movt	r1, #2
   19e38:	bl	11318 <dcgettext@plt>
   19e3c:	bl	172b8 <__assert_fail@plt+0x5d00>
   19e40:	ldr	r0, [sp, #48]	; 0x30
   19e44:	ldrd	r0, [r0]
   19e48:	orrs	r0, r0, r1
   19e4c:	bne	19fb8 <__assert_fail@plt+0x8a00>
   19e50:	ldr	r0, [fp, #-164]	; 0xffffff5c
   19e54:	cmp	r0, sl
   19e58:	bne	19e78 <__assert_fail@plt+0x88c0>
   19e5c:	ldr	r0, [sp, #44]	; 0x2c
   19e60:	ldrd	r0, [r0]
   19e64:	orrs	r0, r0, r1
   19e68:	bne	19fb8 <__assert_fail@plt+0x8a00>
   19e6c:	ldr	r0, [fp, #-160]	; 0xffffff60
   19e70:	cmp	r0, r7
   19e74:	beq	19fb8 <__assert_fail@plt+0x8a00>
   19e78:	movw	r1, #8991	; 0x231f
   19e7c:	mov	r0, #0
   19e80:	mov	r2, #5
   19e84:	movt	r1, #2
   19e88:	bl	11318 <dcgettext@plt>
   19e8c:	bl	172b8 <__assert_fail@plt+0x5d00>
   19e90:	movw	r1, #9050	; 0x235a
   19e94:	mov	r0, #0
   19e98:	mov	r2, #5
   19e9c:	movt	r1, #2
   19ea0:	bl	11318 <dcgettext@plt>
   19ea4:	mov	r4, r0
   19ea8:	movw	r0, #34079	; 0x851f
   19eac:	mvn	r3, #18
   19eb0:	movw	r9, #10061	; 0x274d
   19eb4:	movt	r0, #20971	; 0x51eb
   19eb8:	movt	r9, #2
   19ebc:	smmul	r0, r5, r0
   19ec0:	add	r6, r9, #1
   19ec4:	asr	r1, r0, #5
   19ec8:	add	r0, r1, r0, lsr #31
   19ecc:	mov	r1, #100	; 0x64
   19ed0:	mls	r1, r0, r1, r5
   19ed4:	cmp	r1, #0
   19ed8:	rsbmi	r1, r1, #0
   19edc:	adds	r2, r0, #19
   19ee0:	submi	r2, r3, r0
   19ee4:	movw	r0, #63635	; 0xf893
   19ee8:	str	r1, [sp, #4]
   19eec:	mov	r3, r9
   19ef0:	mov	r1, #1
   19ef4:	movt	r0, #65535	; 0xffff
   19ef8:	str	r2, [sp]
   19efc:	mov	r2, #13
   19f00:	cmp	r5, r0
   19f04:	add	r5, sp, #116	; 0x74
   19f08:	movgt	r3, r6
   19f0c:	mov	r0, r5
   19f10:	bl	11498 <__sprintf_chk@plt>
   19f14:	add	r2, r7, #1
   19f18:	mov	r0, r4
   19f1c:	mov	r1, r5
   19f20:	mov	r3, sl
   19f24:	bl	172b8 <__assert_fail@plt+0x5d00>
   19f28:	movw	r1, #9085	; 0x237d
   19f2c:	mov	r0, #0
   19f30:	mov	r2, #5
   19f34:	movt	r1, #2
   19f38:	bl	11318 <dcgettext@plt>
   19f3c:	mov	r4, r0
   19f40:	ldr	r0, [fp, #-156]	; 0xffffff64
   19f44:	movw	r1, #34079	; 0x851f
   19f48:	mvn	r7, #18
   19f4c:	movt	r1, #20971	; 0x51eb
   19f50:	smmul	r1, r0, r1
   19f54:	asr	r2, r1, #5
   19f58:	add	r2, r2, r1, lsr #31
   19f5c:	mov	r1, #100	; 0x64
   19f60:	mls	r1, r2, r1, r0
   19f64:	cmp	r1, #0
   19f68:	rsbmi	r1, r1, #0
   19f6c:	adds	r3, r2, #19
   19f70:	str	r1, [sp, #4]
   19f74:	movw	r1, #63635	; 0xf893
   19f78:	submi	r3, r7, r2
   19f7c:	mov	r2, #13
   19f80:	movt	r1, #65535	; 0xffff
   19f84:	str	r3, [sp]
   19f88:	cmp	r0, r1
   19f8c:	mov	r0, r5
   19f90:	mov	r1, #1
   19f94:	movgt	r9, r6
   19f98:	mov	r3, r9
   19f9c:	bl	11498 <__sprintf_chk@plt>
   19fa0:	ldr	r0, [fp, #-160]	; 0xffffff60
   19fa4:	ldr	r3, [fp, #-164]	; 0xffffff5c
   19fa8:	mov	r1, r5
   19fac:	add	r2, r0, #1
   19fb0:	mov	r0, r4
   19fb4:	bl	172b8 <__assert_fail@plt+0x5d00>
   19fb8:	ldr	r9, [fp, #8]
   19fbc:	ldr	ip, [sp, #104]	; 0x68
   19fc0:	ldr	r0, [sp, #336]	; 0x150
   19fc4:	cmp	r0, #0
   19fc8:	beq	1a030 <__assert_fail@plt+0x8a78>
   19fcc:	ldr	r0, [fp, #-140]	; 0xffffff74
   19fd0:	ldr	r2, [sp, #184]	; 0xb8
   19fd4:	asr	r1, r0, #31
   19fd8:	subs	r0, r0, r2
   19fdc:	sbc	r1, r1, r2, asr #31
   19fe0:	adds	r2, r0, ip
   19fe4:	mov	sl, r2
   19fe8:	adc	r0, r1, ip, asr #31
   19fec:	teq	r0, r2, asr #31
   19ff0:	beq	1a034 <__assert_fail@plt+0x8a7c>
   19ff4:	ldrb	r0, [sp, #341]	; 0x155
   19ff8:	mov	r5, r8
   19ffc:	cmp	r0, #0
   1a000:	beq	18ce4 <__assert_fail@plt+0x772c>
   1a004:	movw	r1, #9120	; 0x23a0
   1a008:	mov	r0, #0
   1a00c:	mov	r2, #5
   1a010:	movt	r1, #2
   1a014:	bl	11318 <dcgettext@plt>
   1a018:	ldr	r1, [sp, #184]	; 0xb8
   1a01c:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a020:	mov	r7, #0
   1a024:	cmp	r5, r9
   1a028:	bne	18030 <__assert_fail@plt+0x6a78>
   1a02c:	b	18038 <__assert_fail@plt+0x6a80>
   1a030:	mov	sl, ip
   1a034:	ldrb	r0, [sp, #341]	; 0x155
   1a038:	cmp	r0, #0
   1a03c:	beq	1a1f4 <__assert_fail@plt+0x8c3c>
   1a040:	movw	r1, #9163	; 0x23cb
   1a044:	mov	r0, #0
   1a048:	mov	r2, #5
   1a04c:	mov	r4, #0
   1a050:	movt	r1, #2
   1a054:	bl	11318 <dcgettext@plt>
   1a058:	movw	r2, #10007	; 0x2717
   1a05c:	sub	r7, fp, #348	; 0x15c
   1a060:	mov	r9, r0
   1a064:	sub	r3, fp, #176	; 0xb0
   1a068:	mov	r1, #100	; 0x64
   1a06c:	str	r4, [sp]
   1a070:	str	r4, [sp, #4]
   1a074:	movt	r2, #2
   1a078:	mov	r0, r7
   1a07c:	bl	1e3cc <__assert_fail@plt+0xce14>
   1a080:	cmp	r0, #99	; 0x63
   1a084:	bgt	1a1e0 <__assert_fail@plt+0x8c28>
   1a088:	mov	r6, r0
   1a08c:	ldr	r0, [sp, #336]	; 0x150
   1a090:	cmp	r0, #0
   1a094:	beq	1a1e0 <__assert_fail@plt+0x8c28>
   1a098:	ldr	r4, [sp, #184]	; 0xb8
   1a09c:	mov	r0, #43	; 0x2b
   1a0a0:	movw	r3, #6975	; 0x1b3f
   1a0a4:	mov	r2, #27
   1a0a8:	movt	r3, #2
   1a0ac:	cmp	r4, #0
   1a0b0:	movwmi	r0, #45	; 0x2d
   1a0b4:	str	r0, [sp]
   1a0b8:	movw	r0, #46021	; 0xb3c5
   1a0bc:	movt	r0, #37282	; 0x91a2
   1a0c0:	smmla	r0, r4, r0, r4
   1a0c4:	asr	r1, r0, #11
   1a0c8:	add	r5, r1, r0, lsr #31
   1a0cc:	mov	r1, #1
   1a0d0:	cmp	r5, #0
   1a0d4:	mov	r0, r5
   1a0d8:	rsbmi	r0, r5, #0
   1a0dc:	str	r0, [sp, #4]
   1a0e0:	add	r0, sp, #116	; 0x74
   1a0e4:	bl	11498 <__sprintf_chk@plt>
   1a0e8:	mov	r2, r0
   1a0ec:	mov	r0, #3600	; 0xe10
   1a0f0:	rsb	r1, r6, #100	; 0x64
   1a0f4:	mls	r3, r5, r0, r4
   1a0f8:	add	r0, r7, r6
   1a0fc:	cmp	r3, #0
   1a100:	beq	1a1c0 <__assert_fail@plt+0x8c08>
   1a104:	add	r7, sp, #116	; 0x74
   1a108:	rsbmi	r3, r3, #0
   1a10c:	mov	ip, #48	; 0x30
   1a110:	movw	lr, #52429	; 0xcccd
   1a114:	add	r2, r7, r2
   1a118:	mov	r7, #58	; 0x3a
   1a11c:	uxth	r6, r3
   1a120:	movt	lr, #52428	; 0xcccc
   1a124:	strb	r7, [r2]
   1a128:	movw	r7, #33205	; 0x81b5
   1a12c:	movt	r7, #6990	; 0x1b4e
   1a130:	umull	r7, r5, r6, r7
   1a134:	add	r5, ip, r5, lsr #6
   1a138:	strb	r5, [r2, #1]
   1a13c:	movw	r5, #34953	; 0x8889
   1a140:	movt	r5, #34952	; 0x8888
   1a144:	umull	r6, r5, r6, r5
   1a148:	ubfx	r4, r5, #5, #8
   1a14c:	umull	r7, r6, r4, lr
   1a150:	lsr	r6, r6, #3
   1a154:	add	r6, r6, r6, lsl #2
   1a158:	sub	r4, r4, r6, lsl #1
   1a15c:	orr	r4, r4, #48	; 0x30
   1a160:	strb	r4, [r2, #2]
   1a164:	lsr	r4, r5, #5
   1a168:	lsl	r4, r4, #4
   1a16c:	sub	r4, r4, r5, lsr #5
   1a170:	sub	r3, r3, r4, lsl #2
   1a174:	movw	r4, #65535	; 0xffff
   1a178:	tst	r3, r4
   1a17c:	beq	1a1b4 <__assert_fail@plt+0x8bfc>
   1a180:	mov	r4, #58	; 0x3a
   1a184:	strb	r4, [r2, #3]
   1a188:	uxtb	r4, r3
   1a18c:	umull	r7, r6, r4, lr
   1a190:	orr	r7, ip, r6, lsr #3
   1a194:	strb	r7, [r2, #4]
   1a198:	lsr	r7, r6, #3
   1a19c:	add	r7, r7, r7, lsl #2
   1a1a0:	sub	r3, r3, r7, lsl #1
   1a1a4:	orr	r3, r3, #48	; 0x30
   1a1a8:	strb	r3, [r2, #5]
   1a1ac:	add	r2, r2, #6
   1a1b0:	b	1a1b8 <__assert_fail@plt+0x8c00>
   1a1b4:	add	r2, r2, #3
   1a1b8:	mov	r3, #0
   1a1bc:	strb	r3, [r2]
   1a1c0:	movw	r2, #10033	; 0x2731
   1a1c4:	mvn	r3, #0
   1a1c8:	movt	r2, #2
   1a1cc:	str	r2, [sp]
   1a1d0:	add	r2, sp, #116	; 0x74
   1a1d4:	str	r2, [sp, #4]
   1a1d8:	mov	r2, #1
   1a1dc:	bl	115ac <__snprintf_chk@plt>
   1a1e0:	mov	r2, sl
   1a1e4:	asr	r3, sl, #31
   1a1e8:	sub	r1, fp, #348	; 0x15c
   1a1ec:	mov	r0, r9
   1a1f0:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a1f4:	ldr	r5, [sp, #304]	; 0x130
   1a1f8:	ldr	r0, [sp, #252]	; 0xfc
   1a1fc:	movw	r4, #51712	; 0xca00
   1a200:	mov	r3, #0
   1a204:	movt	r4, #15258	; 0x3b9a
   1a208:	mov	r2, r4
   1a20c:	asr	r1, r5, #31
   1a210:	adds	r7, r5, r0
   1a214:	adc	r6, r1, r0, asr #31
   1a218:	mov	r0, r7
   1a21c:	mov	r1, r6
   1a220:	bl	20168 <__assert_fail@plt+0xebb0>
   1a224:	adds	r0, r2, r4
   1a228:	mov	r2, r4
   1a22c:	adc	r1, r3, #0
   1a230:	mov	r3, #0
   1a234:	bl	20168 <__assert_fail@plt+0xebb0>
   1a238:	subs	r0, r7, r2
   1a23c:	str	r2, [sp, #100]	; 0x64
   1a240:	mov	r3, #0
   1a244:	sbc	r1, r6, r2, asr #31
   1a248:	mov	r2, r4
   1a24c:	bl	20168 <__assert_fail@plt+0xebb0>
   1a250:	str	r0, [sp, #104]	; 0x68
   1a254:	ldr	r0, [sp, #40]	; 0x28
   1a258:	str	r1, [sp, #108]	; 0x6c
   1a25c:	ldm	r0, {r6, r9}
   1a260:	cmn	r9, #1
   1a264:	ble	1a288 <__assert_fail@plt+0x8cd0>
   1a268:	movw	r1, #24175	; 0x5e6f
   1a26c:	movw	r0, #6699	; 0x1a2b
   1a270:	movt	r1, #15437	; 0x3c4d
   1a274:	movt	r0, #9
   1a278:	subs	r1, r1, r6
   1a27c:	sbcs	r0, r0, r9
   1a280:	bge	1a2bc <__assert_fail@plt+0x8d04>
   1a284:	b	1a49c <__assert_fail@plt+0x8ee4>
   1a288:	mvn	r1, #0
   1a28c:	eor	r0, r6, r1
   1a290:	eor	r1, r9, r1
   1a294:	orrs	r0, r0, r1
   1a298:	beq	1a2bc <__assert_fail@plt+0x8d04>
   1a29c:	mov	r0, #0
   1a2a0:	mov	r1, #-2147483648	; 0x80000000
   1a2a4:	mov	r2, r6
   1a2a8:	mov	r3, r9
   1a2ac:	bl	20168 <__assert_fail@plt+0xebb0>
   1a2b0:	subs	r0, r0, #3600	; 0xe10
   1a2b4:	sbcs	r0, r1, #0
   1a2b8:	blt	1a49c <__assert_fail@plt+0x8ee4>
   1a2bc:	mov	r0, #3600	; 0xe10
   1a2c0:	mov	r3, #0
   1a2c4:	umull	r1, r2, r6, r0
   1a2c8:	mla	r0, r9, r0, r2
   1a2cc:	asr	r2, sl, #31
   1a2d0:	adds	r4, sl, r1
   1a2d4:	mov	r1, #0
   1a2d8:	adc	sl, r2, r0
   1a2dc:	cmn	sl, #1
   1a2e0:	movwgt	r3, #1
   1a2e4:	cmn	r2, #1
   1a2e8:	mov	r2, #0
   1a2ec:	movwgt	r2, #1
   1a2f0:	subs	r3, r2, r3
   1a2f4:	movwne	r3, #1
   1a2f8:	cmn	r0, #1
   1a2fc:	movwgt	r1, #1
   1a300:	sub	r0, r2, r1
   1a304:	clz	r0, r0
   1a308:	lsr	r0, r0, #5
   1a30c:	tst	r0, r3
   1a310:	bne	1a49c <__assert_fail@plt+0x8ee4>
   1a314:	ldr	r0, [sp, #36]	; 0x24
   1a318:	ldm	r0, {r0, r7}
   1a31c:	cmn	r7, #1
   1a320:	str	r0, [sp, #96]	; 0x60
   1a324:	ble	1a34c <__assert_fail@plt+0x8d94>
   1a328:	ldr	r2, [sp, #96]	; 0x60
   1a32c:	movw	r1, #8738	; 0x2222
   1a330:	movw	r0, #8738	; 0x2222
   1a334:	movt	r1, #8738	; 0x2222
   1a338:	movt	r0, #546	; 0x222
   1a33c:	subs	r1, r1, r2
   1a340:	sbcs	r0, r0, r7
   1a344:	bge	1a384 <__assert_fail@plt+0x8dcc>
   1a348:	b	1a49c <__assert_fail@plt+0x8ee4>
   1a34c:	ldr	r0, [sp, #96]	; 0x60
   1a350:	mvn	r1, #0
   1a354:	eor	r0, r0, r1
   1a358:	eor	r1, r7, r1
   1a35c:	orrs	r0, r0, r1
   1a360:	beq	1a384 <__assert_fail@plt+0x8dcc>
   1a364:	ldr	r2, [sp, #96]	; 0x60
   1a368:	mov	r0, #0
   1a36c:	mov	r1, #-2147483648	; 0x80000000
   1a370:	mov	r3, r7
   1a374:	bl	20168 <__assert_fail@plt+0xebb0>
   1a378:	subs	r0, r0, #60	; 0x3c
   1a37c:	sbcs	r0, r1, #0
   1a380:	blt	1a49c <__assert_fail@plt+0x8ee4>
   1a384:	ldr	r1, [sp, #96]	; 0x60
   1a388:	mov	r0, #60	; 0x3c
   1a38c:	rsb	r2, r7, r7, lsl #4
   1a390:	mov	r3, #0
   1a394:	umull	r0, r1, r1, r0
   1a398:	add	r1, r1, r2, lsl #2
   1a39c:	adds	ip, r4, r0
   1a3a0:	mov	r0, #0
   1a3a4:	mov	r2, #0
   1a3a8:	adc	r4, sl, r1
   1a3ac:	cmn	r4, #1
   1a3b0:	movwgt	r0, #1
   1a3b4:	cmn	sl, #1
   1a3b8:	movwgt	r3, #1
   1a3bc:	subs	r0, r3, r0
   1a3c0:	movwne	r0, #1
   1a3c4:	cmn	r1, #1
   1a3c8:	mov	r1, #0
   1a3cc:	movwgt	r1, #1
   1a3d0:	sub	r1, r3, r1
   1a3d4:	clz	r1, r1
   1a3d8:	lsr	r1, r1, #5
   1a3dc:	ands	r0, r1, r0
   1a3e0:	bne	1a49c <__assert_fail@plt+0x8ee4>
   1a3e4:	ldr	r1, [sp, #32]
   1a3e8:	cmn	r4, #1
   1a3ec:	mov	r0, #0
   1a3f0:	mov	r3, #0
   1a3f4:	movwgt	r0, #1
   1a3f8:	ldr	lr, [r1]
   1a3fc:	ldr	sl, [r1, #4]
   1a400:	adds	ip, ip, lr
   1a404:	adc	r4, r4, sl
   1a408:	cmn	r4, #1
   1a40c:	movwgt	r3, #1
   1a410:	subs	r3, r0, r3
   1a414:	movwne	r3, #1
   1a418:	cmn	sl, #1
   1a41c:	movwgt	r2, #1
   1a420:	sub	r0, r0, r2
   1a424:	clz	r0, r0
   1a428:	lsr	r0, r0, #5
   1a42c:	ands	r0, r0, r3
   1a430:	bne	1a49c <__assert_fail@plt+0x8ee4>
   1a434:	ldr	r1, [sp, #104]	; 0x68
   1a438:	cmn	r4, #1
   1a43c:	mov	r2, #0
   1a440:	mov	r3, #0
   1a444:	mov	r0, #0
   1a448:	movwgt	r2, #1
   1a44c:	adds	r1, ip, r1
   1a450:	str	r1, [sp, #104]	; 0x68
   1a454:	ldr	r1, [sp, #108]	; 0x6c
   1a458:	adc	r4, r4, r1
   1a45c:	cmn	r4, #1
   1a460:	movwgt	r3, #1
   1a464:	subs	r3, r2, r3
   1a468:	movwne	r3, #1
   1a46c:	cmn	r1, #1
   1a470:	movwgt	r0, #1
   1a474:	sub	r0, r2, r0
   1a478:	clz	r0, r0
   1a47c:	lsr	r0, r0, #5
   1a480:	tst	r0, r3
   1a484:	ldreq	r1, [sp, #104]	; 0x68
   1a488:	asreq	r0, r1, #31
   1a48c:	eoreq	r2, r1, r1
   1a490:	eoreq	r0, r4, r0
   1a494:	orrseq	r0, r2, r0
   1a498:	beq	1a4d8 <__assert_fail@plt+0x8f20>
   1a49c:	ldrb	r0, [sp, #341]	; 0x155
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a4c0 <__assert_fail@plt+0x8f08>
   1a4a8:	movw	r1, #9190	; 0x23e6
   1a4ac:	mov	r0, #0
   1a4b0:	mov	r2, #5
   1a4b4:	movt	r1, #2
   1a4b8:	bl	11318 <dcgettext@plt>
   1a4bc:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a4c0:	ldr	r9, [fp, #8]
   1a4c4:	mov	r7, #0
   1a4c8:	mov	r5, r8
   1a4cc:	cmp	r5, r9
   1a4d0:	bne	18030 <__assert_fail@plt+0x6a78>
   1a4d4:	b	18038 <__assert_fail@plt+0x6a80>
   1a4d8:	ldr	r0, [sp, #68]	; 0x44
   1a4dc:	ldr	r1, [sp, #104]	; 0x68
   1a4e0:	ldr	r2, [sp, #100]	; 0x64
   1a4e4:	str	r1, [r0]
   1a4e8:	str	r2, [r0, #4]
   1a4ec:	ldrb	r0, [sp, #341]	; 0x155
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1a5cc <__assert_fail@plt+0x9014>
   1a4f8:	ldr	r1, [sp, #96]	; 0x60
   1a4fc:	orr	r2, r9, r5, asr #31
   1a500:	orr	r0, r6, r5
   1a504:	orr	r2, r2, r7
   1a508:	orr	r0, r0, r1
   1a50c:	orr	r1, r2, sl
   1a510:	orr	r0, r0, lr
   1a514:	orrs	r0, r0, r1
   1a518:	beq	1a5cc <__assert_fail@plt+0x9014>
   1a51c:	movw	r1, #9238	; 0x2416
   1a520:	mov	r0, #0
   1a524:	mov	r2, #5
   1a528:	movt	r1, #2
   1a52c:	bl	11318 <dcgettext@plt>
   1a530:	ldr	r1, [sp, #40]	; 0x28
   1a534:	ldm	r1, {r3, r9}
   1a538:	ldr	r1, [sp, #36]	; 0x24
   1a53c:	ldm	r1, {r2, r5}
   1a540:	ldr	r1, [sp, #32]
   1a544:	ldrd	r6, [r1]
   1a548:	ldr	r1, [sp, #304]	; 0x130
   1a54c:	stm	sp, {r2, r5, r6, r7}
   1a550:	mov	r2, r3
   1a554:	mov	r3, r9
   1a558:	str	r1, [sp, #16]
   1a55c:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a560:	movw	r1, #9314	; 0x2462
   1a564:	mov	r0, #0
   1a568:	mov	r2, #5
   1a56c:	movt	r1, #2
   1a570:	bl	11318 <dcgettext@plt>
   1a574:	ldr	r2, [sp, #104]	; 0x68
   1a578:	mov	r3, r4
   1a57c:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a580:	ldr	r0, [fp, #-144]	; 0xffffff70
   1a584:	cmn	r0, #1
   1a588:	beq	1a5cc <__assert_fail@plt+0x9014>
   1a58c:	ldr	r1, [sp, #68]	; 0x44
   1a590:	add	r2, sp, #116	; 0x74
   1a594:	mov	r0, r8
   1a598:	bl	1ccf8 <__assert_fail@plt+0xb740>
   1a59c:	cmp	r0, #0
   1a5a0:	beq	1a5cc <__assert_fail@plt+0x9014>
   1a5a4:	ldr	r0, [sp, #148]	; 0x94
   1a5a8:	ldr	r1, [fp, #-144]	; 0xffffff70
   1a5ac:	cmp	r1, r0
   1a5b0:	beq	1a5cc <__assert_fail@plt+0x9014>
   1a5b4:	movw	r1, #9349	; 0x2485
   1a5b8:	mov	r0, #0
   1a5bc:	mov	r2, #5
   1a5c0:	movt	r1, #2
   1a5c4:	bl	11318 <dcgettext@plt>
   1a5c8:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a5cc:	ldr	r9, [fp, #8]
   1a5d0:	mov	r5, r8
   1a5d4:	b	177b0 <__assert_fail@plt+0x61f8>
   1a5d8:	add	r2, r2, #3
   1a5dc:	mov	r3, #0
   1a5e0:	strb	r3, [r2]
   1a5e4:	movw	r2, #10033	; 0x2731
   1a5e8:	mvn	r3, #0
   1a5ec:	movt	r2, #2
   1a5f0:	stm	sp, {r2, sl}
   1a5f4:	mov	r2, #1
   1a5f8:	bl	115ac <__snprintf_chk@plt>
   1a5fc:	sub	r1, fp, #348	; 0x15c
   1a600:	mov	r0, r9
   1a604:	bl	172b8 <__assert_fail@plt+0x5d00>
   1a608:	ldr	r9, [fp, #8]
   1a60c:	mov	r5, r8
   1a610:	mov	r7, #0
   1a614:	cmp	r5, r9
   1a618:	bne	18030 <__assert_fail@plt+0x6a78>
   1a61c:	b	18038 <__assert_fail@plt+0x6a80>
   1a620:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a624:	add	fp, sp, #24
   1a628:	sub	sp, sp, #8
   1a62c:	mov	r6, r0
   1a630:	movw	r0, #6802	; 0x1a92
   1a634:	mov	r8, r2
   1a638:	mov	r5, r1
   1a63c:	movt	r0, #2
   1a640:	bl	113c0 <getenv@plt>
   1a644:	mov	r4, r0
   1a648:	bl	1cc34 <__assert_fail@plt+0xb67c>
   1a64c:	cmp	r0, #0
   1a650:	beq	1a688 <__assert_fail@plt+0x90d0>
   1a654:	mov	r7, r0
   1a658:	stm	sp, {r0, r4}
   1a65c:	mov	r0, r6
   1a660:	mov	r1, r5
   1a664:	mov	r2, r8
   1a668:	mov	r3, #0
   1a66c:	bl	17320 <__assert_fail@plt+0x5d68>
   1a670:	mov	r4, r0
   1a674:	mov	r0, r7
   1a678:	bl	1ccd0 <__assert_fail@plt+0xb718>
   1a67c:	mov	r0, r4
   1a680:	sub	sp, fp, #24
   1a684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a688:	mov	r0, #0
   1a68c:	sub	sp, fp, #24
   1a690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a694:	push	{r4, r5, fp, lr}
   1a698:	add	fp, sp, #8
   1a69c:	sub	sp, sp, #16
   1a6a0:	mov	r5, r0
   1a6a4:	ldrb	r0, [r0, #188]	; 0xbc
   1a6a8:	mov	r4, r1
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a6f4 <__assert_fail@plt+0x913c>
   1a6b4:	ldrd	r0, [r5, #8]
   1a6b8:	adds	r2, r0, #1
   1a6bc:	adc	r3, r1, #0
   1a6c0:	rsbs	r2, r2, #13
   1a6c4:	rscs	r2, r3, #0
   1a6c8:	bcc	1a760 <__assert_fail@plt+0x91a8>
   1a6cc:	movw	r2, #4736	; 0x1280
   1a6d0:	mov	r3, #11
   1a6d4:	movw	r1, #3686	; 0xe66
   1a6d8:	movt	r2, #2
   1a6dc:	movt	r1, #2
   1a6e0:	mla	r0, r0, r3, r2
   1a6e4:	str	r1, [sp]
   1a6e8:	add	r0, r0, #11
   1a6ec:	str	r0, [sp, #4]
   1a6f0:	b	1a774 <__assert_fail@plt+0x91bc>
   1a6f4:	mov	r0, #0
   1a6f8:	strb	r0, [r4]
   1a6fc:	ldr	r1, [r5, #16]
   1a700:	cmp	r1, #0
   1a704:	bmi	1a794 <__assert_fail@plt+0x91dc>
   1a708:	cmp	r0, #99	; 0x63
   1a70c:	bhi	1a794 <__assert_fail@plt+0x91dc>
   1a710:	cmp	r1, #6
   1a714:	bgt	1a794 <__assert_fail@plt+0x91dc>
   1a718:	movw	r2, #4890	; 0x131a
   1a71c:	cmp	r0, #0
   1a720:	mvn	r3, #0
   1a724:	movt	r2, #2
   1a728:	add	r1, r2, r1, lsl #2
   1a72c:	movw	r2, #3685	; 0xe65
   1a730:	movt	r2, #2
   1a734:	str	r1, [sp, #4]
   1a738:	rsb	r1, r0, #100	; 0x64
   1a73c:	addeq	r2, r2, #1
   1a740:	str	r2, [sp]
   1a744:	add	r2, r4, r0
   1a748:	mov	r0, r2
   1a74c:	mov	r2, #1
   1a750:	bl	115ac <__snprintf_chk@plt>
   1a754:	mov	r0, r4
   1a758:	sub	sp, fp, #8
   1a75c:	pop	{r4, r5, fp, pc}
   1a760:	str	r0, [sp, #8]
   1a764:	movw	r0, #6970	; 0x1b3a
   1a768:	str	r1, [sp, #12]
   1a76c:	movt	r0, #2
   1a770:	str	r0, [sp]
   1a774:	mov	r0, r4
   1a778:	mov	r1, #100	; 0x64
   1a77c:	mov	r2, #1
   1a780:	mvn	r3, #0
   1a784:	bl	115ac <__snprintf_chk@plt>
   1a788:	ldr	r1, [r5, #16]
   1a78c:	cmp	r1, #0
   1a790:	bpl	1a708 <__assert_fail@plt+0x9150>
   1a794:	mov	r0, r4
   1a798:	sub	sp, fp, #8
   1a79c:	pop	{r4, r5, fp, pc}
   1a7a0:	push	{r4, r5, r6, sl, fp, lr}
   1a7a4:	add	fp, sp, #16
   1a7a8:	mov	r4, r1
   1a7ac:	movw	r1, #7280	; 0x1c70
   1a7b0:	mov	r5, r0
   1a7b4:	movt	r1, #2
   1a7b8:	mov	r0, r4
   1a7bc:	bl	112a0 <strcmp@plt>
   1a7c0:	cmp	r0, #0
   1a7c4:	beq	1a864 <__assert_fail@plt+0x92ac>
   1a7c8:	movw	r1, #7284	; 0x1c74
   1a7cc:	mov	r0, r4
   1a7d0:	movt	r1, #2
   1a7d4:	bl	112a0 <strcmp@plt>
   1a7d8:	movw	r6, #5988	; 0x1764
   1a7dc:	cmp	r0, #0
   1a7e0:	movt	r6, #2
   1a7e4:	beq	1a874 <__assert_fail@plt+0x92bc>
   1a7e8:	movw	r1, #7777	; 0x1e61
   1a7ec:	mov	r0, r4
   1a7f0:	movt	r1, #2
   1a7f4:	bl	112a0 <strcmp@plt>
   1a7f8:	cmp	r0, #0
   1a7fc:	beq	1a880 <__assert_fail@plt+0x92c8>
   1a800:	ldr	r1, [r5, #192]	; 0xc0
   1a804:	cmp	r1, #0
   1a808:	beq	1a82c <__assert_fail@plt+0x9274>
   1a80c:	add	r5, r5, #204	; 0xcc
   1a810:	mov	r0, r4
   1a814:	bl	112a0 <strcmp@plt>
   1a818:	cmp	r0, #0
   1a81c:	beq	1a88c <__assert_fail@plt+0x92d4>
   1a820:	ldr	r1, [r5], #12
   1a824:	cmp	r1, #0
   1a828:	bne	1a810 <__assert_fail@plt+0x9258>
   1a82c:	movw	r5, #6036	; 0x1794
   1a830:	movw	r1, #7287	; 0x1c77
   1a834:	movt	r5, #2
   1a838:	movt	r1, #2
   1a83c:	mov	r0, r4
   1a840:	bl	112a0 <strcmp@plt>
   1a844:	cmp	r0, #0
   1a848:	beq	1a890 <__assert_fail@plt+0x92d8>
   1a84c:	ldr	r1, [r5, #12]!
   1a850:	cmp	r1, #0
   1a854:	bne	1a83c <__assert_fail@plt+0x9284>
   1a858:	mov	r5, #0
   1a85c:	mov	r0, r5
   1a860:	pop	{r4, r5, r6, sl, fp, pc}
   1a864:	movw	r5, #5988	; 0x1764
   1a868:	movt	r5, #2
   1a86c:	mov	r0, r5
   1a870:	pop	{r4, r5, r6, sl, fp, pc}
   1a874:	add	r5, r6, #12
   1a878:	mov	r0, r5
   1a87c:	pop	{r4, r5, r6, sl, fp, pc}
   1a880:	add	r5, r6, #24
   1a884:	mov	r0, r5
   1a888:	pop	{r4, r5, r6, sl, fp, pc}
   1a88c:	sub	r5, r5, #12
   1a890:	mov	r0, r5
   1a894:	pop	{r4, r5, r6, sl, fp, pc}
   1a898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a89c:	add	fp, sp, #28
   1a8a0:	sub	sp, sp, #52	; 0x34
   1a8a4:	str	r0, [sp]
   1a8a8:	mov	r0, r1
   1a8ac:	mov	r5, r2
   1a8b0:	mov	r6, r1
   1a8b4:	bl	11468 <strlen@plt>
   1a8b8:	mov	r9, #0
   1a8bc:	mov	r7, r0
   1a8c0:	tst	r5, #4
   1a8c4:	beq	1a8f4 <__assert_fail@plt+0x933c>
   1a8c8:	mov	r4, r0
   1a8cc:	mov	r0, r6
   1a8d0:	mov	r1, #46	; 0x2e
   1a8d4:	bl	11474 <strchr@plt>
   1a8d8:	cmp	r0, #0
   1a8dc:	beq	1a8f4 <__assert_fail@plt+0x933c>
   1a8e0:	sub	r7, r0, r6
   1a8e4:	mov	r9, r0
   1a8e8:	sub	r1, r4, r7
   1a8ec:	cmp	r1, #3
   1a8f0:	bne	1abc8 <__assert_fail@plt+0x9610>
   1a8f4:	sub	r0, r7, #8
   1a8f8:	cmp	r0, #4
   1a8fc:	bhi	1abc8 <__assert_fail@plt+0x9610>
   1a900:	ands	r0, r7, #1
   1a904:	bne	1abc8 <__assert_fail@plt+0x9610>
   1a908:	mov	r0, #0
   1a90c:	ldrb	r1, [r6, r0]
   1a910:	sub	r1, r1, #48	; 0x30
   1a914:	cmp	r1, #10
   1a918:	bcs	1abc8 <__assert_fail@plt+0x9610>
   1a91c:	add	r0, r0, #1
   1a920:	cmp	r7, r0
   1a924:	bne	1a90c <__assert_fail@plt+0x9354>
   1a928:	add	r0, r7, r7, lsr #31
   1a92c:	cmp	r7, #2
   1a930:	asr	r0, r0, #1
   1a934:	blt	1a968 <__assert_fail@plt+0x93b0>
   1a938:	add	r1, r6, #1
   1a93c:	add	r2, sp, #4
   1a940:	mov	r3, r0
   1a944:	ldrb	r7, [r1, #-1]
   1a948:	ldrb	r6, [r1]
   1a94c:	add	r1, r1, #2
   1a950:	subs	r3, r3, #1
   1a954:	add	r7, r7, r7, lsl #2
   1a958:	add	r7, r6, r7, lsl #1
   1a95c:	sub	r7, r7, #528	; 0x210
   1a960:	str	r7, [r2], #4
   1a964:	bne	1a944 <__assert_fail@plt+0x938c>
   1a968:	ands	r8, r5, #1
   1a96c:	beq	1a978 <__assert_fail@plt+0x93c0>
   1a970:	add	r1, sp, #4
   1a974:	b	1a9f0 <__assert_fail@plt+0x9438>
   1a978:	subs	r7, r0, #4
   1a97c:	beq	1a9a4 <__assert_fail@plt+0x93ec>
   1a980:	cmp	r0, #6
   1a984:	beq	1a9c8 <__assert_fail@plt+0x9410>
   1a988:	ldr	ip, [sp, #4]
   1a98c:	cmp	ip, #68	; 0x44
   1a990:	bgt	1a9e4 <__assert_fail@plt+0x942c>
   1a994:	tst	r5, #8
   1a998:	bne	1abc8 <__assert_fail@plt+0x9610>
   1a99c:	add	ip, ip, #100	; 0x64
   1a9a0:	b	1a9e4 <__assert_fail@plt+0x942c>
   1a9a4:	mov	r0, #0
   1a9a8:	bl	1130c <time@plt>
   1a9ac:	str	r0, [fp, #-32]	; 0xffffffe0
   1a9b0:	sub	r0, fp, #32
   1a9b4:	bl	11408 <localtime@plt>
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1abc8 <__assert_fail@plt+0x9610>
   1a9c0:	ldr	ip, [r0, #20]
   1a9c4:	b	1a9e4 <__assert_fail@plt+0x942c>
   1a9c8:	tst	r5, #2
   1a9cc:	beq	1abc8 <__assert_fail@plt+0x9610>
   1a9d0:	ldmib	sp, {r0, r1}
   1a9d4:	mov	r2, #100	; 0x64
   1a9d8:	mla	r0, r0, r2, r1
   1a9dc:	movw	r1, #1900	; 0x76c
   1a9e0:	sub	ip, r0, r1
   1a9e4:	add	r0, sp, #4
   1a9e8:	add	r1, r0, r7, lsl #2
   1a9ec:	mov	r0, #4
   1a9f0:	ldr	r6, [r1]
   1a9f4:	ldr	r3, [r1, #12]
   1a9f8:	ldmib	r1, {r4, lr}
   1a9fc:	cmp	r8, #0
   1aa00:	beq	1aaa4 <__assert_fail@plt+0x94ec>
   1aa04:	cmp	r0, #4
   1aa08:	beq	1aa40 <__assert_fail@plt+0x9488>
   1aa0c:	cmp	r0, #6
   1aa10:	beq	1aa84 <__assert_fail@plt+0x94cc>
   1aa14:	ldr	ip, [r1, #16]
   1aa18:	cmp	ip, #68	; 0x44
   1aa1c:	bgt	1aaa4 <__assert_fail@plt+0x94ec>
   1aa20:	tst	r5, #8
   1aa24:	bne	1abc8 <__assert_fail@plt+0x9610>
   1aa28:	add	ip, ip, #100	; 0x64
   1aa2c:	mov	r7, #0
   1aa30:	cmp	r9, #0
   1aa34:	mov	r5, #0
   1aa38:	bne	1aab4 <__assert_fail@plt+0x94fc>
   1aa3c:	b	1aae0 <__assert_fail@plt+0x9528>
   1aa40:	mov	r0, #0
   1aa44:	mov	r7, r3
   1aa48:	mov	r5, lr
   1aa4c:	bl	1130c <time@plt>
   1aa50:	str	r0, [fp, #-32]	; 0xffffffe0
   1aa54:	sub	r0, fp, #32
   1aa58:	bl	11408 <localtime@plt>
   1aa5c:	cmp	r0, #0
   1aa60:	beq	1abc8 <__assert_fail@plt+0x9610>
   1aa64:	ldr	ip, [r0, #20]
   1aa68:	mov	lr, r5
   1aa6c:	mov	r3, r7
   1aa70:	mov	r7, #0
   1aa74:	cmp	r9, #0
   1aa78:	mov	r5, #0
   1aa7c:	bne	1aab4 <__assert_fail@plt+0x94fc>
   1aa80:	b	1aae0 <__assert_fail@plt+0x9528>
   1aa84:	tst	r5, #2
   1aa88:	beq	1abc8 <__assert_fail@plt+0x9610>
   1aa8c:	ldr	r0, [r1, #16]
   1aa90:	ldr	r1, [r1, #20]
   1aa94:	mov	r2, #100	; 0x64
   1aa98:	mla	r0, r0, r2, r1
   1aa9c:	movw	r1, #1900	; 0x76c
   1aaa0:	sub	ip, r0, r1
   1aaa4:	mov	r7, #0
   1aaa8:	cmp	r9, #0
   1aaac:	mov	r5, #0
   1aab0:	beq	1aae0 <__assert_fail@plt+0x9528>
   1aab4:	ldrb	r0, [r9, #1]
   1aab8:	sub	r1, r0, #48	; 0x30
   1aabc:	cmp	r1, #9
   1aac0:	bhi	1abc8 <__assert_fail@plt+0x9610>
   1aac4:	ldrb	r1, [r9, #2]
   1aac8:	sub	r2, r1, #48	; 0x30
   1aacc:	cmp	r2, #9
   1aad0:	bhi	1abc8 <__assert_fail@plt+0x9610>
   1aad4:	add	r0, r0, r0, lsl #2
   1aad8:	add	r0, r1, r0, lsl #1
   1aadc:	sub	r5, r0, #528	; 0x210
   1aae0:	mvn	r0, #0
   1aae4:	sub	r6, r6, #1
   1aae8:	mov	sl, lr
   1aaec:	mov	r9, r3
   1aaf0:	mov	r8, ip
   1aaf4:	str	r0, [sp, #36]	; 0x24
   1aaf8:	str	r0, [sp, #28]
   1aafc:	add	r0, sp, #16
   1ab00:	stm	r0, {r4, r6, ip}
   1ab04:	add	r0, sp, #4
   1ab08:	str	lr, [sp, #12]
   1ab0c:	str	r3, [sp, #8]
   1ab10:	str	r5, [sp, #4]
   1ab14:	bl	112b8 <mktime@plt>
   1ab18:	ldr	r1, [sp, #28]
   1ab1c:	cmp	r1, #0
   1ab20:	bmi	1abcc <__assert_fail@plt+0x9614>
   1ab24:	mov	ip, #0
   1ab28:	ldr	r3, [sp, #20]
   1ab2c:	ldr	r2, [sp, #24]
   1ab30:	mov	r1, r6
   1ab34:	ldr	r7, [sp, #12]
   1ab38:	ldr	lr, [sp, #4]
   1ab3c:	eor	r3, r3, r6
   1ab40:	ldr	r6, [sp, #16]
   1ab44:	eor	r2, r2, r8
   1ab48:	eor	r7, r7, sl
   1ab4c:	orr	r2, r3, r2
   1ab50:	ldr	r3, [sp, #8]
   1ab54:	eor	r6, r6, r4
   1ab58:	orr	r2, r2, r6
   1ab5c:	orr	r2, r2, r7
   1ab60:	eor	r7, r3, r9
   1ab64:	eor	r3, lr, r5
   1ab68:	orr	r2, r2, r7
   1ab6c:	orrs	r2, r2, r3
   1ab70:	beq	1abd8 <__assert_fail@plt+0x9620>
   1ab74:	mov	r7, #0
   1ab78:	cmp	r5, #60	; 0x3c
   1ab7c:	bne	1abcc <__assert_fail@plt+0x9614>
   1ab80:	mvn	r0, #0
   1ab84:	mov	r5, #59	; 0x3b
   1ab88:	mov	r6, r1
   1ab8c:	str	r0, [sp, #36]	; 0x24
   1ab90:	str	r0, [sp, #28]
   1ab94:	add	r0, sp, #4
   1ab98:	str	r8, [sp, #24]
   1ab9c:	str	r1, [sp, #20]
   1aba0:	str	r4, [sp, #16]
   1aba4:	str	sl, [sp, #12]
   1aba8:	str	r9, [sp, #8]
   1abac:	str	r5, [sp, #4]
   1abb0:	bl	112b8 <mktime@plt>
   1abb4:	ldr	r2, [sp, #28]
   1abb8:	mov	ip, #1
   1abbc:	cmp	r2, #0
   1abc0:	bpl	1ab28 <__assert_fail@plt+0x9570>
   1abc4:	b	1abcc <__assert_fail@plt+0x9614>
   1abc8:	mov	r7, #0
   1abcc:	mov	r0, r7
   1abd0:	sub	sp, fp, #28
   1abd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abd8:	adds	r0, r0, ip
   1abdc:	mov	r7, #0
   1abe0:	bvs	1abcc <__assert_fail@plt+0x9614>
   1abe4:	ldr	r1, [sp]
   1abe8:	mov	r7, #1
   1abec:	str	r0, [r1]
   1abf0:	mov	r0, r7
   1abf4:	sub	sp, fp, #28
   1abf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abfc:	push	{r4, sl, fp, lr}
   1ac00:	add	fp, sp, #8
   1ac04:	sub	sp, sp, #8
   1ac08:	movw	r0, #10071	; 0x2757
   1ac0c:	movt	r0, #2
   1ac10:	bl	113c0 <getenv@plt>
   1ac14:	movw	r4, #4201	; 0x1069
   1ac18:	cmp	r0, #0
   1ac1c:	movt	r4, #3
   1ac20:	beq	1ac4c <__assert_fail@plt+0x9694>
   1ac24:	ldrb	r1, [r0]
   1ac28:	cmp	r1, #0
   1ac2c:	beq	1ac4c <__assert_fail@plt+0x9694>
   1ac30:	add	r1, sp, #4
   1ac34:	mov	r2, #10
   1ac38:	bl	112ac <strtol@plt>
   1ac3c:	ldr	r1, [sp, #4]
   1ac40:	ldrb	r1, [r1]
   1ac44:	cmp	r1, #0
   1ac48:	moveq	r4, r0
   1ac4c:	mov	r0, r4
   1ac50:	sub	sp, fp, #8
   1ac54:	pop	{r4, sl, fp, pc}
   1ac58:	push	{r4, r5, fp, lr}
   1ac5c:	add	fp, sp, #8
   1ac60:	cmp	r0, #0
   1ac64:	beq	1acf8 <__assert_fail@plt+0x9740>
   1ac68:	mov	r1, #47	; 0x2f
   1ac6c:	mov	r4, r0
   1ac70:	bl	11510 <strrchr@plt>
   1ac74:	cmp	r0, #0
   1ac78:	mov	r5, r4
   1ac7c:	addne	r5, r0, #1
   1ac80:	sub	r0, r5, r4
   1ac84:	cmp	r0, #7
   1ac88:	blt	1acdc <__assert_fail@plt+0x9724>
   1ac8c:	movw	r1, #10143	; 0x279f
   1ac90:	sub	r0, r5, #7
   1ac94:	mov	r2, #7
   1ac98:	movt	r1, #2
   1ac9c:	bl	1157c <strncmp@plt>
   1aca0:	cmp	r0, #0
   1aca4:	bne	1acdc <__assert_fail@plt+0x9724>
   1aca8:	movw	r1, #10151	; 0x27a7
   1acac:	mov	r0, r5
   1acb0:	mov	r2, #3
   1acb4:	movt	r1, #2
   1acb8:	bl	1157c <strncmp@plt>
   1acbc:	cmp	r0, #0
   1acc0:	beq	1accc <__assert_fail@plt+0x9714>
   1acc4:	mov	r4, r5
   1acc8:	b	1acdc <__assert_fail@plt+0x9724>
   1accc:	movw	r0, #12688	; 0x3190
   1acd0:	add	r4, r5, #3
   1acd4:	movt	r0, #3
   1acd8:	str	r4, [r0]
   1acdc:	movw	r0, #12692	; 0x3194
   1ace0:	movt	r0, #3
   1ace4:	str	r4, [r0]
   1ace8:	movw	r0, #12760	; 0x31d8
   1acec:	movt	r0, #3
   1acf0:	str	r4, [r0]
   1acf4:	pop	{r4, r5, fp, pc}
   1acf8:	movw	r0, #12704	; 0x31a0
   1acfc:	mov	r1, #55	; 0x37
   1ad00:	mov	r2, #1
   1ad04:	movt	r0, #3
   1ad08:	ldr	r3, [r0]
   1ad0c:	movw	r0, #10087	; 0x2767
   1ad10:	movt	r0, #2
   1ad14:	bl	1136c <fwrite@plt>
   1ad18:	bl	11588 <abort@plt>
   1ad1c:	push	{r4, r5, r6, sl, fp, lr}
   1ad20:	add	fp, sp, #16
   1ad24:	mov	r4, r0
   1ad28:	movw	r0, #12768	; 0x31e0
   1ad2c:	movt	r0, #3
   1ad30:	cmp	r4, #0
   1ad34:	moveq	r4, r0
   1ad38:	bl	1148c <__errno_location@plt>
   1ad3c:	ldr	r6, [r0]
   1ad40:	mov	r5, r0
   1ad44:	mov	r0, r4
   1ad48:	mov	r1, #48	; 0x30
   1ad4c:	bl	1deec <__assert_fail@plt+0xc934>
   1ad50:	str	r6, [r5]
   1ad54:	pop	{r4, r5, r6, sl, fp, pc}
   1ad58:	movw	r1, #12768	; 0x31e0
   1ad5c:	cmp	r0, #0
   1ad60:	movt	r1, #3
   1ad64:	movne	r1, r0
   1ad68:	ldr	r0, [r1]
   1ad6c:	bx	lr
   1ad70:	movw	r2, #12768	; 0x31e0
   1ad74:	cmp	r0, #0
   1ad78:	movt	r2, #3
   1ad7c:	movne	r2, r0
   1ad80:	str	r1, [r2]
   1ad84:	bx	lr
   1ad88:	movw	r3, #12768	; 0x31e0
   1ad8c:	cmp	r0, #0
   1ad90:	and	r2, r2, #1
   1ad94:	movt	r3, #3
   1ad98:	movne	r3, r0
   1ad9c:	ubfx	r0, r1, #5, #3
   1ada0:	and	r1, r1, #31
   1ada4:	add	ip, r3, r0, lsl #2
   1ada8:	mov	r0, #1
   1adac:	ldr	r3, [ip, #8]
   1adb0:	and	r0, r0, r3, lsr r1
   1adb4:	eor	r2, r0, r2
   1adb8:	eor	r1, r3, r2, lsl r1
   1adbc:	str	r1, [ip, #8]
   1adc0:	bx	lr
   1adc4:	movw	r2, #12768	; 0x31e0
   1adc8:	cmp	r0, #0
   1adcc:	movt	r2, #3
   1add0:	movne	r2, r0
   1add4:	ldr	r0, [r2, #4]
   1add8:	str	r1, [r2, #4]
   1addc:	bx	lr
   1ade0:	push	{fp, lr}
   1ade4:	mov	fp, sp
   1ade8:	movw	r3, #12768	; 0x31e0
   1adec:	cmp	r0, #0
   1adf0:	movt	r3, #3
   1adf4:	movne	r3, r0
   1adf8:	cmp	r1, #0
   1adfc:	mov	r0, #10
   1ae00:	cmpne	r2, #0
   1ae04:	str	r0, [r3]
   1ae08:	bne	1ae10 <__assert_fail@plt+0x9858>
   1ae0c:	bl	11588 <abort@plt>
   1ae10:	str	r1, [r3, #40]	; 0x28
   1ae14:	str	r2, [r3, #44]	; 0x2c
   1ae18:	pop	{fp, pc}
   1ae1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae20:	add	fp, sp, #28
   1ae24:	sub	sp, sp, #20
   1ae28:	mov	r7, r0
   1ae2c:	ldr	r0, [fp, #8]
   1ae30:	movw	r5, #12768	; 0x31e0
   1ae34:	mov	r8, r3
   1ae38:	mov	r9, r2
   1ae3c:	mov	sl, r1
   1ae40:	movt	r5, #3
   1ae44:	cmp	r0, #0
   1ae48:	movne	r5, r0
   1ae4c:	bl	1148c <__errno_location@plt>
   1ae50:	ldr	r2, [r5, #40]	; 0x28
   1ae54:	ldr	r3, [r5, #44]	; 0x2c
   1ae58:	mov	r4, r0
   1ae5c:	ldm	r5, {r0, r1}
   1ae60:	add	r5, r5, #8
   1ae64:	ldr	r6, [r4]
   1ae68:	stm	sp, {r0, r1, r5}
   1ae6c:	mov	r0, r7
   1ae70:	mov	r1, sl
   1ae74:	str	r2, [sp, #12]
   1ae78:	str	r3, [sp, #16]
   1ae7c:	mov	r2, r9
   1ae80:	mov	r3, r8
   1ae84:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1ae88:	str	r6, [r4]
   1ae8c:	sub	sp, fp, #28
   1ae90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae98:	add	fp, sp, #28
   1ae9c:	sub	sp, sp, #156	; 0x9c
   1aea0:	str	r0, [fp, #-84]	; 0xffffffac
   1aea4:	add	r0, r2, #1
   1aea8:	mov	r6, r1
   1aeac:	mov	r7, r3
   1aeb0:	str	r2, [fp, #-80]	; 0xffffffb0
   1aeb4:	str	r0, [sp, #80]	; 0x50
   1aeb8:	ldr	r0, [fp, #12]
   1aebc:	and	r1, r0, #1
   1aec0:	str	r1, [sp, #36]	; 0x24
   1aec4:	and	r1, r0, #4
   1aec8:	str	r1, [sp, #32]
   1aecc:	ubfx	r8, r0, #1, #1
   1aed0:	bl	11384 <__ctype_get_mb_cur_max@plt>
   1aed4:	str	r0, [sp, #40]	; 0x28
   1aed8:	ldr	r0, [fp, #24]
   1aedc:	ldr	r4, [fp, #8]
   1aee0:	mov	r1, #0
   1aee4:	str	r1, [fp, #-52]	; 0xffffffcc
   1aee8:	mov	r1, #0
   1aeec:	str	r1, [sp, #60]	; 0x3c
   1aef0:	mov	r1, #1
   1aef4:	str	r1, [sp, #84]	; 0x54
   1aef8:	str	r0, [sp, #76]	; 0x4c
   1aefc:	ldr	r0, [fp, #20]
   1af00:	str	r0, [sp, #72]	; 0x48
   1af04:	mov	r0, #0
   1af08:	str	r0, [sp, #56]	; 0x38
   1af0c:	mov	r0, #0
   1af10:	str	r0, [fp, #-88]	; 0xffffffa8
   1af14:	mov	r0, #0
   1af18:	str	r0, [fp, #-72]	; 0xffffffb8
   1af1c:	mov	r0, #0
   1af20:	cmp	r4, #10
   1af24:	bhi	1c240 <__assert_fail@plt+0xac88>
   1af28:	add	r1, pc, #24
   1af2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1af30:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1af34:	mov	r5, r6
   1af38:	mov	r9, #0
   1af3c:	mov	r2, #1
   1af40:	mov	r3, #0
   1af44:	ldr	pc, [r1, r4, lsl #2]
   1af48:	andeq	fp, r1, r0, lsl r0
   1af4c:	andeq	fp, r1, ip, asr #32
   1af50:	andeq	fp, r1, r0, lsr #32
   1af54:	andeq	fp, r1, r8
   1af58:	andeq	fp, r1, r0, asr #32
   1af5c:	andeq	fp, r1, r4, lsr #1
   1af60:	andeq	fp, r1, r0, lsr r0
   1af64:	andeq	fp, r1, ip, lsl r3
   1af68:	andeq	sl, r1, r4, ror pc
   1af6c:	andeq	sl, r1, r4, ror pc
   1af70:	andeq	fp, r1, ip, lsr #3
   1af74:	movw	r6, #10231	; 0x27f7
   1af78:	mov	r0, #0
   1af7c:	mov	r2, #5
   1af80:	movt	r6, #2
   1af84:	mov	r1, r6
   1af88:	bl	11318 <dcgettext@plt>
   1af8c:	cmp	r0, r6
   1af90:	str	r0, [sp, #72]	; 0x48
   1af94:	bne	1b184 <__assert_fail@plt+0x9bcc>
   1af98:	bl	1e330 <__assert_fail@plt+0xcd78>
   1af9c:	ldrb	r1, [r0]
   1afa0:	and	r1, r1, #223	; 0xdf
   1afa4:	cmp	r1, #71	; 0x47
   1afa8:	beq	1b104 <__assert_fail@plt+0x9b4c>
   1afac:	cmp	r1, #85	; 0x55
   1afb0:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1afb4:	ldrb	r1, [r0, #1]
   1afb8:	and	r1, r1, #223	; 0xdf
   1afbc:	cmp	r1, #84	; 0x54
   1afc0:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1afc4:	ldrb	r1, [r0, #2]
   1afc8:	and	r1, r1, #223	; 0xdf
   1afcc:	cmp	r1, #70	; 0x46
   1afd0:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1afd4:	ldrb	r1, [r0, #3]
   1afd8:	cmp	r1, #45	; 0x2d
   1afdc:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1afe0:	ldrb	r1, [r0, #4]
   1afe4:	cmp	r1, #56	; 0x38
   1afe8:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1afec:	ldrb	r0, [r0, #5]
   1aff0:	cmp	r0, #0
   1aff4:	movw	r0, #10233	; 0x27f9
   1aff8:	movt	r0, #2
   1affc:	str	r0, [sp, #72]	; 0x48
   1b000:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b004:	b	1b184 <__assert_fail@plt+0x9bcc>
   1b008:	mov	r0, #1
   1b00c:	b	1b04c <__assert_fail@plt+0x9a94>
   1b010:	mov	r4, #0
   1b014:	mov	r9, #0
   1b018:	mov	r2, r0
   1b01c:	b	1b09c <__assert_fail@plt+0x9ae4>
   1b020:	tst	r8, #1
   1b024:	bne	1b04c <__assert_fail@plt+0x9a94>
   1b028:	mov	r2, r0
   1b02c:	b	1b074 <__assert_fail@plt+0x9abc>
   1b030:	mov	r0, #1
   1b034:	mov	r9, #0
   1b038:	mov	r4, #5
   1b03c:	b	1b0b8 <__assert_fail@plt+0x9b00>
   1b040:	mov	r2, #1
   1b044:	tst	r8, #1
   1b048:	beq	1b074 <__assert_fail@plt+0x9abc>
   1b04c:	mov	r1, #1
   1b050:	mov	r9, #0
   1b054:	mov	r4, #2
   1b058:	mov	r2, r0
   1b05c:	mov	r3, #1
   1b060:	str	r1, [fp, #-72]	; 0xffffffb8
   1b064:	movw	r1, #2749	; 0xabd
   1b068:	movt	r1, #2
   1b06c:	str	r1, [fp, #-88]	; 0xffffffa8
   1b070:	b	1b31c <__assert_fail@plt+0x9d64>
   1b074:	cmp	r5, #0
   1b078:	mov	r9, #1
   1b07c:	mov	r4, #2
   1b080:	movne	r0, #39	; 0x27
   1b084:	strbne	r0, [ip]
   1b088:	movw	r0, #2749	; 0xabd
   1b08c:	movt	r0, #2
   1b090:	str	r0, [fp, #-88]	; 0xffffffa8
   1b094:	mov	r0, #1
   1b098:	str	r0, [fp, #-72]	; 0xffffffb8
   1b09c:	mov	r3, #0
   1b0a0:	b	1b31c <__assert_fail@plt+0x9d64>
   1b0a4:	mov	r4, #5
   1b0a8:	tst	r8, #1
   1b0ac:	beq	1b0d4 <__assert_fail@plt+0x9b1c>
   1b0b0:	mov	r0, #1
   1b0b4:	mov	r9, #0
   1b0b8:	str	r0, [fp, #-72]	; 0xffffffb8
   1b0bc:	movw	r0, #7674	; 0x1dfa
   1b0c0:	mov	r2, #1
   1b0c4:	mov	r3, #1
   1b0c8:	movt	r0, #2
   1b0cc:	str	r0, [fp, #-88]	; 0xffffffa8
   1b0d0:	b	1b31c <__assert_fail@plt+0x9d64>
   1b0d4:	cmp	r5, #0
   1b0d8:	mov	r3, #0
   1b0dc:	mov	r9, #1
   1b0e0:	mov	r2, #1
   1b0e4:	movne	r0, #34	; 0x22
   1b0e8:	strbne	r0, [ip]
   1b0ec:	movw	r0, #7674	; 0x1dfa
   1b0f0:	movt	r0, #2
   1b0f4:	str	r0, [fp, #-88]	; 0xffffffa8
   1b0f8:	mov	r0, #1
   1b0fc:	str	r0, [fp, #-72]	; 0xffffffb8
   1b100:	b	1b31c <__assert_fail@plt+0x9d64>
   1b104:	ldrb	r1, [r0, #1]
   1b108:	and	r1, r1, #223	; 0xdf
   1b10c:	cmp	r1, #66	; 0x42
   1b110:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b114:	ldrb	r1, [r0, #2]
   1b118:	cmp	r1, #49	; 0x31
   1b11c:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b120:	ldrb	r1, [r0, #3]
   1b124:	cmp	r1, #56	; 0x38
   1b128:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b12c:	ldrb	r1, [r0, #4]
   1b130:	cmp	r1, #48	; 0x30
   1b134:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b138:	ldrb	r1, [r0, #5]
   1b13c:	cmp	r1, #51	; 0x33
   1b140:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b144:	ldrb	r1, [r0, #6]
   1b148:	cmp	r1, #48	; 0x30
   1b14c:	bne	1b168 <__assert_fail@plt+0x9bb0>
   1b150:	ldrb	r0, [r0, #7]
   1b154:	cmp	r0, #0
   1b158:	movw	r0, #10241	; 0x2801
   1b15c:	movt	r0, #2
   1b160:	str	r0, [sp, #72]	; 0x48
   1b164:	beq	1b184 <__assert_fail@plt+0x9bcc>
   1b168:	movw	r1, #7674	; 0x1dfa
   1b16c:	movw	r0, #2749	; 0xabd
   1b170:	cmp	r4, #9
   1b174:	movt	r1, #2
   1b178:	movt	r0, #2
   1b17c:	moveq	r0, r1
   1b180:	str	r0, [sp, #72]	; 0x48
   1b184:	movw	r6, #2749	; 0xabd
   1b188:	mov	r0, #0
   1b18c:	mov	r2, #5
   1b190:	movt	r6, #2
   1b194:	mov	r1, r6
   1b198:	bl	11318 <dcgettext@plt>
   1b19c:	cmp	r0, r6
   1b1a0:	str	r0, [sp, #76]	; 0x4c
   1b1a4:	beq	1b1f0 <__assert_fail@plt+0x9c38>
   1b1a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b1ac:	mov	r9, #0
   1b1b0:	tst	r8, #1
   1b1b4:	bne	1b2f8 <__assert_fail@plt+0x9d40>
   1b1b8:	ldr	r0, [sp, #72]	; 0x48
   1b1bc:	ldrb	r0, [r0]
   1b1c0:	cmp	r0, #0
   1b1c4:	beq	1b2f8 <__assert_fail@plt+0x9d40>
   1b1c8:	ldr	r1, [sp, #72]	; 0x48
   1b1cc:	mov	r9, #0
   1b1d0:	add	r1, r1, #1
   1b1d4:	cmp	r9, r5
   1b1d8:	strbcc	r0, [ip, r9]
   1b1dc:	ldrb	r0, [r1, r9]
   1b1e0:	add	r9, r9, #1
   1b1e4:	cmp	r0, #0
   1b1e8:	bne	1b1d4 <__assert_fail@plt+0x9c1c>
   1b1ec:	b	1b2f8 <__assert_fail@plt+0x9d40>
   1b1f0:	bl	1e330 <__assert_fail@plt+0xcd78>
   1b1f4:	ldrb	r1, [r0]
   1b1f8:	and	r1, r1, #223	; 0xdf
   1b1fc:	cmp	r1, #71	; 0x47
   1b200:	beq	1b270 <__assert_fail@plt+0x9cb8>
   1b204:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b208:	cmp	r1, #85	; 0x55
   1b20c:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b210:	ldrb	r1, [r0, #1]
   1b214:	and	r1, r1, #223	; 0xdf
   1b218:	cmp	r1, #84	; 0x54
   1b21c:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b220:	ldrb	r1, [r0, #2]
   1b224:	and	r1, r1, #223	; 0xdf
   1b228:	cmp	r1, #70	; 0x46
   1b22c:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b230:	ldrb	r1, [r0, #3]
   1b234:	cmp	r1, #45	; 0x2d
   1b238:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b23c:	ldrb	r1, [r0, #4]
   1b240:	cmp	r1, #56	; 0x38
   1b244:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b248:	ldrb	r0, [r0, #5]
   1b24c:	cmp	r0, #0
   1b250:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b254:	movw	r0, #10237	; 0x27fd
   1b258:	movt	r0, #2
   1b25c:	str	r0, [sp, #76]	; 0x4c
   1b260:	mov	r9, #0
   1b264:	tst	r8, #1
   1b268:	beq	1b1b8 <__assert_fail@plt+0x9c00>
   1b26c:	b	1b2f8 <__assert_fail@plt+0x9d40>
   1b270:	ldrb	r1, [r0, #1]
   1b274:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b278:	and	r1, r1, #223	; 0xdf
   1b27c:	cmp	r1, #66	; 0x42
   1b280:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b284:	ldrb	r1, [r0, #2]
   1b288:	cmp	r1, #49	; 0x31
   1b28c:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b290:	ldrb	r1, [r0, #3]
   1b294:	cmp	r1, #56	; 0x38
   1b298:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b29c:	ldrb	r1, [r0, #4]
   1b2a0:	cmp	r1, #48	; 0x30
   1b2a4:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b2a8:	ldrb	r1, [r0, #5]
   1b2ac:	cmp	r1, #51	; 0x33
   1b2b0:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b2b4:	ldrb	r1, [r0, #6]
   1b2b8:	cmp	r1, #48	; 0x30
   1b2bc:	bne	1b2cc <__assert_fail@plt+0x9d14>
   1b2c0:	ldrb	r0, [r0, #7]
   1b2c4:	cmp	r0, #0
   1b2c8:	beq	1c0e0 <__assert_fail@plt+0xab28>
   1b2cc:	movw	r0, #2749	; 0xabd
   1b2d0:	cmp	r4, #9
   1b2d4:	movt	r0, #2
   1b2d8:	mov	r1, r0
   1b2dc:	movw	r0, #7674	; 0x1dfa
   1b2e0:	movt	r0, #2
   1b2e4:	moveq	r1, r0
   1b2e8:	str	r1, [sp, #76]	; 0x4c
   1b2ec:	mov	r9, #0
   1b2f0:	tst	r8, #1
   1b2f4:	beq	1b1b8 <__assert_fail@plt+0x9c00>
   1b2f8:	ldr	r6, [sp, #76]	; 0x4c
   1b2fc:	mov	r0, r6
   1b300:	bl	11468 <strlen@plt>
   1b304:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b308:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b30c:	str	r0, [fp, #-72]	; 0xffffffb8
   1b310:	str	r6, [fp, #-88]	; 0xffffffa8
   1b314:	mov	r2, #1
   1b318:	mov	r3, r8
   1b31c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b320:	str	r4, [fp, #-64]	; 0xffffffc0
   1b324:	mov	sl, #0
   1b328:	str	r3, [fp, #-76]	; 0xffffffb4
   1b32c:	str	r2, [sp, #88]	; 0x58
   1b330:	cmp	r0, #0
   1b334:	movwne	r0, #1
   1b338:	and	r1, r0, r3
   1b33c:	and	r1, r2, r1
   1b340:	str	r1, [sp, #48]	; 0x30
   1b344:	sub	r1, r4, #2
   1b348:	clz	r1, r1
   1b34c:	lsr	r1, r1, #5
   1b350:	and	r1, r1, r3
   1b354:	str	r1, [sp, #44]	; 0x2c
   1b358:	subs	r1, r4, #2
   1b35c:	eor	r4, r3, #1
   1b360:	movwne	r1, #1
   1b364:	str	r4, [sp, #92]	; 0x5c
   1b368:	orr	r4, r1, r4
   1b36c:	and	r1, r1, r2
   1b370:	and	r0, r0, r1
   1b374:	str	r4, [sp, #64]	; 0x40
   1b378:	ldr	r4, [sp, #84]	; 0x54
   1b37c:	str	r0, [fp, #-60]	; 0xffffffc4
   1b380:	orr	r0, r1, r3
   1b384:	ldr	r1, [fp, #16]
   1b388:	eor	r0, r0, #1
   1b38c:	clz	r1, r1
   1b390:	lsr	r1, r1, #5
   1b394:	orr	r0, r1, r0
   1b398:	str	r0, [fp, #-68]	; 0xffffffbc
   1b39c:	eor	r0, r2, #1
   1b3a0:	str	r0, [sp, #52]	; 0x34
   1b3a4:	cmn	r7, #1
   1b3a8:	beq	1b3b8 <__assert_fail@plt+0x9e00>
   1b3ac:	cmp	sl, r7
   1b3b0:	bne	1b3c4 <__assert_fail@plt+0x9e0c>
   1b3b4:	b	1c058 <__assert_fail@plt+0xaaa0>
   1b3b8:	ldrb	r0, [lr, sl]
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1c060 <__assert_fail@plt+0xaaa8>
   1b3c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b42c <__assert_fail@plt+0x9e74>
   1b3d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b3d4:	mov	r6, r5
   1b3d8:	add	r5, sl, r0
   1b3dc:	cmp	r0, #2
   1b3e0:	bcc	1b44c <__assert_fail@plt+0x9e94>
   1b3e4:	mov	r0, #0
   1b3e8:	cmn	r7, #1
   1b3ec:	str	r0, [fp, #-56]	; 0xffffffc8
   1b3f0:	bne	1b408 <__assert_fail@plt+0x9e50>
   1b3f4:	mov	r0, lr
   1b3f8:	bl	11468 <strlen@plt>
   1b3fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b400:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b404:	mov	r7, r0
   1b408:	cmp	r5, r7
   1b40c:	bls	1b45c <__assert_fail@plt+0x9ea4>
   1b410:	mov	r0, #0
   1b414:	mov	r5, r6
   1b418:	str	r0, [fp, #-48]	; 0xffffffd0
   1b41c:	ldrb	r6, [lr, sl]
   1b420:	cmp	r6, #126	; 0x7e
   1b424:	bls	1b4ac <__assert_fail@plt+0x9ef4>
   1b428:	b	1ba08 <__assert_fail@plt+0xa450>
   1b42c:	mov	r0, #0
   1b430:	str	r0, [fp, #-56]	; 0xffffffc8
   1b434:	mov	r0, #0
   1b438:	str	r0, [fp, #-48]	; 0xffffffd0
   1b43c:	ldrb	r6, [lr, sl]
   1b440:	cmp	r6, #126	; 0x7e
   1b444:	bls	1b4ac <__assert_fail@plt+0x9ef4>
   1b448:	b	1ba08 <__assert_fail@plt+0xa450>
   1b44c:	mov	r0, #0
   1b450:	str	r0, [fp, #-56]	; 0xffffffc8
   1b454:	cmp	r5, r7
   1b458:	bhi	1b410 <__assert_fail@plt+0x9e58>
   1b45c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b460:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1b464:	add	r0, lr, sl
   1b468:	bl	1145c <bcmp@plt>
   1b46c:	ldr	r2, [sp, #92]	; 0x5c
   1b470:	cmp	r0, #0
   1b474:	mov	r1, r0
   1b478:	mov	r5, r6
   1b47c:	movwne	r1, #1
   1b480:	orr	r1, r1, r2
   1b484:	tst	r1, #1
   1b488:	beq	1c120 <__assert_fail@plt+0xab68>
   1b48c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b490:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b494:	clz	r0, r0
   1b498:	lsr	r0, r0, #5
   1b49c:	str	r0, [fp, #-48]	; 0xffffffd0
   1b4a0:	ldrb	r6, [lr, sl]
   1b4a4:	cmp	r6, #126	; 0x7e
   1b4a8:	bhi	1ba08 <__assert_fail@plt+0xa450>
   1b4ac:	add	r3, pc, #16
   1b4b0:	mov	r8, #1
   1b4b4:	mov	r2, #110	; 0x6e
   1b4b8:	mov	r0, #97	; 0x61
   1b4bc:	mov	r1, #0
   1b4c0:	ldr	pc, [r3, r6, lsl #2]
   1b4c4:	andeq	fp, r1, r0, asr #15
   1b4c8:	andeq	fp, r1, r8, lsl #20
   1b4cc:	andeq	fp, r1, r8, lsl #20
   1b4d0:	andeq	fp, r1, r8, lsl #20
   1b4d4:	andeq	fp, r1, r8, lsl #20
   1b4d8:	andeq	fp, r1, r8, lsl #20
   1b4dc:	andeq	fp, r1, r8, lsl #20
   1b4e0:			; <UNDEFINED> instruction: 0x0001babc
   1b4e4:	andeq	fp, r1, r0, lsr #15
   1b4e8:	muleq	r1, r8, r7
   1b4ec:	andeq	fp, r1, ip, lsr #15
   1b4f0:	ldrdeq	fp, [r1], -ip
   1b4f4:	muleq	r1, r0, r7
   1b4f8:	andeq	fp, r1, r8, lsr #15
   1b4fc:	andeq	fp, r1, r8, lsl #20
   1b500:	andeq	fp, r1, r8, lsl #20
   1b504:	andeq	fp, r1, r8, lsl #20
   1b508:	andeq	fp, r1, r8, lsl #20
   1b50c:	andeq	fp, r1, r8, lsl #20
   1b510:	andeq	fp, r1, r8, lsl #20
   1b514:	andeq	fp, r1, r8, lsl #20
   1b518:	andeq	fp, r1, r8, lsl #20
   1b51c:	andeq	fp, r1, r8, lsl #20
   1b520:	andeq	fp, r1, r8, lsl #20
   1b524:	andeq	fp, r1, r8, lsl #20
   1b528:	andeq	fp, r1, r8, lsl #20
   1b52c:	andeq	fp, r1, r8, lsl #20
   1b530:	andeq	fp, r1, r8, lsl #20
   1b534:	andeq	fp, r1, r8, lsl #20
   1b538:	andeq	fp, r1, r8, lsl #20
   1b53c:	andeq	fp, r1, r8, lsl #20
   1b540:	andeq	fp, r1, r8, lsl #20
   1b544:	andeq	fp, r1, r4, lsr r7
   1b548:	andeq	fp, r1, r8, lsr r7
   1b54c:	andeq	fp, r1, r8, lsr r7
   1b550:	andeq	fp, r1, r8, lsr #14
   1b554:	andeq	fp, r1, r8, lsr r7
   1b558:	andeq	fp, r1, r0, asr #13
   1b55c:	andeq	fp, r1, r8, lsr r7
   1b560:	andeq	fp, r1, r4, ror #17
   1b564:	andeq	fp, r1, r8, lsr r7
   1b568:	andeq	fp, r1, r8, lsr r7
   1b56c:	andeq	fp, r1, r8, lsr r7
   1b570:	andeq	fp, r1, r0, asr #13
   1b574:	andeq	fp, r1, r0, asr #13
   1b578:	andeq	fp, r1, r0, asr #13
   1b57c:	andeq	fp, r1, r0, asr #13
   1b580:	andeq	fp, r1, r0, asr #13
   1b584:	andeq	fp, r1, r0, asr #13
   1b588:	andeq	fp, r1, r0, asr #13
   1b58c:	andeq	fp, r1, r0, asr #13
   1b590:	andeq	fp, r1, r0, asr #13
   1b594:	andeq	fp, r1, r0, asr #13
   1b598:	andeq	fp, r1, r0, asr #13
   1b59c:	andeq	fp, r1, r0, asr #13
   1b5a0:	andeq	fp, r1, r0, asr #13
   1b5a4:	andeq	fp, r1, r0, asr #13
   1b5a8:	andeq	fp, r1, r0, asr #13
   1b5ac:	andeq	fp, r1, r0, asr #13
   1b5b0:	andeq	fp, r1, r8, lsr r7
   1b5b4:	andeq	fp, r1, r8, lsr r7
   1b5b8:	andeq	fp, r1, r8, lsr r7
   1b5bc:	andeq	fp, r1, r8, lsr r7
   1b5c0:	andeq	fp, r1, r8, lsr #17
   1b5c4:	andeq	fp, r1, r8, lsl #20
   1b5c8:	andeq	fp, r1, r0, asr #13
   1b5cc:	andeq	fp, r1, r0, asr #13
   1b5d0:	andeq	fp, r1, r0, asr #13
   1b5d4:	andeq	fp, r1, r0, asr #13
   1b5d8:	andeq	fp, r1, r0, asr #13
   1b5dc:	andeq	fp, r1, r0, asr #13
   1b5e0:	andeq	fp, r1, r0, asr #13
   1b5e4:	andeq	fp, r1, r0, asr #13
   1b5e8:	andeq	fp, r1, r0, asr #13
   1b5ec:	andeq	fp, r1, r0, asr #13
   1b5f0:	andeq	fp, r1, r0, asr #13
   1b5f4:	andeq	fp, r1, r0, asr #13
   1b5f8:	andeq	fp, r1, r0, asr #13
   1b5fc:	andeq	fp, r1, r0, asr #13
   1b600:	andeq	fp, r1, r0, asr #13
   1b604:	andeq	fp, r1, r0, asr #13
   1b608:	andeq	fp, r1, r0, asr #13
   1b60c:	andeq	fp, r1, r0, asr #13
   1b610:	andeq	fp, r1, r0, asr #13
   1b614:	andeq	fp, r1, r0, asr #13
   1b618:	andeq	fp, r1, r0, asr #13
   1b61c:	andeq	fp, r1, r0, asr #13
   1b620:	andeq	fp, r1, r0, asr #13
   1b624:	andeq	fp, r1, r0, asr #13
   1b628:	andeq	fp, r1, r0, asr #13
   1b62c:	andeq	fp, r1, r0, asr #13
   1b630:	andeq	fp, r1, r8, lsr r7
   1b634:	andeq	fp, r1, ip, ror #14
   1b638:	andeq	fp, r1, r0, asr #13
   1b63c:	andeq	fp, r1, r8, lsr r7
   1b640:	andeq	fp, r1, r0, asr #13
   1b644:	andeq	fp, r1, r8, lsr r7
   1b648:	andeq	fp, r1, r0, asr #13
   1b64c:	andeq	fp, r1, r0, asr #13
   1b650:	andeq	fp, r1, r0, asr #13
   1b654:	andeq	fp, r1, r0, asr #13
   1b658:	andeq	fp, r1, r0, asr #13
   1b65c:	andeq	fp, r1, r0, asr #13
   1b660:	andeq	fp, r1, r0, asr #13
   1b664:	andeq	fp, r1, r0, asr #13
   1b668:	andeq	fp, r1, r0, asr #13
   1b66c:	andeq	fp, r1, r0, asr #13
   1b670:	andeq	fp, r1, r0, asr #13
   1b674:	andeq	fp, r1, r0, asr #13
   1b678:	andeq	fp, r1, r0, asr #13
   1b67c:	andeq	fp, r1, r0, asr #13
   1b680:	andeq	fp, r1, r0, asr #13
   1b684:	andeq	fp, r1, r0, asr #13
   1b688:	andeq	fp, r1, r0, asr #13
   1b68c:	andeq	fp, r1, r0, asr #13
   1b690:	andeq	fp, r1, r0, asr #13
   1b694:	andeq	fp, r1, r0, asr #13
   1b698:	andeq	fp, r1, r0, asr #13
   1b69c:	andeq	fp, r1, r0, asr #13
   1b6a0:	andeq	fp, r1, r0, asr #13
   1b6a4:	andeq	fp, r1, r0, asr #13
   1b6a8:	andeq	fp, r1, r0, asr #13
   1b6ac:	andeq	fp, r1, r0, asr #13
   1b6b0:	andeq	fp, r1, r0, lsl #14
   1b6b4:	andeq	fp, r1, r8, lsr r7
   1b6b8:	andeq	fp, r1, r0, lsl #14
   1b6bc:	andeq	fp, r1, r8, lsr #14
   1b6c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b6c4:	tst	r0, #1
   1b6c8:	bne	1b980 <__assert_fail@plt+0xa3c8>
   1b6cc:	ldr	r1, [fp, #16]
   1b6d0:	ubfx	r0, r6, #5, #3
   1b6d4:	mov	r2, #1
   1b6d8:	ldr	r0, [r1, r0, lsl #2]
   1b6dc:	and	r1, r6, #31
   1b6e0:	tst	r0, r2, lsl r1
   1b6e4:	beq	1b980 <__assert_fail@plt+0xa3c8>
   1b6e8:	mov	r0, r6
   1b6ec:	mov	r1, r8
   1b6f0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b6f4:	tst	r2, #1
   1b6f8:	beq	1b9a0 <__assert_fail@plt+0xa3e8>
   1b6fc:	b	1c0fc <__assert_fail@plt+0xab44>
   1b700:	cmp	r7, #1
   1b704:	beq	1b728 <__assert_fail@plt+0xa170>
   1b708:	mov	r8, #0
   1b70c:	cmn	r7, #1
   1b710:	bne	1b96c <__assert_fail@plt+0xa3b4>
   1b714:	ldrb	r0, [lr, #1]
   1b718:	cmp	r0, #0
   1b71c:	beq	1b728 <__assert_fail@plt+0xa170>
   1b720:	mvn	r7, #0
   1b724:	b	1b96c <__assert_fail@plt+0xa3b4>
   1b728:	mov	r8, #0
   1b72c:	cmp	sl, #0
   1b730:	bne	1b96c <__assert_fail@plt+0xa3b4>
   1b734:	mov	r1, #1
   1b738:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1b73c:	cmp	r0, #2
   1b740:	bne	1b758 <__assert_fail@plt+0xa1a0>
   1b744:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b748:	mov	r8, r1
   1b74c:	tst	r0, #1
   1b750:	beq	1b6c0 <__assert_fail@plt+0xa108>
   1b754:	b	1c0fc <__assert_fail@plt+0xab44>
   1b758:	mov	r8, r1
   1b75c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b760:	tst	r0, #1
   1b764:	beq	1b6cc <__assert_fail@plt+0xa114>
   1b768:	b	1b980 <__assert_fail@plt+0xa3c8>
   1b76c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1b770:	cmp	r0, #2
   1b774:	bne	1ba34 <__assert_fail@plt+0xa47c>
   1b778:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b77c:	tst	r0, #1
   1b780:	bne	1c0fc <__assert_fail@plt+0xab44>
   1b784:	mov	r0, #0
   1b788:	str	r0, [fp, #-56]	; 0xffffffc8
   1b78c:	b	1ba4c <__assert_fail@plt+0xa494>
   1b790:	mov	r0, #102	; 0x66
   1b794:	b	1babc <__assert_fail@plt+0xa504>
   1b798:	mov	r2, #116	; 0x74
   1b79c:	b	1b7ac <__assert_fail@plt+0xa1f4>
   1b7a0:	mov	r0, #98	; 0x62
   1b7a4:	b	1babc <__assert_fail@plt+0xa504>
   1b7a8:	mov	r2, #114	; 0x72
   1b7ac:	ldr	r0, [sp, #64]	; 0x40
   1b7b0:	tst	r0, #1
   1b7b4:	mov	r0, r2
   1b7b8:	bne	1babc <__assert_fail@plt+0xa504>
   1b7bc:	b	1c0fc <__assert_fail@plt+0xab44>
   1b7c0:	ldr	r0, [sp, #88]	; 0x58
   1b7c4:	tst	r0, #1
   1b7c8:	beq	1badc <__assert_fail@plt+0xa524>
   1b7cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b7d0:	tst	r0, #1
   1b7d4:	bne	1c238 <__assert_fail@plt+0xac80>
   1b7d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1b7dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1b7e0:	subs	r0, r0, #2
   1b7e4:	movwne	r0, #1
   1b7e8:	orr	r0, r0, r1
   1b7ec:	tst	r0, #1
   1b7f0:	bne	1b82c <__assert_fail@plt+0xa274>
   1b7f4:	cmp	r9, r5
   1b7f8:	movcc	r0, #39	; 0x27
   1b7fc:	strbcc	r0, [ip, r9]
   1b800:	add	r0, r9, #1
   1b804:	cmp	r0, r5
   1b808:	movcc	r1, #36	; 0x24
   1b80c:	strbcc	r1, [ip, r0]
   1b810:	add	r0, r9, #2
   1b814:	add	r9, r9, #3
   1b818:	cmp	r0, r5
   1b81c:	movcc	r1, #39	; 0x27
   1b820:	strbcc	r1, [ip, r0]
   1b824:	mov	r0, #1
   1b828:	str	r0, [fp, #-52]	; 0xffffffcc
   1b82c:	mov	r1, #1
   1b830:	cmp	r9, r5
   1b834:	mov	r8, #0
   1b838:	mov	r6, #48	; 0x30
   1b83c:	str	r1, [fp, #-56]	; 0xffffffc8
   1b840:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b844:	movcc	r0, #92	; 0x5c
   1b848:	strbcc	r0, [ip, r9]
   1b84c:	add	r0, r9, #1
   1b850:	cmp	r1, #2
   1b854:	beq	1bca8 <__assert_fail@plt+0xa6f0>
   1b858:	add	r1, sl, #1
   1b85c:	cmp	r1, r7
   1b860:	bcs	1bca8 <__assert_fail@plt+0xa6f0>
   1b864:	ldrb	r1, [lr, r1]
   1b868:	sub	r1, r1, #48	; 0x30
   1b86c:	uxtb	r1, r1
   1b870:	cmp	r1, #9
   1b874:	bhi	1bca8 <__assert_fail@plt+0xa6f0>
   1b878:	cmp	r0, r5
   1b87c:	movcc	r1, #48	; 0x30
   1b880:	strbcc	r1, [ip, r0]
   1b884:	add	r0, r9, #2
   1b888:	add	r9, r9, #3
   1b88c:	cmp	r0, r5
   1b890:	movcc	r1, #48	; 0x30
   1b894:	strbcc	r1, [ip, r0]
   1b898:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b89c:	tst	r0, #1
   1b8a0:	beq	1b6cc <__assert_fail@plt+0xa114>
   1b8a4:	b	1b980 <__assert_fail@plt+0xa3c8>
   1b8a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1b8ac:	mov	r6, #63	; 0x3f
   1b8b0:	cmp	r0, #5
   1b8b4:	beq	1bcbc <__assert_fail@plt+0xa704>
   1b8b8:	mov	r1, #0
   1b8bc:	cmp	r0, #2
   1b8c0:	str	r1, [fp, #-56]	; 0xffffffc8
   1b8c4:	bne	1bd84 <__assert_fail@plt+0xa7cc>
   1b8c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b8cc:	mov	r8, #0
   1b8d0:	tst	r0, #1
   1b8d4:	beq	1b6c0 <__assert_fail@plt+0xa108>
   1b8d8:	b	1c0fc <__assert_fail@plt+0xab44>
   1b8dc:	mov	r0, #118	; 0x76
   1b8e0:	b	1babc <__assert_fail@plt+0xa504>
   1b8e4:	mov	r0, #1
   1b8e8:	mov	r6, #39	; 0x27
   1b8ec:	str	r0, [sp, #60]	; 0x3c
   1b8f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1b8f4:	cmp	r0, #2
   1b8f8:	bne	1bafc <__assert_fail@plt+0xa544>
   1b8fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b900:	tst	r0, #1
   1b904:	bne	1c0fc <__assert_fail@plt+0xab44>
   1b908:	ldr	r2, [sp, #56]	; 0x38
   1b90c:	clz	r1, r5
   1b910:	mov	r8, #1
   1b914:	lsr	r1, r1, #5
   1b918:	cmp	r2, #0
   1b91c:	mov	r0, r2
   1b920:	movwne	r0, #1
   1b924:	orrs	r0, r0, r1
   1b928:	moveq	r2, r5
   1b92c:	moveq	r5, r0
   1b930:	cmp	r9, r5
   1b934:	str	r2, [sp, #56]	; 0x38
   1b938:	movcc	r0, #39	; 0x27
   1b93c:	strbcc	r0, [ip, r9]
   1b940:	add	r0, r9, #1
   1b944:	cmp	r0, r5
   1b948:	movcc	r1, #92	; 0x5c
   1b94c:	strbcc	r1, [ip, r0]
   1b950:	add	r0, r9, #2
   1b954:	add	r9, r9, #3
   1b958:	cmp	r0, r5
   1b95c:	movcc	r1, #39	; 0x27
   1b960:	strbcc	r1, [ip, r0]
   1b964:	mov	r0, #0
   1b968:	str	r0, [fp, #-52]	; 0xffffffcc
   1b96c:	mov	r0, #0
   1b970:	str	r0, [fp, #-56]	; 0xffffffc8
   1b974:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b978:	tst	r0, #1
   1b97c:	beq	1b6cc <__assert_fail@plt+0xa114>
   1b980:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1b984:	mov	r1, r8
   1b988:	cmp	r0, #0
   1b98c:	mov	r0, r6
   1b990:	beq	1ba54 <__assert_fail@plt+0xa49c>
   1b994:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b998:	tst	r2, #1
   1b99c:	bne	1c0fc <__assert_fail@plt+0xab44>
   1b9a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b9a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b9a8:	subs	r2, r2, #2
   1b9ac:	movwne	r2, #1
   1b9b0:	orr	r2, r2, r3
   1b9b4:	tst	r2, #1
   1b9b8:	bne	1b9f4 <__assert_fail@plt+0xa43c>
   1b9bc:	cmp	r9, r5
   1b9c0:	movcc	r2, #39	; 0x27
   1b9c4:	strbcc	r2, [ip, r9]
   1b9c8:	add	r2, r9, #1
   1b9cc:	cmp	r2, r5
   1b9d0:	movcc	r3, #36	; 0x24
   1b9d4:	strbcc	r3, [ip, r2]
   1b9d8:	add	r2, r9, #2
   1b9dc:	add	r9, r9, #3
   1b9e0:	cmp	r2, r5
   1b9e4:	movcc	r3, #39	; 0x27
   1b9e8:	strbcc	r3, [ip, r2]
   1b9ec:	mov	r2, #1
   1b9f0:	str	r2, [fp, #-52]	; 0xffffffcc
   1b9f4:	cmp	r9, r5
   1b9f8:	movcc	r2, #92	; 0x5c
   1b9fc:	strbcc	r2, [ip, r9]
   1ba00:	add	r9, r9, #1
   1ba04:	b	1ba9c <__assert_fail@plt+0xa4e4>
   1ba08:	ldr	r0, [sp, #40]	; 0x28
   1ba0c:	cmp	r0, #1
   1ba10:	bne	1bb10 <__assert_fail@plt+0xa558>
   1ba14:	bl	11444 <__ctype_b_loc@plt>
   1ba18:	ldr	r0, [r0]
   1ba1c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1ba20:	mov	r1, #1
   1ba24:	add	r0, r0, r6, lsl #1
   1ba28:	ldrb	r0, [r0, #1]
   1ba2c:	ubfx	r8, r0, #6, #1
   1ba30:	b	1be68 <__assert_fail@plt+0xa8b0>
   1ba34:	ldr	r1, [sp, #48]	; 0x30
   1ba38:	mov	r0, #0
   1ba3c:	str	r0, [fp, #-56]	; 0xffffffc8
   1ba40:	mov	r0, #92	; 0x5c
   1ba44:	cmp	r1, #0
   1ba48:	beq	1babc <__assert_fail@plt+0xa504>
   1ba4c:	mov	r6, #92	; 0x5c
   1ba50:	mov	r8, #0
   1ba54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ba58:	cmp	r0, #0
   1ba5c:	bne	1ba94 <__assert_fail@plt+0xa4dc>
   1ba60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ba64:	tst	r0, #1
   1ba68:	beq	1ba94 <__assert_fail@plt+0xa4dc>
   1ba6c:	cmp	r9, r5
   1ba70:	movcc	r0, #39	; 0x27
   1ba74:	strbcc	r0, [ip, r9]
   1ba78:	add	r0, r9, #1
   1ba7c:	add	r9, r9, #2
   1ba80:	cmp	r0, r5
   1ba84:	movcc	r1, #39	; 0x27
   1ba88:	strbcc	r1, [ip, r0]
   1ba8c:	mov	r0, #0
   1ba90:	str	r0, [fp, #-52]	; 0xffffffcc
   1ba94:	mov	r1, r8
   1ba98:	mov	r0, r6
   1ba9c:	cmp	r9, r5
   1baa0:	and	r4, r4, r1
   1baa4:	strbcc	r0, [ip, r9]
   1baa8:	add	r9, r9, #1
   1baac:	add	sl, sl, #1
   1bab0:	cmn	r7, #1
   1bab4:	bne	1b3ac <__assert_fail@plt+0x9df4>
   1bab8:	b	1b3b8 <__assert_fail@plt+0x9e00>
   1babc:	mov	r1, #0
   1bac0:	mov	r8, #0
   1bac4:	str	r1, [fp, #-56]	; 0xffffffc8
   1bac8:	ldr	r1, [sp, #88]	; 0x58
   1bacc:	tst	r1, #1
   1bad0:	mov	r1, #0
   1bad4:	beq	1b6c0 <__assert_fail@plt+0xa108>
   1bad8:	b	1b994 <__assert_fail@plt+0xa3dc>
   1badc:	ldr	r0, [sp, #36]	; 0x24
   1bae0:	mov	r6, #0
   1bae4:	mov	r8, #0
   1bae8:	cmp	r0, #0
   1baec:	mov	r0, #0
   1baf0:	str	r0, [fp, #-56]	; 0xffffffc8
   1baf4:	bne	1baac <__assert_fail@plt+0xa4f4>
   1baf8:	b	1b6c0 <__assert_fail@plt+0xa108>
   1bafc:	mov	r8, #1
   1bb00:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1bb04:	tst	r0, #1
   1bb08:	beq	1b6cc <__assert_fail@plt+0xa114>
   1bb0c:	b	1b980 <__assert_fail@plt+0xa3c8>
   1bb10:	mov	r0, #0
   1bb14:	cmn	r7, #1
   1bb18:	str	r0, [fp, #-36]	; 0xffffffdc
   1bb1c:	str	r0, [fp, #-40]	; 0xffffffd8
   1bb20:	bne	1bb34 <__assert_fail@plt+0xa57c>
   1bb24:	mov	r0, lr
   1bb28:	bl	11468 <strlen@plt>
   1bb2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1bb30:	mov	r7, r0
   1bb34:	ldr	r0, [sp, #44]	; 0x2c
   1bb38:	str	r4, [sp, #84]	; 0x54
   1bb3c:	str	r5, [sp, #28]
   1bb40:	cmp	r0, #0
   1bb44:	beq	1bd98 <__assert_fail@plt+0xa7e0>
   1bb48:	ldr	r0, [sp, #80]	; 0x50
   1bb4c:	mov	r8, #1
   1bb50:	mov	r5, #0
   1bb54:	add	r0, r0, sl
   1bb58:	str	r0, [sp, #24]
   1bb5c:	sub	r0, fp, #40	; 0x28
   1bb60:	mov	r3, r0
   1bb64:	b	1bba0 <__assert_fail@plt+0xa5e8>
   1bb68:	ldr	r5, [sp, #68]	; 0x44
   1bb6c:	add	r5, r0, r5
   1bb70:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1bb74:	bl	11354 <iswprint@plt>
   1bb78:	cmp	r0, #0
   1bb7c:	sub	r4, fp, #40	; 0x28
   1bb80:	movwne	r0, #1
   1bb84:	and	r8, r8, r0
   1bb88:	mov	r0, r4
   1bb8c:	bl	11300 <mbsinit@plt>
   1bb90:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1bb94:	mov	r3, r4
   1bb98:	cmp	r0, #0
   1bb9c:	bne	1be5c <__assert_fail@plt+0xa8a4>
   1bba0:	str	r5, [sp, #68]	; 0x44
   1bba4:	add	r5, r5, sl
   1bba8:	sub	r0, fp, #44	; 0x2c
   1bbac:	add	r1, lr, r5
   1bbb0:	sub	r2, r7, r5
   1bbb4:	bl	1e368 <__assert_fail@plt+0xcdb0>
   1bbb8:	cmn	r0, #2
   1bbbc:	beq	1be1c <__assert_fail@plt+0xa864>
   1bbc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bbc4:	cmn	r0, #1
   1bbc8:	beq	1be10 <__assert_fail@plt+0xa858>
   1bbcc:	cmp	r0, #0
   1bbd0:	beq	1be14 <__assert_fail@plt+0xa85c>
   1bbd4:	cmp	r0, #2
   1bbd8:	bcc	1bb68 <__assert_fail@plt+0xa5b0>
   1bbdc:	ldr	r1, [sp, #68]	; 0x44
   1bbe0:	ldr	r2, [sp, #24]
   1bbe4:	add	r1, r2, r1
   1bbe8:	sub	r2, r0, #1
   1bbec:	ldrb	r3, [r1]
   1bbf0:	sub	r3, r3, #91	; 0x5b
   1bbf4:	cmp	r3, #33	; 0x21
   1bbf8:	bls	1bc18 <__assert_fail@plt+0xa660>
   1bbfc:	add	r1, r1, #1
   1bc00:	subs	r2, r2, #1
   1bc04:	beq	1bb68 <__assert_fail@plt+0xa5b0>
   1bc08:	ldrb	r3, [r1]
   1bc0c:	sub	r3, r3, #91	; 0x5b
   1bc10:	cmp	r3, #33	; 0x21
   1bc14:	bhi	1bbfc <__assert_fail@plt+0xa644>
   1bc18:	add	r5, pc, #0
   1bc1c:	ldr	pc, [r5, r3, lsl #2]
   1bc20:	andeq	ip, r1, r4, lsr r1
   1bc24:	andeq	ip, r1, r4, lsr r1
   1bc28:	strdeq	fp, [r1], -ip
   1bc2c:	andeq	ip, r1, r4, lsr r1
   1bc30:	strdeq	fp, [r1], -ip
   1bc34:	andeq	ip, r1, r4, lsr r1
   1bc38:	strdeq	fp, [r1], -ip
   1bc3c:	strdeq	fp, [r1], -ip
   1bc40:	strdeq	fp, [r1], -ip
   1bc44:	strdeq	fp, [r1], -ip
   1bc48:	strdeq	fp, [r1], -ip
   1bc4c:	strdeq	fp, [r1], -ip
   1bc50:	strdeq	fp, [r1], -ip
   1bc54:	strdeq	fp, [r1], -ip
   1bc58:	strdeq	fp, [r1], -ip
   1bc5c:	strdeq	fp, [r1], -ip
   1bc60:	strdeq	fp, [r1], -ip
   1bc64:	strdeq	fp, [r1], -ip
   1bc68:	strdeq	fp, [r1], -ip
   1bc6c:	strdeq	fp, [r1], -ip
   1bc70:	strdeq	fp, [r1], -ip
   1bc74:	strdeq	fp, [r1], -ip
   1bc78:	strdeq	fp, [r1], -ip
   1bc7c:	strdeq	fp, [r1], -ip
   1bc80:	strdeq	fp, [r1], -ip
   1bc84:	strdeq	fp, [r1], -ip
   1bc88:	strdeq	fp, [r1], -ip
   1bc8c:	strdeq	fp, [r1], -ip
   1bc90:	strdeq	fp, [r1], -ip
   1bc94:	strdeq	fp, [r1], -ip
   1bc98:	strdeq	fp, [r1], -ip
   1bc9c:	strdeq	fp, [r1], -ip
   1bca0:	strdeq	fp, [r1], -ip
   1bca4:	andeq	ip, r1, r4, lsr r1
   1bca8:	mov	r9, r0
   1bcac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1bcb0:	tst	r0, #1
   1bcb4:	beq	1b6cc <__assert_fail@plt+0xa114>
   1bcb8:	b	1b980 <__assert_fail@plt+0xa3c8>
   1bcbc:	mov	r0, #0
   1bcc0:	str	r0, [fp, #-56]	; 0xffffffc8
   1bcc4:	ldr	r0, [sp, #32]
   1bcc8:	cmp	r0, #0
   1bccc:	beq	1bd84 <__assert_fail@plt+0xa7cc>
   1bcd0:	add	r0, sl, #2
   1bcd4:	mov	r1, r7
   1bcd8:	cmp	r0, r7
   1bcdc:	bcs	1bd84 <__assert_fail@plt+0xa7cc>
   1bce0:	add	r1, sl, lr
   1bce4:	ldrb	r1, [r1, #1]
   1bce8:	cmp	r1, #63	; 0x3f
   1bcec:	bne	1bd84 <__assert_fail@plt+0xa7cc>
   1bcf0:	ldrb	r8, [lr, r0]
   1bcf4:	sub	r2, r8, #33	; 0x21
   1bcf8:	cmp	r2, #29
   1bcfc:	bhi	1bd84 <__assert_fail@plt+0xa7cc>
   1bd00:	mov	r1, r4
   1bd04:	movw	r4, #20929	; 0x51c1
   1bd08:	mov	r3, #1
   1bd0c:	movt	r4, #14336	; 0x3800
   1bd10:	tst	r4, r3, lsl r2
   1bd14:	beq	1c040 <__assert_fail@plt+0xaa88>
   1bd18:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1bd1c:	tst	r2, #1
   1bd20:	bne	1c0fc <__assert_fail@plt+0xab44>
   1bd24:	cmp	r9, r5
   1bd28:	mov	r6, r8
   1bd2c:	mov	r4, r1
   1bd30:	mov	sl, r0
   1bd34:	mov	r8, #0
   1bd38:	movcc	r2, #63	; 0x3f
   1bd3c:	strbcc	r2, [ip, r9]
   1bd40:	add	r2, r9, #1
   1bd44:	cmp	r2, r5
   1bd48:	movcc	r3, #34	; 0x22
   1bd4c:	strbcc	r3, [ip, r2]
   1bd50:	add	r2, r9, #2
   1bd54:	cmp	r2, r5
   1bd58:	movcc	r3, #34	; 0x22
   1bd5c:	strbcc	r3, [ip, r2]
   1bd60:	add	r2, r9, #3
   1bd64:	add	r9, r9, #4
   1bd68:	cmp	r2, r5
   1bd6c:	movcc	r3, #63	; 0x3f
   1bd70:	strbcc	r3, [ip, r2]
   1bd74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1bd78:	tst	r0, #1
   1bd7c:	beq	1b6cc <__assert_fail@plt+0xa114>
   1bd80:	b	1b980 <__assert_fail@plt+0xa3c8>
   1bd84:	mov	r8, #0
   1bd88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1bd8c:	tst	r0, #1
   1bd90:	beq	1b6cc <__assert_fail@plt+0xa114>
   1bd94:	b	1b980 <__assert_fail@plt+0xa3c8>
   1bd98:	mov	r8, #1
   1bd9c:	mov	r5, #0
   1bda0:	sub	r4, fp, #40	; 0x28
   1bda4:	str	r5, [sp, #68]	; 0x44
   1bda8:	add	r5, r5, sl
   1bdac:	sub	r0, fp, #44	; 0x2c
   1bdb0:	mov	r3, r4
   1bdb4:	add	r1, lr, r5
   1bdb8:	sub	r2, r7, r5
   1bdbc:	bl	1e368 <__assert_fail@plt+0xcdb0>
   1bdc0:	cmn	r0, #2
   1bdc4:	beq	1be1c <__assert_fail@plt+0xa864>
   1bdc8:	cmn	r0, #1
   1bdcc:	beq	1be10 <__assert_fail@plt+0xa858>
   1bdd0:	ldr	r5, [sp, #68]	; 0x44
   1bdd4:	cmp	r0, #0
   1bdd8:	beq	1be58 <__assert_fail@plt+0xa8a0>
   1bddc:	add	r5, r0, r5
   1bde0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1bde4:	bl	11354 <iswprint@plt>
   1bde8:	cmp	r0, #0
   1bdec:	sub	r4, fp, #40	; 0x28
   1bdf0:	movwne	r0, #1
   1bdf4:	and	r8, r8, r0
   1bdf8:	mov	r0, r4
   1bdfc:	bl	11300 <mbsinit@plt>
   1be00:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1be04:	cmp	r0, #0
   1be08:	beq	1bda4 <__assert_fail@plt+0xa7ec>
   1be0c:	b	1be5c <__assert_fail@plt+0xa8a4>
   1be10:	mov	r8, #0
   1be14:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1be18:	b	1be50 <__assert_fail@plt+0xa898>
   1be1c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1be20:	mov	r8, #0
   1be24:	cmp	r5, r7
   1be28:	bcs	1be50 <__assert_fail@plt+0xa898>
   1be2c:	ldrb	r0, [lr, r5]
   1be30:	cmp	r0, #0
   1be34:	beq	1be50 <__assert_fail@plt+0xa898>
   1be38:	ldr	r0, [sp, #68]	; 0x44
   1be3c:	add	r0, r0, #1
   1be40:	add	r5, r0, sl
   1be44:	str	r0, [sp, #68]	; 0x44
   1be48:	cmp	r5, r7
   1be4c:	bcc	1be2c <__assert_fail@plt+0xa874>
   1be50:	ldr	r5, [sp, #68]	; 0x44
   1be54:	b	1be5c <__assert_fail@plt+0xa8a4>
   1be58:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1be5c:	mov	r1, r5
   1be60:	ldr	r5, [sp, #28]
   1be64:	ldr	r4, [sp, #84]	; 0x54
   1be68:	ldr	r0, [sp, #52]	; 0x34
   1be6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1be70:	cmp	r1, #1
   1be74:	orr	r2, r8, r0
   1be78:	mov	r0, r1
   1be7c:	bhi	1be88 <__assert_fail@plt+0xa8d0>
   1be80:	tst	r2, #1
   1be84:	bne	1b6c0 <__assert_fail@plt+0xa108>
   1be88:	add	r0, r0, sl
   1be8c:	str	r2, [sp, #84]	; 0x54
   1be90:	str	r0, [fp, #-56]	; 0xffffffc8
   1be94:	mov	r0, #0
   1be98:	tst	r2, #1
   1be9c:	bne	1bf7c <__assert_fail@plt+0xa9c4>
   1bea0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1bea4:	tst	r1, #1
   1bea8:	bne	1c0fc <__assert_fail@plt+0xab44>
   1beac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1beb0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1beb4:	subs	r2, r1, #2
   1beb8:	movwne	r2, #1
   1bebc:	orr	r2, r2, r0
   1bec0:	tst	r2, #1
   1bec4:	bne	1bf00 <__assert_fail@plt+0xa948>
   1bec8:	cmp	r9, r5
   1becc:	add	r2, r9, #1
   1bed0:	mov	r0, #1
   1bed4:	movcc	r1, #39	; 0x27
   1bed8:	str	r0, [fp, #-52]	; 0xffffffcc
   1bedc:	strbcc	r1, [ip, r9]
   1bee0:	cmp	r2, r5
   1bee4:	movcc	r1, #36	; 0x24
   1bee8:	strbcc	r1, [ip, r2]
   1beec:	add	r2, r9, #2
   1bef0:	add	r9, r9, #3
   1bef4:	cmp	r2, r5
   1bef8:	movcc	r1, #39	; 0x27
   1befc:	strbcc	r1, [ip, r2]
   1bf00:	cmp	r9, r5
   1bf04:	add	r2, r9, #1
   1bf08:	movcc	r1, #92	; 0x5c
   1bf0c:	strbcc	r1, [ip, r9]
   1bf10:	cmp	r2, r5
   1bf14:	bcs	1bf28 <__assert_fail@plt+0xa970>
   1bf18:	uxtb	r3, r6
   1bf1c:	mov	r1, #48	; 0x30
   1bf20:	orr	r3, r1, r3, lsr #6
   1bf24:	strb	r3, [ip, r2]
   1bf28:	add	r2, r9, #2
   1bf2c:	add	r9, r9, #3
   1bf30:	cmp	r2, r5
   1bf34:	lsrcc	r3, r6, #3
   1bf38:	movcc	r1, #6
   1bf3c:	bficc	r3, r1, #3, #29
   1bf40:	mov	r1, #6
   1bf44:	bfi	r6, r1, #3, #29
   1bf48:	strbcc	r3, [ip, r2]
   1bf4c:	mov	r2, #1
   1bf50:	b	1bfb0 <__assert_fail@plt+0xa9f8>
   1bf54:	ldr	r1, [sp, #80]	; 0x50
   1bf58:	cmp	r9, r2
   1bf5c:	mov	r5, r2
   1bf60:	ldr	r2, [sp, #84]	; 0x54
   1bf64:	strbcc	r6, [ip, r9]
   1bf68:	add	r9, r9, #1
   1bf6c:	ldrb	r6, [r1, sl]
   1bf70:	mov	sl, r3
   1bf74:	tst	r2, #1
   1bf78:	beq	1bea0 <__assert_fail@plt+0xa8e8>
   1bf7c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1bf80:	tst	r1, #1
   1bf84:	beq	1bfa4 <__assert_fail@plt+0xa9ec>
   1bf88:	cmp	r9, r5
   1bf8c:	mov	r2, r0
   1bf90:	movcc	r1, #92	; 0x5c
   1bf94:	strbcc	r1, [ip, r9]
   1bf98:	add	r9, r9, #1
   1bf9c:	mov	r1, #0
   1bfa0:	b	1bfac <__assert_fail@plt+0xa9f4>
   1bfa4:	mov	r1, #0
   1bfa8:	mov	r2, r0
   1bfac:	str	r1, [fp, #-48]	; 0xffffffd0
   1bfb0:	mov	r0, r2
   1bfb4:	and	r1, r2, #1
   1bfb8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1bfbc:	add	r3, sl, #1
   1bfc0:	cmp	r2, r3
   1bfc4:	bls	1c024 <__assert_fail@plt+0xaa6c>
   1bfc8:	mov	r2, r5
   1bfcc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1bfd0:	cmp	r1, #0
   1bfd4:	movwne	r1, #1
   1bfd8:	mvn	r5, r5
   1bfdc:	orr	r5, r5, r1
   1bfe0:	tst	r5, #1
   1bfe4:	bne	1bf54 <__assert_fail@plt+0xa99c>
   1bfe8:	cmp	r9, r2
   1bfec:	movcc	r5, r4
   1bff0:	movcc	r4, #39	; 0x27
   1bff4:	strbcc	r4, [ip, r9]
   1bff8:	movcc	r4, r5
   1bffc:	add	r5, r9, #1
   1c000:	add	r9, r9, #2
   1c004:	cmp	r5, r2
   1c008:	movcc	r1, r4
   1c00c:	movcc	r4, #39	; 0x27
   1c010:	strbcc	r4, [ip, r5]
   1c014:	movcc	r4, r1
   1c018:	mov	r1, #0
   1c01c:	str	r1, [fp, #-52]	; 0xffffffcc
   1c020:	b	1bf54 <__assert_fail@plt+0xa99c>
   1c024:	cmp	r1, #0
   1c028:	movwne	r1, #1
   1c02c:	str	r1, [fp, #-56]	; 0xffffffc8
   1c030:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c034:	cmp	r0, #0
   1c038:	beq	1ba60 <__assert_fail@plt+0xa4a8>
   1c03c:	b	1ba94 <__assert_fail@plt+0xa4dc>
   1c040:	mov	r8, #0
   1c044:	mov	r4, r1
   1c048:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c04c:	tst	r0, #1
   1c050:	beq	1b6cc <__assert_fail@plt+0xa114>
   1c054:	b	1b980 <__assert_fail@plt+0xa3c8>
   1c058:	mov	r7, sl
   1c05c:	b	1c064 <__assert_fail@plt+0xaaac>
   1c060:	mvn	r7, #0
   1c064:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c068:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c06c:	ldr	r2, [sp, #88]	; 0x58
   1c070:	eor	r0, r1, #2
   1c074:	orr	r0, r0, r9
   1c078:	clz	r0, r0
   1c07c:	lsr	r0, r0, #5
   1c080:	tst	r3, r0
   1c084:	bne	1c0fc <__assert_fail@plt+0xab44>
   1c088:	subs	r0, r1, #2
   1c08c:	movwne	r0, #1
   1c090:	orr	r0, r3, r0
   1c094:	tst	r0, #1
   1c098:	ldreq	r0, [sp, #60]	; 0x3c
   1c09c:	eoreq	r0, r0, #1
   1c0a0:	tsteq	r0, #1
   1c0a4:	bne	1c1d8 <__assert_fail@plt+0xac20>
   1c0a8:	tst	r4, #1
   1c0ac:	bne	1c19c <__assert_fail@plt+0xabe4>
   1c0b0:	ldr	r6, [sp, #56]	; 0x38
   1c0b4:	mov	r8, #0
   1c0b8:	cmp	r6, #0
   1c0bc:	beq	1c1d4 <__assert_fail@plt+0xac1c>
   1c0c0:	mov	r1, #0
   1c0c4:	mov	r4, #2
   1c0c8:	cmp	r5, #0
   1c0cc:	mov	r0, r2
   1c0d0:	mov	r3, #0
   1c0d4:	str	r1, [sp, #84]	; 0x54
   1c0d8:	beq	1af20 <__assert_fail@plt+0x9968>
   1c0dc:	b	1c1d8 <__assert_fail@plt+0xac20>
   1c0e0:	movw	r0, #10245	; 0x2805
   1c0e4:	movt	r0, #2
   1c0e8:	str	r0, [sp, #76]	; 0x4c
   1c0ec:	mov	r9, #0
   1c0f0:	tst	r8, #1
   1c0f4:	beq	1b1b8 <__assert_fail@plt+0x9c00>
   1c0f8:	b	1b2f8 <__assert_fail@plt+0x9d40>
   1c0fc:	ldr	r1, [sp, #88]	; 0x58
   1c100:	mov	r0, #2
   1c104:	tst	r1, #1
   1c108:	movwne	r0, #4
   1c10c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1c110:	ldr	r1, [fp, #12]
   1c114:	cmp	r2, #2
   1c118:	moveq	r2, r0
   1c11c:	b	1c154 <__assert_fail@plt+0xab9c>
   1c120:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c124:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1c128:	ldr	r1, [fp, #12]
   1c12c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1c130:	b	1c154 <__assert_fail@plt+0xab9c>
   1c134:	ldr	r1, [sp, #88]	; 0x58
   1c138:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1c13c:	ldr	r5, [sp, #28]
   1c140:	mov	r0, #2
   1c144:	tst	r1, #1
   1c148:	ldr	r1, [fp, #12]
   1c14c:	movwne	r0, #4
   1c150:	mov	r2, r0
   1c154:	mov	r0, #0
   1c158:	bic	r1, r1, #2
   1c15c:	str	r2, [sp]
   1c160:	mov	r2, lr
   1c164:	str	r0, [sp, #8]
   1c168:	ldr	r0, [sp, #72]	; 0x48
   1c16c:	str	r1, [sp, #4]
   1c170:	mov	r1, r5
   1c174:	str	r0, [sp, #12]
   1c178:	ldr	r0, [sp, #76]	; 0x4c
   1c17c:	str	r0, [sp, #16]
   1c180:	mov	r0, ip
   1c184:	mov	r3, r7
   1c188:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c18c:	mov	r9, r0
   1c190:	mov	r0, r9
   1c194:	sub	sp, fp, #28
   1c198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c19c:	mov	r0, #5
   1c1a0:	ldr	r1, [sp, #56]	; 0x38
   1c1a4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1c1a8:	str	r0, [sp]
   1c1ac:	ldr	r0, [fp, #12]
   1c1b0:	str	r0, [sp, #4]
   1c1b4:	ldr	r0, [fp, #16]
   1c1b8:	str	r0, [sp, #8]
   1c1bc:	ldr	r0, [sp, #72]	; 0x48
   1c1c0:	str	r0, [sp, #12]
   1c1c4:	ldr	r0, [sp, #76]	; 0x4c
   1c1c8:	str	r0, [sp, #16]
   1c1cc:	ldr	r0, [fp, #-84]	; 0xffffffac
   1c1d0:	b	1c184 <__assert_fail@plt+0xabcc>
   1c1d4:	mov	r3, #0
   1c1d8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1c1dc:	cmp	r1, #0
   1c1e0:	beq	1c21c <__assert_fail@plt+0xac64>
   1c1e4:	ldr	r2, [fp, #-84]	; 0xffffffac
   1c1e8:	tst	r3, #1
   1c1ec:	bne	1c220 <__assert_fail@plt+0xac68>
   1c1f0:	ldrb	r0, [r1]
   1c1f4:	cmp	r0, #0
   1c1f8:	beq	1c220 <__assert_fail@plt+0xac68>
   1c1fc:	add	r1, r1, #1
   1c200:	cmp	r9, r5
   1c204:	strbcc	r0, [r2, r9]
   1c208:	add	r9, r9, #1
   1c20c:	ldrb	r0, [r1], #1
   1c210:	cmp	r0, #0
   1c214:	bne	1c200 <__assert_fail@plt+0xac48>
   1c218:	b	1c220 <__assert_fail@plt+0xac68>
   1c21c:	ldr	r2, [fp, #-84]	; 0xffffffac
   1c220:	cmp	r9, r5
   1c224:	movcc	r0, #0
   1c228:	strbcc	r0, [r2, r9]
   1c22c:	mov	r0, r9
   1c230:	sub	sp, fp, #28
   1c234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c238:	mov	r0, #4
   1c23c:	b	1c10c <__assert_fail@plt+0xab54>
   1c240:	bl	11588 <abort@plt>
   1c244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c248:	add	fp, sp, #28
   1c24c:	sub	sp, sp, #28
   1c250:	movw	r5, #12768	; 0x31e0
   1c254:	cmp	r2, #0
   1c258:	mov	r4, r1
   1c25c:	mov	r7, r0
   1c260:	str	r0, [sp, #20]
   1c264:	movt	r5, #3
   1c268:	movne	r5, r2
   1c26c:	bl	1148c <__errno_location@plt>
   1c270:	mov	sl, r0
   1c274:	ldr	r2, [r5, #40]	; 0x28
   1c278:	ldr	r3, [r5, #44]	; 0x2c
   1c27c:	ldm	r5, {r0, r1}
   1c280:	orr	r8, r1, #1
   1c284:	add	r9, r5, #8
   1c288:	mov	r1, #0
   1c28c:	ldr	r6, [sl]
   1c290:	stm	sp, {r0, r8, r9}
   1c294:	mov	r0, #0
   1c298:	str	r2, [sp, #12]
   1c29c:	str	r3, [sp, #16]
   1c2a0:	mov	r2, r7
   1c2a4:	mov	r3, r4
   1c2a8:	str	r6, [sp, #24]
   1c2ac:	mov	r6, r4
   1c2b0:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c2b4:	add	r7, r0, #1
   1c2b8:	mov	r0, r7
   1c2bc:	bl	1dabc <__assert_fail@plt+0xc504>
   1c2c0:	mov	r4, r0
   1c2c4:	ldr	r0, [r5]
   1c2c8:	ldr	r2, [r5, #44]	; 0x2c
   1c2cc:	ldr	r1, [r5, #40]	; 0x28
   1c2d0:	mov	r3, r6
   1c2d4:	stm	sp, {r0, r8, r9}
   1c2d8:	str	r2, [sp, #16]
   1c2dc:	ldr	r2, [sp, #20]
   1c2e0:	str	r1, [sp, #12]
   1c2e4:	mov	r0, r4
   1c2e8:	mov	r1, r7
   1c2ec:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c2f0:	ldr	r0, [sp, #24]
   1c2f4:	str	r0, [sl]
   1c2f8:	mov	r0, r4
   1c2fc:	sub	sp, fp, #28
   1c300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c308:	add	fp, sp, #28
   1c30c:	sub	sp, sp, #36	; 0x24
   1c310:	movw	r8, #12768	; 0x31e0
   1c314:	cmp	r3, #0
   1c318:	mov	r4, r2
   1c31c:	str	r2, [sp, #24]
   1c320:	mov	r5, r1
   1c324:	mov	r6, r0
   1c328:	str	r0, [sp, #20]
   1c32c:	movt	r8, #3
   1c330:	movne	r8, r3
   1c334:	bl	1148c <__errno_location@plt>
   1c338:	str	r0, [sp, #28]
   1c33c:	ldr	r1, [r8, #40]	; 0x28
   1c340:	ldr	r2, [r8, #44]	; 0x2c
   1c344:	ldr	r7, [r0]
   1c348:	cmp	r4, #0
   1c34c:	add	sl, r8, #8
   1c350:	mov	r0, #0
   1c354:	ldm	r8, {r3, r9}
   1c358:	orreq	r9, r9, #1
   1c35c:	stm	sp, {r3, r9, sl}
   1c360:	str	r1, [sp, #12]
   1c364:	str	r2, [sp, #16]
   1c368:	mov	r1, #0
   1c36c:	mov	r2, r6
   1c370:	mov	r3, r5
   1c374:	str	r7, [sp, #32]
   1c378:	mov	r7, r5
   1c37c:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c380:	add	r4, r0, #1
   1c384:	mov	r5, r0
   1c388:	mov	r0, r4
   1c38c:	bl	1dabc <__assert_fail@plt+0xc504>
   1c390:	mov	r6, r0
   1c394:	ldr	r0, [r8]
   1c398:	ldr	r2, [r8, #44]	; 0x2c
   1c39c:	ldr	r1, [r8, #40]	; 0x28
   1c3a0:	mov	r3, r7
   1c3a4:	stm	sp, {r0, r9, sl}
   1c3a8:	str	r2, [sp, #16]
   1c3ac:	ldr	r2, [sp, #20]
   1c3b0:	str	r1, [sp, #12]
   1c3b4:	mov	r0, r6
   1c3b8:	mov	r1, r4
   1c3bc:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c3c0:	ldr	r0, [sp, #24]
   1c3c4:	ldr	r1, [sp, #32]
   1c3c8:	ldr	r2, [sp, #28]
   1c3cc:	cmp	r0, #0
   1c3d0:	str	r1, [r2]
   1c3d4:	strne	r5, [r0]
   1c3d8:	mov	r0, r6
   1c3dc:	sub	sp, fp, #28
   1c3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3e4:	push	{r4, r5, r6, r7, fp, lr}
   1c3e8:	add	fp, sp, #16
   1c3ec:	movw	r4, #12664	; 0x3178
   1c3f0:	movt	r4, #3
   1c3f4:	ldrd	r6, [r4]
   1c3f8:	cmp	r7, #2
   1c3fc:	blt	1c428 <__assert_fail@plt+0xae70>
   1c400:	add	r5, r6, #12
   1c404:	mov	r7, #0
   1c408:	ldr	r0, [r5, r7, lsl #3]
   1c40c:	bl	1e260 <__assert_fail@plt+0xcca8>
   1c410:	ldr	r1, [r4, #4]
   1c414:	add	r2, r7, #2
   1c418:	add	r0, r7, #1
   1c41c:	mov	r7, r0
   1c420:	cmp	r2, r1
   1c424:	blt	1c408 <__assert_fail@plt+0xae50>
   1c428:	ldr	r0, [r6, #4]
   1c42c:	movw	r5, #12816	; 0x3210
   1c430:	movt	r5, #3
   1c434:	cmp	r0, r5
   1c438:	beq	1c44c <__assert_fail@plt+0xae94>
   1c43c:	bl	1e260 <__assert_fail@plt+0xcca8>
   1c440:	mov	r0, #256	; 0x100
   1c444:	str	r0, [r4, #8]
   1c448:	str	r5, [r4, #12]
   1c44c:	add	r5, r4, #8
   1c450:	cmp	r6, r5
   1c454:	beq	1c464 <__assert_fail@plt+0xaeac>
   1c458:	mov	r0, r6
   1c45c:	bl	1e260 <__assert_fail@plt+0xcca8>
   1c460:	str	r5, [r4]
   1c464:	mov	r0, #1
   1c468:	str	r0, [r4, #4]
   1c46c:	pop	{r4, r5, r6, r7, fp, pc}
   1c470:	movw	r3, #12768	; 0x31e0
   1c474:	mvn	r2, #0
   1c478:	movt	r3, #3
   1c47c:	b	1c480 <__assert_fail@plt+0xaec8>
   1c480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c484:	add	fp, sp, #28
   1c488:	sub	sp, sp, #44	; 0x2c
   1c48c:	mov	r7, r3
   1c490:	str	r2, [sp, #36]	; 0x24
   1c494:	str	r1, [sp, #32]
   1c498:	mov	r5, r0
   1c49c:	bl	1148c <__errno_location@plt>
   1c4a0:	cmp	r5, #0
   1c4a4:	bmi	1c60c <__assert_fail@plt+0xb054>
   1c4a8:	cmn	r5, #-2147483647	; 0x80000001
   1c4ac:	beq	1c60c <__assert_fail@plt+0xb054>
   1c4b0:	movw	r8, #12664	; 0x3178
   1c4b4:	mov	r4, r0
   1c4b8:	ldr	r0, [r0]
   1c4bc:	movt	r8, #3
   1c4c0:	str	r4, [sp, #28]
   1c4c4:	ldr	r1, [r8, #4]
   1c4c8:	ldr	r6, [r8]
   1c4cc:	str	r0, [sp, #24]
   1c4d0:	cmp	r1, r5
   1c4d4:	ble	1c4e0 <__assert_fail@plt+0xaf28>
   1c4d8:	mov	sl, r6
   1c4dc:	b	1c548 <__assert_fail@plt+0xaf90>
   1c4e0:	mov	r0, #8
   1c4e4:	add	r9, r8, #8
   1c4e8:	str	r1, [fp, #-32]	; 0xffffffe0
   1c4ec:	sub	r1, r5, r1
   1c4f0:	mvn	r3, #-2147483648	; 0x80000000
   1c4f4:	str	r0, [sp]
   1c4f8:	subs	r0, r6, r9
   1c4fc:	add	r2, r1, #1
   1c500:	sub	r1, fp, #32
   1c504:	movne	r0, r6
   1c508:	bl	1dcbc <__assert_fail@plt+0xc704>
   1c50c:	mov	sl, r0
   1c510:	cmp	r6, r9
   1c514:	str	r0, [r8]
   1c518:	bne	1c524 <__assert_fail@plt+0xaf6c>
   1c51c:	ldrd	r0, [r8, #8]
   1c520:	stm	sl, {r0, r1}
   1c524:	ldr	r1, [r8, #4]
   1c528:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c52c:	add	r0, sl, r1, lsl #3
   1c530:	sub	r1, r2, r1
   1c534:	lsl	r2, r1, #3
   1c538:	mov	r1, #0
   1c53c:	bl	114b0 <memset@plt>
   1c540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c544:	str	r0, [r8, #4]
   1c548:	mov	r9, sl
   1c54c:	ldm	r7, {r0, r1}
   1c550:	orr	r8, r1, #1
   1c554:	add	r1, r7, #8
   1c558:	ldr	r2, [r7, #40]	; 0x28
   1c55c:	ldr	r3, [r7, #44]	; 0x2c
   1c560:	ldr	r6, [r9, r5, lsl #3]!
   1c564:	str	r1, [sp, #20]
   1c568:	ldr	r4, [r9, #4]!
   1c56c:	stm	sp, {r0, r8}
   1c570:	add	r0, sp, #8
   1c574:	stm	r0, {r1, r2, r3}
   1c578:	ldr	r2, [sp, #32]
   1c57c:	ldr	r3, [sp, #36]	; 0x24
   1c580:	mov	r1, r6
   1c584:	mov	r0, r4
   1c588:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c58c:	cmp	r6, r0
   1c590:	bhi	1c5f4 <__assert_fail@plt+0xb03c>
   1c594:	add	r6, r0, #1
   1c598:	movw	r0, #12816	; 0x3210
   1c59c:	movt	r0, #3
   1c5a0:	str	r6, [sl, r5, lsl #3]
   1c5a4:	cmp	r4, r0
   1c5a8:	beq	1c5b4 <__assert_fail@plt+0xaffc>
   1c5ac:	mov	r0, r4
   1c5b0:	bl	1e260 <__assert_fail@plt+0xcca8>
   1c5b4:	mov	r0, r6
   1c5b8:	bl	1dabc <__assert_fail@plt+0xc504>
   1c5bc:	str	r0, [r9]
   1c5c0:	mov	r4, r0
   1c5c4:	add	r3, sp, #8
   1c5c8:	ldr	r0, [r7]
   1c5cc:	ldr	r1, [r7, #40]	; 0x28
   1c5d0:	ldr	r2, [r7, #44]	; 0x2c
   1c5d4:	stm	sp, {r0, r8}
   1c5d8:	ldr	r0, [sp, #20]
   1c5dc:	stm	r3, {r0, r1, r2}
   1c5e0:	ldr	r2, [sp, #32]
   1c5e4:	ldr	r3, [sp, #36]	; 0x24
   1c5e8:	mov	r0, r4
   1c5ec:	mov	r1, r6
   1c5f0:	bl	1ae94 <__assert_fail@plt+0x98dc>
   1c5f4:	ldr	r1, [sp, #24]
   1c5f8:	ldr	r0, [sp, #28]
   1c5fc:	str	r1, [r0]
   1c600:	mov	r0, r4
   1c604:	sub	sp, fp, #28
   1c608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c60c:	bl	11588 <abort@plt>
   1c610:	movw	r3, #12768	; 0x31e0
   1c614:	movt	r3, #3
   1c618:	b	1c480 <__assert_fail@plt+0xaec8>
   1c61c:	movw	r3, #12768	; 0x31e0
   1c620:	mov	r1, r0
   1c624:	mov	r0, #0
   1c628:	mvn	r2, #0
   1c62c:	movt	r3, #3
   1c630:	b	1c480 <__assert_fail@plt+0xaec8>
   1c634:	movw	r3, #12768	; 0x31e0
   1c638:	mov	r2, r1
   1c63c:	mov	r1, r0
   1c640:	mov	r0, #0
   1c644:	movt	r3, #3
   1c648:	b	1c480 <__assert_fail@plt+0xaec8>
   1c64c:	push	{fp, lr}
   1c650:	mov	fp, sp
   1c654:	sub	sp, sp, #48	; 0x30
   1c658:	vmov.i32	q8, #0	; 0x00000000
   1c65c:	mov	ip, #32
   1c660:	mov	r3, sp
   1c664:	mov	lr, r2
   1c668:	cmp	r1, #10
   1c66c:	add	r2, r3, #16
   1c670:	vst1.64	{d16-d17}, [r3], ip
   1c674:	vst1.64	{d16-d17}, [r2]
   1c678:	vst1.64	{d16-d17}, [r3]
   1c67c:	beq	1c69c <__assert_fail@plt+0xb0e4>
   1c680:	str	r1, [sp]
   1c684:	mov	r3, sp
   1c688:	mov	r1, lr
   1c68c:	mvn	r2, #0
   1c690:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c694:	mov	sp, fp
   1c698:	pop	{fp, pc}
   1c69c:	bl	11588 <abort@plt>
   1c6a0:	push	{r4, sl, fp, lr}
   1c6a4:	add	fp, sp, #8
   1c6a8:	sub	sp, sp, #48	; 0x30
   1c6ac:	vmov.i32	q8, #0	; 0x00000000
   1c6b0:	mov	ip, r3
   1c6b4:	mov	r3, sp
   1c6b8:	mov	lr, #32
   1c6bc:	cmp	r1, #10
   1c6c0:	add	r4, r3, #16
   1c6c4:	vst1.64	{d16-d17}, [r3], lr
   1c6c8:	vst1.64	{d16-d17}, [r4]
   1c6cc:	vst1.64	{d16-d17}, [r3]
   1c6d0:	beq	1c6f0 <__assert_fail@plt+0xb138>
   1c6d4:	str	r1, [sp]
   1c6d8:	mov	r1, r2
   1c6dc:	mov	r3, sp
   1c6e0:	mov	r2, ip
   1c6e4:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c6e8:	sub	sp, fp, #8
   1c6ec:	pop	{r4, sl, fp, pc}
   1c6f0:	bl	11588 <abort@plt>
   1c6f4:	push	{fp, lr}
   1c6f8:	mov	fp, sp
   1c6fc:	sub	sp, sp, #48	; 0x30
   1c700:	vmov.i32	q8, #0	; 0x00000000
   1c704:	mov	r3, sp
   1c708:	mov	ip, #32
   1c70c:	cmp	r0, #10
   1c710:	add	r2, r3, #16
   1c714:	vst1.64	{d16-d17}, [r3], ip
   1c718:	vst1.64	{d16-d17}, [r2]
   1c71c:	vst1.64	{d16-d17}, [r3]
   1c720:	beq	1c740 <__assert_fail@plt+0xb188>
   1c724:	str	r0, [sp]
   1c728:	mov	r3, sp
   1c72c:	mov	r0, #0
   1c730:	mvn	r2, #0
   1c734:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c738:	mov	sp, fp
   1c73c:	pop	{fp, pc}
   1c740:	bl	11588 <abort@plt>
   1c744:	push	{fp, lr}
   1c748:	mov	fp, sp
   1c74c:	sub	sp, sp, #48	; 0x30
   1c750:	vmov.i32	q8, #0	; 0x00000000
   1c754:	mov	r3, sp
   1c758:	mov	ip, #32
   1c75c:	cmp	r0, #10
   1c760:	add	lr, r3, #16
   1c764:	vst1.64	{d16-d17}, [r3], ip
   1c768:	vst1.64	{d16-d17}, [lr]
   1c76c:	vst1.64	{d16-d17}, [r3]
   1c770:	beq	1c78c <__assert_fail@plt+0xb1d4>
   1c774:	str	r0, [sp]
   1c778:	mov	r3, sp
   1c77c:	mov	r0, #0
   1c780:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c784:	mov	sp, fp
   1c788:	pop	{fp, pc}
   1c78c:	bl	11588 <abort@plt>
   1c790:	push	{r4, sl, fp, lr}
   1c794:	add	fp, sp, #8
   1c798:	sub	sp, sp, #48	; 0x30
   1c79c:	mov	lr, r0
   1c7a0:	movw	r0, #12768	; 0x31e0
   1c7a4:	mov	ip, r1
   1c7a8:	mov	r1, #32
   1c7ac:	mov	r4, #1
   1c7b0:	movt	r0, #3
   1c7b4:	add	r3, r0, #16
   1c7b8:	vld1.64	{d16-d17}, [r0], r1
   1c7bc:	vld1.64	{d20-d21}, [r0]
   1c7c0:	vld1.64	{d18-d19}, [r3]
   1c7c4:	mov	r3, sp
   1c7c8:	add	r0, r3, #32
   1c7cc:	add	r1, r3, #16
   1c7d0:	vst1.64	{d20-d21}, [r0]
   1c7d4:	mov	r0, #28
   1c7d8:	vst1.64	{d18-d19}, [r1]
   1c7dc:	mov	r1, r3
   1c7e0:	and	r0, r0, r2, lsr #3
   1c7e4:	and	r2, r2, #31
   1c7e8:	vst1.64	{d16-d17}, [r1], r0
   1c7ec:	ldr	r0, [r1, #8]
   1c7f0:	bic	r4, r4, r0, lsr r2
   1c7f4:	eor	r0, r0, r4, lsl r2
   1c7f8:	mov	r2, ip
   1c7fc:	str	r0, [r1, #8]
   1c800:	mov	r0, #0
   1c804:	mov	r1, lr
   1c808:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c80c:	sub	sp, fp, #8
   1c810:	pop	{r4, sl, fp, pc}
   1c814:	push	{fp, lr}
   1c818:	mov	fp, sp
   1c81c:	sub	sp, sp, #48	; 0x30
   1c820:	mov	ip, r0
   1c824:	movw	r0, #12768	; 0x31e0
   1c828:	mov	r2, #32
   1c82c:	movt	r0, #3
   1c830:	add	r3, r0, #16
   1c834:	vld1.64	{d16-d17}, [r0], r2
   1c838:	vld1.64	{d20-d21}, [r0]
   1c83c:	vld1.64	{d18-d19}, [r3]
   1c840:	mov	r3, sp
   1c844:	add	r0, r3, #32
   1c848:	add	r2, r3, #16
   1c84c:	vst1.64	{d20-d21}, [r0]
   1c850:	mov	r0, #28
   1c854:	vst1.64	{d18-d19}, [r2]
   1c858:	mov	r2, r3
   1c85c:	and	r0, r0, r1, lsr #3
   1c860:	and	r1, r1, #31
   1c864:	vst1.64	{d16-d17}, [r2], r0
   1c868:	mov	r0, #1
   1c86c:	ldr	lr, [r2, #8]
   1c870:	bic	r0, r0, lr, lsr r1
   1c874:	eor	r0, lr, r0, lsl r1
   1c878:	mov	r1, ip
   1c87c:	str	r0, [r2, #8]
   1c880:	mov	r0, #0
   1c884:	mvn	r2, #0
   1c888:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c88c:	mov	sp, fp
   1c890:	pop	{fp, pc}
   1c894:	push	{fp, lr}
   1c898:	mov	fp, sp
   1c89c:	sub	sp, sp, #48	; 0x30
   1c8a0:	mov	r1, r0
   1c8a4:	movw	r0, #12768	; 0x31e0
   1c8a8:	mov	r3, #32
   1c8ac:	movt	r0, #3
   1c8b0:	add	r2, r0, #16
   1c8b4:	vld1.64	{d16-d17}, [r0], r3
   1c8b8:	mov	r3, sp
   1c8bc:	vld1.64	{d18-d19}, [r2]
   1c8c0:	vld1.64	{d20-d21}, [r0]
   1c8c4:	add	r2, r3, #16
   1c8c8:	add	r0, r3, #32
   1c8cc:	vst1.64	{d18-d19}, [r2]
   1c8d0:	vst1.64	{d20-d21}, [r0]
   1c8d4:	mov	r0, #12
   1c8d8:	mov	r2, r3
   1c8dc:	vst1.64	{d16-d17}, [r2], r0
   1c8e0:	ldr	r0, [r2]
   1c8e4:	orr	r0, r0, #67108864	; 0x4000000
   1c8e8:	str	r0, [r2]
   1c8ec:	mov	r0, #0
   1c8f0:	mvn	r2, #0
   1c8f4:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c8f8:	mov	sp, fp
   1c8fc:	pop	{fp, pc}
   1c900:	push	{fp, lr}
   1c904:	mov	fp, sp
   1c908:	sub	sp, sp, #48	; 0x30
   1c90c:	mov	ip, r1
   1c910:	mov	r1, r0
   1c914:	movw	r0, #12768	; 0x31e0
   1c918:	mov	r2, #32
   1c91c:	movt	r0, #3
   1c920:	add	r3, r0, #16
   1c924:	vld1.64	{d16-d17}, [r0], r2
   1c928:	vld1.64	{d18-d19}, [r3]
   1c92c:	vld1.64	{d20-d21}, [r0]
   1c930:	mov	r3, sp
   1c934:	add	r2, r3, #16
   1c938:	add	r0, r3, #32
   1c93c:	vst1.64	{d18-d19}, [r2]
   1c940:	vst1.64	{d20-d21}, [r0]
   1c944:	mov	r0, #12
   1c948:	mov	r2, r3
   1c94c:	vst1.64	{d16-d17}, [r2], r0
   1c950:	ldr	r0, [r2]
   1c954:	orr	r0, r0, #67108864	; 0x4000000
   1c958:	str	r0, [r2]
   1c95c:	mov	r0, #0
   1c960:	mov	r2, ip
   1c964:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c968:	mov	sp, fp
   1c96c:	pop	{fp, pc}
   1c970:	push	{r4, sl, fp, lr}
   1c974:	add	fp, sp, #8
   1c978:	sub	sp, sp, #96	; 0x60
   1c97c:	vmov.i32	q8, #0	; 0x00000000
   1c980:	mov	ip, r2
   1c984:	mov	r2, sp
   1c988:	mov	r4, #28
   1c98c:	cmp	r1, #10
   1c990:	mov	r3, r2
   1c994:	add	lr, r2, #16
   1c998:	vst1.64	{d16-d17}, [r3], r4
   1c99c:	vst1.64	{d16-d17}, [lr]
   1c9a0:	vst1.32	{d16-d17}, [r3]
   1c9a4:	beq	1c9f4 <__assert_fail@plt+0xb43c>
   1c9a8:	vld1.64	{d16-d17}, [r2], r4
   1c9ac:	vld1.64	{d18-d19}, [lr]
   1c9b0:	add	r3, sp, #48	; 0x30
   1c9b4:	vld1.32	{d20-d21}, [r2]
   1c9b8:	add	r2, r3, #20
   1c9bc:	add	r4, r3, #4
   1c9c0:	vst1.32	{d18-d19}, [r2]
   1c9c4:	add	r2, r3, #32
   1c9c8:	vst1.32	{d16-d17}, [r4]
   1c9cc:	vst1.32	{d20-d21}, [r2]
   1c9d0:	str	r1, [sp, #48]	; 0x30
   1c9d4:	mvn	r2, #0
   1c9d8:	ldr	r1, [sp, #60]	; 0x3c
   1c9dc:	orr	r1, r1, #67108864	; 0x4000000
   1c9e0:	str	r1, [sp, #60]	; 0x3c
   1c9e4:	mov	r1, ip
   1c9e8:	bl	1c480 <__assert_fail@plt+0xaec8>
   1c9ec:	sub	sp, fp, #8
   1c9f0:	pop	{r4, sl, fp, pc}
   1c9f4:	bl	11588 <abort@plt>
   1c9f8:	push	{r4, r5, r6, sl, fp, lr}
   1c9fc:	add	fp, sp, #16
   1ca00:	sub	sp, sp, #48	; 0x30
   1ca04:	mov	ip, r3
   1ca08:	movw	r3, #12768	; 0x31e0
   1ca0c:	mov	r6, #32
   1ca10:	cmp	r1, #0
   1ca14:	mov	r4, sp
   1ca18:	movt	r3, #3
   1ca1c:	cmpne	r2, #0
   1ca20:	add	r5, r4, #16
   1ca24:	add	lr, r3, #16
   1ca28:	vld1.64	{d16-d17}, [r3], r6
   1ca2c:	vld1.64	{d18-d19}, [lr]
   1ca30:	vld1.64	{d20-d21}, [r3]
   1ca34:	mov	r3, #10
   1ca38:	vst1.64	{d16-d17}, [r4], r6
   1ca3c:	vst1.64	{d18-d19}, [r5]
   1ca40:	vst1.64	{d20-d21}, [r4]
   1ca44:	str	r3, [sp]
   1ca48:	bne	1ca50 <__assert_fail@plt+0xb498>
   1ca4c:	bl	11588 <abort@plt>
   1ca50:	str	r2, [sp, #44]	; 0x2c
   1ca54:	str	r1, [sp, #40]	; 0x28
   1ca58:	mov	r3, sp
   1ca5c:	mov	r1, ip
   1ca60:	mvn	r2, #0
   1ca64:	bl	1c480 <__assert_fail@plt+0xaec8>
   1ca68:	sub	sp, fp, #16
   1ca6c:	pop	{r4, r5, r6, sl, fp, pc}
   1ca70:	push	{r4, r5, r6, sl, fp, lr}
   1ca74:	add	fp, sp, #16
   1ca78:	sub	sp, sp, #48	; 0x30
   1ca7c:	mov	lr, r3
   1ca80:	movw	r3, #12768	; 0x31e0
   1ca84:	mov	r6, #32
   1ca88:	cmp	r1, #0
   1ca8c:	mov	r4, sp
   1ca90:	movt	r3, #3
   1ca94:	cmpne	r2, #0
   1ca98:	add	r5, r4, #16
   1ca9c:	add	ip, r3, #16
   1caa0:	vld1.64	{d16-d17}, [r3], r6
   1caa4:	vld1.64	{d18-d19}, [ip]
   1caa8:	vld1.64	{d20-d21}, [r3]
   1caac:	mov	r3, #10
   1cab0:	vst1.64	{d16-d17}, [r4], r6
   1cab4:	vst1.64	{d18-d19}, [r5]
   1cab8:	vst1.64	{d20-d21}, [r4]
   1cabc:	str	r3, [sp]
   1cac0:	bne	1cac8 <__assert_fail@plt+0xb510>
   1cac4:	bl	11588 <abort@plt>
   1cac8:	ldr	ip, [fp, #8]
   1cacc:	str	r2, [sp, #44]	; 0x2c
   1cad0:	str	r1, [sp, #40]	; 0x28
   1cad4:	mov	r3, sp
   1cad8:	mov	r1, lr
   1cadc:	mov	r2, ip
   1cae0:	bl	1c480 <__assert_fail@plt+0xaec8>
   1cae4:	sub	sp, fp, #16
   1cae8:	pop	{r4, r5, r6, sl, fp, pc}
   1caec:	push	{r4, sl, fp, lr}
   1caf0:	add	fp, sp, #8
   1caf4:	sub	sp, sp, #48	; 0x30
   1caf8:	movw	r3, #12768	; 0x31e0
   1cafc:	mov	lr, #32
   1cb00:	mov	ip, r2
   1cb04:	cmp	r0, #0
   1cb08:	movt	r3, #3
   1cb0c:	cmpne	r1, #0
   1cb10:	add	r2, r3, #16
   1cb14:	vld1.64	{d16-d17}, [r3], lr
   1cb18:	vld1.64	{d20-d21}, [r3]
   1cb1c:	vld1.64	{d18-d19}, [r2]
   1cb20:	mov	r2, sp
   1cb24:	add	r4, r2, #16
   1cb28:	vst1.64	{d16-d17}, [r2], lr
   1cb2c:	vst1.64	{d20-d21}, [r2]
   1cb30:	mov	r2, #10
   1cb34:	vst1.64	{d18-d19}, [r4]
   1cb38:	str	r2, [sp]
   1cb3c:	bne	1cb44 <__assert_fail@plt+0xb58c>
   1cb40:	bl	11588 <abort@plt>
   1cb44:	str	r1, [sp, #44]	; 0x2c
   1cb48:	str	r0, [sp, #40]	; 0x28
   1cb4c:	mov	r3, sp
   1cb50:	mov	r0, #0
   1cb54:	mov	r1, ip
   1cb58:	mvn	r2, #0
   1cb5c:	bl	1c480 <__assert_fail@plt+0xaec8>
   1cb60:	sub	sp, fp, #8
   1cb64:	pop	{r4, sl, fp, pc}
   1cb68:	push	{r4, r5, fp, lr}
   1cb6c:	add	fp, sp, #8
   1cb70:	sub	sp, sp, #48	; 0x30
   1cb74:	mov	ip, r3
   1cb78:	movw	r3, #12768	; 0x31e0
   1cb7c:	mov	r4, #32
   1cb80:	mov	lr, r2
   1cb84:	cmp	r0, #0
   1cb88:	movt	r3, #3
   1cb8c:	cmpne	r1, #0
   1cb90:	add	r2, r3, #16
   1cb94:	vld1.64	{d16-d17}, [r3], r4
   1cb98:	vld1.64	{d20-d21}, [r3]
   1cb9c:	vld1.64	{d18-d19}, [r2]
   1cba0:	mov	r2, sp
   1cba4:	add	r5, r2, #16
   1cba8:	vst1.64	{d16-d17}, [r2], r4
   1cbac:	vst1.64	{d20-d21}, [r2]
   1cbb0:	mov	r2, #10
   1cbb4:	vst1.64	{d18-d19}, [r5]
   1cbb8:	str	r2, [sp]
   1cbbc:	bne	1cbc4 <__assert_fail@plt+0xb60c>
   1cbc0:	bl	11588 <abort@plt>
   1cbc4:	str	r1, [sp, #44]	; 0x2c
   1cbc8:	str	r0, [sp, #40]	; 0x28
   1cbcc:	mov	r3, sp
   1cbd0:	mov	r0, #0
   1cbd4:	mov	r1, lr
   1cbd8:	mov	r2, ip
   1cbdc:	bl	1c480 <__assert_fail@plt+0xaec8>
   1cbe0:	sub	sp, fp, #8
   1cbe4:	pop	{r4, r5, fp, pc}
   1cbe8:	movw	r3, #12616	; 0x3148
   1cbec:	movt	r3, #3
   1cbf0:	b	1c480 <__assert_fail@plt+0xaec8>
   1cbf4:	movw	r3, #12616	; 0x3148
   1cbf8:	mov	r2, r1
   1cbfc:	mov	r1, r0
   1cc00:	mov	r0, #0
   1cc04:	movt	r3, #3
   1cc08:	b	1c480 <__assert_fail@plt+0xaec8>
   1cc0c:	movw	r3, #12616	; 0x3148
   1cc10:	mvn	r2, #0
   1cc14:	movt	r3, #3
   1cc18:	b	1c480 <__assert_fail@plt+0xaec8>
   1cc1c:	movw	r3, #12616	; 0x3148
   1cc20:	mov	r1, r0
   1cc24:	mov	r0, #0
   1cc28:	mvn	r2, #0
   1cc2c:	movt	r3, #3
   1cc30:	b	1c480 <__assert_fail@plt+0xaec8>
   1cc34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cc38:	add	fp, sp, #24
   1cc3c:	mov	r4, r0
   1cc40:	cmp	r0, #0
   1cc44:	beq	1cc78 <__assert_fail@plt+0xb6c0>
   1cc48:	mov	r0, r4
   1cc4c:	bl	11468 <strlen@plt>
   1cc50:	add	r5, r0, #1
   1cc54:	cmp	r5, #58	; 0x3a
   1cc58:	bls	1cc7c <__assert_fail@plt+0xb6c4>
   1cc5c:	add	r0, r0, #10
   1cc60:	bic	r0, r0, #3
   1cc64:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1cc68:	mov	r6, r0
   1cc6c:	cmp	r0, #0
   1cc70:	bne	1cc90 <__assert_fail@plt+0xb6d8>
   1cc74:	b	1ccc8 <__assert_fail@plt+0xb710>
   1cc78:	mov	r5, #0
   1cc7c:	mov	r0, #64	; 0x40
   1cc80:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1cc84:	mov	r6, r0
   1cc88:	cmp	r0, #0
   1cc8c:	beq	1ccc8 <__assert_fail@plt+0xb710>
   1cc90:	cmp	r4, #0
   1cc94:	mov	r0, r4
   1cc98:	mov	r8, #0
   1cc9c:	mov	r7, r6
   1cca0:	movwne	r0, #1
   1cca4:	str	r8, [r6]
   1cca8:	strb	r0, [r6, #4]
   1ccac:	strb	r8, [r7, #5]!
   1ccb0:	beq	1ccc8 <__assert_fail@plt+0xb710>
   1ccb4:	mov	r0, r7
   1ccb8:	mov	r1, r4
   1ccbc:	mov	r2, r5
   1ccc0:	bl	112f4 <memcpy@plt>
   1ccc4:	strb	r8, [r7, r5]
   1ccc8:	mov	r0, r6
   1cccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ccd0:	push	{r4, sl, fp, lr}
   1ccd4:	add	fp, sp, #8
   1ccd8:	cmp	r0, #2
   1ccdc:	popcc	{r4, sl, fp, pc}
   1cce0:	ldr	r4, [r0]
   1cce4:	bl	1e260 <__assert_fail@plt+0xcca8>
   1cce8:	cmp	r4, #0
   1ccec:	mov	r0, r4
   1ccf0:	bne	1cce0 <__assert_fail@plt+0xb728>
   1ccf4:	pop	{r4, sl, fp, pc}
   1ccf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccfc:	add	fp, sp, #28
   1cd00:	sub	sp, sp, #4
   1cd04:	mov	r7, r2
   1cd08:	mov	r5, r1
   1cd0c:	cmp	r0, #0
   1cd10:	beq	1cd8c <__assert_fail@plt+0xb7d4>
   1cd14:	mov	r6, r0
   1cd18:	movw	r0, #6802	; 0x1a92
   1cd1c:	movt	r0, #2
   1cd20:	bl	113c0 <getenv@plt>
   1cd24:	mov	r9, r0
   1cd28:	ldrb	r0, [r6, #4]
   1cd2c:	cmp	r9, #0
   1cd30:	beq	1cda0 <__assert_fail@plt+0xb7e8>
   1cd34:	cmp	r0, #0
   1cd38:	beq	1cd50 <__assert_fail@plt+0xb798>
   1cd3c:	add	r0, r6, #5
   1cd40:	mov	r1, r9
   1cd44:	bl	112a0 <strcmp@plt>
   1cd48:	cmp	r0, #0
   1cd4c:	beq	1ce90 <__assert_fail@plt+0xb8d8>
   1cd50:	mov	r0, r9
   1cd54:	str	r7, [sp]
   1cd58:	bl	11468 <strlen@plt>
   1cd5c:	add	sl, r0, #1
   1cd60:	mov	r8, #1
   1cd64:	cmp	sl, #58	; 0x3a
   1cd68:	bls	1cdb4 <__assert_fail@plt+0xb7fc>
   1cd6c:	add	r0, r0, #10
   1cd70:	bic	r0, r0, #3
   1cd74:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1cd78:	cmp	r0, #0
   1cd7c:	bne	1cdc4 <__assert_fail@plt+0xb80c>
   1cd80:	mov	r0, #0
   1cd84:	sub	sp, fp, #28
   1cd88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd8c:	mov	r0, r5
   1cd90:	mov	r1, r7
   1cd94:	sub	sp, fp, #28
   1cd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd9c:	b	11288 <gmtime_r@plt>
   1cda0:	mov	r8, #0
   1cda4:	cmp	r0, #0
   1cda8:	mov	sl, #0
   1cdac:	str	r7, [sp]
   1cdb0:	beq	1ce8c <__assert_fail@plt+0xb8d4>
   1cdb4:	mov	r0, #64	; 0x40
   1cdb8:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1cdbc:	cmp	r0, #0
   1cdc0:	beq	1cd80 <__assert_fail@plt+0xb7c8>
   1cdc4:	mov	r4, r0
   1cdc8:	mov	r7, r5
   1cdcc:	strb	r8, [r0, #4]
   1cdd0:	mov	r0, #0
   1cdd4:	cmp	r8, #0
   1cdd8:	mov	r5, r4
   1cddc:	str	r0, [r4]
   1cde0:	strb	r0, [r5, #5]!
   1cde4:	beq	1ce00 <__assert_fail@plt+0xb848>
   1cde8:	mov	r0, r5
   1cdec:	mov	r1, r9
   1cdf0:	mov	r2, sl
   1cdf4:	mov	r8, #0
   1cdf8:	bl	112f4 <memcpy@plt>
   1cdfc:	strb	r8, [r5, sl]
   1ce00:	ldrb	r0, [r6, #4]
   1ce04:	mov	r5, r7
   1ce08:	cmp	r0, #0
   1ce0c:	beq	1ce6c <__assert_fail@plt+0xb8b4>
   1ce10:	movw	r0, #6802	; 0x1a92
   1ce14:	add	r1, r6, #5
   1ce18:	mov	r2, #1
   1ce1c:	movt	r0, #2
   1ce20:	bl	11480 <setenv@plt>
   1ce24:	ldr	r7, [sp]
   1ce28:	cmp	r0, #0
   1ce2c:	beq	1ce84 <__assert_fail@plt+0xb8cc>
   1ce30:	bl	1148c <__errno_location@plt>
   1ce34:	ldr	r6, [r0]
   1ce38:	mov	r5, r0
   1ce3c:	cmp	r4, #2
   1ce40:	bcc	1ce5c <__assert_fail@plt+0xb8a4>
   1ce44:	ldr	r7, [r4]
   1ce48:	mov	r0, r4
   1ce4c:	bl	1e260 <__assert_fail@plt+0xcca8>
   1ce50:	cmp	r7, #0
   1ce54:	mov	r4, r7
   1ce58:	bne	1ce44 <__assert_fail@plt+0xb88c>
   1ce5c:	str	r6, [r5]
   1ce60:	mov	r0, #0
   1ce64:	sub	sp, fp, #28
   1ce68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce6c:	movw	r0, #6802	; 0x1a92
   1ce70:	movt	r0, #2
   1ce74:	bl	11564 <unsetenv@plt>
   1ce78:	ldr	r7, [sp]
   1ce7c:	cmp	r0, #0
   1ce80:	bne	1ce30 <__assert_fail@plt+0xb878>
   1ce84:	bl	11360 <tzset@plt>
   1ce88:	b	1ce94 <__assert_fail@plt+0xb8dc>
   1ce8c:	ldr	r7, [sp]
   1ce90:	mov	r4, #1
   1ce94:	mov	r0, r5
   1ce98:	mov	r1, r7
   1ce9c:	bl	1133c <localtime_r@plt>
   1cea0:	mov	sl, #1
   1cea4:	cmp	r0, #0
   1cea8:	mov	r9, #1
   1ceac:	beq	1cec0 <__assert_fail@plt+0xb908>
   1ceb0:	mov	r0, r6
   1ceb4:	mov	r1, r7
   1ceb8:	bl	1cf6c <__assert_fail@plt+0xb9b4>
   1cebc:	eor	r9, r0, #1
   1cec0:	cmp	r4, #1
   1cec4:	beq	1cf28 <__assert_fail@plt+0xb970>
   1cec8:	bl	1148c <__errno_location@plt>
   1cecc:	mov	r6, r0
   1ced0:	ldr	r8, [r0]
   1ced4:	ldrb	r0, [r4, #4]
   1ced8:	cmp	r0, #0
   1cedc:	beq	1cf44 <__assert_fail@plt+0xb98c>
   1cee0:	movw	r0, #6802	; 0x1a92
   1cee4:	add	r1, r4, #5
   1cee8:	mov	r2, #1
   1ceec:	movt	r0, #2
   1cef0:	bl	11480 <setenv@plt>
   1cef4:	cmp	r0, #0
   1cef8:	beq	1cf58 <__assert_fail@plt+0xb9a0>
   1cefc:	ldr	r8, [r6]
   1cf00:	mov	sl, #0
   1cf04:	cmp	r4, #2
   1cf08:	bcc	1cf24 <__assert_fail@plt+0xb96c>
   1cf0c:	ldr	r5, [r4]
   1cf10:	mov	r0, r4
   1cf14:	bl	1e260 <__assert_fail@plt+0xcca8>
   1cf18:	cmp	r5, #0
   1cf1c:	mov	r4, r5
   1cf20:	bne	1cf0c <__assert_fail@plt+0xb954>
   1cf24:	str	r8, [r6]
   1cf28:	cmp	sl, #0
   1cf2c:	moveq	r7, sl
   1cf30:	cmp	r9, #0
   1cf34:	movwne	r7, #0
   1cf38:	mov	r0, r7
   1cf3c:	sub	sp, fp, #28
   1cf40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf44:	movw	r0, #6802	; 0x1a92
   1cf48:	movt	r0, #2
   1cf4c:	bl	11564 <unsetenv@plt>
   1cf50:	cmp	r0, #0
   1cf54:	bne	1cefc <__assert_fail@plt+0xb944>
   1cf58:	bl	11360 <tzset@plt>
   1cf5c:	mov	sl, #1
   1cf60:	cmp	r4, #2
   1cf64:	bcs	1cf0c <__assert_fail@plt+0xb954>
   1cf68:	b	1cf24 <__assert_fail@plt+0xb96c>
   1cf6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf70:	add	fp, sp, #28
   1cf74:	sub	sp, sp, #4
   1cf78:	ldr	r7, [r1, #40]	; 0x28
   1cf7c:	mov	r8, #1
   1cf80:	cmp	r7, #0
   1cf84:	beq	1d024 <__assert_fail@plt+0xba6c>
   1cf88:	mov	r5, r1
   1cf8c:	mov	r6, r0
   1cf90:	cmp	r7, r1
   1cf94:	bcc	1cfa4 <__assert_fail@plt+0xb9ec>
   1cf98:	add	r0, r5, #44	; 0x2c
   1cf9c:	cmp	r7, r0
   1cfa0:	bcc	1d024 <__assert_fail@plt+0xba6c>
   1cfa4:	ldrb	r0, [r7]
   1cfa8:	cmp	r0, #0
   1cfac:	beq	1d018 <__assert_fail@plt+0xba60>
   1cfb0:	add	r4, r6, #5
   1cfb4:	mov	r0, r4
   1cfb8:	mov	r1, r7
   1cfbc:	bl	112a0 <strcmp@plt>
   1cfc0:	cmp	r0, #0
   1cfc4:	beq	1d0c8 <__assert_fail@plt+0xbb10>
   1cfc8:	ldrb	r0, [r4]
   1cfcc:	cmp	r0, #0
   1cfd0:	bne	1cfec <__assert_fail@plt+0xba34>
   1cfd4:	add	r0, r6, #5
   1cfd8:	cmp	r4, r0
   1cfdc:	bne	1d030 <__assert_fail@plt+0xba78>
   1cfe0:	ldrb	r0, [r6, #4]
   1cfe4:	cmp	r0, #0
   1cfe8:	beq	1d030 <__assert_fail@plt+0xba78>
   1cfec:	mov	r0, r4
   1cff0:	bl	11468 <strlen@plt>
   1cff4:	add	r4, r0, r4
   1cff8:	ldrb	r0, [r4, #1]!
   1cffc:	cmp	r0, #0
   1d000:	bne	1cfb4 <__assert_fail@plt+0xb9fc>
   1d004:	ldr	r0, [r6]
   1d008:	cmp	r0, #0
   1d00c:	addne	r4, r0, #5
   1d010:	movne	r6, r0
   1d014:	b	1cfb4 <__assert_fail@plt+0xb9fc>
   1d018:	movw	r4, #9721	; 0x25f9
   1d01c:	movt	r4, #2
   1d020:	str	r4, [r5, #40]	; 0x28
   1d024:	mov	r0, r8
   1d028:	sub	sp, fp, #28
   1d02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d030:	sub	r0, r6, r4
   1d034:	add	sl, r0, #64	; 0x40
   1d038:	mov	r0, r7
   1d03c:	bl	11468 <strlen@plt>
   1d040:	add	r9, r0, #1
   1d044:	cmp	r9, sl
   1d048:	bge	1d074 <__assert_fail@plt+0xbabc>
   1d04c:	mov	r0, r4
   1d050:	mov	r1, r7
   1d054:	mov	r2, r9
   1d058:	bl	112f4 <memcpy@plt>
   1d05c:	mov	r0, #0
   1d060:	strb	r0, [r4, r9]
   1d064:	str	r4, [r5, #40]	; 0x28
   1d068:	mov	r0, r8
   1d06c:	sub	sp, fp, #28
   1d070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d074:	add	r0, r0, #10
   1d078:	cmp	r9, #59	; 0x3b
   1d07c:	bic	r0, r0, #3
   1d080:	movwcc	r0, #64	; 0x40
   1d084:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1d088:	cmp	r0, #0
   1d08c:	beq	1d0d8 <__assert_fail@plt+0xbb20>
   1d090:	mov	sl, r0
   1d094:	mov	r0, #1
   1d098:	mov	r1, r7
   1d09c:	mov	r2, r9
   1d0a0:	strh	r0, [sl, #4]
   1d0a4:	mov	r0, #0
   1d0a8:	add	r4, sl, #5
   1d0ac:	str	r0, [sl]
   1d0b0:	mov	r0, r4
   1d0b4:	bl	112f4 <memcpy@plt>
   1d0b8:	mov	r0, #0
   1d0bc:	strb	r0, [r4, r9]
   1d0c0:	str	sl, [r6]
   1d0c4:	strb	r0, [sl, #4]
   1d0c8:	str	r4, [r5, #40]	; 0x28
   1d0cc:	mov	r0, r8
   1d0d0:	sub	sp, fp, #28
   1d0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0d8:	mov	r8, #0
   1d0dc:	str	r8, [r6]
   1d0e0:	mov	r0, r8
   1d0e4:	sub	sp, fp, #28
   1d0e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0f0:	add	fp, sp, #28
   1d0f4:	sub	sp, sp, #52	; 0x34
   1d0f8:	mov	r9, r1
   1d0fc:	cmp	r0, #0
   1d100:	beq	1d17c <__assert_fail@plt+0xbbc4>
   1d104:	mov	r7, r0
   1d108:	movw	r0, #6802	; 0x1a92
   1d10c:	movt	r0, #2
   1d110:	bl	113c0 <getenv@plt>
   1d114:	mov	r5, r0
   1d118:	ldrb	r0, [r7, #4]
   1d11c:	cmp	r5, #0
   1d120:	beq	1d18c <__assert_fail@plt+0xbbd4>
   1d124:	cmp	r0, #0
   1d128:	beq	1d140 <__assert_fail@plt+0xbb88>
   1d12c:	add	r0, r7, #5
   1d130:	mov	r1, r5
   1d134:	bl	112a0 <strcmp@plt>
   1d138:	cmp	r0, #0
   1d13c:	beq	1d250 <__assert_fail@plt+0xbc98>
   1d140:	mov	r0, r5
   1d144:	bl	11468 <strlen@plt>
   1d148:	add	sl, r0, #1
   1d14c:	mov	r8, #1
   1d150:	cmp	sl, #58	; 0x3a
   1d154:	bls	1d19c <__assert_fail@plt+0xbbe4>
   1d158:	add	r0, r0, #10
   1d15c:	bic	r0, r0, #3
   1d160:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1d164:	mvn	r6, #0
   1d168:	cmp	r0, #0
   1d16c:	bne	1d1b0 <__assert_fail@plt+0xbbf8>
   1d170:	mov	r0, r6
   1d174:	sub	sp, fp, #28
   1d178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d17c:	mov	r0, r9
   1d180:	sub	sp, fp, #28
   1d184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d188:	b	11534 <timegm@plt>
   1d18c:	mov	r8, #0
   1d190:	cmp	r0, #0
   1d194:	mov	sl, #0
   1d198:	beq	1d250 <__assert_fail@plt+0xbc98>
   1d19c:	mov	r0, #64	; 0x40
   1d1a0:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1d1a4:	mvn	r6, #0
   1d1a8:	cmp	r0, #0
   1d1ac:	beq	1d170 <__assert_fail@plt+0xbbb8>
   1d1b0:	mov	r4, r0
   1d1b4:	strb	r8, [r0, #4]
   1d1b8:	mov	r0, #0
   1d1bc:	cmp	r8, #0
   1d1c0:	mov	r6, r4
   1d1c4:	str	r0, [r4]
   1d1c8:	strb	r0, [r6, #5]!
   1d1cc:	beq	1d1e8 <__assert_fail@plt+0xbc30>
   1d1d0:	mov	r0, r6
   1d1d4:	mov	r1, r5
   1d1d8:	mov	r2, sl
   1d1dc:	mov	r8, #0
   1d1e0:	bl	112f4 <memcpy@plt>
   1d1e4:	strb	r8, [r6, sl]
   1d1e8:	ldrb	r0, [r7, #4]
   1d1ec:	cmp	r0, #0
   1d1f0:	beq	1d258 <__assert_fail@plt+0xbca0>
   1d1f4:	movw	r0, #6802	; 0x1a92
   1d1f8:	add	r1, r7, #5
   1d1fc:	mov	r2, #1
   1d200:	movt	r0, #2
   1d204:	bl	11480 <setenv@plt>
   1d208:	cmp	r0, #0
   1d20c:	beq	1d26c <__assert_fail@plt+0xbcb4>
   1d210:	bl	1148c <__errno_location@plt>
   1d214:	ldr	r5, [r0]
   1d218:	mov	r6, r0
   1d21c:	cmp	r4, #2
   1d220:	bcc	1d23c <__assert_fail@plt+0xbc84>
   1d224:	ldr	r7, [r4]
   1d228:	mov	r0, r4
   1d22c:	bl	1e260 <__assert_fail@plt+0xcca8>
   1d230:	cmp	r7, #0
   1d234:	mov	r4, r7
   1d238:	bne	1d224 <__assert_fail@plt+0xbc6c>
   1d23c:	str	r5, [r6]
   1d240:	mvn	r6, #0
   1d244:	mov	r0, r6
   1d248:	sub	sp, fp, #28
   1d24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d250:	mov	r4, #1
   1d254:	b	1d270 <__assert_fail@plt+0xbcb8>
   1d258:	movw	r0, #6802	; 0x1a92
   1d25c:	movt	r0, #2
   1d260:	bl	11564 <unsetenv@plt>
   1d264:	cmp	r0, #0
   1d268:	bne	1d210 <__assert_fail@plt+0xbc58>
   1d26c:	bl	11360 <tzset@plt>
   1d270:	mov	r0, #32
   1d274:	mov	r1, r9
   1d278:	add	r5, sp, #8
   1d27c:	vld1.32	{d16-d17}, [r1], r0
   1d280:	mov	r2, r5
   1d284:	vst1.32	{d16-d17}, [r2], r0
   1d288:	ldr	r0, [r9, #16]
   1d28c:	ldr	r3, [r9, #20]
   1d290:	str	r0, [sp, #24]
   1d294:	mvn	r0, #0
   1d298:	str	r0, [sp, #36]	; 0x24
   1d29c:	str	r3, [sp, #28]
   1d2a0:	ldr	r0, [r1]
   1d2a4:	str	r0, [r2]
   1d2a8:	mov	r0, r5
   1d2ac:	bl	112b8 <mktime@plt>
   1d2b0:	mov	r6, r0
   1d2b4:	ldr	r0, [sp, #36]	; 0x24
   1d2b8:	mov	sl, #1
   1d2bc:	mov	r8, #1
   1d2c0:	cmp	r0, #0
   1d2c4:	bmi	1d2d8 <__assert_fail@plt+0xbd20>
   1d2c8:	add	r1, sp, #8
   1d2cc:	mov	r0, r7
   1d2d0:	bl	1cf6c <__assert_fail@plt+0xb9b4>
   1d2d4:	eor	r8, r0, #1
   1d2d8:	cmp	r4, #1
   1d2dc:	beq	1d350 <__assert_fail@plt+0xbd98>
   1d2e0:	bl	1148c <__errno_location@plt>
   1d2e4:	mov	r7, r0
   1d2e8:	ldr	sl, [r0]
   1d2ec:	ldrb	r0, [r4, #4]
   1d2f0:	cmp	r0, #0
   1d2f4:	beq	1d39c <__assert_fail@plt+0xbde4>
   1d2f8:	movw	r0, #6802	; 0x1a92
   1d2fc:	add	r1, r4, #5
   1d300:	mov	r2, #1
   1d304:	movt	r0, #2
   1d308:	bl	11480 <setenv@plt>
   1d30c:	cmp	r0, #0
   1d310:	str	r6, [sp, #4]
   1d314:	beq	1d3b4 <__assert_fail@plt+0xbdfc>
   1d318:	ldr	r0, [r7]
   1d31c:	mov	sl, #0
   1d320:	str	r0, [sp]
   1d324:	cmp	r4, #2
   1d328:	bcc	1d344 <__assert_fail@plt+0xbd8c>
   1d32c:	ldr	r6, [r4]
   1d330:	mov	r0, r4
   1d334:	bl	1e260 <__assert_fail@plt+0xcca8>
   1d338:	cmp	r6, #0
   1d33c:	mov	r4, r6
   1d340:	bne	1d32c <__assert_fail@plt+0xbd74>
   1d344:	ldr	r0, [sp]
   1d348:	ldr	r6, [sp, #4]
   1d34c:	str	r0, [r7]
   1d350:	eor	r0, sl, #1
   1d354:	orrs	r0, r8, r0
   1d358:	beq	1d36c <__assert_fail@plt+0xbdb4>
   1d35c:	mvn	r6, #0
   1d360:	mov	r0, r6
   1d364:	sub	sp, fp, #28
   1d368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d36c:	mov	r0, #28
   1d370:	add	r1, r5, #16
   1d374:	vld1.32	{d16-d17}, [r5], r0
   1d378:	vld1.64	{d18-d19}, [r1]
   1d37c:	add	r1, r9, #16
   1d380:	vld1.32	{d20-d21}, [r5]
   1d384:	vst1.32	{d16-d17}, [r9], r0
   1d388:	vst1.32	{d18-d19}, [r1]
   1d38c:	vst1.32	{d20-d21}, [r9]
   1d390:	mov	r0, r6
   1d394:	sub	sp, fp, #28
   1d398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d39c:	movw	r0, #6802	; 0x1a92
   1d3a0:	movt	r0, #2
   1d3a4:	bl	11564 <unsetenv@plt>
   1d3a8:	cmp	r0, #0
   1d3ac:	str	r6, [sp, #4]
   1d3b0:	bne	1d318 <__assert_fail@plt+0xbd60>
   1d3b4:	str	sl, [sp]
   1d3b8:	bl	11360 <tzset@plt>
   1d3bc:	mov	sl, #1
   1d3c0:	cmp	r4, #2
   1d3c4:	bcs	1d32c <__assert_fail@plt+0xbd74>
   1d3c8:	b	1d344 <__assert_fail@plt+0xbd8c>
   1d3cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d3d0:	add	fp, sp, #24
   1d3d4:	sub	sp, sp, #32
   1d3d8:	ldr	r6, [fp, #12]
   1d3dc:	ldr	r7, [fp, #8]
   1d3e0:	mov	r4, r2
   1d3e4:	mov	r8, r0
   1d3e8:	cmp	r1, #0
   1d3ec:	beq	1d414 <__assert_fail@plt+0xbe5c>
   1d3f0:	movw	r2, #10332	; 0x285c
   1d3f4:	mov	r5, r1
   1d3f8:	str	r3, [sp, #4]
   1d3fc:	str	r4, [sp]
   1d400:	mov	r0, r8
   1d404:	mov	r1, #1
   1d408:	movt	r2, #2
   1d40c:	mov	r3, r5
   1d410:	b	1d42c <__assert_fail@plt+0xbe74>
   1d414:	movw	r2, #10344	; 0x2868
   1d418:	str	r3, [sp]
   1d41c:	mov	r0, r8
   1d420:	mov	r1, #1
   1d424:	mov	r3, r4
   1d428:	movt	r2, #2
   1d42c:	bl	114d4 <__fprintf_chk@plt>
   1d430:	movw	r1, #10351	; 0x286f
   1d434:	mov	r0, #0
   1d438:	mov	r2, #5
   1d43c:	movt	r1, #2
   1d440:	bl	11318 <dcgettext@plt>
   1d444:	movw	r2, #11069	; 0x2b3d
   1d448:	mov	r3, r0
   1d44c:	movw	r0, #2022	; 0x7e6
   1d450:	mov	r1, #1
   1d454:	movt	r2, #2
   1d458:	str	r0, [sp]
   1d45c:	mov	r0, r8
   1d460:	bl	114d4 <__fprintf_chk@plt>
   1d464:	movw	r4, #9720	; 0x25f8
   1d468:	mov	r1, r8
   1d46c:	movt	r4, #2
   1d470:	mov	r0, r4
   1d474:	bl	11270 <fputs_unlocked@plt>
   1d478:	movw	r1, #10355	; 0x2873
   1d47c:	mov	r0, #0
   1d480:	mov	r2, #5
   1d484:	movt	r1, #2
   1d488:	bl	11318 <dcgettext@plt>
   1d48c:	movw	r3, #10526	; 0x291e
   1d490:	mov	r2, r0
   1d494:	mov	r0, r8
   1d498:	mov	r1, #1
   1d49c:	movt	r3, #2
   1d4a0:	bl	114d4 <__fprintf_chk@plt>
   1d4a4:	mov	r0, r4
   1d4a8:	mov	r1, r8
   1d4ac:	bl	11270 <fputs_unlocked@plt>
   1d4b0:	cmp	r6, #9
   1d4b4:	bhi	1d4f0 <__assert_fail@plt+0xbf38>
   1d4b8:	add	r0, pc, #0
   1d4bc:	ldr	pc, [r0, r6, lsl #2]
   1d4c0:	andeq	sp, r1, r8, ror #9
   1d4c4:	strdeq	sp, [r1], -ip
   1d4c8:	andeq	sp, r1, ip, lsr #10
   1d4cc:	andeq	sp, r1, r4, asr r5
   1d4d0:	andeq	sp, r1, ip, ror r5
   1d4d4:	andeq	sp, r1, r4, lsr #11
   1d4d8:	andeq	sp, r1, ip, asr #11
   1d4dc:	andeq	sp, r1, r4, lsl #12
   1d4e0:	andeq	sp, r1, ip, lsr #13
   1d4e4:	andeq	sp, r1, r4, asr r6
   1d4e8:	sub	sp, fp, #24
   1d4ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d4f0:	movw	r1, #10879	; 0x2a7f
   1d4f4:	movt	r1, #2
   1d4f8:	b	1d65c <__assert_fail@plt+0xc0a4>
   1d4fc:	movw	r1, #10560	; 0x2940
   1d500:	mov	r0, #0
   1d504:	mov	r2, #5
   1d508:	movt	r1, #2
   1d50c:	bl	11318 <dcgettext@plt>
   1d510:	ldr	r3, [r7]
   1d514:	mov	r2, r0
   1d518:	mov	r0, r8
   1d51c:	mov	r1, #1
   1d520:	sub	sp, fp, #24
   1d524:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d528:	b	114d4 <__fprintf_chk@plt>
   1d52c:	movw	r1, #10576	; 0x2950
   1d530:	mov	r0, #0
   1d534:	mov	r2, #5
   1d538:	movt	r1, #2
   1d53c:	bl	11318 <dcgettext@plt>
   1d540:	mov	r2, r0
   1d544:	ldr	r3, [r7]
   1d548:	ldr	r0, [r7, #4]
   1d54c:	str	r0, [sp]
   1d550:	b	1d640 <__assert_fail@plt+0xc088>
   1d554:	movw	r1, #10599	; 0x2967
   1d558:	mov	r0, #0
   1d55c:	mov	r2, #5
   1d560:	movt	r1, #2
   1d564:	bl	11318 <dcgettext@plt>
   1d568:	mov	r2, r0
   1d56c:	ldr	r3, [r7]
   1d570:	ldmib	r7, {r0, r1}
   1d574:	stm	sp, {r0, r1}
   1d578:	b	1d640 <__assert_fail@plt+0xc088>
   1d57c:	movw	r1, #10627	; 0x2983
   1d580:	mov	r0, #0
   1d584:	mov	r2, #5
   1d588:	movt	r1, #2
   1d58c:	bl	11318 <dcgettext@plt>
   1d590:	ldr	r3, [r7]
   1d594:	mov	r2, r0
   1d598:	ldmib	r7, {r0, r1, r7}
   1d59c:	stm	sp, {r0, r1, r7}
   1d5a0:	b	1d640 <__assert_fail@plt+0xc088>
   1d5a4:	movw	r1, #10659	; 0x29a3
   1d5a8:	mov	r0, #0
   1d5ac:	mov	r2, #5
   1d5b0:	movt	r1, #2
   1d5b4:	bl	11318 <dcgettext@plt>
   1d5b8:	ldr	r3, [r7]
   1d5bc:	mov	r2, r0
   1d5c0:	ldmib	r7, {r0, r1, r6, r7}
   1d5c4:	stm	sp, {r0, r1, r6, r7}
   1d5c8:	b	1d640 <__assert_fail@plt+0xc088>
   1d5cc:	movw	r1, #10695	; 0x29c7
   1d5d0:	mov	r0, #0
   1d5d4:	mov	r2, #5
   1d5d8:	movt	r1, #2
   1d5dc:	bl	11318 <dcgettext@plt>
   1d5e0:	mov	r2, r0
   1d5e4:	ldr	r3, [r7]
   1d5e8:	ldmib	r7, {r0, r1, r6}
   1d5ec:	ldr	r5, [r7, #16]
   1d5f0:	ldr	r7, [r7, #20]
   1d5f4:	stm	sp, {r0, r1, r6}
   1d5f8:	str	r5, [sp, #12]
   1d5fc:	str	r7, [sp, #16]
   1d600:	b	1d640 <__assert_fail@plt+0xc088>
   1d604:	movw	r1, #10735	; 0x29ef
   1d608:	mov	r0, #0
   1d60c:	mov	r2, #5
   1d610:	movt	r1, #2
   1d614:	bl	11318 <dcgettext@plt>
   1d618:	mov	r2, r0
   1d61c:	ldr	r3, [r7]
   1d620:	ldmib	r7, {r0, r1, r6}
   1d624:	ldr	r5, [r7, #16]
   1d628:	ldr	r4, [r7, #20]
   1d62c:	ldr	r7, [r7, #24]
   1d630:	stm	sp, {r0, r1, r6}
   1d634:	str	r5, [sp, #12]
   1d638:	str	r4, [sp, #16]
   1d63c:	str	r7, [sp, #20]
   1d640:	mov	r0, r8
   1d644:	mov	r1, #1
   1d648:	bl	114d4 <__fprintf_chk@plt>
   1d64c:	sub	sp, fp, #24
   1d650:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d654:	movw	r1, #10827	; 0x2a4b
   1d658:	movt	r1, #2
   1d65c:	mov	r0, #0
   1d660:	mov	r2, #5
   1d664:	bl	11318 <dcgettext@plt>
   1d668:	mov	ip, r0
   1d66c:	ldr	r3, [r7]
   1d670:	ldr	r0, [r7, #4]
   1d674:	ldr	r1, [r7, #8]
   1d678:	ldr	r6, [r7, #12]
   1d67c:	ldr	r5, [r7, #16]
   1d680:	ldr	r4, [r7, #20]
   1d684:	ldr	r2, [r7, #24]
   1d688:	ldr	lr, [r7, #28]
   1d68c:	ldr	r7, [r7, #32]
   1d690:	stm	sp, {r0, r1, r6}
   1d694:	str	r5, [sp, #12]
   1d698:	str	r4, [sp, #16]
   1d69c:	str	r2, [sp, #20]
   1d6a0:	str	lr, [sp, #24]
   1d6a4:	str	r7, [sp, #28]
   1d6a8:	b	1d6f0 <__assert_fail@plt+0xc138>
   1d6ac:	movw	r1, #10779	; 0x2a1b
   1d6b0:	mov	r0, #0
   1d6b4:	mov	r2, #5
   1d6b8:	movt	r1, #2
   1d6bc:	bl	11318 <dcgettext@plt>
   1d6c0:	mov	ip, r0
   1d6c4:	ldr	r3, [r7]
   1d6c8:	ldmib	r7, {r0, r1, r6}
   1d6cc:	ldr	r5, [r7, #16]
   1d6d0:	ldr	r4, [r7, #20]
   1d6d4:	ldr	r2, [r7, #24]
   1d6d8:	ldr	r7, [r7, #28]
   1d6dc:	stm	sp, {r0, r1, r6}
   1d6e0:	str	r5, [sp, #12]
   1d6e4:	str	r4, [sp, #16]
   1d6e8:	str	r2, [sp, #20]
   1d6ec:	str	r7, [sp, #24]
   1d6f0:	mov	r0, r8
   1d6f4:	mov	r1, #1
   1d6f8:	mov	r2, ip
   1d6fc:	bl	114d4 <__fprintf_chk@plt>
   1d700:	sub	sp, fp, #24
   1d704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d708:	push	{r4, sl, fp, lr}
   1d70c:	add	fp, sp, #8
   1d710:	sub	sp, sp, #8
   1d714:	ldr	ip, [fp, #8]
   1d718:	mov	lr, #0
   1d71c:	ldr	r4, [ip, lr, lsl #2]
   1d720:	add	lr, lr, #1
   1d724:	cmp	r4, #0
   1d728:	bne	1d71c <__assert_fail@plt+0xc164>
   1d72c:	sub	r4, lr, #1
   1d730:	str	ip, [sp]
   1d734:	str	r4, [sp, #4]
   1d738:	bl	1d3cc <__assert_fail@plt+0xbe14>
   1d73c:	sub	sp, fp, #8
   1d740:	pop	{r4, sl, fp, pc}
   1d744:	push	{fp, lr}
   1d748:	mov	fp, sp
   1d74c:	sub	sp, sp, #48	; 0x30
   1d750:	ldr	ip, [fp, #8]
   1d754:	ldr	lr, [ip]
   1d758:	cmp	lr, #0
   1d75c:	str	lr, [sp, #8]
   1d760:	beq	1d7fc <__assert_fail@plt+0xc244>
   1d764:	ldr	lr, [ip, #4]
   1d768:	cmp	lr, #0
   1d76c:	str	lr, [sp, #12]
   1d770:	beq	1d804 <__assert_fail@plt+0xc24c>
   1d774:	ldr	lr, [ip, #8]
   1d778:	cmp	lr, #0
   1d77c:	str	lr, [sp, #16]
   1d780:	beq	1d80c <__assert_fail@plt+0xc254>
   1d784:	ldr	lr, [ip, #12]
   1d788:	cmp	lr, #0
   1d78c:	str	lr, [sp, #20]
   1d790:	beq	1d814 <__assert_fail@plt+0xc25c>
   1d794:	ldr	lr, [ip, #16]
   1d798:	cmp	lr, #0
   1d79c:	str	lr, [sp, #24]
   1d7a0:	beq	1d81c <__assert_fail@plt+0xc264>
   1d7a4:	ldr	lr, [ip, #20]
   1d7a8:	cmp	lr, #0
   1d7ac:	str	lr, [sp, #28]
   1d7b0:	beq	1d824 <__assert_fail@plt+0xc26c>
   1d7b4:	ldr	lr, [ip, #24]
   1d7b8:	cmp	lr, #0
   1d7bc:	str	lr, [sp, #32]
   1d7c0:	beq	1d82c <__assert_fail@plt+0xc274>
   1d7c4:	ldr	lr, [ip, #28]
   1d7c8:	cmp	lr, #0
   1d7cc:	str	lr, [sp, #36]	; 0x24
   1d7d0:	beq	1d834 <__assert_fail@plt+0xc27c>
   1d7d4:	ldr	lr, [ip, #32]
   1d7d8:	cmp	lr, #0
   1d7dc:	str	lr, [sp, #40]	; 0x28
   1d7e0:	beq	1d83c <__assert_fail@plt+0xc284>
   1d7e4:	ldr	lr, [ip, #36]	; 0x24
   1d7e8:	mov	ip, #10
   1d7ec:	cmp	lr, #0
   1d7f0:	str	lr, [sp, #44]	; 0x2c
   1d7f4:	movweq	ip, #9
   1d7f8:	b	1d840 <__assert_fail@plt+0xc288>
   1d7fc:	mov	ip, #0
   1d800:	b	1d840 <__assert_fail@plt+0xc288>
   1d804:	mov	ip, #1
   1d808:	b	1d840 <__assert_fail@plt+0xc288>
   1d80c:	mov	ip, #2
   1d810:	b	1d840 <__assert_fail@plt+0xc288>
   1d814:	mov	ip, #3
   1d818:	b	1d840 <__assert_fail@plt+0xc288>
   1d81c:	mov	ip, #4
   1d820:	b	1d840 <__assert_fail@plt+0xc288>
   1d824:	mov	ip, #5
   1d828:	b	1d840 <__assert_fail@plt+0xc288>
   1d82c:	mov	ip, #6
   1d830:	b	1d840 <__assert_fail@plt+0xc288>
   1d834:	mov	ip, #7
   1d838:	b	1d840 <__assert_fail@plt+0xc288>
   1d83c:	mov	ip, #8
   1d840:	add	lr, sp, #8
   1d844:	str	ip, [sp, #4]
   1d848:	str	lr, [sp]
   1d84c:	bl	1d3cc <__assert_fail@plt+0xbe14>
   1d850:	mov	sp, fp
   1d854:	pop	{fp, pc}
   1d858:	push	{fp, lr}
   1d85c:	mov	fp, sp
   1d860:	sub	sp, sp, #56	; 0x38
   1d864:	add	ip, fp, #8
   1d868:	str	ip, [sp, #12]
   1d86c:	ldr	lr, [fp, #8]
   1d870:	cmp	lr, #0
   1d874:	str	lr, [sp, #16]
   1d878:	beq	1d914 <__assert_fail@plt+0xc35c>
   1d87c:	ldr	lr, [ip, #4]
   1d880:	cmp	lr, #0
   1d884:	str	lr, [sp, #20]
   1d888:	beq	1d91c <__assert_fail@plt+0xc364>
   1d88c:	ldr	lr, [ip, #8]
   1d890:	cmp	lr, #0
   1d894:	str	lr, [sp, #24]
   1d898:	beq	1d924 <__assert_fail@plt+0xc36c>
   1d89c:	ldr	lr, [ip, #12]
   1d8a0:	cmp	lr, #0
   1d8a4:	str	lr, [sp, #28]
   1d8a8:	beq	1d92c <__assert_fail@plt+0xc374>
   1d8ac:	ldr	lr, [ip, #16]
   1d8b0:	cmp	lr, #0
   1d8b4:	str	lr, [sp, #32]
   1d8b8:	beq	1d934 <__assert_fail@plt+0xc37c>
   1d8bc:	ldr	lr, [ip, #20]
   1d8c0:	cmp	lr, #0
   1d8c4:	str	lr, [sp, #36]	; 0x24
   1d8c8:	beq	1d93c <__assert_fail@plt+0xc384>
   1d8cc:	ldr	lr, [ip, #24]
   1d8d0:	cmp	lr, #0
   1d8d4:	str	lr, [sp, #40]	; 0x28
   1d8d8:	beq	1d944 <__assert_fail@plt+0xc38c>
   1d8dc:	ldr	lr, [ip, #28]
   1d8e0:	cmp	lr, #0
   1d8e4:	str	lr, [sp, #44]	; 0x2c
   1d8e8:	beq	1d94c <__assert_fail@plt+0xc394>
   1d8ec:	ldr	lr, [ip, #32]
   1d8f0:	cmp	lr, #0
   1d8f4:	str	lr, [sp, #48]	; 0x30
   1d8f8:	beq	1d954 <__assert_fail@plt+0xc39c>
   1d8fc:	ldr	lr, [ip, #36]	; 0x24
   1d900:	mov	ip, #10
   1d904:	cmp	lr, #0
   1d908:	str	lr, [sp, #52]	; 0x34
   1d90c:	movweq	ip, #9
   1d910:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d914:	mov	ip, #0
   1d918:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d91c:	mov	ip, #1
   1d920:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d924:	mov	ip, #2
   1d928:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d92c:	mov	ip, #3
   1d930:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d934:	mov	ip, #4
   1d938:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d93c:	mov	ip, #5
   1d940:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d944:	mov	ip, #6
   1d948:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d94c:	mov	ip, #7
   1d950:	b	1d958 <__assert_fail@plt+0xc3a0>
   1d954:	mov	ip, #8
   1d958:	add	lr, sp, #16
   1d95c:	str	ip, [sp, #4]
   1d960:	str	lr, [sp]
   1d964:	bl	1d3cc <__assert_fail@plt+0xbe14>
   1d968:	mov	sp, fp
   1d96c:	pop	{fp, pc}
   1d970:	push	{fp, lr}
   1d974:	mov	fp, sp
   1d978:	movw	r0, #12708	; 0x31a4
   1d97c:	movt	r0, #3
   1d980:	ldr	r1, [r0]
   1d984:	movw	r0, #9720	; 0x25f8
   1d988:	movt	r0, #2
   1d98c:	bl	11270 <fputs_unlocked@plt>
   1d990:	movw	r1, #10939	; 0x2abb
   1d994:	mov	r0, #0
   1d998:	mov	r2, #5
   1d99c:	movt	r1, #2
   1d9a0:	bl	11318 <dcgettext@plt>
   1d9a4:	movw	r2, #10959	; 0x2acf
   1d9a8:	mov	r1, r0
   1d9ac:	mov	r0, #1
   1d9b0:	movt	r2, #2
   1d9b4:	bl	114bc <__printf_chk@plt>
   1d9b8:	movw	r1, #10981	; 0x2ae5
   1d9bc:	mov	r0, #0
   1d9c0:	mov	r2, #5
   1d9c4:	movt	r1, #2
   1d9c8:	bl	11318 <dcgettext@plt>
   1d9cc:	movw	r2, #2502	; 0x9c6
   1d9d0:	movw	r3, #2965	; 0xb95
   1d9d4:	mov	r1, r0
   1d9d8:	mov	r0, #1
   1d9dc:	movt	r2, #2
   1d9e0:	movt	r3, #2
   1d9e4:	bl	114bc <__printf_chk@plt>
   1d9e8:	movw	r1, #11001	; 0x2af9
   1d9ec:	mov	r0, #0
   1d9f0:	mov	r2, #5
   1d9f4:	movt	r1, #2
   1d9f8:	bl	11318 <dcgettext@plt>
   1d9fc:	movw	r2, #11040	; 0x2b20
   1da00:	mov	r1, r0
   1da04:	mov	r0, #1
   1da08:	movt	r2, #2
   1da0c:	pop	{fp, lr}
   1da10:	b	114bc <__printf_chk@plt>
   1da14:	push	{r4, r5, r6, sl, fp, lr}
   1da18:	add	fp, sp, #16
   1da1c:	mov	r4, r2
   1da20:	mov	r5, r1
   1da24:	mov	r6, r0
   1da28:	bl	20020 <__assert_fail@plt+0xea68>
   1da2c:	cmp	r0, #0
   1da30:	popne	{r4, r5, r6, sl, fp, pc}
   1da34:	cmp	r6, #0
   1da38:	beq	1da4c <__assert_fail@plt+0xc494>
   1da3c:	cmp	r5, #0
   1da40:	cmpne	r4, #0
   1da44:	bne	1da4c <__assert_fail@plt+0xc494>
   1da48:	pop	{r4, r5, r6, sl, fp, pc}
   1da4c:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1da50:	push	{r4, r5, r6, sl, fp, lr}
   1da54:	add	fp, sp, #16
   1da58:	mov	r4, r2
   1da5c:	mov	r5, r1
   1da60:	mov	r6, r0
   1da64:	bl	20020 <__assert_fail@plt+0xea68>
   1da68:	cmp	r0, #0
   1da6c:	popne	{r4, r5, r6, sl, fp, pc}
   1da70:	cmp	r6, #0
   1da74:	beq	1da88 <__assert_fail@plt+0xc4d0>
   1da78:	cmp	r5, #0
   1da7c:	cmpne	r4, #0
   1da80:	bne	1da88 <__assert_fail@plt+0xc4d0>
   1da84:	pop	{r4, r5, r6, sl, fp, pc}
   1da88:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1da8c:	push	{fp, lr}
   1da90:	mov	fp, sp
   1da94:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1da98:	cmp	r0, #0
   1da9c:	popne	{fp, pc}
   1daa0:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1daa4:	push	{fp, lr}
   1daa8:	mov	fp, sp
   1daac:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1dab0:	cmp	r0, #0
   1dab4:	popne	{fp, pc}
   1dab8:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dabc:	push	{fp, lr}
   1dac0:	mov	fp, sp
   1dac4:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1dac8:	cmp	r0, #0
   1dacc:	popne	{fp, pc}
   1dad0:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dad4:	push	{r4, r5, fp, lr}
   1dad8:	add	fp, sp, #8
   1dadc:	mov	r4, r1
   1dae0:	mov	r5, r0
   1dae4:	bl	1e090 <__assert_fail@plt+0xcad8>
   1dae8:	cmp	r0, #0
   1daec:	popne	{r4, r5, fp, pc}
   1daf0:	cmp	r5, #0
   1daf4:	beq	1db04 <__assert_fail@plt+0xc54c>
   1daf8:	cmp	r4, #0
   1dafc:	bne	1db04 <__assert_fail@plt+0xc54c>
   1db00:	pop	{r4, r5, fp, pc}
   1db04:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1db08:	push	{fp, lr}
   1db0c:	mov	fp, sp
   1db10:	cmp	r1, #0
   1db14:	orreq	r1, r1, #1
   1db18:	bl	1e090 <__assert_fail@plt+0xcad8>
   1db1c:	cmp	r0, #0
   1db20:	popne	{fp, pc}
   1db24:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1db28:	push	{fp, lr}
   1db2c:	mov	fp, sp
   1db30:	clz	r3, r2
   1db34:	lsr	ip, r3, #5
   1db38:	clz	r3, r1
   1db3c:	lsr	r3, r3, #5
   1db40:	orrs	r3, r3, ip
   1db44:	movwne	r1, #1
   1db48:	movwne	r2, #1
   1db4c:	bl	20020 <__assert_fail@plt+0xea68>
   1db50:	cmp	r0, #0
   1db54:	popne	{fp, pc}
   1db58:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1db5c:	push	{fp, lr}
   1db60:	mov	fp, sp
   1db64:	mov	r2, r1
   1db68:	mov	r1, r0
   1db6c:	mov	r0, #0
   1db70:	bl	20020 <__assert_fail@plt+0xea68>
   1db74:	cmp	r0, #0
   1db78:	popne	{fp, pc}
   1db7c:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1db80:	push	{fp, lr}
   1db84:	mov	fp, sp
   1db88:	mov	r2, r1
   1db8c:	mov	r1, r0
   1db90:	clz	r0, r2
   1db94:	clz	r3, r1
   1db98:	lsr	r0, r0, #5
   1db9c:	lsr	r3, r3, #5
   1dba0:	orrs	r0, r3, r0
   1dba4:	mov	r0, #0
   1dba8:	movwne	r1, #1
   1dbac:	movwne	r2, #1
   1dbb0:	bl	20020 <__assert_fail@plt+0xea68>
   1dbb4:	cmp	r0, #0
   1dbb8:	popne	{fp, pc}
   1dbbc:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dbc0:	push	{r4, r5, r6, sl, fp, lr}
   1dbc4:	add	fp, sp, #16
   1dbc8:	ldr	r5, [r1]
   1dbcc:	mov	r4, r1
   1dbd0:	mov	r6, r0
   1dbd4:	cmp	r0, #0
   1dbd8:	beq	1dbf0 <__assert_fail@plt+0xc638>
   1dbdc:	mov	r0, #1
   1dbe0:	add	r0, r0, r5, lsr #1
   1dbe4:	adds	r5, r5, r0
   1dbe8:	bcc	1dbf8 <__assert_fail@plt+0xc640>
   1dbec:	b	1dc34 <__assert_fail@plt+0xc67c>
   1dbf0:	cmp	r5, #0
   1dbf4:	movweq	r5, #64	; 0x40
   1dbf8:	mov	r0, r6
   1dbfc:	mov	r1, r5
   1dc00:	mov	r2, #1
   1dc04:	bl	20020 <__assert_fail@plt+0xea68>
   1dc08:	cmp	r5, #0
   1dc0c:	mov	r1, r5
   1dc10:	movwne	r1, #1
   1dc14:	cmp	r0, #0
   1dc18:	bne	1dc2c <__assert_fail@plt+0xc674>
   1dc1c:	clz	r2, r6
   1dc20:	lsr	r2, r2, #5
   1dc24:	orrs	r1, r2, r1
   1dc28:	bne	1dc34 <__assert_fail@plt+0xc67c>
   1dc2c:	str	r5, [r4]
   1dc30:	pop	{r4, r5, r6, sl, fp, pc}
   1dc34:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dc38:	push	{r4, r5, r6, r7, fp, lr}
   1dc3c:	add	fp, sp, #16
   1dc40:	ldr	r5, [r1]
   1dc44:	mov	r6, r2
   1dc48:	mov	r4, r1
   1dc4c:	mov	r7, r0
   1dc50:	cmp	r0, #0
   1dc54:	beq	1dc6c <__assert_fail@plt+0xc6b4>
   1dc58:	mov	r0, #1
   1dc5c:	add	r0, r0, r5, lsr #1
   1dc60:	adds	r5, r5, r0
   1dc64:	bcc	1dc84 <__assert_fail@plt+0xc6cc>
   1dc68:	b	1dcb8 <__assert_fail@plt+0xc700>
   1dc6c:	cmp	r5, #0
   1dc70:	bne	1dc84 <__assert_fail@plt+0xc6cc>
   1dc74:	mov	r0, #64	; 0x40
   1dc78:	cmp	r6, #64	; 0x40
   1dc7c:	udiv	r5, r0, r6
   1dc80:	addhi	r5, r5, #1
   1dc84:	mov	r0, r7
   1dc88:	mov	r1, r5
   1dc8c:	mov	r2, r6
   1dc90:	bl	20020 <__assert_fail@plt+0xea68>
   1dc94:	cmp	r0, #0
   1dc98:	bne	1dcb0 <__assert_fail@plt+0xc6f8>
   1dc9c:	cmp	r7, #0
   1dca0:	beq	1dcb8 <__assert_fail@plt+0xc700>
   1dca4:	cmp	r6, #0
   1dca8:	cmpne	r5, #0
   1dcac:	bne	1dcb8 <__assert_fail@plt+0xc700>
   1dcb0:	str	r5, [r4]
   1dcb4:	pop	{r4, r5, r6, r7, fp, pc}
   1dcb8:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dcbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dcc0:	add	fp, sp, #24
   1dcc4:	mov	r8, r1
   1dcc8:	ldr	r1, [r1]
   1dccc:	mov	r5, r0
   1dcd0:	add	r0, r1, r1, asr #1
   1dcd4:	cmp	r0, r1
   1dcd8:	mvnvs	r0, #-2147483648	; 0x80000000
   1dcdc:	cmp	r0, r3
   1dce0:	mov	r7, r0
   1dce4:	movgt	r7, r3
   1dce8:	cmn	r3, #1
   1dcec:	movle	r7, r0
   1dcf0:	ldr	r0, [fp, #8]
   1dcf4:	cmn	r0, #1
   1dcf8:	ble	1dd20 <__assert_fail@plt+0xc768>
   1dcfc:	cmp	r0, #0
   1dd00:	beq	1dd74 <__assert_fail@plt+0xc7bc>
   1dd04:	cmn	r7, #1
   1dd08:	ble	1dd48 <__assert_fail@plt+0xc790>
   1dd0c:	mvn	r4, #-2147483648	; 0x80000000
   1dd10:	udiv	r6, r4, r0
   1dd14:	cmp	r6, r7
   1dd18:	bge	1dd74 <__assert_fail@plt+0xc7bc>
   1dd1c:	b	1dd84 <__assert_fail@plt+0xc7cc>
   1dd20:	cmn	r7, #1
   1dd24:	ble	1dd64 <__assert_fail@plt+0xc7ac>
   1dd28:	cmn	r0, #1
   1dd2c:	beq	1dd74 <__assert_fail@plt+0xc7bc>
   1dd30:	mov	r6, #-2147483648	; 0x80000000
   1dd34:	mvn	r4, #-2147483648	; 0x80000000
   1dd38:	sdiv	r6, r6, r0
   1dd3c:	cmp	r6, r7
   1dd40:	bge	1dd74 <__assert_fail@plt+0xc7bc>
   1dd44:	b	1dd84 <__assert_fail@plt+0xc7cc>
   1dd48:	beq	1dd74 <__assert_fail@plt+0xc7bc>
   1dd4c:	mov	r6, #-2147483648	; 0x80000000
   1dd50:	mvn	r4, #-2147483648	; 0x80000000
   1dd54:	sdiv	r6, r6, r7
   1dd58:	cmp	r6, r0
   1dd5c:	bge	1dd74 <__assert_fail@plt+0xc7bc>
   1dd60:	b	1dd84 <__assert_fail@plt+0xc7cc>
   1dd64:	mvn	r4, #-2147483648	; 0x80000000
   1dd68:	sdiv	r6, r4, r0
   1dd6c:	cmp	r7, r6
   1dd70:	blt	1dd84 <__assert_fail@plt+0xc7cc>
   1dd74:	mul	r6, r7, r0
   1dd78:	mov	r4, #64	; 0x40
   1dd7c:	cmp	r6, #63	; 0x3f
   1dd80:	bgt	1dd8c <__assert_fail@plt+0xc7d4>
   1dd84:	sdiv	r7, r4, r0
   1dd88:	mul	r6, r7, r0
   1dd8c:	cmp	r5, #0
   1dd90:	moveq	r4, #0
   1dd94:	streq	r4, [r8]
   1dd98:	sub	r4, r7, r1
   1dd9c:	cmp	r4, r2
   1dda0:	bge	1de4c <__assert_fail@plt+0xc894>
   1dda4:	add	r7, r1, r2
   1dda8:	mov	r6, #0
   1ddac:	mov	r2, #0
   1ddb0:	cmp	r7, r3
   1ddb4:	movwgt	r6, #1
   1ddb8:	cmn	r3, #1
   1ddbc:	movwgt	r2, #1
   1ddc0:	cmp	r7, r1
   1ddc4:	bvs	1de80 <__assert_fail@plt+0xc8c8>
   1ddc8:	ands	r1, r2, r6
   1ddcc:	bne	1de80 <__assert_fail@plt+0xc8c8>
   1ddd0:	cmn	r0, #1
   1ddd4:	ble	1ddfc <__assert_fail@plt+0xc844>
   1ddd8:	cmp	r0, #0
   1dddc:	beq	1de48 <__assert_fail@plt+0xc890>
   1dde0:	cmn	r7, #1
   1dde4:	ble	1de20 <__assert_fail@plt+0xc868>
   1dde8:	mvn	r1, #-2147483648	; 0x80000000
   1ddec:	udiv	r1, r1, r0
   1ddf0:	cmp	r1, r7
   1ddf4:	bge	1de48 <__assert_fail@plt+0xc890>
   1ddf8:	b	1de80 <__assert_fail@plt+0xc8c8>
   1ddfc:	cmn	r7, #1
   1de00:	ble	1de38 <__assert_fail@plt+0xc880>
   1de04:	cmn	r0, #1
   1de08:	beq	1de48 <__assert_fail@plt+0xc890>
   1de0c:	mov	r1, #-2147483648	; 0x80000000
   1de10:	sdiv	r1, r1, r0
   1de14:	cmp	r1, r7
   1de18:	bge	1de48 <__assert_fail@plt+0xc890>
   1de1c:	b	1de80 <__assert_fail@plt+0xc8c8>
   1de20:	beq	1de48 <__assert_fail@plt+0xc890>
   1de24:	mov	r1, #-2147483648	; 0x80000000
   1de28:	sdiv	r1, r1, r7
   1de2c:	cmp	r1, r0
   1de30:	bge	1de48 <__assert_fail@plt+0xc890>
   1de34:	b	1de80 <__assert_fail@plt+0xc8c8>
   1de38:	mvn	r1, #-2147483648	; 0x80000000
   1de3c:	sdiv	r1, r1, r0
   1de40:	cmp	r7, r1
   1de44:	blt	1de80 <__assert_fail@plt+0xc8c8>
   1de48:	mul	r6, r7, r0
   1de4c:	mov	r0, r5
   1de50:	mov	r1, r6
   1de54:	bl	1e090 <__assert_fail@plt+0xcad8>
   1de58:	cmp	r6, #0
   1de5c:	movwne	r6, #1
   1de60:	cmp	r0, #0
   1de64:	bne	1de78 <__assert_fail@plt+0xc8c0>
   1de68:	clz	r1, r5
   1de6c:	lsr	r1, r1, #5
   1de70:	orrs	r1, r1, r6
   1de74:	bne	1de80 <__assert_fail@plt+0xc8c8>
   1de78:	str	r7, [r8]
   1de7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1de80:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1de84:	push	{fp, lr}
   1de88:	mov	fp, sp
   1de8c:	mov	r1, #1
   1de90:	bl	1e00c <__assert_fail@plt+0xca54>
   1de94:	cmp	r0, #0
   1de98:	popne	{fp, pc}
   1de9c:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dea0:	push	{fp, lr}
   1dea4:	mov	fp, sp
   1dea8:	bl	1e00c <__assert_fail@plt+0xca54>
   1deac:	cmp	r0, #0
   1deb0:	popne	{fp, pc}
   1deb4:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1deb8:	push	{fp, lr}
   1debc:	mov	fp, sp
   1dec0:	mov	r1, #1
   1dec4:	bl	1e00c <__assert_fail@plt+0xca54>
   1dec8:	cmp	r0, #0
   1decc:	popne	{fp, pc}
   1ded0:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1ded4:	push	{fp, lr}
   1ded8:	mov	fp, sp
   1dedc:	bl	1e00c <__assert_fail@plt+0xca54>
   1dee0:	cmp	r0, #0
   1dee4:	popne	{fp, pc}
   1dee8:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1deec:	push	{r4, r5, fp, lr}
   1def0:	add	fp, sp, #8
   1def4:	mov	r5, r0
   1def8:	mov	r0, r1
   1defc:	mov	r4, r1
   1df00:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1df04:	cmp	r0, #0
   1df08:	beq	1df1c <__assert_fail@plt+0xc964>
   1df0c:	mov	r1, r5
   1df10:	mov	r2, r4
   1df14:	pop	{r4, r5, fp, lr}
   1df18:	b	112f4 <memcpy@plt>
   1df1c:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1df20:	push	{r4, r5, fp, lr}
   1df24:	add	fp, sp, #8
   1df28:	mov	r5, r0
   1df2c:	mov	r0, r1
   1df30:	mov	r4, r1
   1df34:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1df38:	cmp	r0, #0
   1df3c:	beq	1df50 <__assert_fail@plt+0xc998>
   1df40:	mov	r1, r5
   1df44:	mov	r2, r4
   1df48:	pop	{r4, r5, fp, lr}
   1df4c:	b	112f4 <memcpy@plt>
   1df50:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1df54:	push	{r4, r5, fp, lr}
   1df58:	add	fp, sp, #8
   1df5c:	mov	r5, r0
   1df60:	add	r0, r1, #1
   1df64:	mov	r4, r1
   1df68:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1df6c:	cmp	r0, #0
   1df70:	beq	1df8c <__assert_fail@plt+0xc9d4>
   1df74:	mov	r1, #0
   1df78:	mov	r2, r4
   1df7c:	strb	r1, [r0, r4]
   1df80:	mov	r1, r5
   1df84:	pop	{r4, r5, fp, lr}
   1df88:	b	112f4 <memcpy@plt>
   1df8c:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1df90:	push	{r4, r5, fp, lr}
   1df94:	add	fp, sp, #8
   1df98:	mov	r4, r0
   1df9c:	bl	11468 <strlen@plt>
   1dfa0:	add	r5, r0, #1
   1dfa4:	mov	r0, r5
   1dfa8:	bl	1e060 <__assert_fail@plt+0xcaa8>
   1dfac:	cmp	r0, #0
   1dfb0:	beq	1dfc4 <__assert_fail@plt+0xca0c>
   1dfb4:	mov	r1, r4
   1dfb8:	mov	r2, r5
   1dfbc:	pop	{r4, r5, fp, lr}
   1dfc0:	b	112f4 <memcpy@plt>
   1dfc4:	bl	1dfc8 <__assert_fail@plt+0xca10>
   1dfc8:	push	{fp, lr}
   1dfcc:	mov	fp, sp
   1dfd0:	movw	r0, #12608	; 0x3140
   1dfd4:	movw	r1, #11116	; 0x2b6c
   1dfd8:	mov	r2, #5
   1dfdc:	movt	r0, #3
   1dfe0:	movt	r1, #2
   1dfe4:	ldr	r4, [r0]
   1dfe8:	mov	r0, #0
   1dfec:	bl	11318 <dcgettext@plt>
   1dff0:	movw	r2, #3686	; 0xe66
   1dff4:	mov	r3, r0
   1dff8:	mov	r0, r4
   1dffc:	mov	r1, #0
   1e000:	movt	r2, #2
   1e004:	bl	113a8 <error@plt>
   1e008:	bl	11588 <abort@plt>
   1e00c:	clz	r2, r1
   1e010:	clz	r3, r0
   1e014:	lsr	r2, r2, #5
   1e018:	lsr	r3, r3, #5
   1e01c:	orrs	r2, r3, r2
   1e020:	movwne	r1, #1
   1e024:	movwne	r0, #1
   1e028:	cmp	r1, #0
   1e02c:	beq	1e05c <__assert_fail@plt+0xcaa4>
   1e030:	mvn	r2, #-2147483648	; 0x80000000
   1e034:	udiv	r2, r2, r1
   1e038:	cmp	r2, r0
   1e03c:	bcs	1e05c <__assert_fail@plt+0xcaa4>
   1e040:	push	{fp, lr}
   1e044:	mov	fp, sp
   1e048:	bl	1148c <__errno_location@plt>
   1e04c:	mov	r1, #12
   1e050:	str	r1, [r0]
   1e054:	mov	r0, #0
   1e058:	pop	{fp, pc}
   1e05c:	b	11264 <calloc@plt>
   1e060:	cmp	r0, #0
   1e064:	movweq	r0, #1
   1e068:	cmn	r0, #1
   1e06c:	ble	1e074 <__assert_fail@plt+0xcabc>
   1e070:	b	113cc <malloc@plt>
   1e074:	push	{fp, lr}
   1e078:	mov	fp, sp
   1e07c:	bl	1148c <__errno_location@plt>
   1e080:	mov	r1, #12
   1e084:	str	r1, [r0]
   1e088:	mov	r0, #0
   1e08c:	pop	{fp, pc}
   1e090:	push	{fp, lr}
   1e094:	mov	fp, sp
   1e098:	cmp	r0, #0
   1e09c:	beq	1e0b8 <__assert_fail@plt+0xcb00>
   1e0a0:	cmp	r1, #0
   1e0a4:	beq	1e0c4 <__assert_fail@plt+0xcb0c>
   1e0a8:	cmn	r1, #1
   1e0ac:	ble	1e0d0 <__assert_fail@plt+0xcb18>
   1e0b0:	pop	{fp, lr}
   1e0b4:	b	11330 <realloc@plt>
   1e0b8:	mov	r0, r1
   1e0bc:	pop	{fp, lr}
   1e0c0:	b	1e060 <__assert_fail@plt+0xcaa8>
   1e0c4:	bl	1e260 <__assert_fail@plt+0xcca8>
   1e0c8:	mov	r0, #0
   1e0cc:	pop	{fp, pc}
   1e0d0:	bl	1148c <__errno_location@plt>
   1e0d4:	mov	r1, #12
   1e0d8:	str	r1, [r0]
   1e0dc:	mov	r0, #0
   1e0e0:	pop	{fp, pc}
   1e0e4:	push	{r4, r5, r6, sl, fp, lr}
   1e0e8:	add	fp, sp, #16
   1e0ec:	mov	r4, r0
   1e0f0:	bl	11390 <__fpending@plt>
   1e0f4:	ldr	r6, [r4]
   1e0f8:	mov	r5, r0
   1e0fc:	mov	r0, r4
   1e100:	bl	1e168 <__assert_fail@plt+0xcbb0>
   1e104:	tst	r6, #32
   1e108:	bne	1e140 <__assert_fail@plt+0xcb88>
   1e10c:	cmp	r0, #0
   1e110:	mov	r4, r0
   1e114:	mvnne	r4, #0
   1e118:	cmp	r5, #0
   1e11c:	bne	1e14c <__assert_fail@plt+0xcb94>
   1e120:	cmp	r0, #0
   1e124:	beq	1e14c <__assert_fail@plt+0xcb94>
   1e128:	bl	1148c <__errno_location@plt>
   1e12c:	ldr	r0, [r0]
   1e130:	subs	r4, r0, #9
   1e134:	mvnne	r4, #0
   1e138:	mov	r0, r4
   1e13c:	pop	{r4, r5, r6, sl, fp, pc}
   1e140:	mvn	r4, #0
   1e144:	cmp	r0, #0
   1e148:	beq	1e154 <__assert_fail@plt+0xcb9c>
   1e14c:	mov	r0, r4
   1e150:	pop	{r4, r5, r6, sl, fp, pc}
   1e154:	bl	1148c <__errno_location@plt>
   1e158:	mov	r1, #0
   1e15c:	str	r1, [r0]
   1e160:	mov	r0, r4
   1e164:	pop	{r4, r5, r6, sl, fp, pc}
   1e168:	push	{r4, r5, r6, sl, fp, lr}
   1e16c:	add	fp, sp, #16
   1e170:	sub	sp, sp, #8
   1e174:	mov	r4, r0
   1e178:	bl	114c8 <fileno@plt>
   1e17c:	cmn	r0, #1
   1e180:	ble	1e1f4 <__assert_fail@plt+0xcc3c>
   1e184:	mov	r0, r4
   1e188:	bl	113fc <__freading@plt>
   1e18c:	cmp	r0, #0
   1e190:	beq	1e1bc <__assert_fail@plt+0xcc04>
   1e194:	mov	r0, r4
   1e198:	bl	114c8 <fileno@plt>
   1e19c:	mov	r1, #1
   1e1a0:	mov	r2, #0
   1e1a4:	mov	r3, #0
   1e1a8:	str	r1, [sp]
   1e1ac:	bl	11378 <lseek64@plt>
   1e1b0:	and	r0, r0, r1
   1e1b4:	cmn	r0, #1
   1e1b8:	beq	1e1f4 <__assert_fail@plt+0xcc3c>
   1e1bc:	mov	r0, r4
   1e1c0:	bl	1e204 <__assert_fail@plt+0xcc4c>
   1e1c4:	cmp	r0, #0
   1e1c8:	beq	1e1f4 <__assert_fail@plt+0xcc3c>
   1e1cc:	bl	1148c <__errno_location@plt>
   1e1d0:	ldr	r6, [r0]
   1e1d4:	mov	r5, r0
   1e1d8:	mov	r0, r4
   1e1dc:	bl	114e0 <fclose@plt>
   1e1e0:	cmp	r6, #0
   1e1e4:	strne	r6, [r5]
   1e1e8:	mvnne	r0, #0
   1e1ec:	sub	sp, fp, #16
   1e1f0:	pop	{r4, r5, r6, sl, fp, pc}
   1e1f4:	mov	r0, r4
   1e1f8:	sub	sp, fp, #16
   1e1fc:	pop	{r4, r5, r6, sl, fp, lr}
   1e200:	b	114e0 <fclose@plt>
   1e204:	push	{r4, sl, fp, lr}
   1e208:	add	fp, sp, #8
   1e20c:	sub	sp, sp, #8
   1e210:	mov	r4, r0
   1e214:	cmp	r0, #0
   1e218:	beq	1e250 <__assert_fail@plt+0xcc98>
   1e21c:	mov	r0, r4
   1e220:	bl	113fc <__freading@plt>
   1e224:	cmp	r0, #0
   1e228:	beq	1e250 <__assert_fail@plt+0xcc98>
   1e22c:	ldrb	r0, [r4, #1]
   1e230:	tst	r0, #1
   1e234:	beq	1e250 <__assert_fail@plt+0xcc98>
   1e238:	mov	r0, #1
   1e23c:	mov	r2, #0
   1e240:	mov	r3, #0
   1e244:	str	r0, [sp]
   1e248:	mov	r0, r4
   1e24c:	bl	1e288 <__assert_fail@plt+0xccd0>
   1e250:	mov	r0, r4
   1e254:	sub	sp, fp, #8
   1e258:	pop	{r4, sl, fp, lr}
   1e25c:	b	112c4 <fflush@plt>
   1e260:	push	{r4, r5, r6, sl, fp, lr}
   1e264:	add	fp, sp, #16
   1e268:	mov	r4, r0
   1e26c:	bl	1148c <__errno_location@plt>
   1e270:	ldr	r6, [r0]
   1e274:	mov	r5, r0
   1e278:	mov	r0, r4
   1e27c:	bl	112d0 <free@plt>
   1e280:	str	r6, [r5]
   1e284:	pop	{r4, r5, r6, sl, fp, pc}
   1e288:	push	{r4, r5, r6, r7, fp, lr}
   1e28c:	add	fp, sp, #16
   1e290:	sub	sp, sp, #8
   1e294:	mov	r4, r0
   1e298:	ldr	r0, [r0, #4]
   1e29c:	mov	r5, r3
   1e2a0:	mov	r6, r2
   1e2a4:	ldr	r1, [r4, #8]
   1e2a8:	cmp	r1, r0
   1e2ac:	bne	1e2c8 <__assert_fail@plt+0xcd10>
   1e2b0:	ldrd	r0, [r4, #16]
   1e2b4:	cmp	r1, r0
   1e2b8:	bne	1e2c8 <__assert_fail@plt+0xcd10>
   1e2bc:	ldr	r0, [r4, #36]	; 0x24
   1e2c0:	cmp	r0, #0
   1e2c4:	beq	1e2e0 <__assert_fail@plt+0xcd28>
   1e2c8:	mov	r0, r4
   1e2cc:	mov	r2, r6
   1e2d0:	mov	r3, r5
   1e2d4:	sub	sp, fp, #16
   1e2d8:	pop	{r4, r5, r6, r7, fp, lr}
   1e2dc:	b	114ec <fseeko64@plt>
   1e2e0:	ldr	r7, [fp, #8]
   1e2e4:	mov	r0, r4
   1e2e8:	bl	114c8 <fileno@plt>
   1e2ec:	mov	r2, r6
   1e2f0:	mov	r3, r5
   1e2f4:	str	r7, [sp]
   1e2f8:	bl	11378 <lseek64@plt>
   1e2fc:	and	r2, r0, r1
   1e300:	cmn	r2, #1
   1e304:	beq	1e324 <__assert_fail@plt+0xcd6c>
   1e308:	strd	r0, [r4, #80]	; 0x50
   1e30c:	ldr	r0, [r4]
   1e310:	bic	r0, r0, #16
   1e314:	str	r0, [r4]
   1e318:	mov	r0, #0
   1e31c:	sub	sp, fp, #16
   1e320:	pop	{r4, r5, r6, r7, fp, pc}
   1e324:	mvn	r0, #0
   1e328:	sub	sp, fp, #16
   1e32c:	pop	{r4, r5, r6, r7, fp, pc}
   1e330:	push	{fp, lr}
   1e334:	mov	fp, sp
   1e338:	mov	r0, #14
   1e33c:	bl	1151c <nl_langinfo@plt>
   1e340:	movw	r1, #9721	; 0x25f9
   1e344:	cmp	r0, #0
   1e348:	movt	r1, #2
   1e34c:	movne	r1, r0
   1e350:	movw	r0, #11133	; 0x2b7d
   1e354:	ldrb	r2, [r1]
   1e358:	movt	r0, #2
   1e35c:	cmp	r2, #0
   1e360:	movne	r0, r1
   1e364:	pop	{fp, pc}
   1e368:	push	{r4, r5, r6, r7, fp, lr}
   1e36c:	add	fp, sp, #16
   1e370:	sub	sp, sp, #8
   1e374:	cmp	r0, #0
   1e378:	add	r5, sp, #4
   1e37c:	mov	r7, r2
   1e380:	mov	r4, r1
   1e384:	movne	r5, r0
   1e388:	mov	r0, r5
   1e38c:	bl	1139c <mbrtowc@plt>
   1e390:	mov	r6, r0
   1e394:	cmp	r7, #0
   1e398:	beq	1e3c0 <__assert_fail@plt+0xce08>
   1e39c:	cmn	r6, #2
   1e3a0:	bcc	1e3c0 <__assert_fail@plt+0xce08>
   1e3a4:	mov	r0, #0
   1e3a8:	bl	2005c <__assert_fail@plt+0xeaa4>
   1e3ac:	cmp	r0, #0
   1e3b0:	bne	1e3c0 <__assert_fail@plt+0xce08>
   1e3b4:	ldrb	r0, [r4]
   1e3b8:	mov	r6, #1
   1e3bc:	str	r0, [r5]
   1e3c0:	mov	r0, r6
   1e3c4:	sub	sp, fp, #16
   1e3c8:	pop	{r4, r5, r6, r7, fp, pc}
   1e3cc:	push	{fp, lr}
   1e3d0:	mov	fp, sp
   1e3d4:	sub	sp, sp, #24
   1e3d8:	mvn	ip, #0
   1e3dc:	str	ip, [sp, #8]
   1e3e0:	mov	ip, #0
   1e3e4:	str	ip, [sp, #4]
   1e3e8:	str	ip, [sp]
   1e3ec:	ldr	ip, [fp, #12]
   1e3f0:	str	ip, [sp, #16]
   1e3f4:	ldr	ip, [fp, #8]
   1e3f8:	str	ip, [sp, #12]
   1e3fc:	bl	1e408 <__assert_fail@plt+0xce50>
   1e400:	mov	sp, fp
   1e404:	pop	{fp, pc}
   1e408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e40c:	add	fp, sp, #28
   1e410:	sub	sp, sp, #140	; 0x8c
   1e414:	sub	sp, sp, #1024	; 0x400
   1e418:	mov	r4, r3
   1e41c:	mov	r6, r2
   1e420:	str	r1, [sp, #104]	; 0x68
   1e424:	str	r0, [sp, #108]	; 0x6c
   1e428:	bl	1148c <__errno_location@plt>
   1e42c:	mov	r2, r4
   1e430:	ldrb	r3, [r6]
   1e434:	str	r0, [sp, #76]	; 0x4c
   1e438:	ldr	r0, [r0]
   1e43c:	movw	r5, #9721	; 0x25f9
   1e440:	ldr	r1, [r2, #8]!
   1e444:	movt	r5, #2
   1e448:	str	r0, [sp, #72]	; 0x48
   1e44c:	cmp	r1, #0
   1e450:	mov	r7, r1
   1e454:	movweq	r7, #12
   1e458:	cmp	r1, #12
   1e45c:	subgt	r7, r1, #12
   1e460:	ldr	r1, [r2, #32]
   1e464:	cmp	r1, #0
   1e468:	movne	r5, r1
   1e46c:	cmp	r3, #0
   1e470:	beq	1ffc8 <__assert_fail@plt+0xea10>
   1e474:	sub	r0, fp, #48	; 0x30
   1e478:	mvn	r1, #13
   1e47c:	str	r2, [sp, #60]	; 0x3c
   1e480:	str	r7, [sp, #56]	; 0x38
   1e484:	ldr	r7, [fp, #16]
   1e488:	ldr	ip, [sp, #108]	; 0x6c
   1e48c:	sub	r9, r5, #2
   1e490:	mov	sl, r6
   1e494:	mov	lr, #0
   1e498:	mov	r8, #-2147483648	; 0x80000000
   1e49c:	str	r5, [sp, #64]	; 0x40
   1e4a0:	str	r4, [sp, #88]	; 0x58
   1e4a4:	sub	r1, r1, r0
   1e4a8:	str	r9, [sp, #32]
   1e4ac:	str	r1, [sp, #44]	; 0x2c
   1e4b0:	add	r1, sp, #112	; 0x70
   1e4b4:	add	r1, r1, #1
   1e4b8:	str	r1, [sp, #48]	; 0x30
   1e4bc:	sub	r1, fp, #53	; 0x35
   1e4c0:	add	r2, r1, #3
   1e4c4:	add	r1, r1, #2
   1e4c8:	str	r1, [sp, #84]	; 0x54
   1e4cc:	add	r1, r4, #12
   1e4d0:	str	r2, [sp, #68]	; 0x44
   1e4d4:	str	r1, [sp, #52]	; 0x34
   1e4d8:	sub	r1, r0, #2
   1e4dc:	str	r1, [sp, #28]
   1e4e0:	add	r1, r0, #8
   1e4e4:	str	r1, [sp, #24]
   1e4e8:	add	r1, r0, #13
   1e4ec:	add	r0, r0, #14
   1e4f0:	str	r0, [sp, #80]	; 0x50
   1e4f4:	mvn	r0, r0
   1e4f8:	str	r1, [sp, #40]	; 0x28
   1e4fc:	str	r0, [sp, #36]	; 0x24
   1e500:	uxtb	r1, r3
   1e504:	cmp	r1, #37	; 0x25
   1e508:	beq	1e534 <__assert_fail@plt+0xcf7c>
   1e50c:	b	1e5e0 <__assert_fail@plt+0xd028>
   1e510:	mov	ip, #0
   1e514:	add	lr, r5, lr
   1e518:	ldrb	r3, [sl, #1]!
   1e51c:	mvn	r7, #0
   1e520:	cmp	r3, #0
   1e524:	beq	1ffd0 <__assert_fail@plt+0xea18>
   1e528:	uxtb	r1, r3
   1e52c:	cmp	r1, #37	; 0x25
   1e530:	bne	1e5e0 <__assert_fail@plt+0xd028>
   1e534:	ldr	r0, [fp, #8]
   1e538:	mov	r6, #0
   1e53c:	mov	r9, #0
   1e540:	str	sl, [sp, #100]	; 0x64
   1e544:	mov	r4, r0
   1e548:	add	r1, sl, #2
   1e54c:	add	sl, sl, #1
   1e550:	ldrb	r0, [sl]
   1e554:	sub	r2, r0, #35	; 0x23
   1e558:	cmp	r2, #13
   1e55c:	bhi	1e5a0 <__assert_fail@plt+0xcfe8>
   1e560:	add	r3, pc, #0
   1e564:	ldr	pc, [r3, r2, lsl #2]
   1e568:	ldrdeq	lr, [r1], -r8
   1e56c:	andeq	lr, r1, ip, asr r6
   1e570:	andeq	lr, r1, ip, asr r6
   1e574:	andeq	lr, r1, ip, asr r6
   1e578:	andeq	lr, r1, ip, asr r6
   1e57c:	andeq	lr, r1, ip, asr r6
   1e580:	andeq	lr, r1, ip, asr r6
   1e584:	andeq	lr, r1, ip, asr r6
   1e588:	andeq	lr, r1, r8, lsr #11
   1e58c:	andeq	lr, r1, ip, asr r6
   1e590:	andeq	lr, r1, r8, lsr #11
   1e594:	andeq	lr, r1, ip, asr r6
   1e598:	andeq	lr, r1, ip, asr r6
   1e59c:	andeq	lr, r1, r8, lsr #11
   1e5a0:	cmp	r0, #95	; 0x5f
   1e5a4:	bne	1e5c8 <__assert_fail@plt+0xd010>
   1e5a8:	add	r1, r1, #1
   1e5ac:	add	sl, sl, #1
   1e5b0:	mov	r9, r0
   1e5b4:	ldrb	r0, [sl]
   1e5b8:	sub	r2, r0, #35	; 0x23
   1e5bc:	cmp	r2, #13
   1e5c0:	bls	1e560 <__assert_fail@plt+0xcfa8>
   1e5c4:	b	1e5a0 <__assert_fail@plt+0xcfe8>
   1e5c8:	cmp	r0, #94	; 0x5e
   1e5cc:	bne	1e65c <__assert_fail@plt+0xd0a4>
   1e5d0:	mov	r4, #1
   1e5d4:	b	1e548 <__assert_fail@plt+0xcf90>
   1e5d8:	mov	r6, #1
   1e5dc:	b	1e548 <__assert_fail@plt+0xcf90>
   1e5e0:	ldr	r0, [sp, #104]	; 0x68
   1e5e4:	bic	r1, r7, r7, asr #31
   1e5e8:	cmp	r1, #1
   1e5ec:	mov	r5, r1
   1e5f0:	movls	r5, #1
   1e5f4:	sub	r2, r0, lr
   1e5f8:	cmp	r5, r2
   1e5fc:	bcs	1fffc <__assert_fail@plt+0xea44>
   1e600:	cmp	ip, #0
   1e604:	beq	1e510 <__assert_fail@plt+0xcf58>
   1e608:	cmp	r1, #2
   1e60c:	bcc	1e640 <__assert_fail@plt+0xd088>
   1e610:	sub	r4, r1, #1
   1e614:	mov	r0, ip
   1e618:	mov	r1, #32
   1e61c:	mov	r7, lr
   1e620:	mov	r6, ip
   1e624:	mov	r2, r4
   1e628:	bl	114b0 <memset@plt>
   1e62c:	ldrb	r3, [sl]
   1e630:	mov	ip, r6
   1e634:	mov	lr, r7
   1e638:	add	ip, r6, r4
   1e63c:	mov	r8, #-2147483648	; 0x80000000
   1e640:	strb	r3, [ip], #1
   1e644:	add	lr, r5, lr
   1e648:	ldrb	r3, [sl, #1]!
   1e64c:	mvn	r7, #0
   1e650:	cmp	r3, #0
   1e654:	bne	1e528 <__assert_fail@plt+0xcf70>
   1e658:	b	1ffd0 <__assert_fail@plt+0xea18>
   1e65c:	sub	r2, r0, #48	; 0x30
   1e660:	cmp	r2, #9
   1e664:	bhi	1e6e4 <__assert_fail@plt+0xd12c>
   1e668:	movw	r5, #52428	; 0xcccc
   1e66c:	mov	r7, #0
   1e670:	movt	r5, #3276	; 0xccc
   1e674:	cmn	r7, #1
   1e678:	bgt	1e6b0 <__assert_fail@plt+0xd0f8>
   1e67c:	b	1e6bc <__assert_fail@plt+0xd104>
   1e680:	add	r2, r7, r7, lsl #2
   1e684:	lsl	r3, r2, #1
   1e688:	uxtab	r0, r3, r0
   1e68c:	sub	r7, r0, #48	; 0x30
   1e690:	cmp	r7, r2, lsl #1
   1e694:	mvnvs	r7, #-2147483648	; 0x80000000
   1e698:	ldrb	r0, [r1], #1
   1e69c:	sub	r2, r0, #48	; 0x30
   1e6a0:	cmp	r2, #10
   1e6a4:	bcs	1e6e0 <__assert_fail@plt+0xd128>
   1e6a8:	cmn	r7, #1
   1e6ac:	ble	1e6bc <__assert_fail@plt+0xd104>
   1e6b0:	cmp	r7, r5
   1e6b4:	ble	1e680 <__assert_fail@plt+0xd0c8>
   1e6b8:	b	1e6cc <__assert_fail@plt+0xd114>
   1e6bc:	beq	1e680 <__assert_fail@plt+0xd0c8>
   1e6c0:	sdiv	r2, r8, r7
   1e6c4:	cmp	r2, #10
   1e6c8:	bge	1e680 <__assert_fail@plt+0xd0c8>
   1e6cc:	mvn	r7, #-2147483648	; 0x80000000
   1e6d0:	ldrb	r0, [r1], #1
   1e6d4:	sub	r2, r0, #48	; 0x30
   1e6d8:	cmp	r2, #10
   1e6dc:	bcc	1e6a8 <__assert_fail@plt+0xd0f0>
   1e6e0:	sub	sl, r1, #1
   1e6e4:	cmp	r0, #79	; 0x4f
   1e6e8:	str	ip, [sp, #108]	; 0x6c
   1e6ec:	str	r4, [sp, #96]	; 0x60
   1e6f0:	cmpne	r0, #69	; 0x45
   1e6f4:	bne	1e708 <__assert_fail@plt+0xd150>
   1e6f8:	ldrb	r1, [sl, #1]!
   1e6fc:	cmp	r1, #122	; 0x7a
   1e700:	bls	1e718 <__assert_fail@plt+0xd160>
   1e704:	b	1f228 <__assert_fail@plt+0xdc70>
   1e708:	mov	r1, r0
   1e70c:	mov	r0, #0
   1e710:	cmp	r1, #122	; 0x7a
   1e714:	bhi	1f228 <__assert_fail@plt+0xdc70>
   1e718:	movw	r4, #11157	; 0x2b95
   1e71c:	add	r2, pc, #12
   1e720:	mov	r5, #0
   1e724:	mvn	r8, #0
   1e728:	movt	r4, #2
   1e72c:	ldr	pc, [r2, r1, lsl #2]
   1e730:	muleq	r1, r8, sl
   1e734:	andeq	pc, r1, r8, lsr #4
   1e738:	andeq	pc, r1, r8, lsr #4
   1e73c:	andeq	pc, r1, r8, lsr #4
   1e740:	andeq	pc, r1, r8, lsr #4
   1e744:	andeq	pc, r1, r8, lsr #4
   1e748:	andeq	pc, r1, r8, lsr #4
   1e74c:	andeq	pc, r1, r8, lsr #4
   1e750:	andeq	pc, r1, r8, lsr #4
   1e754:	andeq	pc, r1, r8, lsr #4
   1e758:	andeq	pc, r1, r8, lsr #4
   1e75c:	andeq	pc, r1, r8, lsr #4
   1e760:	andeq	pc, r1, r8, lsr #4
   1e764:	andeq	pc, r1, r8, lsr #4
   1e768:	andeq	pc, r1, r8, lsr #4
   1e76c:	andeq	pc, r1, r8, lsr #4
   1e770:	andeq	pc, r1, r8, lsr #4
   1e774:	andeq	pc, r1, r8, lsr #4
   1e778:	andeq	pc, r1, r8, lsr #4
   1e77c:	andeq	pc, r1, r8, lsr #4
   1e780:	andeq	pc, r1, r8, lsr #4
   1e784:	andeq	pc, r1, r8, lsr #4
   1e788:	andeq	pc, r1, r8, lsr #4
   1e78c:	andeq	pc, r1, r8, lsr #4
   1e790:	andeq	pc, r1, r8, lsr #4
   1e794:	andeq	pc, r1, r8, lsr #4
   1e798:	andeq	pc, r1, r8, lsr #4
   1e79c:	andeq	pc, r1, r8, lsr #4
   1e7a0:	andeq	pc, r1, r8, lsr #4
   1e7a4:	andeq	pc, r1, r8, lsr #4
   1e7a8:	andeq	pc, r1, r8, lsr #4
   1e7ac:	andeq	pc, r1, r8, lsr #4
   1e7b0:	andeq	pc, r1, r8, lsr #4
   1e7b4:	andeq	pc, r1, r8, lsr #4
   1e7b8:	andeq	pc, r1, r8, lsr #4
   1e7bc:	andeq	pc, r1, r8, lsr #4
   1e7c0:	andeq	pc, r1, r8, lsr #4
   1e7c4:	andeq	lr, r1, r8, lsl #21
   1e7c8:	andeq	pc, r1, r8, lsr #4
   1e7cc:	andeq	pc, r1, r8, lsr #4
   1e7d0:	andeq	pc, r1, r8, lsr #4
   1e7d4:	andeq	pc, r1, r8, lsr #4
   1e7d8:	andeq	pc, r1, r8, lsr #4
   1e7dc:	andeq	pc, r1, r8, lsr #4
   1e7e0:	andeq	pc, r1, r8, lsr #4
   1e7e4:	andeq	pc, r1, r8, lsr #4
   1e7e8:	andeq	pc, r1, r8, lsr #4
   1e7ec:	andeq	pc, r1, r8, lsr #4
   1e7f0:	andeq	pc, r1, r8, lsr #4
   1e7f4:	andeq	pc, r1, r8, lsr #4
   1e7f8:	andeq	pc, r1, r8, lsr #4
   1e7fc:	andeq	pc, r1, r8, lsr #4
   1e800:	andeq	pc, r1, r8, lsr #4
   1e804:	andeq	pc, r1, r8, lsr #4
   1e808:	andeq	pc, r1, r8, lsr #4
   1e80c:	andeq	pc, r1, r8, lsr #4
   1e810:	andeq	pc, r1, r8, lsr #4
   1e814:	andeq	pc, r1, r8, lsr #4
   1e818:	andeq	lr, r1, r0, lsr #21
   1e81c:	andeq	pc, r1, r8, lsr #4
   1e820:	andeq	pc, r1, r8, lsr #4
   1e824:	andeq	pc, r1, r8, lsr #4
   1e828:	andeq	pc, r1, r8, lsr #4
   1e82c:	andeq	pc, r1, r8, lsr #4
   1e830:	andeq	pc, r1, r8, lsr #4
   1e834:	andeq	lr, r1, ip, lsl fp
   1e838:	andeq	lr, r1, ip, lsr fp
   1e83c:	andeq	lr, r1, ip, asr fp
   1e840:	andeq	lr, r1, r0, ror fp
   1e844:	andeq	pc, r1, r8, lsr #4
   1e848:	andeq	lr, r1, r4, lsl #23
   1e84c:	andeq	lr, r1, ip, lsl r9
   1e850:			; <UNDEFINED> instruction: 0x0001ebb0
   1e854:	andeq	lr, r1, r4, asr #23
   1e858:	andeq	pc, r1, r8, lsr #4
   1e85c:	andeq	pc, r1, r8, lsr #4
   1e860:	andeq	pc, r1, r8, lsr #4
   1e864:	ldrdeq	lr, [r1], -r8
   1e868:	andeq	lr, r1, ip, ror #23
   1e86c:	andeq	pc, r1, r8, lsr #4
   1e870:	andeq	lr, r1, r0, ror ip
   1e874:	andeq	pc, r1, r8, lsr #4
   1e878:	andeq	lr, r1, ip, lsr #25
   1e87c:	muleq	r1, r0, ip
   1e880:	andeq	lr, r1, r4, lsr #25
   1e884:	andeq	lr, r1, r4, asr sp
   1e888:	andeq	lr, r1, ip, lsl r9
   1e88c:	andeq	lr, r1, r0, lsl #27
   1e890:	andeq	lr, r1, ip, asr #27
   1e894:	andeq	lr, r1, r0, ror #27
   1e898:	andeq	lr, r1, ip, lsl lr
   1e89c:	andeq	pc, r1, r8, lsr #4
   1e8a0:	andeq	pc, r1, r8, lsr #4
   1e8a4:	andeq	pc, r1, r8, lsr #4
   1e8a8:	andeq	pc, r1, r8, lsr #4
   1e8ac:	andeq	pc, r1, r8, lsr #4
   1e8b0:	andeq	pc, r1, r8, lsr #4
   1e8b4:	andeq	lr, r1, r8, lsl #29
   1e8b8:	andeq	lr, r1, ip, ror #20
   1e8bc:	andeq	lr, r1, r8, lsr #29
   1e8c0:			; <UNDEFINED> instruction: 0x0001eebc
   1e8c4:	ldrdeq	lr, [r1], -r0
   1e8c8:	andeq	pc, r1, r8, lsr #4
   1e8cc:	andeq	lr, r1, ip, lsl r9
   1e8d0:	andeq	lr, r1, ip, ror #20
   1e8d4:	andeq	pc, r1, r8, lsr #4
   1e8d8:	andeq	lr, r1, r0, ror #29
   1e8dc:	strdeq	lr, [r1], -r8
   1e8e0:	andeq	lr, r1, ip, lsl #30
   1e8e4:	andeq	pc, r1, r4, lsr r0	; <UNPREDICTABLE>
   1e8e8:	andeq	pc, r1, ip, asr r0	; <UNPREDICTABLE>
   1e8ec:	andeq	pc, r1, r8, lsr #4
   1e8f0:	andeq	lr, r1, r4, ror ip
   1e8f4:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   1e8f8:	andeq	pc, r1, r4, lsr #26
   1e8fc:	ldrdeq	pc, [r1], -r8
   1e900:	andeq	pc, r1, r8, ror r1	; <UNPREDICTABLE>
   1e904:	ldrdeq	pc, [r1], -r4
   1e908:	andeq	pc, r1, r8, lsr #4
   1e90c:	andeq	pc, r1, r8, lsl #4
   1e910:	andeq	pc, r1, r0, lsr #4
   1e914:			; <UNDEFINED> instruction: 0x0001f3b4
   1e918:	andeq	lr, r1, ip, asr #21
   1e91c:	cmp	r0, #69	; 0x45
   1e920:	beq	1f228 <__assert_fail@plt+0xdc70>
   1e924:	ldr	r2, [sp, #88]	; 0x58
   1e928:	movw	ip, #9363	; 0x2493
   1e92c:	str	lr, [sp, #92]	; 0x5c
   1e930:	movw	r6, #382	; 0x17e
   1e934:	movt	ip, #37449	; 0x9249
   1e938:	ldr	r8, [r2, #24]
   1e93c:	ldr	r5, [r2, #28]
   1e940:	ldr	lr, [r2, #20]
   1e944:	sub	r2, r5, r8
   1e948:	cmp	lr, #0
   1e94c:	add	r2, r2, r6
   1e950:	smmla	r4, r2, ip, r2
   1e954:	asr	r6, r4, #2
   1e958:	add	r4, r6, r4, lsr #31
   1e95c:	rsb	r4, r4, r4, lsl #3
   1e960:	sub	r2, r4, r2
   1e964:	add	r2, r5, r2
   1e968:	add	r4, r2, #3
   1e96c:	mvn	r2, #99	; 0x63
   1e970:	movwmi	r2, #300	; 0x12c
   1e974:	add	r2, r2, lr
   1e978:	cmn	r4, #1
   1e97c:	ble	1f574 <__assert_fail@plt+0xdfbc>
   1e980:	movw	r6, #365	; 0x16d
   1e984:	tst	r2, #3
   1e988:	bne	1e9d4 <__assert_fail@plt+0xd41c>
   1e98c:	movw	r6, #34079	; 0x851f
   1e990:	mov	ip, #100	; 0x64
   1e994:	movt	r6, #20971	; 0x51eb
   1e998:	smmul	r6, r2, r6
   1e99c:	asr	r3, r6, #5
   1e9a0:	add	r3, r3, r6, lsr #31
   1e9a4:	mls	ip, r3, ip, r2
   1e9a8:	asr	r3, r6, #7
   1e9ac:	add	r3, r3, r6, lsr #31
   1e9b0:	mov	r6, #400	; 0x190
   1e9b4:	mls	r2, r3, r6, r2
   1e9b8:	movw	r6, #365	; 0x16d
   1e9bc:	cmp	r2, #0
   1e9c0:	movweq	r6, #366	; 0x16e
   1e9c4:	cmp	ip, #0
   1e9c8:	movw	ip, #9363	; 0x2493
   1e9cc:	movt	ip, #37449	; 0x9249
   1e9d0:	movwne	r6, #366	; 0x16e
   1e9d4:	add	r2, r8, r6
   1e9d8:	movw	r3, #382	; 0x17e
   1e9dc:	sub	r2, r5, r2
   1e9e0:	add	r2, r2, r3
   1e9e4:	smmla	r2, r2, ip, r2
   1e9e8:	asr	r3, r2, #2
   1e9ec:	add	r2, r3, r2, lsr #31
   1e9f0:	movw	r3, #379	; 0x17b
   1e9f4:	rsb	r2, r2, r2, lsl #3
   1e9f8:	add	r2, r8, r2
   1e9fc:	sub	r2, r2, r3
   1ea00:	cmn	r2, #1
   1ea04:	movgt	r4, r2
   1ea08:	mvn	r2, r2
   1ea0c:	lsr	r3, r2, #31
   1ea10:	cmp	r1, #71	; 0x47
   1ea14:	beq	1f5f8 <__assert_fail@plt+0xe040>
   1ea18:	cmp	r1, #103	; 0x67
   1ea1c:	bne	1f628 <__assert_fail@plt+0xe070>
   1ea20:	movw	r2, #34079	; 0x851f
   1ea24:	mov	ip, #2
   1ea28:	movt	r2, #20971	; 0x51eb
   1ea2c:	smmul	r6, lr, r2
   1ea30:	asr	r5, r6, #5
   1ea34:	add	r6, r5, r6, lsr #31
   1ea38:	mov	r5, #100	; 0x64
   1ea3c:	mls	r6, r6, r5, lr
   1ea40:	add	r6, r3, r6
   1ea44:	smmul	r2, r6, r2
   1ea48:	asr	r4, r2, #5
   1ea4c:	add	r2, r4, r2, lsr #31
   1ea50:	mls	r4, r2, r5, r6
   1ea54:	mov	r2, #0
   1ea58:	cmn	r4, #1
   1ea5c:	ble	1fa3c <__assert_fail@plt+0xe484>
   1ea60:	ldr	lr, [sp, #92]	; 0x5c
   1ea64:	mov	r3, r4
   1ea68:	b	1fa84 <__assert_fail@plt+0xe4cc>
   1ea6c:	ldr	r2, [sp, #96]	; 0x60
   1ea70:	mov	r5, #0
   1ea74:	cmp	r0, #69	; 0x45
   1ea78:	orr	r2, r6, r2
   1ea7c:	str	r2, [sp, #96]	; 0x60
   1ea80:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ea84:	b	1fd24 <__assert_fail@plt+0xe76c>
   1ea88:	ldr	r1, [sp, #100]	; 0x64
   1ea8c:	sub	r0, sl, #1
   1ea90:	cmp	r0, r1
   1ea94:	beq	1f7d8 <__assert_fail@plt+0xe220>
   1ea98:	sub	sl, sl, #1
   1ea9c:	b	1f228 <__assert_fail@plt+0xdc70>
   1eaa0:	mov	r5, #1
   1eaa4:	ldrb	r2, [sl, r5]
   1eaa8:	cmp	r2, #58	; 0x3a
   1eaac:	bne	1eac0 <__assert_fail@plt+0xd508>
   1eab0:	add	r5, r5, #1
   1eab4:	ldrb	r2, [sl, r5]
   1eab8:	cmp	r2, #58	; 0x3a
   1eabc:	beq	1eab0 <__assert_fail@plt+0xd4f8>
   1eac0:	cmp	r2, #122	; 0x7a
   1eac4:	bne	1f228 <__assert_fail@plt+0xdc70>
   1eac8:	add	sl, sl, r5
   1eacc:	ldr	r3, [sp, #88]	; 0x58
   1ead0:	ldr	r2, [r3, #32]
   1ead4:	cmp	r2, #0
   1ead8:	bmi	1fdd8 <__assert_fail@plt+0xe820>
   1eadc:	mov	r8, lr
   1eae0:	ldr	lr, [r3, #36]	; 0x24
   1eae4:	cmp	lr, #0
   1eae8:	bmi	1f8a0 <__assert_fail@plt+0xe2e8>
   1eaec:	ldr	r3, [sp, #108]	; 0x6c
   1eaf0:	mov	r2, #0
   1eaf4:	bne	1f8a8 <__assert_fail@plt+0xe2f0>
   1eaf8:	ldr	r2, [sp, #64]	; 0x40
   1eafc:	ldrb	r2, [r2]
   1eb00:	sub	r2, r2, #45	; 0x2d
   1eb04:	clz	r2, r2
   1eb08:	lsr	r2, r2, #5
   1eb0c:	cmp	r5, #3
   1eb10:	bls	1f8b0 <__assert_fail@plt+0xe2f8>
   1eb14:	mov	lr, r8
   1eb18:	b	1f22c <__assert_fail@plt+0xdc74>
   1eb1c:	cmp	r0, #0
   1eb20:	bne	1f228 <__assert_fail@plt+0xdc70>
   1eb24:	ldr	r1, [sp, #96]	; 0x60
   1eb28:	mov	r5, #0
   1eb2c:	orr	r1, r6, r1
   1eb30:	str	r1, [sp, #96]	; 0x60
   1eb34:	mov	r1, #65	; 0x41
   1eb38:	b	1fd24 <__assert_fail@plt+0xe76c>
   1eb3c:	cmp	r0, #69	; 0x45
   1eb40:	beq	1f228 <__assert_fail@plt+0xdc70>
   1eb44:	ldr	r1, [sp, #96]	; 0x60
   1eb48:	mov	r5, #0
   1eb4c:	orr	r1, r6, r1
   1eb50:	str	r1, [sp, #96]	; 0x60
   1eb54:	mov	r1, #66	; 0x42
   1eb58:	b	1fd24 <__assert_fail@plt+0xe76c>
   1eb5c:	cmp	r0, #69	; 0x45
   1eb60:	bne	1f644 <__assert_fail@plt+0xe08c>
   1eb64:	mov	r5, #0
   1eb68:	mov	r1, #67	; 0x43
   1eb6c:	b	1fd24 <__assert_fail@plt+0xe76c>
   1eb70:	cmp	r0, #0
   1eb74:	bne	1f228 <__assert_fail@plt+0xdc70>
   1eb78:	movw	r4, #11139	; 0x2b83
   1eb7c:	movt	r4, #2
   1eb80:	b	1ecac <__assert_fail@plt+0xd6f4>
   1eb84:	cmp	r0, #0
   1eb88:	bne	1f228 <__assert_fail@plt+0xdc70>
   1eb8c:	movw	r4, #11148	; 0x2b8c
   1eb90:	cmp	r9, #0
   1eb94:	movt	r4, #2
   1eb98:	bne	1fa5c <__assert_fail@plt+0xe4a4>
   1eb9c:	cmp	r7, #0
   1eba0:	bpl	1fa5c <__assert_fail@plt+0xe4a4>
   1eba4:	mov	r9, #43	; 0x2b
   1eba8:	mov	r8, #4
   1ebac:	b	1ecac <__assert_fail@plt+0xd6f4>
   1ebb0:	cmp	r0, #69	; 0x45
   1ebb4:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ebb8:	ldr	r2, [sp, #60]	; 0x3c
   1ebbc:	ldr	r3, [r2]
   1ebc0:	b	1ef20 <__assert_fail@plt+0xd968>
   1ebc4:	mov	ip, #2
   1ebc8:	cmp	r0, #69	; 0x45
   1ebcc:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ebd0:	ldr	r3, [sp, #56]	; 0x38
   1ebd4:	b	1ef24 <__assert_fail@plt+0xd96c>
   1ebd8:	cmp	r0, #69	; 0x45
   1ebdc:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ebe0:	ldr	r2, [sp, #88]	; 0x58
   1ebe4:	ldr	r3, [r2, #4]
   1ebe8:	b	1ef20 <__assert_fail@plt+0xd968>
   1ebec:	cmp	r0, #69	; 0x45
   1ebf0:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ebf4:	ldr	r1, [fp, #24]
   1ebf8:	ldr	ip, [sp, #108]	; 0x6c
   1ebfc:	cmp	r7, #1
   1ec00:	sub	r5, fp, #48	; 0x30
   1ec04:	mov	r4, #9
   1ec08:	mov	r0, #8
   1ec0c:	movwlt	r7, #9
   1ec10:	mov	r8, r5
   1ec14:	cmp	r7, r4
   1ec18:	blt	1ec48 <__assert_fail@plt+0xd690>
   1ec1c:	movw	r2, #26215	; 0x6667
   1ec20:	cmp	r4, #2
   1ec24:	movt	r2, #26214	; 0x6666
   1ec28:	blt	1f698 <__assert_fail@plt+0xe0e0>
   1ec2c:	smmul	r3, r1, r2
   1ec30:	asr	r6, r3, #2
   1ec34:	add	r3, r6, r3, lsr #31
   1ec38:	add	r3, r3, r3, lsl #2
   1ec3c:	sub	r3, r1, r3, lsl #1
   1ec40:	cmp	r3, #0
   1ec44:	bne	1f698 <__assert_fail@plt+0xe0e0>
   1ec48:	movw	r2, #26215	; 0x6667
   1ec4c:	sub	r0, r0, #1
   1ec50:	sub	r4, r4, #1
   1ec54:	movt	r2, #26214	; 0x6666
   1ec58:	smmul	r1, r1, r2
   1ec5c:	asr	r2, r1, #2
   1ec60:	add	r1, r2, r1, lsr #31
   1ec64:	cmp	r7, r4
   1ec68:	blt	1ec48 <__assert_fail@plt+0xd690>
   1ec6c:	b	1ec1c <__assert_fail@plt+0xd664>
   1ec70:	mov	r5, #1
   1ec74:	ldr	r2, [sp, #96]	; 0x60
   1ec78:	eor	r1, r6, #1
   1ec7c:	orr	r5, r6, r5
   1ec80:	and	r2, r2, r1
   1ec84:	mov	r1, #112	; 0x70
   1ec88:	str	r2, [sp, #96]	; 0x60
   1ec8c:	b	1fd24 <__assert_fail@plt+0xe76c>
   1ec90:	cmp	r0, #69	; 0x45
   1ec94:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ec98:	ldr	r2, [sp, #88]	; 0x58
   1ec9c:	ldr	r3, [r2]
   1eca0:	b	1ef20 <__assert_fail@plt+0xd968>
   1eca4:	movw	r4, #10024	; 0x2728
   1eca8:	movt	r4, #2
   1ecac:	ldr	r0, [sp, #96]	; 0x60
   1ecb0:	ldr	r3, [sp, #88]	; 0x58
   1ecb4:	mvn	r1, #0
   1ecb8:	mov	r2, r4
   1ecbc:	str	lr, [sp, #92]	; 0x5c
   1ecc0:	and	r0, r0, #1
   1ecc4:	stm	sp, {r0, r9}
   1ecc8:	str	r0, [sp, #100]	; 0x64
   1eccc:	ldr	r0, [fp, #20]
   1ecd0:	str	r8, [sp, #8]
   1ecd4:	str	r0, [sp, #12]
   1ecd8:	ldr	r0, [fp, #24]
   1ecdc:	str	r0, [sp, #16]
   1ece0:	mov	r0, #0
   1ece4:	bl	1e408 <__assert_fail@plt+0xce50>
   1ece8:	mov	r6, r0
   1ecec:	subs	r0, r9, #45	; 0x2d
   1ecf0:	ldr	lr, [sp, #92]	; 0x5c
   1ecf4:	ldr	r1, [sp, #104]	; 0x68
   1ecf8:	movne	r0, r7
   1ecfc:	cmp	r7, #0
   1ed00:	mov	r5, r6
   1ed04:	movwmi	r0, #0
   1ed08:	cmp	r0, r6
   1ed0c:	movhi	r5, r0
   1ed10:	sub	r1, r1, lr
   1ed14:	cmp	r5, r1
   1ed18:	bcs	1fffc <__assert_fail@plt+0xea44>
   1ed1c:	ldr	r7, [sp, #108]	; 0x6c
   1ed20:	cmp	r7, #0
   1ed24:	beq	1f3c8 <__assert_fail@plt+0xde10>
   1ed28:	cmp	r0, r6
   1ed2c:	bls	1f3d0 <__assert_fail@plt+0xde18>
   1ed30:	cmp	r9, #48	; 0x30
   1ed34:	sub	r2, r0, r6
   1ed38:	str	r1, [sp, #20]
   1ed3c:	cmpne	r9, #43	; 0x2b
   1ed40:	str	r2, [sp, #96]	; 0x60
   1ed44:	bne	1f9cc <__assert_fail@plt+0xe414>
   1ed48:	mov	r0, r7
   1ed4c:	mov	r1, #48	; 0x30
   1ed50:	b	1f9d4 <__assert_fail@plt+0xe41c>
   1ed54:	cmp	r0, #69	; 0x45
   1ed58:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ed5c:	ldr	r3, [sp, #88]	; 0x58
   1ed60:	ldr	r2, [r3, #24]
   1ed64:	ldr	r3, [r3, #28]
   1ed68:	sub	r2, r3, r2
   1ed6c:	movw	r3, #9363	; 0x2493
   1ed70:	movt	r3, #37449	; 0x9249
   1ed74:	add	r2, r2, #7
   1ed78:	smmla	r2, r2, r3, r2
   1ed7c:	b	1edc0 <__assert_fail@plt+0xd808>
   1ed80:	cmp	r0, #69	; 0x45
   1ed84:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ed88:	ldr	r3, [sp, #88]	; 0x58
   1ed8c:	movw	r6, #9363	; 0x2493
   1ed90:	movt	r6, #37449	; 0x9249
   1ed94:	ldr	r2, [r3, #24]
   1ed98:	ldr	r3, [r3, #28]
   1ed9c:	add	r2, r2, #6
   1eda0:	smmla	r5, r2, r6, r2
   1eda4:	asr	r4, r5, #2
   1eda8:	add	r5, r4, r5, lsr #31
   1edac:	rsb	r5, r5, r5, lsl #3
   1edb0:	sub	r2, r5, r2
   1edb4:	add	r2, r3, r2
   1edb8:	add	r2, r2, #7
   1edbc:	smmla	r2, r2, r6, r2
   1edc0:	asr	r3, r2, #2
   1edc4:	add	r3, r3, r2, lsr #31
   1edc8:	b	1ef20 <__assert_fail@plt+0xd968>
   1edcc:	cmp	r0, #79	; 0x4f
   1edd0:	beq	1f228 <__assert_fail@plt+0xdc70>
   1edd4:	mov	r5, #0
   1edd8:	mov	r1, #88	; 0x58
   1eddc:	b	1fd24 <__assert_fail@plt+0xe76c>
   1ede0:	cmp	r0, #69	; 0x45
   1ede4:	beq	1f924 <__assert_fail@plt+0xe36c>
   1ede8:	cmp	r0, #79	; 0x4f
   1edec:	beq	1f228 <__assert_fail@plt+0xdc70>
   1edf0:	ldr	r2, [sp, #88]	; 0x58
   1edf4:	movw	r6, #63636	; 0xf894
   1edf8:	mov	ip, #4
   1edfc:	movt	r6, #65535	; 0xffff
   1ee00:	ldr	r3, [r2, #20]
   1ee04:	mov	r2, #0
   1ee08:	cmp	r3, r6
   1ee0c:	movw	r6, #1900	; 0x76c
   1ee10:	movwlt	r2, #1
   1ee14:	add	r3, r3, r6
   1ee18:	b	1fa84 <__assert_fail@plt+0xe4cc>
   1ee1c:	ldr	r0, [sp, #64]	; 0x40
   1ee20:	subs	r5, r9, #45	; 0x2d
   1ee24:	bicne	r5, r7, r7, asr #31
   1ee28:	mov	r7, lr
   1ee2c:	bl	11468 <strlen@plt>
   1ee30:	mov	r8, r0
   1ee34:	cmp	r5, r0
   1ee38:	mov	r4, r0
   1ee3c:	ldr	r0, [sp, #104]	; 0x68
   1ee40:	movhi	r4, r5
   1ee44:	sub	r0, r0, r7
   1ee48:	cmp	r4, r0
   1ee4c:	bcs	1fffc <__assert_fail@plt+0xea44>
   1ee50:	ldr	ip, [sp, #108]	; 0x6c
   1ee54:	mov	lr, r7
   1ee58:	cmp	ip, #0
   1ee5c:	beq	1f838 <__assert_fail@plt+0xe280>
   1ee60:	cmp	r5, r8
   1ee64:	bls	1f930 <__assert_fail@plt+0xe378>
   1ee68:	uxtb	r0, r9
   1ee6c:	sub	r5, r5, r8
   1ee70:	cmp	r0, #48	; 0x30
   1ee74:	cmpne	r0, #43	; 0x2b
   1ee78:	bne	1fb8c <__assert_fail@plt+0xe5d4>
   1ee7c:	mov	r0, ip
   1ee80:	mov	r1, #48	; 0x30
   1ee84:	b	1fb94 <__assert_fail@plt+0xe5dc>
   1ee88:	cmp	r0, #0
   1ee8c:	bne	1f228 <__assert_fail@plt+0xdc70>
   1ee90:	ldr	r1, [sp, #96]	; 0x60
   1ee94:	mov	r5, #0
   1ee98:	orr	r1, r6, r1
   1ee9c:	str	r1, [sp, #96]	; 0x60
   1eea0:	mov	r1, #97	; 0x61
   1eea4:	b	1fd24 <__assert_fail@plt+0xe76c>
   1eea8:	cmp	r0, #79	; 0x4f
   1eeac:	beq	1f228 <__assert_fail@plt+0xdc70>
   1eeb0:	mov	r5, #0
   1eeb4:	mov	r1, #99	; 0x63
   1eeb8:	b	1fd24 <__assert_fail@plt+0xe76c>
   1eebc:	cmp	r0, #69	; 0x45
   1eec0:	beq	1f228 <__assert_fail@plt+0xdc70>
   1eec4:	ldr	r2, [sp, #52]	; 0x34
   1eec8:	ldr	r3, [r2]
   1eecc:	b	1ef20 <__assert_fail@plt+0xd968>
   1eed0:	ldr	r2, [sp, #52]	; 0x34
   1eed4:	cmp	r0, #69	; 0x45
   1eed8:	bne	1ef04 <__assert_fail@plt+0xd94c>
   1eedc:	b	1f228 <__assert_fail@plt+0xdc70>
   1eee0:	cmp	r0, #69	; 0x45
   1eee4:	beq	1f228 <__assert_fail@plt+0xdc70>
   1eee8:	ldr	r2, [sp, #88]	; 0x58
   1eeec:	mov	ip, #3
   1eef0:	ldr	r3, [r2, #28]
   1eef4:	b	1f048 <__assert_fail@plt+0xda90>
   1eef8:	ldr	r2, [sp, #60]	; 0x3c
   1eefc:	cmp	r0, #69	; 0x45
   1ef00:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ef04:	ldr	r3, [r2]
   1ef08:	b	1ef18 <__assert_fail@plt+0xd960>
   1ef0c:	ldr	r3, [sp, #56]	; 0x38
   1ef10:	cmp	r0, #69	; 0x45
   1ef14:	beq	1f228 <__assert_fail@plt+0xdc70>
   1ef18:	cmp	r9, #0
   1ef1c:	movweq	r9, #95	; 0x5f
   1ef20:	mov	ip, #2
   1ef24:	lsr	r2, r3, #31
   1ef28:	cmp	r2, #0
   1ef2c:	mov	r6, #0
   1ef30:	mov	r4, #0
   1ef34:	movwne	r2, #1
   1ef38:	cmp	r0, #79	; 0x4f
   1ef3c:	moveq	r5, #0
   1ef40:	cmpeq	r2, #0
   1ef44:	beq	1fd24 <__assert_fail@plt+0xe76c>
   1ef48:	ldr	r8, [sp, #80]	; 0x50
   1ef4c:	cmp	r2, #0
   1ef50:	rsbne	r3, r3, #0
   1ef54:	tst	r6, #1
   1ef58:	asr	r6, r6, #1
   1ef5c:	movne	r0, #58	; 0x3a
   1ef60:	strbne	r0, [r8, #-1]!
   1ef64:	movw	r0, #52429	; 0xcccd
   1ef68:	cmp	r3, #9
   1ef6c:	movt	r0, #52428	; 0xcccc
   1ef70:	umull	r0, r1, r3, r0
   1ef74:	lsr	r0, r1, #3
   1ef78:	add	r1, r0, r0, lsl #2
   1ef7c:	sub	r1, r3, r1, lsl #1
   1ef80:	mov	r3, r0
   1ef84:	orr	r1, r1, #48	; 0x30
   1ef88:	strb	r1, [r8, #-1]!
   1ef8c:	bhi	1ef54 <__assert_fail@plt+0xd99c>
   1ef90:	cmp	r6, #0
   1ef94:	mov	r3, r0
   1ef98:	bne	1ef54 <__assert_fail@plt+0xd99c>
   1ef9c:	cmp	r7, #0
   1efa0:	ldr	r3, [sp, #108]	; 0x6c
   1efa4:	str	sl, [sp, #100]	; 0x64
   1efa8:	movmi	r7, ip
   1efac:	ldr	ip, [sp, #96]	; 0x60
   1efb0:	cmp	r4, #0
   1efb4:	movwne	r4, #43	; 0x2b
   1efb8:	cmp	r9, #0
   1efbc:	movweq	r9, #48	; 0x30
   1efc0:	ldr	r1, [sp, #80]	; 0x50
   1efc4:	cmp	r2, #0
   1efc8:	mov	r0, r7
   1efcc:	movwne	r4, #45	; 0x2d
   1efd0:	cmp	r4, #0
   1efd4:	subne	r0, r0, #1
   1efd8:	sub	sl, r1, r8
   1efdc:	sub	r0, r0, sl
   1efe0:	cmp	r0, #1
   1efe4:	movwlt	r0, #0
   1efe8:	subs	r5, r9, #45	; 0x2d
   1efec:	movne	r5, r0
   1eff0:	cmp	r4, #0
   1eff4:	beq	1f40c <__assert_fail@plt+0xde54>
   1eff8:	cmp	r9, #95	; 0x5f
   1effc:	bne	1f3e8 <__assert_fail@plt+0xde30>
   1f000:	cmp	r3, #0
   1f004:	beq	1f3dc <__assert_fail@plt+0xde24>
   1f008:	mov	r0, r3
   1f00c:	mov	r1, #32
   1f010:	mov	r2, r5
   1f014:	str	lr, [sp, #92]	; 0x5c
   1f018:	mov	r6, r3
   1f01c:	bl	114b0 <memset@plt>
   1f020:	ldr	ip, [sp, #96]	; 0x60
   1f024:	ldr	lr, [sp, #92]	; 0x5c
   1f028:	mov	r3, r6
   1f02c:	add	r3, r6, r5
   1f030:	b	1f3e0 <__assert_fail@plt+0xde28>
   1f034:	cmp	r0, #69	; 0x45
   1f038:	beq	1f228 <__assert_fail@plt+0xdc70>
   1f03c:	ldr	r2, [sp, #88]	; 0x58
   1f040:	mov	ip, #2
   1f044:	ldr	r3, [r2, #16]
   1f048:	mov	r2, #0
   1f04c:	cmn	r3, #1
   1f050:	add	r3, r3, #1
   1f054:	movwlt	r2, #1
   1f058:	b	1ef28 <__assert_fail@plt+0xd970>
   1f05c:	subs	r0, r9, #45	; 0x2d
   1f060:	ldr	r1, [sp, #104]	; 0x68
   1f064:	bicne	r0, r7, r7, asr #31
   1f068:	cmp	r0, #1
   1f06c:	mov	r5, r0
   1f070:	movls	r5, #1
   1f074:	sub	r1, r1, lr
   1f078:	cmp	r5, r1
   1f07c:	bcs	1fffc <__assert_fail@plt+0xea44>
   1f080:	ldr	ip, [sp, #108]	; 0x6c
   1f084:	mov	r8, #-2147483648	; 0x80000000
   1f088:	cmp	ip, #0
   1f08c:	beq	1e510 <__assert_fail@plt+0xcf58>
   1f090:	cmp	r0, #2
   1f094:	bcc	1fc78 <__assert_fail@plt+0xe6c0>
   1f098:	uxtb	r1, r9
   1f09c:	sub	r4, r0, #1
   1f0a0:	cmp	r1, #48	; 0x30
   1f0a4:	cmpne	r1, #43	; 0x2b
   1f0a8:	bne	1fc50 <__assert_fail@plt+0xe698>
   1f0ac:	mov	r0, ip
   1f0b0:	mov	r1, #48	; 0x30
   1f0b4:	b	1fc58 <__assert_fail@plt+0xe6a0>
   1f0b8:	ldr	r2, [sp, #88]	; 0x58
   1f0bc:	mov	r3, #11
   1f0c0:	mov	ip, #1
   1f0c4:	ldr	r2, [r2, #16]
   1f0c8:	mul	r2, r2, r3
   1f0cc:	add	r3, ip, r2, asr #5
   1f0d0:	mov	r2, #0
   1f0d4:	b	1ef28 <__assert_fail@plt+0xd970>
   1f0d8:	ldr	r2, [sp, #88]	; 0x58
   1f0dc:	mov	r0, #28
   1f0e0:	add	r1, sp, #112	; 0x70
   1f0e4:	str	lr, [sp, #92]	; 0x5c
   1f0e8:	mov	r4, r1
   1f0ec:	mov	r3, r2
   1f0f0:	add	r2, r2, #16
   1f0f4:	vld1.32	{d16-d17}, [r3], r0
   1f0f8:	vld1.32	{d18-d19}, [r2]
   1f0fc:	add	r2, r1, #16
   1f100:	vld1.32	{d20-d21}, [r3]
   1f104:	vst1.64	{d16-d17}, [r4], r0
   1f108:	mvn	r0, #0
   1f10c:	vst1.64	{d18-d19}, [r2]
   1f110:	vst1.32	{d20-d21}, [r4]
   1f114:	str	r0, [r4]
   1f118:	ldr	r0, [fp, #20]
   1f11c:	bl	1d0ec <__assert_fail@plt+0xbb34>
   1f120:	ldr	r1, [r4]
   1f124:	cmp	r1, #0
   1f128:	bmi	20018 <__assert_fail@plt+0xea60>
   1f12c:	movw	r1, #26215	; 0x6667
   1f130:	cmp	r0, #0
   1f134:	movt	r1, #26214	; 0x6666
   1f138:	bmi	1f840 <__assert_fail@plt+0xe288>
   1f13c:	ldr	r4, [sp, #96]	; 0x60
   1f140:	ldr	r2, [sp, #40]	; 0x28
   1f144:	mov	r3, r0
   1f148:	smmul	r6, r3, r1
   1f14c:	asr	r5, r6, #2
   1f150:	add	r6, r5, r6, lsr #31
   1f154:	add	r5, r6, r6, lsl #2
   1f158:	sub	r5, r3, r5, lsl #1
   1f15c:	add	r3, r3, #9
   1f160:	cmp	r3, #18
   1f164:	mov	r3, r6
   1f168:	add	r5, r5, #48	; 0x30
   1f16c:	strb	r5, [r2], #-1
   1f170:	bhi	1f148 <__assert_fail@plt+0xdb90>
   1f174:	b	1f878 <__assert_fail@plt+0xe2c0>
   1f178:	subs	r0, r9, #45	; 0x2d
   1f17c:	ldr	r1, [sp, #104]	; 0x68
   1f180:	bicne	r0, r7, r7, asr #31
   1f184:	cmp	r0, #1
   1f188:	mov	r5, r0
   1f18c:	movls	r5, #1
   1f190:	sub	r1, r1, lr
   1f194:	cmp	r5, r1
   1f198:	bcs	1fffc <__assert_fail@plt+0xea44>
   1f19c:	ldr	ip, [sp, #108]	; 0x6c
   1f1a0:	mov	r8, #-2147483648	; 0x80000000
   1f1a4:	cmp	ip, #0
   1f1a8:	beq	1e510 <__assert_fail@plt+0xcf58>
   1f1ac:	cmp	r0, #2
   1f1b0:	bcc	1fca8 <__assert_fail@plt+0xe6f0>
   1f1b4:	uxtb	r1, r9
   1f1b8:	sub	r4, r0, #1
   1f1bc:	cmp	r1, #48	; 0x30
   1f1c0:	cmpne	r1, #43	; 0x2b
   1f1c4:	bne	1fc80 <__assert_fail@plt+0xe6c8>
   1f1c8:	mov	r0, ip
   1f1cc:	mov	r1, #48	; 0x30
   1f1d0:	b	1fc88 <__assert_fail@plt+0xe6d0>
   1f1d4:	ldr	r2, [sp, #88]	; 0x58
   1f1d8:	movw	r3, #9363	; 0x2493
   1f1dc:	mov	ip, #1
   1f1e0:	movt	r3, #37449	; 0x9249
   1f1e4:	ldr	r2, [r2, #24]
   1f1e8:	add	r2, r2, #6
   1f1ec:	smmla	r3, r2, r3, r2
   1f1f0:	asr	r6, r3, #2
   1f1f4:	add	r3, r6, r3, lsr #31
   1f1f8:	rsb	r3, r3, r3, lsl #3
   1f1fc:	sub	r2, r2, r3
   1f200:	add	r3, r2, #1
   1f204:	b	1ef24 <__assert_fail@plt+0xd96c>
   1f208:	cmp	r0, #69	; 0x45
   1f20c:	beq	1f228 <__assert_fail@plt+0xdc70>
   1f210:	ldr	r2, [sp, #88]	; 0x58
   1f214:	mov	ip, #1
   1f218:	ldr	r3, [r2, #24]
   1f21c:	b	1ef24 <__assert_fail@plt+0xd96c>
   1f220:	cmp	r0, #79	; 0x4f
   1f224:	bne	1f790 <__assert_fail@plt+0xe1d8>
   1f228:	ldr	r3, [sp, #108]	; 0x6c
   1f22c:	ldr	r0, [sp, #100]	; 0x64
   1f230:	subs	r5, r9, #45	; 0x2d
   1f234:	bicne	r5, r7, r7, asr #31
   1f238:	sub	r8, sl, r0
   1f23c:	ldr	r0, [sp, #104]	; 0x68
   1f240:	add	r4, r8, #1
   1f244:	cmp	r5, r4
   1f248:	mov	r7, r4
   1f24c:	movhi	r7, r5
   1f250:	sub	r0, r0, lr
   1f254:	cmp	r7, r0
   1f258:	bcs	1fffc <__assert_fail@plt+0xea44>
   1f25c:	cmp	r3, #0
   1f260:	beq	1f294 <__assert_fail@plt+0xdcdc>
   1f264:	cmp	r5, r4
   1f268:	mov	ip, r3
   1f26c:	bls	1f2b8 <__assert_fail@plt+0xdd00>
   1f270:	uxtb	r0, r9
   1f274:	sub	r6, r5, r4
   1f278:	str	lr, [sp, #92]	; 0x5c
   1f27c:	cmp	r0, #48	; 0x30
   1f280:	cmpne	r0, #43	; 0x2b
   1f284:	bne	1f29c <__assert_fail@plt+0xdce4>
   1f288:	mov	r0, r3
   1f28c:	mov	r1, #48	; 0x30
   1f290:	b	1f2a4 <__assert_fail@plt+0xdcec>
   1f294:	mov	ip, #0
   1f298:	b	1f398 <__assert_fail@plt+0xdde0>
   1f29c:	mov	r0, r3
   1f2a0:	mov	r1, #32
   1f2a4:	mov	r2, r6
   1f2a8:	mov	r9, r3
   1f2ac:	bl	114b0 <memset@plt>
   1f2b0:	ldr	lr, [sp, #92]	; 0x5c
   1f2b4:	add	ip, r9, r6
   1f2b8:	ldr	r0, [sp, #96]	; 0x60
   1f2bc:	tst	r0, #1
   1f2c0:	beq	1f374 <__assert_fail@plt+0xddbc>
   1f2c4:	cmp	r4, #0
   1f2c8:	beq	1f394 <__assert_fail@plt+0xdddc>
   1f2cc:	ldr	r0, [sp, #100]	; 0x64
   1f2d0:	str	lr, [sp, #92]	; 0x5c
   1f2d4:	mov	r6, ip
   1f2d8:	sub	r0, sl, r0
   1f2dc:	add	r9, r0, #1
   1f2e0:	bl	11420 <__ctype_toupper_loc@plt>
   1f2e4:	mov	ip, r6
   1f2e8:	tst	r9, #1
   1f2ec:	mov	r1, r4
   1f2f0:	beq	1f308 <__assert_fail@plt+0xdd50>
   1f2f4:	ldrb	r1, [sl]
   1f2f8:	ldr	r2, [r0]
   1f2fc:	ldr	r1, [r2, r1, lsl #2]
   1f300:	strb	r1, [ip, r8]
   1f304:	mov	r1, r8
   1f308:	ldr	r2, [sp, #100]	; 0x64
   1f30c:	ldr	lr, [sp, #92]	; 0x5c
   1f310:	ldr	r3, [sp, #108]	; 0x6c
   1f314:	cmp	sl, r2
   1f318:	beq	1f394 <__assert_fail@plt+0xdddc>
   1f31c:	ldr	r6, [sp, #100]	; 0x64
   1f320:	cmp	r5, r9
   1f324:	movhi	r9, r5
   1f328:	add	r2, r1, r6
   1f32c:	add	r2, r2, r9
   1f330:	sub	r2, r2, sl
   1f334:	add	r2, r3, r2
   1f338:	sub	r3, r6, #2
   1f33c:	sub	r2, r2, #2
   1f340:	add	r6, r3, r1
   1f344:	ldr	r5, [r0]
   1f348:	ldrb	r6, [r6, #1]
   1f34c:	ldr	r6, [r5, r6, lsl #2]
   1f350:	strb	r6, [r2]
   1f354:	ldrb	r6, [r3, r1]
   1f358:	ldr	r5, [r0]
   1f35c:	subs	r1, r1, #2
   1f360:	ldr	r6, [r5, r6, lsl #2]
   1f364:	strb	r6, [r2, #-1]
   1f368:	sub	r2, r2, #2
   1f36c:	bne	1f340 <__assert_fail@plt+0xdd88>
   1f370:	b	1f394 <__assert_fail@plt+0xdddc>
   1f374:	ldr	r1, [sp, #100]	; 0x64
   1f378:	mov	r0, ip
   1f37c:	mov	r2, r4
   1f380:	mov	r5, lr
   1f384:	mov	r6, ip
   1f388:	bl	112f4 <memcpy@plt>
   1f38c:	mov	ip, r6
   1f390:	mov	lr, r5
   1f394:	add	ip, ip, r4
   1f398:	add	lr, r7, lr
   1f39c:	mov	r8, #-2147483648	; 0x80000000
   1f3a0:	ldrb	r3, [sl, #1]!
   1f3a4:	mvn	r7, #0
   1f3a8:	cmp	r3, #0
   1f3ac:	bne	1e528 <__assert_fail@plt+0xcf70>
   1f3b0:	b	1ffd0 <__assert_fail@plt+0xea18>
   1f3b4:	cmp	r0, #69	; 0x45
   1f3b8:	bne	1f79c <__assert_fail@plt+0xe1e4>
   1f3bc:	mov	r5, #0
   1f3c0:	mov	r1, #121	; 0x79
   1f3c4:	b	1fd24 <__assert_fail@plt+0xe76c>
   1f3c8:	mov	ip, #0
   1f3cc:	b	1fa20 <__assert_fail@plt+0xe468>
   1f3d0:	ldr	r3, [sp, #88]	; 0x58
   1f3d4:	ldr	r0, [sp, #100]	; 0x64
   1f3d8:	b	1f9f0 <__assert_fail@plt+0xe438>
   1f3dc:	mov	r3, #0
   1f3e0:	sub	r7, r7, r5
   1f3e4:	add	lr, r5, lr
   1f3e8:	ldr	r0, [sp, #104]	; 0x68
   1f3ec:	sub	r0, r0, lr
   1f3f0:	cmp	r0, #2
   1f3f4:	bcc	1fffc <__assert_fail@plt+0xea44>
   1f3f8:	cmp	r3, #0
   1f3fc:	sub	r7, r7, #1
   1f400:	add	lr, lr, #1
   1f404:	strbne	r4, [r3], #1
   1f408:	moveq	r3, #0
   1f40c:	subs	r5, r9, #45	; 0x2d
   1f410:	ldr	r0, [sp, #104]	; 0x68
   1f414:	mov	r4, sl
   1f418:	bicne	r5, r7, r7, asr #31
   1f41c:	cmp	r5, sl
   1f420:	movhi	r4, r5
   1f424:	sub	r0, r0, lr
   1f428:	cmp	r4, r0
   1f42c:	bcs	1fffc <__assert_fail@plt+0xea44>
   1f430:	cmp	r3, #0
   1f434:	beq	1f464 <__assert_fail@plt+0xdeac>
   1f438:	cmp	r5, sl
   1f43c:	mov	r6, r3
   1f440:	bls	1f490 <__assert_fail@plt+0xded8>
   1f444:	cmp	r9, #48	; 0x30
   1f448:	sub	r6, r5, sl
   1f44c:	str	lr, [sp, #92]	; 0x5c
   1f450:	cmpne	r9, #43	; 0x2b
   1f454:	bne	1f46c <__assert_fail@plt+0xdeb4>
   1f458:	mov	r0, r3
   1f45c:	mov	r1, #48	; 0x30
   1f460:	b	1f474 <__assert_fail@plt+0xdebc>
   1f464:	mov	ip, #0
   1f468:	b	1f554 <__assert_fail@plt+0xdf9c>
   1f46c:	mov	r0, r3
   1f470:	mov	r1, #32
   1f474:	mov	r2, r6
   1f478:	mov	r7, r3
   1f47c:	bl	114b0 <memset@plt>
   1f480:	ldr	lr, [sp, #92]	; 0x5c
   1f484:	ldr	ip, [sp, #96]	; 0x60
   1f488:	add	r6, r7, r6
   1f48c:	mov	r3, r7
   1f490:	tst	ip, #1
   1f494:	beq	1f538 <__assert_fail@plt+0xdf80>
   1f498:	cmp	sl, #0
   1f49c:	beq	1f550 <__assert_fail@plt+0xdf98>
   1f4a0:	str	r3, [sp, #108]	; 0x6c
   1f4a4:	mov	r7, lr
   1f4a8:	mvn	r9, r8
   1f4ac:	bl	11420 <__ctype_toupper_loc@plt>
   1f4b0:	tst	sl, #1
   1f4b4:	mov	r1, sl
   1f4b8:	beq	1f4d0 <__assert_fail@plt+0xdf18>
   1f4bc:	sub	r1, sl, #1
   1f4c0:	ldr	r3, [r0]
   1f4c4:	ldrb	r2, [r8, r1]
   1f4c8:	ldr	r2, [r3, r2, lsl #2]
   1f4cc:	strb	r2, [r6, r1]
   1f4d0:	ldr	r2, [sp, #44]	; 0x2c
   1f4d4:	mov	lr, r7
   1f4d8:	ldr	r7, [sp, #108]	; 0x6c
   1f4dc:	cmp	r9, r2
   1f4e0:	beq	1f550 <__assert_fail@plt+0xdf98>
   1f4e4:	ldr	r3, [sp, #36]	; 0x24
   1f4e8:	cmp	r5, sl
   1f4ec:	add	r2, r1, r8
   1f4f0:	movls	r5, sl
   1f4f4:	add	r2, r2, r5
   1f4f8:	add	r3, r7, r3
   1f4fc:	add	r2, r3, r2
   1f500:	sub	r3, r8, #2
   1f504:	add	r5, r3, r1
   1f508:	ldr	r7, [r0]
   1f50c:	ldrb	r5, [r5, #1]
   1f510:	ldr	r7, [r7, r5, lsl #2]
   1f514:	strb	r7, [r2]
   1f518:	ldrb	r7, [r3, r1]
   1f51c:	ldr	r5, [r0]
   1f520:	subs	r1, r1, #2
   1f524:	ldr	r7, [r5, r7, lsl #2]
   1f528:	strb	r7, [r2, #-1]
   1f52c:	sub	r2, r2, #2
   1f530:	bne	1f504 <__assert_fail@plt+0xdf4c>
   1f534:	b	1f550 <__assert_fail@plt+0xdf98>
   1f538:	mov	r0, r6
   1f53c:	mov	r1, r8
   1f540:	mov	r2, sl
   1f544:	mov	r5, lr
   1f548:	bl	112f4 <memcpy@plt>
   1f54c:	mov	lr, r5
   1f550:	add	ip, r6, sl
   1f554:	ldr	sl, [sp, #100]	; 0x64
   1f558:	add	lr, r4, lr
   1f55c:	mov	r8, #-2147483648	; 0x80000000
   1f560:	ldrb	r3, [sl, #1]!
   1f564:	mvn	r7, #0
   1f568:	cmp	r3, #0
   1f56c:	bne	1e528 <__assert_fail@plt+0xcf70>
   1f570:	b	1ffd0 <__assert_fail@plt+0xea18>
   1f574:	sub	r2, r2, #1
   1f578:	movw	r4, #365	; 0x16d
   1f57c:	tst	r2, #3
   1f580:	bne	1f5c4 <__assert_fail@plt+0xe00c>
   1f584:	movw	r4, #34079	; 0x851f
   1f588:	movt	r4, #20971	; 0x51eb
   1f58c:	smmul	r4, r2, r4
   1f590:	asr	r6, r4, #5
   1f594:	add	r3, r6, r4, lsr #31
   1f598:	mov	r6, #100	; 0x64
   1f59c:	mls	r3, r3, r6, r2
   1f5a0:	asr	r6, r4, #7
   1f5a4:	add	r4, r6, r4, lsr #31
   1f5a8:	mov	r6, #400	; 0x190
   1f5ac:	mls	r2, r4, r6, r2
   1f5b0:	movw	r4, #365	; 0x16d
   1f5b4:	cmp	r2, #0
   1f5b8:	movweq	r4, #366	; 0x16e
   1f5bc:	cmp	r3, #0
   1f5c0:	movwne	r4, #366	; 0x16e
   1f5c4:	add	r2, r4, r5
   1f5c8:	movw	r4, #382	; 0x17e
   1f5cc:	sub	r3, r4, r8
   1f5d0:	add	r2, r3, r2
   1f5d4:	smmla	r2, r2, ip, r2
   1f5d8:	asr	r4, r2, #2
   1f5dc:	add	r2, r4, r2, lsr #31
   1f5e0:	rsb	r2, r2, r2, lsl #3
   1f5e4:	sub	r2, r2, r3
   1f5e8:	mvn	r3, #0
   1f5ec:	add	r4, r2, #3
   1f5f0:	cmp	r1, #71	; 0x47
   1f5f4:	bne	1ea18 <__assert_fail@plt+0xd460>
   1f5f8:	movw	r2, #63636	; 0xf894
   1f5fc:	mov	ip, #4
   1f600:	movt	r2, #65535	; 0xffff
   1f604:	sub	r6, r2, r3
   1f608:	add	r3, lr, r3
   1f60c:	mov	r2, #0
   1f610:	cmp	lr, r6
   1f614:	ldr	lr, [sp, #92]	; 0x5c
   1f618:	movw	r6, #1900	; 0x76c
   1f61c:	movwlt	r2, #1
   1f620:	add	r3, r3, r6
   1f624:	b	1fa84 <__assert_fail@plt+0xe4cc>
   1f628:	smmla	r2, r4, ip, r4
   1f62c:	ldr	lr, [sp, #92]	; 0x5c
   1f630:	mov	ip, #2
   1f634:	asr	r3, r2, #2
   1f638:	add	r2, r3, r2, lsr #31
   1f63c:	add	r3, r2, #1
   1f640:	b	1ef24 <__assert_fail@plt+0xd96c>
   1f644:	ldr	r2, [sp, #88]	; 0x58
   1f648:	movw	r5, #63636	; 0xf894
   1f64c:	mov	r3, #0
   1f650:	mvn	r4, #98	; 0x62
   1f654:	mov	ip, #2
   1f658:	movt	r5, #65535	; 0xffff
   1f65c:	ldr	r6, [r2, #20]
   1f660:	mov	r2, #0
   1f664:	cmp	r6, r5
   1f668:	movwge	r3, #1
   1f66c:	cmp	r6, r5
   1f670:	and	r3, r3, r6, lsr #31
   1f674:	movwlt	r2, #1
   1f678:	smlabb	r3, r3, r4, r6
   1f67c:	movw	r4, #34079	; 0x851f
   1f680:	movt	r4, #20971	; 0x51eb
   1f684:	smmul	r3, r3, r4
   1f688:	asr	r4, r3, #5
   1f68c:	add	r3, r4, r3, lsr #31
   1f690:	add	r3, r3, #19
   1f694:	b	1fa84 <__assert_fail@plt+0xe4cc>
   1f698:	cmp	r4, #1
   1f69c:	blt	1f6d0 <__assert_fail@plt+0xe118>
   1f6a0:	smmul	r3, r1, r2
   1f6a4:	cmp	r0, #0
   1f6a8:	asr	r6, r3, #2
   1f6ac:	add	r3, r6, r3, lsr #31
   1f6b0:	add	r6, r3, r3, lsl #2
   1f6b4:	sub	r1, r1, r6, lsl #1
   1f6b8:	add	r1, r1, #48	; 0x30
   1f6bc:	strb	r1, [r8, r0]
   1f6c0:	sub	r1, r0, #1
   1f6c4:	mov	r0, r1
   1f6c8:	mov	r1, r3
   1f6cc:	bgt	1f6a0 <__assert_fail@plt+0xe0e8>
   1f6d0:	ldr	r0, [sp, #104]	; 0x68
   1f6d4:	cmp	r9, #0
   1f6d8:	movweq	r9, #48	; 0x30
   1f6dc:	sub	r8, r0, lr
   1f6e0:	cmp	r4, r8
   1f6e4:	bcs	1fffc <__assert_fail@plt+0xea44>
   1f6e8:	mov	r2, #0
   1f6ec:	cmp	ip, #0
   1f6f0:	mov	r5, #0
   1f6f4:	beq	1fb20 <__assert_fail@plt+0xe568>
   1f6f8:	ldr	r0, [sp, #96]	; 0x60
   1f6fc:	tst	r0, #1
   1f700:	beq	1faf8 <__assert_fail@plt+0xe540>
   1f704:	cmp	r4, #0
   1f708:	beq	1fb18 <__assert_fail@plt+0xe560>
   1f70c:	mov	r5, lr
   1f710:	mov	r6, ip
   1f714:	bl	11420 <__ctype_toupper_loc@plt>
   1f718:	mov	ip, r6
   1f71c:	tst	r4, #1
   1f720:	mov	r1, r4
   1f724:	beq	1f748 <__assert_fail@plt+0xe190>
   1f728:	ldr	r1, [sp, #24]
   1f72c:	ldr	r2, [r0]
   1f730:	add	r1, r1, r4
   1f734:	ldrb	r1, [r1, #-9]
   1f738:	ldr	r1, [r2, r1, lsl #2]
   1f73c:	add	r2, ip, r4
   1f740:	strb	r1, [r2, #-1]
   1f744:	sub	r1, r4, #1
   1f748:	ldr	r6, [sp, #28]
   1f74c:	cmp	r4, #1
   1f750:	mov	lr, r5
   1f754:	beq	1fb18 <__assert_fail@plt+0xe560>
   1f758:	sub	r2, ip, #2
   1f75c:	add	r3, r6, r1
   1f760:	ldr	r5, [r0]
   1f764:	ldrb	r3, [r3, #1]
   1f768:	ldr	r3, [r5, r3, lsl #2]
   1f76c:	add	r5, r2, r1
   1f770:	strb	r3, [r5, #1]
   1f774:	ldrb	r3, [r6, r1]
   1f778:	ldr	r5, [r0]
   1f77c:	ldr	r3, [r5, r3, lsl #2]
   1f780:	strb	r3, [r2, r1]
   1f784:	subs	r1, r1, #2
   1f788:	bne	1f75c <__assert_fail@plt+0xe1a4>
   1f78c:	b	1fb18 <__assert_fail@plt+0xe560>
   1f790:	mov	r5, #0
   1f794:	mov	r1, #120	; 0x78
   1f798:	b	1fd24 <__assert_fail@plt+0xe76c>
   1f79c:	ldr	r2, [sp, #88]	; 0x58
   1f7a0:	mov	ip, #2
   1f7a4:	ldr	r6, [r2, #20]
   1f7a8:	movw	r2, #34079	; 0x851f
   1f7ac:	movt	r2, #20971	; 0x51eb
   1f7b0:	smmul	r2, r6, r2
   1f7b4:	asr	r3, r2, #5
   1f7b8:	add	r2, r3, r2, lsr #31
   1f7bc:	mov	r3, #100	; 0x64
   1f7c0:	mls	r5, r2, r3, r6
   1f7c4:	mov	r2, #0
   1f7c8:	cmn	r5, #1
   1f7cc:	ble	1fa70 <__assert_fail@plt+0xe4b8>
   1f7d0:	mov	r3, r5
   1f7d4:	b	1fa84 <__assert_fail@plt+0xe4cc>
   1f7d8:	subs	r0, r9, #45	; 0x2d
   1f7dc:	ldr	r1, [sp, #104]	; 0x68
   1f7e0:	bicne	r0, r7, r7, asr #31
   1f7e4:	cmp	r0, #1
   1f7e8:	mov	r5, r0
   1f7ec:	movls	r5, #1
   1f7f0:	sub	r1, r1, lr
   1f7f4:	cmp	r5, r1
   1f7f8:	bcs	1fffc <__assert_fail@plt+0xea44>
   1f7fc:	ldr	ip, [sp, #108]	; 0x6c
   1f800:	mov	r8, #-2147483648	; 0x80000000
   1f804:	cmp	ip, #0
   1f808:	beq	1e510 <__assert_fail@plt+0xcf58>
   1f80c:	mov	r1, #37	; 0x25
   1f810:	cmp	r0, #2
   1f814:	bcc	1ffa4 <__assert_fail@plt+0xe9ec>
   1f818:	uxtb	r1, r9
   1f81c:	sub	r4, r0, #1
   1f820:	cmp	r1, #48	; 0x30
   1f824:	cmpne	r1, #43	; 0x2b
   1f828:	bne	1ff78 <__assert_fail@plt+0xe9c0>
   1f82c:	mov	r0, ip
   1f830:	mov	r1, #48	; 0x30
   1f834:	b	1ff80 <__assert_fail@plt+0xe9c8>
   1f838:	mov	ip, #0
   1f83c:	b	1fc34 <__assert_fail@plt+0xe67c>
   1f840:	ldr	r4, [sp, #96]	; 0x60
   1f844:	ldr	r2, [sp, #40]	; 0x28
   1f848:	mov	r3, r0
   1f84c:	smmul	r6, r3, r1
   1f850:	asr	r5, r6, #2
   1f854:	add	r6, r5, r6, lsr #31
   1f858:	add	r5, r6, r6, lsl #2
   1f85c:	rsb	r5, r3, r5, lsl #1
   1f860:	add	r3, r3, #9
   1f864:	cmp	r3, #18
   1f868:	mov	r3, r6
   1f86c:	add	r5, r5, #48	; 0x30
   1f870:	strb	r5, [r2], #-1
   1f874:	bhi	1f84c <__assert_fail@plt+0xe294>
   1f878:	ldr	lr, [sp, #92]	; 0x5c
   1f87c:	ldr	r3, [sp, #108]	; 0x6c
   1f880:	cmp	r7, #0
   1f884:	add	r8, r2, #1
   1f888:	mov	ip, r4
   1f88c:	lsr	r2, r0, #31
   1f890:	mov	r4, #0
   1f894:	str	sl, [sp, #100]	; 0x64
   1f898:	movwmi	r7, #1
   1f89c:	b	1efb8 <__assert_fail@plt+0xda00>
   1f8a0:	ldr	r3, [sp, #108]	; 0x6c
   1f8a4:	mov	r2, #1
   1f8a8:	cmp	r5, #3
   1f8ac:	bhi	1eb14 <__assert_fail@plt+0xd55c>
   1f8b0:	movw	ip, #34953	; 0x8889
   1f8b4:	movt	ip, #34952	; 0x8888
   1f8b8:	smmla	r6, lr, ip, lr
   1f8bc:	asr	r3, r6, #5
   1f8c0:	add	r6, r3, r6, lsr #31
   1f8c4:	smmla	r3, r6, ip, r6
   1f8c8:	asr	r4, r3, #5
   1f8cc:	add	r3, r4, r3, lsr #31
   1f8d0:	rsb	r3, r3, r3, lsl #4
   1f8d4:	sub	ip, r6, r3, lsl #2
   1f8d8:	movw	r3, #46021	; 0xb3c5
   1f8dc:	movt	r3, #37282	; 0x91a2
   1f8e0:	smmla	r3, lr, r3, lr
   1f8e4:	asr	r4, r3, #11
   1f8e8:	add	r3, r4, r3, lsr #31
   1f8ec:	rsb	r4, r6, r6, lsl #4
   1f8f0:	add	r6, pc, #4
   1f8f4:	sub	r4, lr, r4, lsl #2
   1f8f8:	ldr	pc, [r6, r5, lsl #2]
   1f8fc:	andeq	pc, r1, ip, lsl #18
   1f900:	strdeq	pc, [r1], -ip
   1f904:	ldrdeq	pc, [r1], -r8
   1f908:	ldrdeq	pc, [r1], -r0
   1f90c:	mov	r6, #100	; 0x64
   1f910:	mla	r3, r3, r6, ip
   1f914:	mov	ip, #5
   1f918:	mov	r4, #1
   1f91c:	mov	r6, #0
   1f920:	b	1fd10 <__assert_fail@plt+0xe758>
   1f924:	mov	r5, #0
   1f928:	mov	r1, #89	; 0x59
   1f92c:	b	1fd24 <__assert_fail@plt+0xe76c>
   1f930:	ldr	r9, [sp, #32]
   1f934:	mov	r0, r6
   1f938:	tst	r0, #1
   1f93c:	bne	1fbbc <__assert_fail@plt+0xe604>
   1f940:	ldr	r1, [sp, #96]	; 0x60
   1f944:	eor	r0, r0, #1
   1f948:	and	r0, r1, r0
   1f94c:	tst	r0, #1
   1f950:	beq	1fb6c <__assert_fail@plt+0xe5b4>
   1f954:	cmp	r8, #0
   1f958:	beq	1fc30 <__assert_fail@plt+0xe678>
   1f95c:	mov	r5, ip
   1f960:	bl	11420 <__ctype_toupper_loc@plt>
   1f964:	mov	ip, r5
   1f968:	tst	r8, #1
   1f96c:	mov	r1, r8
   1f970:	beq	1f98c <__assert_fail@plt+0xe3d4>
   1f974:	ldr	r2, [sp, #64]	; 0x40
   1f978:	sub	r1, r8, #1
   1f97c:	ldr	r3, [r0]
   1f980:	ldrb	r2, [r2, r1]
   1f984:	ldr	r2, [r3, r2, lsl #2]
   1f988:	strb	r2, [ip, r1]
   1f98c:	cmp	r8, #1
   1f990:	mov	lr, r7
   1f994:	beq	1fc30 <__assert_fail@plt+0xe678>
   1f998:	add	r2, r9, r1
   1f99c:	ldr	r3, [r0]
   1f9a0:	ldrb	r2, [r2, #1]
   1f9a4:	ldr	r2, [r3, r2, lsl #2]
   1f9a8:	add	r3, ip, r1
   1f9ac:	strb	r2, [r3, #-1]
   1f9b0:	ldrb	r2, [r9, r1]
   1f9b4:	ldr	r7, [r0]
   1f9b8:	subs	r1, r1, #2
   1f9bc:	ldr	r2, [r7, r2, lsl #2]
   1f9c0:	strb	r2, [r3, #-2]
   1f9c4:	bne	1f998 <__assert_fail@plt+0xe3e0>
   1f9c8:	b	1fc30 <__assert_fail@plt+0xe678>
   1f9cc:	mov	r0, r7
   1f9d0:	mov	r1, #32
   1f9d4:	ldr	r2, [sp, #96]	; 0x60
   1f9d8:	bl	114b0 <memset@plt>
   1f9dc:	ldr	r2, [sp, #96]	; 0x60
   1f9e0:	ldr	r1, [sp, #20]
   1f9e4:	ldr	r3, [sp, #88]	; 0x58
   1f9e8:	ldr	r0, [sp, #100]	; 0x64
   1f9ec:	add	r7, r7, r2
   1f9f0:	stm	sp, {r0, r9}
   1f9f4:	ldr	r0, [fp, #20]
   1f9f8:	mov	r2, r4
   1f9fc:	str	r8, [sp, #8]
   1fa00:	str	r0, [sp, #12]
   1fa04:	ldr	r0, [fp, #24]
   1fa08:	str	r0, [sp, #16]
   1fa0c:	mov	r0, r7
   1fa10:	bl	1e408 <__assert_fail@plt+0xce50>
   1fa14:	ldr	lr, [sp, #92]	; 0x5c
   1fa18:	mov	ip, r7
   1fa1c:	add	ip, r7, r6
   1fa20:	mov	r8, #-2147483648	; 0x80000000
   1fa24:	add	lr, r5, lr
   1fa28:	ldrb	r3, [sl, #1]!
   1fa2c:	mvn	r7, #0
   1fa30:	cmp	r3, #0
   1fa34:	bne	1e528 <__assert_fail@plt+0xcf70>
   1fa38:	b	1ffd0 <__assert_fail@plt+0xea18>
   1fa3c:	movw	r5, #63636	; 0xf894
   1fa40:	movt	r5, #65535	; 0xffff
   1fa44:	sub	r5, r5, r3
   1fa48:	add	r3, r4, #100	; 0x64
   1fa4c:	cmp	lr, r5
   1fa50:	ldr	lr, [sp, #92]	; 0x5c
   1fa54:	rsblt	r3, r4, #0
   1fa58:	b	1fa84 <__assert_fail@plt+0xe4cc>
   1fa5c:	cmp	r7, #6
   1fa60:	mov	r0, r7
   1fa64:	movle	r0, #6
   1fa68:	sub	r8, r0, #6
   1fa6c:	b	1ecac <__assert_fail@plt+0xd6f4>
   1fa70:	movw	r4, #63636	; 0xf894
   1fa74:	add	r3, r5, #100	; 0x64
   1fa78:	movt	r4, #65535	; 0xffff
   1fa7c:	cmp	r6, r4
   1fa80:	rsblt	r3, r5, #0
   1fa84:	ldr	r4, [fp, #12]
   1fa88:	cmp	r9, #0
   1fa8c:	mov	r6, #0
   1fa90:	moveq	r9, r4
   1fa94:	mov	r4, #0
   1fa98:	cmp	r9, #43	; 0x2b
   1fa9c:	bne	1ef38 <__assert_fail@plt+0xd980>
   1faa0:	cmp	ip, r7
   1faa4:	mov	r4, #0
   1faa8:	movw	r5, #9999	; 0x270f
   1faac:	mov	r8, lr
   1fab0:	mov	lr, #0
   1fab4:	movwlt	r4, #1
   1fab8:	cmp	ip, #2
   1fabc:	movweq	r5, #99	; 0x63
   1fac0:	cmp	r5, r3
   1fac4:	movwcc	lr, #1
   1fac8:	orr	r4, r4, lr
   1facc:	b	1fd10 <__assert_fail@plt+0xe758>
   1fad0:	cmp	r4, #0
   1fad4:	beq	1fcf4 <__assert_fail@plt+0xe73c>
   1fad8:	movw	r6, #10000	; 0x2710
   1fadc:	mla	r3, r3, r6, r4
   1fae0:	mov	r6, #100	; 0x64
   1fae4:	mov	r4, #1
   1fae8:	mla	r3, ip, r6, r3
   1faec:	mov	ip, #9
   1faf0:	mov	r6, #20
   1faf4:	b	1fd10 <__assert_fail@plt+0xe758>
   1faf8:	sub	r1, fp, #48	; 0x30
   1fafc:	mov	r0, ip
   1fb00:	mov	r2, r4
   1fb04:	mov	r5, lr
   1fb08:	mov	r6, ip
   1fb0c:	bl	112f4 <memcpy@plt>
   1fb10:	mov	ip, r6
   1fb14:	mov	lr, r5
   1fb18:	add	r5, ip, r4
   1fb1c:	mov	r2, #0
   1fb20:	cmp	r9, #45	; 0x2d
   1fb24:	subne	r0, r7, r4
   1fb28:	bicne	r2, r0, r0, asr #31
   1fb2c:	sub	r0, r8, r4
   1fb30:	cmp	r2, r0
   1fb34:	bcs	1fffc <__assert_fail@plt+0xea44>
   1fb38:	cmp	r5, #0
   1fb3c:	beq	1fb64 <__assert_fail@plt+0xe5ac>
   1fb40:	cmp	r2, #0
   1fb44:	beq	1fb64 <__assert_fail@plt+0xe5ac>
   1fb48:	uxtb	r0, r9
   1fb4c:	cmp	r0, #48	; 0x30
   1fb50:	cmpne	r0, #43	; 0x2b
   1fb54:	bne	1fcc8 <__assert_fail@plt+0xe710>
   1fb58:	mov	r0, r5
   1fb5c:	mov	r1, #48	; 0x30
   1fb60:	b	1fcd0 <__assert_fail@plt+0xe718>
   1fb64:	mov	ip, r5
   1fb68:	b	1fce8 <__assert_fail@plt+0xe730>
   1fb6c:	ldr	r1, [sp, #64]	; 0x40
   1fb70:	mov	r0, ip
   1fb74:	mov	r2, r8
   1fb78:	mov	r5, ip
   1fb7c:	bl	112f4 <memcpy@plt>
   1fb80:	mov	ip, r5
   1fb84:	mov	lr, r7
   1fb88:	b	1fc30 <__assert_fail@plt+0xe678>
   1fb8c:	mov	r0, ip
   1fb90:	mov	r1, #32
   1fb94:	mov	r2, r5
   1fb98:	mov	r9, ip
   1fb9c:	bl	114b0 <memset@plt>
   1fba0:	mov	ip, r9
   1fba4:	ldr	r9, [sp, #32]
   1fba8:	mov	r0, r6
   1fbac:	mov	lr, r7
   1fbb0:	add	ip, ip, r5
   1fbb4:	tst	r0, #1
   1fbb8:	beq	1f940 <__assert_fail@plt+0xe388>
   1fbbc:	cmp	r8, #0
   1fbc0:	beq	1fc30 <__assert_fail@plt+0xe678>
   1fbc4:	mov	r5, ip
   1fbc8:	bl	11414 <__ctype_tolower_loc@plt>
   1fbcc:	mov	ip, r5
   1fbd0:	tst	r8, #1
   1fbd4:	mov	r1, r8
   1fbd8:	beq	1fbf4 <__assert_fail@plt+0xe63c>
   1fbdc:	ldr	r2, [sp, #64]	; 0x40
   1fbe0:	sub	r1, r8, #1
   1fbe4:	ldr	r3, [r0]
   1fbe8:	ldrb	r2, [r2, r1]
   1fbec:	ldr	r2, [r3, r2, lsl #2]
   1fbf0:	strb	r2, [ip, r1]
   1fbf4:	cmp	r8, #1
   1fbf8:	mov	lr, r7
   1fbfc:	beq	1fc30 <__assert_fail@plt+0xe678>
   1fc00:	add	r2, r9, r1
   1fc04:	ldr	r3, [r0]
   1fc08:	ldrb	r2, [r2, #1]
   1fc0c:	ldr	r2, [r3, r2, lsl #2]
   1fc10:	add	r3, ip, r1
   1fc14:	strb	r2, [r3, #-1]
   1fc18:	ldrb	r2, [r9, r1]
   1fc1c:	ldr	r7, [r0]
   1fc20:	subs	r1, r1, #2
   1fc24:	ldr	r2, [r7, r2, lsl #2]
   1fc28:	strb	r2, [r3, #-2]
   1fc2c:	bne	1fc00 <__assert_fail@plt+0xe648>
   1fc30:	add	ip, ip, r8
   1fc34:	mov	r8, #-2147483648	; 0x80000000
   1fc38:	add	lr, r4, lr
   1fc3c:	ldrb	r3, [sl, #1]!
   1fc40:	mvn	r7, #0
   1fc44:	cmp	r3, #0
   1fc48:	bne	1e528 <__assert_fail@plt+0xcf70>
   1fc4c:	b	1ffd0 <__assert_fail@plt+0xea18>
   1fc50:	mov	r0, ip
   1fc54:	mov	r1, #32
   1fc58:	mov	r2, r4
   1fc5c:	mov	r6, lr
   1fc60:	mov	r7, ip
   1fc64:	bl	114b0 <memset@plt>
   1fc68:	mov	ip, r7
   1fc6c:	mov	lr, r6
   1fc70:	add	ip, r7, r4
   1fc74:	mov	r8, #-2147483648	; 0x80000000
   1fc78:	mov	r0, #10
   1fc7c:	b	1fcac <__assert_fail@plt+0xe6f4>
   1fc80:	mov	r0, ip
   1fc84:	mov	r1, #32
   1fc88:	mov	r2, r4
   1fc8c:	mov	r6, lr
   1fc90:	mov	r7, ip
   1fc94:	bl	114b0 <memset@plt>
   1fc98:	mov	ip, r7
   1fc9c:	mov	lr, r6
   1fca0:	add	ip, r7, r4
   1fca4:	mov	r8, #-2147483648	; 0x80000000
   1fca8:	mov	r0, #9
   1fcac:	strb	r0, [ip], #1
   1fcb0:	add	lr, r5, lr
   1fcb4:	ldrb	r3, [sl, #1]!
   1fcb8:	mvn	r7, #0
   1fcbc:	cmp	r3, #0
   1fcc0:	bne	1e528 <__assert_fail@plt+0xcf70>
   1fcc4:	b	1ffd0 <__assert_fail@plt+0xea18>
   1fcc8:	mov	r0, r5
   1fccc:	mov	r1, #32
   1fcd0:	mov	r7, r2
   1fcd4:	mov	r6, lr
   1fcd8:	bl	114b0 <memset@plt>
   1fcdc:	mov	r2, r7
   1fce0:	mov	lr, r6
   1fce4:	add	ip, r5, r7
   1fce8:	add	r0, r2, lr
   1fcec:	add	lr, r0, r4
   1fcf0:	b	1f39c <__assert_fail@plt+0xdde4>
   1fcf4:	cmp	ip, #0
   1fcf8:	beq	1ffc0 <__assert_fail@plt+0xea08>
   1fcfc:	mov	r6, #100	; 0x64
   1fd00:	mov	r4, #1
   1fd04:	mla	r3, r3, r6, ip
   1fd08:	mov	ip, #6
   1fd0c:	mov	r6, #4
   1fd10:	mov	lr, r8
   1fd14:	cmp	r0, #79	; 0x4f
   1fd18:	moveq	r5, #0
   1fd1c:	cmpeq	r2, #0
   1fd20:	bne	1ef48 <__assert_fail@plt+0xd990>
   1fd24:	movw	r2, #9504	; 0x2520
   1fd28:	cmp	r0, #0
   1fd2c:	ldr	r3, [sp, #88]	; 0x58
   1fd30:	str	lr, [sp, #92]	; 0x5c
   1fd34:	strh	r2, [fp, #-53]	; 0xffffffcb
   1fd38:	ldr	r2, [sp, #84]	; 0x54
   1fd3c:	ldrne	r2, [sp, #68]	; 0x44
   1fd40:	strbne	r0, [fp, #-51]	; 0xffffffcd
   1fd44:	mov	r0, #0
   1fd48:	strb	r0, [r2, #1]
   1fd4c:	strb	r1, [r2]
   1fd50:	add	r0, sp, #112	; 0x70
   1fd54:	sub	r2, fp, #53	; 0x35
   1fd58:	mov	r1, #1024	; 0x400
   1fd5c:	bl	113e4 <strftime@plt>
   1fd60:	cmp	r0, #0
   1fd64:	beq	1fdd4 <__assert_fail@plt+0xe81c>
   1fd68:	subs	r4, r9, #45	; 0x2d
   1fd6c:	mov	r6, r0
   1fd70:	sub	r8, r0, #1
   1fd74:	ldr	lr, [sp, #92]	; 0x5c
   1fd78:	ldr	r0, [sp, #104]	; 0x68
   1fd7c:	movne	r4, r7
   1fd80:	cmp	r7, #0
   1fd84:	mov	r7, r8
   1fd88:	movwmi	r4, #0
   1fd8c:	cmp	r4, r8
   1fd90:	movhi	r7, r4
   1fd94:	sub	r0, r0, lr
   1fd98:	cmp	r7, r0
   1fd9c:	bcs	1fffc <__assert_fail@plt+0xea44>
   1fda0:	ldr	r0, [sp, #108]	; 0x6c
   1fda4:	cmp	r0, #0
   1fda8:	beq	1fdf4 <__assert_fail@plt+0xe83c>
   1fdac:	cmp	r4, r8
   1fdb0:	mov	r2, r0
   1fdb4:	bls	1fe18 <__assert_fail@plt+0xe860>
   1fdb8:	cmp	r9, #48	; 0x30
   1fdbc:	sub	r2, r4, r8
   1fdc0:	cmpne	r9, #43	; 0x2b
   1fdc4:	str	r2, [sp, #100]	; 0x64
   1fdc8:	bne	1fdfc <__assert_fail@plt+0xe844>
   1fdcc:	mov	r1, #48	; 0x30
   1fdd0:	b	1fe00 <__assert_fail@plt+0xe848>
   1fdd4:	ldr	lr, [sp, #92]	; 0x5c
   1fdd8:	ldr	ip, [sp, #108]	; 0x6c
   1fddc:	mov	r8, #-2147483648	; 0x80000000
   1fde0:	ldrb	r3, [sl, #1]!
   1fde4:	mvn	r7, #0
   1fde8:	cmp	r3, #0
   1fdec:	bne	1e528 <__assert_fail@plt+0xcf70>
   1fdf0:	b	1ffd0 <__assert_fail@plt+0xea18>
   1fdf4:	mov	ip, #0
   1fdf8:	b	1ff5c <__assert_fail@plt+0xe9a4>
   1fdfc:	mov	r1, #32
   1fe00:	mov	r9, r0
   1fe04:	bl	114b0 <memset@plt>
   1fe08:	ldr	r0, [sp, #100]	; 0x64
   1fe0c:	ldr	lr, [sp, #92]	; 0x5c
   1fe10:	add	r2, r9, r0
   1fe14:	mov	r0, r9
   1fe18:	tst	r5, #1
   1fe1c:	str	r2, [sp, #100]	; 0x64
   1fe20:	beq	1feac <__assert_fail@plt+0xe8f4>
   1fe24:	cmp	r8, #0
   1fe28:	beq	1ff54 <__assert_fail@plt+0xe99c>
   1fe2c:	mov	r5, r0
   1fe30:	bl	11414 <__ctype_tolower_loc@plt>
   1fe34:	add	ip, sp, #112	; 0x70
   1fe38:	tst	r8, #1
   1fe3c:	mov	r1, r8
   1fe40:	beq	1fe5c <__assert_fail@plt+0xe8a4>
   1fe44:	ldrb	r1, [ip, r8]
   1fe48:	ldr	r2, [r0]
   1fe4c:	ldr	r3, [sp, #100]	; 0x64
   1fe50:	ldr	r2, [r2, r1, lsl #2]
   1fe54:	sub	r1, r6, #2
   1fe58:	strb	r2, [r3, r1]
   1fe5c:	ldr	lr, [sp, #92]	; 0x5c
   1fe60:	cmp	r6, #2
   1fe64:	beq	1ff54 <__assert_fail@plt+0xe99c>
   1fe68:	cmp	r4, r8
   1fe6c:	movls	r4, r8
   1fe70:	sub	r2, r4, r6
   1fe74:	add	r5, r5, r2
   1fe78:	ldrb	r3, [ip, r1]
   1fe7c:	ldr	r6, [r0]
   1fe80:	mov	r2, r5
   1fe84:	ldr	r3, [r6, r3, lsl #2]
   1fe88:	strb	r3, [r2, r1]!
   1fe8c:	add	r3, ip, r1
   1fe90:	subs	r1, r1, #2
   1fe94:	ldrb	r3, [r3, #-1]
   1fe98:	ldr	r6, [r0]
   1fe9c:	ldr	r3, [r6, r3, lsl #2]
   1fea0:	strb	r3, [r2, #-1]
   1fea4:	bne	1fe78 <__assert_fail@plt+0xe8c0>
   1fea8:	b	1ff54 <__assert_fail@plt+0xe99c>
   1feac:	ldr	r1, [sp, #96]	; 0x60
   1feb0:	tst	r1, #1
   1feb4:	beq	1ff40 <__assert_fail@plt+0xe988>
   1feb8:	cmp	r8, #0
   1febc:	beq	1ff54 <__assert_fail@plt+0xe99c>
   1fec0:	mov	r5, r0
   1fec4:	bl	11420 <__ctype_toupper_loc@plt>
   1fec8:	add	ip, sp, #112	; 0x70
   1fecc:	tst	r8, #1
   1fed0:	mov	r1, r8
   1fed4:	beq	1fef0 <__assert_fail@plt+0xe938>
   1fed8:	ldrb	r1, [ip, r8]
   1fedc:	ldr	r2, [r0]
   1fee0:	ldr	r3, [sp, #100]	; 0x64
   1fee4:	ldr	r2, [r2, r1, lsl #2]
   1fee8:	sub	r1, r6, #2
   1feec:	strb	r2, [r3, r1]
   1fef0:	ldr	lr, [sp, #92]	; 0x5c
   1fef4:	cmp	r6, #2
   1fef8:	beq	1ff54 <__assert_fail@plt+0xe99c>
   1fefc:	cmp	r4, r8
   1ff00:	movls	r4, r8
   1ff04:	sub	r2, r4, r6
   1ff08:	add	r5, r5, r2
   1ff0c:	ldrb	r3, [ip, r1]
   1ff10:	ldr	r6, [r0]
   1ff14:	mov	r2, r5
   1ff18:	ldr	r3, [r6, r3, lsl #2]
   1ff1c:	strb	r3, [r2, r1]!
   1ff20:	add	r3, ip, r1
   1ff24:	subs	r1, r1, #2
   1ff28:	ldrb	r3, [r3, #-1]
   1ff2c:	ldr	r6, [r0]
   1ff30:	ldr	r3, [r6, r3, lsl #2]
   1ff34:	strb	r3, [r2, #-1]
   1ff38:	bne	1ff0c <__assert_fail@plt+0xe954>
   1ff3c:	b	1ff54 <__assert_fail@plt+0xe99c>
   1ff40:	ldr	r1, [sp, #48]	; 0x30
   1ff44:	mov	r0, r2
   1ff48:	mov	r2, r8
   1ff4c:	bl	112f4 <memcpy@plt>
   1ff50:	ldr	lr, [sp, #92]	; 0x5c
   1ff54:	ldr	r0, [sp, #100]	; 0x64
   1ff58:	add	ip, r0, r8
   1ff5c:	mov	r8, #-2147483648	; 0x80000000
   1ff60:	add	lr, r7, lr
   1ff64:	ldrb	r3, [sl, #1]!
   1ff68:	mvn	r7, #0
   1ff6c:	cmp	r3, #0
   1ff70:	bne	1e528 <__assert_fail@plt+0xcf70>
   1ff74:	b	1ffd0 <__assert_fail@plt+0xea18>
   1ff78:	mov	r0, ip
   1ff7c:	mov	r1, #32
   1ff80:	mov	r2, r4
   1ff84:	mov	r6, lr
   1ff88:	mov	r7, ip
   1ff8c:	bl	114b0 <memset@plt>
   1ff90:	ldrb	r1, [sl]
   1ff94:	mov	ip, r7
   1ff98:	mov	lr, r6
   1ff9c:	add	ip, r7, r4
   1ffa0:	mov	r8, #-2147483648	; 0x80000000
   1ffa4:	strb	r1, [ip], #1
   1ffa8:	add	lr, r5, lr
   1ffac:	ldrb	r3, [sl, #1]!
   1ffb0:	mvn	r7, #0
   1ffb4:	cmp	r3, #0
   1ffb8:	bne	1e528 <__assert_fail@plt+0xcf70>
   1ffbc:	b	1ffd0 <__assert_fail@plt+0xea18>
   1ffc0:	mov	ip, #3
   1ffc4:	b	1f918 <__assert_fail@plt+0xe360>
   1ffc8:	ldr	ip, [sp, #108]	; 0x6c
   1ffcc:	mov	lr, #0
   1ffd0:	ldr	r0, [sp, #104]	; 0x68
   1ffd4:	ldr	r1, [sp, #72]	; 0x48
   1ffd8:	cmp	r0, #0
   1ffdc:	cmpne	ip, #0
   1ffe0:	movne	r0, #0
   1ffe4:	strbne	r0, [ip]
   1ffe8:	ldr	r0, [sp, #76]	; 0x4c
   1ffec:	str	r1, [r0]
   1fff0:	mov	r0, lr
   1fff4:	sub	sp, fp, #28
   1fff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fffc:	mov	r0, #34	; 0x22
   20000:	ldr	r1, [sp, #76]	; 0x4c
   20004:	mov	lr, #0
   20008:	str	r0, [r1]
   2000c:	mov	r0, lr
   20010:	sub	sp, fp, #28
   20014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20018:	mov	r0, #75	; 0x4b
   2001c:	b	20000 <__assert_fail@plt+0xea48>
   20020:	cmp	r2, #0
   20024:	beq	20054 <__assert_fail@plt+0xea9c>
   20028:	mvn	r3, #0
   2002c:	udiv	r3, r3, r2
   20030:	cmp	r3, r1
   20034:	bcs	20054 <__assert_fail@plt+0xea9c>
   20038:	push	{fp, lr}
   2003c:	mov	fp, sp
   20040:	bl	1148c <__errno_location@plt>
   20044:	mov	r1, #12
   20048:	str	r1, [r0]
   2004c:	mov	r0, #0
   20050:	pop	{fp, pc}
   20054:	mul	r1, r2, r1
   20058:	b	1e090 <__assert_fail@plt+0xcad8>
   2005c:	push	{r4, sl, fp, lr}
   20060:	add	fp, sp, #8
   20064:	sub	sp, sp, #264	; 0x108
   20068:	add	r1, sp, #7
   2006c:	movw	r2, #257	; 0x101
   20070:	bl	200c8 <__assert_fail@plt+0xeb10>
   20074:	mov	r4, #0
   20078:	cmp	r0, #0
   2007c:	bne	200bc <__assert_fail@plt+0xeb04>
   20080:	movw	r1, #7524	; 0x1d64
   20084:	add	r0, sp, #7
   20088:	mov	r2, #2
   2008c:	movt	r1, #2
   20090:	bl	1145c <bcmp@plt>
   20094:	cmp	r0, #0
   20098:	beq	200bc <__assert_fail@plt+0xeb04>
   2009c:	movw	r1, #11163	; 0x2b9b
   200a0:	add	r0, sp, #7
   200a4:	mov	r2, #6
   200a8:	movt	r1, #2
   200ac:	bl	1145c <bcmp@plt>
   200b0:	cmp	r0, #0
   200b4:	mov	r4, r0
   200b8:	movwne	r4, #1
   200bc:	mov	r0, r4
   200c0:	sub	sp, fp, #8
   200c4:	pop	{r4, sl, fp, pc}
   200c8:	push	{r4, r5, r6, r7, fp, lr}
   200cc:	add	fp, sp, #16
   200d0:	mov	r4, r1
   200d4:	mov	r1, #0
   200d8:	mov	r6, r2
   200dc:	bl	11504 <setlocale@plt>
   200e0:	cmp	r0, #0
   200e4:	beq	20114 <__assert_fail@plt+0xeb5c>
   200e8:	mov	r7, r0
   200ec:	bl	11468 <strlen@plt>
   200f0:	cmp	r0, r6
   200f4:	bcs	20130 <__assert_fail@plt+0xeb78>
   200f8:	add	r2, r0, #1
   200fc:	mov	r0, r4
   20100:	mov	r1, r7
   20104:	bl	112f4 <memcpy@plt>
   20108:	mov	r5, #0
   2010c:	mov	r0, r5
   20110:	pop	{r4, r5, r6, r7, fp, pc}
   20114:	mov	r5, #22
   20118:	cmp	r6, #0
   2011c:	beq	20158 <__assert_fail@plt+0xeba0>
   20120:	mov	r0, #0
   20124:	strb	r0, [r4]
   20128:	mov	r0, r5
   2012c:	pop	{r4, r5, r6, r7, fp, pc}
   20130:	mov	r5, #34	; 0x22
   20134:	cmp	r6, #0
   20138:	beq	20158 <__assert_fail@plt+0xeba0>
   2013c:	sub	r6, r6, #1
   20140:	mov	r0, r4
   20144:	mov	r1, r7
   20148:	mov	r2, r6
   2014c:	bl	112f4 <memcpy@plt>
   20150:	mov	r0, #0
   20154:	strb	r0, [r4, r6]
   20158:	mov	r0, r5
   2015c:	pop	{r4, r5, r6, r7, fp, pc}
   20160:	mov	r1, #0
   20164:	b	11504 <setlocale@plt>
   20168:	cmp	r3, #0
   2016c:	cmpeq	r2, #0
   20170:	bne	20194 <__assert_fail@plt+0xebdc>
   20174:	cmp	r1, #0
   20178:	movlt	r1, #-2147483648	; 0x80000000
   2017c:	movlt	r0, #0
   20180:	blt	20190 <__assert_fail@plt+0xebd8>
   20184:	cmpeq	r0, #0
   20188:	mvnne	r1, #-2147483648	; 0x80000000
   2018c:	mvnne	r0, #0
   20190:	b	20278 <__assert_fail@plt+0xecc0>
   20194:	sub	sp, sp, #8
   20198:	push	{sp, lr}
   2019c:	cmp	r1, #0
   201a0:	blt	201c0 <__assert_fail@plt+0xec08>
   201a4:	cmp	r3, #0
   201a8:	blt	201f4 <__assert_fail@plt+0xec3c>
   201ac:	bl	20288 <__assert_fail@plt+0xecd0>
   201b0:	ldr	lr, [sp, #4]
   201b4:	add	sp, sp, #8
   201b8:	pop	{r2, r3}
   201bc:	bx	lr
   201c0:	rsbs	r0, r0, #0
   201c4:	sbc	r1, r1, r1, lsl #1
   201c8:	cmp	r3, #0
   201cc:	blt	20218 <__assert_fail@plt+0xec60>
   201d0:	bl	20288 <__assert_fail@plt+0xecd0>
   201d4:	ldr	lr, [sp, #4]
   201d8:	add	sp, sp, #8
   201dc:	pop	{r2, r3}
   201e0:	rsbs	r0, r0, #0
   201e4:	sbc	r1, r1, r1, lsl #1
   201e8:	rsbs	r2, r2, #0
   201ec:	sbc	r3, r3, r3, lsl #1
   201f0:	bx	lr
   201f4:	rsbs	r2, r2, #0
   201f8:	sbc	r3, r3, r3, lsl #1
   201fc:	bl	20288 <__assert_fail@plt+0xecd0>
   20200:	ldr	lr, [sp, #4]
   20204:	add	sp, sp, #8
   20208:	pop	{r2, r3}
   2020c:	rsbs	r0, r0, #0
   20210:	sbc	r1, r1, r1, lsl #1
   20214:	bx	lr
   20218:	rsbs	r2, r2, #0
   2021c:	sbc	r3, r3, r3, lsl #1
   20220:	bl	20288 <__assert_fail@plt+0xecd0>
   20224:	ldr	lr, [sp, #4]
   20228:	add	sp, sp, #8
   2022c:	pop	{r2, r3}
   20230:	rsbs	r2, r2, #0
   20234:	sbc	r3, r3, r3, lsl #1
   20238:	bx	lr
   2023c:	cmp	r3, #0
   20240:	cmpeq	r2, #0
   20244:	bne	2025c <__assert_fail@plt+0xeca4>
   20248:	cmp	r1, #0
   2024c:	cmpeq	r0, #0
   20250:	mvnne	r1, #0
   20254:	mvnne	r0, #0
   20258:	b	20278 <__assert_fail@plt+0xecc0>
   2025c:	sub	sp, sp, #8
   20260:	push	{sp, lr}
   20264:	bl	20288 <__assert_fail@plt+0xecd0>
   20268:	ldr	lr, [sp, #4]
   2026c:	add	sp, sp, #8
   20270:	pop	{r2, r3}
   20274:	bx	lr
   20278:	push	{r1, lr}
   2027c:	mov	r0, #8
   20280:	bl	1127c <raise@plt>
   20284:	pop	{r1, pc}
   20288:	cmp	r1, r3
   2028c:	cmpeq	r0, r2
   20290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20294:	mov	r4, r0
   20298:	movcc	r0, #0
   2029c:	mov	r5, r1
   202a0:	ldr	lr, [sp, #36]	; 0x24
   202a4:	movcc	r1, r0
   202a8:	bcc	203a4 <__assert_fail@plt+0xedec>
   202ac:	cmp	r3, #0
   202b0:	clzeq	ip, r2
   202b4:	clzne	ip, r3
   202b8:	addeq	ip, ip, #32
   202bc:	cmp	r5, #0
   202c0:	clzeq	r1, r4
   202c4:	addeq	r1, r1, #32
   202c8:	clzne	r1, r5
   202cc:	sub	ip, ip, r1
   202d0:	sub	sl, ip, #32
   202d4:	lsl	r9, r3, ip
   202d8:	rsb	fp, ip, #32
   202dc:	orr	r9, r9, r2, lsl sl
   202e0:	orr	r9, r9, r2, lsr fp
   202e4:	lsl	r8, r2, ip
   202e8:	cmp	r5, r9
   202ec:	cmpeq	r4, r8
   202f0:	movcc	r0, #0
   202f4:	movcc	r1, r0
   202f8:	bcc	20314 <__assert_fail@plt+0xed5c>
   202fc:	mov	r0, #1
   20300:	subs	r4, r4, r8
   20304:	lsl	r1, r0, sl
   20308:	orr	r1, r1, r0, lsr fp
   2030c:	lsl	r0, r0, ip
   20310:	sbc	r5, r5, r9
   20314:	cmp	ip, #0
   20318:	beq	203a4 <__assert_fail@plt+0xedec>
   2031c:	lsr	r6, r8, #1
   20320:	orr	r6, r6, r9, lsl #31
   20324:	lsr	r7, r9, #1
   20328:	mov	r2, ip
   2032c:	b	20350 <__assert_fail@plt+0xed98>
   20330:	subs	r3, r4, r6
   20334:	sbc	r8, r5, r7
   20338:	adds	r3, r3, r3
   2033c:	adc	r8, r8, r8
   20340:	adds	r4, r3, #1
   20344:	adc	r5, r8, #0
   20348:	subs	r2, r2, #1
   2034c:	beq	2036c <__assert_fail@plt+0xedb4>
   20350:	cmp	r5, r7
   20354:	cmpeq	r4, r6
   20358:	bcs	20330 <__assert_fail@plt+0xed78>
   2035c:	adds	r4, r4, r4
   20360:	adc	r5, r5, r5
   20364:	subs	r2, r2, #1
   20368:	bne	20350 <__assert_fail@plt+0xed98>
   2036c:	lsr	r3, r4, ip
   20370:	orr	r3, r3, r5, lsl fp
   20374:	lsr	r2, r5, ip
   20378:	orr	r3, r3, r5, lsr sl
   2037c:	adds	r0, r0, r4
   20380:	mov	r4, r3
   20384:	lsl	r3, r2, ip
   20388:	orr	r3, r3, r4, lsl sl
   2038c:	lsl	ip, r4, ip
   20390:	orr	r3, r3, r4, lsr fp
   20394:	adc	r1, r1, r5
   20398:	subs	r0, r0, ip
   2039c:	mov	r5, r2
   203a0:	sbc	r1, r1, r3
   203a4:	cmp	lr, #0
   203a8:	strdne	r4, [lr]
   203ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   203b4:	mov	r7, r0
   203b8:	ldr	r6, [pc, #72]	; 20408 <__assert_fail@plt+0xee50>
   203bc:	ldr	r5, [pc, #72]	; 2040c <__assert_fail@plt+0xee54>
   203c0:	add	r6, pc, r6
   203c4:	add	r5, pc, r5
   203c8:	sub	r6, r6, r5
   203cc:	mov	r8, r1
   203d0:	mov	r9, r2
   203d4:	bl	11244 <calloc@plt-0x20>
   203d8:	asrs	r6, r6, #2
   203dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   203e0:	mov	r4, #0
   203e4:	add	r4, r4, #1
   203e8:	ldr	r3, [r5], #4
   203ec:	mov	r2, r9
   203f0:	mov	r1, r8
   203f4:	mov	r0, r7
   203f8:	blx	r3
   203fc:	cmp	r6, r4
   20400:	bne	203e4 <__assert_fail@plt+0xee2c>
   20404:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20408:	andeq	r2, r1, r4, asr #22
   2040c:	andeq	r2, r1, ip, lsr fp
   20410:	bx	lr
   20414:	ldr	r3, [pc, #12]	; 20428 <__assert_fail@plt+0xee70>
   20418:	mov	r1, #0
   2041c:	add	r3, pc, r3
   20420:	ldr	r2, [r3]
   20424:	b	114a4 <__cxa_atexit@plt>
   20428:	andeq	r2, r1, r0, lsl sp

Disassembly of section .fini:

0002042c <.fini>:
   2042c:	push	{r3, lr}
   20430:	pop	{r3, pc}
