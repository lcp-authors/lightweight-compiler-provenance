
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf32-littlearm


Disassembly of section .init:

000125d4 <.init>:
   125d4:	push	{r3, lr}
   125d8:	bl	1281c <_start@@Base+0x3c>
   125dc:	pop	{r3, pc}

Disassembly of section .plt:

000125e0 <fdopen@plt-0x14>:
   125e0:	push	{lr}		; (str lr, [sp, #-4]!)
   125e4:	ldr	lr, [pc, #4]	; 125f0 <fdopen@plt-0x4>
   125e8:	add	lr, pc, lr
   125ec:	ldr	pc, [lr, #8]!
   125f0:	andeq	sp, r1, r0, lsl sl

000125f4 <fdopen@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #118784	; 0x1d000
   125fc:	ldr	pc, [ip, #2576]!	; 0xa10

00012600 <strtol@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #118784	; 0x1d000
   12608:	ldr	pc, [ip, #2568]!	; 0xa08

0001260c <longjmp@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #118784	; 0x1d000
   12614:	ldr	pc, [ip, #2560]!	; 0xa00

00012618 <fflush@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #118784	; 0x1d000
   12620:	ldr	pc, [ip, #2552]!	; 0x9f8

00012624 <_setjmp@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #118784	; 0x1d000
   1262c:	ldr	pc, [ip, #2544]!	; 0x9f0

00012630 <free@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #118784	; 0x1d000
   12638:	ldr	pc, [ip, #2536]!	; 0x9e8

0001263c <__isnanf@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #118784	; 0x1d000
   12644:	ldr	pc, [ip, #2528]!	; 0x9e0

00012648 <memcpy@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #118784	; 0x1d000
   12650:	ldr	pc, [ip, #2520]!	; 0x9d8

00012654 <mmap64@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #118784	; 0x1d000
   1265c:	ldr	pc, [ip, #2512]!	; 0x9d0

00012660 <ftell@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #118784	; 0x1d000
   12668:	ldr	pc, [ip, #2504]!	; 0x9c8

0001266c <uname@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #118784	; 0x1d000
   12674:	ldr	pc, [ip, #2496]!	; 0x9c0

00012678 <strdup@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #118784	; 0x1d000
   12680:	ldr	pc, [ip, #2488]!	; 0x9b8

00012684 <__isinff@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #118784	; 0x1d000
   1268c:	ldr	pc, [ip, #2480]!	; 0x9b0

00012690 <realloc@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #118784	; 0x1d000
   12698:	ldr	pc, [ip, #2472]!	; 0x9a8

0001269c <fwrite@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #118784	; 0x1d000
   126a4:	ldr	pc, [ip, #2464]!	; 0x9a0

000126a8 <open64@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #118784	; 0x1d000
   126b0:	ldr	pc, [ip, #2456]!	; 0x998

000126b4 <getenv@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #118784	; 0x1d000
   126bc:	ldr	pc, [ip, #2448]!	; 0x990

000126c0 <malloc@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #118784	; 0x1d000
   126c8:	ldr	pc, [ip, #2440]!	; 0x988

000126cc <__libc_start_main@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #118784	; 0x1d000
   126d4:	ldr	pc, [ip, #2432]!	; 0x980

000126d8 <strerror@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #118784	; 0x1d000
   126e0:	ldr	pc, [ip, #2424]!	; 0x978

000126e4 <__gmon_start__@plt>:
   126e4:	add	ip, pc, #0, 12
   126e8:	add	ip, ip, #118784	; 0x1d000
   126ec:	ldr	pc, [ip, #2416]!	; 0x970

000126f0 <getpid@plt>:
   126f0:	add	ip, pc, #0, 12
   126f4:	add	ip, ip, #118784	; 0x1d000
   126f8:	ldr	pc, [ip, #2408]!	; 0x968

000126fc <exit@plt>:
   126fc:	add	ip, pc, #0, 12
   12700:	add	ip, ip, #118784	; 0x1d000
   12704:	ldr	pc, [ip, #2400]!	; 0x960

00012708 <strlen@plt>:
   12708:	add	ip, pc, #0, 12
   1270c:	add	ip, ip, #118784	; 0x1d000
   12710:	ldr	pc, [ip, #2392]!	; 0x958

00012714 <strchr@plt>:
   12714:	add	ip, pc, #0, 12
   12718:	add	ip, ip, #118784	; 0x1d000
   1271c:	ldr	pc, [ip, #2384]!	; 0x950

00012720 <fprintf@plt>:
   12720:	add	ip, pc, #0, 12
   12724:	add	ip, ip, #118784	; 0x1d000
   12728:	ldr	pc, [ip, #2376]!	; 0x948

0001272c <__errno_location@plt>:
   1272c:	add	ip, pc, #0, 12
   12730:	add	ip, ip, #118784	; 0x1d000
   12734:	ldr	pc, [ip, #2368]!	; 0x940

00012738 <__cxa_atexit@plt>:
   12738:	add	ip, pc, #0, 12
   1273c:	add	ip, ip, #118784	; 0x1d000
   12740:	ldr	pc, [ip, #2360]!	; 0x938

00012744 <mkdir@plt>:
   12744:	add	ip, pc, #0, 12
   12748:	add	ip, ip, #118784	; 0x1d000
   1274c:	ldr	pc, [ip, #2352]!	; 0x930

00012750 <memset@plt>:
   12750:	add	ip, pc, #0, 12
   12754:	add	ip, ip, #118784	; 0x1d000
   12758:	ldr	pc, [ip, #2344]!	; 0x928

0001275c <strncpy@plt>:
   1275c:	add	ip, pc, #0, 12
   12760:	add	ip, ip, #118784	; 0x1d000
   12764:	ldr	pc, [ip, #2336]!	; 0x920

00012768 <prctl@plt>:
   12768:	add	ip, pc, #0, 12
   1276c:	add	ip, ip, #118784	; 0x1d000
   12770:	ldr	pc, [ip, #2328]!	; 0x918

00012774 <fclose@plt>:
   12774:	add	ip, pc, #0, 12
   12778:	add	ip, ip, #118784	; 0x1d000
   1277c:	ldr	pc, [ip, #2320]!	; 0x910

00012780 <munmap@plt>:
   12780:	add	ip, pc, #0, 12
   12784:	add	ip, ip, #118784	; 0x1d000
   12788:	ldr	pc, [ip, #2312]!	; 0x908

0001278c <fcntl64@plt>:
   1278c:	add	ip, pc, #0, 12
   12790:	add	ip, ip, #118784	; 0x1d000
   12794:	ldr	pc, [ip, #2304]!	; 0x900

00012798 <strrchr@plt>:
   12798:	add	ip, pc, #0, 12
   1279c:	add	ip, ip, #118784	; 0x1d000
   127a0:	ldr	pc, [ip, #2296]!	; 0x8f8

000127a4 <msync@plt>:
   127a4:	add	ip, pc, #0, 12
   127a8:	add	ip, ip, #118784	; 0x1d000
   127ac:	ldr	pc, [ip, #2288]!	; 0x8f0

000127b0 <putc@plt>:
   127b0:	add	ip, pc, #0, 12
   127b4:	add	ip, ip, #118784	; 0x1d000
   127b8:	ldr	pc, [ip, #2280]!	; 0x8e8

000127bc <fseek@plt>:
   127bc:	add	ip, pc, #0, 12
   127c0:	add	ip, ip, #118784	; 0x1d000
   127c4:	ldr	pc, [ip, #2272]!	; 0x8e0

000127c8 <abort@plt>:
   127c8:	add	ip, pc, #0, 12
   127cc:	add	ip, ip, #118784	; 0x1d000
   127d0:	ldr	pc, [ip, #2264]!	; 0x8d8

Disassembly of section .text:

000127e0 <_start@@Base>:
   127e0:	mov	fp, #0
   127e4:	mov	lr, #0
   127e8:	pop	{r1}		; (ldr r1, [sp], #4)
   127ec:	mov	r2, sp
   127f0:	push	{r2}		; (str r2, [sp, #-4]!)
   127f4:	push	{r0}		; (str r0, [sp, #-4]!)
   127f8:	ldr	ip, [pc, #16]	; 12810 <_start@@Base+0x30>
   127fc:	push	{ip}		; (str ip, [sp, #-4]!)
   12800:	ldr	r0, [pc, #12]	; 12814 <_start@@Base+0x34>
   12804:	ldr	r3, [pc, #12]	; 12818 <_start@@Base+0x38>
   12808:	bl	126cc <__libc_start_main@plt>
   1280c:	bl	127c8 <abort@plt>
   12810:	ldrdeq	sp, [r1], -ip
   12814:	andeq	r3, r1, r0, lsr #30
   12818:	andeq	sp, r1, ip, ror sp
   1281c:	ldr	r3, [pc, #20]	; 12838 <_start@@Base+0x58>
   12820:	ldr	r2, [pc, #20]	; 1283c <_start@@Base+0x5c>
   12824:	add	r3, pc, r3
   12828:	ldr	r2, [r3, r2]
   1282c:	cmp	r2, #0
   12830:	bxeq	lr
   12834:	b	126e4 <__gmon_start__@plt>
   12838:	ldrdeq	sp, [r1], -r4
   1283c:	strheq	r0, [r0], -ip
   12840:	ldr	r0, [pc, #24]	; 12860 <_start@@Base+0x80>
   12844:	ldr	r3, [pc, #24]	; 12864 <_start@@Base+0x84>
   12848:	cmp	r3, r0
   1284c:	bxeq	lr
   12850:	ldr	r3, [pc, #16]	; 12868 <_start@@Base+0x88>
   12854:	cmp	r3, #0
   12858:	bxeq	lr
   1285c:	bx	r3
   12860:	ldrdeq	r0, [r3], -r4
   12864:	ldrdeq	r0, [r3], -r4
   12868:	andeq	r0, r0, r0
   1286c:	ldr	r0, [pc, #36]	; 12898 <_start@@Base+0xb8>
   12870:	ldr	r1, [pc, #36]	; 1289c <_start@@Base+0xbc>
   12874:	sub	r1, r1, r0
   12878:	asr	r1, r1, #2
   1287c:	add	r1, r1, r1, lsr #31
   12880:	asrs	r1, r1, #1
   12884:	bxeq	lr
   12888:	ldr	r3, [pc, #16]	; 128a0 <_start@@Base+0xc0>
   1288c:	cmp	r3, #0
   12890:	bxeq	lr
   12894:	bx	r3
   12898:	ldrdeq	r0, [r3], -r4
   1289c:	ldrdeq	r0, [r3], -r4
   128a0:	andeq	r0, r0, r0
   128a4:	push	{r4, lr}
   128a8:	ldr	r4, [pc, #24]	; 128c8 <_start@@Base+0xe8>
   128ac:	ldrb	r3, [r4]
   128b0:	cmp	r3, #0
   128b4:	popne	{r4, pc}
   128b8:	bl	12840 <_start@@Base+0x60>
   128bc:	mov	r3, #1
   128c0:	strb	r3, [r4]
   128c4:	pop	{r4, pc}
   128c8:	andeq	r0, r3, r8, ror #1
   128cc:	b	1286c <_start@@Base+0x8c>

000128d0 <simple_file_only_main@@Base>:
   128d0:	push	{r4, r5, fp, lr}
   128d4:	add	fp, sp, #8
   128d8:	sub	sp, sp, #16
   128dc:	movw	r0, #240	; 0xf0
   128e0:	add	r1, pc, #376	; 0x178
   128e4:	add	r4, sp, #4
   128e8:	movt	r0, #3
   128ec:	vld1.64	{d16-d17}, [r1 :128]
   128f0:	movw	r1, #56836	; 0xde04
   128f4:	vld1.64	{d18-d19}, [r0 :128]
   128f8:	movt	r1, #1
   128fc:	vadd.i64	q8, q9, q8
   12900:	vst1.64	{d16-d17}, [r0 :128]
   12904:	mov	r0, r4
   12908:	bl	190f0 <init_lexer@@Base>
   1290c:	mov	r0, r4
   12910:	bl	19450 <next@@Base>
   12914:	ldr	r1, [r0]
   12918:	mov	r5, #148	; 0x94
   1291c:	mov	r0, #0
   12920:	mov	r2, #0
   12924:	mov	r3, #23
   12928:	str	r5, [sp]
   1292c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12930:	mov	r0, r4
   12934:	bl	19450 <next@@Base>
   12938:	ldr	r1, [r0]
   1293c:	mov	r0, #2
   12940:	mov	r2, #0
   12944:	mov	r3, #25
   12948:	str	r5, [sp]
   1294c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12950:	mov	r0, r4
   12954:	bl	19450 <next@@Base>
   12958:	ldr	r1, [r0]
   1295c:	mov	r0, #3
   12960:	mov	r2, #0
   12964:	mov	r3, #27
   12968:	str	r5, [sp]
   1296c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12970:	mov	r0, r4
   12974:	bl	19450 <next@@Base>
   12978:	ldr	r1, [r0]
   1297c:	mov	r0, #4
   12980:	mov	r2, #0
   12984:	mov	r3, #29
   12988:	str	r5, [sp]
   1298c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12990:	mov	r0, r4
   12994:	bl	19450 <next@@Base>
   12998:	ldr	r1, [r0]
   1299c:	mov	r0, #5
   129a0:	mov	r2, #0
   129a4:	mov	r3, #31
   129a8:	str	r5, [sp]
   129ac:	bl	15730 <UnityAssertEqualNumber@@Base>
   129b0:	mov	r0, r4
   129b4:	bl	19450 <next@@Base>
   129b8:	ldr	r1, [r0]
   129bc:	mov	r0, #7
   129c0:	mov	r2, #0
   129c4:	mov	r3, #33	; 0x21
   129c8:	str	r5, [sp]
   129cc:	bl	15730 <UnityAssertEqualNumber@@Base>
   129d0:	mov	r0, r4
   129d4:	bl	19450 <next@@Base>
   129d8:	ldr	r1, [r0]
   129dc:	mov	r0, #1
   129e0:	mov	r2, #0
   129e4:	mov	r3, #35	; 0x23
   129e8:	str	r5, [sp]
   129ec:	bl	15730 <UnityAssertEqualNumber@@Base>
   129f0:	mov	r0, r4
   129f4:	bl	19450 <next@@Base>
   129f8:	ldr	r1, [r0]
   129fc:	mov	r0, #8
   12a00:	mov	r2, #0
   12a04:	mov	r3, #37	; 0x25
   12a08:	str	r5, [sp]
   12a0c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12a10:	mov	r0, r4
   12a14:	bl	19450 <next@@Base>
   12a18:	ldr	r1, [r0]
   12a1c:	mov	r0, #6
   12a20:	mov	r2, #0
   12a24:	mov	r3, #39	; 0x27
   12a28:	str	r5, [sp]
   12a2c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12a30:	mov	r0, r4
   12a34:	bl	19450 <next@@Base>
   12a38:	ldr	r1, [r0]
   12a3c:	mov	r0, #9
   12a40:	mov	r2, #0
   12a44:	mov	r3, #41	; 0x29
   12a48:	str	r5, [sp]
   12a4c:	bl	15730 <UnityAssertEqualNumber@@Base>
   12a50:	mov	r0, r4
   12a54:	bl	19130 <destroy_lexer@@Base>
   12a58:	sub	sp, fp, #8
   12a5c:	pop	{r4, r5, fp, pc}
   12a60:	andeq	r0, r0, r1
   12a64:	andeq	r0, r0, r0
   12a68:	andeq	r0, r0, r1
   12a6c:	andeq	r0, r0, r0

00012a70 <push_token_to_stack@@Base>:
   12a70:	push	{r4, r5, fp, lr}
   12a74:	add	fp, sp, #8
   12a78:	sub	sp, sp, #16
   12a7c:	movw	r0, #240	; 0xf0
   12a80:	add	r1, pc, #120	; 0x78
   12a84:	add	r4, sp, #4
   12a88:	movt	r0, #3
   12a8c:	vld1.64	{d16-d17}, [r1 :128]
   12a90:	movw	r1, #56836	; 0xde04
   12a94:	add	r0, r0, #16
   12a98:	movt	r1, #1
   12a9c:	vld1.64	{d18-d19}, [r0 :128]
   12aa0:	vadd.i64	q8, q9, q8
   12aa4:	vst1.64	{d16-d17}, [r0 :128]
   12aa8:	mov	r0, r4
   12aac:	bl	190f0 <init_lexer@@Base>
   12ab0:	mov	r0, #8
   12ab4:	bl	126c0 <malloc@plt>
   12ab8:	mov	r5, r0
   12abc:	mov	r0, r4
   12ac0:	mov	r1, r5
   12ac4:	bl	19230 <push_back@@Base>
   12ac8:	ldr	r0, [sp, #8]
   12acc:	mov	r1, #148	; 0x94
   12ad0:	mov	r2, #0
   12ad4:	mov	r3, #62	; 0x3e
   12ad8:	ldr	r0, [r0, #4]
   12adc:	str	r1, [sp]
   12ae0:	mov	r1, r5
   12ae4:	bl	15730 <UnityAssertEqualNumber@@Base>
   12ae8:	mov	r0, r4
   12aec:	bl	19130 <destroy_lexer@@Base>
   12af0:	mov	r0, r5
   12af4:	bl	12630 <free@plt>
   12af8:	sub	sp, fp, #8
   12afc:	pop	{r4, r5, fp, pc}
   12b00:	andeq	r0, r0, r1
   12b04:	andeq	r0, r0, r0
   12b08:	andeq	r0, r0, r1
   12b0c:	andeq	r0, r0, r0

00012b10 <push_two_tokens_to_stack@@Base>:
   12b10:	push	{r4, r5, r6, r7, fp, lr}
   12b14:	add	fp, sp, #16
   12b18:	sub	sp, sp, #16
   12b1c:	movw	r0, #240	; 0xf0
   12b20:	add	r1, pc, #184	; 0xb8
   12b24:	add	r4, sp, #4
   12b28:	movt	r0, #3
   12b2c:	vld1.64	{d16-d17}, [r1 :128]
   12b30:	movw	r1, #56836	; 0xde04
   12b34:	add	r0, r0, #32
   12b38:	movt	r1, #1
   12b3c:	vld1.64	{d18-d19}, [r0 :128]
   12b40:	vadd.i64	q8, q9, q8
   12b44:	vst1.64	{d16-d17}, [r0 :128]
   12b48:	mov	r0, r4
   12b4c:	bl	190f0 <init_lexer@@Base>
   12b50:	mov	r0, #8
   12b54:	bl	126c0 <malloc@plt>
   12b58:	mov	r5, r0
   12b5c:	mov	r0, #8
   12b60:	bl	126c0 <malloc@plt>
   12b64:	mov	r6, r0
   12b68:	mov	r0, r4
   12b6c:	mov	r1, r5
   12b70:	bl	19230 <push_back@@Base>
   12b74:	ldr	r0, [sp, #8]
   12b78:	mov	r7, #148	; 0x94
   12b7c:	mov	r1, r5
   12b80:	mov	r2, #0
   12b84:	mov	r3, #86	; 0x56
   12b88:	ldr	r0, [r0, #4]
   12b8c:	str	r7, [sp]
   12b90:	bl	15730 <UnityAssertEqualNumber@@Base>
   12b94:	mov	r0, r4
   12b98:	mov	r1, r6
   12b9c:	bl	19230 <push_back@@Base>
   12ba0:	ldr	r0, [sp, #8]
   12ba4:	mov	r1, r6
   12ba8:	mov	r2, #0
   12bac:	mov	r3, #88	; 0x58
   12bb0:	ldr	r0, [r0, #4]
   12bb4:	str	r7, [sp]
   12bb8:	bl	15730 <UnityAssertEqualNumber@@Base>
   12bbc:	mov	r0, r4
   12bc0:	bl	19130 <destroy_lexer@@Base>
   12bc4:	mov	r0, r5
   12bc8:	bl	12630 <free@plt>
   12bcc:	mov	r0, r6
   12bd0:	bl	12630 <free@plt>
   12bd4:	sub	sp, fp, #16
   12bd8:	pop	{r4, r5, r6, r7, fp, pc}
   12bdc:	nop	{0}
   12be0:	andeq	r0, r0, r1
   12be4:	andeq	r0, r0, r0
   12be8:	andeq	r0, r0, r1
   12bec:	andeq	r0, r0, r0

00012bf0 <push_token_and_call_next@@Base>:
   12bf0:	push	{r4, r5, fp, lr}
   12bf4:	add	fp, sp, #8
   12bf8:	sub	sp, sp, #16
   12bfc:	movw	r0, #240	; 0xf0
   12c00:	add	r1, pc, #136	; 0x88
   12c04:	add	r4, sp, #4
   12c08:	movt	r0, #3
   12c0c:	vld1.64	{d16-d17}, [r1 :128]
   12c10:	movw	r1, #56836	; 0xde04
   12c14:	add	r0, r0, #48	; 0x30
   12c18:	movt	r1, #1
   12c1c:	vld1.64	{d18-d19}, [r0 :128]
   12c20:	vadd.i64	q8, q9, q8
   12c24:	vst1.64	{d16-d17}, [r0 :128]
   12c28:	mov	r0, r4
   12c2c:	bl	190f0 <init_lexer@@Base>
   12c30:	mov	r0, #8
   12c34:	bl	126c0 <malloc@plt>
   12c38:	mov	r5, r0
   12c3c:	mov	r0, r4
   12c40:	mov	r1, r5
   12c44:	bl	19230 <push_back@@Base>
   12c48:	mov	r0, r4
   12c4c:	bl	19450 <next@@Base>
   12c50:	mov	r1, r0
   12c54:	mov	r0, #148	; 0x94
   12c58:	mov	r2, #0
   12c5c:	mov	r3, #113	; 0x71
   12c60:	str	r0, [sp]
   12c64:	mov	r0, r5
   12c68:	bl	15730 <UnityAssertEqualNumber@@Base>
   12c6c:	mov	r0, r4
   12c70:	bl	19130 <destroy_lexer@@Base>
   12c74:	mov	r0, r5
   12c78:	bl	12630 <free@plt>
   12c7c:	sub	sp, fp, #8
   12c80:	pop	{r4, r5, fp, pc}
   12c84:	nop	{0}
   12c88:	nop	{0}
   12c8c:	nop	{0}
   12c90:	andeq	r0, r0, r1
   12c94:	andeq	r0, r0, r0
   12c98:	andeq	r0, r0, r1
   12c9c:	andeq	r0, r0, r0

00012ca0 <if_without_else@@Base>:
   12ca0:	push	{r4, r5, fp, lr}
   12ca4:	add	fp, sp, #8
   12ca8:	sub	sp, sp, #16
   12cac:	movw	r0, #240	; 0xf0
   12cb0:	add	r1, pc, #744	; 0x2e8
   12cb4:	add	r4, sp, #4
   12cb8:	movt	r0, #3
   12cbc:	vld1.64	{d16-d17}, [r1 :128]
   12cc0:	movw	r1, #56862	; 0xde1e
   12cc4:	add	r0, r0, #64	; 0x40
   12cc8:	movt	r1, #1
   12ccc:	vld1.64	{d18-d19}, [r0 :128]
   12cd0:	vadd.i64	q8, q9, q8
   12cd4:	vst1.64	{d16-d17}, [r0 :128]
   12cd8:	mov	r0, r4
   12cdc:	bl	190f0 <init_lexer@@Base>
   12ce0:	mov	r0, r4
   12ce4:	bl	19450 <next@@Base>
   12ce8:	ldr	r1, [r0]
   12cec:	mov	r5, #148	; 0x94
   12cf0:	mov	r0, #0
   12cf4:	mov	r2, #0
   12cf8:	mov	r3, #140	; 0x8c
   12cfc:	str	r5, [sp]
   12d00:	bl	15730 <UnityAssertEqualNumber@@Base>
   12d04:	mov	r0, r4
   12d08:	bl	19450 <next@@Base>
   12d0c:	ldr	r1, [r0]
   12d10:	mov	r0, #2
   12d14:	mov	r2, #0
   12d18:	mov	r3, #142	; 0x8e
   12d1c:	str	r5, [sp]
   12d20:	bl	15730 <UnityAssertEqualNumber@@Base>
   12d24:	mov	r0, r4
   12d28:	bl	19450 <next@@Base>
   12d2c:	ldr	r1, [r0]
   12d30:	mov	r0, #3
   12d34:	mov	r2, #0
   12d38:	mov	r3, #144	; 0x90
   12d3c:	str	r5, [sp]
   12d40:	bl	15730 <UnityAssertEqualNumber@@Base>
   12d44:	mov	r0, r4
   12d48:	bl	19450 <next@@Base>
   12d4c:	ldr	r1, [r0]
   12d50:	mov	r0, #4
   12d54:	mov	r2, #0
   12d58:	mov	r3, #146	; 0x92
   12d5c:	str	r5, [sp]
   12d60:	bl	15730 <UnityAssertEqualNumber@@Base>
   12d64:	mov	r0, r4
   12d68:	bl	19450 <next@@Base>
   12d6c:	ldr	r1, [r0]
   12d70:	mov	r0, #5
   12d74:	mov	r2, #0
   12d78:	mov	r3, #148	; 0x94
   12d7c:	str	r5, [sp]
   12d80:	bl	15730 <UnityAssertEqualNumber@@Base>
   12d84:	mov	r0, r4
   12d88:	bl	19450 <next@@Base>
   12d8c:	ldr	r1, [r0]
   12d90:	mov	r0, #10
   12d94:	mov	r2, #0
   12d98:	mov	r3, #150	; 0x96
   12d9c:	str	r5, [sp]
   12da0:	bl	15730 <UnityAssertEqualNumber@@Base>
   12da4:	mov	r0, r4
   12da8:	bl	19450 <next@@Base>
   12dac:	ldr	r1, [r0]
   12db0:	mov	r0, #3
   12db4:	mov	r2, #0
   12db8:	mov	r3, #152	; 0x98
   12dbc:	str	r5, [sp]
   12dc0:	bl	15730 <UnityAssertEqualNumber@@Base>
   12dc4:	mov	r0, r4
   12dc8:	bl	19450 <next@@Base>
   12dcc:	ldr	r1, [r0]
   12dd0:	mov	r0, #1
   12dd4:	mov	r2, #0
   12dd8:	mov	r3, #154	; 0x9a
   12ddc:	str	r5, [sp]
   12de0:	bl	15730 <UnityAssertEqualNumber@@Base>
   12de4:	mov	r0, r4
   12de8:	bl	19450 <next@@Base>
   12dec:	ldr	r1, [r0]
   12df0:	mov	r0, #12
   12df4:	mov	r2, #0
   12df8:	mov	r3, #156	; 0x9c
   12dfc:	str	r5, [sp]
   12e00:	bl	15730 <UnityAssertEqualNumber@@Base>
   12e04:	mov	r0, r4
   12e08:	bl	19450 <next@@Base>
   12e0c:	ldr	r1, [r0]
   12e10:	mov	r0, #1
   12e14:	mov	r2, #0
   12e18:	mov	r3, #158	; 0x9e
   12e1c:	str	r5, [sp]
   12e20:	bl	15730 <UnityAssertEqualNumber@@Base>
   12e24:	mov	r0, r4
   12e28:	bl	19450 <next@@Base>
   12e2c:	ldr	r1, [r0]
   12e30:	mov	r0, #4
   12e34:	mov	r2, #0
   12e38:	mov	r3, #160	; 0xa0
   12e3c:	str	r5, [sp]
   12e40:	bl	15730 <UnityAssertEqualNumber@@Base>
   12e44:	mov	r0, r4
   12e48:	bl	19450 <next@@Base>
   12e4c:	ldr	r1, [r0]
   12e50:	mov	r0, #5
   12e54:	mov	r2, #0
   12e58:	mov	r3, #162	; 0xa2
   12e5c:	str	r5, [sp]
   12e60:	bl	15730 <UnityAssertEqualNumber@@Base>
   12e64:	mov	r0, r4
   12e68:	bl	19450 <next@@Base>
   12e6c:	ldr	r1, [r0]
   12e70:	mov	r0, #7
   12e74:	mov	r2, #0
   12e78:	mov	r3, #164	; 0xa4
   12e7c:	str	r5, [sp]
   12e80:	bl	15730 <UnityAssertEqualNumber@@Base>
   12e84:	mov	r0, r4
   12e88:	bl	19450 <next@@Base>
   12e8c:	ldr	r1, [r0]
   12e90:	mov	r0, #1
   12e94:	mov	r2, #0
   12e98:	mov	r3, #166	; 0xa6
   12e9c:	str	r5, [sp]
   12ea0:	bl	15730 <UnityAssertEqualNumber@@Base>
   12ea4:	mov	r0, r4
   12ea8:	bl	19450 <next@@Base>
   12eac:	ldr	r1, [r0]
   12eb0:	mov	r0, #8
   12eb4:	mov	r2, #0
   12eb8:	mov	r3, #168	; 0xa8
   12ebc:	str	r5, [sp]
   12ec0:	bl	15730 <UnityAssertEqualNumber@@Base>
   12ec4:	mov	r0, r4
   12ec8:	bl	19450 <next@@Base>
   12ecc:	ldr	r1, [r0]
   12ed0:	mov	r0, #6
   12ed4:	mov	r2, #0
   12ed8:	mov	r3, #170	; 0xaa
   12edc:	str	r5, [sp]
   12ee0:	bl	15730 <UnityAssertEqualNumber@@Base>
   12ee4:	mov	r0, r4
   12ee8:	bl	19450 <next@@Base>
   12eec:	ldr	r1, [r0]
   12ef0:	mov	r0, #7
   12ef4:	mov	r2, #0
   12ef8:	mov	r3, #172	; 0xac
   12efc:	str	r5, [sp]
   12f00:	bl	15730 <UnityAssertEqualNumber@@Base>
   12f04:	mov	r0, r4
   12f08:	bl	19450 <next@@Base>
   12f0c:	ldr	r1, [r0]
   12f10:	mov	r0, #1
   12f14:	mov	r2, #0
   12f18:	mov	r3, #174	; 0xae
   12f1c:	str	r5, [sp]
   12f20:	bl	15730 <UnityAssertEqualNumber@@Base>
   12f24:	mov	r0, r4
   12f28:	bl	19450 <next@@Base>
   12f2c:	ldr	r1, [r0]
   12f30:	mov	r0, #8
   12f34:	mov	r2, #0
   12f38:	mov	r3, #176	; 0xb0
   12f3c:	str	r5, [sp]
   12f40:	bl	15730 <UnityAssertEqualNumber@@Base>
   12f44:	mov	r0, r4
   12f48:	bl	19450 <next@@Base>
   12f4c:	ldr	r1, [r0]
   12f50:	mov	r0, #6
   12f54:	mov	r2, #0
   12f58:	mov	r3, #178	; 0xb2
   12f5c:	str	r5, [sp]
   12f60:	bl	15730 <UnityAssertEqualNumber@@Base>
   12f64:	mov	r0, r4
   12f68:	bl	19450 <next@@Base>
   12f6c:	ldr	r1, [r0]
   12f70:	mov	r0, #9
   12f74:	mov	r2, #0
   12f78:	mov	r3, #180	; 0xb4
   12f7c:	str	r5, [sp]
   12f80:	bl	15730 <UnityAssertEqualNumber@@Base>
   12f84:	mov	r0, r4
   12f88:	bl	19130 <destroy_lexer@@Base>
   12f8c:	sub	sp, fp, #8
   12f90:	pop	{r4, r5, fp, pc}
   12f94:	nop	{0}
   12f98:	nop	{0}
   12f9c:	nop	{0}
   12fa0:	andeq	r0, r0, r1
   12fa4:	andeq	r0, r0, r0
   12fa8:	andeq	r0, r0, r1
   12fac:	andeq	r0, r0, r0

00012fb0 <if_with_else@@Base>:
   12fb0:	push	{r4, r5, fp, lr}
   12fb4:	add	fp, sp, #8
   12fb8:	sub	sp, sp, #16
   12fbc:	movw	r0, #240	; 0xf0
   12fc0:	add	r1, pc, #936	; 0x3a8
   12fc4:	add	r4, sp, #4
   12fc8:	movt	r0, #3
   12fcc:	vld1.64	{d16-d17}, [r1 :128]
   12fd0:	movw	r1, #56919	; 0xde57
   12fd4:	add	r0, r0, #80	; 0x50
   12fd8:	movt	r1, #1
   12fdc:	vld1.64	{d18-d19}, [r0 :128]
   12fe0:	vadd.i64	q8, q9, q8
   12fe4:	vst1.64	{d16-d17}, [r0 :128]
   12fe8:	mov	r0, r4
   12fec:	bl	190f0 <init_lexer@@Base>
   12ff0:	mov	r0, r4
   12ff4:	bl	19450 <next@@Base>
   12ff8:	ldr	r1, [r0]
   12ffc:	mov	r5, #148	; 0x94
   13000:	mov	r0, #0
   13004:	mov	r2, #0
   13008:	mov	r3, #210	; 0xd2
   1300c:	str	r5, [sp]
   13010:	bl	15730 <UnityAssertEqualNumber@@Base>
   13014:	mov	r0, r4
   13018:	bl	19450 <next@@Base>
   1301c:	ldr	r1, [r0]
   13020:	mov	r0, #2
   13024:	mov	r2, #0
   13028:	mov	r3, #212	; 0xd4
   1302c:	str	r5, [sp]
   13030:	bl	15730 <UnityAssertEqualNumber@@Base>
   13034:	mov	r0, r4
   13038:	bl	19450 <next@@Base>
   1303c:	ldr	r1, [r0]
   13040:	mov	r0, #3
   13044:	mov	r2, #0
   13048:	mov	r3, #214	; 0xd6
   1304c:	str	r5, [sp]
   13050:	bl	15730 <UnityAssertEqualNumber@@Base>
   13054:	mov	r0, r4
   13058:	bl	19450 <next@@Base>
   1305c:	ldr	r1, [r0]
   13060:	mov	r0, #4
   13064:	mov	r2, #0
   13068:	mov	r3, #216	; 0xd8
   1306c:	str	r5, [sp]
   13070:	bl	15730 <UnityAssertEqualNumber@@Base>
   13074:	mov	r0, r4
   13078:	bl	19450 <next@@Base>
   1307c:	ldr	r1, [r0]
   13080:	mov	r0, #5
   13084:	mov	r2, #0
   13088:	mov	r3, #218	; 0xda
   1308c:	str	r5, [sp]
   13090:	bl	15730 <UnityAssertEqualNumber@@Base>
   13094:	mov	r0, r4
   13098:	bl	19450 <next@@Base>
   1309c:	ldr	r1, [r0]
   130a0:	mov	r0, #10
   130a4:	mov	r2, #0
   130a8:	mov	r3, #220	; 0xdc
   130ac:	str	r5, [sp]
   130b0:	bl	15730 <UnityAssertEqualNumber@@Base>
   130b4:	mov	r0, r4
   130b8:	bl	19450 <next@@Base>
   130bc:	ldr	r1, [r0]
   130c0:	mov	r0, #3
   130c4:	mov	r2, #0
   130c8:	mov	r3, #222	; 0xde
   130cc:	str	r5, [sp]
   130d0:	bl	15730 <UnityAssertEqualNumber@@Base>
   130d4:	mov	r0, r4
   130d8:	bl	19450 <next@@Base>
   130dc:	ldr	r1, [r0]
   130e0:	mov	r0, #1
   130e4:	mov	r2, #0
   130e8:	mov	r3, #224	; 0xe0
   130ec:	str	r5, [sp]
   130f0:	bl	15730 <UnityAssertEqualNumber@@Base>
   130f4:	mov	r0, r4
   130f8:	bl	19450 <next@@Base>
   130fc:	ldr	r1, [r0]
   13100:	mov	r0, #12
   13104:	mov	r2, #0
   13108:	mov	r3, #226	; 0xe2
   1310c:	str	r5, [sp]
   13110:	bl	15730 <UnityAssertEqualNumber@@Base>
   13114:	mov	r0, r4
   13118:	bl	19450 <next@@Base>
   1311c:	ldr	r1, [r0]
   13120:	mov	r0, #1
   13124:	mov	r2, #0
   13128:	mov	r3, #228	; 0xe4
   1312c:	str	r5, [sp]
   13130:	bl	15730 <UnityAssertEqualNumber@@Base>
   13134:	mov	r0, r4
   13138:	bl	19450 <next@@Base>
   1313c:	ldr	r1, [r0]
   13140:	mov	r0, #4
   13144:	mov	r2, #0
   13148:	mov	r3, #230	; 0xe6
   1314c:	str	r5, [sp]
   13150:	bl	15730 <UnityAssertEqualNumber@@Base>
   13154:	mov	r0, r4
   13158:	bl	19450 <next@@Base>
   1315c:	ldr	r1, [r0]
   13160:	mov	r0, #5
   13164:	mov	r2, #0
   13168:	mov	r3, #232	; 0xe8
   1316c:	str	r5, [sp]
   13170:	bl	15730 <UnityAssertEqualNumber@@Base>
   13174:	mov	r0, r4
   13178:	bl	19450 <next@@Base>
   1317c:	ldr	r1, [r0]
   13180:	mov	r0, #7
   13184:	mov	r2, #0
   13188:	mov	r3, #234	; 0xea
   1318c:	str	r5, [sp]
   13190:	bl	15730 <UnityAssertEqualNumber@@Base>
   13194:	mov	r0, r4
   13198:	bl	19450 <next@@Base>
   1319c:	ldr	r1, [r0]
   131a0:	mov	r0, #1
   131a4:	mov	r2, #0
   131a8:	mov	r3, #236	; 0xec
   131ac:	str	r5, [sp]
   131b0:	bl	15730 <UnityAssertEqualNumber@@Base>
   131b4:	mov	r0, r4
   131b8:	bl	19450 <next@@Base>
   131bc:	ldr	r1, [r0]
   131c0:	mov	r0, #8
   131c4:	mov	r2, #0
   131c8:	mov	r3, #238	; 0xee
   131cc:	str	r5, [sp]
   131d0:	bl	15730 <UnityAssertEqualNumber@@Base>
   131d4:	mov	r0, r4
   131d8:	bl	19450 <next@@Base>
   131dc:	ldr	r1, [r0]
   131e0:	mov	r0, #6
   131e4:	mov	r2, #0
   131e8:	mov	r3, #240	; 0xf0
   131ec:	str	r5, [sp]
   131f0:	bl	15730 <UnityAssertEqualNumber@@Base>
   131f4:	mov	r0, r4
   131f8:	bl	19450 <next@@Base>
   131fc:	ldr	r1, [r0]
   13200:	mov	r0, #11
   13204:	mov	r2, #0
   13208:	mov	r3, #242	; 0xf2
   1320c:	str	r5, [sp]
   13210:	bl	15730 <UnityAssertEqualNumber@@Base>
   13214:	mov	r0, r4
   13218:	bl	19450 <next@@Base>
   1321c:	ldr	r1, [r0]
   13220:	mov	r0, #5
   13224:	mov	r2, #0
   13228:	mov	r3, #244	; 0xf4
   1322c:	str	r5, [sp]
   13230:	bl	15730 <UnityAssertEqualNumber@@Base>
   13234:	mov	r0, r4
   13238:	bl	19450 <next@@Base>
   1323c:	ldr	r1, [r0]
   13240:	mov	r0, #7
   13244:	mov	r2, #0
   13248:	mov	r3, #246	; 0xf6
   1324c:	str	r5, [sp]
   13250:	bl	15730 <UnityAssertEqualNumber@@Base>
   13254:	mov	r0, r4
   13258:	bl	19450 <next@@Base>
   1325c:	ldr	r1, [r0]
   13260:	mov	r0, #1
   13264:	mov	r2, #0
   13268:	mov	r3, #248	; 0xf8
   1326c:	str	r5, [sp]
   13270:	bl	15730 <UnityAssertEqualNumber@@Base>
   13274:	mov	r0, r4
   13278:	bl	19450 <next@@Base>
   1327c:	ldr	r1, [r0]
   13280:	mov	r0, #8
   13284:	mov	r2, #0
   13288:	mov	r3, #250	; 0xfa
   1328c:	str	r5, [sp]
   13290:	bl	15730 <UnityAssertEqualNumber@@Base>
   13294:	mov	r0, r4
   13298:	bl	19450 <next@@Base>
   1329c:	ldr	r1, [r0]
   132a0:	mov	r0, #6
   132a4:	mov	r2, #0
   132a8:	mov	r3, #252	; 0xfc
   132ac:	str	r5, [sp]
   132b0:	bl	15730 <UnityAssertEqualNumber@@Base>
   132b4:	mov	r0, r4
   132b8:	bl	19450 <next@@Base>
   132bc:	ldr	r1, [r0]
   132c0:	mov	r0, #7
   132c4:	mov	r2, #0
   132c8:	mov	r3, #254	; 0xfe
   132cc:	str	r5, [sp]
   132d0:	bl	15730 <UnityAssertEqualNumber@@Base>
   132d4:	mov	r0, r4
   132d8:	bl	19450 <next@@Base>
   132dc:	ldr	r1, [r0]
   132e0:	mov	r0, #1
   132e4:	mov	r2, #0
   132e8:	mov	r3, #256	; 0x100
   132ec:	str	r5, [sp]
   132f0:	bl	15730 <UnityAssertEqualNumber@@Base>
   132f4:	mov	r0, r4
   132f8:	bl	19450 <next@@Base>
   132fc:	ldr	r1, [r0]
   13300:	mov	r0, #8
   13304:	mov	r2, #0
   13308:	movw	r3, #258	; 0x102
   1330c:	str	r5, [sp]
   13310:	bl	15730 <UnityAssertEqualNumber@@Base>
   13314:	mov	r0, r4
   13318:	bl	19450 <next@@Base>
   1331c:	ldr	r1, [r0]
   13320:	mov	r0, #6
   13324:	mov	r2, #0
   13328:	mov	r3, #260	; 0x104
   1332c:	str	r5, [sp]
   13330:	bl	15730 <UnityAssertEqualNumber@@Base>
   13334:	mov	r0, r4
   13338:	bl	19450 <next@@Base>
   1333c:	ldr	r1, [r0]
   13340:	mov	r0, #9
   13344:	mov	r2, #0
   13348:	movw	r3, #262	; 0x106
   1334c:	str	r5, [sp]
   13350:	bl	15730 <UnityAssertEqualNumber@@Base>
   13354:	mov	r0, r4
   13358:	bl	19130 <destroy_lexer@@Base>
   1335c:	sub	sp, fp, #8
   13360:	pop	{r4, r5, fp, pc}
   13364:	nop	{0}
   13368:	nop	{0}
   1336c:	nop	{0}
   13370:	andeq	r0, r0, r1
   13374:	andeq	r0, r0, r0
   13378:	andeq	r0, r0, r1
   1337c:	andeq	r0, r0, r0

00013380 <read_token_int_type@@Base>:
   13380:	push	{r4, sl, fp, lr}
   13384:	add	fp, sp, #8
   13388:	sub	sp, sp, #16
   1338c:	movw	r0, #240	; 0xf0
   13390:	add	r1, pc, #104	; 0x68
   13394:	add	r4, sp, #4
   13398:	movt	r0, #3
   1339c:	vld1.64	{d16-d17}, [r1 :128]
   133a0:	movw	r1, #61083	; 0xee9b
   133a4:	add	r0, r0, #96	; 0x60
   133a8:	movt	r1, #1
   133ac:	vld1.64	{d18-d19}, [r0 :128]
   133b0:	vadd.i64	q8, q9, q8
   133b4:	vst1.64	{d16-d17}, [r0 :128]
   133b8:	mov	r0, r4
   133bc:	bl	190f0 <init_lexer@@Base>
   133c0:	mov	r0, r4
   133c4:	bl	19450 <next@@Base>
   133c8:	ldr	r1, [r0]
   133cc:	mov	r0, #148	; 0x94
   133d0:	mov	r2, #0
   133d4:	movw	r3, #279	; 0x117
   133d8:	str	r0, [sp]
   133dc:	mov	r0, #0
   133e0:	bl	15730 <UnityAssertEqualNumber@@Base>
   133e4:	mov	r0, r4
   133e8:	bl	19130 <destroy_lexer@@Base>
   133ec:	sub	sp, fp, #8
   133f0:	pop	{r4, sl, fp, pc}
   133f4:	nop	{0}
   133f8:	nop	{0}
   133fc:	nop	{0}
   13400:	andeq	r0, r0, r1
   13404:	andeq	r0, r0, r0
   13408:	andeq	r0, r0, r1
   1340c:	andeq	r0, r0, r0

00013410 <read_token_int_value@@Base>:
   13410:	push	{r4, sl, fp, lr}
   13414:	add	fp, sp, #8
   13418:	sub	sp, sp, #16
   1341c:	movw	r0, #352	; 0x160
   13420:	add	r1, pc, #88	; 0x58
   13424:	add	r4, sp, #4
   13428:	movt	r0, #3
   1342c:	vld1.64	{d16-d17}, [r1 :128]
   13430:	movw	r1, #57000	; 0xdea8
   13434:	vld1.64	{d18-d19}, [r0 :128]
   13438:	movt	r1, #1
   1343c:	vadd.i64	q8, q9, q8
   13440:	vst1.64	{d16-d17}, [r0 :128]
   13444:	mov	r0, r4
   13448:	bl	190f0 <init_lexer@@Base>
   1344c:	mov	r0, r4
   13450:	bl	19450 <next@@Base>
   13454:	ldr	r1, [r0]
   13458:	mov	r0, #148	; 0x94
   1345c:	mov	r2, #0
   13460:	mov	r3, #296	; 0x128
   13464:	str	r0, [sp]
   13468:	mov	r0, #1
   1346c:	bl	15730 <UnityAssertEqualNumber@@Base>
   13470:	mov	r0, r4
   13474:	bl	19130 <destroy_lexer@@Base>
   13478:	sub	sp, fp, #8
   1347c:	pop	{r4, sl, fp, pc}
   13480:	andeq	r0, r0, r1
   13484:	andeq	r0, r0, r0
   13488:	andeq	r0, r0, r1
   1348c:	andeq	r0, r0, r0

00013490 <read_token_function@@Base>:
   13490:	push	{r4, sl, fp, lr}
   13494:	add	fp, sp, #8
   13498:	sub	sp, sp, #16
   1349c:	movw	r0, #352	; 0x160
   134a0:	add	r1, pc, #104	; 0x68
   134a4:	add	r4, sp, #4
   134a8:	movt	r0, #3
   134ac:	vld1.64	{d16-d17}, [r1 :128]
   134b0:	movw	r1, #57284	; 0xdfc4
   134b4:	add	r0, r0, #16
   134b8:	movt	r1, #1
   134bc:	vld1.64	{d18-d19}, [r0 :128]
   134c0:	vadd.i64	q8, q9, q8
   134c4:	vst1.64	{d16-d17}, [r0 :128]
   134c8:	mov	r0, r4
   134cc:	bl	190f0 <init_lexer@@Base>
   134d0:	mov	r0, r4
   134d4:	bl	19450 <next@@Base>
   134d8:	ldr	r1, [r0]
   134dc:	mov	r0, #148	; 0x94
   134e0:	mov	r2, #0
   134e4:	movw	r3, #313	; 0x139
   134e8:	str	r0, [sp]
   134ec:	mov	r0, #2
   134f0:	bl	15730 <UnityAssertEqualNumber@@Base>
   134f4:	mov	r0, r4
   134f8:	bl	19130 <destroy_lexer@@Base>
   134fc:	sub	sp, fp, #8
   13500:	pop	{r4, sl, fp, pc}
   13504:	nop	{0}
   13508:	nop	{0}
   1350c:	nop	{0}
   13510:	andeq	r0, r0, r1
   13514:	andeq	r0, r0, r0
   13518:	andeq	r0, r0, r1
   1351c:	andeq	r0, r0, r0

00013520 <read_token_opar@@Base>:
   13520:	push	{r4, sl, fp, lr}
   13524:	add	fp, sp, #8
   13528:	sub	sp, sp, #16
   1352c:	movw	r0, #352	; 0x160
   13530:	add	r1, pc, #104	; 0x68
   13534:	add	r4, sp, #4
   13538:	movt	r0, #3
   1353c:	vld1.64	{d16-d17}, [r1 :128]
   13540:	movw	r1, #57005	; 0xdead
   13544:	add	r0, r0, #32
   13548:	movt	r1, #1
   1354c:	vld1.64	{d18-d19}, [r0 :128]
   13550:	vadd.i64	q8, q9, q8
   13554:	vst1.64	{d16-d17}, [r0 :128]
   13558:	mov	r0, r4
   1355c:	bl	190f0 <init_lexer@@Base>
   13560:	mov	r0, r4
   13564:	bl	19450 <next@@Base>
   13568:	ldr	r1, [r0]
   1356c:	mov	r0, #148	; 0x94
   13570:	mov	r2, #0
   13574:	movw	r3, #330	; 0x14a
   13578:	str	r0, [sp]
   1357c:	mov	r0, #3
   13580:	bl	15730 <UnityAssertEqualNumber@@Base>
   13584:	mov	r0, r4
   13588:	bl	19130 <destroy_lexer@@Base>
   1358c:	sub	sp, fp, #8
   13590:	pop	{r4, sl, fp, pc}
   13594:	nop	{0}
   13598:	nop	{0}
   1359c:	nop	{0}
   135a0:	andeq	r0, r0, r1
   135a4:	andeq	r0, r0, r0
   135a8:	andeq	r0, r0, r1
   135ac:	andeq	r0, r0, r0

000135b0 <read_token_cpar@@Base>:
   135b0:	push	{r4, sl, fp, lr}
   135b4:	add	fp, sp, #8
   135b8:	sub	sp, sp, #16
   135bc:	movw	r0, #352	; 0x160
   135c0:	add	r1, pc, #104	; 0x68
   135c4:	add	r4, sp, #4
   135c8:	movt	r0, #3
   135cc:	vld1.64	{d16-d17}, [r1 :128]
   135d0:	movw	r1, #57007	; 0xdeaf
   135d4:	add	r0, r0, #48	; 0x30
   135d8:	movt	r1, #1
   135dc:	vld1.64	{d18-d19}, [r0 :128]
   135e0:	vadd.i64	q8, q9, q8
   135e4:	vst1.64	{d16-d17}, [r0 :128]
   135e8:	mov	r0, r4
   135ec:	bl	190f0 <init_lexer@@Base>
   135f0:	mov	r0, r4
   135f4:	bl	19450 <next@@Base>
   135f8:	ldr	r1, [r0]
   135fc:	mov	r0, #148	; 0x94
   13600:	mov	r2, #0
   13604:	movw	r3, #347	; 0x15b
   13608:	str	r0, [sp]
   1360c:	mov	r0, #4
   13610:	bl	15730 <UnityAssertEqualNumber@@Base>
   13614:	mov	r0, r4
   13618:	bl	19130 <destroy_lexer@@Base>
   1361c:	sub	sp, fp, #8
   13620:	pop	{r4, sl, fp, pc}
   13624:	nop	{0}
   13628:	nop	{0}
   1362c:	nop	{0}
   13630:	andeq	r0, r0, r1
   13634:	andeq	r0, r0, r0
   13638:	andeq	r0, r0, r1
   1363c:	andeq	r0, r0, r0

00013640 <read_token_obra@@Base>:
   13640:	push	{r4, sl, fp, lr}
   13644:	add	fp, sp, #8
   13648:	sub	sp, sp, #16
   1364c:	movw	r0, #352	; 0x160
   13650:	add	r1, pc, #104	; 0x68
   13654:	add	r4, sp, #4
   13658:	movt	r0, #3
   1365c:	vld1.64	{d16-d17}, [r1 :128]
   13660:	movw	r1, #57009	; 0xdeb1
   13664:	add	r0, r0, #64	; 0x40
   13668:	movt	r1, #1
   1366c:	vld1.64	{d18-d19}, [r0 :128]
   13670:	vadd.i64	q8, q9, q8
   13674:	vst1.64	{d16-d17}, [r0 :128]
   13678:	mov	r0, r4
   1367c:	bl	190f0 <init_lexer@@Base>
   13680:	mov	r0, r4
   13684:	bl	19450 <next@@Base>
   13688:	ldr	r1, [r0]
   1368c:	mov	r0, #148	; 0x94
   13690:	mov	r2, #0
   13694:	mov	r3, #364	; 0x16c
   13698:	str	r0, [sp]
   1369c:	mov	r0, #5
   136a0:	bl	15730 <UnityAssertEqualNumber@@Base>
   136a4:	mov	r0, r4
   136a8:	bl	19130 <destroy_lexer@@Base>
   136ac:	sub	sp, fp, #8
   136b0:	pop	{r4, sl, fp, pc}
   136b4:	nop	{0}
   136b8:	nop	{0}
   136bc:	nop	{0}
   136c0:	andeq	r0, r0, r1
   136c4:	andeq	r0, r0, r0
   136c8:	andeq	r0, r0, r1
   136cc:	andeq	r0, r0, r0

000136d0 <read_token_cbra@@Base>:
   136d0:	push	{r4, sl, fp, lr}
   136d4:	add	fp, sp, #8
   136d8:	sub	sp, sp, #16
   136dc:	movw	r0, #352	; 0x160
   136e0:	add	r1, pc, #104	; 0x68
   136e4:	add	r4, sp, #4
   136e8:	movt	r0, #3
   136ec:	vld1.64	{d16-d17}, [r1 :128]
   136f0:	movw	r1, #56860	; 0xde1c
   136f4:	add	r0, r0, #80	; 0x50
   136f8:	movt	r1, #1
   136fc:	vld1.64	{d18-d19}, [r0 :128]
   13700:	vadd.i64	q8, q9, q8
   13704:	vst1.64	{d16-d17}, [r0 :128]
   13708:	mov	r0, r4
   1370c:	bl	190f0 <init_lexer@@Base>
   13710:	mov	r0, r4
   13714:	bl	19450 <next@@Base>
   13718:	ldr	r1, [r0]
   1371c:	mov	r0, #148	; 0x94
   13720:	mov	r2, #0
   13724:	movw	r3, #382	; 0x17e
   13728:	str	r0, [sp]
   1372c:	mov	r0, #6
   13730:	bl	15730 <UnityAssertEqualNumber@@Base>
   13734:	mov	r0, r4
   13738:	bl	19130 <destroy_lexer@@Base>
   1373c:	sub	sp, fp, #8
   13740:	pop	{r4, sl, fp, pc}
   13744:	nop	{0}
   13748:	nop	{0}
   1374c:	nop	{0}
   13750:	andeq	r0, r0, r1
   13754:	andeq	r0, r0, r0
   13758:	andeq	r0, r0, r1
   1375c:	andeq	r0, r0, r0

00013760 <read_token_return@@Base>:
   13760:	push	{r4, sl, fp, lr}
   13764:	add	fp, sp, #8
   13768:	sub	sp, sp, #16
   1376c:	movw	r0, #352	; 0x160
   13770:	add	r1, pc, #104	; 0x68
   13774:	add	r4, sp, #4
   13778:	movt	r0, #3
   1377c:	vld1.64	{d16-d17}, [r1 :128]
   13780:	movw	r1, #57011	; 0xdeb3
   13784:	add	r0, r0, #96	; 0x60
   13788:	movt	r1, #1
   1378c:	vld1.64	{d18-d19}, [r0 :128]
   13790:	vadd.i64	q8, q9, q8
   13794:	vst1.64	{d16-d17}, [r0 :128]
   13798:	mov	r0, r4
   1379c:	bl	190f0 <init_lexer@@Base>
   137a0:	mov	r0, r4
   137a4:	bl	19450 <next@@Base>
   137a8:	ldr	r1, [r0]
   137ac:	mov	r0, #148	; 0x94
   137b0:	mov	r2, #0
   137b4:	movw	r3, #399	; 0x18f
   137b8:	str	r0, [sp]
   137bc:	mov	r0, #7
   137c0:	bl	15730 <UnityAssertEqualNumber@@Base>
   137c4:	mov	r0, r4
   137c8:	bl	19130 <destroy_lexer@@Base>
   137cc:	sub	sp, fp, #8
   137d0:	pop	{r4, sl, fp, pc}
   137d4:	nop	{0}
   137d8:	nop	{0}
   137dc:	nop	{0}
   137e0:	andeq	r0, r0, r1
   137e4:	andeq	r0, r0, r0
   137e8:	andeq	r0, r0, r1
   137ec:	andeq	r0, r0, r0

000137f0 <read_token_semicolon@@Base>:
   137f0:	push	{r4, sl, fp, lr}
   137f4:	add	fp, sp, #8
   137f8:	sub	sp, sp, #16
   137fc:	movw	r0, #464	; 0x1d0
   13800:	add	r1, pc, #88	; 0x58
   13804:	add	r4, sp, #4
   13808:	movt	r0, #3
   1380c:	vld1.64	{d16-d17}, [r1 :128]
   13810:	movw	r1, #57018	; 0xdeba
   13814:	vld1.64	{d18-d19}, [r0 :128]
   13818:	movt	r1, #1
   1381c:	vadd.i64	q8, q9, q8
   13820:	vst1.64	{d16-d17}, [r0 :128]
   13824:	mov	r0, r4
   13828:	bl	190f0 <init_lexer@@Base>
   1382c:	mov	r0, r4
   13830:	bl	19450 <next@@Base>
   13834:	ldr	r1, [r0]
   13838:	mov	r0, #148	; 0x94
   1383c:	mov	r2, #0
   13840:	mov	r3, #416	; 0x1a0
   13844:	str	r0, [sp]
   13848:	mov	r0, #8
   1384c:	bl	15730 <UnityAssertEqualNumber@@Base>
   13850:	mov	r0, r4
   13854:	bl	19130 <destroy_lexer@@Base>
   13858:	sub	sp, fp, #8
   1385c:	pop	{r4, sl, fp, pc}
   13860:	andeq	r0, r0, r1
   13864:	andeq	r0, r0, r0
   13868:	andeq	r0, r0, r1
   1386c:	andeq	r0, r0, r0

00013870 <read_token_eof@@Base>:
   13870:	push	{r4, sl, fp, lr}
   13874:	add	fp, sp, #8
   13878:	sub	sp, sp, #16
   1387c:	movw	r0, #464	; 0x1d0
   13880:	add	r1, pc, #104	; 0x68
   13884:	add	r4, sp, #4
   13888:	movt	r0, #3
   1388c:	vld1.64	{d16-d17}, [r1 :128]
   13890:	movw	r1, #63377	; 0xf791
   13894:	add	r0, r0, #16
   13898:	movt	r1, #1
   1389c:	vld1.64	{d18-d19}, [r0 :128]
   138a0:	vadd.i64	q8, q9, q8
   138a4:	vst1.64	{d16-d17}, [r0 :128]
   138a8:	mov	r0, r4
   138ac:	bl	190f0 <init_lexer@@Base>
   138b0:	mov	r0, r4
   138b4:	bl	19450 <next@@Base>
   138b8:	ldr	r1, [r0]
   138bc:	mov	r0, #148	; 0x94
   138c0:	mov	r2, #0
   138c4:	movw	r3, #433	; 0x1b1
   138c8:	str	r0, [sp]
   138cc:	mov	r0, #9
   138d0:	bl	15730 <UnityAssertEqualNumber@@Base>
   138d4:	mov	r0, r4
   138d8:	bl	19130 <destroy_lexer@@Base>
   138dc:	sub	sp, fp, #8
   138e0:	pop	{r4, sl, fp, pc}
   138e4:	nop	{0}
   138e8:	nop	{0}
   138ec:	nop	{0}
   138f0:	andeq	r0, r0, r1
   138f4:	andeq	r0, r0, r0
   138f8:	andeq	r0, r0, r1
   138fc:	andeq	r0, r0, r0

00013900 <read_token_if@@Base>:
   13900:	push	{r4, sl, fp, lr}
   13904:	add	fp, sp, #8
   13908:	sub	sp, sp, #16
   1390c:	movw	r0, #464	; 0x1d0
   13910:	add	r1, pc, #104	; 0x68
   13914:	add	r4, sp, #4
   13918:	movt	r0, #3
   1391c:	vld1.64	{d16-d17}, [r1 :128]
   13920:	movw	r1, #57234	; 0xdf92
   13924:	add	r0, r0, #32
   13928:	movt	r1, #1
   1392c:	vld1.64	{d18-d19}, [r0 :128]
   13930:	vadd.i64	q8, q9, q8
   13934:	vst1.64	{d16-d17}, [r0 :128]
   13938:	mov	r0, r4
   1393c:	bl	190f0 <init_lexer@@Base>
   13940:	mov	r0, r4
   13944:	bl	19450 <next@@Base>
   13948:	ldr	r1, [r0]
   1394c:	mov	r0, #148	; 0x94
   13950:	mov	r2, #0
   13954:	movw	r3, #450	; 0x1c2
   13958:	str	r0, [sp]
   1395c:	mov	r0, #10
   13960:	bl	15730 <UnityAssertEqualNumber@@Base>
   13964:	mov	r0, r4
   13968:	bl	19130 <destroy_lexer@@Base>
   1396c:	sub	sp, fp, #8
   13970:	pop	{r4, sl, fp, pc}
   13974:	nop	{0}
   13978:	nop	{0}
   1397c:	nop	{0}
   13980:	andeq	r0, r0, r1
   13984:	andeq	r0, r0, r0
   13988:	andeq	r0, r0, r1
   1398c:	andeq	r0, r0, r0

00013990 <read_token_else@@Base>:
   13990:	push	{r4, sl, fp, lr}
   13994:	add	fp, sp, #8
   13998:	sub	sp, sp, #16
   1399c:	movw	r0, #464	; 0x1d0
   139a0:	add	r1, pc, #104	; 0x68
   139a4:	add	r4, sp, #4
   139a8:	movt	r0, #3
   139ac:	vld1.64	{d16-d17}, [r1 :128]
   139b0:	movw	r1, #57139	; 0xdf33
   139b4:	add	r0, r0, #48	; 0x30
   139b8:	movt	r1, #1
   139bc:	vld1.64	{d18-d19}, [r0 :128]
   139c0:	vadd.i64	q8, q9, q8
   139c4:	vst1.64	{d16-d17}, [r0 :128]
   139c8:	mov	r0, r4
   139cc:	bl	190f0 <init_lexer@@Base>
   139d0:	mov	r0, r4
   139d4:	bl	19450 <next@@Base>
   139d8:	ldr	r1, [r0]
   139dc:	mov	r0, #148	; 0x94
   139e0:	mov	r2, #0
   139e4:	movw	r3, #467	; 0x1d3
   139e8:	str	r0, [sp]
   139ec:	mov	r0, #11
   139f0:	bl	15730 <UnityAssertEqualNumber@@Base>
   139f4:	mov	r0, r4
   139f8:	bl	19130 <destroy_lexer@@Base>
   139fc:	sub	sp, fp, #8
   13a00:	pop	{r4, sl, fp, pc}
   13a04:	nop	{0}
   13a08:	nop	{0}
   13a0c:	nop	{0}
   13a10:	andeq	r0, r0, r1
   13a14:	andeq	r0, r0, r0
   13a18:	andeq	r0, r0, r1
   13a1c:	andeq	r0, r0, r0

00013a20 <read_token_equalequal@@Base>:
   13a20:	push	{r4, sl, fp, lr}
   13a24:	add	fp, sp, #8
   13a28:	sub	sp, sp, #16
   13a2c:	movw	r0, #464	; 0x1d0
   13a30:	add	r1, pc, #104	; 0x68
   13a34:	add	r4, sp, #4
   13a38:	movt	r0, #3
   13a3c:	vld1.64	{d16-d17}, [r1 :128]
   13a40:	movw	r1, #57020	; 0xdebc
   13a44:	add	r0, r0, #64	; 0x40
   13a48:	movt	r1, #1
   13a4c:	vld1.64	{d18-d19}, [r0 :128]
   13a50:	vadd.i64	q8, q9, q8
   13a54:	vst1.64	{d16-d17}, [r0 :128]
   13a58:	mov	r0, r4
   13a5c:	bl	190f0 <init_lexer@@Base>
   13a60:	mov	r0, r4
   13a64:	bl	19450 <next@@Base>
   13a68:	ldr	r1, [r0]
   13a6c:	mov	r0, #148	; 0x94
   13a70:	mov	r2, #0
   13a74:	mov	r3, #484	; 0x1e4
   13a78:	str	r0, [sp]
   13a7c:	mov	r0, #12
   13a80:	bl	15730 <UnityAssertEqualNumber@@Base>
   13a84:	mov	r0, r4
   13a88:	bl	19130 <destroy_lexer@@Base>
   13a8c:	sub	sp, fp, #8
   13a90:	pop	{r4, sl, fp, pc}
   13a94:	nop	{0}
   13a98:	nop	{0}
   13a9c:	nop	{0}
   13aa0:	andeq	r0, r0, r1
   13aa4:	andeq	r0, r0, r0
   13aa8:	andeq	r0, r0, r1
   13aac:	andeq	r0, r0, r0

00013ab0 <read_token_notequal@@Base>:
   13ab0:	push	{r4, sl, fp, lr}
   13ab4:	add	fp, sp, #8
   13ab8:	sub	sp, sp, #16
   13abc:	movw	r0, #464	; 0x1d0
   13ac0:	add	r1, pc, #104	; 0x68
   13ac4:	add	r4, sp, #4
   13ac8:	movt	r0, #3
   13acc:	vld1.64	{d16-d17}, [r1 :128]
   13ad0:	movw	r1, #57023	; 0xdebf
   13ad4:	add	r0, r0, #80	; 0x50
   13ad8:	movt	r1, #1
   13adc:	vld1.64	{d18-d19}, [r0 :128]
   13ae0:	vadd.i64	q8, q9, q8
   13ae4:	vst1.64	{d16-d17}, [r0 :128]
   13ae8:	mov	r0, r4
   13aec:	bl	190f0 <init_lexer@@Base>
   13af0:	mov	r0, r4
   13af4:	bl	19450 <next@@Base>
   13af8:	ldr	r1, [r0]
   13afc:	mov	r0, #148	; 0x94
   13b00:	mov	r2, #0
   13b04:	movw	r3, #501	; 0x1f5
   13b08:	str	r0, [sp]
   13b0c:	mov	r0, #12
   13b10:	bl	15730 <UnityAssertEqualNumber@@Base>
   13b14:	mov	r0, r4
   13b18:	bl	19130 <destroy_lexer@@Base>
   13b1c:	sub	sp, fp, #8
   13b20:	pop	{r4, sl, fp, pc}
   13b24:	nop	{0}
   13b28:	nop	{0}
   13b2c:	nop	{0}
   13b30:	andeq	r0, r0, r1
   13b34:	andeq	r0, r0, r0
   13b38:	andeq	r0, r0, r1
   13b3c:	andeq	r0, r0, r0

00013b40 <read_token_lessequalthan@@Base>:
   13b40:	push	{r4, sl, fp, lr}
   13b44:	add	fp, sp, #8
   13b48:	sub	sp, sp, #16
   13b4c:	movw	r0, #464	; 0x1d0
   13b50:	add	r1, pc, #104	; 0x68
   13b54:	add	r4, sp, #4
   13b58:	movt	r0, #3
   13b5c:	vld1.64	{d16-d17}, [r1 :128]
   13b60:	movw	r1, #57026	; 0xdec2
   13b64:	add	r0, r0, #96	; 0x60
   13b68:	movt	r1, #1
   13b6c:	vld1.64	{d18-d19}, [r0 :128]
   13b70:	vadd.i64	q8, q9, q8
   13b74:	vst1.64	{d16-d17}, [r0 :128]
   13b78:	mov	r0, r4
   13b7c:	bl	190f0 <init_lexer@@Base>
   13b80:	mov	r0, r4
   13b84:	bl	19450 <next@@Base>
   13b88:	ldr	r1, [r0]
   13b8c:	mov	r0, #148	; 0x94
   13b90:	mov	r2, #0
   13b94:	movw	r3, #518	; 0x206
   13b98:	str	r0, [sp]
   13b9c:	mov	r0, #12
   13ba0:	bl	15730 <UnityAssertEqualNumber@@Base>
   13ba4:	mov	r0, r4
   13ba8:	bl	19130 <destroy_lexer@@Base>
   13bac:	sub	sp, fp, #8
   13bb0:	pop	{r4, sl, fp, pc}
   13bb4:	nop	{0}
   13bb8:	nop	{0}
   13bbc:	nop	{0}
   13bc0:	andeq	r0, r0, r1
   13bc4:	andeq	r0, r0, r0
   13bc8:	andeq	r0, r0, r1
   13bcc:	andeq	r0, r0, r0

00013bd0 <read_token_oror@@Base>:
   13bd0:	push	{r4, sl, fp, lr}
   13bd4:	add	fp, sp, #8
   13bd8:	sub	sp, sp, #16
   13bdc:	movw	r0, #576	; 0x240
   13be0:	add	r1, pc, #88	; 0x58
   13be4:	add	r4, sp, #4
   13be8:	movt	r0, #3
   13bec:	vld1.64	{d16-d17}, [r1 :128]
   13bf0:	movw	r1, #57029	; 0xdec5
   13bf4:	vld1.64	{d18-d19}, [r0 :128]
   13bf8:	movt	r1, #1
   13bfc:	vadd.i64	q8, q9, q8
   13c00:	vst1.64	{d16-d17}, [r0 :128]
   13c04:	mov	r0, r4
   13c08:	bl	190f0 <init_lexer@@Base>
   13c0c:	mov	r0, r4
   13c10:	bl	19450 <next@@Base>
   13c14:	ldr	r1, [r0]
   13c18:	mov	r0, #148	; 0x94
   13c1c:	mov	r2, #0
   13c20:	movw	r3, #535	; 0x217
   13c24:	str	r0, [sp]
   13c28:	mov	r0, #12
   13c2c:	bl	15730 <UnityAssertEqualNumber@@Base>
   13c30:	mov	r0, r4
   13c34:	bl	19130 <destroy_lexer@@Base>
   13c38:	sub	sp, fp, #8
   13c3c:	pop	{r4, sl, fp, pc}
   13c40:	andeq	r0, r0, r1
   13c44:	andeq	r0, r0, r0
   13c48:	andeq	r0, r0, r1
   13c4c:	andeq	r0, r0, r0

00013c50 <read_token_andand@@Base>:
   13c50:	push	{r4, sl, fp, lr}
   13c54:	add	fp, sp, #8
   13c58:	sub	sp, sp, #16
   13c5c:	movw	r0, #576	; 0x240
   13c60:	add	r1, pc, #104	; 0x68
   13c64:	add	r4, sp, #4
   13c68:	movt	r0, #3
   13c6c:	vld1.64	{d16-d17}, [r1 :128]
   13c70:	movw	r1, #57032	; 0xdec8
   13c74:	add	r0, r0, #16
   13c78:	movt	r1, #1
   13c7c:	vld1.64	{d18-d19}, [r0 :128]
   13c80:	vadd.i64	q8, q9, q8
   13c84:	vst1.64	{d16-d17}, [r0 :128]
   13c88:	mov	r0, r4
   13c8c:	bl	190f0 <init_lexer@@Base>
   13c90:	mov	r0, r4
   13c94:	bl	19450 <next@@Base>
   13c98:	ldr	r1, [r0]
   13c9c:	mov	r0, #148	; 0x94
   13ca0:	mov	r2, #0
   13ca4:	mov	r3, #552	; 0x228
   13ca8:	str	r0, [sp]
   13cac:	mov	r0, #12
   13cb0:	bl	15730 <UnityAssertEqualNumber@@Base>
   13cb4:	mov	r0, r4
   13cb8:	bl	19130 <destroy_lexer@@Base>
   13cbc:	sub	sp, fp, #8
   13cc0:	pop	{r4, sl, fp, pc}
   13cc4:	nop	{0}
   13cc8:	nop	{0}
   13ccc:	nop	{0}
   13cd0:	andeq	r0, r0, r1
   13cd4:	andeq	r0, r0, r0
   13cd8:	andeq	r0, r0, r1
   13cdc:	andeq	r0, r0, r0

00013ce0 <read_token_greaterequalthan@@Base>:
   13ce0:	push	{r4, sl, fp, lr}
   13ce4:	add	fp, sp, #8
   13ce8:	sub	sp, sp, #16
   13cec:	movw	r0, #576	; 0x240
   13cf0:	add	r1, pc, #104	; 0x68
   13cf4:	add	r4, sp, #4
   13cf8:	movt	r0, #3
   13cfc:	vld1.64	{d16-d17}, [r1 :128]
   13d00:	movw	r1, #57035	; 0xdecb
   13d04:	add	r0, r0, #32
   13d08:	movt	r1, #1
   13d0c:	vld1.64	{d18-d19}, [r0 :128]
   13d10:	vadd.i64	q8, q9, q8
   13d14:	vst1.64	{d16-d17}, [r0 :128]
   13d18:	mov	r0, r4
   13d1c:	bl	190f0 <init_lexer@@Base>
   13d20:	mov	r0, r4
   13d24:	bl	19450 <next@@Base>
   13d28:	ldr	r1, [r0]
   13d2c:	mov	r0, #148	; 0x94
   13d30:	mov	r2, #0
   13d34:	movw	r3, #569	; 0x239
   13d38:	str	r0, [sp]
   13d3c:	mov	r0, #12
   13d40:	bl	15730 <UnityAssertEqualNumber@@Base>
   13d44:	mov	r0, r4
   13d48:	bl	19130 <destroy_lexer@@Base>
   13d4c:	sub	sp, fp, #8
   13d50:	pop	{r4, sl, fp, pc}
   13d54:	nop	{0}
   13d58:	nop	{0}
   13d5c:	nop	{0}
   13d60:	andeq	r0, r0, r1
   13d64:	andeq	r0, r0, r0
   13d68:	andeq	r0, r0, r1
   13d6c:	andeq	r0, r0, r0

00013d70 <read_token_lessthan@@Base>:
   13d70:	push	{r4, sl, fp, lr}
   13d74:	add	fp, sp, #8
   13d78:	sub	sp, sp, #16
   13d7c:	movw	r0, #576	; 0x240
   13d80:	add	r1, pc, #104	; 0x68
   13d84:	add	r4, sp, #4
   13d88:	movt	r0, #3
   13d8c:	vld1.64	{d16-d17}, [r1 :128]
   13d90:	movw	r1, #57038	; 0xdece
   13d94:	add	r0, r0, #48	; 0x30
   13d98:	movt	r1, #1
   13d9c:	vld1.64	{d18-d19}, [r0 :128]
   13da0:	vadd.i64	q8, q9, q8
   13da4:	vst1.64	{d16-d17}, [r0 :128]
   13da8:	mov	r0, r4
   13dac:	bl	190f0 <init_lexer@@Base>
   13db0:	mov	r0, r4
   13db4:	bl	19450 <next@@Base>
   13db8:	ldr	r1, [r0]
   13dbc:	mov	r0, #148	; 0x94
   13dc0:	mov	r2, #0
   13dc4:	movw	r3, #586	; 0x24a
   13dc8:	str	r0, [sp]
   13dcc:	mov	r0, #12
   13dd0:	bl	15730 <UnityAssertEqualNumber@@Base>
   13dd4:	mov	r0, r4
   13dd8:	bl	19130 <destroy_lexer@@Base>
   13ddc:	sub	sp, fp, #8
   13de0:	pop	{r4, sl, fp, pc}
   13de4:	nop	{0}
   13de8:	nop	{0}
   13dec:	nop	{0}
   13df0:	andeq	r0, r0, r1
   13df4:	andeq	r0, r0, r0
   13df8:	andeq	r0, r0, r1
   13dfc:	andeq	r0, r0, r0

00013e00 <read_token_greaterthan@@Base>:
   13e00:	push	{r4, sl, fp, lr}
   13e04:	add	fp, sp, #8
   13e08:	sub	sp, sp, #16
   13e0c:	movw	r0, #576	; 0x240
   13e10:	add	r1, pc, #104	; 0x68
   13e14:	add	r4, sp, #4
   13e18:	movt	r0, #3
   13e1c:	vld1.64	{d16-d17}, [r1 :128]
   13e20:	movw	r1, #57040	; 0xded0
   13e24:	add	r0, r0, #64	; 0x40
   13e28:	movt	r1, #1
   13e2c:	vld1.64	{d18-d19}, [r0 :128]
   13e30:	vadd.i64	q8, q9, q8
   13e34:	vst1.64	{d16-d17}, [r0 :128]
   13e38:	mov	r0, r4
   13e3c:	bl	190f0 <init_lexer@@Base>
   13e40:	mov	r0, r4
   13e44:	bl	19450 <next@@Base>
   13e48:	ldr	r1, [r0]
   13e4c:	mov	r0, #148	; 0x94
   13e50:	mov	r2, #0
   13e54:	movw	r3, #603	; 0x25b
   13e58:	str	r0, [sp]
   13e5c:	mov	r0, #12
   13e60:	bl	15730 <UnityAssertEqualNumber@@Base>
   13e64:	mov	r0, r4
   13e68:	bl	19130 <destroy_lexer@@Base>
   13e6c:	sub	sp, fp, #8
   13e70:	pop	{r4, sl, fp, pc}
   13e74:	nop	{0}
   13e78:	nop	{0}
   13e7c:	nop	{0}
   13e80:	andeq	r0, r0, r1
   13e84:	andeq	r0, r0, r0
   13e88:	andeq	r0, r0, r1
   13e8c:	andeq	r0, r0, r0

00013e90 <read_token_not@@Base>:
   13e90:	push	{r4, sl, fp, lr}
   13e94:	add	fp, sp, #8
   13e98:	sub	sp, sp, #16
   13e9c:	movw	r0, #576	; 0x240
   13ea0:	add	r1, pc, #104	; 0x68
   13ea4:	add	r4, sp, #4
   13ea8:	movt	r0, #3
   13eac:	vld1.64	{d16-d17}, [r1 :128]
   13eb0:	movw	r1, #57042	; 0xded2
   13eb4:	add	r0, r0, #80	; 0x50
   13eb8:	movt	r1, #1
   13ebc:	vld1.64	{d18-d19}, [r0 :128]
   13ec0:	vadd.i64	q8, q9, q8
   13ec4:	vst1.64	{d16-d17}, [r0 :128]
   13ec8:	mov	r0, r4
   13ecc:	bl	190f0 <init_lexer@@Base>
   13ed0:	mov	r0, r4
   13ed4:	bl	19450 <next@@Base>
   13ed8:	ldr	r1, [r0]
   13edc:	mov	r0, #148	; 0x94
   13ee0:	mov	r2, #0
   13ee4:	mov	r3, #620	; 0x26c
   13ee8:	str	r0, [sp]
   13eec:	mov	r0, #12
   13ef0:	bl	15730 <UnityAssertEqualNumber@@Base>
   13ef4:	mov	r0, r4
   13ef8:	bl	19130 <destroy_lexer@@Base>
   13efc:	sub	sp, fp, #8
   13f00:	pop	{r4, sl, fp, pc}
   13f04:	nop	{0}
   13f08:	nop	{0}
   13f0c:	nop	{0}
   13f10:	andeq	r0, r0, r1
   13f14:	andeq	r0, r0, r0
   13f18:	andeq	r0, r0, r1
   13f1c:	andeq	r0, r0, r0

00013f20 <main@@Base>:
   13f20:	push	{fp, lr}
   13f24:	mov	fp, sp
   13f28:	movw	r0, #576	; 0x240
   13f2c:	add	r1, pc, #700	; 0x2bc
   13f30:	movt	r0, #3
   13f34:	vld1.64	{d16-d17}, [r1 :128]
   13f38:	add	r0, r0, #96	; 0x60
   13f3c:	vld1.64	{d18-d19}, [r0 :128]
   13f40:	vadd.i64	q8, q9, q8
   13f44:	vst1.64	{d16-d17}, [r0 :128]
   13f48:	movw	r0, #57044	; 0xded4
   13f4c:	movt	r0, #1
   13f50:	bl	18160 <UnityBegin@@Base>
   13f54:	movw	r0, #10448	; 0x28d0
   13f58:	movw	r1, #57408	; 0xe040
   13f5c:	movw	r2, #629	; 0x275
   13f60:	movt	r0, #1
   13f64:	movt	r1, #1
   13f68:	bl	18050 <UnityDefaultTestRun@@Base>
   13f6c:	movw	r0, #10864	; 0x2a70
   13f70:	movw	r1, #57440	; 0xe060
   13f74:	movw	r2, #630	; 0x276
   13f78:	movt	r0, #1
   13f7c:	movt	r1, #1
   13f80:	bl	18050 <UnityDefaultTestRun@@Base>
   13f84:	movw	r0, #11024	; 0x2b10
   13f88:	movw	r1, #57472	; 0xe080
   13f8c:	movw	r2, #631	; 0x277
   13f90:	movt	r0, #1
   13f94:	movt	r1, #1
   13f98:	bl	18050 <UnityDefaultTestRun@@Base>
   13f9c:	movw	r0, #11248	; 0x2bf0
   13fa0:	movw	r1, #57504	; 0xe0a0
   13fa4:	mov	r2, #632	; 0x278
   13fa8:	movt	r0, #1
   13fac:	movt	r1, #1
   13fb0:	bl	18050 <UnityDefaultTestRun@@Base>
   13fb4:	movw	r0, #11424	; 0x2ca0
   13fb8:	movw	r1, #57115	; 0xdf1b
   13fbc:	movw	r2, #633	; 0x279
   13fc0:	movt	r0, #1
   13fc4:	movt	r1, #1
   13fc8:	bl	18050 <UnityDefaultTestRun@@Base>
   13fcc:	movw	r0, #12208	; 0x2fb0
   13fd0:	movw	r1, #57131	; 0xdf2b
   13fd4:	movw	r2, #634	; 0x27a
   13fd8:	movt	r0, #1
   13fdc:	movt	r1, #1
   13fe0:	bl	18050 <UnityDefaultTestRun@@Base>
   13fe4:	movw	r0, #13184	; 0x3380
   13fe8:	movw	r1, #57536	; 0xe0c0
   13fec:	movw	r2, #635	; 0x27b
   13ff0:	movt	r0, #1
   13ff4:	movt	r1, #1
   13ff8:	bl	18050 <UnityDefaultTestRun@@Base>
   13ffc:	movw	r0, #13328	; 0x3410
   14000:	movw	r1, #57568	; 0xe0e0
   14004:	mov	r2, #636	; 0x27c
   14008:	movt	r0, #1
   1400c:	movt	r1, #1
   14010:	bl	18050 <UnityDefaultTestRun@@Base>
   14014:	movw	r0, #13456	; 0x3490
   14018:	movw	r1, #57600	; 0xe100
   1401c:	movw	r2, #637	; 0x27d
   14020:	movt	r0, #1
   14024:	movt	r1, #1
   14028:	bl	18050 <UnityDefaultTestRun@@Base>
   1402c:	movw	r0, #13600	; 0x3520
   14030:	movw	r1, #57144	; 0xdf38
   14034:	movw	r2, #638	; 0x27e
   14038:	movt	r0, #1
   1403c:	movt	r1, #1
   14040:	bl	18050 <UnityDefaultTestRun@@Base>
   14044:	movw	r0, #13744	; 0x35b0
   14048:	movw	r1, #57160	; 0xdf48
   1404c:	movw	r2, #639	; 0x27f
   14050:	movt	r0, #1
   14054:	movt	r1, #1
   14058:	bl	18050 <UnityDefaultTestRun@@Base>
   1405c:	movw	r0, #13888	; 0x3640
   14060:	movw	r1, #57176	; 0xdf58
   14064:	mov	r2, #640	; 0x280
   14068:	movt	r0, #1
   1406c:	movt	r1, #1
   14070:	bl	18050 <UnityDefaultTestRun@@Base>
   14074:	movw	r0, #14032	; 0x36d0
   14078:	movw	r1, #57192	; 0xdf68
   1407c:	movw	r2, #641	; 0x281
   14080:	movt	r0, #1
   14084:	movt	r1, #1
   14088:	bl	18050 <UnityDefaultTestRun@@Base>
   1408c:	movw	r0, #14176	; 0x3760
   14090:	movw	r1, #57632	; 0xe120
   14094:	movw	r2, #642	; 0x282
   14098:	movt	r0, #1
   1409c:	movt	r1, #1
   140a0:	bl	18050 <UnityDefaultTestRun@@Base>
   140a4:	movw	r0, #14320	; 0x37f0
   140a8:	movw	r1, #57664	; 0xe140
   140ac:	movw	r2, #643	; 0x283
   140b0:	movt	r0, #1
   140b4:	movt	r1, #1
   140b8:	bl	18050 <UnityDefaultTestRun@@Base>
   140bc:	movw	r0, #14448	; 0x3870
   140c0:	movw	r1, #57208	; 0xdf78
   140c4:	mov	r2, #644	; 0x284
   140c8:	movt	r0, #1
   140cc:	movt	r1, #1
   140d0:	bl	18050 <UnityDefaultTestRun@@Base>
   140d4:	movw	r0, #14592	; 0x3900
   140d8:	movw	r1, #57223	; 0xdf87
   140dc:	movw	r2, #645	; 0x285
   140e0:	movt	r0, #1
   140e4:	movt	r1, #1
   140e8:	bl	18050 <UnityDefaultTestRun@@Base>
   140ec:	movw	r0, #14736	; 0x3990
   140f0:	movw	r1, #57237	; 0xdf95
   140f4:	movw	r2, #646	; 0x286
   140f8:	movt	r0, #1
   140fc:	movt	r1, #1
   14100:	bl	18050 <UnityDefaultTestRun@@Base>
   14104:	movw	r0, #14880	; 0x3a20
   14108:	movw	r1, #57696	; 0xe160
   1410c:	movw	r2, #647	; 0x287
   14110:	movt	r0, #1
   14114:	movt	r1, #1
   14118:	bl	18050 <UnityDefaultTestRun@@Base>
   1411c:	movw	r0, #15024	; 0x3ab0
   14120:	movw	r1, #57728	; 0xe180
   14124:	mov	r2, #648	; 0x288
   14128:	movt	r0, #1
   1412c:	movt	r1, #1
   14130:	bl	18050 <UnityDefaultTestRun@@Base>
   14134:	movw	r0, #15168	; 0x3b40
   14138:	movw	r1, #57760	; 0xe1a0
   1413c:	movw	r2, #649	; 0x289
   14140:	movt	r0, #1
   14144:	movt	r1, #1
   14148:	bl	18050 <UnityDefaultTestRun@@Base>
   1414c:	movw	r0, #15584	; 0x3ce0
   14150:	movw	r1, #57824	; 0xe1e0
   14154:	movw	r2, #650	; 0x28a
   14158:	movt	r0, #1
   1415c:	movt	r1, #1
   14160:	bl	18050 <UnityDefaultTestRun@@Base>
   14164:	movw	r0, #15312	; 0x3bd0
   14168:	movw	r1, #57253	; 0xdfa5
   1416c:	movw	r2, #651	; 0x28b
   14170:	movt	r0, #1
   14174:	movt	r1, #1
   14178:	bl	18050 <UnityDefaultTestRun@@Base>
   1417c:	movw	r0, #15440	; 0x3c50
   14180:	movw	r1, #57792	; 0xe1c0
   14184:	mov	r2, #652	; 0x28c
   14188:	movt	r0, #1
   1418c:	movt	r1, #1
   14190:	bl	18050 <UnityDefaultTestRun@@Base>
   14194:	movw	r0, #15728	; 0x3d70
   14198:	movw	r1, #57856	; 0xe200
   1419c:	movw	r2, #653	; 0x28d
   141a0:	movt	r0, #1
   141a4:	movt	r1, #1
   141a8:	bl	18050 <UnityDefaultTestRun@@Base>
   141ac:	movw	r0, #15872	; 0x3e00
   141b0:	movw	r1, #57888	; 0xe220
   141b4:	movw	r2, #654	; 0x28e
   141b8:	movt	r0, #1
   141bc:	movt	r1, #1
   141c0:	bl	18050 <UnityDefaultTestRun@@Base>
   141c4:	movw	r0, #16016	; 0x3e90
   141c8:	movw	r1, #57269	; 0xdfb5
   141cc:	movw	r2, #655	; 0x28f
   141d0:	movt	r0, #1
   141d4:	movt	r1, #1
   141d8:	bl	18050 <UnityDefaultTestRun@@Base>
   141dc:	pop	{fp, lr}
   141e0:	b	181c0 <UnityEnd@@Base>
   141e4:	nop	{0}
   141e8:	nop	{0}
   141ec:	nop	{0}
   141f0:	andeq	r0, r0, r1
   141f4:	andeq	r0, r0, r0
   141f8:	andeq	r0, r0, r1
   141fc:	andeq	r0, r0, r0
   14200:	push	{r4, r5, r6, lr}
   14204:	sub	sp, sp, #8
   14208:	movw	r0, #57296	; 0xdfd0
   1420c:	movw	r1, #57110	; 0xdf16
   14210:	movw	r2, #42282	; 0xa52a
   14214:	movt	r0, #1
   14218:	movt	r1, #1
   1421c:	movt	r2, #15831	; 0x3dd7
   14220:	bl	1ae7c <next@@Base+0x1a2c>
   14224:	movw	r0, #58480	; 0xe470
   14228:	movw	r6, #57920	; 0xe240
   1422c:	mov	r5, #0
   14230:	movt	r0, #1
   14234:	movt	r6, #1
   14238:	add	r4, r0, #4
   1423c:	mov	r3, r6
   14240:	ldr	r0, [r3, r5]!
   14244:	ldr	r1, [r3, #16]
   14248:	str	r1, [sp]
   1424c:	ldmib	r3, {r1, r2}
   14250:	ldrb	r3, [r3, #12]
   14254:	bl	1b5e0 <next@@Base+0x2190>
   14258:	ldrd	r0, [r4, #-4]
   1425c:	bl	1be94 <next@@Base+0x2a44>
   14260:	add	r5, r5, #20
   14264:	add	r4, r4, #8
   14268:	cmp	r5, #560	; 0x230
   1426c:	bne	1423c <main@@Base+0x31c>
   14270:	bl	1c610 <next@@Base+0x31c0>
   14274:	add	sp, sp, #8
   14278:	pop	{r4, r5, r6, lr}
   1427c:	b	1d37c <next@@Base+0x3f2c>
   14280:	push	{fp, lr}
   14284:	bl	14200 <main@@Base+0x2e0>
   14288:	movw	r1, #352	; 0x160
   1428c:	vmov.i32	q8, #0	; 0x00000000
   14290:	mov	r0, #96	; 0x60
   14294:	movt	r1, #3
   14298:	mov	r2, r1
   1429c:	vst1.64	{d16-d17}, [r2 :128], r0
   142a0:	vst1.64	{d16-d17}, [r2 :128]
   142a4:	movw	r2, #240	; 0xf0
   142a8:	movt	r2, #3
   142ac:	add	r3, r2, #16
   142b0:	vst1.64	{d16-d17}, [r3 :128]
   142b4:	add	r3, r2, #32
   142b8:	vst1.64	{d16-d17}, [r3 :128]
   142bc:	add	r3, r2, #48	; 0x30
   142c0:	vst1.64	{d16-d17}, [r3 :128]
   142c4:	add	r3, r2, #64	; 0x40
   142c8:	vst1.64	{d16-d17}, [r3 :128]
   142cc:	add	r3, r2, #80	; 0x50
   142d0:	vst1.64	{d16-d17}, [r3 :128]
   142d4:	add	r3, r1, #16
   142d8:	vst1.64	{d16-d17}, [r2 :128], r0
   142dc:	vst1.64	{d16-d17}, [r3 :128]
   142e0:	add	r3, r1, #32
   142e4:	vst1.64	{d16-d17}, [r2 :128]
   142e8:	vst1.64	{d16-d17}, [r3 :128]
   142ec:	add	r3, r1, #48	; 0x30
   142f0:	vst1.64	{d16-d17}, [r3 :128]
   142f4:	add	r3, r1, #64	; 0x40
   142f8:	add	r1, r1, #80	; 0x50
   142fc:	vst1.64	{d16-d17}, [r3 :128]
   14300:	vst1.64	{d16-d17}, [r1 :128]
   14304:	movw	r1, #464	; 0x1d0
   14308:	movt	r1, #3
   1430c:	add	r3, r1, #16
   14310:	add	r2, r1, #80	; 0x50
   14314:	vst1.64	{d16-d17}, [r3 :128]
   14318:	add	r3, r1, #32
   1431c:	vst1.64	{d16-d17}, [r3 :128]
   14320:	add	r3, r1, #48	; 0x30
   14324:	vst1.64	{d16-d17}, [r3 :128]
   14328:	add	r3, r1, #64	; 0x40
   1432c:	vst1.64	{d16-d17}, [r3 :128]
   14330:	vst1.64	{d16-d17}, [r1 :128], r0
   14334:	vst1.64	{d16-d17}, [r2 :128]
   14338:	vst1.64	{d16-d17}, [r1 :128]
   1433c:	movw	r1, #576	; 0x240
   14340:	movt	r1, #3
   14344:	mov	r2, r1
   14348:	vst1.64	{d16-d17}, [r2 :128], r0
   1434c:	add	r0, r1, #32
   14350:	vst1.64	{d16-d17}, [r0 :128]
   14354:	add	r0, r1, #16
   14358:	vst1.64	{d16-d17}, [r0 :128]
   1435c:	add	r0, r1, #48	; 0x30
   14360:	vst1.64	{d16-d17}, [r0 :128]
   14364:	add	r0, r1, #64	; 0x40
   14368:	vst1.64	{d16-d17}, [r0 :128]
   1436c:	add	r0, r1, #80	; 0x50
   14370:	vst1.64	{d16-d17}, [r0 :128]
   14374:	vst1.64	{d16-d17}, [r2 :128]
   14378:	pop	{fp, pc}
   1437c:	movw	r0, #16896	; 0x4200
   14380:	movw	r1, #17024	; 0x4280
   14384:	movt	r0, #1
   14388:	movt	r1, #1
   1438c:	b	1d82c <__gcov_flush@@Base+0xb4>

00014390 <UnityPrint@@Base>:
   14390:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14394:	add	fp, sp, #24
   14398:	vpush	{d8-d9}
   1439c:	movw	r4, #688	; 0x2b0
   143a0:	mov	r1, #16
   143a4:	movt	r4, #3
   143a8:	ldrd	r2, [r4]
   143ac:	adds	r2, r2, #1
   143b0:	adc	r3, r3, #0
   143b4:	cmp	r0, #0
   143b8:	strd	r2, [r4]
   143bc:	movwne	r1, #8
   143c0:	mov	r2, r4
   143c4:	ldr	r1, [r2, r1]!
   143c8:	adds	r1, r1, #1
   143cc:	str	r1, [r2]
   143d0:	ldr	r1, [r2, #4]
   143d4:	adc	r1, r1, #0
   143d8:	cmp	r0, #0
   143dc:	str	r1, [r2, #4]
   143e0:	beq	14624 <UnityPrint@@Base+0x294>
   143e4:	ldrb	r1, [r0]
   143e8:	mov	r2, #32
   143ec:	mov	r3, r4
   143f0:	cmp	r1, #0
   143f4:	movwne	r2, #24
   143f8:	ldr	r2, [r3, r2]!
   143fc:	adds	r2, r2, #1
   14400:	str	r2, [r3]
   14404:	ldr	r2, [r3, #4]
   14408:	adc	r2, r2, #0
   1440c:	cmp	r1, #0
   14410:	str	r2, [r3, #4]
   14414:	beq	14624 <UnityPrint@@Base+0x294>
   14418:	movw	r6, #3936	; 0xf60
   1441c:	movw	r8, #228	; 0xe4
   14420:	add	r5, r0, #1
   14424:	movt	r6, #3
   14428:	movt	r8, #3
   1442c:	uxtb	r0, r1
   14430:	mov	r1, #48	; 0x30
   14434:	mov	r2, r4
   14438:	cmp	r0, #127	; 0x7f
   1443c:	movwcc	r1, #40	; 0x28
   14440:	ldr	r1, [r2, r1]!
   14444:	adds	r1, r1, #1
   14448:	str	r1, [r2]
   1444c:	ldr	r1, [r2, #4]
   14450:	adc	r1, r1, #0
   14454:	cmp	r0, #126	; 0x7e
   14458:	str	r1, [r2, #4]
   1445c:	bhi	144c0 <UnityPrint@@Base+0x130>
   14460:	cmp	r0, #31
   14464:	mov	r1, #64	; 0x40
   14468:	mov	r2, r4
   1446c:	movwhi	r1, #56	; 0x38
   14470:	ldr	r1, [r2, r1]!
   14474:	adds	r1, r1, #1
   14478:	str	r1, [r2]
   1447c:	ldr	r1, [r2, #4]
   14480:	adc	r1, r1, #0
   14484:	cmp	r0, #32
   14488:	str	r1, [r2, #4]
   1448c:	bcc	144c0 <UnityPrint@@Base+0x130>
   14490:	add	r1, pc, #424	; 0x1a8
   14494:	ldrd	r2, [r4, #72]	; 0x48
   14498:	vld1.64	{d18-d19}, [r6 :128]
   1449c:	vld1.64	{d16-d17}, [r1 :128]
   144a0:	ldr	r1, [r8]
   144a4:	adds	r2, r2, #1
   144a8:	vadd.i64	q8, q9, q8
   144ac:	adc	r3, r3, #0
   144b0:	vst1.64	{d16-d17}, [r6 :128]
   144b4:	strd	r2, [r4, #72]	; 0x48
   144b8:	bl	127b0 <putc@plt>
   144bc:	b	145e0 <UnityPrint@@Base+0x250>
   144c0:	ldrb	r7, [r5, #-1]
   144c4:	mov	r0, #88	; 0x58
   144c8:	mov	r1, r4
   144cc:	cmp	r7, #13
   144d0:	movweq	r0, #80	; 0x50
   144d4:	ldr	r0, [r1, r0]!
   144d8:	adds	r0, r0, #1
   144dc:	str	r0, [r1]
   144e0:	ldr	r0, [r1, #4]
   144e4:	adc	r0, r0, #0
   144e8:	cmp	r7, #13
   144ec:	str	r0, [r1, #4]
   144f0:	bne	14540 <UnityPrint@@Base+0x1b0>
   144f4:	add	r0, pc, #324	; 0x144
   144f8:	vld1.64	{d16-d17}, [r6 :128]
   144fc:	vld1.64	{d8-d9}, [r0 :128]
   14500:	ldrd	r0, [r4, #96]	; 0x60
   14504:	adds	r0, r0, #1
   14508:	vadd.i64	q8, q8, q4
   1450c:	adc	r1, r1, #0
   14510:	vst1.64	{d16-d17}, [r6 :128]
   14514:	strd	r0, [r4, #96]	; 0x60
   14518:	ldr	r1, [r8]
   1451c:	mov	r0, #92	; 0x5c
   14520:	bl	127b0 <putc@plt>
   14524:	vld1.64	{d16-d17}, [r6 :128]
   14528:	ldr	r1, [r8]
   1452c:	mov	r0, #114	; 0x72
   14530:	vadd.i64	q8, q8, q4
   14534:	vst1.64	{d16-d17}, [r6 :128]
   14538:	bl	127b0 <putc@plt>
   1453c:	b	145e0 <UnityPrint@@Base+0x250>
   14540:	add	r0, pc, #248	; 0xf8
   14544:	vld1.64	{d18-d19}, [r6 :128]
   14548:	ldr	r1, [r8]
   1454c:	vld1.64	{d16-d17}, [r0 :128]
   14550:	mov	r0, #92	; 0x5c
   14554:	vadd.i64	q8, q9, q8
   14558:	vst1.64	{d16-d17}, [r6 :128]
   1455c:	bl	127b0 <putc@plt>
   14560:	cmp	r7, #10
   14564:	mov	r0, #112	; 0x70
   14568:	mov	r1, r4
   1456c:	movweq	r0, #104	; 0x68
   14570:	ldr	r0, [r1, r0]!
   14574:	adds	r0, r0, #1
   14578:	str	r0, [r1]
   1457c:	ldr	r0, [r1, #4]
   14580:	adc	r0, r0, #0
   14584:	cmp	r7, #10
   14588:	str	r0, [r1, #4]
   1458c:	bne	145c4 <UnityPrint@@Base+0x234>
   14590:	add	r0, pc, #168	; 0xa8
   14594:	vld1.64	{d18-d19}, [r6 :128]
   14598:	vld1.64	{d16-d17}, [r0 :128]
   1459c:	ldrd	r0, [r4, #120]	; 0x78
   145a0:	adds	r0, r0, #1
   145a4:	vadd.i64	q8, q9, q8
   145a8:	adc	r1, r1, #0
   145ac:	vst1.64	{d16-d17}, [r6 :128]
   145b0:	strd	r0, [r4, #120]	; 0x78
   145b4:	ldr	r1, [r8]
   145b8:	mov	r0, #110	; 0x6e
   145bc:	bl	127b0 <putc@plt>
   145c0:	b	145e0 <UnityPrint@@Base+0x250>
   145c4:	ldrd	r0, [r4, #128]	; 0x80
   145c8:	adds	r0, r0, #1
   145cc:	adc	r1, r1, #0
   145d0:	strd	r0, [r4, #128]	; 0x80
   145d4:	mov	r1, #2
   145d8:	ldrb	r0, [r5, #-1]
   145dc:	bl	14650 <UnityPrintNumberHex@@Base>
   145e0:	ldrd	r0, [r4, #136]	; 0x88
   145e4:	mov	r2, r4
   145e8:	adds	r0, r0, #1
   145ec:	adc	r1, r1, #0
   145f0:	strd	r0, [r4, #136]	; 0x88
   145f4:	mov	r0, #32
   145f8:	ldrb	r1, [r5], #1
   145fc:	cmp	r1, #0
   14600:	movwne	r0, #24
   14604:	ldr	r0, [r2, r0]!
   14608:	adds	r0, r0, #1
   1460c:	str	r0, [r2]
   14610:	ldr	r0, [r2, #4]
   14614:	adc	r0, r0, #0
   14618:	cmp	r1, #0
   1461c:	str	r0, [r2, #4]
   14620:	bne	1442c <UnityPrint@@Base+0x9c>
   14624:	ldrd	r0, [r4, #144]	; 0x90
   14628:	adds	r0, r0, #1
   1462c:	adc	r1, r1, #0
   14630:	strd	r0, [r4, #144]	; 0x90
   14634:	vpop	{d8-d9}
   14638:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1463c:	nop	{0}
   14640:	andeq	r0, r0, r1
   14644:	andeq	r0, r0, r0
   14648:	andeq	r0, r0, r1
   1464c:	andeq	r0, r0, r0

00014650 <UnityPrintNumberHex@@Base>:
   14650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14654:	add	fp, sp, #28
   14658:	sub	sp, sp, #4
   1465c:	vpush	{d8-d9}
   14660:	movw	r7, #3936	; 0xf60
   14664:	movw	r6, #848	; 0x350
   14668:	mov	sl, r0
   1466c:	add	r0, pc, #380	; 0x17c
   14670:	movw	r8, #228	; 0xe4
   14674:	mov	r4, r1
   14678:	cmp	r1, #0
   1467c:	movt	r7, #3
   14680:	movt	r6, #3
   14684:	vld1.64	{d8-d9}, [r0 :128]
   14688:	movt	r8, #3
   1468c:	mov	r0, #24
   14690:	vld1.64	{d16-d17}, [r7 :128]
   14694:	vld1.64	{d18-d19}, [r6 :128]
   14698:	ldr	r1, [r8]
   1469c:	movwne	r0, #16
   146a0:	mov	r5, r6
   146a4:	vadd.i64	q8, q8, q4
   146a8:	vst1.64	{d16-d17}, [r7 :128]
   146ac:	vadd.i64	q8, q9, q4
   146b0:	vst1.64	{d16-d17}, [r5 :128], r0
   146b4:	mov	r0, #48	; 0x30
   146b8:	bl	127b0 <putc@plt>
   146bc:	vld1.64	{d16-d17}, [r7 :128]
   146c0:	ldr	r1, [r8]
   146c4:	mov	r0, #120	; 0x78
   146c8:	vadd.i64	q8, q8, q4
   146cc:	vst1.64	{d16-d17}, [r7 :128]
   146d0:	bl	127b0 <putc@plt>
   146d4:	ldrd	r0, [r5]
   146d8:	adds	r0, r0, #1
   146dc:	adc	r1, r1, #0
   146e0:	cmp	r4, #0
   146e4:	strd	r0, [r5]
   146e8:	beq	147d0 <UnityPrintNumberHex@@Base+0x180>
   146ec:	mov	r9, #15
   146f0:	sub	r4, r4, #1
   146f4:	mov	r1, #40	; 0x28
   146f8:	mov	r2, r6
   146fc:	uxtb	r5, r4
   14700:	lsl	r0, r5, #2
   14704:	and	r0, r9, sl, lsr r0
   14708:	cmp	r0, #10
   1470c:	movwcc	r1, #32
   14710:	ldr	r1, [r2, r1]!
   14714:	adds	r1, r1, #1
   14718:	str	r1, [r2]
   1471c:	ldr	r1, [r2, #4]
   14720:	adc	r1, r1, #0
   14724:	cmp	r0, #9
   14728:	str	r1, [r2, #4]
   1472c:	bhi	14760 <UnityPrintNumberHex@@Base+0x110>
   14730:	add	r1, pc, #184	; 0xb8
   14734:	ldrd	r2, [r6, #48]	; 0x30
   14738:	vld1.64	{d18-d19}, [r7 :128]
   1473c:	orr	r0, r0, #48	; 0x30
   14740:	vld1.64	{d16-d17}, [r1 :128]
   14744:	ldr	r1, [r8]
   14748:	adds	r2, r2, #1
   1474c:	vadd.i64	q8, q9, q8
   14750:	adc	r3, r3, #0
   14754:	vst1.64	{d16-d17}, [r7 :128]
   14758:	strd	r2, [r6, #48]	; 0x30
   1475c:	b	1478c <UnityPrintNumberHex@@Base+0x13c>
   14760:	add	r1, pc, #136	; 0x88
   14764:	ldrd	r2, [r6, #56]	; 0x38
   14768:	vld1.64	{d18-d19}, [r7 :128]
   1476c:	add	r0, r0, #55	; 0x37
   14770:	vld1.64	{d16-d17}, [r1 :128]
   14774:	ldr	r1, [r8]
   14778:	adds	r2, r2, #1
   1477c:	vadd.i64	q8, q9, q8
   14780:	adc	r3, r3, #0
   14784:	vst1.64	{d16-d17}, [r7 :128]
   14788:	strd	r2, [r6, #56]	; 0x38
   1478c:	bl	127b0 <putc@plt>
   14790:	ldrd	r0, [r6, #64]	; 0x40
   14794:	adds	r0, r0, #1
   14798:	adc	r1, r1, #0
   1479c:	cmp	r5, #0
   147a0:	strd	r0, [r6, #64]	; 0x40
   147a4:	mov	r0, #24
   147a8:	mov	r1, r6
   147ac:	movwne	r0, #16
   147b0:	ldr	r0, [r1, r0]!
   147b4:	adds	r0, r0, #1
   147b8:	str	r0, [r1]
   147bc:	ldr	r0, [r1, #4]
   147c0:	adc	r0, r0, #0
   147c4:	cmp	r5, #0
   147c8:	str	r0, [r1, #4]
   147cc:	bne	146f0 <UnityPrintNumberHex@@Base+0xa0>
   147d0:	ldrd	r0, [r6, #72]	; 0x48
   147d4:	adds	r0, r0, #1
   147d8:	adc	r1, r1, #0
   147dc:	strd	r0, [r6, #72]	; 0x48
   147e0:	vpop	{d8-d9}
   147e4:	add	sp, sp, #4
   147e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ec:	nop	{0}
   147f0:	andeq	r0, r0, r1
   147f4:	andeq	r0, r0, r0
   147f8:	andeq	r0, r0, r1
   147fc:	andeq	r0, r0, r0

00014800 <UnityPrintLen@@Base>:
   14800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14804:	add	fp, sp, #28
   14808:	sub	sp, sp, #4
   1480c:	vpush	{d8-d9}
   14810:	movw	r6, #928	; 0x3a0
   14814:	mov	r4, r1
   14818:	mov	r9, r0
   1481c:	movt	r6, #3
   14820:	ldrd	r0, [r6]
   14824:	adds	r0, r0, #1
   14828:	adc	r1, r1, #0
   1482c:	cmp	r9, #0
   14830:	strd	r0, [r6]
   14834:	mov	r0, #16
   14838:	mov	r1, r6
   1483c:	movwne	r0, #8
   14840:	ldr	r0, [r1, r0]!
   14844:	adds	r0, r0, #1
   14848:	str	r0, [r1]
   1484c:	ldr	r0, [r1, #4]
   14850:	adc	r0, r0, #0
   14854:	cmp	r9, #0
   14858:	str	r0, [r1, #4]
   1485c:	beq	14ad4 <UnityPrintLen@@Base+0x2d4>
   14860:	ldrb	r0, [r9]
   14864:	mov	r1, #32
   14868:	mov	r2, r6
   1486c:	cmp	r0, #0
   14870:	movwne	r1, #24
   14874:	ldr	r1, [r2, r1]!
   14878:	adds	r1, r1, #1
   1487c:	str	r1, [r2]
   14880:	ldr	r1, [r2, #4]
   14884:	adc	r1, r1, #0
   14888:	cmp	r0, #0
   1488c:	str	r1, [r2, #4]
   14890:	beq	14ad4 <UnityPrintLen@@Base+0x2d4>
   14894:	movw	sl, #3936	; 0xf60
   14898:	movw	r8, #228	; 0xe4
   1489c:	mov	r5, r9
   148a0:	movt	sl, #3
   148a4:	movt	r8, #3
   148a8:	sub	r1, r5, r9
   148ac:	mov	r2, #48	; 0x30
   148b0:	mov	r3, r6
   148b4:	cmp	r1, r4
   148b8:	movwcc	r2, #40	; 0x28
   148bc:	ldr	r2, [r3, r2]!
   148c0:	adds	r2, r2, #1
   148c4:	str	r2, [r3]
   148c8:	ldr	r2, [r3, #4]
   148cc:	adc	r2, r2, #0
   148d0:	cmp	r1, r4
   148d4:	str	r2, [r3, #4]
   148d8:	bcs	14ad4 <UnityPrintLen@@Base+0x2d4>
   148dc:	uxtb	r0, r0
   148e0:	mov	r1, #64	; 0x40
   148e4:	mov	r2, r6
   148e8:	cmp	r0, #127	; 0x7f
   148ec:	movwcc	r1, #56	; 0x38
   148f0:	ldr	r1, [r2, r1]!
   148f4:	adds	r1, r1, #1
   148f8:	str	r1, [r2]
   148fc:	ldr	r1, [r2, #4]
   14900:	adc	r1, r1, #0
   14904:	cmp	r0, #126	; 0x7e
   14908:	str	r1, [r2, #4]
   1490c:	bhi	14970 <UnityPrintLen@@Base+0x170>
   14910:	cmp	r0, #31
   14914:	mov	r1, #80	; 0x50
   14918:	mov	r2, r6
   1491c:	movwhi	r1, #72	; 0x48
   14920:	ldr	r1, [r2, r1]!
   14924:	adds	r1, r1, #1
   14928:	str	r1, [r2]
   1492c:	ldr	r1, [r2, #4]
   14930:	adc	r1, r1, #0
   14934:	cmp	r0, #32
   14938:	str	r1, [r2, #4]
   1493c:	bcc	14970 <UnityPrintLen@@Base+0x170>
   14940:	add	r1, pc, #424	; 0x1a8
   14944:	ldrd	r2, [r6, #88]	; 0x58
   14948:	vld1.64	{d18-d19}, [sl :128]
   1494c:	vld1.64	{d16-d17}, [r1 :128]
   14950:	ldr	r1, [r8]
   14954:	adds	r2, r2, #1
   14958:	vadd.i64	q8, q9, q8
   1495c:	adc	r3, r3, #0
   14960:	vst1.64	{d16-d17}, [sl :128]
   14964:	strd	r2, [r6, #88]	; 0x58
   14968:	bl	127b0 <putc@plt>
   1496c:	b	14a90 <UnityPrintLen@@Base+0x290>
   14970:	ldrb	r7, [r5]
   14974:	mov	r0, #104	; 0x68
   14978:	mov	r1, r6
   1497c:	cmp	r7, #13
   14980:	movweq	r0, #96	; 0x60
   14984:	ldr	r0, [r1, r0]!
   14988:	adds	r0, r0, #1
   1498c:	str	r0, [r1]
   14990:	ldr	r0, [r1, #4]
   14994:	adc	r0, r0, #0
   14998:	cmp	r7, #13
   1499c:	str	r0, [r1, #4]
   149a0:	bne	149f0 <UnityPrintLen@@Base+0x1f0>
   149a4:	add	r0, pc, #324	; 0x144
   149a8:	vld1.64	{d16-d17}, [sl :128]
   149ac:	vld1.64	{d8-d9}, [r0 :128]
   149b0:	ldrd	r0, [r6, #112]	; 0x70
   149b4:	adds	r0, r0, #1
   149b8:	vadd.i64	q8, q8, q4
   149bc:	adc	r1, r1, #0
   149c0:	vst1.64	{d16-d17}, [sl :128]
   149c4:	strd	r0, [r6, #112]	; 0x70
   149c8:	ldr	r1, [r8]
   149cc:	mov	r0, #92	; 0x5c
   149d0:	bl	127b0 <putc@plt>
   149d4:	vld1.64	{d16-d17}, [sl :128]
   149d8:	ldr	r1, [r8]
   149dc:	mov	r0, #114	; 0x72
   149e0:	vadd.i64	q8, q8, q4
   149e4:	vst1.64	{d16-d17}, [sl :128]
   149e8:	bl	127b0 <putc@plt>
   149ec:	b	14a90 <UnityPrintLen@@Base+0x290>
   149f0:	add	r0, pc, #248	; 0xf8
   149f4:	vld1.64	{d18-d19}, [sl :128]
   149f8:	ldr	r1, [r8]
   149fc:	vld1.64	{d16-d17}, [r0 :128]
   14a00:	mov	r0, #92	; 0x5c
   14a04:	vadd.i64	q8, q9, q8
   14a08:	vst1.64	{d16-d17}, [sl :128]
   14a0c:	bl	127b0 <putc@plt>
   14a10:	cmp	r7, #10
   14a14:	mov	r0, #128	; 0x80
   14a18:	mov	r1, r6
   14a1c:	movweq	r0, #120	; 0x78
   14a20:	ldr	r0, [r1, r0]!
   14a24:	adds	r0, r0, #1
   14a28:	str	r0, [r1]
   14a2c:	ldr	r0, [r1, #4]
   14a30:	adc	r0, r0, #0
   14a34:	cmp	r7, #10
   14a38:	str	r0, [r1, #4]
   14a3c:	bne	14a74 <UnityPrintLen@@Base+0x274>
   14a40:	add	r0, pc, #168	; 0xa8
   14a44:	vld1.64	{d18-d19}, [sl :128]
   14a48:	vld1.64	{d16-d17}, [r0 :128]
   14a4c:	ldrd	r0, [r6, #136]	; 0x88
   14a50:	adds	r0, r0, #1
   14a54:	vadd.i64	q8, q9, q8
   14a58:	adc	r1, r1, #0
   14a5c:	vst1.64	{d16-d17}, [sl :128]
   14a60:	strd	r0, [r6, #136]	; 0x88
   14a64:	ldr	r1, [r8]
   14a68:	mov	r0, #110	; 0x6e
   14a6c:	bl	127b0 <putc@plt>
   14a70:	b	14a90 <UnityPrintLen@@Base+0x290>
   14a74:	ldrd	r0, [r6, #144]	; 0x90
   14a78:	adds	r0, r0, #1
   14a7c:	adc	r1, r1, #0
   14a80:	strd	r0, [r6, #144]	; 0x90
   14a84:	mov	r1, #2
   14a88:	ldrb	r0, [r5]
   14a8c:	bl	14650 <UnityPrintNumberHex@@Base>
   14a90:	ldrd	r0, [r6, #152]	; 0x98
   14a94:	mov	r2, r6
   14a98:	adds	r0, r0, #1
   14a9c:	adc	r1, r1, #0
   14aa0:	strd	r0, [r6, #152]	; 0x98
   14aa4:	mov	r1, #32
   14aa8:	ldrb	r0, [r5, #1]!
   14aac:	cmp	r0, #0
   14ab0:	movwne	r1, #24
   14ab4:	ldr	r1, [r2, r1]!
   14ab8:	adds	r1, r1, #1
   14abc:	str	r1, [r2]
   14ac0:	ldr	r1, [r2, #4]
   14ac4:	adc	r1, r1, #0
   14ac8:	cmp	r0, #0
   14acc:	str	r1, [r2, #4]
   14ad0:	bne	148a8 <UnityPrintLen@@Base+0xa8>
   14ad4:	ldrd	r0, [r6, #160]	; 0xa0
   14ad8:	adds	r0, r0, #1
   14adc:	adc	r1, r1, #0
   14ae0:	strd	r0, [r6, #160]	; 0xa0
   14ae4:	vpop	{d8-d9}
   14ae8:	add	sp, sp, #4
   14aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14af0:	andeq	r0, r0, r1
   14af4:	andeq	r0, r0, r0
   14af8:	andeq	r0, r0, r1
   14afc:	andeq	r0, r0, r0

00014b00 <UnityPrintNumberByStyle@@Base>:
   14b00:	push	{r4, r5, r6, sl, fp, lr}
   14b04:	add	fp, sp, #16
   14b08:	movw	r6, #1104	; 0x450
   14b0c:	movt	r6, #3
   14b10:	ldrd	r2, [r6]
   14b14:	mov	r4, r6
   14b18:	adds	r2, r2, #1
   14b1c:	adc	r3, r3, #0
   14b20:	strd	r2, [r6]
   14b24:	ands	r2, r1, #16
   14b28:	mov	r3, #16
   14b2c:	movwne	r3, #8
   14b30:	ldr	r3, [r4, r3]!
   14b34:	adds	r3, r3, #1
   14b38:	str	r3, [r4]
   14b3c:	ldr	r3, [r4, #4]
   14b40:	adc	r3, r3, #0
   14b44:	cmp	r2, #0
   14b48:	str	r3, [r4, #4]
   14b4c:	beq	14b68 <UnityPrintNumberByStyle@@Base+0x68>
   14b50:	ldrd	r2, [r6, #24]
   14b54:	adds	r2, r2, #1
   14b58:	adc	r3, r3, #0
   14b5c:	strd	r2, [r6, #24]
   14b60:	bl	14c00 <UnityPrintNumber@@Base>
   14b64:	b	14be0 <UnityPrintNumberByStyle@@Base+0xe0>
   14b68:	ands	r2, r1, #32
   14b6c:	mov	r3, #40	; 0x28
   14b70:	mov	r5, r6
   14b74:	and	r1, r1, #15
   14b78:	movwne	r3, #32
   14b7c:	ldr	r3, [r5, r3]!
   14b80:	adds	r3, r3, #1
   14b84:	str	r3, [r5]
   14b88:	ldr	r3, [r5, #4]
   14b8c:	adc	r3, r3, #0
   14b90:	cmp	r2, #0
   14b94:	str	r3, [r5, #4]
   14b98:	beq	14bc8 <UnityPrintNumberByStyle@@Base+0xc8>
   14b9c:	ldrd	r2, [r6, #48]	; 0x30
   14ba0:	adds	r2, r2, #1
   14ba4:	adc	r3, r3, #0
   14ba8:	strd	r2, [r6, #48]	; 0x30
   14bac:	movw	r2, #59160	; 0xe718
   14bb0:	movt	r2, #1
   14bb4:	add	r1, r2, r1, lsl #2
   14bb8:	ldr	r1, [r1, #-4]
   14bbc:	and	r0, r1, r0
   14bc0:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   14bc4:	b	14be0 <UnityPrintNumberByStyle@@Base+0xe0>
   14bc8:	ldrd	r2, [r6, #56]	; 0x38
   14bcc:	lsl	r1, r1, #1
   14bd0:	adds	r2, r2, #1
   14bd4:	adc	r3, r3, #0
   14bd8:	strd	r2, [r6, #56]	; 0x38
   14bdc:	bl	14650 <UnityPrintNumberHex@@Base>
   14be0:	ldrd	r0, [r6, #64]	; 0x40
   14be4:	adds	r0, r0, #1
   14be8:	adc	r1, r1, #0
   14bec:	strd	r0, [r6, #64]	; 0x40
   14bf0:	pop	{r4, r5, r6, sl, fp, pc}
   14bf4:	nop	{0}
   14bf8:	nop	{0}
   14bfc:	nop	{0}

00014c00 <UnityPrintNumber@@Base>:
   14c00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c04:	add	fp, sp, #24
   14c08:	movw	r8, #1184	; 0x4a0
   14c0c:	mov	r9, r0
   14c10:	movt	r8, #3
   14c14:	ldrd	r0, [r8]
   14c18:	adds	r0, r0, #1
   14c1c:	adc	r1, r1, #0
   14c20:	cmp	r9, #0
   14c24:	strd	r0, [r8]
   14c28:	mov	r0, #16
   14c2c:	mov	r1, r8
   14c30:	movwlt	r0, #8
   14c34:	ldr	r0, [r1, r0]!
   14c38:	adds	r0, r0, #1
   14c3c:	str	r0, [r1]
   14c40:	ldr	r0, [r1, #4]
   14c44:	adc	r0, r0, #0
   14c48:	cmn	r9, #1
   14c4c:	str	r0, [r1, #4]
   14c50:	ble	14c68 <UnityPrintNumber@@Base+0x68>
   14c54:	ldrd	r0, [r8, #32]
   14c58:	adds	r0, r0, #1
   14c5c:	adc	r1, r1, #0
   14c60:	strd	r0, [r8, #32]
   14c64:	b	14cac <UnityPrintNumber@@Base+0xac>
   14c68:	movw	r0, #3936	; 0xf60
   14c6c:	add	r1, pc, #428	; 0x1ac
   14c70:	ldrd	r2, [r8, #24]
   14c74:	movt	r0, #3
   14c78:	vld1.64	{d16-d17}, [r1 :128]
   14c7c:	vld1.64	{d18-d19}, [r0 :128]
   14c80:	adds	r2, r2, #1
   14c84:	adc	r3, r3, #0
   14c88:	vadd.i64	q8, q9, q8
   14c8c:	strd	r2, [r8, #24]
   14c90:	vst1.64	{d16-d17}, [r0 :128]
   14c94:	movw	r0, #228	; 0xe4
   14c98:	movt	r0, #3
   14c9c:	ldr	r1, [r0]
   14ca0:	mov	r0, #45	; 0x2d
   14ca4:	bl	127b0 <putc@plt>
   14ca8:	rsb	r9, r9, #0
   14cac:	ldrd	r0, [r8, #40]	; 0x28
   14cb0:	mov	r6, #1
   14cb4:	adds	r0, r0, #1
   14cb8:	adc	r1, r1, #0
   14cbc:	cmp	r9, #9
   14cc0:	strd	r0, [r8, #40]	; 0x28
   14cc4:	mov	r0, #56	; 0x38
   14cc8:	mov	r1, r8
   14ccc:	movwhi	r0, #48	; 0x30
   14cd0:	ldr	r0, [r1, r0]!
   14cd4:	adds	r0, r0, #1
   14cd8:	str	r0, [r1]
   14cdc:	ldr	r0, [r1, #4]
   14ce0:	adc	r0, r0, #0
   14ce4:	cmp	r9, #10
   14ce8:	str	r0, [r1, #4]
   14cec:	bcc	14d70 <UnityPrintNumber@@Base+0x170>
   14cf0:	mov	r6, #1
   14cf4:	add	r0, r6, r6, lsl #2
   14cf8:	mov	r1, #72	; 0x48
   14cfc:	mov	r2, r8
   14d00:	cmp	r6, r0, lsl #1
   14d04:	movwcc	r1, #64	; 0x40
   14d08:	ldr	r1, [r2, r1]!
   14d0c:	adds	r1, r1, #1
   14d10:	str	r1, [r2]
   14d14:	ldr	r1, [r2, #4]
   14d18:	adc	r1, r1, #0
   14d1c:	cmp	r6, r0, lsl #1
   14d20:	str	r1, [r2, #4]
   14d24:	bcs	14d70 <UnityPrintNumber@@Base+0x170>
   14d28:	lsl	r6, r0, #1
   14d2c:	ldrd	r0, [r8, #80]	; 0x50
   14d30:	mov	r2, r8
   14d34:	adds	r0, r0, #1
   14d38:	adc	r1, r1, #0
   14d3c:	strd	r0, [r8, #80]	; 0x50
   14d40:	udiv	r0, r9, r6
   14d44:	mov	r1, #56	; 0x38
   14d48:	cmp	r0, #9
   14d4c:	movwhi	r1, #48	; 0x30
   14d50:	ldr	r1, [r2, r1]!
   14d54:	adds	r1, r1, #1
   14d58:	str	r1, [r2]
   14d5c:	ldr	r1, [r2, #4]
   14d60:	adc	r1, r1, #0
   14d64:	cmp	r0, #9
   14d68:	str	r1, [r2, #4]
   14d6c:	bhi	14cf4 <UnityPrintNumber@@Base+0xf4>
   14d70:	ldrd	r0, [r8, #88]	; 0x58
   14d74:	movw	r7, #3936	; 0xf60
   14d78:	movw	r5, #52429	; 0xcccd
   14d7c:	movw	r4, #228	; 0xe4
   14d80:	movt	r7, #3
   14d84:	movt	r5, #52428	; 0xcccc
   14d88:	movt	r4, #3
   14d8c:	adds	r0, r0, #1
   14d90:	adc	r1, r1, #0
   14d94:	strd	r0, [r8, #88]	; 0x58
   14d98:	add	r0, pc, #128	; 0x80
   14d9c:	vld1.64	{d18-d19}, [r7 :128]
   14da0:	vld1.64	{d16-d17}, [r0 :128]
   14da4:	udiv	r0, r9, r6
   14da8:	umull	r1, r2, r0, r5
   14dac:	lsr	r1, r2, #3
   14db0:	add	r1, r1, r1, lsl #2
   14db4:	sub	r0, r0, r1, lsl #1
   14db8:	ldr	r1, [r4]
   14dbc:	vadd.i64	q8, q9, q8
   14dc0:	orr	r0, r0, #48	; 0x30
   14dc4:	vst1.64	{d16-d17}, [r7 :128]
   14dc8:	bl	127b0 <putc@plt>
   14dcc:	cmp	r6, #9
   14dd0:	mov	r0, #104	; 0x68
   14dd4:	mov	r1, r8
   14dd8:	movwhi	r0, #96	; 0x60
   14ddc:	ldr	r0, [r1, r0]!
   14de0:	adds	r0, r0, #1
   14de4:	str	r0, [r1]
   14de8:	ldr	r0, [r1, #4]
   14dec:	adc	r0, r0, #0
   14df0:	cmp	r6, #9
   14df4:	str	r0, [r1, #4]
   14df8:	umull	r0, r1, r6, r5
   14dfc:	lsr	r0, r1, #3
   14e00:	mov	r6, r0
   14e04:	bhi	14d98 <UnityPrintNumber@@Base+0x198>
   14e08:	ldrd	r0, [r8, #112]	; 0x70
   14e0c:	adds	r0, r0, #1
   14e10:	adc	r1, r1, #0
   14e14:	strd	r0, [r8, #112]	; 0x70
   14e18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e1c:	nop	{0}
   14e20:	andeq	r0, r0, r1
   14e24:	andeq	r0, r0, r0
   14e28:	andeq	r0, r0, r1
   14e2c:	andeq	r0, r0, r0

00014e30 <UnityPrintNumberUnsigned@@Base>:
   14e30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e34:	add	fp, sp, #24
   14e38:	movw	r8, #1312	; 0x520
   14e3c:	mov	r4, r0
   14e40:	add	r0, pc, #360	; 0x168
   14e44:	mov	r6, #1
   14e48:	movt	r8, #3
   14e4c:	vld1.64	{d16-d17}, [r0 :128]
   14e50:	mov	r0, #24
   14e54:	cmp	r4, #9
   14e58:	vld1.64	{d18-d19}, [r8 :128]
   14e5c:	movwhi	r0, #16
   14e60:	mov	r1, r8
   14e64:	vadd.i64	q8, q9, q8
   14e68:	vst1.64	{d16-d17}, [r1 :128], r0
   14e6c:	ldm	r1, {r0, r3}
   14e70:	adds	r0, r0, #1
   14e74:	adc	r3, r3, #0
   14e78:	cmp	r4, #10
   14e7c:	stm	r1, {r0, r3}
   14e80:	bcc	14f04 <UnityPrintNumberUnsigned@@Base+0xd4>
   14e84:	mov	r6, #1
   14e88:	add	r0, r6, r6, lsl #2
   14e8c:	mov	r1, #40	; 0x28
   14e90:	mov	r2, r8
   14e94:	cmp	r6, r0, lsl #1
   14e98:	movwcc	r1, #32
   14e9c:	ldr	r1, [r2, r1]!
   14ea0:	adds	r1, r1, #1
   14ea4:	str	r1, [r2]
   14ea8:	ldr	r1, [r2, #4]
   14eac:	adc	r1, r1, #0
   14eb0:	cmp	r6, r0, lsl #1
   14eb4:	str	r1, [r2, #4]
   14eb8:	bcs	14f04 <UnityPrintNumberUnsigned@@Base+0xd4>
   14ebc:	lsl	r6, r0, #1
   14ec0:	ldrd	r0, [r8, #48]	; 0x30
   14ec4:	mov	r2, r8
   14ec8:	adds	r0, r0, #1
   14ecc:	adc	r1, r1, #0
   14ed0:	strd	r0, [r8, #48]	; 0x30
   14ed4:	udiv	r0, r4, r6
   14ed8:	mov	r1, #24
   14edc:	cmp	r0, #9
   14ee0:	movwhi	r1, #16
   14ee4:	ldr	r1, [r2, r1]!
   14ee8:	adds	r1, r1, #1
   14eec:	str	r1, [r2]
   14ef0:	ldr	r1, [r2, #4]
   14ef4:	adc	r1, r1, #0
   14ef8:	cmp	r0, #9
   14efc:	str	r1, [r2, #4]
   14f00:	bhi	14e88 <UnityPrintNumberUnsigned@@Base+0x58>
   14f04:	ldrd	r0, [r8, #56]	; 0x38
   14f08:	movw	r7, #3936	; 0xf60
   14f0c:	movw	r5, #52429	; 0xcccd
   14f10:	movw	r9, #228	; 0xe4
   14f14:	movt	r7, #3
   14f18:	movt	r5, #52428	; 0xcccc
   14f1c:	movt	r9, #3
   14f20:	adds	r0, r0, #1
   14f24:	adc	r1, r1, #0
   14f28:	strd	r0, [r8, #56]	; 0x38
   14f2c:	add	r0, pc, #124	; 0x7c
   14f30:	vld1.64	{d18-d19}, [r7 :128]
   14f34:	vld1.64	{d16-d17}, [r0 :128]
   14f38:	udiv	r0, r4, r6
   14f3c:	umull	r1, r2, r0, r5
   14f40:	lsr	r1, r2, #3
   14f44:	add	r1, r1, r1, lsl #2
   14f48:	sub	r0, r0, r1, lsl #1
   14f4c:	ldr	r1, [r9]
   14f50:	vadd.i64	q8, q9, q8
   14f54:	orr	r0, r0, #48	; 0x30
   14f58:	vst1.64	{d16-d17}, [r7 :128]
   14f5c:	bl	127b0 <putc@plt>
   14f60:	cmp	r6, #9
   14f64:	mov	r0, #72	; 0x48
   14f68:	mov	r1, r8
   14f6c:	movwhi	r0, #64	; 0x40
   14f70:	ldr	r0, [r1, r0]!
   14f74:	adds	r0, r0, #1
   14f78:	str	r0, [r1]
   14f7c:	ldr	r0, [r1, #4]
   14f80:	adc	r0, r0, #0
   14f84:	cmp	r6, #9
   14f88:	str	r0, [r1, #4]
   14f8c:	umull	r0, r1, r6, r5
   14f90:	lsr	r0, r1, #3
   14f94:	mov	r6, r0
   14f98:	bhi	14f2c <UnityPrintNumberUnsigned@@Base+0xfc>
   14f9c:	ldrd	r0, [r8, #80]	; 0x50
   14fa0:	adds	r0, r0, #1
   14fa4:	adc	r1, r1, #0
   14fa8:	strd	r0, [r8, #80]	; 0x50
   14fac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fb0:	andeq	r0, r0, r1
   14fb4:	andeq	r0, r0, r0
   14fb8:	andeq	r0, r0, r1
   14fbc:	andeq	r0, r0, r0

00014fc0 <UnityPrintMask@@Base>:
   14fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fc4:	add	fp, sp, #28
   14fc8:	sub	sp, sp, #4
   14fcc:	movw	r6, #1408	; 0x580
   14fd0:	mov	r9, r0
   14fd4:	add	r0, pc, #404	; 0x194
   14fd8:	movw	r5, #3936	; 0xf60
   14fdc:	movw	sl, #228	; 0xe4
   14fe0:	mov	r8, r1
   14fe4:	mov	r7, #-2147483648	; 0x80000000
   14fe8:	mov	r4, #1
   14fec:	movt	r6, #3
   14ff0:	vld1.64	{d16-d17}, [r0 :128]
   14ff4:	movt	r5, #3
   14ff8:	movt	sl, #3
   14ffc:	vld1.64	{d18-d19}, [r6 :128]
   15000:	mov	r0, r6
   15004:	vadd.i64	q8, q9, q8
   15008:	vst1.64	{d16-d17}, [r0 :128]!
   1500c:	ldrd	r2, [r0]
   15010:	adds	r2, r2, #1
   15014:	adc	r3, r3, #0
   15018:	strd	r2, [r0]
   1501c:	ands	r0, r7, r9
   15020:	mov	r1, #40	; 0x28
   15024:	mov	r2, r6
   15028:	movwne	r1, #32
   1502c:	ldr	r1, [r2, r1]!
   15030:	adds	r1, r1, #1
   15034:	str	r1, [r2]
   15038:	ldr	r1, [r2, #4]
   1503c:	adc	r1, r1, #0
   15040:	cmp	r0, #0
   15044:	str	r1, [r2, #4]
   15048:	beq	150ac <UnityPrintMask@@Base+0xec>
   1504c:	ands	r0, r7, r8
   15050:	mov	r1, #56	; 0x38
   15054:	mov	r2, r6
   15058:	movwne	r1, #48	; 0x30
   1505c:	ldr	r1, [r2, r1]!
   15060:	adds	r1, r1, #1
   15064:	str	r1, [r2]
   15068:	ldr	r1, [r2, #4]
   1506c:	adc	r1, r1, #0
   15070:	cmp	r0, #0
   15074:	str	r1, [r2, #4]
   15078:	beq	150dc <UnityPrintMask@@Base+0x11c>
   1507c:	add	r0, pc, #236	; 0xec
   15080:	vld1.64	{d18-d19}, [r5 :128]
   15084:	vld1.64	{d16-d17}, [r0 :128]
   15088:	ldrd	r0, [r6, #64]	; 0x40
   1508c:	adds	r0, r0, #1
   15090:	vadd.i64	q8, q9, q8
   15094:	adc	r1, r1, #0
   15098:	vst1.64	{d16-d17}, [r5 :128]
   1509c:	strd	r0, [r6, #64]	; 0x40
   150a0:	ldr	r1, [sl]
   150a4:	mov	r0, #49	; 0x31
   150a8:	b	15108 <UnityPrintMask@@Base+0x148>
   150ac:	add	r0, pc, #188	; 0xbc
   150b0:	vld1.64	{d18-d19}, [r5 :128]
   150b4:	vld1.64	{d16-d17}, [r0 :128]
   150b8:	ldrd	r0, [r6, #80]	; 0x50
   150bc:	adds	r0, r0, #1
   150c0:	vadd.i64	q8, q9, q8
   150c4:	adc	r1, r1, #0
   150c8:	vst1.64	{d16-d17}, [r5 :128]
   150cc:	strd	r0, [r6, #80]	; 0x50
   150d0:	ldr	r1, [sl]
   150d4:	mov	r0, #88	; 0x58
   150d8:	b	15108 <UnityPrintMask@@Base+0x148>
   150dc:	add	r0, pc, #140	; 0x8c
   150e0:	vld1.64	{d18-d19}, [r5 :128]
   150e4:	vld1.64	{d16-d17}, [r0 :128]
   150e8:	ldrd	r0, [r6, #72]	; 0x48
   150ec:	adds	r0, r0, #1
   150f0:	vadd.i64	q8, q9, q8
   150f4:	adc	r1, r1, #0
   150f8:	vst1.64	{d16-d17}, [r5 :128]
   150fc:	strd	r0, [r6, #72]	; 0x48
   15100:	ldr	r1, [sl]
   15104:	mov	r0, #48	; 0x30
   15108:	bl	127b0 <putc@plt>
   1510c:	ldrd	r0, [r6, #88]	; 0x58
   15110:	lsr	r7, r7, #1
   15114:	adds	r0, r0, #1
   15118:	adc	r1, r1, #0
   1511c:	cmp	r4, #32
   15120:	add	r4, r4, #1
   15124:	strd	r0, [r6, #88]	; 0x58
   15128:	mov	r0, #24
   1512c:	mov	r1, r6
   15130:	movwcc	r0, #16
   15134:	ldr	r0, [r1, r0]!
   15138:	adds	r0, r0, #1
   1513c:	str	r0, [r1]
   15140:	ldr	r0, [r1, #4]
   15144:	adc	r0, r0, #0
   15148:	cmp	r4, #33	; 0x21
   1514c:	str	r0, [r1, #4]
   15150:	bne	1501c <UnityPrintMask@@Base+0x5c>
   15154:	ldrd	r0, [r6, #96]	; 0x60
   15158:	adds	r0, r0, #1
   1515c:	adc	r1, r1, #0
   15160:	strd	r0, [r6, #96]	; 0x60
   15164:	sub	sp, fp, #28
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1516c:	nop	{0}
   15170:	andeq	r0, r0, r1
   15174:	andeq	r0, r0, r0
   15178:	andeq	r0, r0, r1
   1517c:	andeq	r0, r0, r0

00015180 <UnityPrintFail@@Base>:
   15180:	movw	r0, #3936	; 0xf60
   15184:	add	r1, pc, #36	; 0x24
   15188:	movt	r0, #3
   1518c:	vld1.64	{d16-d17}, [r1 :128]
   15190:	add	r0, r0, #16
   15194:	vld1.64	{d18-d19}, [r0 :128]
   15198:	vadd.i64	q8, q9, q8
   1519c:	vst1.64	{d16-d17}, [r0 :128]
   151a0:	movw	r0, #58712	; 0xe558
   151a4:	movt	r0, #1
   151a8:	b	14390 <UnityPrint@@Base>
   151ac:	nop	{0}
   151b0:	andeq	r0, r0, r1
   151b4:	andeq	r0, r0, r0
   151b8:	andeq	r0, r0, r1
   151bc:	andeq	r0, r0, r0

000151c0 <UnityPrintOk@@Base>:
   151c0:	movw	r0, #3936	; 0xf60
   151c4:	add	r1, pc, #36	; 0x24
   151c8:	movt	r0, #3
   151cc:	vld1.64	{d16-d17}, [r1 :128]
   151d0:	add	r0, r0, #32
   151d4:	vld1.64	{d18-d19}, [r0 :128]
   151d8:	vadd.i64	q8, q9, q8
   151dc:	vst1.64	{d16-d17}, [r0 :128]
   151e0:	movw	r0, #58704	; 0xe550
   151e4:	movt	r0, #1
   151e8:	b	14390 <UnityPrint@@Base>
   151ec:	nop	{0}
   151f0:	andeq	r0, r0, r1
   151f4:	andeq	r0, r0, r0
   151f8:	andeq	r0, r0, r1
   151fc:	andeq	r0, r0, r0

00015200 <UnityConcludeTest@@Base>:
   15200:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15204:	add	fp, sp, #24
   15208:	vpush	{d8-d9}
   1520c:	movw	r5, #1520	; 0x5f0
   15210:	movw	r6, #5952	; 0x1740
   15214:	movt	r5, #3
   15218:	movt	r6, #3
   1521c:	ldrd	r0, [r5]
   15220:	mov	r2, r5
   15224:	adds	r0, r0, #1
   15228:	adc	r1, r1, #0
   1522c:	strd	r0, [r5]
   15230:	ldr	r0, [r6, #36]	; 0x24
   15234:	mov	r1, #16
   15238:	cmp	r0, #0
   1523c:	movwne	r1, #8
   15240:	ldr	r1, [r2, r1]!
   15244:	adds	r1, r1, #1
   15248:	str	r1, [r2]
   1524c:	ldr	r1, [r2, #4]
   15250:	adc	r1, r1, #0
   15254:	cmp	r0, #0
   15258:	str	r1, [r2, #4]
   1525c:	beq	15280 <UnityConcludeTest@@Base+0x80>
   15260:	ldrd	r0, [r5, #24]
   15264:	ldr	r2, [r6, #28]
   15268:	adds	r0, r0, #1
   1526c:	add	r2, r2, #1
   15270:	adc	r1, r1, #0
   15274:	str	r2, [r6, #28]
   15278:	strd	r0, [r5, #24]
   1527c:	b	1537c <UnityConcludeTest@@Base+0x17c>
   15280:	ldr	r0, [r6, #32]
   15284:	mov	r1, #40	; 0x28
   15288:	mov	r2, r5
   1528c:	cmp	r0, #0
   15290:	movwne	r1, #32
   15294:	ldr	r1, [r2, r1]!
   15298:	adds	r1, r1, #1
   1529c:	str	r1, [r2]
   152a0:	ldr	r1, [r2, #4]
   152a4:	adc	r1, r1, #0
   152a8:	cmp	r0, #0
   152ac:	str	r1, [r2, #4]
   152b0:	beq	152d4 <UnityConcludeTest@@Base+0xd4>
   152b4:	ldrd	r0, [r5, #56]	; 0x38
   152b8:	ldr	r2, [r6, #24]
   152bc:	adds	r0, r0, #1
   152c0:	add	r2, r2, #1
   152c4:	adc	r1, r1, #0
   152c8:	str	r2, [r6, #24]
   152cc:	strd	r0, [r5, #56]	; 0x38
   152d0:	b	1537c <UnityConcludeTest@@Base+0x17c>
   152d4:	movw	r7, #3936	; 0xf60
   152d8:	add	r1, pc, #240	; 0xf0
   152dc:	ldrd	r2, [r5, #48]	; 0x30
   152e0:	ldr	r4, [r6, #16]
   152e4:	movt	r7, #3
   152e8:	vld1.64	{d8-d9}, [r1 :128]
   152ec:	add	r0, r7, #48	; 0x30
   152f0:	vld1.64	{d16-d17}, [r0 :128]
   152f4:	adds	r2, r2, #1
   152f8:	adc	r3, r3, #0
   152fc:	strd	r2, [r5, #48]	; 0x30
   15300:	vadd.i64	q8, q8, q4
   15304:	vst1.64	{d16-d17}, [r0 :128]
   15308:	ldr	r0, [r6]
   1530c:	bl	14390 <UnityPrint@@Base>
   15310:	movw	r8, #228	; 0xe4
   15314:	vld1.64	{d16-d17}, [r7 :128]
   15318:	mov	r0, #58	; 0x3a
   1531c:	movt	r8, #3
   15320:	ldr	r1, [r8]
   15324:	vadd.i64	q8, q8, q4
   15328:	vst1.64	{d16-d17}, [r7 :128]
   1532c:	bl	127b0 <putc@plt>
   15330:	mov	r0, r4
   15334:	bl	14c00 <UnityPrintNumber@@Base>
   15338:	vld1.64	{d16-d17}, [r7 :128]
   1533c:	ldr	r1, [r8]
   15340:	mov	r0, #58	; 0x3a
   15344:	vadd.i64	q8, q8, q4
   15348:	vst1.64	{d16-d17}, [r7 :128]
   1534c:	bl	127b0 <putc@plt>
   15350:	ldr	r0, [r6, #4]
   15354:	bl	14390 <UnityPrint@@Base>
   15358:	vld1.64	{d16-d17}, [r7 :128]
   1535c:	ldr	r1, [r8]
   15360:	mov	r0, #58	; 0x3a
   15364:	vadd.i64	q8, q8, q4
   15368:	vst1.64	{d16-d17}, [r7 :128]
   1536c:	bl	127b0 <putc@plt>
   15370:	movw	r0, #58707	; 0xe553
   15374:	movt	r0, #1
   15378:	bl	14390 <UnityPrint@@Base>
   1537c:	movw	r0, #3936	; 0xf60
   15380:	add	r1, pc, #72	; 0x48
   15384:	ldrd	r2, [r5, #64]	; 0x40
   15388:	movt	r0, #3
   1538c:	vld1.64	{d16-d17}, [r1 :128]
   15390:	mov	r1, #0
   15394:	vld1.64	{d18-d19}, [r0 :128]
   15398:	str	r1, [r6, #32]
   1539c:	str	r1, [r6, #36]	; 0x24
   153a0:	adds	r2, r2, #1
   153a4:	adc	r3, r3, #0
   153a8:	vadd.i64	q8, q9, q8
   153ac:	strd	r2, [r5, #64]	; 0x40
   153b0:	vst1.64	{d16-d17}, [r0 :128]
   153b4:	movw	r0, #228	; 0xe4
   153b8:	movt	r0, #3
   153bc:	ldr	r1, [r0]
   153c0:	mov	r0, #10
   153c4:	vpop	{d8-d9}
   153c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153cc:	b	127b0 <putc@plt>
   153d0:	andeq	r0, r0, r1
   153d4:	andeq	r0, r0, r0
   153d8:	andeq	r0, r0, r1
   153dc:	andeq	r0, r0, r0

000153e0 <UnityAssertBits@@Base>:
   153e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153e4:	add	fp, sp, #24
   153e8:	mov	r6, r0
   153ec:	movw	r0, #4048	; 0xfd0
   153f0:	mov	r7, r1
   153f4:	mov	r5, r2
   153f8:	movw	r4, #5952	; 0x1740
   153fc:	mov	r8, r3
   15400:	movt	r0, #3
   15404:	movt	r4, #3
   15408:	mov	r1, r0
   1540c:	ldr	r2, [r1, #16]!
   15410:	adds	r2, r2, #1
   15414:	str	r2, [r1]
   15418:	ldr	r2, [r1, #4]
   1541c:	adc	r2, r2, #0
   15420:	str	r2, [r1, #4]
   15424:	ldrd	r2, [r4, #32]
   15428:	orrs	r2, r3, r2
   1542c:	mov	r3, #16
   15430:	movwne	r3, #8
   15434:	ldr	r3, [r1, r3]!
   15438:	adds	r3, r3, #1
   1543c:	str	r3, [r1]
   15440:	ldr	r3, [r1, #4]
   15444:	adc	r3, r3, #0
   15448:	cmp	r2, #0
   1544c:	str	r3, [r1, #4]
   15450:	bne	15488 <UnityAssertBits@@Base+0xa8>
   15454:	eor	r1, r5, r7
   15458:	mov	r2, #32
   1545c:	ands	r1, r1, r6
   15460:	movwne	r2, #24
   15464:	add	r2, r0, r2
   15468:	ldr	r3, [r2, #16]
   1546c:	ldr	r9, [r2, #20]
   15470:	adds	r3, r3, #1
   15474:	adc	r9, r9, #0
   15478:	cmp	r1, #0
   1547c:	str	r3, [r2, #16]
   15480:	str	r9, [r2, #20]
   15484:	bne	1549c <UnityAssertBits@@Base+0xbc>
   15488:	ldrd	r2, [r0, #56]	; 0x38
   1548c:	adds	r2, r2, #1
   15490:	adc	r3, r3, #0
   15494:	strd	r2, [r0, #56]	; 0x38
   15498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1549c:	ldr	r0, [fp, #8]
   154a0:	bl	154f0 <UnityAssertBits@@Base+0x110>
   154a4:	movw	r0, #58732	; 0xe56c
   154a8:	movt	r0, #1
   154ac:	bl	14390 <UnityPrint@@Base>
   154b0:	mov	r0, r6
   154b4:	mov	r1, r7
   154b8:	bl	14fc0 <UnityPrintMask@@Base>
   154bc:	movw	r0, #58743	; 0xe577
   154c0:	movt	r0, #1
   154c4:	bl	14390 <UnityPrint@@Base>
   154c8:	mov	r0, r6
   154cc:	mov	r1, r5
   154d0:	bl	14fc0 <UnityPrintMask@@Base>
   154d4:	mov	r0, r8
   154d8:	bl	155e0 <UnityAssertBits@@Base+0x200>
   154dc:	mov	r0, #1
   154e0:	mov	r1, #1
   154e4:	str	r0, [r4, #32]
   154e8:	add	r0, r4, #40	; 0x28
   154ec:	bl	1260c <longjmp@plt>
   154f0:	push	{r4, r5, r6, r7, fp, lr}
   154f4:	add	fp, sp, #16
   154f8:	vpush	{d8-d9}
   154fc:	movw	r5, #3936	; 0xf60
   15500:	mov	r4, r0
   15504:	add	r0, pc, #196	; 0xc4
   15508:	movw	r7, #5952	; 0x1740
   1550c:	movt	r5, #3
   15510:	vld1.64	{d8-d9}, [r0 :128]
   15514:	movt	r7, #3
   15518:	add	r0, r5, #48	; 0x30
   1551c:	add	r1, r5, #64	; 0x40
   15520:	vld1.64	{d16-d17}, [r1 :128]
   15524:	vld1.64	{d18-d19}, [r0 :128]
   15528:	vadd.i64	q8, q8, q4
   1552c:	vadd.i64	q9, q9, q4
   15530:	vst1.64	{d16-d17}, [r1 :128]
   15534:	vst1.64	{d18-d19}, [r0 :128]
   15538:	ldr	r0, [r7]
   1553c:	bl	14390 <UnityPrint@@Base>
   15540:	movw	r6, #228	; 0xe4
   15544:	vld1.64	{d16-d17}, [r5 :128]
   15548:	mov	r0, #58	; 0x3a
   1554c:	movt	r6, #3
   15550:	ldr	r1, [r6]
   15554:	vadd.i64	q8, q8, q4
   15558:	vst1.64	{d16-d17}, [r5 :128]
   1555c:	bl	127b0 <putc@plt>
   15560:	mov	r0, r4
   15564:	bl	14c00 <UnityPrintNumber@@Base>
   15568:	vld1.64	{d16-d17}, [r5 :128]
   1556c:	ldr	r1, [r6]
   15570:	mov	r0, #58	; 0x3a
   15574:	vadd.i64	q8, q8, q4
   15578:	vst1.64	{d16-d17}, [r5 :128]
   1557c:	bl	127b0 <putc@plt>
   15580:	ldr	r0, [r7, #4]
   15584:	bl	14390 <UnityPrint@@Base>
   15588:	vld1.64	{d16-d17}, [r5 :128]
   1558c:	ldr	r1, [r6]
   15590:	mov	r0, #58	; 0x3a
   15594:	vadd.i64	q8, q8, q4
   15598:	vst1.64	{d16-d17}, [r5 :128]
   1559c:	bl	127b0 <putc@plt>
   155a0:	movw	r0, #58712	; 0xe558
   155a4:	movt	r0, #1
   155a8:	bl	14390 <UnityPrint@@Base>
   155ac:	vld1.64	{d16-d17}, [r5 :128]
   155b0:	ldr	r1, [r6]
   155b4:	mov	r0, #58	; 0x3a
   155b8:	vadd.i64	q8, q8, q4
   155bc:	vst1.64	{d16-d17}, [r5 :128]
   155c0:	vpop	{d8-d9}
   155c4:	pop	{r4, r5, r6, r7, fp, lr}
   155c8:	b	127b0 <putc@plt>
   155cc:	nop	{0}
   155d0:	andeq	r0, r0, r1
   155d4:	andeq	r0, r0, r0
   155d8:	andeq	r0, r0, r1
   155dc:	andeq	r0, r0, r0
   155e0:	push	{r4, r5, r6, sl, fp, lr}
   155e4:	add	fp, sp, #16
   155e8:	movw	r5, #1600	; 0x640
   155ec:	mov	r4, r0
   155f0:	movt	r5, #3
   155f4:	ldrd	r0, [r5]
   155f8:	adds	r0, r0, #1
   155fc:	adc	r1, r1, #0
   15600:	cmp	r4, #0
   15604:	strd	r0, [r5]
   15608:	mov	r0, #16
   1560c:	mov	r1, r5
   15610:	movwne	r0, #8
   15614:	ldr	r0, [r1, r0]!
   15618:	adds	r0, r0, #1
   1561c:	str	r0, [r1]
   15620:	ldr	r0, [r1, #4]
   15624:	adc	r0, r0, #0
   15628:	cmp	r4, #0
   1562c:	str	r0, [r1, #4]
   15630:	beq	1571c <UnityAssertBits@@Base+0x33c>
   15634:	movw	r0, #58729	; 0xe569
   15638:	movt	r0, #1
   1563c:	bl	14390 <UnityPrint@@Base>
   15640:	movw	r6, #5952	; 0x1740
   15644:	mov	r1, #32
   15648:	mov	r2, r5
   1564c:	movt	r6, #3
   15650:	ldr	r0, [r6, #8]
   15654:	cmp	r0, #0
   15658:	movwne	r1, #24
   1565c:	ldr	r1, [r2, r1]!
   15660:	adds	r1, r1, #1
   15664:	str	r1, [r2]
   15668:	ldr	r1, [r2, #4]
   1566c:	adc	r1, r1, #0
   15670:	cmp	r0, #0
   15674:	str	r1, [r2, #4]
   15678:	beq	15704 <UnityAssertBits@@Base+0x324>
   1567c:	movw	r0, #59137	; 0xe701
   15680:	movt	r0, #1
   15684:	bl	14390 <UnityPrint@@Base>
   15688:	ldr	r0, [r6, #8]
   1568c:	bl	14390 <UnityPrint@@Base>
   15690:	ldr	r0, [r6, #12]
   15694:	mov	r1, #48	; 0x30
   15698:	mov	r2, r5
   1569c:	cmp	r0, #0
   156a0:	movwne	r1, #40	; 0x28
   156a4:	ldr	r1, [r2, r1]!
   156a8:	adds	r1, r1, #1
   156ac:	str	r1, [r2]
   156b0:	ldr	r1, [r2, #4]
   156b4:	adc	r1, r1, #0
   156b8:	cmp	r0, #0
   156bc:	str	r1, [r2, #4]
   156c0:	beq	156e8 <UnityAssertBits@@Base+0x308>
   156c4:	ldrd	r0, [r5, #56]	; 0x38
   156c8:	adds	r0, r0, #1
   156cc:	adc	r1, r1, #0
   156d0:	strd	r0, [r5, #56]	; 0x38
   156d4:	movw	r0, #59147	; 0xe70b
   156d8:	movt	r0, #1
   156dc:	bl	14390 <UnityPrint@@Base>
   156e0:	ldr	r0, [r6, #12]
   156e4:	bl	14390 <UnityPrint@@Base>
   156e8:	ldrd	r0, [r5, #64]	; 0x40
   156ec:	adds	r0, r0, #1
   156f0:	adc	r1, r1, #0
   156f4:	strd	r0, [r5, #64]	; 0x40
   156f8:	movw	r0, #58729	; 0xe569
   156fc:	movt	r0, #1
   15700:	bl	14390 <UnityPrint@@Base>
   15704:	ldrd	r0, [r5, #72]	; 0x48
   15708:	adds	r0, r0, #1
   1570c:	adc	r1, r1, #0
   15710:	strd	r0, [r5, #72]	; 0x48
   15714:	mov	r0, r4
   15718:	bl	14390 <UnityPrint@@Base>
   1571c:	ldrd	r0, [r5, #80]	; 0x50
   15720:	adds	r0, r0, #1
   15724:	adc	r1, r1, #0
   15728:	strd	r0, [r5, #80]	; 0x50
   1572c:	pop	{r4, r5, r6, sl, fp, pc}

00015730 <UnityAssertEqualNumber@@Base>:
   15730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15734:	add	fp, sp, #28
   15738:	sub	sp, sp, #4
   1573c:	mov	r6, r0
   15740:	movw	r0, #4048	; 0xfd0
   15744:	mov	r5, r1
   15748:	mov	sl, r2
   1574c:	movw	r7, #5952	; 0x1740
   15750:	mov	r4, #16
   15754:	movt	r0, #3
   15758:	movt	r7, #3
   1575c:	mov	r1, r0
   15760:	ldr	r2, [r1, #64]!	; 0x40
   15764:	adds	r2, r2, #1
   15768:	str	r2, [r1]
   1576c:	ldr	r2, [r1, #4]
   15770:	adc	r2, r2, #0
   15774:	str	r2, [r1, #4]
   15778:	ldr	r2, [r7, #32]
   1577c:	ldr	r9, [r7, #36]	; 0x24
   15780:	orrs	r2, r9, r2
   15784:	movwne	r4, #8
   15788:	ldr	r4, [r1, r4]!
   1578c:	adds	r4, r4, #1
   15790:	str	r4, [r1]
   15794:	ldr	r4, [r1, #4]
   15798:	adc	r4, r4, #0
   1579c:	cmp	r2, #0
   157a0:	str	r4, [r1, #4]
   157a4:	bne	157d8 <UnityAssertEqualNumber@@Base+0xa8>
   157a8:	mov	r1, #32
   157ac:	cmp	r6, r5
   157b0:	movwne	r1, #24
   157b4:	add	r1, r0, r1
   157b8:	ldr	r2, [r1, #64]	; 0x40
   157bc:	ldr	r9, [r1, #68]	; 0x44
   157c0:	adds	r2, r2, #1
   157c4:	adc	r9, r9, #0
   157c8:	cmp	r6, r5
   157cc:	str	r2, [r1, #64]	; 0x40
   157d0:	str	r9, [r1, #68]	; 0x44
   157d4:	bne	157f0 <UnityAssertEqualNumber@@Base+0xc0>
   157d8:	ldrd	r2, [r0, #104]	; 0x68
   157dc:	adds	r2, r2, #1
   157e0:	adc	r3, r3, #0
   157e4:	strd	r2, [r0, #104]	; 0x68
   157e8:	sub	sp, fp, #28
   157ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f0:	ldr	r8, [fp, #8]
   157f4:	mov	r0, r3
   157f8:	bl	154f0 <UnityAssertBits@@Base+0x110>
   157fc:	movw	r0, #58732	; 0xe56c
   15800:	movt	r0, #1
   15804:	bl	14390 <UnityPrint@@Base>
   15808:	mov	r0, r6
   1580c:	mov	r1, r8
   15810:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   15814:	movw	r0, #58743	; 0xe577
   15818:	movt	r0, #1
   1581c:	bl	14390 <UnityPrint@@Base>
   15820:	mov	r0, r5
   15824:	mov	r1, r8
   15828:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   1582c:	mov	r0, sl
   15830:	bl	155e0 <UnityAssertBits@@Base+0x200>
   15834:	mov	r0, #1
   15838:	mov	r1, #1
   1583c:	str	r0, [r7, #32]
   15840:	add	r0, r7, #40	; 0x28
   15844:	bl	1260c <longjmp@plt>
   15848:	nop	{0}
   1584c:	nop	{0}

00015850 <UnityAssertEqualIntArray@@Base>:
   15850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15854:	add	fp, sp, #28
   15858:	sub	sp, sp, #4
   1585c:	movw	r9, #1696	; 0x6a0
   15860:	mov	r5, r1
   15864:	mov	r6, r0
   15868:	movw	r4, #5952	; 0x1740
   1586c:	mov	r8, r2
   15870:	movt	r9, #3
   15874:	movt	r4, #3
   15878:	ldrd	r0, [r9]
   1587c:	mov	r2, r9
   15880:	adds	r0, r0, #1
   15884:	adc	r1, r1, #0
   15888:	strd	r0, [r9]
   1588c:	ldrd	r0, [r4, #32]
   15890:	orrs	r0, r1, r0
   15894:	mov	r1, #16
   15898:	movwne	r1, #8
   1589c:	ldr	r1, [r2, r1]!
   158a0:	adds	r1, r1, #1
   158a4:	str	r1, [r2]
   158a8:	ldr	r1, [r2, #4]
   158ac:	adc	r1, r1, #0
   158b0:	cmp	r0, #0
   158b4:	str	r1, [r2, #4]
   158b8:	beq	158d0 <UnityAssertEqualIntArray@@Base+0x80>
   158bc:	ldrd	r0, [r9, #24]
   158c0:	adds	r0, r0, #1
   158c4:	adc	r1, r1, #0
   158c8:	strd	r0, [r9, #24]
   158cc:	b	15cb8 <UnityAssertEqualIntArray@@Base+0x468>
   158d0:	mov	r0, #40	; 0x28
   158d4:	cmp	r8, #0
   158d8:	mov	r1, r9
   158dc:	ldr	r2, [fp, #8]
   158e0:	mov	r7, r3
   158e4:	movweq	r0, #32
   158e8:	ldr	r0, [r1, r0]!
   158ec:	adds	r0, r0, #1
   158f0:	str	r0, [r1]
   158f4:	ldr	r0, [r1, #4]
   158f8:	adc	r0, r0, #0
   158fc:	cmp	r8, #0
   15900:	str	r0, [r1, #4]
   15904:	beq	15de4 <UnityAssertEqualIntArray@@Base+0x594>
   15908:	mov	r0, r6
   1590c:	mov	r1, r5
   15910:	mov	r3, r7
   15914:	bl	15e30 <UnityAssertEqualIntArray@@Base+0x5e0>
   15918:	mov	r1, #56	; 0x38
   1591c:	cmp	r0, #1
   15920:	mov	r2, r9
   15924:	movweq	r1, #48	; 0x30
   15928:	ldr	r1, [r2, r1]!
   1592c:	adds	r1, r1, #1
   15930:	str	r1, [r2]
   15934:	ldr	r1, [r2, #4]
   15938:	adc	r1, r1, #0
   1593c:	cmp	r0, #1
   15940:	str	r1, [r2, #4]
   15944:	bne	1595c <UnityAssertEqualIntArray@@Base+0x10c>
   15948:	ldrd	r0, [r9, #64]	; 0x40
   1594c:	adds	r0, r0, #1
   15950:	adc	r1, r1, #0
   15954:	strd	r0, [r9, #64]	; 0x40
   15958:	b	15cb8 <UnityAssertEqualIntArray@@Base+0x468>
   1595c:	ldr	r0, [fp, #12]
   15960:	movw	r1, #1976	; 0x7b8
   15964:	str	r7, [sp]
   15968:	mov	r7, #1
   1596c:	movt	r1, #3
   15970:	strb	r7, [r1]
   15974:	bic	r0, r0, #128	; 0x80
   15978:	sub	r0, r0, #17
   1597c:	cmp	r0, #49	; 0x31
   15980:	bhi	15bcc <UnityAssertEqualIntArray@@Base+0x37c>
   15984:	add	r1, pc, #0
   15988:	ldr	pc, [r1, r0, lsl #2]
   1598c:	andeq	r5, r1, r4, asr sl
   15990:	andeq	r5, r1, r0, lsl fp
   15994:	andeq	r5, r1, ip, asr #23
   15998:	andeq	r5, r1, ip, asr #23
   1599c:	andeq	r5, r1, ip, asr #23
   159a0:	andeq	r5, r1, ip, asr #23
   159a4:	andeq	r5, r1, ip, asr #23
   159a8:	andeq	r5, r1, ip, asr #23
   159ac:	andeq	r5, r1, ip, asr #23
   159b0:	andeq	r5, r1, ip, asr #23
   159b4:	andeq	r5, r1, ip, asr #23
   159b8:	andeq	r5, r1, ip, asr #23
   159bc:	andeq	r5, r1, ip, asr #23
   159c0:	andeq	r5, r1, ip, asr #23
   159c4:	andeq	r5, r1, ip, asr #23
   159c8:	andeq	r5, r1, ip, asr #23
   159cc:	andeq	r5, r1, r4, asr sl
   159d0:	andeq	r5, r1, r0, lsl fp
   159d4:	andeq	r5, r1, ip, asr #23
   159d8:	andeq	r5, r1, ip, asr #23
   159dc:	andeq	r5, r1, ip, asr #23
   159e0:	andeq	r5, r1, ip, asr #23
   159e4:	andeq	r5, r1, ip, asr #23
   159e8:	andeq	r5, r1, ip, asr #23
   159ec:	andeq	r5, r1, ip, asr #23
   159f0:	andeq	r5, r1, ip, asr #23
   159f4:	andeq	r5, r1, ip, asr #23
   159f8:	andeq	r5, r1, ip, asr #23
   159fc:	andeq	r5, r1, ip, asr #23
   15a00:	andeq	r5, r1, ip, asr #23
   15a04:	andeq	r5, r1, ip, asr #23
   15a08:	andeq	r5, r1, ip, asr #23
   15a0c:	andeq	r5, r1, ip, asr #23
   15a10:	andeq	r5, r1, ip, asr #23
   15a14:	andeq	r5, r1, ip, asr #23
   15a18:	andeq	r5, r1, ip, asr #23
   15a1c:	andeq	r5, r1, ip, asr #23
   15a20:	andeq	r5, r1, ip, asr #23
   15a24:	andeq	r5, r1, ip, asr #23
   15a28:	andeq	r5, r1, ip, asr #23
   15a2c:	andeq	r5, r1, ip, asr #23
   15a30:	andeq	r5, r1, ip, asr #23
   15a34:	andeq	r5, r1, ip, asr #23
   15a38:	andeq	r5, r1, ip, asr #23
   15a3c:	andeq	r5, r1, ip, asr #23
   15a40:	andeq	r5, r1, ip, asr #23
   15a44:	andeq	r5, r1, ip, asr #23
   15a48:	andeq	r5, r1, ip, asr #23
   15a4c:	andeq	r5, r1, r4, asr sl
   15a50:	andeq	r5, r1, r0, lsl fp
   15a54:	movw	r0, #59208	; 0xe748
   15a58:	mov	r4, #0
   15a5c:	movt	r0, #1
   15a60:	add	r1, r0, #4
   15a64:	mov	r0, #0
   15a68:	bl	18380 <UnityEnd@@Base+0x1c0>
   15a6c:	add	r1, pc, #940	; 0x3ac
   15a70:	add	r0, r9, #128	; 0x80
   15a74:	vld1.64	{d16-d17}, [r1 :128]
   15a78:	vld1.64	{d18-d19}, [r0 :128]
   15a7c:	vadd.i64	q8, q9, q8
   15a80:	vst1.64	{d16-d17}, [r0 :128]
   15a84:	sub	r0, r8, #1
   15a88:	ldrb	r1, [r5]
   15a8c:	ldrb	r2, [r6]
   15a90:	mov	r3, #160	; 0xa0
   15a94:	mov	r7, r9
   15a98:	cmp	r2, r1
   15a9c:	movwne	r3, #152	; 0x98
   15aa0:	ldr	r3, [r7, r3]!
   15aa4:	adds	r3, r3, #1
   15aa8:	str	r3, [r7]
   15aac:	ldr	r3, [r7, #4]
   15ab0:	adc	r3, r3, #0
   15ab4:	cmp	r2, r1
   15ab8:	str	r3, [r7, #4]
   15abc:	bne	15cd8 <UnityAssertEqualIntArray@@Base+0x488>
   15ac0:	ldrd	r2, [r9, #168]	; 0xa8
   15ac4:	mov	r1, #144	; 0x90
   15ac8:	add	r5, r5, #1
   15acc:	add	r6, r6, #1
   15ad0:	adds	r2, r2, #1
   15ad4:	adc	r3, r3, #0
   15ad8:	cmp	r0, r4
   15adc:	add	r4, r4, #1
   15ae0:	strd	r2, [r9, #168]	; 0xa8
   15ae4:	movwne	r1, #136	; 0x88
   15ae8:	mov	r2, r9
   15aec:	ldr	r1, [r2, r1]!
   15af0:	adds	r1, r1, #1
   15af4:	str	r1, [r2]
   15af8:	ldr	r1, [r2, #4]
   15afc:	adc	r1, r1, #0
   15b00:	cmp	r8, r4
   15b04:	str	r1, [r2, #4]
   15b08:	bne	15a88 <UnityAssertEqualIntArray@@Base+0x238>
   15b0c:	b	15ca0 <UnityAssertEqualIntArray@@Base+0x450>
   15b10:	movw	r0, #59208	; 0xe748
   15b14:	mov	r4, #0
   15b18:	movt	r0, #1
   15b1c:	add	r1, r0, #8
   15b20:	mov	r0, #0
   15b24:	bl	18380 <UnityEnd@@Base+0x1c0>
   15b28:	add	r1, pc, #752	; 0x2f0
   15b2c:	add	r0, r9, #176	; 0xb0
   15b30:	vld1.64	{d16-d17}, [r1 :128]
   15b34:	vld1.64	{d18-d19}, [r0 :128]
   15b38:	vadd.i64	q8, q9, q8
   15b3c:	vst1.64	{d16-d17}, [r0 :128]
   15b40:	sub	r0, r8, #1
   15b44:	ldrh	r1, [r5]
   15b48:	ldrh	r2, [r6]
   15b4c:	mov	r3, #208	; 0xd0
   15b50:	mov	r7, r9
   15b54:	cmp	r2, r1
   15b58:	movwne	r3, #200	; 0xc8
   15b5c:	ldr	r3, [r7, r3]!
   15b60:	adds	r3, r3, #1
   15b64:	str	r3, [r7]
   15b68:	ldr	r3, [r7, #4]
   15b6c:	adc	r3, r3, #0
   15b70:	cmp	r2, r1
   15b74:	str	r3, [r7, #4]
   15b78:	bne	15d24 <UnityAssertEqualIntArray@@Base+0x4d4>
   15b7c:	ldrd	r2, [r9, #216]	; 0xd8
   15b80:	mov	r1, #192	; 0xc0
   15b84:	add	r5, r5, #2
   15b88:	add	r6, r6, #2
   15b8c:	adds	r2, r2, #1
   15b90:	adc	r3, r3, #0
   15b94:	cmp	r0, r4
   15b98:	add	r4, r4, #1
   15b9c:	strd	r2, [r9, #216]	; 0xd8
   15ba0:	movwne	r1, #184	; 0xb8
   15ba4:	mov	r2, r9
   15ba8:	ldr	r1, [r2, r1]!
   15bac:	adds	r1, r1, #1
   15bb0:	str	r1, [r2]
   15bb4:	ldr	r1, [r2, #4]
   15bb8:	adc	r1, r1, #0
   15bbc:	cmp	r8, r4
   15bc0:	str	r1, [r2, #4]
   15bc4:	bne	15b44 <UnityAssertEqualIntArray@@Base+0x2f4>
   15bc8:	b	15ca0 <UnityAssertEqualIntArray@@Base+0x450>
   15bcc:	movw	r1, #59208	; 0xe748
   15bd0:	mov	r0, #0
   15bd4:	mov	r4, #0
   15bd8:	movt	r1, #1
   15bdc:	bl	18380 <UnityEnd@@Base+0x1c0>
   15be0:	ldrd	r0, [r9, #224]	; 0xe0
   15be4:	sub	sl, r8, #1
   15be8:	adds	r0, r0, #1
   15bec:	adc	r1, r1, #0
   15bf0:	strd	r0, [r9, #224]	; 0xe0
   15bf4:	ldr	r0, [r5]
   15bf8:	ldr	r1, [r6]
   15bfc:	mov	r2, #248	; 0xf8
   15c00:	mov	r3, r9
   15c04:	cmp	r1, r0
   15c08:	movwne	r2, #240	; 0xf0
   15c0c:	ldr	r2, [r3, r2]!
   15c10:	adds	r2, r2, #1
   15c14:	str	r2, [r3]
   15c18:	ldr	r2, [r3, #4]
   15c1c:	adc	r2, r2, #0
   15c20:	cmp	r1, r0
   15c24:	str	r2, [r3, #4]
   15c28:	bne	15d70 <UnityAssertEqualIntArray@@Base+0x520>
   15c2c:	ldr	r0, [r9, #256]	; 0x100
   15c30:	ldr	r1, [r9, #260]	; 0x104
   15c34:	adds	r0, r0, #1
   15c38:	str	r0, [r9, #256]	; 0x100
   15c3c:	movw	r0, #1976	; 0x7b8
   15c40:	adc	r1, r1, #0
   15c44:	movt	r0, #3
   15c48:	str	r1, [r9, #260]	; 0x104
   15c4c:	movw	r1, #59208	; 0xe748
   15c50:	ldrb	r0, [r0]
   15c54:	movt	r1, #1
   15c58:	bic	r0, r7, r0
   15c5c:	rsb	r0, r0, #0
   15c60:	bl	18380 <UnityEnd@@Base+0x1c0>
   15c64:	cmp	sl, r4
   15c68:	mov	r0, #232	; 0xe8
   15c6c:	mov	r1, r9
   15c70:	add	r4, r4, #1
   15c74:	add	r5, r5, #4
   15c78:	add	r6, r6, #4
   15c7c:	movwne	r0, #224	; 0xe0
   15c80:	ldr	r0, [r1, r0]!
   15c84:	adds	r0, r0, #1
   15c88:	str	r0, [r1]
   15c8c:	ldr	r0, [r1, #4]
   15c90:	adc	r0, r0, #0
   15c94:	cmp	r8, r4
   15c98:	str	r0, [r1, #4]
   15c9c:	bne	15bf4 <UnityAssertEqualIntArray@@Base+0x3a4>
   15ca0:	ldr	r0, [r9, #264]	; 0x108
   15ca4:	ldr	r1, [r9, #268]	; 0x10c
   15ca8:	adds	r0, r0, #1
   15cac:	adc	r1, r1, #0
   15cb0:	str	r0, [r9, #264]	; 0x108
   15cb4:	str	r1, [r9, #268]	; 0x10c
   15cb8:	ldr	r0, [r9, #272]	; 0x110
   15cbc:	ldr	r1, [r9, #276]	; 0x114
   15cc0:	adds	r0, r0, #1
   15cc4:	adc	r1, r1, #0
   15cc8:	str	r0, [r9, #272]	; 0x110
   15ccc:	str	r1, [r9, #276]	; 0x114
   15cd0:	sub	sp, fp, #28
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	ldr	r0, [fp, #8]
   15cdc:	bl	154f0 <UnityAssertBits@@Base+0x110>
   15ce0:	movw	r0, #58754	; 0xe582
   15ce4:	movt	r0, #1
   15ce8:	bl	14390 <UnityPrint@@Base>
   15cec:	mov	r0, r4
   15cf0:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   15cf4:	movw	r0, #58732	; 0xe56c
   15cf8:	movt	r0, #1
   15cfc:	bl	14390 <UnityPrint@@Base>
   15d00:	ldr	r4, [fp, #12]
   15d04:	ldrsb	r0, [r6]
   15d08:	mov	r1, r4
   15d0c:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   15d10:	movw	r0, #58743	; 0xe577
   15d14:	movt	r0, #1
   15d18:	bl	14390 <UnityPrint@@Base>
   15d1c:	ldrsb	r0, [r5]
   15d20:	b	15db8 <UnityAssertEqualIntArray@@Base+0x568>
   15d24:	ldr	r0, [fp, #8]
   15d28:	bl	154f0 <UnityAssertBits@@Base+0x110>
   15d2c:	movw	r0, #58754	; 0xe582
   15d30:	movt	r0, #1
   15d34:	bl	14390 <UnityPrint@@Base>
   15d38:	mov	r0, r4
   15d3c:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   15d40:	movw	r0, #58732	; 0xe56c
   15d44:	movt	r0, #1
   15d48:	bl	14390 <UnityPrint@@Base>
   15d4c:	ldr	r4, [fp, #12]
   15d50:	ldrsh	r0, [r6]
   15d54:	mov	r1, r4
   15d58:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   15d5c:	movw	r0, #58743	; 0xe577
   15d60:	movt	r0, #1
   15d64:	bl	14390 <UnityPrint@@Base>
   15d68:	ldrsh	r0, [r5]
   15d6c:	b	15db8 <UnityAssertEqualIntArray@@Base+0x568>
   15d70:	ldr	r0, [fp, #8]
   15d74:	bl	154f0 <UnityAssertBits@@Base+0x110>
   15d78:	movw	r0, #58754	; 0xe582
   15d7c:	movt	r0, #1
   15d80:	bl	14390 <UnityPrint@@Base>
   15d84:	mov	r0, r4
   15d88:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   15d8c:	movw	r0, #58732	; 0xe56c
   15d90:	movt	r0, #1
   15d94:	bl	14390 <UnityPrint@@Base>
   15d98:	ldr	r4, [fp, #12]
   15d9c:	ldr	r0, [r6]
   15da0:	mov	r1, r4
   15da4:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   15da8:	movw	r0, #58743	; 0xe577
   15dac:	movt	r0, #1
   15db0:	bl	14390 <UnityPrint@@Base>
   15db4:	ldr	r0, [r5]
   15db8:	mov	r1, r4
   15dbc:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   15dc0:	ldr	r0, [sp]
   15dc4:	bl	155e0 <UnityAssertBits@@Base+0x200>
   15dc8:	movw	r1, #5952	; 0x1740
   15dcc:	mov	r0, #1
   15dd0:	movt	r1, #3
   15dd4:	str	r0, [r1, #32]
   15dd8:	add	r0, r1, #40	; 0x28
   15ddc:	mov	r1, #1
   15de0:	bl	1260c <longjmp@plt>
   15de4:	mov	r0, r2
   15de8:	bl	154f0 <UnityAssertBits@@Base+0x110>
   15dec:	movw	r0, #58815	; 0xe5bf
   15df0:	movt	r0, #1
   15df4:	bl	14390 <UnityPrint@@Base>
   15df8:	mov	r0, r7
   15dfc:	bl	155e0 <UnityAssertBits@@Base+0x200>
   15e00:	mov	r0, #1
   15e04:	mov	r1, #1
   15e08:	str	r0, [r4, #32]
   15e0c:	add	r0, r4, #40	; 0x28
   15e10:	bl	1260c <longjmp@plt>
   15e14:	nop	{0}
   15e18:	nop	{0}
   15e1c:	nop	{0}
   15e20:	andeq	r0, r0, r1
   15e24:	andeq	r0, r0, r0
   15e28:	andeq	r0, r0, r1
   15e2c:	andeq	r0, r0, r0
   15e30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e34:	add	fp, sp, #24
   15e38:	movw	r5, #1984	; 0x7c0
   15e3c:	mov	r8, r3
   15e40:	movt	r5, #3
   15e44:	ldrd	r6, [r5]
   15e48:	mov	r3, r5
   15e4c:	adds	r6, r6, #1
   15e50:	adc	r7, r7, #0
   15e54:	strd	r6, [r5]
   15e58:	orrs	r7, r0, r1
   15e5c:	mov	r6, #16
   15e60:	movweq	r6, #8
   15e64:	ldr	r6, [r3, r6]!
   15e68:	adds	r6, r6, #1
   15e6c:	str	r6, [r3]
   15e70:	ldr	r6, [r3, #4]
   15e74:	adc	r6, r6, #0
   15e78:	cmp	r7, #0
   15e7c:	str	r6, [r3, #4]
   15e80:	bne	15e9c <UnityAssertEqualIntArray@@Base+0x64c>
   15e84:	ldrd	r0, [r5, #24]
   15e88:	adds	r0, r0, #1
   15e8c:	adc	r1, r1, #0
   15e90:	strd	r0, [r5, #24]
   15e94:	mov	r0, #1
   15e98:	b	15f10 <UnityAssertEqualIntArray@@Base+0x6c0>
   15e9c:	mov	r3, #40	; 0x28
   15ea0:	cmp	r0, #0
   15ea4:	mov	r4, r5
   15ea8:	movweq	r3, #32
   15eac:	ldr	r3, [r4, r3]!
   15eb0:	adds	r3, r3, #1
   15eb4:	str	r3, [r4]
   15eb8:	ldr	r3, [r4, #4]
   15ebc:	adc	r3, r3, #0
   15ec0:	cmp	r0, #0
   15ec4:	str	r3, [r4, #4]
   15ec8:	beq	15f24 <UnityAssertEqualIntArray@@Base+0x6d4>
   15ecc:	mov	r0, #56	; 0x38
   15ed0:	cmp	r1, #0
   15ed4:	mov	r3, r5
   15ed8:	movweq	r0, #48	; 0x30
   15edc:	ldr	r0, [r3, r0]!
   15ee0:	adds	r0, r0, #1
   15ee4:	str	r0, [r3]
   15ee8:	ldr	r0, [r3, #4]
   15eec:	adc	r0, r0, #0
   15ef0:	cmp	r1, #0
   15ef4:	str	r0, [r3, #4]
   15ef8:	beq	15f38 <UnityAssertEqualIntArray@@Base+0x6e8>
   15efc:	ldrd	r0, [r5, #64]	; 0x40
   15f00:	adds	r0, r0, #1
   15f04:	adc	r1, r1, #0
   15f08:	strd	r0, [r5, #64]	; 0x40
   15f0c:	mov	r0, #0
   15f10:	ldrd	r2, [r5, #72]	; 0x48
   15f14:	adds	r2, r2, #1
   15f18:	adc	r3, r3, #0
   15f1c:	strd	r2, [r5, #72]	; 0x48
   15f20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f24:	mov	r0, r2
   15f28:	bl	154f0 <UnityAssertBits@@Base+0x110>
   15f2c:	movw	r0, #58870	; 0xe5f6
   15f30:	movt	r0, #1
   15f34:	b	15f48 <UnityAssertEqualIntArray@@Base+0x6f8>
   15f38:	mov	r0, r2
   15f3c:	bl	154f0 <UnityAssertBits@@Base+0x110>
   15f40:	movw	r0, #58899	; 0xe613
   15f44:	movt	r0, #1
   15f48:	bl	14390 <UnityPrint@@Base>
   15f4c:	mov	r0, r8
   15f50:	bl	155e0 <UnityAssertBits@@Base+0x200>
   15f54:	movw	r0, #5952	; 0x1740
   15f58:	mov	r1, #1
   15f5c:	movt	r0, #3
   15f60:	str	r1, [r0, #32]
   15f64:	add	r0, r0, #40	; 0x28
   15f68:	mov	r1, #1
   15f6c:	bl	1260c <longjmp@plt>

00015f70 <UnityAssertEqualFloatArray@@Base>:
   15f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f74:	add	fp, sp, #28
   15f78:	sub	sp, sp, #4
   15f7c:	movw	r8, #2064	; 0x810
   15f80:	mov	r6, r1
   15f84:	mov	r7, r0
   15f88:	movw	r5, #5952	; 0x1740
   15f8c:	mov	sl, r2
   15f90:	movt	r8, #3
   15f94:	movt	r5, #3
   15f98:	ldrd	r0, [r8]
   15f9c:	mov	r2, r8
   15fa0:	adds	r0, r0, #1
   15fa4:	adc	r1, r1, #0
   15fa8:	strd	r0, [r8]
   15fac:	ldrd	r0, [r5, #32]
   15fb0:	orrs	r0, r1, r0
   15fb4:	mov	r1, #16
   15fb8:	movwne	r1, #8
   15fbc:	ldr	r1, [r2, r1]!
   15fc0:	adds	r1, r1, #1
   15fc4:	str	r1, [r2]
   15fc8:	ldr	r1, [r2, #4]
   15fcc:	adc	r1, r1, #0
   15fd0:	cmp	r0, #0
   15fd4:	str	r1, [r2, #4]
   15fd8:	beq	15ff0 <UnityAssertEqualFloatArray@@Base+0x80>
   15fdc:	ldrd	r0, [r8, #24]
   15fe0:	adds	r0, r0, #1
   15fe4:	adc	r1, r1, #0
   15fe8:	strd	r0, [r8, #24]
   15fec:	b	16228 <UnityAssertEqualFloatArray@@Base+0x2b8>
   15ff0:	mov	r0, #40	; 0x28
   15ff4:	cmp	sl, #0
   15ff8:	mov	r1, r8
   15ffc:	ldr	r4, [fp, #8]
   16000:	mov	r9, r3
   16004:	movweq	r0, #32
   16008:	ldr	r0, [r1, r0]!
   1600c:	adds	r0, r0, #1
   16010:	str	r0, [r1]
   16014:	ldr	r0, [r1, #4]
   16018:	adc	r0, r0, #0
   1601c:	cmp	sl, #0
   16020:	str	r0, [r1, #4]
   16024:	beq	16288 <UnityAssertEqualFloatArray@@Base+0x318>
   16028:	mov	r0, r7
   1602c:	mov	r1, r6
   16030:	mov	r2, r4
   16034:	mov	r3, r9
   16038:	bl	15e30 <UnityAssertEqualIntArray@@Base+0x5e0>
   1603c:	mov	r1, #56	; 0x38
   16040:	cmp	r0, #1
   16044:	mov	r2, r8
   16048:	movweq	r1, #48	; 0x30
   1604c:	ldr	r1, [r2, r1]!
   16050:	adds	r1, r1, #1
   16054:	str	r1, [r2]
   16058:	ldr	r1, [r2, #4]
   1605c:	adc	r1, r1, #0
   16060:	cmp	r0, #1
   16064:	str	r1, [r2, #4]
   16068:	bne	16080 <UnityAssertEqualFloatArray@@Base+0x110>
   1606c:	ldrd	r0, [r8, #64]	; 0x40
   16070:	adds	r0, r0, #1
   16074:	adc	r1, r1, #0
   16078:	strd	r0, [r8, #64]	; 0x40
   1607c:	b	16228 <UnityAssertEqualFloatArray@@Base+0x2b8>
   16080:	ldr	r2, [r8, #72]	; 0x48
   16084:	ldr	r1, [r8, #76]	; 0x4c
   16088:	vldr	s0, [pc, #552]	; 162b8 <UnityAssertEqualFloatArray@@Base+0x348>
   1608c:	vldr	s2, [pc, #552]	; 162bc <UnityAssertEqualFloatArray@@Base+0x34c>
   16090:	mov	r0, r4
   16094:	sub	r5, sl, #1
   16098:	mov	r4, #0
   1609c:	adds	r2, r2, #1
   160a0:	adc	r1, r1, #0
   160a4:	str	r2, [r8, #72]	; 0x48
   160a8:	str	r1, [r8, #76]	; 0x4c
   160ac:	vldr	s4, [r6]
   160b0:	vldr	s6, [r7]
   160b4:	mov	r1, #96	; 0x60
   160b8:	mov	r2, r8
   160bc:	vsub.f32	s4, s6, s4
   160c0:	vcmpe.f32	s4, #0.0
   160c4:	vmrs	APSR_nzcv, fpscr
   160c8:	vcmpe.f32	s4, #0.0
   160cc:	movwmi	r1, #88	; 0x58
   160d0:	ldr	r1, [r2, r1]!
   160d4:	adds	r1, r1, #1
   160d8:	str	r1, [r2]
   160dc:	ldr	r1, [r2, #4]
   160e0:	adc	r1, r1, #0
   160e4:	vmrs	APSR_nzcv, fpscr
   160e8:	str	r1, [r2, #4]
   160ec:	bpl	16104 <UnityAssertEqualFloatArray@@Base+0x194>
   160f0:	ldrd	r2, [r8, #104]	; 0x68
   160f4:	vsub.f32	s4, s0, s4
   160f8:	adds	r2, r2, #1
   160fc:	adc	r3, r3, #0
   16100:	strd	r2, [r8, #104]	; 0x68
   16104:	vldr	s6, [r7]
   16108:	mov	r1, #120	; 0x78
   1610c:	mov	r2, r8
   16110:	vmul.f32	s6, s6, s2
   16114:	vcmpe.f32	s6, #0.0
   16118:	vmrs	APSR_nzcv, fpscr
   1611c:	vcmpe.f32	s6, #0.0
   16120:	movwmi	r1, #112	; 0x70
   16124:	ldr	r1, [r2, r1]!
   16128:	adds	r1, r1, #1
   1612c:	str	r1, [r2]
   16130:	ldr	r1, [r2, #4]
   16134:	adc	r1, r1, #0
   16138:	vmrs	APSR_nzcv, fpscr
   1613c:	str	r1, [r2, #4]
   16140:	bpl	16158 <UnityAssertEqualFloatArray@@Base+0x1e8>
   16144:	ldrd	r2, [r8, #128]	; 0x80
   16148:	vsub.f32	s6, s0, s6
   1614c:	adds	r2, r2, #1
   16150:	adc	r3, r3, #0
   16154:	strd	r2, [r8, #128]	; 0x80
   16158:	vmul.f32	s8, s4, s0
   1615c:	mov	r1, #144	; 0x90
   16160:	mov	r2, r8
   16164:	vcmp.f32	s8, #0.0
   16168:	vmrs	APSR_nzcv, fpscr
   1616c:	vcmp.f32	s8, #0.0
   16170:	movwne	r1, #136	; 0x88
   16174:	ldr	r1, [r2, r1]!
   16178:	adds	r1, r1, #1
   1617c:	str	r1, [r2]
   16180:	ldr	r1, [r2, #4]
   16184:	adc	r1, r1, #0
   16188:	vmrs	APSR_nzcv, fpscr
   1618c:	str	r1, [r2, #4]
   16190:	bne	16240 <UnityAssertEqualFloatArray@@Base+0x2d0>
   16194:	vcmpe.f32	s4, s6
   16198:	mov	r1, #160	; 0xa0
   1619c:	mov	r2, r8
   161a0:	vmrs	APSR_nzcv, fpscr
   161a4:	vcmpe.f32	s4, s6
   161a8:	movwgt	r1, #152	; 0x98
   161ac:	ldr	r1, [r2, r1]!
   161b0:	adds	r1, r1, #1
   161b4:	str	r1, [r2]
   161b8:	ldr	r1, [r2, #4]
   161bc:	adc	r1, r1, #0
   161c0:	vmrs	APSR_nzcv, fpscr
   161c4:	str	r1, [r2, #4]
   161c8:	bgt	16240 <UnityAssertEqualFloatArray@@Base+0x2d0>
   161cc:	ldrd	r2, [r8, #168]	; 0xa8
   161d0:	mov	r1, #80	; 0x50
   161d4:	add	r6, r6, #4
   161d8:	add	r7, r7, #4
   161dc:	adds	r2, r2, #1
   161e0:	adc	r3, r3, #0
   161e4:	cmp	r5, r4
   161e8:	add	r4, r4, #1
   161ec:	strd	r2, [r8, #168]	; 0xa8
   161f0:	movwne	r1, #72	; 0x48
   161f4:	mov	r2, r8
   161f8:	ldr	r1, [r2, r1]!
   161fc:	adds	r1, r1, #1
   16200:	str	r1, [r2]
   16204:	ldr	r1, [r2, #4]
   16208:	adc	r1, r1, #0
   1620c:	cmp	sl, r4
   16210:	str	r1, [r2, #4]
   16214:	bne	160ac <UnityAssertEqualFloatArray@@Base+0x13c>
   16218:	ldrd	r0, [r8, #176]	; 0xb0
   1621c:	adds	r0, r0, #1
   16220:	adc	r1, r1, #0
   16224:	strd	r0, [r8, #176]	; 0xb0
   16228:	ldrd	r0, [r8, #184]	; 0xb8
   1622c:	adds	r0, r0, #1
   16230:	adc	r1, r1, #0
   16234:	strd	r0, [r8, #184]	; 0xb8
   16238:	sub	sp, fp, #28
   1623c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16240:	bl	154f0 <UnityAssertBits@@Base+0x110>
   16244:	movw	r0, #58754	; 0xe582
   16248:	movt	r0, #1
   1624c:	bl	14390 <UnityPrint@@Base>
   16250:	mov	r0, r4
   16254:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   16258:	movw	r0, #58789	; 0xe5a5
   1625c:	movt	r0, #1
   16260:	bl	14390 <UnityPrint@@Base>
   16264:	mov	r0, r9
   16268:	bl	155e0 <UnityAssertBits@@Base+0x200>
   1626c:	movw	r1, #5952	; 0x1740
   16270:	mov	r0, #1
   16274:	movt	r1, #3
   16278:	str	r0, [r1, #32]
   1627c:	add	r0, r1, #40	; 0x28
   16280:	mov	r1, #1
   16284:	bl	1260c <longjmp@plt>
   16288:	mov	r0, r4
   1628c:	bl	154f0 <UnityAssertBits@@Base+0x110>
   16290:	movw	r0, #58815	; 0xe5bf
   16294:	movt	r0, #1
   16298:	bl	14390 <UnityPrint@@Base>
   1629c:	mov	r0, r9
   162a0:	bl	155e0 <UnityAssertBits@@Base+0x200>
   162a4:	mov	r0, #1
   162a8:	mov	r1, #1
   162ac:	str	r0, [r5, #32]
   162b0:	add	r0, r5, #40	; 0x28
   162b4:	bl	1260c <longjmp@plt>
   162b8:	andeq	r0, r0, r0
   162bc:	strcc	ip, [r7, -ip, lsr #11]!

000162c0 <UnityAssertFloatsWithin@@Base>:
   162c0:	push	{r4, r5, r6, sl, fp, lr}
   162c4:	add	fp, sp, #16
   162c8:	movw	r4, #2256	; 0x8d0
   162cc:	movw	r5, #5952	; 0x1740
   162d0:	mov	r6, r0
   162d4:	movt	r4, #3
   162d8:	movt	r5, #3
   162dc:	ldrd	r2, [r4]
   162e0:	mov	r0, r4
   162e4:	adds	r2, r2, #1
   162e8:	adc	r3, r3, #0
   162ec:	strd	r2, [r4]
   162f0:	ldrd	r2, [r5, #32]
   162f4:	orrs	r2, r3, r2
   162f8:	mov	r3, #16
   162fc:	movwne	r3, #8
   16300:	ldr	r3, [r0, r3]!
   16304:	adds	r3, r3, #1
   16308:	str	r3, [r0]
   1630c:	ldr	r3, [r0, #4]
   16310:	adc	r3, r3, #0
   16314:	cmp	r2, #0
   16318:	str	r3, [r0, #4]
   1631c:	beq	16334 <UnityAssertFloatsWithin@@Base+0x74>
   16320:	ldrd	r0, [r4, #24]
   16324:	adds	r0, r0, #1
   16328:	adc	r1, r1, #0
   1632c:	strd	r0, [r4, #24]
   16330:	b	16470 <UnityAssertFloatsWithin@@Base+0x1b0>
   16334:	vsub.f32	s2, s2, s1
   16338:	mov	r0, #40	; 0x28
   1633c:	mov	r2, r4
   16340:	vcmpe.f32	s2, #0.0
   16344:	vmrs	APSR_nzcv, fpscr
   16348:	vcmpe.f32	s2, #0.0
   1634c:	movwmi	r0, #32
   16350:	ldr	r0, [r2, r0]!
   16354:	adds	r0, r0, #1
   16358:	str	r0, [r2]
   1635c:	ldr	r0, [r2, #4]
   16360:	adc	r0, r0, #0
   16364:	vmrs	APSR_nzcv, fpscr
   16368:	str	r0, [r2, #4]
   1636c:	bpl	16390 <UnityAssertFloatsWithin@@Base+0xd0>
   16370:	ldr	r0, [r4, #48]	; 0x30
   16374:	vldr	s4, [pc, #312]	; 164b4 <UnityAssertFloatsWithin@@Base+0x1f4>
   16378:	ldr	r3, [r4, #52]	; 0x34
   1637c:	adds	r0, r0, #1
   16380:	vsub.f32	s2, s4, s2
   16384:	adc	r3, r3, #0
   16388:	str	r0, [r4, #48]	; 0x30
   1638c:	str	r3, [r4, #52]	; 0x34
   16390:	vcmpe.f32	s0, #0.0
   16394:	mov	r0, #64	; 0x40
   16398:	mov	r2, r4
   1639c:	vmrs	APSR_nzcv, fpscr
   163a0:	vcmpe.f32	s0, #0.0
   163a4:	movwmi	r0, #56	; 0x38
   163a8:	ldr	r0, [r2, r0]!
   163ac:	adds	r0, r0, #1
   163b0:	str	r0, [r2]
   163b4:	ldr	r0, [r2, #4]
   163b8:	adc	r0, r0, #0
   163bc:	vmrs	APSR_nzcv, fpscr
   163c0:	str	r0, [r2, #4]
   163c4:	bpl	163e8 <UnityAssertFloatsWithin@@Base+0x128>
   163c8:	ldr	r0, [r4, #72]	; 0x48
   163cc:	vldr	s4, [pc, #224]	; 164b4 <UnityAssertFloatsWithin@@Base+0x1f4>
   163d0:	ldr	r3, [r4, #76]	; 0x4c
   163d4:	adds	r0, r0, #1
   163d8:	vsub.f32	s0, s4, s0
   163dc:	adc	r3, r3, #0
   163e0:	str	r0, [r4, #72]	; 0x48
   163e4:	str	r3, [r4, #76]	; 0x4c
   163e8:	vldr	s4, [pc, #196]	; 164b4 <UnityAssertFloatsWithin@@Base+0x1f4>
   163ec:	mov	r0, #88	; 0x58
   163f0:	mov	r2, r4
   163f4:	vmul.f32	s4, s2, s4
   163f8:	vcmp.f32	s4, #0.0
   163fc:	vmrs	APSR_nzcv, fpscr
   16400:	vcmp.f32	s4, #0.0
   16404:	movwne	r0, #80	; 0x50
   16408:	ldr	r0, [r2, r0]!
   1640c:	adds	r0, r0, #1
   16410:	str	r0, [r2]
   16414:	ldr	r0, [r2, #4]
   16418:	adc	r0, r0, #0
   1641c:	vmrs	APSR_nzcv, fpscr
   16420:	str	r0, [r2, #4]
   16424:	bne	16484 <UnityAssertFloatsWithin@@Base+0x1c4>
   16428:	vcmpe.f32	s0, s2
   1642c:	mov	r0, #104	; 0x68
   16430:	mov	r2, r4
   16434:	vmrs	APSR_nzcv, fpscr
   16438:	vcmpe.f32	s0, s2
   1643c:	movwmi	r0, #96	; 0x60
   16440:	ldr	r0, [r2, r0]!
   16444:	adds	r0, r0, #1
   16448:	str	r0, [r2]
   1644c:	ldr	r0, [r2, #4]
   16450:	adc	r0, r0, #0
   16454:	vmrs	APSR_nzcv, fpscr
   16458:	str	r0, [r2, #4]
   1645c:	bmi	16484 <UnityAssertFloatsWithin@@Base+0x1c4>
   16460:	ldrd	r0, [r4, #112]	; 0x70
   16464:	adds	r0, r0, #1
   16468:	adc	r1, r1, #0
   1646c:	strd	r0, [r4, #112]	; 0x70
   16470:	ldrd	r0, [r4, #120]	; 0x78
   16474:	adds	r0, r0, #1
   16478:	adc	r1, r1, #0
   1647c:	strd	r0, [r4, #120]	; 0x78
   16480:	pop	{r4, r5, r6, sl, fp, pc}
   16484:	mov	r0, r1
   16488:	bl	154f0 <UnityAssertBits@@Base+0x110>
   1648c:	movw	r0, #58789	; 0xe5a5
   16490:	movt	r0, #1
   16494:	bl	14390 <UnityPrint@@Base>
   16498:	mov	r0, r6
   1649c:	bl	155e0 <UnityAssertBits@@Base+0x200>
   164a0:	mov	r0, #1
   164a4:	mov	r1, #1
   164a8:	str	r0, [r5, #32]
   164ac:	add	r0, r5, #40	; 0x28
   164b0:	bl	1260c <longjmp@plt>
   164b4:	andeq	r0, r0, r0

000164b8 <UnityAssertFloatSpecial@@Base>:
   164b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164bc:	add	fp, sp, #28
   164c0:	sub	sp, sp, #4
   164c4:	vpush	{d8}
   164c8:	sub	sp, sp, #24
   164cc:	movw	r4, #2384	; 0x950
   164d0:	mov	sl, r1
   164d4:	movw	r9, #5952	; 0x1740
   164d8:	add	r8, sp, #8
   164dc:	movt	r4, #3
   164e0:	movt	r9, #3
   164e4:	ldr	r6, [r4]
   164e8:	ldr	r1, [r4, #4]
   164ec:	mov	r3, r4
   164f0:	adds	r6, r6, #1
   164f4:	adc	r1, r1, #0
   164f8:	str	r6, [r4]
   164fc:	str	r1, [r4, #4]
   16500:	movw	r1, #59192	; 0xe738
   16504:	movt	r1, #1
   16508:	vld1.64	{d16-d17}, [r1]
   1650c:	vst1.64	{d16-d17}, [r8]
   16510:	ldr	r6, [r9, #32]
   16514:	ldr	r1, [r9, #36]	; 0x24
   16518:	orrs	r7, r1, r6
   1651c:	mov	r1, #16
   16520:	movwne	r1, #8
   16524:	ldr	r1, [r3, r1]!
   16528:	adds	r1, r1, #1
   1652c:	str	r1, [r3]
   16530:	ldr	r1, [r3, #4]
   16534:	adc	r1, r1, #0
   16538:	cmp	r7, #0
   1653c:	str	r1, [r3, #4]
   16540:	beq	1654c <UnityAssertFloatSpecial@@Base+0x94>
   16544:	add	r0, r4, #24
   16548:	b	16748 <UnityAssertFloatSpecial@@Base+0x290>
   1654c:	and	r5, r2, #1
   16550:	cmp	r2, #7
   16554:	str	r0, [sp, #4]
   16558:	bhi	166c4 <UnityAssertFloatSpecial@@Base+0x20c>
   1655c:	add	r0, pc, #4
   16560:	vmov.f32	s16, s0
   16564:	ldr	pc, [r0, r2, lsl #2]
   16568:	andeq	r6, r1, r8, lsl #11
   1656c:	andeq	r6, r1, r8, lsl #11
   16570:	andeq	r6, r1, ip, ror r6
   16574:	andeq	r6, r1, ip, ror r6
   16578:	ldrdeq	r6, [r1], -r0
   1657c:	ldrdeq	r6, [r1], -r0
   16580:	andeq	r6, r1, r8, lsl #12
   16584:	andeq	r6, r1, r8, lsl #12
   16588:	movw	r0, #59232	; 0xe760
   1658c:	mov	r7, #0
   16590:	movt	r0, #1
   16594:	add	r1, r0, #4
   16598:	mov	r0, #0
   1659c:	bl	18380 <UnityEnd@@Base+0x1c0>
   165a0:	ldrd	r0, [r4, #104]	; 0x68
   165a4:	vcmpe.f32	s16, #0.0
   165a8:	vmov.f32	s0, s16
   165ac:	mov	r6, #0
   165b0:	adds	r0, r0, #1
   165b4:	adc	r1, r1, #0
   165b8:	vmrs	APSR_nzcv, fpscr
   165bc:	strd	r0, [r4, #104]	; 0x68
   165c0:	movwgt	r6, #1
   165c4:	bl	12684 <__isinff@plt>
   165c8:	and	r6, r0, r6
   165cc:	b	16714 <UnityAssertFloatSpecial@@Base+0x25c>
   165d0:	movw	r0, #59232	; 0xe760
   165d4:	movt	r0, #1
   165d8:	add	r1, r0, #12
   165dc:	mov	r0, #0
   165e0:	bl	18380 <UnityEnd@@Base+0x1c0>
   165e4:	ldrd	r0, [r4, #120]	; 0x78
   165e8:	vmov.f32	s0, s16
   165ec:	adds	r0, r0, #1
   165f0:	adc	r1, r1, #0
   165f4:	strd	r0, [r4, #120]	; 0x78
   165f8:	bl	1263c <__isnanf@plt>
   165fc:	mov	r6, r0
   16600:	mov	r7, #2
   16604:	b	16714 <UnityAssertFloatSpecial@@Base+0x25c>
   16608:	movw	r0, #59232	; 0xe760
   1660c:	mov	r6, #0
   16610:	movt	r0, #1
   16614:	add	r1, r0, #16
   16618:	mov	r0, #0
   1661c:	bl	18380 <UnityEnd@@Base+0x1c0>
   16620:	vmov.f32	s0, s16
   16624:	bl	12684 <__isinff@plt>
   16628:	vmov.f32	s0, s16
   1662c:	mov	r7, r0
   16630:	bl	1263c <__isnanf@plt>
   16634:	orrs	r0, r0, r7
   16638:	mov	r1, #136	; 0x88
   1663c:	mov	r2, r4
   16640:	movwne	r1, #128	; 0x80
   16644:	ldr	r1, [r2, r1]!
   16648:	adds	r1, r1, #1
   1664c:	str	r1, [r2]
   16650:	ldr	r1, [r2, #4]
   16654:	adc	r1, r1, #0
   16658:	cmp	r0, #0
   1665c:	str	r1, [r2, #4]
   16660:	beq	166fc <UnityAssertFloatSpecial@@Base+0x244>
   16664:	ldrd	r0, [r4, #144]	; 0x90
   16668:	mov	r7, #3
   1666c:	adds	r0, r0, #1
   16670:	adc	r1, r1, #0
   16674:	strd	r0, [r4, #144]	; 0x90
   16678:	b	16714 <UnityAssertFloatSpecial@@Base+0x25c>
   1667c:	movw	r0, #59232	; 0xe760
   16680:	mov	r6, #0
   16684:	movt	r0, #1
   16688:	add	r1, r0, #8
   1668c:	mov	r0, #0
   16690:	bl	18380 <UnityEnd@@Base+0x1c0>
   16694:	ldrd	r0, [r4, #112]	; 0x70
   16698:	vcmpe.f32	s16, #0.0
   1669c:	vmov.f32	s0, s16
   166a0:	adds	r0, r0, #1
   166a4:	adc	r1, r1, #0
   166a8:	vmrs	APSR_nzcv, fpscr
   166ac:	strd	r0, [r4, #112]	; 0x70
   166b0:	movwmi	r6, #1
   166b4:	bl	12684 <__isinff@plt>
   166b8:	and	r6, r0, r6
   166bc:	mov	r7, #1
   166c0:	b	16714 <UnityAssertFloatSpecial@@Base+0x25c>
   166c4:	movw	r1, #59232	; 0xe760
   166c8:	mov	r0, #0
   166cc:	eor	r6, r5, #1
   166d0:	mov	r7, #0
   166d4:	movt	r1, #1
   166d8:	bl	18380 <UnityEnd@@Base+0x1c0>
   166dc:	ldrd	r0, [r4, #160]	; 0xa0
   166e0:	adds	r0, r0, #1
   166e4:	adc	r1, r1, #0
   166e8:	strd	r0, [r4, #160]	; 0xa0
   166ec:	movw	r0, #58972	; 0xe65c
   166f0:	movt	r0, #1
   166f4:	str	r0, [sp, #8]
   166f8:	b	16714 <UnityAssertFloatSpecial@@Base+0x25c>
   166fc:	ldrd	r0, [r4, #152]	; 0x98
   16700:	mov	r7, #3
   16704:	mov	r6, #1
   16708:	adds	r0, r0, #1
   1670c:	adc	r1, r1, #0
   16710:	strd	r0, [r4, #152]	; 0x98
   16714:	mov	r0, #176	; 0xb0
   16718:	cmp	r6, r5
   1671c:	mov	r1, r4
   16720:	movwne	r0, #168	; 0xa8
   16724:	ldr	r0, [r1, r0]!
   16728:	adds	r0, r0, #1
   1672c:	str	r0, [r1]
   16730:	ldr	r0, [r1, #4]
   16734:	adc	r0, r0, #0
   16738:	cmp	r6, r5
   1673c:	str	r0, [r1, #4]
   16740:	bne	16778 <UnityAssertFloatSpecial@@Base+0x2c0>
   16744:	add	r0, r4, #232	; 0xe8
   16748:	ldrd	r2, [r0]
   1674c:	adds	r2, r2, #1
   16750:	adc	r3, r3, #0
   16754:	strd	r2, [r0]
   16758:	ldrd	r0, [r4, #240]	; 0xf0
   1675c:	adds	r0, r0, #1
   16760:	adc	r1, r1, #0
   16764:	strd	r0, [r4, #240]	; 0xf0
   16768:	sub	sp, fp, #40	; 0x28
   1676c:	vpop	{d8}
   16770:	add	sp, sp, #4
   16774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16778:	mov	r0, sl
   1677c:	bl	154f0 <UnityAssertBits@@Base+0x110>
   16780:	movw	r0, #58732	; 0xe56c
   16784:	movt	r0, #1
   16788:	bl	14390 <UnityPrint@@Base>
   1678c:	mov	r0, #192	; 0xc0
   16790:	cmp	r5, #0
   16794:	mov	r1, r4
   16798:	movwne	r0, #184	; 0xb8
   1679c:	ldr	r0, [r1, r0]!
   167a0:	adds	r0, r0, #1
   167a4:	str	r0, [r1]
   167a8:	ldr	r0, [r1, #4]
   167ac:	adc	r0, r0, #0
   167b0:	cmp	r5, #0
   167b4:	str	r0, [r1, #4]
   167b8:	bne	167d8 <UnityAssertFloatSpecial@@Base+0x320>
   167bc:	ldrd	r0, [r4, #200]	; 0xc8
   167c0:	adds	r0, r0, #1
   167c4:	adc	r1, r1, #0
   167c8:	strd	r0, [r4, #200]	; 0xc8
   167cc:	movw	r0, #58924	; 0xe62c
   167d0:	movt	r0, #1
   167d4:	bl	14390 <UnityPrint@@Base>
   167d8:	ldr	r6, [r8, r7, lsl #2]
   167dc:	mov	r0, r6
   167e0:	bl	14390 <UnityPrint@@Base>
   167e4:	movw	r0, #58743	; 0xe577
   167e8:	movt	r0, #1
   167ec:	bl	14390 <UnityPrint@@Base>
   167f0:	eor	r0, r5, #27
   167f4:	mov	r1, r4
   167f8:	ldr	r0, [r1, r0, lsl #3]!
   167fc:	adds	r0, r0, #1
   16800:	str	r0, [r1]
   16804:	ldr	r0, [r1, #4]
   16808:	adc	r0, r0, #0
   1680c:	cmp	r5, #0
   16810:	str	r0, [r1, #4]
   16814:	beq	16834 <UnityAssertFloatSpecial@@Base+0x37c>
   16818:	ldrd	r0, [r4, #224]	; 0xe0
   1681c:	adds	r0, r0, #1
   16820:	adc	r1, r1, #0
   16824:	strd	r0, [r4, #224]	; 0xe0
   16828:	movw	r0, #58924	; 0xe62c
   1682c:	movt	r0, #1
   16830:	bl	14390 <UnityPrint@@Base>
   16834:	mov	r0, r6
   16838:	bl	14390 <UnityPrint@@Base>
   1683c:	ldr	r0, [sp, #4]
   16840:	bl	155e0 <UnityAssertBits@@Base+0x200>
   16844:	mov	r0, #1
   16848:	mov	r1, #1
   1684c:	str	r0, [r9, #32]
   16850:	add	r0, r9, #40	; 0x28
   16854:	bl	1260c <longjmp@plt>

00016858 <UnityAssertNumbersWithin@@Base>:
   16858:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1685c:	add	fp, sp, #24
   16860:	mov	r7, r0
   16864:	movw	r0, #2640	; 0xa50
   16868:	mov	r9, r3
   1686c:	mov	r5, r2
   16870:	movw	r4, #5952	; 0x1740
   16874:	mov	r6, r1
   16878:	movt	r0, #3
   1687c:	movt	r4, #3
   16880:	ldrd	r2, [r0]
   16884:	adds	r2, r2, #1
   16888:	adc	r3, r3, #0
   1688c:	strd	r2, [r0]
   16890:	ldrd	r2, [r4, #32]
   16894:	orrs	r1, r3, r2
   16898:	mov	r2, #16
   1689c:	mov	r3, r0
   168a0:	movwne	r2, #8
   168a4:	ldr	r2, [r3, r2]!
   168a8:	adds	r2, r2, #1
   168ac:	str	r2, [r3]
   168b0:	ldr	r2, [r3, #4]
   168b4:	adc	r2, r2, #0
   168b8:	cmp	r1, #0
   168bc:	str	r2, [r3, #4]
   168c0:	bne	169ec <UnityAssertNumbersWithin@@Base+0x194>
   168c4:	ldr	r8, [fp, #12]
   168c8:	mov	r2, #32
   168cc:	mov	r3, r0
   168d0:	ands	r1, r8, #16
   168d4:	movwne	r2, #24
   168d8:	ldr	r2, [r3, r2]!
   168dc:	adds	r2, r2, #1
   168e0:	str	r2, [r3]
   168e4:	ldr	r2, [r3, #4]
   168e8:	adc	r2, r2, #0
   168ec:	cmp	r1, #0
   168f0:	str	r2, [r3, #4]
   168f4:	beq	16940 <UnityAssertNumbersWithin@@Base+0xe8>
   168f8:	mov	r1, #48	; 0x30
   168fc:	cmp	r5, r6
   16900:	mov	r2, r0
   16904:	movwgt	r1, #40	; 0x28
   16908:	ldr	r1, [r2, r1]!
   1690c:	adds	r1, r1, #1
   16910:	str	r1, [r2]
   16914:	ldr	r1, [r2, #4]
   16918:	adc	r1, r1, #0
   1691c:	cmp	r5, r6
   16920:	str	r1, [r2, #4]
   16924:	ble	16988 <UnityAssertNumbersWithin@@Base+0x130>
   16928:	ldrd	r2, [r0, #56]	; 0x38
   1692c:	sub	r1, r5, r6
   16930:	adds	r2, r2, #1
   16934:	adc	r3, r3, #0
   16938:	strd	r2, [r0, #56]	; 0x38
   1693c:	b	169b0 <UnityAssertNumbersWithin@@Base+0x158>
   16940:	mov	r1, #80	; 0x50
   16944:	cmp	r5, r6
   16948:	mov	r2, r0
   1694c:	movwhi	r1, #72	; 0x48
   16950:	ldr	r1, [r2, r1]!
   16954:	adds	r1, r1, #1
   16958:	str	r1, [r2]
   1695c:	ldr	r1, [r2, #4]
   16960:	adc	r1, r1, #0
   16964:	cmp	r5, r6
   16968:	str	r1, [r2, #4]
   1696c:	bls	1699c <UnityAssertNumbersWithin@@Base+0x144>
   16970:	ldrd	r2, [r0, #88]	; 0x58
   16974:	sub	r1, r5, r6
   16978:	adds	r2, r2, #1
   1697c:	adc	r3, r3, #0
   16980:	strd	r2, [r0, #88]	; 0x58
   16984:	b	169b0 <UnityAssertNumbersWithin@@Base+0x158>
   16988:	ldrd	r2, [r0, #64]	; 0x40
   1698c:	adds	r2, r2, #1
   16990:	adc	r3, r3, #0
   16994:	strd	r2, [r0, #64]	; 0x40
   16998:	b	169ac <UnityAssertNumbersWithin@@Base+0x154>
   1699c:	ldrd	r2, [r0, #96]	; 0x60
   169a0:	adds	r2, r2, #1
   169a4:	adc	r3, r3, #0
   169a8:	strd	r2, [r0, #96]	; 0x60
   169ac:	sub	r1, r6, r5
   169b0:	mov	r2, #0
   169b4:	cmp	r1, r7
   169b8:	mov	r3, r0
   169bc:	movwhi	r2, #1
   169c0:	str	r2, [r4, #32]
   169c4:	mov	r2, #112	; 0x70
   169c8:	movwhi	r2, #104	; 0x68
   169cc:	ldr	r2, [r3, r2]!
   169d0:	adds	r2, r2, #1
   169d4:	str	r2, [r3]
   169d8:	ldr	r2, [r3, #4]
   169dc:	adc	r2, r2, #0
   169e0:	cmp	r1, r7
   169e4:	str	r2, [r3, #4]
   169e8:	bhi	16a00 <UnityAssertNumbersWithin@@Base+0x1a8>
   169ec:	ldrd	r2, [r0, #120]	; 0x78
   169f0:	adds	r2, r2, #1
   169f4:	adc	r3, r3, #0
   169f8:	strd	r2, [r0, #120]	; 0x78
   169fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a00:	ldr	r0, [fp, #8]
   16a04:	bl	154f0 <UnityAssertBits@@Base+0x110>
   16a08:	movw	r0, #58789	; 0xe5a5
   16a0c:	movt	r0, #1
   16a10:	bl	14390 <UnityPrint@@Base>
   16a14:	mov	r0, r7
   16a18:	mov	r1, r8
   16a1c:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   16a20:	movw	r0, #58732	; 0xe56c
   16a24:	movt	r0, #1
   16a28:	bl	14390 <UnityPrint@@Base>
   16a2c:	mov	r0, r6
   16a30:	mov	r1, r8
   16a34:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   16a38:	movw	r0, #58743	; 0xe577
   16a3c:	movt	r0, #1
   16a40:	bl	14390 <UnityPrint@@Base>
   16a44:	mov	r0, r5
   16a48:	mov	r1, r8
   16a4c:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   16a50:	mov	r0, r9
   16a54:	bl	155e0 <UnityAssertBits@@Base+0x200>
   16a58:	mov	r0, #1
   16a5c:	mov	r1, #1
   16a60:	str	r0, [r4, #32]
   16a64:	add	r0, r4, #40	; 0x28
   16a68:	bl	1260c <longjmp@plt>

00016a6c <UnityAssertEqualString@@Base>:
   16a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a70:	add	fp, sp, #28
   16a74:	sub	sp, sp, #4
   16a78:	movw	lr, #2768	; 0xad0
   16a7c:	mov	sl, r1
   16a80:	mov	r9, r0
   16a84:	mov	r6, #16
   16a88:	movt	lr, #3
   16a8c:	ldrd	r0, [lr]
   16a90:	mov	r5, lr
   16a94:	adds	r0, r0, #1
   16a98:	adc	r1, r1, #0
   16a9c:	strd	r0, [lr]
   16aa0:	movw	r0, #5952	; 0x1740
   16aa4:	movt	r0, #3
   16aa8:	ldr	r8, [r0, #32]
   16aac:	ldr	r1, [r0, #36]	; 0x24
   16ab0:	orrs	r1, r1, r8
   16ab4:	movwne	r6, #8
   16ab8:	ldr	r6, [r5, r6]!
   16abc:	adds	r6, r6, #1
   16ac0:	str	r6, [r5]
   16ac4:	ldr	r6, [r5, #4]
   16ac8:	adc	r6, r6, #0
   16acc:	cmp	r1, #0
   16ad0:	str	r6, [r5, #4]
   16ad4:	beq	16aec <UnityAssertEqualString@@Base+0x80>
   16ad8:	ldrd	r2, [lr, #24]
   16adc:	adds	r2, r2, #1
   16ae0:	adc	r3, r3, #0
   16ae4:	strd	r2, [lr, #24]
   16ae8:	b	16ce8 <UnityAssertEqualString@@Base+0x27c>
   16aec:	cmp	sl, #0
   16af0:	mov	r1, sl
   16af4:	mov	r4, r9
   16af8:	mov	r6, #40	; 0x28
   16afc:	mov	r5, lr
   16b00:	str	r2, [sp]
   16b04:	movwne	r1, #1
   16b08:	cmp	r9, #0
   16b0c:	movwne	r4, #1
   16b10:	ands	r1, r4, r1
   16b14:	movwne	r6, #32
   16b18:	ldr	r6, [r5, r6]!
   16b1c:	adds	r6, r6, #1
   16b20:	str	r6, [r5]
   16b24:	ldr	r6, [r5, #4]
   16b28:	adc	r6, r6, #0
   16b2c:	cmp	r1, #1
   16b30:	str	r6, [r5, #4]
   16b34:	bne	16c78 <UnityAssertEqualString@@Base+0x20c>
   16b38:	ldrd	r4, [lr, #48]	; 0x30
   16b3c:	add	ip, lr, #104	; 0x68
   16b40:	mov	r6, r9
   16b44:	adds	r4, r4, #1
   16b48:	adc	r5, r5, #0
   16b4c:	strd	r4, [lr, #48]	; 0x30
   16b50:	mov	r5, sl
   16b54:	b	16b70 <UnityAssertEqualString@@Base+0x104>
   16b58:	ldrd	r0, [lr, #112]	; 0x70
   16b5c:	add	r6, r6, #1
   16b60:	add	r5, r5, #1
   16b64:	adds	r0, r0, #1
   16b68:	adc	r1, r1, #0
   16b6c:	strd	r0, [lr, #112]	; 0x70
   16b70:	ldrb	r4, [r6]
   16b74:	mov	r1, #64	; 0x40
   16b78:	mov	r0, lr
   16b7c:	cmp	r4, #0
   16b80:	movwne	r1, #56	; 0x38
   16b84:	ldr	r1, [r0, r1]!
   16b88:	adds	r1, r1, #1
   16b8c:	str	r1, [r0]
   16b90:	ldr	r1, [r0, #4]
   16b94:	adc	r1, r1, #0
   16b98:	cmp	r4, #0
   16b9c:	str	r1, [r0, #4]
   16ba0:	bne	16bd8 <UnityAssertEqualString@@Base+0x16c>
   16ba4:	ldrb	r0, [r5]
   16ba8:	mov	r1, #80	; 0x50
   16bac:	mov	r7, lr
   16bb0:	cmp	r0, #0
   16bb4:	movwne	r1, #72	; 0x48
   16bb8:	ldr	r1, [r7, r1]!
   16bbc:	adds	r1, r1, #1
   16bc0:	str	r1, [r7]
   16bc4:	ldr	r1, [r7, #4]
   16bc8:	adc	r1, r1, #0
   16bcc:	cmp	r0, #0
   16bd0:	str	r1, [r7, #4]
   16bd4:	beq	16ca8 <UnityAssertEqualString@@Base+0x23c>
   16bd8:	ldrb	r0, [r5]
   16bdc:	ldrb	r1, [r6]
   16be0:	mov	r4, #96	; 0x60
   16be4:	mov	r7, lr
   16be8:	cmp	r1, r0
   16bec:	movwne	r4, #88	; 0x58
   16bf0:	ldr	r4, [r7, r4]!
   16bf4:	adds	r4, r4, #1
   16bf8:	str	r4, [r7]
   16bfc:	ldr	r4, [r7, #4]
   16c00:	adc	r4, r4, #0
   16c04:	cmp	r1, r0
   16c08:	str	r4, [r7, #4]
   16c0c:	beq	16b58 <UnityAssertEqualString@@Base+0xec>
   16c10:	ldrd	r0, [ip]
   16c14:	adds	r0, r0, #1
   16c18:	adc	r1, r1, #0
   16c1c:	strd	r0, [ip]
   16c20:	movw	r1, #5952	; 0x1740
   16c24:	mov	r0, #1
   16c28:	movt	r1, #3
   16c2c:	str	r0, [r1, #32]
   16c30:	ldrd	r0, [lr, #144]	; 0x90
   16c34:	adds	r0, r0, #1
   16c38:	adc	r1, r1, #0
   16c3c:	strd	r0, [lr, #144]	; 0x90
   16c40:	mov	r0, r3
   16c44:	bl	154f0 <UnityAssertBits@@Base+0x110>
   16c48:	mov	r0, r9
   16c4c:	mov	r1, sl
   16c50:	bl	16d10 <UnityAssertEqualString@@Base+0x2a4>
   16c54:	ldr	r0, [sp]
   16c58:	bl	155e0 <UnityAssertBits@@Base+0x200>
   16c5c:	movw	r1, #5952	; 0x1740
   16c60:	mov	r0, #1
   16c64:	movt	r1, #3
   16c68:	str	r0, [r1, #32]
   16c6c:	add	r0, r1, #40	; 0x28
   16c70:	mov	r1, #1
   16c74:	bl	1260c <longjmp@plt>
   16c78:	mov	r0, #128	; 0x80
   16c7c:	cmp	r9, sl
   16c80:	mov	r1, lr
   16c84:	movwne	r0, #120	; 0x78
   16c88:	ldr	r0, [r1, r0]!
   16c8c:	adds	r0, r0, #1
   16c90:	str	r0, [r1]
   16c94:	ldr	r0, [r1, #4]
   16c98:	adc	r0, r0, #0
   16c9c:	cmp	r9, sl
   16ca0:	str	r0, [r1, #4]
   16ca4:	bne	16d00 <UnityAssertEqualString@@Base+0x294>
   16ca8:	mov	r0, #152	; 0x98
   16cac:	cmp	r8, #0
   16cb0:	mov	r1, lr
   16cb4:	movwne	r0, #144	; 0x90
   16cb8:	ldr	r0, [r1, r0]!
   16cbc:	adds	r0, r0, #1
   16cc0:	str	r0, [r1]
   16cc4:	ldr	r0, [r1, #4]
   16cc8:	adc	r0, r0, #0
   16ccc:	cmp	r8, #0
   16cd0:	str	r0, [r1, #4]
   16cd4:	bne	16c40 <UnityAssertEqualString@@Base+0x1d4>
   16cd8:	ldrd	r0, [lr, #160]	; 0xa0
   16cdc:	adds	r0, r0, #1
   16ce0:	adc	r1, r1, #0
   16ce4:	strd	r0, [lr, #160]	; 0xa0
   16ce8:	ldrd	r0, [lr, #168]	; 0xa8
   16cec:	adds	r0, r0, #1
   16cf0:	adc	r1, r1, #0
   16cf4:	strd	r0, [lr, #168]	; 0xa8
   16cf8:	sub	sp, fp, #28
   16cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d00:	add	ip, lr, #136	; 0x88
   16d04:	b	16c10 <UnityAssertEqualString@@Base+0x1a4>
   16d08:	nop	{0}
   16d0c:	nop	{0}
   16d10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d14:	add	fp, sp, #24
   16d18:	vpush	{d8-d9}
   16d1c:	movw	r6, #2944	; 0xb80
   16d20:	mov	r4, r1
   16d24:	mov	r5, r0
   16d28:	movt	r6, #3
   16d2c:	ldrd	r0, [r6]
   16d30:	adds	r0, r0, #1
   16d34:	adc	r1, r1, #0
   16d38:	strd	r0, [r6]
   16d3c:	movw	r0, #58732	; 0xe56c
   16d40:	movt	r0, #1
   16d44:	bl	14390 <UnityPrint@@Base>
   16d48:	mov	r0, #16
   16d4c:	cmp	r5, #0
   16d50:	mov	r1, r6
   16d54:	movwne	r0, #8
   16d58:	ldr	r0, [r1, r0]!
   16d5c:	adds	r0, r0, #1
   16d60:	str	r0, [r1]
   16d64:	ldr	r0, [r1, #4]
   16d68:	adc	r0, r0, #0
   16d6c:	cmp	r5, #0
   16d70:	str	r0, [r1, #4]
   16d74:	beq	16ddc <UnityAssertEqualString@@Base+0x370>
   16d78:	add	r0, pc, #336	; 0x150
   16d7c:	movw	r7, #3936	; 0xf60
   16d80:	movw	r8, #228	; 0xe4
   16d84:	vld1.64	{d8-d9}, [r0 :128]
   16d88:	ldrd	r0, [r6, #24]
   16d8c:	movt	r7, #3
   16d90:	movt	r8, #3
   16d94:	vld1.64	{d16-d17}, [r7 :128]
   16d98:	adds	r0, r0, #1
   16d9c:	adc	r1, r1, #0
   16da0:	vadd.i64	q8, q8, q4
   16da4:	strd	r0, [r6, #24]
   16da8:	ldr	r1, [r8]
   16dac:	mov	r0, #39	; 0x27
   16db0:	vst1.64	{d16-d17}, [r7 :128]
   16db4:	bl	127b0 <putc@plt>
   16db8:	mov	r0, r5
   16dbc:	bl	14390 <UnityPrint@@Base>
   16dc0:	vld1.64	{d16-d17}, [r7 :128]
   16dc4:	ldr	r1, [r8]
   16dc8:	mov	r0, #39	; 0x27
   16dcc:	vadd.i64	q8, q8, q4
   16dd0:	vst1.64	{d16-d17}, [r7 :128]
   16dd4:	bl	127b0 <putc@plt>
   16dd8:	b	16df8 <UnityAssertEqualString@@Base+0x38c>
   16ddc:	ldrd	r0, [r6, #32]
   16de0:	adds	r0, r0, #1
   16de4:	adc	r1, r1, #0
   16de8:	strd	r0, [r6, #32]
   16dec:	movw	r0, #58724	; 0xe564
   16df0:	movt	r0, #1
   16df4:	bl	14390 <UnityPrint@@Base>
   16df8:	movw	r0, #58743	; 0xe577
   16dfc:	movt	r0, #1
   16e00:	bl	14390 <UnityPrint@@Base>
   16e04:	mov	r0, #48	; 0x30
   16e08:	cmp	r4, #0
   16e0c:	mov	r1, r6
   16e10:	movwne	r0, #40	; 0x28
   16e14:	ldr	r0, [r1, r0]!
   16e18:	adds	r0, r0, #1
   16e1c:	str	r0, [r1]
   16e20:	ldr	r0, [r1, #4]
   16e24:	adc	r0, r0, #0
   16e28:	cmp	r4, #0
   16e2c:	str	r0, [r1, #4]
   16e30:	beq	16e98 <UnityAssertEqualString@@Base+0x42c>
   16e34:	add	r0, pc, #148	; 0x94
   16e38:	movw	r5, #3936	; 0xf60
   16e3c:	movw	r7, #228	; 0xe4
   16e40:	vld1.64	{d8-d9}, [r0 :128]
   16e44:	ldrd	r0, [r6, #56]	; 0x38
   16e48:	movt	r5, #3
   16e4c:	movt	r7, #3
   16e50:	vld1.64	{d16-d17}, [r5 :128]
   16e54:	adds	r0, r0, #1
   16e58:	adc	r1, r1, #0
   16e5c:	vadd.i64	q8, q8, q4
   16e60:	strd	r0, [r6, #56]	; 0x38
   16e64:	ldr	r1, [r7]
   16e68:	mov	r0, #39	; 0x27
   16e6c:	vst1.64	{d16-d17}, [r5 :128]
   16e70:	bl	127b0 <putc@plt>
   16e74:	mov	r0, r4
   16e78:	bl	14390 <UnityPrint@@Base>
   16e7c:	vld1.64	{d16-d17}, [r5 :128]
   16e80:	ldr	r1, [r7]
   16e84:	mov	r0, #39	; 0x27
   16e88:	vadd.i64	q8, q8, q4
   16e8c:	vst1.64	{d16-d17}, [r5 :128]
   16e90:	bl	127b0 <putc@plt>
   16e94:	b	16eb4 <UnityAssertEqualString@@Base+0x448>
   16e98:	ldrd	r0, [r6, #64]	; 0x40
   16e9c:	adds	r0, r0, #1
   16ea0:	adc	r1, r1, #0
   16ea4:	strd	r0, [r6, #64]	; 0x40
   16ea8:	movw	r0, #58724	; 0xe564
   16eac:	movt	r0, #1
   16eb0:	bl	14390 <UnityPrint@@Base>
   16eb4:	ldrd	r0, [r6, #72]	; 0x48
   16eb8:	adds	r0, r0, #1
   16ebc:	adc	r1, r1, #0
   16ec0:	strd	r0, [r6, #72]	; 0x48
   16ec4:	vpop	{d8-d9}
   16ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ecc:	nop	{0}
   16ed0:	andeq	r0, r0, r1
   16ed4:	andeq	r0, r0, r0
   16ed8:	andeq	r0, r0, r1
   16edc:	andeq	r0, r0, r0

00016ee0 <UnityAssertEqualStringLen@@Base>:
   16ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ee4:	add	fp, sp, #28
   16ee8:	sub	sp, sp, #4
   16eec:	movw	r7, #3024	; 0xbd0
   16ef0:	mov	lr, r3
   16ef4:	mov	r8, r2
   16ef8:	mov	r9, r0
   16efc:	movw	r0, #5952	; 0x1740
   16f00:	mov	sl, r1
   16f04:	movt	r7, #3
   16f08:	movt	r0, #3
   16f0c:	ldrd	r2, [r7]
   16f10:	adds	r2, r2, #1
   16f14:	adc	r3, r3, #0
   16f18:	strd	r2, [r7]
   16f1c:	ldrd	r2, [r0, #32]
   16f20:	mov	r0, r7
   16f24:	orrs	r1, r3, r2
   16f28:	mov	r3, #16
   16f2c:	movwne	r3, #8
   16f30:	ldr	r3, [r0, r3]!
   16f34:	adds	r3, r3, #1
   16f38:	str	r3, [r0]
   16f3c:	ldr	r3, [r0, #4]
   16f40:	adc	r3, r3, #0
   16f44:	cmp	r1, #0
   16f48:	str	r3, [r0, #4]
   16f4c:	beq	16f64 <UnityAssertEqualStringLen@@Base+0x84>
   16f50:	ldrd	r0, [r7, #24]
   16f54:	adds	r0, r0, #1
   16f58:	adc	r1, r1, #0
   16f5c:	strd	r0, [r7, #24]
   16f60:	b	1718c <UnityAssertEqualStringLen@@Base+0x2ac>
   16f64:	cmp	sl, #0
   16f68:	mov	r0, sl
   16f6c:	mov	r1, r9
   16f70:	mov	r3, r7
   16f74:	movwne	r0, #1
   16f78:	cmp	r9, #0
   16f7c:	movwne	r1, #1
   16f80:	ands	r0, r1, r0
   16f84:	mov	r1, #40	; 0x28
   16f88:	movwne	r1, #32
   16f8c:	ldr	r1, [r3, r1]!
   16f90:	adds	r1, r1, #1
   16f94:	str	r1, [r3]
   16f98:	ldr	r1, [r3, #4]
   16f9c:	adc	r1, r1, #0
   16fa0:	cmp	r0, #1
   16fa4:	str	r1, [r3, #4]
   16fa8:	bne	1711c <UnityAssertEqualStringLen@@Base+0x23c>
   16fac:	ldrd	r0, [r7, #48]	; 0x30
   16fb0:	mov	r3, #0
   16fb4:	add	ip, r7, #120	; 0x78
   16fb8:	adds	r0, r0, #1
   16fbc:	adc	r1, r1, #0
   16fc0:	strd	r0, [r7, #48]	; 0x30
   16fc4:	b	16fdc <UnityAssertEqualStringLen@@Base+0xfc>
   16fc8:	ldrd	r0, [r7, #128]	; 0x80
   16fcc:	add	r3, r3, #1
   16fd0:	adds	r0, r0, #1
   16fd4:	adc	r1, r1, #0
   16fd8:	strd	r0, [r7, #128]	; 0x80
   16fdc:	ldrb	r0, [r9, r3]
   16fe0:	mov	r1, #64	; 0x40
   16fe4:	mov	r4, r7
   16fe8:	cmp	r0, #0
   16fec:	movwne	r1, #56	; 0x38
   16ff0:	ldr	r1, [r4, r1]!
   16ff4:	adds	r1, r1, #1
   16ff8:	str	r1, [r4]
   16ffc:	ldr	r1, [r4, #4]
   17000:	adc	r1, r1, #0
   17004:	cmp	r0, #0
   17008:	str	r1, [r4, #4]
   1700c:	bne	17044 <UnityAssertEqualStringLen@@Base+0x164>
   17010:	ldrb	r0, [sl, r3]
   17014:	mov	r1, #80	; 0x50
   17018:	mov	r6, r7
   1701c:	cmp	r0, #0
   17020:	movwne	r1, #72	; 0x48
   17024:	ldr	r1, [r6, r1]!
   17028:	adds	r1, r1, #1
   1702c:	str	r1, [r6]
   17030:	ldr	r1, [r6, #4]
   17034:	adc	r1, r1, #0
   17038:	cmp	r0, #0
   1703c:	str	r1, [r6, #4]
   17040:	beq	1714c <UnityAssertEqualStringLen@@Base+0x26c>
   17044:	cmp	r3, r8
   17048:	mov	r0, #96	; 0x60
   1704c:	mov	r1, r7
   17050:	movwcc	r0, #88	; 0x58
   17054:	ldr	r0, [r1, r0]!
   17058:	adds	r0, r0, #1
   1705c:	str	r0, [r1]
   17060:	ldr	r0, [r1, #4]
   17064:	adc	r0, r0, #0
   17068:	cmp	r3, r8
   1706c:	str	r0, [r1, #4]
   17070:	bcs	1714c <UnityAssertEqualStringLen@@Base+0x26c>
   17074:	ldrb	r0, [sl, r3]
   17078:	ldrb	r1, [r9, r3]
   1707c:	mov	r6, #112	; 0x70
   17080:	mov	r5, r7
   17084:	cmp	r1, r0
   17088:	movwne	r6, #104	; 0x68
   1708c:	ldr	r6, [r5, r6]!
   17090:	adds	r6, r6, #1
   17094:	str	r6, [r5]
   17098:	ldr	r6, [r5, #4]
   1709c:	adc	r6, r6, #0
   170a0:	cmp	r1, r0
   170a4:	str	r6, [r5, #4]
   170a8:	beq	16fc8 <UnityAssertEqualStringLen@@Base+0xe8>
   170ac:	ldrd	r0, [ip]
   170b0:	adds	r0, r0, #1
   170b4:	adc	r1, r1, #0
   170b8:	strd	r0, [ip]
   170bc:	movw	r1, #5952	; 0x1740
   170c0:	mov	r0, #1
   170c4:	movt	r1, #3
   170c8:	str	r0, [r1, #32]
   170cc:	ldrd	r0, [r7, #160]	; 0xa0
   170d0:	adds	r0, r0, #1
   170d4:	adc	r1, r1, #0
   170d8:	strd	r0, [r7, #160]	; 0xa0
   170dc:	ldr	r0, [fp, #8]
   170e0:	mov	r4, lr
   170e4:	bl	154f0 <UnityAssertBits@@Base+0x110>
   170e8:	mov	r0, r9
   170ec:	mov	r1, sl
   170f0:	mov	r2, r8
   170f4:	bl	171b0 <UnityAssertEqualStringLen@@Base+0x2d0>
   170f8:	mov	r0, r4
   170fc:	bl	155e0 <UnityAssertBits@@Base+0x200>
   17100:	movw	r1, #5952	; 0x1740
   17104:	mov	r0, #1
   17108:	movt	r1, #3
   1710c:	str	r0, [r1, #32]
   17110:	add	r0, r1, #40	; 0x28
   17114:	mov	r1, #1
   17118:	bl	1260c <longjmp@plt>
   1711c:	mov	r0, #144	; 0x90
   17120:	cmp	r9, sl
   17124:	mov	r1, r7
   17128:	movwne	r0, #136	; 0x88
   1712c:	ldr	r0, [r1, r0]!
   17130:	adds	r0, r0, #1
   17134:	str	r0, [r1]
   17138:	ldr	r0, [r1, #4]
   1713c:	adc	r0, r0, #0
   17140:	cmp	r9, sl
   17144:	str	r0, [r1, #4]
   17148:	bne	171a4 <UnityAssertEqualStringLen@@Base+0x2c4>
   1714c:	mov	r0, #168	; 0xa8
   17150:	cmp	r2, #0
   17154:	mov	r1, r7
   17158:	movwne	r0, #160	; 0xa0
   1715c:	ldr	r0, [r1, r0]!
   17160:	adds	r0, r0, #1
   17164:	str	r0, [r1]
   17168:	ldr	r0, [r1, #4]
   1716c:	adc	r0, r0, #0
   17170:	cmp	r2, #0
   17174:	str	r0, [r1, #4]
   17178:	bne	170dc <UnityAssertEqualStringLen@@Base+0x1fc>
   1717c:	ldrd	r0, [r7, #176]	; 0xb0
   17180:	adds	r0, r0, #1
   17184:	adc	r1, r1, #0
   17188:	strd	r0, [r7, #176]	; 0xb0
   1718c:	ldrd	r0, [r7, #184]	; 0xb8
   17190:	adds	r0, r0, #1
   17194:	adc	r1, r1, #0
   17198:	strd	r0, [r7, #184]	; 0xb8
   1719c:	sub	sp, fp, #28
   171a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a4:	add	ip, r7, #152	; 0x98
   171a8:	b	170ac <UnityAssertEqualStringLen@@Base+0x1cc>
   171ac:	nop	{0}
   171b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   171b4:	add	fp, sp, #24
   171b8:	vpush	{d8-d9}
   171bc:	movw	r7, #3216	; 0xc90
   171c0:	mov	r5, r1
   171c4:	mov	r6, r0
   171c8:	mov	r8, r2
   171cc:	movt	r7, #3
   171d0:	ldrd	r0, [r7]
   171d4:	adds	r0, r0, #1
   171d8:	adc	r1, r1, #0
   171dc:	strd	r0, [r7]
   171e0:	movw	r0, #58732	; 0xe56c
   171e4:	movt	r0, #1
   171e8:	bl	14390 <UnityPrint@@Base>
   171ec:	mov	r0, #16
   171f0:	cmp	r6, #0
   171f4:	mov	r1, r7
   171f8:	movwne	r0, #8
   171fc:	ldr	r0, [r1, r0]!
   17200:	adds	r0, r0, #1
   17204:	str	r0, [r1]
   17208:	ldr	r0, [r1, #4]
   1720c:	adc	r0, r0, #0
   17210:	cmp	r6, #0
   17214:	str	r0, [r1, #4]
   17218:	beq	17284 <UnityAssertEqualStringLen@@Base+0x3a4>
   1721c:	add	r0, pc, #348	; 0x15c
   17220:	movw	r4, #3936	; 0xf60
   17224:	movw	r9, #228	; 0xe4
   17228:	vld1.64	{d8-d9}, [r0 :128]
   1722c:	ldrd	r0, [r7, #24]
   17230:	movt	r4, #3
   17234:	movt	r9, #3
   17238:	vld1.64	{d16-d17}, [r4 :128]
   1723c:	adds	r0, r0, #1
   17240:	adc	r1, r1, #0
   17244:	vadd.i64	q8, q8, q4
   17248:	strd	r0, [r7, #24]
   1724c:	ldr	r1, [r9]
   17250:	mov	r0, #39	; 0x27
   17254:	vst1.64	{d16-d17}, [r4 :128]
   17258:	bl	127b0 <putc@plt>
   1725c:	mov	r0, r6
   17260:	mov	r1, r8
   17264:	bl	14800 <UnityPrintLen@@Base>
   17268:	vld1.64	{d16-d17}, [r4 :128]
   1726c:	ldr	r1, [r9]
   17270:	mov	r0, #39	; 0x27
   17274:	vadd.i64	q8, q8, q4
   17278:	vst1.64	{d16-d17}, [r4 :128]
   1727c:	bl	127b0 <putc@plt>
   17280:	b	172a0 <UnityAssertEqualStringLen@@Base+0x3c0>
   17284:	ldrd	r0, [r7, #32]
   17288:	adds	r0, r0, #1
   1728c:	adc	r1, r1, #0
   17290:	strd	r0, [r7, #32]
   17294:	movw	r0, #58724	; 0xe564
   17298:	movt	r0, #1
   1729c:	bl	14390 <UnityPrint@@Base>
   172a0:	movw	r0, #58743	; 0xe577
   172a4:	movt	r0, #1
   172a8:	bl	14390 <UnityPrint@@Base>
   172ac:	mov	r0, #48	; 0x30
   172b0:	cmp	r5, #0
   172b4:	mov	r1, r7
   172b8:	movwne	r0, #40	; 0x28
   172bc:	ldr	r0, [r1, r0]!
   172c0:	adds	r0, r0, #1
   172c4:	str	r0, [r1]
   172c8:	ldr	r0, [r1, #4]
   172cc:	adc	r0, r0, #0
   172d0:	cmp	r5, #0
   172d4:	str	r0, [r1, #4]
   172d8:	beq	17344 <UnityAssertEqualStringLen@@Base+0x464>
   172dc:	add	r0, pc, #156	; 0x9c
   172e0:	movw	r4, #3936	; 0xf60
   172e4:	movw	r6, #228	; 0xe4
   172e8:	vld1.64	{d8-d9}, [r0 :128]
   172ec:	ldrd	r0, [r7, #56]	; 0x38
   172f0:	movt	r4, #3
   172f4:	movt	r6, #3
   172f8:	vld1.64	{d16-d17}, [r4 :128]
   172fc:	adds	r0, r0, #1
   17300:	adc	r1, r1, #0
   17304:	vadd.i64	q8, q8, q4
   17308:	strd	r0, [r7, #56]	; 0x38
   1730c:	ldr	r1, [r6]
   17310:	mov	r0, #39	; 0x27
   17314:	vst1.64	{d16-d17}, [r4 :128]
   17318:	bl	127b0 <putc@plt>
   1731c:	mov	r0, r5
   17320:	mov	r1, r8
   17324:	bl	14800 <UnityPrintLen@@Base>
   17328:	vld1.64	{d16-d17}, [r4 :128]
   1732c:	ldr	r1, [r6]
   17330:	mov	r0, #39	; 0x27
   17334:	vadd.i64	q8, q8, q4
   17338:	vst1.64	{d16-d17}, [r4 :128]
   1733c:	bl	127b0 <putc@plt>
   17340:	b	17360 <UnityAssertEqualStringLen@@Base+0x480>
   17344:	ldrd	r0, [r7, #64]	; 0x40
   17348:	adds	r0, r0, #1
   1734c:	adc	r1, r1, #0
   17350:	strd	r0, [r7, #64]	; 0x40
   17354:	movw	r0, #58724	; 0xe564
   17358:	movt	r0, #1
   1735c:	bl	14390 <UnityPrint@@Base>
   17360:	ldrd	r0, [r7, #72]	; 0x48
   17364:	adds	r0, r0, #1
   17368:	adc	r1, r1, #0
   1736c:	strd	r0, [r7, #72]	; 0x48
   17370:	vpop	{d8-d9}
   17374:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17378:	nop	{0}
   1737c:	nop	{0}
   17380:	andeq	r0, r0, r1
   17384:	andeq	r0, r0, r0
   17388:	andeq	r0, r0, r1
   1738c:	andeq	r0, r0, r0

00017390 <UnityAssertEqualStringArray@@Base>:
   17390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17394:	add	fp, sp, #28
   17398:	sub	sp, sp, #4
   1739c:	movw	r8, #3296	; 0xce0
   173a0:	mov	r6, r1
   173a4:	mov	r5, r0
   173a8:	movw	sl, #5952	; 0x1740
   173ac:	mov	r9, r2
   173b0:	movt	r8, #3
   173b4:	movt	sl, #3
   173b8:	ldrd	r0, [r8]
   173bc:	mov	r2, r8
   173c0:	adds	r0, r0, #1
   173c4:	adc	r1, r1, #0
   173c8:	strd	r0, [r8]
   173cc:	ldrd	r0, [sl, #32]
   173d0:	orrs	r0, r1, r0
   173d4:	mov	r1, #16
   173d8:	movwne	r1, #8
   173dc:	ldr	r1, [r2, r1]!
   173e0:	adds	r1, r1, #1
   173e4:	str	r1, [r2]
   173e8:	ldr	r1, [r2, #4]
   173ec:	adc	r1, r1, #0
   173f0:	cmp	r0, #0
   173f4:	str	r1, [r2, #4]
   173f8:	beq	17410 <UnityAssertEqualStringArray@@Base+0x80>
   173fc:	ldrd	r0, [r8, #24]
   17400:	adds	r0, r0, #1
   17404:	adc	r1, r1, #0
   17408:	strd	r0, [r8, #24]
   1740c:	b	176a4 <UnityAssertEqualStringArray@@Base+0x314>
   17410:	mov	r0, #40	; 0x28
   17414:	cmp	r9, #0
   17418:	mov	r1, r8
   1741c:	ldr	r2, [fp, #8]
   17420:	mov	r4, r3
   17424:	movweq	r0, #32
   17428:	ldr	r0, [r1, r0]!
   1742c:	adds	r0, r0, #1
   17430:	str	r0, [r1]
   17434:	ldr	r0, [r1, #4]
   17438:	adc	r0, r0, #0
   1743c:	cmp	r9, #0
   17440:	str	r0, [r1, #4]
   17444:	beq	1777c <UnityAssertEqualStringArray@@Base+0x3ec>
   17448:	mov	r0, r5
   1744c:	mov	r1, r6
   17450:	mov	r3, r4
   17454:	bl	15e30 <UnityAssertEqualIntArray@@Base+0x5e0>
   17458:	mov	r1, #56	; 0x38
   1745c:	cmp	r0, #1
   17460:	mov	r2, r8
   17464:	movweq	r1, #48	; 0x30
   17468:	ldr	r1, [r2, r1]!
   1746c:	adds	r1, r1, #1
   17470:	str	r1, [r2]
   17474:	ldr	r1, [r2, #4]
   17478:	adc	r1, r1, #0
   1747c:	cmp	r0, #1
   17480:	str	r1, [r2, #4]
   17484:	bne	1749c <UnityAssertEqualStringArray@@Base+0x10c>
   17488:	ldrd	r0, [r8, #64]	; 0x40
   1748c:	adds	r0, r0, #1
   17490:	adc	r1, r1, #0
   17494:	strd	r0, [r8, #64]	; 0x40
   17498:	b	176a4 <UnityAssertEqualStringArray@@Base+0x314>
   1749c:	str	r4, [sp]
   174a0:	mov	r4, #0
   174a4:	ldr	r0, [r5, r4, lsl #2]
   174a8:	mov	r1, #80	; 0x50
   174ac:	mov	r2, r8
   174b0:	cmp	r0, #0
   174b4:	movwne	r1, #72	; 0x48
   174b8:	ldr	r1, [r2, r1]!
   174bc:	adds	r1, r1, #1
   174c0:	str	r1, [r2]
   174c4:	ldr	r1, [r2, #4]
   174c8:	adc	r1, r1, #0
   174cc:	cmp	r0, #0
   174d0:	str	r1, [r2, #4]
   174d4:	beq	175ec <UnityAssertEqualStringArray@@Base+0x25c>
   174d8:	ldr	r0, [r6, r4, lsl #2]
   174dc:	mov	r1, #96	; 0x60
   174e0:	mov	r2, r8
   174e4:	cmp	r0, #0
   174e8:	movwne	r1, #88	; 0x58
   174ec:	ldr	r1, [r2, r1]!
   174f0:	adds	r1, r1, #1
   174f4:	str	r1, [r2]
   174f8:	ldr	r1, [r2, #4]
   174fc:	adc	r1, r1, #0
   17500:	cmp	r0, #0
   17504:	str	r1, [r2, #4]
   17508:	beq	175ec <UnityAssertEqualStringArray@@Base+0x25c>
   1750c:	ldrd	r0, [r8, #104]	; 0x68
   17510:	adds	r0, r0, #1
   17514:	adc	r1, r1, #0
   17518:	strd	r0, [r8, #104]	; 0x68
   1751c:	mov	r0, #0
   17520:	b	17538 <UnityAssertEqualStringArray@@Base+0x1a8>
   17524:	ldrd	r2, [r8, #168]	; 0xa8
   17528:	add	r0, r0, #1
   1752c:	adds	r2, r2, #1
   17530:	adc	r3, r3, #0
   17534:	strd	r2, [r8, #168]	; 0xa8
   17538:	ldr	r1, [r5, r4, lsl #2]
   1753c:	mov	r2, #120	; 0x78
   17540:	mov	r3, r8
   17544:	ldrb	r1, [r1, r0]
   17548:	cmp	r1, #0
   1754c:	movwne	r2, #112	; 0x70
   17550:	ldr	r2, [r3, r2]!
   17554:	adds	r2, r2, #1
   17558:	str	r2, [r3]
   1755c:	ldr	r2, [r3, #4]
   17560:	adc	r2, r2, #0
   17564:	cmp	r1, #0
   17568:	str	r2, [r3, #4]
   1756c:	bne	175a8 <UnityAssertEqualStringArray@@Base+0x218>
   17570:	ldr	r1, [r6, r4, lsl #2]
   17574:	mov	r2, #136	; 0x88
   17578:	mov	r3, r8
   1757c:	ldrb	r1, [r1, r0]
   17580:	cmp	r1, #0
   17584:	movwne	r2, #128	; 0x80
   17588:	ldr	r2, [r3, r2]!
   1758c:	adds	r2, r2, #1
   17590:	str	r2, [r3]
   17594:	ldr	r2, [r3, #4]
   17598:	adc	r2, r2, #0
   1759c:	cmp	r1, #0
   175a0:	str	r2, [r3, #4]
   175a4:	beq	17624 <UnityAssertEqualStringArray@@Base+0x294>
   175a8:	ldr	r1, [r6, r4, lsl #2]
   175ac:	ldr	r2, [r5, r4, lsl #2]
   175b0:	mov	r3, #152	; 0x98
   175b4:	mov	r7, r8
   175b8:	ldrb	r1, [r1, r0]
   175bc:	ldrb	r2, [r2, r0]
   175c0:	cmp	r2, r1
   175c4:	movwne	r3, #144	; 0x90
   175c8:	ldr	r3, [r7, r3]!
   175cc:	adds	r3, r3, #1
   175d0:	str	r3, [r7]
   175d4:	ldr	r3, [r7, #4]
   175d8:	adc	r3, r3, #0
   175dc:	cmp	r2, r1
   175e0:	str	r3, [r7, #4]
   175e4:	beq	17524 <UnityAssertEqualStringArray@@Base+0x194>
   175e8:	b	176c4 <UnityAssertEqualStringArray@@Base+0x334>
   175ec:	ldr	r0, [r6, r4, lsl #2]
   175f0:	ldr	r1, [r5, r4, lsl #2]
   175f4:	mov	r2, #184	; 0xb8
   175f8:	mov	r3, r8
   175fc:	cmp	r1, r0
   17600:	movwne	r2, #176	; 0xb0
   17604:	ldr	r2, [r3, r2]!
   17608:	adds	r2, r2, #1
   1760c:	str	r2, [r3]
   17610:	ldr	r2, [r3, #4]
   17614:	adc	r2, r2, #0
   17618:	cmp	r1, r0
   1761c:	str	r2, [r3, #4]
   17620:	bne	17774 <UnityAssertEqualStringArray@@Base+0x3e4>
   17624:	ldr	r0, [sl, #32]
   17628:	mov	r1, #208	; 0xd0
   1762c:	mov	r2, r8
   17630:	cmp	r0, #0
   17634:	movwne	r1, #200	; 0xc8
   17638:	ldr	r1, [r2, r1]!
   1763c:	adds	r1, r1, #1
   17640:	str	r1, [r2]
   17644:	ldr	r1, [r2, #4]
   17648:	adc	r1, r1, #0
   1764c:	cmp	r0, #0
   17650:	str	r1, [r2, #4]
   17654:	bne	176f0 <UnityAssertEqualStringArray@@Base+0x360>
   17658:	add	r4, r4, #1
   1765c:	mov	r0, #248	; 0xf8
   17660:	mov	r1, r8
   17664:	cmp	r4, r9
   17668:	movwcc	r0, #240	; 0xf0
   1766c:	ldr	r0, [r1, r0]!
   17670:	adds	r0, r0, #1
   17674:	str	r0, [r1]
   17678:	ldr	r0, [r1, #4]
   1767c:	adc	r0, r0, #0
   17680:	cmp	r4, r9
   17684:	str	r0, [r1, #4]
   17688:	bcc	174a4 <UnityAssertEqualStringArray@@Base+0x114>
   1768c:	ldr	r0, [r8, #256]	; 0x100
   17690:	ldr	r1, [r8, #260]	; 0x104
   17694:	adds	r0, r0, #1
   17698:	adc	r1, r1, #0
   1769c:	str	r0, [r8, #256]	; 0x100
   176a0:	str	r1, [r8, #260]	; 0x104
   176a4:	ldr	r0, [r8, #264]	; 0x108
   176a8:	ldr	r1, [r8, #268]	; 0x10c
   176ac:	adds	r0, r0, #1
   176b0:	adc	r1, r1, #0
   176b4:	str	r0, [r8, #264]	; 0x108
   176b8:	str	r1, [r8, #268]	; 0x10c
   176bc:	sub	sp, fp, #28
   176c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c4:	add	r0, r8, #160	; 0xa0
   176c8:	ldrd	r2, [r0]
   176cc:	adds	r2, r2, #1
   176d0:	adc	r3, r3, #0
   176d4:	strd	r2, [r0]
   176d8:	mov	r0, #1
   176dc:	str	r0, [sl, #32]
   176e0:	ldrd	r0, [r8, #200]	; 0xc8
   176e4:	adds	r0, r0, #1
   176e8:	adc	r1, r1, #0
   176ec:	strd	r0, [r8, #200]	; 0xc8
   176f0:	ldr	r0, [fp, #8]
   176f4:	bl	154f0 <UnityAssertBits@@Base+0x110>
   176f8:	mov	r0, #224	; 0xe0
   176fc:	cmp	r9, #1
   17700:	mov	r1, r8
   17704:	movwhi	r0, #216	; 0xd8
   17708:	ldr	r0, [r1, r0]!
   1770c:	adds	r0, r0, #1
   17710:	str	r0, [r1]
   17714:	ldr	r0, [r1, #4]
   17718:	adc	r0, r0, #0
   1771c:	cmp	r9, #2
   17720:	str	r0, [r1, #4]
   17724:	bcc	1774c <UnityAssertEqualStringArray@@Base+0x3bc>
   17728:	ldrd	r0, [r8, #232]	; 0xe8
   1772c:	adds	r0, r0, #1
   17730:	adc	r1, r1, #0
   17734:	strd	r0, [r8, #232]	; 0xe8
   17738:	movw	r0, #58754	; 0xe582
   1773c:	movt	r0, #1
   17740:	bl	14390 <UnityPrint@@Base>
   17744:	mov	r0, r4
   17748:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   1774c:	ldr	r1, [r6, r4, lsl #2]
   17750:	ldr	r0, [r5, r4, lsl #2]
   17754:	bl	16d10 <UnityAssertEqualString@@Base+0x2a4>
   17758:	ldr	r0, [sp]
   1775c:	bl	155e0 <UnityAssertBits@@Base+0x200>
   17760:	mov	r0, #1
   17764:	mov	r1, #1
   17768:	str	r0, [sl, #32]
   1776c:	add	r0, sl, #40	; 0x28
   17770:	bl	1260c <longjmp@plt>
   17774:	add	r0, r8, #192	; 0xc0
   17778:	b	176c8 <UnityAssertEqualStringArray@@Base+0x338>
   1777c:	mov	r0, r2
   17780:	bl	154f0 <UnityAssertBits@@Base+0x110>
   17784:	movw	r0, #58815	; 0xe5bf
   17788:	movt	r0, #1
   1778c:	bl	14390 <UnityPrint@@Base>
   17790:	mov	r0, r4
   17794:	b	1775c <UnityAssertEqualStringArray@@Base+0x3cc>
   17798:	nop	{0}
   1779c:	nop	{0}

000177a0 <UnityAssertEqualMemory@@Base>:
   177a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177a4:	add	fp, sp, #28
   177a8:	sub	sp, sp, #12
   177ac:	movw	sl, #3568	; 0xdf0
   177b0:	mov	r4, r1
   177b4:	mov	r6, r0
   177b8:	movw	r9, #5952	; 0x1740
   177bc:	mov	r7, r2
   177c0:	movt	sl, #3
   177c4:	movt	r9, #3
   177c8:	ldrd	r0, [sl]
   177cc:	mov	r2, sl
   177d0:	adds	r0, r0, #1
   177d4:	adc	r1, r1, #0
   177d8:	strd	r0, [sl]
   177dc:	ldrd	r0, [r9, #32]
   177e0:	orrs	r0, r1, r0
   177e4:	mov	r1, #16
   177e8:	movwne	r1, #8
   177ec:	ldr	r1, [r2, r1]!
   177f0:	adds	r1, r1, #1
   177f4:	str	r1, [r2]
   177f8:	ldr	r1, [r2, #4]
   177fc:	adc	r1, r1, #0
   17800:	cmp	r0, #0
   17804:	str	r1, [r2, #4]
   17808:	beq	17820 <UnityAssertEqualMemory@@Base+0x80>
   1780c:	ldrd	r0, [sl, #24]
   17810:	adds	r0, r0, #1
   17814:	adc	r1, r1, #0
   17818:	strd	r0, [sl, #24]
   1781c:	b	179fc <UnityAssertEqualMemory@@Base+0x25c>
   17820:	clz	r0, r3
   17824:	clz	r1, r7
   17828:	mov	r5, r3
   1782c:	mov	r3, sl
   17830:	ldr	r2, [fp, #12]
   17834:	ldr	r8, [fp, #8]
   17838:	lsr	r0, r0, #5
   1783c:	lsr	r1, r1, #5
   17840:	orrs	r0, r1, r0
   17844:	mov	r1, #40	; 0x28
   17848:	movwne	r1, #32
   1784c:	ldr	r1, [r3, r1]!
   17850:	adds	r1, r1, #1
   17854:	str	r1, [r3]
   17858:	ldr	r1, [r3, #4]
   1785c:	adc	r1, r1, #0
   17860:	cmp	r0, #1
   17864:	str	r1, [r3, #4]
   17868:	beq	17af4 <UnityAssertEqualMemory@@Base+0x354>
   1786c:	mov	r0, r6
   17870:	mov	r1, r4
   17874:	mov	r3, r8
   17878:	bl	15e30 <UnityAssertEqualIntArray@@Base+0x5e0>
   1787c:	mov	r1, #56	; 0x38
   17880:	cmp	r0, #1
   17884:	mov	r2, sl
   17888:	movweq	r1, #48	; 0x30
   1788c:	ldr	r1, [r2, r1]!
   17890:	adds	r1, r1, #1
   17894:	str	r1, [r2]
   17898:	ldr	r1, [r2, #4]
   1789c:	adc	r1, r1, #0
   178a0:	cmp	r0, #1
   178a4:	str	r1, [r2, #4]
   178a8:	bne	178c0 <UnityAssertEqualMemory@@Base+0x120>
   178ac:	ldrd	r0, [sl, #64]	; 0x40
   178b0:	adds	r0, r0, #1
   178b4:	adc	r1, r1, #0
   178b8:	strd	r0, [sl, #64]	; 0x40
   178bc:	b	179fc <UnityAssertEqualMemory@@Base+0x25c>
   178c0:	ldrd	r0, [sl, #72]	; 0x48
   178c4:	add	ip, sl, #88	; 0x58
   178c8:	mov	r9, r5
   178cc:	str	r7, [sp, #8]
   178d0:	str	r5, [sp, #4]
   178d4:	adds	r0, r0, #1
   178d8:	adc	r1, r1, #0
   178dc:	strd	r0, [sl, #72]	; 0x48
   178e0:	add	r1, pc, #584	; 0x248
   178e4:	vld1.64	{d18-d19}, [ip]
   178e8:	mov	r3, #120	; 0x78
   178ec:	mov	r7, sl
   178f0:	vld1.64	{d16-d17}, [r1 :128]
   178f4:	vadd.i64	q8, q9, q8
   178f8:	vst1.64	{d16-d17}, [ip]
   178fc:	ldrb	r1, [r4]
   17900:	ldrb	r2, [r6]
   17904:	cmp	r2, r1
   17908:	movwne	r3, #112	; 0x70
   1790c:	ldr	r3, [r7, r3]!
   17910:	adds	r3, r3, #1
   17914:	str	r3, [r7]
   17918:	ldr	r3, [r7, #4]
   1791c:	adc	r3, r3, #0
   17920:	cmp	r2, r1
   17924:	str	r3, [r7, #4]
   17928:	bne	17a14 <UnityAssertEqualMemory@@Base+0x274>
   1792c:	ldrd	r2, [sl, #152]	; 0x98
   17930:	ldr	r7, [sp, #8]
   17934:	sub	lr, r9, #1
   17938:	adds	r2, r2, #1
   1793c:	mov	r0, #104	; 0x68
   17940:	mov	r1, sl
   17944:	add	r4, r4, #1
   17948:	add	r6, r6, #1
   1794c:	adc	r3, r3, #0
   17950:	cmp	r7, #1
   17954:	strd	r2, [sl, #152]	; 0x98
   17958:	movwne	r0, #96	; 0x60
   1795c:	ldr	r0, [r1, r0]!
   17960:	adds	r0, r0, #1
   17964:	str	r0, [r1]
   17968:	ldr	r0, [r1, #4]
   1796c:	adc	r0, r0, #0
   17970:	subs	r7, r7, #1
   17974:	str	r0, [r1, #4]
   17978:	beq	179b8 <UnityAssertEqualMemory@@Base+0x218>
   1797c:	ldrb	r0, [r4]
   17980:	ldrb	r5, [r6]
   17984:	mov	r1, #120	; 0x78
   17988:	mov	r8, sl
   1798c:	cmp	r5, r0
   17990:	movwne	r1, #112	; 0x70
   17994:	ldr	r1, [r8, r1]!
   17998:	adds	r1, r1, #1
   1799c:	str	r1, [r8]
   179a0:	ldr	r1, [r8, #4]
   179a4:	adc	r1, r1, #0
   179a8:	cmp	r5, r0
   179ac:	str	r1, [r8, #4]
   179b0:	beq	17938 <UnityAssertEqualMemory@@Base+0x198>
   179b4:	b	17a18 <UnityAssertEqualMemory@@Base+0x278>
   179b8:	cmp	lr, #0
   179bc:	mov	r0, #80	; 0x50
   179c0:	mov	r1, sl
   179c4:	mov	r9, lr
   179c8:	movwne	r0, #72	; 0x48
   179cc:	ldr	r0, [r1, r0]!
   179d0:	adds	r0, r0, #1
   179d4:	str	r0, [r1]
   179d8:	ldr	r0, [r1, #4]
   179dc:	adc	r0, r0, #0
   179e0:	cmp	lr, #0
   179e4:	str	r0, [r1, #4]
   179e8:	bne	178e0 <UnityAssertEqualMemory@@Base+0x140>
   179ec:	ldrd	r0, [sl, #160]	; 0xa0
   179f0:	adds	r0, r0, #1
   179f4:	adc	r1, r1, #0
   179f8:	strd	r0, [sl, #160]	; 0xa0
   179fc:	ldrd	r0, [sl, #168]	; 0xa8
   17a00:	adds	r0, r0, #1
   17a04:	adc	r1, r1, #0
   17a08:	strd	r0, [sl, #168]	; 0xa8
   17a0c:	sub	sp, fp, #28
   17a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a14:	ldr	r7, [sp, #8]
   17a18:	ldr	r0, [fp, #12]
   17a1c:	bl	154f0 <UnityAssertBits@@Base+0x110>
   17a20:	movw	r0, #58771	; 0xe593
   17a24:	movt	r0, #1
   17a28:	bl	14390 <UnityPrint@@Base>
   17a2c:	ldr	r2, [sp, #4]
   17a30:	mov	r0, #136	; 0x88
   17a34:	mov	r1, sl
   17a38:	cmp	r2, #1
   17a3c:	movwhi	r0, #128	; 0x80
   17a40:	ldr	r0, [r1, r0]!
   17a44:	adds	r0, r0, #1
   17a48:	str	r0, [r1]
   17a4c:	ldr	r0, [r1, #4]
   17a50:	adc	r0, r0, #0
   17a54:	cmp	r2, #2
   17a58:	str	r0, [r1, #4]
   17a5c:	bcc	17a88 <UnityAssertEqualMemory@@Base+0x2e8>
   17a60:	ldrd	r0, [sl, #144]	; 0x90
   17a64:	adds	r0, r0, #1
   17a68:	adc	r1, r1, #0
   17a6c:	strd	r0, [sl, #144]	; 0x90
   17a70:	movw	r0, #58754	; 0xe582
   17a74:	movt	r0, #1
   17a78:	bl	14390 <UnityPrint@@Base>
   17a7c:	ldr	r0, [sp, #4]
   17a80:	sub	r0, r0, r9
   17a84:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   17a88:	movw	r0, #58764	; 0xe58c
   17a8c:	movt	r0, #1
   17a90:	bl	14390 <UnityPrint@@Base>
   17a94:	ldr	r0, [sp, #8]
   17a98:	sub	r0, r0, r7
   17a9c:	bl	14e30 <UnityPrintNumberUnsigned@@Base>
   17aa0:	movw	r0, #58732	; 0xe56c
   17aa4:	movt	r0, #1
   17aa8:	bl	14390 <UnityPrint@@Base>
   17aac:	ldrb	r0, [r6]
   17ab0:	mov	r1, #65	; 0x41
   17ab4:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   17ab8:	movw	r0, #58743	; 0xe577
   17abc:	movt	r0, #1
   17ac0:	bl	14390 <UnityPrint@@Base>
   17ac4:	ldrb	r0, [r4]
   17ac8:	mov	r1, #65	; 0x41
   17acc:	bl	14b00 <UnityPrintNumberByStyle@@Base>
   17ad0:	ldr	r0, [fp, #8]
   17ad4:	bl	155e0 <UnityAssertBits@@Base+0x200>
   17ad8:	movw	r1, #5952	; 0x1740
   17adc:	mov	r0, #1
   17ae0:	movt	r1, #3
   17ae4:	str	r0, [r1, #32]
   17ae8:	add	r0, r1, #40	; 0x28
   17aec:	mov	r1, #1
   17af0:	bl	1260c <longjmp@plt>
   17af4:	mov	r0, r2
   17af8:	bl	154f0 <UnityAssertBits@@Base+0x110>
   17afc:	movw	r0, #58815	; 0xe5bf
   17b00:	movt	r0, #1
   17b04:	bl	14390 <UnityPrint@@Base>
   17b08:	mov	r0, r8
   17b0c:	bl	155e0 <UnityAssertBits@@Base+0x200>
   17b10:	mov	r0, #1
   17b14:	mov	r1, #1
   17b18:	str	r0, [r9, #32]
   17b1c:	add	r0, r9, #40	; 0x28
   17b20:	bl	1260c <longjmp@plt>
   17b24:	nop	{0}
   17b28:	nop	{0}
   17b2c:	nop	{0}
   17b30:	andeq	r0, r0, r1
   17b34:	andeq	r0, r0, r0
   17b38:	andeq	r0, r0, r1
   17b3c:	andeq	r0, r0, r0

00017b40 <UnityFail@@Base>:
   17b40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17b44:	add	fp, sp, #24
   17b48:	vpush	{d8-d9}
   17b4c:	movw	r6, #3744	; 0xea0
   17b50:	mov	r5, r1
   17b54:	mov	r4, r0
   17b58:	movw	r7, #5952	; 0x1740
   17b5c:	movt	r6, #3
   17b60:	movt	r7, #3
   17b64:	ldrd	r0, [r6]
   17b68:	mov	r2, r6
   17b6c:	adds	r0, r0, #1
   17b70:	adc	r1, r1, #0
   17b74:	strd	r0, [r6]
   17b78:	ldrd	r0, [r7, #32]
   17b7c:	orrs	r0, r1, r0
   17b80:	mov	r1, #16
   17b84:	movwne	r1, #8
   17b88:	ldr	r1, [r2, r1]!
   17b8c:	adds	r1, r1, #1
   17b90:	str	r1, [r2]
   17b94:	ldr	r1, [r2, #4]
   17b98:	adc	r1, r1, #0
   17b9c:	cmp	r0, #0
   17ba0:	str	r1, [r2, #4]
   17ba4:	beq	17bc0 <UnityFail@@Base+0x80>
   17ba8:	ldrd	r0, [r6, #24]
   17bac:	adds	r0, r0, #1
   17bb0:	adc	r1, r1, #0
   17bb4:	strd	r0, [r6, #24]
   17bb8:	vpop	{d8-d9}
   17bbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17bc0:	movw	r8, #3936	; 0xf60
   17bc4:	add	r1, pc, #564	; 0x234
   17bc8:	movt	r8, #3
   17bcc:	vld1.64	{d8-d9}, [r1 :128]
   17bd0:	add	r0, r8, #48	; 0x30
   17bd4:	vld1.64	{d16-d17}, [r0 :128]
   17bd8:	vadd.i64	q8, q8, q4
   17bdc:	vst1.64	{d16-d17}, [r0 :128]
   17be0:	ldr	r0, [r7]
   17be4:	bl	14390 <UnityPrint@@Base>
   17be8:	movw	r9, #228	; 0xe4
   17bec:	vld1.64	{d16-d17}, [r8 :128]
   17bf0:	mov	r0, #58	; 0x3a
   17bf4:	movt	r9, #3
   17bf8:	ldr	r1, [r9]
   17bfc:	vadd.i64	q8, q8, q4
   17c00:	vst1.64	{d16-d17}, [r8 :128]
   17c04:	bl	127b0 <putc@plt>
   17c08:	mov	r0, r5
   17c0c:	bl	14c00 <UnityPrintNumber@@Base>
   17c10:	vld1.64	{d16-d17}, [r8 :128]
   17c14:	ldr	r1, [r9]
   17c18:	mov	r0, #58	; 0x3a
   17c1c:	vadd.i64	q8, q8, q4
   17c20:	vst1.64	{d16-d17}, [r8 :128]
   17c24:	bl	127b0 <putc@plt>
   17c28:	ldr	r0, [r7, #4]
   17c2c:	bl	14390 <UnityPrint@@Base>
   17c30:	vld1.64	{d16-d17}, [r8 :128]
   17c34:	ldr	r1, [r9]
   17c38:	mov	r0, #58	; 0x3a
   17c3c:	mov	r5, r8
   17c40:	vadd.i64	q8, q8, q4
   17c44:	vst1.64	{d16-d17}, [r5 :128]!
   17c48:	bl	127b0 <putc@plt>
   17c4c:	vld1.64	{d16-d17}, [r5 :128]
   17c50:	movw	r0, #58712	; 0xe558
   17c54:	movt	r0, #1
   17c58:	vadd.i64	q8, q8, q4
   17c5c:	vst1.64	{d16-d17}, [r5 :128]
   17c60:	bl	14390 <UnityPrint@@Base>
   17c64:	mov	r0, #40	; 0x28
   17c68:	cmp	r4, #0
   17c6c:	mov	r1, r6
   17c70:	movwne	r0, #32
   17c74:	ldr	r0, [r1, r0]!
   17c78:	adds	r0, r0, #1
   17c7c:	str	r0, [r1]
   17c80:	ldr	r0, [r1, #4]
   17c84:	adc	r0, r0, #0
   17c88:	cmp	r4, #0
   17c8c:	str	r0, [r1, #4]
   17c90:	beq	17dec <UnityFail@@Base+0x2ac>
   17c94:	add	r0, pc, #356	; 0x164
   17c98:	vld1.64	{d18-d19}, [r8 :128]
   17c9c:	ldr	r1, [r9]
   17ca0:	vld1.64	{d16-d17}, [r0 :128]
   17ca4:	mov	r0, #58	; 0x3a
   17ca8:	vadd.i64	q8, q9, q8
   17cac:	vst1.64	{d16-d17}, [r8 :128]
   17cb0:	bl	127b0 <putc@plt>
   17cb4:	ldr	r0, [r7, #8]
   17cb8:	mov	r1, #56	; 0x38
   17cbc:	mov	r2, r6
   17cc0:	cmp	r0, #0
   17cc4:	movwne	r1, #48	; 0x30
   17cc8:	ldr	r1, [r2, r1]!
   17ccc:	adds	r1, r1, #1
   17cd0:	str	r1, [r2]
   17cd4:	ldr	r1, [r2, #4]
   17cd8:	adc	r1, r1, #0
   17cdc:	cmp	r0, #0
   17ce0:	str	r1, [r2, #4]
   17ce4:	beq	17d70 <UnityFail@@Base+0x230>
   17ce8:	movw	r0, #59137	; 0xe701
   17cec:	movt	r0, #1
   17cf0:	bl	14390 <UnityPrint@@Base>
   17cf4:	ldr	r0, [r7, #8]
   17cf8:	bl	14390 <UnityPrint@@Base>
   17cfc:	ldr	r0, [r7, #12]
   17d00:	mov	r1, #72	; 0x48
   17d04:	mov	r2, r6
   17d08:	cmp	r0, #0
   17d0c:	movwne	r1, #64	; 0x40
   17d10:	ldr	r1, [r2, r1]!
   17d14:	adds	r1, r1, #1
   17d18:	str	r1, [r2]
   17d1c:	ldr	r1, [r2, #4]
   17d20:	adc	r1, r1, #0
   17d24:	cmp	r0, #0
   17d28:	str	r1, [r2, #4]
   17d2c:	beq	17d54 <UnityFail@@Base+0x214>
   17d30:	ldrd	r0, [r6, #80]	; 0x50
   17d34:	adds	r0, r0, #1
   17d38:	adc	r1, r1, #0
   17d3c:	strd	r0, [r6, #80]	; 0x50
   17d40:	movw	r0, #59147	; 0xe70b
   17d44:	movt	r0, #1
   17d48:	bl	14390 <UnityPrint@@Base>
   17d4c:	ldr	r0, [r7, #12]
   17d50:	bl	14390 <UnityPrint@@Base>
   17d54:	ldrd	r0, [r6, #88]	; 0x58
   17d58:	adds	r0, r0, #1
   17d5c:	adc	r1, r1, #0
   17d60:	strd	r0, [r6, #88]	; 0x58
   17d64:	movw	r0, #58729	; 0xe569
   17d68:	movt	r0, #1
   17d6c:	bl	14390 <UnityPrint@@Base>
   17d70:	ldrb	r0, [r4]
   17d74:	mov	r1, #104	; 0x68
   17d78:	mov	r2, r6
   17d7c:	cmp	r0, #32
   17d80:	movwne	r1, #96	; 0x60
   17d84:	ldr	r1, [r2, r1]!
   17d88:	adds	r1, r1, #1
   17d8c:	str	r1, [r2]
   17d90:	ldr	r1, [r2, #4]
   17d94:	adc	r1, r1, #0
   17d98:	cmp	r0, #32
   17d9c:	str	r1, [r2, #4]
   17da0:	beq	17dd4 <UnityFail@@Base+0x294>
   17da4:	add	r0, pc, #84	; 0x54
   17da8:	vld1.64	{d18-d19}, [r8 :128]
   17dac:	vld1.64	{d16-d17}, [r0 :128]
   17db0:	ldrd	r0, [r6, #112]	; 0x70
   17db4:	adds	r0, r0, #1
   17db8:	vadd.i64	q8, q9, q8
   17dbc:	adc	r1, r1, #0
   17dc0:	vst1.64	{d16-d17}, [r8 :128]
   17dc4:	strd	r0, [r6, #112]	; 0x70
   17dc8:	ldr	r1, [r9]
   17dcc:	mov	r0, #32
   17dd0:	bl	127b0 <putc@plt>
   17dd4:	ldrd	r0, [r6, #120]	; 0x78
   17dd8:	adds	r0, r0, #1
   17ddc:	adc	r1, r1, #0
   17de0:	strd	r0, [r6, #120]	; 0x78
   17de4:	mov	r0, r4
   17de8:	bl	14390 <UnityPrint@@Base>
   17dec:	mov	r0, #1
   17df0:	mov	r1, #1
   17df4:	str	r0, [r7, #32]
   17df8:	add	r0, r7, #40	; 0x28
   17dfc:	bl	1260c <longjmp@plt>
   17e00:	andeq	r0, r0, r1
   17e04:	andeq	r0, r0, r0
   17e08:	andeq	r0, r0, r1
   17e0c:	andeq	r0, r0, r0

00017e10 <UnityIgnore@@Base>:
   17e10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17e14:	add	fp, sp, #24
   17e18:	vpush	{d8-d9}
   17e1c:	movw	r7, #4160	; 0x1040
   17e20:	mov	r4, r0
   17e24:	mov	r5, r1
   17e28:	movw	r6, #5952	; 0x1740
   17e2c:	movt	r7, #3
   17e30:	movt	r6, #3
   17e34:	mov	r0, r7
   17e38:	ldrd	r2, [r6, #32]
   17e3c:	ldr	r1, [r0, #48]!	; 0x30
   17e40:	adds	r1, r1, #1
   17e44:	str	r1, [r0]
   17e48:	ldr	r1, [r0, #4]
   17e4c:	adc	r1, r1, #0
   17e50:	str	r1, [r0, #4]
   17e54:	orrs	r1, r3, r2
   17e58:	mov	r2, #16
   17e5c:	movwne	r2, #8
   17e60:	ldr	r2, [r0, r2]!
   17e64:	adds	r2, r2, #1
   17e68:	str	r2, [r0]
   17e6c:	ldr	r2, [r0, #4]
   17e70:	adc	r2, r2, #0
   17e74:	cmp	r1, #0
   17e78:	str	r2, [r0, #4]
   17e7c:	beq	17e98 <UnityIgnore@@Base+0x88>
   17e80:	ldrd	r0, [r7, #72]	; 0x48
   17e84:	adds	r0, r0, #1
   17e88:	adc	r1, r1, #0
   17e8c:	strd	r0, [r7, #72]	; 0x48
   17e90:	vpop	{d8-d9}
   17e94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e98:	movw	r8, #3936	; 0xf60
   17e9c:	add	r1, pc, #284	; 0x11c
   17ea0:	movt	r8, #3
   17ea4:	vld1.64	{d8-d9}, [r1 :128]
   17ea8:	add	r0, r8, #48	; 0x30
   17eac:	vld1.64	{d16-d17}, [r0 :128]
   17eb0:	vadd.i64	q8, q8, q4
   17eb4:	vst1.64	{d16-d17}, [r0 :128]
   17eb8:	ldr	r0, [r6]
   17ebc:	bl	14390 <UnityPrint@@Base>
   17ec0:	movw	r9, #228	; 0xe4
   17ec4:	vld1.64	{d16-d17}, [r8 :128]
   17ec8:	mov	r0, #58	; 0x3a
   17ecc:	movt	r9, #3
   17ed0:	ldr	r1, [r9]
   17ed4:	vadd.i64	q8, q8, q4
   17ed8:	vst1.64	{d16-d17}, [r8 :128]
   17edc:	bl	127b0 <putc@plt>
   17ee0:	mov	r0, r5
   17ee4:	bl	14c00 <UnityPrintNumber@@Base>
   17ee8:	vld1.64	{d16-d17}, [r8 :128]
   17eec:	ldr	r1, [r9]
   17ef0:	mov	r0, #58	; 0x3a
   17ef4:	vadd.i64	q8, q8, q4
   17ef8:	vst1.64	{d16-d17}, [r8 :128]
   17efc:	bl	127b0 <putc@plt>
   17f00:	ldr	r0, [r6, #4]
   17f04:	bl	14390 <UnityPrint@@Base>
   17f08:	vld1.64	{d16-d17}, [r8 :128]
   17f0c:	ldr	r1, [r9]
   17f10:	mov	r0, #58	; 0x3a
   17f14:	vadd.i64	q8, q8, q4
   17f18:	vst1.64	{d16-d17}, [r8 :128]
   17f1c:	bl	127b0 <putc@plt>
   17f20:	movw	r0, #58717	; 0xe55d
   17f24:	movt	r0, #1
   17f28:	bl	14390 <UnityPrint@@Base>
   17f2c:	mov	r0, #40	; 0x28
   17f30:	cmp	r4, #0
   17f34:	movwne	r0, #32
   17f38:	add	r0, r7, r0
   17f3c:	ldrd	r2, [r0, #48]	; 0x30
   17f40:	adds	r2, r2, #1
   17f44:	adc	r3, r3, #0
   17f48:	cmp	r4, #0
   17f4c:	strd	r2, [r0, #48]	; 0x30
   17f50:	beq	17fa4 <UnityIgnore@@Base+0x194>
   17f54:	add	r0, pc, #100	; 0x64
   17f58:	vld1.64	{d16-d17}, [r8 :128]
   17f5c:	vld1.64	{d8-d9}, [r0 :128]
   17f60:	ldrd	r0, [r7, #96]	; 0x60
   17f64:	adds	r0, r0, #1
   17f68:	vadd.i64	q8, q8, q4
   17f6c:	adc	r1, r1, #0
   17f70:	vst1.64	{d16-d17}, [r8 :128]
   17f74:	strd	r0, [r7, #96]	; 0x60
   17f78:	ldr	r1, [r9]
   17f7c:	mov	r0, #58	; 0x3a
   17f80:	bl	127b0 <putc@plt>
   17f84:	vld1.64	{d16-d17}, [r8 :128]
   17f88:	ldr	r1, [r9]
   17f8c:	mov	r0, #32
   17f90:	vadd.i64	q8, q8, q4
   17f94:	vst1.64	{d16-d17}, [r8 :128]
   17f98:	bl	127b0 <putc@plt>
   17f9c:	mov	r0, r4
   17fa0:	bl	14390 <UnityPrint@@Base>
   17fa4:	mov	r0, #1
   17fa8:	mov	r1, #1
   17fac:	str	r0, [r6, #36]	; 0x24
   17fb0:	add	r0, r6, #40	; 0x28
   17fb4:	bl	1260c <longjmp@plt>
   17fb8:	nop	{0}
   17fbc:	nop	{0}
   17fc0:	andeq	r0, r0, r1
   17fc4:	andeq	r0, r0, r0
   17fc8:	andeq	r0, r0, r1
   17fcc:	andeq	r0, r0, r0

00017fd0 <setUp@@Base>:
   17fd0:	movw	r0, #3936	; 0xf60
   17fd4:	add	r1, pc, #36	; 0x24
   17fd8:	movt	r0, #3
   17fdc:	vld1.64	{d16-d17}, [r1 :128]
   17fe0:	add	r0, r0, #80	; 0x50
   17fe4:	vld1.64	{d18-d19}, [r0 :128]
   17fe8:	vadd.i64	q8, q9, q8
   17fec:	vst1.64	{d16-d17}, [r0 :128]
   17ff0:	bx	lr
   17ff4:	nop	{0}
   17ff8:	nop	{0}
   17ffc:	nop	{0}
   18000:	andeq	r0, r0, r1
   18004:	andeq	r0, r0, r0
   18008:	andeq	r0, r0, r1
   1800c:	andeq	r0, r0, r0

00018010 <tearDown@@Base>:
   18010:	movw	r0, #3936	; 0xf60
   18014:	add	r1, pc, #36	; 0x24
   18018:	movt	r0, #3
   1801c:	vld1.64	{d16-d17}, [r1 :128]
   18020:	add	r0, r0, #96	; 0x60
   18024:	vld1.64	{d18-d19}, [r0 :128]
   18028:	vadd.i64	q8, q9, q8
   1802c:	vst1.64	{d16-d17}, [r0 :128]
   18030:	bx	lr
   18034:	nop	{0}
   18038:	nop	{0}
   1803c:	nop	{0}
   18040:	andeq	r0, r0, r1
   18044:	andeq	r0, r0, r0
   18048:	andeq	r0, r0, r1
   1804c:	andeq	r0, r0, r0

00018050 <UnityDefaultTestRun@@Base>:
   18050:	push	{r4, r5, r6, r7, fp, lr}
   18054:	add	fp, sp, #16
   18058:	movw	r7, #5952	; 0x1740
   1805c:	movw	r6, #3872	; 0xf20
   18060:	mov	r4, r0
   18064:	mov	r0, #0
   18068:	movt	r7, #3
   1806c:	movt	r6, #3
   18070:	str	r1, [r7, #4]
   18074:	str	r2, [r7, #16]
   18078:	str	r0, [r7, #8]
   1807c:	str	r0, [r7, #12]
   18080:	ldrd	r0, [r6]
   18084:	add	r5, r7, #40	; 0x28
   18088:	ldr	r2, [r7, #20]
   1808c:	adds	r0, r0, #1
   18090:	adc	r1, r1, #0
   18094:	add	r2, r2, #1
   18098:	strd	r0, [r6]
   1809c:	mov	r0, r5
   180a0:	str	r2, [r7, #20]
   180a4:	bl	12624 <_setjmp@plt>
   180a8:	mov	r1, #16
   180ac:	cmp	r0, #0
   180b0:	mov	r2, r6
   180b4:	movweq	r1, #8
   180b8:	ldr	r1, [r2, r1]!
   180bc:	adds	r1, r1, #1
   180c0:	str	r1, [r2]
   180c4:	ldr	r1, [r2, #4]
   180c8:	adc	r1, r1, #0
   180cc:	cmp	r0, #0
   180d0:	str	r1, [r2, #4]
   180d4:	bne	180f0 <UnityDefaultTestRun@@Base+0xa0>
   180d8:	ldrd	r0, [r6, #24]
   180dc:	adds	r0, r0, #1
   180e0:	adc	r1, r1, #0
   180e4:	strd	r0, [r6, #24]
   180e8:	bl	17fd0 <setUp@@Base>
   180ec:	blx	r4
   180f0:	mov	r0, r5
   180f4:	bl	12624 <_setjmp@plt>
   180f8:	ldr	r1, [r7, #36]	; 0x24
   180fc:	mov	r2, r6
   18100:	orrs	r0, r1, r0
   18104:	mov	r1, #40	; 0x28
   18108:	movwne	r1, #32
   1810c:	ldr	r1, [r2, r1]!
   18110:	adds	r1, r1, #1
   18114:	str	r1, [r2]
   18118:	ldr	r1, [r2, #4]
   1811c:	adc	r1, r1, #0
   18120:	cmp	r0, #0
   18124:	str	r1, [r2, #4]
   18128:	bne	18140 <UnityDefaultTestRun@@Base+0xf0>
   1812c:	ldrd	r0, [r6, #48]	; 0x30
   18130:	adds	r0, r0, #1
   18134:	adc	r1, r1, #0
   18138:	strd	r0, [r6, #48]	; 0x30
   1813c:	bl	18010 <tearDown@@Base>
   18140:	ldrd	r0, [r6, #56]	; 0x38
   18144:	adds	r0, r0, #1
   18148:	adc	r1, r1, #0
   1814c:	strd	r0, [r6, #56]	; 0x38
   18150:	bl	15200 <UnityConcludeTest@@Base>
   18154:	pop	{r4, r5, r6, r7, fp, pc}
   18158:	nop	{0}
   1815c:	nop	{0}

00018160 <UnityBegin@@Base>:
   18160:	movw	r1, #4048	; 0xfd0
   18164:	add	r2, pc, #68	; 0x44
   18168:	vmov.i32	q10, #0	; 0x00000000
   1816c:	movt	r1, #3
   18170:	vld1.64	{d16-d17}, [r2 :128]
   18174:	movw	r2, #5952	; 0x1740
   18178:	vld1.64	{d18-d19}, [r1 :128]
   1817c:	movt	r2, #3
   18180:	str	r0, [r2]
   18184:	mov	r0, #0
   18188:	str	r0, [r2, #36]	; 0x24
   1818c:	add	r0, r2, #20
   18190:	vst1.32	{d20-d21}, [r0]
   18194:	add	r0, r2, #4
   18198:	vadd.i64	q8, q9, q8
   1819c:	vst1.32	{d20-d21}, [r0]
   181a0:	vst1.64	{d16-d17}, [r1 :128]
   181a4:	bx	lr
   181a8:	nop	{0}
   181ac:	nop	{0}
   181b0:	andeq	r0, r0, r1
   181b4:	andeq	r0, r0, r0
   181b8:	andeq	r0, r0, r1
   181bc:	andeq	r0, r0, r0

000181c0 <UnityEnd@@Base>:
   181c0:	push	{r4, r5, r6, r7, fp, lr}
   181c4:	add	fp, sp, #16
   181c8:	vpush	{d8-d9}
   181cc:	movw	r4, #4160	; 0x1040
   181d0:	add	r0, pc, #408	; 0x198
   181d4:	movw	r5, #3936	; 0xf60
   181d8:	movw	r6, #228	; 0xe4
   181dc:	movt	r4, #3
   181e0:	vld1.64	{d8-d9}, [r0 :128]
   181e4:	movt	r5, #3
   181e8:	movt	r6, #3
   181ec:	ldrd	r0, [r4]
   181f0:	vld1.64	{d16-d17}, [r5 :128]
   181f4:	adds	r0, r0, #1
   181f8:	vadd.i64	q8, q8, q4
   181fc:	adc	r1, r1, #0
   18200:	vst1.64	{d16-d17}, [r5 :128]
   18204:	strd	r0, [r4]
   18208:	ldr	r1, [r6]
   1820c:	mov	r0, #10
   18210:	bl	127b0 <putc@plt>
   18214:	movw	r0, #59084	; 0xe6cc
   18218:	movt	r0, #1
   1821c:	bl	14390 <UnityPrint@@Base>
   18220:	vld1.64	{d16-d17}, [r5 :128]
   18224:	ldr	r1, [r6]
   18228:	mov	r0, #10
   1822c:	vadd.i64	q8, q8, q4
   18230:	vst1.64	{d16-d17}, [r5 :128]
   18234:	bl	127b0 <putc@plt>
   18238:	movw	r7, #5952	; 0x1740
   1823c:	movt	r7, #3
   18240:	ldr	r0, [r7, #20]
   18244:	bl	14c00 <UnityPrintNumber@@Base>
   18248:	movw	r0, #59108	; 0xe6e4
   1824c:	movt	r0, #1
   18250:	bl	14390 <UnityPrint@@Base>
   18254:	ldr	r0, [r7, #24]
   18258:	bl	14c00 <UnityPrintNumber@@Base>
   1825c:	movw	r0, #59116	; 0xe6ec
   18260:	movt	r0, #1
   18264:	bl	14390 <UnityPrint@@Base>
   18268:	ldr	r0, [r7, #28]
   1826c:	bl	14c00 <UnityPrintNumber@@Base>
   18270:	movw	r0, #59127	; 0xe6f7
   18274:	movt	r0, #1
   18278:	bl	14390 <UnityPrint@@Base>
   1827c:	vld1.64	{d16-d17}, [r5 :128]
   18280:	ldr	r1, [r6]
   18284:	mov	r0, #10
   18288:	vadd.i64	q8, q8, q4
   1828c:	vst1.64	{d16-d17}, [r5 :128]
   18290:	bl	127b0 <putc@plt>
   18294:	ldr	r0, [r7, #24]
   18298:	mov	r1, #16
   1829c:	mov	r2, r4
   182a0:	cmp	r0, #0
   182a4:	movweq	r1, #8
   182a8:	ldr	r1, [r2, r1]!
   182ac:	adds	r1, r1, #1
   182b0:	str	r1, [r2]
   182b4:	ldr	r1, [r2, #4]
   182b8:	adc	r1, r1, #0
   182bc:	cmp	r0, #0
   182c0:	str	r1, [r2, #4]
   182c4:	beq	182fc <UnityEnd@@Base+0x13c>
   182c8:	add	r1, pc, #160	; 0xa0
   182cc:	add	r0, r5, #16
   182d0:	ldrd	r2, [r4, #32]
   182d4:	vld1.64	{d16-d17}, [r1 :128]
   182d8:	vld1.64	{d18-d19}, [r0 :128]
   182dc:	adds	r2, r2, #1
   182e0:	vadd.i64	q8, q9, q8
   182e4:	adc	r3, r3, #0
   182e8:	vst1.64	{d16-d17}, [r0 :128]
   182ec:	movw	r0, #58712	; 0xe558
   182f0:	strd	r2, [r4, #32]
   182f4:	movt	r0, #1
   182f8:	b	1832c <UnityEnd@@Base+0x16c>
   182fc:	add	r1, pc, #108	; 0x6c
   18300:	add	r0, r5, #32
   18304:	ldrd	r2, [r4, #24]
   18308:	vld1.64	{d16-d17}, [r1 :128]
   1830c:	vld1.64	{d18-d19}, [r0 :128]
   18310:	adds	r2, r2, #1
   18314:	vadd.i64	q8, q9, q8
   18318:	adc	r3, r3, #0
   1831c:	vst1.64	{d16-d17}, [r0 :128]
   18320:	movw	r0, #58704	; 0xe550
   18324:	strd	r2, [r4, #24]
   18328:	movt	r0, #1
   1832c:	bl	14390 <UnityPrint@@Base>
   18330:	add	r0, pc, #56	; 0x38
   18334:	vld1.64	{d18-d19}, [r5 :128]
   18338:	vld1.64	{d16-d17}, [r0 :128]
   1833c:	ldrd	r0, [r4, #40]	; 0x28
   18340:	adds	r0, r0, #1
   18344:	vadd.i64	q8, q9, q8
   18348:	adc	r1, r1, #0
   1834c:	vst1.64	{d16-d17}, [r5 :128]
   18350:	strd	r0, [r4, #40]	; 0x28
   18354:	ldr	r1, [r6]
   18358:	mov	r0, #10
   1835c:	bl	127b0 <putc@plt>
   18360:	ldr	r0, [r7, #24]
   18364:	vpop	{d8-d9}
   18368:	pop	{r4, r5, r6, r7, fp, pc}
   1836c:	nop	{0}
   18370:	andeq	r0, r0, r1
   18374:	andeq	r0, r0, r0
   18378:	andeq	r0, r0, r1
   1837c:	andeq	r0, r0, r0
   18380:	cmn	r0, #1
   18384:	ldrne	r0, [r1, r0, lsl #2]
   18388:	cmpne	r0, #0
   1838c:	bne	18394 <UnityEnd@@Base+0x1d4>
   18390:	bx	lr
   18394:	ldrd	r2, [r0]
   18398:	adds	r2, r2, #1
   1839c:	adc	r3, r3, #0
   183a0:	strd	r2, [r0]
   183a4:	bx	lr
   183a8:	push	{r4, r5, r6, lr}
   183ac:	sub	sp, sp, #8
   183b0:	movw	r0, #60256	; 0xeb60
   183b4:	movw	r1, #57110	; 0xdf16
   183b8:	movw	r2, #878	; 0x36e
   183bc:	movt	r0, #1
   183c0:	movt	r1, #1
   183c4:	movt	r2, #49498	; 0xc15a
   183c8:	bl	1ae7c <next@@Base+0x1a2c>
   183cc:	movw	r0, #59968	; 0xea40
   183d0:	movw	r6, #59264	; 0xe780
   183d4:	mov	r5, #0
   183d8:	movt	r0, #1
   183dc:	movt	r6, #1
   183e0:	add	r4, r0, #4
   183e4:	mov	r3, r6
   183e8:	ldr	r0, [r3, r5]!
   183ec:	ldr	r1, [r3, #16]
   183f0:	str	r1, [sp]
   183f4:	ldmib	r3, {r1, r2}
   183f8:	ldrb	r3, [r3, #12]
   183fc:	bl	1b5e0 <next@@Base+0x2190>
   18400:	ldrd	r0, [r4, #-4]
   18404:	bl	1be94 <next@@Base+0x2a44>
   18408:	add	r5, r5, #20
   1840c:	add	r4, r4, #8
   18410:	cmp	r5, #700	; 0x2bc
   18414:	bne	183e4 <UnityEnd@@Base+0x224>
   18418:	bl	1c610 <next@@Base+0x31c0>
   1841c:	add	sp, sp, #8
   18420:	pop	{r4, r5, r6, lr}
   18424:	b	1d37c <next@@Base+0x3f2c>
   18428:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1842c:	vpush	{d8-d9}
   18430:	bl	183a8 <UnityEnd@@Base+0x1e8>
   18434:	movw	r0, #688	; 0x2b0
   18438:	mov	r1, #0
   1843c:	mov	r2, #152	; 0x98
   18440:	mov	r6, #0
   18444:	movt	r0, #3
   18448:	bl	12750 <memset@plt>
   1844c:	movw	r9, #3936	; 0xf60
   18450:	vmov.i32	q4, #0	; 0x00000000
   18454:	mov	r0, #96	; 0x60
   18458:	mov	r8, #64	; 0x40
   1845c:	mov	r2, #168	; 0xa8
   18460:	movt	r9, #3
   18464:	mov	r4, r9
   18468:	vst1.64	{d8-d9}, [r4 :128], r0
   1846c:	movw	r0, #848	; 0x350
   18470:	movt	r0, #3
   18474:	add	r1, r0, #48	; 0x30
   18478:	vst1.64	{d8-d9}, [r1 :128]
   1847c:	add	r1, r0, #32
   18480:	vst1.64	{d8-d9}, [r1 :128]
   18484:	add	r1, r0, #16
   18488:	vst1.64	{d8-d9}, [r0 :128], r8
   1848c:	vst1.64	{d8-d9}, [r0 :128]
   18490:	movw	r0, #928	; 0x3a0
   18494:	vst1.64	{d8-d9}, [r1 :128]
   18498:	mov	r1, #0
   1849c:	movt	r0, #3
   184a0:	bl	12750 <memset@plt>
   184a4:	movw	r1, #1312	; 0x520
   184a8:	movw	r3, #1104	; 0x450
   184ac:	movw	r7, #4048	; 0xfd0
   184b0:	movt	r1, #3
   184b4:	movt	r3, #3
   184b8:	movt	r7, #3
   184bc:	add	r0, r1, #64	; 0x40
   184c0:	str	r6, [r1, #80]	; 0x50
   184c4:	str	r6, [r3, #64]	; 0x40
   184c8:	vst1.64	{d8-d9}, [r0 :128]
   184cc:	add	r0, r1, #48	; 0x30
   184d0:	vst1.64	{d8-d9}, [r0 :128]
   184d4:	add	r0, r1, #32
   184d8:	vst1.64	{d8-d9}, [r0 :128]
   184dc:	add	r0, r1, #16
   184e0:	vst1.64	{d8-d9}, [r0 :128]
   184e4:	movw	r0, #1184	; 0x4a0
   184e8:	movt	r0, #3
   184ec:	add	r2, r0, #96	; 0x60
   184f0:	str	r6, [r0, #112]	; 0x70
   184f4:	vst1.64	{d8-d9}, [r2 :128]
   184f8:	add	r2, r0, #80	; 0x50
   184fc:	vst1.64	{d8-d9}, [r2 :128]
   18500:	add	r2, r0, #64	; 0x40
   18504:	vst1.64	{d8-d9}, [r2 :128]
   18508:	add	r2, r0, #48	; 0x30
   1850c:	vst1.64	{d8-d9}, [r2 :128]
   18510:	add	r2, r0, #32
   18514:	vst1.64	{d8-d9}, [r2 :128]
   18518:	add	r2, r0, #16
   1851c:	vst1.64	{d8-d9}, [r2 :128]
   18520:	add	r2, r3, #48	; 0x30
   18524:	vst1.64	{d8-d9}, [r2 :128]
   18528:	add	r2, r3, #32
   1852c:	vst1.64	{d8-d9}, [r2 :128]
   18530:	add	r2, r3, #16
   18534:	vst1.64	{d8-d9}, [r2 :128]
   18538:	mov	r2, #116	; 0x74
   1853c:	vst1.64	{d8-d9}, [r0 :128], r2
   18540:	mov	r2, #68	; 0x44
   18544:	str	r6, [r0]
   18548:	mov	r0, #84	; 0x54
   1854c:	vst1.64	{d8-d9}, [r3 :128], r2
   18550:	vst1.64	{d8-d9}, [r1 :128], r0
   18554:	str	r6, [r3]
   18558:	str	r6, [r1]
   1855c:	movw	r1, #1408	; 0x580
   18560:	movt	r1, #3
   18564:	add	r3, r1, #80	; 0x50
   18568:	str	r6, [r1, #96]	; 0x60
   1856c:	vst1.64	{d8-d9}, [r3 :128]
   18570:	add	r3, r1, #64	; 0x40
   18574:	vst1.64	{d8-d9}, [r3 :128]
   18578:	add	r3, r1, #48	; 0x30
   1857c:	vst1.64	{d8-d9}, [r3 :128]
   18580:	add	r3, r1, #32
   18584:	vst1.64	{d8-d9}, [r3 :128]
   18588:	add	r3, r1, #16
   1858c:	vst1.64	{d8-d9}, [r3 :128]
   18590:	mov	r3, #100	; 0x64
   18594:	vst1.64	{d8-d9}, [r1 :128], r3
   18598:	str	r6, [r1]
   1859c:	add	r1, r9, #32
   185a0:	vst1.64	{d8-d9}, [r1 :128]
   185a4:	add	r1, r9, #16
   185a8:	vst1.64	{d8-d9}, [r1 :128]
   185ac:	movw	r1, #1520	; 0x5f0
   185b0:	movt	r1, #3
   185b4:	add	r3, r1, #48	; 0x30
   185b8:	str	r6, [r1, #64]	; 0x40
   185bc:	vst1.64	{d8-d9}, [r3 :128]
   185c0:	add	r3, r1, #32
   185c4:	vst1.64	{d8-d9}, [r3 :128]
   185c8:	add	r3, r1, #16
   185cc:	vst1.64	{d8-d9}, [r1 :128], r2
   185d0:	str	r6, [r1]
   185d4:	add	r1, r9, #48	; 0x30
   185d8:	vst1.64	{d8-d9}, [r3 :128]
   185dc:	vst1.64	{d8-d9}, [r1 :128]
   185e0:	add	r1, r7, #48	; 0x30
   185e4:	vst1.64	{d8-d9}, [r1 :128]
   185e8:	add	r1, r7, #32
   185ec:	vst1.64	{d8-d9}, [r1 :128]
   185f0:	add	r1, r7, #16
   185f4:	vst1.64	{d8-d9}, [r1 :128]
   185f8:	add	r1, r9, #64	; 0x40
   185fc:	vst1.64	{d8-d9}, [r1 :128]
   18600:	movw	r1, #1600	; 0x640
   18604:	movt	r1, #3
   18608:	add	r2, r1, #64	; 0x40
   1860c:	str	r6, [r1, #80]	; 0x50
   18610:	vst1.64	{d8-d9}, [r2 :128]
   18614:	add	r2, r1, #48	; 0x30
   18618:	vst1.64	{d8-d9}, [r2 :128]
   1861c:	add	r2, r1, #32
   18620:	vst1.64	{d8-d9}, [r2 :128]
   18624:	add	r2, r1, #16
   18628:	vst1.64	{d8-d9}, [r1 :128], r0
   1862c:	add	r0, r7, #96	; 0x60
   18630:	vst1.64	{d8-d9}, [r0 :128]
   18634:	add	r0, r7, #80	; 0x50
   18638:	vst1.64	{d8-d9}, [r2 :128]
   1863c:	str	r6, [r1]
   18640:	mov	r1, #0
   18644:	mov	r2, #280	; 0x118
   18648:	vst1.64	{d8-d9}, [r0 :128]
   1864c:	add	r0, r7, #64	; 0x40
   18650:	vst1.64	{d8-d9}, [r0 :128]
   18654:	movw	r0, #1696	; 0x6a0
   18658:	movt	r0, #3
   1865c:	bl	12750 <memset@plt>
   18660:	movw	r0, #1984	; 0x7c0
   18664:	mov	r2, #192	; 0xc0
   18668:	movt	r0, #3
   1866c:	add	r1, r0, #48	; 0x30
   18670:	vst1.64	{d8-d9}, [r1 :128]
   18674:	add	r1, r0, #32
   18678:	vst1.64	{d8-d9}, [r1 :128]
   1867c:	add	r1, r0, #16
   18680:	vst1.64	{d8-d9}, [r0 :128], r8
   18684:	vst1.64	{d8-d9}, [r0 :128]
   18688:	movw	r0, #2064	; 0x810
   1868c:	vst1.64	{d8-d9}, [r1 :128]
   18690:	mov	r1, #0
   18694:	movt	r0, #3
   18698:	bl	12750 <memset@plt>
   1869c:	movw	r0, #2256	; 0x8d0
   186a0:	mov	r5, #112	; 0x70
   186a4:	mov	r2, #248	; 0xf8
   186a8:	movt	r0, #3
   186ac:	add	r1, r0, #96	; 0x60
   186b0:	vst1.64	{d8-d9}, [r1 :128]
   186b4:	add	r1, r0, #80	; 0x50
   186b8:	vst1.64	{d8-d9}, [r1 :128]
   186bc:	add	r1, r0, #64	; 0x40
   186c0:	vst1.64	{d8-d9}, [r1 :128]
   186c4:	add	r1, r0, #48	; 0x30
   186c8:	vst1.64	{d8-d9}, [r1 :128]
   186cc:	add	r1, r0, #32
   186d0:	vst1.64	{d8-d9}, [r1 :128]
   186d4:	add	r1, r0, #16
   186d8:	vst1.64	{d8-d9}, [r0 :128], r5
   186dc:	vst1.64	{d8-d9}, [r0 :128]
   186e0:	movw	r0, #2384	; 0x950
   186e4:	vst1.64	{d8-d9}, [r1 :128]
   186e8:	mov	r1, #0
   186ec:	movt	r0, #3
   186f0:	bl	12750 <memset@plt>
   186f4:	movw	r0, #2640	; 0xa50
   186f8:	mov	r2, #176	; 0xb0
   186fc:	movt	r0, #3
   18700:	add	r1, r0, #96	; 0x60
   18704:	vst1.64	{d8-d9}, [r1 :128]
   18708:	add	r1, r0, #80	; 0x50
   1870c:	vst1.64	{d8-d9}, [r1 :128]
   18710:	add	r1, r0, #64	; 0x40
   18714:	vst1.64	{d8-d9}, [r1 :128]
   18718:	add	r1, r0, #48	; 0x30
   1871c:	vst1.64	{d8-d9}, [r1 :128]
   18720:	add	r1, r0, #32
   18724:	vst1.64	{d8-d9}, [r1 :128]
   18728:	add	r1, r0, #16
   1872c:	vst1.64	{d8-d9}, [r0 :128], r5
   18730:	vst1.64	{d8-d9}, [r0 :128]
   18734:	movw	r0, #2768	; 0xad0
   18738:	vst1.64	{d8-d9}, [r1 :128]
   1873c:	mov	r1, #0
   18740:	movt	r0, #3
   18744:	bl	12750 <memset@plt>
   18748:	movw	r0, #2944	; 0xb80
   1874c:	mov	r2, #192	; 0xc0
   18750:	movt	r0, #3
   18754:	add	r1, r0, #48	; 0x30
   18758:	vst1.64	{d8-d9}, [r1 :128]
   1875c:	add	r1, r0, #32
   18760:	vst1.64	{d8-d9}, [r1 :128]
   18764:	add	r1, r0, #16
   18768:	vst1.64	{d8-d9}, [r0 :128], r8
   1876c:	vst1.64	{d8-d9}, [r0 :128]
   18770:	movw	r0, #3024	; 0xbd0
   18774:	vst1.64	{d8-d9}, [r1 :128]
   18778:	mov	r1, #0
   1877c:	movt	r0, #3
   18780:	bl	12750 <memset@plt>
   18784:	movw	r0, #3216	; 0xc90
   18788:	mov	r2, #272	; 0x110
   1878c:	movt	r0, #3
   18790:	add	r1, r0, #48	; 0x30
   18794:	vst1.64	{d8-d9}, [r1 :128]
   18798:	add	r1, r0, #32
   1879c:	vst1.64	{d8-d9}, [r1 :128]
   187a0:	add	r1, r0, #16
   187a4:	vst1.64	{d8-d9}, [r0 :128], r8
   187a8:	vst1.64	{d8-d9}, [r0 :128]
   187ac:	movw	r0, #3296	; 0xce0
   187b0:	vst1.64	{d8-d9}, [r1 :128]
   187b4:	mov	r1, #0
   187b8:	movt	r0, #3
   187bc:	bl	12750 <memset@plt>
   187c0:	movw	r0, #3568	; 0xdf0
   187c4:	mov	r1, #0
   187c8:	mov	r2, #176	; 0xb0
   187cc:	movt	r0, #3
   187d0:	bl	12750 <memset@plt>
   187d4:	movw	r1, #3872	; 0xf20
   187d8:	vst1.64	{d8-d9}, [r7 :128]
   187dc:	movt	r1, #3
   187e0:	add	r0, r1, #32
   187e4:	vst1.64	{d8-d9}, [r0 :128]
   187e8:	add	r0, r1, #16
   187ec:	vst1.64	{d8-d9}, [r0 :128]
   187f0:	movw	r0, #4160	; 0x1040
   187f4:	movt	r0, #3
   187f8:	add	r2, r0, #80	; 0x50
   187fc:	str	r6, [r0, #96]	; 0x60
   18800:	str	r6, [r0, #100]	; 0x64
   18804:	vst1.64	{d8-d9}, [r2 :128]
   18808:	add	r2, r0, #64	; 0x40
   1880c:	vst1.64	{d8-d9}, [r2 :128]
   18810:	add	r2, r0, #48	; 0x30
   18814:	vst1.64	{d8-d9}, [r2 :128]
   18818:	movw	r2, #3744	; 0xea0
   1881c:	movt	r2, #3
   18820:	add	r3, r2, #96	; 0x60
   18824:	vst1.64	{d8-d9}, [r3 :128]
   18828:	add	r3, r2, #80	; 0x50
   1882c:	vst1.64	{d8-d9}, [r3 :128]
   18830:	add	r3, r2, #64	; 0x40
   18834:	vst1.64	{d8-d9}, [r3 :128]
   18838:	add	r3, r2, #48	; 0x30
   1883c:	vst1.64	{d8-d9}, [r3 :128]
   18840:	add	r3, r2, #32
   18844:	vst1.64	{d8-d9}, [r3 :128]
   18848:	add	r3, r2, #16
   1884c:	vst1.64	{d8-d9}, [r2 :128], r5
   18850:	vst1.64	{d8-d9}, [r3 :128]
   18854:	add	r3, r9, #80	; 0x50
   18858:	vst1.64	{d8-d9}, [r2 :128]
   1885c:	vst1.64	{d8-d9}, [r3 :128]
   18860:	mov	r3, #48	; 0x30
   18864:	vst1.64	{d8-d9}, [r4 :128]
   18868:	vst1.64	{d8-d9}, [r1 :128], r3
   1886c:	vst1.64	{d8-d9}, [r1 :128]
   18870:	add	r1, r0, #16
   18874:	vst1.64	{d8-d9}, [r1 :128]
   18878:	mov	r1, #32
   1887c:	vst1.64	{d8-d9}, [r0 :128], r1
   18880:	vst1.64	{d8-d9}, [r0 :128]
   18884:	vpop	{d8-d9}
   18888:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1888c:	movw	r0, #33704	; 0x83a8
   18890:	movw	r1, #33832	; 0x8428
   18894:	movt	r0, #1
   18898:	movt	r1, #1
   1889c:	b	1d82c <__gcov_flush@@Base+0xb4>

000188a0 <init_token_int_type@@Base>:
   188a0:	movw	r1, #4272	; 0x10b0
   188a4:	add	r2, pc, #36	; 0x24
   188a8:	movt	r1, #3
   188ac:	vld1.64	{d16-d17}, [r2 :128]
   188b0:	vld1.64	{d18-d19}, [r1 :128]
   188b4:	vadd.i64	q8, q9, q8
   188b8:	vst1.64	{d16-d17}, [r1 :128]
   188bc:	mov	r1, #0
   188c0:	str	r1, [r0]
   188c4:	bx	lr
   188c8:	nop	{0}
   188cc:	nop	{0}
   188d0:	andeq	r0, r0, r1
   188d4:	andeq	r0, r0, r0
   188d8:	andeq	r0, r0, r1
   188dc:	andeq	r0, r0, r0

000188e0 <init_token_int_value@@Base>:
   188e0:	movw	r2, #4272	; 0x10b0
   188e4:	add	r3, pc, #36	; 0x24
   188e8:	movt	r2, #3
   188ec:	vld1.64	{d16-d17}, [r3 :128]
   188f0:	add	r2, r2, #16
   188f4:	vld1.64	{d18-d19}, [r2 :128]
   188f8:	vadd.i64	q8, q9, q8
   188fc:	vst1.64	{d16-d17}, [r2 :128]
   18900:	mov	r2, #1
   18904:	str	r2, [r0]
   18908:	str	r1, [r0, #4]
   1890c:	bx	lr
   18910:	andeq	r0, r0, r1
   18914:	andeq	r0, r0, r0
   18918:	andeq	r0, r0, r1
   1891c:	andeq	r0, r0, r0

00018920 <init_token_function@@Base>:
   18920:	movw	r2, #4272	; 0x10b0
   18924:	add	r3, pc, #36	; 0x24
   18928:	movt	r2, #3
   1892c:	vld1.64	{d16-d17}, [r3 :128]
   18930:	add	r2, r2, #32
   18934:	vld1.64	{d18-d19}, [r2 :128]
   18938:	vadd.i64	q8, q9, q8
   1893c:	vst1.64	{d16-d17}, [r2 :128]
   18940:	mov	r2, #2
   18944:	str	r2, [r0]
   18948:	str	r1, [r0, #4]
   1894c:	bx	lr
   18950:	andeq	r0, r0, r1
   18954:	andeq	r0, r0, r0
   18958:	andeq	r0, r0, r1
   1895c:	andeq	r0, r0, r0

00018960 <init_token_opar@@Base>:
   18960:	movw	r1, #4272	; 0x10b0
   18964:	add	r2, pc, #36	; 0x24
   18968:	movt	r1, #3
   1896c:	vld1.64	{d16-d17}, [r2 :128]
   18970:	add	r1, r1, #48	; 0x30
   18974:	vld1.64	{d18-d19}, [r1 :128]
   18978:	vadd.i64	q8, q9, q8
   1897c:	vst1.64	{d16-d17}, [r1 :128]
   18980:	mov	r1, #3
   18984:	str	r1, [r0]
   18988:	bx	lr
   1898c:	nop	{0}
   18990:	andeq	r0, r0, r1
   18994:	andeq	r0, r0, r0
   18998:	andeq	r0, r0, r1
   1899c:	andeq	r0, r0, r0

000189a0 <init_token_cpar@@Base>:
   189a0:	movw	r1, #4272	; 0x10b0
   189a4:	add	r2, pc, #36	; 0x24
   189a8:	movt	r1, #3
   189ac:	vld1.64	{d16-d17}, [r2 :128]
   189b0:	add	r1, r1, #64	; 0x40
   189b4:	vld1.64	{d18-d19}, [r1 :128]
   189b8:	vadd.i64	q8, q9, q8
   189bc:	vst1.64	{d16-d17}, [r1 :128]
   189c0:	mov	r1, #4
   189c4:	str	r1, [r0]
   189c8:	bx	lr
   189cc:	nop	{0}
   189d0:	andeq	r0, r0, r1
   189d4:	andeq	r0, r0, r0
   189d8:	andeq	r0, r0, r1
   189dc:	andeq	r0, r0, r0

000189e0 <init_token_obra@@Base>:
   189e0:	movw	r1, #4272	; 0x10b0
   189e4:	add	r2, pc, #36	; 0x24
   189e8:	movt	r1, #3
   189ec:	vld1.64	{d16-d17}, [r2 :128]
   189f0:	add	r1, r1, #80	; 0x50
   189f4:	vld1.64	{d18-d19}, [r1 :128]
   189f8:	vadd.i64	q8, q9, q8
   189fc:	vst1.64	{d16-d17}, [r1 :128]
   18a00:	mov	r1, #5
   18a04:	str	r1, [r0]
   18a08:	bx	lr
   18a0c:	nop	{0}
   18a10:	andeq	r0, r0, r1
   18a14:	andeq	r0, r0, r0
   18a18:	andeq	r0, r0, r1
   18a1c:	andeq	r0, r0, r0

00018a20 <init_token_cbra@@Base>:
   18a20:	movw	r1, #4272	; 0x10b0
   18a24:	add	r2, pc, #36	; 0x24
   18a28:	movt	r1, #3
   18a2c:	vld1.64	{d16-d17}, [r2 :128]
   18a30:	add	r1, r1, #96	; 0x60
   18a34:	vld1.64	{d18-d19}, [r1 :128]
   18a38:	vadd.i64	q8, q9, q8
   18a3c:	vst1.64	{d16-d17}, [r1 :128]
   18a40:	mov	r1, #6
   18a44:	str	r1, [r0]
   18a48:	bx	lr
   18a4c:	nop	{0}
   18a50:	andeq	r0, r0, r1
   18a54:	andeq	r0, r0, r0
   18a58:	andeq	r0, r0, r1
   18a5c:	andeq	r0, r0, r0

00018a60 <init_token_return@@Base>:
   18a60:	movw	r1, #4384	; 0x1120
   18a64:	add	r2, pc, #36	; 0x24
   18a68:	movt	r1, #3
   18a6c:	vld1.64	{d16-d17}, [r2 :128]
   18a70:	vld1.64	{d18-d19}, [r1 :128]
   18a74:	vadd.i64	q8, q9, q8
   18a78:	vst1.64	{d16-d17}, [r1 :128]
   18a7c:	mov	r1, #7
   18a80:	str	r1, [r0]
   18a84:	bx	lr
   18a88:	nop	{0}
   18a8c:	nop	{0}
   18a90:	andeq	r0, r0, r1
   18a94:	andeq	r0, r0, r0
   18a98:	andeq	r0, r0, r1
   18a9c:	andeq	r0, r0, r0

00018aa0 <init_token_semicolon@@Base>:
   18aa0:	movw	r1, #4384	; 0x1120
   18aa4:	add	r2, pc, #36	; 0x24
   18aa8:	movt	r1, #3
   18aac:	vld1.64	{d16-d17}, [r2 :128]
   18ab0:	add	r1, r1, #16
   18ab4:	vld1.64	{d18-d19}, [r1 :128]
   18ab8:	vadd.i64	q8, q9, q8
   18abc:	vst1.64	{d16-d17}, [r1 :128]
   18ac0:	mov	r1, #8
   18ac4:	str	r1, [r0]
   18ac8:	bx	lr
   18acc:	nop	{0}
   18ad0:	andeq	r0, r0, r1
   18ad4:	andeq	r0, r0, r0
   18ad8:	andeq	r0, r0, r1
   18adc:	andeq	r0, r0, r0

00018ae0 <init_token_eof@@Base>:
   18ae0:	movw	r1, #4384	; 0x1120
   18ae4:	add	r2, pc, #36	; 0x24
   18ae8:	movt	r1, #3
   18aec:	vld1.64	{d16-d17}, [r2 :128]
   18af0:	add	r1, r1, #32
   18af4:	vld1.64	{d18-d19}, [r1 :128]
   18af8:	vadd.i64	q8, q9, q8
   18afc:	vst1.64	{d16-d17}, [r1 :128]
   18b00:	mov	r1, #9
   18b04:	str	r1, [r0]
   18b08:	bx	lr
   18b0c:	nop	{0}
   18b10:	andeq	r0, r0, r1
   18b14:	andeq	r0, r0, r0
   18b18:	andeq	r0, r0, r1
   18b1c:	andeq	r0, r0, r0

00018b20 <init_token_if@@Base>:
   18b20:	movw	r1, #4384	; 0x1120
   18b24:	add	r2, pc, #36	; 0x24
   18b28:	movt	r1, #3
   18b2c:	vld1.64	{d16-d17}, [r2 :128]
   18b30:	add	r1, r1, #48	; 0x30
   18b34:	vld1.64	{d18-d19}, [r1 :128]
   18b38:	vadd.i64	q8, q9, q8
   18b3c:	vst1.64	{d16-d17}, [r1 :128]
   18b40:	mov	r1, #10
   18b44:	str	r1, [r0]
   18b48:	bx	lr
   18b4c:	nop	{0}
   18b50:	andeq	r0, r0, r1
   18b54:	andeq	r0, r0, r0
   18b58:	andeq	r0, r0, r1
   18b5c:	andeq	r0, r0, r0

00018b60 <init_token_else@@Base>:
   18b60:	movw	r1, #4384	; 0x1120
   18b64:	add	r2, pc, #36	; 0x24
   18b68:	movt	r1, #3
   18b6c:	vld1.64	{d16-d17}, [r2 :128]
   18b70:	add	r1, r1, #64	; 0x40
   18b74:	vld1.64	{d18-d19}, [r1 :128]
   18b78:	vadd.i64	q8, q9, q8
   18b7c:	vst1.64	{d16-d17}, [r1 :128]
   18b80:	mov	r1, #11
   18b84:	str	r1, [r0]
   18b88:	bx	lr
   18b8c:	nop	{0}
   18b90:	andeq	r0, r0, r1
   18b94:	andeq	r0, r0, r0
   18b98:	andeq	r0, r0, r1
   18b9c:	andeq	r0, r0, r0

00018ba0 <init_token_boolean_op@@Base>:
   18ba0:	movw	r2, #4384	; 0x1120
   18ba4:	add	r3, pc, #36	; 0x24
   18ba8:	movt	r2, #3
   18bac:	vld1.64	{d16-d17}, [r3 :128]
   18bb0:	add	r2, r2, #80	; 0x50
   18bb4:	vld1.64	{d18-d19}, [r2 :128]
   18bb8:	vadd.i64	q8, q9, q8
   18bbc:	vst1.64	{d16-d17}, [r2 :128]
   18bc0:	mov	r2, #12
   18bc4:	str	r2, [r0]
   18bc8:	str	r1, [r0, #4]
   18bcc:	bx	lr
   18bd0:	andeq	r0, r0, r1
   18bd4:	andeq	r0, r0, r0
   18bd8:	andeq	r0, r0, r1
   18bdc:	andeq	r0, r0, r0

00018be0 <free_token_int_type@@Base>:
   18be0:	movw	r1, #4384	; 0x1120
   18be4:	add	r2, pc, #36	; 0x24
   18be8:	movt	r1, #3
   18bec:	vld1.64	{d16-d17}, [r2 :128]
   18bf0:	add	r1, r1, #96	; 0x60
   18bf4:	vld1.64	{d18-d19}, [r1 :128]
   18bf8:	vadd.i64	q8, q9, q8
   18bfc:	vst1.64	{d16-d17}, [r1 :128]
   18c00:	b	12630 <free@plt>
   18c04:	nop	{0}
   18c08:	nop	{0}
   18c0c:	nop	{0}
   18c10:	andeq	r0, r0, r1
   18c14:	andeq	r0, r0, r0
   18c18:	andeq	r0, r0, r1
   18c1c:	andeq	r0, r0, r0

00018c20 <free_token_int_value@@Base>:
   18c20:	movw	r1, #4496	; 0x1190
   18c24:	add	r2, pc, #20
   18c28:	movt	r1, #3
   18c2c:	vld1.64	{d16-d17}, [r2 :128]
   18c30:	vld1.64	{d18-d19}, [r1 :128]
   18c34:	vadd.i64	q8, q9, q8
   18c38:	vst1.64	{d16-d17}, [r1 :128]
   18c3c:	b	12630 <free@plt>
   18c40:	andeq	r0, r0, r1
   18c44:	andeq	r0, r0, r0
   18c48:	andeq	r0, r0, r1
   18c4c:	andeq	r0, r0, r0

00018c50 <free_token_function@@Base>:
   18c50:	movw	r1, #4496	; 0x1190
   18c54:	add	r2, pc, #36	; 0x24
   18c58:	movt	r1, #3
   18c5c:	vld1.64	{d16-d17}, [r2 :128]
   18c60:	add	r1, r1, #16
   18c64:	vld1.64	{d18-d19}, [r1 :128]
   18c68:	vadd.i64	q8, q9, q8
   18c6c:	vst1.64	{d16-d17}, [r1 :128]
   18c70:	b	12630 <free@plt>
   18c74:	nop	{0}
   18c78:	nop	{0}
   18c7c:	nop	{0}
   18c80:	andeq	r0, r0, r1
   18c84:	andeq	r0, r0, r0
   18c88:	andeq	r0, r0, r1
   18c8c:	andeq	r0, r0, r0

00018c90 <free_token_opar@@Base>:
   18c90:	movw	r1, #4496	; 0x1190
   18c94:	add	r2, pc, #36	; 0x24
   18c98:	movt	r1, #3
   18c9c:	vld1.64	{d16-d17}, [r2 :128]
   18ca0:	add	r1, r1, #32
   18ca4:	vld1.64	{d18-d19}, [r1 :128]
   18ca8:	vadd.i64	q8, q9, q8
   18cac:	vst1.64	{d16-d17}, [r1 :128]
   18cb0:	b	12630 <free@plt>
   18cb4:	nop	{0}
   18cb8:	nop	{0}
   18cbc:	nop	{0}
   18cc0:	andeq	r0, r0, r1
   18cc4:	andeq	r0, r0, r0
   18cc8:	andeq	r0, r0, r1
   18ccc:	andeq	r0, r0, r0

00018cd0 <free_token_cpar@@Base>:
   18cd0:	movw	r1, #4496	; 0x1190
   18cd4:	add	r2, pc, #36	; 0x24
   18cd8:	movt	r1, #3
   18cdc:	vld1.64	{d16-d17}, [r2 :128]
   18ce0:	add	r1, r1, #48	; 0x30
   18ce4:	vld1.64	{d18-d19}, [r1 :128]
   18ce8:	vadd.i64	q8, q9, q8
   18cec:	vst1.64	{d16-d17}, [r1 :128]
   18cf0:	b	12630 <free@plt>
   18cf4:	nop	{0}
   18cf8:	nop	{0}
   18cfc:	nop	{0}
   18d00:	andeq	r0, r0, r1
   18d04:	andeq	r0, r0, r0
   18d08:	andeq	r0, r0, r1
   18d0c:	andeq	r0, r0, r0

00018d10 <free_token_obra@@Base>:
   18d10:	movw	r1, #4496	; 0x1190
   18d14:	add	r2, pc, #36	; 0x24
   18d18:	movt	r1, #3
   18d1c:	vld1.64	{d16-d17}, [r2 :128]
   18d20:	add	r1, r1, #64	; 0x40
   18d24:	vld1.64	{d18-d19}, [r1 :128]
   18d28:	vadd.i64	q8, q9, q8
   18d2c:	vst1.64	{d16-d17}, [r1 :128]
   18d30:	b	12630 <free@plt>
   18d34:	nop	{0}
   18d38:	nop	{0}
   18d3c:	nop	{0}
   18d40:	andeq	r0, r0, r1
   18d44:	andeq	r0, r0, r0
   18d48:	andeq	r0, r0, r1
   18d4c:	andeq	r0, r0, r0

00018d50 <free_token_cbra@@Base>:
   18d50:	movw	r1, #4496	; 0x1190
   18d54:	add	r2, pc, #36	; 0x24
   18d58:	movt	r1, #3
   18d5c:	vld1.64	{d16-d17}, [r2 :128]
   18d60:	add	r1, r1, #80	; 0x50
   18d64:	vld1.64	{d18-d19}, [r1 :128]
   18d68:	vadd.i64	q8, q9, q8
   18d6c:	vst1.64	{d16-d17}, [r1 :128]
   18d70:	b	12630 <free@plt>
   18d74:	nop	{0}
   18d78:	nop	{0}
   18d7c:	nop	{0}
   18d80:	andeq	r0, r0, r1
   18d84:	andeq	r0, r0, r0
   18d88:	andeq	r0, r0, r1
   18d8c:	andeq	r0, r0, r0

00018d90 <free_token_return@@Base>:
   18d90:	movw	r1, #4496	; 0x1190
   18d94:	add	r2, pc, #36	; 0x24
   18d98:	movt	r1, #3
   18d9c:	vld1.64	{d16-d17}, [r2 :128]
   18da0:	add	r1, r1, #96	; 0x60
   18da4:	vld1.64	{d18-d19}, [r1 :128]
   18da8:	vadd.i64	q8, q9, q8
   18dac:	vst1.64	{d16-d17}, [r1 :128]
   18db0:	b	12630 <free@plt>
   18db4:	nop	{0}
   18db8:	nop	{0}
   18dbc:	nop	{0}
   18dc0:	andeq	r0, r0, r1
   18dc4:	andeq	r0, r0, r0
   18dc8:	andeq	r0, r0, r1
   18dcc:	andeq	r0, r0, r0

00018dd0 <free_token_semicolon@@Base>:
   18dd0:	movw	r1, #4608	; 0x1200
   18dd4:	add	r2, pc, #20
   18dd8:	movt	r1, #3
   18ddc:	vld1.64	{d16-d17}, [r2 :128]
   18de0:	vld1.64	{d18-d19}, [r1 :128]
   18de4:	vadd.i64	q8, q9, q8
   18de8:	vst1.64	{d16-d17}, [r1 :128]
   18dec:	b	12630 <free@plt>
   18df0:	andeq	r0, r0, r1
   18df4:	andeq	r0, r0, r0
   18df8:	andeq	r0, r0, r1
   18dfc:	andeq	r0, r0, r0

00018e00 <free_token_eof@@Base>:
   18e00:	movw	r1, #4608	; 0x1200
   18e04:	add	r2, pc, #36	; 0x24
   18e08:	movt	r1, #3
   18e0c:	vld1.64	{d16-d17}, [r2 :128]
   18e10:	add	r1, r1, #16
   18e14:	vld1.64	{d18-d19}, [r1 :128]
   18e18:	vadd.i64	q8, q9, q8
   18e1c:	vst1.64	{d16-d17}, [r1 :128]
   18e20:	b	12630 <free@plt>
   18e24:	nop	{0}
   18e28:	nop	{0}
   18e2c:	nop	{0}
   18e30:	andeq	r0, r0, r1
   18e34:	andeq	r0, r0, r0
   18e38:	andeq	r0, r0, r1
   18e3c:	andeq	r0, r0, r0

00018e40 <free_token_if@@Base>:
   18e40:	movw	r1, #4608	; 0x1200
   18e44:	add	r2, pc, #36	; 0x24
   18e48:	movt	r1, #3
   18e4c:	vld1.64	{d16-d17}, [r2 :128]
   18e50:	add	r1, r1, #32
   18e54:	vld1.64	{d18-d19}, [r1 :128]
   18e58:	vadd.i64	q8, q9, q8
   18e5c:	vst1.64	{d16-d17}, [r1 :128]
   18e60:	b	12630 <free@plt>
   18e64:	nop	{0}
   18e68:	nop	{0}
   18e6c:	nop	{0}
   18e70:	andeq	r0, r0, r1
   18e74:	andeq	r0, r0, r0
   18e78:	andeq	r0, r0, r1
   18e7c:	andeq	r0, r0, r0

00018e80 <free_token_else@@Base>:
   18e80:	movw	r1, #4608	; 0x1200
   18e84:	add	r2, pc, #36	; 0x24
   18e88:	movt	r1, #3
   18e8c:	vld1.64	{d16-d17}, [r2 :128]
   18e90:	add	r1, r1, #48	; 0x30
   18e94:	vld1.64	{d18-d19}, [r1 :128]
   18e98:	vadd.i64	q8, q9, q8
   18e9c:	vst1.64	{d16-d17}, [r1 :128]
   18ea0:	b	12630 <free@plt>
   18ea4:	nop	{0}
   18ea8:	nop	{0}
   18eac:	nop	{0}
   18eb0:	andeq	r0, r0, r1
   18eb4:	andeq	r0, r0, r0
   18eb8:	andeq	r0, r0, r1
   18ebc:	andeq	r0, r0, r0

00018ec0 <free_token_boolean_op@@Base>:
   18ec0:	push	{r4, r5, fp, lr}
   18ec4:	add	fp, sp, #8
   18ec8:	movw	r5, #4608	; 0x1200
   18ecc:	mov	r4, r0
   18ed0:	mov	r2, #16
   18ed4:	movt	r5, #3
   18ed8:	mov	r1, r5
   18edc:	ldr	r0, [r1, #64]!	; 0x40
   18ee0:	adds	r0, r0, #1
   18ee4:	str	r0, [r1]
   18ee8:	ldr	r0, [r1, #4]
   18eec:	adc	r0, r0, #0
   18ef0:	str	r0, [r1, #4]
   18ef4:	ldr	r0, [r4, #4]
   18ef8:	cmp	r0, #0
   18efc:	movwne	r2, #8
   18f00:	ldr	r2, [r1, r2]!
   18f04:	adds	r2, r2, #1
   18f08:	str	r2, [r1]
   18f0c:	ldr	r2, [r1, #4]
   18f10:	adc	r2, r2, #0
   18f14:	cmp	r0, #0
   18f18:	str	r2, [r1, #4]
   18f1c:	beq	18f34 <free_token_boolean_op@@Base+0x74>
   18f20:	ldrd	r2, [r5, #88]	; 0x58
   18f24:	adds	r2, r2, #1
   18f28:	adc	r3, r3, #0
   18f2c:	strd	r2, [r5, #88]	; 0x58
   18f30:	bl	12630 <free@plt>
   18f34:	ldrd	r0, [r5, #96]	; 0x60
   18f38:	adds	r0, r0, #1
   18f3c:	adc	r1, r1, #0
   18f40:	strd	r0, [r5, #96]	; 0x60
   18f44:	mov	r0, r4
   18f48:	pop	{r4, r5, fp, lr}
   18f4c:	b	12630 <free@plt>
   18f50:	push	{r4, r5, r6, lr}
   18f54:	sub	sp, sp, #8
   18f58:	movw	r0, #61232	; 0xef30
   18f5c:	movw	r1, #57110	; 0xdf16
   18f60:	movw	r2, #10327	; 0x2857
   18f64:	movt	r0, #1
   18f68:	movt	r1, #1
   18f6c:	movt	r2, #23326	; 0x5b1e
   18f70:	bl	1ae7c <next@@Base+0x1a2c>
   18f74:	movw	r0, #62448	; 0xf3f0
   18f78:	movw	r6, #61920	; 0xf1e0
   18f7c:	mov	r5, #0
   18f80:	movt	r0, #1
   18f84:	movt	r6, #1
   18f88:	add	r4, r0, #4
   18f8c:	mov	r3, r6
   18f90:	ldr	r0, [r3, r5]!
   18f94:	ldr	r1, [r3, #16]
   18f98:	str	r1, [sp]
   18f9c:	ldmib	r3, {r1, r2}
   18fa0:	ldrb	r3, [r3, #12]
   18fa4:	bl	1b5e0 <next@@Base+0x2190>
   18fa8:	ldrd	r0, [r4, #-4]
   18fac:	bl	1be94 <next@@Base+0x2a44>
   18fb0:	add	r5, r5, #20
   18fb4:	add	r4, r4, #8
   18fb8:	cmp	r5, #520	; 0x208
   18fbc:	bne	18f8c <free_token_boolean_op@@Base+0xcc>
   18fc0:	bl	1c610 <next@@Base+0x31c0>
   18fc4:	add	sp, sp, #8
   18fc8:	pop	{r4, r5, r6, lr}
   18fcc:	b	1d37c <next@@Base+0x3f2c>
   18fd0:	push	{fp, lr}
   18fd4:	bl	18f50 <free_token_boolean_op@@Base+0x90>
   18fd8:	movw	r1, #4384	; 0x1120
   18fdc:	vmov.i32	q8, #0	; 0x00000000
   18fe0:	mov	r0, #96	; 0x60
   18fe4:	movt	r1, #3
   18fe8:	mov	r2, r1
   18fec:	vst1.64	{d16-d17}, [r2 :128], r0
   18ff0:	vst1.64	{d16-d17}, [r2 :128]
   18ff4:	movw	r2, #4272	; 0x10b0
   18ff8:	movt	r2, #3
   18ffc:	add	r3, r2, #16
   19000:	vst1.64	{d16-d17}, [r3 :128]
   19004:	add	r3, r2, #32
   19008:	vst1.64	{d16-d17}, [r3 :128]
   1900c:	add	r3, r2, #48	; 0x30
   19010:	vst1.64	{d16-d17}, [r3 :128]
   19014:	add	r3, r2, #64	; 0x40
   19018:	vst1.64	{d16-d17}, [r3 :128]
   1901c:	add	r3, r2, #80	; 0x50
   19020:	vst1.64	{d16-d17}, [r3 :128]
   19024:	add	r3, r1, #16
   19028:	vst1.64	{d16-d17}, [r2 :128], r0
   1902c:	vst1.64	{d16-d17}, [r3 :128]
   19030:	add	r3, r1, #32
   19034:	vst1.64	{d16-d17}, [r2 :128]
   19038:	vst1.64	{d16-d17}, [r3 :128]
   1903c:	add	r3, r1, #48	; 0x30
   19040:	vst1.64	{d16-d17}, [r3 :128]
   19044:	add	r3, r1, #64	; 0x40
   19048:	add	r1, r1, #80	; 0x50
   1904c:	vst1.64	{d16-d17}, [r3 :128]
   19050:	vst1.64	{d16-d17}, [r1 :128]
   19054:	movw	r1, #4496	; 0x1190
   19058:	movt	r1, #3
   1905c:	add	r3, r1, #16
   19060:	add	r2, r1, #80	; 0x50
   19064:	vst1.64	{d16-d17}, [r3 :128]
   19068:	add	r3, r1, #32
   1906c:	vst1.64	{d16-d17}, [r3 :128]
   19070:	add	r3, r1, #48	; 0x30
   19074:	vst1.64	{d16-d17}, [r3 :128]
   19078:	add	r3, r1, #64	; 0x40
   1907c:	vst1.64	{d16-d17}, [r3 :128]
   19080:	vst1.64	{d16-d17}, [r1 :128], r0
   19084:	vst1.64	{d16-d17}, [r2 :128]
   19088:	mov	r0, #80	; 0x50
   1908c:	vst1.64	{d16-d17}, [r1 :128]
   19090:	movw	r1, #4608	; 0x1200
   19094:	movt	r1, #3
   19098:	mov	r2, r1
   1909c:	vst1.64	{d16-d17}, [r2 :128], r0
   190a0:	add	r0, r1, #32
   190a4:	vst1.64	{d16-d17}, [r0 :128]
   190a8:	add	r0, r1, #16
   190ac:	vst1.64	{d16-d17}, [r0 :128]
   190b0:	add	r0, r1, #48	; 0x30
   190b4:	vst1.64	{d16-d17}, [r0 :128]
   190b8:	mov	r0, #0
   190bc:	vst1.64	{d16-d17}, [r2 :128]
   190c0:	str	r0, [r1, #96]	; 0x60
   190c4:	str	r0, [r1, #100]	; 0x64
   190c8:	add	r0, r1, #64	; 0x40
   190cc:	vst1.64	{d16-d17}, [r0 :128]
   190d0:	pop	{fp, pc}
   190d4:	movw	r0, #36688	; 0x8f50
   190d8:	movw	r1, #36816	; 0x8fd0
   190dc:	movt	r0, #1
   190e0:	movt	r1, #1
   190e4:	b	1d82c <__gcov_flush@@Base+0xb4>
	...

000190f0 <init_lexer@@Base>:
   190f0:	movw	r2, #5728	; 0x1660
   190f4:	add	r3, pc, #36	; 0x24
   190f8:	movt	r2, #3
   190fc:	vld1.64	{d16-d17}, [r3 :128]
   19100:	vld1.64	{d18-d19}, [r2 :128]
   19104:	vadd.i64	q8, q9, q8
   19108:	vst1.64	{d16-d17}, [r2 :128]
   1910c:	mov	r2, #0
   19110:	stm	r0, {r1, r2}
   19114:	str	r2, [r0, #8]
   19118:	bx	lr
   1911c:	nop	{0}
   19120:	andeq	r0, r0, r1
   19124:	andeq	r0, r0, r0
   19128:	andeq	r0, r0, r1
   1912c:	andeq	r0, r0, r0

00019130 <destroy_lexer@@Base>:
   19130:	push	{r4, sl, fp, lr}
   19134:	add	fp, sp, #8
   19138:	movw	r4, #5824	; 0x16c0
   1913c:	movt	r4, #3
   19140:	mov	r1, r4
   19144:	ldr	r2, [r1, #32]!
   19148:	adds	r2, r2, #1
   1914c:	str	r2, [r1]
   19150:	ldr	r2, [r1, #4]
   19154:	adc	r2, r2, #0
   19158:	str	r2, [r1, #4]
   1915c:	mov	r2, #16
   19160:	ldr	r0, [r0, #4]
   19164:	cmp	r0, #0
   19168:	movwne	r2, #8
   1916c:	ldr	r2, [r1, r2]!
   19170:	adds	r2, r2, #1
   19174:	str	r2, [r1]
   19178:	ldr	r2, [r1, #4]
   1917c:	adc	r2, r2, #0
   19180:	cmp	r0, #0
   19184:	str	r2, [r1, #4]
   19188:	beq	191c0 <destroy_lexer@@Base+0x90>
   1918c:	movw	r1, #5728	; 0x1660
   19190:	add	r2, pc, #72	; 0x48
   19194:	movt	r1, #3
   19198:	vld1.64	{d16-d17}, [r2 :128]
   1919c:	ldrd	r2, [r4, #56]	; 0x38
   191a0:	add	r1, r1, #16
   191a4:	vld1.64	{d18-d19}, [r1 :128]
   191a8:	adds	r2, r2, #1
   191ac:	adc	r3, r3, #0
   191b0:	vadd.i64	q8, q9, q8
   191b4:	strd	r2, [r4, #56]	; 0x38
   191b8:	vst1.64	{d16-d17}, [r1 :128]
   191bc:	bl	12630 <free@plt>
   191c0:	ldrd	r0, [r4, #64]	; 0x40
   191c4:	adds	r0, r0, #1
   191c8:	adc	r1, r1, #0
   191cc:	strd	r0, [r4, #64]	; 0x40
   191d0:	pop	{r4, sl, fp, pc}
   191d4:	nop	{0}
   191d8:	nop	{0}
   191dc:	nop	{0}
   191e0:	andeq	r0, r0, r1
   191e4:	andeq	r0, r0, r0
   191e8:	andeq	r0, r0, r1
   191ec:	andeq	r0, r0, r0

000191f0 <free_stack_base@@Base>:
   191f0:	movw	r1, #5728	; 0x1660
   191f4:	add	r2, pc, #36	; 0x24
   191f8:	movt	r1, #3
   191fc:	vld1.64	{d16-d17}, [r2 :128]
   19200:	add	r1, r1, #16
   19204:	vld1.64	{d18-d19}, [r1 :128]
   19208:	vadd.i64	q8, q9, q8
   1920c:	vst1.64	{d16-d17}, [r1 :128]
   19210:	b	12630 <free@plt>
   19214:	nop	{0}
   19218:	nop	{0}
   1921c:	nop	{0}
   19220:	andeq	r0, r0, r1
   19224:	andeq	r0, r0, r0
   19228:	andeq	r0, r0, r1
   1922c:	andeq	r0, r0, r0

00019230 <push_back@@Base>:
   19230:	push	{r4, r5, fp, lr}
   19234:	add	fp, sp, #8
   19238:	mov	r5, r0
   1923c:	movw	r0, #5728	; 0x1660
   19240:	mov	r4, r1
   19244:	add	r1, pc, #52	; 0x34
   19248:	movt	r0, #3
   1924c:	vld1.64	{d16-d17}, [r1 :128]
   19250:	add	r0, r0, #32
   19254:	vld1.64	{d18-d19}, [r0 :128]
   19258:	vadd.i64	q8, q9, q8
   1925c:	vst1.64	{d16-d17}, [r0 :128]
   19260:	mov	r0, #8
   19264:	bl	126c0 <malloc@plt>
   19268:	ldr	r1, [r5, #4]
   1926c:	stm	r0, {r1, r4}
   19270:	str	r0, [r5, #4]
   19274:	pop	{r4, r5, fp, pc}
   19278:	nop	{0}
   1927c:	nop	{0}
   19280:	andeq	r0, r0, r1
   19284:	andeq	r0, r0, r0
   19288:	andeq	r0, r0, r1
   1928c:	andeq	r0, r0, r0

00019290 <get_char@@Base>:
   19290:	movw	r1, #5728	; 0x1660
   19294:	add	r2, pc, #52	; 0x34
   19298:	movt	r1, #3
   1929c:	vld1.64	{d16-d17}, [r2 :128]
   192a0:	add	r1, r1, #48	; 0x30
   192a4:	vld1.64	{d18-d19}, [r1 :128]
   192a8:	vadd.i64	q8, q9, q8
   192ac:	vst1.64	{d16-d17}, [r1 :128]
   192b0:	ldr	r2, [r0, #8]
   192b4:	ldr	r1, [r0]
   192b8:	add	r3, r2, #1
   192bc:	str	r3, [r0, #8]
   192c0:	ldrb	r0, [r1, r2]
   192c4:	bx	lr
   192c8:	nop	{0}
   192cc:	nop	{0}
   192d0:	andeq	r0, r0, r1
   192d4:	andeq	r0, r0, r0
   192d8:	andeq	r0, r0, r1
   192dc:	andeq	r0, r0, r0

000192e0 <push_back_chars@@Base>:
   192e0:	push	{r4, r5, fp, lr}
   192e4:	add	fp, sp, #8
   192e8:	movw	ip, #5824	; 0x16c0
   192ec:	movt	ip, #3
   192f0:	ldrd	r4, [ip]
   192f4:	mov	r2, ip
   192f8:	adds	r4, r4, #1
   192fc:	adc	r5, r5, #0
   19300:	strd	r4, [ip]
   19304:	mov	r5, #16
   19308:	ldr	r3, [r0, #8]
   1930c:	cmp	r3, r1
   19310:	movwcs	r5, #8
   19314:	ldr	r5, [r2, r5]!
   19318:	adds	r5, r5, #1
   1931c:	str	r5, [r2]
   19320:	ldr	r5, [r2, #4]
   19324:	adc	r5, r5, #0
   19328:	cmp	r3, r1
   1932c:	str	r5, [r2, #4]
   19330:	bcc	19358 <push_back_chars@@Base+0x78>
   19334:	ldr	r2, [ip, #24]
   19338:	ldr	r5, [ip, #28]
   1933c:	sub	r1, r3, r1
   19340:	adds	r2, r2, #1
   19344:	adc	r5, r5, #0
   19348:	str	r2, [ip, #24]
   1934c:	str	r5, [ip, #28]
   19350:	str	r1, [r0, #8]
   19354:	pop	{r4, r5, fp, pc}
   19358:	movw	r0, #224	; 0xe0
   1935c:	mov	r1, #32
   19360:	mov	r2, #1
   19364:	movt	r0, #3
   19368:	ldr	r3, [r0]
   1936c:	movw	r0, #62656	; 0xf4c0
   19370:	movt	r0, #1
   19374:	bl	1269c <fwrite@plt>
   19378:	mov	r0, #1
   1937c:	bl	126fc <exit@plt>

00019380 <push_back_one_char@@Base>:
   19380:	push	{r4, r5, fp, lr}
   19384:	add	fp, sp, #8
   19388:	movw	r1, #5728	; 0x1660
   1938c:	movw	ip, #5824	; 0x16c0
   19390:	add	r3, pc, #168	; 0xa8
   19394:	movt	r1, #3
   19398:	movt	ip, #3
   1939c:	vld1.64	{d16-d17}, [r3 :128]
   193a0:	mov	r3, #16
   193a4:	add	r2, r1, #64	; 0x40
   193a8:	ldrd	r4, [ip]
   193ac:	mov	r1, ip
   193b0:	vld1.64	{d18-d19}, [r2 :128]
   193b4:	adds	r4, r4, #1
   193b8:	vadd.i64	q8, q9, q8
   193bc:	adc	r5, r5, #0
   193c0:	strd	r4, [ip]
   193c4:	vst1.64	{d16-d17}, [r2 :128]
   193c8:	ldr	r2, [r0, #8]
   193cc:	cmp	r2, #0
   193d0:	movwne	r3, #8
   193d4:	ldr	r3, [r1, r3]!
   193d8:	adds	r3, r3, #1
   193dc:	str	r3, [r1]
   193e0:	ldr	r3, [r1, #4]
   193e4:	adc	r3, r3, #0
   193e8:	cmp	r2, #0
   193ec:	str	r3, [r1, #4]
   193f0:	beq	19410 <push_back_one_char@@Base+0x90>
   193f4:	ldrd	r4, [ip, #24]
   193f8:	sub	r1, r2, #1
   193fc:	adds	r4, r4, #1
   19400:	adc	r5, r5, #0
   19404:	strd	r4, [ip, #24]
   19408:	str	r1, [r0, #8]
   1940c:	pop	{r4, r5, fp, pc}
   19410:	movw	r0, #224	; 0xe0
   19414:	mov	r1, #32
   19418:	mov	r2, #1
   1941c:	movt	r0, #3
   19420:	ldr	r3, [r0]
   19424:	movw	r0, #62656	; 0xf4c0
   19428:	movt	r0, #1
   1942c:	bl	1269c <fwrite@plt>
   19430:	mov	r0, #1
   19434:	bl	126fc <exit@plt>
   19438:	nop	{0}
   1943c:	nop	{0}
   19440:	andeq	r0, r0, r1
   19444:	andeq	r0, r0, r0
   19448:	andeq	r0, r0, r1
   1944c:	andeq	r0, r0, r0

00019450 <next@@Base>:
   19450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19454:	add	fp, sp, #28
   19458:	sub	sp, sp, #524	; 0x20c
   1945c:	movw	r7, #4720	; 0x1270
   19460:	mov	r4, r0
   19464:	movt	r7, #3
   19468:	ldrd	r0, [r7]
   1946c:	mov	r2, r7
   19470:	adds	r0, r0, #1
   19474:	adc	r1, r1, #0
   19478:	strd	r0, [r7]
   1947c:	mov	r1, #16
   19480:	ldr	r0, [r4, #4]
   19484:	cmp	r0, #0
   19488:	movwne	r1, #8
   1948c:	ldr	r1, [r2, r1]!
   19490:	adds	r1, r1, #1
   19494:	str	r1, [r2]
   19498:	ldr	r1, [r2, #4]
   1949c:	adc	r1, r1, #0
   194a0:	cmp	r0, #0
   194a4:	str	r1, [r2, #4]
   194a8:	beq	194f8 <next@@Base+0xa8>
   194ac:	ldrd	r2, [r7, #24]
   194b0:	adds	r2, r2, #1
   194b4:	adc	r3, r3, #0
   194b8:	strd	r2, [r7, #24]
   194bc:	ldr	r1, [r0]
   194c0:	str	r1, [r4, #4]
   194c4:	mov	r1, #0
   194c8:	ldr	r6, [r0, #4]
   194cc:	str	r1, [r0, #4]
   194d0:	movw	r1, #5728	; 0x1660
   194d4:	add	r2, pc, #948	; 0x3b4
   194d8:	movt	r1, #3
   194dc:	vld1.64	{d16-d17}, [r2 :128]
   194e0:	add	r1, r1, #16
   194e4:	vld1.64	{d18-d19}, [r1 :128]
   194e8:	vadd.i64	q8, q9, q8
   194ec:	vst1.64	{d16-d17}, [r1 :128]
   194f0:	bl	12630 <free@plt>
   194f4:	b	19aac <next@@Base+0x65c>
   194f8:	movw	r6, #5728	; 0x1660
   194fc:	add	r0, pc, #908	; 0x38c
   19500:	movt	r6, #3
   19504:	vld1.64	{d16-d17}, [r0 :128]
   19508:	ldrd	r0, [r7, #32]
   1950c:	add	r5, r6, #48	; 0x30
   19510:	vld1.64	{d18-d19}, [r5 :128]
   19514:	adds	r0, r0, #1
   19518:	adc	r1, r1, #0
   1951c:	vadd.i64	q8, q9, q8
   19520:	strd	r0, [r7, #32]
   19524:	vst1.64	{d16-d17}, [r5 :128]
   19528:	ldr	r1, [r4, #8]
   1952c:	ldr	r0, [r4]
   19530:	add	r2, r1, #1
   19534:	str	r2, [r4, #8]
   19538:	ldrb	r9, [r0, r1]
   1953c:	mov	r0, #48	; 0x30
   19540:	mov	r1, r7
   19544:	cmp	r9, #0
   19548:	movwne	r0, #40	; 0x28
   1954c:	ldr	r0, [r1, r0]!
   19550:	adds	r0, r0, #1
   19554:	str	r0, [r1]
   19558:	ldr	r0, [r1, #4]
   1955c:	adc	r0, r0, #0
   19560:	cmp	r9, #0
   19564:	str	r0, [r1, #4]
   19568:	beq	19a84 <next@@Base+0x634>
   1956c:	movw	sl, #62816	; 0xf560
   19570:	mov	r0, #0
   19574:	mov	r8, #0
   19578:	movt	sl, #1
   1957c:	str	r0, [sp, #4]
   19580:	b	1991c <next@@Base+0x4cc>
   19584:	cmp	r2, #48	; 0x30
   19588:	mov	r0, #176	; 0xb0
   1958c:	mov	r1, r7
   19590:	movweq	r0, #168	; 0xa8
   19594:	ldr	r0, [r1, r0]!
   19598:	adds	r0, r0, #1
   1959c:	str	r0, [r1]
   195a0:	ldr	r0, [r1, #4]
   195a4:	adc	r0, r0, #0
   195a8:	cmp	r2, #48	; 0x30
   195ac:	str	r0, [r1, #4]
   195b0:	beq	1a2d0 <next@@Base+0xe80>
   195b4:	mov	r0, #200	; 0xc8
   195b8:	mov	r1, r7
   195bc:	movwhi	r0, #192	; 0xc0
   195c0:	ldr	r0, [r1, r0]!
   195c4:	adds	r0, r0, #1
   195c8:	str	r0, [r1]
   195cc:	ldr	r0, [r1, #4]
   195d0:	adc	r0, r0, #0
   195d4:	cmp	r2, #49	; 0x31
   195d8:	str	r0, [r1, #4]
   195dc:	bcc	1a2f8 <next@@Base+0xea8>
   195e0:	cmp	r2, #58	; 0x3a
   195e4:	mov	r0, #216	; 0xd8
   195e8:	mov	r1, r7
   195ec:	movwcc	r0, #208	; 0xd0
   195f0:	ldr	r0, [r1, r0]!
   195f4:	adds	r0, r0, #1
   195f8:	str	r0, [r1]
   195fc:	ldr	r0, [r1, #4]
   19600:	adc	r0, r0, #0
   19604:	cmp	r2, #57	; 0x39
   19608:	str	r0, [r1, #4]
   1960c:	bhi	19650 <next@@Base+0x200>
   19610:	add	r0, pc, #632	; 0x278
   19614:	ldr	r3, [sp, #4]
   19618:	vld1.64	{d18-d19}, [r5 :128]
   1961c:	mov	r8, #1
   19620:	vld1.64	{d16-d17}, [r0 :128]
   19624:	add	r0, sp, #8
   19628:	strb	r9, [r0, r3]
   1962c:	ldrd	r0, [r7, #224]	; 0xe0
   19630:	add	r3, r3, #1
   19634:	vadd.i64	q8, q9, q8
   19638:	str	r3, [sp, #4]
   1963c:	vst1.64	{d16-d17}, [r5 :128]
   19640:	adds	r0, r0, #1
   19644:	adc	r1, r1, #0
   19648:	strd	r0, [r7, #224]	; 0xe0
   1964c:	b	19a18 <next@@Base+0x5c8>
   19650:	ldrd	r0, [r7, #240]	; 0xf0
   19654:	ldr	r3, [r7, #264]	; 0x108
   19658:	ldr	r6, [r7, #268]	; 0x10c
   1965c:	adds	r0, r0, #1
   19660:	adc	r1, r1, #0
   19664:	adds	r3, r3, #1
   19668:	str	r3, [r7, #264]	; 0x108
   1966c:	strd	r0, [r7, #240]	; 0xf0
   19670:	adc	r0, r6, #0
   19674:	cmp	r2, #123	; 0x7b
   19678:	mov	r1, r7
   1967c:	str	r0, [r7, #268]	; 0x10c
   19680:	mov	r0, #288	; 0x120
   19684:	movweq	r0, #280	; 0x118
   19688:	ldr	r0, [r1, r0]!
   1968c:	adds	r0, r0, #1
   19690:	str	r0, [r1]
   19694:	ldr	r0, [r1, #4]
   19698:	adc	r0, r0, #0
   1969c:	cmp	r2, #123	; 0x7b
   196a0:	str	r0, [r1, #4]
   196a4:	beq	1a3a8 <next@@Base+0xf58>
   196a8:	cmp	r2, #125	; 0x7d
   196ac:	mov	r0, #312	; 0x138
   196b0:	mov	r1, r7
   196b4:	movweq	r0, #304	; 0x130
   196b8:	ldr	r0, [r1, r0]!
   196bc:	adds	r0, r0, #1
   196c0:	str	r0, [r1]
   196c4:	ldr	r0, [r1, #4]
   196c8:	adc	r0, r0, #0
   196cc:	cmp	r2, #125	; 0x7d
   196d0:	str	r0, [r1, #4]
   196d4:	beq	1a3d4 <next@@Base+0xf84>
   196d8:	cmp	r2, #59	; 0x3b
   196dc:	mov	r0, #336	; 0x150
   196e0:	mov	r1, r7
   196e4:	movweq	r0, #328	; 0x148
   196e8:	ldr	r0, [r1, r0]!
   196ec:	adds	r0, r0, #1
   196f0:	str	r0, [r1]
   196f4:	ldr	r0, [r1, #4]
   196f8:	adc	r0, r0, #0
   196fc:	cmp	r2, #59	; 0x3b
   19700:	str	r0, [r1, #4]
   19704:	beq	1a400 <next@@Base+0xfb0>
   19708:	cmp	r2, #101	; 0x65
   1970c:	mov	r0, #360	; 0x168
   19710:	mov	r1, r7
   19714:	movweq	r0, #352	; 0x160
   19718:	ldr	r0, [r1, r0]!
   1971c:	adds	r0, r0, #1
   19720:	str	r0, [r1]
   19724:	ldr	r0, [r1, #4]
   19728:	adc	r0, r0, #0
   1972c:	cmp	r2, #101	; 0x65
   19730:	str	r0, [r1, #4]
   19734:	bne	1978c <next@@Base+0x33c>
   19738:	add	r0, pc, #336	; 0x150
   1973c:	ldr	r3, [sp, #4]
   19740:	mov	r1, #101	; 0x65
   19744:	vld1.64	{d18-d19}, [r5 :128]
   19748:	movw	r6, #5728	; 0x1660
   1974c:	mov	r8, #5
   19750:	vld1.64	{d16-d17}, [r0 :128]
   19754:	add	r0, sp, #8
   19758:	movt	r6, #3
   1975c:	strb	r1, [r0, r3]
   19760:	ldr	r0, [r7, #368]	; 0x170
   19764:	ldr	r1, [r7, #372]	; 0x174
   19768:	add	r3, r3, #1
   1976c:	vadd.i64	q8, q9, q8
   19770:	str	r3, [sp, #4]
   19774:	vst1.64	{d16-d17}, [r5 :128]
   19778:	adds	r0, r0, #1
   1977c:	adc	r1, r1, #0
   19780:	str	r0, [r7, #368]	; 0x170
   19784:	str	r1, [r7, #372]	; 0x174
   19788:	b	19a18 <next@@Base+0x5c8>
   1978c:	cmp	r2, #105	; 0x69
   19790:	mov	r0, #384	; 0x180
   19794:	mov	r1, r7
   19798:	movw	r6, #5728	; 0x1660
   1979c:	movweq	r0, #376	; 0x178
   197a0:	movt	r6, #3
   197a4:	ldr	r0, [r1, r0]!
   197a8:	adds	r0, r0, #1
   197ac:	str	r0, [r1]
   197b0:	ldr	r0, [r1, #4]
   197b4:	adc	r0, r0, #0
   197b8:	cmp	r2, #105	; 0x69
   197bc:	str	r0, [r1, #4]
   197c0:	bne	19810 <next@@Base+0x3c0>
   197c4:	add	r0, pc, #196	; 0xc4
   197c8:	ldr	r3, [sp, #4]
   197cc:	mov	r1, #105	; 0x69
   197d0:	vld1.64	{d18-d19}, [r5 :128]
   197d4:	mov	r8, #2
   197d8:	vld1.64	{d16-d17}, [r0 :128]
   197dc:	add	r0, sp, #8
   197e0:	strb	r1, [r0, r3]
   197e4:	ldr	r0, [r7, #392]	; 0x188
   197e8:	ldr	r1, [r7, #396]	; 0x18c
   197ec:	add	r3, r3, #1
   197f0:	vadd.i64	q8, q9, q8
   197f4:	str	r3, [sp, #4]
   197f8:	vst1.64	{d16-d17}, [r5 :128]
   197fc:	adds	r0, r0, #1
   19800:	adc	r1, r1, #0
   19804:	str	r0, [r7, #392]	; 0x188
   19808:	str	r1, [r7, #396]	; 0x18c
   1980c:	b	19a18 <next@@Base+0x5c8>
   19810:	cmp	r2, #109	; 0x6d
   19814:	mov	r0, #408	; 0x198
   19818:	mov	r1, r7
   1981c:	movweq	r0, #400	; 0x190
   19820:	ldr	r0, [r1, r0]!
   19824:	adds	r0, r0, #1
   19828:	str	r0, [r1]
   1982c:	ldr	r0, [r1, #4]
   19830:	adc	r0, r0, #0
   19834:	cmp	r2, #109	; 0x6d
   19838:	str	r0, [r1, #4]
   1983c:	bne	198a0 <next@@Base+0x450>
   19840:	add	r0, pc, #72	; 0x48
   19844:	ldr	r3, [sp, #4]
   19848:	mov	r1, #109	; 0x6d
   1984c:	vld1.64	{d18-d19}, [r5 :128]
   19850:	mov	r8, #3
   19854:	vld1.64	{d16-d17}, [r0 :128]
   19858:	add	r0, sp, #8
   1985c:	strb	r1, [r0, r3]
   19860:	ldr	r0, [r7, #416]	; 0x1a0
   19864:	ldr	r1, [r7, #420]	; 0x1a4
   19868:	add	r3, r3, #1
   1986c:	vadd.i64	q8, q9, q8
   19870:	str	r3, [sp, #4]
   19874:	vst1.64	{d16-d17}, [r5 :128]
   19878:	adds	r0, r0, #1
   1987c:	adc	r1, r1, #0
   19880:	str	r0, [r7, #416]	; 0x1a0
   19884:	str	r1, [r7, #420]	; 0x1a4
   19888:	b	19a18 <next@@Base+0x5c8>
   1988c:	nop	{0}
   19890:	andeq	r0, r0, r1
   19894:	andeq	r0, r0, r0
   19898:	andeq	r0, r0, r1
   1989c:	andeq	r0, r0, r0
   198a0:	cmp	r2, #114	; 0x72
   198a4:	mov	r0, #432	; 0x1b0
   198a8:	mov	r1, r7
   198ac:	movweq	r0, #424	; 0x1a8
   198b0:	ldr	r0, [r1, r0]!
   198b4:	adds	r0, r0, #1
   198b8:	str	r0, [r1]
   198bc:	ldr	r0, [r1, #4]
   198c0:	adc	r0, r0, #0
   198c4:	cmp	r2, #114	; 0x72
   198c8:	str	r0, [r1, #4]
   198cc:	bne	1a7d0 <next@@Base+0x1380>
   198d0:	sub	r0, pc, #72	; 0x48
   198d4:	ldr	r3, [sp, #4]
   198d8:	mov	r1, #114	; 0x72
   198dc:	vld1.64	{d18-d19}, [r5 :128]
   198e0:	mov	r8, #4
   198e4:	vld1.64	{d16-d17}, [r0 :128]
   198e8:	add	r0, sp, #8
   198ec:	strb	r1, [r0, r3]
   198f0:	ldr	r0, [r7, #440]	; 0x1b8
   198f4:	ldr	r1, [r7, #444]	; 0x1bc
   198f8:	add	r3, r3, #1
   198fc:	vadd.i64	q8, q9, q8
   19900:	str	r3, [sp, #4]
   19904:	vst1.64	{d16-d17}, [r5 :128]
   19908:	adds	r0, r0, #1
   1990c:	adc	r1, r1, #0
   19910:	str	r0, [r7, #440]	; 0x1b8
   19914:	str	r1, [r7, #444]	; 0x1bc
   19918:	b	19a18 <next@@Base+0x5c8>
   1991c:	movw	r0, #200	; 0xc8
   19920:	cmp	r8, #5
   19924:	mov	r1, #0
   19928:	movt	r0, #3
   1992c:	str	r1, [r0]
   19930:	bhi	19a30 <next@@Base+0x5e0>
   19934:	add	r0, pc, #0
   19938:	ldr	pc, [r0, r8, lsl #2]
   1993c:	andeq	r9, r1, r4, asr r9
   19940:	ldrdeq	r9, [r1], -r0
   19944:	andeq	r9, r1, r4, ror #30
   19948:	andeq	r9, r1, r8, lsr #23
   1994c:	andeq	r9, r1, r4, lsr #26
   19950:	andeq	sl, r1, r0, asr #32
   19954:	add	r0, sl, #8
   19958:	bl	1abd0 <next@@Base+0x1780>
   1995c:	uxtb	r2, r9
   19960:	mov	r0, #120	; 0x78
   19964:	mov	r1, r7
   19968:	cmp	r2, #9
   1996c:	movweq	r0, #112	; 0x70
   19970:	ldr	r0, [r1, r0]!
   19974:	adds	r0, r0, #1
   19978:	str	r0, [r1]
   1997c:	ldr	r0, [r1, #4]
   19980:	adc	r0, r0, #0
   19984:	cmp	r2, #9
   19988:	str	r0, [r1, #4]
   1998c:	beq	199f0 <next@@Base+0x5a0>
   19990:	cmp	r2, #32
   19994:	mov	r0, #136	; 0x88
   19998:	mov	r1, r7
   1999c:	movweq	r0, #128	; 0x80
   199a0:	ldr	r0, [r1, r0]!
   199a4:	adds	r0, r0, #1
   199a8:	str	r0, [r1]
   199ac:	ldr	r0, [r1, #4]
   199b0:	adc	r0, r0, #0
   199b4:	cmp	r2, #32
   199b8:	str	r0, [r1, #4]
   199bc:	beq	199f0 <next@@Base+0x5a0>
   199c0:	cmp	r2, #10
   199c4:	mov	r0, #152	; 0x98
   199c8:	mov	r1, r7
   199cc:	movweq	r0, #144	; 0x90
   199d0:	ldr	r0, [r1, r0]!
   199d4:	adds	r0, r0, #1
   199d8:	str	r0, [r1]
   199dc:	ldr	r0, [r1, #4]
   199e0:	adc	r0, r0, #0
   199e4:	cmp	r2, #10
   199e8:	str	r0, [r1, #4]
   199ec:	bne	19584 <next@@Base+0x134>
   199f0:	sub	r0, pc, #360	; 0x168
   199f4:	vld1.64	{d18-d19}, [r5 :128]
   199f8:	mov	r8, #0
   199fc:	vld1.64	{d16-d17}, [r0 :128]
   19a00:	ldrd	r0, [r7, #160]	; 0xa0
   19a04:	adds	r0, r0, #1
   19a08:	vadd.i64	q8, q9, q8
   19a0c:	adc	r1, r1, #0
   19a10:	vst1.64	{d16-d17}, [r5 :128]
   19a14:	strd	r0, [r7, #160]	; 0xa0
   19a18:	ldr	r1, [r4, #8]
   19a1c:	ldr	r0, [r4]
   19a20:	add	r2, r1, #1
   19a24:	add	r0, r0, r1
   19a28:	str	r2, [r4, #8]
   19a2c:	ldrb	r9, [r0]
   19a30:	mov	r0, sl
   19a34:	bl	1abd0 <next@@Base+0x1780>
   19a38:	ldr	r0, [r7, #984]	; 0x3d8
   19a3c:	ldr	r1, [r7, #988]	; 0x3dc
   19a40:	mov	r2, r7
   19a44:	adds	r0, r0, #1
   19a48:	adc	r1, r1, #0
   19a4c:	str	r0, [r7, #984]	; 0x3d8
   19a50:	uxtb	r0, r9
   19a54:	str	r1, [r7, #988]	; 0x3dc
   19a58:	cmp	r0, #0
   19a5c:	mov	r1, #48	; 0x30
   19a60:	movwne	r1, #40	; 0x28
   19a64:	ldr	r1, [r2, r1]!
   19a68:	adds	r1, r1, #1
   19a6c:	str	r1, [r2]
   19a70:	ldr	r1, [r2, #4]
   19a74:	adc	r1, r1, #0
   19a78:	cmp	r0, #0
   19a7c:	str	r1, [r2, #4]
   19a80:	bne	1991c <next@@Base+0x4cc>
   19a84:	ldr	r0, [r7, #992]	; 0x3e0
   19a88:	ldr	r1, [r7, #996]	; 0x3e4
   19a8c:	adds	r0, r0, #1
   19a90:	adc	r1, r1, #0
   19a94:	str	r0, [r7, #992]	; 0x3e0
   19a98:	mov	r0, #4
   19a9c:	str	r1, [r7, #996]	; 0x3e4
   19aa0:	bl	126c0 <malloc@plt>
   19aa4:	mov	r6, r0
   19aa8:	bl	18ae0 <init_token_eof@@Base>
   19aac:	ldr	r0, [r7, #1000]	; 0x3e8
   19ab0:	ldr	r1, [r7, #1004]	; 0x3ec
   19ab4:	adds	r0, r0, #1
   19ab8:	adc	r1, r1, #0
   19abc:	str	r0, [r7, #1000]	; 0x3e8
   19ac0:	mov	r0, r6
   19ac4:	str	r1, [r7, #1004]	; 0x3ec
   19ac8:	sub	sp, fp, #28
   19acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ad0:	add	r6, sl, #16
   19ad4:	mov	r0, r6
   19ad8:	bl	1abd0 <next@@Base+0x1780>
   19adc:	sub	r0, r9, #48	; 0x30
   19ae0:	mov	r1, #704	; 0x2c0
   19ae4:	mov	r2, r7
   19ae8:	add	sl, sp, #8
   19aec:	uxtb	r0, r0
   19af0:	cmp	r0, #10
   19af4:	movwcc	r1, #696	; 0x2b8
   19af8:	ldr	r1, [r2, r1]!
   19afc:	adds	r1, r1, #1
   19b00:	str	r1, [r2]
   19b04:	ldr	r1, [r2, #4]
   19b08:	adc	r1, r1, #0
   19b0c:	cmp	r0, #9
   19b10:	str	r1, [r2, #4]
   19b14:	bhi	1a190 <next@@Base+0xd40>
   19b18:	ldr	r8, [sp, #4]
   19b1c:	sub	r0, pc, #660	; 0x294
   19b20:	vld1.64	{d18-d19}, [r5 :128]
   19b24:	ldr	r1, [r7, #716]	; 0x2cc
   19b28:	strb	r9, [sl, r8]
   19b2c:	vld1.64	{d16-d17}, [r0 :128]
   19b30:	ldr	r0, [r7, #712]	; 0x2c8
   19b34:	adds	r0, r0, #1
   19b38:	vadd.i64	q8, q9, q8
   19b3c:	adc	r1, r1, #0
   19b40:	str	r0, [r7, #712]	; 0x2c8
   19b44:	vst1.64	{d16-d17}, [r5 :128]
   19b48:	str	r1, [r7, #716]	; 0x2cc
   19b4c:	ldr	r1, [r4, #8]
   19b50:	ldr	r0, [r4]
   19b54:	add	r2, r1, #1
   19b58:	str	r2, [r4, #8]
   19b5c:	ldrb	r9, [r0, r1]
   19b60:	mov	r0, r6
   19b64:	bl	1abd0 <next@@Base+0x1780>
   19b68:	sub	r0, r9, #48	; 0x30
   19b6c:	mov	r1, #704	; 0x2c0
   19b70:	mov	r2, r7
   19b74:	add	r8, r8, #1
   19b78:	uxtb	r0, r0
   19b7c:	cmp	r0, #10
   19b80:	movwcc	r1, #696	; 0x2b8
   19b84:	ldr	r1, [r2, r1]!
   19b88:	adds	r1, r1, #1
   19b8c:	str	r1, [r2]
   19b90:	ldr	r1, [r2, #4]
   19b94:	adc	r1, r1, #0
   19b98:	cmp	r0, #10
   19b9c:	str	r1, [r2, #4]
   19ba0:	bcc	19b1c <next@@Base+0x6cc>
   19ba4:	b	1a194 <next@@Base+0xd44>
   19ba8:	add	r0, sl, #32
   19bac:	bl	1abd0 <next@@Base+0x1780>
   19bb0:	uxtb	r0, r9
   19bb4:	mov	r1, #792	; 0x318
   19bb8:	mov	r2, r7
   19bbc:	cmp	r0, #97	; 0x61
   19bc0:	movwne	r1, #784	; 0x310
   19bc4:	ldr	r1, [r2, r1]!
   19bc8:	adds	r1, r1, #1
   19bcc:	str	r1, [r2]
   19bd0:	ldr	r1, [r2, #4]
   19bd4:	adc	r1, r1, #0
   19bd8:	cmp	r0, #97	; 0x61
   19bdc:	str	r1, [r2, #4]
   19be0:	bne	1ab70 <next@@Base+0x1720>
   19be4:	sub	r0, pc, #860	; 0x35c
   19be8:	vld1.64	{d16-d17}, [r5 :128]
   19bec:	ldr	r9, [sp, #4]
   19bf0:	add	r8, sp, #8
   19bf4:	vld1.64	{d18-d19}, [r0 :128]
   19bf8:	mov	r0, #97	; 0x61
   19bfc:	strb	r0, [r8, r9]
   19c00:	vadd.i64	q9, q8, q9
   19c04:	vst1.64	{d18-d19}, [r5 :128]
   19c08:	ldr	r1, [r4, #8]
   19c0c:	ldr	r0, [r4]
   19c10:	add	r2, r1, #1
   19c14:	str	r2, [r4, #8]
   19c18:	mov	r2, r7
   19c1c:	ldrb	r0, [r0, r1]
   19c20:	mov	r1, #808	; 0x328
   19c24:	cmp	r0, #105	; 0x69
   19c28:	movwne	r1, #800	; 0x320
   19c2c:	ldr	r1, [r2, r1]!
   19c30:	adds	r1, r1, #1
   19c34:	str	r1, [r2]
   19c38:	ldr	r1, [r2, #4]
   19c3c:	adc	r1, r1, #0
   19c40:	cmp	r0, #105	; 0x69
   19c44:	str	r1, [r2, #4]
   19c48:	bne	1ab70 <next@@Base+0x1720>
   19c4c:	add	r0, r8, r9
   19c50:	mov	r1, #105	; 0x69
   19c54:	strb	r1, [r0, #1]
   19c58:	vmov.32	r1, d16[0]
   19c5c:	adds	r1, r1, #2
   19c60:	str	r1, [r6, #48]	; 0x30
   19c64:	vmov.32	r1, d16[1]
   19c68:	adc	r1, r1, #0
   19c6c:	str	r1, [r6, #52]	; 0x34
   19c70:	ldrd	r2, [r6, #56]	; 0x38
   19c74:	adds	r1, r2, #1
   19c78:	str	r1, [r6, #56]	; 0x38
   19c7c:	adc	r1, r3, #0
   19c80:	str	r1, [r6, #60]	; 0x3c
   19c84:	ldr	r2, [r4, #8]
   19c88:	ldr	r1, [r4]
   19c8c:	add	r3, r2, #1
   19c90:	str	r3, [r4, #8]
   19c94:	mov	r3, r7
   19c98:	ldrb	r1, [r1, r2]
   19c9c:	mov	r2, #824	; 0x338
   19ca0:	cmp	r1, #110	; 0x6e
   19ca4:	movwne	r2, #816	; 0x330
   19ca8:	ldr	r2, [r3, r2]!
   19cac:	adds	r2, r2, #1
   19cb0:	str	r2, [r3]
   19cb4:	ldr	r2, [r3, #4]
   19cb8:	adc	r2, r2, #0
   19cbc:	cmp	r1, #110	; 0x6e
   19cc0:	str	r2, [r3, #4]
   19cc4:	bne	1ab70 <next@@Base+0x1720>
   19cc8:	mov	r1, #110	; 0x6e
   19ccc:	strh	r1, [r0, #2]
   19cd0:	ldr	r0, [r7, #832]	; 0x340
   19cd4:	ldr	r1, [r7, #836]	; 0x344
   19cd8:	adds	r0, r0, #1
   19cdc:	adc	r1, r1, #0
   19ce0:	str	r0, [r7, #832]	; 0x340
   19ce4:	add	r0, r9, #4
   19ce8:	str	r1, [r7, #836]	; 0x344
   19cec:	bl	126c0 <malloc@plt>
   19cf0:	add	r6, r9, #3
   19cf4:	mov	r1, r8
   19cf8:	mov	r4, r0
   19cfc:	mov	r2, r6
   19d00:	bl	1275c <strncpy@plt>
   19d04:	mov	r0, #0
   19d08:	strb	r0, [r4, r6]
   19d0c:	mov	r0, #8
   19d10:	bl	126c0 <malloc@plt>
   19d14:	mov	r1, r4
   19d18:	mov	r6, r0
   19d1c:	bl	18920 <init_token_function@@Base>
   19d20:	b	19aac <next@@Base+0x65c>
   19d24:	add	r0, sl, #40	; 0x28
   19d28:	bl	1abd0 <next@@Base+0x1780>
   19d2c:	uxtb	r0, r9
   19d30:	mov	r1, #848	; 0x350
   19d34:	mov	r2, r7
   19d38:	cmp	r0, #101	; 0x65
   19d3c:	movwne	r1, #840	; 0x348
   19d40:	ldr	r1, [r2, r1]!
   19d44:	adds	r1, r1, #1
   19d48:	str	r1, [r2]
   19d4c:	ldr	r1, [r2, #4]
   19d50:	adc	r1, r1, #0
   19d54:	cmp	r0, #101	; 0x65
   19d58:	str	r1, [r2, #4]
   19d5c:	bne	1ab70 <next@@Base+0x1720>
   19d60:	add	r0, pc, #712	; 0x2c8
   19d64:	add	r3, sp, #8
   19d68:	vld1.64	{d16-d17}, [r5 :128]
   19d6c:	vld1.64	{d18-d19}, [r0 :128]
   19d70:	mov	ip, r3
   19d74:	ldr	r3, [sp, #4]
   19d78:	mov	r0, #101	; 0x65
   19d7c:	vadd.i64	q9, q8, q9
   19d80:	strb	r0, [ip, r3]
   19d84:	vst1.64	{d18-d19}, [r5 :128]
   19d88:	ldr	r1, [r4, #8]
   19d8c:	ldr	r0, [r4]
   19d90:	add	r2, r1, #1
   19d94:	str	r2, [r4, #8]
   19d98:	mov	r2, r7
   19d9c:	ldrb	r0, [r0, r1]
   19da0:	mov	r1, #864	; 0x360
   19da4:	cmp	r0, #116	; 0x74
   19da8:	movwne	r1, #856	; 0x358
   19dac:	ldr	r1, [r2, r1]!
   19db0:	adds	r1, r1, #1
   19db4:	str	r1, [r2]
   19db8:	ldr	r1, [r2, #4]
   19dbc:	adc	r1, r1, #0
   19dc0:	cmp	r0, #116	; 0x74
   19dc4:	str	r1, [r2, #4]
   19dc8:	bne	1ab70 <next@@Base+0x1720>
   19dcc:	add	ip, ip, r3
   19dd0:	mov	r1, #116	; 0x74
   19dd4:	vmov.32	r2, d16[0]
   19dd8:	vmov.32	r0, d16[1]
   19ddc:	strb	r1, [ip, #1]
   19de0:	adds	r1, r2, #2
   19de4:	adc	r3, r0, #0
   19de8:	str	r1, [r6, #48]	; 0x30
   19dec:	mov	r1, r6
   19df0:	str	r3, [r6, #52]	; 0x34
   19df4:	ldr	r3, [r6, #60]	; 0x3c
   19df8:	ldr	r6, [r6, #56]	; 0x38
   19dfc:	adds	r6, r6, #1
   19e00:	adc	r3, r3, #0
   19e04:	str	r6, [r1, #56]	; 0x38
   19e08:	str	r3, [r1, #60]	; 0x3c
   19e0c:	ldr	r6, [r4, #8]
   19e10:	ldr	r3, [r4]
   19e14:	add	r5, r6, #1
   19e18:	str	r5, [r4, #8]
   19e1c:	mov	r5, r7
   19e20:	ldrb	r3, [r3, r6]
   19e24:	mov	r6, #880	; 0x370
   19e28:	cmp	r3, #117	; 0x75
   19e2c:	movwne	r6, #872	; 0x368
   19e30:	ldr	r6, [r5, r6]!
   19e34:	adds	r6, r6, #1
   19e38:	str	r6, [r5]
   19e3c:	ldr	r6, [r5, #4]
   19e40:	adc	r6, r6, #0
   19e44:	cmp	r3, #117	; 0x75
   19e48:	str	r6, [r5, #4]
   19e4c:	bne	1ab70 <next@@Base+0x1720>
   19e50:	adds	r3, r2, #3
   19e54:	str	r3, [r1, #48]	; 0x30
   19e58:	mov	r3, #117	; 0x75
   19e5c:	strb	r3, [ip, #2]
   19e60:	adc	r3, r0, #0
   19e64:	str	r3, [r1, #52]	; 0x34
   19e68:	ldr	r6, [r1, #56]	; 0x38
   19e6c:	ldr	r3, [r1, #60]	; 0x3c
   19e70:	adds	r6, r6, #1
   19e74:	adc	r3, r3, #0
   19e78:	str	r6, [r1, #56]	; 0x38
   19e7c:	str	r3, [r1, #60]	; 0x3c
   19e80:	ldr	r6, [r4, #8]
   19e84:	ldr	r3, [r4]
   19e88:	add	r5, r6, #1
   19e8c:	str	r5, [r4, #8]
   19e90:	mov	r5, r7
   19e94:	ldrb	r3, [r3, r6]
   19e98:	mov	r6, #896	; 0x380
   19e9c:	cmp	r3, #114	; 0x72
   19ea0:	movwne	r6, #888	; 0x378
   19ea4:	ldr	r6, [r5, r6]!
   19ea8:	adds	r6, r6, #1
   19eac:	str	r6, [r5]
   19eb0:	ldr	r6, [r5, #4]
   19eb4:	adc	r6, r6, #0
   19eb8:	cmp	r3, #114	; 0x72
   19ebc:	str	r6, [r5, #4]
   19ec0:	bne	1ab70 <next@@Base+0x1720>
   19ec4:	adds	r2, r2, #4
   19ec8:	str	r2, [r1, #48]	; 0x30
   19ecc:	mov	r2, #114	; 0x72
   19ed0:	adc	r0, r0, #0
   19ed4:	strb	r2, [ip, #3]
   19ed8:	str	r0, [r1, #52]	; 0x34
   19edc:	ldr	r0, [r1, #56]	; 0x38
   19ee0:	ldr	r3, [r1, #60]	; 0x3c
   19ee4:	adds	r0, r0, #1
   19ee8:	str	r0, [r1, #56]	; 0x38
   19eec:	adc	r0, r3, #0
   19ef0:	str	r0, [r1, #60]	; 0x3c
   19ef4:	ldr	r1, [r4, #8]
   19ef8:	ldr	r0, [r4]
   19efc:	add	r2, r1, #1
   19f00:	str	r2, [r4, #8]
   19f04:	mov	r2, r7
   19f08:	ldrb	r0, [r0, r1]
   19f0c:	mov	r1, #912	; 0x390
   19f10:	cmp	r0, #110	; 0x6e
   19f14:	movwne	r1, #904	; 0x388
   19f18:	ldr	r1, [r2, r1]!
   19f1c:	adds	r1, r1, #1
   19f20:	str	r1, [r2]
   19f24:	ldr	r1, [r2, #4]
   19f28:	adc	r1, r1, #0
   19f2c:	cmp	r0, #110	; 0x6e
   19f30:	str	r1, [r2, #4]
   19f34:	bne	1ab70 <next@@Base+0x1720>
   19f38:	ldr	r0, [r7, #920]	; 0x398
   19f3c:	ldr	r1, [r7, #924]	; 0x39c
   19f40:	adds	r0, r0, #1
   19f44:	adc	r1, r1, #0
   19f48:	str	r0, [r7, #920]	; 0x398
   19f4c:	mov	r0, #4
   19f50:	str	r1, [r7, #924]	; 0x39c
   19f54:	bl	126c0 <malloc@plt>
   19f58:	mov	r6, r0
   19f5c:	bl	18a60 <init_token_return@@Base>
   19f60:	b	19aac <next@@Base+0x65c>
   19f64:	add	r0, sl, #24
   19f68:	bl	1abd0 <next@@Base+0x1780>
   19f6c:	movw	r1, #200	; 0xc8
   19f70:	mov	r0, #1
   19f74:	movt	r1, #3
   19f78:	str	r0, [r1]
   19f7c:	uxtb	r0, r9
   19f80:	cmp	r0, #102	; 0x66
   19f84:	beq	1a288 <next@@Base+0xe38>
   19f88:	cmp	r0, #110	; 0x6e
   19f8c:	bne	1ab78 <next@@Base+0x1728>
   19f90:	add	r0, sl, #64	; 0x40
   19f94:	bl	1abd0 <next@@Base+0x1780>
   19f98:	add	r0, pc, #144	; 0x90
   19f9c:	vld1.64	{d18-d19}, [r5 :128]
   19fa0:	ldr	r2, [sp, #4]
   19fa4:	add	r1, sp, #8
   19fa8:	vld1.64	{d16-d17}, [r0 :128]
   19fac:	mov	r0, #110	; 0x6e
   19fb0:	strb	r0, [r1, r2]
   19fb4:	vadd.i64	q8, q9, q8
   19fb8:	vst1.64	{d16-d17}, [r5 :128]
   19fbc:	ldr	r1, [r4, #8]
   19fc0:	ldr	r0, [r4]
   19fc4:	add	r2, r1, #1
   19fc8:	str	r2, [r4, #8]
   19fcc:	mov	r2, r7
   19fd0:	ldrb	r0, [r0, r1]
   19fd4:	mov	r1, #760	; 0x2f8
   19fd8:	cmp	r0, #116	; 0x74
   19fdc:	movwne	r1, #752	; 0x2f0
   19fe0:	ldr	r1, [r2, r1]!
   19fe4:	adds	r1, r1, #1
   19fe8:	str	r1, [r2]
   19fec:	ldr	r1, [r2, #4]
   19ff0:	adc	r1, r1, #0
   19ff4:	cmp	r0, #116	; 0x74
   19ff8:	str	r1, [r2, #4]
   19ffc:	bne	1ab70 <next@@Base+0x1720>
   1a000:	ldr	r0, [r7, #768]	; 0x300
   1a004:	ldr	r1, [r7, #772]	; 0x304
   1a008:	adds	r0, r0, #1
   1a00c:	adc	r1, r1, #0
   1a010:	str	r0, [r7, #768]	; 0x300
   1a014:	mov	r0, #4
   1a018:	str	r1, [r7, #772]	; 0x304
   1a01c:	bl	126c0 <malloc@plt>
   1a020:	mov	r6, r0
   1a024:	bl	188a0 <init_token_int_type@@Base>
   1a028:	b	19aac <next@@Base+0x65c>
   1a02c:	nop	{0}
   1a030:	andeq	r0, r0, r1
   1a034:	andeq	r0, r0, r0
   1a038:	andeq	r0, r0, r1
   1a03c:	andeq	r0, r0, r0
   1a040:	add	r0, sl, #48	; 0x30
   1a044:	bl	1abd0 <next@@Base+0x1780>
   1a048:	uxtb	r0, r9
   1a04c:	mov	r1, #936	; 0x3a8
   1a050:	mov	r2, r7
   1a054:	cmp	r0, #108	; 0x6c
   1a058:	movwne	r1, #928	; 0x3a0
   1a05c:	ldr	r1, [r2, r1]!
   1a060:	adds	r1, r1, #1
   1a064:	str	r1, [r2]
   1a068:	ldr	r1, [r2, #4]
   1a06c:	adc	r1, r1, #0
   1a070:	cmp	r0, #108	; 0x6c
   1a074:	str	r1, [r2, #4]
   1a078:	bne	1ab70 <next@@Base+0x1720>
   1a07c:	sub	r0, pc, #84	; 0x54
   1a080:	add	r3, sp, #8
   1a084:	vld1.64	{d16-d17}, [r5 :128]
   1a088:	vld1.64	{d18-d19}, [r0 :128]
   1a08c:	mov	ip, r3
   1a090:	ldr	r3, [sp, #4]
   1a094:	mov	r0, #108	; 0x6c
   1a098:	vadd.i64	q9, q8, q9
   1a09c:	strb	r0, [ip, r3]
   1a0a0:	vst1.64	{d18-d19}, [r5 :128]
   1a0a4:	ldr	r1, [r4, #8]
   1a0a8:	ldr	r0, [r4]
   1a0ac:	add	r2, r1, #1
   1a0b0:	str	r2, [r4, #8]
   1a0b4:	mov	r2, r7
   1a0b8:	ldrb	r0, [r0, r1]
   1a0bc:	mov	r1, #952	; 0x3b8
   1a0c0:	cmp	r0, #115	; 0x73
   1a0c4:	movwne	r1, #944	; 0x3b0
   1a0c8:	ldr	r1, [r2, r1]!
   1a0cc:	adds	r1, r1, #1
   1a0d0:	str	r1, [r2]
   1a0d4:	ldr	r1, [r2, #4]
   1a0d8:	adc	r1, r1, #0
   1a0dc:	cmp	r0, #115	; 0x73
   1a0e0:	str	r1, [r2, #4]
   1a0e4:	bne	1ab70 <next@@Base+0x1720>
   1a0e8:	add	r0, ip, r3
   1a0ec:	mov	r1, #115	; 0x73
   1a0f0:	strb	r1, [r0, #1]
   1a0f4:	vmov.32	r0, d16[0]
   1a0f8:	adds	r0, r0, #2
   1a0fc:	str	r0, [r6, #48]	; 0x30
   1a100:	vmov.32	r0, d16[1]
   1a104:	adc	r0, r0, #0
   1a108:	str	r0, [r6, #52]	; 0x34
   1a10c:	ldrd	r0, [r6, #56]	; 0x38
   1a110:	adds	r0, r0, #1
   1a114:	str	r0, [r6, #56]	; 0x38
   1a118:	adc	r0, r1, #0
   1a11c:	str	r0, [r6, #60]	; 0x3c
   1a120:	ldr	r1, [r4, #8]
   1a124:	ldr	r0, [r4]
   1a128:	add	r2, r1, #1
   1a12c:	str	r2, [r4, #8]
   1a130:	mov	r2, r7
   1a134:	ldrb	r0, [r0, r1]
   1a138:	mov	r1, #968	; 0x3c8
   1a13c:	cmp	r0, #101	; 0x65
   1a140:	movwne	r1, #960	; 0x3c0
   1a144:	ldr	r1, [r2, r1]!
   1a148:	adds	r1, r1, #1
   1a14c:	str	r1, [r2]
   1a150:	ldr	r1, [r2, #4]
   1a154:	adc	r1, r1, #0
   1a158:	cmp	r0, #101	; 0x65
   1a15c:	str	r1, [r2, #4]
   1a160:	bne	1ab70 <next@@Base+0x1720>
   1a164:	ldr	r0, [r7, #976]	; 0x3d0
   1a168:	ldr	r1, [r7, #980]	; 0x3d4
   1a16c:	adds	r0, r0, #1
   1a170:	adc	r1, r1, #0
   1a174:	str	r0, [r7, #976]	; 0x3d0
   1a178:	mov	r0, #4
   1a17c:	str	r1, [r7, #980]	; 0x3d4
   1a180:	bl	126c0 <malloc@plt>
   1a184:	mov	r6, r0
   1a188:	bl	18b60 <init_token_else@@Base>
   1a18c:	b	19aac <next@@Base+0x65c>
   1a190:	ldr	r8, [sp, #4]
   1a194:	sub	r0, pc, #364	; 0x16c
   1a198:	mov	r5, r8
   1a19c:	movw	r8, #5728	; 0x1660
   1a1a0:	ldr	r2, [r7, #724]	; 0x2d4
   1a1a4:	vld1.64	{d16-d17}, [r0 :128]
   1a1a8:	ldr	r0, [r7, #720]	; 0x2d0
   1a1ac:	movt	r8, #3
   1a1b0:	add	r1, r8, #64	; 0x40
   1a1b4:	vld1.64	{d18-d19}, [r1 :128]
   1a1b8:	adds	r0, r0, #1
   1a1bc:	str	r0, [r7, #720]	; 0x2d0
   1a1c0:	movw	r0, #5824	; 0x16c0
   1a1c4:	adc	r2, r2, #0
   1a1c8:	movt	r0, #3
   1a1cc:	vadd.i64	q8, q9, q8
   1a1d0:	ldr	r6, [r0]
   1a1d4:	ldr	r3, [r0, #4]
   1a1d8:	str	r2, [r7, #724]	; 0x2d4
   1a1dc:	mov	r2, #16
   1a1e0:	adds	r6, r6, #1
   1a1e4:	adc	r3, r3, #0
   1a1e8:	str	r6, [r0]
   1a1ec:	str	r3, [r0, #4]
   1a1f0:	vst1.64	{d16-d17}, [r1 :128]
   1a1f4:	mov	r3, r0
   1a1f8:	ldr	r1, [r4, #8]
   1a1fc:	cmp	r1, #0
   1a200:	movwne	r2, #8
   1a204:	ldr	r2, [r3, r2]!
   1a208:	adds	r2, r2, #1
   1a20c:	str	r2, [r3]
   1a210:	ldr	r2, [r3, #4]
   1a214:	adc	r2, r2, #0
   1a218:	cmp	r1, #0
   1a21c:	str	r2, [r3, #4]
   1a220:	beq	1ab50 <next@@Base+0x1700>
   1a224:	ldrd	r2, [r0, #24]
   1a228:	adds	r2, r2, #1
   1a22c:	adc	r3, r3, #0
   1a230:	strd	r2, [r0, #24]
   1a234:	sub	r0, r1, #1
   1a238:	str	r0, [r4, #8]
   1a23c:	mov	r0, #0
   1a240:	strb	r0, [sl, r5]
   1a244:	mov	r0, #8
   1a248:	bl	126c0 <malloc@plt>
   1a24c:	mov	r6, r0
   1a250:	sub	r1, pc, #552	; 0x228
   1a254:	add	r0, r8, #80	; 0x50
   1a258:	mov	r2, #10
   1a25c:	vld1.64	{d16-d17}, [r1 :128]
   1a260:	vld1.64	{d18-d19}, [r0 :128]
   1a264:	mov	r1, #0
   1a268:	vadd.i64	q8, q9, q8
   1a26c:	vst1.64	{d16-d17}, [r0 :128]
   1a270:	mov	r0, sl
   1a274:	bl	12600 <strtol@plt>
   1a278:	mov	r1, r0
   1a27c:	mov	r0, r6
   1a280:	bl	188e0 <init_token_int_value@@Base>
   1a284:	b	19aac <next@@Base+0x65c>
   1a288:	add	r0, sl, #72	; 0x48
   1a28c:	bl	1abd0 <next@@Base+0x1780>
   1a290:	ldr	r1, [sp, #4]
   1a294:	add	r0, sp, #8
   1a298:	add	r0, r0, r1
   1a29c:	mov	r1, #102	; 0x66
   1a2a0:	strh	r1, [r0]
   1a2a4:	ldr	r0, [r7, #776]	; 0x308
   1a2a8:	ldr	r1, [r7, #780]	; 0x30c
   1a2ac:	adds	r0, r0, #1
   1a2b0:	adc	r1, r1, #0
   1a2b4:	str	r0, [r7, #776]	; 0x308
   1a2b8:	mov	r0, #4
   1a2bc:	str	r1, [r7, #780]	; 0x30c
   1a2c0:	bl	126c0 <malloc@plt>
   1a2c4:	mov	r6, r0
   1a2c8:	bl	18b20 <init_token_if@@Base>
   1a2cc:	b	19aac <next@@Base+0x65c>
   1a2d0:	ldrd	r0, [r7, #184]	; 0xb8
   1a2d4:	adds	r0, r0, #1
   1a2d8:	adc	r1, r1, #0
   1a2dc:	strd	r0, [r7, #184]	; 0xb8
   1a2e0:	mov	r0, #8
   1a2e4:	bl	126c0 <malloc@plt>
   1a2e8:	mov	r1, #0
   1a2ec:	mov	r6, r0
   1a2f0:	bl	188e0 <init_token_int_value@@Base>
   1a2f4:	b	19aac <next@@Base+0x65c>
   1a2f8:	mov	r0, #240	; 0xf0
   1a2fc:	cmp	r2, #40	; 0x28
   1a300:	mov	r1, r7
   1a304:	movweq	r0, #232	; 0xe8
   1a308:	ldr	r0, [r1, r0]!
   1a30c:	adds	r0, r0, #1
   1a310:	str	r0, [r1]
   1a314:	ldr	r0, [r1, #4]
   1a318:	adc	r0, r0, #0
   1a31c:	cmp	r2, #40	; 0x28
   1a320:	str	r0, [r1, #4]
   1a324:	bne	1a34c <next@@Base+0xefc>
   1a328:	ldrd	r0, [r7, #248]	; 0xf8
   1a32c:	adds	r0, r0, #1
   1a330:	adc	r1, r1, #0
   1a334:	strd	r0, [r7, #248]	; 0xf8
   1a338:	mov	r0, #4
   1a33c:	bl	126c0 <malloc@plt>
   1a340:	mov	r6, r0
   1a344:	bl	18960 <init_token_opar@@Base>
   1a348:	b	19aac <next@@Base+0x65c>
   1a34c:	mov	r0, #264	; 0x108
   1a350:	cmp	r2, #41	; 0x29
   1a354:	mov	r1, r7
   1a358:	movweq	r0, #256	; 0x100
   1a35c:	ldr	r0, [r1, r0]!
   1a360:	adds	r0, r0, #1
   1a364:	str	r0, [r1]
   1a368:	ldr	r0, [r1, #4]
   1a36c:	adc	r0, r0, #0
   1a370:	cmp	r2, #41	; 0x29
   1a374:	str	r0, [r1, #4]
   1a378:	bne	1a42c <next@@Base+0xfdc>
   1a37c:	ldr	r0, [r7, #272]	; 0x110
   1a380:	ldr	r1, [r7, #276]	; 0x114
   1a384:	adds	r0, r0, #1
   1a388:	adc	r1, r1, #0
   1a38c:	str	r0, [r7, #272]	; 0x110
   1a390:	mov	r0, #4
   1a394:	str	r1, [r7, #276]	; 0x114
   1a398:	bl	126c0 <malloc@plt>
   1a39c:	mov	r6, r0
   1a3a0:	bl	189a0 <init_token_cpar@@Base>
   1a3a4:	b	19aac <next@@Base+0x65c>
   1a3a8:	ldr	r0, [r7, #296]	; 0x128
   1a3ac:	ldr	r1, [r7, #300]	; 0x12c
   1a3b0:	adds	r0, r0, #1
   1a3b4:	adc	r1, r1, #0
   1a3b8:	str	r0, [r7, #296]	; 0x128
   1a3bc:	mov	r0, #4
   1a3c0:	str	r1, [r7, #300]	; 0x12c
   1a3c4:	bl	126c0 <malloc@plt>
   1a3c8:	mov	r6, r0
   1a3cc:	bl	189e0 <init_token_obra@@Base>
   1a3d0:	b	19aac <next@@Base+0x65c>
   1a3d4:	ldr	r0, [r7, #320]	; 0x140
   1a3d8:	ldr	r1, [r7, #324]	; 0x144
   1a3dc:	adds	r0, r0, #1
   1a3e0:	adc	r1, r1, #0
   1a3e4:	str	r0, [r7, #320]	; 0x140
   1a3e8:	mov	r0, #4
   1a3ec:	str	r1, [r7, #324]	; 0x144
   1a3f0:	bl	126c0 <malloc@plt>
   1a3f4:	mov	r6, r0
   1a3f8:	bl	18a20 <init_token_cbra@@Base>
   1a3fc:	b	19aac <next@@Base+0x65c>
   1a400:	ldr	r0, [r7, #344]	; 0x158
   1a404:	ldr	r1, [r7, #348]	; 0x15c
   1a408:	adds	r0, r0, #1
   1a40c:	adc	r1, r1, #0
   1a410:	str	r0, [r7, #344]	; 0x158
   1a414:	mov	r0, #4
   1a418:	str	r1, [r7, #348]	; 0x15c
   1a41c:	bl	126c0 <malloc@plt>
   1a420:	mov	r6, r0
   1a424:	bl	18aa0 <init_token_semicolon@@Base>
   1a428:	b	19aac <next@@Base+0x65c>
   1a42c:	ldr	r0, [r7, #408]	; 0x198
   1a430:	ldr	r1, [r7, #412]	; 0x19c
   1a434:	mov	sl, r6
   1a438:	ldr	r6, [r7, #388]	; 0x184
   1a43c:	adds	r3, r0, #1
   1a440:	ldr	r0, [r7, #360]	; 0x168
   1a444:	adc	ip, r1, #0
   1a448:	ldr	r1, [r7, #384]	; 0x180
   1a44c:	adds	r1, r1, #1
   1a450:	adc	lr, r6, #0
   1a454:	ldr	r6, [r7, #364]	; 0x16c
   1a458:	adds	r0, r0, #1
   1a45c:	adc	r8, r6, #0
   1a460:	ldr	r6, [r7, #336]	; 0x150
   1a464:	adds	r6, r6, #1
   1a468:	str	r6, [r7, #336]	; 0x150
   1a46c:	str	r0, [r7, #360]	; 0x168
   1a470:	str	r1, [r7, #384]	; 0x180
   1a474:	str	r3, [r7, #408]	; 0x198
   1a478:	ldr	r0, [r7, #340]	; 0x154
   1a47c:	ldr	r6, [r7, #312]	; 0x138
   1a480:	ldr	r1, [r7, #288]	; 0x120
   1a484:	ldr	r3, [r7, #292]	; 0x124
   1a488:	adc	r9, r0, #0
   1a48c:	adds	r6, r6, #1
   1a490:	ldr	r0, [r7, #316]	; 0x13c
   1a494:	str	r6, [r7, #312]	; 0x138
   1a498:	ldr	r6, [r7, #432]	; 0x1b0
   1a49c:	adc	r0, r0, #0
   1a4a0:	adds	r1, r1, #1
   1a4a4:	adc	r3, r3, #0
   1a4a8:	adds	r6, r6, #1
   1a4ac:	str	r6, [r7, #432]	; 0x1b0
   1a4b0:	str	r1, [r7, #288]	; 0x120
   1a4b4:	str	r3, [r7, #292]	; 0x124
   1a4b8:	str	r0, [r7, #316]	; 0x13c
   1a4bc:	str	r9, [r7, #340]	; 0x154
   1a4c0:	str	r8, [r7, #364]	; 0x16c
   1a4c4:	str	lr, [r7, #388]	; 0x184
   1a4c8:	str	ip, [r7, #412]	; 0x19c
   1a4cc:	mov	r1, r7
   1a4d0:	ldr	r0, [r7, #436]	; 0x1b4
   1a4d4:	adc	r0, r0, #0
   1a4d8:	cmp	r2, #33	; 0x21
   1a4dc:	str	r0, [r7, #436]	; 0x1b4
   1a4e0:	mov	r0, #456	; 0x1c8
   1a4e4:	movweq	r0, #448	; 0x1c0
   1a4e8:	ldr	r0, [r1, r0]!
   1a4ec:	adds	r0, r0, #1
   1a4f0:	str	r0, [r1]
   1a4f4:	ldr	r0, [r1, #4]
   1a4f8:	adc	r0, r0, #0
   1a4fc:	cmp	r2, #33	; 0x21
   1a500:	str	r0, [r1, #4]
   1a504:	bne	1a628 <next@@Base+0x11d8>
   1a508:	add	r0, pc, #688	; 0x2b0
   1a50c:	vld1.64	{d18-d19}, [r5 :128]
   1a510:	ldr	r2, [sp, #4]
   1a514:	add	r1, sp, #8
   1a518:	vld1.64	{d16-d17}, [r0 :128]
   1a51c:	mov	r0, #33	; 0x21
   1a520:	strb	r0, [r1, r2]
   1a524:	vadd.i64	q8, q9, q8
   1a528:	vst1.64	{d16-d17}, [r5 :128]
   1a52c:	mov	r5, #472	; 0x1d8
   1a530:	ldr	r1, [r4, #8]
   1a534:	ldr	r0, [r4]
   1a538:	add	r2, r1, #1
   1a53c:	str	r2, [r4, #8]
   1a540:	ldrb	r8, [r0, r1]
   1a544:	mov	r0, #8
   1a548:	cmp	r8, #61	; 0x3d
   1a54c:	movwne	r5, #464	; 0x1d0
   1a550:	bl	126c0 <malloc@plt>
   1a554:	mov	r6, r0
   1a558:	mov	r0, r7
   1a55c:	ldr	r1, [r0, r5]!
   1a560:	adds	r1, r1, #1
   1a564:	str	r1, [r0]
   1a568:	ldr	r1, [r0, #4]
   1a56c:	adc	r1, r1, #0
   1a570:	cmp	r8, #61	; 0x3d
   1a574:	str	r1, [r0, #4]
   1a578:	beq	1a760 <next@@Base+0x1310>
   1a57c:	add	r0, pc, #572	; 0x23c
   1a580:	add	r1, sl, #64	; 0x40
   1a584:	ldr	r2, [r7, #484]	; 0x1e4
   1a588:	vld1.64	{d16-d17}, [r0 :128]
   1a58c:	ldr	r0, [r7, #480]	; 0x1e0
   1a590:	vld1.64	{d18-d19}, [r1 :128]
   1a594:	adds	r0, r0, #1
   1a598:	vadd.i64	q8, q9, q8
   1a59c:	str	r0, [r7, #480]	; 0x1e0
   1a5a0:	movw	r0, #5824	; 0x16c0
   1a5a4:	adc	r2, r2, #0
   1a5a8:	vst1.64	{d16-d17}, [r1 :128]
   1a5ac:	movt	r0, #3
   1a5b0:	str	r2, [r7, #484]	; 0x1e4
   1a5b4:	mov	r2, #16
   1a5b8:	ldrd	r8, [r0]
   1a5bc:	mov	r3, r0
   1a5c0:	adds	r8, r8, #1
   1a5c4:	adc	r9, r9, #0
   1a5c8:	strd	r8, [r0]
   1a5cc:	ldr	r1, [r4, #8]
   1a5d0:	cmp	r1, #0
   1a5d4:	movwne	r2, #8
   1a5d8:	ldr	r2, [r3, r2]!
   1a5dc:	adds	r2, r2, #1
   1a5e0:	str	r2, [r3]
   1a5e4:	ldr	r2, [r3, #4]
   1a5e8:	adc	r2, r2, #0
   1a5ec:	cmp	r1, #0
   1a5f0:	str	r2, [r3, #4]
   1a5f4:	beq	1ab50 <next@@Base+0x1700>
   1a5f8:	ldrd	r2, [r0, #24]
   1a5fc:	adds	r2, r2, #1
   1a600:	adc	r3, r3, #0
   1a604:	strd	r2, [r0, #24]
   1a608:	sub	r0, r1, #1
   1a60c:	str	r0, [r4, #8]
   1a610:	mov	r0, #2
   1a614:	bl	126c0 <malloc@plt>
   1a618:	ldrb	r2, [sp, #8]
   1a61c:	mov	r1, r0
   1a620:	strb	r2, [r0], #1
   1a624:	b	1a798 <next@@Base+0x1348>
   1a628:	ldr	r0, [r7, #584]	; 0x248
   1a62c:	ldr	r1, [r7, #588]	; 0x24c
   1a630:	ldr	r3, [r7, #512]	; 0x200
   1a634:	ldr	r6, [r7, #516]	; 0x204
   1a638:	adds	ip, r0, #1
   1a63c:	ldr	r0, [r7, #528]	; 0x210
   1a640:	adc	lr, r1, #0
   1a644:	ldr	r1, [r7, #532]	; 0x214
   1a648:	adds	r8, r0, #1
   1a64c:	ldr	r0, [r7, #624]	; 0x270
   1a650:	adc	r1, r1, #0
   1a654:	adds	r3, r3, #1
   1a658:	adc	r6, r6, #0
   1a65c:	adds	r0, r0, #1
   1a660:	str	r0, [r7, #624]	; 0x270
   1a664:	str	r3, [r7, #512]	; 0x200
   1a668:	str	r6, [r7, #516]	; 0x204
   1a66c:	str	r1, [r7, #532]	; 0x214
   1a670:	str	r8, [r7, #528]	; 0x210
   1a674:	str	ip, [r7, #584]	; 0x248
   1a678:	str	lr, [r7, #588]	; 0x24c
   1a67c:	mov	r1, r7
   1a680:	ldr	r0, [r7, #628]	; 0x274
   1a684:	adc	r0, r0, #0
   1a688:	cmp	r2, #38	; 0x26
   1a68c:	str	r0, [r7, #628]	; 0x274
   1a690:	mov	r0, #664	; 0x298
   1a694:	movweq	r0, #656	; 0x290
   1a698:	ldr	r0, [r1, r0]!
   1a69c:	adds	r0, r0, #1
   1a6a0:	str	r0, [r1]
   1a6a4:	ldr	r0, [r1, #4]
   1a6a8:	adc	r0, r0, #0
   1a6ac:	cmp	r2, #38	; 0x26
   1a6b0:	str	r0, [r1, #4]
   1a6b4:	bne	1aba0 <next@@Base+0x1750>
   1a6b8:	add	r0, pc, #256	; 0x100
   1a6bc:	vld1.64	{d18-d19}, [r5 :128]
   1a6c0:	ldr	r1, [sp, #4]
   1a6c4:	mov	r8, #38	; 0x26
   1a6c8:	vld1.64	{d16-d17}, [r0 :128]
   1a6cc:	add	r0, sp, #8
   1a6d0:	strb	r8, [r0, r1]
   1a6d4:	vadd.i64	q8, q9, q8
   1a6d8:	vst1.64	{d16-d17}, [r5 :128]
   1a6dc:	mov	r5, #680	; 0x2a8
   1a6e0:	ldr	r1, [r4, #8]
   1a6e4:	ldr	r0, [r4]
   1a6e8:	add	r2, r1, #1
   1a6ec:	str	r2, [r4, #8]
   1a6f0:	ldrb	r4, [r0, r1]
   1a6f4:	mov	r0, #8
   1a6f8:	cmp	r4, #38	; 0x26
   1a6fc:	movwne	r5, #672	; 0x2a0
   1a700:	bl	126c0 <malloc@plt>
   1a704:	mov	r6, r0
   1a708:	mov	r0, r7
   1a70c:	ldr	r1, [r0, r5]!
   1a710:	adds	r1, r1, #1
   1a714:	str	r1, [r0]
   1a718:	ldr	r1, [r0, #4]
   1a71c:	adc	r1, r1, #0
   1a720:	cmp	r4, #38	; 0x26
   1a724:	str	r1, [r0, #4]
   1a728:	bne	1ab70 <next@@Base+0x1720>
   1a72c:	ldr	r0, [r7, #688]	; 0x2b0
   1a730:	ldr	r1, [r7, #692]	; 0x2b4
   1a734:	adds	r0, r0, #1
   1a738:	adc	r1, r1, #0
   1a73c:	str	r0, [r7, #688]	; 0x2b0
   1a740:	str	r1, [r7, #692]	; 0x2b4
   1a744:	mov	r0, #3
   1a748:	bl	126c0 <malloc@plt>
   1a74c:	mov	r1, r0
   1a750:	ldrb	r0, [sp, #8]
   1a754:	strh	r8, [r1, #1]
   1a758:	strb	r0, [r1]
   1a75c:	b	1a9c4 <next@@Base+0x1574>
   1a760:	ldr	r0, [r7, #488]	; 0x1e8
   1a764:	ldr	r1, [r7, #492]	; 0x1ec
   1a768:	adds	r0, r0, #1
   1a76c:	adc	r1, r1, #0
   1a770:	str	r0, [r7, #488]	; 0x1e8
   1a774:	mov	r0, #3
   1a778:	str	r1, [r7, #492]	; 0x1ec
   1a77c:	bl	126c0 <malloc@plt>
   1a780:	mov	r1, r0
   1a784:	ldrb	r0, [sp, #8]
   1a788:	mov	r2, #61	; 0x3d
   1a78c:	strb	r2, [r1, #1]
   1a790:	strb	r0, [r1]
   1a794:	add	r0, r1, #2
   1a798:	mov	r2, #0
   1a79c:	strb	r2, [r0]
   1a7a0:	ldr	r0, [r7, #496]	; 0x1f0
   1a7a4:	ldr	r2, [r7, #500]	; 0x1f4
   1a7a8:	adds	r0, r0, #1
   1a7ac:	adc	r2, r2, #0
   1a7b0:	str	r0, [r7, #496]	; 0x1f0
   1a7b4:	str	r2, [r7, #500]	; 0x1f4
   1a7b8:	b	1a9c4 <next@@Base+0x1574>
   1a7bc:	nop	{0}
   1a7c0:	andeq	r0, r0, r1
   1a7c4:	andeq	r0, r0, r0
   1a7c8:	andeq	r0, r0, r1
   1a7cc:	andeq	r0, r0, r0
   1a7d0:	ldr	r0, [r7, #456]	; 0x1c8
   1a7d4:	ldr	r1, [r7, #460]	; 0x1cc
   1a7d8:	adds	r0, r0, #1
   1a7dc:	adc	r1, r1, #0
   1a7e0:	str	r0, [r7, #456]	; 0x1c8
   1a7e4:	mov	r0, #512	; 0x200
   1a7e8:	cmp	r2, #60	; 0x3c
   1a7ec:	str	r1, [r7, #460]	; 0x1cc
   1a7f0:	movweq	r0, #504	; 0x1f8
   1a7f4:	mov	r1, r7
   1a7f8:	ldr	r0, [r1, r0]!
   1a7fc:	adds	r0, r0, #1
   1a800:	str	r0, [r1]
   1a804:	ldr	r0, [r1, #4]
   1a808:	adc	r0, r0, #0
   1a80c:	cmp	r2, #60	; 0x3c
   1a810:	str	r0, [r1, #4]
   1a814:	beq	1a848 <next@@Base+0x13f8>
   1a818:	mov	r0, #528	; 0x210
   1a81c:	cmp	r2, #62	; 0x3e
   1a820:	mov	r1, r7
   1a824:	movweq	r0, #520	; 0x208
   1a828:	ldr	r0, [r1, r0]!
   1a82c:	adds	r0, r0, #1
   1a830:	str	r0, [r1]
   1a834:	ldr	r0, [r1, #4]
   1a838:	adc	r0, r0, #0
   1a83c:	cmp	r2, #62	; 0x3e
   1a840:	str	r0, [r1, #4]
   1a844:	bne	1a9d0 <next@@Base+0x1580>
   1a848:	add	r0, pc, #880	; 0x370
   1a84c:	vld1.64	{d18-d19}, [r5 :128]
   1a850:	ldr	r1, [sp, #4]
   1a854:	vld1.64	{d16-d17}, [r0 :128]
   1a858:	add	r0, sp, #8
   1a85c:	strb	r9, [r0, r1]
   1a860:	vadd.i64	q8, q9, q8
   1a864:	vst1.64	{d16-d17}, [r5 :128]
   1a868:	mov	r5, #544	; 0x220
   1a86c:	ldr	r1, [r4, #8]
   1a870:	ldr	r0, [r4]
   1a874:	add	r2, r1, #1
   1a878:	str	r2, [r4, #8]
   1a87c:	ldrb	r8, [r0, r1]
   1a880:	mov	r0, #8
   1a884:	cmp	r8, #61	; 0x3d
   1a888:	movwne	r5, #536	; 0x218
   1a88c:	bl	126c0 <malloc@plt>
   1a890:	mov	r6, r0
   1a894:	mov	r0, r7
   1a898:	ldr	r1, [r0, r5]!
   1a89c:	adds	r1, r1, #1
   1a8a0:	str	r1, [r0]
   1a8a4:	ldr	r1, [r0, #4]
   1a8a8:	adc	r1, r1, #0
   1a8ac:	cmp	r8, #61	; 0x3d
   1a8b0:	str	r1, [r0, #4]
   1a8b4:	beq	1a96c <next@@Base+0x151c>
   1a8b8:	movw	r0, #5728	; 0x1660
   1a8bc:	movt	r0, #3
   1a8c0:	add	r1, r0, #64	; 0x40
   1a8c4:	add	r0, pc, #756	; 0x2f4
   1a8c8:	ldr	r2, [r7, #556]	; 0x22c
   1a8cc:	vld1.64	{d16-d17}, [r0 :128]
   1a8d0:	ldr	r0, [r7, #552]	; 0x228
   1a8d4:	vld1.64	{d18-d19}, [r1 :128]
   1a8d8:	adds	r0, r0, #1
   1a8dc:	vadd.i64	q8, q9, q8
   1a8e0:	str	r0, [r7, #552]	; 0x228
   1a8e4:	movw	r0, #5824	; 0x16c0
   1a8e8:	adc	r2, r2, #0
   1a8ec:	vst1.64	{d16-d17}, [r1 :128]
   1a8f0:	movt	r0, #3
   1a8f4:	str	r2, [r7, #556]	; 0x22c
   1a8f8:	mov	r2, #16
   1a8fc:	ldrd	r8, [r0]
   1a900:	mov	r3, r0
   1a904:	adds	r8, r8, #1
   1a908:	adc	r9, r9, #0
   1a90c:	strd	r8, [r0]
   1a910:	ldr	r1, [r4, #8]
   1a914:	cmp	r1, #0
   1a918:	movwne	r2, #8
   1a91c:	ldr	r2, [r3, r2]!
   1a920:	adds	r2, r2, #1
   1a924:	str	r2, [r3]
   1a928:	ldr	r2, [r3, #4]
   1a92c:	adc	r2, r2, #0
   1a930:	cmp	r1, #0
   1a934:	str	r2, [r3, #4]
   1a938:	beq	1ab50 <next@@Base+0x1700>
   1a93c:	ldrd	r2, [r0, #24]
   1a940:	adds	r2, r2, #1
   1a944:	adc	r3, r3, #0
   1a948:	strd	r2, [r0, #24]
   1a94c:	sub	r0, r1, #1
   1a950:	str	r0, [r4, #8]
   1a954:	mov	r0, #2
   1a958:	bl	126c0 <malloc@plt>
   1a95c:	ldrb	r2, [sp, #8]
   1a960:	mov	r1, r0
   1a964:	strb	r2, [r0], #1
   1a968:	b	1a9a4 <next@@Base+0x1554>
   1a96c:	ldr	r0, [r7, #560]	; 0x230
   1a970:	ldr	r1, [r7, #564]	; 0x234
   1a974:	adds	r0, r0, #1
   1a978:	adc	r1, r1, #0
   1a97c:	str	r0, [r7, #560]	; 0x230
   1a980:	mov	r0, #3
   1a984:	str	r1, [r7, #564]	; 0x234
   1a988:	bl	126c0 <malloc@plt>
   1a98c:	mov	r1, r0
   1a990:	ldrb	r0, [sp, #8]
   1a994:	mov	r2, #61	; 0x3d
   1a998:	strb	r2, [r1, #1]
   1a99c:	strb	r0, [r1]
   1a9a0:	add	r0, r1, #2
   1a9a4:	mov	r2, #0
   1a9a8:	strb	r2, [r0]
   1a9ac:	ldr	r0, [r7, #568]	; 0x238
   1a9b0:	ldr	r2, [r7, #572]	; 0x23c
   1a9b4:	adds	r0, r0, #1
   1a9b8:	adc	r2, r2, #0
   1a9bc:	str	r0, [r7, #568]	; 0x238
   1a9c0:	str	r2, [r7, #572]	; 0x23c
   1a9c4:	mov	r0, r6
   1a9c8:	bl	18ba0 <init_token_boolean_op@@Base>
   1a9cc:	b	19aac <next@@Base+0x65c>
   1a9d0:	mov	r0, #584	; 0x248
   1a9d4:	cmp	r2, #61	; 0x3d
   1a9d8:	mov	r1, r7
   1a9dc:	movweq	r0, #576	; 0x240
   1a9e0:	ldr	r0, [r1, r0]!
   1a9e4:	adds	r0, r0, #1
   1a9e8:	str	r0, [r1]
   1a9ec:	ldr	r0, [r1, #4]
   1a9f0:	adc	r0, r0, #0
   1a9f4:	cmp	r2, #61	; 0x3d
   1a9f8:	str	r0, [r1, #4]
   1a9fc:	bne	1aa90 <next@@Base+0x1640>
   1aa00:	add	r0, pc, #440	; 0x1b8
   1aa04:	vld1.64	{d18-d19}, [r5 :128]
   1aa08:	ldr	r1, [sp, #4]
   1aa0c:	mov	r8, #61	; 0x3d
   1aa10:	vld1.64	{d16-d17}, [r0 :128]
   1aa14:	add	r0, sp, #8
   1aa18:	strb	r8, [r0, r1]
   1aa1c:	vadd.i64	q8, q9, q8
   1aa20:	vst1.64	{d16-d17}, [r5 :128]
   1aa24:	mov	r5, #600	; 0x258
   1aa28:	ldr	r1, [r4, #8]
   1aa2c:	ldr	r0, [r4]
   1aa30:	add	r2, r1, #1
   1aa34:	str	r2, [r4, #8]
   1aa38:	ldrb	r4, [r0, r1]
   1aa3c:	mov	r0, #8
   1aa40:	cmp	r4, #61	; 0x3d
   1aa44:	movwne	r5, #592	; 0x250
   1aa48:	bl	126c0 <malloc@plt>
   1aa4c:	mov	r6, r0
   1aa50:	mov	r0, r7
   1aa54:	ldr	r1, [r0, r5]!
   1aa58:	adds	r1, r1, #1
   1aa5c:	str	r1, [r0]
   1aa60:	ldr	r1, [r0, #4]
   1aa64:	adc	r1, r1, #0
   1aa68:	cmp	r4, #61	; 0x3d
   1aa6c:	str	r1, [r0, #4]
   1aa70:	bne	1ab70 <next@@Base+0x1720>
   1aa74:	ldr	r0, [r7, #608]	; 0x260
   1aa78:	ldr	r1, [r7, #612]	; 0x264
   1aa7c:	adds	r0, r0, #1
   1aa80:	adc	r1, r1, #0
   1aa84:	str	r0, [r7, #608]	; 0x260
   1aa88:	str	r1, [r7, #612]	; 0x264
   1aa8c:	b	1a744 <next@@Base+0x12f4>
   1aa90:	mov	r0, #624	; 0x270
   1aa94:	cmp	r2, #124	; 0x7c
   1aa98:	mov	r1, r7
   1aa9c:	movweq	r0, #616	; 0x268
   1aaa0:	ldr	r0, [r1, r0]!
   1aaa4:	adds	r0, r0, #1
   1aaa8:	str	r0, [r1]
   1aaac:	ldr	r0, [r1, #4]
   1aab0:	adc	r0, r0, #0
   1aab4:	cmp	r2, #124	; 0x7c
   1aab8:	str	r0, [r1, #4]
   1aabc:	bne	1ab88 <next@@Base+0x1738>
   1aac0:	add	r0, pc, #248	; 0xf8
   1aac4:	vld1.64	{d18-d19}, [r5 :128]
   1aac8:	ldr	r1, [sp, #4]
   1aacc:	mov	r8, #124	; 0x7c
   1aad0:	vld1.64	{d16-d17}, [r0 :128]
   1aad4:	add	r0, sp, #8
   1aad8:	strb	r8, [r0, r1]
   1aadc:	vadd.i64	q8, q9, q8
   1aae0:	vst1.64	{d16-d17}, [r5 :128]
   1aae4:	mov	r5, #640	; 0x280
   1aae8:	ldr	r1, [r4, #8]
   1aaec:	ldr	r0, [r4]
   1aaf0:	add	r2, r1, #1
   1aaf4:	str	r2, [r4, #8]
   1aaf8:	ldrb	r4, [r0, r1]
   1aafc:	mov	r0, #8
   1ab00:	cmp	r4, #124	; 0x7c
   1ab04:	movwne	r5, #632	; 0x278
   1ab08:	bl	126c0 <malloc@plt>
   1ab0c:	mov	r6, r0
   1ab10:	mov	r0, r7
   1ab14:	ldr	r1, [r0, r5]!
   1ab18:	adds	r1, r1, #1
   1ab1c:	str	r1, [r0]
   1ab20:	ldr	r1, [r0, #4]
   1ab24:	adc	r1, r1, #0
   1ab28:	cmp	r4, #124	; 0x7c
   1ab2c:	str	r1, [r0, #4]
   1ab30:	bne	1ab70 <next@@Base+0x1720>
   1ab34:	ldr	r0, [r7, #648]	; 0x288
   1ab38:	ldr	r1, [r7, #652]	; 0x28c
   1ab3c:	adds	r0, r0, #1
   1ab40:	adc	r1, r1, #0
   1ab44:	str	r0, [r7, #648]	; 0x288
   1ab48:	str	r1, [r7, #652]	; 0x28c
   1ab4c:	b	1a744 <next@@Base+0x12f4>
   1ab50:	movw	r0, #224	; 0xe0
   1ab54:	mov	r1, #32
   1ab58:	mov	r2, #1
   1ab5c:	movt	r0, #3
   1ab60:	ldr	r3, [r0]
   1ab64:	movw	r0, #62656	; 0xf4c0
   1ab68:	movt	r0, #1
   1ab6c:	bl	1269c <fwrite@plt>
   1ab70:	mov	r0, #1
   1ab74:	bl	126fc <exit@plt>
   1ab78:	add	r0, sl, #56	; 0x38
   1ab7c:	bl	1abd0 <next@@Base+0x1780>
   1ab80:	mov	r0, #1
   1ab84:	bl	126fc <exit@plt>
   1ab88:	ldr	r0, [r7, #664]	; 0x298
   1ab8c:	ldr	r1, [r7, #668]	; 0x29c
   1ab90:	adds	r0, r0, #1
   1ab94:	adc	r1, r1, #0
   1ab98:	str	r0, [r7, #664]	; 0x298
   1ab9c:	str	r1, [r7, #668]	; 0x29c
   1aba0:	movw	r0, #224	; 0xe0
   1aba4:	movw	r1, #62689	; 0xf4e1
   1aba8:	movt	r0, #3
   1abac:	movt	r1, #1
   1abb0:	ldr	r0, [r0]
   1abb4:	bl	12720 <fprintf@plt>
   1abb8:	mov	r0, #1
   1abbc:	bl	126fc <exit@plt>
   1abc0:	andeq	r0, r0, r1
   1abc4:	andeq	r0, r0, r0
   1abc8:	andeq	r0, r0, r1
   1abcc:	andeq	r0, r0, r0
   1abd0:	movw	r1, #200	; 0xc8
   1abd4:	movt	r1, #3
   1abd8:	ldr	r1, [r1]
   1abdc:	cmn	r1, #1
   1abe0:	ldrne	r0, [r0, r1, lsl #2]
   1abe4:	cmpne	r0, #0
   1abe8:	bne	1abf0 <next@@Base+0x17a0>
   1abec:	bx	lr
   1abf0:	ldrd	r2, [r0]
   1abf4:	adds	r2, r2, #1
   1abf8:	adc	r3, r3, #0
   1abfc:	strd	r2, [r0]
   1ac00:	bx	lr
   1ac04:	push	{r4, r5, r6, lr}
   1ac08:	sub	sp, sp, #8
   1ac0c:	movw	r4, #3328	; 0xd00
   1ac10:	movw	r0, #62896	; 0xf5b0
   1ac14:	movw	r1, #57110	; 0xdf16
   1ac18:	movt	r4, #1285	; 0x505
   1ac1c:	movt	r0, #1
   1ac20:	movt	r1, #1
   1ac24:	mov	r2, r4
   1ac28:	bl	1ae7c <next@@Base+0x1a2c>
   1ac2c:	movw	r1, #62729	; 0xf509
   1ac30:	movw	r2, #55951	; 0xda8f
   1ac34:	mov	r0, #0
   1ac38:	mov	r3, #0
   1ac3c:	str	r4, [sp]
   1ac40:	movt	r1, #1
   1ac44:	movt	r2, #28995	; 0x7143
   1ac48:	bl	1b5e0 <next@@Base+0x2190>
   1ac4c:	movw	r5, #5728	; 0x1660
   1ac50:	mov	r0, #2
   1ac54:	movt	r5, #3
   1ac58:	mov	r1, r5
   1ac5c:	bl	1be94 <next@@Base+0x2a44>
   1ac60:	movw	r1, #62740	; 0xf514
   1ac64:	movw	r2, #9871	; 0x268f
   1ac68:	mov	r0, #1
   1ac6c:	mov	r3, #0
   1ac70:	str	r4, [sp]
   1ac74:	movt	r1, #1
   1ac78:	movt	r2, #57371	; 0xe01b
   1ac7c:	bl	1b5e0 <next@@Base+0x2190>
   1ac80:	movw	r6, #5824	; 0x16c0
   1ac84:	mov	r0, #5
   1ac88:	movt	r6, #3
   1ac8c:	add	r1, r6, #32
   1ac90:	bl	1be94 <next@@Base+0x2a44>
   1ac94:	movw	r1, #62754	; 0xf522
   1ac98:	movw	r2, #42880	; 0xa780
   1ac9c:	mov	r0, #2
   1aca0:	mov	r3, #0
   1aca4:	str	r4, [sp]
   1aca8:	movt	r1, #1
   1acac:	movt	r2, #60429	; 0xec0d
   1acb0:	bl	1b5e0 <next@@Base+0x2190>
   1acb4:	add	r1, r5, #16
   1acb8:	mov	r0, #2
   1acbc:	bl	1be94 <next@@Base+0x2a44>
   1acc0:	movw	r1, #62770	; 0xf532
   1acc4:	movw	r2, #43590	; 0xaa46
   1acc8:	mov	r0, #3
   1accc:	mov	r3, #0
   1acd0:	str	r4, [sp]
   1acd4:	movt	r1, #1
   1acd8:	movt	r2, #6450	; 0x1932
   1acdc:	bl	1b5e0 <next@@Base+0x2190>
   1ace0:	add	r1, r5, #32
   1ace4:	mov	r0, #2
   1ace8:	bl	1be94 <next@@Base+0x2a44>
   1acec:	movw	r1, #62780	; 0xf53c
   1acf0:	movw	r2, #48479	; 0xbd5f
   1acf4:	mov	r0, #4
   1acf8:	mov	r3, #0
   1acfc:	str	r4, [sp]
   1ad00:	movt	r1, #1
   1ad04:	movt	r2, #1881	; 0x759
   1ad08:	bl	1b5e0 <next@@Base+0x2190>
   1ad0c:	add	r1, r5, #48	; 0x30
   1ad10:	mov	r0, #2
   1ad14:	bl	1be94 <next@@Base+0x2a44>
   1ad18:	movw	r1, #62789	; 0xf545
   1ad1c:	movw	r2, #6554	; 0x199a
   1ad20:	mov	r0, #5
   1ad24:	mov	r3, #0
   1ad28:	str	r4, [sp]
   1ad2c:	movt	r1, #1
   1ad30:	movt	r2, #65198	; 0xfeae
   1ad34:	bl	1b5e0 <next@@Base+0x2190>
   1ad38:	mov	r0, #4
   1ad3c:	mov	r1, r6
   1ad40:	bl	1be94 <next@@Base+0x2a44>
   1ad44:	movw	r1, #62992	; 0xf610
   1ad48:	movw	r2, #8437	; 0x20f5
   1ad4c:	mov	r0, #6
   1ad50:	mov	r3, #0
   1ad54:	str	r4, [sp]
   1ad58:	movt	r1, #1
   1ad5c:	movt	r2, #57385	; 0xe029
   1ad60:	bl	1b5e0 <next@@Base+0x2190>
   1ad64:	add	r1, r5, #64	; 0x40
   1ad68:	mov	r0, #2
   1ad6c:	bl	1be94 <next@@Base+0x2a44>
   1ad70:	movw	r1, #62805	; 0xf555
   1ad74:	movw	r2, #2560	; 0xa00
   1ad78:	mov	r0, #7
   1ad7c:	mov	r3, #0
   1ad80:	str	r4, [sp]
   1ad84:	movt	r1, #1
   1ad88:	movt	r2, #32497	; 0x7ef1
   1ad8c:	bl	1b5e0 <next@@Base+0x2190>
   1ad90:	movw	r1, #4720	; 0x1270
   1ad94:	mov	r0, #126	; 0x7e
   1ad98:	movt	r1, #3
   1ad9c:	bl	1be94 <next@@Base+0x2a44>
   1ada0:	movw	r1, #62810	; 0xf55a
   1ada4:	movw	r2, #18632	; 0x48c8
   1ada8:	mov	r0, #8
   1adac:	mov	r3, #0
   1adb0:	str	r4, [sp]
   1adb4:	movt	r1, #1
   1adb8:	movt	r2, #23953	; 0x5d91
   1adbc:	bl	1b5e0 <next@@Base+0x2190>
   1adc0:	add	r1, r5, #80	; 0x50
   1adc4:	mov	r0, #2
   1adc8:	bl	1be94 <next@@Base+0x2a44>
   1adcc:	bl	1c610 <next@@Base+0x31c0>
   1add0:	add	sp, sp, #8
   1add4:	pop	{r4, r5, r6, lr}
   1add8:	b	1d37c <next@@Base+0x3f2c>
   1addc:	push	{r4, lr}
   1ade0:	vpush	{d8-d9}
   1ade4:	bl	1ac04 <next@@Base+0x17b4>
   1ade8:	movw	r0, #5824	; 0x16c0
   1adec:	vmov.i32	q4, #0	; 0x00000000
   1adf0:	movw	r4, #5728	; 0x1660
   1adf4:	mov	r2, #1008	; 0x3f0
   1adf8:	movt	r0, #3
   1adfc:	movt	r4, #3
   1ae00:	add	r1, r0, #48	; 0x30
   1ae04:	vst1.64	{d8-d9}, [r1 :128]
   1ae08:	add	r1, r0, #32
   1ae0c:	vst1.64	{d8-d9}, [r1 :128]
   1ae10:	mov	r1, #0
   1ae14:	str	r1, [r0, #64]	; 0x40
   1ae18:	str	r1, [r0, #68]	; 0x44
   1ae1c:	add	r1, r4, #16
   1ae20:	vst1.64	{d8-d9}, [r0 :128]!
   1ae24:	vst1.64	{d8-d9}, [r1 :128]
   1ae28:	add	r1, r4, #32
   1ae2c:	vst1.64	{d8-d9}, [r0 :128]
   1ae30:	mov	r0, #80	; 0x50
   1ae34:	vst1.64	{d8-d9}, [r1 :128]
   1ae38:	add	r1, r4, #48	; 0x30
   1ae3c:	vst1.64	{d8-d9}, [r1 :128]
   1ae40:	add	r1, r4, #64	; 0x40
   1ae44:	vst1.64	{d8-d9}, [r1 :128]
   1ae48:	vst1.64	{d8-d9}, [r4 :128], r0
   1ae4c:	movw	r0, #4720	; 0x1270
   1ae50:	mov	r1, #0
   1ae54:	movt	r0, #3
   1ae58:	bl	12750 <memset@plt>
   1ae5c:	vst1.64	{d8-d9}, [r4 :128]
   1ae60:	vpop	{d8-d9}
   1ae64:	pop	{r4, pc}
   1ae68:	movw	r0, #44036	; 0xac04
   1ae6c:	movw	r1, #44508	; 0xaddc
   1ae70:	movt	r0, #1
   1ae74:	movt	r1, #1
   1ae78:	b	1d82c <__gcov_flush@@Base+0xb4>
   1ae7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae80:	add	fp, sp, #28
   1ae84:	sub	sp, sp, #36	; 0x24
   1ae88:	mov	r9, r1
   1ae8c:	mov	r6, r0
   1ae90:	add	r0, sp, #28
   1ae94:	add	r1, sp, #32
   1ae98:	mov	r8, r2
   1ae9c:	bl	1dbd8 <__gcov_flush@@Base+0x460>
   1aea0:	cmp	r0, #0
   1aea4:	beq	1aee8 <next@@Base+0x1a98>
   1aea8:	mov	r4, r0
   1aeac:	mov	r0, r6
   1aeb0:	ldr	r5, [sp, #32]
   1aeb4:	bl	12708 <strlen@plt>
   1aeb8:	add	r0, r5, r0
   1aebc:	add	r0, r0, #2
   1aec0:	bl	126c0 <malloc@plt>
   1aec4:	mov	r7, r0
   1aec8:	ldr	r0, [sp, #28]
   1aecc:	mov	r1, r6
   1aed0:	mov	r2, r4
   1aed4:	str	r0, [sp]
   1aed8:	mov	r0, r7
   1aedc:	mov	r3, r5
   1aee0:	bl	1dc6c <__gcov_flush@@Base+0x4f4>
   1aee4:	b	1aef4 <next@@Base+0x1aa4>
   1aee8:	mov	r0, r6
   1aeec:	bl	12678 <strdup@plt>
   1aef0:	mov	r7, r0
   1aef4:	ldr	r0, [pc, #1548]	; 1b508 <next@@Base+0x20b8>
   1aef8:	ldr	r6, [pc, #1548]	; 1b50c <next@@Base+0x20bc>
   1aefc:	mov	r1, #2
   1af00:	add	r0, pc, r0
   1af04:	add	r6, pc, r6
   1af08:	str	r7, [r0]
   1af0c:	mov	r0, r7
   1af10:	mov	r4, #0
   1af14:	strb	r4, [r6]
   1af18:	bl	126a8 <open64@plt>
   1af1c:	ldr	r5, [pc, #1516]	; 1b510 <next@@Base+0x20c0>
   1af20:	cmn	r0, #1
   1af24:	add	r5, pc, r5
   1af28:	str	r0, [r5]
   1af2c:	beq	1af3c <next@@Base+0x1aec>
   1af30:	ldr	r6, [pc, #1500]	; 1b514 <next@@Base+0x20c4>
   1af34:	add	r6, pc, r6
   1af38:	b	1af98 <next@@Base+0x1b48>
   1af3c:	mov	r0, #1
   1af40:	strb	r0, [r6]
   1af44:	ldr	r0, [pc, #1508]	; 1b530 <next@@Base+0x20e0>
   1af48:	mov	r1, #66	; 0x42
   1af4c:	mov	r2, #420	; 0x1a4
   1af50:	ldr	r0, [pc, r0]
   1af54:	bl	126a8 <open64@plt>
   1af58:	ldr	r6, [pc, #1492]	; 1b534 <next@@Base+0x20e4>
   1af5c:	cmn	r0, #1
   1af60:	str	r0, [r5]
   1af64:	add	r6, pc, r6
   1af68:	bne	1af98 <next@@Base+0x1b48>
   1af6c:	ldr	r0, [pc, #1476]	; 1b538 <next@@Base+0x20e8>
   1af70:	ldr	r0, [pc, r0]
   1af74:	bl	1d940 <__gcov_flush@@Base+0x1c8>
   1af78:	ldr	r0, [pc, #1468]	; 1b53c <next@@Base+0x20ec>
   1af7c:	mov	r1, #66	; 0x42
   1af80:	mov	r2, #420	; 0x1a4
   1af84:	ldr	r0, [pc, r0]
   1af88:	bl	126a8 <open64@plt>
   1af8c:	cmn	r0, #1
   1af90:	str	r0, [r5]
   1af94:	beq	1b4c0 <next@@Base+0x2070>
   1af98:	str	r9, [sp, #20]
   1af9c:	bl	1da0c <__gcov_flush@@Base+0x294>
   1afa0:	ldr	r0, [pc, #1392]	; 1b518 <next@@Base+0x20c8>
   1afa4:	mov	r1, r6
   1afa8:	ldr	r0, [pc, r0]
   1afac:	bl	125f4 <fdopen@plt>
   1afb0:	ldr	r5, [pc, #1380]	; 1b51c <next@@Base+0x20cc>
   1afb4:	ldr	r9, [pc, #1380]	; 1b520 <next@@Base+0x20d0>
   1afb8:	ldr	r1, [pc, #1380]	; 1b524 <next@@Base+0x20d4>
   1afbc:	ldr	sl, [pc, #1380]	; 1b528 <next@@Base+0x20d8>
   1afc0:	add	r5, pc, r5
   1afc4:	add	r9, pc, r9
   1afc8:	add	r1, pc, r1
   1afcc:	add	sl, pc, sl
   1afd0:	str	r4, [r5]
   1afd4:	str	r4, [r5, #4]
   1afd8:	str	r4, [r9]
   1afdc:	str	r4, [r9, #4]
   1afe0:	str	r0, [r1]
   1afe4:	str	r4, [sl]
   1afe8:	ldr	r6, [pc, #1340]	; 1b52c <next@@Base+0x20dc>
   1afec:	ldr	r2, [pc, #1292]	; 1b500 <next@@Base+0x20b0>
   1aff0:	str	r8, [sp, #24]
   1aff4:	add	r6, pc, r6
   1aff8:	ldrb	r1, [r6]
   1affc:	mov	r6, r2
   1b000:	cmp	r1, #1
   1b004:	bne	1b02c <next@@Base+0x1bdc>
   1b008:	mov	r0, #131072	; 0x20000
   1b00c:	mov	r4, #131072	; 0x20000
   1b010:	bl	126c0 <malloc@plt>
   1b014:	mov	r1, #0
   1b018:	str	r4, [r5]
   1b01c:	str	r1, [r5, #4]
   1b020:	mov	r8, r0
   1b024:	str	r0, [sl]
   1b028:	b	1b1bc <next@@Base+0x1d6c>
   1b02c:	mov	r1, #0
   1b030:	mov	r2, #2
   1b034:	mov	r8, #0
   1b038:	bl	127bc <fseek@plt>
   1b03c:	ldr	r0, [pc, #1288]	; 1b54c <next@@Base+0x20fc>
   1b040:	ldr	r0, [pc, r0]
   1b044:	bl	12660 <ftell@plt>
   1b048:	mov	r2, r0
   1b04c:	ldr	r0, [pc, #1276]	; 1b550 <next@@Base+0x2100>
   1b050:	asr	r3, r2, #31
   1b054:	add	r0, pc, r0
   1b058:	cmp	r2, #0
   1b05c:	strd	r2, [r0]
   1b060:	beq	1b130 <next@@Base+0x1ce0>
   1b064:	ldr	r0, [pc, #1256]	; 1b554 <next@@Base+0x2104>
   1b068:	mov	r1, r2
   1b06c:	mov	r2, #3
   1b070:	mov	r3, #1
   1b074:	ldr	r0, [pc, r0]
   1b078:	str	r8, [sp, #8]
   1b07c:	str	r8, [sp, #12]
   1b080:	str	r0, [sp]
   1b084:	mov	r0, #0
   1b088:	bl	12654 <mmap64@plt>
   1b08c:	ldr	r1, [pc, #1220]	; 1b558 <next@@Base+0x2108>
   1b090:	cmn	r0, #1
   1b094:	add	r1, pc, r1
   1b098:	str	r0, [r1]
   1b09c:	beq	1b0f8 <next@@Base+0x1ca8>
   1b0a0:	ldr	r1, [pc, #1232]	; 1b578 <next@@Base+0x2128>
   1b0a4:	add	r1, pc, r1
   1b0a8:	ldrb	r1, [r1]
   1b0ac:	cmp	r1, #0
   1b0b0:	beq	1b0bc <next@@Base+0x1c6c>
   1b0b4:	mov	r8, r0
   1b0b8:	b	1b1c8 <next@@Base+0x1d78>
   1b0bc:	ldr	ip, [r9, #4]
   1b0c0:	ldr	r5, [pc, #1236]	; 1b59c <next@@Base+0x214c>
   1b0c4:	mov	r4, r0
   1b0c8:	lsr	r2, r6, #16
   1b0cc:	ldr	r5, [pc, r5]
   1b0d0:	lsr	r1, r6, #24
   1b0d4:	lsr	r3, r6, #8
   1b0d8:	strb	r6, [r4, r5]!
   1b0dc:	strb	r2, [r4, #2]
   1b0e0:	adds	r2, r5, #4
   1b0e4:	adc	ip, ip, #0
   1b0e8:	strb	r1, [r4, #3]
   1b0ec:	strb	r3, [r4, #1]
   1b0f0:	stm	r9, {r2, ip}
   1b0f4:	b	1b290 <next@@Base+0x1e40>
   1b0f8:	bl	1272c <__errno_location@plt>
   1b0fc:	ldr	r1, [pc, #1112]	; 1b55c <next@@Base+0x210c>
   1b100:	ldr	r1, [pc, r1]
   1b104:	ldr	r0, [r0]
   1b108:	ldr	r4, [r1]
   1b10c:	ldr	r7, [pc, #1100]	; 1b560 <next@@Base+0x2110>
   1b110:	ldr	r7, [pc, r7]
   1b114:	bl	126d8 <strerror@plt>
   1b118:	ldr	r1, [pc, #1092]	; 1b564 <next@@Base+0x2114>
   1b11c:	mov	r3, r0
   1b120:	mov	r0, r4
   1b124:	add	r1, pc, r1
   1b128:	mov	r2, r7
   1b12c:	bl	12720 <fprintf@plt>
   1b130:	str	r8, [r5]
   1b134:	str	r8, [r5, #4]
   1b138:	ldr	r0, [pc, #1064]	; 1b568 <next@@Base+0x2118>
   1b13c:	mov	r2, #16646144	; 0xfe0000
   1b140:	orr	r2, r2, #-16777216	; 0xff000000
   1b144:	add	r0, pc, r0
   1b148:	mvn	r3, #0
   1b14c:	str	r8, [r0]
   1b150:	ldr	r1, [pc, #1044]	; 1b56c <next@@Base+0x211c>
   1b154:	mov	r0, #1
   1b158:	add	r1, pc, r1
   1b15c:	strb	r0, [r1]
   1b160:	ldr	r0, [r9, #4]
   1b164:	ldr	r1, [pc, #1028]	; 1b570 <next@@Base+0x2120>
   1b168:	eor	r3, r0, r3
   1b16c:	ldr	r1, [pc, r1]
   1b170:	eor	r2, r1, r2
   1b174:	orrs	r2, r2, r3
   1b178:	beq	1b1b8 <next@@Base+0x1d68>
   1b17c:	ldr	r2, [pc, #896]	; 1b504 <next@@Base+0x20b4>
   1b180:	adds	r1, r1, r2
   1b184:	adc	r0, r0, #0
   1b188:	mvn	r2, #0
   1b18c:	and	r7, r0, r2
   1b190:	mov	r0, #16646144	; 0xfe0000
   1b194:	orr	r0, r0, #-16777216	; 0xff000000
   1b198:	and	r4, r1, r0
   1b19c:	mov	r0, r4
   1b1a0:	bl	126c0 <malloc@plt>
   1b1a4:	stm	r5, {r4, r7}
   1b1a8:	mov	r8, r0
   1b1ac:	ldr	r0, [pc, #960]	; 1b574 <next@@Base+0x2124>
   1b1b0:	add	r0, pc, r0
   1b1b4:	str	r8, [r0]
   1b1b8:	mov	r0, r8
   1b1bc:	mov	r1, #0
   1b1c0:	mov	r2, #131072	; 0x20000
   1b1c4:	bl	12750 <memset@plt>
   1b1c8:	ldr	r0, [r9, #4]
   1b1cc:	ldr	r1, [pc, #936]	; 1b57c <next@@Base+0x212c>
   1b1d0:	mov	sl, r5
   1b1d4:	mov	r7, #7
   1b1d8:	orr	r7, r7, #131072	; 0x20000
   1b1dc:	ldr	r1, [pc, r1]
   1b1e0:	ldr	r4, [r5, #4]
   1b1e4:	ldr	r5, [pc, #916]	; 1b580 <next@@Base+0x2130>
   1b1e8:	adds	r2, r1, #4
   1b1ec:	adc	r3, r0, #0
   1b1f0:	ldr	r5, [pc, r5]
   1b1f4:	subs	r2, r5, r2
   1b1f8:	sbcs	r2, r4, r3
   1b1fc:	bcs	1b2d4 <next@@Base+0x1e84>
   1b200:	adds	r1, r1, r7
   1b204:	adc	r0, r0, #0
   1b208:	subs	r1, r1, #4
   1b20c:	sbc	r0, r0, #0
   1b210:	mvn	r2, #0
   1b214:	and	r5, r0, r2
   1b218:	mov	r0, #16646144	; 0xfe0000
   1b21c:	orr	r0, r0, #-16777216	; 0xff000000
   1b220:	and	r4, r1, r0
   1b224:	mov	r0, r8
   1b228:	mov	r1, r4
   1b22c:	bl	12690 <realloc@plt>
   1b230:	strd	r4, [sl]
   1b234:	ldr	r1, [pc, #844]	; 1b588 <next@@Base+0x2138>
   1b238:	mov	r7, r6
   1b23c:	lsr	r2, r6, #24
   1b240:	add	r1, pc, r1
   1b244:	mov	r3, r0
   1b248:	str	r0, [r1]
   1b24c:	ldr	r6, [pc, #824]	; 1b58c <next@@Base+0x213c>
   1b250:	ldr	r1, [r9, #4]
   1b254:	lsr	r5, r7, #16
   1b258:	add	r6, pc, r6
   1b25c:	ldrb	r6, [r6]
   1b260:	ldr	r4, [pc, #808]	; 1b590 <next@@Base+0x2140>
   1b264:	ldr	r4, [pc, r4]
   1b268:	strb	r7, [r3, r4]!
   1b26c:	strb	r2, [r3, #3]
   1b270:	lsr	r2, r7, #8
   1b274:	strb	r2, [r3, #1]
   1b278:	adds	r2, r4, #4
   1b27c:	adc	ip, r1, #0
   1b280:	cmp	r6, #1
   1b284:	strb	r5, [r3, #2]
   1b288:	stm	r9, {r2, ip}
   1b28c:	beq	1b314 <next@@Base+0x1ec4>
   1b290:	ldr	r4, [sp, #20]
   1b294:	mov	r5, r0
   1b298:	mov	lr, r9
   1b29c:	ldrb	r1, [r4]
   1b2a0:	ldrb	r3, [r4, #1]
   1b2a4:	ldrb	r7, [r4, #2]
   1b2a8:	ldrb	r6, [r4, #3]
   1b2ac:	strb	r1, [r5, r2]!
   1b2b0:	adds	r4, r2, #4
   1b2b4:	adc	r1, ip, #0
   1b2b8:	strb	r6, [r5, #3]
   1b2bc:	strb	r7, [r5, #2]
   1b2c0:	strb	r3, [r5, #1]
   1b2c4:	str	r4, [lr]
   1b2c8:	str	r1, [lr, #4]
   1b2cc:	ldr	r6, [sp, #24]
   1b2d0:	b	1b490 <next@@Base+0x2040>
   1b2d4:	ldr	r1, [r9, #4]
   1b2d8:	ldr	r4, [pc, #676]	; 1b584 <next@@Base+0x2134>
   1b2dc:	mov	r5, r6
   1b2e0:	lsr	r0, r6, #24
   1b2e4:	ldr	r4, [pc, r4]
   1b2e8:	lsr	r2, r6, #16
   1b2ec:	lsr	r3, r6, #8
   1b2f0:	mov	r6, r8
   1b2f4:	strb	r5, [r6, r4]!
   1b2f8:	strb	r2, [r6, #2]
   1b2fc:	adds	r2, r4, #4
   1b300:	adc	ip, r1, #0
   1b304:	strb	r0, [r6, #3]
   1b308:	strb	r3, [r6, #1]
   1b30c:	stm	r9, {r2, ip}
   1b310:	mov	r0, r8
   1b314:	ldr	r7, [sl, #4]
   1b318:	ldr	r3, [pc, #628]	; 1b594 <next@@Base+0x2144>
   1b31c:	adds	r6, r4, #8
   1b320:	mov	r8, r9
   1b324:	adc	r5, r1, #0
   1b328:	ldr	r3, [pc, r3]
   1b32c:	mov	r9, sl
   1b330:	subs	r3, r3, r6
   1b334:	sbcs	r3, r7, r5
   1b338:	bcs	1b3dc <next@@Base+0x1f8c>
   1b33c:	mov	r2, #7
   1b340:	orr	r2, r2, #131072	; 0x20000
   1b344:	adds	r2, r4, r2
   1b348:	adc	r4, r1, #0
   1b34c:	mov	r1, #16646144	; 0xfe0000
   1b350:	orr	r1, r1, #-16777216	; 0xff000000
   1b354:	and	r6, r2, r1
   1b358:	mov	r1, r6
   1b35c:	bl	12690 <realloc@plt>
   1b360:	ldr	sl, [pc, #568]	; 1b5a0 <next@@Base+0x2150>
   1b364:	mvn	r1, #0
   1b368:	and	r7, r4, r1
   1b36c:	add	sl, pc, sl
   1b370:	strd	r6, [r9]
   1b374:	str	r0, [sl]
   1b378:	ldr	r1, [pc, #548]	; 1b5a4 <next@@Base+0x2154>
   1b37c:	ldr	r2, [sp, #20]
   1b380:	ldr	ip, [r8, #4]
   1b384:	add	r1, pc, r1
   1b388:	mov	lr, r8
   1b38c:	ldrb	r3, [r1]
   1b390:	ldrb	r1, [r2]
   1b394:	ldrb	r7, [r2, #1]
   1b398:	ldrb	r6, [r2, #2]
   1b39c:	ldrb	r5, [r2, #3]
   1b3a0:	ldr	r2, [pc, #512]	; 1b5a8 <next@@Base+0x2158>
   1b3a4:	ldr	r2, [pc, r2]
   1b3a8:	adds	r4, r2, #4
   1b3ac:	strb	r1, [r0, r2]
   1b3b0:	add	r1, r0, r2
   1b3b4:	strb	r5, [r1, #3]
   1b3b8:	strb	r6, [r1, #2]
   1b3bc:	strb	r7, [r1, #1]
   1b3c0:	adc	r1, ip, #0
   1b3c4:	str	r4, [lr]
   1b3c8:	str	r1, [lr, #4]
   1b3cc:	ldr	r6, [sp, #24]
   1b3d0:	cmp	r3, #1
   1b3d4:	beq	1b424 <next@@Base+0x1fd4>
   1b3d8:	b	1b490 <next@@Base+0x2040>
   1b3dc:	ldr	r6, [sp, #20]
   1b3e0:	mov	r5, r0
   1b3e4:	adds	r4, r2, #4
   1b3e8:	ldrb	r1, [r6]
   1b3ec:	ldrb	r3, [r6, #1]
   1b3f0:	ldrb	r7, [r6, #2]
   1b3f4:	ldrb	r6, [r6, #3]
   1b3f8:	strb	r1, [r5, r2]!
   1b3fc:	adc	r1, ip, #0
   1b400:	strb	r3, [r5, #1]
   1b404:	mov	r3, r8
   1b408:	strb	r6, [r5, #3]
   1b40c:	strb	r7, [r5, #2]
   1b410:	str	r4, [r3]
   1b414:	str	r1, [r3, #4]
   1b418:	ldr	r6, [sp, #24]
   1b41c:	ldr	sl, [pc, #372]	; 1b598 <next@@Base+0x2148>
   1b420:	add	sl, pc, sl
   1b424:	ldr	r7, [r9, #4]
   1b428:	ldr	r5, [pc, #380]	; 1b5ac <next@@Base+0x215c>
   1b42c:	adds	r3, r2, #8
   1b430:	adc	lr, ip, #0
   1b434:	ldr	r5, [pc, r5]
   1b438:	subs	r3, r5, r3
   1b43c:	sbcs	r3, r7, lr
   1b440:	bcs	1b48c <next@@Base+0x203c>
   1b444:	mov	r1, #7
   1b448:	orr	r1, r1, #131072	; 0x20000
   1b44c:	adds	r1, r2, r1
   1b450:	adc	r2, ip, #0
   1b454:	mvn	r3, #0
   1b458:	and	r5, r2, r3
   1b45c:	mov	r2, #16646144	; 0xfe0000
   1b460:	orr	r2, r2, #-16777216	; 0xff000000
   1b464:	and	r4, r1, r2
   1b468:	mov	r1, r4
   1b46c:	bl	12690 <realloc@plt>
   1b470:	strd	r4, [r9]
   1b474:	str	r0, [sl]
   1b478:	ldr	r1, [r8, #4]
   1b47c:	ldr	r4, [pc, #300]	; 1b5b0 <next@@Base+0x2160>
   1b480:	mov	lr, r8
   1b484:	ldr	r4, [pc, r4]
   1b488:	b	1b490 <next@@Base+0x2040>
   1b48c:	mov	lr, r8
   1b490:	lsr	r2, r6, #24
   1b494:	strb	r6, [r0, r4]!
   1b498:	lsr	r3, r6, #16
   1b49c:	lsr	r7, r6, #8
   1b4a0:	strb	r2, [r0, #3]
   1b4a4:	strb	r3, [r0, #2]
   1b4a8:	strb	r7, [r0, #1]
   1b4ac:	adds	r0, r4, #4
   1b4b0:	adc	r1, r1, #0
   1b4b4:	strd	r0, [lr]
   1b4b8:	sub	sp, fp, #28
   1b4bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4c0:	bl	1272c <__errno_location@plt>
   1b4c4:	ldr	r1, [pc, #116]	; 1b540 <next@@Base+0x20f0>
   1b4c8:	ldr	r1, [pc, r1]
   1b4cc:	ldr	r0, [r0]
   1b4d0:	ldr	r4, [r1]
   1b4d4:	ldr	r5, [pc, #104]	; 1b544 <next@@Base+0x20f4>
   1b4d8:	ldr	r5, [pc, r5]
   1b4dc:	bl	126d8 <strerror@plt>
   1b4e0:	ldr	r1, [pc, #96]	; 1b548 <next@@Base+0x20f8>
   1b4e4:	mov	r3, r0
   1b4e8:	mov	r0, r4
   1b4ec:	add	r1, pc, r1
   1b4f0:	mov	r2, r5
   1b4f4:	bl	12720 <fprintf@plt>
   1b4f8:	sub	sp, fp, #28
   1b4fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b500:	strbvs	r6, [r3, -r1, ror #8]!
   1b504:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1b508:	andeq	r6, r1, r0, lsl #16
   1b50c:	andeq	r6, r1, r0, lsl #16
   1b510:	andeq	r5, r1, r0, lsr #3
   1b514:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1b518:	andeq	r5, r1, ip, lsl r1
   1b51c:	andeq	r6, r1, r0, asr r7
   1b520:	andeq	r6, r1, r4, asr r7
   1b524:	andeq	r6, r1, r0, asr #14
   1b528:	andeq	r6, r1, r0, asr #14
   1b52c:	andeq	r6, r1, r0, lsl r7
   1b530:			; <UNDEFINED> instruction: 0x000167b0
   1b534:	andeq	r4, r0, r8, asr #13
   1b538:	muleq	r1, r0, r7
   1b53c:	andeq	r6, r1, ip, ror r7
   1b540:	andeq	r4, r1, r8, ror #23
   1b544:	andeq	r6, r1, r8, lsr #4
   1b548:	andeq	r4, r0, r4, asr #2
   1b54c:	andeq	r6, r1, r8, asr #13
   1b550:	ldrdeq	r6, [r1], -ip
   1b554:	andeq	r5, r1, r0, asr r0
   1b558:	andeq	r6, r1, r8, ror r6
   1b55c:			; <UNDEFINED> instruction: 0x00014fb0
   1b560:	strdeq	r6, [r1], -r0
   1b564:	andeq	r4, r0, r6, ror #12
   1b568:	andeq	r6, r1, r8, asr #11
   1b56c:	andeq	r6, r1, ip, lsr #11
   1b570:	andeq	r6, r1, ip, lsr #11
   1b574:	andeq	r6, r1, ip, asr r5
   1b578:	andeq	r6, r1, r0, ror #12
   1b57c:	andeq	r6, r1, ip, lsr r5
   1b580:	andeq	r6, r1, r0, lsr #10
   1b584:	andeq	r6, r1, r4, lsr r4
   1b588:	andeq	r6, r1, ip, asr #9
   1b58c:	andeq	r6, r1, ip, lsr #9
   1b590:			; <UNDEFINED> instruction: 0x000164b4
   1b594:	andeq	r6, r1, r8, ror #7
   1b598:	andeq	r6, r1, ip, ror #5
   1b59c:	andeq	r6, r1, ip, asr #12
   1b5a0:	andeq	r6, r1, r0, lsr #7
   1b5a4:	andeq	r6, r1, r0, lsl #7
   1b5a8:	andeq	r6, r1, r4, ror r3
   1b5ac:	ldrdeq	r6, [r1], -ip
   1b5b0:	muleq	r1, r4, r2
   1b5b4:	ldr	r0, [r0]
   1b5b8:	cmn	r0, #1
   1b5bc:	beq	1b5dc <next@@Base+0x218c>
   1b5c0:	ldr	r0, [r1, r0, lsl #2]
   1b5c4:	cmp	r0, #0
   1b5c8:	bxeq	lr
   1b5cc:	ldrd	r2, [r0]
   1b5d0:	adds	r2, r2, #1
   1b5d4:	adc	r3, r3, #0
   1b5d8:	strd	r2, [r0]
   1b5dc:	bx	lr
   1b5e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5e4:	add	fp, sp, #28
   1b5e8:	sub	sp, sp, #12
   1b5ec:	mov	r9, r0
   1b5f0:	ldr	r0, [pc, #2000]	; 1bdc8 <next@@Base+0x2978>
   1b5f4:	mov	sl, #2
   1b5f8:	cmp	r3, #0
   1b5fc:	movne	sl, #3
   1b600:	ldr	r0, [pc, r0]
   1b604:	cmp	r0, #0
   1b608:	beq	1bdc0 <next@@Base+0x2970>
   1b60c:	stm	sp, {r2, r3}
   1b610:	ldr	r0, [pc, #1972]	; 1bdcc <next@@Base+0x297c>
   1b614:	str	r1, [sp, #8]
   1b618:	add	r0, pc, r0
   1b61c:	ldrb	r0, [r0]
   1b620:	cmp	r0, #1
   1b624:	bne	1b6b4 <next@@Base+0x2264>
   1b628:	ldr	r0, [pc, #1952]	; 1bdd0 <next@@Base+0x2980>
   1b62c:	ldr	r4, [pc, #1952]	; 1bdd4 <next@@Base+0x2984>
   1b630:	add	r0, pc, r0
   1b634:	add	r4, pc, r4
   1b638:	ldr	r0, [r0, #4]
   1b63c:	ldr	r5, [pc, #1940]	; 1bdd8 <next@@Base+0x2988>
   1b640:	ldr	r5, [pc, r5]
   1b644:	ldr	r7, [r4, #4]
   1b648:	ldr	r6, [pc, #1932]	; 1bddc <next@@Base+0x298c>
   1b64c:	adds	r2, r5, #4
   1b650:	adc	r3, r0, #0
   1b654:	ldr	r6, [pc, r6]
   1b658:	subs	r2, r6, r2
   1b65c:	sbcs	r2, r7, r3
   1b660:	bcs	1b6b4 <next@@Base+0x2264>
   1b664:	mov	r2, #7
   1b668:	orr	r2, r2, #131072	; 0x20000
   1b66c:	adds	r1, r5, r2
   1b670:	adc	r0, r0, #0
   1b674:	subs	r1, r1, #4
   1b678:	sbc	r0, r0, #0
   1b67c:	mvn	r2, #0
   1b680:	and	r7, r0, r2
   1b684:	mov	r0, #16646144	; 0xfe0000
   1b688:	orr	r0, r0, #-16777216	; 0xff000000
   1b68c:	ldr	r8, [pc, #1868]	; 1bde0 <next@@Base+0x2990>
   1b690:	and	r6, r1, r0
   1b694:	ldr	r0, [pc, #1864]	; 1bde4 <next@@Base+0x2994>
   1b698:	mov	r1, r6
   1b69c:	add	r8, pc, r8
   1b6a0:	ldr	r0, [pc, r0]
   1b6a4:	bl	12690 <realloc@plt>
   1b6a8:	ldr	r1, [sp, #8]
   1b6ac:	strd	r6, [r4]
   1b6b0:	str	r0, [r8]
   1b6b4:	ldr	r3, [pc, #1836]	; 1bde8 <next@@Base+0x2998>
   1b6b8:	ldr	r7, [pc, #1836]	; 1bdec <next@@Base+0x299c>
   1b6bc:	mov	r0, #0
   1b6c0:	add	r3, pc, r3
   1b6c4:	mov	r2, #1
   1b6c8:	ldr	r7, [pc, r7]
   1b6cc:	ldr	r8, [pc, #1820]	; 1bdf0 <next@@Base+0x29a0>
   1b6d0:	adds	r4, r7, #4
   1b6d4:	ldr	r8, [pc, r8]
   1b6d8:	ldr	r6, [r3, #4]
   1b6dc:	mov	r5, r8
   1b6e0:	strb	r0, [r5, r7]!
   1b6e4:	strb	r2, [r5, #3]
   1b6e8:	strb	r0, [r5, #2]
   1b6ec:	strb	r0, [r5, #1]
   1b6f0:	adc	r5, r6, #0
   1b6f4:	cmp	r1, #0
   1b6f8:	strd	r4, [r3]
   1b6fc:	beq	1b710 <next@@Base+0x22c0>
   1b700:	mov	r0, r1
   1b704:	bl	12708 <strlen@plt>
   1b708:	add	r0, sl, r0, lsr #2
   1b70c:	add	sl, r0, #2
   1b710:	ldr	r0, [pc, #1756]	; 1bdf4 <next@@Base+0x29a4>
   1b714:	add	r0, pc, r0
   1b718:	ldrb	r0, [r0]
   1b71c:	cmp	r0, #0
   1b720:	beq	1b800 <next@@Base+0x23b0>
   1b724:	ldr	lr, [pc, #1744]	; 1bdfc <next@@Base+0x29ac>
   1b728:	adds	r0, r7, #8
   1b72c:	adc	r1, r6, #0
   1b730:	add	lr, pc, lr
   1b734:	ldr	r2, [lr, #4]
   1b738:	ldr	r3, [pc, #1728]	; 1be00 <next@@Base+0x29b0>
   1b73c:	ldr	r3, [pc, r3]
   1b740:	subs	r0, r3, r0
   1b744:	sbcs	r0, r2, r1
   1b748:	bcs	1ba50 <next@@Base+0x2600>
   1b74c:	mov	r0, #7
   1b750:	orr	r0, r0, #131072	; 0x20000
   1b754:	adds	r0, r7, r0
   1b758:	adc	r1, r6, #0
   1b75c:	mvn	r2, #0
   1b760:	and	r5, r1, r2
   1b764:	mov	r1, #16646144	; 0xfe0000
   1b768:	orr	r1, r1, #-16777216	; 0xff000000
   1b76c:	and	r6, r0, r1
   1b770:	ldr	r4, [pc, #1680]	; 1be08 <next@@Base+0x29b8>
   1b774:	mov	r0, r8
   1b778:	mov	r1, r6
   1b77c:	add	r4, pc, r4
   1b780:	mov	r7, lr
   1b784:	bl	12690 <realloc@plt>
   1b788:	mov	lr, r7
   1b78c:	mov	r8, r0
   1b790:	str	r6, [lr]
   1b794:	str	r5, [lr, #4]
   1b798:	str	r8, [r4]
   1b79c:	ldr	r1, [pc, #1640]	; 1be0c <next@@Base+0x29bc>
   1b7a0:	lsr	r0, sl, #24
   1b7a4:	add	r1, pc, r1
   1b7a8:	lsr	r3, sl, #16
   1b7ac:	ldrb	r2, [r1]
   1b7b0:	ldr	r1, [pc, #1624]	; 1be10 <next@@Base+0x29c0>
   1b7b4:	add	r1, pc, r1
   1b7b8:	mov	r7, r1
   1b7bc:	ldr	r5, [r1, #4]
   1b7c0:	ldr	r4, [pc, #1612]	; 1be14 <next@@Base+0x29c4>
   1b7c4:	mov	r1, r8
   1b7c8:	ldr	r4, [pc, r4]
   1b7cc:	strb	sl, [r1, r4]!
   1b7d0:	ldr	ip, [sp, #8]
   1b7d4:	strb	r0, [r1, #3]
   1b7d8:	lsr	r0, sl, #8
   1b7dc:	strb	r0, [r1, #1]
   1b7e0:	adds	r0, r4, #4
   1b7e4:	strb	r3, [r1, #2]
   1b7e8:	adc	r1, r5, #0
   1b7ec:	mov	sl, r7
   1b7f0:	cmp	r2, #1
   1b7f4:	strd	r0, [sl]
   1b7f8:	bne	1b838 <next@@Base+0x23e8>
   1b7fc:	b	1ba88 <next@@Base+0x2638>
   1b800:	mov	r3, r8
   1b804:	lsr	r0, sl, #24
   1b808:	strb	sl, [r3, r4]!
   1b80c:	lsr	r1, sl, #16
   1b810:	lsr	r2, sl, #8
   1b814:	strb	r0, [r3, #3]
   1b818:	strb	r1, [r3, #2]
   1b81c:	strb	r2, [r3, #1]
   1b820:	ldr	sl, [pc, #1488]	; 1bdf8 <next@@Base+0x29a8>
   1b824:	ldr	ip, [sp, #8]
   1b828:	adds	r0, r7, #8
   1b82c:	adc	r1, r6, #0
   1b830:	add	sl, pc, sl
   1b834:	strd	r0, [sl]
   1b838:	mov	r6, r8
   1b83c:	lsr	r2, r9, #24
   1b840:	strb	r9, [r6, r0]!
   1b844:	lsr	r3, r9, #16
   1b848:	strb	r2, [r6, #3]
   1b84c:	adds	r2, r0, #4
   1b850:	lsr	r7, r9, #8
   1b854:	strb	r3, [r6, #2]
   1b858:	adc	r3, r1, #0
   1b85c:	strb	r7, [r6, #1]
   1b860:	strd	r2, [sl]
   1b864:	ldr	r5, [sp]
   1b868:	mov	r6, r8
   1b86c:	adds	r4, r2, #4
   1b870:	lsr	r7, r5, #8
   1b874:	strb	r5, [r6, r2]!
   1b878:	lsr	r0, r5, #24
   1b87c:	lsr	r1, r5, #16
   1b880:	strb	r7, [r6, #1]
   1b884:	adc	r7, r3, #0
   1b888:	strb	r0, [r6, #3]
   1b88c:	strb	r1, [r6, #2]
   1b890:	stm	sl, {r4, r7}
   1b894:	ldr	r0, [sp, #4]
   1b898:	cmp	r0, #0
   1b89c:	beq	1b974 <next@@Base+0x2524>
   1b8a0:	ldr	r0, [pc, #1420]	; 1be34 <next@@Base+0x29e4>
   1b8a4:	ldr	sl, [fp, #8]
   1b8a8:	add	r0, pc, r0
   1b8ac:	ldrb	r0, [r0]
   1b8b0:	cmp	r0, #1
   1b8b4:	bne	1b940 <next@@Base+0x24f0>
   1b8b8:	ldr	r9, [pc, #1400]	; 1be38 <next@@Base+0x29e8>
   1b8bc:	adds	r0, r2, #8
   1b8c0:	adc	r1, r3, #0
   1b8c4:	add	r9, pc, r9
   1b8c8:	ldr	r6, [r9, #4]
   1b8cc:	ldr	r5, [pc, #1384]	; 1be3c <next@@Base+0x29ec>
   1b8d0:	ldr	r5, [pc, r5]
   1b8d4:	subs	r0, r5, r0
   1b8d8:	sbcs	r0, r6, r1
   1b8dc:	bcs	1b940 <next@@Base+0x24f0>
   1b8e0:	mov	r0, #7
   1b8e4:	orr	r0, r0, #131072	; 0x20000
   1b8e8:	adds	r0, r2, r0
   1b8ec:	adc	r1, r3, #0
   1b8f0:	mvn	r2, #0
   1b8f4:	and	r5, r1, r2
   1b8f8:	mov	r1, #16646144	; 0xfe0000
   1b8fc:	orr	r1, r1, #-16777216	; 0xff000000
   1b900:	and	r6, r0, r1
   1b904:	ldr	r4, [pc, #1332]	; 1be40 <next@@Base+0x29f0>
   1b908:	mov	r0, r8
   1b90c:	mov	r1, r6
   1b910:	add	r4, pc, r4
   1b914:	bl	12690 <realloc@plt>
   1b918:	ldr	ip, [sp, #8]
   1b91c:	str	r6, [r9]
   1b920:	str	r5, [r9, #4]
   1b924:	mov	r8, r0
   1b928:	ldr	r0, [pc, #1300]	; 1be44 <next@@Base+0x29f4>
   1b92c:	str	r8, [r4]
   1b930:	add	r0, pc, r0
   1b934:	ldr	r7, [r0, #4]
   1b938:	ldr	r4, [pc, #1288]	; 1be48 <next@@Base+0x29f8>
   1b93c:	ldr	r4, [pc, r4]
   1b940:	mov	r3, r8
   1b944:	lsr	r0, sl, #24
   1b948:	strb	sl, [r3, r4]!
   1b94c:	lsr	r1, sl, #16
   1b950:	lsr	r2, sl, #8
   1b954:	strb	r0, [r3, #3]
   1b958:	strb	r1, [r3, #2]
   1b95c:	strb	r2, [r3, #1]
   1b960:	ldr	sl, [pc, #1252]	; 1be4c <next@@Base+0x29fc>
   1b964:	adds	r4, r4, #4
   1b968:	adc	r7, r7, #0
   1b96c:	add	sl, pc, sl
   1b970:	stm	sl, {r4, r7}
   1b974:	cmp	ip, #0
   1b978:	beq	1bdc0 <next@@Base+0x2970>
   1b97c:	mov	r0, ip
   1b980:	bl	12708 <strlen@plt>
   1b984:	mov	r9, #1
   1b988:	add	r5, r9, r0, lsr #2
   1b98c:	ldr	r0, [pc, #1212]	; 1be50 <next@@Base+0x2a00>
   1b990:	add	r0, pc, r0
   1b994:	ldrb	r0, [r0]
   1b998:	cmp	r0, #1
   1b99c:	bne	1ba40 <next@@Base+0x25f0>
   1b9a0:	ldr	sl, [pc, #1196]	; 1be54 <next@@Base+0x2a04>
   1b9a4:	adds	r0, r4, #4
   1b9a8:	adc	r1, r7, #0
   1b9ac:	add	sl, pc, sl
   1b9b0:	ldr	r2, [sl, #4]
   1b9b4:	ldr	r3, [pc, #1180]	; 1be58 <next@@Base+0x2a08>
   1b9b8:	ldr	r3, [pc, r3]
   1b9bc:	subs	r0, r3, r0
   1b9c0:	sbcs	r0, r2, r1
   1b9c4:	bcs	1bbf4 <next@@Base+0x27a4>
   1b9c8:	mov	r0, #0
   1b9cc:	str	r0, [sp, #4]
   1b9d0:	mov	r0, #7
   1b9d4:	orr	r0, r0, #131072	; 0x20000
   1b9d8:	adds	r0, r4, r0
   1b9dc:	adc	r1, r7, #0
   1b9e0:	subs	r0, r0, #4
   1b9e4:	sbc	r1, r1, #0
   1b9e8:	mvn	r2, #0
   1b9ec:	and	r7, r1, r2
   1b9f0:	mov	r1, #16646144	; 0xfe0000
   1b9f4:	orr	r1, r1, #-16777216	; 0xff000000
   1b9f8:	and	r4, r0, r1
   1b9fc:	ldr	r6, [pc, #1116]	; 1be60 <next@@Base+0x2a10>
   1ba00:	mov	r0, r8
   1ba04:	mov	r1, r4
   1ba08:	add	r6, pc, r6
   1ba0c:	bl	12690 <realloc@plt>
   1ba10:	stm	sl, {r4, r7}
   1ba14:	str	r0, [r6]
   1ba18:	ldr	sl, [pc, #1092]	; 1be64 <next@@Base+0x2a14>
   1ba1c:	mov	r8, r0
   1ba20:	add	sl, pc, sl
   1ba24:	ldr	r7, [sl, #4]
   1ba28:	ldr	r0, [pc, #1080]	; 1be68 <next@@Base+0x2a18>
   1ba2c:	add	r0, pc, r0
   1ba30:	ldrb	r9, [r0]
   1ba34:	ldr	r4, [pc, #1072]	; 1be6c <next@@Base+0x2a1c>
   1ba38:	ldr	r4, [pc, r4]
   1ba3c:	b	1bc04 <next@@Base+0x27b4>
   1ba40:	mov	r0, #0
   1ba44:	str	r0, [sp, #4]
   1ba48:	mov	r9, #0
   1ba4c:	b	1bc04 <next@@Base+0x27b4>
   1ba50:	mov	r3, r8
   1ba54:	lsr	r0, sl, #24
   1ba58:	strb	sl, [r3, r4]!
   1ba5c:	lsr	r1, sl, #16
   1ba60:	lsr	r2, sl, #8
   1ba64:	strb	r0, [r3, #3]
   1ba68:	strb	r1, [r3, #2]
   1ba6c:	strb	r2, [r3, #1]
   1ba70:	ldr	sl, [pc, #908]	; 1be04 <next@@Base+0x29b4>
   1ba74:	adds	r0, r7, #8
   1ba78:	adc	r1, r6, #0
   1ba7c:	add	sl, pc, sl
   1ba80:	ldr	ip, [sp, #8]
   1ba84:	strd	r0, [sl]
   1ba88:	ldr	r7, [lr, #4]
   1ba8c:	ldr	r6, [pc, #900]	; 1be18 <next@@Base+0x29c8>
   1ba90:	adds	r2, r4, #8
   1ba94:	adc	r3, r5, #0
   1ba98:	ldr	r6, [pc, r6]
   1ba9c:	subs	r2, r6, r2
   1baa0:	sbcs	r2, r7, r3
   1baa4:	bcs	1bb48 <next@@Base+0x26f8>
   1baa8:	mov	r0, #7
   1baac:	orr	r0, r0, #131072	; 0x20000
   1bab0:	adds	r0, r4, r0
   1bab4:	adc	r1, r5, #0
   1bab8:	mvn	r2, #0
   1babc:	and	r5, r1, r2
   1bac0:	mov	r1, #16646144	; 0xfe0000
   1bac4:	orr	r1, r1, #-16777216	; 0xff000000
   1bac8:	and	r4, r0, r1
   1bacc:	ldr	r6, [pc, #840]	; 1be1c <next@@Base+0x29cc>
   1bad0:	mov	r0, r8
   1bad4:	mov	r1, r4
   1bad8:	add	r6, pc, r6
   1badc:	mov	r7, lr
   1bae0:	bl	12690 <realloc@plt>
   1bae4:	mov	lr, r7
   1bae8:	str	r0, [r6]
   1baec:	strd	r4, [lr]
   1baf0:	mov	r8, r0
   1baf4:	ldr	ip, [sp, #8]
   1baf8:	ldr	r0, [pc, #800]	; 1be20 <next@@Base+0x29d0>
   1bafc:	ldr	r1, [sl, #4]
   1bb00:	mov	r3, r8
   1bb04:	add	r0, pc, r0
   1bb08:	lsr	r2, r9, #24
   1bb0c:	ldrb	r7, [r0]
   1bb10:	ldr	r0, [pc, #780]	; 1be24 <next@@Base+0x29d4>
   1bb14:	lsr	r6, r9, #16
   1bb18:	ldr	r0, [pc, r0]
   1bb1c:	strb	r9, [r3, r0]!
   1bb20:	strb	r2, [r3, #3]
   1bb24:	lsr	r2, r9, #8
   1bb28:	strb	r2, [r3, #1]
   1bb2c:	adds	r2, r0, #4
   1bb30:	strb	r6, [r3, #2]
   1bb34:	adc	r3, r1, #0
   1bb38:	cmp	r7, #1
   1bb3c:	strd	r2, [sl]
   1bb40:	bne	1b864 <next@@Base+0x2414>
   1bb44:	b	1bb74 <next@@Base+0x2724>
   1bb48:	mov	r6, r8
   1bb4c:	lsr	r2, r9, #24
   1bb50:	strb	r9, [r6, r0]!
   1bb54:	lsr	r3, r9, #16
   1bb58:	strb	r2, [r6, #3]
   1bb5c:	adds	r2, r0, #4
   1bb60:	lsr	r7, r9, #8
   1bb64:	strb	r3, [r6, #2]
   1bb68:	adc	r3, r1, #0
   1bb6c:	strb	r7, [r6, #1]
   1bb70:	strd	r2, [sl]
   1bb74:	ldr	r5, [lr, #4]
   1bb78:	ldr	r4, [pc, #680]	; 1be28 <next@@Base+0x29d8>
   1bb7c:	adds	r7, r0, #8
   1bb80:	adc	r6, r1, #0
   1bb84:	ldr	r4, [pc, r4]
   1bb88:	subs	r7, r4, r7
   1bb8c:	sbcs	r7, r5, r6
   1bb90:	bcs	1b864 <next@@Base+0x2414>
   1bb94:	mov	r2, #7
   1bb98:	orr	r2, r2, #131072	; 0x20000
   1bb9c:	adds	r0, r0, r2
   1bba0:	adc	r1, r1, #0
   1bba4:	mvn	r2, #0
   1bba8:	and	r5, r1, r2
   1bbac:	mov	r1, #16646144	; 0xfe0000
   1bbb0:	orr	r1, r1, #-16777216	; 0xff000000
   1bbb4:	and	r6, r0, r1
   1bbb8:	ldr	r4, [pc, #620]	; 1be2c <next@@Base+0x29dc>
   1bbbc:	mov	r0, r8
   1bbc0:	mov	r1, r6
   1bbc4:	add	r4, pc, r4
   1bbc8:	mov	r7, lr
   1bbcc:	bl	12690 <realloc@plt>
   1bbd0:	ldr	ip, [sp, #8]
   1bbd4:	str	r6, [r7]
   1bbd8:	str	r5, [r7, #4]
   1bbdc:	str	r0, [r4]
   1bbe0:	ldr	r3, [sl, #4]
   1bbe4:	ldr	r2, [pc, #580]	; 1be30 <next@@Base+0x29e0>
   1bbe8:	mov	r8, r0
   1bbec:	ldr	r2, [pc, r2]
   1bbf0:	b	1b864 <next@@Base+0x2414>
   1bbf4:	mov	r0, #0
   1bbf8:	str	r0, [sp, #4]
   1bbfc:	ldr	sl, [pc, #600]	; 1be5c <next@@Base+0x2a0c>
   1bc00:	add	sl, pc, sl
   1bc04:	mov	r3, r8
   1bc08:	ldr	r0, [sp, #8]
   1bc0c:	strb	r5, [r3, r4]!
   1bc10:	adds	r4, r4, #4
   1bc14:	lsr	r6, r5, #24
   1bc18:	lsr	r1, r5, #16
   1bc1c:	lsr	r2, r5, #8
   1bc20:	adc	r5, r7, #0
   1bc24:	strb	r6, [r3, #3]
   1bc28:	strb	r1, [r3, #2]
   1bc2c:	strb	r2, [r3, #1]
   1bc30:	strd	r4, [sl]
   1bc34:	bl	12708 <strlen@plt>
   1bc38:	mov	r7, r0
   1bc3c:	cmp	r9, #0
   1bc40:	beq	1bce0 <next@@Base+0x2890>
   1bc44:	ldr	r6, [pc, #548]	; 1be70 <next@@Base+0x2a20>
   1bc48:	adds	r0, r4, r7
   1bc4c:	adc	r1, r5, #0
   1bc50:	add	r6, pc, r6
   1bc54:	ldr	r2, [r6, #4]
   1bc58:	ldr	r3, [pc, #532]	; 1be74 <next@@Base+0x2a24>
   1bc5c:	ldr	r3, [pc, r3]
   1bc60:	subs	r3, r3, r0
   1bc64:	sbcs	r2, r2, r1
   1bc68:	bcs	1bcd8 <next@@Base+0x2888>
   1bc6c:	mov	r2, #7
   1bc70:	orr	r2, r2, #131072	; 0x20000
   1bc74:	adds	r0, r0, r2
   1bc78:	adc	r1, r1, #0
   1bc7c:	subs	r0, r0, #8
   1bc80:	sbc	r1, r1, #0
   1bc84:	mvn	r2, #0
   1bc88:	and	r5, r1, r2
   1bc8c:	mov	r1, #16646144	; 0xfe0000
   1bc90:	orr	r1, r1, #-16777216	; 0xff000000
   1bc94:	and	r4, r0, r1
   1bc98:	ldr	r9, [pc, #472]	; 1be78 <next@@Base+0x2a28>
   1bc9c:	mov	r0, r8
   1bca0:	mov	r1, r4
   1bca4:	add	r9, pc, r9
   1bca8:	bl	12690 <realloc@plt>
   1bcac:	strd	r4, [r6]
   1bcb0:	str	r0, [r9]
   1bcb4:	mov	r8, r0
   1bcb8:	ldr	r5, [sl, #4]
   1bcbc:	ldr	r0, [pc, #440]	; 1be7c <next@@Base+0x2a2c>
   1bcc0:	add	r0, pc, r0
   1bcc4:	ldrb	r0, [r0]
   1bcc8:	str	r0, [sp, #4]
   1bccc:	ldr	r4, [pc, #428]	; 1be80 <next@@Base+0x2a30>
   1bcd0:	ldr	r4, [pc, r4]
   1bcd4:	b	1bce0 <next@@Base+0x2890>
   1bcd8:	mov	r0, #1
   1bcdc:	str	r0, [sp, #4]
   1bce0:	ldr	r9, [sp, #8]
   1bce4:	add	r0, r8, r4
   1bce8:	mov	r2, r7
   1bcec:	mov	r1, r9
   1bcf0:	bl	12648 <memcpy@plt>
   1bcf4:	adds	r6, r4, r7
   1bcf8:	mov	r0, r9
   1bcfc:	adc	r5, r5, #0
   1bd00:	str	r6, [sl]
   1bd04:	str	r5, [sl, #4]
   1bd08:	bl	12708 <strlen@plt>
   1bd0c:	and	r0, r0, #3
   1bd10:	rsb	r4, r0, #4
   1bd14:	ldr	r0, [sp, #4]
   1bd18:	cmp	r0, #0
   1bd1c:	beq	1bda4 <next@@Base+0x2954>
   1bd20:	ldr	r7, [pc, #348]	; 1be84 <next@@Base+0x2a34>
   1bd24:	adds	r0, r6, r4
   1bd28:	adc	r1, r5, #0
   1bd2c:	add	r7, pc, r7
   1bd30:	ldr	r2, [r7, #4]
   1bd34:	ldr	r3, [pc, #332]	; 1be88 <next@@Base+0x2a38>
   1bd38:	ldr	r3, [pc, r3]
   1bd3c:	subs	r3, r3, r0
   1bd40:	sbcs	r2, r2, r1
   1bd44:	bcs	1bda4 <next@@Base+0x2954>
   1bd48:	mov	r2, #7
   1bd4c:	orr	r2, r2, #131072	; 0x20000
   1bd50:	adds	r0, r0, r2
   1bd54:	adc	r1, r1, #0
   1bd58:	subs	r0, r0, #8
   1bd5c:	sbc	r1, r1, #0
   1bd60:	mvn	r2, #0
   1bd64:	and	r5, r1, r2
   1bd68:	mov	r1, #16646144	; 0xfe0000
   1bd6c:	orr	r1, r1, #-16777216	; 0xff000000
   1bd70:	and	r6, r0, r1
   1bd74:	ldr	r9, [pc, #272]	; 1be8c <next@@Base+0x2a3c>
   1bd78:	mov	r0, r8
   1bd7c:	mov	r1, r6
   1bd80:	add	r9, pc, r9
   1bd84:	bl	12690 <realloc@plt>
   1bd88:	str	r6, [r7]
   1bd8c:	str	r5, [r7, #4]
   1bd90:	str	r0, [r9]
   1bd94:	ldr	r5, [sl, #4]
   1bd98:	ldr	r6, [pc, #240]	; 1be90 <next@@Base+0x2a40>
   1bd9c:	mov	r8, r0
   1bda0:	ldr	r6, [pc, r6]
   1bda4:	add	r0, r8, r6
   1bda8:	mov	r1, #0
   1bdac:	mov	r2, r4
   1bdb0:	bl	12750 <memset@plt>
   1bdb4:	adds	r0, r6, r4
   1bdb8:	adc	r1, r5, #0
   1bdbc:	strd	r0, [sl]
   1bdc0:	sub	sp, fp, #28
   1bdc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdc8:	andeq	r6, r1, r8, lsl #2
   1bdcc:	andeq	r6, r1, ip, ror #1
   1bdd0:	andeq	r6, r1, r8, ror #1
   1bdd4:	ldrdeq	r6, [r1], -ip
   1bdd8:	ldrdeq	r6, [r1], -r8
   1bddc:	strheq	r6, [r1], -ip
   1bde0:	andeq	r6, r1, r0, ror r0
   1bde4:	andeq	r6, r1, ip, rrx
   1bde8:	andeq	r6, r1, r8, asr r0
   1bdec:	andeq	r6, r1, r0, asr r0
   1bdf0:	andeq	r6, r1, r8, lsr r0
   1bdf4:	strdeq	r5, [r1], -r0
   1bdf8:	andeq	r5, r1, r8, ror #29
   1bdfc:	andeq	r5, r1, r0, ror #31
   1be00:	ldrdeq	r5, [r1], -r4
   1be04:	muleq	r1, ip, ip
   1be08:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1be0c:	andeq	r5, r1, r0, ror #30
   1be10:	andeq	r5, r1, r4, ror #30
   1be14:	andeq	r5, r1, r0, asr pc
   1be18:	andeq	r5, r1, r8, ror ip
   1be1c:	andeq	r5, r1, r4, lsr ip
   1be20:	andeq	r5, r1, r0, lsl #24
   1be24:	andeq	r5, r1, r0, lsl #24
   1be28:	andeq	r5, r1, ip, lsl #23
   1be2c:	andeq	r5, r1, r8, asr #22
   1be30:	andeq	r5, r1, ip, lsr #22
   1be34:	andeq	r5, r1, ip, asr lr
   1be38:	andeq	r5, r1, ip, asr #28
   1be3c:	andeq	r5, r1, r0, asr #28
   1be40:	strdeq	r5, [r1], -ip
   1be44:	andeq	r5, r1, r8, ror #27
   1be48:	ldrdeq	r5, [r1], -ip
   1be4c:	andeq	r5, r1, ip, lsr #27
   1be50:	andeq	r5, r1, r4, ror sp
   1be54:	andeq	r5, r1, r4, ror #26
   1be58:	andeq	r5, r1, r8, asr sp
   1be5c:	andeq	r5, r1, r8, lsl fp
   1be60:	andeq	r5, r1, r4, lsl #26
   1be64:	strdeq	r5, [r1], -r8
   1be68:	ldrdeq	r5, [r1], -r8
   1be6c:	andeq	r5, r1, r0, ror #25
   1be70:	andeq	r5, r1, r0, asr #21
   1be74:			; <UNDEFINED> instruction: 0x00015ab4
   1be78:	andeq	r5, r1, r8, ror #20
   1be7c:	andeq	r5, r1, r4, asr #20
   1be80:	andeq	r5, r1, r8, asr #20
   1be84:	andeq	r5, r1, r4, ror #19
   1be88:	ldrdeq	r5, [r1], -r8
   1be8c:	andeq	r5, r1, ip, lsl #19
   1be90:	andeq	r5, r1, r8, ror r9
   1be94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be98:	add	fp, sp, #28
   1be9c:	sub	sp, sp, #28
   1bea0:	mov	ip, r0
   1bea4:	ldr	r0, [pc, #1728]	; 1c56c <next@@Base+0x311c>
   1bea8:	ldr	r0, [pc, r0]
   1beac:	cmp	r0, #0
   1beb0:	beq	1bfcc <next@@Base+0x2b7c>
   1beb4:	ldr	r2, [pc, #1716]	; 1c570 <next@@Base+0x3120>
   1beb8:	mov	sl, r1
   1bebc:	add	r2, pc, r2
   1bec0:	ldr	r3, [r2, #4]
   1bec4:	ldr	r4, [pc, #1704]	; 1c574 <next@@Base+0x3124>
   1bec8:	ldr	r4, [pc, r4]
   1becc:	ldr	r6, [pc, #1700]	; 1c578 <next@@Base+0x3128>
   1bed0:	add	r6, pc, r6
   1bed4:	ldrb	r0, [r6]
   1bed8:	cmp	r0, #0
   1bedc:	beq	1bfd4 <next@@Base+0x2b84>
   1bee0:	ldr	r8, [pc, #1720]	; 1c5a0 <next@@Base+0x3150>
   1bee4:	mov	r5, #10551296	; 0xa10000
   1bee8:	adds	r9, r4, #4
   1beec:	add	r8, pc, r8
   1bef0:	adc	r2, r3, #0
   1bef4:	ldr	r0, [r8, #4]
   1bef8:	ldr	r1, [pc, #1700]	; 1c5a4 <next@@Base+0x3154>
   1befc:	orr	r5, r5, #16777216	; 0x1000000
   1bf00:	ldr	r1, [pc, r1]
   1bf04:	subs	r1, r1, r9
   1bf08:	sbcs	r0, r0, r2
   1bf0c:	bcs	1c0e4 <next@@Base+0x2c94>
   1bf10:	mov	r0, #3
   1bf14:	orr	r0, r0, #131072	; 0x20000
   1bf18:	adds	r0, r4, r0
   1bf1c:	adc	r1, r3, #0
   1bf20:	mvn	r2, #0
   1bf24:	and	r9, r1, r2
   1bf28:	mov	r1, #16646144	; 0xfe0000
   1bf2c:	orr	r1, r1, #-16777216	; 0xff000000
   1bf30:	and	r4, r0, r1
   1bf34:	ldr	r0, [pc, #1652]	; 1c5b0 <next@@Base+0x3160>
   1bf38:	mov	r1, r4
   1bf3c:	mov	r7, ip
   1bf40:	ldr	r0, [pc, r0]
   1bf44:	bl	12690 <realloc@plt>
   1bf48:	ldr	ip, [pc, #1636]	; 1c5b4 <next@@Base+0x3164>
   1bf4c:	ldr	lr, [pc, #1636]	; 1c5b8 <next@@Base+0x3168>
   1bf50:	stm	r8, {r4, r9}
   1bf54:	ldr	r1, [pc, #1632]	; 1c5bc <next@@Base+0x316c>
   1bf58:	add	ip, pc, ip
   1bf5c:	add	lr, pc, lr
   1bf60:	add	r1, pc, r1
   1bf64:	mov	r2, r0
   1bf68:	str	r2, [r1]
   1bf6c:	mov	r6, ip
   1bf70:	ldrb	ip, [ip]
   1bf74:	ldr	r3, [lr, #4]
   1bf78:	ldr	r4, [pc, #1600]	; 1c5c0 <next@@Base+0x3170>
   1bf7c:	lsr	r0, r5, #24
   1bf80:	mov	r1, r8
   1bf84:	ldr	r4, [pc, r4]
   1bf88:	str	r2, [sp, #20]
   1bf8c:	lsl	r8, r7, #1
   1bf90:	strb	r5, [r2, r4]!
   1bf94:	adds	r9, r4, #4
   1bf98:	strb	r0, [r2, #3]
   1bf9c:	lsr	r0, r5, #16
   1bfa0:	strb	r0, [r2, #2]
   1bfa4:	lsr	r0, r5, #8
   1bfa8:	strb	r0, [r2, #1]
   1bfac:	adc	r5, r3, #0
   1bfb0:	mov	r0, #0
   1bfb4:	cmp	ip, #1
   1bfb8:	str	r3, [sp, #16]
   1bfbc:	str	r9, [lr]
   1bfc0:	str	r5, [lr, #4]
   1bfc4:	beq	1c138 <next@@Base+0x2ce8>
   1bfc8:	b	1c288 <next@@Base+0x2e38>
   1bfcc:	sub	sp, fp, #28
   1bfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfd4:	ldr	r0, [pc, #1440]	; 1c57c <next@@Base+0x312c>
   1bfd8:	mov	r7, r3
   1bfdc:	adds	r9, r4, #4
   1bfe0:	mov	lr, r2
   1bfe4:	ldr	r0, [pc, r0]
   1bfe8:	str	r0, [sp, #20]
   1bfec:	ldrb	r1, [r0, r4]!
   1bff0:	str	r7, [sp, #16]
   1bff4:	ldrb	r5, [r0, #1]
   1bff8:	ldrb	r3, [r0, #2]
   1bffc:	ldrb	r0, [r0, #3]
   1c000:	orr	r1, r1, r5, lsl #8
   1c004:	orr	r1, r1, r3, lsl #16
   1c008:	orr	r3, r1, r0, lsl #24
   1c00c:	adc	r5, r7, #0
   1c010:	mov	r7, #0
   1c014:	cmn	r3, #1
   1c018:	str	r9, [r2]
   1c01c:	str	r5, [r2, #4]
   1c020:	beq	1c1e4 <next@@Base+0x2d94>
   1c024:	mov	r0, #10551296	; 0xa10000
   1c028:	orr	r0, r0, #16777216	; 0x1000000
   1c02c:	cmp	r3, r0
   1c030:	bne	1c1f0 <next@@Base+0x2da0>
   1c034:	str	r5, [sp, #8]
   1c038:	ldr	r0, [sp, #20]
   1c03c:	str	r4, [sp, #4]
   1c040:	adds	r5, r4, #8
   1c044:	ldr	r3, [r0, r9]
   1c048:	ldr	r0, [sp, #16]
   1c04c:	mov	r1, r9
   1c050:	adc	r9, r0, #0
   1c054:	cmn	r3, #1
   1c058:	stm	lr, {r5, r9}
   1c05c:	beq	1c1fc <next@@Base+0x2dac>
   1c060:	lsr	r0, r3, #1
   1c064:	mov	r7, ip
   1c068:	cmp	r0, ip
   1c06c:	bne	1c1fc <next@@Base+0x2dac>
   1c070:	lsl	r0, r7, #3
   1c074:	mov	r4, r1
   1c078:	bl	126c0 <malloc@plt>
   1c07c:	mov	r1, r0
   1c080:	cmp	r7, #0
   1c084:	beq	1c224 <next@@Base+0x2dd4>
   1c088:	mov	r0, r7
   1c08c:	str	r7, [sp, #24]
   1c090:	str	r1, [sp, #12]
   1c094:	ldr	r2, [sp, #20]
   1c098:	ldr	r3, [r2, r5]!
   1c09c:	adds	r5, r5, #8
   1c0a0:	ldr	r2, [r2, #4]
   1c0a4:	str	r3, [r1]
   1c0a8:	adc	r9, r9, #0
   1c0ac:	str	r2, [r1, #4]
   1c0b0:	subs	r0, r0, #1
   1c0b4:	add	r1, r1, #8
   1c0b8:	bne	1c094 <next@@Base+0x2c44>
   1c0bc:	ldr	lr, [pc, #1236]	; 1c598 <next@@Base+0x3148>
   1c0c0:	add	lr, pc, lr
   1c0c4:	mov	r0, lr
   1c0c8:	stm	r0, {r5, r9}
   1c0cc:	ldr	ip, [pc, #1224]	; 1c59c <next@@Base+0x314c>
   1c0d0:	ldr	r0, [sp, #12]
   1c0d4:	add	ip, pc, ip
   1c0d8:	mov	r6, ip
   1c0dc:	ldr	ip, [sp, #24]
   1c0e0:	b	1c240 <next@@Base+0x2df0>
   1c0e4:	str	r3, [sp, #16]
   1c0e8:	ldr	r3, [pc, #1208]	; 1c5a8 <next@@Base+0x3158>
   1c0ec:	mov	lr, r5
   1c0f0:	mov	r7, ip
   1c0f4:	lsr	ip, r5, #16
   1c0f8:	ldr	r3, [pc, r3]
   1c0fc:	lsr	r1, r5, #8
   1c100:	str	r3, [sp, #20]
   1c104:	strb	lr, [r3, r4]!
   1c108:	lsr	r0, lr, #24
   1c10c:	strb	r1, [r3, #1]
   1c110:	strb	r0, [r3, #3]
   1c114:	strb	ip, [r3, #2]
   1c118:	ldr	lr, [pc, #1164]	; 1c5ac <next@@Base+0x315c>
   1c11c:	lsl	r5, r7, #1
   1c120:	add	lr, pc, lr
   1c124:	mov	r1, r8
   1c128:	mov	r8, r5
   1c12c:	str	r9, [lr]
   1c130:	str	r2, [lr, #4]
   1c134:	mov	r5, r2
   1c138:	str	r8, [sp, #24]
   1c13c:	mov	r8, r1
   1c140:	ldr	r0, [sp, #16]
   1c144:	ldr	r2, [r8, #4]
   1c148:	ldr	r3, [pc, #1140]	; 1c5c4 <next@@Base+0x3174>
   1c14c:	adds	ip, r4, #8
   1c150:	adc	r1, r0, #0
   1c154:	mov	r0, #0
   1c158:	ldr	r3, [pc, r3]
   1c15c:	subs	r3, r3, ip
   1c160:	sbcs	r1, r2, r1
   1c164:	bcs	1c1dc <next@@Base+0x2d8c>
   1c168:	ldr	r5, [pc, #1112]	; 1c5c8 <next@@Base+0x3178>
   1c16c:	mov	r0, #3
   1c170:	ldr	r1, [sp, #16]
   1c174:	orr	r0, r0, #131072	; 0x20000
   1c178:	adds	r0, r4, r0
   1c17c:	adc	r1, r1, #0
   1c180:	adds	r0, r0, #4
   1c184:	adc	r1, r1, #0
   1c188:	mvn	r2, #0
   1c18c:	and	r9, r1, r2
   1c190:	mov	r1, #16646144	; 0xfe0000
   1c194:	orr	r1, r1, #-16777216	; 0xff000000
   1c198:	and	r4, r0, r1
   1c19c:	ldr	r0, [sp, #20]
   1c1a0:	mov	r1, r4
   1c1a4:	add	r5, pc, r5
   1c1a8:	bl	12690 <realloc@plt>
   1c1ac:	ldr	ip, [pc, #1048]	; 1c5cc <next@@Base+0x317c>
   1c1b0:	ldr	lr, [pc, #1048]	; 1c5d0 <next@@Base+0x3180>
   1c1b4:	stm	r8, {r4, r9}
   1c1b8:	add	lr, pc, lr
   1c1bc:	str	r0, [r5]
   1c1c0:	str	r0, [sp, #20]
   1c1c4:	ldr	r5, [lr, #4]
   1c1c8:	ldr	r9, [pc, #1028]	; 1c5d4 <next@@Base+0x3184>
   1c1cc:	add	ip, pc, ip
   1c1d0:	mov	r6, ip
   1c1d4:	mov	r0, #0
   1c1d8:	ldr	r9, [pc, r9]
   1c1dc:	ldr	r8, [sp, #24]
   1c1e0:	b	1c288 <next@@Base+0x2e38>
   1c1e4:	ldr	r1, [sp, #16]
   1c1e8:	mov	r0, #0
   1c1ec:	b	1c254 <next@@Base+0x2e04>
   1c1f0:	ldr	r1, [pc, #904]	; 1c580 <next@@Base+0x3130>
   1c1f4:	add	r1, pc, r1
   1c1f8:	b	1c204 <next@@Base+0x2db4>
   1c1fc:	ldr	r1, [pc, #904]	; 1c58c <next@@Base+0x313c>
   1c200:	add	r1, pc, r1
   1c204:	ldr	r0, [pc, #888]	; 1c584 <next@@Base+0x3134>
   1c208:	ldr	r0, [pc, r0]
   1c20c:	ldr	r0, [r0]
   1c210:	ldr	r2, [pc, #880]	; 1c588 <next@@Base+0x3138>
   1c214:	ldr	r2, [pc, r2]
   1c218:	sub	sp, fp, #28
   1c21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c220:	b	12720 <fprintf@plt>
   1c224:	ldr	lr, [pc, #868]	; 1c590 <next@@Base+0x3140>
   1c228:	ldr	ip, [pc, #868]	; 1c594 <next@@Base+0x3144>
   1c22c:	mov	r0, r1
   1c230:	add	lr, pc, lr
   1c234:	add	ip, pc, ip
   1c238:	mov	r6, ip
   1c23c:	mov	ip, r7
   1c240:	mov	r9, r4
   1c244:	ldr	r5, [sp, #8]
   1c248:	ldr	r4, [sp, #4]
   1c24c:	ldr	r1, [sp, #16]
   1c250:	mov	r7, #0
   1c254:	str	r4, [lr]
   1c258:	str	r1, [lr, #4]
   1c25c:	ldr	r2, [sp, #20]
   1c260:	mov	r1, #1
   1c264:	lsl	r8, ip, #1
   1c268:	strb	r7, [r2, r4]!
   1c26c:	strb	r1, [r2, #3]
   1c270:	mov	r1, #161	; 0xa1
   1c274:	strb	r7, [r2, #1]
   1c278:	strb	r1, [r2, #2]
   1c27c:	str	r9, [lr]
   1c280:	str	r5, [lr, #4]
   1c284:	mov	r7, ip
   1c288:	ldr	r3, [sp, #20]
   1c28c:	lsr	r1, r8, #16
   1c290:	mov	ip, r3
   1c294:	strb	r8, [r3, r9]!
   1c298:	lsr	r4, r8, #24
   1c29c:	lsr	r2, r8, #8
   1c2a0:	adds	r8, r9, #4
   1c2a4:	strb	r1, [r3, #2]
   1c2a8:	adc	r1, r5, #0
   1c2ac:	cmp	r7, #0
   1c2b0:	strb	r4, [r3, #3]
   1c2b4:	strb	r2, [r3, #1]
   1c2b8:	str	r8, [lr]
   1c2bc:	str	r1, [lr, #4]
   1c2c0:	str	r7, [sp, #24]
   1c2c4:	beq	1c560 <next@@Base+0x3110>
   1c2c8:	ldr	r7, [pc, #776]	; 1c5d8 <next@@Base+0x3188>
   1c2cc:	mov	r4, lr
   1c2d0:	mov	r2, r0
   1c2d4:	add	r7, pc, r7
   1c2d8:	str	r0, [sp, #12]
   1c2dc:	cmp	r0, #0
   1c2e0:	mov	r0, r4
   1c2e4:	str	r2, [sp, #16]
   1c2e8:	beq	1c2f4 <next@@Base+0x2ea4>
   1c2ec:	ldrd	r2, [r2]
   1c2f0:	b	1c2fc <next@@Base+0x2eac>
   1c2f4:	mov	r2, #0
   1c2f8:	mov	r3, #0
   1c2fc:	ldrd	r4, [sl]
   1c300:	adds	r4, r4, r2
   1c304:	adc	r5, r5, r3
   1c308:	strd	r4, [sl]
   1c30c:	ldrb	r2, [r6]
   1c310:	str	sl, [sp, #20]
   1c314:	cmp	r2, #0
   1c318:	beq	1c3e4 <next@@Base+0x2f94>
   1c31c:	ldr	r3, [r7, #4]
   1c320:	ldr	r6, [pc, #692]	; 1c5dc <next@@Base+0x318c>
   1c324:	adds	r2, r8, #4
   1c328:	adc	r9, r1, #0
   1c32c:	ldr	r6, [pc, r6]
   1c330:	subs	r2, r6, r2
   1c334:	sbcs	r2, r3, r9
   1c338:	bcs	1c420 <next@@Base+0x2fd0>
   1c33c:	mov	r2, #3
   1c340:	orr	r2, r2, #131072	; 0x20000
   1c344:	adds	r0, r8, r2
   1c348:	adc	r1, r1, #0
   1c34c:	mvn	r2, #0
   1c350:	and	r8, r1, r2
   1c354:	mov	r1, #16646144	; 0xfe0000
   1c358:	orr	r1, r1, #-16777216	; 0xff000000
   1c35c:	and	r6, r0, r1
   1c360:	mov	r0, ip
   1c364:	mov	r1, r6
   1c368:	bl	12690 <realloc@plt>
   1c36c:	ldr	ip, [pc, #620]	; 1c5e0 <next@@Base+0x3190>
   1c370:	ldr	lr, [pc, #620]	; 1c5e4 <next@@Base+0x3194>
   1c374:	stm	r7, {r6, r8}
   1c378:	mov	r3, r0
   1c37c:	ldr	r0, [pc, #612]	; 1c5e8 <next@@Base+0x3198>
   1c380:	add	lr, pc, lr
   1c384:	mov	r9, lr
   1c388:	add	r0, pc, r0
   1c38c:	add	ip, pc, ip
   1c390:	str	r3, [r0]
   1c394:	mov	lr, ip
   1c398:	ldrb	ip, [ip]
   1c39c:	ldr	r1, [r9, #4]
   1c3a0:	ldr	r8, [pc, #580]	; 1c5ec <next@@Base+0x319c>
   1c3a4:	mov	r7, r3
   1c3a8:	lsr	r2, r4, #24
   1c3ac:	ldr	r8, [pc, r8]
   1c3b0:	lsr	r6, r4, #16
   1c3b4:	strb	r4, [r7, r8]!
   1c3b8:	strb	r2, [r7, #3]
   1c3bc:	lsr	r2, r4, #8
   1c3c0:	strb	r2, [r7, #1]
   1c3c4:	adds	r2, r8, #4
   1c3c8:	mov	r4, r9
   1c3cc:	adc	r9, r1, #0
   1c3d0:	cmp	ip, #1
   1c3d4:	strb	r6, [r7, #2]
   1c3d8:	stm	r4, {r2, r9}
   1c3dc:	beq	1c454 <next@@Base+0x3004>
   1c3e0:	b	1c500 <next@@Base+0x30b0>
   1c3e4:	mov	r7, ip
   1c3e8:	lsr	r2, r4, #24
   1c3ec:	strb	r4, [r7, r8]!
   1c3f0:	lsr	r9, r4, #16
   1c3f4:	strb	r2, [r7, #3]
   1c3f8:	adds	r2, r8, #4
   1c3fc:	mov	lr, r6
   1c400:	lsr	r6, r4, #8
   1c404:	strb	r9, [r7, #2]
   1c408:	adc	r9, r1, #0
   1c40c:	mov	r4, r0
   1c410:	strb	r6, [r7, #1]
   1c414:	mov	r3, ip
   1c418:	stm	r4, {r2, r9}
   1c41c:	b	1c500 <next@@Base+0x30b0>
   1c420:	mov	r6, ip
   1c424:	lsr	r2, r4, #24
   1c428:	strb	r4, [r6, r8]!
   1c42c:	lsr	r9, r4, #16
   1c430:	strb	r2, [r6, #3]
   1c434:	adds	r2, r8, #4
   1c438:	lsr	r7, r4, #8
   1c43c:	strb	r9, [r6, #2]
   1c440:	adc	r9, r1, #0
   1c444:	mov	r4, r0
   1c448:	strb	r7, [r6, #1]
   1c44c:	mov	r3, ip
   1c450:	stm	r4, {r2, r9}
   1c454:	ldr	lr, [pc, #404]	; 1c5f0 <next@@Base+0x31a0>
   1c458:	mov	r0, r4
   1c45c:	adds	r7, r8, #8
   1c460:	add	lr, pc, lr
   1c464:	adc	ip, r1, #0
   1c468:	ldr	r4, [lr, #4]
   1c46c:	ldr	r6, [pc, #384]	; 1c5f4 <next@@Base+0x31a4>
   1c470:	ldr	r6, [pc, r6]
   1c474:	subs	r7, r6, r7
   1c478:	sbcs	r7, r4, ip
   1c47c:	bcs	1c4f4 <next@@Base+0x30a4>
   1c480:	mov	r2, #3
   1c484:	orr	r2, r2, #131072	; 0x20000
   1c488:	adds	r0, r8, r2
   1c48c:	adc	r1, r1, #0
   1c490:	adds	r0, r0, #4
   1c494:	adc	r1, r1, #0
   1c498:	mvn	r2, #0
   1c49c:	and	r7, r1, r2
   1c4a0:	mov	r1, #16646144	; 0xfe0000
   1c4a4:	orr	r1, r1, #-16777216	; 0xff000000
   1c4a8:	and	r6, r0, r1
   1c4ac:	mov	r0, r3
   1c4b0:	mov	r1, r6
   1c4b4:	mov	r8, lr
   1c4b8:	bl	12690 <realloc@plt>
   1c4bc:	ldr	lr, [pc, #312]	; 1c5fc <next@@Base+0x31ac>
   1c4c0:	strd	r6, [r8]
   1c4c4:	mov	r3, r0
   1c4c8:	add	lr, pc, lr
   1c4cc:	mov	r4, lr
   1c4d0:	ldr	r9, [lr, #4]
   1c4d4:	ldr	r0, [pc, #292]	; 1c600 <next@@Base+0x31b0>
   1c4d8:	add	r0, pc, r0
   1c4dc:	str	r3, [r0]
   1c4e0:	ldr	r2, [pc, #284]	; 1c604 <next@@Base+0x31b4>
   1c4e4:	ldr	r2, [pc, r2]
   1c4e8:	ldr	lr, [pc, #280]	; 1c608 <next@@Base+0x31b8>
   1c4ec:	add	lr, pc, lr
   1c4f0:	b	1c500 <next@@Base+0x30b0>
   1c4f4:	ldr	lr, [pc, #252]	; 1c5f8 <next@@Base+0x31a8>
   1c4f8:	mov	r4, r0
   1c4fc:	add	lr, pc, lr
   1c500:	mov	ip, r3
   1c504:	lsr	r1, r5, #16
   1c508:	strb	r5, [r3, r2]!
   1c50c:	lsr	r0, r5, #24
   1c510:	lsr	r7, r5, #8
   1c514:	adds	r8, r2, #4
   1c518:	strb	r1, [r3, #2]
   1c51c:	adc	r1, r9, #0
   1c520:	strb	r0, [r3, #3]
   1c524:	strb	r7, [r3, #1]
   1c528:	str	r8, [r4]
   1c52c:	str	r1, [r4, #4]
   1c530:	ldr	r0, [sp, #24]
   1c534:	mov	r6, lr
   1c538:	subs	r0, r0, #1
   1c53c:	str	r0, [sp, #24]
   1c540:	ldr	sl, [sp, #20]
   1c544:	ldr	r2, [sp, #16]
   1c548:	ldr	r0, [sp, #12]
   1c54c:	ldr	r7, [pc, #184]	; 1c60c <next@@Base+0x31bc>
   1c550:	add	sl, sl, #8
   1c554:	add	r2, r2, #8
   1c558:	add	r7, pc, r7
   1c55c:	bne	1c2dc <next@@Base+0x2e8c>
   1c560:	sub	sp, fp, #28
   1c564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c568:	b	12630 <free@plt>
   1c56c:	andeq	r5, r1, r0, ror #16
   1c570:	andeq	r5, r1, ip, asr r8
   1c574:	andeq	r5, r1, r0, asr r8
   1c578:	andeq	r5, r1, r4, lsr r8
   1c57c:	andeq	r5, r1, r8, lsr #14
   1c580:	andeq	r3, r0, ip, asr r4
   1c584:	andeq	r3, r1, r8, lsr #29
   1c588:	andeq	r5, r1, ip, ror #9
   1c58c:	muleq	r0, sl, r4
   1c590:	andeq	r5, r1, r8, ror #9
   1c594:	ldrdeq	r5, [r1], -r0
   1c598:	andeq	r5, r1, r8, asr r6
   1c59c:	andeq	r5, r1, r0, lsr r6
   1c5a0:	andeq	r5, r1, r4, lsr #16
   1c5a4:	andeq	r5, r1, r0, lsl r8
   1c5a8:	andeq	r5, r1, r4, lsl r6
   1c5ac:	strdeq	r5, [r1], -r8
   1c5b0:	andeq	r5, r1, ip, asr #15
   1c5b4:	andeq	r5, r1, ip, lsr #15
   1c5b8:			; <UNDEFINED> instruction: 0x000157bc
   1c5bc:	andeq	r5, r1, ip, lsr #15
   1c5c0:	muleq	r1, r4, r7
   1c5c4:			; <UNDEFINED> instruction: 0x000155b8
   1c5c8:	andeq	r5, r1, r8, ror #10
   1c5cc:	andeq	r5, r1, r8, lsr r5
   1c5d0:	andeq	r5, r1, r0, ror #10
   1c5d4:	andeq	r5, r1, r0, asr #10
   1c5d8:	andeq	r5, r1, ip, lsr r4
   1c5dc:	andeq	r5, r1, r4, ror #7
   1c5e0:	andeq	r5, r1, r8, ror r3
   1c5e4:	muleq	r1, r8, r3
   1c5e8:	andeq	r5, r1, r4, lsl #7
   1c5ec:	andeq	r5, r1, ip, ror #6
   1c5f0:			; <UNDEFINED> instruction: 0x000152b0
   1c5f4:	andeq	r5, r1, r0, lsr #5
   1c5f8:	andeq	r5, r1, r8, lsl #4
   1c5fc:	andeq	r5, r1, r0, asr r2
   1c600:	andeq	r5, r1, r4, lsr r2
   1c604:	andeq	r5, r1, r4, lsr r2
   1c608:	andeq	r5, r1, r8, lsl r2
   1c60c:			; <UNDEFINED> instruction: 0x000151b8
   1c610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c614:	add	fp, sp, #28
   1c618:	sub	sp, sp, #4
   1c61c:	ldr	r0, [pc, #3180]	; 1d290 <next@@Base+0x3e40>
   1c620:	ldr	r0, [pc, r0]
   1c624:	cmp	r0, #0
   1c628:	beq	1cc84 <next@@Base+0x3834>
   1c62c:	ldr	sl, [pc, #3168]	; 1d294 <next@@Base+0x3e44>
   1c630:	add	sl, pc, sl
   1c634:	ldr	r6, [sl, #4]
   1c638:	ldr	r5, [pc, #3160]	; 1d298 <next@@Base+0x3e48>
   1c63c:	ldr	r5, [pc, r5]
   1c640:	ldr	r8, [pc, #3156]	; 1d29c <next@@Base+0x3e4c>
   1c644:	add	r8, pc, r8
   1c648:	ldrb	r0, [r8]
   1c64c:	cmp	r0, #0
   1c650:	beq	1c714 <next@@Base+0x32c4>
   1c654:	ldr	r9, [pc, #3164]	; 1d2b8 <next@@Base+0x3e68>
   1c658:	adds	r2, r5, #4
   1c65c:	adc	ip, r6, #0
   1c660:	add	r9, pc, r9
   1c664:	ldr	r0, [r9, #4]
   1c668:	ldr	r3, [pc, #3148]	; 1d2bc <next@@Base+0x3e6c>
   1c66c:	ldr	r3, [pc, r3]
   1c670:	subs	r3, r3, r2
   1c674:	sbcs	r0, r0, ip
   1c678:	bcs	1c768 <next@@Base+0x3318>
   1c67c:	mov	r0, #7
   1c680:	orr	r0, r0, #131072	; 0x20000
   1c684:	adds	r0, r5, r0
   1c688:	adc	r1, r6, #0
   1c68c:	subs	r0, r0, #4
   1c690:	sbc	r1, r1, #0
   1c694:	mvn	r2, #0
   1c698:	and	r5, r1, r2
   1c69c:	mov	r1, #16646144	; 0xfe0000
   1c6a0:	orr	r1, r1, #-16777216	; 0xff000000
   1c6a4:	ldr	r4, [pc, #3096]	; 1d2c4 <next@@Base+0x3e74>
   1c6a8:	and	r6, r0, r1
   1c6ac:	ldr	r0, [pc, #3092]	; 1d2c8 <next@@Base+0x3e78>
   1c6b0:	mov	r1, r6
   1c6b4:	add	r4, pc, r4
   1c6b8:	ldr	r0, [pc, r0]
   1c6bc:	bl	12690 <realloc@plt>
   1c6c0:	str	r6, [r9]
   1c6c4:	str	r5, [r9, #4]
   1c6c8:	str	r0, [r4]
   1c6cc:	ldrb	r3, [r8]
   1c6d0:	ldr	r6, [sl, #4]
   1c6d4:	ldr	r5, [pc, #3056]	; 1d2cc <next@@Base+0x3e7c>
   1c6d8:	mov	r2, r0
   1c6dc:	mov	r1, #0
   1c6e0:	mov	r7, #161	; 0xa1
   1c6e4:	ldr	r5, [pc, r5]
   1c6e8:	strb	r1, [r2, r5]!
   1c6ec:	strb	r7, [r2, #3]
   1c6f0:	strb	r1, [r2, #2]
   1c6f4:	strb	r1, [r2, #1]
   1c6f8:	adds	r2, r5, #4
   1c6fc:	adc	ip, r6, #0
   1c700:	mov	r7, #1
   1c704:	cmp	r3, #1
   1c708:	stm	sl, {r2, ip}
   1c70c:	beq	1c790 <next@@Base+0x3340>
   1c710:	b	1c968 <next@@Base+0x3518>
   1c714:	ldr	r0, [pc, #2948]	; 1d2a0 <next@@Base+0x3e50>
   1c718:	ldr	r0, [pc, r0]
   1c71c:	mov	r1, r0
   1c720:	ldrb	r2, [r1, r5]!
   1c724:	ldrb	r3, [r1, #1]
   1c728:	ldrb	r7, [r1, #2]
   1c72c:	ldrb	r1, [r1, #3]
   1c730:	orr	r2, r2, r3, lsl #8
   1c734:	orr	r2, r2, r7, lsl #16
   1c738:	orr	r3, r2, r1, lsl #24
   1c73c:	adds	r2, r5, #4
   1c740:	adc	ip, r6, #0
   1c744:	cmp	r3, #-1593835520	; 0xa1000000
   1c748:	stm	sl, {r2, ip}
   1c74c:	beq	1c908 <next@@Base+0x34b8>
   1c750:	mov	r7, #1
   1c754:	cmn	r3, #1
   1c758:	beq	1c948 <next@@Base+0x34f8>
   1c75c:	ldr	r1, [pc, #2880]	; 1d2a4 <next@@Base+0x3e54>
   1c760:	add	r1, pc, r1
   1c764:	b	1d048 <next@@Base+0x3bf8>
   1c768:	ldr	r0, [pc, #2896]	; 1d2c0 <next@@Base+0x3e70>
   1c76c:	mov	r3, #0
   1c770:	mov	r4, #161	; 0xa1
   1c774:	ldr	r0, [pc, r0]
   1c778:	mov	r7, r0
   1c77c:	strb	r3, [r7, r5]!
   1c780:	strb	r4, [r7, #3]
   1c784:	strb	r3, [r7, #2]
   1c788:	strb	r3, [r7, #1]
   1c78c:	stm	sl, {r2, ip}
   1c790:	ldr	r4, [r9, #4]
   1c794:	ldr	r1, [pc, #2868]	; 1d2d0 <next@@Base+0x3e80>
   1c798:	adds	r3, r5, #8
   1c79c:	adc	r7, r6, #0
   1c7a0:	ldr	r1, [pc, r1]
   1c7a4:	subs	r1, r1, r3
   1c7a8:	sbcs	r1, r4, r7
   1c7ac:	bcs	1c838 <next@@Base+0x33e8>
   1c7b0:	mov	r1, #7
   1c7b4:	orr	r1, r1, #131072	; 0x20000
   1c7b8:	adds	r1, r5, r1
   1c7bc:	adc	r2, r6, #0
   1c7c0:	mvn	r3, #0
   1c7c4:	and	r5, r2, r3
   1c7c8:	mov	r2, #16646144	; 0xfe0000
   1c7cc:	orr	r2, r2, #-16777216	; 0xff000000
   1c7d0:	ldr	r4, [pc, #2812]	; 1d2d4 <next@@Base+0x3e84>
   1c7d4:	and	r6, r1, r2
   1c7d8:	mov	r1, r6
   1c7dc:	add	r4, pc, r4
   1c7e0:	bl	12690 <realloc@plt>
   1c7e4:	str	r6, [r9]
   1c7e8:	str	r5, [r9, #4]
   1c7ec:	str	r0, [r4]
   1c7f0:	ldrb	r1, [r8]
   1c7f4:	ldr	ip, [sl, #4]
   1c7f8:	ldr	r2, [pc, #2776]	; 1d2d8 <next@@Base+0x3e88>
   1c7fc:	mov	r7, r0
   1c800:	mov	r3, #9
   1c804:	ldr	r2, [pc, r2]
   1c808:	strb	r3, [r7, r2]!
   1c80c:	mov	r3, #0
   1c810:	strb	r3, [r7, #3]
   1c814:	strb	r3, [r7, #2]
   1c818:	strb	r3, [r7, #1]
   1c81c:	adds	r3, r2, #4
   1c820:	adc	r5, ip, #0
   1c824:	mov	r7, #1
   1c828:	cmp	r1, #1
   1c82c:	stm	sl, {r3, r5}
   1c830:	beq	1c860 <next@@Base+0x3410>
   1c834:	b	1c990 <next@@Base+0x3540>
   1c838:	mov	r3, r0
   1c83c:	mov	r1, #9
   1c840:	strb	r1, [r3, r2]!
   1c844:	mov	r1, #0
   1c848:	strb	r1, [r3, #3]
   1c84c:	strb	r1, [r3, #2]
   1c850:	strb	r1, [r3, #1]
   1c854:	adds	r3, r2, #4
   1c858:	adc	r5, ip, #0
   1c85c:	stm	sl, {r3, r5}
   1c860:	ldr	r6, [r9, #4]
   1c864:	ldr	r4, [pc, #2672]	; 1d2dc <next@@Base+0x3e8c>
   1c868:	adds	r1, r2, #8
   1c86c:	adc	r7, ip, #0
   1c870:	ldr	r4, [pc, r4]
   1c874:	subs	r1, r4, r1
   1c878:	sbcs	r1, r6, r7
   1c87c:	bcs	1cd54 <next@@Base+0x3904>
   1c880:	mov	r1, #7
   1c884:	orr	r1, r1, #131072	; 0x20000
   1c888:	adds	r1, r2, r1
   1c88c:	adc	r2, ip, #0
   1c890:	mvn	r3, #0
   1c894:	and	r5, r2, r3
   1c898:	mov	r2, #16646144	; 0xfe0000
   1c89c:	orr	r2, r2, #-16777216	; 0xff000000
   1c8a0:	ldr	r4, [pc, #2616]	; 1d2e0 <next@@Base+0x3e90>
   1c8a4:	and	r6, r1, r2
   1c8a8:	mov	r1, r6
   1c8ac:	add	r4, pc, r4
   1c8b0:	bl	12690 <realloc@plt>
   1c8b4:	str	r6, [r9]
   1c8b8:	str	r5, [r9, #4]
   1c8bc:	str	r0, [r4]
   1c8c0:	ldrb	r2, [r8]
   1c8c4:	ldr	r5, [sl, #4]
   1c8c8:	ldr	r3, [pc, #2580]	; 1d2e4 <next@@Base+0x3e94>
   1c8cc:	mov	r7, r0
   1c8d0:	mov	r1, #0
   1c8d4:	ldr	r3, [pc, r3]
   1c8d8:	adds	r6, r3, #4
   1c8dc:	strb	r1, [r7, r3]!
   1c8e0:	strb	r1, [r7, #3]
   1c8e4:	strb	r1, [r7, #2]
   1c8e8:	strb	r1, [r7, #1]
   1c8ec:	adc	r1, r5, #0
   1c8f0:	mov	r7, #1
   1c8f4:	cmp	r2, #1
   1c8f8:	str	r6, [sl]
   1c8fc:	str	r1, [sl, #4]
   1c900:	bne	1c9b8 <next@@Base+0x3568>
   1c904:	b	1cd7c <next@@Base+0x392c>
   1c908:	ldr	r3, [r0, r2]
   1c90c:	adds	r4, r5, #8
   1c910:	adc	r7, r6, #0
   1c914:	cmp	r3, #9
   1c918:	stm	sl, {r4, r7}
   1c91c:	bne	1d040 <next@@Base+0x3bf0>
   1c920:	ldr	r3, [pc, #2444]	; 1d2b4 <next@@Base+0x3e64>
   1c924:	adds	r4, r5, #20
   1c928:	adc	r7, r6, #0
   1c92c:	add	r3, pc, r3
   1c930:	add	r6, r0, r5
   1c934:	ldrb	r3, [r3]
   1c938:	ldr	r6, [r6, #16]
   1c93c:	stm	sl, {r4, r7}
   1c940:	eor	r3, r3, #1
   1c944:	add	r7, r6, r3
   1c948:	mov	r6, r0
   1c94c:	mov	r3, #0
   1c950:	strb	r3, [r6, r5]!
   1c954:	mov	r5, #161	; 0xa1
   1c958:	strb	r5, [r6, #3]
   1c95c:	strb	r3, [r6, #2]
   1c960:	strb	r3, [r6, #1]
   1c964:	stm	sl, {r2, ip}
   1c968:	mov	r3, r0
   1c96c:	mov	r1, #9
   1c970:	strb	r1, [r3, r2]!
   1c974:	mov	r1, #0
   1c978:	strb	r1, [r3, #3]
   1c97c:	strb	r1, [r3, #2]
   1c980:	strb	r1, [r3, #1]
   1c984:	adds	r3, r2, #4
   1c988:	adc	r5, ip, #0
   1c98c:	stm	sl, {r3, r5}
   1c990:	mov	r2, r0
   1c994:	mov	r1, #0
   1c998:	strb	r1, [r2, r3]!
   1c99c:	adds	r6, r3, #4
   1c9a0:	strb	r1, [r2, #3]
   1c9a4:	strb	r1, [r2, #2]
   1c9a8:	strb	r1, [r2, #1]
   1c9ac:	adc	r1, r5, #0
   1c9b0:	str	r6, [sl]
   1c9b4:	str	r1, [sl, #4]
   1c9b8:	mov	r3, r0
   1c9bc:	mov	r2, #0
   1c9c0:	strb	r2, [r3, r6]!
   1c9c4:	strb	r2, [r3, #3]
   1c9c8:	strb	r2, [r3, #2]
   1c9cc:	strb	r2, [r3, #1]
   1c9d0:	adds	r2, r6, #4
   1c9d4:	adc	r3, r1, #0
   1c9d8:	strd	r2, [sl]
   1c9dc:	lsr	r1, r7, #24
   1c9e0:	strb	r7, [r0, r2]!
   1c9e4:	lsr	r6, r7, #16
   1c9e8:	lsr	r5, r7, #8
   1c9ec:	strb	r1, [r0, #3]
   1c9f0:	strb	r6, [r0, #2]
   1c9f4:	strb	r5, [r0, #1]
   1c9f8:	ldrb	r0, [r8]
   1c9fc:	adds	r4, r2, #4
   1ca00:	adc	r5, r3, #0
   1ca04:	cmp	r0, #0
   1ca08:	strd	r4, [sl]
   1ca0c:	beq	1cac0 <next@@Base+0x3670>
   1ca10:	ldr	r9, [pc, #2284]	; 1d304 <next@@Base+0x3eb4>
   1ca14:	adds	r0, r2, #8
   1ca18:	adc	r1, r3, #0
   1ca1c:	add	r9, pc, r9
   1ca20:	ldr	r7, [r9, #4]
   1ca24:	ldr	r6, [pc, #2268]	; 1d308 <next@@Base+0x3eb8>
   1ca28:	ldr	r6, [pc, r6]
   1ca2c:	subs	r0, r6, r0
   1ca30:	sbcs	r0, r7, r1
   1ca34:	bcs	1cc8c <next@@Base+0x383c>
   1ca38:	mov	r0, #7
   1ca3c:	orr	r0, r0, #131072	; 0x20000
   1ca40:	adds	r0, r2, r0
   1ca44:	adc	r1, r3, #0
   1ca48:	mvn	r2, #0
   1ca4c:	and	r5, r1, r2
   1ca50:	mov	r1, #16646144	; 0xfe0000
   1ca54:	orr	r1, r1, #-16777216	; 0xff000000
   1ca58:	ldr	r4, [pc, #2268]	; 1d33c <next@@Base+0x3eec>
   1ca5c:	and	r6, r0, r1
   1ca60:	ldr	r0, [pc, #2264]	; 1d340 <next@@Base+0x3ef0>
   1ca64:	mov	r1, r6
   1ca68:	add	r4, pc, r4
   1ca6c:	ldr	r0, [pc, r0]
   1ca70:	bl	12690 <realloc@plt>
   1ca74:	str	r6, [r9]
   1ca78:	str	r5, [r9, #4]
   1ca7c:	str	r0, [r4]
   1ca80:	ldrb	r1, [r8]
   1ca84:	ldr	r5, [sl, #4]
   1ca88:	ldr	r4, [pc, #2228]	; 1d344 <next@@Base+0x3ef4>
   1ca8c:	mov	r3, r0
   1ca90:	mov	r2, #0
   1ca94:	ldr	r4, [pc, r4]
   1ca98:	strb	r2, [r3, r4]!
   1ca9c:	strb	r2, [r3, #3]
   1caa0:	strb	r2, [r3, #2]
   1caa4:	strb	r2, [r3, #1]
   1caa8:	adds	r2, r4, #4
   1caac:	adc	r3, r5, #0
   1cab0:	cmp	r1, #0
   1cab4:	strd	r2, [sl]
   1cab8:	beq	1caec <next@@Base+0x369c>
   1cabc:	b	1ccb8 <next@@Base+0x3868>
   1cac0:	ldr	r0, [pc, #2104]	; 1d300 <next@@Base+0x3eb0>
   1cac4:	adds	r2, r2, #8
   1cac8:	mov	r1, #0
   1cacc:	adc	r3, r3, #0
   1cad0:	ldr	r0, [pc, r0]
   1cad4:	mov	r7, r0
   1cad8:	strb	r1, [r7, r4]!
   1cadc:	strb	r1, [r7, #3]
   1cae0:	strb	r1, [r7, #2]
   1cae4:	strb	r1, [r7, #1]
   1cae8:	strd	r2, [sl]
   1caec:	mov	r7, r0
   1caf0:	mov	r1, #0
   1caf4:	strb	r1, [r7, r2]!
   1caf8:	strb	r1, [r7, #3]
   1cafc:	strb	r1, [r7, #2]
   1cb00:	strb	r1, [r7, #1]
   1cb04:	adds	r1, r2, #4
   1cb08:	adc	r5, r3, #0
   1cb0c:	stm	sl, {r1, r5}
   1cb10:	mov	r3, r0
   1cb14:	mov	r2, #0
   1cb18:	strb	r2, [r3, r1]!
   1cb1c:	strb	r2, [r3, #3]
   1cb20:	strb	r2, [r3, #2]
   1cb24:	strb	r2, [r3, #1]
   1cb28:	adds	r2, r1, #4
   1cb2c:	adc	r3, r5, #0
   1cb30:	strd	r2, [sl]
   1cb34:	mov	r7, r0
   1cb38:	mov	r1, #0
   1cb3c:	strb	r1, [r7, r2]!
   1cb40:	strb	r1, [r7, #3]
   1cb44:	strb	r1, [r7, #2]
   1cb48:	strb	r1, [r7, #1]
   1cb4c:	adds	r1, r2, #4
   1cb50:	adc	r5, r3, #0
   1cb54:	stm	sl, {r1, r5}
   1cb58:	mov	r3, r0
   1cb5c:	mov	r2, #0
   1cb60:	strb	r2, [r3, r1]!
   1cb64:	adds	r4, r1, #4
   1cb68:	strb	r2, [r3, #3]
   1cb6c:	strb	r2, [r3, #2]
   1cb70:	strb	r2, [r3, #1]
   1cb74:	adc	r3, r5, #0
   1cb78:	str	r4, [sl]
   1cb7c:	str	r3, [sl, #4]
   1cb80:	mov	r2, r0
   1cb84:	mov	r1, #0
   1cb88:	strb	r1, [r2, r4]!
   1cb8c:	strb	r1, [r2, #3]
   1cb90:	strb	r1, [r2, #2]
   1cb94:	strb	r1, [r2, #1]
   1cb98:	adds	r2, r4, #4
   1cb9c:	adc	r1, r3, #0
   1cba0:	str	r2, [sl]
   1cba4:	str	r1, [sl, #4]
   1cba8:	mov	r3, r0
   1cbac:	mov	r4, #0
   1cbb0:	strb	r4, [r3, r2]!
   1cbb4:	mov	r7, #163	; 0xa3
   1cbb8:	strb	r7, [r3, #3]
   1cbbc:	strb	r4, [r3, #2]
   1cbc0:	strb	r4, [r3, #1]
   1cbc4:	ldrb	r7, [r8]
   1cbc8:	adds	r6, r2, #4
   1cbcc:	adc	r3, r1, #0
   1cbd0:	cmp	r7, #1
   1cbd4:	str	r6, [sl]
   1cbd8:	str	r3, [sl, #4]
   1cbdc:	bne	1cc50 <next@@Base+0x3800>
   1cbe0:	ldr	r8, [pc, #1852]	; 1d324 <next@@Base+0x3ed4>
   1cbe4:	adds	lr, r2, #8
   1cbe8:	adc	ip, r1, #0
   1cbec:	add	r8, pc, r8
   1cbf0:	ldr	r5, [r8, #4]
   1cbf4:	ldr	r7, [pc, #1836]	; 1d328 <next@@Base+0x3ed8>
   1cbf8:	ldr	r7, [pc, r7]
   1cbfc:	subs	r7, r7, lr
   1cc00:	sbcs	r7, r5, ip
   1cc04:	bcs	1cc50 <next@@Base+0x3800>
   1cc08:	mov	r3, #7
   1cc0c:	orr	r3, r3, #131072	; 0x20000
   1cc10:	adds	r2, r2, r3
   1cc14:	adc	r1, r1, #0
   1cc18:	mvn	r3, #0
   1cc1c:	and	r7, r1, r3
   1cc20:	mov	r1, #16646144	; 0xfe0000
   1cc24:	orr	r1, r1, #-16777216	; 0xff000000
   1cc28:	ldr	r5, [pc, #1788]	; 1d32c <next@@Base+0x3edc>
   1cc2c:	and	r6, r2, r1
   1cc30:	mov	r1, r6
   1cc34:	add	r5, pc, r5
   1cc38:	bl	12690 <realloc@plt>
   1cc3c:	strd	r6, [r8]
   1cc40:	str	r0, [r5]
   1cc44:	ldr	r3, [sl, #4]
   1cc48:	ldr	r6, [pc, #1760]	; 1d330 <next@@Base+0x3ee0>
   1cc4c:	ldr	r6, [pc, r6]
   1cc50:	ldr	r0, [pc, #1756]	; 1d334 <next@@Base+0x3ee4>
   1cc54:	ldr	r1, [pc, #1756]	; 1d338 <next@@Base+0x3ee8>
   1cc58:	adds	r2, r6, #4
   1cc5c:	add	r0, pc, r0
   1cc60:	adc	r3, r3, #0
   1cc64:	ldr	r1, [pc, r1]
   1cc68:	strb	r4, [r1, r6]!
   1cc6c:	strb	r4, [r1, #3]
   1cc70:	strb	r4, [r1, #2]
   1cc74:	strb	r4, [r1, #1]
   1cc78:	mov	r1, #1
   1cc7c:	strd	r2, [sl]
   1cc80:	strb	r1, [r0]
   1cc84:	sub	sp, fp, #28
   1cc88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc8c:	ldr	r0, [pc, #1656]	; 1d30c <next@@Base+0x3ebc>
   1cc90:	adds	r2, r2, #8
   1cc94:	mov	r1, #0
   1cc98:	adc	r3, r3, #0
   1cc9c:	ldr	r0, [pc, r0]
   1cca0:	mov	r7, r0
   1cca4:	strb	r1, [r7, r4]!
   1cca8:	strb	r1, [r7, #3]
   1ccac:	strb	r1, [r7, #2]
   1ccb0:	strb	r1, [r7, #1]
   1ccb4:	strd	r2, [sl]
   1ccb8:	ldr	r6, [r9, #4]
   1ccbc:	ldr	r1, [pc, #1668]	; 1d348 <next@@Base+0x3ef8>
   1ccc0:	adds	ip, r4, #8
   1ccc4:	adc	r7, r5, #0
   1ccc8:	ldr	r1, [pc, r1]
   1cccc:	subs	r1, r1, ip
   1ccd0:	sbcs	r1, r6, r7
   1ccd4:	bcs	1ce20 <next@@Base+0x39d0>
   1ccd8:	mov	r1, #7
   1ccdc:	orr	r1, r1, #131072	; 0x20000
   1cce0:	adds	r1, r4, r1
   1cce4:	adc	r2, r5, #0
   1cce8:	mvn	r3, #0
   1ccec:	and	r5, r2, r3
   1ccf0:	mov	r2, #16646144	; 0xfe0000
   1ccf4:	orr	r2, r2, #-16777216	; 0xff000000
   1ccf8:	ldr	r6, [pc, #1612]	; 1d34c <next@@Base+0x3efc>
   1ccfc:	and	r4, r1, r2
   1cd00:	mov	r1, r4
   1cd04:	add	r6, pc, r6
   1cd08:	bl	12690 <realloc@plt>
   1cd0c:	str	r0, [r6]
   1cd10:	strd	r4, [r9]
   1cd14:	ldrb	r7, [r8]
   1cd18:	ldr	r3, [sl, #4]
   1cd1c:	ldr	r2, [pc, #1580]	; 1d350 <next@@Base+0x3f00>
   1cd20:	mov	r6, r0
   1cd24:	mov	r1, #0
   1cd28:	ldr	r2, [pc, r2]
   1cd2c:	strb	r1, [r6, r2]!
   1cd30:	strb	r1, [r6, #3]
   1cd34:	strb	r1, [r6, #2]
   1cd38:	strb	r1, [r6, #1]
   1cd3c:	adds	r1, r2, #4
   1cd40:	adc	r5, r3, #0
   1cd44:	cmp	r7, #1
   1cd48:	stm	sl, {r1, r5}
   1cd4c:	bne	1cb10 <next@@Base+0x36c0>
   1cd50:	b	1ce44 <next@@Base+0x39f4>
   1cd54:	mov	r2, r0
   1cd58:	mov	r1, #0
   1cd5c:	strb	r1, [r2, r3]!
   1cd60:	adds	r6, r3, #4
   1cd64:	strb	r1, [r2, #3]
   1cd68:	strb	r1, [r2, #2]
   1cd6c:	strb	r1, [r2, #1]
   1cd70:	adc	r1, r5, #0
   1cd74:	str	r6, [sl]
   1cd78:	str	r1, [sl, #4]
   1cd7c:	ldr	r4, [r9, #4]
   1cd80:	ldr	r2, [pc, #1376]	; 1d2e8 <next@@Base+0x3e98>
   1cd84:	adds	ip, r3, #8
   1cd88:	adc	r7, r5, #0
   1cd8c:	ldr	r2, [pc, r2]
   1cd90:	subs	r2, r2, ip
   1cd94:	sbcs	r2, r4, r7
   1cd98:	bcs	1cee4 <next@@Base+0x3a94>
   1cd9c:	mov	r1, #7
   1cda0:	orr	r1, r1, #131072	; 0x20000
   1cda4:	adds	r1, r3, r1
   1cda8:	adc	r2, r5, #0
   1cdac:	mvn	r3, #0
   1cdb0:	and	r5, r2, r3
   1cdb4:	mov	r2, #16646144	; 0xfe0000
   1cdb8:	orr	r2, r2, #-16777216	; 0xff000000
   1cdbc:	ldr	r4, [pc, #1320]	; 1d2ec <next@@Base+0x3e9c>
   1cdc0:	and	r6, r1, r2
   1cdc4:	mov	r1, r6
   1cdc8:	add	r4, pc, r4
   1cdcc:	bl	12690 <realloc@plt>
   1cdd0:	str	r6, [r9]
   1cdd4:	str	r5, [r9, #4]
   1cdd8:	str	r0, [r4]
   1cddc:	ldrb	r5, [r8]
   1cde0:	ldr	r1, [sl, #4]
   1cde4:	ldr	r6, [pc, #1284]	; 1d2f0 <next@@Base+0x3ea0>
   1cde8:	mov	r3, r0
   1cdec:	mov	r2, #0
   1cdf0:	mov	r7, #1
   1cdf4:	ldr	r6, [pc, r6]
   1cdf8:	strb	r2, [r3, r6]!
   1cdfc:	strb	r2, [r3, #3]
   1ce00:	strb	r2, [r3, #2]
   1ce04:	strb	r2, [r3, #1]
   1ce08:	adds	r2, r6, #4
   1ce0c:	adc	r3, r1, #0
   1ce10:	cmp	r5, #1
   1ce14:	strd	r2, [sl]
   1ce18:	bne	1c9dc <next@@Base+0x358c>
   1ce1c:	b	1cf08 <next@@Base+0x3ab8>
   1ce20:	mov	r7, r0
   1ce24:	mov	r1, #0
   1ce28:	strb	r1, [r7, r2]!
   1ce2c:	strb	r1, [r7, #3]
   1ce30:	strb	r1, [r7, #2]
   1ce34:	strb	r1, [r7, #1]
   1ce38:	adds	r1, r2, #4
   1ce3c:	adc	r5, r3, #0
   1ce40:	stm	sl, {r1, r5}
   1ce44:	ldr	r4, [r9, #4]
   1ce48:	ldr	r6, [pc, #1284]	; 1d354 <next@@Base+0x3f04>
   1ce4c:	adds	r7, r2, #8
   1ce50:	adc	ip, r3, #0
   1ce54:	ldr	r6, [pc, r6]
   1ce58:	subs	r7, r6, r7
   1ce5c:	sbcs	r7, r4, ip
   1ce60:	bcs	1cf7c <next@@Base+0x3b2c>
   1ce64:	mov	r1, #7
   1ce68:	orr	r1, r1, #131072	; 0x20000
   1ce6c:	adds	r1, r2, r1
   1ce70:	adc	r2, r3, #0
   1ce74:	mvn	r3, #0
   1ce78:	and	r5, r2, r3
   1ce7c:	mov	r2, #16646144	; 0xfe0000
   1ce80:	orr	r2, r2, #-16777216	; 0xff000000
   1ce84:	ldr	r4, [pc, #1228]	; 1d358 <next@@Base+0x3f08>
   1ce88:	and	r6, r1, r2
   1ce8c:	mov	r1, r6
   1ce90:	add	r4, pc, r4
   1ce94:	bl	12690 <realloc@plt>
   1ce98:	str	r6, [r9]
   1ce9c:	str	r5, [r9, #4]
   1cea0:	str	r0, [r4]
   1cea4:	ldrb	r7, [r8]
   1cea8:	ldr	r5, [sl, #4]
   1ceac:	ldr	r1, [pc, #1192]	; 1d35c <next@@Base+0x3f0c>
   1ceb0:	mov	r3, r0
   1ceb4:	mov	r2, #0
   1ceb8:	ldr	r1, [pc, r1]
   1cebc:	strb	r2, [r3, r1]!
   1cec0:	strb	r2, [r3, #3]
   1cec4:	strb	r2, [r3, #2]
   1cec8:	strb	r2, [r3, #1]
   1cecc:	adds	r2, r1, #4
   1ced0:	adc	r3, r5, #0
   1ced4:	cmp	r7, #1
   1ced8:	strd	r2, [sl]
   1cedc:	bne	1cb34 <next@@Base+0x36e4>
   1cee0:	b	1cfa0 <next@@Base+0x3b50>
   1cee4:	mov	r3, r0
   1cee8:	mov	r2, #0
   1ceec:	strb	r2, [r3, r6]!
   1cef0:	strb	r2, [r3, #3]
   1cef4:	strb	r2, [r3, #2]
   1cef8:	strb	r2, [r3, #1]
   1cefc:	adds	r2, r6, #4
   1cf00:	adc	r3, r1, #0
   1cf04:	strd	r2, [sl]
   1cf08:	ldr	r4, [r9, #4]
   1cf0c:	ldr	r5, [pc, #992]	; 1d2f4 <next@@Base+0x3ea4>
   1cf10:	adds	lr, r6, #8
   1cf14:	adc	ip, r1, #0
   1cf18:	mov	r7, #1
   1cf1c:	ldr	r5, [pc, r5]
   1cf20:	subs	r5, r5, lr
   1cf24:	sbcs	r5, r4, ip
   1cf28:	bcs	1c9dc <next@@Base+0x358c>
   1cf2c:	mov	r2, #7
   1cf30:	orr	r2, r2, #131072	; 0x20000
   1cf34:	adds	r2, r6, r2
   1cf38:	adc	r1, r1, #0
   1cf3c:	mvn	r3, #0
   1cf40:	and	r5, r1, r3
   1cf44:	mov	r1, #16646144	; 0xfe0000
   1cf48:	orr	r1, r1, #-16777216	; 0xff000000
   1cf4c:	ldr	r4, [pc, #932]	; 1d2f8 <next@@Base+0x3ea8>
   1cf50:	and	r6, r2, r1
   1cf54:	mov	r1, r6
   1cf58:	add	r4, pc, r4
   1cf5c:	bl	12690 <realloc@plt>
   1cf60:	str	r6, [r9]
   1cf64:	str	r5, [r9, #4]
   1cf68:	str	r0, [r4]
   1cf6c:	ldr	r3, [sl, #4]
   1cf70:	ldr	r2, [pc, #900]	; 1d2fc <next@@Base+0x3eac>
   1cf74:	ldr	r2, [pc, r2]
   1cf78:	b	1c9dc <next@@Base+0x358c>
   1cf7c:	mov	r3, r0
   1cf80:	mov	r2, #0
   1cf84:	strb	r2, [r3, r1]!
   1cf88:	strb	r2, [r3, #3]
   1cf8c:	strb	r2, [r3, #2]
   1cf90:	strb	r2, [r3, #1]
   1cf94:	adds	r2, r1, #4
   1cf98:	adc	r3, r5, #0
   1cf9c:	strd	r2, [sl]
   1cfa0:	ldr	r4, [r9, #4]
   1cfa4:	ldr	r6, [pc, #948]	; 1d360 <next@@Base+0x3f10>
   1cfa8:	adds	r7, r1, #8
   1cfac:	adc	ip, r5, #0
   1cfb0:	ldr	r6, [pc, r6]
   1cfb4:	subs	r7, r6, r7
   1cfb8:	sbcs	r7, r4, ip
   1cfbc:	bcs	1d068 <next@@Base+0x3c18>
   1cfc0:	mov	r2, #7
   1cfc4:	orr	r2, r2, #131072	; 0x20000
   1cfc8:	adds	r1, r1, r2
   1cfcc:	adc	r2, r5, #0
   1cfd0:	mvn	r3, #0
   1cfd4:	and	r5, r2, r3
   1cfd8:	mov	r2, #16646144	; 0xfe0000
   1cfdc:	orr	r2, r2, #-16777216	; 0xff000000
   1cfe0:	ldr	r4, [pc, #892]	; 1d364 <next@@Base+0x3f14>
   1cfe4:	and	r6, r1, r2
   1cfe8:	mov	r1, r6
   1cfec:	add	r4, pc, r4
   1cff0:	bl	12690 <realloc@plt>
   1cff4:	str	r6, [r9]
   1cff8:	str	r5, [r9, #4]
   1cffc:	str	r0, [r4]
   1d000:	ldrb	r7, [r8]
   1d004:	ldr	r3, [sl, #4]
   1d008:	ldr	r2, [pc, #856]	; 1d368 <next@@Base+0x3f18>
   1d00c:	mov	r6, r0
   1d010:	mov	r1, #0
   1d014:	ldr	r2, [pc, r2]
   1d018:	strb	r1, [r6, r2]!
   1d01c:	strb	r1, [r6, #3]
   1d020:	strb	r1, [r6, #2]
   1d024:	strb	r1, [r6, #1]
   1d028:	adds	r1, r2, #4
   1d02c:	adc	r5, r3, #0
   1d030:	cmp	r7, #1
   1d034:	stm	sl, {r1, r5}
   1d038:	bne	1cb58 <next@@Base+0x3708>
   1d03c:	b	1d08c <next@@Base+0x3c3c>
   1d040:	ldr	r1, [pc, #616]	; 1d2b0 <next@@Base+0x3e60>
   1d044:	add	r1, pc, r1
   1d048:	ldr	r0, [pc, #600]	; 1d2a8 <next@@Base+0x3e58>
   1d04c:	ldr	r0, [pc, r0]
   1d050:	ldr	r0, [r0]
   1d054:	ldr	r2, [pc, #592]	; 1d2ac <next@@Base+0x3e5c>
   1d058:	ldr	r2, [pc, r2]
   1d05c:	sub	sp, fp, #28
   1d060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d064:	b	12720 <fprintf@plt>
   1d068:	mov	r7, r0
   1d06c:	mov	r1, #0
   1d070:	strb	r1, [r7, r2]!
   1d074:	strb	r1, [r7, #3]
   1d078:	strb	r1, [r7, #2]
   1d07c:	strb	r1, [r7, #1]
   1d080:	adds	r1, r2, #4
   1d084:	adc	r5, r3, #0
   1d088:	stm	sl, {r1, r5}
   1d08c:	ldr	r4, [r9, #4]
   1d090:	ldr	r6, [pc, #724]	; 1d36c <next@@Base+0x3f1c>
   1d094:	adds	r7, r2, #8
   1d098:	adc	ip, r3, #0
   1d09c:	ldr	r6, [pc, r6]
   1d0a0:	subs	r7, r6, r7
   1d0a4:	sbcs	r7, r4, ip
   1d0a8:	bcs	1d130 <next@@Base+0x3ce0>
   1d0ac:	mov	r1, #7
   1d0b0:	orr	r1, r1, #131072	; 0x20000
   1d0b4:	adds	r1, r2, r1
   1d0b8:	adc	r2, r3, #0
   1d0bc:	mvn	r3, #0
   1d0c0:	and	r5, r2, r3
   1d0c4:	mov	r2, #16646144	; 0xfe0000
   1d0c8:	orr	r2, r2, #-16777216	; 0xff000000
   1d0cc:	ldr	r4, [pc, #668]	; 1d370 <next@@Base+0x3f20>
   1d0d0:	and	r6, r1, r2
   1d0d4:	mov	r1, r6
   1d0d8:	add	r4, pc, r4
   1d0dc:	bl	12690 <realloc@plt>
   1d0e0:	str	r6, [r9]
   1d0e4:	str	r5, [r9, #4]
   1d0e8:	str	r0, [r4]
   1d0ec:	ldrb	r2, [r8]
   1d0f0:	ldr	r5, [sl, #4]
   1d0f4:	ldr	r1, [pc, #632]	; 1d374 <next@@Base+0x3f24>
   1d0f8:	mov	r7, r0
   1d0fc:	mov	r3, #0
   1d100:	ldr	r1, [pc, r1]
   1d104:	adds	r4, r1, #4
   1d108:	strb	r3, [r7, r1]!
   1d10c:	strb	r3, [r7, #3]
   1d110:	strb	r3, [r7, #2]
   1d114:	strb	r3, [r7, #1]
   1d118:	adc	r3, r5, #0
   1d11c:	cmp	r2, #1
   1d120:	str	r4, [sl]
   1d124:	str	r3, [sl, #4]
   1d128:	bne	1cb80 <next@@Base+0x3730>
   1d12c:	b	1d158 <next@@Base+0x3d08>
   1d130:	mov	r3, r0
   1d134:	mov	r2, #0
   1d138:	strb	r2, [r3, r1]!
   1d13c:	adds	r4, r1, #4
   1d140:	strb	r2, [r3, #3]
   1d144:	strb	r2, [r3, #2]
   1d148:	strb	r2, [r3, #1]
   1d14c:	adc	r3, r5, #0
   1d150:	str	r4, [sl]
   1d154:	str	r3, [sl, #4]
   1d158:	ldr	r6, [r9, #4]
   1d15c:	ldr	r2, [pc, #532]	; 1d378 <next@@Base+0x3f28>
   1d160:	adds	ip, r1, #8
   1d164:	adc	r7, r5, #0
   1d168:	ldr	r2, [pc, r2]
   1d16c:	subs	r2, r2, ip
   1d170:	sbcs	r2, r6, r7
   1d174:	bcs	1d1fc <next@@Base+0x3dac>
   1d178:	mov	r2, #7
   1d17c:	orr	r2, r2, #131072	; 0x20000
   1d180:	adds	r1, r1, r2
   1d184:	adc	r2, r5, #0
   1d188:	mvn	r3, #0
   1d18c:	and	r5, r2, r3
   1d190:	mov	r2, #16646144	; 0xfe0000
   1d194:	orr	r2, r2, #-16777216	; 0xff000000
   1d198:	ldr	r4, [pc, #368]	; 1d310 <next@@Base+0x3ec0>
   1d19c:	and	r6, r1, r2
   1d1a0:	mov	r1, r6
   1d1a4:	add	r4, pc, r4
   1d1a8:	bl	12690 <realloc@plt>
   1d1ac:	str	r6, [r9]
   1d1b0:	str	r5, [r9, #4]
   1d1b4:	str	r0, [r4]
   1d1b8:	ldrb	r7, [r8]
   1d1bc:	ldr	r3, [sl, #4]
   1d1c0:	ldr	r4, [pc, #332]	; 1d314 <next@@Base+0x3ec4>
   1d1c4:	mov	r2, r0
   1d1c8:	mov	r1, #0
   1d1cc:	ldr	r4, [pc, r4]
   1d1d0:	strb	r1, [r2, r4]!
   1d1d4:	strb	r1, [r2, #3]
   1d1d8:	strb	r1, [r2, #2]
   1d1dc:	strb	r1, [r2, #1]
   1d1e0:	adds	r2, r4, #4
   1d1e4:	adc	r1, r3, #0
   1d1e8:	cmp	r7, #0
   1d1ec:	str	r2, [sl]
   1d1f0:	str	r1, [sl, #4]
   1d1f4:	beq	1cba8 <next@@Base+0x3758>
   1d1f8:	b	1d224 <next@@Base+0x3dd4>
   1d1fc:	mov	r2, r0
   1d200:	mov	r1, #0
   1d204:	strb	r1, [r2, r4]!
   1d208:	strb	r1, [r2, #3]
   1d20c:	strb	r1, [r2, #2]
   1d210:	strb	r1, [r2, #1]
   1d214:	adds	r2, r4, #4
   1d218:	adc	r1, r3, #0
   1d21c:	str	r2, [sl]
   1d220:	str	r1, [sl, #4]
   1d224:	ldr	r5, [r9, #4]
   1d228:	ldr	r6, [pc, #232]	; 1d318 <next@@Base+0x3ec8>
   1d22c:	adds	r7, r4, #8
   1d230:	adc	ip, r3, #0
   1d234:	ldr	r6, [pc, r6]
   1d238:	subs	r7, r6, r7
   1d23c:	sbcs	r7, r5, ip
   1d240:	bcs	1cba8 <next@@Base+0x3758>
   1d244:	mov	r1, #7
   1d248:	orr	r1, r1, #131072	; 0x20000
   1d24c:	adds	r1, r4, r1
   1d250:	adc	r2, r3, #0
   1d254:	mvn	r3, #0
   1d258:	and	r7, r2, r3
   1d25c:	mov	r2, #16646144	; 0xfe0000
   1d260:	orr	r2, r2, #-16777216	; 0xff000000
   1d264:	ldr	r5, [pc, #176]	; 1d31c <next@@Base+0x3ecc>
   1d268:	and	r6, r1, r2
   1d26c:	mov	r1, r6
   1d270:	add	r5, pc, r5
   1d274:	bl	12690 <realloc@plt>
   1d278:	strd	r6, [r9]
   1d27c:	str	r0, [r5]
   1d280:	ldr	r1, [sl, #4]
   1d284:	ldr	r2, [pc, #148]	; 1d320 <next@@Base+0x3ed0>
   1d288:	ldr	r2, [pc, r2]
   1d28c:	b	1cba8 <next@@Base+0x3758>
   1d290:	andeq	r5, r1, r8, ror #1
   1d294:	andeq	r5, r1, r8, ror #1
   1d298:	ldrdeq	r5, [r1], -ip
   1d29c:	andeq	r5, r1, r0, asr #1
   1d2a0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d2a4:	andeq	r2, r0, lr, lsl #31
   1d2a8:	andeq	r3, r1, r4, rrx
   1d2ac:	andeq	r4, r1, r8, lsr #13
   1d2b0:	strdeq	r2, [r0], -r7
   1d2b4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d2b8:	strheq	r5, [r1], -r0
   1d2bc:	andeq	r5, r1, r4, lsr #1
   1d2c0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1d2c4:	andeq	r5, r1, r8, asr r0
   1d2c8:	andeq	r5, r1, r4, asr r0
   1d2cc:	andeq	r5, r1, r4, lsr r0
   1d2d0:	andeq	r4, r1, r0, ror pc
   1d2d4:	andeq	r4, r1, r0, lsr pc
   1d2d8:	andeq	r4, r1, r4, lsl pc
   1d2dc:	andeq	r4, r1, r0, lsr #29
   1d2e0:	andeq	r4, r1, r0, ror #28
   1d2e4:	andeq	r4, r1, r4, asr #28
   1d2e8:	andeq	r4, r1, r4, lsl #19
   1d2ec:	andeq	r4, r1, r4, asr #18
   1d2f0:	andeq	r4, r1, r4, lsr #18
   1d2f4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d2f8:			; <UNDEFINED> instruction: 0x000147b4
   1d2fc:	andeq	r4, r1, r4, lsr #15
   1d300:	andeq	r4, r1, ip, lsr ip
   1d304:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d308:	andeq	r4, r1, r8, ror #25
   1d30c:	andeq	r4, r1, r0, ror sl
   1d310:	andeq	r4, r1, r8, ror #10
   1d314:	andeq	r4, r1, ip, asr #10
   1d318:	ldrdeq	r4, [r1], -ip
   1d31c:	muleq	r1, ip, r4
   1d320:	muleq	r1, r0, r4
   1d324:	andeq	r4, r1, r4, lsr #22
   1d328:	andeq	r4, r1, r8, lsl fp
   1d32c:	ldrdeq	r4, [r1], -r8
   1d330:	andeq	r4, r1, ip, asr #21
   1d334:	andeq	r4, r1, r4, asr #21
   1d338:	andeq	r4, r1, r8, lsr #21
   1d33c:	andeq	r4, r1, r4, lsr #25
   1d340:	andeq	r4, r1, r0, lsr #25
   1d344:	andeq	r4, r1, r4, lsl #25
   1d348:	andeq	r4, r1, r8, asr #20
   1d34c:	andeq	r4, r1, r8, lsl #20
   1d350:	strdeq	r4, [r1], -r0
   1d354:			; <UNDEFINED> instruction: 0x000148bc
   1d358:	andeq	r4, r1, ip, ror r8
   1d35c:	andeq	r4, r1, r0, ror #16
   1d360:	andeq	r4, r1, r0, ror #14
   1d364:	andeq	r4, r1, r0, lsr #14
   1d368:	andeq	r4, r1, r4, lsl #14
   1d36c:	andeq	r4, r1, r4, ror r6
   1d370:	andeq	r4, r1, r4, lsr r6
   1d374:	andeq	r4, r1, r8, lsl r6
   1d378:	andeq	r4, r1, r8, lsr #11
   1d37c:	ldr	r0, [pc, #508]	; 1d580 <next@@Base+0x4130>
   1d380:	ldr	r0, [pc, r0]
   1d384:	cmp	r0, #0
   1d388:	beq	1d538 <next@@Base+0x40e8>
   1d38c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d390:	add	fp, sp, #24
   1d394:	ldr	r9, [pc, #488]	; 1d584 <next@@Base+0x4134>
   1d398:	mov	r4, #0
   1d39c:	mov	r1, #0
   1d3a0:	add	r9, pc, r9
   1d3a4:	ldrb	r0, [r9]
   1d3a8:	cmp	r0, #1
   1d3ac:	bne	1d430 <next@@Base+0x3fe0>
   1d3b0:	ldr	r0, [pc, #464]	; 1d588 <next@@Base+0x4138>
   1d3b4:	ldr	r8, [pc, #464]	; 1d58c <next@@Base+0x413c>
   1d3b8:	mov	r1, #1
   1d3bc:	add	r0, pc, r0
   1d3c0:	add	r8, pc, r8
   1d3c4:	ldr	r0, [r0, #4]
   1d3c8:	ldr	r2, [pc, #448]	; 1d590 <next@@Base+0x4140>
   1d3cc:	ldr	r2, [pc, r2]
   1d3d0:	ldr	r7, [r8, #4]
   1d3d4:	ldr	r5, [pc, #440]	; 1d594 <next@@Base+0x4144>
   1d3d8:	adds	r3, r2, #8
   1d3dc:	adc	r6, r0, #0
   1d3e0:	ldr	r5, [pc, r5]
   1d3e4:	subs	r3, r5, r3
   1d3e8:	sbcs	r3, r7, r6
   1d3ec:	bcs	1d430 <next@@Base+0x3fe0>
   1d3f0:	mov	r1, #7
   1d3f4:	orr	r1, r1, #131072	; 0x20000
   1d3f8:	adds	r1, r2, r1
   1d3fc:	adc	r7, r0, #0
   1d400:	mov	r0, #16646144	; 0xfe0000
   1d404:	orr	r0, r0, #-16777216	; 0xff000000
   1d408:	ldr	r5, [pc, #392]	; 1d598 <next@@Base+0x4148>
   1d40c:	and	r6, r1, r0
   1d410:	ldr	r0, [pc, #388]	; 1d59c <next@@Base+0x414c>
   1d414:	mov	r1, r6
   1d418:	add	r5, pc, r5
   1d41c:	ldr	r0, [pc, r0]
   1d420:	bl	12690 <realloc@plt>
   1d424:	ldrb	r1, [r9]
   1d428:	strd	r6, [r8]
   1d42c:	str	r0, [r5]
   1d430:	ldr	r3, [pc, #360]	; 1d5a0 <next@@Base+0x4150>
   1d434:	ldr	r2, [pc, #360]	; 1d5a4 <next@@Base+0x4154>
   1d438:	add	r3, pc, r3
   1d43c:	ldr	r2, [pc, r2]
   1d440:	ldr	r0, [pc, #352]	; 1d5a8 <next@@Base+0x4158>
   1d444:	ldr	r0, [pc, r0]
   1d448:	ldr	r7, [r3, #4]
   1d44c:	mov	r6, r0
   1d450:	strb	r4, [r6, r2]!
   1d454:	adds	r2, r2, #8
   1d458:	adc	r5, r7, #0
   1d45c:	strb	r4, [r6, #5]
   1d460:	strb	r4, [r6, #3]
   1d464:	strb	r4, [r6, #2]
   1d468:	strb	r4, [r6, #1]
   1d46c:	strb	r4, [r6, #4]!
   1d470:	cmp	r1, #0
   1d474:	strb	r4, [r6, #3]
   1d478:	strb	r4, [r6, #2]
   1d47c:	stm	r3, {r2, r5}
   1d480:	beq	1d4a8 <next@@Base+0x4058>
   1d484:	ldr	r3, [pc, #288]	; 1d5ac <next@@Base+0x415c>
   1d488:	mov	r1, r2
   1d48c:	mov	r2, #1
   1d490:	ldr	r3, [pc, r3]
   1d494:	bl	1269c <fwrite@plt>
   1d498:	ldr	r0, [pc, #272]	; 1d5b0 <next@@Base+0x4160>
   1d49c:	ldr	r0, [pc, r0]
   1d4a0:	bl	12630 <free@plt>
   1d4a4:	b	1d4f4 <next@@Base+0x40a4>
   1d4a8:	ldr	r1, [pc, #260]	; 1d5b4 <next@@Base+0x4164>
   1d4ac:	mov	r2, #4
   1d4b0:	ldr	r1, [pc, r1]
   1d4b4:	bl	127a4 <msync@plt>
   1d4b8:	cmn	r0, #1
   1d4bc:	beq	1d544 <next@@Base+0x40f4>
   1d4c0:	ldr	r1, [pc, #252]	; 1d5c4 <next@@Base+0x4174>
   1d4c4:	ldr	r1, [pc, r1]
   1d4c8:	ldr	r0, [pc, #248]	; 1d5c8 <next@@Base+0x4178>
   1d4cc:	ldr	r0, [pc, r0]
   1d4d0:	bl	12780 <munmap@plt>
   1d4d4:	ldr	r0, [pc, #240]	; 1d5cc <next@@Base+0x417c>
   1d4d8:	ldr	r1, [pc, #240]	; 1d5d0 <next@@Base+0x4180>
   1d4dc:	mov	r2, #0
   1d4e0:	add	r0, pc, r0
   1d4e4:	add	r1, pc, r1
   1d4e8:	str	r2, [r0]
   1d4ec:	str	r2, [r0, #4]
   1d4f0:	str	r2, [r1]
   1d4f4:	ldr	r0, [pc, #216]	; 1d5d4 <next@@Base+0x4184>
   1d4f8:	ldr	r0, [pc, r0]
   1d4fc:	bl	12618 <fflush@plt>
   1d500:	ldr	r0, [pc, #208]	; 1d5d8 <next@@Base+0x4188>
   1d504:	ldr	r0, [pc, r0]
   1d508:	bl	1da84 <__gcov_flush@@Base+0x30c>
   1d50c:	ldr	r0, [pc, #200]	; 1d5dc <next@@Base+0x418c>
   1d510:	ldr	r0, [pc, r0]
   1d514:	bl	12774 <fclose@plt>
   1d518:	ldr	r0, [pc, #192]	; 1d5e0 <next@@Base+0x4190>
   1d51c:	ldr	r1, [pc, #192]	; 1d5e4 <next@@Base+0x4194>
   1d520:	mov	r2, #0
   1d524:	add	r0, pc, r0
   1d528:	add	r1, pc, r1
   1d52c:	str	r2, [r0]
   1d530:	str	r2, [r1]
   1d534:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d538:	ldr	r0, [pc, #168]	; 1d5e8 <next@@Base+0x4198>
   1d53c:	ldr	r0, [pc, r0]
   1d540:	b	12630 <free@plt>
   1d544:	bl	1272c <__errno_location@plt>
   1d548:	ldr	r1, [pc, #104]	; 1d5b8 <next@@Base+0x4168>
   1d54c:	ldr	r1, [pc, r1]
   1d550:	ldr	r0, [r0]
   1d554:	ldr	r4, [r1]
   1d558:	ldr	r5, [pc, #92]	; 1d5bc <next@@Base+0x416c>
   1d55c:	ldr	r5, [pc, r5]
   1d560:	bl	126d8 <strerror@plt>
   1d564:	ldr	r1, [pc, #84]	; 1d5c0 <next@@Base+0x4170>
   1d568:	mov	r3, r0
   1d56c:	mov	r0, r4
   1d570:	add	r1, pc, r1
   1d574:	mov	r2, r5
   1d578:	bl	12720 <fprintf@plt>
   1d57c:	b	1d4c0 <next@@Base+0x4070>
   1d580:	andeq	r4, r1, r8, lsl #7
   1d584:	andeq	r4, r1, r4, ror #6
   1d588:	andeq	r4, r1, ip, asr r3
   1d58c:	andeq	r4, r1, r0, asr r3
   1d590:	andeq	r4, r1, ip, asr #6
   1d594:	andeq	r4, r1, r0, lsr r3
   1d598:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d59c:	strdeq	r4, [r1], -r0
   1d5a0:	andeq	r4, r1, r0, ror #5
   1d5a4:	ldrdeq	r4, [r1], -ip
   1d5a8:	andeq	r4, r1, r8, asr #5
   1d5ac:	andeq	r4, r1, r8, ror r2
   1d5b0:	andeq	r4, r1, r0, ror r2
   1d5b4:	andeq	r4, r1, r0, lsl #5
   1d5b8:	andeq	r2, r1, r4, ror #22
   1d5bc:	andeq	r4, r1, r4, lsr #3
   1d5c0:	andeq	r2, r0, r9, lsr r2
   1d5c4:	andeq	r4, r1, ip, ror #4
   1d5c8:	andeq	r4, r1, r0, asr #4
   1d5cc:	andeq	r4, r1, r0, asr r2
   1d5d0:	andeq	r4, r1, r8, lsr #4
   1d5d4:	andeq	r4, r1, r0, lsl r2
   1d5d8:	andeq	r2, r1, r0, asr #23
   1d5dc:	strdeq	r4, [r1], -r8
   1d5e0:	andeq	r4, r1, r4, ror #3
   1d5e4:	andeq	r4, r1, r4, ror #3
   1d5e8:	andeq	r4, r1, r4, asr #3
   1d5ec:	push	{r4, sl, fp, lr}
   1d5f0:	add	fp, sp, #8
   1d5f4:	mov	r4, r0
   1d5f8:	mov	r0, #12
   1d5fc:	bl	126c0 <malloc@plt>
   1d600:	ldr	r1, [pc, #60]	; 1d644 <next@@Base+0x41f4>
   1d604:	mov	r2, #0
   1d608:	add	r1, pc, r1
   1d60c:	stm	r0, {r1, r4}
   1d610:	str	r2, [r0, #8]
   1d614:	ldr	r1, [pc, #44]	; 1d648 <next@@Base+0x41f8>
   1d618:	ldr	r1, [pc, r1]
   1d61c:	mov	r2, r1
   1d620:	ldr	r3, [r2], #4
   1d624:	ldr	r4, [r2]
   1d628:	cmp	r3, #0
   1d62c:	mov	r3, r2
   1d630:	addne	r3, r4, #8
   1d634:	moveq	r2, r1
   1d638:	str	r0, [r3]
   1d63c:	str	r0, [r2]
   1d640:	pop	{r4, sl, fp, pc}
   1d644:	andeq	r4, r1, ip, lsl r1
   1d648:	muleq	r1, r4, sl
   1d64c:	push	{r4, r5, fp, lr}
   1d650:	add	fp, sp, #8
   1d654:	ldr	r0, [pc, #56]	; 1d694 <next@@Base+0x4244>
   1d658:	ldr	r0, [pc, r0]
   1d65c:	ldr	r4, [r0]
   1d660:	cmp	r4, #0
   1d664:	beq	1d690 <next@@Base+0x4240>
   1d668:	ldr	r5, [pc, #40]	; 1d698 <next@@Base+0x4248>
   1d66c:	add	r5, pc, r5
   1d670:	ldr	r0, [r4]
   1d674:	cmp	r0, r5
   1d678:	bne	1d684 <next@@Base+0x4234>
   1d67c:	ldr	r0, [r4, #4]
   1d680:	blx	r0
   1d684:	ldr	r4, [r4, #8]
   1d688:	cmp	r4, #0
   1d68c:	bne	1d670 <next@@Base+0x4220>
   1d690:	pop	{r4, r5, fp, pc}
   1d694:	andeq	r2, r1, r4, asr sl
   1d698:	strheq	r4, [r1], -r8
   1d69c:	push	{r4, r5, r6, r7, fp, lr}
   1d6a0:	add	fp, sp, #16
   1d6a4:	ldr	r4, [pc, #100]	; 1d710 <next@@Base+0x42c0>
   1d6a8:	ldr	r4, [pc, r4]
   1d6ac:	ldr	r0, [r4]
   1d6b0:	cmp	r0, #0
   1d6b4:	beq	1d70c <next@@Base+0x42bc>
   1d6b8:	ldr	r5, [pc, #84]	; 1d714 <next@@Base+0x42c4>
   1d6bc:	mov	r6, #0
   1d6c0:	add	r5, pc, r5
   1d6c4:	ldr	r1, [r0]
   1d6c8:	ldr	r7, [r0, #8]
   1d6cc:	cmp	r1, r5
   1d6d0:	beq	1d6dc <next@@Base+0x428c>
   1d6d4:	mov	r6, r0
   1d6d8:	b	1d700 <next@@Base+0x42b0>
   1d6dc:	ldr	r1, [r4]
   1d6e0:	cmp	r0, r1
   1d6e4:	streq	r7, [r4]
   1d6e8:	ldr	r1, [r4, #4]
   1d6ec:	cmp	r0, r1
   1d6f0:	streq	r6, [r4, #4]
   1d6f4:	cmp	r6, #0
   1d6f8:	strne	r7, [r6, #8]
   1d6fc:	bl	12630 <free@plt>
   1d700:	mov	r0, r7
   1d704:	cmp	r7, #0
   1d708:	bne	1d6c4 <next@@Base+0x4274>
   1d70c:	pop	{r4, r5, r6, r7, fp, pc}
   1d710:	andeq	r2, r1, r4, lsl #20
   1d714:	andeq	r4, r1, r4, rrx
   1d718:	push	{r4, sl, fp, lr}
   1d71c:	add	fp, sp, #8
   1d720:	mov	r4, r0
   1d724:	mov	r0, #12
   1d728:	bl	126c0 <malloc@plt>
   1d72c:	ldr	r1, [pc, #60]	; 1d770 <next@@Base+0x4320>
   1d730:	mov	r2, #0
   1d734:	add	r1, pc, r1
   1d738:	stm	r0, {r1, r4}
   1d73c:	str	r2, [r0, #8]
   1d740:	ldr	r1, [pc, #44]	; 1d774 <next@@Base+0x4324>
   1d744:	ldr	r1, [pc, r1]
   1d748:	mov	r2, r1
   1d74c:	ldr	r3, [r2], #4
   1d750:	ldr	r4, [r2]
   1d754:	cmp	r3, #0
   1d758:	mov	r3, r2
   1d75c:	addne	r3, r4, #8
   1d760:	moveq	r2, r1
   1d764:	str	r0, [r3]
   1d768:	str	r0, [r2]
   1d76c:	pop	{r4, sl, fp, pc}
   1d770:	strdeq	r3, [r1], -r0
   1d774:	andeq	r2, r1, r4, ror #18

0001d778 <__gcov_flush@@Base>:
   1d778:	push	{r4, sl, fp, lr}
   1d77c:	add	fp, sp, #8
   1d780:	ldr	r0, [pc, #36]	; 1d7ac <__gcov_flush@@Base+0x34>
   1d784:	ldr	r0, [pc, r0]
   1d788:	ldr	r4, [r0]
   1d78c:	cmp	r4, #0
   1d790:	beq	1d7a8 <__gcov_flush@@Base+0x30>
   1d794:	ldr	r0, [r4, #4]
   1d798:	blx	r0
   1d79c:	ldr	r4, [r4, #8]
   1d7a0:	cmp	r4, #0
   1d7a4:	bne	1d794 <__gcov_flush@@Base+0x1c>
   1d7a8:	pop	{r4, sl, fp, pc}
   1d7ac:	andeq	r2, r1, r4, lsr #18
   1d7b0:	push	{r4, r5, r6, r7, fp, lr}
   1d7b4:	add	fp, sp, #16
   1d7b8:	ldr	r4, [pc, #100]	; 1d824 <__gcov_flush@@Base+0xac>
   1d7bc:	ldr	r4, [pc, r4]
   1d7c0:	ldr	r0, [r4]
   1d7c4:	cmp	r0, #0
   1d7c8:	beq	1d820 <__gcov_flush@@Base+0xa8>
   1d7cc:	ldr	r5, [pc, #84]	; 1d828 <__gcov_flush@@Base+0xb0>
   1d7d0:	mov	r6, #0
   1d7d4:	add	r5, pc, r5
   1d7d8:	ldr	r1, [r0]
   1d7dc:	ldr	r7, [r0, #8]
   1d7e0:	cmp	r1, r5
   1d7e4:	beq	1d7f0 <__gcov_flush@@Base+0x78>
   1d7e8:	mov	r6, r0
   1d7ec:	b	1d814 <__gcov_flush@@Base+0x9c>
   1d7f0:	ldr	r1, [r4]
   1d7f4:	cmp	r0, r1
   1d7f8:	streq	r7, [r4]
   1d7fc:	ldr	r1, [r4, #4]
   1d800:	cmp	r0, r1
   1d804:	streq	r6, [r4, #4]
   1d808:	cmp	r6, #0
   1d80c:	strne	r7, [r6, #8]
   1d810:	bl	12630 <free@plt>
   1d814:	mov	r0, r7
   1d818:	cmp	r7, #0
   1d81c:	bne	1d7d8 <__gcov_flush@@Base+0x60>
   1d820:	pop	{r4, r5, r6, r7, fp, pc}
   1d824:	andeq	r2, r1, ip, ror #17
   1d828:	andeq	r3, r1, r0, asr pc
   1d82c:	push	{r4, r5, fp, lr}
   1d830:	add	fp, sp, #8
   1d834:	mov	r4, r1
   1d838:	cmp	r0, #0
   1d83c:	beq	1d88c <__gcov_flush@@Base+0x114>
   1d840:	mov	r5, r0
   1d844:	mov	r0, #12
   1d848:	bl	126c0 <malloc@plt>
   1d84c:	ldr	r1, [pc, #204]	; 1d920 <__gcov_flush@@Base+0x1a8>
   1d850:	mov	r2, #0
   1d854:	add	r1, pc, r1
   1d858:	stm	r0, {r1, r5}
   1d85c:	str	r2, [r0, #8]
   1d860:	ldr	r1, [pc, #188]	; 1d924 <__gcov_flush@@Base+0x1ac>
   1d864:	ldr	r1, [pc, r1]
   1d868:	mov	r2, r1
   1d86c:	ldr	r3, [r2], #4
   1d870:	ldr	r5, [r2]
   1d874:	cmp	r3, #0
   1d878:	mov	r3, r2
   1d87c:	addne	r3, r5, #8
   1d880:	moveq	r2, r1
   1d884:	str	r0, [r3]
   1d888:	str	r0, [r2]
   1d88c:	cmp	r4, #0
   1d890:	beq	1d8dc <__gcov_flush@@Base+0x164>
   1d894:	mov	r0, #12
   1d898:	bl	126c0 <malloc@plt>
   1d89c:	ldr	r1, [pc, #132]	; 1d928 <__gcov_flush@@Base+0x1b0>
   1d8a0:	mov	r2, #0
   1d8a4:	add	r1, pc, r1
   1d8a8:	stm	r0, {r1, r4}
   1d8ac:	str	r2, [r0, #8]
   1d8b0:	ldr	r1, [pc, #116]	; 1d92c <__gcov_flush@@Base+0x1b4>
   1d8b4:	ldr	r1, [pc, r1]
   1d8b8:	mov	r2, r1
   1d8bc:	ldr	r3, [r2], #4
   1d8c0:	ldr	r5, [r2]
   1d8c4:	cmp	r3, #0
   1d8c8:	mov	r3, r2
   1d8cc:	addne	r3, r5, #8
   1d8d0:	moveq	r2, r1
   1d8d4:	str	r0, [r3]
   1d8d8:	str	r0, [r2]
   1d8dc:	ldr	r1, [pc, #76]	; 1d930 <__gcov_flush@@Base+0x1b8>
   1d8e0:	add	r1, pc, r1
   1d8e4:	ldrb	r0, [r1]
   1d8e8:	cmp	r0, #0
   1d8ec:	popne	{r4, r5, fp, pc}
   1d8f0:	ldr	r0, [pc, #60]	; 1d934 <__gcov_flush@@Base+0x1bc>
   1d8f4:	mov	r2, #1
   1d8f8:	strb	r2, [r1]
   1d8fc:	add	r0, pc, r0
   1d900:	bl	1dde0 <__libc_csu_fini@@Base+0x4>
   1d904:	ldr	r0, [pc, #44]	; 1d938 <__gcov_flush@@Base+0x1c0>
   1d908:	add	r0, pc, r0
   1d90c:	bl	1dde0 <__libc_csu_fini@@Base+0x4>
   1d910:	ldr	r0, [pc, #36]	; 1d93c <__gcov_flush@@Base+0x1c4>
   1d914:	add	r0, pc, r0
   1d918:	pop	{r4, r5, fp, lr}
   1d91c:	b	1dde0 <__libc_csu_fini@@Base+0x4>
   1d920:	ldrdeq	r3, [r1], -r0
   1d924:	andeq	r2, r1, r8, asr #16
   1d928:	andeq	r3, r1, r0, lsl #29
   1d92c:	strdeq	r2, [r1], -r4
   1d930:	andeq	r3, r1, r8, asr #28
   1d934:			; <UNDEFINED> instruction: 0xfffffeac
   1d938:			; <UNDEFINED> instruction: 0xfffffd8c
   1d93c:			; <UNDEFINED> instruction: 0xfffffd30
   1d940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d944:	add	fp, sp, #24
   1d948:	ldr	r7, [pc, #76]	; 1d99c <__gcov_flush@@Base+0x224>
   1d94c:	mov	r4, r0
   1d950:	mov	r5, #1
   1d954:	mov	r8, #0
   1d958:	ldr	r7, [pc, r7]
   1d95c:	mov	r6, #47	; 0x2f
   1d960:	b	1d968 <__gcov_flush@@Base+0x1f0>
   1d964:	add	r5, r5, #1
   1d968:	ldrb	r0, [r4, r5]
   1d96c:	cmp	r0, #47	; 0x2f
   1d970:	beq	1d980 <__gcov_flush@@Base+0x208>
   1d974:	cmp	r0, #0
   1d978:	bne	1d964 <__gcov_flush@@Base+0x1ec>
   1d97c:	b	1d998 <__gcov_flush@@Base+0x220>
   1d980:	strb	r8, [r4, r5]
   1d984:	ldr	r1, [r7]
   1d988:	mov	r0, r4
   1d98c:	bl	12744 <mkdir@plt>
   1d990:	strb	r6, [r4, r5]
   1d994:	b	1d964 <__gcov_flush@@Base+0x1ec>
   1d998:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d99c:	andeq	r2, r1, ip, asr #14
   1d9a0:	ldr	r0, [pc, #8]	; 1d9b0 <__gcov_flush@@Base+0x238>
   1d9a4:	ldr	r0, [pc, r0]
   1d9a8:	ldr	r0, [r0]
   1d9ac:	bx	lr
   1d9b0:	andeq	r2, r1, r0, lsl #14
   1d9b4:	ldr	r1, [pc, #8]	; 1d9c4 <__gcov_flush@@Base+0x24c>
   1d9b8:	ldr	r1, [pc, r1]
   1d9bc:	str	r0, [r1]
   1d9c0:	bx	lr
   1d9c4:	andeq	r2, r1, ip, ror #13
   1d9c8:	push	{r4, r5, r6, sl, fp, lr}
   1d9cc:	add	fp, sp, #16
   1d9d0:	sub	sp, sp, #392	; 0x188
   1d9d4:	mov	r6, sp
   1d9d8:	mov	r5, r0
   1d9dc:	mov	r0, r6
   1d9e0:	mov	r4, r1
   1d9e4:	bl	1266c <uname@plt>
   1d9e8:	cmp	r0, #0
   1d9ec:	blt	1da04 <__gcov_flush@@Base+0x28c>
   1d9f0:	add	r1, r6, #65	; 0x41
   1d9f4:	mov	r0, r5
   1d9f8:	mov	r2, r4
   1d9fc:	bl	1275c <strncpy@plt>
   1da00:	mov	r0, #0
   1da04:	sub	sp, fp, #16
   1da08:	pop	{r4, r5, r6, sl, fp, pc}
   1da0c:	push	{r4, r5, r6, sl, fp, lr}
   1da10:	add	fp, sp, #16
   1da14:	sub	sp, sp, #32
   1da18:	mov	r4, #0
   1da1c:	mov	r5, r0
   1da20:	str	r4, [sp, #20]
   1da24:	str	r4, [sp, #16]
   1da28:	str	r4, [sp, #12]
   1da2c:	str	r4, [sp, #8]
   1da30:	strh	r4, [sp, #2]
   1da34:	bl	126f0 <getpid@plt>
   1da38:	mov	r6, sp
   1da3c:	str	r0, [sp, #24]
   1da40:	mov	r0, #1
   1da44:	strh	r0, [sp]
   1da48:	mov	r0, r5
   1da4c:	mov	r1, #14
   1da50:	mov	r2, r6
   1da54:	bl	1278c <fcntl64@plt>
   1da58:	cmn	r0, #1
   1da5c:	bne	1da78 <__gcov_flush@@Base+0x300>
   1da60:	bl	1272c <__errno_location@plt>
   1da64:	ldr	r0, [r0]
   1da68:	cmp	r0, #4
   1da6c:	beq	1da48 <__gcov_flush@@Base+0x2d0>
   1da70:	cmp	r0, #37	; 0x25
   1da74:	mvneq	r4, #0
   1da78:	mov	r0, r4
   1da7c:	sub	sp, fp, #16
   1da80:	pop	{r4, r5, r6, sl, fp, pc}
   1da84:	push	{r4, r5, r6, sl, fp, lr}
   1da88:	add	fp, sp, #16
   1da8c:	sub	sp, sp, #32
   1da90:	mov	r4, #0
   1da94:	mov	r5, r0
   1da98:	str	r4, [sp, #20]
   1da9c:	str	r4, [sp, #16]
   1daa0:	str	r4, [sp, #12]
   1daa4:	str	r4, [sp, #8]
   1daa8:	strh	r4, [sp, #2]
   1daac:	bl	126f0 <getpid@plt>
   1dab0:	mov	r6, sp
   1dab4:	str	r0, [sp, #24]
   1dab8:	mov	r0, #2
   1dabc:	strh	r0, [sp]
   1dac0:	mov	r0, r5
   1dac4:	mov	r1, #14
   1dac8:	mov	r2, r6
   1dacc:	bl	1278c <fcntl64@plt>
   1dad0:	cmn	r0, #1
   1dad4:	bne	1daf0 <__gcov_flush@@Base+0x378>
   1dad8:	bl	1272c <__errno_location@plt>
   1dadc:	ldr	r0, [r0]
   1dae0:	cmp	r0, #4
   1dae4:	beq	1dac0 <__gcov_flush@@Base+0x348>
   1dae8:	cmp	r0, #37	; 0x25
   1daec:	mvneq	r4, #0
   1daf0:	mov	r0, r4
   1daf4:	sub	sp, fp, #16
   1daf8:	pop	{r4, r5, r6, sl, fp, pc}
   1dafc:	push	{r4, r5, fp, lr}
   1db00:	add	fp, sp, #8
   1db04:	sub	sp, sp, #32
   1db08:	mov	r2, #182	; 0xb6
   1db0c:	orr	r2, r2, #256	; 0x100
   1db10:	mov	r1, #66	; 0x42
   1db14:	bl	126a8 <open64@plt>
   1db18:	cmp	r0, #0
   1db1c:	blt	1db98 <__gcov_flush@@Base+0x420>
   1db20:	mov	r4, r0
   1db24:	mov	r0, #0
   1db28:	str	r0, [sp, #20]
   1db2c:	str	r0, [sp, #16]
   1db30:	str	r0, [sp, #12]
   1db34:	str	r0, [sp, #8]
   1db38:	strh	r0, [sp, #2]
   1db3c:	bl	126f0 <getpid@plt>
   1db40:	mov	r5, sp
   1db44:	str	r0, [sp, #24]
   1db48:	mov	r0, #1
   1db4c:	strh	r0, [sp]
   1db50:	mov	r0, r4
   1db54:	mov	r1, #14
   1db58:	mov	r2, r5
   1db5c:	bl	1278c <fcntl64@plt>
   1db60:	cmn	r0, #1
   1db64:	bne	1db80 <__gcov_flush@@Base+0x408>
   1db68:	bl	1272c <__errno_location@plt>
   1db6c:	ldr	r0, [r0]
   1db70:	cmp	r0, #4
   1db74:	beq	1db50 <__gcov_flush@@Base+0x3d8>
   1db78:	cmp	r0, #37	; 0x25
   1db7c:	beq	1dba4 <__gcov_flush@@Base+0x42c>
   1db80:	ldr	r1, [pc, #76]	; 1dbd4 <__gcov_flush@@Base+0x45c>
   1db84:	mov	r0, r4
   1db88:	add	r1, pc, r1
   1db8c:	bl	125f4 <fdopen@plt>
   1db90:	sub	sp, fp, #8
   1db94:	pop	{r4, r5, fp, pc}
   1db98:	mov	r0, #0
   1db9c:	sub	sp, fp, #8
   1dba0:	pop	{r4, r5, fp, pc}
   1dba4:	ldr	r1, [pc, #28]	; 1dbc8 <__gcov_flush@@Base+0x450>
   1dba8:	ldr	r2, [pc, #28]	; 1dbcc <__gcov_flush@@Base+0x454>
   1dbac:	ldr	r0, [pc, #28]	; 1dbd0 <__gcov_flush@@Base+0x458>
   1dbb0:	add	r1, pc, r1
   1dbb4:	add	r2, pc, r2
   1dbb8:	ldr	r0, [pc, r0]
   1dbbc:	ldr	r0, [r0]
   1dbc0:	bl	12720 <fprintf@plt>
   1dbc4:	b	1db80 <__gcov_flush@@Base+0x408>
   1dbc8:	andeq	r1, r0, sl, lsl ip
   1dbcc:	andeq	r1, r0, pc, asr ip
   1dbd0:	strdeq	r2, [r1], -r8
   1dbd4:	andeq	r1, r0, r0, lsr #21
   1dbd8:	push	{r4, r5, r6, sl, fp, lr}
   1dbdc:	add	fp, sp, #16
   1dbe0:	mov	r6, r0
   1dbe4:	ldr	r0, [pc, #120]	; 1dc64 <__gcov_flush@@Base+0x4ec>
   1dbe8:	mov	r4, r1
   1dbec:	add	r0, pc, r0
   1dbf0:	bl	126b4 <getenv@plt>
   1dbf4:	mov	r5, r0
   1dbf8:	ldr	r0, [pc, #104]	; 1dc68 <__gcov_flush@@Base+0x4f0>
   1dbfc:	add	r0, pc, r0
   1dc00:	bl	126b4 <getenv@plt>
   1dc04:	mov	r1, #0
   1dc08:	str	r1, [r4]
   1dc0c:	str	r1, [r6]
   1dc10:	cmp	r5, #0
   1dc14:	ldrbne	r2, [r5]
   1dc18:	cmpne	r2, #0
   1dc1c:	bne	1dc28 <__gcov_flush@@Base+0x4b0>
   1dc20:	mov	r0, r1
   1dc24:	pop	{r4, r5, r6, sl, fp, pc}
   1dc28:	cmp	r0, #0
   1dc2c:	beq	1dc44 <__gcov_flush@@Base+0x4cc>
   1dc30:	mov	r1, #0
   1dc34:	mov	r2, #10
   1dc38:	bl	12600 <strtol@plt>
   1dc3c:	bic	r0, r0, r0, asr #31
   1dc40:	b	1dc48 <__gcov_flush@@Base+0x4d0>
   1dc44:	mov	r0, #0
   1dc48:	str	r0, [r6]
   1dc4c:	mov	r0, r5
   1dc50:	bl	12708 <strlen@plt>
   1dc54:	mov	r1, r5
   1dc58:	str	r0, [r4]
   1dc5c:	mov	r0, r1
   1dc60:	pop	{r4, r5, r6, sl, fp, pc}
   1dc64:	andeq	r1, r0, r5, asr ip
   1dc68:	andeq	r1, r0, r1, asr ip
   1dc6c:	push	{r4, r5, r6, r7, fp, lr}
   1dc70:	add	fp, sp, #16
   1dc74:	mov	r6, r0
   1dc78:	ldr	r0, [fp, #8]
   1dc7c:	mov	r5, r3
   1dc80:	mov	r7, r2
   1dc84:	mov	r4, r1
   1dc88:	cmp	r0, #1
   1dc8c:	blt	1dcc4 <__gcov_flush@@Base+0x54c>
   1dc90:	add	r1, r4, #1
   1dc94:	mov	r2, #0
   1dc98:	ldrb	r3, [r1]
   1dc9c:	cmp	r3, #47	; 0x2f
   1dca0:	beq	1dcb0 <__gcov_flush@@Base+0x538>
   1dca4:	cmp	r3, #0
   1dca8:	bne	1dcb8 <__gcov_flush@@Base+0x540>
   1dcac:	b	1dcc4 <__gcov_flush@@Base+0x54c>
   1dcb0:	add	r2, r2, #1
   1dcb4:	mov	r4, r1
   1dcb8:	add	r1, r1, #1
   1dcbc:	cmp	r2, r0
   1dcc0:	blt	1dc98 <__gcov_flush@@Base+0x520>
   1dcc4:	mov	r0, r6
   1dcc8:	mov	r1, r7
   1dccc:	mov	r2, r5
   1dcd0:	bl	12648 <memcpy@plt>
   1dcd4:	add	r0, r7, r5
   1dcd8:	ldrb	r0, [r0, #-1]
   1dcdc:	cmp	r0, #47	; 0x2f
   1dce0:	movne	r0, #47	; 0x2f
   1dce4:	strbne	r0, [r6, r5]
   1dce8:	mov	r0, r4
   1dcec:	addne	r5, r5, #1
   1dcf0:	add	r5, r6, r5
   1dcf4:	bl	12708 <strlen@plt>
   1dcf8:	add	r2, r0, #1
   1dcfc:	mov	r0, r5
   1dd00:	mov	r1, r4
   1dd04:	pop	{r4, r5, r6, r7, fp, lr}
   1dd08:	b	12648 <memcpy@plt>
   1dd0c:	mov	r1, #47	; 0x2f
   1dd10:	b	12714 <strchr@plt>
   1dd14:	mov	r1, #47	; 0x2f
   1dd18:	b	12798 <strrchr@plt>
   1dd1c:	push	{fp, lr}
   1dd20:	mov	fp, sp
   1dd24:	sub	sp, sp, #8
   1dd28:	mov	r0, #0
   1dd2c:	str	r0, [sp, #4]
   1dd30:	add	r1, sp, #4
   1dd34:	mov	r0, #2
   1dd38:	bl	12768 <prctl@plt>
   1dd3c:	ldr	r1, [sp, #4]
   1dd40:	cmp	r0, #0
   1dd44:	cmpeq	r1, #9
   1dd48:	bne	1dd5c <__gcov_flush@@Base+0x5e4>
   1dd4c:	mov	r0, #1
   1dd50:	mov	r1, #0
   1dd54:	bl	12768 <prctl@plt>
   1dd58:	ldr	r1, [sp, #4]
   1dd5c:	sub	r0, r1, #9
   1dd60:	clz	r0, r0
   1dd64:	lsr	r0, r0, #5
   1dd68:	mov	sp, fp
   1dd6c:	pop	{fp, pc}
   1dd70:	mov	r0, #1
   1dd74:	mov	r1, #9
   1dd78:	b	12768 <prctl@plt>

0001dd7c <__libc_csu_init@@Base>:
   1dd7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dd80:	mov	r7, r0
   1dd84:	ldr	r6, [pc, #72]	; 1ddd4 <__libc_csu_init@@Base+0x58>
   1dd88:	ldr	r5, [pc, #72]	; 1ddd8 <__libc_csu_init@@Base+0x5c>
   1dd8c:	add	r6, pc, r6
   1dd90:	add	r5, pc, r5
   1dd94:	sub	r6, r6, r5
   1dd98:	mov	r8, r1
   1dd9c:	mov	r9, r2
   1dda0:	bl	125d4 <fdopen@plt-0x20>
   1dda4:	asrs	r6, r6, #2
   1dda8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ddac:	mov	r4, #0
   1ddb0:	add	r4, r4, #1
   1ddb4:	ldr	r3, [r5], #4
   1ddb8:	mov	r2, r9
   1ddbc:	mov	r1, r8
   1ddc0:	mov	r0, r7
   1ddc4:	blx	r3
   1ddc8:	cmp	r6, r4
   1ddcc:	bne	1ddb0 <__libc_csu_init@@Base+0x34>
   1ddd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ddd4:	andeq	r2, r1, r0, ror r1
   1ddd8:	andeq	r2, r1, r8, asr r1

0001dddc <__libc_csu_fini@@Base>:
   1dddc:	bx	lr
   1dde0:	ldr	r3, [pc, #12]	; 1ddf4 <__libc_csu_fini@@Base+0x18>
   1dde4:	mov	r1, #0
   1dde8:	add	r3, pc, r3
   1ddec:	ldr	r2, [r3]
   1ddf0:	b	12738 <__cxa_atexit@plt>
   1ddf4:	ldrdeq	r2, [r1], -r4

Disassembly of section .fini:

0001ddf8 <.fini>:
   1ddf8:	push	{r3, lr}
   1ddfc:	pop	{r3, pc}
