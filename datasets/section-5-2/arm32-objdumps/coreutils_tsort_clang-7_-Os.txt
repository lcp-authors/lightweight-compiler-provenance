
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d8c <.init>:
   10d8c:	push	{r3, lr}
   10d90:	bl	11040 <__assert_fail@plt+0x48>
   10d94:	pop	{r3, pc}

Disassembly of section .plt:

00010d98 <calloc@plt-0x14>:
   10d98:	push	{lr}		; (str lr, [sp, #-4]!)
   10d9c:	ldr	lr, [pc, #4]	; 10da8 <calloc@plt-0x4>
   10da0:	add	lr, pc, lr
   10da4:	ldr	pc, [lr, #8]!
   10da8:	andeq	r5, r1, r8, asr r2

00010dac <calloc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #600]!	; 0x258

00010db8 <fputs_unlocked@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #592]!	; 0x250

00010dc4 <strcmp@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #584]!	; 0x248

00010dd0 <posix_fadvise64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #576]!	; 0x240

00010ddc <fflush@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #568]!	; 0x238

00010de8 <free@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #560]!	; 0x230

00010df4 <_exit@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #552]!	; 0x228

00010e00 <memcpy@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #544]!	; 0x220

00010e0c <mbsinit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #536]!	; 0x218

00010e18 <memcmp@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #528]!	; 0x210

00010e24 <getc_unlocked@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #520]!	; 0x208

00010e30 <dcgettext@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #512]!	; 0x200

00010e3c <dup2@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #504]!	; 0x1f8

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #496]!	; 0x1f0

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e60 <iswprint@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #480]!	; 0x1e0

00010e6c <lseek64@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #472]!	; 0x1d8

00010e78 <__ctype_get_mb_cur_max@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #464]!	; 0x1d0

00010e84 <__fpending@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e90 <ferror_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #448]!	; 0x1c0

00010e9c <mbrtowc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea8 <error@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #432]!	; 0x1b0

00010eb4 <open64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #424]!	; 0x1a8

00010ec0 <puts@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #416]!	; 0x1a0

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #408]!	; 0x198

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #400]!	; 0x190

00010ee4 <__freading@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #392]!	; 0x188

00010ef0 <__gmon_start__@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #384]!	; 0x180

00010efc <freopen64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #376]!	; 0x178

00010f08 <getopt_long@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #368]!	; 0x170

00010f14 <__ctype_b_loc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #360]!	; 0x168

00010f20 <exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #352]!	; 0x160

00010f2c <strlen@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #344]!	; 0x158

00010f38 <__errno_location@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #336]!	; 0x150

00010f44 <__cxa_atexit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #328]!	; 0x148

00010f50 <memset@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #320]!	; 0x140

00010f5c <__printf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #312]!	; 0x138

00010f68 <fileno@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #304]!	; 0x130

00010f74 <__fprintf_chk@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #296]!	; 0x128

00010f80 <fclose@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #288]!	; 0x120

00010f8c <fseeko64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #280]!	; 0x118

00010f98 <setlocale@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #272]!	; 0x110

00010fa4 <strrchr@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #264]!	; 0x108

00010fb0 <nl_langinfo@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #256]!	; 0x100

00010fbc <bindtextdomain@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #248]!	; 0xf8

00010fc8 <fputs@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #240]!	; 0xf0

00010fd4 <strncmp@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #232]!	; 0xe8

00010fe0 <abort@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #224]!	; 0xe0

00010fec <close@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #216]!	; 0xd8

00010ff8 <__assert_fail@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00011004 <.text>:
   11004:	mov	fp, #0
   11008:	mov	lr, #0
   1100c:	pop	{r1}		; (ldr r1, [sp], #4)
   11010:	mov	r2, sp
   11014:	push	{r2}		; (str r2, [sp, #-4]!)
   11018:	push	{r0}		; (str r0, [sp, #-4]!)
   1101c:	ldr	ip, [pc, #16]	; 11034 <__assert_fail@plt+0x3c>
   11020:	push	{ip}		; (str ip, [sp, #-4]!)
   11024:	ldr	r0, [pc, #12]	; 11038 <__assert_fail@plt+0x40>
   11028:	ldr	r3, [pc, #12]	; 1103c <__assert_fail@plt+0x44>
   1102c:	bl	10ed8 <__libc_start_main@plt>
   11030:	bl	10fe0 <abort@plt>
   11034:	strdeq	r4, [r1], -r8
   11038:	andeq	r1, r1, r4, lsr r3
   1103c:	muleq	r1, r8, sp
   11040:	ldr	r3, [pc, #20]	; 1105c <__assert_fail@plt+0x64>
   11044:	ldr	r2, [pc, #20]	; 11060 <__assert_fail@plt+0x68>
   11048:	add	r3, pc, r3
   1104c:	ldr	r2, [r3, r2]
   11050:	cmp	r2, #0
   11054:	bxeq	lr
   11058:	b	10ef0 <__gmon_start__@plt>
   1105c:			; <UNDEFINED> instruction: 0x00014fb0
   11060:	ldrdeq	r0, [r0], -r4
   11064:	ldr	r0, [pc, #24]	; 11084 <__assert_fail@plt+0x8c>
   11068:	ldr	r3, [pc, #24]	; 11088 <__assert_fail@plt+0x90>
   1106c:	cmp	r3, r0
   11070:	bxeq	lr
   11074:	ldr	r3, [pc, #16]	; 1108c <__assert_fail@plt+0x94>
   11078:	cmp	r3, #0
   1107c:	bxeq	lr
   11080:	bx	r3
   11084:	andeq	r6, r2, r8, lsr #2
   11088:	andeq	r6, r2, r8, lsr #2
   1108c:	andeq	r0, r0, r0
   11090:	ldr	r0, [pc, #36]	; 110bc <__assert_fail@plt+0xc4>
   11094:	ldr	r1, [pc, #36]	; 110c0 <__assert_fail@plt+0xc8>
   11098:	sub	r1, r1, r0
   1109c:	asr	r1, r1, #2
   110a0:	add	r1, r1, r1, lsr #31
   110a4:	asrs	r1, r1, #1
   110a8:	bxeq	lr
   110ac:	ldr	r3, [pc, #16]	; 110c4 <__assert_fail@plt+0xcc>
   110b0:	cmp	r3, #0
   110b4:	bxeq	lr
   110b8:	bx	r3
   110bc:	andeq	r6, r2, r8, lsr #2
   110c0:	andeq	r6, r2, r8, lsr #2
   110c4:	andeq	r0, r0, r0
   110c8:	push	{r4, lr}
   110cc:	ldr	r4, [pc, #24]	; 110ec <__assert_fail@plt+0xf4>
   110d0:	ldrb	r3, [r4]
   110d4:	cmp	r3, #0
   110d8:	popne	{r4, pc}
   110dc:	bl	11064 <__assert_fail@plt+0x6c>
   110e0:	mov	r3, #1
   110e4:	strb	r3, [r4]
   110e8:	pop	{r4, pc}
   110ec:	andeq	r6, r2, ip, asr #2
   110f0:	b	11090 <__assert_fail@plt+0x98>
   110f4:	push	{fp, lr}
   110f8:	mov	fp, sp
   110fc:	sub	sp, sp, #56	; 0x38
   11100:	mov	r8, r0
   11104:	cmp	r0, #0
   11108:	bne	112f4 <__assert_fail@plt+0x2fc>
   1110c:	movw	r1, #20043	; 0x4e4b
   11110:	mov	r0, #0
   11114:	mov	r2, #5
   11118:	movt	r1, #1
   1111c:	bl	10e30 <dcgettext@plt>
   11120:	mov	r1, r0
   11124:	movw	r0, #24936	; 0x6168
   11128:	movt	r0, #2
   1112c:	ldr	r2, [r0]
   11130:	mov	r0, #1
   11134:	bl	10f5c <__printf_chk@plt>
   11138:	movw	r1, #20317	; 0x4f5d
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	movt	r1, #1
   11148:	bl	10e30 <dcgettext@plt>
   1114c:	movw	r9, #24900	; 0x6144
   11150:	movt	r9, #2
   11154:	ldr	r1, [r9]
   11158:	bl	10db8 <fputs_unlocked@plt>
   1115c:	movw	r1, #20686	; 0x50ce
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10e30 <dcgettext@plt>
   11170:	ldr	r1, [r9]
   11174:	bl	10db8 <fputs_unlocked@plt>
   11178:	movw	r1, #20143	; 0x4eaf
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e30 <dcgettext@plt>
   1118c:	ldr	r1, [r9]
   11190:	bl	10db8 <fputs_unlocked@plt>
   11194:	movw	r1, #20188	; 0x4edc
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e30 <dcgettext@plt>
   111a8:	ldr	r1, [r9]
   111ac:	bl	10db8 <fputs_unlocked@plt>
   111b0:	movw	r0, #20984	; 0x51f8
   111b4:	mov	r6, sp
   111b8:	movt	r0, #1
   111bc:	mov	r1, r6
   111c0:	ldm	r0!, {r2, r3, r4, r5}
   111c4:	stmia	r1!, {r2, r3, r4, r5}
   111c8:	ldm	r0!, {r2, r3, r4, r5, r7}
   111cc:	stmia	r1!, {r2, r3, r4, r5, r7}
   111d0:	ldm	r0, {r2, r3, r4, r5, r7}
   111d4:	stm	r1, {r2, r3, r4, r5, r7}
   111d8:	movw	r1, #20373	; 0x4f95
   111dc:	movw	r5, #20242	; 0x4f12
   111e0:	movt	r1, #1
   111e4:	movt	r5, #1
   111e8:	mov	r0, r5
   111ec:	bl	10dc4 <strcmp@plt>
   111f0:	cmp	r0, #0
   111f4:	ldrne	r1, [r6, #8]!
   111f8:	cmpne	r1, #0
   111fc:	bne	111e8 <__assert_fail@plt+0x1f0>
   11200:	ldr	r6, [r6, #4]
   11204:	movw	r1, #20468	; 0x4ff4
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10e30 <dcgettext@plt>
   11218:	movw	r2, #20272	; 0x4f30
   1121c:	movw	r3, #20491	; 0x500b
   11220:	mov	r1, r0
   11224:	mov	r0, #1
   11228:	movt	r2, #1
   1122c:	movt	r3, #1
   11230:	bl	10f5c <__printf_chk@plt>
   11234:	cmp	r6, #0
   11238:	mov	r0, #5
   1123c:	mov	r1, #0
   11240:	moveq	r6, r5
   11244:	bl	10f98 <setlocale@plt>
   11248:	cmp	r0, #0
   1124c:	beq	11284 <__assert_fail@plt+0x28c>
   11250:	movw	r1, #20531	; 0x5033
   11254:	mov	r2, #3
   11258:	movt	r1, #1
   1125c:	bl	10fd4 <strncmp@plt>
   11260:	cmp	r0, #0
   11264:	beq	11284 <__assert_fail@plt+0x28c>
   11268:	movw	r1, #20535	; 0x5037
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10e30 <dcgettext@plt>
   1127c:	ldr	r1, [r9]
   11280:	bl	10db8 <fputs_unlocked@plt>
   11284:	movw	r1, #20606	; 0x507e
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10e30 <dcgettext@plt>
   11298:	movw	r2, #20491	; 0x500b
   1129c:	mov	r1, r0
   112a0:	mov	r0, #1
   112a4:	mov	r3, r5
   112a8:	movt	r2, #1
   112ac:	bl	10f5c <__printf_chk@plt>
   112b0:	movw	r1, #20633	; 0x5099
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10e30 <dcgettext@plt>
   112c4:	movw	r3, #20687	; 0x50cf
   112c8:	mov	r1, r0
   112cc:	movw	r0, #20401	; 0x4fb1
   112d0:	cmp	r6, r5
   112d4:	mov	r2, r6
   112d8:	movt	r0, #1
   112dc:	movt	r3, #1
   112e0:	moveq	r3, r0
   112e4:	mov	r0, #1
   112e8:	bl	10f5c <__printf_chk@plt>
   112ec:	mov	r0, r8
   112f0:	bl	10f20 <exit@plt>
   112f4:	movw	r0, #24888	; 0x6138
   112f8:	movw	r1, #20004	; 0x4e24
   112fc:	mov	r2, #5
   11300:	movt	r0, #2
   11304:	movt	r1, #1
   11308:	ldr	r5, [r0]
   1130c:	mov	r0, #0
   11310:	bl	10e30 <dcgettext@plt>
   11314:	mov	r2, r0
   11318:	movw	r0, #24936	; 0x6168
   1131c:	mov	r1, #1
   11320:	movt	r0, #2
   11324:	ldr	r3, [r0]
   11328:	mov	r0, r5
   1132c:	bl	10f74 <__fprintf_chk@plt>
   11330:	b	112ec <__assert_fail@plt+0x2f4>
   11334:	push	{fp, lr}
   11338:	mov	fp, sp
   1133c:	sub	sp, sp, #24
   11340:	mov	r5, r0
   11344:	ldr	r0, [r1]
   11348:	mov	r4, r1
   1134c:	bl	12354 <__assert_fail@plt+0x135c>
   11350:	movw	r1, #20687	; 0x50cf
   11354:	mov	r0, #6
   11358:	movt	r1, #1
   1135c:	bl	10f98 <setlocale@plt>
   11360:	movw	r6, #20276	; 0x4f34
   11364:	movw	r1, #20248	; 0x4f18
   11368:	movt	r6, #1
   1136c:	movt	r1, #1
   11370:	mov	r0, r6
   11374:	bl	10fbc <bindtextdomain@plt>
   11378:	mov	r0, r6
   1137c:	bl	10e54 <textdomain@plt>
   11380:	movw	r0, #7496	; 0x1d48
   11384:	movt	r0, #1
   11388:	bl	14dfc <__assert_fail@plt+0x3e04>
   1138c:	movw	r0, #24800	; 0x60e0
   11390:	movw	r2, #20286	; 0x4f3e
   11394:	movw	r3, #4340	; 0x10f4
   11398:	mov	r6, #1
   1139c:	mov	r1, #0
   113a0:	movt	r0, #2
   113a4:	movt	r2, #1
   113a8:	movt	r3, #1
   113ac:	ldr	r0, [r0]
   113b0:	stm	sp, {r0, r6}
   113b4:	str	r3, [sp, #8]
   113b8:	movw	r3, #20272	; 0x4f30
   113bc:	str	r2, [sp, #12]
   113c0:	movw	r2, #20242	; 0x4f12
   113c4:	str	r1, [sp, #16]
   113c8:	mov	r0, r5
   113cc:	mov	r1, r4
   113d0:	movt	r2, #1
   113d4:	movt	r3, #1
   113d8:	bl	1228c <__assert_fail@plt+0x1294>
   113dc:	movw	r6, #24880	; 0x6130
   113e0:	movt	r6, #2
   113e4:	ldr	r0, [r6]
   113e8:	sub	r1, r5, r0
   113ec:	cmp	r1, #2
   113f0:	blt	11438 <__assert_fail@plt+0x440>
   113f4:	movw	r1, #20300	; 0x4f4c
   113f8:	mov	r0, #0
   113fc:	mov	r2, #5
   11400:	movt	r1, #1
   11404:	bl	10e30 <dcgettext@plt>
   11408:	mov	r5, r0
   1140c:	ldr	r0, [r6]
   11410:	add	r0, r4, r0, lsl #2
   11414:	ldr	r0, [r0, #4]
   11418:	bl	13d58 <__assert_fail@plt+0x2d60>
   1141c:	mov	r3, r0
   11420:	mov	r0, #0
   11424:	mov	r1, #0
   11428:	mov	r2, r5
   1142c:	bl	10ea8 <error@plt>
   11430:	mov	r0, #1
   11434:	bl	110f4 <__assert_fail@plt+0xfc>
   11438:	cmp	r0, r5
   1143c:	bne	1144c <__assert_fail@plt+0x454>
   11440:	movw	r0, #21214	; 0x52de
   11444:	movt	r0, #1
   11448:	bl	11454 <__assert_fail@plt+0x45c>
   1144c:	ldr	r0, [r4, r0, lsl #2]
   11450:	bl	11454 <__assert_fail@plt+0x45c>
   11454:	push	{fp, lr}
   11458:	mov	fp, sp
   1145c:	sub	sp, sp, #40	; 0x28
   11460:	movw	r1, #21214	; 0x52de
   11464:	mov	r9, r0
   11468:	movt	r1, #1
   1146c:	bl	10dc4 <strcmp@plt>
   11470:	mov	r4, r0
   11474:	mov	r0, #28
   11478:	bl	148a4 <__assert_fail@plt+0x38ac>
   1147c:	mov	sl, r0
   11480:	cmp	r4, #0
   11484:	str	r4, [sp, #16]
   11488:	beq	114b0 <__assert_fail@plt+0x4b8>
   1148c:	movw	r0, #24896	; 0x6140
   11490:	movw	r1, #21065	; 0x5249
   11494:	movt	r0, #2
   11498:	movt	r1, #1
   1149c:	ldr	r2, [r0]
   114a0:	mov	r0, r9
   114a4:	bl	11f68 <__assert_fail@plt+0xf70>
   114a8:	cmp	r0, #0
   114ac:	beq	11a9c <__assert_fail@plt+0xaa4>
   114b0:	movw	r4, #24896	; 0x6140
   114b4:	mov	r1, #2
   114b8:	movt	r4, #2
   114bc:	ldr	r0, [r4]
   114c0:	bl	11e34 <__assert_fail@plt+0xe3c>
   114c4:	sub	r6, fp, #8
   114c8:	mov	r0, r6
   114cc:	bl	13e90 <__assert_fail@plt+0x2e98>
   114d0:	movw	r5, #20684	; 0x50cc
   114d4:	mov	r0, #0
   114d8:	str	r9, [fp, #-12]
   114dc:	movt	r5, #1
   114e0:	mov	r7, r0
   114e4:	ldr	r0, [r4]
   114e8:	mov	r1, r5
   114ec:	mov	r2, #3
   114f0:	mov	r3, r6
   114f4:	bl	13ea0 <__assert_fail@plt+0x2ea8>
   114f8:	cmn	r0, #1
   114fc:	beq	11854 <__assert_fail@plt+0x85c>
   11500:	cmp	r0, #0
   11504:	str	r7, [fp, #-16]
   11508:	beq	11ab4 <__assert_fail@plt+0xabc>
   1150c:	ldr	r5, [sl, #8]
   11510:	ldr	r7, [fp, #-4]
   11514:	cmp	r5, #0
   11518:	beq	11584 <__assert_fail@plt+0x58c>
   1151c:	cmp	r7, #0
   11520:	str	sl, [sp, #20]
   11524:	ldrne	r1, [r5]
   11528:	cmpne	r1, #0
   1152c:	beq	11a14 <__assert_fail@plt+0xa1c>
   11530:	ldr	r6, [sp, #20]
   11534:	mov	sl, r5
   11538:	mov	r0, r7
   1153c:	bl	10dc4 <strcmp@plt>
   11540:	cmp	r0, #0
   11544:	beq	115ac <__assert_fail@plt+0x5b4>
   11548:	mov	r4, r0
   1154c:	mov	r0, #8
   11550:	movwlt	r0, #4
   11554:	ldr	r0, [r5, r0]
   11558:	cmp	r0, #0
   1155c:	beq	1161c <__assert_fail@plt+0x624>
   11560:	ldrb	r1, [r0, #12]
   11564:	cmp	r1, #0
   11568:	ldr	r1, [r0]
   1156c:	movne	r6, r5
   11570:	movne	sl, r0
   11574:	mov	r5, r0
   11578:	cmp	r1, #0
   1157c:	bne	11538 <__assert_fail@plt+0x540>
   11580:	b	11a14 <__assert_fail@plt+0xa1c>
   11584:	mov	r0, #28
   11588:	bl	148a4 <__assert_fail@plt+0x38ac>
   1158c:	mov	r8, r0
   11590:	cmp	r7, #0
   11594:	beq	115a4 <__assert_fail@plt+0x5ac>
   11598:	mov	r0, r7
   1159c:	bl	149cc <__assert_fail@plt+0x39d4>
   115a0:	str	r0, [r8]
   115a4:	str	r8, [sl, #8]
   115a8:	b	115c0 <__assert_fail@plt+0x5c8>
   115ac:	mov	r8, r5
   115b0:	ldr	sl, [sp, #20]
   115b4:	movw	r4, #24896	; 0x6140
   115b8:	sub	r6, fp, #8
   115bc:	movt	r4, #2
   115c0:	ldr	r7, [fp, #-16]
   115c4:	movw	r5, #20684	; 0x50cc
   115c8:	movt	r5, #1
   115cc:	cmp	r7, #0
   115d0:	mov	r0, r8
   115d4:	beq	114e0 <__assert_fail@plt+0x4e8>
   115d8:	ldr	r1, [r8]
   115dc:	ldr	r0, [r7]
   115e0:	bl	10dc4 <strcmp@plt>
   115e4:	cmp	r0, #0
   115e8:	mov	r0, #0
   115ec:	beq	114e0 <__assert_fail@plt+0x4e8>
   115f0:	ldr	r0, [r8, #16]
   115f4:	add	r0, r0, #1
   115f8:	str	r0, [r8, #16]
   115fc:	mov	r0, #8
   11600:	bl	145bc <__assert_fail@plt+0x35c4>
   11604:	str	r8, [r0]
   11608:	ldr	r1, [r7, #24]
   1160c:	str	r1, [r0, #4]
   11610:	str	r0, [r7, #24]
   11614:	mov	r0, #0
   11618:	b	114e0 <__assert_fail@plt+0x4e8>
   1161c:	mov	r0, #28
   11620:	add	r9, r5, #8
   11624:	bl	148a4 <__assert_fail@plt+0x38ac>
   11628:	mov	r8, r0
   1162c:	mov	r0, r7
   11630:	bl	149cc <__assert_fail@plt+0x39d4>
   11634:	cmp	r4, #0
   11638:	str	r0, [r8]
   1163c:	addlt	r9, r5, #4
   11640:	cmp	sl, #0
   11644:	str	r8, [r9]
   11648:	ldrne	r1, [sl]
   1164c:	cmpne	r1, #0
   11650:	beq	11a5c <__assert_fail@plt+0xa64>
   11654:	mov	r0, r7
   11658:	bl	10dc4 <strcmp@plt>
   1165c:	cmp	r0, #0
   11660:	beq	11a5c <__assert_fail@plt+0xa64>
   11664:	mov	r4, r0
   11668:	mov	r0, #1
   1166c:	ldr	r9, [fp, #-12]
   11670:	mvnlt	r0, #0
   11674:	str	r0, [sp, #12]
   11678:	mov	r0, #8
   1167c:	movwlt	r0, #4
   11680:	ldr	r0, [sl, r0]
   11684:	cmp	r0, r8
   11688:	str	r0, [sp, #8]
   1168c:	beq	116e4 <__assert_fail@plt+0x6ec>
   11690:	ldr	r5, [sp, #8]
   11694:	cmp	r5, #0
   11698:	ldrne	r1, [r5]
   1169c:	cmpne	r1, #0
   116a0:	beq	11a7c <__assert_fail@plt+0xa84>
   116a4:	mov	r0, r7
   116a8:	bl	10dc4 <strcmp@plt>
   116ac:	cmp	r0, #0
   116b0:	beq	11a7c <__assert_fail@plt+0xa84>
   116b4:	cmn	r0, #1
   116b8:	bgt	116cc <__assert_fail@plt+0x6d4>
   116bc:	mov	r0, #255	; 0xff
   116c0:	strb	r0, [r5, #12]
   116c4:	add	r0, r5, #4
   116c8:	b	116d8 <__assert_fail@plt+0x6e0>
   116cc:	mov	r0, #1
   116d0:	strb	r0, [r5, #12]
   116d4:	add	r0, r5, #8
   116d8:	ldr	r5, [r0]
   116dc:	cmp	r5, r8
   116e0:	bne	11694 <__assert_fail@plt+0x69c>
   116e4:	mov	r0, sl
   116e8:	ldr	r3, [sp, #12]
   116ec:	ldrsb	r2, [r0, #12]!
   116f0:	uxtb	r1, r2
   116f4:	cmp	r1, #0
   116f8:	cmnne	r2, r3
   116fc:	bne	1170c <__assert_fail@plt+0x714>
   11700:	add	r1, r1, r3
   11704:	strb	r1, [r0]
   11708:	b	115b0 <__assert_fail@plt+0x5b8>
   1170c:	ldr	r5, [sp, #8]
   11710:	ldr	r2, [sp, #12]
   11714:	add	r3, sl, #8
   11718:	add	lr, sl, #4
   1171c:	mov	r1, r5
   11720:	ldrsb	r7, [r1, #12]!
   11724:	cmp	r2, r7
   11728:	bne	11778 <__assert_fail@plt+0x780>
   1172c:	cmp	r4, #0
   11730:	add	r1, r5, #4
   11734:	ldr	r7, [fp, #-16]
   11738:	mov	ip, #0
   1173c:	mov	r2, r0
   11740:	addlt	r1, r5, #8
   11744:	movlt	r3, lr
   11748:	cmp	r4, #0
   1174c:	movw	r4, #24896	; 0x6140
   11750:	ldr	r1, [r1]
   11754:	movt	r4, #2
   11758:	str	r1, [r3]
   1175c:	mov	r1, #4
   11760:	movwlt	r1, #8
   11764:	str	sl, [r5, r1]
   11768:	strb	ip, [r5, #12]
   1176c:	movw	r5, #20684	; 0x50cc
   11770:	movt	r5, #1
   11774:	b	11830 <__assert_fail@plt+0x838>
   11778:	cmn	r4, #1
   1177c:	mov	ip, #0
   11780:	bgt	117a0 <__assert_fail@plt+0x7a8>
   11784:	ldr	r3, [r5, #8]
   11788:	ldr	r7, [r3, #4]
   1178c:	mov	r2, r3
   11790:	str	r7, [r5, #8]
   11794:	str	r5, [r3, #4]
   11798:	add	r7, r3, #8
   1179c:	b	117c0 <__assert_fail@plt+0x7c8>
   117a0:	mov	r7, r5
   117a4:	ldr	r5, [r5, #4]
   117a8:	mov	lr, r3
   117ac:	ldr	r2, [r5, #8]
   117b0:	str	r2, [r7, #4]
   117b4:	str	r7, [r5, #8]
   117b8:	add	r7, r5, #4
   117bc:	mov	r2, r5
   117c0:	ldr	r3, [sp, #12]
   117c4:	str	r2, [sp, #8]
   117c8:	movw	r4, #24896	; 0x6140
   117cc:	movt	r4, #2
   117d0:	rsb	r5, r3, #0
   117d4:	str	r5, [sp, #4]
   117d8:	ldr	r5, [r7]
   117dc:	str	r5, [lr]
   117e0:	str	sl, [r7]
   117e4:	strb	ip, [sl, #12]
   117e8:	strb	ip, [r1]
   117ec:	ldrsb	r7, [r2, #12]!
   117f0:	cmp	r3, r7
   117f4:	bne	11814 <__assert_fail@plt+0x81c>
   117f8:	ldr	lr, [sp, #4]
   117fc:	ldr	r7, [fp, #-16]
   11800:	movw	r5, #20684	; 0x50cc
   11804:	mov	r1, r0
   11808:	movt	r5, #1
   1180c:	strb	lr, [r1]
   11810:	b	11830 <__assert_fail@plt+0x838>
   11814:	ldr	r0, [sp, #4]
   11818:	ldr	lr, [sp, #12]
   1181c:	movw	r5, #20684	; 0x50cc
   11820:	movt	r5, #1
   11824:	cmp	r7, r0
   11828:	ldr	r7, [fp, #-16]
   1182c:	strbeq	lr, [r1]
   11830:	strb	ip, [r2]
   11834:	ldr	r0, [r6, #8]
   11838:	cmp	sl, r0
   1183c:	ldr	r0, [sp, #8]
   11840:	ldr	sl, [sp, #20]
   11844:	streq	r0, [r6, #8]
   11848:	strne	r0, [r6, #4]
   1184c:	sub	r6, fp, #8
   11850:	b	115cc <__assert_fail@plt+0x5d4>
   11854:	cmp	r7, #0
   11858:	bne	11ad4 <__assert_fail@plt+0xadc>
   1185c:	ldr	r5, [sl, #8]
   11860:	cmp	r5, #0
   11864:	beq	11878 <__assert_fail@plt+0x880>
   11868:	movw	r1, #6940	; 0x1b1c
   1186c:	mov	r0, r5
   11870:	movt	r1, #1
   11874:	bl	11c98 <__assert_fail@plt+0xca0>
   11878:	movw	r6, #24912	; 0x6150
   1187c:	movt	r6, #2
   11880:	ldr	r0, [r6]
   11884:	cmp	r0, #0
   11888:	beq	11b10 <__assert_fail@plt+0xb18>
   1188c:	movw	sl, #24916	; 0x6154
   11890:	movw	r9, #24924	; 0x615c
   11894:	movw	r7, #7040	; 0x1b80
   11898:	movw	r4, #24920	; 0x6158
   1189c:	mov	r0, #1
   118a0:	movt	sl, #2
   118a4:	movt	r9, #2
   118a8:	movt	r7, #1
   118ac:	movt	r4, #2
   118b0:	str	r0, [fp, #-16]
   118b4:	cmp	r5, #0
   118b8:	beq	118cc <__assert_fail@plt+0x8d4>
   118bc:	movw	r1, #6968	; 0x1b38
   118c0:	mov	r0, r5
   118c4:	movt	r1, #1
   118c8:	bl	11c98 <__assert_fail@plt+0xca0>
   118cc:	ldr	r1, [sl]
   118d0:	cmp	r1, #0
   118d4:	beq	11944 <__assert_fail@plt+0x94c>
   118d8:	ldr	r0, [r1]
   118dc:	ldr	r8, [r1, #24]
   118e0:	bl	10ec0 <puts@plt>
   118e4:	ldr	r1, [sl]
   118e8:	mov	r0, #1
   118ec:	strb	r0, [r1, #13]
   118f0:	ldr	r0, [r6]
   118f4:	sub	r0, r0, #1
   118f8:	str	r0, [r6]
   118fc:	b	11928 <__assert_fail@plt+0x930>
   11900:	ldr	r2, [r8]
   11904:	ldr	r3, [r2, #16]
   11908:	subs	r3, r3, #1
   1190c:	str	r3, [r2, #16]
   11910:	bne	11924 <__assert_fail@plt+0x92c>
   11914:	ldr	r3, [r4]
   11918:	str	r2, [r3, #20]
   1191c:	ldr	r2, [r8]
   11920:	str	r2, [r4]
   11924:	ldr	r8, [r8, #4]
   11928:	cmp	r8, #0
   1192c:	bne	11900 <__assert_fail@plt+0x908>
   11930:	ldr	r1, [r1, #20]
   11934:	cmp	r1, #0
   11938:	str	r1, [sl]
   1193c:	bne	118d8 <__assert_fail@plt+0x8e0>
   11940:	b	11948 <__assert_fail@plt+0x950>
   11944:	ldr	r0, [r6]
   11948:	cmp	r0, #0
   1194c:	beq	119c0 <__assert_fail@plt+0x9c8>
   11950:	movw	r1, #20777	; 0x5129
   11954:	mov	r0, #0
   11958:	mov	r2, #5
   1195c:	movt	r1, #1
   11960:	bl	10e30 <dcgettext@plt>
   11964:	ldr	r2, [fp, #-12]
   11968:	mov	r8, r0
   1196c:	mov	r0, #0
   11970:	mov	r1, #3
   11974:	bl	13bc4 <__assert_fail@plt+0x2bcc>
   11978:	mov	r3, r0
   1197c:	mov	r0, #0
   11980:	mov	r1, #0
   11984:	mov	r2, r8
   11988:	bl	10ea8 <error@plt>
   1198c:	cmp	r5, #0
   11990:	beq	119a0 <__assert_fail@plt+0x9a8>
   11994:	mov	r0, r5
   11998:	mov	r1, r7
   1199c:	bl	11c98 <__assert_fail@plt+0xca0>
   119a0:	ldr	r0, [r9]
   119a4:	cmp	r0, #0
   119a8:	bne	1198c <__assert_fail@plt+0x994>
   119ac:	ldr	r0, [r6]
   119b0:	mov	r1, #0
   119b4:	str	r1, [fp, #-16]
   119b8:	cmp	r0, #0
   119bc:	bne	118b4 <__assert_fail@plt+0x8bc>
   119c0:	movw	r0, #24896	; 0x6140
   119c4:	movt	r0, #2
   119c8:	ldr	r0, [r0]
   119cc:	bl	11e70 <__assert_fail@plt+0xe78>
   119d0:	cmp	r0, #0
   119d4:	bne	119e8 <__assert_fail@plt+0x9f0>
   119d8:	ldr	r1, [fp, #-16]
   119dc:	mov	r0, #1
   119e0:	bic	r0, r0, r1
   119e4:	bl	10f20 <exit@plt>
   119e8:	bl	10f38 <__errno_location@plt>
   119ec:	ldr	r4, [r0]
   119f0:	ldr	r0, [sp, #16]
   119f4:	cmp	r0, #0
   119f8:	bne	11a34 <__assert_fail@plt+0xa3c>
   119fc:	movw	r1, #20804	; 0x5144
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #1
   11a0c:	bl	10e30 <dcgettext@plt>
   11a10:	b	11a44 <__assert_fail@plt+0xa4c>
   11a14:	movw	r0, #20873	; 0x5189
   11a18:	movw	r1, #20697	; 0x50d9
   11a1c:	movw	r3, #20819	; 0x5153
   11a20:	mov	r2, #140	; 0x8c
   11a24:	movt	r0, #1
   11a28:	movt	r1, #1
   11a2c:	movt	r3, #1
   11a30:	bl	10ff8 <__assert_fail@plt>
   11a34:	ldr	r2, [fp, #-12]
   11a38:	mov	r0, #0
   11a3c:	mov	r1, #3
   11a40:	bl	13bc4 <__assert_fail@plt+0x2bcc>
   11a44:	movw	r2, #21071	; 0x524f
   11a48:	mov	r3, r0
   11a4c:	mov	r0, #1
   11a50:	mov	r1, r4
   11a54:	movt	r2, #1
   11a58:	bl	10ea8 <error@plt>
   11a5c:	movw	r0, #20892	; 0x519c
   11a60:	movw	r1, #20697	; 0x50d9
   11a64:	movw	r3, #20819	; 0x5153
   11a68:	mov	r2, #163	; 0xa3
   11a6c:	movt	r0, #1
   11a70:	movt	r1, #1
   11a74:	movt	r3, #1
   11a78:	bl	10ff8 <__assert_fail@plt>
   11a7c:	movw	r0, #20935	; 0x51c7
   11a80:	movw	r1, #20697	; 0x50d9
   11a84:	movw	r3, #20819	; 0x5153
   11a88:	mov	r2, #177	; 0xb1
   11a8c:	movt	r0, #1
   11a90:	movt	r1, #1
   11a94:	movt	r3, #1
   11a98:	bl	10ff8 <__assert_fail@plt>
   11a9c:	bl	10f38 <__errno_location@plt>
   11aa0:	ldr	r4, [r0]
   11aa4:	mov	r0, #0
   11aa8:	mov	r1, #3
   11aac:	mov	r2, r9
   11ab0:	b	11a40 <__assert_fail@plt+0xa48>
   11ab4:	movw	r0, #20688	; 0x50d0
   11ab8:	movw	r1, #20697	; 0x50d9
   11abc:	movw	r3, #20709	; 0x50e5
   11ac0:	movw	r2, #458	; 0x1ca
   11ac4:	movt	r0, #1
   11ac8:	movt	r1, #1
   11acc:	movt	r3, #1
   11ad0:	bl	10ff8 <__assert_fail@plt>
   11ad4:	movw	r1, #20734	; 0x50fe
   11ad8:	mov	r0, #0
   11adc:	mov	r2, #5
   11ae0:	movt	r1, #1
   11ae4:	bl	10e30 <dcgettext@plt>
   11ae8:	mov	r4, r0
   11aec:	mov	r0, #0
   11af0:	mov	r1, #3
   11af4:	mov	r2, r9
   11af8:	bl	13bc4 <__assert_fail@plt+0x2bcc>
   11afc:	mov	r3, r0
   11b00:	mov	r0, #1
   11b04:	mov	r1, #0
   11b08:	mov	r2, r4
   11b0c:	bl	10ea8 <error@plt>
   11b10:	mov	r0, #1
   11b14:	str	r0, [fp, #-16]
   11b18:	b	119c0 <__assert_fail@plt+0x9c8>
   11b1c:	movw	r0, #24912	; 0x6150
   11b20:	movt	r0, #2
   11b24:	ldr	r1, [r0]
   11b28:	add	r1, r1, #1
   11b2c:	str	r1, [r0]
   11b30:	mov	r0, #0
   11b34:	bx	lr
   11b38:	ldr	r1, [r0, #16]
   11b3c:	cmp	r1, #0
   11b40:	bne	11b78 <__assert_fail@plt+0xb80>
   11b44:	ldrb	r1, [r0, #13]
   11b48:	cmp	r1, #0
   11b4c:	bne	11b78 <__assert_fail@plt+0xb80>
   11b50:	movw	r1, #24916	; 0x6154
   11b54:	movw	ip, #24920	; 0x6158
   11b58:	movt	r1, #2
   11b5c:	movt	ip, #2
   11b60:	ldr	r2, [r1]
   11b64:	ldr	r3, [ip]
   11b68:	cmp	r2, #0
   11b6c:	addne	r1, r3, #20
   11b70:	str	r0, [r1]
   11b74:	str	r0, [ip]
   11b78:	mov	r0, #0
   11b7c:	bx	lr
   11b80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b84:	add	fp, sp, #24
   11b88:	ldr	r1, [r0, #16]
   11b8c:	mov	r4, r0
   11b90:	mov	r0, #0
   11b94:	cmp	r1, #0
   11b98:	beq	11c94 <__assert_fail@plt+0xc9c>
   11b9c:	movw	r6, #24924	; 0x615c
   11ba0:	movt	r6, #2
   11ba4:	ldr	r7, [r6]
   11ba8:	cmp	r7, #0
   11bac:	beq	11c44 <__assert_fail@plt+0xc4c>
   11bb0:	mov	r8, r4
   11bb4:	ldr	r1, [r8, #24]!
   11bb8:	cmp	r1, #0
   11bbc:	beq	11c94 <__assert_fail@plt+0xc9c>
   11bc0:	ldr	r2, [r1]
   11bc4:	cmp	r2, r7
   11bc8:	beq	11bec <__assert_fail@plt+0xbf4>
   11bcc:	mov	r2, r1
   11bd0:	ldr	r1, [r1, #4]
   11bd4:	cmp	r1, #0
   11bd8:	beq	11c94 <__assert_fail@plt+0xc9c>
   11bdc:	ldr	r3, [r1]
   11be0:	cmp	r3, r7
   11be4:	bne	11bcc <__assert_fail@plt+0xbd4>
   11be8:	add	r8, r2, #4
   11bec:	ldr	r1, [r4, #20]
   11bf0:	cmp	r1, #0
   11bf4:	beq	11c40 <__assert_fail@plt+0xc48>
   11bf8:	movw	r5, #21071	; 0x524f
   11bfc:	mov	r9, #0
   11c00:	movt	r5, #1
   11c04:	ldr	r3, [r7]
   11c08:	ldr	r7, [r7, #20]
   11c0c:	mov	r0, #0
   11c10:	mov	r1, #0
   11c14:	mov	r2, r5
   11c18:	bl	10ea8 <error@plt>
   11c1c:	ldr	r0, [r6]
   11c20:	cmp	r0, r4
   11c24:	beq	11c4c <__assert_fail@plt+0xc54>
   11c28:	cmp	r7, #0
   11c2c:	str	r9, [r0, #20]
   11c30:	str	r7, [r6]
   11c34:	bne	11c04 <__assert_fail@plt+0xc0c>
   11c38:	mov	r4, r7
   11c3c:	b	11c68 <__assert_fail@plt+0xc70>
   11c40:	str	r7, [r4, #20]
   11c44:	str	r4, [r6]
   11c48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c4c:	ldr	r0, [r8]
   11c50:	ldr	r1, [r0]
   11c54:	ldr	r2, [r1, #16]
   11c58:	sub	r2, r2, #1
   11c5c:	str	r2, [r1, #16]
   11c60:	ldr	r0, [r0, #4]
   11c64:	str	r0, [r8]
   11c68:	mov	r0, #1
   11c6c:	cmp	r4, #0
   11c70:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c74:	mov	r1, #0
   11c78:	ldr	r2, [r4, #20]
   11c7c:	str	r1, [r4, #20]
   11c80:	cmp	r2, #0
   11c84:	mov	r4, r2
   11c88:	bne	11c78 <__assert_fail@plt+0xc80>
   11c8c:	mov	r1, #0
   11c90:	str	r1, [r6]
   11c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c98:	push	{r4, r5, r6, sl, fp, lr}
   11c9c:	add	fp, sp, #16
   11ca0:	mov	r4, r0
   11ca4:	ldr	r0, [r0, #4]
   11ca8:	cmp	r0, #0
   11cac:	beq	11ccc <__assert_fail@plt+0xcd4>
   11cb0:	mov	r5, r1
   11cb4:	bl	11c98 <__assert_fail@plt+0xca0>
   11cb8:	mov	r1, r5
   11cbc:	mov	r5, #1
   11cc0:	cmp	r0, #0
   11cc4:	beq	11cd8 <__assert_fail@plt+0xce0>
   11cc8:	b	11d20 <__assert_fail@plt+0xd28>
   11ccc:	ldr	r0, [r4, #8]
   11cd0:	cmp	r0, #0
   11cd4:	beq	11d10 <__assert_fail@plt+0xd18>
   11cd8:	mov	r0, r4
   11cdc:	mov	r6, r1
   11ce0:	blx	r1
   11ce4:	mov	r5, #1
   11ce8:	cmp	r0, #0
   11cec:	bne	11d20 <__assert_fail@plt+0xd28>
   11cf0:	ldr	r0, [r4, #8]
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d1c <__assert_fail@plt+0xd24>
   11cfc:	mov	r1, r6
   11d00:	bl	11c98 <__assert_fail@plt+0xca0>
   11d04:	cmp	r0, #0
   11d08:	moveq	r5, #0
   11d0c:	b	11d20 <__assert_fail@plt+0xd28>
   11d10:	mov	r0, r4
   11d14:	pop	{r4, r5, r6, sl, fp, lr}
   11d18:	bx	r1
   11d1c:	mov	r5, #0
   11d20:	mov	r0, r5
   11d24:	pop	{r4, r5, r6, sl, fp, pc}
   11d28:	movw	r1, #24928	; 0x6160
   11d2c:	movt	r1, #2
   11d30:	str	r0, [r1]
   11d34:	bx	lr
   11d38:	movw	r1, #24932	; 0x6164
   11d3c:	movt	r1, #2
   11d40:	strb	r0, [r1]
   11d44:	bx	lr
   11d48:	push	{r4, r5, r6, sl, fp, lr}
   11d4c:	add	fp, sp, #16
   11d50:	sub	sp, sp, #8
   11d54:	movw	r0, #24900	; 0x6144
   11d58:	movt	r0, #2
   11d5c:	ldr	r0, [r0]
   11d60:	bl	14b24 <__assert_fail@plt+0x3b2c>
   11d64:	cmp	r0, #0
   11d68:	beq	11d90 <__assert_fail@plt+0xd98>
   11d6c:	movw	r0, #24932	; 0x6164
   11d70:	movt	r0, #2
   11d74:	ldrb	r0, [r0]
   11d78:	cmp	r0, #0
   11d7c:	beq	11db0 <__assert_fail@plt+0xdb8>
   11d80:	bl	10f38 <__errno_location@plt>
   11d84:	ldr	r0, [r0]
   11d88:	cmp	r0, #32
   11d8c:	bne	11db0 <__assert_fail@plt+0xdb8>
   11d90:	movw	r0, #24888	; 0x6138
   11d94:	movt	r0, #2
   11d98:	ldr	r0, [r0]
   11d9c:	bl	14b24 <__assert_fail@plt+0x3b2c>
   11da0:	cmp	r0, #0
   11da4:	subeq	sp, fp, #16
   11da8:	popeq	{r4, r5, r6, sl, fp, pc}
   11dac:	b	11e20 <__assert_fail@plt+0xe28>
   11db0:	movw	r1, #21055	; 0x523f
   11db4:	mov	r0, #0
   11db8:	mov	r2, #5
   11dbc:	movt	r1, #1
   11dc0:	bl	10e30 <dcgettext@plt>
   11dc4:	mov	r4, r0
   11dc8:	movw	r0, #24928	; 0x6160
   11dcc:	movt	r0, #2
   11dd0:	ldr	r6, [r0]
   11dd4:	bl	10f38 <__errno_location@plt>
   11dd8:	ldr	r5, [r0]
   11ddc:	cmp	r6, #0
   11de0:	bne	11dfc <__assert_fail@plt+0xe04>
   11de4:	movw	r2, #21071	; 0x524f
   11de8:	mov	r0, #0
   11dec:	mov	r1, r5
   11df0:	mov	r3, r4
   11df4:	movt	r2, #1
   11df8:	b	11e1c <__assert_fail@plt+0xe24>
   11dfc:	mov	r0, r6
   11e00:	bl	13b18 <__assert_fail@plt+0x2b20>
   11e04:	movw	r2, #21067	; 0x524b
   11e08:	mov	r3, r0
   11e0c:	str	r4, [sp]
   11e10:	mov	r0, #0
   11e14:	mov	r1, r5
   11e18:	movt	r2, #1
   11e1c:	bl	10ea8 <error@plt>
   11e20:	movw	r0, #24804	; 0x60e4
   11e24:	movt	r0, #2
   11e28:	ldr	r0, [r0]
   11e2c:	bl	10df4 <_exit@plt>
   11e30:	b	10dd0 <posix_fadvise64@plt>
   11e34:	cmp	r0, #0
   11e38:	bxeq	lr
   11e3c:	push	{r4, sl, fp, lr}
   11e40:	add	fp, sp, #8
   11e44:	sub	sp, sp, #16
   11e48:	mov	r4, r1
   11e4c:	bl	10f68 <fileno@plt>
   11e50:	mov	r1, #0
   11e54:	mov	r2, #0
   11e58:	mov	r3, #0
   11e5c:	str	r1, [sp]
   11e60:	stmib	sp, {r1, r4}
   11e64:	bl	10dd0 <posix_fadvise64@plt>
   11e68:	sub	sp, fp, #8
   11e6c:	pop	{r4, sl, fp, pc}
   11e70:	push	{r4, r5, r6, sl, fp, lr}
   11e74:	add	fp, sp, #16
   11e78:	sub	sp, sp, #8
   11e7c:	mov	r4, r0
   11e80:	bl	10f68 <fileno@plt>
   11e84:	cmn	r0, #1
   11e88:	ble	11efc <__assert_fail@plt+0xf04>
   11e8c:	mov	r0, r4
   11e90:	bl	10ee4 <__freading@plt>
   11e94:	cmp	r0, #0
   11e98:	beq	11ec4 <__assert_fail@plt+0xecc>
   11e9c:	mov	r0, r4
   11ea0:	bl	10f68 <fileno@plt>
   11ea4:	mov	r1, #1
   11ea8:	mov	r2, #0
   11eac:	mov	r3, #0
   11eb0:	str	r1, [sp]
   11eb4:	bl	10e6c <lseek64@plt>
   11eb8:	and	r0, r0, r1
   11ebc:	cmn	r0, #1
   11ec0:	beq	11efc <__assert_fail@plt+0xf04>
   11ec4:	mov	r0, r4
   11ec8:	bl	11f0c <__assert_fail@plt+0xf14>
   11ecc:	cmp	r0, #0
   11ed0:	beq	11efc <__assert_fail@plt+0xf04>
   11ed4:	bl	10f38 <__errno_location@plt>
   11ed8:	ldr	r6, [r0]
   11edc:	mov	r5, r0
   11ee0:	mov	r0, r4
   11ee4:	bl	10f80 <fclose@plt>
   11ee8:	cmp	r6, #0
   11eec:	strne	r6, [r5]
   11ef0:	mvnne	r0, #0
   11ef4:	sub	sp, fp, #16
   11ef8:	pop	{r4, r5, r6, sl, fp, pc}
   11efc:	mov	r0, r4
   11f00:	sub	sp, fp, #16
   11f04:	pop	{r4, r5, r6, sl, fp, lr}
   11f08:	b	10f80 <fclose@plt>
   11f0c:	push	{r4, sl, fp, lr}
   11f10:	add	fp, sp, #8
   11f14:	sub	sp, sp, #8
   11f18:	mov	r4, r0
   11f1c:	cmp	r0, #0
   11f20:	beq	11f3c <__assert_fail@plt+0xf44>
   11f24:	mov	r0, r4
   11f28:	bl	10ee4 <__freading@plt>
   11f2c:	cmp	r0, #0
   11f30:	ldrbne	r0, [r4, #1]
   11f34:	tstne	r0, #1
   11f38:	bne	11f4c <__assert_fail@plt+0xf54>
   11f3c:	mov	r0, r4
   11f40:	sub	sp, fp, #8
   11f44:	pop	{r4, sl, fp, lr}
   11f48:	b	10ddc <fflush@plt>
   11f4c:	mov	r0, #1
   11f50:	mov	r2, #0
   11f54:	mov	r3, #0
   11f58:	str	r0, [sp]
   11f5c:	mov	r0, r4
   11f60:	bl	12138 <__assert_fail@plt+0x1140>
   11f64:	b	11f3c <__assert_fail@plt+0xf44>
   11f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f6c:	add	fp, sp, #28
   11f70:	sub	sp, sp, #4
   11f74:	mov	r5, r0
   11f78:	mov	r0, r2
   11f7c:	mov	r4, r2
   11f80:	mov	r8, r1
   11f84:	bl	10f68 <fileno@plt>
   11f88:	mov	r6, #0
   11f8c:	cmp	r0, #0
   11f90:	beq	11fd0 <__assert_fail@plt+0xfd8>
   11f94:	cmp	r0, #1
   11f98:	beq	11fdc <__assert_fail@plt+0xfe4>
   11f9c:	cmp	r0, #2
   11fa0:	beq	11fb8 <__assert_fail@plt+0xfc0>
   11fa4:	mov	r0, #2
   11fa8:	mov	r1, #2
   11fac:	bl	10e3c <dup2@plt>
   11fb0:	subs	r6, r0, #2
   11fb4:	movwne	r6, #1
   11fb8:	mov	r0, #1
   11fbc:	mov	r1, #1
   11fc0:	bl	10e3c <dup2@plt>
   11fc4:	subs	r7, r0, #1
   11fc8:	movwne	r7, #1
   11fcc:	b	11fe0 <__assert_fail@plt+0xfe8>
   11fd0:	mov	r7, #0
   11fd4:	mov	r9, #0
   11fd8:	b	12088 <__assert_fail@plt+0x1090>
   11fdc:	mov	r7, #0
   11fe0:	mov	r0, #0
   11fe4:	mov	r1, #0
   11fe8:	mov	sl, #0
   11fec:	bl	10e3c <dup2@plt>
   11ff0:	cmp	r0, #0
   11ff4:	mov	r9, #0
   11ff8:	beq	12010 <__assert_fail@plt+0x1018>
   11ffc:	mov	r0, #0
   12000:	bl	120ec <__assert_fail@plt+0x10f4>
   12004:	mov	r9, #1
   12008:	cmp	r0, #0
   1200c:	beq	1206c <__assert_fail@plt+0x1074>
   12010:	cmp	r7, #0
   12014:	beq	1202c <__assert_fail@plt+0x1034>
   12018:	mov	r0, #1
   1201c:	mov	sl, #1
   12020:	bl	120ec <__assert_fail@plt+0x10f4>
   12024:	cmp	r0, #0
   12028:	beq	1206c <__assert_fail@plt+0x1074>
   1202c:	cmp	r6, #0
   12030:	beq	12080 <__assert_fail@plt+0x1088>
   12034:	mov	r0, #2
   12038:	bl	120ec <__assert_fail@plt+0x10f4>
   1203c:	mov	r6, #1
   12040:	cmp	r0, #0
   12044:	bne	12084 <__assert_fail@plt+0x108c>
   12048:	bl	10f38 <__errno_location@plt>
   1204c:	ldr	r8, [r0]
   12050:	mov	r4, r0
   12054:	mov	r0, #2
   12058:	bl	10fec <close@plt>
   1205c:	mov	r5, #0
   12060:	cmp	sl, #0
   12064:	bne	120c0 <__assert_fail@plt+0x10c8>
   12068:	b	120c8 <__assert_fail@plt+0x10d0>
   1206c:	bl	10f38 <__errno_location@plt>
   12070:	ldr	r8, [r0]
   12074:	mov	r4, r0
   12078:	mov	r5, #0
   1207c:	b	120a8 <__assert_fail@plt+0x10b0>
   12080:	mov	r6, #0
   12084:	mov	r7, sl
   12088:	mov	r0, r5
   1208c:	mov	r1, r8
   12090:	mov	r2, r4
   12094:	bl	10efc <freopen64@plt>
   12098:	mov	r5, r0
   1209c:	bl	10f38 <__errno_location@plt>
   120a0:	ldr	r8, [r0]
   120a4:	mov	r4, r0
   120a8:	cmp	r6, #0
   120ac:	beq	120b8 <__assert_fail@plt+0x10c0>
   120b0:	mov	r0, #2
   120b4:	bl	10fec <close@plt>
   120b8:	cmp	r7, #0
   120bc:	beq	120c8 <__assert_fail@plt+0x10d0>
   120c0:	mov	r0, #1
   120c4:	bl	10fec <close@plt>
   120c8:	cmp	r9, #0
   120cc:	beq	120d8 <__assert_fail@plt+0x10e0>
   120d0:	mov	r0, #0
   120d4:	bl	10fec <close@plt>
   120d8:	cmp	r5, #0
   120dc:	mov	r0, r5
   120e0:	streq	r8, [r4]
   120e4:	sub	sp, fp, #28
   120e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ec:	push	{r4, sl, fp, lr}
   120f0:	add	fp, sp, #8
   120f4:	mov	r4, r0
   120f8:	movw	r0, #21074	; 0x5252
   120fc:	mov	r1, #0
   12100:	movt	r0, #1
   12104:	bl	10eb4 <open64@plt>
   12108:	mov	r1, #1
   1210c:	cmp	r0, r4
   12110:	beq	12130 <__assert_fail@plt+0x1138>
   12114:	cmp	r0, #0
   12118:	blt	1212c <__assert_fail@plt+0x1134>
   1211c:	bl	10fec <close@plt>
   12120:	bl	10f38 <__errno_location@plt>
   12124:	mov	r1, #9
   12128:	str	r1, [r0]
   1212c:	mov	r1, #0
   12130:	mov	r0, r1
   12134:	pop	{r4, sl, fp, pc}
   12138:	push	{r4, r5, r6, r7, fp, lr}
   1213c:	add	fp, sp, #16
   12140:	sub	sp, sp, #8
   12144:	mov	r4, r0
   12148:	ldr	r0, [r0, #4]
   1214c:	mov	r5, r3
   12150:	mov	r6, r2
   12154:	ldr	r1, [r4, #8]
   12158:	cmp	r1, r0
   1215c:	bne	12178 <__assert_fail@plt+0x1180>
   12160:	ldrd	r0, [r4, #16]
   12164:	cmp	r1, r0
   12168:	bne	12178 <__assert_fail@plt+0x1180>
   1216c:	ldr	r0, [r4, #36]	; 0x24
   12170:	cmp	r0, #0
   12174:	beq	12190 <__assert_fail@plt+0x1198>
   12178:	mov	r0, r4
   1217c:	mov	r2, r6
   12180:	mov	r3, r5
   12184:	sub	sp, fp, #16
   12188:	pop	{r4, r5, r6, r7, fp, lr}
   1218c:	b	10f8c <fseeko64@plt>
   12190:	ldr	r7, [fp, #8]
   12194:	mov	r0, r4
   12198:	bl	10f68 <fileno@plt>
   1219c:	mov	r2, r6
   121a0:	mov	r3, r5
   121a4:	str	r7, [sp]
   121a8:	bl	10e6c <lseek64@plt>
   121ac:	and	r2, r0, r1
   121b0:	cmn	r2, #1
   121b4:	beq	121d0 <__assert_fail@plt+0x11d8>
   121b8:	strd	r0, [r4, #80]	; 0x50
   121bc:	ldr	r0, [r4]
   121c0:	bic	r0, r0, #16
   121c4:	str	r0, [r4]
   121c8:	mov	r0, #0
   121cc:	b	121d4 <__assert_fail@plt+0x11dc>
   121d0:	mvn	r0, #0
   121d4:	sub	sp, fp, #16
   121d8:	pop	{r4, r5, r6, r7, fp, pc}
   121dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121e0:	add	fp, sp, #24
   121e4:	sub	sp, sp, #8
   121e8:	movw	r6, #24904	; 0x6148
   121ec:	mov	r4, #0
   121f0:	cmp	r0, #2
   121f4:	movt	r6, #2
   121f8:	ldr	r7, [r6]
   121fc:	str	r4, [r6]
   12200:	bne	12274 <__assert_fail@plt+0x127c>
   12204:	mov	r8, r3
   12208:	movw	r3, #21100	; 0x526c
   1220c:	mov	r5, r2
   12210:	movw	r2, #21084	; 0x525c
   12214:	mov	r0, #2
   12218:	str	r4, [sp]
   1221c:	movt	r2, #1
   12220:	movt	r3, #1
   12224:	bl	10f08 <getopt_long@plt>
   12228:	cmp	r0, #104	; 0x68
   1222c:	beq	12268 <__assert_fail@plt+0x1270>
   12230:	cmp	r0, #118	; 0x76
   12234:	bne	12274 <__assert_fail@plt+0x127c>
   12238:	movw	r0, #24900	; 0x6144
   1223c:	ldr	r3, [fp, #8]
   12240:	add	r1, fp, #16
   12244:	mov	r2, r8
   12248:	movt	r0, #2
   1224c:	str	r1, [sp, #4]
   12250:	str	r1, [sp]
   12254:	mov	r1, r5
   12258:	ldr	r0, [r0]
   1225c:	bl	14468 <__assert_fail@plt+0x3470>
   12260:	mov	r0, #0
   12264:	bl	10f20 <exit@plt>
   12268:	ldr	r1, [fp, #12]
   1226c:	mov	r0, #0
   12270:	blx	r1
   12274:	movw	r0, #24880	; 0x6130
   12278:	str	r7, [r6]
   1227c:	movt	r0, #2
   12280:	str	r4, [r0]
   12284:	sub	sp, fp, #24
   12288:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1228c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12290:	add	fp, sp, #24
   12294:	sub	sp, sp, #8
   12298:	movw	r6, #24904	; 0x6148
   1229c:	mov	r8, r3
   122a0:	ldr	r3, [fp, #12]
   122a4:	mov	r5, r2
   122a8:	mov	r2, #1
   122ac:	movw	r4, #20687	; 0x50cf
   122b0:	movt	r6, #2
   122b4:	movt	r4, #1
   122b8:	ldr	r7, [r6]
   122bc:	str	r2, [r6]
   122c0:	mov	r2, #0
   122c4:	str	r2, [sp]
   122c8:	movw	r2, #21084	; 0x525c
   122cc:	cmp	r3, #0
   122d0:	movt	r2, #1
   122d4:	movw	r3, #21100	; 0x526c
   122d8:	movne	r2, r4
   122dc:	movt	r3, #1
   122e0:	bl	10f08 <getopt_long@plt>
   122e4:	cmn	r0, #1
   122e8:	beq	12318 <__assert_fail@plt+0x1320>
   122ec:	ldr	r1, [fp, #16]
   122f0:	cmp	r0, #104	; 0x68
   122f4:	beq	12310 <__assert_fail@plt+0x1318>
   122f8:	cmp	r0, #118	; 0x76
   122fc:	beq	12324 <__assert_fail@plt+0x132c>
   12300:	movw	r0, #24804	; 0x60e4
   12304:	movt	r0, #2
   12308:	ldr	r0, [r0]
   1230c:	b	12314 <__assert_fail@plt+0x131c>
   12310:	mov	r0, #0
   12314:	blx	r1
   12318:	str	r7, [r6]
   1231c:	sub	sp, fp, #24
   12320:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12324:	movw	r0, #24900	; 0x6144
   12328:	ldr	r3, [fp, #8]
   1232c:	add	r1, fp, #20
   12330:	mov	r2, r8
   12334:	movt	r0, #2
   12338:	str	r1, [sp, #4]
   1233c:	str	r1, [sp]
   12340:	mov	r1, r5
   12344:	ldr	r0, [r0]
   12348:	bl	14468 <__assert_fail@plt+0x3470>
   1234c:	mov	r0, #0
   12350:	bl	10f20 <exit@plt>
   12354:	push	{r4, r5, fp, lr}
   12358:	add	fp, sp, #8
   1235c:	cmp	r0, #0
   12360:	beq	123f4 <__assert_fail@plt+0x13fc>
   12364:	mov	r1, #47	; 0x2f
   12368:	mov	r4, r0
   1236c:	bl	10fa4 <strrchr@plt>
   12370:	cmp	r0, #0
   12374:	mov	r5, r4
   12378:	addne	r5, r0, #1
   1237c:	sub	r0, r5, r4
   12380:	cmp	r0, #7
   12384:	blt	123d8 <__assert_fail@plt+0x13e0>
   12388:	movw	r1, #21204	; 0x52d4
   1238c:	sub	r0, r5, #7
   12390:	mov	r2, #7
   12394:	movt	r1, #1
   12398:	bl	10fd4 <strncmp@plt>
   1239c:	cmp	r0, #0
   123a0:	bne	123d8 <__assert_fail@plt+0x13e0>
   123a4:	movw	r1, #21212	; 0x52dc
   123a8:	mov	r0, r5
   123ac:	mov	r2, #3
   123b0:	movt	r1, #1
   123b4:	bl	10fd4 <strncmp@plt>
   123b8:	cmp	r0, #0
   123bc:	beq	123c8 <__assert_fail@plt+0x13d0>
   123c0:	mov	r4, r5
   123c4:	b	123d8 <__assert_fail@plt+0x13e0>
   123c8:	movw	r0, #24872	; 0x6128
   123cc:	add	r4, r5, #3
   123d0:	movt	r0, #2
   123d4:	str	r4, [r0]
   123d8:	movw	r0, #24876	; 0x612c
   123dc:	movt	r0, #2
   123e0:	str	r4, [r0]
   123e4:	movw	r0, #24936	; 0x6168
   123e8:	movt	r0, #2
   123ec:	str	r4, [r0]
   123f0:	pop	{r4, r5, fp, pc}
   123f4:	movw	r0, #24888	; 0x6138
   123f8:	movt	r0, #2
   123fc:	ldr	r1, [r0]
   12400:	movw	r0, #21148	; 0x529c
   12404:	movt	r0, #1
   12408:	bl	10fc8 <fputs@plt>
   1240c:	bl	10fe0 <abort@plt>
   12410:	push	{r4, r5, r6, sl, fp, lr}
   12414:	add	fp, sp, #16
   12418:	mov	r4, r0
   1241c:	movw	r0, #24944	; 0x6170
   12420:	movt	r0, #2
   12424:	cmp	r4, #0
   12428:	moveq	r4, r0
   1242c:	bl	10f38 <__errno_location@plt>
   12430:	ldr	r6, [r0]
   12434:	mov	r5, r0
   12438:	mov	r0, r4
   1243c:	mov	r1, #48	; 0x30
   12440:	bl	1490c <__assert_fail@plt+0x3914>
   12444:	str	r6, [r5]
   12448:	pop	{r4, r5, r6, sl, fp, pc}
   1244c:	movw	r1, #24944	; 0x6170
   12450:	cmp	r0, #0
   12454:	movt	r1, #2
   12458:	movne	r1, r0
   1245c:	ldr	r0, [r1]
   12460:	bx	lr
   12464:	movw	r2, #24944	; 0x6170
   12468:	cmp	r0, #0
   1246c:	movt	r2, #2
   12470:	movne	r2, r0
   12474:	str	r1, [r2]
   12478:	bx	lr
   1247c:	movw	r3, #24944	; 0x6170
   12480:	cmp	r0, #0
   12484:	movt	r3, #2
   12488:	movne	r3, r0
   1248c:	ubfx	r0, r1, #5, #3
   12490:	and	r1, r1, #31
   12494:	add	r0, r3, r0, lsl #2
   12498:	ldr	r3, [r0, #8]
   1249c:	eor	r2, r2, r3, lsr r1
   124a0:	and	r2, r2, #1
   124a4:	eor	r2, r3, r2, lsl r1
   124a8:	str	r2, [r0, #8]
   124ac:	mov	r0, #1
   124b0:	and	r0, r0, r3, lsr r1
   124b4:	bx	lr
   124b8:	movw	r2, #24944	; 0x6170
   124bc:	cmp	r0, #0
   124c0:	movt	r2, #2
   124c4:	movne	r2, r0
   124c8:	ldr	r0, [r2, #4]
   124cc:	str	r1, [r2, #4]
   124d0:	bx	lr
   124d4:	movw	r3, #24944	; 0x6170
   124d8:	cmp	r0, #0
   124dc:	movt	r3, #2
   124e0:	movne	r3, r0
   124e4:	cmp	r1, #0
   124e8:	mov	r0, #10
   124ec:	cmpne	r2, #0
   124f0:	str	r0, [r3]
   124f4:	bne	12504 <__assert_fail@plt+0x150c>
   124f8:	push	{fp, lr}
   124fc:	mov	fp, sp
   12500:	bl	10fe0 <abort@plt>
   12504:	str	r1, [r3, #40]	; 0x28
   12508:	str	r2, [r3, #44]	; 0x2c
   1250c:	bx	lr
   12510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12514:	add	fp, sp, #28
   12518:	sub	sp, sp, #20
   1251c:	mov	r7, r0
   12520:	ldr	r0, [fp, #8]
   12524:	movw	r5, #24944	; 0x6170
   12528:	mov	r8, r3
   1252c:	mov	r9, r2
   12530:	mov	sl, r1
   12534:	movt	r5, #2
   12538:	cmp	r0, #0
   1253c:	movne	r5, r0
   12540:	bl	10f38 <__errno_location@plt>
   12544:	mov	r4, r0
   12548:	ldm	r5, {r0, r1}
   1254c:	ldr	r2, [r5, #40]	; 0x28
   12550:	ldr	r3, [r5, #44]	; 0x2c
   12554:	add	r5, r5, #8
   12558:	ldr	r6, [r4]
   1255c:	stm	sp, {r0, r1, r5}
   12560:	str	r2, [sp, #12]
   12564:	str	r3, [sp, #16]
   12568:	mov	r0, r7
   1256c:	mov	r1, sl
   12570:	mov	r2, r9
   12574:	mov	r3, r8
   12578:	bl	12588 <__assert_fail@plt+0x1590>
   1257c:	str	r6, [r4]
   12580:	sub	sp, fp, #28
   12584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1258c:	add	fp, sp, #28
   12590:	sub	sp, sp, #156	; 0x9c
   12594:	str	r0, [fp, #-56]	; 0xffffffc8
   12598:	ldr	r0, [fp, #12]
   1259c:	mov	r4, r1
   125a0:	str	r3, [sp, #80]	; 0x50
   125a4:	str	r2, [fp, #-84]	; 0xffffffac
   125a8:	and	r1, r0, #4
   125ac:	str	r1, [sp, #24]
   125b0:	and	r1, r0, #1
   125b4:	str	r1, [sp, #28]
   125b8:	ubfx	r7, r0, #1, #1
   125bc:	bl	10e78 <__ctype_get_mb_cur_max@plt>
   125c0:	str	r0, [sp, #32]
   125c4:	ldr	r0, [fp, #24]
   125c8:	ldr	r9, [fp, #8]
   125cc:	mov	r2, #0
   125d0:	mov	r1, #0
   125d4:	mov	r5, #0
   125d8:	str	r2, [sp, #52]	; 0x34
   125dc:	mov	r2, #1
   125e0:	str	r0, [sp, #72]	; 0x48
   125e4:	ldr	r0, [fp, #20]
   125e8:	str	r0, [sp, #64]	; 0x40
   125ec:	mov	r0, #0
   125f0:	str	r0, [sp, #92]	; 0x5c
   125f4:	mov	r0, #0
   125f8:	str	r0, [fp, #-76]	; 0xffffffb4
   125fc:	mov	r0, #0
   12600:	cmp	r9, #10
   12604:	str	r1, [sp, #68]	; 0x44
   12608:	bhi	13608 <__assert_fail@plt+0x2610>
   1260c:	add	r1, pc, #28
   12610:	ldr	ip, [fp, #-84]	; 0xffffffac
   12614:	ldr	lr, [sp, #80]	; 0x50
   12618:	mov	r6, r4
   1261c:	mov	r8, #0
   12620:	mov	r3, #1
   12624:	mov	sl, #0
   12628:	mov	r4, r2
   1262c:	ldr	pc, [r1, r9, lsl #2]
   12630:	andeq	r2, r1, r0, lsl #14
   12634:	andeq	r2, r1, ip, lsr r7
   12638:	andeq	r2, r1, r0, lsl r7
   1263c:	strdeq	r2, [r1], -r8
   12640:	andeq	r2, r1, r0, lsr r7
   12644:	andeq	r2, r1, r8, lsl #15
   12648:	andeq	r2, r1, r0, lsr #14
   1264c:	andeq	r2, r1, r8, ror #15
   12650:	andeq	r2, r1, ip, asr r6
   12654:	andeq	r2, r1, ip, asr r6
   12658:	andeq	r2, r1, r4, lsl #13
   1265c:	movw	r0, #21294	; 0x532e
   12660:	mov	r1, r9
   12664:	movt	r0, #1
   12668:	bl	13d70 <__assert_fail@plt+0x2d78>
   1266c:	str	r0, [sp, #64]	; 0x40
   12670:	movw	r0, #21296	; 0x5330
   12674:	mov	r1, r9
   12678:	movt	r0, #1
   1267c:	bl	13d70 <__assert_fail@plt+0x2d78>
   12680:	str	r0, [sp, #72]	; 0x48
   12684:	mov	r8, #0
   12688:	mov	sl, r7
   1268c:	tst	r7, #1
   12690:	str	r5, [fp, #-48]	; 0xffffffd0
   12694:	bne	126d0 <__assert_fail@plt+0x16d8>
   12698:	ldr	r0, [sp, #64]	; 0x40
   1269c:	ldrb	r0, [r0]
   126a0:	cmp	r0, #0
   126a4:	beq	126d0 <__assert_fail@plt+0x16d8>
   126a8:	ldr	r1, [sp, #64]	; 0x40
   126ac:	mov	r8, #0
   126b0:	add	r1, r1, #1
   126b4:	cmp	r8, r6
   126b8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   126bc:	strbcc	r0, [r2, r8]
   126c0:	ldrb	r0, [r1, r8]
   126c4:	add	r8, r8, #1
   126c8:	cmp	r0, #0
   126cc:	bne	126b4 <__assert_fail@plt+0x16bc>
   126d0:	ldr	r7, [sp, #72]	; 0x48
   126d4:	mov	r0, r7
   126d8:	bl	10f2c <strlen@plt>
   126dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   126e0:	ldr	lr, [sp, #80]	; 0x50
   126e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   126e8:	str	r0, [fp, #-76]	; 0xffffffb4
   126ec:	str	r7, [sp, #92]	; 0x5c
   126f0:	mov	r3, #1
   126f4:	b	127e8 <__assert_fail@plt+0x17f0>
   126f8:	mov	r0, #1
   126fc:	b	1273c <__assert_fail@plt+0x1744>
   12700:	mov	r9, #0
   12704:	mov	r8, #0
   12708:	mov	r3, r0
   1270c:	b	127e4 <__assert_fail@plt+0x17ec>
   12710:	tst	r7, #1
   12714:	bne	1273c <__assert_fail@plt+0x1744>
   12718:	mov	r3, r0
   1271c:	b	12764 <__assert_fail@plt+0x176c>
   12720:	mov	r0, #1
   12724:	mov	r8, #0
   12728:	mov	r9, #5
   1272c:	b	1279c <__assert_fail@plt+0x17a4>
   12730:	mov	r3, #1
   12734:	tst	r7, #1
   12738:	beq	12764 <__assert_fail@plt+0x176c>
   1273c:	mov	r1, #1
   12740:	mov	r8, #0
   12744:	mov	r9, #2
   12748:	mov	r3, r0
   1274c:	mov	sl, #1
   12750:	str	r1, [fp, #-76]	; 0xffffffb4
   12754:	movw	r1, #21296	; 0x5330
   12758:	movt	r1, #1
   1275c:	str	r1, [sp, #92]	; 0x5c
   12760:	b	127e8 <__assert_fail@plt+0x17f0>
   12764:	cmp	r6, #0
   12768:	mov	r8, #1
   1276c:	mov	r9, #2
   12770:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12774:	movne	r0, #39	; 0x27
   12778:	strbne	r0, [r1]
   1277c:	movw	r0, #21296	; 0x5330
   12780:	movt	r0, #1
   12784:	b	127d8 <__assert_fail@plt+0x17e0>
   12788:	mov	r9, #5
   1278c:	tst	r7, #1
   12790:	beq	127b8 <__assert_fail@plt+0x17c0>
   12794:	mov	r0, #1
   12798:	mov	r8, #0
   1279c:	str	r0, [fp, #-76]	; 0xffffffb4
   127a0:	movw	r0, #21292	; 0x532c
   127a4:	mov	r3, #1
   127a8:	mov	sl, #1
   127ac:	movt	r0, #1
   127b0:	str	r0, [sp, #92]	; 0x5c
   127b4:	b	127e8 <__assert_fail@plt+0x17f0>
   127b8:	cmp	r6, #0
   127bc:	mov	r8, #1
   127c0:	mov	r3, #1
   127c4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   127c8:	movne	r0, #34	; 0x22
   127cc:	strbne	r0, [r1]
   127d0:	movw	r0, #21292	; 0x532c
   127d4:	movt	r0, #1
   127d8:	str	r0, [sp, #92]	; 0x5c
   127dc:	mov	r0, #1
   127e0:	str	r0, [fp, #-76]	; 0xffffffb4
   127e4:	mov	sl, #0
   127e8:	ldr	r0, [fp, #16]
   127ec:	mov	r7, #0
   127f0:	str	r9, [fp, #-64]	; 0xffffffc0
   127f4:	str	sl, [fp, #-72]	; 0xffffffb8
   127f8:	str	r3, [sp, #84]	; 0x54
   127fc:	cmp	r0, #0
   12800:	movwne	r0, #1
   12804:	and	r0, r0, sl
   12808:	str	r0, [fp, #-88]	; 0xffffffa8
   1280c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12810:	cmp	r0, #0
   12814:	movwne	r0, #1
   12818:	subs	r2, r9, #2
   1281c:	and	r1, r0, sl
   12820:	str	r2, [fp, #-80]	; 0xffffffb0
   12824:	and	r1, r3, r1
   12828:	str	r1, [sp, #44]	; 0x2c
   1282c:	clz	r1, r2
   12830:	lsr	r1, r1, #5
   12834:	and	r1, r1, sl
   12838:	str	r1, [sp, #56]	; 0x38
   1283c:	mov	r1, r2
   12840:	eor	r2, sl, #1
   12844:	movwne	r1, #1
   12848:	str	r2, [sp, #88]	; 0x58
   1284c:	orr	r2, r1, r2
   12850:	and	r1, r1, r3
   12854:	and	r0, r0, r1
   12858:	str	r2, [sp, #60]	; 0x3c
   1285c:	str	r1, [fp, #-68]	; 0xffffffbc
   12860:	str	r0, [fp, #-60]	; 0xffffffc4
   12864:	eor	r0, r3, #1
   12868:	str	r0, [sp, #48]	; 0x30
   1286c:	cmn	lr, #1
   12870:	beq	12880 <__assert_fail@plt+0x1888>
   12874:	cmp	r7, lr
   12878:	bne	1288c <__assert_fail@plt+0x1894>
   1287c:	b	13438 <__assert_fail@plt+0x2440>
   12880:	ldrb	r0, [ip, r7]
   12884:	cmp	r0, #0
   12888:	beq	13440 <__assert_fail@plt+0x2448>
   1288c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12890:	mov	r9, #0
   12894:	str	r5, [fp, #-48]	; 0xffffffd0
   12898:	str	r6, [fp, #-52]	; 0xffffffcc
   1289c:	cmp	r0, #0
   128a0:	beq	128e0 <__assert_fail@plt+0x18e8>
   128a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128a8:	mov	r5, r4
   128ac:	add	r4, r7, r0
   128b0:	cmp	r0, #2
   128b4:	bcc	128d0 <__assert_fail@plt+0x18d8>
   128b8:	cmn	lr, #1
   128bc:	bne	128d0 <__assert_fail@plt+0x18d8>
   128c0:	mov	r0, ip
   128c4:	bl	10f2c <strlen@plt>
   128c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   128cc:	mov	lr, r0
   128d0:	cmp	r4, lr
   128d4:	bls	128e8 <__assert_fail@plt+0x18f0>
   128d8:	mov	r6, #0
   128dc:	b	12928 <__assert_fail@plt+0x1930>
   128e0:	mov	r6, #0
   128e4:	b	1292c <__assert_fail@plt+0x1934>
   128e8:	ldr	r1, [sp, #92]	; 0x5c
   128ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128f0:	add	r0, ip, r7
   128f4:	mov	r4, lr
   128f8:	bl	10e18 <memcmp@plt>
   128fc:	ldr	r2, [sp, #88]	; 0x58
   12900:	cmp	r0, #0
   12904:	mov	r1, r0
   12908:	movwne	r1, #1
   1290c:	orr	r1, r1, r2
   12910:	tst	r1, #1
   12914:	beq	134d4 <__assert_fail@plt+0x24dc>
   12918:	ldr	ip, [fp, #-84]	; 0xffffffac
   1291c:	clz	r0, r0
   12920:	mov	lr, r4
   12924:	lsr	r6, r0, #5
   12928:	mov	r4, r5
   1292c:	ldrb	r5, [ip, r7]
   12930:	cmp	r5, #126	; 0x7e
   12934:	bhi	12cfc <__assert_fail@plt+0x1d04>
   12938:	add	r3, pc, #16
   1293c:	mov	sl, #1
   12940:	mov	r2, #110	; 0x6e
   12944:	mov	r0, #97	; 0x61
   12948:	mov	r1, #0
   1294c:	ldr	pc, [r3, r5, lsl #2]
   12950:	andeq	r2, r1, r0, ror #23
   12954:	strdeq	r2, [r1], -ip
   12958:	strdeq	r2, [r1], -ip
   1295c:	strdeq	r2, [r1], -ip
   12960:	strdeq	r2, [r1], -ip
   12964:	strdeq	r2, [r1], -ip
   12968:	strdeq	r2, [r1], -ip
   1296c:	andeq	r2, r1, r0, lsr #27
   12970:	andeq	r2, r1, r0, asr #23
   12974:			; <UNDEFINED> instruction: 0x00012bb8
   12978:	andeq	r2, r1, ip, asr #23
   1297c:	andeq	r2, r1, r0, asr ip
   12980:			; <UNDEFINED> instruction: 0x00012bb0
   12984:	andeq	r2, r1, r8, asr #23
   12988:	strdeq	r2, [r1], -ip
   1298c:	strdeq	r2, [r1], -ip
   12990:	strdeq	r2, [r1], -ip
   12994:	strdeq	r2, [r1], -ip
   12998:	strdeq	r2, [r1], -ip
   1299c:	strdeq	r2, [r1], -ip
   129a0:	strdeq	r2, [r1], -ip
   129a4:	strdeq	r2, [r1], -ip
   129a8:	strdeq	r2, [r1], -ip
   129ac:	strdeq	r2, [r1], -ip
   129b0:	strdeq	r2, [r1], -ip
   129b4:	strdeq	r2, [r1], -ip
   129b8:	strdeq	r2, [r1], -ip
   129bc:	strdeq	r2, [r1], -ip
   129c0:	strdeq	r2, [r1], -ip
   129c4:	strdeq	r2, [r1], -ip
   129c8:	strdeq	r2, [r1], -ip
   129cc:	strdeq	r2, [r1], -ip
   129d0:	andeq	r2, r1, r0, ror #26
   129d4:	andeq	r2, r1, r4, ror #26
   129d8:	andeq	r2, r1, r4, ror #26
   129dc:	andeq	r2, r1, r0, ror #22
   129e0:	andeq	r2, r1, r4, ror #26
   129e4:	andeq	r2, r1, ip, asr #22
   129e8:	andeq	r2, r1, r4, ror #26
   129ec:	andeq	r2, r1, r8, asr ip
   129f0:	andeq	r2, r1, r4, ror #26
   129f4:	andeq	r2, r1, r4, ror #26
   129f8:	andeq	r2, r1, r4, ror #26
   129fc:	andeq	r2, r1, ip, asr #22
   12a00:	andeq	r2, r1, ip, asr #22
   12a04:	andeq	r2, r1, ip, asr #22
   12a08:	andeq	r2, r1, ip, asr #22
   12a0c:	andeq	r2, r1, ip, asr #22
   12a10:	andeq	r2, r1, ip, asr #22
   12a14:	andeq	r2, r1, ip, asr #22
   12a18:	andeq	r2, r1, ip, asr #22
   12a1c:	andeq	r2, r1, ip, asr #22
   12a20:	andeq	r2, r1, ip, asr #22
   12a24:	andeq	r2, r1, ip, asr #22
   12a28:	andeq	r2, r1, ip, asr #22
   12a2c:	andeq	r2, r1, ip, asr #22
   12a30:	andeq	r2, r1, ip, asr #22
   12a34:	andeq	r2, r1, ip, asr #22
   12a38:	andeq	r2, r1, ip, asr #22
   12a3c:	andeq	r2, r1, r4, ror #26
   12a40:	andeq	r2, r1, r4, ror #26
   12a44:	andeq	r2, r1, r4, ror #26
   12a48:	andeq	r2, r1, r4, ror #26
   12a4c:	andeq	r2, r1, r4, lsr #24
   12a50:	strdeq	r2, [r1], -ip
   12a54:	andeq	r2, r1, ip, asr #22
   12a58:	andeq	r2, r1, ip, asr #22
   12a5c:	andeq	r2, r1, ip, asr #22
   12a60:	andeq	r2, r1, ip, asr #22
   12a64:	andeq	r2, r1, ip, asr #22
   12a68:	andeq	r2, r1, ip, asr #22
   12a6c:	andeq	r2, r1, ip, asr #22
   12a70:	andeq	r2, r1, ip, asr #22
   12a74:	andeq	r2, r1, ip, asr #22
   12a78:	andeq	r2, r1, ip, asr #22
   12a7c:	andeq	r2, r1, ip, asr #22
   12a80:	andeq	r2, r1, ip, asr #22
   12a84:	andeq	r2, r1, ip, asr #22
   12a88:	andeq	r2, r1, ip, asr #22
   12a8c:	andeq	r2, r1, ip, asr #22
   12a90:	andeq	r2, r1, ip, asr #22
   12a94:	andeq	r2, r1, ip, asr #22
   12a98:	andeq	r2, r1, ip, asr #22
   12a9c:	andeq	r2, r1, ip, asr #22
   12aa0:	andeq	r2, r1, ip, asr #22
   12aa4:	andeq	r2, r1, ip, asr #22
   12aa8:	andeq	r2, r1, ip, asr #22
   12aac:	andeq	r2, r1, ip, asr #22
   12ab0:	andeq	r2, r1, ip, asr #22
   12ab4:	andeq	r2, r1, ip, asr #22
   12ab8:	andeq	r2, r1, ip, asr #22
   12abc:	andeq	r2, r1, r4, ror #26
   12ac0:	andeq	r2, r1, ip, lsl #23
   12ac4:	andeq	r2, r1, ip, asr #22
   12ac8:	andeq	r2, r1, r4, ror #26
   12acc:	andeq	r2, r1, ip, asr #22
   12ad0:	andeq	r2, r1, r4, ror #26
   12ad4:	andeq	r2, r1, ip, asr #22
   12ad8:	andeq	r2, r1, ip, asr #22
   12adc:	andeq	r2, r1, ip, asr #22
   12ae0:	andeq	r2, r1, ip, asr #22
   12ae4:	andeq	r2, r1, ip, asr #22
   12ae8:	andeq	r2, r1, ip, asr #22
   12aec:	andeq	r2, r1, ip, asr #22
   12af0:	andeq	r2, r1, ip, asr #22
   12af4:	andeq	r2, r1, ip, asr #22
   12af8:	andeq	r2, r1, ip, asr #22
   12afc:	andeq	r2, r1, ip, asr #22
   12b00:	andeq	r2, r1, ip, asr #22
   12b04:	andeq	r2, r1, ip, asr #22
   12b08:	andeq	r2, r1, ip, asr #22
   12b0c:	andeq	r2, r1, ip, asr #22
   12b10:	andeq	r2, r1, ip, asr #22
   12b14:	andeq	r2, r1, ip, asr #22
   12b18:	andeq	r2, r1, ip, asr #22
   12b1c:	andeq	r2, r1, ip, asr #22
   12b20:	andeq	r2, r1, ip, asr #22
   12b24:	andeq	r2, r1, ip, asr #22
   12b28:	andeq	r2, r1, ip, asr #22
   12b2c:	andeq	r2, r1, ip, asr #22
   12b30:	andeq	r2, r1, ip, asr #22
   12b34:	andeq	r2, r1, ip, asr #22
   12b38:	andeq	r2, r1, ip, asr #22
   12b3c:	andeq	r2, r1, r0, ror fp
   12b40:	andeq	r2, r1, r4, ror #26
   12b44:	andeq	r2, r1, r0, ror fp
   12b48:	andeq	r2, r1, r0, ror #22
   12b4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b50:	cmp	r0, #0
   12b54:	beq	12db4 <__assert_fail@plt+0x1dbc>
   12b58:	ldr	r0, [fp, #16]
   12b5c:	b	12db8 <__assert_fail@plt+0x1dc0>
   12b60:	mov	sl, #0
   12b64:	cmp	r7, #0
   12b68:	bne	12fd0 <__assert_fail@plt+0x1fd8>
   12b6c:	b	12d60 <__assert_fail@plt+0x1d68>
   12b70:	mov	sl, #0
   12b74:	cmn	lr, #1
   12b78:	beq	12d4c <__assert_fail@plt+0x1d54>
   12b7c:	cmp	r7, #0
   12b80:	cmpeq	lr, #1
   12b84:	bne	12fd0 <__assert_fail@plt+0x1fd8>
   12b88:	b	12d60 <__assert_fail@plt+0x1d68>
   12b8c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b90:	cmp	r0, #2
   12b94:	bne	12d84 <__assert_fail@plt+0x1d8c>
   12b98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b9c:	tst	r0, #1
   12ba0:	bne	134f0 <__assert_fail@plt+0x24f8>
   12ba4:	mov	r9, #0
   12ba8:	mov	r0, #92	; 0x5c
   12bac:	b	12d98 <__assert_fail@plt+0x1da0>
   12bb0:	mov	r0, #102	; 0x66
   12bb4:	b	12da0 <__assert_fail@plt+0x1da8>
   12bb8:	mov	r2, #116	; 0x74
   12bbc:	b	12bcc <__assert_fail@plt+0x1bd4>
   12bc0:	mov	r0, #98	; 0x62
   12bc4:	b	12da0 <__assert_fail@plt+0x1da8>
   12bc8:	mov	r2, #114	; 0x72
   12bcc:	ldr	r0, [sp, #60]	; 0x3c
   12bd0:	tst	r0, #1
   12bd4:	mov	r0, r2
   12bd8:	bne	12da0 <__assert_fail@plt+0x1da8>
   12bdc:	b	134f0 <__assert_fail@plt+0x24f8>
   12be0:	ldr	r0, [sp, #84]	; 0x54
   12be4:	tst	r0, #1
   12be8:	beq	12e8c <__assert_fail@plt+0x1e94>
   12bec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12bf0:	tst	r0, #1
   12bf4:	bne	135f8 <__assert_fail@plt+0x2600>
   12bf8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bfc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c00:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12c04:	cmp	r0, #2
   12c08:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12c0c:	movwne	r0, #1
   12c10:	orr	r0, r0, r3
   12c14:	tst	r0, #1
   12c18:	beq	1330c <__assert_fail@plt+0x2314>
   12c1c:	mov	r0, r8
   12c20:	b	1334c <__assert_fail@plt+0x2354>
   12c24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c28:	mov	r9, #0
   12c2c:	mov	r5, #63	; 0x3f
   12c30:	cmp	r0, #5
   12c34:	beq	12fd8 <__assert_fail@plt+0x1fe0>
   12c38:	cmp	r0, #2
   12c3c:	bne	13098 <__assert_fail@plt+0x20a0>
   12c40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c44:	tst	r0, #1
   12c48:	beq	1309c <__assert_fail@plt+0x20a4>
   12c4c:	b	134f0 <__assert_fail@plt+0x24f8>
   12c50:	mov	r0, #118	; 0x76
   12c54:	b	12da0 <__assert_fail@plt+0x1da8>
   12c58:	mov	r0, #1
   12c5c:	mov	r5, #39	; 0x27
   12c60:	str	r0, [sp, #52]	; 0x34
   12c64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c68:	cmp	r0, #2
   12c6c:	bne	12cf4 <__assert_fail@plt+0x1cfc>
   12c70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c74:	tst	r0, #1
   12c78:	bne	134f0 <__assert_fail@plt+0x24f8>
   12c7c:	ldr	r3, [sp, #68]	; 0x44
   12c80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12c84:	mov	r9, #0
   12c88:	clz	r1, r2
   12c8c:	cmp	r3, #0
   12c90:	mov	r0, r3
   12c94:	movwne	r0, #1
   12c98:	lsr	r1, r1, #5
   12c9c:	orrs	r0, r0, r1
   12ca0:	moveq	r3, r2
   12ca4:	moveq	r2, r0
   12ca8:	cmp	r8, r2
   12cac:	str	r3, [sp, #68]	; 0x44
   12cb0:	str	r2, [fp, #-52]	; 0xffffffcc
   12cb4:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12cb8:	movcc	r0, #39	; 0x27
   12cbc:	strbcc	r0, [r1, r8]
   12cc0:	add	r0, r8, #1
   12cc4:	cmp	r0, r2
   12cc8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12ccc:	movcc	r1, #92	; 0x5c
   12cd0:	strbcc	r1, [r3, r0]
   12cd4:	add	r0, r8, #2
   12cd8:	add	r8, r8, #3
   12cdc:	cmp	r0, r2
   12ce0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12ce4:	movcc	r1, #39	; 0x27
   12ce8:	strbcc	r1, [r2, r0]
   12cec:	mov	r0, #0
   12cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   12cf4:	mov	sl, #1
   12cf8:	b	12b4c <__assert_fail@plt+0x1b54>
   12cfc:	ldr	r0, [sp, #32]
   12d00:	cmp	r0, #1
   12d04:	bne	12eb0 <__assert_fail@plt+0x1eb8>
   12d08:	str	lr, [sp, #80]	; 0x50
   12d0c:	bl	10f14 <__ctype_b_loc@plt>
   12d10:	ldr	r0, [r0]
   12d14:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d18:	mov	r1, #1
   12d1c:	add	r0, r0, r5, lsl #1
   12d20:	ldrb	r0, [r0, #1]
   12d24:	ubfx	sl, r0, #6, #1
   12d28:	ldr	r0, [sp, #48]	; 0x30
   12d2c:	mov	r2, r1
   12d30:	cmp	r1, #1
   12d34:	orr	r0, sl, r0
   12d38:	bhi	130a4 <__assert_fail@plt+0x20ac>
   12d3c:	tst	r0, #1
   12d40:	beq	130a4 <__assert_fail@plt+0x20ac>
   12d44:	ldr	lr, [sp, #80]	; 0x50
   12d48:	b	12b4c <__assert_fail@plt+0x1b54>
   12d4c:	cmp	r7, #0
   12d50:	bne	12fcc <__assert_fail@plt+0x1fd4>
   12d54:	ldrb	r0, [ip, #1]
   12d58:	cmp	r0, #0
   12d5c:	bne	12fcc <__assert_fail@plt+0x1fd4>
   12d60:	mov	r1, #1
   12d64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d68:	cmp	r0, #2
   12d6c:	bne	12d7c <__assert_fail@plt+0x1d84>
   12d70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d74:	tst	r0, #1
   12d78:	bne	134f0 <__assert_fail@plt+0x24f8>
   12d7c:	mov	sl, r1
   12d80:	b	12b4c <__assert_fail@plt+0x1b54>
   12d84:	ldr	r1, [sp, #44]	; 0x2c
   12d88:	mov	r9, #0
   12d8c:	mov	r0, #92	; 0x5c
   12d90:	cmp	r1, #0
   12d94:	beq	12da0 <__assert_fail@plt+0x1da8>
   12d98:	mov	sl, #0
   12d9c:	b	132b8 <__assert_fail@plt+0x22c0>
   12da0:	ldr	r1, [sp, #84]	; 0x54
   12da4:	mov	sl, #0
   12da8:	mov	r9, #0
   12dac:	tst	r1, #1
   12db0:	bne	12dec <__assert_fail@plt+0x1df4>
   12db4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12db8:	cmp	r0, #0
   12dbc:	mov	r0, r5
   12dc0:	beq	12de4 <__assert_fail@plt+0x1dec>
   12dc4:	ldr	r1, [fp, #16]
   12dc8:	ubfx	r0, r5, #5, #3
   12dcc:	mov	r2, #1
   12dd0:	ldr	r0, [r1, r0, lsl #2]
   12dd4:	and	r1, r5, #31
   12dd8:	tst	r0, r2, lsl r1
   12ddc:	mov	r0, r5
   12de0:	bne	12dec <__assert_fail@plt+0x1df4>
   12de4:	cmp	r6, #0
   12de8:	beq	132b8 <__assert_fail@plt+0x22c0>
   12dec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12df0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12df4:	tst	r1, #1
   12df8:	bne	134cc <__assert_fail@plt+0x24d4>
   12dfc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12e00:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e04:	cmp	r1, #2
   12e08:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12e0c:	movwne	r1, #1
   12e10:	orr	r1, r1, r5
   12e14:	tst	r1, #1
   12e18:	bne	12e5c <__assert_fail@plt+0x1e64>
   12e1c:	cmp	r8, r6
   12e20:	mov	r5, #1
   12e24:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e28:	movcc	r1, #39	; 0x27
   12e2c:	strbcc	r1, [r2, r8]
   12e30:	add	r1, r8, #1
   12e34:	cmp	r1, r6
   12e38:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e3c:	movcc	r2, #36	; 0x24
   12e40:	strbcc	r2, [r3, r1]
   12e44:	add	r1, r8, #2
   12e48:	add	r8, r8, #3
   12e4c:	cmp	r1, r6
   12e50:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e54:	movcc	r2, #39	; 0x27
   12e58:	strbcc	r2, [r3, r1]
   12e5c:	cmp	r8, r6
   12e60:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e64:	movcc	r1, #92	; 0x5c
   12e68:	strbcc	r1, [r2, r8]
   12e6c:	add	r8, r8, #1
   12e70:	cmp	r8, r6
   12e74:	and	r4, r4, sl
   12e78:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12e7c:	strbcc	r0, [r1, r8]
   12e80:	add	r8, r8, #1
   12e84:	add	r7, r7, #1
   12e88:	b	1286c <__assert_fail@plt+0x1874>
   12e8c:	ldr	r0, [sp, #28]
   12e90:	mov	sl, #0
   12e94:	mov	r9, #0
   12e98:	mov	r5, #0
   12e9c:	cmp	r0, #0
   12ea0:	beq	12db4 <__assert_fail@plt+0x1dbc>
   12ea4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12ea8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12eac:	b	12e84 <__assert_fail@plt+0x1e8c>
   12eb0:	mov	r0, #0
   12eb4:	cmn	lr, #1
   12eb8:	str	r6, [sp, #76]	; 0x4c
   12ebc:	str	r4, [sp, #20]
   12ec0:	str	r0, [fp, #-36]	; 0xffffffdc
   12ec4:	str	r0, [fp, #-40]	; 0xffffffd8
   12ec8:	bne	12edc <__assert_fail@plt+0x1ee4>
   12ecc:	mov	r0, ip
   12ed0:	bl	10f2c <strlen@plt>
   12ed4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ed8:	mov	lr, r0
   12edc:	add	r0, ip, r7
   12ee0:	mov	sl, #1
   12ee4:	mov	r6, #0
   12ee8:	sub	r4, fp, #40	; 0x28
   12eec:	str	lr, [sp, #80]	; 0x50
   12ef0:	str	r0, [sp, #36]	; 0x24
   12ef4:	str	r6, [sp, #40]	; 0x28
   12ef8:	add	r6, r6, r7
   12efc:	sub	r0, fp, #44	; 0x2c
   12f00:	mov	r3, r4
   12f04:	add	r1, ip, r6
   12f08:	sub	r2, lr, r6
   12f0c:	bl	14c04 <__assert_fail@plt+0x3c0c>
   12f10:	cmp	r0, #0
   12f14:	beq	13420 <__assert_fail@plt+0x2428>
   12f18:	cmn	r0, #1
   12f1c:	beq	133e0 <__assert_fail@plt+0x23e8>
   12f20:	ldr	lr, [sp, #80]	; 0x50
   12f24:	cmn	r0, #2
   12f28:	beq	133e8 <__assert_fail@plt+0x23f0>
   12f2c:	ldr	r2, [sp, #56]	; 0x38
   12f30:	cmp	r0, #2
   12f34:	mov	r1, #0
   12f38:	movwcc	r1, #1
   12f3c:	eor	r2, r2, #1
   12f40:	orrs	r1, r2, r1
   12f44:	bne	12f90 <__assert_fail@plt+0x1f98>
   12f48:	ldr	r1, [sp, #40]	; 0x28
   12f4c:	ldr	r2, [sp, #36]	; 0x24
   12f50:	add	ip, r2, r1
   12f54:	mov	r2, #1
   12f58:	ldrb	r3, [ip, r2]
   12f5c:	sub	r6, r3, #94	; 0x5e
   12f60:	cmp	r6, #30
   12f64:	bhi	12f78 <__assert_fail@plt+0x1f80>
   12f68:	mov	r4, #1
   12f6c:	mov	r1, #1073741829	; 0x40000005
   12f70:	tst	r1, r4, lsl r6
   12f74:	bne	134ec <__assert_fail@plt+0x24f4>
   12f78:	sub	r3, r3, #91	; 0x5b
   12f7c:	cmp	r3, #2
   12f80:	bcc	134ec <__assert_fail@plt+0x24f4>
   12f84:	add	r2, r2, #1
   12f88:	cmp	r2, r0
   12f8c:	bcc	12f58 <__assert_fail@plt+0x1f60>
   12f90:	ldr	r6, [sp, #40]	; 0x28
   12f94:	add	r6, r0, r6
   12f98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12f9c:	bl	10e60 <iswprint@plt>
   12fa0:	cmp	r0, #0
   12fa4:	sub	r4, fp, #40	; 0x28
   12fa8:	movwne	r0, #1
   12fac:	and	sl, sl, r0
   12fb0:	mov	r0, r4
   12fb4:	bl	10e0c <mbsinit@plt>
   12fb8:	ldr	lr, [sp, #80]	; 0x50
   12fbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fc0:	cmp	r0, #0
   12fc4:	beq	12ef4 <__assert_fail@plt+0x1efc>
   12fc8:	b	13428 <__assert_fail@plt+0x2430>
   12fcc:	mvn	lr, #0
   12fd0:	mov	r9, #0
   12fd4:	b	12b4c <__assert_fail@plt+0x1b54>
   12fd8:	ldr	r0, [sp, #24]
   12fdc:	cmp	r0, #0
   12fe0:	beq	13098 <__assert_fail@plt+0x20a0>
   12fe4:	add	r0, r7, #2
   12fe8:	cmp	r0, lr
   12fec:	bcs	13098 <__assert_fail@plt+0x20a0>
   12ff0:	add	r1, ip, r7
   12ff4:	ldrb	r1, [r1, #1]
   12ff8:	cmp	r1, #63	; 0x3f
   12ffc:	bne	13098 <__assert_fail@plt+0x20a0>
   13000:	ldrb	r5, [ip, r0]
   13004:	sub	r1, r5, #33	; 0x21
   13008:	cmp	r1, #29
   1300c:	bhi	13098 <__assert_fail@plt+0x20a0>
   13010:	movw	r3, #20929	; 0x51c1
   13014:	mov	r2, #1
   13018:	movt	r3, #14336	; 0x3800
   1301c:	tst	r3, r2, lsl r1
   13020:	beq	13098 <__assert_fail@plt+0x20a0>
   13024:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13028:	tst	r1, #1
   1302c:	bne	13600 <__assert_fail@plt+0x2608>
   13030:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13034:	mov	r7, r0
   13038:	cmp	r8, r1
   1303c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13040:	movcc	r1, #63	; 0x3f
   13044:	strbcc	r1, [r2, r8]
   13048:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1304c:	add	r1, r8, #1
   13050:	cmp	r1, r2
   13054:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13058:	movcc	r2, #34	; 0x22
   1305c:	strbcc	r2, [r3, r1]
   13060:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13064:	add	r1, r8, #2
   13068:	cmp	r1, r2
   1306c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13070:	movcc	r2, #34	; 0x22
   13074:	strbcc	r2, [r3, r1]
   13078:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1307c:	add	r1, r8, #3
   13080:	add	r8, r8, #4
   13084:	cmp	r1, r2
   13088:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1308c:	movcc	r2, #63	; 0x3f
   13090:	strbcc	r2, [r3, r1]
   13094:	b	1309c <__assert_fail@plt+0x20a4>
   13098:	mov	r5, #63	; 0x3f
   1309c:	mov	sl, #0
   130a0:	b	12b4c <__assert_fail@plt+0x1b54>
   130a4:	str	r0, [sp, #40]	; 0x28
   130a8:	add	r0, r2, r7
   130ac:	str	r6, [sp, #76]	; 0x4c
   130b0:	add	r1, r7, #1
   130b4:	ldr	lr, [sp, #80]	; 0x50
   130b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   130bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   130c0:	mov	r3, #0
   130c4:	str	r0, [sp, #36]	; 0x24
   130c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   130cc:	b	13160 <__assert_fail@plt+0x2168>
   130d0:	str	r0, [sp, #76]	; 0x4c
   130d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   130d8:	cmp	r9, #0
   130dc:	movwne	r9, #1
   130e0:	mvn	r7, r0
   130e4:	orr	r7, r7, r9
   130e8:	tst	r7, #1
   130ec:	bne	1313c <__assert_fail@plt+0x2144>
   130f0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   130f4:	cmp	r8, r6
   130f8:	bcs	13110 <__assert_fail@plt+0x2118>
   130fc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13100:	mov	r2, r4
   13104:	mov	r4, #39	; 0x27
   13108:	strb	r4, [r7, r8]
   1310c:	mov	r4, r2
   13110:	add	r7, r8, #1
   13114:	cmp	r7, r6
   13118:	bcs	13130 <__assert_fail@plt+0x2138>
   1311c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13120:	mov	r2, r4
   13124:	mov	r4, #39	; 0x27
   13128:	strb	r4, [r0, r7]
   1312c:	mov	r4, r2
   13130:	add	r8, r8, #2
   13134:	mov	r0, #0
   13138:	b	13144 <__assert_fail@plt+0x214c>
   1313c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13140:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13144:	cmp	r8, r6
   13148:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1314c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13150:	strbcc	r5, [r2, r8]
   13154:	add	r8, r8, #1
   13158:	ldrb	r5, [ip, r1]
   1315c:	add	r1, r1, #1
   13160:	ldr	r2, [sp, #40]	; 0x28
   13164:	tst	r2, #1
   13168:	beq	131a4 <__assert_fail@plt+0x21ac>
   1316c:	ldr	r2, [sp, #76]	; 0x4c
   13170:	str	r0, [fp, #-48]	; 0xffffffd0
   13174:	tst	r2, #1
   13178:	beq	1319c <__assert_fail@plt+0x21a4>
   1317c:	cmp	r8, r6
   13180:	bcs	13198 <__assert_fail@plt+0x21a0>
   13184:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13188:	mov	r2, r4
   1318c:	mov	r4, #92	; 0x5c
   13190:	strb	r4, [r6, r8]
   13194:	mov	r4, r2
   13198:	add	r8, r8, #1
   1319c:	mov	r0, #0
   131a0:	b	13298 <__assert_fail@plt+0x22a0>
   131a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   131a8:	tst	r2, #1
   131ac:	bne	134f8 <__assert_fail@plt+0x2500>
   131b0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   131b4:	cmp	r7, #2
   131b8:	movwne	r3, #1
   131bc:	orr	r3, r3, r0
   131c0:	tst	r3, #1
   131c4:	bne	13220 <__assert_fail@plt+0x2228>
   131c8:	cmp	r8, r6
   131cc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   131d0:	movcc	r3, #39	; 0x27
   131d4:	strbcc	r3, [r2, r8]
   131d8:	add	r3, r8, #1
   131dc:	cmp	r3, r6
   131e0:	bcs	131f8 <__assert_fail@plt+0x2200>
   131e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131e8:	mov	r7, r4
   131ec:	mov	r4, #36	; 0x24
   131f0:	strb	r4, [r2, r3]
   131f4:	mov	r4, r7
   131f8:	add	r3, r8, #2
   131fc:	cmp	r3, r6
   13200:	bcs	13218 <__assert_fail@plt+0x2220>
   13204:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13208:	mov	r7, r4
   1320c:	mov	r4, #39	; 0x27
   13210:	strb	r4, [r2, r3]
   13214:	mov	r4, r7
   13218:	add	r8, r8, #3
   1321c:	mov	r0, #1
   13220:	cmp	r8, r6
   13224:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13228:	movcc	r3, #92	; 0x5c
   1322c:	strbcc	r3, [r2, r8]
   13230:	add	r3, r8, #1
   13234:	cmp	r3, r6
   13238:	bcs	13258 <__assert_fail@plt+0x2260>
   1323c:	mov	r2, r4
   13240:	and	r7, r5, #192	; 0xc0
   13244:	mov	r4, #48	; 0x30
   13248:	orr	r7, r4, r7, lsr #6
   1324c:	mov	r4, r2
   13250:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13254:	strb	r7, [r2, r3]
   13258:	add	r3, r8, #2
   1325c:	cmp	r3, r6
   13260:	bcs	13280 <__assert_fail@plt+0x2288>
   13264:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13268:	mov	r6, r4
   1326c:	lsr	r7, r5, #3
   13270:	mov	r4, #6
   13274:	bfi	r7, r4, #3, #29
   13278:	mov	r4, r6
   1327c:	strb	r7, [r2, r3]
   13280:	str	r0, [fp, #-48]	; 0xffffffd0
   13284:	ldr	r0, [sp, #76]	; 0x4c
   13288:	mov	r3, #6
   1328c:	add	r8, r8, #3
   13290:	bfi	r5, r3, #3, #29
   13294:	mov	r3, #1
   13298:	ldr	r2, [sp, #36]	; 0x24
   1329c:	and	r9, r3, #1
   132a0:	cmp	r2, r1
   132a4:	bhi	130d0 <__assert_fail@plt+0x20d8>
   132a8:	cmp	r9, #0
   132ac:	sub	r7, r1, #1
   132b0:	mov	r0, r5
   132b4:	movwne	r9, #1
   132b8:	cmp	r9, #0
   132bc:	bne	13300 <__assert_fail@plt+0x2308>
   132c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   132c4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   132c8:	tst	r5, #1
   132cc:	beq	12e70 <__assert_fail@plt+0x1e78>
   132d0:	cmp	r8, r6
   132d4:	mov	r5, #0
   132d8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   132dc:	movcc	r1, #39	; 0x27
   132e0:	strbcc	r1, [r2, r8]
   132e4:	add	r1, r8, #1
   132e8:	add	r8, r8, #2
   132ec:	cmp	r1, r6
   132f0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   132f4:	movcc	r2, #39	; 0x27
   132f8:	strbcc	r2, [r3, r1]
   132fc:	b	12e70 <__assert_fail@plt+0x1e78>
   13300:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13304:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13308:	b	12e70 <__assert_fail@plt+0x1e78>
   1330c:	cmp	r8, r1
   13310:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13314:	movcc	r0, #39	; 0x27
   13318:	strbcc	r0, [r2, r8]
   1331c:	add	r0, r8, #1
   13320:	cmp	r0, r1
   13324:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13328:	movcc	r2, #36	; 0x24
   1332c:	strbcc	r2, [r3, r0]
   13330:	add	r0, r8, #2
   13334:	cmp	r0, r1
   13338:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1333c:	movcc	r2, #39	; 0x27
   13340:	strbcc	r2, [r3, r0]
   13344:	add	r0, r8, #3
   13348:	mov	r3, #1
   1334c:	cmp	r0, r1
   13350:	add	r8, r0, #1
   13354:	str	r3, [fp, #-48]	; 0xffffffd0
   13358:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1335c:	movcc	r1, #92	; 0x5c
   13360:	strbcc	r1, [r2, r0]
   13364:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13368:	cmp	r1, #2
   1336c:	beq	133d0 <__assert_fail@plt+0x23d8>
   13370:	add	r1, r7, #1
   13374:	mov	sl, #0
   13378:	mov	r9, #1
   1337c:	mov	r5, #48	; 0x30
   13380:	cmp	r1, lr
   13384:	bcs	12b4c <__assert_fail@plt+0x1b54>
   13388:	ldrb	r1, [ip, r1]
   1338c:	sub	r1, r1, #48	; 0x30
   13390:	uxtb	r1, r1
   13394:	cmp	r1, #9
   13398:	bhi	12b4c <__assert_fail@plt+0x1b54>
   1339c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   133a0:	cmp	r8, r1
   133a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   133a8:	movcc	r1, #48	; 0x30
   133ac:	strbcc	r1, [r2, r8]
   133b0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133b4:	add	r1, r0, #2
   133b8:	add	r8, r0, #3
   133bc:	cmp	r1, r2
   133c0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   133c4:	movcc	r2, #48	; 0x30
   133c8:	strbcc	r2, [r3, r1]
   133cc:	b	12b4c <__assert_fail@plt+0x1b54>
   133d0:	mov	r0, #48	; 0x30
   133d4:	mov	r9, #1
   133d8:	mov	sl, #0
   133dc:	b	12de4 <__assert_fail@plt+0x1dec>
   133e0:	mov	sl, #0
   133e4:	b	13420 <__assert_fail@plt+0x2428>
   133e8:	mov	sl, #0
   133ec:	cmp	lr, r6
   133f0:	bls	13420 <__assert_fail@plt+0x2428>
   133f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   133f8:	ldr	r6, [sp, #40]	; 0x28
   133fc:	ldr	r0, [sp, #36]	; 0x24
   13400:	ldrb	r0, [r0, r6]
   13404:	cmp	r0, #0
   13408:	beq	13428 <__assert_fail@plt+0x2430>
   1340c:	add	r6, r6, #1
   13410:	add	r0, r7, r6
   13414:	cmp	r0, lr
   13418:	bcc	133fc <__assert_fail@plt+0x2404>
   1341c:	b	13428 <__assert_fail@plt+0x2430>
   13420:	ldr	ip, [fp, #-84]	; 0xffffffac
   13424:	ldr	r6, [sp, #40]	; 0x28
   13428:	mov	r1, r6
   1342c:	ldr	r4, [sp, #20]
   13430:	ldr	r6, [sp, #76]	; 0x4c
   13434:	b	12d28 <__assert_fail@plt+0x1d30>
   13438:	mov	lr, r7
   1343c:	b	13444 <__assert_fail@plt+0x244c>
   13440:	mvn	lr, #0
   13444:	ldr	r9, [fp, #-64]	; 0xffffffc0
   13448:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1344c:	eor	r0, r9, #2
   13450:	orr	r0, r0, r8
   13454:	clz	r0, r0
   13458:	lsr	r0, r0, #5
   1345c:	tst	r1, r0
   13460:	bne	1355c <__assert_fail@plt+0x2564>
   13464:	mov	r0, r1
   13468:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1346c:	cmp	r9, #2
   13470:	movwne	r1, #1
   13474:	orr	r0, r0, r1
   13478:	tst	r0, #1
   1347c:	bne	1359c <__assert_fail@plt+0x25a4>
   13480:	ldr	r0, [sp, #52]	; 0x34
   13484:	ldr	r1, [sp, #68]	; 0x44
   13488:	str	lr, [sp, #80]	; 0x50
   1348c:	eor	r0, r0, #1
   13490:	tst	r0, #1
   13494:	bne	1359c <__assert_fail@plt+0x25a4>
   13498:	tst	r4, #1
   1349c:	bne	13564 <__assert_fail@plt+0x256c>
   134a0:	mov	r7, #0
   134a4:	cmp	r1, #0
   134a8:	beq	13594 <__assert_fail@plt+0x259c>
   134ac:	ldr	r0, [sp, #84]	; 0x54
   134b0:	mov	r3, #0
   134b4:	cmp	r6, #0
   134b8:	mov	r2, #0
   134bc:	mov	r4, r1
   134c0:	str	r3, [fp, #-72]	; 0xffffffb8
   134c4:	beq	12600 <__assert_fail@plt+0x1608>
   134c8:	b	1359c <__assert_fail@plt+0x25a4>
   134cc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134d0:	b	134f8 <__assert_fail@plt+0x2500>
   134d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   134d8:	mov	r2, #1
   134dc:	mov	lr, r4
   134e0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134e4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   134e8:	b	134fc <__assert_fail@plt+0x2504>
   134ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   134f0:	mov	r7, #2
   134f4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   134f8:	ldr	r2, [sp, #84]	; 0x54
   134fc:	mov	r0, #0
   13500:	ldr	r1, [fp, #12]
   13504:	tst	r2, #1
   13508:	mov	r2, r7
   1350c:	mov	r3, lr
   13510:	str	r0, [sp, #8]
   13514:	ldr	r0, [sp, #64]	; 0x40
   13518:	movwne	r2, #4
   1351c:	cmp	r7, #2
   13520:	movne	r2, r7
   13524:	str	r2, [sp]
   13528:	mov	r2, ip
   1352c:	bic	r1, r1, #2
   13530:	str	r0, [sp, #12]
   13534:	ldr	r0, [sp, #72]	; 0x48
   13538:	str	r1, [sp, #4]
   1353c:	mov	r1, r6
   13540:	str	r0, [sp, #16]
   13544:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13548:	bl	12588 <__assert_fail@plt+0x1590>
   1354c:	mov	r8, r0
   13550:	mov	r0, r8
   13554:	sub	sp, fp, #28
   13558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1355c:	mov	r7, #2
   13560:	b	134f8 <__assert_fail@plt+0x2500>
   13564:	mov	r0, #5
   13568:	ldr	r2, [fp, #-84]	; 0xffffffac
   1356c:	ldr	r3, [sp, #80]	; 0x50
   13570:	str	r0, [sp]
   13574:	ldr	r0, [fp, #12]
   13578:	str	r0, [sp, #4]
   1357c:	ldr	r0, [fp, #16]
   13580:	str	r0, [sp, #8]
   13584:	ldr	r0, [sp, #64]	; 0x40
   13588:	str	r0, [sp, #12]
   1358c:	ldr	r0, [sp, #72]	; 0x48
   13590:	b	13540 <__assert_fail@plt+0x2548>
   13594:	mov	r0, #0
   13598:	str	r0, [fp, #-72]	; 0xffffffb8
   1359c:	ldr	r1, [sp, #92]	; 0x5c
   135a0:	cmp	r1, #0
   135a4:	beq	135e4 <__assert_fail@plt+0x25ec>
   135a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   135ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135b0:	tst	r0, #1
   135b4:	bne	135e8 <__assert_fail@plt+0x25f0>
   135b8:	ldrb	r0, [r1]
   135bc:	cmp	r0, #0
   135c0:	beq	135e8 <__assert_fail@plt+0x25f0>
   135c4:	add	r1, r1, #1
   135c8:	cmp	r8, r6
   135cc:	strbcc	r0, [r2, r8]
   135d0:	add	r8, r8, #1
   135d4:	ldrb	r0, [r1], #1
   135d8:	cmp	r0, #0
   135dc:	bne	135c8 <__assert_fail@plt+0x25d0>
   135e0:	b	135e8 <__assert_fail@plt+0x25f0>
   135e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135e8:	cmp	r8, r6
   135ec:	movcc	r0, #0
   135f0:	strbcc	r0, [r2, r8]
   135f4:	b	13550 <__assert_fail@plt+0x2558>
   135f8:	mov	r2, #1
   135fc:	b	134e0 <__assert_fail@plt+0x24e8>
   13600:	mov	r7, #5
   13604:	b	134f4 <__assert_fail@plt+0x24fc>
   13608:	bl	10fe0 <abort@plt>
   1360c:	mov	r3, r2
   13610:	mov	r2, #0
   13614:	b	13618 <__assert_fail@plt+0x2620>
   13618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1361c:	add	fp, sp, #28
   13620:	sub	sp, sp, #36	; 0x24
   13624:	movw	r8, #24944	; 0x6170
   13628:	cmp	r3, #0
   1362c:	mov	r4, r2
   13630:	str	r2, [sp, #24]
   13634:	mov	r5, r1
   13638:	mov	r6, r0
   1363c:	str	r0, [sp, #20]
   13640:	movt	r8, #2
   13644:	movne	r8, r3
   13648:	bl	10f38 <__errno_location@plt>
   1364c:	str	r0, [sp, #28]
   13650:	cmp	r4, #0
   13654:	add	sl, r8, #8
   13658:	ldm	r8, {r3, r9}
   1365c:	ldr	r7, [r0]
   13660:	ldr	r1, [r8, #40]	; 0x28
   13664:	ldr	r2, [r8, #44]	; 0x2c
   13668:	mov	r0, #0
   1366c:	orreq	r9, r9, #1
   13670:	str	r7, [sp, #32]
   13674:	mov	r7, r5
   13678:	stm	sp, {r3, r9, sl}
   1367c:	str	r1, [sp, #12]
   13680:	str	r2, [sp, #16]
   13684:	mov	r1, #0
   13688:	mov	r2, r6
   1368c:	mov	r3, r5
   13690:	bl	12588 <__assert_fail@plt+0x1590>
   13694:	add	r4, r0, #1
   13698:	mov	r5, r0
   1369c:	mov	r0, r4
   136a0:	bl	145ec <__assert_fail@plt+0x35f4>
   136a4:	mov	r6, r0
   136a8:	ldr	r0, [r8]
   136ac:	ldr	r2, [r8, #44]	; 0x2c
   136b0:	ldr	r1, [r8, #40]	; 0x28
   136b4:	mov	r3, r7
   136b8:	stm	sp, {r0, r9, sl}
   136bc:	str	r2, [sp, #16]
   136c0:	str	r1, [sp, #12]
   136c4:	mov	r0, r6
   136c8:	mov	r1, r4
   136cc:	ldr	r2, [sp, #20]
   136d0:	bl	12588 <__assert_fail@plt+0x1590>
   136d4:	ldr	r0, [sp, #24]
   136d8:	ldr	r1, [sp, #32]
   136dc:	ldr	r2, [sp, #28]
   136e0:	cmp	r0, #0
   136e4:	str	r1, [r2]
   136e8:	strne	r5, [r0]
   136ec:	mov	r0, r6
   136f0:	sub	sp, fp, #28
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136fc:	add	fp, sp, #24
   13700:	movw	r5, #24812	; 0x60ec
   13704:	movw	r8, #24808	; 0x60e8
   13708:	movt	r5, #2
   1370c:	movt	r8, #2
   13710:	ldr	r0, [r5]
   13714:	ldr	r4, [r8]
   13718:	cmp	r0, #2
   1371c:	blt	13748 <__assert_fail@plt+0x2750>
   13720:	add	r7, r4, #12
   13724:	mov	r6, #0
   13728:	ldr	r0, [r7, r6, lsl #3]
   1372c:	bl	14ba4 <__assert_fail@plt+0x3bac>
   13730:	ldr	r1, [r5]
   13734:	add	r2, r6, #2
   13738:	add	r0, r6, #1
   1373c:	mov	r6, r0
   13740:	cmp	r2, r1
   13744:	blt	13728 <__assert_fail@plt+0x2730>
   13748:	ldr	r0, [r4, #4]
   1374c:	movw	r7, #24992	; 0x61a0
   13750:	movt	r7, #2
   13754:	cmp	r0, r7
   13758:	beq	13770 <__assert_fail@plt+0x2778>
   1375c:	bl	14ba4 <__assert_fail@plt+0x3bac>
   13760:	movw	r0, #24816	; 0x60f0
   13764:	mov	r6, #256	; 0x100
   13768:	movt	r0, #2
   1376c:	strd	r6, [r0]
   13770:	movw	r6, #24816	; 0x60f0
   13774:	movt	r6, #2
   13778:	cmp	r4, r6
   1377c:	beq	1378c <__assert_fail@plt+0x2794>
   13780:	mov	r0, r4
   13784:	bl	14ba4 <__assert_fail@plt+0x3bac>
   13788:	str	r6, [r8]
   1378c:	mov	r0, #1
   13790:	str	r0, [r5]
   13794:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13798:	movw	r3, #24944	; 0x6170
   1379c:	mvn	r2, #0
   137a0:	movt	r3, #2
   137a4:	b	137a8 <__assert_fail@plt+0x27b0>
   137a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137ac:	add	fp, sp, #28
   137b0:	sub	sp, sp, #44	; 0x2c
   137b4:	mov	r7, r3
   137b8:	str	r2, [sp, #36]	; 0x24
   137bc:	str	r1, [sp, #32]
   137c0:	mov	r5, r0
   137c4:	bl	10f38 <__errno_location@plt>
   137c8:	cmp	r5, #0
   137cc:	blt	13938 <__assert_fail@plt+0x2940>
   137d0:	cmn	r5, #-2147483647	; 0x80000001
   137d4:	beq	13938 <__assert_fail@plt+0x2940>
   137d8:	movw	r8, #24812	; 0x60ec
   137dc:	movw	r4, #24808	; 0x60e8
   137e0:	str	r0, [sp, #28]
   137e4:	ldr	r0, [r0]
   137e8:	movt	r8, #2
   137ec:	movt	r4, #2
   137f0:	ldr	r1, [r8]
   137f4:	ldr	r6, [r4]
   137f8:	str	r0, [sp, #24]
   137fc:	cmp	r1, r5
   13800:	ble	1380c <__assert_fail@plt+0x2814>
   13804:	mov	sl, r6
   13808:	b	13874 <__assert_fail@plt+0x287c>
   1380c:	movw	r9, #24816	; 0x60f0
   13810:	mov	r0, #8
   13814:	add	r2, r5, #1
   13818:	str	r1, [fp, #-32]	; 0xffffffe0
   1381c:	mvn	r3, #-2147483648	; 0x80000000
   13820:	movt	r9, #2
   13824:	str	r0, [sp]
   13828:	sub	r2, r2, r1
   1382c:	sub	r1, fp, #32
   13830:	subs	r0, r6, r9
   13834:	movne	r0, r6
   13838:	bl	1471c <__assert_fail@plt+0x3724>
   1383c:	cmp	r6, r9
   13840:	mov	sl, r0
   13844:	str	r0, [r4]
   13848:	ldrdeq	r0, [r9]
   1384c:	stmeq	sl, {r0, r1}
   13850:	ldr	r1, [r8]
   13854:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13858:	add	r0, sl, r1, lsl #3
   1385c:	sub	r1, r2, r1
   13860:	lsl	r2, r1, #3
   13864:	mov	r1, #0
   13868:	bl	10f50 <memset@plt>
   1386c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13870:	str	r0, [r8]
   13874:	mov	r9, sl
   13878:	ldr	r6, [r9, r5, lsl #3]!
   1387c:	ldr	r4, [r9, #4]!
   13880:	ldm	r7, {r0, r1}
   13884:	ldr	r2, [r7, #40]	; 0x28
   13888:	ldr	r3, [r7, #44]	; 0x2c
   1388c:	orr	r8, r1, #1
   13890:	add	r1, r7, #8
   13894:	stm	sp, {r0, r8}
   13898:	add	r0, sp, #8
   1389c:	str	r1, [sp, #20]
   138a0:	stm	r0, {r1, r2, r3}
   138a4:	mov	r0, r4
   138a8:	mov	r1, r6
   138ac:	ldr	r2, [sp, #32]
   138b0:	ldr	r3, [sp, #36]	; 0x24
   138b4:	bl	12588 <__assert_fail@plt+0x1590>
   138b8:	cmp	r6, r0
   138bc:	bhi	13920 <__assert_fail@plt+0x2928>
   138c0:	add	r6, r0, #1
   138c4:	movw	r0, #24992	; 0x61a0
   138c8:	movt	r0, #2
   138cc:	str	r6, [sl, r5, lsl #3]
   138d0:	cmp	r4, r0
   138d4:	beq	138e0 <__assert_fail@plt+0x28e8>
   138d8:	mov	r0, r4
   138dc:	bl	14ba4 <__assert_fail@plt+0x3bac>
   138e0:	mov	r0, r6
   138e4:	bl	145ec <__assert_fail@plt+0x35f4>
   138e8:	str	r0, [r9]
   138ec:	mov	r4, r0
   138f0:	add	r3, sp, #8
   138f4:	ldr	r0, [r7]
   138f8:	ldr	r1, [r7, #40]	; 0x28
   138fc:	ldr	r2, [r7, #44]	; 0x2c
   13900:	stm	sp, {r0, r8}
   13904:	ldr	r0, [sp, #20]
   13908:	stm	r3, {r0, r1, r2}
   1390c:	mov	r0, r4
   13910:	mov	r1, r6
   13914:	ldr	r2, [sp, #32]
   13918:	ldr	r3, [sp, #36]	; 0x24
   1391c:	bl	12588 <__assert_fail@plt+0x1590>
   13920:	ldr	r0, [sp, #28]
   13924:	ldr	r1, [sp, #24]
   13928:	str	r1, [r0]
   1392c:	mov	r0, r4
   13930:	sub	sp, fp, #28
   13934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13938:	bl	10fe0 <abort@plt>
   1393c:	movw	r3, #24944	; 0x6170
   13940:	movt	r3, #2
   13944:	b	137a8 <__assert_fail@plt+0x27b0>
   13948:	movw	r3, #24944	; 0x6170
   1394c:	mov	r1, r0
   13950:	mov	r0, #0
   13954:	mvn	r2, #0
   13958:	movt	r3, #2
   1395c:	b	137a8 <__assert_fail@plt+0x27b0>
   13960:	movw	r3, #24944	; 0x6170
   13964:	mov	r2, r1
   13968:	mov	r1, r0
   1396c:	mov	r0, #0
   13970:	movt	r3, #2
   13974:	b	137a8 <__assert_fail@plt+0x27b0>
   13978:	push	{fp, lr}
   1397c:	mov	fp, sp
   13980:	sub	sp, sp, #48	; 0x30
   13984:	vmov.i32	q8, #0	; 0x00000000
   13988:	mov	ip, #32
   1398c:	mov	r3, sp
   13990:	mov	lr, r2
   13994:	cmp	r1, #10
   13998:	add	r2, r3, #16
   1399c:	vst1.64	{d16-d17}, [r3], ip
   139a0:	vst1.64	{d16-d17}, [r3]
   139a4:	vst1.64	{d16-d17}, [r2]
   139a8:	beq	139c8 <__assert_fail@plt+0x29d0>
   139ac:	str	r1, [sp]
   139b0:	mov	r3, sp
   139b4:	mov	r1, lr
   139b8:	mvn	r2, #0
   139bc:	bl	137a8 <__assert_fail@plt+0x27b0>
   139c0:	mov	sp, fp
   139c4:	pop	{fp, pc}
   139c8:	bl	10fe0 <abort@plt>
   139cc:	push	{r4, sl, fp, lr}
   139d0:	add	fp, sp, #8
   139d4:	sub	sp, sp, #48	; 0x30
   139d8:	mov	ip, r3
   139dc:	mov	r3, sp
   139e0:	vmov.i32	q8, #0	; 0x00000000
   139e4:	mov	lr, #32
   139e8:	cmp	r1, #10
   139ec:	add	r4, r3, #16
   139f0:	vst1.64	{d16-d17}, [r3], lr
   139f4:	vst1.64	{d16-d17}, [r3]
   139f8:	vst1.64	{d16-d17}, [r4]
   139fc:	beq	13a1c <__assert_fail@plt+0x2a24>
   13a00:	str	r1, [sp]
   13a04:	mov	r1, r2
   13a08:	mov	r3, sp
   13a0c:	mov	r2, ip
   13a10:	bl	137a8 <__assert_fail@plt+0x27b0>
   13a14:	sub	sp, fp, #8
   13a18:	pop	{r4, sl, fp, pc}
   13a1c:	bl	10fe0 <abort@plt>
   13a20:	mov	r2, r1
   13a24:	mov	r1, r0
   13a28:	mov	r0, #0
   13a2c:	b	13978 <__assert_fail@plt+0x2980>
   13a30:	mov	r3, r2
   13a34:	mov	r2, r1
   13a38:	mov	r1, r0
   13a3c:	mov	r0, #0
   13a40:	b	139cc <__assert_fail@plt+0x29d4>
   13a44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a48:	add	fp, sp, #24
   13a4c:	sub	sp, sp, #48	; 0x30
   13a50:	movw	r8, #24944	; 0x6170
   13a54:	mov	lr, r0
   13a58:	mov	r3, sp
   13a5c:	mov	ip, r1
   13a60:	movt	r8, #2
   13a64:	mov	r1, r3
   13a68:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13a6c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13a70:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13a74:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13a78:	ubfx	r0, r2, #5, #3
   13a7c:	and	r2, r2, #31
   13a80:	mov	r4, #1
   13a84:	add	r0, r3, r0, lsl #2
   13a88:	ldr	r1, [r0, #8]
   13a8c:	bic	r4, r4, r1, lsr r2
   13a90:	eor	r1, r1, r4, lsl r2
   13a94:	mov	r2, ip
   13a98:	str	r1, [r0, #8]
   13a9c:	mov	r0, #0
   13aa0:	mov	r1, lr
   13aa4:	bl	137a8 <__assert_fail@plt+0x27b0>
   13aa8:	sub	sp, fp, #24
   13aac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ab0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ab4:	add	fp, sp, #24
   13ab8:	sub	sp, sp, #48	; 0x30
   13abc:	movw	lr, #24944	; 0x6170
   13ac0:	mov	ip, r0
   13ac4:	mov	r3, sp
   13ac8:	movt	lr, #2
   13acc:	mov	r2, r3
   13ad0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13ad4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13ad8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13adc:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13ae0:	ubfx	r0, r1, #5, #3
   13ae4:	and	r1, r1, #31
   13ae8:	mov	r7, #1
   13aec:	add	r0, r3, r0, lsl #2
   13af0:	ldr	r2, [r0, #8]
   13af4:	bic	r7, r7, r2, lsr r1
   13af8:	eor	r1, r2, r7, lsl r1
   13afc:	mvn	r2, #0
   13b00:	str	r1, [r0, #8]
   13b04:	mov	r0, #0
   13b08:	mov	r1, ip
   13b0c:	bl	137a8 <__assert_fail@plt+0x27b0>
   13b10:	sub	sp, fp, #24
   13b14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b18:	push	{r4, r5, r6, r7, fp, lr}
   13b1c:	add	fp, sp, #16
   13b20:	sub	sp, sp, #48	; 0x30
   13b24:	movw	lr, #24944	; 0x6170
   13b28:	mov	ip, r0
   13b2c:	mov	r3, sp
   13b30:	movt	lr, #2
   13b34:	mov	r2, r3
   13b38:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13b3c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13b40:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13b44:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13b48:	mov	r1, ip
   13b4c:	mvn	r2, #0
   13b50:	ldr	r0, [sp, #12]
   13b54:	orr	r0, r0, #67108864	; 0x4000000
   13b58:	str	r0, [sp, #12]
   13b5c:	mov	r0, #0
   13b60:	bl	137a8 <__assert_fail@plt+0x27b0>
   13b64:	sub	sp, fp, #16
   13b68:	pop	{r4, r5, r6, r7, fp, pc}
   13b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b70:	add	fp, sp, #24
   13b74:	sub	sp, sp, #48	; 0x30
   13b78:	movw	r8, #24944	; 0x6170
   13b7c:	mov	ip, r1
   13b80:	mov	lr, r0
   13b84:	mov	r3, sp
   13b88:	movt	r8, #2
   13b8c:	mov	r2, r3
   13b90:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13b94:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13b98:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13b9c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13ba0:	mov	r1, lr
   13ba4:	mov	r2, ip
   13ba8:	ldr	r0, [sp, #12]
   13bac:	orr	r0, r0, #67108864	; 0x4000000
   13bb0:	str	r0, [sp, #12]
   13bb4:	mov	r0, #0
   13bb8:	bl	137a8 <__assert_fail@plt+0x27b0>
   13bbc:	sub	sp, fp, #24
   13bc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bc8:	add	fp, sp, #24
   13bcc:	sub	sp, sp, #96	; 0x60
   13bd0:	mov	lr, sp
   13bd4:	vmov.i32	q8, #0	; 0x00000000
   13bd8:	mov	ip, r2
   13bdc:	cmp	r1, #10
   13be0:	add	r3, lr, #16
   13be4:	mov	r2, lr
   13be8:	vst1.64	{d16-d17}, [r3]
   13bec:	mov	r3, #28
   13bf0:	vst1.64	{d16-d17}, [r2], r3
   13bf4:	vst1.32	{d16-d17}, [r2]
   13bf8:	beq	13c38 <__assert_fail@plt+0x2c40>
   13bfc:	str	r1, [sp, #48]	; 0x30
   13c00:	add	r3, sp, #48	; 0x30
   13c04:	ldm	lr!, {r2, r4, r5, r6, r7}
   13c08:	add	r1, r3, #4
   13c0c:	stmia	r1!, {r2, r4, r5, r6, r7}
   13c10:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13c14:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13c18:	mvn	r2, #0
   13c1c:	ldr	r1, [sp, #60]	; 0x3c
   13c20:	orr	r1, r1, #67108864	; 0x4000000
   13c24:	str	r1, [sp, #60]	; 0x3c
   13c28:	mov	r1, ip
   13c2c:	bl	137a8 <__assert_fail@plt+0x27b0>
   13c30:	sub	sp, fp, #24
   13c34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c38:	bl	10fe0 <abort@plt>
   13c3c:	push	{fp, lr}
   13c40:	mov	fp, sp
   13c44:	sub	sp, sp, #8
   13c48:	mvn	ip, #0
   13c4c:	str	ip, [sp]
   13c50:	bl	13c5c <__assert_fail@plt+0x2c64>
   13c54:	mov	sp, fp
   13c58:	pop	{fp, pc}
   13c5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13c60:	add	fp, sp, #24
   13c64:	sub	sp, sp, #48	; 0x30
   13c68:	movw	ip, #24944	; 0x6170
   13c6c:	mov	lr, r3
   13c70:	mov	r3, sp
   13c74:	cmp	r1, #0
   13c78:	movt	ip, #2
   13c7c:	cmpne	r2, #0
   13c80:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13c84:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13c88:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13c8c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13c90:	mov	r3, #10
   13c94:	str	r3, [sp]
   13c98:	bne	13ca0 <__assert_fail@plt+0x2ca8>
   13c9c:	bl	10fe0 <abort@plt>
   13ca0:	ldr	ip, [fp, #8]
   13ca4:	str	r2, [sp, #44]	; 0x2c
   13ca8:	str	r1, [sp, #40]	; 0x28
   13cac:	mov	r3, sp
   13cb0:	mov	r1, lr
   13cb4:	mov	r2, ip
   13cb8:	bl	137a8 <__assert_fail@plt+0x27b0>
   13cbc:	sub	sp, fp, #24
   13cc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13cc4:	push	{fp, lr}
   13cc8:	mov	fp, sp
   13ccc:	sub	sp, sp, #8
   13cd0:	mov	r3, r2
   13cd4:	mov	r2, r1
   13cd8:	mov	r1, r0
   13cdc:	mvn	r0, #0
   13ce0:	str	r0, [sp]
   13ce4:	mov	r0, #0
   13ce8:	bl	13c5c <__assert_fail@plt+0x2c64>
   13cec:	mov	sp, fp
   13cf0:	pop	{fp, pc}
   13cf4:	push	{fp, lr}
   13cf8:	mov	fp, sp
   13cfc:	sub	sp, sp, #8
   13d00:	mov	ip, r2
   13d04:	mov	r2, r1
   13d08:	mov	r1, r0
   13d0c:	str	r3, [sp]
   13d10:	mov	r0, #0
   13d14:	mov	r3, ip
   13d18:	bl	13c5c <__assert_fail@plt+0x2c64>
   13d1c:	mov	sp, fp
   13d20:	pop	{fp, pc}
   13d24:	movw	r3, #24824	; 0x60f8
   13d28:	movt	r3, #2
   13d2c:	b	137a8 <__assert_fail@plt+0x27b0>
   13d30:	movw	r3, #24824	; 0x60f8
   13d34:	mov	r2, r1
   13d38:	mov	r1, r0
   13d3c:	mov	r0, #0
   13d40:	movt	r3, #2
   13d44:	b	137a8 <__assert_fail@plt+0x27b0>
   13d48:	movw	r3, #24824	; 0x60f8
   13d4c:	mvn	r2, #0
   13d50:	movt	r3, #2
   13d54:	b	137a8 <__assert_fail@plt+0x27b0>
   13d58:	movw	r3, #24824	; 0x60f8
   13d5c:	mov	r1, r0
   13d60:	mov	r0, #0
   13d64:	mvn	r2, #0
   13d68:	movt	r3, #2
   13d6c:	b	137a8 <__assert_fail@plt+0x27b0>
   13d70:	push	{r4, r5, fp, lr}
   13d74:	add	fp, sp, #8
   13d78:	mov	r5, r0
   13d7c:	mov	r4, r1
   13d80:	mov	r0, #0
   13d84:	mov	r2, #5
   13d88:	mov	r1, r5
   13d8c:	bl	10e30 <dcgettext@plt>
   13d90:	cmp	r0, r5
   13d94:	popne	{r4, r5, fp, pc}
   13d98:	bl	14bcc <__assert_fail@plt+0x3bd4>
   13d9c:	ldrb	r1, [r0]
   13da0:	and	r1, r1, #223	; 0xdf
   13da4:	cmp	r1, #71	; 0x47
   13da8:	beq	13e10 <__assert_fail@plt+0x2e18>
   13dac:	cmp	r1, #85	; 0x55
   13db0:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13db4:	ldrb	r1, [r0, #1]
   13db8:	and	r1, r1, #223	; 0xdf
   13dbc:	cmp	r1, #84	; 0x54
   13dc0:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13dc4:	ldrb	r1, [r0, #2]
   13dc8:	and	r1, r1, #223	; 0xdf
   13dcc:	cmp	r1, #70	; 0x46
   13dd0:	ldrbeq	r1, [r0, #3]
   13dd4:	cmpeq	r1, #45	; 0x2d
   13dd8:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13ddc:	ldrb	r1, [r0, #4]
   13de0:	cmp	r1, #56	; 0x38
   13de4:	ldrbeq	r0, [r0, #5]
   13de8:	cmpeq	r0, #0
   13dec:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13df0:	ldrb	r1, [r5]
   13df4:	movw	r2, #21298	; 0x5332
   13df8:	movw	r0, #21302	; 0x5336
   13dfc:	movt	r2, #1
   13e00:	movt	r0, #1
   13e04:	cmp	r1, #96	; 0x60
   13e08:	moveq	r0, r2
   13e0c:	pop	{r4, r5, fp, pc}
   13e10:	ldrb	r1, [r0, #1]
   13e14:	and	r1, r1, #223	; 0xdf
   13e18:	cmp	r1, #66	; 0x42
   13e1c:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13e20:	ldrb	r1, [r0, #2]
   13e24:	cmp	r1, #49	; 0x31
   13e28:	ldrbeq	r1, [r0, #3]
   13e2c:	cmpeq	r1, #56	; 0x38
   13e30:	beq	13e50 <__assert_fail@plt+0x2e58>
   13e34:	movw	r1, #21292	; 0x532c
   13e38:	movw	r0, #21296	; 0x5330
   13e3c:	cmp	r4, #9
   13e40:	movt	r1, #1
   13e44:	movt	r0, #1
   13e48:	moveq	r0, r1
   13e4c:	pop	{r4, r5, fp, pc}
   13e50:	ldrb	r1, [r0, #4]
   13e54:	cmp	r1, #48	; 0x30
   13e58:	ldrbeq	r1, [r0, #5]
   13e5c:	cmpeq	r1, #51	; 0x33
   13e60:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13e64:	ldrb	r1, [r0, #6]
   13e68:	cmp	r1, #48	; 0x30
   13e6c:	ldrbeq	r0, [r0, #7]
   13e70:	cmpeq	r0, #0
   13e74:	bne	13e34 <__assert_fail@plt+0x2e3c>
   13e78:	ldrb	r1, [r5]
   13e7c:	movw	r2, #21306	; 0x533a
   13e80:	movw	r0, #21310	; 0x533e
   13e84:	movt	r2, #1
   13e88:	movt	r0, #1
   13e8c:	b	13e04 <__assert_fail@plt+0x2e0c>
   13e90:	mov	r1, #0
   13e94:	str	r1, [r0]
   13e98:	str	r1, [r0, #4]
   13e9c:	bx	lr
   13ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ea4:	add	fp, sp, #28
   13ea8:	sub	sp, sp, #52	; 0x34
   13eac:	add	r5, sp, #16
   13eb0:	mov	sl, r0
   13eb4:	vmov.i32	q8, #0	; 0x00000000
   13eb8:	mov	r8, r3
   13ebc:	cmp	r2, #0
   13ec0:	mov	r0, r5
   13ec4:	vst1.64	{d16-d17}, [r0]!
   13ec8:	vst1.64	{d16-d17}, [r0]
   13ecc:	beq	13ef4 <__assert_fail@plt+0x2efc>
   13ed0:	mov	r0, #1
   13ed4:	ldrb	r3, [r1], #1
   13ed8:	subs	r2, r2, #1
   13edc:	ubfx	r7, r3, #5, #3
   13ee0:	and	r3, r3, #31
   13ee4:	ldr	r6, [r5, r7, lsl #2]
   13ee8:	orr	r3, r6, r0, lsl r3
   13eec:	str	r3, [r5, r7, lsl #2]
   13ef0:	bne	13ed4 <__assert_fail@plt+0x2edc>
   13ef4:	mov	r0, sl
   13ef8:	bl	10e24 <getc_unlocked@plt>
   13efc:	mov	r6, r0
   13f00:	cmp	r0, #0
   13f04:	blt	13f34 <__assert_fail@plt+0x2f3c>
   13f08:	mov	r4, #1
   13f0c:	lsr	r0, r6, #5
   13f10:	and	r1, r6, #31
   13f14:	ldr	r0, [r5, r0, lsl #2]
   13f18:	tst	r0, r4, lsl r1
   13f1c:	beq	13f34 <__assert_fail@plt+0x2f3c>
   13f20:	mov	r0, sl
   13f24:	bl	10e24 <getc_unlocked@plt>
   13f28:	mov	r6, r0
   13f2c:	cmn	r0, #1
   13f30:	bgt	13f0c <__assert_fail@plt+0x2f14>
   13f34:	ldm	r8, {r0, r7}
   13f38:	cmp	r6, #0
   13f3c:	str	r0, [sp, #12]
   13f40:	blt	13fc8 <__assert_fail@plt+0x2fd0>
   13f44:	str	r8, [sp, #8]
   13f48:	mov	r9, #0
   13f4c:	mov	r8, #1
   13f50:	mov	r4, #0
   13f54:	b	13f74 <__assert_fail@plt+0x2f7c>
   13f58:	mov	r0, sl
   13f5c:	strb	r6, [r7, r4]
   13f60:	bl	10e24 <getc_unlocked@plt>
   13f64:	mov	r6, r0
   13f68:	lsr	r9, r0, #31
   13f6c:	ldr	r0, [sp, #12]
   13f70:	add	r4, r4, #1
   13f74:	cmp	r4, r0
   13f78:	bne	13f98 <__assert_fail@plt+0x2fa0>
   13f7c:	mov	r0, r7
   13f80:	add	r1, sp, #12
   13f84:	mov	r2, #1
   13f88:	mvn	r3, #0
   13f8c:	str	r8, [sp]
   13f90:	bl	1471c <__assert_fail@plt+0x3724>
   13f94:	mov	r7, r0
   13f98:	tst	r9, #1
   13f9c:	lsreq	r0, r6, #5
   13fa0:	andeq	r1, r6, #31
   13fa4:	ldreq	r0, [r5, r0, lsl #2]
   13fa8:	tsteq	r0, r8, lsl r1
   13fac:	beq	13f58 <__assert_fail@plt+0x2f60>
   13fb0:	mov	r0, #0
   13fb4:	ldr	r1, [sp, #8]
   13fb8:	strb	r0, [r7, r4]
   13fbc:	ldr	r0, [sp, #12]
   13fc0:	stm	r1, {r0, r7}
   13fc4:	b	13fcc <__assert_fail@plt+0x2fd4>
   13fc8:	mvn	r4, #0
   13fcc:	mov	r0, r4
   13fd0:	sub	sp, fp, #28
   13fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	add	fp, sp, #28
   13fe0:	sub	sp, sp, #28
   13fe4:	add	r4, r1, #1
   13fe8:	cmp	r1, #0
   13fec:	mov	r7, r0
   13ff0:	mov	r1, #4
   13ff4:	str	r3, [sp, #12]
   13ff8:	str	r2, [sp, #8]
   13ffc:	movweq	r4, #64	; 0x40
   14000:	mov	r0, r4
   14004:	str	r4, [sp, #16]
   14008:	bl	1468c <__assert_fail@plt+0x3694>
   1400c:	mov	r6, r0
   14010:	mov	r0, r4
   14014:	mov	r1, #4
   14018:	bl	1468c <__assert_fail@plt+0x3694>
   1401c:	mov	r4, #0
   14020:	mov	r5, r0
   14024:	str	r4, [sp, #20]
   14028:	str	r4, [sp, #24]
   1402c:	b	1405c <__assert_fail@plt+0x3064>
   14030:	add	r8, sl, #1
   14034:	mov	r1, #1
   14038:	mov	r0, r8
   1403c:	bl	1468c <__assert_fail@plt+0x3694>
   14040:	str	sl, [r5, r4, lsl #2]
   14044:	mov	r2, r8
   14048:	mov	r9, r0
   1404c:	ldr	r1, [sp, #24]
   14050:	bl	10e00 <memcpy@plt>
   14054:	str	r9, [r6, r4, lsl #2]
   14058:	add	r4, r4, #1
   1405c:	ldr	r1, [sp, #8]
   14060:	ldr	r2, [sp, #12]
   14064:	mov	r0, r7
   14068:	add	r3, sp, #20
   1406c:	bl	13ea0 <__assert_fail@plt+0x2ea8>
   14070:	mov	sl, r0
   14074:	ldr	r0, [sp, #16]
   14078:	cmp	r4, r0
   1407c:	blt	140b4 <__assert_fail@plt+0x30bc>
   14080:	mov	r0, #4
   14084:	add	r1, sp, #16
   14088:	mov	r2, #1
   1408c:	mvn	r3, #0
   14090:	str	r0, [sp]
   14094:	mov	r0, r6
   14098:	bl	1471c <__assert_fail@plt+0x3724>
   1409c:	ldr	r1, [sp, #16]
   140a0:	mov	r6, r0
   140a4:	mov	r0, r5
   140a8:	mov	r2, #4
   140ac:	bl	14580 <__assert_fail@plt+0x3588>
   140b0:	mov	r5, r0
   140b4:	cmn	sl, #1
   140b8:	bne	14030 <__assert_fail@plt+0x3038>
   140bc:	mov	r0, #0
   140c0:	str	r0, [r6, r4, lsl #2]
   140c4:	str	r0, [r5, r4, lsl #2]
   140c8:	ldr	r0, [sp, #24]
   140cc:	bl	14ba4 <__assert_fail@plt+0x3bac>
   140d0:	ldr	r0, [fp, #8]
   140d4:	str	r6, [r0]
   140d8:	ldr	r0, [fp, #12]
   140dc:	cmp	r0, #0
   140e0:	beq	140ec <__assert_fail@plt+0x30f4>
   140e4:	str	r5, [r0]
   140e8:	b	140f4 <__assert_fail@plt+0x30fc>
   140ec:	mov	r0, r5
   140f0:	bl	14ba4 <__assert_fail@plt+0x3bac>
   140f4:	mov	r0, r4
   140f8:	sub	sp, fp, #28
   140fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14100:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14104:	add	fp, sp, #24
   14108:	sub	sp, sp, #32
   1410c:	ldr	r6, [fp, #12]
   14110:	ldr	r7, [fp, #8]
   14114:	mov	r4, r2
   14118:	mov	r8, r0
   1411c:	cmp	r1, #0
   14120:	beq	14148 <__assert_fail@plt+0x3150>
   14124:	movw	r2, #21400	; 0x5398
   14128:	mov	r5, r1
   1412c:	str	r3, [sp, #4]
   14130:	str	r4, [sp]
   14134:	mov	r0, r8
   14138:	mov	r1, #1
   1413c:	movt	r2, #1
   14140:	mov	r3, r5
   14144:	b	14160 <__assert_fail@plt+0x3168>
   14148:	movw	r2, #21412	; 0x53a4
   1414c:	str	r3, [sp]
   14150:	mov	r0, r8
   14154:	mov	r1, #1
   14158:	mov	r3, r4
   1415c:	movt	r2, #1
   14160:	bl	10f74 <__fprintf_chk@plt>
   14164:	movw	r1, #21419	; 0x53ab
   14168:	mov	r0, #0
   1416c:	mov	r2, #5
   14170:	movt	r1, #1
   14174:	bl	10e30 <dcgettext@plt>
   14178:	movw	r2, #22137	; 0x5679
   1417c:	mov	r3, r0
   14180:	movw	r0, #2022	; 0x7e6
   14184:	mov	r1, #1
   14188:	str	r0, [sp]
   1418c:	movt	r2, #1
   14190:	mov	r0, r8
   14194:	bl	10f74 <__fprintf_chk@plt>
   14198:	movw	r4, #20686	; 0x50ce
   1419c:	mov	r1, r8
   141a0:	movt	r4, #1
   141a4:	mov	r0, r4
   141a8:	bl	10db8 <fputs_unlocked@plt>
   141ac:	movw	r1, #21423	; 0x53af
   141b0:	mov	r0, #0
   141b4:	mov	r2, #5
   141b8:	movt	r1, #1
   141bc:	bl	10e30 <dcgettext@plt>
   141c0:	movw	r3, #21594	; 0x545a
   141c4:	mov	r2, r0
   141c8:	mov	r0, r8
   141cc:	mov	r1, #1
   141d0:	movt	r3, #1
   141d4:	bl	10f74 <__fprintf_chk@plt>
   141d8:	mov	r0, r4
   141dc:	mov	r1, r8
   141e0:	bl	10db8 <fputs_unlocked@plt>
   141e4:	cmp	r6, #9
   141e8:	bhi	1424c <__assert_fail@plt+0x3254>
   141ec:	add	r0, pc, #0
   141f0:	ldr	pc, [r0, r6, lsl #2]
   141f4:	andeq	r4, r1, r4, lsr #8
   141f8:	andeq	r4, r1, ip, lsl r2
   141fc:	andeq	r4, r1, r8, asr r2
   14200:	andeq	r4, r1, r0, lsl #5
   14204:	andeq	r4, r1, r8, lsr #5
   14208:	ldrdeq	r4, [r1], -r0
   1420c:	strdeq	r4, [r1], -r8
   14210:	andeq	r4, r1, r0, lsr r3
   14214:	ldrdeq	r4, [r1], -r0
   14218:	andeq	r4, r1, r8, ror r3
   1421c:	movw	r1, #21628	; 0x547c
   14220:	mov	r0, #0
   14224:	mov	r2, #5
   14228:	movt	r1, #1
   1422c:	bl	10e30 <dcgettext@plt>
   14230:	ldr	r3, [r7]
   14234:	mov	r2, r0
   14238:	mov	r0, r8
   1423c:	mov	r1, #1
   14240:	sub	sp, fp, #24
   14244:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14248:	b	10f74 <__fprintf_chk@plt>
   1424c:	movw	r1, #21947	; 0x55bb
   14250:	movt	r1, #1
   14254:	b	14380 <__assert_fail@plt+0x3388>
   14258:	movw	r1, #21644	; 0x548c
   1425c:	mov	r0, #0
   14260:	mov	r2, #5
   14264:	movt	r1, #1
   14268:	bl	10e30 <dcgettext@plt>
   1426c:	mov	r2, r0
   14270:	ldr	r3, [r7]
   14274:	ldr	r0, [r7, #4]
   14278:	str	r0, [sp]
   1427c:	b	1436c <__assert_fail@plt+0x3374>
   14280:	movw	r1, #21667	; 0x54a3
   14284:	mov	r0, #0
   14288:	mov	r2, #5
   1428c:	movt	r1, #1
   14290:	bl	10e30 <dcgettext@plt>
   14294:	ldr	r3, [r7]
   14298:	mov	r2, r0
   1429c:	ldmib	r7, {r0, r1}
   142a0:	stm	sp, {r0, r1}
   142a4:	b	1436c <__assert_fail@plt+0x3374>
   142a8:	movw	r1, #21695	; 0x54bf
   142ac:	mov	r0, #0
   142b0:	mov	r2, #5
   142b4:	movt	r1, #1
   142b8:	bl	10e30 <dcgettext@plt>
   142bc:	ldr	r3, [r7]
   142c0:	mov	r2, r0
   142c4:	ldmib	r7, {r0, r1, r7}
   142c8:	stm	sp, {r0, r1, r7}
   142cc:	b	1436c <__assert_fail@plt+0x3374>
   142d0:	movw	r1, #21727	; 0x54df
   142d4:	mov	r0, #0
   142d8:	mov	r2, #5
   142dc:	movt	r1, #1
   142e0:	bl	10e30 <dcgettext@plt>
   142e4:	ldr	r3, [r7]
   142e8:	mov	r2, r0
   142ec:	ldmib	r7, {r0, r1, r6, r7}
   142f0:	stm	sp, {r0, r1, r6, r7}
   142f4:	b	1436c <__assert_fail@plt+0x3374>
   142f8:	movw	r1, #21763	; 0x5503
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	movt	r1, #1
   14308:	bl	10e30 <dcgettext@plt>
   1430c:	ldr	r3, [r7]
   14310:	mov	r2, r0
   14314:	ldmib	r7, {r0, r1, r6}
   14318:	ldr	r5, [r7, #16]
   1431c:	ldr	r7, [r7, #20]
   14320:	stm	sp, {r0, r1, r6}
   14324:	str	r5, [sp, #12]
   14328:	str	r7, [sp, #16]
   1432c:	b	1436c <__assert_fail@plt+0x3374>
   14330:	movw	r1, #21803	; 0x552b
   14334:	mov	r0, #0
   14338:	mov	r2, #5
   1433c:	movt	r1, #1
   14340:	bl	10e30 <dcgettext@plt>
   14344:	ldr	r3, [r7]
   14348:	mov	r2, r0
   1434c:	ldmib	r7, {r0, r1, r6}
   14350:	ldr	r5, [r7, #16]
   14354:	ldr	r4, [r7, #20]
   14358:	ldr	r7, [r7, #24]
   1435c:	stm	sp, {r0, r1, r6}
   14360:	str	r5, [sp, #12]
   14364:	str	r4, [sp, #16]
   14368:	str	r7, [sp, #20]
   1436c:	mov	r0, r8
   14370:	mov	r1, #1
   14374:	b	14420 <__assert_fail@plt+0x3428>
   14378:	movw	r1, #21895	; 0x5587
   1437c:	movt	r1, #1
   14380:	mov	r0, #0
   14384:	mov	r2, #5
   14388:	bl	10e30 <dcgettext@plt>
   1438c:	mov	ip, r0
   14390:	ldr	r3, [r7]
   14394:	ldr	r0, [r7, #4]
   14398:	ldr	r1, [r7, #8]
   1439c:	ldr	r6, [r7, #12]
   143a0:	ldr	r5, [r7, #16]
   143a4:	ldr	r4, [r7, #20]
   143a8:	ldr	r2, [r7, #24]
   143ac:	ldr	lr, [r7, #28]
   143b0:	ldr	r7, [r7, #32]
   143b4:	stm	sp, {r0, r1, r6}
   143b8:	str	r5, [sp, #12]
   143bc:	str	r4, [sp, #16]
   143c0:	str	r2, [sp, #20]
   143c4:	str	lr, [sp, #24]
   143c8:	str	r7, [sp, #28]
   143cc:	b	14414 <__assert_fail@plt+0x341c>
   143d0:	movw	r1, #21847	; 0x5557
   143d4:	mov	r0, #0
   143d8:	mov	r2, #5
   143dc:	movt	r1, #1
   143e0:	bl	10e30 <dcgettext@plt>
   143e4:	mov	ip, r0
   143e8:	ldr	r3, [r7]
   143ec:	ldmib	r7, {r0, r1, r6}
   143f0:	ldr	r5, [r7, #16]
   143f4:	ldr	r4, [r7, #20]
   143f8:	ldr	r2, [r7, #24]
   143fc:	ldr	r7, [r7, #28]
   14400:	stm	sp, {r0, r1, r6}
   14404:	str	r5, [sp, #12]
   14408:	str	r4, [sp, #16]
   1440c:	str	r2, [sp, #20]
   14410:	str	r7, [sp, #24]
   14414:	mov	r0, r8
   14418:	mov	r1, #1
   1441c:	mov	r2, ip
   14420:	bl	10f74 <__fprintf_chk@plt>
   14424:	sub	sp, fp, #24
   14428:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1442c:	push	{r4, sl, fp, lr}
   14430:	add	fp, sp, #8
   14434:	sub	sp, sp, #8
   14438:	ldr	ip, [fp, #8]
   1443c:	mov	lr, #0
   14440:	ldr	r4, [ip, lr, lsl #2]
   14444:	add	lr, lr, #1
   14448:	cmp	r4, #0
   1444c:	bne	14440 <__assert_fail@plt+0x3448>
   14450:	sub	r4, lr, #1
   14454:	str	ip, [sp]
   14458:	str	r4, [sp, #4]
   1445c:	bl	14100 <__assert_fail@plt+0x3108>
   14460:	sub	sp, fp, #8
   14464:	pop	{r4, sl, fp, pc}
   14468:	push	{r4, r5, fp, lr}
   1446c:	add	fp, sp, #8
   14470:	sub	sp, sp, #48	; 0x30
   14474:	ldr	r4, [fp, #8]
   14478:	mov	ip, #0
   1447c:	add	lr, sp, #8
   14480:	ldr	r5, [r4]
   14484:	cmp	r5, #0
   14488:	str	r5, [lr, ip, lsl #2]
   1448c:	beq	144a0 <__assert_fail@plt+0x34a8>
   14490:	add	ip, ip, #1
   14494:	add	r4, r4, #4
   14498:	cmp	ip, #10
   1449c:	bcc	14480 <__assert_fail@plt+0x3488>
   144a0:	str	lr, [sp]
   144a4:	str	ip, [sp, #4]
   144a8:	bl	14100 <__assert_fail@plt+0x3108>
   144ac:	sub	sp, fp, #8
   144b0:	pop	{r4, r5, fp, pc}
   144b4:	push	{fp, lr}
   144b8:	mov	fp, sp
   144bc:	sub	sp, sp, #8
   144c0:	add	ip, fp, #8
   144c4:	str	ip, [sp, #4]
   144c8:	str	ip, [sp]
   144cc:	bl	14468 <__assert_fail@plt+0x3470>
   144d0:	mov	sp, fp
   144d4:	pop	{fp, pc}
   144d8:	push	{fp, lr}
   144dc:	mov	fp, sp
   144e0:	movw	r0, #24900	; 0x6144
   144e4:	movt	r0, #2
   144e8:	ldr	r1, [r0]
   144ec:	movw	r0, #20686	; 0x50ce
   144f0:	movt	r0, #1
   144f4:	bl	10db8 <fputs_unlocked@plt>
   144f8:	movw	r1, #22007	; 0x55f7
   144fc:	mov	r0, #0
   14500:	mov	r2, #5
   14504:	movt	r1, #1
   14508:	bl	10e30 <dcgettext@plt>
   1450c:	movw	r2, #22027	; 0x560b
   14510:	mov	r1, r0
   14514:	mov	r0, #1
   14518:	movt	r2, #1
   1451c:	bl	10f5c <__printf_chk@plt>
   14520:	movw	r1, #22049	; 0x5621
   14524:	mov	r0, #0
   14528:	mov	r2, #5
   1452c:	movt	r1, #1
   14530:	bl	10e30 <dcgettext@plt>
   14534:	movw	r2, #20272	; 0x4f30
   14538:	movw	r3, #20491	; 0x500b
   1453c:	mov	r1, r0
   14540:	mov	r0, #1
   14544:	movt	r2, #1
   14548:	movt	r3, #1
   1454c:	bl	10f5c <__printf_chk@plt>
   14550:	movw	r1, #22069	; 0x5635
   14554:	mov	r0, #0
   14558:	mov	r2, #5
   1455c:	movt	r1, #1
   14560:	bl	10e30 <dcgettext@plt>
   14564:	movw	r2, #22108	; 0x565c
   14568:	mov	r1, r0
   1456c:	mov	r0, #1
   14570:	movt	r2, #1
   14574:	pop	{fp, lr}
   14578:	b	10f5c <__printf_chk@plt>
   1457c:	b	14580 <__assert_fail@plt+0x3588>
   14580:	push	{r4, r5, r6, sl, fp, lr}
   14584:	add	fp, sp, #16
   14588:	mov	r4, r2
   1458c:	mov	r5, r1
   14590:	mov	r6, r0
   14594:	bl	14c64 <__assert_fail@plt+0x3c6c>
   14598:	cmp	r0, #0
   1459c:	popne	{r4, r5, r6, sl, fp, pc}
   145a0:	cmp	r6, #0
   145a4:	beq	145b8 <__assert_fail@plt+0x35c0>
   145a8:	cmp	r5, #0
   145ac:	cmpne	r4, #0
   145b0:	bne	145b8 <__assert_fail@plt+0x35c0>
   145b4:	pop	{r4, r5, r6, sl, fp, pc}
   145b8:	bl	14a0c <__assert_fail@plt+0x3a14>
   145bc:	push	{fp, lr}
   145c0:	mov	fp, sp
   145c4:	bl	14aa4 <__assert_fail@plt+0x3aac>
   145c8:	cmp	r0, #0
   145cc:	popne	{fp, pc}
   145d0:	bl	14a0c <__assert_fail@plt+0x3a14>
   145d4:	push	{fp, lr}
   145d8:	mov	fp, sp
   145dc:	bl	14aa4 <__assert_fail@plt+0x3aac>
   145e0:	cmp	r0, #0
   145e4:	popne	{fp, pc}
   145e8:	bl	14a0c <__assert_fail@plt+0x3a14>
   145ec:	push	{fp, lr}
   145f0:	mov	fp, sp
   145f4:	bl	14aa4 <__assert_fail@plt+0x3aac>
   145f8:	cmp	r0, #0
   145fc:	popne	{fp, pc}
   14600:	bl	14a0c <__assert_fail@plt+0x3a14>
   14604:	push	{r4, r5, fp, lr}
   14608:	add	fp, sp, #8
   1460c:	mov	r4, r1
   14610:	mov	r5, r0
   14614:	bl	14ad4 <__assert_fail@plt+0x3adc>
   14618:	cmp	r0, #0
   1461c:	popne	{r4, r5, fp, pc}
   14620:	cmp	r5, #0
   14624:	beq	14634 <__assert_fail@plt+0x363c>
   14628:	cmp	r4, #0
   1462c:	bne	14634 <__assert_fail@plt+0x363c>
   14630:	pop	{r4, r5, fp, pc}
   14634:	bl	14a0c <__assert_fail@plt+0x3a14>
   14638:	push	{fp, lr}
   1463c:	mov	fp, sp
   14640:	cmp	r1, #0
   14644:	orreq	r1, r1, #1
   14648:	bl	14ad4 <__assert_fail@plt+0x3adc>
   1464c:	cmp	r0, #0
   14650:	popne	{fp, pc}
   14654:	bl	14a0c <__assert_fail@plt+0x3a14>
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	clz	r3, r2
   14664:	lsr	ip, r3, #5
   14668:	clz	r3, r1
   1466c:	lsr	r3, r3, #5
   14670:	orrs	r3, r3, ip
   14674:	movwne	r1, #1
   14678:	movwne	r2, #1
   1467c:	bl	14c64 <__assert_fail@plt+0x3c6c>
   14680:	cmp	r0, #0
   14684:	popne	{fp, pc}
   14688:	bl	14a0c <__assert_fail@plt+0x3a14>
   1468c:	push	{fp, lr}
   14690:	mov	fp, sp
   14694:	mov	r2, r1
   14698:	mov	r1, r0
   1469c:	mov	r0, #0
   146a0:	bl	14c64 <__assert_fail@plt+0x3c6c>
   146a4:	cmp	r0, #0
   146a8:	popne	{fp, pc}
   146ac:	bl	14a0c <__assert_fail@plt+0x3a14>
   146b0:	mov	r2, r1
   146b4:	mov	r1, r0
   146b8:	mov	r0, #0
   146bc:	b	14658 <__assert_fail@plt+0x3660>
   146c0:	mov	r2, #1
   146c4:	b	146c8 <__assert_fail@plt+0x36d0>
   146c8:	push	{r4, r5, fp, lr}
   146cc:	add	fp, sp, #8
   146d0:	ldr	r5, [r1]
   146d4:	mov	r4, r1
   146d8:	cmp	r0, #0
   146dc:	beq	146f4 <__assert_fail@plt+0x36fc>
   146e0:	mov	r1, #1
   146e4:	add	r1, r1, r5, lsr #1
   146e8:	adds	r5, r5, r1
   146ec:	bcc	1470c <__assert_fail@plt+0x3714>
   146f0:	bl	14a0c <__assert_fail@plt+0x3a14>
   146f4:	cmp	r5, #0
   146f8:	bne	1470c <__assert_fail@plt+0x3714>
   146fc:	mov	r1, #64	; 0x40
   14700:	cmp	r2, #64	; 0x40
   14704:	udiv	r5, r1, r2
   14708:	addhi	r5, r5, #1
   1470c:	mov	r1, r5
   14710:	bl	14580 <__assert_fail@plt+0x3588>
   14714:	str	r5, [r4]
   14718:	pop	{r4, r5, fp, pc}
   1471c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14720:	add	fp, sp, #24
   14724:	ldr	r6, [r1]
   14728:	mov	r8, r1
   1472c:	ldr	r4, [fp, #8]
   14730:	add	r1, r6, r6, asr #1
   14734:	cmp	r1, r6
   14738:	mvnvs	r1, #-2147483648	; 0x80000000
   1473c:	cmp	r1, r3
   14740:	mov	r5, r1
   14744:	movgt	r5, r3
   14748:	cmn	r3, #1
   1474c:	movle	r5, r1
   14750:	cmn	r4, #1
   14754:	ble	14774 <__assert_fail@plt+0x377c>
   14758:	cmp	r4, #0
   1475c:	beq	147c8 <__assert_fail@plt+0x37d0>
   14760:	cmn	r5, #1
   14764:	ble	1479c <__assert_fail@plt+0x37a4>
   14768:	mvn	r7, #-2147483648	; 0x80000000
   1476c:	udiv	r1, r7, r4
   14770:	b	14790 <__assert_fail@plt+0x3798>
   14774:	cmn	r5, #1
   14778:	ble	147b8 <__assert_fail@plt+0x37c0>
   1477c:	cmn	r4, #1
   14780:	beq	147c8 <__assert_fail@plt+0x37d0>
   14784:	mov	r1, #-2147483648	; 0x80000000
   14788:	mvn	r7, #-2147483648	; 0x80000000
   1478c:	sdiv	r1, r1, r4
   14790:	cmp	r1, r5
   14794:	bge	147c8 <__assert_fail@plt+0x37d0>
   14798:	b	147d8 <__assert_fail@plt+0x37e0>
   1479c:	beq	147c8 <__assert_fail@plt+0x37d0>
   147a0:	mov	r1, #-2147483648	; 0x80000000
   147a4:	mvn	r7, #-2147483648	; 0x80000000
   147a8:	sdiv	r1, r1, r5
   147ac:	cmp	r1, r4
   147b0:	bge	147c8 <__assert_fail@plt+0x37d0>
   147b4:	b	147d8 <__assert_fail@plt+0x37e0>
   147b8:	mvn	r7, #-2147483648	; 0x80000000
   147bc:	sdiv	r1, r7, r4
   147c0:	cmp	r5, r1
   147c4:	blt	147d8 <__assert_fail@plt+0x37e0>
   147c8:	mul	r1, r5, r4
   147cc:	mov	r7, #64	; 0x40
   147d0:	cmp	r1, #63	; 0x3f
   147d4:	bgt	147e0 <__assert_fail@plt+0x37e8>
   147d8:	sdiv	r5, r7, r4
   147dc:	mul	r1, r5, r4
   147e0:	cmp	r0, #0
   147e4:	moveq	r7, #0
   147e8:	streq	r7, [r8]
   147ec:	sub	r7, r5, r6
   147f0:	cmp	r7, r2
   147f4:	bge	14898 <__assert_fail@plt+0x38a0>
   147f8:	add	r5, r6, r2
   147fc:	mov	r2, #0
   14800:	mov	r1, #0
   14804:	cmp	r5, r3
   14808:	movwgt	r2, #1
   1480c:	cmn	r3, #1
   14810:	movwgt	r1, #1
   14814:	cmp	r5, r6
   14818:	bvs	14880 <__assert_fail@plt+0x3888>
   1481c:	ands	r1, r1, r2
   14820:	bne	14880 <__assert_fail@plt+0x3888>
   14824:	cmn	r4, #1
   14828:	ble	14848 <__assert_fail@plt+0x3850>
   1482c:	cmp	r4, #0
   14830:	beq	14894 <__assert_fail@plt+0x389c>
   14834:	cmn	r5, #1
   14838:	ble	1486c <__assert_fail@plt+0x3874>
   1483c:	mvn	r1, #-2147483648	; 0x80000000
   14840:	udiv	r1, r1, r4
   14844:	b	14860 <__assert_fail@plt+0x3868>
   14848:	cmn	r5, #1
   1484c:	ble	14884 <__assert_fail@plt+0x388c>
   14850:	cmn	r4, #1
   14854:	beq	14894 <__assert_fail@plt+0x389c>
   14858:	mov	r1, #-2147483648	; 0x80000000
   1485c:	sdiv	r1, r1, r4
   14860:	cmp	r1, r5
   14864:	bge	14894 <__assert_fail@plt+0x389c>
   14868:	b	14880 <__assert_fail@plt+0x3888>
   1486c:	beq	14894 <__assert_fail@plt+0x389c>
   14870:	mov	r1, #-2147483648	; 0x80000000
   14874:	sdiv	r1, r1, r5
   14878:	cmp	r1, r4
   1487c:	bge	14894 <__assert_fail@plt+0x389c>
   14880:	bl	14a0c <__assert_fail@plt+0x3a14>
   14884:	mvn	r1, #-2147483648	; 0x80000000
   14888:	sdiv	r1, r1, r4
   1488c:	cmp	r5, r1
   14890:	blt	14880 <__assert_fail@plt+0x3888>
   14894:	mul	r1, r5, r4
   14898:	bl	14604 <__assert_fail@plt+0x360c>
   1489c:	str	r5, [r8]
   148a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148a4:	push	{fp, lr}
   148a8:	mov	fp, sp
   148ac:	mov	r1, #1
   148b0:	bl	14a50 <__assert_fail@plt+0x3a58>
   148b4:	cmp	r0, #0
   148b8:	popne	{fp, pc}
   148bc:	bl	14a0c <__assert_fail@plt+0x3a14>
   148c0:	push	{fp, lr}
   148c4:	mov	fp, sp
   148c8:	bl	14a50 <__assert_fail@plt+0x3a58>
   148cc:	cmp	r0, #0
   148d0:	popne	{fp, pc}
   148d4:	bl	14a0c <__assert_fail@plt+0x3a14>
   148d8:	push	{fp, lr}
   148dc:	mov	fp, sp
   148e0:	mov	r1, #1
   148e4:	bl	14a50 <__assert_fail@plt+0x3a58>
   148e8:	cmp	r0, #0
   148ec:	popne	{fp, pc}
   148f0:	bl	14a0c <__assert_fail@plt+0x3a14>
   148f4:	push	{fp, lr}
   148f8:	mov	fp, sp
   148fc:	bl	14a50 <__assert_fail@plt+0x3a58>
   14900:	cmp	r0, #0
   14904:	popne	{fp, pc}
   14908:	bl	14a0c <__assert_fail@plt+0x3a14>
   1490c:	push	{r4, r5, r6, sl, fp, lr}
   14910:	add	fp, sp, #16
   14914:	mov	r5, r0
   14918:	mov	r0, r1
   1491c:	mov	r4, r1
   14920:	bl	14aa4 <__assert_fail@plt+0x3aac>
   14924:	cmp	r0, #0
   14928:	beq	14944 <__assert_fail@plt+0x394c>
   1492c:	mov	r1, r5
   14930:	mov	r2, r4
   14934:	mov	r6, r0
   14938:	bl	10e00 <memcpy@plt>
   1493c:	mov	r0, r6
   14940:	pop	{r4, r5, r6, sl, fp, pc}
   14944:	bl	14a0c <__assert_fail@plt+0x3a14>
   14948:	push	{r4, r5, r6, sl, fp, lr}
   1494c:	add	fp, sp, #16
   14950:	mov	r5, r0
   14954:	mov	r0, r1
   14958:	mov	r4, r1
   1495c:	bl	14aa4 <__assert_fail@plt+0x3aac>
   14960:	cmp	r0, #0
   14964:	beq	14980 <__assert_fail@plt+0x3988>
   14968:	mov	r1, r5
   1496c:	mov	r2, r4
   14970:	mov	r6, r0
   14974:	bl	10e00 <memcpy@plt>
   14978:	mov	r0, r6
   1497c:	pop	{r4, r5, r6, sl, fp, pc}
   14980:	bl	14a0c <__assert_fail@plt+0x3a14>
   14984:	push	{r4, r5, r6, sl, fp, lr}
   14988:	add	fp, sp, #16
   1498c:	mov	r5, r0
   14990:	add	r0, r1, #1
   14994:	mov	r4, r1
   14998:	bl	14aa4 <__assert_fail@plt+0x3aac>
   1499c:	cmp	r0, #0
   149a0:	beq	149c8 <__assert_fail@plt+0x39d0>
   149a4:	mov	r6, r0
   149a8:	mov	r0, #0
   149ac:	mov	r1, r5
   149b0:	mov	r2, r4
   149b4:	strb	r0, [r6, r4]
   149b8:	mov	r0, r6
   149bc:	bl	10e00 <memcpy@plt>
   149c0:	mov	r0, r6
   149c4:	pop	{r4, r5, r6, sl, fp, pc}
   149c8:	bl	14a0c <__assert_fail@plt+0x3a14>
   149cc:	push	{r4, r5, r6, sl, fp, lr}
   149d0:	add	fp, sp, #16
   149d4:	mov	r4, r0
   149d8:	bl	10f2c <strlen@plt>
   149dc:	add	r5, r0, #1
   149e0:	mov	r0, r5
   149e4:	bl	14aa4 <__assert_fail@plt+0x3aac>
   149e8:	cmp	r0, #0
   149ec:	beq	14a08 <__assert_fail@plt+0x3a10>
   149f0:	mov	r1, r4
   149f4:	mov	r2, r5
   149f8:	mov	r6, r0
   149fc:	bl	10e00 <memcpy@plt>
   14a00:	mov	r0, r6
   14a04:	pop	{r4, r5, r6, sl, fp, pc}
   14a08:	bl	14a0c <__assert_fail@plt+0x3a14>
   14a0c:	push	{fp, lr}
   14a10:	mov	fp, sp
   14a14:	movw	r0, #24804	; 0x60e4
   14a18:	movw	r1, #22184	; 0x56a8
   14a1c:	mov	r2, #5
   14a20:	movt	r0, #2
   14a24:	movt	r1, #1
   14a28:	ldr	r4, [r0]
   14a2c:	mov	r0, #0
   14a30:	bl	10e30 <dcgettext@plt>
   14a34:	movw	r2, #21071	; 0x524f
   14a38:	mov	r3, r0
   14a3c:	mov	r0, r4
   14a40:	mov	r1, #0
   14a44:	movt	r2, #1
   14a48:	bl	10ea8 <error@plt>
   14a4c:	bl	10fe0 <abort@plt>
   14a50:	clz	r2, r1
   14a54:	clz	r3, r0
   14a58:	lsr	r2, r2, #5
   14a5c:	lsr	r3, r3, #5
   14a60:	orrs	r2, r3, r2
   14a64:	movwne	r1, #1
   14a68:	movwne	r0, #1
   14a6c:	cmp	r1, #0
   14a70:	beq	14aa0 <__assert_fail@plt+0x3aa8>
   14a74:	mvn	r2, #-2147483648	; 0x80000000
   14a78:	udiv	r2, r2, r1
   14a7c:	cmp	r2, r0
   14a80:	bcs	14aa0 <__assert_fail@plt+0x3aa8>
   14a84:	push	{fp, lr}
   14a88:	mov	fp, sp
   14a8c:	bl	10f38 <__errno_location@plt>
   14a90:	mov	r1, #12
   14a94:	str	r1, [r0]
   14a98:	mov	r0, #0
   14a9c:	pop	{fp, pc}
   14aa0:	b	10dac <calloc@plt>
   14aa4:	cmp	r0, #0
   14aa8:	movweq	r0, #1
   14aac:	cmn	r0, #1
   14ab0:	ble	14ab8 <__assert_fail@plt+0x3ac0>
   14ab4:	b	10ecc <malloc@plt>
   14ab8:	push	{fp, lr}
   14abc:	mov	fp, sp
   14ac0:	bl	10f38 <__errno_location@plt>
   14ac4:	mov	r1, #12
   14ac8:	str	r1, [r0]
   14acc:	mov	r0, #0
   14ad0:	pop	{fp, pc}
   14ad4:	push	{fp, lr}
   14ad8:	mov	fp, sp
   14adc:	cmp	r0, #0
   14ae0:	beq	14afc <__assert_fail@plt+0x3b04>
   14ae4:	cmp	r1, #0
   14ae8:	beq	14b08 <__assert_fail@plt+0x3b10>
   14aec:	cmn	r1, #1
   14af0:	ble	14b10 <__assert_fail@plt+0x3b18>
   14af4:	pop	{fp, lr}
   14af8:	b	10e48 <realloc@plt>
   14afc:	mov	r0, r1
   14b00:	pop	{fp, lr}
   14b04:	b	14aa4 <__assert_fail@plt+0x3aac>
   14b08:	bl	14ba4 <__assert_fail@plt+0x3bac>
   14b0c:	b	14b1c <__assert_fail@plt+0x3b24>
   14b10:	bl	10f38 <__errno_location@plt>
   14b14:	mov	r1, #12
   14b18:	str	r1, [r0]
   14b1c:	mov	r0, #0
   14b20:	pop	{fp, pc}
   14b24:	push	{r4, r5, r6, sl, fp, lr}
   14b28:	add	fp, sp, #16
   14b2c:	mov	r4, r0
   14b30:	bl	10e84 <__fpending@plt>
   14b34:	mov	r5, r0
   14b38:	mov	r0, r4
   14b3c:	bl	10e90 <ferror_unlocked@plt>
   14b40:	mov	r6, r0
   14b44:	mov	r0, r4
   14b48:	bl	11e70 <__assert_fail@plt+0xe78>
   14b4c:	cmp	r6, #0
   14b50:	beq	14b70 <__assert_fail@plt+0x3b78>
   14b54:	mvn	r4, #0
   14b58:	cmp	r0, #0
   14b5c:	bne	14b9c <__assert_fail@plt+0x3ba4>
   14b60:	bl	10f38 <__errno_location@plt>
   14b64:	mov	r1, #0
   14b68:	str	r1, [r0]
   14b6c:	b	14b9c <__assert_fail@plt+0x3ba4>
   14b70:	cmp	r0, #0
   14b74:	mov	r4, r0
   14b78:	mvnne	r4, #0
   14b7c:	cmp	r5, #0
   14b80:	bne	14b9c <__assert_fail@plt+0x3ba4>
   14b84:	cmp	r0, #0
   14b88:	beq	14b9c <__assert_fail@plt+0x3ba4>
   14b8c:	bl	10f38 <__errno_location@plt>
   14b90:	ldr	r0, [r0]
   14b94:	subs	r4, r0, #9
   14b98:	mvnne	r4, #0
   14b9c:	mov	r0, r4
   14ba0:	pop	{r4, r5, r6, sl, fp, pc}
   14ba4:	push	{r4, r5, r6, sl, fp, lr}
   14ba8:	add	fp, sp, #16
   14bac:	mov	r4, r0
   14bb0:	bl	10f38 <__errno_location@plt>
   14bb4:	ldr	r6, [r0]
   14bb8:	mov	r5, r0
   14bbc:	mov	r0, r4
   14bc0:	bl	10de8 <free@plt>
   14bc4:	str	r6, [r5]
   14bc8:	pop	{r4, r5, r6, sl, fp, pc}
   14bcc:	push	{fp, lr}
   14bd0:	mov	fp, sp
   14bd4:	mov	r0, #14
   14bd8:	bl	10fb0 <nl_langinfo@plt>
   14bdc:	movw	r1, #20687	; 0x50cf
   14be0:	cmp	r0, #0
   14be4:	movt	r1, #1
   14be8:	movne	r1, r0
   14bec:	movw	r0, #22201	; 0x56b9
   14bf0:	ldrb	r2, [r1]
   14bf4:	movt	r0, #1
   14bf8:	cmp	r2, #0
   14bfc:	movne	r0, r1
   14c00:	pop	{fp, pc}
   14c04:	push	{r4, r5, r6, r7, fp, lr}
   14c08:	add	fp, sp, #16
   14c0c:	sub	sp, sp, #8
   14c10:	add	r5, sp, #4
   14c14:	cmp	r0, #0
   14c18:	mov	r7, r2
   14c1c:	mov	r4, r1
   14c20:	movne	r5, r0
   14c24:	mov	r0, r5
   14c28:	bl	10e9c <mbrtowc@plt>
   14c2c:	mov	r6, r0
   14c30:	cmp	r7, #0
   14c34:	beq	14c58 <__assert_fail@plt+0x3c60>
   14c38:	cmn	r6, #2
   14c3c:	bcc	14c58 <__assert_fail@plt+0x3c60>
   14c40:	mov	r0, #0
   14c44:	bl	14ca0 <__assert_fail@plt+0x3ca8>
   14c48:	cmp	r0, #0
   14c4c:	ldrbeq	r0, [r4]
   14c50:	moveq	r6, #1
   14c54:	streq	r0, [r5]
   14c58:	mov	r0, r6
   14c5c:	sub	sp, fp, #16
   14c60:	pop	{r4, r5, r6, r7, fp, pc}
   14c64:	cmp	r2, #0
   14c68:	beq	14c98 <__assert_fail@plt+0x3ca0>
   14c6c:	mvn	r3, #0
   14c70:	udiv	r3, r3, r2
   14c74:	cmp	r3, r1
   14c78:	bcs	14c98 <__assert_fail@plt+0x3ca0>
   14c7c:	push	{fp, lr}
   14c80:	mov	fp, sp
   14c84:	bl	10f38 <__errno_location@plt>
   14c88:	mov	r1, #12
   14c8c:	str	r1, [r0]
   14c90:	mov	r0, #0
   14c94:	pop	{fp, pc}
   14c98:	mul	r1, r2, r1
   14c9c:	b	14ad4 <__assert_fail@plt+0x3adc>
   14ca0:	push	{r4, sl, fp, lr}
   14ca4:	add	fp, sp, #8
   14ca8:	sub	sp, sp, #264	; 0x108
   14cac:	add	r1, sp, #7
   14cb0:	movw	r2, #257	; 0x101
   14cb4:	bl	14d04 <__assert_fail@plt+0x3d0c>
   14cb8:	mov	r4, #0
   14cbc:	cmp	r0, #0
   14cc0:	bne	14cf8 <__assert_fail@plt+0x3d00>
   14cc4:	movw	r1, #22207	; 0x56bf
   14cc8:	add	r0, sp, #7
   14ccc:	movt	r1, #1
   14cd0:	bl	10dc4 <strcmp@plt>
   14cd4:	cmp	r0, #0
   14cd8:	beq	14cf8 <__assert_fail@plt+0x3d00>
   14cdc:	movw	r1, #22209	; 0x56c1
   14ce0:	add	r0, sp, #7
   14ce4:	movt	r1, #1
   14ce8:	bl	10dc4 <strcmp@plt>
   14cec:	mov	r4, r0
   14cf0:	cmp	r0, #0
   14cf4:	movwne	r4, #1
   14cf8:	mov	r0, r4
   14cfc:	sub	sp, fp, #8
   14d00:	pop	{r4, sl, fp, pc}
   14d04:	push	{r4, r5, r6, r7, fp, lr}
   14d08:	add	fp, sp, #16
   14d0c:	mov	r4, r1
   14d10:	mov	r1, #0
   14d14:	mov	r6, r2
   14d18:	bl	10f98 <setlocale@plt>
   14d1c:	cmp	r0, #0
   14d20:	beq	14d4c <__assert_fail@plt+0x3d54>
   14d24:	mov	r7, r0
   14d28:	bl	10f2c <strlen@plt>
   14d2c:	cmp	r0, r6
   14d30:	bcs	14d60 <__assert_fail@plt+0x3d68>
   14d34:	add	r2, r0, #1
   14d38:	mov	r0, r4
   14d3c:	mov	r1, r7
   14d40:	bl	10e00 <memcpy@plt>
   14d44:	mov	r5, #0
   14d48:	b	14d88 <__assert_fail@plt+0x3d90>
   14d4c:	cmp	r6, #0
   14d50:	mov	r5, #22
   14d54:	movne	r0, #0
   14d58:	strbne	r0, [r4]
   14d5c:	b	14d88 <__assert_fail@plt+0x3d90>
   14d60:	mov	r5, #34	; 0x22
   14d64:	cmp	r6, #0
   14d68:	beq	14d88 <__assert_fail@plt+0x3d90>
   14d6c:	sub	r6, r6, #1
   14d70:	mov	r0, r4
   14d74:	mov	r1, r7
   14d78:	mov	r2, r6
   14d7c:	bl	10e00 <memcpy@plt>
   14d80:	mov	r0, #0
   14d84:	strb	r0, [r4, r6]
   14d88:	mov	r0, r5
   14d8c:	pop	{r4, r5, r6, r7, fp, pc}
   14d90:	mov	r1, #0
   14d94:	b	10f98 <setlocale@plt>
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d9c:	mov	r7, r0
   14da0:	ldr	r6, [pc, #72]	; 14df0 <__assert_fail@plt+0x3df8>
   14da4:	ldr	r5, [pc, #72]	; 14df4 <__assert_fail@plt+0x3dfc>
   14da8:	add	r6, pc, r6
   14dac:	add	r5, pc, r5
   14db0:	sub	r6, r6, r5
   14db4:	mov	r8, r1
   14db8:	mov	r9, r2
   14dbc:	bl	10d8c <calloc@plt-0x20>
   14dc0:	asrs	r6, r6, #2
   14dc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14dc8:	mov	r4, #0
   14dcc:	add	r4, r4, #1
   14dd0:	ldr	r3, [r5], #4
   14dd4:	mov	r2, r9
   14dd8:	mov	r1, r8
   14ddc:	mov	r0, r7
   14de0:	blx	r3
   14de4:	cmp	r6, r4
   14de8:	bne	14dcc <__assert_fail@plt+0x3dd4>
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14df0:	andeq	r1, r1, ip, asr r1
   14df4:	andeq	r1, r1, r4, asr r1
   14df8:	bx	lr
   14dfc:	ldr	r3, [pc, #12]	; 14e10 <__assert_fail@plt+0x3e18>
   14e00:	mov	r1, #0
   14e04:	add	r3, pc, r3
   14e08:	ldr	r2, [r3]
   14e0c:	b	10f44 <__cxa_atexit@plt>
   14e10:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

00014e14 <.fini>:
   14e14:	push	{r3, lr}
   14e18:	pop	{r3, pc}
