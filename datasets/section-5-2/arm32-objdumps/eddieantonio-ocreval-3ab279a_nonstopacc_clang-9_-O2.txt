
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b34 <.init>:
   10b34:	push	{r3, lr}
   10b38:	bl	10d5c <__assert_fail@plt+0x4c>
   10b3c:	pop	{r3, pc}

Disassembly of section .plt:

00010b40 <calloc@plt-0x14>:
   10b40:	push	{lr}		; (str lr, [sp, #-4]!)
   10b44:	ldr	lr, [pc, #4]	; 10b50 <calloc@plt-0x4>
   10b48:	add	lr, pc, lr
   10b4c:	ldr	pc, [lr, #8]!
   10b50:			; <UNDEFINED> instruction: 0x000174b0

00010b54 <calloc@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b60 <strcmp@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b6c <strtol@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b78 <printf@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1176]!	; 0x498

00010b84 <fopen@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1168]!	; 0x490

00010b90 <free@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1160]!	; 0x488

00010b9c <utf8proc_get_property@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1152]!	; 0x480

00010ba8 <fgets@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1144]!	; 0x478

00010bb4 <utf8proc_encode_char@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1136]!	; 0x470

00010bc0 <strdup@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1128]!	; 0x468

00010bcc <rewind@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1120]!	; 0x460

00010bd8 <unlink@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1112]!	; 0x458

00010be4 <utf8proc_tolower@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1104]!	; 0x450

00010bf0 <__xstat@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1096]!	; 0x448

00010bfc <fwrite@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1088]!	; 0x440

00010c08 <fread@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1080]!	; 0x438

00010c14 <utf8proc_iterate@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1072]!	; 0x430

00010c20 <malloc@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1064]!	; 0x428

00010c2c <__libc_start_main@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1056]!	; 0x420

00010c38 <__sysv_signal@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1048]!	; 0x418

00010c44 <__gmon_start__@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1040]!	; 0x410

00010c50 <getpid@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1032]!	; 0x408

00010c5c <exit@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1024]!	; 0x400

00010c68 <bcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c74 <utf8proc_category@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c80 <strlen@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c8c <fprintf@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #992]!	; 0x3e0

00010c98 <__isoc99_sscanf@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #984]!	; 0x3d8

00010ca4 <fclose@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #976]!	; 0x3d0

00010cb0 <utf8proc_NFC@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #968]!	; 0x3c8

00010cbc <fputc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc8 <sprintf@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #952]!	; 0x3b8

00010cd4 <utf8proc_errmsg@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #944]!	; 0x3b0

00010ce0 <fputs@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #936]!	; 0x3a8

00010cec <strncmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf8 <abort@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #920]!	; 0x398

00010d04 <getc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #912]!	; 0x390

00010d10 <__assert_fail@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #904]!	; 0x388

Disassembly of section .text:

00010d20 <error@@Base-0xb8c>:
   10d20:	mov	fp, #0
   10d24:	mov	lr, #0
   10d28:	pop	{r1}		; (ldr r1, [sp], #4)
   10d2c:	mov	r2, sp
   10d30:	push	{r2}		; (str r2, [sp, #-4]!)
   10d34:	push	{r0}		; (str r0, [sp, #-4]!)
   10d38:	ldr	ip, [pc, #16]	; 10d50 <__assert_fail@plt+0x40>
   10d3c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d40:	ldr	r0, [pc, #12]	; 10d54 <__assert_fail@plt+0x44>
   10d44:	ldr	r3, [pc, #12]	; 10d58 <__assert_fail@plt+0x48>
   10d48:	bl	10c2c <__libc_start_main@plt>
   10d4c:	bl	10cf8 <abort@plt>
   10d50:	andeq	r3, r1, r8, lsl #22
   10d54:	andeq	r1, r1, ip, lsl #1
   10d58:	andeq	r3, r1, r8, lsr #21
   10d5c:	ldr	r3, [pc, #20]	; 10d78 <__assert_fail@plt+0x68>
   10d60:	ldr	r2, [pc, #20]	; 10d7c <__assert_fail@plt+0x6c>
   10d64:	add	r3, pc, r3
   10d68:	ldr	r2, [r3, r2]
   10d6c:	cmp	r2, #0
   10d70:	bxeq	lr
   10d74:	b	10c44 <__gmon_start__@plt>
   10d78:	muleq	r1, r4, r2
   10d7c:	andeq	r0, r0, r0, asr #1
   10d80:	ldr	r0, [pc, #24]	; 10da0 <__assert_fail@plt+0x90>
   10d84:	ldr	r3, [pc, #24]	; 10da4 <__assert_fail@plt+0x94>
   10d88:	cmp	r3, r0
   10d8c:	bxeq	lr
   10d90:	ldr	r3, [pc, #16]	; 10da8 <__assert_fail@plt+0x98>
   10d94:	cmp	r3, #0
   10d98:	bxeq	lr
   10d9c:	bx	r3
   10da0:	andeq	r8, r2, r0, lsl #2
   10da4:	andeq	r8, r2, r0, lsl #2
   10da8:	andeq	r0, r0, r0
   10dac:	ldr	r0, [pc, #36]	; 10dd8 <__assert_fail@plt+0xc8>
   10db0:	ldr	r1, [pc, #36]	; 10ddc <__assert_fail@plt+0xcc>
   10db4:	sub	r1, r1, r0
   10db8:	asr	r1, r1, #2
   10dbc:	add	r1, r1, r1, lsr #31
   10dc0:	asrs	r1, r1, #1
   10dc4:	bxeq	lr
   10dc8:	ldr	r3, [pc, #16]	; 10de0 <__assert_fail@plt+0xd0>
   10dcc:	cmp	r3, #0
   10dd0:	bxeq	lr
   10dd4:	bx	r3
   10dd8:	andeq	r8, r2, r0, lsl #2
   10ddc:	andeq	r8, r2, r0, lsl #2
   10de0:	andeq	r0, r0, r0
   10de4:	push	{r4, lr}
   10de8:	ldr	r4, [pc, #24]	; 10e08 <__assert_fail@plt+0xf8>
   10dec:	ldrb	r3, [r4]
   10df0:	cmp	r3, #0
   10df4:	popne	{r4, pc}
   10df8:	bl	10d80 <__assert_fail@plt+0x70>
   10dfc:	mov	r3, #1
   10e00:	strb	r3, [r4]
   10e04:	pop	{r4, pc}
   10e08:	andeq	r8, r2, r0, lsl #2
   10e0c:	b	10dac <__assert_fail@plt+0x9c>
   10e10:	push	{fp, lr}
   10e14:	mov	fp, sp
   10e18:	bl	11164 <__assert_fail@plt+0x454>
   10e1c:	cmp	r0, #0
   10e20:	popeq	{fp, pc}
   10e24:	ldr	r1, [r0, #12]
   10e28:	ldr	r0, [r0, #16]
   10e2c:	ldr	r2, [pc, #36]	; 10e58 <__assert_fail@plt+0x148>
   10e30:	ldr	r2, [pc, r2]
   10e34:	ldr	r3, [r2]
   10e38:	sub	r1, r3, r1
   10e3c:	str	r1, [r2]
   10e40:	ldr	r1, [pc, #20]	; 10e5c <__assert_fail@plt+0x14c>
   10e44:	ldr	r1, [pc, r1]
   10e48:	ldr	r2, [r1]
   10e4c:	sub	r0, r2, r0
   10e50:	str	r0, [r1]
   10e54:	pop	{fp, pc}
   10e58:	andeq	r7, r1, ip, ror #4
   10e5c:	muleq	r1, r0, r2
   10e60:	ldr	r0, [pc, #96]	; 10ec8 <__assert_fail@plt+0x1b8>
   10e64:	vldr	d16, [pc, #84]	; 10ec0 <__assert_fail@plt+0x1b0>
   10e68:	ldr	r0, [pc, r0]
   10e6c:	ldr	r0, [r0]
   10e70:	ldr	r1, [pc, #84]	; 10ecc <__assert_fail@plt+0x1bc>
   10e74:	ldr	r1, [pc, r1]
   10e78:	ldr	r2, [r1]
   10e7c:	ldr	r1, [pc, #76]	; 10ed0 <__assert_fail@plt+0x1c0>
   10e80:	sub	r0, r2, r0
   10e84:	ldr	r1, [pc, r1]
   10e88:	vmov	s2, r2
   10e8c:	vmov	s0, r0
   10e90:	add	r0, r1, #1
   10e94:	vcvt.f64.s32	d17, s0
   10e98:	vcvt.f64.s32	d18, s2
   10e9c:	ldr	r2, [pc, #48]	; 10ed4 <__assert_fail@plt+0x1c4>
   10ea0:	add	r2, pc, r2
   10ea4:	vmul.f64	d16, d17, d16
   10ea8:	str	r0, [r2]
   10eac:	ldr	r0, [pc, #36]	; 10ed8 <__assert_fail@plt+0x1c8>
   10eb0:	vdiv.f64	d16, d16, d18
   10eb4:	add	r0, pc, r0
   10eb8:	vmov	r2, r3, d16
   10ebc:	b	10b78 <printf@plt>
   10ec0:	andeq	r0, r0, r0
   10ec4:	subsmi	r0, r9, r0
   10ec8:	andeq	r7, r1, ip, ror #4
   10ecc:	andeq	r7, r1, r8, lsr #4
   10ed0:	andeq	r7, r1, r8, ror r2
   10ed4:	andeq	r7, r1, ip, asr r2
   10ed8:	andeq	r2, r0, ip, asr ip
   10edc:	nop	{0}
   10ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ee4:	add	fp, sp, #28
   10ee8:	sub	sp, sp, #4
   10eec:	vpush	{d8}
   10ef0:	ldr	r5, [pc, #368]	; 11068 <__assert_fail@plt+0x358>
   10ef4:	ldr	r5, [pc, r5]
   10ef8:	ldm	r5, {r0, r1}
   10efc:	ldr	r7, [pc, #360]	; 1106c <__assert_fail@plt+0x35c>
   10f00:	cmp	r0, #0
   10f04:	ldr	r7, [pc, r7]
   10f08:	str	r0, [r7]
   10f0c:	ldr	r6, [pc, #348]	; 11070 <__assert_fail@plt+0x360>
   10f10:	ldr	r6, [pc, r6]
   10f14:	str	r1, [r6]
   10f18:	beq	11054 <__assert_fail@plt+0x344>
   10f1c:	sub	r2, r0, r1
   10f20:	ldr	r1, [pc, #332]	; 11074 <__assert_fail@plt+0x364>
   10f24:	vldr	d8, [pc, #308]	; 11060 <__assert_fail@plt+0x350>
   10f28:	vmov	s2, r0
   10f2c:	vmov	s0, r2
   10f30:	ldr	r1, [pc, r1]
   10f34:	vcvt.f64.s32	d16, s0
   10f38:	vcvt.f64.s32	d17, s2
   10f3c:	ldr	r9, [pc, #308]	; 11078 <__assert_fail@plt+0x368>
   10f40:	add	r0, r1, #1
   10f44:	add	r9, pc, r9
   10f48:	vmul.f64	d16, d16, d8
   10f4c:	str	r0, [r9]
   10f50:	ldr	r0, [pc, #292]	; 1107c <__assert_fail@plt+0x36c>
   10f54:	vdiv.f64	d16, d16, d17
   10f58:	add	r0, pc, r0
   10f5c:	vmov	r2, r3, d16
   10f60:	bl	10b78 <printf@plt>
   10f64:	ldr	r0, [pc, #276]	; 11080 <__assert_fail@plt+0x370>
   10f68:	ldr	r0, [pc, r0]
   10f6c:	ldr	r4, [r0]
   10f70:	cmp	r4, #0
   10f74:	beq	11054 <__assert_fail@plt+0x344>
   10f78:	ldr	r8, [pc, #260]	; 11084 <__assert_fail@plt+0x374>
   10f7c:	movw	r0, #9048	; 0x2358
   10f80:	add	sl, r5, #992	; 0x3e0
   10f84:	add	r5, r5, r0
   10f88:	add	r8, pc, r8
   10f8c:	ldr	r1, [r4, #8]
   10f90:	mov	r0, sl
   10f94:	bl	11164 <__assert_fail@plt+0x454>
   10f98:	cmp	r0, #0
   10f9c:	beq	10fc0 <__assert_fail@plt+0x2b0>
   10fa0:	ldr	r1, [r0, #12]
   10fa4:	ldr	r2, [r7]
   10fa8:	ldr	r0, [r0, #16]
   10fac:	sub	r1, r2, r1
   10fb0:	str	r1, [r7]
   10fb4:	ldr	r1, [r6]
   10fb8:	sub	r0, r1, r0
   10fbc:	str	r0, [r6]
   10fc0:	ldr	r1, [r4, #8]
   10fc4:	mov	r0, r5
   10fc8:	bl	11164 <__assert_fail@plt+0x454>
   10fcc:	cmp	r0, #0
   10fd0:	beq	11000 <__assert_fail@plt+0x2f0>
   10fd4:	ldr	r1, [r0, #12]
   10fd8:	ldr	r2, [r0, #16]
   10fdc:	ldr	r0, [r7]
   10fe0:	sub	r0, r0, r1
   10fe4:	ldr	r1, [r6]
   10fe8:	str	r0, [r7]
   10fec:	sub	r1, r1, r2
   10ff0:	str	r1, [r6]
   10ff4:	cmp	r0, #0
   10ff8:	bne	1100c <__assert_fail@plt+0x2fc>
   10ffc:	b	11054 <__assert_fail@plt+0x344>
   11000:	ldr	r0, [r7]
   11004:	cmp	r0, #0
   11008:	beq	11054 <__assert_fail@plt+0x344>
   1100c:	ldr	r1, [r6]
   11010:	vmov	s2, r0
   11014:	sub	r2, r0, r1
   11018:	ldr	r1, [pc, #104]	; 11088 <__assert_fail@plt+0x378>
   1101c:	vmov	s0, r2
   11020:	ldr	r1, [pc, r1]
   11024:	vcvt.f64.s32	d16, s0
   11028:	vcvt.f64.s32	d17, s2
   1102c:	add	r0, r1, #1
   11030:	str	r0, [r9]
   11034:	mov	r0, r8
   11038:	vmul.f64	d16, d16, d8
   1103c:	vdiv.f64	d16, d16, d17
   11040:	vmov	r2, r3, d16
   11044:	bl	10b78 <printf@plt>
   11048:	ldr	r4, [r4, #4]
   1104c:	cmp	r4, #0
   11050:	bne	10f8c <__assert_fail@plt+0x27c>
   11054:	vpop	{d8}
   11058:	add	sp, sp, #4
   1105c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11060:	andeq	r0, r0, r0
   11064:	subsmi	r0, r9, r0
   11068:	andeq	r7, r1, ip, asr #3
   1106c:	muleq	r1, r8, r1
   11070:	andeq	r7, r1, r4, asr #3
   11074:	andeq	r7, r1, ip, asr #3
   11078:			; <UNDEFINED> instruction: 0x000171b8
   1107c:			; <UNDEFINED> instruction: 0x00002bb8
   11080:	andeq	r7, r1, r8, asr #2
   11084:	andeq	r2, r0, r8, lsl #23
   11088:	ldrdeq	r7, [r1], -ip
   1108c:	push	{fp, lr}
   11090:	mov	fp, sp
   11094:	sub	sp, sp, #8
   11098:	str	r0, [sp, #4]
   1109c:	add	r0, sp, #4
   110a0:	mov	r3, #0
   110a4:	mov	r4, r1
   110a8:	ldr	r2, [pc, #96]	; 11110 <__assert_fail@plt+0x400>
   110ac:	add	r2, pc, r2
   110b0:	bl	11624 <__assert_fail@plt+0x914>
   110b4:	ldr	r0, [sp, #4]
   110b8:	cmp	r0, #2
   110bc:	bne	11104 <__assert_fail@plt+0x3f4>
   110c0:	ldr	r1, [r4]
   110c4:	ldr	r5, [pc, #76]	; 11118 <__assert_fail@plt+0x408>
   110c8:	ldr	r5, [pc, r5]
   110cc:	ldr	r2, [pc, #72]	; 1111c <__assert_fail@plt+0x40c>
   110d0:	ldr	r2, [pc, r2]
   110d4:	mov	r0, r5
   110d8:	bl	12ffc <error@@Base+0x1750>
   110dc:	ldr	r0, [pc, #60]	; 11120 <__assert_fail@plt+0x410>
   110e0:	mov	r1, r5
   110e4:	ldr	r0, [pc, r0]
   110e8:	bl	127a8 <error@@Base+0xefc>
   110ec:	ldr	r1, [r4, #4]
   110f0:	ldr	r0, [pc, #44]	; 11124 <__assert_fail@plt+0x414>
   110f4:	ldr	r0, [pc, r0]
   110f8:	bl	11b58 <error@@Base+0x2ac>
   110fc:	bl	10ee0 <__assert_fail@plt+0x1d0>
   11100:	bl	11868 <__assert_fail@plt+0xb58>
   11104:	ldr	r0, [pc, #8]	; 11114 <__assert_fail@plt+0x404>
   11108:	add	r0, pc, r0
   1110c:	bl	118ac <error@@Base>
   11110:	andeq	r2, r0, r0, ror sl
   11114:	andeq	r2, r0, r8, lsr sl
   11118:	ldrdeq	r6, [r1], -r8
   1111c:	ldrdeq	r6, [r1], -ip
   11120:	andeq	r6, r1, ip, asr #31
   11124:	andeq	r6, r1, ip, asr #31
   11128:	push	{r4, r5, r6, sl, fp, lr}
   1112c:	add	fp, sp, #16
   11130:	mov	r4, r0
   11134:	movw	r0, #8048	; 0x1f70
   11138:	movw	r6, #503	; 0x1f7
   1113c:	add	r5, r4, r0
   11140:	mov	r0, r4
   11144:	bl	13664 <error@@Base+0x1db8>
   11148:	subs	r6, r6, #1
   1114c:	add	r4, r4, #16
   11150:	bne	11140 <__assert_fail@plt+0x430>
   11154:	mov	r0, #0
   11158:	str	r0, [r5]
   1115c:	str	r0, [r5, #4]
   11160:	pop	{r4, r5, r6, sl, fp, pc}
   11164:	push	{r4, r5, r6, sl, fp, lr}
   11168:	add	fp, sp, #16
   1116c:	mov	r5, r1
   11170:	ldrb	r1, [r1]
   11174:	mov	r4, #0
   11178:	mov	r2, #0
   1117c:	cmp	r1, #0
   11180:	beq	111b4 <__assert_fail@plt+0x4a4>
   11184:	add	r3, r5, #1
   11188:	mov	r2, #0
   1118c:	uxtab	r2, r2, r1
   11190:	ldrb	r1, [r3], #1
   11194:	cmp	r1, #0
   11198:	bne	1118c <__assert_fail@plt+0x47c>
   1119c:	movw	r1, #20065	; 0x4e61
   111a0:	movt	r1, #33354	; 0x824a
   111a4:	umull	r1, r3, r2, r1
   111a8:	lsr	r1, r3, #8
   111ac:	movw	r3, #503	; 0x1f7
   111b0:	mls	r2, r1, r3, r2
   111b4:	ldr	r6, [r0, r2, lsl #4]
   111b8:	cmp	r6, #0
   111bc:	beq	111e0 <__assert_fail@plt+0x4d0>
   111c0:	ldr	r1, [r6, #8]
   111c4:	mov	r0, r5
   111c8:	bl	10b60 <strcmp@plt>
   111cc:	cmp	r0, #0
   111d0:	beq	111e8 <__assert_fail@plt+0x4d8>
   111d4:	ldr	r6, [r6, #4]
   111d8:	cmp	r6, #0
   111dc:	bne	111c0 <__assert_fail@plt+0x4b0>
   111e0:	mov	r0, r4
   111e4:	pop	{r4, r5, r6, sl, fp, pc}
   111e8:	mov	r4, r6
   111ec:	mov	r0, r4
   111f0:	pop	{r4, r5, r6, sl, fp, pc}
   111f4:	push	{r4, r5, fp, lr}
   111f8:	add	fp, sp, #8
   111fc:	movw	r2, #8048	; 0x1f70
   11200:	add	r5, r0, r2
   11204:	ldr	r2, [r1, #8]
   11208:	ldrb	r3, [r2]
   1120c:	cmp	r3, #0
   11210:	beq	11248 <__assert_fail@plt+0x538>
   11214:	add	r4, r2, #1
   11218:	mov	r2, #0
   1121c:	uxtab	r2, r2, r3
   11220:	ldrb	r3, [r4], #1
   11224:	cmp	r3, #0
   11228:	bne	1121c <__assert_fail@plt+0x50c>
   1122c:	movw	r3, #20065	; 0x4e61
   11230:	movt	r3, #33354	; 0x824a
   11234:	umull	r3, r4, r2, r3
   11238:	lsr	r3, r4, #8
   1123c:	movw	r4, #503	; 0x1f7
   11240:	mls	r2, r3, r4, r2
   11244:	b	1124c <__assert_fail@plt+0x53c>
   11248:	mov	r2, #0
   1124c:	add	r0, r0, r2, lsl #4
   11250:	bl	13670 <error@@Base+0x1dc4>
   11254:	ldr	r0, [r5]
   11258:	cmp	r0, #0
   1125c:	beq	1126c <__assert_fail@plt+0x55c>
   11260:	bl	10b90 <free@plt>
   11264:	mov	r0, #0
   11268:	str	r0, [r5]
   1126c:	ldr	r0, [r5, #4]
   11270:	add	r0, r0, #1
   11274:	str	r0, [r5, #4]
   11278:	pop	{r4, r5, fp, pc}
   1127c:	push	{r4, r5, fp, lr}
   11280:	add	fp, sp, #8
   11284:	movw	r2, #8048	; 0x1f70
   11288:	add	r5, r0, r2
   1128c:	ldr	r2, [r1, #8]
   11290:	ldrb	r3, [r2]
   11294:	cmp	r3, #0
   11298:	beq	112d0 <__assert_fail@plt+0x5c0>
   1129c:	add	r4, r2, #1
   112a0:	mov	r2, #0
   112a4:	uxtab	r2, r2, r3
   112a8:	ldrb	r3, [r4], #1
   112ac:	cmp	r3, #0
   112b0:	bne	112a4 <__assert_fail@plt+0x594>
   112b4:	movw	r3, #20065	; 0x4e61
   112b8:	movt	r3, #33354	; 0x824a
   112bc:	umull	r3, r4, r2, r3
   112c0:	lsr	r3, r4, #8
   112c4:	movw	r4, #503	; 0x1f7
   112c8:	mls	r2, r3, r4, r2
   112cc:	b	112d4 <__assert_fail@plt+0x5c4>
   112d0:	mov	r2, #0
   112d4:	add	r0, r0, r2, lsl #4
   112d8:	bl	137b8 <error@@Base+0x1f0c>
   112dc:	ldr	r0, [r5]
   112e0:	cmp	r0, #0
   112e4:	beq	112f4 <__assert_fail@plt+0x5e4>
   112e8:	bl	10b90 <free@plt>
   112ec:	mov	r0, #0
   112f0:	str	r0, [r5]
   112f4:	ldr	r0, [r5, #4]
   112f8:	sub	r0, r0, #1
   112fc:	str	r0, [r5, #4]
   11300:	pop	{r4, r5, fp, pc}
   11304:	push	{r4, r5, fp, lr}
   11308:	add	fp, sp, #8
   1130c:	mov	r4, r0
   11310:	movw	r0, #8048	; 0x1f70
   11314:	mov	r5, r4
   11318:	ldr	r0, [r5, r0]!
   1131c:	cmp	r0, #0
   11320:	bne	11380 <__assert_fail@plt+0x670>
   11324:	ldr	r0, [r5, #4]
   11328:	cmp	r0, #0
   1132c:	popeq	{r4, r5, fp, pc}
   11330:	mov	r1, #4
   11334:	bl	113dc <__assert_fail@plt+0x6cc>
   11338:	str	r0, [r5]
   1133c:	mov	r0, #0
   11340:	movw	ip, #503	; 0x1f7
   11344:	mov	r2, #0
   11348:	b	11358 <__assert_fail@plt+0x648>
   1134c:	add	r2, r2, #1
   11350:	cmp	r2, ip
   11354:	beq	11380 <__assert_fail@plt+0x670>
   11358:	ldr	r3, [r4, r2, lsl #4]
   1135c:	cmp	r3, #0
   11360:	beq	1134c <__assert_fail@plt+0x63c>
   11364:	ldr	r1, [r5]
   11368:	str	r3, [r1, r0, lsl #2]
   1136c:	add	r0, r0, #1
   11370:	ldr	r3, [r3, #4]
   11374:	cmp	r3, #0
   11378:	bne	11364 <__assert_fail@plt+0x654>
   1137c:	b	1134c <__assert_fail@plt+0x63c>
   11380:	pop	{r4, r5, fp, pc}
   11384:	push	{r4, r5, r6, r7, fp, lr}
   11388:	add	fp, sp, #16
   1138c:	mov	r5, r0
   11390:	movw	r0, #8048	; 0x1f70
   11394:	mov	r4, r1
   11398:	movw	r7, #503	; 0x1f7
   1139c:	add	r6, r5, r0
   113a0:	mov	r0, r5
   113a4:	mov	r1, r4
   113a8:	bl	1388c <error@@Base+0x1fe0>
   113ac:	subs	r7, r7, #1
   113b0:	add	r5, r5, #16
   113b4:	bne	113a0 <__assert_fail@plt+0x690>
   113b8:	ldr	r0, [r6]
   113bc:	cmp	r0, #0
   113c0:	beq	113d0 <__assert_fail@plt+0x6c0>
   113c4:	bl	10b90 <free@plt>
   113c8:	mov	r0, #0
   113cc:	str	r0, [r6]
   113d0:	mov	r0, #0
   113d4:	str	r0, [r6, #4]
   113d8:	pop	{r4, r5, r6, r7, fp, pc}
   113dc:	push	{fp, lr}
   113e0:	mov	fp, sp
   113e4:	bl	10b54 <calloc@plt>
   113e8:	cmp	r0, #0
   113ec:	popne	{fp, pc}
   113f0:	ldr	r0, [pc, #4]	; 113fc <__assert_fail@plt+0x6ec>
   113f4:	add	r0, pc, r0
   113f8:	bl	118ac <error@@Base>
   113fc:	andeq	r2, r0, r4, ror #14
   11400:	push	{r4, r5, r6, sl, fp, lr}
   11404:	add	fp, sp, #16
   11408:	ldrb	r3, [r0]
   1140c:	ldrb	ip, [r1]
   11410:	mov	r2, r0
   11414:	mov	r0, #0
   11418:	cmp	r3, #0
   1141c:	beq	1145c <__assert_fail@plt+0x74c>
   11420:	add	r6, r2, #1
   11424:	add	lr, r1, #1
   11428:	mov	r2, #0
   1142c:	uxtb	r4, ip
   11430:	uxtb	r5, r3
   11434:	cmp	r5, r4
   11438:	bne	1146c <__assert_fail@plt+0x75c>
   1143c:	ldrb	r3, [r6, r2]
   11440:	ldrb	ip, [lr, r2]
   11444:	add	r2, r2, #1
   11448:	cmp	r3, #0
   1144c:	bne	1142c <__assert_fail@plt+0x71c>
   11450:	cmp	ip, #0
   11454:	bne	11468 <__assert_fail@plt+0x758>
   11458:	pop	{r4, r5, r6, sl, fp, pc}
   1145c:	mov	r2, #0
   11460:	cmp	ip, #0
   11464:	beq	11458 <__assert_fail@plt+0x748>
   11468:	mov	r3, #0
   1146c:	ldrb	r1, [r1, r2]
   11470:	uxtb	r2, r3
   11474:	mov	r0, #1
   11478:	cmp	r2, r1
   1147c:	mvncc	r0, #0
   11480:	pop	{r4, r5, r6, sl, fp, pc}
   11484:	push	{r4, r5, fp, lr}
   11488:	add	fp, sp, #8
   1148c:	mov	r5, r1
   11490:	cmp	r0, #0
   11494:	beq	114c8 <__assert_fail@plt+0x7b8>
   11498:	mov	r1, r5
   1149c:	mov	r4, r0
   114a0:	bl	10b84 <fopen@plt>
   114a4:	cmp	r0, #0
   114a8:	popne	{r4, r5, fp, pc}
   114ac:	ldrb	r0, [r5]
   114b0:	cmp	r0, #119	; 0x77
   114b4:	bne	114ec <__assert_fail@plt+0x7dc>
   114b8:	ldr	r0, [pc, #72]	; 11508 <__assert_fail@plt+0x7f8>
   114bc:	mov	r1, r4
   114c0:	add	r0, pc, r0
   114c4:	bl	118fc <error@@Base+0x50>
   114c8:	ldrb	r0, [r5]
   114cc:	ldr	r1, [pc, #40]	; 114fc <__assert_fail@plt+0x7ec>
   114d0:	ldr	r1, [pc, r1]
   114d4:	ldr	r2, [pc, #36]	; 11500 <__assert_fail@plt+0x7f0>
   114d8:	cmp	r0, #114	; 0x72
   114dc:	ldr	r2, [pc, r2]
   114e0:	moveq	r2, r1
   114e4:	ldr	r0, [r2]
   114e8:	pop	{r4, r5, fp, pc}
   114ec:	ldr	r0, [pc, #16]	; 11504 <__assert_fail@plt+0x7f4>
   114f0:	mov	r1, r4
   114f4:	add	r0, pc, r0
   114f8:	bl	118fc <error@@Base+0x50>
   114fc:	strdeq	r6, [r1], -ip
   11500:	strdeq	r6, [r1], -r4
   11504:	muleq	r0, r4, r6
   11508:			; <UNDEFINED> instruction: 0x000026b2
   1150c:	ldr	r1, [pc, #40]	; 1153c <__assert_fail@plt+0x82c>
   11510:	ldr	r1, [pc, r1]
   11514:	ldr	r1, [r1]
   11518:	cmp	r1, r0
   1151c:	bxeq	lr
   11520:	ldr	r1, [pc, #24]	; 11540 <__assert_fail@plt+0x830>
   11524:	ldr	r1, [pc, r1]
   11528:	ldr	r1, [r1]
   1152c:	cmp	r1, r0
   11530:	beq	11538 <__assert_fail@plt+0x828>
   11534:	b	10ca4 <fclose@plt>
   11538:	bx	lr
   1153c:			; <UNDEFINED> instruction: 0x00016bbc
   11540:	andeq	r6, r1, ip, lsr #23
   11544:	push	{fp, lr}
   11548:	mov	fp, sp
   1154c:	sub	sp, sp, #88	; 0x58
   11550:	mov	r1, r0
   11554:	mov	r2, sp
   11558:	mov	r0, #3
   1155c:	bl	10bf0 <__xstat@plt>
   11560:	clz	r0, r0
   11564:	lsr	r0, r0, #5
   11568:	mov	sp, fp
   1156c:	pop	{fp, pc}
   11570:	push	{r4, r5, fp, lr}
   11574:	add	fp, sp, #8
   11578:	sub	sp, sp, #104	; 0x68
   1157c:	ldr	r0, [pc, #92]	; 115e0 <__assert_fail@plt+0x8d0>
   11580:	add	r0, pc, r0
   11584:	ldrh	r1, [r0]
   11588:	add	r5, r1, #1
   1158c:	strh	r5, [r0]
   11590:	ldr	r0, [pc, #76]	; 115e4 <__assert_fail@plt+0x8d4>
   11594:	ldr	r0, [pc, r0]
   11598:	ldr	r4, [r0]
   1159c:	bl	10c50 <getpid@plt>
   115a0:	mov	r3, r0
   115a4:	sxth	r0, r5
   115a8:	add	r5, sp, #4
   115ac:	mov	r2, r4
   115b0:	str	r0, [sp]
   115b4:	mov	r0, r5
   115b8:	ldr	r1, [pc, #40]	; 115e8 <__assert_fail@plt+0x8d8>
   115bc:	add	r1, pc, r1
   115c0:	bl	10cc8 <sprintf@plt>
   115c4:	mov	r0, r5
   115c8:	bl	10bc0 <strdup@plt>
   115cc:	mov	r4, r0
   115d0:	bl	10bd8 <unlink@plt>
   115d4:	mov	r0, r4
   115d8:	sub	sp, fp, #8
   115dc:	pop	{r4, r5, fp, pc}
   115e0:	andeq	r6, r1, r0, lsl #23
   115e4:	andeq	r6, r1, r8, lsr #22
   115e8:	strdeq	r2, [r0], -r5
   115ec:	push	{r4, sl, fp, lr}
   115f0:	add	fp, sp, #8
   115f4:	mov	r4, r0
   115f8:	bl	10c80 <strlen@plt>
   115fc:	sub	r0, r0, #1
   11600:	sxth	r0, r0
   11604:	cmp	r0, #0
   11608:	bmi	11618 <__assert_fail@plt+0x908>
   1160c:	ldrb	r1, [r4, r0]
   11610:	cmp	r1, #47	; 0x2f
   11614:	bne	115fc <__assert_fail@plt+0x8ec>
   11618:	add	r0, r0, r4
   1161c:	add	r0, r0, #1
   11620:	pop	{r4, sl, fp, pc}
   11624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11628:	add	fp, sp, #28
   1162c:	sub	sp, sp, #12
   11630:	stmib	sp, {r0, r1}
   11634:	mov	r6, r3
   11638:	str	r2, [sp]
   1163c:	ldr	r4, [r1]
   11640:	mov	r0, r4
   11644:	bl	10c80 <strlen@plt>
   11648:	sub	r0, r0, #1
   1164c:	sxth	r0, r0
   11650:	cmp	r0, #0
   11654:	bmi	11664 <__assert_fail@plt+0x954>
   11658:	ldrb	r1, [r4, r0]
   1165c:	cmp	r1, #47	; 0x2f
   11660:	bne	11648 <__assert_fail@plt+0x938>
   11664:	ldr	r1, [pc, #484]	; 11850 <__assert_fail@plt+0xb40>
   11668:	add	r0, r0, r4
   1166c:	add	r0, r0, #1
   11670:	ldr	r1, [pc, r1]
   11674:	str	r0, [r1]
   11678:	mov	r0, #2
   1167c:	ldr	r4, [pc, #464]	; 11854 <__assert_fail@plt+0xb44>
   11680:	add	r4, pc, r4
   11684:	mov	r1, r4
   11688:	bl	10c38 <__sysv_signal@plt>
   1168c:	mov	r0, #15
   11690:	mov	r1, r4
   11694:	bl	10c38 <__sysv_signal@plt>
   11698:	ldr	r0, [sp, #4]
   1169c:	ldr	r5, [r0]
   116a0:	cmp	r5, #1
   116a4:	bne	116bc <__assert_fail@plt+0x9ac>
   116a8:	ldr	r0, [pc, #424]	; 11858 <__assert_fail@plt+0xb48>
   116ac:	ldr	r0, [pc, r0]
   116b0:	ldrb	r0, [r0]
   116b4:	cmp	r0, #0
   116b8:	bne	11838 <__assert_fail@plt+0xb28>
   116bc:	ldr	ip, [sp, #8]
   116c0:	mov	r8, #0
   116c4:	cmp	r5, #2
   116c8:	blt	11814 <__assert_fail@plt+0xb04>
   116cc:	mov	r8, #0
   116d0:	mov	r7, #1
   116d4:	mov	r9, #1
   116d8:	ldr	r4, [ip, r7, lsl #2]
   116dc:	ldrb	r0, [r4]
   116e0:	cmp	r0, #45	; 0x2d
   116e4:	bne	117bc <__assert_fail@plt+0xaac>
   116e8:	ldrb	sl, [r4, #1]
   116ec:	cmp	sl, #0
   116f0:	beq	117bc <__assert_fail@plt+0xaac>
   116f4:	mov	r0, r4
   116f8:	bl	10c80 <strlen@plt>
   116fc:	mov	r2, r0
   11700:	ldr	r0, [pc, #340]	; 1185c <__assert_fail@plt+0xb4c>
   11704:	mov	r1, r4
   11708:	add	r0, pc, r0
   1170c:	bl	10cec <strncmp@plt>
   11710:	cmp	r0, #0
   11714:	beq	11838 <__assert_fail@plt+0xb28>
   11718:	ldr	ip, [sp, #8]
   1171c:	add	r1, r7, #1
   11720:	mov	r0, #0
   11724:	cmp	r1, r5
   11728:	ldrlt	r0, [ip, r1, lsl #2]
   1172c:	cmp	r6, #0
   11730:	ldrbne	r2, [r6]
   11734:	cmpne	r2, #0
   11738:	beq	11828 <__assert_fail@plt+0xb18>
   1173c:	mov	r1, #0
   11740:	cmp	sl, r2
   11744:	beq	1176c <__assert_fail@plt+0xa5c>
   11748:	mov	r2, #1
   1174c:	sxth	r1, r2
   11750:	add	r3, r1, r1, lsl #1
   11754:	ldrb	r3, [r6, r3, lsl #2]
   11758:	cmp	r3, #0
   1175c:	beq	11828 <__assert_fail@plt+0xb18>
   11760:	add	r2, r2, #1
   11764:	cmp	sl, r3
   11768:	bne	1174c <__assert_fail@plt+0xa3c>
   1176c:	add	r1, r1, r1, lsl #1
   11770:	add	r3, r6, r1, lsl #2
   11774:	ldr	r1, [r3, #4]
   11778:	cmp	r1, #0
   1177c:	beq	117dc <__assert_fail@plt+0xacc>
   11780:	mov	r2, r4
   11784:	cmp	r0, #0
   11788:	ldrb	r7, [r2, #2]!
   1178c:	cmpeq	r7, #0
   11790:	beq	117dc <__assert_fail@plt+0xacc>
   11794:	ldr	r3, [r1]
   11798:	cmp	r3, #0
   1179c:	bne	11840 <__assert_fail@plt+0xb30>
   117a0:	cmp	r7, #0
   117a4:	movne	r0, r2
   117a8:	str	r0, [r1]
   117ac:	ldrb	r0, [r2]
   117b0:	cmp	r0, #0
   117b4:	addeq	r9, r9, #1
   117b8:	b	117c8 <__assert_fail@plt+0xab8>
   117bc:	sxth	r0, r8
   117c0:	add	r8, r8, #1
   117c4:	str	r4, [ip, r0, lsl #2]
   117c8:	add	r9, r9, #1
   117cc:	sxth	r7, r9
   117d0:	cmp	r5, r7
   117d4:	bgt	116d8 <__assert_fail@plt+0x9c8>
   117d8:	b	11814 <__assert_fail@plt+0xb04>
   117dc:	ldr	r0, [r3, #8]
   117e0:	cmp	r0, #0
   117e4:	beq	11828 <__assert_fail@plt+0xb18>
   117e8:	ldrb	r1, [r4, #2]
   117ec:	cmp	r1, #0
   117f0:	bne	11828 <__assert_fail@plt+0xb18>
   117f4:	ldrb	r1, [r0]
   117f8:	cmp	r1, #0
   117fc:	bne	11840 <__assert_fail@plt+0xb30>
   11800:	mov	r1, #1
   11804:	strb	r1, [r0]
   11808:	ldr	r0, [sp, #4]
   1180c:	ldr	r5, [r0]
   11810:	b	117c8 <__assert_fail@plt+0xab8>
   11814:	ldr	r1, [sp, #4]
   11818:	sxth	r0, r8
   1181c:	str	r0, [r1]
   11820:	sub	sp, fp, #28
   11824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11828:	ldr	r0, [pc, #52]	; 11864 <__assert_fail@plt+0xb54>
   1182c:	mov	r1, r4
   11830:	add	r0, pc, r0
   11834:	bl	118fc <error@@Base+0x50>
   11838:	ldr	r0, [sp]
   1183c:	bl	119d8 <error@@Base+0x12c>
   11840:	ldr	r0, [pc, #24]	; 11860 <__assert_fail@plt+0xb50>
   11844:	mov	r1, r4
   11848:	add	r0, pc, r0
   1184c:	bl	118fc <error@@Base+0x50>
   11850:	andeq	r6, r1, ip, asr #20
   11854:	andeq	r0, r0, r8, lsl r3
   11858:	strdeq	r6, [r1], -r8
   1185c:	andeq	r2, r0, r6, asr #9
   11860:	andeq	r2, r0, sl, lsr #7
   11864:			; <UNDEFINED> instruction: 0x000023b3
   11868:	push	{fp, lr}
   1186c:	mov	fp, sp
   11870:	mov	r0, #0
   11874:	bl	11878 <__assert_fail@plt+0xb68>
   11878:	push	{fp, lr}
   1187c:	mov	fp, sp
   11880:	mov	r4, r0
   11884:	ldr	r0, [pc, #28]	; 118a8 <__assert_fail@plt+0xb98>
   11888:	ldr	r0, [pc, r0]
   1188c:	ldr	r0, [r0]
   11890:	cmp	r0, #0
   11894:	beq	1189c <__assert_fail@plt+0xb8c>
   11898:	blx	r0
   1189c:	bl	11a38 <error@@Base+0x18c>
   118a0:	mov	r0, r4
   118a4:	bl	10c5c <exit@plt>
   118a8:	andeq	r6, r1, ip, lsr r8

000118ac <error@@Base>:
   118ac:	push	{fp, lr}
   118b0:	mov	fp, sp
   118b4:	mov	r3, r0
   118b8:	ldr	r0, [pc, #44]	; 118ec <error@@Base+0x40>
   118bc:	ldr	r0, [pc, r0]
   118c0:	ldr	r2, [r0]
   118c4:	ldr	r0, [pc, #36]	; 118f0 <error@@Base+0x44>
   118c8:	ldr	r0, [pc, r0]
   118cc:	ldr	r0, [r0]
   118d0:	ldr	r1, [pc, #28]	; 118f4 <error@@Base+0x48>
   118d4:	add	r1, pc, r1
   118d8:	bl	10c8c <fprintf@plt>
   118dc:	ldr	r0, [pc, #20]	; 118f8 <error@@Base+0x4c>
   118e0:	ldr	r0, [pc, r0]
   118e4:	ldr	r0, [r0]
   118e8:	bl	11878 <__assert_fail@plt+0xb68>
   118ec:	andeq	r6, r1, r0, lsl #16
   118f0:	andeq	r6, r1, ip, ror #15
   118f4:	andeq	r2, r0, r8, asr #5
   118f8:	strdeq	r6, [r1], -r8
   118fc:	push	{fp, lr}
   11900:	mov	fp, sp
   11904:	sub	sp, sp, #8
   11908:	mov	r3, r0
   1190c:	ldr	r0, [pc, #48]	; 11944 <error@@Base+0x98>
   11910:	ldr	r0, [pc, r0]
   11914:	ldr	r2, [r0]
   11918:	ldr	r0, [pc, #40]	; 11948 <error@@Base+0x9c>
   1191c:	ldr	r0, [pc, r0]
   11920:	str	r1, [sp]
   11924:	ldr	r0, [r0]
   11928:	ldr	r1, [pc, #28]	; 1194c <error@@Base+0xa0>
   1192c:	add	r1, pc, r1
   11930:	bl	10c8c <fprintf@plt>
   11934:	ldr	r0, [pc, #20]	; 11950 <error@@Base+0xa4>
   11938:	ldr	r0, [pc, r0]
   1193c:	ldr	r0, [r0]
   11940:	bl	11878 <__assert_fail@plt+0xb68>
   11944:	andeq	r6, r1, ip, lsr #15
   11948:	muleq	r1, r8, r7
   1194c:	andeq	r2, r0, r8, ror r2
   11950:	andeq	r6, r1, r0, lsr #15
   11954:	push	{fp, lr}
   11958:	mov	fp, sp
   1195c:	sub	sp, sp, #8
   11960:	mov	r3, r0
   11964:	ldr	r0, [pc, #40]	; 11994 <error@@Base+0xe8>
   11968:	ldr	r0, [pc, r0]
   1196c:	ldr	r2, [r0]
   11970:	ldr	r0, [pc, #32]	; 11998 <error@@Base+0xec>
   11974:	ldr	r0, [pc, r0]
   11978:	str	r1, [sp]
   1197c:	ldr	r0, [r0]
   11980:	ldr	r1, [pc, #20]	; 1199c <error@@Base+0xf0>
   11984:	add	r1, pc, r1
   11988:	bl	10c8c <fprintf@plt>
   1198c:	mov	sp, fp
   11990:	pop	{fp, pc}
   11994:	andeq	r6, r1, r4, asr r7
   11998:	andeq	r6, r1, r0, asr #14
   1199c:	andeq	r2, r0, r0, lsr #4
   119a0:	push	{fp, lr}
   119a4:	mov	fp, sp
   119a8:	ldr	r0, [pc, #32]	; 119d0 <error@@Base+0x124>
   119ac:	add	r0, pc, r0
   119b0:	ldrb	r1, [r0]
   119b4:	cmp	r1, #1
   119b8:	popeq	{fp, pc}
   119bc:	mov	r1, #1
   119c0:	strb	r1, [r0]
   119c4:	ldr	r0, [pc, #8]	; 119d4 <error@@Base+0x128>
   119c8:	add	r0, pc, r0
   119cc:	bl	118ac <error@@Base>
   119d0:	andeq	r6, r1, r6, asr r7
   119d4:	strdeq	r2, [r0], -r7
   119d8:	push	{fp, lr}
   119dc:	mov	fp, sp
   119e0:	mov	r3, r0
   119e4:	ldr	r0, [pc, #60]	; 11a28 <error@@Base+0x17c>
   119e8:	ldr	r0, [pc, r0]
   119ec:	ldr	r0, [r0]
   119f0:	cmp	r0, #0
   119f4:	bne	11a20 <error@@Base+0x174>
   119f8:	ldr	r0, [pc, #44]	; 11a2c <error@@Base+0x180>
   119fc:	ldr	r0, [pc, r0]
   11a00:	ldr	r2, [r0]
   11a04:	ldr	r0, [pc, #36]	; 11a30 <error@@Base+0x184>
   11a08:	ldr	r0, [pc, r0]
   11a0c:	ldr	r0, [r0]
   11a10:	ldr	r1, [pc, #28]	; 11a34 <error@@Base+0x188>
   11a14:	add	r1, pc, r1
   11a18:	bl	10c8c <fprintf@plt>
   11a1c:	bl	11868 <__assert_fail@plt+0xb58>
   11a20:	blx	r0
   11a24:	bl	11868 <__assert_fail@plt+0xb58>
   11a28:	andeq	r6, r1, r0, asr #13
   11a2c:	andeq	r6, r1, r0, asr #13
   11a30:	andeq	r6, r1, ip, lsr #13
   11a34:	andeq	r2, r0, r0, asr #3
   11a38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11a3c:	add	fp, sp, #24
   11a40:	sub	sp, sp, #104	; 0x68
   11a44:	ldr	r8, [pc, #124]	; 11ac8 <error@@Base+0x21c>
   11a48:	add	r8, pc, r8
   11a4c:	ldrsh	r0, [r8]
   11a50:	cmp	r0, #1
   11a54:	blt	11ac0 <error@@Base+0x214>
   11a58:	ldr	r9, [pc, #108]	; 11acc <error@@Base+0x220>
   11a5c:	mov	r7, #1
   11a60:	add	r4, sp, #4
   11a64:	ldr	r9, [pc, r9]
   11a68:	ldr	r5, [pc, #96]	; 11ad0 <error@@Base+0x224>
   11a6c:	add	r5, pc, r5
   11a70:	ldr	r6, [r9]
   11a74:	bl	10c50 <getpid@plt>
   11a78:	mov	r3, r0
   11a7c:	sxth	r0, r7
   11a80:	mov	r1, r5
   11a84:	mov	r2, r6
   11a88:	str	r0, [sp]
   11a8c:	mov	r0, r4
   11a90:	bl	10cc8 <sprintf@plt>
   11a94:	mov	r0, r4
   11a98:	bl	10bc0 <strdup@plt>
   11a9c:	mov	r6, r0
   11aa0:	bl	10bd8 <unlink@plt>
   11aa4:	mov	r0, r6
   11aa8:	bl	10b90 <free@plt>
   11aac:	add	r0, r7, #1
   11ab0:	sxth	r7, r0
   11ab4:	ldrsh	r0, [r8]
   11ab8:	cmp	r7, r0
   11abc:	ble	11a70 <error@@Base+0x1c4>
   11ac0:	sub	sp, fp, #24
   11ac4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ac8:			; <UNDEFINED> instruction: 0x000166b8
   11acc:	andeq	r6, r1, r8, asr r6
   11ad0:	andeq	r2, r0, r5, asr #2
   11ad4:	andeq	r0, r0, r0
   11ad8:	ldm	r0, {r3, ip}
   11adc:	add	r2, ip, r2
   11ae0:	add	r1, r3, r1
   11ae4:	stm	r0, {r1, r2}
   11ae8:	bx	lr
   11aec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11af0:	add	fp, sp, #24
   11af4:	mov	r8, r3
   11af8:	mov	r5, r2
   11afc:	mov	r4, r1
   11b00:	mov	r6, r0
   11b04:	bl	11164 <__assert_fail@plt+0x454>
   11b08:	mov	r7, r0
   11b0c:	cmp	r0, #0
   11b10:	bne	11b3c <error@@Base+0x290>
   11b14:	mov	r0, #1
   11b18:	mov	r1, #20
   11b1c:	bl	113dc <__assert_fail@plt+0x6cc>
   11b20:	mov	r7, r0
   11b24:	mov	r0, r4
   11b28:	bl	10bc0 <strdup@plt>
   11b2c:	str	r0, [r7, #8]
   11b30:	mov	r0, r6
   11b34:	mov	r1, r7
   11b38:	bl	111f4 <__assert_fail@plt+0x4e4>
   11b3c:	ldr	r0, [r7, #12]
   11b40:	ldr	r1, [r7, #16]
   11b44:	add	r0, r0, r5
   11b48:	add	r1, r1, r8
   11b4c:	str	r0, [r7, #12]
   11b50:	str	r1, [r7, #16]
   11b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b58:	push	{r4, r5, r6, r7, fp, lr}
   11b5c:	add	fp, sp, #16
   11b60:	sub	sp, sp, #8
   11b64:	mov	r6, r1
   11b68:	ldr	r1, [pc, #484]	; 11d54 <error@@Base+0x4a8>
   11b6c:	mov	r5, r0
   11b70:	mov	r0, r6
   11b74:	add	r1, pc, r1
   11b78:	bl	11484 <__assert_fail@plt+0x774>
   11b7c:	mov	r4, r0
   11b80:	ldr	r0, [pc, #464]	; 11d58 <error@@Base+0x4ac>
   11b84:	mov	r1, #99	; 0x63
   11b88:	mov	r2, r4
   11b8c:	add	r0, pc, r0
   11b90:	bl	10ba8 <fgets@plt>
   11b94:	cmp	r0, #0
   11b98:	beq	11d38 <error@@Base+0x48c>
   11b9c:	ldr	r0, [pc, #440]	; 11d5c <error@@Base+0x4b0>
   11ba0:	ldr	r1, [pc, #440]	; 11d60 <error@@Base+0x4b4>
   11ba4:	mov	r2, #45	; 0x2d
   11ba8:	add	r0, pc, r0
   11bac:	add	r1, pc, r1
   11bb0:	bl	10c68 <bcmp@plt>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11d38 <error@@Base+0x48c>
   11bbc:	ldr	r0, [pc, #416]	; 11d64 <error@@Base+0x4b8>
   11bc0:	mov	r1, #99	; 0x63
   11bc4:	mov	r2, r4
   11bc8:	add	r0, pc, r0
   11bcc:	bl	10ba8 <fgets@plt>
   11bd0:	cmp	r0, #0
   11bd4:	beq	11d38 <error@@Base+0x48c>
   11bd8:	ldr	r0, [pc, #392]	; 11d68 <error@@Base+0x4bc>
   11bdc:	ldr	r1, [pc, #392]	; 11d6c <error@@Base+0x4c0>
   11be0:	mov	r2, #48	; 0x30
   11be4:	add	r0, pc, r0
   11be8:	add	r1, pc, r1
   11bec:	bl	10c68 <bcmp@plt>
   11bf0:	cmp	r0, #0
   11bf4:	bne	11d38 <error@@Base+0x48c>
   11bf8:	ldr	r0, [pc, #368]	; 11d70 <error@@Base+0x4c4>
   11bfc:	mov	r1, #99	; 0x63
   11c00:	mov	r2, r4
   11c04:	add	r0, pc, r0
   11c08:	bl	10ba8 <fgets@plt>
   11c0c:	cmp	r0, #0
   11c10:	beq	11d38 <error@@Base+0x48c>
   11c14:	ldr	r0, [pc, #344]	; 11d74 <error@@Base+0x4c8>
   11c18:	ldr	r1, [pc, #344]	; 11d78 <error@@Base+0x4cc>
   11c1c:	add	r2, sp, #4
   11c20:	add	r0, pc, r0
   11c24:	add	r1, pc, r1
   11c28:	bl	10c98 <__isoc99_sscanf@plt>
   11c2c:	cmp	r0, #1
   11c30:	bne	11d38 <error@@Base+0x48c>
   11c34:	ldr	r0, [pc, #320]	; 11d7c <error@@Base+0x4d0>
   11c38:	mov	r1, #99	; 0x63
   11c3c:	mov	r2, r4
   11c40:	add	r0, pc, r0
   11c44:	bl	10ba8 <fgets@plt>
   11c48:	cmp	r0, #0
   11c4c:	beq	11d38 <error@@Base+0x48c>
   11c50:	ldr	r0, [pc, #296]	; 11d80 <error@@Base+0x4d4>
   11c54:	ldr	r1, [pc, #296]	; 11d84 <error@@Base+0x4d8>
   11c58:	mov	r2, sp
   11c5c:	add	r0, pc, r0
   11c60:	add	r1, pc, r1
   11c64:	bl	10c98 <__isoc99_sscanf@plt>
   11c68:	cmp	r0, #1
   11c6c:	bne	11d38 <error@@Base+0x48c>
   11c70:	ldr	r0, [pc, #272]	; 11d88 <error@@Base+0x4dc>
   11c74:	mov	r1, #99	; 0x63
   11c78:	mov	r2, r4
   11c7c:	add	r0, pc, r0
   11c80:	bl	10ba8 <fgets@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11d38 <error@@Base+0x48c>
   11c8c:	ldr	r0, [pc, #248]	; 11d8c <error@@Base+0x4e0>
   11c90:	mov	r1, #99	; 0x63
   11c94:	mov	r2, r4
   11c98:	add	r0, pc, r0
   11c9c:	bl	10ba8 <fgets@plt>
   11ca0:	cmp	r0, #0
   11ca4:	beq	11d38 <error@@Base+0x48c>
   11ca8:	ldr	r2, [sp, #4]
   11cac:	ldm	r5, {r0, r1}
   11cb0:	add	r0, r0, r2
   11cb4:	ldr	r2, [sp]
   11cb8:	add	r1, r1, r2
   11cbc:	stm	r5, {r0, r1}
   11cc0:	add	r1, r5, #8
   11cc4:	mov	r0, r4
   11cc8:	bl	11d98 <error@@Base+0x4ec>
   11ccc:	mov	r7, r0
   11cd0:	add	r1, r5, #416	; 0x1a0
   11cd4:	mov	r0, r4
   11cd8:	bl	11d98 <error@@Base+0x4ec>
   11cdc:	mov	r6, r0
   11ce0:	add	r1, r5, #824	; 0x338
   11ce4:	mov	r0, r4
   11ce8:	bl	11d98 <error@@Base+0x4ec>
   11cec:	ldr	r0, [sp, #4]
   11cf0:	cmp	r0, #1
   11cf4:	blt	11d28 <error@@Base+0x47c>
   11cf8:	add	r1, r5, #920	; 0x398
   11cfc:	mov	r0, r4
   11d00:	bl	11d98 <error@@Base+0x4ec>
   11d04:	cmp	r7, #1
   11d08:	addge	r1, r5, #992	; 0x3e0
   11d0c:	movge	r0, r4
   11d10:	blge	11ed8 <error@@Base+0x62c>
   11d14:	cmp	r6, #1
   11d18:	movwge	r0, #9048	; 0x2358
   11d1c:	addge	r1, r5, r0
   11d20:	movge	r0, r4
   11d24:	blge	11ed8 <error@@Base+0x62c>
   11d28:	mov	r0, r4
   11d2c:	bl	1150c <__assert_fail@plt+0x7fc>
   11d30:	sub	sp, fp, #16
   11d34:	pop	{r4, r5, r6, r7, fp, pc}
   11d38:	ldr	r1, [pc, #80]	; 11d90 <error@@Base+0x4e4>
   11d3c:	ldr	r0, [pc, #80]	; 11d94 <error@@Base+0x4e8>
   11d40:	cmp	r6, #0
   11d44:	add	r1, pc, r1
   11d48:	movne	r1, r6
   11d4c:	add	r0, pc, r0
   11d50:	bl	118fc <error@@Base+0x50>
   11d54:	andeq	r5, r0, sl, lsl #12
   11d58:	andeq	r6, r1, r7, ror r5
   11d5c:	andeq	r6, r1, fp, asr r5
   11d60:	andeq	r2, r0, r7, asr r0
   11d64:	andeq	r6, r1, fp, lsr r5
   11d68:	andeq	r6, r1, pc, lsl r5
   11d6c:	andeq	r5, r0, r0, asr r5
   11d70:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11d74:	andeq	r6, r1, r3, ror #9
   11d78:	muleq	r0, r4, r0
   11d7c:	andeq	r6, r1, r3, asr #9
   11d80:	andeq	r6, r1, r7, lsr #9
   11d84:	andeq	r2, r0, r8, asr r0
   11d88:	andeq	r6, r1, r7, lsl #9
   11d8c:	andeq	r6, r1, fp, ror #8
   11d90:	andeq	r1, r0, r1, lsl #30
   11d94:	andeq	r1, r0, r7, ror #29
   11d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d9c:	add	fp, sp, #28
   11da0:	sub	sp, sp, #12
   11da4:	mov	r5, r0
   11da8:	ldr	r0, [pc, #276]	; 11ec4 <error@@Base+0x618>
   11dac:	mov	r4, r1
   11db0:	mov	r1, #99	; 0x63
   11db4:	mov	r2, r5
   11db8:	add	r0, pc, r0
   11dbc:	bl	10ba8 <fgets@plt>
   11dc0:	mov	r6, #0
   11dc4:	cmp	r0, #0
   11dc8:	beq	11eb8 <error@@Base+0x60c>
   11dcc:	ldr	r0, [pc, #244]	; 11ec8 <error@@Base+0x61c>
   11dd0:	mov	r1, #99	; 0x63
   11dd4:	mov	r2, r5
   11dd8:	add	r0, pc, r0
   11ddc:	bl	10ba8 <fgets@plt>
   11de0:	cmp	r0, #0
   11de4:	beq	11eb8 <error@@Base+0x60c>
   11de8:	ldr	r7, [pc, #220]	; 11ecc <error@@Base+0x620>
   11dec:	mov	r1, #99	; 0x63
   11df0:	mov	r2, r5
   11df4:	add	r7, pc, r7
   11df8:	mov	r0, r7
   11dfc:	bl	10ba8 <fgets@plt>
   11e00:	cmp	r0, #0
   11e04:	beq	11eb8 <error@@Base+0x60c>
   11e08:	mov	r6, #0
   11e0c:	add	r9, sp, #8
   11e10:	add	sl, sp, #4
   11e14:	add	r8, r7, #29
   11e18:	b	11e78 <error@@Base+0x5cc>
   11e1c:	ldr	r1, [pc, #176]	; 11ed4 <error@@Base+0x628>
   11e20:	mov	r0, r8
   11e24:	mov	r2, #8
   11e28:	add	r1, pc, r1
   11e2c:	bl	10c68 <bcmp@plt>
   11e30:	ldr	r1, [sp, #8]
   11e34:	cmp	r0, #0
   11e38:	movwne	r0, #11
   11e3c:	moveq	r6, r1
   11e40:	mov	r2, r4
   11e44:	ldr	r0, [r2, r0, lsl #3]!
   11e48:	add	r0, r0, r1
   11e4c:	ldr	r1, [sp, #4]
   11e50:	str	r0, [r2]
   11e54:	ldr	r0, [r2, #4]
   11e58:	add	r0, r0, r1
   11e5c:	mov	r1, #99	; 0x63
   11e60:	str	r0, [r2, #4]
   11e64:	mov	r0, r7
   11e68:	mov	r2, r5
   11e6c:	bl	10ba8 <fgets@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11eb8 <error@@Base+0x60c>
   11e78:	ldr	r1, [pc, #80]	; 11ed0 <error@@Base+0x624>
   11e7c:	mov	r0, r7
   11e80:	mov	r2, r9
   11e84:	mov	r3, sl
   11e88:	add	r1, pc, r1
   11e8c:	bl	10c98 <__isoc99_sscanf@plt>
   11e90:	cmp	r0, #2
   11e94:	bne	11eb8 <error@@Base+0x60c>
   11e98:	mov	r0, r8
   11e9c:	mov	r1, #0
   11ea0:	mov	r2, #10
   11ea4:	bl	10b6c <strtol@plt>
   11ea8:	cmp	r0, #0
   11eac:	beq	11e1c <error@@Base+0x570>
   11eb0:	ldr	r1, [sp, #8]
   11eb4:	b	11e40 <error@@Base+0x594>
   11eb8:	mov	r0, r6
   11ebc:	sub	sp, fp, #28
   11ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ec4:	andeq	r6, r1, fp, asr #6
   11ec8:	andeq	r6, r1, fp, lsr #6
   11ecc:	andeq	r6, r1, pc, lsl #6
   11ed0:	andeq	r1, r0, ip, lsr #28
   11ed4:	andeq	r1, r0, r4, lsl #29
   11ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11edc:	add	fp, sp, #28
   11ee0:	sub	sp, sp, #12
   11ee4:	mov	r5, r0
   11ee8:	ldr	r0, [pc, #276]	; 12004 <error@@Base+0x758>
   11eec:	mov	r4, r1
   11ef0:	mov	r1, #99	; 0x63
   11ef4:	mov	r2, r5
   11ef8:	add	r0, pc, r0
   11efc:	bl	10ba8 <fgets@plt>
   11f00:	cmp	r0, #0
   11f04:	beq	11ffc <error@@Base+0x750>
   11f08:	ldr	r0, [pc, #248]	; 12008 <error@@Base+0x75c>
   11f0c:	mov	r1, #99	; 0x63
   11f10:	mov	r2, r5
   11f14:	add	r0, pc, r0
   11f18:	bl	10ba8 <fgets@plt>
   11f1c:	cmp	r0, #0
   11f20:	beq	11ffc <error@@Base+0x750>
   11f24:	ldr	r6, [pc, #224]	; 1200c <error@@Base+0x760>
   11f28:	mov	r1, #99	; 0x63
   11f2c:	mov	r2, r5
   11f30:	add	r6, pc, r6
   11f34:	mov	r0, r6
   11f38:	bl	10ba8 <fgets@plt>
   11f3c:	cmp	r0, #0
   11f40:	beq	11ffc <error@@Base+0x750>
   11f44:	add	r7, r6, #29
   11f48:	b	11f7c <error@@Base+0x6d0>
   11f4c:	ldr	r0, [r8, #12]
   11f50:	ldr	r1, [r8, #16]
   11f54:	mov	r2, r5
   11f58:	add	r0, r0, r9
   11f5c:	add	r1, r1, sl
   11f60:	str	r0, [r8, #12]
   11f64:	str	r1, [r8, #16]
   11f68:	mov	r0, r6
   11f6c:	mov	r1, #99	; 0x63
   11f70:	bl	10ba8 <fgets@plt>
   11f74:	cmp	r0, #0
   11f78:	beq	11ffc <error@@Base+0x750>
   11f7c:	ldr	r1, [pc, #140]	; 12010 <error@@Base+0x764>
   11f80:	mov	r0, r6
   11f84:	add	r2, sp, #8
   11f88:	add	r3, sp, #4
   11f8c:	add	r1, pc, r1
   11f90:	bl	10c98 <__isoc99_sscanf@plt>
   11f94:	cmp	r0, #2
   11f98:	bne	11ffc <error@@Base+0x750>
   11f9c:	mov	r0, r6
   11fa0:	bl	10c80 <strlen@plt>
   11fa4:	ldr	r9, [sp, #8]
   11fa8:	ldr	sl, [sp, #4]
   11fac:	add	r0, r0, r6
   11fb0:	mov	r1, #0
   11fb4:	strb	r1, [r0, #-1]
   11fb8:	mov	r0, r4
   11fbc:	mov	r1, r7
   11fc0:	bl	11164 <__assert_fail@plt+0x454>
   11fc4:	mov	r8, r0
   11fc8:	cmp	r0, #0
   11fcc:	bne	11f4c <error@@Base+0x6a0>
   11fd0:	mov	r0, #1
   11fd4:	mov	r1, #20
   11fd8:	bl	113dc <__assert_fail@plt+0x6cc>
   11fdc:	mov	r8, r0
   11fe0:	mov	r0, r7
   11fe4:	bl	10bc0 <strdup@plt>
   11fe8:	str	r0, [r8, #8]
   11fec:	mov	r0, r4
   11ff0:	mov	r1, r8
   11ff4:	bl	111f4 <__assert_fail@plt+0x4e4>
   11ff8:	b	11f4c <error@@Base+0x6a0>
   11ffc:	sub	sp, fp, #28
   12000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12004:	andeq	r6, r1, fp, lsl #4
   12008:	andeq	r6, r1, pc, ror #3
   1200c:	ldrdeq	r6, [r1], -r3
   12010:	andeq	r1, r0, r8, lsr #26
   12014:	nop	{0}
   12018:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1201c:	add	fp, sp, #24
   12020:	sub	sp, sp, #8
   12024:	mov	r2, r1
   12028:	ldr	r1, [pc, #448]	; 121f0 <error@@Base+0x944>
   1202c:	mov	r5, r0
   12030:	mov	r0, r2
   12034:	add	r1, pc, r1
   12038:	bl	11484 <__assert_fail@plt+0x774>
   1203c:	ldr	r1, [pc, #432]	; 121f4 <error@@Base+0x948>
   12040:	ldr	r2, [pc, #432]	; 121f8 <error@@Base+0x94c>
   12044:	ldr	r3, [pc, #432]	; 121fc <error@@Base+0x950>
   12048:	mov	r4, r0
   1204c:	add	r1, pc, r1
   12050:	add	r2, pc, r2
   12054:	add	r3, pc, r3
   12058:	bl	10c8c <fprintf@plt>
   1205c:	ldr	r2, [r5]
   12060:	ldr	r1, [pc, #408]	; 12200 <error@@Base+0x954>
   12064:	mov	r0, r4
   12068:	add	r1, pc, r1
   1206c:	bl	10c8c <fprintf@plt>
   12070:	ldr	r2, [r5, #4]
   12074:	ldr	r1, [pc, #392]	; 12204 <error@@Base+0x958>
   12078:	mov	r0, r4
   1207c:	add	r1, pc, r1
   12080:	bl	10c8c <fprintf@plt>
   12084:	ldr	r0, [r5]
   12088:	cmp	r0, #0
   1208c:	beq	120cc <error@@Base+0x820>
   12090:	ldr	r1, [r5, #4]
   12094:	vldr	d16, [pc, #332]	; 121e8 <error@@Base+0x93c>
   12098:	vmov	s2, r0
   1209c:	sub	r1, r0, r1
   120a0:	mov	r0, r4
   120a4:	vmov	s0, r1
   120a8:	vcvt.f64.s32	d17, s0
   120ac:	vcvt.f64.s32	d18, s2
   120b0:	ldr	r1, [pc, #340]	; 1220c <error@@Base+0x960>
   120b4:	add	r1, pc, r1
   120b8:	vmul.f64	d16, d17, d16
   120bc:	vdiv.f64	d16, d16, d18
   120c0:	vmov	r2, r3, d16
   120c4:	bl	10c8c <fprintf@plt>
   120c8:	b	120e4 <error@@Base+0x838>
   120cc:	ldr	r0, [pc, #308]	; 12208 <error@@Base+0x95c>
   120d0:	mov	r1, #8
   120d4:	mov	r2, #1
   120d8:	mov	r3, r4
   120dc:	add	r0, pc, r0
   120e0:	bl	10bfc <fwrite@plt>
   120e4:	ldr	r0, [pc, #292]	; 12210 <error@@Base+0x964>
   120e8:	mov	r1, #12
   120ec:	mov	r2, #1
   120f0:	mov	r3, r4
   120f4:	mov	r7, #1
   120f8:	add	r0, pc, r0
   120fc:	bl	10bfc <fwrite@plt>
   12100:	mov	r8, #0
   12104:	str	r7, [sp, #4]
   12108:	add	r1, r5, #8
   1210c:	mov	r0, r4
   12110:	mov	r2, #50	; 0x32
   12114:	str	r8, [sp]
   12118:	ldr	r3, [pc, #244]	; 12214 <error@@Base+0x968>
   1211c:	add	r3, pc, r3
   12120:	bl	12230 <error@@Base+0x984>
   12124:	str	r8, [sp]
   12128:	str	r7, [sp, #4]
   1212c:	add	r6, r5, #416	; 0x1a0
   12130:	mov	r0, r4
   12134:	mov	r2, #50	; 0x32
   12138:	ldr	r3, [pc, #216]	; 12218 <error@@Base+0x96c>
   1213c:	mov	r1, r6
   12140:	add	r3, pc, r3
   12144:	bl	12230 <error@@Base+0x984>
   12148:	str	r7, [sp]
   1214c:	str	r7, [sp, #4]
   12150:	add	r1, r5, #824	; 0x338
   12154:	mov	r0, r4
   12158:	mov	r2, #10
   1215c:	ldr	r3, [pc, #184]	; 1221c <error@@Base+0x970>
   12160:	add	r3, pc, r3
   12164:	bl	12230 <error@@Base+0x984>
   12168:	ldr	r0, [r5]
   1216c:	cmp	r0, #1
   12170:	blt	121d8 <error@@Base+0x92c>
   12174:	str	r8, [sp]
   12178:	str	r8, [sp, #4]
   1217c:	add	r1, r5, #920	; 0x398
   12180:	mov	r0, r4
   12184:	mov	r2, #8
   12188:	ldr	r3, [pc, #144]	; 12220 <error@@Base+0x974>
   1218c:	add	r3, pc, r3
   12190:	bl	12230 <error@@Base+0x984>
   12194:	ldr	r0, [r5, #8]
   12198:	cmp	r0, #1
   1219c:	blt	121b4 <error@@Base+0x908>
   121a0:	ldr	r2, [pc, #124]	; 12224 <error@@Base+0x978>
   121a4:	add	r1, r5, #992	; 0x3e0
   121a8:	mov	r0, r4
   121ac:	add	r2, pc, r2
   121b0:	bl	125f0 <error@@Base+0xd44>
   121b4:	ldr	r0, [r6]
   121b8:	cmp	r0, #1
   121bc:	blt	121d8 <error@@Base+0x92c>
   121c0:	ldr	r2, [pc, #96]	; 12228 <error@@Base+0x97c>
   121c4:	movw	r0, #9048	; 0x2358
   121c8:	add	r1, r5, r0
   121cc:	mov	r0, r4
   121d0:	add	r2, pc, r2
   121d4:	bl	125f0 <error@@Base+0xd44>
   121d8:	mov	r0, r4
   121dc:	sub	sp, fp, #24
   121e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   121e4:	b	1150c <__assert_fail@plt+0x7fc>
   121e8:	andeq	r0, r0, r0
   121ec:	subsmi	r0, r9, r0
   121f0:	andeq	r1, r0, r7, lsl ip
   121f4:	andeq	r1, r0, r1, lsl #24
   121f8:			; <UNDEFINED> instruction: 0x00001bb3
   121fc:	andeq	r5, r0, r4, ror #1
   12200:	andeq	r1, r0, sl, ror #23
   12204:	andeq	r1, r0, r4, ror #23
   12208:	andeq	r1, r0, r0, ror #23
   1220c:	andeq	r1, r0, r1, lsl ip
   12210:	andeq	r1, r0, lr, ror fp
   12214:	andeq	r1, r0, r7, ror #22
   12218:	andeq	r1, r0, r6, asr fp
   1221c:	andeq	r1, r0, sp, lsr #22
   12220:	andeq	r1, r0, r8, lsl fp
   12224:	ldrdeq	r1, [r0], -r7
   12228:	andeq	r1, r0, r6, asr #21
   1222c:	nop	{0}
   12230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12234:	add	fp, sp, #28
   12238:	sub	sp, sp, #4
   1223c:	vpush	{d8}
   12240:	sub	sp, sp, #8
   12244:	mov	r5, r1
   12248:	ldr	r1, [pc, #832]	; 12590 <error@@Base+0xce4>
   1224c:	mov	r8, r2
   12250:	mov	r2, r3
   12254:	mov	r4, r0
   12258:	add	r1, pc, r1
   1225c:	bl	10c8c <fprintf@plt>
   12260:	ldr	r0, [pc, #812]	; 12594 <error@@Base+0xce8>
   12264:	mov	r1, #26
   12268:	mov	r2, #1
   1226c:	mov	r3, r4
   12270:	mov	r7, #1
   12274:	add	r0, pc, r0
   12278:	bl	10bfc <fwrite@plt>
   1227c:	ldr	r0, [pc, #788]	; 12598 <error@@Base+0xcec>
   12280:	mov	r1, #3
   12284:	mov	r2, #1
   12288:	mov	r3, r4
   1228c:	add	r0, pc, r0
   12290:	bl	10bfc <fwrite@plt>
   12294:	ldrb	r1, [fp, #8]
   12298:	ldr	r0, [pc, #764]	; 1259c <error@@Base+0xcf0>
   1229c:	ldr	r2, [pc, #764]	; 125a0 <error@@Base+0xcf4>
   122a0:	str	r1, [sp]
   122a4:	cmp	r1, #0
   122a8:	add	r0, pc, r0
   122ac:	add	r2, pc, r2
   122b0:	ldr	r1, [pc, #748]	; 125a4 <error@@Base+0xcf8>
   122b4:	movne	r2, r0
   122b8:	mov	r0, r4
   122bc:	add	r1, pc, r1
   122c0:	bl	10c8c <fprintf@plt>
   122c4:	ldr	r1, [fp, #12]
   122c8:	lsl	r0, r8, #16
   122cc:	sxth	r6, r8
   122d0:	cmp	r0, #65536	; 0x10000
   122d4:	str	r1, [sp, #4]
   122d8:	blt	123c4 <error@@Base+0xb18>
   122dc:	ldr	sl, [pc, #708]	; 125a8 <error@@Base+0xcfc>
   122e0:	vldr	d8, [pc, #672]	; 12588 <error@@Base+0xcdc>
   122e4:	mov	r8, #1
   122e8:	add	sl, pc, sl
   122ec:	b	12340 <error@@Base+0xa94>
   122f0:	ldr	r0, [pc, #704]	; 125b8 <error@@Base+0xd0c>
   122f4:	mov	r1, #26
   122f8:	add	r0, pc, r0
   122fc:	mov	r2, #1
   12300:	mov	r3, r4
   12304:	bl	10bfc <fwrite@plt>
   12308:	ldr	r0, [pc, #684]	; 125bc <error@@Base+0xd10>
   1230c:	mov	r1, #3
   12310:	mov	r2, #1
   12314:	mov	r3, r4
   12318:	add	r0, pc, r0
   1231c:	bl	10bfc <fwrite@plt>
   12320:	mov	r0, r4
   12324:	mov	r1, sl
   12328:	mov	r2, r7
   1232c:	bl	10c8c <fprintf@plt>
   12330:	add	r8, r8, #1
   12334:	sxth	r7, r8
   12338:	cmp	r6, r7
   1233c:	blt	123c4 <error@@Base+0xb18>
   12340:	mov	r0, r5
   12344:	ldr	r2, [r0, r7, lsl #3]!
   12348:	cmp	r2, #1
   1234c:	blt	12330 <error@@Base+0xa84>
   12350:	cmp	r0, #0
   12354:	beq	122f0 <error@@Base+0xa44>
   12358:	add	r9, r5, r7, lsl #3
   1235c:	mov	r0, r4
   12360:	ldr	r3, [r9, #4]!
   12364:	ldr	r1, [pc, #576]	; 125ac <error@@Base+0xd00>
   12368:	add	r1, pc, r1
   1236c:	bl	10c8c <fprintf@plt>
   12370:	ldr	r0, [r5, r7, lsl #3]
   12374:	cmp	r0, #0
   12378:	beq	123b4 <error@@Base+0xb08>
   1237c:	ldr	r1, [r9]
   12380:	vmov	s2, r0
   12384:	sub	r1, r0, r1
   12388:	mov	r0, r4
   1238c:	vmov	s0, r1
   12390:	vcvt.f64.s32	d16, s0
   12394:	vcvt.f64.s32	d17, s2
   12398:	ldr	r1, [pc, #532]	; 125b4 <error@@Base+0xd08>
   1239c:	add	r1, pc, r1
   123a0:	vmul.f64	d16, d16, d8
   123a4:	vdiv.f64	d16, d16, d17
   123a8:	vmov	r2, r3, d16
   123ac:	bl	10c8c <fprintf@plt>
   123b0:	b	12308 <error@@Base+0xa5c>
   123b4:	ldr	r0, [pc, #500]	; 125b0 <error@@Base+0xd04>
   123b8:	mov	r1, #8
   123bc:	add	r0, pc, r0
   123c0:	b	122fc <error@@Base+0xa50>
   123c4:	ldr	r0, [sp]
   123c8:	cmp	r0, #0
   123cc:	beq	124a0 <error@@Base+0xbf4>
   123d0:	add	r7, r6, #1
   123d4:	mov	r0, r5
   123d8:	ldr	r2, [r0, r7, lsl #3]!
   123dc:	cmp	r2, #1
   123e0:	blt	124a0 <error@@Base+0xbf4>
   123e4:	cmp	r0, #0
   123e8:	beq	1244c <error@@Base+0xba0>
   123ec:	add	r8, r5, r7, lsl #3
   123f0:	mov	r0, r4
   123f4:	ldr	r3, [r8, #4]!
   123f8:	ldr	r1, [pc, #448]	; 125c0 <error@@Base+0xd14>
   123fc:	add	r1, pc, r1
   12400:	bl	10c8c <fprintf@plt>
   12404:	ldr	r0, [r5, r7, lsl #3]
   12408:	cmp	r0, #0
   1240c:	beq	1245c <error@@Base+0xbb0>
   12410:	ldr	r1, [r8]
   12414:	vldr	d16, [pc, #364]	; 12588 <error@@Base+0xcdc>
   12418:	vmov	s2, r0
   1241c:	sub	r1, r0, r1
   12420:	mov	r0, r4
   12424:	vmov	s0, r1
   12428:	vcvt.f64.s32	d17, s0
   1242c:	vcvt.f64.s32	d18, s2
   12430:	ldr	r1, [pc, #400]	; 125c8 <error@@Base+0xd1c>
   12434:	add	r1, pc, r1
   12438:	vmul.f64	d16, d17, d16
   1243c:	vdiv.f64	d16, d16, d18
   12440:	vmov	r2, r3, d16
   12444:	bl	10c8c <fprintf@plt>
   12448:	b	12474 <error@@Base+0xbc8>
   1244c:	ldr	r0, [pc, #376]	; 125cc <error@@Base+0xd20>
   12450:	mov	r1, #26
   12454:	add	r0, pc, r0
   12458:	b	12468 <error@@Base+0xbbc>
   1245c:	ldr	r0, [pc, #352]	; 125c4 <error@@Base+0xd18>
   12460:	mov	r1, #8
   12464:	add	r0, pc, r0
   12468:	mov	r2, #1
   1246c:	mov	r3, r4
   12470:	bl	10bfc <fwrite@plt>
   12474:	ldr	r0, [pc, #340]	; 125d0 <error@@Base+0xd24>
   12478:	mov	r1, #3
   1247c:	mov	r2, #1
   12480:	mov	r3, r4
   12484:	add	r0, pc, r0
   12488:	bl	10bfc <fwrite@plt>
   1248c:	ldr	r1, [pc, #320]	; 125d4 <error@@Base+0xd28>
   12490:	mov	r0, r4
   12494:	mov	r2, r6
   12498:	add	r1, pc, r1
   1249c:	bl	10c8c <fprintf@plt>
   124a0:	ldr	r0, [sp, #4]
   124a4:	tst	r0, #255	; 0xff
   124a8:	beq	12510 <error@@Base+0xc64>
   124ac:	cmp	r5, #0
   124b0:	beq	12520 <error@@Base+0xc74>
   124b4:	ldm	r5, {r2, r3}
   124b8:	ldr	r1, [pc, #280]	; 125d8 <error@@Base+0xd2c>
   124bc:	mov	r0, r4
   124c0:	add	r1, pc, r1
   124c4:	bl	10c8c <fprintf@plt>
   124c8:	ldr	r0, [r5]
   124cc:	cmp	r0, #0
   124d0:	beq	12530 <error@@Base+0xc84>
   124d4:	ldr	r1, [r5, #4]
   124d8:	vldr	d16, [pc, #168]	; 12588 <error@@Base+0xcdc>
   124dc:	vmov	s2, r0
   124e0:	sub	r1, r0, r1
   124e4:	mov	r0, r4
   124e8:	vmov	s0, r1
   124ec:	vcvt.f64.s32	d17, s0
   124f0:	vcvt.f64.s32	d18, s2
   124f4:	ldr	r1, [pc, #228]	; 125e0 <error@@Base+0xd34>
   124f8:	add	r1, pc, r1
   124fc:	vmul.f64	d16, d17, d16
   12500:	vdiv.f64	d16, d16, d18
   12504:	vmov	r2, r3, d16
   12508:	bl	10c8c <fprintf@plt>
   1250c:	b	12548 <error@@Base+0xc9c>
   12510:	sub	sp, fp, #40	; 0x28
   12514:	vpop	{d8}
   12518:	add	sp, sp, #4
   1251c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12520:	ldr	r0, [pc, #188]	; 125e4 <error@@Base+0xd38>
   12524:	mov	r1, #26
   12528:	add	r0, pc, r0
   1252c:	b	1253c <error@@Base+0xc90>
   12530:	ldr	r0, [pc, #164]	; 125dc <error@@Base+0xd30>
   12534:	mov	r1, #8
   12538:	add	r0, pc, r0
   1253c:	mov	r2, #1
   12540:	mov	r3, r4
   12544:	bl	10bfc <fwrite@plt>
   12548:	ldr	r0, [pc, #152]	; 125e8 <error@@Base+0xd3c>
   1254c:	mov	r1, #3
   12550:	mov	r2, #1
   12554:	mov	r3, r4
   12558:	add	r0, pc, r0
   1255c:	bl	10bfc <fwrite@plt>
   12560:	ldr	r0, [pc, #132]	; 125ec <error@@Base+0xd40>
   12564:	mov	r1, #7
   12568:	mov	r2, #1
   1256c:	mov	r3, r4
   12570:	add	r0, pc, r0
   12574:	sub	sp, fp, #40	; 0x28
   12578:	vpop	{d8}
   1257c:	add	sp, sp, #4
   12580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12584:	b	10bfc <fwrite@plt>
   12588:	andeq	r0, r0, r0
   1258c:	subsmi	r0, r9, r0
   12590:	andeq	r1, r0, r3, ror sl
   12594:	andeq	r1, r0, r7, lsl #21
   12598:	andeq	r1, r0, sl, lsl #21
   1259c:	andeq	r1, r0, r8, lsr #20
   125a0:	andeq	r1, r0, fp, lsr #20
   125a4:	andeq	r1, r0, r0, lsl sl
   125a8:	strdeq	r1, [r0], -r6
   125ac:	andeq	r1, r0, r8, lsl #19
   125b0:	andeq	r1, r0, r0, lsl #18
   125b4:	andeq	r1, r0, r9, lsr #18
   125b8:	andeq	r1, r0, r3, lsl #20
   125bc:	strdeq	r1, [r0], -lr
   125c0:	strdeq	r1, [r0], -r4
   125c4:	andeq	r1, r0, r8, asr r8
   125c8:	muleq	r0, r1, r8
   125cc:	andeq	r1, r0, r7, lsr #17
   125d0:	muleq	r0, r2, r8
   125d4:	andeq	r1, r0, pc, asr #16
   125d8:	andeq	r1, r0, r0, lsr r8
   125dc:	andeq	r1, r0, r4, lsl #15
   125e0:	andeq	r1, r0, sp, asr #15
   125e4:	ldrdeq	r1, [r0], -r3
   125e8:			; <UNDEFINED> instruction: 0x000017be
   125ec:	andeq	r1, r0, ip, lsr r7
   125f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125f4:	add	fp, sp, #28
   125f8:	sub	sp, sp, #4
   125fc:	vpush	{d8}
   12600:	mov	r5, r0
   12604:	mov	r0, r1
   12608:	mov	r6, r2
   1260c:	mov	r4, r1
   12610:	bl	11304 <__assert_fail@plt+0x5f4>
   12614:	movw	r0, #8048	; 0x1f70
   12618:	ldr	r1, [r4, r0]!
   1261c:	ldr	r0, [r4, #4]
   12620:	ldr	r2, [pc, #336]	; 12778 <error@@Base+0xecc>
   12624:	add	r2, pc, r2
   12628:	bl	1391c <error@@Base+0x2070>
   1262c:	ldr	r1, [pc, #328]	; 1277c <error@@Base+0xed0>
   12630:	mov	r0, r5
   12634:	mov	r2, r6
   12638:	add	r1, pc, r1
   1263c:	bl	10c8c <fprintf@plt>
   12640:	ldr	r0, [pc, #312]	; 12780 <error@@Base+0xed4>
   12644:	mov	r1, #26
   12648:	mov	r2, #1
   1264c:	mov	r3, r5
   12650:	add	r0, pc, r0
   12654:	bl	10bfc <fwrite@plt>
   12658:	ldr	r0, [pc, #292]	; 12784 <error@@Base+0xed8>
   1265c:	mov	r1, #3
   12660:	mov	r2, #1
   12664:	mov	r3, r5
   12668:	add	r0, pc, r0
   1266c:	bl	10bfc <fwrite@plt>
   12670:	mov	r0, #10
   12674:	mov	r1, r5
   12678:	bl	10cbc <fputc@plt>
   1267c:	ldr	r0, [r4, #4]
   12680:	cmp	r0, #1
   12684:	blt	12760 <error@@Base+0xeb4>
   12688:	ldr	r9, [pc, #248]	; 12788 <error@@Base+0xedc>
   1268c:	ldr	r7, [pc, #248]	; 1278c <error@@Base+0xee0>
   12690:	ldr	r6, [pc, #248]	; 12790 <error@@Base+0xee4>
   12694:	vldr	d8, [pc, #212]	; 12770 <error@@Base+0xec4>
   12698:	mov	r8, #0
   1269c:	add	r9, pc, r9
   126a0:	add	r7, pc, r7
   126a4:	add	r6, pc, r6
   126a8:	b	1271c <error@@Base+0xe70>
   126ac:	ldr	r1, [sl, #16]
   126b0:	vmov	s2, r0
   126b4:	sub	r1, r0, r1
   126b8:	mov	r0, r5
   126bc:	vmov	s0, r1
   126c0:	vcvt.f64.s32	d16, s0
   126c4:	vcvt.f64.s32	d17, s2
   126c8:	ldr	r1, [pc, #200]	; 12798 <error@@Base+0xeec>
   126cc:	add	r1, pc, r1
   126d0:	vmul.f64	d16, d16, d8
   126d4:	vdiv.f64	d16, d16, d17
   126d8:	vmov	r2, r3, d16
   126dc:	bl	10c8c <fprintf@plt>
   126e0:	mov	r0, r7
   126e4:	mov	r1, #3
   126e8:	mov	r2, #1
   126ec:	mov	r3, r5
   126f0:	bl	10bfc <fwrite@plt>
   126f4:	ldr	r0, [r4]
   126f8:	mov	r1, r6
   126fc:	ldr	r0, [r0, r8, lsl #2]
   12700:	ldr	r2, [r0, #8]
   12704:	mov	r0, r5
   12708:	bl	10c8c <fprintf@plt>
   1270c:	ldr	r0, [r4, #4]
   12710:	add	r8, r8, #1
   12714:	cmp	r8, r0
   12718:	bge	12760 <error@@Base+0xeb4>
   1271c:	ldr	r0, [r4]
   12720:	mov	r1, r9
   12724:	ldr	sl, [r0, r8, lsl #2]
   12728:	mov	r0, r5
   1272c:	ldr	r2, [sl, #12]
   12730:	ldr	r3, [sl, #16]
   12734:	bl	10c8c <fprintf@plt>
   12738:	ldr	r0, [sl, #12]
   1273c:	cmp	r0, #0
   12740:	bne	126ac <error@@Base+0xe00>
   12744:	ldr	r0, [pc, #72]	; 12794 <error@@Base+0xee8>
   12748:	mov	r1, #8
   1274c:	mov	r2, #1
   12750:	mov	r3, r5
   12754:	add	r0, pc, r0
   12758:	bl	10bfc <fwrite@plt>
   1275c:	b	126e0 <error@@Base+0xe34>
   12760:	vpop	{d8}
   12764:	add	sp, sp, #4
   12768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1276c:	nop	{0}
   12770:	andeq	r0, r0, r0
   12774:	subsmi	r0, r9, r0
   12778:	andeq	r0, r0, r0, ror r1
   1277c:	muleq	r0, r3, r6
   12780:	andeq	r1, r0, fp, lsr #13
   12784:	andeq	r1, r0, lr, lsr #13
   12788:	andeq	r1, r0, r4, asr r6
   1278c:	andeq	r1, r0, r6, ror r6
   12790:	andeq	r1, r0, r8, lsr #12
   12794:	andeq	r1, r0, r8, ror #10
   12798:	strdeq	r1, [r0], -r9
   1279c:	ldr	r1, [r1, #8]
   127a0:	ldr	r0, [r0, #8]
   127a4:	b	11400 <__assert_fail@plt+0x6f0>
   127a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127ac:	add	fp, sp, #28
   127b0:	sub	sp, sp, #28
   127b4:	ldr	r8, [r1]
   127b8:	str	r0, [sp, #4]
   127bc:	cmp	r8, #0
   127c0:	str	r8, [sp, #16]
   127c4:	beq	12f14 <error@@Base+0x1668>
   127c8:	ldr	sl, [pc, #1964]	; 12f7c <error@@Base+0x16d0>
   127cc:	add	r9, sp, #12
   127d0:	add	sl, pc, sl
   127d4:	mov	r0, #17
   127d8:	mov	r1, r8
   127dc:	mov	r7, r9
   127e0:	mov	ip, r0
   127e4:	mov	lr, #18
   127e8:	cmp	r7, #0
   127ec:	beq	12958 <error@@Base+0x10ac>
   127f0:	mov	r7, r1
   127f4:	ldr	r0, [r7, #12]
   127f8:	mov	r2, #0
   127fc:	movw	r1, #1092	; 0x444
   12800:	sub	r3, r1, r2
   12804:	add	r3, r2, r3, lsr #1
   12808:	add	r4, r3, r3, lsl #1
   1280c:	ldr	r5, [sl, r4, lsl #2]
   12810:	cmp	r5, r0
   12814:	bls	12828 <error@@Base+0xf7c>
   12818:	sub	r1, r3, #1
   1281c:	cmp	r1, r2
   12820:	bcs	12800 <error@@Base+0xf54>
   12824:	b	12874 <error@@Base+0xfc8>
   12828:	add	r2, sl, r4, lsl #2
   1282c:	ldr	r4, [r2, #4]
   12830:	cmp	r4, r0
   12834:	bcs	12848 <error@@Base+0xf9c>
   12838:	add	r2, r3, #1
   1283c:	cmp	r1, r2
   12840:	bcs	12800 <error@@Base+0xf54>
   12844:	b	12874 <error@@Base+0xfc8>
   12848:	ldr	r1, [r2, #8]
   1284c:	orr	r1, r1, #2
   12850:	cmp	r1, #6
   12854:	bne	12874 <error@@Base+0xfc8>
   12858:	ldr	r7, [r7, #4]
   1285c:	cmp	r7, #0
   12860:	bne	127f4 <error@@Base+0xf48>
   12864:	mov	r2, #18
   12868:	mov	r9, #18
   1286c:	mov	r7, #0
   12870:	b	12964 <error@@Base+0x10b8>
   12874:	cmp	r7, #0
   12878:	beq	12958 <error@@Base+0x10ac>
   1287c:	mov	r2, #0
   12880:	movw	r1, #1092	; 0x444
   12884:	sub	r3, r1, r2
   12888:	add	r3, r2, r3, lsr #1
   1288c:	add	r4, r3, r3, lsl #1
   12890:	ldr	r5, [sl, r4, lsl #2]
   12894:	cmp	r5, r0
   12898:	bls	128ac <error@@Base+0x1000>
   1289c:	sub	r1, r3, #1
   128a0:	cmp	r1, r2
   128a4:	bcs	12884 <error@@Base+0xfd8>
   128a8:	b	128c8 <error@@Base+0x101c>
   128ac:	add	r2, sl, r4, lsl #2
   128b0:	ldr	r4, [r2, #4]
   128b4:	cmp	r4, r0
   128b8:	bcs	12c90 <error@@Base+0x13e4>
   128bc:	add	r2, r3, #1
   128c0:	cmp	r1, r2
   128c4:	bcs	12884 <error@@Base+0xfd8>
   128c8:	mov	r9, #0
   128cc:	ldr	r6, [r7, #4]
   128d0:	cmp	r6, #0
   128d4:	beq	12adc <error@@Base+0x1230>
   128d8:	mov	r2, r6
   128dc:	str	r7, [sp, #8]
   128e0:	ldr	r0, [r2, #12]
   128e4:	mov	r4, #0
   128e8:	movw	r3, #1092	; 0x444
   128ec:	sub	r7, r3, r4
   128f0:	add	r7, r4, r7, lsr #1
   128f4:	add	r5, r7, r7, lsl #1
   128f8:	ldr	r1, [sl, r5, lsl #2]
   128fc:	cmp	r1, r0
   12900:	bls	12914 <error@@Base+0x1068>
   12904:	sub	r3, r7, #1
   12908:	cmp	r3, r4
   1290c:	bcs	128ec <error@@Base+0x1040>
   12910:	b	129ec <error@@Base+0x1140>
   12914:	add	r5, sl, r5, lsl #2
   12918:	ldr	r1, [r5, #4]
   1291c:	cmp	r1, r0
   12920:	bcs	12934 <error@@Base+0x1088>
   12924:	add	r4, r7, #1
   12928:	cmp	r3, r4
   1292c:	bcs	128ec <error@@Base+0x1040>
   12930:	b	129ec <error@@Base+0x1140>
   12934:	ldr	r1, [r5, #8]
   12938:	orr	r1, r1, #2
   1293c:	cmp	r1, #6
   12940:	bne	129ec <error@@Base+0x1140>
   12944:	ldr	r2, [r2, #4]
   12948:	cmp	r2, #0
   1294c:	bne	128e0 <error@@Base+0x1034>
   12950:	mov	r2, #18
   12954:	b	12af0 <error@@Base+0x1244>
   12958:	mov	r7, #0
   1295c:	mov	r2, #18
   12960:	mov	r9, #18
   12964:	sub	r0, r2, #1
   12968:	cmp	r0, #3
   1296c:	subcs	r0, r9, #1
   12970:	cmpcs	r0, #3
   12974:	bcc	12d64 <error@@Base+0x14b8>
   12978:	orr	r4, r2, #1
   1297c:	orr	r6, r9, #1
   12980:	cmp	r4, #9
   12984:	cmpeq	r6, #9
   12988:	beq	129e4 <error@@Base+0x1138>
   1298c:	cmp	r6, #9
   12990:	bne	129b8 <error@@Base+0x110c>
   12994:	cmp	r2, #13
   12998:	bhi	129b8 <error@@Base+0x110c>
   1299c:	mov	r0, #1
   129a0:	mov	r1, #13312	; 0x3400
   129a4:	tst	r1, r0, lsl r2
   129a8:	beq	129b8 <error@@Base+0x110c>
   129ac:	orr	r0, lr, #1
   129b0:	cmp	r0, #9
   129b4:	beq	129e4 <error@@Base+0x1138>
   129b8:	orr	r0, ip, #1
   129bc:	cmp	r0, #9
   129c0:	bne	12a48 <error@@Base+0x119c>
   129c4:	cmp	r9, #13
   129c8:	bhi	12a48 <error@@Base+0x119c>
   129cc:	mov	r0, #1
   129d0:	mov	r1, #13312	; 0x3400
   129d4:	tst	r1, r0, lsl r9
   129d8:	beq	12a48 <error@@Base+0x119c>
   129dc:	cmp	r4, #9
   129e0:	bne	12a48 <error@@Base+0x119c>
   129e4:	mov	r0, r9
   129e8:	b	12c64 <error@@Base+0x13b8>
   129ec:	cmp	r2, #0
   129f0:	beq	12aec <error@@Base+0x1240>
   129f4:	mov	r3, #0
   129f8:	movw	r2, #1092	; 0x444
   129fc:	sub	r1, r2, r3
   12a00:	add	r7, r3, r1, lsr #1
   12a04:	add	r5, r7, r7, lsl #1
   12a08:	ldr	r1, [sl, r5, lsl #2]
   12a0c:	cmp	r1, r0
   12a10:	bls	12a24 <error@@Base+0x1178>
   12a14:	sub	r2, r7, #1
   12a18:	cmp	r2, r3
   12a1c:	bcs	129fc <error@@Base+0x1150>
   12a20:	b	12ae4 <error@@Base+0x1238>
   12a24:	add	r3, sl, r5, lsl #2
   12a28:	ldr	r1, [r3, #4]
   12a2c:	cmp	r1, r0
   12a30:	bcs	12c98 <error@@Base+0x13ec>
   12a34:	add	r3, r7, #1
   12a38:	cmp	r2, r3
   12a3c:	bcs	129fc <error@@Base+0x1150>
   12a40:	mov	r2, #0
   12a44:	b	12af0 <error@@Base+0x1244>
   12a48:	cmp	r2, #10
   12a4c:	mov	r0, #8
   12a50:	cmpeq	r9, #8
   12a54:	beq	12c64 <error@@Base+0x13b8>
   12a58:	cmp	lr, #8
   12a5c:	cmpeq	r2, #11
   12a60:	beq	12c74 <error@@Base+0x13c8>
   12a64:	cmp	r2, #8
   12a68:	cmpeq	ip, #8
   12a6c:	beq	12c80 <error@@Base+0x13d4>
   12a70:	cmp	r2, #15
   12a74:	mov	r0, #15
   12a78:	cmpeq	r9, #15
   12a7c:	beq	12c64 <error@@Base+0x13b8>
   12a80:	cmp	r2, #15
   12a84:	cmpeq	r6, #9
   12a88:	beq	129e4 <error@@Base+0x1138>
   12a8c:	cmp	r9, #15
   12a90:	cmpeq	r4, #9
   12a94:	beq	12c64 <error@@Base+0x13b8>
   12a98:	cmp	ip, #15
   12a9c:	cmpeq	r2, #15
   12aa0:	beq	12d18 <error@@Base+0x146c>
   12aa4:	cmp	r9, #15
   12aa8:	bne	12ca0 <error@@Base+0x13f4>
   12aac:	cmp	lr, #15
   12ab0:	bne	12cb0 <error@@Base+0x1404>
   12ab4:	orr	r3, r2, #2
   12ab8:	sub	r1, r2, #10
   12abc:	sub	r3, r3, #14
   12ac0:	clz	r1, r1
   12ac4:	clz	r3, r3
   12ac8:	lsr	r1, r1, #5
   12acc:	lsr	r3, r3, #5
   12ad0:	orrs	r1, r1, r3
   12ad4:	bne	12c64 <error@@Base+0x13b8>
   12ad8:	b	12cb0 <error@@Base+0x1404>
   12adc:	mov	r2, #18
   12ae0:	b	12964 <error@@Base+0x10b8>
   12ae4:	mov	r2, #0
   12ae8:	b	12af0 <error@@Base+0x1244>
   12aec:	mov	r2, #18
   12af0:	ldr	r0, [r6, #12]
   12af4:	mov	r4, #0
   12af8:	movw	r3, #1092	; 0x444
   12afc:	sub	r1, r3, r4
   12b00:	add	r7, r4, r1, lsr #1
   12b04:	add	r5, r7, r7, lsl #1
   12b08:	ldr	r1, [sl, r5, lsl #2]
   12b0c:	cmp	r1, r0
   12b10:	bls	12b24 <error@@Base+0x1278>
   12b14:	sub	r3, r7, #1
   12b18:	cmp	r3, r4
   12b1c:	bcs	12afc <error@@Base+0x1250>
   12b20:	b	12b70 <error@@Base+0x12c4>
   12b24:	add	r5, sl, r5, lsl #2
   12b28:	ldr	r1, [r5, #4]
   12b2c:	cmp	r1, r0
   12b30:	bcs	12b44 <error@@Base+0x1298>
   12b34:	add	r4, r7, #1
   12b38:	cmp	r3, r4
   12b3c:	bcs	12afc <error@@Base+0x1250>
   12b40:	b	12b70 <error@@Base+0x12c4>
   12b44:	ldr	r0, [r5, #8]
   12b48:	orr	r0, r0, #2
   12b4c:	cmp	r0, #6
   12b50:	bne	12b70 <error@@Base+0x12c4>
   12b54:	ldr	r6, [r6, #4]
   12b58:	cmp	r6, #0
   12b5c:	bne	12af0 <error@@Base+0x1244>
   12b60:	mov	lr, #18
   12b64:	cmp	r9, #1
   12b68:	beq	12c54 <error@@Base+0x13a8>
   12b6c:	b	12d4c <error@@Base+0x14a0>
   12b70:	mov	lr, #18
   12b74:	cmp	r6, #0
   12b78:	beq	12c4c <error@@Base+0x13a0>
   12b7c:	ldr	r6, [r6, #4]
   12b80:	cmp	r6, #0
   12b84:	beq	12c4c <error@@Base+0x13a0>
   12b88:	ldr	r0, [r6, #12]
   12b8c:	mov	r3, #0
   12b90:	movw	r4, #1092	; 0x444
   12b94:	sub	r1, r4, r3
   12b98:	add	r7, r3, r1, lsr #1
   12b9c:	add	r5, r7, r7, lsl #1
   12ba0:	ldr	r1, [sl, r5, lsl #2]
   12ba4:	cmp	r1, r0
   12ba8:	bls	12bbc <error@@Base+0x1310>
   12bac:	sub	r4, r7, #1
   12bb0:	cmp	r4, r3
   12bb4:	bcs	12b94 <error@@Base+0x12e8>
   12bb8:	b	12bec <error@@Base+0x1340>
   12bbc:	add	r3, sl, r5, lsl #2
   12bc0:	ldr	r1, [r3, #4]
   12bc4:	cmp	r1, r0
   12bc8:	bcs	12bdc <error@@Base+0x1330>
   12bcc:	add	r3, r7, #1
   12bd0:	cmp	r4, r3
   12bd4:	bcs	12b94 <error@@Base+0x12e8>
   12bd8:	b	12bec <error@@Base+0x1340>
   12bdc:	ldr	r1, [r3, #8]
   12be0:	orr	r1, r1, #2
   12be4:	cmp	r1, #6
   12be8:	beq	12b7c <error@@Base+0x12d0>
   12bec:	cmp	r6, #0
   12bf0:	beq	12c4c <error@@Base+0x13a0>
   12bf4:	mov	r4, #0
   12bf8:	movw	r6, #1092	; 0x444
   12bfc:	sub	r1, r6, r4
   12c00:	add	r3, r4, r1, lsr #1
   12c04:	add	r7, r3, r3, lsl #1
   12c08:	ldr	r1, [sl, r7, lsl #2]
   12c0c:	cmp	r1, r0
   12c10:	bls	12c24 <error@@Base+0x1378>
   12c14:	sub	r6, r3, #1
   12c18:	cmp	r6, r4
   12c1c:	bcs	12bfc <error@@Base+0x1350>
   12c20:	b	12c48 <error@@Base+0x139c>
   12c24:	add	r7, sl, r7, lsl #2
   12c28:	ldr	r1, [r7, #4]
   12c2c:	cmp	r1, r0
   12c30:	bcs	12d40 <error@@Base+0x1494>
   12c34:	add	r4, r3, #1
   12c38:	mov	lr, #0
   12c3c:	cmp	r6, r4
   12c40:	bcs	12bfc <error@@Base+0x1350>
   12c44:	b	12c4c <error@@Base+0x13a0>
   12c48:	mov	lr, #0
   12c4c:	cmp	r9, #1
   12c50:	bne	12d4c <error@@Base+0x14a0>
   12c54:	ldr	r7, [sp, #8]
   12c58:	mov	r0, #1
   12c5c:	cmp	r2, #2
   12c60:	bne	12964 <error@@Base+0x10b8>
   12c64:	ldr	r1, [r7, #4]
   12c68:	cmp	r1, #0
   12c6c:	bne	127e0 <error@@Base+0xf34>
   12c70:	b	12d64 <error@@Base+0x14b8>
   12c74:	cmp	r9, #8
   12c78:	beq	12c64 <error@@Base+0x13b8>
   12c7c:	b	12a64 <error@@Base+0x11b8>
   12c80:	mov	r0, #11
   12c84:	cmp	r9, #11
   12c88:	beq	12c64 <error@@Base+0x13b8>
   12c8c:	b	12a70 <error@@Base+0x11c4>
   12c90:	ldr	r9, [r2, #8]
   12c94:	b	128cc <error@@Base+0x1020>
   12c98:	ldr	r2, [r3, #8]
   12c9c:	b	12af0 <error@@Base+0x1244>
   12ca0:	cmp	r2, #7
   12ca4:	moveq	r0, #7
   12ca8:	cmpeq	r9, #7
   12cac:	beq	12c64 <error@@Base+0x13b8>
   12cb0:	cmp	r2, #16
   12cb4:	bne	12cec <error@@Base+0x1440>
   12cb8:	orr	r1, r9, #8
   12cbc:	sub	r0, r6, #9
   12cc0:	sub	r1, r1, #15
   12cc4:	clz	r0, r0
   12cc8:	clz	r1, r1
   12ccc:	lsr	r0, r0, #5
   12cd0:	lsr	r1, r1, #5
   12cd4:	orr	r0, r1, r0
   12cd8:	sub	r1, r9, #16
   12cdc:	clz	r1, r1
   12ce0:	lsr	r1, r1, #5
   12ce4:	orrs	r0, r1, r0
   12ce8:	bne	129e4 <error@@Base+0x1138>
   12cec:	cmp	r9, #16
   12cf0:	bne	12d54 <error@@Base+0x14a8>
   12cf4:	cmp	r2, #16
   12cf8:	bhi	12d64 <error@@Base+0x14b8>
   12cfc:	movw	r3, #33664	; 0x8380
   12d00:	mov	r1, #1
   12d04:	mov	r0, #16
   12d08:	movt	r3, #1
   12d0c:	tst	r3, r1, lsl r2
   12d10:	bne	12c64 <error@@Base+0x13b8>
   12d14:	b	12d64 <error@@Base+0x14b8>
   12d18:	orr	r3, r9, #2
   12d1c:	sub	r1, r9, #10
   12d20:	sub	r3, r3, #14
   12d24:	clz	r1, r1
   12d28:	clz	r3, r3
   12d2c:	lsr	r1, r1, #5
   12d30:	lsr	r3, r3, #5
   12d34:	orrs	r1, r1, r3
   12d38:	bne	129e4 <error@@Base+0x1138>
   12d3c:	b	12aa4 <error@@Base+0x11f8>
   12d40:	ldr	lr, [r7, #8]
   12d44:	cmp	r9, #1
   12d48:	beq	12c54 <error@@Base+0x13a8>
   12d4c:	ldr	r7, [sp, #8]
   12d50:	b	12964 <error@@Base+0x10b8>
   12d54:	cmp	r2, #5
   12d58:	moveq	r0, #5
   12d5c:	cmpeq	r9, #5
   12d60:	beq	12c64 <error@@Base+0x13b8>
   12d64:	cmp	r7, #0
   12d68:	add	r9, sp, #12
   12d6c:	beq	12f14 <error@@Base+0x1668>
   12d70:	ldr	r1, [r7, #4]
   12d74:	cmp	r1, #0
   12d78:	beq	12e08 <error@@Base+0x155c>
   12d7c:	mov	r0, r1
   12d80:	ldr	r1, [r1, #12]
   12d84:	mov	r4, r7
   12d88:	mov	r3, #0
   12d8c:	movw	r2, #1092	; 0x444
   12d90:	sub	r7, r2, r3
   12d94:	add	r7, r3, r7, lsr #1
   12d98:	add	r6, r7, r7, lsl #1
   12d9c:	ldr	r5, [sl, r6, lsl #2]
   12da0:	cmp	r5, r1
   12da4:	bls	12db8 <error@@Base+0x150c>
   12da8:	sub	r2, r7, #1
   12dac:	cmp	r2, r3
   12db0:	bcs	12d90 <error@@Base+0x14e4>
   12db4:	b	12dfc <error@@Base+0x1550>
   12db8:	add	r3, sl, r6, lsl #2
   12dbc:	ldr	r6, [r3, #4]
   12dc0:	cmp	r6, r1
   12dc4:	bcs	12dd8 <error@@Base+0x152c>
   12dc8:	add	r3, r7, #1
   12dcc:	cmp	r2, r3
   12dd0:	bcs	12d90 <error@@Base+0x14e4>
   12dd4:	b	12dfc <error@@Base+0x1550>
   12dd8:	ldr	r1, [r3, #8]
   12ddc:	orr	r1, r1, #2
   12de0:	cmp	r1, #6
   12de4:	bne	12dfc <error@@Base+0x1550>
   12de8:	ldr	r1, [r0, #4]
   12dec:	mov	r7, r0
   12df0:	cmp	r1, #0
   12df4:	bne	12d7c <error@@Base+0x14d0>
   12df8:	b	12e0c <error@@Base+0x1560>
   12dfc:	cmp	r4, #0
   12e00:	bne	12e10 <error@@Base+0x1564>
   12e04:	b	12f14 <error@@Base+0x1668>
   12e08:	mov	r0, r7
   12e0c:	mov	r4, r0
   12e10:	ldr	r0, [r8, #12]
   12e14:	bl	10b9c <utf8proc_get_property@plt>
   12e18:	ldrsh	r0, [r0]
   12e1c:	sub	r1, r0, #1
   12e20:	cmp	r1, #12
   12e24:	bcs	12f08 <error@@Base+0x165c>
   12e28:	mov	r5, r4
   12e2c:	ldr	r4, [r4, #4]
   12e30:	cmp	r4, r8
   12e34:	beq	12ea4 <error@@Base+0x15f8>
   12e38:	mov	r6, #0
   12e3c:	mov	r7, r8
   12e40:	cmp	r7, #0
   12e44:	beq	12f1c <error@@Base+0x1670>
   12e48:	ldr	r0, [r7, #12]
   12e4c:	mov	r1, r9
   12e50:	bl	10bb4 <utf8proc_encode_char@plt>
   12e54:	cmp	r0, #0
   12e58:	beq	12f3c <error@@Base+0x1690>
   12e5c:	ldr	r7, [r7, #4]
   12e60:	add	r6, r0, r6
   12e64:	cmp	r7, r4
   12e68:	bne	12e40 <error@@Base+0x1594>
   12e6c:	add	r0, r6, #1
   12e70:	bl	10c20 <malloc@plt>
   12e74:	mov	r6, r0
   12e78:	mov	r9, #0
   12e7c:	cmp	r8, #0
   12e80:	beq	12f5c <error@@Base+0x16b0>
   12e84:	ldr	r0, [r8, #12]
   12e88:	add	r1, r6, r9
   12e8c:	bl	10bb4 <utf8proc_encode_char@plt>
   12e90:	ldr	r8, [r8, #4]
   12e94:	add	r9, r0, r9
   12e98:	cmp	r8, r4
   12e9c:	bne	12e7c <error@@Base+0x15d0>
   12ea0:	b	12eb4 <error@@Base+0x1608>
   12ea4:	mov	r0, #1
   12ea8:	bl	10c20 <malloc@plt>
   12eac:	mov	r6, r0
   12eb0:	mov	r9, #0
   12eb4:	mov	r0, #0
   12eb8:	mov	r1, #12
   12ebc:	strb	r0, [r6, r9]
   12ec0:	mov	r0, #1
   12ec4:	bl	113dc <__assert_fail@plt+0x6cc>
   12ec8:	mov	r7, r0
   12ecc:	mov	r0, r6
   12ed0:	bl	10cb0 <utf8proc_NFC@plt>
   12ed4:	str	r0, [r7, #8]
   12ed8:	ldr	r0, [sp, #4]
   12edc:	mov	r1, r7
   12ee0:	bl	136c0 <error@@Base+0x1e14>
   12ee4:	mov	r0, r6
   12ee8:	bl	10b90 <free@plt>
   12eec:	add	r9, sp, #12
   12ef0:	mov	r4, r5
   12ef4:	ldr	r8, [r4, #4]
   12ef8:	cmp	r8, #0
   12efc:	str	r8, [sp, #16]
   12f00:	bne	127d4 <error@@Base+0xf28>
   12f04:	b	12f14 <error@@Base+0x1668>
   12f08:	cmp	r0, #29
   12f0c:	beq	12e28 <error@@Base+0x157c>
   12f10:	b	12ef4 <error@@Base+0x1648>
   12f14:	sub	sp, fp, #28
   12f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f1c:	ldr	r0, [pc, #92]	; 12f80 <error@@Base+0x16d4>
   12f20:	ldr	r1, [pc, #92]	; 12f84 <error@@Base+0x16d8>
   12f24:	ldr	r3, [pc, #92]	; 12f88 <error@@Base+0x16dc>
   12f28:	mov	r2, #249	; 0xf9
   12f2c:	add	r0, pc, r0
   12f30:	add	r1, pc, r1
   12f34:	add	r3, pc, r3
   12f38:	bl	10d10 <__assert_fail@plt>
   12f3c:	ldr	r0, [pc, #72]	; 12f8c <error@@Base+0x16e0>
   12f40:	ldr	r1, [pc, #72]	; 12f90 <error@@Base+0x16e4>
   12f44:	ldr	r3, [pc, #72]	; 12f94 <error@@Base+0x16e8>
   12f48:	mov	r2, #253	; 0xfd
   12f4c:	add	r0, pc, r0
   12f50:	add	r1, pc, r1
   12f54:	add	r3, pc, r3
   12f58:	bl	10d10 <__assert_fail@plt>
   12f5c:	ldr	r0, [pc, #52]	; 12f98 <error@@Base+0x16ec>
   12f60:	ldr	r1, [pc, #52]	; 12f9c <error@@Base+0x16f0>
   12f64:	ldr	r3, [pc, #52]	; 12fa0 <error@@Base+0x16f4>
   12f68:	movw	r2, #269	; 0x10d
   12f6c:	add	r0, pc, r0
   12f70:	add	r1, pc, r1
   12f74:	add	r3, pc, r3
   12f78:	bl	10d10 <__assert_fail@plt>
   12f7c:	andeq	r1, r0, ip, asr #10
   12f80:	andeq	r4, r0, r3, lsr r1
   12f84:	andeq	r4, r0, r8, lsr #2
   12f88:	andeq	r4, r0, fp, lsr r1
   12f8c:	andeq	r4, r0, sp, lsr r1
   12f90:	andeq	r4, r0, r8, lsl #2
   12f94:	andeq	r4, r0, fp, lsl r1
   12f98:	strdeq	r4, [r0], -r3
   12f9c:	andeq	r4, r0, r8, ror #1
   12fa0:	andeq	r4, r0, r8, lsr #2
   12fa4:	push	{r4, sl, fp, lr}
   12fa8:	add	fp, sp, #8
   12fac:	mov	r4, r0
   12fb0:	ldr	r0, [r0, #8]
   12fb4:	bl	10b90 <free@plt>
   12fb8:	mov	r0, r4
   12fbc:	pop	{r4, sl, fp, lr}
   12fc0:	b	10b90 <free@plt>
   12fc4:	push	{r4, r5, r6, sl, fp, lr}
   12fc8:	add	fp, sp, #16
   12fcc:	mov	r5, r1
   12fd0:	mov	r6, r0
   12fd4:	mov	r0, #1
   12fd8:	mov	r1, #16
   12fdc:	mov	r4, r2
   12fe0:	bl	113dc <__assert_fail@plt+0x6cc>
   12fe4:	str	r4, [r0, #12]
   12fe8:	mov	r1, r0
   12fec:	strb	r5, [r0, #8]
   12ff0:	mov	r0, r6
   12ff4:	pop	{r4, r5, r6, sl, fp, lr}
   12ff8:	b	136c0 <error@@Base+0x1e14>
   12ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13000:	add	fp, sp, #28
   13004:	sub	sp, sp, #124	; 0x7c
   13008:	mov	r4, r2
   1300c:	mov	r2, r1
   13010:	cmp	r1, #0
   13014:	str	r0, [sp, #16]
   13018:	bne	13028 <error@@Base+0x177c>
   1301c:	ldrb	r0, [r4]
   13020:	cmp	r0, #0
   13024:	bne	13368 <error@@Base+0x1abc>
   13028:	ldr	r0, [sp, #16]
   1302c:	ldr	r0, [r0, #4]
   13030:	str	r0, [sp, #4]
   13034:	mov	r0, r2
   13038:	ldr	r1, [pc, #828]	; 1337c <error@@Base+0x1ad0>
   1303c:	add	r1, pc, r1
   13040:	bl	11484 <__assert_fail@plt+0x774>
   13044:	mov	r6, r0
   13048:	ldrb	r0, [r4]
   1304c:	cmp	r0, #0
   13050:	beq	13098 <error@@Base+0x17ec>
   13054:	add	r0, sp, #20
   13058:	mov	r1, #99	; 0x63
   1305c:	mov	r2, r6
   13060:	bl	10ba8 <fgets@plt>
   13064:	cmp	r0, #0
   13068:	beq	13088 <error@@Base+0x17dc>
   1306c:	ldr	r1, [pc, #780]	; 13380 <error@@Base+0x1ad4>
   13070:	add	r0, sp, #20
   13074:	mov	r2, #51	; 0x33
   13078:	add	r1, pc, r1
   1307c:	bl	10c68 <bcmp@plt>
   13080:	cmp	r0, #0
   13084:	beq	132f4 <error@@Base+0x1a48>
   13088:	mov	r0, r6
   1308c:	bl	10bcc <rewind@plt>
   13090:	mov	r5, #0
   13094:	strb	r5, [r4, #11]
   13098:	ldr	r9, [r4, #4]
   1309c:	ldrb	r8, [r4, #1]
   130a0:	mov	r0, r6
   130a4:	str	r4, [sp, #8]
   130a8:	cmp	r9, #0
   130ac:	movweq	r9, #94	; 0x5e
   130b0:	bl	10d04 <getc@plt>
   130b4:	cmn	r0, #1
   130b8:	beq	13184 <error@@Base+0x18d8>
   130bc:	add	r1, sp, #20
   130c0:	mov	sl, #0
   130c4:	sub	r4, fp, #32
   130c8:	add	r1, r1, #1
   130cc:	str	r1, [sp, #12]
   130d0:	b	1310c <error@@Base+0x1860>
   130d4:	mov	r0, #1
   130d8:	mov	r1, #16
   130dc:	bl	113dc <__assert_fail@plt+0x6cc>
   130e0:	str	r5, [r0, #12]
   130e4:	mov	r1, r0
   130e8:	strb	sl, [r0, #8]
   130ec:	ldr	r0, [sp, #16]
   130f0:	bl	136c0 <error@@Base+0x1e14>
   130f4:	mov	r7, #0
   130f8:	mov	r0, r6
   130fc:	bl	10d04 <getc@plt>
   13100:	cmn	r0, #1
   13104:	mov	sl, r7
   13108:	beq	13184 <error@@Base+0x18d8>
   1310c:	ldr	r1, [pc, #628]	; 13388 <error@@Base+0x1adc>
   13110:	ldr	r1, [pc, r1]
   13114:	add	r1, r1, r0
   13118:	ldrsb	r5, [r1]
   1311c:	cmp	r5, #0
   13120:	ble	13348 <error@@Base+0x1a9c>
   13124:	cmp	r5, #1
   13128:	strb	r0, [sp, #20]
   1312c:	beq	13150 <error@@Base+0x18a4>
   13130:	ldr	r0, [sp, #12]
   13134:	sub	r7, r5, #1
   13138:	mov	r1, #1
   1313c:	mov	r3, r6
   13140:	mov	r2, r7
   13144:	bl	10c08 <fread@plt>
   13148:	cmp	r0, r7
   1314c:	bne	1335c <error@@Base+0x1ab0>
   13150:	add	r0, sp, #20
   13154:	mov	r1, #4
   13158:	mov	r2, r4
   1315c:	bl	10c14 <utf8proc_iterate@plt>
   13160:	cmp	r0, r5
   13164:	bne	13354 <error@@Base+0x1aa8>
   13168:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1316c:	cmp	r8, #0
   13170:	beq	130d4 <error@@Base+0x1828>
   13174:	mov	r7, #1
   13178:	cmp	r5, r9
   1317c:	beq	130f8 <error@@Base+0x184c>
   13180:	b	130d4 <error@@Base+0x1828>
   13184:	mov	r0, r6
   13188:	bl	1150c <__assert_fail@plt+0x7fc>
   1318c:	ldr	r8, [sp, #8]
   13190:	ldr	r9, [sp, #4]
   13194:	ldrb	r0, [r8, #9]
   13198:	cmp	r0, #0
   1319c:	beq	132b0 <error@@Base+0x1a04>
   131a0:	cmp	r9, #0
   131a4:	ldr	r0, [sp, #16]
   131a8:	addne	r0, r9, #4
   131ac:	ldr	r6, [r0]
   131b0:	cmp	r6, #0
   131b4:	beq	132b0 <error@@Base+0x1a04>
   131b8:	mov	r5, #32
   131bc:	mov	r7, r6
   131c0:	b	131d4 <error@@Base+0x1928>
   131c4:	str	r5, [r7, #12]
   131c8:	ldr	r7, [r7, #4]
   131cc:	cmp	r7, #0
   131d0:	beq	13224 <error@@Base+0x1978>
   131d4:	ldr	r4, [r7, #12]
   131d8:	mov	r0, r4
   131dc:	bl	10b9c <utf8proc_get_property@plt>
   131e0:	cmp	r4, #10
   131e4:	ble	13200 <error@@Base+0x1954>
   131e8:	sub	r1, r4, #11
   131ec:	cmp	r1, #3
   131f0:	bcc	131c4 <error@@Base+0x1918>
   131f4:	cmp	r4, #160	; 0xa0
   131f8:	beq	131c4 <error@@Base+0x1918>
   131fc:	b	13210 <error@@Base+0x1964>
   13200:	cmp	r4, #9
   13204:	beq	131c4 <error@@Base+0x1918>
   13208:	cmp	r4, #10
   1320c:	beq	131c8 <error@@Base+0x191c>
   13210:	ldrsh	r0, [r0]
   13214:	sub	r0, r0, #23
   13218:	cmp	r0, #2
   1321c:	strls	r5, [r7, #12]
   13220:	b	131c8 <error@@Base+0x191c>
   13224:	mov	r4, #0
   13228:	b	13258 <error@@Base+0x19ac>
   1322c:	tst	r4, #255	; 0xff
   13230:	cmpne	r5, #0
   13234:	bne	13284 <error@@Base+0x19d8>
   13238:	ldr	r0, [sp, #16]
   1323c:	mov	r1, r6
   13240:	bl	137b8 <error@@Base+0x1f0c>
   13244:	mov	r0, r6
   13248:	bl	10b90 <free@plt>
   1324c:	cmp	r5, #0
   13250:	mov	r6, r5
   13254:	beq	132b0 <error@@Base+0x1a04>
   13258:	ldr	r1, [r6, #12]
   1325c:	ldr	r5, [r6, #4]
   13260:	cmp	r1, #32
   13264:	beq	1322c <error@@Base+0x1980>
   13268:	subs	r0, r1, #10
   1326c:	movwne	r0, #1
   13270:	tst	r4, #255	; 0xff
   13274:	cmpeq	r1, #10
   13278:	beq	13238 <error@@Base+0x198c>
   1327c:	mov	r4, r0
   13280:	b	1324c <error@@Base+0x19a0>
   13284:	ldr	r1, [r5, #12]
   13288:	cmp	r1, #10
   1328c:	beq	13238 <error@@Base+0x198c>
   13290:	mov	r0, #1
   13294:	cmp	r1, #32
   13298:	bne	1327c <error@@Base+0x19d0>
   1329c:	ldrb	r0, [r6, #8]
   132a0:	ldrb	r1, [r5, #8]
   132a4:	orr	r0, r1, r0
   132a8:	strb	r0, [r5, #8]
   132ac:	b	13238 <error@@Base+0x198c>
   132b0:	ldrb	r0, [r8, #10]
   132b4:	cmp	r0, #0
   132b8:	beq	132ec <error@@Base+0x1a40>
   132bc:	cmp	r9, #0
   132c0:	ldr	r0, [sp, #16]
   132c4:	addne	r0, r9, #4
   132c8:	ldr	r4, [r0]
   132cc:	cmp	r4, #0
   132d0:	beq	132ec <error@@Base+0x1a40>
   132d4:	ldr	r0, [r4, #12]
   132d8:	bl	10be4 <utf8proc_tolower@plt>
   132dc:	str	r0, [r4, #12]
   132e0:	ldr	r4, [r4, #4]
   132e4:	cmp	r4, #0
   132e8:	bne	132d4 <error@@Base+0x1a28>
   132ec:	sub	sp, fp, #28
   132f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f4:	ldr	r8, [pc, #136]	; 13384 <error@@Base+0x1ad8>
   132f8:	mov	r7, #0
   132fc:	add	r9, sp, #20
   13300:	mov	r5, #1
   13304:	add	r8, pc, r8
   13308:	mov	r0, r9
   1330c:	mov	r1, #99	; 0x63
   13310:	mov	r2, r6
   13314:	bl	10ba8 <fgets@plt>
   13318:	cmp	r0, #0
   1331c:	beq	13094 <error@@Base+0x17e8>
   13320:	mov	r0, r9
   13324:	mov	r1, r8
   13328:	mov	r2, #56	; 0x38
   1332c:	bl	10c68 <bcmp@plt>
   13330:	cmp	r0, #0
   13334:	addeq	r7, r7, #1
   13338:	uxth	r0, r7
   1333c:	cmp	r0, #2
   13340:	bcc	13308 <error@@Base+0x1a5c>
   13344:	b	13094 <error@@Base+0x17e8>
   13348:	ldr	r0, [pc, #68]	; 13394 <error@@Base+0x1ae8>
   1334c:	add	r0, pc, r0
   13350:	bl	118ac <error@@Base>
   13354:	bl	10cd4 <utf8proc_errmsg@plt>
   13358:	bl	118ac <error@@Base>
   1335c:	ldr	r0, [pc, #52]	; 13398 <error@@Base+0x1aec>
   13360:	add	r0, pc, r0
   13364:	bl	118ac <error@@Base>
   13368:	ldr	r0, [pc, #28]	; 1338c <error@@Base+0x1ae0>
   1336c:	ldr	r1, [pc, #28]	; 13390 <error@@Base+0x1ae4>
   13370:	add	r0, pc, r0
   13374:	add	r1, pc, r1
   13378:	bl	118fc <error@@Base+0x50>
   1337c:	andeq	r4, r0, r2, asr #2
   13380:	andeq	r4, r0, r0, lsl #1
   13384:	andeq	r3, r0, ip, lsr #28
   13388:			; <UNDEFINED> instruction: 0x00014fb8
   1338c:	andeq	r3, r0, r4, asr #26
   13390:	andeq	r3, r0, r0, asr sp
   13394:	andeq	r3, r0, ip, lsl lr
   13398:	andeq	r3, r0, r0, lsr #28
   1339c:	push	{fp, lr}
   133a0:	mov	fp, sp
   133a4:	bl	10bb4 <utf8proc_encode_char@plt>
   133a8:	cmp	r0, #0
   133ac:	sxtbgt	r0, r0
   133b0:	popgt	{fp, pc}
   133b4:	ldr	r0, [pc, #4]	; 133c0 <error@@Base+0x1b14>
   133b8:	add	r0, pc, r0
   133bc:	bl	118ac <error@@Base>
   133c0:	andeq	r3, r0, r6, lsl sp
   133c4:	push	{r4, r5, r6, r7, fp, lr}
   133c8:	add	fp, sp, #16
   133cc:	mov	r6, r3
   133d0:	mov	r4, r2
   133d4:	mov	r5, r1
   133d8:	tst	r0, #255	; 0xff
   133dc:	beq	13424 <error@@Base+0x1b78>
   133e0:	mov	r0, #94	; 0x5e
   133e4:	mov	r1, r4
   133e8:	bl	10bb4 <utf8proc_encode_char@plt>
   133ec:	cmp	r0, #0
   133f0:	ble	1349c <error@@Base+0x1bf0>
   133f4:	sxtb	r7, r0
   133f8:	cmp	r5, #10
   133fc:	bne	13430 <error@@Base+0x1b84>
   13400:	ldr	r0, [pc, #224]	; 134e8 <error@@Base+0x1c3c>
   13404:	ldr	r1, [pc, #224]	; 134ec <error@@Base+0x1c40>
   13408:	tst	r6, #255	; 0xff
   1340c:	add	r0, pc, r0
   13410:	add	r1, pc, r1
   13414:	moveq	r1, r0
   13418:	add	r0, r4, r7
   1341c:	pop	{r4, r5, r6, r7, fp, lr}
   13420:	b	10cc8 <sprintf@plt>
   13424:	mov	r7, #0
   13428:	cmp	r5, #10
   1342c:	beq	13400 <error@@Base+0x1b54>
   13430:	mov	r0, r5
   13434:	bl	10b9c <utf8proc_get_property@plt>
   13438:	cmp	r5, #32
   1343c:	beq	13450 <error@@Base+0x1ba4>
   13440:	ldrsh	r0, [r0]
   13444:	sub	r1, r0, #1
   13448:	cmp	r1, #22
   1344c:	bcs	134a8 <error@@Base+0x1bfc>
   13450:	mov	r0, r5
   13454:	bl	10c74 <utf8proc_category@plt>
   13458:	sub	r0, r0, #6
   1345c:	cmp	r0, #2
   13460:	bhi	1347c <error@@Base+0x1bd0>
   13464:	add	r1, r4, r7
   13468:	movw	r0, #9676	; 0x25cc
   1346c:	bl	10bb4 <utf8proc_encode_char@plt>
   13470:	cmp	r0, #0
   13474:	ble	1349c <error@@Base+0x1bf0>
   13478:	sxtab	r7, r7, r0
   1347c:	add	r1, r4, r7
   13480:	mov	r0, r5
   13484:	bl	10bb4 <utf8proc_encode_char@plt>
   13488:	cmp	r0, #0
   1348c:	sxtabgt	r0, r7, r0
   13490:	movgt	r1, #0
   13494:	strbgt	r1, [r4, r0]
   13498:	popgt	{r4, r5, r6, r7, fp, pc}
   1349c:	ldr	r0, [pc, #64]	; 134e4 <error@@Base+0x1c38>
   134a0:	add	r0, pc, r0
   134a4:	bl	118ac <error@@Base>
   134a8:	cmp	r0, #29
   134ac:	beq	13450 <error@@Base+0x1ba4>
   134b0:	add	r0, r4, r7
   134b4:	cmp	r5, #255	; 0xff
   134b8:	bhi	134c8 <error@@Base+0x1c1c>
   134bc:	ldr	r1, [pc, #24]	; 134dc <error@@Base+0x1c30>
   134c0:	add	r1, pc, r1
   134c4:	b	134d0 <error@@Base+0x1c24>
   134c8:	ldr	r1, [pc, #16]	; 134e0 <error@@Base+0x1c34>
   134cc:	add	r1, pc, r1
   134d0:	mov	r2, r5
   134d4:	pop	{r4, r5, r6, r7, fp, lr}
   134d8:	b	10cc8 <sprintf@plt>
   134dc:	andeq	r3, r0, sl, lsr #24
   134e0:	andeq	r3, r0, r5, lsr #24
   134e4:	andeq	r3, r0, lr, lsr #24
   134e8:	andeq	r0, r0, r3, lsr #15
   134ec:	ldrdeq	r3, [r0], -r5
   134f0:	push	{r4, r5, r6, r7, fp, lr}
   134f4:	add	fp, sp, #16
   134f8:	sub	sp, sp, #16
   134fc:	mov	r6, r2
   13500:	mov	r2, r1
   13504:	ldr	r1, [pc, #180]	; 135c0 <error@@Base+0x1d14>
   13508:	mov	r5, r0
   1350c:	mov	r0, r2
   13510:	add	r1, pc, r1
   13514:	bl	11484 <__assert_fail@plt+0x774>
   13518:	mov	r4, r0
   1351c:	cmp	r6, #0
   13520:	beq	13574 <error@@Base+0x1cc8>
   13524:	ldr	r0, [pc, #152]	; 135c4 <error@@Base+0x1d18>
   13528:	mov	r1, #55	; 0x37
   1352c:	mov	r2, #1
   13530:	mov	r3, r4
   13534:	add	r0, pc, r0
   13538:	bl	10bfc <fwrite@plt>
   1353c:	ldr	r7, [pc, #132]	; 135c8 <error@@Base+0x1d1c>
   13540:	mov	r1, #55	; 0x37
   13544:	mov	r2, #1
   13548:	mov	r3, r4
   1354c:	add	r7, pc, r7
   13550:	mov	r0, r7
   13554:	bl	10bfc <fwrite@plt>
   13558:	mov	r0, r4
   1355c:	blx	r6
   13560:	mov	r0, r7
   13564:	mov	r1, #55	; 0x37
   13568:	mov	r2, #1
   1356c:	mov	r3, r4
   13570:	bl	10bfc <fwrite@plt>
   13574:	ldr	r6, [r5]
   13578:	cmp	r6, #0
   1357c:	beq	135b0 <error@@Base+0x1d04>
   13580:	add	r5, sp, #7
   13584:	ldr	r1, [r6, #12]
   13588:	ldrb	r0, [r6, #8]
   1358c:	mov	r2, r5
   13590:	mov	r3, #0
   13594:	bl	133c4 <error@@Base+0x1b18>
   13598:	mov	r0, r5
   1359c:	mov	r1, r4
   135a0:	bl	10ce0 <fputs@plt>
   135a4:	ldr	r6, [r6, #4]
   135a8:	cmp	r6, #0
   135ac:	bne	13584 <error@@Base+0x1cd8>
   135b0:	mov	r0, r4
   135b4:	bl	1150c <__assert_fail@plt+0x7fc>
   135b8:	sub	sp, fp, #16
   135bc:	pop	{r4, r5, r6, r7, fp, pc}
   135c0:	andeq	r0, r0, fp, lsr r7
   135c4:	andeq	r3, r0, r4, asr #23
   135c8:	andeq	r3, r0, r4, ror #23
   135cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d0:	add	fp, sp, #28
   135d4:	sub	sp, sp, #4
   135d8:	mov	r9, #0
   135dc:	mov	sl, r0
   135e0:	str	r9, [sp]
   135e4:	ldrb	r0, [r1]
   135e8:	cmp	r0, #0
   135ec:	beq	1364c <error@@Base+0x1da0>
   135f0:	mov	r4, r1
   135f4:	mov	r8, sp
   135f8:	mov	r7, #1
   135fc:	mov	r0, r4
   13600:	mvn	r1, #0
   13604:	mov	r2, r8
   13608:	bl	10c14 <utf8proc_iterate@plt>
   1360c:	cmp	r0, #1
   13610:	blt	13654 <error@@Base+0x1da8>
   13614:	ldr	r5, [sp]
   13618:	mov	r6, r0
   1361c:	mov	r0, #1
   13620:	mov	r1, #16
   13624:	bl	113dc <__assert_fail@plt+0x6cc>
   13628:	str	r5, [r0, #12]
   1362c:	mov	r1, r0
   13630:	strb	r9, [r0, #8]
   13634:	mov	r0, sl
   13638:	bl	136c0 <error@@Base+0x1e14>
   1363c:	ldrb	r0, [r4, r6]!
   13640:	cmp	r0, #0
   13644:	bne	135fc <error@@Base+0x1d50>
   13648:	b	13658 <error@@Base+0x1dac>
   1364c:	mov	r7, #1
   13650:	b	13658 <error@@Base+0x1dac>
   13654:	mov	r7, #0
   13658:	mov	r0, r7
   1365c:	sub	sp, fp, #28
   13660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13664:	vmov.i32	q8, #0	; 0x00000000
   13668:	vst1.32	{d16-d17}, [r0]
   1366c:	bx	lr
   13670:	push	{r4, r5, fp, lr}
   13674:	add	fp, sp, #8
   13678:	mov	r4, r0
   1367c:	ldr	r0, [r0]
   13680:	mov	r5, #0
   13684:	str	r5, [r1]
   13688:	cmp	r0, #0
   1368c:	str	r0, [r1, #4]
   13690:	str	r1, [r4]
   13694:	addeq	r0, r4, #4
   13698:	str	r1, [r0]
   1369c:	ldr	r0, [r4, #8]
   136a0:	cmp	r0, #0
   136a4:	beq	136b0 <error@@Base+0x1e04>
   136a8:	bl	10b90 <free@plt>
   136ac:	str	r5, [r4, #8]
   136b0:	ldr	r0, [r4, #12]
   136b4:	add	r0, r0, #1
   136b8:	str	r0, [r4, #12]
   136bc:	pop	{r4, r5, fp, pc}
   136c0:	push	{r4, r5, fp, lr}
   136c4:	add	fp, sp, #8
   136c8:	mov	r4, r0
   136cc:	ldr	r0, [r0, #4]
   136d0:	mov	r5, #0
   136d4:	mov	r2, r4
   136d8:	cmp	r0, #0
   136dc:	stm	r1, {r0, r5}
   136e0:	addne	r2, r0, #4
   136e4:	str	r1, [r2]
   136e8:	str	r1, [r4, #4]
   136ec:	ldr	r0, [r4, #8]
   136f0:	cmp	r0, #0
   136f4:	beq	13700 <error@@Base+0x1e54>
   136f8:	bl	10b90 <free@plt>
   136fc:	str	r5, [r4, #8]
   13700:	ldr	r0, [r4, #12]
   13704:	add	r0, r0, #1
   13708:	str	r0, [r4, #12]
   1370c:	pop	{r4, r5, fp, pc}
   13710:	push	{r4, sl, fp, lr}
   13714:	add	fp, sp, #8
   13718:	mov	r4, r0
   1371c:	ldr	r0, [r2]
   13720:	mov	r3, r4
   13724:	cmp	r0, #0
   13728:	stm	r1, {r0, r2}
   1372c:	addne	r3, r0, #4
   13730:	str	r1, [r3]
   13734:	str	r1, [r2]
   13738:	ldr	r0, [r4, #8]
   1373c:	cmp	r0, #0
   13740:	beq	13750 <error@@Base+0x1ea4>
   13744:	bl	10b90 <free@plt>
   13748:	mov	r0, #0
   1374c:	str	r0, [r4, #8]
   13750:	ldr	r0, [r4, #12]
   13754:	add	r0, r0, #1
   13758:	str	r0, [r4, #12]
   1375c:	pop	{r4, sl, fp, pc}
   13760:	push	{r4, sl, fp, lr}
   13764:	add	fp, sp, #8
   13768:	mov	r4, r0
   1376c:	mov	r0, r1
   13770:	cmp	r1, #0
   13774:	ldr	r3, [r0, #4]!
   13778:	moveq	r0, r4
   1377c:	stm	r2, {r1, r3}
   13780:	str	r2, [r0]
   13784:	cmp	r3, #0
   13788:	addeq	r3, r4, #4
   1378c:	str	r2, [r3]
   13790:	ldr	r0, [r4, #8]
   13794:	cmp	r0, #0
   13798:	beq	137a8 <error@@Base+0x1efc>
   1379c:	bl	10b90 <free@plt>
   137a0:	mov	r0, #0
   137a4:	str	r0, [r4, #8]
   137a8:	ldr	r0, [r4, #12]
   137ac:	add	r0, r0, #1
   137b0:	str	r0, [r4, #12]
   137b4:	pop	{r4, sl, fp, pc}
   137b8:	push	{r4, r5, fp, lr}
   137bc:	add	fp, sp, #8
   137c0:	mov	r4, r0
   137c4:	ldm	r1, {r0, r2}
   137c8:	cmp	r0, #0
   137cc:	beq	137dc <error@@Base+0x1f30>
   137d0:	str	r2, [r0, #4]
   137d4:	ldr	r2, [r1, #4]
   137d8:	b	137e0 <error@@Base+0x1f34>
   137dc:	str	r2, [r4]
   137e0:	cmp	r2, #0
   137e4:	mov	r5, #0
   137e8:	addeq	r2, r4, #4
   137ec:	str	r0, [r2]
   137f0:	str	r5, [r1]
   137f4:	str	r5, [r1, #4]
   137f8:	ldr	r0, [r4, #8]
   137fc:	cmp	r0, #0
   13800:	beq	1380c <error@@Base+0x1f60>
   13804:	bl	10b90 <free@plt>
   13808:	str	r5, [r4, #8]
   1380c:	ldr	r0, [r4, #12]
   13810:	sub	r0, r0, #1
   13814:	str	r0, [r4, #12]
   13818:	pop	{r4, r5, fp, pc}
   1381c:	push	{r4, sl, fp, lr}
   13820:	add	fp, sp, #8
   13824:	mov	r4, r0
   13828:	ldr	r0, [r0, #8]
   1382c:	cmp	r0, #0
   13830:	beq	13838 <error@@Base+0x1f8c>
   13834:	pop	{r4, sl, fp, pc}
   13838:	ldr	r0, [r4, #12]
   1383c:	cmp	r0, #0
   13840:	beq	13834 <error@@Base+0x1f88>
   13844:	mov	r1, #4
   13848:	bl	113dc <__assert_fail@plt+0x6cc>
   1384c:	str	r0, [r4, #8]
   13850:	ldr	r1, [r4]
   13854:	cmp	r1, #0
   13858:	beq	13834 <error@@Base+0x1f88>
   1385c:	str	r1, [r0]
   13860:	ldr	r0, [r1, #4]
   13864:	cmp	r0, #0
   13868:	popeq	{r4, sl, fp, pc}
   1386c:	mov	r1, #4
   13870:	ldr	r2, [r4, #8]
   13874:	str	r0, [r2, r1]
   13878:	add	r1, r1, #4
   1387c:	ldr	r0, [r0, #4]
   13880:	cmp	r0, #0
   13884:	bne	13870 <error@@Base+0x1fc4>
   13888:	b	13834 <error@@Base+0x1f88>
   1388c:	push	{r4, r5, r6, r7, fp, lr}
   13890:	add	fp, sp, #16
   13894:	ldr	r6, [r0]
   13898:	cmp	r6, #0
   1389c:	beq	13918 <error@@Base+0x206c>
   138a0:	mov	r4, r1
   138a4:	mov	r5, r0
   138a8:	mov	r7, #0
   138ac:	b	138d0 <error@@Base+0x2024>
   138b0:	ldr	r0, [r5, #12]
   138b4:	sub	r0, r0, #1
   138b8:	str	r0, [r5, #12]
   138bc:	mov	r0, r6
   138c0:	blx	r4
   138c4:	ldr	r6, [r5]
   138c8:	cmp	r6, #0
   138cc:	beq	13918 <error@@Base+0x206c>
   138d0:	ldm	r6, {r0, r1}
   138d4:	cmp	r0, #0
   138d8:	beq	138e8 <error@@Base+0x203c>
   138dc:	str	r1, [r0, #4]
   138e0:	ldr	r1, [r6, #4]
   138e4:	b	138ec <error@@Base+0x2040>
   138e8:	str	r1, [r5]
   138ec:	cmp	r1, #0
   138f0:	addeq	r1, r5, #4
   138f4:	str	r0, [r1]
   138f8:	str	r7, [r6]
   138fc:	str	r7, [r6, #4]
   13900:	ldr	r0, [r5, #8]
   13904:	cmp	r0, #0
   13908:	beq	138b0 <error@@Base+0x2004>
   1390c:	bl	10b90 <free@plt>
   13910:	str	r7, [r5, #8]
   13914:	b	138b0 <error@@Base+0x2004>
   13918:	pop	{r4, r5, r6, r7, fp, pc}
   1391c:	cmp	r0, #2
   13920:	bxlt	lr
   13924:	ldr	r3, [pc, #28]	; 13948 <error@@Base+0x209c>
   13928:	add	r3, pc, r3
   1392c:	str	r2, [r3]
   13930:	ldr	r2, [pc, #20]	; 1394c <error@@Base+0x20a0>
   13934:	add	r2, pc, r2
   13938:	str	r1, [r2]
   1393c:	sub	r1, r0, #1
   13940:	mov	r0, #0
   13944:	b	13950 <error@@Base+0x20a4>
   13948:	andeq	r4, r1, r4, asr #16
   1394c:	andeq	r4, r1, r4, lsr r8
   13950:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13954:	add	fp, sp, #24
   13958:	mov	r8, r1
   1395c:	mov	r5, r0
   13960:	b	13990 <error@@Base+0x20e4>
   13964:	mov	r7, r4
   13968:	ldr	r0, [pc, #308]	; 13aa4 <error@@Base+0x21f8>
   1396c:	ldr	r0, [pc, r0]
   13970:	sub	r1, r4, #1
   13974:	str	r6, [r0, r4, lsl #2]
   13978:	cmp	r1, r5
   1397c:	movgt	r0, r5
   13980:	blgt	13950 <error@@Base+0x20a4>
   13984:	add	r5, r7, #1
   13988:	cmp	r5, r8
   1398c:	bge	13a84 <error@@Base+0x21d8>
   13990:	ldr	r0, [pc, #240]	; 13a88 <error@@Base+0x21dc>
   13994:	cmp	r5, r8
   13998:	mov	r4, r8
   1399c:	mov	r7, r5
   139a0:	ldr	r0, [pc, r0]
   139a4:	ldr	r6, [r0, r5, lsl #2]
   139a8:	bge	13970 <error@@Base+0x20c4>
   139ac:	mov	r7, r5
   139b0:	mov	r4, r8
   139b4:	cmp	r7, r4
   139b8:	blt	139d0 <error@@Base+0x2124>
   139bc:	b	13a00 <error@@Base+0x2154>
   139c0:	cmp	r7, r4
   139c4:	bge	13968 <error@@Base+0x20bc>
   139c8:	cmp	r7, r4
   139cc:	bge	13a00 <error@@Base+0x2154>
   139d0:	ldr	r0, [pc, #180]	; 13a8c <error@@Base+0x21e0>
   139d4:	ldr	r0, [pc, r0]
   139d8:	ldr	r1, [r0, r4, lsl #2]
   139dc:	ldr	r2, [pc, #172]	; 13a90 <error@@Base+0x21e4>
   139e0:	mov	r0, r6
   139e4:	ldr	r2, [pc, r2]
   139e8:	blx	r2
   139ec:	cmn	r0, #1
   139f0:	bgt	13a00 <error@@Base+0x2154>
   139f4:	sub	r4, r4, #1
   139f8:	cmp	r7, r4
   139fc:	blt	139d0 <error@@Base+0x2124>
   13a00:	cmp	r7, r4
   13a04:	bne	13a14 <error@@Base+0x2168>
   13a08:	cmp	r7, r4
   13a0c:	blt	13a30 <error@@Base+0x2184>
   13a10:	b	13a64 <error@@Base+0x21b8>
   13a14:	ldr	r0, [pc, #120]	; 13a94 <error@@Base+0x21e8>
   13a18:	ldr	r0, [pc, r0]
   13a1c:	ldr	r1, [r0, r4, lsl #2]
   13a20:	str	r1, [r0, r7, lsl #2]
   13a24:	add	r7, r7, #1
   13a28:	cmp	r7, r4
   13a2c:	bge	13a64 <error@@Base+0x21b8>
   13a30:	ldr	r0, [pc, #96]	; 13a98 <error@@Base+0x21ec>
   13a34:	ldr	r0, [pc, r0]
   13a38:	ldr	r1, [r0, r7, lsl #2]
   13a3c:	ldr	r2, [pc, #88]	; 13a9c <error@@Base+0x21f0>
   13a40:	mov	r0, r6
   13a44:	ldr	r2, [pc, r2]
   13a48:	blx	r2
   13a4c:	cmp	r0, #1
   13a50:	blt	13a64 <error@@Base+0x21b8>
   13a54:	add	r7, r7, #1
   13a58:	cmp	r4, r7
   13a5c:	bne	13a30 <error@@Base+0x2184>
   13a60:	b	13964 <error@@Base+0x20b8>
   13a64:	cmp	r7, r4
   13a68:	beq	139c0 <error@@Base+0x2114>
   13a6c:	ldr	r0, [pc, #44]	; 13aa0 <error@@Base+0x21f4>
   13a70:	ldr	r0, [pc, r0]
   13a74:	ldr	r1, [r0, r7, lsl #2]
   13a78:	str	r1, [r0, r4, lsl #2]
   13a7c:	sub	r4, r4, #1
   13a80:	b	139c0 <error@@Base+0x2114>
   13a84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a88:	andeq	r4, r1, r8, asr #15
   13a8c:	muleq	r1, r4, r7
   13a90:	andeq	r4, r1, r8, lsl #15
   13a94:	andeq	r4, r1, r0, asr r7
   13a98:	andeq	r4, r1, r4, lsr r7
   13a9c:	andeq	r4, r1, r8, lsr #14
   13aa0:	strdeq	r4, [r1], -r8
   13aa4:	strdeq	r4, [r1], -ip
   13aa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13aac:	mov	r7, r0
   13ab0:	ldr	r6, [pc, #72]	; 13b00 <error@@Base+0x2254>
   13ab4:	ldr	r5, [pc, #72]	; 13b04 <error@@Base+0x2258>
   13ab8:	add	r6, pc, r6
   13abc:	add	r5, pc, r5
   13ac0:	sub	r6, r6, r5
   13ac4:	mov	r8, r1
   13ac8:	mov	r9, r2
   13acc:	bl	10b34 <calloc@plt-0x20>
   13ad0:	asrs	r6, r6, #2
   13ad4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ad8:	mov	r4, #0
   13adc:	add	r4, r4, #1
   13ae0:	ldr	r3, [r5], #4
   13ae4:	mov	r2, r9
   13ae8:	mov	r1, r8
   13aec:	mov	r0, r7
   13af0:	blx	r3
   13af4:	cmp	r6, r4
   13af8:	bne	13adc <error@@Base+0x2230>
   13afc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b00:	andeq	r4, r1, ip, lsr r4
   13b04:	andeq	r4, r1, r4, lsr r4
   13b08:	bx	lr

Disassembly of section .fini:

00013b0c <.fini>:
   13b0c:	push	{r3, lr}
   13b10:	pop	{r3, pc}
