
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

0001194c <.init>:
   1194c:	push	{r3, lr}
   11950:	bl	11cdc <_start@@Base+0x3c>
   11954:	pop	{r3, pc}

Disassembly of section .plt:

00011958 <fdopen@plt-0x14>:
   11958:	push	{lr}		; (str lr, [sp, #-4]!)
   1195c:	ldr	lr, [pc, #4]	; 11968 <fdopen@plt-0x4>
   11960:	add	lr, pc, lr
   11964:	ldr	pc, [lr, #8]!
   11968:	muleq	r1, r8, r6

0001196c <fdopen@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #90112	; 0x16000
   11974:	ldr	pc, [ip, #1688]!	; 0x698

00011978 <raise@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #90112	; 0x16000
   11980:	ldr	pc, [ip, #1680]!	; 0x690

00011984 <setbuf@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #90112	; 0x16000
   1198c:	ldr	pc, [ip, #1672]!	; 0x688

00011990 <fopen@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #90112	; 0x16000
   11998:	ldr	pc, [ip, #1664]!	; 0x680

0001199c <free@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #90112	; 0x16000
   119a4:	ldr	pc, [ip, #1656]!	; 0x678

000119a8 <memcpy@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #90112	; 0x16000
   119b0:	ldr	pc, [ip, #1648]!	; 0x670

000119b4 <ftell@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #90112	; 0x16000
   119bc:	ldr	pc, [ip, #1640]!	; 0x668

000119c0 <fwrite@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #90112	; 0x16000
   119c8:	ldr	pc, [ip, #1632]!	; 0x660

000119cc <strcpy@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #90112	; 0x16000
   119d4:	ldr	pc, [ip, #1624]!	; 0x658

000119d8 <fread@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #90112	; 0x16000
   119e0:	ldr	pc, [ip, #1616]!	; 0x650

000119e4 <getenv@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #90112	; 0x16000
   119ec:	ldr	pc, [ip, #1608]!	; 0x648

000119f0 <malloc@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #90112	; 0x16000
   119f8:	ldr	pc, [ip, #1600]!	; 0x640

000119fc <__libc_start_main@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #90112	; 0x16000
   11a04:	ldr	pc, [ip, #1592]!	; 0x638

00011a08 <__fxstat@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #90112	; 0x16000
   11a10:	ldr	pc, [ip, #1584]!	; 0x630

00011a14 <__gmon_start__@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #90112	; 0x16000
   11a1c:	ldr	pc, [ip, #1576]!	; 0x628

00011a20 <open@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #90112	; 0x16000
   11a28:	ldr	pc, [ip, #1568]!	; 0x620

00011a2c <getpid@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #90112	; 0x16000
   11a34:	ldr	pc, [ip, #1560]!	; 0x618

00011a38 <exit@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #90112	; 0x16000
   11a40:	ldr	pc, [ip, #1552]!	; 0x610

00011a44 <strlen@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #90112	; 0x16000
   11a4c:	ldr	pc, [ip, #1544]!	; 0x608

00011a50 <getopt@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #90112	; 0x16000
   11a58:	ldr	pc, [ip, #1536]!	; 0x600

00011a5c <fprintf@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #90112	; 0x16000
   11a64:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a68 <__errno_location@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #90112	; 0x16000
   11a70:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a74 <__cxa_atexit@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #90112	; 0x16000
   11a7c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a80 <mkdir@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #90112	; 0x16000
   11a88:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a8c <fcntl@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #90112	; 0x16000
   11a94:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a98 <memset@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #90112	; 0x16000
   11aa0:	ldr	pc, [ip, #1488]!	; 0x5d0

00011aa4 <strncpy@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #90112	; 0x16000
   11aac:	ldr	pc, [ip, #1480]!	; 0x5c8

00011ab0 <access@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #90112	; 0x16000
   11ab8:	ldr	pc, [ip, #1472]!	; 0x5c0

00011abc <fclose@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #90112	; 0x16000
   11ac4:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ac8 <strnlen@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #90112	; 0x16000
   11ad0:	ldr	pc, [ip, #1456]!	; 0x5b0

00011ad4 <vfprintf@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #90112	; 0x16000
   11adc:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ae0 <fputc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #90112	; 0x16000
   11ae8:	ldr	pc, [ip, #1440]!	; 0x5a0

00011aec <atoi@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #90112	; 0x16000
   11af4:	ldr	pc, [ip, #1432]!	; 0x598

00011af8 <fseek@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #90112	; 0x16000
   11b00:	ldr	pc, [ip, #1424]!	; 0x590

00011b04 <fputs@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #90112	; 0x16000
   11b0c:	ldr	pc, [ip, #1416]!	; 0x588

00011b10 <strncmp@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #90112	; 0x16000
   11b18:	ldr	pc, [ip, #1408]!	; 0x580

00011b1c <abort@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #90112	; 0x16000
   11b24:	ldr	pc, [ip, #1400]!	; 0x578

00011b28 <close@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #90112	; 0x16000
   11b30:	ldr	pc, [ip, #1392]!	; 0x570

Disassembly of section .text:

00011b34 <main@@Base>:
   11b34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b38:	mov	r7, r0
   11b3c:	ldr	r4, [pc, #248]	; 11c3c <main@@Base+0x108>
   11b40:	ldr	r8, [pc, #248]	; 11c40 <main@@Base+0x10c>
   11b44:	ldr	r9, [pc, #248]	; 11c44 <main@@Base+0x110>
   11b48:	ldrd	r2, [r4, #192]	; 0xc0
   11b4c:	mov	r6, r1
   11b50:	mov	r5, #0
   11b54:	adds	r2, r2, #1
   11b58:	adc	r3, r3, #0
   11b5c:	strd	r2, [r4, #192]	; 0xc0
   11b60:	mov	r2, r8
   11b64:	mov	r1, r6
   11b68:	mov	r0, r7
   11b6c:	bl	11a50 <getopt@plt>
   11b70:	cmn	r0, #1
   11b74:	bne	11bd4 <main@@Base+0xa0>
   11b78:	ldr	r3, [pc, #200]	; 11c48 <main@@Base+0x114>
   11b7c:	ldr	r1, [r3]
   11b80:	cmp	r7, r1
   11b84:	ble	11c04 <main@@Base+0xd0>
   11b88:	ldrd	r2, [r4, #216]	; 0xd8
   11b8c:	ldr	r0, [r6, r1, lsl #2]
   11b90:	adds	r2, r2, #1
   11b94:	adc	r3, r3, #0
   11b98:	cmp	r5, #0
   11b9c:	strd	r2, [r4, #216]	; 0xd8
   11ba0:	movne	r1, r5
   11ba4:	bne	11bbc <main@@Base+0x88>
   11ba8:	ldrd	r2, [r4, #232]	; 0xe8
   11bac:	ldr	r1, [pc, #152]	; 11c4c <main@@Base+0x118>
   11bb0:	adds	r2, r2, #1
   11bb4:	adc	r3, r3, #0
   11bb8:	strd	r2, [r4, #232]	; 0xe8
   11bbc:	bl	11fc0 <my_main@@Base>
   11bc0:	ldrd	r2, [r4, #240]	; 0xf0
   11bc4:	adds	r2, r2, #1
   11bc8:	adc	r3, r3, #0
   11bcc:	strd	r2, [r4, #240]	; 0xf0
   11bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bd4:	ldrd	r2, [r4, #208]	; 0xd0
   11bd8:	adds	r2, r2, #1
   11bdc:	adc	r3, r3, #0
   11be0:	cmp	r0, #111	; 0x6f
   11be4:	strd	r2, [r4, #208]	; 0xd0
   11be8:	bne	11b60 <main@@Base+0x2c>
   11bec:	ldrd	r2, [r4, #200]	; 0xc8
   11bf0:	ldr	r5, [r9]
   11bf4:	adds	r2, r2, #1
   11bf8:	adc	r3, r3, #0
   11bfc:	strd	r2, [r4, #200]	; 0xc8
   11c00:	b	11b60 <main@@Base+0x2c>
   11c04:	ldrd	r2, [r4, #224]	; 0xe0
   11c08:	ldr	r0, [pc, #64]	; 11c50 <main@@Base+0x11c>
   11c0c:	adds	r2, r2, #1
   11c10:	adc	r3, r3, #0
   11c14:	strd	r2, [r4, #224]	; 0xe0
   11c18:	ldr	r3, [pc, #52]	; 11c54 <main@@Base+0x120>
   11c1c:	ldr	r1, [r3]
   11c20:	bl	11b04 <fputs@plt>
   11c24:	ldrd	r2, [r4, #248]	; 0xf8
   11c28:	mov	r0, #1
   11c2c:	adds	r2, r2, #1
   11c30:	adc	r3, r3, #0
   11c34:	strd	r2, [r4, #248]	; 0xf8
   11c38:	bl	11a38 <exit@plt>
   11c3c:	andeq	r8, r2, r8, asr #21
   11c40:	andeq	r7, r1, r0, asr r3
   11c44:	andeq	r8, r2, r0, asr #21
   11c48:			; <UNDEFINED> instruction: 0x00028ab0
   11c4c:	andeq	r7, r1, ip, asr #6
   11c50:	andeq	r7, r1, r3, asr r3
   11c54:			; <UNDEFINED> instruction: 0x00028ab8
   11c58:	ldr	r0, [pc]	; 11c60 <main@@Base+0x12c>
   11c5c:	b	16f08 <__gcov_sort_n_vals@@Base+0x458>
   11c60:	strheq	r8, [r2], -ip
   11c64:	ldr	r0, [pc]	; 11c6c <main@@Base+0x138>
   11c68:	b	16f08 <__gcov_sort_n_vals@@Base+0x458>
   11c6c:	andeq	r8, r2, r0, asr r1
   11c70:	ldr	r0, [pc]	; 11c78 <main@@Base+0x144>
   11c74:	b	16f08 <__gcov_sort_n_vals@@Base+0x458>
   11c78:	andeq	r8, r2, r8, ror #8
   11c7c:	ldr	r0, [pc]	; 11c84 <main@@Base+0x150>
   11c80:	b	16f08 <__gcov_sort_n_vals@@Base+0x458>
   11c84:	andeq	r8, r2, r8, lsl #11
   11c88:	ldr	r0, [pc]	; 11c90 <main@@Base+0x15c>
   11c8c:	b	16f08 <__gcov_sort_n_vals@@Base+0x458>
   11c90:	andeq	r8, r2, r8, lsl #15
   11c94:	ldr	r0, [pc]	; 11c9c <main@@Base+0x168>
   11c98:	b	16f08 <__gcov_sort_n_vals@@Base+0x458>
   11c9c:	strdeq	r8, [r2], -ip

00011ca0 <_start@@Base>:
   11ca0:	mov	fp, #0
   11ca4:	mov	lr, #0
   11ca8:	pop	{r1}		; (ldr r1, [sp], #4)
   11cac:	mov	r2, sp
   11cb0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cb4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cb8:	ldr	ip, [pc, #16]	; 11cd0 <_start@@Base+0x30>
   11cbc:	push	{ip}		; (str ip, [sp, #-4]!)
   11cc0:	ldr	r0, [pc, #12]	; 11cd4 <_start@@Base+0x34>
   11cc4:	ldr	r3, [pc, #12]	; 11cd8 <_start@@Base+0x38>
   11cc8:	bl	119fc <__libc_start_main@plt>
   11ccc:	bl	11b1c <abort@plt>
   11cd0:	muleq	r1, r4, r2
   11cd4:	andeq	r1, r1, r4, lsr fp
   11cd8:	andeq	r7, r1, r4, lsr r2
   11cdc:	ldr	r3, [pc, #20]	; 11cf8 <_start@@Base+0x58>
   11ce0:	ldr	r2, [pc, #20]	; 11cfc <_start@@Base+0x5c>
   11ce4:	add	r3, pc, r3
   11ce8:	ldr	r2, [r3, r2]
   11cec:	cmp	r2, #0
   11cf0:	bxeq	lr
   11cf4:	b	11a14 <__gmon_start__@plt>
   11cf8:	andeq	r6, r1, r4, lsl r3
   11cfc:	andeq	r0, r0, r8, lsr #1
   11d00:	ldr	r3, [pc, #28]	; 11d24 <_start@@Base+0x84>
   11d04:	ldr	r0, [pc, #28]	; 11d28 <_start@@Base+0x88>
   11d08:	sub	r3, r3, r0
   11d0c:	cmp	r3, #6
   11d10:	bxls	lr
   11d14:	ldr	r3, [pc, #16]	; 11d2c <_start@@Base+0x8c>
   11d18:	cmp	r3, #0
   11d1c:	bxeq	lr
   11d20:	bx	r3
   11d24:			; <UNDEFINED> instruction: 0x00028ab3
   11d28:			; <UNDEFINED> instruction: 0x00028ab0
   11d2c:	andeq	r0, r0, r0
   11d30:	ldr	r1, [pc, #36]	; 11d5c <_start@@Base+0xbc>
   11d34:	ldr	r0, [pc, #36]	; 11d60 <_start@@Base+0xc0>
   11d38:	sub	r1, r1, r0
   11d3c:	asr	r1, r1, #2
   11d40:	add	r1, r1, r1, lsr #31
   11d44:	asrs	r1, r1, #1
   11d48:	bxeq	lr
   11d4c:	ldr	r3, [pc, #16]	; 11d64 <_start@@Base+0xc4>
   11d50:	cmp	r3, #0
   11d54:	bxeq	lr
   11d58:	bx	r3
   11d5c:			; <UNDEFINED> instruction: 0x00028ab0
   11d60:			; <UNDEFINED> instruction: 0x00028ab0
   11d64:	andeq	r0, r0, r0
   11d68:	push	{r4, lr}
   11d6c:	ldr	r4, [pc, #24]	; 11d8c <_start@@Base+0xec>
   11d70:	ldrb	r3, [r4]
   11d74:	cmp	r3, #0
   11d78:	popne	{r4, pc}
   11d7c:	bl	11d00 <_start@@Base+0x60>
   11d80:	mov	r3, #1
   11d84:	strb	r3, [r4]
   11d88:	pop	{r4, pc}
   11d8c:	andeq	r8, r2, r4, asr #21
   11d90:	ldr	r0, [pc, #40]	; 11dc0 <_start@@Base+0x120>
   11d94:	ldr	r3, [r0]
   11d98:	cmp	r3, #0
   11d9c:	bne	11da4 <_start@@Base+0x104>
   11da0:	b	11d30 <_start@@Base+0x90>
   11da4:	ldr	r3, [pc, #24]	; 11dc4 <_start@@Base+0x124>
   11da8:	cmp	r3, #0
   11dac:	beq	11da0 <_start@@Base+0x100>
   11db0:	push	{r4, lr}
   11db4:	blx	r3
   11db8:	pop	{r4, lr}
   11dbc:	b	11d30 <_start@@Base+0x90>
   11dc0:	andeq	r7, r2, r4, lsl pc
   11dc4:	andeq	r0, r0, r0

00011dc8 <load_file@@Base>:
   11dc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11dcc:	mov	r8, r0
   11dd0:	ldr	r4, [pc, #464]	; 11fa8 <load_file@@Base+0x1e0>
   11dd4:	ldr	r1, [pc, #464]	; 11fac <load_file@@Base+0x1e4>
   11dd8:	ldrd	r2, [r4]
   11ddc:	adds	r2, r2, #1
   11de0:	adc	r3, r3, #0
   11de4:	strd	r2, [r4]
   11de8:	bl	11990 <fopen@plt>
   11dec:	ldrd	r2, [r4, #8]
   11df0:	adds	r2, r2, #1
   11df4:	adc	r3, r3, #0
   11df8:	strd	r2, [r4, #8]
   11dfc:	subs	r6, r0, #0
   11e00:	beq	11fa0 <load_file@@Base+0x1d8>
   11e04:	ldrd	r2, [r4, #16]
   11e08:	mov	r1, #0
   11e0c:	mov	r7, r4
   11e10:	adds	r2, r2, #1
   11e14:	adc	r3, r3, #0
   11e18:	strd	r2, [r4, #16]
   11e1c:	mov	r2, #2
   11e20:	bl	11af8 <fseek@plt>
   11e24:	ldrd	r2, [r4, #24]
   11e28:	adds	r2, r2, #1
   11e2c:	adc	r3, r3, #0
   11e30:	strd	r2, [r4, #24]
   11e34:	subs	sl, r0, #0
   11e38:	bne	11f98 <load_file@@Base+0x1d0>
   11e3c:	ldrd	r2, [r4, #32]
   11e40:	mov	r0, r6
   11e44:	adds	r2, r2, #1
   11e48:	adc	r3, r3, #0
   11e4c:	strd	r2, [r4, #32]
   11e50:	bl	119b4 <ftell@plt>
   11e54:	cmn	r0, #1
   11e58:	mov	r9, r0
   11e5c:	bne	11e98 <load_file@@Base+0xd0>
   11e60:	ldrd	r2, [r4, #40]	; 0x28
   11e64:	ldr	r0, [pc, #324]	; 11fb0 <load_file@@Base+0x1e8>
   11e68:	adds	r2, r2, #1
   11e6c:	adc	r3, r3, #0
   11e70:	strd	r2, [r4, #40]	; 0x28
   11e74:	ldr	r3, [pc, #312]	; 11fb4 <load_file@@Base+0x1ec>
   11e78:	ldr	r1, [r3]
   11e7c:	bl	11b04 <fputs@plt>
   11e80:	ldrd	r2, [r4, #56]	; 0x38
   11e84:	adds	r2, r2, #1
   11e88:	adc	r3, r3, #0
   11e8c:	strd	r2, [r4, #56]	; 0x38
   11e90:	mov	r0, #1
   11e94:	bl	11a38 <exit@plt>
   11e98:	ldrd	r2, [r4, #48]	; 0x30
   11e9c:	add	r0, r0, #1
   11ea0:	adds	r2, r2, #1
   11ea4:	adc	r3, r3, #0
   11ea8:	strd	r2, [r4, #48]	; 0x30
   11eac:	bl	119f0 <malloc@plt>
   11eb0:	mov	r2, sl
   11eb4:	mov	r1, sl
   11eb8:	mov	r5, r0
   11ebc:	mov	r0, r6
   11ec0:	bl	11af8 <fseek@plt>
   11ec4:	subs	sl, r0, #0
   11ec8:	beq	11f00 <load_file@@Base+0x138>
   11ecc:	ldrd	r2, [r4, #64]	; 0x40
   11ed0:	ldr	r0, [pc, #224]	; 11fb8 <load_file@@Base+0x1f0>
   11ed4:	adds	r2, r2, #1
   11ed8:	adc	r3, r3, #0
   11edc:	strd	r2, [r4, #64]	; 0x40
   11ee0:	ldr	r3, [pc, #204]	; 11fb4 <load_file@@Base+0x1ec>
   11ee4:	ldr	r1, [r3]
   11ee8:	bl	11b04 <fputs@plt>
   11eec:	ldrd	r2, [r4, #80]	; 0x50
   11ef0:	adds	r2, r2, #1
   11ef4:	adc	r3, r3, #0
   11ef8:	strd	r2, [r4, #80]	; 0x50
   11efc:	b	11e90 <load_file@@Base+0xc8>
   11f00:	ldrd	r2, [r4, #72]	; 0x48
   11f04:	mov	r1, #1
   11f08:	mov	r0, r5
   11f0c:	adds	r2, r2, #1
   11f10:	adc	r3, r3, #0
   11f14:	strd	r2, [r4, #72]	; 0x48
   11f18:	mov	r3, r6
   11f1c:	mov	r2, r9
   11f20:	bl	119d8 <fread@plt>
   11f24:	cmp	r0, #0
   11f28:	bne	11f64 <load_file@@Base+0x19c>
   11f2c:	ldrd	r2, [r4, #88]	; 0x58
   11f30:	ldr	r1, [pc, #132]	; 11fbc <load_file@@Base+0x1f4>
   11f34:	adds	r2, r2, #1
   11f38:	adc	r3, r3, #0
   11f3c:	strd	r2, [r4, #88]	; 0x58
   11f40:	ldr	r3, [pc, #108]	; 11fb4 <load_file@@Base+0x1ec>
   11f44:	mov	r2, r8
   11f48:	ldr	r0, [r3]
   11f4c:	bl	11a5c <fprintf@plt>
   11f50:	ldrd	r2, [r4, #96]	; 0x60
   11f54:	adds	r2, r2, #1
   11f58:	adc	r3, r3, #0
   11f5c:	strd	r2, [r4, #96]	; 0x60
   11f60:	b	11e90 <load_file@@Base+0xc8>
   11f64:	ldrd	r2, [r4, #104]	; 0x68
   11f68:	strb	sl, [r5, r0]
   11f6c:	adds	r2, r2, #1
   11f70:	adc	r3, r3, #0
   11f74:	strd	r2, [r4, #104]	; 0x68
   11f78:	mov	r0, r6
   11f7c:	bl	11abc <fclose@plt>
   11f80:	ldrd	r2, [r7, #112]	; 0x70
   11f84:	adds	r2, r2, #1
   11f88:	adc	r3, r3, #0
   11f8c:	strd	r2, [r7, #112]	; 0x70
   11f90:	mov	r0, r5
   11f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f98:	mov	r5, #0
   11f9c:	b	11f78 <load_file@@Base+0x1b0>
   11fa0:	mov	r5, r6
   11fa4:	b	11f90 <load_file@@Base+0x1c8>
   11fa8:	andeq	r8, r2, r8, asr #21
   11fac:	andeq	r7, r1, ip, asr #5
   11fb0:	andeq	r7, r1, lr, asr #5
   11fb4:			; <UNDEFINED> instruction: 0x00028ab8
   11fb8:	andeq	r7, r1, r2, lsl #6
   11fbc:	andeq	r7, r1, r4, lsr r3

00011fc0 <my_main@@Base>:
   11fc0:	push	{r4, r5, r6, lr}
   11fc4:	sub	sp, sp, #32
   11fc8:	ldr	r4, [pc, #244]	; 120c4 <my_main@@Base+0x104>
   11fcc:	mov	r6, r1
   11fd0:	ldrd	r2, [r4, #120]	; 0x78
   11fd4:	adds	r2, r2, #1
   11fd8:	adc	r3, r3, #0
   11fdc:	strd	r2, [r4, #120]	; 0x78
   11fe0:	bl	11dc8 <load_file@@Base>
   11fe4:	ldrd	r2, [r4, #128]	; 0x80
   11fe8:	adds	r2, r2, #1
   11fec:	adc	r3, r3, #0
   11ff0:	strd	r2, [r4, #128]	; 0x80
   11ff4:	mov	r5, r0
   11ff8:	mov	r1, r0
   11ffc:	add	r0, sp, #4
   12000:	bl	12444 <init_lexer@@Base>
   12004:	ldrd	r0, [r4, #136]	; 0x88
   12008:	adds	r0, r0, #1
   1200c:	adc	r1, r1, #0
   12010:	strd	r0, [r4, #136]	; 0x88
   12014:	add	r1, sp, #4
   12018:	mov	r0, sp
   1201c:	bl	13a30 <init_grammar@@Base>
   12020:	ldrd	r0, [r4, #144]	; 0x90
   12024:	mov	r2, r6
   12028:	adds	r0, r0, #1
   1202c:	adc	r1, r1, #0
   12030:	strd	r0, [r4, #144]	; 0x90
   12034:	mov	r1, sp
   12038:	add	r0, sp, #16
   1203c:	bl	14698 <init_generator@@Base>
   12040:	ldrd	r2, [r4, #152]	; 0x98
   12044:	add	r0, sp, #16
   12048:	adds	r2, r2, #1
   1204c:	adc	r3, r3, #0
   12050:	strd	r2, [r4, #152]	; 0x98
   12054:	bl	14f60 <generate_code@@Base>
   12058:	ldrd	r2, [r4, #160]	; 0xa0
   1205c:	add	r0, sp, #16
   12060:	adds	r2, r2, #1
   12064:	adc	r3, r3, #0
   12068:	strd	r2, [r4, #160]	; 0xa0
   1206c:	bl	146f0 <destroy_generator@@Base>
   12070:	ldrd	r2, [r4, #168]	; 0xa8
   12074:	mov	r0, sp
   12078:	adds	r2, r2, #1
   1207c:	adc	r3, r3, #0
   12080:	strd	r2, [r4, #168]	; 0xa8
   12084:	bl	13a50 <destroy_grammar@@Base>
   12088:	ldrd	r2, [r4, #176]	; 0xb0
   1208c:	add	r0, sp, #4
   12090:	adds	r2, r2, #1
   12094:	adc	r3, r3, #0
   12098:	strd	r2, [r4, #176]	; 0xb0
   1209c:	bl	12470 <destroy_lexer@@Base>
   120a0:	ldrd	r2, [r4, #184]	; 0xb8
   120a4:	mov	r0, r5
   120a8:	adds	r2, r2, #1
   120ac:	adc	r3, r3, #0
   120b0:	strd	r2, [r4, #184]	; 0xb8
   120b4:	bl	1199c <free@plt>
   120b8:	mov	r0, #0
   120bc:	add	sp, sp, #32
   120c0:	pop	{r4, r5, r6, pc}
   120c4:	andeq	r8, r2, r8, asr #21

000120c8 <init_token_int_type@@Base>:
   120c8:	ldr	r1, [pc, #24]	; 120e8 <init_token_int_type@@Base+0x20>
   120cc:	ldrd	r2, [r1]
   120d0:	adds	r2, r2, #1
   120d4:	adc	r3, r3, #0
   120d8:	strd	r2, [r1]
   120dc:	mov	r3, #0
   120e0:	str	r3, [r0]
   120e4:	bx	lr
   120e8:	andeq	r8, r2, r8, asr #23

000120ec <init_token_int_value@@Base>:
   120ec:	ldr	ip, [pc, #28]	; 12110 <init_token_int_value@@Base+0x24>
   120f0:	str	r1, [r0, #4]
   120f4:	ldrd	r2, [ip, #8]
   120f8:	adds	r2, r2, #1
   120fc:	adc	r3, r3, #0
   12100:	strd	r2, [ip, #8]
   12104:	mov	r3, #1
   12108:	str	r3, [r0]
   1210c:	bx	lr
   12110:	andeq	r8, r2, r8, asr #23

00012114 <init_token_function@@Base>:
   12114:	ldr	ip, [pc, #28]	; 12138 <init_token_function@@Base+0x24>
   12118:	str	r1, [r0, #4]
   1211c:	ldrd	r2, [ip, #16]
   12120:	adds	r2, r2, #1
   12124:	adc	r3, r3, #0
   12128:	strd	r2, [ip, #16]
   1212c:	mov	r3, #2
   12130:	str	r3, [r0]
   12134:	bx	lr
   12138:	andeq	r8, r2, r8, asr #23

0001213c <init_token_opar@@Base>:
   1213c:	ldr	r1, [pc, #24]	; 1215c <init_token_opar@@Base+0x20>
   12140:	ldrd	r2, [r1, #24]
   12144:	adds	r2, r2, #1
   12148:	adc	r3, r3, #0
   1214c:	strd	r2, [r1, #24]
   12150:	mov	r3, #3
   12154:	str	r3, [r0]
   12158:	bx	lr
   1215c:	andeq	r8, r2, r8, asr #23

00012160 <init_token_cpar@@Base>:
   12160:	ldr	r1, [pc, #24]	; 12180 <init_token_cpar@@Base+0x20>
   12164:	ldrd	r2, [r1, #32]
   12168:	adds	r2, r2, #1
   1216c:	adc	r3, r3, #0
   12170:	strd	r2, [r1, #32]
   12174:	mov	r3, #4
   12178:	str	r3, [r0]
   1217c:	bx	lr
   12180:	andeq	r8, r2, r8, asr #23

00012184 <init_token_obra@@Base>:
   12184:	ldr	r1, [pc, #24]	; 121a4 <init_token_obra@@Base+0x20>
   12188:	ldrd	r2, [r1, #40]	; 0x28
   1218c:	adds	r2, r2, #1
   12190:	adc	r3, r3, #0
   12194:	strd	r2, [r1, #40]	; 0x28
   12198:	mov	r3, #5
   1219c:	str	r3, [r0]
   121a0:	bx	lr
   121a4:	andeq	r8, r2, r8, asr #23

000121a8 <init_token_cbra@@Base>:
   121a8:	ldr	r1, [pc, #24]	; 121c8 <init_token_cbra@@Base+0x20>
   121ac:	ldrd	r2, [r1, #48]	; 0x30
   121b0:	adds	r2, r2, #1
   121b4:	adc	r3, r3, #0
   121b8:	strd	r2, [r1, #48]	; 0x30
   121bc:	mov	r3, #6
   121c0:	str	r3, [r0]
   121c4:	bx	lr
   121c8:	andeq	r8, r2, r8, asr #23

000121cc <init_token_return@@Base>:
   121cc:	ldr	r1, [pc, #24]	; 121ec <init_token_return@@Base+0x20>
   121d0:	ldrd	r2, [r1, #56]	; 0x38
   121d4:	adds	r2, r2, #1
   121d8:	adc	r3, r3, #0
   121dc:	strd	r2, [r1, #56]	; 0x38
   121e0:	mov	r3, #7
   121e4:	str	r3, [r0]
   121e8:	bx	lr
   121ec:	andeq	r8, r2, r8, asr #23

000121f0 <init_token_semicolon@@Base>:
   121f0:	ldr	r1, [pc, #24]	; 12210 <init_token_semicolon@@Base+0x20>
   121f4:	ldrd	r2, [r1, #64]	; 0x40
   121f8:	adds	r2, r2, #1
   121fc:	adc	r3, r3, #0
   12200:	strd	r2, [r1, #64]	; 0x40
   12204:	mov	r3, #8
   12208:	str	r3, [r0]
   1220c:	bx	lr
   12210:	andeq	r8, r2, r8, asr #23

00012214 <init_token_eof@@Base>:
   12214:	ldr	r1, [pc, #24]	; 12234 <init_token_eof@@Base+0x20>
   12218:	ldrd	r2, [r1, #72]	; 0x48
   1221c:	adds	r2, r2, #1
   12220:	adc	r3, r3, #0
   12224:	strd	r2, [r1, #72]	; 0x48
   12228:	mov	r3, #9
   1222c:	str	r3, [r0]
   12230:	bx	lr
   12234:	andeq	r8, r2, r8, asr #23

00012238 <init_token_if@@Base>:
   12238:	ldr	r1, [pc, #24]	; 12258 <init_token_if@@Base+0x20>
   1223c:	ldrd	r2, [r1, #80]	; 0x50
   12240:	adds	r2, r2, #1
   12244:	adc	r3, r3, #0
   12248:	strd	r2, [r1, #80]	; 0x50
   1224c:	mov	r3, #10
   12250:	str	r3, [r0]
   12254:	bx	lr
   12258:	andeq	r8, r2, r8, asr #23

0001225c <init_token_else@@Base>:
   1225c:	ldr	r1, [pc, #24]	; 1227c <init_token_else@@Base+0x20>
   12260:	ldrd	r2, [r1, #88]	; 0x58
   12264:	adds	r2, r2, #1
   12268:	adc	r3, r3, #0
   1226c:	strd	r2, [r1, #88]	; 0x58
   12270:	mov	r3, #11
   12274:	str	r3, [r0]
   12278:	bx	lr
   1227c:	andeq	r8, r2, r8, asr #23

00012280 <init_token_boolean_op@@Base>:
   12280:	ldr	ip, [pc, #28]	; 122a4 <init_token_boolean_op@@Base+0x24>
   12284:	str	r1, [r0, #4]
   12288:	ldrd	r2, [ip, #96]	; 0x60
   1228c:	adds	r2, r2, #1
   12290:	adc	r3, r3, #0
   12294:	strd	r2, [ip, #96]	; 0x60
   12298:	mov	r3, #12
   1229c:	str	r3, [r0]
   122a0:	bx	lr
   122a4:	andeq	r8, r2, r8, asr #23

000122a8 <free_token_int_type@@Base>:
   122a8:	ldr	r1, [pc, #16]	; 122c0 <free_token_int_type@@Base+0x18>
   122ac:	ldrd	r2, [r1, #104]	; 0x68
   122b0:	adds	r2, r2, #1
   122b4:	adc	r3, r3, #0
   122b8:	strd	r2, [r1, #104]	; 0x68
   122bc:	b	1199c <free@plt>
   122c0:	andeq	r8, r2, r8, asr #23

000122c4 <free_token_int_value@@Base>:
   122c4:	ldr	r1, [pc, #16]	; 122dc <free_token_int_value@@Base+0x18>
   122c8:	ldrd	r2, [r1, #112]	; 0x70
   122cc:	adds	r2, r2, #1
   122d0:	adc	r3, r3, #0
   122d4:	strd	r2, [r1, #112]	; 0x70
   122d8:	b	1199c <free@plt>
   122dc:	andeq	r8, r2, r8, asr #23

000122e0 <free_token_function@@Base>:
   122e0:	ldr	r1, [pc, #16]	; 122f8 <free_token_function@@Base+0x18>
   122e4:	ldrd	r2, [r1, #120]	; 0x78
   122e8:	adds	r2, r2, #1
   122ec:	adc	r3, r3, #0
   122f0:	strd	r2, [r1, #120]	; 0x78
   122f4:	b	1199c <free@plt>
   122f8:	andeq	r8, r2, r8, asr #23

000122fc <free_token_opar@@Base>:
   122fc:	ldr	r1, [pc, #16]	; 12314 <free_token_opar@@Base+0x18>
   12300:	ldrd	r2, [r1, #128]	; 0x80
   12304:	adds	r2, r2, #1
   12308:	adc	r3, r3, #0
   1230c:	strd	r2, [r1, #128]	; 0x80
   12310:	b	1199c <free@plt>
   12314:	andeq	r8, r2, r8, asr #23

00012318 <free_token_cpar@@Base>:
   12318:	ldr	r1, [pc, #16]	; 12330 <free_token_cpar@@Base+0x18>
   1231c:	ldrd	r2, [r1, #136]	; 0x88
   12320:	adds	r2, r2, #1
   12324:	adc	r3, r3, #0
   12328:	strd	r2, [r1, #136]	; 0x88
   1232c:	b	1199c <free@plt>
   12330:	andeq	r8, r2, r8, asr #23

00012334 <free_token_obra@@Base>:
   12334:	ldr	r1, [pc, #16]	; 1234c <free_token_obra@@Base+0x18>
   12338:	ldrd	r2, [r1, #144]	; 0x90
   1233c:	adds	r2, r2, #1
   12340:	adc	r3, r3, #0
   12344:	strd	r2, [r1, #144]	; 0x90
   12348:	b	1199c <free@plt>
   1234c:	andeq	r8, r2, r8, asr #23

00012350 <free_token_cbra@@Base>:
   12350:	ldr	r1, [pc, #16]	; 12368 <free_token_cbra@@Base+0x18>
   12354:	ldrd	r2, [r1, #152]	; 0x98
   12358:	adds	r2, r2, #1
   1235c:	adc	r3, r3, #0
   12360:	strd	r2, [r1, #152]	; 0x98
   12364:	b	1199c <free@plt>
   12368:	andeq	r8, r2, r8, asr #23

0001236c <free_token_return@@Base>:
   1236c:	ldr	r1, [pc, #16]	; 12384 <free_token_return@@Base+0x18>
   12370:	ldrd	r2, [r1, #160]	; 0xa0
   12374:	adds	r2, r2, #1
   12378:	adc	r3, r3, #0
   1237c:	strd	r2, [r1, #160]	; 0xa0
   12380:	b	1199c <free@plt>
   12384:	andeq	r8, r2, r8, asr #23

00012388 <free_token_semicolon@@Base>:
   12388:	ldr	r1, [pc, #16]	; 123a0 <free_token_semicolon@@Base+0x18>
   1238c:	ldrd	r2, [r1, #168]	; 0xa8
   12390:	adds	r2, r2, #1
   12394:	adc	r3, r3, #0
   12398:	strd	r2, [r1, #168]	; 0xa8
   1239c:	b	1199c <free@plt>
   123a0:	andeq	r8, r2, r8, asr #23

000123a4 <free_token_eof@@Base>:
   123a4:	ldr	r1, [pc, #16]	; 123bc <free_token_eof@@Base+0x18>
   123a8:	ldrd	r2, [r1, #176]	; 0xb0
   123ac:	adds	r2, r2, #1
   123b0:	adc	r3, r3, #0
   123b4:	strd	r2, [r1, #176]	; 0xb0
   123b8:	b	1199c <free@plt>
   123bc:	andeq	r8, r2, r8, asr #23

000123c0 <free_token_if@@Base>:
   123c0:	ldr	r1, [pc, #16]	; 123d8 <free_token_if@@Base+0x18>
   123c4:	ldrd	r2, [r1, #184]	; 0xb8
   123c8:	adds	r2, r2, #1
   123cc:	adc	r3, r3, #0
   123d0:	strd	r2, [r1, #184]	; 0xb8
   123d4:	b	1199c <free@plt>
   123d8:	andeq	r8, r2, r8, asr #23

000123dc <free_token_else@@Base>:
   123dc:	ldr	r1, [pc, #16]	; 123f4 <free_token_else@@Base+0x18>
   123e0:	ldrd	r2, [r1, #192]	; 0xc0
   123e4:	adds	r2, r2, #1
   123e8:	adc	r3, r3, #0
   123ec:	strd	r2, [r1, #192]	; 0xc0
   123f0:	b	1199c <free@plt>
   123f4:	andeq	r8, r2, r8, asr #23

000123f8 <free_token_boolean_op@@Base>:
   123f8:	push	{r4, r5, r6, lr}
   123fc:	mov	r5, r0
   12400:	ldr	r4, [pc, #56]	; 12440 <free_token_boolean_op@@Base+0x48>
   12404:	ldr	r0, [r0, #4]
   12408:	ldrd	r2, [r4, #200]	; 0xc8
   1240c:	adds	r2, r2, #1
   12410:	adc	r3, r3, #0
   12414:	cmp	r0, #0
   12418:	strd	r2, [r4, #200]	; 0xc8
   1241c:	beq	12434 <free_token_boolean_op@@Base+0x3c>
   12420:	bl	1199c <free@plt>
   12424:	ldrd	r2, [r4, #208]	; 0xd0
   12428:	adds	r2, r2, #1
   1242c:	adc	r3, r3, #0
   12430:	strd	r2, [r4, #208]	; 0xd0
   12434:	mov	r0, r5
   12438:	pop	{r4, r5, r6, lr}
   1243c:	b	1199c <free@plt>
   12440:	andeq	r8, r2, r8, asr #23

00012444 <init_lexer@@Base>:
   12444:	ldr	ip, [pc, #32]	; 1246c <init_lexer@@Base+0x28>
   12448:	str	r1, [r0]
   1244c:	ldrd	r2, [ip]
   12450:	adds	r2, r2, #1
   12454:	adc	r3, r3, #0
   12458:	strd	r2, [ip]
   1245c:	mov	r3, #0
   12460:	str	r3, [r0, #4]
   12464:	str	r3, [r0, #8]
   12468:	bx	lr
   1246c:	andeq	r8, r2, r0, lsr #25

00012470 <destroy_lexer@@Base>:
   12470:	push	{r4, lr}
   12474:	ldr	r4, [pc, #48]	; 124ac <destroy_lexer@@Base+0x3c>
   12478:	ldr	r0, [r0, #4]
   1247c:	ldrd	r2, [r4, #8]
   12480:	adds	r2, r2, #1
   12484:	adc	r3, r3, #0
   12488:	cmp	r0, #0
   1248c:	strd	r2, [r4, #8]
   12490:	popeq	{r4, pc}
   12494:	bl	1199c <free@plt>
   12498:	ldrd	r2, [r4, #16]
   1249c:	adds	r2, r2, #1
   124a0:	adc	r3, r3, #0
   124a4:	strd	r2, [r4, #16]
   124a8:	pop	{r4, pc}
   124ac:	andeq	r8, r2, r0, lsr #25

000124b0 <free_stack_base@@Base>:
   124b0:	ldr	r1, [pc, #16]	; 124c8 <free_stack_base@@Base+0x18>
   124b4:	ldrd	r2, [r1, #24]
   124b8:	adds	r2, r2, #1
   124bc:	adc	r3, r3, #0
   124c0:	strd	r2, [r1, #24]
   124c4:	b	1199c <free@plt>
   124c8:	andeq	r8, r2, r0, lsr #25

000124cc <push_back@@Base>:
   124cc:	push	{r4, r5, r6, lr}
   124d0:	mov	r4, r0
   124d4:	ldr	r0, [pc, #44]	; 12508 <push_back@@Base+0x3c>
   124d8:	mov	r5, r1
   124dc:	ldrd	r2, [r0, #32]
   124e0:	adds	r2, r2, #1
   124e4:	adc	r3, r3, #0
   124e8:	strd	r2, [r0, #32]
   124ec:	mov	r0, #8
   124f0:	bl	119f0 <malloc@plt>
   124f4:	ldr	r3, [r4, #4]
   124f8:	str	r5, [r0, #4]
   124fc:	str	r3, [r0]
   12500:	str	r0, [r4, #4]
   12504:	pop	{r4, r5, r6, pc}
   12508:	andeq	r8, r2, r0, lsr #25

0001250c <get_char@@Base>:
   1250c:	ldr	r1, [pc, #36]	; 12538 <get_char@@Base+0x2c>
   12510:	ldrd	r2, [r1, #40]	; 0x28
   12514:	adds	r2, r2, #1
   12518:	adc	r3, r3, #0
   1251c:	strd	r2, [r1, #40]	; 0x28
   12520:	ldr	r3, [r0, #8]
   12524:	ldr	r2, [r0]
   12528:	add	r1, r3, #1
   1252c:	str	r1, [r0, #8]
   12530:	ldrb	r0, [r2, r3]
   12534:	bx	lr
   12538:	andeq	r8, r2, r0, lsr #25

0001253c <push_back_chars@@Base>:
   1253c:	ldr	r3, [r0, #8]
   12540:	push	{r4, r6, r7, lr}
   12544:	cmp	r3, r1
   12548:	ldr	r4, [pc, #84]	; 125a4 <push_back_chars@@Base+0x68>
   1254c:	bcc	1256c <push_back_chars@@Base+0x30>
   12550:	ldrd	r6, [r4, #48]	; 0x30
   12554:	sub	r3, r3, r1
   12558:	str	r3, [r0, #8]
   1255c:	adds	r6, r6, #1
   12560:	adc	r7, r7, #0
   12564:	strd	r6, [r4, #48]	; 0x30
   12568:	pop	{r4, r6, r7, pc}
   1256c:	ldrd	r2, [r4, #56]	; 0x38
   12570:	ldr	r0, [pc, #48]	; 125a8 <push_back_chars@@Base+0x6c>
   12574:	adds	r2, r2, #1
   12578:	adc	r3, r3, #0
   1257c:	strd	r2, [r4, #56]	; 0x38
   12580:	ldr	r3, [pc, #36]	; 125ac <push_back_chars@@Base+0x70>
   12584:	ldr	r1, [r3]
   12588:	bl	11b04 <fputs@plt>
   1258c:	ldrd	r2, [r4, #64]	; 0x40
   12590:	mov	r0, #1
   12594:	adds	r2, r2, #1
   12598:	adc	r3, r3, #0
   1259c:	strd	r2, [r4, #64]	; 0x40
   125a0:	bl	11a38 <exit@plt>
   125a4:	andeq	r8, r2, r0, lsr #25
   125a8:	andeq	r7, r1, pc, lsl r4
   125ac:			; <UNDEFINED> instruction: 0x00028ab8

000125b0 <push_back_one_char@@Base>:
   125b0:	push	{r4, lr}
   125b4:	mov	r1, #1
   125b8:	ldr	r4, [pc, #36]	; 125e4 <push_back_one_char@@Base+0x34>
   125bc:	ldrd	r2, [r4, #72]	; 0x48
   125c0:	adds	r2, r2, #1
   125c4:	adc	r3, r3, #0
   125c8:	strd	r2, [r4, #72]	; 0x48
   125cc:	bl	1253c <push_back_chars@@Base>
   125d0:	ldrd	r2, [r4, #80]	; 0x50
   125d4:	adds	r2, r2, #1
   125d8:	adc	r3, r3, #0
   125dc:	strd	r2, [r4, #80]	; 0x50
   125e0:	pop	{r4, pc}
   125e4:	andeq	r8, r2, r0, lsr #25

000125e8 <next@@Base>:
   125e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125ec:	mov	r7, r0
   125f0:	ldr	r8, [r0, #4]
   125f4:	sub	sp, sp, #516	; 0x204
   125f8:	cmp	r8, #0
   125fc:	ldr	r6, [pc, #3076]	; 13208 <next@@Base+0xc20>
   12600:	beq	12634 <next@@Base+0x4c>
   12604:	ldr	r3, [r8]
   12608:	ldr	r4, [r8, #4]
   1260c:	str	r3, [r0, #4]
   12610:	mov	r0, r8
   12614:	bl	1199c <free@plt>
   12618:	ldrd	r2, [r6, #96]	; 0x60
   1261c:	adds	r2, r2, #1
   12620:	adc	r3, r3, #0
   12624:	strd	r2, [r6, #96]	; 0x60
   12628:	mov	r0, r4
   1262c:	add	sp, sp, #516	; 0x204
   12630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12634:	ldrd	r2, [r6, #88]	; 0x58
   12638:	add	r9, r6, #800	; 0x320
   1263c:	mov	r4, r8
   12640:	adds	r2, r2, #1
   12644:	adc	r3, r3, #0
   12648:	add	sl, r6, #288	; 0x120
   1264c:	strd	r2, [r6, #88]	; 0x58
   12650:	bl	1250c <get_char@@Base>
   12654:	mov	r5, r0
   12658:	mov	r0, r8
   1265c:	mov	r8, r9
   12660:	ldrd	r2, [r9, #-8]
   12664:	adds	r2, r2, #1
   12668:	adc	r3, r3, #0
   1266c:	cmp	r5, #0
   12670:	strd	r2, [r9, #-8]
   12674:	ldrd	r2, [r9]
   12678:	bne	126b4 <next@@Base+0xcc>
   1267c:	ldr	r5, [pc, #2952]	; 1320c <next@@Base+0xc24>
   12680:	mov	r0, #4
   12684:	ldrd	r2, [r5, #-8]
   12688:	adds	r2, r2, #1
   1268c:	adc	r3, r3, #0
   12690:	strd	r2, [r5, #-8]
   12694:	bl	119f0 <malloc@plt>
   12698:	mov	r4, r0
   1269c:	bl	12214 <init_token_eof@@Base>
   126a0:	ldrd	r2, [r5]
   126a4:	adds	r2, r2, #1
   126a8:	adc	r3, r3, #0
   126ac:	strd	r2, [r5]
   126b0:	b	12628 <next@@Base+0x40>
   126b4:	adds	r2, r2, #1
   126b8:	sub	r0, r0, #1
   126bc:	adc	r3, r3, #0
   126c0:	cmp	r0, #4
   126c4:	ldrls	pc, [pc, r0, lsl #2]
   126c8:	b	12788 <next@@Base+0x1a0>
   126cc:	andeq	r2, r1, r0, ror #13
   126d0:	andeq	r2, r1, r4, ror #28
   126d4:	andeq	r2, r1, ip, lsr #30
   126d8:	andeq	r3, r1, ip, lsr r0
   126dc:	andeq	r3, r1, r0, ror #2
   126e0:	strd	r2, [r8]
   126e4:	ldrd	r2, [r6, #104]	; 0x68
   126e8:	adds	r2, r2, #1
   126ec:	adc	r3, r3, #0
   126f0:	strd	r2, [r6, #104]	; 0x68
   126f4:	ldr	r6, [pc, #2836]	; 13210 <next@@Base+0xc28>
   126f8:	sub	r3, r5, #48	; 0x30
   126fc:	uxtb	r3, r3
   12700:	cmp	r3, #9
   12704:	bls	12e3c <next@@Base+0x854>
   12708:	ldrd	r2, [r6]
   1270c:	ldr	r5, [pc, #2816]	; 13214 <next@@Base+0xc2c>
   12710:	mov	r0, r7
   12714:	adds	r2, r2, #1
   12718:	adc	r3, r3, #0
   1271c:	strd	r2, [r6]
   12720:	bl	125b0 <push_back_one_char@@Base>
   12724:	ldrd	r2, [r5, #-8]
   12728:	mov	r0, #8
   1272c:	adds	r2, r2, #1
   12730:	adc	r3, r3, #0
   12734:	strd	r2, [r5, #-8]
   12738:	add	r3, sp, #512	; 0x200
   1273c:	add	r4, r3, r4
   12740:	mov	r3, #0
   12744:	strb	r3, [r4, #-512]	; 0xfffffe00
   12748:	bl	119f0 <malloc@plt>
   1274c:	mov	r4, r0
   12750:	mov	r0, sp
   12754:	bl	11aec <atoi@plt>
   12758:	ldrd	r2, [r5]
   1275c:	adds	r2, r2, #1
   12760:	adc	r3, r3, #0
   12764:	strd	r2, [r5], #16
   12768:	mov	r1, r0
   1276c:	mov	r0, r4
   12770:	bl	120ec <init_token_int_value@@Base>
   12774:	ldrd	r2, [r5, #-8]
   12778:	adds	r2, r2, #1
   1277c:	adc	r3, r3, #0
   12780:	strd	r2, [r5, #-8]
   12784:	b	12628 <next@@Base+0x40>
   12788:	cmp	r5, #32
   1278c:	cmpne	r5, #9
   12790:	strd	r2, [r8]
   12794:	moveq	fp, #1
   12798:	movne	fp, #0
   1279c:	bne	127c8 <next@@Base+0x1e0>
   127a0:	mov	r0, r7
   127a4:	bl	1250c <get_char@@Base>
   127a8:	mov	r5, r0
   127ac:	mov	r0, #0
   127b0:	ldr	r1, [pc, #2656]	; 13218 <next@@Base+0xc30>
   127b4:	ldrd	r2, [r1]
   127b8:	adds	r2, r2, #1
   127bc:	adc	r3, r3, #0
   127c0:	strd	r2, [r1]
   127c4:	b	12660 <next@@Base+0x78>
   127c8:	ldrd	r2, [r6, #112]	; 0x70
   127cc:	adds	r2, r2, #1
   127d0:	adc	r3, r3, #0
   127d4:	cmp	r5, #10
   127d8:	strd	r2, [r6, #112]	; 0x70
   127dc:	beq	127a0 <next@@Base+0x1b8>
   127e0:	cmp	r5, #48	; 0x30
   127e4:	bne	12820 <next@@Base+0x238>
   127e8:	ldrd	r2, [r6, #120]	; 0x78
   127ec:	mov	r0, #8
   127f0:	adds	r2, r2, #1
   127f4:	adc	r3, r3, #0
   127f8:	strd	r2, [r6, #120]	; 0x78
   127fc:	bl	119f0 <malloc@plt>
   12800:	mov	r1, fp
   12804:	mov	r4, r0
   12808:	bl	120ec <init_token_int_value@@Base>
   1280c:	ldrd	r2, [r6, #128]	; 0x80
   12810:	adds	r2, r2, #1
   12814:	adc	r3, r3, #0
   12818:	strd	r2, [r6, #128]	; 0x80
   1281c:	b	12628 <next@@Base+0x40>
   12820:	sub	r3, r5, #49	; 0x31
   12824:	uxtb	r3, r3
   12828:	cmp	r3, #8
   1282c:	bhi	12878 <next@@Base+0x290>
   12830:	ldrd	r2, [r6, #136]	; 0x88
   12834:	add	fp, r4, #1
   12838:	mov	r0, r7
   1283c:	adds	r2, r2, #1
   12840:	adc	r3, r3, #0
   12844:	strd	r2, [r6, #136]	; 0x88
   12848:	add	r3, sp, #512	; 0x200
   1284c:	add	r4, r3, r4
   12850:	strb	r5, [r4, #-512]	; 0xfffffe00
   12854:	bl	1250c <get_char@@Base>
   12858:	ldrd	r2, [r6, #144]	; 0x90
   1285c:	mov	r4, fp
   12860:	adds	r2, r2, #1
   12864:	adc	r3, r3, #0
   12868:	strd	r2, [r6, #144]	; 0x90
   1286c:	mov	r5, r0
   12870:	mov	r0, #1
   12874:	b	127b0 <next@@Base+0x1c8>
   12878:	cmp	r5, #40	; 0x28
   1287c:	bne	128b4 <next@@Base+0x2cc>
   12880:	ldrd	r2, [r6, #152]	; 0x98
   12884:	mov	r0, #4
   12888:	adds	r2, r2, #1
   1288c:	adc	r3, r3, #0
   12890:	strd	r2, [r6, #152]	; 0x98
   12894:	bl	119f0 <malloc@plt>
   12898:	mov	r4, r0
   1289c:	bl	1213c <init_token_opar@@Base>
   128a0:	ldrd	r2, [r6, #160]	; 0xa0
   128a4:	adds	r2, r2, #1
   128a8:	adc	r3, r3, #0
   128ac:	strd	r2, [r6, #160]	; 0xa0
   128b0:	b	12628 <next@@Base+0x40>
   128b4:	cmp	r5, #41	; 0x29
   128b8:	bne	128f0 <next@@Base+0x308>
   128bc:	ldrd	r2, [r6, #168]	; 0xa8
   128c0:	mov	r0, #4
   128c4:	adds	r2, r2, #1
   128c8:	adc	r3, r3, #0
   128cc:	strd	r2, [r6, #168]	; 0xa8
   128d0:	bl	119f0 <malloc@plt>
   128d4:	mov	r4, r0
   128d8:	bl	12160 <init_token_cpar@@Base>
   128dc:	ldrd	r2, [r6, #176]	; 0xb0
   128e0:	adds	r2, r2, #1
   128e4:	adc	r3, r3, #0
   128e8:	strd	r2, [r6, #176]	; 0xb0
   128ec:	b	12628 <next@@Base+0x40>
   128f0:	cmp	r5, #123	; 0x7b
   128f4:	bne	1292c <next@@Base+0x344>
   128f8:	ldrd	r2, [r6, #184]	; 0xb8
   128fc:	mov	r0, #4
   12900:	adds	r2, r2, #1
   12904:	adc	r3, r3, #0
   12908:	strd	r2, [r6, #184]	; 0xb8
   1290c:	bl	119f0 <malloc@plt>
   12910:	mov	r4, r0
   12914:	bl	12184 <init_token_obra@@Base>
   12918:	ldrd	r2, [r6, #192]	; 0xc0
   1291c:	adds	r2, r2, #1
   12920:	adc	r3, r3, #0
   12924:	strd	r2, [r6, #192]	; 0xc0
   12928:	b	12628 <next@@Base+0x40>
   1292c:	cmp	r5, #125	; 0x7d
   12930:	bne	12968 <next@@Base+0x380>
   12934:	ldrd	r2, [r6, #200]	; 0xc8
   12938:	mov	r0, #4
   1293c:	adds	r2, r2, #1
   12940:	adc	r3, r3, #0
   12944:	strd	r2, [r6, #200]	; 0xc8
   12948:	bl	119f0 <malloc@plt>
   1294c:	mov	r4, r0
   12950:	bl	121a8 <init_token_cbra@@Base>
   12954:	ldrd	r2, [r6, #208]	; 0xd0
   12958:	adds	r2, r2, #1
   1295c:	adc	r3, r3, #0
   12960:	strd	r2, [r6, #208]	; 0xd0
   12964:	b	12628 <next@@Base+0x40>
   12968:	cmp	r5, #59	; 0x3b
   1296c:	bne	129a4 <next@@Base+0x3bc>
   12970:	ldrd	r2, [r6, #216]	; 0xd8
   12974:	mov	r0, #4
   12978:	adds	r2, r2, #1
   1297c:	adc	r3, r3, #0
   12980:	strd	r2, [r6, #216]	; 0xd8
   12984:	bl	119f0 <malloc@plt>
   12988:	mov	r4, r0
   1298c:	bl	121f0 <init_token_semicolon@@Base>
   12990:	ldrd	r2, [r6, #224]	; 0xe0
   12994:	adds	r2, r2, #1
   12998:	adc	r3, r3, #0
   1299c:	strd	r2, [r6, #224]	; 0xe0
   129a0:	b	12628 <next@@Base+0x40>
   129a4:	add	r3, sp, #512	; 0x200
   129a8:	cmp	r5, #101	; 0x65
   129ac:	add	r1, r3, r4
   129b0:	bne	129f4 <next@@Base+0x40c>
   129b4:	ldrd	r2, [r6, #232]	; 0xe8
   129b8:	mov	r0, r7
   129bc:	add	r4, r4, #1
   129c0:	adds	r2, r2, #1
   129c4:	adc	r3, r3, #0
   129c8:	strd	r2, [r6, #232]	; 0xe8
   129cc:	mov	r3, #101	; 0x65
   129d0:	strb	r3, [r1, #-512]	; 0xfffffe00
   129d4:	bl	1250c <get_char@@Base>
   129d8:	ldrd	r2, [r6, #240]	; 0xf0
   129dc:	adds	r2, r2, #1
   129e0:	adc	r3, r3, #0
   129e4:	strd	r2, [r6, #240]	; 0xf0
   129e8:	mov	r5, r0
   129ec:	mov	r0, #5
   129f0:	b	127b0 <next@@Base+0x1c8>
   129f4:	cmp	r5, #105	; 0x69
   129f8:	bne	12a3c <next@@Base+0x454>
   129fc:	ldrd	r2, [r6, #248]	; 0xf8
   12a00:	mov	r0, r7
   12a04:	strb	r5, [r1, #-512]	; 0xfffffe00
   12a08:	adds	r2, r2, #1
   12a0c:	adc	r3, r3, #0
   12a10:	add	r4, r4, #1
   12a14:	strd	r2, [r6, #248]	; 0xf8
   12a18:	bl	1250c <get_char@@Base>
   12a1c:	ldr	r1, [pc, #2040]	; 1321c <next@@Base+0xc34>
   12a20:	ldrd	r2, [r1]
   12a24:	adds	r2, r2, #1
   12a28:	adc	r3, r3, #0
   12a2c:	strd	r2, [r1]
   12a30:	mov	r5, r0
   12a34:	mov	r0, #2
   12a38:	b	127b0 <next@@Base+0x1c8>
   12a3c:	cmp	r5, #109	; 0x6d
   12a40:	bne	12a84 <next@@Base+0x49c>
   12a44:	ldr	fp, [pc, #2004]	; 13220 <next@@Base+0xc38>
   12a48:	mov	r0, r7
   12a4c:	strb	r5, [r1, #-512]	; 0xfffffe00
   12a50:	ldrd	r2, [fp, #-8]
   12a54:	add	r4, r4, #1
   12a58:	adds	r2, r2, #1
   12a5c:	adc	r3, r3, #0
   12a60:	strd	r2, [fp, #-8]
   12a64:	bl	1250c <get_char@@Base>
   12a68:	ldrd	r2, [fp]
   12a6c:	adds	r2, r2, #1
   12a70:	adc	r3, r3, #0
   12a74:	strd	r2, [fp]
   12a78:	mov	r5, r0
   12a7c:	mov	r0, #3
   12a80:	b	127b0 <next@@Base+0x1c8>
   12a84:	cmp	r5, #114	; 0x72
   12a88:	bne	12ac8 <next@@Base+0x4e0>
   12a8c:	ldrd	r2, [sl, #-8]
   12a90:	mov	r0, r7
   12a94:	strb	r5, [r1, #-512]	; 0xfffffe00
   12a98:	adds	r2, r2, #1
   12a9c:	adc	r3, r3, #0
   12aa0:	add	r4, r4, #1
   12aa4:	strd	r2, [sl, #-8]
   12aa8:	bl	1250c <get_char@@Base>
   12aac:	ldrd	r2, [sl]
   12ab0:	adds	r2, r2, #1
   12ab4:	adc	r3, r3, #0
   12ab8:	strd	r2, [sl]
   12abc:	mov	r5, r0
   12ac0:	mov	r0, #4
   12ac4:	b	127b0 <next@@Base+0x1c8>
   12ac8:	cmp	r5, #33	; 0x21
   12acc:	bne	12ba0 <next@@Base+0x5b8>
   12ad0:	ldr	r6, [pc, #1868]	; 13224 <next@@Base+0xc3c>
   12ad4:	mov	r0, r7
   12ad8:	strb	r5, [r1, #-512]	; 0xfffffe00
   12adc:	ldrd	r2, [r6, #-8]
   12ae0:	add	r5, r6, #16
   12ae4:	adds	r2, r2, #1
   12ae8:	adc	r3, r3, #0
   12aec:	strd	r2, [r6, #-8]
   12af0:	bl	1250c <get_char@@Base>
   12af4:	mov	r8, r0
   12af8:	mov	r0, #8
   12afc:	bl	119f0 <malloc@plt>
   12b00:	cmp	r8, #61	; 0x3d
   12b04:	mov	r4, r0
   12b08:	beq	12b70 <next@@Base+0x588>
   12b0c:	ldrd	r2, [r6]
   12b10:	mov	r0, r7
   12b14:	adds	r2, r2, #1
   12b18:	adc	r3, r3, #0
   12b1c:	strd	r2, [r6]
   12b20:	bl	125b0 <push_back_one_char@@Base>
   12b24:	mov	r0, #2
   12b28:	bl	119f0 <malloc@plt>
   12b2c:	ldrb	r3, [sp]
   12b30:	strb	r3, [r0]
   12b34:	mov	r3, #0
   12b38:	strb	r3, [r0, #1]
   12b3c:	ldrd	r2, [r5, #-8]
   12b40:	adds	r2, r2, #1
   12b44:	adc	r3, r3, #0
   12b48:	strd	r2, [r5, #-8]
   12b4c:	mov	r1, r0
   12b50:	mov	r0, r4
   12b54:	bl	12280 <init_token_boolean_op@@Base>
   12b58:	ldr	r1, [pc, #1736]	; 13228 <next@@Base+0xc40>
   12b5c:	ldrd	r2, [r1, #-8]
   12b60:	adds	r2, r2, #1
   12b64:	adc	r3, r3, #0
   12b68:	strd	r2, [r1, #-8]
   12b6c:	b	12628 <next@@Base+0x40>
   12b70:	mov	r0, #3
   12b74:	bl	119f0 <malloc@plt>
   12b78:	ldrb	r3, [sp]
   12b7c:	strb	r3, [r0]
   12b80:	mov	r3, #0
   12b84:	strb	r3, [r0, #2]
   12b88:	ldrd	r2, [r5]
   12b8c:	strb	r8, [r0, #1]
   12b90:	adds	r2, r2, #1
   12b94:	adc	r3, r3, #0
   12b98:	strd	r2, [r5]
   12b9c:	b	12b4c <next@@Base+0x564>
   12ba0:	and	r3, r5, #253	; 0xfd
   12ba4:	cmp	r3, #60	; 0x3c
   12ba8:	bne	12c78 <next@@Base+0x690>
   12bac:	ldr	r8, [pc, #1652]	; 13228 <next@@Base+0xc40>
   12bb0:	mov	r0, r7
   12bb4:	mov	r6, r8
   12bb8:	ldrd	r2, [r8]
   12bbc:	strb	r5, [r1, #-512]	; 0xfffffe00
   12bc0:	adds	r2, r2, #1
   12bc4:	adc	r3, r3, #0
   12bc8:	strd	r2, [r6], #32
   12bcc:	bl	1250c <get_char@@Base>
   12bd0:	mov	r5, r0
   12bd4:	mov	r0, #8
   12bd8:	bl	119f0 <malloc@plt>
   12bdc:	cmp	r5, #61	; 0x3d
   12be0:	mov	r4, r0
   12be4:	beq	12c48 <next@@Base+0x660>
   12be8:	ldrd	r2, [r8, #8]
   12bec:	mov	r0, r7
   12bf0:	adds	r2, r2, #1
   12bf4:	adc	r3, r3, #0
   12bf8:	strd	r2, [r8, #8]
   12bfc:	bl	125b0 <push_back_one_char@@Base>
   12c00:	mov	r0, #2
   12c04:	bl	119f0 <malloc@plt>
   12c08:	ldrb	r3, [sp]
   12c0c:	strb	r3, [r0]
   12c10:	mov	r3, #0
   12c14:	strb	r3, [r0, #1]
   12c18:	ldrd	r2, [r8, #16]
   12c1c:	adds	r2, r2, #1
   12c20:	adc	r3, r3, #0
   12c24:	strd	r2, [r8, #16]
   12c28:	mov	r1, r0
   12c2c:	mov	r0, r4
   12c30:	bl	12280 <init_token_boolean_op@@Base>
   12c34:	ldrd	r2, [r6]
   12c38:	adds	r2, r2, #1
   12c3c:	adc	r3, r3, #0
   12c40:	strd	r2, [r6]
   12c44:	b	12628 <next@@Base+0x40>
   12c48:	mov	r0, #3
   12c4c:	bl	119f0 <malloc@plt>
   12c50:	ldrb	r3, [sp]
   12c54:	strb	r3, [r0]
   12c58:	mov	r3, #0
   12c5c:	strb	r3, [r0, #2]
   12c60:	ldrd	r2, [r6, #-8]
   12c64:	strb	r5, [r0, #1]
   12c68:	adds	r2, r2, #1
   12c6c:	adc	r3, r3, #0
   12c70:	strd	r2, [r6, #-8]
   12c74:	b	12c28 <next@@Base+0x640>
   12c78:	cmp	r5, #61	; 0x3d
   12c7c:	bne	12ccc <next@@Base+0x6e4>
   12c80:	ldr	r6, [pc, #1444]	; 1322c <next@@Base+0xc44>
   12c84:	mov	r0, r7
   12c88:	strb	r5, [r1, #-512]	; 0xfffffe00
   12c8c:	ldrd	r2, [r6, #-8]
   12c90:	adds	r2, r2, #1
   12c94:	adc	r3, r3, #0
   12c98:	strd	r2, [r6, #-8]
   12c9c:	bl	1250c <get_char@@Base>
   12ca0:	mov	r7, r0
   12ca4:	mov	r0, #8
   12ca8:	bl	119f0 <malloc@plt>
   12cac:	cmp	r7, #61	; 0x3d
   12cb0:	mov	r4, r0
   12cb4:	beq	12d0c <next@@Base+0x724>
   12cb8:	ldrd	r2, [r6]
   12cbc:	adds	r2, r2, #1
   12cc0:	adc	r3, r3, #0
   12cc4:	strd	r2, [r6]
   12cc8:	b	12e34 <next@@Base+0x84c>
   12ccc:	cmp	r5, #124	; 0x7c
   12cd0:	bne	12d58 <next@@Base+0x770>
   12cd4:	ldr	r6, [pc, #1364]	; 13230 <next@@Base+0xc48>
   12cd8:	mov	r0, r7
   12cdc:	strb	r5, [r1, #-512]	; 0xfffffe00
   12ce0:	ldrd	r2, [r6, #-8]
   12ce4:	adds	r2, r2, #1
   12ce8:	adc	r3, r3, #0
   12cec:	strd	r2, [r6, #-8]
   12cf0:	bl	1250c <get_char@@Base>
   12cf4:	mov	r7, r0
   12cf8:	mov	r0, #8
   12cfc:	bl	119f0 <malloc@plt>
   12d00:	cmp	r7, #124	; 0x7c
   12d04:	mov	r4, r0
   12d08:	b	12cb4 <next@@Base+0x6cc>
   12d0c:	ldrd	r2, [r6, #8]
   12d10:	mov	r0, #3
   12d14:	adds	r2, r2, #1
   12d18:	adc	r3, r3, #0
   12d1c:	strd	r2, [r6, #8]
   12d20:	bl	119f0 <malloc@plt>
   12d24:	ldrb	r3, [sp]
   12d28:	strb	r3, [r0]
   12d2c:	mov	r3, #0
   12d30:	strb	r3, [r0, #2]
   12d34:	mov	r1, r0
   12d38:	strb	r5, [r0, #1]
   12d3c:	mov	r0, r4
   12d40:	bl	12280 <init_token_boolean_op@@Base>
   12d44:	ldrd	r2, [r6, #16]
   12d48:	adds	r2, r2, #1
   12d4c:	adc	r3, r3, #0
   12d50:	strd	r2, [r6, #16]
   12d54:	b	12628 <next@@Base+0x40>
   12d58:	ldr	r6, [pc, #1236]	; 13234 <next@@Base+0xc4c>
   12d5c:	cmp	r5, #38	; 0x26
   12d60:	add	r8, r6, #32
   12d64:	bne	12e00 <next@@Base+0x818>
   12d68:	ldrd	r2, [r6, #-8]
   12d6c:	mov	r0, r7
   12d70:	strb	r5, [r1, #-512]	; 0xfffffe00
   12d74:	adds	r2, r2, #1
   12d78:	adc	r3, r3, #0
   12d7c:	add	r6, r6, #16
   12d80:	strd	r2, [r6, #-24]	; 0xffffffe8
   12d84:	bl	1250c <get_char@@Base>
   12d88:	mov	r7, r0
   12d8c:	mov	r0, #8
   12d90:	bl	119f0 <malloc@plt>
   12d94:	cmp	r7, #38	; 0x26
   12d98:	mov	r4, r0
   12d9c:	beq	12db4 <next@@Base+0x7cc>
   12da0:	ldrd	r2, [r6, #-8]
   12da4:	adds	r2, r2, #1
   12da8:	adc	r3, r3, #0
   12dac:	strd	r2, [r6, #-8]
   12db0:	b	12e34 <next@@Base+0x84c>
   12db4:	ldrd	r2, [r6]
   12db8:	mov	r0, #3
   12dbc:	adds	r2, r2, #1
   12dc0:	adc	r3, r3, #0
   12dc4:	strd	r2, [r6]
   12dc8:	bl	119f0 <malloc@plt>
   12dcc:	ldrb	r3, [sp]
   12dd0:	strb	r3, [r0]
   12dd4:	mov	r3, #0
   12dd8:	mov	r1, r0
   12ddc:	strb	r5, [r0, #1]
   12de0:	strb	r3, [r0, #2]
   12de4:	mov	r0, r4
   12de8:	bl	12280 <init_token_boolean_op@@Base>
   12dec:	ldrd	r2, [r8, #-8]
   12df0:	adds	r2, r2, #1
   12df4:	adc	r3, r3, #0
   12df8:	strd	r2, [r8, #-8]
   12dfc:	b	12628 <next@@Base+0x40>
   12e00:	ldrd	r2, [r6]
   12e04:	ldr	r1, [pc, #1068]	; 13238 <next@@Base+0xc50>
   12e08:	adds	r2, r2, #1
   12e0c:	adc	r3, r3, #0
   12e10:	strd	r2, [r6]
   12e14:	ldr	r3, [pc, #1056]	; 1323c <next@@Base+0xc54>
   12e18:	mov	r2, r5
   12e1c:	ldr	r0, [r3]
   12e20:	bl	11a5c <fprintf@plt>
   12e24:	ldrd	r2, [r8]
   12e28:	adds	r2, r2, #1
   12e2c:	adc	r3, r3, #0
   12e30:	strd	r2, [r8]
   12e34:	mov	r0, #1
   12e38:	bl	11a38 <exit@plt>
   12e3c:	ldrd	r2, [r6, #-8]
   12e40:	mov	r0, r7
   12e44:	strb	r5, [sp, r4]
   12e48:	adds	r2, r2, #1
   12e4c:	adc	r3, r3, #0
   12e50:	add	r4, r4, #1
   12e54:	strd	r2, [r6, #-8]
   12e58:	bl	1250c <get_char@@Base>
   12e5c:	mov	r5, r0
   12e60:	b	126f8 <next@@Base+0x110>
   12e64:	ldr	r1, [pc, #980]	; 13240 <next@@Base+0xc58>
   12e68:	strd	r2, [r8]
   12e6c:	cmp	r5, #102	; 0x66
   12e70:	add	r3, sp, #512	; 0x200
   12e74:	add	r4, r3, r4
   12e78:	add	r8, r1, #32
   12e7c:	beq	12ed4 <next@@Base+0x8ec>
   12e80:	cmp	r5, #110	; 0x6e
   12e84:	bne	12f14 <next@@Base+0x92c>
   12e88:	ldrd	r2, [r1]
   12e8c:	mov	r6, r1
   12e90:	mov	r0, r7
   12e94:	adds	r2, r2, #1
   12e98:	adc	r3, r3, #0
   12e9c:	strb	r5, [r4, #-512]	; 0xfffffe00
   12ea0:	strd	r2, [r6], #16
   12ea4:	bl	1250c <get_char@@Base>
   12ea8:	cmp	r0, #116	; 0x74
   12eac:	bne	12da0 <next@@Base+0x7b8>
   12eb0:	ldrd	r2, [r6]
   12eb4:	mov	r0, #4
   12eb8:	adds	r2, r2, #1
   12ebc:	adc	r3, r3, #0
   12ec0:	strd	r2, [r6]
   12ec4:	bl	119f0 <malloc@plt>
   12ec8:	mov	r4, r0
   12ecc:	bl	120c8 <init_token_int_type@@Base>
   12ed0:	b	12dec <next@@Base+0x804>
   12ed4:	ldrd	r2, [r1, #-8]
   12ed8:	mov	r0, #4
   12edc:	strb	r5, [r4, #-512]	; 0xfffffe00
   12ee0:	adds	r2, r2, #1
   12ee4:	adc	r3, r3, #0
   12ee8:	strd	r2, [r1, #-8]
   12eec:	mov	r3, #0
   12ef0:	strb	r3, [r4, #-511]	; 0xfffffe01
   12ef4:	bl	119f0 <malloc@plt>
   12ef8:	mov	r4, r0
   12efc:	bl	12238 <init_token_if@@Base>
   12f00:	ldrd	r2, [r8]
   12f04:	adds	r2, r2, #1
   12f08:	adc	r3, r3, #0
   12f0c:	strd	r2, [r8]
   12f10:	b	12628 <next@@Base+0x40>
   12f14:	ldr	r1, [pc, #808]	; 13244 <next@@Base+0xc5c>
   12f18:	ldrd	r2, [r1]
   12f1c:	adds	r2, r2, #1
   12f20:	adc	r3, r3, #0
   12f24:	strd	r2, [r1]
   12f28:	b	12e34 <next@@Base+0x84c>
   12f2c:	cmp	r5, #97	; 0x61
   12f30:	strd	r2, [r8]
   12f34:	ldr	r8, [pc, #780]	; 13248 <next@@Base+0xc60>
   12f38:	beq	12f50 <next@@Base+0x968>
   12f3c:	ldrd	r2, [r8, #-8]
   12f40:	adds	r2, r2, #1
   12f44:	adc	r3, r3, #0
   12f48:	strd	r2, [r8, #-8]
   12f4c:	b	12e34 <next@@Base+0x84c>
   12f50:	ldrd	r2, [r8]
   12f54:	mov	r6, r8
   12f58:	mov	r0, r7
   12f5c:	adds	r2, r2, #1
   12f60:	adc	r3, r3, #0
   12f64:	add	sl, r4, #1
   12f68:	strd	r2, [r6], #16
   12f6c:	add	r3, sp, #512	; 0x200
   12f70:	add	r3, r3, r4
   12f74:	strb	r5, [r3, #-512]	; 0xfffffe00
   12f78:	bl	1250c <get_char@@Base>
   12f7c:	cmp	r0, #105	; 0x69
   12f80:	bne	12da0 <next@@Base+0x7b8>
   12f84:	ldrd	r2, [r6]
   12f88:	add	r9, r4, #2
   12f8c:	adds	r2, r2, #1
   12f90:	adc	r3, r3, #0
   12f94:	strd	r2, [r6]
   12f98:	add	r3, sp, #512	; 0x200
   12f9c:	add	sl, r3, sl
   12fa0:	strb	r0, [sl, #-512]	; 0xfffffe00
   12fa4:	mov	r0, r7
   12fa8:	bl	1250c <get_char@@Base>
   12fac:	add	r2, r8, #32
   12fb0:	cmp	r0, #110	; 0x6e
   12fb4:	beq	12fcc <next@@Base+0x9e4>
   12fb8:	ldrd	r0, [r2, #-8]
   12fbc:	adds	r0, r0, #1
   12fc0:	adc	r1, r1, #0
   12fc4:	strd	r0, [r2, #-8]
   12fc8:	b	12e34 <next@@Base+0x84c>
   12fcc:	ldrd	r6, [r2]
   12fd0:	add	r3, sp, #512	; 0x200
   12fd4:	add	r5, r4, #3
   12fd8:	adds	r6, r6, #1
   12fdc:	adc	r7, r7, #0
   12fe0:	add	r9, r3, r9
   12fe4:	add	r3, r3, r5
   12fe8:	strd	r6, [r2]
   12fec:	strb	r0, [r9, #-512]	; 0xfffffe00
   12ff0:	mov	r7, #0
   12ff4:	add	r0, r4, #4
   12ff8:	strb	r7, [r3, #-512]	; 0xfffffe00
   12ffc:	bl	119f0 <malloc@plt>
   13000:	mov	r2, r5
   13004:	mov	r1, sp
   13008:	mov	r6, r0
   1300c:	bl	11aa4 <strncpy@plt>
   13010:	strb	r7, [r6, r5]
   13014:	mov	r0, #8
   13018:	bl	119f0 <malloc@plt>
   1301c:	mov	r1, r6
   13020:	mov	r4, r0
   13024:	bl	12114 <init_token_function@@Base>
   13028:	ldrd	r0, [r8, #40]	; 0x28
   1302c:	adds	r0, r0, #1
   13030:	adc	r1, r1, #0
   13034:	strd	r0, [r8, #40]	; 0x28
   13038:	b	12628 <next@@Base+0x40>
   1303c:	cmp	r5, #101	; 0x65
   13040:	strd	r2, [r8]
   13044:	ldrne	r1, [pc, #512]	; 1324c <next@@Base+0xc64>
   13048:	bne	12f18 <next@@Base+0x930>
   1304c:	ldr	r6, [pc, #508]	; 13250 <next@@Base+0xc68>
   13050:	mov	r0, r7
   13054:	add	r9, r4, #1
   13058:	ldrd	r2, [r6, #-8]
   1305c:	adds	r2, r2, #1
   13060:	adc	r3, r3, #0
   13064:	strd	r2, [r6, #-8]
   13068:	add	r3, sp, #512	; 0x200
   1306c:	add	r3, r3, r4
   13070:	strb	r5, [r3, #-512]	; 0xfffffe00
   13074:	bl	1250c <get_char@@Base>
   13078:	cmp	r0, #116	; 0x74
   1307c:	bne	12cb8 <next@@Base+0x6d0>
   13080:	add	r5, r6, #16
   13084:	ldrd	r2, [r5, #-8]
   13088:	add	r8, r4, #2
   1308c:	adds	r2, r2, #1
   13090:	adc	r3, r3, #0
   13094:	strd	r2, [r5, #-8]
   13098:	add	r3, sp, #512	; 0x200
   1309c:	add	r9, r3, r9
   130a0:	strb	r0, [r9, #-512]	; 0xfffffe00
   130a4:	mov	r0, r7
   130a8:	bl	1250c <get_char@@Base>
   130ac:	cmp	r0, #117	; 0x75
   130b0:	beq	130c8 <next@@Base+0xae0>
   130b4:	ldrd	r2, [r5]
   130b8:	adds	r2, r2, #1
   130bc:	adc	r3, r3, #0
   130c0:	strd	r2, [r5]
   130c4:	b	12e34 <next@@Base+0x84c>
   130c8:	add	r5, r6, #32
   130cc:	ldrd	r2, [r5, #-8]
   130d0:	add	r4, r4, #3
   130d4:	adds	r2, r2, #1
   130d8:	adc	r3, r3, #0
   130dc:	strd	r2, [r5, #-8]
   130e0:	add	r3, sp, #512	; 0x200
   130e4:	add	r8, r3, r8
   130e8:	strb	r0, [r8, #-512]	; 0xfffffe00
   130ec:	mov	r0, r7
   130f0:	bl	1250c <get_char@@Base>
   130f4:	cmp	r0, #114	; 0x72
   130f8:	bne	130b4 <next@@Base+0xacc>
   130fc:	add	r5, r6, #48	; 0x30
   13100:	ldrd	r2, [r5, #-8]
   13104:	adds	r2, r2, #1
   13108:	adc	r3, r3, #0
   1310c:	strd	r2, [r5, #-8]
   13110:	add	r3, sp, #512	; 0x200
   13114:	add	r4, r3, r4
   13118:	strb	r0, [r4, #-512]	; 0xfffffe00
   1311c:	mov	r0, r7
   13120:	bl	1250c <get_char@@Base>
   13124:	cmp	r0, #110	; 0x6e
   13128:	bne	130b4 <next@@Base+0xacc>
   1312c:	ldrd	r2, [r6, #56]	; 0x38
   13130:	mov	r0, #4
   13134:	adds	r2, r2, #1
   13138:	adc	r3, r3, #0
   1313c:	strd	r2, [r6, #56]	; 0x38
   13140:	bl	119f0 <malloc@plt>
   13144:	mov	r4, r0
   13148:	bl	121cc <init_token_return@@Base>
   1314c:	ldrd	r2, [r6, #64]	; 0x40
   13150:	adds	r2, r2, #1
   13154:	adc	r3, r3, #0
   13158:	strd	r2, [r6, #64]	; 0x40
   1315c:	b	12628 <next@@Base+0x40>
   13160:	cmp	r5, #108	; 0x6c
   13164:	strd	r2, [r8]
   13168:	ldr	r6, [pc, #228]	; 13254 <next@@Base+0xc6c>
   1316c:	bne	12da0 <next@@Base+0x7b8>
   13170:	ldrd	r2, [r6]
   13174:	mov	r8, r6
   13178:	add	r9, r4, #1
   1317c:	adds	r2, r2, #1
   13180:	adc	r3, r3, #0
   13184:	mov	r0, r7
   13188:	strd	r2, [r8], #16
   1318c:	add	r3, sp, #512	; 0x200
   13190:	add	r4, r3, r4
   13194:	strb	r5, [r4, #-512]	; 0xfffffe00
   13198:	bl	1250c <get_char@@Base>
   1319c:	cmp	r0, #115	; 0x73
   131a0:	bne	12f3c <next@@Base+0x954>
   131a4:	ldrd	r2, [r8]
   131a8:	adds	r2, r2, #1
   131ac:	adc	r3, r3, #0
   131b0:	strd	r2, [r8]
   131b4:	add	r3, sp, #512	; 0x200
   131b8:	add	r9, r3, r9
   131bc:	strb	r0, [r9, #-512]	; 0xfffffe00
   131c0:	mov	r0, r7
   131c4:	bl	1250c <get_char@@Base>
   131c8:	add	r2, r6, #32
   131cc:	cmp	r0, #101	; 0x65
   131d0:	bne	12fb8 <next@@Base+0x9d0>
   131d4:	ldrd	r0, [r2]
   131d8:	adds	r0, r0, #1
   131dc:	adc	r1, r1, #0
   131e0:	strd	r0, [r2]
   131e4:	mov	r0, #4
   131e8:	bl	119f0 <malloc@plt>
   131ec:	mov	r4, r0
   131f0:	bl	1225c <init_token_else@@Base>
   131f4:	ldrd	r0, [r6, #40]	; 0x28
   131f8:	adds	r0, r0, #1
   131fc:	adc	r1, r1, #0
   13200:	strd	r0, [r6, #40]	; 0x28
   13204:	b	12628 <next@@Base+0x40>
   13208:	andeq	r8, r2, r0, lsr #25
   1320c:	ldrdeq	r8, [r2], -r0
   13210:	muleq	r2, r0, lr
   13214:	andeq	r8, r2, r0, lsr #29
   13218:			; <UNDEFINED> instruction: 0x00028fb0
   1321c:	andeq	r8, r2, r0, lsr #27
   13220:			; <UNDEFINED> instruction: 0x00028db0
   13224:	ldrdeq	r8, [r2], -r0
   13228:	strdeq	r8, [r2], -r0
   1322c:	andeq	r8, r2, r0, lsr #28
   13230:	andeq	r8, r2, r0, asr #28
   13234:	andeq	r8, r2, r0, ror #28
   13238:	andeq	r7, r1, r0, asr #8
   1323c:			; <UNDEFINED> instruction: 0x00028ab8
   13240:	andeq	r8, r2, r0, asr #29
   13244:			; <UNDEFINED> instruction: 0x00028eb0
   13248:	strdeq	r8, [r2], -r0
   1324c:	andeq	r8, r2, r0, lsr #30
   13250:	andeq	r8, r2, r0, lsr pc
   13254:	andeq	r8, r2, r0, lsl #31

00013258 <init_ast_base@@Base>:
   13258:	ldr	r3, [pc, #24]	; 13278 <init_ast_base@@Base+0x20>
   1325c:	push	{r4, r5, lr}
   13260:	ldrd	r4, [r3]
   13264:	stm	r0, {r1, r2}
   13268:	adds	r4, r4, #1
   1326c:	adc	r5, r5, #0
   13270:	strd	r4, [r3]
   13274:	pop	{r4, r5, pc}
   13278:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

0001327c <init_ast_base_single@@Base>:
   1327c:	ldr	ip, [pc, #28]	; 132a0 <init_ast_base_single@@Base+0x24>
   13280:	str	r1, [r0]
   13284:	ldrd	r2, [ip, #8]
   13288:	adds	r2, r2, #1
   1328c:	adc	r3, r3, #0
   13290:	strd	r2, [ip, #8]
   13294:	mov	r3, #0
   13298:	str	r3, [r0, #4]
   1329c:	bx	lr
   132a0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

000132a4 <init_node_id@@Base>:
   132a4:	ldr	ip, [pc, #32]	; 132cc <init_node_id@@Base+0x28>
   132a8:	str	r1, [r0, #8]
   132ac:	ldrd	r2, [ip, #16]
   132b0:	adds	r2, r2, #1
   132b4:	adc	r3, r3, #0
   132b8:	strd	r2, [ip, #16]
   132bc:	mov	r3, #0
   132c0:	str	r3, [r0]
   132c4:	str	r3, [r0, #4]
   132c8:	bx	lr
   132cc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

000132d0 <init_node_int@@Base>:
   132d0:	ldr	ip, [pc, #32]	; 132f8 <init_node_int@@Base+0x28>
   132d4:	str	r1, [r0, #8]
   132d8:	ldrd	r2, [ip, #24]
   132dc:	adds	r2, r2, #1
   132e0:	adc	r3, r3, #0
   132e4:	strd	r2, [ip, #24]
   132e8:	mov	r2, #1
   132ec:	mov	r3, #0
   132f0:	stm	r0, {r2, r3}
   132f4:	bx	lr
   132f8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

000132fc <init_node_function@@Base>:
   132fc:	ldr	r3, [pc, #40]	; 1332c <init_node_function@@Base+0x30>
   13300:	push	{r4, r5, lr}
   13304:	mov	ip, #0
   13308:	ldrd	r4, [r3, #32]
   1330c:	str	r1, [r0, #8]
   13310:	str	r2, [r0, #12]
   13314:	adds	r4, r4, #1
   13318:	adc	r5, r5, #0
   1331c:	strd	r4, [r3, #32]
   13320:	mov	r3, #2
   13324:	stm	r0, {r3, ip}
   13328:	pop	{r4, r5, pc}
   1332c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

00013330 <init_node_return@@Base>:
   13330:	ldr	ip, [pc, #32]	; 13358 <init_node_return@@Base+0x28>
   13334:	str	r1, [r0, #8]
   13338:	ldrd	r2, [ip, #40]	; 0x28
   1333c:	adds	r2, r2, #1
   13340:	adc	r3, r3, #0
   13344:	strd	r2, [ip, #40]	; 0x28
   13348:	mov	r2, #3
   1334c:	mov	r3, #0
   13350:	stm	r0, {r2, r3}
   13354:	bx	lr
   13358:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

0001335c <init_node_if@@Base>:
   1335c:	ldr	ip, [pc, #48]	; 13394 <init_node_if@@Base+0x38>
   13360:	push	{r4, r5, lr}
   13364:	ldrd	r4, [ip, #48]	; 0x30
   13368:	str	r1, [r0, #8]
   1336c:	str	r2, [r0, #12]
   13370:	adds	r4, r4, #1
   13374:	adc	r5, r5, #0
   13378:	str	r3, [r0, #16]
   1337c:	strd	r4, [ip, #48]	; 0x30
   13380:	mov	ip, #4
   13384:	str	ip, [r0]
   13388:	mov	ip, #0
   1338c:	str	ip, [r0, #4]
   13390:	pop	{r4, r5, pc}
   13394:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

00013398 <init_node_boolean_operator@@Base>:
   13398:	ldr	ip, [pc, #48]	; 133d0 <init_node_boolean_operator@@Base+0x38>
   1339c:	push	{r4, r5, lr}
   133a0:	ldrd	r4, [ip, #56]	; 0x38
   133a4:	str	r1, [r0, #16]
   133a8:	str	r2, [r0, #8]
   133ac:	adds	r4, r4, #1
   133b0:	adc	r5, r5, #0
   133b4:	str	r3, [r0, #12]
   133b8:	strd	r4, [ip, #56]	; 0x38
   133bc:	mov	ip, #0
   133c0:	str	ip, [r0, #4]
   133c4:	mov	ip, #5
   133c8:	str	ip, [r0]
   133cc:	pop	{r4, r5, pc}
   133d0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

000133d4 <free_node_boolean_operator@@Base>:
   133d4:	push	{r4, r5, r6, lr}
   133d8:	mov	r5, r0
   133dc:	ldr	r4, [pc, #120]	; 1345c <free_node_boolean_operator@@Base+0x88>
   133e0:	ldr	r0, [r0, #4]
   133e4:	ldrd	r2, [r4, #64]	; 0x40
   133e8:	adds	r2, r2, #1
   133ec:	adc	r3, r3, #0
   133f0:	cmp	r0, #0
   133f4:	strd	r2, [r4, #64]	; 0x40
   133f8:	beq	13420 <free_node_boolean_operator@@Base+0x4c>
   133fc:	ldrd	r2, [r4, #72]	; 0x48
   13400:	adds	r2, r2, #1
   13404:	adc	r3, r3, #0
   13408:	strd	r2, [r4, #72]	; 0x48
   1340c:	bl	13460 <free_node@@Base>
   13410:	ldrd	r2, [r4, #80]	; 0x50
   13414:	adds	r2, r2, #1
   13418:	adc	r3, r3, #0
   1341c:	strd	r2, [r4, #80]	; 0x50
   13420:	ldr	r0, [r5, #8]
   13424:	bl	13460 <free_node@@Base>
   13428:	ldrd	r2, [r4, #88]	; 0x58
   1342c:	ldr	r0, [r5, #12]
   13430:	adds	r2, r2, #1
   13434:	adc	r3, r3, #0
   13438:	strd	r2, [r4, #88]	; 0x58
   1343c:	bl	13460 <free_node@@Base>
   13440:	ldrd	r2, [r4, #96]	; 0x60
   13444:	mov	r0, r5
   13448:	adds	r2, r2, #1
   1344c:	adc	r3, r3, #0
   13450:	strd	r2, [r4, #96]	; 0x60
   13454:	pop	{r4, r5, r6, lr}
   13458:	b	1199c <free@plt>
   1345c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>

00013460 <free_node@@Base>:
   13460:	ldr	r3, [r0]
   13464:	push	{r4, lr}
   13468:	ldr	r4, [pc, #328]	; 135b8 <free_node@@Base+0x158>
   1346c:	cmp	r3, #5
   13470:	ldrls	pc, [pc, r3, lsl #2]
   13474:	b	13580 <free_node@@Base+0x120>
   13478:	muleq	r1, r0, r4
   1347c:			; <UNDEFINED> instruction: 0x000134b8
   13480:	andeq	r3, r1, r0, ror #9
   13484:	andeq	r3, r1, r8, lsl #10
   13488:	andeq	r3, r1, r0, lsr r5
   1348c:	andeq	r3, r1, r8, asr r5
   13490:	ldrd	r2, [r4, #112]	; 0x70
   13494:	adds	r2, r2, #1
   13498:	adc	r3, r3, #0
   1349c:	strd	r2, [r4, #112]	; 0x70
   134a0:	bl	1378c <free_node_id@@Base>
   134a4:	ldrd	r2, [r4, #208]	; 0xd0
   134a8:	adds	r2, r2, #1
   134ac:	adc	r3, r3, #0
   134b0:	strd	r2, [r4, #208]	; 0xd0
   134b4:	pop	{r4, pc}
   134b8:	ldrd	r2, [r4, #120]	; 0x78
   134bc:	adds	r2, r2, #1
   134c0:	adc	r3, r3, #0
   134c4:	strd	r2, [r4, #120]	; 0x78
   134c8:	bl	13730 <free_node_int@@Base>
   134cc:	ldrd	r2, [r4, #160]	; 0xa0
   134d0:	adds	r2, r2, #1
   134d4:	adc	r3, r3, #0
   134d8:	strd	r2, [r4, #160]	; 0xa0
   134dc:	pop	{r4, pc}
   134e0:	ldrd	r2, [r4, #128]	; 0x80
   134e4:	adds	r2, r2, #1
   134e8:	adc	r3, r3, #0
   134ec:	strd	r2, [r4, #128]	; 0x80
   134f0:	bl	136cc <free_node_function@@Base>
   134f4:	ldrd	r2, [r4, #168]	; 0xa8
   134f8:	adds	r2, r2, #1
   134fc:	adc	r3, r3, #0
   13500:	strd	r2, [r4, #168]	; 0xa8
   13504:	pop	{r4, pc}
   13508:	ldrd	r2, [r4, #136]	; 0x88
   1350c:	adds	r2, r2, #1
   13510:	adc	r3, r3, #0
   13514:	strd	r2, [r4, #136]	; 0x88
   13518:	bl	13670 <free_node_return@@Base>
   1351c:	ldrd	r2, [r4, #176]	; 0xb0
   13520:	adds	r2, r2, #1
   13524:	adc	r3, r3, #0
   13528:	strd	r2, [r4, #176]	; 0xb0
   1352c:	pop	{r4, pc}
   13530:	ldrd	r2, [r4, #144]	; 0x90
   13534:	adds	r2, r2, #1
   13538:	adc	r3, r3, #0
   1353c:	strd	r2, [r4, #144]	; 0x90
   13540:	bl	135c4 <free_node_if@@Base>
   13544:	ldrd	r2, [r4, #184]	; 0xb8
   13548:	adds	r2, r2, #1
   1354c:	adc	r3, r3, #0
   13550:	strd	r2, [r4, #184]	; 0xb8
   13554:	pop	{r4, pc}
   13558:	ldrd	r2, [r4, #152]	; 0x98
   1355c:	adds	r2, r2, #1
   13560:	adc	r3, r3, #0
   13564:	strd	r2, [r4, #152]	; 0x98
   13568:	bl	133d4 <free_node_boolean_operator@@Base>
   1356c:	ldrd	r2, [r4, #192]	; 0xc0
   13570:	adds	r2, r2, #1
   13574:	adc	r3, r3, #0
   13578:	strd	r2, [r4, #192]	; 0xc0
   1357c:	pop	{r4, pc}
   13580:	ldrd	r2, [r4, #104]	; 0x68
   13584:	ldr	r0, [pc, #48]	; 135bc <free_node@@Base+0x15c>
   13588:	adds	r2, r2, #1
   1358c:	adc	r3, r3, #0
   13590:	strd	r2, [r4, #104]	; 0x68
   13594:	ldr	r3, [pc, #36]	; 135c0 <free_node@@Base+0x160>
   13598:	ldr	r1, [r3]
   1359c:	bl	11b04 <fputs@plt>
   135a0:	ldrd	r2, [r4, #200]	; 0xc8
   135a4:	mov	r0, #1
   135a8:	adds	r2, r2, #1
   135ac:	adc	r3, r3, #0
   135b0:	strd	r2, [r4, #200]	; 0xc8
   135b4:	bl	11a38 <exit@plt>
   135b8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   135bc:			; <UNDEFINED> instruction: 0x000174b8
   135c0:			; <UNDEFINED> instruction: 0x00028ab8

000135c4 <free_node_if@@Base>:
   135c4:	push	{r4, r5, r6, lr}
   135c8:	mov	r5, r0
   135cc:	ldr	r4, [pc, #148]	; 13668 <free_node_if@@Base+0xa4>
   135d0:	ldr	r0, [r0, #4]
   135d4:	ldrd	r2, [r4, #216]	; 0xd8
   135d8:	adds	r2, r2, #1
   135dc:	adc	r3, r3, #0
   135e0:	cmp	r0, #0
   135e4:	strd	r2, [r4, #216]	; 0xd8
   135e8:	beq	13610 <free_node_if@@Base+0x4c>
   135ec:	ldrd	r2, [r4, #224]	; 0xe0
   135f0:	adds	r2, r2, #1
   135f4:	adc	r3, r3, #0
   135f8:	strd	r2, [r4, #224]	; 0xe0
   135fc:	bl	13460 <free_node@@Base>
   13600:	ldrd	r2, [r4, #232]	; 0xe8
   13604:	adds	r2, r2, #1
   13608:	adc	r3, r3, #0
   1360c:	strd	r2, [r4, #232]	; 0xe8
   13610:	ldr	r0, [r5, #8]
   13614:	bl	13460 <free_node@@Base>
   13618:	ldrd	r2, [r4, #240]	; 0xf0
   1361c:	ldr	r0, [r5, #12]
   13620:	adds	r2, r2, #1
   13624:	adc	r3, r3, #0
   13628:	strd	r2, [r4, #240]	; 0xf0
   1362c:	bl	13460 <free_node@@Base>
   13630:	ldrd	r2, [r4, #248]	; 0xf8
   13634:	ldr	r0, [r5, #16]
   13638:	adds	r2, r2, #1
   1363c:	adc	r3, r3, #0
   13640:	strd	r2, [r4, #248]	; 0xf8
   13644:	bl	13460 <free_node@@Base>
   13648:	ldr	r1, [pc, #28]	; 1366c <free_node_if@@Base+0xa8>
   1364c:	mov	r0, r5
   13650:	pop	{r4, r5, r6, lr}
   13654:	ldrd	r2, [r1]
   13658:	adds	r2, r2, #1
   1365c:	adc	r3, r3, #0
   13660:	strd	r2, [r1]
   13664:	b	1199c <free@plt>
   13668:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1366c:	ldrdeq	r9, [r2], -r8

00013670 <free_node_return@@Base>:
   13670:	push	{r4, r5, r6, lr}
   13674:	mov	r5, r0
   13678:	ldr	r4, [pc, #72]	; 136c8 <free_node_return@@Base+0x58>
   1367c:	ldr	r0, [r0, #4]
   13680:	ldrd	r2, [r4, #-8]
   13684:	adds	r2, r2, #1
   13688:	adc	r3, r3, #0
   1368c:	cmp	r0, #0
   13690:	strd	r2, [r4, #-8]
   13694:	beq	136bc <free_node_return@@Base+0x4c>
   13698:	ldrd	r2, [r4]
   1369c:	adds	r2, r2, #1
   136a0:	adc	r3, r3, #0
   136a4:	strd	r2, [r4]
   136a8:	bl	13460 <free_node@@Base>
   136ac:	ldrd	r2, [r4, #8]
   136b0:	adds	r2, r2, #1
   136b4:	adc	r3, r3, #0
   136b8:	strd	r2, [r4, #8]
   136bc:	mov	r0, r5
   136c0:	pop	{r4, r5, r6, lr}
   136c4:	b	1199c <free@plt>
   136c8:	andeq	r9, r2, r8, ror #1

000136cc <free_node_function@@Base>:
   136cc:	push	{r4, r5, r6, lr}
   136d0:	mov	r5, r0
   136d4:	ldr	r4, [pc, #80]	; 1372c <free_node_function@@Base+0x60>
   136d8:	ldr	r0, [r0, #4]
   136dc:	ldrd	r2, [r4]
   136e0:	adds	r2, r2, #1
   136e4:	adc	r3, r3, #0
   136e8:	cmp	r0, #0
   136ec:	strd	r2, [r4]
   136f0:	beq	13718 <free_node_function@@Base+0x4c>
   136f4:	ldrd	r2, [r4, #8]
   136f8:	adds	r2, r2, #1
   136fc:	adc	r3, r3, #0
   13700:	strd	r2, [r4, #8]
   13704:	bl	13460 <free_node@@Base>
   13708:	ldrd	r2, [r4, #16]
   1370c:	adds	r2, r2, #1
   13710:	adc	r3, r3, #0
   13714:	strd	r2, [r4, #16]
   13718:	ldr	r0, [r5, #8]
   1371c:	bl	1199c <free@plt>
   13720:	mov	r0, r5
   13724:	pop	{r4, r5, r6, lr}
   13728:	b	1199c <free@plt>
   1372c:	strdeq	r9, [r2], -r8

00013730 <free_node_int@@Base>:
   13730:	push	{r4, r5, r6, lr}
   13734:	mov	r5, r0
   13738:	ldr	r4, [pc, #72]	; 13788 <free_node_int@@Base+0x58>
   1373c:	ldr	r0, [r0, #4]
   13740:	ldrd	r2, [r4, #-8]
   13744:	adds	r2, r2, #1
   13748:	adc	r3, r3, #0
   1374c:	cmp	r0, #0
   13750:	strd	r2, [r4, #-8]
   13754:	beq	1377c <free_node_int@@Base+0x4c>
   13758:	ldrd	r2, [r4]
   1375c:	adds	r2, r2, #1
   13760:	adc	r3, r3, #0
   13764:	strd	r2, [r4]
   13768:	bl	13460 <free_node@@Base>
   1376c:	ldrd	r2, [r4, #8]
   13770:	adds	r2, r2, #1
   13774:	adc	r3, r3, #0
   13778:	strd	r2, [r4, #8]
   1377c:	mov	r0, r5
   13780:	pop	{r4, r5, r6, lr}
   13784:	b	1199c <free@plt>
   13788:	andeq	r9, r2, r8, lsl r1

0001378c <free_node_id@@Base>:
   1378c:	push	{r4, r5, r6, lr}
   13790:	mov	r5, r0
   13794:	ldr	r4, [pc, #72]	; 137e4 <free_node_id@@Base+0x58>
   13798:	ldr	r0, [r0, #4]
   1379c:	ldrd	r2, [r4]
   137a0:	adds	r2, r2, #1
   137a4:	adc	r3, r3, #0
   137a8:	cmp	r0, #0
   137ac:	strd	r2, [r4]
   137b0:	beq	137d8 <free_node_id@@Base+0x4c>
   137b4:	ldrd	r2, [r4, #8]
   137b8:	adds	r2, r2, #1
   137bc:	adc	r3, r3, #0
   137c0:	strd	r2, [r4, #8]
   137c4:	bl	13460 <free_node@@Base>
   137c8:	ldrd	r2, [r4, #16]
   137cc:	adds	r2, r2, #1
   137d0:	adc	r3, r3, #0
   137d4:	strd	r2, [r4, #16]
   137d8:	mov	r0, r5
   137dc:	pop	{r4, r5, r6, lr}
   137e0:	b	1199c <free@plt>
   137e4:	andeq	r9, r2, r8, lsr #2

000137e8 <get_boolean_op_value@@Base>:
   137e8:	push	{r4, r5, r6, lr}
   137ec:	mov	r1, #2
   137f0:	ldr	r4, [pc, #532]	; 13a0c <get_boolean_op_value@@Base+0x224>
   137f4:	ldr	r6, [r0, #4]
   137f8:	ldrd	r2, [r4, #-8]
   137fc:	mov	r0, r6
   13800:	adds	r2, r2, #1
   13804:	adc	r3, r3, #0
   13808:	strd	r2, [r4, #-8]
   1380c:	bl	11ac8 <strnlen@plt>
   13810:	cmp	r0, #2
   13814:	bne	13948 <get_boolean_op_value@@Base+0x160>
   13818:	ldrd	r2, [r4]
   1381c:	mov	r5, r0
   13820:	ldr	r1, [pc, #488]	; 13a10 <get_boolean_op_value@@Base+0x228>
   13824:	adds	r2, r2, #1
   13828:	adc	r3, r3, #0
   1382c:	strd	r2, [r4]
   13830:	mov	r2, r0
   13834:	mov	r0, r6
   13838:	bl	11b10 <strncmp@plt>
   1383c:	cmp	r0, #0
   13840:	popeq	{r4, r5, r6, pc}
   13844:	ldrd	r2, [r4, #16]
   13848:	ldr	r1, [pc, #452]	; 13a14 <get_boolean_op_value@@Base+0x22c>
   1384c:	mov	r0, r6
   13850:	adds	r2, r2, #1
   13854:	adc	r3, r3, #0
   13858:	strd	r2, [r4, #16]
   1385c:	mov	r2, r5
   13860:	bl	11b10 <strncmp@plt>
   13864:	cmp	r0, #0
   13868:	beq	139e4 <get_boolean_op_value@@Base+0x1fc>
   1386c:	ldrd	r2, [r4, #24]
   13870:	ldr	r1, [pc, #416]	; 13a18 <get_boolean_op_value@@Base+0x230>
   13874:	mov	r0, r6
   13878:	adds	r2, r2, #1
   1387c:	adc	r3, r3, #0
   13880:	strd	r2, [r4, #24]
   13884:	mov	r2, r5
   13888:	bl	11b10 <strncmp@plt>
   1388c:	cmp	r0, #0
   13890:	beq	139ec <get_boolean_op_value@@Base+0x204>
   13894:	ldrd	r2, [r4, #32]
   13898:	ldr	r1, [pc, #380]	; 13a1c <get_boolean_op_value@@Base+0x234>
   1389c:	mov	r0, r6
   138a0:	adds	r2, r2, #1
   138a4:	adc	r3, r3, #0
   138a8:	strd	r2, [r4, #32]
   138ac:	mov	r2, r5
   138b0:	bl	11b10 <strncmp@plt>
   138b4:	cmp	r0, #0
   138b8:	beq	139f4 <get_boolean_op_value@@Base+0x20c>
   138bc:	ldrd	r2, [r4, #40]	; 0x28
   138c0:	ldr	r1, [pc, #344]	; 13a20 <get_boolean_op_value@@Base+0x238>
   138c4:	mov	r0, r6
   138c8:	adds	r2, r2, #1
   138cc:	adc	r3, r3, #0
   138d0:	strd	r2, [r4, #40]	; 0x28
   138d4:	mov	r2, r5
   138d8:	bl	11b10 <strncmp@plt>
   138dc:	cmp	r0, #0
   138e0:	beq	139fc <get_boolean_op_value@@Base+0x214>
   138e4:	ldrd	r2, [r4, #48]	; 0x30
   138e8:	ldr	r1, [pc, #308]	; 13a24 <get_boolean_op_value@@Base+0x23c>
   138ec:	mov	r0, r6
   138f0:	adds	r2, r2, #1
   138f4:	adc	r3, r3, #0
   138f8:	strd	r2, [r4, #48]	; 0x30
   138fc:	mov	r2, r5
   13900:	bl	11b10 <strncmp@plt>
   13904:	cmp	r0, #0
   13908:	beq	13a04 <get_boolean_op_value@@Base+0x21c>
   1390c:	ldrd	r2, [r4, #56]	; 0x38
   13910:	ldr	r1, [pc, #272]	; 13a28 <get_boolean_op_value@@Base+0x240>
   13914:	adds	r2, r2, #1
   13918:	adc	r3, r3, #0
   1391c:	strd	r2, [r4, #56]	; 0x38
   13920:	ldr	r3, [pc, #260]	; 13a2c <get_boolean_op_value@@Base+0x244>
   13924:	mov	r2, r6
   13928:	ldr	r0, [r3]
   1392c:	bl	11a5c <fprintf@plt>
   13930:	ldrd	r2, [r4, #64]	; 0x40
   13934:	adds	r2, r2, #1
   13938:	adc	r3, r3, #0
   1393c:	strd	r2, [r4, #64]	; 0x40
   13940:	mov	r0, #1
   13944:	bl	11a38 <exit@plt>
   13948:	ldrd	r2, [r4, #8]
   1394c:	adds	r2, r2, #1
   13950:	adc	r3, r3, #0
   13954:	strd	r2, [r4, #8]
   13958:	ldrb	r3, [r6]
   1395c:	cmp	r3, #60	; 0x3c
   13960:	beq	1397c <get_boolean_op_value@@Base+0x194>
   13964:	cmp	r3, #62	; 0x3e
   13968:	beq	13994 <get_boolean_op_value@@Base+0x1ac>
   1396c:	cmp	r3, #33	; 0x21
   13970:	bne	139ac <get_boolean_op_value@@Base+0x1c4>
   13974:	mov	r0, #8
   13978:	pop	{r4, r5, r6, pc}
   1397c:	ldrd	r2, [r4, #80]	; 0x50
   13980:	mov	r0, #6
   13984:	adds	r2, r2, #1
   13988:	adc	r3, r3, #0
   1398c:	strd	r2, [r4, #80]	; 0x50
   13990:	pop	{r4, r5, r6, pc}
   13994:	ldrd	r2, [r4, #88]	; 0x58
   13998:	mov	r0, #7
   1399c:	adds	r2, r2, #1
   139a0:	adc	r3, r3, #0
   139a4:	strd	r2, [r4, #88]	; 0x58
   139a8:	pop	{r4, r5, r6, pc}
   139ac:	ldrd	r2, [r4, #72]	; 0x48
   139b0:	ldr	r1, [pc, #112]	; 13a28 <get_boolean_op_value@@Base+0x240>
   139b4:	adds	r2, r2, #1
   139b8:	adc	r3, r3, #0
   139bc:	strd	r2, [r4, #72]	; 0x48
   139c0:	ldr	r3, [pc, #100]	; 13a2c <get_boolean_op_value@@Base+0x244>
   139c4:	mov	r2, r6
   139c8:	ldr	r0, [r3]
   139cc:	bl	11a5c <fprintf@plt>
   139d0:	ldrd	r2, [r4, #96]	; 0x60
   139d4:	adds	r2, r2, #1
   139d8:	adc	r3, r3, #0
   139dc:	strd	r2, [r4, #96]	; 0x60
   139e0:	b	13940 <get_boolean_op_value@@Base+0x158>
   139e4:	mov	r0, #1
   139e8:	pop	{r4, r5, r6, pc}
   139ec:	mov	r0, r5
   139f0:	pop	{r4, r5, r6, pc}
   139f4:	mov	r0, #3
   139f8:	pop	{r4, r5, r6, pc}
   139fc:	mov	r0, #4
   13a00:	pop	{r4, r5, r6, pc}
   13a04:	mov	r0, #5
   13a08:	pop	{r4, r5, r6, pc}
   13a0c:	andeq	r9, r2, r8, asr #2
   13a10:	ldrdeq	r7, [r1], -r8
   13a14:	ldrdeq	r7, [r1], -fp
   13a18:	ldrdeq	r7, [r1], -lr
   13a1c:	andeq	r7, r1, r1, ror #9
   13a20:	andeq	r7, r1, r4, ror #9
   13a24:	andeq	r7, r1, r7, ror #9
   13a28:	andeq	r7, r1, sl, ror #9
   13a2c:			; <UNDEFINED> instruction: 0x00028ab8

00013a30 <init_grammar@@Base>:
   13a30:	ldr	ip, [pc, #20]	; 13a4c <init_grammar@@Base+0x1c>
   13a34:	str	r1, [r0]
   13a38:	ldrd	r2, [ip]
   13a3c:	adds	r2, r2, #1
   13a40:	adc	r3, r3, #0
   13a44:	strd	r2, [ip]
   13a48:	bx	lr
   13a4c:			; <UNDEFINED> instruction: 0x000291b0

00013a50 <destroy_grammar@@Base>:
   13a50:	ldr	r1, [pc, #16]	; 13a68 <destroy_grammar@@Base+0x18>
   13a54:	ldrd	r2, [r1, #8]
   13a58:	adds	r2, r2, #1
   13a5c:	adc	r3, r3, #0
   13a60:	strd	r2, [r1, #8]
   13a64:	bx	lr
   13a68:			; <UNDEFINED> instruction: 0x000291b0

00013a6c <read_return_expression@@Base>:
   13a6c:	push	{r4, r5, r6, r7, r8, lr}
   13a70:	mov	r6, r0
   13a74:	ldr	r4, [pc, #252]	; 13b78 <read_return_expression@@Base+0x10c>
   13a78:	ldr	r0, [r0]
   13a7c:	ldrd	r2, [r4, #16]
   13a80:	adds	r2, r2, #1
   13a84:	adc	r3, r3, #0
   13a88:	strd	r2, [r4, #16]
   13a8c:	bl	125e8 <next@@Base>
   13a90:	ldrd	r2, [r4, #24]
   13a94:	adds	r2, r2, #1
   13a98:	adc	r3, r3, #0
   13a9c:	strd	r2, [r4, #24]
   13aa0:	ldr	r3, [r0]
   13aa4:	cmp	r3, #1
   13aa8:	beq	13ab8 <read_return_expression@@Base+0x4c>
   13aac:	mov	r5, #0
   13ab0:	mov	r0, r5
   13ab4:	pop	{r4, r5, r6, r7, r8, pc}
   13ab8:	ldrd	r2, [r4, #32]
   13abc:	mov	r5, r0
   13ac0:	mov	r0, #12
   13ac4:	adds	r2, r2, #1
   13ac8:	adc	r3, r3, #0
   13acc:	strd	r2, [r4, #32]
   13ad0:	bl	119f0 <malloc@plt>
   13ad4:	ldr	r1, [r5, #4]
   13ad8:	mov	r7, r0
   13adc:	bl	132d0 <init_node_int@@Base>
   13ae0:	ldrd	r2, [r4, #40]	; 0x28
   13ae4:	mov	r0, r5
   13ae8:	adds	r2, r2, #1
   13aec:	adc	r3, r3, #0
   13af0:	strd	r2, [r4, #40]	; 0x28
   13af4:	bl	122c4 <free_token_int_value@@Base>
   13af8:	ldrd	r2, [r4, #48]	; 0x30
   13afc:	mov	r0, #12
   13b00:	adds	r2, r2, #1
   13b04:	adc	r3, r3, #0
   13b08:	strd	r2, [r4, #48]	; 0x30
   13b0c:	bl	119f0 <malloc@plt>
   13b10:	mov	r1, r7
   13b14:	mov	r5, r0
   13b18:	bl	13330 <init_node_return@@Base>
   13b1c:	ldrd	r2, [r4, #56]	; 0x38
   13b20:	ldr	r0, [r6]
   13b24:	adds	r2, r2, #1
   13b28:	adc	r3, r3, #0
   13b2c:	strd	r2, [r4, #56]	; 0x38
   13b30:	bl	125e8 <next@@Base>
   13b34:	ldrd	r2, [r4, #64]	; 0x40
   13b38:	adds	r2, r2, #1
   13b3c:	adc	r3, r3, #0
   13b40:	strd	r2, [r4, #64]	; 0x40
   13b44:	ldr	r3, [r0]
   13b48:	cmp	r3, #8
   13b4c:	bne	13aac <read_return_expression@@Base+0x40>
   13b50:	ldrd	r2, [r4, #72]	; 0x48
   13b54:	adds	r2, r2, #1
   13b58:	adc	r3, r3, #0
   13b5c:	strd	r2, [r4, #72]	; 0x48
   13b60:	bl	12388 <free_token_semicolon@@Base>
   13b64:	ldrd	r2, [r4, #80]	; 0x50
   13b68:	adds	r2, r2, #1
   13b6c:	adc	r3, r3, #0
   13b70:	strd	r2, [r4, #80]	; 0x50
   13b74:	b	13ab0 <read_return_expression@@Base+0x44>
   13b78:			; <UNDEFINED> instruction: 0x000291b0

00013b7c <read_boolean_unary_expression@@Base>:
   13b7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b80:	mov	r6, r0
   13b84:	ldr	r4, [pc, #348]	; 13ce8 <read_boolean_unary_expression@@Base+0x16c>
   13b88:	mov	r0, #20
   13b8c:	ldrd	r2, [r4, #88]	; 0x58
   13b90:	adds	r2, r2, #1
   13b94:	adc	r3, r3, #0
   13b98:	strd	r2, [r4, #88]	; 0x58
   13b9c:	bl	119f0 <malloc@plt>
   13ba0:	mov	r5, r0
   13ba4:	ldr	r0, [r6]
   13ba8:	bl	125e8 <next@@Base>
   13bac:	ldr	r8, [r0]
   13bb0:	cmp	r8, #12
   13bb4:	beq	13bec <read_boolean_unary_expression@@Base+0x70>
   13bb8:	ldrd	r2, [r4, #96]	; 0x60
   13bbc:	mov	r0, r5
   13bc0:	adds	r2, r2, #1
   13bc4:	adc	r3, r3, #0
   13bc8:	strd	r2, [r4, #96]	; 0x60
   13bcc:	bl	133d4 <free_node_boolean_operator@@Base>
   13bd0:	ldrd	r2, [r4, #112]	; 0x70
   13bd4:	adds	r2, r2, #1
   13bd8:	adc	r3, r3, #0
   13bdc:	strd	r2, [r4, #112]	; 0x70
   13be0:	mov	r5, #0
   13be4:	mov	r0, r5
   13be8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bec:	ldrd	r2, [r4, #104]	; 0x68
   13bf0:	mov	r9, r0
   13bf4:	adds	r2, r2, #1
   13bf8:	adc	r3, r3, #0
   13bfc:	strd	r2, [r4, #104]	; 0x68
   13c00:	bl	137e8 <get_boolean_op_value@@Base>
   13c04:	ldrd	r2, [r4, #120]	; 0x78
   13c08:	adds	r2, r2, #1
   13c0c:	adc	r3, r3, #0
   13c10:	strd	r2, [r4, #120]	; 0x78
   13c14:	mov	r7, r0
   13c18:	mov	r0, r9
   13c1c:	bl	123f8 <free_token_boolean_op@@Base>
   13c20:	ldrd	r2, [r4, #128]	; 0x80
   13c24:	ldr	r0, [r6]
   13c28:	adds	r2, r2, #1
   13c2c:	adc	r3, r3, #0
   13c30:	strd	r2, [r4, #128]	; 0x80
   13c34:	bl	125e8 <next@@Base>
   13c38:	ldr	r3, [r0]
   13c3c:	mov	r6, r0
   13c40:	cmp	r3, #1
   13c44:	beq	13c74 <read_boolean_unary_expression@@Base+0xf8>
   13c48:	ldrd	r2, [r4, #136]	; 0x88
   13c4c:	mov	r0, r5
   13c50:	adds	r2, r2, #1
   13c54:	adc	r3, r3, #0
   13c58:	strd	r2, [r4, #136]	; 0x88
   13c5c:	bl	133d4 <free_node_boolean_operator@@Base>
   13c60:	ldrd	r2, [r4, #152]	; 0x98
   13c64:	adds	r2, r2, #1
   13c68:	adc	r3, r3, #0
   13c6c:	strd	r2, [r4, #152]	; 0x98
   13c70:	b	13be0 <read_boolean_unary_expression@@Base+0x64>
   13c74:	ldrd	r2, [r4, #144]	; 0x90
   13c78:	mov	r0, r8
   13c7c:	adds	r2, r2, #1
   13c80:	adc	r3, r3, #0
   13c84:	strd	r2, [r4, #144]	; 0x90
   13c88:	bl	119f0 <malloc@plt>
   13c8c:	ldr	r1, [r6, #4]
   13c90:	mov	r8, r0
   13c94:	bl	132d0 <init_node_int@@Base>
   13c98:	ldrd	r2, [r4, #160]	; 0xa0
   13c9c:	mov	r0, r6
   13ca0:	adds	r2, r2, #1
   13ca4:	adc	r3, r3, #0
   13ca8:	strd	r2, [r4, #160]	; 0xa0
   13cac:	bl	122c4 <free_token_int_value@@Base>
   13cb0:	ldrd	r0, [r4, #168]	; 0xa8
   13cb4:	mov	r3, #0
   13cb8:	mov	r2, r8
   13cbc:	adds	r0, r0, #1
   13cc0:	adc	r1, r1, #0
   13cc4:	strd	r0, [r4, #168]	; 0xa8
   13cc8:	mov	r1, r7
   13ccc:	mov	r0, r5
   13cd0:	bl	13398 <init_node_boolean_operator@@Base>
   13cd4:	ldrd	r2, [r4, #176]	; 0xb0
   13cd8:	adds	r2, r2, #1
   13cdc:	adc	r3, r3, #0
   13ce0:	strd	r2, [r4, #176]	; 0xb0
   13ce4:	b	13be4 <read_boolean_unary_expression@@Base+0x68>
   13ce8:			; <UNDEFINED> instruction: 0x000291b0

00013cec <read_boolean_binary_expression@@Base>:
   13cec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cf0:	mov	r5, r0
   13cf4:	ldr	r4, [pc, #568]	; 13f34 <read_boolean_binary_expression@@Base+0x248>
   13cf8:	ldr	r0, [r0]
   13cfc:	ldrd	r2, [r4, #184]	; 0xb8
   13d00:	adds	r2, r2, #1
   13d04:	adc	r3, r3, #0
   13d08:	strd	r2, [r4, #184]	; 0xb8
   13d0c:	bl	125e8 <next@@Base>
   13d10:	ldr	r1, [r0]
   13d14:	mov	r6, r0
   13d18:	cmp	r1, #1
   13d1c:	beq	13d88 <read_boolean_binary_expression@@Base+0x9c>
   13d20:	ldrd	r2, [r4, #192]	; 0xc0
   13d24:	adds	r2, r2, #1
   13d28:	adc	r3, r3, #0
   13d2c:	cmp	r1, #12
   13d30:	strd	r2, [r4, #192]	; 0xc0
   13d34:	bne	13e18 <read_boolean_binary_expression@@Base+0x12c>
   13d38:	ldrd	r2, [r4, #208]	; 0xd0
   13d3c:	mov	r1, r0
   13d40:	ldr	r0, [r5]
   13d44:	adds	r2, r2, #1
   13d48:	adc	r3, r3, #0
   13d4c:	strd	r2, [r4, #208]	; 0xd0
   13d50:	bl	124cc <push_back@@Base>
   13d54:	ldrd	r2, [r4, #216]	; 0xd8
   13d58:	mov	r0, r5
   13d5c:	adds	r2, r2, #1
   13d60:	adc	r3, r3, #0
   13d64:	strd	r2, [r4, #216]	; 0xd8
   13d68:	bl	13b7c <read_boolean_unary_expression@@Base>
   13d6c:	ldrd	r2, [r4, #224]	; 0xe0
   13d70:	adds	r2, r2, #1
   13d74:	adc	r3, r3, #0
   13d78:	strd	r2, [r4, #224]	; 0xe0
   13d7c:	mov	r5, r0
   13d80:	mov	r0, r5
   13d84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d88:	ldrd	r2, [r4, #200]	; 0xc8
   13d8c:	mov	r0, #12
   13d90:	adds	r2, r2, #1
   13d94:	adc	r3, r3, #0
   13d98:	strd	r2, [r4, #200]	; 0xc8
   13d9c:	bl	119f0 <malloc@plt>
   13da0:	ldr	r1, [r6, #4]
   13da4:	mov	r7, r0
   13da8:	bl	132d0 <init_node_int@@Base>
   13dac:	ldrd	r2, [r4, #232]	; 0xe8
   13db0:	mov	r0, r6
   13db4:	add	r6, r4, #272	; 0x110
   13db8:	adds	r2, r2, #1
   13dbc:	adc	r3, r3, #0
   13dc0:	strd	r2, [r4, #232]	; 0xe8
   13dc4:	bl	122c4 <free_token_int_value@@Base>
   13dc8:	ldrd	r2, [r4, #240]	; 0xf0
   13dcc:	ldr	r0, [r5]
   13dd0:	adds	r2, r2, #1
   13dd4:	adc	r3, r3, #0
   13dd8:	strd	r2, [r4, #240]	; 0xf0
   13ddc:	bl	125e8 <next@@Base>
   13de0:	ldr	sl, [r0]
   13de4:	mov	r9, r0
   13de8:	cmp	sl, #12
   13dec:	beq	13e20 <read_boolean_binary_expression@@Base+0x134>
   13df0:	ldrd	r2, [r4, #248]	; 0xf8
   13df4:	mov	r0, r7
   13df8:	adds	r2, r2, #1
   13dfc:	adc	r3, r3, #0
   13e00:	strd	r2, [r4, #248]	; 0xf8
   13e04:	bl	13460 <free_node@@Base>
   13e08:	ldrd	r2, [r6, #-8]
   13e0c:	adds	r2, r2, #1
   13e10:	adc	r3, r3, #0
   13e14:	strd	r2, [r6, #-8]
   13e18:	mov	r5, #0
   13e1c:	b	13d80 <read_boolean_binary_expression@@Base+0x94>
   13e20:	add	r1, r4, #256	; 0x100
   13e24:	ldrd	r2, [r1]
   13e28:	adds	r2, r2, #1
   13e2c:	adc	r3, r3, #0
   13e30:	strd	r2, [r1]
   13e34:	bl	137e8 <get_boolean_op_value@@Base>
   13e38:	ldrd	r2, [r6]
   13e3c:	adds	r2, r2, #1
   13e40:	adc	r3, r3, #0
   13e44:	strd	r2, [r6]
   13e48:	add	r6, r4, #288	; 0x120
   13e4c:	mov	r8, r0
   13e50:	mov	r0, r9
   13e54:	bl	123f8 <free_token_boolean_op@@Base>
   13e58:	ldrd	r2, [r6, #-8]
   13e5c:	ldr	r0, [r5]
   13e60:	add	r5, r4, #304	; 0x130
   13e64:	adds	r2, r2, #1
   13e68:	adc	r3, r3, #0
   13e6c:	strd	r2, [r6, #-8]
   13e70:	bl	125e8 <next@@Base>
   13e74:	ldr	r3, [r0]
   13e78:	mov	r9, r0
   13e7c:	cmp	r3, #1
   13e80:	beq	13eb0 <read_boolean_binary_expression@@Base+0x1c4>
   13e84:	ldrd	r2, [r6]
   13e88:	mov	r0, r7
   13e8c:	adds	r2, r2, #1
   13e90:	adc	r3, r3, #0
   13e94:	strd	r2, [r6]
   13e98:	bl	13460 <free_node@@Base>
   13e9c:	ldrd	r2, [r5]
   13ea0:	adds	r2, r2, #1
   13ea4:	adc	r3, r3, #0
   13ea8:	strd	r2, [r5]
   13eac:	b	13e18 <read_boolean_binary_expression@@Base+0x12c>
   13eb0:	ldrd	r2, [r5, #-8]
   13eb4:	mov	r0, sl
   13eb8:	adds	r2, r2, #1
   13ebc:	adc	r3, r3, #0
   13ec0:	strd	r2, [r5, #-8]
   13ec4:	bl	119f0 <malloc@plt>
   13ec8:	add	r5, r4, #320	; 0x140
   13ecc:	ldr	r1, [r9, #4]
   13ed0:	add	r4, r4, #336	; 0x150
   13ed4:	mov	r6, r0
   13ed8:	bl	132d0 <init_node_int@@Base>
   13edc:	ldrd	r2, [r5, #-8]
   13ee0:	mov	r0, r9
   13ee4:	adds	r2, r2, #1
   13ee8:	adc	r3, r3, #0
   13eec:	strd	r2, [r5, #-8]
   13ef0:	bl	122c4 <free_token_int_value@@Base>
   13ef4:	ldrd	r2, [r5]
   13ef8:	mov	r0, #20
   13efc:	adds	r2, r2, #1
   13f00:	adc	r3, r3, #0
   13f04:	strd	r2, [r5]
   13f08:	bl	119f0 <malloc@plt>
   13f0c:	mov	r3, r6
   13f10:	mov	r2, r7
   13f14:	mov	r1, r8
   13f18:	mov	r5, r0
   13f1c:	bl	13398 <init_node_boolean_operator@@Base>
   13f20:	ldrd	r2, [r4, #-8]
   13f24:	adds	r2, r2, #1
   13f28:	adc	r3, r3, #0
   13f2c:	strd	r2, [r4, #-8]
   13f30:	b	13d80 <read_boolean_binary_expression@@Base+0x94>
   13f34:			; <UNDEFINED> instruction: 0x000291b0

00013f38 <read_single_boolean_expression@@Base>:
   13f38:	cmp	r1, #0
   13f3c:	push	{r4, r5, r6, r7, r8, lr}
   13f40:	ldr	r4, [pc, #188]	; 14004 <read_single_boolean_expression@@Base+0xcc>
   13f44:	bne	13f78 <read_single_boolean_expression@@Base+0x40>
   13f48:	ldrd	r2, [r4]
   13f4c:	adds	r2, r2, #1
   13f50:	adc	r3, r3, #0
   13f54:	strd	r2, [r4]
   13f58:	bl	13cec <read_boolean_binary_expression@@Base>
   13f5c:	ldrd	r2, [r4, #8]
   13f60:	adds	r2, r2, #1
   13f64:	adc	r3, r3, #0
   13f68:	strd	r2, [r4, #8]
   13f6c:	mov	r7, r0
   13f70:	mov	r0, r7
   13f74:	pop	{r4, r5, r6, r7, r8, pc}
   13f78:	ldr	r1, [r2]
   13f7c:	mov	r5, r2
   13f80:	cmp	r1, #0
   13f84:	beq	13fec <read_single_boolean_expression@@Base+0xb4>
   13f88:	mov	r6, r3
   13f8c:	ldrd	r2, [r4, #16]
   13f90:	adds	r2, r2, #1
   13f94:	adc	r3, r3, #0
   13f98:	strd	r2, [r4, #16]
   13f9c:	bl	13cec <read_boolean_binary_expression@@Base>
   13fa0:	ldrd	r2, [r4, #32]
   13fa4:	adds	r2, r2, #1
   13fa8:	adc	r3, r3, #0
   13fac:	strd	r2, [r4, #32]
   13fb0:	mov	r8, r0
   13fb4:	mov	r0, #20
   13fb8:	bl	119f0 <malloc@plt>
   13fbc:	mov	r3, r8
   13fc0:	mov	r2, #0
   13fc4:	mov	r1, r6
   13fc8:	mov	r7, r0
   13fcc:	bl	13398 <init_node_boolean_operator@@Base>
   13fd0:	mov	r3, #0
   13fd4:	str	r3, [r5]
   13fd8:	ldrd	r2, [r4, #40]	; 0x28
   13fdc:	adds	r2, r2, #1
   13fe0:	adc	r3, r3, #0
   13fe4:	strd	r2, [r4, #40]	; 0x28
   13fe8:	b	13f70 <read_single_boolean_expression@@Base+0x38>
   13fec:	ldrd	r2, [r4, #24]
   13ff0:	adds	r2, r2, #1
   13ff4:	adc	r3, r3, #0
   13ff8:	strd	r2, [r4, #24]
   13ffc:	ldr	r3, [r1, #4]
   14000:	udf	#0
   14004:	andeq	r9, r2, r0, lsl #6

00014008 <read_boolean_expression@@Base>:
   14008:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1400c:	add	r7, sp, #8
   14010:	ldr	r4, [pc, #396]	; 141a4 <read_boolean_expression@@Base+0x19c>
   14014:	mov	r6, r0
   14018:	mov	r5, #0
   1401c:	ldrd	r2, [r4, #-8]
   14020:	ldr	r0, [r0]
   14024:	str	r5, [r7, #-4]!
   14028:	adds	r2, r2, #1
   1402c:	adc	r3, r3, #0
   14030:	mov	r8, #1
   14034:	strd	r2, [r4, #-8]
   14038:	bl	125e8 <next@@Base>
   1403c:	ldrd	r2, [r4]
   14040:	adds	r2, r2, #1
   14044:	adc	r3, r3, #0
   14048:	strd	r2, [r4]
   1404c:	ldr	r1, [r0]
   14050:	cmp	r1, #4
   14054:	bne	14088 <read_boolean_expression@@Base+0x80>
   14058:	ldrd	r2, [r4, #80]	; 0x50
   1405c:	adds	r2, r2, #1
   14060:	adc	r3, r3, #0
   14064:	strd	r2, [r4, #80]	; 0x50
   14068:	bl	12318 <free_token_cpar@@Base>
   1406c:	ldrd	r2, [r4, #88]	; 0x58
   14070:	mov	r0, r5
   14074:	adds	r2, r2, #1
   14078:	adc	r3, r3, #0
   1407c:	strd	r2, [r4, #88]	; 0x58
   14080:	add	sp, sp, #12
   14084:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14088:	ldrd	r2, [r4, #72]	; 0x48
   1408c:	adds	r2, r2, #1
   14090:	adc	r3, r3, #0
   14094:	cmp	r1, #3
   14098:	strd	r2, [r4, #72]	; 0x48
   1409c:	beq	14140 <read_boolean_expression@@Base+0x138>
   140a0:	cmp	r1, #12
   140a4:	beq	14110 <read_boolean_expression@@Base+0x108>
   140a8:	cmp	r1, #1
   140ac:	bne	1417c <read_boolean_expression@@Base+0x174>
   140b0:	ldrd	r2, [r4, #8]
   140b4:	mov	r1, r0
   140b8:	ldr	r0, [r6]
   140bc:	adds	r2, r2, #1
   140c0:	adc	r3, r3, #0
   140c4:	strd	r2, [r4, #8]
   140c8:	bl	124cc <push_back@@Base>
   140cc:	ldrd	r2, [r4, #32]
   140d0:	mov	r1, r5
   140d4:	mov	r0, r6
   140d8:	adds	r2, r2, #1
   140dc:	adc	r3, r3, #0
   140e0:	strd	r2, [r4, #32]
   140e4:	mov	r3, r9
   140e8:	mov	r2, r7
   140ec:	bl	13f38 <read_single_boolean_expression@@Base>
   140f0:	ldrd	r2, [r4, #64]	; 0x40
   140f4:	adds	r2, r2, #1
   140f8:	adc	r3, r3, #0
   140fc:	strd	r2, [r4, #64]	; 0x40
   14100:	mov	r5, r0
   14104:	ldr	r0, [r6]
   14108:	bl	125e8 <next@@Base>
   1410c:	b	1404c <read_boolean_expression@@Base+0x44>
   14110:	ldrd	r2, [r4, #24]
   14114:	adds	r2, r2, #1
   14118:	adc	r3, r3, #0
   1411c:	strd	r2, [r4, #24]
   14120:	bl	137e8 <get_boolean_op_value@@Base>
   14124:	ldrd	r2, [r4, #40]	; 0x28
   14128:	str	r8, [sp, #4]
   1412c:	adds	r2, r2, #1
   14130:	adc	r3, r3, #0
   14134:	strd	r2, [r4, #40]	; 0x28
   14138:	mov	r9, r0
   1413c:	b	14104 <read_boolean_expression@@Base+0xfc>
   14140:	ldrd	r2, [r4, #16]
   14144:	mov	r1, r5
   14148:	mov	r0, r6
   1414c:	adds	r2, r2, #1
   14150:	adc	r3, r3, #0
   14154:	strd	r2, [r4, #16]
   14158:	mov	r3, r9
   1415c:	mov	r2, r7
   14160:	bl	13f38 <read_single_boolean_expression@@Base>
   14164:	ldrd	r2, [r4, #48]	; 0x30
   14168:	adds	r2, r2, #1
   1416c:	adc	r3, r3, #0
   14170:	strd	r2, [r4, #48]	; 0x30
   14174:	mov	r5, r0
   14178:	b	14104 <read_boolean_expression@@Base+0xfc>
   1417c:	ldr	r3, [pc, #36]	; 141a8 <read_boolean_expression@@Base+0x1a0>
   14180:	ldr	r0, [pc, #36]	; 141ac <read_boolean_expression@@Base+0x1a4>
   14184:	ldr	r1, [r3]
   14188:	bl	11b04 <fputs@plt>
   1418c:	ldrd	r2, [r4, #56]	; 0x38
   14190:	mov	r0, #1
   14194:	adds	r2, r2, #1
   14198:	adc	r3, r3, #0
   1419c:	strd	r2, [r4, #56]	; 0x38
   141a0:	bl	11a38 <exit@plt>
   141a4:	andeq	r9, r2, r0, asr #6
   141a8:			; <UNDEFINED> instruction: 0x00028ab8
   141ac:	andeq	r7, r1, lr, ror #10

000141b0 <read_if_statement@@Base>:
   141b0:	push	{r4, r5, r6, r7, r8, lr}
   141b4:	mov	r5, r0
   141b8:	ldr	r4, [pc, #332]	; 1430c <read_if_statement@@Base+0x15c>
   141bc:	ldr	r0, [r0]
   141c0:	ldrd	r2, [r4]
   141c4:	adds	r2, r2, #1
   141c8:	adc	r3, r3, #0
   141cc:	strd	r2, [r4]
   141d0:	bl	125e8 <next@@Base>
   141d4:	ldrd	r2, [r4, #8]
   141d8:	adds	r2, r2, #1
   141dc:	adc	r3, r3, #0
   141e0:	strd	r2, [r4, #8]
   141e4:	ldr	r3, [r0]
   141e8:	cmp	r3, #3
   141ec:	movne	r5, #0
   141f0:	bne	142d4 <read_if_statement@@Base+0x124>
   141f4:	ldrd	r2, [r4, #16]
   141f8:	adds	r2, r2, #1
   141fc:	adc	r3, r3, #0
   14200:	strd	r2, [r4, #16]
   14204:	bl	122fc <free_token_opar@@Base>
   14208:	ldrd	r2, [r4, #24]
   1420c:	mov	r0, r5
   14210:	adds	r2, r2, #1
   14214:	adc	r3, r3, #0
   14218:	strd	r2, [r4, #24]
   1421c:	bl	14008 <read_boolean_expression@@Base>
   14220:	ldrd	r2, [r4, #32]
   14224:	adds	r2, r2, #1
   14228:	adc	r3, r3, #0
   1422c:	strd	r2, [r4, #32]
   14230:	mov	r6, r0
   14234:	mov	r0, r5
   14238:	bl	14310 <read_body@@Base>
   1423c:	ldrd	r2, [r4, #40]	; 0x28
   14240:	adds	r2, r2, #1
   14244:	adc	r3, r3, #0
   14248:	strd	r2, [r4, #40]	; 0x28
   1424c:	mov	r7, r0
   14250:	ldr	r0, [r5]
   14254:	bl	125e8 <next@@Base>
   14258:	ldr	r3, [r0]
   1425c:	mov	r1, r0
   14260:	cmp	r3, #11
   14264:	bne	142dc <read_if_statement@@Base+0x12c>
   14268:	ldrd	r2, [r4, #48]	; 0x30
   1426c:	adds	r2, r2, #1
   14270:	adc	r3, r3, #0
   14274:	strd	r2, [r4, #48]	; 0x30
   14278:	bl	123dc <free_token_else@@Base>
   1427c:	ldrd	r2, [r4, #64]	; 0x40
   14280:	mov	r0, r5
   14284:	adds	r2, r2, #1
   14288:	adc	r3, r3, #0
   1428c:	strd	r2, [r4, #64]	; 0x40
   14290:	bl	14310 <read_body@@Base>
   14294:	ldrd	r2, [r4, #72]	; 0x48
   14298:	adds	r2, r2, #1
   1429c:	adc	r3, r3, #0
   142a0:	strd	r2, [r4, #72]	; 0x48
   142a4:	mov	r8, r0
   142a8:	mov	r0, #20
   142ac:	bl	119f0 <malloc@plt>
   142b0:	mov	r3, r8
   142b4:	mov	r2, r7
   142b8:	mov	r1, r6
   142bc:	mov	r5, r0
   142c0:	bl	1335c <init_node_if@@Base>
   142c4:	ldrd	r2, [r4, #88]	; 0x58
   142c8:	adds	r2, r2, #1
   142cc:	adc	r3, r3, #0
   142d0:	strd	r2, [r4, #88]	; 0x58
   142d4:	mov	r0, r5
   142d8:	pop	{r4, r5, r6, r7, r8, pc}
   142dc:	ldrd	r2, [r4, #56]	; 0x38
   142e0:	ldr	r0, [r5]
   142e4:	mov	r8, #0
   142e8:	adds	r2, r2, #1
   142ec:	adc	r3, r3, #0
   142f0:	strd	r2, [r4, #56]	; 0x38
   142f4:	bl	124cc <push_back@@Base>
   142f8:	ldrd	r2, [r4, #80]	; 0x50
   142fc:	adds	r2, r2, #1
   14300:	adc	r3, r3, #0
   14304:	strd	r2, [r4, #80]	; 0x50
   14308:	b	142a8 <read_if_statement@@Base+0xf8>
   1430c:	andeq	r9, r2, r0, lsr #7

00014310 <read_body@@Base>:
   14310:	push	{r4, r5, r6, r7, r8, lr}
   14314:	mov	r5, r0
   14318:	ldr	r4, [pc, #420]	; 144c4 <read_body@@Base+0x1b4>
   1431c:	ldr	r0, [r0]
   14320:	ldrd	r2, [r4]
   14324:	adds	r2, r2, #1
   14328:	adc	r3, r3, #0
   1432c:	strd	r2, [r4]
   14330:	bl	125e8 <next@@Base>
   14334:	ldrd	r2, [r4, #8]
   14338:	adds	r2, r2, #1
   1433c:	adc	r3, r3, #0
   14340:	strd	r2, [r4, #8]
   14344:	ldr	r3, [r0]
   14348:	cmp	r3, #5
   1434c:	movne	r6, #0
   14350:	bne	14408 <read_body@@Base+0xf8>
   14354:	ldrd	r2, [r4, #16]
   14358:	mov	r7, #0
   1435c:	mov	r6, r7
   14360:	adds	r2, r2, #1
   14364:	adc	r3, r3, #0
   14368:	strd	r2, [r4, #16]
   1436c:	bl	12334 <free_token_obra@@Base>
   14370:	ldrd	r2, [r4, #24]
   14374:	ldr	r0, [r5]
   14378:	adds	r2, r2, #1
   1437c:	adc	r3, r3, #0
   14380:	strd	r2, [r4, #24]
   14384:	bl	125e8 <next@@Base>
   14388:	ldrd	r2, [r4, #32]
   1438c:	adds	r2, r2, #1
   14390:	adc	r3, r3, #0
   14394:	strd	r2, [r4, #32]
   14398:	ldr	r1, [r0]
   1439c:	cmp	r1, #6
   143a0:	bne	143cc <read_body@@Base+0xbc>
   143a4:	ldrd	r2, [r4, #112]	; 0x70
   143a8:	adds	r2, r2, #1
   143ac:	adc	r3, r3, #0
   143b0:	strd	r2, [r4, #112]	; 0x70
   143b4:	bl	12350 <free_token_cbra@@Base>
   143b8:	ldrd	r2, [r4, #120]	; 0x78
   143bc:	adds	r2, r2, #1
   143c0:	adc	r3, r3, #0
   143c4:	strd	r2, [r4, #120]	; 0x78
   143c8:	b	14408 <read_body@@Base+0xf8>
   143cc:	ldrd	r2, [r4, #104]	; 0x68
   143d0:	adds	r2, r2, #1
   143d4:	adc	r3, r3, #0
   143d8:	cmp	r1, #7
   143dc:	strd	r2, [r4, #104]	; 0x68
   143e0:	beq	14410 <read_body@@Base+0x100>
   143e4:	cmp	r1, #10
   143e8:	beq	14480 <read_body@@Base+0x170>
   143ec:	mov	r1, r0
   143f0:	ldr	r0, [r5]
   143f4:	bl	124cc <push_back@@Base>
   143f8:	ldrd	r2, [r4, #80]	; 0x50
   143fc:	adds	r2, r2, #1
   14400:	adc	r3, r3, #0
   14404:	strd	r2, [r4, #80]	; 0x50
   14408:	mov	r0, r6
   1440c:	pop	{r4, r5, r6, r7, r8, pc}
   14410:	ldrd	r2, [r4, #40]	; 0x28
   14414:	adds	r2, r2, #1
   14418:	adc	r3, r3, #0
   1441c:	strd	r2, [r4, #40]	; 0x28
   14420:	bl	1236c <free_token_return@@Base>
   14424:	ldrd	r2, [r4, #56]	; 0x38
   14428:	mov	r0, r5
   1442c:	adds	r2, r2, #1
   14430:	adc	r3, r3, #0
   14434:	strd	r2, [r4, #56]	; 0x38
   14438:	bl	13a6c <read_return_expression@@Base>
   1443c:	ldrd	r2, [r4, #88]	; 0x58
   14440:	adds	r2, r2, #1
   14444:	adc	r3, r3, #0
   14448:	strd	r2, [r4, #88]	; 0x58
   1444c:	mov	r8, r0
   14450:	cmp	r6, #0
   14454:	moveq	r6, r8
   14458:	beq	14470 <read_body@@Base+0x160>
   1445c:	ldrd	r2, [r4, #96]	; 0x60
   14460:	str	r8, [r7, #4]
   14464:	adds	r2, r2, #1
   14468:	adc	r3, r3, #0
   1446c:	strd	r2, [r4, #96]	; 0x60
   14470:	ldr	r0, [r5]
   14474:	bl	125e8 <next@@Base>
   14478:	mov	r7, r8
   1447c:	b	14398 <read_body@@Base+0x88>
   14480:	ldrd	r2, [r4, #48]	; 0x30
   14484:	adds	r2, r2, #1
   14488:	adc	r3, r3, #0
   1448c:	strd	r2, [r4, #48]	; 0x30
   14490:	bl	123c0 <free_token_if@@Base>
   14494:	ldrd	r2, [r4, #64]	; 0x40
   14498:	mov	r0, r5
   1449c:	adds	r2, r2, #1
   144a0:	adc	r3, r3, #0
   144a4:	strd	r2, [r4, #64]	; 0x40
   144a8:	bl	141b0 <read_if_statement@@Base>
   144ac:	ldrd	r2, [r4, #72]	; 0x48
   144b0:	adds	r2, r2, #1
   144b4:	adc	r3, r3, #0
   144b8:	strd	r2, [r4, #72]	; 0x48
   144bc:	mov	r8, r0
   144c0:	b	14450 <read_body@@Base+0x140>
   144c4:	andeq	r9, r2, r0, lsl #8

000144c8 <read_function_ast_node@@Base>:
   144c8:	push	{r4, r5, r6, r7, r8, lr}
   144cc:	mov	r5, r0
   144d0:	ldr	r4, [pc, #392]	; 14660 <read_function_ast_node@@Base+0x198>
   144d4:	ldr	r0, [r0]
   144d8:	ldrd	r2, [r4]
   144dc:	adds	r2, r2, #1
   144e0:	adc	r3, r3, #0
   144e4:	strd	r2, [r4]
   144e8:	bl	125e8 <next@@Base>
   144ec:	ldrd	r2, [r4, #8]
   144f0:	adds	r2, r2, #1
   144f4:	adc	r3, r3, #0
   144f8:	strd	r2, [r4, #8]
   144fc:	ldr	r3, [r0]
   14500:	cmp	r3, #0
   14504:	beq	14514 <read_function_ast_node@@Base+0x4c>
   14508:	mov	r5, #0
   1450c:	mov	r0, r5
   14510:	pop	{r4, r5, r6, r7, r8, pc}
   14514:	ldrd	r2, [r4, #16]
   14518:	adds	r2, r2, #1
   1451c:	adc	r3, r3, #0
   14520:	strd	r2, [r4, #16]
   14524:	bl	122a8 <free_token_int_type@@Base>
   14528:	ldrd	r2, [r4, #24]
   1452c:	ldr	r0, [r5]
   14530:	adds	r2, r2, #1
   14534:	adc	r3, r3, #0
   14538:	strd	r2, [r4, #24]
   1453c:	bl	125e8 <next@@Base>
   14540:	ldrd	r2, [r4, #32]
   14544:	adds	r2, r2, #1
   14548:	adc	r3, r3, #0
   1454c:	strd	r2, [r4, #32]
   14550:	ldr	r3, [r0]
   14554:	mov	r6, r0
   14558:	cmp	r3, #2
   1455c:	bne	14508 <read_function_ast_node@@Base+0x40>
   14560:	ldrd	r2, [r4, #40]	; 0x28
   14564:	ldr	r0, [r5]
   14568:	adds	r2, r2, #1
   1456c:	adc	r3, r3, #0
   14570:	strd	r2, [r4, #40]	; 0x28
   14574:	bl	125e8 <next@@Base>
   14578:	ldrd	r2, [r4, #48]	; 0x30
   1457c:	adds	r2, r2, #1
   14580:	adc	r3, r3, #0
   14584:	strd	r2, [r4, #48]	; 0x30
   14588:	ldr	r3, [r0]
   1458c:	cmp	r3, #3
   14590:	bne	14508 <read_function_ast_node@@Base+0x40>
   14594:	ldrd	r2, [r4, #56]	; 0x38
   14598:	adds	r2, r2, #1
   1459c:	adc	r3, r3, #0
   145a0:	strd	r2, [r4, #56]	; 0x38
   145a4:	bl	122fc <free_token_opar@@Base>
   145a8:	ldrd	r2, [r4, #64]	; 0x40
   145ac:	ldr	r0, [r5]
   145b0:	adds	r2, r2, #1
   145b4:	adc	r3, r3, #0
   145b8:	strd	r2, [r4, #64]	; 0x40
   145bc:	bl	125e8 <next@@Base>
   145c0:	ldrd	r2, [r4, #72]	; 0x48
   145c4:	adds	r2, r2, #1
   145c8:	adc	r3, r3, #0
   145cc:	strd	r2, [r4, #72]	; 0x48
   145d0:	ldr	r3, [r0]
   145d4:	cmp	r3, #4
   145d8:	bne	14508 <read_function_ast_node@@Base+0x40>
   145dc:	ldrd	r2, [r4, #80]	; 0x50
   145e0:	adds	r2, r2, #1
   145e4:	adc	r3, r3, #0
   145e8:	strd	r2, [r4, #80]	; 0x50
   145ec:	bl	12318 <free_token_cpar@@Base>
   145f0:	ldrd	r2, [r4, #88]	; 0x58
   145f4:	mov	r0, r5
   145f8:	adds	r2, r2, #1
   145fc:	adc	r3, r3, #0
   14600:	strd	r2, [r4, #88]	; 0x58
   14604:	bl	14310 <read_body@@Base>
   14608:	mov	r7, r0
   1460c:	ldrd	r0, [r4, #96]	; 0x60
   14610:	adds	r0, r0, #1
   14614:	adc	r1, r1, #0
   14618:	strd	r0, [r4, #96]	; 0x60
   1461c:	mov	r0, #16
   14620:	bl	119f0 <malloc@plt>
   14624:	mov	r2, r7
   14628:	ldr	r1, [r6, #4]
   1462c:	mov	r5, r0
   14630:	bl	132fc <init_node_function@@Base>
   14634:	ldrd	r2, [r4, #104]	; 0x68
   14638:	mov	r0, r6
   1463c:	adds	r2, r2, #1
   14640:	adc	r3, r3, #0
   14644:	strd	r2, [r4, #104]	; 0x68
   14648:	bl	122e0 <free_token_function@@Base>
   1464c:	ldrd	r2, [r4, #112]	; 0x70
   14650:	adds	r2, r2, #1
   14654:	adc	r3, r3, #0
   14658:	strd	r2, [r4, #112]	; 0x70
   1465c:	b	1450c <read_function_ast_node@@Base+0x44>
   14660:	andeq	r9, r2, r0, lsl #9

00014664 <build_ast@@Base>:
   14664:	push	{r4, lr}
   14668:	ldr	r4, [pc, #36]	; 14694 <build_ast@@Base+0x30>
   1466c:	ldrd	r2, [r4, #-8]
   14670:	adds	r2, r2, #1
   14674:	adc	r3, r3, #0
   14678:	strd	r2, [r4, #-8]
   1467c:	bl	144c8 <read_function_ast_node@@Base>
   14680:	ldrd	r2, [r4]
   14684:	adds	r2, r2, #1
   14688:	adc	r3, r3, #0
   1468c:	strd	r2, [r4]
   14690:	pop	{r4, pc}
   14694:	andeq	r9, r2, r0, lsl #10

00014698 <init_generator@@Base>:
   14698:	push	{r4, r5, r6, r7, r8, lr}
   1469c:	mov	r5, r0
   146a0:	ldr	r4, [pc, #64]	; 146e8 <init_generator@@Base+0x50>
   146a4:	str	r1, [r0]
   146a8:	mov	r0, r2
   146ac:	ldrd	r6, [r4]
   146b0:	ldr	r1, [pc, #52]	; 146ec <init_generator@@Base+0x54>
   146b4:	adds	r6, r6, #1
   146b8:	adc	r7, r7, #0
   146bc:	strd	r6, [r4]
   146c0:	bl	11990 <fopen@plt>
   146c4:	ldrd	r2, [r4, #8]
   146c8:	adds	r2, r2, #1
   146cc:	adc	r3, r3, #0
   146d0:	strd	r2, [r4, #8]
   146d4:	mov	r2, #0
   146d8:	mov	r3, #0
   146dc:	strd	r2, [r5, #8]
   146e0:	str	r0, [r5, #4]
   146e4:	pop	{r4, r5, r6, r7, r8, pc}
   146e8:	andeq	r9, r2, r8, lsl #10
   146ec:	andeq	r7, r1, r2, ror #11

000146f0 <destroy_generator@@Base>:
   146f0:	push	{r4, lr}
   146f4:	ldr	r4, [pc, #40]	; 14724 <destroy_generator@@Base+0x34>
   146f8:	ldr	r0, [r0, #4]
   146fc:	ldrd	r2, [r4, #16]
   14700:	adds	r2, r2, #1
   14704:	adc	r3, r3, #0
   14708:	strd	r2, [r4, #16]
   1470c:	bl	11abc <fclose@plt>
   14710:	ldrd	r2, [r4, #24]
   14714:	adds	r2, r2, #1
   14718:	adc	r3, r3, #0
   1471c:	strd	r2, [r4, #24]
   14720:	pop	{r4, pc}
   14724:	andeq	r9, r2, r8, lsl #10

00014728 <__generate_code_for_int@@Base>:
   14728:	push	{r4, lr}
   1472c:	ldr	r4, [pc, #48]	; 14764 <__generate_code_for_int@@Base+0x3c>
   14730:	ldr	r0, [r0, #4]
   14734:	ldrd	r2, [r4, #32]
   14738:	adds	r2, r2, #1
   1473c:	adc	r3, r3, #0
   14740:	strd	r2, [r4, #32]
   14744:	ldr	r2, [r1, #8]
   14748:	ldr	r1, [pc, #24]	; 14768 <__generate_code_for_int@@Base+0x40>
   1474c:	bl	11a5c <fprintf@plt>
   14750:	ldrd	r2, [r4, #40]	; 0x28
   14754:	adds	r2, r2, #1
   14758:	adc	r3, r3, #0
   1475c:	strd	r2, [r4, #40]	; 0x28
   14760:	pop	{r4, pc}
   14764:	andeq	r9, r2, r8, lsl #10
   14768:	andeq	r7, r1, r4, ror #11

0001476c <__generate_code_for_return@@Base>:
   1476c:	push	{r4, r5, r6, lr}
   14770:	mov	r5, r0
   14774:	ldr	r4, [pc, #172]	; 14828 <__generate_code_for_return@@Base+0xbc>
   14778:	ldr	r6, [r1, #8]
   1477c:	ldr	r1, [r0, #4]
   14780:	ldrd	r2, [r4, #48]	; 0x30
   14784:	ldr	r0, [pc, #160]	; 1482c <__generate_code_for_return@@Base+0xc0>
   14788:	adds	r2, r2, #1
   1478c:	adc	r3, r3, #0
   14790:	strd	r2, [r4, #48]	; 0x30
   14794:	bl	11b04 <fputs@plt>
   14798:	ldr	r3, [r6]
   1479c:	cmp	r3, #1
   147a0:	bne	147f0 <__generate_code_for_return@@Base+0x84>
   147a4:	ldrd	r2, [r4, #64]	; 0x40
   147a8:	mov	r1, r6
   147ac:	mov	r0, r5
   147b0:	adds	r2, r2, #1
   147b4:	adc	r3, r3, #0
   147b8:	strd	r2, [r4, #64]	; 0x40
   147bc:	bl	14728 <__generate_code_for_int@@Base>
   147c0:	ldrd	r2, [r4, #72]	; 0x48
   147c4:	ldr	r1, [r5, #4]
   147c8:	ldr	r0, [pc, #96]	; 14830 <__generate_code_for_return@@Base+0xc4>
   147cc:	adds	r2, r2, #1
   147d0:	adc	r3, r3, #0
   147d4:	strd	r2, [r4, #72]	; 0x48
   147d8:	bl	11b04 <fputs@plt>
   147dc:	ldrd	r2, [r4, #80]	; 0x50
   147e0:	adds	r2, r2, #1
   147e4:	adc	r3, r3, #0
   147e8:	strd	r2, [r4, #80]	; 0x50
   147ec:	pop	{r4, r5, r6, pc}
   147f0:	ldrd	r2, [r4, #56]	; 0x38
   147f4:	ldr	r0, [pc, #56]	; 14834 <__generate_code_for_return@@Base+0xc8>
   147f8:	adds	r2, r2, #1
   147fc:	adc	r3, r3, #0
   14800:	strd	r2, [r4, #56]	; 0x38
   14804:	ldr	r3, [pc, #44]	; 14838 <__generate_code_for_return@@Base+0xcc>
   14808:	ldr	r1, [r3]
   1480c:	bl	11b04 <fputs@plt>
   14810:	ldrd	r2, [r4, #88]	; 0x58
   14814:	mov	r0, #1
   14818:	adds	r2, r2, #1
   1481c:	adc	r3, r3, #0
   14820:	strd	r2, [r4, #88]	; 0x58
   14824:	bl	11a38 <exit@plt>
   14828:	andeq	r9, r2, r8, lsl #10
   1482c:	andeq	r7, r1, r8, ror #11
   14830:	strdeq	r7, [r1], -r2
   14834:	strdeq	r7, [r1], -fp
   14838:			; <UNDEFINED> instruction: 0x00028ab8

0001483c <__generate_code_for_binary_boolean_expression@@Base>:
   1483c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14840:	mov	r5, r0
   14844:	ldr	r4, [pc, #632]	; 14ac4 <__generate_code_for_binary_boolean_expression@@Base+0x288>
   14848:	mov	r6, r1
   1484c:	strd	r2, [sp]
   14850:	ldrd	r0, [r4, #96]	; 0x60
   14854:	ldr	r8, [r6, #8]
   14858:	ldr	r7, [r6, #12]
   1485c:	adds	r2, r0, #1
   14860:	adc	r3, r1, #0
   14864:	ldr	r0, [pc, #604]	; 14ac8 <__generate_code_for_binary_boolean_expression@@Base+0x28c>
   14868:	ldr	r1, [r5, #4]
   1486c:	strd	r2, [r4, #96]	; 0x60
   14870:	bl	11b04 <fputs@plt>
   14874:	ldrd	r0, [r4, #104]	; 0x68
   14878:	adds	r2, r0, #1
   1487c:	adc	r3, r1, #0
   14880:	mov	r0, r5
   14884:	mov	r1, r8
   14888:	strd	r2, [r4, #104]	; 0x68
   1488c:	bl	14728 <__generate_code_for_int@@Base>
   14890:	ldrd	r0, [r4, #112]	; 0x70
   14894:	adds	r2, r0, #1
   14898:	adc	r3, r1, #0
   1489c:	mov	r0, #10
   148a0:	ldr	r1, [r5, #4]
   148a4:	strd	r2, [r4, #112]	; 0x70
   148a8:	bl	11ae0 <fputc@plt>
   148ac:	ldrd	r0, [r4, #120]	; 0x78
   148b0:	adds	r2, r0, #1
   148b4:	adc	r3, r1, #0
   148b8:	ldr	r0, [pc, #524]	; 14acc <__generate_code_for_binary_boolean_expression@@Base+0x290>
   148bc:	ldr	r1, [r5, #4]
   148c0:	strd	r2, [r4, #120]	; 0x78
   148c4:	bl	11b04 <fputs@plt>
   148c8:	ldrd	r0, [r4, #128]	; 0x80
   148cc:	adds	r2, r0, #1
   148d0:	adc	r3, r1, #0
   148d4:	mov	r0, r5
   148d8:	mov	r1, r7
   148dc:	strd	r2, [r4, #128]	; 0x80
   148e0:	bl	14728 <__generate_code_for_int@@Base>
   148e4:	ldrd	r0, [r4, #136]	; 0x88
   148e8:	adds	r2, r0, #1
   148ec:	adc	r3, r1, #0
   148f0:	mov	r0, #10
   148f4:	ldr	r1, [r5, #4]
   148f8:	strd	r2, [r4, #136]	; 0x88
   148fc:	bl	11ae0 <fputc@plt>
   14900:	ldrd	r0, [r4, #144]	; 0x90
   14904:	adds	r2, r0, #1
   14908:	adc	r3, r1, #0
   1490c:	ldr	r0, [pc, #444]	; 14ad0 <__generate_code_for_binary_boolean_expression@@Base+0x294>
   14910:	ldr	r1, [r5, #4]
   14914:	strd	r2, [r4, #144]	; 0x90
   14918:	bl	11b04 <fputs@plt>
   1491c:	ldrd	r0, [r4, #152]	; 0x98
   14920:	adds	r2, r0, #1
   14924:	adc	r3, r1, #0
   14928:	ldr	r1, [r6, #16]
   1492c:	strd	r2, [r4, #152]	; 0x98
   14930:	ldrd	r2, [sp]
   14934:	cmp	r1, #7
   14938:	ldrls	pc, [pc, r1, lsl #2]
   1493c:	b	14a88 <__generate_code_for_binary_boolean_expression@@Base+0x24c>
   14940:	andeq	r4, r1, r0, ror #18
   14944:	muleq	r1, r8, r9
   14948:	andeq	r4, r1, r8, asr #19
   1494c:	strdeq	r4, [r1], -r8
   14950:	muleq	r1, r0, r9
   14954:	muleq	r1, r0, r9
   14958:	andeq	r4, r1, r8, lsr #20
   1495c:	andeq	r4, r1, r8, asr sl
   14960:	ldrd	r0, [r4, #168]	; 0xa8
   14964:	adds	r6, r0, #1
   14968:	adc	r7, r1, #0
   1496c:	ldr	r0, [r5, #4]
   14970:	ldr	r1, [pc, #348]	; 14ad4 <__generate_code_for_binary_boolean_expression@@Base+0x298>
   14974:	strd	r6, [r4, #168]	; 0xa8
   14978:	bl	11a5c <fprintf@plt>
   1497c:	ldr	r1, [pc, #340]	; 14ad8 <__generate_code_for_binary_boolean_expression@@Base+0x29c>
   14980:	ldrd	r2, [r1, #-8]
   14984:	adds	r4, r2, #1
   14988:	adc	r5, r3, #0
   1498c:	strd	r4, [r1, #-8]
   14990:	add	sp, sp, #8
   14994:	pop	{r4, r5, r6, r7, r8, pc}
   14998:	ldrd	r0, [r4, #176]	; 0xb0
   1499c:	adds	r6, r0, #1
   149a0:	adc	r7, r1, #0
   149a4:	ldr	r0, [r5, #4]
   149a8:	ldr	r1, [pc, #300]	; 14adc <__generate_code_for_binary_boolean_expression@@Base+0x2a0>
   149ac:	strd	r6, [r4, #176]	; 0xb0
   149b0:	bl	11a5c <fprintf@plt>
   149b4:	ldrd	r2, [r4, #216]	; 0xd8
   149b8:	adds	r0, r2, #1
   149bc:	adc	r1, r3, #0
   149c0:	strd	r0, [r4, #216]	; 0xd8
   149c4:	b	14990 <__generate_code_for_binary_boolean_expression@@Base+0x154>
   149c8:	ldrd	r0, [r4, #184]	; 0xb8
   149cc:	adds	r6, r0, #1
   149d0:	adc	r7, r1, #0
   149d4:	ldr	r0, [r5, #4]
   149d8:	ldr	r1, [pc, #256]	; 14ae0 <__generate_code_for_binary_boolean_expression@@Base+0x2a4>
   149dc:	strd	r6, [r4, #184]	; 0xb8
   149e0:	bl	11a5c <fprintf@plt>
   149e4:	ldrd	r2, [r4, #224]	; 0xe0
   149e8:	adds	r0, r2, #1
   149ec:	adc	r1, r3, #0
   149f0:	strd	r0, [r4, #224]	; 0xe0
   149f4:	b	14990 <__generate_code_for_binary_boolean_expression@@Base+0x154>
   149f8:	ldrd	r0, [r4, #192]	; 0xc0
   149fc:	adds	r6, r0, #1
   14a00:	adc	r7, r1, #0
   14a04:	ldr	r0, [r5, #4]
   14a08:	ldr	r1, [pc, #212]	; 14ae4 <__generate_code_for_binary_boolean_expression@@Base+0x2a8>
   14a0c:	strd	r6, [r4, #192]	; 0xc0
   14a10:	bl	11a5c <fprintf@plt>
   14a14:	ldrd	r2, [r4, #232]	; 0xe8
   14a18:	adds	r0, r2, #1
   14a1c:	adc	r1, r3, #0
   14a20:	strd	r0, [r4, #232]	; 0xe8
   14a24:	b	14990 <__generate_code_for_binary_boolean_expression@@Base+0x154>
   14a28:	ldrd	r0, [r4, #208]	; 0xd0
   14a2c:	adds	r6, r0, #1
   14a30:	adc	r7, r1, #0
   14a34:	ldr	r0, [r5, #4]
   14a38:	ldr	r1, [pc, #168]	; 14ae8 <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   14a3c:	strd	r6, [r4, #208]	; 0xd0
   14a40:	bl	11a5c <fprintf@plt>
   14a44:	ldrd	r2, [r4, #240]	; 0xf0
   14a48:	adds	r0, r2, #1
   14a4c:	adc	r1, r3, #0
   14a50:	strd	r0, [r4, #240]	; 0xf0
   14a54:	b	14990 <__generate_code_for_binary_boolean_expression@@Base+0x154>
   14a58:	ldrd	r0, [r4, #200]	; 0xc8
   14a5c:	adds	r6, r0, #1
   14a60:	adc	r7, r1, #0
   14a64:	ldr	r0, [r5, #4]
   14a68:	ldr	r1, [pc, #124]	; 14aec <__generate_code_for_binary_boolean_expression@@Base+0x2b0>
   14a6c:	strd	r6, [r4, #200]	; 0xc8
   14a70:	bl	11a5c <fprintf@plt>
   14a74:	ldrd	r2, [r4, #248]	; 0xf8
   14a78:	adds	r0, r2, #1
   14a7c:	adc	r1, r3, #0
   14a80:	strd	r0, [r4, #248]	; 0xf8
   14a84:	b	14990 <__generate_code_for_binary_boolean_expression@@Base+0x154>
   14a88:	ldrd	r2, [r4, #160]	; 0xa0
   14a8c:	adds	r0, r2, #1
   14a90:	adc	r1, r3, #0
   14a94:	ldr	r3, [pc, #84]	; 14af0 <__generate_code_for_binary_boolean_expression@@Base+0x2b4>
   14a98:	strd	r0, [r4, #160]	; 0xa0
   14a9c:	ldr	r0, [pc, #80]	; 14af4 <__generate_code_for_binary_boolean_expression@@Base+0x2b8>
   14aa0:	ldr	r1, [r3]
   14aa4:	bl	11b04 <fputs@plt>
   14aa8:	ldr	r1, [pc, #72]	; 14af8 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   14aac:	mov	r0, #1
   14ab0:	ldrd	r2, [r1]
   14ab4:	adds	r4, r2, #1
   14ab8:	adc	r5, r3, #0
   14abc:	strd	r4, [r1]
   14ac0:	bl	11a38 <exit@plt>
   14ac4:	andeq	r9, r2, r8, lsl #10
   14ac8:	andeq	r7, r1, r8, ror #11
   14acc:	andeq	r7, r1, r1, lsr #12
   14ad0:	andeq	r7, r1, fp, lsr #12
   14ad4:	andeq	r7, r1, r8, lsr r6
   14ad8:	andeq	r9, r2, r8, lsl r6
   14adc:	andeq	r7, r1, fp, asr #12
   14ae0:	andeq	r7, r1, lr, asr r6
   14ae4:	andeq	r7, r1, r1, ror r6
   14ae8:	andeq	r7, r1, r4, lsl #13
   14aec:	muleq	r1, r7, r6
   14af0:			; <UNDEFINED> instruction: 0x00028ab8
   14af4:	andeq	r7, r1, sl, lsr #13
   14af8:	andeq	r9, r2, r8, lsl #12

00014afc <__generate_code_for_unary_boolean_expression@@Base>:
   14afc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b00:	mov	r6, r2
   14b04:	ldr	r4, [pc, #220]	; 14be8 <__generate_code_for_unary_boolean_expression@@Base+0xec>
   14b08:	mov	r7, r3
   14b0c:	mov	r5, r0
   14b10:	ldrd	r2, [r4]
   14b14:	ldr	r9, [r1, #8]
   14b18:	mov	r8, r1
   14b1c:	adds	r2, r2, #1
   14b20:	adc	r3, r3, #0
   14b24:	ldr	r1, [r0, #4]
   14b28:	ldr	r0, [pc, #188]	; 14bec <__generate_code_for_unary_boolean_expression@@Base+0xf0>
   14b2c:	strd	r2, [r4]
   14b30:	bl	11b04 <fputs@plt>
   14b34:	ldrd	r2, [r4, #8]
   14b38:	ldr	r1, [r5, #4]
   14b3c:	ldr	r0, [pc, #172]	; 14bf0 <__generate_code_for_unary_boolean_expression@@Base+0xf4>
   14b40:	adds	r2, r2, #1
   14b44:	adc	r3, r3, #0
   14b48:	strd	r2, [r4, #8]
   14b4c:	bl	11b04 <fputs@plt>
   14b50:	ldrd	r2, [r4, #16]
   14b54:	mov	r1, r9
   14b58:	mov	r0, r5
   14b5c:	adds	r2, r2, #1
   14b60:	adc	r3, r3, #0
   14b64:	strd	r2, [r4, #16]
   14b68:	bl	14728 <__generate_code_for_int@@Base>
   14b6c:	ldr	r3, [r8, #16]
   14b70:	cmp	r3, #8
   14b74:	bne	14bb0 <__generate_code_for_unary_boolean_expression@@Base+0xb4>
   14b78:	ldrd	r0, [r4, #32]
   14b7c:	mov	r2, r6
   14b80:	mov	r3, r7
   14b84:	adds	r0, r0, #1
   14b88:	adc	r1, r1, #0
   14b8c:	strd	r0, [r4, #32]
   14b90:	ldr	r1, [pc, #92]	; 14bf4 <__generate_code_for_unary_boolean_expression@@Base+0xf8>
   14b94:	ldr	r0, [r5, #4]
   14b98:	bl	11a5c <fprintf@plt>
   14b9c:	ldrd	r2, [r4, #40]	; 0x28
   14ba0:	adds	r2, r2, #1
   14ba4:	adc	r3, r3, #0
   14ba8:	strd	r2, [r4, #40]	; 0x28
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bb0:	ldrd	r2, [r4, #24]
   14bb4:	ldr	r0, [pc, #60]	; 14bf8 <__generate_code_for_unary_boolean_expression@@Base+0xfc>
   14bb8:	adds	r2, r2, #1
   14bbc:	adc	r3, r3, #0
   14bc0:	strd	r2, [r4, #24]
   14bc4:	ldr	r3, [pc, #48]	; 14bfc <__generate_code_for_unary_boolean_expression@@Base+0x100>
   14bc8:	ldr	r1, [r3]
   14bcc:	bl	11b04 <fputs@plt>
   14bd0:	ldrd	r2, [r4, #48]	; 0x30
   14bd4:	mov	r0, #1
   14bd8:	adds	r2, r2, #1
   14bdc:	adc	r3, r3, #0
   14be0:	strd	r2, [r4, #48]	; 0x30
   14be4:	bl	11a38 <exit@plt>
   14be8:	andeq	r9, r2, r8, lsl r6
   14bec:	andeq	r7, r1, sl, asr #13
   14bf0:	andeq	r7, r1, r1, lsr #12
   14bf4:	andeq	r7, r1, fp, asr #12
   14bf8:	andeq	r7, r1, sl, lsr #13
   14bfc:			; <UNDEFINED> instruction: 0x00028ab8

00014c00 <__generate_code_for_if_expression@@Base>:
   14c00:	ldr	ip, [r1, #16]
   14c04:	push	{r4, r6, r7, lr}
   14c08:	cmp	ip, #8
   14c0c:	ldr	r4, [pc, #80]	; 14c64 <__generate_code_for_if_expression@@Base+0x64>
   14c10:	bne	14c3c <__generate_code_for_if_expression@@Base+0x3c>
   14c14:	ldrd	r6, [r4]
   14c18:	adds	r6, r6, #1
   14c1c:	adc	r7, r7, #0
   14c20:	strd	r6, [r4]
   14c24:	bl	14afc <__generate_code_for_unary_boolean_expression@@Base>
   14c28:	ldrd	r2, [r4, #8]
   14c2c:	adds	r2, r2, #1
   14c30:	adc	r3, r3, #0
   14c34:	strd	r2, [r4, #8]
   14c38:	pop	{r4, r6, r7, pc}
   14c3c:	ldrd	r6, [r4, #-8]
   14c40:	adds	r6, r6, #1
   14c44:	adc	r7, r7, #0
   14c48:	strd	r6, [r4, #-8]
   14c4c:	bl	1483c <__generate_code_for_binary_boolean_expression@@Base>
   14c50:	ldrd	r2, [r4, #16]
   14c54:	adds	r2, r2, #1
   14c58:	adc	r3, r3, #0
   14c5c:	strd	r2, [r4, #16]
   14c60:	pop	{r4, r6, r7, pc}
   14c64:	andeq	r9, r2, r8, asr r6

00014c68 <__generate_code_for_body@@Base>:
   14c68:	push	{r4, r5, r6, lr}
   14c6c:	mov	r5, r0
   14c70:	ldr	r4, [pc, #192]	; 14d38 <__generate_code_for_body@@Base+0xd0>
   14c74:	cmp	r1, #0
   14c78:	bne	14c90 <__generate_code_for_body@@Base+0x28>
   14c7c:	ldrd	r2, [r4, #40]	; 0x28
   14c80:	adds	r2, r2, #1
   14c84:	adc	r3, r3, #0
   14c88:	strd	r2, [r4, #40]	; 0x28
   14c8c:	pop	{r4, r5, r6, pc}
   14c90:	ldrd	r2, [r4, #32]
   14c94:	adds	r2, r2, #1
   14c98:	adc	r3, r3, #0
   14c9c:	strd	r2, [r4, #32]
   14ca0:	ldm	r1, {r3, r6}
   14ca4:	cmp	r3, #3
   14ca8:	beq	14cdc <__generate_code_for_body@@Base+0x74>
   14cac:	cmp	r3, #4
   14cb0:	beq	14d1c <__generate_code_for_body@@Base+0xb4>
   14cb4:	ldr	r3, [pc, #128]	; 14d3c <__generate_code_for_body@@Base+0xd4>
   14cb8:	ldr	r0, [pc, #128]	; 14d40 <__generate_code_for_body@@Base+0xd8>
   14cbc:	ldr	r1, [r3]
   14cc0:	bl	11b04 <fputs@plt>
   14cc4:	ldrd	r2, [r4, #8]
   14cc8:	mov	r0, #1
   14ccc:	adds	r2, r2, #1
   14cd0:	adc	r3, r3, #0
   14cd4:	strd	r2, [r4, #8]
   14cd8:	bl	11a38 <exit@plt>
   14cdc:	ldrd	r2, [r4, #-8]
   14ce0:	mov	r0, r5
   14ce4:	adds	r2, r2, #1
   14ce8:	adc	r3, r3, #0
   14cec:	strd	r2, [r4, #-8]
   14cf0:	bl	1476c <__generate_code_for_return@@Base>
   14cf4:	ldrd	r2, [r4, #16]
   14cf8:	adds	r2, r2, #1
   14cfc:	adc	r3, r3, #0
   14d00:	strd	r2, [r4, #16]
   14d04:	ldrd	r2, [r4, #24]
   14d08:	mov	r1, r6
   14d0c:	adds	r2, r2, #1
   14d10:	adc	r3, r3, #0
   14d14:	strd	r2, [r4, #24]
   14d18:	b	14c74 <__generate_code_for_body@@Base+0xc>
   14d1c:	ldrd	r2, [r4]
   14d20:	mov	r0, r5
   14d24:	adds	r2, r2, #1
   14d28:	adc	r3, r3, #0
   14d2c:	strd	r2, [r4]
   14d30:	bl	14d44 <__generate_code_for_if@@Base>
   14d34:	b	14d04 <__generate_code_for_body@@Base+0x9c>
   14d38:	andeq	r9, r2, r8, ror r6
   14d3c:			; <UNDEFINED> instruction: 0x00028ab8
   14d40:	ldrdeq	r7, [r1], -r6

00014d44 <__generate_code_for_if@@Base>:
   14d44:	push	{r4, r5, r6, r8, r9, lr}
   14d48:	mov	r6, r1
   14d4c:	ldr	r4, [pc, #184]	; 14e0c <__generate_code_for_if@@Base+0xc8>
   14d50:	ldrd	r8, [r0, #8]
   14d54:	ldr	r1, [r1, #8]
   14d58:	ldrd	r2, [r4]
   14d5c:	mov	r5, r0
   14d60:	adds	r2, r2, #1
   14d64:	adc	r3, r3, #0
   14d68:	strd	r2, [r4]
   14d6c:	adds	r2, r8, #1
   14d70:	adc	r3, r9, #0
   14d74:	strd	r2, [r0, #8]
   14d78:	mov	r2, r8
   14d7c:	mov	r3, r9
   14d80:	bl	14c00 <__generate_code_for_if_expression@@Base>
   14d84:	ldrd	r2, [r4, #8]
   14d88:	ldr	r1, [r6, #12]
   14d8c:	mov	r0, r5
   14d90:	adds	r2, r2, #1
   14d94:	adc	r3, r3, #0
   14d98:	strd	r2, [r4, #8]
   14d9c:	bl	14c68 <__generate_code_for_body@@Base>
   14da0:	ldrd	r2, [r4, #16]
   14da4:	ldr	r1, [pc, #100]	; 14e10 <__generate_code_for_if@@Base+0xcc>
   14da8:	ldr	r0, [r5, #4]
   14dac:	adds	r2, r2, #1
   14db0:	adc	r3, r3, #0
   14db4:	strd	r2, [r4, #16]
   14db8:	mov	r2, r8
   14dbc:	mov	r3, r9
   14dc0:	bl	11a5c <fprintf@plt>
   14dc4:	ldrd	r2, [r4, #24]
   14dc8:	ldr	r1, [r6, #16]
   14dcc:	adds	r2, r2, #1
   14dd0:	adc	r3, r3, #0
   14dd4:	cmp	r1, #0
   14dd8:	strd	r2, [r4, #24]
   14ddc:	popeq	{r4, r5, r6, r8, r9, pc}
   14de0:	ldrd	r2, [r4, #32]
   14de4:	mov	r0, r5
   14de8:	adds	r2, r2, #1
   14dec:	adc	r3, r3, #0
   14df0:	strd	r2, [r4, #32]
   14df4:	bl	14c68 <__generate_code_for_body@@Base>
   14df8:	ldrd	r2, [r4, #40]	; 0x28
   14dfc:	adds	r2, r2, #1
   14e00:	adc	r3, r3, #0
   14e04:	strd	r2, [r4, #40]	; 0x28
   14e08:	pop	{r4, r5, r6, r8, r9, pc}
   14e0c:	andeq	r9, r2, r8, lsr #13
   14e10:	andeq	r7, r1, fp, lsl #14

00014e14 <__generate_code_for_function@@Base>:
   14e14:	push	{r4, r5, r6, lr}
   14e18:	mov	r5, r0
   14e1c:	ldr	r4, [pc, #80]	; 14e74 <__generate_code_for_function@@Base+0x60>
   14e20:	mov	r6, r1
   14e24:	ldr	r0, [r0, #4]
   14e28:	ldrd	r2, [r4]
   14e2c:	adds	r2, r2, #1
   14e30:	adc	r3, r3, #0
   14e34:	strd	r2, [r4]
   14e38:	ldr	r2, [r1, #8]
   14e3c:	ldr	r1, [pc, #52]	; 14e78 <__generate_code_for_function@@Base+0x64>
   14e40:	bl	11a5c <fprintf@plt>
   14e44:	ldrd	r2, [r4, #8]
   14e48:	ldr	r1, [r6, #12]
   14e4c:	mov	r0, r5
   14e50:	adds	r2, r2, #1
   14e54:	adc	r3, r3, #0
   14e58:	strd	r2, [r4, #8]
   14e5c:	bl	14c68 <__generate_code_for_body@@Base>
   14e60:	ldrd	r2, [r4, #16]
   14e64:	adds	r2, r2, #1
   14e68:	adc	r3, r3, #0
   14e6c:	strd	r2, [r4, #16]
   14e70:	pop	{r4, r5, r6, pc}
   14e74:	ldrdeq	r9, [r2], -r8
   14e78:	andeq	r7, r1, sl, lsl r7

00014e7c <__generate_code_for_main@@Base>:
   14e7c:	ldr	r3, [r1]
   14e80:	push	{r4, lr}
   14e84:	cmp	r3, #2
   14e88:	ldr	r4, [pc, #96]	; 14ef0 <__generate_code_for_main@@Base+0x74>
   14e8c:	bne	14eb8 <__generate_code_for_main@@Base+0x3c>
   14e90:	ldrd	r2, [r4]
   14e94:	adds	r2, r2, #1
   14e98:	adc	r3, r3, #0
   14e9c:	strd	r2, [r4]
   14ea0:	bl	14e14 <__generate_code_for_function@@Base>
   14ea4:	ldrd	r2, [r4, #8]
   14ea8:	adds	r2, r2, #1
   14eac:	adc	r3, r3, #0
   14eb0:	strd	r2, [r4, #8]
   14eb4:	pop	{r4, pc}
   14eb8:	ldrd	r2, [r4, #-8]
   14ebc:	ldr	r0, [pc, #48]	; 14ef4 <__generate_code_for_main@@Base+0x78>
   14ec0:	adds	r2, r2, #1
   14ec4:	adc	r3, r3, #0
   14ec8:	strd	r2, [r4, #-8]
   14ecc:	ldr	r3, [pc, #36]	; 14ef8 <__generate_code_for_main@@Base+0x7c>
   14ed0:	ldr	r1, [r3]
   14ed4:	bl	11b04 <fputs@plt>
   14ed8:	ldrd	r2, [r4, #16]
   14edc:	mov	r0, #1
   14ee0:	adds	r2, r2, #1
   14ee4:	adc	r3, r3, #0
   14ee8:	strd	r2, [r4, #16]
   14eec:	bl	11a38 <exit@plt>
   14ef0:	strdeq	r9, [r2], -r8
   14ef4:	andeq	r7, r1, pc, lsl r7
   14ef8:			; <UNDEFINED> instruction: 0x00028ab8

00014efc <__generate_code@@Base>:
   14efc:	push	{r4, r5, r6, lr}
   14f00:	mov	r5, r0
   14f04:	ldr	r4, [pc, #76]	; 14f58 <__generate_code@@Base+0x5c>
   14f08:	mov	r6, r1
   14f0c:	ldr	r1, [r0, #4]
   14f10:	ldrd	r2, [r4, #-8]
   14f14:	ldr	r0, [pc, #64]	; 14f5c <__generate_code@@Base+0x60>
   14f18:	adds	r2, r2, #1
   14f1c:	adc	r3, r3, #0
   14f20:	strd	r2, [r4, #-8]
   14f24:	bl	11b04 <fputs@plt>
   14f28:	ldrd	r2, [r4]
   14f2c:	mov	r1, r6
   14f30:	mov	r0, r5
   14f34:	adds	r2, r2, #1
   14f38:	adc	r3, r3, #0
   14f3c:	strd	r2, [r4]
   14f40:	bl	14e7c <__generate_code_for_main@@Base>
   14f44:	ldrd	r2, [r4, #8]
   14f48:	adds	r2, r2, #1
   14f4c:	adc	r3, r3, #0
   14f50:	strd	r2, [r4, #8]
   14f54:	pop	{r4, r5, r6, pc}
   14f58:	andeq	r9, r2, r8, lsl r7
   14f5c:	andeq	r7, r1, lr, asr #14

00014f60 <generate_code@@Base>:
   14f60:	push	{r4, r5, r6, lr}
   14f64:	mov	r6, r0
   14f68:	ldr	r4, [pc, #96]	; 14fd0 <generate_code@@Base+0x70>
   14f6c:	ldr	r0, [r0]
   14f70:	ldrd	r2, [r4]
   14f74:	adds	r2, r2, #1
   14f78:	adc	r3, r3, #0
   14f7c:	strd	r2, [r4]
   14f80:	bl	14664 <build_ast@@Base>
   14f84:	ldrd	r2, [r4, #8]
   14f88:	adds	r2, r2, #1
   14f8c:	adc	r3, r3, #0
   14f90:	strd	r2, [r4, #8]
   14f94:	mov	r1, r0
   14f98:	mov	r5, r0
   14f9c:	mov	r0, r6
   14fa0:	bl	14efc <__generate_code@@Base>
   14fa4:	ldrd	r2, [r4, #16]
   14fa8:	mov	r0, r5
   14fac:	adds	r2, r2, #1
   14fb0:	adc	r3, r3, #0
   14fb4:	strd	r2, [r4, #16]
   14fb8:	bl	13460 <free_node@@Base>
   14fbc:	ldrd	r2, [r4, #24]
   14fc0:	adds	r2, r2, #1
   14fc4:	adc	r3, r3, #0
   14fc8:	strd	r2, [r4, #24]
   14fcc:	pop	{r4, r5, r6, pc}
   14fd0:	andeq	r9, r2, r8, lsr #14
   14fd4:	b	16200 <generate_code@@Base+0x12a0>
   14fd8:	push	{r4, r5, r6, lr}
   14fdc:	subs	r5, r1, #0
   14fe0:	popeq	{r4, r5, r6, pc}
   14fe4:	mov	r4, r0
   14fe8:	bl	14fd4 <generate_code@@Base+0x74>
   14fec:	ldrd	r2, [r4]
   14ff0:	adds	r0, r0, r2
   14ff4:	adc	r1, r1, r3
   14ff8:	subs	r5, r5, #1
   14ffc:	strd	r0, [r4], #8
   15000:	bne	14fe8 <generate_code@@Base+0x88>
   15004:	pop	{r4, r5, r6, pc}
   15008:	ldr	r3, [pc, #20]	; 15024 <generate_code@@Base+0xc4>
   1500c:	ldr	r2, [pc, #20]	; 15028 <generate_code@@Base+0xc8>
   15010:	add	r3, pc, r3
   15014:	ldr	r3, [r3, r2]
   15018:	ldmib	r3, {r0, r3}
   1501c:	add	r0, r0, r3
   15020:	bx	lr
   15024:	andeq	r2, r1, r8, ror #31
   15028:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1502c:	ldr	r3, [pc, #28]	; 15050 <generate_code@@Base+0xf0>
   15030:	ldr	r2, [pc, #28]	; 15054 <generate_code@@Base+0xf4>
   15034:	add	r3, pc, r3
   15038:	ldr	r3, [r3, r2]
   1503c:	ldr	r2, [r3]
   15040:	cmp	r2, #0
   15044:	ldrne	r0, [r3, #20]
   15048:	moveq	r0, #1
   1504c:	bx	lr
   15050:	andeq	r2, r1, r4, asr #31
   15054:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15058:	bx	lr
   1505c:	ldr	ip, [pc, #32]	; 15084 <generate_code@@Base+0x124>
   15060:	mov	r3, #32
   15064:	teq	r0, r1
   15068:	movmi	r2, ip
   1506c:	movpl	r2, #0
   15070:	subs	r3, r3, #1
   15074:	lsl	r1, r1, #1
   15078:	eor	r0, r2, r0, lsl #1
   1507c:	bne	15064 <generate_code@@Base+0x104>
   15080:	bx	lr
   15084:	strbeq	r1, [r1], #3511	; 0xdb7
   15088:	ldr	r3, [pc, #76]	; 150dc <generate_code@@Base+0x17c>
   1508c:	ldr	r1, [pc, #76]	; 150e0 <generate_code@@Base+0x180>
   15090:	add	r3, pc, r3
   15094:	push	{r4, r5, r6, lr}
   15098:	mov	r5, r0
   1509c:	ldr	r4, [r3, r1]
   150a0:	lsl	r1, r0, #2
   150a4:	mov	r0, r4
   150a8:	mov	r2, #1
   150ac:	ldr	r3, [r0], #28
   150b0:	bl	119c0 <fwrite@plt>
   150b4:	cmp	r0, #1
   150b8:	movne	r3, #1
   150bc:	ldr	r0, [r4, #8]
   150c0:	strne	r3, [r4, #20]
   150c4:	ldr	r3, [r4, #4]
   150c8:	sub	r0, r0, r5
   150cc:	add	r3, r3, r5
   150d0:	str	r3, [r4, #4]
   150d4:	str	r0, [r4, #8]
   150d8:	pop	{r4, r5, r6, pc}
   150dc:	andeq	r2, r1, r8, ror #30
   150e0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   150e4:	ldr	r3, [pc, #76]	; 15138 <generate_code@@Base+0x1d8>
   150e8:	ldr	r2, [pc, #76]	; 1513c <generate_code@@Base+0x1dc>
   150ec:	add	r3, pc, r3
   150f0:	push	{r4, r5, r6, lr}
   150f4:	mov	r5, r0
   150f8:	ldr	r4, [r3, r2]
   150fc:	ldr	r3, [r4, #8]
   15100:	cmp	r3, #1024	; 0x400
   15104:	bcc	15124 <generate_code@@Base+0x1c4>
   15108:	mov	r0, #1024	; 0x400
   1510c:	bl	15088 <generate_code@@Base+0x128>
   15110:	ldr	r3, [r4, #8]
   15114:	cmp	r3, #0
   15118:	addne	r2, r4, #4096	; 0x1000
   1511c:	ldrne	r2, [r2, #28]
   15120:	strne	r2, [r4, #28]
   15124:	add	r0, r3, #7
   15128:	add	r3, r5, r3
   1512c:	str	r3, [r4, #8]
   15130:	add	r0, r4, r0, lsl #2
   15134:	pop	{r4, r5, r6, pc}
   15138:	andeq	r2, r1, ip, lsl #30
   1513c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15140:	ldr	r3, [pc, #172]	; 151f4 <generate_code@@Base+0x294>
   15144:	ldr	r2, [pc, #172]	; 151f8 <generate_code@@Base+0x298>
   15148:	add	r3, pc, r3
   1514c:	push	{r4, r5, r6, lr}
   15150:	mov	r5, r0
   15154:	ldr	r4, [r3, r2]
   15158:	ldr	r3, [r4, #8]
   1515c:	ldr	ip, [r4, #12]
   15160:	sub	ip, ip, r3
   15164:	cmp	ip, r0
   15168:	bcs	151c4 <generate_code@@Base+0x264>
   1516c:	ldr	r2, [r4, #4]
   15170:	cmp	ip, #0
   15174:	add	r2, r2, r3
   15178:	str	r2, [r4, #4]
   1517c:	addne	r2, r4, #28
   15180:	mov	r0, r4
   15184:	ldrne	r3, [r2, r3, lsl #2]
   15188:	mov	r6, #0
   1518c:	strne	r3, [r4, #28]
   15190:	ldr	r3, [r0], #28
   15194:	mov	r2, #4096	; 0x1000
   15198:	add	r0, r0, ip, lsl #2
   1519c:	mov	r1, #1
   151a0:	str	ip, [r4, #12]
   151a4:	str	r6, [r4, #8]
   151a8:	bl	119d8 <fread@plt>
   151ac:	ldr	r3, [r4, #12]
   151b0:	add	r0, r3, r0, lsr #2
   151b4:	cmp	r5, r0
   151b8:	str	r0, [r4, #12]
   151bc:	bhi	151d8 <generate_code@@Base+0x278>
   151c0:	ldr	r3, [r4, #8]
   151c4:	add	r0, r3, #7
   151c8:	add	r5, r5, r3
   151cc:	add	r0, r4, r0, lsl #2
   151d0:	str	r5, [r4, #8]
   151d4:	pop	{r4, r5, r6, pc}
   151d8:	ldr	r3, [r4, #16]
   151dc:	str	r6, [r4, #12]
   151e0:	add	r5, r5, r3
   151e4:	sub	r5, r5, r0
   151e8:	str	r5, [r4, #16]
   151ec:	mov	r0, r6
   151f0:	pop	{r4, r5, r6, pc}
   151f4:			; <UNDEFINED> instruction: 0x00012eb0
   151f8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   151fc:	push	{r0, r1, r2, r3}
   15200:	ldr	r3, [pc, #52]	; 1523c <generate_code@@Base+0x2dc>
   15204:	ldr	r1, [pc, #52]	; 15240 <generate_code@@Base+0x2e0>
   15208:	push	{lr}		; (str lr, [sp, #-4]!)
   1520c:	add	r3, pc, r3
   15210:	sub	sp, sp, #12
   15214:	add	r2, sp, #20
   15218:	str	r2, [sp, #4]
   1521c:	ldr	r0, [r3, r1]
   15220:	ldr	r1, [sp, #16]
   15224:	ldr	r0, [r0]
   15228:	bl	11ad4 <vfprintf@plt>
   1522c:	add	sp, sp, #12
   15230:	pop	{lr}		; (ldr lr, [sp], #4)
   15234:	add	sp, sp, #16
   15238:	bx	lr
   1523c:	andeq	r2, r1, ip, ror #27
   15240:	andeq	r0, r0, r4, lsr #1
   15244:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15248:	subs	r6, r1, #0
   1524c:	beq	152a8 <generate_code@@Base+0x348>
   15250:	cmp	r2, #0
   15254:	movne	r3, #0
   15258:	mov	r7, r2
   1525c:	ldr	r8, [r6]
   15260:	addne	r5, r0, #12
   15264:	movne	r4, r3
   15268:	beq	15298 <generate_code@@Base+0x338>
   1526c:	ldr	r0, [r5, #4]!
   15270:	add	r2, r6, r3, lsl #3
   15274:	cmp	r0, #0
   15278:	add	r9, r3, #1
   1527c:	add	r4, r4, #1
   15280:	beq	15290 <generate_code@@Base+0x330>
   15284:	ldr	r0, [r2, #28]
   15288:	bl	1199c <free@plt>
   1528c:	mov	r3, r9
   15290:	cmp	r7, r4
   15294:	bne	1526c <generate_code@@Base+0x30c>
   15298:	mov	r0, r6
   1529c:	bl	1199c <free@plt>
   152a0:	mov	r0, r8
   152a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152a8:	mov	r8, r6
   152ac:	b	152a0 <generate_code@@Base+0x340>
   152b0:	push	{r4, r5}
   152b4:	mov	r4, r0
   152b8:	mov	r5, r1
   152bc:	orrs	r3, r4, r5
   152c0:	beq	15304 <generate_code@@Base+0x3a4>
   152c4:	cmp	r1, #0
   152c8:	clzeq	r1, r0
   152cc:	addeq	r1, r1, #32
   152d0:	clzne	r1, r1
   152d4:	rsb	r3, r1, #63	; 0x3f
   152d8:	cmp	r3, #1
   152dc:	bls	15304 <generate_code@@Base+0x3a4>
   152e0:	rsb	r2, r1, #61	; 0x3d
   152e4:	rsb	r0, r2, #32
   152e8:	lsr	r3, r4, r2
   152ec:	sub	r2, r2, #32
   152f0:	orr	r3, r3, r5, lsl r0
   152f4:	orr	r3, r3, r5, lsr r2
   152f8:	rsb	r1, r1, #1073741886	; 0x4000003e
   152fc:	and	r0, r3, #3
   15300:	add	r0, r0, r1, lsl #2
   15304:	pop	{r4, r5}
   15308:	bx	lr
   1530c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15310:	mov	r1, r3
   15314:	mov	sl, r0
   15318:	mov	r0, r2
   1531c:	mov	r8, r2
   15320:	mov	r9, r3
   15324:	bl	152b0 <generate_code@@Base+0x350>
   15328:	add	r0, r0, r0, lsl #1
   1532c:	lsl	r0, r0, #3
   15330:	add	r3, sl, r0
   15334:	ldr	r2, [sl, r0]
   15338:	ldrd	r4, [r3, #16]
   1533c:	ldrd	r6, [r3, #8]
   15340:	add	r2, r2, #1
   15344:	adds	r4, r4, r8
   15348:	adc	r5, r5, r9
   1534c:	cmp	r8, r6
   15350:	sbcs	r1, r9, r7
   15354:	str	r2, [sl, r0]
   15358:	strd	r4, [r3, #16]
   1535c:	strdlt	r8, [r3, #8]
   15360:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15364:	ldr	r3, [r1, #8]
   15368:	cmp	r3, #0
   1536c:	bxeq	lr
   15370:	push	{r4, r5, r6, r7, r8, lr}
   15374:	add	r2, r1, #6016	; 0x1780
   15378:	mov	r8, r1
   1537c:	mov	r7, r0
   15380:	ldrd	r0, [r1, #24]
   15384:	add	r2, r2, #32
   15388:	mov	r3, r8
   1538c:	mov	ip, #0
   15390:	mov	r4, #0
   15394:	mov	r5, #0
   15398:	str	ip, [r3, #40]	; 0x28
   1539c:	strd	r0, [r3, #48]	; 0x30
   153a0:	strd	r4, [r3, #56]	; 0x38
   153a4:	add	r3, r3, #24
   153a8:	cmp	r2, r3
   153ac:	bne	15398 <generate_code@@Base+0x438>
   153b0:	cmp	r7, #0
   153b4:	popeq	{r4, r5, r6, r7, r8, pc}
   153b8:	add	r8, r8, #40	; 0x28
   153bc:	ldr	r3, [r7, #16]
   153c0:	cmp	r3, #0
   153c4:	beq	1544c <generate_code@@Base+0x4ec>
   153c8:	ldr	r2, [r7, #56]	; 0x38
   153cc:	cmp	r2, #0
   153d0:	beq	1544c <generate_code@@Base+0x4ec>
   153d4:	mov	r6, #0
   153d8:	b	153e8 <generate_code@@Base+0x488>
   153dc:	add	r6, r6, #1
   153e0:	cmp	r2, r6
   153e4:	beq	1544c <generate_code@@Base+0x4ec>
   153e8:	ldr	r3, [r7, #60]	; 0x3c
   153ec:	ldr	r4, [r3, r6, lsl #2]
   153f0:	cmp	r4, #0
   153f4:	beq	153dc <generate_code@@Base+0x47c>
   153f8:	ldr	r3, [r4]
   153fc:	cmp	r3, r7
   15400:	bne	153dc <generate_code@@Base+0x47c>
   15404:	ldr	r3, [r4, #16]
   15408:	cmp	r3, #0
   1540c:	beq	153dc <generate_code@@Base+0x47c>
   15410:	mov	r5, #0
   15414:	ldr	r2, [r4, #20]
   15418:	lsl	r3, r5, #3
   1541c:	add	r2, r2, r3
   15420:	mov	r0, r8
   15424:	ldrd	r2, [r2]
   15428:	bl	1530c <generate_code@@Base+0x3ac>
   1542c:	ldr	r3, [r4, #16]
   15430:	add	r5, r5, #1
   15434:	cmp	r3, r5
   15438:	bhi	15414 <generate_code@@Base+0x4b4>
   1543c:	ldr	r2, [r7, #56]	; 0x38
   15440:	add	r6, r6, #1
   15444:	cmp	r2, r6
   15448:	bne	153e8 <generate_code@@Base+0x488>
   1544c:	ldr	r7, [r7, #4]
   15450:	cmp	r7, #0
   15454:	bne	153bc <generate_code@@Base+0x45c>
   15458:	pop	{r4, r5, r6, r7, r8, pc}
   1545c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15460:	sub	sp, sp, #12
   15464:	mov	r5, r0
   15468:	str	r0, [sp, #4]
   1546c:	mov	r6, r2
   15470:	str	r2, [sp]
   15474:	mov	r0, r1
   15478:	mov	r4, r1
   1547c:	ldr	r2, [pc, #344]	; 155dc <generate_code@@Base+0x67c>
   15480:	mov	r1, #0
   15484:	bl	11a98 <memset@plt>
   15488:	subs	r3, r5, #0
   1548c:	mov	r5, #0
   15490:	str	r5, [r6]
   15494:	beq	155c0 <generate_code@@Base+0x660>
   15498:	mov	r7, r5
   1549c:	mov	r9, r5
   154a0:	mov	r8, r3
   154a4:	ldr	r0, [r8, #12]
   154a8:	bl	11a44 <strlen@plt>
   154ac:	cmp	r5, r0
   154b0:	ldrcc	r3, [sp]
   154b4:	strcc	r0, [r3]
   154b8:	mov	r0, r7
   154bc:	ldr	r1, [r8, #8]
   154c0:	bl	1505c <generate_code@@Base+0xfc>
   154c4:	ldr	r6, [r8, #56]	; 0x38
   154c8:	mov	r1, r6
   154cc:	bl	1505c <generate_code@@Base+0xfc>
   154d0:	cmp	r6, #0
   154d4:	mov	r7, r0
   154d8:	beq	155a8 <generate_code@@Base+0x648>
   154dc:	ldr	r5, [r8, #60]	; 0x3c
   154e0:	add	r6, r5, r6, lsl #2
   154e4:	b	15508 <generate_code@@Base+0x5a8>
   154e8:	mov	r0, r7
   154ec:	mov	r1, r9
   154f0:	bl	1505c <generate_code@@Base+0xfc>
   154f4:	mov	r1, r9
   154f8:	bl	1505c <generate_code@@Base+0xfc>
   154fc:	mov	r7, r0
   15500:	cmp	r6, r5
   15504:	beq	155a8 <generate_code@@Base+0x648>
   15508:	ldr	fp, [r5], #4
   1550c:	cmp	fp, #0
   15510:	beq	154e8 <generate_code@@Base+0x588>
   15514:	ldr	r3, [fp]
   15518:	cmp	r3, r8
   1551c:	bne	154e8 <generate_code@@Base+0x588>
   15520:	mov	r0, r7
   15524:	ldr	r1, [fp, #12]
   15528:	bl	1505c <generate_code@@Base+0xfc>
   1552c:	ldr	r1, [fp, #8]
   15530:	bl	1505c <generate_code@@Base+0xfc>
   15534:	ldr	r3, [r8, #16]
   15538:	cmp	r3, #0
   1553c:	mov	r7, r0
   15540:	beq	15500 <generate_code@@Base+0x5a0>
   15544:	ldr	sl, [fp, #16]
   15548:	ldr	r3, [r4, #8]
   1554c:	mov	r1, sl
   15550:	add	r3, r3, sl
   15554:	str	r3, [r4, #8]
   15558:	bl	1505c <generate_code@@Base+0xfc>
   1555c:	cmp	sl, #0
   15560:	mov	r7, r0
   15564:	beq	15500 <generate_code@@Base+0x5a0>
   15568:	ldr	ip, [fp, #20]
   1556c:	ldrd	r2, [r4, #16]
   15570:	add	lr, ip, sl, lsl #3
   15574:	ldrd	r0, [ip]
   15578:	ldrd	sl, [r4, #24]
   1557c:	adds	r2, r2, r0
   15580:	adc	r3, r3, r1
   15584:	strd	r2, [r4, #16]
   15588:	ldrd	r0, [ip], #8
   1558c:	cmp	sl, r0
   15590:	sbcs	sl, fp, r1
   15594:	strdlt	r0, [r4, #24]
   15598:	cmp	lr, ip
   1559c:	bne	15574 <generate_code@@Base+0x614>
   155a0:	cmp	r6, r5
   155a4:	bne	15508 <generate_code@@Base+0x5a8>
   155a8:	ldr	r8, [r8, #4]
   155ac:	cmp	r8, #0
   155b0:	beq	155c4 <generate_code@@Base+0x664>
   155b4:	ldr	r3, [sp]
   155b8:	ldr	r5, [r3]
   155bc:	b	154a4 <generate_code@@Base+0x544>
   155c0:	ldr	r7, [sp, #4]
   155c4:	ldr	r0, [sp, #4]
   155c8:	mov	r1, r4
   155cc:	bl	15364 <generate_code@@Base+0x404>
   155d0:	mov	r0, r7
   155d4:	add	sp, sp, #12
   155d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155dc:	andeq	r1, r0, r8, asr #15
   155e0:	push	{r4, r5, r6, lr}
   155e4:	mov	r4, r0
   155e8:	ldr	r0, [pc, #172]	; 1569c <generate_code@@Base+0x73c>
   155ec:	add	r0, pc, r0
   155f0:	bl	119e4 <getenv@plt>
   155f4:	subs	r3, r0, #0
   155f8:	beq	15604 <generate_code@@Base+0x6a4>
   155fc:	bl	11aec <atoi@plt>
   15600:	bic	r3, r0, r0, asr #31
   15604:	ldr	r0, [pc, #148]	; 156a0 <generate_code@@Base+0x740>
   15608:	str	r3, [r4, #8]
   1560c:	add	r0, pc, r0
   15610:	bl	119e4 <getenv@plt>
   15614:	subs	r6, r0, #0
   15618:	beq	1566c <generate_code@@Base+0x70c>
   1561c:	bl	11a44 <strlen@plt>
   15620:	subs	r5, r0, #0
   15624:	beq	1566c <generate_code@@Base+0x70c>
   15628:	sub	r3, r5, #1
   1562c:	ldrb	r2, [r6, r3]
   15630:	cmp	r2, #47	; 0x2f
   15634:	beq	15660 <generate_code@@Base+0x700>
   15638:	ldr	r0, [r4, #4]
   1563c:	str	r5, [r4, #12]
   15640:	add	r0, r0, #2
   15644:	add	r0, r0, r5
   15648:	bl	119f0 <malloc@plt>
   1564c:	mov	r2, r5
   15650:	mov	r1, r6
   15654:	str	r0, [r4]
   15658:	pop	{r4, r5, r6, lr}
   1565c:	b	119a8 <memcpy@plt>
   15660:	cmp	r3, #0
   15664:	movne	r5, r3
   15668:	bne	15638 <generate_code@@Base+0x6d8>
   1566c:	ldr	r3, [r4, #8]
   15670:	cmp	r3, #0
   15674:	ldrne	r6, [pc, #40]	; 156a4 <generate_code@@Base+0x744>
   15678:	movne	r5, #1
   1567c:	addne	r6, pc, r6
   15680:	bne	15638 <generate_code@@Base+0x6d8>
   15684:	ldr	r0, [r4, #4]
   15688:	str	r3, [r4, #12]
   1568c:	add	r0, r0, #2
   15690:	bl	119f0 <malloc@plt>
   15694:	str	r0, [r4]
   15698:	pop	{r4, r5, r6, pc}
   1569c:	andeq	r2, r0, r8, asr #3
   156a0:			; <UNDEFINED> instruction: 0x000021bc
   156a4:	andeq	r2, r0, r4, lsr r1
   156a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156ac:	sub	sp, sp, #6080	; 0x17c0
   156b0:	sub	sp, sp, #44	; 0x2c
   156b4:	add	r3, sp, #72	; 0x48
   156b8:	mov	r4, r0
   156bc:	str	r0, [sp, #64]	; 0x40
   156c0:	str	r1, [sp, #60]	; 0x3c
   156c4:	mov	r0, r3
   156c8:	ldr	r2, [pc, #1068]	; 15afc <generate_code@@Base+0xb9c>
   156cc:	mov	r1, #0
   156d0:	str	r3, [sp, #68]	; 0x44
   156d4:	bl	11a98 <memset@plt>
   156d8:	add	r3, r4, #6016	; 0x1780
   156dc:	add	r3, r3, #8
   156e0:	add	r2, sp, #2016	; 0x7e0
   156e4:	mov	sl, #251	; 0xfb
   156e8:	add	r2, r2, #8
   156ec:	mov	fp, #0
   156f0:	str	r3, [sp, #56]	; 0x38
   156f4:	add	r3, sp, #72	; 0x48
   156f8:	str	r2, [sp, #44]	; 0x2c
   156fc:	str	r3, [sp, #48]	; 0x30
   15700:	mov	r2, #0
   15704:	mov	r3, #0
   15708:	mov	r5, sl
   1570c:	mov	r0, fp
   15710:	strd	r2, [sp, #24]
   15714:	str	sl, [sp, #52]	; 0x34
   15718:	ldr	r9, [sp, #56]	; 0x38
   1571c:	str	r5, [sp, #40]	; 0x28
   15720:	ldr	sl, [sp, #60]	; 0x3c
   15724:	ldrd	r2, [r9, #16]
   15728:	ldr	r4, [r9]
   1572c:	str	r4, [sp, #4]
   15730:	strd	r2, [sp, #8]
   15734:	ldr	r3, [sp, #4]
   15738:	cmp	r3, #0
   1573c:	beq	159e8 <generate_code@@Base+0xa88>
   15740:	cmp	fp, #0
   15744:	bne	158cc <generate_code@@Base+0x96c>
   15748:	ldr	r5, [sp, #40]	; 0x28
   1574c:	cmp	r5, #0
   15750:	blt	15ad8 <generate_code@@Base+0xb78>
   15754:	add	ip, r5, r5, lsl #1
   15758:	ldr	fp, [sl, ip, lsl #3]
   1575c:	add	ip, sl, ip, lsl #3
   15760:	cmp	fp, #0
   15764:	bne	15acc <generate_code@@Base+0xb6c>
   15768:	mov	r3, ip
   1576c:	ldr	r4, [sp, #4]
   15770:	b	15784 <generate_code@@Base+0x824>
   15774:	ldr	fp, [r3]
   15778:	mov	ip, r3
   1577c:	cmp	fp, #0
   15780:	bne	15ac4 <generate_code@@Base+0xb64>
   15784:	subs	r5, r5, #1
   15788:	sub	r3, r3, #24
   1578c:	bcs	15774 <generate_code@@Base+0x814>
   15790:	ldr	sl, [sp, #52]	; 0x34
   15794:	mov	r8, r0
   15798:	mov	r5, r4
   1579c:	lsl	r4, sl, #1
   157a0:	ldr	r3, [sp, #44]	; 0x2c
   157a4:	add	lr, r4, sl
   157a8:	sub	ip, r3, #1952	; 0x7a0
   157ac:	lsl	lr, lr, #3
   157b0:	add	ip, ip, lr
   157b4:	ldrd	r0, [sp, #8]
   157b8:	add	lr, r3, lr
   157bc:	ldrd	r2, [ip, #16]
   157c0:	ldr	r6, [lr, #-1952]	; 0xfffff860
   157c4:	adds	r0, r0, r2
   157c8:	adc	r1, r1, r3
   157cc:	mov	r2, r0
   157d0:	mov	r3, r1
   157d4:	ldrd	r0, [ip, #8]
   157d8:	strd	r2, [ip, #16]
   157dc:	ldr	r3, [sp, #56]	; 0x38
   157e0:	add	r5, r6, r5
   157e4:	str	r5, [lr, #-1952]	; 0xfffff860
   157e8:	orrs	lr, r0, r1
   157ec:	ldrd	r2, [r3, #8]
   157f0:	beq	15800 <generate_code@@Base+0x8a0>
   157f4:	cmp	r2, r0
   157f8:	sbcs	r1, r3, r1
   157fc:	bge	15814 <generate_code@@Base+0x8b4>
   15800:	ldr	r1, [sp, #44]	; 0x2c
   15804:	add	r0, r4, sl
   15808:	sub	r1, r1, #1952	; 0x7a0
   1580c:	add	r1, r1, r0, lsl #3
   15810:	strd	r2, [r1, #8]
   15814:	add	lr, r4, sl
   15818:	ldr	r3, [sp, #68]	; 0x44
   1581c:	lsl	lr, lr, #3
   15820:	add	ip, r3, lr
   15824:	ldr	r3, [sp, #64]	; 0x40
   15828:	add	lr, r3, lr
   1582c:	b	1587c <generate_code@@Base+0x91c>
   15830:	ldrd	r0, [ip, #-8]
   15834:	ldrd	r2, [lr, #-8]
   15838:	ldrd	r4, [ip, #-16]
   1583c:	adds	r6, r0, r2
   15840:	adc	r7, r1, r3
   15844:	ldr	r2, [lr, #-24]	; 0xffffffe8
   15848:	ldr	r3, [ip, #-24]	; 0xffffffe8
   1584c:	orrs	r1, r4, r5
   15850:	add	r3, r3, r2
   15854:	str	r3, [ip, #-24]	; 0xffffffe8
   15858:	strd	r6, [ip, #-8]
   1585c:	ldrd	r2, [lr, #-16]
   15860:	beq	15870 <generate_code@@Base+0x910>
   15864:	cmp	r2, r4
   15868:	sbcs	r1, r3, r5
   1586c:	bge	15874 <generate_code@@Base+0x914>
   15870:	strd	r2, [ip, #-16]
   15874:	sub	ip, ip, #24
   15878:	sub	lr, lr, #24
   1587c:	subs	sl, sl, #1
   15880:	bpl	15830 <generate_code@@Base+0x8d0>
   15884:	ldr	r3, [sp, #44]	; 0x2c
   15888:	add	r0, r8, r8, lsl #1
   1588c:	sub	r3, r3, #1952	; 0x7a0
   15890:	add	r3, r3, r0, lsl #3
   15894:	ldrd	r6, [sp, #24]
   15898:	ldrd	r4, [r3, #16]
   1589c:	ldr	r1, [sp, #68]	; 0x44
   158a0:	ldr	r0, [sp, #64]	; 0x40
   158a4:	adds	r6, r6, r4
   158a8:	adc	r7, r7, r5
   158ac:	mov	r4, r6
   158b0:	mov	r5, r7
   158b4:	ldr	r2, [pc, #576]	; 15afc <generate_code@@Base+0xb9c>
   158b8:	strd	r4, [r3, #16]
   158bc:	bl	119a8 <memcpy@plt>
   158c0:	add	sp, sp, #6080	; 0x17c0
   158c4:	add	sp, sp, #44	; 0x2c
   158c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158cc:	ldr	r3, [sp, #40]	; 0x28
   158d0:	add	ip, r3, r3, lsl #1
   158d4:	add	ip, sl, ip, lsl #3
   158d8:	ldr	lr, [sp, #4]
   158dc:	cmp	fp, lr
   158e0:	bcc	15a58 <generate_code@@Base+0xaf8>
   158e4:	ldrd	r2, [r9, #8]
   158e8:	ldrd	r0, [ip, #8]
   158ec:	adds	r4, r2, r0
   158f0:	adc	r5, r3, r1
   158f4:	cmp	fp, lr
   158f8:	strd	r4, [sp, #16]
   158fc:	bls	15ae8 <generate_code@@Base+0xb88>
   15900:	ldrd	r6, [sp, #24]
   15904:	mov	r2, fp
   15908:	mov	r3, #0
   1590c:	umull	r0, r1, lr, r6
   15910:	mla	r1, lr, r7, r1
   15914:	bl	16fe4 <__gcov_sort_n_vals@@Base+0x534>
   15918:	mov	r2, r0
   1591c:	subs	r0, r6, r2
   15920:	mov	r3, r1
   15924:	sbc	r1, r7, r3
   15928:	strd	r0, [sp, #24]
   1592c:	ldr	r1, [sp, #4]
   15930:	mov	r0, #0
   15934:	sub	fp, fp, r1
   15938:	mov	r8, r1
   1593c:	mov	r1, #0
   15940:	str	r1, [sp, #4]
   15944:	mov	r1, #0
   15948:	ldrd	r6, [sp, #8]
   1594c:	strd	r0, [sp, #8]
   15950:	adds	r4, r2, r6
   15954:	adc	r5, r3, r7
   15958:	ldrd	r0, [sp, #16]
   1595c:	strd	r4, [sp, #32]
   15960:	bl	152b0 <generate_code@@Base+0x350>
   15964:	ldr	r3, [sp, #48]	; 0x30
   15968:	ldrd	r4, [sp, #32]
   1596c:	add	r1, r0, r0, lsl #1
   15970:	lsl	r1, r1, #3
   15974:	add	ip, r3, r1
   15978:	ldr	r3, [sp, #44]	; 0x2c
   1597c:	ldrd	r6, [ip, #8]
   15980:	add	r1, r3, r1
   15984:	ldrd	r2, [ip, #16]
   15988:	adds	r2, r2, r4
   1598c:	adc	r3, r3, r5
   15990:	strd	r2, [sp, #32]
   15994:	ldrd	r2, [sp, #16]
   15998:	cmp	r2, r6
   1599c:	sbcs	lr, r3, r7
   159a0:	movlt	lr, #1
   159a4:	movge	lr, #0
   159a8:	orrs	r4, r6, r7
   159ac:	ldr	r4, [r1, #-1952]	; 0xfffff860
   159b0:	orreq	lr, lr, #1
   159b4:	add	r8, r4, r8
   159b8:	ldrd	r4, [sp, #32]
   159bc:	cmp	lr, #0
   159c0:	str	r8, [r1, #-1952]	; 0xfffff860
   159c4:	strd	r4, [ip, #16]
   159c8:	strdne	r2, [ip, #8]
   159cc:	cmp	fp, #0
   159d0:	ldreq	r3, [sp, #40]	; 0x28
   159d4:	subeq	r3, r3, #1
   159d8:	streq	r3, [sp, #40]	; 0x28
   159dc:	ldr	r3, [sp, #4]
   159e0:	cmp	r3, #0
   159e4:	bne	15740 <generate_code@@Base+0x7e0>
   159e8:	ldr	r3, [sp, #52]	; 0x34
   159ec:	ldr	r5, [sp, #40]	; 0x28
   159f0:	sub	r3, r3, #1
   159f4:	str	r3, [sp, #52]	; 0x34
   159f8:	cmn	r3, #1
   159fc:	ldr	r3, [sp, #56]	; 0x38
   15a00:	sub	r3, r3, #24
   15a04:	str	r3, [sp, #56]	; 0x38
   15a08:	bne	15718 <generate_code@@Base+0x7b8>
   15a0c:	cmp	fp, #0
   15a10:	mov	r9, r5
   15a14:	subne	r9, r5, #1
   15a18:	cmp	r9, #0
   15a1c:	mov	r8, r0
   15a20:	blt	15884 <generate_code@@Base+0x924>
   15a24:	ldr	r2, [sp, #60]	; 0x3c
   15a28:	add	r3, r9, r9, lsl #1
   15a2c:	sub	r0, r2, #24
   15a30:	add	r1, r2, r3, lsl #3
   15a34:	ldrd	r2, [sp, #24]
   15a38:	ldrd	r4, [r1, #16]
   15a3c:	sub	r1, r1, #24
   15a40:	adds	r2, r2, r4
   15a44:	adc	r3, r3, r5
   15a48:	cmp	r0, r1
   15a4c:	bne	15a38 <generate_code@@Base+0xad8>
   15a50:	strd	r2, [sp, #24]
   15a54:	b	15884 <generate_code@@Base+0x924>
   15a58:	ldrd	r2, [sp, #8]
   15a5c:	ldrd	r6, [ip, #8]
   15a60:	ldrd	r4, [r9, #8]
   15a64:	umull	r0, r1, fp, r2
   15a68:	ldr	r8, [sp, #4]
   15a6c:	adds	r4, r4, r6
   15a70:	adc	r5, r5, r7
   15a74:	mla	r1, fp, r3, r1
   15a78:	mov	r2, r8
   15a7c:	mov	r3, #0
   15a80:	strd	r4, [sp, #16]
   15a84:	bl	16fe4 <__gcov_sort_n_vals@@Base+0x534>
   15a88:	sub	r3, r8, fp
   15a8c:	str	r3, [sp, #4]
   15a90:	ldrd	r2, [sp, #8]
   15a94:	mov	r8, fp
   15a98:	mov	fp, #0
   15a9c:	subs	r2, r2, r0
   15aa0:	sbc	r3, r3, r1
   15aa4:	mov	r6, r0
   15aa8:	mov	r7, r1
   15aac:	mov	r0, #0
   15ab0:	mov	r1, #0
   15ab4:	strd	r2, [sp, #8]
   15ab8:	ldrd	r2, [sp, #24]
   15abc:	strd	r0, [sp, #24]
   15ac0:	b	15950 <generate_code@@Base+0x9f0>
   15ac4:	str	r5, [sp, #40]	; 0x28
   15ac8:	str	r4, [sp, #4]
   15acc:	ldrd	r2, [ip, #16]
   15ad0:	strd	r2, [sp, #24]
   15ad4:	b	158d8 <generate_code@@Base+0x978>
   15ad8:	ldr	sl, [sp, #52]	; 0x34
   15adc:	mov	r8, r0
   15ae0:	ldr	r5, [sp, #4]
   15ae4:	b	1579c <generate_code@@Base+0x83c>
   15ae8:	mov	r0, #0
   15aec:	mov	r1, #0
   15af0:	ldrd	r2, [sp, #24]
   15af4:	strd	r0, [sp, #24]
   15af8:	b	1592c <generate_code@@Base+0x9cc>
   15afc:	andeq	r1, r0, r0, lsr #15
   15b00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b04:	ldrb	r4, [r0]
   15b08:	cmp	r4, #47	; 0x2f
   15b0c:	addeq	r5, r0, #1
   15b10:	ldrbeq	r4, [r0, #1]
   15b14:	movne	r5, r0
   15b18:	cmp	r4, #0
   15b1c:	beq	15b70 <generate_code@@Base+0xc10>
   15b20:	mov	r6, r0
   15b24:	ldr	sl, [pc, #144]	; 15bbc <generate_code@@Base+0xc5c>
   15b28:	mov	r8, #0
   15b2c:	mov	r7, #47	; 0x2f
   15b30:	b	15b40 <generate_code@@Base+0xbe0>
   15b34:	ldrb	r4, [r5, #1]!
   15b38:	cmp	r4, #0
   15b3c:	beq	15b70 <generate_code@@Base+0xc10>
   15b40:	cmp	r4, #47	; 0x2f
   15b44:	bne	15b34 <generate_code@@Base+0xbd4>
   15b48:	strb	r8, [r5]
   15b4c:	mov	r1, #0
   15b50:	mov	r0, r6
   15b54:	bl	11ab0 <access@plt>
   15b58:	cmn	r0, #1
   15b5c:	beq	15b7c <generate_code@@Base+0xc1c>
   15b60:	strb	r7, [r5]
   15b64:	ldrb	r4, [r5, #1]!
   15b68:	cmp	r4, #0
   15b6c:	bne	15b40 <generate_code@@Base+0xbe0>
   15b70:	mov	r9, #0
   15b74:	mov	r0, r9
   15b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b7c:	mov	r1, sl
   15b80:	mov	r0, r6
   15b84:	bl	11a80 <mkdir@plt>
   15b88:	cmn	r0, #1
   15b8c:	mov	r9, r0
   15b90:	bne	15b60 <generate_code@@Base+0xc00>
   15b94:	bl	11a68 <__errno_location@plt>
   15b98:	ldr	r3, [r0]
   15b9c:	cmp	r3, #17
   15ba0:	beq	15b60 <generate_code@@Base+0xc00>
   15ba4:	ldr	r0, [pc, #20]	; 15bc0 <generate_code@@Base+0xc60>
   15ba8:	mov	r1, r6
   15bac:	add	r0, pc, r0
   15bb0:	bl	151fc <generate_code@@Base+0x29c>
   15bb4:	strb	r4, [r5]
   15bb8:	b	15b74 <generate_code@@Base+0xc14>
   15bbc:	andeq	r0, r0, sp, ror #3
   15bc0:	andeq	r1, r0, r8, lsr #24
   15bc4:	ldr	r3, [pc, #124]	; 15c48 <generate_code@@Base+0xce8>
   15bc8:	cmp	r1, r3
   15bcc:	beq	15c40 <generate_code@@Base+0xce0>
   15bd0:	cmp	r2, #0
   15bd4:	push	{r4, r5, lr}
   15bd8:	sub	sp, sp, #12
   15bdc:	ldreq	r2, [r0]
   15be0:	lsr	r3, r1, #24
   15be4:	ldr	r0, [pc, #96]	; 15c4c <generate_code@@Base+0xcec>
   15be8:	lsr	r5, r1, #16
   15bec:	lsr	r4, r1, #8
   15bf0:	strb	r1, [sp, #3]
   15bf4:	strb	r3, [sp]
   15bf8:	mov	r1, #53	; 0x35
   15bfc:	mov	r3, #42	; 0x2a
   15c00:	mov	lr, #54	; 0x36
   15c04:	mov	ip, #48	; 0x30
   15c08:	strb	r1, [sp, #6]
   15c0c:	strb	r3, [sp, #7]
   15c10:	mov	r1, r2
   15c14:	mov	r3, sp
   15c18:	add	r2, sp, #4
   15c1c:	add	r0, pc, r0
   15c20:	strb	r5, [sp, #1]
   15c24:	strb	r4, [sp, #2]
   15c28:	strb	lr, [sp, #4]
   15c2c:	strb	ip, [sp, #5]
   15c30:	bl	151fc <generate_code@@Base+0x29c>
   15c34:	mov	r0, #0
   15c38:	add	sp, sp, #12
   15c3c:	pop	{r4, r5, pc}
   15c40:	mov	r0, #1
   15c44:	bx	lr
   15c48:	ldrtcc	r3, [r0], -sl, lsr #10
   15c4c:	andeq	r1, r0, r0, ror #23
   15c50:	ldr	r2, [r2, #16]
   15c54:	push	{r4, r5, r6, lr}
   15c58:	cmp	r2, #0
   15c5c:	mov	r6, r3
   15c60:	ldr	ip, [sp, #16]
   15c64:	beq	15d30 <generate_code@@Base+0xdd0>
   15c68:	ldr	r3, [r3, #12]
   15c6c:	cmp	r1, #0
   15c70:	addeq	r2, r3, #1
   15c74:	streq	r2, [r6, #12]
   15c78:	cmp	r3, #0
   15c7c:	beq	15cd4 <generate_code@@Base+0xd74>
   15c80:	ldrd	r0, [ip, #16]
   15c84:	ldrd	r2, [r6, #16]
   15c88:	ldrd	r4, [r6, #24]
   15c8c:	adds	r2, r2, r0
   15c90:	adc	r3, r3, r1
   15c94:	strd	r2, [r6, #16]
   15c98:	ldrd	r0, [ip, #24]
   15c9c:	cmp	r4, r0
   15ca0:	sbcs	r3, r5, r1
   15ca4:	blt	15d54 <generate_code@@Base+0xdf4>
   15ca8:	ldrd	r2, [r6, #32]
   15cac:	adds	r2, r2, r0
   15cb0:	adc	r3, r3, r1
   15cb4:	strd	r2, [r6, #32]
   15cb8:	add	r1, ip, #40	; 0x28
   15cbc:	add	r0, r6, #40	; 0x28
   15cc0:	bl	156a8 <generate_code@@Base+0x748>
   15cc4:	ldr	r3, [sp, #20]
   15cc8:	mov	r0, #0
   15ccc:	str	r3, [r6]
   15cd0:	pop	{r4, r5, r6, pc}
   15cd4:	ldr	r1, [ip, #8]
   15cd8:	ldrd	r2, [r6, #16]
   15cdc:	str	r1, [r6, #8]
   15ce0:	ldrd	r0, [ip, #16]
   15ce4:	ldrd	r4, [r6, #24]
   15ce8:	adds	r2, r2, r0
   15cec:	adc	r3, r3, r1
   15cf0:	strd	r2, [r6, #16]
   15cf4:	ldrd	r0, [ip, #24]
   15cf8:	cmp	r4, r0
   15cfc:	sbcs	r3, r5, r1
   15d00:	bge	15d70 <generate_code@@Base+0xe10>
   15d04:	ldrd	r2, [r6, #32]
   15d08:	strd	r0, [r6, #24]
   15d0c:	ldrd	r0, [ip, #24]
   15d10:	adds	r2, r2, r0
   15d14:	adc	r3, r3, r1
   15d18:	strd	r2, [r6, #32]
   15d1c:	add	r1, ip, #40	; 0x28
   15d20:	ldr	r2, [pc, #92]	; 15d84 <generate_code@@Base+0xe24>
   15d24:	add	r0, r6, #40	; 0x28
   15d28:	bl	119a8 <memcpy@plt>
   15d2c:	b	15cc4 <generate_code@@Base+0xd64>
   15d30:	ldr	r3, [r3, #12]
   15d34:	cmp	r3, #0
   15d38:	beq	15cc4 <generate_code@@Base+0xd64>
   15d3c:	mov	r1, r0
   15d40:	ldr	r0, [pc, #64]	; 15d88 <generate_code@@Base+0xe28>
   15d44:	add	r0, pc, r0
   15d48:	bl	151fc <generate_code@@Base+0x29c>
   15d4c:	mvn	r0, #0
   15d50:	pop	{r4, r5, r6, pc}
   15d54:	ldrd	r2, [r6, #32]
   15d58:	strd	r0, [r6, #24]
   15d5c:	ldrd	r0, [ip, #24]
   15d60:	adds	r2, r2, r0
   15d64:	adc	r3, r3, r1
   15d68:	strd	r2, [r6, #32]
   15d6c:	b	15cb8 <generate_code@@Base+0xd58>
   15d70:	ldrd	r2, [r6, #32]
   15d74:	adds	r2, r2, r0
   15d78:	adc	r3, r3, r1
   15d7c:	strd	r2, [r6, #32]
   15d80:	b	15d1c <generate_code@@Base+0xdbc>
   15d84:	andeq	r1, r0, r0, lsr #15
   15d88:	strdeq	r1, [r0], -r0
   15d8c:	ldr	ip, [pc, #52]	; 15dc8 <generate_code@@Base+0xe68>
   15d90:	ldr	r3, [pc, #52]	; 15dcc <generate_code@@Base+0xe6c>
   15d94:	add	ip, pc, ip
   15d98:	push	{r4, lr}
   15d9c:	mov	lr, #0
   15da0:	ldr	r3, [ip, r3]
   15da4:	mvn	r4, #0
   15da8:	mov	r2, lr
   15dac:	mov	r1, lr
   15db0:	str	r4, [r3, #24]
   15db4:	str	lr, [r3, #4]
   15db8:	str	lr, [r3, #8]
   15dbc:	ldr	r0, [r3]
   15dc0:	pop	{r4, lr}
   15dc4:	b	11af8 <fseek@plt>
   15dc8:	andeq	r2, r1, r4, ror #4
   15dcc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15dd0:	push	{r4, r5, r6, r7, lr}
   15dd4:	sub	sp, sp, #108	; 0x6c
   15dd8:	mov	r4, #0
   15ddc:	mov	r7, r0
   15de0:	strh	r4, [sp, #2]
   15de4:	str	r4, [sp, #4]
   15de8:	str	r4, [sp, #8]
   15dec:	bl	11a2c <getpid@plt>
   15df0:	ldr	r3, [pc, #240]	; 15ee8 <generate_code@@Base+0xf88>
   15df4:	ldr	ip, [pc, #240]	; 15eec <generate_code@@Base+0xf8c>
   15df8:	add	r3, pc, r3
   15dfc:	mvn	lr, #0
   15e00:	mov	r6, #1
   15e04:	ldr	r2, [pc, #228]	; 15ef0 <generate_code@@Base+0xf90>
   15e08:	mov	r1, #66	; 0x42
   15e0c:	str	r0, [sp, #12]
   15e10:	ldr	r5, [r3, ip]
   15e14:	mov	r0, r7
   15e18:	strh	r6, [sp]
   15e1c:	str	r4, [r5, #4]
   15e20:	str	r4, [r5, #12]
   15e24:	str	r4, [r5, #8]
   15e28:	str	r4, [r5, #20]
   15e2c:	str	lr, [r5, #16]
   15e30:	bl	11a20 <open@plt>
   15e34:	subs	r6, r0, #0
   15e38:	movlt	r0, r4
   15e3c:	blt	15ebc <generate_code@@Base+0xf5c>
   15e40:	mov	r7, sp
   15e44:	mov	r4, #7
   15e48:	mov	r2, r7
   15e4c:	mov	r1, r4
   15e50:	mov	r0, r6
   15e54:	bl	11a8c <fcntl@plt>
   15e58:	cmp	r0, #0
   15e5c:	beq	15e70 <generate_code@@Base+0xf10>
   15e60:	bl	11a68 <__errno_location@plt>
   15e64:	ldr	r3, [r0]
   15e68:	cmp	r3, #4
   15e6c:	beq	15e48 <generate_code@@Base+0xee8>
   15e70:	ldr	r1, [pc, #124]	; 15ef4 <generate_code@@Base+0xf94>
   15e74:	mov	r0, r6
   15e78:	add	r1, pc, r1
   15e7c:	bl	1196c <fdopen@plt>
   15e80:	mov	r4, r0
   15e84:	cmp	r4, #0
   15e88:	mov	r0, r6
   15e8c:	str	r4, [r5]
   15e90:	beq	15ec4 <generate_code@@Base+0xf64>
   15e94:	add	r1, sp, #16
   15e98:	bl	172b0 <__libc_csu_fini@@Base+0x1c>
   15e9c:	cmp	r0, #0
   15ea0:	blt	15ed0 <generate_code@@Base+0xf70>
   15ea4:	mov	r4, #1
   15ea8:	ldr	r0, [r5]
   15eac:	mov	r1, #0
   15eb0:	str	r4, [r5, #24]
   15eb4:	bl	11984 <setbuf@plt>
   15eb8:	mov	r0, r4
   15ebc:	add	sp, sp, #108	; 0x6c
   15ec0:	pop	{r4, r5, r6, r7, pc}
   15ec4:	bl	11b28 <close@plt>
   15ec8:	mov	r0, r4
   15ecc:	b	15ebc <generate_code@@Base+0xf5c>
   15ed0:	mov	r4, #0
   15ed4:	ldr	r0, [r5]
   15ed8:	bl	11abc <fclose@plt>
   15edc:	str	r4, [r5]
   15ee0:	mov	r0, r4
   15ee4:	b	15ebc <generate_code@@Base+0xf5c>
   15ee8:	andeq	r2, r1, r0, lsl #4
   15eec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15ef0:			; <UNDEFINED> instruction: 0x000001b6
   15ef4:	andeq	r1, r0, r8, ror #19
   15ef8:	push	{r4, r5, r6, lr}
   15efc:	mov	r4, r1
   15f00:	ldr	r5, [pc, #244]	; 15ffc <generate_code@@Base+0x109c>
   15f04:	ldr	ip, [r4, #8]
   15f08:	ldr	lr, [r4, #12]
   15f0c:	ldr	r6, [r4]
   15f10:	cmp	ip, #0
   15f14:	mov	r1, r0
   15f18:	add	r5, pc, r5
   15f1c:	add	r0, r6, lr
   15f20:	ble	15f5c <generate_code@@Base+0xffc>
   15f24:	ldrb	r3, [r1]
   15f28:	cmp	r3, #47	; 0x2f
   15f2c:	addeq	r2, r1, #1
   15f30:	ldrbeq	r3, [r1, #1]
   15f34:	movne	r2, r1
   15f38:	cmp	r3, #0
   15f3c:	beq	15f5c <generate_code@@Base+0xffc>
   15f40:	cmp	r3, #47	; 0x2f
   15f44:	moveq	r1, r2
   15f48:	ldrb	r3, [r2, #1]!
   15f4c:	subeq	ip, ip, #1
   15f50:	cmp	r3, #0
   15f54:	cmpne	ip, #0
   15f58:	bne	15f40 <generate_code@@Base+0xfe0>
   15f5c:	cmp	lr, #0
   15f60:	beq	15f78 <generate_code@@Base+0x1018>
   15f64:	ldrb	r3, [r1]
   15f68:	cmp	r3, #47	; 0x2f
   15f6c:	addne	r0, r0, #1
   15f70:	movne	r3, #47	; 0x2f
   15f74:	strbne	r3, [r6, lr]
   15f78:	bl	119cc <strcpy@plt>
   15f7c:	ldr	r0, [r4]
   15f80:	bl	15dd0 <generate_code@@Base+0xe70>
   15f84:	cmp	r0, #0
   15f88:	beq	15f94 <generate_code@@Base+0x1034>
   15f8c:	mov	r0, #0
   15f90:	pop	{r4, r5, r6, pc}
   15f94:	ldr	r0, [r4]
   15f98:	bl	15b00 <generate_code@@Base+0xba0>
   15f9c:	cmp	r0, #0
   15fa0:	bne	15fd8 <generate_code@@Base+0x1078>
   15fa4:	ldr	r0, [r4]
   15fa8:	bl	15dd0 <generate_code@@Base+0xe70>
   15fac:	cmp	r0, #0
   15fb0:	bne	15f8c <generate_code@@Base+0x102c>
   15fb4:	ldr	r3, [pc, #68]	; 16000 <generate_code@@Base+0x10a0>
   15fb8:	ldr	r1, [pc, #68]	; 16004 <generate_code@@Base+0x10a4>
   15fbc:	ldr	r2, [r4]
   15fc0:	ldr	r3, [r5, r3]
   15fc4:	add	r1, pc, r1
   15fc8:	ldr	r0, [r3]
   15fcc:	bl	11a5c <fprintf@plt>
   15fd0:	mvn	r0, #0
   15fd4:	pop	{r4, r5, r6, pc}
   15fd8:	ldr	r3, [pc, #32]	; 16000 <generate_code@@Base+0x10a0>
   15fdc:	ldr	r1, [pc, #36]	; 16008 <generate_code@@Base+0x10a8>
   15fe0:	ldr	r2, [r4]
   15fe4:	ldr	r3, [r5, r3]
   15fe8:	add	r1, pc, r1
   15fec:	ldr	r0, [r3]
   15ff0:	bl	11a5c <fprintf@plt>
   15ff4:	mvn	r0, #0
   15ff8:	pop	{r4, r5, r6, pc}
   15ffc:	andeq	r2, r1, r0, ror #1
   16000:	andeq	r0, r0, r4, lsr #1
   16004:			; <UNDEFINED> instruction: 0x000018b4
   16008:	andeq	r1, r0, ip, ror r8
   1600c:	ldr	r3, [pc, #96]	; 16074 <generate_code@@Base+0x1114>
   16010:	ldr	r2, [pc, #96]	; 16078 <generate_code@@Base+0x1118>
   16014:	add	r3, pc, r3
   16018:	push	{r4, lr}
   1601c:	ldr	r4, [r3, r2]
   16020:	ldr	r0, [r4]
   16024:	cmp	r0, #0
   16028:	beq	16048 <generate_code@@Base+0x10e8>
   1602c:	ldr	r3, [r4, #8]
   16030:	cmp	r3, #0
   16034:	bne	16058 <generate_code@@Base+0x10f8>
   16038:	bl	11abc <fclose@plt>
   1603c:	mov	r3, #0
   16040:	str	r3, [r4]
   16044:	str	r3, [r4, #12]
   16048:	mov	r3, #0
   1604c:	str	r3, [r4, #24]
   16050:	ldr	r0, [r4, #20]
   16054:	pop	{r4, pc}
   16058:	ldr	r2, [r4, #24]
   1605c:	cmp	r2, #0
   16060:	bge	16038 <generate_code@@Base+0x10d8>
   16064:	mov	r0, r3
   16068:	bl	15088 <generate_code@@Base+0x128>
   1606c:	ldr	r0, [r4]
   16070:	b	16038 <generate_code@@Base+0x10d8>
   16074:	andeq	r1, r1, r4, ror #31
   16078:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1607c:	push	{r4, lr}
   16080:	mov	r4, r0
   16084:	mov	r0, #1
   16088:	bl	150e4 <generate_code@@Base+0x184>
   1608c:	str	r4, [r0]
   16090:	pop	{r4, pc}
   16094:	push	{r4, r5, r6, lr}
   16098:	mov	r5, r0
   1609c:	mov	r0, #2
   160a0:	mov	r4, r1
   160a4:	bl	150e4 <generate_code@@Base+0x184>
   160a8:	str	r5, [r0]
   160ac:	str	r4, [r0, #4]
   160b0:	pop	{r4, r5, r6, pc}
   160b4:	push	{r4, r5, r6, lr}
   160b8:	mov	r5, r0
   160bc:	mov	r0, #2
   160c0:	mov	r4, r1
   160c4:	bl	150e4 <generate_code@@Base+0x184>
   160c8:	str	r5, [r0]
   160cc:	str	r4, [r0, #4]
   160d0:	pop	{r4, r5, r6, pc}
   160d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160d8:	sub	sp, sp, #32
   160dc:	mov	r7, sp
   160e0:	mov	r5, r1
   160e4:	mov	r6, sp
   160e8:	add	r2, sp, #32
   160ec:	mov	r3, #0
   160f0:	str	r3, [r6], #4
   160f4:	cmp	r2, r6
   160f8:	bne	160f0 <generate_code@@Base+0x1190>
   160fc:	mov	r8, #0
   16100:	mov	r3, r8
   16104:	mov	r4, r5
   16108:	mov	r1, r5
   1610c:	mov	r9, #1
   16110:	lsr	r2, r3, #5
   16114:	ldr	lr, [r1, #40]	; 0x28
   16118:	add	ip, sp, #32
   1611c:	cmp	lr, #0
   16120:	add	r2, ip, r2, lsl #2
   16124:	and	sl, r3, #31
   16128:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   1612c:	add	r3, r3, #1
   16130:	orrne	ip, ip, r9, lsl sl
   16134:	addne	r8, r8, #1
   16138:	strne	ip, [r2, #-32]	; 0xffffffe0
   1613c:	cmp	r3, #252	; 0xfc
   16140:	add	r1, r1, #24
   16144:	bne	16110 <generate_code@@Base+0x11b0>
   16148:	add	r8, r8, r8, lsl #2
   1614c:	add	r1, r8, #17
   16150:	bl	160b4 <generate_code@@Base+0x1154>
   16154:	ldr	r0, [r5]
   16158:	bl	1607c <generate_code@@Base+0x111c>
   1615c:	ldr	r0, [r5, #8]
   16160:	bl	1607c <generate_code@@Base+0x111c>
   16164:	ldr	r0, [r5, #12]
   16168:	bl	1607c <generate_code@@Base+0x111c>
   1616c:	ldrd	r0, [r5, #16]
   16170:	bl	16094 <generate_code@@Base+0x1134>
   16174:	ldrd	r0, [r5, #24]
   16178:	bl	16094 <generate_code@@Base+0x1134>
   1617c:	ldrd	r0, [r5, #32]
   16180:	bl	16094 <generate_code@@Base+0x1134>
   16184:	ldr	r0, [r7], #4
   16188:	bl	1607c <generate_code@@Base+0x111c>
   1618c:	cmp	r7, r6
   16190:	bne	16184 <generate_code@@Base+0x1224>
   16194:	add	r5, r5, #6016	; 0x1780
   16198:	add	r5, r5, #32
   1619c:	b	161ac <generate_code@@Base+0x124c>
   161a0:	add	r4, r4, #24
   161a4:	cmp	r4, r5
   161a8:	beq	161d8 <generate_code@@Base+0x1278>
   161ac:	ldr	r0, [r4, #40]	; 0x28
   161b0:	cmp	r0, #0
   161b4:	beq	161a0 <generate_code@@Base+0x1240>
   161b8:	bl	1607c <generate_code@@Base+0x111c>
   161bc:	ldrd	r0, [r4, #48]	; 0x30
   161c0:	bl	16094 <generate_code@@Base+0x1134>
   161c4:	add	r4, r4, #24
   161c8:	ldrd	r0, [r4, #32]
   161cc:	bl	16094 <generate_code@@Base+0x1134>
   161d0:	cmp	r4, r5
   161d4:	bne	161ac <generate_code@@Base+0x124c>
   161d8:	add	sp, sp, #32
   161dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161e0:	push	{r4, lr}
   161e4:	mov	r0, #1
   161e8:	bl	15140 <generate_code@@Base+0x1e0>
   161ec:	subs	r3, r0, #0
   161f0:	popeq	{r4, pc}
   161f4:	ldr	r0, [r3]
   161f8:	pop	{r4, lr}
   161fc:	b	15058 <generate_code@@Base+0xf8>
   16200:	push	{r4, r5, r6, lr}
   16204:	mov	r0, #2
   16208:	bl	15140 <generate_code@@Base+0x1e0>
   1620c:	subs	r3, r0, #0
   16210:	beq	16240 <generate_code@@Base+0x12e0>
   16214:	ldr	r0, [r3]
   16218:	bl	15058 <generate_code@@Base+0xf8>
   1621c:	mov	r5, #0
   16220:	mov	r4, r0
   16224:	ldr	r0, [r3, #4]
   16228:	bl	15058 <generate_code@@Base+0xf8>
   1622c:	mov	r2, #0
   16230:	mov	r3, r0
   16234:	orr	r1, r3, r5
   16238:	orr	r0, r2, r4
   1623c:	pop	{r4, r5, r6, pc}
   16240:	mov	r0, #0
   16244:	mov	r1, #0
   16248:	pop	{r4, r5, r6, pc}
   1624c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16250:	sub	sp, sp, #28
   16254:	mov	r4, #0
   16258:	str	r1, [sp, #8]
   1625c:	str	r3, [sp, #12]
   16260:	add	r3, r1, #56	; 0x38
   16264:	add	r1, r1, #16
   16268:	str	r0, [sp, #16]
   1626c:	str	r2, [sp, #20]
   16270:	ldr	r2, [r3, #-4]!
   16274:	cmp	r2, #0
   16278:	addne	r4, r4, #1
   1627c:	cmp	r3, r1
   16280:	bne	16270 <generate_code@@Base+0x1310>
   16284:	add	r4, r4, #4
   16288:	lsl	r4, r4, #3
   1628c:	mov	r0, r4
   16290:	bl	119f0 <malloc@plt>
   16294:	subs	r8, r0, #0
   16298:	beq	1635c <generate_code@@Base+0x13fc>
   1629c:	ldr	r3, [sp, #12]
   162a0:	mov	r4, #0
   162a4:	str	r3, [r8, #4]
   162a8:	str	r4, [r8]
   162ac:	bl	161e0 <generate_code@@Base+0x1280>
   162b0:	ldr	r3, [sp, #8]
   162b4:	ldr	r5, [pc, #272]	; 163cc <generate_code@@Base+0x146c>
   162b8:	add	r6, r3, #12
   162bc:	mov	r7, r4
   162c0:	str	r0, [r8, #12]
   162c4:	bl	161e0 <generate_code@@Base+0x1280>
   162c8:	str	r0, [r8, #16]
   162cc:	bl	161e0 <generate_code@@Base+0x1280>
   162d0:	str	r0, [r8, #20]
   162d4:	ldr	r3, [r6, #4]!
   162d8:	cmp	r3, #0
   162dc:	beq	16338 <generate_code@@Base+0x13d8>
   162e0:	bl	161e0 <generate_code@@Base+0x1280>
   162e4:	cmp	r5, r0
   162e8:	bne	163b0 <generate_code@@Base+0x1450>
   162ec:	bl	161e0 <generate_code@@Base+0x1280>
   162f0:	lsr	r9, r0, #1
   162f4:	lsl	fp, r9, #3
   162f8:	mov	r0, fp
   162fc:	bl	119f0 <malloc@plt>
   16300:	subs	sl, r0, #0
   16304:	beq	163c0 <generate_code@@Base+0x1460>
   16308:	add	r3, r8, r7, lsl #3
   1630c:	cmp	r9, #0
   16310:	str	r9, [r3, #24]
   16314:	str	sl, [r3, #28]
   16318:	sub	r9, r9, #1
   1631c:	beq	16334 <generate_code@@Base+0x13d4>
   16320:	bl	16200 <generate_code@@Base+0x12a0>
   16324:	sub	r9, r9, #1
   16328:	cmn	r9, #1
   1632c:	strd	r0, [sl], #8
   16330:	bne	16320 <generate_code@@Base+0x13c0>
   16334:	add	r7, r7, #1
   16338:	add	r4, r4, #1
   1633c:	cmp	r4, #10
   16340:	add	r5, r5, #131072	; 0x20000
   16344:	bne	162d4 <generate_code@@Base+0x1374>
   16348:	ldr	r3, [sp, #20]
   1634c:	mov	r0, r8
   16350:	str	r8, [r3]
   16354:	add	sp, sp, #28
   16358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1635c:	mvn	r5, #0
   16360:	cmp	r4, #0
   16364:	beq	163a0 <generate_code@@Base+0x1440>
   16368:	ldr	r3, [pc, #96]	; 163d0 <generate_code@@Base+0x1470>
   1636c:	add	r3, pc, r3
   16370:	ldr	r0, [pc, #92]	; 163d4 <generate_code@@Base+0x1474>
   16374:	ldr	r2, [sp, #12]
   16378:	ldr	r1, [sp, #16]
   1637c:	str	r4, [sp]
   16380:	add	r0, pc, r0
   16384:	bl	151fc <generate_code@@Base+0x29c>
   16388:	mov	r2, r5
   1638c:	mov	r1, r8
   16390:	ldr	r0, [sp, #8]
   16394:	add	sp, sp, #28
   16398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1639c:	b	15244 <generate_code@@Base+0x2e4>
   163a0:	ldr	r3, [pc, #48]	; 163d8 <generate_code@@Base+0x1478>
   163a4:	mov	r4, r5
   163a8:	add	r3, pc, r3
   163ac:	b	16370 <generate_code@@Base+0x1410>
   163b0:	ldr	r3, [pc, #36]	; 163dc <generate_code@@Base+0x147c>
   163b4:	mov	r5, r4
   163b8:	add	r3, pc, r3
   163bc:	b	16370 <generate_code@@Base+0x1410>
   163c0:	mov	r5, r4
   163c4:	mov	r4, fp
   163c8:	b	16360 <generate_code@@Base+0x1400>
   163cc:			; <UNDEFINED> instruction: 0x01a10000
   163d0:	andeq	r1, r0, r8, lsr #10
   163d4:	andeq	r1, r0, r8, lsr r5
   163d8:	strdeq	r1, [r0], -ip
   163dc:	andeq	r1, r0, ip, ror #9
   163e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163e4:	sub	sp, sp, #44	; 0x2c
   163e8:	mov	r9, r0
   163ec:	bl	161e0 <generate_code@@Base+0x1280>
   163f0:	mov	r7, #0
   163f4:	add	sl, sp, #8
   163f8:	mov	r4, sl
   163fc:	add	r5, sp, #40	; 0x28
   16400:	str	r0, [r9]
   16404:	bl	161e0 <generate_code@@Base+0x1280>
   16408:	str	r0, [r9, #8]
   1640c:	bl	161e0 <generate_code@@Base+0x1280>
   16410:	str	r0, [r9, #12]
   16414:	bl	16200 <generate_code@@Base+0x12a0>
   16418:	strd	r0, [r9, #16]
   1641c:	bl	16200 <generate_code@@Base+0x12a0>
   16420:	strd	r0, [r9, #24]
   16424:	bl	16200 <generate_code@@Base+0x12a0>
   16428:	ldr	r2, [pc, #244]	; 16524 <generate_code@@Base+0x15c4>
   1642c:	strd	r0, [r9, #32]
   16430:	add	r0, r9, #40	; 0x28
   16434:	mov	r1, r7
   16438:	bl	11a98 <memset@plt>
   1643c:	bl	161e0 <generate_code@@Base+0x1280>
   16440:	str	r0, [r4], #4
   16444:	bl	170c8 <__gcov_sort_n_vals@@Base+0x618>
   16448:	cmp	r5, r4
   1644c:	add	r7, r7, r0
   16450:	bne	1643c <generate_code@@Base+0x14dc>
   16454:	cmp	r7, #0
   16458:	sub	r7, r7, #1
   1645c:	beq	16510 <generate_code@@Base+0x15b0>
   16460:	ldr	r8, [pc, #192]	; 16528 <generate_code@@Base+0x15c8>
   16464:	mov	r4, #0
   16468:	ldr	r3, [pc, #188]	; 1652c <generate_code@@Base+0x15cc>
   1646c:	add	r8, pc, r8
   16470:	mov	r5, r4
   16474:	mov	r6, r4
   16478:	add	r3, pc, r3
   1647c:	str	r3, [sp, #4]
   16480:	cmp	r4, #0
   16484:	addeq	r6, sl, r5, lsl #2
   16488:	beq	16494 <generate_code@@Base+0x1534>
   1648c:	b	164bc <generate_code@@Base+0x155c>
   16490:	mov	r5, r3
   16494:	cmp	r5, #7
   16498:	bls	164a4 <generate_code@@Base+0x1544>
   1649c:	mov	r0, r8
   164a0:	bl	151fc <generate_code@@Base+0x29c>
   164a4:	ldr	r4, [r6], #4
   164a8:	add	r3, r5, #1
   164ac:	cmp	r4, #0
   164b0:	beq	16490 <generate_code@@Base+0x1530>
   164b4:	lsl	r6, r5, #5
   164b8:	mov	r5, r3
   164bc:	tst	r4, #1
   164c0:	bne	164d4 <generate_code@@Base+0x1574>
   164c4:	lsr	r4, r4, #1
   164c8:	tst	r4, #1
   164cc:	add	r6, r6, #1
   164d0:	beq	164c4 <generate_code@@Base+0x1564>
   164d4:	cmp	r6, #251	; 0xfb
   164d8:	bhi	16518 <generate_code@@Base+0x15b8>
   164dc:	bl	161e0 <generate_code@@Base+0x1280>
   164e0:	add	r3, r6, r6, lsl #1
   164e4:	sub	r7, r7, #1
   164e8:	add	fp, r9, r3, lsl #3
   164ec:	lsr	r4, r4, #1
   164f0:	add	r6, r6, #1
   164f4:	str	r0, [fp, #40]	; 0x28
   164f8:	bl	16200 <generate_code@@Base+0x12a0>
   164fc:	strd	r0, [fp, #48]	; 0x30
   16500:	bl	16200 <generate_code@@Base+0x12a0>
   16504:	cmn	r7, #1
   16508:	strd	r0, [fp, #56]	; 0x38
   1650c:	bne	16480 <generate_code@@Base+0x1520>
   16510:	add	sp, sp, #44	; 0x2c
   16514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16518:	ldr	r0, [sp, #4]
   1651c:	bl	151fc <generate_code@@Base+0x29c>
   16520:	b	164dc <generate_code@@Base+0x157c>
   16524:	andeq	r1, r0, r0, lsr #15
   16528:	andeq	r1, r0, ip, lsr #9
   1652c:	andeq	r1, r0, r4, ror #8
   16530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16534:	sub	sp, sp, #6080	; 0x17c0
   16538:	sub	sp, sp, #28
   1653c:	mov	r4, r1
   16540:	stmib	sp, {r2, r3}
   16544:	add	r3, sp, #6144	; 0x1800
   16548:	mov	sl, r0
   1654c:	ldr	r7, [r3]
   16550:	add	r3, sp, #6144	; 0x1800
   16554:	add	r3, r3, #4
   16558:	ldr	r6, [r3]
   1655c:	bl	161e0 <generate_code@@Base+0x1280>
   16560:	add	r3, r4, #12
   16564:	mov	r2, sl
   16568:	str	r3, [sp, #12]
   1656c:	mov	r1, r0
   16570:	mov	r0, r3
   16574:	bl	15bc4 <generate_code@@Base+0xc64>
   16578:	cmp	r0, #0
   1657c:	beq	167fc <generate_code@@Base+0x189c>
   16580:	bl	161e0 <generate_code@@Base+0x1280>
   16584:	ldr	r3, [r4, #8]
   16588:	cmp	r0, r3
   1658c:	beq	165a0 <generate_code@@Base+0x1640>
   16590:	mov	r0, #0
   16594:	add	sp, sp, #6080	; 0x17c0
   16598:	add	sp, sp, #28
   1659c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a0:	ldr	fp, [pc, #628]	; 1681c <generate_code@@Base+0x18bc>
   165a4:	add	r9, sp, #2000	; 0x7d0
   165a8:	add	r5, sp, #16
   165ac:	add	fp, pc, fp
   165b0:	add	r9, r9, #8
   165b4:	bl	15008 <generate_code@@Base+0xa8>
   165b8:	str	r0, [r6]
   165bc:	bl	161e0 <generate_code@@Base+0x1280>
   165c0:	cmp	r0, #-1560281088	; 0xa3000000
   165c4:	bne	16668 <generate_code@@Base+0x1708>
   165c8:	bl	161e0 <generate_code@@Base+0x1280>
   165cc:	mov	r0, r5
   165d0:	bl	163e0 <generate_code@@Base+0x1480>
   165d4:	bl	1502c <generate_code@@Base+0xcc>
   165d8:	subs	r8, r0, #0
   165dc:	bne	1679c <generate_code@@Base+0x183c>
   165e0:	ldr	r3, [r7]
   165e4:	cmp	r3, #0
   165e8:	bne	16634 <generate_code@@Base+0x16d4>
   165ec:	add	r2, sp, #6144	; 0x1800
   165f0:	add	r2, r2, #8
   165f4:	ldr	r3, [r9, #-1992]	; 0xfffff838
   165f8:	ldr	r2, [r2]
   165fc:	cmp	r3, r2
   16600:	bne	165b4 <generate_code@@Base+0x1654>
   16604:	ldr	r3, [sp, #8]
   16608:	ldr	ip, [r9, #-1984]	; 0xfffff840
   1660c:	ldr	r2, [pc, #524]	; 16820 <generate_code@@Base+0x18c0>
   16610:	ldr	r3, [r3, #8]
   16614:	mov	r1, r5
   16618:	cmp	ip, r3
   1661c:	ldr	r0, [sp, #4]
   16620:	bne	165b4 <generate_code@@Base+0x1654>
   16624:	bl	119a8 <memcpy@plt>
   16628:	ldr	r3, [r6]
   1662c:	str	r3, [r7]
   16630:	b	165b4 <generate_code@@Base+0x1654>
   16634:	ldr	r0, [pc, #488]	; 16824 <generate_code@@Base+0x18c4>
   16638:	bl	119f0 <malloc@plt>
   1663c:	ldr	r2, [pc, #476]	; 16820 <generate_code@@Base+0x18c0>
   16640:	mov	r1, r5
   16644:	mov	r3, r0
   16648:	str	r0, [fp]
   1664c:	add	r0, r0, #8
   16650:	str	r3, [sp]
   16654:	bl	119a8 <memcpy@plt>
   16658:	ldr	r3, [sp]
   1665c:	str	r8, [r3]
   16660:	ldr	fp, [fp]
   16664:	b	165b4 <generate_code@@Base+0x1654>
   16668:	ldr	r5, [r4, #56]	; 0x38
   1666c:	cmp	r5, #0
   16670:	beq	16804 <generate_code@@Base+0x18a4>
   16674:	ldr	r3, [r4, #60]	; 0x3c
   16678:	cmp	r0, #16777216	; 0x1000000
   1667c:	ldr	r8, [r3]
   16680:	bne	167cc <generate_code@@Base+0x186c>
   16684:	ldr	r6, [pc, #412]	; 16828 <generate_code@@Base+0x18c8>
   16688:	mov	r5, #0
   1668c:	add	r6, pc, r6
   16690:	add	r6, r6, #4
   16694:	b	166d8 <generate_code@@Base+0x1778>
   16698:	mov	r2, r6
   1669c:	mov	r3, r5
   166a0:	mov	r1, r4
   166a4:	mov	r0, sl
   166a8:	bl	1624c <generate_code@@Base+0x12ec>
   166ac:	subs	r6, r0, #0
   166b0:	beq	167d0 <generate_code@@Base+0x1870>
   166b4:	bl	161e0 <generate_code@@Base+0x1280>
   166b8:	ldr	r3, [r4, #56]	; 0x38
   166bc:	add	r5, r5, #1
   166c0:	cmp	r3, r5
   166c4:	beq	16804 <generate_code@@Base+0x18a4>
   166c8:	ldr	r3, [r4, #60]	; 0x3c
   166cc:	cmp	r0, #16777216	; 0x1000000
   166d0:	ldr	r8, [r3, r5, lsl #2]
   166d4:	bne	167d0 <generate_code@@Base+0x1870>
   166d8:	bl	161e0 <generate_code@@Base+0x1280>
   166dc:	cmp	r0, #0
   166e0:	beq	166b4 <generate_code@@Base+0x1754>
   166e4:	cmp	r0, #3
   166e8:	bne	167d0 <generate_code@@Base+0x1870>
   166ec:	cmp	r8, #0
   166f0:	beq	16698 <generate_code@@Base+0x1738>
   166f4:	ldr	r3, [r8]
   166f8:	cmp	r4, r3
   166fc:	bne	16698 <generate_code@@Base+0x1738>
   16700:	bl	161e0 <generate_code@@Base+0x1280>
   16704:	ldr	r3, [r8, #4]
   16708:	cmp	r0, r3
   1670c:	bne	167d0 <generate_code@@Base+0x1870>
   16710:	bl	161e0 <generate_code@@Base+0x1280>
   16714:	ldr	r3, [r8, #8]
   16718:	cmp	r0, r3
   1671c:	bne	167d0 <generate_code@@Base+0x1870>
   16720:	bl	161e0 <generate_code@@Base+0x1280>
   16724:	ldr	r3, [r8, #12]
   16728:	cmp	r0, r3
   1672c:	bne	167d0 <generate_code@@Base+0x1870>
   16730:	ldr	r7, [pc, #244]	; 1682c <generate_code@@Base+0x18cc>
   16734:	ldr	fp, [sp, #12]
   16738:	add	r8, r8, #16
   1673c:	ldr	r9, [fp, #4]!
   16740:	cmp	r9, #0
   16744:	beq	1677c <generate_code@@Base+0x181c>
   16748:	bl	161e0 <generate_code@@Base+0x1280>
   1674c:	str	r0, [sp]
   16750:	bl	161e0 <generate_code@@Base+0x1280>
   16754:	ldr	r3, [sp]
   16758:	cmp	r3, r7
   1675c:	bne	167d0 <generate_code@@Base+0x1870>
   16760:	ldr	r3, [r8]
   16764:	mov	r1, r3
   16768:	cmp	r0, r3, lsl #1
   1676c:	bne	167d0 <generate_code@@Base+0x1870>
   16770:	ldr	r0, [r8, #4]
   16774:	blx	r9
   16778:	add	r8, r8, #8
   1677c:	ldr	r3, [pc, #172]	; 16830 <generate_code@@Base+0x18d0>
   16780:	add	r7, r7, #131072	; 0x20000
   16784:	cmp	r7, r3
   16788:	bne	1673c <generate_code@@Base+0x17dc>
   1678c:	bl	1502c <generate_code@@Base+0xcc>
   16790:	cmp	r0, #0
   16794:	beq	166b4 <generate_code@@Base+0x1754>
   16798:	mov	r8, r0
   1679c:	cmp	r8, #0
   167a0:	blt	16810 <generate_code@@Base+0x18b0>
   167a4:	ldr	r2, [pc, #136]	; 16834 <generate_code@@Base+0x18d4>
   167a8:	add	r2, pc, r2
   167ac:	ldr	r0, [pc, #132]	; 16838 <generate_code@@Base+0x18d8>
   167b0:	mov	r1, sl
   167b4:	add	r0, pc, r0
   167b8:	bl	151fc <generate_code@@Base+0x29c>
   167bc:	mvn	r0, #0
   167c0:	add	sp, sp, #6080	; 0x17c0
   167c4:	add	sp, sp, #28
   167c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167cc:	mov	r5, #0
   167d0:	ldr	r2, [pc, #100]	; 1683c <generate_code@@Base+0x18dc>
   167d4:	ldr	r0, [pc, #100]	; 16840 <generate_code@@Base+0x18e0>
   167d8:	mov	r3, r5
   167dc:	mov	r1, sl
   167e0:	add	r2, pc, r2
   167e4:	add	r0, pc, r0
   167e8:	bl	151fc <generate_code@@Base+0x29c>
   167ec:	mvn	r0, #0
   167f0:	add	sp, sp, #6080	; 0x17c0
   167f4:	add	sp, sp, #28
   167f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167fc:	mvn	r0, #0
   16800:	b	16594 <generate_code@@Base+0x1634>
   16804:	cmp	r0, #0
   16808:	beq	16590 <generate_code@@Base+0x1630>
   1680c:	b	167d0 <generate_code@@Base+0x1870>
   16810:	ldr	r2, [pc, #44]	; 16844 <generate_code@@Base+0x18e4>
   16814:	add	r2, pc, r2
   16818:	b	167ac <generate_code@@Base+0x184c>
   1681c:	muleq	r1, r4, r1
   16820:	andeq	r1, r0, r8, asr #15
   16824:	ldrdeq	r1, [r0], -r0
   16828:	strheq	r3, [r1], -r4
   1682c:			; <UNDEFINED> instruction: 0x01a10000
   16830:			; <UNDEFINED> instruction: 0x01b50000
   16834:			; <UNDEFINED> instruction: 0x000011bc
   16838:	andeq	r1, r0, ip, ror #3
   1683c:	andeq	r1, r0, ip, lsl #3
   16840:	muleq	r0, r4, r1
   16844:	andeq	r1, r0, r4, asr #2
   16848:	ldr	r3, [pc, #68]	; 16894 <generate_code@@Base+0x1934>
   1684c:	ldr	r2, [pc, #68]	; 16898 <generate_code@@Base+0x1938>
   16850:	add	r3, pc, r3
   16854:	push	{r4, r5, r6, lr}
   16858:	mov	r5, r0
   1685c:	ldr	r4, [r3, r2]
   16860:	ldr	r0, [r4, #8]
   16864:	cmp	r0, #0
   16868:	beq	16870 <generate_code@@Base+0x1910>
   1686c:	bl	15088 <generate_code@@Base+0x128>
   16870:	lsl	r1, r5, #2
   16874:	mov	r2, #0
   16878:	ldr	r0, [r4]
   1687c:	bl	11af8 <fseek@plt>
   16880:	ldr	r0, [r4]
   16884:	bl	119b4 <ftell@plt>
   16888:	asr	r0, r0, #2
   1688c:	str	r0, [r4, #4]
   16890:	pop	{r4, r5, r6, pc}
   16894:	andeq	r1, r1, r8, lsr #15
   16898:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1689c:	cmp	r2, #0
   168a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a4:	mov	r9, r0
   168a8:	sub	sp, sp, #20
   168ac:	mov	r5, r1
   168b0:	mov	r4, r3
   168b4:	beq	16a6c <generate_code@@Base+0x1b0c>
   168b8:	cmp	r4, #0
   168bc:	bne	16a88 <generate_code@@Base+0x1b28>
   168c0:	mov	r1, r5
   168c4:	ldr	r5, [pc, #456]	; 16a94 <generate_code@@Base+0x1b34>
   168c8:	mov	r0, #-1560281088	; 0xa3000000
   168cc:	add	r5, pc, r5
   168d0:	bl	160d4 <generate_code@@Base+0x1174>
   168d4:	ldr	r4, [r5]
   168d8:	cmp	r4, #0
   168dc:	movne	r6, #-1560281088	; 0xa3000000
   168e0:	beq	1690c <generate_code@@Base+0x19ac>
   168e4:	add	r1, r4, #8
   168e8:	mov	r0, r6
   168ec:	bl	160d4 <generate_code@@Base+0x1174>
   168f0:	ldr	r3, [r5]
   168f4:	mov	r0, r3
   168f8:	ldr	r4, [r3]
   168fc:	bl	1199c <free@plt>
   16900:	cmp	r4, #0
   16904:	str	r4, [r5]
   16908:	bne	168e4 <generate_code@@Base+0x1984>
   1690c:	ldr	r3, [r9, #56]	; 0x38
   16910:	cmp	r3, #0
   16914:	beq	16a50 <generate_code@@Base+0x1af0>
   16918:	ldr	r3, [pc, #376]	; 16a98 <generate_code@@Base+0x1b38>
   1691c:	ldr	r8, [pc, #376]	; 16a9c <generate_code@@Base+0x1b3c>
   16920:	add	r3, pc, r3
   16924:	str	r3, [sp, #4]
   16928:	ldr	r3, [pc, #368]	; 16aa0 <generate_code@@Base+0x1b40>
   1692c:	mov	r7, #0
   16930:	add	r3, pc, r3
   16934:	str	r3, [sp, #12]
   16938:	b	16974 <generate_code@@Base+0x1a14>
   1693c:	ldr	r3, [r9, #60]	; 0x3c
   16940:	ldr	r4, [r3, r7, lsl #2]
   16944:	cmp	r4, #0
   16948:	beq	16958 <generate_code@@Base+0x19f8>
   1694c:	ldr	r3, [r4]
   16950:	cmp	r9, r3
   16954:	beq	16a60 <generate_code@@Base+0x1b00>
   16958:	mov	r1, #0
   1695c:	mov	r0, #16777216	; 0x1000000
   16960:	bl	160b4 <generate_code@@Base+0x1154>
   16964:	ldr	r3, [r9, #56]	; 0x38
   16968:	add	r7, r7, #1
   1696c:	cmp	r3, r7
   16970:	beq	16a50 <generate_code@@Base+0x1af0>
   16974:	ldr	r3, [sp, #4]
   16978:	ldr	r4, [r3, #4]
   1697c:	cmp	r4, #0
   16980:	beq	1693c <generate_code@@Base+0x19dc>
   16984:	ldr	r3, [r4, #4]
   16988:	cmp	r3, r7
   1698c:	moveq	r3, #1
   16990:	addeq	r4, r4, #8
   16994:	streq	r3, [sp, #8]
   16998:	bne	1693c <generate_code@@Base+0x19dc>
   1699c:	mov	r1, #3
   169a0:	mov	r0, #16777216	; 0x1000000
   169a4:	bl	160b4 <generate_code@@Base+0x1154>
   169a8:	ldr	r0, [r4, #4]
   169ac:	bl	1607c <generate_code@@Base+0x111c>
   169b0:	ldr	r0, [r4, #8]
   169b4:	bl	1607c <generate_code@@Base+0x111c>
   169b8:	ldr	r0, [r4, #12]
   169bc:	bl	1607c <generate_code@@Base+0x111c>
   169c0:	ldr	r5, [pc, #220]	; 16aa4 <generate_code@@Base+0x1b44>
   169c4:	add	r4, r4, #16
   169c8:	add	r6, r9, #12
   169cc:	ldr	r3, [r6, #4]!
   169d0:	cmp	r3, #0
   169d4:	beq	16a10 <generate_code@@Base+0x1ab0>
   169d8:	ldr	fp, [r4]
   169dc:	mov	r0, r5
   169e0:	sub	sl, fp, #1
   169e4:	lsl	r1, fp, #1
   169e8:	bl	160b4 <generate_code@@Base+0x1154>
   169ec:	cmp	fp, #0
   169f0:	ldr	fp, [r4, #4]
   169f4:	beq	16a0c <generate_code@@Base+0x1aac>
   169f8:	sub	sl, sl, #1
   169fc:	ldrd	r0, [fp], #8
   16a00:	bl	16094 <generate_code@@Base+0x1134>
   16a04:	cmn	sl, #1
   16a08:	bne	169f8 <generate_code@@Base+0x1a98>
   16a0c:	add	r4, r4, #8
   16a10:	add	r5, r5, #131072	; 0x20000
   16a14:	cmp	r5, r8
   16a18:	bne	169cc <generate_code@@Base+0x1a6c>
   16a1c:	ldr	r3, [sp, #8]
   16a20:	cmp	r3, #0
   16a24:	beq	16964 <generate_code@@Base+0x1a04>
   16a28:	ldr	r4, [sp, #12]
   16a2c:	mov	r2, #10
   16a30:	mov	r0, r9
   16a34:	ldr	r1, [r4, #4]
   16a38:	bl	15244 <generate_code@@Base+0x2e4>
   16a3c:	ldr	r3, [r9, #56]	; 0x38
   16a40:	add	r7, r7, #1
   16a44:	cmp	r3, r7
   16a48:	str	r0, [r4, #4]
   16a4c:	bne	16974 <generate_code@@Base+0x1a14>
   16a50:	mov	r0, #0
   16a54:	add	sp, sp, #20
   16a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a5c:	b	1607c <generate_code@@Base+0x111c>
   16a60:	mov	r3, #0
   16a64:	str	r3, [sp, #8]
   16a68:	b	1699c <generate_code@@Base+0x1a3c>
   16a6c:	ldr	r1, [pc, #52]	; 16aa8 <generate_code@@Base+0x1b48>
   16a70:	ldr	r0, [pc, #52]	; 16aac <generate_code@@Base+0x1b4c>
   16a74:	bl	160b4 <generate_code@@Base+0x1154>
   16a78:	ldr	r0, [r9, #8]
   16a7c:	bl	1607c <generate_code@@Base+0x111c>
   16a80:	cmp	r4, #0
   16a84:	beq	168c0 <generate_code@@Base+0x1960>
   16a88:	mov	r0, r4
   16a8c:	bl	16848 <generate_code@@Base+0x18e8>
   16a90:	b	168c0 <generate_code@@Base+0x1960>
   16a94:	andeq	r2, r1, r4, ror lr
   16a98:	andeq	r2, r1, r0, lsr #28
   16a9c:			; <UNDEFINED> instruction: 0x01b50000
   16aa0:	andeq	r2, r1, r0, lsl lr
   16aa4:			; <UNDEFINED> instruction: 0x01a10000
   16aa8:	ldrtcc	r3, [r0], -sl, lsr #10
   16aac:	strbvs	r6, [r3, -r1, ror #8]!

00016ab0 <__gcov_sort_n_vals@@Base>:
   16ab0:	cmp	r1, #2
   16ab4:	bxle	lr
   16ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16abc:	sub	lr, r1, #3
   16ac0:	mov	ip, #0
   16ac4:	lsr	lr, lr, #1
   16ac8:	add	r1, r0, #8
   16acc:	add	lr, r0, lr, lsl #4
   16ad0:	add	lr, lr, #24
   16ad4:	ldrd	r4, [r1, #16]
   16ad8:	ldrd	r6, [r1]
   16adc:	ldrd	r8, [r1, #8]
   16ae0:	mov	r2, ip
   16ae4:	cmp	r6, r4
   16ae8:	sbcs	r3, r7, r5
   16aec:	mov	fp, ip
   16af0:	bge	16b38 <__gcov_sort_n_vals@@Base+0x88>
   16af4:	add	r3, r1, #8
   16af8:	mov	sl, #0
   16afc:	b	16b14 <__gcov_sort_n_vals@@Base+0x64>
   16b00:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   16b04:	sub	r3, r3, #16
   16b08:	cmp	r6, r4
   16b0c:	sbcs	r6, r7, r5
   16b10:	bge	16b38 <__gcov_sort_n_vals@@Base+0x88>
   16b14:	ldrd	r6, [r3, #-16]
   16b18:	subs	r2, r2, #2
   16b1c:	mov	fp, r2
   16b20:	strd	r6, [r3]
   16b24:	ldrd	r6, [r1, sl]
   16b28:	sub	sl, sl, #16
   16b2c:	strd	r6, [r3, #8]
   16b30:	mov	r6, r3
   16b34:	bpl	16b00 <__gcov_sort_n_vals@@Base+0x50>
   16b38:	add	fp, fp, #2
   16b3c:	mov	r3, r0
   16b40:	add	r1, r1, #16
   16b44:	lsl	fp, fp, #3
   16b48:	cmp	lr, r1
   16b4c:	strd	r8, [r3, fp]!
   16b50:	add	ip, ip, #2
   16b54:	strd	r4, [r3, #8]
   16b58:	bne	16ad4 <__gcov_sort_n_vals@@Base+0x24>
   16b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b60:	push	{r4, r5, r6, r7, r8, lr}
   16b64:	ldr	r6, [r0]
   16b68:	ldr	r4, [pc, #76]	; 16bbc <__gcov_sort_n_vals@@Base+0x10c>
   16b6c:	smull	r2, r3, r4, r6
   16b70:	asr	r4, r6, #31
   16b74:	rsb	r4, r4, r3, asr #1
   16b78:	add	r4, r4, r4, lsl #3
   16b7c:	subs	r4, r6, r4
   16b80:	bne	16bb8 <__gcov_sort_n_vals@@Base+0x108>
   16b84:	cmp	r6, #0
   16b88:	ldr	r5, [r0, #4]
   16b8c:	pople	{r4, r5, r6, r7, r8, pc}
   16b90:	add	r5, r5, #8
   16b94:	mov	r7, #8
   16b98:	mov	r0, r5
   16b9c:	add	r4, r4, #9
   16ba0:	mov	r1, r7
   16ba4:	bl	16ab0 <__gcov_sort_n_vals@@Base>
   16ba8:	cmp	r6, r4
   16bac:	add	r5, r5, #72	; 0x48
   16bb0:	bgt	16b98 <__gcov_sort_n_vals@@Base+0xe8>
   16bb4:	pop	{r4, r5, r6, r7, r8, pc}
   16bb8:	bl	11b1c <abort@plt>
   16bbc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   16bc0:	ldr	r3, [r0, #52]	; 0x34
   16bc4:	cmp	r3, #0
   16bc8:	bxeq	lr
   16bcc:	ldr	ip, [r0, #56]	; 0x38
   16bd0:	cmp	ip, #0
   16bd4:	bxeq	lr
   16bd8:	push	{r4, r5, r6, lr}
   16bdc:	mov	r5, r0
   16be0:	mov	r4, #0
   16be4:	add	r6, r0, #12
   16be8:	ldr	r1, [r5, #60]	; 0x3c
   16bec:	mov	r2, r6
   16bf0:	mov	r3, #0
   16bf4:	ldr	r0, [r1, r4, lsl #2]
   16bf8:	add	r0, r0, #16
   16bfc:	ldr	r1, [r2, #4]!
   16c00:	cmp	r1, #0
   16c04:	beq	16c14 <__gcov_sort_n_vals@@Base+0x164>
   16c08:	cmp	r3, #9
   16c0c:	beq	16c30 <__gcov_sort_n_vals@@Base+0x180>
   16c10:	add	r0, r0, #8
   16c14:	add	r3, r3, #1
   16c18:	cmp	r3, #10
   16c1c:	bne	16bfc <__gcov_sort_n_vals@@Base+0x14c>
   16c20:	add	r4, r4, #1
   16c24:	cmp	ip, r4
   16c28:	bne	16be8 <__gcov_sort_n_vals@@Base+0x138>
   16c2c:	pop	{r4, r5, r6, pc}
   16c30:	bl	16b60 <__gcov_sort_n_vals@@Base+0xb0>
   16c34:	ldr	ip, [r5, #56]	; 0x38
   16c38:	add	r4, r4, #1
   16c3c:	cmp	ip, r4
   16c40:	bne	16be8 <__gcov_sort_n_vals@@Base+0x138>
   16c44:	b	16c2c <__gcov_sort_n_vals@@Base+0x17c>
   16c48:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c4c:	sub	sp, sp, #6080	; 0x17c0
   16c50:	ldr	ip, [pc, #388]	; 16ddc <__gcov_sort_n_vals@@Base+0x32c>
   16c54:	sub	sp, sp, #36	; 0x24
   16c58:	add	ip, pc, ip
   16c5c:	add	r5, sp, #2016	; 0x7e0
   16c60:	mov	r4, r0
   16c64:	mov	r7, r1
   16c68:	mov	r1, #0
   16c6c:	str	r1, [ip, #4]
   16c70:	str	r1, [ip]
   16c74:	mov	r8, r2
   16c78:	mov	r6, r3
   16c7c:	str	r1, [r5, #-2000]	; 0xfffff830
   16c80:	str	r1, [r5, #-1996]	; 0xfffff834
   16c84:	bl	16bc0 <__gcov_sort_n_vals@@Base+0x110>
   16c88:	mov	r1, r7
   16c8c:	ldr	r0, [r4, #12]
   16c90:	bl	15ef8 <generate_code@@Base+0xf98>
   16c94:	cmn	r0, #1
   16c98:	beq	16d18 <__gcov_sort_n_vals@@Base+0x268>
   16c9c:	bl	161e0 <generate_code@@Base+0x1280>
   16ca0:	cmp	r0, #0
   16ca4:	beq	16d24 <__gcov_sort_n_vals@@Base+0x274>
   16ca8:	ldr	r3, [pc, #304]	; 16de0 <__gcov_sort_n_vals@@Base+0x330>
   16cac:	cmp	r0, r3
   16cb0:	beq	16d7c <__gcov_sort_n_vals@@Base+0x2cc>
   16cb4:	ldr	r0, [pc, #296]	; 16de4 <__gcov_sort_n_vals@@Base+0x334>
   16cb8:	ldr	r1, [r7]
   16cbc:	add	r0, pc, r0
   16cc0:	bl	151fc <generate_code@@Base+0x29c>
   16cc4:	ldr	r5, [pc, #284]	; 16de8 <__gcov_sort_n_vals@@Base+0x338>
   16cc8:	add	r5, pc, r5
   16ccc:	ldr	r1, [r5, #4]
   16cd0:	cmp	r1, #0
   16cd4:	movne	r6, #10
   16cd8:	beq	16cf8 <__gcov_sort_n_vals@@Base+0x248>
   16cdc:	mov	r2, r6
   16ce0:	mov	r0, r4
   16ce4:	bl	15244 <generate_code@@Base+0x2e4>
   16ce8:	cmp	r0, #0
   16cec:	mov	r1, r0
   16cf0:	str	r0, [r5, #4]
   16cf4:	bne	16cdc <__gcov_sort_n_vals@@Base+0x22c>
   16cf8:	bl	1600c <generate_code@@Base+0x10ac>
   16cfc:	cmp	r0, #0
   16d00:	beq	16d18 <__gcov_sort_n_vals@@Base+0x268>
   16d04:	blt	16db8 <__gcov_sort_n_vals@@Base+0x308>
   16d08:	ldr	r0, [pc, #220]	; 16dec <__gcov_sort_n_vals@@Base+0x33c>
   16d0c:	add	r0, pc, r0
   16d10:	ldr	r1, [r7]
   16d14:	bl	151fc <generate_code@@Base+0x29c>
   16d18:	add	sp, sp, #6080	; 0x17c0
   16d1c:	add	sp, sp, #36	; 0x24
   16d20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d24:	add	r9, sp, #24
   16d28:	bl	15d8c <generate_code@@Base+0xe2c>
   16d2c:	ldr	r1, [r5, #-2000]	; 0xfffff830
   16d30:	cmp	r1, #0
   16d34:	beq	16dc4 <__gcov_sort_n_vals@@Base+0x314>
   16d38:	add	r3, sp, #6144	; 0x1800
   16d3c:	ldr	r0, [r7]
   16d40:	str	r6, [sp, #4]
   16d44:	ldr	r3, [r3]
   16d48:	mov	r1, r8
   16d4c:	str	r3, [sp]
   16d50:	mov	r2, r4
   16d54:	mov	r3, r9
   16d58:	bl	15c50 <generate_code@@Base+0xcf0>
   16d5c:	cmn	r0, #1
   16d60:	beq	16cc4 <__gcov_sort_n_vals@@Base+0x214>
   16d64:	mov	r1, r9
   16d68:	ldr	r3, [r5, #-2000]	; 0xfffff830
   16d6c:	ldr	r2, [r5, #-1996]	; 0xfffff834
   16d70:	mov	r0, r4
   16d74:	bl	1689c <generate_code@@Base+0x193c>
   16d78:	b	16cc4 <__gcov_sort_n_vals@@Base+0x214>
   16d7c:	add	r3, sp, #16
   16d80:	ldr	r0, [r7]
   16d84:	str	r3, [sp]
   16d88:	add	r3, sp, #6144	; 0x1800
   16d8c:	add	r1, sp, #20
   16d90:	add	r9, sp, #24
   16d94:	str	r1, [sp, #4]
   16d98:	str	r6, [sp, #8]
   16d9c:	mov	r2, r9
   16da0:	ldr	r3, [r3]
   16da4:	mov	r1, r4
   16da8:	bl	16530 <generate_code@@Base+0x15d0>
   16dac:	cmn	r0, #1
   16db0:	bne	16d28 <__gcov_sort_n_vals@@Base+0x278>
   16db4:	b	16cc4 <__gcov_sort_n_vals@@Base+0x214>
   16db8:	ldr	r0, [pc, #48]	; 16df0 <__gcov_sort_n_vals@@Base+0x340>
   16dbc:	add	r0, pc, r0
   16dc0:	b	16d10 <__gcov_sort_n_vals@@Base+0x260>
   16dc4:	ldr	r2, [pc, #40]	; 16df4 <__gcov_sort_n_vals@@Base+0x344>
   16dc8:	mov	r0, r9
   16dcc:	bl	11a98 <memset@plt>
   16dd0:	ldr	r3, [r5, #-1996]	; 0xfffff834
   16dd4:	str	r3, [r5, #-2000]	; 0xfffff830
   16dd8:	b	16d38 <__gcov_sort_n_vals@@Base+0x288>
   16ddc:	andeq	r2, r1, r8, ror #21
   16de0:	strbvs	r6, [r3, -r1, ror #8]!
   16de4:	andeq	r0, r0, ip, lsr sp
   16de8:	andeq	r2, r1, r8, ror sl
   16dec:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   16df0:	andeq	r0, r0, r0, lsl #24
   16df4:	andeq	r1, r0, r8, asr #15
   16df8:	push	{r4, r5, r6, r7, r8, lr}
   16dfc:	sub	sp, sp, #6080	; 0x17c0
   16e00:	sub	sp, sp, #32
   16e04:	add	r6, sp, #24
   16e08:	add	r2, sp, #12
   16e0c:	mov	r8, r1
   16e10:	mov	r1, r6
   16e14:	mov	r4, r0
   16e18:	bl	1545c <generate_code@@Base+0x4fc>
   16e1c:	add	r5, sp, #8
   16e20:	mov	r7, r0
   16e24:	mov	r0, r5
   16e28:	bl	155e0 <generate_code@@Base+0x680>
   16e2c:	cmp	r4, #0
   16e30:	beq	16e58 <__gcov_sort_n_vals@@Base+0x3a8>
   16e34:	mov	r0, r4
   16e38:	str	r6, [sp]
   16e3c:	mov	r3, r7
   16e40:	mov	r2, r8
   16e44:	mov	r1, r5
   16e48:	bl	16c48 <__gcov_sort_n_vals@@Base+0x198>
   16e4c:	ldr	r4, [r4, #4]
   16e50:	cmp	r4, #0
   16e54:	bne	16e34 <__gcov_sort_n_vals@@Base+0x384>
   16e58:	ldr	r0, [sp, #8]
   16e5c:	bl	1199c <free@plt>
   16e60:	add	sp, sp, #6080	; 0x17c0
   16e64:	add	sp, sp, #32
   16e68:	pop	{r4, r5, r6, r7, r8, pc}
   16e6c:	ldrb	r1, [r0, #4]
   16e70:	tst	r1, #1
   16e74:	bxne	lr
   16e78:	push	{r4, lr}
   16e7c:	lsr	r1, r1, #1
   16e80:	mov	r4, r0
   16e84:	and	r1, r1, #1
   16e88:	ldr	r0, [r0]
   16e8c:	bl	16df8 <__gcov_sort_n_vals@@Base+0x348>
   16e90:	ldrb	r3, [r4, #4]
   16e94:	orr	r3, r3, #3
   16e98:	strb	r3, [r4, #4]
   16e9c:	pop	{r4, pc}
   16ea0:	push	{r4, r5, r6, lr}
   16ea4:	ldr	r4, [pc, #76]	; 16ef8 <__gcov_sort_n_vals@@Base+0x448>
   16ea8:	ldr	r5, [pc, #76]	; 16efc <__gcov_sort_n_vals@@Base+0x44c>
   16eac:	add	r4, pc, r4
   16eb0:	mov	r0, r4
   16eb4:	bl	16e6c <__gcov_sort_n_vals@@Base+0x3bc>
   16eb8:	ldr	r3, [r4, #8]
   16ebc:	add	r5, pc, r5
   16ec0:	cmp	r3, #0
   16ec4:	ldrne	r2, [r4, #12]
   16ec8:	strne	r2, [r3, #12]
   16ecc:	ldr	r2, [pc, #44]	; 16f00 <__gcov_sort_n_vals@@Base+0x450>
   16ed0:	add	r2, pc, r2
   16ed4:	ldr	r2, [r2, #12]
   16ed8:	cmp	r2, #0
   16edc:	beq	16ee8 <__gcov_sort_n_vals@@Base+0x438>
   16ee0:	str	r3, [r2, #8]
   16ee4:	pop	{r4, r5, r6, pc}
   16ee8:	ldr	r2, [pc, #20]	; 16f04 <__gcov_sort_n_vals@@Base+0x454>
   16eec:	ldr	r2, [r5, r2]
   16ef0:	str	r3, [r2, #4]
   16ef4:	pop	{r4, r5, r6, pc}
   16ef8:	muleq	r1, ip, r8
   16efc:	andeq	r1, r1, ip, lsr r1
   16f00:	andeq	r2, r1, r8, ror r8
   16f04:	andeq	r0, r0, ip, lsr #1
   16f08:	ldr	r1, [r0]
   16f0c:	push	{r4, r5, r6, lr}
   16f10:	cmp	r1, #0
   16f14:	ldr	r5, [pc, #168]	; 16fc4 <__gcov_sort_n_vals@@Base+0x514>
   16f18:	add	r5, pc, r5
   16f1c:	popeq	{r4, r5, r6, pc}
   16f20:	ldr	r3, [r0, #56]	; 0x38
   16f24:	cmp	r3, #0
   16f28:	popeq	{r4, r5, r6, pc}
   16f2c:	mov	r4, r0
   16f30:	mov	r2, #0
   16f34:	add	r0, r0, #12
   16f38:	bl	15bc4 <generate_code@@Base+0xc64>
   16f3c:	cmp	r0, #0
   16f40:	popeq	{r4, r5, r6, pc}
   16f44:	ldr	r6, [pc, #124]	; 16fc8 <__gcov_sort_n_vals@@Base+0x518>
   16f48:	add	r6, pc, r6
   16f4c:	ldr	r2, [r6]
   16f50:	cmp	r2, #0
   16f54:	beq	16f6c <__gcov_sort_n_vals@@Base+0x4bc>
   16f58:	ldr	r3, [pc, #108]	; 16fcc <__gcov_sort_n_vals@@Base+0x51c>
   16f5c:	str	r2, [r4, #4]
   16f60:	add	r3, pc, r3
   16f64:	str	r4, [r3]
   16f68:	pop	{r4, r5, r6, pc}
   16f6c:	ldr	r3, [pc, #92]	; 16fd0 <__gcov_sort_n_vals@@Base+0x520>
   16f70:	ldr	r2, [pc, #92]	; 16fd4 <__gcov_sort_n_vals@@Base+0x524>
   16f74:	mov	r0, #12
   16f78:	ldr	r5, [r5, r3]
   16f7c:	add	r2, pc, r2
   16f80:	ldr	r1, [r5]
   16f84:	bl	15bc4 <generate_code@@Base+0xc64>
   16f88:	cmp	r0, #0
   16f8c:	beq	16fac <__gcov_sort_n_vals@@Base+0x4fc>
   16f90:	ldr	r3, [r5, #4]
   16f94:	cmp	r3, #0
   16f98:	str	r3, [r6, #8]
   16f9c:	strne	r6, [r3, #12]
   16fa0:	ldr	r3, [pc, #48]	; 16fd8 <__gcov_sort_n_vals@@Base+0x528>
   16fa4:	add	r3, pc, r3
   16fa8:	str	r3, [r5, #4]
   16fac:	ldr	r0, [pc, #40]	; 16fdc <__gcov_sort_n_vals@@Base+0x52c>
   16fb0:	add	r0, pc, r0
   16fb4:	bl	17298 <__libc_csu_fini@@Base+0x4>
   16fb8:	ldr	r3, [pc, #32]	; 16fe0 <__gcov_sort_n_vals@@Base+0x530>
   16fbc:	ldr	r2, [pc, r3]
   16fc0:	b	16f58 <__gcov_sort_n_vals@@Base+0x4a8>
   16fc4:	andeq	r1, r1, r0, ror #1
   16fc8:	andeq	r2, r1, r0, lsl #16
   16fcc:	andeq	r2, r1, r8, ror #15
   16fd0:	andeq	r0, r0, ip, lsr #1
   16fd4:	andeq	r0, r0, r0, lsr #21
   16fd8:	andeq	r2, r1, r4, lsr #15
   16fdc:			; <UNDEFINED> instruction: 0xfffffee8
   16fe0:	andeq	r2, r1, ip, lsl #15
   16fe4:	cmp	r3, #0
   16fe8:	cmpeq	r2, #0
   16fec:	bne	17010 <__gcov_sort_n_vals@@Base+0x560>
   16ff0:	cmp	r1, #0
   16ff4:	movlt	r1, #-2147483648	; 0x80000000
   16ff8:	movlt	r0, #0
   16ffc:	blt	1700c <__gcov_sort_n_vals@@Base+0x55c>
   17000:	cmpeq	r0, #0
   17004:	mvnne	r1, #-2147483648	; 0x80000000
   17008:	mvnne	r0, #0
   1700c:	b	170b8 <__gcov_sort_n_vals@@Base+0x608>
   17010:	sub	sp, sp, #8
   17014:	push	{sp, lr}
   17018:	cmp	r1, #0
   1701c:	blt	1703c <__gcov_sort_n_vals@@Base+0x58c>
   17020:	cmp	r3, #0
   17024:	blt	17070 <__gcov_sort_n_vals@@Base+0x5c0>
   17028:	bl	1710c <__gcov_sort_n_vals@@Base+0x65c>
   1702c:	ldr	lr, [sp, #4]
   17030:	add	sp, sp, #8
   17034:	pop	{r2, r3}
   17038:	bx	lr
   1703c:	rsbs	r0, r0, #0
   17040:	sbc	r1, r1, r1, lsl #1
   17044:	cmp	r3, #0
   17048:	blt	17094 <__gcov_sort_n_vals@@Base+0x5e4>
   1704c:	bl	1710c <__gcov_sort_n_vals@@Base+0x65c>
   17050:	ldr	lr, [sp, #4]
   17054:	add	sp, sp, #8
   17058:	pop	{r2, r3}
   1705c:	rsbs	r0, r0, #0
   17060:	sbc	r1, r1, r1, lsl #1
   17064:	rsbs	r2, r2, #0
   17068:	sbc	r3, r3, r3, lsl #1
   1706c:	bx	lr
   17070:	rsbs	r2, r2, #0
   17074:	sbc	r3, r3, r3, lsl #1
   17078:	bl	1710c <__gcov_sort_n_vals@@Base+0x65c>
   1707c:	ldr	lr, [sp, #4]
   17080:	add	sp, sp, #8
   17084:	pop	{r2, r3}
   17088:	rsbs	r0, r0, #0
   1708c:	sbc	r1, r1, r1, lsl #1
   17090:	bx	lr
   17094:	rsbs	r2, r2, #0
   17098:	sbc	r3, r3, r3, lsl #1
   1709c:	bl	1710c <__gcov_sort_n_vals@@Base+0x65c>
   170a0:	ldr	lr, [sp, #4]
   170a4:	add	sp, sp, #8
   170a8:	pop	{r2, r3}
   170ac:	rsbs	r2, r2, #0
   170b0:	sbc	r3, r3, r3, lsl #1
   170b4:	bx	lr
   170b8:	push	{r1, lr}
   170bc:	mov	r0, #8
   170c0:	bl	11978 <raise@plt>
   170c4:	pop	{r1, pc}
   170c8:	ldr	r3, [pc, #48]	; 17100 <__gcov_sort_n_vals@@Base+0x650>
   170cc:	ldr	r2, [pc, #48]	; 17104 <__gcov_sort_n_vals@@Base+0x654>
   170d0:	and	r3, r3, r0, lsr #1
   170d4:	sub	r0, r0, r3
   170d8:	and	r3, r0, r2
   170dc:	and	r0, r2, r0, lsr #2
   170e0:	add	r3, r3, r0
   170e4:	ldr	r0, [pc, #28]	; 17108 <__gcov_sort_n_vals@@Base+0x658>
   170e8:	add	r3, r3, r3, lsr #4
   170ec:	and	r0, r0, r3
   170f0:	add	r0, r0, r0, lsl #8
   170f4:	add	r0, r0, r0, lsl #16
   170f8:	lsr	r0, r0, #24
   170fc:	bx	lr
   17100:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   17104:	teqcc	r3, #-872415232	; 0xcc000000
   17108:	svceq	0x000f0f0f
   1710c:	cmp	r1, r3
   17110:	push	{r4, r5, r6, r7, r8, r9, lr}
   17114:	cmpeq	r0, r2
   17118:	mov	r4, r0
   1711c:	mov	r5, r1
   17120:	ldr	r9, [sp, #28]
   17124:	movcc	r0, #0
   17128:	movcc	r1, #0
   1712c:	bcc	17224 <__gcov_sort_n_vals@@Base+0x774>
   17130:	cmp	r3, #0
   17134:	clzeq	ip, r2
   17138:	clzne	ip, r3
   1713c:	addeq	ip, ip, #32
   17140:	cmp	r5, #0
   17144:	clzeq	r1, r4
   17148:	addeq	r1, r1, #32
   1714c:	clzne	r1, r5
   17150:	sub	ip, ip, r1
   17154:	sub	lr, ip, #32
   17158:	lsl	r7, r3, ip
   1715c:	rsb	r8, ip, #32
   17160:	orr	r7, r7, r2, lsl lr
   17164:	orr	r7, r7, r2, lsr r8
   17168:	lsl	r6, r2, ip
   1716c:	cmp	r5, r7
   17170:	cmpeq	r4, r6
   17174:	movcc	r0, #0
   17178:	movcc	r1, #0
   1717c:	bcc	17198 <__gcov_sort_n_vals@@Base+0x6e8>
   17180:	mov	r3, #1
   17184:	subs	r4, r4, r6
   17188:	lsl	r1, r3, lr
   1718c:	lsl	r0, r3, ip
   17190:	orr	r1, r1, r3, lsr r8
   17194:	sbc	r5, r5, r7
   17198:	cmp	ip, #0
   1719c:	beq	17224 <__gcov_sort_n_vals@@Base+0x774>
   171a0:	lsrs	r3, r7, #1
   171a4:	rrx	r2, r6
   171a8:	mov	r6, ip
   171ac:	b	171d0 <__gcov_sort_n_vals@@Base+0x720>
   171b0:	subs	r4, r4, r2
   171b4:	sbc	r5, r5, r3
   171b8:	adds	r4, r4, r4
   171bc:	adc	r5, r5, r5
   171c0:	adds	r4, r4, #1
   171c4:	adc	r5, r5, #0
   171c8:	subs	r6, r6, #1
   171cc:	beq	171ec <__gcov_sort_n_vals@@Base+0x73c>
   171d0:	cmp	r5, r3
   171d4:	cmpeq	r4, r2
   171d8:	bcs	171b0 <__gcov_sort_n_vals@@Base+0x700>
   171dc:	adds	r4, r4, r4
   171e0:	adc	r5, r5, r5
   171e4:	subs	r6, r6, #1
   171e8:	bne	171d0 <__gcov_sort_n_vals@@Base+0x720>
   171ec:	lsr	r6, r4, ip
   171f0:	lsr	r7, r5, ip
   171f4:	orr	r6, r6, r5, lsl r8
   171f8:	adds	r2, r0, r4
   171fc:	orr	r6, r6, r5, lsr lr
   17200:	adc	r3, r1, r5
   17204:	lsl	r1, r7, ip
   17208:	orr	r1, r1, r6, lsl lr
   1720c:	lsl	r0, r6, ip
   17210:	orr	r1, r1, r6, lsr r8
   17214:	subs	r0, r2, r0
   17218:	mov	r4, r6
   1721c:	mov	r5, r7
   17220:	sbc	r1, r3, r1
   17224:	cmp	r9, #0
   17228:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1722c:	strd	r4, [r9]
   17230:	pop	{r4, r5, r6, r7, r8, r9, pc}

00017234 <__libc_csu_init@@Base>:
   17234:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17238:	mov	r7, r0
   1723c:	ldr	r6, [pc, #72]	; 1728c <__libc_csu_init@@Base+0x58>
   17240:	ldr	r5, [pc, #72]	; 17290 <__libc_csu_init@@Base+0x5c>
   17244:	add	r6, pc, r6
   17248:	add	r5, pc, r5
   1724c:	sub	r6, r6, r5
   17250:	mov	r8, r1
   17254:	mov	r9, r2
   17258:	bl	1194c <fdopen@plt-0x20>
   1725c:	asrs	r6, r6, #2
   17260:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17264:	mov	r4, #0
   17268:	add	r4, r4, #1
   1726c:	ldr	r3, [r5], #4
   17270:	mov	r2, r9
   17274:	mov	r1, r8
   17278:	mov	r0, r7
   1727c:	blx	r3
   17280:	cmp	r6, r4
   17284:	bne	17268 <__libc_csu_init@@Base+0x34>
   17288:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1728c:	andeq	r0, r1, r4, asr #25
   17290:	andeq	r0, r1, r4, lsr #25

00017294 <__libc_csu_fini@@Base>:
   17294:	bx	lr
   17298:	ldr	r3, [pc, #12]	; 172ac <__libc_csu_fini@@Base+0x18>
   1729c:	mov	r1, #0
   172a0:	add	r3, pc, r3
   172a4:	ldr	r2, [r3]
   172a8:	b	11a74 <__cxa_atexit@plt>
   172ac:	andeq	r0, r1, r0, lsl lr
   172b0:	mov	r2, r1
   172b4:	mov	r1, r0
   172b8:	mov	r0, #3
   172bc:	b	11a08 <__fxstat@plt>

Disassembly of section .fini:

000172c0 <.fini>:
   172c0:	push	{r3, lr}
   172c4:	pop	{r3, pc}
