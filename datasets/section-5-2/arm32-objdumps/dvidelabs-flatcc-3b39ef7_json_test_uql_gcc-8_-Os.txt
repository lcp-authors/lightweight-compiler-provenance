
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144f8 <.init>:
   144f8:	push	{r3, lr}
   144fc:	bl	15318 <_start@@Base+0x3c>
   14500:	pop	{r3, pc}

Disassembly of section .plt:

00014504 <raise@plt-0x14>:
   14504:	push	{lr}		; (str lr, [sp, #-4]!)
   14508:	ldr	lr, [pc, #4]	; 14514 <raise@plt-0x4>
   1450c:	add	lr, pc, lr
   14510:	ldr	pc, [lr, #8]!
   14514:	andeq	r0, r3, ip, ror #21

00014518 <raise@plt>:
   14518:	add	ip, pc, #0, 12
   1451c:	add	ip, ip, #48, 20	; 0x30000
   14520:	ldr	pc, [ip, #2796]!	; 0xaec

00014524 <strcmp@plt>:
   14524:	add	ip, pc, #0, 12
   14528:	add	ip, ip, #48, 20	; 0x30000
   1452c:	ldr	pc, [ip, #2788]!	; 0xae4

00014530 <memmove@plt>:
   14530:	add	ip, pc, #0, 12
   14534:	add	ip, ip, #48, 20	; 0x30000
   14538:	ldr	pc, [ip, #2780]!	; 0xadc

0001453c <free@plt>:
   1453c:	add	ip, pc, #0, 12
   14540:	add	ip, ip, #48, 20	; 0x30000
   14544:	ldr	pc, [ip, #2772]!	; 0xad4

00014548 <memcpy@plt>:
   14548:	add	ip, pc, #0, 12
   1454c:	add	ip, ip, #48, 20	; 0x30000
   14550:	ldr	pc, [ip, #2764]!	; 0xacc

00014554 <memcmp@plt>:
   14554:	add	ip, pc, #0, 12
   14558:	add	ip, ip, #48, 20	; 0x30000
   1455c:	ldr	pc, [ip, #2756]!	; 0xac4

00014560 <realloc@plt>:
   14560:	add	ip, pc, #0, 12
   14564:	add	ip, ip, #48, 20	; 0x30000
   14568:	ldr	pc, [ip, #2748]!	; 0xabc

0001456c <fwrite@plt>:
   1456c:	add	ip, pc, #0, 12
   14570:	add	ip, ip, #48, 20	; 0x30000
   14574:	ldr	pc, [ip, #2740]!	; 0xab4

00014578 <malloc@plt>:
   14578:	add	ip, pc, #0, 12
   1457c:	add	ip, ip, #48, 20	; 0x30000
   14580:	ldr	pc, [ip, #2732]!	; 0xaac

00014584 <__libc_start_main@plt>:
   14584:	add	ip, pc, #0, 12
   14588:	add	ip, ip, #48, 20	; 0x30000
   1458c:	ldr	pc, [ip, #2724]!	; 0xaa4

00014590 <__gmon_start__@plt>:
   14590:	add	ip, pc, #0, 12
   14594:	add	ip, ip, #48, 20	; 0x30000
   14598:	ldr	pc, [ip, #2716]!	; 0xa9c

0001459c <strlen@plt>:
   1459c:	add	ip, pc, #0, 12
   145a0:	add	ip, ip, #48, 20	; 0x30000
   145a4:	ldr	pc, [ip, #2708]!	; 0xa94

000145a8 <fprintf@plt>:
   145a8:	add	ip, pc, #0, 12
   145ac:	add	ip, ip, #48, 20	; 0x30000
   145b0:	ldr	pc, [ip, #2700]!	; 0xa8c

000145b4 <posix_memalign@plt>:
   145b4:	add	ip, pc, #0, 12
   145b8:	add	ip, ip, #48, 20	; 0x30000
   145bc:	ldr	pc, [ip, #2692]!	; 0xa84

000145c0 <memset@plt>:
   145c0:	add	ip, pc, #0, 12
   145c4:	add	ip, ip, #48, 20	; 0x30000
   145c8:	ldr	pc, [ip, #2684]!	; 0xa7c

000145cc <strncpy@plt>:
   145cc:	add	ip, pc, #0, 12
   145d0:	add	ip, ip, #48, 20	; 0x30000
   145d4:	ldr	pc, [ip, #2676]!	; 0xa74

000145d8 <strtod@plt>:
   145d8:	add	ip, pc, #0, 12
   145dc:	add	ip, ip, #48, 20	; 0x30000
   145e0:	ldr	pc, [ip, #2668]!	; 0xa6c

000145e4 <memchr@plt>:
   145e4:	add	ip, pc, #0, 12
   145e8:	add	ip, ip, #48, 20	; 0x30000
   145ec:	ldr	pc, [ip, #2660]!	; 0xa64

000145f0 <fputc@plt>:
   145f0:	add	ip, pc, #0, 12
   145f4:	add	ip, ip, #48, 20	; 0x30000
   145f8:	ldr	pc, [ip, #2652]!	; 0xa5c

000145fc <sprintf@plt>:
   145fc:	add	ip, pc, #0, 12
   14600:	add	ip, ip, #48, 20	; 0x30000
   14604:	ldr	pc, [ip, #2644]!	; 0xa54

00014608 <fputs@plt>:
   14608:	add	ip, pc, #0, 12
   1460c:	add	ip, ip, #48, 20	; 0x30000
   14610:	ldr	pc, [ip, #2636]!	; 0xa4c

00014614 <abort@plt>:
   14614:	add	ip, pc, #0, 12
   14618:	add	ip, ip, #48, 20	; 0x30000
   1461c:	ldr	pc, [ip, #2628]!	; 0xa44

00014620 <__assert_fail@plt>:
   14620:	add	ip, pc, #0, 12
   14624:	add	ip, ip, #48, 20	; 0x30000
   14628:	ldr	pc, [ip, #2620]!	; 0xa3c

Disassembly of section .text:

00014630 <main@@Base>:
   14630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14634:	sub	sp, sp, #20
   14638:	mov	r4, #0
   1463c:	bl	1facc <edge_case_tests@@Base>
   14640:	ldr	r6, [pc, #2848]	; 15168 <main@@Base+0xb38>
   14644:	mov	r5, r0
   14648:	bl	1fe04 <error_case_tests@@Base>
   1464c:	ldr	r7, [pc, #2840]	; 1516c <main@@Base+0xb3c>
   14650:	orr	r5, r5, r0
   14654:	bl	2048c <union_vector_tests@@Base>
   14658:	orr	r5, r5, r0
   1465c:	ldr	r8, [pc, #2828]	; 15170 <main@@Base+0xb40>
   14660:	bl	20134 <base64_tests@@Base>
   14664:	orr	r5, r5, r0
   14668:	ldr	sl, [pc, #2820]	; 15174 <main@@Base+0xb44>
   1466c:	bl	20324 <mixed_type_union_tests@@Base>
   14670:	movw	r3, #525	; 0x20d
   14674:	mov	r2, r7
   14678:	ldr	r1, [pc, #2808]	; 15178 <main@@Base+0xb48>
   1467c:	orr	r5, r5, r0
   14680:	mov	r0, r6
   14684:	str	r4, [sp]
   14688:	str	r4, [sp, #4]
   1468c:	str	r3, [sp, #8]
   14690:	mov	r3, r4
   14694:	bl	1f708 <test_json@@Base>
   14698:	mov	r3, #528	; 0x210
   1469c:	mov	r2, r8
   146a0:	ldr	r1, [pc, #2772]	; 1517c <main@@Base+0xb4c>
   146a4:	orr	r5, r5, r0
   146a8:	mov	r0, r6
   146ac:	str	r4, [sp]
   146b0:	str	r4, [sp, #4]
   146b4:	str	r3, [sp, #8]
   146b8:	mov	r3, r4
   146bc:	bl	1f708 <test_json@@Base>
   146c0:	ldr	r9, [pc, #2744]	; 15180 <main@@Base+0xb50>
   146c4:	movw	r3, #531	; 0x213
   146c8:	mov	r2, sl
   146cc:	orr	r5, r5, r0
   146d0:	mov	r0, r6
   146d4:	str	r4, [sp]
   146d8:	ldr	r1, [pc, #2724]	; 15184 <main@@Base+0xb54>
   146dc:	str	r4, [sp, #4]
   146e0:	str	r3, [sp, #8]
   146e4:	mov	r3, r4
   146e8:	bl	1f708 <test_json@@Base>
   146ec:	movw	r3, #534	; 0x216
   146f0:	mov	r2, r9
   146f4:	ldr	r1, [pc, #2700]	; 15188 <main@@Base+0xb58>
   146f8:	orr	r5, r5, r0
   146fc:	mov	r0, r6
   14700:	str	r4, [sp]
   14704:	str	r4, [sp, #4]
   14708:	str	r3, [sp, #8]
   1470c:	mov	r3, r4
   14710:	bl	1f708 <test_json@@Base>
   14714:	movw	r3, #537	; 0x219
   14718:	mov	r2, r9
   1471c:	ldr	r1, [pc, #2664]	; 1518c <main@@Base+0xb5c>
   14720:	orr	r5, r5, r0
   14724:	mov	r0, r6
   14728:	str	r4, [sp]
   1472c:	str	r4, [sp, #4]
   14730:	str	r3, [sp, #8]
   14734:	mov	r3, r4
   14738:	bl	1f708 <test_json@@Base>
   1473c:	mov	r3, #540	; 0x21c
   14740:	mov	r2, r8
   14744:	ldr	r1, [pc, #2628]	; 15190 <main@@Base+0xb60>
   14748:	orr	r5, r5, r0
   1474c:	mov	r0, r6
   14750:	str	r4, [sp]
   14754:	str	r4, [sp, #4]
   14758:	str	r3, [sp, #8]
   1475c:	mov	r3, r4
   14760:	bl	1f708 <test_json@@Base>
   14764:	movw	r3, #543	; 0x21f
   14768:	mov	r2, sl
   1476c:	ldr	r1, [pc, #2592]	; 15194 <main@@Base+0xb64>
   14770:	orr	r5, r5, r0
   14774:	mov	r0, r6
   14778:	str	r4, [sp]
   1477c:	str	r4, [sp, #4]
   14780:	str	r3, [sp, #8]
   14784:	mov	r3, r4
   14788:	bl	1f708 <test_json@@Base>
   1478c:	movw	r3, #547	; 0x223
   14790:	mov	r2, r7
   14794:	ldr	r1, [pc, #2556]	; 15198 <main@@Base+0xb68>
   14798:	orr	r5, r5, r0
   1479c:	mov	r0, r6
   147a0:	str	r4, [sp]
   147a4:	str	r4, [sp, #4]
   147a8:	str	r3, [sp, #8]
   147ac:	mov	r3, r4
   147b0:	bl	1f708 <test_json@@Base>
   147b4:	movw	r3, #551	; 0x227
   147b8:	mov	r2, r7
   147bc:	ldr	r1, [pc, #2520]	; 1519c <main@@Base+0xb6c>
   147c0:	orr	r5, r5, r0
   147c4:	mov	r0, r6
   147c8:	str	r4, [sp]
   147cc:	str	r4, [sp, #4]
   147d0:	str	r3, [sp, #8]
   147d4:	mov	r3, r4
   147d8:	bl	1f708 <test_json@@Base>
   147dc:	movw	r3, #555	; 0x22b
   147e0:	mov	r2, r7
   147e4:	ldr	r1, [pc, #2484]	; 151a0 <main@@Base+0xb70>
   147e8:	orr	r5, r5, r0
   147ec:	mov	r0, r6
   147f0:	str	r4, [sp]
   147f4:	str	r4, [sp, #4]
   147f8:	str	r3, [sp, #8]
   147fc:	mov	r3, r4
   14800:	bl	1f708 <test_json@@Base>
   14804:	movw	r3, #558	; 0x22e
   14808:	mov	r2, r8
   1480c:	ldr	r1, [pc, #2448]	; 151a4 <main@@Base+0xb74>
   14810:	orr	r5, r5, r0
   14814:	mov	r0, r6
   14818:	str	r4, [sp]
   1481c:	str	r4, [sp, #4]
   14820:	str	r3, [sp, #8]
   14824:	mov	r3, r4
   14828:	bl	1f708 <test_json@@Base>
   1482c:	movw	r3, #561	; 0x231
   14830:	mov	r2, sl
   14834:	ldr	r1, [pc, #2412]	; 151a8 <main@@Base+0xb78>
   14838:	orr	r5, r5, r0
   1483c:	mov	r0, r6
   14840:	str	r4, [sp]
   14844:	str	r4, [sp, #4]
   14848:	str	r3, [sp, #8]
   1484c:	mov	r3, r4
   14850:	bl	1f708 <test_json@@Base>
   14854:	mov	r3, #564	; 0x234
   14858:	mov	r2, r9
   1485c:	ldr	r1, [pc, #2376]	; 151ac <main@@Base+0xb7c>
   14860:	orr	r5, r5, r0
   14864:	mov	r0, r6
   14868:	str	r4, [sp]
   1486c:	str	r4, [sp, #4]
   14870:	str	r3, [sp, #8]
   14874:	mov	r3, r4
   14878:	bl	1f708 <test_json@@Base>
   1487c:	movw	r3, #567	; 0x237
   14880:	mov	r2, r9
   14884:	ldr	r1, [pc, #2340]	; 151b0 <main@@Base+0xb80>
   14888:	orr	r5, r5, r0
   1488c:	mov	r0, r6
   14890:	str	r4, [sp]
   14894:	str	r4, [sp, #4]
   14898:	str	r3, [sp, #8]
   1489c:	mov	r3, r4
   148a0:	bl	1f708 <test_json@@Base>
   148a4:	movw	r3, #570	; 0x23a
   148a8:	mov	r2, r8
   148ac:	ldr	r1, [pc, #2304]	; 151b4 <main@@Base+0xb84>
   148b0:	orr	r5, r5, r0
   148b4:	mov	r0, r6
   148b8:	str	r4, [sp]
   148bc:	str	r4, [sp, #4]
   148c0:	str	r3, [sp, #8]
   148c4:	mov	r3, r4
   148c8:	bl	1f708 <test_json@@Base>
   148cc:	movw	r3, #573	; 0x23d
   148d0:	mov	r2, sl
   148d4:	ldr	r1, [pc, #2268]	; 151b8 <main@@Base+0xb88>
   148d8:	orr	r5, r5, r0
   148dc:	mov	r0, r6
   148e0:	str	r4, [sp]
   148e4:	str	r4, [sp, #4]
   148e8:	str	r3, [sp, #8]
   148ec:	mov	r3, r4
   148f0:	bl	1f708 <test_json@@Base>
   148f4:	movw	r3, #577	; 0x241
   148f8:	mov	r2, r7
   148fc:	ldr	r1, [pc, #2232]	; 151bc <main@@Base+0xb8c>
   14900:	orr	r5, r5, r0
   14904:	mov	r0, r6
   14908:	str	r4, [sp]
   1490c:	str	r4, [sp, #4]
   14910:	str	r3, [sp, #8]
   14914:	mov	r3, r4
   14918:	bl	1f708 <test_json@@Base>
   1491c:	ldr	fp, [pc, #2204]	; 151c0 <main@@Base+0xb90>
   14920:	movw	r3, #581	; 0x245
   14924:	mov	r2, r7
   14928:	orr	r5, r5, r0
   1492c:	mov	r0, r6
   14930:	str	r4, [sp]
   14934:	ldr	r1, [pc, #2184]	; 151c4 <main@@Base+0xb94>
   14938:	str	r4, [sp, #4]
   1493c:	str	r3, [sp, #8]
   14940:	mov	r3, r4
   14944:	bl	1f708 <test_json@@Base>
   14948:	movw	r3, #585	; 0x249
   1494c:	mov	r2, fp
   14950:	ldr	r1, [pc, #2160]	; 151c8 <main@@Base+0xb98>
   14954:	orr	r5, r5, r0
   14958:	mov	r0, r6
   1495c:	str	r4, [sp]
   14960:	str	r4, [sp, #4]
   14964:	str	r3, [sp, #8]
   14968:	mov	r3, r4
   1496c:	bl	1f708 <test_json@@Base>
   14970:	movw	r3, #591	; 0x24f
   14974:	mov	r2, fp
   14978:	ldr	r1, [pc, #2124]	; 151cc <main@@Base+0xb9c>
   1497c:	orr	r5, r5, r0
   14980:	mov	r0, r6
   14984:	str	r4, [sp]
   14988:	str	r4, [sp, #4]
   1498c:	str	r3, [sp, #8]
   14990:	mov	r3, r4
   14994:	bl	1f708 <test_json@@Base>
   14998:	movw	r3, #594	; 0x252
   1499c:	mov	r2, fp
   149a0:	ldr	r1, [pc, #2088]	; 151d0 <main@@Base+0xba0>
   149a4:	orr	r5, r5, r0
   149a8:	mov	r0, r6
   149ac:	str	r4, [sp]
   149b0:	str	r4, [sp, #4]
   149b4:	str	r3, [sp, #8]
   149b8:	mov	r3, r4
   149bc:	bl	1f708 <test_json@@Base>
   149c0:	movw	r3, #597	; 0x255
   149c4:	mov	r2, r9
   149c8:	ldr	r1, [pc, #2052]	; 151d4 <main@@Base+0xba4>
   149cc:	orr	r5, r5, r0
   149d0:	mov	r0, r6
   149d4:	str	r4, [sp]
   149d8:	str	r4, [sp, #4]
   149dc:	str	r3, [sp, #8]
   149e0:	mov	r3, r4
   149e4:	bl	1f708 <test_json@@Base>
   149e8:	movw	r3, #601	; 0x259
   149ec:	mov	r2, r8
   149f0:	ldr	r1, [pc, #2016]	; 151d8 <main@@Base+0xba8>
   149f4:	orr	r5, r5, r0
   149f8:	mov	r0, r6
   149fc:	str	r4, [sp]
   14a00:	str	r4, [sp, #4]
   14a04:	str	r3, [sp, #8]
   14a08:	mov	r3, r4
   14a0c:	bl	1f708 <test_json@@Base>
   14a10:	mov	r3, #604	; 0x25c
   14a14:	mov	r2, sl
   14a18:	ldr	r1, [pc, #1980]	; 151dc <main@@Base+0xbac>
   14a1c:	orr	r5, r5, r0
   14a20:	mov	r0, r6
   14a24:	str	r4, [sp]
   14a28:	str	r4, [sp, #4]
   14a2c:	str	r3, [sp, #8]
   14a30:	mov	r3, r4
   14a34:	bl	1f708 <test_json@@Base>
   14a38:	movw	r3, #607	; 0x25f
   14a3c:	orr	r5, r5, r0
   14a40:	ldr	r2, [pc, #1944]	; 151e0 <main@@Base+0xbb0>
   14a44:	mov	r0, r6
   14a48:	str	r4, [sp]
   14a4c:	ldr	r1, [pc, #1936]	; 151e4 <main@@Base+0xbb4>
   14a50:	str	r4, [sp, #4]
   14a54:	str	r3, [sp, #8]
   14a58:	mov	r3, r4
   14a5c:	bl	1f708 <test_json@@Base>
   14a60:	movw	r3, #610	; 0x262
   14a64:	mov	r2, r9
   14a68:	ldr	r1, [pc, #1912]	; 151e8 <main@@Base+0xbb8>
   14a6c:	orr	r5, r5, r0
   14a70:	mov	r0, r6
   14a74:	str	r4, [sp]
   14a78:	str	r4, [sp, #4]
   14a7c:	str	r3, [sp, #8]
   14a80:	mov	r3, r4
   14a84:	bl	1f708 <test_json@@Base>
   14a88:	movw	r3, #613	; 0x265
   14a8c:	orr	r5, r5, r0
   14a90:	ldr	r2, [pc, #1876]	; 151ec <main@@Base+0xbbc>
   14a94:	mov	r0, r6
   14a98:	str	r4, [sp]
   14a9c:	ldr	r1, [pc, #1868]	; 151f0 <main@@Base+0xbc0>
   14aa0:	str	r4, [sp, #4]
   14aa4:	str	r3, [sp, #8]
   14aa8:	mov	r3, r4
   14aac:	bl	1f708 <test_json@@Base>
   14ab0:	mov	r3, #616	; 0x268
   14ab4:	orr	r5, r5, r0
   14ab8:	ldr	r2, [pc, #1844]	; 151f4 <main@@Base+0xbc4>
   14abc:	mov	r0, r6
   14ac0:	str	r4, [sp]
   14ac4:	ldr	r1, [pc, #1836]	; 151f8 <main@@Base+0xbc8>
   14ac8:	str	r4, [sp, #4]
   14acc:	str	r3, [sp, #8]
   14ad0:	mov	r3, r4
   14ad4:	bl	1f708 <test_json@@Base>
   14ad8:	movw	r3, #619	; 0x26b
   14adc:	orr	r5, r5, r0
   14ae0:	ldr	r2, [pc, #1812]	; 151fc <main@@Base+0xbcc>
   14ae4:	mov	r0, r6
   14ae8:	str	r4, [sp]
   14aec:	ldr	r1, [pc, #1804]	; 15200 <main@@Base+0xbd0>
   14af0:	str	r4, [sp, #4]
   14af4:	str	r3, [sp, #8]
   14af8:	mov	r3, r4
   14afc:	bl	1f708 <test_json@@Base>
   14b00:	movw	r3, #622	; 0x26e
   14b04:	mov	r2, r8
   14b08:	ldr	r1, [pc, #1780]	; 15204 <main@@Base+0xbd4>
   14b0c:	orr	r5, r5, r0
   14b10:	mov	r0, r6
   14b14:	str	r4, [sp]
   14b18:	str	r4, [sp, #4]
   14b1c:	str	r3, [sp, #8]
   14b20:	mov	r3, r4
   14b24:	bl	1f708 <test_json@@Base>
   14b28:	ldr	fp, [pc, #1752]	; 15208 <main@@Base+0xbd8>
   14b2c:	movw	r3, #625	; 0x271
   14b30:	mov	r2, r8
   14b34:	orr	r5, r5, r0
   14b38:	mov	r0, r6
   14b3c:	str	r4, [sp]
   14b40:	ldr	r1, [pc, #1732]	; 1520c <main@@Base+0xbdc>
   14b44:	str	r4, [sp, #4]
   14b48:	str	r3, [sp, #8]
   14b4c:	mov	r3, r4
   14b50:	bl	1f708 <test_json@@Base>
   14b54:	mov	r3, #628	; 0x274
   14b58:	mov	r1, fp
   14b5c:	ldr	r2, [pc, #1708]	; 15210 <main@@Base+0xbe0>
   14b60:	orr	r5, r5, r0
   14b64:	mov	r0, r6
   14b68:	str	r4, [sp]
   14b6c:	str	r4, [sp, #4]
   14b70:	str	r3, [sp, #8]
   14b74:	mov	r3, r4
   14b78:	bl	1f708 <test_json@@Base>
   14b7c:	movw	r3, #631	; 0x277
   14b80:	mov	r1, fp
   14b84:	ldr	r2, [pc, #1668]	; 15210 <main@@Base+0xbe0>
   14b88:	orr	r5, r5, r0
   14b8c:	mov	r0, r6
   14b90:	str	r4, [sp]
   14b94:	str	r4, [sp, #4]
   14b98:	str	r3, [sp, #8]
   14b9c:	mov	r3, r4
   14ba0:	bl	1f708 <test_json@@Base>
   14ba4:	movw	r3, #634	; 0x27a
   14ba8:	orr	r5, r5, r0
   14bac:	ldr	r2, [pc, #1632]	; 15214 <main@@Base+0xbe4>
   14bb0:	mov	r0, r6
   14bb4:	str	r4, [sp]
   14bb8:	ldr	r1, [pc, #1624]	; 15218 <main@@Base+0xbe8>
   14bbc:	str	r4, [sp, #4]
   14bc0:	str	r3, [sp, #8]
   14bc4:	mov	r3, r4
   14bc8:	bl	1f708 <test_json@@Base>
   14bcc:	ldr	fp, [pc, #1608]	; 1521c <main@@Base+0xbec>
   14bd0:	movw	r3, #638	; 0x27e
   14bd4:	orr	r5, r5, r0
   14bd8:	mov	r0, r6
   14bdc:	str	r4, [sp]
   14be0:	ldr	r2, [pc, #1592]	; 15220 <main@@Base+0xbf0>
   14be4:	str	r4, [sp, #4]
   14be8:	ldr	r1, [pc, #1588]	; 15224 <main@@Base+0xbf4>
   14bec:	str	r3, [sp, #8]
   14bf0:	mov	r3, r4
   14bf4:	bl	1f708 <test_json@@Base>
   14bf8:	movw	r3, #642	; 0x282
   14bfc:	mov	r2, fp
   14c00:	ldr	r1, [pc, #1568]	; 15228 <main@@Base+0xbf8>
   14c04:	orr	r5, r5, r0
   14c08:	mov	r0, r6
   14c0c:	str	r4, [sp]
   14c10:	str	r4, [sp, #4]
   14c14:	str	r3, [sp, #8]
   14c18:	mov	r3, r4
   14c1c:	bl	1f708 <test_json@@Base>
   14c20:	movw	r3, #646	; 0x286
   14c24:	mov	r2, r7
   14c28:	ldr	r1, [pc, #1532]	; 1522c <main@@Base+0xbfc>
   14c2c:	orr	r5, r5, r0
   14c30:	mov	r0, r6
   14c34:	str	r4, [sp]
   14c38:	str	r4, [sp, #4]
   14c3c:	str	r3, [sp, #8]
   14c40:	mov	r3, r4
   14c44:	bl	1f708 <test_json@@Base>
   14c48:	movw	r3, #649	; 0x289
   14c4c:	mov	r2, r7
   14c50:	ldr	r1, [pc, #1496]	; 15230 <main@@Base+0xc00>
   14c54:	orr	r5, r5, r0
   14c58:	mov	r0, r6
   14c5c:	str	r4, [sp]
   14c60:	str	r4, [sp, #4]
   14c64:	str	r3, [sp, #8]
   14c68:	mov	r3, r4
   14c6c:	bl	1f708 <test_json@@Base>
   14c70:	movw	r3, #653	; 0x28d
   14c74:	mov	r2, r8
   14c78:	ldr	r1, [pc, #1460]	; 15234 <main@@Base+0xc04>
   14c7c:	orr	r5, r5, r0
   14c80:	mov	r0, r6
   14c84:	str	r4, [sp]
   14c88:	str	r4, [sp, #4]
   14c8c:	str	r3, [sp, #8]
   14c90:	mov	r3, r4
   14c94:	bl	1f708 <test_json@@Base>
   14c98:	mov	r3, #656	; 0x290
   14c9c:	mov	r2, sl
   14ca0:	ldr	r1, [pc, #1424]	; 15238 <main@@Base+0xc08>
   14ca4:	orr	r5, r5, r0
   14ca8:	mov	r0, r6
   14cac:	str	r4, [sp]
   14cb0:	str	r4, [sp, #4]
   14cb4:	str	r3, [sp, #8]
   14cb8:	mov	r3, r4
   14cbc:	bl	1f708 <test_json@@Base>
   14cc0:	movw	r3, #659	; 0x293
   14cc4:	orr	r5, r5, r0
   14cc8:	ldr	r2, [pc, #1296]	; 151e0 <main@@Base+0xbb0>
   14ccc:	mov	r0, r6
   14cd0:	str	r4, [sp]
   14cd4:	ldr	r1, [pc, #1376]	; 1523c <main@@Base+0xc0c>
   14cd8:	str	r4, [sp, #4]
   14cdc:	str	r3, [sp, #8]
   14ce0:	mov	r3, r4
   14ce4:	bl	1f708 <test_json@@Base>
   14ce8:	movw	r3, #662	; 0x296
   14cec:	mov	r2, r9
   14cf0:	ldr	r1, [pc, #1352]	; 15240 <main@@Base+0xc10>
   14cf4:	orr	r5, r5, r0
   14cf8:	mov	r0, r6
   14cfc:	str	r4, [sp]
   14d00:	str	r4, [sp, #4]
   14d04:	str	r3, [sp, #8]
   14d08:	mov	r3, r4
   14d0c:	bl	1f708 <test_json@@Base>
   14d10:	movw	r3, #665	; 0x299
   14d14:	orr	r5, r5, r0
   14d18:	ldr	r2, [pc, #1228]	; 151ec <main@@Base+0xbbc>
   14d1c:	mov	r0, r6
   14d20:	str	r4, [sp]
   14d24:	ldr	r1, [pc, #1304]	; 15244 <main@@Base+0xc14>
   14d28:	str	r4, [sp, #4]
   14d2c:	str	r3, [sp, #8]
   14d30:	mov	r3, r4
   14d34:	bl	1f708 <test_json@@Base>
   14d38:	mov	r3, #668	; 0x29c
   14d3c:	orr	r5, r5, r0
   14d40:	ldr	r2, [pc, #1196]	; 151f4 <main@@Base+0xbc4>
   14d44:	mov	r0, r6
   14d48:	str	r4, [sp]
   14d4c:	ldr	r1, [pc, #1268]	; 15248 <main@@Base+0xc18>
   14d50:	str	r4, [sp, #4]
   14d54:	str	r3, [sp, #8]
   14d58:	mov	r3, r4
   14d5c:	bl	1f708 <test_json@@Base>
   14d60:	movw	r3, #671	; 0x29f
   14d64:	orr	r5, r5, r0
   14d68:	ldr	r2, [pc, #1164]	; 151fc <main@@Base+0xbcc>
   14d6c:	mov	r0, r6
   14d70:	str	r4, [sp]
   14d74:	ldr	r1, [pc, #1232]	; 1524c <main@@Base+0xc1c>
   14d78:	str	r4, [sp, #4]
   14d7c:	str	r3, [sp, #8]
   14d80:	mov	r3, r4
   14d84:	bl	1f708 <test_json@@Base>
   14d88:	movw	r3, #674	; 0x2a2
   14d8c:	mov	r2, r8
   14d90:	ldr	r1, [pc, #1208]	; 15250 <main@@Base+0xc20>
   14d94:	orr	r5, r5, r0
   14d98:	mov	r0, r6
   14d9c:	str	r4, [sp]
   14da0:	str	r4, [sp, #4]
   14da4:	str	r3, [sp, #8]
   14da8:	mov	r3, r4
   14dac:	bl	1f708 <test_json@@Base>
   14db0:	mov	r2, r8
   14db4:	movw	r3, #677	; 0x2a5
   14db8:	ldr	r8, [pc, #1172]	; 15254 <main@@Base+0xc24>
   14dbc:	orr	r5, r5, r0
   14dc0:	mov	r0, r6
   14dc4:	str	r4, [sp]
   14dc8:	ldr	r1, [pc, #1160]	; 15258 <main@@Base+0xc28>
   14dcc:	str	r4, [sp, #4]
   14dd0:	str	r3, [sp, #8]
   14dd4:	mov	r3, r4
   14dd8:	bl	1f708 <test_json@@Base>
   14ddc:	mov	r3, #680	; 0x2a8
   14de0:	mov	r1, r8
   14de4:	ldr	r2, [pc, #1060]	; 15210 <main@@Base+0xbe0>
   14de8:	orr	r5, r5, r0
   14dec:	mov	r0, r6
   14df0:	str	r4, [sp]
   14df4:	str	r4, [sp, #4]
   14df8:	str	r3, [sp, #8]
   14dfc:	mov	r3, r4
   14e00:	bl	1f708 <test_json@@Base>
   14e04:	movw	r3, #683	; 0x2ab
   14e08:	mov	r1, r8
   14e0c:	ldr	r2, [pc, #1020]	; 15210 <main@@Base+0xbe0>
   14e10:	orr	r5, r5, r0
   14e14:	mov	r0, r6
   14e18:	str	r4, [sp]
   14e1c:	str	r4, [sp, #4]
   14e20:	str	r3, [sp, #8]
   14e24:	mov	r3, r4
   14e28:	bl	1f708 <test_json@@Base>
   14e2c:	movw	r3, #686	; 0x2ae
   14e30:	orr	r5, r5, r0
   14e34:	ldr	r2, [pc, #984]	; 15214 <main@@Base+0xbe4>
   14e38:	mov	r0, r6
   14e3c:	str	r4, [sp]
   14e40:	ldr	r1, [pc, #1044]	; 1525c <main@@Base+0xc2c>
   14e44:	str	r4, [sp, #4]
   14e48:	str	r3, [sp, #8]
   14e4c:	mov	r3, r4
   14e50:	bl	1f708 <test_json@@Base>
   14e54:	movw	r3, #690	; 0x2b2
   14e58:	orr	r5, r5, r0
   14e5c:	ldr	r2, [pc, #956]	; 15220 <main@@Base+0xbf0>
   14e60:	mov	r0, r6
   14e64:	str	r4, [sp]
   14e68:	ldr	r1, [pc, #1008]	; 15260 <main@@Base+0xc30>
   14e6c:	str	r4, [sp, #4]
   14e70:	str	r3, [sp, #8]
   14e74:	mov	r3, r4
   14e78:	bl	1f708 <test_json@@Base>
   14e7c:	movw	r3, #694	; 0x2b6
   14e80:	mov	r2, fp
   14e84:	ldr	r1, [pc, #984]	; 15264 <main@@Base+0xc34>
   14e88:	orr	r5, r5, r0
   14e8c:	mov	r0, r6
   14e90:	str	r4, [sp]
   14e94:	str	r4, [sp, #4]
   14e98:	str	r3, [sp, #8]
   14e9c:	mov	r3, r4
   14ea0:	bl	1f708 <test_json@@Base>
   14ea4:	movw	r3, #698	; 0x2ba
   14ea8:	mov	r2, r7
   14eac:	ldr	r1, [pc, #948]	; 15268 <main@@Base+0xc38>
   14eb0:	orr	r5, r5, r0
   14eb4:	mov	r0, r6
   14eb8:	str	r4, [sp]
   14ebc:	str	r4, [sp, #4]
   14ec0:	str	r3, [sp, #8]
   14ec4:	mov	r3, r4
   14ec8:	bl	1f708 <test_json@@Base>
   14ecc:	ldr	r8, [pc, #920]	; 1526c <main@@Base+0xc3c>
   14ed0:	movw	r3, #701	; 0x2bd
   14ed4:	mov	r2, r7
   14ed8:	orr	r5, r5, r0
   14edc:	mov	r0, r6
   14ee0:	str	r4, [sp]
   14ee4:	ldr	r1, [pc, #900]	; 15270 <main@@Base+0xc40>
   14ee8:	str	r4, [sp, #4]
   14eec:	str	r3, [sp, #8]
   14ef0:	mov	r3, r4
   14ef4:	bl	1f708 <test_json@@Base>
   14ef8:	movw	r3, #711	; 0x2c7
   14efc:	mov	r2, r8
   14f00:	ldr	r1, [pc, #876]	; 15274 <main@@Base+0xc44>
   14f04:	orr	r5, r5, r0
   14f08:	mov	r0, r6
   14f0c:	str	r4, [sp]
   14f10:	str	r4, [sp, #4]
   14f14:	str	r3, [sp, #8]
   14f18:	mov	r3, r4
   14f1c:	bl	1f708 <test_json@@Base>
   14f20:	mov	r3, #716	; 0x2cc
   14f24:	mov	r2, r8
   14f28:	ldr	r1, [pc, #840]	; 15278 <main@@Base+0xc48>
   14f2c:	orr	r5, r5, r0
   14f30:	mov	r0, r6
   14f34:	str	r4, [sp]
   14f38:	str	r4, [sp, #4]
   14f3c:	str	r3, [sp, #8]
   14f40:	mov	r3, r4
   14f44:	bl	1f708 <test_json@@Base>
   14f48:	movw	r3, #731	; 0x2db
   14f4c:	orr	r5, r5, r0
   14f50:	ldr	r2, [pc, #804]	; 1527c <main@@Base+0xc4c>
   14f54:	mov	r0, r6
   14f58:	str	r4, [sp]
   14f5c:	ldr	r1, [pc, #796]	; 15280 <main@@Base+0xc50>
   14f60:	str	r4, [sp, #4]
   14f64:	str	r3, [sp, #8]
   14f68:	mov	r3, r4
   14f6c:	bl	1f708 <test_json@@Base>
   14f70:	ldr	r8, [pc, #780]	; 15284 <main@@Base+0xc54>
   14f74:	movw	r3, #734	; 0x2de
   14f78:	orr	r5, r5, r0
   14f7c:	mov	r0, r6
   14f80:	str	r4, [sp]
   14f84:	ldr	r2, [pc, #764]	; 15288 <main@@Base+0xc58>
   14f88:	str	r4, [sp, #4]
   14f8c:	ldr	r1, [pc, #760]	; 1528c <main@@Base+0xc5c>
   14f90:	str	r3, [sp, #8]
   14f94:	mov	r3, r4
   14f98:	bl	1f708 <test_json@@Base>
   14f9c:	movw	r3, #738	; 0x2e2
   14fa0:	mov	r2, r8
   14fa4:	ldr	r1, [pc, #740]	; 15290 <main@@Base+0xc60>
   14fa8:	orr	r5, r5, r0
   14fac:	mov	r0, r6
   14fb0:	str	r4, [sp]
   14fb4:	str	r4, [sp, #4]
   14fb8:	str	r3, [sp, #8]
   14fbc:	mov	r3, r4
   14fc0:	bl	1f708 <test_json@@Base>
   14fc4:	movw	r3, #750	; 0x2ee
   14fc8:	mov	r2, r8
   14fcc:	ldr	r1, [pc, #704]	; 15294 <main@@Base+0xc64>
   14fd0:	orr	r5, r5, r0
   14fd4:	mov	r0, r6
   14fd8:	str	r4, [sp]
   14fdc:	str	r4, [sp, #4]
   14fe0:	str	r3, [sp, #8]
   14fe4:	mov	r3, r4
   14fe8:	bl	1f708 <test_json@@Base>
   14fec:	movw	r3, #766	; 0x2fe
   14ff0:	orr	r5, r5, r0
   14ff4:	ldr	r2, [pc, #668]	; 15298 <main@@Base+0xc68>
   14ff8:	mov	r0, r6
   14ffc:	str	r4, [sp]
   15000:	ldr	r1, [pc, #660]	; 1529c <main@@Base+0xc6c>
   15004:	str	r4, [sp, #4]
   15008:	str	r3, [sp, #8]
   1500c:	mov	r3, r4
   15010:	bl	1f708 <test_json@@Base>
   15014:	movw	r3, #770	; 0x302
   15018:	orr	r5, r5, r0
   1501c:	ldr	r2, [pc, #636]	; 152a0 <main@@Base+0xc70>
   15020:	mov	r0, r6
   15024:	str	r4, [sp]
   15028:	ldr	r1, [pc, #628]	; 152a4 <main@@Base+0xc74>
   1502c:	str	r4, [sp, #4]
   15030:	str	r3, [sp, #8]
   15034:	mov	r3, r4
   15038:	bl	1f708 <test_json@@Base>
   1503c:	mov	r3, #776	; 0x308
   15040:	orr	r5, r5, r0
   15044:	ldr	r2, [pc, #604]	; 152a8 <main@@Base+0xc78>
   15048:	mov	r0, r6
   1504c:	str	r4, [sp]
   15050:	ldr	r1, [pc, #596]	; 152ac <main@@Base+0xc7c>
   15054:	str	r4, [sp, #4]
   15058:	str	r3, [sp, #8]
   1505c:	mov	r3, r4
   15060:	bl	1f708 <test_json@@Base>
   15064:	movw	r3, #781	; 0x30d
   15068:	mov	r2, r7
   1506c:	ldr	r1, [pc, #572]	; 152b0 <main@@Base+0xc80>
   15070:	orr	r5, r5, r0
   15074:	mov	r0, r6
   15078:	str	r4, [sp]
   1507c:	str	r4, [sp, #4]
   15080:	str	r3, [sp, #8]
   15084:	mov	r3, r4
   15088:	bl	1f708 <test_json@@Base>
   1508c:	movw	r3, #786	; 0x312
   15090:	orr	r5, r5, r0
   15094:	ldr	r2, [pc, #536]	; 152b4 <main@@Base+0xc84>
   15098:	mov	r0, r6
   1509c:	str	r4, [sp]
   150a0:	ldr	r1, [pc, #528]	; 152b8 <main@@Base+0xc88>
   150a4:	str	r4, [sp, #4]
   150a8:	str	r3, [sp, #8]
   150ac:	mov	r3, r4
   150b0:	bl	1f708 <test_json@@Base>
   150b4:	movw	r3, #791	; 0x317
   150b8:	orr	r5, r5, r0
   150bc:	ldr	r2, [pc, #504]	; 152bc <main@@Base+0xc8c>
   150c0:	mov	r0, r6
   150c4:	str	r4, [sp]
   150c8:	ldr	r1, [pc, #496]	; 152c0 <main@@Base+0xc90>
   150cc:	str	r4, [sp, #4]
   150d0:	str	r3, [sp, #8]
   150d4:	mov	r3, r4
   150d8:	bl	1f708 <test_json@@Base>
   150dc:	mov	r3, #796	; 0x31c
   150e0:	orr	r5, r5, r0
   150e4:	ldr	r2, [pc, #472]	; 152c4 <main@@Base+0xc94>
   150e8:	mov	r0, r6
   150ec:	str	r4, [sp]
   150f0:	ldr	r1, [pc, #464]	; 152c8 <main@@Base+0xc98>
   150f4:	str	r4, [sp, #4]
   150f8:	str	r3, [sp, #8]
   150fc:	mov	r3, r4
   15100:	bl	1f708 <test_json@@Base>
   15104:	movw	r3, #801	; 0x321
   15108:	orr	r5, r5, r0
   1510c:	ldr	r2, [pc, #440]	; 152cc <main@@Base+0xc9c>
   15110:	mov	r0, r6
   15114:	str	r4, [sp]
   15118:	ldr	r1, [pc, #432]	; 152d0 <main@@Base+0xca0>
   1511c:	str	r4, [sp, #4]
   15120:	str	r3, [sp, #8]
   15124:	mov	r3, r4
   15128:	bl	1f708 <test_json@@Base>
   1512c:	movw	r3, #806	; 0x326
   15130:	orr	r5, r5, r0
   15134:	ldr	r2, [pc, #408]	; 152d4 <main@@Base+0xca4>
   15138:	mov	r0, r6
   1513c:	str	r4, [sp]
   15140:	ldr	r1, [pc, #400]	; 152d8 <main@@Base+0xca8>
   15144:	str	r4, [sp, #4]
   15148:	str	r3, [sp, #8]
   1514c:	mov	r3, r4
   15150:	bl	1f708 <test_json@@Base>
   15154:	orrs	r3, r5, r0
   15158:	mvnne	r0, #0
   1515c:	moveq	r0, r4
   15160:	add	sp, sp, #20
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	andeq	lr, r2, r4, lsl r9
   1516c:	andeq	lr, r2, lr, lsl #30
   15170:	andeq	r1, r3, r0, ror r0
   15174:	strheq	r1, [r3], -r8
   15178:	andeq	r1, r3, r9, asr r0
   1517c:	muleq	r3, r1, r0
   15180:	andeq	r1, r3, r3, lsl #2
   15184:	ldrdeq	r1, [r3], -fp
   15188:	andeq	r1, r3, pc, lsr #2
   1518c:	andeq	r1, r3, r0, ror #2
   15190:	muleq	r3, sl, r1
   15194:	andeq	r1, r3, r0, asr #3
   15198:	andeq	r1, r3, r9, ror #3
   1519c:	andeq	lr, r2, r9, lsr #29
   151a0:	andeq	r1, r3, r0, lsl r2
   151a4:	andeq	r1, r3, r5, lsr #4
   151a8:	andeq	r1, r3, r8, asr #4
   151ac:	andeq	r1, r3, ip, ror #4
   151b0:	muleq	r3, r9, r2
   151b4:	andeq	r1, r3, pc, asr #5
   151b8:	andeq	r1, r3, pc, ror #5
   151bc:	andeq	r1, r3, r1, lsl r3
   151c0:	andeq	r1, r3, r2, lsr r3
   151c4:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   151c8:	andeq	r1, r3, r9, asr r3
   151cc:	andeq	r1, r3, pc, ror r3
   151d0:	andeq	r1, r3, r4, lsr #7
   151d4:	andeq	r1, r3, r9, asr #7
   151d8:	strdeq	r1, [r3], -r7
   151dc:	andeq	r1, r3, r8, lsl r4
   151e0:	andeq	r1, r3, r9, lsr r4
   151e4:	andeq	r1, r3, pc, asr r4
   151e8:	andeq	r1, r3, r0, lsl #9
   151ec:	andeq	r1, r3, r2, lsr #9
   151f0:	andeq	r1, r3, r0, asr #9
   151f4:	andeq	r1, r3, r2, ror #9
   151f8:	andeq	r1, r3, r0, lsl #10
   151fc:	andeq	r1, r3, r2, lsr #10
   15200:	andeq	r1, r3, pc, lsr r5
   15204:	andeq	r1, r3, r0, ror #10
   15208:	ldrdeq	r1, [r3], -pc	; <UNPREDICTABLE>
   1520c:	andeq	r1, r3, fp, lsl #11
   15210:	andeq	r1, r3, r5, asr #11
   15214:	andeq	r1, r3, r9, lsl #12
   15218:	andeq	r1, r3, r0, asr r6
   1521c:	andeq	r1, r3, r0, asr #14
   15220:	andeq	r1, r3, r1, lsr #13
   15224:	andeq	r1, r3, fp, ror #13
   15228:	andeq	r1, r3, r2, lsr #15
   1522c:	andeq	r1, r3, r1, lsl r8
   15230:	andeq	r1, r3, ip, lsr r8
   15234:	andeq	r1, r3, r2, ror #16
   15238:	andeq	r1, r3, pc, ror r8
   1523c:	muleq	r3, ip, r8
   15240:			; <UNDEFINED> instruction: 0x000318b9
   15244:	ldrdeq	r1, [r3], -r7
   15248:	strdeq	r1, [r3], -r5
   1524c:	andeq	r1, r3, r3, lsl r9
   15250:	andeq	r1, r3, r0, lsr r9
   15254:	andeq	r1, r3, r9, lsl #19
   15258:	andeq	r1, r3, r5, asr r9
   1525c:	andeq	r1, r3, sp, lsr #19
   15260:	strdeq	r1, [r3], -r4
   15264:	andeq	r1, r3, pc, lsr sl
   15268:	muleq	r3, lr, sl
   1526c:	andeq	r1, r3, r5, ror #21
   15270:	andeq	r1, r3, r3, asr #21
   15274:	andeq	r1, r3, r3, asr #22
   15278:	andeq	r1, r3, r0, lsr #23
   1527c:	andeq	r1, r3, sp, lsl #24
   15280:	andeq	r1, r3, sp, lsr ip
   15284:	andeq	r1, r3, r6, lsr #25
   15288:	andeq	r1, r3, sl, ror ip
   1528c:	andeq	r1, r3, ip, lsl #25
   15290:	andeq	r1, r3, r7, ror #25
   15294:	andeq	r1, r3, pc, lsr #26
   15298:	andeq	r1, r3, ip, asr #27
   1529c:	andeq	r1, r3, lr, ror #27
   152a0:	andeq	r1, r3, r5, lsl lr
   152a4:	andeq	r1, r3, pc, lsr lr
   152a8:	andeq	r1, r3, lr, ror #28
   152ac:	ldrdeq	r1, [r3], -lr
   152b0:	andeq	r1, r3, r9, asr pc
   152b4:	ldrdeq	r1, [r3], -r1	; <UNPREDICTABLE>
   152b8:	andeq	r2, r3, r0, asr #32
   152bc:	strheq	r2, [r3], -sl
   152c0:	andeq	r2, r3, r8, lsr r1
   152c4:	andeq	r2, r3, r3, asr #3
   152c8:	andeq	r2, r3, r3, lsr r2
   152cc:	andeq	r2, r3, lr, lsr #5
   152d0:	andeq	r2, r3, sp, lsr #6
   152d4:			; <UNDEFINED> instruction: 0x000323b7
   152d8:	andeq	r2, r3, fp, lsr r4

000152dc <_start@@Base>:
   152dc:	mov	fp, #0
   152e0:	mov	lr, #0
   152e4:	pop	{r1}		; (ldr r1, [sp], #4)
   152e8:	mov	r2, sp
   152ec:	push	{r2}		; (str r2, [sp, #-4]!)
   152f0:	push	{r0}		; (str r0, [sp, #-4]!)
   152f4:	ldr	ip, [pc, #16]	; 1530c <_start@@Base+0x30>
   152f8:	push	{ip}		; (str ip, [sp, #-4]!)
   152fc:	ldr	r0, [pc, #12]	; 15310 <_start@@Base+0x34>
   15300:	ldr	r3, [pc, #12]	; 15314 <_start@@Base+0x38>
   15304:	bl	14584 <__libc_start_main@plt>
   15308:	bl	14614 <abort@plt>
   1530c:	andeq	lr, r2, r0, lsl #18
   15310:	andeq	r4, r1, r0, lsr r6
   15314:	andeq	lr, r2, r0, lsr #17
   15318:	ldr	r3, [pc, #20]	; 15334 <_start@@Base+0x58>
   1531c:	ldr	r2, [pc, #20]	; 15338 <_start@@Base+0x5c>
   15320:	add	r3, pc, r3
   15324:	ldr	r2, [r3, r2]
   15328:	cmp	r2, #0
   1532c:	bxeq	lr
   15330:	b	14590 <__gmon_start__@plt>
   15334:	ldrdeq	pc, [r2], -r8
   15338:	andeq	r0, r0, r8, rrx
   1533c:	ldr	r0, [pc, #24]	; 1535c <_start@@Base+0x80>
   15340:	ldr	r3, [pc, #24]	; 15360 <_start@@Base+0x84>
   15344:	cmp	r3, r0
   15348:	bxeq	lr
   1534c:	ldr	r3, [pc, #16]	; 15364 <_start@@Base+0x88>
   15350:	cmp	r3, #0
   15354:	bxeq	lr
   15358:	bx	r3
   1535c:			; <UNDEFINED> instruction: 0x000453b8
   15360:			; <UNDEFINED> instruction: 0x000453b8
   15364:	andeq	r0, r0, r0
   15368:	ldr	r0, [pc, #36]	; 15394 <_start@@Base+0xb8>
   1536c:	ldr	r1, [pc, #36]	; 15398 <_start@@Base+0xbc>
   15370:	sub	r1, r1, r0
   15374:	asr	r1, r1, #2
   15378:	add	r1, r1, r1, lsr #31
   1537c:	asrs	r1, r1, #1
   15380:	bxeq	lr
   15384:	ldr	r3, [pc, #16]	; 1539c <_start@@Base+0xc0>
   15388:	cmp	r3, #0
   1538c:	bxeq	lr
   15390:	bx	r3
   15394:			; <UNDEFINED> instruction: 0x000453b8
   15398:			; <UNDEFINED> instruction: 0x000453b8
   1539c:	andeq	r0, r0, r0
   153a0:	push	{r4, lr}
   153a4:	ldr	r4, [pc, #24]	; 153c4 <_start@@Base+0xe8>
   153a8:	ldrb	r3, [r4]
   153ac:	cmp	r3, #0
   153b0:	popne	{r4, pc}
   153b4:	bl	1533c <_start@@Base+0x60>
   153b8:	mov	r3, #1
   153bc:	strb	r3, [r4]
   153c0:	pop	{r4, pc}
   153c4:	andeq	r5, r4, r0, asr #7
   153c8:	b	15368 <_start@@Base+0x8c>
   153cc:	andeq	r0, r0, r0
   153d0:	sub	r1, r1, r0
   153d4:	push	{r4, r5, lr}
   153d8:	cmp	r1, #8
   153dc:	bhi	15410 <_start@@Base+0x134>
   153e0:	sub	r1, r1, #1
   153e4:	cmp	r1, #7
   153e8:	ldrls	pc, [pc, r1, lsl #2]
   153ec:	b	154b0 <_start@@Base+0x1d4>
   153f0:	andeq	r5, r1, r4, lsr #9
   153f4:	muleq	r1, r8, r4
   153f8:	andeq	r5, r1, ip, lsl #9
   153fc:	andeq	r5, r1, r0, lsl #9
   15400:	andeq	r5, r1, r4, ror r4
   15404:	andeq	r5, r1, r8, ror #8
   15408:	andeq	r5, r1, r0, ror #8
   1540c:	andeq	r5, r1, r0, lsl r4
   15410:	ldrb	r4, [r0, #7]
   15414:	mov	r5, #0
   15418:	ldrb	r2, [r0, #6]
   1541c:	mov	r1, r5
   15420:	orr	r2, r4, r2, lsl #8
   15424:	ldrb	r4, [r0, #5]
   15428:	orr	r2, r2, r4, lsl #16
   1542c:	ldrb	r4, [r0, #4]
   15430:	orr	r2, r2, r4, lsl #24
   15434:	ldrb	r4, [r0, #3]
   15438:	orr	r1, r1, r4
   1543c:	ldrb	r4, [r0, #2]
   15440:	orr	r1, r1, r4, lsl #8
   15444:	ldrb	r4, [r0, #1]
   15448:	orr	r1, r1, r4, lsl #16
   1544c:	ldrb	r4, [r0]
   15450:	mov	r5, #0
   15454:	mov	r0, r2
   15458:	orr	r1, r1, r4, lsl #24
   1545c:	pop	{r4, r5, pc}
   15460:	mov	r4, #0
   15464:	b	15414 <_start@@Base+0x138>
   15468:	mov	r2, #0
   1546c:	mov	r1, r2
   15470:	b	15424 <_start@@Base+0x148>
   15474:	mov	r2, #0
   15478:	mov	r1, r2
   1547c:	b	1542c <_start@@Base+0x150>
   15480:	mov	r2, #0
   15484:	mov	r1, r2
   15488:	b	15434 <_start@@Base+0x158>
   1548c:	mov	r2, #0
   15490:	mov	r1, r2
   15494:	b	1543c <_start@@Base+0x160>
   15498:	mov	r2, #0
   1549c:	mov	r1, r2
   154a0:	b	15444 <_start@@Base+0x168>
   154a4:	mov	r2, #0
   154a8:	mov	r1, r2
   154ac:	b	1544c <_start@@Base+0x170>
   154b0:	mov	r0, #0
   154b4:	mov	r1, r0
   154b8:	pop	{r4, r5, pc}
   154bc:	cmp	r0, #4
   154c0:	movhi	r0, #0
   154c4:	movls	r0, #1
   154c8:	bx	lr
   154cc:	cmp	r0, #11
   154d0:	bhi	154f4 <_start@@Base+0x218>
   154d4:	cmp	r0, #8
   154d8:	bcs	154fc <_start@@Base+0x220>
   154dc:	cmp	r0, #0
   154e0:	beq	154fc <_start@@Base+0x220>
   154e4:	cmp	r0, #2
   154e8:	movne	r0, #0
   154ec:	moveq	r0, #1
   154f0:	bx	lr
   154f4:	cmp	r0, #255	; 0xff
   154f8:	b	154e8 <_start@@Base+0x20c>
   154fc:	mov	r0, #1
   15500:	bx	lr
   15504:	bx	lr
   15508:	mov	r0, #0
   1550c:	bx	lr
   15510:	mov	r3, #4
   15514:	mov	r1, #0
   15518:	mov	r2, r3
   1551c:	b	23b58 <flatcc_verify_field@@Base>
   15520:	ldr	r3, [pc, #108]	; 15594 <_start@@Base+0x2b8>
   15524:	mov	r2, #0
   15528:	push	{r0, r1, r4, r5, r6, lr}
   1552c:	mov	r4, r0
   15530:	mov	r5, r1
   15534:	mov	r6, #22
   15538:	str	r3, [sp, #4]
   1553c:	mov	r3, #21
   15540:	str	r3, [sp]
   15544:	ldr	r3, [pc, #76]	; 15598 <_start@@Base+0x2bc>
   15548:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   1554c:	ldr	r3, [pc, #72]	; 1559c <_start@@Base+0x2c0>
   15550:	mov	r1, r5
   15554:	mov	r0, r4
   15558:	mov	r2, #1
   1555c:	str	r6, [sp]
   15560:	str	r3, [sp, #4]
   15564:	ldr	r3, [pc, #52]	; 155a0 <_start@@Base+0x2c4>
   15568:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   1556c:	ldr	r3, [pc, #48]	; 155a4 <_start@@Base+0x2c8>
   15570:	mov	r2, #2
   15574:	mov	r1, r5
   15578:	mov	r0, r4
   1557c:	str	r6, [sp]
   15580:	str	r3, [sp, #4]
   15584:	ldr	r3, [pc, #28]	; 155a8 <_start@@Base+0x2cc>
   15588:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   1558c:	add	sp, sp, #8
   15590:	pop	{r4, r5, r6, pc}
   15594:	muleq	r1, r4, r6
   15598:	andeq	lr, r2, r4, asr #18
   1559c:	andeq	r5, r1, r4, lsr r6
   155a0:	andeq	lr, r2, sl, asr r9
   155a4:	ldrdeq	r5, [r1], -r4
   155a8:	andeq	lr, r2, r1, ror r9
   155ac:	mov	r3, #19
   155b0:	push	{r0, r1, r2, lr}
   155b4:	mov	r2, #0
   155b8:	str	r3, [sp]
   155bc:	ldr	r3, [pc, #12]	; 155d0 <_start@@Base+0x2f4>
   155c0:	str	r2, [sp, #4]
   155c4:	bl	29aec <flatcc_json_printer_int32_field@@Base>
   155c8:	add	sp, sp, #12
   155cc:	pop	{pc}		; (ldr pc, [sp], #4)
   155d0:	andeq	lr, r2, r8, lsl #19
   155d4:	push	{r4, r5, lr}
   155d8:	mov	r2, #0
   155dc:	sub	sp, sp, #20
   155e0:	mov	r3, #0
   155e4:	mov	r4, r0
   155e8:	mov	r5, r1
   155ec:	strd	r2, [sp, #8]
   155f0:	mov	r3, #15
   155f4:	str	r3, [sp]
   155f8:	ldr	r3, [pc, #44]	; 1562c <_start@@Base+0x350>
   155fc:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   15600:	mov	r3, #0
   15604:	mov	r2, #1
   15608:	mov	r1, r5
   1560c:	mov	r0, r4
   15610:	str	r3, [sp, #4]
   15614:	mov	r3, #21
   15618:	str	r3, [sp]
   1561c:	ldr	r3, [pc, #12]	; 15630 <_start@@Base+0x354>
   15620:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   15624:	add	sp, sp, #20
   15628:	pop	{r4, r5, pc}
   1562c:	muleq	r2, ip, r9
   15630:	andeq	lr, r2, ip, lsr #19
   15634:	push	{r4, r5, lr}
   15638:	mov	r2, #0
   1563c:	sub	sp, sp, #20
   15640:	mov	r3, #0
   15644:	mov	r4, r0
   15648:	mov	r5, r1
   1564c:	strd	r2, [sp, #8]
   15650:	mov	r3, #15
   15654:	str	r3, [sp]
   15658:	ldr	r3, [pc, #44]	; 1568c <_start@@Base+0x3b0>
   1565c:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   15660:	mov	r3, #0
   15664:	mov	r2, #1
   15668:	mov	r1, r5
   1566c:	mov	r0, r4
   15670:	str	r3, [sp, #4]
   15674:	mov	r3, #16
   15678:	str	r3, [sp]
   1567c:	ldr	r3, [pc, #12]	; 15690 <_start@@Base+0x3b4>
   15680:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   15684:	add	sp, sp, #20
   15688:	pop	{r4, r5, pc}
   1568c:	muleq	r2, ip, r9
   15690:	andeq	lr, r2, r2, asr #19
   15694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15698:	mov	r7, #4
   1569c:	sub	sp, sp, #20
   156a0:	mov	fp, #0
   156a4:	mov	sl, #9
   156a8:	mov	r4, r0
   156ac:	mov	r5, r1
   156b0:	ldr	r3, [pc, #232]	; 157a0 <_start@@Base+0x4c4>
   156b4:	mov	r2, #0
   156b8:	mov	r6, #8
   156bc:	str	r7, [sp]
   156c0:	mov	r8, #0
   156c4:	mov	r9, #0
   156c8:	bl	294e8 <flatcc_json_printer_string_field@@Base>
   156cc:	mov	r1, r5
   156d0:	mov	r0, r4
   156d4:	ldr	r3, [pc, #200]	; 157a4 <_start@@Base+0x4c8>
   156d8:	mov	r2, #1
   156dc:	strd	sl, [sp]
   156e0:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   156e4:	mov	r1, r5
   156e8:	mov	r0, r4
   156ec:	ldr	r3, [pc, #180]	; 157a8 <_start@@Base+0x4cc>
   156f0:	mov	r2, #2
   156f4:	str	r7, [sp]
   156f8:	bl	294e8 <flatcc_json_printer_string_field@@Base>
   156fc:	mov	r1, r5
   15700:	mov	r0, r4
   15704:	ldr	r3, [pc, #160]	; 157ac <_start@@Base+0x4d0>
   15708:	mov	r2, #3
   1570c:	str	r6, [sp]
   15710:	strd	r8, [sp, #8]
   15714:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   15718:	mov	r2, r7
   1571c:	mov	r1, r5
   15720:	ldr	r3, [pc, #136]	; 157b0 <_start@@Base+0x4d4>
   15724:	mov	r0, r4
   15728:	str	r7, [sp]
   1572c:	bl	294e8 <flatcc_json_printer_string_field@@Base>
   15730:	mov	r1, r5
   15734:	mov	r0, r4
   15738:	ldr	r3, [pc, #116]	; 157b4 <_start@@Base+0x4d8>
   1573c:	mov	r2, #5
   15740:	str	r6, [sp]
   15744:	strd	r8, [sp, #8]
   15748:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   1574c:	mov	r1, r5
   15750:	mov	r0, r4
   15754:	ldr	r3, [pc, #92]	; 157b8 <_start@@Base+0x4dc>
   15758:	mov	r2, #6
   1575c:	strd	sl, [sp]
   15760:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   15764:	mov	r1, r5
   15768:	mov	r0, r4
   1576c:	ldr	r3, [pc, #72]	; 157bc <_start@@Base+0x4e0>
   15770:	mov	r2, #7
   15774:	str	r6, [sp]
   15778:	strd	r8, [sp, #8]
   1577c:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   15780:	ldr	r3, [pc, #56]	; 157c0 <_start@@Base+0x4e4>
   15784:	mov	r2, r6
   15788:	mov	r1, r5
   1578c:	mov	r0, r4
   15790:	strd	sl, [sp]
   15794:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   15798:	add	sp, sp, #20
   1579c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a0:	ldrdeq	lr, [r2], -r3
   157a4:	ldrdeq	lr, [r2], -r8
   157a8:	andeq	lr, r2, r2, ror #19
   157ac:	andeq	lr, r2, r7, ror #19
   157b0:	strdeq	lr, [r2], -r0
   157b4:	strdeq	lr, [r2], -r5
   157b8:	strdeq	lr, [r2], -lr	; <UNPREDICTABLE>
   157bc:	andeq	lr, r2, r8, lsl #20
   157c0:	andeq	lr, r2, r1, lsl sl
   157c4:	ldr	r3, [pc, #1080]	; 15c04 <_start@@Base+0x928>
   157c8:	mov	r2, #0
   157cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157d0:	mov	r6, #3
   157d4:	sub	sp, sp, #20
   157d8:	mov	r4, r0
   157dc:	mov	r5, r1
   157e0:	mov	r7, #4
   157e4:	mov	r8, #9
   157e8:	str	r6, [sp]
   157ec:	mov	r9, #5
   157f0:	mov	fp, #8
   157f4:	str	r3, [sp, #4]
   157f8:	ldr	r3, [pc, #1032]	; 15c08 <_start@@Base+0x92c>
   157fc:	bl	2da14 <flatcc_json_printer_struct_field@@Base>
   15800:	mov	r3, #150	; 0x96
   15804:	mov	r1, r5
   15808:	str	r7, [sp]
   1580c:	mov	r0, r4
   15810:	mov	r2, #1
   15814:	ldr	sl, [pc, #1008]	; 15c0c <_start@@Base+0x930>
   15818:	str	r3, [sp, #4]
   1581c:	ldr	r3, [pc, #1004]	; 15c10 <_start@@Base+0x934>
   15820:	bl	29a44 <flatcc_json_printer_int16_field@@Base>
   15824:	mov	r2, #2
   15828:	mov	r3, #100	; 0x64
   1582c:	mov	r1, r5
   15830:	mov	r0, r4
   15834:	strd	r2, [sp]
   15838:	ldr	r3, [pc, #980]	; 15c14 <_start@@Base+0x938>
   1583c:	bl	29a44 <flatcc_json_printer_int16_field@@Base>
   15840:	mov	r2, r6
   15844:	mov	r1, r5
   15848:	ldr	r3, [pc, #968]	; 15c18 <_start@@Base+0x93c>
   1584c:	mov	r0, r4
   15850:	str	r7, [sp]
   15854:	mov	r6, #17
   15858:	bl	294e8 <flatcc_json_printer_string_field@@Base>
   1585c:	mov	r1, r5
   15860:	mov	r0, r4
   15864:	ldr	r3, [pc, #944]	; 15c1c <_start@@Base+0x940>
   15868:	mov	r2, #5
   1586c:	str	r8, [sp]
   15870:	bl	2ae0c <flatcc_json_printer_uint8_vector_field@@Base>
   15874:	ldr	r3, [pc, #932]	; 15c20 <_start@@Base+0x944>
   15878:	mov	r1, r5
   1587c:	mov	r0, r4
   15880:	mov	r2, #6
   15884:	stm	sp, {r9, fp}
   15888:	str	r3, [sp, #8]
   1588c:	ldr	r3, [pc, #912]	; 15c24 <_start@@Base+0x948>
   15890:	bl	2a1a0 <flatcc_json_printer_int8_enum_field@@Base>
   15894:	ldr	r3, [pc, #908]	; 15c28 <_start@@Base+0x94c>
   15898:	mov	r2, fp
   1589c:	mov	r1, r5
   158a0:	mov	r0, r4
   158a4:	str	r7, [sp]
   158a8:	str	r3, [sp, #8]
   158ac:	ldr	r3, [pc, #888]	; 15c2c <_start@@Base+0x950>
   158b0:	str	r3, [sp, #4]
   158b4:	ldr	r3, [pc, #884]	; 15c30 <_start@@Base+0x954>
   158b8:	bl	2d6c4 <flatcc_json_printer_union_field@@Base>
   158bc:	ldr	r3, [pc, #880]	; 15c34 <_start@@Base+0x958>
   158c0:	mov	r2, r8
   158c4:	mov	r1, r5
   158c8:	mov	r0, r4
   158cc:	str	r9, [sp]
   158d0:	str	r7, [sp, #4]
   158d4:	str	r3, [sp, #8]
   158d8:	ldr	r3, [pc, #856]	; 15c38 <_start@@Base+0x95c>
   158dc:	bl	2ce70 <flatcc_json_printer_struct_vector_field@@Base>
   158e0:	mov	r1, r5
   158e4:	mov	r0, r4
   158e8:	ldr	r3, [pc, #844]	; 15c3c <_start@@Base+0x960>
   158ec:	mov	r2, #10
   158f0:	str	r6, [sp]
   158f4:	bl	2d0cc <flatcc_json_printer_string_vector_field@@Base>
   158f8:	mov	r1, r5
   158fc:	mov	r0, r4
   15900:	ldr	r3, [pc, #824]	; 15c40 <_start@@Base+0x964>
   15904:	mov	r2, #11
   15908:	stm	sp, {r6, sl}
   1590c:	bl	2d260 <flatcc_json_printer_table_vector_field@@Base>
   15910:	mov	r1, r5
   15914:	mov	r0, r4
   15918:	ldr	r3, [pc, #804]	; 15c44 <_start@@Base+0x968>
   1591c:	mov	r2, #12
   15920:	stm	sp, {r9, sl}
   15924:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   15928:	mov	r2, #20
   1592c:	mov	r1, r5
   15930:	ldr	r3, [pc, #784]	; 15c48 <_start@@Base+0x96c>
   15934:	mov	r0, r4
   15938:	str	sl, [sp, #8]
   1593c:	mov	sl, #0
   15940:	str	r2, [sp]
   15944:	mov	r2, #13
   15948:	str	sl, [sp, #4]
   1594c:	bl	2dd80 <flatcc_json_printer_table_as_nested_root@@Base>
   15950:	ldr	r3, [pc, #756]	; 15c4c <_start@@Base+0x970>
   15954:	mov	r1, r5
   15958:	mov	r0, r4
   1595c:	mov	r2, #14
   15960:	str	r8, [sp]
   15964:	mov	r8, #16
   15968:	str	r3, [sp, #4]
   1596c:	ldr	r3, [pc, #732]	; 15c50 <_start@@Base+0x974>
   15970:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   15974:	mov	r3, #1
   15978:	mov	r1, r5
   1597c:	str	fp, [sp]
   15980:	mov	r0, r4
   15984:	mov	r2, #15
   15988:	str	r3, [sp, #4]
   1598c:	ldr	r3, [pc, #704]	; 15c54 <_start@@Base+0x978>
   15990:	bl	29c48 <flatcc_json_printer_bool_field@@Base>
   15994:	mov	r2, r8
   15998:	mov	r1, r5
   1599c:	ldr	r3, [pc, #692]	; 15c58 <_start@@Base+0x97c>
   159a0:	mov	r0, r4
   159a4:	stm	sp, {r8, sl}
   159a8:	bl	29aec <flatcc_json_printer_int32_field@@Base>
   159ac:	mov	r2, r6
   159b0:	mov	r1, r5
   159b4:	ldr	r3, [pc, #672]	; 15c5c <_start@@Base+0x980>
   159b8:	mov	r0, r4
   159bc:	stm	sp, {r8, sl}
   159c0:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   159c4:	mov	r2, #0
   159c8:	mov	r3, #0
   159cc:	str	r8, [sp]
   159d0:	mov	r1, r5
   159d4:	mov	r0, r4
   159d8:	strd	r2, [sp, #8]
   159dc:	mov	r2, #18
   159e0:	ldr	r3, [pc, #632]	; 15c60 <_start@@Base+0x984>
   159e4:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   159e8:	mov	r2, #0
   159ec:	mov	r3, #0
   159f0:	str	r8, [sp]
   159f4:	mov	r1, r5
   159f8:	mov	r0, r4
   159fc:	strd	r2, [sp, #8]
   15a00:	mov	r2, #19
   15a04:	ldr	r3, [pc, #600]	; 15c64 <_start@@Base+0x988>
   15a08:	bl	298e8 <flatcc_json_printer_uint64_field@@Base>
   15a0c:	mov	r1, r5
   15a10:	mov	r0, r4
   15a14:	ldr	r3, [pc, #588]	; 15c68 <_start@@Base+0x98c>
   15a18:	mov	r2, #20
   15a1c:	stm	sp, {r6, sl}
   15a20:	bl	29aec <flatcc_json_printer_int32_field@@Base>
   15a24:	mov	r1, r5
   15a28:	mov	r0, r4
   15a2c:	ldr	r3, [pc, #568]	; 15c6c <_start@@Base+0x990>
   15a30:	mov	r2, #21
   15a34:	stm	sp, {r6, sl}
   15a38:	bl	29840 <flatcc_json_printer_uint32_field@@Base>
   15a3c:	mov	r2, #0
   15a40:	mov	r3, #0
   15a44:	str	r6, [sp]
   15a48:	mov	r1, r5
   15a4c:	mov	r0, r4
   15a50:	strd	r2, [sp, #8]
   15a54:	mov	r2, #22
   15a58:	ldr	r3, [pc, #528]	; 15c70 <_start@@Base+0x994>
   15a5c:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   15a60:	mov	r2, #0
   15a64:	mov	r3, #0
   15a68:	str	r6, [sp]
   15a6c:	mov	r1, r5
   15a70:	mov	r0, r4
   15a74:	strd	r2, [sp, #8]
   15a78:	mov	r2, #23
   15a7c:	ldr	r3, [pc, #496]	; 15c74 <_start@@Base+0x998>
   15a80:	bl	298e8 <flatcc_json_printer_uint64_field@@Base>
   15a84:	mov	r1, r5
   15a88:	mov	r0, r4
   15a8c:	ldr	r3, [pc, #484]	; 15c78 <_start@@Base+0x99c>
   15a90:	mov	r2, #24
   15a94:	str	r8, [sp]
   15a98:	mov	r8, #6
   15a9c:	bl	2baf0 <flatcc_json_printer_bool_vector_field@@Base>
   15aa0:	mov	r1, r5
   15aa4:	mov	r0, r4
   15aa8:	vldr	s0, [pc, #328]	; 15bf8 <_start@@Base+0x91c>
   15aac:	mov	r2, #25
   15ab0:	str	r9, [sp]
   15ab4:	ldr	r3, [pc, #448]	; 15c7c <_start@@Base+0x9a0>
   15ab8:	bl	29cf0 <flatcc_json_printer_float_field@@Base>
   15abc:	mov	r1, r5
   15ac0:	mov	r0, r4
   15ac4:	vldr	s0, [pc, #304]	; 15bfc <_start@@Base+0x920>
   15ac8:	mov	r2, #26
   15acc:	str	r8, [sp]
   15ad0:	ldr	r3, [pc, #424]	; 15c80 <_start@@Base+0x9a4>
   15ad4:	bl	29cf0 <flatcc_json_printer_float_field@@Base>
   15ad8:	vldr	s0, [pc, #288]	; 15c00 <_start@@Base+0x924>
   15adc:	mov	r1, r5
   15ae0:	mov	r0, r4
   15ae4:	mov	r2, #27
   15ae8:	str	r8, [sp]
   15aec:	ldr	r3, [pc, #400]	; 15c84 <_start@@Base+0x9a8>
   15af0:	bl	29cf0 <flatcc_json_printer_float_field@@Base>
   15af4:	mov	r3, #18
   15af8:	mov	r1, r5
   15afc:	mov	r0, r4
   15b00:	mov	r2, #28
   15b04:	str	r3, [sp]
   15b08:	ldr	r3, [pc, #376]	; 15c88 <_start@@Base+0x9ac>
   15b0c:	bl	2d0cc <flatcc_json_printer_string_vector_field@@Base>
   15b10:	ldr	r3, [pc, #372]	; 15c8c <_start@@Base+0x9b0>
   15b14:	mov	r1, r5
   15b18:	mov	r0, r4
   15b1c:	mov	r2, #29
   15b20:	str	fp, [sp, #4]
   15b24:	str	r3, [sp, #8]
   15b28:	mov	r3, #23
   15b2c:	str	r3, [sp]
   15b30:	ldr	r3, [pc, #344]	; 15c90 <_start@@Base+0x9b4>
   15b34:	bl	2ce70 <flatcc_json_printer_struct_vector_field@@Base>
   15b38:	mov	r1, r5
   15b3c:	mov	r0, r4
   15b40:	ldr	r3, [pc, #332]	; 15c94 <_start@@Base+0x9b8>
   15b44:	mov	r2, #30
   15b48:	str	r7, [sp]
   15b4c:	bl	2ae0c <flatcc_json_printer_uint8_vector_field@@Base>
   15b50:	ldr	r3, [pc, #220]	; 15c34 <_start@@Base+0x958>
   15b54:	mov	r1, r5
   15b58:	mov	r0, r4
   15b5c:	mov	r2, #31
   15b60:	str	r9, [sp]
   15b64:	str	r7, [sp, #4]
   15b68:	str	r3, [sp, #8]
   15b6c:	ldr	r3, [pc, #292]	; 15c98 <_start@@Base+0x9bc>
   15b70:	bl	2ce70 <flatcc_json_printer_struct_vector_field@@Base>
   15b74:	mov	r3, #15
   15b78:	mov	r1, r5
   15b7c:	mov	r0, r4
   15b80:	mov	r2, #32
   15b84:	str	r3, [sp]
   15b88:	ldr	r3, [pc, #268]	; 15c9c <_start@@Base+0x9c0>
   15b8c:	bl	2b954 <flatcc_json_printer_int64_vector_field@@Base>
   15b90:	mov	r1, r5
   15b94:	mov	r0, r4
   15b98:	ldr	r3, [pc, #256]	; 15ca0 <_start@@Base+0x9c4>
   15b9c:	mov	r2, #33	; 0x21
   15ba0:	str	r6, [sp]
   15ba4:	bl	2be30 <flatcc_json_printer_double_vector_field@@Base>
   15ba8:	ldr	r3, [pc, #244]	; 15ca4 <_start@@Base+0x9c8>
   15bac:	mov	r1, r5
   15bb0:	mov	r0, r4
   15bb4:	mov	r2, #34	; 0x22
   15bb8:	str	r3, [sp, #4]
   15bbc:	mov	r3, #21
   15bc0:	str	r3, [sp]
   15bc4:	ldr	r3, [pc, #220]	; 15ca8 <_start@@Base+0x9cc>
   15bc8:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   15bcc:	ldr	r3, [pc, #216]	; 15cac <_start@@Base+0x9d0>
   15bd0:	mov	r2, #35	; 0x23
   15bd4:	mov	r1, r5
   15bd8:	mov	r0, r4
   15bdc:	str	r3, [sp, #4]
   15be0:	mov	r3, #10
   15be4:	str	r3, [sp]
   15be8:	ldr	r3, [pc, #192]	; 15cb0 <_start@@Base+0x9d4>
   15bec:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   15bf0:	add	sp, sp, #20
   15bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bf8:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15bfc:	submi	r0, r0, r0
   15c00:	andeq	r0, r0, r0
   15c04:	ldrdeq	r6, [r1], -r0
   15c08:	andeq	lr, r2, fp, lsl sl
   15c0c:	andeq	r5, r1, r4, asr #15
   15c10:	andeq	lr, r2, pc, lsl sl
   15c14:	andeq	lr, r2, r4, lsr #20
   15c18:	andeq	lr, r2, r7, lsr #20
   15c1c:	andeq	lr, r2, ip, lsr #20
   15c20:	andeq	r6, r1, r4, lsl r2
   15c24:	andeq	lr, r2, r6, lsr sl
   15c28:	andeq	r5, r1, ip, asr lr
   15c2c:	strdeq	r7, [r1], -r8
   15c30:	andeq	lr, r2, lr, lsr #23
   15c34:	andeq	r5, r1, r8, lsl #28
   15c38:	andeq	lr, r2, ip, lsr sl
   15c3c:	andeq	lr, r2, r2, asr #20
   15c40:	andeq	lr, r2, r4, asr sl
   15c44:	andeq	lr, r2, r6, ror #20
   15c48:	andeq	lr, r2, ip, ror #20
   15c4c:	andeq	r5, r1, r8, lsl #27
   15c50:	andeq	lr, r2, r1, lsl #21
   15c54:	andeq	lr, r2, fp, lsl #21
   15c58:	muleq	r2, r4, sl
   15c5c:	andeq	lr, r2, r5, lsr #21
   15c60:			; <UNDEFINED> instruction: 0x0002eab6
   15c64:	andeq	lr, r2, r7, asr #21
   15c68:	ldrdeq	lr, [r2], -r8
   15c6c:	andeq	lr, r2, sl, ror #21
   15c70:	strdeq	lr, [r2], -ip
   15c74:	andeq	lr, r2, lr, lsl #22
   15c78:	andeq	lr, r2, r0, lsr #22
   15c7c:	andeq	lr, r2, r1, lsr fp
   15c80:	andeq	lr, r2, r7, lsr fp
   15c84:	andeq	lr, r2, lr, lsr fp
   15c88:	andeq	lr, r2, r5, asr #22
   15c8c:	andeq	r5, r1, r8, lsr #26
   15c90:	andeq	lr, r2, r8, asr fp
   15c94:	andeq	lr, r2, r0, ror fp
   15c98:	andeq	lr, r2, r5, ror fp
   15c9c:	andeq	lr, r2, fp, ror fp
   15ca0:	andeq	lr, r2, fp, lsl #23
   15ca4:	andeq	r5, r1, r4, lsl #10
   15ca8:	muleq	r2, sp, fp
   15cac:			; <UNDEFINED> instruction: 0x00015cb4
   15cb0:			; <UNDEFINED> instruction: 0x0002ebb3
   15cb4:	push	{r0, r1, r4, r5, r6, lr}
   15cb8:	mov	r3, #4
   15cbc:	mov	r4, #0
   15cc0:	mov	r2, r4
   15cc4:	mov	r5, r0
   15cc8:	mov	r6, r1
   15ccc:	stm	sp, {r3, r4}
   15cd0:	ldr	r3, [pc, #68]	; 15d1c <_start@@Base+0xa40>
   15cd4:	bl	2955c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15cd8:	mov	r2, #1
   15cdc:	mov	r3, #7
   15ce0:	mov	r1, r6
   15ce4:	mov	r0, r5
   15ce8:	str	r3, [sp]
   15cec:	ldr	r3, [pc, #44]	; 15d20 <_start@@Base+0xa44>
   15cf0:	str	r2, [sp, #4]
   15cf4:	bl	2955c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15cf8:	mov	r3, #6
   15cfc:	mov	r2, #2
   15d00:	mov	r1, r6
   15d04:	mov	r0, r5
   15d08:	stm	sp, {r3, r4}
   15d0c:	ldr	r3, [pc, #16]	; 15d24 <_start@@Base+0xa48>
   15d10:	bl	2955c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15d14:	add	sp, sp, #8
   15d18:	pop	{r4, r5, r6, pc}
   15d1c:	andeq	lr, r2, r1, asr #23
   15d20:			; <UNDEFINED> instruction: 0x0002ebbe
   15d24:	andeq	lr, r2, r6, asr #23
   15d28:	mov	r3, #2
   15d2c:	push	{r0, r1, r2, r4, r5, lr}
   15d30:	mov	r4, r1
   15d34:	mov	r2, r1
   15d38:	mov	r5, r0
   15d3c:	str	r3, [sp, #4]
   15d40:	ldr	r3, [pc, #56]	; 15d80 <_start@@Base+0xaa4>
   15d44:	str	r3, [sp]
   15d48:	mov	r3, #0
   15d4c:	mov	r1, r3
   15d50:	bl	2a668 <flatcc_json_printer_uint32_struct_field@@Base>
   15d54:	mov	r3, #8
   15d58:	mov	r2, r4
   15d5c:	mov	r1, #1
   15d60:	mov	r0, r5
   15d64:	str	r3, [sp, #4]
   15d68:	ldr	r3, [pc, #20]	; 15d84 <_start@@Base+0xaa8>
   15d6c:	str	r3, [sp]
   15d70:	mov	r3, #4
   15d74:	bl	2a668 <flatcc_json_printer_uint32_struct_field@@Base>
   15d78:	add	sp, sp, #12
   15d7c:	pop	{r4, r5, pc}
   15d80:	andeq	lr, r2, sp, asr #23
   15d84:	ldrdeq	lr, [r2], -r0
   15d88:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15d8c:	mov	r6, #2
   15d90:	mov	r2, #0
   15d94:	mov	r4, r0
   15d98:	mov	r5, r1
   15d9c:	ldr	r3, [pc, #88]	; 15dfc <_start@@Base+0xb20>
   15da0:	str	r6, [sp]
   15da4:	bl	294e8 <flatcc_json_printer_string_field@@Base>
   15da8:	mov	r2, #0
   15dac:	mov	r3, #0
   15db0:	mov	r1, r5
   15db4:	mov	r0, r4
   15db8:	strd	r2, [sp, #8]
   15dbc:	mov	r3, #3
   15dc0:	mov	r2, #1
   15dc4:	str	r3, [sp]
   15dc8:	ldr	r3, [pc, #48]	; 15e00 <_start@@Base+0xb24>
   15dcc:	bl	29b94 <flatcc_json_printer_int64_field@@Base>
   15dd0:	mov	r3, #0
   15dd4:	mov	r2, r6
   15dd8:	mov	r1, r5
   15ddc:	mov	r0, r4
   15de0:	str	r3, [sp, #4]
   15de4:	mov	r3, #5
   15de8:	str	r3, [sp]
   15dec:	ldr	r3, [pc, #16]	; 15e04 <_start@@Base+0xb28>
   15df0:	bl	29798 <flatcc_json_printer_uint16_field@@Base>
   15df4:	add	sp, sp, #16
   15df8:	pop	{r4, r5, r6, pc}
   15dfc:	andeq	lr, r2, sp, asr #23
   15e00:	ldrdeq	lr, [r2], -r9
   15e04:	andeq	r2, r3, r8, ror #27
   15e08:	ldr	r3, [pc, #68]	; 15e54 <_start@@Base+0xb78>
   15e0c:	mov	r2, r1
   15e10:	push	{r0, r1, r4, r5, r6, lr}
   15e14:	mov	r4, #1
   15e18:	mov	r5, r1
   15e1c:	mov	r6, r0
   15e20:	stm	sp, {r3, r4}
   15e24:	mov	r3, #0
   15e28:	mov	r1, r3
   15e2c:	bl	2a768 <flatcc_json_printer_int16_struct_field@@Base>
   15e30:	ldr	r3, [pc, #32]	; 15e58 <_start@@Base+0xb7c>
   15e34:	mov	r2, r5
   15e38:	mov	r1, r4
   15e3c:	mov	r0, r6
   15e40:	stm	sp, {r3, r4}
   15e44:	mov	r3, #2
   15e48:	bl	2a714 <flatcc_json_printer_int8_struct_field@@Base>
   15e4c:	add	sp, sp, #8
   15e50:	pop	{r4, r5, r6, pc}
   15e54:	andeq	lr, r2, r8, ror #21
   15e58:	andeq	lr, r2, r5, ror #19
   15e5c:	ldrb	r3, [r1, #8]
   15e60:	sub	r3, r3, #1
   15e64:	cmp	r3, #3
   15e68:	ldrls	pc, [pc, r3, lsl #2]
   15e6c:	b	15ea0 <_start@@Base+0xbc4>
   15e70:	andeq	r5, r1, r0, lsl #29
   15e74:	andeq	r5, r1, r8, lsl #29
   15e78:	muleq	r1, r0, lr
   15e7c:	muleq	r1, r8, lr
   15e80:	ldr	r2, [pc, #28]	; 15ea4 <_start@@Base+0xbc8>
   15e84:	b	2d8a8 <flatcc_json_printer_union_table@@Base>
   15e88:	ldr	r2, [pc, #24]	; 15ea8 <_start@@Base+0xbcc>
   15e8c:	b	15e84 <_start@@Base+0xba8>
   15e90:	ldr	r2, [pc, #20]	; 15eac <_start@@Base+0xbd0>
   15e94:	b	15e84 <_start@@Base+0xba8>
   15e98:	ldr	r2, [pc, #16]	; 15eb0 <_start@@Base+0xbd4>
   15e9c:	b	15e84 <_start@@Base+0xba8>
   15ea0:	bx	lr
   15ea4:	andeq	r5, r1, r4, asr #15
   15ea8:	andeq	r6, r1, ip, ror r1
   15eac:	andeq	r9, r1, r0, lsl #1
   15eb0:			; <UNDEFINED> instruction: 0x00015eb4
   15eb4:	ldr	r3, [pc, #124]	; 15f38 <_start@@Base+0xc5c>
   15eb8:	mov	r2, #0
   15ebc:	push	{r4, r5, lr}
   15ec0:	sub	sp, sp, #20
   15ec4:	mov	r4, r0
   15ec8:	mov	r5, r1
   15ecc:	str	r3, [sp, #4]
   15ed0:	mov	r3, #6
   15ed4:	str	r3, [sp]
   15ed8:	ldr	r3, [pc, #92]	; 15f3c <_start@@Base+0xc60>
   15edc:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   15ee0:	ldr	r3, [pc, #88]	; 15f40 <_start@@Base+0xc64>
   15ee4:	mov	r1, r5
   15ee8:	mov	r0, r4
   15eec:	mov	r2, #1
   15ef0:	str	r3, [sp, #4]
   15ef4:	mov	r3, #5
   15ef8:	str	r3, [sp]
   15efc:	ldr	r3, [pc, #64]	; 15f44 <_start@@Base+0xc68>
   15f00:	bl	2d644 <flatcc_json_printer_table_field@@Base>
   15f04:	ldr	r3, [pc, #60]	; 15f48 <_start@@Base+0xc6c>
   15f08:	mov	r2, #3
   15f0c:	mov	r1, r5
   15f10:	mov	r0, r4
   15f14:	str	r3, [sp, #8]
   15f18:	ldr	r3, [pc, #44]	; 15f4c <_start@@Base+0xc70>
   15f1c:	str	r3, [sp, #4]
   15f20:	mov	r3, #7
   15f24:	str	r3, [sp]
   15f28:	ldr	r3, [pc, #32]	; 15f50 <_start@@Base+0xc74>
   15f2c:	bl	2d390 <flatcc_json_printer_union_vector_field@@Base>
   15f30:	add	sp, sp, #20
   15f34:	pop	{r4, r5, pc}
   15f38:	andeq	r5, r1, r0, lsr #10
   15f3c:	ldrdeq	lr, [r2], -sp
   15f40:	andeq	r5, r1, r4, asr pc
   15f44:	andeq	lr, r2, r4, ror #23
   15f48:	andeq	r5, r1, ip, asr lr
   15f4c:	strdeq	r7, [r1], -r8
   15f50:	andeq	lr, r2, sl, ror #23
   15f54:	push	{r4, r5, r6, r7, r8, r9, lr}
   15f58:	mov	r3, #14
   15f5c:	sub	sp, sp, #20
   15f60:	mov	r9, #10
   15f64:	mov	r6, r0
   15f68:	mov	r7, r1
   15f6c:	mov	r8, #9
   15f70:	ldr	r5, [pc, #136]	; 16000 <_start@@Base+0xd24>
   15f74:	mov	r2, #1
   15f78:	ldr	r4, [pc, #132]	; 16004 <_start@@Base+0xd28>
   15f7c:	stm	sp, {r3, r4, r5}
   15f80:	ldr	r3, [pc, #128]	; 16008 <_start@@Base+0xd2c>
   15f84:	bl	2d6c4 <flatcc_json_printer_union_field@@Base>
   15f88:	mov	r1, r7
   15f8c:	mov	r0, r6
   15f90:	ldr	r3, [pc, #116]	; 1600c <_start@@Base+0xd30>
   15f94:	mov	r2, #3
   15f98:	str	r9, [sp]
   15f9c:	strd	r4, [sp, #4]
   15fa0:	bl	2d6c4 <flatcc_json_printer_union_field@@Base>
   15fa4:	mov	r1, r7
   15fa8:	mov	r0, r6
   15fac:	ldr	r3, [pc, #92]	; 16010 <_start@@Base+0xd34>
   15fb0:	mov	r2, #5
   15fb4:	str	r8, [sp]
   15fb8:	strd	r4, [sp, #4]
   15fbc:	bl	2d6c4 <flatcc_json_printer_union_field@@Base>
   15fc0:	mov	r3, #5
   15fc4:	mov	r1, r7
   15fc8:	mov	r0, r6
   15fcc:	mov	r2, #7
   15fd0:	stm	sp, {r3, r4, r5}
   15fd4:	ldr	r3, [pc, #56]	; 16014 <_start@@Base+0xd38>
   15fd8:	bl	2d6c4 <flatcc_json_printer_union_field@@Base>
   15fdc:	ldr	r3, [pc, #52]	; 16018 <_start@@Base+0xd3c>
   15fe0:	mov	r2, r8
   15fe4:	mov	r1, r7
   15fe8:	mov	r0, r6
   15fec:	str	r9, [sp]
   15ff0:	strd	r4, [sp, #4]
   15ff4:	bl	2d390 <flatcc_json_printer_union_vector_field@@Base>
   15ff8:	add	sp, sp, #20
   15ffc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16000:	andeq	r6, r1, ip, lsl r0
   16004:	andeq	r6, r1, r8, ror #1
   16008:	strdeq	lr, [r2], -r2
   1600c:	andeq	lr, r2, r1, lsl #24
   16010:	andeq	lr, r2, ip, lsl #24
   16014:	andeq	lr, r2, r6, lsl ip
   16018:	andeq	lr, r2, ip, lsl ip
   1601c:	ldrb	r3, [r1, #8]
   16020:	mov	ip, r0
   16024:	mov	r2, r1
   16028:	cmp	r3, #10
   1602c:	bhi	16050 <_start@@Base+0xd74>
   16030:	cmp	r3, #9
   16034:	bcs	16074 <_start@@Base+0xd98>
   16038:	cmp	r3, #2
   1603c:	beq	1606c <_start@@Base+0xd90>
   16040:	cmp	r3, #8
   16044:	bxne	lr
   16048:	ldr	r2, [pc, #44]	; 1607c <_start@@Base+0xda0>
   1604c:	b	2d8c8 <flatcc_json_printer_union_struct@@Base>
   16050:	cmp	r3, #11
   16054:	beq	16060 <_start@@Base+0xd84>
   16058:	cmp	r3, #255	; 0xff
   1605c:	bxne	lr
   16060:	mov	r1, r2
   16064:	mov	r0, ip
   16068:	b	2d94c <flatcc_json_printer_union_string@@Base>
   1606c:	ldr	r2, [pc, #12]	; 16080 <_start@@Base+0xda4>
   16070:	b	2d8a8 <flatcc_json_printer_union_table@@Base>
   16074:	ldr	r2, [pc, #8]	; 16084 <_start@@Base+0xda8>
   16078:	b	1604c <_start@@Base+0xd70>
   1607c:	strheq	r6, [r1], -r8
   16080:	andeq	r5, r1, ip, lsr #11
   16084:	andeq	r6, r1, r8, lsl #1
   16088:	mov	r3, #10
   1608c:	push	{r0, r1, r2, lr}
   16090:	mov	r2, r1
   16094:	str	r3, [sp, #4]
   16098:	ldr	r3, [pc, #20]	; 160b4 <_start@@Base+0xdd8>
   1609c:	str	r3, [sp]
   160a0:	mov	r3, #0
   160a4:	mov	r1, r3
   160a8:	bl	2a7bc <flatcc_json_printer_int32_struct_field@@Base>
   160ac:	add	sp, sp, #12
   160b0:	pop	{pc}		; (ldr pc, [sp], #4)
   160b4:	andeq	lr, r2, r7, lsr #24
   160b8:	mov	r3, #11
   160bc:	push	{r0, r1, r2, lr}
   160c0:	mov	r2, r1
   160c4:	str	r3, [sp, #4]
   160c8:	ldr	r3, [pc, #20]	; 160e4 <_start@@Base+0xe08>
   160cc:	str	r3, [sp]
   160d0:	mov	r3, #0
   160d4:	mov	r1, r3
   160d8:	bl	2a614 <flatcc_json_printer_uint16_struct_field@@Base>
   160dc:	add	sp, sp, #12
   160e0:	pop	{pc}		; (ldr pc, [sp], #4)
   160e4:	andeq	lr, r2, r2, lsr ip
   160e8:	cmp	r1, #9
   160ec:	mov	r2, r1
   160f0:	mov	r3, r0
   160f4:	moveq	r2, #5
   160f8:	ldreq	r1, [pc, #96]	; 16160 <_start@@Base+0xe84>
   160fc:	beq	1615c <_start@@Base+0xe80>
   16100:	bhi	16130 <_start@@Base+0xe54>
   16104:	cmp	r2, #2
   16108:	moveq	r2, #5
   1610c:	ldreq	r1, [pc, #80]	; 16164 <_start@@Base+0xe88>
   16110:	beq	1615c <_start@@Base+0xe80>
   16114:	cmp	r2, #8
   16118:	ldreq	r1, [pc, #72]	; 16168 <_start@@Base+0xe8c>
   1611c:	beq	1615c <_start@@Base+0xe80>
   16120:	mov	r2, #4
   16124:	mov	r0, r3
   16128:	ldr	r1, [pc, #60]	; 1616c <_start@@Base+0xe90>
   1612c:	b	1615c <_start@@Base+0xe80>
   16130:	cmp	r2, #11
   16134:	moveq	r2, #5
   16138:	ldreq	r1, [pc, #48]	; 16170 <_start@@Base+0xe94>
   1613c:	beq	1615c <_start@@Base+0xe80>
   16140:	movcc	r2, #7
   16144:	ldrcc	r1, [pc, #40]	; 16174 <_start@@Base+0xe98>
   16148:	bcc	1615c <_start@@Base+0xe80>
   1614c:	cmp	r2, #255	; 0xff
   16150:	moveq	r2, #6
   16154:	ldreq	r1, [pc, #28]	; 16178 <_start@@Base+0xe9c>
   16158:	bne	16120 <_start@@Base+0xe44>
   1615c:	b	29478 <flatcc_json_printer_enum@@Base>
   16160:	andeq	lr, r2, sp, asr #24
   16164:	andeq	lr, r2, lr, lsr ip
   16168:	andeq	lr, r2, r4, asr #24
   1616c:	strdeq	r3, [r3], -r1
   16170:	andeq	lr, r2, fp, asr ip
   16174:	andeq	lr, r2, r3, asr ip
   16178:	andeq	lr, r2, r1, ror #24
   1617c:	push	{r4, r5, r6, r7, lr}
   16180:	mov	r3, #5
   16184:	sub	sp, sp, #20
   16188:	mov	r4, #2
   1618c:	mov	r2, #0
   16190:	mov	r5, r0
   16194:	mov	r6, r1
   16198:	ldr	r7, [pc, #96]	; 16200 <_start@@Base+0xf24>
   1619c:	stm	sp, {r3, r4, r7}
   161a0:	ldr	r3, [pc, #92]	; 16204 <_start@@Base+0xf28>
   161a4:	bl	2a1a0 <flatcc_json_printer_int8_enum_field@@Base>
   161a8:	mov	r3, #6
   161ac:	mov	r1, r6
   161b0:	mov	r0, r5
   161b4:	mov	r2, #1
   161b8:	stm	sp, {r3, r4, r7}
   161bc:	ldr	r3, [pc, #68]	; 16208 <_start@@Base+0xf2c>
   161c0:	bl	2a1a0 <flatcc_json_printer_int8_enum_field@@Base>
   161c4:	mov	r2, r4
   161c8:	mov	r1, r6
   161cc:	ldr	r3, [pc, #56]	; 1620c <_start@@Base+0xf30>
   161d0:	mov	r0, r5
   161d4:	str	r4, [sp]
   161d8:	str	r4, [sp, #4]
   161dc:	bl	296f0 <flatcc_json_printer_uint8_field@@Base>
   161e0:	ldr	r3, [pc, #40]	; 16210 <_start@@Base+0xf34>
   161e4:	mov	r2, #3
   161e8:	mov	r1, r6
   161ec:	mov	r0, r5
   161f0:	stm	sp, {r2, r4}
   161f4:	bl	296f0 <flatcc_json_printer_uint8_field@@Base>
   161f8:	add	sp, sp, #20
   161fc:	pop	{r4, r5, r6, r7, pc}
   16200:	andeq	r6, r1, r4, lsl r2
   16204:	andeq	lr, r2, r6, lsr sl
   16208:	andeq	lr, r2, r8, ror #24
   1620c:	andeq	lr, r2, pc, ror #24
   16210:	andeq	lr, r2, r2, ror ip
   16214:	push	{r4, r5, r6, r7, r8, lr}
   16218:	uxtb	r4, r1
   1621c:	tst	r4, #244	; 0xf4
   16220:	movne	r6, #1
   16224:	moveq	r6, #0
   16228:	cmp	r4, #0
   1622c:	moveq	r6, #1
   16230:	cmp	r6, #0
   16234:	beq	16240 <_start@@Base+0xf64>
   16238:	pop	{r4, r5, r6, r7, r8, lr}
   1623c:	b	293a0 <flatcc_json_printer_int8@@Base>
   16240:	sub	r3, r4, #1
   16244:	mov	r5, r0
   16248:	tst	r3, r4
   1624c:	movne	r7, #1
   16250:	moveq	r7, #0
   16254:	mov	r1, r7
   16258:	bl	2947c <flatcc_json_printer_delimit_enum_flags@@Base>
   1625c:	ands	r1, r4, #1
   16260:	beq	1627c <_start@@Base+0xfa0>
   16264:	mov	r1, r6
   16268:	mov	r3, #3
   1626c:	ldr	r2, [pc, #80]	; 162c4 <_start@@Base+0xfe8>
   16270:	mov	r0, r5
   16274:	bl	294b0 <flatcc_json_printer_enum_flag@@Base>
   16278:	mov	r1, #1
   1627c:	tst	r4, #2
   16280:	beq	1629c <_start@@Base+0xfc0>
   16284:	add	r6, r1, #1
   16288:	mov	r3, #5
   1628c:	ldr	r2, [pc, #52]	; 162c8 <_start@@Base+0xfec>
   16290:	mov	r0, r5
   16294:	bl	294b0 <flatcc_json_printer_enum_flag@@Base>
   16298:	mov	r1, r6
   1629c:	tst	r4, #8
   162a0:	beq	162b4 <_start@@Base+0xfd8>
   162a4:	mov	r3, #4
   162a8:	ldr	r2, [pc, #28]	; 162cc <_start@@Base+0xff0>
   162ac:	mov	r0, r5
   162b0:	bl	294b0 <flatcc_json_printer_enum_flag@@Base>
   162b4:	mov	r1, r7
   162b8:	mov	r0, r5
   162bc:	pop	{r4, r5, r6, r7, r8, lr}
   162c0:	b	2947c <flatcc_json_printer_delimit_enum_flags@@Base>
   162c4:	andeq	lr, r2, r6, ror ip
   162c8:	andeq	lr, r2, sl, ror ip
   162cc:	andeq	lr, r2, r0, lsl #25
   162d0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   162d4:	mov	r6, #1
   162d8:	mov	r4, r1
   162dc:	mov	r2, r1
   162e0:	mov	r5, r0
   162e4:	ldr	r3, [pc, #188]	; 163a8 <_start@@Base+0x10cc>
   162e8:	stm	sp, {r3, r6}
   162ec:	mov	r3, #0
   162f0:	mov	r1, r3
   162f4:	bl	2a8bc <flatcc_json_printer_float_struct_field@@Base>
   162f8:	ldr	r3, [pc, #172]	; 163ac <_start@@Base+0x10d0>
   162fc:	mov	r2, r4
   16300:	mov	r1, r6
   16304:	mov	r0, r5
   16308:	stm	sp, {r3, r6}
   1630c:	mov	r3, #4
   16310:	bl	2a8bc <flatcc_json_printer_float_struct_field@@Base>
   16314:	ldr	r3, [pc, #148]	; 163b0 <_start@@Base+0x10d4>
   16318:	mov	r2, r4
   1631c:	mov	r0, r5
   16320:	mov	r1, #2
   16324:	stm	sp, {r3, r6}
   16328:	mov	r3, #8
   1632c:	mov	r6, #5
   16330:	bl	2a8bc <flatcc_json_printer_float_struct_field@@Base>
   16334:	ldr	r3, [pc, #120]	; 163b4 <_start@@Base+0x10d8>
   16338:	mov	r2, r4
   1633c:	mov	r0, r5
   16340:	mov	r1, #3
   16344:	stm	sp, {r3, r6}
   16348:	mov	r3, #16
   1634c:	bl	2a91c <flatcc_json_printer_double_struct_field@@Base>
   16350:	ldr	r3, [pc, #96]	; 163b8 <_start@@Base+0x10dc>
   16354:	mov	r2, r4
   16358:	mov	r0, r5
   1635c:	mov	r1, #4
   16360:	str	r6, [sp, #4]
   16364:	str	r3, [sp, #8]
   16368:	ldr	r3, [pc, #76]	; 163bc <_start@@Base+0x10e0>
   1636c:	str	r3, [sp]
   16370:	mov	r3, #24
   16374:	bl	2ab84 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16378:	ldr	r3, [pc, #64]	; 163c0 <_start@@Base+0x10e4>
   1637c:	mov	r2, r4
   16380:	mov	r1, r6
   16384:	mov	r0, r5
   16388:	str	r6, [sp, #4]
   1638c:	str	r3, [sp, #8]
   16390:	ldr	r3, [pc, #44]	; 163c4 <_start@@Base+0x10e8>
   16394:	str	r3, [sp]
   16398:	mov	r3, #26
   1639c:	bl	2d95c <flatcc_json_printer_embedded_struct_field@@Base>
   163a0:	add	sp, sp, #16
   163a4:	pop	{r4, r5, r6, pc}
   163a8:	andeq	lr, r2, r2, lsr lr
   163ac:	andeq	r3, r3, r7, lsl pc
   163b0:	andeq	lr, r2, r5, lsl #25
   163b4:	andeq	lr, r2, r7, lsl #25
   163b8:	andeq	r6, r1, r4, lsl r2
   163bc:	andeq	lr, r2, sp, lsl #25
   163c0:	andeq	r5, r1, r8, lsl #28
   163c4:	muleq	r2, r3, ip
   163c8:	sub	r3, r2, r1
   163cc:	push	{r4, r5, r6, lr}
   163d0:	mov	r6, r0
   163d4:	cmp	r3, #3
   163d8:	mov	r4, r1
   163dc:	mov	r5, r2
   163e0:	ble	163fc <_start@@Base+0x1120>
   163e4:	mov	r2, #4
   163e8:	ldr	r1, [pc, #44]	; 1641c <_start@@Base+0x1140>
   163ec:	mov	r0, r4
   163f0:	bl	14554 <memcmp@plt>
   163f4:	cmp	r0, #0
   163f8:	beq	16414 <_start@@Base+0x1138>
   163fc:	mov	r2, r5
   16400:	mov	r1, r4
   16404:	mov	r0, r6
   16408:	mov	r3, #26
   1640c:	pop	{r4, r5, r6, lr}
   16410:	b	251c8 <flatcc_json_parser_set_error@@Base>
   16414:	add	r0, r4, #4
   16418:	pop	{r4, r5, r6, pc}
   1641c:	andeq	r4, r3, r6, rrx
   16420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16424:	mov	r4, r1
   16428:	sub	sp, sp, #20
   1642c:	mov	r1, r2
   16430:	mov	r5, r0
   16434:	mov	r0, r4
   16438:	mov	sl, r3
   1643c:	add	r7, pc, #564	; 0x234
   16440:	ldrd	r6, [r7]
   16444:	str	r2, [sp, #12]
   16448:	ldr	fp, [sp, #56]	; 0x38
   1644c:	ldr	r3, [sp, #60]	; 0x3c
   16450:	bl	153d0 <_start@@Base+0xf4>
   16454:	cmp	r1, r7
   16458:	ldr	r2, [sp, #12]
   1645c:	cmpeq	r0, r6
   16460:	bhi	16544 <_start@@Base+0x1268>
   16464:	add	r7, pc, #532	; 0x214
   16468:	ldrd	r6, [r7]
   1646c:	and	r8, r0, #-16777216	; 0xff000000
   16470:	mov	r9, r1
   16474:	cmp	r1, r7
   16478:	cmpeq	r0, r6
   1647c:	bhi	164c0 <_start@@Base+0x11e4>
   16480:	add	r1, pc, #512	; 0x200
   16484:	ldrd	r0, [r1]
   16488:	cmp	r9, r1
   1648c:	cmpeq	r8, r0
   16490:	bne	164b4 <_start@@Base+0x11d8>
   16494:	mov	r1, r4
   16498:	mov	r0, r5
   1649c:	str	r3, [sp]
   164a0:	mov	r3, #5
   164a4:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   164a8:	cmp	r4, r0
   164ac:	movne	r2, #9
   164b0:	bne	164f4 <_start@@Base+0x1218>
   164b4:	mov	r0, r4
   164b8:	add	sp, sp, #20
   164bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164c0:	add	r7, pc, #456	; 0x1c8
   164c4:	ldrd	r6, [r7]
   164c8:	cmp	r1, r7
   164cc:	cmpeq	r8, r6
   164d0:	bne	16508 <_start@@Base+0x122c>
   164d4:	mov	r1, r4
   164d8:	mov	r0, r5
   164dc:	str	r3, [sp]
   164e0:	mov	r3, #5
   164e4:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   164e8:	cmp	r4, r0
   164ec:	movne	r2, #2
   164f0:	beq	164b4 <_start@@Base+0x11d8>
   164f4:	mov	r3, #0
   164f8:	strd	r2, [fp]
   164fc:	mov	r3, #0
   16500:	str	r3, [sl]
   16504:	b	165a0 <_start@@Base+0x12c4>
   16508:	bic	r6, r0, #255	; 0xff
   1650c:	add	r1, pc, #388	; 0x184
   16510:	ldrd	r0, [r1]
   16514:	cmp	r9, r1
   16518:	cmpeq	r6, r0
   1651c:	bne	164b4 <_start@@Base+0x11d8>
   16520:	mov	r1, r4
   16524:	mov	r0, r5
   16528:	str	r3, [sp]
   1652c:	mov	r3, #7
   16530:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16534:	cmp	r4, r0
   16538:	movne	r2, #10
   1653c:	bne	164f4 <_start@@Base+0x1218>
   16540:	b	164b4 <_start@@Base+0x11d8>
   16544:	add	r7, pc, #340	; 0x154
   16548:	ldrd	r6, [r7]
   1654c:	cmp	r1, r7
   16550:	cmpeq	r0, r6
   16554:	bhi	165a8 <_start@@Base+0x12cc>
   16558:	mov	r7, r1
   1655c:	add	r1, pc, #324	; 0x144
   16560:	ldrd	r0, [r1]
   16564:	mov	r8, #0
   16568:	cmp	r7, r1
   1656c:	cmpeq	r8, r0
   16570:	bne	164b4 <_start@@Base+0x11d8>
   16574:	mov	r1, r4
   16578:	mov	r0, r5
   1657c:	str	r3, [sp]
   16580:	mov	r3, #4
   16584:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16588:	cmp	r4, r0
   1658c:	beq	164b4 <_start@@Base+0x11d8>
   16590:	mov	r2, #0
   16594:	mov	r3, #0
   16598:	strd	r2, [fp]
   1659c:	str	r8, [sl]
   165a0:	mov	r4, r0
   165a4:	b	164b4 <_start@@Base+0x11d8>
   165a8:	add	r7, pc, #256	; 0x100
   165ac:	ldrd	r6, [r7]
   165b0:	cmp	r1, r7
   165b4:	cmpeq	r0, r6
   165b8:	bhi	165fc <_start@@Base+0x1320>
   165bc:	and	r6, r0, #-16777216	; 0xff000000
   165c0:	mov	r7, r1
   165c4:	add	r1, pc, #236	; 0xec
   165c8:	ldrd	r0, [r1]
   165cc:	cmp	r7, r1
   165d0:	cmpeq	r6, r0
   165d4:	bne	164b4 <_start@@Base+0x11d8>
   165d8:	mov	r1, r4
   165dc:	mov	r0, r5
   165e0:	str	r3, [sp]
   165e4:	mov	r3, #5
   165e8:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   165ec:	cmp	r4, r0
   165f0:	movne	r2, #11
   165f4:	bne	164f4 <_start@@Base+0x1218>
   165f8:	b	164b4 <_start@@Base+0x11d8>
   165fc:	add	r9, pc, #188	; 0xbc
   16600:	ldrd	r8, [r9]
   16604:	lsr	r6, r0, #16
   16608:	lsl	r6, r6, #16
   1660c:	cmp	r1, r9
   16610:	cmpeq	r6, r8
   16614:	bne	1663c <_start@@Base+0x1360>
   16618:	mov	r1, r4
   1661c:	mov	r0, r5
   16620:	str	r3, [sp]
   16624:	mov	r3, #6
   16628:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   1662c:	cmp	r4, r0
   16630:	movne	r2, #255	; 0xff
   16634:	bne	164f4 <_start@@Base+0x1218>
   16638:	b	164b4 <_start@@Base+0x11d8>
   1663c:	add	r7, pc, #132	; 0x84
   16640:	ldrd	r6, [r7]
   16644:	cmp	r1, r7
   16648:	cmpeq	r0, r6
   1664c:	bne	164b4 <_start@@Base+0x11d8>
   16650:	mov	r1, r4
   16654:	mov	r0, r5
   16658:	str	r3, [sp]
   1665c:	mov	r3, #8
   16660:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16664:	cmp	r4, r0
   16668:	beq	164b4 <_start@@Base+0x11d8>
   1666c:	mov	r2, #8
   16670:	b	164f4 <_start@@Base+0x1218>
   16674:	nop	{0}
   16678:			; <UNDEFINED> instruction: 0xffffffff
   1667c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16680:			; <UNDEFINED> instruction: 0x46616dff
   16684:	rsbmi	r6, pc, #428	; 0x1ac
   16688:	strvs	r0, [r0, #-0]
   1668c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16690:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16694:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16698:	strbtmi	r6, [r1], -r0, lsl #28
   1669c:	rsbmi	r6, pc, #428	; 0x1ac
   166a0:	ldrshvc	pc, [pc, #255]	; 167a7 <_start@@Base+0x14cb>	; <UNPREDICTABLE>
   166a4:	svcmi	0x00746865
   166a8:	andeq	r0, r0, r0
   166ac:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   166b0:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   166b4:	rsbpl	r7, r1, #117	; 0x75
   166b8:	andvc	r0, r0, #0
   166bc:	svcmi	0x00746865
   166c0:	strbvs	r0, [r4, #-0]!
   166c4:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   166c8:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   166cc:	rsbpl	r7, r1, #117	; 0x75
   166d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166d4:	mov	r5, r1
   166d8:	sub	sp, sp, #20
   166dc:	mov	r1, r2
   166e0:	mov	sl, r0
   166e4:	mov	r0, r5
   166e8:	mov	r6, r2
   166ec:	mov	r7, r3
   166f0:	bl	153d0 <_start@@Base+0xf4>
   166f4:	add	r3, pc, #532	; 0x214
   166f8:	ldrd	r2, [r3]
   166fc:	strd	r0, [sp, #8]
   16700:	ldr	fp, [sp, #60]	; 0x3c
   16704:	cmp	r1, r3
   16708:	cmpeq	r0, r2
   1670c:	bhi	1677c <_start@@Base+0x14a0>
   16710:	ldr	r1, [sp, #12]
   16714:	mov	r8, #0
   16718:	bic	r3, r1, #255	; 0xff
   1671c:	add	r1, pc, #500	; 0x1f4
   16720:	ldrd	r0, [r1]
   16724:	cmp	r3, r1
   16728:	cmpeq	r8, r0
   1672c:	beq	16740 <_start@@Base+0x1464>
   16730:	mov	r4, r5
   16734:	mov	r0, r4
   16738:	add	sp, sp, #20
   1673c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16740:	mov	r3, #3
   16744:	mov	r2, r6
   16748:	str	fp, [sp]
   1674c:	mov	r1, r5
   16750:	mov	r0, sl
   16754:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16758:	cmp	r5, r0
   1675c:	mov	r4, r0
   16760:	beq	16734 <_start@@Base+0x1458>
   16764:	ldr	r1, [sp, #56]	; 0x38
   16768:	mov	r2, #4
   1676c:	mov	r3, #0
   16770:	strd	r2, [r1]
   16774:	str	r8, [r7]
   16778:	b	16734 <_start@@Base+0x1458>
   1677c:	add	r3, pc, #412	; 0x19c
   16780:	ldrd	r2, [r3]
   16784:	ldrd	r0, [sp, #8]
   16788:	cmp	r1, r3
   1678c:	cmpeq	r0, r2
   16790:	bne	16818 <_start@@Base+0x153c>
   16794:	mov	r2, r6
   16798:	mov	r3, #8
   1679c:	str	fp, [sp]
   167a0:	mov	r1, r5
   167a4:	mov	r0, sl
   167a8:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   167ac:	cmp	r5, r0
   167b0:	mov	r4, r0
   167b4:	movne	r2, #3
   167b8:	bne	16864 <_start@@Base+0x1588>
   167bc:	add	r1, pc, #356	; 0x164
   167c0:	ldrd	r0, [r1]
   167c4:	mov	r2, #0
   167c8:	ldr	r3, [sp, #12]
   167cc:	cmp	r3, r1
   167d0:	cmpeq	r2, r0
   167d4:	bne	1687c <_start@@Base+0x15a0>
   167d8:	mov	r3, #4
   167dc:	mov	r2, r6
   167e0:	str	fp, [sp]
   167e4:	mov	r1, r4
   167e8:	mov	r0, sl
   167ec:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   167f0:	cmp	r4, r0
   167f4:	beq	16730 <_start@@Base+0x1454>
   167f8:	ldr	r1, [sp, #56]	; 0x38
   167fc:	mov	r3, #0
   16800:	mov	r2, #0
   16804:	mov	r4, r0
   16808:	strd	r2, [r1]
   1680c:	mov	r3, #0
   16810:	str	r3, [r7]
   16814:	b	16734 <_start@@Base+0x1458>
   16818:	ldr	r1, [sp, #8]
   1681c:	ldr	r3, [sp, #12]
   16820:	bic	r2, r1, #255	; 0xff
   16824:	add	r1, pc, #260	; 0x104
   16828:	ldrd	r0, [r1]
   1682c:	cmp	r3, r1
   16830:	cmpeq	r2, r0
   16834:	movne	r4, r5
   16838:	bne	167bc <_start@@Base+0x14e0>
   1683c:	mov	r2, r6
   16840:	mov	r3, #7
   16844:	str	fp, [sp]
   16848:	mov	r1, r5
   1684c:	mov	r0, sl
   16850:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16854:	cmp	r5, r0
   16858:	mov	r4, r0
   1685c:	movne	r2, #1
   16860:	beq	167bc <_start@@Base+0x14e0>
   16864:	ldr	r1, [sp, #56]	; 0x38
   16868:	mov	r3, #0
   1686c:	strd	r2, [r1]
   16870:	mov	r3, #0
   16874:	str	r3, [r7]
   16878:	b	16734 <_start@@Base+0x1458>
   1687c:	add	r3, pc, #180	; 0xb4
   16880:	ldrd	r2, [r3]
   16884:	ldrd	r0, [sp, #8]
   16888:	cmp	r1, r3
   1688c:	cmpeq	r0, r2
   16890:	bne	16730 <_start@@Base+0x1454>
   16894:	mov	r1, r6
   16898:	add	r0, r4, #8
   1689c:	bl	153d0 <_start@@Base+0xf4>
   168a0:	add	r3, pc, #152	; 0x98
   168a4:	ldrd	r2, [r3]
   168a8:	cmp	r1, r3
   168ac:	cmpeq	r0, r2
   168b0:	bne	16730 <_start@@Base+0x1454>
   168b4:	add	r8, r4, #16
   168b8:	mov	r1, r6
   168bc:	mov	r0, r8
   168c0:	bl	153d0 <_start@@Base+0xf4>
   168c4:	bic	r2, r0, #255	; 0xff
   168c8:	mov	r3, r1
   168cc:	add	r1, pc, #116	; 0x74
   168d0:	ldrd	r0, [r1]
   168d4:	cmp	r3, r1
   168d8:	cmpeq	r2, r0
   168dc:	bne	16730 <_start@@Base+0x1454>
   168e0:	mov	r3, #7
   168e4:	mov	r2, r6
   168e8:	str	fp, [sp]
   168ec:	mov	r1, r8
   168f0:	mov	r0, sl
   168f4:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   168f8:	cmp	r8, r0
   168fc:	mov	r4, r0
   16900:	beq	16730 <_start@@Base+0x1454>
   16904:	mov	r2, #2
   16908:	b	16864 <_start@@Base+0x1588>
   1690c:	nop	{0}
   16910:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16914:	stclmi	14, cr6, [pc, #-460]!	; 16750 <_start@@Base+0x1474>
   16918:	andeq	r0, r0, r0
   1691c:	cmnmi	ip, r0, lsl #8
   16920:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16924:	stclmi	14, cr6, [pc, #-460]!	; 16760 <_start@@Base+0x1484>
   16928:	andeq	r0, r0, r0
   1692c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16930:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16934:	stclmi	14, cr6, [pc, #-460]!	; 16770 <_start@@Base+0x1494>
   16938:	cmnpl	r9, #112, 26	; 0x1c00
   1693c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16940:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16944:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16948:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1694c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16950:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16954:	mov	r4, r1
   16958:	mov	r5, r0
   1695c:	mov	r1, r2
   16960:	mov	r0, r4
   16964:	mov	sl, r2
   16968:	mov	fp, r3
   1696c:	bl	153d0 <_start@@Base+0xf4>
   16970:	add	r3, pc, #280	; 0x118
   16974:	ldrd	r2, [r3]
   16978:	mov	r6, #0
   1697c:	cmp	r1, r3
   16980:	cmpeq	r0, r2
   16984:	bhi	169d8 <_start@@Base+0x16fc>
   16988:	mov	r3, r1
   1698c:	add	r1, pc, #260	; 0x104
   16990:	ldrd	r0, [r1]
   16994:	cmp	r3, r1
   16998:	cmpeq	r6, r0
   1699c:	bne	169cc <_start@@Base+0x16f0>
   169a0:	ldr	r3, [sp, #52]	; 0x34
   169a4:	mov	r2, sl
   169a8:	mov	r1, r4
   169ac:	mov	r0, r5
   169b0:	str	r3, [sp]
   169b4:	mov	r3, #4
   169b8:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   169bc:	cmp	r4, r0
   169c0:	movne	r2, #3
   169c4:	movne	r3, #0
   169c8:	bne	16a80 <_start@@Base+0x17a4>
   169cc:	mov	r0, r4
   169d0:	add	sp, sp, #12
   169d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d8:	add	r9, pc, #192	; 0xc0
   169dc:	ldrd	r8, [r9]
   169e0:	lsr	r6, r0, #16
   169e4:	mov	r7, r1
   169e8:	lsl	r6, r6, #16
   169ec:	cmp	r1, r9
   169f0:	cmpeq	r6, r8
   169f4:	bne	16a3c <_start@@Base+0x1760>
   169f8:	ldr	r3, [sp, #52]	; 0x34
   169fc:	mov	r2, sl
   16a00:	mov	r1, r4
   16a04:	mov	r0, r5
   16a08:	str	r3, [sp]
   16a0c:	mov	r3, #6
   16a10:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16a14:	cmp	r4, r0
   16a18:	beq	169cc <_start@@Base+0x16f0>
   16a1c:	ldr	r1, [sp, #48]	; 0x30
   16a20:	mvn	r3, #0
   16a24:	mvn	r2, #1
   16a28:	strd	r2, [r1]
   16a2c:	mov	r3, #1
   16a30:	str	r3, [fp]
   16a34:	mov	r4, r0
   16a38:	b	169cc <_start@@Base+0x16f0>
   16a3c:	add	r1, pc, #100	; 0x64
   16a40:	ldrd	r0, [r1]
   16a44:	mov	r6, #0
   16a48:	cmp	r7, r1
   16a4c:	cmpeq	r6, r0
   16a50:	bne	169cc <_start@@Base+0x16f0>
   16a54:	ldr	r3, [sp, #52]	; 0x34
   16a58:	mov	r2, sl
   16a5c:	mov	r1, r4
   16a60:	mov	r0, r5
   16a64:	str	r3, [sp]
   16a68:	mov	r3, #4
   16a6c:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16a70:	cmp	r4, r0
   16a74:	beq	169cc <_start@@Base+0x16f0>
   16a78:	add	r3, pc, #48	; 0x30
   16a7c:	ldrd	r2, [r3]
   16a80:	ldr	r1, [sp, #48]	; 0x30
   16a84:	strd	r2, [r1]
   16a88:	str	r6, [fp]
   16a8c:	b	16a34 <_start@@Base+0x1758>
   16a90:			; <UNDEFINED> instruction: 0xffffffff
   16a94:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16a98:	andeq	r0, r0, r0
   16a9c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16aa0:	strbvs	r0, [r7, #-0]!
   16aa4:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16aa8:	andeq	r0, r0, r0
   16aac:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16ab0:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16ab4:	andeq	r0, r0, r0
   16ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16abc:	mov	r4, r1
   16ac0:	sub	sp, sp, #20
   16ac4:	mov	r1, r2
   16ac8:	mov	r5, r0
   16acc:	mov	r0, r4
   16ad0:	mov	sl, r3
   16ad4:	add	r7, pc, #348	; 0x15c
   16ad8:	ldrd	r6, [r7]
   16adc:	str	r2, [sp, #12]
   16ae0:	ldr	fp, [sp, #56]	; 0x38
   16ae4:	ldr	r3, [sp, #60]	; 0x3c
   16ae8:	bl	153d0 <_start@@Base+0xf4>
   16aec:	cmp	r1, r7
   16af0:	ldr	r2, [sp, #12]
   16af4:	cmpeq	r0, r6
   16af8:	bhi	16b44 <_start@@Base+0x1868>
   16afc:	mov	r7, r1
   16b00:	add	r1, pc, #312	; 0x138
   16b04:	ldrd	r0, [r1]
   16b08:	mov	r8, #0
   16b0c:	cmp	r7, r1
   16b10:	cmpeq	r8, r0
   16b14:	bne	16b38 <_start@@Base+0x185c>
   16b18:	mov	r1, r4
   16b1c:	mov	r0, r5
   16b20:	str	r3, [sp]
   16b24:	mov	r3, #4
   16b28:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16b2c:	cmp	r4, r0
   16b30:	movne	r2, #2
   16b34:	bne	16b94 <_start@@Base+0x18b8>
   16b38:	mov	r0, r4
   16b3c:	add	sp, sp, #20
   16b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b44:	add	r7, pc, #252	; 0xfc
   16b48:	ldrd	r6, [r7]
   16b4c:	cmp	r1, r7
   16b50:	cmpeq	r0, r6
   16b54:	bhi	16ba8 <_start@@Base+0x18cc>
   16b58:	mov	r7, r1
   16b5c:	add	r1, pc, #236	; 0xec
   16b60:	ldrd	r0, [r1]
   16b64:	mov	r8, #0
   16b68:	cmp	r7, r1
   16b6c:	cmpeq	r8, r0
   16b70:	bne	16b38 <_start@@Base+0x185c>
   16b74:	mov	r1, r4
   16b78:	mov	r0, r5
   16b7c:	str	r3, [sp]
   16b80:	mov	r3, #4
   16b84:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16b88:	cmp	r4, r0
   16b8c:	beq	16b38 <_start@@Base+0x185c>
   16b90:	mov	r2, #42	; 0x2a
   16b94:	mov	r3, #0
   16b98:	strd	r2, [fp]
   16b9c:	str	r8, [sl]
   16ba0:	mov	r4, r0
   16ba4:	b	16b38 <_start@@Base+0x185c>
   16ba8:	add	r9, pc, #168	; 0xa8
   16bac:	ldrd	r8, [r9]
   16bb0:	bic	r6, r0, #255	; 0xff
   16bb4:	mov	r7, r1
   16bb8:	cmp	r1, r9
   16bbc:	cmpeq	r6, r8
   16bc0:	bne	16bf8 <_start@@Base+0x191c>
   16bc4:	mov	r1, r4
   16bc8:	mov	r0, r5
   16bcc:	str	r3, [sp]
   16bd0:	mov	r3, #7
   16bd4:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16bd8:	cmp	r4, r0
   16bdc:	mvnne	r2, #0
   16be0:	beq	16b38 <_start@@Base+0x185c>
   16be4:	mvn	r3, #0
   16be8:	strd	r2, [fp]
   16bec:	mov	r3, #1
   16bf0:	str	r3, [sl]
   16bf4:	b	16ba0 <_start@@Base+0x18c4>
   16bf8:	lsr	r6, r0, #16
   16bfc:	add	r1, pc, #92	; 0x5c
   16c00:	ldrd	r0, [r1]
   16c04:	lsl	r6, r6, #16
   16c08:	cmp	r7, r1
   16c0c:	cmpeq	r6, r0
   16c10:	bne	16b38 <_start@@Base+0x185c>
   16c14:	mov	r1, r4
   16c18:	mov	r0, r5
   16c1c:	str	r3, [sp]
   16c20:	mov	r3, #6
   16c24:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16c28:	cmp	r4, r0
   16c2c:	beq	16b38 <_start@@Base+0x185c>
   16c30:	mvn	r2, #1
   16c34:	b	16be4 <_start@@Base+0x1908>
   16c38:			; <UNDEFINED> instruction: 0xffffffff
   16c3c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16c40:	andeq	r0, r0, r0
   16c44:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16c48:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16c4c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16c50:	andeq	r0, r0, r0
   16c54:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16c58:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16c5c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16c60:	strbvs	r0, [r7, #-0]!
   16c64:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16c68:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c6c:	mov	r4, r1
   16c70:	mov	r5, r0
   16c74:	mov	r1, r2
   16c78:	mov	r0, r4
   16c7c:	mov	sl, r2
   16c80:	mov	fp, r3
   16c84:	add	r9, pc, #244	; 0xf4
   16c88:	ldrd	r8, [r9]
   16c8c:	mov	r6, #0
   16c90:	bl	153d0 <_start@@Base+0xf4>
   16c94:	cmp	r1, r9
   16c98:	cmpeq	r0, r8
   16c9c:	bhi	16ce8 <_start@@Base+0x1a0c>
   16ca0:	add	r3, pc, #224	; 0xe0
   16ca4:	ldrd	r2, [r3]
   16ca8:	cmp	r1, r3
   16cac:	cmpeq	r6, r2
   16cb0:	bne	16cdc <_start@@Base+0x1a00>
   16cb4:	ldr	r3, [sp, #52]	; 0x34
   16cb8:	mov	r2, sl
   16cbc:	mov	r1, r4
   16cc0:	mov	r0, r5
   16cc4:	str	r3, [sp]
   16cc8:	mov	r3, #4
   16ccc:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16cd0:	cmp	r4, r0
   16cd4:	mvnne	r2, #11
   16cd8:	bne	16d24 <_start@@Base+0x1a48>
   16cdc:	mov	r0, r4
   16ce0:	add	sp, sp, #12
   16ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ce8:	add	r3, pc, #160	; 0xa0
   16cec:	ldrd	r2, [r3]
   16cf0:	cmp	r1, r3
   16cf4:	cmpeq	r6, r2
   16cf8:	bne	16d40 <_start@@Base+0x1a64>
   16cfc:	ldr	r3, [sp, #52]	; 0x34
   16d00:	mov	r2, sl
   16d04:	mov	r1, r4
   16d08:	mov	r0, r5
   16d0c:	str	r3, [sp]
   16d10:	mov	r3, #4
   16d14:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16d18:	cmp	r4, r0
   16d1c:	mvnne	r2, #9
   16d20:	beq	16cdc <_start@@Base+0x1a00>
   16d24:	ldr	r1, [sp, #48]	; 0x30
   16d28:	mvn	r3, #0
   16d2c:	mov	r4, r0
   16d30:	strd	r2, [r1]
   16d34:	mov	r3, #1
   16d38:	str	r3, [fp]
   16d3c:	b	16cdc <_start@@Base+0x1a00>
   16d40:	add	r3, pc, #80	; 0x50
   16d44:	ldrd	r2, [r3]
   16d48:	cmp	r1, r3
   16d4c:	cmpeq	r6, r2
   16d50:	bne	16cdc <_start@@Base+0x1a00>
   16d54:	ldr	r3, [sp, #52]	; 0x34
   16d58:	mov	r2, sl
   16d5c:	mov	r1, r4
   16d60:	mov	r0, r5
   16d64:	str	r3, [sp]
   16d68:	mov	r3, #4
   16d6c:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16d70:	cmp	r4, r0
   16d74:	beq	16cdc <_start@@Base+0x1a00>
   16d78:	mvn	r2, #10
   16d7c:	b	16d24 <_start@@Base+0x1a48>
   16d80:			; <UNDEFINED> instruction: 0xffffffff
   16d84:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16d88:	andeq	r0, r0, r0
   16d8c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16d90:	andeq	r0, r0, r0
   16d94:	mcrvs	7, 3, r6, cr5, cr3, {1}
   16d98:	andeq	r0, r0, r0
   16d9c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   16da0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da4:	mov	r4, r1
   16da8:	mov	r8, r0
   16dac:	mov	r1, r2
   16db0:	mov	r0, r4
   16db4:	mov	r9, r2
   16db8:	mov	sl, r3
   16dbc:	bl	153d0 <_start@@Base+0xf4>
   16dc0:	add	r3, pc, #240	; 0xf0
   16dc4:	ldrd	r2, [r3]
   16dc8:	mov	r5, #0
   16dcc:	ldr	fp, [sp, #52]	; 0x34
   16dd0:	cmp	r1, r3
   16dd4:	cmpeq	r0, r2
   16dd8:	bhi	16e20 <_start@@Base+0x1b44>
   16ddc:	add	r3, pc, #220	; 0xdc
   16de0:	ldrd	r2, [r3]
   16de4:	cmp	r1, r3
   16de8:	cmpeq	r5, r2
   16dec:	bne	16e14 <_start@@Base+0x1b38>
   16df0:	mov	r2, r9
   16df4:	mov	r3, #4
   16df8:	str	fp, [sp]
   16dfc:	mov	r1, r4
   16e00:	mov	r0, r8
   16e04:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16e08:	cmp	r4, r0
   16e0c:	movne	r2, #8
   16e10:	bne	16e5c <_start@@Base+0x1b80>
   16e14:	mov	r0, r4
   16e18:	add	sp, sp, #12
   16e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e20:	add	r7, pc, #160	; 0xa0
   16e24:	ldrd	r6, [r7]
   16e28:	bic	r3, r1, #255	; 0xff
   16e2c:	cmp	r3, r7
   16e30:	cmpeq	r5, r6
   16e34:	bne	16e74 <_start@@Base+0x1b98>
   16e38:	mov	r2, r9
   16e3c:	mov	r3, #3
   16e40:	str	fp, [sp]
   16e44:	mov	r1, r4
   16e48:	mov	r0, r8
   16e4c:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16e50:	cmp	r4, r0
   16e54:	movne	r2, #1
   16e58:	beq	16e14 <_start@@Base+0x1b38>
   16e5c:	ldr	r1, [sp, #48]	; 0x30
   16e60:	mov	r3, #0
   16e64:	mov	r4, r0
   16e68:	strd	r2, [r1]
   16e6c:	str	r5, [sl]
   16e70:	b	16e14 <_start@@Base+0x1b38>
   16e74:	add	r3, pc, #84	; 0x54
   16e78:	ldrd	r2, [r3]
   16e7c:	and	r6, r0, #-16777216	; 0xff000000
   16e80:	cmp	r1, r3
   16e84:	cmpeq	r6, r2
   16e88:	bne	16e14 <_start@@Base+0x1b38>
   16e8c:	mov	r3, #5
   16e90:	mov	r2, r9
   16e94:	str	fp, [sp]
   16e98:	mov	r1, r4
   16e9c:	mov	r0, r8
   16ea0:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   16ea4:	cmp	r4, r0
   16ea8:	beq	16e14 <_start@@Base+0x1b38>
   16eac:	mov	r2, #2
   16eb0:	b	16e5c <_start@@Base+0x1b80>
   16eb4:	nop	{0}
   16eb8:	ldclvs	15, cr15, [pc, #1020]!	; 172bc <_start@@Base+0x1fe0>
   16ebc:	ldrbmi	r6, [r2, -r5, ror #10]!
   16ec0:	andeq	r0, r0, r0
   16ec4:	rsbmi	r7, ip, #423624704	; 0x19400000
   16ec8:	andeq	r0, r0, r0
   16ecc:	rsbpl	r6, r5, #0, 8
   16ed0:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16ed4:	ldrbmi	r6, [r2, -r5, ror #10]!
   16ed8:	sub	r3, r2, r1
   16edc:	cmp	r3, #1
   16ee0:	ble	16f04 <_start@@Base+0x1c28>
   16ee4:	ldrb	r3, [r1]
   16ee8:	cmp	r3, #32
   16eec:	bhi	16f08 <_start@@Base+0x1c2c>
   16ef0:	bne	16f04 <_start@@Base+0x1c28>
   16ef4:	ldrb	r3, [r1, #1]
   16ef8:	cmp	r3, #32
   16efc:	addhi	r1, r1, #1
   16f00:	bhi	16f08 <_start@@Base+0x1c2c>
   16f04:	b	25380 <flatcc_json_parser_space_ext@@Base>
   16f08:	mov	r0, r1
   16f0c:	bx	lr
   16f10:	push	{r4, r5, r6, lr}
   16f14:	mov	r4, r2
   16f18:	mov	r5, r3
   16f1c:	mov	r6, r0
   16f20:	bl	16ed8 <_start@@Base+0x1bfc>
   16f24:	cmp	r4, r0
   16f28:	moveq	r3, #0
   16f2c:	beq	16fc0 <_start@@Base+0x1ce4>
   16f30:	ldrb	r3, [r0]
   16f34:	cmp	r3, #44	; 0x2c
   16f38:	beq	16f70 <_start@@Base+0x1c94>
   16f3c:	mov	r3, #0
   16f40:	str	r3, [r5]
   16f44:	ldrb	r3, [r0]
   16f48:	cmp	r3, #93	; 0x5d
   16f4c:	movne	r3, #9
   16f50:	movne	r2, r4
   16f54:	movne	r1, r0
   16f58:	bne	16f9c <_start@@Base+0x1cc0>
   16f5c:	mov	r2, r4
   16f60:	add	r1, r0, #1
   16f64:	mov	r0, r6
   16f68:	pop	{r4, r5, r6, lr}
   16f6c:	b	16ed8 <_start@@Base+0x1bfc>
   16f70:	add	r1, r0, #1
   16f74:	mov	r2, r4
   16f78:	mov	r0, r6
   16f7c:	bl	16ed8 <_start@@Base+0x1bfc>
   16f80:	cmp	r4, r0
   16f84:	bne	16fa8 <_start@@Base+0x1ccc>
   16f88:	mov	r3, #0
   16f8c:	mov	r2, r4
   16f90:	mov	r1, r4
   16f94:	str	r3, [r5]
   16f98:	mov	r3, #9
   16f9c:	mov	r0, r6
   16fa0:	pop	{r4, r5, r6, lr}
   16fa4:	b	251c8 <flatcc_json_parser_set_error@@Base>
   16fa8:	ldrb	r3, [r0]
   16fac:	cmp	r3, #93	; 0x5d
   16fb0:	movne	r3, #1
   16fb4:	moveq	r3, #0
   16fb8:	streq	r3, [r5]
   16fbc:	beq	16f5c <_start@@Base+0x1c80>
   16fc0:	str	r3, [r5]
   16fc4:	pop	{r4, r5, r6, pc}
   16fc8:	push	{r4, r5, r6, lr}
   16fcc:	mov	r4, r2
   16fd0:	mov	r5, r3
   16fd4:	mov	r6, r0
   16fd8:	bl	16ed8 <_start@@Base+0x1bfc>
   16fdc:	cmp	r4, r0
   16fe0:	moveq	r3, #0
   16fe4:	beq	17078 <_start@@Base+0x1d9c>
   16fe8:	ldrb	r3, [r0]
   16fec:	cmp	r3, #44	; 0x2c
   16ff0:	beq	17028 <_start@@Base+0x1d4c>
   16ff4:	mov	r3, #0
   16ff8:	str	r3, [r5]
   16ffc:	ldrb	r3, [r0]
   17000:	cmp	r3, #125	; 0x7d
   17004:	movne	r3, #10
   17008:	movne	r2, r4
   1700c:	movne	r1, r0
   17010:	bne	17054 <_start@@Base+0x1d78>
   17014:	mov	r2, r4
   17018:	add	r1, r0, #1
   1701c:	mov	r0, r6
   17020:	pop	{r4, r5, r6, lr}
   17024:	b	16ed8 <_start@@Base+0x1bfc>
   17028:	add	r1, r0, #1
   1702c:	mov	r2, r4
   17030:	mov	r0, r6
   17034:	bl	16ed8 <_start@@Base+0x1bfc>
   17038:	cmp	r4, r0
   1703c:	bne	17060 <_start@@Base+0x1d84>
   17040:	mov	r3, #0
   17044:	mov	r2, r4
   17048:	mov	r1, r4
   1704c:	str	r3, [r5]
   17050:	mov	r3, #10
   17054:	mov	r0, r6
   17058:	pop	{r4, r5, r6, lr}
   1705c:	b	251c8 <flatcc_json_parser_set_error@@Base>
   17060:	ldrb	r3, [r0]
   17064:	cmp	r3, #125	; 0x7d
   17068:	movne	r3, #1
   1706c:	moveq	r3, #0
   17070:	streq	r3, [r5]
   17074:	beq	17014 <_start@@Base+0x1d38>
   17078:	str	r3, [r5]
   1707c:	pop	{r4, r5, r6, pc}
   17080:	sub	r1, r1, r0
   17084:	cmp	r1, r2
   17088:	bxle	lr
   1708c:	ldrb	r3, [r0, r2]
   17090:	cmp	r3, #46	; 0x2e
   17094:	addeq	r2, r2, #1
   17098:	addeq	r0, r0, r2
   1709c:	bx	lr
   170a0:	mov	r3, #8
   170a4:	push	{r4, lr}
   170a8:	mov	r1, #0
   170ac:	mov	r2, r3
   170b0:	mov	r4, r0
   170b4:	bl	23b58 <flatcc_verify_field@@Base>
   170b8:	cmp	r0, #0
   170bc:	popne	{r4, pc}
   170c0:	mov	r3, #4
   170c4:	mov	r0, r4
   170c8:	pop	{r4, lr}
   170cc:	mov	r2, r3
   170d0:	mov	r1, #1
   170d4:	b	23b58 <flatcc_verify_field@@Base>
   170d8:	mov	r3, #1
   170dc:	push	{r4, lr}
   170e0:	mov	r1, #0
   170e4:	mov	r2, r3
   170e8:	mov	r4, r0
   170ec:	bl	23b58 <flatcc_verify_field@@Base>
   170f0:	cmp	r0, #0
   170f4:	popne	{r4, pc}
   170f8:	mov	r3, #1
   170fc:	mov	r0, r4
   17100:	mov	r2, r3
   17104:	mov	r1, r3
   17108:	bl	23b58 <flatcc_verify_field@@Base>
   1710c:	cmp	r0, #0
   17110:	popne	{r4, pc}
   17114:	mov	r3, #1
   17118:	mov	r1, #2
   1711c:	mov	r2, r3
   17120:	mov	r0, r4
   17124:	bl	23b58 <flatcc_verify_field@@Base>
   17128:	cmp	r0, #0
   1712c:	popne	{r4, pc}
   17130:	mov	r3, #1
   17134:	mov	r0, r4
   17138:	pop	{r4, lr}
   1713c:	mov	r2, r3
   17140:	mov	r1, #3
   17144:	b	23b58 <flatcc_verify_field@@Base>
   17148:	mov	r2, #0
   1714c:	push	{r4, lr}
   17150:	mov	r4, r0
   17154:	mov	r1, r2
   17158:	bl	23bb8 <flatcc_verify_string_field@@Base>
   1715c:	cmp	r0, #0
   17160:	popne	{r4, pc}
   17164:	mov	r3, #8
   17168:	mov	r1, #1
   1716c:	mov	r2, r3
   17170:	mov	r0, r4
   17174:	bl	23b58 <flatcc_verify_field@@Base>
   17178:	cmp	r0, #0
   1717c:	popne	{r4, pc}
   17180:	mov	r3, #2
   17184:	mov	r0, r4
   17188:	pop	{r4, lr}
   1718c:	mov	r2, r3
   17190:	mov	r1, r3
   17194:	b	23b58 <flatcc_verify_field@@Base>
   17198:	mov	r2, #0
   1719c:	push	{r4, lr}
   171a0:	mov	r4, r0
   171a4:	mov	r1, r2
   171a8:	bl	23bb8 <flatcc_verify_string_field@@Base>
   171ac:	subs	r2, r0, #0
   171b0:	bne	17280 <_start@@Base+0x1fa4>
   171b4:	mov	r3, #4
   171b8:	mov	r1, #1
   171bc:	mov	r2, r3
   171c0:	mov	r0, r4
   171c4:	bl	23b58 <flatcc_verify_field@@Base>
   171c8:	subs	r2, r0, #0
   171cc:	bne	17280 <_start@@Base+0x1fa4>
   171d0:	mov	r1, #2
   171d4:	mov	r0, r4
   171d8:	bl	23bb8 <flatcc_verify_string_field@@Base>
   171dc:	subs	r2, r0, #0
   171e0:	bne	17280 <_start@@Base+0x1fa4>
   171e4:	mov	r3, #8
   171e8:	mov	r1, #3
   171ec:	mov	r2, r3
   171f0:	mov	r0, r4
   171f4:	bl	23b58 <flatcc_verify_field@@Base>
   171f8:	subs	r2, r0, #0
   171fc:	bne	17280 <_start@@Base+0x1fa4>
   17200:	mov	r1, #4
   17204:	mov	r0, r4
   17208:	bl	23bb8 <flatcc_verify_string_field@@Base>
   1720c:	subs	r2, r0, #0
   17210:	bne	17280 <_start@@Base+0x1fa4>
   17214:	mov	r3, #8
   17218:	mov	r1, #5
   1721c:	mov	r2, r3
   17220:	mov	r0, r4
   17224:	bl	23b58 <flatcc_verify_field@@Base>
   17228:	subs	r2, r0, #0
   1722c:	bne	17280 <_start@@Base+0x1fa4>
   17230:	mov	r3, #4
   17234:	mov	r1, #6
   17238:	mov	r2, r3
   1723c:	mov	r0, r4
   17240:	bl	23b58 <flatcc_verify_field@@Base>
   17244:	subs	r2, r0, #0
   17248:	bne	17280 <_start@@Base+0x1fa4>
   1724c:	mov	r3, #8
   17250:	mov	r1, #7
   17254:	mov	r2, r3
   17258:	mov	r0, r4
   1725c:	bl	23b58 <flatcc_verify_field@@Base>
   17260:	subs	r2, r0, #0
   17264:	bne	17280 <_start@@Base+0x1fa4>
   17268:	mov	r3, #4
   1726c:	mov	r0, r4
   17270:	pop	{r4, lr}
   17274:	mov	r2, r3
   17278:	mov	r1, #8
   1727c:	b	23b58 <flatcc_verify_field@@Base>
   17280:	mov	r0, r2
   17284:	pop	{r4, pc}
   17288:	mov	r2, #0
   1728c:	push	{r4, lr}
   17290:	mov	r4, r0
   17294:	mov	r1, r2
   17298:	ldr	r3, [pc, #60]	; 172dc <_start@@Base+0x2000>
   1729c:	bl	23cf4 <flatcc_verify_table_field@@Base>
   172a0:	subs	r2, r0, #0
   172a4:	bne	172d4 <_start@@Base+0x1ff8>
   172a8:	ldr	r3, [pc, #48]	; 172e0 <_start@@Base+0x2004>
   172ac:	mov	r1, #1
   172b0:	mov	r0, r4
   172b4:	bl	23cf4 <flatcc_verify_table_field@@Base>
   172b8:	subs	r2, r0, #0
   172bc:	bne	172d4 <_start@@Base+0x1ff8>
   172c0:	mov	r0, r4
   172c4:	ldr	r3, [pc, #24]	; 172e4 <_start@@Base+0x2008>
   172c8:	mov	r1, #2
   172cc:	pop	{r4, lr}
   172d0:	b	23cf4 <flatcc_verify_table_field@@Base>
   172d4:	mov	r0, r2
   172d8:	pop	{r4, pc}
   172dc:	muleq	r1, r8, r1
   172e0:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   172e4:	andeq	r7, r1, r0, lsr #1
   172e8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   172ec:	mov	r2, #32
   172f0:	mov	r3, #16
   172f4:	mov	r1, #0
   172f8:	mov	r4, r0
   172fc:	bl	23b58 <flatcc_verify_field@@Base>
   17300:	subs	r2, r0, #0
   17304:	bne	176b8 <_start@@Base+0x23dc>
   17308:	mov	r3, #2
   1730c:	mov	r0, r4
   17310:	mov	r2, r3
   17314:	mov	r1, r3
   17318:	bl	23b58 <flatcc_verify_field@@Base>
   1731c:	subs	r2, r0, #0
   17320:	bne	176b8 <_start@@Base+0x23dc>
   17324:	mov	r3, #2
   17328:	mov	r1, #1
   1732c:	mov	r2, r3
   17330:	mov	r0, r4
   17334:	bl	23b58 <flatcc_verify_field@@Base>
   17338:	subs	r2, r0, #0
   1733c:	bne	176b8 <_start@@Base+0x23dc>
   17340:	mov	r2, #1
   17344:	mov	r1, #3
   17348:	mov	r0, r4
   1734c:	bl	23bb8 <flatcc_verify_string_field@@Base>
   17350:	subs	r2, r0, #0
   17354:	bne	176b8 <_start@@Base+0x23dc>
   17358:	mov	r3, #1
   1735c:	mov	r1, #6
   17360:	mov	r2, r3
   17364:	mov	r0, r4
   17368:	bl	23b58 <flatcc_verify_field@@Base>
   1736c:	subs	r2, r0, #0
   17370:	bne	176b8 <_start@@Base+0x23dc>
   17374:	mov	r5, #1
   17378:	mvn	r6, #0
   1737c:	mov	r3, r5
   17380:	mov	r1, #5
   17384:	mov	r0, r4
   17388:	stm	sp, {r5, r6}
   1738c:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   17390:	subs	r2, r0, #0
   17394:	bne	176b8 <_start@@Base+0x23dc>
   17398:	ldr	r3, [pc, #804]	; 176c4 <_start@@Base+0x23e8>
   1739c:	mov	r1, #11
   173a0:	mov	r0, r4
   173a4:	bl	23d3c <flatcc_verify_table_vector_field@@Base>
   173a8:	subs	r2, r0, #0
   173ac:	bne	176b8 <_start@@Base+0x23dc>
   173b0:	mov	r1, #10
   173b4:	mov	r0, r4
   173b8:	bl	23c44 <flatcc_verify_string_vector_field@@Base>
   173bc:	subs	r2, r0, #0
   173c0:	bne	176b8 <_start@@Base+0x23dc>
   173c4:	mov	r1, #28
   173c8:	mov	r0, r4
   173cc:	bl	23c44 <flatcc_verify_string_vector_field@@Base>
   173d0:	subs	r2, r0, #0
   173d4:	bne	176b8 <_start@@Base+0x23dc>
   173d8:	mov	r3, r5
   173dc:	mov	r1, #24
   173e0:	stm	sp, {r5, r6}
   173e4:	mov	r0, r4
   173e8:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   173ec:	subs	r2, r0, #0
   173f0:	bne	176b8 <_start@@Base+0x23dc>
   173f4:	mvn	r3, #-536870912	; 0xe0000000
   173f8:	mov	r5, #4
   173fc:	mov	r2, #0
   17400:	mov	r1, #29
   17404:	mov	r0, r4
   17408:	str	r5, [sp]
   1740c:	str	r3, [sp, #4]
   17410:	mov	r3, #8
   17414:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   17418:	subs	r2, r0, #0
   1741c:	bne	176b8 <_start@@Base+0x23dc>
   17420:	ldr	r6, [pc, #668]	; 176c4 <_start@@Base+0x23e8>
   17424:	mov	r1, #12
   17428:	mov	r0, r4
   1742c:	mov	r3, r6
   17430:	bl	23cf4 <flatcc_verify_table_field@@Base>
   17434:	subs	r2, r0, #0
   17438:	bne	176b8 <_start@@Base+0x23dc>
   1743c:	ldr	r3, [pc, #644]	; 176c8 <_start@@Base+0x23ec>
   17440:	mov	r1, #8
   17444:	mov	r0, r4
   17448:	bl	241d8 <flatcc_verify_union_field@@Base>
   1744c:	subs	r2, r0, #0
   17450:	bne	176b8 <_start@@Base+0x23dc>
   17454:	mvn	r8, #-1073741824	; 0xc0000000
   17458:	mov	r7, #2
   1745c:	mov	r3, r5
   17460:	mov	r1, #9
   17464:	mov	r0, r4
   17468:	stm	sp, {r7, r8}
   1746c:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   17470:	subs	r2, r0, #0
   17474:	bne	176b8 <_start@@Base+0x23dc>
   17478:	mov	r3, r5
   1747c:	mov	r1, #31
   17480:	stm	sp, {r7, r8}
   17484:	mov	r0, r4
   17488:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   1748c:	subs	r2, r0, #0
   17490:	bne	176b8 <_start@@Base+0x23dc>
   17494:	str	r6, [sp, #4]
   17498:	mov	r6, #1
   1749c:	mov	r3, r2
   174a0:	mov	r1, #13
   174a4:	mov	r0, r4
   174a8:	str	r6, [sp]
   174ac:	bl	240fc <flatcc_verify_table_as_nested_root@@Base>
   174b0:	subs	r2, r0, #0
   174b4:	bne	176b8 <_start@@Base+0x23dc>
   174b8:	ldr	r3, [pc, #524]	; 176cc <_start@@Base+0x23f0>
   174bc:	mov	r1, #14
   174c0:	mov	r0, r4
   174c4:	bl	23cf4 <flatcc_verify_table_field@@Base>
   174c8:	subs	r2, r0, #0
   174cc:	bne	176b8 <_start@@Base+0x23dc>
   174d0:	mov	r2, r6
   174d4:	mov	r3, r6
   174d8:	mov	r1, #15
   174dc:	mov	r0, r4
   174e0:	bl	23b58 <flatcc_verify_field@@Base>
   174e4:	subs	r2, r0, #0
   174e8:	bne	176b8 <_start@@Base+0x23dc>
   174ec:	mov	r2, r5
   174f0:	mov	r3, r5
   174f4:	mov	r1, #16
   174f8:	mov	r0, r4
   174fc:	bl	23b58 <flatcc_verify_field@@Base>
   17500:	subs	r2, r0, #0
   17504:	bne	176b8 <_start@@Base+0x23dc>
   17508:	mov	r2, r5
   1750c:	mov	r3, r5
   17510:	mov	r1, #17
   17514:	mov	r0, r4
   17518:	bl	23b58 <flatcc_verify_field@@Base>
   1751c:	subs	r2, r0, #0
   17520:	bne	176b8 <_start@@Base+0x23dc>
   17524:	mov	r3, #8
   17528:	mov	r1, #18
   1752c:	mov	r2, r3
   17530:	mov	r0, r4
   17534:	bl	23b58 <flatcc_verify_field@@Base>
   17538:	subs	r2, r0, #0
   1753c:	bne	176b8 <_start@@Base+0x23dc>
   17540:	mov	r3, #8
   17544:	mov	r1, #19
   17548:	mov	r2, r3
   1754c:	mov	r0, r4
   17550:	bl	23b58 <flatcc_verify_field@@Base>
   17554:	subs	r2, r0, #0
   17558:	bne	176b8 <_start@@Base+0x23dc>
   1755c:	mov	r2, r5
   17560:	mov	r3, r5
   17564:	mov	r1, #20
   17568:	mov	r0, r4
   1756c:	bl	23b58 <flatcc_verify_field@@Base>
   17570:	subs	r2, r0, #0
   17574:	bne	176b8 <_start@@Base+0x23dc>
   17578:	mov	r2, r5
   1757c:	mov	r3, r5
   17580:	mov	r1, #21
   17584:	mov	r0, r4
   17588:	bl	23b58 <flatcc_verify_field@@Base>
   1758c:	subs	r2, r0, #0
   17590:	bne	176b8 <_start@@Base+0x23dc>
   17594:	mov	r3, #8
   17598:	mov	r1, #22
   1759c:	mov	r2, r3
   175a0:	mov	r0, r4
   175a4:	bl	23b58 <flatcc_verify_field@@Base>
   175a8:	subs	r2, r0, #0
   175ac:	bne	176b8 <_start@@Base+0x23dc>
   175b0:	mov	r3, #8
   175b4:	mov	r1, #23
   175b8:	mov	r2, r3
   175bc:	mov	r0, r4
   175c0:	bl	23b58 <flatcc_verify_field@@Base>
   175c4:	subs	r2, r0, #0
   175c8:	bne	176b8 <_start@@Base+0x23dc>
   175cc:	mov	r2, r5
   175d0:	mov	r3, r5
   175d4:	mov	r1, #25
   175d8:	mov	r0, r4
   175dc:	bl	23b58 <flatcc_verify_field@@Base>
   175e0:	subs	r2, r0, #0
   175e4:	bne	176b8 <_start@@Base+0x23dc>
   175e8:	mov	r2, r5
   175ec:	mov	r3, r5
   175f0:	mov	r1, #26
   175f4:	mov	r0, r4
   175f8:	bl	23b58 <flatcc_verify_field@@Base>
   175fc:	subs	r2, r0, #0
   17600:	bne	176b8 <_start@@Base+0x23dc>
   17604:	mov	r2, r5
   17608:	mov	r3, r5
   1760c:	mov	r1, #27
   17610:	mov	r0, r4
   17614:	bl	23b58 <flatcc_verify_field@@Base>
   17618:	subs	r2, r0, #0
   1761c:	bne	176b8 <_start@@Base+0x23dc>
   17620:	mvn	r3, #0
   17624:	mov	r1, #30
   17628:	str	r6, [sp]
   1762c:	mov	r0, r4
   17630:	str	r3, [sp, #4]
   17634:	mov	r3, r6
   17638:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   1763c:	subs	r2, r0, #0
   17640:	bne	176b8 <_start@@Base+0x23dc>
   17644:	mov	r5, #8
   17648:	mvn	r6, #-536870912	; 0xe0000000
   1764c:	mov	r2, #0
   17650:	mov	r3, r5
   17654:	mov	r1, #32
   17658:	mov	r0, r4
   1765c:	stm	sp, {r5, r6}
   17660:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   17664:	subs	r2, r0, #0
   17668:	bne	176b8 <_start@@Base+0x23dc>
   1766c:	mov	r3, r5
   17670:	mov	r1, #33	; 0x21
   17674:	stm	sp, {r5, r6}
   17678:	mov	r0, r4
   1767c:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   17680:	subs	r2, r0, #0
   17684:	bne	176b8 <_start@@Base+0x23dc>
   17688:	ldr	r3, [pc, #64]	; 176d0 <_start@@Base+0x23f4>
   1768c:	mov	r1, #34	; 0x22
   17690:	mov	r0, r4
   17694:	bl	23cf4 <flatcc_verify_table_field@@Base>
   17698:	subs	r2, r0, #0
   1769c:	bne	176b8 <_start@@Base+0x23dc>
   176a0:	ldr	r3, [pc, #44]	; 176d4 <_start@@Base+0x23f8>
   176a4:	mov	r1, #35	; 0x23
   176a8:	mov	r0, r4
   176ac:	add	sp, sp, #8
   176b0:	pop	{r4, r5, r6, r7, r8, lr}
   176b4:	b	23cf4 <flatcc_verify_table_field@@Base>
   176b8:	mov	r0, r2
   176bc:	add	sp, sp, #8
   176c0:	pop	{r4, r5, r6, r7, r8, pc}
   176c4:	andeq	r7, r1, r8, ror #5
   176c8:	andeq	r7, r1, r0, asr r7
   176cc:	andeq	r7, r1, r8, asr #2
   176d0:	andeq	r5, r1, r8, lsl #10
   176d4:	ldrdeq	r7, [r1], -r8
   176d8:	push	{r0, r1, r4, r5, r6, lr}
   176dc:	mov	r4, #1
   176e0:	mvn	r6, #0
   176e4:	mov	r2, #0
   176e8:	mov	r3, r4
   176ec:	mov	r1, r2
   176f0:	mov	r5, r0
   176f4:	stm	sp, {r4, r6}
   176f8:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   176fc:	cmp	r0, #0
   17700:	bne	17744 <_start@@Base+0x2468>
   17704:	mov	r2, r0
   17708:	mov	r3, r4
   1770c:	stm	sp, {r4, r6}
   17710:	mov	r1, r4
   17714:	mov	r0, r5
   17718:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   1771c:	cmp	r0, #0
   17720:	bne	17744 <_start@@Base+0x2468>
   17724:	ldr	r3, [pc, #32]	; 1774c <_start@@Base+0x2470>
   17728:	mov	r2, r0
   1772c:	mov	r1, #2
   17730:	str	r4, [sp]
   17734:	str	r3, [sp, #4]
   17738:	mov	r3, r0
   1773c:	mov	r0, r5
   17740:	bl	240fc <flatcc_verify_table_as_nested_root@@Base>
   17744:	add	sp, sp, #8
   17748:	pop	{r4, r5, r6, pc}
   1774c:	andeq	r7, r1, r8, ror #5
   17750:	ldrb	r3, [r0, #12]
   17754:	sub	r3, r3, #1
   17758:	cmp	r3, #3
   1775c:	ldrls	pc, [pc, r3, lsl #2]
   17760:	b	17794 <_start@@Base+0x24b8>
   17764:	andeq	r7, r1, r4, ror r7
   17768:	andeq	r7, r1, ip, ror r7
   1776c:	andeq	r7, r1, r4, lsl #15
   17770:	andeq	r7, r1, ip, lsl #15
   17774:	ldr	r1, [pc, #32]	; 1779c <_start@@Base+0x24c0>
   17778:	b	23e30 <flatcc_verify_union_table@@Base>
   1777c:	ldr	r1, [pc, #28]	; 177a0 <_start@@Base+0x24c4>
   17780:	b	17778 <_start@@Base+0x249c>
   17784:	ldr	r1, [pc, #24]	; 177a4 <_start@@Base+0x24c8>
   17788:	b	17778 <_start@@Base+0x249c>
   1778c:	ldr	r1, [pc, #20]	; 177a8 <_start@@Base+0x24cc>
   17790:	b	17778 <_start@@Base+0x249c>
   17794:	mov	r0, #0
   17798:	bx	lr
   1779c:	andeq	r7, r1, r8, ror #5
   177a0:	ldrdeq	r7, [r1], -r8
   177a4:	andeq	r9, r1, r8, ror r0
   177a8:	andeq	r7, r1, ip, lsr #15
   177ac:	mov	r2, #0
   177b0:	push	{r4, lr}
   177b4:	mov	r4, r0
   177b8:	mov	r1, r2
   177bc:	ldr	r3, [pc, #60]	; 17800 <_start@@Base+0x2524>
   177c0:	bl	23cf4 <flatcc_verify_table_field@@Base>
   177c4:	subs	r2, r0, #0
   177c8:	bne	177f8 <_start@@Base+0x251c>
   177cc:	ldr	r3, [pc, #48]	; 17804 <_start@@Base+0x2528>
   177d0:	mov	r1, #1
   177d4:	mov	r0, r4
   177d8:	bl	23cf4 <flatcc_verify_table_field@@Base>
   177dc:	subs	r2, r0, #0
   177e0:	bne	177f8 <_start@@Base+0x251c>
   177e4:	mov	r0, r4
   177e8:	ldr	r3, [pc, #24]	; 17808 <_start@@Base+0x252c>
   177ec:	mov	r1, #3
   177f0:	pop	{r4, lr}
   177f4:	b	242e4 <flatcc_verify_union_vector_field@@Base>
   177f8:	mov	r0, r2
   177fc:	pop	{r4, pc}
   17800:	andeq	r7, r1, r8, lsl #5
   17804:	andeq	r7, r1, ip, lsl #16
   17808:	andeq	r7, r1, r0, asr r7
   1780c:	push	{r4, lr}
   17810:	mov	r2, #0
   17814:	mov	r1, #1
   17818:	mov	r4, r0
   1781c:	ldr	r3, [pc, #108]	; 17890 <_start@@Base+0x25b4>
   17820:	bl	241d8 <flatcc_verify_union_field@@Base>
   17824:	subs	r2, r0, #0
   17828:	bne	17888 <_start@@Base+0x25ac>
   1782c:	ldr	r3, [pc, #92]	; 17890 <_start@@Base+0x25b4>
   17830:	mov	r1, #3
   17834:	mov	r0, r4
   17838:	bl	241d8 <flatcc_verify_union_field@@Base>
   1783c:	subs	r2, r0, #0
   17840:	bne	17888 <_start@@Base+0x25ac>
   17844:	ldr	r3, [pc, #68]	; 17890 <_start@@Base+0x25b4>
   17848:	mov	r1, #5
   1784c:	mov	r0, r4
   17850:	bl	241d8 <flatcc_verify_union_field@@Base>
   17854:	subs	r2, r0, #0
   17858:	bne	17888 <_start@@Base+0x25ac>
   1785c:	ldr	r3, [pc, #44]	; 17890 <_start@@Base+0x25b4>
   17860:	mov	r1, #7
   17864:	mov	r0, r4
   17868:	bl	241d8 <flatcc_verify_union_field@@Base>
   1786c:	subs	r2, r0, #0
   17870:	bne	17888 <_start@@Base+0x25ac>
   17874:	mov	r0, r4
   17878:	ldr	r3, [pc, #16]	; 17890 <_start@@Base+0x25b4>
   1787c:	mov	r1, #9
   17880:	pop	{r4, lr}
   17884:	b	242e4 <flatcc_verify_union_vector_field@@Base>
   17888:	mov	r0, r2
   1788c:	pop	{r4, pc}
   17890:	muleq	r1, r4, r8
   17894:	ldrb	r3, [r0, #12]
   17898:	mov	r2, r0
   1789c:	cmp	r3, #10
   178a0:	bhi	178c8 <_start@@Base+0x25ec>
   178a4:	cmp	r3, #9
   178a8:	bcs	178e8 <_start@@Base+0x260c>
   178ac:	cmp	r3, #2
   178b0:	beq	178e0 <_start@@Base+0x2604>
   178b4:	cmp	r3, #8
   178b8:	moveq	r2, #2
   178bc:	beq	178ec <_start@@Base+0x2610>
   178c0:	mov	r0, #0
   178c4:	bx	lr
   178c8:	cmp	r3, #11
   178cc:	beq	178d8 <_start@@Base+0x25fc>
   178d0:	cmp	r3, #255	; 0xff
   178d4:	bne	178c0 <_start@@Base+0x25e4>
   178d8:	mov	r0, r2
   178dc:	b	23e7c <flatcc_verify_union_string@@Base>
   178e0:	ldr	r1, [pc, #12]	; 178f4 <_start@@Base+0x2618>
   178e4:	b	23e30 <flatcc_verify_union_table@@Base>
   178e8:	mov	r2, #4
   178ec:	mov	r1, r2
   178f0:	b	23e58 <flatcc_verify_union_struct@@Base>
   178f4:	andeq	r5, r1, r0, lsl r5
   178f8:	sub	r1, r1, #1
   178fc:	cmp	r1, #3
   17900:	ldrls	pc, [pc, r1, lsl #2]
   17904:	b	17948 <_start@@Base+0x266c>
   17908:	andeq	r7, r1, r8, lsl r9
   1790c:	andeq	r7, r1, r4, lsr #18
   17910:	andeq	r7, r1, r0, lsr r9
   17914:	andeq	r7, r1, ip, lsr r9
   17918:	ldr	r1, [pc, #52]	; 17954 <_start@@Base+0x2678>
   1791c:	mov	r2, #7
   17920:	b	29478 <flatcc_json_printer_enum@@Base>
   17924:	mov	r2, #23
   17928:	ldr	r1, [pc, #40]	; 17958 <_start@@Base+0x267c>
   1792c:	b	17920 <_start@@Base+0x2644>
   17930:	mov	r2, #8
   17934:	ldr	r1, [pc, #32]	; 1795c <_start@@Base+0x2680>
   17938:	b	17920 <_start@@Base+0x2644>
   1793c:	mov	r2, #3
   17940:	ldr	r1, [pc, #24]	; 17960 <_start@@Base+0x2684>
   17944:	b	17920 <_start@@Base+0x2644>
   17948:	mov	r2, #4
   1794c:	ldr	r1, [pc, #16]	; 17964 <_start@@Base+0x2688>
   17950:	b	17920 <_start@@Base+0x2644>
   17954:	muleq	r2, r9, ip
   17958:	andeq	lr, r2, r1, lsr #25
   1795c:			; <UNDEFINED> instruction: 0x0002ecb9
   17960:	andeq	lr, r2, r2, asr #25
   17964:	strdeq	r3, [r3], -r1
   17968:	push	{r4, r5, r6, r7, r8, lr}
   1796c:	mov	r4, #0
   17970:	sub	sp, sp, #24
   17974:	mov	r5, #0
   17978:	mov	lr, #0
   1797c:	cmp	r1, r2
   17980:	moveq	r0, r1
   17984:	strd	r4, [r3]
   17988:	str	lr, [sp, #12]
   1798c:	strd	r4, [sp, #16]
   17990:	beq	17a0c <_start@@Base+0x2730>
   17994:	mov	r6, r3
   17998:	add	r3, sp, #16
   1799c:	mov	r4, r1
   179a0:	mov	r8, r0
   179a4:	str	r3, [sp]
   179a8:	add	r3, sp, #12
   179ac:	mov	r7, r2
   179b0:	bl	2640c <flatcc_json_parser_integer@@Base>
   179b4:	cmp	r4, r0
   179b8:	beq	17a0c <_start@@Base+0x2730>
   179bc:	ldr	r3, [sp, #12]
   179c0:	ldrd	r4, [sp, #16]
   179c4:	cmp	r3, #0
   179c8:	beq	179ec <_start@@Base+0x2710>
   179cc:	cmp	r5, #-2147483648	; 0x80000000
   179d0:	cmpeq	r4, #0
   179d4:	movhi	r3, #8
   179d8:	bhi	179fc <_start@@Base+0x2720>
   179dc:	rsbs	r4, r4, #0
   179e0:	rsc	r5, r5, #0
   179e4:	strd	r4, [r6]
   179e8:	b	17a0c <_start@@Base+0x2730>
   179ec:	cmp	r4, #0
   179f0:	sbcs	r3, r5, #0
   179f4:	bge	179e4 <_start@@Base+0x2708>
   179f8:	mov	r3, #7
   179fc:	mov	r1, r0
   17a00:	mov	r2, r7
   17a04:	mov	r0, r8
   17a08:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   17a0c:	add	sp, sp, #24
   17a10:	pop	{r4, r5, r6, r7, r8, pc}
   17a14:	cmp	r1, r2
   17a18:	beq	17a64 <_start@@Base+0x2788>
   17a1c:	ldrb	r3, [r1]
   17a20:	push	{lr}		; (str lr, [sp, #-4]!)
   17a24:	mov	lr, r0
   17a28:	cmp	r3, #34	; 0x22
   17a2c:	moveq	r2, #0
   17a30:	addeq	r3, r1, #1
   17a34:	streq	r2, [r0, #12]
   17a38:	beq	17a5c <_start@@Base+0x2780>
   17a3c:	cmp	r3, #46	; 0x2e
   17a40:	movne	r3, #1
   17a44:	strne	r3, [r0, #12]
   17a48:	movne	r3, r1
   17a4c:	bne	17a5c <_start@@Base+0x2780>
   17a50:	mov	r3, #5
   17a54:	pop	{lr}		; (ldr lr, [sp], #4)
   17a58:	b	251c8 <flatcc_json_parser_set_error@@Base>
   17a5c:	mov	r0, r3
   17a60:	pop	{pc}		; (ldr pc, [sp], #4)
   17a64:	mov	r0, r2
   17a68:	bx	lr
   17a6c:	push	{r4, r5, r6, lr}
   17a70:	mov	r4, r0
   17a74:	mov	r5, r2
   17a78:	bl	17a14 <_start@@Base+0x2738>
   17a7c:	ldr	r3, [r4, #12]
   17a80:	cmp	r3, #0
   17a84:	popne	{r4, r5, r6, pc}
   17a88:	mov	r1, r0
   17a8c:	mov	r2, r5
   17a90:	mov	r0, r4
   17a94:	pop	{r4, r5, r6, lr}
   17a98:	b	16ed8 <_start@@Base+0x1bfc>
   17a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aa0:	sub	sp, sp, #28
   17aa4:	mov	r6, #0
   17aa8:	mov	r5, r2
   17aac:	mov	r7, r0
   17ab0:	mov	sl, r3
   17ab4:	ldr	fp, [sp, #64]	; 0x40
   17ab8:	strb	r6, [fp]
   17abc:	bl	17a6c <_start@@Base+0x2790>
   17ac0:	mov	r4, r0
   17ac4:	cmp	r5, r0
   17ac8:	beq	17b90 <_start@@Base+0x28b4>
   17acc:	mov	r8, sl
   17ad0:	mov	r9, r4
   17ad4:	add	r3, sp, #12
   17ad8:	mov	r1, r4
   17adc:	mov	r2, r5
   17ae0:	mov	r0, r7
   17ae4:	str	r3, [sp, #4]
   17ae8:	add	r3, sp, #16
   17aec:	str	r3, [sp]
   17af0:	add	r3, sp, #8
   17af4:	ldr	ip, [r8]
   17af8:	blx	ip
   17afc:	cmp	r5, r0
   17b00:	mov	r4, r0
   17b04:	beq	17b90 <_start@@Base+0x28b4>
   17b08:	cmp	r9, r0
   17b0c:	bne	17b64 <_start@@Base+0x2888>
   17b10:	ldr	r3, [r8, #4]!
   17b14:	mov	r9, r0
   17b18:	cmp	r3, #0
   17b1c:	bne	17ad4 <_start@@Base+0x27f8>
   17b20:	mov	r1, r0
   17b24:	mov	r3, #23
   17b28:	mov	r2, r5
   17b2c:	mov	r0, r7
   17b30:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   17b34:	mov	r4, r0
   17b38:	b	17b90 <_start@@Base+0x28b4>
   17b3c:	ldrd	r2, [sp, #16]
   17b40:	orrs	r3, r2, r3
   17b44:	movne	r6, #1
   17b48:	moveq	r6, #0
   17b4c:	ldrb	r3, [fp]
   17b50:	add	r3, r6, r3
   17b54:	strb	r3, [fp]
   17b58:	ldr	r3, [sp, #12]
   17b5c:	cmp	r3, #0
   17b60:	b	17ac8 <_start@@Base+0x27ec>
   17b64:	ldr	r3, [sp, #8]
   17b68:	cmp	r3, #0
   17b6c:	beq	17b3c <_start@@Base+0x2860>
   17b70:	mov	r3, #8
   17b74:	mov	r2, r5
   17b78:	mov	r1, r4
   17b7c:	mov	r0, r7
   17b80:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   17b84:	cmp	r5, r0
   17b88:	bne	17b4c <_start@@Base+0x2870>
   17b8c:	mov	r4, r5
   17b90:	mov	r0, r4
   17b94:	add	sp, sp, #28
   17b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba0:	sub	sp, sp, #28
   17ba4:	mov	sl, r3
   17ba8:	mov	r3, #0
   17bac:	mov	r5, r2
   17bb0:	mov	r8, r0
   17bb4:	ldr	r6, [sp, #64]	; 0x40
   17bb8:	str	r3, [r6]
   17bbc:	bl	17a6c <_start@@Base+0x2790>
   17bc0:	cmp	r5, r0
   17bc4:	mov	r4, r0
   17bc8:	beq	17c68 <_start@@Base+0x298c>
   17bcc:	add	fp, sp, #12
   17bd0:	mov	r7, sl
   17bd4:	mov	r9, r4
   17bd8:	add	r3, sp, #16
   17bdc:	mov	r1, r4
   17be0:	mov	r2, r5
   17be4:	mov	r0, r8
   17be8:	stm	sp, {r3, fp}
   17bec:	add	r3, sp, #8
   17bf0:	ldr	ip, [r7]
   17bf4:	blx	ip
   17bf8:	cmp	r5, r0
   17bfc:	mov	r4, r0
   17c00:	beq	17c68 <_start@@Base+0x298c>
   17c04:	cmp	r9, r0
   17c08:	bne	17c38 <_start@@Base+0x295c>
   17c0c:	ldr	r3, [r7, #4]!
   17c10:	mov	r9, r0
   17c14:	cmp	r3, #0
   17c18:	bne	17bd8 <_start@@Base+0x28fc>
   17c1c:	mov	r1, r0
   17c20:	mov	r3, #23
   17c24:	mov	r2, r5
   17c28:	mov	r0, r8
   17c2c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   17c30:	mov	r4, r0
   17c34:	b	17c68 <_start@@Base+0x298c>
   17c38:	ldrd	r0, [sp, #16]
   17c3c:	bl	2e5cc <flatcc_json_printer_clear@@Base+0x5bc>
   17c40:	vmov	s15, r0
   17c44:	ldr	r3, [sp, #8]
   17c48:	vldr	s14, [r6]
   17c4c:	cmp	r3, #0
   17c50:	ldr	r3, [sp, #12]
   17c54:	vnegne.f32	s15, s15
   17c58:	cmp	r3, #0
   17c5c:	vadd.f32	s15, s14, s15
   17c60:	vstr	s15, [r6]
   17c64:	bne	17bd0 <_start@@Base+0x28f4>
   17c68:	mov	r0, r4
   17c6c:	add	sp, sp, #28
   17c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c78:	sub	sp, sp, #28
   17c7c:	mov	r5, r2
   17c80:	mov	r8, r0
   17c84:	mov	sl, r3
   17c88:	vldr	d7, [pc, #192]	; 17d50 <_start@@Base+0x2a74>
   17c8c:	ldr	r6, [sp, #64]	; 0x40
   17c90:	vstr	d7, [r6]
   17c94:	bl	17a6c <_start@@Base+0x2790>
   17c98:	cmp	r5, r0
   17c9c:	mov	r4, r0
   17ca0:	beq	17d40 <_start@@Base+0x2a64>
   17ca4:	add	fp, sp, #12
   17ca8:	mov	r7, sl
   17cac:	mov	r9, r4
   17cb0:	add	r3, sp, #16
   17cb4:	mov	r1, r4
   17cb8:	mov	r2, r5
   17cbc:	mov	r0, r8
   17cc0:	stm	sp, {r3, fp}
   17cc4:	add	r3, sp, #8
   17cc8:	ldr	ip, [r7]
   17ccc:	blx	ip
   17cd0:	cmp	r5, r0
   17cd4:	mov	r4, r0
   17cd8:	beq	17d40 <_start@@Base+0x2a64>
   17cdc:	cmp	r9, r0
   17ce0:	bne	17d10 <_start@@Base+0x2a34>
   17ce4:	ldr	r3, [r7, #4]!
   17ce8:	mov	r9, r0
   17cec:	cmp	r3, #0
   17cf0:	bne	17cb0 <_start@@Base+0x29d4>
   17cf4:	mov	r1, r0
   17cf8:	mov	r3, #23
   17cfc:	mov	r2, r5
   17d00:	mov	r0, r8
   17d04:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   17d08:	mov	r4, r0
   17d0c:	b	17d40 <_start@@Base+0x2a64>
   17d10:	ldrd	r0, [sp, #16]
   17d14:	bl	2e394 <flatcc_json_printer_clear@@Base+0x384>
   17d18:	vmov	d7, r0, r1
   17d1c:	ldr	r3, [sp, #8]
   17d20:	vldr	d6, [r6]
   17d24:	cmp	r3, #0
   17d28:	ldr	r3, [sp, #12]
   17d2c:	vnegne.f64	d7, d7
   17d30:	cmp	r3, #0
   17d34:	vadd.f64	d7, d6, d7
   17d38:	vstr	d7, [r6]
   17d3c:	bne	17ca8 <_start@@Base+0x29cc>
   17d40:	mov	r0, r4
   17d44:	add	sp, sp, #28
   17d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d4c:	nop	{0}
	...
   17d58:	push	{r4, r5, r6, r7, r8, lr}
   17d5c:	mov	r5, r1
   17d60:	mov	r7, r0
   17d64:	mov	r1, r2
   17d68:	mov	r0, r5
   17d6c:	mov	r4, r2
   17d70:	mov	r8, r3
   17d74:	bl	153d0 <_start@@Base+0xf4>
   17d78:	add	r3, pc, #104	; 0x68
   17d7c:	ldrd	r2, [r3]
   17d80:	cmp	r1, r3
   17d84:	cmpeq	r0, r2
   17d88:	bne	17de0 <_start@@Base+0x2b04>
   17d8c:	add	r6, r5, #8
   17d90:	mov	r1, r4
   17d94:	mov	r0, r6
   17d98:	bl	153d0 <_start@@Base+0xf4>
   17d9c:	and	r3, r1, #-16777216	; 0xff000000
   17da0:	mov	r2, #0
   17da4:	cmp	r3, #1912602624	; 0x72000000
   17da8:	cmpeq	r2, #0
   17dac:	bne	17de0 <_start@@Base+0x2b04>
   17db0:	mov	r1, r4
   17db4:	mov	r2, #1
   17db8:	mov	r0, r6
   17dbc:	bl	17080 <_start@@Base+0x1da4>
   17dc0:	cmp	r6, r0
   17dc4:	mov	r1, r0
   17dc8:	beq	17de0 <_start@@Base+0x2b04>
   17dcc:	mov	r3, r8
   17dd0:	mov	r2, r4
   17dd4:	mov	r0, r7
   17dd8:	pop	{r4, r5, r6, r7, r8, lr}
   17ddc:	b	16420 <_start@@Base+0x1144>
   17de0:	mov	r0, r5
   17de4:	pop	{r4, r5, r6, r7, r8, pc}
   17de8:	cmnvs	r3, r5, ror #8
   17dec:	cmnmi	r8, #-2147483620	; 0x8000001c
   17df0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17df4:	mov	r4, r1
   17df8:	mov	r9, r0
   17dfc:	mov	r1, r2
   17e00:	mov	r0, r4
   17e04:	mov	sl, r2
   17e08:	mov	r5, r3
   17e0c:	bl	153d0 <_start@@Base+0xf4>
   17e10:	add	r3, pc, #240	; 0xf0
   17e14:	ldrd	r2, [r3]
   17e18:	ldr	fp, [sp, #52]	; 0x34
   17e1c:	cmp	r1, r3
   17e20:	cmpeq	r0, r2
   17e24:	bne	17eb0 <_start@@Base+0x2bd4>
   17e28:	mov	r1, sl
   17e2c:	add	r0, r4, #8
   17e30:	bl	153d0 <_start@@Base+0xf4>
   17e34:	add	r3, pc, #212	; 0xd4
   17e38:	ldrd	r2, [r3]
   17e3c:	cmp	r1, r3
   17e40:	cmpeq	r0, r2
   17e44:	beq	17e54 <_start@@Base+0x2b78>
   17e48:	mov	r0, r4
   17e4c:	add	sp, sp, #12
   17e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e54:	add	r6, r4, #16
   17e58:	mov	r1, sl
   17e5c:	mov	r0, r6
   17e60:	mov	r7, #0
   17e64:	bl	153d0 <_start@@Base+0xf4>
   17e68:	and	r3, r1, #-16777216	; 0xff000000
   17e6c:	cmp	r3, #1694498816	; 0x65000000
   17e70:	cmpeq	r7, #0
   17e74:	bne	17e48 <_start@@Base+0x2b6c>
   17e78:	mov	r3, #1
   17e7c:	mov	r2, sl
   17e80:	str	fp, [sp]
   17e84:	mov	r1, r6
   17e88:	mov	r0, r9
   17e8c:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   17e90:	cmp	r6, r0
   17e94:	beq	17e48 <_start@@Base+0x2b6c>
   17e98:	ldr	r1, [sp, #48]	; 0x30
   17e9c:	mov	r2, #1
   17ea0:	mov	r3, #0
   17ea4:	strd	r2, [r1]
   17ea8:	str	r7, [r5]
   17eac:	b	17e4c <_start@@Base+0x2b70>
   17eb0:	mov	r7, r1
   17eb4:	add	r1, pc, #92	; 0x5c
   17eb8:	ldrd	r0, [r1]
   17ebc:	mov	r8, #0
   17ec0:	cmp	r7, r1
   17ec4:	cmpeq	r8, r0
   17ec8:	bne	17e48 <_start@@Base+0x2b6c>
   17ecc:	mov	r3, #4
   17ed0:	mov	r2, sl
   17ed4:	str	fp, [sp]
   17ed8:	mov	r1, r4
   17edc:	mov	r0, r9
   17ee0:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   17ee4:	cmp	r4, r0
   17ee8:	beq	17e4c <_start@@Base+0x2b70>
   17eec:	ldr	r1, [sp, #48]	; 0x30
   17ef0:	mov	r2, #0
   17ef4:	mov	r3, #0
   17ef8:	strd	r2, [r1]
   17efc:	str	r8, [r5]
   17f00:	b	17e4c <_start@@Base+0x2b70>
   17f04:	nop	{0}
   17f08:	rsbvc	r6, r5, #116, 28	; 0x740
   17f0c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   17f10:	cmnvc	r0, #-1073741800	; 0xc0000018
   17f14:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17f18:	andeq	r0, r0, r0
   17f1c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f24:	sub	sp, sp, #28
   17f28:	mov	r9, r3
   17f2c:	mov	r5, r1
   17f30:	mov	r8, r0
   17f34:	mov	r1, r2
   17f38:	mov	r0, r5
   17f3c:	ldr	r3, [sp, #64]	; 0x40
   17f40:	mov	r4, r2
   17f44:	ldr	fp, [sp, #68]	; 0x44
   17f48:	str	r3, [sp, #12]
   17f4c:	bl	153d0 <_start@@Base+0xf4>
   17f50:	add	r3, pc, #944	; 0x3b0
   17f54:	ldrd	r2, [r3]
   17f58:	cmp	r1, r3
   17f5c:	cmpeq	r0, r2
   17f60:	bhi	17ff0 <_start@@Base+0x2d14>
   17f64:	add	r3, pc, #932	; 0x3a4
   17f68:	ldrd	r2, [r3]
   17f6c:	cmp	r1, r3
   17f70:	cmpeq	r0, r2
   17f74:	bne	1844c <_start@@Base+0x3170>
   17f78:	mov	r1, r4
   17f7c:	add	r0, r5, #8
   17f80:	bl	153d0 <_start@@Base+0xf4>
   17f84:	add	r3, pc, #908	; 0x38c
   17f88:	ldrd	r2, [r3]
   17f8c:	cmp	r1, r3
   17f90:	cmpeq	r0, r2
   17f94:	bne	1844c <_start@@Base+0x3170>
   17f98:	add	r6, r5, #16
   17f9c:	mov	r1, r4
   17fa0:	mov	r0, r6
   17fa4:	bl	153d0 <_start@@Base+0xf4>
   17fa8:	and	r3, r1, #-16777216	; 0xff000000
   17fac:	mov	r2, #0
   17fb0:	cmp	r3, #1912602624	; 0x72000000
   17fb4:	cmpeq	r2, #0
   17fb8:	bne	1844c <_start@@Base+0x3170>
   17fbc:	mov	r1, r4
   17fc0:	mov	r2, #1
   17fc4:	mov	r0, r6
   17fc8:	bl	17080 <_start@@Base+0x1da4>
   17fcc:	cmp	r6, r0
   17fd0:	mov	r1, r0
   17fd4:	beq	1844c <_start@@Base+0x3170>
   17fd8:	mov	r3, r9
   17fdc:	mov	r2, r4
   17fe0:	mov	r0, r8
   17fe4:	add	sp, sp, #28
   17fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fec:	b	16420 <_start@@Base+0x1144>
   17ff0:	add	r3, pc, #808	; 0x328
   17ff4:	ldrd	r2, [r3]
   17ff8:	cmp	r1, r3
   17ffc:	cmpeq	r0, r2
   18000:	bne	18458 <_start@@Base+0x317c>
   18004:	mov	r1, r4
   18008:	add	r0, r5, #8
   1800c:	bl	153d0 <_start@@Base+0xf4>
   18010:	add	r3, pc, #784	; 0x310
   18014:	ldrd	r2, [r3]
   18018:	cmp	r1, r3
   1801c:	cmpeq	r0, r2
   18020:	bhi	1819c <_start@@Base+0x2ec0>
   18024:	add	r3, pc, #772	; 0x304
   18028:	ldrd	r2, [r3]
   1802c:	cmp	r1, r3
   18030:	cmpeq	r0, r2
   18034:	bhi	180b0 <_start@@Base+0x2dd4>
   18038:	add	r3, pc, #760	; 0x2f8
   1803c:	ldrd	r2, [r3]
   18040:	cmp	r1, r3
   18044:	cmpeq	r0, r2
   18048:	bne	1844c <_start@@Base+0x3170>
   1804c:	add	r6, r5, #16
   18050:	mov	r1, r4
   18054:	mov	r0, r6
   18058:	bl	153d0 <_start@@Base+0xf4>
   1805c:	lsr	r3, r1, #16
   18060:	ldr	r1, [pc, #808]	; 18390 <_start@@Base+0x30b4>
   18064:	mov	r2, #0
   18068:	mov	r0, #0
   1806c:	lsl	r3, r3, #16
   18070:	cmp	r3, r1
   18074:	cmpeq	r2, r0
   18078:	bne	1844c <_start@@Base+0x3170>
   1807c:	mov	r1, r4
   18080:	mov	r2, #2
   18084:	mov	r0, r6
   18088:	bl	17080 <_start@@Base+0x1da4>
   1808c:	cmp	r6, r0
   18090:	mov	r1, r0
   18094:	beq	1844c <_start@@Base+0x3170>
   18098:	mov	r3, r9
   1809c:	mov	r2, r4
   180a0:	mov	r0, r8
   180a4:	add	sp, sp, #28
   180a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180ac:	b	166d0 <_start@@Base+0x13f4>
   180b0:	add	r3, pc, #648	; 0x288
   180b4:	ldrd	r2, [r3]
   180b8:	cmp	r1, r3
   180bc:	cmpeq	r0, r2
   180c0:	bne	18124 <_start@@Base+0x2e48>
   180c4:	add	r6, r5, #16
   180c8:	mov	r1, r4
   180cc:	mov	r0, r6
   180d0:	bl	153d0 <_start@@Base+0xf4>
   180d4:	mov	r3, r1
   180d8:	add	r1, pc, #616	; 0x268
   180dc:	ldrd	r0, [r1]
   180e0:	mov	r2, #0
   180e4:	cmp	r3, r1
   180e8:	cmpeq	r2, r0
   180ec:	bne	1844c <_start@@Base+0x3170>
   180f0:	mov	r1, r4
   180f4:	mov	r2, #4
   180f8:	mov	r0, r6
   180fc:	bl	17080 <_start@@Base+0x1da4>
   18100:	cmp	r6, r0
   18104:	mov	r1, r0
   18108:	beq	1844c <_start@@Base+0x3170>
   1810c:	mov	r3, r9
   18110:	mov	r2, r4
   18114:	mov	r0, r8
   18118:	add	sp, sp, #28
   1811c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18120:	b	16da0 <_start@@Base+0x1ac4>
   18124:	add	r3, pc, #548	; 0x224
   18128:	ldrd	r2, [r3]
   1812c:	cmp	r1, r3
   18130:	cmpeq	r0, r2
   18134:	bne	1844c <_start@@Base+0x3170>
   18138:	add	r6, r5, #16
   1813c:	mov	r1, r4
   18140:	mov	r0, r6
   18144:	bl	153d0 <_start@@Base+0xf4>
   18148:	lsr	r3, r1, #16
   1814c:	ldr	r1, [pc, #576]	; 18394 <_start@@Base+0x30b8>
   18150:	mov	r2, #0
   18154:	mov	r0, #0
   18158:	lsl	r3, r3, #16
   1815c:	cmp	r3, r1
   18160:	cmpeq	r2, r0
   18164:	bne	1844c <_start@@Base+0x3170>
   18168:	mov	r1, r4
   1816c:	mov	r2, #2
   18170:	mov	r0, r6
   18174:	bl	17080 <_start@@Base+0x1da4>
   18178:	cmp	r6, r0
   1817c:	mov	r1, r0
   18180:	beq	1844c <_start@@Base+0x3170>
   18184:	mov	r3, r9
   18188:	mov	r2, r4
   1818c:	mov	r0, r8
   18190:	add	sp, sp, #28
   18194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18198:	b	17df0 <_start@@Base+0x2b14>
   1819c:	add	r3, pc, #436	; 0x1b4
   181a0:	ldrd	r2, [r3]
   181a4:	cmp	r1, r3
   181a8:	cmpeq	r0, r2
   181ac:	bne	18210 <_start@@Base+0x2f34>
   181b0:	add	r6, r5, #16
   181b4:	mov	r1, r4
   181b8:	mov	r0, r6
   181bc:	bl	153d0 <_start@@Base+0xf4>
   181c0:	bic	r2, r0, #255	; 0xff
   181c4:	mov	r3, r1
   181c8:	add	r1, pc, #400	; 0x190
   181cc:	ldrd	r0, [r1]
   181d0:	cmp	r3, r1
   181d4:	cmpeq	r2, r0
   181d8:	bne	1844c <_start@@Base+0x3170>
   181dc:	mov	r1, r4
   181e0:	mov	r2, #7
   181e4:	mov	r0, r6
   181e8:	bl	17080 <_start@@Base+0x1da4>
   181ec:	cmp	r6, r0
   181f0:	mov	r1, r0
   181f4:	beq	1844c <_start@@Base+0x3170>
   181f8:	mov	r3, r9
   181fc:	mov	r2, r4
   18200:	mov	r0, r8
   18204:	add	sp, sp, #28
   18208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1820c:	b	16950 <_start@@Base+0x1674>
   18210:	add	r3, pc, #336	; 0x150
   18214:	ldrd	r2, [r3]
   18218:	cmp	r1, r3
   1821c:	cmpeq	r0, r2
   18220:	bhi	18298 <_start@@Base+0x2fbc>
   18224:	add	r3, pc, #324	; 0x144
   18228:	ldrd	r2, [r3]
   1822c:	cmp	r1, r3
   18230:	cmpeq	r0, r2
   18234:	bne	1844c <_start@@Base+0x3170>
   18238:	add	r6, r5, #16
   1823c:	mov	r1, r4
   18240:	mov	r0, r6
   18244:	bl	153d0 <_start@@Base+0xf4>
   18248:	bic	r2, r0, #255	; 0xff
   1824c:	mov	r3, r1
   18250:	add	r1, pc, #288	; 0x120
   18254:	ldrd	r0, [r1]
   18258:	cmp	r3, r1
   1825c:	cmpeq	r2, r0
   18260:	bne	1844c <_start@@Base+0x3170>
   18264:	mov	r1, r4
   18268:	mov	r2, #7
   1826c:	mov	r0, r6
   18270:	bl	17080 <_start@@Base+0x1da4>
   18274:	cmp	r6, r0
   18278:	mov	r1, r0
   1827c:	beq	1844c <_start@@Base+0x3170>
   18280:	mov	r3, r9
   18284:	mov	r2, r4
   18288:	mov	r0, r8
   1828c:	add	sp, sp, #28
   18290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18294:	b	16ab8 <_start@@Base+0x17dc>
   18298:	add	r3, pc, #224	; 0xe0
   1829c:	ldrd	r2, [r3]
   182a0:	cmp	r1, r3
   182a4:	cmpeq	r0, r2
   182a8:	bne	1844c <_start@@Base+0x3170>
   182ac:	add	r7, pc, #212	; 0xd4
   182b0:	ldrd	r6, [r7]
   182b4:	add	sl, r5, #16
   182b8:	mov	r1, r4
   182bc:	mov	r0, sl
   182c0:	bl	153d0 <_start@@Base+0xf4>
   182c4:	bic	r2, r0, #255	; 0xff
   182c8:	cmp	r1, r7
   182cc:	cmpeq	r2, r6
   182d0:	bne	18398 <_start@@Base+0x30bc>
   182d4:	mov	r1, r4
   182d8:	mov	r2, #7
   182dc:	mov	r0, sl
   182e0:	bl	17080 <_start@@Base+0x1da4>
   182e4:	cmp	sl, r0
   182e8:	mov	r1, r0
   182ec:	beq	1844c <_start@@Base+0x3170>
   182f0:	mov	r3, r9
   182f4:	mov	r2, r4
   182f8:	mov	r0, r8
   182fc:	add	sp, sp, #28
   18300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18304:	b	16c68 <_start@@Base+0x198c>
   18308:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1830c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18310:	cmnvs	r3, lr, lsr #18
   18314:			; <UNDEFINED> instruction: 0x46616e74
   18318:	cmnvs	r3, r5, ror #8
   1831c:	cmnmi	r8, #-2147483620	; 0x8000001c
   18320:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   18324:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18328:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   1832c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18330:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   18334:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18338:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   1833c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18340:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   18344:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18348:	andeq	r0, r0, r0
   1834c:	svcvs	0x006c6f72
   18350:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   18354:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18358:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   1835c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18360:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18364:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   18368:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   1836c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18370:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   18374:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18378:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1837c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   18380:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   18384:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18388:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1838c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   18390:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   18394:	svcvs	0x006f0000
   18398:	add	r3, pc, #608	; 0x260
   1839c:	ldrd	r2, [r3]
   183a0:	cmp	r1, r3
   183a4:	cmpeq	r0, r2
   183a8:	bne	1844c <_start@@Base+0x3170>
   183ac:	add	r6, r5, #24
   183b0:	mov	r1, r4
   183b4:	mov	r0, r6
   183b8:	bl	153d0 <_start@@Base+0xf4>
   183bc:	bic	r3, r1, #255	; 0xff
   183c0:	add	r1, pc, #576	; 0x240
   183c4:	ldrd	r0, [r1]
   183c8:	mov	r2, #0
   183cc:	cmp	r3, r1
   183d0:	cmpeq	r2, r0
   183d4:	bne	1844c <_start@@Base+0x3170>
   183d8:	mov	r2, #3
   183dc:	mov	r1, r4
   183e0:	mov	r0, r6
   183e4:	bl	17080 <_start@@Base+0x1da4>
   183e8:	cmp	r6, r0
   183ec:	mov	r7, r0
   183f0:	beq	1844c <_start@@Base+0x3170>
   183f4:	mov	r1, r4
   183f8:	mov	r6, #0
   183fc:	bl	153d0 <_start@@Base+0xf4>
   18400:	and	r3, r1, #-16777216	; 0xff000000
   18404:	cmp	r3, #2013265920	; 0x78000000
   18408:	cmpeq	r6, #0
   1840c:	movne	r5, r7
   18410:	bne	1844c <_start@@Base+0x3170>
   18414:	mov	r3, #1
   18418:	mov	r2, r4
   1841c:	str	fp, [sp]
   18420:	mov	r1, r7
   18424:	mov	r0, r8
   18428:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   1842c:	cmp	r7, r0
   18430:	mov	r5, r0
   18434:	beq	1844c <_start@@Base+0x3170>
   18438:	ldr	r1, [sp, #12]
   1843c:	mov	r2, #0
   18440:	mov	r3, #0
   18444:	strd	r2, [r1]
   18448:	str	r6, [r9]
   1844c:	mov	r0, r5
   18450:	add	sp, sp, #28
   18454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18458:	add	r3, pc, #432	; 0x1b0
   1845c:	ldrd	r2, [r3]
   18460:	cmp	r1, r3
   18464:	cmpeq	r0, r2
   18468:	bne	1844c <_start@@Base+0x3170>
   1846c:	mov	r1, r4
   18470:	add	r0, r5, #8
   18474:	bl	153d0 <_start@@Base+0xf4>
   18478:	add	r3, pc, #408	; 0x198
   1847c:	ldrd	r2, [r3]
   18480:	cmp	r1, r3
   18484:	cmpeq	r0, r2
   18488:	bne	1844c <_start@@Base+0x3170>
   1848c:	mov	r1, r4
   18490:	add	r0, r5, #16
   18494:	bl	153d0 <_start@@Base+0xf4>
   18498:	add	r3, pc, #384	; 0x180
   1849c:	ldrd	r2, [r3]
   184a0:	cmp	r1, r3
   184a4:	cmpeq	r0, r2
   184a8:	bne	1844c <_start@@Base+0x3170>
   184ac:	mov	r1, r4
   184b0:	add	r0, r5, #24
   184b4:	bl	153d0 <_start@@Base+0xf4>
   184b8:	add	r3, pc, #360	; 0x168
   184bc:	ldrd	r2, [r3]
   184c0:	cmp	r1, r3
   184c4:	cmpeq	r0, r2
   184c8:	bne	1844c <_start@@Base+0x3170>
   184cc:	add	sl, r5, #32
   184d0:	mov	r1, r4
   184d4:	mov	r0, sl
   184d8:	mov	r7, #0
   184dc:	bl	153d0 <_start@@Base+0xf4>
   184e0:	and	r3, r1, #-16777216	; 0xff000000
   184e4:	cmp	r3, #1694498816	; 0x65000000
   184e8:	cmpeq	r7, #0
   184ec:	bne	1844c <_start@@Base+0x3170>
   184f0:	mov	r2, #1
   184f4:	mov	r1, r4
   184f8:	mov	r0, sl
   184fc:	bl	17080 <_start@@Base+0x1da4>
   18500:	cmp	sl, r0
   18504:	mov	r6, r0
   18508:	beq	1844c <_start@@Base+0x3170>
   1850c:	mov	r1, r4
   18510:	bl	153d0 <_start@@Base+0xf4>
   18514:	strd	r0, [sp, #16]
   18518:	ldr	r1, [sp, #20]
   1851c:	bic	r3, r1, #255	; 0xff
   18520:	add	r1, pc, #264	; 0x108
   18524:	ldrd	r0, [r1]
   18528:	cmp	r3, r1
   1852c:	cmpeq	r7, r0
   18530:	bne	18570 <_start@@Base+0x3294>
   18534:	mov	r3, #3
   18538:	mov	r2, r4
   1853c:	str	fp, [sp]
   18540:	mov	r1, r6
   18544:	mov	r0, r8
   18548:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   1854c:	cmp	r6, r0
   18550:	mov	r5, r0
   18554:	beq	1844c <_start@@Base+0x3170>
   18558:	ldr	r1, [sp, #12]
   1855c:	mov	r2, #17
   18560:	mov	r3, #0
   18564:	strd	r2, [r1]
   18568:	str	r7, [r9]
   1856c:	b	1844c <_start@@Base+0x3170>
   18570:	add	r3, pc, #192	; 0xc0
   18574:	ldrd	r2, [r3]
   18578:	ldrd	r0, [sp, #16]
   1857c:	cmp	r1, r3
   18580:	cmpeq	r0, r2
   18584:	bne	185f4 <_start@@Base+0x3318>
   18588:	add	r7, r6, #8
   1858c:	mov	r1, r4
   18590:	mov	r0, r7
   18594:	mov	sl, #0
   18598:	bl	153d0 <_start@@Base+0xf4>
   1859c:	lsr	r3, r1, #16
   185a0:	ldr	r1, [pc, #152]	; 18640 <_start@@Base+0x3364>
   185a4:	mov	r0, #0
   185a8:	lsl	r3, r3, #16
   185ac:	cmp	r3, r1
   185b0:	cmpeq	sl, r0
   185b4:	bne	185f4 <_start@@Base+0x3318>
   185b8:	mov	r3, #2
   185bc:	mov	r2, r4
   185c0:	str	fp, [sp]
   185c4:	mov	r1, r7
   185c8:	mov	r0, r8
   185cc:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   185d0:	cmp	r7, r0
   185d4:	mov	r5, r0
   185d8:	beq	185f4 <_start@@Base+0x3318>
   185dc:	ldr	r1, [sp, #12]
   185e0:	mov	r2, #0
   185e4:	mov	r3, #0
   185e8:	strd	r2, [r1]
   185ec:	str	sl, [r9]
   185f0:	b	1844c <_start@@Base+0x3170>
   185f4:	mov	r5, r6
   185f8:	b	1844c <_start@@Base+0x3170>
   185fc:	nop	{0}
   18600:	rsbsvc	r7, r4, r5, ror #18
   18604:	svcvs	0x0074656d
   18608:	andeq	r0, r0, r0
   1860c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18610:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   18614:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18618:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1861c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   18620:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   18624:	cmnpl	r0, #-1073741800	; 0xc0000018
   18628:	cmnvs	ip, #100, 10	; 0x19000000
   1862c:	svcvs	0x006d496e
   18630:	andeq	r0, r0, r0
   18634:	strbtmi	r6, [pc], -r0, lsl #30
   18638:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1863c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   18640:	cmnvs	ip, r0
   18644:	cmp	r1, r2
   18648:	push	{r4, r5, r6, lr}
   1864c:	mov	ip, r2
   18650:	mov	r6, r0
   18654:	beq	18664 <_start@@Base+0x3388>
   18658:	ldrb	r4, [r1]
   1865c:	cmp	r4, #123	; 0x7b
   18660:	beq	18680 <_start@@Base+0x33a4>
   18664:	mov	r2, #0
   18668:	mov	r0, r6
   1866c:	pop	{r4, r5, r6, lr}
   18670:	str	r2, [r3]
   18674:	mov	r3, #21
   18678:	mov	r2, ip
   1867c:	b	251c8 <flatcc_json_parser_set_error@@Base>
   18680:	add	r1, r1, #1
   18684:	mov	r4, r2
   18688:	mov	r5, r3
   1868c:	bl	16ed8 <_start@@Base+0x1bfc>
   18690:	cmp	r4, r0
   18694:	beq	186c0 <_start@@Base+0x33e4>
   18698:	ldrb	r3, [r0]
   1869c:	cmp	r3, #125	; 0x7d
   186a0:	bne	186c0 <_start@@Base+0x33e4>
   186a4:	mov	r3, #0
   186a8:	mov	r2, r4
   186ac:	add	r1, r0, #1
   186b0:	mov	r0, r6
   186b4:	str	r3, [r5]
   186b8:	pop	{r4, r5, r6, lr}
   186bc:	b	16ed8 <_start@@Base+0x1bfc>
   186c0:	mov	r3, #1
   186c4:	str	r3, [r5]
   186c8:	pop	{r4, r5, r6, pc}
   186cc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   186d0:	mov	r5, r1
   186d4:	mov	r1, #0
   186d8:	mov	r4, r0
   186dc:	mov	r6, r2
   186e0:	mov	r7, r3
   186e4:	ldr	r0, [r0]
   186e8:	str	r1, [r3]
   186ec:	bl	21ce8 <flatcc_builder_start_table@@Base>
   186f0:	cmp	r0, #0
   186f4:	bne	1873c <_start@@Base+0x3460>
   186f8:	add	r3, sp, #4
   186fc:	mov	r2, r6
   18700:	mov	r1, r5
   18704:	mov	r0, r4
   18708:	bl	18644 <_start@@Base+0x3368>
   1870c:	ldr	r3, [sp, #4]
   18710:	mov	r5, r0
   18714:	cmp	r3, #0
   18718:	bne	18760 <_start@@Base+0x3484>
   1871c:	ldr	r3, [r4, #24]
   18720:	cmp	r3, #0
   18724:	bne	1873c <_start@@Base+0x3460>
   18728:	ldr	r0, [r4]
   1872c:	bl	22310 <flatcc_builder_end_table@@Base>
   18730:	cmp	r0, #0
   18734:	str	r0, [r7]
   18738:	bne	18754 <_start@@Base+0x3478>
   1873c:	mov	r1, r5
   18740:	mov	r3, #33	; 0x21
   18744:	mov	r2, r6
   18748:	mov	r0, r4
   1874c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   18750:	mov	r5, r0
   18754:	mov	r0, r5
   18758:	add	sp, sp, #12
   1875c:	pop	{r4, r5, r6, r7, pc}
   18760:	mov	r2, r6
   18764:	mov	r1, r5
   18768:	mov	r0, r4
   1876c:	bl	17a14 <_start@@Base+0x2738>
   18770:	mov	r1, r0
   18774:	mov	r2, r6
   18778:	mov	r0, r4
   1877c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   18780:	mov	r1, r0
   18784:	add	r3, sp, #4
   18788:	mov	r2, r6
   1878c:	mov	r0, r4
   18790:	bl	16fc8 <_start@@Base+0x1cec>
   18794:	b	1870c <_start@@Base+0x3430>
   18798:	push	{r4, r5, r6, lr}
   1879c:	mov	r4, r0
   187a0:	mov	r0, r1
   187a4:	sub	r1, r2, r1
   187a8:	cmp	r1, r3
   187ac:	pople	{r4, r5, r6, pc}
   187b0:	add	r1, r0, r3
   187b4:	ldr	lr, [r4, #12]
   187b8:	ldrb	ip, [r0, r3]
   187bc:	cmp	lr, #0
   187c0:	beq	18814 <_start@@Base+0x3538>
   187c4:	cmp	ip, #58	; 0x3a
   187c8:	cmpne	ip, #32
   187cc:	movls	ip, #0
   187d0:	movhi	ip, #1
   187d4:	strls	ip, [r4, #12]
   187d8:	pophi	{r4, r5, r6, pc}
   187dc:	mov	r0, r4
   187e0:	mov	r5, r2
   187e4:	bl	16ed8 <_start@@Base+0x1bfc>
   187e8:	cmp	r5, r0
   187ec:	mov	r1, r0
   187f0:	beq	18828 <_start@@Base+0x354c>
   187f4:	ldrb	r3, [r0]
   187f8:	cmp	r3, #58	; 0x3a
   187fc:	bne	18828 <_start@@Base+0x354c>
   18800:	mov	r2, r5
   18804:	add	r1, r0, #1
   18808:	mov	r0, r4
   1880c:	pop	{r4, r5, r6, lr}
   18810:	b	16ed8 <_start@@Base+0x1bfc>
   18814:	cmp	ip, #34	; 0x22
   18818:	popne	{r4, r5, r6, pc}
   1881c:	add	r3, r3, #1
   18820:	add	r1, r0, r3
   18824:	b	187dc <_start@@Base+0x3500>
   18828:	mov	r2, r5
   1882c:	mov	r0, r4
   18830:	pop	{r4, r5, r6, lr}
   18834:	mov	r3, #4
   18838:	b	251c8 <flatcc_json_parser_set_error@@Base>
   1883c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18840:	sub	sp, sp, #116	; 0x74
   18844:	mov	r4, r2
   18848:	mov	r8, r0
   1884c:	mov	r5, r1
   18850:	mov	r1, #10
   18854:	str	r3, [sp, #60]	; 0x3c
   18858:	mov	r3, #0
   1885c:	ldr	r2, [sp, #60]	; 0x3c
   18860:	ldr	r0, [r0]
   18864:	str	r3, [r2]
   18868:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1886c:	cmp	r0, #0
   18870:	bne	188f8 <_start@@Base+0x361c>
   18874:	add	r3, sp, #108	; 0x6c
   18878:	mov	r2, r4
   1887c:	mov	r1, r5
   18880:	mov	r0, r8
   18884:	str	r3, [sp]
   18888:	mov	r3, #5
   1888c:	bl	269c4 <flatcc_json_parser_prepare_unions@@Base>
   18890:	cmp	r4, r0
   18894:	beq	188f8 <_start@@Base+0x361c>
   18898:	add	r3, sp, #104	; 0x68
   1889c:	mov	r2, r4
   188a0:	mov	r1, r5
   188a4:	mov	r0, r8
   188a8:	bl	18644 <_start@@Base+0x3368>
   188ac:	ldr	r3, [sp, #104]	; 0x68
   188b0:	mov	r5, r0
   188b4:	cmp	r3, #0
   188b8:	bne	1891c <_start@@Base+0x3640>
   188bc:	ldr	r3, [r8, #24]
   188c0:	cmp	r3, #0
   188c4:	bne	188f8 <_start@@Base+0x361c>
   188c8:	mov	r1, r0
   188cc:	mov	r2, r4
   188d0:	ldr	r3, [sp, #108]	; 0x6c
   188d4:	mov	r0, r8
   188d8:	bl	26a2c <flatcc_json_parser_finalize_unions@@Base>
   188dc:	mov	r5, r0
   188e0:	ldr	r0, [r8]
   188e4:	bl	22310 <flatcc_builder_end_table@@Base>
   188e8:	ldr	r3, [sp, #60]	; 0x3c
   188ec:	cmp	r0, #0
   188f0:	str	r0, [r3]
   188f4:	bne	18910 <_start@@Base+0x3634>
   188f8:	mov	r1, r5
   188fc:	mov	r3, #33	; 0x21
   18900:	mov	r2, r4
   18904:	mov	r0, r8
   18908:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1890c:	mov	r5, r0
   18910:	mov	r0, r5
   18914:	add	sp, sp, #116	; 0x74
   18918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1891c:	mov	r2, r4
   18920:	mov	r1, r5
   18924:	mov	r0, r8
   18928:	bl	17a14 <_start@@Base+0x2738>
   1892c:	mov	r1, r4
   18930:	mov	r5, r0
   18934:	bl	153d0 <_start@@Base+0xf4>
   18938:	add	r3, pc, #856	; 0x358
   1893c:	ldrd	r2, [r3]
   18940:	cmp	r1, r3
   18944:	cmpeq	r0, r2
   18948:	bhi	18b50 <_start@@Base+0x3874>
   1894c:	add	r3, pc, #844	; 0x34c
   18950:	ldrd	r2, [r3]
   18954:	cmp	r1, r3
   18958:	cmpeq	r0, r2
   1895c:	bne	18a54 <_start@@Base+0x3778>
   18960:	add	r5, r5, #8
   18964:	mov	r1, r4
   18968:	mov	r0, r5
   1896c:	bl	153d0 <_start@@Base+0xf4>
   18970:	bic	r3, r0, #255	; 0xff
   18974:	str	r3, [sp, #64]	; 0x40
   18978:	str	r1, [sp, #68]	; 0x44
   1897c:	add	r3, pc, #804	; 0x324
   18980:	ldrd	r2, [r3]
   18984:	ldrd	r6, [sp, #64]	; 0x40
   18988:	cmp	r7, r3
   1898c:	cmpeq	r6, r2
   18990:	bne	189e8 <_start@@Base+0x370c>
   18994:	mov	r1, r5
   18998:	mov	r3, #7
   1899c:	mov	r2, r4
   189a0:	mov	r0, r8
   189a4:	bl	18798 <_start@@Base+0x34bc>
   189a8:	cmp	r5, r0
   189ac:	mov	r1, r0
   189b0:	beq	18f20 <_start@@Base+0x3c44>
   189b4:	ldr	r3, [pc, #796]	; 18cd8 <_start@@Base+0x39fc>
   189b8:	str	r3, [sp, #12]
   189bc:	ldr	r3, [pc, #792]	; 18cdc <_start@@Base+0x3a00>
   189c0:	str	r3, [sp, #8]
   189c4:	ldr	r3, [sp, #108]	; 0x6c
   189c8:	str	r3, [sp, #4]
   189cc:	mov	r3, #3
   189d0:	str	r3, [sp]
   189d4:	mov	r3, #1
   189d8:	mov	r2, r4
   189dc:	mov	r0, r8
   189e0:	bl	26b90 <flatcc_json_parser_union_type@@Base>
   189e4:	b	18c04 <_start@@Base+0x3928>
   189e8:	ldr	r3, [pc, #752]	; 18ce0 <_start@@Base+0x3a04>
   189ec:	lsr	fp, r1, #16
   189f0:	mov	sl, #0
   189f4:	mov	r2, #0
   189f8:	lsl	fp, fp, #16
   189fc:	cmp	fp, r3
   18a00:	cmpeq	sl, r2
   18a04:	bne	18f20 <_start@@Base+0x3c44>
   18a08:	mov	r1, r5
   18a0c:	mov	r3, #2
   18a10:	mov	r2, r4
   18a14:	mov	r0, r8
   18a18:	bl	18798 <_start@@Base+0x34bc>
   18a1c:	cmp	r5, r0
   18a20:	mov	r1, r0
   18a24:	beq	18f20 <_start@@Base+0x3c44>
   18a28:	ldr	r3, [pc, #680]	; 18cd8 <_start@@Base+0x39fc>
   18a2c:	str	r3, [sp, #8]
   18a30:	ldr	r3, [sp, #108]	; 0x6c
   18a34:	str	r3, [sp, #4]
   18a38:	mov	r3, #3
   18a3c:	str	r3, [sp]
   18a40:	mov	r3, #1
   18a44:	mov	r2, r4
   18a48:	mov	r0, r8
   18a4c:	bl	26a84 <flatcc_json_parser_union@@Base>
   18a50:	b	18c04 <_start@@Base+0x3928>
   18a54:	add	r3, pc, #596	; 0x254
   18a58:	ldrd	r2, [r3]
   18a5c:	cmp	r1, r3
   18a60:	cmpeq	r0, r2
   18a64:	bne	18aec <_start@@Base+0x3810>
   18a68:	add	r5, r5, #8
   18a6c:	mov	r1, r4
   18a70:	mov	r0, r5
   18a74:	bl	153d0 <_start@@Base+0xf4>
   18a78:	mov	r3, #0
   18a7c:	mov	r2, #0
   18a80:	str	r3, [sp, #24]
   18a84:	lsr	r3, r1, #16
   18a88:	lsl	r3, r3, #16
   18a8c:	str	r3, [sp, #28]
   18a90:	ldr	r3, [pc, #588]	; 18ce4 <_start@@Base+0x3a08>
   18a94:	ldrd	r0, [sp, #24]
   18a98:	cmp	r1, r3
   18a9c:	cmpeq	r0, r2
   18aa0:	bne	18f20 <_start@@Base+0x3c44>
   18aa4:	mov	r1, r5
   18aa8:	mov	r3, #2
   18aac:	mov	r2, r4
   18ab0:	mov	r0, r8
   18ab4:	bl	18798 <_start@@Base+0x34bc>
   18ab8:	cmp	r5, r0
   18abc:	mov	r1, r0
   18ac0:	beq	18f20 <_start@@Base+0x3c44>
   18ac4:	ldr	r3, [pc, #524]	; 18cd8 <_start@@Base+0x39fc>
   18ac8:	str	r3, [sp, #12]
   18acc:	ldr	r3, [pc, #532]	; 18ce8 <_start@@Base+0x3a0c>
   18ad0:	str	r3, [sp, #8]
   18ad4:	ldr	r3, [sp, #108]	; 0x6c
   18ad8:	str	r3, [sp, #4]
   18adc:	mov	r3, #7
   18ae0:	str	r3, [sp]
   18ae4:	mov	r3, #3
   18ae8:	b	189d8 <_start@@Base+0x36fc>
   18aec:	and	r3, r0, #-16777216	; 0xff000000
   18af0:	str	r3, [sp, #72]	; 0x48
   18af4:	str	r1, [sp, #76]	; 0x4c
   18af8:	add	r3, pc, #440	; 0x1b8
   18afc:	ldrd	r2, [r3]
   18b00:	ldrd	r0, [sp, #72]	; 0x48
   18b04:	cmp	r1, r3
   18b08:	cmpeq	r0, r2
   18b0c:	bne	18f20 <_start@@Base+0x3c44>
   18b10:	mov	r1, r5
   18b14:	mov	r3, #5
   18b18:	mov	r2, r4
   18b1c:	mov	r0, r8
   18b20:	bl	18798 <_start@@Base+0x34bc>
   18b24:	cmp	r5, r0
   18b28:	mov	r1, r0
   18b2c:	beq	18f20 <_start@@Base+0x3c44>
   18b30:	ldr	r3, [pc, #416]	; 18cd8 <_start@@Base+0x39fc>
   18b34:	str	r3, [sp, #8]
   18b38:	ldr	r3, [sp, #108]	; 0x6c
   18b3c:	str	r3, [sp, #4]
   18b40:	mov	r3, #7
   18b44:	str	r3, [sp]
   18b48:	mov	r3, #3
   18b4c:	b	18a44 <_start@@Base+0x3768>
   18b50:	add	r3, pc, #360	; 0x168
   18b54:	ldrd	r2, [r3]
   18b58:	cmp	r1, r3
   18b5c:	cmpeq	r0, r2
   18b60:	bhi	18cf8 <_start@@Base+0x3a1c>
   18b64:	add	r3, pc, #348	; 0x15c
   18b68:	ldrd	r2, [r3]
   18b6c:	cmp	r1, r3
   18b70:	cmpeq	r0, r2
   18b74:	bne	18f20 <_start@@Base+0x3c44>
   18b78:	add	r5, r5, #8
   18b7c:	mov	r1, r4
   18b80:	mov	r0, r5
   18b84:	bl	153d0 <_start@@Base+0xf4>
   18b88:	bic	r3, r0, #255	; 0xff
   18b8c:	str	r3, [sp, #80]	; 0x50
   18b90:	str	r1, [sp, #84]	; 0x54
   18b94:	add	r3, pc, #308	; 0x134
   18b98:	ldrd	r2, [r3]
   18b9c:	ldrd	r6, [sp, #80]	; 0x50
   18ba0:	cmp	r7, r3
   18ba4:	cmpeq	r6, r2
   18ba8:	bne	18c1c <_start@@Base+0x3940>
   18bac:	mov	r1, r5
   18bb0:	mov	r3, #7
   18bb4:	mov	r2, r4
   18bb8:	mov	r0, r8
   18bbc:	bl	18798 <_start@@Base+0x34bc>
   18bc0:	cmp	r5, r0
   18bc4:	mov	r1, r0
   18bc8:	beq	18f20 <_start@@Base+0x3c44>
   18bcc:	ldr	r3, [pc, #280]	; 18cec <_start@@Base+0x3a10>
   18bd0:	mov	r2, r4
   18bd4:	mov	r0, r8
   18bd8:	str	r3, [sp, #16]
   18bdc:	ldr	r3, [pc, #244]	; 18cd8 <_start@@Base+0x39fc>
   18be0:	str	r3, [sp, #12]
   18be4:	ldr	r3, [pc, #260]	; 18cf0 <_start@@Base+0x3a14>
   18be8:	str	r3, [sp, #8]
   18bec:	ldr	r3, [sp, #108]	; 0x6c
   18bf0:	str	r3, [sp, #4]
   18bf4:	mov	r3, #9
   18bf8:	str	r3, [sp]
   18bfc:	mov	r3, #4
   18c00:	bl	26ddc <flatcc_json_parser_union_type_vector@@Base>
   18c04:	mov	r1, r0
   18c08:	add	r3, sp, #104	; 0x68
   18c0c:	mov	r2, r4
   18c10:	mov	r0, r8
   18c14:	bl	16fc8 <_start@@Base+0x1cec>
   18c18:	b	188ac <_start@@Base+0x35d0>
   18c1c:	mov	r3, #0
   18c20:	mov	r2, #0
   18c24:	str	r3, [sp, #32]
   18c28:	lsr	r3, r1, #16
   18c2c:	lsl	r3, r3, #16
   18c30:	str	r3, [sp, #36]	; 0x24
   18c34:	ldr	r3, [pc, #184]	; 18cf4 <_start@@Base+0x3a18>
   18c38:	ldrd	r0, [sp, #32]
   18c3c:	cmp	r1, r3
   18c40:	cmpeq	r0, r2
   18c44:	bne	18f20 <_start@@Base+0x3c44>
   18c48:	mov	r1, r5
   18c4c:	mov	r3, #2
   18c50:	mov	r2, r4
   18c54:	mov	r0, r8
   18c58:	bl	18798 <_start@@Base+0x34bc>
   18c5c:	cmp	r5, r0
   18c60:	mov	r1, r0
   18c64:	beq	18f20 <_start@@Base+0x3c44>
   18c68:	ldr	r3, [pc, #104]	; 18cd8 <_start@@Base+0x39fc>
   18c6c:	mov	r2, r4
   18c70:	mov	r0, r8
   18c74:	str	r3, [sp, #8]
   18c78:	ldr	r3, [sp, #108]	; 0x6c
   18c7c:	str	r3, [sp, #4]
   18c80:	mov	r3, #9
   18c84:	str	r3, [sp]
   18c88:	mov	r3, #4
   18c8c:	bl	26d10 <flatcc_json_parser_union_vector@@Base>
   18c90:	b	18c04 <_start@@Base+0x3928>
   18c94:	nop	{0}
   18c98:	cmnvs	r3, r4, ror #8
   18c9c:	cmnvs	r8, #-2147483620	; 0x8000001c
   18ca0:	strbvs	r6, [pc, -r9, ror #28]!
   18ca4:	cmnvs	lr, r1, ror #8
   18ca8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18cac:	cmnvc	r4, #116, 30	; 0x1d0
   18cb0:	svcvs	0x005f7479
   18cb4:	cmnvs	r1, #6464	; 0x1940
   18cb8:	svcvs	0x00000000
   18cbc:	cmnvs	r1, #6464	; 0x1940
   18cc0:	svcpl	0x00636860
   18cc4:			; <UNDEFINED> instruction: 0x6d61696e
   18cc8:	cmnvs	r3, r5, ror #8
   18ccc:	cmnvs	r8, #-2147483620	; 0x8000001c
   18cd0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18cd4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   18cd8:	andeq	r9, r1, r4, lsr ip
   18cdc:	andeq	r5, r4, r8, ror r0
   18ce0:	cmnvc	r4, #0
   18ce4:	rsbvc	r0, r5, r0
   18ce8:	andeq	r5, r4, r8, lsl #1
   18cec:	andeq	r5, r1, ip, asr #9
   18cf0:	muleq	r4, r8, r0
   18cf4:	rsbsvc	r0, r3, #0
   18cf8:	add	r3, pc, #560	; 0x230
   18cfc:	ldrd	r2, [r3]
   18d00:	cmp	r1, r3
   18d04:	cmpeq	r0, r2
   18d08:	bne	18e2c <_start@@Base+0x3b50>
   18d0c:	add	r9, r5, #8
   18d10:	mov	r1, r4
   18d14:	mov	r0, r9
   18d18:	bl	153d0 <_start@@Base+0xf4>
   18d1c:	add	r3, pc, #532	; 0x214
   18d20:	ldrd	r2, [r3]
   18d24:	cmp	r1, r3
   18d28:	cmpeq	r0, r2
   18d2c:	bne	18db0 <_start@@Base+0x3ad4>
   18d30:	add	r5, r5, #16
   18d34:	mov	r1, r4
   18d38:	mov	r0, r5
   18d3c:	mov	r9, #0
   18d40:	bl	153d0 <_start@@Base+0xf4>
   18d44:	bic	r3, r1, #255	; 0xff
   18d48:	str	r9, [sp, #88]	; 0x58
   18d4c:	str	r3, [sp, #92]	; 0x5c
   18d50:	add	r3, pc, #488	; 0x1e8
   18d54:	ldrd	r2, [r3]
   18d58:	ldrd	r0, [sp, #88]	; 0x58
   18d5c:	cmp	r1, r3
   18d60:	cmpeq	r0, r2
   18d64:	bne	18f20 <_start@@Base+0x3c44>
   18d68:	mov	r1, r5
   18d6c:	mov	r3, #3
   18d70:	mov	r2, r4
   18d74:	mov	r0, r8
   18d78:	bl	18798 <_start@@Base+0x34bc>
   18d7c:	cmp	r5, r0
   18d80:	mov	r1, r0
   18d84:	beq	18f20 <_start@@Base+0x3c44>
   18d88:	ldr	r3, [pc, #464]	; 18f60 <_start@@Base+0x3c84>
   18d8c:	str	r3, [sp, #12]
   18d90:	ldr	r3, [pc, #460]	; 18f64 <_start@@Base+0x3c88>
   18d94:	str	r3, [sp, #8]
   18d98:	ldr	r3, [sp, #108]	; 0x6c
   18d9c:	str	r3, [sp, #4]
   18da0:	mov	r3, #1
   18da4:	str	r3, [sp]
   18da8:	mov	r3, r9
   18dac:	b	189d8 <_start@@Base+0x36fc>
   18db0:	lsr	r3, r0, #16
   18db4:	str	r1, [sp, #44]	; 0x2c
   18db8:	lsl	r3, r3, #16
   18dbc:	str	r3, [sp, #40]	; 0x28
   18dc0:	add	r3, pc, #384	; 0x180
   18dc4:	ldrd	r2, [r3]
   18dc8:	ldrd	r0, [sp, #40]	; 0x28
   18dcc:	cmp	r1, r3
   18dd0:	cmpeq	r0, r2
   18dd4:	bne	18e18 <_start@@Base+0x3b3c>
   18dd8:	mov	r1, r9
   18ddc:	mov	r3, #6
   18de0:	mov	r2, r4
   18de4:	mov	r0, r8
   18de8:	bl	18798 <_start@@Base+0x34bc>
   18dec:	cmp	r9, r0
   18df0:	mov	r1, r0
   18df4:	beq	18e18 <_start@@Base+0x3b3c>
   18df8:	ldr	r3, [pc, #352]	; 18f60 <_start@@Base+0x3c84>
   18dfc:	str	r3, [sp, #8]
   18e00:	ldr	r3, [sp, #108]	; 0x6c
   18e04:	str	r3, [sp, #4]
   18e08:	mov	r3, #1
   18e0c:	str	r3, [sp]
   18e10:	mov	r3, #0
   18e14:	b	18a44 <_start@@Base+0x3768>
   18e18:	mov	r2, r4
   18e1c:	mov	r1, r9
   18e20:	mov	r0, r8
   18e24:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   18e28:	b	18c04 <_start@@Base+0x3928>
   18e2c:	add	r3, pc, #284	; 0x11c
   18e30:	ldrd	r2, [r3]
   18e34:	cmp	r1, r3
   18e38:	cmpeq	r0, r2
   18e3c:	bne	18f20 <_start@@Base+0x3c44>
   18e40:	add	r5, r5, #8
   18e44:	mov	r1, r4
   18e48:	mov	r0, r5
   18e4c:	bl	153d0 <_start@@Base+0xf4>
   18e50:	lsr	r3, r0, #16
   18e54:	str	r1, [sp, #52]	; 0x34
   18e58:	lsl	r3, r3, #16
   18e5c:	str	r3, [sp, #48]	; 0x30
   18e60:	add	r3, pc, #240	; 0xf0
   18e64:	ldrd	r2, [r3]
   18e68:	ldrd	r6, [sp, #48]	; 0x30
   18e6c:	cmp	r7, r3
   18e70:	cmpeq	r6, r2
   18e74:	bne	18ec0 <_start@@Base+0x3be4>
   18e78:	mov	r1, r5
   18e7c:	mov	r3, #6
   18e80:	mov	r2, r4
   18e84:	mov	r0, r8
   18e88:	bl	18798 <_start@@Base+0x34bc>
   18e8c:	cmp	r5, r0
   18e90:	mov	r1, r0
   18e94:	beq	18f20 <_start@@Base+0x3c44>
   18e98:	ldr	r3, [pc, #192]	; 18f60 <_start@@Base+0x3c84>
   18e9c:	str	r3, [sp, #12]
   18ea0:	ldr	r3, [pc, #192]	; 18f68 <_start@@Base+0x3c8c>
   18ea4:	str	r3, [sp, #8]
   18ea8:	ldr	r3, [sp, #108]	; 0x6c
   18eac:	str	r3, [sp, #4]
   18eb0:	mov	r3, #5
   18eb4:	str	r3, [sp]
   18eb8:	mov	r3, #2
   18ebc:	b	189d8 <_start@@Base+0x36fc>
   18ec0:	mov	r3, #0
   18ec4:	str	r3, [sp, #96]	; 0x60
   18ec8:	and	r3, r1, #-16777216	; 0xff000000
   18ecc:	str	r3, [sp, #100]	; 0x64
   18ed0:	ldrd	r2, [sp, #96]	; 0x60
   18ed4:	cmp	r3, #1795162112	; 0x6b000000
   18ed8:	cmpeq	r2, #0
   18edc:	bne	18f20 <_start@@Base+0x3c44>
   18ee0:	mov	r1, r5
   18ee4:	mov	r3, #1
   18ee8:	mov	r2, r4
   18eec:	mov	r0, r8
   18ef0:	bl	18798 <_start@@Base+0x34bc>
   18ef4:	cmp	r5, r0
   18ef8:	mov	r1, r0
   18efc:	beq	18f20 <_start@@Base+0x3c44>
   18f00:	ldr	r3, [pc, #88]	; 18f60 <_start@@Base+0x3c84>
   18f04:	str	r3, [sp, #8]
   18f08:	ldr	r3, [sp, #108]	; 0x6c
   18f0c:	str	r3, [sp, #4]
   18f10:	mov	r3, #5
   18f14:	str	r3, [sp]
   18f18:	mov	r3, #2
   18f1c:	b	18a44 <_start@@Base+0x3768>
   18f20:	mov	r2, r4
   18f24:	mov	r1, r5
   18f28:	b	18e20 <_start@@Base+0x3b44>
   18f2c:	nop	{0}
   18f30:	svcpl	0x00636861
   18f34:			; <UNDEFINED> instruction: 0x6d61696e
   18f38:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   18f3c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   18f40:	andeq	r0, r0, r0
   18f44:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18f48:	ldrbvs	r0, [r2, #-0]!
   18f4c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   18f50:	svcpl	0x006b6963
   18f54:	cmnvc	r9, #1694498816	; 0x65000000
   18f58:	rsbvc	r0, r5, r0
   18f5c:	blvs	17f6148 <__bss_end__@@Base+0x17b0d84>
   18f60:	andeq	r9, r1, r4, lsr ip
   18f64:	andeq	r5, r4, r8, lsr #1
   18f68:	strheq	r5, [r4], -r8
   18f6c:	cmp	r1, r2
   18f70:	push	{r4, r5, r6, lr}
   18f74:	mov	ip, r2
   18f78:	mov	r6, r0
   18f7c:	beq	18f8c <_start@@Base+0x3cb0>
   18f80:	ldrb	r4, [r1]
   18f84:	cmp	r4, #91	; 0x5b
   18f88:	beq	18fa8 <_start@@Base+0x3ccc>
   18f8c:	mov	r2, #0
   18f90:	mov	r0, r6
   18f94:	pop	{r4, r5, r6, lr}
   18f98:	str	r2, [r3]
   18f9c:	mov	r3, #22
   18fa0:	mov	r2, ip
   18fa4:	b	251c8 <flatcc_json_parser_set_error@@Base>
   18fa8:	add	r1, r1, #1
   18fac:	mov	r4, r2
   18fb0:	mov	r5, r3
   18fb4:	bl	16ed8 <_start@@Base+0x1bfc>
   18fb8:	cmp	r4, r0
   18fbc:	beq	18fe8 <_start@@Base+0x3d0c>
   18fc0:	ldrb	r3, [r0]
   18fc4:	cmp	r3, #93	; 0x5d
   18fc8:	bne	18fe8 <_start@@Base+0x3d0c>
   18fcc:	mov	r3, #0
   18fd0:	mov	r2, r4
   18fd4:	add	r1, r0, #1
   18fd8:	mov	r0, r6
   18fdc:	str	r3, [r5]
   18fe0:	pop	{r4, r5, r6, lr}
   18fe4:	b	16ed8 <_start@@Base+0x1bfc>
   18fe8:	mov	r3, #1
   18fec:	str	r3, [r5]
   18ff0:	pop	{r4, r5, r6, pc}
   18ff4:	push	{r4, r5, r6, r7, lr}
   18ff8:	mov	r6, #0
   18ffc:	sub	sp, sp, #28
   19000:	mov	r7, #0
   19004:	mov	r5, #0
   19008:	cmp	r1, r2
   1900c:	moveq	r0, r1
   19010:	strd	r6, [r3]
   19014:	str	r5, [sp, #12]
   19018:	strd	r6, [sp, #16]
   1901c:	beq	19070 <_start@@Base+0x3d94>
   19020:	mov	r6, r3
   19024:	add	r3, sp, #16
   19028:	mov	r7, r1
   1902c:	mov	r4, r0
   19030:	str	r3, [sp]
   19034:	add	r3, sp, #12
   19038:	mov	r5, r2
   1903c:	bl	2640c <flatcc_json_parser_integer@@Base>
   19040:	cmp	r7, r0
   19044:	beq	19070 <_start@@Base+0x3d94>
   19048:	ldr	r3, [sp, #12]
   1904c:	cmp	r3, #0
   19050:	ldrdeq	r2, [sp, #16]
   19054:	strdeq	r2, [r6]
   19058:	beq	19070 <_start@@Base+0x3d94>
   1905c:	mov	r1, r0
   19060:	mov	r3, #8
   19064:	mov	r2, r5
   19068:	mov	r0, r4
   1906c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19070:	add	sp, sp, #28
   19074:	pop	{r4, r5, r6, r7, pc}
   19078:	mov	r0, #0
   1907c:	bx	lr
   19080:	bx	lr
   19084:	push	{r4, r5, r6, r7, r8, r9, lr}
   19088:	mov	lr, #0
   1908c:	sub	sp, sp, #28
   19090:	mov	r6, #0
   19094:	mov	r7, #0
   19098:	cmp	r1, r2
   1909c:	moveq	r0, r1
   190a0:	str	lr, [r3]
   190a4:	str	lr, [sp, #12]
   190a8:	strd	r6, [sp, #16]
   190ac:	beq	19118 <_start@@Base+0x3e3c>
   190b0:	mov	r6, r3
   190b4:	add	r3, sp, #16
   190b8:	mov	r7, r1
   190bc:	mov	r5, r0
   190c0:	str	r3, [sp]
   190c4:	add	r3, sp, #12
   190c8:	mov	r4, r2
   190cc:	bl	2640c <flatcc_json_parser_integer@@Base>
   190d0:	cmp	r7, r0
   190d4:	beq	19118 <_start@@Base+0x3e3c>
   190d8:	ldr	r3, [sp, #12]
   190dc:	cmp	r3, #0
   190e0:	movne	r3, #8
   190e4:	bne	19108 <_start@@Base+0x3e2c>
   190e8:	ldrd	r2, [sp, #16]
   190ec:	mov	r9, #0
   190f0:	mvn	r8, #0
   190f4:	cmp	r3, r9
   190f8:	cmpeq	r2, r8
   190fc:	strls	r2, [r6]
   19100:	bls	19118 <_start@@Base+0x3e3c>
   19104:	mov	r3, #7
   19108:	mov	r1, r0
   1910c:	mov	r2, r4
   19110:	mov	r0, r5
   19114:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19118:	add	sp, sp, #28
   1911c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19120:	push	{r4, r5, r6, r7, r8, r9, lr}
   19124:	mov	lr, #0
   19128:	sub	sp, sp, #28
   1912c:	mov	r6, #0
   19130:	mov	r7, #0
   19134:	cmp	r1, r2
   19138:	moveq	r0, r1
   1913c:	strh	lr, [r3]
   19140:	str	lr, [sp, #12]
   19144:	strd	r6, [sp, #16]
   19148:	beq	191b4 <_start@@Base+0x3ed8>
   1914c:	mov	r6, r3
   19150:	add	r3, sp, #16
   19154:	mov	r7, r1
   19158:	mov	r5, r0
   1915c:	str	r3, [sp]
   19160:	add	r3, sp, #12
   19164:	mov	r4, r2
   19168:	bl	2640c <flatcc_json_parser_integer@@Base>
   1916c:	cmp	r7, r0
   19170:	beq	191b4 <_start@@Base+0x3ed8>
   19174:	ldr	r3, [sp, #12]
   19178:	cmp	r3, #0
   1917c:	movne	r3, #8
   19180:	bne	191a4 <_start@@Base+0x3ec8>
   19184:	ldrd	r2, [sp, #16]
   19188:	mov	r9, #0
   1918c:	movw	r8, #65535	; 0xffff
   19190:	cmp	r3, r9
   19194:	cmpeq	r2, r8
   19198:	strhls	r2, [r6]
   1919c:	bls	191b4 <_start@@Base+0x3ed8>
   191a0:	mov	r3, #7
   191a4:	mov	r1, r0
   191a8:	mov	r2, r4
   191ac:	mov	r0, r5
   191b0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   191b4:	add	sp, sp, #28
   191b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   191bc:	push	{r4, r5, r6, r7, lr}
   191c0:	mov	lr, #0
   191c4:	sub	sp, sp, #28
   191c8:	mov	r6, #0
   191cc:	mov	r7, #0
   191d0:	cmp	r1, r2
   191d4:	moveq	r0, r1
   191d8:	strb	lr, [r3]
   191dc:	str	lr, [sp, #12]
   191e0:	strd	r6, [sp, #16]
   191e4:	beq	19248 <_start@@Base+0x3f6c>
   191e8:	mov	r6, r3
   191ec:	add	r3, sp, #16
   191f0:	mov	r7, r1
   191f4:	mov	r5, r0
   191f8:	str	r3, [sp]
   191fc:	add	r3, sp, #12
   19200:	mov	r4, r2
   19204:	bl	2640c <flatcc_json_parser_integer@@Base>
   19208:	cmp	r7, r0
   1920c:	beq	19248 <_start@@Base+0x3f6c>
   19210:	ldr	r3, [sp, #12]
   19214:	cmp	r3, #0
   19218:	movne	r3, #8
   1921c:	bne	19238 <_start@@Base+0x3f5c>
   19220:	ldrd	r2, [sp, #16]
   19224:	cmp	r3, #0
   19228:	cmpeq	r2, #255	; 0xff
   1922c:	strbls	r2, [r6]
   19230:	bls	19248 <_start@@Base+0x3f6c>
   19234:	mov	r3, #7
   19238:	mov	r1, r0
   1923c:	mov	r2, r4
   19240:	mov	r0, r5
   19244:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19248:	add	sp, sp, #28
   1924c:	pop	{r4, r5, r6, r7, pc}
   19250:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   19254:	sub	r7, r2, r1
   19258:	mov	r8, r0
   1925c:	cmp	r7, #3
   19260:	mov	r4, r1
   19264:	mov	r6, r2
   19268:	mov	r5, r3
   1926c:	ble	192bc <_start@@Base+0x3fe0>
   19270:	mov	r2, #4
   19274:	ldr	r1, [pc, #108]	; 192e8 <_start@@Base+0x400c>
   19278:	mov	r0, r4
   1927c:	bl	14554 <memcmp@plt>
   19280:	cmp	r0, #0
   19284:	moveq	r3, #1
   19288:	addeq	r0, r4, #4
   1928c:	strbeq	r3, [r5]
   19290:	beq	192e0 <_start@@Base+0x4004>
   19294:	cmp	r7, #4
   19298:	beq	192bc <_start@@Base+0x3fe0>
   1929c:	mov	r2, #5
   192a0:	ldr	r1, [pc, #68]	; 192ec <_start@@Base+0x4010>
   192a4:	mov	r0, r4
   192a8:	bl	14554 <memcmp@plt>
   192ac:	cmp	r0, #0
   192b0:	strbeq	r0, [r5]
   192b4:	addeq	r0, r4, #5
   192b8:	beq	192e0 <_start@@Base+0x4004>
   192bc:	add	r3, sp, #7
   192c0:	mov	r2, r6
   192c4:	mov	r1, r4
   192c8:	mov	r0, r8
   192cc:	bl	191bc <_start@@Base+0x3ee0>
   192d0:	ldrb	r3, [sp, #7]
   192d4:	adds	r3, r3, #0
   192d8:	movne	r3, #1
   192dc:	strb	r3, [r5]
   192e0:	add	sp, sp, #8
   192e4:	pop	{r4, r5, r6, r7, r8, pc}
   192e8:	andeq	lr, r2, r6, asr #25
   192ec:	andeq	lr, r2, fp, asr #25
   192f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192f4:	sub	sp, sp, #36	; 0x24
   192f8:	mov	r6, #0
   192fc:	mov	r5, r2
   19300:	mov	r8, r0
   19304:	ldr	r7, [sp, #72]	; 0x48
   19308:	str	r3, [sp, #12]
   1930c:	str	r6, [r7]
   19310:	str	r6, [r7, #4]
   19314:	bl	17a6c <_start@@Base+0x2790>
   19318:	cmp	r5, r0
   1931c:	mov	r4, r0
   19320:	beq	193f4 <_start@@Base+0x4118>
   19324:	mov	fp, r6
   19328:	ldr	r9, [sp, #12]
   1932c:	mov	sl, r4
   19330:	add	r3, sp, #20
   19334:	mov	r1, r4
   19338:	mov	r2, r5
   1933c:	mov	r0, r8
   19340:	str	r3, [sp, #4]
   19344:	add	r3, sp, #24
   19348:	str	r3, [sp]
   1934c:	add	r3, sp, #16
   19350:	ldr	ip, [r9]
   19354:	blx	ip
   19358:	cmp	r5, r0
   1935c:	mov	r4, r0
   19360:	beq	193f4 <_start@@Base+0x4118>
   19364:	cmp	sl, r0
   19368:	bne	193a0 <_start@@Base+0x40c4>
   1936c:	ldr	r3, [r9, #4]!
   19370:	mov	sl, r0
   19374:	cmp	r3, #0
   19378:	bne	19330 <_start@@Base+0x4054>
   1937c:	mov	r1, r0
   19380:	mov	r3, #23
   19384:	mov	r2, r5
   19388:	mov	r0, r8
   1938c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19390:	mov	r4, r0
   19394:	b	193f4 <_start@@Base+0x4118>
   19398:	mov	r4, r5
   1939c:	b	193f4 <_start@@Base+0x4118>
   193a0:	ldr	r3, [sp, #16]
   193a4:	cmp	r3, #0
   193a8:	ldreq	r6, [sp, #24]
   193ac:	ldreq	fp, [sp, #28]
   193b0:	beq	193d0 <_start@@Base+0x40f4>
   193b4:	mov	r3, #8
   193b8:	mov	r2, r5
   193bc:	mov	r1, r4
   193c0:	mov	r0, r8
   193c4:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   193c8:	cmp	r5, r0
   193cc:	beq	19398 <_start@@Base+0x40bc>
   193d0:	ldr	r3, [r7]
   193d4:	ldr	r2, [r7, #4]
   193d8:	adds	r3, r3, r6
   193dc:	str	r3, [r7]
   193e0:	adc	r2, r2, fp
   193e4:	ldr	r3, [sp, #20]
   193e8:	str	r2, [r7, #4]
   193ec:	cmp	r3, #0
   193f0:	bne	19328 <_start@@Base+0x404c>
   193f4:	mov	r0, r4
   193f8:	add	sp, sp, #36	; 0x24
   193fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19400:	push	{r4, r5, r6, r7, r8, lr}
   19404:	mov	r4, #0
   19408:	sub	sp, sp, #24
   1940c:	mov	r5, #0
   19410:	cmp	r1, r2
   19414:	moveq	r0, r1
   19418:	str	r4, [r3]
   1941c:	str	r4, [sp, #12]
   19420:	strd	r4, [sp, #16]
   19424:	beq	19484 <_start@@Base+0x41a8>
   19428:	mov	r6, r3
   1942c:	add	r3, sp, #16
   19430:	mov	r4, r1
   19434:	mov	r8, r0
   19438:	str	r3, [sp]
   1943c:	add	r3, sp, #12
   19440:	mov	r7, r2
   19444:	bl	2640c <flatcc_json_parser_integer@@Base>
   19448:	cmp	r4, r0
   1944c:	beq	19484 <_start@@Base+0x41a8>
   19450:	ldr	r3, [sp, #12]
   19454:	ldrd	r4, [sp, #16]
   19458:	cmp	r3, #0
   1945c:	beq	1948c <_start@@Base+0x41b0>
   19460:	cmp	r5, #0
   19464:	cmpeq	r4, #-2147483648	; 0x80000000
   19468:	movhi	r3, #8
   1946c:	rsbls	r4, r4, #0
   19470:	bls	194a4 <_start@@Base+0x41c8>
   19474:	mov	r1, r0
   19478:	mov	r2, r7
   1947c:	mov	r0, r8
   19480:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19484:	add	sp, sp, #24
   19488:	pop	{r4, r5, r6, r7, r8, pc}
   1948c:	mov	r3, #0
   19490:	mvn	r2, #-2147483648	; 0x80000000
   19494:	cmp	r5, r3
   19498:	cmpeq	r4, r2
   1949c:	movhi	r3, #7
   194a0:	bhi	19474 <_start@@Base+0x4198>
   194a4:	str	r4, [r6]
   194a8:	b	19484 <_start@@Base+0x41a8>
   194ac:	push	{r4, r5, r6, r7, r8, lr}
   194b0:	mov	r4, #0
   194b4:	sub	sp, sp, #24
   194b8:	mov	r5, #0
   194bc:	cmp	r1, r2
   194c0:	moveq	r0, r1
   194c4:	strh	r4, [r3]
   194c8:	str	r4, [sp, #12]
   194cc:	strd	r4, [sp, #16]
   194d0:	beq	19530 <_start@@Base+0x4254>
   194d4:	mov	r6, r3
   194d8:	add	r3, sp, #16
   194dc:	mov	r4, r1
   194e0:	mov	r8, r0
   194e4:	str	r3, [sp]
   194e8:	add	r3, sp, #12
   194ec:	mov	r7, r2
   194f0:	bl	2640c <flatcc_json_parser_integer@@Base>
   194f4:	cmp	r4, r0
   194f8:	beq	19530 <_start@@Base+0x4254>
   194fc:	ldr	r3, [sp, #12]
   19500:	ldrd	r4, [sp, #16]
   19504:	cmp	r3, #0
   19508:	beq	19538 <_start@@Base+0x425c>
   1950c:	cmp	r5, #0
   19510:	cmpeq	r4, #32768	; 0x8000
   19514:	movhi	r3, #8
   19518:	rsbls	r4, r4, #0
   1951c:	bls	19550 <_start@@Base+0x4274>
   19520:	mov	r1, r0
   19524:	mov	r2, r7
   19528:	mov	r0, r8
   1952c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19530:	add	sp, sp, #24
   19534:	pop	{r4, r5, r6, r7, r8, pc}
   19538:	mov	r3, #0
   1953c:	movw	r2, #32767	; 0x7fff
   19540:	cmp	r5, r3
   19544:	cmpeq	r4, r2
   19548:	movhi	r3, #7
   1954c:	bhi	19520 <_start@@Base+0x4244>
   19550:	strh	r4, [r6]
   19554:	b	19530 <_start@@Base+0x4254>
   19558:	push	{r4, r5, r6, r7, r8, lr}
   1955c:	mov	lr, #0
   19560:	sub	sp, sp, #24
   19564:	mov	r4, #0
   19568:	mov	r5, #0
   1956c:	cmp	r1, r2
   19570:	moveq	r0, r1
   19574:	strb	lr, [r3]
   19578:	str	lr, [sp, #12]
   1957c:	strd	r4, [sp, #16]
   19580:	beq	195e0 <_start@@Base+0x4304>
   19584:	mov	r6, r3
   19588:	add	r3, sp, #16
   1958c:	mov	r4, r1
   19590:	mov	r8, r0
   19594:	str	r3, [sp]
   19598:	add	r3, sp, #12
   1959c:	mov	r7, r2
   195a0:	bl	2640c <flatcc_json_parser_integer@@Base>
   195a4:	cmp	r4, r0
   195a8:	beq	195e0 <_start@@Base+0x4304>
   195ac:	ldr	r3, [sp, #12]
   195b0:	ldrd	r4, [sp, #16]
   195b4:	cmp	r3, #0
   195b8:	beq	195e8 <_start@@Base+0x430c>
   195bc:	cmp	r5, #0
   195c0:	cmpeq	r4, #128	; 0x80
   195c4:	movhi	r3, #8
   195c8:	rsbls	r4, r4, #0
   195cc:	bls	195f8 <_start@@Base+0x431c>
   195d0:	mov	r1, r0
   195d4:	mov	r2, r7
   195d8:	mov	r0, r8
   195dc:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   195e0:	add	sp, sp, #24
   195e4:	pop	{r4, r5, r6, r7, r8, pc}
   195e8:	cmp	r5, #0
   195ec:	cmpeq	r4, #127	; 0x7f
   195f0:	movhi	r3, #7
   195f4:	bhi	195d0 <_start@@Base+0x42f4>
   195f8:	strb	r4, [r6]
   195fc:	b	195e0 <_start@@Base+0x4304>
   19600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19604:	sub	sp, sp, #28
   19608:	mov	r6, #0
   1960c:	mov	r5, r2
   19610:	mov	r7, r0
   19614:	mov	sl, r3
   19618:	ldr	fp, [sp, #64]	; 0x40
   1961c:	strb	r6, [fp]
   19620:	bl	17a6c <_start@@Base+0x2790>
   19624:	mov	r4, r0
   19628:	cmp	r5, r0
   1962c:	beq	196c0 <_start@@Base+0x43e4>
   19630:	mov	r8, sl
   19634:	mov	r9, r4
   19638:	add	r3, sp, #12
   1963c:	mov	r1, r4
   19640:	mov	r2, r5
   19644:	mov	r0, r7
   19648:	str	r3, [sp, #4]
   1964c:	add	r3, sp, #16
   19650:	str	r3, [sp]
   19654:	add	r3, sp, #8
   19658:	ldr	ip, [r8]
   1965c:	blx	ip
   19660:	cmp	r5, r0
   19664:	mov	r4, r0
   19668:	beq	196c0 <_start@@Base+0x43e4>
   1966c:	cmp	r9, r0
   19670:	bne	196cc <_start@@Base+0x43f0>
   19674:	ldr	r3, [r8, #4]!
   19678:	mov	r9, r0
   1967c:	cmp	r3, #0
   19680:	bne	19638 <_start@@Base+0x435c>
   19684:	mov	r1, r0
   19688:	mov	r3, #23
   1968c:	mov	r2, r5
   19690:	mov	r0, r7
   19694:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19698:	mov	r4, r0
   1969c:	b	196c0 <_start@@Base+0x43e4>
   196a0:	ldrd	r2, [sp, #16]
   196a4:	cmp	r3, #0
   196a8:	cmpeq	r2, #255	; 0xff
   196ac:	uxtbls	r6, r2
   196b0:	bls	196f4 <_start@@Base+0x4418>
   196b4:	mov	r3, #7
   196b8:	b	196dc <_start@@Base+0x4400>
   196bc:	mov	r4, r5
   196c0:	mov	r0, r4
   196c4:	add	sp, sp, #28
   196c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196cc:	ldr	r3, [sp, #8]
   196d0:	cmp	r3, #0
   196d4:	beq	196a0 <_start@@Base+0x43c4>
   196d8:	mov	r3, #8
   196dc:	mov	r2, r5
   196e0:	mov	r1, r4
   196e4:	mov	r0, r7
   196e8:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   196ec:	cmp	r5, r0
   196f0:	beq	196bc <_start@@Base+0x43e0>
   196f4:	ldrb	r3, [fp]
   196f8:	add	r3, r6, r3
   196fc:	strb	r3, [fp]
   19700:	ldr	r3, [sp, #12]
   19704:	cmp	r3, #0
   19708:	b	1962c <_start@@Base+0x4350>
   1970c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19710:	sub	sp, sp, #28
   19714:	mov	r6, #0
   19718:	mov	r5, r2
   1971c:	mov	r7, r0
   19720:	mov	fp, r3
   19724:	ldr	r8, [sp, #64]	; 0x40
   19728:	str	r6, [r8]
   1972c:	bl	17a6c <_start@@Base+0x2790>
   19730:	mov	r4, r0
   19734:	cmp	r5, r0
   19738:	beq	197d4 <_start@@Base+0x44f8>
   1973c:	mov	r9, fp
   19740:	mov	sl, r4
   19744:	add	r3, sp, #12
   19748:	mov	r1, r4
   1974c:	mov	r2, r5
   19750:	mov	r0, r7
   19754:	str	r3, [sp, #4]
   19758:	add	r3, sp, #16
   1975c:	str	r3, [sp]
   19760:	add	r3, sp, #8
   19764:	ldr	ip, [r9]
   19768:	blx	ip
   1976c:	cmp	r5, r0
   19770:	mov	r4, r0
   19774:	beq	197d4 <_start@@Base+0x44f8>
   19778:	cmp	sl, r0
   1977c:	bne	197e0 <_start@@Base+0x4504>
   19780:	ldr	r3, [r9, #4]!
   19784:	mov	sl, r0
   19788:	cmp	r3, #0
   1978c:	bne	19744 <_start@@Base+0x4468>
   19790:	mov	r1, r0
   19794:	mov	r3, #23
   19798:	mov	r2, r5
   1979c:	mov	r0, r7
   197a0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   197a4:	mov	r4, r0
   197a8:	b	197d4 <_start@@Base+0x44f8>
   197ac:	ldrd	r2, [sp, #16]
   197b0:	mov	r1, #0
   197b4:	mvn	r0, #0
   197b8:	cmp	r3, r1
   197bc:	cmpeq	r2, r0
   197c0:	movls	r6, r2
   197c4:	bls	19808 <_start@@Base+0x452c>
   197c8:	mov	r3, #7
   197cc:	b	197f0 <_start@@Base+0x4514>
   197d0:	mov	r4, r5
   197d4:	mov	r0, r4
   197d8:	add	sp, sp, #28
   197dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e0:	ldr	r3, [sp, #8]
   197e4:	cmp	r3, #0
   197e8:	beq	197ac <_start@@Base+0x44d0>
   197ec:	mov	r3, #8
   197f0:	mov	r2, r5
   197f4:	mov	r1, r4
   197f8:	mov	r0, r7
   197fc:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19800:	cmp	r5, r0
   19804:	beq	197d0 <_start@@Base+0x44f4>
   19808:	ldr	r3, [r8]
   1980c:	add	r3, r3, r6
   19810:	str	r3, [r8]
   19814:	ldr	r3, [sp, #12]
   19818:	cmp	r3, #0
   1981c:	b	19738 <_start@@Base+0x445c>
   19820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19824:	sub	sp, sp, #28
   19828:	mov	fp, r3
   1982c:	mov	r6, #0
   19830:	mov	r5, r2
   19834:	mov	r7, r0
   19838:	ldr	r3, [sp, #64]	; 0x40
   1983c:	strh	r6, [r3]
   19840:	bl	17a6c <_start@@Base+0x2790>
   19844:	mov	r4, r0
   19848:	cmp	r5, r0
   1984c:	beq	198e8 <_start@@Base+0x460c>
   19850:	mov	r8, fp
   19854:	mov	r9, r4
   19858:	add	sl, sp, #16
   1985c:	add	r3, sp, #12
   19860:	mov	r1, r4
   19864:	str	sl, [sp]
   19868:	mov	r2, r5
   1986c:	mov	r0, r7
   19870:	str	r3, [sp, #4]
   19874:	add	r3, sp, #8
   19878:	ldr	ip, [r8]
   1987c:	blx	ip
   19880:	cmp	r5, r0
   19884:	mov	r4, r0
   19888:	beq	198e8 <_start@@Base+0x460c>
   1988c:	cmp	r9, r0
   19890:	bne	198f4 <_start@@Base+0x4618>
   19894:	ldr	r3, [r8, #4]!
   19898:	mov	r9, r0
   1989c:	cmp	r3, #0
   198a0:	bne	1985c <_start@@Base+0x4580>
   198a4:	mov	r1, r0
   198a8:	mov	r3, #23
   198ac:	mov	r2, r5
   198b0:	mov	r0, r7
   198b4:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   198b8:	mov	r4, r0
   198bc:	b	198e8 <_start@@Base+0x460c>
   198c0:	ldrd	r2, [sp, #16]
   198c4:	mov	r1, #0
   198c8:	movw	r0, #65535	; 0xffff
   198cc:	cmp	r3, r1
   198d0:	cmpeq	r2, r0
   198d4:	uxthls	r6, r2
   198d8:	bls	1991c <_start@@Base+0x4640>
   198dc:	mov	r3, #7
   198e0:	b	19904 <_start@@Base+0x4628>
   198e4:	mov	r4, r5
   198e8:	mov	r0, r4
   198ec:	add	sp, sp, #28
   198f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198f4:	ldr	r3, [sp, #8]
   198f8:	cmp	r3, #0
   198fc:	beq	198c0 <_start@@Base+0x45e4>
   19900:	mov	r3, #8
   19904:	mov	r2, r5
   19908:	mov	r1, r4
   1990c:	mov	r0, r7
   19910:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19914:	cmp	r5, r0
   19918:	beq	198e4 <_start@@Base+0x4608>
   1991c:	ldr	r3, [sp, #64]	; 0x40
   19920:	ldr	r2, [sp, #64]	; 0x40
   19924:	ldrh	r3, [r3]
   19928:	add	r3, r6, r3
   1992c:	strh	r3, [r2]
   19930:	ldr	r3, [sp, #12]
   19934:	cmp	r3, #0
   19938:	b	1984c <_start@@Base+0x4570>
   1993c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19940:	sub	sp, sp, #28
   19944:	mov	r6, #0
   19948:	mov	r5, r2
   1994c:	mov	r7, r0
   19950:	mov	fp, r3
   19954:	ldr	r8, [sp, #64]	; 0x40
   19958:	str	r6, [r8]
   1995c:	bl	17a6c <_start@@Base+0x2790>
   19960:	mov	r4, r0
   19964:	cmp	r5, r0
   19968:	beq	19a24 <_start@@Base+0x4748>
   1996c:	mov	r9, fp
   19970:	mov	sl, r4
   19974:	add	r3, sp, #12
   19978:	mov	r1, r4
   1997c:	mov	r2, r5
   19980:	mov	r0, r7
   19984:	str	r3, [sp, #4]
   19988:	add	r3, sp, #16
   1998c:	str	r3, [sp]
   19990:	add	r3, sp, #8
   19994:	ldr	ip, [r9]
   19998:	blx	ip
   1999c:	cmp	r5, r0
   199a0:	mov	r4, r0
   199a4:	beq	19a24 <_start@@Base+0x4748>
   199a8:	cmp	sl, r0
   199ac:	bne	19a30 <_start@@Base+0x4754>
   199b0:	ldr	r3, [r9, #4]!
   199b4:	mov	sl, r0
   199b8:	cmp	r3, #0
   199bc:	bne	19974 <_start@@Base+0x4698>
   199c0:	mov	r1, r0
   199c4:	mov	r3, #23
   199c8:	mov	r2, r5
   199cc:	mov	r0, r7
   199d0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   199d4:	mov	r4, r0
   199d8:	b	19a24 <_start@@Base+0x4748>
   199dc:	cmp	r3, #0
   199e0:	cmpeq	r2, #-2147483648	; 0x80000000
   199e4:	movhi	r3, #8
   199e8:	rsbls	r6, r2, #0
   199ec:	bls	19a08 <_start@@Base+0x472c>
   199f0:	mov	r2, r5
   199f4:	mov	r1, r4
   199f8:	mov	r0, r7
   199fc:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19a00:	cmp	r5, r0
   19a04:	beq	19a20 <_start@@Base+0x4744>
   19a08:	ldr	r3, [r8]
   19a0c:	add	r3, r3, r6
   19a10:	str	r3, [r8]
   19a14:	ldr	r3, [sp, #12]
   19a18:	cmp	r3, #0
   19a1c:	b	19968 <_start@@Base+0x468c>
   19a20:	mov	r4, r5
   19a24:	mov	r0, r4
   19a28:	add	sp, sp, #28
   19a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a30:	ldr	r1, [sp, #8]
   19a34:	ldrd	r2, [sp, #16]
   19a38:	cmp	r1, #0
   19a3c:	bne	199dc <_start@@Base+0x4700>
   19a40:	mov	r1, #0
   19a44:	mvn	r0, #-2147483648	; 0x80000000
   19a48:	cmp	r3, r1
   19a4c:	cmpeq	r2, r0
   19a50:	movls	r6, r2
   19a54:	bls	19a08 <_start@@Base+0x472c>
   19a58:	mov	r3, #7
   19a5c:	b	199f0 <_start@@Base+0x4714>
   19a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a64:	mov	r8, r3
   19a68:	mov	r3, #0
   19a6c:	mov	r4, r2
   19a70:	mov	r2, #4
   19a74:	sub	sp, sp, #28
   19a78:	mov	r5, r0
   19a7c:	mov	r6, r1
   19a80:	mov	r1, r2
   19a84:	ldr	r0, [r0]
   19a88:	str	r3, [r8]
   19a8c:	bl	21660 <flatcc_builder_start_struct@@Base>
   19a90:	subs	r9, r0, #0
   19a94:	beq	19bc4 <_start@@Base+0x48e8>
   19a98:	ldr	sl, [pc, #392]	; 19c28 <_start@@Base+0x494c>
   19a9c:	mov	r1, r6
   19aa0:	add	r3, sp, #16
   19aa4:	mov	r2, r4
   19aa8:	mov	r0, r5
   19aac:	bl	18644 <_start@@Base+0x3368>
   19ab0:	mov	r6, r0
   19ab4:	ldr	r3, [sp, #16]
   19ab8:	cmp	r3, #0
   19abc:	beq	19ba8 <_start@@Base+0x48cc>
   19ac0:	mov	r2, r4
   19ac4:	mov	r1, r6
   19ac8:	mov	r0, r5
   19acc:	bl	17a14 <_start@@Base+0x2738>
   19ad0:	mov	r1, r4
   19ad4:	mov	r6, r0
   19ad8:	bl	153d0 <_start@@Base+0xf4>
   19adc:	add	r3, pc, #316	; 0x13c
   19ae0:	ldrd	r2, [r3]
   19ae4:	cmp	r1, r3
   19ae8:	cmpeq	r0, r2
   19aec:	bne	19c0c <_start@@Base+0x4930>
   19af0:	add	r6, r6, #8
   19af4:	mov	r1, r4
   19af8:	mov	r0, r6
   19afc:	mov	fp, #0
   19b00:	bl	153d0 <_start@@Base+0xf4>
   19b04:	and	r3, r1, sl
   19b08:	str	fp, [sp, #8]
   19b0c:	mov	r0, #0
   19b10:	ldr	r1, [pc, #276]	; 19c2c <_start@@Base+0x4950>
   19b14:	str	r3, [sp, #12]
   19b18:	ldrd	r2, [sp, #8]
   19b1c:	cmp	r3, r1
   19b20:	cmpeq	r2, r0
   19b24:	bne	19c0c <_start@@Base+0x4930>
   19b28:	mov	r3, #2
   19b2c:	mov	r2, r4
   19b30:	mov	r1, r6
   19b34:	mov	r0, r5
   19b38:	bl	18798 <_start@@Base+0x34bc>
   19b3c:	cmp	r6, r0
   19b40:	mov	r7, r0
   19b44:	beq	19c0c <_start@@Base+0x4930>
   19b48:	add	r6, sp, #20
   19b4c:	mov	r1, r0
   19b50:	str	fp, [sp, #20]
   19b54:	mov	r3, r6
   19b58:	mov	r2, r4
   19b5c:	mov	r0, r5
   19b60:	bl	19400 <_start@@Base+0x4124>
   19b64:	cmp	r7, r0
   19b68:	bne	19be8 <_start@@Base+0x490c>
   19b6c:	ldr	r3, [pc, #188]	; 19c30 <_start@@Base+0x4954>
   19b70:	mov	r2, r4
   19b74:	mov	r1, r7
   19b78:	mov	r0, r5
   19b7c:	str	r6, [sp]
   19b80:	bl	1993c <_start@@Base+0x4660>
   19b84:	cmp	r4, r0
   19b88:	cmpne	r7, r0
   19b8c:	bne	19be8 <_start@@Base+0x490c>
   19b90:	mov	r1, r0
   19b94:	mov	r3, #33	; 0x21
   19b98:	mov	r2, r4
   19b9c:	mov	r0, r5
   19ba0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19ba4:	mov	r6, r0
   19ba8:	cmp	r4, r6
   19bac:	beq	19bc4 <_start@@Base+0x48e8>
   19bb0:	ldr	r0, [r5]
   19bb4:	bl	216b0 <flatcc_builder_end_struct@@Base>
   19bb8:	cmp	r0, #0
   19bbc:	str	r0, [r8]
   19bc0:	bne	19bdc <_start@@Base+0x4900>
   19bc4:	mov	r1, r6
   19bc8:	mov	r3, #33	; 0x21
   19bcc:	mov	r2, r4
   19bd0:	mov	r0, r5
   19bd4:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19bd8:	mov	r6, r0
   19bdc:	mov	r0, r6
   19be0:	add	sp, sp, #28
   19be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19be8:	ldr	r3, [sp, #20]
   19bec:	str	r3, [r9]
   19bf0:	mov	r1, r0
   19bf4:	add	r3, sp, #16
   19bf8:	mov	r2, r4
   19bfc:	mov	r0, r5
   19c00:	bl	16fc8 <_start@@Base+0x1cec>
   19c04:	mov	r6, r0
   19c08:	b	19ab4 <_start@@Base+0x47d8>
   19c0c:	mov	r2, r4
   19c10:	mov	r1, r6
   19c14:	mov	r0, r5
   19c18:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   19c1c:	b	19bf0 <_start@@Base+0x4914>
   19c20:	cmpvc	pc, #1342177286	; 0x50000006
   19c24:	rsbvs	r6, pc, #428	; 0x1ac
   19c28:			; <UNDEFINED> instruction: 0xffff0000
   19c2c:	cmnvs	r4, r0
   19c30:	andeq	r5, r4, r8, asr #1
   19c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c38:	sub	sp, sp, #28
   19c3c:	mov	ip, #0
   19c40:	cmp	r3, #9
   19c44:	mov	r4, r0
   19c48:	mov	r6, r1
   19c4c:	mov	r5, r2
   19c50:	ldr	r7, [sp, #64]	; 0x40
   19c54:	str	ip, [r7]
   19c58:	beq	1a040 <_start@@Base+0x4d64>
   19c5c:	bhi	19c8c <_start@@Base+0x49b0>
   19c60:	cmp	r3, #2
   19c64:	beq	19cc4 <_start@@Base+0x49e8>
   19c68:	cmp	r3, #8
   19c6c:	beq	19ecc <_start@@Base+0x4bf0>
   19c70:	cmp	r3, ip
   19c74:	bne	19ca0 <_start@@Base+0x49c4>
   19c78:	bl	163c8 <_start@@Base+0x10ec>
   19c7c:	mov	r6, r0
   19c80:	mov	r0, r6
   19c84:	add	sp, sp, #28
   19c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c8c:	cmp	r3, #11
   19c90:	beq	1a058 <_start@@Base+0x4d7c>
   19c94:	bcc	1a040 <_start@@Base+0x4d64>
   19c98:	cmp	r3, #255	; 0xff
   19c9c:	beq	1a058 <_start@@Base+0x4d7c>
   19ca0:	ldr	r3, [r4, #8]
   19ca4:	tst	r3, #1
   19ca8:	moveq	r3, #15
   19cac:	beq	19d50 <_start@@Base+0x4a74>
   19cb0:	mov	r2, r5
   19cb4:	mov	r1, r6
   19cb8:	mov	r0, r4
   19cbc:	bl	25ea0 <flatcc_json_parser_generic_json@@Base>
   19cc0:	b	19c7c <_start@@Base+0x49a0>
   19cc4:	mov	r1, #1
   19cc8:	ldr	r0, [r0]
   19ccc:	bl	21ce8 <flatcc_builder_start_table@@Base>
   19cd0:	cmp	r0, #0
   19cd4:	bne	19d1c <_start@@Base+0x4a40>
   19cd8:	add	r3, sp, #16
   19cdc:	mov	r2, r5
   19ce0:	mov	r1, r6
   19ce4:	mov	r0, r4
   19ce8:	bl	18644 <_start@@Base+0x3368>
   19cec:	ldr	r3, [sp, #16]
   19cf0:	mov	r6, r0
   19cf4:	cmp	r3, #0
   19cf8:	bne	19d64 <_start@@Base+0x4a88>
   19cfc:	ldr	r3, [r4, #24]
   19d00:	cmp	r3, #0
   19d04:	bne	19d1c <_start@@Base+0x4a40>
   19d08:	ldr	r0, [r4]
   19d0c:	bl	22310 <flatcc_builder_end_table@@Base>
   19d10:	cmp	r0, #0
   19d14:	str	r0, [r7]
   19d18:	bne	19d34 <_start@@Base+0x4a58>
   19d1c:	mov	r3, #33	; 0x21
   19d20:	mov	r2, r5
   19d24:	mov	r1, r6
   19d28:	mov	r0, r4
   19d2c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19d30:	mov	r6, r0
   19d34:	ldr	r3, [r4, #24]
   19d38:	cmp	r3, #0
   19d3c:	bne	19c80 <_start@@Base+0x49a4>
   19d40:	ldr	r3, [r7]
   19d44:	cmp	r3, #0
   19d48:	bne	19c80 <_start@@Base+0x49a4>
   19d4c:	mov	r3, #33	; 0x21
   19d50:	mov	r2, r5
   19d54:	mov	r1, r6
   19d58:	mov	r0, r4
   19d5c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19d60:	b	19c7c <_start@@Base+0x49a0>
   19d64:	mov	r2, r5
   19d68:	mov	r1, r6
   19d6c:	mov	r0, r4
   19d70:	bl	17a14 <_start@@Base+0x2738>
   19d74:	mov	r1, r5
   19d78:	mov	r6, r0
   19d7c:	bl	153d0 <_start@@Base+0xf4>
   19d80:	add	r3, pc, #744	; 0x2e8
   19d84:	ldrd	r2, [r3]
   19d88:	cmp	r1, r3
   19d8c:	cmpeq	r0, r2
   19d90:	bne	19ec0 <_start@@Base+0x4be4>
   19d94:	add	fp, pc, #732	; 0x2dc
   19d98:	ldrd	sl, [fp]
   19d9c:	add	r3, r6, #8
   19da0:	mov	r1, r5
   19da4:	mov	r0, r3
   19da8:	bl	153d0 <_start@@Base+0xf4>
   19dac:	cmp	r1, fp
   19db0:	cmpeq	r0, sl
   19db4:	bne	19ea8 <_start@@Base+0x4bcc>
   19db8:	add	r6, r6, #16
   19dbc:	mov	r1, r5
   19dc0:	mov	r0, r6
   19dc4:	mov	fp, #0
   19dc8:	bl	153d0 <_start@@Base+0xf4>
   19dcc:	add	r3, pc, #684	; 0x2ac
   19dd0:	ldrd	r2, [r3]
   19dd4:	bic	r9, r1, #255	; 0xff
   19dd8:	cmp	r9, r3
   19ddc:	cmpeq	fp, r2
   19de0:	bne	19ec0 <_start@@Base+0x4be4>
   19de4:	mov	r3, #3
   19de8:	mov	r2, r5
   19dec:	mov	r1, r6
   19df0:	mov	r0, r4
   19df4:	bl	18798 <_start@@Base+0x34bc>
   19df8:	cmp	r6, r0
   19dfc:	mov	sl, r0
   19e00:	beq	19ec0 <_start@@Base+0x4be4>
   19e04:	str	fp, [sp, #20]
   19e08:	add	fp, sp, #20
   19e0c:	mov	r1, r0
   19e10:	mov	r2, r5
   19e14:	mov	r0, r4
   19e18:	mov	r3, fp
   19e1c:	bl	19400 <_start@@Base+0x4124>
   19e20:	cmp	sl, r0
   19e24:	mov	r6, r0
   19e28:	bne	19e54 <_start@@Base+0x4b78>
   19e2c:	mov	r1, r0
   19e30:	ldr	r3, [pc, #608]	; 1a098 <_start@@Base+0x4dbc>
   19e34:	mov	r2, r5
   19e38:	mov	r0, r4
   19e3c:	str	fp, [sp]
   19e40:	bl	1993c <_start@@Base+0x4660>
   19e44:	cmp	r5, r0
   19e48:	cmpne	r6, r0
   19e4c:	mov	r6, r0
   19e50:	beq	19d1c <_start@@Base+0x4a40>
   19e54:	ldr	r3, [sp, #20]
   19e58:	cmp	r3, #0
   19e5c:	bne	19e6c <_start@@Base+0x4b90>
   19e60:	ldr	r3, [r4, #8]
   19e64:	tst	r3, #2
   19e68:	beq	19e90 <_start@@Base+0x4bb4>
   19e6c:	mov	r3, #4
   19e70:	mov	r1, #0
   19e74:	ldr	r0, [r4]
   19e78:	mov	r2, r3
   19e7c:	bl	22c6c <flatcc_builder_table_add@@Base>
   19e80:	cmp	r0, #0
   19e84:	beq	19d1c <_start@@Base+0x4a40>
   19e88:	ldr	r3, [sp, #20]
   19e8c:	str	r3, [r0]
   19e90:	add	r3, sp, #16
   19e94:	mov	r2, r5
   19e98:	mov	r1, r6
   19e9c:	mov	r0, r4
   19ea0:	bl	16fc8 <_start@@Base+0x1cec>
   19ea4:	b	19cec <_start@@Base+0x4a10>
   19ea8:	mov	r2, r5
   19eac:	mov	r1, r3
   19eb0:	mov	r0, r4
   19eb4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   19eb8:	mov	r6, r0
   19ebc:	b	19e90 <_start@@Base+0x4bb4>
   19ec0:	mov	r2, r5
   19ec4:	mov	r1, r6
   19ec8:	b	19eb0 <_start@@Base+0x4bd4>
   19ecc:	mov	r2, #2
   19ed0:	ldr	r0, [r0]
   19ed4:	mov	r1, r2
   19ed8:	bl	21660 <flatcc_builder_start_struct@@Base>
   19edc:	subs	r9, r0, #0
   19ee0:	beq	19d1c <_start@@Base+0x4a40>
   19ee4:	ldr	sl, [pc, #432]	; 1a09c <_start@@Base+0x4dc0>
   19ee8:	mov	r1, r6
   19eec:	add	r3, sp, #20
   19ef0:	mov	r2, r5
   19ef4:	mov	r0, r4
   19ef8:	bl	18644 <_start@@Base+0x3368>
   19efc:	mov	r6, r0
   19f00:	ldr	r3, [sp, #20]
   19f04:	cmp	r3, #0
   19f08:	beq	19ff4 <_start@@Base+0x4d18>
   19f0c:	mov	r2, r5
   19f10:	mov	r1, r6
   19f14:	mov	r0, r4
   19f18:	bl	17a14 <_start@@Base+0x2738>
   19f1c:	mov	r1, r5
   19f20:	mov	r6, r0
   19f24:	bl	153d0 <_start@@Base+0xf4>
   19f28:	add	r3, pc, #344	; 0x158
   19f2c:	ldrd	r2, [r3]
   19f30:	cmp	r1, r3
   19f34:	cmpeq	r0, r2
   19f38:	bne	1a02c <_start@@Base+0x4d50>
   19f3c:	add	r6, r6, #8
   19f40:	mov	r1, r5
   19f44:	mov	r0, r6
   19f48:	mov	fp, #0
   19f4c:	bl	153d0 <_start@@Base+0xf4>
   19f50:	bic	r3, r1, #255	; 0xff
   19f54:	str	fp, [sp, #8]
   19f58:	add	r1, pc, #304	; 0x130
   19f5c:	ldrd	r0, [r1]
   19f60:	str	r3, [sp, #12]
   19f64:	ldrd	r2, [sp, #8]
   19f68:	cmp	r3, r1
   19f6c:	cmpeq	r2, r0
   19f70:	bne	1a02c <_start@@Base+0x4d50>
   19f74:	mov	r3, #3
   19f78:	mov	r2, r5
   19f7c:	mov	r1, r6
   19f80:	mov	r0, r4
   19f84:	bl	18798 <_start@@Base+0x34bc>
   19f88:	cmp	r6, r0
   19f8c:	mov	r8, r0
   19f90:	beq	1a02c <_start@@Base+0x4d50>
   19f94:	add	r6, sp, #16
   19f98:	mov	r1, r0
   19f9c:	strh	fp, [sp, #16]
   19fa0:	mov	r3, r6
   19fa4:	mov	r2, r5
   19fa8:	mov	r0, r4
   19fac:	bl	19120 <_start@@Base+0x3e44>
   19fb0:	cmp	r8, r0
   19fb4:	bne	1a008 <_start@@Base+0x4d2c>
   19fb8:	mov	r3, sl
   19fbc:	mov	r2, r5
   19fc0:	str	r6, [sp]
   19fc4:	mov	r1, r8
   19fc8:	mov	r0, r4
   19fcc:	bl	19820 <_start@@Base+0x4544>
   19fd0:	cmp	r5, r0
   19fd4:	cmpne	r8, r0
   19fd8:	bne	1a008 <_start@@Base+0x4d2c>
   19fdc:	mov	r1, r0
   19fe0:	mov	r3, #33	; 0x21
   19fe4:	mov	r2, r5
   19fe8:	mov	r0, r4
   19fec:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   19ff0:	mov	r6, r0
   19ff4:	cmp	r5, r6
   19ff8:	beq	19d1c <_start@@Base+0x4a40>
   19ffc:	ldr	r0, [r4]
   1a000:	bl	216b0 <flatcc_builder_end_struct@@Base>
   1a004:	b	19d10 <_start@@Base+0x4a34>
   1a008:	ldrh	r3, [sp, #16]
   1a00c:	strh	r3, [r9]
   1a010:	mov	r1, r0
   1a014:	add	r3, sp, #20
   1a018:	mov	r2, r5
   1a01c:	mov	r0, r4
   1a020:	bl	16fc8 <_start@@Base+0x1cec>
   1a024:	mov	r6, r0
   1a028:	b	19f00 <_start@@Base+0x4c24>
   1a02c:	mov	r2, r5
   1a030:	mov	r1, r6
   1a034:	mov	r0, r4
   1a038:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1a03c:	b	1a010 <_start@@Base+0x4d34>
   1a040:	mov	r3, r7
   1a044:	mov	r2, r5
   1a048:	mov	r1, r6
   1a04c:	mov	r0, r4
   1a050:	bl	19a60 <_start@@Base+0x4784>
   1a054:	b	19d30 <_start@@Base+0x4a54>
   1a058:	mov	r3, r7
   1a05c:	mov	r2, r5
   1a060:	mov	r1, r6
   1a064:	mov	r0, r4
   1a068:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1a06c:	b	19d30 <_start@@Base+0x4a54>
   1a070:	ldrbvs	r6, [pc], #-372	; 1a078 <_start@@Base+0x4d9c>
   1a074:	cmnvc	r7, #456	; 0x1c8
   1a078:	svcpl	0x0064616d
   1a07c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1a080:	andeq	r0, r0, r0
   1a084:	cmnvs	r7, r0, lsl #10
   1a088:	svcpl	0x006c656e
   1a08c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1a090:	andeq	r0, r0, r0
   1a094:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1a098:	ldrdeq	r5, [r4], -r4
   1a09c:	andeq	r5, r4, r0, ror #1
   1a0a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0a4:	sub	sp, sp, #28
   1a0a8:	mov	fp, r3
   1a0ac:	mov	r6, #0
   1a0b0:	mov	r5, r2
   1a0b4:	mov	r7, r0
   1a0b8:	ldr	r3, [sp, #64]	; 0x40
   1a0bc:	strh	r6, [r3]
   1a0c0:	bl	17a6c <_start@@Base+0x2790>
   1a0c4:	mov	r4, r0
   1a0c8:	cmp	r5, r0
   1a0cc:	beq	1a194 <_start@@Base+0x4eb8>
   1a0d0:	mov	r8, fp
   1a0d4:	mov	r9, r4
   1a0d8:	add	sl, sp, #16
   1a0dc:	add	r3, sp, #12
   1a0e0:	mov	r1, r4
   1a0e4:	str	sl, [sp]
   1a0e8:	mov	r2, r5
   1a0ec:	mov	r0, r7
   1a0f0:	str	r3, [sp, #4]
   1a0f4:	add	r3, sp, #8
   1a0f8:	ldr	ip, [r8]
   1a0fc:	blx	ip
   1a100:	cmp	r5, r0
   1a104:	mov	r4, r0
   1a108:	beq	1a194 <_start@@Base+0x4eb8>
   1a10c:	cmp	r9, r0
   1a110:	bne	1a1a0 <_start@@Base+0x4ec4>
   1a114:	ldr	r3, [r8, #4]!
   1a118:	mov	r9, r0
   1a11c:	cmp	r3, #0
   1a120:	bne	1a0dc <_start@@Base+0x4e00>
   1a124:	mov	r1, r0
   1a128:	mov	r3, #23
   1a12c:	mov	r2, r5
   1a130:	mov	r0, r7
   1a134:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a138:	mov	r4, r0
   1a13c:	b	1a194 <_start@@Base+0x4eb8>
   1a140:	cmp	r3, #0
   1a144:	cmpeq	r2, #32768	; 0x8000
   1a148:	rsbls	r6, r2, #0
   1a14c:	movhi	r3, #8
   1a150:	sxthls	r6, r6
   1a154:	bls	1a170 <_start@@Base+0x4e94>
   1a158:	mov	r2, r5
   1a15c:	mov	r1, r4
   1a160:	mov	r0, r7
   1a164:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a168:	cmp	r5, r0
   1a16c:	beq	1a190 <_start@@Base+0x4eb4>
   1a170:	ldr	r3, [sp, #64]	; 0x40
   1a174:	ldr	r2, [sp, #64]	; 0x40
   1a178:	ldrh	r3, [r3]
   1a17c:	add	r3, r3, r6
   1a180:	strh	r3, [r2]
   1a184:	ldr	r3, [sp, #12]
   1a188:	cmp	r3, #0
   1a18c:	b	1a0cc <_start@@Base+0x4df0>
   1a190:	mov	r4, r5
   1a194:	mov	r0, r4
   1a198:	add	sp, sp, #28
   1a19c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1a0:	ldr	r1, [sp, #8]
   1a1a4:	ldrd	r2, [sp, #16]
   1a1a8:	cmp	r1, #0
   1a1ac:	bne	1a140 <_start@@Base+0x4e64>
   1a1b0:	mov	r1, #0
   1a1b4:	movw	r0, #32767	; 0x7fff
   1a1b8:	cmp	r3, r1
   1a1bc:	cmpeq	r2, r0
   1a1c0:	sxthls	r6, r2
   1a1c4:	bls	1a170 <_start@@Base+0x4e94>
   1a1c8:	mov	r3, #7
   1a1cc:	b	1a158 <_start@@Base+0x4e7c>
   1a1d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1d4:	sub	sp, sp, #28
   1a1d8:	mov	r6, #0
   1a1dc:	mov	r5, r2
   1a1e0:	mov	r7, r0
   1a1e4:	mov	sl, r3
   1a1e8:	ldr	fp, [sp, #64]	; 0x40
   1a1ec:	strb	r6, [fp]
   1a1f0:	bl	17a6c <_start@@Base+0x2790>
   1a1f4:	mov	r4, r0
   1a1f8:	cmp	r5, r0
   1a1fc:	beq	1a2bc <_start@@Base+0x4fe0>
   1a200:	mov	r8, sl
   1a204:	mov	r9, r4
   1a208:	add	r3, sp, #12
   1a20c:	mov	r1, r4
   1a210:	mov	r2, r5
   1a214:	mov	r0, r7
   1a218:	str	r3, [sp, #4]
   1a21c:	add	r3, sp, #16
   1a220:	str	r3, [sp]
   1a224:	add	r3, sp, #8
   1a228:	ldr	ip, [r8]
   1a22c:	blx	ip
   1a230:	cmp	r5, r0
   1a234:	mov	r4, r0
   1a238:	beq	1a2bc <_start@@Base+0x4fe0>
   1a23c:	cmp	r9, r0
   1a240:	bne	1a2c8 <_start@@Base+0x4fec>
   1a244:	ldr	r3, [r8, #4]!
   1a248:	mov	r9, r0
   1a24c:	cmp	r3, #0
   1a250:	bne	1a208 <_start@@Base+0x4f2c>
   1a254:	mov	r1, r0
   1a258:	mov	r3, #23
   1a25c:	mov	r2, r5
   1a260:	mov	r0, r7
   1a264:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a268:	mov	r4, r0
   1a26c:	b	1a2bc <_start@@Base+0x4fe0>
   1a270:	cmp	r3, #0
   1a274:	cmpeq	r2, #128	; 0x80
   1a278:	rsbls	r6, r2, #0
   1a27c:	movhi	r3, #8
   1a280:	sxtbls	r6, r6
   1a284:	bls	1a2a0 <_start@@Base+0x4fc4>
   1a288:	mov	r2, r5
   1a28c:	mov	r1, r4
   1a290:	mov	r0, r7
   1a294:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a298:	cmp	r5, r0
   1a29c:	beq	1a2b8 <_start@@Base+0x4fdc>
   1a2a0:	ldrb	r3, [fp]
   1a2a4:	add	r3, r3, r6
   1a2a8:	strb	r3, [fp]
   1a2ac:	ldr	r3, [sp, #12]
   1a2b0:	cmp	r3, #0
   1a2b4:	b	1a1fc <_start@@Base+0x4f20>
   1a2b8:	mov	r4, r5
   1a2bc:	mov	r0, r4
   1a2c0:	add	sp, sp, #28
   1a2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2c8:	ldr	r1, [sp, #8]
   1a2cc:	ldrd	r2, [sp, #16]
   1a2d0:	cmp	r1, #0
   1a2d4:	bne	1a270 <_start@@Base+0x4f94>
   1a2d8:	cmp	r3, #0
   1a2dc:	cmpeq	r2, #127	; 0x7f
   1a2e0:	sxtbls	r6, r2
   1a2e4:	bls	1a2a0 <_start@@Base+0x4fc4>
   1a2e8:	mov	r3, #7
   1a2ec:	b	1a288 <_start@@Base+0x4fac>
   1a2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2f4:	sub	sp, sp, #20
   1a2f8:	mov	r9, r3
   1a2fc:	add	r3, sp, #12
   1a300:	mov	r6, r0
   1a304:	mov	r4, r2
   1a308:	bl	18644 <_start@@Base+0x3368>
   1a30c:	ldr	r3, [sp, #12]
   1a310:	cmp	r3, #0
   1a314:	bne	1a320 <_start@@Base+0x5044>
   1a318:	add	sp, sp, #20
   1a31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a320:	mov	r1, r0
   1a324:	mov	r2, r4
   1a328:	mov	r0, r6
   1a32c:	mov	r8, #0
   1a330:	bl	17a14 <_start@@Base+0x2738>
   1a334:	mov	r1, r4
   1a338:	mov	r5, r0
   1a33c:	bl	153d0 <_start@@Base+0xf4>
   1a340:	and	fp, r1, #-16777216	; 0xff000000
   1a344:	cmp	fp, #1644167168	; 0x62000000
   1a348:	cmpeq	r8, #0
   1a34c:	bne	1a3e0 <_start@@Base+0x5104>
   1a350:	mov	r3, #1
   1a354:	mov	r2, r4
   1a358:	mov	r1, r5
   1a35c:	mov	r0, r6
   1a360:	bl	18798 <_start@@Base+0x34bc>
   1a364:	cmp	r5, r0
   1a368:	mov	r7, r0
   1a36c:	beq	1a468 <_start@@Base+0x518c>
   1a370:	strb	r8, [sp, #10]
   1a374:	add	r8, sp, #10
   1a378:	mov	r1, r0
   1a37c:	mov	r2, r4
   1a380:	mov	r0, r6
   1a384:	mov	r3, r8
   1a388:	bl	19558 <_start@@Base+0x427c>
   1a38c:	cmp	r7, r0
   1a390:	mov	r5, r0
   1a394:	bne	1a3c0 <_start@@Base+0x50e4>
   1a398:	mov	r1, r0
   1a39c:	ldr	r3, [pc, #244]	; 1a498 <_start@@Base+0x51bc>
   1a3a0:	mov	r2, r4
   1a3a4:	mov	r0, r6
   1a3a8:	str	r8, [sp]
   1a3ac:	bl	1a1d0 <_start@@Base+0x4ef4>
   1a3b0:	cmp	r4, r0
   1a3b4:	cmpne	r5, r0
   1a3b8:	beq	1a480 <_start@@Base+0x51a4>
   1a3bc:	mov	r5, r0
   1a3c0:	ldrb	r3, [sp, #10]
   1a3c4:	strb	r3, [r9, #2]
   1a3c8:	add	r3, sp, #12
   1a3cc:	mov	r2, r4
   1a3d0:	mov	r1, r5
   1a3d4:	mov	r0, r6
   1a3d8:	bl	16fc8 <_start@@Base+0x1cec>
   1a3dc:	b	1a30c <_start@@Base+0x5030>
   1a3e0:	cmp	fp, #1627389952	; 0x61000000
   1a3e4:	cmpeq	r8, #0
   1a3e8:	bne	1a468 <_start@@Base+0x518c>
   1a3ec:	mov	r3, #1
   1a3f0:	mov	r2, r4
   1a3f4:	mov	r1, r5
   1a3f8:	mov	r0, r6
   1a3fc:	bl	18798 <_start@@Base+0x34bc>
   1a400:	cmp	r5, r0
   1a404:	mov	r7, r0
   1a408:	beq	1a468 <_start@@Base+0x518c>
   1a40c:	strh	r8, [sp, #10]
   1a410:	add	r8, sp, #10
   1a414:	mov	r1, r0
   1a418:	mov	r2, r4
   1a41c:	mov	r0, r6
   1a420:	mov	r3, r8
   1a424:	bl	194ac <_start@@Base+0x41d0>
   1a428:	cmp	r7, r0
   1a42c:	mov	r5, r0
   1a430:	bne	1a45c <_start@@Base+0x5180>
   1a434:	mov	r1, r0
   1a438:	ldr	r3, [pc, #92]	; 1a49c <_start@@Base+0x51c0>
   1a43c:	mov	r2, r4
   1a440:	mov	r0, r6
   1a444:	str	r8, [sp]
   1a448:	bl	1a0a0 <_start@@Base+0x4dc4>
   1a44c:	cmp	r4, r0
   1a450:	cmpne	r5, r0
   1a454:	beq	1a480 <_start@@Base+0x51a4>
   1a458:	mov	r5, r0
   1a45c:	ldrh	r3, [sp, #10]
   1a460:	strh	r3, [r9]
   1a464:	b	1a3c8 <_start@@Base+0x50ec>
   1a468:	mov	r1, r5
   1a46c:	mov	r2, r4
   1a470:	mov	r0, r6
   1a474:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1a478:	mov	r5, r0
   1a47c:	b	1a3c8 <_start@@Base+0x50ec>
   1a480:	mov	r1, r0
   1a484:	mov	r3, #33	; 0x21
   1a488:	mov	r2, r4
   1a48c:	mov	r0, r6
   1a490:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a494:	b	1a318 <_start@@Base+0x503c>
   1a498:	andeq	r5, r4, ip, ror #1
   1a49c:	strdeq	r5, [r4], -r8
   1a4a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4a4:	sub	sp, sp, #36	; 0x24
   1a4a8:	mov	r6, #0
   1a4ac:	mov	r5, r2
   1a4b0:	mov	r8, r0
   1a4b4:	ldr	r7, [sp, #72]	; 0x48
   1a4b8:	str	r3, [sp, #12]
   1a4bc:	str	r6, [r7]
   1a4c0:	str	r6, [r7, #4]
   1a4c4:	bl	17a6c <_start@@Base+0x2790>
   1a4c8:	cmp	r5, r0
   1a4cc:	mov	r4, r0
   1a4d0:	beq	1a5d0 <_start@@Base+0x52f4>
   1a4d4:	mov	fp, r6
   1a4d8:	ldr	r9, [sp, #12]
   1a4dc:	mov	sl, r4
   1a4e0:	add	r3, sp, #20
   1a4e4:	mov	r1, r4
   1a4e8:	mov	r2, r5
   1a4ec:	mov	r0, r8
   1a4f0:	str	r3, [sp, #4]
   1a4f4:	add	r3, sp, #24
   1a4f8:	str	r3, [sp]
   1a4fc:	add	r3, sp, #16
   1a500:	ldr	ip, [r9]
   1a504:	blx	ip
   1a508:	cmp	r5, r0
   1a50c:	mov	r4, r0
   1a510:	beq	1a5d0 <_start@@Base+0x52f4>
   1a514:	cmp	sl, r0
   1a518:	bne	1a574 <_start@@Base+0x5298>
   1a51c:	ldr	r3, [r9, #4]!
   1a520:	mov	sl, r0
   1a524:	cmp	r3, #0
   1a528:	bne	1a4e0 <_start@@Base+0x5204>
   1a52c:	mov	r1, r0
   1a530:	mov	r3, #23
   1a534:	mov	r2, r5
   1a538:	mov	r0, r8
   1a53c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a540:	mov	r4, r0
   1a544:	b	1a5d0 <_start@@Base+0x52f4>
   1a548:	cmp	r3, #-2147483648	; 0x80000000
   1a54c:	cmpeq	r2, #0
   1a550:	movhi	r3, #8
   1a554:	bhi	1a594 <_start@@Base+0x52b8>
   1a558:	rsbs	r2, r2, #0
   1a55c:	rsc	r3, r3, #0
   1a560:	mov	r6, r2
   1a564:	mov	fp, r3
   1a568:	b	1a5ac <_start@@Base+0x52d0>
   1a56c:	mov	r4, r5
   1a570:	b	1a5d0 <_start@@Base+0x52f4>
   1a574:	ldr	r1, [sp, #16]
   1a578:	ldrd	r2, [sp, #24]
   1a57c:	cmp	r1, #0
   1a580:	bne	1a548 <_start@@Base+0x526c>
   1a584:	cmp	r2, #0
   1a588:	sbcs	r1, r3, #0
   1a58c:	bge	1a560 <_start@@Base+0x5284>
   1a590:	mov	r3, #7
   1a594:	mov	r2, r5
   1a598:	mov	r1, r4
   1a59c:	mov	r0, r8
   1a5a0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a5a4:	cmp	r5, r0
   1a5a8:	beq	1a56c <_start@@Base+0x5290>
   1a5ac:	ldr	r3, [r7]
   1a5b0:	ldr	r2, [r7, #4]
   1a5b4:	adds	r3, r3, r6
   1a5b8:	str	r3, [r7]
   1a5bc:	adc	r2, r2, fp
   1a5c0:	ldr	r3, [sp, #20]
   1a5c4:	str	r2, [r7, #4]
   1a5c8:	cmp	r3, #0
   1a5cc:	bne	1a4d8 <_start@@Base+0x51fc>
   1a5d0:	mov	r0, r4
   1a5d4:	add	sp, sp, #36	; 0x24
   1a5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5e0:	sub	sp, sp, #180	; 0xb4
   1a5e4:	mov	r6, r2
   1a5e8:	mov	r5, r0
   1a5ec:	mov	r4, r1
   1a5f0:	mov	r1, #4
   1a5f4:	str	r3, [sp, #52]	; 0x34
   1a5f8:	mov	r3, #0
   1a5fc:	ldr	r2, [sp, #52]	; 0x34
   1a600:	ldr	r0, [r0]
   1a604:	str	r3, [r2]
   1a608:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1a60c:	cmp	r0, #0
   1a610:	bne	1a698 <_start@@Base+0x53bc>
   1a614:	add	r3, sp, #152	; 0x98
   1a618:	mov	r2, r6
   1a61c:	mov	r1, r4
   1a620:	mov	r0, r5
   1a624:	str	r3, [sp]
   1a628:	mov	r3, #1
   1a62c:	bl	269c4 <flatcc_json_parser_prepare_unions@@Base>
   1a630:	cmp	r6, r0
   1a634:	beq	1a698 <_start@@Base+0x53bc>
   1a638:	add	r3, sp, #144	; 0x90
   1a63c:	mov	r2, r6
   1a640:	mov	r1, r4
   1a644:	mov	r0, r5
   1a648:	bl	18644 <_start@@Base+0x3368>
   1a64c:	ldr	r3, [sp, #144]	; 0x90
   1a650:	mov	r4, r0
   1a654:	cmp	r3, #0
   1a658:	bne	1a6bc <_start@@Base+0x53e0>
   1a65c:	ldr	r3, [r5, #24]
   1a660:	cmp	r3, #0
   1a664:	bne	1a698 <_start@@Base+0x53bc>
   1a668:	mov	r1, r0
   1a66c:	mov	r2, r6
   1a670:	ldr	r3, [sp, #152]	; 0x98
   1a674:	mov	r0, r5
   1a678:	bl	26a2c <flatcc_json_parser_finalize_unions@@Base>
   1a67c:	mov	r4, r0
   1a680:	ldr	r0, [r5]
   1a684:	bl	22310 <flatcc_builder_end_table@@Base>
   1a688:	ldr	r3, [sp, #52]	; 0x34
   1a68c:	cmp	r0, #0
   1a690:	str	r0, [r3]
   1a694:	bne	1a6b0 <_start@@Base+0x53d4>
   1a698:	mov	r1, r4
   1a69c:	mov	r3, #33	; 0x21
   1a6a0:	mov	r2, r6
   1a6a4:	mov	r0, r5
   1a6a8:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a6ac:	mov	r4, r0
   1a6b0:	mov	r0, r4
   1a6b4:	add	sp, sp, #180	; 0xb4
   1a6b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6bc:	mov	r2, r6
   1a6c0:	mov	r1, r4
   1a6c4:	mov	r0, r5
   1a6c8:	bl	17a14 <_start@@Base+0x2738>
   1a6cc:	mov	r1, r6
   1a6d0:	mov	r7, r0
   1a6d4:	bl	153d0 <_start@@Base+0xf4>
   1a6d8:	add	r3, pc, #832	; 0x340
   1a6dc:	ldrd	r2, [r3]
   1a6e0:	mov	r8, r0
   1a6e4:	mov	r9, r1
   1a6e8:	cmp	r1, r3
   1a6ec:	cmpeq	r0, r2
   1a6f0:	bne	1a788 <_start@@Base+0x54ac>
   1a6f4:	add	r7, r7, #8
   1a6f8:	mov	r1, r6
   1a6fc:	mov	r0, r7
   1a700:	mov	r4, #0
   1a704:	bl	153d0 <_start@@Base+0xf4>
   1a708:	str	r4, [sp, #56]	; 0x38
   1a70c:	str	r1, [sp, #60]	; 0x3c
   1a710:	add	r3, pc, #784	; 0x310
   1a714:	ldrd	r2, [r3]
   1a718:	ldrd	r0, [sp, #56]	; 0x38
   1a71c:	cmp	r1, r3
   1a720:	cmpeq	r0, r2
   1a724:	bne	1b7b8 <_start@@Base+0x64dc>
   1a728:	mov	r1, r7
   1a72c:	mov	r3, #4
   1a730:	mov	r2, r6
   1a734:	mov	r0, r5
   1a738:	bl	18798 <_start@@Base+0x34bc>
   1a73c:	cmp	r7, r0
   1a740:	mov	r1, r0
   1a744:	beq	1b7b8 <_start@@Base+0x64dc>
   1a748:	ldr	r3, [pc, #784]	; 1aa60 <_start@@Base+0x5784>
   1a74c:	mov	r2, r6
   1a750:	mov	r0, r5
   1a754:	str	r3, [sp, #16]
   1a758:	ldr	r3, [pc, #772]	; 1aa64 <_start@@Base+0x5788>
   1a75c:	str	r3, [sp, #12]
   1a760:	ldr	r3, [pc, #768]	; 1aa68 <_start@@Base+0x578c>
   1a764:	str	r3, [sp, #8]
   1a768:	ldr	r3, [sp, #152]	; 0x98
   1a76c:	str	r3, [sp, #4]
   1a770:	mov	r3, #3
   1a774:	str	r3, [sp]
   1a778:	mov	r3, r4
   1a77c:	bl	26ddc <flatcc_json_parser_union_type_vector@@Base>
   1a780:	mov	r4, r0
   1a784:	b	1a8c8 <_start@@Base+0x55ec>
   1a788:	bic	r3, r0, #255	; 0xff
   1a78c:	str	r3, [sp, #64]	; 0x40
   1a790:	str	r1, [sp, #68]	; 0x44
   1a794:	add	r3, pc, #660	; 0x294
   1a798:	ldrd	r2, [r3]
   1a79c:	ldrd	r0, [sp, #64]	; 0x40
   1a7a0:	cmp	r1, r3
   1a7a4:	cmpeq	r0, r2
   1a7a8:	bne	1a7f8 <_start@@Base+0x551c>
   1a7ac:	mov	r1, r7
   1a7b0:	mov	r3, #7
   1a7b4:	mov	r2, r6
   1a7b8:	mov	r0, r5
   1a7bc:	bl	18798 <_start@@Base+0x34bc>
   1a7c0:	cmp	r7, r0
   1a7c4:	mov	r1, r0
   1a7c8:	beq	1a7f8 <_start@@Base+0x551c>
   1a7cc:	ldr	r3, [pc, #656]	; 1aa64 <_start@@Base+0x5788>
   1a7d0:	mov	r2, r6
   1a7d4:	mov	r0, r5
   1a7d8:	str	r3, [sp, #8]
   1a7dc:	ldr	r3, [sp, #152]	; 0x98
   1a7e0:	str	r3, [sp, #4]
   1a7e4:	mov	r3, #3
   1a7e8:	str	r3, [sp]
   1a7ec:	mov	r3, #0
   1a7f0:	bl	26d10 <flatcc_json_parser_union_vector@@Base>
   1a7f4:	b	1a780 <_start@@Base+0x54a4>
   1a7f8:	lsr	r3, r8, #16
   1a7fc:	str	r9, [sp, #36]	; 0x24
   1a800:	lsl	r3, r3, #16
   1a804:	str	r3, [sp, #32]
   1a808:	add	r3, pc, #552	; 0x228
   1a80c:	ldrd	r2, [r3]
   1a810:	ldrd	r0, [sp, #32]
   1a814:	cmp	r1, r3
   1a818:	cmpeq	r0, r2
   1a81c:	bne	1b74c <_start@@Base+0x6470>
   1a820:	mov	r3, #6
   1a824:	mov	r2, r6
   1a828:	mov	r1, r7
   1a82c:	mov	r0, r5
   1a830:	bl	18798 <_start@@Base+0x34bc>
   1a834:	cmp	r7, r0
   1a838:	mov	r4, r0
   1a83c:	beq	1b738 <_start@@Base+0x645c>
   1a840:	mov	r3, #0
   1a844:	mov	r1, #3
   1a848:	ldr	r0, [r5]
   1a84c:	str	r3, [sp, #148]	; 0x94
   1a850:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1a854:	cmp	r0, #0
   1a858:	bne	1aa00 <_start@@Base+0x5724>
   1a85c:	add	r3, sp, #156	; 0x9c
   1a860:	mov	r2, r6
   1a864:	mov	r1, r4
   1a868:	mov	r0, r5
   1a86c:	bl	18644 <_start@@Base+0x3368>
   1a870:	ldr	r3, [sp, #156]	; 0x9c
   1a874:	mov	r4, r0
   1a878:	cmp	r3, #0
   1a87c:	bne	1a8e0 <_start@@Base+0x5604>
   1a880:	ldr	r3, [r5, #24]
   1a884:	cmp	r3, #0
   1a888:	bne	1aa00 <_start@@Base+0x5724>
   1a88c:	ldr	r0, [r5]
   1a890:	bl	22310 <flatcc_builder_end_table@@Base>
   1a894:	cmp	r0, #0
   1a898:	str	r0, [sp, #148]	; 0x94
   1a89c:	beq	1aa00 <_start@@Base+0x5724>
   1a8a0:	ldr	r3, [sp, #148]	; 0x94
   1a8a4:	cmp	r3, #0
   1a8a8:	beq	1a698 <_start@@Base+0x53bc>
   1a8ac:	mov	r1, #0
   1a8b0:	ldr	r0, [r5]
   1a8b4:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1a8b8:	cmp	r0, #0
   1a8bc:	beq	1a698 <_start@@Base+0x53bc>
   1a8c0:	ldr	r3, [sp, #148]	; 0x94
   1a8c4:	str	r3, [r0]
   1a8c8:	add	r3, sp, #144	; 0x90
   1a8cc:	mov	r2, r6
   1a8d0:	mov	r1, r4
   1a8d4:	mov	r0, r5
   1a8d8:	bl	16fc8 <_start@@Base+0x1cec>
   1a8dc:	b	1a64c <_start@@Base+0x5370>
   1a8e0:	mov	r2, r6
   1a8e4:	mov	r1, r4
   1a8e8:	mov	r0, r5
   1a8ec:	bl	17a14 <_start@@Base+0x2738>
   1a8f0:	mov	r1, r6
   1a8f4:	mov	r7, r0
   1a8f8:	bl	153d0 <_start@@Base+0xf4>
   1a8fc:	add	r3, pc, #316	; 0x13c
   1a900:	ldrd	r2, [r3]
   1a904:	cmp	r1, r3
   1a908:	cmpeq	r0, r2
   1a90c:	bne	1b72c <_start@@Base+0x6450>
   1a910:	add	r9, pc, #304	; 0x130
   1a914:	ldrd	r8, [r9]
   1a918:	add	r3, r7, #8
   1a91c:	mov	r1, r6
   1a920:	mov	r0, r3
   1a924:	bl	153d0 <_start@@Base+0xf4>
   1a928:	cmp	r1, r9
   1a92c:	cmpeq	r0, r8
   1a930:	bne	1b720 <_start@@Base+0x6444>
   1a934:	add	r7, r7, #16
   1a938:	mov	r1, r6
   1a93c:	mov	r0, r7
   1a940:	bl	153d0 <_start@@Base+0xf4>
   1a944:	lsr	r3, r0, #16
   1a948:	str	r1, [sp, #28]
   1a94c:	lsl	r3, r3, #16
   1a950:	str	r3, [sp, #24]
   1a954:	add	r3, pc, #244	; 0xf4
   1a958:	ldrd	r2, [r3]
   1a95c:	ldrd	r8, [sp, #24]
   1a960:	cmp	r9, r3
   1a964:	cmpeq	r8, r2
   1a968:	bne	1ac78 <_start@@Base+0x599c>
   1a96c:	mov	r3, #6
   1a970:	mov	r2, r6
   1a974:	mov	r1, r7
   1a978:	mov	r0, r5
   1a97c:	bl	18798 <_start@@Base+0x34bc>
   1a980:	cmp	r7, r0
   1a984:	mov	r4, r0
   1a988:	beq	1b708 <_start@@Base+0x642c>
   1a98c:	mov	r1, #2
   1a990:	ldr	r0, [r5]
   1a994:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1a998:	cmp	r0, #0
   1a99c:	bne	1a9e8 <_start@@Base+0x570c>
   1a9a0:	add	r9, pc, #176	; 0xb0
   1a9a4:	ldrd	r8, [r9]
   1a9a8:	mov	r1, r4
   1a9ac:	add	r3, sp, #164	; 0xa4
   1a9b0:	mov	r2, r6
   1a9b4:	mov	r0, r5
   1a9b8:	bl	18644 <_start@@Base+0x3368>
   1a9bc:	mov	r4, r0
   1a9c0:	ldr	r3, [sp, #164]	; 0xa4
   1a9c4:	cmp	r3, #0
   1a9c8:	bne	1aa6c <_start@@Base+0x5790>
   1a9cc:	ldr	r3, [r5, #24]
   1a9d0:	cmp	r3, #0
   1a9d4:	bne	1a9e8 <_start@@Base+0x570c>
   1a9d8:	ldr	r0, [r5]
   1a9dc:	bl	22310 <flatcc_builder_end_table@@Base>
   1a9e0:	subs	r7, r0, #0
   1a9e4:	bne	1b7c4 <_start@@Base+0x64e8>
   1a9e8:	mov	r1, r4
   1a9ec:	mov	r3, #33	; 0x21
   1a9f0:	mov	r2, r6
   1a9f4:	mov	r0, r5
   1a9f8:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1a9fc:	mov	r4, r0
   1aa00:	mov	r1, r4
   1aa04:	mov	r3, #33	; 0x21
   1aa08:	mov	r2, r6
   1aa0c:	mov	r0, r5
   1aa10:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1aa14:	mov	r4, r0
   1aa18:	b	1a8a0 <_start@@Base+0x55c4>
   1aa1c:	nop	{0}
   1aa20:	cmnvs	lr, pc, asr r9
   1aa24:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1aa28:	andeq	r0, r0, r0
   1aa2c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1aa30:	cmnvs	lr, r0, lsl #18
   1aa34:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1aa38:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1aa3c:	rsbsvc	r6, r2, r6, ror #10
   1aa40:	bvs	1cf6800 <__bss_end__@@Base+0x1cb143c>
   1aa44:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1aa48:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1aa4c:	rsbsvc	r6, r2, r6, ror #10
   1aa50:	ldrvs	r0, [r2, -r0]!
   1aa54:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1aa58:	svcpl	0x00626262
   1aa5c:	cmnvs	r1, r1, ror #2
   1aa60:			; <UNDEFINED> instruction: 0x000154bc
   1aa64:	andeq	lr, r1, r8, lsl #29
   1aa68:	andeq	r5, r4, r4, lsl #2
   1aa6c:	mov	r1, r4
   1aa70:	mov	r2, r6
   1aa74:	mov	r0, r5
   1aa78:	bl	17a14 <_start@@Base+0x2738>
   1aa7c:	mov	r1, r6
   1aa80:	mov	r4, r0
   1aa84:	bl	153d0 <_start@@Base+0xf4>
   1aa88:	cmp	r1, r9
   1aa8c:	cmpeq	r0, r8
   1aa90:	bne	1ac60 <_start@@Base+0x5984>
   1aa94:	add	r4, r4, #8
   1aa98:	mov	r1, r6
   1aa9c:	add	fp, pc, #956	; 0x3bc
   1aaa0:	ldrd	sl, [fp]
   1aaa4:	mov	r0, r4
   1aaa8:	bl	153d0 <_start@@Base+0xf4>
   1aaac:	bic	r3, r0, #255	; 0xff
   1aab0:	str	r3, [sp, #72]	; 0x48
   1aab4:	str	r1, [sp, #76]	; 0x4c
   1aab8:	ldrd	r2, [sp, #72]	; 0x48
   1aabc:	cmp	r3, fp
   1aac0:	cmpeq	r2, sl
   1aac4:	bne	1ab98 <_start@@Base+0x58bc>
   1aac8:	mov	r3, #7
   1aacc:	mov	r2, r6
   1aad0:	mov	r1, r4
   1aad4:	mov	r0, r5
   1aad8:	bl	18798 <_start@@Base+0x34bc>
   1aadc:	cmp	r4, r0
   1aae0:	mov	r7, r0
   1aae4:	beq	1ac60 <_start@@Base+0x5984>
   1aae8:	mov	r2, #0
   1aaec:	mov	r3, #0
   1aaf0:	add	sl, sp, #168	; 0xa8
   1aaf4:	mov	r1, r0
   1aaf8:	mov	r0, r5
   1aafc:	strd	r2, [sp, #168]	; 0xa8
   1ab00:	mov	r3, sl
   1ab04:	mov	r2, r6
   1ab08:	bl	17968 <_start@@Base+0x268c>
   1ab0c:	cmp	r7, r0
   1ab10:	mov	r4, r0
   1ab14:	bne	1ab40 <_start@@Base+0x5864>
   1ab18:	mov	r1, r0
   1ab1c:	ldr	r3, [pc, #868]	; 1ae88 <_start@@Base+0x5bac>
   1ab20:	mov	r2, r6
   1ab24:	mov	r0, r5
   1ab28:	str	sl, [sp]
   1ab2c:	bl	1a4a0 <_start@@Base+0x51c4>
   1ab30:	cmp	r6, r0
   1ab34:	cmpne	r4, r0
   1ab38:	mov	r4, r0
   1ab3c:	beq	1a9e8 <_start@@Base+0x570c>
   1ab40:	ldrd	r2, [sp, #168]	; 0xa8
   1ab44:	orrs	r3, r2, r3
   1ab48:	bne	1ab58 <_start@@Base+0x587c>
   1ab4c:	ldr	r3, [r5, #8]
   1ab50:	tst	r3, #2
   1ab54:	beq	1ab7c <_start@@Base+0x58a0>
   1ab58:	mov	r3, #8
   1ab5c:	mov	r1, #0
   1ab60:	ldr	r0, [r5]
   1ab64:	mov	r2, r3
   1ab68:	bl	22c6c <flatcc_builder_table_add@@Base>
   1ab6c:	cmp	r0, #0
   1ab70:	beq	1a9e8 <_start@@Base+0x570c>
   1ab74:	ldrd	r2, [sp, #168]	; 0xa8
   1ab78:	strd	r2, [r0]
   1ab7c:	mov	r1, r4
   1ab80:	add	r3, sp, #164	; 0xa4
   1ab84:	mov	r2, r6
   1ab88:	mov	r0, r5
   1ab8c:	bl	16fc8 <_start@@Base+0x1cec>
   1ab90:	mov	r4, r0
   1ab94:	b	1a9c0 <_start@@Base+0x56e4>
   1ab98:	add	r3, pc, #712	; 0x2c8
   1ab9c:	ldrd	r2, [r3]
   1aba0:	cmp	r1, r3
   1aba4:	cmpeq	r0, r2
   1aba8:	bne	1ac60 <_start@@Base+0x5984>
   1abac:	mov	r3, #8
   1abb0:	mov	r2, r6
   1abb4:	mov	r1, r4
   1abb8:	mov	r0, r5
   1abbc:	bl	18798 <_start@@Base+0x34bc>
   1abc0:	cmp	r4, r0
   1abc4:	mov	r7, r0
   1abc8:	beq	1ac60 <_start@@Base+0x5984>
   1abcc:	mov	r3, #0
   1abd0:	add	sl, sp, #168	; 0xa8
   1abd4:	mov	r1, r0
   1abd8:	mov	r2, r6
   1abdc:	mov	r0, r5
   1abe0:	str	r3, [sp, #168]	; 0xa8
   1abe4:	mov	r3, sl
   1abe8:	bl	19084 <_start@@Base+0x3da8>
   1abec:	cmp	r7, r0
   1abf0:	mov	r4, r0
   1abf4:	bne	1ac20 <_start@@Base+0x5944>
   1abf8:	mov	r1, r0
   1abfc:	ldr	r3, [pc, #648]	; 1ae8c <_start@@Base+0x5bb0>
   1ac00:	mov	r2, r6
   1ac04:	mov	r0, r5
   1ac08:	str	sl, [sp]
   1ac0c:	bl	1970c <_start@@Base+0x4430>
   1ac10:	cmp	r6, r0
   1ac14:	cmpne	r4, r0
   1ac18:	mov	r4, r0
   1ac1c:	beq	1a9e8 <_start@@Base+0x570c>
   1ac20:	ldr	r3, [sp, #168]	; 0xa8
   1ac24:	cmp	r3, #0
   1ac28:	bne	1ac38 <_start@@Base+0x595c>
   1ac2c:	ldr	r3, [r5, #8]
   1ac30:	tst	r3, #2
   1ac34:	beq	1ab7c <_start@@Base+0x58a0>
   1ac38:	mov	r3, #4
   1ac3c:	mov	r1, #1
   1ac40:	ldr	r0, [r5]
   1ac44:	mov	r2, r3
   1ac48:	bl	22c6c <flatcc_builder_table_add@@Base>
   1ac4c:	cmp	r0, #0
   1ac50:	beq	1a9e8 <_start@@Base+0x570c>
   1ac54:	ldr	r3, [sp, #168]	; 0xa8
   1ac58:	str	r3, [r0]
   1ac5c:	b	1ab7c <_start@@Base+0x58a0>
   1ac60:	mov	r1, r4
   1ac64:	mov	r2, r6
   1ac68:	mov	r0, r5
   1ac6c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ac70:	mov	r4, r0
   1ac74:	b	1ab7c <_start@@Base+0x58a0>
   1ac78:	and	r3, r0, #-16777216	; 0xff000000
   1ac7c:	str	r3, [sp, #80]	; 0x50
   1ac80:	str	r1, [sp, #84]	; 0x54
   1ac84:	add	r3, pc, #484	; 0x1e4
   1ac88:	ldrd	r2, [r3]
   1ac8c:	ldrd	r0, [sp, #80]	; 0x50
   1ac90:	cmp	r1, r3
   1ac94:	cmpeq	r0, r2
   1ac98:	bne	1b418 <_start@@Base+0x613c>
   1ac9c:	mov	r3, #5
   1aca0:	mov	r2, r6
   1aca4:	mov	r1, r7
   1aca8:	mov	r0, r5
   1acac:	bl	18798 <_start@@Base+0x34bc>
   1acb0:	cmp	r7, r0
   1acb4:	mov	r4, r0
   1acb8:	beq	1b414 <_start@@Base+0x6138>
   1acbc:	mov	r1, #9
   1acc0:	ldr	r0, [r5]
   1acc4:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1acc8:	cmp	r0, #0
   1accc:	bne	1a9e8 <_start@@Base+0x570c>
   1acd0:	add	r3, sp, #160	; 0xa0
   1acd4:	mov	r2, r6
   1acd8:	mov	r1, r4
   1acdc:	mov	r0, r5
   1ace0:	bl	18644 <_start@@Base+0x3368>
   1ace4:	ldr	r3, [sp, #160]	; 0xa0
   1ace8:	mov	r4, r0
   1acec:	cmp	r3, #0
   1acf0:	bne	1ad40 <_start@@Base+0x5a64>
   1acf4:	ldr	r7, [r5, #24]
   1acf8:	cmp	r7, #0
   1acfc:	bne	1a9e8 <_start@@Base+0x570c>
   1ad00:	ldr	r0, [r5]
   1ad04:	bl	22310 <flatcc_builder_end_table@@Base>
   1ad08:	subs	r8, r0, #0
   1ad0c:	beq	1a9e8 <_start@@Base+0x570c>
   1ad10:	mov	r1, r7
   1ad14:	ldr	r0, [r5]
   1ad18:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1aa00 <_start@@Base+0x5724>
   1ad24:	str	r8, [r0]
   1ad28:	add	r3, sp, #156	; 0x9c
   1ad2c:	mov	r2, r6
   1ad30:	mov	r1, r4
   1ad34:	mov	r0, r5
   1ad38:	bl	16fc8 <_start@@Base+0x1cec>
   1ad3c:	b	1a870 <_start@@Base+0x5594>
   1ad40:	mov	r2, r6
   1ad44:	mov	r1, r4
   1ad48:	mov	r0, r5
   1ad4c:	bl	17a14 <_start@@Base+0x2738>
   1ad50:	mov	r1, r6
   1ad54:	mov	r4, r0
   1ad58:	bl	153d0 <_start@@Base+0xf4>
   1ad5c:	add	r3, pc, #276	; 0x114
   1ad60:	ldrd	r2, [r3]
   1ad64:	cmp	r1, r3
   1ad68:	cmpeq	r0, r2
   1ad6c:	bhi	1b05c <_start@@Base+0x5d80>
   1ad70:	add	r3, pc, #264	; 0x108
   1ad74:	ldrd	r2, [r3]
   1ad78:	cmp	r1, r3
   1ad7c:	cmpeq	r0, r2
   1ad80:	bne	1ae98 <_start@@Base+0x5bbc>
   1ad84:	add	r4, r4, #8
   1ad88:	mov	r1, r6
   1ad8c:	mov	r0, r4
   1ad90:	mov	r8, #0
   1ad94:	bl	153d0 <_start@@Base+0xf4>
   1ad98:	and	r3, r1, #-16777216	; 0xff000000
   1ad9c:	str	r8, [sp, #88]	; 0x58
   1ada0:	str	r3, [sp, #92]	; 0x5c
   1ada4:	ldrd	r2, [sp, #88]	; 0x58
   1ada8:	cmp	r3, #889192448	; 0x35000000
   1adac:	cmpeq	r2, #0
   1adb0:	bne	1b3f0 <_start@@Base+0x6114>
   1adb4:	mov	r3, #1
   1adb8:	mov	r2, r6
   1adbc:	mov	r1, r4
   1adc0:	mov	r0, r5
   1adc4:	bl	18798 <_start@@Base+0x34bc>
   1adc8:	cmp	r4, r0
   1adcc:	mov	r7, r0
   1add0:	beq	1b3f0 <_start@@Base+0x6114>
   1add4:	str	r8, [sp, #168]	; 0xa8
   1add8:	add	r8, sp, #168	; 0xa8
   1addc:	mov	r1, r0
   1ade0:	mov	r2, r6
   1ade4:	mov	r0, r5
   1ade8:	mov	r3, r8
   1adec:	bl	19084 <_start@@Base+0x3da8>
   1adf0:	cmp	r7, r0
   1adf4:	mov	r4, r0
   1adf8:	bne	1ae24 <_start@@Base+0x5b48>
   1adfc:	mov	r1, r0
   1ae00:	ldr	r3, [pc, #136]	; 1ae90 <_start@@Base+0x5bb4>
   1ae04:	mov	r2, r6
   1ae08:	mov	r0, r5
   1ae0c:	str	r8, [sp]
   1ae10:	bl	1970c <_start@@Base+0x4430>
   1ae14:	cmp	r6, r0
   1ae18:	cmpne	r4, r0
   1ae1c:	mov	r4, r0
   1ae20:	beq	1a9e8 <_start@@Base+0x570c>
   1ae24:	ldr	r3, [sp, #168]	; 0xa8
   1ae28:	cmp	r3, #0
   1ae2c:	bne	1ae3c <_start@@Base+0x5b60>
   1ae30:	ldr	r3, [r5, #8]
   1ae34:	tst	r3, #2
   1ae38:	beq	1afe4 <_start@@Base+0x5d08>
   1ae3c:	mov	r3, #4
   1ae40:	mov	r1, #1
   1ae44:	mov	r2, r3
   1ae48:	ldr	r0, [r5]
   1ae4c:	bl	22c6c <flatcc_builder_table_add@@Base>
   1ae50:	cmp	r0, #0
   1ae54:	beq	1a9e8 <_start@@Base+0x570c>
   1ae58:	ldr	r3, [sp, #168]	; 0xa8
   1ae5c:	b	1af14 <_start@@Base+0x5c38>
   1ae60:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1ae64:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ae68:	cmnvs	r2, pc, asr r4
   1ae6c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ae70:	strvs	r0, [r0, -r0]
   1ae74:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ae78:			; <UNDEFINED> instruction: 0xffffffff
   1ae7c:	cmnvs	r3, #-2013265919	; 0x88000001
   1ae80:	teqcc	r2, r4, lsr r3
   1ae84:	cmnvs	r1, r1, ror #2
   1ae88:	andeq	r5, r4, r4, lsl r1
   1ae8c:	andeq	r5, r4, r0, lsr #2
   1ae90:	andeq	r5, r4, ip, lsr #2
   1ae94:	cmnvs	r1, r1, ror #2
   1ae98:	mov	r7, #0
   1ae9c:	ldr	r3, [pc, #-16]	; 1ae94 <_start@@Base+0x5bb8>
   1aea0:	mov	r2, #0
   1aea4:	str	r7, [sp, #40]	; 0x28
   1aea8:	str	r1, [sp, #44]	; 0x2c
   1aeac:	ldrd	r8, [sp, #40]	; 0x28
   1aeb0:	cmp	r9, r3
   1aeb4:	cmpeq	r8, r2
   1aeb8:	bne	1af1c <_start@@Base+0x5c40>
   1aebc:	mov	r1, r4
   1aec0:	mov	r3, #4
   1aec4:	mov	r2, r6
   1aec8:	mov	r0, r5
   1aecc:	bl	18798 <_start@@Base+0x34bc>
   1aed0:	cmp	r4, r0
   1aed4:	mov	r1, r0
   1aed8:	beq	1b40c <_start@@Base+0x6130>
   1aedc:	add	r3, sp, #164	; 0xa4
   1aee0:	mov	r2, r6
   1aee4:	mov	r0, r5
   1aee8:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1aeec:	ldr	r3, [sp, #164]	; 0xa4
   1aef0:	mov	r4, r0
   1aef4:	cmp	r3, r7
   1aef8:	beq	1a9e8 <_start@@Base+0x570c>
   1aefc:	mov	r1, r7
   1af00:	ldr	r0, [r5]
   1af04:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1af08:	cmp	r0, #0
   1af0c:	beq	1a9e8 <_start@@Base+0x570c>
   1af10:	ldr	r3, [sp, #164]	; 0xa4
   1af14:	str	r3, [r0]
   1af18:	b	1afe4 <_start@@Base+0x5d08>
   1af1c:	add	r3, pc, #980	; 0x3d4
   1af20:	ldrd	r2, [r3]
   1af24:	cmp	r1, r3
   1af28:	cmpeq	r0, r2
   1af2c:	bne	1affc <_start@@Base+0x5d20>
   1af30:	mov	r3, #8
   1af34:	mov	r2, r6
   1af38:	mov	r1, r4
   1af3c:	mov	r0, r5
   1af40:	bl	18798 <_start@@Base+0x34bc>
   1af44:	cmp	r4, r0
   1af48:	mov	r7, r0
   1af4c:	beq	1b3f0 <_start@@Base+0x6114>
   1af50:	mov	r2, #0
   1af54:	mov	r3, #0
   1af58:	add	r8, sp, #168	; 0xa8
   1af5c:	mov	r1, r0
   1af60:	mov	r0, r5
   1af64:	strd	r2, [sp, #168]	; 0xa8
   1af68:	mov	r3, r8
   1af6c:	mov	r2, r6
   1af70:	bl	17968 <_start@@Base+0x268c>
   1af74:	cmp	r7, r0
   1af78:	mov	r4, r0
   1af7c:	bne	1afa8 <_start@@Base+0x5ccc>
   1af80:	mov	r1, r0
   1af84:	ldr	r3, [pc, #900]	; 1b310 <_start@@Base+0x6034>
   1af88:	mov	r2, r6
   1af8c:	mov	r0, r5
   1af90:	str	r8, [sp]
   1af94:	bl	1a4a0 <_start@@Base+0x51c4>
   1af98:	cmp	r6, r0
   1af9c:	cmpne	r4, r0
   1afa0:	mov	r4, r0
   1afa4:	beq	1a9e8 <_start@@Base+0x570c>
   1afa8:	ldrd	r2, [sp, #168]	; 0xa8
   1afac:	orrs	r3, r2, r3
   1afb0:	bne	1afc0 <_start@@Base+0x5ce4>
   1afb4:	ldr	r3, [r5, #8]
   1afb8:	tst	r3, #2
   1afbc:	beq	1afe4 <_start@@Base+0x5d08>
   1afc0:	mov	r3, #8
   1afc4:	mov	r1, #3
   1afc8:	mov	r2, r3
   1afcc:	ldr	r0, [r5]
   1afd0:	bl	22c6c <flatcc_builder_table_add@@Base>
   1afd4:	cmp	r0, #0
   1afd8:	beq	1a9e8 <_start@@Base+0x570c>
   1afdc:	ldrd	r2, [sp, #168]	; 0xa8
   1afe0:	strd	r2, [r0]
   1afe4:	add	r3, sp, #160	; 0xa0
   1afe8:	mov	r2, r6
   1afec:	mov	r1, r4
   1aff0:	mov	r0, r5
   1aff4:	bl	16fc8 <_start@@Base+0x1cec>
   1aff8:	b	1ace4 <_start@@Base+0x5a08>
   1affc:	ldr	r3, [pc, #784]	; 1b314 <_start@@Base+0x6038>
   1b000:	mov	r2, #0
   1b004:	ldrd	r0, [sp, #40]	; 0x28
   1b008:	cmp	r1, r3
   1b00c:	cmpeq	r0, r2
   1b010:	bne	1b408 <_start@@Base+0x612c>
   1b014:	mov	r1, r4
   1b018:	mov	r3, #4
   1b01c:	mov	r2, r6
   1b020:	mov	r0, r5
   1b024:	bl	18798 <_start@@Base+0x34bc>
   1b028:	cmp	r4, r0
   1b02c:	mov	r1, r0
   1b030:	beq	1b3f0 <_start@@Base+0x6114>
   1b034:	add	r3, sp, #164	; 0xa4
   1b038:	mov	r2, r6
   1b03c:	mov	r0, r5
   1b040:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1b044:	ldr	r3, [sp, #164]	; 0xa4
   1b048:	mov	r4, r0
   1b04c:	cmp	r3, #0
   1b050:	beq	1a9e8 <_start@@Base+0x570c>
   1b054:	mov	r1, #2
   1b058:	b	1af00 <_start@@Base+0x5c24>
   1b05c:	add	r3, pc, #668	; 0x29c
   1b060:	ldrd	r2, [r3]
   1b064:	cmp	r1, r3
   1b068:	cmpeq	r0, r2
   1b06c:	bne	1b1d8 <_start@@Base+0x5efc>
   1b070:	mov	r3, #8
   1b074:	mov	r2, r6
   1b078:	mov	r1, r4
   1b07c:	mov	r0, r5
   1b080:	bl	18798 <_start@@Base+0x34bc>
   1b084:	cmp	r4, r0
   1b088:	mov	r7, r0
   1b08c:	beq	1b110 <_start@@Base+0x5e34>
   1b090:	mov	r2, #0
   1b094:	mov	r3, #0
   1b098:	add	r8, sp, #168	; 0xa8
   1b09c:	mov	r1, r0
   1b0a0:	mov	r0, r5
   1b0a4:	strd	r2, [sp, #168]	; 0xa8
   1b0a8:	mov	r3, r8
   1b0ac:	mov	r2, r6
   1b0b0:	bl	17968 <_start@@Base+0x268c>
   1b0b4:	cmp	r7, r0
   1b0b8:	mov	r4, r0
   1b0bc:	bne	1b0e8 <_start@@Base+0x5e0c>
   1b0c0:	mov	r1, r0
   1b0c4:	ldr	r3, [pc, #588]	; 1b318 <_start@@Base+0x603c>
   1b0c8:	mov	r2, r6
   1b0cc:	mov	r0, r5
   1b0d0:	str	r8, [sp]
   1b0d4:	bl	1a4a0 <_start@@Base+0x51c4>
   1b0d8:	cmp	r6, r0
   1b0dc:	cmpne	r4, r0
   1b0e0:	mov	r4, r0
   1b0e4:	beq	1a9e8 <_start@@Base+0x570c>
   1b0e8:	ldrd	r2, [sp, #168]	; 0xa8
   1b0ec:	orrs	r3, r2, r3
   1b0f0:	bne	1b100 <_start@@Base+0x5e24>
   1b0f4:	ldr	r3, [r5, #8]
   1b0f8:	tst	r3, #2
   1b0fc:	beq	1afe4 <_start@@Base+0x5d08>
   1b100:	mov	r3, #8
   1b104:	mov	r1, #5
   1b108:	mov	r2, r3
   1b10c:	b	1afcc <_start@@Base+0x5cf0>
   1b110:	add	r4, r4, #8
   1b114:	mov	r1, r6
   1b118:	mov	r0, r4
   1b11c:	mov	r8, #0
   1b120:	bl	153d0 <_start@@Base+0xf4>
   1b124:	and	r3, r1, #-16777216	; 0xff000000
   1b128:	str	r8, [sp, #96]	; 0x60
   1b12c:	str	r3, [sp, #100]	; 0x64
   1b130:	ldrd	r2, [sp, #96]	; 0x60
   1b134:	cmp	r3, #889192448	; 0x35000000
   1b138:	cmpeq	r2, #0
   1b13c:	bne	1b3f0 <_start@@Base+0x6114>
   1b140:	mov	r3, #1
   1b144:	mov	r2, r6
   1b148:	mov	r1, r4
   1b14c:	mov	r0, r5
   1b150:	bl	18798 <_start@@Base+0x34bc>
   1b154:	cmp	r4, r0
   1b158:	mov	r7, r0
   1b15c:	beq	1b3f0 <_start@@Base+0x6114>
   1b160:	str	r8, [sp, #168]	; 0xa8
   1b164:	add	r8, sp, #168	; 0xa8
   1b168:	mov	r1, r0
   1b16c:	mov	r2, r6
   1b170:	mov	r0, r5
   1b174:	mov	r3, r8
   1b178:	bl	19084 <_start@@Base+0x3da8>
   1b17c:	cmp	r7, r0
   1b180:	mov	r4, r0
   1b184:	bne	1b1b0 <_start@@Base+0x5ed4>
   1b188:	mov	r1, r0
   1b18c:	ldr	r3, [pc, #392]	; 1b31c <_start@@Base+0x6040>
   1b190:	mov	r2, r6
   1b194:	mov	r0, r5
   1b198:	str	r8, [sp]
   1b19c:	bl	1970c <_start@@Base+0x4430>
   1b1a0:	cmp	r6, r0
   1b1a4:	cmpne	r4, r0
   1b1a8:	mov	r4, r0
   1b1ac:	beq	1a9e8 <_start@@Base+0x570c>
   1b1b0:	ldr	r3, [sp, #168]	; 0xa8
   1b1b4:	cmp	r3, #0
   1b1b8:	bne	1b1c8 <_start@@Base+0x5eec>
   1b1bc:	ldr	r3, [r5, #8]
   1b1c0:	tst	r3, #2
   1b1c4:	beq	1afe4 <_start@@Base+0x5d08>
   1b1c8:	mov	r3, #4
   1b1cc:	mov	r1, #6
   1b1d0:	mov	r2, r3
   1b1d4:	b	1ae48 <_start@@Base+0x5b6c>
   1b1d8:	mov	r8, #0
   1b1dc:	ldr	fp, [pc, #316]	; 1b320 <_start@@Base+0x6044>
   1b1e0:	mov	sl, #0
   1b1e4:	str	r8, [sp, #104]	; 0x68
   1b1e8:	str	r1, [sp, #108]	; 0x6c
   1b1ec:	ldrd	r2, [sp, #104]	; 0x68
   1b1f0:	cmp	r3, fp
   1b1f4:	cmpeq	r2, sl
   1b1f8:	bne	1b244 <_start@@Base+0x5f68>
   1b1fc:	mov	r1, r4
   1b200:	mov	r3, #4
   1b204:	mov	r2, r6
   1b208:	mov	r0, r5
   1b20c:	bl	18798 <_start@@Base+0x34bc>
   1b210:	cmp	r4, r0
   1b214:	mov	r1, r0
   1b218:	beq	1b40c <_start@@Base+0x6130>
   1b21c:	add	r3, sp, #164	; 0xa4
   1b220:	mov	r2, r6
   1b224:	mov	r0, r5
   1b228:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1b22c:	ldr	r3, [sp, #164]	; 0xa4
   1b230:	mov	r4, r0
   1b234:	cmp	r3, r8
   1b238:	beq	1a9e8 <_start@@Base+0x570c>
   1b23c:	mov	r1, #4
   1b240:	b	1af00 <_start@@Base+0x5c24>
   1b244:	add	r3, pc, #188	; 0xbc
   1b248:	ldrd	r2, [r3]
   1b24c:	cmp	r1, r3
   1b250:	cmpeq	r0, r2
   1b254:	bne	1b408 <_start@@Base+0x612c>
   1b258:	mov	r3, #8
   1b25c:	mov	r2, r6
   1b260:	mov	r1, r4
   1b264:	mov	r0, r5
   1b268:	bl	18798 <_start@@Base+0x34bc>
   1b26c:	cmp	r4, r0
   1b270:	mov	r7, r0
   1b274:	beq	1b32c <_start@@Base+0x6050>
   1b278:	mov	r2, #0
   1b27c:	mov	r3, #0
   1b280:	add	r8, sp, #168	; 0xa8
   1b284:	mov	r1, r0
   1b288:	mov	r0, r5
   1b28c:	strd	r2, [sp, #168]	; 0xa8
   1b290:	mov	r3, r8
   1b294:	mov	r2, r6
   1b298:	bl	17968 <_start@@Base+0x268c>
   1b29c:	cmp	r7, r0
   1b2a0:	mov	r4, r0
   1b2a4:	bne	1b2d0 <_start@@Base+0x5ff4>
   1b2a8:	mov	r1, r0
   1b2ac:	ldr	r3, [pc, #112]	; 1b324 <_start@@Base+0x6048>
   1b2b0:	mov	r2, r6
   1b2b4:	mov	r0, r5
   1b2b8:	str	r8, [sp]
   1b2bc:	bl	1a4a0 <_start@@Base+0x51c4>
   1b2c0:	cmp	r6, r0
   1b2c4:	cmpne	r4, r0
   1b2c8:	mov	r4, r0
   1b2cc:	beq	1a9e8 <_start@@Base+0x570c>
   1b2d0:	ldrd	r2, [sp, #168]	; 0xa8
   1b2d4:	orrs	r3, r2, r3
   1b2d8:	bne	1b2e8 <_start@@Base+0x600c>
   1b2dc:	ldr	r3, [r5, #8]
   1b2e0:	tst	r3, #2
   1b2e4:	beq	1afe4 <_start@@Base+0x5d08>
   1b2e8:	mov	r3, #8
   1b2ec:	mov	r1, #7
   1b2f0:	mov	r2, r3
   1b2f4:	b	1afcc <_start@@Base+0x5cf0>
   1b2f8:	teqcc	r2, r4, lsr r3
   1b2fc:	rsbvs	r6, r2, #536870918	; 0x20000006
   1b300:	teqcc	r2, r4, lsr r3
   1b304:	cmnvs	r3, #-1946157055	; 0x8c000001
   1b308:	teqcc	r2, r4, lsr r3
   1b30c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1b310:	andeq	r5, r4, r8, lsr r1
   1b314:	rsbvs	r6, r2, #536870918	; 0x20000006
   1b318:	andeq	r5, r4, r4, asr #2
   1b31c:	andeq	r5, r4, r0, asr r1
   1b320:	cmnvs	r3, #-1946157055	; 0x8c000001
   1b324:	andeq	r5, r4, ip, asr r1
   1b328:	andeq	r5, r4, r8, ror #2
   1b32c:	add	r4, r4, #8
   1b330:	mov	r1, r6
   1b334:	mov	r0, r4
   1b338:	bl	153d0 <_start@@Base+0xf4>
   1b33c:	and	r3, r1, #-16777216	; 0xff000000
   1b340:	str	r8, [sp, #112]	; 0x70
   1b344:	str	r3, [sp, #116]	; 0x74
   1b348:	ldrd	r2, [sp, #112]	; 0x70
   1b34c:	cmp	r3, #889192448	; 0x35000000
   1b350:	cmpeq	r2, #0
   1b354:	bne	1b3f0 <_start@@Base+0x6114>
   1b358:	mov	r3, #1
   1b35c:	mov	r2, r6
   1b360:	mov	r1, r4
   1b364:	mov	r0, r5
   1b368:	bl	18798 <_start@@Base+0x34bc>
   1b36c:	cmp	r4, r0
   1b370:	mov	r7, r0
   1b374:	beq	1b3f0 <_start@@Base+0x6114>
   1b378:	str	r8, [sp, #168]	; 0xa8
   1b37c:	add	r8, sp, #168	; 0xa8
   1b380:	mov	r1, r0
   1b384:	mov	r2, r6
   1b388:	mov	r0, r5
   1b38c:	mov	r3, r8
   1b390:	bl	19084 <_start@@Base+0x3da8>
   1b394:	cmp	r7, r0
   1b398:	mov	r4, r0
   1b39c:	bne	1b3c8 <_start@@Base+0x60ec>
   1b3a0:	mov	r1, r0
   1b3a4:	ldr	r3, [pc, #-132]	; 1b328 <_start@@Base+0x604c>
   1b3a8:	mov	r2, r6
   1b3ac:	mov	r0, r5
   1b3b0:	str	r8, [sp]
   1b3b4:	bl	1970c <_start@@Base+0x4430>
   1b3b8:	cmp	r6, r0
   1b3bc:	cmpne	r4, r0
   1b3c0:	mov	r4, r0
   1b3c4:	beq	1a9e8 <_start@@Base+0x570c>
   1b3c8:	ldr	r3, [sp, #168]	; 0xa8
   1b3cc:	cmp	r3, #0
   1b3d0:	bne	1b3e0 <_start@@Base+0x6104>
   1b3d4:	ldr	r3, [r5, #8]
   1b3d8:	tst	r3, #2
   1b3dc:	beq	1afe4 <_start@@Base+0x5d08>
   1b3e0:	mov	r3, #4
   1b3e4:	mov	r1, #8
   1b3e8:	mov	r2, r3
   1b3ec:	b	1ae48 <_start@@Base+0x5b6c>
   1b3f0:	mov	r2, r6
   1b3f4:	mov	r1, r4
   1b3f8:	mov	r0, r5
   1b3fc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1b400:	mov	r4, r0
   1b404:	b	1afe4 <_start@@Base+0x5d08>
   1b408:	mov	r1, r4
   1b40c:	mov	r2, r6
   1b410:	b	1b3f8 <_start@@Base+0x611c>
   1b414:	mov	r7, r0
   1b418:	add	r3, pc, #960	; 0x3c0
   1b41c:	ldrd	r2, [r3]
   1b420:	ldrd	r0, [sp, #24]
   1b424:	cmp	r1, r3
   1b428:	cmpeq	r0, r2
   1b42c:	movne	r4, r7
   1b430:	bne	1b708 <_start@@Base+0x642c>
   1b434:	mov	r3, #6
   1b438:	mov	r2, r6
   1b43c:	mov	r1, r7
   1b440:	mov	r0, r5
   1b444:	bl	18798 <_start@@Base+0x34bc>
   1b448:	cmp	r7, r0
   1b44c:	mov	r4, r0
   1b450:	beq	1b708 <_start@@Base+0x642c>
   1b454:	mov	r1, #2
   1b458:	ldr	r0, [r5]
   1b45c:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1b460:	cmp	r0, #0
   1b464:	bne	1a9e8 <_start@@Base+0x570c>
   1b468:	ldr	sl, [pc, #928]	; 1b810 <_start@@Base+0x6534>
   1b46c:	mov	r1, r4
   1b470:	add	r3, sp, #164	; 0xa4
   1b474:	mov	r2, r6
   1b478:	mov	r0, r5
   1b47c:	add	r9, pc, #868	; 0x364
   1b480:	ldrd	r8, [r9]
   1b484:	bl	18644 <_start@@Base+0x3368>
   1b488:	mov	r4, r0
   1b48c:	ldr	r3, [sp, #164]	; 0xa4
   1b490:	cmp	r3, #0
   1b494:	bne	1b4bc <_start@@Base+0x61e0>
   1b498:	ldr	r3, [r5, #24]
   1b49c:	cmp	r3, #0
   1b4a0:	bne	1a9e8 <_start@@Base+0x570c>
   1b4a4:	ldr	r0, [r5]
   1b4a8:	bl	22310 <flatcc_builder_end_table@@Base>
   1b4ac:	subs	r7, r0, #0
   1b4b0:	beq	1a9e8 <_start@@Base+0x570c>
   1b4b4:	mov	r1, #2
   1b4b8:	b	1b7c8 <_start@@Base+0x64ec>
   1b4bc:	mov	r2, r6
   1b4c0:	mov	r1, r4
   1b4c4:	mov	r0, r5
   1b4c8:	bl	17a14 <_start@@Base+0x2738>
   1b4cc:	mov	r1, r6
   1b4d0:	mov	r4, r0
   1b4d4:	bl	153d0 <_start@@Base+0xf4>
   1b4d8:	add	r3, pc, #784	; 0x310
   1b4dc:	ldrd	r2, [r3]
   1b4e0:	cmp	r1, r3
   1b4e4:	cmpeq	r0, r2
   1b4e8:	bne	1b6fc <_start@@Base+0x6420>
   1b4ec:	add	r7, r4, #8
   1b4f0:	mov	r1, r6
   1b4f4:	mov	r0, r7
   1b4f8:	bl	153d0 <_start@@Base+0xf4>
   1b4fc:	add	r3, pc, #756	; 0x2f4
   1b500:	ldrd	r2, [r3]
   1b504:	cmp	r1, r3
   1b508:	cmpeq	r0, r2
   1b50c:	bne	1b608 <_start@@Base+0x632c>
   1b510:	add	r4, r4, #16
   1b514:	mov	r1, r6
   1b518:	mov	r0, r4
   1b51c:	bl	153d0 <_start@@Base+0xf4>
   1b520:	and	r3, r0, #-16777216	; 0xff000000
   1b524:	str	r3, [sp, #120]	; 0x78
   1b528:	str	r1, [sp, #124]	; 0x7c
   1b52c:	ldrd	r2, [sp, #120]	; 0x78
   1b530:	cmp	r3, r9
   1b534:	cmpeq	r2, r8
   1b538:	bne	1b6fc <_start@@Base+0x6420>
   1b53c:	mov	r3, #5
   1b540:	mov	r2, r6
   1b544:	mov	r1, r4
   1b548:	mov	r0, r5
   1b54c:	bl	18798 <_start@@Base+0x34bc>
   1b550:	cmp	r4, r0
   1b554:	mov	r7, r0
   1b558:	beq	1b6fc <_start@@Base+0x6420>
   1b55c:	mov	r3, #0
   1b560:	add	fp, sp, #168	; 0xa8
   1b564:	mov	r1, r0
   1b568:	mov	r2, r6
   1b56c:	mov	r0, r5
   1b570:	str	r3, [sp, #168]	; 0xa8
   1b574:	mov	r3, fp
   1b578:	bl	19084 <_start@@Base+0x3da8>
   1b57c:	cmp	r7, r0
   1b580:	mov	r4, r0
   1b584:	bne	1b5b0 <_start@@Base+0x62d4>
   1b588:	mov	r1, r0
   1b58c:	ldr	r3, [pc, #640]	; 1b814 <_start@@Base+0x6538>
   1b590:	mov	r2, r6
   1b594:	mov	r0, r5
   1b598:	str	fp, [sp]
   1b59c:	bl	1970c <_start@@Base+0x4430>
   1b5a0:	cmp	r6, r0
   1b5a4:	cmpne	r4, r0
   1b5a8:	mov	r4, r0
   1b5ac:	beq	1a9e8 <_start@@Base+0x570c>
   1b5b0:	ldr	r3, [sp, #168]	; 0xa8
   1b5b4:	cmp	r3, #0
   1b5b8:	bne	1b5c8 <_start@@Base+0x62ec>
   1b5bc:	ldr	r3, [r5, #8]
   1b5c0:	tst	r3, #2
   1b5c4:	beq	1b5ec <_start@@Base+0x6310>
   1b5c8:	mov	r3, #4
   1b5cc:	mov	r1, #1
   1b5d0:	ldr	r0, [r5]
   1b5d4:	mov	r2, r3
   1b5d8:	bl	22c6c <flatcc_builder_table_add@@Base>
   1b5dc:	cmp	r0, #0
   1b5e0:	beq	1a9e8 <_start@@Base+0x570c>
   1b5e4:	ldr	r3, [sp, #168]	; 0xa8
   1b5e8:	str	r3, [r0]
   1b5ec:	mov	r1, r4
   1b5f0:	add	r3, sp, #164	; 0xa4
   1b5f4:	mov	r2, r6
   1b5f8:	mov	r0, r5
   1b5fc:	bl	16fc8 <_start@@Base+0x1cec>
   1b600:	mov	r4, r0
   1b604:	b	1b48c <_start@@Base+0x61b0>
   1b608:	bic	r3, r0, #255	; 0xff
   1b60c:	str	r3, [sp, #128]	; 0x80
   1b610:	str	r1, [sp, #132]	; 0x84
   1b614:	add	r1, pc, #484	; 0x1e4
   1b618:	ldrd	r0, [r1]
   1b61c:	ldrd	r2, [sp, #128]	; 0x80
   1b620:	cmp	r3, r1
   1b624:	cmpeq	r2, r0
   1b628:	bne	1b6e4 <_start@@Base+0x6408>
   1b62c:	mov	r3, #7
   1b630:	mov	r2, r6
   1b634:	mov	r1, r7
   1b638:	mov	r0, r5
   1b63c:	bl	18798 <_start@@Base+0x34bc>
   1b640:	cmp	r7, r0
   1b644:	mov	fp, r0
   1b648:	beq	1b6e4 <_start@@Base+0x6408>
   1b64c:	mov	r2, #0
   1b650:	mov	r3, #0
   1b654:	add	r7, sp, #168	; 0xa8
   1b658:	mov	r1, r0
   1b65c:	mov	r0, r5
   1b660:	strd	r2, [sp, #168]	; 0xa8
   1b664:	mov	r3, r7
   1b668:	mov	r2, r6
   1b66c:	bl	17968 <_start@@Base+0x268c>
   1b670:	cmp	fp, r0
   1b674:	mov	r4, r0
   1b678:	bne	1b6a4 <_start@@Base+0x63c8>
   1b67c:	mov	r1, r0
   1b680:	mov	r3, sl
   1b684:	str	r7, [sp]
   1b688:	mov	r2, r6
   1b68c:	mov	r0, r5
   1b690:	bl	1a4a0 <_start@@Base+0x51c4>
   1b694:	cmp	r6, r0
   1b698:	cmpne	r4, r0
   1b69c:	mov	r4, r0
   1b6a0:	beq	1a9e8 <_start@@Base+0x570c>
   1b6a4:	ldrd	r2, [sp, #168]	; 0xa8
   1b6a8:	orrs	r3, r2, r3
   1b6ac:	bne	1b6bc <_start@@Base+0x63e0>
   1b6b0:	ldr	r3, [r5, #8]
   1b6b4:	tst	r3, #2
   1b6b8:	beq	1b5ec <_start@@Base+0x6310>
   1b6bc:	mov	r3, #8
   1b6c0:	mov	r1, #0
   1b6c4:	ldr	r0, [r5]
   1b6c8:	mov	r2, r3
   1b6cc:	bl	22c6c <flatcc_builder_table_add@@Base>
   1b6d0:	cmp	r0, #0
   1b6d4:	beq	1a9e8 <_start@@Base+0x570c>
   1b6d8:	ldrd	r2, [sp, #168]	; 0xa8
   1b6dc:	strd	r2, [r0]
   1b6e0:	b	1b5ec <_start@@Base+0x6310>
   1b6e4:	mov	r2, r6
   1b6e8:	mov	r1, r7
   1b6ec:	mov	r0, r5
   1b6f0:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1b6f4:	mov	r4, r0
   1b6f8:	b	1b5ec <_start@@Base+0x6310>
   1b6fc:	mov	r2, r6
   1b700:	mov	r1, r4
   1b704:	b	1b6ec <_start@@Base+0x6410>
   1b708:	mov	r2, r6
   1b70c:	mov	r1, r4
   1b710:	mov	r0, r5
   1b714:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1b718:	mov	r4, r0
   1b71c:	b	1ad28 <_start@@Base+0x5a4c>
   1b720:	mov	r2, r6
   1b724:	mov	r1, r3
   1b728:	b	1b710 <_start@@Base+0x6434>
   1b72c:	mov	r2, r6
   1b730:	mov	r1, r7
   1b734:	b	1b710 <_start@@Base+0x6434>
   1b738:	mov	r2, r6
   1b73c:	mov	r1, r0
   1b740:	mov	r0, r5
   1b744:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1b748:	b	1a780 <_start@@Base+0x54a4>
   1b74c:	and	r3, r8, #-16777216	; 0xff000000
   1b750:	str	r3, [sp, #136]	; 0x88
   1b754:	str	r9, [sp, #140]	; 0x8c
   1b758:	add	r3, pc, #168	; 0xa8
   1b75c:	ldrd	r2, [r3]
   1b760:	ldrd	r0, [sp, #136]	; 0x88
   1b764:	cmp	r1, r3
   1b768:	cmpeq	r0, r2
   1b76c:	bne	1b7b8 <_start@@Base+0x64dc>
   1b770:	mov	r1, r7
   1b774:	mov	r3, #5
   1b778:	mov	r2, r6
   1b77c:	mov	r0, r5
   1b780:	bl	18798 <_start@@Base+0x34bc>
   1b784:	cmp	r7, r0
   1b788:	mov	r1, r0
   1b78c:	beq	1b7b8 <_start@@Base+0x64dc>
   1b790:	add	r3, sp, #148	; 0x94
   1b794:	mov	r2, r6
   1b798:	mov	r0, r5
   1b79c:	bl	1883c <_start@@Base+0x3560>
   1b7a0:	ldr	r3, [sp, #148]	; 0x94
   1b7a4:	mov	r4, r0
   1b7a8:	cmp	r3, #0
   1b7ac:	beq	1a698 <_start@@Base+0x53bc>
   1b7b0:	mov	r1, #1
   1b7b4:	b	1a8b0 <_start@@Base+0x55d4>
   1b7b8:	mov	r2, r6
   1b7bc:	mov	r1, r7
   1b7c0:	b	1b740 <_start@@Base+0x6464>
   1b7c4:	mov	r1, #1
   1b7c8:	ldr	r0, [r5]
   1b7cc:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1b7d0:	cmp	r0, #0
   1b7d4:	beq	1aa00 <_start@@Base+0x5724>
   1b7d8:	str	r7, [r0]
   1b7dc:	b	1ad28 <_start@@Base+0x5a4c>
   1b7e0:	ldrvs	r0, [r3, -r0]!
   1b7e4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b7e8:	movwvc	r0, #0
   1b7ec:	cmnvc	r4, #112, 10	; 0x1c000000
   1b7f0:	svcpl	0x00626262
   1b7f4:	cmnvs	r1, r1, ror #2
   1b7f8:	cmnvs	r2, pc, asr r4
   1b7fc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b800:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1b804:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b808:	strvs	r0, [r0, #-0]
   1b80c:	stclvs	6, cr7, [pc, #-420]!	; 1b670 <_start@@Base+0x6394>
   1b810:	andeq	r5, r4, r0, lsl #3
   1b814:	andeq	r5, r4, r4, ror r1
   1b818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b81c:	mov	r6, r2
   1b820:	mov	r5, r0
   1b824:	mov	r4, r1
   1b828:	mov	r1, #36	; 0x24
   1b82c:	vpush	{d8}
   1b830:	sub	sp, sp, #340	; 0x154
   1b834:	ldr	r0, [r0]
   1b838:	str	r3, [sp, #92]	; 0x5c
   1b83c:	mov	r3, #0
   1b840:	ldr	r2, [sp, #92]	; 0x5c
   1b844:	str	r3, [r2]
   1b848:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1b84c:	cmp	r0, #0
   1b850:	bne	1bc20 <_start@@Base+0x6944>
   1b854:	add	r3, sp, #316	; 0x13c
   1b858:	mov	r2, r6
   1b85c:	mov	r1, r4
   1b860:	mov	r0, r5
   1b864:	str	r3, [sp]
   1b868:	mov	r3, #1
   1b86c:	bl	269c4 <flatcc_json_parser_prepare_unions@@Base>
   1b870:	cmp	r6, r0
   1b874:	beq	1bc20 <_start@@Base+0x6944>
   1b878:	add	r3, sp, #308	; 0x134
   1b87c:	mov	r2, r6
   1b880:	mov	r1, r4
   1b884:	mov	r0, r5
   1b888:	bl	18644 <_start@@Base+0x3368>
   1b88c:	ldr	r3, [sp, #308]	; 0x134
   1b890:	mov	r4, r0
   1b894:	cmp	r3, #0
   1b898:	bne	1b8d8 <_start@@Base+0x65fc>
   1b89c:	ldr	r3, [r5, #24]
   1b8a0:	cmp	r3, #0
   1b8a4:	bne	1bc20 <_start@@Base+0x6944>
   1b8a8:	mov	r1, #3
   1b8ac:	ldr	r0, [r5]
   1b8b0:	bl	221a0 <flatcc_builder_check_required_field@@Base>
   1b8b4:	cmp	r0, #0
   1b8b8:	bne	1ee08 <_start@@Base+0x9b2c>
   1b8bc:	mov	r1, r4
   1b8c0:	mov	r3, #29
   1b8c4:	mov	r2, r6
   1b8c8:	mov	r0, r5
   1b8cc:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1b8d0:	mov	r4, r0
   1b8d4:	b	1bc20 <_start@@Base+0x6944>
   1b8d8:	mov	r2, r6
   1b8dc:	mov	r1, r4
   1b8e0:	mov	r0, r5
   1b8e4:	bl	17a14 <_start@@Base+0x2738>
   1b8e8:	mov	r1, r6
   1b8ec:	mov	r7, r0
   1b8f0:	bl	153d0 <_start@@Base+0xf4>
   1b8f4:	add	r3, pc, #916	; 0x394
   1b8f8:	ldrd	r2, [r3]
   1b8fc:	mov	sl, r0
   1b900:	mov	fp, r1
   1b904:	cmp	r1, r3
   1b908:	cmpeq	r0, r2
   1b90c:	bhi	1cac8 <_start@@Base+0x77ec>
   1b910:	add	r3, pc, #896	; 0x380
   1b914:	ldrd	r2, [r3]
   1b918:	cmp	r1, r3
   1b91c:	cmpeq	r0, r2
   1b920:	bhi	1c0b8 <_start@@Base+0x6ddc>
   1b924:	add	r3, pc, #884	; 0x374
   1b928:	ldrd	r2, [r3]
   1b92c:	cmp	r1, r3
   1b930:	cmpeq	r0, r2
   1b934:	bhi	1baec <_start@@Base+0x6810>
   1b938:	and	r3, r0, #-16777216	; 0xff000000
   1b93c:	str	r3, [sp, #56]	; 0x38
   1b940:	str	r1, [sp, #60]	; 0x3c
   1b944:	add	r3, pc, #860	; 0x35c
   1b948:	ldrd	r2, [r3]
   1b94c:	ldrd	r0, [sp, #56]	; 0x38
   1b950:	cmp	r1, r3
   1b954:	cmpeq	r0, r2
   1b958:	bne	1b9e8 <_start@@Base+0x670c>
   1b95c:	mov	r1, r7
   1b960:	mov	r3, #5
   1b964:	mov	r2, r6
   1b968:	mov	r0, r5
   1b96c:	bl	18798 <_start@@Base+0x34bc>
   1b970:	cmp	r7, r0
   1b974:	mov	r1, r0
   1b978:	beq	1b9d0 <_start@@Base+0x66f4>
   1b97c:	add	r3, sp, #312	; 0x138
   1b980:	mov	r2, r6
   1b984:	mov	r0, r5
   1b988:	bl	1b818 <_start@@Base+0x653c>
   1b98c:	ldr	r3, [sp, #312]	; 0x138
   1b990:	mov	r4, r0
   1b994:	cmp	r3, #0
   1b998:	beq	1bc20 <_start@@Base+0x6944>
   1b99c:	mov	r1, #12
   1b9a0:	ldr	r0, [r5]
   1b9a4:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1b9a8:	cmp	r0, #0
   1b9ac:	beq	1bc20 <_start@@Base+0x6944>
   1b9b0:	ldr	r3, [sp, #312]	; 0x138
   1b9b4:	str	r3, [r0]
   1b9b8:	add	r3, sp, #308	; 0x134
   1b9bc:	mov	r2, r6
   1b9c0:	mov	r1, r4
   1b9c4:	mov	r0, r5
   1b9c8:	bl	16fc8 <_start@@Base+0x1cec>
   1b9cc:	b	1b88c <_start@@Base+0x65b0>
   1b9d0:	mov	r2, r6
   1b9d4:	mov	r1, r7
   1b9d8:	mov	r0, r5
   1b9dc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1b9e0:	mov	r4, r0
   1b9e4:	b	1b9b8 <_start@@Base+0x66dc>
   1b9e8:	add	r3, pc, #704	; 0x2c0
   1b9ec:	ldrd	r2, [r3]
   1b9f0:	ldrd	r0, [sp, #56]	; 0x38
   1b9f4:	cmp	r1, r3
   1b9f8:	cmpeq	r0, r2
   1b9fc:	bne	1bad4 <_start@@Base+0x67f8>
   1ba00:	mov	r3, #5
   1ba04:	mov	r2, r6
   1ba08:	mov	r1, r7
   1ba0c:	mov	r0, r5
   1ba10:	bl	18798 <_start@@Base+0x34bc>
   1ba14:	cmp	r7, r0
   1ba18:	mov	r8, r0
   1ba1c:	beq	1babc <_start@@Base+0x67e0>
   1ba20:	mov	r3, #0
   1ba24:	add	r7, sp, #328	; 0x148
   1ba28:	mov	r1, r0
   1ba2c:	mov	r2, r6
   1ba30:	mov	r0, r5
   1ba34:	strb	r3, [sp, #328]	; 0x148
   1ba38:	mov	r3, r7
   1ba3c:	bl	19558 <_start@@Base+0x427c>
   1ba40:	cmp	r8, r0
   1ba44:	mov	r4, r0
   1ba48:	bne	1ba74 <_start@@Base+0x6798>
   1ba4c:	mov	r1, r0
   1ba50:	ldr	r3, [pc, #616]	; 1bcc0 <_start@@Base+0x69e4>
   1ba54:	mov	r2, r6
   1ba58:	mov	r0, r5
   1ba5c:	str	r7, [sp]
   1ba60:	bl	1a1d0 <_start@@Base+0x4ef4>
   1ba64:	cmp	r6, r0
   1ba68:	cmpne	r4, r0
   1ba6c:	mov	r4, r0
   1ba70:	beq	1bc20 <_start@@Base+0x6944>
   1ba74:	add	r3, sp, #328	; 0x148
   1ba78:	ldrsb	r3, [r3]
   1ba7c:	cmp	r3, #8
   1ba80:	bne	1ba90 <_start@@Base+0x67b4>
   1ba84:	ldr	r3, [r5, #8]
   1ba88:	tst	r3, #2
   1ba8c:	beq	1b9b8 <_start@@Base+0x66dc>
   1ba90:	mov	r3, #1
   1ba94:	mov	r1, #6
   1ba98:	ldr	r0, [r5]
   1ba9c:	mov	r2, r3
   1baa0:	bl	22c6c <flatcc_builder_table_add@@Base>
   1baa4:	cmp	r0, #0
   1baa8:	beq	1bc20 <_start@@Base+0x6944>
   1baac:	add	r3, sp, #328	; 0x148
   1bab0:	ldrsb	r3, [r3]
   1bab4:	strb	r3, [r0]
   1bab8:	b	1b9b8 <_start@@Base+0x66dc>
   1babc:	mov	r2, r6
   1bac0:	mov	r1, r7
   1bac4:	mov	r0, r5
   1bac8:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bacc:	mov	r4, r0
   1bad0:	b	1b9b8 <_start@@Base+0x66dc>
   1bad4:	mov	r2, r6
   1bad8:	mov	r1, r7
   1badc:	mov	r0, r5
   1bae0:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bae4:	mov	r4, r0
   1bae8:	b	1b9b8 <_start@@Base+0x66dc>
   1baec:	ldr	r3, [pc, #464]	; 1bcc4 <_start@@Base+0x69e8>
   1baf0:	mvn	r2, #0
   1baf4:	mov	r4, #0
   1baf8:	cmp	r1, r3
   1bafc:	cmpeq	r0, r2
   1bb00:	bhi	1bccc <_start@@Base+0x69f0>
   1bb04:	str	r4, [sp, #96]	; 0x60
   1bb08:	str	r1, [sp, #100]	; 0x64
   1bb0c:	add	r3, pc, #420	; 0x1a4
   1bb10:	ldrd	r2, [r3]
   1bb14:	ldrd	r0, [sp, #96]	; 0x60
   1bb18:	cmp	r1, r3
   1bb1c:	cmpeq	r0, r2
   1bb20:	bne	1bc78 <_start@@Base+0x699c>
   1bb24:	mov	r3, #4
   1bb28:	mov	r2, r6
   1bb2c:	mov	r1, r7
   1bb30:	mov	r0, r5
   1bb34:	bl	18798 <_start@@Base+0x34bc>
   1bb38:	cmp	r7, r0
   1bb3c:	mov	r4, r0
   1bb40:	beq	1bc60 <_start@@Base+0x6984>
   1bb44:	mov	r2, #1
   1bb48:	mvn	r3, #0
   1bb4c:	ldr	r0, [r5]
   1bb50:	mov	r1, r2
   1bb54:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1bb58:	subs	r7, r0, #0
   1bb5c:	bne	1bc20 <_start@@Base+0x6944>
   1bb60:	ldr	sl, [pc, #352]	; 1bcc8 <_start@@Base+0x69ec>
   1bb64:	mov	r1, r4
   1bb68:	add	r3, sp, #308	; 0x134
   1bb6c:	mov	r2, r6
   1bb70:	mov	r0, r5
   1bb74:	bl	18f6c <_start@@Base+0x3c90>
   1bb78:	mov	r4, r0
   1bb7c:	ldr	r3, [sp, #308]	; 0x134
   1bb80:	ldr	r0, [r5]
   1bb84:	cmp	r3, #0
   1bb88:	bne	1bbbc <_start@@Base+0x68e0>
   1bb8c:	bl	2252c <flatcc_builder_end_vector@@Base>
   1bb90:	cmp	r0, #0
   1bb94:	str	r0, [sp, #312]	; 0x138
   1bb98:	beq	1bc20 <_start@@Base+0x6944>
   1bb9c:	mov	r1, #30
   1bba0:	ldr	r0, [r5]
   1bba4:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1bba8:	cmp	r0, #0
   1bbac:	beq	1bc20 <_start@@Base+0x6944>
   1bbb0:	ldr	r3, [sp, #312]	; 0x138
   1bbb4:	str	r3, [r0]
   1bbb8:	b	1b9b8 <_start@@Base+0x66dc>
   1bbbc:	mov	r1, #1
   1bbc0:	strb	r7, [sp, #328]	; 0x148
   1bbc4:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1bbc8:	subs	fp, r0, #0
   1bbcc:	beq	1bc20 <_start@@Base+0x6944>
   1bbd0:	add	r9, sp, #328	; 0x148
   1bbd4:	mov	r1, r4
   1bbd8:	mov	r3, r9
   1bbdc:	mov	r2, r6
   1bbe0:	mov	r0, r5
   1bbe4:	bl	191bc <_start@@Base+0x3ee0>
   1bbe8:	cmp	r4, r0
   1bbec:	mov	r8, r0
   1bbf0:	movne	r4, r0
   1bbf4:	bne	1bc3c <_start@@Base+0x6960>
   1bbf8:	mov	r1, r4
   1bbfc:	mov	r3, sl
   1bc00:	str	r9, [sp]
   1bc04:	mov	r2, r6
   1bc08:	mov	r0, r5
   1bc0c:	bl	19600 <_start@@Base+0x4324>
   1bc10:	cmp	r6, r0
   1bc14:	cmpne	r8, r0
   1bc18:	mov	r4, r0
   1bc1c:	bne	1bc3c <_start@@Base+0x6960>
   1bc20:	mov	r1, r4
   1bc24:	mov	r3, #33	; 0x21
   1bc28:	mov	r2, r6
   1bc2c:	mov	r0, r5
   1bc30:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1bc34:	mov	r4, r0
   1bc38:	b	1ee38 <_start@@Base+0x9b5c>
   1bc3c:	ldrb	r3, [sp, #328]	; 0x148
   1bc40:	mov	r1, r4
   1bc44:	mov	r2, r6
   1bc48:	mov	r0, r5
   1bc4c:	strb	r3, [fp]
   1bc50:	add	r3, sp, #308	; 0x134
   1bc54:	bl	16f10 <_start@@Base+0x1c34>
   1bc58:	mov	r4, r0
   1bc5c:	b	1bb7c <_start@@Base+0x68a0>
   1bc60:	mov	r1, r0
   1bc64:	mov	r2, r6
   1bc68:	mov	r0, r5
   1bc6c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc70:	mov	r4, r0
   1bc74:	b	1b9b8 <_start@@Base+0x66dc>
   1bc78:	mov	r2, r6
   1bc7c:	mov	r1, r7
   1bc80:	mov	r0, r5
   1bc84:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc88:	mov	r4, r0
   1bc8c:	b	1b9b8 <_start@@Base+0x66dc>
   1bc90:	cmnvs	r2, r0, ror #4
   1bc94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc98:			; <UNDEFINED> instruction: 0xffffffff
   1bc9c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1bca0:			; <UNDEFINED> instruction: 0xffffffff
   1bca4:			; <UNDEFINED> instruction: 0x666c6577
   1bca8:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1bcac:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1bcb0:	andvc	r0, r0, #0
   1bcb4:	cmnvs	pc, #28416	; 0x6f00
   1bcb8:	andeq	r0, r0, r0
   1bcbc:			; <UNDEFINED> instruction: 0x666c6578
   1bcc0:	andeq	r5, r4, ip, lsl #3
   1bcc4:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1bcc8:	muleq	r4, ip, r1
   1bccc:	add	r3, pc, #956	; 0x3bc
   1bcd0:	ldrd	r2, [r3]
   1bcd4:	cmp	r1, r3
   1bcd8:	cmpeq	r0, r2
   1bcdc:	bhi	1bdf0 <_start@@Base+0x6b14>
   1bce0:	lsr	r3, r1, #16
   1bce4:	str	r4, [sp, #16]
   1bce8:	mov	r2, #0
   1bcec:	lsl	r3, r3, #16
   1bcf0:	str	r3, [sp, #20]
   1bcf4:	ldr	r3, [pc, #940]	; 1c0a8 <_start@@Base+0x6dcc>
   1bcf8:	ldrd	r0, [sp, #16]
   1bcfc:	cmp	r1, r3
   1bd00:	cmpeq	r0, r2
   1bd04:	bne	1bdd8 <_start@@Base+0x6afc>
   1bd08:	mov	r3, #2
   1bd0c:	mov	r2, r6
   1bd10:	mov	r1, r7
   1bd14:	mov	r0, r5
   1bd18:	bl	18798 <_start@@Base+0x34bc>
   1bd1c:	cmp	r7, r0
   1bd20:	mov	r8, r0
   1bd24:	beq	1bdc0 <_start@@Base+0x6ae4>
   1bd28:	add	r3, sp, #328	; 0x148
   1bd2c:	mov	r1, r0
   1bd30:	mov	r2, r6
   1bd34:	mov	r0, r5
   1bd38:	mov	r7, r3
   1bd3c:	strh	r4, [r3]
   1bd40:	bl	194ac <_start@@Base+0x41d0>
   1bd44:	cmp	r8, r0
   1bd48:	mov	r4, r0
   1bd4c:	bne	1bd78 <_start@@Base+0x6a9c>
   1bd50:	mov	r1, r0
   1bd54:	ldr	r3, [pc, #848]	; 1c0ac <_start@@Base+0x6dd0>
   1bd58:	mov	r2, r6
   1bd5c:	mov	r0, r5
   1bd60:	str	r7, [sp]
   1bd64:	bl	1a0a0 <_start@@Base+0x4dc4>
   1bd68:	cmp	r6, r0
   1bd6c:	cmpne	r4, r0
   1bd70:	mov	r4, r0
   1bd74:	beq	1bc20 <_start@@Base+0x6944>
   1bd78:	add	r3, sp, #328	; 0x148
   1bd7c:	ldrsh	r3, [r3]
   1bd80:	cmp	r3, #100	; 0x64
   1bd84:	bne	1bd94 <_start@@Base+0x6ab8>
   1bd88:	ldr	r3, [r5, #8]
   1bd8c:	tst	r3, #2
   1bd90:	beq	1b9b8 <_start@@Base+0x66dc>
   1bd94:	mov	r3, #2
   1bd98:	ldr	r0, [r5]
   1bd9c:	mov	r2, r3
   1bda0:	mov	r1, r3
   1bda4:	bl	22c6c <flatcc_builder_table_add@@Base>
   1bda8:	cmp	r0, #0
   1bdac:	beq	1bc20 <_start@@Base+0x6944>
   1bdb0:	add	r3, sp, #328	; 0x148
   1bdb4:	ldrsh	r3, [r3]
   1bdb8:	strh	r3, [r0]
   1bdbc:	b	1b9b8 <_start@@Base+0x66dc>
   1bdc0:	mov	r2, r6
   1bdc4:	mov	r1, r7
   1bdc8:	mov	r0, r5
   1bdcc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bdd0:	mov	r4, r0
   1bdd4:	b	1b9b8 <_start@@Base+0x66dc>
   1bdd8:	mov	r2, r6
   1bddc:	mov	r1, r7
   1bde0:	mov	r0, r5
   1bde4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bde8:	mov	r4, r0
   1bdec:	b	1b9b8 <_start@@Base+0x66dc>
   1bdf0:	add	r3, pc, #672	; 0x2a0
   1bdf4:	ldrd	r2, [r3]
   1bdf8:	cmp	r1, r3
   1bdfc:	cmpeq	r0, r2
   1be00:	bne	1bf84 <_start@@Base+0x6ca8>
   1be04:	add	r7, r7, #8
   1be08:	mov	r1, r6
   1be0c:	mov	r0, r7
   1be10:	bl	153d0 <_start@@Base+0xf4>
   1be14:	and	r3, r1, #-16777216	; 0xff000000
   1be18:	str	r4, [sp, #104]	; 0x68
   1be1c:	str	r3, [sp, #108]	; 0x6c
   1be20:	ldrd	r2, [sp, #104]	; 0x68
   1be24:	cmp	r3, #2030043136	; 0x79000000
   1be28:	cmpeq	r2, #0
   1be2c:	bne	1bf6c <_start@@Base+0x6c90>
   1be30:	mov	r3, #1
   1be34:	mov	r2, r6
   1be38:	mov	r1, r7
   1be3c:	mov	r0, r5
   1be40:	bl	18798 <_start@@Base+0x34bc>
   1be44:	cmp	r7, r0
   1be48:	mov	r4, r0
   1be4c:	beq	1bf54 <_start@@Base+0x6c78>
   1be50:	mov	r2, #1
   1be54:	mvn	r3, #0
   1be58:	ldr	r0, [r5]
   1be5c:	mov	r1, r2
   1be60:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1be64:	cmp	r0, #0
   1be68:	bne	1bc20 <_start@@Base+0x6944>
   1be6c:	ldr	sl, [pc, #572]	; 1c0b0 <_start@@Base+0x6dd4>
   1be70:	mov	r1, r4
   1be74:	add	r3, sp, #308	; 0x134
   1be78:	mov	r2, r6
   1be7c:	mov	r0, r5
   1be80:	bl	18f6c <_start@@Base+0x3c90>
   1be84:	mov	r4, r0
   1be88:	mov	r9, #0
   1be8c:	ldr	r3, [sp, #308]	; 0x134
   1be90:	ldr	r0, [r5]
   1be94:	cmp	r3, #0
   1be98:	bne	1becc <_start@@Base+0x6bf0>
   1be9c:	bl	2252c <flatcc_builder_end_vector@@Base>
   1bea0:	cmp	r0, #0
   1bea4:	str	r0, [sp, #312]	; 0x138
   1bea8:	beq	1bc20 <_start@@Base+0x6944>
   1beac:	mov	r1, #5
   1beb0:	ldr	r0, [r5]
   1beb4:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1beb8:	cmp	r0, #0
   1bebc:	beq	1bc20 <_start@@Base+0x6944>
   1bec0:	ldr	r3, [sp, #312]	; 0x138
   1bec4:	str	r3, [r0]
   1bec8:	b	1b9b8 <_start@@Base+0x66dc>
   1becc:	mov	r1, #1
   1bed0:	strb	r9, [sp, #328]	; 0x148
   1bed4:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1bed8:	subs	fp, r0, #0
   1bedc:	beq	1bc20 <_start@@Base+0x6944>
   1bee0:	add	r8, sp, #328	; 0x148
   1bee4:	mov	r1, r4
   1bee8:	mov	r3, r8
   1beec:	mov	r2, r6
   1bef0:	mov	r0, r5
   1bef4:	bl	191bc <_start@@Base+0x3ee0>
   1bef8:	cmp	r4, r0
   1befc:	mov	r7, r0
   1bf00:	movne	r4, r0
   1bf04:	bne	1bf30 <_start@@Base+0x6c54>
   1bf08:	mov	r1, r4
   1bf0c:	mov	r3, sl
   1bf10:	str	r8, [sp]
   1bf14:	mov	r2, r6
   1bf18:	mov	r0, r5
   1bf1c:	bl	19600 <_start@@Base+0x4324>
   1bf20:	cmp	r6, r0
   1bf24:	cmpne	r7, r0
   1bf28:	mov	r4, r0
   1bf2c:	beq	1bc20 <_start@@Base+0x6944>
   1bf30:	ldrb	r3, [sp, #328]	; 0x148
   1bf34:	mov	r1, r4
   1bf38:	mov	r2, r6
   1bf3c:	mov	r0, r5
   1bf40:	strb	r3, [fp]
   1bf44:	add	r3, sp, #308	; 0x134
   1bf48:	bl	16f10 <_start@@Base+0x1c34>
   1bf4c:	mov	r4, r0
   1bf50:	b	1be8c <_start@@Base+0x6bb0>
   1bf54:	mov	r1, r0
   1bf58:	mov	r2, r6
   1bf5c:	mov	r0, r5
   1bf60:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf64:	mov	r4, r0
   1bf68:	b	1b9b8 <_start@@Base+0x66dc>
   1bf6c:	mov	r2, r6
   1bf70:	mov	r1, r7
   1bf74:	mov	r0, r5
   1bf78:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf7c:	mov	r4, r0
   1bf80:	b	1b9b8 <_start@@Base+0x66dc>
   1bf84:	str	r4, [sp, #112]	; 0x70
   1bf88:	str	r1, [sp, #116]	; 0x74
   1bf8c:	add	r3, pc, #268	; 0x10c
   1bf90:	ldrd	r2, [r3]
   1bf94:	ldrd	r0, [sp, #112]	; 0x70
   1bf98:	cmp	r1, r3
   1bf9c:	cmpeq	r0, r2
   1bfa0:	bne	1c074 <_start@@Base+0x6d98>
   1bfa4:	mov	r3, #4
   1bfa8:	mov	r2, r6
   1bfac:	mov	r1, r7
   1bfb0:	mov	r0, r5
   1bfb4:	bl	18798 <_start@@Base+0x34bc>
   1bfb8:	cmp	r7, r0
   1bfbc:	mov	r8, r0
   1bfc0:	beq	1c05c <_start@@Base+0x6d80>
   1bfc4:	add	r3, sp, #328	; 0x148
   1bfc8:	mov	r1, r0
   1bfcc:	mov	r2, r6
   1bfd0:	mov	r0, r5
   1bfd4:	mov	r7, r3
   1bfd8:	strh	r4, [r3]
   1bfdc:	bl	194ac <_start@@Base+0x41d0>
   1bfe0:	cmp	r8, r0
   1bfe4:	mov	r4, r0
   1bfe8:	bne	1c014 <_start@@Base+0x6d38>
   1bfec:	mov	r1, r0
   1bff0:	ldr	r3, [pc, #188]	; 1c0b4 <_start@@Base+0x6dd8>
   1bff4:	mov	r2, r6
   1bff8:	mov	r0, r5
   1bffc:	str	r7, [sp]
   1c000:	bl	1a0a0 <_start@@Base+0x4dc4>
   1c004:	cmp	r6, r0
   1c008:	cmpne	r4, r0
   1c00c:	mov	r4, r0
   1c010:	beq	1bc20 <_start@@Base+0x6944>
   1c014:	add	r3, sp, #328	; 0x148
   1c018:	ldrsh	r3, [r3]
   1c01c:	cmp	r3, #150	; 0x96
   1c020:	bne	1c030 <_start@@Base+0x6d54>
   1c024:	ldr	r3, [r5, #8]
   1c028:	tst	r3, #2
   1c02c:	beq	1b9b8 <_start@@Base+0x66dc>
   1c030:	mov	r3, #2
   1c034:	mov	r1, #1
   1c038:	ldr	r0, [r5]
   1c03c:	mov	r2, r3
   1c040:	bl	22c6c <flatcc_builder_table_add@@Base>
   1c044:	cmp	r0, #0
   1c048:	beq	1bc20 <_start@@Base+0x6944>
   1c04c:	add	r3, sp, #328	; 0x148
   1c050:	ldrsh	r3, [r3]
   1c054:	strh	r3, [r0]
   1c058:	b	1b9b8 <_start@@Base+0x66dc>
   1c05c:	mov	r2, r6
   1c060:	mov	r1, r7
   1c064:	mov	r0, r5
   1c068:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c06c:	mov	r4, r0
   1c070:	b	1b9b8 <_start@@Base+0x66dc>
   1c074:	mov	r2, r6
   1c078:	mov	r1, r7
   1c07c:	mov	r0, r5
   1c080:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c084:	mov	r4, r0
   1c088:	b	1b9b8 <_start@@Base+0x66dc>
   1c08c:	nop	{0}
   1c090:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1c094:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c098:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1c09c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c0a0:	andeq	r0, r0, r0
   1c0a4:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1c0a8:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1c0ac:	andeq	r5, r4, r8, lsr #3
   1c0b0:			; <UNDEFINED> instruction: 0x000451b4
   1c0b4:	andeq	r5, r4, r0, asr #3
   1c0b8:	add	r3, pc, #880	; 0x370
   1c0bc:	ldrd	r2, [r3]
   1c0c0:	cmp	r1, r3
   1c0c4:	cmpeq	r0, r2
   1c0c8:	bhi	1c7b4 <_start@@Base+0x74d8>
   1c0cc:	add	r3, pc, #868	; 0x364
   1c0d0:	ldrd	r2, [r3]
   1c0d4:	cmp	r1, r3
   1c0d8:	cmpeq	r0, r2
   1c0dc:	bhi	1c194 <_start@@Base+0x6eb8>
   1c0e0:	mov	r3, #0
   1c0e4:	str	r3, [sp, #120]	; 0x78
   1c0e8:	str	r1, [sp, #124]	; 0x7c
   1c0ec:	add	r3, pc, #844	; 0x34c
   1c0f0:	ldrd	r2, [r3]
   1c0f4:	ldrd	r0, [sp, #120]	; 0x78
   1c0f8:	cmp	r1, r3
   1c0fc:	cmpeq	r0, r2
   1c100:	bne	1c17c <_start@@Base+0x6ea0>
   1c104:	mov	r1, r7
   1c108:	mov	r3, #4
   1c10c:	mov	r2, r6
   1c110:	mov	r0, r5
   1c114:	bl	18798 <_start@@Base+0x34bc>
   1c118:	cmp	r7, r0
   1c11c:	mov	r1, r0
   1c120:	beq	1c164 <_start@@Base+0x6e88>
   1c124:	add	r3, sp, #312	; 0x138
   1c128:	mov	r2, r6
   1c12c:	mov	r0, r5
   1c130:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1c134:	ldr	r3, [sp, #312]	; 0x138
   1c138:	mov	r4, r0
   1c13c:	cmp	r3, #0
   1c140:	beq	1bc20 <_start@@Base+0x6944>
   1c144:	mov	r1, #3
   1c148:	ldr	r0, [r5]
   1c14c:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1c150:	cmp	r0, #0
   1c154:	beq	1bc20 <_start@@Base+0x6944>
   1c158:	ldr	r3, [sp, #312]	; 0x138
   1c15c:	str	r3, [r0]
   1c160:	b	1b9b8 <_start@@Base+0x66dc>
   1c164:	mov	r2, r6
   1c168:	mov	r1, r7
   1c16c:	mov	r0, r5
   1c170:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c174:	mov	r4, r0
   1c178:	b	1b9b8 <_start@@Base+0x66dc>
   1c17c:	mov	r2, r6
   1c180:	mov	r1, r7
   1c184:	mov	r0, r5
   1c188:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c18c:	mov	r4, r0
   1c190:	b	1b9b8 <_start@@Base+0x66dc>
   1c194:	add	r3, pc, #684	; 0x2ac
   1c198:	ldrd	r2, [r3]
   1c19c:	cmp	r1, r3
   1c1a0:	cmpeq	r0, r2
   1c1a4:	bne	1c2a8 <_start@@Base+0x6fcc>
   1c1a8:	add	r4, r7, #8
   1c1ac:	mov	r1, r6
   1c1b0:	mov	r0, r4
   1c1b4:	bl	153d0 <_start@@Base+0xf4>
   1c1b8:	add	r3, pc, #656	; 0x290
   1c1bc:	ldrd	r2, [r3]
   1c1c0:	cmp	r1, r3
   1c1c4:	cmpeq	r0, r2
   1c1c8:	bne	1c290 <_start@@Base+0x6fb4>
   1c1cc:	add	r7, r7, #16
   1c1d0:	mov	r1, r6
   1c1d4:	mov	r0, r7
   1c1d8:	bl	153d0 <_start@@Base+0xf4>
   1c1dc:	and	r3, r0, #-16777216	; 0xff000000
   1c1e0:	str	r3, [sp, #128]	; 0x80
   1c1e4:	str	r1, [sp, #132]	; 0x84
   1c1e8:	add	r3, pc, #616	; 0x268
   1c1ec:	ldrd	r2, [r3]
   1c1f0:	ldrd	r0, [sp, #128]	; 0x80
   1c1f4:	cmp	r1, r3
   1c1f8:	cmpeq	r0, r2
   1c1fc:	bne	1c278 <_start@@Base+0x6f9c>
   1c200:	mov	r1, r7
   1c204:	mov	r3, #5
   1c208:	mov	r2, r6
   1c20c:	mov	r0, r5
   1c210:	bl	18798 <_start@@Base+0x34bc>
   1c214:	cmp	r7, r0
   1c218:	mov	r1, r0
   1c21c:	beq	1c260 <_start@@Base+0x6f84>
   1c220:	add	r3, sp, #312	; 0x138
   1c224:	mov	r2, r6
   1c228:	mov	r0, r5
   1c22c:	bl	186cc <_start@@Base+0x33f0>
   1c230:	ldr	r3, [sp, #312]	; 0x138
   1c234:	mov	r4, r0
   1c238:	cmp	r3, #0
   1c23c:	beq	1bc20 <_start@@Base+0x6944>
   1c240:	mov	r1, #34	; 0x22
   1c244:	ldr	r0, [r5]
   1c248:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1c24c:	cmp	r0, #0
   1c250:	beq	1bc20 <_start@@Base+0x6944>
   1c254:	ldr	r3, [sp, #312]	; 0x138
   1c258:	str	r3, [r0]
   1c25c:	b	1b9b8 <_start@@Base+0x66dc>
   1c260:	mov	r2, r6
   1c264:	mov	r1, r7
   1c268:	mov	r0, r5
   1c26c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c270:	mov	r4, r0
   1c274:	b	1b9b8 <_start@@Base+0x66dc>
   1c278:	mov	r2, r6
   1c27c:	mov	r1, r7
   1c280:	mov	r0, r5
   1c284:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c288:	mov	r4, r0
   1c28c:	b	1b9b8 <_start@@Base+0x66dc>
   1c290:	mov	r1, r4
   1c294:	mov	r2, r6
   1c298:	mov	r0, r5
   1c29c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c2a0:	mov	r4, r0
   1c2a4:	b	1b9b8 <_start@@Base+0x66dc>
   1c2a8:	bic	r3, r1, #255	; 0xff
   1c2ac:	mov	r8, #0
   1c2b0:	str	r8, [sp, #136]	; 0x88
   1c2b4:	str	r3, [sp, #140]	; 0x8c
   1c2b8:	add	r3, pc, #416	; 0x1a0
   1c2bc:	ldrd	r2, [r3]
   1c2c0:	ldrd	r0, [sp, #136]	; 0x88
   1c2c4:	cmp	r1, r3
   1c2c8:	cmpeq	r0, r2
   1c2cc:	bne	1c79c <_start@@Base+0x74c0>
   1c2d0:	mov	r3, #3
   1c2d4:	mov	r2, r6
   1c2d8:	mov	r1, r7
   1c2dc:	mov	r0, r5
   1c2e0:	bl	18798 <_start@@Base+0x34bc>
   1c2e4:	cmp	r7, r0
   1c2e8:	mov	r4, r0
   1c2ec:	beq	1c784 <_start@@Base+0x74a8>
   1c2f0:	mov	r3, #16
   1c2f4:	mov	r2, #32
   1c2f8:	ldr	r0, [r5]
   1c2fc:	mov	r1, r8
   1c300:	bl	22c6c <flatcc_builder_table_add@@Base>
   1c304:	subs	r7, r0, #0
   1c308:	beq	1bc20 <_start@@Base+0x6944>
   1c30c:	vldr	d8, [pc, #340]	; 1c468 <_start@@Base+0x718c>
   1c310:	mov	r1, r4
   1c314:	add	r3, sp, #324	; 0x144
   1c318:	mov	r2, r6
   1c31c:	mov	r0, r5
   1c320:	add	r9, pc, #328	; 0x148
   1c324:	ldrd	r8, [r9]
   1c328:	bl	18644 <_start@@Base+0x3368>
   1c32c:	mov	r4, r0
   1c330:	ldr	r3, [sp, #324]	; 0x144
   1c334:	cmp	r3, #0
   1c338:	beq	1b9b8 <_start@@Base+0x66dc>
   1c33c:	mov	r2, r6
   1c340:	mov	r1, r4
   1c344:	mov	r0, r5
   1c348:	bl	17a14 <_start@@Base+0x2738>
   1c34c:	mov	r1, r6
   1c350:	mov	r4, r0
   1c354:	bl	153d0 <_start@@Base+0xf4>
   1c358:	add	r3, pc, #280	; 0x118
   1c35c:	ldrd	r2, [r3]
   1c360:	cmp	r1, r3
   1c364:	cmpeq	r0, r2
   1c368:	bhi	1c520 <_start@@Base+0x7244>
   1c36c:	and	r3, r0, #-16777216	; 0xff000000
   1c370:	str	r3, [sp, #72]	; 0x48
   1c374:	str	r1, [sp, #76]	; 0x4c
   1c378:	add	r1, pc, #256	; 0x100
   1c37c:	ldrd	r0, [r1]
   1c380:	ldrd	r2, [sp, #72]	; 0x48
   1c384:	cmp	r3, r1
   1c388:	cmpeq	r2, r0
   1c38c:	bne	1c490 <_start@@Base+0x71b4>
   1c390:	mov	r3, #5
   1c394:	mov	r2, r6
   1c398:	mov	r1, r4
   1c39c:	mov	r0, r5
   1c3a0:	bl	18798 <_start@@Base+0x34bc>
   1c3a4:	cmp	r4, r0
   1c3a8:	mov	sl, r0
   1c3ac:	beq	1c754 <_start@@Base+0x7478>
   1c3b0:	mov	r3, #0
   1c3b4:	add	fp, sp, #328	; 0x148
   1c3b8:	mov	r1, r0
   1c3bc:	mov	r2, r6
   1c3c0:	mov	r0, r5
   1c3c4:	strb	r3, [sp, #328]	; 0x148
   1c3c8:	mov	r3, fp
   1c3cc:	bl	19558 <_start@@Base+0x427c>
   1c3d0:	cmp	sl, r0
   1c3d4:	mov	r4, r0
   1c3d8:	bne	1c404 <_start@@Base+0x7128>
   1c3dc:	mov	r1, r0
   1c3e0:	ldr	r3, [pc, #160]	; 1c488 <_start@@Base+0x71ac>
   1c3e4:	mov	r2, r6
   1c3e8:	mov	r0, r5
   1c3ec:	str	fp, [sp]
   1c3f0:	bl	1a1d0 <_start@@Base+0x4ef4>
   1c3f4:	cmp	r6, r0
   1c3f8:	cmpne	r4, r0
   1c3fc:	beq	1c768 <_start@@Base+0x748c>
   1c400:	mov	r4, r0
   1c404:	add	r3, sp, #328	; 0x148
   1c408:	ldrsb	r3, [r3]
   1c40c:	strb	r3, [r7, #24]
   1c410:	mov	r1, r4
   1c414:	add	r3, sp, #324	; 0x144
   1c418:	mov	r2, r6
   1c41c:	mov	r0, r5
   1c420:	bl	16fc8 <_start@@Base+0x1cec>
   1c424:	mov	r4, r0
   1c428:	b	1c330 <_start@@Base+0x7054>
   1c42c:	nop	{0}
   1c430:			; <UNDEFINED> instruction: 0xffffffff
   1c434:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1c438:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1c43c:	rsbvc	r7, r1, r5, ror #4
   1c440:	andeq	r0, r0, r0
   1c444:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1c448:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1c44c:	rsbvc	r7, r1, r5, ror #4
   1c450:	rsbvc	r6, r1, r5, ror #6
   1c454:	smcvs	54867	; 0xd653
   1c458:	strvc	r0, [r0], #-0
   1c45c:	svcpl	0x00746573
   1c460:	andeq	r0, r0, r0
   1c464:	rsbvc	r7, pc, r0, lsl #6
	...
   1c470:	mrscc	r0, (UNDEF: 0)
   1c474:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c478:	rscscc	pc, pc, #1020	; 0x3fc
   1c47c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c480:	andcc	r0, r0, #0
   1c484:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c488:	andeq	r5, r4, ip, asr #3
   1c48c:	ldrdeq	r5, [r4], -ip
   1c490:	ldrd	r2, [sp, #72]	; 0x48
   1c494:	cmp	r3, r9
   1c498:	cmpeq	r2, r8
   1c49c:	bne	1c754 <_start@@Base+0x7478>
   1c4a0:	mov	r3, #5
   1c4a4:	mov	r2, r6
   1c4a8:	mov	r1, r4
   1c4ac:	mov	r0, r5
   1c4b0:	bl	18798 <_start@@Base+0x34bc>
   1c4b4:	cmp	r4, r0
   1c4b8:	mov	sl, r0
   1c4bc:	beq	1c754 <_start@@Base+0x7478>
   1c4c0:	add	fp, sp, #328	; 0x148
   1c4c4:	mov	r1, r0
   1c4c8:	vstr	d8, [sp, #328]	; 0x148
   1c4cc:	mov	r3, fp
   1c4d0:	mov	r2, r6
   1c4d4:	mov	r0, r5
   1c4d8:	bl	25cd4 <flatcc_json_parser_double@@Base>
   1c4dc:	cmp	sl, r0
   1c4e0:	mov	r4, r0
   1c4e4:	bne	1c510 <_start@@Base+0x7234>
   1c4e8:	mov	r1, r0
   1c4ec:	ldr	r3, [pc, #-104]	; 1c48c <_start@@Base+0x71b0>
   1c4f0:	mov	r2, r6
   1c4f4:	mov	r0, r5
   1c4f8:	str	fp, [sp]
   1c4fc:	bl	17c74 <_start@@Base+0x2998>
   1c500:	cmp	r6, r0
   1c504:	cmpne	r4, r0
   1c508:	beq	1c768 <_start@@Base+0x748c>
   1c50c:	mov	r4, r0
   1c510:	add	r3, sp, #328	; 0x148
   1c514:	ldrd	r2, [r3]
   1c518:	strd	r2, [r7, #16]
   1c51c:	b	1c410 <_start@@Base+0x7134>
   1c520:	mvn	r3, #-2013265920	; 0x88000000
   1c524:	mvn	r2, #0
   1c528:	cmp	r1, r3
   1c52c:	cmpeq	r0, r2
   1c530:	bhi	1c590 <_start@@Base+0x72b4>
   1c534:	and	r3, r0, #-16777216	; 0xff000000
   1c538:	str	r3, [sp, #144]	; 0x90
   1c53c:	str	r1, [sp, #148]	; 0x94
   1c540:	add	r1, pc, #944	; 0x3b0
   1c544:	ldrd	r0, [r1]
   1c548:	ldrd	r2, [sp, #144]	; 0x90
   1c54c:	cmp	r3, r1
   1c550:	cmpeq	r2, r0
   1c554:	bne	1c754 <_start@@Base+0x7478>
   1c558:	mov	r1, r4
   1c55c:	mov	r3, #5
   1c560:	mov	r2, r6
   1c564:	mov	r0, r5
   1c568:	bl	18798 <_start@@Base+0x34bc>
   1c56c:	cmp	r4, r0
   1c570:	mov	r1, r0
   1c574:	beq	1c754 <_start@@Base+0x7478>
   1c578:	add	r3, r7, #26
   1c57c:	mov	r2, r6
   1c580:	mov	r0, r5
   1c584:	bl	1a2f0 <_start@@Base+0x5014>
   1c588:	mov	r4, r0
   1c58c:	b	1c410 <_start@@Base+0x7134>
   1c590:	mvn	r3, #-2030043136	; 0x87000000
   1c594:	mvn	r2, #0
   1c598:	cmp	r1, r3
   1c59c:	cmpeq	r0, r2
   1c5a0:	bhi	1c624 <_start@@Base+0x7348>
   1c5a4:	mov	r3, #1
   1c5a8:	mov	r2, r6
   1c5ac:	mov	r1, r4
   1c5b0:	mov	r0, r5
   1c5b4:	bl	18798 <_start@@Base+0x34bc>
   1c5b8:	cmp	r4, r0
   1c5bc:	mov	sl, r0
   1c5c0:	beq	1c754 <_start@@Base+0x7478>
   1c5c4:	mov	r3, #0
   1c5c8:	add	fp, sp, #328	; 0x148
   1c5cc:	mov	r1, r0
   1c5d0:	mov	r2, r6
   1c5d4:	mov	r0, r5
   1c5d8:	str	r3, [sp, #328]	; 0x148
   1c5dc:	mov	r3, fp
   1c5e0:	bl	25da0 <flatcc_json_parser_float@@Base>
   1c5e4:	cmp	sl, r0
   1c5e8:	mov	r4, r0
   1c5ec:	bne	1c618 <_start@@Base+0x733c>
   1c5f0:	mov	r1, r0
   1c5f4:	ldr	r3, [pc, #780]	; 1c908 <_start@@Base+0x762c>
   1c5f8:	mov	r2, r6
   1c5fc:	mov	r0, r5
   1c600:	str	fp, [sp]
   1c604:	bl	17b9c <_start@@Base+0x28c0>
   1c608:	cmp	r6, r0
   1c60c:	cmpne	r4, r0
   1c610:	beq	1c768 <_start@@Base+0x748c>
   1c614:	mov	r4, r0
   1c618:	ldr	r3, [sp, #328]	; 0x148
   1c61c:	str	r3, [r7]
   1c620:	b	1c410 <_start@@Base+0x7134>
   1c624:	mov	r3, #0
   1c628:	str	r3, [sp, #80]	; 0x50
   1c62c:	and	r3, r1, #-16777216	; 0xff000000
   1c630:	str	r3, [sp, #84]	; 0x54
   1c634:	ldrd	r2, [sp, #80]	; 0x50
   1c638:	cmp	r3, #2046820352	; 0x7a000000
   1c63c:	cmpeq	r2, #0
   1c640:	bne	1c6c4 <_start@@Base+0x73e8>
   1c644:	mov	r3, #1
   1c648:	mov	r2, r6
   1c64c:	mov	r1, r4
   1c650:	mov	r0, r5
   1c654:	bl	18798 <_start@@Base+0x34bc>
   1c658:	cmp	r4, r0
   1c65c:	mov	sl, r0
   1c660:	beq	1c754 <_start@@Base+0x7478>
   1c664:	mov	r3, #0
   1c668:	add	fp, sp, #328	; 0x148
   1c66c:	mov	r1, r0
   1c670:	mov	r2, r6
   1c674:	mov	r0, r5
   1c678:	str	r3, [sp, #328]	; 0x148
   1c67c:	mov	r3, fp
   1c680:	bl	25da0 <flatcc_json_parser_float@@Base>
   1c684:	cmp	sl, r0
   1c688:	mov	r4, r0
   1c68c:	bne	1c6b8 <_start@@Base+0x73dc>
   1c690:	mov	r1, r0
   1c694:	ldr	r3, [pc, #624]	; 1c90c <_start@@Base+0x7630>
   1c698:	mov	r2, r6
   1c69c:	mov	r0, r5
   1c6a0:	str	fp, [sp]
   1c6a4:	bl	17b9c <_start@@Base+0x28c0>
   1c6a8:	cmp	r6, r0
   1c6ac:	cmpne	r4, r0
   1c6b0:	beq	1c768 <_start@@Base+0x748c>
   1c6b4:	mov	r4, r0
   1c6b8:	ldr	r3, [sp, #328]	; 0x148
   1c6bc:	str	r3, [r7, #8]
   1c6c0:	b	1c410 <_start@@Base+0x7134>
   1c6c4:	ldrd	r2, [sp, #80]	; 0x50
   1c6c8:	cmp	r3, #2030043136	; 0x79000000
   1c6cc:	cmpeq	r2, #0
   1c6d0:	bne	1c754 <_start@@Base+0x7478>
   1c6d4:	mov	r3, #1
   1c6d8:	mov	r2, r6
   1c6dc:	mov	r1, r4
   1c6e0:	mov	r0, r5
   1c6e4:	bl	18798 <_start@@Base+0x34bc>
   1c6e8:	cmp	r4, r0
   1c6ec:	mov	sl, r0
   1c6f0:	beq	1c754 <_start@@Base+0x7478>
   1c6f4:	mov	r3, #0
   1c6f8:	add	fp, sp, #328	; 0x148
   1c6fc:	mov	r1, r0
   1c700:	mov	r2, r6
   1c704:	mov	r0, r5
   1c708:	str	r3, [sp, #328]	; 0x148
   1c70c:	mov	r3, fp
   1c710:	bl	25da0 <flatcc_json_parser_float@@Base>
   1c714:	cmp	sl, r0
   1c718:	mov	r4, r0
   1c71c:	bne	1c748 <_start@@Base+0x746c>
   1c720:	mov	r1, r0
   1c724:	ldr	r3, [pc, #484]	; 1c910 <_start@@Base+0x7634>
   1c728:	mov	r2, r6
   1c72c:	mov	r0, r5
   1c730:	str	fp, [sp]
   1c734:	bl	17b9c <_start@@Base+0x28c0>
   1c738:	cmp	r6, r0
   1c73c:	cmpne	r4, r0
   1c740:	beq	1c768 <_start@@Base+0x748c>
   1c744:	mov	r4, r0
   1c748:	ldr	r3, [sp, #328]	; 0x148
   1c74c:	str	r3, [r7, #4]
   1c750:	b	1c410 <_start@@Base+0x7134>
   1c754:	mov	r2, r6
   1c758:	mov	r1, r4
   1c75c:	mov	r0, r5
   1c760:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c764:	b	1c588 <_start@@Base+0x72ac>
   1c768:	mov	r1, r0
   1c76c:	mov	r3, #33	; 0x21
   1c770:	mov	r2, r6
   1c774:	mov	r0, r5
   1c778:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1c77c:	mov	r4, r0
   1c780:	b	1b9b8 <_start@@Base+0x66dc>
   1c784:	mov	r1, r0
   1c788:	mov	r2, r6
   1c78c:	mov	r0, r5
   1c790:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c794:	mov	r4, r0
   1c798:	b	1b9b8 <_start@@Base+0x66dc>
   1c79c:	mov	r2, r6
   1c7a0:	mov	r1, r7
   1c7a4:	mov	r0, r5
   1c7a8:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7ac:	mov	r4, r0
   1c7b0:	b	1b9b8 <_start@@Base+0x66dc>
   1c7b4:	and	r3, r0, #-16777216	; 0xff000000
   1c7b8:	str	r3, [sp, #64]	; 0x40
   1c7bc:	str	r1, [sp, #68]	; 0x44
   1c7c0:	add	r3, pc, #312	; 0x138
   1c7c4:	ldrd	r2, [r3]
   1c7c8:	ldrd	r0, [sp, #64]	; 0x40
   1c7cc:	cmp	r1, r3
   1c7d0:	cmpeq	r0, r2
   1c7d4:	bne	1c8a8 <_start@@Base+0x75cc>
   1c7d8:	mov	r3, #5
   1c7dc:	mov	r2, r6
   1c7e0:	mov	r1, r7
   1c7e4:	mov	r0, r5
   1c7e8:	bl	18798 <_start@@Base+0x34bc>
   1c7ec:	cmp	r7, r0
   1c7f0:	mov	r4, r0
   1c7f4:	beq	1ee48 <_start@@Base+0x9b6c>
   1c7f8:	mvn	r3, #-1073741824	; 0xc0000000
   1c7fc:	mov	r2, #2
   1c800:	ldr	r0, [r5]
   1c804:	mov	r1, #4
   1c808:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1c80c:	cmp	r0, #0
   1c810:	bne	1bc20 <_start@@Base+0x6944>
   1c814:	add	r7, sp, #308	; 0x134
   1c818:	mov	r2, r6
   1c81c:	mov	r3, r7
   1c820:	mov	r1, r4
   1c824:	mov	r0, r5
   1c828:	bl	18f6c <_start@@Base+0x3c90>
   1c82c:	ldr	r3, [sp, #308]	; 0x134
   1c830:	mov	r4, r0
   1c834:	ldr	r0, [r5]
   1c838:	cmp	r3, #0
   1c83c:	bne	1c870 <_start@@Base+0x7594>
   1c840:	bl	2252c <flatcc_builder_end_vector@@Base>
   1c844:	cmp	r0, #0
   1c848:	str	r0, [sp, #312]	; 0x138
   1c84c:	beq	1bc20 <_start@@Base+0x6944>
   1c850:	mov	r1, #9
   1c854:	ldr	r0, [r5]
   1c858:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1c85c:	cmp	r0, #0
   1c860:	beq	1bc20 <_start@@Base+0x6944>
   1c864:	ldr	r3, [sp, #312]	; 0x138
   1c868:	str	r3, [r0]
   1c86c:	b	1b9b8 <_start@@Base+0x66dc>
   1c870:	mov	r1, #1
   1c874:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1c878:	subs	r3, r0, #0
   1c87c:	beq	1bc20 <_start@@Base+0x6944>
   1c880:	mov	r2, r6
   1c884:	mov	r1, r4
   1c888:	mov	r0, r5
   1c88c:	bl	1a2f0 <_start@@Base+0x5014>
   1c890:	mov	r1, r0
   1c894:	mov	r3, r7
   1c898:	mov	r2, r6
   1c89c:	mov	r0, r5
   1c8a0:	bl	16f10 <_start@@Base+0x1c34>
   1c8a4:	b	1c82c <_start@@Base+0x7550>
   1c8a8:	mov	r1, r7
   1c8ac:	mov	r3, #4
   1c8b0:	mov	r2, r6
   1c8b4:	mov	r0, r5
   1c8b8:	bl	18798 <_start@@Base+0x34bc>
   1c8bc:	cmp	r7, r0
   1c8c0:	mov	r1, r0
   1c8c4:	beq	1c918 <_start@@Base+0x763c>
   1c8c8:	ldr	r3, [pc, #68]	; 1c914 <_start@@Base+0x7638>
   1c8cc:	mov	r2, r6
   1c8d0:	mov	r0, r5
   1c8d4:	str	r3, [sp, #8]
   1c8d8:	ldr	r3, [sp, #316]	; 0x13c
   1c8dc:	str	r3, [sp, #4]
   1c8e0:	mov	r3, #8
   1c8e4:	str	r3, [sp]
   1c8e8:	mov	r3, #0
   1c8ec:	bl	26a84 <flatcc_json_parser_union@@Base>
   1c8f0:	mov	r4, r0
   1c8f4:	b	1b9b8 <_start@@Base+0x66dc>
   1c8f8:	movwcc	r0, #0
   1c8fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c900:	strcc	r0, [r0], #-0
   1c904:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c908:	andeq	r5, r4, r8, ror #3
   1c90c:	strdeq	r5, [r4], -r4
   1c910:	andeq	r5, r4, r0, lsl #4
   1c914:	andeq	lr, r1, r8, lsl #29
   1c918:	add	r3, pc, #808	; 0x328
   1c91c:	ldrd	r2, [r3]
   1c920:	ldrd	r8, [sp, #64]	; 0x40
   1c924:	cmp	r9, r3
   1c928:	cmpeq	r8, r2
   1c92c:	bne	1ca00 <_start@@Base+0x7724>
   1c930:	mov	r3, #5
   1c934:	mov	r2, r6
   1c938:	mov	r1, r7
   1c93c:	mov	r0, r5
   1c940:	bl	18798 <_start@@Base+0x34bc>
   1c944:	cmp	r7, r0
   1c948:	mov	r4, r0
   1c94c:	beq	1ee48 <_start@@Base+0x9b6c>
   1c950:	mvn	r3, #-1073741824	; 0xc0000000
   1c954:	mov	r2, #2
   1c958:	ldr	r0, [r5]
   1c95c:	mov	r1, #4
   1c960:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1c964:	cmp	r0, #0
   1c968:	bne	1bc20 <_start@@Base+0x6944>
   1c96c:	add	r7, sp, #308	; 0x134
   1c970:	mov	r2, r6
   1c974:	mov	r3, r7
   1c978:	mov	r1, r4
   1c97c:	mov	r0, r5
   1c980:	bl	18f6c <_start@@Base+0x3c90>
   1c984:	ldr	r3, [sp, #308]	; 0x134
   1c988:	mov	r4, r0
   1c98c:	ldr	r0, [r5]
   1c990:	cmp	r3, #0
   1c994:	bne	1c9c8 <_start@@Base+0x76ec>
   1c998:	bl	2252c <flatcc_builder_end_vector@@Base>
   1c99c:	cmp	r0, #0
   1c9a0:	str	r0, [sp, #312]	; 0x138
   1c9a4:	beq	1bc20 <_start@@Base+0x6944>
   1c9a8:	mov	r1, #31
   1c9ac:	ldr	r0, [r5]
   1c9b0:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1c9b4:	cmp	r0, #0
   1c9b8:	beq	1bc20 <_start@@Base+0x6944>
   1c9bc:	ldr	r3, [sp, #312]	; 0x138
   1c9c0:	str	r3, [r0]
   1c9c4:	b	1b9b8 <_start@@Base+0x66dc>
   1c9c8:	mov	r1, #1
   1c9cc:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1c9d0:	subs	r3, r0, #0
   1c9d4:	beq	1bc20 <_start@@Base+0x6944>
   1c9d8:	mov	r2, r6
   1c9dc:	mov	r1, r4
   1c9e0:	mov	r0, r5
   1c9e4:	bl	1a2f0 <_start@@Base+0x5014>
   1c9e8:	mov	r1, r0
   1c9ec:	mov	r3, r7
   1c9f0:	mov	r2, r6
   1c9f4:	mov	r0, r5
   1c9f8:	bl	16f10 <_start@@Base+0x1c34>
   1c9fc:	b	1c984 <_start@@Base+0x76a8>
   1ca00:	add	r3, pc, #584	; 0x248
   1ca04:	ldrd	r2, [r3]
   1ca08:	cmp	fp, r3
   1ca0c:	cmpeq	sl, r2
   1ca10:	bne	1ee4c <_start@@Base+0x9b70>
   1ca14:	add	r7, r7, #8
   1ca18:	mov	r1, r6
   1ca1c:	mov	r0, r7
   1ca20:	bl	153d0 <_start@@Base+0xf4>
   1ca24:	mov	r3, #0
   1ca28:	str	r3, [sp, #152]	; 0x98
   1ca2c:	and	r3, r1, #-16777216	; 0xff000000
   1ca30:	str	r3, [sp, #156]	; 0x9c
   1ca34:	ldrd	r2, [sp, #152]	; 0x98
   1ca38:	cmp	r3, #1694498816	; 0x65000000
   1ca3c:	cmpeq	r2, #0
   1ca40:	bne	1cab0 <_start@@Base+0x77d4>
   1ca44:	mov	r1, r7
   1ca48:	mov	r3, #1
   1ca4c:	mov	r2, r6
   1ca50:	mov	r0, r5
   1ca54:	bl	18798 <_start@@Base+0x34bc>
   1ca58:	cmp	r7, r0
   1ca5c:	mov	r1, r0
   1ca60:	beq	1ca9c <_start@@Base+0x77c0>
   1ca64:	ldr	r3, [pc, #524]	; 1cc78 <_start@@Base+0x799c>
   1ca68:	mov	r2, r6
   1ca6c:	mov	r0, r5
   1ca70:	str	r3, [sp, #12]
   1ca74:	ldr	r3, [pc, #512]	; 1cc7c <_start@@Base+0x79a0>
   1ca78:	str	r3, [sp, #8]
   1ca7c:	ldr	r3, [sp, #316]	; 0x13c
   1ca80:	str	r3, [sp, #4]
   1ca84:	mov	r3, #8
   1ca88:	str	r3, [sp]
   1ca8c:	mov	r3, #0
   1ca90:	bl	26b90 <flatcc_json_parser_union_type@@Base>
   1ca94:	mov	r4, r0
   1ca98:	b	1b9b8 <_start@@Base+0x66dc>
   1ca9c:	mov	r2, r6
   1caa0:	mov	r0, r5
   1caa4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1caa8:	mov	r4, r0
   1caac:	b	1b9b8 <_start@@Base+0x66dc>
   1cab0:	mov	r2, r6
   1cab4:	mov	r1, r7
   1cab8:	mov	r0, r5
   1cabc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1cac0:	mov	r4, r0
   1cac4:	b	1b9b8 <_start@@Base+0x66dc>
   1cac8:	add	r3, pc, #392	; 0x188
   1cacc:	ldrd	r2, [r3]
   1cad0:	cmp	r1, r3
   1cad4:	cmpeq	r0, r2
   1cad8:	bhi	1de38 <_start@@Base+0x8b5c>
   1cadc:	add	r3, pc, #380	; 0x17c
   1cae0:	ldrd	r2, [r3]
   1cae4:	cmp	r1, r3
   1cae8:	cmpeq	r0, r2
   1caec:	bne	1d3a8 <_start@@Base+0x80cc>
   1caf0:	add	r8, r7, #8
   1caf4:	mov	r1, r6
   1caf8:	mov	r0, r8
   1cafc:	bl	153d0 <_start@@Base+0xf4>
   1cb00:	add	r3, pc, #352	; 0x160
   1cb04:	ldrd	r2, [r3]
   1cb08:	cmp	r1, r3
   1cb0c:	cmpeq	r0, r2
   1cb10:	bhi	1cf8c <_start@@Base+0x7cb0>
   1cb14:	add	r3, pc, #340	; 0x154
   1cb18:	ldrd	r2, [r3]
   1cb1c:	cmp	r1, r3
   1cb20:	cmpeq	r0, r2
   1cb24:	bne	1cc84 <_start@@Base+0x79a8>
   1cb28:	mov	r3, #8
   1cb2c:	mov	r2, r6
   1cb30:	mov	r1, r8
   1cb34:	mov	r0, r5
   1cb38:	bl	18798 <_start@@Base+0x34bc>
   1cb3c:	cmp	r8, r0
   1cb40:	mov	r4, r0
   1cb44:	beq	1cf74 <_start@@Base+0x7c98>
   1cb48:	mov	r2, #1
   1cb4c:	mvn	r3, #0
   1cb50:	ldr	r0, [r5]
   1cb54:	mov	r1, r2
   1cb58:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1cb5c:	subs	r7, r0, #0
   1cb60:	bne	1bc20 <_start@@Base+0x6944>
   1cb64:	ldr	sl, [pc, #276]	; 1cc80 <_start@@Base+0x79a4>
   1cb68:	mov	r1, r4
   1cb6c:	add	r3, sp, #308	; 0x134
   1cb70:	mov	r2, r6
   1cb74:	mov	r0, r5
   1cb78:	bl	18f6c <_start@@Base+0x3c90>
   1cb7c:	mov	r4, r0
   1cb80:	ldr	r3, [sp, #308]	; 0x134
   1cb84:	ldr	r0, [r5]
   1cb88:	cmp	r3, #0
   1cb8c:	bne	1cbc0 <_start@@Base+0x78e4>
   1cb90:	bl	2252c <flatcc_builder_end_vector@@Base>
   1cb94:	cmp	r0, #0
   1cb98:	str	r0, [sp, #312]	; 0x138
   1cb9c:	beq	1bc20 <_start@@Base+0x6944>
   1cba0:	mov	r1, #24
   1cba4:	ldr	r0, [r5]
   1cba8:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1cbac:	cmp	r0, #0
   1cbb0:	beq	1bc20 <_start@@Base+0x6944>
   1cbb4:	ldr	r3, [sp, #312]	; 0x138
   1cbb8:	str	r3, [r0]
   1cbbc:	b	1b9b8 <_start@@Base+0x66dc>
   1cbc0:	mov	r1, #1
   1cbc4:	strb	r7, [sp, #328]	; 0x148
   1cbc8:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1cbcc:	subs	fp, r0, #0
   1cbd0:	beq	1bc20 <_start@@Base+0x6944>
   1cbd4:	add	r9, sp, #328	; 0x148
   1cbd8:	mov	r1, r4
   1cbdc:	mov	r3, r9
   1cbe0:	mov	r2, r6
   1cbe4:	mov	r0, r5
   1cbe8:	bl	19250 <_start@@Base+0x3f74>
   1cbec:	cmp	r4, r0
   1cbf0:	mov	r8, r0
   1cbf4:	movne	r4, r0
   1cbf8:	bne	1cc24 <_start@@Base+0x7948>
   1cbfc:	mov	r1, r4
   1cc00:	mov	r3, sl
   1cc04:	str	r9, [sp]
   1cc08:	mov	r2, r6
   1cc0c:	mov	r0, r5
   1cc10:	bl	17a9c <_start@@Base+0x27c0>
   1cc14:	cmp	r6, r0
   1cc18:	cmpne	r8, r0
   1cc1c:	mov	r4, r0
   1cc20:	beq	1bc20 <_start@@Base+0x6944>
   1cc24:	ldrb	r3, [sp, #328]	; 0x148
   1cc28:	mov	r1, r4
   1cc2c:	mov	r2, r6
   1cc30:	mov	r0, r5
   1cc34:	strb	r3, [fp]
   1cc38:	add	r3, sp, #308	; 0x134
   1cc3c:	bl	16f10 <_start@@Base+0x1c34>
   1cc40:	mov	r4, r0
   1cc44:	b	1cb80 <_start@@Base+0x78a4>
   1cc48:	strcc	r0, [r0, #-0]
   1cc4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cc50:	svcpl	0x00747970
   1cc54:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cc58:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1cc5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cc60:	cmnvs	r2, r1, ror #4
   1cc64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cc68:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1cc6c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cc70:	svcvs	0x006f6c73
   1cc74:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cc78:	andeq	lr, r1, r8, lsl #29
   1cc7c:	andeq	r5, r4, ip, lsl #4
   1cc80:	andeq	r5, r4, ip, lsl r2
   1cc84:	add	r3, pc, #988	; 0x3dc
   1cc88:	ldrd	r2, [r3]
   1cc8c:	cmp	r1, r3
   1cc90:	cmpeq	r0, r2
   1cc94:	bne	1cf70 <_start@@Base+0x7c94>
   1cc98:	add	r7, r7, #16
   1cc9c:	mov	r1, r6
   1cca0:	mov	r0, r7
   1cca4:	bl	153d0 <_start@@Base+0xf4>
   1cca8:	bic	r3, r0, #255	; 0xff
   1ccac:	str	r3, [sp, #160]	; 0xa0
   1ccb0:	str	r1, [sp, #164]	; 0xa4
   1ccb4:	add	r3, pc, #948	; 0x3b4
   1ccb8:	ldrd	r2, [r3]
   1ccbc:	ldrd	r0, [sp, #160]	; 0xa0
   1ccc0:	cmp	r1, r3
   1ccc4:	cmpeq	r0, r2
   1ccc8:	bne	1cf58 <_start@@Base+0x7c7c>
   1cccc:	mov	r3, #7
   1ccd0:	mov	r2, r6
   1ccd4:	mov	r1, r7
   1ccd8:	mov	r0, r5
   1ccdc:	bl	18798 <_start@@Base+0x34bc>
   1cce0:	cmp	r7, r0
   1cce4:	mov	r4, r0
   1cce8:	beq	1cf40 <_start@@Base+0x7c64>
   1ccec:	mvn	r3, #-536870912	; 0xe0000000
   1ccf0:	mov	r2, #4
   1ccf4:	ldr	r0, [r5]
   1ccf8:	mov	r1, #8
   1ccfc:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1cd00:	cmp	r0, #0
   1cd04:	bne	1bc20 <_start@@Base+0x6944>
   1cd08:	add	r3, sp, #308	; 0x134
   1cd0c:	mov	r2, r6
   1cd10:	mov	r1, r4
   1cd14:	mov	r0, r5
   1cd18:	bl	18f6c <_start@@Base+0x3c90>
   1cd1c:	ldr	r3, [sp, #308]	; 0x134
   1cd20:	mov	r4, r0
   1cd24:	ldr	r0, [r5]
   1cd28:	cmp	r3, #0
   1cd2c:	bne	1cd60 <_start@@Base+0x7a84>
   1cd30:	bl	2252c <flatcc_builder_end_vector@@Base>
   1cd34:	cmp	r0, #0
   1cd38:	str	r0, [sp, #312]	; 0x138
   1cd3c:	beq	1bc20 <_start@@Base+0x6944>
   1cd40:	mov	r1, #29
   1cd44:	ldr	r0, [r5]
   1cd48:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1cd4c:	cmp	r0, #0
   1cd50:	beq	1bc20 <_start@@Base+0x6944>
   1cd54:	ldr	r3, [sp, #312]	; 0x138
   1cd58:	str	r3, [r0]
   1cd5c:	b	1b9b8 <_start@@Base+0x66dc>
   1cd60:	mov	r1, #1
   1cd64:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1cd68:	subs	r9, r0, #0
   1cd6c:	beq	1bc20 <_start@@Base+0x6944>
   1cd70:	add	r3, sp, #324	; 0x144
   1cd74:	mov	r2, r6
   1cd78:	mov	r1, r4
   1cd7c:	mov	r0, r5
   1cd80:	bl	18644 <_start@@Base+0x3368>
   1cd84:	ldr	r3, [sp, #324]	; 0x144
   1cd88:	cmp	r3, #0
   1cd8c:	bne	1cda8 <_start@@Base+0x7acc>
   1cd90:	mov	r1, r0
   1cd94:	add	r3, sp, #308	; 0x134
   1cd98:	mov	r2, r6
   1cd9c:	mov	r0, r5
   1cda0:	bl	16f10 <_start@@Base+0x1c34>
   1cda4:	b	1cd1c <_start@@Base+0x7a40>
   1cda8:	mov	r2, r6
   1cdac:	mov	r1, r0
   1cdb0:	ldr	fp, [pc, #720]	; 1d088 <_start@@Base+0x7dac>
   1cdb4:	mov	r0, r5
   1cdb8:	mov	r8, #0
   1cdbc:	bl	17a14 <_start@@Base+0x2738>
   1cdc0:	mov	r1, r6
   1cdc4:	mov	r4, r0
   1cdc8:	bl	153d0 <_start@@Base+0xf4>
   1cdcc:	lsr	r3, r1, #16
   1cdd0:	str	r8, [sp, #168]	; 0xa8
   1cdd4:	mov	sl, #0
   1cdd8:	lsl	r3, r3, #16
   1cddc:	str	r3, [sp, #172]	; 0xac
   1cde0:	ldrd	r2, [sp, #168]	; 0xa8
   1cde4:	cmp	r3, fp
   1cde8:	cmpeq	r2, sl
   1cdec:	bne	1ce80 <_start@@Base+0x7ba4>
   1cdf0:	mov	r3, #2
   1cdf4:	mov	r2, r6
   1cdf8:	mov	r1, r4
   1cdfc:	mov	r0, r5
   1ce00:	bl	18798 <_start@@Base+0x34bc>
   1ce04:	cmp	r4, r0
   1ce08:	mov	r7, r0
   1ce0c:	beq	1cf10 <_start@@Base+0x7c34>
   1ce10:	str	r8, [sp, #328]	; 0x148
   1ce14:	add	r8, sp, #328	; 0x148
   1ce18:	mov	r1, r0
   1ce1c:	mov	r2, r6
   1ce20:	mov	r0, r5
   1ce24:	mov	r3, r8
   1ce28:	bl	19084 <_start@@Base+0x3da8>
   1ce2c:	cmp	r7, r0
   1ce30:	mov	r4, r0
   1ce34:	bne	1ce60 <_start@@Base+0x7b84>
   1ce38:	mov	r1, r0
   1ce3c:	ldr	r3, [pc, #584]	; 1d08c <_start@@Base+0x7db0>
   1ce40:	mov	r2, r6
   1ce44:	mov	r0, r5
   1ce48:	str	r8, [sp]
   1ce4c:	bl	1970c <_start@@Base+0x4430>
   1ce50:	cmp	r6, r0
   1ce54:	cmpne	r4, r0
   1ce58:	beq	1cf28 <_start@@Base+0x7c4c>
   1ce5c:	mov	r4, r0
   1ce60:	ldr	r3, [sp, #328]	; 0x148
   1ce64:	str	r3, [r9]
   1ce68:	add	r3, sp, #324	; 0x144
   1ce6c:	mov	r2, r6
   1ce70:	mov	r1, r4
   1ce74:	mov	r0, r5
   1ce78:	bl	16fc8 <_start@@Base+0x1cec>
   1ce7c:	b	1cd84 <_start@@Base+0x7aa8>
   1ce80:	add	r3, pc, #496	; 0x1f0
   1ce84:	ldrd	r2, [r3]
   1ce88:	cmp	r1, r3
   1ce8c:	cmpeq	r0, r2
   1ce90:	bne	1cf10 <_start@@Base+0x7c34>
   1ce94:	mov	r3, #8
   1ce98:	mov	r2, r6
   1ce9c:	mov	r1, r4
   1cea0:	mov	r0, r5
   1cea4:	bl	18798 <_start@@Base+0x34bc>
   1cea8:	cmp	r4, r0
   1ceac:	mov	r7, r0
   1ceb0:	beq	1cf10 <_start@@Base+0x7c34>
   1ceb4:	str	r8, [sp, #328]	; 0x148
   1ceb8:	add	r8, sp, #328	; 0x148
   1cebc:	mov	r1, r0
   1cec0:	mov	r2, r6
   1cec4:	mov	r0, r5
   1cec8:	mov	r3, r8
   1cecc:	bl	19084 <_start@@Base+0x3da8>
   1ced0:	cmp	r7, r0
   1ced4:	mov	r4, r0
   1ced8:	bne	1cf04 <_start@@Base+0x7c28>
   1cedc:	mov	r1, r0
   1cee0:	ldr	r3, [pc, #424]	; 1d090 <_start@@Base+0x7db4>
   1cee4:	mov	r2, r6
   1cee8:	mov	r0, r5
   1ceec:	str	r8, [sp]
   1cef0:	bl	1970c <_start@@Base+0x4430>
   1cef4:	cmp	r6, r0
   1cef8:	cmpne	r4, r0
   1cefc:	beq	1cf28 <_start@@Base+0x7c4c>
   1cf00:	mov	r4, r0
   1cf04:	ldr	r3, [sp, #328]	; 0x148
   1cf08:	str	r3, [r9, #4]
   1cf0c:	b	1ce68 <_start@@Base+0x7b8c>
   1cf10:	mov	r1, r4
   1cf14:	mov	r2, r6
   1cf18:	mov	r0, r5
   1cf1c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf20:	mov	r4, r0
   1cf24:	b	1ce68 <_start@@Base+0x7b8c>
   1cf28:	mov	r1, r0
   1cf2c:	mov	r3, #33	; 0x21
   1cf30:	mov	r2, r6
   1cf34:	mov	r0, r5
   1cf38:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1cf3c:	b	1cd90 <_start@@Base+0x7ab4>
   1cf40:	mov	r1, r0
   1cf44:	mov	r2, r6
   1cf48:	mov	r0, r5
   1cf4c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf50:	mov	r4, r0
   1cf54:	b	1b9b8 <_start@@Base+0x66dc>
   1cf58:	mov	r2, r6
   1cf5c:	mov	r1, r7
   1cf60:	mov	r0, r5
   1cf64:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf68:	mov	r4, r0
   1cf6c:	b	1b9b8 <_start@@Base+0x66dc>
   1cf70:	mov	r4, r8
   1cf74:	mov	r1, r4
   1cf78:	mov	r2, r6
   1cf7c:	mov	r0, r5
   1cf80:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf84:	mov	r4, r0
   1cf88:	b	1b9b8 <_start@@Base+0x66dc>
   1cf8c:	add	r3, pc, #236	; 0xec
   1cf90:	ldrd	r2, [r3]
   1cf94:	cmp	r1, r3
   1cf98:	cmpeq	r0, r2
   1cf9c:	bne	1d238 <_start@@Base+0x7f5c>
   1cfa0:	add	r7, r7, #16
   1cfa4:	mov	r1, r6
   1cfa8:	mov	r0, r7
   1cfac:	bl	153d0 <_start@@Base+0xf4>
   1cfb0:	lsr	r3, r1, #16
   1cfb4:	mov	r0, #0
   1cfb8:	mov	r2, #0
   1cfbc:	lsl	r3, r3, #16
   1cfc0:	str	r0, [sp, #24]
   1cfc4:	str	r3, [sp, #28]
   1cfc8:	ldr	r3, [pc, #196]	; 1d094 <_start@@Base+0x7db8>
   1cfcc:	ldrd	r8, [sp, #24]
   1cfd0:	cmp	r9, r3
   1cfd4:	cmpeq	r8, r2
   1cfd8:	bne	1d108 <_start@@Base+0x7e2c>
   1cfdc:	mov	r3, #2
   1cfe0:	mov	r2, r6
   1cfe4:	mov	r1, r7
   1cfe8:	mov	r0, r5
   1cfec:	bl	18798 <_start@@Base+0x34bc>
   1cff0:	cmp	r7, r0
   1cff4:	mov	r4, r0
   1cff8:	beq	1d0f0 <_start@@Base+0x7e14>
   1cffc:	ldr	r0, [r5]
   1d000:	bl	21c28 <flatcc_builder_start_offset_vector@@Base>
   1d004:	cmp	r0, #0
   1d008:	bne	1bc20 <_start@@Base+0x6944>
   1d00c:	add	r7, sp, #308	; 0x134
   1d010:	mov	r2, r6
   1d014:	mov	r3, r7
   1d018:	mov	r1, r4
   1d01c:	mov	r0, r5
   1d020:	bl	18f6c <_start@@Base+0x3c90>
   1d024:	ldr	r3, [sp, #308]	; 0x134
   1d028:	mov	r4, r0
   1d02c:	cmp	r3, #0
   1d030:	bne	1d098 <_start@@Base+0x7dbc>
   1d034:	ldr	r0, [r5]
   1d038:	bl	225cc <flatcc_builder_end_offset_vector@@Base>
   1d03c:	cmp	r0, #0
   1d040:	str	r0, [sp, #312]	; 0x138
   1d044:	beq	1bc20 <_start@@Base+0x6944>
   1d048:	mov	r1, #28
   1d04c:	ldr	r0, [r5]
   1d050:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1d054:	cmp	r0, #0
   1d058:	beq	1bc20 <_start@@Base+0x6944>
   1d05c:	ldr	r3, [sp, #312]	; 0x138
   1d060:	str	r3, [r0]
   1d064:	b	1b9b8 <_start@@Base+0x66dc>
   1d068:	svcvs	0x00727465
   1d06c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d070:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1d074:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1d078:	cmnvs	lr, r5, ror #6
   1d07c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1d080:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1d084:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d088:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1d08c:	andeq	r5, r4, r8, lsr #4
   1d090:	andeq	r5, r4, r4, lsr r2
   1d094:	ldrvs	r0, [r2, -r0]!
   1d098:	add	r3, sp, #312	; 0x138
   1d09c:	mov	r1, r4
   1d0a0:	mov	r2, r6
   1d0a4:	mov	r0, r5
   1d0a8:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1d0ac:	ldr	r3, [sp, #312]	; 0x138
   1d0b0:	mov	r4, r0
   1d0b4:	cmp	r3, #0
   1d0b8:	beq	1bc20 <_start@@Base+0x6944>
   1d0bc:	mov	r1, #1
   1d0c0:	ldr	r0, [r5]
   1d0c4:	bl	21838 <flatcc_builder_extend_offset_vector@@Base>
   1d0c8:	cmp	r0, #0
   1d0cc:	beq	1bc20 <_start@@Base+0x6944>
   1d0d0:	ldr	r3, [sp, #312]	; 0x138
   1d0d4:	mov	r2, r6
   1d0d8:	mov	r1, r4
   1d0dc:	str	r3, [r0]
   1d0e0:	mov	r3, r7
   1d0e4:	mov	r0, r5
   1d0e8:	bl	16f10 <_start@@Base+0x1c34>
   1d0ec:	b	1d024 <_start@@Base+0x7d48>
   1d0f0:	mov	r1, r0
   1d0f4:	mov	r2, r6
   1d0f8:	mov	r0, r5
   1d0fc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d100:	mov	r4, r0
   1d104:	b	1b9b8 <_start@@Base+0x66dc>
   1d108:	and	r3, r1, #-16777216	; 0xff000000
   1d10c:	str	r0, [sp, #176]	; 0xb0
   1d110:	str	r3, [sp, #180]	; 0xb4
   1d114:	ldrd	r2, [sp, #176]	; 0xb0
   1d118:	cmp	r3, #1728053248	; 0x67000000
   1d11c:	cmpeq	r2, #0
   1d120:	bne	1d220 <_start@@Base+0x7f44>
   1d124:	mov	r3, #1
   1d128:	mov	r2, r6
   1d12c:	mov	r1, r7
   1d130:	mov	r0, r5
   1d134:	bl	18798 <_start@@Base+0x34bc>
   1d138:	cmp	r7, r0
   1d13c:	mov	r4, r0
   1d140:	beq	1d208 <_start@@Base+0x7f2c>
   1d144:	ldr	r0, [r5]
   1d148:	bl	21c28 <flatcc_builder_start_offset_vector@@Base>
   1d14c:	cmp	r0, #0
   1d150:	bne	1bc20 <_start@@Base+0x6944>
   1d154:	add	r7, sp, #308	; 0x134
   1d158:	mov	r2, r6
   1d15c:	mov	r3, r7
   1d160:	mov	r1, r4
   1d164:	mov	r0, r5
   1d168:	bl	18f6c <_start@@Base+0x3c90>
   1d16c:	ldr	r3, [sp, #308]	; 0x134
   1d170:	mov	r4, r0
   1d174:	cmp	r3, #0
   1d178:	bne	1d1b0 <_start@@Base+0x7ed4>
   1d17c:	ldr	r0, [r5]
   1d180:	bl	225cc <flatcc_builder_end_offset_vector@@Base>
   1d184:	cmp	r0, #0
   1d188:	str	r0, [sp, #312]	; 0x138
   1d18c:	beq	1bc20 <_start@@Base+0x6944>
   1d190:	mov	r1, #10
   1d194:	ldr	r0, [r5]
   1d198:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1d19c:	cmp	r0, #0
   1d1a0:	beq	1bc20 <_start@@Base+0x6944>
   1d1a4:	ldr	r3, [sp, #312]	; 0x138
   1d1a8:	str	r3, [r0]
   1d1ac:	b	1b9b8 <_start@@Base+0x66dc>
   1d1b0:	add	r3, sp, #312	; 0x138
   1d1b4:	mov	r1, r4
   1d1b8:	mov	r2, r6
   1d1bc:	mov	r0, r5
   1d1c0:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1d1c4:	ldr	r3, [sp, #312]	; 0x138
   1d1c8:	mov	r4, r0
   1d1cc:	cmp	r3, #0
   1d1d0:	beq	1bc20 <_start@@Base+0x6944>
   1d1d4:	mov	r1, #1
   1d1d8:	ldr	r0, [r5]
   1d1dc:	bl	21838 <flatcc_builder_extend_offset_vector@@Base>
   1d1e0:	cmp	r0, #0
   1d1e4:	beq	1bc20 <_start@@Base+0x6944>
   1d1e8:	ldr	r3, [sp, #312]	; 0x138
   1d1ec:	mov	r2, r6
   1d1f0:	mov	r1, r4
   1d1f4:	str	r3, [r0]
   1d1f8:	mov	r3, r7
   1d1fc:	mov	r0, r5
   1d200:	bl	16f10 <_start@@Base+0x1c34>
   1d204:	b	1d16c <_start@@Base+0x7e90>
   1d208:	mov	r1, r0
   1d20c:	mov	r2, r6
   1d210:	mov	r0, r5
   1d214:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d218:	mov	r4, r0
   1d21c:	b	1b9b8 <_start@@Base+0x66dc>
   1d220:	mov	r2, r6
   1d224:	mov	r1, r7
   1d228:	mov	r0, r5
   1d22c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d230:	mov	r4, r0
   1d234:	b	1b9b8 <_start@@Base+0x66dc>
   1d238:	add	r3, pc, #968	; 0x3c8
   1d23c:	ldrd	r2, [r3]
   1d240:	cmp	r1, r3
   1d244:	cmpeq	r0, r2
   1d248:	bne	1d390 <_start@@Base+0x80b4>
   1d24c:	add	r7, r7, #16
   1d250:	mov	r1, r6
   1d254:	mov	r0, r7
   1d258:	bl	153d0 <_start@@Base+0xf4>
   1d25c:	mov	r3, #0
   1d260:	str	r3, [sp, #184]	; 0xb8
   1d264:	and	r3, r1, #-16777216	; 0xff000000
   1d268:	str	r3, [sp, #188]	; 0xbc
   1d26c:	ldrd	r2, [sp, #184]	; 0xb8
   1d270:	cmp	r3, #1929379840	; 0x73000000
   1d274:	cmpeq	r2, #0
   1d278:	bne	1d378 <_start@@Base+0x809c>
   1d27c:	mov	r3, #1
   1d280:	mov	r2, r6
   1d284:	mov	r1, r7
   1d288:	mov	r0, r5
   1d28c:	bl	18798 <_start@@Base+0x34bc>
   1d290:	cmp	r7, r0
   1d294:	mov	r4, r0
   1d298:	beq	1d360 <_start@@Base+0x8084>
   1d29c:	ldr	r0, [r5]
   1d2a0:	bl	21c28 <flatcc_builder_start_offset_vector@@Base>
   1d2a4:	cmp	r0, #0
   1d2a8:	bne	1bc20 <_start@@Base+0x6944>
   1d2ac:	add	r7, sp, #308	; 0x134
   1d2b0:	mov	r2, r6
   1d2b4:	mov	r3, r7
   1d2b8:	mov	r1, r4
   1d2bc:	mov	r0, r5
   1d2c0:	bl	18f6c <_start@@Base+0x3c90>
   1d2c4:	ldr	r3, [sp, #308]	; 0x134
   1d2c8:	mov	r4, r0
   1d2cc:	cmp	r3, #0
   1d2d0:	bne	1d308 <_start@@Base+0x802c>
   1d2d4:	ldr	r0, [r5]
   1d2d8:	bl	225cc <flatcc_builder_end_offset_vector@@Base>
   1d2dc:	cmp	r0, #0
   1d2e0:	str	r0, [sp, #312]	; 0x138
   1d2e4:	beq	1bc20 <_start@@Base+0x6944>
   1d2e8:	mov	r1, #11
   1d2ec:	ldr	r0, [r5]
   1d2f0:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1d2f4:	cmp	r0, #0
   1d2f8:	beq	1bc20 <_start@@Base+0x6944>
   1d2fc:	ldr	r3, [sp, #312]	; 0x138
   1d300:	str	r3, [r0]
   1d304:	b	1b9b8 <_start@@Base+0x66dc>
   1d308:	add	r3, sp, #312	; 0x138
   1d30c:	mov	r1, r4
   1d310:	mov	r2, r6
   1d314:	mov	r0, r5
   1d318:	bl	1b818 <_start@@Base+0x653c>
   1d31c:	ldr	r3, [sp, #312]	; 0x138
   1d320:	mov	r4, r0
   1d324:	cmp	r3, #0
   1d328:	beq	1bc20 <_start@@Base+0x6944>
   1d32c:	mov	r1, #1
   1d330:	ldr	r0, [r5]
   1d334:	bl	21838 <flatcc_builder_extend_offset_vector@@Base>
   1d338:	cmp	r0, #0
   1d33c:	beq	1bc20 <_start@@Base+0x6944>
   1d340:	ldr	r3, [sp, #312]	; 0x138
   1d344:	mov	r2, r6
   1d348:	mov	r1, r4
   1d34c:	str	r3, [r0]
   1d350:	mov	r3, r7
   1d354:	mov	r0, r5
   1d358:	bl	16f10 <_start@@Base+0x1c34>
   1d35c:	b	1d2c4 <_start@@Base+0x7fe8>
   1d360:	mov	r1, r0
   1d364:	mov	r2, r6
   1d368:	mov	r0, r5
   1d36c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d370:	mov	r4, r0
   1d374:	b	1b9b8 <_start@@Base+0x66dc>
   1d378:	mov	r2, r6
   1d37c:	mov	r1, r7
   1d380:	mov	r0, r5
   1d384:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d388:	mov	r4, r0
   1d38c:	b	1b9b8 <_start@@Base+0x66dc>
   1d390:	mov	r2, r6
   1d394:	mov	r1, r8
   1d398:	mov	r0, r5
   1d39c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d3a0:	mov	r4, r0
   1d3a4:	b	1b9b8 <_start@@Base+0x66dc>
   1d3a8:	add	r3, pc, #608	; 0x260
   1d3ac:	ldrd	r2, [r3]
   1d3b0:	cmp	r1, r3
   1d3b4:	cmpeq	r0, r2
   1d3b8:	bhi	1d7f4 <_start@@Base+0x8518>
   1d3bc:	add	r3, pc, #596	; 0x254
   1d3c0:	ldrd	r2, [r3]
   1d3c4:	cmp	r1, r3
   1d3c8:	cmpeq	r0, r2
   1d3cc:	bne	1d6fc <_start@@Base+0x8420>
   1d3d0:	add	r8, r7, #8
   1d3d4:	ldr	r7, [pc, #604]	; 1d638 <_start@@Base+0x835c>
   1d3d8:	mov	r1, r6
   1d3dc:	mov	r0, r8
   1d3e0:	mov	r9, #0
   1d3e4:	bl	153d0 <_start@@Base+0xf4>
   1d3e8:	str	r9, [sp, #192]	; 0xc0
   1d3ec:	mov	r2, #0
   1d3f0:	and	r3, r1, r7
   1d3f4:	str	r3, [sp, #196]	; 0xc4
   1d3f8:	ldr	r3, [pc, #572]	; 1d63c <_start@@Base+0x8360>
   1d3fc:	ldrd	r0, [sp, #192]	; 0xc0
   1d400:	cmp	r1, r3
   1d404:	cmpeq	r0, r2
   1d408:	bne	1d6e4 <_start@@Base+0x8408>
   1d40c:	mov	r3, #2
   1d410:	mov	r2, r6
   1d414:	mov	r1, r8
   1d418:	mov	r0, r5
   1d41c:	bl	18798 <_start@@Base+0x34bc>
   1d420:	cmp	r8, r0
   1d424:	mov	r4, r0
   1d428:	beq	1d6cc <_start@@Base+0x83f0>
   1d42c:	mov	r1, #3
   1d430:	ldr	r0, [r5]
   1d434:	str	r9, [sp, #312]	; 0x138
   1d438:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1d43c:	cmp	r0, r9
   1d440:	bne	1d490 <_start@@Base+0x81b4>
   1d444:	add	r9, pc, #468	; 0x1d4
   1d448:	ldrd	r8, [r9]
   1d44c:	mov	r1, r4
   1d450:	add	r3, sp, #324	; 0x144
   1d454:	mov	r2, r6
   1d458:	mov	r0, r5
   1d45c:	bl	18644 <_start@@Base+0x3368>
   1d460:	mov	r4, r0
   1d464:	ldr	r3, [sp, #324]	; 0x144
   1d468:	cmp	r3, #0
   1d46c:	bne	1d4d4 <_start@@Base+0x81f8>
   1d470:	ldr	r3, [r5, #24]
   1d474:	cmp	r3, #0
   1d478:	bne	1d490 <_start@@Base+0x81b4>
   1d47c:	ldr	r0, [r5]
   1d480:	bl	22310 <flatcc_builder_end_table@@Base>
   1d484:	cmp	r0, #0
   1d488:	str	r0, [sp, #312]	; 0x138
   1d48c:	bne	1d4a8 <_start@@Base+0x81cc>
   1d490:	mov	r1, r4
   1d494:	mov	r3, #33	; 0x21
   1d498:	mov	r2, r6
   1d49c:	mov	r0, r5
   1d4a0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1d4a4:	mov	r4, r0
   1d4a8:	ldr	r3, [sp, #312]	; 0x138
   1d4ac:	cmp	r3, #0
   1d4b0:	beq	1bc20 <_start@@Base+0x6944>
   1d4b4:	mov	r1, #35	; 0x23
   1d4b8:	ldr	r0, [r5]
   1d4bc:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1d4c0:	cmp	r0, #0
   1d4c4:	beq	1bc20 <_start@@Base+0x6944>
   1d4c8:	ldr	r3, [sp, #312]	; 0x138
   1d4cc:	str	r3, [r0]
   1d4d0:	b	1b9b8 <_start@@Base+0x66dc>
   1d4d4:	mov	r2, r6
   1d4d8:	mov	r1, r4
   1d4dc:	mov	r0, r5
   1d4e0:	bl	17a14 <_start@@Base+0x2738>
   1d4e4:	mov	r1, r6
   1d4e8:	mov	r4, r0
   1d4ec:	bl	153d0 <_start@@Base+0xf4>
   1d4f0:	add	r3, pc, #304	; 0x130
   1d4f4:	ldrd	r2, [r3]
   1d4f8:	cmp	r1, r3
   1d4fc:	cmpeq	r0, r2
   1d500:	bhi	1d59c <_start@@Base+0x82c0>
   1d504:	mov	sl, #0
   1d508:	str	sl, [sp, #200]	; 0xc8
   1d50c:	str	r1, [sp, #204]	; 0xcc
   1d510:	ldrd	r2, [sp, #200]	; 0xc8
   1d514:	cmp	r3, r9
   1d518:	cmpeq	r2, r8
   1d51c:	bne	1d6b4 <_start@@Base+0x83d8>
   1d520:	mov	r1, r4
   1d524:	mov	r3, #4
   1d528:	mov	r2, r6
   1d52c:	mov	r0, r5
   1d530:	bl	18798 <_start@@Base+0x34bc>
   1d534:	cmp	r4, r0
   1d538:	mov	r1, r0
   1d53c:	beq	1d6b4 <_start@@Base+0x83d8>
   1d540:	add	r3, sp, #328	; 0x148
   1d544:	mov	r2, r6
   1d548:	str	sl, [sp]
   1d54c:	mov	r0, r5
   1d550:	bl	26568 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d554:	ldr	r3, [sp, #328]	; 0x148
   1d558:	mov	r4, r0
   1d55c:	cmp	r3, sl
   1d560:	beq	1d490 <_start@@Base+0x81b4>
   1d564:	mov	r1, sl
   1d568:	ldr	r0, [r5]
   1d56c:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1d570:	cmp	r0, #0
   1d574:	beq	1d490 <_start@@Base+0x81b4>
   1d578:	ldr	r3, [sp, #328]	; 0x148
   1d57c:	str	r3, [r0]
   1d580:	mov	r1, r4
   1d584:	add	r3, sp, #324	; 0x144
   1d588:	mov	r2, r6
   1d58c:	mov	r0, r5
   1d590:	bl	16fc8 <_start@@Base+0x1cec>
   1d594:	mov	r4, r0
   1d598:	b	1d464 <_start@@Base+0x8188>
   1d59c:	bic	r3, r0, #255	; 0xff
   1d5a0:	add	fp, pc, #136	; 0x88
   1d5a4:	ldrd	sl, [fp]
   1d5a8:	str	r3, [sp, #208]	; 0xd0
   1d5ac:	str	r1, [sp, #212]	; 0xd4
   1d5b0:	ldrd	r2, [sp, #208]	; 0xd0
   1d5b4:	cmp	r3, fp
   1d5b8:	cmpeq	r2, sl
   1d5bc:	bne	1d640 <_start@@Base+0x8364>
   1d5c0:	mov	r1, r4
   1d5c4:	mov	r3, #7
   1d5c8:	mov	r2, r6
   1d5cc:	mov	r0, r5
   1d5d0:	bl	18798 <_start@@Base+0x34bc>
   1d5d4:	cmp	r4, r0
   1d5d8:	mov	r1, r0
   1d5dc:	beq	1d6b4 <_start@@Base+0x83d8>
   1d5e0:	mov	sl, #1
   1d5e4:	add	r3, sp, #328	; 0x148
   1d5e8:	mov	r2, r6
   1d5ec:	mov	r0, r5
   1d5f0:	str	sl, [sp]
   1d5f4:	bl	26568 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d5f8:	ldr	r3, [sp, #328]	; 0x148
   1d5fc:	mov	r4, r0
   1d600:	cmp	r3, #0
   1d604:	b	1d560 <_start@@Base+0x8284>
   1d608:	cmnvs	r2, r5, ror #24
   1d60c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d610:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1d614:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d618:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1d61c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d620:	andeq	r0, r0, r0
   1d624:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1d628:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1d62c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d630:	cmnvs	r4, r0, lsl #2
   1d634:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1d638:			; <UNDEFINED> instruction: 0xffff0000
   1d63c:	ldrtcc	r0, [r4], -r0
   1d640:	and	r3, r0, r7
   1d644:	str	r3, [sp, #216]	; 0xd8
   1d648:	str	r1, [sp, #220]	; 0xdc
   1d64c:	add	r1, pc, #996	; 0x3e4
   1d650:	ldrd	r0, [r1]
   1d654:	ldrd	r2, [sp, #216]	; 0xd8
   1d658:	cmp	r3, r1
   1d65c:	cmpeq	r2, r0
   1d660:	bne	1d6b4 <_start@@Base+0x83d8>
   1d664:	mov	r1, r4
   1d668:	mov	r3, #6
   1d66c:	mov	r2, r6
   1d670:	mov	r0, r5
   1d674:	bl	18798 <_start@@Base+0x34bc>
   1d678:	cmp	r4, r0
   1d67c:	mov	r1, r0
   1d680:	beq	1d6b4 <_start@@Base+0x83d8>
   1d684:	mov	r3, #0
   1d688:	mov	r2, r6
   1d68c:	mov	r0, r5
   1d690:	str	r3, [sp]
   1d694:	add	r3, sp, #328	; 0x148
   1d698:	bl	26568 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d69c:	ldr	r3, [sp, #328]	; 0x148
   1d6a0:	mov	r4, r0
   1d6a4:	cmp	r3, #0
   1d6a8:	beq	1d490 <_start@@Base+0x81b4>
   1d6ac:	mov	r1, #2
   1d6b0:	b	1d568 <_start@@Base+0x828c>
   1d6b4:	mov	r1, r4
   1d6b8:	mov	r2, r6
   1d6bc:	mov	r0, r5
   1d6c0:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6c4:	mov	r4, r0
   1d6c8:	b	1d580 <_start@@Base+0x82a4>
   1d6cc:	mov	r1, r0
   1d6d0:	mov	r2, r6
   1d6d4:	mov	r0, r5
   1d6d8:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6dc:	mov	r4, r0
   1d6e0:	b	1b9b8 <_start@@Base+0x66dc>
   1d6e4:	mov	r2, r6
   1d6e8:	mov	r1, r8
   1d6ec:	mov	r0, r5
   1d6f0:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6f4:	mov	r4, r0
   1d6f8:	b	1b9b8 <_start@@Base+0x66dc>
   1d6fc:	add	r3, pc, #828	; 0x33c
   1d700:	ldrd	r2, [r3]
   1d704:	cmp	r1, r3
   1d708:	cmpeq	r0, r2
   1d70c:	bne	1d7dc <_start@@Base+0x8500>
   1d710:	mov	r3, #8
   1d714:	mov	r2, r6
   1d718:	mov	r1, r7
   1d71c:	mov	r0, r5
   1d720:	bl	18798 <_start@@Base+0x34bc>
   1d724:	cmp	r7, r0
   1d728:	mov	r8, r0
   1d72c:	beq	1d7c4 <_start@@Base+0x84e8>
   1d730:	mov	r3, #0
   1d734:	add	r7, sp, #328	; 0x148
   1d738:	mov	r1, r0
   1d73c:	mov	r2, r6
   1d740:	mov	r0, r5
   1d744:	strb	r3, [sp, #328]	; 0x148
   1d748:	mov	r3, r7
   1d74c:	bl	19250 <_start@@Base+0x3f74>
   1d750:	cmp	r8, r0
   1d754:	mov	r4, r0
   1d758:	bne	1d784 <_start@@Base+0x84a8>
   1d75c:	mov	r1, r0
   1d760:	ldr	r3, [pc, #760]	; 1da60 <_start@@Base+0x8784>
   1d764:	mov	r2, r6
   1d768:	mov	r0, r5
   1d76c:	str	r7, [sp]
   1d770:	bl	17a9c <_start@@Base+0x27c0>
   1d774:	cmp	r6, r0
   1d778:	cmpne	r4, r0
   1d77c:	mov	r4, r0
   1d780:	beq	1bc20 <_start@@Base+0x6944>
   1d784:	ldrb	r3, [sp, #328]	; 0x148
   1d788:	cmp	r3, #1
   1d78c:	bne	1d79c <_start@@Base+0x84c0>
   1d790:	ldr	r3, [r5, #8]
   1d794:	tst	r3, #2
   1d798:	beq	1b9b8 <_start@@Base+0x66dc>
   1d79c:	mov	r3, #1
   1d7a0:	mov	r1, #15
   1d7a4:	ldr	r0, [r5]
   1d7a8:	mov	r2, r3
   1d7ac:	bl	22c6c <flatcc_builder_table_add@@Base>
   1d7b0:	cmp	r0, #0
   1d7b4:	beq	1bc20 <_start@@Base+0x6944>
   1d7b8:	ldrb	r3, [sp, #328]	; 0x148
   1d7bc:	strb	r3, [r0]
   1d7c0:	b	1b9b8 <_start@@Base+0x66dc>
   1d7c4:	mov	r2, r6
   1d7c8:	mov	r1, r7
   1d7cc:	mov	r0, r5
   1d7d0:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7d4:	mov	r4, r0
   1d7d8:	b	1b9b8 <_start@@Base+0x66dc>
   1d7dc:	mov	r2, r6
   1d7e0:	mov	r1, r7
   1d7e4:	mov	r0, r5
   1d7e8:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7ec:	mov	r4, r0
   1d7f0:	b	1b9b8 <_start@@Base+0x66dc>
   1d7f4:	add	r3, pc, #588	; 0x24c
   1d7f8:	ldrd	r2, [r3]
   1d7fc:	cmp	r1, r3
   1d800:	cmpeq	r0, r2
   1d804:	bhi	1dc40 <_start@@Base+0x8964>
   1d808:	add	r3, pc, #576	; 0x240
   1d80c:	ldrd	r2, [r3]
   1d810:	cmp	r1, r3
   1d814:	cmpeq	r0, r2
   1d818:	bne	1dc28 <_start@@Base+0x894c>
   1d81c:	add	r7, r7, #8
   1d820:	mov	r1, r6
   1d824:	mov	r0, r7
   1d828:	mov	r8, #0
   1d82c:	bl	153d0 <_start@@Base+0xf4>
   1d830:	and	r3, r1, #-16777216	; 0xff000000
   1d834:	str	r8, [sp, #224]	; 0xe0
   1d838:	str	r3, [sp, #228]	; 0xe4
   1d83c:	ldrd	r2, [sp, #224]	; 0xe0
   1d840:	cmp	r3, #2030043136	; 0x79000000
   1d844:	cmpeq	r2, #0
   1d848:	bne	1dc10 <_start@@Base+0x8934>
   1d84c:	mov	r3, #1
   1d850:	mov	r2, r6
   1d854:	mov	r1, r7
   1d858:	mov	r0, r5
   1d85c:	bl	18798 <_start@@Base+0x34bc>
   1d860:	cmp	r7, r0
   1d864:	mov	r4, r0
   1d868:	beq	1dbf8 <_start@@Base+0x891c>
   1d86c:	mov	r1, #3
   1d870:	ldr	r0, [r5]
   1d874:	str	r8, [sp, #312]	; 0x138
   1d878:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1d87c:	cmp	r0, r8
   1d880:	bne	1d8d0 <_start@@Base+0x85f4>
   1d884:	add	r9, pc, #460	; 0x1cc
   1d888:	ldrd	r8, [r9]
   1d88c:	mov	r1, r4
   1d890:	add	r3, sp, #320	; 0x140
   1d894:	mov	r2, r6
   1d898:	mov	r0, r5
   1d89c:	bl	18644 <_start@@Base+0x3368>
   1d8a0:	mov	r4, r0
   1d8a4:	ldr	r3, [sp, #320]	; 0x140
   1d8a8:	cmp	r3, #0
   1d8ac:	bne	1d914 <_start@@Base+0x8638>
   1d8b0:	ldr	r3, [r5, #24]
   1d8b4:	cmp	r3, #0
   1d8b8:	bne	1d8d0 <_start@@Base+0x85f4>
   1d8bc:	ldr	r0, [r5]
   1d8c0:	bl	22310 <flatcc_builder_end_table@@Base>
   1d8c4:	cmp	r0, #0
   1d8c8:	str	r0, [sp, #312]	; 0x138
   1d8cc:	bne	1d8e8 <_start@@Base+0x860c>
   1d8d0:	mov	r1, r4
   1d8d4:	mov	r3, #33	; 0x21
   1d8d8:	mov	r2, r6
   1d8dc:	mov	r0, r5
   1d8e0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1d8e4:	mov	r4, r0
   1d8e8:	ldr	r3, [sp, #312]	; 0x138
   1d8ec:	cmp	r3, #0
   1d8f0:	beq	1bc20 <_start@@Base+0x6944>
   1d8f4:	mov	r1, #14
   1d8f8:	ldr	r0, [r5]
   1d8fc:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1d900:	cmp	r0, #0
   1d904:	beq	1bc20 <_start@@Base+0x6944>
   1d908:	ldr	r3, [sp, #312]	; 0x138
   1d90c:	str	r3, [r0]
   1d910:	b	1b9b8 <_start@@Base+0x66dc>
   1d914:	mov	r2, r6
   1d918:	mov	r1, r4
   1d91c:	mov	r0, r5
   1d920:	bl	17a14 <_start@@Base+0x2738>
   1d924:	mov	r1, r6
   1d928:	mov	r4, r0
   1d92c:	bl	153d0 <_start@@Base+0xf4>
   1d930:	ldr	r3, [pc, #300]	; 1da64 <_start@@Base+0x8788>
   1d934:	mvn	r2, #0
   1d938:	cmp	r1, r3
   1d93c:	cmpeq	r0, r2
   1d940:	bhi	1da6c <_start@@Base+0x8790>
   1d944:	and	r3, r0, #-16777216	; 0xff000000
   1d948:	str	r3, [sp, #232]	; 0xe8
   1d94c:	str	r1, [sp, #236]	; 0xec
   1d950:	ldrd	r2, [sp, #232]	; 0xe8
   1d954:	cmp	r3, r9
   1d958:	cmpeq	r2, r8
   1d95c:	bne	1dbe0 <_start@@Base+0x8904>
   1d960:	mov	r3, #5
   1d964:	mov	r2, r6
   1d968:	mov	r1, r4
   1d96c:	mov	r0, r5
   1d970:	bl	18798 <_start@@Base+0x34bc>
   1d974:	cmp	r4, r0
   1d978:	mov	r7, r0
   1d97c:	beq	1dbe0 <_start@@Base+0x8904>
   1d980:	add	r2, sp, #328	; 0x148
   1d984:	mov	r3, #0
   1d988:	mov	r1, r0
   1d98c:	mov	sl, r2
   1d990:	mov	r0, r5
   1d994:	strh	r3, [r2]
   1d998:	mov	r3, r2
   1d99c:	mov	r2, r6
   1d9a0:	bl	19120 <_start@@Base+0x3e44>
   1d9a4:	cmp	r7, r0
   1d9a8:	mov	r4, r0
   1d9ac:	bne	1d9d8 <_start@@Base+0x86fc>
   1d9b0:	mov	r1, r0
   1d9b4:	ldr	r3, [pc, #172]	; 1da68 <_start@@Base+0x878c>
   1d9b8:	mov	r2, r6
   1d9bc:	mov	r0, r5
   1d9c0:	str	sl, [sp]
   1d9c4:	bl	19820 <_start@@Base+0x4544>
   1d9c8:	cmp	r6, r0
   1d9cc:	cmpne	r4, r0
   1d9d0:	mov	r4, r0
   1d9d4:	beq	1d8d0 <_start@@Base+0x85f4>
   1d9d8:	add	r3, sp, #328	; 0x148
   1d9dc:	ldrh	r3, [r3]
   1d9e0:	cmp	r3, #0
   1d9e4:	bne	1d9f4 <_start@@Base+0x8718>
   1d9e8:	ldr	r3, [r5, #8]
   1d9ec:	tst	r3, #2
   1d9f0:	beq	1da1c <_start@@Base+0x8740>
   1d9f4:	mov	r3, #2
   1d9f8:	ldr	r0, [r5]
   1d9fc:	mov	r2, r3
   1da00:	mov	r1, r3
   1da04:	bl	22c6c <flatcc_builder_table_add@@Base>
   1da08:	cmp	r0, #0
   1da0c:	beq	1d8d0 <_start@@Base+0x85f4>
   1da10:	add	r3, sp, #328	; 0x148
   1da14:	ldrh	r3, [r3]
   1da18:	strh	r3, [r0]
   1da1c:	mov	r1, r4
   1da20:	add	r3, sp, #320	; 0x140
   1da24:	mov	r2, r6
   1da28:	mov	r0, r5
   1da2c:	bl	16fc8 <_start@@Base+0x1cec>
   1da30:	mov	r4, r0
   1da34:	b	1d8a4 <_start@@Base+0x85c8>
   1da38:	strbvs	r0, [r4, #-0]!
   1da3c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1da40:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1da44:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1da48:	ldrbvs	pc, [pc, #4095]!	; 1ea4f <_start@@Base+0x9773>	; <UNPREDICTABLE>
   1da4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1da50:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1da54:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1da58:	strvc	r0, [r0], #-0
   1da5c:	cmnvs	pc, #461373440	; 0x1b800000
   1da60:	andeq	r5, r4, r0, asr #4
   1da64:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1da68:	andeq	r5, r4, ip, asr #4
   1da6c:	bic	r3, r1, #255	; 0xff
   1da70:	mov	r7, #0
   1da74:	add	fp, pc, #916	; 0x394
   1da78:	ldrd	sl, [fp]
   1da7c:	str	r7, [sp, #240]	; 0xf0
   1da80:	str	r3, [sp, #244]	; 0xf4
   1da84:	ldrd	r2, [sp, #240]	; 0xf0
   1da88:	cmp	r3, fp
   1da8c:	cmpeq	r2, sl
   1da90:	bne	1db58 <_start@@Base+0x887c>
   1da94:	mov	r3, #3
   1da98:	mov	r2, r6
   1da9c:	mov	r1, r4
   1daa0:	mov	r0, r5
   1daa4:	bl	18798 <_start@@Base+0x34bc>
   1daa8:	cmp	r4, r0
   1daac:	mov	r7, r0
   1dab0:	beq	1dbe0 <_start@@Base+0x8904>
   1dab4:	add	r1, sp, #328	; 0x148
   1dab8:	mov	r2, #0
   1dabc:	mov	r3, #0
   1dac0:	mov	sl, r1
   1dac4:	mov	r0, r5
   1dac8:	strd	r2, [r1]
   1dacc:	mov	r3, r1
   1dad0:	mov	r2, r6
   1dad4:	mov	r1, r7
   1dad8:	bl	17968 <_start@@Base+0x268c>
   1dadc:	cmp	r7, r0
   1dae0:	mov	r4, r0
   1dae4:	bne	1db10 <_start@@Base+0x8834>
   1dae8:	mov	r1, r0
   1daec:	ldr	r3, [pc, #820]	; 1de28 <_start@@Base+0x8b4c>
   1daf0:	mov	r2, r6
   1daf4:	mov	r0, r5
   1daf8:	str	sl, [sp]
   1dafc:	bl	1a4a0 <_start@@Base+0x51c4>
   1db00:	cmp	r6, r0
   1db04:	cmpne	r4, r0
   1db08:	mov	r4, r0
   1db0c:	beq	1d8d0 <_start@@Base+0x85f4>
   1db10:	add	r3, sp, #328	; 0x148
   1db14:	ldrd	r2, [r3]
   1db18:	orrs	r3, r2, r3
   1db1c:	bne	1db2c <_start@@Base+0x8850>
   1db20:	ldr	r3, [r5, #8]
   1db24:	tst	r3, #2
   1db28:	beq	1da1c <_start@@Base+0x8740>
   1db2c:	mov	r3, #8
   1db30:	mov	r1, #1
   1db34:	ldr	r0, [r5]
   1db38:	mov	r2, r3
   1db3c:	bl	22c6c <flatcc_builder_table_add@@Base>
   1db40:	cmp	r0, #0
   1db44:	beq	1d8d0 <_start@@Base+0x85f4>
   1db48:	add	r3, sp, #328	; 0x148
   1db4c:	ldrd	r2, [r3]
   1db50:	strd	r2, [r0]
   1db54:	b	1da1c <_start@@Base+0x8740>
   1db58:	lsr	r3, r1, #16
   1db5c:	str	r7, [sp, #32]
   1db60:	mov	r2, #0
   1db64:	lsl	r3, r3, #16
   1db68:	str	r3, [sp, #36]	; 0x24
   1db6c:	ldr	r3, [pc, #696]	; 1de2c <_start@@Base+0x8b50>
   1db70:	ldrd	r0, [sp, #32]
   1db74:	cmp	r1, r3
   1db78:	cmpeq	r0, r2
   1db7c:	bne	1dbe0 <_start@@Base+0x8904>
   1db80:	mov	r1, r4
   1db84:	mov	r3, #2
   1db88:	mov	r2, r6
   1db8c:	mov	r0, r5
   1db90:	bl	18798 <_start@@Base+0x34bc>
   1db94:	cmp	r4, r0
   1db98:	mov	r1, r0
   1db9c:	beq	1dbe0 <_start@@Base+0x8904>
   1dba0:	add	r3, sp, #324	; 0x144
   1dba4:	mov	r2, r6
   1dba8:	mov	r0, r5
   1dbac:	bl	26890 <flatcc_json_parser_build_string@@Base>
   1dbb0:	ldr	r3, [sp, #324]	; 0x144
   1dbb4:	mov	r4, r0
   1dbb8:	cmp	r3, #0
   1dbbc:	beq	1d8d0 <_start@@Base+0x85f4>
   1dbc0:	mov	r1, r7
   1dbc4:	ldr	r0, [r5]
   1dbc8:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1dbcc:	cmp	r0, #0
   1dbd0:	beq	1d8d0 <_start@@Base+0x85f4>
   1dbd4:	ldr	r3, [sp, #324]	; 0x144
   1dbd8:	str	r3, [r0]
   1dbdc:	b	1da1c <_start@@Base+0x8740>
   1dbe0:	mov	r1, r4
   1dbe4:	mov	r2, r6
   1dbe8:	mov	r0, r5
   1dbec:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1dbf0:	mov	r4, r0
   1dbf4:	b	1da1c <_start@@Base+0x8740>
   1dbf8:	mov	r1, r0
   1dbfc:	mov	r2, r6
   1dc00:	mov	r0, r5
   1dc04:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc08:	mov	r4, r0
   1dc0c:	b	1b9b8 <_start@@Base+0x66dc>
   1dc10:	mov	r2, r6
   1dc14:	mov	r1, r7
   1dc18:	mov	r0, r5
   1dc1c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc20:	mov	r4, r0
   1dc24:	b	1b9b8 <_start@@Base+0x66dc>
   1dc28:	mov	r2, r6
   1dc2c:	mov	r1, r7
   1dc30:	mov	r0, r5
   1dc34:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc38:	mov	r4, r0
   1dc3c:	b	1b9b8 <_start@@Base+0x66dc>
   1dc40:	lsr	r3, r0, #16
   1dc44:	str	r1, [sp, #44]	; 0x2c
   1dc48:	lsl	r3, r3, #16
   1dc4c:	str	r3, [sp, #40]	; 0x28
   1dc50:	add	r3, pc, #448	; 0x1c0
   1dc54:	ldrd	r2, [r3]
   1dc58:	ldrd	r0, [sp, #40]	; 0x28
   1dc5c:	cmp	r1, r3
   1dc60:	cmpeq	r0, r2
   1dc64:	bne	1dd3c <_start@@Base+0x8a60>
   1dc68:	mov	r3, #6
   1dc6c:	mov	r2, r6
   1dc70:	mov	r1, r7
   1dc74:	mov	r0, r5
   1dc78:	bl	18798 <_start@@Base+0x34bc>
   1dc7c:	cmp	r7, r0
   1dc80:	mov	r8, r0
   1dc84:	beq	1dd24 <_start@@Base+0x8a48>
   1dc88:	mov	r3, #0
   1dc8c:	add	r7, sp, #328	; 0x148
   1dc90:	mov	r1, r0
   1dc94:	mov	r2, r6
   1dc98:	mov	r0, r5
   1dc9c:	str	r3, [sp, #328]	; 0x148
   1dca0:	mov	r3, r7
   1dca4:	bl	25da0 <flatcc_json_parser_float@@Base>
   1dca8:	cmp	r8, r0
   1dcac:	mov	r4, r0
   1dcb0:	bne	1dcdc <_start@@Base+0x8a00>
   1dcb4:	mov	r1, r0
   1dcb8:	ldr	r3, [pc, #368]	; 1de30 <_start@@Base+0x8b54>
   1dcbc:	mov	r2, r6
   1dcc0:	mov	r0, r5
   1dcc4:	str	r7, [sp]
   1dcc8:	bl	17b9c <_start@@Base+0x28c0>
   1dccc:	cmp	r6, r0
   1dcd0:	cmpne	r4, r0
   1dcd4:	mov	r4, r0
   1dcd8:	beq	1bc20 <_start@@Base+0x6944>
   1dcdc:	vldr	s15, [pc, #316]	; 1de20 <_start@@Base+0x8b44>
   1dce0:	vldr	s14, [sp, #328]	; 0x148
   1dce4:	vcmp.f32	s14, s15
   1dce8:	vmrs	APSR_nzcv, fpscr
   1dcec:	bne	1dcfc <_start@@Base+0x8a20>
   1dcf0:	ldr	r3, [r5, #8]
   1dcf4:	tst	r3, #2
   1dcf8:	beq	1b9b8 <_start@@Base+0x66dc>
   1dcfc:	mov	r3, #4
   1dd00:	mov	r1, #26
   1dd04:	ldr	r0, [r5]
   1dd08:	mov	r2, r3
   1dd0c:	bl	22c6c <flatcc_builder_table_add@@Base>
   1dd10:	cmp	r0, #0
   1dd14:	beq	1bc20 <_start@@Base+0x6944>
   1dd18:	ldr	r3, [sp, #328]	; 0x148
   1dd1c:	str	r3, [r0]
   1dd20:	b	1b9b8 <_start@@Base+0x66dc>
   1dd24:	mov	r2, r6
   1dd28:	mov	r1, r7
   1dd2c:	mov	r0, r5
   1dd30:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1dd34:	mov	r4, r0
   1dd38:	b	1b9b8 <_start@@Base+0x66dc>
   1dd3c:	mov	r3, #5
   1dd40:	mov	r2, r6
   1dd44:	mov	r1, r7
   1dd48:	mov	r0, r5
   1dd4c:	bl	18798 <_start@@Base+0x34bc>
   1dd50:	cmp	r7, r0
   1dd54:	mov	r8, r0
   1dd58:	beq	1ddf8 <_start@@Base+0x8b1c>
   1dd5c:	mov	r3, #0
   1dd60:	add	r7, sp, #328	; 0x148
   1dd64:	mov	r1, r0
   1dd68:	mov	r2, r6
   1dd6c:	mov	r0, r5
   1dd70:	str	r3, [sp, #328]	; 0x148
   1dd74:	mov	r3, r7
   1dd78:	bl	25da0 <flatcc_json_parser_float@@Base>
   1dd7c:	cmp	r8, r0
   1dd80:	mov	r4, r0
   1dd84:	bne	1ddb0 <_start@@Base+0x8ad4>
   1dd88:	mov	r1, r0
   1dd8c:	ldr	r3, [pc, #160]	; 1de34 <_start@@Base+0x8b58>
   1dd90:	mov	r2, r6
   1dd94:	mov	r0, r5
   1dd98:	str	r7, [sp]
   1dd9c:	bl	17b9c <_start@@Base+0x28c0>
   1dda0:	cmp	r6, r0
   1dda4:	cmpne	r4, r0
   1dda8:	mov	r4, r0
   1ddac:	beq	1bc20 <_start@@Base+0x6944>
   1ddb0:	vldr	s15, [pc, #108]	; 1de24 <_start@@Base+0x8b48>
   1ddb4:	vldr	s14, [sp, #328]	; 0x148
   1ddb8:	vcmp.f32	s14, s15
   1ddbc:	vmrs	APSR_nzcv, fpscr
   1ddc0:	bne	1ddd0 <_start@@Base+0x8af4>
   1ddc4:	ldr	r3, [r5, #8]
   1ddc8:	tst	r3, #2
   1ddcc:	beq	1b9b8 <_start@@Base+0x66dc>
   1ddd0:	mov	r3, #4
   1ddd4:	mov	r1, #25
   1ddd8:	ldr	r0, [r5]
   1dddc:	mov	r2, r3
   1dde0:	bl	22c6c <flatcc_builder_table_add@@Base>
   1dde4:	cmp	r0, #0
   1dde8:	beq	1bc20 <_start@@Base+0x6944>
   1ddec:	ldr	r3, [sp, #328]	; 0x148
   1ddf0:	str	r3, [r0]
   1ddf4:	b	1b9b8 <_start@@Base+0x66dc>
   1ddf8:	mov	r2, r6
   1ddfc:	mov	r1, r7
   1de00:	mov	r0, r5
   1de04:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1de08:	mov	r4, r0
   1de0c:	b	1b9b8 <_start@@Base+0x66dc>
   1de10:	andeq	r0, r0, r0
   1de14:	strbtvc	r6, [r1], -r0, lsl #24
   1de18:	ldrtvs	r0, [r2], -r0
   1de1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1de20:	submi	r0, r0, r0
   1de24:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1de28:	andeq	r5, r4, r8, asr r2
   1de2c:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1de30:	andeq	r5, r4, r4, ror #4
   1de34:	andeq	r5, r4, r0, ror r2
   1de38:	add	r3, pc, #840	; 0x348
   1de3c:	ldrd	r2, [r3]
   1de40:	cmp	r1, r3
   1de44:	cmpeq	r0, r2
   1de48:	bhi	1df5c <_start@@Base+0x8c80>
   1de4c:	lsr	r3, r0, #16
   1de50:	str	r1, [sp, #52]	; 0x34
   1de54:	lsl	r3, r3, #16
   1de58:	str	r3, [sp, #48]	; 0x30
   1de5c:	add	r3, pc, #812	; 0x32c
   1de60:	ldrd	r2, [r3]
   1de64:	ldrd	r0, [sp, #48]	; 0x30
   1de68:	cmp	r1, r3
   1de6c:	cmpeq	r0, r2
   1de70:	bne	1df44 <_start@@Base+0x8c68>
   1de74:	mov	r3, #6
   1de78:	mov	r2, r6
   1de7c:	mov	r1, r7
   1de80:	mov	r0, r5
   1de84:	bl	18798 <_start@@Base+0x34bc>
   1de88:	cmp	r7, r0
   1de8c:	mov	r8, r0
   1de90:	beq	1df2c <_start@@Base+0x8c50>
   1de94:	mov	r3, #0
   1de98:	add	r7, sp, #328	; 0x148
   1de9c:	mov	r1, r0
   1dea0:	mov	r2, r6
   1dea4:	mov	r0, r5
   1dea8:	str	r3, [sp, #328]	; 0x148
   1deac:	mov	r3, r7
   1deb0:	bl	25da0 <flatcc_json_parser_float@@Base>
   1deb4:	cmp	r8, r0
   1deb8:	mov	r4, r0
   1debc:	bne	1dee8 <_start@@Base+0x8c0c>
   1dec0:	mov	r1, r0
   1dec4:	ldr	r3, [pc, #740]	; 1e1b0 <_start@@Base+0x8ed4>
   1dec8:	mov	r2, r6
   1decc:	mov	r0, r5
   1ded0:	str	r7, [sp]
   1ded4:	bl	17b9c <_start@@Base+0x28c0>
   1ded8:	cmp	r6, r0
   1dedc:	cmpne	r4, r0
   1dee0:	mov	r4, r0
   1dee4:	beq	1bc20 <_start@@Base+0x6944>
   1dee8:	vldr	s15, [sp, #328]	; 0x148
   1deec:	vcmp.f32	s15, #0.0
   1def0:	vmrs	APSR_nzcv, fpscr
   1def4:	bne	1df04 <_start@@Base+0x8c28>
   1def8:	ldr	r3, [r5, #8]
   1defc:	tst	r3, #2
   1df00:	beq	1b9b8 <_start@@Base+0x66dc>
   1df04:	mov	r3, #4
   1df08:	mov	r1, #27
   1df0c:	ldr	r0, [r5]
   1df10:	mov	r2, r3
   1df14:	bl	22c6c <flatcc_builder_table_add@@Base>
   1df18:	cmp	r0, #0
   1df1c:	beq	1bc20 <_start@@Base+0x6944>
   1df20:	ldr	r3, [sp, #328]	; 0x148
   1df24:	str	r3, [r0]
   1df28:	b	1b9b8 <_start@@Base+0x66dc>
   1df2c:	mov	r2, r6
   1df30:	mov	r1, r7
   1df34:	mov	r0, r5
   1df38:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1df3c:	mov	r4, r0
   1df40:	b	1b9b8 <_start@@Base+0x66dc>
   1df44:	mov	r2, r6
   1df48:	mov	r1, r7
   1df4c:	mov	r0, r5
   1df50:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1df54:	mov	r4, r0
   1df58:	b	1b9b8 <_start@@Base+0x66dc>
   1df5c:	add	r3, pc, #564	; 0x234
   1df60:	ldrd	r2, [r3]
   1df64:	cmp	r1, r3
   1df68:	cmpeq	r0, r2
   1df6c:	bne	1e808 <_start@@Base+0x952c>
   1df70:	add	r7, r7, #8
   1df74:	mov	r1, r6
   1df78:	mov	r0, r7
   1df7c:	bl	153d0 <_start@@Base+0xf4>
   1df80:	add	r3, pc, #536	; 0x218
   1df84:	ldrd	r2, [r3]
   1df88:	cmp	r1, r3
   1df8c:	cmpeq	r0, r2
   1df90:	bhi	1e1bc <_start@@Base+0x8ee0>
   1df94:	add	r3, pc, #524	; 0x20c
   1df98:	ldrd	r2, [r3]
   1df9c:	cmp	r1, r3
   1dfa0:	cmpeq	r0, r2
   1dfa4:	bne	1e170 <_start@@Base+0x8e94>
   1dfa8:	mov	r3, #8
   1dfac:	mov	r2, r6
   1dfb0:	mov	r1, r7
   1dfb4:	mov	r0, r5
   1dfb8:	bl	18798 <_start@@Base+0x34bc>
   1dfbc:	cmp	r7, r0
   1dfc0:	mov	r8, r0
   1dfc4:	beq	1e05c <_start@@Base+0x8d80>
   1dfc8:	mov	r3, #0
   1dfcc:	add	r7, sp, #328	; 0x148
   1dfd0:	mov	r1, r0
   1dfd4:	mov	r2, r6
   1dfd8:	mov	r0, r5
   1dfdc:	str	r3, [sp, #328]	; 0x148
   1dfe0:	mov	r3, r7
   1dfe4:	bl	19400 <_start@@Base+0x4124>
   1dfe8:	cmp	r8, r0
   1dfec:	mov	r4, r0
   1dff0:	bne	1e01c <_start@@Base+0x8d40>
   1dff4:	mov	r1, r0
   1dff8:	ldr	r3, [pc, #436]	; 1e1b4 <_start@@Base+0x8ed8>
   1dffc:	mov	r2, r6
   1e000:	mov	r0, r5
   1e004:	str	r7, [sp]
   1e008:	bl	1993c <_start@@Base+0x4660>
   1e00c:	cmp	r6, r0
   1e010:	cmpne	r4, r0
   1e014:	mov	r4, r0
   1e018:	beq	1bc20 <_start@@Base+0x6944>
   1e01c:	ldr	r3, [sp, #328]	; 0x148
   1e020:	cmp	r3, #0
   1e024:	bne	1e034 <_start@@Base+0x8d58>
   1e028:	ldr	r3, [r5, #8]
   1e02c:	tst	r3, #2
   1e030:	beq	1b9b8 <_start@@Base+0x66dc>
   1e034:	mov	r3, #4
   1e038:	mov	r1, #16
   1e03c:	ldr	r0, [r5]
   1e040:	mov	r2, r3
   1e044:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e048:	cmp	r0, #0
   1e04c:	beq	1bc20 <_start@@Base+0x6944>
   1e050:	ldr	r3, [sp, #328]	; 0x148
   1e054:	str	r3, [r0]
   1e058:	b	1b9b8 <_start@@Base+0x66dc>
   1e05c:	add	r7, r7, #8
   1e060:	mov	r1, r6
   1e064:	mov	r0, r7
   1e068:	bl	153d0 <_start@@Base+0xf4>
   1e06c:	mov	r3, #0
   1e070:	str	r3, [sp, #248]	; 0xf8
   1e074:	and	r3, r1, #-16777216	; 0xff000000
   1e078:	str	r3, [sp, #252]	; 0xfc
   1e07c:	ldrd	r2, [sp, #248]	; 0xf8
   1e080:	cmp	r3, #1627389952	; 0x61000000
   1e084:	cmpeq	r2, #0
   1e088:	bne	1e158 <_start@@Base+0x8e7c>
   1e08c:	mov	r3, #1
   1e090:	mov	r2, r6
   1e094:	mov	r1, r7
   1e098:	mov	r0, r5
   1e09c:	bl	18798 <_start@@Base+0x34bc>
   1e0a0:	cmp	r7, r0
   1e0a4:	mov	r8, r0
   1e0a8:	beq	1e140 <_start@@Base+0x8e64>
   1e0ac:	mov	r3, #0
   1e0b0:	add	r7, sp, #328	; 0x148
   1e0b4:	mov	r1, r0
   1e0b8:	mov	r2, r6
   1e0bc:	mov	r0, r5
   1e0c0:	str	r3, [sp, #328]	; 0x148
   1e0c4:	mov	r3, r7
   1e0c8:	bl	19400 <_start@@Base+0x4124>
   1e0cc:	cmp	r8, r0
   1e0d0:	mov	r4, r0
   1e0d4:	bne	1e100 <_start@@Base+0x8e24>
   1e0d8:	mov	r1, r0
   1e0dc:	ldr	r3, [pc, #212]	; 1e1b8 <_start@@Base+0x8edc>
   1e0e0:	mov	r2, r6
   1e0e4:	mov	r0, r5
   1e0e8:	str	r7, [sp]
   1e0ec:	bl	1993c <_start@@Base+0x4660>
   1e0f0:	cmp	r6, r0
   1e0f4:	cmpne	r4, r0
   1e0f8:	mov	r4, r0
   1e0fc:	beq	1bc20 <_start@@Base+0x6944>
   1e100:	ldr	r3, [sp, #328]	; 0x148
   1e104:	cmp	r3, #0
   1e108:	bne	1e118 <_start@@Base+0x8e3c>
   1e10c:	ldr	r3, [r5, #8]
   1e110:	tst	r3, #2
   1e114:	beq	1b9b8 <_start@@Base+0x66dc>
   1e118:	mov	r3, #4
   1e11c:	mov	r1, #20
   1e120:	ldr	r0, [r5]
   1e124:	mov	r2, r3
   1e128:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e12c:	cmp	r0, #0
   1e130:	beq	1bc20 <_start@@Base+0x6944>
   1e134:	ldr	r3, [sp, #328]	; 0x148
   1e138:	str	r3, [r0]
   1e13c:	b	1b9b8 <_start@@Base+0x66dc>
   1e140:	mov	r1, r0
   1e144:	mov	r2, r6
   1e148:	mov	r0, r5
   1e14c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e150:	mov	r4, r0
   1e154:	b	1b9b8 <_start@@Base+0x66dc>
   1e158:	mov	r2, r6
   1e15c:	mov	r1, r7
   1e160:	mov	r0, r5
   1e164:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e168:	mov	r4, r0
   1e16c:	b	1b9b8 <_start@@Base+0x66dc>
   1e170:	mov	r2, r6
   1e174:	mov	r1, r7
   1e178:	mov	r0, r5
   1e17c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e180:	mov	r4, r0
   1e184:	b	1b9b8 <_start@@Base+0x66dc>
   1e188:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1e18c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e190:	ldrtvs	r0, [r3], -r0
   1e194:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e198:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1e19c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e1a0:			; <UNDEFINED> instruction: 0x666e7630
   1e1a4:	teqvc	r6, #1593835520	; 0x5f000000
   1e1a8:			; <UNDEFINED> instruction: 0x666e7631
   1e1ac:	teqvc	r3, #-268435451	; 0xf0000005
   1e1b0:	andeq	r5, r4, ip, ror r2
   1e1b4:	andeq	r5, r4, r8, lsl #5
   1e1b8:	muleq	r4, r4, r2
   1e1bc:	add	r3, pc, #1004	; 0x3ec
   1e1c0:	ldrd	r2, [r3]
   1e1c4:	cmp	r1, r3
   1e1c8:	cmpeq	r0, r2
   1e1cc:	bhi	1e3e8 <_start@@Base+0x910c>
   1e1d0:	add	r3, pc, #992	; 0x3e0
   1e1d4:	ldrd	r2, [r3]
   1e1d8:	cmp	r1, r3
   1e1dc:	cmpeq	r0, r2
   1e1e0:	bne	1e3d0 <_start@@Base+0x90f4>
   1e1e4:	mov	r3, #8
   1e1e8:	mov	r2, r6
   1e1ec:	mov	r1, r7
   1e1f0:	mov	r0, r5
   1e1f4:	bl	18798 <_start@@Base+0x34bc>
   1e1f8:	cmp	r7, r0
   1e1fc:	mov	r8, r0
   1e200:	beq	1e2a8 <_start@@Base+0x8fcc>
   1e204:	add	r1, sp, #328	; 0x148
   1e208:	mov	r2, #0
   1e20c:	mov	r3, #0
   1e210:	mov	r7, r1
   1e214:	mov	r0, r5
   1e218:	strd	r2, [r1]
   1e21c:	mov	r3, r1
   1e220:	mov	r2, r6
   1e224:	mov	r1, r8
   1e228:	bl	17968 <_start@@Base+0x268c>
   1e22c:	cmp	r8, r0
   1e230:	mov	r4, r0
   1e234:	bne	1e260 <_start@@Base+0x8f84>
   1e238:	mov	r1, r0
   1e23c:	ldr	r3, [pc, #900]	; 1e5c8 <_start@@Base+0x92ec>
   1e240:	mov	r2, r6
   1e244:	mov	r0, r5
   1e248:	str	r7, [sp]
   1e24c:	bl	1a4a0 <_start@@Base+0x51c4>
   1e250:	cmp	r6, r0
   1e254:	cmpne	r4, r0
   1e258:	mov	r4, r0
   1e25c:	beq	1bc20 <_start@@Base+0x6944>
   1e260:	add	r3, sp, #328	; 0x148
   1e264:	ldrd	r2, [r3]
   1e268:	orrs	r3, r2, r3
   1e26c:	bne	1e27c <_start@@Base+0x8fa0>
   1e270:	ldr	r3, [r5, #8]
   1e274:	tst	r3, #2
   1e278:	beq	1b9b8 <_start@@Base+0x66dc>
   1e27c:	mov	r3, #8
   1e280:	mov	r1, #18
   1e284:	ldr	r0, [r5]
   1e288:	mov	r2, r3
   1e28c:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e290:	cmp	r0, #0
   1e294:	beq	1bc20 <_start@@Base+0x6944>
   1e298:	add	r3, sp, #328	; 0x148
   1e29c:	ldrd	r2, [r3]
   1e2a0:	strd	r2, [r0]
   1e2a4:	b	1b9b8 <_start@@Base+0x66dc>
   1e2a8:	add	r7, r7, #8
   1e2ac:	mov	r1, r6
   1e2b0:	mov	r0, r7
   1e2b4:	bl	153d0 <_start@@Base+0xf4>
   1e2b8:	mov	r3, #0
   1e2bc:	str	r3, [sp, #256]	; 0x100
   1e2c0:	and	r3, r1, #-16777216	; 0xff000000
   1e2c4:	str	r3, [sp, #260]	; 0x104
   1e2c8:	add	r3, sp, #256	; 0x100
   1e2cc:	ldrd	r2, [r3]
   1e2d0:	cmp	r3, #1627389952	; 0x61000000
   1e2d4:	cmpeq	r2, #0
   1e2d8:	bne	1e3b8 <_start@@Base+0x90dc>
   1e2dc:	mov	r3, #1
   1e2e0:	mov	r2, r6
   1e2e4:	mov	r1, r7
   1e2e8:	mov	r0, r5
   1e2ec:	bl	18798 <_start@@Base+0x34bc>
   1e2f0:	cmp	r7, r0
   1e2f4:	mov	r8, r0
   1e2f8:	beq	1e3a0 <_start@@Base+0x90c4>
   1e2fc:	add	r1, sp, #328	; 0x148
   1e300:	mov	r2, #0
   1e304:	mov	r3, #0
   1e308:	mov	r7, r1
   1e30c:	mov	r0, r5
   1e310:	strd	r2, [r1]
   1e314:	mov	r3, r1
   1e318:	mov	r2, r6
   1e31c:	mov	r1, r8
   1e320:	bl	17968 <_start@@Base+0x268c>
   1e324:	cmp	r8, r0
   1e328:	mov	r4, r0
   1e32c:	bne	1e358 <_start@@Base+0x907c>
   1e330:	mov	r1, r0
   1e334:	ldr	r3, [pc, #656]	; 1e5cc <_start@@Base+0x92f0>
   1e338:	mov	r2, r6
   1e33c:	mov	r0, r5
   1e340:	str	r7, [sp]
   1e344:	bl	1a4a0 <_start@@Base+0x51c4>
   1e348:	cmp	r6, r0
   1e34c:	cmpne	r4, r0
   1e350:	mov	r4, r0
   1e354:	beq	1bc20 <_start@@Base+0x6944>
   1e358:	add	r3, sp, #328	; 0x148
   1e35c:	ldrd	r2, [r3]
   1e360:	orrs	r3, r2, r3
   1e364:	bne	1e374 <_start@@Base+0x9098>
   1e368:	ldr	r3, [r5, #8]
   1e36c:	tst	r3, #2
   1e370:	beq	1b9b8 <_start@@Base+0x66dc>
   1e374:	mov	r3, #8
   1e378:	mov	r1, #22
   1e37c:	ldr	r0, [r5]
   1e380:	mov	r2, r3
   1e384:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e388:	cmp	r0, #0
   1e38c:	beq	1bc20 <_start@@Base+0x6944>
   1e390:	add	r3, sp, #328	; 0x148
   1e394:	ldrd	r2, [r3]
   1e398:	strd	r2, [r0]
   1e39c:	b	1b9b8 <_start@@Base+0x66dc>
   1e3a0:	mov	r2, r6
   1e3a4:	mov	r1, r7
   1e3a8:	mov	r0, r5
   1e3ac:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3b0:	mov	r4, r0
   1e3b4:	b	1b9b8 <_start@@Base+0x66dc>
   1e3b8:	mov	r2, r6
   1e3bc:	mov	r1, r7
   1e3c0:	mov	r0, r5
   1e3c4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3c8:	mov	r4, r0
   1e3cc:	b	1b9b8 <_start@@Base+0x66dc>
   1e3d0:	mov	r2, r6
   1e3d4:	mov	r1, r7
   1e3d8:	mov	r0, r5
   1e3dc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3e0:	mov	r4, r0
   1e3e4:	b	1b9b8 <_start@@Base+0x66dc>
   1e3e8:	add	r3, pc, #464	; 0x1d0
   1e3ec:	ldrd	r2, [r3]
   1e3f0:	cmp	r1, r3
   1e3f4:	cmpeq	r0, r2
   1e3f8:	bne	1e5f0 <_start@@Base+0x9314>
   1e3fc:	mov	r3, #8
   1e400:	mov	r2, r6
   1e404:	mov	r1, r7
   1e408:	mov	r0, r5
   1e40c:	bl	18798 <_start@@Base+0x34bc>
   1e410:	cmp	r7, r0
   1e414:	mov	r8, r0
   1e418:	beq	1e4b0 <_start@@Base+0x91d4>
   1e41c:	mov	r3, #0
   1e420:	add	r7, sp, #328	; 0x148
   1e424:	mov	r1, r0
   1e428:	mov	r2, r6
   1e42c:	mov	r0, r5
   1e430:	str	r3, [sp, #328]	; 0x148
   1e434:	mov	r3, r7
   1e438:	bl	19084 <_start@@Base+0x3da8>
   1e43c:	cmp	r8, r0
   1e440:	mov	r4, r0
   1e444:	bne	1e470 <_start@@Base+0x9194>
   1e448:	mov	r1, r0
   1e44c:	ldr	r3, [pc, #380]	; 1e5d0 <_start@@Base+0x92f4>
   1e450:	mov	r2, r6
   1e454:	mov	r0, r5
   1e458:	str	r7, [sp]
   1e45c:	bl	1970c <_start@@Base+0x4430>
   1e460:	cmp	r6, r0
   1e464:	cmpne	r4, r0
   1e468:	mov	r4, r0
   1e46c:	beq	1bc20 <_start@@Base+0x6944>
   1e470:	ldr	r3, [sp, #328]	; 0x148
   1e474:	cmp	r3, #0
   1e478:	bne	1e488 <_start@@Base+0x91ac>
   1e47c:	ldr	r3, [r5, #8]
   1e480:	tst	r3, #2
   1e484:	beq	1b9b8 <_start@@Base+0x66dc>
   1e488:	mov	r3, #4
   1e48c:	mov	r1, #17
   1e490:	ldr	r0, [r5]
   1e494:	mov	r2, r3
   1e498:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e49c:	cmp	r0, #0
   1e4a0:	beq	1bc20 <_start@@Base+0x6944>
   1e4a4:	ldr	r3, [sp, #328]	; 0x148
   1e4a8:	str	r3, [r0]
   1e4ac:	b	1b9b8 <_start@@Base+0x66dc>
   1e4b0:	add	r7, r7, #8
   1e4b4:	mov	r1, r6
   1e4b8:	mov	r0, r7
   1e4bc:	bl	153d0 <_start@@Base+0xf4>
   1e4c0:	mov	r3, #0
   1e4c4:	str	r3, [sp, #264]	; 0x108
   1e4c8:	and	r3, r1, #-16777216	; 0xff000000
   1e4cc:	str	r3, [sp, #268]	; 0x10c
   1e4d0:	add	r3, sp, #264	; 0x108
   1e4d4:	ldrd	r2, [r3]
   1e4d8:	cmp	r3, #1627389952	; 0x61000000
   1e4dc:	cmpeq	r2, #0
   1e4e0:	bne	1e5d8 <_start@@Base+0x92fc>
   1e4e4:	mov	r3, #1
   1e4e8:	mov	r2, r6
   1e4ec:	mov	r1, r7
   1e4f0:	mov	r0, r5
   1e4f4:	bl	18798 <_start@@Base+0x34bc>
   1e4f8:	cmp	r7, r0
   1e4fc:	mov	r8, r0
   1e500:	beq	1e598 <_start@@Base+0x92bc>
   1e504:	mov	r3, #0
   1e508:	add	r7, sp, #328	; 0x148
   1e50c:	mov	r1, r0
   1e510:	mov	r2, r6
   1e514:	mov	r0, r5
   1e518:	str	r3, [sp, #328]	; 0x148
   1e51c:	mov	r3, r7
   1e520:	bl	19084 <_start@@Base+0x3da8>
   1e524:	cmp	r8, r0
   1e528:	mov	r4, r0
   1e52c:	bne	1e558 <_start@@Base+0x927c>
   1e530:	mov	r1, r0
   1e534:	ldr	r3, [pc, #152]	; 1e5d4 <_start@@Base+0x92f8>
   1e538:	mov	r2, r6
   1e53c:	mov	r0, r5
   1e540:	str	r7, [sp]
   1e544:	bl	1970c <_start@@Base+0x4430>
   1e548:	cmp	r6, r0
   1e54c:	cmpne	r4, r0
   1e550:	mov	r4, r0
   1e554:	beq	1bc20 <_start@@Base+0x6944>
   1e558:	ldr	r3, [sp, #328]	; 0x148
   1e55c:	cmp	r3, #0
   1e560:	bne	1e570 <_start@@Base+0x9294>
   1e564:	ldr	r3, [r5, #8]
   1e568:	tst	r3, #2
   1e56c:	beq	1b9b8 <_start@@Base+0x66dc>
   1e570:	mov	r3, #4
   1e574:	mov	r1, #21
   1e578:	ldr	r0, [r5]
   1e57c:	mov	r2, r3
   1e580:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e584:	cmp	r0, #0
   1e588:	beq	1bc20 <_start@@Base+0x6944>
   1e58c:	ldr	r3, [sp, #328]	; 0x148
   1e590:	str	r3, [r0]
   1e594:	b	1b9b8 <_start@@Base+0x66dc>
   1e598:	mov	r2, r6
   1e59c:	mov	r1, r7
   1e5a0:	mov	r0, r5
   1e5a4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e5a8:	mov	r4, r0
   1e5ac:	b	1b9b8 <_start@@Base+0x66dc>
   1e5b0:			; <UNDEFINED> instruction: 0x666e7630
   1e5b4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e5b8:			; <UNDEFINED> instruction: 0x666e7631
   1e5bc:	teqvc	r6, #1593835520	; 0x5f000000
   1e5c0:			; <UNDEFINED> instruction: 0x666e7631
   1e5c4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e5c8:	andeq	r5, r4, r0, lsr #5
   1e5cc:	andeq	r5, r4, ip, lsr #5
   1e5d0:			; <UNDEFINED> instruction: 0x000452b8
   1e5d4:	andeq	r5, r4, r4, asr #5
   1e5d8:	mov	r2, r6
   1e5dc:	mov	r1, r7
   1e5e0:	mov	r0, r5
   1e5e4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e5e8:	mov	r4, r0
   1e5ec:	b	1b9b8 <_start@@Base+0x66dc>
   1e5f0:	add	r3, pc, #976	; 0x3d0
   1e5f4:	ldrd	r2, [r3]
   1e5f8:	cmp	r1, r3
   1e5fc:	cmpeq	r0, r2
   1e600:	bne	1e7f0 <_start@@Base+0x9514>
   1e604:	mov	r3, #8
   1e608:	mov	r2, r6
   1e60c:	mov	r1, r7
   1e610:	mov	r0, r5
   1e614:	bl	18798 <_start@@Base+0x34bc>
   1e618:	cmp	r7, r0
   1e61c:	mov	r8, r0
   1e620:	beq	1e6c8 <_start@@Base+0x93ec>
   1e624:	add	r1, sp, #328	; 0x148
   1e628:	mov	r2, #0
   1e62c:	mov	r3, #0
   1e630:	mov	r7, r1
   1e634:	mov	r0, r5
   1e638:	strd	r2, [r1]
   1e63c:	mov	r3, r1
   1e640:	mov	r2, r6
   1e644:	mov	r1, r8
   1e648:	bl	18ff4 <_start@@Base+0x3d18>
   1e64c:	cmp	r8, r0
   1e650:	mov	r4, r0
   1e654:	bne	1e680 <_start@@Base+0x93a4>
   1e658:	mov	r1, r0
   1e65c:	ldr	r3, [pc, #908]	; 1e9f0 <_start@@Base+0x9714>
   1e660:	mov	r2, r6
   1e664:	mov	r0, r5
   1e668:	str	r7, [sp]
   1e66c:	bl	192f0 <_start@@Base+0x4014>
   1e670:	cmp	r6, r0
   1e674:	cmpne	r4, r0
   1e678:	mov	r4, r0
   1e67c:	beq	1bc20 <_start@@Base+0x6944>
   1e680:	add	r3, sp, #328	; 0x148
   1e684:	ldrd	r2, [r3]
   1e688:	orrs	r3, r2, r3
   1e68c:	bne	1e69c <_start@@Base+0x93c0>
   1e690:	ldr	r3, [r5, #8]
   1e694:	tst	r3, #2
   1e698:	beq	1b9b8 <_start@@Base+0x66dc>
   1e69c:	mov	r3, #8
   1e6a0:	mov	r1, #19
   1e6a4:	ldr	r0, [r5]
   1e6a8:	mov	r2, r3
   1e6ac:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e6b0:	cmp	r0, #0
   1e6b4:	beq	1bc20 <_start@@Base+0x6944>
   1e6b8:	add	r3, sp, #328	; 0x148
   1e6bc:	ldrd	r2, [r3]
   1e6c0:	strd	r2, [r0]
   1e6c4:	b	1b9b8 <_start@@Base+0x66dc>
   1e6c8:	add	r8, r0, #8
   1e6cc:	mov	r1, r6
   1e6d0:	mov	r0, r8
   1e6d4:	bl	153d0 <_start@@Base+0xf4>
   1e6d8:	mov	r3, #0
   1e6dc:	str	r3, [sp, #272]	; 0x110
   1e6e0:	and	r3, r1, #-16777216	; 0xff000000
   1e6e4:	str	r3, [sp, #276]	; 0x114
   1e6e8:	add	r3, sp, #272	; 0x110
   1e6ec:	ldrd	r2, [r3]
   1e6f0:	cmp	r3, #1627389952	; 0x61000000
   1e6f4:	cmpeq	r2, #0
   1e6f8:	bne	1e7d8 <_start@@Base+0x94fc>
   1e6fc:	mov	r3, #1
   1e700:	mov	r2, r6
   1e704:	mov	r1, r8
   1e708:	mov	r0, r5
   1e70c:	bl	18798 <_start@@Base+0x34bc>
   1e710:	cmp	r8, r0
   1e714:	mov	r7, r0
   1e718:	beq	1e7c0 <_start@@Base+0x94e4>
   1e71c:	add	r1, sp, #328	; 0x148
   1e720:	mov	r2, #0
   1e724:	mov	r3, #0
   1e728:	mov	r8, r1
   1e72c:	mov	r0, r5
   1e730:	strd	r2, [r1]
   1e734:	mov	r3, r1
   1e738:	mov	r2, r6
   1e73c:	mov	r1, r7
   1e740:	bl	18ff4 <_start@@Base+0x3d18>
   1e744:	cmp	r7, r0
   1e748:	mov	r4, r0
   1e74c:	bne	1e778 <_start@@Base+0x949c>
   1e750:	mov	r1, r0
   1e754:	ldr	r3, [pc, #664]	; 1e9f4 <_start@@Base+0x9718>
   1e758:	mov	r2, r6
   1e75c:	mov	r0, r5
   1e760:	str	r8, [sp]
   1e764:	bl	192f0 <_start@@Base+0x4014>
   1e768:	cmp	r6, r0
   1e76c:	cmpne	r4, r0
   1e770:	mov	r4, r0
   1e774:	beq	1bc20 <_start@@Base+0x6944>
   1e778:	add	r3, sp, #328	; 0x148
   1e77c:	ldrd	r2, [r3]
   1e780:	orrs	r3, r2, r3
   1e784:	bne	1e794 <_start@@Base+0x94b8>
   1e788:	ldr	r3, [r5, #8]
   1e78c:	tst	r3, #2
   1e790:	beq	1b9b8 <_start@@Base+0x66dc>
   1e794:	mov	r3, #8
   1e798:	mov	r1, #23
   1e79c:	ldr	r0, [r5]
   1e7a0:	mov	r2, r3
   1e7a4:	bl	22c6c <flatcc_builder_table_add@@Base>
   1e7a8:	cmp	r0, #0
   1e7ac:	beq	1bc20 <_start@@Base+0x6944>
   1e7b0:	add	r3, sp, #328	; 0x148
   1e7b4:	ldrd	r2, [r3]
   1e7b8:	strd	r2, [r0]
   1e7bc:	b	1b9b8 <_start@@Base+0x66dc>
   1e7c0:	mov	r2, r6
   1e7c4:	mov	r1, r8
   1e7c8:	mov	r0, r5
   1e7cc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7d0:	mov	r4, r0
   1e7d4:	b	1b9b8 <_start@@Base+0x66dc>
   1e7d8:	mov	r2, r6
   1e7dc:	mov	r1, r8
   1e7e0:	mov	r0, r5
   1e7e4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7e8:	mov	r4, r0
   1e7ec:	b	1b9b8 <_start@@Base+0x66dc>
   1e7f0:	mov	r2, r6
   1e7f4:	mov	r1, r7
   1e7f8:	mov	r0, r5
   1e7fc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1e800:	mov	r4, r0
   1e804:	b	1b9b8 <_start@@Base+0x66dc>
   1e808:	add	r3, pc, #448	; 0x1c0
   1e80c:	ldrd	r2, [r3]
   1e810:	cmp	r1, r3
   1e814:	cmpeq	r0, r2
   1e818:	bhi	1eaa4 <_start@@Base+0x97c8>
   1e81c:	add	r3, pc, #436	; 0x1b4
   1e820:	ldrd	r2, [r3]
   1e824:	cmp	r1, r3
   1e828:	cmpeq	r0, r2
   1e82c:	bne	1ea8c <_start@@Base+0x97b0>
   1e830:	add	r4, r7, #8
   1e834:	mov	r1, r6
   1e838:	mov	r0, r4
   1e83c:	bl	153d0 <_start@@Base+0xf4>
   1e840:	add	r3, pc, #408	; 0x198
   1e844:	ldrd	r2, [r3]
   1e848:	cmp	r1, r3
   1e84c:	cmpeq	r0, r2
   1e850:	bne	1ea74 <_start@@Base+0x9798>
   1e854:	add	r7, r7, #16
   1e858:	mov	r1, r6
   1e85c:	mov	r0, r7
   1e860:	bl	153d0 <_start@@Base+0xf4>
   1e864:	mov	r3, #0
   1e868:	str	r1, [sp, #284]	; 0x11c
   1e86c:	add	r1, sp, #280	; 0x118
   1e870:	str	r3, [sp, #280]	; 0x118
   1e874:	add	r3, pc, #364	; 0x16c
   1e878:	ldrd	r2, [r3]
   1e87c:	ldrd	r0, [r1]
   1e880:	cmp	r1, r3
   1e884:	cmpeq	r0, r2
   1e888:	bne	1ea5c <_start@@Base+0x9780>
   1e88c:	mov	r3, #4
   1e890:	mov	r2, r6
   1e894:	mov	r1, r7
   1e898:	mov	r0, r5
   1e89c:	bl	18798 <_start@@Base+0x34bc>
   1e8a0:	cmp	r7, r0
   1e8a4:	mov	r4, r0
   1e8a8:	beq	1ea44 <_start@@Base+0x9768>
   1e8ac:	cmp	r6, r0
   1e8b0:	ldr	r0, [r5]
   1e8b4:	beq	1e9fc <_start@@Base+0x9720>
   1e8b8:	ldrb	r3, [r4]
   1e8bc:	cmp	r3, #91	; 0x5b
   1e8c0:	bne	1e9fc <_start@@Base+0x9720>
   1e8c4:	mov	r2, #1
   1e8c8:	mvn	r3, #0
   1e8cc:	mov	r1, r2
   1e8d0:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1e8d4:	subs	r7, r0, #0
   1e8d8:	bne	1bc20 <_start@@Base+0x6944>
   1e8dc:	ldr	sl, [pc, #276]	; 1e9f8 <_start@@Base+0x971c>
   1e8e0:	mov	r1, r4
   1e8e4:	add	r3, sp, #308	; 0x134
   1e8e8:	mov	r2, r6
   1e8ec:	mov	r0, r5
   1e8f0:	bl	18f6c <_start@@Base+0x3c90>
   1e8f4:	mov	r4, r0
   1e8f8:	ldr	r3, [sp, #308]	; 0x134
   1e8fc:	ldr	r0, [r5]
   1e900:	cmp	r3, #0
   1e904:	bne	1e93c <_start@@Base+0x9660>
   1e908:	bl	2252c <flatcc_builder_end_vector@@Base>
   1e90c:	str	r0, [sp, #312]	; 0x138
   1e910:	ldr	r3, [sp, #312]	; 0x138
   1e914:	cmp	r3, #0
   1e918:	beq	1bc20 <_start@@Base+0x6944>
   1e91c:	mov	r1, #13
   1e920:	ldr	r0, [r5]
   1e924:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1e928:	cmp	r0, #0
   1e92c:	beq	1bc20 <_start@@Base+0x6944>
   1e930:	ldr	r3, [sp, #312]	; 0x138
   1e934:	str	r3, [r0]
   1e938:	b	1b9b8 <_start@@Base+0x66dc>
   1e93c:	mov	r1, #1
   1e940:	strb	r7, [sp, #328]	; 0x148
   1e944:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1e948:	subs	fp, r0, #0
   1e94c:	beq	1bc20 <_start@@Base+0x6944>
   1e950:	add	r9, sp, #328	; 0x148
   1e954:	mov	r1, r4
   1e958:	mov	r3, r9
   1e95c:	mov	r2, r6
   1e960:	mov	r0, r5
   1e964:	bl	191bc <_start@@Base+0x3ee0>
   1e968:	cmp	r4, r0
   1e96c:	mov	r8, r0
   1e970:	movne	r4, r0
   1e974:	bne	1e9a0 <_start@@Base+0x96c4>
   1e978:	mov	r1, r4
   1e97c:	mov	r3, sl
   1e980:	str	r9, [sp]
   1e984:	mov	r2, r6
   1e988:	mov	r0, r5
   1e98c:	bl	19600 <_start@@Base+0x4324>
   1e990:	cmp	r6, r0
   1e994:	cmpne	r8, r0
   1e998:	mov	r4, r0
   1e99c:	beq	1bc20 <_start@@Base+0x6944>
   1e9a0:	ldrb	r3, [sp, #328]	; 0x148
   1e9a4:	mov	r1, r4
   1e9a8:	mov	r2, r6
   1e9ac:	mov	r0, r5
   1e9b0:	strb	r3, [fp]
   1e9b4:	add	r3, sp, #308	; 0x134
   1e9b8:	bl	16f10 <_start@@Base+0x1c34>
   1e9bc:	mov	r4, r0
   1e9c0:	b	1e8f8 <_start@@Base+0x961c>
   1e9c4:	nop	{0}
   1e9c8:			; <UNDEFINED> instruction: 0x666e7631
   1e9cc:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1e9d0:	svcvs	0x00725f6e
   1e9d4:			; <UNDEFINED> instruction: 0x76656374
   1e9d8:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e9dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e9e0:	cmnvs	r4, r5, ror r2
   1e9e4:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1e9e8:	andeq	r0, r0, r0
   1e9ec:			; <UNDEFINED> instruction: 0x66666572
   1e9f0:	ldrdeq	r5, [r4], -r0
   1e9f4:	ldrdeq	r5, [r4], -ip
   1e9f8:	andeq	r5, r4, r8, ror #5
   1e9fc:	mov	r3, #0
   1ea00:	mov	r2, r3
   1ea04:	mov	r1, r3
   1ea08:	bl	2150c <flatcc_builder_start_buffer@@Base>
   1ea0c:	cmp	r0, #0
   1ea10:	bne	1bc20 <_start@@Base+0x6944>
   1ea14:	mov	r1, r4
   1ea18:	add	r3, sp, #312	; 0x138
   1ea1c:	mov	r2, r6
   1ea20:	mov	r0, r5
   1ea24:	bl	1b818 <_start@@Base+0x653c>
   1ea28:	ldr	r1, [sp, #312]	; 0x138
   1ea2c:	mov	r4, r0
   1ea30:	cmp	r1, #0
   1ea34:	beq	1bc20 <_start@@Base+0x6944>
   1ea38:	ldr	r0, [r5]
   1ea3c:	bl	215a8 <flatcc_builder_end_buffer@@Base>
   1ea40:	b	1e90c <_start@@Base+0x9630>
   1ea44:	mov	r1, r0
   1ea48:	mov	r2, r6
   1ea4c:	mov	r0, r5
   1ea50:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea54:	mov	r4, r0
   1ea58:	b	1b9b8 <_start@@Base+0x66dc>
   1ea5c:	mov	r2, r6
   1ea60:	mov	r1, r7
   1ea64:	mov	r0, r5
   1ea68:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea6c:	mov	r4, r0
   1ea70:	b	1b9b8 <_start@@Base+0x66dc>
   1ea74:	mov	r1, r4
   1ea78:	mov	r2, r6
   1ea7c:	mov	r0, r5
   1ea80:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea84:	mov	r4, r0
   1ea88:	b	1b9b8 <_start@@Base+0x66dc>
   1ea8c:	mov	r2, r6
   1ea90:	mov	r1, r7
   1ea94:	mov	r0, r5
   1ea98:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea9c:	mov	r4, r0
   1eaa0:	b	1b9b8 <_start@@Base+0x66dc>
   1eaa4:	add	r3, pc, #948	; 0x3b4
   1eaa8:	ldrd	r2, [r3]
   1eaac:	cmp	r1, r3
   1eab0:	cmpeq	r0, r2
   1eab4:	bne	1edf0 <_start@@Base+0x9b14>
   1eab8:	add	r8, r7, #8
   1eabc:	mov	r1, r6
   1eac0:	mov	r0, r8
   1eac4:	bl	153d0 <_start@@Base+0xf4>
   1eac8:	add	r3, pc, #920	; 0x398
   1eacc:	ldrd	r2, [r3]
   1ead0:	cmp	r1, r3
   1ead4:	cmpeq	r0, r2
   1ead8:	bne	1ec68 <_start@@Base+0x998c>
   1eadc:	add	r7, r7, #16
   1eae0:	mov	r1, r6
   1eae4:	mov	r0, r7
   1eae8:	bl	153d0 <_start@@Base+0xf4>
   1eaec:	mov	r3, #0
   1eaf0:	str	r3, [sp, #288]	; 0x120
   1eaf4:	and	r3, r1, #-16777216	; 0xff000000
   1eaf8:	str	r3, [sp, #292]	; 0x124
   1eafc:	add	r3, sp, #288	; 0x120
   1eb00:	ldrd	r2, [r3]
   1eb04:	cmp	r3, #1929379840	; 0x73000000
   1eb08:	cmpeq	r2, #0
   1eb0c:	bne	1ec50 <_start@@Base+0x9974>
   1eb10:	mov	r3, #1
   1eb14:	mov	r2, r6
   1eb18:	mov	r1, r7
   1eb1c:	mov	r0, r5
   1eb20:	bl	18798 <_start@@Base+0x34bc>
   1eb24:	cmp	r7, r0
   1eb28:	mov	r4, r0
   1eb2c:	beq	1ec38 <_start@@Base+0x995c>
   1eb30:	mov	r2, #8
   1eb34:	mvn	r3, #-536870912	; 0xe0000000
   1eb38:	ldr	r0, [r5]
   1eb3c:	mov	r1, r2
   1eb40:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1eb44:	cmp	r0, #0
   1eb48:	bne	1bc20 <_start@@Base+0x6944>
   1eb4c:	vldr	d8, [pc, #796]	; 1ee70 <_start@@Base+0x9b94>
   1eb50:	mov	r1, r4
   1eb54:	add	r3, sp, #308	; 0x134
   1eb58:	mov	r2, r6
   1eb5c:	mov	r0, r5
   1eb60:	ldr	r9, [pc, #792]	; 1ee80 <_start@@Base+0x9ba4>
   1eb64:	bl	18f6c <_start@@Base+0x3c90>
   1eb68:	mov	r4, r0
   1eb6c:	ldr	r3, [sp, #308]	; 0x134
   1eb70:	ldr	r0, [r5]
   1eb74:	cmp	r3, #0
   1eb78:	bne	1ebac <_start@@Base+0x98d0>
   1eb7c:	bl	2252c <flatcc_builder_end_vector@@Base>
   1eb80:	cmp	r0, #0
   1eb84:	str	r0, [sp, #312]	; 0x138
   1eb88:	beq	1bc20 <_start@@Base+0x6944>
   1eb8c:	mov	r1, #33	; 0x21
   1eb90:	ldr	r0, [r5]
   1eb94:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1eb98:	cmp	r0, #0
   1eb9c:	beq	1bc20 <_start@@Base+0x6944>
   1eba0:	ldr	r3, [sp, #312]	; 0x138
   1eba4:	str	r3, [r0]
   1eba8:	b	1b9b8 <_start@@Base+0x66dc>
   1ebac:	mov	r1, #1
   1ebb0:	vstr	d8, [sp, #328]	; 0x148
   1ebb4:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1ebb8:	subs	sl, r0, #0
   1ebbc:	beq	1bc20 <_start@@Base+0x6944>
   1ebc0:	add	r8, sp, #328	; 0x148
   1ebc4:	mov	r1, r4
   1ebc8:	mov	r3, r8
   1ebcc:	mov	r2, r6
   1ebd0:	mov	r0, r5
   1ebd4:	bl	25cd4 <flatcc_json_parser_double@@Base>
   1ebd8:	cmp	r4, r0
   1ebdc:	mov	r7, r0
   1ebe0:	movne	r4, r0
   1ebe4:	bne	1ec10 <_start@@Base+0x9934>
   1ebe8:	mov	r1, r4
   1ebec:	mov	r3, r9
   1ebf0:	str	r8, [sp]
   1ebf4:	mov	r2, r6
   1ebf8:	mov	r0, r5
   1ebfc:	bl	17c74 <_start@@Base+0x2998>
   1ec00:	cmp	r6, r0
   1ec04:	cmpne	r7, r0
   1ec08:	mov	r4, r0
   1ec0c:	beq	1bc20 <_start@@Base+0x6944>
   1ec10:	add	r3, sp, #328	; 0x148
   1ec14:	ldrd	r2, [r3]
   1ec18:	mov	r1, r4
   1ec1c:	mov	r0, r5
   1ec20:	strd	r2, [sl]
   1ec24:	add	r3, sp, #308	; 0x134
   1ec28:	mov	r2, r6
   1ec2c:	bl	16f10 <_start@@Base+0x1c34>
   1ec30:	mov	r4, r0
   1ec34:	b	1eb6c <_start@@Base+0x9890>
   1ec38:	mov	r1, r0
   1ec3c:	mov	r2, r6
   1ec40:	mov	r0, r5
   1ec44:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec48:	mov	r4, r0
   1ec4c:	b	1b9b8 <_start@@Base+0x66dc>
   1ec50:	mov	r2, r6
   1ec54:	mov	r1, r7
   1ec58:	mov	r0, r5
   1ec5c:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec60:	mov	r4, r0
   1ec64:	b	1b9b8 <_start@@Base+0x66dc>
   1ec68:	bic	r3, r0, #255	; 0xff
   1ec6c:	str	r1, [sp, #300]	; 0x12c
   1ec70:	add	r1, sp, #296	; 0x128
   1ec74:	str	r3, [sp, #296]	; 0x128
   1ec78:	add	r3, pc, #504	; 0x1f8
   1ec7c:	ldrd	r2, [r3]
   1ec80:	ldrd	r0, [r1]
   1ec84:	cmp	r1, r3
   1ec88:	cmpeq	r0, r2
   1ec8c:	bne	1edd8 <_start@@Base+0x9afc>
   1ec90:	mov	r3, #7
   1ec94:	mov	r2, r6
   1ec98:	mov	r1, r8
   1ec9c:	mov	r0, r5
   1eca0:	bl	18798 <_start@@Base+0x34bc>
   1eca4:	cmp	r8, r0
   1eca8:	mov	r4, r0
   1ecac:	beq	1edc0 <_start@@Base+0x9ae4>
   1ecb0:	mov	r2, #8
   1ecb4:	mvn	r3, #-536870912	; 0xe0000000
   1ecb8:	ldr	r0, [r5]
   1ecbc:	mov	r1, r2
   1ecc0:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   1ecc4:	cmp	r0, #0
   1ecc8:	bne	1bc20 <_start@@Base+0x6944>
   1eccc:	ldr	r9, [pc, #432]	; 1ee84 <_start@@Base+0x9ba8>
   1ecd0:	mov	r1, r4
   1ecd4:	add	r3, sp, #308	; 0x134
   1ecd8:	mov	r2, r6
   1ecdc:	mov	r0, r5
   1ece0:	bl	18f6c <_start@@Base+0x3c90>
   1ece4:	mov	r4, r0
   1ece8:	ldr	r3, [sp, #308]	; 0x134
   1ecec:	ldr	r0, [r5]
   1ecf0:	cmp	r3, #0
   1ecf4:	bne	1ed28 <_start@@Base+0x9a4c>
   1ecf8:	bl	2252c <flatcc_builder_end_vector@@Base>
   1ecfc:	cmp	r0, #0
   1ed00:	str	r0, [sp, #312]	; 0x138
   1ed04:	beq	1bc20 <_start@@Base+0x6944>
   1ed08:	mov	r1, #32
   1ed0c:	ldr	r0, [r5]
   1ed10:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   1ed14:	cmp	r0, #0
   1ed18:	beq	1bc20 <_start@@Base+0x6944>
   1ed1c:	ldr	r3, [sp, #312]	; 0x138
   1ed20:	str	r3, [r0]
   1ed24:	b	1b9b8 <_start@@Base+0x66dc>
   1ed28:	mov	r2, #0
   1ed2c:	mov	r3, #0
   1ed30:	add	r1, sp, #328	; 0x148
   1ed34:	strd	r2, [r1]
   1ed38:	mov	r1, #1
   1ed3c:	bl	21710 <flatcc_builder_extend_vector@@Base>
   1ed40:	subs	sl, r0, #0
   1ed44:	beq	1bc20 <_start@@Base+0x6944>
   1ed48:	add	r8, sp, #328	; 0x148
   1ed4c:	mov	r1, r4
   1ed50:	mov	r3, r8
   1ed54:	mov	r2, r6
   1ed58:	mov	r0, r5
   1ed5c:	bl	17968 <_start@@Base+0x268c>
   1ed60:	cmp	r4, r0
   1ed64:	mov	r7, r0
   1ed68:	movne	r4, r0
   1ed6c:	bne	1ed98 <_start@@Base+0x9abc>
   1ed70:	mov	r1, r4
   1ed74:	mov	r3, r9
   1ed78:	str	r8, [sp]
   1ed7c:	mov	r2, r6
   1ed80:	mov	r0, r5
   1ed84:	bl	1a4a0 <_start@@Base+0x51c4>
   1ed88:	cmp	r6, r0
   1ed8c:	cmpne	r7, r0
   1ed90:	mov	r4, r0
   1ed94:	beq	1bc20 <_start@@Base+0x6944>
   1ed98:	add	r3, sp, #328	; 0x148
   1ed9c:	mov	r1, r4
   1eda0:	ldrd	r2, [r3]
   1eda4:	mov	r0, r5
   1eda8:	strd	r2, [sl]
   1edac:	add	r3, sp, #308	; 0x134
   1edb0:	mov	r2, r6
   1edb4:	bl	16f10 <_start@@Base+0x1c34>
   1edb8:	mov	r4, r0
   1edbc:	b	1ece8 <_start@@Base+0x9a0c>
   1edc0:	mov	r1, r0
   1edc4:	mov	r2, r6
   1edc8:	mov	r0, r5
   1edcc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1edd0:	mov	r4, r0
   1edd4:	b	1b9b8 <_start@@Base+0x66dc>
   1edd8:	mov	r2, r6
   1eddc:	mov	r1, r8
   1ede0:	mov	r0, r5
   1ede4:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ede8:	mov	r4, r0
   1edec:	b	1b9b8 <_start@@Base+0x66dc>
   1edf0:	mov	r2, r6
   1edf4:	mov	r1, r7
   1edf8:	mov	r0, r5
   1edfc:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee00:	mov	r4, r0
   1ee04:	b	1b9b8 <_start@@Base+0x66dc>
   1ee08:	mov	r1, r4
   1ee0c:	mov	r2, r6
   1ee10:	ldr	r3, [sp, #316]	; 0x13c
   1ee14:	mov	r0, r5
   1ee18:	bl	26a2c <flatcc_json_parser_finalize_unions@@Base>
   1ee1c:	mov	r4, r0
   1ee20:	ldr	r0, [r5]
   1ee24:	bl	22310 <flatcc_builder_end_table@@Base>
   1ee28:	ldr	r3, [sp, #92]	; 0x5c
   1ee2c:	cmp	r0, #0
   1ee30:	str	r0, [r3]
   1ee34:	beq	1bc20 <_start@@Base+0x6944>
   1ee38:	mov	r0, r4
   1ee3c:	add	sp, sp, #340	; 0x154
   1ee40:	vpop	{d8}
   1ee44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee48:	mov	r1, r4
   1ee4c:	mov	r2, r6
   1ee50:	mov	r0, r5
   1ee54:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee58:	mov	r4, r0
   1ee5c:	b	1b9b8 <_start@@Base+0x66dc>
   1ee60:	svcvs	0x00725f6f
   1ee64:			; <UNDEFINED> instruction: 0x76656374
   1ee68:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1ee6c:	ldrbvs	r6, [pc], -pc, ror #8
	...
   1ee78:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1ee7c:	ldrbvs	r6, [pc], -pc, ror #24
   1ee80:	strdeq	r5, [r4], -r4
   1ee84:	andeq	r5, r4, r0, lsl #6
   1ee88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee8c:	sub	sp, sp, #44	; 0x2c
   1ee90:	mov	r6, r2
   1ee94:	mov	r2, #0
   1ee98:	mov	r5, r0
   1ee9c:	mov	r4, r1
   1eea0:	ldr	r8, [sp, #80]	; 0x50
   1eea4:	str	r2, [r8]
   1eea8:	cmp	r3, #4
   1eeac:	ldrls	pc, [pc, r3, lsl #2]
   1eeb0:	b	1f324 <_start@@Base+0xa048>
   1eeb4:	andeq	lr, r1, r8, asr #29
   1eeb8:	ldrdeq	lr, [r1], -r8
   1eebc:	andeq	lr, r1, r4, lsl pc
   1eec0:	andeq	pc, r1, r4, lsl #6
   1eec4:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1eec8:	mov	r2, r6
   1eecc:	bl	163c8 <_start@@Base+0x10ec>
   1eed0:	add	sp, sp, #44	; 0x2c
   1eed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eed8:	mov	r3, r8
   1eedc:	mov	r2, r6
   1eee0:	bl	1b818 <_start@@Base+0x653c>
   1eee4:	ldr	r3, [r5, #24]
   1eee8:	cmp	r3, #0
   1eeec:	bne	1eed0 <_start@@Base+0x9bf4>
   1eef0:	ldr	r3, [r8]
   1eef4:	cmp	r3, #0
   1eef8:	bne	1eed0 <_start@@Base+0x9bf4>
   1eefc:	mov	r3, #33	; 0x21
   1ef00:	mov	r2, r6
   1ef04:	mov	r1, r0
   1ef08:	mov	r0, r5
   1ef0c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1ef10:	b	1eed0 <_start@@Base+0x9bf4>
   1ef14:	mov	r1, #4
   1ef18:	ldr	r0, [r0]
   1ef1c:	bl	21ce8 <flatcc_builder_start_table@@Base>
   1ef20:	cmp	r0, #0
   1ef24:	bne	1ef6c <_start@@Base+0x9c90>
   1ef28:	add	r3, sp, #36	; 0x24
   1ef2c:	mov	r2, r6
   1ef30:	mov	r1, r4
   1ef34:	mov	r0, r5
   1ef38:	bl	18644 <_start@@Base+0x3368>
   1ef3c:	ldr	r3, [sp, #36]	; 0x24
   1ef40:	mov	r4, r0
   1ef44:	cmp	r3, #0
   1ef48:	bne	1ef8c <_start@@Base+0x9cb0>
   1ef4c:	ldr	r3, [r5, #24]
   1ef50:	cmp	r3, #0
   1ef54:	bne	1ef6c <_start@@Base+0x9c90>
   1ef58:	ldr	r0, [r5]
   1ef5c:	bl	22310 <flatcc_builder_end_table@@Base>
   1ef60:	cmp	r0, #0
   1ef64:	str	r0, [r8]
   1ef68:	bne	1ef84 <_start@@Base+0x9ca8>
   1ef6c:	mov	r1, r4
   1ef70:	mov	r3, #33	; 0x21
   1ef74:	mov	r2, r6
   1ef78:	mov	r0, r5
   1ef7c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   1ef80:	mov	r4, r0
   1ef84:	mov	r0, r4
   1ef88:	b	1eee4 <_start@@Base+0x9c08>
   1ef8c:	mov	r2, r6
   1ef90:	mov	r1, r4
   1ef94:	mov	r0, r5
   1ef98:	bl	17a14 <_start@@Base+0x2738>
   1ef9c:	mov	r1, r6
   1efa0:	mov	r4, r0
   1efa4:	bl	153d0 <_start@@Base+0xf4>
   1efa8:	lsr	r3, r0, #16
   1efac:	mov	r9, r1
   1efb0:	mov	ip, r0
   1efb4:	add	r1, pc, #908	; 0x38c
   1efb8:	ldrd	r0, [r1]
   1efbc:	lsl	r3, r3, #16
   1efc0:	str	r3, [sp, #8]
   1efc4:	str	r9, [sp, #12]
   1efc8:	ldrd	r2, [sp, #8]
   1efcc:	cmp	r3, r1
   1efd0:	cmpeq	r2, r0
   1efd4:	bne	1f0a0 <_start@@Base+0x9dc4>
   1efd8:	mov	r3, #6
   1efdc:	mov	r2, r6
   1efe0:	mov	r1, r4
   1efe4:	mov	r0, r5
   1efe8:	bl	18798 <_start@@Base+0x34bc>
   1efec:	cmp	r4, r0
   1eff0:	mov	r7, r0
   1eff4:	beq	1f164 <_start@@Base+0x9e88>
   1eff8:	mov	r3, #0
   1effc:	add	r9, sp, #35	; 0x23
   1f000:	mov	r1, r0
   1f004:	mov	r2, r6
   1f008:	mov	r0, r5
   1f00c:	strb	r3, [sp, #35]	; 0x23
   1f010:	mov	r3, r9
   1f014:	bl	19558 <_start@@Base+0x427c>
   1f018:	cmp	r7, r0
   1f01c:	mov	r4, r0
   1f020:	bne	1f04c <_start@@Base+0x9d70>
   1f024:	mov	r1, r0
   1f028:	ldr	r3, [pc, #816]	; 1f360 <_start@@Base+0xa084>
   1f02c:	mov	r2, r6
   1f030:	mov	r0, r5
   1f034:	str	r9, [sp]
   1f038:	bl	1a1d0 <_start@@Base+0x4ef4>
   1f03c:	cmp	r6, r0
   1f040:	cmpne	r4, r0
   1f044:	mov	r4, r0
   1f048:	beq	1ef6c <_start@@Base+0x9c90>
   1f04c:	ldrsb	r3, [sp, #35]	; 0x23
   1f050:	cmp	r3, #2
   1f054:	bne	1f064 <_start@@Base+0x9d88>
   1f058:	ldr	r3, [r5, #8]
   1f05c:	tst	r3, #2
   1f060:	beq	1f088 <_start@@Base+0x9dac>
   1f064:	mov	r3, #1
   1f068:	mov	r2, r3
   1f06c:	mov	r1, r3
   1f070:	ldr	r0, [r5]
   1f074:	bl	22c6c <flatcc_builder_table_add@@Base>
   1f078:	cmp	r0, #0
   1f07c:	beq	1ef6c <_start@@Base+0x9c90>
   1f080:	ldrsb	r3, [sp, #35]	; 0x23
   1f084:	strb	r3, [r0]
   1f088:	add	r3, sp, #36	; 0x24
   1f08c:	mov	r2, r6
   1f090:	mov	r1, r4
   1f094:	mov	r0, r5
   1f098:	bl	16fc8 <_start@@Base+0x1cec>
   1f09c:	b	1ef3c <_start@@Base+0x9c60>
   1f0a0:	and	r3, ip, #-16777216	; 0xff000000
   1f0a4:	add	r1, pc, #676	; 0x2a4
   1f0a8:	ldrd	r0, [r1]
   1f0ac:	str	r3, [sp, #16]
   1f0b0:	str	r9, [sp, #20]
   1f0b4:	ldrd	r2, [sp, #16]
   1f0b8:	cmp	r3, r1
   1f0bc:	cmpeq	r2, r0
   1f0c0:	movne	r7, r4
   1f0c4:	bne	1f164 <_start@@Base+0x9e88>
   1f0c8:	mov	r3, #5
   1f0cc:	mov	r2, r6
   1f0d0:	mov	r1, r4
   1f0d4:	mov	r0, r5
   1f0d8:	bl	18798 <_start@@Base+0x34bc>
   1f0dc:	cmp	r4, r0
   1f0e0:	mov	r7, r0
   1f0e4:	beq	1f164 <_start@@Base+0x9e88>
   1f0e8:	mov	r3, #0
   1f0ec:	add	r9, sp, #35	; 0x23
   1f0f0:	mov	r1, r0
   1f0f4:	mov	r2, r6
   1f0f8:	mov	r0, r5
   1f0fc:	strb	r3, [sp, #35]	; 0x23
   1f100:	mov	r3, r9
   1f104:	bl	19558 <_start@@Base+0x427c>
   1f108:	cmp	r7, r0
   1f10c:	mov	r4, r0
   1f110:	bne	1f13c <_start@@Base+0x9e60>
   1f114:	mov	r1, r0
   1f118:	ldr	r3, [pc, #580]	; 1f364 <_start@@Base+0xa088>
   1f11c:	mov	r2, r6
   1f120:	mov	r0, r5
   1f124:	str	r9, [sp]
   1f128:	bl	1a1d0 <_start@@Base+0x4ef4>
   1f12c:	cmp	r6, r0
   1f130:	cmpne	r4, r0
   1f134:	mov	r4, r0
   1f138:	beq	1ef6c <_start@@Base+0x9c90>
   1f13c:	ldrsb	r3, [sp, #35]	; 0x23
   1f140:	cmp	r3, #2
   1f144:	bne	1f154 <_start@@Base+0x9e78>
   1f148:	ldr	r3, [r5, #8]
   1f14c:	tst	r3, #2
   1f150:	beq	1f088 <_start@@Base+0x9dac>
   1f154:	mov	r3, #1
   1f158:	mov	r1, #0
   1f15c:	mov	r2, r3
   1f160:	b	1f070 <_start@@Base+0x9d94>
   1f164:	bic	r3, r9, #255	; 0xff
   1f168:	mov	r4, #0
   1f16c:	add	r1, pc, #484	; 0x1e4
   1f170:	ldrd	r0, [r1]
   1f174:	str	r4, [sp, #24]
   1f178:	str	r3, [sp, #28]
   1f17c:	ldrd	r2, [sp, #24]
   1f180:	cmp	r3, r1
   1f184:	cmpeq	r2, r0
   1f188:	bne	1f238 <_start@@Base+0x9f5c>
   1f18c:	mov	r3, #3
   1f190:	mov	r2, r6
   1f194:	mov	r1, r7
   1f198:	mov	r0, r5
   1f19c:	bl	18798 <_start@@Base+0x34bc>
   1f1a0:	cmp	r7, r0
   1f1a4:	mov	r9, r0
   1f1a8:	beq	1f2ec <_start@@Base+0xa010>
   1f1ac:	add	r7, sp, #35	; 0x23
   1f1b0:	mov	r1, r0
   1f1b4:	strb	r4, [sp, #35]	; 0x23
   1f1b8:	mov	r3, r7
   1f1bc:	mov	r2, r6
   1f1c0:	mov	r0, r5
   1f1c4:	bl	191bc <_start@@Base+0x3ee0>
   1f1c8:	cmp	r9, r0
   1f1cc:	mov	r4, r0
   1f1d0:	bne	1f1fc <_start@@Base+0x9f20>
   1f1d4:	mov	r1, r0
   1f1d8:	ldr	r3, [pc, #392]	; 1f368 <_start@@Base+0xa08c>
   1f1dc:	mov	r2, r6
   1f1e0:	mov	r0, r5
   1f1e4:	str	r7, [sp]
   1f1e8:	bl	19600 <_start@@Base+0x4324>
   1f1ec:	cmp	r6, r0
   1f1f0:	cmpne	r4, r0
   1f1f4:	mov	r4, r0
   1f1f8:	beq	1ef6c <_start@@Base+0x9c90>
   1f1fc:	ldrb	r3, [sp, #35]	; 0x23
   1f200:	cmp	r3, #2
   1f204:	bne	1f214 <_start@@Base+0x9f38>
   1f208:	ldr	r3, [r5, #8]
   1f20c:	tst	r3, #2
   1f210:	beq	1f088 <_start@@Base+0x9dac>
   1f214:	mov	r3, #1
   1f218:	mov	r1, #3
   1f21c:	mov	r2, r3
   1f220:	ldr	r0, [r5]
   1f224:	bl	22c6c <flatcc_builder_table_add@@Base>
   1f228:	cmp	r0, #0
   1f22c:	beq	1ef6c <_start@@Base+0x9c90>
   1f230:	ldrb	r3, [sp, #35]	; 0x23
   1f234:	b	1f084 <_start@@Base+0x9da8>
   1f238:	ldr	r3, [pc, #300]	; 1f36c <_start@@Base+0xa090>
   1f23c:	lsr	fp, r9, #16
   1f240:	mov	r2, #0
   1f244:	lsl	fp, fp, #16
   1f248:	cmp	fp, r3
   1f24c:	cmpeq	r4, r2
   1f250:	bne	1f2ec <_start@@Base+0xa010>
   1f254:	mov	r3, #2
   1f258:	mov	r2, r6
   1f25c:	mov	r1, r7
   1f260:	mov	r0, r5
   1f264:	bl	18798 <_start@@Base+0x34bc>
   1f268:	cmp	r7, r0
   1f26c:	mov	r9, r0
   1f270:	beq	1f2ec <_start@@Base+0xa010>
   1f274:	add	r7, sp, #35	; 0x23
   1f278:	mov	r1, r0
   1f27c:	strb	r4, [sp, #35]	; 0x23
   1f280:	mov	r3, r7
   1f284:	mov	r2, r6
   1f288:	mov	r0, r5
   1f28c:	bl	191bc <_start@@Base+0x3ee0>
   1f290:	cmp	r9, r0
   1f294:	mov	r4, r0
   1f298:	bne	1f2c4 <_start@@Base+0x9fe8>
   1f29c:	mov	r1, r0
   1f2a0:	ldr	r3, [pc, #200]	; 1f370 <_start@@Base+0xa094>
   1f2a4:	mov	r2, r6
   1f2a8:	mov	r0, r5
   1f2ac:	str	r7, [sp]
   1f2b0:	bl	19600 <_start@@Base+0x4324>
   1f2b4:	cmp	r6, r0
   1f2b8:	cmpne	r4, r0
   1f2bc:	mov	r4, r0
   1f2c0:	beq	1ef6c <_start@@Base+0x9c90>
   1f2c4:	ldrb	r3, [sp, #35]	; 0x23
   1f2c8:	cmp	r3, #2
   1f2cc:	bne	1f2dc <_start@@Base+0xa000>
   1f2d0:	ldr	r3, [r5, #8]
   1f2d4:	tst	r3, #2
   1f2d8:	beq	1f088 <_start@@Base+0x9dac>
   1f2dc:	mov	r3, #1
   1f2e0:	mov	r1, #2
   1f2e4:	mov	r2, r3
   1f2e8:	b	1f220 <_start@@Base+0x9f44>
   1f2ec:	mov	r2, r6
   1f2f0:	mov	r1, r7
   1f2f4:	mov	r0, r5
   1f2f8:	bl	26394 <flatcc_json_parser_unmatched_symbol@@Base>
   1f2fc:	mov	r4, r0
   1f300:	b	1f088 <_start@@Base+0x9dac>
   1f304:	mov	r3, r8
   1f308:	mov	r2, r6
   1f30c:	bl	186cc <_start@@Base+0x33f0>
   1f310:	b	1eee4 <_start@@Base+0x9c08>
   1f314:	mov	r3, r8
   1f318:	mov	r2, r6
   1f31c:	bl	1a5dc <_start@@Base+0x5300>
   1f320:	b	1eee4 <_start@@Base+0x9c08>
   1f324:	ldr	r3, [r0, #8]
   1f328:	tst	r3, #1
   1f32c:	moveq	r3, #15
   1f330:	moveq	r2, r6
   1f334:	beq	1ef08 <_start@@Base+0x9c2c>
   1f338:	mov	r2, r6
   1f33c:	mov	r1, r4
   1f340:	bl	25ea0 <flatcc_json_parser_generic_json@@Base>
   1f344:	b	1eed0 <_start@@Base+0x9bf4>
   1f348:	eorsvc	r0, r2, #0
   1f34c:	cmnvs	pc, #28416	; 0x6f00
   1f350:	andvc	r0, r0, #0
   1f354:	cmnvs	pc, #28416	; 0x6f00
   1f358:	andeq	r0, r0, r0
   1f35c:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   1f360:	andeq	r5, r4, ip, lsl #6
   1f364:	andeq	r5, r4, ip, lsl r3
   1f368:	andeq	r5, r4, ip, lsr #6
   1f36c:	strbvc	r0, [r3, #-0]!
   1f370:	andeq	r5, r4, r8, lsr r3
   1f374:	mov	r3, #8
   1f378:	push	{r4, lr}
   1f37c:	mov	r1, #0
   1f380:	mov	r2, r3
   1f384:	mov	r4, r0
   1f388:	bl	23b58 <flatcc_verify_field@@Base>
   1f38c:	cmp	r0, #0
   1f390:	popne	{r4, pc}
   1f394:	mov	r3, #4
   1f398:	mov	r0, r4
   1f39c:	pop	{r4, lr}
   1f3a0:	mov	r2, r3
   1f3a4:	mov	r1, #1
   1f3a8:	b	23b58 <flatcc_verify_field@@Base>
   1f3ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3b0:	sub	sp, sp, #20
   1f3b4:	mov	r6, r3
   1f3b8:	mov	r4, r1
   1f3bc:	mov	r7, r0
   1f3c0:	mov	r1, r2
   1f3c4:	mov	r0, r4
   1f3c8:	ldr	r3, [sp, #56]	; 0x38
   1f3cc:	mov	r5, r2
   1f3d0:	ldr	sl, [sp, #60]	; 0x3c
   1f3d4:	str	r3, [sp, #12]
   1f3d8:	bl	153d0 <_start@@Base+0xf4>
   1f3dc:	add	r3, pc, #708	; 0x2c4
   1f3e0:	ldrd	r2, [r3]
   1f3e4:	cmp	r1, r3
   1f3e8:	cmpeq	r0, r2
   1f3ec:	bhi	1f4ec <_start@@Base+0xa210>
   1f3f0:	add	r3, pc, #696	; 0x2b8
   1f3f4:	ldrd	r2, [r3]
   1f3f8:	mov	r8, #0
   1f3fc:	bic	r9, r1, #255	; 0xff
   1f400:	cmp	r1, r3
   1f404:	cmpeq	r0, r2
   1f408:	bhi	1f454 <_start@@Base+0xa178>
   1f40c:	add	r3, pc, #676	; 0x2a4
   1f410:	ldrd	r2, [r3]
   1f414:	cmp	r9, r3
   1f418:	cmpeq	r8, r2
   1f41c:	bne	1f69c <_start@@Base+0xa3c0>
   1f420:	mov	r1, r5
   1f424:	mov	r2, #3
   1f428:	mov	r0, r4
   1f42c:	bl	17080 <_start@@Base+0x1da4>
   1f430:	cmp	r4, r0
   1f434:	mov	r1, r0
   1f438:	beq	1f69c <_start@@Base+0xa3c0>
   1f43c:	mov	r3, r6
   1f440:	mov	r2, r5
   1f444:	mov	r0, r7
   1f448:	add	sp, sp, #20
   1f44c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f450:	b	166d0 <_start@@Base+0x13f4>
   1f454:	add	r3, pc, #612	; 0x264
   1f458:	ldrd	r2, [r3]
   1f45c:	cmp	r9, r3
   1f460:	cmpeq	r8, r2
   1f464:	bne	1f49c <_start@@Base+0xa1c0>
   1f468:	mov	r1, r5
   1f46c:	mov	r2, #3
   1f470:	mov	r0, r4
   1f474:	bl	17080 <_start@@Base+0x1da4>
   1f478:	cmp	r4, r0
   1f47c:	mov	r1, r0
   1f480:	beq	1f69c <_start@@Base+0xa3c0>
   1f484:	mov	r3, r6
   1f488:	mov	r2, r5
   1f48c:	mov	r0, r7
   1f490:	add	sp, sp, #20
   1f494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f498:	b	17df0 <_start@@Base+0x2b14>
   1f49c:	and	r2, r0, #-16777216	; 0xff000000
   1f4a0:	mov	r3, r1
   1f4a4:	add	r1, pc, #540	; 0x21c
   1f4a8:	ldrd	r0, [r1]
   1f4ac:	cmp	r3, r1
   1f4b0:	cmpeq	r2, r0
   1f4b4:	bne	1f69c <_start@@Base+0xa3c0>
   1f4b8:	mov	r1, r5
   1f4bc:	mov	r2, #5
   1f4c0:	mov	r0, r4
   1f4c4:	bl	17080 <_start@@Base+0x1da4>
   1f4c8:	cmp	r4, r0
   1f4cc:	mov	r1, r0
   1f4d0:	beq	1f69c <_start@@Base+0xa3c0>
   1f4d4:	mov	r3, r6
   1f4d8:	mov	r2, r5
   1f4dc:	mov	r0, r7
   1f4e0:	add	sp, sp, #20
   1f4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4e8:	b	16da0 <_start@@Base+0x1ac4>
   1f4ec:	add	r3, pc, #476	; 0x1dc
   1f4f0:	ldrd	r2, [r3]
   1f4f4:	cmp	r1, r3
   1f4f8:	cmpeq	r0, r2
   1f4fc:	bhi	1f548 <_start@@Base+0xa26c>
   1f500:	add	r3, pc, #464	; 0x1d0
   1f504:	ldrd	r2, [r3]
   1f508:	cmp	r1, r3
   1f50c:	cmpeq	r0, r2
   1f510:	bne	1f69c <_start@@Base+0xa3c0>
   1f514:	mov	r1, r5
   1f518:	mov	r2, #8
   1f51c:	mov	r0, r4
   1f520:	bl	17080 <_start@@Base+0x1da4>
   1f524:	cmp	r4, r0
   1f528:	mov	r1, r0
   1f52c:	beq	1f69c <_start@@Base+0xa3c0>
   1f530:	mov	r3, r6
   1f534:	mov	r2, r5
   1f538:	mov	r0, r7
   1f53c:	add	sp, sp, #20
   1f540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f544:	b	16950 <_start@@Base+0x1674>
   1f548:	add	r3, pc, #400	; 0x190
   1f54c:	ldrd	r2, [r3]
   1f550:	cmp	r1, r3
   1f554:	cmpeq	r0, r2
   1f558:	bhi	1f5a4 <_start@@Base+0xa2c8>
   1f55c:	add	r3, pc, #388	; 0x184
   1f560:	ldrd	r2, [r3]
   1f564:	cmp	r1, r3
   1f568:	cmpeq	r0, r2
   1f56c:	bne	1f69c <_start@@Base+0xa3c0>
   1f570:	mov	r1, r5
   1f574:	mov	r2, #8
   1f578:	mov	r0, r4
   1f57c:	bl	17080 <_start@@Base+0x1da4>
   1f580:	cmp	r4, r0
   1f584:	mov	r1, r0
   1f588:	beq	1f69c <_start@@Base+0xa3c0>
   1f58c:	mov	r3, r6
   1f590:	mov	r2, r5
   1f594:	mov	r0, r7
   1f598:	add	sp, sp, #20
   1f59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5a0:	b	16ab8 <_start@@Base+0x17dc>
   1f5a4:	add	r3, pc, #324	; 0x144
   1f5a8:	ldrd	r2, [r3]
   1f5ac:	cmp	r1, r3
   1f5b0:	cmpeq	r0, r2
   1f5b4:	bne	1f5ec <_start@@Base+0xa310>
   1f5b8:	mov	r1, r5
   1f5bc:	mov	r2, #8
   1f5c0:	mov	r0, r4
   1f5c4:	bl	17080 <_start@@Base+0x1da4>
   1f5c8:	cmp	r4, r0
   1f5cc:	mov	r1, r0
   1f5d0:	beq	1f69c <_start@@Base+0xa3c0>
   1f5d4:	mov	r3, r6
   1f5d8:	mov	r2, r5
   1f5dc:	mov	r0, r7
   1f5e0:	add	sp, sp, #20
   1f5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5e8:	b	16c68 <_start@@Base+0x198c>
   1f5ec:	add	r3, pc, #260	; 0x104
   1f5f0:	ldrd	r2, [r3]
   1f5f4:	cmp	r1, r3
   1f5f8:	cmpeq	r0, r2
   1f5fc:	bne	1f69c <_start@@Base+0xa3c0>
   1f600:	add	r8, r4, #8
   1f604:	mov	r1, r5
   1f608:	mov	r0, r8
   1f60c:	mov	r9, #0
   1f610:	bl	153d0 <_start@@Base+0xf4>
   1f614:	mov	r3, r1
   1f618:	add	r1, pc, #224	; 0xe0
   1f61c:	ldrd	r0, [r1]
   1f620:	cmp	r3, r1
   1f624:	cmpeq	r9, r0
   1f628:	bne	1f69c <_start@@Base+0xa3c0>
   1f62c:	mov	r2, #4
   1f630:	mov	r1, r5
   1f634:	mov	r0, r8
   1f638:	bl	17080 <_start@@Base+0x1da4>
   1f63c:	cmp	r8, r0
   1f640:	mov	fp, r0
   1f644:	beq	1f69c <_start@@Base+0xa3c0>
   1f648:	mov	r1, r5
   1f64c:	bl	153d0 <_start@@Base+0xf4>
   1f650:	and	r3, r1, #-16777216	; 0xff000000
   1f654:	cmp	r3, #2013265920	; 0x78000000
   1f658:	cmpeq	r9, #0
   1f65c:	movne	r4, fp
   1f660:	bne	1f69c <_start@@Base+0xa3c0>
   1f664:	mov	r3, #1
   1f668:	mov	r2, r5
   1f66c:	str	sl, [sp]
   1f670:	mov	r1, fp
   1f674:	mov	r0, r7
   1f678:	bl	25ba4 <flatcc_json_parser_match_constant@@Base>
   1f67c:	cmp	fp, r0
   1f680:	mov	r4, r0
   1f684:	beq	1f69c <_start@@Base+0xa3c0>
   1f688:	ldr	r1, [sp, #12]
   1f68c:	mov	r2, #0
   1f690:	mov	r3, #0
   1f694:	strd	r2, [r1]
   1f698:	str	r9, [r6]
   1f69c:	mov	r0, r4
   1f6a0:	add	sp, sp, #20
   1f6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6a8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f6ac:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f6b0:	ldrshvc	pc, [pc, #255]	; 1f7b7 <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   1f6b4:	cmnmi	pc, #28416	; 0x6f00
   1f6b8:	andeq	r0, r0, r0
   1f6bc:	cmnmi	lr, r0, lsl #18
   1f6c0:	andeq	r0, r0, r0
   1f6c4:	strbtmi	r6, [pc], -r0, lsl #30
   1f6c8:	andvc	r0, r0, #0
   1f6cc:	cmnmi	pc, #28416	; 0x6f00
   1f6d0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f6d4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f6d8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f6dc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f6e0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f6e4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1f6e8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f6ec:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f6f0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f6f4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1f6f8:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1f6fc:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1f700:	andeq	r0, r0, r0
   1f704:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

0001f708 <test_json@@Base>:
   1f708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f70c:	sub	sp, sp, #380	; 0x17c
   1f710:	mov	r4, r0
   1f714:	add	r0, sp, #144	; 0x90
   1f718:	mov	r7, r1
   1f71c:	mov	r8, r2
   1f720:	mov	r6, r3
   1f724:	ldr	r5, [sp, #420]	; 0x1a4
   1f728:	bl	20e2c <flatcc_builder_init@@Base>
   1f72c:	mov	r1, #0
   1f730:	add	r0, sp, #96	; 0x60
   1f734:	bl	2df2c <flatcc_json_printer_init_dynamic_buffer@@Base>
   1f738:	mov	r0, r7
   1f73c:	and	r3, r5, #1
   1f740:	tst	r5, #16
   1f744:	strb	r3, [sp, #122]	; 0x7a
   1f748:	ubfx	r3, r5, #1, #1
   1f74c:	strb	r3, [sp, #123]	; 0x7b
   1f750:	ubfx	r3, r5, #2, #1
   1f754:	strb	r3, [sp, #124]	; 0x7c
   1f758:	ubfx	r3, r5, #3, #1
   1f75c:	strb	r3, [sp, #125]	; 0x7d
   1f760:	movne	r3, #2
   1f764:	strbne	r3, [sp, #121]	; 0x79
   1f768:	tst	r5, #32
   1f76c:	movne	r3, #2
   1f770:	strbne	r3, [sp, #121]	; 0x79
   1f774:	movne	r3, #1
   1f778:	strhne	r3, [sp, #122]	; 0x7a
   1f77c:	bl	1459c <strlen@plt>
   1f780:	ldr	r3, [r4, #4]
   1f784:	mov	r2, r7
   1f788:	add	r1, sp, #52	; 0x34
   1f78c:	str	r3, [sp, #8]
   1f790:	ldr	r3, [r4]
   1f794:	str	r3, [sp, #4]
   1f798:	ldr	r3, [sp, #416]	; 0x1a0
   1f79c:	str	r3, [sp]
   1f7a0:	mov	r3, r0
   1f7a4:	add	r0, sp, #144	; 0x90
   1f7a8:	bl	2705c <flatcc_json_parser_table_as_root@@Base>
   1f7ac:	cmp	r0, r6
   1f7b0:	beq	1f8a0 <test_json@@Base+0x198>
   1f7b4:	ldr	r4, [pc, #716]	; 1fa88 <test_json@@Base+0x380>
   1f7b8:	cmp	r6, #0
   1f7bc:	ldr	r5, [r4]
   1f7c0:	beq	1f87c <test_json@@Base+0x174>
   1f7c4:	cmp	r0, #0
   1f7c8:	beq	1f85c <test_json@@Base+0x154>
   1f7cc:	bl	251a8 <flatcc_json_parser_error_string@@Base>
   1f7d0:	mov	r3, r0
   1f7d4:	ldr	r1, [pc, #688]	; 1fa8c <test_json@@Base+0x384>
   1f7d8:	mov	r0, r5
   1f7dc:	ldr	r2, [sp, #424]	; 0x1a8
   1f7e0:	bl	145a8 <fprintf@plt>
   1f7e4:	ldr	r5, [r4]
   1f7e8:	mov	r0, r6
   1f7ec:	bl	251a8 <flatcc_json_parser_error_string@@Base>
   1f7f0:	mov	r2, r0
   1f7f4:	ldr	r1, [pc, #660]	; 1fa90 <test_json@@Base+0x388>
   1f7f8:	mov	r0, r5
   1f7fc:	bl	145a8 <fprintf@plt>
   1f800:	mov	r2, r7
   1f804:	ldr	r1, [pc, #648]	; 1fa94 <test_json@@Base+0x38c>
   1f808:	mov	r5, #0
   1f80c:	ldr	r0, [r4]
   1f810:	bl	145a8 <fprintf@plt>
   1f814:	ldr	r3, [sp, #72]	; 0x48
   1f818:	ldr	r1, [r4]
   1f81c:	sub	r3, r3, #1
   1f820:	cmp	r3, r5
   1f824:	bgt	1f890 <test_json@@Base+0x188>
   1f828:	ldr	r0, [pc, #616]	; 1fa98 <test_json@@Base+0x390>
   1f82c:	mov	r5, #0
   1f830:	bl	14608 <fputs@plt>
   1f834:	mvn	r4, #0
   1f838:	mov	r0, r5
   1f83c:	bl	2337c <flatcc_builder_aligned_free@@Base>
   1f840:	add	r0, sp, #144	; 0x90
   1f844:	bl	20fa8 <flatcc_builder_clear@@Base>
   1f848:	add	r0, sp, #96	; 0x60
   1f84c:	bl	2e010 <flatcc_json_printer_clear@@Base>
   1f850:	mov	r0, r4
   1f854:	add	sp, sp, #380	; 0x17c
   1f858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f85c:	mov	r0, r6
   1f860:	bl	251a8 <flatcc_json_parser_error_string@@Base>
   1f864:	ldr	r1, [pc, #560]	; 1fa9c <test_json@@Base+0x394>
   1f868:	mov	r3, r0
   1f86c:	ldr	r2, [sp, #424]	; 0x1a8
   1f870:	mov	r0, r5
   1f874:	bl	145a8 <fprintf@plt>
   1f878:	b	1f800 <test_json@@Base+0xf8>
   1f87c:	bl	251a8 <flatcc_json_parser_error_string@@Base>
   1f880:	mov	r3, r0
   1f884:	ldr	r1, [pc, #532]	; 1faa0 <test_json@@Base+0x398>
   1f888:	ldr	r2, [sp, #424]	; 0x1a8
   1f88c:	b	1f870 <test_json@@Base+0x168>
   1f890:	mov	r0, #32
   1f894:	add	r5, r5, #1
   1f898:	bl	145f0 <fputc@plt>
   1f89c:	b	1f814 <test_json@@Base+0x10c>
   1f8a0:	cmp	r6, #0
   1f8a4:	movne	r5, #0
   1f8a8:	movne	r4, r5
   1f8ac:	bne	1f838 <test_json@@Base+0x130>
   1f8b0:	add	r1, sp, #24
   1f8b4:	add	r0, sp, #144	; 0x90
   1f8b8:	bl	232f0 <flatcc_builder_finalize_aligned_buffer@@Base>
   1f8bc:	ldr	r2, [r4]
   1f8c0:	mov	r5, r0
   1f8c4:	ldr	r3, [r4, #12]
   1f8c8:	ldr	r1, [sp, #24]
   1f8cc:	bl	23fcc <flatcc_verify_table_as_root@@Base>
   1f8d0:	cmp	r0, #0
   1f8d4:	beq	1f968 <test_json@@Base+0x260>
   1f8d8:	ldr	r3, [pc, #424]	; 1fa88 <test_json@@Base+0x380>
   1f8dc:	ldr	r4, [r3]
   1f8e0:	bl	23b3c <flatcc_verify_error_string@@Base>
   1f8e4:	ldr	r2, [pc, #440]	; 1faa4 <test_json@@Base+0x39c>
   1f8e8:	str	r0, [sp]
   1f8ec:	ldr	r1, [pc, #436]	; 1faa8 <test_json@@Base+0x3a0>
   1f8f0:	mov	r0, r4
   1f8f4:	ldr	r3, [sp, #424]	; 0x1a8
   1f8f8:	bl	145a8 <fprintf@plt>
   1f8fc:	cmp	r5, #0
   1f900:	beq	1f834 <test_json@@Base+0x12c>
   1f904:	ldr	r3, [sp, #24]
   1f908:	sub	r7, r5, #1
   1f90c:	mov	r8, #0
   1f910:	ldr	r2, [pc, #404]	; 1faac <test_json@@Base+0x3a4>
   1f914:	ldr	r1, [pc, #404]	; 1fab0 <test_json@@Base+0x3a8>
   1f918:	str	r3, [sp, #20]
   1f91c:	ldr	r3, [pc, #356]	; 1fa88 <test_json@@Base+0x380>
   1f920:	ldr	r9, [pc, #396]	; 1fab4 <test_json@@Base+0x3ac>
   1f924:	ldr	sl, [pc, #396]	; 1fab8 <test_json@@Base+0x3b0>
   1f928:	ldr	r4, [r3]
   1f92c:	ldr	fp, [pc, #392]	; 1fabc <test_json@@Base+0x3b4>
   1f930:	mov	r0, r4
   1f934:	bl	145a8 <fprintf@plt>
   1f938:	ldr	r3, [sp, #20]
   1f93c:	and	r6, r8, #15
   1f940:	cmp	r3, r8
   1f944:	bne	1f9f0 <test_json@@Base+0x2e8>
   1f948:	ldr	r6, [pc, #368]	; 1fac0 <test_json@@Base+0x3b8>
   1f94c:	tst	r8, #15
   1f950:	bne	1fa74 <test_json@@Base+0x36c>
   1f954:	add	r2, sp, #32
   1f958:	ldr	r1, [pc, #344]	; 1fab8 <test_json@@Base+0x3b0>
   1f95c:	mov	r0, r4
   1f960:	bl	145a8 <fprintf@plt>
   1f964:	b	1f834 <test_json@@Base+0x12c>
   1f968:	ldr	r3, [r4, #8]
   1f96c:	mov	r1, r5
   1f970:	add	r0, sp, #96	; 0x60
   1f974:	ldr	r2, [sp, #24]
   1f978:	str	r3, [sp]
   1f97c:	ldr	r3, [r4]
   1f980:	bl	2dbe8 <flatcc_json_printer_table_as_root@@Base>
   1f984:	add	r1, sp, #28
   1f988:	add	r0, sp, #96	; 0x60
   1f98c:	bl	2dfb8 <flatcc_json_printer_get_buffer@@Base>
   1f990:	subs	r6, r0, #0
   1f994:	beq	1f9ac <test_json@@Base+0x2a4>
   1f998:	mov	r1, r6
   1f99c:	mov	r0, r8
   1f9a0:	bl	14524 <strcmp@plt>
   1f9a4:	subs	r4, r0, #0
   1f9a8:	beq	1f838 <test_json@@Base+0x130>
   1f9ac:	ldr	r4, [pc, #212]	; 1fa88 <test_json@@Base+0x380>
   1f9b0:	ldr	r1, [pc, #268]	; 1fac4 <test_json@@Base+0x3bc>
   1f9b4:	ldr	r2, [sp, #424]	; 0x1a8
   1f9b8:	ldr	r0, [r4]
   1f9bc:	bl	145a8 <fprintf@plt>
   1f9c0:	mov	r2, r6
   1f9c4:	ldr	r1, [pc, #200]	; 1fa94 <test_json@@Base+0x38c>
   1f9c8:	ldr	r0, [r4]
   1f9cc:	bl	145a8 <fprintf@plt>
   1f9d0:	ldr	r0, [pc, #240]	; 1fac8 <test_json@@Base+0x3c0>
   1f9d4:	ldr	r1, [r4]
   1f9d8:	bl	14608 <fputs@plt>
   1f9dc:	mov	r2, r8
   1f9e0:	ldr	r1, [pc, #172]	; 1fa94 <test_json@@Base+0x38c>
   1f9e4:	ldr	r0, [r4]
   1f9e8:	bl	145a8 <fprintf@plt>
   1f9ec:	b	1f8fc <test_json@@Base+0x1f4>
   1f9f0:	cmp	r6, #0
   1f9f4:	bne	1fa5c <test_json@@Base+0x354>
   1f9f8:	cmp	r8, #0
   1f9fc:	beq	1fa10 <test_json@@Base+0x308>
   1fa00:	add	r2, sp, #32
   1fa04:	mov	r1, sl
   1fa08:	mov	r0, r4
   1fa0c:	bl	145a8 <fprintf@plt>
   1fa10:	mov	r2, r8
   1fa14:	mov	r1, r9
   1fa18:	mov	r0, r4
   1fa1c:	bl	145a8 <fprintf@plt>
   1fa20:	ldrb	r2, [r7, #1]!
   1fa24:	mov	r1, fp
   1fa28:	mov	r0, r4
   1fa2c:	bl	145a8 <fprintf@plt>
   1fa30:	add	r3, sp, #376	; 0x178
   1fa34:	add	r8, r8, #1
   1fa38:	add	r6, r3, r6
   1fa3c:	ldrb	r2, [r7]
   1fa40:	sub	r1, r2, #32
   1fa44:	cmp	r1, #94	; 0x5e
   1fa48:	movhi	r2, #46	; 0x2e
   1fa4c:	strb	r2, [r6, #-344]	; 0xfffffea8
   1fa50:	mov	r2, #0
   1fa54:	strb	r2, [r6, #-343]	; 0xfffffea9
   1fa58:	b	1f938 <test_json@@Base+0x230>
   1fa5c:	tst	r8, #7
   1fa60:	bne	1fa20 <test_json@@Base+0x318>
   1fa64:	mov	r1, r4
   1fa68:	mov	r0, #32
   1fa6c:	bl	145f0 <fputc@plt>
   1fa70:	b	1fa20 <test_json@@Base+0x318>
   1fa74:	mov	r1, r4
   1fa78:	mov	r0, r6
   1fa7c:	bl	14608 <fputs@plt>
   1fa80:	add	r8, r8, #1
   1fa84:	b	1f94c <test_json@@Base+0x244>
   1fa88:			; <UNDEFINED> instruction: 0x000453b8
   1fa8c:	ldrdeq	lr, [r2], -r1
   1fa90:	andeq	lr, r2, r8, lsl sp
   1fa94:	andeq	lr, r2, r2, lsr #28
   1fa98:	andeq	lr, r2, r8, asr sp
   1fa9c:	strdeq	lr, [r2], -r7
   1faa0:	andeq	lr, r2, r7, lsr sp
   1faa4:	andeq	lr, r2, fp, asr sp
   1faa8:	andeq	lr, r2, r6, lsr #27
   1faac:	andeq	lr, r2, sp, lsl #28
   1fab0:	andeq	lr, r2, fp, lsl lr
   1fab4:	andeq	lr, r2, r6, lsr #28
   1fab8:	andeq	lr, r2, r0, lsr #28
   1fabc:	andeq	lr, r2, lr, lsr #28
   1fac0:	andeq	lr, r2, r4, lsr lr
   1fac4:	andeq	lr, r2, sp, asr #27
   1fac8:	andeq	lr, r2, r2, lsl #28

0001facc <edge_case_tests@@Base>:
   1facc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fad0:	mov	r3, #155	; 0x9b
   1fad4:	sub	sp, sp, #20
   1fad8:	mov	r5, #0
   1fadc:	mov	r8, #2
   1fae0:	ldr	r6, [pc, #708]	; 1fdac <edge_case_tests@@Base+0x2e0>
   1fae4:	str	r5, [sp]
   1fae8:	ldr	sl, [pc, #704]	; 1fdb0 <edge_case_tests@@Base+0x2e4>
   1faec:	str	r5, [sp, #4]
   1faf0:	ldr	r7, [pc, #700]	; 1fdb4 <edge_case_tests@@Base+0x2e8>
   1faf4:	mov	r0, r6
   1faf8:	str	r3, [sp, #8]
   1fafc:	mov	r3, r5
   1fb00:	ldr	r2, [pc, #688]	; 1fdb8 <edge_case_tests@@Base+0x2ec>
   1fb04:	ldr	r1, [pc, #688]	; 1fdbc <edge_case_tests@@Base+0x2f0>
   1fb08:	bl	1f708 <test_json@@Base>
   1fb0c:	mov	r3, #168	; 0xa8
   1fb10:	mov	r2, sl
   1fb14:	str	r8, [sp]
   1fb18:	mov	r1, r7
   1fb1c:	mov	r4, r0
   1fb20:	str	r5, [sp, #4]
   1fb24:	mov	r0, r6
   1fb28:	str	r3, [sp, #8]
   1fb2c:	mov	r3, r5
   1fb30:	bl	1f708 <test_json@@Base>
   1fb34:	mov	r3, #172	; 0xac
   1fb38:	orr	r4, r4, r0
   1fb3c:	ldr	r2, [pc, #636]	; 1fdc0 <edge_case_tests@@Base+0x2f4>
   1fb40:	mov	r0, r6
   1fb44:	stm	sp, {r5, r8}
   1fb48:	ldr	r1, [pc, #628]	; 1fdc4 <edge_case_tests@@Base+0x2f8>
   1fb4c:	str	r3, [sp, #8]
   1fb50:	mov	r3, r5
   1fb54:	bl	1f708 <test_json@@Base>
   1fb58:	mov	r3, #176	; 0xb0
   1fb5c:	mov	r1, r7
   1fb60:	ldr	r2, [pc, #608]	; 1fdc8 <edge_case_tests@@Base+0x2fc>
   1fb64:	orr	r4, r4, r0
   1fb68:	mov	r0, r6
   1fb6c:	str	r8, [sp]
   1fb70:	str	r3, [sp, #8]
   1fb74:	mov	r3, #4
   1fb78:	mov	r7, #1
   1fb7c:	ldr	r9, [pc, #584]	; 1fdcc <edge_case_tests@@Base+0x300>
   1fb80:	str	r3, [sp, #4]
   1fb84:	mov	r3, r5
   1fb88:	bl	1f708 <test_json@@Base>
   1fb8c:	mov	r3, #180	; 0xb4
   1fb90:	mov	r2, #8
   1fb94:	ldr	r1, [pc, #564]	; 1fdd0 <edge_case_tests@@Base+0x304>
   1fb98:	orr	r4, r4, r0
   1fb9c:	mov	r0, r6
   1fba0:	str	r5, [sp]
   1fba4:	strd	r2, [sp, #4]
   1fba8:	mov	r3, r5
   1fbac:	ldr	r2, [pc, #544]	; 1fdd4 <edge_case_tests@@Base+0x308>
   1fbb0:	bl	1f708 <test_json@@Base>
   1fbb4:	ldr	fp, [pc, #540]	; 1fdd8 <edge_case_tests@@Base+0x30c>
   1fbb8:	mov	r3, #195	; 0xc3
   1fbbc:	mov	r2, sl
   1fbc0:	orr	r4, r4, r0
   1fbc4:	mov	r0, r6
   1fbc8:	str	r8, [sp]
   1fbcc:	ldr	r1, [pc, #520]	; 1fddc <edge_case_tests@@Base+0x310>
   1fbd0:	str	r5, [sp, #4]
   1fbd4:	str	r3, [sp, #8]
   1fbd8:	mov	r3, r5
   1fbdc:	bl	1f708 <test_json@@Base>
   1fbe0:	mov	r3, #199	; 0xc7
   1fbe4:	mov	r2, r9
   1fbe8:	str	r7, [sp]
   1fbec:	mov	r1, fp
   1fbf0:	orr	r4, r4, r0
   1fbf4:	str	r5, [sp, #4]
   1fbf8:	mov	r0, r6
   1fbfc:	str	r3, [sp, #8]
   1fc00:	mov	r3, r5
   1fc04:	bl	1f708 <test_json@@Base>
   1fc08:	mov	r3, #203	; 0xcb
   1fc0c:	mov	r1, fp
   1fc10:	ldr	r2, [pc, #456]	; 1fde0 <edge_case_tests@@Base+0x314>
   1fc14:	orr	r4, r4, r0
   1fc18:	mov	r0, r6
   1fc1c:	str	r7, [sp]
   1fc20:	str	r7, [sp, #4]
   1fc24:	str	r3, [sp, #8]
   1fc28:	mov	r3, r5
   1fc2c:	bl	1f708 <test_json@@Base>
   1fc30:	ldr	fp, [pc, #428]	; 1fde4 <edge_case_tests@@Base+0x318>
   1fc34:	mov	r3, #209	; 0xd1
   1fc38:	mov	r2, r9
   1fc3c:	orr	r4, r4, r0
   1fc40:	mov	r0, r6
   1fc44:	str	r7, [sp]
   1fc48:	ldr	r1, [pc, #408]	; 1fde8 <edge_case_tests@@Base+0x31c>
   1fc4c:	str	r5, [sp, #4]
   1fc50:	str	r3, [sp, #8]
   1fc54:	mov	r3, r5
   1fc58:	bl	1f708 <test_json@@Base>
   1fc5c:	mov	r3, #217	; 0xd9
   1fc60:	mov	r2, sl
   1fc64:	str	r8, [sp]
   1fc68:	mov	r1, fp
   1fc6c:	orr	r4, r4, r0
   1fc70:	str	r5, [sp, #4]
   1fc74:	mov	r0, r6
   1fc78:	str	r3, [sp, #8]
   1fc7c:	mov	r3, r5
   1fc80:	bl	1f708 <test_json@@Base>
   1fc84:	mov	r3, #221	; 0xdd
   1fc88:	orr	r4, r4, r0
   1fc8c:	ldr	r2, [pc, #300]	; 1fdc0 <edge_case_tests@@Base+0x2f4>
   1fc90:	mov	r0, r6
   1fc94:	stm	sp, {r5, r8}
   1fc98:	ldr	r1, [pc, #332]	; 1fdec <edge_case_tests@@Base+0x320>
   1fc9c:	str	r3, [sp, #8]
   1fca0:	mov	r3, r5
   1fca4:	bl	1f708 <test_json@@Base>
   1fca8:	mov	r3, #225	; 0xe1
   1fcac:	mov	r1, fp
   1fcb0:	ldr	r2, [pc, #272]	; 1fdc8 <edge_case_tests@@Base+0x2fc>
   1fcb4:	orr	r4, r4, r0
   1fcb8:	mov	r0, r6
   1fcbc:	str	r8, [sp]
   1fcc0:	str	r3, [sp, #8]
   1fcc4:	mov	r3, #4
   1fcc8:	str	r3, [sp, #4]
   1fccc:	mov	r3, r5
   1fcd0:	bl	1f708 <test_json@@Base>
   1fcd4:	mov	r3, #229	; 0xe5
   1fcd8:	mov	r2, #8
   1fcdc:	ldr	r1, [pc, #268]	; 1fdf0 <edge_case_tests@@Base+0x324>
   1fce0:	orr	r4, r4, r0
   1fce4:	mov	r0, r6
   1fce8:	str	r5, [sp]
   1fcec:	strd	r2, [sp, #4]
   1fcf0:	mov	r3, r5
   1fcf4:	ldr	r2, [pc, #248]	; 1fdf4 <edge_case_tests@@Base+0x328>
   1fcf8:	bl	1f708 <test_json@@Base>
   1fcfc:	mov	r3, #233	; 0xe9
   1fd00:	str	r8, [sp]
   1fd04:	mov	r2, sl
   1fd08:	ldr	r8, [pc, #232]	; 1fdf8 <edge_case_tests@@Base+0x32c>
   1fd0c:	orr	r4, r4, r0
   1fd10:	mov	r0, r6
   1fd14:	str	r5, [sp, #4]
   1fd18:	ldr	r1, [pc, #220]	; 1fdfc <edge_case_tests@@Base+0x330>
   1fd1c:	str	r3, [sp, #8]
   1fd20:	mov	r3, r5
   1fd24:	bl	1f708 <test_json@@Base>
   1fd28:	mov	r3, #237	; 0xed
   1fd2c:	mov	r2, r9
   1fd30:	str	r7, [sp]
   1fd34:	mov	r1, r8
   1fd38:	orr	r4, r4, r0
   1fd3c:	str	r5, [sp, #4]
   1fd40:	mov	r0, r6
   1fd44:	str	r3, [sp, #8]
   1fd48:	mov	r3, r5
   1fd4c:	bl	1f708 <test_json@@Base>
   1fd50:	mov	r3, #241	; 0xf1
   1fd54:	mov	r1, r8
   1fd58:	ldr	r2, [pc, #128]	; 1fde0 <edge_case_tests@@Base+0x314>
   1fd5c:	orr	r4, r4, r0
   1fd60:	mov	r0, r6
   1fd64:	str	r7, [sp]
   1fd68:	str	r7, [sp, #4]
   1fd6c:	str	r3, [sp, #8]
   1fd70:	mov	r3, r5
   1fd74:	bl	1f708 <test_json@@Base>
   1fd78:	mov	r3, #247	; 0xf7
   1fd7c:	ldr	r1, [pc, #124]	; 1fe00 <edge_case_tests@@Base+0x334>
   1fd80:	orr	r4, r4, r0
   1fd84:	mov	r2, r9
   1fd88:	mov	r0, r6
   1fd8c:	str	r7, [sp]
   1fd90:	str	r5, [sp, #4]
   1fd94:	str	r3, [sp, #8]
   1fd98:	mov	r3, r5
   1fd9c:	bl	1f708 <test_json@@Base>
   1fda0:	orr	r0, r4, r0
   1fda4:	add	sp, sp, #20
   1fda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdac:	andeq	lr, r2, r4, lsl r9
   1fdb0:	andeq	lr, r2, r7, lsl #29
   1fdb4:	andeq	lr, r2, r9, lsr #29
   1fdb8:	andeq	lr, r2, r8, lsr lr
   1fdbc:	andeq	lr, r2, r6, asr lr
   1fdc0:	andeq	lr, r2, sl, asr #29
   1fdc4:	andeq	lr, r2, r7, ror #29
   1fdc8:	andeq	lr, r2, lr, lsl #30
   1fdcc:	andeq	pc, r2, fp, ror r0	; <UNPREDICTABLE>
   1fdd0:	andeq	pc, r2, r3, lsr r0	; <UNPREDICTABLE>
   1fdd4:	andeq	lr, r2, r1, lsr #30
   1fdd8:	muleq	r2, r6, r0
   1fddc:	andeq	pc, r2, r5, asr r0	; <UNPREDICTABLE>
   1fde0:	andeq	pc, r2, r8, asr #1
   1fde4:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   1fde8:	ldrdeq	pc, [r2], -pc	; <UNPREDICTABLE>
   1fdec:	andeq	pc, r2, sp, ror #2
   1fdf0:	andeq	pc, r2, r5, lsr #5
   1fdf4:	andeq	pc, r2, lr, lsl #3
   1fdf8:	ldrdeq	pc, [r2], -r8
   1fdfc:			; <UNDEFINED> instruction: 0x0002f2b8
   1fe00:	andeq	pc, r2, r2, lsl #6

0001fe04 <error_case_tests@@Base>:
   1fe04:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fe08:	mov	r4, #0
   1fe0c:	movw	r3, #285	; 0x11d
   1fe10:	mov	r2, r4
   1fe14:	ldr	r6, [pc, #716]	; 200e8 <error_case_tests@@Base+0x2e4>
   1fe18:	str	r4, [sp]
   1fe1c:	ldr	r1, [pc, #712]	; 200ec <error_case_tests@@Base+0x2e8>
   1fe20:	str	r4, [sp, #4]
   1fe24:	str	r3, [sp, #8]
   1fe28:	mov	r3, #13
   1fe2c:	mov	r0, r6
   1fe30:	bl	1f708 <test_json@@Base>
   1fe34:	movw	r3, #287	; 0x11f
   1fe38:	mov	r2, r4
   1fe3c:	ldr	r1, [pc, #684]	; 200f0 <error_case_tests@@Base+0x2ec>
   1fe40:	mov	r5, r0
   1fe44:	mov	r0, r6
   1fe48:	str	r4, [sp]
   1fe4c:	str	r4, [sp, #4]
   1fe50:	str	r3, [sp, #8]
   1fe54:	mov	r3, #13
   1fe58:	bl	1f708 <test_json@@Base>
   1fe5c:	movw	r3, #289	; 0x121
   1fe60:	mov	r2, r4
   1fe64:	ldr	r1, [pc, #648]	; 200f4 <error_case_tests@@Base+0x2f0>
   1fe68:	orr	r5, r5, r0
   1fe6c:	mov	r0, r6
   1fe70:	str	r4, [sp]
   1fe74:	str	r4, [sp, #4]
   1fe78:	str	r3, [sp, #8]
   1fe7c:	mov	r3, #13
   1fe80:	bl	1f708 <test_json@@Base>
   1fe84:	movw	r3, #291	; 0x123
   1fe88:	mov	r2, r4
   1fe8c:	ldr	r1, [pc, #612]	; 200f8 <error_case_tests@@Base+0x2f4>
   1fe90:	orr	r5, r5, r0
   1fe94:	mov	r0, r6
   1fe98:	str	r4, [sp]
   1fe9c:	str	r4, [sp, #4]
   1fea0:	str	r3, [sp, #8]
   1fea4:	mov	r3, #13
   1fea8:	bl	1f708 <test_json@@Base>
   1feac:	movw	r3, #293	; 0x125
   1feb0:	mov	r2, r4
   1feb4:	ldr	r1, [pc, #576]	; 200fc <error_case_tests@@Base+0x2f8>
   1feb8:	orr	r5, r5, r0
   1febc:	mov	r0, r6
   1fec0:	str	r4, [sp]
   1fec4:	str	r4, [sp, #4]
   1fec8:	str	r3, [sp, #8]
   1fecc:	mov	r3, #13
   1fed0:	bl	1f708 <test_json@@Base>
   1fed4:	mov	r3, #296	; 0x128
   1fed8:	mov	r2, r4
   1fedc:	ldr	r1, [pc, #540]	; 20100 <error_case_tests@@Base+0x2fc>
   1fee0:	orr	r5, r5, r0
   1fee4:	mov	r0, r6
   1fee8:	str	r4, [sp]
   1feec:	str	r4, [sp, #4]
   1fef0:	str	r3, [sp, #8]
   1fef4:	mov	r3, #13
   1fef8:	bl	1f708 <test_json@@Base>
   1fefc:	movw	r3, #299	; 0x12b
   1ff00:	mov	r2, r4
   1ff04:	ldr	r1, [pc, #504]	; 20104 <error_case_tests@@Base+0x300>
   1ff08:	orr	r5, r5, r0
   1ff0c:	mov	r0, r6
   1ff10:	str	r4, [sp]
   1ff14:	str	r4, [sp, #4]
   1ff18:	str	r3, [sp, #8]
   1ff1c:	mov	r3, #13
   1ff20:	bl	1f708 <test_json@@Base>
   1ff24:	movw	r3, #303	; 0x12f
   1ff28:	mov	r2, r4
   1ff2c:	ldr	r1, [pc, #468]	; 20108 <error_case_tests@@Base+0x304>
   1ff30:	orr	r5, r5, r0
   1ff34:	mov	r0, r6
   1ff38:	str	r4, [sp]
   1ff3c:	str	r4, [sp, #4]
   1ff40:	str	r3, [sp, #8]
   1ff44:	mov	r3, #13
   1ff48:	bl	1f708 <test_json@@Base>
   1ff4c:	movw	r3, #307	; 0x133
   1ff50:	mov	r2, r4
   1ff54:	ldr	r1, [pc, #432]	; 2010c <error_case_tests@@Base+0x308>
   1ff58:	orr	r5, r5, r0
   1ff5c:	mov	r0, r6
   1ff60:	str	r4, [sp]
   1ff64:	str	r4, [sp, #4]
   1ff68:	str	r3, [sp, #8]
   1ff6c:	mov	r3, #13
   1ff70:	bl	1f708 <test_json@@Base>
   1ff74:	movw	r3, #322	; 0x142
   1ff78:	mov	r2, r4
   1ff7c:	ldr	r1, [pc, #396]	; 20110 <error_case_tests@@Base+0x30c>
   1ff80:	orr	r5, r5, r0
   1ff84:	mov	r0, r6
   1ff88:	str	r4, [sp]
   1ff8c:	str	r4, [sp, #4]
   1ff90:	str	r3, [sp, #8]
   1ff94:	mov	r3, #13
   1ff98:	bl	1f708 <test_json@@Base>
   1ff9c:	mov	r3, #324	; 0x144
   1ffa0:	mov	r2, r4
   1ffa4:	ldr	r1, [pc, #360]	; 20114 <error_case_tests@@Base+0x310>
   1ffa8:	orr	r5, r5, r0
   1ffac:	mov	r0, r6
   1ffb0:	str	r4, [sp]
   1ffb4:	str	r4, [sp, #4]
   1ffb8:	str	r3, [sp, #8]
   1ffbc:	mov	r3, #13
   1ffc0:	bl	1f708 <test_json@@Base>
   1ffc4:	movw	r3, #326	; 0x146
   1ffc8:	mov	r2, r4
   1ffcc:	ldr	r1, [pc, #324]	; 20118 <error_case_tests@@Base+0x314>
   1ffd0:	orr	r5, r5, r0
   1ffd4:	mov	r0, r6
   1ffd8:	str	r4, [sp]
   1ffdc:	str	r4, [sp, #4]
   1ffe0:	str	r3, [sp, #8]
   1ffe4:	mov	r3, #13
   1ffe8:	bl	1f708 <test_json@@Base>
   1ffec:	mov	r3, #328	; 0x148
   1fff0:	mov	r2, r4
   1fff4:	ldr	r1, [pc, #288]	; 2011c <error_case_tests@@Base+0x318>
   1fff8:	orr	r5, r5, r0
   1fffc:	mov	r0, r6
   20000:	str	r4, [sp]
   20004:	str	r4, [sp, #4]
   20008:	str	r3, [sp, #8]
   2000c:	mov	r3, #13
   20010:	bl	1f708 <test_json@@Base>
   20014:	movw	r3, #330	; 0x14a
   20018:	mov	r2, r4
   2001c:	ldr	r1, [pc, #252]	; 20120 <error_case_tests@@Base+0x31c>
   20020:	orr	r5, r5, r0
   20024:	mov	r0, r6
   20028:	str	r4, [sp]
   2002c:	str	r4, [sp, #4]
   20030:	str	r3, [sp, #8]
   20034:	mov	r3, #13
   20038:	bl	1f708 <test_json@@Base>
   2003c:	movw	r3, #333	; 0x14d
   20040:	mov	r2, r4
   20044:	ldr	r1, [pc, #216]	; 20124 <error_case_tests@@Base+0x320>
   20048:	orr	r5, r5, r0
   2004c:	mov	r0, r6
   20050:	str	r4, [sp]
   20054:	str	r4, [sp, #4]
   20058:	str	r3, [sp, #8]
   2005c:	mov	r3, #13
   20060:	bl	1f708 <test_json@@Base>
   20064:	mov	r3, #336	; 0x150
   20068:	mov	r2, r4
   2006c:	ldr	r1, [pc, #180]	; 20128 <error_case_tests@@Base+0x324>
   20070:	orr	r5, r5, r0
   20074:	mov	r0, r6
   20078:	str	r4, [sp]
   2007c:	str	r4, [sp, #4]
   20080:	str	r3, [sp, #8]
   20084:	mov	r3, #13
   20088:	bl	1f708 <test_json@@Base>
   2008c:	mov	r3, #340	; 0x154
   20090:	mov	r2, r4
   20094:	ldr	r1, [pc, #144]	; 2012c <error_case_tests@@Base+0x328>
   20098:	orr	r5, r5, r0
   2009c:	mov	r0, r6
   200a0:	str	r4, [sp]
   200a4:	str	r4, [sp, #4]
   200a8:	str	r3, [sp, #8]
   200ac:	mov	r3, #13
   200b0:	bl	1f708 <test_json@@Base>
   200b4:	mov	r3, #344	; 0x158
   200b8:	ldr	r1, [pc, #112]	; 20130 <error_case_tests@@Base+0x32c>
   200bc:	orr	r5, r5, r0
   200c0:	mov	r2, r4
   200c4:	mov	r0, r6
   200c8:	str	r4, [sp]
   200cc:	str	r4, [sp, #4]
   200d0:	str	r3, [sp, #8]
   200d4:	mov	r3, #13
   200d8:	bl	1f708 <test_json@@Base>
   200dc:	orr	r0, r5, r0
   200e0:	add	sp, sp, #16
   200e4:	pop	{r4, r5, r6, pc}
   200e8:	andeq	lr, r2, r4, lsl r9
   200ec:	andeq	pc, r2, r1, ror #6
   200f0:	andeq	pc, r2, fp, ror r3	; <UNPREDICTABLE>
   200f4:	ldrdeq	pc, [r2], -ip
   200f8:	andeq	pc, r2, sl, lsr r4	; <UNPREDICTABLE>
   200fc:	muleq	r2, r2, r4
   20100:	andeq	pc, r2, r7, ror #9
   20104:	andeq	pc, r2, r5, lsl #11
   20108:	andeq	pc, r2, r0, lsr #12
   2010c:	andeq	pc, r2, r7, ror #13
   20110:	andeq	pc, r2, lr, lsr #15
   20114:	andeq	pc, r2, r6, asr #15
   20118:	andeq	pc, r2, fp, lsl r8	; <UNPREDICTABLE>
   2011c:	andeq	pc, r2, sp, ror #16
   20120:			; <UNDEFINED> instruction: 0x0002f8bd
   20124:	andeq	pc, r2, sl, lsl #18
   20128:	muleq	r2, r6, r9
   2012c:	andeq	pc, r2, pc, lsl sl	; <UNPREDICTABLE>
   20130:	andeq	pc, r2, lr, asr #21

00020134 <base64_tests@@Base>:
   20134:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20138:	mov	r4, #0
   2013c:	movw	r3, #369	; 0x171
   20140:	ldr	r6, [pc, #412]	; 202e4 <base64_tests@@Base+0x1b0>
   20144:	str	r4, [sp]
   20148:	ldr	r2, [pc, #408]	; 202e8 <base64_tests@@Base+0x1b4>
   2014c:	str	r4, [sp, #4]
   20150:	ldr	r1, [pc, #404]	; 202ec <base64_tests@@Base+0x1b8>
   20154:	mov	r0, r6
   20158:	str	r3, [sp, #8]
   2015c:	mov	r3, r4
   20160:	bl	1f708 <test_json@@Base>
   20164:	ldr	r8, [pc, #388]	; 202f0 <base64_tests@@Base+0x1bc>
   20168:	mov	r3, #372	; 0x174
   2016c:	mov	r5, r0
   20170:	mov	r0, r6
   20174:	str	r4, [sp]
   20178:	ldr	r2, [pc, #372]	; 202f4 <base64_tests@@Base+0x1c0>
   2017c:	str	r4, [sp, #4]
   20180:	ldr	r1, [pc, #368]	; 202f8 <base64_tests@@Base+0x1c4>
   20184:	str	r3, [sp, #8]
   20188:	mov	r3, r4
   2018c:	bl	1f708 <test_json@@Base>
   20190:	ldr	r7, [pc, #356]	; 202fc <base64_tests@@Base+0x1c8>
   20194:	mov	r3, #376	; 0x178
   20198:	mov	r2, r8
   2019c:	orr	r5, r5, r0
   201a0:	mov	r0, r6
   201a4:	str	r4, [sp]
   201a8:	ldr	r1, [pc, #336]	; 20300 <base64_tests@@Base+0x1cc>
   201ac:	str	r4, [sp, #4]
   201b0:	str	r3, [sp, #8]
   201b4:	mov	r3, r4
   201b8:	bl	1f708 <test_json@@Base>
   201bc:	movw	r3, #379	; 0x17b
   201c0:	mov	r2, r7
   201c4:	ldr	r1, [pc, #312]	; 20304 <base64_tests@@Base+0x1d0>
   201c8:	orr	r5, r5, r0
   201cc:	mov	r0, r6
   201d0:	str	r4, [sp]
   201d4:	str	r4, [sp, #4]
   201d8:	str	r3, [sp, #8]
   201dc:	mov	r3, r4
   201e0:	bl	1f708 <test_json@@Base>
   201e4:	movw	r3, #382	; 0x17e
   201e8:	mov	r2, r8
   201ec:	ldr	r1, [pc, #276]	; 20308 <base64_tests@@Base+0x1d4>
   201f0:	orr	r5, r5, r0
   201f4:	mov	r0, r6
   201f8:	str	r4, [sp]
   201fc:	str	r4, [sp, #4]
   20200:	str	r3, [sp, #8]
   20204:	mov	r3, r4
   20208:	bl	1f708 <test_json@@Base>
   2020c:	movw	r3, #385	; 0x181
   20210:	mov	r2, r7
   20214:	ldr	r1, [pc, #240]	; 2030c <base64_tests@@Base+0x1d8>
   20218:	orr	r5, r5, r0
   2021c:	mov	r0, r6
   20220:	str	r4, [sp]
   20224:	str	r4, [sp, #4]
   20228:	str	r3, [sp, #8]
   2022c:	mov	r3, r4
   20230:	bl	1f708 <test_json@@Base>
   20234:	mov	r3, #388	; 0x184
   20238:	mov	r2, r4
   2023c:	ldr	r1, [pc, #204]	; 20310 <base64_tests@@Base+0x1dc>
   20240:	orr	r5, r5, r0
   20244:	mov	r0, r6
   20248:	str	r4, [sp]
   2024c:	str	r4, [sp, #4]
   20250:	str	r3, [sp, #8]
   20254:	mov	r3, #31
   20258:	bl	1f708 <test_json@@Base>
   2025c:	ldr	r7, [pc, #176]	; 20314 <base64_tests@@Base+0x1e0>
   20260:	movw	r3, #391	; 0x187
   20264:	mov	r2, r4
   20268:	orr	r5, r5, r0
   2026c:	mov	r0, r6
   20270:	str	r4, [sp]
   20274:	ldr	r1, [pc, #156]	; 20318 <base64_tests@@Base+0x1e4>
   20278:	str	r4, [sp, #4]
   2027c:	str	r3, [sp, #8]
   20280:	mov	r3, #32
   20284:	bl	1f708 <test_json@@Base>
   20288:	movw	r3, #406	; 0x196
   2028c:	mov	r2, r7
   20290:	ldr	r1, [pc, #132]	; 2031c <base64_tests@@Base+0x1e8>
   20294:	orr	r5, r5, r0
   20298:	mov	r0, r6
   2029c:	str	r4, [sp]
   202a0:	str	r4, [sp, #4]
   202a4:	str	r3, [sp, #8]
   202a8:	mov	r3, r4
   202ac:	bl	1f708 <test_json@@Base>
   202b0:	movw	r3, #419	; 0x1a3
   202b4:	ldr	r1, [pc, #100]	; 20320 <base64_tests@@Base+0x1ec>
   202b8:	orr	r5, r5, r0
   202bc:	mov	r2, r7
   202c0:	mov	r0, r6
   202c4:	str	r4, [sp]
   202c8:	str	r4, [sp, #4]
   202cc:	str	r3, [sp, #8]
   202d0:	mov	r3, r4
   202d4:	bl	1f708 <test_json@@Base>
   202d8:	orr	r0, r5, r0
   202dc:	add	sp, sp, #16
   202e0:	pop	{r4, r5, r6, r7, r8, pc}
   202e4:	andeq	lr, r2, r4, lsl r9
   202e8:	andeq	lr, r2, lr, lsl #30
   202ec:	andeq	pc, r2, sp, ror fp	; <UNPREDICTABLE>
   202f0:	ldrdeq	pc, [r2], -sp
   202f4:	muleq	r2, r3, fp
   202f8:			; <UNDEFINED> instruction: 0x0002fbb6
   202fc:	andeq	pc, r2, sl, asr #26
   20300:	muleq	r2, r1, ip
   20304:	andeq	pc, r2, r1, lsl #28
   20308:			; <UNDEFINED> instruction: 0x0002febd
   2030c:	andeq	pc, r2, r4, ror pc	; <UNPREDICTABLE>
   20310:	andeq	r0, r3, lr, lsr #32
   20314:	andeq	r0, r3, r3, lsr #3
   20318:	andeq	r0, r3, r7, ror #1
   2031c:	andeq	r0, r3, r8, ror r2
   20320:	andeq	r0, r3, r8, asr #6

00020324 <mixed_type_union_tests@@Base>:
   20324:	push	{r4, r5, r6, r7, lr}
   20328:	mov	r3, #432	; 0x1b0
   2032c:	sub	sp, sp, #20
   20330:	mov	r4, #0
   20334:	ldr	r6, [pc, #284]	; 20458 <mixed_type_union_tests@@Base+0x134>
   20338:	str	r4, [sp]
   2033c:	ldr	r7, [pc, #280]	; 2045c <mixed_type_union_tests@@Base+0x138>
   20340:	str	r4, [sp, #4]
   20344:	ldr	r2, [pc, #276]	; 20460 <mixed_type_union_tests@@Base+0x13c>
   20348:	mov	r0, r6
   2034c:	str	r3, [sp, #8]
   20350:	mov	r3, r4
   20354:	ldr	r1, [pc, #264]	; 20464 <mixed_type_union_tests@@Base+0x140>
   20358:	bl	1f708 <test_json@@Base>
   2035c:	movw	r3, #437	; 0x1b5
   20360:	mov	r2, r7
   20364:	ldr	r1, [pc, #252]	; 20468 <mixed_type_union_tests@@Base+0x144>
   20368:	mov	r5, r0
   2036c:	mov	r0, r6
   20370:	str	r4, [sp]
   20374:	str	r4, [sp, #4]
   20378:	str	r3, [sp, #8]
   2037c:	mov	r3, r4
   20380:	bl	1f708 <test_json@@Base>
   20384:	movw	r3, #442	; 0x1ba
   20388:	mov	r2, r7
   2038c:	ldr	r1, [pc, #216]	; 2046c <mixed_type_union_tests@@Base+0x148>
   20390:	orr	r5, r5, r0
   20394:	mov	r0, r6
   20398:	str	r4, [sp]
   2039c:	str	r4, [sp, #4]
   203a0:	str	r3, [sp, #8]
   203a4:	mov	r3, r4
   203a8:	bl	1f708 <test_json@@Base>
   203ac:	movw	r3, #449	; 0x1c1
   203b0:	orr	r5, r5, r0
   203b4:	ldr	r2, [pc, #180]	; 20470 <mixed_type_union_tests@@Base+0x14c>
   203b8:	mov	r0, r6
   203bc:	str	r4, [sp]
   203c0:	ldr	r1, [pc, #172]	; 20474 <mixed_type_union_tests@@Base+0x150>
   203c4:	str	r4, [sp, #4]
   203c8:	str	r3, [sp, #8]
   203cc:	mov	r3, r4
   203d0:	bl	1f708 <test_json@@Base>
   203d4:	movw	r3, #458	; 0x1ca
   203d8:	orr	r5, r5, r0
   203dc:	ldr	r2, [pc, #148]	; 20478 <mixed_type_union_tests@@Base+0x154>
   203e0:	mov	r0, r6
   203e4:	str	r4, [sp]
   203e8:	ldr	r1, [pc, #140]	; 2047c <mixed_type_union_tests@@Base+0x158>
   203ec:	str	r4, [sp, #4]
   203f0:	str	r3, [sp, #8]
   203f4:	mov	r3, r4
   203f8:	bl	1f708 <test_json@@Base>
   203fc:	movw	r3, #469	; 0x1d5
   20400:	orr	r5, r5, r0
   20404:	ldr	r2, [pc, #116]	; 20480 <mixed_type_union_tests@@Base+0x15c>
   20408:	mov	r0, r6
   2040c:	str	r4, [sp]
   20410:	ldr	r1, [pc, #108]	; 20484 <mixed_type_union_tests@@Base+0x160>
   20414:	str	r4, [sp, #4]
   20418:	str	r3, [sp, #8]
   2041c:	mov	r3, r4
   20420:	bl	1f708 <test_json@@Base>
   20424:	movw	r3, #474	; 0x1da
   20428:	ldr	r1, [pc, #88]	; 20488 <mixed_type_union_tests@@Base+0x164>
   2042c:	orr	r5, r5, r0
   20430:	mov	r2, r7
   20434:	mov	r0, r6
   20438:	str	r4, [sp]
   2043c:	str	r4, [sp, #4]
   20440:	str	r3, [sp, #8]
   20444:	mov	r3, r4
   20448:	bl	1f708 <test_json@@Base>
   2044c:	orr	r0, r5, r0
   20450:	add	sp, sp, #20
   20454:	pop	{r4, r5, r6, r7, pc}
   20458:	andeq	lr, r2, r4, lsr #18
   2045c:	andeq	r0, r3, sl, lsr #9
   20460:	andeq	r0, r3, r4, lsl r4
   20464:	andeq	r0, r3, fp, asr r4
   20468:	andeq	r0, r3, r1, lsr #10
   2046c:	andeq	r0, r3, r4, lsr #11
   20470:	andeq	r0, r3, sl, lsr r6
   20474:	strdeq	r0, [r3], -r3
   20478:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   2047c:	andeq	r0, r3, lr, lsr #17
   20480:			; <UNDEFINED> instruction: 0x000309b4
   20484:	strdeq	r0, [r3], -sl
   20488:	andeq	r0, r3, fp, ror ip

0002048c <union_vector_tests@@Base>:
   2048c:	push	{r4, r5, r6, r7, lr}
   20490:	movw	r3, #485	; 0x1e5
   20494:	sub	sp, sp, #20
   20498:	mov	r4, #0
   2049c:	ldr	r6, [pc, #244]	; 20598 <union_vector_tests@@Base+0x10c>
   204a0:	str	r4, [sp]
   204a4:	ldr	r7, [pc, #240]	; 2059c <union_vector_tests@@Base+0x110>
   204a8:	str	r4, [sp, #4]
   204ac:	ldr	r1, [pc, #236]	; 205a0 <union_vector_tests@@Base+0x114>
   204b0:	mov	r0, r6
   204b4:	str	r3, [sp, #8]
   204b8:	mov	r3, r4
   204bc:	mov	r2, r7
   204c0:	bl	1f708 <test_json@@Base>
   204c4:	mov	r3, #488	; 0x1e8
   204c8:	mov	r5, r0
   204cc:	ldr	r2, [pc, #208]	; 205a4 <union_vector_tests@@Base+0x118>
   204d0:	mov	r0, r6
   204d4:	str	r4, [sp]
   204d8:	ldr	r1, [pc, #200]	; 205a8 <union_vector_tests@@Base+0x11c>
   204dc:	str	r4, [sp, #4]
   204e0:	str	r3, [sp, #8]
   204e4:	mov	r3, r4
   204e8:	bl	1f708 <test_json@@Base>
   204ec:	movw	r3, #491	; 0x1eb
   204f0:	orr	r5, r5, r0
   204f4:	ldr	r2, [pc, #176]	; 205ac <union_vector_tests@@Base+0x120>
   204f8:	mov	r0, r6
   204fc:	str	r4, [sp]
   20500:	ldr	r1, [pc, #168]	; 205b0 <union_vector_tests@@Base+0x124>
   20504:	str	r4, [sp, #4]
   20508:	str	r3, [sp, #8]
   2050c:	mov	r3, r4
   20510:	bl	1f708 <test_json@@Base>
   20514:	movw	r3, #494	; 0x1ee
   20518:	orr	r5, r5, r0
   2051c:	ldr	r2, [pc, #144]	; 205b4 <union_vector_tests@@Base+0x128>
   20520:	mov	r0, r6
   20524:	str	r4, [sp]
   20528:	ldr	r1, [pc, #136]	; 205b8 <union_vector_tests@@Base+0x12c>
   2052c:	str	r4, [sp, #4]
   20530:	str	r3, [sp, #8]
   20534:	mov	r3, r4
   20538:	bl	1f708 <test_json@@Base>
   2053c:	movw	r3, #497	; 0x1f1
   20540:	mov	r2, r7
   20544:	ldr	r1, [pc, #112]	; 205bc <union_vector_tests@@Base+0x130>
   20548:	orr	r5, r5, r0
   2054c:	mov	r0, r6
   20550:	str	r4, [sp]
   20554:	str	r4, [sp, #4]
   20558:	str	r3, [sp, #8]
   2055c:	mov	r3, r4
   20560:	bl	1f708 <test_json@@Base>
   20564:	mov	r3, #500	; 0x1f4
   20568:	ldr	r2, [pc, #80]	; 205c0 <union_vector_tests@@Base+0x134>
   2056c:	orr	r5, r5, r0
   20570:	mov	r0, r6
   20574:	str	r4, [sp]
   20578:	ldr	r1, [pc, #68]	; 205c4 <union_vector_tests@@Base+0x138>
   2057c:	str	r4, [sp, #4]
   20580:	str	r3, [sp, #8]
   20584:	mov	r3, r4
   20588:	bl	1f708 <test_json@@Base>
   2058c:	orr	r0, r5, r0
   20590:	add	sp, sp, #20
   20594:	pop	{r4, r5, r6, r7, pc}
   20598:	andeq	lr, r2, r4, lsr r9
   2059c:	andeq	r0, r3, r8, lsl #26
   205a0:	andeq	r0, r3, r0, asr #26
   205a4:	andeq	r0, r3, r0, lsl #27
   205a8:	andeq	r0, r3, fp, lsr #27
   205ac:	ldrdeq	r0, [r3], -lr
   205b0:	andeq	r0, r3, r2, lsr #28
   205b4:	andeq	r0, r3, pc, ror #28
   205b8:	ldrdeq	r0, [r3], -fp
   205bc:	andeq	r0, r3, r8, asr pc
   205c0:	muleq	r3, r7, pc	; <UNPREDICTABLE>
   205c4:	strdeq	r0, [r3], -r3
   205c8:	ldr	ip, [r0, #28]
   205cc:	ldrd	r2, [r0, #60]	; 0x3c
   205d0:	sub	r3, r3, ip
   205d4:	add	r2, r2, ip
   205d8:	cmp	r3, r1
   205dc:	strls	r3, [r0, #24]
   205e0:	strhi	r1, [r0, #24]
   205e4:	ldr	r3, [r0, #32]
   205e8:	str	r2, [r0, #16]
   205ec:	str	r1, [r3, #4]
   205f0:	bx	lr
   205f4:	push	{r0, r1, r4, r5, r6, lr}
   205f8:	mov	r6, r2
   205fc:	mov	r3, #1
   20600:	mov	r4, r0
   20604:	ldr	r2, [r0, #28]
   20608:	str	r3, [sp]
   2060c:	ldr	r5, [r0, #48]	; 0x30
   20610:	add	r2, r1, r2
   20614:	add	r1, r0, #60	; 0x3c
   20618:	ldr	r0, [r0, #40]	; 0x28
   2061c:	blx	r5
   20620:	subs	r5, r0, #0
   20624:	mvnne	r5, #0
   20628:	bne	20638 <union_vector_tests@@Base+0x1ac>
   2062c:	mov	r1, r6
   20630:	mov	r0, r4
   20634:	bl	205c8 <union_vector_tests@@Base+0x13c>
   20638:	mov	r0, r5
   2063c:	add	sp, sp, #8
   20640:	pop	{r4, r5, r6, pc}
   20644:	push	{r4, r5, r6, lr}
   20648:	mov	r4, r0
   2064c:	ldr	r5, [r0, #20]
   20650:	ldr	r3, [r0, #24]
   20654:	add	r1, r5, r1
   20658:	cmp	r1, r3
   2065c:	str	r1, [r0, #20]
   20660:	bcs	20670 <union_vector_tests@@Base+0x1e4>
   20664:	ldr	r0, [r4, #16]
   20668:	add	r0, r0, r5
   2066c:	pop	{r4, r5, r6, pc}
   20670:	mvn	r2, #3
   20674:	add	r1, r1, #1
   20678:	bl	205f4 <union_vector_tests@@Base+0x168>
   2067c:	cmp	r0, #0
   20680:	beq	20664 <union_vector_tests@@Base+0x1d8>
   20684:	mov	r0, #0
   20688:	pop	{r4, r5, r6, pc}
   2068c:	push	{r4, lr}
   20690:	mov	r1, #0
   20694:	mov	r4, r0
   20698:	ldr	r2, [r0, #20]
   2069c:	ldr	r0, [r0, #16]
   206a0:	bl	145c0 <memset@plt>
   206a4:	ldr	r3, [r4, #32]
   206a8:	mov	r0, r4
   206ac:	ldmib	r3, {r1, r2}
   206b0:	str	r2, [r4, #20]
   206b4:	ldr	r2, [r3]
   206b8:	str	r2, [r4, #28]
   206bc:	bl	205c8 <union_vector_tests@@Base+0x13c>
   206c0:	ldrh	r3, [r4, #130]	; 0x82
   206c4:	ldrh	r2, [r4, #128]	; 0x80
   206c8:	cmp	r2, r3
   206cc:	strhcc	r3, [r4, #128]	; 0x80
   206d0:	ldr	r3, [r4, #32]
   206d4:	ldrh	r2, [r3, #12]
   206d8:	sub	r3, r3, #36	; 0x24
   206dc:	str	r3, [r4, #32]
   206e0:	ldr	r3, [r4, #156]	; 0x9c
   206e4:	strh	r2, [r4, #130]	; 0x82
   206e8:	sub	r3, r3, #1
   206ec:	str	r3, [r4, #156]	; 0x9c
   206f0:	pop	{r4, pc}
   206f4:	ldr	r3, [r0, #20]
   206f8:	mov	r2, r1
   206fc:	mov	r1, #0
   20700:	sub	r3, r3, r2
   20704:	str	r3, [r0, #20]
   20708:	ldr	r0, [r0, #16]
   2070c:	add	r0, r0, r3
   20710:	b	145c0 <memset@plt>
   20714:	push	{r4, r5, r6, lr}
   20718:	mov	r6, r1
   2071c:	mov	r1, r2
   20720:	mov	r4, r2
   20724:	bl	20644 <union_vector_tests@@Base+0x1b8>
   20728:	subs	r5, r0, #0
   2072c:	beq	2073c <union_vector_tests@@Base+0x2b0>
   20730:	mov	r2, r4
   20734:	mov	r1, r6
   20738:	bl	14548 <memcpy@plt>
   2073c:	mov	r0, r5
   20740:	pop	{r4, r5, r6, pc}
   20744:	push	{r0, r1, r4, lr}
   20748:	cmp	r0, #4
   2074c:	mov	r4, #0
   20750:	mov	r2, r1
   20754:	movcs	r1, r0
   20758:	movcc	r1, #4
   2075c:	add	r0, sp, #4
   20760:	str	r4, [sp, #4]
   20764:	bl	145b4 <posix_memalign@plt>
   20768:	cmp	r0, r4
   2076c:	beq	20784 <union_vector_tests@@Base+0x2f8>
   20770:	ldr	r0, [sp, #4]
   20774:	cmp	r0, r4
   20778:	beq	20784 <union_vector_tests@@Base+0x2f8>
   2077c:	bl	1453c <free@plt>
   20780:	str	r4, [sp, #4]
   20784:	ldr	r0, [sp, #4]
   20788:	add	sp, sp, #8
   2078c:	pop	{r4, pc}

00020790 <flatcc_builder_default_alloc@@Base>:
   20790:	push	{r4, r5, r6, r7, r8, lr}
   20794:	subs	r6, r2, #0
   20798:	mov	r5, r1
   2079c:	bne	207c0 <flatcc_builder_default_alloc@@Base+0x30>
   207a0:	ldr	r0, [r1]
   207a4:	cmp	r0, #0
   207a8:	popeq	{r4, r5, r6, r7, r8, pc}
   207ac:	bl	1453c <free@plt>
   207b0:	str	r6, [r5]
   207b4:	str	r6, [r5, #4]
   207b8:	mov	r0, #0
   207bc:	pop	{r4, r5, r6, r7, r8, pc}
   207c0:	ldr	r2, [sp, #24]
   207c4:	mov	r7, r3
   207c8:	sub	r2, r2, #1
   207cc:	cmp	r2, #6
   207d0:	ldrls	pc, [pc, r2, lsl #2]
   207d4:	b	20868 <flatcc_builder_default_alloc@@Base+0xd8>
   207d8:	andeq	r0, r2, r0, ror r8
   207dc:	andeq	r0, r2, r8, ror #16
   207e0:	andeq	r0, r2, r8, ror #16
   207e4:	andeq	r0, r2, r8, asr r8
   207e8:	strdeq	r0, [r2], -r4
   207ec:	andeq	r0, r2, r8, ror #16
   207f0:	andeq	r0, r2, r0, ror #16
   207f4:	mov	r4, r6
   207f8:	cmp	r6, r4
   207fc:	bhi	20878 <flatcc_builder_default_alloc@@Base+0xe8>
   20800:	ldr	r2, [r5, #4]
   20804:	cmp	r6, r2
   20808:	bhi	20814 <flatcc_builder_default_alloc@@Base+0x84>
   2080c:	cmp	r4, r2, lsr #1
   20810:	bls	207b8 <flatcc_builder_default_alloc@@Base+0x28>
   20814:	mov	r1, r4
   20818:	ldr	r0, [r5]
   2081c:	bl	14560 <realloc@plt>
   20820:	subs	r6, r0, #0
   20824:	beq	20880 <flatcc_builder_default_alloc@@Base+0xf0>
   20828:	cmp	r7, #0
   2082c:	beq	2084c <flatcc_builder_default_alloc@@Base+0xbc>
   20830:	ldr	r0, [r5, #4]
   20834:	cmp	r4, r0
   20838:	bls	2084c <flatcc_builder_default_alloc@@Base+0xbc>
   2083c:	sub	r2, r4, r0
   20840:	mov	r1, #0
   20844:	add	r0, r6, r0
   20848:	bl	145c0 <memset@plt>
   2084c:	str	r6, [r5]
   20850:	str	r4, [r5, #4]
   20854:	b	207b8 <flatcc_builder_default_alloc@@Base+0x28>
   20858:	mov	r4, #288	; 0x120
   2085c:	b	207f8 <flatcc_builder_default_alloc@@Base+0x68>
   20860:	mov	r4, #64	; 0x40
   20864:	b	207f8 <flatcc_builder_default_alloc@@Base+0x68>
   20868:	mov	r4, #32
   2086c:	b	207f8 <flatcc_builder_default_alloc@@Base+0x68>
   20870:	mov	r4, #256	; 0x100
   20874:	b	207f8 <flatcc_builder_default_alloc@@Base+0x68>
   20878:	lsl	r4, r4, #1
   2087c:	b	207f8 <flatcc_builder_default_alloc@@Base+0x68>
   20880:	mvn	r0, #0
   20884:	pop	{r4, r5, r6, r7, r8, pc}
   20888:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2088c:	add	r6, r0, #52	; 0x34
   20890:	mov	r4, r1
   20894:	add	r1, r6, r1, lsl #3
   20898:	mov	r5, r2
   2089c:	add	r2, r2, r3
   208a0:	ldr	r3, [r1, #4]
   208a4:	cmp	r2, r3
   208a8:	bls	208dc <flatcc_builder_default_alloc@@Base+0x14c>
   208ac:	str	r4, [sp]
   208b0:	ldr	r3, [sp, #32]
   208b4:	ldr	r7, [r0, #48]	; 0x30
   208b8:	ldr	r0, [r0, #40]	; 0x28
   208bc:	blx	r7
   208c0:	cmp	r0, #0
   208c4:	beq	208dc <flatcc_builder_default_alloc@@Base+0x14c>
   208c8:	ldr	r3, [pc, #28]	; 208ec <flatcc_builder_default_alloc@@Base+0x15c>
   208cc:	mov	r2, #308	; 0x134
   208d0:	ldr	r1, [pc, #24]	; 208f0 <flatcc_builder_default_alloc@@Base+0x160>
   208d4:	ldr	r0, [pc, #24]	; 208f4 <flatcc_builder_default_alloc@@Base+0x164>
   208d8:	bl	14620 <__assert_fail@plt>
   208dc:	ldr	r0, [r6, r4, lsl #3]
   208e0:	add	r0, r0, r5
   208e4:	add	sp, sp, #12
   208e8:	pop	{r4, r5, r6, r7, pc}
   208ec:	ldrdeq	r2, [r3], -r9
   208f0:	ldrdeq	r2, [r3], -r8
   208f4:	andeq	r2, r3, r5, asr #24
   208f8:	ldrd	r2, [r0, #156]	; 0x9c
   208fc:	push	{r0, r1, r4, r5, r6, lr}
   20900:	mov	r5, r1
   20904:	mov	r4, r0
   20908:	add	r1, r2, #1
   2090c:	cmp	r1, r3
   20910:	str	r1, [r0, #156]	; 0x9c
   20914:	ble	209c0 <flatcc_builder_default_alloc@@Base+0x230>
   20918:	ldr	r3, [r0, #176]	; 0xb0
   2091c:	cmp	r1, r3
   20920:	cmpgt	r3, #0
   20924:	movgt	r3, #1
   20928:	movle	r3, #0
   2092c:	ble	2093c <flatcc_builder_default_alloc@@Base+0x1ac>
   20930:	mvn	r0, #0
   20934:	add	sp, sp, #8
   20938:	pop	{r4, r5, r6, pc}
   2093c:	mov	r6, #36	; 0x24
   20940:	mov	r1, #4
   20944:	str	r3, [sp]
   20948:	mov	r3, r6
   2094c:	mul	r2, r6, r2
   20950:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   20954:	cmp	r0, #0
   20958:	str	r0, [r4, #32]
   2095c:	beq	20930 <flatcc_builder_default_alloc@@Base+0x1a0>
   20960:	ldr	r3, [r4, #88]	; 0x58
   20964:	ldr	r2, [r4, #176]	; 0xb0
   20968:	udiv	r3, r3, r6
   2096c:	cmp	r2, #0
   20970:	cmpgt	r3, r2
   20974:	movgt	r3, r2
   20978:	str	r3, [r4, #160]	; 0xa0
   2097c:	ldrh	r1, [r4, #130]	; 0x82
   20980:	mvn	r0, #3
   20984:	ldr	r3, [r4, #20]
   20988:	ldr	r2, [r4, #32]
   2098c:	str	r3, [r2, #8]
   20990:	strh	r1, [r2, #12]
   20994:	ldr	r1, [r4, #28]
   20998:	strh	r5, [r4, #130]	; 0x82
   2099c:	add	r3, r3, r1
   209a0:	str	r0, [r2, #4]
   209a4:	mov	r0, #0
   209a8:	add	r3, r3, #7
   209ac:	str	r1, [r2]
   209b0:	bic	r3, r3, #7
   209b4:	str	r0, [r4, #20]
   209b8:	str	r3, [r4, #28]
   209bc:	b	20934 <flatcc_builder_default_alloc@@Base+0x1a4>
   209c0:	ldr	r3, [r0, #32]
   209c4:	add	r3, r3, #36	; 0x24
   209c8:	str	r3, [r0, #32]
   209cc:	b	2097c <flatcc_builder_default_alloc@@Base+0x1ec>
   209d0:	ldr	r3, [r0, #32]
   209d4:	push	{r0, r1, r2, r4, r5, lr}
   209d8:	add	r1, r1, #2
   209dc:	mov	r4, r0
   209e0:	lsl	r5, r1, #1
   209e4:	ldrh	r1, [r3, #28]
   209e8:	ldr	r2, [r3, #16]
   209ec:	mov	r3, #1
   209f0:	str	r3, [sp]
   209f4:	mov	r3, r5
   209f8:	add	r2, r2, r1, lsl #1
   209fc:	mov	r1, #0
   20a00:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   20a04:	cmp	r0, #0
   20a08:	streq	r0, [r4, #4]
   20a0c:	mvneq	r0, #0
   20a10:	beq	20a4c <flatcc_builder_default_alloc@@Base+0x2bc>
   20a14:	ldr	r2, [r4, #32]
   20a18:	add	r0, r0, #4
   20a1c:	mov	r3, #0
   20a20:	mov	r1, #3
   20a24:	str	r0, [r4, #4]
   20a28:	mov	r0, r4
   20a2c:	str	r3, [sp]
   20a30:	sub	r3, r5, #3
   20a34:	ldr	r2, [r2, #20]
   20a38:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   20a3c:	str	r0, [r4]
   20a40:	clz	r0, r0
   20a44:	lsr	r0, r0, #5
   20a48:	rsb	r0, r0, #0
   20a4c:	add	sp, sp, #12
   20a50:	pop	{r4, r5, pc}
   20a54:	push	{r0, r1, r2, r4, r5, lr}
   20a58:	ldr	r3, [r1]
   20a5c:	ldr	r4, [r0, #140]	; 0x8c
   20a60:	add	r2, r3, r4
   20a64:	cmp	r2, r4
   20a68:	ldrlt	r3, [pc, #76]	; 20abc <flatcc_builder_default_alloc@@Base+0x32c>
   20a6c:	str	r2, [r0, #140]	; 0x8c
   20a70:	movwlt	r2, #673	; 0x2a1
   20a74:	blt	20aa4 <flatcc_builder_default_alloc@@Base+0x314>
   20a78:	add	r1, r1, #8
   20a7c:	str	r3, [sp]
   20a80:	mov	r3, r4
   20a84:	ldr	r2, [r1, #-4]
   20a88:	ldr	r5, [r0, #44]	; 0x2c
   20a8c:	ldr	r0, [r0, #36]	; 0x24
   20a90:	blx	r5
   20a94:	cmp	r0, #0
   20a98:	beq	20ab0 <flatcc_builder_default_alloc@@Base+0x320>
   20a9c:	ldr	r3, [pc, #24]	; 20abc <flatcc_builder_default_alloc@@Base+0x32c>
   20aa0:	movw	r2, #677	; 0x2a5
   20aa4:	ldr	r1, [pc, #20]	; 20ac0 <flatcc_builder_default_alloc@@Base+0x330>
   20aa8:	ldr	r0, [pc, #20]	; 20ac4 <flatcc_builder_default_alloc@@Base+0x334>
   20aac:	bl	14620 <__assert_fail@plt>
   20ab0:	add	r0, r4, #1
   20ab4:	add	sp, sp, #12
   20ab8:	pop	{r4, r5, pc}
   20abc:	andeq	r2, r3, r8, ror #9
   20ac0:	ldrdeq	r2, [r3], -r8
   20ac4:	andeq	r2, r3, r5, asr #24
   20ac8:	cmp	r2, #0
   20acc:	bne	20adc <flatcc_builder_default_alloc@@Base+0x34c>
   20ad0:	ldrh	r2, [r0, #132]	; 0x84
   20ad4:	cmp	r2, #0
   20ad8:	moveq	r2, #1
   20adc:	ldrh	ip, [r1]
   20ae0:	cmp	ip, #3
   20ae4:	movls	ip, #4
   20ae8:	strhls	ip, [r1]
   20aec:	ldrh	ip, [r1]
   20af0:	cmp	ip, r2
   20af4:	strhcc	r2, [r1]
   20af8:	cmp	r3, #0
   20afc:	bne	20b5c <flatcc_builder_default_alloc@@Base+0x3cc>
   20b00:	ldr	r3, [r0, #140]	; 0x8c
   20b04:	sub	r2, r2, #1
   20b08:	ands	r2, r2, r3
   20b0c:	beq	20b5c <flatcc_builder_default_alloc@@Base+0x3cc>
   20b10:	push	{r4, lr}
   20b14:	mov	r3, #1
   20b18:	sub	sp, sp, #72	; 0x48
   20b1c:	mov	r1, sp
   20b20:	ldr	r4, [pc, #60]	; 20b64 <flatcc_builder_default_alloc@@Base+0x3d4>
   20b24:	strd	r2, [sp]
   20b28:	str	r4, [sp, #8]
   20b2c:	str	r2, [sp, #12]
   20b30:	bl	20a54 <flatcc_builder_default_alloc@@Base+0x2c4>
   20b34:	cmp	r0, #0
   20b38:	bne	20b50 <flatcc_builder_default_alloc@@Base+0x3c0>
   20b3c:	add	r3, r4, #512	; 0x200
   20b40:	movw	r2, #702	; 0x2be
   20b44:	ldr	r1, [pc, #28]	; 20b68 <flatcc_builder_default_alloc@@Base+0x3d8>
   20b48:	ldr	r0, [pc, #28]	; 20b6c <flatcc_builder_default_alloc@@Base+0x3dc>
   20b4c:	bl	14620 <__assert_fail@plt>
   20b50:	mov	r0, #0
   20b54:	add	sp, sp, #72	; 0x48
   20b58:	pop	{r4, pc}
   20b5c:	mov	r0, #0
   20b60:	bx	lr
   20b64:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>
   20b68:	ldrdeq	r2, [r3], -r8
   20b6c:	andeq	r2, r3, r5, asr #24
   20b70:	ldr	r3, [r1]
   20b74:	push	{r0, r1, r4, r5, r6, lr}
   20b78:	ldr	r2, [r0, #136]	; 0x88
   20b7c:	sub	r4, r2, r3
   20b80:	cmp	r2, r4
   20b84:	ldrle	r3, [pc, #80]	; 20bdc <flatcc_builder_default_alloc@@Base+0x44c>
   20b88:	movwle	r2, #647	; 0x287
   20b8c:	ble	20bc0 <flatcc_builder_default_alloc@@Base+0x430>
   20b90:	mov	r5, r0
   20b94:	add	r1, r1, #8
   20b98:	str	r3, [sp]
   20b9c:	mov	r3, r4
   20ba0:	ldr	r2, [r1, #-4]
   20ba4:	ldr	r0, [r0, #36]	; 0x24
   20ba8:	ldr	r6, [r5, #44]	; 0x2c
   20bac:	blx	r6
   20bb0:	cmp	r0, #0
   20bb4:	beq	20bcc <flatcc_builder_default_alloc@@Base+0x43c>
   20bb8:	ldr	r3, [pc, #28]	; 20bdc <flatcc_builder_default_alloc@@Base+0x44c>
   20bbc:	movw	r2, #651	; 0x28b
   20bc0:	ldr	r1, [pc, #24]	; 20be0 <flatcc_builder_default_alloc@@Base+0x450>
   20bc4:	ldr	r0, [pc, #24]	; 20be4 <flatcc_builder_default_alloc@@Base+0x454>
   20bc8:	bl	14620 <__assert_fail@plt>
   20bcc:	mov	r0, r4
   20bd0:	str	r4, [r5, #136]	; 0x88
   20bd4:	add	sp, sp, #8
   20bd8:	pop	{r4, r5, r6, pc}
   20bdc:	andeq	r2, r3, r1, lsl #14
   20be0:	ldrdeq	r2, [r3], -r8
   20be4:	andeq	r2, r3, r5, asr #24
   20be8:	ldr	r3, [r0, #20]
   20bec:	adds	r1, r3, r1
   20bf0:	movcs	r3, #1
   20bf4:	movcc	r3, #0
   20bf8:	cmp	r1, r2
   20bfc:	movls	r2, r3
   20c00:	orrhi	r2, r3, #1
   20c04:	cmp	r2, #0
   20c08:	beq	20c24 <flatcc_builder_default_alloc@@Base+0x494>
   20c0c:	push	{r4, lr}
   20c10:	mov	r2, #892	; 0x37c
   20c14:	ldr	r3, [pc, #20]	; 20c30 <flatcc_builder_default_alloc@@Base+0x4a0>
   20c18:	ldr	r1, [pc, #20]	; 20c34 <flatcc_builder_default_alloc@@Base+0x4a4>
   20c1c:	ldr	r0, [pc, #20]	; 20c38 <flatcc_builder_default_alloc@@Base+0x4a8>
   20c20:	bl	14620 <__assert_fail@plt>
   20c24:	str	r1, [r0, #20]
   20c28:	mov	r0, r2
   20c2c:	bx	lr
   20c30:	andeq	r2, r3, ip, lsl #14
   20c34:	ldrdeq	r2, [r3], -r8
   20c38:	andeq	r2, r3, lr, lsl ip
   20c3c:	ldrh	ip, [r0, #128]	; 0x80
   20c40:	push	{r4, r5, r6, lr}
   20c44:	sub	sp, sp, #80	; 0x50
   20c48:	ldr	r5, [r0, #136]	; 0x88
   20c4c:	cmp	ip, #3
   20c50:	movls	ip, #4
   20c54:	strhls	ip, [r0, #128]	; 0x80
   20c58:	mov	ip, #4
   20c5c:	add	lr, sp, ip
   20c60:	and	r4, r5, #3
   20c64:	stmib	sp, {r2, ip}
   20c68:	str	lr, [sp, #16]
   20c6c:	str	ip, [sp, #20]
   20c70:	mov	ip, #1
   20c74:	str	ip, [sp, #12]
   20c78:	lsls	ip, r2, #2
   20c7c:	beq	20c98 <flatcc_builder_default_alloc@@Base+0x508>
   20c80:	add	lr, ip, #4
   20c84:	str	ip, [sp, #28]
   20c88:	mov	ip, #2
   20c8c:	str	lr, [sp, #8]
   20c90:	str	ip, [sp, #12]
   20c94:	str	r1, [sp, #24]
   20c98:	cmp	r4, #0
   20c9c:	beq	20ccc <flatcc_builder_default_alloc@@Base+0x53c>
   20ca0:	ldr	ip, [sp, #8]
   20ca4:	add	lr, sp, #80	; 0x50
   20ca8:	ldr	r6, [pc, #204]	; 20d7c <flatcc_builder_default_alloc@@Base+0x5ec>
   20cac:	add	ip, ip, r4
   20cb0:	str	ip, [sp, #8]
   20cb4:	ldr	ip, [sp, #12]
   20cb8:	add	ip, ip, #1
   20cbc:	add	lr, lr, ip, lsl #3
   20cc0:	str	ip, [sp, #12]
   20cc4:	str	r6, [lr, #-72]	; 0xffffffb8
   20cc8:	str	r4, [lr, #-68]	; 0xffffffbc
   20ccc:	ldr	lr, [sp, #8]
   20cd0:	mov	ip, #0
   20cd4:	mvn	r6, #3
   20cd8:	sub	lr, lr, #4
   20cdc:	sub	lr, lr, r5
   20ce0:	cmp	r2, ip
   20ce4:	bne	20cf8 <flatcc_builder_default_alloc@@Base+0x568>
   20ce8:	add	r1, sp, #8
   20cec:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   20cf0:	add	sp, sp, #80	; 0x50
   20cf4:	pop	{r4, r5, r6, pc}
   20cf8:	ldr	r5, [r1, ip, lsl #2]
   20cfc:	cmp	r5, #0
   20d00:	beq	20d38 <flatcc_builder_default_alloc@@Base+0x5a8>
   20d04:	mla	r4, r6, ip, lr
   20d08:	cmp	r3, #0
   20d0c:	add	r4, r4, r5
   20d10:	str	r4, [r1, ip, lsl #2]
   20d14:	beq	20d74 <flatcc_builder_default_alloc@@Base+0x5e4>
   20d18:	ldrb	r4, [r3, ip]
   20d1c:	cmp	r4, #0
   20d20:	bne	20d74 <flatcc_builder_default_alloc@@Base+0x5e4>
   20d24:	ldr	r3, [pc, #84]	; 20d80 <flatcc_builder_default_alloc@@Base+0x5f0>
   20d28:	movw	r2, #1457	; 0x5b1
   20d2c:	ldr	r1, [pc, #80]	; 20d84 <flatcc_builder_default_alloc@@Base+0x5f4>
   20d30:	ldr	r0, [pc, #80]	; 20d88 <flatcc_builder_default_alloc@@Base+0x5f8>
   20d34:	bl	14620 <__assert_fail@plt>
   20d38:	cmp	r3, #0
   20d3c:	beq	20d60 <flatcc_builder_default_alloc@@Base+0x5d0>
   20d40:	ldrb	r4, [r3, ip]
   20d44:	cmp	r4, #0
   20d48:	beq	20d74 <flatcc_builder_default_alloc@@Base+0x5e4>
   20d4c:	ldr	r3, [pc, #44]	; 20d80 <flatcc_builder_default_alloc@@Base+0x5f0>
   20d50:	movw	r2, #1461	; 0x5b5
   20d54:	ldr	r1, [pc, #40]	; 20d84 <flatcc_builder_default_alloc@@Base+0x5f4>
   20d58:	ldr	r0, [pc, #44]	; 20d8c <flatcc_builder_default_alloc@@Base+0x5fc>
   20d5c:	b	20d34 <flatcc_builder_default_alloc@@Base+0x5a4>
   20d60:	ldr	r3, [pc, #24]	; 20d80 <flatcc_builder_default_alloc@@Base+0x5f0>
   20d64:	movw	r2, #1463	; 0x5b7
   20d68:	ldr	r1, [pc, #20]	; 20d84 <flatcc_builder_default_alloc@@Base+0x5f4>
   20d6c:	ldr	r0, [pc, #28]	; 20d90 <flatcc_builder_default_alloc@@Base+0x600>
   20d70:	b	20d34 <flatcc_builder_default_alloc@@Base+0x5a4>
   20d74:	add	ip, ip, #1
   20d78:	b	20ce0 <flatcc_builder_default_alloc@@Base+0x550>
   20d7c:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>
   20d80:	andeq	r2, r3, sp, lsl r7
   20d84:	ldrdeq	r2, [r3], -r8
   20d88:	andeq	r2, r3, r9, lsr ip
   20d8c:	andeq	r2, r3, r7, asr #24
   20d90:	andeq	r2, r3, r5, asr #24

00020d94 <flatcc_builder_flush_vtable_cache@@Base>:
   20d94:	ldr	r3, [r0, #116]	; 0x74
   20d98:	cmp	r3, #0
   20d9c:	bxeq	lr
   20da0:	push	{r4, lr}
   20da4:	mov	r4, r0
   20da8:	mov	r1, #0
   20dac:	ldr	r0, [r0, #92]	; 0x5c
   20db0:	ldr	r2, [r4, #96]	; 0x60
   20db4:	bl	145c0 <memset@plt>
   20db8:	mov	r0, #0
   20dbc:	mov	r1, #16
   20dc0:	strd	r0, [r4, #120]	; 0x78
   20dc4:	pop	{r4, pc}

00020dc8 <flatcc_builder_custom_init@@Base>:
   20dc8:	push	{r4, r5, r6, r7, r8, lr}
   20dcc:	mov	r6, r1
   20dd0:	mov	r7, r2
   20dd4:	mov	r1, #0
   20dd8:	mov	r2, #232	; 0xe8
   20ddc:	mov	r4, r0
   20de0:	mov	r5, r3
   20de4:	bl	145c0 <memset@plt>
   20de8:	cmp	r6, #0
   20dec:	mov	r0, #0
   20df0:	moveq	r3, #1
   20df4:	addeq	r7, r4, #188	; 0xbc
   20df8:	ldreq	r6, [pc, #36]	; 20e24 <flatcc_builder_custom_init@@Base+0x5c>
   20dfc:	streq	r3, [r4, #184]	; 0xb8
   20e00:	cmp	r5, #0
   20e04:	ldr	r3, [pc, #28]	; 20e28 <flatcc_builder_custom_init@@Base+0x60>
   20e08:	str	r7, [r4, #36]	; 0x24
   20e0c:	str	r6, [r4, #44]	; 0x2c
   20e10:	moveq	r5, r3
   20e14:	ldr	r3, [sp, #24]
   20e18:	str	r3, [r4, #40]	; 0x28
   20e1c:	str	r5, [r4, #48]	; 0x30
   20e20:	pop	{r4, r5, r6, r7, r8, pc}
   20e24:	ldrdeq	r3, [r2], -r8
   20e28:	muleq	r2, r0, r7

00020e2c <flatcc_builder_init@@Base>:
   20e2c:	push	{r4, lr}
   20e30:	mov	r2, #232	; 0xe8
   20e34:	mov	r1, #0
   20e38:	bl	145c0 <memset@plt>
   20e3c:	mov	r3, r0
   20e40:	mov	r2, #1
   20e44:	mov	r0, #0
   20e48:	str	r2, [r3, #184]	; 0xb8
   20e4c:	ldr	r2, [pc, #20]	; 20e68 <flatcc_builder_init@@Base+0x3c>
   20e50:	str	r2, [r3, #48]	; 0x30
   20e54:	add	r2, r3, #188	; 0xbc
   20e58:	str	r2, [r3, #36]	; 0x24
   20e5c:	ldr	r2, [pc, #8]	; 20e6c <flatcc_builder_init@@Base+0x40>
   20e60:	str	r2, [r3, #44]	; 0x2c
   20e64:	pop	{r4, pc}
   20e68:	muleq	r2, r0, r7
   20e6c:	ldrdeq	r3, [r2], -r8

00020e70 <flatcc_builder_custom_reset@@Base>:
   20e70:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20e74:	mov	r4, r0
   20e78:	mov	r7, r1
   20e7c:	mov	r8, r2
   20e80:	mov	r5, r0
   20e84:	mov	r6, #0
   20e88:	ldr	r3, [r5, #52]	; 0x34
   20e8c:	add	r1, r5, #52	; 0x34
   20e90:	cmp	r3, #0
   20e94:	beq	20f70 <flatcc_builder_custom_reset@@Base+0x100>
   20e98:	cmp	r6, #5
   20e9c:	cmpne	r8, #0
   20ea0:	bne	20f48 <flatcc_builder_custom_reset@@Base+0xd8>
   20ea4:	mov	r1, #0
   20ea8:	ldr	r0, [r5, #52]	; 0x34
   20eac:	ldr	r2, [r5, #56]	; 0x38
   20eb0:	bl	145c0 <memset@plt>
   20eb4:	add	r6, r6, #1
   20eb8:	add	r5, r5, #8
   20ebc:	cmp	r6, #8
   20ec0:	bne	20e88 <flatcc_builder_custom_reset@@Base+0x18>
   20ec4:	ldr	r2, [r4, #124]	; 0x7c
   20ec8:	mov	r3, #0
   20ecc:	ldr	r0, [r4, #184]	; 0xb8
   20ed0:	str	r3, [r4, #24]
   20ed4:	str	r3, [r4, #32]
   20ed8:	cmp	r2, r3
   20edc:	str	r3, [r4, #120]	; 0x78
   20ee0:	movne	r2, #16
   20ee4:	strh	r3, [r4, #128]	; 0x80
   20ee8:	str	r3, [r4, #136]	; 0x88
   20eec:	strne	r2, [r4, #124]	; 0x7c
   20ef0:	cmp	r7, #0
   20ef4:	ldr	r2, [r4, #60]	; 0x3c
   20ef8:	strne	r3, [r4, #172]	; 0xac
   20efc:	strne	r3, [r4, #176]	; 0xb0
   20f00:	strne	r3, [r4, #180]	; 0xb4
   20f04:	cmp	r0, #0
   20f08:	strd	r2, [r4, #16]
   20f0c:	ldr	r2, [r4, #76]	; 0x4c
   20f10:	str	r2, [r4]
   20f14:	ldr	r2, [r4, #52]	; 0x34
   20f18:	str	r3, [r4, #140]	; 0x8c
   20f1c:	str	r3, [r4, #148]	; 0x94
   20f20:	str	r3, [r4, #152]	; 0x98
   20f24:	str	r3, [r4, #156]	; 0x9c
   20f28:	str	r2, [r4, #4]
   20f2c:	str	r3, [r4, #160]	; 0xa0
   20f30:	beq	20f40 <flatcc_builder_custom_reset@@Base+0xd0>
   20f34:	add	r0, r4, #188	; 0xbc
   20f38:	bl	233d8 <flatcc_emitter_reset@@Base>
   20f3c:	mov	r0, #0
   20f40:	add	sp, sp, #12
   20f44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20f48:	mov	r3, #1
   20f4c:	ldr	r0, [r4, #40]	; 0x28
   20f50:	mov	r2, r3
   20f54:	ldr	r9, [r4, #48]	; 0x30
   20f58:	str	r6, [sp]
   20f5c:	blx	r9
   20f60:	cmp	r0, #0
   20f64:	beq	20ea4 <flatcc_builder_custom_reset@@Base+0x34>
   20f68:	mvn	r0, #0
   20f6c:	b	20f40 <flatcc_builder_custom_reset@@Base+0xd0>
   20f70:	ldr	r3, [r5, #56]	; 0x38
   20f74:	cmp	r3, #0
   20f78:	beq	20eb4 <flatcc_builder_custom_reset@@Base+0x44>
   20f7c:	ldr	r3, [pc, #12]	; 20f90 <flatcc_builder_custom_reset@@Base+0x120>
   20f80:	movw	r2, #434	; 0x1b2
   20f84:	ldr	r1, [pc, #8]	; 20f94 <flatcc_builder_custom_reset@@Base+0x124>
   20f88:	ldr	r0, [pc, #8]	; 20f98 <flatcc_builder_custom_reset@@Base+0x128>
   20f8c:	bl	14620 <__assert_fail@plt>
   20f90:	andeq	r2, r3, sl, lsr r7
   20f94:	ldrdeq	r2, [r3], -r8
   20f98:	andeq	r2, r3, r5, asr ip

00020f9c <flatcc_builder_reset@@Base>:
   20f9c:	mov	r2, #0
   20fa0:	mov	r1, r2
   20fa4:	b	20e70 <flatcc_builder_custom_reset@@Base>

00020fa8 <flatcc_builder_clear@@Base>:
   20fa8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20fac:	mov	r4, r0
   20fb0:	add	r6, r0, #52	; 0x34
   20fb4:	mov	r5, #0
   20fb8:	mov	r3, #0
   20fbc:	mov	r1, r6
   20fc0:	mov	r2, r3
   20fc4:	ldr	r0, [r4, #40]	; 0x28
   20fc8:	add	r6, r6, #8
   20fcc:	ldr	r7, [r4, #48]	; 0x30
   20fd0:	str	r5, [sp]
   20fd4:	add	r5, r5, #1
   20fd8:	blx	r7
   20fdc:	cmp	r5, #8
   20fe0:	bne	20fb8 <flatcc_builder_clear@@Base+0x10>
   20fe4:	ldr	r3, [r4, #184]	; 0xb8
   20fe8:	cmp	r3, #0
   20fec:	beq	20ff8 <flatcc_builder_clear@@Base+0x50>
   20ff0:	add	r0, r4, #188	; 0xbc
   20ff4:	bl	23480 <flatcc_emitter_clear@@Base>
   20ff8:	mov	r2, #232	; 0xe8
   20ffc:	mov	r1, #0
   21000:	mov	r0, r4
   21004:	add	sp, sp, #12
   21008:	pop	{r4, r5, r6, r7, lr}
   2100c:	b	145c0 <memset@plt>

00021010 <flatcc_builder_enter_user_frame_ptr@@Base>:
   21010:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21014:	add	r5, r1, #3
   21018:	mov	r7, #0
   2101c:	bic	r5, r5, #3
   21020:	mov	r1, #7
   21024:	add	r5, r5, #4
   21028:	mov	r6, r0
   2102c:	mov	r3, r5
   21030:	str	r7, [sp]
   21034:	ldr	r2, [r0, #228]	; 0xe4
   21038:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   2103c:	subs	r4, r0, #0
   21040:	beq	2106c <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   21044:	mov	r2, r5
   21048:	mov	r1, r7
   2104c:	bl	145c0 <memset@plt>
   21050:	ldr	r3, [r6, #224]	; 0xe0
   21054:	str	r3, [r4], #4
   21058:	ldr	r1, [r6, #228]	; 0xe4
   2105c:	add	r3, r1, #4
   21060:	add	r5, r1, r5
   21064:	str	r3, [r6, #224]	; 0xe0
   21068:	str	r5, [r6, #228]	; 0xe4
   2106c:	mov	r0, r4
   21070:	add	sp, sp, #12
   21074:	pop	{r4, r5, r6, r7, pc}

00021078 <flatcc_builder_enter_user_frame@@Base>:
   21078:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2107c:	add	r4, r1, #3
   21080:	mov	r7, #0
   21084:	bic	r4, r4, #3
   21088:	mov	r1, #7
   2108c:	add	r4, r4, #4
   21090:	mov	r6, r0
   21094:	mov	r3, r4
   21098:	str	r7, [sp]
   2109c:	ldr	r2, [r0, #228]	; 0xe4
   210a0:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   210a4:	subs	r5, r0, #0
   210a8:	moveq	r0, r5
   210ac:	beq	210d8 <flatcc_builder_enter_user_frame@@Base+0x60>
   210b0:	mov	r2, r4
   210b4:	mov	r1, r7
   210b8:	bl	145c0 <memset@plt>
   210bc:	ldr	r3, [r6, #224]	; 0xe0
   210c0:	str	r3, [r5]
   210c4:	ldr	r1, [r6, #228]	; 0xe4
   210c8:	add	r0, r1, #4
   210cc:	add	r4, r1, r4
   210d0:	str	r0, [r6, #224]	; 0xe0
   210d4:	str	r4, [r6, #228]	; 0xe4
   210d8:	add	sp, sp, #12
   210dc:	pop	{r4, r5, r6, r7, pc}

000210e0 <flatcc_builder_exit_user_frame@@Base>:
   210e0:	ldr	r3, [r0, #224]	; 0xe0
   210e4:	cmp	r3, #0
   210e8:	bne	21104 <flatcc_builder_exit_user_frame@@Base+0x24>
   210ec:	push	{r4, lr}
   210f0:	movw	r2, #542	; 0x21e
   210f4:	ldr	r3, [pc, #40]	; 21124 <flatcc_builder_exit_user_frame@@Base+0x44>
   210f8:	ldr	r1, [pc, #40]	; 21128 <flatcc_builder_exit_user_frame@@Base+0x48>
   210fc:	ldr	r0, [pc, #40]	; 2112c <flatcc_builder_exit_user_frame@@Base+0x4c>
   21100:	bl	14620 <__assert_fail@plt>
   21104:	ldr	r1, [r0, #108]	; 0x6c
   21108:	mov	r2, r0
   2110c:	add	r1, r1, r3
   21110:	sub	r3, r3, #4
   21114:	str	r3, [r0, #228]	; 0xe4
   21118:	ldr	r0, [r1, #-4]
   2111c:	str	r0, [r2, #224]	; 0xe0
   21120:	bx	lr
   21124:	andeq	r2, r3, r6, asr r7
   21128:	ldrdeq	r2, [r3], -r8
   2112c:	andeq	r2, r3, r7, ror #24

00021130 <flatcc_builder_exit_user_frame_at@@Base>:
   21130:	ldr	r2, [r0, #224]	; 0xe0
   21134:	cmp	r2, r1
   21138:	bcs	21154 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   2113c:	push	{r4, lr}
   21140:	movw	r2, #551	; 0x227
   21144:	ldr	r3, [pc, #16]	; 2115c <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   21148:	ldr	r1, [pc, #16]	; 21160 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   2114c:	ldr	r0, [pc, #16]	; 21164 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   21150:	bl	14620 <__assert_fail@plt>
   21154:	str	r1, [r0, #224]	; 0xe0
   21158:	b	210e0 <flatcc_builder_exit_user_frame@@Base>
   2115c:	andeq	r2, r3, r5, ror r7
   21160:	ldrdeq	r2, [r3], -r8
   21164:	andeq	r2, r3, r0, lsl #25

00021168 <flatcc_builder_get_current_user_frame@@Base>:
   21168:	ldr	r0, [r0, #224]	; 0xe0
   2116c:	bx	lr

00021170 <flatcc_builder_get_user_frame_ptr@@Base>:
   21170:	ldr	r0, [r0, #108]	; 0x6c
   21174:	add	r0, r0, r1
   21178:	bx	lr

0002117c <flatcc_builder_embed_buffer@@Base>:
   2117c:	push	{r4, r5, r6, lr}
   21180:	mov	r4, r3
   21184:	sub	sp, sp, #80	; 0x50
   21188:	mov	r6, r2
   2118c:	mov	r2, r1
   21190:	add	r1, sp, #96	; 0x60
   21194:	mov	r5, r0
   21198:	ldr	r3, [r0, #152]	; 0x98
   2119c:	adds	r3, r3, #0
   211a0:	movne	r3, #1
   211a4:	bl	20ac8 <flatcc_builder_default_alloc@@Base+0x338>
   211a8:	cmp	r0, #0
   211ac:	movne	r0, #0
   211b0:	bne	21284 <flatcc_builder_embed_buffer@@Base+0x108>
   211b4:	ldr	r3, [sp, #100]	; 0x64
   211b8:	str	r0, [sp, #8]
   211bc:	str	r0, [sp, #12]
   211c0:	tst	r3, #2
   211c4:	ldr	r3, [r5, #136]	; 0x88
   211c8:	movne	r2, #4
   211cc:	moveq	r2, #0
   211d0:	sub	r3, r3, r4
   211d4:	sub	r3, r3, r2
   211d8:	ldrh	r2, [sp, #96]	; 0x60
   211dc:	sub	r2, r2, #1
   211e0:	and	r3, r3, r2
   211e4:	add	r2, r4, r3
   211e8:	str	r2, [sp, #4]
   211ec:	ldr	r2, [r5, #152]	; 0x98
   211f0:	cmp	r2, #0
   211f4:	beq	21214 <flatcc_builder_embed_buffer@@Base+0x98>
   211f8:	mov	r2, #4
   211fc:	add	r1, sp, r2
   21200:	str	r2, [sp, #8]
   21204:	str	r1, [sp, #16]
   21208:	str	r2, [sp, #20]
   2120c:	mov	r2, #1
   21210:	str	r2, [sp, #12]
   21214:	cmp	r4, #0
   21218:	beq	21244 <flatcc_builder_embed_buffer@@Base+0xc8>
   2121c:	ldr	r2, [sp, #8]
   21220:	add	r1, sp, #80	; 0x50
   21224:	add	r2, r2, r4
   21228:	str	r2, [sp, #8]
   2122c:	ldr	r2, [sp, #12]
   21230:	add	r2, r2, #1
   21234:	add	r1, r1, r2, lsl #3
   21238:	str	r2, [sp, #12]
   2123c:	str	r6, [r1, #-72]	; 0xffffffb8
   21240:	str	r4, [r1, #-68]	; 0xffffffbc
   21244:	cmp	r3, #0
   21248:	beq	21278 <flatcc_builder_embed_buffer@@Base+0xfc>
   2124c:	ldr	r2, [sp, #8]
   21250:	add	r1, sp, #80	; 0x50
   21254:	ldr	r0, [pc, #48]	; 2128c <flatcc_builder_embed_buffer@@Base+0x110>
   21258:	add	r2, r2, r3
   2125c:	str	r2, [sp, #8]
   21260:	ldr	r2, [sp, #12]
   21264:	add	r2, r2, #1
   21268:	add	r1, r1, r2, lsl #3
   2126c:	str	r2, [sp, #12]
   21270:	str	r0, [r1, #-72]	; 0xffffffb8
   21274:	str	r3, [r1, #-68]	; 0xffffffbc
   21278:	add	r1, sp, #8
   2127c:	mov	r0, r5
   21280:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   21284:	add	sp, sp, #80	; 0x50
   21288:	pop	{r4, r5, r6, pc}
   2128c:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

00021290 <flatcc_builder_create_buffer@@Base>:
   21290:	push	{r4, r5, r6, r7, r8, r9, lr}
   21294:	sub	sp, sp, #92	; 0x5c
   21298:	mov	r8, #0
   2129c:	mov	r9, r1
   212a0:	mov	r5, r3
   212a4:	add	r1, sp, #120	; 0x78
   212a8:	mov	r4, r0
   212ac:	ldr	r7, [sp, #124]	; 0x7c
   212b0:	str	r8, [sp, #12]
   212b4:	and	r6, r7, #1
   212b8:	mov	r3, r6
   212bc:	bl	20ac8 <flatcc_builder_default_alloc@@Base+0x338>
   212c0:	cmp	r0, r8
   212c4:	bne	21434 <flatcc_builder_create_buffer@@Base+0x1a4>
   212c8:	ldrh	r3, [r4, #128]	; 0x80
   212cc:	ldrh	r1, [sp, #120]	; 0x78
   212d0:	ldr	r2, [r4, #136]	; 0x88
   212d4:	cmp	r3, r1
   212d8:	strhcc	r1, [r4, #128]	; 0x80
   212dc:	cmp	r9, #0
   212e0:	sub	r1, r1, #1
   212e4:	ldrne	r3, [r9]
   212e8:	strne	r3, [sp, #12]
   212ec:	sub	r3, r2, #4
   212f0:	ldr	r0, [sp, #12]
   212f4:	cmp	r0, #0
   212f8:	movne	r0, #4
   212fc:	tst	r7, #2
   21300:	movne	ip, #4
   21304:	moveq	ip, #0
   21308:	sub	r3, r3, r0
   2130c:	ands	r7, r7, #3
   21310:	sub	r3, r3, ip
   21314:	and	r3, r3, r1
   21318:	mov	r1, #0
   2131c:	str	r1, [sp, #16]
   21320:	str	r1, [sp, #20]
   21324:	beq	21344 <flatcc_builder_create_buffer@@Base+0xb4>
   21328:	mov	r1, #4
   2132c:	add	ip, sp, #8
   21330:	str	r1, [sp, #16]
   21334:	str	ip, [sp, #24]
   21338:	str	r1, [sp, #28]
   2133c:	mov	r1, #1
   21340:	str	r1, [sp, #20]
   21344:	ldr	ip, [sp, #16]
   21348:	add	r8, sp, #88	; 0x58
   2134c:	add	r9, sp, #4
   21350:	cmp	r0, #0
   21354:	ldr	lr, [sp, #20]
   21358:	add	ip, ip, #4
   2135c:	add	r1, lr, #1
   21360:	str	ip, [sp, #16]
   21364:	add	r8, r8, r1, lsl #3
   21368:	str	r1, [sp, #20]
   2136c:	str	r9, [r8, #-72]	; 0xffffffb8
   21370:	mov	r9, #4
   21374:	str	r9, [r8, #-68]	; 0xffffffbc
   21378:	beq	213a4 <flatcc_builder_create_buffer@@Base+0x114>
   2137c:	add	ip, ip, r0
   21380:	add	r1, lr, #2
   21384:	add	lr, lr, #2
   21388:	str	ip, [sp, #16]
   2138c:	add	ip, sp, #88	; 0x58
   21390:	add	r1, ip, r1, lsl #3
   21394:	add	ip, sp, #12
   21398:	str	lr, [sp, #20]
   2139c:	str	ip, [r1, #-72]	; 0xffffffb8
   213a0:	str	r0, [r1, #-68]	; 0xffffffbc
   213a4:	cmp	r3, #0
   213a8:	beq	213d8 <flatcc_builder_create_buffer@@Base+0x148>
   213ac:	ldr	r1, [sp, #16]
   213b0:	add	r0, sp, #88	; 0x58
   213b4:	ldr	ip, [pc, #132]	; 21440 <flatcc_builder_create_buffer@@Base+0x1b0>
   213b8:	add	r1, r1, r3
   213bc:	str	r1, [sp, #16]
   213c0:	ldr	r1, [sp, #20]
   213c4:	add	r1, r1, #1
   213c8:	add	r0, r0, r1, lsl #3
   213cc:	str	r1, [sp, #20]
   213d0:	str	ip, [r0, #-72]	; 0xffffffb8
   213d4:	str	r3, [r0, #-68]	; 0xffffffbc
   213d8:	ldr	r3, [sp, #16]
   213dc:	cmp	r7, #0
   213e0:	add	r1, sp, #16
   213e4:	mov	r0, r4
   213e8:	sub	r3, r2, r3
   213ec:	movne	r2, #4
   213f0:	moveq	r2, #0
   213f4:	cmp	r6, #0
   213f8:	add	r3, r3, r2
   213fc:	ldrne	r2, [r4, #144]	; 0x90
   21400:	ldreq	r2, [r4, #140]	; 0x8c
   21404:	sub	r2, r2, r3
   21408:	sub	r3, r5, r3
   2140c:	str	r3, [sp, #4]
   21410:	str	r2, [sp, #8]
   21414:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   21418:	cmp	r0, #0
   2141c:	bne	21438 <flatcc_builder_create_buffer@@Base+0x1a8>
   21420:	ldr	r3, [pc, #28]	; 21444 <flatcc_builder_create_buffer@@Base+0x1b4>
   21424:	mov	r2, #772	; 0x304
   21428:	ldr	r1, [pc, #24]	; 21448 <flatcc_builder_create_buffer@@Base+0x1b8>
   2142c:	ldr	r0, [pc, #24]	; 2144c <flatcc_builder_create_buffer@@Base+0x1bc>
   21430:	bl	14620 <__assert_fail@plt>
   21434:	mov	r0, r8
   21438:	add	sp, sp, #92	; 0x5c
   2143c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21440:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>
   21444:	muleq	r3, r7, r7
   21448:	ldrdeq	r2, [r3], -r8
   2144c:	andeq	r2, r3, r5, asr #24

00021450 <flatcc_builder_create_struct@@Base>:
   21450:	cmp	r3, #0
   21454:	push	{lr}		; (str lr, [sp, #-4]!)
   21458:	sub	sp, sp, #76	; 0x4c
   2145c:	bne	21474 <flatcc_builder_create_struct@@Base+0x24>
   21460:	ldr	r3, [pc, #148]	; 214fc <flatcc_builder_create_struct@@Base+0xac>
   21464:	movw	r2, #783	; 0x30f
   21468:	ldr	r1, [pc, #144]	; 21500 <flatcc_builder_create_struct@@Base+0xb0>
   2146c:	ldr	r0, [pc, #144]	; 21504 <flatcc_builder_create_struct@@Base+0xb4>
   21470:	bl	14620 <__assert_fail@plt>
   21474:	ldrh	ip, [r0, #128]	; 0x80
   21478:	cmp	ip, r3
   2147c:	ldr	ip, [r0, #136]	; 0x88
   21480:	strhcc	r3, [r0, #128]	; 0x80
   21484:	sub	r3, r3, #1
   21488:	sub	ip, ip, r2
   2148c:	and	r3, r3, ip
   21490:	mov	ip, #0
   21494:	cmp	r2, ip
   21498:	str	ip, [sp]
   2149c:	str	ip, [sp, #4]
   214a0:	beq	214b8 <flatcc_builder_create_struct@@Base+0x68>
   214a4:	str	r2, [sp]
   214a8:	str	r1, [sp, #8]
   214ac:	str	r2, [sp, #12]
   214b0:	mov	r2, #1
   214b4:	str	r2, [sp, #4]
   214b8:	cmp	r3, #0
   214bc:	beq	214ec <flatcc_builder_create_struct@@Base+0x9c>
   214c0:	ldr	r2, [sp]
   214c4:	add	r1, sp, #72	; 0x48
   214c8:	ldr	ip, [pc, #56]	; 21508 <flatcc_builder_create_struct@@Base+0xb8>
   214cc:	add	r2, r2, r3
   214d0:	str	r2, [sp]
   214d4:	ldr	r2, [sp, #4]
   214d8:	add	r2, r2, #1
   214dc:	add	r1, r1, r2, lsl #3
   214e0:	str	r2, [sp, #4]
   214e4:	str	ip, [r1, #-72]	; 0xffffffb8
   214e8:	str	r3, [r1, #-68]	; 0xffffffbc
   214ec:	mov	r1, sp
   214f0:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   214f4:	add	sp, sp, #76	; 0x4c
   214f8:	pop	{pc}		; (ldr pc, [sp], #4)
   214fc:			; <UNDEFINED> instruction: 0x000327b4
   21500:	ldrdeq	r2, [r3], -r8
   21504:	muleq	r3, pc, ip	; <UNPREDICTABLE>
   21508:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

0002150c <flatcc_builder_start_buffer@@Base>:
   2150c:	push	{r4, r5, r6, r7, r8, lr}
   21510:	mov	r5, r1
   21514:	mov	r4, r0
   21518:	mov	r7, r2
   2151c:	mov	r6, r3
   21520:	ldrh	r1, [r0, #128]	; 0x80
   21524:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   21528:	cmp	r0, #0
   2152c:	bne	2159c <flatcc_builder_start_buffer@@Base+0x90>
   21530:	ldrh	r3, [r4, #132]	; 0x84
   21534:	mov	ip, #1
   21538:	cmp	r5, #0
   2153c:	ldr	r1, [r4, #32]
   21540:	strh	ip, [r4, #128]	; 0x80
   21544:	strh	r3, [r1, #34]	; 0x22
   21548:	ldrh	r3, [r4, #164]	; 0xa4
   2154c:	strh	r7, [r4, #132]	; 0x84
   21550:	strh	r3, [r1, #32]
   21554:	ldr	r3, [r4, #144]	; 0x90
   21558:	strh	r6, [r4, #164]	; 0xa4
   2155c:	str	r3, [r1, #20]
   21560:	ldr	r3, [r4, #152]	; 0x98
   21564:	str	r3, [r1, #28]
   21568:	ldr	r3, [r4, #136]	; 0x88
   2156c:	str	r3, [r4, #144]	; 0x90
   21570:	ldr	r3, [r4, #148]	; 0x94
   21574:	add	r2, r3, ip
   21578:	strd	r2, [r4, #148]	; 0x94
   2157c:	ldr	r3, [r4, #168]	; 0xa8
   21580:	str	r3, [r1, #16]
   21584:	ldr	r3, [pc, #24]	; 215a4 <flatcc_builder_start_buffer@@Base+0x98>
   21588:	moveq	r5, r3
   2158c:	ldr	r3, [r5]
   21590:	str	r3, [r4, #168]	; 0xa8
   21594:	strh	ip, [r1, #14]
   21598:	pop	{r4, r5, r6, r7, r8, pc}
   2159c:	mvn	r0, #0
   215a0:	pop	{r4, r5, r6, r7, r8, pc}
   215a4:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

000215a8 <flatcc_builder_end_buffer@@Base>:
   215a8:	push	{r0, r1, r2, r4, r5, lr}
   215ac:	mov	r4, r0
   215b0:	ldrh	r0, [r0, #164]	; 0xa4
   215b4:	ldr	r2, [r4, #152]	; 0x98
   215b8:	and	r0, r0, #2
   215bc:	cmp	r2, #0
   215c0:	orrne	r0, r0, #1
   215c4:	ldr	r2, [r4, #32]
   215c8:	ldrh	r2, [r2, #14]
   215cc:	cmp	r2, #1
   215d0:	beq	215e8 <flatcc_builder_end_buffer@@Base+0x40>
   215d4:	ldr	r3, [pc, #120]	; 21654 <flatcc_builder_end_buffer@@Base+0xac>
   215d8:	movw	r2, #838	; 0x346
   215dc:	ldr	r1, [pc, #116]	; 21658 <flatcc_builder_end_buffer@@Base+0xb0>
   215e0:	ldr	r0, [pc, #116]	; 2165c <flatcc_builder_end_buffer@@Base+0xb4>
   215e4:	bl	14620 <__assert_fail@plt>
   215e8:	ldrh	r2, [r4, #132]	; 0x84
   215ec:	mov	r3, r1
   215f0:	ldrh	r1, [r4, #128]	; 0x80
   215f4:	cmp	r1, r2
   215f8:	strhcc	r2, [r4, #128]	; 0x80
   215fc:	ldrh	r1, [r4, #128]	; 0x80
   21600:	str	r1, [sp]
   21604:	add	r1, r4, #168	; 0xa8
   21608:	str	r0, [sp, #4]
   2160c:	mov	r0, r4
   21610:	bl	21290 <flatcc_builder_create_buffer@@Base>
   21614:	subs	r5, r0, #0
   21618:	beq	21648 <flatcc_builder_end_buffer@@Base+0xa0>
   2161c:	ldr	r3, [r4, #32]
   21620:	mov	r0, r4
   21624:	ldr	r2, [r3, #20]
   21628:	str	r2, [r4, #144]	; 0x90
   2162c:	ldr	r2, [r3, #28]
   21630:	str	r2, [r4, #152]	; 0x98
   21634:	ldr	r2, [r3, #16]
   21638:	ldrh	r3, [r3, #32]
   2163c:	strh	r3, [r4, #164]	; 0xa4
   21640:	str	r2, [r4, #168]	; 0xa8
   21644:	bl	2068c <union_vector_tests@@Base+0x200>
   21648:	mov	r0, r5
   2164c:	add	sp, sp, #12
   21650:	pop	{r4, r5, pc}
   21654:	ldrdeq	r2, [r3], -r1
   21658:	ldrdeq	r2, [r3], -r8
   2165c:	andeq	r2, r3, sl, lsr #25

00021660 <flatcc_builder_start_struct@@Base>:
   21660:	push	{r4, r5, r6, lr}
   21664:	mov	r5, r1
   21668:	mov	r1, r2
   2166c:	mov	r4, r0
   21670:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   21674:	cmp	r0, #0
   21678:	bne	216a0 <flatcc_builder_start_struct@@Base+0x40>
   2167c:	ldr	r3, [r4, #32]
   21680:	mov	r2, #2
   21684:	mvn	r1, #3
   21688:	mov	r0, r4
   2168c:	strh	r2, [r3, #14]
   21690:	bl	205c8 <union_vector_tests@@Base+0x13c>
   21694:	mov	r1, r5
   21698:	pop	{r4, r5, r6, lr}
   2169c:	b	20644 <union_vector_tests@@Base+0x1b8>
   216a0:	mov	r0, #0
   216a4:	pop	{r4, r5, r6, pc}

000216a8 <flatcc_builder_struct_edit@@Base>:
   216a8:	ldr	r0, [r0, #16]
   216ac:	bx	lr

000216b0 <flatcc_builder_end_struct@@Base>:
   216b0:	ldr	r3, [r0, #32]
   216b4:	push	{r4, r5, r6, lr}
   216b8:	ldrh	r3, [r3, #14]
   216bc:	cmp	r3, #2
   216c0:	beq	216d8 <flatcc_builder_end_struct@@Base+0x28>
   216c4:	ldr	r3, [pc, #56]	; 21704 <flatcc_builder_end_struct@@Base+0x54>
   216c8:	mov	r2, #872	; 0x368
   216cc:	ldr	r1, [pc, #52]	; 21708 <flatcc_builder_end_struct@@Base+0x58>
   216d0:	ldr	r0, [pc, #52]	; 2170c <flatcc_builder_end_struct@@Base+0x5c>
   216d4:	bl	14620 <__assert_fail@plt>
   216d8:	ldrh	r3, [r0, #130]	; 0x82
   216dc:	mov	r4, r0
   216e0:	ldr	r1, [r0, #16]
   216e4:	ldr	r2, [r0, #20]
   216e8:	bl	21450 <flatcc_builder_create_struct@@Base>
   216ec:	subs	r5, r0, #0
   216f0:	beq	216fc <flatcc_builder_end_struct@@Base+0x4c>
   216f4:	mov	r0, r4
   216f8:	bl	2068c <union_vector_tests@@Base+0x200>
   216fc:	mov	r0, r5
   21700:	pop	{r4, r5, r6, pc}
   21704:	andeq	r2, r3, fp, ror #15
   21708:	ldrdeq	r2, [r3], -r8
   2170c:	ldrdeq	r2, [r3], -r6

00021710 <flatcc_builder_extend_vector@@Base>:
   21710:	push	{r4, r5, r6, lr}
   21714:	mov	r4, r0
   21718:	mov	r5, r1
   2171c:	ldr	r0, [r0, #32]
   21720:	ldr	r2, [r0, #24]
   21724:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   21728:	cmp	r0, #0
   2172c:	bne	21748 <flatcc_builder_extend_vector@@Base+0x38>
   21730:	ldr	r3, [r4, #32]
   21734:	mov	r0, r4
   21738:	ldr	r1, [r3, #16]
   2173c:	mul	r1, r1, r5
   21740:	pop	{r4, r5, r6, lr}
   21744:	b	20644 <union_vector_tests@@Base+0x1b8>
   21748:	mov	r0, #0
   2174c:	pop	{r4, r5, r6, pc}

00021750 <flatcc_builder_vector_push@@Base>:
   21750:	ldr	r3, [r0, #32]
   21754:	push	{r4, lr}
   21758:	ldrh	r2, [r3, #14]
   2175c:	cmp	r2, #4
   21760:	beq	21778 <flatcc_builder_vector_push@@Base+0x28>
   21764:	ldr	r3, [pc, #68]	; 217b0 <flatcc_builder_vector_push@@Base+0x60>
   21768:	movw	r2, #907	; 0x38b
   2176c:	ldr	r1, [pc, #64]	; 217b4 <flatcc_builder_vector_push@@Base+0x64>
   21770:	ldr	r0, [pc, #64]	; 217b8 <flatcc_builder_vector_push@@Base+0x68>
   21774:	bl	14620 <__assert_fail@plt>
   21778:	ldr	r2, [r3, #20]
   2177c:	ldr	ip, [r3, #24]
   21780:	cmp	r2, ip
   21784:	bls	2179c <flatcc_builder_vector_push@@Base+0x4c>
   21788:	ldr	r3, [pc, #32]	; 217b0 <flatcc_builder_vector_push@@Base+0x60>
   2178c:	mov	r2, #908	; 0x38c
   21790:	ldr	r1, [pc, #28]	; 217b4 <flatcc_builder_vector_push@@Base+0x64>
   21794:	ldr	r0, [pc, #32]	; 217bc <flatcc_builder_vector_push@@Base+0x6c>
   21798:	b	21774 <flatcc_builder_vector_push@@Base+0x24>
   2179c:	add	r2, r2, #1
   217a0:	pop	{r4, lr}
   217a4:	str	r2, [r3, #20]
   217a8:	ldr	r2, [r3, #16]
   217ac:	b	20714 <union_vector_tests@@Base+0x288>
   217b0:	andeq	r2, r3, r5, lsl #16
   217b4:	ldrdeq	r2, [r3], -r8
   217b8:	andeq	r2, r3, r2, lsl #26
   217bc:	andeq	r2, r3, lr, lsr #26

000217c0 <flatcc_builder_append_vector@@Base>:
   217c0:	push	{r4, r5, r6, lr}
   217c4:	mov	r4, r0
   217c8:	ldr	r0, [r0, #32]
   217cc:	ldrh	r3, [r0, #14]
   217d0:	cmp	r3, #4
   217d4:	beq	217ec <flatcc_builder_append_vector@@Base+0x2c>
   217d8:	ldr	r3, [pc, #76]	; 2182c <flatcc_builder_append_vector@@Base+0x6c>
   217dc:	movw	r2, #915	; 0x393
   217e0:	ldr	r1, [pc, #72]	; 21830 <flatcc_builder_append_vector@@Base+0x70>
   217e4:	ldr	r0, [pc, #72]	; 21834 <flatcc_builder_append_vector@@Base+0x74>
   217e8:	bl	14620 <__assert_fail@plt>
   217ec:	mov	r6, r1
   217f0:	mov	r5, r2
   217f4:	mov	r1, r2
   217f8:	ldr	r2, [r0, #24]
   217fc:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   21800:	cmp	r0, #0
   21804:	bne	21824 <flatcc_builder_append_vector@@Base+0x64>
   21808:	ldr	r3, [r4, #32]
   2180c:	mov	r1, r6
   21810:	mov	r0, r4
   21814:	ldr	r2, [r3, #16]
   21818:	mul	r2, r2, r5
   2181c:	pop	{r4, r5, r6, lr}
   21820:	b	20714 <union_vector_tests@@Base+0x288>
   21824:	mov	r0, #0
   21828:	pop	{r4, r5, r6, pc}
   2182c:	andeq	r2, r3, r0, lsr #16
   21830:	ldrdeq	r2, [r3], -r8
   21834:	andeq	r2, r3, r2, lsl #26

00021838 <flatcc_builder_extend_offset_vector@@Base>:
   21838:	push	{r4, r5, r6, lr}
   2183c:	mvn	r2, #-1073741824	; 0xc0000000
   21840:	mov	r4, r0
   21844:	mov	r5, r1
   21848:	ldr	r0, [r0, #32]
   2184c:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   21850:	cmp	r0, #0
   21854:	bne	21868 <flatcc_builder_extend_offset_vector@@Base+0x30>
   21858:	lsl	r1, r5, #2
   2185c:	mov	r0, r4
   21860:	pop	{r4, r5, r6, lr}
   21864:	b	20644 <union_vector_tests@@Base+0x1b8>
   21868:	mov	r0, #0
   2186c:	pop	{r4, r5, r6, pc}

00021870 <flatcc_builder_offset_vector_push@@Base>:
   21870:	ldr	r2, [r0, #32]
   21874:	push	{r4, lr}
   21878:	ldrh	r3, [r2, #14]
   2187c:	cmp	r3, #5
   21880:	beq	21898 <flatcc_builder_offset_vector_push@@Base+0x28>
   21884:	ldr	r3, [pc, #64]	; 218cc <flatcc_builder_offset_vector_push@@Base+0x5c>
   21888:	movw	r2, #934	; 0x3a6
   2188c:	ldr	r1, [pc, #60]	; 218d0 <flatcc_builder_offset_vector_push@@Base+0x60>
   21890:	ldr	r0, [pc, #60]	; 218d4 <flatcc_builder_offset_vector_push@@Base+0x64>
   21894:	bl	14620 <__assert_fail@plt>
   21898:	ldr	r3, [r2, #20]
   2189c:	cmn	r3, #-1073741823	; 0xc0000001
   218a0:	beq	218c4 <flatcc_builder_offset_vector_push@@Base+0x54>
   218a4:	add	r3, r3, #1
   218a8:	mov	r4, r1
   218ac:	mov	r1, #4
   218b0:	str	r3, [r2, #20]
   218b4:	bl	20644 <union_vector_tests@@Base+0x1b8>
   218b8:	cmp	r0, #0
   218bc:	strne	r4, [r0]
   218c0:	pop	{r4, pc}
   218c4:	mov	r0, #0
   218c8:	pop	{r4, pc}
   218cc:	andeq	r2, r3, sp, lsr r8
   218d0:	ldrdeq	r2, [r3], -r8
   218d4:	andeq	r2, r3, fp, ror #26

000218d8 <flatcc_builder_append_offset_vector@@Base>:
   218d8:	push	{r4, r5, r6, lr}
   218dc:	mov	r4, r0
   218e0:	ldr	r0, [r0, #32]
   218e4:	ldrh	r3, [r0, #14]
   218e8:	cmp	r3, #5
   218ec:	beq	21904 <flatcc_builder_append_offset_vector@@Base+0x2c>
   218f0:	ldr	r3, [pc, #68]	; 2193c <flatcc_builder_append_offset_vector@@Base+0x64>
   218f4:	mov	r2, #948	; 0x3b4
   218f8:	ldr	r1, [pc, #64]	; 21940 <flatcc_builder_append_offset_vector@@Base+0x68>
   218fc:	ldr	r0, [pc, #64]	; 21944 <flatcc_builder_append_offset_vector@@Base+0x6c>
   21900:	bl	14620 <__assert_fail@plt>
   21904:	mov	r5, r2
   21908:	mov	r6, r1
   2190c:	mvn	r2, #-1073741824	; 0xc0000000
   21910:	mov	r1, r5
   21914:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   21918:	cmp	r0, #0
   2191c:	bne	21934 <flatcc_builder_append_offset_vector@@Base+0x5c>
   21920:	lsl	r2, r5, #2
   21924:	mov	r1, r6
   21928:	mov	r0, r4
   2192c:	pop	{r4, r5, r6, lr}
   21930:	b	20714 <union_vector_tests@@Base+0x288>
   21934:	mov	r0, #0
   21938:	pop	{r4, r5, r6, pc}
   2193c:	andeq	r2, r3, pc, asr r8
   21940:	ldrdeq	r2, [r3], -r8
   21944:	andeq	r2, r3, fp, ror #26

00021948 <flatcc_builder_extend_string@@Base>:
   21948:	push	{r4, r5, r6, lr}
   2194c:	mov	r4, r0
   21950:	ldr	r0, [r0, #32]
   21954:	ldrh	r3, [r0, #14]
   21958:	cmp	r3, #6
   2195c:	beq	21974 <flatcc_builder_extend_string@@Base+0x2c>
   21960:	ldr	r3, [pc, #56]	; 219a0 <flatcc_builder_extend_string@@Base+0x58>
   21964:	movw	r2, #957	; 0x3bd
   21968:	ldr	r1, [pc, #52]	; 219a4 <flatcc_builder_extend_string@@Base+0x5c>
   2196c:	ldr	r0, [pc, #52]	; 219a8 <flatcc_builder_extend_string@@Base+0x60>
   21970:	bl	14620 <__assert_fail@plt>
   21974:	mvn	r2, #0
   21978:	mov	r5, r1
   2197c:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   21980:	cmp	r0, #0
   21984:	bne	21998 <flatcc_builder_extend_string@@Base+0x50>
   21988:	mov	r1, r5
   2198c:	mov	r0, r4
   21990:	pop	{r4, r5, r6, lr}
   21994:	b	20644 <union_vector_tests@@Base+0x1b8>
   21998:	mov	r0, #0
   2199c:	pop	{r4, r5, r6, pc}
   219a0:	andeq	r2, r3, r3, lsl #17
   219a4:	ldrdeq	r2, [r3], -r8
   219a8:	muleq	r3, lr, sp

000219ac <flatcc_builder_append_string@@Base>:
   219ac:	push	{r4, r5, r6, lr}
   219b0:	mov	r4, r0
   219b4:	ldr	r0, [r0, #32]
   219b8:	ldrh	r3, [r0, #14]
   219bc:	cmp	r3, #6
   219c0:	beq	219d8 <flatcc_builder_append_string@@Base+0x2c>
   219c4:	ldr	r3, [pc, #68]	; 21a10 <flatcc_builder_append_string@@Base+0x64>
   219c8:	movw	r2, #966	; 0x3c6
   219cc:	ldr	r1, [pc, #64]	; 21a14 <flatcc_builder_append_string@@Base+0x68>
   219d0:	ldr	r0, [pc, #64]	; 21a18 <flatcc_builder_append_string@@Base+0x6c>
   219d4:	bl	14620 <__assert_fail@plt>
   219d8:	mov	r5, r2
   219dc:	mov	r6, r1
   219e0:	mvn	r2, #0
   219e4:	mov	r1, r5
   219e8:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   219ec:	cmp	r0, #0
   219f0:	bne	21a08 <flatcc_builder_append_string@@Base+0x5c>
   219f4:	mov	r2, r5
   219f8:	mov	r1, r6
   219fc:	mov	r0, r4
   21a00:	pop	{r4, r5, r6, lr}
   21a04:	b	20714 <union_vector_tests@@Base+0x288>
   21a08:	mov	r0, #0
   21a0c:	pop	{r4, r5, r6, pc}
   21a10:	andeq	r2, r3, r0, lsr #17
   21a14:	ldrdeq	r2, [r3], -r8
   21a18:	muleq	r3, lr, sp

00021a1c <flatcc_builder_append_string_str@@Base>:
   21a1c:	push	{r4, r5, r6, lr}
   21a20:	mov	r5, r0
   21a24:	mov	r0, r1
   21a28:	mov	r4, r1
   21a2c:	bl	1459c <strlen@plt>
   21a30:	mov	r2, r0
   21a34:	mov	r1, r4
   21a38:	mov	r0, r5
   21a3c:	pop	{r4, r5, r6, lr}
   21a40:	b	219ac <flatcc_builder_append_string@@Base>

00021a44 <flatcc_builder_append_string_strn@@Base>:
   21a44:	push	{r4, r5, r6, lr}
   21a48:	mov	r4, r1
   21a4c:	mov	r6, r0
   21a50:	mov	r1, #0
   21a54:	mov	r0, r4
   21a58:	mov	r5, r2
   21a5c:	bl	145e4 <memchr@plt>
   21a60:	cmp	r0, #0
   21a64:	mov	r1, r4
   21a68:	subne	r5, r0, r4
   21a6c:	mov	r0, r6
   21a70:	mov	r2, r5
   21a74:	pop	{r4, r5, r6, lr}
   21a78:	b	219ac <flatcc_builder_append_string@@Base>

00021a7c <flatcc_builder_truncate_vector@@Base>:
   21a7c:	ldr	r3, [r0, #32]
   21a80:	push	{r4, lr}
   21a84:	ldrh	r2, [r3, #14]
   21a88:	cmp	r2, #4
   21a8c:	beq	21aa4 <flatcc_builder_truncate_vector@@Base+0x28>
   21a90:	ldr	r3, [pc, #72]	; 21ae0 <flatcc_builder_truncate_vector@@Base+0x64>
   21a94:	movw	r2, #985	; 0x3d9
   21a98:	ldr	r1, [pc, #68]	; 21ae4 <flatcc_builder_truncate_vector@@Base+0x68>
   21a9c:	ldr	r0, [pc, #68]	; 21ae8 <flatcc_builder_truncate_vector@@Base+0x6c>
   21aa0:	bl	14620 <__assert_fail@plt>
   21aa4:	ldr	r2, [r3, #20]
   21aa8:	cmp	r2, r1
   21aac:	bcs	21ac4 <flatcc_builder_truncate_vector@@Base+0x48>
   21ab0:	ldr	r3, [pc, #40]	; 21ae0 <flatcc_builder_truncate_vector@@Base+0x64>
   21ab4:	movw	r2, #986	; 0x3da
   21ab8:	ldr	r1, [pc, #36]	; 21ae4 <flatcc_builder_truncate_vector@@Base+0x68>
   21abc:	ldr	r0, [pc, #40]	; 21aec <flatcc_builder_truncate_vector@@Base+0x70>
   21ac0:	b	21aa0 <flatcc_builder_truncate_vector@@Base+0x24>
   21ac4:	sub	r2, r2, r1
   21ac8:	str	r2, [r3, #20]
   21acc:	ldr	r3, [r3, #16]
   21ad0:	mul	r1, r3, r1
   21ad4:	bl	206f4 <union_vector_tests@@Base+0x268>
   21ad8:	mov	r0, #0
   21adc:	pop	{r4, pc}
   21ae0:			; <UNDEFINED> instruction: 0x000328bd
   21ae4:	ldrdeq	r2, [r3], -r8
   21ae8:	andeq	r2, r3, r2, lsl #26
   21aec:	andeq	r2, r3, sl, asr #27

00021af0 <flatcc_builder_truncate_offset_vector@@Base>:
   21af0:	ldr	r3, [r0, #32]
   21af4:	push	{r4, lr}
   21af8:	ldrh	r2, [r3, #14]
   21afc:	cmp	r2, #5
   21b00:	beq	21b18 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   21b04:	ldr	r3, [pc, #72]	; 21b54 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   21b08:	movw	r2, #994	; 0x3e2
   21b0c:	ldr	r1, [pc, #68]	; 21b58 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   21b10:	ldr	r0, [pc, #68]	; 21b5c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   21b14:	bl	14620 <__assert_fail@plt>
   21b18:	ldr	r2, [r3, #20]
   21b1c:	cmp	r2, r1
   21b20:	bcs	21b38 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   21b24:	ldr	r3, [pc, #40]	; 21b54 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   21b28:	movw	r2, #995	; 0x3e3
   21b2c:	ldr	r1, [pc, #36]	; 21b58 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   21b30:	ldr	r0, [pc, #40]	; 21b60 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   21b34:	b	21b14 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   21b38:	sub	r2, r2, r1
   21b3c:	str	r2, [r3, #20]
   21b40:	ldr	r3, [r3, #16]
   21b44:	mul	r1, r3, r1
   21b48:	bl	206f4 <union_vector_tests@@Base+0x268>
   21b4c:	mov	r0, #0
   21b50:	pop	{r4, pc}
   21b54:	ldrdeq	r2, [r3], -ip
   21b58:	ldrdeq	r2, [r3], -r8
   21b5c:	andeq	r2, r3, fp, ror #26
   21b60:	andeq	r2, r3, lr, ror #27

00021b64 <flatcc_builder_truncate_string@@Base>:
   21b64:	ldr	r2, [r0, #32]
   21b68:	push	{r4, lr}
   21b6c:	ldrh	r3, [r2, #14]
   21b70:	cmp	r3, #6
   21b74:	beq	21b8c <flatcc_builder_truncate_string@@Base+0x28>
   21b78:	ldr	r3, [pc, #64]	; 21bc0 <flatcc_builder_truncate_string@@Base+0x5c>
   21b7c:	movw	r2, #1003	; 0x3eb
   21b80:	ldr	r1, [pc, #60]	; 21bc4 <flatcc_builder_truncate_string@@Base+0x60>
   21b84:	ldr	r0, [pc, #60]	; 21bc8 <flatcc_builder_truncate_string@@Base+0x64>
   21b88:	bl	14620 <__assert_fail@plt>
   21b8c:	ldr	r3, [r2, #20]
   21b90:	cmp	r3, r1
   21b94:	bcs	21bac <flatcc_builder_truncate_string@@Base+0x48>
   21b98:	ldr	r3, [pc, #32]	; 21bc0 <flatcc_builder_truncate_string@@Base+0x5c>
   21b9c:	mov	r2, #1004	; 0x3ec
   21ba0:	ldr	r1, [pc, #28]	; 21bc4 <flatcc_builder_truncate_string@@Base+0x60>
   21ba4:	ldr	r0, [pc, #32]	; 21bcc <flatcc_builder_truncate_string@@Base+0x68>
   21ba8:	b	21b88 <flatcc_builder_truncate_string@@Base+0x24>
   21bac:	sub	r3, r3, r1
   21bb0:	str	r3, [r2, #20]
   21bb4:	bl	206f4 <union_vector_tests@@Base+0x268>
   21bb8:	mov	r0, #0
   21bbc:	pop	{r4, pc}
   21bc0:	andeq	r2, r3, r2, lsl #18
   21bc4:	ldrdeq	r2, [r3], -r8
   21bc8:	muleq	r3, lr, sp
   21bcc:	andeq	r2, r3, r9, lsr #28

00021bd0 <flatcc_builder_start_vector@@Base>:
   21bd0:	cmp	r2, #4
   21bd4:	push	{r4, r5, r6, r7, r8, lr}
   21bd8:	mov	r7, r1
   21bdc:	movcs	r1, r2
   21be0:	movcc	r1, #4
   21be4:	mov	r5, r0
   21be8:	mov	r6, r3
   21bec:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   21bf0:	subs	r4, r0, #0
   21bf4:	mvnne	r4, #0
   21bf8:	bne	21c20 <flatcc_builder_start_vector@@Base+0x50>
   21bfc:	ldr	r2, [r5, #32]
   21c00:	mov	r3, #4
   21c04:	mvn	r1, #3
   21c08:	mov	r0, r5
   21c0c:	strh	r3, [r2, #14]
   21c10:	str	r7, [r2, #16]
   21c14:	str	r4, [r2, #20]
   21c18:	str	r6, [r2, #24]
   21c1c:	bl	205c8 <union_vector_tests@@Base+0x13c>
   21c20:	mov	r0, r4
   21c24:	pop	{r4, r5, r6, r7, r8, pc}

00021c28 <flatcc_builder_start_offset_vector@@Base>:
   21c28:	push	{r4, r5, r6, lr}
   21c2c:	mov	r1, #4
   21c30:	mov	r5, r0
   21c34:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   21c38:	subs	r4, r0, #0
   21c3c:	mvnne	r4, #0
   21c40:	bne	21c68 <flatcc_builder_start_offset_vector@@Base+0x40>
   21c44:	ldr	r3, [r5, #32]
   21c48:	mov	r2, #4
   21c4c:	mvn	r1, #3
   21c50:	mov	r0, r5
   21c54:	str	r2, [r3, #16]
   21c58:	mov	r2, #5
   21c5c:	strh	r2, [r3, #14]
   21c60:	str	r4, [r3, #20]
   21c64:	bl	205c8 <union_vector_tests@@Base+0x13c>
   21c68:	mov	r0, r4
   21c6c:	pop	{r4, r5, r6, pc}

00021c70 <flatcc_builder_start_string@@Base>:
   21c70:	push	{r4, r5, r6, lr}
   21c74:	mov	r1, #1
   21c78:	mov	r5, r0
   21c7c:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   21c80:	subs	r4, r0, #0
   21c84:	mvnne	r4, #0
   21c88:	bne	21cb0 <flatcc_builder_start_string@@Base+0x40>
   21c8c:	ldr	r3, [r5, #32]
   21c90:	mov	r2, #1
   21c94:	mvn	r1, #3
   21c98:	mov	r0, r5
   21c9c:	str	r2, [r3, #16]
   21ca0:	mov	r2, #6
   21ca4:	strh	r2, [r3, #14]
   21ca8:	str	r4, [r3, #20]
   21cac:	bl	205c8 <union_vector_tests@@Base+0x13c>
   21cb0:	mov	r0, r4
   21cb4:	pop	{r4, r5, r6, pc}

00021cb8 <flatcc_builder_reserve_table@@Base>:
   21cb8:	cmp	r1, #0
   21cbc:	bge	21cd8 <flatcc_builder_reserve_table@@Base+0x20>
   21cc0:	push	{r4, lr}
   21cc4:	movw	r2, #1065	; 0x429
   21cc8:	ldr	r3, [pc, #12]	; 21cdc <flatcc_builder_reserve_table@@Base+0x24>
   21ccc:	ldr	r1, [pc, #12]	; 21ce0 <flatcc_builder_reserve_table@@Base+0x28>
   21cd0:	ldr	r0, [pc, #12]	; 21ce4 <flatcc_builder_reserve_table@@Base+0x2c>
   21cd4:	bl	14620 <__assert_fail@plt>
   21cd8:	b	209d0 <flatcc_builder_default_alloc@@Base+0x240>
   21cdc:	andeq	r2, r3, r1, lsr #18
   21ce0:	ldrdeq	r2, [r3], -r8
   21ce4:	andeq	r2, r3, r1, ror #28

00021ce8 <flatcc_builder_start_table@@Base>:
   21ce8:	push	{r4, r5, r6, lr}
   21cec:	mov	r5, r1
   21cf0:	mov	r1, #4
   21cf4:	mov	r4, r0
   21cf8:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   21cfc:	cmp	r0, #0
   21d00:	beq	21d10 <flatcc_builder_start_table@@Base+0x28>
   21d04:	mvn	r5, #0
   21d08:	mov	r0, r5
   21d0c:	pop	{r4, r5, r6, pc}
   21d10:	ldr	r2, [r4, #4]
   21d14:	ldr	r3, [r4, #32]
   21d18:	ldr	r1, [r4, #52]	; 0x34
   21d1c:	sub	r2, r2, r1
   21d20:	ldr	r1, [r4, #76]	; 0x4c
   21d24:	str	r2, [r3, #16]
   21d28:	ldr	r2, [r4]
   21d2c:	sub	r2, r2, r1
   21d30:	mov	r1, r5
   21d34:	str	r2, [r3, #20]
   21d38:	ldr	r2, [r4, #12]
   21d3c:	str	r2, [r3, #24]
   21d40:	ldrh	r2, [r4, #8]
   21d44:	strh	r2, [r3, #28]
   21d48:	ldr	r2, [pc, #44]	; 21d7c <flatcc_builder_start_table@@Base+0x94>
   21d4c:	strh	r0, [r4, #8]
   21d50:	mov	r0, r4
   21d54:	str	r2, [r4, #12]
   21d58:	mov	r2, #3
   21d5c:	strh	r2, [r3, #14]
   21d60:	bl	209d0 <flatcc_builder_default_alloc@@Base+0x240>
   21d64:	subs	r5, r0, #0
   21d68:	bne	21d04 <flatcc_builder_start_table@@Base+0x1c>
   21d6c:	movw	r1, #65532	; 0xfffc
   21d70:	mov	r0, r4
   21d74:	bl	205c8 <union_vector_tests@@Base+0x13c>
   21d78:	b	21d08 <flatcc_builder_start_table@@Base+0x20>
   21d7c:	svccs	0x00693b52

00021d80 <flatcc_builder_create_vtable@@Base>:
   21d80:	mov	r3, #0
   21d84:	push	{lr}		; (str lr, [sp, #-4]!)
   21d88:	sub	sp, sp, #76	; 0x4c
   21d8c:	cmp	r2, #0
   21d90:	str	r3, [sp]
   21d94:	str	r3, [sp, #4]
   21d98:	movne	r3, #1
   21d9c:	strne	r1, [sp, #8]
   21da0:	mov	r1, sp
   21da4:	strdne	r2, [sp]
   21da8:	ldr	r3, [r0, #152]	; 0x98
   21dac:	strne	r2, [sp, #12]
   21db0:	cmp	r3, #0
   21db4:	bne	21dd0 <flatcc_builder_create_vtable@@Base+0x50>
   21db8:	ldr	r3, [r0, #180]	; 0xb4
   21dbc:	cmp	r3, #0
   21dc0:	bne	21dd0 <flatcc_builder_create_vtable@@Base+0x50>
   21dc4:	bl	20a54 <flatcc_builder_default_alloc@@Base+0x2c4>
   21dc8:	add	sp, sp, #76	; 0x4c
   21dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   21dd0:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   21dd4:	cmp	r0, #0
   21dd8:	addne	r0, r0, #1
   21ddc:	b	21dc8 <flatcc_builder_create_vtable@@Base+0x48>

00021de0 <flatcc_builder_create_cached_vtable@@Base>:
   21de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21de4:	mov	r6, r3
   21de8:	sub	sp, sp, #20
   21dec:	mov	r4, r0
   21df0:	mov	sl, r1
   21df4:	mov	r7, r2
   21df8:	ldr	r3, [r0, #116]	; 0x74
   21dfc:	cmp	r3, #0
   21e00:	bne	21ea8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   21e04:	ldr	r5, [r0, #124]	; 0x7c
   21e08:	add	r9, r0, #92	; 0x5c
   21e0c:	cmp	r5, #0
   21e10:	beq	21e28 <flatcc_builder_create_cached_vtable@@Base+0x48>
   21e14:	ldr	r3, [pc, #560]	; 2204c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   21e18:	movw	r2, #342	; 0x156
   21e1c:	ldr	r1, [pc, #556]	; 22050 <flatcc_builder_create_cached_vtable@@Base+0x270>
   21e20:	ldr	r0, [pc, #556]	; 22054 <flatcc_builder_create_cached_vtable@@Base+0x274>
   21e24:	bl	14620 <__assert_fail@plt>
   21e28:	mov	r3, #16
   21e2c:	mov	r2, r5
   21e30:	str	r5, [sp]
   21e34:	mov	r1, #6
   21e38:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   21e3c:	cmp	r0, #0
   21e40:	bne	21e50 <flatcc_builder_create_cached_vtable@@Base+0x70>
   21e44:	mov	r0, #0
   21e48:	add	sp, sp, #20
   21e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e50:	mov	r3, #16
   21e54:	mov	r1, r9
   21e58:	ldr	r0, [r4, #40]	; 0x28
   21e5c:	mov	r2, #256	; 0x100
   21e60:	str	r3, [r4, #124]	; 0x7c
   21e64:	mov	r3, #5
   21e68:	ldr	r8, [r4, #48]	; 0x30
   21e6c:	str	r3, [sp]
   21e70:	mov	r3, #1
   21e74:	blx	r8
   21e78:	cmp	r0, #0
   21e7c:	moveq	r3, #256	; 0x100
   21e80:	ldreq	r1, [r4, #96]	; 0x60
   21e84:	bne	21e44 <flatcc_builder_create_cached_vtable@@Base+0x64>
   21e88:	lsl	r2, r3, #1
   21e8c:	cmp	r2, r1
   21e90:	bls	21f68 <flatcc_builder_create_cached_vtable@@Base+0x188>
   21e94:	lsr	r3, r3, #2
   21e98:	mov	r2, #1
   21e9c:	cmp	r3, r2, lsl r5
   21ea0:	bhi	21f70 <flatcc_builder_create_cached_vtable@@Base+0x190>
   21ea4:	str	r5, [r4, #116]	; 0x74
   21ea8:	ldr	r8, [r4, #92]	; 0x5c
   21eac:	ldr	r3, [r4, #116]	; 0x74
   21eb0:	rsb	r3, r3, #32
   21eb4:	lsr	r6, r6, r3
   21eb8:	adds	r3, r8, r6, lsl #2
   21ebc:	ldrne	r9, [r8, r6, lsl #2]
   21ec0:	movne	fp, #0
   21ec4:	str	r3, [sp, #8]
   21ec8:	beq	21e44 <flatcc_builder_create_cached_vtable@@Base+0x64>
   21ecc:	cmp	r9, #0
   21ed0:	bne	21f78 <flatcc_builder_create_cached_vtable@@Base+0x198>
   21ed4:	mov	r3, #16
   21ed8:	mov	r1, #6
   21edc:	ldr	r2, [r4, #124]	; 0x7c
   21ee0:	mov	r0, r4
   21ee4:	str	r9, [sp]
   21ee8:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   21eec:	subs	r5, r0, #0
   21ef0:	beq	21e44 <flatcc_builder_create_cached_vtable@@Base+0x64>
   21ef4:	ldr	r3, [r4, #124]	; 0x7c
   21ef8:	mov	r1, sl
   21efc:	mov	r0, r4
   21f00:	add	r2, r3, #16
   21f04:	str	r2, [r4, #124]	; 0x7c
   21f08:	ldr	r2, [r4, #152]	; 0x98
   21f0c:	str	r2, [r5, #4]
   21f10:	ldr	r2, [r8, r6, lsl #2]
   21f14:	str	r2, [r5, #12]
   21f18:	mov	r2, r7
   21f1c:	str	r3, [r8, r6, lsl #2]
   21f20:	bl	21d80 <flatcc_builder_create_vtable@@Base>
   21f24:	cmp	r0, #0
   21f28:	str	r0, [r5]
   21f2c:	beq	21e44 <flatcc_builder_create_cached_vtable@@Base+0x64>
   21f30:	cmp	fp, #0
   21f34:	ldrne	r3, [fp, #8]
   21f38:	strne	r3, [r5, #8]
   21f3c:	bne	22000 <flatcc_builder_create_cached_vtable@@Base+0x220>
   21f40:	ldr	r2, [r4, #120]	; 0x78
   21f44:	ldr	r3, [r4, #172]	; 0xac
   21f48:	cmp	r3, #0
   21f4c:	beq	22008 <flatcc_builder_create_cached_vtable@@Base+0x228>
   21f50:	add	r1, r7, r2
   21f54:	cmp	r3, r1
   21f58:	bcs	22008 <flatcc_builder_create_cached_vtable@@Base+0x228>
   21f5c:	mov	r0, r4
   21f60:	bl	20d94 <flatcc_builder_flush_vtable_cache@@Base>
   21f64:	b	22000 <flatcc_builder_create_cached_vtable@@Base+0x220>
   21f68:	mov	r3, r2
   21f6c:	b	21e88 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   21f70:	add	r5, r5, #1
   21f74:	b	21e9c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   21f78:	ldr	r0, [r4, #68]	; 0x44
   21f7c:	str	r3, [sp, #12]
   21f80:	ldr	r5, [r4, #100]	; 0x64
   21f84:	add	r5, r5, r9
   21f88:	ldr	r2, [r5, #8]
   21f8c:	add	r1, r0, r2
   21f90:	ldrh	r2, [r0, r2]
   21f94:	cmp	r2, r7
   21f98:	bne	21fb4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   21f9c:	mov	r2, r7
   21fa0:	mov	r0, sl
   21fa4:	bl	14554 <memcmp@plt>
   21fa8:	cmp	r0, #0
   21fac:	ldr	r3, [sp, #12]
   21fb0:	beq	21fc0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   21fb4:	add	r3, r5, #12
   21fb8:	ldr	r9, [r5, #12]
   21fbc:	b	21ecc <flatcc_builder_create_cached_vtable@@Base+0xec>
   21fc0:	ldr	r1, [r5, #4]
   21fc4:	ldr	r2, [r4, #152]	; 0x98
   21fc8:	cmp	r1, r2
   21fcc:	beq	21fe0 <flatcc_builder_create_cached_vtable@@Base+0x200>
   21fd0:	add	r3, r5, #12
   21fd4:	mov	fp, r5
   21fd8:	ldr	r9, [r5, #12]
   21fdc:	b	21ecc <flatcc_builder_create_cached_vtable@@Base+0xec>
   21fe0:	ldr	r2, [sp, #8]
   21fe4:	cmp	r3, r2
   21fe8:	beq	22000 <flatcc_builder_create_cached_vtable@@Base+0x220>
   21fec:	ldr	r2, [r5, #12]
   21ff0:	str	r2, [r3]
   21ff4:	ldr	r3, [r8, r6, lsl #2]
   21ff8:	str	r3, [r5, #12]
   21ffc:	str	r9, [r8, r6, lsl #2]
   22000:	ldr	r0, [r5]
   22004:	b	21e48 <flatcc_builder_create_cached_vtable@@Base+0x68>
   22008:	mov	r3, #0
   2200c:	mov	r1, #2
   22010:	mov	r0, r4
   22014:	str	r3, [sp]
   22018:	mov	r3, r7
   2201c:	bl	20888 <flatcc_builder_default_alloc@@Base+0xf8>
   22020:	cmp	r0, #0
   22024:	mvneq	r0, #0
   22028:	beq	21e48 <flatcc_builder_create_cached_vtable@@Base+0x68>
   2202c:	ldr	r3, [r4, #120]	; 0x78
   22030:	mov	r2, r7
   22034:	mov	r1, sl
   22038:	str	r3, [r5, #8]
   2203c:	add	r3, r3, r7
   22040:	str	r3, [r4, #120]	; 0x78
   22044:	bl	14548 <memcpy@plt>
   22048:	b	22000 <flatcc_builder_create_cached_vtable@@Base+0x220>
   2204c:	andeq	r2, r3, lr, lsr r9
   22050:	ldrdeq	r2, [r3], -r8
   22054:	andeq	r2, r3, fp, asr #28

00022058 <flatcc_builder_create_table@@Base>:
   22058:	push	{r4, r5, r6, r7, lr}
   2205c:	sub	sp, sp, #84	; 0x54
   22060:	ldr	r4, [sp, #108]	; 0x6c
   22064:	ldr	ip, [sp, #112]	; 0x70
   22068:	cmp	r4, #0
   2206c:	bge	22084 <flatcc_builder_create_table@@Base+0x2c>
   22070:	ldr	r3, [pc, #276]	; 2218c <flatcc_builder_create_table@@Base+0x134>
   22074:	movw	r2, #1237	; 0x4d5
   22078:	ldr	r1, [pc, #272]	; 22190 <flatcc_builder_create_table@@Base+0x138>
   2207c:	ldr	r0, [pc, #272]	; 22194 <flatcc_builder_create_table@@Base+0x13c>
   22080:	bl	14620 <__assert_fail@plt>
   22084:	tst	ip, #1
   22088:	bne	220a0 <flatcc_builder_create_table@@Base+0x48>
   2208c:	ldr	r3, [pc, #248]	; 2218c <flatcc_builder_create_table@@Base+0x134>
   22090:	movw	r2, #1243	; 0x4db
   22094:	ldr	r1, [pc, #244]	; 22190 <flatcc_builder_create_table@@Base+0x138>
   22098:	ldr	r0, [pc, #248]	; 22198 <flatcc_builder_create_table@@Base+0x140>
   2209c:	b	22080 <flatcc_builder_create_table@@Base+0x28>
   220a0:	cmp	r3, #4
   220a4:	sub	ip, ip, #1
   220a8:	movcs	lr, r3
   220ac:	ldrh	r3, [r0, #128]	; 0x80
   220b0:	movcc	lr, #4
   220b4:	cmp	r3, lr
   220b8:	ldr	r3, [r0, #136]	; 0x88
   220bc:	strhcc	lr, [r0, #128]	; 0x80
   220c0:	sub	lr, lr, #1
   220c4:	sub	r5, r3, r2
   220c8:	sub	r3, r5, #4
   220cc:	and	lr, lr, r5
   220d0:	sub	ip, r3, ip
   220d4:	sub	r3, lr, r3
   220d8:	sub	ip, ip, lr
   220dc:	sub	r3, r3, #4
   220e0:	str	ip, [sp, #4]
   220e4:	ldr	ip, [sp, #104]	; 0x68
   220e8:	add	r4, ip, r4, lsl #1
   220ec:	cmp	r4, ip
   220f0:	bne	22174 <flatcc_builder_create_table@@Base+0x11c>
   220f4:	mov	r3, #4
   220f8:	cmp	r2, #0
   220fc:	add	ip, sp, r3
   22100:	str	r3, [sp, #8]
   22104:	str	ip, [sp, #16]
   22108:	str	r3, [sp, #20]
   2210c:	mov	r3, #1
   22110:	str	r3, [sp, #12]
   22114:	beq	22130 <flatcc_builder_create_table@@Base+0xd8>
   22118:	add	r3, r2, #4
   2211c:	str	r3, [sp, #8]
   22120:	mov	r3, #2
   22124:	str	r1, [sp, #24]
   22128:	str	r3, [sp, #12]
   2212c:	str	r2, [sp, #28]
   22130:	cmp	lr, #0
   22134:	beq	22164 <flatcc_builder_create_table@@Base+0x10c>
   22138:	ldr	r3, [sp, #8]
   2213c:	add	r2, sp, #80	; 0x50
   22140:	ldr	r1, [pc, #84]	; 2219c <flatcc_builder_create_table@@Base+0x144>
   22144:	add	r3, r3, lr
   22148:	str	r3, [sp, #8]
   2214c:	ldr	r3, [sp, #12]
   22150:	add	r3, r3, #1
   22154:	add	r2, r2, r3, lsl #3
   22158:	str	r3, [sp, #12]
   2215c:	str	r1, [r2, #-72]	; 0xffffffb8
   22160:	str	lr, [r2, #-68]	; 0xffffffbc
   22164:	add	r1, sp, #8
   22168:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   2216c:	add	sp, sp, #84	; 0x54
   22170:	pop	{r4, r5, r6, r7, pc}
   22174:	ldrh	r5, [ip], #2
   22178:	ldr	r6, [r1, r5]
   2217c:	sub	r7, r3, r5
   22180:	add	r6, r6, r7
   22184:	str	r6, [r1, r5]
   22188:	b	220ec <flatcc_builder_create_table@@Base+0x94>
   2218c:	andeq	r2, r3, r7, asr #18
   22190:	ldrdeq	r2, [r3], -r8
   22194:	andeq	r2, r3, sl, asr lr
   22198:	andeq	r2, r3, ip, ror #28
   2219c:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

000221a0 <flatcc_builder_check_required_field@@Base>:
   221a0:	ldr	r3, [r0, #32]
   221a4:	ldrh	r3, [r3, #14]
   221a8:	cmp	r3, #3
   221ac:	beq	221c8 <flatcc_builder_check_required_field@@Base+0x28>
   221b0:	push	{r4, lr}
   221b4:	movw	r2, #1272	; 0x4f8
   221b8:	ldr	r3, [pc, #52]	; 221f4 <flatcc_builder_check_required_field@@Base+0x54>
   221bc:	ldr	r1, [pc, #52]	; 221f8 <flatcc_builder_check_required_field@@Base+0x58>
   221c0:	ldr	r0, [pc, #52]	; 221fc <flatcc_builder_check_required_field@@Base+0x5c>
   221c4:	bl	14620 <__assert_fail@plt>
   221c8:	ldrh	r3, [r0, #8]
   221cc:	cmp	r3, r1
   221d0:	bls	221ec <flatcc_builder_check_required_field@@Base+0x4c>
   221d4:	ldr	r3, [r0, #4]
   221d8:	lsl	r1, r1, #1
   221dc:	ldrh	r0, [r3, r1]
   221e0:	adds	r0, r0, #0
   221e4:	movne	r0, #1
   221e8:	bx	lr
   221ec:	mov	r0, #0
   221f0:	bx	lr
   221f4:	andeq	r2, r3, r3, ror #18
   221f8:	ldrdeq	r2, [r3], -r8
   221fc:	andeq	r2, r3, r7, ror lr

00022200 <flatcc_builder_check_union_field@@Base>:
   22200:	ldr	r3, [r0, #32]
   22204:	ldrh	r3, [r3, #14]
   22208:	cmp	r3, #3
   2220c:	beq	22228 <flatcc_builder_check_union_field@@Base+0x28>
   22210:	push	{r4, lr}
   22214:	movw	r2, #1279	; 0x4ff
   22218:	ldr	r3, [pc, #104]	; 22288 <flatcc_builder_check_union_field@@Base+0x88>
   2221c:	ldr	r1, [pc, #104]	; 2228c <flatcc_builder_check_union_field@@Base+0x8c>
   22220:	ldr	r0, [pc, #104]	; 22290 <flatcc_builder_check_union_field@@Base+0x90>
   22224:	bl	14620 <__assert_fail@plt>
   22228:	cmp	r1, #0
   2222c:	beq	22280 <flatcc_builder_check_union_field@@Base+0x80>
   22230:	ldrh	r3, [r0, #8]
   22234:	cmp	r3, r1
   22238:	bls	22280 <flatcc_builder_check_union_field@@Base+0x80>
   2223c:	ldr	r3, [r0, #4]
   22240:	sub	r1, r1, #-2147483647	; 0x80000001
   22244:	lsl	r1, r1, #1
   22248:	ldrh	r2, [r3, r1]!
   2224c:	cmp	r2, #0
   22250:	ldrh	r1, [r3, #2]
   22254:	bne	22264 <flatcc_builder_check_union_field@@Base+0x64>
   22258:	clz	r0, r1
   2225c:	lsr	r0, r0, #5
   22260:	bx	lr
   22264:	ldr	r3, [r0, #16]
   22268:	ldrb	r3, [r3, r2]
   2226c:	cmp	r3, #0
   22270:	beq	22258 <flatcc_builder_check_union_field@@Base+0x58>
   22274:	adds	r0, r1, #0
   22278:	movne	r0, #1
   2227c:	bx	lr
   22280:	mov	r0, #0
   22284:	bx	lr
   22288:	andeq	r2, r3, r7, lsl #19
   2228c:	ldrdeq	r2, [r3], -r8
   22290:	andeq	r2, r3, r7, ror lr

00022294 <flatcc_builder_check_required@@Base>:
   22294:	ldr	r3, [r0, #32]
   22298:	push	{r4, lr}
   2229c:	ldrh	r3, [r3, #14]
   222a0:	cmp	r3, #3
   222a4:	beq	222bc <flatcc_builder_check_required@@Base+0x28>
   222a8:	ldr	r3, [pc, #84]	; 22304 <flatcc_builder_check_required@@Base+0x70>
   222ac:	movw	r2, #1297	; 0x511
   222b0:	ldr	r1, [pc, #80]	; 22308 <flatcc_builder_check_required@@Base+0x74>
   222b4:	ldr	r0, [pc, #80]	; 2230c <flatcc_builder_check_required@@Base+0x78>
   222b8:	bl	14620 <__assert_fail@plt>
   222bc:	ldrh	r3, [r0, #8]
   222c0:	cmp	r3, r2
   222c4:	subge	r1, r1, #2
   222c8:	movge	ip, #0
   222cc:	bge	222f4 <flatcc_builder_check_required@@Base+0x60>
   222d0:	mov	r0, #0
   222d4:	pop	{r4, pc}
   222d8:	ldrh	r3, [r1, #2]!
   222dc:	ldr	lr, [r0, #4]
   222e0:	lsl	r3, r3, #1
   222e4:	ldrh	r3, [lr, r3]
   222e8:	cmp	r3, #0
   222ec:	beq	222d0 <flatcc_builder_check_required@@Base+0x3c>
   222f0:	add	ip, ip, #1
   222f4:	cmp	ip, r2
   222f8:	blt	222d8 <flatcc_builder_check_required@@Base+0x44>
   222fc:	mov	r0, #1
   22300:	pop	{r4, pc}
   22304:	andeq	r2, r3, r8, lsr #19
   22308:	ldrdeq	r2, [r3], -r8
   2230c:	andeq	r2, r3, r7, ror lr

00022310 <flatcc_builder_end_table@@Base>:
   22310:	ldr	r3, [r0, #32]
   22314:	push	{r4, r5, r6, r7, lr}
   22318:	sub	sp, sp, #20
   2231c:	ldrh	r3, [r3, #14]
   22320:	cmp	r3, #3
   22324:	beq	2233c <flatcc_builder_end_table@@Base+0x2c>
   22328:	ldr	r3, [pc, #260]	; 22434 <flatcc_builder_end_table@@Base+0x124>
   2232c:	movw	r2, #1317	; 0x525
   22330:	ldr	r1, [pc, #256]	; 22438 <flatcc_builder_end_table@@Base+0x128>
   22334:	ldr	r0, [pc, #256]	; 2243c <flatcc_builder_end_table@@Base+0x12c>
   22338:	bl	14620 <__assert_fail@plt>
   2233c:	ldrh	r5, [r0, #8]
   22340:	mov	r4, r0
   22344:	ldr	r1, [r0, #4]
   22348:	ldr	r3, [r0, #20]
   2234c:	add	r5, r5, #2
   22350:	lsl	r5, r5, #1
   22354:	sub	r6, r1, #4
   22358:	uxth	r5, r5
   2235c:	add	r3, r3, #4
   22360:	uxth	r2, r3
   22364:	ldr	r3, [r0, #12]
   22368:	strh	r5, [r1, #-4]
   2236c:	strh	r2, [r1, #-2]
   22370:	ldr	r1, [pc, #200]	; 22440 <flatcc_builder_end_table@@Base+0x130>
   22374:	eor	r3, r3, r5
   22378:	mul	r3, r1, r3
   2237c:	eor	r3, r3, r2
   22380:	mov	r2, r5
   22384:	mul	r3, r1, r3
   22388:	mov	r1, r6
   2238c:	str	r3, [r0, #12]
   22390:	bl	21de0 <flatcc_builder_create_cached_vtable@@Base>
   22394:	subs	r7, r0, #0
   22398:	beq	22428 <flatcc_builder_end_table@@Base+0x118>
   2239c:	mov	r2, r5
   223a0:	mov	r1, #0
   223a4:	mov	r0, r6
   223a8:	bl	145c0 <memset@plt>
   223ac:	ldr	r3, [r4, #32]
   223b0:	mov	r0, r4
   223b4:	ldr	r2, [r4, #76]	; 0x4c
   223b8:	ldr	r3, [r3, #20]
   223bc:	str	r7, [sp, #8]
   223c0:	add	r2, r2, r3
   223c4:	ldr	r3, [r4]
   223c8:	sub	r3, r3, r2
   223cc:	asr	r3, r3, #1
   223d0:	strd	r2, [sp]
   223d4:	ldrh	r3, [r4, #130]	; 0x82
   223d8:	ldr	r1, [r4, #16]
   223dc:	ldr	r2, [r4, #20]
   223e0:	bl	22058 <flatcc_builder_create_table@@Base>
   223e4:	subs	r7, r0, #0
   223e8:	beq	22428 <flatcc_builder_end_table@@Base+0x118>
   223ec:	ldr	r3, [r4, #32]
   223f0:	mov	r0, r4
   223f4:	ldr	r1, [r3, #16]
   223f8:	ldr	r2, [r3, #24]
   223fc:	str	r2, [r4, #12]
   22400:	ldrh	r2, [r3, #28]
   22404:	ldr	r3, [r3, #20]
   22408:	strh	r2, [r4, #8]
   2240c:	ldr	r2, [r4, #52]	; 0x34
   22410:	add	r2, r2, r1
   22414:	str	r2, [r4, #4]
   22418:	ldr	r2, [r4, #76]	; 0x4c
   2241c:	add	r3, r2, r3
   22420:	str	r3, [r4]
   22424:	bl	2068c <union_vector_tests@@Base+0x200>
   22428:	mov	r0, r7
   2242c:	add	sp, sp, #20
   22430:	pop	{r4, r5, r6, r7, pc}
   22434:	andeq	r2, r3, r6, asr #19
   22438:	ldrdeq	r2, [r3], -r8
   2243c:	andeq	r2, r3, r7, ror lr
   22440:			; <UNDEFINED> instruction: 0x9e3779b1

00022444 <flatcc_builder_create_vector@@Base>:
   22444:	push	{lr}		; (str lr, [sp, #-4]!)
   22448:	sub	sp, sp, #84	; 0x54
   2244c:	ldr	lr, [sp, #92]	; 0x5c
   22450:	ldrh	ip, [sp, #88]	; 0x58
   22454:	cmp	r2, lr
   22458:	bls	22470 <flatcc_builder_create_vector@@Base+0x2c>
   2245c:	ldr	r3, [pc, #184]	; 2251c <flatcc_builder_create_vector@@Base+0xd8>
   22460:	movw	r2, #1365	; 0x555
   22464:	ldr	r1, [pc, #180]	; 22520 <flatcc_builder_create_vector@@Base+0xdc>
   22468:	ldr	r0, [pc, #180]	; 22524 <flatcc_builder_create_vector@@Base+0xe0>
   2246c:	bl	14620 <__assert_fail@plt>
   22470:	ldrh	lr, [r0, #128]	; 0x80
   22474:	mul	r3, r3, r2
   22478:	cmp	ip, #4
   2247c:	str	r2, [sp, #4]
   22480:	movcc	ip, #4
   22484:	ldr	r2, [r0, #136]	; 0x88
   22488:	cmp	lr, ip
   2248c:	sub	r2, r2, r3
   22490:	strhcc	ip, [r0, #128]	; 0x80
   22494:	sub	ip, ip, #1
   22498:	and	ip, ip, r2
   2249c:	mov	r2, #4
   224a0:	add	lr, sp, r2
   224a4:	cmp	r3, #0
   224a8:	str	r2, [sp, #8]
   224ac:	str	lr, [sp, #16]
   224b0:	str	r2, [sp, #20]
   224b4:	mov	r2, #1
   224b8:	str	r2, [sp, #12]
   224bc:	beq	224d8 <flatcc_builder_create_vector@@Base+0x94>
   224c0:	add	r2, r3, #4
   224c4:	str	r3, [sp, #28]
   224c8:	mov	r3, #2
   224cc:	str	r2, [sp, #8]
   224d0:	str	r3, [sp, #12]
   224d4:	str	r1, [sp, #24]
   224d8:	cmp	ip, #0
   224dc:	beq	2250c <flatcc_builder_create_vector@@Base+0xc8>
   224e0:	ldr	r3, [sp, #8]
   224e4:	add	r2, sp, #80	; 0x50
   224e8:	ldr	r1, [pc, #56]	; 22528 <flatcc_builder_create_vector@@Base+0xe4>
   224ec:	add	r3, r3, ip
   224f0:	str	r3, [sp, #8]
   224f4:	ldr	r3, [sp, #12]
   224f8:	add	r3, r3, #1
   224fc:	add	r2, r2, r3, lsl #3
   22500:	str	r3, [sp, #12]
   22504:	str	r1, [r2, #-72]	; 0xffffffb8
   22508:	str	ip, [r2, #-68]	; 0xffffffbc
   2250c:	add	r1, sp, #8
   22510:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   22514:	add	sp, sp, #84	; 0x54
   22518:	pop	{pc}		; (ldr pc, [sp], #4)
   2251c:	ldrdeq	r2, [r3], -pc	; <UNPREDICTABLE>
   22520:	ldrdeq	r2, [r3], -r8
   22524:	andeq	r2, r3, r2, lsr #29
   22528:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

0002252c <flatcc_builder_end_vector@@Base>:
   2252c:	push	{r0, r1, r2, r4, r5, lr}
   22530:	ldr	r2, [r0, #32]
   22534:	ldrh	r3, [r2, #14]
   22538:	cmp	r3, #4
   2253c:	beq	22554 <flatcc_builder_end_vector@@Base+0x28>
   22540:	ldr	r3, [pc, #76]	; 22594 <flatcc_builder_end_vector@@Base+0x68>
   22544:	movw	r2, #1400	; 0x578
   22548:	ldr	r1, [pc, #72]	; 22598 <flatcc_builder_end_vector@@Base+0x6c>
   2254c:	ldr	r0, [pc, #72]	; 2259c <flatcc_builder_end_vector@@Base+0x70>
   22550:	bl	14620 <__assert_fail@plt>
   22554:	ldr	r3, [r2, #24]
   22558:	mov	r4, r0
   2255c:	str	r3, [sp, #4]
   22560:	ldrh	r3, [r0, #130]	; 0x82
   22564:	str	r3, [sp]
   22568:	ldr	r3, [r2, #16]
   2256c:	ldr	r1, [r0, #16]
   22570:	ldr	r2, [r2, #20]
   22574:	bl	22444 <flatcc_builder_create_vector@@Base>
   22578:	subs	r5, r0, #0
   2257c:	beq	22588 <flatcc_builder_end_vector@@Base+0x5c>
   22580:	mov	r0, r4
   22584:	bl	2068c <union_vector_tests@@Base+0x200>
   22588:	mov	r0, r5
   2258c:	add	sp, sp, #12
   22590:	pop	{r4, r5, pc}
   22594:	strdeq	r2, [r3], -ip
   22598:	ldrdeq	r2, [r3], -r8
   2259c:	andeq	r2, r3, r2, lsl #26

000225a0 <flatcc_builder_vector_count@@Base>:
   225a0:	ldr	r3, [r0, #32]
   225a4:	ldr	r0, [r3, #20]
   225a8:	bx	lr

000225ac <flatcc_builder_vector_edit@@Base>:
   225ac:	ldr	r0, [r0, #16]
   225b0:	bx	lr

000225b4 <flatcc_builder_create_offset_vector_direct@@Base>:
   225b4:	cmn	r2, #-1073741823	; 0xc0000001
   225b8:	bhi	225c4 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   225bc:	mov	r3, #0
   225c0:	b	20c3c <flatcc_builder_default_alloc@@Base+0x4ac>
   225c4:	mov	r0, #0
   225c8:	bx	lr

000225cc <flatcc_builder_end_offset_vector@@Base>:
   225cc:	ldr	r3, [r0, #32]
   225d0:	push	{r4, r5, r6, lr}
   225d4:	ldrh	r2, [r3, #14]
   225d8:	cmp	r2, #5
   225dc:	beq	225f4 <flatcc_builder_end_offset_vector@@Base+0x28>
   225e0:	ldr	r3, [pc, #52]	; 2261c <flatcc_builder_end_offset_vector@@Base+0x50>
   225e4:	movw	r2, #1480	; 0x5c8
   225e8:	ldr	r1, [pc, #48]	; 22620 <flatcc_builder_end_offset_vector@@Base+0x54>
   225ec:	ldr	r0, [pc, #48]	; 22624 <flatcc_builder_end_offset_vector@@Base+0x58>
   225f0:	bl	14620 <__assert_fail@plt>
   225f4:	ldr	r1, [r0, #16]
   225f8:	mov	r4, r0
   225fc:	ldr	r2, [r3, #20]
   22600:	bl	225b4 <flatcc_builder_create_offset_vector_direct@@Base>
   22604:	subs	r5, r0, #0
   22608:	beq	22614 <flatcc_builder_end_offset_vector@@Base+0x48>
   2260c:	mov	r0, r4
   22610:	bl	2068c <union_vector_tests@@Base+0x200>
   22614:	mov	r0, r5
   22618:	pop	{r4, r5, r6, pc}
   2261c:	andeq	r2, r3, r6, lsl sl
   22620:	ldrdeq	r2, [r3], -r8
   22624:	andeq	r2, r3, fp, ror #26

00022628 <flatcc_builder_create_offset_vector@@Base>:
   22628:	push	{r4, r5, r6, lr}
   2262c:	mov	r4, r0
   22630:	mov	r6, r1
   22634:	mov	r5, r2
   22638:	bl	21c28 <flatcc_builder_start_offset_vector@@Base>
   2263c:	cmp	r0, #0
   22640:	bne	22670 <flatcc_builder_create_offset_vector@@Base+0x48>
   22644:	mov	r1, r5
   22648:	mov	r0, r4
   2264c:	bl	21838 <flatcc_builder_extend_offset_vector@@Base>
   22650:	cmp	r0, #0
   22654:	beq	22670 <flatcc_builder_create_offset_vector@@Base+0x48>
   22658:	lsl	r2, r5, #2
   2265c:	mov	r1, r6
   22660:	bl	14548 <memcpy@plt>
   22664:	mov	r0, r4
   22668:	pop	{r4, r5, r6, lr}
   2266c:	b	225cc <flatcc_builder_end_offset_vector@@Base>
   22670:	mov	r0, #0
   22674:	pop	{r4, r5, r6, pc}

00022678 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   22678:	ldr	r2, [r0, #32]
   2267c:	mov	r3, r1
   22680:	push	{r4, r5, r6, lr}
   22684:	ldrh	r1, [r2, #14]
   22688:	cmp	r1, #5
   2268c:	beq	226a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   22690:	ldr	r3, [pc, #64]	; 226d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   22694:	movw	r2, #1493	; 0x5d5
   22698:	ldr	r1, [pc, #60]	; 226dc <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   2269c:	ldr	r0, [pc, #60]	; 226e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   226a0:	bl	14620 <__assert_fail@plt>
   226a4:	ldr	r2, [r2, #20]
   226a8:	cmn	r2, #-1073741823	; 0xc0000001
   226ac:	movhi	r5, #0
   226b0:	bhi	226d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   226b4:	ldr	r1, [r0, #16]
   226b8:	mov	r4, r0
   226bc:	bl	20c3c <flatcc_builder_default_alloc@@Base+0x4ac>
   226c0:	subs	r5, r0, #0
   226c4:	beq	226d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   226c8:	mov	r0, r4
   226cc:	bl	2068c <union_vector_tests@@Base+0x200>
   226d0:	mov	r0, r5
   226d4:	pop	{r4, r5, r6, pc}
   226d8:	andeq	r2, r3, r7, lsr sl
   226dc:	ldrdeq	r2, [r3], -r8
   226e0:	andeq	r2, r3, fp, ror #26

000226e4 <flatcc_builder_offset_vector_edit@@Base>:
   226e4:	ldr	r0, [r0, #16]
   226e8:	bx	lr

000226ec <flatcc_builder_offset_vector_count@@Base>:
   226ec:	ldr	r3, [r0, #32]
   226f0:	ldr	r0, [r3, #20]
   226f4:	bx	lr

000226f8 <flatcc_builder_create_union_vector_direct@@Base>:
   226f8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   226fc:	mov	r4, r0
   22700:	ldr	r5, [sp, #32]
   22704:	cmn	r5, #-1073741823	; 0xc0000001
   22708:	bls	22724 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   2270c:	mov	r3, #0
   22710:	str	r3, [r4]
   22714:	str	r3, [r4, #4]
   22718:	mov	r0, r4
   2271c:	add	sp, sp, #8
   22720:	pop	{r4, r5, r6, r7, r8, pc}
   22724:	mov	r7, r1
   22728:	mov	r8, r2
   2272c:	mov	r1, r3
   22730:	mov	r0, r7
   22734:	mov	r3, r2
   22738:	mov	r2, r5
   2273c:	bl	20c3c <flatcc_builder_default_alloc@@Base+0x4ac>
   22740:	subs	r6, r0, #0
   22744:	beq	2270c <flatcc_builder_create_union_vector_direct@@Base+0x14>
   22748:	mvn	r3, #0
   2274c:	mov	r2, r5
   22750:	mov	r1, r8
   22754:	mov	r0, r7
   22758:	str	r3, [sp, #4]
   2275c:	mov	r3, #1
   22760:	str	r3, [sp]
   22764:	bl	22444 <flatcc_builder_create_vector@@Base>
   22768:	stm	r4, {r0, r6}
   2276c:	b	22718 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00022770 <flatcc_builder_create_union_vector@@Base>:
   22770:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   22774:	mov	r6, r0
   22778:	mov	r0, r1
   2277c:	mov	r5, r1
   22780:	mov	r8, r2
   22784:	mov	r7, r3
   22788:	bl	21c28 <flatcc_builder_start_offset_vector@@Base>
   2278c:	subs	r4, r0, #0
   22790:	beq	227ac <flatcc_builder_create_union_vector@@Base+0x3c>
   22794:	mov	r3, #0
   22798:	str	r3, [r6]
   2279c:	str	r3, [r6, #4]
   227a0:	mov	r0, r6
   227a4:	add	sp, sp, #16
   227a8:	pop	{r4, r5, r6, r7, r8, pc}
   227ac:	mov	r1, r7
   227b0:	mov	r0, r5
   227b4:	bl	21838 <flatcc_builder_extend_offset_vector@@Base>
   227b8:	cmp	r0, #0
   227bc:	beq	22794 <flatcc_builder_create_union_vector@@Base+0x24>
   227c0:	mov	r1, r7
   227c4:	mov	r0, r5
   227c8:	bl	20644 <union_vector_tests@@Base+0x1b8>
   227cc:	subs	r2, r0, #0
   227d0:	movne	r1, r4
   227d4:	addne	r0, r8, #4
   227d8:	ldrne	r3, [r5, #16]
   227dc:	beq	22794 <flatcc_builder_create_union_vector@@Base+0x24>
   227e0:	cmp	r1, r7
   227e4:	bne	22814 <flatcc_builder_create_union_vector@@Base+0xa4>
   227e8:	add	r0, sp, #8
   227ec:	str	r1, [sp]
   227f0:	mov	r1, r5
   227f4:	bl	226f8 <flatcc_builder_create_union_vector_direct@@Base>
   227f8:	ldr	r7, [sp, #8]
   227fc:	mov	r0, r5
   22800:	ldr	r4, [sp, #12]
   22804:	bl	2068c <union_vector_tests@@Base+0x200>
   22808:	str	r7, [r6]
   2280c:	str	r4, [r6, #4]
   22810:	b	227a0 <flatcc_builder_create_union_vector@@Base+0x30>
   22814:	ldrb	ip, [r8, r1, lsl #3]
   22818:	strb	ip, [r2, r1]
   2281c:	ldr	ip, [r0, r1, lsl #3]
   22820:	str	ip, [r3, r1, lsl #2]
   22824:	add	r1, r1, #1
   22828:	b	227e0 <flatcc_builder_create_union_vector@@Base+0x70>

0002282c <flatcc_builder_start_union_vector@@Base>:
   2282c:	push	{r4, r5, r6, lr}
   22830:	mov	r1, #4
   22834:	mov	r5, r0
   22838:	bl	208f8 <flatcc_builder_default_alloc@@Base+0x168>
   2283c:	subs	r4, r0, #0
   22840:	mvnne	r4, #0
   22844:	bne	2286c <flatcc_builder_start_union_vector@@Base+0x40>
   22848:	ldr	r3, [r5, #32]
   2284c:	mov	r2, #8
   22850:	mvn	r1, #3
   22854:	mov	r0, r5
   22858:	str	r2, [r3, #16]
   2285c:	mov	r2, #7
   22860:	strh	r2, [r3, #14]
   22864:	str	r4, [r3, #20]
   22868:	bl	205c8 <union_vector_tests@@Base+0x13c>
   2286c:	mov	r0, r4
   22870:	pop	{r4, r5, r6, pc}

00022874 <flatcc_builder_end_union_vector@@Base>:
   22874:	ldr	r3, [r1, #32]
   22878:	push	{r4, r5, r6, r7, lr}
   2287c:	sub	sp, sp, #20
   22880:	ldrh	r2, [r3, #14]
   22884:	cmp	r2, #7
   22888:	beq	228a0 <flatcc_builder_end_union_vector@@Base+0x2c>
   2288c:	ldr	r3, [pc, #156]	; 22930 <flatcc_builder_end_union_vector@@Base+0xbc>
   22890:	movw	r2, #1617	; 0x651
   22894:	ldr	r1, [pc, #152]	; 22934 <flatcc_builder_end_union_vector@@Base+0xc0>
   22898:	ldr	r0, [pc, #152]	; 22938 <flatcc_builder_end_union_vector@@Base+0xc4>
   2289c:	bl	14620 <__assert_fail@plt>
   228a0:	ldr	r7, [r3, #20]
   228a4:	mov	r4, r0
   228a8:	mov	r5, r1
   228ac:	mov	r0, r1
   228b0:	lsl	r6, r7, #2
   228b4:	add	r1, r6, r7
   228b8:	bl	20644 <union_vector_tests@@Base+0x1b8>
   228bc:	subs	r3, r0, #0
   228c0:	streq	r3, [r4]
   228c4:	streq	r3, [r4, #4]
   228c8:	beq	2290c <flatcc_builder_end_union_vector@@Base+0x98>
   228cc:	ldr	r0, [r5, #16]
   228d0:	add	r2, r3, r6
   228d4:	mov	r1, #0
   228d8:	add	ip, r0, #4
   228dc:	cmp	r1, r7
   228e0:	bne	22918 <flatcc_builder_end_union_vector@@Base+0xa4>
   228e4:	add	r0, sp, #8
   228e8:	str	r1, [sp]
   228ec:	mov	r1, r5
   228f0:	bl	226f8 <flatcc_builder_create_union_vector_direct@@Base>
   228f4:	ldr	r7, [sp, #8]
   228f8:	mov	r0, r5
   228fc:	ldr	r6, [sp, #12]
   22900:	bl	2068c <union_vector_tests@@Base+0x200>
   22904:	str	r7, [r4]
   22908:	str	r6, [r4, #4]
   2290c:	mov	r0, r4
   22910:	add	sp, sp, #20
   22914:	pop	{r4, r5, r6, r7, pc}
   22918:	ldrb	lr, [r0, r1, lsl #3]
   2291c:	strb	lr, [r2, r1]
   22920:	ldr	lr, [ip, r1, lsl #3]
   22924:	str	lr, [r3, r1, lsl #2]
   22928:	add	r1, r1, #1
   2292c:	b	228dc <flatcc_builder_end_union_vector@@Base+0x68>
   22930:	andeq	r2, r3, r3, ror #20
   22934:	ldrdeq	r2, [r3], -r8
   22938:			; <UNDEFINED> instruction: 0x00032eb5

0002293c <flatcc_builder_union_vector_edit@@Base>:
   2293c:	ldr	r0, [r0, #16]
   22940:	bx	lr

00022944 <flatcc_builder_union_vector_count@@Base>:
   22944:	ldr	r3, [r0, #32]
   22948:	ldr	r0, [r3, #20]
   2294c:	bx	lr

00022950 <flatcc_builder_extend_union_vector@@Base>:
   22950:	push	{r4, r5, r6, lr}
   22954:	mvn	r2, #-536870912	; 0xe0000000
   22958:	mov	r4, r0
   2295c:	mov	r5, r1
   22960:	ldr	r0, [r0, #32]
   22964:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   22968:	cmp	r0, #0
   2296c:	bne	22980 <flatcc_builder_extend_union_vector@@Base+0x30>
   22970:	lsl	r1, r5, #3
   22974:	mov	r0, r4
   22978:	pop	{r4, r5, r6, lr}
   2297c:	b	20644 <union_vector_tests@@Base+0x1b8>
   22980:	mov	r0, #0
   22984:	pop	{r4, r5, r6, pc}

00022988 <flatcc_builder_truncate_union_vector@@Base>:
   22988:	ldr	r3, [r0, #32]
   2298c:	push	{r4, lr}
   22990:	ldrh	r2, [r3, #14]
   22994:	cmp	r2, #7
   22998:	beq	229b0 <flatcc_builder_truncate_union_vector@@Base+0x28>
   2299c:	ldr	r3, [pc, #72]	; 229ec <flatcc_builder_truncate_union_vector@@Base+0x64>
   229a0:	movw	r2, #1665	; 0x681
   229a4:	ldr	r1, [pc, #68]	; 229f0 <flatcc_builder_truncate_union_vector@@Base+0x68>
   229a8:	ldr	r0, [pc, #68]	; 229f4 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   229ac:	bl	14620 <__assert_fail@plt>
   229b0:	ldr	r2, [r3, #20]
   229b4:	cmp	r2, r1
   229b8:	bcs	229d0 <flatcc_builder_truncate_union_vector@@Base+0x48>
   229bc:	ldr	r3, [pc, #40]	; 229ec <flatcc_builder_truncate_union_vector@@Base+0x64>
   229c0:	movw	r2, #1666	; 0x682
   229c4:	ldr	r1, [pc, #36]	; 229f0 <flatcc_builder_truncate_union_vector@@Base+0x68>
   229c8:	ldr	r0, [pc, #40]	; 229f8 <flatcc_builder_truncate_union_vector@@Base+0x70>
   229cc:	b	229ac <flatcc_builder_truncate_union_vector@@Base+0x24>
   229d0:	sub	r2, r2, r1
   229d4:	str	r2, [r3, #20]
   229d8:	ldr	r3, [r3, #16]
   229dc:	mul	r1, r3, r1
   229e0:	bl	206f4 <union_vector_tests@@Base+0x268>
   229e4:	mov	r0, #0
   229e8:	pop	{r4, pc}
   229ec:	andeq	r2, r3, r3, lsl #21
   229f0:	ldrdeq	r2, [r3], -r8
   229f4:			; <UNDEFINED> instruction: 0x00032eb5
   229f8:	andeq	r2, r3, lr, ror #27

000229fc <flatcc_builder_union_vector_push@@Base>:
   229fc:	push	{r0, r1, r4, lr}
   22a00:	mov	r4, sp
   22a04:	stm	r4, {r1, r2}
   22a08:	ldr	r2, [r0, #32]
   22a0c:	ldrh	r3, [r2, #14]
   22a10:	cmp	r3, #7
   22a14:	beq	22a2c <flatcc_builder_union_vector_push@@Base+0x30>
   22a18:	ldr	r3, [pc, #68]	; 22a64 <flatcc_builder_union_vector_push@@Base+0x68>
   22a1c:	movw	r2, #1677	; 0x68d
   22a20:	ldr	r1, [pc, #64]	; 22a68 <flatcc_builder_union_vector_push@@Base+0x6c>
   22a24:	ldr	r0, [pc, #64]	; 22a6c <flatcc_builder_union_vector_push@@Base+0x70>
   22a28:	bl	14620 <__assert_fail@plt>
   22a2c:	ldr	r3, [r2, #20]
   22a30:	cmn	r3, #-536870911	; 0xe0000001
   22a34:	moveq	r3, #0
   22a38:	beq	22a58 <flatcc_builder_union_vector_push@@Base+0x5c>
   22a3c:	add	r3, r3, #1
   22a40:	mov	r1, #8
   22a44:	str	r3, [r2, #20]
   22a48:	bl	20644 <union_vector_tests@@Base+0x1b8>
   22a4c:	subs	r3, r0, #0
   22a50:	ldmne	r4, {r0, r1}
   22a54:	stmne	r3, {r0, r1}
   22a58:	mov	r0, r3
   22a5c:	add	sp, sp, #8
   22a60:	pop	{r4, pc}
   22a64:	andeq	r2, r3, r8, lsr #21
   22a68:	ldrdeq	r2, [r3], -r8
   22a6c:			; <UNDEFINED> instruction: 0x00032eb5

00022a70 <flatcc_builder_append_union_vector@@Base>:
   22a70:	push	{r4, r5, r6, lr}
   22a74:	mov	r4, r0
   22a78:	ldr	r0, [r0, #32]
   22a7c:	ldrh	r3, [r0, #14]
   22a80:	cmp	r3, #7
   22a84:	beq	22a9c <flatcc_builder_append_union_vector@@Base+0x2c>
   22a88:	ldr	r3, [pc, #68]	; 22ad4 <flatcc_builder_append_union_vector@@Base+0x64>
   22a8c:	movw	r2, #1692	; 0x69c
   22a90:	ldr	r1, [pc, #64]	; 22ad8 <flatcc_builder_append_union_vector@@Base+0x68>
   22a94:	ldr	r0, [pc, #64]	; 22adc <flatcc_builder_append_union_vector@@Base+0x6c>
   22a98:	bl	14620 <__assert_fail@plt>
   22a9c:	mov	r5, r2
   22aa0:	mov	r6, r1
   22aa4:	mvn	r2, #-536870912	; 0xe0000000
   22aa8:	mov	r1, r5
   22aac:	bl	20be8 <flatcc_builder_default_alloc@@Base+0x458>
   22ab0:	cmp	r0, #0
   22ab4:	bne	22acc <flatcc_builder_append_union_vector@@Base+0x5c>
   22ab8:	lsl	r2, r5, #3
   22abc:	mov	r1, r6
   22ac0:	mov	r0, r4
   22ac4:	pop	{r4, r5, r6, lr}
   22ac8:	b	20714 <union_vector_tests@@Base+0x288>
   22acc:	mov	r0, #0
   22ad0:	pop	{r4, r5, r6, pc}
   22ad4:	andeq	r2, r3, r9, asr #21
   22ad8:	ldrdeq	r2, [r3], -r8
   22adc:			; <UNDEFINED> instruction: 0x00032eb5

00022ae0 <flatcc_builder_create_string@@Base>:
   22ae0:	ldr	r3, [r0, #136]	; 0x88
   22ae4:	mov	ip, #4
   22ae8:	cmp	r2, #0
   22aec:	push	{lr}		; (str lr, [sp, #-4]!)
   22af0:	sub	sp, sp, #84	; 0x54
   22af4:	add	lr, sp, ip
   22af8:	stmib	sp, {r2, ip}
   22afc:	sub	r3, r3, r2
   22b00:	str	lr, [sp, #16]
   22b04:	sub	r3, r3, #1
   22b08:	str	ip, [sp, #20]
   22b0c:	mov	ip, #1
   22b10:	and	r3, r3, #3
   22b14:	add	r3, r3, #1
   22b18:	str	ip, [sp, #12]
   22b1c:	beq	22b38 <flatcc_builder_create_string@@Base+0x58>
   22b20:	add	ip, r2, #4
   22b24:	str	r2, [sp, #28]
   22b28:	mov	r2, #2
   22b2c:	str	ip, [sp, #8]
   22b30:	str	r2, [sp, #12]
   22b34:	str	r1, [sp, #24]
   22b38:	ldr	r2, [sp, #8]
   22b3c:	add	r1, sp, #80	; 0x50
   22b40:	ldr	ip, [pc, #44]	; 22b74 <flatcc_builder_create_string@@Base+0x94>
   22b44:	add	r2, r2, r3
   22b48:	str	r2, [sp, #8]
   22b4c:	ldr	r2, [sp, #12]
   22b50:	add	r2, r2, #1
   22b54:	add	r1, r1, r2, lsl #3
   22b58:	str	r2, [sp, #12]
   22b5c:	str	ip, [r1, #-72]	; 0xffffffb8
   22b60:	str	r3, [r1, #-68]	; 0xffffffbc
   22b64:	add	r1, sp, #8
   22b68:	bl	20b70 <flatcc_builder_default_alloc@@Base+0x3e0>
   22b6c:	add	sp, sp, #84	; 0x54
   22b70:	pop	{pc}		; (ldr pc, [sp], #4)
   22b74:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

00022b78 <flatcc_builder_create_string_str@@Base>:
   22b78:	push	{r4, r5, r6, lr}
   22b7c:	mov	r5, r0
   22b80:	mov	r0, r1
   22b84:	mov	r4, r1
   22b88:	bl	1459c <strlen@plt>
   22b8c:	mov	r2, r0
   22b90:	mov	r1, r4
   22b94:	mov	r0, r5
   22b98:	pop	{r4, r5, r6, lr}
   22b9c:	b	22ae0 <flatcc_builder_create_string@@Base>

00022ba0 <flatcc_builder_create_string_strn@@Base>:
   22ba0:	push	{r4, r5, r6, lr}
   22ba4:	mov	r4, r1
   22ba8:	mov	r6, r0
   22bac:	mov	r1, #0
   22bb0:	mov	r0, r4
   22bb4:	mov	r5, r2
   22bb8:	bl	145e4 <memchr@plt>
   22bbc:	cmp	r0, #0
   22bc0:	mov	r1, r4
   22bc4:	subne	r5, r0, r4
   22bc8:	mov	r0, r6
   22bcc:	mov	r2, r5
   22bd0:	pop	{r4, r5, r6, lr}
   22bd4:	b	22ae0 <flatcc_builder_create_string@@Base>

00022bd8 <flatcc_builder_end_string@@Base>:
   22bd8:	ldr	r3, [r0, #32]
   22bdc:	push	{r4, r5, r6, lr}
   22be0:	ldrh	r2, [r3, #14]
   22be4:	cmp	r2, #6
   22be8:	beq	22c00 <flatcc_builder_end_string@@Base+0x28>
   22bec:	ldr	r3, [pc, #84]	; 22c48 <flatcc_builder_end_string@@Base+0x70>
   22bf0:	movw	r2, #1732	; 0x6c4
   22bf4:	ldr	r1, [pc, #80]	; 22c4c <flatcc_builder_end_string@@Base+0x74>
   22bf8:	ldr	r0, [pc, #80]	; 22c50 <flatcc_builder_end_string@@Base+0x78>
   22bfc:	bl	14620 <__assert_fail@plt>
   22c00:	ldr	r2, [r3, #20]
   22c04:	mov	r4, r0
   22c08:	ldr	r1, [r0, #20]
   22c0c:	cmp	r2, r1
   22c10:	beq	22c28 <flatcc_builder_end_string@@Base+0x50>
   22c14:	ldr	r3, [pc, #44]	; 22c48 <flatcc_builder_end_string@@Base+0x70>
   22c18:	movw	r2, #1733	; 0x6c5
   22c1c:	ldr	r1, [pc, #40]	; 22c4c <flatcc_builder_end_string@@Base+0x74>
   22c20:	ldr	r0, [pc, #44]	; 22c54 <flatcc_builder_end_string@@Base+0x7c>
   22c24:	b	22bfc <flatcc_builder_end_string@@Base+0x24>
   22c28:	ldr	r1, [r0, #16]
   22c2c:	bl	22ae0 <flatcc_builder_create_string@@Base>
   22c30:	subs	r5, r0, #0
   22c34:	beq	22c40 <flatcc_builder_end_string@@Base+0x68>
   22c38:	mov	r0, r4
   22c3c:	bl	2068c <union_vector_tests@@Base+0x200>
   22c40:	mov	r0, r5
   22c44:	pop	{r4, r5, r6, pc}
   22c48:	andeq	r2, r3, ip, ror #21
   22c4c:	ldrdeq	r2, [r3], -r8
   22c50:	muleq	r3, lr, sp
   22c54:	andeq	r2, r3, r7, ror #29

00022c58 <flatcc_builder_string_edit@@Base>:
   22c58:	ldr	r0, [r0, #16]
   22c5c:	bx	lr

00022c60 <flatcc_builder_string_len@@Base>:
   22c60:	ldr	r3, [r0, #32]
   22c64:	ldr	r0, [r3, #20]
   22c68:	bx	lr

00022c6c <flatcc_builder_table_add@@Base>:
   22c6c:	push	{r4, r5, r6, r7, r8, lr}
   22c70:	mov	r4, r0
   22c74:	ldr	r0, [r0, #32]
   22c78:	ldrh	r0, [r0, #14]
   22c7c:	cmp	r0, #3
   22c80:	beq	22c98 <flatcc_builder_table_add@@Base+0x2c>
   22c84:	ldr	r3, [pc, #240]	; 22d7c <flatcc_builder_table_add@@Base+0x110>
   22c88:	movw	r2, #1773	; 0x6ed
   22c8c:	ldr	r1, [pc, #236]	; 22d80 <flatcc_builder_table_add@@Base+0x114>
   22c90:	ldr	r0, [pc, #236]	; 22d84 <flatcc_builder_table_add@@Base+0x118>
   22c94:	bl	14620 <__assert_fail@plt>
   22c98:	movw	r0, #32764	; 0x7ffc
   22c9c:	cmp	r1, r0
   22ca0:	bls	22cb8 <flatcc_builder_table_add@@Base+0x4c>
   22ca4:	ldr	r3, [pc, #208]	; 22d7c <flatcc_builder_table_add@@Base+0x110>
   22ca8:	movw	r2, #1774	; 0x6ee
   22cac:	ldr	r1, [pc, #204]	; 22d80 <flatcc_builder_table_add@@Base+0x114>
   22cb0:	ldr	r0, [pc, #208]	; 22d88 <flatcc_builder_table_add@@Base+0x11c>
   22cb4:	b	22c94 <flatcc_builder_table_add@@Base+0x28>
   22cb8:	ldrh	r0, [r4, #130]	; 0x82
   22cbc:	lsl	r7, r1, #1
   22cc0:	cmp	r0, r3
   22cc4:	ldr	r0, [r4, #4]
   22cc8:	strhcc	r3, [r4, #130]	; 0x82
   22ccc:	ldrh	r5, [r0, r7]
   22cd0:	cmp	r5, #0
   22cd4:	beq	22cec <flatcc_builder_table_add@@Base+0x80>
   22cd8:	ldr	r3, [pc, #156]	; 22d7c <flatcc_builder_table_add@@Base+0x110>
   22cdc:	movw	r2, #1784	; 0x6f8
   22ce0:	ldr	r1, [pc, #152]	; 22d80 <flatcc_builder_table_add@@Base+0x114>
   22ce4:	ldr	r0, [pc, #160]	; 22d8c <flatcc_builder_table_add@@Base+0x120>
   22ce8:	b	22c94 <flatcc_builder_table_add@@Base+0x28>
   22cec:	ldr	ip, [r4, #12]
   22cf0:	sub	r0, r3, #1
   22cf4:	rsb	r3, r3, #0
   22cf8:	uxth	r8, r1
   22cfc:	ldr	lr, [pc, #140]	; 22d90 <flatcc_builder_table_add@@Base+0x124>
   22d00:	ldr	r6, [r4, #20]
   22d04:	eor	ip, ip, r1
   22d08:	mul	ip, lr, ip
   22d0c:	add	r0, r0, r6
   22d10:	and	r6, r0, r3
   22d14:	ldr	r3, [r4, #24]
   22d18:	eor	ip, ip, r2
   22d1c:	add	r1, r2, r6
   22d20:	mul	ip, lr, ip
   22d24:	cmp	r1, r3
   22d28:	str	ip, [r4, #12]
   22d2c:	str	r1, [r4, #20]
   22d30:	bcs	22d5c <flatcc_builder_table_add@@Base+0xf0>
   22d34:	ldr	r3, [r4, #4]
   22d38:	add	r2, r6, #4
   22d3c:	ldr	r0, [r4, #16]
   22d40:	strh	r2, [r3, r7]
   22d44:	ldrh	r3, [r4, #8]
   22d48:	add	r0, r0, r6
   22d4c:	cmp	r3, r8
   22d50:	addls	r1, r8, #1
   22d54:	strhls	r1, [r4, #8]
   22d58:	pop	{r4, r5, r6, r7, r8, pc}
   22d5c:	movw	r2, #65532	; 0xfffc
   22d60:	add	r1, r1, #1
   22d64:	mov	r0, r4
   22d68:	bl	205f4 <union_vector_tests@@Base+0x168>
   22d6c:	cmp	r0, #0
   22d70:	beq	22d34 <flatcc_builder_table_add@@Base+0xc8>
   22d74:	mov	r0, r5
   22d78:	pop	{r4, r5, r6, r7, r8, pc}
   22d7c:	andeq	r2, r3, r6, lsl #22
   22d80:	ldrdeq	r2, [r3], -r8
   22d84:	andeq	r2, r3, r7, ror lr
   22d88:	andeq	r2, r3, fp, lsl #30
   22d8c:	andeq	r2, r3, r5, asr #24
   22d90:			; <UNDEFINED> instruction: 0x9e3779b1

00022d94 <flatcc_builder_table_edit@@Base>:
   22d94:	ldr	r3, [r0, #32]
   22d98:	ldrh	r3, [r3, #14]
   22d9c:	cmp	r3, #3
   22da0:	beq	22dbc <flatcc_builder_table_edit@@Base+0x28>
   22da4:	push	{r4, lr}
   22da8:	movw	r2, #1794	; 0x702
   22dac:	ldr	r3, [pc, #28]	; 22dd0 <flatcc_builder_table_edit@@Base+0x3c>
   22db0:	ldr	r1, [pc, #28]	; 22dd4 <flatcc_builder_table_edit@@Base+0x40>
   22db4:	ldr	r0, [pc, #28]	; 22dd8 <flatcc_builder_table_edit@@Base+0x44>
   22db8:	bl	14620 <__assert_fail@plt>
   22dbc:	ldr	r3, [r0, #20]
   22dc0:	ldr	r0, [r0, #16]
   22dc4:	sub	r3, r3, r1
   22dc8:	add	r0, r0, r3
   22dcc:	bx	lr
   22dd0:	andeq	r2, r3, pc, lsl fp
   22dd4:	ldrdeq	r2, [r3], -r8
   22dd8:	andeq	r2, r3, r7, ror lr

00022ddc <flatcc_builder_table_add_copy@@Base>:
   22ddc:	push	{r4, r5, r6, lr}
   22de0:	mov	r4, r3
   22de4:	mov	r6, r2
   22de8:	mov	r2, r4
   22dec:	ldrh	r3, [sp, #16]
   22df0:	bl	22c6c <flatcc_builder_table_add@@Base>
   22df4:	subs	r5, r0, #0
   22df8:	beq	22e08 <flatcc_builder_table_add_copy@@Base+0x2c>
   22dfc:	mov	r2, r4
   22e00:	mov	r1, r6
   22e04:	bl	14548 <memcpy@plt>
   22e08:	mov	r0, r5
   22e0c:	pop	{r4, r5, r6, pc}

00022e10 <flatcc_builder_table_add_offset@@Base>:
   22e10:	ldr	r3, [r0, #32]
   22e14:	push	{r4, r5, r6, r7, r8, lr}
   22e18:	ldrh	r3, [r3, #14]
   22e1c:	cmp	r3, #3
   22e20:	beq	22e38 <flatcc_builder_table_add_offset@@Base+0x28>
   22e24:	ldr	r3, [pc, #236]	; 22f18 <flatcc_builder_table_add_offset@@Base+0x108>
   22e28:	movw	r2, #1811	; 0x713
   22e2c:	ldr	r1, [pc, #232]	; 22f1c <flatcc_builder_table_add_offset@@Base+0x10c>
   22e30:	ldr	r0, [pc, #232]	; 22f20 <flatcc_builder_table_add_offset@@Base+0x110>
   22e34:	bl	14620 <__assert_fail@plt>
   22e38:	movw	r3, #32764	; 0x7ffc
   22e3c:	cmp	r1, r3
   22e40:	bls	22e58 <flatcc_builder_table_add_offset@@Base+0x48>
   22e44:	ldr	r3, [pc, #204]	; 22f18 <flatcc_builder_table_add_offset@@Base+0x108>
   22e48:	movw	r2, #1812	; 0x714
   22e4c:	ldr	r1, [pc, #200]	; 22f1c <flatcc_builder_table_add_offset@@Base+0x10c>
   22e50:	ldr	r0, [pc, #204]	; 22f24 <flatcc_builder_table_add_offset@@Base+0x114>
   22e54:	b	22e34 <flatcc_builder_table_add_offset@@Base+0x24>
   22e58:	ldr	r3, [r0, #4]
   22e5c:	lsl	r7, r1, #1
   22e60:	mov	r4, r0
   22e64:	ldrh	r6, [r3, r7]
   22e68:	cmp	r6, #0
   22e6c:	beq	22e84 <flatcc_builder_table_add_offset@@Base+0x74>
   22e70:	ldr	r3, [pc, #160]	; 22f18 <flatcc_builder_table_add_offset@@Base+0x108>
   22e74:	movw	r2, #1819	; 0x71b
   22e78:	ldr	r1, [pc, #156]	; 22f1c <flatcc_builder_table_add_offset@@Base+0x10c>
   22e7c:	ldr	r0, [pc, #164]	; 22f28 <flatcc_builder_table_add_offset@@Base+0x118>
   22e80:	b	22e34 <flatcc_builder_table_add_offset@@Base+0x24>
   22e84:	ldr	r3, [r0, #12]
   22e88:	uxth	r5, r1
   22e8c:	ldr	r2, [pc, #152]	; 22f2c <flatcc_builder_table_add_offset@@Base+0x11c>
   22e90:	ldr	r8, [r0, #20]
   22e94:	eor	r3, r3, r1
   22e98:	mul	r3, r2, r3
   22e9c:	add	r8, r8, #3
   22ea0:	eor	r3, r3, #4
   22ea4:	bic	r8, r8, #3
   22ea8:	add	r1, r8, #4
   22eac:	mul	r3, r2, r3
   22eb0:	str	r3, [r0, #12]
   22eb4:	ldr	r3, [r0, #24]
   22eb8:	str	r1, [r0, #20]
   22ebc:	cmp	r1, r3
   22ec0:	bhi	22f00 <flatcc_builder_table_add_offset@@Base+0xf0>
   22ec4:	ldr	r3, [r4, #4]
   22ec8:	uxth	r2, r8
   22ecc:	add	r1, r2, #4
   22ed0:	ldr	r0, [r4, #16]
   22ed4:	strh	r1, [r3, r7]
   22ed8:	ldrh	r3, [r4, #8]
   22edc:	add	r0, r0, r8
   22ee0:	cmp	r3, r5
   22ee4:	ldr	r3, [r4]
   22ee8:	addls	r1, r5, #1
   22eec:	strhls	r1, [r4, #8]
   22ef0:	add	r1, r3, #2
   22ef4:	str	r1, [r4]
   22ef8:	strh	r2, [r3]
   22efc:	pop	{r4, r5, r6, r7, r8, pc}
   22f00:	movw	r2, #65532	; 0xfffc
   22f04:	bl	205f4 <union_vector_tests@@Base+0x168>
   22f08:	cmp	r0, #0
   22f0c:	beq	22ec4 <flatcc_builder_table_add_offset@@Base+0xb4>
   22f10:	mov	r0, r6
   22f14:	pop	{r4, r5, r6, r7, r8, pc}
   22f18:	andeq	r2, r3, r9, lsr fp
   22f1c:	ldrdeq	r2, [r3], -r8
   22f20:	andeq	r2, r3, r7, ror lr
   22f24:	andeq	r2, r3, fp, lsl #30
   22f28:	andeq	r2, r3, r5, asr #24
   22f2c:			; <UNDEFINED> instruction: 0x9e3779b1

00022f30 <flatcc_builder_table_add_union@@Base>:
   22f30:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22f34:	add	ip, sp, #8
   22f38:	stmdb	ip, {r2, r3}
   22f3c:	ldr	r3, [r0, #32]
   22f40:	ldrb	r5, [sp]
   22f44:	ldr	r4, [sp, #4]
   22f48:	ldrh	r3, [r3, #14]
   22f4c:	cmp	r3, #3
   22f50:	beq	22f68 <flatcc_builder_table_add_union@@Base+0x38>
   22f54:	ldr	r3, [pc, #164]	; 23000 <flatcc_builder_table_add_union@@Base+0xd0>
   22f58:	movw	r2, #1518	; 0x5ee
   22f5c:	ldr	r1, [pc, #160]	; 23004 <flatcc_builder_table_add_union@@Base+0xd4>
   22f60:	ldr	r0, [pc, #160]	; 23008 <flatcc_builder_table_add_union@@Base+0xd8>
   22f64:	bl	14620 <__assert_fail@plt>
   22f68:	cmp	r5, #0
   22f6c:	mov	r6, r0
   22f70:	mov	r7, r1
   22f74:	bne	22f94 <flatcc_builder_table_add_union@@Base+0x64>
   22f78:	cmp	r4, #0
   22f7c:	beq	22fc0 <flatcc_builder_table_add_union@@Base+0x90>
   22f80:	ldr	r3, [pc, #120]	; 23000 <flatcc_builder_table_add_union@@Base+0xd0>
   22f84:	movw	r2, #1519	; 0x5ef
   22f88:	ldr	r1, [pc, #116]	; 23004 <flatcc_builder_table_add_union@@Base+0xd4>
   22f8c:	ldr	r0, [pc, #120]	; 2300c <flatcc_builder_table_add_union@@Base+0xdc>
   22f90:	b	22f64 <flatcc_builder_table_add_union@@Base+0x34>
   22f94:	cmp	r4, #0
   22f98:	beq	22fc0 <flatcc_builder_table_add_union@@Base+0x90>
   22f9c:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   22fa0:	cmp	r0, #0
   22fa4:	strne	r4, [r0]
   22fa8:	bne	22fc0 <flatcc_builder_table_add_union@@Base+0x90>
   22fac:	ldr	r3, [pc, #76]	; 23000 <flatcc_builder_table_add_union@@Base+0xd0>
   22fb0:	movw	r2, #1522	; 0x5f2
   22fb4:	ldr	r1, [pc, #72]	; 23004 <flatcc_builder_table_add_union@@Base+0xd4>
   22fb8:	ldr	r0, [pc, #80]	; 23010 <flatcc_builder_table_add_union@@Base+0xe0>
   22fbc:	b	22f64 <flatcc_builder_table_add_union@@Base+0x34>
   22fc0:	mov	r3, #1
   22fc4:	sub	r1, r7, #1
   22fc8:	mov	r2, r3
   22fcc:	mov	r0, r6
   22fd0:	bl	22c6c <flatcc_builder_table_add@@Base>
   22fd4:	cmp	r0, #0
   22fd8:	bne	22ff0 <flatcc_builder_table_add_union@@Base+0xc0>
   22fdc:	ldr	r3, [pc, #28]	; 23000 <flatcc_builder_table_add_union@@Base+0xd0>
   22fe0:	movw	r2, #1526	; 0x5f6
   22fe4:	ldr	r1, [pc, #24]	; 23004 <flatcc_builder_table_add_union@@Base+0xd4>
   22fe8:	ldr	r0, [pc, #36]	; 23014 <flatcc_builder_table_add_union@@Base+0xe4>
   22fec:	b	22f64 <flatcc_builder_table_add_union@@Base+0x34>
   22ff0:	strb	r5, [r0]
   22ff4:	mov	r0, #0
   22ff8:	add	sp, sp, #12
   22ffc:	pop	{r4, r5, r6, r7, pc}
   23000:	andeq	r2, r3, r9, asr fp
   23004:	ldrdeq	r2, [r3], -r8
   23008:	andeq	r2, r3, r7, ror lr
   2300c:	andeq	r2, r3, pc, asr #30
   23010:	andeq	r2, r3, r1, ror pc
   23014:	andeq	r2, r3, fp, ror pc

00023018 <flatcc_builder_table_add_union_vector@@Base>:
   23018:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2301c:	mov	r7, r1
   23020:	add	r1, sp, #8
   23024:	stmdb	r1, {r2, r3}
   23028:	ldr	r3, [r0, #32]
   2302c:	ldrd	r4, [sp]
   23030:	ldrh	r3, [r3, #14]
   23034:	cmp	r3, #3
   23038:	beq	23050 <flatcc_builder_table_add_union_vector@@Base+0x38>
   2303c:	ldr	r3, [pc, #176]	; 230f4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   23040:	mov	r2, #1536	; 0x600
   23044:	ldr	r1, [pc, #172]	; 230f8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   23048:	ldr	r0, [pc, #172]	; 230fc <flatcc_builder_table_add_union_vector@@Base+0xe4>
   2304c:	bl	14620 <__assert_fail@plt>
   23050:	clz	r3, r5
   23054:	clz	r2, r4
   23058:	lsr	r3, r3, #5
   2305c:	lsr	r2, r2, #5
   23060:	cmp	r2, r3
   23064:	beq	23090 <flatcc_builder_table_add_union_vector@@Base+0x78>
   23068:	adds	r4, r4, #0
   2306c:	movne	r4, #1
   23070:	cmp	r4, r3
   23074:	mvnne	r4, #0
   23078:	bne	230e8 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   2307c:	ldr	r3, [pc, #112]	; 230f4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   23080:	movw	r2, #1537	; 0x601
   23084:	ldr	r1, [pc, #108]	; 230f8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   23088:	ldr	r0, [pc, #112]	; 23100 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   2308c:	b	2304c <flatcc_builder_table_add_union_vector@@Base+0x34>
   23090:	cmp	r4, #0
   23094:	beq	230e8 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   23098:	sub	r1, r7, #1
   2309c:	mov	r6, r0
   230a0:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   230a4:	cmp	r0, #0
   230a8:	ldreq	r3, [pc, #68]	; 230f4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   230ac:	movweq	r2, #1540	; 0x604
   230b0:	beq	230dc <flatcc_builder_table_add_union_vector@@Base+0xc4>
   230b4:	mov	r1, r7
   230b8:	str	r4, [r0]
   230bc:	mov	r0, r6
   230c0:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   230c4:	cmp	r0, #0
   230c8:	movne	r4, #0
   230cc:	strne	r5, [r0]
   230d0:	bne	230e8 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   230d4:	ldr	r3, [pc, #24]	; 230f4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   230d8:	movw	r2, #1544	; 0x608
   230dc:	ldr	r1, [pc, #20]	; 230f8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   230e0:	ldr	r0, [pc, #28]	; 23104 <flatcc_builder_table_add_union_vector@@Base+0xec>
   230e4:	b	2304c <flatcc_builder_table_add_union_vector@@Base+0x34>
   230e8:	mov	r0, r4
   230ec:	add	sp, sp, #12
   230f0:	pop	{r4, r5, r6, r7, pc}
   230f4:	andeq	r2, r3, r8, ror fp
   230f8:	ldrdeq	r2, [r3], -r8
   230fc:	andeq	r2, r3, r7, ror lr
   23100:	andeq	r2, r3, r7, lsl #31
   23104:	andeq	r2, r3, r1, ror pc

00023108 <flatcc_builder_push_buffer_alignment@@Base>:
   23108:	mov	r3, r0
   2310c:	mov	r2, #4
   23110:	ldrh	r0, [r0, #128]	; 0x80
   23114:	strh	r2, [r3, #128]	; 0x80
   23118:	bx	lr

0002311c <flatcc_builder_pop_buffer_alignment@@Base>:
   2311c:	ldrh	r3, [r0, #128]	; 0x80
   23120:	cmp	r3, r1
   23124:	strhcc	r1, [r0, #128]	; 0x80
   23128:	bx	lr

0002312c <flatcc_builder_get_buffer_alignment@@Base>:
   2312c:	ldrh	r0, [r0, #128]	; 0x80
   23130:	bx	lr

00023134 <flatcc_builder_set_vtable_clustering@@Base>:
   23134:	clz	r1, r1
   23138:	lsr	r1, r1, #5
   2313c:	str	r1, [r0, #180]	; 0xb4
   23140:	bx	lr

00023144 <flatcc_builder_set_block_align@@Base>:
   23144:	strh	r1, [r0, #132]	; 0x84
   23148:	bx	lr

0002314c <flatcc_builder_get_level@@Base>:
   2314c:	ldr	r0, [r0, #156]	; 0x9c
   23150:	bx	lr

00023154 <flatcc_builder_set_max_level@@Base>:
   23154:	ldr	r3, [r0, #160]	; 0xa0
   23158:	str	r1, [r0, #176]	; 0xb0
   2315c:	cmp	r3, r1
   23160:	strlt	r1, [r0, #160]	; 0xa0
   23164:	bx	lr

00023168 <flatcc_builder_get_buffer_size@@Base>:
   23168:	ldr	r2, [r0, #140]	; 0x8c
   2316c:	ldr	r0, [r0, #136]	; 0x88
   23170:	sub	r0, r2, r0
   23174:	bx	lr

00023178 <flatcc_builder_get_buffer_start@@Base>:
   23178:	ldr	r0, [r0, #136]	; 0x88
   2317c:	bx	lr

00023180 <flatcc_builder_get_buffer_end@@Base>:
   23180:	ldr	r0, [r0, #140]	; 0x8c
   23184:	bx	lr

00023188 <flatcc_builder_set_vtable_cache_limit@@Base>:
   23188:	str	r1, [r0, #172]	; 0xac
   2318c:	bx	lr

00023190 <flatcc_builder_set_identifier@@Base>:
   23190:	ldr	r3, [pc, #16]	; 231a8 <flatcc_builder_set_identifier@@Base+0x18>
   23194:	cmp	r1, #0
   23198:	moveq	r1, r3
   2319c:	ldr	r3, [r1]
   231a0:	str	r3, [r0, #168]	; 0xa8
   231a4:	bx	lr
   231a8:	strdeq	r2, [r3], -r2	; <UNPREDICTABLE>

000231ac <flatcc_builder_get_type@@Base>:
   231ac:	ldr	r0, [r0, #32]
   231b0:	cmp	r0, #0
   231b4:	ldrhne	r0, [r0, #14]
   231b8:	bx	lr

000231bc <flatcc_builder_get_type_at@@Base>:
   231bc:	cmp	r1, #0
   231c0:	ble	231e8 <flatcc_builder_get_type_at@@Base+0x2c>
   231c4:	ldr	r3, [r0, #156]	; 0x9c
   231c8:	cmp	r3, r1
   231cc:	blt	231e8 <flatcc_builder_get_type_at@@Base+0x2c>
   231d0:	sub	r1, r1, r3
   231d4:	ldr	r3, [r0, #32]
   231d8:	mov	r2, #36	; 0x24
   231dc:	mla	r1, r2, r1, r3
   231e0:	ldrh	r0, [r1, #14]
   231e4:	bx	lr
   231e8:	mov	r0, #0
   231ec:	bx	lr

000231f0 <flatcc_builder_get_direct_buffer@@Base>:
   231f0:	ldr	r3, [r0, #184]	; 0xb8
   231f4:	cmp	r3, #0
   231f8:	beq	23220 <flatcc_builder_get_direct_buffer@@Base+0x30>
   231fc:	ldrd	r2, [r0, #188]	; 0xbc
   23200:	cmp	r2, r3
   23204:	bne	23220 <flatcc_builder_get_direct_buffer@@Base+0x30>
   23208:	cmp	r1, #0
   2320c:	ldrne	r3, [r0, #212]	; 0xd4
   23210:	strne	r3, [r1]
   23214:	ldr	r1, [r0, #196]	; 0xc4
   23218:	mov	r0, r1
   2321c:	bx	lr
   23220:	cmp	r1, #0
   23224:	movne	r3, #0
   23228:	strne	r3, [r1]
   2322c:	movne	r1, r3
   23230:	b	23218 <flatcc_builder_get_direct_buffer@@Base+0x28>

00023234 <flatcc_builder_copy_buffer@@Base>:
   23234:	ldr	r3, [r0, #184]	; 0xb8
   23238:	cmp	r3, #0
   2323c:	beq	23268 <flatcc_builder_copy_buffer@@Base+0x34>
   23240:	push	{r4, lr}
   23244:	add	r0, r0, #188	; 0xbc
   23248:	bl	237dc <flatcc_emitter_copy_buffer@@Base>
   2324c:	cmp	r0, #0
   23250:	popne	{r4, pc}
   23254:	ldr	r3, [pc, #20]	; 23270 <flatcc_builder_copy_buffer@@Base+0x3c>
   23258:	movw	r2, #1926	; 0x786
   2325c:	ldr	r1, [pc, #16]	; 23274 <flatcc_builder_copy_buffer@@Base+0x40>
   23260:	ldr	r0, [pc, #16]	; 23278 <flatcc_builder_copy_buffer@@Base+0x44>
   23264:	bl	14620 <__assert_fail@plt>
   23268:	mov	r0, r3
   2326c:	bx	lr
   23270:	muleq	r3, lr, fp
   23274:	ldrdeq	r2, [r3], -r8
   23278:	andeq	lr, r2, r4, lsl lr

0002327c <flatcc_builder_finalize_buffer@@Base>:
   2327c:	push	{r4, r5, r6, lr}
   23280:	cmp	r1, #0
   23284:	mov	r5, r0
   23288:	ldr	r2, [r0, #136]	; 0x88
   2328c:	ldr	r4, [r0, #140]	; 0x8c
   23290:	sub	r4, r4, r2
   23294:	mov	r0, r4
   23298:	strne	r4, [r1]
   2329c:	bl	14578 <malloc@plt>
   232a0:	subs	r6, r0, #0
   232a4:	ldreq	r3, [pc, #56]	; 232e4 <flatcc_builder_finalize_buffer@@Base+0x68>
   232a8:	movweq	r2, #1944	; 0x798
   232ac:	beq	232d0 <flatcc_builder_finalize_buffer@@Base+0x54>
   232b0:	mov	r2, r4
   232b4:	mov	r1, r6
   232b8:	mov	r0, r5
   232bc:	bl	23234 <flatcc_builder_copy_buffer@@Base>
   232c0:	cmp	r0, #0
   232c4:	bne	232dc <flatcc_builder_finalize_buffer@@Base+0x60>
   232c8:	ldr	r3, [pc, #20]	; 232e4 <flatcc_builder_finalize_buffer@@Base+0x68>
   232cc:	movw	r2, #1948	; 0x79c
   232d0:	ldr	r1, [pc, #16]	; 232e8 <flatcc_builder_finalize_buffer@@Base+0x6c>
   232d4:	ldr	r0, [pc, #16]	; 232ec <flatcc_builder_finalize_buffer@@Base+0x70>
   232d8:	bl	14620 <__assert_fail@plt>
   232dc:	mov	r0, r6
   232e0:	pop	{r4, r5, r6, pc}
   232e4:			; <UNDEFINED> instruction: 0x00032bb9
   232e8:	ldrdeq	r2, [r3], -r8
   232ec:	andeq	r2, r3, r5, asr #24

000232f0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   232f0:	push	{r4, r5, r6, r7, r8, lr}
   232f4:	mov	r6, r0
   232f8:	subs	r7, r1, #0
   232fc:	ldr	r2, [r0, #136]	; 0x88
   23300:	ldr	r4, [r0, #140]	; 0x8c
   23304:	ldrh	r0, [r0, #128]	; 0x80
   23308:	sub	r2, r4, r2
   2330c:	sub	r4, r0, #1
   23310:	strne	r2, [r7]
   23314:	add	r4, r4, r2
   23318:	rsb	r2, r0, #0
   2331c:	and	r4, r4, r2
   23320:	mov	r1, r4
   23324:	bl	20744 <union_vector_tests@@Base+0x2b8>
   23328:	subs	r5, r0, #0
   2332c:	beq	23354 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   23330:	mov	r2, r4
   23334:	mov	r1, r5
   23338:	mov	r0, r6
   2333c:	bl	23234 <flatcc_builder_copy_buffer@@Base>
   23340:	subs	r4, r0, #0
   23344:	bne	23354 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   23348:	mov	r0, r5
   2334c:	mov	r5, r4
   23350:	bl	1453c <free@plt>
   23354:	adds	r3, r7, #0
   23358:	mov	r0, r5
   2335c:	movne	r3, #1
   23360:	cmp	r5, #0
   23364:	movne	r3, #0
   23368:	cmp	r3, #0
   2336c:	movne	r3, #0
   23370:	strne	r3, [r7]
   23374:	pop	{r4, r5, r6, r7, r8, pc}

00023378 <flatcc_builder_aligned_alloc@@Base>:
   23378:	b	20744 <union_vector_tests@@Base+0x2b8>

0002337c <flatcc_builder_aligned_free@@Base>:
   2337c:	b	1453c <free@plt>

00023380 <flatcc_builder_get_emit_context@@Base>:
   23380:	ldr	r0, [r0, #36]	; 0x24
   23384:	bx	lr

00023388 <flatcc_emitter_recycle_page@@Base>:
   23388:	ldr	r3, [r0]
   2338c:	cmp	r3, r1
   23390:	beq	233d0 <flatcc_emitter_recycle_page@@Base+0x48>
   23394:	ldr	r2, [r0, #4]
   23398:	cmp	r2, r1
   2339c:	beq	233d0 <flatcc_emitter_recycle_page@@Base+0x48>
   233a0:	ldr	r0, [r1, #2944]	; 0xb80
   233a4:	ldr	r2, [r1, #2948]	; 0xb84
   233a8:	str	r2, [r0, #2948]	; 0xb84
   233ac:	str	r0, [r2, #2944]	; 0xb80
   233b0:	mov	r0, #0
   233b4:	ldr	r2, [r3, #2948]	; 0xb84
   233b8:	str	r3, [r1, #2944]	; 0xb80
   233bc:	str	r2, [r1, #2948]	; 0xb84
   233c0:	str	r1, [r2, #2944]	; 0xb80
   233c4:	ldr	r3, [r1, #2944]	; 0xb80
   233c8:	str	r1, [r3, #2948]	; 0xb84
   233cc:	bx	lr
   233d0:	mvn	r0, #0
   233d4:	bx	lr

000233d8 <flatcc_emitter_reset@@Base>:
   233d8:	ldr	r3, [r0]
   233dc:	cmp	r3, #0
   233e0:	bxeq	lr
   233e4:	add	r2, r3, #1472	; 0x5c0
   233e8:	push	{r4, lr}
   233ec:	mov	r4, r0
   233f0:	str	r3, [r0, #4]
   233f4:	str	r2, [r0, #8]
   233f8:	str	r2, [r0, #16]
   233fc:	mov	r2, #1472	; 0x5c0
   23400:	str	r2, [r0, #12]
   23404:	str	r2, [r0, #20]
   23408:	sub	r2, r2, #2944	; 0xb80
   2340c:	str	r2, [r3, #2952]	; 0xb88
   23410:	ldr	r3, [r0, #24]
   23414:	ldr	r2, [r0, #32]
   23418:	cmp	r2, #0
   2341c:	streq	r3, [r0, #32]
   23420:	lsr	r3, r3, #2
   23424:	ldr	r2, [r0, #32]
   23428:	add	r2, r2, r2, lsl #1
   2342c:	add	r3, r3, r2, lsr #2
   23430:	str	r3, [r0, #32]
   23434:	mov	r3, #0
   23438:	str	r3, [r0, #24]
   2343c:	ldr	r3, [r4, #28]
   23440:	ldr	r2, [r4, #32]
   23444:	cmp	r3, r2, lsl #1
   23448:	popls	{r4, pc}
   2344c:	ldrd	r2, [r4]
   23450:	ldr	r0, [r3, #2944]	; 0xb80
   23454:	cmp	r0, r2
   23458:	popeq	{r4, pc}
   2345c:	ldr	r2, [r0, #2944]	; 0xb80
   23460:	str	r2, [r3, #2944]	; 0xb80
   23464:	ldr	r2, [r0, #2944]	; 0xb80
   23468:	str	r3, [r2, #2948]	; 0xb84
   2346c:	bl	1453c <free@plt>
   23470:	ldr	r3, [r4, #28]
   23474:	sub	r3, r3, #2944	; 0xb80
   23478:	str	r3, [r4, #28]
   2347c:	b	2343c <flatcc_emitter_reset@@Base+0x64>

00023480 <flatcc_emitter_clear@@Base>:
   23480:	ldr	r3, [r0]
   23484:	cmp	r3, #0
   23488:	bxeq	lr
   2348c:	push	{r4, r5, r6, lr}
   23490:	mov	r1, #0
   23494:	mov	r4, r0
   23498:	ldr	r2, [r3, #2948]	; 0xb84
   2349c:	str	r1, [r2, #2944]	; 0xb80
   234a0:	ldr	r5, [r3, #2944]	; 0xb80
   234a4:	cmp	r5, #0
   234a8:	bne	234c8 <flatcc_emitter_clear@@Base+0x48>
   234ac:	mov	r0, r3
   234b0:	bl	1453c <free@plt>
   234b4:	mov	r1, r5
   234b8:	mov	r0, r4
   234bc:	pop	{r4, r5, r6, lr}
   234c0:	mov	r2, #36	; 0x24
   234c4:	b	145c0 <memset@plt>
   234c8:	ldr	r0, [r5, #2948]	; 0xb84
   234cc:	bl	1453c <free@plt>
   234d0:	mov	r3, r5
   234d4:	b	234a0 <flatcc_emitter_clear@@Base+0x20>

000234d8 <flatcc_emitter@@Base>:
   234d8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234dc:	mov	r4, r0
   234e0:	mov	r6, r2
   234e4:	cmp	r3, #0
   234e8:	ldr	r0, [r0, #24]
   234ec:	ldr	r2, [sp, #40]	; 0x28
   234f0:	add	r0, r0, r2
   234f4:	str	r0, [r4, #24]
   234f8:	bge	23690 <flatcc_emitter@@Base+0x1b8>
   234fc:	ldr	r0, [r4, #12]
   23500:	cmp	r0, r2
   23504:	bcc	23548 <flatcc_emitter@@Base+0x70>
   23508:	ldr	r3, [r4, #8]
   2350c:	sub	r3, r3, r2
   23510:	sub	r2, r0, r2
   23514:	str	r3, [r4, #8]
   23518:	str	r2, [r4, #12]
   2351c:	mov	r4, r1
   23520:	sub	r6, r6, #1
   23524:	add	r4, r4, #8
   23528:	cmn	r6, #1
   2352c:	beq	2355c <flatcc_emitter@@Base+0x84>
   23530:	mov	r0, r3
   23534:	ldmdb	r4, {r1, r2}
   23538:	bl	14548 <memcpy@plt>
   2353c:	ldr	r2, [r4, #-4]
   23540:	add	r3, r0, r2
   23544:	b	23520 <flatcc_emitter@@Base+0x48>
   23548:	ldr	r9, [pc, #648]	; 237d8 <flatcc_emitter@@Base+0x300>
   2354c:	add	r5, r1, r6, lsl #3
   23550:	mov	r8, #2944	; 0xb80
   23554:	cmp	r6, #0
   23558:	bne	23564 <flatcc_emitter@@Base+0x8c>
   2355c:	mov	r0, #0
   23560:	b	235fc <flatcc_emitter@@Base+0x124>
   23564:	ldr	sl, [r5, #-8]
   23568:	ldr	r7, [r5, #-4]
   2356c:	add	sl, sl, r7
   23570:	cmp	r7, #0
   23574:	subeq	r5, r5, #8
   23578:	subeq	r6, r6, #1
   2357c:	beq	23554 <flatcc_emitter@@Base+0x7c>
   23580:	ldr	r3, [r4, #12]
   23584:	cmp	r3, r7
   23588:	bcs	23660 <flatcc_emitter@@Base+0x188>
   2358c:	cmp	r3, #0
   23590:	movne	r2, r3
   23594:	bne	23664 <flatcc_emitter@@Base+0x18c>
   23598:	ldr	fp, [r4]
   2359c:	cmp	fp, #0
   235a0:	beq	235e8 <flatcc_emitter@@Base+0x110>
   235a4:	ldr	r2, [r4, #4]
   235a8:	ldr	r3, [fp, #2948]	; 0xb84
   235ac:	cmp	r3, r2
   235b0:	beq	235e8 <flatcc_emitter@@Base+0x110>
   235b4:	ldr	r2, [fp, #2952]	; 0xb88
   235b8:	sub	r2, r2, #2944	; 0xb80
   235bc:	str	r2, [r3, #2952]	; 0xb88
   235c0:	str	r3, [r4]
   235c4:	ldr	r3, [r4]
   235c8:	str	r8, [r4, #12]
   235cc:	add	r2, r3, #2944	; 0xb80
   235d0:	str	r2, [r4, #8]
   235d4:	ldr	r2, [r3, #2944]	; 0xb80
   235d8:	ldr	r2, [r2, #2952]	; 0xb88
   235dc:	sub	r2, r2, #2944	; 0xb80
   235e0:	str	r2, [r3, #2952]	; 0xb88
   235e4:	b	23570 <flatcc_emitter@@Base+0x98>
   235e8:	movw	r0, #2956	; 0xb8c
   235ec:	bl	14578 <malloc@plt>
   235f0:	cmp	r0, #0
   235f4:	bne	23604 <flatcc_emitter@@Base+0x12c>
   235f8:	mvn	r0, #0
   235fc:	add	sp, sp, #4
   23600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23604:	ldr	r3, [r4, #28]
   23608:	cmp	fp, #0
   2360c:	add	r3, r3, #2944	; 0xb80
   23610:	str	r3, [r4, #28]
   23614:	beq	23634 <flatcc_emitter@@Base+0x15c>
   23618:	ldr	r3, [r4, #4]
   2361c:	str	fp, [r0, #2944]	; 0xb80
   23620:	str	r3, [r0, #2948]	; 0xb84
   23624:	str	r0, [fp, #2948]	; 0xb84
   23628:	str	r0, [r3, #2944]	; 0xb80
   2362c:	str	r0, [r4]
   23630:	b	235c4 <flatcc_emitter@@Base+0xec>
   23634:	add	r3, r0, #1472	; 0x5c0
   23638:	str	r0, [r4]
   2363c:	str	r0, [r0, #2944]	; 0xb80
   23640:	stmib	r4, {r0, r3}
   23644:	str	r3, [r4, #16]
   23648:	mov	r3, #1472	; 0x5c0
   2364c:	str	r0, [r0, #2948]	; 0xb84
   23650:	str	r3, [r4, #12]
   23654:	str	r3, [r4, #20]
   23658:	str	r9, [r0, #2952]	; 0xb88
   2365c:	b	23570 <flatcc_emitter@@Base+0x98>
   23660:	mov	r2, r7
   23664:	ldr	r0, [r4, #8]
   23668:	rsb	r1, r2, #0
   2366c:	sub	r3, r3, r2
   23670:	add	sl, sl, r1
   23674:	sub	r7, r7, r2
   23678:	str	r3, [r4, #12]
   2367c:	add	r0, r0, r1
   23680:	mov	r1, sl
   23684:	str	r0, [r4, #8]
   23688:	bl	14548 <memcpy@plt>
   2368c:	b	23570 <flatcc_emitter@@Base+0x98>
   23690:	ldr	r0, [r4, #20]
   23694:	cmp	r0, r2
   23698:	bcs	236cc <flatcc_emitter@@Base+0x1f4>
   2369c:	ldr	sl, [pc, #308]	; 237d8 <flatcc_emitter@@Base+0x300>
   236a0:	add	r5, r1, #8
   236a4:	mov	r9, #2944	; 0xb80
   236a8:	cmp	r6, #0
   236ac:	beq	2355c <flatcc_emitter@@Base+0x84>
   236b0:	ldr	fp, [r5, #-8]
   236b4:	ldr	r8, [r5, #-4]
   236b8:	cmp	r8, #0
   236bc:	bne	236e4 <flatcc_emitter@@Base+0x20c>
   236c0:	sub	r6, r6, #1
   236c4:	add	r5, r5, #8
   236c8:	b	236a8 <flatcc_emitter@@Base+0x1d0>
   236cc:	ldr	r3, [r4, #16]
   236d0:	add	ip, r3, r2
   236d4:	sub	r2, r0, r2
   236d8:	str	ip, [r4, #16]
   236dc:	str	r2, [r4, #20]
   236e0:	b	2351c <flatcc_emitter@@Base+0x44>
   236e4:	ldr	r7, [r4, #20]
   236e8:	cmp	r7, r8
   236ec:	bcs	237a0 <flatcc_emitter@@Base+0x2c8>
   236f0:	cmp	r7, #0
   236f4:	bne	237a4 <flatcc_emitter@@Base+0x2cc>
   236f8:	ldr	r7, [r4, #4]
   236fc:	cmp	r7, #0
   23700:	beq	23718 <flatcc_emitter@@Base+0x240>
   23704:	ldr	r2, [r4]
   23708:	ldr	r3, [r7, #2944]	; 0xb80
   2370c:	cmp	r3, r2
   23710:	strne	r3, [r4, #4]
   23714:	bne	23754 <flatcc_emitter@@Base+0x27c>
   23718:	movw	r0, #2956	; 0xb8c
   2371c:	bl	14578 <malloc@plt>
   23720:	cmp	r0, #0
   23724:	beq	235f8 <flatcc_emitter@@Base+0x120>
   23728:	ldr	r3, [r4, #28]
   2372c:	cmp	r7, #0
   23730:	add	r3, r3, #2944	; 0xb80
   23734:	str	r3, [r4, #28]
   23738:	beq	23774 <flatcc_emitter@@Base+0x29c>
   2373c:	ldr	r3, [r4]
   23740:	str	r3, [r0, #2944]	; 0xb80
   23744:	str	r7, [r0, #2948]	; 0xb84
   23748:	str	r0, [r3, #2948]	; 0xb84
   2374c:	str	r0, [r7, #2944]	; 0xb80
   23750:	str	r0, [r4, #4]
   23754:	ldr	r3, [r4, #4]
   23758:	ldr	r2, [r3, #2948]	; 0xb84
   2375c:	ldr	r2, [r2, #2952]	; 0xb88
   23760:	str	r3, [r4, #16]
   23764:	str	r9, [r4, #20]
   23768:	add	r2, r2, #2944	; 0xb80
   2376c:	str	r2, [r3, #2952]	; 0xb88
   23770:	b	236b8 <flatcc_emitter@@Base+0x1e0>
   23774:	add	r3, r0, #1472	; 0x5c0
   23778:	str	r0, [r4]
   2377c:	str	r0, [r0, #2944]	; 0xb80
   23780:	stmib	r4, {r0, r3}
   23784:	str	r3, [r4, #16]
   23788:	mov	r3, #1472	; 0x5c0
   2378c:	str	r0, [r0, #2948]	; 0xb84
   23790:	str	r3, [r4, #12]
   23794:	str	r3, [r4, #20]
   23798:	str	sl, [r0, #2952]	; 0xb88
   2379c:	b	236b8 <flatcc_emitter@@Base+0x1e0>
   237a0:	mov	r7, r8
   237a4:	mov	r2, r7
   237a8:	mov	r1, fp
   237ac:	ldr	r0, [r4, #16]
   237b0:	bl	14548 <memcpy@plt>
   237b4:	ldr	r3, [r4, #16]
   237b8:	sub	r8, r8, r7
   237bc:	add	fp, fp, r7
   237c0:	add	r3, r3, r7
   237c4:	str	r3, [r4, #16]
   237c8:	ldr	r3, [r4, #20]
   237cc:	sub	r7, r3, r7
   237d0:	str	r7, [r4, #20]
   237d4:	b	236b8 <flatcc_emitter@@Base+0x1e0>
   237d8:			; <UNDEFINED> instruction: 0xfffffa40

000237dc <flatcc_emitter_copy_buffer@@Base>:
   237dc:	ldr	ip, [r0, #24]
   237e0:	push	{r4, r5, r6, lr}
   237e4:	cmp	ip, r2
   237e8:	movhi	r6, #0
   237ec:	bhi	23824 <flatcc_emitter_copy_buffer@@Base+0x48>
   237f0:	ldr	r6, [r0]
   237f4:	cmp	r6, #0
   237f8:	beq	23824 <flatcc_emitter_copy_buffer@@Base+0x48>
   237fc:	ldr	r2, [r0, #4]
   23800:	mov	r5, r1
   23804:	mov	r4, r0
   23808:	ldr	r1, [r0, #8]
   2380c:	cmp	r6, r2
   23810:	bne	2382c <flatcc_emitter_copy_buffer@@Base+0x50>
   23814:	mov	r2, ip
   23818:	mov	r0, r5
   2381c:	mov	r6, r5
   23820:	bl	14548 <memcpy@plt>
   23824:	mov	r0, r6
   23828:	pop	{r4, r5, r6, pc}
   2382c:	ldr	r3, [r4, #12]
   23830:	mov	r0, r5
   23834:	rsb	r6, r3, #2944	; 0xb80
   23838:	mov	r2, r6
   2383c:	add	r6, r5, r6
   23840:	bl	14548 <memcpy@plt>
   23844:	ldr	r2, [r4]
   23848:	ldr	r5, [r2, #2944]	; 0xb80
   2384c:	ldr	r2, [r4, #4]
   23850:	cmp	r2, r5
   23854:	bne	23870 <flatcc_emitter_copy_buffer@@Base+0x94>
   23858:	ldr	r2, [r4, #20]
   2385c:	mov	r1, r5
   23860:	mov	r0, r6
   23864:	rsb	r2, r2, #2944	; 0xb80
   23868:	bl	14548 <memcpy@plt>
   2386c:	b	23824 <flatcc_emitter_copy_buffer@@Base+0x48>
   23870:	mov	r1, r5
   23874:	mov	r0, r6
   23878:	mov	r2, #2944	; 0xb80
   2387c:	add	r6, r6, #2944	; 0xb80
   23880:	bl	14548 <memcpy@plt>
   23884:	ldr	r5, [r5, #2944]	; 0xb80
   23888:	b	2384c <flatcc_emitter_copy_buffer@@Base+0x70>
   2388c:	cmp	r2, #0
   23890:	beq	238d8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   23894:	add	r1, r2, r1
   23898:	cmp	r1, r0
   2389c:	bhi	238d8 <flatcc_emitter_copy_buffer@@Base+0xfc>
   238a0:	adds	r3, r1, r3
   238a4:	bcs	238b8 <flatcc_emitter_copy_buffer@@Base+0xdc>
   238a8:	cmp	r3, r0
   238ac:	bls	238c0 <flatcc_emitter_copy_buffer@@Base+0xe4>
   238b0:	mov	r0, #9
   238b4:	bx	lr
   238b8:	mov	r0, #10
   238bc:	bx	lr
   238c0:	ldrh	r3, [sp]
   238c4:	sub	r3, r3, #1
   238c8:	tst	r3, r1
   238cc:	moveq	r0, #0
   238d0:	movne	r0, #11
   238d4:	bx	lr
   238d8:	mov	r0, #18
   238dc:	bx	lr
   238e0:	ldrh	r3, [r0, #22]
   238e4:	add	r1, r1, #2
   238e8:	lsl	r1, r1, #1
   238ec:	uxth	r1, r1
   238f0:	cmp	r3, r1
   238f4:	ldrhi	r3, [r0, #12]
   238f8:	ldrhhi	r0, [r3, r1]
   238fc:	movls	r0, #0
   23900:	bx	lr
   23904:	push	{r4, lr}
   23908:	mov	r2, r0
   2390c:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   23910:	uxth	r3, r0
   23914:	cmp	r3, #0
   23918:	ldrne	r3, [r2, #16]
   2391c:	uxtahne	r0, r3, r0
   23920:	ldrne	r3, [r2]
   23924:	addne	r0, r3, r0
   23928:	moveq	r0, r3
   2392c:	pop	{r4, pc}
   23930:	push	{r4, r5, r6, lr}
   23934:	mov	r4, r3
   23938:	mov	r5, r0
   2393c:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   23940:	uxth	r3, r0
   23944:	cmp	r3, #0
   23948:	bne	23960 <flatcc_emitter_copy_buffer@@Base+0x184>
   2394c:	cmp	r2, #0
   23950:	str	r3, [r4]
   23954:	movne	r2, #4
   23958:	mov	r0, r2
   2395c:	pop	{r4, r5, r6, pc}
   23960:	ldrh	r2, [r5, #20]
   23964:	uxth	r0, r0
   23968:	add	r3, r0, #4
   2396c:	cmp	r2, r3
   23970:	movcc	r2, #13
   23974:	bcc	23958 <flatcc_emitter_copy_buffer@@Base+0x17c>
   23978:	ldr	r3, [r5, #16]
   2397c:	add	r0, r0, r3
   23980:	ands	r2, r0, #3
   23984:	movne	r2, #12
   23988:	streq	r0, [r4]
   2398c:	b	23958 <flatcc_emitter_copy_buffer@@Base+0x17c>
   23990:	add	r3, r2, r3
   23994:	ldrh	ip, [sp, #4]
   23998:	cmp	r2, r3
   2399c:	bcs	239f0 <flatcc_emitter_copy_buffer@@Base+0x214>
   239a0:	add	r2, r3, #4
   239a4:	cmp	r1, r2
   239a8:	bcc	239f0 <flatcc_emitter_copy_buffer@@Base+0x214>
   239ac:	cmp	ip, #4
   239b0:	movcc	ip, #4
   239b4:	sub	ip, ip, #1
   239b8:	orr	ip, ip, #3
   239bc:	tst	ip, r2
   239c0:	bne	239f0 <flatcc_emitter_copy_buffer@@Base+0x214>
   239c4:	ldr	r3, [r0, r3]
   239c8:	ldr	r0, [sp, #8]
   239cc:	cmp	r3, r0
   239d0:	bhi	239f8 <flatcc_emitter_copy_buffer@@Base+0x21c>
   239d4:	ldr	r0, [sp]
   239d8:	sub	r1, r1, r2
   239dc:	mul	r0, r0, r3
   239e0:	cmp	r1, r0
   239e4:	movcc	r0, #26
   239e8:	movcs	r0, #0
   239ec:	bx	lr
   239f0:	mov	r0, #16
   239f4:	bx	lr
   239f8:	mov	r0, #25
   239fc:	bx	lr
   23a00:	push	{r4, lr}
   23a04:	sub	sp, sp, #24
   23a08:	ldr	ip, [sp, #32]
   23a0c:	sub	ip, ip, #1
   23a10:	cmp	ip, #0
   23a14:	moveq	r0, #3
   23a18:	str	ip, [sp, #8]
   23a1c:	beq	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23a20:	add	r3, r2, r3
   23a24:	cmp	r2, r3
   23a28:	bcs	23ac8 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   23a2c:	add	r2, r3, #4
   23a30:	cmp	r1, r2
   23a34:	bcc	23ac8 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   23a38:	tst	r3, #3
   23a3c:	bne	23ac8 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   23a40:	ldr	r2, [r0, r3]
   23a44:	str	r3, [sp, #16]
   23a48:	subs	r2, r3, r2
   23a4c:	bmi	23ad0 <flatcc_emitter_copy_buffer@@Base+0x2f4>
   23a50:	tst	r2, #1
   23a54:	bne	23ad0 <flatcc_emitter_copy_buffer@@Base+0x2f4>
   23a58:	add	lr, r2, #2
   23a5c:	cmp	lr, r1
   23a60:	movhi	r0, #27
   23a64:	bhi	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23a68:	ldrh	ip, [r0, r2]
   23a6c:	add	r4, r0, r2
   23a70:	add	r2, ip, r2
   23a74:	strh	ip, [sp, #22]
   23a78:	cmp	r1, r2
   23a7c:	bcc	23ad8 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   23a80:	tst	ip, #1
   23a84:	bne	23ad8 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   23a88:	cmp	ip, #3
   23a8c:	movls	r0, #28
   23a90:	bls	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23a94:	ldrh	r2, [r0, lr]
   23a98:	sub	r3, r1, r3
   23a9c:	cmp	r3, r2
   23aa0:	strh	r2, [sp, #20]
   23aa4:	movcc	r0, #20
   23aa8:	bcc	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23aac:	strd	r0, [sp]
   23ab0:	mov	r0, sp
   23ab4:	ldr	r3, [sp, #36]	; 0x24
   23ab8:	str	r4, [sp, #12]
   23abc:	blx	r3
   23ac0:	add	sp, sp, #24
   23ac4:	pop	{r4, pc}
   23ac8:	mov	r0, #15
   23acc:	b	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23ad0:	mov	r0, #29
   23ad4:	b	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23ad8:	mov	r0, #30
   23adc:	b	23ac0 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23ae0:	add	r3, r2, r3
   23ae4:	cmp	r2, r3
   23ae8:	bcs	23b2c <flatcc_emitter_copy_buffer@@Base+0x350>
   23aec:	add	r2, r3, #4
   23af0:	cmp	r1, r2
   23af4:	bcc	23b2c <flatcc_emitter_copy_buffer@@Base+0x350>
   23af8:	tst	r3, #3
   23afc:	bne	23b2c <flatcc_emitter_copy_buffer@@Base+0x350>
   23b00:	ldr	r3, [r0, r3]
   23b04:	sub	r1, r1, r2
   23b08:	add	ip, r3, #1
   23b0c:	cmp	r1, ip
   23b10:	bcc	23b34 <flatcc_emitter_copy_buffer@@Base+0x358>
   23b14:	add	r0, r0, r3
   23b18:	ldrb	r3, [r0, r2]
   23b1c:	cmp	r3, #0
   23b20:	moveq	r0, #0
   23b24:	movne	r0, #7
   23b28:	bx	lr
   23b2c:	mov	r0, #17
   23b30:	bx	lr
   23b34:	mov	r0, #8
   23b38:	bx	lr

00023b3c <flatcc_verify_error_string@@Base>:
   23b3c:	cmp	r0, #36	; 0x24
   23b40:	ldrls	r3, [pc, #8]	; 23b50 <flatcc_verify_error_string@@Base+0x14>
   23b44:	ldrls	r0, [r3, r0, lsl #2]
   23b48:	ldrhi	r0, [pc, #4]	; 23b54 <flatcc_verify_error_string@@Base+0x18>
   23b4c:	bx	lr
   23b50:			; <UNDEFINED> instruction: 0x00032fb0
   23b54:	andeq	r3, r3, r4, asr #32

00023b58 <flatcc_verify_field@@Base>:
   23b58:	push	{r4, r5, r6, lr}
   23b5c:	mov	r5, r0
   23b60:	mov	r4, r3
   23b64:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   23b68:	uxth	r1, r0
   23b6c:	cmp	r1, #0
   23b70:	beq	23ba8 <flatcc_verify_field@@Base+0x50>
   23b74:	ldrh	r3, [r5, #20]
   23b78:	add	r2, r2, r1
   23b7c:	cmp	r2, r3
   23b80:	bhi	23bb0 <flatcc_verify_field@@Base+0x58>
   23b84:	ldr	r0, [r5]
   23b88:	sub	r4, r4, #1
   23b8c:	ldr	r3, [r5, #16]
   23b90:	add	r0, r0, r3
   23b94:	add	r0, r0, r1
   23b98:	tst	r0, r4
   23b9c:	moveq	r0, #0
   23ba0:	movne	r0, #12
   23ba4:	pop	{r4, r5, r6, pc}
   23ba8:	mov	r0, r1
   23bac:	pop	{r4, r5, r6, pc}
   23bb0:	mov	r0, #13
   23bb4:	pop	{r4, r5, r6, pc}

00023bb8 <flatcc_verify_string_field@@Base>:
   23bb8:	push	{r0, r1, r4, lr}
   23bbc:	add	r3, sp, #4
   23bc0:	mov	r4, r0
   23bc4:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   23bc8:	cmp	r0, #0
   23bcc:	bne	23be8 <flatcc_verify_string_field@@Base+0x30>
   23bd0:	ldr	r2, [sp, #4]
   23bd4:	cmp	r2, #0
   23bd8:	beq	23be8 <flatcc_verify_string_field@@Base+0x30>
   23bdc:	ldrd	r0, [r4]
   23be0:	ldr	r3, [r0, r2]
   23be4:	bl	23ae0 <flatcc_emitter_copy_buffer@@Base+0x304>
   23be8:	add	sp, sp, #8
   23bec:	pop	{r4, pc}

00023bf0 <flatcc_verify_vector_field@@Base>:
   23bf0:	push	{r4, r5, lr}
   23bf4:	sub	sp, sp, #28
   23bf8:	mov	r5, r3
   23bfc:	add	r3, sp, #20
   23c00:	mov	r4, r0
   23c04:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   23c08:	cmp	r0, #0
   23c0c:	bne	23c3c <flatcc_verify_vector_field@@Base+0x4c>
   23c10:	ldr	r2, [sp, #20]
   23c14:	cmp	r2, #0
   23c18:	beq	23c3c <flatcc_verify_vector_field@@Base+0x4c>
   23c1c:	ldr	r3, [sp, #44]	; 0x2c
   23c20:	ldrd	r0, [r4]
   23c24:	str	r5, [sp]
   23c28:	str	r3, [sp, #8]
   23c2c:	ldrh	r3, [sp, #40]	; 0x28
   23c30:	str	r3, [sp, #4]
   23c34:	ldr	r3, [r0, r2]
   23c38:	bl	23990 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   23c3c:	add	sp, sp, #28
   23c40:	pop	{r4, r5, pc}

00023c44 <flatcc_verify_string_vector_field@@Base>:
   23c44:	push	{r4, r5, r6, r7, r8, r9, lr}
   23c48:	sub	sp, sp, #28
   23c4c:	mov	r7, r0
   23c50:	add	r3, sp, #20
   23c54:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   23c58:	subs	r6, r0, #0
   23c5c:	bne	23cbc <flatcc_verify_string_vector_field@@Base+0x78>
   23c60:	ldr	r4, [sp, #20]
   23c64:	cmp	r4, #0
   23c68:	beq	23cbc <flatcc_verify_string_vector_field@@Base+0x78>
   23c6c:	ldm	r7, {r5, r8}
   23c70:	mvn	r3, #-1073741824	; 0xc0000000
   23c74:	mov	r2, r4
   23c78:	ldr	r7, [r5, r4]
   23c7c:	mov	r1, r8
   23c80:	mov	r0, r5
   23c84:	str	r3, [sp, #8]
   23c88:	mov	r3, #4
   23c8c:	str	r3, [sp]
   23c90:	str	r3, [sp, #4]
   23c94:	mov	r3, r7
   23c98:	bl	23990 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   23c9c:	subs	r6, r0, #0
   23ca0:	bne	23cbc <flatcc_verify_string_vector_field@@Base+0x78>
   23ca4:	add	r4, r4, r7
   23ca8:	mov	r7, r6
   23cac:	ldr	r9, [r5, r4]
   23cb0:	add	r4, r4, #4
   23cb4:	cmp	r9, r7
   23cb8:	bne	23cc8 <flatcc_verify_string_vector_field@@Base+0x84>
   23cbc:	mov	r0, r6
   23cc0:	add	sp, sp, #28
   23cc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23cc8:	mov	r2, r4
   23ccc:	mov	r1, r8
   23cd0:	ldr	r3, [r5, r4]
   23cd4:	mov	r0, r5
   23cd8:	bl	23ae0 <flatcc_emitter_copy_buffer@@Base+0x304>
   23cdc:	cmp	r0, #0
   23ce0:	addeq	r7, r7, #1
   23ce4:	addeq	r4, r4, #4
   23ce8:	beq	23cb4 <flatcc_verify_string_vector_field@@Base+0x70>
   23cec:	mov	r6, r0
   23cf0:	b	23cbc <flatcc_verify_string_vector_field@@Base+0x78>

00023cf4 <flatcc_verify_table_field@@Base>:
   23cf4:	push	{r4, r5, lr}
   23cf8:	sub	sp, sp, #20
   23cfc:	mov	r5, r3
   23d00:	add	r3, sp, #12
   23d04:	mov	r4, r0
   23d08:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   23d0c:	cmp	r0, #0
   23d10:	bne	23d34 <flatcc_verify_table_field@@Base+0x40>
   23d14:	ldr	r2, [sp, #12]
   23d18:	cmp	r2, #0
   23d1c:	beq	23d34 <flatcc_verify_table_field@@Base+0x40>
   23d20:	ldrd	r0, [r4]
   23d24:	ldr	r3, [r4, #8]
   23d28:	stm	sp, {r3, r5}
   23d2c:	ldr	r3, [r0, r2]
   23d30:	bl	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   23d34:	add	sp, sp, #20
   23d38:	pop	{r4, r5, pc}

00023d3c <flatcc_verify_table_vector_field@@Base>:
   23d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d40:	sub	sp, sp, #36	; 0x24
   23d44:	mov	sl, r3
   23d48:	add	r3, sp, #28
   23d4c:	mov	r7, r0
   23d50:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   23d54:	subs	r6, r0, #0
   23d58:	bne	23dd4 <flatcc_verify_table_vector_field@@Base+0x98>
   23d5c:	ldr	r4, [sp, #28]
   23d60:	cmp	r4, #0
   23d64:	beq	23dd4 <flatcc_verify_table_vector_field@@Base+0x98>
   23d68:	ldm	r7, {r5, r9}
   23d6c:	ldr	r7, [r7, #8]
   23d70:	ldr	r8, [r5, r4]
   23d74:	cmp	r7, #0
   23d78:	movle	r6, #3
   23d7c:	ble	23dd4 <flatcc_verify_table_vector_field@@Base+0x98>
   23d80:	mvn	r3, #-1073741824	; 0xc0000000
   23d84:	mov	r2, r4
   23d88:	mov	r1, r9
   23d8c:	mov	r0, r5
   23d90:	str	r3, [sp, #8]
   23d94:	mov	r3, #4
   23d98:	str	r3, [sp]
   23d9c:	str	r3, [sp, #4]
   23da0:	mov	r3, r8
   23da4:	bl	23990 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   23da8:	cmp	r0, #0
   23dac:	bne	23e1c <flatcc_verify_table_vector_field@@Base+0xe0>
   23db0:	add	r4, r4, r8
   23db4:	sub	r7, r7, #1
   23db8:	ldr	r3, [r5, r4]
   23dbc:	mov	r8, r6
   23dc0:	add	r4, r4, #4
   23dc4:	str	r3, [sp, #20]
   23dc8:	ldr	r3, [sp, #20]
   23dcc:	cmp	r3, r8
   23dd0:	bne	23de0 <flatcc_verify_table_vector_field@@Base+0xa4>
   23dd4:	mov	r0, r6
   23dd8:	add	sp, sp, #36	; 0x24
   23ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23de0:	mov	r2, r4
   23de4:	mov	r1, r9
   23de8:	stm	sp, {r7, sl}
   23dec:	mov	r0, r5
   23df0:	ldr	r3, [r5, r4]
   23df4:	add	fp, r5, r4
   23df8:	bl	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   23dfc:	cmp	r0, #0
   23e00:	beq	23e24 <flatcc_verify_table_vector_field@@Base+0xe8>
   23e04:	mov	r2, r4
   23e08:	mov	r1, r9
   23e0c:	stm	sp, {r7, sl}
   23e10:	mov	r0, r5
   23e14:	ldr	r3, [fp]
   23e18:	bl	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   23e1c:	mov	r6, r0
   23e20:	b	23dd4 <flatcc_verify_table_vector_field@@Base+0x98>
   23e24:	add	r8, r8, #1
   23e28:	add	r4, r4, #4
   23e2c:	b	23dc8 <flatcc_verify_table_vector_field@@Base+0x8c>

00023e30 <flatcc_verify_union_table@@Base>:
   23e30:	push	{r0, r1, r2, lr}
   23e34:	str	r1, [sp, #4]
   23e38:	ldr	r3, [r0, #8]
   23e3c:	str	r3, [sp]
   23e40:	ldr	r1, [r0, #4]
   23e44:	ldrd	r2, [r0, #16]
   23e48:	ldr	r0, [r0]
   23e4c:	bl	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   23e50:	add	sp, sp, #12
   23e54:	pop	{pc}		; (ldr pc, [sp], #4)

00023e58 <flatcc_verify_union_struct@@Base>:
   23e58:	push	{r0, r1, r2, lr}
   23e5c:	mov	r3, r1
   23e60:	str	r2, [sp]
   23e64:	ldr	r1, [r0, #16]
   23e68:	ldr	r2, [r0, #20]
   23e6c:	ldr	r0, [r0, #4]
   23e70:	bl	2388c <flatcc_emitter_copy_buffer@@Base+0xb0>
   23e74:	add	sp, sp, #12
   23e78:	pop	{pc}		; (ldr pc, [sp], #4)

00023e7c <flatcc_verify_union_string@@Base>:
   23e7c:	ldr	r1, [r0, #4]
   23e80:	ldrd	r2, [r0, #16]
   23e84:	ldr	r0, [r0]
   23e88:	b	23ae0 <flatcc_emitter_copy_buffer@@Base+0x304>

00023e8c <flatcc_verify_buffer_header@@Base>:
   23e8c:	tst	r0, #3
   23e90:	push	{r0, r1, r4, lr}
   23e94:	movne	r0, #5
   23e98:	bne	23ec0 <flatcc_verify_buffer_header@@Base+0x34>
   23e9c:	cmn	r1, #9
   23ea0:	movhi	r0, #6
   23ea4:	bhi	23ec0 <flatcc_verify_buffer_header@@Base+0x34>
   23ea8:	cmp	r1, #7
   23eac:	movls	r0, #1
   23eb0:	bls	23ec0 <flatcc_verify_buffer_header@@Base+0x34>
   23eb4:	cmp	r2, #0
   23eb8:	bne	23ec8 <flatcc_verify_buffer_header@@Base+0x3c>
   23ebc:	mov	r0, #0
   23ec0:	add	sp, sp, #8
   23ec4:	pop	{r4, pc}
   23ec8:	mov	r1, r2
   23ecc:	mov	r2, #4
   23ed0:	mov	r4, r0
   23ed4:	add	r0, sp, r2
   23ed8:	bl	145cc <strncpy@plt>
   23edc:	ldr	r2, [r4, #4]
   23ee0:	ldr	r3, [sp, #4]
   23ee4:	cmp	r3, #0
   23ee8:	cmpne	r2, r3
   23eec:	movne	r0, #2
   23ef0:	beq	23ebc <flatcc_verify_buffer_header@@Base+0x30>
   23ef4:	b	23ec0 <flatcc_verify_buffer_header@@Base+0x34>

00023ef8 <flatcc_verify_typed_buffer_header@@Base>:
   23ef8:	tst	r0, #3
   23efc:	bne	23f2c <flatcc_verify_typed_buffer_header@@Base+0x34>
   23f00:	cmn	r1, #9
   23f04:	bhi	23f34 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   23f08:	cmp	r1, #7
   23f0c:	bls	23f3c <flatcc_verify_typed_buffer_header@@Base+0x44>
   23f10:	cmp	r2, #0
   23f14:	beq	23f44 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   23f18:	ldr	r0, [r0, #4]
   23f1c:	cmp	r2, r0
   23f20:	movne	r0, #2
   23f24:	moveq	r0, #0
   23f28:	bx	lr
   23f2c:	mov	r0, #5
   23f30:	bx	lr
   23f34:	mov	r0, #6
   23f38:	bx	lr
   23f3c:	mov	r0, #1
   23f40:	bx	lr
   23f44:	mov	r0, r2
   23f48:	bx	lr

00023f4c <flatcc_verify_struct_as_root@@Base>:
   23f4c:	push	{r4, r5, r6, r7, r8, lr}
   23f50:	mov	r4, r1
   23f54:	mov	r5, r0
   23f58:	mov	r8, r2
   23f5c:	mov	r6, r3
   23f60:	ldrh	r7, [sp, #24]
   23f64:	bl	23e8c <flatcc_verify_buffer_header@@Base>
   23f68:	subs	r1, r0, #0
   23f6c:	beq	23f84 <flatcc_verify_struct_as_root@@Base+0x38>
   23f70:	mov	r2, r8
   23f74:	mov	r1, r4
   23f78:	mov	r0, r5
   23f7c:	pop	{r4, r5, r6, r7, r8, lr}
   23f80:	b	23e8c <flatcc_verify_buffer_header@@Base>
   23f84:	mov	r3, r6
   23f88:	mov	r0, r4
   23f8c:	ldr	r2, [r5]
   23f90:	str	r7, [sp, #24]
   23f94:	pop	{r4, r5, r6, r7, r8, lr}
   23f98:	b	2388c <flatcc_emitter_copy_buffer@@Base+0xb0>

00023f9c <flatcc_verify_struct_as_typed_root@@Base>:
   23f9c:	push	{r4, r5, r6, lr}
   23fa0:	mov	r4, r1
   23fa4:	mov	r5, r0
   23fa8:	bl	23ef8 <flatcc_verify_typed_buffer_header@@Base>
   23fac:	subs	r1, r0, #0
   23fb0:	ldrh	r6, [sp, #16]
   23fb4:	popne	{r4, r5, r6, pc}
   23fb8:	mov	r0, r4
   23fbc:	ldr	r2, [r5]
   23fc0:	str	r6, [sp, #16]
   23fc4:	pop	{r4, r5, r6, lr}
   23fc8:	b	2388c <flatcc_emitter_copy_buffer@@Base+0xb0>

00023fcc <flatcc_verify_table_as_root@@Base>:
   23fcc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23fd0:	mov	r7, r2
   23fd4:	mov	r4, r0
   23fd8:	mov	r5, r1
   23fdc:	mov	r6, r3
   23fe0:	bl	23e8c <flatcc_verify_buffer_header@@Base>
   23fe4:	subs	r2, r0, #0
   23fe8:	beq	24004 <flatcc_verify_table_as_root@@Base+0x38>
   23fec:	mov	r2, r7
   23ff0:	mov	r1, r5
   23ff4:	mov	r0, r4
   23ff8:	add	sp, sp, #12
   23ffc:	pop	{r4, r5, r6, r7, lr}
   24000:	b	23e8c <flatcc_verify_buffer_header@@Base>
   24004:	mov	r3, #100	; 0x64
   24008:	mov	r1, r5
   2400c:	mov	r0, r4
   24010:	stm	sp, {r3, r6}
   24014:	ldr	r3, [r4]
   24018:	bl	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   2401c:	add	sp, sp, #12
   24020:	pop	{r4, r5, r6, r7, pc}

00024024 <flatcc_verify_table_as_typed_root@@Base>:
   24024:	push	{r0, r1, r2, r4, r5, lr}
   24028:	mov	r4, r0
   2402c:	bl	23ef8 <flatcc_verify_typed_buffer_header@@Base>
   24030:	cmp	r0, #0
   24034:	bne	24054 <flatcc_verify_table_as_typed_root@@Base+0x30>
   24038:	str	r3, [sp, #4]
   2403c:	mov	r3, #100	; 0x64
   24040:	mov	r2, r0
   24044:	mov	r0, r4
   24048:	str	r3, [sp]
   2404c:	ldr	r3, [r4]
   24050:	bl	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   24054:	add	sp, sp, #12
   24058:	pop	{r4, r5, pc}

0002405c <flatcc_verify_struct_as_nested_root@@Base>:
   2405c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24060:	mvn	sl, #0
   24064:	mov	r7, #1
   24068:	mov	r8, r3
   2406c:	mov	r5, r0
   24070:	mov	r6, r1
   24074:	mov	fp, r2
   24078:	ldrh	r4, [sp, #52]	; 0x34
   2407c:	stm	sp, {r7, sl}
   24080:	ldr	r9, [sp, #48]	; 0x30
   24084:	mov	r3, r4
   24088:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   2408c:	cmp	r0, #0
   24090:	beq	240b8 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   24094:	mov	r3, r4
   24098:	mov	r2, fp
   2409c:	str	r7, [sp, #48]	; 0x30
   240a0:	mov	r1, r6
   240a4:	mov	r0, r5
   240a8:	str	sl, [sp, #52]	; 0x34
   240ac:	add	sp, sp, #12
   240b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240b4:	b	23bf0 <flatcc_verify_vector_field@@Base>
   240b8:	mov	r1, r6
   240bc:	mov	r0, r5
   240c0:	bl	23904 <flatcc_emitter_copy_buffer@@Base+0x128>
   240c4:	subs	r1, r0, #0
   240c8:	beq	240f4 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   240cc:	ldr	ip, [r1]
   240d0:	mov	r3, r9
   240d4:	mov	r2, r8
   240d8:	str	r4, [sp, #48]	; 0x30
   240dc:	add	r0, r1, ip
   240e0:	ldr	r1, [r1, ip]
   240e4:	add	r0, r0, #4
   240e8:	add	sp, sp, #12
   240ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240f0:	b	23f4c <flatcc_verify_struct_as_root@@Base>
   240f4:	add	sp, sp, #12
   240f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000240fc <flatcc_verify_table_as_nested_root@@Base>:
   240fc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24100:	mvn	sl, #0
   24104:	mov	r7, #1
   24108:	mov	r8, r3
   2410c:	mov	r6, r0
   24110:	mov	r4, r1
   24114:	mov	fp, r2
   24118:	ldrh	r5, [sp, #48]	; 0x30
   2411c:	stm	sp, {r7, sl}
   24120:	ldr	r9, [sp, #52]	; 0x34
   24124:	mov	r3, r5
   24128:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   2412c:	cmp	r0, #0
   24130:	beq	24158 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   24134:	mov	r3, r5
   24138:	mov	r2, fp
   2413c:	str	r7, [sp, #48]	; 0x30
   24140:	mov	r1, r4
   24144:	mov	r0, r6
   24148:	str	sl, [sp, #52]	; 0x34
   2414c:	add	sp, sp, #12
   24150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24154:	b	23bf0 <flatcc_verify_vector_field@@Base>
   24158:	mov	r1, r4
   2415c:	mov	r0, r6
   24160:	bl	23904 <flatcc_emitter_copy_buffer@@Base+0x128>
   24164:	subs	r3, r0, #0
   24168:	beq	241d0 <flatcc_verify_table_as_nested_root@@Base+0xd4>
   2416c:	ldr	r2, [r3]
   24170:	ldr	r5, [r3, r2]
   24174:	add	r7, r3, r2
   24178:	mov	r2, r8
   2417c:	add	r4, r7, #4
   24180:	mov	r0, r4
   24184:	mov	r1, r5
   24188:	bl	23e8c <flatcc_verify_buffer_header@@Base>
   2418c:	subs	r2, r0, #0
   24190:	beq	241ac <flatcc_verify_table_as_nested_root@@Base+0xb0>
   24194:	mov	r2, r8
   24198:	mov	r1, r5
   2419c:	mov	r0, r4
   241a0:	add	sp, sp, #12
   241a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241a8:	b	23e8c <flatcc_verify_buffer_header@@Base>
   241ac:	ldr	r3, [r6, #8]
   241b0:	mov	r1, r5
   241b4:	mov	r0, r4
   241b8:	str	r3, [sp, #48]	; 0x30
   241bc:	str	r9, [sp, #52]	; 0x34
   241c0:	ldr	r3, [r7, #4]
   241c4:	add	sp, sp, #12
   241c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241cc:	b	23a00 <flatcc_emitter_copy_buffer@@Base+0x224>
   241d0:	add	sp, sp, #12
   241d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000241d8 <flatcc_verify_union_field@@Base>:
   241d8:	push	{r4, r5, r6, r7, r8, lr}
   241dc:	mov	r6, r1
   241e0:	sub	r1, r1, #1
   241e4:	sub	sp, sp, #32
   241e8:	uxth	r1, r1
   241ec:	mov	r7, r3
   241f0:	mov	r4, r0
   241f4:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   241f8:	uxth	r3, r0
   241fc:	cmp	r3, #0
   24200:	bne	24238 <flatcc_verify_union_field@@Base+0x60>
   24204:	mov	r1, r6
   24208:	mov	r0, r4
   2420c:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   24210:	uxth	r0, r0
   24214:	cmp	r0, #0
   24218:	movne	r0, #23
   2421c:	bne	24230 <flatcc_verify_union_field@@Base+0x58>
   24220:	cmp	r2, #0
   24224:	movne	r0, #21
   24228:	bne	24230 <flatcc_verify_union_field@@Base+0x58>
   2422c:	mov	r0, #0
   24230:	add	sp, sp, #32
   24234:	pop	{r4, r5, r6, r7, r8, pc}
   24238:	ldrh	r3, [r4, #20]
   2423c:	uxth	r5, r0
   24240:	add	r1, r5, #1
   24244:	cmp	r1, r3
   24248:	movhi	r0, #13
   2424c:	bhi	24230 <flatcc_verify_union_field@@Base+0x58>
   24250:	ldr	r8, [r4]
   24254:	ldr	r0, [r4, #16]
   24258:	add	r5, r5, r0
   2425c:	ldrb	r3, [r8, r5]
   24260:	cmp	r3, #0
   24264:	bne	24288 <flatcc_verify_union_field@@Base+0xb0>
   24268:	mov	r1, r6
   2426c:	mov	r0, r4
   24270:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   24274:	uxth	r0, r0
   24278:	cmp	r0, #0
   2427c:	movne	r0, #24
   24280:	beq	2422c <flatcc_verify_union_field@@Base+0x54>
   24284:	b	24230 <flatcc_verify_union_field@@Base+0x58>
   24288:	add	r3, sp, #4
   2428c:	mov	r1, r6
   24290:	mov	r0, r4
   24294:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   24298:	cmp	r0, #0
   2429c:	bne	24230 <flatcc_verify_union_field@@Base+0x58>
   242a0:	ldr	r3, [sp, #4]
   242a4:	cmp	r3, #0
   242a8:	beq	2422c <flatcc_verify_union_field@@Base+0x54>
   242ac:	ldr	r2, [r4]
   242b0:	add	r0, sp, #8
   242b4:	ldr	r1, [r4, #4]
   242b8:	str	r3, [sp, #24]
   242bc:	str	r2, [sp, #8]
   242c0:	str	r1, [sp, #12]
   242c4:	ldr	r1, [r4, #8]
   242c8:	str	r1, [sp, #16]
   242cc:	ldr	r3, [r2, r3]
   242d0:	str	r3, [sp, #28]
   242d4:	ldrb	r3, [r8, r5]
   242d8:	strb	r3, [sp, #20]
   242dc:	blx	r7
   242e0:	b	24230 <flatcc_verify_union_field@@Base+0x58>

000242e4 <flatcc_verify_union_vector_field@@Base>:
   242e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242e8:	sub	r4, r1, #1
   242ec:	sub	sp, sp, #60	; 0x3c
   242f0:	uxth	r4, r4
   242f4:	mov	sl, r1
   242f8:	mov	r1, r4
   242fc:	mov	r8, r0
   24300:	mov	r6, r2
   24304:	mov	r9, r3
   24308:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   2430c:	uxth	r0, r0
   24310:	cmp	r0, #0
   24314:	bne	24344 <flatcc_verify_union_vector_field@@Base+0x60>
   24318:	mov	r1, sl
   2431c:	mov	r0, r8
   24320:	bl	238e0 <flatcc_emitter_copy_buffer@@Base+0x104>
   24324:	adds	r3, r2, #0
   24328:	uxth	r0, r0
   2432c:	movne	r3, #1
   24330:	cmp	r0, #0
   24334:	movne	r3, #0
   24338:	cmp	r3, #0
   2433c:	movne	r3, #22
   24340:	bne	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   24344:	mov	r5, #1
   24348:	mvn	r7, #0
   2434c:	mov	r3, r5
   24350:	mov	r2, r6
   24354:	mov	r1, r4
   24358:	mov	r0, r8
   2435c:	stm	sp, {r5, r7}
   24360:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   24364:	cmp	r0, #0
   24368:	beq	2438c <flatcc_verify_union_vector_field@@Base+0xa8>
   2436c:	mov	r3, r5
   24370:	mov	r2, r6
   24374:	stm	sp, {r5, r7}
   24378:	mov	r1, r4
   2437c:	mov	r0, r8
   24380:	bl	23bf0 <flatcc_verify_vector_field@@Base>
   24384:	mov	r3, r0
   24388:	b	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   2438c:	mov	r1, r4
   24390:	mov	r0, r8
   24394:	bl	23904 <flatcc_emitter_copy_buffer@@Base+0x128>
   24398:	cmp	r0, #0
   2439c:	bne	243b0 <flatcc_verify_union_vector_field@@Base+0xcc>
   243a0:	mov	r3, #0
   243a4:	mov	r0, r3
   243a8:	add	sp, sp, #60	; 0x3c
   243ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243b0:	ldr	r3, [r0]
   243b4:	mov	r2, r6
   243b8:	mov	r1, sl
   243bc:	add	r5, r0, r3
   243c0:	ldr	r7, [r0, r3]
   243c4:	add	r3, sp, #28
   243c8:	mov	r0, r8
   243cc:	bl	23930 <flatcc_emitter_copy_buffer@@Base+0x154>
   243d0:	subs	r3, r0, #0
   243d4:	bne	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   243d8:	ldr	r4, [sp, #28]
   243dc:	cmp	r4, #0
   243e0:	beq	243a0 <flatcc_verify_union_vector_field@@Base+0xbc>
   243e4:	ldm	r8, {r6, sl}
   243e8:	ldr	r8, [r8, #8]
   243ec:	ldr	fp, [r6, r4]
   243f0:	cmp	r8, #0
   243f4:	movle	r3, #3
   243f8:	ble	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   243fc:	mvn	r3, #-1073741824	; 0xc0000000
   24400:	mov	r2, r4
   24404:	mov	r1, sl
   24408:	mov	r0, r6
   2440c:	str	r3, [sp, #8]
   24410:	mov	r3, #4
   24414:	str	r3, [sp]
   24418:	str	r3, [sp, #4]
   2441c:	mov	r3, fp
   24420:	bl	23990 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   24424:	subs	r3, r0, #0
   24428:	bne	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   2442c:	add	r4, r4, fp
   24430:	ldr	r2, [r6, r4]
   24434:	cmp	r7, r2
   24438:	movne	r3, #34	; 0x22
   2443c:	bne	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   24440:	sub	r8, r8, #1
   24444:	add	r4, r4, #4
   24448:	str	r6, [sp, #32]
   2444c:	add	r7, r5, r7
   24450:	str	sl, [sp, #36]	; 0x24
   24454:	str	r8, [sp, #40]	; 0x28
   24458:	cmp	r7, r5
   2445c:	beq	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   24460:	ldr	r1, [r6, r4]
   24464:	ldrb	r2, [r5, #4]
   24468:	cmp	r1, #0
   2446c:	bne	24480 <flatcc_verify_union_vector_field@@Base+0x19c>
   24470:	cmp	r2, #0
   24474:	beq	244b8 <flatcc_verify_union_vector_field@@Base+0x1d4>
   24478:	mov	r3, #32
   2447c:	b	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   24480:	cmp	r2, #0
   24484:	str	r3, [sp, #20]
   24488:	beq	244c4 <flatcc_verify_union_vector_field@@Base+0x1e0>
   2448c:	add	r0, sp, #32
   24490:	strb	r2, [sp, #44]	; 0x2c
   24494:	str	r4, [sp, #48]	; 0x30
   24498:	str	r1, [sp, #52]	; 0x34
   2449c:	blx	r9
   244a0:	cmp	r0, #0
   244a4:	ldr	r3, [sp, #20]
   244a8:	beq	244b8 <flatcc_verify_union_vector_field@@Base+0x1d4>
   244ac:	add	r0, sp, #32
   244b0:	blx	r9
   244b4:	b	24384 <flatcc_verify_union_vector_field@@Base+0xa0>
   244b8:	add	r4, r4, #4
   244bc:	add	r5, r5, #1
   244c0:	b	24458 <flatcc_verify_union_vector_field@@Base+0x174>
   244c4:	mov	r3, #33	; 0x21
   244c8:	b	243a4 <flatcc_verify_union_vector_field@@Base+0xc0>
   244cc:	andeq	r0, r0, r0
   244d0:	push	{r4, lr}
   244d4:	mov	r2, #260	; 0x104
   244d8:	ldr	r3, [pc, #8]	; 244e8 <flatcc_verify_union_vector_field@@Base+0x204>
   244dc:	ldr	r1, [pc, #8]	; 244ec <flatcc_verify_union_vector_field@@Base+0x208>
   244e0:	ldr	r0, [pc, #8]	; 244f0 <flatcc_verify_union_vector_field@@Base+0x20c>
   244e4:	bl	14620 <__assert_fail@plt>
   244e8:	andeq	r3, r3, r8, ror r4
   244ec:	andeq	r3, r3, fp, lsl #26
   244f0:	andeq	r3, r3, r1, ror #26

000244f4 <grisu3_diy_fp_encode_double@@Base>:
   244f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244f8:	sub	sp, sp, #76	; 0x4c
   244fc:	sub	r2, r2, r3
   24500:	ldr	ip, [sp, #112]	; 0x70
   24504:	strd	r0, [sp]
   24508:	str	r3, [sp, #24]
   2450c:	cmp	ip, #0
   24510:	movne	ip, #4
   24514:	orrs	r3, r0, r1
   24518:	bne	24590 <grisu3_diy_fp_encode_double@@Base+0x9c>
   2451c:	bl	244d0 <flatcc_verify_union_vector_field@@Base+0x1ec>
   24520:	ldm	sp, {r1, r3}
   24524:	lsl	r3, r3, #10
   24528:	lsl	sl, r1, #10
   2452c:	orr	r3, r3, r1, lsr #22
   24530:	str	sl, [sp]
   24534:	str	r3, [sp, #4]
   24538:	mov	r3, r9
   2453c:	ldr	r1, [sp, #4]
   24540:	mov	r6, r8
   24544:	sub	r9, r3, #10
   24548:	and	r7, r1, lr
   2454c:	orrs	r1, r6, r7
   24550:	beq	24520 <grisu3_diy_fp_encode_double@@Base+0x2c>
   24554:	ldrd	r0, [sp]
   24558:	mov	fp, r3
   2455c:	sub	r3, r3, #1
   24560:	cmp	r0, #0
   24564:	sbcs	r1, r1, #0
   24568:	bge	245a0 <grisu3_diy_fp_encode_double@@Base+0xac>
   2456c:	rsb	r3, fp, #0
   24570:	cmn	r2, #348	; 0x15c
   24574:	lsl	ip, ip, r3
   24578:	bge	245bc <grisu3_diy_fp_encode_double@@Base+0xc8>
   2457c:	ldr	r3, [pc, #1128]	; 249ec <grisu3_diy_fp_encode_double@@Base+0x4f8>
   24580:	mov	r2, #80	; 0x50
   24584:	ldr	r1, [pc, #1124]	; 249f0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   24588:	ldr	r0, [pc, #1124]	; 249f4 <grisu3_diy_fp_encode_double@@Base+0x500>
   2458c:	bl	14620 <__assert_fail@plt>
   24590:	mov	r3, #0
   24594:	ldr	lr, [pc, #1116]	; 249f8 <grisu3_diy_fp_encode_double@@Base+0x504>
   24598:	mov	r8, r3
   2459c:	b	2453c <grisu3_diy_fp_encode_double@@Base+0x48>
   245a0:	ldr	r1, [sp]
   245a4:	adds	r1, r1, r1
   245a8:	str	r1, [sp]
   245ac:	ldr	r1, [sp, #4]
   245b0:	adc	r1, r1, r1
   245b4:	str	r1, [sp, #4]
   245b8:	b	24554 <grisu3_diy_fp_encode_double@@Base+0x60>
   245bc:	cmp	r2, #348	; 0x15c
   245c0:	blt	245d8 <grisu3_diy_fp_encode_double@@Base+0xe4>
   245c4:	ldr	r3, [pc, #1056]	; 249ec <grisu3_diy_fp_encode_double@@Base+0x4f8>
   245c8:	mov	r2, #81	; 0x51
   245cc:	ldr	r1, [pc, #1052]	; 249f0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   245d0:	ldr	r0, [pc, #1060]	; 249fc <grisu3_diy_fp_encode_double@@Base+0x508>
   245d4:	b	2458c <grisu3_diy_fp_encode_double@@Base+0x98>
   245d8:	ldr	r3, [pc, #1056]	; 24a00 <grisu3_diy_fp_encode_double@@Base+0x50c>
   245dc:	add	lr, r2, #348	; 0x15c
   245e0:	asr	lr, lr, #3
   245e4:	add	lr, r3, lr, lsl #4
   245e8:	ldr	r1, [lr, #56]	; 0x38
   245ec:	ldrsh	r6, [lr, #66]	; 0x42
   245f0:	str	r1, [sp, #60]	; 0x3c
   245f4:	ldr	r1, [lr, #60]	; 0x3c
   245f8:	cmp	r2, r6
   245fc:	str	r1, [sp, #64]	; 0x40
   24600:	ldrsh	r1, [lr, #64]	; 0x40
   24604:	str	r1, [sp, #68]	; 0x44
   24608:	bge	24620 <grisu3_diy_fp_encode_double@@Base+0x12c>
   2460c:	add	r3, r3, #24
   24610:	mov	r2, #88	; 0x58
   24614:	ldr	r1, [pc, #980]	; 249f0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   24618:	ldr	r0, [pc, #996]	; 24a04 <grisu3_diy_fp_encode_double@@Base+0x510>
   2461c:	b	2458c <grisu3_diy_fp_encode_double@@Base+0x98>
   24620:	add	lr, r6, #7
   24624:	cmp	r2, lr
   24628:	ble	24640 <grisu3_diy_fp_encode_double@@Base+0x14c>
   2462c:	add	r3, r3, #24
   24630:	mov	r2, #89	; 0x59
   24634:	ldr	r1, [pc, #948]	; 249f0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   24638:	ldr	r0, [pc, #968]	; 24a08 <grisu3_diy_fp_encode_double@@Base+0x514>
   2463c:	b	2458c <grisu3_diy_fp_encode_double@@Base+0x98>
   24640:	cmp	r2, r6
   24644:	beq	24720 <grisu3_diy_fp_encode_double@@Base+0x22c>
   24648:	sub	r2, r2, r6
   2464c:	sub	r2, r2, #1
   24650:	cmp	r2, #6
   24654:	bls	2466c <grisu3_diy_fp_encode_double@@Base+0x178>
   24658:	ldr	r3, [pc, #940]	; 24a0c <grisu3_diy_fp_encode_double@@Base+0x518>
   2465c:	mov	r2, #185	; 0xb9
   24660:	ldr	r1, [pc, #904]	; 249f0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   24664:	ldr	r0, [pc, #932]	; 24a10 <grisu3_diy_fp_encode_double@@Base+0x51c>
   24668:	b	2458c <grisu3_diy_fp_encode_double@@Base+0x98>
   2466c:	ldr	r3, [pc, #928]	; 24a14 <grisu3_diy_fp_encode_double@@Base+0x520>
   24670:	ldr	r1, [sp]
   24674:	add	lr, r3, r2, lsl #4
   24678:	ldr	r6, [r3, r2, lsl #4]
   2467c:	ldr	r3, [lr, #4]
   24680:	umull	r0, r1, r1, r3
   24684:	ldr	r3, [sp, #4]
   24688:	umull	r8, r9, r3, r6
   2468c:	ldr	r3, [sp]
   24690:	strd	r8, [sp, #16]
   24694:	ldr	sl, [sp, #16]
   24698:	umull	r6, r7, r3, r6
   2469c:	mov	r3, #0
   246a0:	mov	r9, r3
   246a4:	str	r3, [sp, #16]
   246a8:	mov	r6, r7
   246ac:	adds	r6, r6, sl
   246b0:	adc	r7, r3, r3
   246b4:	adds	r6, r6, #-2147483648	; 0x80000000
   246b8:	adc	r7, r7, r3
   246bc:	adds	r6, r6, r0
   246c0:	ldr	r6, [sp, #20]
   246c4:	adc	r7, r7, r3
   246c8:	mov	r8, r7
   246cc:	mov	r7, r1
   246d0:	ldr	r1, [sp, #4]
   246d4:	adds	r3, r6, r7
   246d8:	str	r3, [sp, #32]
   246dc:	adc	r3, r9, r9
   246e0:	str	r3, [sp, #36]	; 0x24
   246e4:	ldr	r3, [lr, #4]
   246e8:	ldrd	r6, [sp, #32]
   246ec:	umlal	r6, r7, r3, r1
   246f0:	adds	r3, r8, r6
   246f4:	str	r3, [sp]
   246f8:	adc	r3, r9, r7
   246fc:	str	r3, [sp, #4]
   24700:	ldr	r3, [lr, #8]
   24704:	add	r3, fp, r3
   24708:	add	fp, r3, #64	; 0x40
   2470c:	ldr	r3, [sp, #24]
   24710:	add	r3, r3, #1
   24714:	add	r2, r3, r2
   24718:	cmp	r2, #19
   2471c:	addgt	ip, ip, #4
   24720:	ldr	r2, [sp]
   24724:	mov	lr, #0
   24728:	ldr	r3, [sp, #64]	; 0x40
   2472c:	umull	r2, r3, r2, r3
   24730:	strd	r2, [sp, #16]
   24734:	ldr	r2, [sp, #4]
   24738:	ldr	r3, [sp, #60]	; 0x3c
   2473c:	umull	r2, r3, r2, r3
   24740:	strd	r2, [sp, #24]
   24744:	ldr	r2, [sp]
   24748:	ldr	r0, [sp, #24]
   2474c:	ldr	r3, [sp, #60]	; 0x3c
   24750:	umull	r6, r7, r2, r3
   24754:	ldr	r3, [sp, #20]
   24758:	mov	sl, r7
   2475c:	adds	r0, sl, r0
   24760:	ldr	sl, [sp, #16]
   24764:	adc	r6, lr, lr
   24768:	adds	r0, r0, #-2147483648	; 0x80000000
   2476c:	adc	r6, r6, lr
   24770:	adds	r0, r0, sl
   24774:	ldr	r0, [sp, #28]
   24778:	adc	r6, r6, lr
   2477c:	mov	r2, r6
   24780:	ldr	r6, [sp, #4]
   24784:	adds	r3, r0, r3
   24788:	str	r3, [sp, #40]	; 0x28
   2478c:	adc	r3, lr, lr
   24790:	str	r3, [sp, #44]	; 0x2c
   24794:	ldrd	r0, [sp, #40]	; 0x28
   24798:	ldr	r3, [sp, #64]	; 0x40
   2479c:	umlal	r0, r1, r3, r6
   247a0:	ldr	r3, [sp, #68]	; 0x44
   247a4:	adds	r4, r2, r0
   247a8:	adc	r5, lr, r1
   247ac:	cmp	ip, lr
   247b0:	add	r2, fp, r3
   247b4:	movne	r3, #9
   247b8:	moveq	r3, #8
   247bc:	add	r2, r2, #64	; 0x40
   247c0:	add	ip, ip, r3
   247c4:	orrs	r3, r4, r5
   247c8:	movne	r1, r2
   247cc:	ldrne	r0, [pc, #548]	; 249f8 <grisu3_diy_fp_encode_double@@Base+0x504>
   247d0:	beq	2451c <grisu3_diy_fp_encode_double@@Base+0x28>
   247d4:	and	r3, r5, r0
   247d8:	str	lr, [sp, #48]	; 0x30
   247dc:	sub	r6, r1, #10
   247e0:	str	r3, [sp, #52]	; 0x34
   247e4:	ldrd	r8, [sp, #48]	; 0x30
   247e8:	orrs	r3, r8, r9
   247ec:	beq	248f0 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   247f0:	cmp	r4, #0
   247f4:	mov	r8, r1
   247f8:	sbcs	r3, r5, #0
   247fc:	sub	r1, r1, #1
   24800:	bge	2490c <grisu3_diy_fp_encode_double@@Base+0x418>
   24804:	sub	r2, r2, r8
   24808:	add	r3, r8, #64	; 0x40
   2480c:	lsl	ip, ip, r2
   24810:	ldr	r2, [pc, #512]	; 24a18 <grisu3_diy_fp_encode_double@@Base+0x524>
   24814:	cmp	r3, r2
   24818:	movge	r3, #64	; 0x40
   2481c:	bge	24834 <grisu3_diy_fp_encode_double@@Base+0x340>
   24820:	mvn	r2, #1072	; 0x430
   24824:	cmp	r3, r2
   24828:	addge	r3, r8, #1136	; 0x470
   2482c:	movlt	r3, #0
   24830:	addge	r3, r3, #2
   24834:	rsb	lr, r3, #64	; 0x40
   24838:	cmp	lr, #60	; 0x3c
   2483c:	ble	24874 <grisu3_diy_fp_encode_double@@Base+0x380>
   24840:	rsb	r3, r3, #2
   24844:	mov	lr, #62	; 0x3e
   24848:	lsr	r2, r4, r3
   2484c:	rsb	r0, r3, #32
   24850:	sub	r1, r3, #32
   24854:	add	r8, r8, r3
   24858:	orr	r2, r2, r5, lsl r0
   2485c:	orr	r2, r2, r5, lsr r1
   24860:	lsr	r1, r5, r3
   24864:	asr	r3, ip, r3
   24868:	mov	r4, r2
   2486c:	mov	r5, r1
   24870:	add	ip, r3, #9
   24874:	lsr	sl, r4, lr
   24878:	rsb	r0, lr, #32
   2487c:	sub	r1, lr, #32
   24880:	lsr	fp, r5, lr
   24884:	add	r8, lr, r8
   24888:	orr	sl, sl, r5, lsl r0
   2488c:	mov	r0, #1
   24890:	orr	sl, sl, r5, lsr r1
   24894:	sub	r1, lr, #1
   24898:	and	r4, r4, r0, lsl r1
   2489c:	mov	r0, #8
   248a0:	lsl	r0, r0, r1
   248a4:	lsl	r4, r4, #3
   248a8:	add	r1, ip, r0
   248ac:	cmp	r1, lr
   248b0:	bgt	248e4 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   248b4:	adds	sl, sl, #1
   248b8:	mov	r6, #0
   248bc:	adc	fp, fp, #0
   248c0:	and	r7, fp, #2097152	; 0x200000
   248c4:	orrs	r3, r6, r7
   248c8:	beq	248e4 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   248cc:	lsr	lr, sl, #1
   248d0:	add	r8, r8, #1
   248d4:	lsr	r5, fp, #1
   248d8:	orr	lr, lr, fp, lsl #31
   248dc:	mov	fp, r5
   248e0:	mov	sl, lr
   248e4:	mvn	r6, #0
   248e8:	ldr	r7, [pc, #300]	; 24a1c <grisu3_diy_fp_encode_double@@Base+0x528>
   248ec:	b	24930 <grisu3_diy_fp_encode_double@@Base+0x43c>
   248f0:	lsl	r3, r5, #10
   248f4:	lsl	r1, r4, #10
   248f8:	orr	r3, r3, r4, lsr #22
   248fc:	mov	r4, r1
   24900:	mov	r1, r6
   24904:	mov	r5, r3
   24908:	b	247d4 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   2490c:	adds	r4, r4, r4
   24910:	adc	r5, r5, r5
   24914:	b	247f0 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   24918:	lsr	lr, sl, #1
   2491c:	lsr	r8, fp, #1
   24920:	orr	lr, lr, fp, lsl #31
   24924:	mov	fp, r8
   24928:	mov	r8, r5
   2492c:	mov	sl, lr
   24930:	cmp	fp, r7
   24934:	add	r5, r8, #1
   24938:	cmpeq	sl, r6
   2493c:	bhi	24918 <grisu3_diy_fp_encode_double@@Base+0x424>
   24940:	ldr	lr, [pc, #216]	; 24a20 <grisu3_diy_fp_encode_double@@Base+0x52c>
   24944:	mov	r6, #0
   24948:	cmp	r8, lr
   2494c:	movge	r5, lr
   24950:	bge	24964 <grisu3_diy_fp_encode_double@@Base+0x470>
   24954:	mov	r7, #0
   24958:	b	249b0 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   2495c:	adds	sl, sl, sl
   24960:	adc	fp, fp, fp
   24964:	and	r3, fp, #1048576	; 0x100000
   24968:	cmp	r8, r5
   2496c:	str	r6, [sp, #8]
   24970:	mov	lr, r8
   24974:	str	r3, [sp, #12]
   24978:	beq	249dc <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2497c:	ldrd	r2, [sp, #8]
   24980:	sub	r8, r8, #1
   24984:	orrs	r3, r2, r3
   24988:	beq	2495c <grisu3_diy_fp_encode_double@@Base+0x468>
   2498c:	add	lr, lr, #1072	; 0x430
   24990:	add	lr, lr, #3
   24994:	asr	r3, lr, #31
   24998:	mov	r2, lr
   2499c:	strd	r2, [sp, #8]
   249a0:	ldr	r2, [sp, #8]
   249a4:	ubfx	r3, fp, #0, #20
   249a8:	mov	r6, sl
   249ac:	orr	r7, r3, r2, lsl #20
   249b0:	ldr	r3, [sp, #116]	; 0x74
   249b4:	cmp	r1, r4
   249b8:	sub	r0, r0, ip
   249bc:	movgt	r1, #0
   249c0:	movle	r1, #1
   249c4:	cmp	r0, r4
   249c8:	movlt	r0, r1
   249cc:	orrge	r0, r1, #1
   249d0:	strd	r6, [r3]
   249d4:	add	sp, sp, #76	; 0x4c
   249d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249dc:	ldrd	r2, [sp, #8]
   249e0:	orrs	r3, r2, r3
   249e4:	beq	249a0 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   249e8:	b	2498c <grisu3_diy_fp_encode_double@@Base+0x498>
   249ec:	muleq	r3, r0, r4
   249f0:	andeq	r3, r3, sl, ror #26
   249f4:	andeq	r3, r3, r1, asr #27
   249f8:			; <UNDEFINED> instruction: 0xffc00000
   249fc:	andeq	r3, r3, r0, ror #27
   24a00:	andeq	r3, r3, r8, ror r4
   24a04:	andeq	r3, r3, fp, lsl #28
   24a08:	andeq	r3, r3, sl, lsl lr
   24a0c:	andeq	r3, r3, r0, lsr #20
   24a10:	andeq	r3, r3, r5, lsr lr
   24a14:	andeq	r5, r4, r8, asr #6
   24a18:			; <UNDEFINED> instruction: 0xfffffc0e
   24a1c:			; <UNDEFINED> instruction: 0x001fffff
   24a20:			; <UNDEFINED> instruction: 0xfffffbce
   24a24:	cmp	r1, #1000	; 0x3e8
   24a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a2c:	mov	r3, #0
   24a30:	addle	r1, r1, #1
   24a34:	addgt	r1, r0, #1000	; 0x3e8
   24a38:	mov	r8, r2
   24a3c:	addle	r1, r0, r1
   24a40:	mov	r2, #0
   24a44:	addgt	r1, r1, #1
   24a48:	cmp	r1, r0
   24a4c:	sub	sp, sp, #44	; 0x2c
   24a50:	mov	r7, r0
   24a54:	strd	r2, [r8]
   24a58:	beq	24b1c <grisu3_diy_fp_encode_double@@Base+0x628>
   24a5c:	ldrb	r3, [r0]
   24a60:	cmp	r3, #45	; 0x2d
   24a64:	movne	r6, r0
   24a68:	movne	r3, #0
   24a6c:	bne	24a88 <grisu3_diy_fp_encode_double@@Base+0x594>
   24a70:	add	r6, r0, #1
   24a74:	cmp	r1, r6
   24a78:	movne	r3, #1
   24a7c:	bne	24a88 <grisu3_diy_fp_encode_double@@Base+0x594>
   24a80:	mov	r7, #0
   24a84:	b	24b1c <grisu3_diy_fp_encode_double@@Base+0x628>
   24a88:	ldrb	r0, [r6]
   24a8c:	str	r3, [sp, #20]
   24a90:	cmp	r0, #48	; 0x30
   24a94:	bne	24b04 <grisu3_diy_fp_encode_double@@Base+0x610>
   24a98:	add	r3, r6, #1
   24a9c:	cmp	r1, r3
   24aa0:	beq	24ab4 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   24aa4:	ldrb	r2, [r6, #1]
   24aa8:	orr	r2, r2, #32
   24aac:	cmp	r2, #120	; 0x78
   24ab0:	beq	24b1c <grisu3_diy_fp_encode_double@@Base+0x628>
   24ab4:	cmp	r1, r3
   24ab8:	mov	r6, r3
   24abc:	beq	24cc0 <grisu3_diy_fp_encode_double@@Base+0x7cc>
   24ac0:	ldrb	r2, [r3], #1
   24ac4:	cmp	r2, #48	; 0x30
   24ac8:	beq	24ab4 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   24acc:	mov	sl, #0
   24ad0:	mov	fp, #0
   24ad4:	mov	r2, r6
   24ad8:	mov	ip, #10
   24adc:	cmp	r1, r2
   24ae0:	mov	r0, r2
   24ae4:	beq	24afc <grisu3_diy_fp_encode_double@@Base+0x608>
   24ae8:	ldrb	r3, [r2]
   24aec:	add	r2, r2, #1
   24af0:	sub	lr, r3, #48	; 0x30
   24af4:	cmp	lr, #9
   24af8:	bls	24b3c <grisu3_diy_fp_encode_double@@Base+0x648>
   24afc:	mov	ip, #0
   24b00:	b	24b68 <grisu3_diy_fp_encode_double@@Base+0x674>
   24b04:	sub	r3, r0, #49	; 0x31
   24b08:	cmp	r3, #8
   24b0c:	bls	24b28 <grisu3_diy_fp_encode_double@@Base+0x634>
   24b10:	ldr	r3, [sp, #20]
   24b14:	cmp	r3, #0
   24b18:	movne	r7, #0
   24b1c:	mov	r0, r7
   24b20:	add	sp, sp, #44	; 0x2c
   24b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b28:	sub	r0, r0, #48	; 0x30
   24b2c:	add	r6, r6, #1
   24b30:	mov	sl, r0
   24b34:	asr	fp, r0, #31
   24b38:	b	24ad4 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   24b3c:	add	r5, pc, #748	; 0x2ec
   24b40:	ldrd	r4, [r5]
   24b44:	cmp	fp, r5
   24b48:	cmpeq	sl, r4
   24b4c:	bls	24c98 <grisu3_diy_fp_encode_double@@Base+0x7a4>
   24b50:	cmp	r3, #52	; 0x34
   24b54:	mov	ip, #1
   24b58:	movls	r3, #0
   24b5c:	movhi	r3, #1
   24b60:	adds	sl, sl, r3
   24b64:	adc	fp, fp, #0
   24b68:	sub	r6, r0, r6
   24b6c:	mov	lr, r0
   24b70:	cmp	lr, r1
   24b74:	mov	r4, lr
   24b78:	sub	r2, lr, r0
   24b7c:	beq	24d08 <grisu3_diy_fp_encode_double@@Base+0x814>
   24b80:	ldrb	r3, [lr], #1
   24b84:	cmp	r3, #48	; 0x30
   24b88:	beq	24b70 <grisu3_diy_fp_encode_double@@Base+0x67c>
   24b8c:	sub	r3, r3, #49	; 0x31
   24b90:	cmp	r3, #8
   24b94:	bhi	24bc0 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   24b98:	mov	r3, lr
   24b9c:	cmp	r3, r1
   24ba0:	mov	r4, r3
   24ba4:	sub	r2, r3, r0
   24ba8:	beq	24dd8 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   24bac:	ldrb	ip, [r3], #1
   24bb0:	sub	ip, ip, #48	; 0x30
   24bb4:	cmp	ip, #9
   24bb8:	bls	24b9c <grisu3_diy_fp_encode_double@@Base+0x6a8>
   24bbc:	mov	ip, #1
   24bc0:	ldrb	r3, [r4]
   24bc4:	cmp	r3, #46	; 0x2e
   24bc8:	bne	24d0c <grisu3_diy_fp_encode_double@@Base+0x818>
   24bcc:	ldrb	r3, [r4, #1]
   24bd0:	add	r0, r4, #1
   24bd4:	sub	r3, r3, #48	; 0x30
   24bd8:	cmp	r3, #9
   24bdc:	movls	r9, #10
   24be0:	strls	r0, [sp, #8]
   24be4:	bhi	24a80 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24be8:	ldr	r3, [sp, #8]
   24bec:	cmp	r3, r1
   24bf0:	beq	24c3c <grisu3_diy_fp_encode_double@@Base+0x748>
   24bf4:	mov	lr, r3
   24bf8:	ldrb	r3, [lr], #1
   24bfc:	sub	r5, r3, #48	; 0x30
   24c00:	cmp	r5, #9
   24c04:	bhi	24c3c <grisu3_diy_fp_encode_double@@Base+0x748>
   24c08:	add	r5, pc, #544	; 0x220
   24c0c:	ldrd	r4, [r5]
   24c10:	cmp	fp, r5
   24c14:	cmpeq	sl, r4
   24c18:	bls	24cd8 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   24c1c:	cmp	ip, #0
   24c20:	bne	24c3c <grisu3_diy_fp_encode_double@@Base+0x748>
   24c24:	cmp	r3, #52	; 0x34
   24c28:	mov	ip, #1
   24c2c:	movls	r3, #0
   24c30:	movhi	r3, #1
   24c34:	adds	sl, sl, r3
   24c38:	adc	fp, fp, #0
   24c3c:	ldr	r3, [sp, #8]
   24c40:	sub	r0, r3, r0
   24c44:	sub	r5, r2, r3
   24c48:	add	r6, r6, r0
   24c4c:	cmp	r1, r3
   24c50:	mov	r4, r3
   24c54:	add	r2, r5, r3
   24c58:	beq	24d08 <grisu3_diy_fp_encode_double@@Base+0x814>
   24c5c:	ldrb	r0, [r3], #1
   24c60:	cmp	r0, #48	; 0x30
   24c64:	beq	24c4c <grisu3_diy_fp_encode_double@@Base+0x758>
   24c68:	sub	r0, r0, #49	; 0x31
   24c6c:	cmp	r0, #8
   24c70:	bhi	24d0c <grisu3_diy_fp_encode_double@@Base+0x818>
   24c74:	cmp	r3, r1
   24c78:	mov	r4, r3
   24c7c:	beq	24dd8 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   24c80:	ldrb	r0, [r3], #1
   24c84:	sub	r0, r0, #48	; 0x30
   24c88:	cmp	r0, #9
   24c8c:	bls	24c74 <grisu3_diy_fp_encode_double@@Base+0x780>
   24c90:	mov	ip, #1
   24c94:	b	24d0c <grisu3_diy_fp_encode_double@@Base+0x818>
   24c98:	umull	r4, r5, sl, ip
   24c9c:	mla	r5, ip, fp, r5
   24ca0:	subs	r0, r4, #48	; 0x30
   24ca4:	str	r0, [sp, #8]
   24ca8:	sbc	r0, r5, #0
   24cac:	str	r0, [sp, #12]
   24cb0:	ldrd	sl, [sp, #8]
   24cb4:	adds	sl, sl, r3
   24cb8:	adc	fp, fp, #0
   24cbc:	b	24adc <grisu3_diy_fp_encode_double@@Base+0x5e8>
   24cc0:	mov	r0, r1
   24cc4:	mov	r6, r1
   24cc8:	mov	ip, #0
   24ccc:	mov	sl, #0
   24cd0:	mov	fp, #0
   24cd4:	b	24b68 <grisu3_diy_fp_encode_double@@Base+0x674>
   24cd8:	umull	r4, r5, sl, r9
   24cdc:	sub	r2, r2, #1
   24ce0:	str	lr, [sp, #8]
   24ce4:	mla	r5, r9, fp, r5
   24ce8:	subs	sl, r4, #48	; 0x30
   24cec:	str	sl, [sp, #24]
   24cf0:	sbc	r4, r5, #0
   24cf4:	str	r4, [sp, #28]
   24cf8:	ldrd	sl, [sp, #24]
   24cfc:	adds	sl, sl, r3
   24d00:	adc	fp, fp, #0
   24d04:	b	24be8 <grisu3_diy_fp_encode_double@@Base+0x6f4>
   24d08:	mov	r4, r1
   24d0c:	cmp	r4, r1
   24d10:	add	r5, r2, r6
   24d14:	beq	24e24 <grisu3_diy_fp_encode_double@@Base+0x930>
   24d18:	ldrb	r3, [r4]
   24d1c:	orr	r3, r3, #32
   24d20:	cmp	r3, #101	; 0x65
   24d24:	bne	24e24 <grisu3_diy_fp_encode_double@@Base+0x930>
   24d28:	sub	r3, r1, r4
   24d2c:	cmp	r3, #1
   24d30:	ble	24a80 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24d34:	ldrb	r3, [r4, #1]
   24d38:	cmp	r3, #43	; 0x2b
   24d3c:	bne	24de0 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   24d40:	add	r4, r4, #2
   24d44:	cmp	r1, r4
   24d48:	beq	24a80 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24d4c:	mov	lr, #0
   24d50:	ldrb	r2, [r4]
   24d54:	sub	r2, r2, #48	; 0x30
   24d58:	uxtb	r3, r2
   24d5c:	cmp	r3, #9
   24d60:	addls	r0, r4, #1
   24d64:	bhi	24a80 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24d68:	cmp	r0, r1
   24d6c:	mov	r4, r0
   24d70:	bne	24e00 <grisu3_diy_fp_encode_double@@Base+0x90c>
   24d74:	cmp	lr, #0
   24d78:	rsbne	r2, r2, #0
   24d7c:	cmp	r1, r4
   24d80:	add	r5, r2, r5
   24d84:	beq	24a80 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24d88:	orrs	r3, sl, fp
   24d8c:	moveq	r2, #1
   24d90:	movne	r2, #0
   24d94:	cmn	r5, #324	; 0x144
   24d98:	movge	r3, #0
   24d9c:	movlt	r3, #1
   24da0:	orrs	r3, r2, r3
   24da4:	bne	24dc0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   24da8:	movw	r3, #310	; 0x136
   24dac:	cmp	r5, r3
   24db0:	ble	24e40 <grisu3_diy_fp_encode_double@@Base+0x94c>
   24db4:	ldr	r3, [pc, #124]	; 24e38 <grisu3_diy_fp_encode_double@@Base+0x944>
   24db8:	mov	r2, #0
   24dbc:	strd	r2, [r8]
   24dc0:	ldr	r3, [sp, #20]
   24dc4:	cmp	r3, #0
   24dc8:	vldrne	d7, [r8]
   24dcc:	vnegne.f64	d7, d7
   24dd0:	vstrne	d7, [r8]
   24dd4:	b	250f0 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   24dd8:	mov	r4, r1
   24ddc:	b	24c90 <grisu3_diy_fp_encode_double@@Base+0x79c>
   24de0:	cmp	r3, #45	; 0x2d
   24de4:	addne	r4, r4, #1
   24de8:	bne	24d4c <grisu3_diy_fp_encode_double@@Base+0x858>
   24dec:	add	r4, r4, #2
   24df0:	cmp	r1, r4
   24df4:	beq	24a80 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24df8:	mov	lr, #1
   24dfc:	b	24d50 <grisu3_diy_fp_encode_double@@Base+0x85c>
   24e00:	ldrb	r3, [r0], #1
   24e04:	sub	r9, r3, #48	; 0x30
   24e08:	cmp	r9, #9
   24e0c:	bhi	24d74 <grisu3_diy_fp_encode_double@@Base+0x880>
   24e10:	cmp	r2, #32768	; 0x8000
   24e14:	movlt	r4, #10
   24e18:	mlalt	r2, r4, r2, r3
   24e1c:	sublt	r2, r2, #48	; 0x30
   24e20:	b	24d68 <grisu3_diy_fp_encode_double@@Base+0x874>
   24e24:	mov	r2, #0
   24e28:	b	24d7c <grisu3_diy_fp_encode_double@@Base+0x888>
   24e2c:	nop	{0}
   24e30:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   24e34:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   24e38:	svcvc	0x00f00000	; IMB
   24e3c:			; <UNDEFINED> instruction: 0x001fffff
   24e40:	ldr	r3, [pc, #-12]	; 24e3c <grisu3_diy_fp_encode_double@@Base+0x948>
   24e44:	mvn	r2, #0
   24e48:	cmp	fp, r3
   24e4c:	cmpeq	sl, r2
   24e50:	movls	r3, #1
   24e54:	movhi	r3, #0
   24e58:	cmp	r5, #22
   24e5c:	movhi	r3, #0
   24e60:	andls	r3, r3, #1
   24e64:	cmp	r3, #0
   24e68:	beq	250b0 <grisu3_diy_fp_encode_double@@Base+0xbbc>
   24e6c:	mov	r0, sl
   24e70:	mov	r1, fp
   24e74:	bl	2e394 <flatcc_json_printer_clear@@Base+0x384>
   24e78:	sub	r2, r5, r6
   24e7c:	vmov	d7, r0, r1
   24e80:	add	r2, r2, #22
   24e84:	cmp	r2, #44	; 0x2c
   24e88:	ldrls	pc, [pc, r2, lsl #2]
   24e8c:	b	24f4c <grisu3_diy_fp_encode_double@@Base+0xa58>
   24e90:	andeq	r4, r2, r4, asr #30
   24e94:	andeq	r4, r2, r4, asr pc
   24e98:	andeq	r4, r2, ip, asr pc
   24e9c:	andeq	r4, r2, r4, ror #30
   24ea0:	andeq	r4, r2, ip, ror #30
   24ea4:	andeq	r4, r2, r4, ror pc
   24ea8:	andeq	r4, r2, ip, ror pc
   24eac:	andeq	r4, r2, r4, lsl #31
   24eb0:	andeq	r4, r2, ip, lsl #31
   24eb4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   24eb8:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   24ebc:	andeq	r4, r2, r4, lsr #31
   24ec0:	andeq	r4, r2, ip, lsr #31
   24ec4:			; <UNDEFINED> instruction: 0x00024fb4
   24ec8:			; <UNDEFINED> instruction: 0x00024fbc
   24ecc:	andeq	r4, r2, r4, asr #31
   24ed0:	andeq	r4, r2, ip, asr #31
   24ed4:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24ed8:	ldrdeq	r4, [r2], -ip
   24edc:	andeq	r4, r2, r4, ror #31
   24ee0:	andeq	r4, r2, ip, ror #31
   24ee4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24ee8:	andeq	r4, r2, ip, asr #30
   24eec:	strdeq	r4, [r2], -ip
   24ef0:	andeq	r5, r2, r8
   24ef4:	andeq	r5, r2, r0, lsl r0
   24ef8:	andeq	r5, r2, r8, lsl r0
   24efc:	andeq	r5, r2, r0, lsr #32
   24f00:	andeq	r5, r2, r8, lsr #32
   24f04:	andeq	r5, r2, r0, lsr r0
   24f08:	andeq	r5, r2, r8, lsr r0
   24f0c:	andeq	r5, r2, r0, asr #32
   24f10:	andeq	r5, r2, r8, asr #32
   24f14:	andeq	r5, r2, r0, asr r0
   24f18:	andeq	r5, r2, r8, asr r0
   24f1c:	andeq	r5, r2, r0, rrx
   24f20:	andeq	r5, r2, r8, rrx
   24f24:	andeq	r5, r2, r0, ror r0
   24f28:	andeq	r5, r2, r8, ror r0
   24f2c:	andeq	r5, r2, r0, lsl #1
   24f30:	andeq	r5, r2, r8, lsl #1
   24f34:	muleq	r2, r0, r0
   24f38:	muleq	r2, r8, r0
   24f3c:	andeq	r5, r2, r0, lsr #1
   24f40:	andeq	r5, r2, r8, lsr #1
   24f44:	vldr	d6, [pc, #428]	; 250f8 <grisu3_diy_fp_encode_double@@Base+0xc04>
   24f48:	vdiv.f64	d7, d7, d6
   24f4c:	vstr	d7, [r8]
   24f50:	b	24dc0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   24f54:	vldr	d6, [pc, #420]	; 25100 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   24f58:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f5c:	vldr	d6, [pc, #420]	; 25108 <grisu3_diy_fp_encode_double@@Base+0xc14>
   24f60:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f64:	vldr	d6, [pc, #420]	; 25110 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   24f68:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f6c:	vldr	d6, [pc, #420]	; 25118 <grisu3_diy_fp_encode_double@@Base+0xc24>
   24f70:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f74:	vldr	d6, [pc, #420]	; 25120 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   24f78:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f7c:	vldr	d6, [pc, #420]	; 25128 <grisu3_diy_fp_encode_double@@Base+0xc34>
   24f80:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f84:	vldr	d6, [pc, #420]	; 25130 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   24f88:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f8c:	vldr	d6, [pc, #420]	; 25138 <grisu3_diy_fp_encode_double@@Base+0xc44>
   24f90:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f94:	vldr	d6, [pc, #420]	; 25140 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   24f98:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24f9c:	vldr	d6, [pc, #420]	; 25148 <grisu3_diy_fp_encode_double@@Base+0xc54>
   24fa0:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fa4:	vldr	d6, [pc, #420]	; 25150 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   24fa8:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fac:	vldr	d6, [pc, #420]	; 25158 <grisu3_diy_fp_encode_double@@Base+0xc64>
   24fb0:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fb4:	vldr	d6, [pc, #420]	; 25160 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   24fb8:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fbc:	vldr	d6, [pc, #420]	; 25168 <grisu3_diy_fp_encode_double@@Base+0xc74>
   24fc0:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fc4:	vldr	d6, [pc, #420]	; 25170 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   24fc8:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fcc:	vldr	d6, [pc, #420]	; 25178 <grisu3_diy_fp_encode_double@@Base+0xc84>
   24fd0:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fd4:	vldr	d6, [pc, #420]	; 25180 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   24fd8:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fdc:	vldr	d6, [pc, #420]	; 25188 <grisu3_diy_fp_encode_double@@Base+0xc94>
   24fe0:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fe4:	vldr	d6, [pc, #420]	; 25190 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   24fe8:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24fec:	vldr	d6, [pc, #420]	; 25198 <grisu3_diy_fp_encode_double@@Base+0xca4>
   24ff0:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24ff4:	vldr	d6, [pc, #420]	; 251a0 <grisu3_diy_fp_encode_double@@Base+0xcac>
   24ff8:	b	24f48 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24ffc:	vldr	d6, [pc, #412]	; 251a0 <grisu3_diy_fp_encode_double@@Base+0xcac>
   25000:	vmul.f64	d7, d7, d6
   25004:	b	24f4c <grisu3_diy_fp_encode_double@@Base+0xa58>
   25008:	vldr	d6, [pc, #392]	; 25198 <grisu3_diy_fp_encode_double@@Base+0xca4>
   2500c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25010:	vldr	d6, [pc, #376]	; 25190 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   25014:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25018:	vldr	d6, [pc, #360]	; 25188 <grisu3_diy_fp_encode_double@@Base+0xc94>
   2501c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25020:	vldr	d6, [pc, #344]	; 25180 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   25024:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25028:	vldr	d6, [pc, #328]	; 25178 <grisu3_diy_fp_encode_double@@Base+0xc84>
   2502c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25030:	vldr	d6, [pc, #312]	; 25170 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   25034:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25038:	vldr	d6, [pc, #296]	; 25168 <grisu3_diy_fp_encode_double@@Base+0xc74>
   2503c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25040:	vldr	d6, [pc, #280]	; 25160 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   25044:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25048:	vldr	d6, [pc, #264]	; 25158 <grisu3_diy_fp_encode_double@@Base+0xc64>
   2504c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25050:	vldr	d6, [pc, #248]	; 25150 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   25054:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25058:	vldr	d6, [pc, #232]	; 25148 <grisu3_diy_fp_encode_double@@Base+0xc54>
   2505c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25060:	vldr	d6, [pc, #216]	; 25140 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   25064:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25068:	vldr	d6, [pc, #200]	; 25138 <grisu3_diy_fp_encode_double@@Base+0xc44>
   2506c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25070:	vldr	d6, [pc, #184]	; 25130 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   25074:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25078:	vldr	d6, [pc, #168]	; 25128 <grisu3_diy_fp_encode_double@@Base+0xc34>
   2507c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25080:	vldr	d6, [pc, #152]	; 25120 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   25084:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25088:	vldr	d6, [pc, #136]	; 25118 <grisu3_diy_fp_encode_double@@Base+0xc24>
   2508c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25090:	vldr	d6, [pc, #120]	; 25110 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   25094:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   25098:	vldr	d6, [pc, #104]	; 25108 <grisu3_diy_fp_encode_double@@Base+0xc14>
   2509c:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   250a0:	vldr	d6, [pc, #88]	; 25100 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   250a4:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   250a8:	vldr	d6, [pc, #72]	; 250f8 <grisu3_diy_fp_encode_double@@Base+0xc04>
   250ac:	b	25000 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   250b0:	mov	r3, r6
   250b4:	mov	r2, r5
   250b8:	str	ip, [sp]
   250bc:	mov	r0, sl
   250c0:	mov	r1, fp
   250c4:	str	r8, [sp, #4]
   250c8:	bl	244f4 <grisu3_diy_fp_encode_double@@Base>
   250cc:	cmp	r0, #0
   250d0:	bne	24dc0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   250d4:	add	r1, sp, #36	; 0x24
   250d8:	mov	r0, r7
   250dc:	bl	145d8 <strtod@plt>
   250e0:	ldr	r3, [sp, #36]	; 0x24
   250e4:	vstr	d0, [r8]
   250e8:	cmp	r4, r3
   250ec:	movcs	r4, r3
   250f0:	mov	r7, r4
   250f4:	b	24b1c <grisu3_diy_fp_encode_double@@Base+0x628>
   250f8:			; <UNDEFINED> instruction: 0x064dd592
   250fc:	strmi	pc, [r0], #207	; 0xcf
   25100:	usatle	lr, #2, r0, asr #30
   25104:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   25108:	ldmvc	r5!, {r6, sl, fp, pc}
   2510c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   25110:	addsvs	r3, r1, r0, lsl #26
   25114:	mvnmi	r5, #228, 16	; 0xe40000
   25118:	strbvs	ip, [lr, -r0, lsl #16]
   2511c:			; <UNDEFINED> instruction: 0x43abc16d
   25120:	ldrbhi	sl, [r8]
   25124:	cmnmi	r6, #1459617792	; 0x57000000
   25128:	strbcc	r8, [r0, r0]!
   2512c:	movtmi	ip, #4985	; 0x1379
   25130:	ldrtcs	r0, [r4], -r0
   25134:	movwmi	r6, #52213	; 0xcbf5
   25138:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2513c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   25140:	strb	r0, [r0, #-0]
   25144:	adcmi	r3, r2, #156	; 0x9c
   25148:	andge	r0, r0, #0
   2514c:	rsbmi	r1, sp, #148, 20	; 0x94000
   25150:	stmda	r0, {}	; <UNPREDICTABLE>
   25154:	eorsmi	r4, r7, #7733248	; 0x760000
   25158:	andcs	r0, r0, r0
   2515c:	andmi	sl, r2, #95	; 0x5f
   25160:	andeq	r0, r0, r0
   25164:	bicmi	ip, sp, r5, ror #26
   25168:	andeq	r0, r0, r0
   2516c:	orrsmi	sp, r7, r4, lsl #15
   25170:	andeq	r0, r0, r0
   25174:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   25178:	andeq	r0, r0, r0
   2517c:	smlawbmi	lr, r0, r4, r8
   25180:	andeq	r0, r0, r0
   25184:	rscsmi	r6, r8, r0, lsl #20
   25188:	andeq	r0, r0, r0
   2518c:	sbcmi	r8, r3, r0, lsl #16
   25190:	andeq	r0, r0, r0
   25194:	addmi	r4, pc, r0
   25198:	andeq	r0, r0, r0
   2519c:	subsmi	r0, r9, r0
   251a0:	andeq	r0, r0, r0
   251a4:	eormi	r0, r4, r0

000251a8 <flatcc_json_parser_error_string@@Base>:
   251a8:	cmp	r0, #34	; 0x22
   251ac:	ldrls	r3, [pc, #12]	; 251c0 <flatcc_json_parser_error_string@@Base+0x18>
   251b0:	addls	r3, r3, r0, lsl #2
   251b4:	ldrls	r0, [r3, #1476]	; 0x5c4
   251b8:	ldrhi	r0, [pc, #4]	; 251c4 <flatcc_json_parser_error_string@@Base+0x1c>
   251bc:	bx	lr
   251c0:	andeq	r3, r3, r8, ror r4
   251c4:	andeq	r3, r3, r4, asr #32

000251c8 <flatcc_json_parser_set_error@@Base>:
   251c8:	ldr	ip, [r0, #24]
   251cc:	cmp	ip, #0
   251d0:	bne	251ec <flatcc_json_parser_set_error@@Base+0x24>
   251d4:	str	r3, [r0, #24]
   251d8:	ldr	r3, [r0, #4]
   251dc:	str	r1, [r0, #36]	; 0x24
   251e0:	sub	r3, r1, r3
   251e4:	add	r3, r3, #1
   251e8:	str	r3, [r0, #20]
   251ec:	mov	r0, r2
   251f0:	bx	lr
   251f4:	ldr	r3, [r0, #12]
   251f8:	cmp	r3, #0
   251fc:	beq	2528c <flatcc_json_parser_set_error@@Base+0xc4>
   25200:	mov	r3, r1
   25204:	push	{lr}		; (str lr, [sp, #-4]!)
   25208:	mov	lr, #0
   2520c:	cmp	r3, r2
   25210:	mov	r1, r3
   25214:	bne	2522c <flatcc_json_parser_set_error@@Base+0x64>
   25218:	cmp	lr, #46	; 0x2e
   2521c:	bne	252b4 <flatcc_json_parser_set_error@@Base+0xec>
   25220:	pop	{lr}		; (ldr lr, [sp], #4)
   25224:	mov	r3, #5
   25228:	b	251c8 <flatcc_json_parser_set_error@@Base>
   2522c:	ldrb	ip, [r3], #1
   25230:	cmp	ip, #32
   25234:	bls	25218 <flatcc_json_parser_set_error@@Base+0x50>
   25238:	cmp	ip, #46	; 0x2e
   2523c:	cmpne	ip, #95	; 0x5f
   25240:	beq	25268 <flatcc_json_parser_set_error@@Base+0xa0>
   25244:	tst	ip, #128	; 0x80
   25248:	bne	25268 <flatcc_json_parser_set_error@@Base+0xa0>
   2524c:	sub	lr, ip, #48	; 0x30
   25250:	cmp	lr, #9
   25254:	bls	25268 <flatcc_json_parser_set_error@@Base+0xa0>
   25258:	orr	lr, ip, #32
   2525c:	sub	lr, lr, #97	; 0x61
   25260:	cmp	lr, #25
   25264:	bhi	252b4 <flatcc_json_parser_set_error@@Base+0xec>
   25268:	mov	lr, ip
   2526c:	b	2520c <flatcc_json_parser_set_error@@Base+0x44>
   25270:	cmp	r3, #92	; 0x5c
   25274:	bne	25288 <flatcc_json_parser_set_error@@Base+0xc0>
   25278:	sub	r3, r2, r1
   2527c:	cmp	r3, #1
   25280:	ble	252ac <flatcc_json_parser_set_error@@Base+0xe4>
   25284:	add	r1, r1, #1
   25288:	add	r1, r1, #1
   2528c:	cmp	r1, r2
   25290:	beq	252ac <flatcc_json_parser_set_error@@Base+0xe4>
   25294:	ldrb	r3, [r1]
   25298:	cmp	r3, #34	; 0x22
   2529c:	bne	25270 <flatcc_json_parser_set_error@@Base+0xa8>
   252a0:	add	r1, r1, #1
   252a4:	mov	r0, r1
   252a8:	bx	lr
   252ac:	mov	r3, #20
   252b0:	b	25228 <flatcc_json_parser_set_error@@Base+0x60>
   252b4:	mov	r0, r1
   252b8:	pop	{pc}		; (ldr pc, [sp], #4)
   252bc:	cmp	r1, r2
   252c0:	beq	252d0 <flatcc_json_parser_set_error@@Base+0x108>
   252c4:	ldrb	r3, [r1]
   252c8:	cmp	r3, #34	; 0x22
   252cc:	beq	252d8 <flatcc_json_parser_set_error@@Base+0x110>
   252d0:	mov	r3, #16
   252d4:	b	251c8 <flatcc_json_parser_set_error@@Base>
   252d8:	add	r0, r1, #1
   252dc:	bx	lr
   252e0:	cmp	r1, r2
   252e4:	beq	252f4 <flatcc_json_parser_set_error@@Base+0x12c>
   252e8:	ldrb	r3, [r1]
   252ec:	cmp	r3, #34	; 0x22
   252f0:	beq	252fc <flatcc_json_parser_set_error@@Base+0x134>
   252f4:	mov	r3, #20
   252f8:	b	251c8 <flatcc_json_parser_set_error@@Base>
   252fc:	add	r0, r1, #1
   25300:	bx	lr

00025304 <flatcc_json_parser_string_part@@Base>:
   25304:	cmp	r2, r1
   25308:	bne	25378 <flatcc_json_parser_string_part@@Base+0x74>
   2530c:	mov	r3, #20
   25310:	mov	r1, r2
   25314:	b	25368 <flatcc_json_parser_string_part@@Base+0x64>
   25318:	cmp	r2, r1
   2531c:	beq	2536c <flatcc_json_parser_string_part@@Base+0x68>
   25320:	mov	lr, r1
   25324:	ldrb	r3, [r1], #1
   25328:	cmp	r3, #34	; 0x22
   2532c:	cmpne	r3, #31
   25330:	movhi	ip, #1
   25334:	movls	ip, #0
   25338:	cmp	r3, #92	; 0x5c
   2533c:	moveq	ip, #0
   25340:	andne	ip, ip, #1
   25344:	cmp	ip, #0
   25348:	bne	25318 <flatcc_json_parser_string_part@@Base+0x14>
   2534c:	cmp	r3, #31
   25350:	bls	2535c <flatcc_json_parser_string_part@@Base+0x58>
   25354:	mov	r0, lr
   25358:	pop	{pc}		; (ldr pc, [sp], #4)
   2535c:	mov	r3, #17
   25360:	mov	r1, lr
   25364:	pop	{lr}		; (ldr lr, [sp], #4)
   25368:	b	251c8 <flatcc_json_parser_set_error@@Base>
   2536c:	mov	r3, #20
   25370:	mov	r1, r2
   25374:	b	25364 <flatcc_json_parser_string_part@@Base+0x60>
   25378:	push	{lr}		; (str lr, [sp, #-4]!)
   2537c:	b	25320 <flatcc_json_parser_string_part@@Base+0x1c>

00025380 <flatcc_json_parser_space_ext@@Base>:
   25380:	mov	r3, r1
   25384:	cmp	r3, r2
   25388:	mov	r1, r3
   2538c:	bne	2539c <flatcc_json_parser_space_ext@@Base+0x1c>
   25390:	mov	r1, r2
   25394:	mov	r0, r1
   25398:	bx	lr
   2539c:	ldrb	ip, [r1]
   253a0:	add	r3, r3, #1
   253a4:	cmp	ip, #32
   253a8:	beq	25384 <flatcc_json_parser_space_ext@@Base+0x4>
   253ac:	ldrb	r3, [r1]
   253b0:	cmp	r3, #32
   253b4:	bhi	25394 <flatcc_json_parser_space_ext@@Base+0x14>
   253b8:	cmp	r3, #10
   253bc:	beq	25408 <flatcc_json_parser_space_ext@@Base+0x88>
   253c0:	bhi	253d4 <flatcc_json_parser_space_ext@@Base+0x54>
   253c4:	cmp	r3, #9
   253c8:	beq	25428 <flatcc_json_parser_space_ext@@Base+0xa8>
   253cc:	mov	r3, #5
   253d0:	b	251c8 <flatcc_json_parser_set_error@@Base>
   253d4:	cmp	r3, #13
   253d8:	beq	253e8 <flatcc_json_parser_space_ext@@Base+0x68>
   253dc:	cmp	r3, #32
   253e0:	beq	25380 <flatcc_json_parser_space_ext@@Base>
   253e4:	b	253cc <flatcc_json_parser_space_ext@@Base+0x4c>
   253e8:	sub	r3, r2, r1
   253ec:	cmp	r3, #1
   253f0:	ldrbgt	r3, [r1, #1]
   253f4:	movle	r3, #0
   253f8:	subgt	r3, r3, #10
   253fc:	clzgt	r3, r3
   25400:	lsrgt	r3, r3, #5
   25404:	add	r1, r1, r3
   25408:	ldr	r3, [r0, #16]
   2540c:	add	r1, r1, #1
   25410:	str	r1, [r0, #4]
   25414:	add	r3, r3, #1
   25418:	str	r3, [r0, #16]
   2541c:	cmp	r2, r1
   25420:	bne	253ac <flatcc_json_parser_space_ext@@Base+0x2c>
   25424:	b	25390 <flatcc_json_parser_space_ext@@Base+0x10>
   25428:	add	r1, r1, #1
   2542c:	b	2541c <flatcc_json_parser_space_ext@@Base+0x9c>
   25430:	sub	r3, r2, r1
   25434:	cmp	r3, #1
   25438:	ble	2545c <flatcc_json_parser_space_ext@@Base+0xdc>
   2543c:	ldrb	r3, [r1]
   25440:	cmp	r3, #32
   25444:	bhi	25460 <flatcc_json_parser_space_ext@@Base+0xe0>
   25448:	bne	2545c <flatcc_json_parser_space_ext@@Base+0xdc>
   2544c:	ldrb	r3, [r1, #1]
   25450:	cmp	r3, #32
   25454:	addhi	r1, r1, #1
   25458:	bhi	25460 <flatcc_json_parser_space_ext@@Base+0xe0>
   2545c:	b	25380 <flatcc_json_parser_space_ext@@Base>
   25460:	mov	r0, r1
   25464:	bx	lr
   25468:	push	{r4, r5, r6, lr}
   2546c:	mov	r5, r3
   25470:	mov	r6, r0
   25474:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   25478:	cmp	r2, r0
   2547c:	moveq	r3, #0
   25480:	beq	2550c <flatcc_json_parser_space_ext@@Base+0x18c>
   25484:	ldrb	r3, [r0]
   25488:	mov	r4, r2
   2548c:	cmp	r3, #44	; 0x2c
   25490:	beq	254c4 <flatcc_json_parser_space_ext@@Base+0x144>
   25494:	mov	r3, #0
   25498:	str	r3, [r5]
   2549c:	ldrb	r3, [r0]
   254a0:	cmp	r3, #93	; 0x5d
   254a4:	movne	r3, #9
   254a8:	movne	r1, r0
   254ac:	bne	254e8 <flatcc_json_parser_space_ext@@Base+0x168>
   254b0:	mov	r2, r4
   254b4:	add	r1, r0, #1
   254b8:	mov	r0, r6
   254bc:	pop	{r4, r5, r6, lr}
   254c0:	b	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   254c4:	add	r1, r0, #1
   254c8:	mov	r0, r6
   254cc:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   254d0:	cmp	r2, r0
   254d4:	bne	254f4 <flatcc_json_parser_space_ext@@Base+0x174>
   254d8:	mov	r3, #0
   254dc:	mov	r1, r2
   254e0:	str	r3, [r5]
   254e4:	mov	r3, #9
   254e8:	mov	r0, r6
   254ec:	pop	{r4, r5, r6, lr}
   254f0:	b	251c8 <flatcc_json_parser_set_error@@Base>
   254f4:	ldrb	r3, [r0]
   254f8:	cmp	r3, #93	; 0x5d
   254fc:	movne	r3, #1
   25500:	moveq	r3, #0
   25504:	streq	r3, [r5]
   25508:	beq	254b0 <flatcc_json_parser_space_ext@@Base+0x130>
   2550c:	str	r3, [r5]
   25510:	pop	{r4, r5, r6, pc}
   25514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25518:	sub	sp, sp, #28
   2551c:	mov	ip, #0
   25520:	cmp	r1, r2
   25524:	mov	r6, r0
   25528:	mov	r4, r1
   2552c:	mov	r5, r2
   25530:	ldr	fp, [sp, #64]	; 0x40
   25534:	mov	sl, r3
   25538:	strb	ip, [fp]
   2553c:	beq	25570 <flatcc_json_parser_space_ext@@Base+0x1f0>
   25540:	ldrb	r3, [r1]
   25544:	cmp	r3, #34	; 0x22
   25548:	addeq	r4, r1, #1
   2554c:	streq	ip, [r0, #12]
   25550:	beq	25570 <flatcc_json_parser_space_ext@@Base+0x1f0>
   25554:	cmp	r3, #46	; 0x2e
   25558:	movne	r3, #1
   2555c:	strne	r3, [r0, #12]
   25560:	bne	25570 <flatcc_json_parser_space_ext@@Base+0x1f0>
   25564:	mov	r3, #5
   25568:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   2556c:	mov	r4, r0
   25570:	ldr	r3, [r6, #12]
   25574:	cmp	r3, #0
   25578:	bne	25590 <flatcc_json_parser_space_ext@@Base+0x210>
   2557c:	mov	r1, r4
   25580:	mov	r2, r5
   25584:	mov	r0, r6
   25588:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   2558c:	mov	r4, r0
   25590:	cmp	r5, r4
   25594:	beq	25670 <flatcc_json_parser_space_ext@@Base+0x2f0>
   25598:	mov	r8, #0
   2559c:	mov	r7, sl
   255a0:	mov	r9, r4
   255a4:	add	r3, sp, #12
   255a8:	mov	r1, r4
   255ac:	mov	r2, r5
   255b0:	mov	r0, r6
   255b4:	str	r3, [sp, #4]
   255b8:	add	r3, sp, #16
   255bc:	str	r3, [sp]
   255c0:	add	r3, sp, #8
   255c4:	ldr	ip, [r7]
   255c8:	blx	ip
   255cc:	cmp	r5, r0
   255d0:	mov	r4, r0
   255d4:	beq	25670 <flatcc_json_parser_space_ext@@Base+0x2f0>
   255d8:	cmp	r9, r0
   255dc:	bne	25630 <flatcc_json_parser_space_ext@@Base+0x2b0>
   255e0:	ldr	r3, [r7, #4]!
   255e4:	mov	r9, r0
   255e8:	cmp	r3, #0
   255ec:	bne	255a4 <flatcc_json_parser_space_ext@@Base+0x224>
   255f0:	mov	r1, r0
   255f4:	mov	r3, #23
   255f8:	mov	r2, r5
   255fc:	mov	r0, r6
   25600:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   25604:	mov	r4, r0
   25608:	b	25670 <flatcc_json_parser_space_ext@@Base+0x2f0>
   2560c:	ldrd	r2, [sp, #16]
   25610:	cmp	r3, #0
   25614:	cmpeq	r2, #255	; 0xff
   25618:	uxtbls	r8, r2
   2561c:	bls	25658 <flatcc_json_parser_space_ext@@Base+0x2d8>
   25620:	mov	r3, #7
   25624:	b	25640 <flatcc_json_parser_space_ext@@Base+0x2c0>
   25628:	mov	r4, r5
   2562c:	b	25670 <flatcc_json_parser_space_ext@@Base+0x2f0>
   25630:	ldr	r3, [sp, #8]
   25634:	cmp	r3, #0
   25638:	beq	2560c <flatcc_json_parser_space_ext@@Base+0x28c>
   2563c:	mov	r3, #8
   25640:	mov	r2, r5
   25644:	mov	r1, r4
   25648:	mov	r0, r6
   2564c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   25650:	cmp	r5, r0
   25654:	beq	25628 <flatcc_json_parser_space_ext@@Base+0x2a8>
   25658:	ldrb	r3, [fp]
   2565c:	add	r3, r8, r3
   25660:	strb	r3, [fp]
   25664:	ldr	r3, [sp, #12]
   25668:	cmp	r3, #0
   2566c:	bne	2559c <flatcc_json_parser_space_ext@@Base+0x21c>
   25670:	mov	r0, r4
   25674:	add	sp, sp, #28
   25678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2567c:	cmp	r1, r2
   25680:	push	{r4, r5, r6, lr}
   25684:	mov	ip, r2
   25688:	mov	r6, r0
   2568c:	beq	2569c <flatcc_json_parser_space_ext@@Base+0x31c>
   25690:	ldrb	r4, [r1]
   25694:	cmp	r4, #91	; 0x5b
   25698:	beq	256b8 <flatcc_json_parser_space_ext@@Base+0x338>
   2569c:	mov	r2, #0
   256a0:	mov	r0, r6
   256a4:	pop	{r4, r5, r6, lr}
   256a8:	str	r2, [r3]
   256ac:	mov	r3, #22
   256b0:	mov	r2, ip
   256b4:	b	251c8 <flatcc_json_parser_set_error@@Base>
   256b8:	add	r1, r1, #1
   256bc:	mov	r5, r3
   256c0:	mov	r4, r2
   256c4:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   256c8:	cmp	r2, r0
   256cc:	beq	256f4 <flatcc_json_parser_space_ext@@Base+0x374>
   256d0:	ldrb	r3, [r0]
   256d4:	cmp	r3, #93	; 0x5d
   256d8:	bne	256f4 <flatcc_json_parser_space_ext@@Base+0x374>
   256dc:	mov	r3, #0
   256e0:	add	r1, r0, #1
   256e4:	mov	r0, r6
   256e8:	str	r3, [r5]
   256ec:	pop	{r4, r5, r6, lr}
   256f0:	b	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   256f4:	mov	r3, #1
   256f8:	str	r3, [r5]
   256fc:	pop	{r4, r5, r6, pc}
   25700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25704:	mov	r8, r3
   25708:	sub	sp, sp, #20
   2570c:	mov	r3, #0
   25710:	mov	r5, r0
   25714:	mov	r4, r1
   25718:	mov	r6, r2
   2571c:	ldr	r0, [r0]
   25720:	str	r3, [sp, #8]
   25724:	ldr	r9, [sp, #56]	; 0x38
   25728:	ldr	sl, [sp, #64]	; 0x40
   2572c:	bl	21c28 <flatcc_builder_start_offset_vector@@Base>
   25730:	subs	r7, r0, #0
   25734:	bne	257a8 <flatcc_json_parser_space_ext@@Base+0x428>
   25738:	mov	r1, r4
   2573c:	add	r3, sp, #12
   25740:	mov	r2, r6
   25744:	mov	r0, r5
   25748:	bl	2567c <flatcc_json_parser_space_ext@@Base+0x2fc>
   2574c:	mov	r4, r0
   25750:	add	fp, sp, #8
   25754:	ldr	r3, [sp, #12]
   25758:	cmp	r3, #0
   2575c:	bne	257b0 <flatcc_json_parser_space_ext@@Base+0x430>
   25760:	cmp	r7, r9
   25764:	bne	257b8 <flatcc_json_parser_space_ext@@Base+0x438>
   25768:	mov	r1, r8
   2576c:	ldr	r0, [r5]
   25770:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   25774:	mov	r1, r0
   25778:	ldr	r0, [r5]
   2577c:	bl	22678 <flatcc_builder_end_offset_vector_for_unions@@Base>
   25780:	cmp	r0, #0
   25784:	str	r0, [sp, #8]
   25788:	beq	257a8 <flatcc_json_parser_space_ext@@Base+0x428>
   2578c:	ldrh	r1, [sp, #60]	; 0x3c
   25790:	ldr	r0, [r5]
   25794:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   25798:	cmp	r0, #0
   2579c:	ldrne	r3, [sp, #8]
   257a0:	strne	r3, [r0]
   257a4:	bne	257d0 <flatcc_json_parser_space_ext@@Base+0x450>
   257a8:	mov	r3, #33	; 0x21
   257ac:	b	257bc <flatcc_json_parser_space_ext@@Base+0x43c>
   257b0:	cmp	r7, r9
   257b4:	bne	257dc <flatcc_json_parser_space_ext@@Base+0x45c>
   257b8:	mov	r3, #30
   257bc:	mov	r1, r4
   257c0:	mov	r2, r6
   257c4:	mov	r0, r5
   257c8:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   257cc:	mov	r4, r0
   257d0:	mov	r0, r4
   257d4:	add	sp, sp, #20
   257d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257dc:	mov	r1, r8
   257e0:	ldr	r0, [r5]
   257e4:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   257e8:	ldrb	r3, [r0, r7]
   257ec:	mov	r1, r4
   257f0:	mov	r2, r6
   257f4:	mov	r0, r5
   257f8:	str	fp, [sp]
   257fc:	blx	sl
   25800:	cmp	r6, r0
   25804:	mov	r4, r0
   25808:	beq	257d0 <flatcc_json_parser_space_ext@@Base+0x450>
   2580c:	mov	r1, #1
   25810:	ldr	r0, [r5]
   25814:	bl	21838 <flatcc_builder_extend_offset_vector@@Base>
   25818:	cmp	r0, #0
   2581c:	beq	257a8 <flatcc_json_parser_space_ext@@Base+0x428>
   25820:	ldr	r3, [sp, #8]
   25824:	mov	r1, r4
   25828:	mov	r2, r6
   2582c:	add	r7, r7, #1
   25830:	str	r3, [r0]
   25834:	add	r3, sp, #12
   25838:	mov	r0, r5
   2583c:	bl	25468 <flatcc_json_parser_space_ext@@Base+0xe8>
   25840:	mov	r4, r0
   25844:	b	25754 <flatcc_json_parser_space_ext@@Base+0x3d4>

00025848 <flatcc_json_parser_string_escape@@Base>:
   25848:	push	{r4, r5, lr}
   2584c:	sub	lr, r2, r1
   25850:	cmp	lr, #1
   25854:	ble	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25858:	ldrb	ip, [r1]
   2585c:	cmp	ip, #92	; 0x5c
   25860:	beq	25878 <flatcc_json_parser_string_escape@@Base+0x30>
   25864:	mov	ip, #0
   25868:	strb	ip, [r3]
   2586c:	mov	r3, #18
   25870:	pop	{r4, r5, lr}
   25874:	b	251c8 <flatcc_json_parser_set_error@@Base>
   25878:	ldrb	ip, [r1, #1]
   2587c:	cmp	ip, #102	; 0x66
   25880:	beq	25b14 <flatcc_json_parser_string_escape@@Base+0x2cc>
   25884:	bhi	258d4 <flatcc_json_parser_string_escape@@Base+0x8c>
   25888:	cmp	ip, #47	; 0x2f
   2588c:	beq	2589c <flatcc_json_parser_string_escape@@Base+0x54>
   25890:	bhi	258ac <flatcc_json_parser_string_escape@@Base+0x64>
   25894:	cmp	ip, #34	; 0x22
   25898:	bne	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   2589c:	mov	r2, #1
   258a0:	strb	r2, [r3]
   258a4:	strb	ip, [r3, #1]
   258a8:	b	258cc <flatcc_json_parser_string_escape@@Base+0x84>
   258ac:	cmp	ip, #92	; 0x5c
   258b0:	beq	2589c <flatcc_json_parser_string_escape@@Base+0x54>
   258b4:	cmp	ip, #98	; 0x62
   258b8:	moveq	r2, #1
   258bc:	strbeq	r2, [r3]
   258c0:	moveq	r2, #8
   258c4:	bne	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   258c8:	strb	r2, [r3, #1]
   258cc:	add	r0, r1, #2
   258d0:	pop	{r4, r5, pc}
   258d4:	cmp	ip, #116	; 0x74
   258d8:	beq	25af4 <flatcc_json_parser_string_escape@@Base+0x2ac>
   258dc:	bhi	25900 <flatcc_json_parser_string_escape@@Base+0xb8>
   258e0:	cmp	ip, #110	; 0x6e
   258e4:	beq	25b04 <flatcc_json_parser_string_escape@@Base+0x2bc>
   258e8:	cmp	ip, #114	; 0x72
   258ec:	moveq	r2, #1
   258f0:	strbeq	r2, [r3]
   258f4:	moveq	r2, #13
   258f8:	beq	258c8 <flatcc_json_parser_string_escape@@Base+0x80>
   258fc:	b	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25900:	cmp	ip, #117	; 0x75
   25904:	beq	25994 <flatcc_json_parser_string_escape@@Base+0x14c>
   25908:	cmp	ip, #120	; 0x78
   2590c:	bne	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25910:	mov	ip, #1
   25914:	cmp	lr, #3
   25918:	strb	ip, [r3]
   2591c:	ble	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25920:	ldrb	ip, [r1, #2]
   25924:	sub	lr, ip, #48	; 0x30
   25928:	uxtb	r4, lr
   2592c:	cmp	r4, #9
   25930:	lslls	ip, lr, #4
   25934:	bls	25950 <flatcc_json_parser_string_escape@@Base+0x108>
   25938:	orr	ip, ip, #32
   2593c:	sub	lr, ip, #97	; 0x61
   25940:	cmp	lr, #5
   25944:	bhi	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25948:	sub	ip, ip, #87	; 0x57
   2594c:	lsl	ip, ip, #4
   25950:	ldrb	lr, [r1, #3]
   25954:	uxtb	ip, ip
   25958:	sub	r4, lr, #48	; 0x30
   2595c:	uxtb	r4, r4
   25960:	cmp	r4, #9
   25964:	orrls	ip, r4, ip
   25968:	bls	25988 <flatcc_json_parser_string_escape@@Base+0x140>
   2596c:	orr	lr, lr, #32
   25970:	sub	r4, lr, #97	; 0x61
   25974:	cmp	r4, #5
   25978:	bhi	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   2597c:	sub	lr, lr, #87	; 0x57
   25980:	orr	ip, lr, ip
   25984:	uxtb	ip, ip
   25988:	add	r0, r1, #4
   2598c:	strb	ip, [r3, #1]
   25990:	pop	{r4, r5, pc}
   25994:	cmp	lr, #5
   25998:	ble	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   2599c:	ldrb	ip, [r1, #2]
   259a0:	sub	lr, ip, #48	; 0x30
   259a4:	uxtb	r4, lr
   259a8:	cmp	r4, #9
   259ac:	lslls	ip, lr, #12
   259b0:	uxthls	ip, ip
   259b4:	bls	259d4 <flatcc_json_parser_string_escape@@Base+0x18c>
   259b8:	orr	ip, ip, #32
   259bc:	sub	lr, ip, #97	; 0x61
   259c0:	cmp	lr, #5
   259c4:	bhi	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   259c8:	sub	ip, ip, #87	; 0x57
   259cc:	lsl	ip, ip, #12
   259d0:	and	ip, ip, #61440	; 0xf000
   259d4:	ldrb	lr, [r1, #3]
   259d8:	sub	r4, lr, #48	; 0x30
   259dc:	uxtb	r5, r4
   259e0:	cmp	r5, #9
   259e4:	uxthls	r4, r4
   259e8:	orrls	ip, ip, r4, lsl #8
   259ec:	bls	25a0c <flatcc_json_parser_string_escape@@Base+0x1c4>
   259f0:	orr	lr, lr, #32
   259f4:	sub	r4, lr, #97	; 0x61
   259f8:	cmp	r4, #5
   259fc:	bhi	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25a00:	sub	lr, lr, #87	; 0x57
   25a04:	uxth	lr, lr
   25a08:	orr	ip, ip, lr, lsl #8
   25a0c:	ldrb	lr, [r1, #4]
   25a10:	and	ip, ip, #65280	; 0xff00
   25a14:	sub	r4, lr, #48	; 0x30
   25a18:	uxtb	r5, r4
   25a1c:	cmp	r5, #9
   25a20:	uxthls	r4, r4
   25a24:	orrls	ip, ip, r4, lsl #4
   25a28:	bls	25a48 <flatcc_json_parser_string_escape@@Base+0x200>
   25a2c:	orr	lr, lr, #32
   25a30:	sub	r4, lr, #97	; 0x61
   25a34:	cmp	r4, #5
   25a38:	bhi	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25a3c:	sub	lr, lr, #87	; 0x57
   25a40:	uxth	lr, lr
   25a44:	orr	ip, ip, lr, lsl #4
   25a48:	ldrb	lr, [r1, #5]
   25a4c:	uxth	ip, ip
   25a50:	sub	r4, lr, #48	; 0x30
   25a54:	uxtb	r5, r4
   25a58:	cmp	r5, #9
   25a5c:	orrls	r2, ip, r4
   25a60:	bls	25a7c <flatcc_json_parser_string_escape@@Base+0x234>
   25a64:	orr	lr, lr, #32
   25a68:	sub	r4, lr, #97	; 0x61
   25a6c:	cmp	r4, #5
   25a70:	bhi	25864 <flatcc_json_parser_string_escape@@Base+0x1c>
   25a74:	sub	r2, lr, #87	; 0x57
   25a78:	orr	r2, ip, r2
   25a7c:	uxth	r2, r2
   25a80:	cmp	r2, #127	; 0x7f
   25a84:	movls	r0, #1
   25a88:	strbls	r2, [r3, #1]
   25a8c:	strbls	r0, [r3]
   25a90:	bls	25ac0 <flatcc_json_parser_string_escape@@Base+0x278>
   25a94:	and	ip, r2, #63	; 0x3f
   25a98:	cmp	r2, #2048	; 0x800
   25a9c:	lsr	r0, r2, #6
   25aa0:	orr	ip, ip, #128	; 0x80
   25aa4:	bcs	25ac8 <flatcc_json_parser_string_escape@@Base+0x280>
   25aa8:	mov	r2, #2
   25aac:	strb	r2, [r3]
   25ab0:	mvn	r2, r0, lsl #26
   25ab4:	strb	ip, [r3, #2]
   25ab8:	mvn	r2, r2, lsr #26
   25abc:	strb	r2, [r3, #1]
   25ac0:	add	r0, r1, #6
   25ac4:	pop	{r4, r5, pc}
   25ac8:	mov	lr, #3
   25acc:	strb	lr, [r3]
   25ad0:	mvn	lr, #31
   25ad4:	orr	r2, lr, r2, lsr #12
   25ad8:	strb	ip, [r3, #3]
   25adc:	strb	r2, [r3, #1]
   25ae0:	and	r2, r0, #63	; 0x3f
   25ae4:	mvn	r2, r2, lsl #25
   25ae8:	mvn	r2, r2, lsr #25
   25aec:	strb	r2, [r3, #2]
   25af0:	b	25ac0 <flatcc_json_parser_string_escape@@Base+0x278>
   25af4:	mov	r2, #1
   25af8:	strb	r2, [r3]
   25afc:	mov	r2, #9
   25b00:	b	258c8 <flatcc_json_parser_string_escape@@Base+0x80>
   25b04:	mov	r2, #1
   25b08:	strb	r2, [r3]
   25b0c:	mov	r2, #10
   25b10:	b	258c8 <flatcc_json_parser_string_escape@@Base+0x80>
   25b14:	mov	r2, #1
   25b18:	strb	r2, [r3]
   25b1c:	mov	r2, #12
   25b20:	b	258c8 <flatcc_json_parser_string_escape@@Base+0x80>

00025b24 <flatcc_json_parser_skip_constant@@Base>:
   25b24:	push	{r4, r5, r6, lr}
   25b28:	mov	r6, r0
   25b2c:	mov	r4, r1
   25b30:	mov	r5, r2
   25b34:	cmp	r4, r5
   25b38:	bne	25b44 <flatcc_json_parser_skip_constant@@Base+0x20>
   25b3c:	mov	r0, r4
   25b40:	pop	{r4, r5, r6, pc}
   25b44:	ldrb	r3, [r4]
   25b48:	sub	r2, r3, #95	; 0x5f
   25b4c:	clz	r2, r2
   25b50:	lsr	r2, r2, #5
   25b54:	orrs	r2, r2, r3, lsr #7
   25b58:	bne	25b6c <flatcc_json_parser_skip_constant@@Base+0x48>
   25b5c:	sub	r2, r3, #48	; 0x30
   25b60:	cmp	r3, #46	; 0x2e
   25b64:	cmpne	r2, #9
   25b68:	bhi	25b78 <flatcc_json_parser_skip_constant@@Base+0x54>
   25b6c:	add	r0, r4, #1
   25b70:	mov	r4, r0
   25b74:	b	25b34 <flatcc_json_parser_skip_constant@@Base+0x10>
   25b78:	orr	r3, r3, #32
   25b7c:	sub	r3, r3, #97	; 0x61
   25b80:	cmp	r3, #25
   25b84:	bls	25b6c <flatcc_json_parser_skip_constant@@Base+0x48>
   25b88:	mov	r2, r5
   25b8c:	mov	r1, r4
   25b90:	mov	r0, r6
   25b94:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   25b98:	cmp	r4, r0
   25b9c:	bne	25b70 <flatcc_json_parser_skip_constant@@Base+0x4c>
   25ba0:	pop	{r4, r5, r6, pc}

00025ba4 <flatcc_json_parser_match_constant@@Base>:
   25ba4:	push	{r4, r5, r6, r7, r8, lr}
   25ba8:	sub	lr, r2, r1
   25bac:	cmp	lr, r3
   25bb0:	ldr	r4, [sp, #24]
   25bb4:	bgt	25bc8 <flatcc_json_parser_match_constant@@Base+0x24>
   25bb8:	mov	r3, #0
   25bbc:	mov	r0, r1
   25bc0:	str	r3, [r4]
   25bc4:	pop	{r4, r5, r6, r7, r8, pc}
   25bc8:	mov	r7, r1
   25bcc:	add	r5, r1, r3
   25bd0:	ldr	r1, [r0, #12]
   25bd4:	mov	ip, r0
   25bd8:	mov	r6, r2
   25bdc:	cmp	r1, #0
   25be0:	beq	25c58 <flatcc_json_parser_match_constant@@Base+0xb4>
   25be4:	mov	r1, r5
   25be8:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   25bec:	cmp	r2, r0
   25bf0:	bne	25bfc <flatcc_json_parser_match_constant@@Base+0x58>
   25bf4:	mov	r3, #0
   25bf8:	b	25c20 <flatcc_json_parser_match_constant@@Base+0x7c>
   25bfc:	cmp	r5, r0
   25c00:	beq	25c38 <flatcc_json_parser_match_constant@@Base+0x94>
   25c04:	ldrb	r3, [r0]
   25c08:	sub	r2, r3, #95	; 0x5f
   25c0c:	clz	r2, r2
   25c10:	lsr	r2, r2, #5
   25c14:	orrs	r2, r2, r3, lsr #7
   25c18:	beq	25c28 <flatcc_json_parser_match_constant@@Base+0x84>
   25c1c:	mov	r3, #1
   25c20:	str	r3, [r4]
   25c24:	pop	{r4, r5, r6, r7, r8, pc}
   25c28:	orr	r3, r3, #32
   25c2c:	sub	r3, r3, #97	; 0x61
   25c30:	cmp	r3, #25
   25c34:	bls	25c1c <flatcc_json_parser_match_constant@@Base+0x78>
   25c38:	mov	r3, #0
   25c3c:	str	r3, [r4]
   25c40:	ldrb	r3, [r0]
   25c44:	and	r2, r3, #223	; 0xdf
   25c48:	cmp	r3, #44	; 0x2c
   25c4c:	cmpne	r2, #93	; 0x5d
   25c50:	movne	r0, r7
   25c54:	pop	{r4, r5, r6, r7, r8, pc}
   25c58:	ldrb	r3, [r7, r3]
   25c5c:	cmp	r3, #32
   25c60:	bne	25c90 <flatcc_json_parser_match_constant@@Base+0xec>
   25c64:	add	r5, r5, #1
   25c68:	cmp	r5, r6
   25c6c:	mov	r0, r5
   25c70:	beq	25bf4 <flatcc_json_parser_match_constant@@Base+0x50>
   25c74:	ldrb	r3, [r5]
   25c78:	add	r5, r5, #1
   25c7c:	cmp	r3, #32
   25c80:	beq	25c68 <flatcc_json_parser_match_constant@@Base+0xc4>
   25c84:	cmp	r3, #34	; 0x22
   25c88:	bne	25c1c <flatcc_json_parser_match_constant@@Base+0x78>
   25c8c:	b	25cb8 <flatcc_json_parser_match_constant@@Base+0x114>
   25c90:	cmp	r3, #34	; 0x22
   25c94:	beq	25cb4 <flatcc_json_parser_match_constant@@Base+0x110>
   25c98:	cmp	r3, #92	; 0x5c
   25c9c:	str	r1, [r4]
   25ca0:	bne	25ccc <flatcc_json_parser_match_constant@@Base+0x128>
   25ca4:	mov	r1, r5
   25ca8:	mov	r3, #18
   25cac:	pop	{r4, r5, r6, r7, r8, lr}
   25cb0:	b	251c8 <flatcc_json_parser_set_error@@Base>
   25cb4:	mov	r0, r5
   25cb8:	add	r1, r0, #1
   25cbc:	mov	r2, #0
   25cc0:	mov	r0, ip
   25cc4:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   25cc8:	b	25bf4 <flatcc_json_parser_match_constant@@Base+0x50>
   25ccc:	mov	r0, r7
   25cd0:	pop	{r4, r5, r6, r7, r8, pc}

00025cd4 <flatcc_json_parser_double@@Base>:
   25cd4:	push	{r4, r5, r6, r7, r8, lr}
   25cd8:	mov	r4, #0
   25cdc:	mov	r5, #0
   25ce0:	cmp	r1, r2
   25ce4:	strd	r4, [r3]
   25ce8:	beq	25d90 <flatcc_json_parser_double@@Base+0xbc>
   25cec:	ldrb	ip, [r1]
   25cf0:	cmp	ip, #45	; 0x2d
   25cf4:	addeq	ip, r1, #1
   25cf8:	movne	ip, r1
   25cfc:	sub	lr, r2, ip
   25d00:	cmp	lr, #1
   25d04:	ble	25d34 <flatcc_json_parser_double@@Base+0x60>
   25d08:	ldrb	lr, [ip]
   25d0c:	cmp	lr, #46	; 0x2e
   25d10:	beq	25d28 <flatcc_json_parser_double@@Base+0x54>
   25d14:	cmp	lr, #48	; 0x30
   25d18:	bne	25d34 <flatcc_json_parser_double@@Base+0x60>
   25d1c:	ldrb	ip, [ip, #1]
   25d20:	cmp	ip, #48	; 0x30
   25d24:	bne	25d34 <flatcc_json_parser_double@@Base+0x60>
   25d28:	mov	r3, #6
   25d2c:	pop	{r4, r5, r6, r7, r8, lr}
   25d30:	b	251c8 <flatcc_json_parser_set_error@@Base>
   25d34:	mov	r6, r1
   25d38:	mov	r4, r2
   25d3c:	sub	r1, r4, r1
   25d40:	mov	r5, r0
   25d44:	mov	r2, r3
   25d48:	mov	r0, r6
   25d4c:	mov	r7, r3
   25d50:	bl	24a24 <grisu3_diy_fp_encode_double@@Base+0x530>
   25d54:	cmp	r6, r0
   25d58:	cmpne	r0, #0
   25d5c:	mov	r1, r0
   25d60:	bne	25d90 <flatcc_json_parser_double@@Base+0xbc>
   25d64:	vldr	d7, [r7]
   25d68:	mov	r2, r4
   25d6c:	mov	r1, r6
   25d70:	mov	r0, r5
   25d74:	vldr	d6, [pc, #28]	; 25d98 <flatcc_json_parser_double@@Base+0xc4>
   25d78:	vabs.f64	d7, d7
   25d7c:	vcmp.f64	d7, d6
   25d80:	vmrs	APSR_nzcv, fpscr
   25d84:	movgt	r3, #7
   25d88:	movle	r3, #6
   25d8c:	b	25d2c <flatcc_json_parser_double@@Base+0x58>
   25d90:	mov	r0, r1
   25d94:	pop	{r4, r5, r6, r7, r8, pc}
   25d98:			; <UNDEFINED> instruction: 0xffffffff
   25d9c:	svcvc	0x00efffff

00025da0 <flatcc_json_parser_float@@Base>:
   25da0:	mov	ip, #0
   25da4:	cmp	r1, r2
   25da8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25dac:	moveq	r0, r1
   25db0:	str	ip, [r3]
   25db4:	beq	25e8c <flatcc_json_parser_float@@Base+0xec>
   25db8:	ldrb	ip, [r1]
   25dbc:	mov	r7, r3
   25dc0:	mov	r4, r2
   25dc4:	mov	r5, r1
   25dc8:	mov	r6, r0
   25dcc:	cmp	ip, #45	; 0x2d
   25dd0:	addeq	ip, r1, #1
   25dd4:	movne	ip, r1
   25dd8:	sub	r3, r2, ip
   25ddc:	cmp	r3, #1
   25de0:	ble	25e0c <flatcc_json_parser_float@@Base+0x6c>
   25de4:	ldrb	r2, [ip]
   25de8:	cmp	r2, #46	; 0x2e
   25dec:	beq	25e04 <flatcc_json_parser_float@@Base+0x64>
   25df0:	cmp	r2, #48	; 0x30
   25df4:	bne	25e0c <flatcc_json_parser_float@@Base+0x6c>
   25df8:	ldrb	r3, [ip, #1]
   25dfc:	cmp	r3, #48	; 0x30
   25e00:	bne	25e0c <flatcc_json_parser_float@@Base+0x6c>
   25e04:	mov	r3, #6
   25e08:	b	25e7c <flatcc_json_parser_float@@Base+0xdc>
   25e0c:	mov	r2, sp
   25e10:	sub	r1, r4, r5
   25e14:	mov	r0, r5
   25e18:	bl	24a24 <grisu3_diy_fp_encode_double@@Base+0x530>
   25e1c:	vldr	d6, [sp]
   25e20:	vldr	s15, [pc, #108]	; 25e94 <flatcc_json_parser_float@@Base+0xf4>
   25e24:	vcvt.f32.f64	s14, d6
   25e28:	vabs.f32	s11, s14
   25e2c:	vcmp.f32	s11, s15
   25e30:	vmrs	APSR_nzcv, fpscr
   25e34:	vstrle	s14, [r7]
   25e38:	ble	25e58 <flatcc_json_parser_float@@Base+0xb8>
   25e3c:	vcmpe.f64	d6, #0.0
   25e40:	vldr	s14, [pc, #80]	; 25e98 <flatcc_json_parser_float@@Base+0xf8>
   25e44:	mov	r0, r5
   25e48:	vldr	s13, [pc, #76]	; 25e9c <flatcc_json_parser_float@@Base+0xfc>
   25e4c:	vmrs	APSR_nzcv, fpscr
   25e50:	vmovpl.f32	s14, s13
   25e54:	vstr	s14, [r7]
   25e58:	cmp	r5, r0
   25e5c:	cmpne	r0, #0
   25e60:	bne	25e8c <flatcc_json_parser_float@@Base+0xec>
   25e64:	vldr	s14, [r7]
   25e68:	vabs.f32	s14, s14
   25e6c:	vcmp.f32	s14, s15
   25e70:	vmrs	APSR_nzcv, fpscr
   25e74:	movgt	r3, #7
   25e78:	ble	25e04 <flatcc_json_parser_float@@Base+0x64>
   25e7c:	mov	r2, r4
   25e80:	mov	r1, r5
   25e84:	mov	r0, r6
   25e88:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   25e8c:	add	sp, sp, #12
   25e90:	pop	{r4, r5, r6, r7, pc}
   25e94:	svcvc	0x007fffff
   25e98:			; <UNDEFINED> instruction: 0xff800000
   25e9c:	svcvc	0x00800000

00025ea0 <flatcc_json_parser_generic_json@@Base>:
   25ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ea4:	sub	sp, sp, #524	; 0x20c
   25ea8:	mov	r9, #1
   25eac:	add	r6, sp, #8
   25eb0:	mov	r3, #0
   25eb4:	mov	r5, r0
   25eb8:	mov	r7, r1
   25ebc:	mov	r4, r2
   25ec0:	mov	r8, r6
   25ec4:	str	r3, [sp, #4]
   25ec8:	mov	sl, r9
   25ecc:	cmp	r7, r4
   25ed0:	beq	262ac <flatcc_json_parser_generic_json@@Base+0x40c>
   25ed4:	cmp	r6, r8
   25ed8:	beq	25f88 <flatcc_json_parser_generic_json@@Base+0xe8>
   25edc:	ldrb	r3, [r6, #-1]
   25ee0:	cmp	r3, #125	; 0x7d
   25ee4:	bne	25f88 <flatcc_json_parser_generic_json@@Base+0xe8>
   25ee8:	ldrb	r3, [r7]
   25eec:	cmp	r3, #34	; 0x22
   25ef0:	moveq	r3, #0
   25ef4:	addeq	r7, r7, #1
   25ef8:	streq	r3, [r5, #12]
   25efc:	beq	25f24 <flatcc_json_parser_generic_json@@Base+0x84>
   25f00:	cmp	r3, #46	; 0x2e
   25f04:	strne	r9, [r5, #12]
   25f08:	bne	25f24 <flatcc_json_parser_generic_json@@Base+0x84>
   25f0c:	mov	r1, r7
   25f10:	mov	r3, #5
   25f14:	mov	r2, r4
   25f18:	mov	r0, r5
   25f1c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   25f20:	mov	r7, r0
   25f24:	mov	r2, r4
   25f28:	mov	r1, r7
   25f2c:	mov	r0, r5
   25f30:	bl	251f4 <flatcc_json_parser_set_error@@Base+0x2c>
   25f34:	mov	r1, r0
   25f38:	mov	r0, r5
   25f3c:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   25f40:	cmp	r4, r0
   25f44:	mov	r1, r0
   25f48:	bne	25f5c <flatcc_json_parser_generic_json@@Base+0xbc>
   25f4c:	mov	r3, #10
   25f50:	mov	r2, r4
   25f54:	mov	r1, r4
   25f58:	b	25f6c <flatcc_json_parser_generic_json@@Base+0xcc>
   25f5c:	ldrb	r3, [r0]
   25f60:	cmp	r3, #58	; 0x3a
   25f64:	beq	25f78 <flatcc_json_parser_generic_json@@Base+0xd8>
   25f68:	mov	r3, #4
   25f6c:	mov	r0, r5
   25f70:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   25f74:	b	262a8 <flatcc_json_parser_generic_json@@Base+0x408>
   25f78:	add	r1, r0, #1
   25f7c:	mov	r0, r5
   25f80:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   25f84:	mov	r7, r0
   25f88:	ldrb	r3, [r7]
   25f8c:	cmp	r3, #57	; 0x39
   25f90:	bhi	25fcc <flatcc_json_parser_generic_json@@Base+0x12c>
   25f94:	cmp	r3, #48	; 0x30
   25f98:	bcs	26088 <flatcc_json_parser_generic_json@@Base+0x1e8>
   25f9c:	cmp	r3, #34	; 0x22
   25fa0:	beq	26014 <flatcc_json_parser_generic_json@@Base+0x174>
   25fa4:	cmp	r3, #45	; 0x2d
   25fa8:	beq	26088 <flatcc_json_parser_generic_json@@Base+0x1e8>
   25fac:	mov	r2, r4
   25fb0:	mov	r1, r7
   25fb4:	mov	r0, r5
   25fb8:	bl	25b24 <flatcc_json_parser_skip_constant@@Base>
   25fbc:	cmp	r7, r0
   25fc0:	bne	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   25fc4:	mov	r3, #5
   25fc8:	b	26224 <flatcc_json_parser_generic_json@@Base+0x384>
   25fcc:	cmp	r3, #91	; 0x5b
   25fd0:	beq	26214 <flatcc_json_parser_generic_json@@Base+0x374>
   25fd4:	cmp	r3, #123	; 0x7b
   25fd8:	bne	25fac <flatcc_json_parser_generic_json@@Base+0x10c>
   25fdc:	add	r3, sp, #520	; 0x208
   25fe0:	cmp	r6, r3
   25fe4:	beq	26220 <flatcc_json_parser_generic_json@@Base+0x380>
   25fe8:	mov	r3, #125	; 0x7d
   25fec:	mov	r2, r4
   25ff0:	add	r1, r7, #1
   25ff4:	mov	r0, r5
   25ff8:	strb	r3, [r6], #1
   25ffc:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   26000:	cmp	r4, r0
   26004:	beq	2625c <flatcc_json_parser_generic_json@@Base+0x3bc>
   26008:	ldrb	r3, [r0]
   2600c:	cmp	r3, #125	; 0x7d
   26010:	b	26258 <flatcc_json_parser_generic_json@@Base+0x3b8>
   26014:	mov	r2, r4
   26018:	mov	r1, r7
   2601c:	mov	r0, r5
   26020:	bl	252bc <flatcc_json_parser_set_error@@Base+0xf4>
   26024:	cmp	r0, r4
   26028:	mov	r1, r0
   2602c:	beq	2603c <flatcc_json_parser_generic_json@@Base+0x19c>
   26030:	ldrb	r3, [r0]
   26034:	cmp	r3, #34	; 0x22
   26038:	bne	26050 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2603c:	mov	r2, r4
   26040:	mov	r0, r5
   26044:	bl	252e0 <flatcc_json_parser_set_error@@Base+0x118>
   26048:	mov	r7, #0
   2604c:	b	26298 <flatcc_json_parser_generic_json@@Base+0x3f8>
   26050:	mov	r2, r4
   26054:	mov	r0, r5
   26058:	bl	25304 <flatcc_json_parser_string_part@@Base>
   2605c:	cmp	r4, r0
   26060:	mov	r1, r0
   26064:	beq	26074 <flatcc_json_parser_generic_json@@Base+0x1d4>
   26068:	ldrb	r3, [r0]
   2606c:	cmp	r3, #34	; 0x22
   26070:	beq	2603c <flatcc_json_parser_generic_json@@Base+0x19c>
   26074:	mov	r3, sp
   26078:	mov	r2, r4
   2607c:	mov	r0, r5
   26080:	bl	25848 <flatcc_json_parser_string_escape@@Base>
   26084:	b	26024 <flatcc_json_parser_generic_json@@Base+0x184>
   26088:	cmp	r7, r4
   2608c:	moveq	r0, r4
   26090:	beq	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   26094:	cmp	r3, #45	; 0x2d
   26098:	bne	260c0 <flatcc_json_parser_generic_json@@Base+0x220>
   2609c:	add	r7, r7, #1
   260a0:	cmp	r4, r7
   260a4:	bne	260c0 <flatcc_json_parser_generic_json@@Base+0x220>
   260a8:	mov	r3, #6
   260ac:	mov	r2, r4
   260b0:	mov	r1, r4
   260b4:	mov	r0, r5
   260b8:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   260bc:	b	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   260c0:	ldrb	r3, [r7]
   260c4:	cmp	r3, #48	; 0x30
   260c8:	bne	260e8 <flatcc_json_parser_generic_json@@Base+0x248>
   260cc:	add	r0, r7, #1
   260d0:	cmp	r4, r0
   260d4:	bne	26124 <flatcc_json_parser_generic_json@@Base+0x284>
   260d8:	mov	r3, #6
   260dc:	mov	r2, r4
   260e0:	mov	r1, r0
   260e4:	b	260b4 <flatcc_json_parser_generic_json@@Base+0x214>
   260e8:	sub	r3, r3, #49	; 0x31
   260ec:	cmp	r3, #8
   260f0:	movhi	r3, #6
   260f4:	movhi	r2, r4
   260f8:	movhi	r1, r7
   260fc:	bhi	260b4 <flatcc_json_parser_generic_json@@Base+0x214>
   26100:	add	r7, r7, #1
   26104:	cmp	r7, r4
   26108:	mov	r0, r7
   2610c:	beq	260d8 <flatcc_json_parser_generic_json@@Base+0x238>
   26110:	ldrb	r3, [r0]
   26114:	add	r7, r7, #1
   26118:	sub	r3, r3, #48	; 0x30
   2611c:	cmp	r3, #9
   26120:	bls	26104 <flatcc_json_parser_generic_json@@Base+0x264>
   26124:	ldrb	r3, [r0]
   26128:	cmp	r3, #46	; 0x2e
   2612c:	bne	26170 <flatcc_json_parser_generic_json@@Base+0x2d0>
   26130:	ldrb	r3, [r0, #1]
   26134:	sub	r3, r3, #48	; 0x30
   26138:	cmp	r3, #9
   2613c:	movhi	r3, #6
   26140:	movhi	r2, r4
   26144:	addhi	r1, r0, #1
   26148:	bhi	260b4 <flatcc_json_parser_generic_json@@Base+0x214>
   2614c:	add	r3, r0, #2
   26150:	cmp	r4, r3
   26154:	mov	r0, r3
   26158:	beq	260d8 <flatcc_json_parser_generic_json@@Base+0x238>
   2615c:	ldrb	r2, [r0]
   26160:	add	r3, r3, #1
   26164:	sub	r2, r2, #48	; 0x30
   26168:	cmp	r2, #9
   2616c:	bls	26150 <flatcc_json_parser_generic_json@@Base+0x2b0>
   26170:	ldrb	r3, [r0]
   26174:	and	r3, r3, #223	; 0xdf
   26178:	cmp	r3, #69	; 0x45
   2617c:	bne	261e8 <flatcc_json_parser_generic_json@@Base+0x348>
   26180:	add	r1, r0, #1
   26184:	cmp	r4, r1
   26188:	beq	260a8 <flatcc_json_parser_generic_json@@Base+0x208>
   2618c:	ldrb	r3, [r0, #1]
   26190:	sub	r3, r3, #43	; 0x2b
   26194:	tst	r3, #253	; 0xfd
   26198:	bne	261a8 <flatcc_json_parser_generic_json@@Base+0x308>
   2619c:	add	r1, r0, #2
   261a0:	cmp	r4, r1
   261a4:	beq	261b8 <flatcc_json_parser_generic_json@@Base+0x318>
   261a8:	ldrb	r3, [r1]
   261ac:	sub	r3, r3, #48	; 0x30
   261b0:	cmp	r3, #9
   261b4:	bls	261c4 <flatcc_json_parser_generic_json@@Base+0x324>
   261b8:	mov	r3, #6
   261bc:	mov	r2, r4
   261c0:	b	260b4 <flatcc_json_parser_generic_json@@Base+0x214>
   261c4:	add	r1, r1, #1
   261c8:	cmp	r4, r1
   261cc:	mov	r0, r1
   261d0:	beq	260d8 <flatcc_json_parser_generic_json@@Base+0x238>
   261d4:	ldrb	r3, [r0]
   261d8:	add	r1, r1, #1
   261dc:	sub	r3, r3, #48	; 0x30
   261e0:	cmp	r3, #9
   261e4:	bls	261c8 <flatcc_json_parser_generic_json@@Base+0x328>
   261e8:	ldrb	r3, [r0]
   261ec:	cmp	r3, #32
   261f0:	beq	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   261f4:	bhi	26370 <flatcc_json_parser_generic_json@@Base+0x4d0>
   261f8:	cmp	r3, #9
   261fc:	bcc	260d8 <flatcc_json_parser_generic_json@@Base+0x238>
   26200:	cmp	r3, #11
   26204:	bls	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   26208:	cmp	r3, #13
   2620c:	bne	260d8 <flatcc_json_parser_generic_json@@Base+0x238>
   26210:	b	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   26214:	add	r3, sp, #520	; 0x208
   26218:	cmp	r6, r3
   2621c:	bne	26230 <flatcc_json_parser_generic_json@@Base+0x390>
   26220:	mov	r3, #2
   26224:	mov	r2, r4
   26228:	mov	r1, r7
   2622c:	b	25f6c <flatcc_json_parser_generic_json@@Base+0xcc>
   26230:	mov	r3, #93	; 0x5d
   26234:	mov	r2, r4
   26238:	add	r1, r7, #1
   2623c:	mov	r0, r5
   26240:	strb	r3, [r6], #1
   26244:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   26248:	cmp	r4, r0
   2624c:	beq	2625c <flatcc_json_parser_generic_json@@Base+0x3bc>
   26250:	ldrb	r3, [r0]
   26254:	cmp	r3, #93	; 0x5d
   26258:	beq	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2625c:	mov	r7, r0
   26260:	b	25ecc <flatcc_json_parser_generic_json@@Base+0x2c>
   26264:	ldrb	r3, [r6, #-1]
   26268:	sub	fp, r6, #1
   2626c:	cmp	r3, #93	; 0x5d
   26270:	bne	262b8 <flatcc_json_parser_generic_json@@Base+0x418>
   26274:	mov	r1, r0
   26278:	add	r3, sp, #4
   2627c:	mov	r2, r4
   26280:	mov	r0, r5
   26284:	bl	25468 <flatcc_json_parser_space_ext@@Base+0xe8>
   26288:	ldr	r3, [sp, #4]
   2628c:	cmp	r3, #0
   26290:	bne	2625c <flatcc_json_parser_generic_json@@Base+0x3bc>
   26294:	mov	r6, fp
   26298:	cmp	r0, r4
   2629c:	beq	26354 <flatcc_json_parser_generic_json@@Base+0x4b4>
   262a0:	cmp	r6, r8
   262a4:	bne	26264 <flatcc_json_parser_generic_json@@Base+0x3c4>
   262a8:	mov	r4, r0
   262ac:	mov	r0, r4
   262b0:	add	sp, sp, #524	; 0x20c
   262b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262b8:	mov	r1, r0
   262bc:	mov	r2, r4
   262c0:	mov	r0, r5
   262c4:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   262c8:	cmp	r4, r0
   262cc:	streq	r7, [sp, #4]
   262d0:	beq	26288 <flatcc_json_parser_generic_json@@Base+0x3e8>
   262d4:	ldrb	r3, [r0]
   262d8:	cmp	r3, #44	; 0x2c
   262dc:	beq	26310 <flatcc_json_parser_generic_json@@Base+0x470>
   262e0:	str	r7, [sp, #4]
   262e4:	ldrb	r3, [r0]
   262e8:	cmp	r3, #125	; 0x7d
   262ec:	movne	r3, #10
   262f0:	movne	r2, r4
   262f4:	movne	r1, r0
   262f8:	bne	26330 <flatcc_json_parser_generic_json@@Base+0x490>
   262fc:	add	r1, r0, #1
   26300:	mov	r2, r4
   26304:	mov	r0, r5
   26308:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   2630c:	b	26288 <flatcc_json_parser_generic_json@@Base+0x3e8>
   26310:	add	r1, r0, #1
   26314:	mov	r0, r5
   26318:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   2631c:	cmp	r4, r0
   26320:	bne	2633c <flatcc_json_parser_generic_json@@Base+0x49c>
   26324:	mov	r3, #10
   26328:	mov	r1, r4
   2632c:	str	r7, [sp, #4]
   26330:	mov	r0, r5
   26334:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   26338:	b	26288 <flatcc_json_parser_generic_json@@Base+0x3e8>
   2633c:	ldrb	r3, [r0]
   26340:	cmp	r3, #125	; 0x7d
   26344:	strne	sl, [sp, #4]
   26348:	bne	26288 <flatcc_json_parser_generic_json@@Base+0x3e8>
   2634c:	str	r7, [sp, #4]
   26350:	b	262fc <flatcc_json_parser_generic_json@@Base+0x45c>
   26354:	cmp	r6, r8
   26358:	beq	262ac <flatcc_json_parser_generic_json@@Base+0x40c>
   2635c:	ldrb	r3, [r6, #-1]
   26360:	cmp	r3, #93	; 0x5d
   26364:	moveq	r3, #9
   26368:	movne	r3, #10
   2636c:	b	25f50 <flatcc_json_parser_generic_json@@Base+0xb0>
   26370:	cmp	r3, #58	; 0x3a
   26374:	beq	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   26378:	bhi	26384 <flatcc_json_parser_generic_json@@Base+0x4e4>
   2637c:	cmp	r3, #44	; 0x2c
   26380:	b	2620c <flatcc_json_parser_generic_json@@Base+0x36c>
   26384:	cmp	r3, #93	; 0x5d
   26388:	beq	26048 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2638c:	cmp	r3, #125	; 0x7d
   26390:	b	2620c <flatcc_json_parser_generic_json@@Base+0x36c>

00026394 <flatcc_json_parser_unmatched_symbol@@Base>:
   26394:	ldr	r3, [r0, #8]
   26398:	tst	r3, #1
   2639c:	beq	26404 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   263a0:	push	{r4, r5, r6, lr}
   263a4:	mov	r4, r0
   263a8:	mov	r5, r2
   263ac:	bl	251f4 <flatcc_json_parser_set_error@@Base+0x2c>
   263b0:	mov	r1, r0
   263b4:	mov	r0, r4
   263b8:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   263bc:	cmp	r2, r0
   263c0:	mov	r1, r0
   263c4:	beq	263f0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   263c8:	ldrb	r3, [r0]
   263cc:	cmp	r3, #58	; 0x3a
   263d0:	bne	263f0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   263d4:	add	r1, r0, #1
   263d8:	mov	r0, r4
   263dc:	bl	25430 <flatcc_json_parser_space_ext@@Base+0xb0>
   263e0:	mov	r1, r0
   263e4:	mov	r0, r4
   263e8:	pop	{r4, r5, r6, lr}
   263ec:	b	25ea0 <flatcc_json_parser_generic_json@@Base>
   263f0:	mov	r2, r5
   263f4:	mov	r0, r4
   263f8:	pop	{r4, r5, r6, lr}
   263fc:	mov	r3, #4
   26400:	b	251c8 <flatcc_json_parser_set_error@@Base>
   26404:	mov	r3, #13
   26408:	b	26400 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

0002640c <flatcc_json_parser_integer@@Base>:
   2640c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26410:	cmp	r1, r2
   26414:	ldr	r9, [sp, #36]	; 0x24
   26418:	beq	264c4 <flatcc_json_parser_integer@@Base+0xb8>
   2641c:	mov	ip, r1
   26420:	mov	r6, #0
   26424:	ldrb	r1, [r1]
   26428:	mov	r7, #0
   2642c:	mov	r8, #10
   26430:	sub	r1, r1, #45	; 0x2d
   26434:	clz	r1, r1
   26438:	lsr	r1, r1, #5
   2643c:	str	r1, [r3]
   26440:	add	r3, ip, r1
   26444:	cmp	r3, r2
   26448:	mov	r1, r3
   2644c:	beq	264bc <flatcc_json_parser_integer@@Base+0xb0>
   26450:	ldrb	lr, [r3], #1
   26454:	sub	r4, lr, #48	; 0x30
   26458:	cmp	r4, #9
   2645c:	bls	26480 <flatcc_json_parser_integer@@Base+0x74>
   26460:	cmp	r1, ip
   26464:	beq	264cc <flatcc_json_parser_integer@@Base+0xc0>
   26468:	and	r3, lr, #223	; 0xdf
   2646c:	cmp	lr, #46	; 0x2e
   26470:	cmpne	r3, #69	; 0x45
   26474:	bne	264bc <flatcc_json_parser_integer@@Base+0xb0>
   26478:	mov	r3, #12
   2647c:	b	264a8 <flatcc_json_parser_integer@@Base+0x9c>
   26480:	umull	r4, r5, r6, r8
   26484:	mla	r5, r8, r7, r5
   26488:	subs	sl, r4, #48	; 0x30
   2648c:	sbc	fp, r5, #0
   26490:	adds	r4, sl, lr
   26494:	adc	r5, fp, #0
   26498:	cmp	r7, r5
   2649c:	cmpeq	r6, r4
   264a0:	bls	264b0 <flatcc_json_parser_integer@@Base+0xa4>
   264a4:	mov	r3, #8
   264a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264ac:	b	251c8 <flatcc_json_parser_set_error@@Base>
   264b0:	mov	r6, r4
   264b4:	mov	r7, r5
   264b8:	b	26444 <flatcc_json_parser_integer@@Base+0x38>
   264bc:	mov	r2, r1
   264c0:	strd	r6, [r9]
   264c4:	mov	r0, r2
   264c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264cc:	mov	r2, ip
   264d0:	b	264c4 <flatcc_json_parser_integer@@Base+0xb8>
   264d4:	push	{r4, r5, r6, r7, lr}
   264d8:	mov	lr, #0
   264dc:	sub	sp, sp, #28
   264e0:	mov	r6, #0
   264e4:	mov	r7, #0
   264e8:	cmp	r1, r2
   264ec:	moveq	r0, r1
   264f0:	strb	lr, [r3]
   264f4:	str	lr, [sp, #12]
   264f8:	strd	r6, [sp, #16]
   264fc:	beq	26560 <flatcc_json_parser_integer@@Base+0x154>
   26500:	mov	r6, r3
   26504:	add	r3, sp, #16
   26508:	mov	r7, r1
   2650c:	mov	r5, r0
   26510:	str	r3, [sp]
   26514:	add	r3, sp, #12
   26518:	mov	r4, r2
   2651c:	bl	2640c <flatcc_json_parser_integer@@Base>
   26520:	cmp	r7, r0
   26524:	beq	26560 <flatcc_json_parser_integer@@Base+0x154>
   26528:	ldr	r3, [sp, #12]
   2652c:	cmp	r3, #0
   26530:	movne	r3, #8
   26534:	bne	26550 <flatcc_json_parser_integer@@Base+0x144>
   26538:	ldrd	r2, [sp, #16]
   2653c:	cmp	r3, #0
   26540:	cmpeq	r2, #255	; 0xff
   26544:	strbls	r2, [r6]
   26548:	bls	26560 <flatcc_json_parser_integer@@Base+0x154>
   2654c:	mov	r3, #7
   26550:	mov	r1, r0
   26554:	mov	r2, r4
   26558:	mov	r0, r5
   2655c:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   26560:	add	sp, sp, #28
   26564:	pop	{r4, r5, r6, r7, pc}

00026568 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   26568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2656c:	sub	sp, sp, #36	; 0x24
   26570:	mov	r6, r0
   26574:	mov	r8, r2
   26578:	str	r3, [sp, #8]
   2657c:	ldr	r3, [sp, #72]	; 0x48
   26580:	str	r3, [sp, #20]
   26584:	bl	252bc <flatcc_json_parser_set_error@@Base+0xf4>
   26588:	mov	r1, r0
   2658c:	mov	r9, r0
   26590:	mov	r0, r6
   26594:	bl	25304 <flatcc_json_parser_string_part@@Base>
   26598:	cmp	r2, r0
   2659c:	mov	r7, r0
   265a0:	beq	266fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   265a4:	ldrb	r3, [r0]
   265a8:	cmp	r3, #34	; 0x22
   265ac:	bne	266fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   265b0:	sub	r2, r0, r9
   265b4:	sub	r3, r0, r9
   265b8:	lsr	r5, r2, #2
   265bc:	str	r3, [sp, #12]
   265c0:	and	r3, r3, #3
   265c4:	add	r5, r5, r5, lsl #1
   265c8:	cmp	r3, #2
   265cc:	addeq	r5, r5, #1
   265d0:	beq	265dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   265d4:	cmp	r3, #3
   265d8:	addeq	r5, r5, #2
   265dc:	mov	r2, #1
   265e0:	mvn	r3, #0
   265e4:	ldr	r0, [r6]
   265e8:	mov	r1, r2
   265ec:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   265f0:	subs	r4, r0, #0
   265f4:	bne	26864 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   265f8:	mov	r1, r5
   265fc:	ldr	r0, [r6]
   26600:	bl	21710 <flatcc_builder_extend_vector@@Base>
   26604:	subs	r3, r0, #0
   26608:	str	r3, [sp, #16]
   2660c:	beq	26864 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   26610:	ldr	r3, [pc, #628]	; 2688c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   26614:	mov	sl, r9
   26618:	ldr	r1, [sp, #20]
   2661c:	add	r2, r3, #256	; 0x100
   26620:	cmp	r1, #0
   26624:	mov	r1, r0
   26628:	moveq	r3, r2
   2662c:	cmp	r5, #0
   26630:	mov	lr, r3
   26634:	sub	r2, r7, r9
   26638:	movne	r3, r5
   2663c:	mvneq	r3, #0
   26640:	str	r3, [sp, #4]
   26644:	mov	ip, r2
   26648:	mov	r0, #0
   2664c:	cmp	r0, ip
   26650:	beq	2678c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   26654:	ldrb	r3, [sl, r0]
   26658:	add	fp, sp, #32
   2665c:	add	fp, fp, r0
   26660:	ldrb	r3, [lr, r3]
   26664:	cmp	r3, #63	; 0x3f
   26668:	strb	r3, [fp, #-4]
   2666c:	bls	26684 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   26670:	cmp	r3, #65	; 0x41
   26674:	bne	2671c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b4>
   26678:	add	sl, sl, #1
   2667c:	sub	ip, ip, #1
   26680:	sub	r0, r0, #1
   26684:	add	r0, r0, #1
   26688:	cmp	r0, #3
   2668c:	bls	2664c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe4>
   26690:	ldr	r3, [sp, #4]
   26694:	cmp	r3, #2
   26698:	bls	2677c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2669c:	ldrb	r0, [sp, #29]
   266a0:	add	sl, sl, #4
   266a4:	add	r1, r1, #3
   266a8:	ldrb	r3, [sp, #28]
   266ac:	lsr	r2, r0, #4
   266b0:	orr	r2, r2, r3, lsl #2
   266b4:	strb	r2, [r1, #-3]
   266b8:	ldrb	r2, [sp, #30]
   266bc:	lsr	r3, r2, #2
   266c0:	orr	r3, r3, r0, lsl #4
   266c4:	strb	r3, [r1, #-2]
   266c8:	ldrb	r3, [sp, #31]
   266cc:	orr	r2, r3, r2, lsl #6
   266d0:	ldr	r3, [sp, #4]
   266d4:	strb	r2, [r1, #-1]
   266d8:	sub	r2, ip, #4
   266dc:	subs	r3, r3, #3
   266e0:	str	r3, [sp, #4]
   266e4:	bne	26644 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   266e8:	ldr	r3, [sp, #12]
   266ec:	cmp	r4, #0
   266f0:	sub	r2, r3, r2
   266f4:	beq	26804 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x29c>
   266f8:	add	r7, r9, r2
   266fc:	ldr	r2, [sp, #8]
   26700:	mov	r3, #0
   26704:	str	r3, [r2]
   26708:	ldr	r3, [sp, #20]
   2670c:	cmp	r3, #0
   26710:	movne	r3, #32
   26714:	moveq	r3, #31
   26718:	b	26874 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   2671c:	cmp	r3, #66	; 0x42
   26720:	addeq	r3, r0, #1
   26724:	beq	26748 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   26728:	mov	r3, r0
   2672c:	b	26754 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   26730:	ldrb	fp, [sl, r3]
   26734:	ldrb	fp, [lr, fp]
   26738:	sub	fp, fp, #65	; 0x41
   2673c:	cmp	fp, #1
   26740:	bhi	26754 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   26744:	add	r3, r3, #1
   26748:	cmp	r3, #7
   2674c:	cmpls	r3, ip
   26750:	bcc	26730 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   26754:	sub	r3, ip, r3
   26758:	mov	ip, r0
   2675c:	cmp	ip, #2
   26760:	beq	26794 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x22c>
   26764:	cmp	ip, #3
   26768:	beq	267bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   2676c:	cmp	ip, #0
   26770:	movne	r4, #4
   26774:	moveq	r2, r3
   26778:	b	266e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   2677c:	mov	r4, #1
   26780:	b	266e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   26784:	mov	r4, #5
   26788:	b	266e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   2678c:	mov	r3, #0
   26790:	b	2675c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   26794:	ldrb	r0, [sp, #29]
   26798:	lsl	r4, r0, #4
   2679c:	ands	r4, r4, #255	; 0xff
   267a0:	bne	26784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   267a4:	ldrb	r2, [sp, #28]
   267a8:	lsr	r0, r0, #4
   267ac:	orr	r0, r0, r2, lsl #2
   267b0:	strb	r0, [r1], #1
   267b4:	mov	r2, r3
   267b8:	b	266e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   267bc:	ldrb	r0, [sp, #30]
   267c0:	lsl	r4, r0, #6
   267c4:	ands	r4, r4, #255	; 0xff
   267c8:	bne	26784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   267cc:	ldr	ip, [sp, #4]
   267d0:	cmp	ip, #1
   267d4:	ldreq	r4, [sp, #4]
   267d8:	beq	266e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   267dc:	lsr	r0, r0, #2
   267e0:	add	r1, r1, #2
   267e4:	ldrb	ip, [sp, #29]
   267e8:	ldrb	lr, [sp, #28]
   267ec:	lsr	r2, ip, #4
   267f0:	orr	ip, r0, ip, lsl #4
   267f4:	orr	r2, r2, lr, lsl #2
   267f8:	strb	r2, [r1, #-2]
   267fc:	strb	ip, [r1, #-1]
   26800:	b	267b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x24c>
   26804:	ldr	r3, [sp, #12]
   26808:	cmp	r3, r2
   2680c:	bne	266f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   26810:	ldr	r3, [sp, #16]
   26814:	sub	r1, r1, r3
   26818:	cmp	r5, r1
   2681c:	bhi	26850 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   26820:	ldr	r0, [r6]
   26824:	bl	2252c <flatcc_builder_end_vector@@Base>
   26828:	ldr	r3, [sp, #8]
   2682c:	cmp	r0, #0
   26830:	str	r0, [r3]
   26834:	beq	26864 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   26838:	mov	r2, r8
   2683c:	mov	r1, r7
   26840:	mov	r0, r6
   26844:	add	sp, sp, #36	; 0x24
   26848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2684c:	b	252e0 <flatcc_json_parser_set_error@@Base+0x118>
   26850:	sub	r1, r5, r1
   26854:	ldr	r0, [r6]
   26858:	bl	21a7c <flatcc_builder_truncate_vector@@Base>
   2685c:	cmp	r0, #0
   26860:	beq	26820 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   26864:	ldr	r2, [sp, #8]
   26868:	mov	r3, #0
   2686c:	str	r3, [r2]
   26870:	mov	r3, #33	; 0x21
   26874:	mov	r2, r8
   26878:	mov	r1, r7
   2687c:	mov	r0, r6
   26880:	add	sp, sp, #36	; 0x24
   26884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26888:	b	251c8 <flatcc_json_parser_set_error@@Base>
   2688c:	andeq	r3, r3, r8, asr #21

00026890 <flatcc_json_parser_build_string@@Base>:
   26890:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   26894:	mov	r5, r0
   26898:	mov	r6, r2
   2689c:	mov	r8, r3
   268a0:	bl	252bc <flatcc_json_parser_set_error@@Base+0xf4>
   268a4:	mov	r1, r0
   268a8:	mov	r7, r0
   268ac:	mov	r0, r5
   268b0:	bl	25304 <flatcc_json_parser_string_part@@Base>
   268b4:	cmp	r2, r0
   268b8:	mov	r4, r0
   268bc:	beq	26900 <flatcc_json_parser_build_string@@Base+0x70>
   268c0:	ldrb	r3, [r0]
   268c4:	cmp	r3, #34	; 0x22
   268c8:	bne	26900 <flatcc_json_parser_build_string@@Base+0x70>
   268cc:	sub	r2, r0, r7
   268d0:	mov	r1, r7
   268d4:	ldr	r0, [r5]
   268d8:	bl	22ae0 <flatcc_builder_create_string@@Base>
   268dc:	mov	r1, r4
   268e0:	mov	r2, r6
   268e4:	str	r0, [r8]
   268e8:	mov	r0, r5
   268ec:	bl	252e0 <flatcc_json_parser_set_error@@Base+0x118>
   268f0:	mov	r4, r0
   268f4:	mov	r0, r4
   268f8:	add	sp, sp, #8
   268fc:	pop	{r4, r5, r6, r7, r8, pc}
   26900:	ldr	r0, [r5]
   26904:	bl	21c70 <flatcc_builder_start_string@@Base>
   26908:	cmp	r0, #0
   2690c:	bne	269b8 <flatcc_json_parser_build_string@@Base+0x128>
   26910:	sub	r2, r4, r7
   26914:	mov	r1, r7
   26918:	ldr	r0, [r5]
   2691c:	bl	219ac <flatcc_builder_append_string@@Base>
   26920:	cmp	r0, #0
   26924:	beq	269b8 <flatcc_json_parser_build_string@@Base+0x128>
   26928:	cmp	r4, r6
   2692c:	beq	2693c <flatcc_json_parser_build_string@@Base+0xac>
   26930:	ldrb	r3, [r4]
   26934:	cmp	r3, #34	; 0x22
   26938:	bne	26948 <flatcc_json_parser_build_string@@Base+0xb8>
   2693c:	ldr	r0, [r5]
   26940:	bl	22bd8 <flatcc_builder_end_string@@Base>
   26944:	b	268dc <flatcc_json_parser_build_string@@Base+0x4c>
   26948:	mov	r1, r4
   2694c:	add	r3, sp, #4
   26950:	mov	r2, r6
   26954:	mov	r0, r5
   26958:	bl	25848 <flatcc_json_parser_string_escape@@Base>
   2695c:	mov	r4, r0
   26960:	ldrb	r2, [sp, #4]
   26964:	add	r1, sp, #5
   26968:	ldr	r0, [r5]
   2696c:	bl	219ac <flatcc_builder_append_string@@Base>
   26970:	cmp	r0, #0
   26974:	beq	269b8 <flatcc_json_parser_build_string@@Base+0x128>
   26978:	mov	r2, r6
   2697c:	mov	r1, r4
   26980:	mov	r0, r5
   26984:	bl	25304 <flatcc_json_parser_string_part@@Base>
   26988:	cmp	r6, r0
   2698c:	mov	r7, r0
   26990:	bne	2699c <flatcc_json_parser_build_string@@Base+0x10c>
   26994:	mov	r4, r7
   26998:	b	26928 <flatcc_json_parser_build_string@@Base+0x98>
   2699c:	sub	r2, r0, r4
   269a0:	mov	r1, r4
   269a4:	ldr	r0, [r5]
   269a8:	bl	219ac <flatcc_builder_append_string@@Base>
   269ac:	cmp	r0, #0
   269b0:	bne	26994 <flatcc_json_parser_build_string@@Base+0x104>
   269b4:	mov	r4, r7
   269b8:	mov	r3, #0
   269bc:	str	r3, [r8]
   269c0:	b	268f4 <flatcc_json_parser_build_string@@Base+0x64>

000269c4 <flatcc_json_parser_prepare_unions@@Base>:
   269c4:	push	{r4, r5, r6, r7, r8, lr}
   269c8:	mov	r5, r1
   269cc:	mov	r1, #24
   269d0:	mov	r4, r0
   269d4:	mov	r7, r2
   269d8:	mul	r1, r1, r3
   269dc:	mov	r6, r3
   269e0:	ldr	r8, [sp, #24]
   269e4:	add	r1, r1, #8
   269e8:	ldr	r0, [r0]
   269ec:	bl	21078 <flatcc_builder_enter_user_frame@@Base>
   269f0:	cmp	r0, #0
   269f4:	str	r0, [r8]
   269f8:	bne	26a14 <flatcc_json_parser_prepare_unions@@Base+0x50>
   269fc:	mov	r2, r7
   26a00:	mov	r1, r5
   26a04:	mov	r0, r4
   26a08:	mov	r3, #33	; 0x21
   26a0c:	pop	{r4, r5, r6, r7, r8, lr}
   26a10:	b	251c8 <flatcc_json_parser_set_error@@Base>
   26a14:	mov	r1, r0
   26a18:	ldr	r0, [r4]
   26a1c:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26a20:	str	r6, [r0]
   26a24:	mov	r0, r5
   26a28:	pop	{r4, r5, r6, r7, r8, pc}

00026a2c <flatcc_json_parser_finalize_unions@@Base>:
   26a2c:	push	{r4, r5, r6, r7, r8, lr}
   26a30:	mov	r5, r0
   26a34:	mov	r4, r1
   26a38:	mov	r1, r3
   26a3c:	mov	r6, r3
   26a40:	mov	r7, r2
   26a44:	ldr	r0, [r0]
   26a48:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26a4c:	ldr	r3, [r0, #4]
   26a50:	cmp	r3, #0
   26a54:	beq	26a70 <flatcc_json_parser_finalize_unions@@Base+0x44>
   26a58:	mov	r1, r4
   26a5c:	mov	r3, #27
   26a60:	mov	r2, r7
   26a64:	mov	r0, r5
   26a68:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   26a6c:	mov	r4, r0
   26a70:	mov	r1, r6
   26a74:	ldr	r0, [r5]
   26a78:	bl	21130 <flatcc_builder_exit_user_frame_at@@Base>
   26a7c:	mov	r0, r4
   26a80:	pop	{r4, r5, r6, r7, r8, pc}

00026a84 <flatcc_json_parser_union@@Base>:
   26a84:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26a88:	mov	r4, r0
   26a8c:	mov	r7, r1
   26a90:	mov	r5, r3
   26a94:	mov	r6, r2
   26a98:	ldr	r0, [r0]
   26a9c:	ldr	r1, [sp, #44]	; 0x2c
   26aa0:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26aa4:	mov	r3, #24
   26aa8:	mla	r3, r3, r5, r0
   26aac:	ldr	r2, [r3, #8]
   26ab0:	cmp	r2, #0
   26ab4:	movne	r3, #28
   26ab8:	bne	26b1c <flatcc_json_parser_union@@Base+0x98>
   26abc:	ldrb	r2, [r3, #20]
   26ac0:	cmp	r2, #0
   26ac4:	bne	26b08 <flatcc_json_parser_union@@Base+0x84>
   26ac8:	ldr	r2, [r0, #4]
   26acc:	mov	r1, r7
   26ad0:	add	r2, r2, #1
   26ad4:	str	r2, [r0, #4]
   26ad8:	mov	r0, r4
   26adc:	ldr	r2, [r4, #16]
   26ae0:	str	r2, [r3, #16]
   26ae4:	ldr	r2, [r4, #4]
   26ae8:	str	r7, [r3, #8]
   26aec:	str	r2, [r3, #12]
   26af0:	mov	r2, r6
   26af4:	bl	25ea0 <flatcc_json_parser_generic_json@@Base>
   26af8:	mov	r5, r0
   26afc:	mov	r0, r5
   26b00:	add	sp, sp, #16
   26b04:	pop	{r4, r5, r6, r7, r8, pc}
   26b08:	ldrb	r3, [r3, #21]
   26b0c:	cmp	r3, #0
   26b10:	strb	r3, [sp, #8]
   26b14:	bne	26b30 <flatcc_json_parser_union@@Base+0xac>
   26b18:	mov	r3, #25
   26b1c:	mov	r2, r6
   26b20:	mov	r1, r7
   26b24:	mov	r0, r4
   26b28:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   26b2c:	b	26af8 <flatcc_json_parser_union@@Base+0x74>
   26b30:	ldr	r2, [r0, #4]
   26b34:	mov	r1, r7
   26b38:	add	r8, sp, #8
   26b3c:	ldr	r5, [sp, #48]	; 0x30
   26b40:	sub	r2, r2, #1
   26b44:	str	r2, [r0, #4]
   26b48:	add	r2, sp, #12
   26b4c:	mov	r0, r4
   26b50:	str	r2, [sp]
   26b54:	mov	r2, r6
   26b58:	blx	r5
   26b5c:	cmp	r6, r0
   26b60:	mov	r5, r0
   26b64:	beq	26afc <flatcc_json_parser_union@@Base+0x78>
   26b68:	ldrh	r1, [sp, #40]	; 0x28
   26b6c:	ldm	r8, {r2, r3}
   26b70:	ldr	r0, [r4]
   26b74:	bl	22f30 <flatcc_builder_table_add_union@@Base>
   26b78:	cmp	r0, #0
   26b7c:	beq	26afc <flatcc_json_parser_union@@Base+0x78>
   26b80:	mov	r3, #28
   26b84:	mov	r2, r6
   26b88:	mov	r1, r5
   26b8c:	b	26b24 <flatcc_json_parser_union@@Base+0xa0>

00026b90 <flatcc_json_parser_union_type@@Base>:
   26b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b94:	sub	sp, sp, #28
   26b98:	mov	r9, r1
   26b9c:	mov	r4, r0
   26ba0:	mov	r5, r3
   26ba4:	mov	r6, r2
   26ba8:	ldr	r0, [r0]
   26bac:	ldr	r1, [sp, #68]	; 0x44
   26bb0:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26bb4:	mov	r3, #24
   26bb8:	add	sl, r0, #8
   26bbc:	mul	r3, r3, r5
   26bc0:	add	r7, sl, r3
   26bc4:	str	r3, [sp, #12]
   26bc8:	ldrb	r3, [r7, #12]
   26bcc:	cmp	r3, #0
   26bd0:	movne	r3, #28
   26bd4:	movne	r2, r6
   26bd8:	movne	r1, r9
   26bdc:	bne	26cf4 <flatcc_json_parser_union_type@@Base+0x164>
   26be0:	mov	r3, #1
   26be4:	add	fp, r7, #13
   26be8:	mov	r8, r0
   26bec:	mov	r2, r6
   26bf0:	mov	r1, r9
   26bf4:	mov	r0, r4
   26bf8:	strb	r3, [r7, #12]
   26bfc:	mov	r3, fp
   26c00:	bl	264d4 <flatcc_json_parser_integer@@Base+0xc8>
   26c04:	cmp	r9, r0
   26c08:	mov	r5, r0
   26c0c:	bne	26c2c <flatcc_json_parser_union_type@@Base+0x9c>
   26c10:	mov	r1, r0
   26c14:	mov	r2, r6
   26c18:	str	fp, [sp]
   26c1c:	mov	r0, r4
   26c20:	ldr	r3, [sp, #72]	; 0x48
   26c24:	bl	25514 <flatcc_json_parser_space_ext@@Base+0x194>
   26c28:	mov	r5, r0
   26c2c:	ldr	r3, [sp, #12]
   26c30:	ldr	r1, [sl, r3]
   26c34:	ldr	r3, [r8, #4]
   26c38:	cmp	r1, #0
   26c3c:	bne	26c5c <flatcc_json_parser_union_type@@Base+0xcc>
   26c40:	ldrb	r2, [r7, #13]
   26c44:	cmp	r2, #0
   26c48:	addne	r3, r3, #1
   26c4c:	str	r3, [r8, #4]
   26c50:	mov	r0, r5
   26c54:	add	sp, sp, #28
   26c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c5c:	cmp	r3, #0
   26c60:	bne	26c78 <flatcc_json_parser_union_type@@Base+0xe8>
   26c64:	ldr	r3, [pc, #152]	; 26d04 <flatcc_json_parser_union_type@@Base+0x174>
   26c68:	movw	r2, #965	; 0x3c5
   26c6c:	ldr	r1, [pc, #148]	; 26d08 <flatcc_json_parser_union_type@@Base+0x178>
   26c70:	ldr	r0, [pc, #148]	; 26d0c <flatcc_json_parser_union_type@@Base+0x17c>
   26c74:	bl	14620 <__assert_fail@plt>
   26c78:	sub	r3, r3, #1
   26c7c:	ldr	r9, [r4, #16]
   26c80:	add	r2, sp, #20
   26c84:	mov	r0, r4
   26c88:	str	r3, [r8, #4]
   26c8c:	ldr	r3, [r7, #8]
   26c90:	ldr	r8, [r4, #4]
   26c94:	ldr	sl, [sp, #76]	; 0x4c
   26c98:	str	r3, [r4, #16]
   26c9c:	ldr	r3, [r7, #4]
   26ca0:	str	r3, [r4, #4]
   26ca4:	ldrb	r3, [r7, #13]
   26ca8:	add	r7, sp, #16
   26cac:	str	r2, [sp]
   26cb0:	mov	r2, r6
   26cb4:	strb	r3, [sp, #16]
   26cb8:	blx	sl
   26cbc:	cmp	r6, r0
   26cc0:	moveq	r5, r6
   26cc4:	beq	26c50 <flatcc_json_parser_union_type@@Base+0xc0>
   26cc8:	ldrh	r1, [sp, #64]	; 0x40
   26ccc:	ldm	r7, {r2, r3}
   26cd0:	ldr	r0, [r4]
   26cd4:	bl	22f30 <flatcc_builder_table_add_union@@Base>
   26cd8:	cmp	r0, #0
   26cdc:	streq	r8, [r4, #4]
   26ce0:	streq	r9, [r4, #16]
   26ce4:	beq	26c50 <flatcc_json_parser_union_type@@Base+0xc0>
   26ce8:	mov	r3, #28
   26cec:	mov	r2, r6
   26cf0:	mov	r1, r5
   26cf4:	mov	r0, r4
   26cf8:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   26cfc:	mov	r5, r0
   26d00:	b	26c50 <flatcc_json_parser_union_type@@Base+0xc0>
   26d04:	andeq	r3, r3, r8, asr #25
   26d08:	andeq	r3, r3, r1, asr lr
   26d0c:	muleq	r3, fp, lr

00026d10 <flatcc_json_parser_union_vector@@Base>:
   26d10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26d14:	mov	r4, r0
   26d18:	mov	r5, r1
   26d1c:	mov	r9, r3
   26d20:	mov	r6, r2
   26d24:	ldr	r0, [r0]
   26d28:	ldr	r1, [sp, #36]	; 0x24
   26d2c:	ldrh	r7, [sp, #32]
   26d30:	ldr	r8, [sp, #40]	; 0x28
   26d34:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26d38:	mov	r3, #24
   26d3c:	add	r2, r0, #8
   26d40:	mul	r3, r3, r9
   26d44:	ldr	r1, [r2, r3]
   26d48:	add	ip, r2, r3
   26d4c:	cmp	r1, #0
   26d50:	beq	26d6c <flatcc_json_parser_union_vector@@Base+0x5c>
   26d54:	mov	r2, r6
   26d58:	mov	r1, r5
   26d5c:	mov	r0, r4
   26d60:	mov	r3, #28
   26d64:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26d68:	b	251c8 <flatcc_json_parser_set_error@@Base>
   26d6c:	ldrb	lr, [ip, #12]
   26d70:	ldr	r1, [r0, #4]
   26d74:	cmp	lr, #0
   26d78:	bne	26dac <flatcc_json_parser_union_vector@@Base+0x9c>
   26d7c:	add	r1, r1, #1
   26d80:	str	r1, [r0, #4]
   26d84:	mov	r0, r4
   26d88:	ldr	r1, [r4, #16]
   26d8c:	str	r1, [ip, #8]
   26d90:	ldr	r1, [r4, #4]
   26d94:	str	r1, [ip, #4]
   26d98:	mov	r1, r5
   26d9c:	str	r5, [r2, r3]
   26da0:	mov	r2, r6
   26da4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26da8:	b	25ea0 <flatcc_json_parser_generic_json@@Base>
   26dac:	sub	r1, r1, #1
   26db0:	mov	r2, r6
   26db4:	str	r1, [r0, #4]
   26db8:	mov	r1, r5
   26dbc:	mov	r0, r4
   26dc0:	str	r7, [sp, #36]	; 0x24
   26dc4:	str	r8, [sp, #40]	; 0x28
   26dc8:	ldr	r3, [ip, #16]
   26dcc:	str	r3, [sp, #32]
   26dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26dd4:	ldr	r3, [ip, #20]
   26dd8:	b	25700 <flatcc_json_parser_space_ext@@Base+0x380>

00026ddc <flatcc_json_parser_union_type_vector@@Base>:
   26ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26de0:	sub	sp, sp, #36	; 0x24
   26de4:	mov	r4, r0
   26de8:	mov	r5, r1
   26dec:	mov	r7, r3
   26df0:	mov	r6, r2
   26df4:	ldr	r0, [r0]
   26df8:	ldr	r1, [sp, #76]	; 0x4c
   26dfc:	ldrh	sl, [sp, #72]	; 0x48
   26e00:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26e04:	mov	r3, #24
   26e08:	add	r0, r0, #8
   26e0c:	mul	r7, r3, r7
   26e10:	add	r8, r0, r7
   26e14:	ldrb	r3, [r8, #12]
   26e18:	cmp	r3, #0
   26e1c:	movne	r3, #28
   26e20:	bne	26fb4 <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   26e24:	mov	r2, #1
   26e28:	mvn	r3, #0
   26e2c:	mov	r1, r2
   26e30:	strb	r2, [r8, #12]
   26e34:	ldr	r0, [r4]
   26e38:	bl	21bd0 <flatcc_builder_start_vector@@Base>
   26e3c:	cmp	r0, #0
   26e40:	bne	26f88 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   26e44:	mov	r1, r5
   26e48:	add	r3, sp, #28
   26e4c:	mov	r2, r6
   26e50:	mov	r0, r4
   26e54:	bl	2567c <flatcc_json_parser_space_ext@@Base+0x2fc>
   26e58:	mov	r5, r0
   26e5c:	add	fp, sp, #27
   26e60:	ldr	r3, [sp, #28]
   26e64:	ldr	r0, [r4]
   26e68:	cmp	r3, #0
   26e6c:	bne	26f28 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   26e70:	bl	225a0 <flatcc_builder_vector_count@@Base>
   26e74:	mov	r9, r0
   26e78:	mov	r1, r0
   26e7c:	ldr	r0, [r4]
   26e80:	str	r9, [r8, #16]
   26e84:	bl	21078 <flatcc_builder_enter_user_frame@@Base>
   26e88:	mov	r1, r0
   26e8c:	mov	r8, r0
   26e90:	ldr	r0, [r4]
   26e94:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26e98:	mov	fp, r0
   26e9c:	ldr	r0, [r4]
   26ea0:	bl	225ac <flatcc_builder_vector_edit@@Base>
   26ea4:	mov	r1, r0
   26ea8:	mov	r2, r9
   26eac:	mov	r0, fp
   26eb0:	bl	14548 <memcpy@plt>
   26eb4:	ldr	r0, [r4]
   26eb8:	bl	2252c <flatcc_builder_end_vector@@Base>
   26ebc:	subs	fp, r0, #0
   26ec0:	beq	26f88 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   26ec4:	sub	r1, sl, #1
   26ec8:	ldr	r0, [r4]
   26ecc:	bl	22e10 <flatcc_builder_table_add_offset@@Base>
   26ed0:	cmp	r0, #0
   26ed4:	beq	26f88 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   26ed8:	str	fp, [r0]
   26edc:	ldr	r0, [r4]
   26ee0:	ldr	r1, [sp, #76]	; 0x4c
   26ee4:	bl	21170 <flatcc_builder_get_user_frame_ptr@@Base>
   26ee8:	add	r3, r0, #8
   26eec:	ldr	r1, [r3, r7]
   26ef0:	add	r2, r3, r7
   26ef4:	ldr	r3, [r0, #4]
   26ef8:	str	r8, [r2, #20]
   26efc:	cmp	r1, #0
   26f00:	addeq	r3, r3, #1
   26f04:	streq	r3, [r0, #4]
   26f08:	beq	26fc8 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   26f0c:	cmp	r3, #0
   26f10:	bne	27000 <flatcc_json_parser_union_type_vector@@Base+0x224>
   26f14:	ldr	r3, [pc, #308]	; 27050 <flatcc_json_parser_union_type_vector@@Base+0x274>
   26f18:	movw	r2, #1122	; 0x462
   26f1c:	ldr	r1, [pc, #304]	; 27054 <flatcc_json_parser_union_type_vector@@Base+0x278>
   26f20:	ldr	r0, [pc, #304]	; 27058 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   26f24:	bl	14620 <__assert_fail@plt>
   26f28:	mov	r1, #1
   26f2c:	bl	21710 <flatcc_builder_extend_vector@@Base>
   26f30:	subs	r3, r0, #0
   26f34:	str	r3, [sp, #20]
   26f38:	beq	26f88 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   26f3c:	mov	r1, r5
   26f40:	mov	r3, fp
   26f44:	mov	r2, r6
   26f48:	mov	r0, r4
   26f4c:	bl	264d4 <flatcc_json_parser_integer@@Base+0xc8>
   26f50:	cmp	r5, r0
   26f54:	mov	r9, r0
   26f58:	movne	r5, r0
   26f5c:	bne	26f90 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   26f60:	mov	r1, r5
   26f64:	mov	r2, r6
   26f68:	str	fp, [sp]
   26f6c:	mov	r0, r4
   26f70:	ldr	r3, [sp, #80]	; 0x50
   26f74:	bl	25514 <flatcc_json_parser_space_ext@@Base+0x194>
   26f78:	cmp	r6, r0
   26f7c:	cmpne	r9, r0
   26f80:	mov	r5, r0
   26f84:	bne	26f90 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   26f88:	mov	r3, #33	; 0x21
   26f8c:	b	26fb4 <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   26f90:	ldrb	r0, [sp, #27]
   26f94:	ldr	r3, [sp, #88]	; 0x58
   26f98:	blx	r3
   26f9c:	cmp	r0, #0
   26fa0:	bne	26fd8 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   26fa4:	ldr	r3, [r4, #8]
   26fa8:	tst	r3, #1
   26fac:	bne	26fd4 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   26fb0:	mov	r3, #15
   26fb4:	mov	r1, r5
   26fb8:	mov	r2, r6
   26fbc:	mov	r0, r4
   26fc0:	bl	251c8 <flatcc_json_parser_set_error@@Base>
   26fc4:	mov	r5, r0
   26fc8:	mov	r0, r5
   26fcc:	add	sp, sp, #36	; 0x24
   26fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26fd4:	strb	r0, [sp, #27]
   26fd8:	ldrb	r3, [sp, #27]
   26fdc:	mov	r1, r5
   26fe0:	mov	r0, r4
   26fe4:	ldr	r2, [sp, #20]
   26fe8:	strb	r3, [r2]
   26fec:	add	r3, sp, #28
   26ff0:	mov	r2, r6
   26ff4:	bl	25468 <flatcc_json_parser_space_ext@@Base+0xe8>
   26ff8:	mov	r5, r0
   26ffc:	b	26e60 <flatcc_json_parser_union_type_vector@@Base+0x84>
   27000:	sub	r3, r3, #1
   27004:	ldr	r7, [r4, #4]
   27008:	ldr	fp, [r4, #16]
   2700c:	str	r3, [r0, #4]
   27010:	mov	r0, r4
   27014:	ldr	r3, [r2, #8]
   27018:	str	r3, [r4, #16]
   2701c:	ldr	r3, [r2, #4]
   27020:	mov	r2, r6
   27024:	str	r3, [r4, #4]
   27028:	ldr	r3, [sp, #84]	; 0x54
   2702c:	stm	sp, {r9, sl}
   27030:	str	r3, [sp, #8]
   27034:	mov	r3, r8
   27038:	bl	25700 <flatcc_json_parser_space_ext@@Base+0x380>
   2703c:	cmp	r6, r0
   27040:	strne	r7, [r4, #4]
   27044:	strne	fp, [r4, #16]
   27048:	moveq	r5, r6
   2704c:	b	26fc8 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   27050:	andeq	r3, r3, r6, ror #25
   27054:	andeq	r3, r3, r1, asr lr
   27058:	muleq	r3, fp, lr

0002705c <flatcc_json_parser_table_as_root@@Base>:
   2705c:	push	{r4, r5, r6, r7, r8, r9, lr}
   27060:	sub	sp, sp, #52	; 0x34
   27064:	subs	r4, r1, #0
   27068:	addeq	r4, sp, #4
   2706c:	mov	r5, r2
   27070:	add	r6, r2, r3
   27074:	mov	r7, r0
   27078:	ldr	r9, [sp, #80]	; 0x50
   2707c:	mov	r2, #32
   27080:	mov	r1, #0
   27084:	add	r0, r4, #12
   27088:	bl	145c0 <memset@plt>
   2708c:	mov	r3, #1
   27090:	mov	r2, #0
   27094:	str	r7, [r4]
   27098:	mov	r0, r7
   2709c:	ldr	r1, [sp, #84]	; 0x54
   270a0:	asr	r8, r9, #1
   270a4:	stmib	r4, {r5, r9}
   270a8:	str	r3, [r4, #16]
   270ac:	and	r8, r8, #2
   270b0:	str	r5, [r4, #28]
   270b4:	mov	r3, r8
   270b8:	str	r6, [r4, #32]
   270bc:	str	r5, [r4, #36]	; 0x24
   270c0:	bl	2150c <flatcc_builder_start_buffer@@Base>
   270c4:	cmp	r0, #0
   270c8:	beq	270dc <flatcc_json_parser_table_as_root@@Base+0x80>
   270cc:	mvn	r6, #0
   270d0:	mov	r0, r6
   270d4:	add	sp, sp, #52	; 0x34
   270d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   270dc:	mov	r2, r6
   270e0:	mov	r3, sp
   270e4:	ldr	r6, [sp, #88]	; 0x58
   270e8:	mov	r1, r5
   270ec:	mov	r0, r4
   270f0:	blx	r6
   270f4:	ldr	r6, [r4, #24]
   270f8:	cmp	r6, #0
   270fc:	bne	270d0 <flatcc_json_parser_table_as_root@@Base+0x74>
   27100:	mov	r0, r7
   27104:	ldr	r1, [sp]
   27108:	bl	215a8 <flatcc_builder_end_buffer@@Base>
   2710c:	cmp	r0, #0
   27110:	beq	270cc <flatcc_json_parser_table_as_root@@Base+0x70>
   27114:	str	r5, [r4, #40]	; 0x28
   27118:	b	270d0 <flatcc_json_parser_table_as_root@@Base+0x74>

0002711c <flatcc_json_parser_struct_as_root@@Base>:
   2711c:	b	2705c <flatcc_json_parser_table_as_root@@Base>
   27120:	cmp	r0, #1000	; 0x3e8
   27124:	push	{r4, r5, lr}
   27128:	mov	r3, r0
   2712c:	bcc	27178 <flatcc_json_parser_struct_as_root@@Base+0x5c>
   27130:	movw	r0, #9999	; 0x270f
   27134:	cmp	r3, r0
   27138:	movhi	r0, #5
   2713c:	movls	r0, #4
   27140:	mov	ip, #0
   27144:	tst	r0, #1
   27148:	add	r2, r1, r0
   2714c:	strb	ip, [r1, r0]
   27150:	beq	271f8 <flatcc_json_parser_struct_as_root@@Base+0xdc>
   27154:	cmp	r0, #3
   27158:	beq	271c4 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   2715c:	cmp	r0, #5
   27160:	beq	27194 <flatcc_json_parser_struct_as_root@@Base+0x78>
   27164:	cmp	r0, #1
   27168:	popne	{r4, r5, pc}
   2716c:	add	r3, r3, #48	; 0x30
   27170:	strb	r3, [r2, #-1]
   27174:	pop	{r4, r5, pc}
   27178:	cmp	r0, #99	; 0x63
   2717c:	movhi	r0, #3
   27180:	bhi	27140 <flatcc_json_parser_struct_as_root@@Base+0x24>
   27184:	cmp	r3, #9
   27188:	movhi	r0, #2
   2718c:	movls	r0, #1
   27190:	b	27140 <flatcc_json_parser_struct_as_root@@Base+0x24>
   27194:	mov	ip, #100	; 0x64
   27198:	ldr	lr, [pc, #192]	; 27260 <flatcc_json_parser_struct_as_root@@Base+0x144>
   2719c:	udiv	r4, r3, ip
   271a0:	mls	ip, ip, r4, r3
   271a4:	uxth	r3, r4
   271a8:	uxth	ip, ip
   271ac:	add	r5, lr, ip, lsl #1
   271b0:	ldrb	ip, [lr, ip, lsl #1]
   271b4:	strb	ip, [r2, #-2]
   271b8:	ldrb	ip, [r5, #1]
   271bc:	strb	ip, [r2, #-1]
   271c0:	add	r2, r1, #3
   271c4:	mov	r1, #100	; 0x64
   271c8:	ldr	ip, [pc, #144]	; 27260 <flatcc_json_parser_struct_as_root@@Base+0x144>
   271cc:	sub	r2, r2, #2
   271d0:	udiv	lr, r3, r1
   271d4:	mls	r1, r1, lr, r3
   271d8:	uxth	r3, lr
   271dc:	uxth	r1, r1
   271e0:	add	r4, ip, r1, lsl #1
   271e4:	ldrb	r1, [ip, r1, lsl #1]
   271e8:	strb	r1, [r2]
   271ec:	ldrb	r1, [r4, #1]
   271f0:	strb	r1, [r2, #1]
   271f4:	b	2716c <flatcc_json_parser_struct_as_root@@Base+0x50>
   271f8:	cmp	r0, #2
   271fc:	beq	27238 <flatcc_json_parser_struct_as_root@@Base+0x11c>
   27200:	cmp	r0, #4
   27204:	popne	{r4, r5, pc}
   27208:	mov	ip, #100	; 0x64
   2720c:	ldr	lr, [pc, #76]	; 27260 <flatcc_json_parser_struct_as_root@@Base+0x144>
   27210:	udiv	r4, r3, ip
   27214:	mls	ip, ip, r4, r3
   27218:	uxth	r3, r4
   2721c:	uxth	ip, ip
   27220:	add	r5, lr, ip, lsl #1
   27224:	ldrb	ip, [lr, ip, lsl #1]
   27228:	strb	ip, [r2, #-2]
   2722c:	ldrb	ip, [r5, #1]
   27230:	strb	ip, [r2, #-1]
   27234:	add	r2, r1, #2
   27238:	mov	lr, #100	; 0x64
   2723c:	ldr	ip, [pc, #28]	; 27260 <flatcc_json_parser_struct_as_root@@Base+0x144>
   27240:	udiv	r1, r3, lr
   27244:	mls	r3, lr, r1, r3
   27248:	uxth	r3, r3
   2724c:	add	r1, ip, r3, lsl #1
   27250:	ldrb	r3, [ip, r3, lsl #1]
   27254:	strb	r3, [r2, #-2]
   27258:	ldrb	r3, [r1, #1]
   2725c:	b	27170 <flatcc_json_parser_struct_as_root@@Base+0x54>
   27260:	andeq	r4, r3, r0, lsl #2
   27264:	movw	r2, #9999	; 0x270f
   27268:	push	{r4, lr}
   2726c:	mov	r3, r0
   27270:	cmp	r0, r2
   27274:	bls	27310 <flatcc_json_parser_struct_as_root@@Base+0x1f4>
   27278:	ldr	r2, [pc, #636]	; 274fc <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   2727c:	cmp	r0, r2
   27280:	bls	272ec <flatcc_json_parser_struct_as_root@@Base+0x1d0>
   27284:	ldr	r2, [pc, #628]	; 27500 <flatcc_json_parser_struct_as_root@@Base+0x3e4>
   27288:	cmp	r0, r2
   2728c:	movhi	r0, #10
   27290:	bhi	272a4 <flatcc_json_parser_struct_as_root@@Base+0x188>
   27294:	ldr	r0, [pc, #616]	; 27504 <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   27298:	cmp	r3, r0
   2729c:	movhi	r0, #9
   272a0:	movls	r0, #8
   272a4:	mov	ip, #0
   272a8:	tst	r0, #1
   272ac:	add	r2, r1, r0
   272b0:	strb	ip, [r1, r0]
   272b4:	beq	273f4 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   272b8:	sub	r1, r0, #1
   272bc:	cmp	r1, #8
   272c0:	ldrls	pc, [pc, r1, lsl #2]
   272c4:	b	273f0 <flatcc_json_parser_struct_as_root@@Base+0x2d4>
   272c8:	andeq	r7, r2, r8, ror #7
   272cc:	strdeq	r7, [r2], -r0
   272d0:			; <UNDEFINED> instruction: 0x000273bc
   272d4:	strdeq	r7, [r2], -r0
   272d8:	muleq	r2, r0, r3
   272dc:	strdeq	r7, [r2], -r0
   272e0:	andeq	r7, r2, r4, ror #6
   272e4:	strdeq	r7, [r2], -r0
   272e8:	andeq	r7, r2, r8, lsr r3
   272ec:	ldr	r2, [pc, #532]	; 27508 <flatcc_json_parser_struct_as_root@@Base+0x3ec>
   272f0:	cmp	r0, r2
   272f4:	movhi	r0, #7
   272f8:	bhi	272a4 <flatcc_json_parser_struct_as_root@@Base+0x188>
   272fc:	ldr	r0, [pc, #520]	; 2750c <flatcc_json_parser_struct_as_root@@Base+0x3f0>
   27300:	cmp	r3, r0
   27304:	movhi	r0, #6
   27308:	movls	r0, #5
   2730c:	b	272a4 <flatcc_json_parser_struct_as_root@@Base+0x188>
   27310:	cmp	r0, #99	; 0x63
   27314:	bls	27328 <flatcc_json_parser_struct_as_root@@Base+0x20c>
   27318:	cmp	r0, #1000	; 0x3e8
   2731c:	movcs	r0, #4
   27320:	movcc	r0, #3
   27324:	b	272a4 <flatcc_json_parser_struct_as_root@@Base+0x188>
   27328:	cmp	r0, #9
   2732c:	movhi	r0, #2
   27330:	movls	r0, #1
   27334:	b	272a4 <flatcc_json_parser_struct_as_root@@Base+0x188>
   27338:	mov	r1, #100	; 0x64
   2733c:	ldr	ip, [pc, #460]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   27340:	sub	r2, r2, #2
   27344:	udiv	lr, r3, r1
   27348:	mls	r1, r1, lr, r3
   2734c:	mov	r3, lr
   27350:	add	r4, ip, r1, lsl #1
   27354:	ldrb	r1, [ip, r1, lsl #1]
   27358:	strb	r1, [r2]
   2735c:	ldrb	r1, [r4, #1]
   27360:	strb	r1, [r2, #1]
   27364:	mov	r1, #100	; 0x64
   27368:	ldr	ip, [pc, #416]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   2736c:	sub	r2, r2, #2
   27370:	udiv	lr, r3, r1
   27374:	mls	r1, r1, lr, r3
   27378:	mov	r3, lr
   2737c:	add	r4, ip, r1, lsl #1
   27380:	ldrb	r1, [ip, r1, lsl #1]
   27384:	strb	r1, [r2]
   27388:	ldrb	r1, [r4, #1]
   2738c:	strb	r1, [r2, #1]
   27390:	mov	r1, #100	; 0x64
   27394:	ldr	ip, [pc, #372]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   27398:	sub	r2, r2, #2
   2739c:	udiv	lr, r3, r1
   273a0:	mls	r1, r1, lr, r3
   273a4:	mov	r3, lr
   273a8:	add	r4, ip, r1, lsl #1
   273ac:	ldrb	r1, [ip, r1, lsl #1]
   273b0:	strb	r1, [r2]
   273b4:	ldrb	r1, [r4, #1]
   273b8:	strb	r1, [r2, #1]
   273bc:	mov	r1, #100	; 0x64
   273c0:	ldr	ip, [pc, #328]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   273c4:	sub	r2, r2, #2
   273c8:	udiv	lr, r3, r1
   273cc:	mls	r1, r1, lr, r3
   273d0:	mov	r3, lr
   273d4:	add	r4, ip, r1, lsl #1
   273d8:	ldrb	r1, [ip, r1, lsl #1]
   273dc:	strb	r1, [r2]
   273e0:	ldrb	r1, [r4, #1]
   273e4:	strb	r1, [r2, #1]
   273e8:	add	r3, r3, #48	; 0x30
   273ec:	strb	r3, [r2, #-1]
   273f0:	pop	{r4, pc}
   273f4:	sub	r1, r0, #2
   273f8:	cmp	r1, #8
   273fc:	ldrls	pc, [pc, r1, lsl #2]
   27400:	b	273f0 <flatcc_json_parser_struct_as_root@@Base+0x2d4>
   27404:	ldrdeq	r7, [r2], -r8
   27408:	strdeq	r7, [r2], -r0
   2740c:	andeq	r7, r2, ip, lsr #9
   27410:	strdeq	r7, [r2], -r0
   27414:	andeq	r7, r2, r0, lsl #9
   27418:	strdeq	r7, [r2], -r0
   2741c:	andeq	r7, r2, r4, asr r4
   27420:	strdeq	r7, [r2], -r0
   27424:	andeq	r7, r2, r8, lsr #8
   27428:	mov	r1, #100	; 0x64
   2742c:	ldr	ip, [pc, #220]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   27430:	sub	r2, r2, #2
   27434:	udiv	lr, r3, r1
   27438:	mls	r1, r1, lr, r3
   2743c:	mov	r3, lr
   27440:	add	r4, ip, r1, lsl #1
   27444:	ldrb	r1, [ip, r1, lsl #1]
   27448:	strb	r1, [r2]
   2744c:	ldrb	r1, [r4, #1]
   27450:	strb	r1, [r2, #1]
   27454:	mov	r1, #100	; 0x64
   27458:	ldr	ip, [pc, #176]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   2745c:	sub	r2, r2, #2
   27460:	udiv	lr, r3, r1
   27464:	mls	r1, r1, lr, r3
   27468:	mov	r3, lr
   2746c:	add	r4, ip, r1, lsl #1
   27470:	ldrb	r1, [ip, r1, lsl #1]
   27474:	strb	r1, [r2]
   27478:	ldrb	r1, [r4, #1]
   2747c:	strb	r1, [r2, #1]
   27480:	mov	r1, #100	; 0x64
   27484:	ldr	ip, [pc, #132]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   27488:	sub	r2, r2, #2
   2748c:	udiv	lr, r3, r1
   27490:	mls	r1, r1, lr, r3
   27494:	mov	r3, lr
   27498:	add	r4, ip, r1, lsl #1
   2749c:	ldrb	r1, [ip, r1, lsl #1]
   274a0:	strb	r1, [r2]
   274a4:	ldrb	r1, [r4, #1]
   274a8:	strb	r1, [r2, #1]
   274ac:	mov	r1, #100	; 0x64
   274b0:	ldr	ip, [pc, #88]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   274b4:	sub	r2, r2, #2
   274b8:	udiv	lr, r3, r1
   274bc:	mls	r1, r1, lr, r3
   274c0:	mov	r3, lr
   274c4:	add	r4, ip, r1, lsl #1
   274c8:	ldrb	r1, [ip, r1, lsl #1]
   274cc:	strb	r1, [r2]
   274d0:	ldrb	r1, [r4, #1]
   274d4:	strb	r1, [r2, #1]
   274d8:	mov	lr, #100	; 0x64
   274dc:	ldr	ip, [pc, #44]	; 27510 <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   274e0:	udiv	r1, r3, lr
   274e4:	mls	r3, lr, r1, r3
   274e8:	add	r1, ip, r3, lsl #1
   274ec:	ldrb	r3, [ip, r3, lsl #1]
   274f0:	strb	r3, [r2, #-2]
   274f4:	ldrb	r3, [r1, #1]
   274f8:	b	273ec <flatcc_json_parser_struct_as_root@@Base+0x2d0>
   274fc:	addseq	r9, r8, pc, ror r6
   27500:	blcc	fe6d9d04 <__bss_end__@@Base+0xfe694940>
   27504:	ldrbeq	lr, [r5, #255]!	; 0xff
   27508:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   2750c:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   27510:	andeq	r4, r3, r0, lsl #2
   27514:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27518:	mov	r6, r0
   2751c:	mov	r7, r1
   27520:	add	r1, pc, #992	; 0x3e0
   27524:	ldrd	r0, [r1]
   27528:	cmp	r7, r1
   2752c:	cmpeq	r6, r0
   27530:	bhi	27548 <flatcc_json_parser_struct_as_root@@Base+0x42c>
   27534:	mov	r1, r2
   27538:	mov	r0, r6
   2753c:	add	sp, sp, #4
   27540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27544:	b	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   27548:	add	r1, pc, #960	; 0x3c0
   2754c:	ldrd	r0, [r1]
   27550:	cmp	r7, r1
   27554:	cmpeq	r6, r0
   27558:	bls	2766c <flatcc_json_parser_struct_as_root@@Base+0x550>
   2755c:	add	r1, pc, #948	; 0x3b4
   27560:	ldrd	r0, [r1]
   27564:	cmp	r7, r1
   27568:	cmpeq	r6, r0
   2756c:	bls	27638 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   27570:	add	r1, pc, #936	; 0x3a8
   27574:	ldrd	r0, [r1]
   27578:	cmp	r7, r1
   2757c:	cmpeq	r6, r0
   27580:	bls	2761c <flatcc_json_parser_struct_as_root@@Base+0x500>
   27584:	add	r1, pc, #924	; 0x39c
   27588:	ldrd	r0, [r1]
   2758c:	cmp	r7, r1
   27590:	cmpeq	r6, r0
   27594:	movhi	r8, #20
   27598:	movls	r8, #19
   2759c:	ldr	r9, [pc, #956]	; 27960 <flatcc_json_parser_struct_as_root@@Base+0x844>
   275a0:	mov	r3, #0
   275a4:	add	r4, r2, r8
   275a8:	mov	r0, r6
   275ac:	mov	r1, r7
   275b0:	strb	r3, [r2, r8]
   275b4:	mov	r2, #100	; 0x64
   275b8:	mov	r3, #0
   275bc:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   275c0:	mov	sl, r2
   275c4:	mov	r3, #0
   275c8:	add	fp, r9, r2, lsl #1
   275cc:	mov	r0, r6
   275d0:	mov	r2, #100	; 0x64
   275d4:	mov	r1, r7
   275d8:	mov	r5, r9
   275dc:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   275e0:	tst	r8, #1
   275e4:	beq	27968 <flatcc_json_parser_struct_as_root@@Base+0x84c>
   275e8:	sub	r3, r8, #11
   275ec:	cmp	r3, #8
   275f0:	ldrls	pc, [pc, r3, lsl #2]
   275f4:	b	27838 <flatcc_json_parser_struct_as_root@@Base+0x71c>
   275f8:	andeq	r7, r2, r4, asr #15
   275fc:	andeq	r7, r2, r8, lsr r8
   27600:	andeq	r7, r2, r4, ror r7
   27604:	andeq	r7, r2, r8, lsr r8
   27608:	andeq	r7, r2, r4, lsr #14
   2760c:	andeq	r7, r2, r8, lsr r8
   27610:	ldrdeq	r7, [r2], -r4
   27614:	andeq	r7, r2, r8, lsr r8
   27618:			; <UNDEFINED> instruction: 0x000276b8
   2761c:	add	r1, pc, #780	; 0x30c
   27620:	ldrd	r0, [r1]
   27624:	cmp	r7, r1
   27628:	cmpeq	r6, r0
   2762c:	movhi	r8, #18
   27630:	movls	r8, #17
   27634:	b	2759c <flatcc_json_parser_struct_as_root@@Base+0x480>
   27638:	add	r1, pc, #760	; 0x2f8
   2763c:	ldrd	r0, [r1]
   27640:	cmp	r7, r1
   27644:	cmpeq	r6, r0
   27648:	movhi	r8, #16
   2764c:	bhi	2759c <flatcc_json_parser_struct_as_root@@Base+0x480>
   27650:	add	r1, pc, #744	; 0x2e8
   27654:	ldrd	r0, [r1]
   27658:	cmp	r7, r1
   2765c:	cmpeq	r6, r0
   27660:	movhi	r8, #15
   27664:	movls	r8, #14
   27668:	b	2759c <flatcc_json_parser_struct_as_root@@Base+0x480>
   2766c:	add	r1, pc, #724	; 0x2d4
   27670:	ldrd	r0, [r1]
   27674:	cmp	r7, r1
   27678:	cmpeq	r6, r0
   2767c:	bls	2769c <flatcc_json_parser_struct_as_root@@Base+0x580>
   27680:	add	r1, pc, #712	; 0x2c8
   27684:	ldrd	r0, [r1]
   27688:	cmp	r7, r1
   2768c:	cmpeq	r6, r0
   27690:	movhi	r8, #13
   27694:	movls	r8, #12
   27698:	b	2759c <flatcc_json_parser_struct_as_root@@Base+0x480>
   2769c:	add	r1, pc, #692	; 0x2b4
   276a0:	ldrd	r0, [r1]
   276a4:	cmp	r7, r1
   276a8:	cmpeq	r6, r0
   276ac:	movhi	r8, #11
   276b0:	movls	r8, #10
   276b4:	b	2759c <flatcc_json_parser_struct_as_root@@Base+0x480>
   276b8:	ldrb	r3, [r9, sl, lsl #1]
   276bc:	mov	r6, r0
   276c0:	mov	r7, r1
   276c4:	sub	r4, r4, #2
   276c8:	strb	r3, [r4]
   276cc:	ldrb	r3, [fp, #1]
   276d0:	strb	r3, [r4, #1]
   276d4:	mov	r0, r6
   276d8:	mov	r1, r7
   276dc:	mov	r2, #100	; 0x64
   276e0:	mov	r3, #0
   276e4:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   276e8:	mov	r9, r2
   276ec:	add	fp, r5, r2, lsl #1
   276f0:	mov	r3, #0
   276f4:	mov	r0, r6
   276f8:	mov	r1, r7
   276fc:	mov	r2, #100	; 0x64
   27700:	sub	sl, r4, #2
   27704:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27708:	ldrb	r3, [r5, r9, lsl #1]
   2770c:	mov	r6, r0
   27710:	mov	r7, r1
   27714:	strb	r3, [r4, #-2]
   27718:	ldrb	r3, [fp, #1]
   2771c:	strb	r3, [r4, #-1]
   27720:	mov	r4, sl
   27724:	mov	r0, r6
   27728:	mov	r1, r7
   2772c:	mov	r2, #100	; 0x64
   27730:	mov	r3, #0
   27734:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27738:	mov	r9, r2
   2773c:	add	fp, r5, r2, lsl #1
   27740:	mov	r3, #0
   27744:	mov	r0, r6
   27748:	mov	r1, r7
   2774c:	mov	r2, #100	; 0x64
   27750:	sub	sl, r4, #2
   27754:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27758:	ldrb	r3, [r5, r9, lsl #1]
   2775c:	mov	r6, r0
   27760:	mov	r7, r1
   27764:	strb	r3, [r4, #-2]
   27768:	ldrb	r3, [fp, #1]
   2776c:	strb	r3, [r4, #-1]
   27770:	mov	r4, sl
   27774:	mov	r0, r6
   27778:	mov	r1, r7
   2777c:	mov	r2, #100	; 0x64
   27780:	mov	r3, #0
   27784:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27788:	mov	r9, r2
   2778c:	add	fp, r5, r2, lsl #1
   27790:	mov	r3, #0
   27794:	mov	r0, r6
   27798:	mov	r1, r7
   2779c:	mov	r2, #100	; 0x64
   277a0:	sub	sl, r4, #2
   277a4:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   277a8:	ldrb	r3, [r5, r9, lsl #1]
   277ac:	mov	r6, r0
   277b0:	mov	r7, r1
   277b4:	strb	r3, [r4, #-2]
   277b8:	ldrb	r3, [fp, #1]
   277bc:	strb	r3, [r4, #-1]
   277c0:	mov	r4, sl
   277c4:	mov	r0, r6
   277c8:	mov	r1, r7
   277cc:	mov	r2, #100	; 0x64
   277d0:	mov	r3, #0
   277d4:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   277d8:	add	r3, r5, r2, lsl #1
   277dc:	ldrb	r2, [r5, r2, lsl #1]
   277e0:	mov	r0, r6
   277e4:	mov	r1, r7
   277e8:	sub	r9, r4, #3
   277ec:	strb	r2, [r4, #-2]
   277f0:	mov	r2, #100	; 0x64
   277f4:	ldrb	r3, [r3, #1]
   277f8:	strb	r3, [r4, #-1]
   277fc:	mov	r3, #0
   27800:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27804:	mov	r2, #10
   27808:	mov	r3, #0
   2780c:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27810:	add	r2, r2, #48	; 0x30
   27814:	mov	r0, r6
   27818:	mov	r1, r7
   2781c:	mov	r3, #0
   27820:	strb	r2, [r4, #-3]
   27824:	mov	r2, #1000	; 0x3e8
   27828:	mov	r4, r9
   2782c:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27830:	mov	r6, r0
   27834:	mov	r7, r1
   27838:	mov	r0, r6
   2783c:	mov	r1, r7
   27840:	mov	r2, #100	; 0x64
   27844:	mov	r3, #0
   27848:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   2784c:	add	r3, r5, r2, lsl #1
   27850:	ldrb	r2, [r5, r2, lsl #1]
   27854:	mov	r0, r6
   27858:	mov	r1, r7
   2785c:	strb	r2, [r4, #-2]
   27860:	mov	r2, #100	; 0x64
   27864:	ldrb	r3, [r3, #1]
   27868:	strb	r3, [r4, #-1]
   2786c:	mov	r3, #0
   27870:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27874:	mov	r2, #100	; 0x64
   27878:	mov	r3, #0
   2787c:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27880:	add	r3, r5, r2, lsl #1
   27884:	ldrb	r2, [r5, r2, lsl #1]
   27888:	mov	r0, r6
   2788c:	mov	r1, r7
   27890:	strb	r2, [r4, #-4]
   27894:	movw	r2, #10000	; 0x2710
   27898:	ldrb	r3, [r3, #1]
   2789c:	strb	r3, [r4, #-3]
   278a0:	mov	r3, #0
   278a4:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   278a8:	mov	r2, #100	; 0x64
   278ac:	mov	r3, #0
   278b0:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   278b4:	add	r3, r5, r2, lsl #1
   278b8:	ldrb	r2, [r5, r2, lsl #1]
   278bc:	mov	r0, r6
   278c0:	mov	r1, r7
   278c4:	strb	r2, [r4, #-6]
   278c8:	ldrb	r3, [r3, #1]
   278cc:	ldr	r2, [pc, #144]	; 27964 <flatcc_json_parser_struct_as_root@@Base+0x848>
   278d0:	strb	r3, [r4, #-5]
   278d4:	mov	r3, #0
   278d8:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   278dc:	mov	r2, #100	; 0x64
   278e0:	mov	r3, #0
   278e4:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   278e8:	add	r3, r5, r2, lsl #1
   278ec:	ldrb	r2, [r5, r2, lsl #1]
   278f0:	mov	r0, r8
   278f4:	strb	r2, [r4, #-8]
   278f8:	ldrb	r3, [r3, #1]
   278fc:	strb	r3, [r4, #-7]
   27900:	add	sp, sp, #4
   27904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27908:	blcc	fe6da10c <__bss_end__@@Base+0xfe694d48>
   2790c:	andeq	r0, r0, r0
   27910:	mrcmi	15, 3, r9, cr2, cr15, {7}
   27914:	andeq	r0, r0, r8, lsl r9
   27918:	svcvs	0x00c0ffff
   2791c:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   27920:			; <UNDEFINED> instruction: 0xa763ffff
   27924:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   27928:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   2792c:	bhi	ff1f0544 <__bss_end__@@Base+0xff1ab180>
   27930:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   27934:	smceq	13400	; 0x3458
   27938:	strbge	r7, [r6], #4095	; 0xfff
   2793c:	andeq	r8, r3, lr, ror sp
   27940:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   27944:	strdeq	r5, [r0], -r3
   27948:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   2794c:	andeq	r0, r0, r7, lsl r0
   27950:	strtle	r0, [r5], #4095	; 0xfff
   27954:	andeq	r0, r0, r8, ror #1
   27958:	strpl	lr, [fp], #-1023	; 0xfffffc01
   2795c:	andeq	r0, r0, r2
   27960:	andeq	r4, r3, r0, lsl #2
   27964:	andeq	r4, pc, r0, asr #4
   27968:	sub	r3, r8, #10
   2796c:	cmp	r3, #10
   27970:	ldrls	pc, [pc, r3, lsl #2]
   27974:	b	27838 <flatcc_json_parser_struct_as_root@@Base+0x71c>
   27978:	andeq	r7, r2, r0, lsl #22
   2797c:	andeq	r7, r2, r8, lsr r8
   27980:			; <UNDEFINED> instruction: 0x00027ab0
   27984:	andeq	r7, r2, r8, lsr r8
   27988:	andeq	r7, r2, r0, ror #20
   2798c:	andeq	r7, r2, r8, lsr r8
   27990:	andeq	r7, r2, r0, lsl sl
   27994:	andeq	r7, r2, r8, lsr r8
   27998:	andeq	r7, r2, r0, asr #19
   2799c:	andeq	r7, r2, r8, lsr r8
   279a0:	andeq	r7, r2, r4, lsr #19
   279a4:	ldrb	r3, [r9, sl, lsl #1]
   279a8:	mov	r6, r0
   279ac:	mov	r7, r1
   279b0:	sub	r4, r4, #2
   279b4:	strb	r3, [r4]
   279b8:	ldrb	r3, [fp, #1]
   279bc:	strb	r3, [r4, #1]
   279c0:	mov	r0, r6
   279c4:	mov	r1, r7
   279c8:	mov	r2, #100	; 0x64
   279cc:	mov	r3, #0
   279d0:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   279d4:	mov	r9, r2
   279d8:	add	fp, r5, r2, lsl #1
   279dc:	mov	r3, #0
   279e0:	mov	r0, r6
   279e4:	mov	r1, r7
   279e8:	mov	r2, #100	; 0x64
   279ec:	sub	sl, r4, #2
   279f0:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   279f4:	ldrb	r3, [r5, r9, lsl #1]
   279f8:	mov	r6, r0
   279fc:	mov	r7, r1
   27a00:	strb	r3, [r4, #-2]
   27a04:	ldrb	r3, [fp, #1]
   27a08:	strb	r3, [r4, #-1]
   27a0c:	mov	r4, sl
   27a10:	mov	r0, r6
   27a14:	mov	r1, r7
   27a18:	mov	r2, #100	; 0x64
   27a1c:	mov	r3, #0
   27a20:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27a24:	mov	r9, r2
   27a28:	add	fp, r5, r2, lsl #1
   27a2c:	mov	r3, #0
   27a30:	mov	r0, r6
   27a34:	mov	r1, r7
   27a38:	mov	r2, #100	; 0x64
   27a3c:	sub	sl, r4, #2
   27a40:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27a44:	ldrb	r3, [r5, r9, lsl #1]
   27a48:	mov	r6, r0
   27a4c:	mov	r7, r1
   27a50:	strb	r3, [r4, #-2]
   27a54:	ldrb	r3, [fp, #1]
   27a58:	strb	r3, [r4, #-1]
   27a5c:	mov	r4, sl
   27a60:	mov	r0, r6
   27a64:	mov	r1, r7
   27a68:	mov	r2, #100	; 0x64
   27a6c:	mov	r3, #0
   27a70:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27a74:	mov	r9, r2
   27a78:	add	fp, r5, r2, lsl #1
   27a7c:	mov	r3, #0
   27a80:	mov	r0, r6
   27a84:	mov	r1, r7
   27a88:	mov	r2, #100	; 0x64
   27a8c:	sub	sl, r4, #2
   27a90:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27a94:	ldrb	r3, [r5, r9, lsl #1]
   27a98:	mov	r6, r0
   27a9c:	mov	r7, r1
   27aa0:	strb	r3, [r4, #-2]
   27aa4:	ldrb	r3, [fp, #1]
   27aa8:	strb	r3, [r4, #-1]
   27aac:	mov	r4, sl
   27ab0:	mov	r0, r6
   27ab4:	mov	r1, r7
   27ab8:	mov	r2, #100	; 0x64
   27abc:	mov	r3, #0
   27ac0:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27ac4:	mov	r9, r2
   27ac8:	add	fp, r5, r2, lsl #1
   27acc:	mov	r3, #0
   27ad0:	mov	r0, r6
   27ad4:	mov	r1, r7
   27ad8:	mov	r2, #100	; 0x64
   27adc:	sub	sl, r4, #2
   27ae0:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27ae4:	ldrb	r3, [r5, r9, lsl #1]
   27ae8:	mov	r6, r0
   27aec:	mov	r7, r1
   27af0:	strb	r3, [r4, #-2]
   27af4:	ldrb	r3, [fp, #1]
   27af8:	strb	r3, [r4, #-1]
   27afc:	mov	r4, sl
   27b00:	mov	r0, r6
   27b04:	mov	r1, r7
   27b08:	mov	r2, #100	; 0x64
   27b0c:	mov	r3, #0
   27b10:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27b14:	mov	r9, r2
   27b18:	add	fp, r5, r2, lsl #1
   27b1c:	mov	r3, #0
   27b20:	mov	r0, r6
   27b24:	mov	r1, r7
   27b28:	mov	r2, #100	; 0x64
   27b2c:	sub	sl, r4, #2
   27b30:	bl	2e72c <flatcc_json_printer_clear@@Base+0x71c>
   27b34:	ldrb	r3, [r5, r9, lsl #1]
   27b38:	mov	r6, r0
   27b3c:	mov	r7, r1
   27b40:	strb	r3, [r4, #-2]
   27b44:	ldrb	r3, [fp, #1]
   27b48:	strb	r3, [r4, #-1]
   27b4c:	mov	r4, sl
   27b50:	b	27838 <flatcc_json_parser_struct_as_root@@Base+0x71c>
   27b54:	cmp	r0, #0
   27b58:	push	{r4, lr}
   27b5c:	lsr	r4, r0, #31
   27b60:	movlt	r3, #45	; 0x2d
   27b64:	rsblt	r0, r0, #0
   27b68:	sxthlt	r0, r0
   27b6c:	strblt	r3, [r1], #1
   27b70:	uxth	r0, r0
   27b74:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   27b78:	add	r0, r0, r4
   27b7c:	pop	{r4, pc}
   27b80:	cmp	r0, #0
   27b84:	push	{r4, lr}
   27b88:	lsr	r4, r0, #31
   27b8c:	movlt	r3, #45	; 0x2d
   27b90:	rsblt	r0, r0, #0
   27b94:	strblt	r3, [r1], #1
   27b98:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   27b9c:	add	r0, r0, r4
   27ba0:	pop	{r4, pc}
   27ba4:	cmp	r0, #0
   27ba8:	push	{r4, lr}
   27bac:	lsr	r4, r1, #31
   27bb0:	sbcs	r3, r1, #0
   27bb4:	bge	27bc8 <flatcc_json_parser_struct_as_root@@Base+0xaac>
   27bb8:	rsbs	r0, r0, #0
   27bbc:	mov	r3, #45	; 0x2d
   27bc0:	rsc	r1, r1, #0
   27bc4:	strb	r3, [r2], #1
   27bc8:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   27bcc:	add	r0, r0, r4
   27bd0:	pop	{r4, pc}
   27bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bd8:	sub	sp, sp, #108	; 0x6c
   27bdc:	sub	r1, r1, #1
   27be0:	add	r1, r0, r1
   27be4:	ldr	lr, [sp, #144]	; 0x90
   27be8:	str	r1, [sp, #92]	; 0x5c
   27bec:	ldr	ip, [sp, #168]	; 0xa8
   27bf0:	ldr	r8, [sp, #172]	; 0xac
   27bf4:	ldr	r9, [sp, #148]	; 0x94
   27bf8:	subs	r6, r2, ip
   27bfc:	ldrd	r4, [sp, #152]	; 0x98
   27c00:	str	r6, [sp, #16]
   27c04:	sbc	r6, r3, r8
   27c08:	adds	sl, r2, ip
   27c0c:	adc	fp, r3, r8
   27c10:	str	r6, [sp, #20]
   27c14:	subs	r6, lr, r4
   27c18:	str	r6, [sp]
   27c1c:	sbc	r6, r9, r5
   27c20:	subs	r2, ip, r2
   27c24:	sbc	r3, r8, r3
   27c28:	str	r6, [sp, #4]
   27c2c:	ldr	r6, [sp, #16]
   27c30:	subs	r6, r6, lr
   27c34:	str	r6, [sp, #96]	; 0x60
   27c38:	ldr	r6, [sp, #20]
   27c3c:	sbc	r6, r6, r9
   27c40:	str	r6, [sp, #100]	; 0x64
   27c44:	ldrd	r6, [sp, #16]
   27c48:	cmp	r5, r7
   27c4c:	cmpeq	r4, r6
   27c50:	bcs	27d54 <flatcc_json_parser_struct_as_root@@Base+0xc38>
   27c54:	ldrd	r0, [sp]
   27c58:	ldrd	r6, [sp, #160]	; 0xa0
   27c5c:	cmp	r7, r1
   27c60:	cmpeq	r6, r0
   27c64:	bls	27ccc <flatcc_json_parser_struct_as_root@@Base+0xbb0>
   27c68:	adds	r3, ip, ip
   27c6c:	str	r3, [sp, #32]
   27c70:	adc	r3, r8, r8
   27c74:	str	r3, [sp, #36]	; 0x24
   27c78:	ldrd	r2, [sp, #32]
   27c7c:	cmp	r3, r5
   27c80:	cmpeq	r2, r4
   27c84:	bls	27dec <flatcc_json_parser_struct_as_root@@Base+0xcd0>
   27c88:	mov	r0, #0
   27c8c:	b	27e18 <flatcc_json_parser_struct_as_root@@Base+0xcfc>
   27c90:	ldrd	r4, [sp, #8]
   27c94:	ldr	r1, [sp, #92]	; 0x5c
   27c98:	ldr	r0, [sp, #92]	; 0x5c
   27c9c:	ldrb	r1, [r1]
   27ca0:	sub	r1, r1, #1
   27ca4:	strb	r1, [r0]
   27ca8:	ldr	r0, [sp]
   27cac:	ldr	r1, [sp, #160]	; 0xa0
   27cb0:	subs	r1, r0, r1
   27cb4:	ldr	r0, [sp, #4]
   27cb8:	str	r1, [sp]
   27cbc:	ldr	r1, [sp, #164]	; 0xa4
   27cc0:	sbc	r1, r0, r1
   27cc4:	str	r1, [sp, #4]
   27cc8:	b	27c44 <flatcc_json_parser_struct_as_root@@Base+0xb28>
   27ccc:	ldr	r1, [sp, #160]	; 0xa0
   27cd0:	adds	r1, r4, r1
   27cd4:	str	r1, [sp, #8]
   27cd8:	ldr	r1, [sp, #164]	; 0xa4
   27cdc:	adc	r1, r5, r1
   27ce0:	str	r1, [sp, #12]
   27ce4:	ldrd	r6, [sp, #8]
   27ce8:	ldrd	r0, [sp, #16]
   27cec:	cmp	r7, r1
   27cf0:	cmpeq	r6, r0
   27cf4:	bcc	27c90 <flatcc_json_parser_struct_as_root@@Base+0xb74>
   27cf8:	ldr	r0, [sp]
   27cfc:	ldr	r1, [sp, #8]
   27d00:	adds	r1, r2, r1
   27d04:	str	r1, [sp, #40]	; 0x28
   27d08:	ldr	r1, [sp, #12]
   27d0c:	adc	r1, r3, r1
   27d10:	str	r1, [sp, #44]	; 0x2c
   27d14:	ldr	r1, [sp, #96]	; 0x60
   27d18:	adds	r1, r1, r0
   27d1c:	ldr	r0, [sp, #4]
   27d20:	str	r1, [sp, #48]	; 0x30
   27d24:	ldr	r1, [sp, #100]	; 0x64
   27d28:	adc	r1, r1, r0
   27d2c:	str	r1, [sp, #52]	; 0x34
   27d30:	ldrd	r0, [sp, #40]	; 0x28
   27d34:	ldrd	r6, [sp, #48]	; 0x30
   27d38:	cmp	r1, r7
   27d3c:	cmpeq	r0, r6
   27d40:	bls	27c90 <flatcc_json_parser_struct_as_root@@Base+0xb74>
   27d44:	cmp	r5, fp
   27d48:	cmpeq	r4, sl
   27d4c:	bcc	27d84 <flatcc_json_parser_struct_as_root@@Base+0xc68>
   27d50:	b	27c68 <flatcc_json_parser_struct_as_root@@Base+0xb4c>
   27d54:	cmp	r5, fp
   27d58:	cmpeq	r4, sl
   27d5c:	bcs	27c68 <flatcc_json_parser_struct_as_root@@Base+0xb4c>
   27d60:	subs	r3, lr, r4
   27d64:	ldrd	r0, [sp, #160]	; 0xa0
   27d68:	str	r3, [sp, #56]	; 0x38
   27d6c:	sbc	r3, r9, r5
   27d70:	str	r3, [sp, #60]	; 0x3c
   27d74:	ldrd	r2, [sp, #56]	; 0x38
   27d78:	cmp	r3, r1
   27d7c:	cmpeq	r2, r0
   27d80:	bcc	27c68 <flatcc_json_parser_struct_as_root@@Base+0xb4c>
   27d84:	ldr	r3, [sp, #160]	; 0xa0
   27d88:	adds	r3, r4, r3
   27d8c:	str	r3, [sp, #24]
   27d90:	ldr	r3, [sp, #164]	; 0xa4
   27d94:	adc	r3, r5, r3
   27d98:	str	r3, [sp, #28]
   27d9c:	ldrd	r2, [sp, #24]
   27da0:	cmp	r3, fp
   27da4:	cmpeq	r2, sl
   27da8:	bcc	27c88 <flatcc_json_parser_struct_as_root@@Base+0xb6c>
   27dac:	subs	r3, sl, r4
   27db0:	str	r3, [sp, #64]	; 0x40
   27db4:	sbc	r3, fp, r5
   27db8:	str	r3, [sp, #68]	; 0x44
   27dbc:	ldr	r3, [sp, #24]
   27dc0:	subs	r3, r3, sl
   27dc4:	str	r3, [sp, #72]	; 0x48
   27dc8:	ldr	r3, [sp, #28]
   27dcc:	sbc	r3, r3, fp
   27dd0:	str	r3, [sp, #76]	; 0x4c
   27dd4:	ldrd	r2, [sp, #64]	; 0x40
   27dd8:	ldrd	r0, [sp, #72]	; 0x48
   27ddc:	cmp	r3, r1
   27de0:	cmpeq	r2, r0
   27de4:	bls	27c68 <flatcc_json_parser_struct_as_root@@Base+0xb4c>
   27de8:	b	27c88 <flatcc_json_parser_struct_as_root@@Base+0xb6c>
   27dec:	lsl	r3, r8, #2
   27df0:	lsl	r2, ip, #2
   27df4:	orr	r3, r3, ip, lsr #30
   27df8:	subs	r2, lr, r2
   27dfc:	sbc	r3, r9, r3
   27e00:	strd	r2, [sp, #80]	; 0x50
   27e04:	ldrd	r2, [sp, #80]	; 0x50
   27e08:	cmp	r3, r5
   27e0c:	cmpeq	r2, r4
   27e10:	movcs	r0, #1
   27e14:	movcc	r0, #0
   27e18:	add	sp, sp, #108	; 0x6c
   27e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e20:	subs	r3, r0, #0
   27e24:	mov	r2, r1
   27e28:	push	{r4, r5, lr}
   27e2c:	movlt	r0, #45	; 0x2d
   27e30:	rsblt	r3, r3, #0
   27e34:	mov	r4, #10
   27e38:	mvn	lr, #9
   27e3c:	strblt	r0, [r2], #1
   27e40:	mov	r0, r2
   27e44:	udiv	ip, r3, r4
   27e48:	mla	r3, lr, ip, r3
   27e4c:	add	r3, r3, #48	; 0x30
   27e50:	strb	r3, [r0], #1
   27e54:	subs	r3, ip, #0
   27e58:	bne	27e44 <flatcc_json_parser_struct_as_root@@Base+0xd28>
   27e5c:	sub	r4, r0, r2
   27e60:	sub	lr, r2, #1
   27e64:	strb	r3, [r0]
   27e68:	add	ip, r4, r4, lsr #31
   27e6c:	add	r2, r2, r4
   27e70:	mov	r3, r0
   27e74:	asr	ip, ip, #1
   27e78:	sub	r4, r2, r3
   27e7c:	cmp	ip, r4
   27e80:	bgt	27e8c <flatcc_json_parser_struct_as_root@@Base+0xd70>
   27e84:	sub	r0, r0, r1
   27e88:	pop	{r4, r5, pc}
   27e8c:	ldrb	r4, [lr, #1]!
   27e90:	ldrb	r5, [r3, #-1]!
   27e94:	strb	r5, [lr]
   27e98:	strb	r4, [r3]
   27e9c:	b	27e78 <flatcc_json_parser_struct_as_root@@Base+0xd5c>
   27ea0:	lsl	r0, r0, #2
   27ea4:	mov	r3, #3
   27ea8:	udiv	r0, r0, r3
   27eac:	add	r0, r0, r3
   27eb0:	bic	r0, r0, #3
   27eb4:	bx	lr
   27eb8:	ldr	r3, [r0, #8]
   27ebc:	add	r1, r1, #2
   27ec0:	lsl	r1, r1, #1
   27ec4:	cmp	r3, r1
   27ec8:	ble	27ee8 <flatcc_json_parser_struct_as_root@@Base+0xdcc>
   27ecc:	ldr	r3, [r0, #4]
   27ed0:	ldrh	r3, [r3, r1]
   27ed4:	cmp	r3, #0
   27ed8:	beq	27ee8 <flatcc_json_parser_struct_as_root@@Base+0xdcc>
   27edc:	ldr	r0, [r0]
   27ee0:	add	r0, r0, r3
   27ee4:	bx	lr
   27ee8:	mov	r0, #0
   27eec:	bx	lr
   27ef0:	ldrd	r2, [r0, #16]
   27ef4:	cmp	r3, r2
   27ef8:	bcc	27f24 <flatcc_json_parser_struct_as_root@@Base+0xe08>
   27efc:	ldr	r1, [r0]
   27f00:	ldr	r2, [r0, #36]	; 0x24
   27f04:	sub	r3, r3, r1
   27f08:	str	r1, [r0, #20]
   27f0c:	cmp	r2, #0
   27f10:	moveq	r2, #3
   27f14:	streq	r2, [r0, #36]	; 0x24
   27f18:	ldr	r2, [r0, #12]
   27f1c:	add	r3, r2, r3
   27f20:	str	r3, [r0, #12]
   27f24:	ldr	r3, [r0, #20]
   27f28:	mov	r2, #0
   27f2c:	strb	r2, [r3]
   27f30:	bx	lr
   27f34:	ldr	ip, [r0, #16]
   27f38:	push	{r4, r5, r6, r7, r8, lr}
   27f3c:	mov	r4, r0
   27f40:	mov	r6, r2
   27f44:	ldr	r3, [r0, #20]
   27f48:	add	lr, r3, r2
   27f4c:	cmp	ip, lr
   27f50:	movhi	r0, r3
   27f54:	bhi	27f8c <flatcc_json_parser_struct_as_root@@Base+0xe70>
   27f58:	cmp	r3, ip
   27f5c:	mov	r7, r1
   27f60:	ldrcs	r3, [r4, #44]	; 0x2c
   27f64:	movcs	r1, #0
   27f68:	bcs	27fcc <flatcc_json_parser_struct_as_root@@Base+0xeb0>
   27f6c:	ldr	r5, [r4, #16]
   27f70:	ldr	r3, [r4, #20]
   27f74:	ldr	r0, [r4, #20]
   27f78:	sub	r5, r5, r3
   27f7c:	cmp	r5, r6
   27f80:	bcc	27fa0 <flatcc_json_parser_struct_as_root@@Base+0xe84>
   27f84:	mov	r2, r6
   27f88:	mov	r1, r7
   27f8c:	bl	14548 <memcpy@plt>
   27f90:	ldr	r3, [r4, #20]
   27f94:	add	r6, r3, r6
   27f98:	str	r6, [r4, #20]
   27f9c:	pop	{r4, r5, r6, r7, r8, pc}
   27fa0:	mov	r1, r7
   27fa4:	mov	r2, r5
   27fa8:	bl	14548 <memcpy@plt>
   27fac:	ldr	r3, [r4, #20]
   27fb0:	add	r7, r7, r5
   27fb4:	sub	r6, r6, r5
   27fb8:	mov	r1, #0
   27fbc:	mov	r0, r4
   27fc0:	add	r3, r3, r5
   27fc4:	str	r3, [r4, #20]
   27fc8:	ldr	r3, [r4, #44]	; 0x2c
   27fcc:	blx	r3
   27fd0:	b	27f6c <flatcc_json_parser_struct_as_root@@Base+0xe50>
   27fd4:	ldr	r3, [r0, #20]
   27fd8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fdc:	mov	sl, r2
   27fe0:	mov	r4, r0
   27fe4:	mov	r7, #92	; 0x5c
   27fe8:	mov	r8, #102	; 0x66
   27fec:	mov	r9, #117	; 0x75
   27ff0:	add	r2, r3, #1
   27ff4:	str	r2, [r0, #20]
   27ff8:	mov	r2, #34	; 0x22
   27ffc:	strb	r2, [r3]
   28000:	ldrb	r5, [r1]
   28004:	mov	r6, r1
   28008:	cmp	r5, #34	; 0x22
   2800c:	cmpne	r5, #31
   28010:	bls	2801c <flatcc_json_parser_struct_as_root@@Base+0xf00>
   28014:	cmp	r5, #92	; 0x5c
   28018:	bne	28088 <flatcc_json_parser_struct_as_root@@Base+0xf6c>
   2801c:	sub	fp, r6, r1
   28020:	mov	r0, r4
   28024:	mov	r2, fp
   28028:	bl	27f34 <flatcc_json_parser_struct_as_root@@Base+0xe18>
   2802c:	ldr	r3, [r4, #20]
   28030:	subs	sl, sl, fp
   28034:	add	r2, r3, #1
   28038:	str	r2, [r4, #20]
   2803c:	beq	28170 <flatcc_json_parser_struct_as_root@@Base+0x1054>
   28040:	strb	r7, [r3]
   28044:	cmp	r5, #12
   28048:	ldr	r3, [r4, #20]
   2804c:	addeq	r2, r3, #1
   28050:	streq	r2, [r4, #20]
   28054:	strbeq	r8, [r3]
   28058:	beq	280c4 <flatcc_json_parser_struct_as_root@@Base+0xfa8>
   2805c:	bhi	28090 <flatcc_json_parser_struct_as_root@@Base+0xf74>
   28060:	cmp	r5, #9
   28064:	beq	280d0 <flatcc_json_parser_struct_as_root@@Base+0xfb4>
   28068:	cmp	r5, #10
   2806c:	beq	280e4 <flatcc_json_parser_struct_as_root@@Base+0xfc8>
   28070:	cmp	r5, #8
   28074:	bne	280f4 <flatcc_json_parser_struct_as_root@@Base+0xfd8>
   28078:	add	r2, r3, #1
   2807c:	str	r2, [r4, #20]
   28080:	mov	r2, #98	; 0x62
   28084:	b	280dc <flatcc_json_parser_struct_as_root@@Base+0xfc0>
   28088:	ldrb	r5, [r6, #1]!
   2808c:	b	28008 <flatcc_json_parser_struct_as_root@@Base+0xeec>
   28090:	cmp	r5, #34	; 0x22
   28094:	beq	280b8 <flatcc_json_parser_struct_as_root@@Base+0xf9c>
   28098:	cmp	r5, #92	; 0x5c
   2809c:	beq	280b8 <flatcc_json_parser_struct_as_root@@Base+0xf9c>
   280a0:	cmp	r5, #13
   280a4:	bne	280f4 <flatcc_json_parser_struct_as_root@@Base+0xfd8>
   280a8:	add	r2, r3, #1
   280ac:	str	r2, [r4, #20]
   280b0:	mov	r2, #114	; 0x72
   280b4:	b	280dc <flatcc_json_parser_struct_as_root@@Base+0xfc0>
   280b8:	add	r2, r3, #1
   280bc:	str	r2, [r4, #20]
   280c0:	strb	r5, [r3]
   280c4:	sub	sl, sl, #1
   280c8:	add	r1, r6, #1
   280cc:	b	28000 <flatcc_json_parser_struct_as_root@@Base+0xee4>
   280d0:	add	r2, r3, #1
   280d4:	str	r2, [r4, #20]
   280d8:	mov	r2, #116	; 0x74
   280dc:	strb	r2, [r3]
   280e0:	b	280c4 <flatcc_json_parser_struct_as_root@@Base+0xfa8>
   280e4:	add	r2, r3, #1
   280e8:	str	r2, [r4, #20]
   280ec:	mov	r2, #110	; 0x6e
   280f0:	b	280dc <flatcc_json_parser_struct_as_root@@Base+0xfc0>
   280f4:	add	r2, r3, #1
   280f8:	str	r2, [r4, #20]
   280fc:	strb	r9, [r3]
   28100:	ldr	r3, [r4, #20]
   28104:	add	r2, r3, #1
   28108:	str	r2, [r4, #20]
   2810c:	mov	r2, #48	; 0x30
   28110:	strb	r2, [r3]
   28114:	ldr	r3, [r4, #20]
   28118:	add	r1, r3, #1
   2811c:	str	r1, [r4, #20]
   28120:	lsr	r1, r5, #4
   28124:	and	r5, r5, #15
   28128:	strb	r2, [r3]
   2812c:	cmp	r1, #10
   28130:	movcc	r3, r2
   28134:	ldr	r2, [r4, #20]
   28138:	movcs	r3, #87	; 0x57
   2813c:	add	r3, r3, r1
   28140:	cmp	r5, #10
   28144:	add	r0, r2, #1
   28148:	str	r0, [r4, #20]
   2814c:	strb	r3, [r2]
   28150:	movcc	r3, #48	; 0x30
   28154:	movcs	r3, #87	; 0x57
   28158:	ldr	r2, [r4, #20]
   2815c:	add	r5, r3, r5
   28160:	add	r1, r2, #1
   28164:	str	r1, [r4, #20]
   28168:	strb	r5, [r2]
   2816c:	b	280c4 <flatcc_json_parser_struct_as_root@@Base+0xfa8>
   28170:	mov	r2, #34	; 0x22
   28174:	strb	r2, [r3]
   28178:	add	sp, sp, #4
   2817c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28180:	ldr	r2, [r1], #4
   28184:	b	27fd4 <flatcc_json_parser_struct_as_root@@Base+0xeb8>
   28188:	ldr	r3, [r0, #20]
   2818c:	mov	ip, #34	; 0x22
   28190:	push	{r4, r5, r6, lr}
   28194:	mov	r4, r0
   28198:	strb	ip, [r3]
   2819c:	ldrb	ip, [r0, #26]
   281a0:	ldr	lr, [r0, #16]
   281a4:	ldr	r3, [r0, #20]
   281a8:	cmp	ip, #0
   281ac:	addeq	r3, r3, #1
   281b0:	add	ip, r3, r2
   281b4:	cmp	lr, ip
   281b8:	str	r3, [r0, #20]
   281bc:	bls	281fc <flatcc_json_parser_struct_as_root@@Base+0x10e0>
   281c0:	mov	r0, r3
   281c4:	mov	r5, r2
   281c8:	bl	14548 <memcpy@plt>
   281cc:	ldr	r2, [r4, #20]
   281d0:	add	r2, r2, r5
   281d4:	str	r2, [r4, #20]
   281d8:	ldr	r3, [r4, #20]
   281dc:	mov	r2, #34	; 0x22
   281e0:	strb	r2, [r3]
   281e4:	ldrb	r2, [r4, #26]
   281e8:	ldr	r3, [r4, #20]
   281ec:	cmp	r2, #0
   281f0:	addeq	r3, r3, #1
   281f4:	str	r3, [r4, #20]
   281f8:	pop	{r4, r5, r6, pc}
   281fc:	bl	27f34 <flatcc_json_parser_struct_as_root@@Base+0xe18>
   28200:	b	281d8 <flatcc_json_parser_struct_as_root@@Base+0x10bc>
   28204:	push	{r4, r5, r6, lr}
   28208:	mov	r4, r0
   2820c:	ldrb	r3, [r0, #25]
   28210:	ldr	r2, [r0, #16]
   28214:	ldr	r5, [r0, #32]
   28218:	mul	r5, r5, r3
   2821c:	ldr	r3, [r0, #20]
   28220:	add	r1, r3, r5
   28224:	cmp	r2, r1
   28228:	movcs	r2, r5
   2822c:	movcs	r1, #32
   28230:	movcs	r0, r3
   28234:	bcs	28268 <flatcc_json_parser_struct_as_root@@Base+0x114c>
   28238:	cmp	r3, r2
   2823c:	movcs	r1, #0
   28240:	ldrcs	r3, [r4, #44]	; 0x2c
   28244:	bcs	282a4 <flatcc_json_parser_struct_as_root@@Base+0x1188>
   28248:	ldr	r6, [r4, #16]
   2824c:	ldr	r3, [r4, #20]
   28250:	ldr	r0, [r4, #20]
   28254:	sub	r6, r6, r3
   28258:	cmp	r6, r5
   2825c:	bcc	2827c <flatcc_json_parser_struct_as_root@@Base+0x1160>
   28260:	mov	r2, r5
   28264:	mov	r1, #32
   28268:	bl	145c0 <memset@plt>
   2826c:	ldr	r3, [r4, #20]
   28270:	add	r5, r3, r5
   28274:	str	r5, [r4, #20]
   28278:	pop	{r4, r5, r6, pc}
   2827c:	mov	r1, #32
   28280:	mov	r2, r6
   28284:	bl	145c0 <memset@plt>
   28288:	ldr	r3, [r4, #20]
   2828c:	sub	r5, r5, r6
   28290:	mov	r1, #0
   28294:	mov	r0, r4
   28298:	add	r3, r3, r6
   2829c:	str	r3, [r4, #20]
   282a0:	ldr	r3, [r4, #44]	; 0x2c
   282a4:	blx	r3
   282a8:	b	28248 <flatcc_json_parser_struct_as_root@@Base+0x112c>
   282ac:	push	{r4, r5, r6, lr}
   282b0:	cmp	r1, #0
   282b4:	mov	r4, r0
   282b8:	ldr	r2, [r0, #20]
   282bc:	ldr	r0, [r0]
   282c0:	ldr	r3, [r4, #40]	; 0x28
   282c4:	bne	28324 <flatcc_json_parser_struct_as_root@@Base+0x1208>
   282c8:	ldr	r5, [r4, #16]
   282cc:	cmp	r5, r2
   282d0:	bhi	28324 <flatcc_json_parser_struct_as_root@@Base+0x1208>
   282d4:	sub	r5, r2, r5
   282d8:	mov	r2, #1
   282dc:	ldr	r1, [r4, #8]
   282e0:	bl	1456c <fwrite@plt>
   282e4:	ldr	r0, [r4]
   282e8:	mov	r2, r5
   282ec:	ldr	r1, [r4, #8]
   282f0:	add	r1, r0, r1
   282f4:	bl	14548 <memcpy@plt>
   282f8:	ldr	r2, [r4]
   282fc:	ldr	r3, [r4, #12]
   28300:	add	r2, r2, r5
   28304:	str	r2, [r4, #20]
   28308:	ldr	r2, [r4, #8]
   2830c:	add	r3, r3, r2
   28310:	str	r3, [r4, #12]
   28314:	ldr	r3, [r4, #20]
   28318:	mov	r2, #0
   2831c:	strb	r2, [r3]
   28320:	pop	{r4, r5, r6, pc}
   28324:	sub	r5, r2, r0
   28328:	mov	r2, #1
   2832c:	mov	r1, r5
   28330:	bl	1456c <fwrite@plt>
   28334:	ldr	r3, [r4]
   28338:	ldr	r2, [r4, #12]
   2833c:	str	r3, [r4, #20]
   28340:	add	r2, r2, r5
   28344:	str	r2, [r4, #12]
   28348:	b	28314 <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   2834c:	push	{r4, r5, r6, lr}
   28350:	mov	r2, #0
   28354:	ldr	r3, [r0]
   28358:	ldr	r5, [r0, #20]
   2835c:	strb	r2, [r5]
   28360:	ldr	r2, [r0, #16]
   28364:	ldr	r1, [r0, #20]
   28368:	cmp	r1, r2
   2836c:	popcc	{r4, r5, r6, pc}
   28370:	mov	r4, r0
   28374:	sub	r5, r5, r3
   28378:	ldrd	r0, [r0]
   2837c:	lsl	r1, r1, #1
   28380:	bl	14560 <realloc@plt>
   28384:	cmp	r0, #0
   28388:	bne	283c0 <flatcc_json_parser_struct_as_root@@Base+0x12a4>
   2838c:	ldr	r3, [r4, #36]	; 0x24
   28390:	cmp	r3, #0
   28394:	moveq	r3, #3
   28398:	streq	r3, [r4, #36]	; 0x24
   2839c:	ldr	r3, [r4, #12]
   283a0:	add	r5, r3, r5
   283a4:	ldr	r3, [r4]
   283a8:	str	r5, [r4, #12]
   283ac:	str	r3, [r4, #20]
   283b0:	ldr	r3, [r4, #20]
   283b4:	mov	r2, #0
   283b8:	strb	r2, [r3]
   283bc:	pop	{r4, r5, r6, pc}
   283c0:	ldr	r3, [r4, #4]
   283c4:	add	r5, r0, r5
   283c8:	str	r5, [r4, #20]
   283cc:	lsl	r3, r3, #1
   283d0:	stm	r4, {r0, r3}
   283d4:	sub	r3, r3, #64	; 0x40
   283d8:	add	r0, r0, r3
   283dc:	str	r3, [r4, #8]
   283e0:	str	r0, [r4, #16]
   283e4:	b	283b0 <flatcc_json_parser_struct_as_root@@Base+0x1294>
   283e8:	ldr	r2, [r0, #16]
   283ec:	ldr	r1, [r0, #20]
   283f0:	cmp	r1, r2
   283f4:	bxcc	lr
   283f8:	mov	r1, #0
   283fc:	ldr	r3, [r0, #44]	; 0x2c
   28400:	bx	r3
   28404:	push	{r4, r5, r6, lr}
   28408:	mov	r4, r0
   2840c:	mov	r5, r1
   28410:	mov	r6, r2
   28414:	ldrb	r3, [r0, #25]
   28418:	cmp	r3, #0
   2841c:	beq	28480 <flatcc_json_parser_struct_as_root@@Base+0x1364>
   28420:	ldr	r3, [r0, #20]
   28424:	add	r2, r3, #1
   28428:	str	r2, [r0, #20]
   2842c:	mov	r2, #10
   28430:	strb	r2, [r3]
   28434:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   28438:	mov	r2, r6
   2843c:	mov	r1, r5
   28440:	mov	r0, r4
   28444:	bl	28188 <flatcc_json_parser_struct_as_root@@Base+0x106c>
   28448:	ldr	r3, [r4, #20]
   2844c:	add	r2, r3, #1
   28450:	str	r2, [r4, #20]
   28454:	mov	r2, #58	; 0x3a
   28458:	strb	r2, [r3]
   2845c:	mov	r2, #32
   28460:	ldr	r3, [r4, #20]
   28464:	strb	r2, [r3]
   28468:	ldrb	r2, [r4, #25]
   2846c:	ldr	r3, [r4, #20]
   28470:	cmp	r2, #0
   28474:	addne	r3, r3, #1
   28478:	str	r3, [r4, #20]
   2847c:	pop	{r4, r5, r6, pc}
   28480:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   28484:	b	28438 <flatcc_json_parser_struct_as_root@@Base+0x131c>
   28488:	cmp	r0, #99	; 0x63
   2848c:	mov	r3, #0
   28490:	bls	284d0 <flatcc_json_parser_struct_as_root@@Base+0x13b4>
   28494:	strb	r3, [r1, #3]
   28498:	mov	r3, #100	; 0x64
   2849c:	ldr	ip, [pc, #112]	; 28514 <flatcc_json_parser_struct_as_root@@Base+0x13f8>
   284a0:	udiv	r2, r0, r3
   284a4:	mls	r0, r3, r2, r0
   284a8:	add	r2, r2, #48	; 0x30
   284ac:	uxtb	r0, r0
   284b0:	add	r3, ip, r0, lsl #1
   284b4:	ldrb	r0, [ip, r0, lsl #1]
   284b8:	strb	r0, [r1, #1]
   284bc:	mov	r0, #3
   284c0:	ldrb	r3, [r3, #1]
   284c4:	strb	r2, [r1]
   284c8:	strb	r3, [r1, #2]
   284cc:	bx	lr
   284d0:	cmp	r0, #9
   284d4:	bls	28500 <flatcc_json_parser_struct_as_root@@Base+0x13e4>
   284d8:	strb	r3, [r1, #2]
   284dc:	sxth	r0, r0
   284e0:	ldr	r3, [pc, #44]	; 28514 <flatcc_json_parser_struct_as_root@@Base+0x13f8>
   284e4:	add	r2, r3, r0, lsl #1
   284e8:	ldrb	r3, [r3, r0, lsl #1]
   284ec:	mov	r0, #2
   284f0:	strb	r3, [r1]
   284f4:	ldrb	r3, [r2, #1]
   284f8:	strb	r3, [r1, #1]
   284fc:	bx	lr
   28500:	add	r0, r0, #48	; 0x30
   28504:	strb	r0, [r1]
   28508:	mov	r0, #1
   2850c:	strb	r3, [r1, #1]
   28510:	bx	lr
   28514:	andeq	r4, r3, r0, lsl #2
   28518:	cmp	r0, #0
   2851c:	push	{r4, lr}
   28520:	lsr	r4, r0, #31
   28524:	movlt	r3, #45	; 0x2d
   28528:	rsblt	r0, r0, #0
   2852c:	sxtblt	r0, r0
   28530:	strblt	r3, [r1], #1
   28534:	uxtb	r0, r0
   28538:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   2853c:	add	r0, r0, r4
   28540:	pop	{r4, pc}
   28544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28548:	sub	sp, sp, #20
   2854c:	mov	sl, r3
   28550:	ldr	r3, [sp, #64]	; 0x40
   28554:	ldr	lr, [sp, #68]	; 0x44
   28558:	umull	r6, r7, r2, lr
   2855c:	strd	r6, [sp]
   28560:	umull	r6, r7, sl, r3
   28564:	umull	r2, r3, r2, r3
   28568:	ldr	r8, [sp]
   2856c:	mov	r2, #0
   28570:	mov	r9, r2
   28574:	strd	r6, [sp, #8]
   28578:	ldr	fp, [sp, #8]
   2857c:	mov	r1, r3
   28580:	adds	r1, r1, fp
   28584:	adc	r3, r2, r2
   28588:	adds	r1, r1, #-2147483648	; 0x80000000
   2858c:	adc	r3, r3, r2
   28590:	adds	r1, r1, r8
   28594:	ldr	r8, [sp, #4]
   28598:	adc	r3, r3, r2
   2859c:	mov	r1, r3
   285a0:	ldr	r3, [sp, #12]
   285a4:	ldr	r2, [sp, #72]	; 0x48
   285a8:	adds	r4, r3, r8
   285ac:	ldr	r3, [sp, #56]	; 0x38
   285b0:	adc	r5, r9, r9
   285b4:	umlal	r4, r5, lr, sl
   285b8:	add	r3, r3, r2
   285bc:	adds	r1, r1, r4
   285c0:	add	r3, r3, #64	; 0x40
   285c4:	adc	r6, r9, r5
   285c8:	stm	r0, {r1, r6}
   285cc:	str	r3, [r0, #8]
   285d0:	add	sp, sp, #20
   285d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285d8:	push	{r4, lr}
   285dc:	mov	r2, #260	; 0x104
   285e0:	ldr	r3, [pc, #8]	; 285f0 <flatcc_json_parser_struct_as_root@@Base+0x14d4>
   285e4:	ldr	r1, [pc, #8]	; 285f4 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   285e8:	ldr	r0, [pc, #8]	; 285f8 <flatcc_json_parser_struct_as_root@@Base+0x14dc>
   285ec:	bl	14620 <__assert_fail@plt>
   285f0:	andeq	r4, r3, r9, asr #3
   285f4:	andeq	r3, r3, fp, lsl #26
   285f8:	andeq	r3, r3, r1, ror #26
   285fc:	push	{r4, lr}
   28600:	mov	r2, #239	; 0xef
   28604:	ldr	r3, [pc, #8]	; 28614 <flatcc_json_parser_struct_as_root@@Base+0x14f8>
   28608:	ldr	r1, [pc, #8]	; 28618 <flatcc_json_parser_struct_as_root@@Base+0x14fc>
   2860c:	ldr	r0, [pc, #8]	; 2861c <flatcc_json_parser_struct_as_root@@Base+0x1500>
   28610:	bl	14620 <__assert_fail@plt>
   28614:	andeq	r4, r3, r1, ror #3
   28618:	andeq	r3, r3, fp, lsl #26
   2861c:	andeq	r4, r3, r4, asr #16
   28620:	cmp	r0, #0
   28624:	beq	28644 <flatcc_json_parser_struct_as_root@@Base+0x1528>
   28628:	ldr	r3, [pc, #48]	; 28660 <flatcc_json_parser_struct_as_root@@Base+0x1544>
   2862c:	mov	r0, #4
   28630:	ldr	r2, [r3]
   28634:	ldrb	r3, [r3, #4]
   28638:	str	r2, [r1]
   2863c:	strb	r3, [r1, #4]
   28640:	bx	lr
   28644:	ldr	r3, [pc, #24]	; 28664 <flatcc_json_parser_struct_as_root@@Base+0x1548>
   28648:	mov	r0, #5
   2864c:	ldr	r2, [r3]
   28650:	ldrh	r3, [r3, #4]
   28654:	str	r2, [r1]
   28658:	strh	r3, [r1, #4]
   2865c:	bx	lr
   28660:	strdeq	r4, [r3], -r5
   28664:	strdeq	r4, [r3], -fp
   28668:	subs	r2, r2, #1
   2866c:	push	{r4, lr}
   28670:	mov	r4, r0
   28674:	sub	sp, sp, #24
   28678:	bne	28694 <flatcc_json_parser_struct_as_root@@Base+0x1578>
   2867c:	ldr	r3, [r0, #36]	; 0x24
   28680:	cmp	r3, #0
   28684:	moveq	r3, #2
   28688:	streq	r3, [r0, #36]	; 0x24
   2868c:	add	sp, sp, #24
   28690:	pop	{r4, pc}
   28694:	ldr	ip, [r0, #32]
   28698:	add	ip, ip, #1
   2869c:	str	ip, [r0, #32]
   286a0:	ldr	ip, [r0, #20]
   286a4:	add	lr, ip, #1
   286a8:	str	lr, [r0, #20]
   286ac:	mov	lr, #123	; 0x7b
   286b0:	strb	lr, [ip]
   286b4:	mov	ip, #0
   286b8:	str	r1, [sp, #4]
   286bc:	str	r2, [sp, #16]
   286c0:	ldr	r2, [r1]
   286c4:	str	ip, [sp, #20]
   286c8:	sub	r1, r1, r2
   286cc:	ldrh	r2, [r1]
   286d0:	str	r1, [sp, #8]
   286d4:	add	r1, sp, #4
   286d8:	str	r2, [sp, #12]
   286dc:	blx	r3
   286e0:	ldrb	r3, [r4, #25]
   286e4:	cmp	r3, #0
   286e8:	beq	28714 <flatcc_json_parser_struct_as_root@@Base+0x15f8>
   286ec:	ldr	r3, [r4, #20]
   286f0:	mov	r0, r4
   286f4:	add	r2, r3, #1
   286f8:	str	r2, [r4, #20]
   286fc:	mov	r2, #10
   28700:	strb	r2, [r3]
   28704:	ldr	r3, [r4, #32]
   28708:	sub	r3, r3, #1
   2870c:	str	r3, [r4, #32]
   28710:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   28714:	ldr	r3, [r4, #20]
   28718:	add	r2, r3, #1
   2871c:	str	r2, [r4, #20]
   28720:	mov	r2, #125	; 0x7d
   28724:	strb	r2, [r3]
   28728:	b	2868c <flatcc_json_parser_struct_as_root@@Base+0x1570>
   2872c:	push	{r0, r1, r2, r4, r5, lr}
   28730:	mov	r4, r0
   28734:	mov	r0, #0
   28738:	cmp	r1, r0
   2873c:	cmpne	r2, #7
   28740:	str	r0, [sp, #4]
   28744:	bhi	2876c <flatcc_json_parser_struct_as_root@@Base+0x1650>
   28748:	ldr	r3, [r4, #36]	; 0x24
   2874c:	movw	r2, #1019	; 0x3fb
   28750:	ldr	r1, [pc, #116]	; 287cc <flatcc_json_parser_struct_as_root@@Base+0x16b0>
   28754:	cmp	r3, r0
   28758:	ldr	r0, [pc, #112]	; 287d0 <flatcc_json_parser_struct_as_root@@Base+0x16b4>
   2875c:	moveq	r3, #1
   28760:	streq	r3, [r4, #36]	; 0x24
   28764:	ldr	r3, [pc, #104]	; 287d4 <flatcc_json_parser_struct_as_root@@Base+0x16b8>
   28768:	bl	14620 <__assert_fail@plt>
   2876c:	cmp	r3, #0
   28770:	beq	287c0 <flatcc_json_parser_struct_as_root@@Base+0x16a4>
   28774:	mov	r2, #4
   28778:	mov	r5, r1
   2877c:	add	r0, sp, r2
   28780:	mov	r1, r3
   28784:	bl	145cc <strncpy@plt>
   28788:	ldr	r2, [r5, #4]
   2878c:	ldr	r3, [sp, #4]
   28790:	cmp	r2, r3
   28794:	cmpne	r3, #0
   28798:	beq	287c0 <flatcc_json_parser_struct_as_root@@Base+0x16a4>
   2879c:	ldr	r3, [r4, #36]	; 0x24
   287a0:	movw	r2, #1028	; 0x404
   287a4:	ldr	r1, [pc, #32]	; 287cc <flatcc_json_parser_struct_as_root@@Base+0x16b0>
   287a8:	ldr	r0, [pc, #40]	; 287d8 <flatcc_json_parser_struct_as_root@@Base+0x16bc>
   287ac:	cmp	r3, #0
   287b0:	moveq	r3, #1
   287b4:	streq	r3, [r4, #36]	; 0x24
   287b8:	ldr	r3, [pc, #20]	; 287d4 <flatcc_json_parser_struct_as_root@@Base+0x16b8>
   287bc:	b	28768 <flatcc_json_parser_struct_as_root@@Base+0x164c>
   287c0:	mov	r0, #1
   287c4:	add	sp, sp, #12
   287c8:	pop	{r4, r5, pc}
   287cc:	andeq	r4, r3, sp, asr r8
   287d0:	andeq	r4, r3, r8, lsr #17
   287d4:	andeq	r4, r3, r2, lsl #4
   287d8:	andeq	r4, r3, r7, asr #17
   287dc:	push	{r4, r5, lr}
   287e0:	bics	lr, r3, #224	; 0xe0
   287e4:	ldr	ip, [r2]
   287e8:	beq	28800 <flatcc_json_parser_struct_as_root@@Base+0x16e4>
   287ec:	cmp	lr, #1
   287f0:	ldreq	lr, [pc, #312]	; 28930 <flatcc_json_parser_struct_as_root@@Base+0x1814>
   287f4:	beq	28804 <flatcc_json_parser_struct_as_root@@Base+0x16e8>
   287f8:	mov	r0, #3
   287fc:	b	2887c <flatcc_json_parser_struct_as_root@@Base+0x1760>
   28800:	ldr	lr, [pc, #300]	; 28934 <flatcc_json_parser_struct_as_root@@Base+0x1818>
   28804:	cmp	ip, #2
   28808:	mov	r4, r0
   2880c:	mov	r5, r1
   28810:	add	r0, r0, #4
   28814:	add	r1, r1, #3
   28818:	bhi	2888c <flatcc_json_parser_struct_as_root@@Base+0x1770>
   2881c:	cmp	ip, #1
   28820:	and	r3, r3, #128	; 0x80
   28824:	beq	288fc <flatcc_json_parser_struct_as_root@@Base+0x17e0>
   28828:	cmp	ip, #2
   2882c:	bne	288f0 <flatcc_json_parser_struct_as_root@@Base+0x17d4>
   28830:	ldrb	r1, [r5]
   28834:	cmp	r3, #0
   28838:	ldrb	r1, [lr, r1, lsr #2]
   2883c:	strb	r1, [r4]
   28840:	ldrb	r1, [r5]
   28844:	ldrb	r0, [r5, #1]
   28848:	lsl	r1, r1, #4
   2884c:	and	r1, r1, #48	; 0x30
   28850:	orr	r1, r1, r0, lsr #4
   28854:	ldrb	r1, [lr, r1]
   28858:	strb	r1, [r4, #1]
   2885c:	ldrb	r1, [r5, #1]
   28860:	lsl	r1, r1, #2
   28864:	and	r1, r1, #60	; 0x3c
   28868:	ldrb	r1, [lr, r1]
   2886c:	strb	r1, [r4, #2]
   28870:	bne	288e8 <flatcc_json_parser_struct_as_root@@Base+0x17cc>
   28874:	mov	r0, #0
   28878:	mov	ip, r0
   2887c:	ldr	r3, [r2]
   28880:	sub	ip, r3, ip
   28884:	str	ip, [r2]
   28888:	pop	{r4, r5, pc}
   2888c:	ldrb	r4, [r1, #-3]
   28890:	sub	ip, ip, #3
   28894:	ldrb	r4, [lr, r4, lsr #2]
   28898:	strb	r4, [r0, #-4]
   2889c:	ldrb	r4, [r1, #-3]
   288a0:	ldrb	r5, [r1, #-2]
   288a4:	lsl	r4, r4, #4
   288a8:	and	r4, r4, #48	; 0x30
   288ac:	orr	r4, r4, r5, lsr #4
   288b0:	ldrb	r4, [lr, r4]
   288b4:	strb	r4, [r0, #-3]
   288b8:	ldrb	r4, [r1, #-2]
   288bc:	ldrb	r5, [r1, #-1]
   288c0:	lsl	r4, r4, #2
   288c4:	and	r4, r4, #60	; 0x3c
   288c8:	orr	r4, r4, r5, lsr #6
   288cc:	ldrb	r4, [lr, r4]
   288d0:	strb	r4, [r0, #-2]
   288d4:	ldrb	r4, [r1, #-1]
   288d8:	and	r4, r4, #63	; 0x3f
   288dc:	ldrb	r4, [lr, r4]
   288e0:	strb	r4, [r0, #-1]
   288e4:	b	28804 <flatcc_json_parser_struct_as_root@@Base+0x16e8>
   288e8:	mov	r3, #61	; 0x3d
   288ec:	strb	r3, [r4, #3]
   288f0:	mov	ip, #0
   288f4:	mov	r0, ip
   288f8:	b	2887c <flatcc_json_parser_struct_as_root@@Base+0x1760>
   288fc:	ldrb	r1, [r5]
   28900:	cmp	r3, #0
   28904:	ldrb	r1, [lr, r1, lsr #2]
   28908:	strb	r1, [r4]
   2890c:	ldrb	r1, [r5]
   28910:	lsl	r1, r1, #4
   28914:	and	r1, r1, #48	; 0x30
   28918:	ldrb	r1, [lr, r1]
   2891c:	strb	r1, [r4, #1]
   28920:	beq	28874 <flatcc_json_parser_struct_as_root@@Base+0x1758>
   28924:	mov	r3, #61	; 0x3d
   28928:	strb	r3, [r4, #2]
   2892c:	b	288ec <flatcc_json_parser_struct_as_root@@Base+0x17d0>
   28930:	andeq	r4, r3, r2, ror #17
   28934:	andeq	r4, r3, r3, lsr #18
   28938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2893c:	sub	sp, sp, #180	; 0xb4
   28940:	subs	r1, r0, #0
   28944:	vstr	d0, [sp, #64]	; 0x40
   28948:	str	r1, [sp, #104]	; 0x68
   2894c:	ldrd	r6, [sp, #64]	; 0x40
   28950:	bne	28968 <flatcc_json_parser_struct_as_root@@Base+0x184c>
   28954:	ldr	r3, [pc, #1140]	; 28dd0 <flatcc_json_parser_struct_as_root@@Base+0x1cb4>
   28958:	mov	r2, #189	; 0xbd
   2895c:	ldr	r1, [pc, #1136]	; 28dd4 <flatcc_json_parser_struct_as_root@@Base+0x1cb8>
   28960:	ldr	r0, [pc, #1136]	; 28dd8 <flatcc_json_parser_struct_as_root@@Base+0x1cbc>
   28964:	bl	14620 <__assert_fail@plt>
   28968:	ldr	r5, [pc, #1132]	; 28ddc <flatcc_json_parser_struct_as_root@@Base+0x1cc0>
   2896c:	adds	r2, r6, r6
   28970:	mov	r4, #0
   28974:	adc	r3, r7, r7
   28978:	cmp	r3, r5
   2897c:	cmpeq	r2, r4
   28980:	bls	289a0 <flatcc_json_parser_struct_as_root@@Base+0x1884>
   28984:	mov	r3, r6
   28988:	mov	r2, r7
   2898c:	ldr	r1, [pc, #1100]	; 28de0 <flatcc_json_parser_struct_as_root@@Base+0x1cc4>
   28990:	bl	145fc <sprintf@plt>
   28994:	mov	r0, #21
   28998:	add	sp, sp, #180	; 0xb4
   2899c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   289a0:	cmp	r6, #0
   289a4:	ldr	r4, [sp, #104]	; 0x68
   289a8:	sbcs	r3, r7, #0
   289ac:	bge	289cc <flatcc_json_parser_struct_as_root@@Base+0x18b0>
   289b0:	vldr	d7, [sp, #64]	; 0x40
   289b4:	mov	r3, #45	; 0x2d
   289b8:	strb	r3, [r4], #1
   289bc:	add	r3, r7, #-2147483648	; 0x80000000
   289c0:	mov	r7, r3
   289c4:	vneg.f64	d7, d7
   289c8:	vstr	d7, [sp, #64]	; 0x40
   289cc:	orrs	r3, r6, r7
   289d0:	bne	289f0 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   289d4:	mov	r3, #48	; 0x30
   289d8:	strb	r3, [r4]
   289dc:	mov	r3, #0
   289e0:	strb	r3, [r4, #1]!
   289e4:	ldr	r3, [sp, #104]	; 0x68
   289e8:	sub	r0, r4, r3
   289ec:	b	28998 <flatcc_json_parser_struct_as_root@@Base+0x187c>
   289f0:	ldr	r3, [pc, #1004]	; 28de4 <flatcc_json_parser_struct_as_root@@Base+0x1cc8>
   289f4:	mov	r2, #0
   289f8:	cmp	r7, r3
   289fc:	cmpeq	r6, r2
   28a00:	bne	28a28 <flatcc_json_parser_struct_as_root@@Base+0x190c>
   28a04:	mov	r3, #105	; 0x69
   28a08:	strb	r3, [r4]
   28a0c:	mov	r3, #110	; 0x6e
   28a10:	strb	r3, [r4, #1]
   28a14:	mov	r3, #102	; 0x66
   28a18:	strb	r3, [r4, #2]
   28a1c:	mov	r3, #0
   28a20:	strb	r3, [r4, #3]!
   28a24:	b	289e4 <flatcc_json_parser_struct_as_root@@Base+0x18c8>
   28a28:	ldrd	r2, [sp, #64]	; 0x40
   28a2c:	mov	r0, #0
   28a30:	mov	r1, #0
   28a34:	strd	r0, [sp, #56]	; 0x38
   28a38:	bic	r1, r3, #-2147483648	; 0x80000000
   28a3c:	mov	sl, r2
   28a40:	ubfx	fp, r3, #0, #20
   28a44:	lsr	r1, r1, #20
   28a48:	lsl	r1, r1, #20
   28a4c:	str	r1, [sp, #60]	; 0x3c
   28a50:	ldrd	r0, [sp, #56]	; 0x38
   28a54:	orrs	r2, r0, r1
   28a58:	bne	28a88 <flatcc_json_parser_struct_as_root@@Base+0x196c>
   28a5c:	orrs	r3, sl, fp
   28a60:	beq	28aa0 <flatcc_json_parser_struct_as_root@@Base+0x1984>
   28a64:	ldr	r3, [pc, #892]	; 28de8 <flatcc_json_parser_struct_as_root@@Base+0x1ccc>
   28a68:	mov	r1, sl
   28a6c:	mov	lr, fp
   28a70:	mov	r2, r3
   28a74:	mov	ip, #0
   28a78:	str	r1, [sp, #32]
   28a7c:	ldr	r0, [pc, #872]	; 28dec <flatcc_json_parser_struct_as_root@@Base+0x1cd0>
   28a80:	str	lr, [sp, #36]	; 0x24
   28a84:	b	28ac4 <flatcc_json_parser_struct_as_root@@Base+0x19a8>
   28a88:	ubfx	r3, r3, #20, #11
   28a8c:	adds	r1, sl, #0
   28a90:	adc	lr, fp, #1048576	; 0x100000
   28a94:	sub	r3, r3, #1072	; 0x430
   28a98:	sub	r3, r3, #3
   28a9c:	b	28a70 <flatcc_json_parser_struct_as_root@@Base+0x1954>
   28aa0:	bl	285d8 <flatcc_json_parser_struct_as_root@@Base+0x14bc>
   28aa4:	ldr	r6, [sp, #32]
   28aa8:	ldr	r2, [sp, #36]	; 0x24
   28aac:	lsl	r2, r2, #10
   28ab0:	orr	r2, r2, r6, lsr #22
   28ab4:	lsl	r6, r6, #10
   28ab8:	str	r2, [sp, #36]	; 0x24
   28abc:	mov	r2, r5
   28ac0:	str	r6, [sp, #32]
   28ac4:	ldr	r6, [sp, #36]	; 0x24
   28ac8:	sub	r5, r2, #10
   28acc:	str	ip, [sp, #88]	; 0x58
   28ad0:	and	r6, r6, r0
   28ad4:	str	r6, [sp, #92]	; 0x5c
   28ad8:	ldrd	r6, [sp, #88]	; 0x58
   28adc:	orrs	r6, r6, r7
   28ae0:	beq	28aa4 <flatcc_json_parser_struct_as_root@@Base+0x1988>
   28ae4:	ldrd	r6, [sp, #32]
   28ae8:	mov	ip, r2
   28aec:	sub	r2, r2, #1
   28af0:	cmp	r6, #0
   28af4:	sbcs	r0, r7, #0
   28af8:	bge	28ba0 <flatcc_json_parser_struct_as_root@@Base+0x1a84>
   28afc:	adds	r2, r1, r1
   28b00:	sub	r5, r3, #11
   28b04:	adc	r0, lr, lr
   28b08:	adds	r8, r2, #1
   28b0c:	adc	r9, r0, #0
   28b10:	str	r0, [sp, #88]	; 0x58
   28b14:	sub	r0, r3, #1
   28b18:	lsl	r6, r9, #10
   28b1c:	lsl	r7, r8, #10
   28b20:	orr	r6, r6, r8, lsr #22
   28b24:	mov	r8, r7
   28b28:	mov	r9, r6
   28b2c:	mov	r6, #0
   28b30:	str	r6, [sp, #72]	; 0x48
   28b34:	lsr	r6, r9, #22
   28b38:	lsl	r6, r6, #22
   28b3c:	str	r6, [sp, #76]	; 0x4c
   28b40:	sub	r6, r5, #10
   28b44:	str	r6, [sp, #108]	; 0x6c
   28b48:	ldrd	r6, [sp, #72]	; 0x48
   28b4c:	orrs	r6, r6, r7
   28b50:	beq	28bbc <flatcc_json_parser_struct_as_root@@Base+0x1aa0>
   28b54:	cmp	r8, #0
   28b58:	mov	r6, r5
   28b5c:	sbcs	r7, r9, #0
   28b60:	sub	r5, r5, #1
   28b64:	bge	28bc4 <flatcc_json_parser_struct_as_root@@Base+0x1aa8>
   28b68:	vldr	d7, [sp, #64]	; 0x40
   28b6c:	vcmpe.f64	d7, #0.0
   28b70:	vmrs	APSR_nzcv, fpscr
   28b74:	ble	28b8c <flatcc_json_parser_struct_as_root@@Base+0x1a70>
   28b78:	vldr	d7, [pc, #576]	; 28dc0 <flatcc_json_parser_struct_as_root@@Base+0x1ca4>
   28b7c:	vldr	d6, [sp, #64]	; 0x40
   28b80:	vcmpe.f64	d6, d7
   28b84:	vmrs	APSR_nzcv, fpscr
   28b88:	bls	28bd0 <flatcc_json_parser_struct_as_root@@Base+0x1ab4>
   28b8c:	ldr	r3, [pc, #604]	; 28df0 <flatcc_json_parser_struct_as_root@@Base+0x1cd4>
   28b90:	mov	r2, #138	; 0x8a
   28b94:	ldr	r1, [pc, #568]	; 28dd4 <flatcc_json_parser_struct_as_root@@Base+0x1cb8>
   28b98:	ldr	r0, [pc, #596]	; 28df4 <flatcc_json_parser_struct_as_root@@Base+0x1cd8>
   28b9c:	b	28964 <flatcc_json_parser_struct_as_root@@Base+0x1848>
   28ba0:	ldr	r0, [sp, #32]
   28ba4:	adds	r0, r0, r0
   28ba8:	str	r0, [sp, #32]
   28bac:	ldr	r0, [sp, #36]	; 0x24
   28bb0:	adc	r0, r0, r0
   28bb4:	str	r0, [sp, #36]	; 0x24
   28bb8:	b	28ae4 <flatcc_json_parser_struct_as_root@@Base+0x19c8>
   28bbc:	ldr	r5, [sp, #108]	; 0x6c
   28bc0:	b	28b18 <flatcc_json_parser_struct_as_root@@Base+0x19fc>
   28bc4:	adds	r8, r8, r8
   28bc8:	adc	r9, r9, r9
   28bcc:	b	28b54 <flatcc_json_parser_struct_as_root@@Base+0x1a38>
   28bd0:	orrs	r5, sl, fp
   28bd4:	ldr	r7, [sp, #56]	; 0x38
   28bd8:	moveq	r5, #1
   28bdc:	movne	r5, #0
   28be0:	ldr	sl, [sp, #60]	; 0x3c
   28be4:	orrs	r7, r7, sl
   28be8:	moveq	r5, #0
   28bec:	cmp	r5, #0
   28bf0:	beq	28dac <flatcc_json_parser_struct_as_root@@Base+0x1c90>
   28bf4:	lsl	fp, lr, #2
   28bf8:	sub	r0, r3, #2
   28bfc:	lsl	r2, r1, #2
   28c00:	orr	fp, fp, r1, lsr #30
   28c04:	subs	r2, r2, #1
   28c08:	sbc	fp, fp, #0
   28c0c:	sub	r7, r0, r6
   28c10:	vldr	d6, [pc, #432]	; 28dc8 <flatcc_json_parser_struct_as_root@@Base+0x1cac>
   28c14:	lsl	fp, fp, r7
   28c18:	sub	r1, r7, #32
   28c1c:	rsb	r3, r7, #32
   28c20:	lsl	r7, r2, r7
   28c24:	orr	fp, fp, r2, lsl r1
   28c28:	orr	fp, fp, r2, lsr r3
   28c2c:	mvn	r3, #60	; 0x3c
   28c30:	sub	r3, r3, ip
   28c34:	vmov	s14, r3
   28c38:	vcvt.f64.s32	d7, s14
   28c3c:	vmul.f64	d7, d7, d6
   28c40:	vcmpe.f64	d7, #0.0
   28c44:	vcvt.s32.f64	s13, d7
   28c48:	vmov	r3, s13
   28c4c:	vmrs	APSR_nzcv, fpscr
   28c50:	bmi	28c68 <flatcc_json_parser_struct_as_root@@Base+0x1b4c>
   28c54:	vcvt.f64.s32	d6, s13
   28c58:	vsub.f64	d7, d7, d6
   28c5c:	vcmp.f64	d7, #0.0
   28c60:	vmrs	APSR_nzcv, fpscr
   28c64:	addne	r3, r3, #1
   28c68:	add	r3, r3, #344	; 0x158
   28c6c:	ldr	r5, [pc, #388]	; 28df8 <flatcc_json_parser_struct_as_root@@Base+0x1cdc>
   28c70:	add	r2, r3, #10
   28c74:	add	r3, r3, #3
   28c78:	str	ip, [sp]
   28c7c:	cmp	r3, #0
   28c80:	movlt	r3, r2
   28c84:	asr	r3, r3, #3
   28c88:	add	r1, r5, #304	; 0x130
   28c8c:	add	r3, r3, #1
   28c90:	lsl	r3, r3, #4
   28c94:	add	r2, r1, r3
   28c98:	ldrd	r0, [r1, r3]
   28c9c:	ldrsh	r3, [r2, #10]
   28ca0:	ldrsh	sl, [r2, #8]
   28ca4:	mov	r2, r0
   28ca8:	str	r3, [sp, #108]	; 0x6c
   28cac:	mov	r3, r1
   28cb0:	strd	r2, [sp, #8]
   28cb4:	str	sl, [sp, #16]
   28cb8:	strd	r0, [sp, #88]	; 0x58
   28cbc:	add	r0, sp, #128	; 0x80
   28cc0:	ldrd	r2, [sp, #32]
   28cc4:	bl	28544 <flatcc_json_parser_struct_as_root@@Base+0x1428>
   28cc8:	ldrd	r2, [sp, #128]	; 0x80
   28ccc:	add	r0, sp, #160	; 0xa0
   28cd0:	str	r6, [sp]
   28cd4:	str	sl, [sp, #16]
   28cd8:	strd	r2, [sp, #56]	; 0x38
   28cdc:	ldr	r3, [sp, #136]	; 0x88
   28ce0:	str	r3, [sp, #72]	; 0x48
   28ce4:	ldrd	r2, [sp, #88]	; 0x58
   28ce8:	strd	r2, [sp, #8]
   28cec:	mov	r2, r7
   28cf0:	mov	r3, fp
   28cf4:	bl	28544 <flatcc_json_parser_struct_as_root@@Base+0x1428>
   28cf8:	ldrd	r2, [sp, #88]	; 0x58
   28cfc:	add	r0, sp, #144	; 0x90
   28d00:	str	r6, [sp]
   28d04:	ldr	r7, [sp, #160]	; 0xa0
   28d08:	ldr	r1, [sp, #164]	; 0xa4
   28d0c:	strd	r2, [sp, #8]
   28d10:	mov	r2, r8
   28d14:	mov	r3, r9
   28d18:	str	sl, [sp, #16]
   28d1c:	ldr	fp, [sp, #168]	; 0xa8
   28d20:	str	r1, [sp, #32]
   28d24:	bl	28544 <flatcc_json_parser_struct_as_root@@Base+0x1428>
   28d28:	ldr	r1, [sp, #32]
   28d2c:	ldr	r3, [sp, #152]	; 0x98
   28d30:	str	r3, [sp, #88]	; 0x58
   28d34:	subs	r3, r7, #1
   28d38:	str	r3, [sp, #80]	; 0x50
   28d3c:	sbc	r3, r1, #0
   28d40:	ldr	r2, [sp, #80]	; 0x50
   28d44:	str	r3, [sp, #84]	; 0x54
   28d48:	ldr	r3, [sp, #144]	; 0x90
   28d4c:	adds	r3, r3, #1
   28d50:	str	r3, [sp, #40]	; 0x28
   28d54:	ldr	r3, [sp, #148]	; 0x94
   28d58:	adc	r3, r3, #0
   28d5c:	str	r3, [sp, #44]	; 0x2c
   28d60:	ldr	r3, [sp, #40]	; 0x28
   28d64:	ldrd	r0, [sp, #40]	; 0x28
   28d68:	subs	r3, r3, r2
   28d6c:	ldr	r2, [sp, #84]	; 0x54
   28d70:	str	r3, [sp, #48]	; 0x30
   28d74:	ldr	r3, [sp, #44]	; 0x2c
   28d78:	sbc	r3, r3, r2
   28d7c:	str	r3, [sp, #52]	; 0x34
   28d80:	ldrd	r2, [sp, #80]	; 0x50
   28d84:	cmp	r3, r1
   28d88:	ldr	r3, [sp, #88]	; 0x58
   28d8c:	cmpeq	r2, r0
   28d90:	movhi	r1, #1
   28d94:	movls	r1, #0
   28d98:	cmp	fp, r3
   28d9c:	orrne	r1, r1, #1
   28da0:	cmp	r1, #0
   28da4:	beq	28e00 <flatcc_json_parser_struct_as_root@@Base+0x1ce4>
   28da8:	bl	285fc <flatcc_json_parser_struct_as_root@@Base+0x14e0>
   28dac:	ldr	r3, [sp, #88]	; 0x58
   28db0:	subs	r2, r2, #1
   28db4:	sbc	fp, r3, #0
   28db8:	b	28c0c <flatcc_json_parser_struct_as_root@@Base+0x1af0>
   28dbc:	nop	{0}
   28dc0:			; <UNDEFINED> instruction: 0xffffffff
   28dc4:	svcvc	0x00efffff
   28dc8:			; <UNDEFINED> instruction: 0x509f79fe
   28dcc:	svccc	0x00d34413
   28dd0:	andeq	r4, r3, r0, lsl r2
   28dd4:	andeq	r4, r3, r4, ror #18
   28dd8:			; <UNDEFINED> instruction: 0x000349bb
   28ddc:			; <UNDEFINED> instruction: 0xffe00000
   28de0:			; <UNDEFINED> instruction: 0x000349bf
   28de4:	svcvc	0x00f00000	; IMB
   28de8:			; <UNDEFINED> instruction: 0xfffffbce
   28dec:			; <UNDEFINED> instruction: 0xffc00000
   28df0:	andeq	r4, r3, r4, lsr #4
   28df4:	andeq	r4, r3, sp, asr #19
   28df8:	andeq	r4, r3, r0, lsl #2
   28dfc:	strdeq	r4, [r3], -r2
   28e00:	ldr	r2, [sp, #44]	; 0x2c
   28e04:	movw	r0, #1233	; 0x4d1
   28e08:	ldr	r3, [sp, #72]	; 0x48
   28e0c:	rsb	ip, r3, #0
   28e10:	mov	r3, #1
   28e14:	sub	r7, ip, #32
   28e18:	rsb	sl, ip, #32
   28e1c:	orr	lr, r1, r3, lsl r7
   28e20:	str	sl, [sp, #112]	; 0x70
   28e24:	orr	lr, lr, r3, lsr sl
   28e28:	lsl	r3, r3, ip
   28e2c:	str	r3, [sp, #116]	; 0x74
   28e30:	ldr	r3, [sp, #40]	; 0x28
   28e34:	lsr	r3, r3, ip
   28e38:	orr	r3, r3, r2, lsl sl
   28e3c:	orr	r3, r3, r2, lsr r7
   28e40:	str	r3, [sp, #32]
   28e44:	ldr	r3, [sp, #116]	; 0x74
   28e48:	subs	r3, r3, #1
   28e4c:	str	r3, [sp, #120]	; 0x78
   28e50:	sbc	r3, lr, #0
   28e54:	ldr	r2, [sp, #120]	; 0x78
   28e58:	str	r3, [sp, #124]	; 0x7c
   28e5c:	ldr	r3, [sp, #40]	; 0x28
   28e60:	and	r8, r3, r2
   28e64:	ldr	r3, [sp, #44]	; 0x2c
   28e68:	sbc	r2, lr, #0
   28e6c:	and	r9, r3, r2
   28e70:	ldr	r3, [sp, #72]	; 0x48
   28e74:	add	r2, r3, #65	; 0x41
   28e78:	ldr	r3, [sp, #32]
   28e7c:	mul	r0, r0, r2
   28e80:	asr	r0, r0, #12
   28e84:	add	r2, r0, #1
   28e88:	add	r6, r5, r2, lsl #2
   28e8c:	ldr	r6, [r6, #1696]	; 0x6a0
   28e90:	cmp	r3, r6
   28e94:	sub	r3, r4, #1
   28e98:	movcc	r2, r0
   28e9c:	add	r5, r5, r2, lsl #2
   28ea0:	str	r3, [sp, #80]	; 0x50
   28ea4:	ldr	r0, [r5, #1696]	; 0x6a0
   28ea8:	cmp	r2, #0
   28eac:	add	r5, r1, #1
   28eb0:	sub	r6, r2, #1
   28eb4:	bgt	28fd4 <flatcc_json_parser_struct_as_root@@Base+0x1eb8>
   28eb8:	rsb	r6, ip, #32
   28ebc:	mov	r5, r1
   28ec0:	mov	r0, #1
   28ec4:	mov	r1, #0
   28ec8:	mov	r3, #10
   28ecc:	add	r2, r5, r2
   28ed0:	str	r6, [sp, #80]	; 0x50
   28ed4:	sub	r6, ip, #32
   28ed8:	str	r6, [sp, #96]	; 0x60
   28edc:	mul	sl, r3, r1
   28ee0:	umull	r0, r1, r0, r3
   28ee4:	umull	r6, r7, r8, r3
   28ee8:	add	r1, sl, r1
   28eec:	ldr	sl, [sp, #52]	; 0x34
   28ef0:	mla	r7, r3, r9, r7
   28ef4:	mul	sl, r3, sl
   28ef8:	str	sl, [sp, #32]
   28efc:	ldr	sl, [sp, #48]	; 0x30
   28f00:	umull	sl, fp, sl, r3
   28f04:	strd	sl, [sp, #48]	; 0x30
   28f08:	ldr	fp, [sp, #32]
   28f0c:	ldr	sl, [sp, #52]	; 0x34
   28f10:	add	sl, fp, sl
   28f14:	ldr	fp, [sp, #80]	; 0x50
   28f18:	str	sl, [sp, #52]	; 0x34
   28f1c:	lsr	sl, r6, ip
   28f20:	orr	sl, sl, r7, lsl fp
   28f24:	ldr	fp, [sp, #96]	; 0x60
   28f28:	orr	sl, sl, r7, lsr fp
   28f2c:	add	sl, sl, #48	; 0x30
   28f30:	strb	sl, [r4, r5]
   28f34:	add	r5, r5, #1
   28f38:	ldr	sl, [sp, #120]	; 0x78
   28f3c:	and	r8, sl, r6
   28f40:	ldr	sl, [sp, #124]	; 0x7c
   28f44:	sub	r6, r2, r5
   28f48:	and	r9, sl, r7
   28f4c:	ldrd	sl, [sp, #48]	; 0x30
   28f50:	cmp	fp, r9
   28f54:	cmpeq	sl, r8
   28f58:	bls	28edc <flatcc_json_parser_struct_as_root@@Base+0x1dc0>
   28f5c:	ldr	r3, [sp, #40]	; 0x28
   28f60:	ldr	r2, [sp, #56]	; 0x38
   28f64:	ldrd	sl, [sp, #56]	; 0x38
   28f68:	subs	r3, r3, r2
   28f6c:	ldr	r2, [sp, #60]	; 0x3c
   28f70:	str	r3, [sp, #32]
   28f74:	ldr	r3, [sp, #44]	; 0x2c
   28f78:	sbc	ip, r3, r2
   28f7c:	ldrd	r2, [sp, #40]	; 0x28
   28f80:	cmp	fp, r3
   28f84:	ldr	r3, [sp, #72]	; 0x48
   28f88:	cmpeq	sl, r2
   28f8c:	ldr	r2, [sp, #88]	; 0x58
   28f90:	movhi	r7, #1
   28f94:	movls	r7, #0
   28f98:	cmp	r3, r2
   28f9c:	orrne	r7, r7, #1
   28fa0:	cmp	r7, #0
   28fa4:	bne	28da8 <flatcc_json_parser_struct_as_root@@Base+0x1c8c>
   28fa8:	ldr	r2, [sp, #32]
   28fac:	mul	r3, r0, ip
   28fb0:	strd	r8, [sp, #8]
   28fb4:	strd	r0, [sp, #24]
   28fb8:	str	lr, [sp, #20]
   28fbc:	mla	ip, r2, r1, r3
   28fc0:	ldr	r1, [sp, #116]	; 0x74
   28fc4:	umull	r2, r3, r0, r2
   28fc8:	add	r3, ip, r3
   28fcc:	str	r1, [sp, #16]
   28fd0:	b	290a4 <flatcc_json_parser_struct_as_root@@Base+0x1f88>
   28fd4:	ldr	r3, [sp, #32]
   28fd8:	ldrd	sl, [sp, #48]	; 0x30
   28fdc:	udiv	r2, r3, r0
   28fe0:	ldr	r3, [sp, #80]	; 0x50
   28fe4:	add	r1, r2, #48	; 0x30
   28fe8:	strb	r1, [r3, #1]!
   28fec:	str	r3, [sp, #80]	; 0x50
   28ff0:	ldr	r3, [sp, #32]
   28ff4:	ldr	r1, [sp, #112]	; 0x70
   28ff8:	mls	r3, r0, r2, r3
   28ffc:	mov	r2, #0
   29000:	orr	r2, r2, r3, lsl r7
   29004:	str	r3, [sp, #32]
   29008:	orr	r2, r2, r3, lsr r1
   2900c:	lsl	r1, r3, ip
   29010:	adds	r3, r1, r8
   29014:	str	r3, [sp, #96]	; 0x60
   29018:	adc	r3, r2, r9
   2901c:	str	r3, [sp, #100]	; 0x64
   29020:	ldrd	r2, [sp, #96]	; 0x60
   29024:	cmp	fp, r3
   29028:	cmpeq	sl, r2
   2902c:	bls	290e8 <flatcc_json_parser_struct_as_root@@Base+0x1fcc>
   29030:	ldr	r3, [sp, #40]	; 0x28
   29034:	ldrd	sl, [sp, #40]	; 0x28
   29038:	ldr	r2, [sp, #56]	; 0x38
   2903c:	ldrd	r8, [sp, #56]	; 0x38
   29040:	ldr	r1, [sp, #60]	; 0x3c
   29044:	subs	r2, r3, r2
   29048:	ldr	r3, [sp, #44]	; 0x2c
   2904c:	ldr	lr, [sp, #72]	; 0x48
   29050:	sbc	r3, r3, r1
   29054:	cmp	r9, fp
   29058:	cmpeq	r8, sl
   2905c:	ldr	r8, [sp, #88]	; 0x58
   29060:	movhi	r1, #1
   29064:	movls	r1, #0
   29068:	cmp	lr, r8
   2906c:	orrne	r1, r1, #1
   29070:	cmp	r1, #0
   29074:	bne	28da8 <flatcc_json_parser_struct_as_root@@Base+0x1c8c>
   29078:	orr	r7, r1, r0, lsl r7
   2907c:	ldr	r1, [sp, #112]	; 0x70
   29080:	mov	r8, #1
   29084:	lsl	ip, r0, ip
   29088:	mov	r9, #0
   2908c:	str	ip, [sp, #16]
   29090:	orr	r7, r7, r0, lsr r1
   29094:	ldrd	r0, [sp, #96]	; 0x60
   29098:	strd	r8, [sp, #24]
   2909c:	strd	r0, [sp, #8]
   290a0:	str	r7, [sp, #20]
   290a4:	ldrd	r0, [sp, #48]	; 0x30
   290a8:	strd	r0, [sp]
   290ac:	mov	r1, r5
   290b0:	mov	r0, r4
   290b4:	bl	27bd4 <flatcc_json_parser_struct_as_root@@Base+0xab8>
   290b8:	ldr	r3, [sp, #108]	; 0x6c
   290bc:	cmp	r0, #0
   290c0:	sub	r7, r6, r3
   290c4:	bne	290fc <flatcc_json_parser_struct_as_root@@Base+0x1fe0>
   290c8:	mov	r0, r4
   290cc:	ldr	r1, [pc, #-728]	; 28dfc <flatcc_json_parser_struct_as_root@@Base+0x1ce0>
   290d0:	ldrd	r2, [sp, #64]	; 0x40
   290d4:	bl	145fc <sprintf@plt>
   290d8:	ldr	r3, [sp, #104]	; 0x68
   290dc:	sub	r4, r4, r3
   290e0:	add	r0, r4, r0
   290e4:	b	28998 <flatcc_json_parser_struct_as_root@@Base+0x187c>
   290e8:	mov	r3, #10
   290ec:	mov	r2, r6
   290f0:	mov	r1, r5
   290f4:	udiv	r0, r0, r3
   290f8:	b	28ea8 <flatcc_json_parser_struct_as_root@@Base+0x1d8c>
   290fc:	ldr	r3, [sp, #108]	; 0x6c
   29100:	cmp	r5, #2
   29104:	movge	r0, r5
   29108:	movlt	r0, #2
   2910c:	sub	r6, r3, r6
   29110:	cmp	r0, r6
   29114:	suble	r0, r0, #1
   29118:	movgt	r0, r6
   2911c:	cmp	r7, #0
   29120:	bge	29218 <flatcc_json_parser_struct_as_root@@Base+0x20fc>
   29124:	add	r3, r7, r5
   29128:	cmp	r6, r5
   2912c:	cmnge	r3, #2
   29130:	blt	291a0 <flatcc_json_parser_struct_as_root@@Base+0x2084>
   29134:	rsb	r0, r5, #2
   29138:	mov	r2, r5
   2913c:	sub	r0, r0, r7
   29140:	mov	r1, r4
   29144:	add	r0, r4, r0
   29148:	bl	14530 <memmove@plt>
   2914c:	mov	r3, #46	; 0x2e
   29150:	mov	r2, #2
   29154:	mov	r1, #48	; 0x30
   29158:	strb	r3, [r4, #1]
   2915c:	sub	r3, r2, r7
   29160:	sub	r3, r3, r5
   29164:	strb	r1, [r4]
   29168:	cmp	r3, r2
   2916c:	bgt	29194 <flatcc_json_parser_struct_as_root@@Base+0x2078>
   29170:	cmp	r3, #2
   29174:	addge	r3, r5, r3
   29178:	addlt	r3, r5, #2
   2917c:	mov	r2, #0
   29180:	add	r0, r4, r3
   29184:	strb	r2, [r4, r3]
   29188:	ldr	r3, [sp, #104]	; 0x68
   2918c:	sub	r0, r0, r3
   29190:	b	28998 <flatcc_json_parser_struct_as_root@@Base+0x187c>
   29194:	strb	r1, [r4, r2]
   29198:	add	r2, r2, #1
   2919c:	b	29168 <flatcc_json_parser_struct_as_root@@Base+0x204c>
   291a0:	cmp	r5, #1
   291a4:	addne	r3, r4, r5
   291a8:	movne	r1, r3
   291ac:	bne	291d8 <flatcc_json_parser_struct_as_root@@Base+0x20bc>
   291b0:	mov	r3, #101	; 0x65
   291b4:	add	r6, r5, #1
   291b8:	add	r1, r4, r6
   291bc:	mov	r0, r7
   291c0:	strb	r3, [r4, r5]
   291c4:	bl	27e20 <flatcc_json_parser_struct_as_root@@Base+0xd04>
   291c8:	add	r3, r6, r0
   291cc:	b	2917c <flatcc_json_parser_struct_as_root@@Base+0x2060>
   291d0:	ldrb	r2, [r3, #-1]
   291d4:	strb	r2, [r3], #-1
   291d8:	sub	r2, r1, r3
   291dc:	cmp	r0, r2
   291e0:	bgt	291d0 <flatcc_json_parser_struct_as_root@@Base+0x20b4>
   291e4:	sub	r2, r5, r0
   291e8:	mov	r1, #46	; 0x2e
   291ec:	adds	r0, r0, r7
   291f0:	add	r3, r5, #1
   291f4:	strb	r1, [r4, r2]
   291f8:	beq	2917c <flatcc_json_parser_struct_as_root@@Base+0x2060>
   291fc:	mov	r2, #101	; 0x65
   29200:	add	r5, r5, #2
   29204:	add	r1, r4, r5
   29208:	strb	r2, [r4, r3]
   2920c:	bl	27e20 <flatcc_json_parser_struct_as_root@@Base+0xd04>
   29210:	add	r3, r5, r0
   29214:	b	2917c <flatcc_json_parser_struct_as_root@@Base+0x2060>
   29218:	cmp	r7, #2
   2921c:	bgt	291b0 <flatcc_json_parser_struct_as_root@@Base+0x2094>
   29220:	cmp	r7, #0
   29224:	addne	r3, r4, r5
   29228:	movne	r1, #48	; 0x30
   2922c:	addne	r2, r3, r7
   29230:	bne	29240 <flatcc_json_parser_struct_as_root@@Base+0x2124>
   29234:	mov	r3, r5
   29238:	b	2917c <flatcc_json_parser_struct_as_root@@Base+0x2060>
   2923c:	strb	r1, [r3], #1
   29240:	cmp	r2, r3
   29244:	bne	2923c <flatcc_json_parser_struct_as_root@@Base+0x2120>
   29248:	add	r3, r7, r5
   2924c:	b	2917c <flatcc_json_parser_struct_as_root@@Base+0x2060>

00029250 <flatcc_json_printer_error_string@@Base>:
   29250:	cmp	r0, #3
   29254:	ldrls	r3, [pc, #12]	; 29268 <flatcc_json_printer_error_string@@Base+0x18>
   29258:	addls	r3, r3, r0, lsl #2
   2925c:	ldrls	r0, [r3, #1740]	; 0x6cc
   29260:	ldrhi	r0, [pc, #4]	; 2926c <flatcc_json_printer_error_string@@Base+0x1c>
   29264:	bx	lr
   29268:	andeq	r4, r3, r0, lsl #2
   2926c:	andeq	r3, r3, r4, asr #32

00029270 <flatcc_json_printer_fmt_float@@Base>:
   29270:	vcvt.f64.f32	d0, s0
   29274:	b	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>

00029278 <flatcc_json_printer_fmt_double@@Base>:
   29278:	b	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>

0002927c <flatcc_json_printer_fmt_bool@@Base>:
   2927c:	cmp	r1, #0
   29280:	beq	29298 <flatcc_json_printer_fmt_bool@@Base+0x1c>
   29284:	ldr	r3, [pc, #40]	; 292b4 <flatcc_json_printer_fmt_bool@@Base+0x38>
   29288:	ldr	r3, [r3]
   2928c:	str	r3, [r0]
   29290:	mov	r0, #4
   29294:	bx	lr
   29298:	ldr	r3, [pc, #24]	; 292b8 <flatcc_json_printer_fmt_bool@@Base+0x3c>
   2929c:	ldr	r2, [r3]
   292a0:	ldrb	r3, [r3, #4]
   292a4:	str	r2, [r0]
   292a8:	strb	r3, [r0, #4]
   292ac:	mov	r0, #5
   292b0:	bx	lr
   292b4:	andeq	lr, r2, r6, asr #25
   292b8:	andeq	lr, r2, fp, asr #25

000292bc <flatcc_json_printer_string@@Base>:
   292bc:	b	27fd4 <flatcc_json_parser_struct_as_root@@Base+0xeb8>

000292c0 <flatcc_json_printer_write@@Base>:
   292c0:	b	27f34 <flatcc_json_parser_struct_as_root@@Base+0xe18>

000292c4 <flatcc_json_printer_nl@@Base>:
   292c4:	ldr	r3, [r0, #20]
   292c8:	mov	r2, #10
   292cc:	add	r1, r3, #1
   292d0:	str	r1, [r0, #20]
   292d4:	strb	r2, [r3]
   292d8:	b	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>

000292dc <flatcc_json_printer_char@@Base>:
   292dc:	ldr	r3, [r0, #20]
   292e0:	add	r2, r3, #1
   292e4:	str	r2, [r0, #20]
   292e8:	strb	r1, [r3]
   292ec:	bx	lr

000292f0 <flatcc_json_printer_indent@@Base>:
   292f0:	b	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>

000292f4 <flatcc_json_printer_add_level@@Base>:
   292f4:	ldr	r3, [r0, #32]
   292f8:	add	r1, r3, r1
   292fc:	str	r1, [r0, #32]
   29300:	bx	lr

00029304 <flatcc_json_printer_get_level@@Base>:
   29304:	ldr	r0, [r0, #32]
   29308:	bx	lr

0002930c <flatcc_json_printer_uint8@@Base>:
   2930c:	push	{r4, lr}
   29310:	mov	r4, r0
   29314:	mov	r0, r1
   29318:	ldr	r1, [r4, #20]
   2931c:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   29320:	ldr	r3, [r4, #20]
   29324:	add	r0, r3, r0
   29328:	str	r0, [r4, #20]
   2932c:	pop	{r4, pc}

00029330 <flatcc_json_printer_uint16@@Base>:
   29330:	push	{r4, lr}
   29334:	mov	r4, r0
   29338:	mov	r0, r1
   2933c:	ldr	r1, [r4, #20]
   29340:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   29344:	ldr	r3, [r4, #20]
   29348:	add	r0, r3, r0
   2934c:	str	r0, [r4, #20]
   29350:	pop	{r4, pc}

00029354 <flatcc_json_printer_uint32@@Base>:
   29354:	push	{r4, lr}
   29358:	mov	r4, r0
   2935c:	mov	r0, r1
   29360:	ldr	r1, [r4, #20]
   29364:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   29368:	ldr	r3, [r4, #20]
   2936c:	add	r0, r3, r0
   29370:	str	r0, [r4, #20]
   29374:	pop	{r4, pc}

00029378 <flatcc_json_printer_uint64@@Base>:
   29378:	push	{r4, lr}
   2937c:	mov	r4, r0
   29380:	mov	r1, r3
   29384:	mov	r0, r2
   29388:	ldr	r2, [r4, #20]
   2938c:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   29390:	ldr	r3, [r4, #20]
   29394:	add	r0, r3, r0
   29398:	str	r0, [r4, #20]
   2939c:	pop	{r4, pc}

000293a0 <flatcc_json_printer_int8@@Base>:
   293a0:	push	{r4, lr}
   293a4:	mov	r4, r0
   293a8:	mov	r0, r1
   293ac:	ldr	r1, [r4, #20]
   293b0:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   293b4:	ldr	r3, [r4, #20]
   293b8:	add	r0, r3, r0
   293bc:	str	r0, [r4, #20]
   293c0:	pop	{r4, pc}

000293c4 <flatcc_json_printer_int16@@Base>:
   293c4:	push	{r4, lr}
   293c8:	mov	r4, r0
   293cc:	mov	r0, r1
   293d0:	ldr	r1, [r4, #20]
   293d4:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   293d8:	ldr	r3, [r4, #20]
   293dc:	add	r0, r3, r0
   293e0:	str	r0, [r4, #20]
   293e4:	pop	{r4, pc}

000293e8 <flatcc_json_printer_int32@@Base>:
   293e8:	push	{r4, lr}
   293ec:	mov	r4, r0
   293f0:	mov	r0, r1
   293f4:	ldr	r1, [r4, #20]
   293f8:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   293fc:	ldr	r3, [r4, #20]
   29400:	add	r0, r3, r0
   29404:	str	r0, [r4, #20]
   29408:	pop	{r4, pc}

0002940c <flatcc_json_printer_int64@@Base>:
   2940c:	push	{r4, lr}
   29410:	mov	r4, r0
   29414:	mov	r1, r3
   29418:	mov	r0, r2
   2941c:	ldr	r2, [r4, #20]
   29420:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   29424:	ldr	r3, [r4, #20]
   29428:	add	r0, r3, r0
   2942c:	str	r0, [r4, #20]
   29430:	pop	{r4, pc}

00029434 <flatcc_json_printer_float@@Base>:
   29434:	push	{r4, lr}
   29438:	vcvt.f64.f32	d0, s0
   2943c:	mov	r4, r0
   29440:	ldr	r0, [r0, #20]
   29444:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   29448:	ldr	r3, [r4, #20]
   2944c:	add	r0, r3, r0
   29450:	str	r0, [r4, #20]
   29454:	pop	{r4, pc}

00029458 <flatcc_json_printer_double@@Base>:
   29458:	push	{r4, lr}
   2945c:	mov	r4, r0
   29460:	ldr	r0, [r0, #20]
   29464:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   29468:	ldr	r3, [r4, #20]
   2946c:	add	r0, r3, r0
   29470:	str	r0, [r4, #20]
   29474:	pop	{r4, pc}

00029478 <flatcc_json_printer_enum@@Base>:
   29478:	b	28188 <flatcc_json_parser_struct_as_root@@Base+0x106c>

0002947c <flatcc_json_printer_delimit_enum_flags@@Base>:
   2947c:	ldrb	r3, [r0, #26]
   29480:	adds	r1, r1, #0
   29484:	movne	r1, #1
   29488:	ldr	r2, [r0, #20]
   2948c:	cmp	r3, #0
   29490:	movne	r3, r1
   29494:	mov	r1, #34	; 0x22
   29498:	moveq	r3, #1
   2949c:	strb	r1, [r2]
   294a0:	ldr	r1, [r0, #20]
   294a4:	add	r1, r1, r3
   294a8:	str	r1, [r0, #20]
   294ac:	bx	lr

000294b0 <flatcc_json_printer_enum_flag@@Base>:
   294b0:	push	{r4, lr}
   294b4:	mov	lr, r2
   294b8:	mov	r4, #32
   294bc:	ldr	r2, [r0, #20]
   294c0:	strb	r4, [r2]
   294c4:	ldr	r2, [r0, #20]
   294c8:	cmp	r1, #0
   294cc:	movle	r1, r2
   294d0:	addgt	r1, r2, #1
   294d4:	mov	r2, r3
   294d8:	str	r1, [r0, #20]
   294dc:	mov	r1, lr
   294e0:	pop	{r4, lr}
   294e4:	b	27f34 <flatcc_json_parser_struct_as_root@@Base+0xe18>

000294e8 <flatcc_json_printer_string_field@@Base>:
   294e8:	push	{r4, r5, r6, r7, r8, lr}
   294ec:	mov	r5, r1
   294f0:	mov	r4, r0
   294f4:	mov	r1, r2
   294f8:	mov	r0, r5
   294fc:	mov	r7, r3
   29500:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29504:	subs	r6, r0, #0
   29508:	ldr	r8, [sp, #24]
   2950c:	popeq	{r4, r5, r6, r7, r8, pc}
   29510:	ldr	r2, [r5, #16]
   29514:	add	r3, r2, #1
   29518:	cmp	r2, #0
   2951c:	str	r3, [r5, #16]
   29520:	beq	29538 <flatcc_json_printer_string_field@@Base+0x50>
   29524:	ldr	r2, [r4, #20]
   29528:	add	r3, r2, #1
   2952c:	str	r3, [r4, #20]
   29530:	mov	r3, #44	; 0x2c
   29534:	strb	r3, [r2]
   29538:	mov	r1, r7
   2953c:	mov	r0, r4
   29540:	mov	r2, r8
   29544:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29548:	ldr	r1, [r6]
   2954c:	mov	r0, r4
   29550:	add	r1, r6, r1
   29554:	pop	{r4, r5, r6, r7, r8, lr}
   29558:	b	28180 <flatcc_json_parser_struct_as_root@@Base+0x1064>

0002955c <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   2955c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29560:	mov	r6, r1
   29564:	mov	r4, r0
   29568:	mov	r1, r2
   2956c:	mov	r0, r6
   29570:	mov	r9, r3
   29574:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29578:	subs	r5, r0, #0
   2957c:	beq	2965c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   29580:	ldr	r2, [r6, #16]
   29584:	add	r3, r2, #1
   29588:	cmp	r2, #0
   2958c:	str	r3, [r6, #16]
   29590:	beq	295a8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c>
   29594:	ldr	r2, [r4, #20]
   29598:	add	r3, r2, #1
   2959c:	str	r3, [r4, #20]
   295a0:	mov	r3, #44	; 0x2c
   295a4:	strb	r3, [r2]
   295a8:	mov	r1, r9
   295ac:	mov	r0, r4
   295b0:	ldr	r2, [sp, #40]	; 0x28
   295b4:	ldr	r7, [sp, #44]	; 0x2c
   295b8:	adds	r7, r7, #0
   295bc:	movne	r7, #1
   295c0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   295c4:	ldr	r3, [r5]
   295c8:	orr	r8, r7, #128	; 0x80
   295cc:	mov	r1, r8
   295d0:	add	r6, r5, r3
   295d4:	ldr	r3, [r5, r3]
   295d8:	add	r6, r6, #4
   295dc:	str	r3, [sp]
   295e0:	ldr	r3, [r4, #20]
   295e4:	add	r2, r3, #1
   295e8:	str	r2, [r4, #20]
   295ec:	mov	r2, #34	; 0x22
   295f0:	strb	r2, [r3]
   295f4:	ldr	r0, [sp]
   295f8:	bl	27ea0 <flatcc_json_parser_struct_as_root@@Base+0xd84>
   295fc:	ldrd	r2, [r4, #16]
   29600:	mov	r9, r0
   29604:	add	r3, r3, r0
   29608:	cmp	r2, r3
   2960c:	bhi	29620 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   29610:	mov	r1, #0
   29614:	mov	r0, r4
   29618:	ldr	r3, [r4, #44]	; 0x2c
   2961c:	blx	r3
   29620:	ldr	r5, [r4, #16]
   29624:	ldr	r0, [r4, #20]
   29628:	add	r3, r0, r9
   2962c:	cmp	r5, r3
   29630:	bcc	29664 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x108>
   29634:	mov	r3, r8
   29638:	mov	r2, sp
   2963c:	mov	r1, r6
   29640:	bl	287dc <flatcc_json_parser_struct_as_root@@Base+0x16c0>
   29644:	ldr	r2, [r4, #20]
   29648:	add	r3, r2, r9
   2964c:	add	r3, r3, #1
   29650:	str	r3, [r4, #20]
   29654:	mov	r3, #34	; 0x22
   29658:	strb	r3, [r2, r9]
   2965c:	add	sp, sp, #12
   29660:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29664:	sub	r5, r5, r0
   29668:	bic	r5, r5, #3
   2966c:	add	r3, r5, r5, lsl #1
   29670:	cmp	r3, #3
   29674:	lsr	r9, r3, #2
   29678:	bhi	29690 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x134>
   2967c:	ldr	r3, [pc, #96]	; 296e4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x188>
   29680:	movw	r2, #277	; 0x115
   29684:	ldr	r1, [pc, #92]	; 296e8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x18c>
   29688:	ldr	r0, [pc, #92]	; 296ec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x190>
   2968c:	bl	14620 <__assert_fail@plt>
   29690:	add	r2, sp, #4
   29694:	mov	r1, r6
   29698:	str	r9, [sp, #4]
   2969c:	mov	r3, r7
   296a0:	add	r6, r6, r9
   296a4:	bl	287dc <flatcc_json_parser_struct_as_root@@Base+0x16c0>
   296a8:	ldr	r3, [r4, #20]
   296ac:	mov	r1, #0
   296b0:	mov	r0, r4
   296b4:	add	r5, r3, r5
   296b8:	ldr	r3, [sp]
   296bc:	str	r5, [r4, #20]
   296c0:	sub	r3, r3, r9
   296c4:	str	r3, [sp]
   296c8:	ldr	r3, [r4, #44]	; 0x2c
   296cc:	blx	r3
   296d0:	mov	r1, r8
   296d4:	ldr	r0, [sp]
   296d8:	bl	27ea0 <flatcc_json_parser_struct_as_root@@Base+0xd84>
   296dc:	mov	r9, r0
   296e0:	b	29620 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   296e4:	ldrdeq	r4, [r3], -ip
   296e8:	andeq	r4, r3, sp, asr r8
   296ec:	strdeq	r4, [r3], -r8

000296f0 <flatcc_json_printer_uint8_field@@Base>:
   296f0:	push	{r4, r5, r6, r7, r8, lr}
   296f4:	mov	r6, r1
   296f8:	mov	r4, r0
   296fc:	mov	r1, r2
   29700:	mov	r0, r6
   29704:	mov	r7, r3
   29708:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2970c:	cmp	r0, #0
   29710:	ldrb	r5, [sp, #28]
   29714:	beq	29788 <flatcc_json_printer_uint8_field@@Base+0x98>
   29718:	ldrb	r2, [r0]
   2971c:	cmp	r2, r5
   29720:	movne	r5, r2
   29724:	bne	29734 <flatcc_json_printer_uint8_field@@Base+0x44>
   29728:	ldrb	r3, [r4, #28]
   2972c:	cmp	r3, #0
   29730:	popne	{r4, r5, r6, r7, r8, pc}
   29734:	ldr	r2, [r6, #16]
   29738:	add	r3, r2, #1
   2973c:	cmp	r2, #0
   29740:	str	r3, [r6, #16]
   29744:	beq	2975c <flatcc_json_printer_uint8_field@@Base+0x6c>
   29748:	ldr	r2, [r4, #20]
   2974c:	add	r3, r2, #1
   29750:	str	r3, [r4, #20]
   29754:	mov	r3, #44	; 0x2c
   29758:	strb	r3, [r2]
   2975c:	mov	r1, r7
   29760:	mov	r0, r4
   29764:	ldr	r2, [sp, #24]
   29768:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2976c:	mov	r0, r5
   29770:	ldr	r1, [r4, #20]
   29774:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   29778:	ldr	r3, [r4, #20]
   2977c:	add	r0, r3, r0
   29780:	str	r0, [r4, #20]
   29784:	pop	{r4, r5, r6, r7, r8, pc}
   29788:	ldrb	r3, [r4, #29]
   2978c:	cmp	r3, #0
   29790:	bne	29734 <flatcc_json_printer_uint8_field@@Base+0x44>
   29794:	pop	{r4, r5, r6, r7, r8, pc}

00029798 <flatcc_json_printer_uint16_field@@Base>:
   29798:	push	{r4, r5, r6, r7, r8, lr}
   2979c:	mov	r6, r1
   297a0:	mov	r4, r0
   297a4:	mov	r1, r2
   297a8:	mov	r0, r6
   297ac:	mov	r7, r3
   297b0:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   297b4:	cmp	r0, #0
   297b8:	ldrh	r5, [sp, #28]
   297bc:	beq	29830 <flatcc_json_printer_uint16_field@@Base+0x98>
   297c0:	ldrh	r2, [r0]
   297c4:	cmp	r2, r5
   297c8:	movne	r5, r2
   297cc:	bne	297dc <flatcc_json_printer_uint16_field@@Base+0x44>
   297d0:	ldrb	r3, [r4, #28]
   297d4:	cmp	r3, #0
   297d8:	popne	{r4, r5, r6, r7, r8, pc}
   297dc:	ldr	r2, [r6, #16]
   297e0:	add	r3, r2, #1
   297e4:	cmp	r2, #0
   297e8:	str	r3, [r6, #16]
   297ec:	beq	29804 <flatcc_json_printer_uint16_field@@Base+0x6c>
   297f0:	ldr	r2, [r4, #20]
   297f4:	add	r3, r2, #1
   297f8:	str	r3, [r4, #20]
   297fc:	mov	r3, #44	; 0x2c
   29800:	strb	r3, [r2]
   29804:	mov	r1, r7
   29808:	mov	r0, r4
   2980c:	ldr	r2, [sp, #24]
   29810:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29814:	mov	r0, r5
   29818:	ldr	r1, [r4, #20]
   2981c:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   29820:	ldr	r3, [r4, #20]
   29824:	add	r0, r3, r0
   29828:	str	r0, [r4, #20]
   2982c:	pop	{r4, r5, r6, r7, r8, pc}
   29830:	ldrb	r3, [r4, #29]
   29834:	cmp	r3, #0
   29838:	bne	297dc <flatcc_json_printer_uint16_field@@Base+0x44>
   2983c:	pop	{r4, r5, r6, r7, r8, pc}

00029840 <flatcc_json_printer_uint32_field@@Base>:
   29840:	push	{r4, r5, r6, r7, r8, lr}
   29844:	mov	r6, r1
   29848:	mov	r4, r0
   2984c:	mov	r1, r2
   29850:	mov	r0, r6
   29854:	mov	r7, r3
   29858:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2985c:	cmp	r0, #0
   29860:	ldr	r5, [sp, #28]
   29864:	beq	298d8 <flatcc_json_printer_uint32_field@@Base+0x98>
   29868:	ldr	r2, [r0]
   2986c:	cmp	r2, r5
   29870:	movne	r5, r2
   29874:	bne	29884 <flatcc_json_printer_uint32_field@@Base+0x44>
   29878:	ldrb	r3, [r4, #28]
   2987c:	cmp	r3, #0
   29880:	popne	{r4, r5, r6, r7, r8, pc}
   29884:	ldr	r2, [r6, #16]
   29888:	add	r3, r2, #1
   2988c:	cmp	r2, #0
   29890:	str	r3, [r6, #16]
   29894:	beq	298ac <flatcc_json_printer_uint32_field@@Base+0x6c>
   29898:	ldr	r2, [r4, #20]
   2989c:	add	r3, r2, #1
   298a0:	str	r3, [r4, #20]
   298a4:	mov	r3, #44	; 0x2c
   298a8:	strb	r3, [r2]
   298ac:	mov	r1, r7
   298b0:	mov	r0, r4
   298b4:	ldr	r2, [sp, #24]
   298b8:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   298bc:	mov	r0, r5
   298c0:	ldr	r1, [r4, #20]
   298c4:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   298c8:	ldr	r3, [r4, #20]
   298cc:	add	r0, r3, r0
   298d0:	str	r0, [r4, #20]
   298d4:	pop	{r4, r5, r6, r7, r8, pc}
   298d8:	ldrb	r3, [r4, #29]
   298dc:	cmp	r3, #0
   298e0:	bne	29884 <flatcc_json_printer_uint32_field@@Base+0x44>
   298e4:	pop	{r4, r5, r6, r7, r8, pc}

000298e8 <flatcc_json_printer_uint64_field@@Base>:
   298e8:	push	{r4, r5, r6, r7, r8, lr}
   298ec:	mov	r5, r1
   298f0:	mov	r4, r0
   298f4:	mov	r1, r2
   298f8:	mov	r0, r5
   298fc:	mov	r8, r3
   29900:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29904:	cmp	r0, #0
   29908:	ldrd	r6, [sp, #32]
   2990c:	beq	2998c <flatcc_json_printer_uint64_field@@Base+0xa4>
   29910:	ldrd	r2, [r0]
   29914:	cmp	r3, r7
   29918:	cmpeq	r2, r6
   2991c:	movne	r6, r2
   29920:	movne	r7, r3
   29924:	bne	29934 <flatcc_json_printer_uint64_field@@Base+0x4c>
   29928:	ldrb	r3, [r4, #28]
   2992c:	cmp	r3, #0
   29930:	popne	{r4, r5, r6, r7, r8, pc}
   29934:	ldr	r2, [r5, #16]
   29938:	add	r3, r2, #1
   2993c:	cmp	r2, #0
   29940:	str	r3, [r5, #16]
   29944:	beq	2995c <flatcc_json_printer_uint64_field@@Base+0x74>
   29948:	ldr	r2, [r4, #20]
   2994c:	add	r3, r2, #1
   29950:	str	r3, [r4, #20]
   29954:	mov	r3, #44	; 0x2c
   29958:	strb	r3, [r2]
   2995c:	mov	r1, r8
   29960:	mov	r0, r4
   29964:	ldr	r2, [sp, #24]
   29968:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2996c:	mov	r0, r6
   29970:	mov	r1, r7
   29974:	ldr	r2, [r4, #20]
   29978:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   2997c:	ldr	r3, [r4, #20]
   29980:	add	r0, r3, r0
   29984:	str	r0, [r4, #20]
   29988:	pop	{r4, r5, r6, r7, r8, pc}
   2998c:	ldrb	r3, [r4, #29]
   29990:	cmp	r3, #0
   29994:	bne	29934 <flatcc_json_printer_uint64_field@@Base+0x4c>
   29998:	pop	{r4, r5, r6, r7, r8, pc}

0002999c <flatcc_json_printer_int8_field@@Base>:
   2999c:	push	{r4, r5, r6, r7, r8, lr}
   299a0:	mov	r6, r1
   299a4:	mov	r4, r0
   299a8:	mov	r1, r2
   299ac:	mov	r0, r6
   299b0:	mov	r7, r3
   299b4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   299b8:	cmp	r0, #0
   299bc:	ldrsb	r5, [sp, #28]
   299c0:	beq	29a34 <flatcc_json_printer_int8_field@@Base+0x98>
   299c4:	ldrsb	r2, [r0]
   299c8:	cmp	r2, r5
   299cc:	movne	r5, r2
   299d0:	bne	299e0 <flatcc_json_printer_int8_field@@Base+0x44>
   299d4:	ldrb	r3, [r4, #28]
   299d8:	cmp	r3, #0
   299dc:	popne	{r4, r5, r6, r7, r8, pc}
   299e0:	ldr	r2, [r6, #16]
   299e4:	add	r3, r2, #1
   299e8:	cmp	r2, #0
   299ec:	str	r3, [r6, #16]
   299f0:	beq	29a08 <flatcc_json_printer_int8_field@@Base+0x6c>
   299f4:	ldr	r2, [r4, #20]
   299f8:	add	r3, r2, #1
   299fc:	str	r3, [r4, #20]
   29a00:	mov	r3, #44	; 0x2c
   29a04:	strb	r3, [r2]
   29a08:	mov	r1, r7
   29a0c:	mov	r0, r4
   29a10:	ldr	r2, [sp, #24]
   29a14:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29a18:	mov	r0, r5
   29a1c:	ldr	r1, [r4, #20]
   29a20:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   29a24:	ldr	r3, [r4, #20]
   29a28:	add	r0, r3, r0
   29a2c:	str	r0, [r4, #20]
   29a30:	pop	{r4, r5, r6, r7, r8, pc}
   29a34:	ldrb	r3, [r4, #29]
   29a38:	cmp	r3, #0
   29a3c:	bne	299e0 <flatcc_json_printer_int8_field@@Base+0x44>
   29a40:	pop	{r4, r5, r6, r7, r8, pc}

00029a44 <flatcc_json_printer_int16_field@@Base>:
   29a44:	push	{r4, r5, r6, r7, r8, lr}
   29a48:	mov	r6, r1
   29a4c:	mov	r4, r0
   29a50:	mov	r1, r2
   29a54:	mov	r0, r6
   29a58:	mov	r7, r3
   29a5c:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29a60:	cmp	r0, #0
   29a64:	ldrsh	r5, [sp, #28]
   29a68:	beq	29adc <flatcc_json_printer_int16_field@@Base+0x98>
   29a6c:	ldrsh	r2, [r0]
   29a70:	cmp	r2, r5
   29a74:	movne	r5, r2
   29a78:	bne	29a88 <flatcc_json_printer_int16_field@@Base+0x44>
   29a7c:	ldrb	r3, [r4, #28]
   29a80:	cmp	r3, #0
   29a84:	popne	{r4, r5, r6, r7, r8, pc}
   29a88:	ldr	r2, [r6, #16]
   29a8c:	add	r3, r2, #1
   29a90:	cmp	r2, #0
   29a94:	str	r3, [r6, #16]
   29a98:	beq	29ab0 <flatcc_json_printer_int16_field@@Base+0x6c>
   29a9c:	ldr	r2, [r4, #20]
   29aa0:	add	r3, r2, #1
   29aa4:	str	r3, [r4, #20]
   29aa8:	mov	r3, #44	; 0x2c
   29aac:	strb	r3, [r2]
   29ab0:	mov	r1, r7
   29ab4:	mov	r0, r4
   29ab8:	ldr	r2, [sp, #24]
   29abc:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29ac0:	mov	r0, r5
   29ac4:	ldr	r1, [r4, #20]
   29ac8:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   29acc:	ldr	r3, [r4, #20]
   29ad0:	add	r0, r3, r0
   29ad4:	str	r0, [r4, #20]
   29ad8:	pop	{r4, r5, r6, r7, r8, pc}
   29adc:	ldrb	r3, [r4, #29]
   29ae0:	cmp	r3, #0
   29ae4:	bne	29a88 <flatcc_json_printer_int16_field@@Base+0x44>
   29ae8:	pop	{r4, r5, r6, r7, r8, pc}

00029aec <flatcc_json_printer_int32_field@@Base>:
   29aec:	push	{r4, r5, r6, r7, r8, lr}
   29af0:	mov	r6, r1
   29af4:	mov	r4, r0
   29af8:	mov	r1, r2
   29afc:	mov	r0, r6
   29b00:	mov	r7, r3
   29b04:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29b08:	cmp	r0, #0
   29b0c:	ldr	r5, [sp, #28]
   29b10:	beq	29b84 <flatcc_json_printer_int32_field@@Base+0x98>
   29b14:	ldr	r2, [r0]
   29b18:	cmp	r2, r5
   29b1c:	movne	r5, r2
   29b20:	bne	29b30 <flatcc_json_printer_int32_field@@Base+0x44>
   29b24:	ldrb	r3, [r4, #28]
   29b28:	cmp	r3, #0
   29b2c:	popne	{r4, r5, r6, r7, r8, pc}
   29b30:	ldr	r2, [r6, #16]
   29b34:	add	r3, r2, #1
   29b38:	cmp	r2, #0
   29b3c:	str	r3, [r6, #16]
   29b40:	beq	29b58 <flatcc_json_printer_int32_field@@Base+0x6c>
   29b44:	ldr	r2, [r4, #20]
   29b48:	add	r3, r2, #1
   29b4c:	str	r3, [r4, #20]
   29b50:	mov	r3, #44	; 0x2c
   29b54:	strb	r3, [r2]
   29b58:	mov	r1, r7
   29b5c:	mov	r0, r4
   29b60:	ldr	r2, [sp, #24]
   29b64:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29b68:	mov	r0, r5
   29b6c:	ldr	r1, [r4, #20]
   29b70:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   29b74:	ldr	r3, [r4, #20]
   29b78:	add	r0, r3, r0
   29b7c:	str	r0, [r4, #20]
   29b80:	pop	{r4, r5, r6, r7, r8, pc}
   29b84:	ldrb	r3, [r4, #29]
   29b88:	cmp	r3, #0
   29b8c:	bne	29b30 <flatcc_json_printer_int32_field@@Base+0x44>
   29b90:	pop	{r4, r5, r6, r7, r8, pc}

00029b94 <flatcc_json_printer_int64_field@@Base>:
   29b94:	push	{r4, r5, r6, r7, r8, lr}
   29b98:	mov	r5, r1
   29b9c:	mov	r4, r0
   29ba0:	mov	r1, r2
   29ba4:	mov	r0, r5
   29ba8:	mov	r8, r3
   29bac:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29bb0:	cmp	r0, #0
   29bb4:	ldrd	r6, [sp, #32]
   29bb8:	beq	29c38 <flatcc_json_printer_int64_field@@Base+0xa4>
   29bbc:	ldrd	r2, [r0]
   29bc0:	cmp	r3, r7
   29bc4:	cmpeq	r2, r6
   29bc8:	movne	r6, r2
   29bcc:	movne	r7, r3
   29bd0:	bne	29be0 <flatcc_json_printer_int64_field@@Base+0x4c>
   29bd4:	ldrb	r3, [r4, #28]
   29bd8:	cmp	r3, #0
   29bdc:	popne	{r4, r5, r6, r7, r8, pc}
   29be0:	ldr	r2, [r5, #16]
   29be4:	add	r3, r2, #1
   29be8:	cmp	r2, #0
   29bec:	str	r3, [r5, #16]
   29bf0:	beq	29c08 <flatcc_json_printer_int64_field@@Base+0x74>
   29bf4:	ldr	r2, [r4, #20]
   29bf8:	add	r3, r2, #1
   29bfc:	str	r3, [r4, #20]
   29c00:	mov	r3, #44	; 0x2c
   29c04:	strb	r3, [r2]
   29c08:	mov	r1, r8
   29c0c:	mov	r0, r4
   29c10:	ldr	r2, [sp, #24]
   29c14:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29c18:	mov	r0, r6
   29c1c:	mov	r1, r7
   29c20:	ldr	r2, [r4, #20]
   29c24:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   29c28:	ldr	r3, [r4, #20]
   29c2c:	add	r0, r3, r0
   29c30:	str	r0, [r4, #20]
   29c34:	pop	{r4, r5, r6, r7, r8, pc}
   29c38:	ldrb	r3, [r4, #29]
   29c3c:	cmp	r3, #0
   29c40:	bne	29be0 <flatcc_json_printer_int64_field@@Base+0x4c>
   29c44:	pop	{r4, r5, r6, r7, r8, pc}

00029c48 <flatcc_json_printer_bool_field@@Base>:
   29c48:	push	{r4, r5, r6, r7, r8, lr}
   29c4c:	mov	r6, r1
   29c50:	mov	r4, r0
   29c54:	mov	r1, r2
   29c58:	mov	r0, r6
   29c5c:	mov	r7, r3
   29c60:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29c64:	cmp	r0, #0
   29c68:	ldrb	r5, [sp, #28]
   29c6c:	beq	29ce0 <flatcc_json_printer_bool_field@@Base+0x98>
   29c70:	ldrb	r2, [r0]
   29c74:	cmp	r2, r5
   29c78:	movne	r5, r2
   29c7c:	bne	29c8c <flatcc_json_printer_bool_field@@Base+0x44>
   29c80:	ldrb	r3, [r4, #28]
   29c84:	cmp	r3, #0
   29c88:	popne	{r4, r5, r6, r7, r8, pc}
   29c8c:	ldr	r2, [r6, #16]
   29c90:	add	r3, r2, #1
   29c94:	cmp	r2, #0
   29c98:	str	r3, [r6, #16]
   29c9c:	beq	29cb4 <flatcc_json_printer_bool_field@@Base+0x6c>
   29ca0:	ldr	r2, [r4, #20]
   29ca4:	add	r3, r2, #1
   29ca8:	str	r3, [r4, #20]
   29cac:	mov	r3, #44	; 0x2c
   29cb0:	strb	r3, [r2]
   29cb4:	mov	r1, r7
   29cb8:	mov	r0, r4
   29cbc:	ldr	r2, [sp, #24]
   29cc0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29cc4:	mov	r0, r5
   29cc8:	ldr	r1, [r4, #20]
   29ccc:	bl	28620 <flatcc_json_parser_struct_as_root@@Base+0x1504>
   29cd0:	ldr	r3, [r4, #20]
   29cd4:	add	r0, r3, r0
   29cd8:	str	r0, [r4, #20]
   29cdc:	pop	{r4, r5, r6, r7, r8, pc}
   29ce0:	ldrb	r3, [r4, #29]
   29ce4:	cmp	r3, #0
   29ce8:	bne	29c8c <flatcc_json_printer_bool_field@@Base+0x44>
   29cec:	pop	{r4, r5, r6, r7, r8, pc}

00029cf0 <flatcc_json_printer_float_field@@Base>:
   29cf0:	push	{r4, r5, r6, lr}
   29cf4:	mov	r5, r1
   29cf8:	mov	r4, r0
   29cfc:	mov	r1, r2
   29d00:	mov	r0, r5
   29d04:	mov	r6, r3
   29d08:	vpush	{d8}
   29d0c:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29d10:	cmp	r0, #0
   29d14:	beq	29d3c <flatcc_json_printer_float_field@@Base+0x4c>
   29d18:	vldr	s16, [r0]
   29d1c:	vcmp.f32	s16, s0
   29d20:	vmrs	APSR_nzcv, fpscr
   29d24:	bne	29d4c <flatcc_json_printer_float_field@@Base+0x5c>
   29d28:	ldrb	r3, [r4, #28]
   29d2c:	cmp	r3, #0
   29d30:	beq	29d4c <flatcc_json_printer_float_field@@Base+0x5c>
   29d34:	vpop	{d8}
   29d38:	pop	{r4, r5, r6, pc}
   29d3c:	ldrb	r3, [r4, #29]
   29d40:	cmp	r3, #0
   29d44:	beq	29d34 <flatcc_json_printer_float_field@@Base+0x44>
   29d48:	vmov.f32	s16, s0
   29d4c:	ldr	r2, [r5, #16]
   29d50:	add	r3, r2, #1
   29d54:	cmp	r2, #0
   29d58:	str	r3, [r5, #16]
   29d5c:	beq	29d74 <flatcc_json_printer_float_field@@Base+0x84>
   29d60:	ldr	r2, [r4, #20]
   29d64:	add	r3, r2, #1
   29d68:	str	r3, [r4, #20]
   29d6c:	mov	r3, #44	; 0x2c
   29d70:	strb	r3, [r2]
   29d74:	mov	r1, r6
   29d78:	mov	r0, r4
   29d7c:	ldr	r2, [sp, #24]
   29d80:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29d84:	vcvt.f64.f32	d0, s16
   29d88:	ldr	r0, [r4, #20]
   29d8c:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   29d90:	ldr	r3, [r4, #20]
   29d94:	add	r0, r3, r0
   29d98:	str	r0, [r4, #20]
   29d9c:	b	29d34 <flatcc_json_printer_float_field@@Base+0x44>

00029da0 <flatcc_json_printer_double_field@@Base>:
   29da0:	push	{r4, r5, r6, lr}
   29da4:	mov	r5, r1
   29da8:	mov	r4, r0
   29dac:	mov	r1, r2
   29db0:	mov	r0, r5
   29db4:	mov	r6, r3
   29db8:	vpush	{d8}
   29dbc:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29dc0:	cmp	r0, #0
   29dc4:	beq	29dec <flatcc_json_printer_double_field@@Base+0x4c>
   29dc8:	vldr	d8, [r0]
   29dcc:	vcmp.f64	d8, d0
   29dd0:	vmrs	APSR_nzcv, fpscr
   29dd4:	bne	29dfc <flatcc_json_printer_double_field@@Base+0x5c>
   29dd8:	ldrb	r3, [r4, #28]
   29ddc:	cmp	r3, #0
   29de0:	beq	29dfc <flatcc_json_printer_double_field@@Base+0x5c>
   29de4:	vpop	{d8}
   29de8:	pop	{r4, r5, r6, pc}
   29dec:	ldrb	r3, [r4, #29]
   29df0:	cmp	r3, #0
   29df4:	beq	29de4 <flatcc_json_printer_double_field@@Base+0x44>
   29df8:	vmov.f64	d8, d0
   29dfc:	ldr	r2, [r5, #16]
   29e00:	add	r3, r2, #1
   29e04:	cmp	r2, #0
   29e08:	str	r3, [r5, #16]
   29e0c:	beq	29e24 <flatcc_json_printer_double_field@@Base+0x84>
   29e10:	ldr	r2, [r4, #20]
   29e14:	add	r3, r2, #1
   29e18:	str	r3, [r4, #20]
   29e1c:	mov	r3, #44	; 0x2c
   29e20:	strb	r3, [r2]
   29e24:	mov	r1, r6
   29e28:	mov	r0, r4
   29e2c:	ldr	r2, [sp, #24]
   29e30:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29e34:	vmov.f64	d0, d8
   29e38:	ldr	r0, [r4, #20]
   29e3c:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   29e40:	ldr	r3, [r4, #20]
   29e44:	add	r0, r3, r0
   29e48:	str	r0, [r4, #20]
   29e4c:	b	29de4 <flatcc_json_printer_double_field@@Base+0x44>

00029e50 <flatcc_json_printer_uint8_enum_field@@Base>:
   29e50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29e54:	mov	r6, r1
   29e58:	mov	r4, r0
   29e5c:	mov	r1, r2
   29e60:	mov	r0, r6
   29e64:	mov	r8, r3
   29e68:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29e6c:	cmp	r0, #0
   29e70:	ldrb	r5, [sp, #36]	; 0x24
   29e74:	ldr	r9, [sp, #32]
   29e78:	ldr	r7, [sp, #40]	; 0x28
   29e7c:	beq	29efc <flatcc_json_printer_uint8_enum_field@@Base+0xac>
   29e80:	ldrb	r2, [r0]
   29e84:	cmp	r2, r5
   29e88:	movne	r5, r2
   29e8c:	bne	29e9c <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   29e90:	ldrb	r3, [r4, #28]
   29e94:	cmp	r3, #0
   29e98:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   29e9c:	ldr	r2, [r6, #16]
   29ea0:	add	r3, r2, #1
   29ea4:	cmp	r2, #0
   29ea8:	str	r3, [r6, #16]
   29eac:	beq	29ec4 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   29eb0:	ldr	r2, [r4, #20]
   29eb4:	add	r3, r2, #1
   29eb8:	str	r3, [r4, #20]
   29ebc:	mov	r3, #44	; 0x2c
   29ec0:	strb	r3, [r2]
   29ec4:	mov	r2, r9
   29ec8:	mov	r1, r8
   29ecc:	mov	r0, r4
   29ed0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29ed4:	ldrb	r3, [r4, #27]
   29ed8:	cmp	r3, #0
   29edc:	beq	29f0c <flatcc_json_printer_uint8_enum_field@@Base+0xbc>
   29ee0:	mov	r0, r5
   29ee4:	ldr	r1, [r4, #20]
   29ee8:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   29eec:	ldr	r3, [r4, #20]
   29ef0:	add	r0, r3, r0
   29ef4:	str	r0, [r4, #20]
   29ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29efc:	ldrb	r3, [r4, #29]
   29f00:	cmp	r3, #0
   29f04:	bne	29e9c <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   29f08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f0c:	mov	r1, r5
   29f10:	mov	r0, r4
   29f14:	mov	r3, r7
   29f18:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29f1c:	bx	r3

00029f20 <flatcc_json_printer_uint16_enum_field@@Base>:
   29f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29f24:	mov	r6, r1
   29f28:	mov	r4, r0
   29f2c:	mov	r1, r2
   29f30:	mov	r0, r6
   29f34:	mov	r8, r3
   29f38:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   29f3c:	cmp	r0, #0
   29f40:	ldrh	r5, [sp, #36]	; 0x24
   29f44:	ldr	r9, [sp, #32]
   29f48:	ldr	r7, [sp, #40]	; 0x28
   29f4c:	beq	29fcc <flatcc_json_printer_uint16_enum_field@@Base+0xac>
   29f50:	ldrh	r2, [r0]
   29f54:	cmp	r2, r5
   29f58:	movne	r5, r2
   29f5c:	bne	29f6c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   29f60:	ldrb	r3, [r4, #28]
   29f64:	cmp	r3, #0
   29f68:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f6c:	ldr	r2, [r6, #16]
   29f70:	add	r3, r2, #1
   29f74:	cmp	r2, #0
   29f78:	str	r3, [r6, #16]
   29f7c:	beq	29f94 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   29f80:	ldr	r2, [r4, #20]
   29f84:	add	r3, r2, #1
   29f88:	str	r3, [r4, #20]
   29f8c:	mov	r3, #44	; 0x2c
   29f90:	strb	r3, [r2]
   29f94:	mov	r2, r9
   29f98:	mov	r1, r8
   29f9c:	mov	r0, r4
   29fa0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   29fa4:	ldrb	r3, [r4, #27]
   29fa8:	cmp	r3, #0
   29fac:	beq	29fdc <flatcc_json_printer_uint16_enum_field@@Base+0xbc>
   29fb0:	mov	r0, r5
   29fb4:	ldr	r1, [r4, #20]
   29fb8:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   29fbc:	ldr	r3, [r4, #20]
   29fc0:	add	r0, r3, r0
   29fc4:	str	r0, [r4, #20]
   29fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29fcc:	ldrb	r3, [r4, #29]
   29fd0:	cmp	r3, #0
   29fd4:	bne	29f6c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   29fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29fdc:	mov	r1, r5
   29fe0:	mov	r0, r4
   29fe4:	mov	r3, r7
   29fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29fec:	bx	r3

00029ff0 <flatcc_json_printer_uint32_enum_field@@Base>:
   29ff0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29ff4:	mov	r6, r1
   29ff8:	mov	r4, r0
   29ffc:	mov	r1, r2
   2a000:	mov	r0, r6
   2a004:	mov	r8, r3
   2a008:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a00c:	cmp	r0, #0
   2a010:	ldr	r9, [sp, #32]
   2a014:	ldr	r5, [sp, #36]	; 0x24
   2a018:	ldr	r7, [sp, #40]	; 0x28
   2a01c:	beq	2a09c <flatcc_json_printer_uint32_enum_field@@Base+0xac>
   2a020:	ldr	r2, [r0]
   2a024:	cmp	r2, r5
   2a028:	movne	r5, r2
   2a02c:	bne	2a03c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   2a030:	ldrb	r3, [r4, #28]
   2a034:	cmp	r3, #0
   2a038:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a03c:	ldr	r2, [r6, #16]
   2a040:	add	r3, r2, #1
   2a044:	cmp	r2, #0
   2a048:	str	r3, [r6, #16]
   2a04c:	beq	2a064 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   2a050:	ldr	r2, [r4, #20]
   2a054:	add	r3, r2, #1
   2a058:	str	r3, [r4, #20]
   2a05c:	mov	r3, #44	; 0x2c
   2a060:	strb	r3, [r2]
   2a064:	mov	r2, r9
   2a068:	mov	r1, r8
   2a06c:	mov	r0, r4
   2a070:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a074:	ldrb	r3, [r4, #27]
   2a078:	cmp	r3, #0
   2a07c:	beq	2a0ac <flatcc_json_printer_uint32_enum_field@@Base+0xbc>
   2a080:	mov	r0, r5
   2a084:	ldr	r1, [r4, #20]
   2a088:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   2a08c:	ldr	r3, [r4, #20]
   2a090:	add	r0, r3, r0
   2a094:	str	r0, [r4, #20]
   2a098:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a09c:	ldrb	r3, [r4, #29]
   2a0a0:	cmp	r3, #0
   2a0a4:	bne	2a03c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   2a0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a0ac:	mov	r1, r5
   2a0b0:	mov	r0, r4
   2a0b4:	mov	r3, r7
   2a0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a0bc:	bx	r3

0002a0c0 <flatcc_json_printer_uint64_enum_field@@Base>:
   2a0c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a0c4:	mov	r5, r1
   2a0c8:	mov	r4, r0
   2a0cc:	mov	r1, r2
   2a0d0:	mov	r0, r5
   2a0d4:	mov	r9, r3
   2a0d8:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a0dc:	cmp	r0, #0
   2a0e0:	ldr	sl, [sp, #32]
   2a0e4:	ldrd	r6, [sp, #40]	; 0x28
   2a0e8:	ldr	r8, [sp, #48]	; 0x30
   2a0ec:	beq	2a178 <flatcc_json_printer_uint64_enum_field@@Base+0xb8>
   2a0f0:	ldrd	r2, [r0]
   2a0f4:	cmp	r3, r7
   2a0f8:	cmpeq	r2, r6
   2a0fc:	movne	r6, r2
   2a100:	movne	r7, r3
   2a104:	bne	2a114 <flatcc_json_printer_uint64_enum_field@@Base+0x54>
   2a108:	ldrb	r3, [r4, #28]
   2a10c:	cmp	r3, #0
   2a110:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a114:	ldr	r2, [r5, #16]
   2a118:	add	r3, r2, #1
   2a11c:	cmp	r2, #0
   2a120:	str	r3, [r5, #16]
   2a124:	beq	2a13c <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   2a128:	ldr	r2, [r4, #20]
   2a12c:	add	r3, r2, #1
   2a130:	str	r3, [r4, #20]
   2a134:	mov	r3, #44	; 0x2c
   2a138:	strb	r3, [r2]
   2a13c:	mov	r2, sl
   2a140:	mov	r1, r9
   2a144:	mov	r0, r4
   2a148:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a14c:	ldrb	r3, [r4, #27]
   2a150:	cmp	r3, #0
   2a154:	beq	2a188 <flatcc_json_printer_uint64_enum_field@@Base+0xc8>
   2a158:	mov	r0, r6
   2a15c:	mov	r1, r7
   2a160:	ldr	r2, [r4, #20]
   2a164:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   2a168:	ldr	r3, [r4, #20]
   2a16c:	add	r0, r3, r0
   2a170:	str	r0, [r4, #20]
   2a174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a178:	ldrb	r3, [r4, #29]
   2a17c:	cmp	r3, #0
   2a180:	bne	2a114 <flatcc_json_printer_uint64_enum_field@@Base+0x54>
   2a184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a188:	mov	r2, r6
   2a18c:	mov	r3, r7
   2a190:	mov	r0, r4
   2a194:	mov	r1, r8
   2a198:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a19c:	bx	r1

0002a1a0 <flatcc_json_printer_int8_enum_field@@Base>:
   2a1a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a1a4:	mov	r6, r1
   2a1a8:	mov	r4, r0
   2a1ac:	mov	r1, r2
   2a1b0:	mov	r0, r6
   2a1b4:	mov	r8, r3
   2a1b8:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a1bc:	cmp	r0, #0
   2a1c0:	ldrsb	r5, [sp, #36]	; 0x24
   2a1c4:	ldr	r9, [sp, #32]
   2a1c8:	ldr	r7, [sp, #40]	; 0x28
   2a1cc:	beq	2a24c <flatcc_json_printer_int8_enum_field@@Base+0xac>
   2a1d0:	ldrsb	r2, [r0]
   2a1d4:	cmp	r2, r5
   2a1d8:	movne	r5, r2
   2a1dc:	bne	2a1ec <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   2a1e0:	ldrb	r3, [r4, #28]
   2a1e4:	cmp	r3, #0
   2a1e8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a1ec:	ldr	r2, [r6, #16]
   2a1f0:	add	r3, r2, #1
   2a1f4:	cmp	r2, #0
   2a1f8:	str	r3, [r6, #16]
   2a1fc:	beq	2a214 <flatcc_json_printer_int8_enum_field@@Base+0x74>
   2a200:	ldr	r2, [r4, #20]
   2a204:	add	r3, r2, #1
   2a208:	str	r3, [r4, #20]
   2a20c:	mov	r3, #44	; 0x2c
   2a210:	strb	r3, [r2]
   2a214:	mov	r2, r9
   2a218:	mov	r1, r8
   2a21c:	mov	r0, r4
   2a220:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a224:	ldrb	r3, [r4, #27]
   2a228:	cmp	r3, #0
   2a22c:	beq	2a25c <flatcc_json_printer_int8_enum_field@@Base+0xbc>
   2a230:	mov	r0, r5
   2a234:	ldr	r1, [r4, #20]
   2a238:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   2a23c:	ldr	r3, [r4, #20]
   2a240:	add	r0, r3, r0
   2a244:	str	r0, [r4, #20]
   2a248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a24c:	ldrb	r3, [r4, #29]
   2a250:	cmp	r3, #0
   2a254:	bne	2a1ec <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   2a258:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a25c:	mov	r1, r5
   2a260:	mov	r0, r4
   2a264:	mov	r3, r7
   2a268:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a26c:	bx	r3

0002a270 <flatcc_json_printer_int16_enum_field@@Base>:
   2a270:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a274:	mov	r6, r1
   2a278:	mov	r4, r0
   2a27c:	mov	r1, r2
   2a280:	mov	r0, r6
   2a284:	mov	r8, r3
   2a288:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a28c:	cmp	r0, #0
   2a290:	ldrsh	r5, [sp, #36]	; 0x24
   2a294:	ldr	r9, [sp, #32]
   2a298:	ldr	r7, [sp, #40]	; 0x28
   2a29c:	beq	2a31c <flatcc_json_printer_int16_enum_field@@Base+0xac>
   2a2a0:	ldrsh	r2, [r0]
   2a2a4:	cmp	r2, r5
   2a2a8:	movne	r5, r2
   2a2ac:	bne	2a2bc <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   2a2b0:	ldrb	r3, [r4, #28]
   2a2b4:	cmp	r3, #0
   2a2b8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a2bc:	ldr	r2, [r6, #16]
   2a2c0:	add	r3, r2, #1
   2a2c4:	cmp	r2, #0
   2a2c8:	str	r3, [r6, #16]
   2a2cc:	beq	2a2e4 <flatcc_json_printer_int16_enum_field@@Base+0x74>
   2a2d0:	ldr	r2, [r4, #20]
   2a2d4:	add	r3, r2, #1
   2a2d8:	str	r3, [r4, #20]
   2a2dc:	mov	r3, #44	; 0x2c
   2a2e0:	strb	r3, [r2]
   2a2e4:	mov	r2, r9
   2a2e8:	mov	r1, r8
   2a2ec:	mov	r0, r4
   2a2f0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a2f4:	ldrb	r3, [r4, #27]
   2a2f8:	cmp	r3, #0
   2a2fc:	beq	2a32c <flatcc_json_printer_int16_enum_field@@Base+0xbc>
   2a300:	mov	r0, r5
   2a304:	ldr	r1, [r4, #20]
   2a308:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   2a30c:	ldr	r3, [r4, #20]
   2a310:	add	r0, r3, r0
   2a314:	str	r0, [r4, #20]
   2a318:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a31c:	ldrb	r3, [r4, #29]
   2a320:	cmp	r3, #0
   2a324:	bne	2a2bc <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   2a328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a32c:	mov	r1, r5
   2a330:	mov	r0, r4
   2a334:	mov	r3, r7
   2a338:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a33c:	bx	r3

0002a340 <flatcc_json_printer_int32_enum_field@@Base>:
   2a340:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a344:	mov	r6, r1
   2a348:	mov	r4, r0
   2a34c:	mov	r1, r2
   2a350:	mov	r0, r6
   2a354:	mov	r8, r3
   2a358:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a35c:	cmp	r0, #0
   2a360:	ldr	r9, [sp, #32]
   2a364:	ldr	r5, [sp, #36]	; 0x24
   2a368:	ldr	r7, [sp, #40]	; 0x28
   2a36c:	beq	2a3ec <flatcc_json_printer_int32_enum_field@@Base+0xac>
   2a370:	ldr	r2, [r0]
   2a374:	cmp	r2, r5
   2a378:	movne	r5, r2
   2a37c:	bne	2a38c <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   2a380:	ldrb	r3, [r4, #28]
   2a384:	cmp	r3, #0
   2a388:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a38c:	ldr	r2, [r6, #16]
   2a390:	add	r3, r2, #1
   2a394:	cmp	r2, #0
   2a398:	str	r3, [r6, #16]
   2a39c:	beq	2a3b4 <flatcc_json_printer_int32_enum_field@@Base+0x74>
   2a3a0:	ldr	r2, [r4, #20]
   2a3a4:	add	r3, r2, #1
   2a3a8:	str	r3, [r4, #20]
   2a3ac:	mov	r3, #44	; 0x2c
   2a3b0:	strb	r3, [r2]
   2a3b4:	mov	r2, r9
   2a3b8:	mov	r1, r8
   2a3bc:	mov	r0, r4
   2a3c0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a3c4:	ldrb	r3, [r4, #27]
   2a3c8:	cmp	r3, #0
   2a3cc:	beq	2a3fc <flatcc_json_printer_int32_enum_field@@Base+0xbc>
   2a3d0:	mov	r0, r5
   2a3d4:	ldr	r1, [r4, #20]
   2a3d8:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   2a3dc:	ldr	r3, [r4, #20]
   2a3e0:	add	r0, r3, r0
   2a3e4:	str	r0, [r4, #20]
   2a3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a3ec:	ldrb	r3, [r4, #29]
   2a3f0:	cmp	r3, #0
   2a3f4:	bne	2a38c <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   2a3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a3fc:	mov	r1, r5
   2a400:	mov	r0, r4
   2a404:	mov	r3, r7
   2a408:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a40c:	bx	r3

0002a410 <flatcc_json_printer_int64_enum_field@@Base>:
   2a410:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a414:	mov	r5, r1
   2a418:	mov	r4, r0
   2a41c:	mov	r1, r2
   2a420:	mov	r0, r5
   2a424:	mov	r9, r3
   2a428:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a42c:	cmp	r0, #0
   2a430:	ldr	sl, [sp, #32]
   2a434:	ldrd	r6, [sp, #40]	; 0x28
   2a438:	ldr	r8, [sp, #48]	; 0x30
   2a43c:	beq	2a4c8 <flatcc_json_printer_int64_enum_field@@Base+0xb8>
   2a440:	ldrd	r2, [r0]
   2a444:	cmp	r3, r7
   2a448:	cmpeq	r2, r6
   2a44c:	movne	r6, r2
   2a450:	movne	r7, r3
   2a454:	bne	2a464 <flatcc_json_printer_int64_enum_field@@Base+0x54>
   2a458:	ldrb	r3, [r4, #28]
   2a45c:	cmp	r3, #0
   2a460:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a464:	ldr	r2, [r5, #16]
   2a468:	add	r3, r2, #1
   2a46c:	cmp	r2, #0
   2a470:	str	r3, [r5, #16]
   2a474:	beq	2a48c <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   2a478:	ldr	r2, [r4, #20]
   2a47c:	add	r3, r2, #1
   2a480:	str	r3, [r4, #20]
   2a484:	mov	r3, #44	; 0x2c
   2a488:	strb	r3, [r2]
   2a48c:	mov	r2, sl
   2a490:	mov	r1, r9
   2a494:	mov	r0, r4
   2a498:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a49c:	ldrb	r3, [r4, #27]
   2a4a0:	cmp	r3, #0
   2a4a4:	beq	2a4d8 <flatcc_json_printer_int64_enum_field@@Base+0xc8>
   2a4a8:	mov	r0, r6
   2a4ac:	mov	r1, r7
   2a4b0:	ldr	r2, [r4, #20]
   2a4b4:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   2a4b8:	ldr	r3, [r4, #20]
   2a4bc:	add	r0, r3, r0
   2a4c0:	str	r0, [r4, #20]
   2a4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a4c8:	ldrb	r3, [r4, #29]
   2a4cc:	cmp	r3, #0
   2a4d0:	bne	2a464 <flatcc_json_printer_int64_enum_field@@Base+0x54>
   2a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a4d8:	mov	r2, r6
   2a4dc:	mov	r3, r7
   2a4e0:	mov	r0, r4
   2a4e4:	mov	r1, r8
   2a4e8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a4ec:	bx	r1

0002a4f0 <flatcc_json_printer_bool_enum_field@@Base>:
   2a4f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a4f4:	mov	r6, r1
   2a4f8:	mov	r4, r0
   2a4fc:	mov	r1, r2
   2a500:	mov	r0, r6
   2a504:	mov	r8, r3
   2a508:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2a50c:	cmp	r0, #0
   2a510:	ldrb	r5, [sp, #36]	; 0x24
   2a514:	ldr	r9, [sp, #32]
   2a518:	ldr	r7, [sp, #40]	; 0x28
   2a51c:	beq	2a59c <flatcc_json_printer_bool_enum_field@@Base+0xac>
   2a520:	ldrb	r2, [r0]
   2a524:	cmp	r2, r5
   2a528:	movne	r5, r2
   2a52c:	bne	2a53c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   2a530:	ldrb	r3, [r4, #28]
   2a534:	cmp	r3, #0
   2a538:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a53c:	ldr	r2, [r6, #16]
   2a540:	add	r3, r2, #1
   2a544:	cmp	r2, #0
   2a548:	str	r3, [r6, #16]
   2a54c:	beq	2a564 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   2a550:	ldr	r2, [r4, #20]
   2a554:	add	r3, r2, #1
   2a558:	str	r3, [r4, #20]
   2a55c:	mov	r3, #44	; 0x2c
   2a560:	strb	r3, [r2]
   2a564:	mov	r2, r9
   2a568:	mov	r1, r8
   2a56c:	mov	r0, r4
   2a570:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a574:	ldrb	r3, [r4, #27]
   2a578:	cmp	r3, #0
   2a57c:	beq	2a5ac <flatcc_json_printer_bool_enum_field@@Base+0xbc>
   2a580:	mov	r0, r5
   2a584:	ldr	r1, [r4, #20]
   2a588:	bl	28620 <flatcc_json_parser_struct_as_root@@Base+0x1504>
   2a58c:	ldr	r3, [r4, #20]
   2a590:	add	r0, r3, r0
   2a594:	str	r0, [r4, #20]
   2a598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a59c:	ldrb	r3, [r4, #29]
   2a5a0:	cmp	r3, #0
   2a5a4:	bne	2a53c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   2a5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a5ac:	mov	r1, r5
   2a5b0:	mov	r0, r4
   2a5b4:	mov	r3, r7
   2a5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a5bc:	bx	r3

0002a5c0 <flatcc_json_printer_uint8_struct_field@@Base>:
   2a5c0:	cmp	r1, #0
   2a5c4:	push	{r4, r5, r6, lr}
   2a5c8:	mov	r4, r0
   2a5cc:	ldrb	r5, [r2, r3]
   2a5d0:	beq	2a5e8 <flatcc_json_printer_uint8_struct_field@@Base+0x28>
   2a5d4:	ldr	r3, [r0, #20]
   2a5d8:	add	r2, r3, #1
   2a5dc:	str	r2, [r0, #20]
   2a5e0:	mov	r2, #44	; 0x2c
   2a5e4:	strb	r2, [r3]
   2a5e8:	mov	r0, r4
   2a5ec:	ldr	r1, [sp, #16]
   2a5f0:	ldr	r2, [sp, #20]
   2a5f4:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a5f8:	mov	r0, r5
   2a5fc:	ldr	r1, [r4, #20]
   2a600:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   2a604:	ldr	r3, [r4, #20]
   2a608:	add	r0, r3, r0
   2a60c:	str	r0, [r4, #20]
   2a610:	pop	{r4, r5, r6, pc}

0002a614 <flatcc_json_printer_uint16_struct_field@@Base>:
   2a614:	cmp	r1, #0
   2a618:	push	{r4, r5, r6, lr}
   2a61c:	mov	r4, r0
   2a620:	ldrh	r5, [r2, r3]
   2a624:	beq	2a63c <flatcc_json_printer_uint16_struct_field@@Base+0x28>
   2a628:	ldr	r3, [r0, #20]
   2a62c:	add	r2, r3, #1
   2a630:	str	r2, [r0, #20]
   2a634:	mov	r2, #44	; 0x2c
   2a638:	strb	r2, [r3]
   2a63c:	mov	r0, r4
   2a640:	ldr	r1, [sp, #16]
   2a644:	ldr	r2, [sp, #20]
   2a648:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a64c:	mov	r0, r5
   2a650:	ldr	r1, [r4, #20]
   2a654:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   2a658:	ldr	r3, [r4, #20]
   2a65c:	add	r0, r3, r0
   2a660:	str	r0, [r4, #20]
   2a664:	pop	{r4, r5, r6, pc}

0002a668 <flatcc_json_printer_uint32_struct_field@@Base>:
   2a668:	cmp	r1, #0
   2a66c:	push	{r4, r5, r6, lr}
   2a670:	mov	r4, r0
   2a674:	ldr	r5, [r2, r3]
   2a678:	beq	2a690 <flatcc_json_printer_uint32_struct_field@@Base+0x28>
   2a67c:	ldr	r3, [r0, #20]
   2a680:	add	r2, r3, #1
   2a684:	str	r2, [r0, #20]
   2a688:	mov	r2, #44	; 0x2c
   2a68c:	strb	r2, [r3]
   2a690:	mov	r0, r4
   2a694:	ldr	r1, [sp, #16]
   2a698:	ldr	r2, [sp, #20]
   2a69c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a6a0:	mov	r0, r5
   2a6a4:	ldr	r1, [r4, #20]
   2a6a8:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   2a6ac:	ldr	r3, [r4, #20]
   2a6b0:	add	r0, r3, r0
   2a6b4:	str	r0, [r4, #20]
   2a6b8:	pop	{r4, r5, r6, pc}

0002a6bc <flatcc_json_printer_uint64_struct_field@@Base>:
   2a6bc:	cmp	r1, #0
   2a6c0:	push	{r4, r6, r7, lr}
   2a6c4:	mov	r4, r0
   2a6c8:	ldrd	r6, [r2, r3]
   2a6cc:	beq	2a6e4 <flatcc_json_printer_uint64_struct_field@@Base+0x28>
   2a6d0:	ldr	r3, [r0, #20]
   2a6d4:	add	r2, r3, #1
   2a6d8:	str	r2, [r0, #20]
   2a6dc:	mov	r2, #44	; 0x2c
   2a6e0:	strb	r2, [r3]
   2a6e4:	mov	r0, r4
   2a6e8:	ldr	r1, [sp, #16]
   2a6ec:	ldr	r2, [sp, #20]
   2a6f0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a6f4:	mov	r0, r6
   2a6f8:	mov	r1, r7
   2a6fc:	ldr	r2, [r4, #20]
   2a700:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   2a704:	ldr	r3, [r4, #20]
   2a708:	add	r0, r3, r0
   2a70c:	str	r0, [r4, #20]
   2a710:	pop	{r4, r6, r7, pc}

0002a714 <flatcc_json_printer_int8_struct_field@@Base>:
   2a714:	cmp	r1, #0
   2a718:	push	{r4, r5, r6, lr}
   2a71c:	mov	r4, r0
   2a720:	ldrsb	r5, [r2, r3]
   2a724:	beq	2a73c <flatcc_json_printer_int8_struct_field@@Base+0x28>
   2a728:	ldr	r3, [r0, #20]
   2a72c:	add	r2, r3, #1
   2a730:	str	r2, [r0, #20]
   2a734:	mov	r2, #44	; 0x2c
   2a738:	strb	r2, [r3]
   2a73c:	mov	r0, r4
   2a740:	ldr	r1, [sp, #16]
   2a744:	ldr	r2, [sp, #20]
   2a748:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a74c:	mov	r0, r5
   2a750:	ldr	r1, [r4, #20]
   2a754:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   2a758:	ldr	r3, [r4, #20]
   2a75c:	add	r0, r3, r0
   2a760:	str	r0, [r4, #20]
   2a764:	pop	{r4, r5, r6, pc}

0002a768 <flatcc_json_printer_int16_struct_field@@Base>:
   2a768:	cmp	r1, #0
   2a76c:	push	{r4, r5, r6, lr}
   2a770:	mov	r4, r0
   2a774:	ldrsh	r5, [r2, r3]
   2a778:	beq	2a790 <flatcc_json_printer_int16_struct_field@@Base+0x28>
   2a77c:	ldr	r3, [r0, #20]
   2a780:	add	r2, r3, #1
   2a784:	str	r2, [r0, #20]
   2a788:	mov	r2, #44	; 0x2c
   2a78c:	strb	r2, [r3]
   2a790:	mov	r0, r4
   2a794:	ldr	r1, [sp, #16]
   2a798:	ldr	r2, [sp, #20]
   2a79c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a7a0:	mov	r0, r5
   2a7a4:	ldr	r1, [r4, #20]
   2a7a8:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   2a7ac:	ldr	r3, [r4, #20]
   2a7b0:	add	r0, r3, r0
   2a7b4:	str	r0, [r4, #20]
   2a7b8:	pop	{r4, r5, r6, pc}

0002a7bc <flatcc_json_printer_int32_struct_field@@Base>:
   2a7bc:	cmp	r1, #0
   2a7c0:	push	{r4, r5, r6, lr}
   2a7c4:	mov	r4, r0
   2a7c8:	ldr	r5, [r2, r3]
   2a7cc:	beq	2a7e4 <flatcc_json_printer_int32_struct_field@@Base+0x28>
   2a7d0:	ldr	r3, [r0, #20]
   2a7d4:	add	r2, r3, #1
   2a7d8:	str	r2, [r0, #20]
   2a7dc:	mov	r2, #44	; 0x2c
   2a7e0:	strb	r2, [r3]
   2a7e4:	mov	r0, r4
   2a7e8:	ldr	r1, [sp, #16]
   2a7ec:	ldr	r2, [sp, #20]
   2a7f0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a7f4:	mov	r0, r5
   2a7f8:	ldr	r1, [r4, #20]
   2a7fc:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   2a800:	ldr	r3, [r4, #20]
   2a804:	add	r0, r3, r0
   2a808:	str	r0, [r4, #20]
   2a80c:	pop	{r4, r5, r6, pc}

0002a810 <flatcc_json_printer_int64_struct_field@@Base>:
   2a810:	cmp	r1, #0
   2a814:	push	{r4, r6, r7, lr}
   2a818:	mov	r4, r0
   2a81c:	ldrd	r6, [r2, r3]
   2a820:	beq	2a838 <flatcc_json_printer_int64_struct_field@@Base+0x28>
   2a824:	ldr	r3, [r0, #20]
   2a828:	add	r2, r3, #1
   2a82c:	str	r2, [r0, #20]
   2a830:	mov	r2, #44	; 0x2c
   2a834:	strb	r2, [r3]
   2a838:	mov	r0, r4
   2a83c:	ldr	r1, [sp, #16]
   2a840:	ldr	r2, [sp, #20]
   2a844:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a848:	mov	r0, r6
   2a84c:	mov	r1, r7
   2a850:	ldr	r2, [r4, #20]
   2a854:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   2a858:	ldr	r3, [r4, #20]
   2a85c:	add	r0, r3, r0
   2a860:	str	r0, [r4, #20]
   2a864:	pop	{r4, r6, r7, pc}

0002a868 <flatcc_json_printer_bool_struct_field@@Base>:
   2a868:	cmp	r1, #0
   2a86c:	push	{r4, r5, r6, lr}
   2a870:	mov	r4, r0
   2a874:	ldrb	r5, [r2, r3]
   2a878:	beq	2a890 <flatcc_json_printer_bool_struct_field@@Base+0x28>
   2a87c:	ldr	r3, [r0, #20]
   2a880:	add	r2, r3, #1
   2a884:	str	r2, [r0, #20]
   2a888:	mov	r2, #44	; 0x2c
   2a88c:	strb	r2, [r3]
   2a890:	mov	r0, r4
   2a894:	ldr	r1, [sp, #16]
   2a898:	ldr	r2, [sp, #20]
   2a89c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a8a0:	mov	r0, r5
   2a8a4:	ldr	r1, [r4, #20]
   2a8a8:	bl	28620 <flatcc_json_parser_struct_as_root@@Base+0x1504>
   2a8ac:	ldr	r3, [r4, #20]
   2a8b0:	add	r0, r3, r0
   2a8b4:	str	r0, [r4, #20]
   2a8b8:	pop	{r4, r5, r6, pc}

0002a8bc <flatcc_json_printer_float_struct_field@@Base>:
   2a8bc:	add	r3, r2, r3
   2a8c0:	cmp	r1, #0
   2a8c4:	push	{r4, lr}
   2a8c8:	mov	r4, r0
   2a8cc:	vpush	{d8}
   2a8d0:	vldr	s16, [r3]
   2a8d4:	beq	2a8ec <flatcc_json_printer_float_struct_field@@Base+0x30>
   2a8d8:	ldr	r3, [r0, #20]
   2a8dc:	add	r2, r3, #1
   2a8e0:	str	r2, [r0, #20]
   2a8e4:	mov	r2, #44	; 0x2c
   2a8e8:	strb	r2, [r3]
   2a8ec:	mov	r0, r4
   2a8f0:	ldr	r1, [sp, #16]
   2a8f4:	ldr	r2, [sp, #20]
   2a8f8:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a8fc:	vcvt.f64.f32	d0, s16
   2a900:	ldr	r0, [r4, #20]
   2a904:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   2a908:	ldr	r3, [r4, #20]
   2a90c:	vpop	{d8}
   2a910:	add	r0, r3, r0
   2a914:	str	r0, [r4, #20]
   2a918:	pop	{r4, pc}

0002a91c <flatcc_json_printer_double_struct_field@@Base>:
   2a91c:	add	r3, r2, r3
   2a920:	cmp	r1, #0
   2a924:	push	{r4, lr}
   2a928:	mov	r4, r0
   2a92c:	vpush	{d8}
   2a930:	vldr	d8, [r3]
   2a934:	beq	2a94c <flatcc_json_printer_double_struct_field@@Base+0x30>
   2a938:	ldr	r3, [r0, #20]
   2a93c:	add	r2, r3, #1
   2a940:	str	r2, [r0, #20]
   2a944:	mov	r2, #44	; 0x2c
   2a948:	strb	r2, [r3]
   2a94c:	mov	r0, r4
   2a950:	ldr	r1, [sp, #16]
   2a954:	ldr	r2, [sp, #20]
   2a958:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a95c:	vmov.f64	d0, d8
   2a960:	ldr	r0, [r4, #20]
   2a964:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   2a968:	ldr	r3, [r4, #20]
   2a96c:	vpop	{d8}
   2a970:	add	r0, r3, r0
   2a974:	str	r0, [r4, #20]
   2a978:	pop	{r4, pc}

0002a97c <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2a97c:	push	{r4, r5, r6, lr}
   2a980:	cmp	r1, #0
   2a984:	mov	r4, r0
   2a988:	ldrb	r5, [r2, r3]
   2a98c:	ldr	r0, [sp, #16]
   2a990:	ldr	ip, [sp, #20]
   2a994:	ldr	r6, [sp, #24]
   2a998:	beq	2a9b0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x34>
   2a99c:	ldr	r3, [r4, #20]
   2a9a0:	add	r2, r3, #1
   2a9a4:	str	r2, [r4, #20]
   2a9a8:	mov	r2, #44	; 0x2c
   2a9ac:	strb	r2, [r3]
   2a9b0:	mov	r1, r0
   2a9b4:	mov	r2, ip
   2a9b8:	mov	r0, r4
   2a9bc:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2a9c0:	ldrb	r3, [r4, #27]
   2a9c4:	cmp	r3, #0
   2a9c8:	beq	2a9e8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x6c>
   2a9cc:	mov	r0, r5
   2a9d0:	ldr	r1, [r4, #20]
   2a9d4:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   2a9d8:	ldr	r3, [r4, #20]
   2a9dc:	add	r0, r3, r0
   2a9e0:	str	r0, [r4, #20]
   2a9e4:	pop	{r4, r5, r6, pc}
   2a9e8:	mov	r1, r5
   2a9ec:	mov	r0, r4
   2a9f0:	mov	r3, r6
   2a9f4:	pop	{r4, r5, r6, lr}
   2a9f8:	bx	r3

0002a9fc <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2a9fc:	push	{r4, r5, r6, lr}
   2aa00:	cmp	r1, #0
   2aa04:	mov	r4, r0
   2aa08:	ldrh	r5, [r2, r3]
   2aa0c:	ldr	r0, [sp, #16]
   2aa10:	ldr	ip, [sp, #20]
   2aa14:	ldr	r6, [sp, #24]
   2aa18:	beq	2aa30 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x34>
   2aa1c:	ldr	r3, [r4, #20]
   2aa20:	add	r2, r3, #1
   2aa24:	str	r2, [r4, #20]
   2aa28:	mov	r2, #44	; 0x2c
   2aa2c:	strb	r2, [r3]
   2aa30:	mov	r1, r0
   2aa34:	mov	r2, ip
   2aa38:	mov	r0, r4
   2aa3c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2aa40:	ldrb	r3, [r4, #27]
   2aa44:	cmp	r3, #0
   2aa48:	beq	2aa68 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x6c>
   2aa4c:	mov	r0, r5
   2aa50:	ldr	r1, [r4, #20]
   2aa54:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   2aa58:	ldr	r3, [r4, #20]
   2aa5c:	add	r0, r3, r0
   2aa60:	str	r0, [r4, #20]
   2aa64:	pop	{r4, r5, r6, pc}
   2aa68:	mov	r1, r5
   2aa6c:	mov	r0, r4
   2aa70:	mov	r3, r6
   2aa74:	pop	{r4, r5, r6, lr}
   2aa78:	bx	r3

0002aa7c <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2aa7c:	push	{r4, r5, r6, lr}
   2aa80:	cmp	r1, #0
   2aa84:	mov	r4, r0
   2aa88:	ldr	r5, [r2, r3]
   2aa8c:	ldr	r0, [sp, #16]
   2aa90:	ldr	ip, [sp, #20]
   2aa94:	ldr	r6, [sp, #24]
   2aa98:	beq	2aab0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x34>
   2aa9c:	ldr	r3, [r4, #20]
   2aaa0:	add	r2, r3, #1
   2aaa4:	str	r2, [r4, #20]
   2aaa8:	mov	r2, #44	; 0x2c
   2aaac:	strb	r2, [r3]
   2aab0:	mov	r1, r0
   2aab4:	mov	r2, ip
   2aab8:	mov	r0, r4
   2aabc:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2aac0:	ldrb	r3, [r4, #27]
   2aac4:	cmp	r3, #0
   2aac8:	beq	2aae8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x6c>
   2aacc:	mov	r0, r5
   2aad0:	ldr	r1, [r4, #20]
   2aad4:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   2aad8:	ldr	r3, [r4, #20]
   2aadc:	add	r0, r3, r0
   2aae0:	str	r0, [r4, #20]
   2aae4:	pop	{r4, r5, r6, pc}
   2aae8:	mov	r1, r5
   2aaec:	mov	r0, r4
   2aaf0:	mov	r3, r6
   2aaf4:	pop	{r4, r5, r6, lr}
   2aaf8:	bx	r3

0002aafc <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2aafc:	push	{r4, r5, r6, r7, r8, lr}
   2ab00:	cmp	r1, #0
   2ab04:	mov	r4, r0
   2ab08:	ldrd	r6, [r2, r3]
   2ab0c:	ldr	r0, [sp, #24]
   2ab10:	ldr	ip, [sp, #28]
   2ab14:	ldr	r5, [sp, #32]
   2ab18:	beq	2ab30 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x34>
   2ab1c:	ldr	r3, [r4, #20]
   2ab20:	add	r2, r3, #1
   2ab24:	str	r2, [r4, #20]
   2ab28:	mov	r2, #44	; 0x2c
   2ab2c:	strb	r2, [r3]
   2ab30:	mov	r1, r0
   2ab34:	mov	r2, ip
   2ab38:	mov	r0, r4
   2ab3c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2ab40:	ldrb	r3, [r4, #27]
   2ab44:	cmp	r3, #0
   2ab48:	beq	2ab6c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   2ab4c:	mov	r0, r6
   2ab50:	mov	r1, r7
   2ab54:	ldr	r2, [r4, #20]
   2ab58:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   2ab5c:	ldr	r3, [r4, #20]
   2ab60:	add	r0, r3, r0
   2ab64:	str	r0, [r4, #20]
   2ab68:	pop	{r4, r5, r6, r7, r8, pc}
   2ab6c:	mov	r2, r6
   2ab70:	mov	r3, r7
   2ab74:	mov	r0, r4
   2ab78:	mov	r1, r5
   2ab7c:	pop	{r4, r5, r6, r7, r8, lr}
   2ab80:	bx	r1

0002ab84 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2ab84:	push	{r4, r5, r6, lr}
   2ab88:	cmp	r1, #0
   2ab8c:	mov	r4, r0
   2ab90:	ldrsb	r5, [r2, r3]
   2ab94:	ldr	r0, [sp, #16]
   2ab98:	ldr	ip, [sp, #20]
   2ab9c:	ldr	r6, [sp, #24]
   2aba0:	beq	2abb8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x34>
   2aba4:	ldr	r3, [r4, #20]
   2aba8:	add	r2, r3, #1
   2abac:	str	r2, [r4, #20]
   2abb0:	mov	r2, #44	; 0x2c
   2abb4:	strb	r2, [r3]
   2abb8:	mov	r1, r0
   2abbc:	mov	r2, ip
   2abc0:	mov	r0, r4
   2abc4:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2abc8:	ldrb	r3, [r4, #27]
   2abcc:	cmp	r3, #0
   2abd0:	beq	2abf0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x6c>
   2abd4:	mov	r0, r5
   2abd8:	ldr	r1, [r4, #20]
   2abdc:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   2abe0:	ldr	r3, [r4, #20]
   2abe4:	add	r0, r3, r0
   2abe8:	str	r0, [r4, #20]
   2abec:	pop	{r4, r5, r6, pc}
   2abf0:	mov	r1, r5
   2abf4:	mov	r0, r4
   2abf8:	mov	r3, r6
   2abfc:	pop	{r4, r5, r6, lr}
   2ac00:	bx	r3

0002ac04 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2ac04:	push	{r4, r5, r6, lr}
   2ac08:	cmp	r1, #0
   2ac0c:	mov	r4, r0
   2ac10:	ldrsh	r5, [r2, r3]
   2ac14:	ldr	r0, [sp, #16]
   2ac18:	ldr	ip, [sp, #20]
   2ac1c:	ldr	r6, [sp, #24]
   2ac20:	beq	2ac38 <flatcc_json_printer_int16_enum_struct_field@@Base+0x34>
   2ac24:	ldr	r3, [r4, #20]
   2ac28:	add	r2, r3, #1
   2ac2c:	str	r2, [r4, #20]
   2ac30:	mov	r2, #44	; 0x2c
   2ac34:	strb	r2, [r3]
   2ac38:	mov	r1, r0
   2ac3c:	mov	r2, ip
   2ac40:	mov	r0, r4
   2ac44:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2ac48:	ldrb	r3, [r4, #27]
   2ac4c:	cmp	r3, #0
   2ac50:	beq	2ac70 <flatcc_json_printer_int16_enum_struct_field@@Base+0x6c>
   2ac54:	mov	r0, r5
   2ac58:	ldr	r1, [r4, #20]
   2ac5c:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   2ac60:	ldr	r3, [r4, #20]
   2ac64:	add	r0, r3, r0
   2ac68:	str	r0, [r4, #20]
   2ac6c:	pop	{r4, r5, r6, pc}
   2ac70:	mov	r1, r5
   2ac74:	mov	r0, r4
   2ac78:	mov	r3, r6
   2ac7c:	pop	{r4, r5, r6, lr}
   2ac80:	bx	r3

0002ac84 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2ac84:	push	{r4, r5, r6, lr}
   2ac88:	cmp	r1, #0
   2ac8c:	mov	r4, r0
   2ac90:	ldr	r5, [r2, r3]
   2ac94:	ldr	r0, [sp, #16]
   2ac98:	ldr	ip, [sp, #20]
   2ac9c:	ldr	r6, [sp, #24]
   2aca0:	beq	2acb8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x34>
   2aca4:	ldr	r3, [r4, #20]
   2aca8:	add	r2, r3, #1
   2acac:	str	r2, [r4, #20]
   2acb0:	mov	r2, #44	; 0x2c
   2acb4:	strb	r2, [r3]
   2acb8:	mov	r1, r0
   2acbc:	mov	r2, ip
   2acc0:	mov	r0, r4
   2acc4:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2acc8:	ldrb	r3, [r4, #27]
   2accc:	cmp	r3, #0
   2acd0:	beq	2acf0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x6c>
   2acd4:	mov	r0, r5
   2acd8:	ldr	r1, [r4, #20]
   2acdc:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   2ace0:	ldr	r3, [r4, #20]
   2ace4:	add	r0, r3, r0
   2ace8:	str	r0, [r4, #20]
   2acec:	pop	{r4, r5, r6, pc}
   2acf0:	mov	r1, r5
   2acf4:	mov	r0, r4
   2acf8:	mov	r3, r6
   2acfc:	pop	{r4, r5, r6, lr}
   2ad00:	bx	r3

0002ad04 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2ad04:	push	{r4, r5, r6, r7, r8, lr}
   2ad08:	cmp	r1, #0
   2ad0c:	mov	r4, r0
   2ad10:	ldrd	r6, [r2, r3]
   2ad14:	ldr	r0, [sp, #24]
   2ad18:	ldr	ip, [sp, #28]
   2ad1c:	ldr	r5, [sp, #32]
   2ad20:	beq	2ad38 <flatcc_json_printer_int64_enum_struct_field@@Base+0x34>
   2ad24:	ldr	r3, [r4, #20]
   2ad28:	add	r2, r3, #1
   2ad2c:	str	r2, [r4, #20]
   2ad30:	mov	r2, #44	; 0x2c
   2ad34:	strb	r2, [r3]
   2ad38:	mov	r1, r0
   2ad3c:	mov	r2, ip
   2ad40:	mov	r0, r4
   2ad44:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2ad48:	ldrb	r3, [r4, #27]
   2ad4c:	cmp	r3, #0
   2ad50:	beq	2ad74 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   2ad54:	mov	r0, r6
   2ad58:	mov	r1, r7
   2ad5c:	ldr	r2, [r4, #20]
   2ad60:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   2ad64:	ldr	r3, [r4, #20]
   2ad68:	add	r0, r3, r0
   2ad6c:	str	r0, [r4, #20]
   2ad70:	pop	{r4, r5, r6, r7, r8, pc}
   2ad74:	mov	r2, r6
   2ad78:	mov	r3, r7
   2ad7c:	mov	r0, r4
   2ad80:	mov	r1, r5
   2ad84:	pop	{r4, r5, r6, r7, r8, lr}
   2ad88:	bx	r1

0002ad8c <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2ad8c:	push	{r4, r5, r6, lr}
   2ad90:	cmp	r1, #0
   2ad94:	mov	r4, r0
   2ad98:	ldrb	r5, [r2, r3]
   2ad9c:	ldr	r0, [sp, #16]
   2ada0:	ldr	ip, [sp, #20]
   2ada4:	ldr	r6, [sp, #24]
   2ada8:	beq	2adc0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x34>
   2adac:	ldr	r3, [r4, #20]
   2adb0:	add	r2, r3, #1
   2adb4:	str	r2, [r4, #20]
   2adb8:	mov	r2, #44	; 0x2c
   2adbc:	strb	r2, [r3]
   2adc0:	mov	r1, r0
   2adc4:	mov	r2, ip
   2adc8:	mov	r0, r4
   2adcc:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2add0:	ldrb	r3, [r4, #27]
   2add4:	cmp	r3, #0
   2add8:	beq	2adf8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x6c>
   2addc:	mov	r0, r5
   2ade0:	ldr	r1, [r4, #20]
   2ade4:	bl	28620 <flatcc_json_parser_struct_as_root@@Base+0x1504>
   2ade8:	ldr	r3, [r4, #20]
   2adec:	add	r0, r3, r0
   2adf0:	str	r0, [r4, #20]
   2adf4:	pop	{r4, r5, r6, pc}
   2adf8:	mov	r1, r5
   2adfc:	mov	r0, r4
   2ae00:	mov	r3, r6
   2ae04:	pop	{r4, r5, r6, lr}
   2ae08:	bx	r3

0002ae0c <flatcc_json_printer_uint8_vector_field@@Base>:
   2ae0c:	push	{r4, r5, r6, r7, r8, lr}
   2ae10:	mov	r5, r1
   2ae14:	mov	r4, r0
   2ae18:	mov	r1, r2
   2ae1c:	mov	r0, r5
   2ae20:	mov	r8, r3
   2ae24:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2ae28:	cmp	r0, #0
   2ae2c:	popeq	{r4, r5, r6, r7, r8, pc}
   2ae30:	ldr	r3, [r5, #16]
   2ae34:	add	r2, r3, #1
   2ae38:	cmp	r3, #0
   2ae3c:	str	r2, [r5, #16]
   2ae40:	beq	2ae58 <flatcc_json_printer_uint8_vector_field@@Base+0x4c>
   2ae44:	ldr	r2, [r4, #20]
   2ae48:	add	r3, r2, #1
   2ae4c:	str	r3, [r4, #20]
   2ae50:	mov	r3, #44	; 0x2c
   2ae54:	strb	r3, [r2]
   2ae58:	ldr	r2, [r0]
   2ae5c:	mov	r1, r8
   2ae60:	add	r7, r0, r2
   2ae64:	ldr	r5, [r0, r2]
   2ae68:	mov	r0, r4
   2ae6c:	add	r6, r7, #4
   2ae70:	ldr	r2, [sp, #24]
   2ae74:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2ae78:	ldr	r3, [r4, #32]
   2ae7c:	cmp	r5, #0
   2ae80:	add	r3, r3, #1
   2ae84:	str	r3, [r4, #32]
   2ae88:	ldr	r3, [r4, #20]
   2ae8c:	add	r2, r3, #1
   2ae90:	str	r2, [r4, #20]
   2ae94:	mov	r2, #91	; 0x5b
   2ae98:	strb	r2, [r3]
   2ae9c:	beq	2aee8 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   2aea0:	ldrb	r3, [r4, #25]
   2aea4:	cmp	r3, #0
   2aea8:	beq	2af48 <flatcc_json_printer_uint8_vector_field@@Base+0x13c>
   2aeac:	ldr	r3, [r4, #20]
   2aeb0:	mov	r0, r4
   2aeb4:	add	r2, r3, #1
   2aeb8:	str	r2, [r4, #20]
   2aebc:	mov	r2, #10
   2aec0:	strb	r2, [r3]
   2aec4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2aec8:	ldrb	r0, [r7, #4]
   2aecc:	add	r6, r7, #5
   2aed0:	sub	r5, r5, #1
   2aed4:	ldr	r1, [r4, #20]
   2aed8:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   2aedc:	ldr	r3, [r4, #20]
   2aee0:	add	r0, r3, r0
   2aee4:	str	r0, [r4, #20]
   2aee8:	add	r5, r6, r5
   2aeec:	mov	r7, #44	; 0x2c
   2aef0:	mov	r8, #10
   2aef4:	ldr	r3, [r4, #20]
   2aef8:	cmp	r6, r5
   2aefc:	add	r2, r3, #1
   2af00:	bne	2af54 <flatcc_json_printer_uint8_vector_field@@Base+0x148>
   2af04:	ldrb	r1, [r4, #25]
   2af08:	cmp	r1, #0
   2af0c:	beq	2af30 <flatcc_json_printer_uint8_vector_field@@Base+0x124>
   2af10:	str	r2, [r4, #20]
   2af14:	mov	r2, #10
   2af18:	mov	r0, r4
   2af1c:	strb	r2, [r3]
   2af20:	ldr	r3, [r4, #32]
   2af24:	sub	r3, r3, #1
   2af28:	str	r3, [r4, #32]
   2af2c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2af30:	ldr	r3, [r4, #20]
   2af34:	add	r2, r3, #1
   2af38:	str	r2, [r4, #20]
   2af3c:	mov	r2, #93	; 0x5d
   2af40:	strb	r2, [r3]
   2af44:	pop	{r4, r5, r6, r7, r8, pc}
   2af48:	mov	r0, r4
   2af4c:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2af50:	b	2aec8 <flatcc_json_printer_uint8_vector_field@@Base+0xbc>
   2af54:	str	r2, [r4, #20]
   2af58:	strb	r7, [r3]
   2af5c:	ldrb	r3, [r4, #25]
   2af60:	cmp	r3, #0
   2af64:	beq	2af9c <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   2af68:	ldr	r3, [r4, #20]
   2af6c:	mov	r0, r4
   2af70:	add	r2, r3, #1
   2af74:	str	r2, [r4, #20]
   2af78:	strb	r8, [r3]
   2af7c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2af80:	ldrb	r0, [r6], #1
   2af84:	ldr	r1, [r4, #20]
   2af88:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   2af8c:	ldr	r3, [r4, #20]
   2af90:	add	r0, r3, r0
   2af94:	str	r0, [r4, #20]
   2af98:	b	2aef4 <flatcc_json_printer_uint8_vector_field@@Base+0xe8>
   2af9c:	mov	r0, r4
   2afa0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2afa4:	b	2af80 <flatcc_json_printer_uint8_vector_field@@Base+0x174>

0002afa8 <flatcc_json_printer_utype_vector_field@@Base>:
   2afa8:	b	2ae0c <flatcc_json_printer_uint8_vector_field@@Base>

0002afac <flatcc_json_printer_uint16_vector_field@@Base>:
   2afac:	push	{r4, r5, r6, r7, r8, lr}
   2afb0:	mov	r5, r1
   2afb4:	mov	r4, r0
   2afb8:	mov	r1, r2
   2afbc:	mov	r0, r5
   2afc0:	mov	r8, r3
   2afc4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2afc8:	cmp	r0, #0
   2afcc:	popeq	{r4, r5, r6, r7, r8, pc}
   2afd0:	ldr	r3, [r5, #16]
   2afd4:	add	r2, r3, #1
   2afd8:	cmp	r3, #0
   2afdc:	str	r2, [r5, #16]
   2afe0:	beq	2aff8 <flatcc_json_printer_uint16_vector_field@@Base+0x4c>
   2afe4:	ldr	r2, [r4, #20]
   2afe8:	add	r3, r2, #1
   2afec:	str	r3, [r4, #20]
   2aff0:	mov	r3, #44	; 0x2c
   2aff4:	strb	r3, [r2]
   2aff8:	ldr	r2, [r0]
   2affc:	mov	r1, r8
   2b000:	add	r7, r0, r2
   2b004:	ldr	r5, [r0, r2]
   2b008:	mov	r0, r4
   2b00c:	add	r6, r7, #4
   2b010:	ldr	r2, [sp, #24]
   2b014:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b018:	ldr	r3, [r4, #32]
   2b01c:	cmp	r5, #0
   2b020:	add	r3, r3, #1
   2b024:	str	r3, [r4, #32]
   2b028:	ldr	r3, [r4, #20]
   2b02c:	add	r2, r3, #1
   2b030:	str	r2, [r4, #20]
   2b034:	mov	r2, #91	; 0x5b
   2b038:	strb	r2, [r3]
   2b03c:	beq	2b088 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   2b040:	ldrb	r3, [r4, #25]
   2b044:	cmp	r3, #0
   2b048:	beq	2b0e8 <flatcc_json_printer_uint16_vector_field@@Base+0x13c>
   2b04c:	ldr	r3, [r4, #20]
   2b050:	mov	r0, r4
   2b054:	add	r2, r3, #1
   2b058:	str	r2, [r4, #20]
   2b05c:	mov	r2, #10
   2b060:	strb	r2, [r3]
   2b064:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b068:	ldrh	r0, [r7, #4]
   2b06c:	add	r6, r7, #6
   2b070:	sub	r5, r5, #1
   2b074:	ldr	r1, [r4, #20]
   2b078:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   2b07c:	ldr	r3, [r4, #20]
   2b080:	add	r0, r3, r0
   2b084:	str	r0, [r4, #20]
   2b088:	mov	r7, #44	; 0x2c
   2b08c:	mov	r8, #10
   2b090:	ldr	r3, [r4, #20]
   2b094:	sub	r5, r5, #1
   2b098:	cmn	r5, #1
   2b09c:	add	r2, r3, #1
   2b0a0:	bne	2b0f4 <flatcc_json_printer_uint16_vector_field@@Base+0x148>
   2b0a4:	ldrb	r1, [r4, #25]
   2b0a8:	cmp	r1, #0
   2b0ac:	beq	2b0d0 <flatcc_json_printer_uint16_vector_field@@Base+0x124>
   2b0b0:	str	r2, [r4, #20]
   2b0b4:	mov	r2, #10
   2b0b8:	mov	r0, r4
   2b0bc:	strb	r2, [r3]
   2b0c0:	ldr	r3, [r4, #32]
   2b0c4:	sub	r3, r3, #1
   2b0c8:	str	r3, [r4, #32]
   2b0cc:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b0d0:	ldr	r3, [r4, #20]
   2b0d4:	add	r2, r3, #1
   2b0d8:	str	r2, [r4, #20]
   2b0dc:	mov	r2, #93	; 0x5d
   2b0e0:	strb	r2, [r3]
   2b0e4:	pop	{r4, r5, r6, r7, r8, pc}
   2b0e8:	mov	r0, r4
   2b0ec:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b0f0:	b	2b068 <flatcc_json_printer_uint16_vector_field@@Base+0xbc>
   2b0f4:	str	r2, [r4, #20]
   2b0f8:	strb	r7, [r3]
   2b0fc:	ldrb	r3, [r4, #25]
   2b100:	cmp	r3, #0
   2b104:	beq	2b13c <flatcc_json_printer_uint16_vector_field@@Base+0x190>
   2b108:	ldr	r3, [r4, #20]
   2b10c:	mov	r0, r4
   2b110:	add	r2, r3, #1
   2b114:	str	r2, [r4, #20]
   2b118:	strb	r8, [r3]
   2b11c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b120:	ldrh	r0, [r6], #2
   2b124:	ldr	r1, [r4, #20]
   2b128:	bl	27120 <flatcc_json_parser_struct_as_root@@Base+0x4>
   2b12c:	ldr	r3, [r4, #20]
   2b130:	add	r0, r3, r0
   2b134:	str	r0, [r4, #20]
   2b138:	b	2b090 <flatcc_json_printer_uint16_vector_field@@Base+0xe4>
   2b13c:	mov	r0, r4
   2b140:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b144:	b	2b120 <flatcc_json_printer_uint16_vector_field@@Base+0x174>

0002b148 <flatcc_json_printer_uint32_vector_field@@Base>:
   2b148:	push	{r4, r5, r6, r7, r8, lr}
   2b14c:	mov	r5, r1
   2b150:	mov	r4, r0
   2b154:	mov	r1, r2
   2b158:	mov	r0, r5
   2b15c:	mov	r8, r3
   2b160:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2b164:	cmp	r0, #0
   2b168:	popeq	{r4, r5, r6, r7, r8, pc}
   2b16c:	ldr	r3, [r5, #16]
   2b170:	add	r2, r3, #1
   2b174:	cmp	r3, #0
   2b178:	str	r2, [r5, #16]
   2b17c:	beq	2b194 <flatcc_json_printer_uint32_vector_field@@Base+0x4c>
   2b180:	ldr	r2, [r4, #20]
   2b184:	add	r3, r2, #1
   2b188:	str	r3, [r4, #20]
   2b18c:	mov	r3, #44	; 0x2c
   2b190:	strb	r3, [r2]
   2b194:	ldr	r2, [r0]
   2b198:	mov	r1, r8
   2b19c:	add	r7, r0, r2
   2b1a0:	ldr	r5, [r0, r2]
   2b1a4:	mov	r0, r4
   2b1a8:	add	r6, r7, #4
   2b1ac:	ldr	r2, [sp, #24]
   2b1b0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b1b4:	ldr	r3, [r4, #32]
   2b1b8:	cmp	r5, #0
   2b1bc:	add	r3, r3, #1
   2b1c0:	str	r3, [r4, #32]
   2b1c4:	ldr	r3, [r4, #20]
   2b1c8:	add	r2, r3, #1
   2b1cc:	str	r2, [r4, #20]
   2b1d0:	mov	r2, #91	; 0x5b
   2b1d4:	strb	r2, [r3]
   2b1d8:	beq	2b224 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   2b1dc:	ldrb	r3, [r4, #25]
   2b1e0:	cmp	r3, #0
   2b1e4:	beq	2b284 <flatcc_json_printer_uint32_vector_field@@Base+0x13c>
   2b1e8:	ldr	r3, [r4, #20]
   2b1ec:	mov	r0, r4
   2b1f0:	add	r2, r3, #1
   2b1f4:	str	r2, [r4, #20]
   2b1f8:	mov	r2, #10
   2b1fc:	strb	r2, [r3]
   2b200:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b204:	ldr	r0, [r7, #4]
   2b208:	add	r6, r7, #8
   2b20c:	sub	r5, r5, #1
   2b210:	ldr	r1, [r4, #20]
   2b214:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   2b218:	ldr	r3, [r4, #20]
   2b21c:	add	r0, r3, r0
   2b220:	str	r0, [r4, #20]
   2b224:	mov	r7, #44	; 0x2c
   2b228:	mov	r8, #10
   2b22c:	ldr	r3, [r4, #20]
   2b230:	sub	r5, r5, #1
   2b234:	cmn	r5, #1
   2b238:	add	r2, r3, #1
   2b23c:	bne	2b290 <flatcc_json_printer_uint32_vector_field@@Base+0x148>
   2b240:	ldrb	r1, [r4, #25]
   2b244:	cmp	r1, #0
   2b248:	beq	2b26c <flatcc_json_printer_uint32_vector_field@@Base+0x124>
   2b24c:	str	r2, [r4, #20]
   2b250:	mov	r2, #10
   2b254:	mov	r0, r4
   2b258:	strb	r2, [r3]
   2b25c:	ldr	r3, [r4, #32]
   2b260:	sub	r3, r3, #1
   2b264:	str	r3, [r4, #32]
   2b268:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b26c:	ldr	r3, [r4, #20]
   2b270:	add	r2, r3, #1
   2b274:	str	r2, [r4, #20]
   2b278:	mov	r2, #93	; 0x5d
   2b27c:	strb	r2, [r3]
   2b280:	pop	{r4, r5, r6, r7, r8, pc}
   2b284:	mov	r0, r4
   2b288:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b28c:	b	2b204 <flatcc_json_printer_uint32_vector_field@@Base+0xbc>
   2b290:	str	r2, [r4, #20]
   2b294:	strb	r7, [r3]
   2b298:	ldrb	r3, [r4, #25]
   2b29c:	cmp	r3, #0
   2b2a0:	beq	2b2d8 <flatcc_json_printer_uint32_vector_field@@Base+0x190>
   2b2a4:	ldr	r3, [r4, #20]
   2b2a8:	mov	r0, r4
   2b2ac:	add	r2, r3, #1
   2b2b0:	str	r2, [r4, #20]
   2b2b4:	strb	r8, [r3]
   2b2b8:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b2bc:	ldr	r0, [r6], #4
   2b2c0:	ldr	r1, [r4, #20]
   2b2c4:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0x148>
   2b2c8:	ldr	r3, [r4, #20]
   2b2cc:	add	r0, r3, r0
   2b2d0:	str	r0, [r4, #20]
   2b2d4:	b	2b22c <flatcc_json_printer_uint32_vector_field@@Base+0xe4>
   2b2d8:	mov	r0, r4
   2b2dc:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b2e0:	b	2b2bc <flatcc_json_printer_uint32_vector_field@@Base+0x174>

0002b2e4 <flatcc_json_printer_uint64_vector_field@@Base>:
   2b2e4:	push	{r4, r5, r6, r7, r8, lr}
   2b2e8:	mov	r5, r1
   2b2ec:	mov	r4, r0
   2b2f0:	mov	r1, r2
   2b2f4:	mov	r0, r5
   2b2f8:	mov	r8, r3
   2b2fc:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2b300:	cmp	r0, #0
   2b304:	popeq	{r4, r5, r6, r7, r8, pc}
   2b308:	ldr	r3, [r5, #16]
   2b30c:	add	r2, r3, #1
   2b310:	cmp	r3, #0
   2b314:	str	r2, [r5, #16]
   2b318:	beq	2b330 <flatcc_json_printer_uint64_vector_field@@Base+0x4c>
   2b31c:	ldr	r2, [r4, #20]
   2b320:	add	r3, r2, #1
   2b324:	str	r3, [r4, #20]
   2b328:	mov	r3, #44	; 0x2c
   2b32c:	strb	r3, [r2]
   2b330:	ldr	r2, [r0]
   2b334:	mov	r1, r8
   2b338:	add	r7, r0, r2
   2b33c:	ldr	r5, [r0, r2]
   2b340:	mov	r0, r4
   2b344:	add	r6, r7, #4
   2b348:	ldr	r2, [sp, #24]
   2b34c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b350:	ldr	r3, [r4, #32]
   2b354:	cmp	r5, #0
   2b358:	add	r3, r3, #1
   2b35c:	str	r3, [r4, #32]
   2b360:	ldr	r3, [r4, #20]
   2b364:	add	r2, r3, #1
   2b368:	str	r2, [r4, #20]
   2b36c:	mov	r2, #91	; 0x5b
   2b370:	strb	r2, [r3]
   2b374:	beq	2b3c0 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   2b378:	ldrb	r3, [r4, #25]
   2b37c:	cmp	r3, #0
   2b380:	beq	2b420 <flatcc_json_printer_uint64_vector_field@@Base+0x13c>
   2b384:	ldr	r3, [r4, #20]
   2b388:	mov	r0, r4
   2b38c:	add	r2, r3, #1
   2b390:	str	r2, [r4, #20]
   2b394:	mov	r2, #10
   2b398:	strb	r2, [r3]
   2b39c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b3a0:	ldrd	r0, [r7, #4]
   2b3a4:	add	r6, r7, #12
   2b3a8:	sub	r5, r5, #1
   2b3ac:	ldr	r2, [r4, #20]
   2b3b0:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   2b3b4:	ldr	r3, [r4, #20]
   2b3b8:	add	r0, r3, r0
   2b3bc:	str	r0, [r4, #20]
   2b3c0:	mov	r7, #44	; 0x2c
   2b3c4:	mov	r8, #10
   2b3c8:	ldr	r3, [r4, #20]
   2b3cc:	sub	r5, r5, #1
   2b3d0:	cmn	r5, #1
   2b3d4:	add	r2, r3, #1
   2b3d8:	bne	2b42c <flatcc_json_printer_uint64_vector_field@@Base+0x148>
   2b3dc:	ldrb	r1, [r4, #25]
   2b3e0:	cmp	r1, #0
   2b3e4:	beq	2b408 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   2b3e8:	str	r2, [r4, #20]
   2b3ec:	mov	r2, #10
   2b3f0:	mov	r0, r4
   2b3f4:	strb	r2, [r3]
   2b3f8:	ldr	r3, [r4, #32]
   2b3fc:	sub	r3, r3, #1
   2b400:	str	r3, [r4, #32]
   2b404:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b408:	ldr	r3, [r4, #20]
   2b40c:	add	r2, r3, #1
   2b410:	str	r2, [r4, #20]
   2b414:	mov	r2, #93	; 0x5d
   2b418:	strb	r2, [r3]
   2b41c:	pop	{r4, r5, r6, r7, r8, pc}
   2b420:	mov	r0, r4
   2b424:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b428:	b	2b3a0 <flatcc_json_printer_uint64_vector_field@@Base+0xbc>
   2b42c:	str	r2, [r4, #20]
   2b430:	strb	r7, [r3]
   2b434:	ldrb	r3, [r4, #25]
   2b438:	cmp	r3, #0
   2b43c:	beq	2b474 <flatcc_json_printer_uint64_vector_field@@Base+0x190>
   2b440:	ldr	r3, [r4, #20]
   2b444:	mov	r0, r4
   2b448:	add	r2, r3, #1
   2b44c:	str	r2, [r4, #20]
   2b450:	strb	r8, [r3]
   2b454:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b458:	ldrd	r0, [r6], #8
   2b45c:	ldr	r2, [r4, #20]
   2b460:	bl	27514 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   2b464:	ldr	r3, [r4, #20]
   2b468:	add	r0, r3, r0
   2b46c:	str	r0, [r4, #20]
   2b470:	b	2b3c8 <flatcc_json_printer_uint64_vector_field@@Base+0xe4>
   2b474:	mov	r0, r4
   2b478:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b47c:	b	2b458 <flatcc_json_printer_uint64_vector_field@@Base+0x174>

0002b480 <flatcc_json_printer_int8_vector_field@@Base>:
   2b480:	push	{r4, r5, r6, r7, r8, lr}
   2b484:	mov	r5, r1
   2b488:	mov	r4, r0
   2b48c:	mov	r1, r2
   2b490:	mov	r0, r5
   2b494:	mov	r8, r3
   2b498:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2b49c:	cmp	r0, #0
   2b4a0:	popeq	{r4, r5, r6, r7, r8, pc}
   2b4a4:	ldr	r3, [r5, #16]
   2b4a8:	add	r2, r3, #1
   2b4ac:	cmp	r3, #0
   2b4b0:	str	r2, [r5, #16]
   2b4b4:	beq	2b4cc <flatcc_json_printer_int8_vector_field@@Base+0x4c>
   2b4b8:	ldr	r2, [r4, #20]
   2b4bc:	add	r3, r2, #1
   2b4c0:	str	r3, [r4, #20]
   2b4c4:	mov	r3, #44	; 0x2c
   2b4c8:	strb	r3, [r2]
   2b4cc:	ldr	r2, [r0]
   2b4d0:	mov	r1, r8
   2b4d4:	add	r7, r0, r2
   2b4d8:	ldr	r5, [r0, r2]
   2b4dc:	mov	r0, r4
   2b4e0:	add	r6, r7, #4
   2b4e4:	ldr	r2, [sp, #24]
   2b4e8:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b4ec:	ldr	r3, [r4, #32]
   2b4f0:	cmp	r5, #0
   2b4f4:	add	r3, r3, #1
   2b4f8:	str	r3, [r4, #32]
   2b4fc:	ldr	r3, [r4, #20]
   2b500:	add	r2, r3, #1
   2b504:	str	r2, [r4, #20]
   2b508:	mov	r2, #91	; 0x5b
   2b50c:	strb	r2, [r3]
   2b510:	beq	2b55c <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   2b514:	ldrb	r3, [r4, #25]
   2b518:	cmp	r3, #0
   2b51c:	beq	2b5bc <flatcc_json_printer_int8_vector_field@@Base+0x13c>
   2b520:	ldr	r3, [r4, #20]
   2b524:	mov	r0, r4
   2b528:	add	r2, r3, #1
   2b52c:	str	r2, [r4, #20]
   2b530:	mov	r2, #10
   2b534:	strb	r2, [r3]
   2b538:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b53c:	ldrsb	r0, [r7, #4]
   2b540:	add	r6, r7, #5
   2b544:	sub	r5, r5, #1
   2b548:	ldr	r1, [r4, #20]
   2b54c:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   2b550:	ldr	r3, [r4, #20]
   2b554:	add	r0, r3, r0
   2b558:	str	r0, [r4, #20]
   2b55c:	add	r5, r6, r5
   2b560:	mov	r7, #44	; 0x2c
   2b564:	mov	r8, #10
   2b568:	ldr	r3, [r4, #20]
   2b56c:	cmp	r6, r5
   2b570:	add	r2, r3, #1
   2b574:	bne	2b5c8 <flatcc_json_printer_int8_vector_field@@Base+0x148>
   2b578:	ldrb	r1, [r4, #25]
   2b57c:	cmp	r1, #0
   2b580:	beq	2b5a4 <flatcc_json_printer_int8_vector_field@@Base+0x124>
   2b584:	str	r2, [r4, #20]
   2b588:	mov	r2, #10
   2b58c:	mov	r0, r4
   2b590:	strb	r2, [r3]
   2b594:	ldr	r3, [r4, #32]
   2b598:	sub	r3, r3, #1
   2b59c:	str	r3, [r4, #32]
   2b5a0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b5a4:	ldr	r3, [r4, #20]
   2b5a8:	add	r2, r3, #1
   2b5ac:	str	r2, [r4, #20]
   2b5b0:	mov	r2, #93	; 0x5d
   2b5b4:	strb	r2, [r3]
   2b5b8:	pop	{r4, r5, r6, r7, r8, pc}
   2b5bc:	mov	r0, r4
   2b5c0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b5c4:	b	2b53c <flatcc_json_printer_int8_vector_field@@Base+0xbc>
   2b5c8:	str	r2, [r4, #20]
   2b5cc:	strb	r7, [r3]
   2b5d0:	ldrb	r3, [r4, #25]
   2b5d4:	cmp	r3, #0
   2b5d8:	beq	2b610 <flatcc_json_printer_int8_vector_field@@Base+0x190>
   2b5dc:	ldr	r3, [r4, #20]
   2b5e0:	mov	r0, r4
   2b5e4:	add	r2, r3, #1
   2b5e8:	str	r2, [r4, #20]
   2b5ec:	strb	r8, [r3]
   2b5f0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b5f4:	ldrsb	r0, [r6], #1
   2b5f8:	ldr	r1, [r4, #20]
   2b5fc:	bl	28518 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   2b600:	ldr	r3, [r4, #20]
   2b604:	add	r0, r3, r0
   2b608:	str	r0, [r4, #20]
   2b60c:	b	2b568 <flatcc_json_printer_int8_vector_field@@Base+0xe8>
   2b610:	mov	r0, r4
   2b614:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b618:	b	2b5f4 <flatcc_json_printer_int8_vector_field@@Base+0x174>

0002b61c <flatcc_json_printer_int16_vector_field@@Base>:
   2b61c:	push	{r4, r5, r6, r7, r8, lr}
   2b620:	mov	r5, r1
   2b624:	mov	r4, r0
   2b628:	mov	r1, r2
   2b62c:	mov	r0, r5
   2b630:	mov	r8, r3
   2b634:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2b638:	cmp	r0, #0
   2b63c:	popeq	{r4, r5, r6, r7, r8, pc}
   2b640:	ldr	r3, [r5, #16]
   2b644:	add	r2, r3, #1
   2b648:	cmp	r3, #0
   2b64c:	str	r2, [r5, #16]
   2b650:	beq	2b668 <flatcc_json_printer_int16_vector_field@@Base+0x4c>
   2b654:	ldr	r2, [r4, #20]
   2b658:	add	r3, r2, #1
   2b65c:	str	r3, [r4, #20]
   2b660:	mov	r3, #44	; 0x2c
   2b664:	strb	r3, [r2]
   2b668:	ldr	r2, [r0]
   2b66c:	mov	r1, r8
   2b670:	add	r7, r0, r2
   2b674:	ldr	r5, [r0, r2]
   2b678:	mov	r0, r4
   2b67c:	add	r6, r7, #4
   2b680:	ldr	r2, [sp, #24]
   2b684:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b688:	ldr	r3, [r4, #32]
   2b68c:	cmp	r5, #0
   2b690:	add	r3, r3, #1
   2b694:	str	r3, [r4, #32]
   2b698:	ldr	r3, [r4, #20]
   2b69c:	add	r2, r3, #1
   2b6a0:	str	r2, [r4, #20]
   2b6a4:	mov	r2, #91	; 0x5b
   2b6a8:	strb	r2, [r3]
   2b6ac:	beq	2b6f8 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   2b6b0:	ldrb	r3, [r4, #25]
   2b6b4:	cmp	r3, #0
   2b6b8:	beq	2b758 <flatcc_json_printer_int16_vector_field@@Base+0x13c>
   2b6bc:	ldr	r3, [r4, #20]
   2b6c0:	mov	r0, r4
   2b6c4:	add	r2, r3, #1
   2b6c8:	str	r2, [r4, #20]
   2b6cc:	mov	r2, #10
   2b6d0:	strb	r2, [r3]
   2b6d4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b6d8:	ldrsh	r0, [r7, #4]
   2b6dc:	add	r6, r7, #6
   2b6e0:	sub	r5, r5, #1
   2b6e4:	ldr	r1, [r4, #20]
   2b6e8:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   2b6ec:	ldr	r3, [r4, #20]
   2b6f0:	add	r0, r3, r0
   2b6f4:	str	r0, [r4, #20]
   2b6f8:	mov	r7, #44	; 0x2c
   2b6fc:	mov	r8, #10
   2b700:	ldr	r3, [r4, #20]
   2b704:	sub	r5, r5, #1
   2b708:	cmn	r5, #1
   2b70c:	add	r2, r3, #1
   2b710:	bne	2b764 <flatcc_json_printer_int16_vector_field@@Base+0x148>
   2b714:	ldrb	r1, [r4, #25]
   2b718:	cmp	r1, #0
   2b71c:	beq	2b740 <flatcc_json_printer_int16_vector_field@@Base+0x124>
   2b720:	str	r2, [r4, #20]
   2b724:	mov	r2, #10
   2b728:	mov	r0, r4
   2b72c:	strb	r2, [r3]
   2b730:	ldr	r3, [r4, #32]
   2b734:	sub	r3, r3, #1
   2b738:	str	r3, [r4, #32]
   2b73c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b740:	ldr	r3, [r4, #20]
   2b744:	add	r2, r3, #1
   2b748:	str	r2, [r4, #20]
   2b74c:	mov	r2, #93	; 0x5d
   2b750:	strb	r2, [r3]
   2b754:	pop	{r4, r5, r6, r7, r8, pc}
   2b758:	mov	r0, r4
   2b75c:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b760:	b	2b6d8 <flatcc_json_printer_int16_vector_field@@Base+0xbc>
   2b764:	str	r2, [r4, #20]
   2b768:	strb	r7, [r3]
   2b76c:	ldrb	r3, [r4, #25]
   2b770:	cmp	r3, #0
   2b774:	beq	2b7ac <flatcc_json_printer_int16_vector_field@@Base+0x190>
   2b778:	ldr	r3, [r4, #20]
   2b77c:	mov	r0, r4
   2b780:	add	r2, r3, #1
   2b784:	str	r2, [r4, #20]
   2b788:	strb	r8, [r3]
   2b78c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b790:	ldrsh	r0, [r6], #2
   2b794:	ldr	r1, [r4, #20]
   2b798:	bl	27b54 <flatcc_json_parser_struct_as_root@@Base+0xa38>
   2b79c:	ldr	r3, [r4, #20]
   2b7a0:	add	r0, r3, r0
   2b7a4:	str	r0, [r4, #20]
   2b7a8:	b	2b700 <flatcc_json_printer_int16_vector_field@@Base+0xe4>
   2b7ac:	mov	r0, r4
   2b7b0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b7b4:	b	2b790 <flatcc_json_printer_int16_vector_field@@Base+0x174>

0002b7b8 <flatcc_json_printer_int32_vector_field@@Base>:
   2b7b8:	push	{r4, r5, r6, r7, r8, lr}
   2b7bc:	mov	r5, r1
   2b7c0:	mov	r4, r0
   2b7c4:	mov	r1, r2
   2b7c8:	mov	r0, r5
   2b7cc:	mov	r8, r3
   2b7d0:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2b7d4:	cmp	r0, #0
   2b7d8:	popeq	{r4, r5, r6, r7, r8, pc}
   2b7dc:	ldr	r3, [r5, #16]
   2b7e0:	add	r2, r3, #1
   2b7e4:	cmp	r3, #0
   2b7e8:	str	r2, [r5, #16]
   2b7ec:	beq	2b804 <flatcc_json_printer_int32_vector_field@@Base+0x4c>
   2b7f0:	ldr	r2, [r4, #20]
   2b7f4:	add	r3, r2, #1
   2b7f8:	str	r3, [r4, #20]
   2b7fc:	mov	r3, #44	; 0x2c
   2b800:	strb	r3, [r2]
   2b804:	ldr	r2, [r0]
   2b808:	mov	r1, r8
   2b80c:	add	r7, r0, r2
   2b810:	ldr	r5, [r0, r2]
   2b814:	mov	r0, r4
   2b818:	add	r6, r7, #4
   2b81c:	ldr	r2, [sp, #24]
   2b820:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b824:	ldr	r3, [r4, #32]
   2b828:	cmp	r5, #0
   2b82c:	add	r3, r3, #1
   2b830:	str	r3, [r4, #32]
   2b834:	ldr	r3, [r4, #20]
   2b838:	add	r2, r3, #1
   2b83c:	str	r2, [r4, #20]
   2b840:	mov	r2, #91	; 0x5b
   2b844:	strb	r2, [r3]
   2b848:	beq	2b894 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   2b84c:	ldrb	r3, [r4, #25]
   2b850:	cmp	r3, #0
   2b854:	beq	2b8f4 <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   2b858:	ldr	r3, [r4, #20]
   2b85c:	mov	r0, r4
   2b860:	add	r2, r3, #1
   2b864:	str	r2, [r4, #20]
   2b868:	mov	r2, #10
   2b86c:	strb	r2, [r3]
   2b870:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b874:	ldr	r0, [r7, #4]
   2b878:	add	r6, r7, #8
   2b87c:	sub	r5, r5, #1
   2b880:	ldr	r1, [r4, #20]
   2b884:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   2b888:	ldr	r3, [r4, #20]
   2b88c:	add	r0, r3, r0
   2b890:	str	r0, [r4, #20]
   2b894:	mov	r7, #44	; 0x2c
   2b898:	mov	r8, #10
   2b89c:	ldr	r3, [r4, #20]
   2b8a0:	sub	r5, r5, #1
   2b8a4:	cmn	r5, #1
   2b8a8:	add	r2, r3, #1
   2b8ac:	bne	2b900 <flatcc_json_printer_int32_vector_field@@Base+0x148>
   2b8b0:	ldrb	r1, [r4, #25]
   2b8b4:	cmp	r1, #0
   2b8b8:	beq	2b8dc <flatcc_json_printer_int32_vector_field@@Base+0x124>
   2b8bc:	str	r2, [r4, #20]
   2b8c0:	mov	r2, #10
   2b8c4:	mov	r0, r4
   2b8c8:	strb	r2, [r3]
   2b8cc:	ldr	r3, [r4, #32]
   2b8d0:	sub	r3, r3, #1
   2b8d4:	str	r3, [r4, #32]
   2b8d8:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b8dc:	ldr	r3, [r4, #20]
   2b8e0:	add	r2, r3, #1
   2b8e4:	str	r2, [r4, #20]
   2b8e8:	mov	r2, #93	; 0x5d
   2b8ec:	strb	r2, [r3]
   2b8f0:	pop	{r4, r5, r6, r7, r8, pc}
   2b8f4:	mov	r0, r4
   2b8f8:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b8fc:	b	2b874 <flatcc_json_printer_int32_vector_field@@Base+0xbc>
   2b900:	str	r2, [r4, #20]
   2b904:	strb	r7, [r3]
   2b908:	ldrb	r3, [r4, #25]
   2b90c:	cmp	r3, #0
   2b910:	beq	2b948 <flatcc_json_printer_int32_vector_field@@Base+0x190>
   2b914:	ldr	r3, [r4, #20]
   2b918:	mov	r0, r4
   2b91c:	add	r2, r3, #1
   2b920:	str	r2, [r4, #20]
   2b924:	strb	r8, [r3]
   2b928:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2b92c:	ldr	r0, [r6], #4
   2b930:	ldr	r1, [r4, #20]
   2b934:	bl	27b80 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   2b938:	ldr	r3, [r4, #20]
   2b93c:	add	r0, r3, r0
   2b940:	str	r0, [r4, #20]
   2b944:	b	2b89c <flatcc_json_printer_int32_vector_field@@Base+0xe4>
   2b948:	mov	r0, r4
   2b94c:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2b950:	b	2b92c <flatcc_json_printer_int32_vector_field@@Base+0x174>

0002b954 <flatcc_json_printer_int64_vector_field@@Base>:
   2b954:	push	{r4, r5, r6, r7, r8, lr}
   2b958:	mov	r5, r1
   2b95c:	mov	r4, r0
   2b960:	mov	r1, r2
   2b964:	mov	r0, r5
   2b968:	mov	r8, r3
   2b96c:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2b970:	cmp	r0, #0
   2b974:	popeq	{r4, r5, r6, r7, r8, pc}
   2b978:	ldr	r3, [r5, #16]
   2b97c:	add	r2, r3, #1
   2b980:	cmp	r3, #0
   2b984:	str	r2, [r5, #16]
   2b988:	beq	2b9a0 <flatcc_json_printer_int64_vector_field@@Base+0x4c>
   2b98c:	ldr	r2, [r4, #20]
   2b990:	add	r3, r2, #1
   2b994:	str	r3, [r4, #20]
   2b998:	mov	r3, #44	; 0x2c
   2b99c:	strb	r3, [r2]
   2b9a0:	ldr	r2, [r0]
   2b9a4:	mov	r1, r8
   2b9a8:	add	r7, r0, r2
   2b9ac:	ldr	r5, [r0, r2]
   2b9b0:	mov	r0, r4
   2b9b4:	add	r6, r7, #4
   2b9b8:	ldr	r2, [sp, #24]
   2b9bc:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2b9c0:	ldr	r3, [r4, #32]
   2b9c4:	cmp	r5, #0
   2b9c8:	add	r3, r3, #1
   2b9cc:	str	r3, [r4, #32]
   2b9d0:	ldr	r3, [r4, #20]
   2b9d4:	add	r2, r3, #1
   2b9d8:	str	r2, [r4, #20]
   2b9dc:	mov	r2, #91	; 0x5b
   2b9e0:	strb	r2, [r3]
   2b9e4:	beq	2ba30 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   2b9e8:	ldrb	r3, [r4, #25]
   2b9ec:	cmp	r3, #0
   2b9f0:	beq	2ba90 <flatcc_json_printer_int64_vector_field@@Base+0x13c>
   2b9f4:	ldr	r3, [r4, #20]
   2b9f8:	mov	r0, r4
   2b9fc:	add	r2, r3, #1
   2ba00:	str	r2, [r4, #20]
   2ba04:	mov	r2, #10
   2ba08:	strb	r2, [r3]
   2ba0c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2ba10:	ldrd	r0, [r7, #4]
   2ba14:	add	r6, r7, #12
   2ba18:	sub	r5, r5, #1
   2ba1c:	ldr	r2, [r4, #20]
   2ba20:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   2ba24:	ldr	r3, [r4, #20]
   2ba28:	add	r0, r3, r0
   2ba2c:	str	r0, [r4, #20]
   2ba30:	mov	r7, #44	; 0x2c
   2ba34:	mov	r8, #10
   2ba38:	ldr	r3, [r4, #20]
   2ba3c:	sub	r5, r5, #1
   2ba40:	cmn	r5, #1
   2ba44:	add	r2, r3, #1
   2ba48:	bne	2ba9c <flatcc_json_printer_int64_vector_field@@Base+0x148>
   2ba4c:	ldrb	r1, [r4, #25]
   2ba50:	cmp	r1, #0
   2ba54:	beq	2ba78 <flatcc_json_printer_int64_vector_field@@Base+0x124>
   2ba58:	str	r2, [r4, #20]
   2ba5c:	mov	r2, #10
   2ba60:	mov	r0, r4
   2ba64:	strb	r2, [r3]
   2ba68:	ldr	r3, [r4, #32]
   2ba6c:	sub	r3, r3, #1
   2ba70:	str	r3, [r4, #32]
   2ba74:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2ba78:	ldr	r3, [r4, #20]
   2ba7c:	add	r2, r3, #1
   2ba80:	str	r2, [r4, #20]
   2ba84:	mov	r2, #93	; 0x5d
   2ba88:	strb	r2, [r3]
   2ba8c:	pop	{r4, r5, r6, r7, r8, pc}
   2ba90:	mov	r0, r4
   2ba94:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2ba98:	b	2ba10 <flatcc_json_printer_int64_vector_field@@Base+0xbc>
   2ba9c:	str	r2, [r4, #20]
   2baa0:	strb	r7, [r3]
   2baa4:	ldrb	r3, [r4, #25]
   2baa8:	cmp	r3, #0
   2baac:	beq	2bae4 <flatcc_json_printer_int64_vector_field@@Base+0x190>
   2bab0:	ldr	r3, [r4, #20]
   2bab4:	mov	r0, r4
   2bab8:	add	r2, r3, #1
   2babc:	str	r2, [r4, #20]
   2bac0:	strb	r8, [r3]
   2bac4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bac8:	ldrd	r0, [r6], #8
   2bacc:	ldr	r2, [r4, #20]
   2bad0:	bl	27ba4 <flatcc_json_parser_struct_as_root@@Base+0xa88>
   2bad4:	ldr	r3, [r4, #20]
   2bad8:	add	r0, r3, r0
   2badc:	str	r0, [r4, #20]
   2bae0:	b	2ba38 <flatcc_json_printer_int64_vector_field@@Base+0xe4>
   2bae4:	mov	r0, r4
   2bae8:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2baec:	b	2bac8 <flatcc_json_printer_int64_vector_field@@Base+0x174>

0002baf0 <flatcc_json_printer_bool_vector_field@@Base>:
   2baf0:	push	{r4, r5, r6, r7, r8, lr}
   2baf4:	mov	r5, r1
   2baf8:	mov	r4, r0
   2bafc:	mov	r1, r2
   2bb00:	mov	r0, r5
   2bb04:	mov	r8, r3
   2bb08:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2bb0c:	cmp	r0, #0
   2bb10:	popeq	{r4, r5, r6, r7, r8, pc}
   2bb14:	ldr	r3, [r5, #16]
   2bb18:	add	r2, r3, #1
   2bb1c:	cmp	r3, #0
   2bb20:	str	r2, [r5, #16]
   2bb24:	beq	2bb3c <flatcc_json_printer_bool_vector_field@@Base+0x4c>
   2bb28:	ldr	r2, [r4, #20]
   2bb2c:	add	r3, r2, #1
   2bb30:	str	r3, [r4, #20]
   2bb34:	mov	r3, #44	; 0x2c
   2bb38:	strb	r3, [r2]
   2bb3c:	ldr	r2, [r0]
   2bb40:	mov	r1, r8
   2bb44:	add	r7, r0, r2
   2bb48:	ldr	r5, [r0, r2]
   2bb4c:	mov	r0, r4
   2bb50:	add	r6, r7, #4
   2bb54:	ldr	r2, [sp, #24]
   2bb58:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2bb5c:	ldr	r3, [r4, #32]
   2bb60:	cmp	r5, #0
   2bb64:	add	r3, r3, #1
   2bb68:	str	r3, [r4, #32]
   2bb6c:	ldr	r3, [r4, #20]
   2bb70:	add	r2, r3, #1
   2bb74:	str	r2, [r4, #20]
   2bb78:	mov	r2, #91	; 0x5b
   2bb7c:	strb	r2, [r3]
   2bb80:	beq	2bbcc <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   2bb84:	ldrb	r3, [r4, #25]
   2bb88:	cmp	r3, #0
   2bb8c:	beq	2bc2c <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   2bb90:	ldr	r3, [r4, #20]
   2bb94:	mov	r0, r4
   2bb98:	add	r2, r3, #1
   2bb9c:	str	r2, [r4, #20]
   2bba0:	mov	r2, #10
   2bba4:	strb	r2, [r3]
   2bba8:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bbac:	ldrb	r0, [r7, #4]
   2bbb0:	add	r6, r7, #5
   2bbb4:	sub	r5, r5, #1
   2bbb8:	ldr	r1, [r4, #20]
   2bbbc:	bl	28620 <flatcc_json_parser_struct_as_root@@Base+0x1504>
   2bbc0:	ldr	r3, [r4, #20]
   2bbc4:	add	r0, r3, r0
   2bbc8:	str	r0, [r4, #20]
   2bbcc:	add	r5, r6, r5
   2bbd0:	mov	r7, #44	; 0x2c
   2bbd4:	mov	r8, #10
   2bbd8:	ldr	r3, [r4, #20]
   2bbdc:	cmp	r6, r5
   2bbe0:	add	r2, r3, #1
   2bbe4:	bne	2bc38 <flatcc_json_printer_bool_vector_field@@Base+0x148>
   2bbe8:	ldrb	r1, [r4, #25]
   2bbec:	cmp	r1, #0
   2bbf0:	beq	2bc14 <flatcc_json_printer_bool_vector_field@@Base+0x124>
   2bbf4:	str	r2, [r4, #20]
   2bbf8:	mov	r2, #10
   2bbfc:	mov	r0, r4
   2bc00:	strb	r2, [r3]
   2bc04:	ldr	r3, [r4, #32]
   2bc08:	sub	r3, r3, #1
   2bc0c:	str	r3, [r4, #32]
   2bc10:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bc14:	ldr	r3, [r4, #20]
   2bc18:	add	r2, r3, #1
   2bc1c:	str	r2, [r4, #20]
   2bc20:	mov	r2, #93	; 0x5d
   2bc24:	strb	r2, [r3]
   2bc28:	pop	{r4, r5, r6, r7, r8, pc}
   2bc2c:	mov	r0, r4
   2bc30:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2bc34:	b	2bbac <flatcc_json_printer_bool_vector_field@@Base+0xbc>
   2bc38:	str	r2, [r4, #20]
   2bc3c:	strb	r7, [r3]
   2bc40:	ldrb	r3, [r4, #25]
   2bc44:	cmp	r3, #0
   2bc48:	beq	2bc80 <flatcc_json_printer_bool_vector_field@@Base+0x190>
   2bc4c:	ldr	r3, [r4, #20]
   2bc50:	mov	r0, r4
   2bc54:	add	r2, r3, #1
   2bc58:	str	r2, [r4, #20]
   2bc5c:	strb	r8, [r3]
   2bc60:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bc64:	ldrb	r0, [r6], #1
   2bc68:	ldr	r1, [r4, #20]
   2bc6c:	bl	28620 <flatcc_json_parser_struct_as_root@@Base+0x1504>
   2bc70:	ldr	r3, [r4, #20]
   2bc74:	add	r0, r3, r0
   2bc78:	str	r0, [r4, #20]
   2bc7c:	b	2bbd8 <flatcc_json_printer_bool_vector_field@@Base+0xe8>
   2bc80:	mov	r0, r4
   2bc84:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2bc88:	b	2bc64 <flatcc_json_printer_bool_vector_field@@Base+0x174>

0002bc8c <flatcc_json_printer_float_vector_field@@Base>:
   2bc8c:	push	{r4, r5, r6, r7, r8, lr}
   2bc90:	mov	r5, r1
   2bc94:	mov	r4, r0
   2bc98:	mov	r1, r2
   2bc9c:	mov	r0, r5
   2bca0:	mov	r8, r3
   2bca4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2bca8:	cmp	r0, #0
   2bcac:	popeq	{r4, r5, r6, r7, r8, pc}
   2bcb0:	ldr	r3, [r5, #16]
   2bcb4:	add	r2, r3, #1
   2bcb8:	cmp	r3, #0
   2bcbc:	str	r2, [r5, #16]
   2bcc0:	beq	2bcd8 <flatcc_json_printer_float_vector_field@@Base+0x4c>
   2bcc4:	ldr	r2, [r4, #20]
   2bcc8:	add	r3, r2, #1
   2bccc:	str	r3, [r4, #20]
   2bcd0:	mov	r3, #44	; 0x2c
   2bcd4:	strb	r3, [r2]
   2bcd8:	ldr	r2, [r0]
   2bcdc:	mov	r1, r8
   2bce0:	add	r7, r0, r2
   2bce4:	ldr	r5, [r0, r2]
   2bce8:	mov	r0, r4
   2bcec:	add	r6, r7, #4
   2bcf0:	ldr	r2, [sp, #24]
   2bcf4:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2bcf8:	ldr	r3, [r4, #32]
   2bcfc:	cmp	r5, #0
   2bd00:	add	r3, r3, #1
   2bd04:	str	r3, [r4, #32]
   2bd08:	ldr	r3, [r4, #20]
   2bd0c:	add	r2, r3, #1
   2bd10:	str	r2, [r4, #20]
   2bd14:	mov	r2, #91	; 0x5b
   2bd18:	strb	r2, [r3]
   2bd1c:	beq	2bd6c <flatcc_json_printer_float_vector_field@@Base+0xe0>
   2bd20:	ldrb	r3, [r4, #25]
   2bd24:	cmp	r3, #0
   2bd28:	beq	2bdcc <flatcc_json_printer_float_vector_field@@Base+0x140>
   2bd2c:	ldr	r3, [r4, #20]
   2bd30:	mov	r0, r4
   2bd34:	add	r2, r3, #1
   2bd38:	str	r2, [r4, #20]
   2bd3c:	mov	r2, #10
   2bd40:	strb	r2, [r3]
   2bd44:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bd48:	vldr	s0, [r7, #4]
   2bd4c:	add	r6, r7, #8
   2bd50:	sub	r5, r5, #1
   2bd54:	ldr	r0, [r4, #20]
   2bd58:	vcvt.f64.f32	d0, s0
   2bd5c:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   2bd60:	ldr	r3, [r4, #20]
   2bd64:	add	r0, r3, r0
   2bd68:	str	r0, [r4, #20]
   2bd6c:	mov	r7, #44	; 0x2c
   2bd70:	mov	r8, #10
   2bd74:	ldr	r3, [r4, #20]
   2bd78:	sub	r5, r5, #1
   2bd7c:	cmn	r5, #1
   2bd80:	add	r2, r3, #1
   2bd84:	bne	2bdd8 <flatcc_json_printer_float_vector_field@@Base+0x14c>
   2bd88:	ldrb	r1, [r4, #25]
   2bd8c:	cmp	r1, #0
   2bd90:	beq	2bdb4 <flatcc_json_printer_float_vector_field@@Base+0x128>
   2bd94:	str	r2, [r4, #20]
   2bd98:	mov	r2, #10
   2bd9c:	mov	r0, r4
   2bda0:	strb	r2, [r3]
   2bda4:	ldr	r3, [r4, #32]
   2bda8:	sub	r3, r3, #1
   2bdac:	str	r3, [r4, #32]
   2bdb0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bdb4:	ldr	r3, [r4, #20]
   2bdb8:	add	r2, r3, #1
   2bdbc:	str	r2, [r4, #20]
   2bdc0:	mov	r2, #93	; 0x5d
   2bdc4:	strb	r2, [r3]
   2bdc8:	pop	{r4, r5, r6, r7, r8, pc}
   2bdcc:	mov	r0, r4
   2bdd0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2bdd4:	b	2bd48 <flatcc_json_printer_float_vector_field@@Base+0xbc>
   2bdd8:	str	r2, [r4, #20]
   2bddc:	strb	r7, [r3]
   2bde0:	ldrb	r3, [r4, #25]
   2bde4:	cmp	r3, #0
   2bde8:	beq	2be24 <flatcc_json_printer_float_vector_field@@Base+0x198>
   2bdec:	ldr	r3, [r4, #20]
   2bdf0:	mov	r0, r4
   2bdf4:	add	r2, r3, #1
   2bdf8:	str	r2, [r4, #20]
   2bdfc:	strb	r8, [r3]
   2be00:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2be04:	vldmia	r6!, {s0}
   2be08:	ldr	r0, [r4, #20]
   2be0c:	vcvt.f64.f32	d0, s0
   2be10:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   2be14:	ldr	r3, [r4, #20]
   2be18:	add	r0, r3, r0
   2be1c:	str	r0, [r4, #20]
   2be20:	b	2bd74 <flatcc_json_printer_float_vector_field@@Base+0xe8>
   2be24:	mov	r0, r4
   2be28:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2be2c:	b	2be04 <flatcc_json_printer_float_vector_field@@Base+0x178>

0002be30 <flatcc_json_printer_double_vector_field@@Base>:
   2be30:	push	{r4, r5, r6, r7, r8, lr}
   2be34:	mov	r5, r1
   2be38:	mov	r4, r0
   2be3c:	mov	r1, r2
   2be40:	mov	r0, r5
   2be44:	mov	r8, r3
   2be48:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2be4c:	cmp	r0, #0
   2be50:	popeq	{r4, r5, r6, r7, r8, pc}
   2be54:	ldr	r3, [r5, #16]
   2be58:	add	r2, r3, #1
   2be5c:	cmp	r3, #0
   2be60:	str	r2, [r5, #16]
   2be64:	beq	2be7c <flatcc_json_printer_double_vector_field@@Base+0x4c>
   2be68:	ldr	r2, [r4, #20]
   2be6c:	add	r3, r2, #1
   2be70:	str	r3, [r4, #20]
   2be74:	mov	r3, #44	; 0x2c
   2be78:	strb	r3, [r2]
   2be7c:	ldr	r2, [r0]
   2be80:	mov	r1, r8
   2be84:	add	r7, r0, r2
   2be88:	ldr	r5, [r0, r2]
   2be8c:	mov	r0, r4
   2be90:	add	r6, r7, #4
   2be94:	ldr	r2, [sp, #24]
   2be98:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2be9c:	ldr	r3, [r4, #32]
   2bea0:	cmp	r5, #0
   2bea4:	add	r3, r3, #1
   2bea8:	str	r3, [r4, #32]
   2beac:	ldr	r3, [r4, #20]
   2beb0:	add	r2, r3, #1
   2beb4:	str	r2, [r4, #20]
   2beb8:	mov	r2, #91	; 0x5b
   2bebc:	strb	r2, [r3]
   2bec0:	beq	2bf0c <flatcc_json_printer_double_vector_field@@Base+0xdc>
   2bec4:	ldrb	r3, [r4, #25]
   2bec8:	cmp	r3, #0
   2becc:	beq	2bf6c <flatcc_json_printer_double_vector_field@@Base+0x13c>
   2bed0:	ldr	r3, [r4, #20]
   2bed4:	mov	r0, r4
   2bed8:	add	r2, r3, #1
   2bedc:	str	r2, [r4, #20]
   2bee0:	mov	r2, #10
   2bee4:	strb	r2, [r3]
   2bee8:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2beec:	vldr	d0, [r7, #4]
   2bef0:	add	r6, r7, #12
   2bef4:	sub	r5, r5, #1
   2bef8:	ldr	r0, [r4, #20]
   2befc:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   2bf00:	ldr	r3, [r4, #20]
   2bf04:	add	r0, r3, r0
   2bf08:	str	r0, [r4, #20]
   2bf0c:	mov	r7, #44	; 0x2c
   2bf10:	mov	r8, #10
   2bf14:	ldr	r3, [r4, #20]
   2bf18:	sub	r5, r5, #1
   2bf1c:	cmn	r5, #1
   2bf20:	add	r2, r3, #1
   2bf24:	bne	2bf78 <flatcc_json_printer_double_vector_field@@Base+0x148>
   2bf28:	ldrb	r1, [r4, #25]
   2bf2c:	cmp	r1, #0
   2bf30:	beq	2bf54 <flatcc_json_printer_double_vector_field@@Base+0x124>
   2bf34:	str	r2, [r4, #20]
   2bf38:	mov	r2, #10
   2bf3c:	mov	r0, r4
   2bf40:	strb	r2, [r3]
   2bf44:	ldr	r3, [r4, #32]
   2bf48:	sub	r3, r3, #1
   2bf4c:	str	r3, [r4, #32]
   2bf50:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bf54:	ldr	r3, [r4, #20]
   2bf58:	add	r2, r3, #1
   2bf5c:	str	r2, [r4, #20]
   2bf60:	mov	r2, #93	; 0x5d
   2bf64:	strb	r2, [r3]
   2bf68:	pop	{r4, r5, r6, r7, r8, pc}
   2bf6c:	mov	r0, r4
   2bf70:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2bf74:	b	2beec <flatcc_json_printer_double_vector_field@@Base+0xbc>
   2bf78:	str	r2, [r4, #20]
   2bf7c:	strb	r7, [r3]
   2bf80:	ldrb	r3, [r4, #25]
   2bf84:	cmp	r3, #0
   2bf88:	beq	2bfc0 <flatcc_json_printer_double_vector_field@@Base+0x190>
   2bf8c:	ldr	r3, [r4, #20]
   2bf90:	mov	r0, r4
   2bf94:	add	r2, r3, #1
   2bf98:	str	r2, [r4, #20]
   2bf9c:	strb	r8, [r3]
   2bfa0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2bfa4:	vldmia	r6!, {d0}
   2bfa8:	ldr	r0, [r4, #20]
   2bfac:	bl	28938 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   2bfb0:	ldr	r3, [r4, #20]
   2bfb4:	add	r0, r3, r0
   2bfb8:	str	r0, [r4, #20]
   2bfbc:	b	2bf14 <flatcc_json_printer_double_vector_field@@Base+0xe4>
   2bfc0:	mov	r0, r4
   2bfc4:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2bfc8:	b	2bfa4 <flatcc_json_printer_double_vector_field@@Base+0x174>

0002bfcc <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2bfcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bfd0:	ldrb	lr, [r0, #27]
   2bfd4:	ldr	r9, [sp, #32]
   2bfd8:	ldr	r8, [sp, #36]	; 0x24
   2bfdc:	cmp	lr, #0
   2bfe0:	beq	2bfec <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20>
   2bfe4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bfe8:	b	2ae0c <flatcc_json_printer_uint8_vector_field@@Base>
   2bfec:	mov	r5, r1
   2bff0:	mov	r4, r0
   2bff4:	mov	r1, r2
   2bff8:	mov	r0, r5
   2bffc:	mov	sl, r3
   2c000:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c004:	cmp	r0, #0
   2c008:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c00c:	ldr	r3, [r5, #16]
   2c010:	add	r2, r3, #1
   2c014:	cmp	r3, #0
   2c018:	str	r2, [r5, #16]
   2c01c:	beq	2c034 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x68>
   2c020:	ldr	r3, [r4, #20]
   2c024:	add	r2, r3, #1
   2c028:	str	r2, [r4, #20]
   2c02c:	mov	r2, #44	; 0x2c
   2c030:	strb	r2, [r3]
   2c034:	ldr	r3, [r0]
   2c038:	mov	r2, r9
   2c03c:	mov	r1, sl
   2c040:	add	r7, r0, r3
   2c044:	ldr	r5, [r0, r3]
   2c048:	mov	r0, r4
   2c04c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2c050:	ldr	r3, [r4, #32]
   2c054:	add	r6, r7, #4
   2c058:	cmp	r5, #0
   2c05c:	add	r3, r3, #1
   2c060:	str	r3, [r4, #32]
   2c064:	ldr	r3, [r4, #20]
   2c068:	add	r2, r3, #1
   2c06c:	str	r2, [r4, #20]
   2c070:	mov	r2, #91	; 0x5b
   2c074:	strb	r2, [r3]
   2c078:	beq	2c0b8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xec>
   2c07c:	ldrb	r3, [r4, #25]
   2c080:	cmp	r3, #0
   2c084:	beq	2c118 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14c>
   2c088:	ldr	r3, [r4, #20]
   2c08c:	mov	r0, r4
   2c090:	add	r2, r3, #1
   2c094:	str	r2, [r4, #20]
   2c098:	mov	r2, #10
   2c09c:	strb	r2, [r3]
   2c0a0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c0a4:	ldrb	r1, [r7, #4]
   2c0a8:	mov	r0, r4
   2c0ac:	add	r6, r7, #5
   2c0b0:	sub	r5, r5, #1
   2c0b4:	blx	r8
   2c0b8:	add	r5, r6, r5
   2c0bc:	mov	r7, #44	; 0x2c
   2c0c0:	mov	r9, #10
   2c0c4:	ldr	r3, [r4, #20]
   2c0c8:	cmp	r6, r5
   2c0cc:	add	r2, r3, #1
   2c0d0:	bne	2c124 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   2c0d4:	ldrb	r1, [r4, #25]
   2c0d8:	cmp	r1, #0
   2c0dc:	beq	2c100 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x134>
   2c0e0:	str	r2, [r4, #20]
   2c0e4:	mov	r2, #10
   2c0e8:	mov	r0, r4
   2c0ec:	strb	r2, [r3]
   2c0f0:	ldr	r3, [r4, #32]
   2c0f4:	sub	r3, r3, #1
   2c0f8:	str	r3, [r4, #32]
   2c0fc:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c100:	ldr	r3, [r4, #20]
   2c104:	add	r2, r3, #1
   2c108:	str	r2, [r4, #20]
   2c10c:	mov	r2, #93	; 0x5d
   2c110:	strb	r2, [r3]
   2c114:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c118:	mov	r0, r4
   2c11c:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c120:	b	2c0a4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd8>
   2c124:	str	r2, [r4, #20]
   2c128:	strb	r7, [r3]
   2c12c:	ldrb	r3, [r4, #25]
   2c130:	cmp	r3, #0
   2c134:	beq	2c160 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   2c138:	ldr	r3, [r4, #20]
   2c13c:	mov	r0, r4
   2c140:	add	r2, r3, #1
   2c144:	str	r2, [r4, #20]
   2c148:	strb	r9, [r3]
   2c14c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c150:	ldrb	r1, [r6], #1
   2c154:	mov	r0, r4
   2c158:	blx	r8
   2c15c:	b	2c0c4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   2c160:	mov	r0, r4
   2c164:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c168:	b	2c150 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x184>

0002c16c <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2c16c:	b	2bfcc <flatcc_json_printer_uint8_enum_vector_field@@Base>

0002c170 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2c170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c174:	ldrb	lr, [r0, #27]
   2c178:	ldr	r9, [sp, #32]
   2c17c:	ldr	r8, [sp, #36]	; 0x24
   2c180:	cmp	lr, #0
   2c184:	beq	2c190 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x20>
   2c188:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c18c:	b	2afac <flatcc_json_printer_uint16_vector_field@@Base>
   2c190:	mov	r5, r1
   2c194:	mov	r4, r0
   2c198:	mov	r1, r2
   2c19c:	mov	r0, r5
   2c1a0:	mov	sl, r3
   2c1a4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c1a8:	cmp	r0, #0
   2c1ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c1b0:	ldr	r3, [r5, #16]
   2c1b4:	add	r2, r3, #1
   2c1b8:	cmp	r3, #0
   2c1bc:	str	r2, [r5, #16]
   2c1c0:	beq	2c1d8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x68>
   2c1c4:	ldr	r3, [r4, #20]
   2c1c8:	add	r2, r3, #1
   2c1cc:	str	r2, [r4, #20]
   2c1d0:	mov	r2, #44	; 0x2c
   2c1d4:	strb	r2, [r3]
   2c1d8:	ldr	r3, [r0]
   2c1dc:	mov	r2, r9
   2c1e0:	mov	r1, sl
   2c1e4:	add	r7, r0, r3
   2c1e8:	ldr	r5, [r0, r3]
   2c1ec:	mov	r0, r4
   2c1f0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2c1f4:	ldr	r3, [r4, #32]
   2c1f8:	add	r6, r7, #4
   2c1fc:	cmp	r5, #0
   2c200:	add	r3, r3, #1
   2c204:	str	r3, [r4, #32]
   2c208:	ldr	r3, [r4, #20]
   2c20c:	add	r2, r3, #1
   2c210:	str	r2, [r4, #20]
   2c214:	mov	r2, #91	; 0x5b
   2c218:	strb	r2, [r3]
   2c21c:	beq	2c25c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xec>
   2c220:	ldrb	r3, [r4, #25]
   2c224:	cmp	r3, #0
   2c228:	beq	2c2bc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x14c>
   2c22c:	ldr	r3, [r4, #20]
   2c230:	mov	r0, r4
   2c234:	add	r2, r3, #1
   2c238:	str	r2, [r4, #20]
   2c23c:	mov	r2, #10
   2c240:	strb	r2, [r3]
   2c244:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c248:	ldrh	r1, [r7, #4]
   2c24c:	mov	r0, r4
   2c250:	add	r6, r7, #6
   2c254:	sub	r5, r5, #1
   2c258:	blx	r8
   2c25c:	mov	r7, #44	; 0x2c
   2c260:	mov	r9, #10
   2c264:	ldr	r3, [r4, #20]
   2c268:	sub	r5, r5, #1
   2c26c:	cmn	r5, #1
   2c270:	add	r2, r3, #1
   2c274:	bne	2c2c8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x158>
   2c278:	ldrb	r1, [r4, #25]
   2c27c:	cmp	r1, #0
   2c280:	beq	2c2a4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   2c284:	str	r2, [r4, #20]
   2c288:	mov	r2, #10
   2c28c:	mov	r0, r4
   2c290:	strb	r2, [r3]
   2c294:	ldr	r3, [r4, #32]
   2c298:	sub	r3, r3, #1
   2c29c:	str	r3, [r4, #32]
   2c2a0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c2a4:	ldr	r3, [r4, #20]
   2c2a8:	add	r2, r3, #1
   2c2ac:	str	r2, [r4, #20]
   2c2b0:	mov	r2, #93	; 0x5d
   2c2b4:	strb	r2, [r3]
   2c2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c2bc:	mov	r0, r4
   2c2c0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c2c4:	b	2c248 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd8>
   2c2c8:	str	r2, [r4, #20]
   2c2cc:	strb	r7, [r3]
   2c2d0:	ldrb	r3, [r4, #25]
   2c2d4:	cmp	r3, #0
   2c2d8:	beq	2c304 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x194>
   2c2dc:	ldr	r3, [r4, #20]
   2c2e0:	mov	r0, r4
   2c2e4:	add	r2, r3, #1
   2c2e8:	str	r2, [r4, #20]
   2c2ec:	strb	r9, [r3]
   2c2f0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c2f4:	ldrh	r1, [r6], #2
   2c2f8:	mov	r0, r4
   2c2fc:	blx	r8
   2c300:	b	2c264 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   2c304:	mov	r0, r4
   2c308:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c30c:	b	2c2f4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x184>

0002c310 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2c310:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c314:	ldrb	lr, [r0, #27]
   2c318:	ldr	r9, [sp, #32]
   2c31c:	ldr	r8, [sp, #36]	; 0x24
   2c320:	cmp	lr, #0
   2c324:	beq	2c330 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x20>
   2c328:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c32c:	b	2b148 <flatcc_json_printer_uint32_vector_field@@Base>
   2c330:	mov	r5, r1
   2c334:	mov	r4, r0
   2c338:	mov	r1, r2
   2c33c:	mov	r0, r5
   2c340:	mov	sl, r3
   2c344:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c348:	cmp	r0, #0
   2c34c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c350:	ldr	r3, [r5, #16]
   2c354:	add	r2, r3, #1
   2c358:	cmp	r3, #0
   2c35c:	str	r2, [r5, #16]
   2c360:	beq	2c378 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x68>
   2c364:	ldr	r3, [r4, #20]
   2c368:	add	r2, r3, #1
   2c36c:	str	r2, [r4, #20]
   2c370:	mov	r2, #44	; 0x2c
   2c374:	strb	r2, [r3]
   2c378:	ldr	r3, [r0]
   2c37c:	mov	r2, r9
   2c380:	mov	r1, sl
   2c384:	add	r7, r0, r3
   2c388:	ldr	r5, [r0, r3]
   2c38c:	mov	r0, r4
   2c390:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2c394:	ldr	r3, [r4, #32]
   2c398:	add	r6, r7, #4
   2c39c:	cmp	r5, #0
   2c3a0:	add	r3, r3, #1
   2c3a4:	str	r3, [r4, #32]
   2c3a8:	ldr	r3, [r4, #20]
   2c3ac:	add	r2, r3, #1
   2c3b0:	str	r2, [r4, #20]
   2c3b4:	mov	r2, #91	; 0x5b
   2c3b8:	strb	r2, [r3]
   2c3bc:	beq	2c3fc <flatcc_json_printer_uint32_enum_vector_field@@Base+0xec>
   2c3c0:	ldrb	r3, [r4, #25]
   2c3c4:	cmp	r3, #0
   2c3c8:	beq	2c45c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14c>
   2c3cc:	ldr	r3, [r4, #20]
   2c3d0:	mov	r0, r4
   2c3d4:	add	r2, r3, #1
   2c3d8:	str	r2, [r4, #20]
   2c3dc:	mov	r2, #10
   2c3e0:	strb	r2, [r3]
   2c3e4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c3e8:	mov	r0, r4
   2c3ec:	ldr	r1, [r7, #4]
   2c3f0:	add	r6, r7, #8
   2c3f4:	sub	r5, r5, #1
   2c3f8:	blx	r8
   2c3fc:	mov	r7, #44	; 0x2c
   2c400:	mov	r9, #10
   2c404:	ldr	r3, [r4, #20]
   2c408:	sub	r5, r5, #1
   2c40c:	cmn	r5, #1
   2c410:	add	r2, r3, #1
   2c414:	bne	2c468 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x158>
   2c418:	ldrb	r1, [r4, #25]
   2c41c:	cmp	r1, #0
   2c420:	beq	2c444 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   2c424:	str	r2, [r4, #20]
   2c428:	mov	r2, #10
   2c42c:	mov	r0, r4
   2c430:	strb	r2, [r3]
   2c434:	ldr	r3, [r4, #32]
   2c438:	sub	r3, r3, #1
   2c43c:	str	r3, [r4, #32]
   2c440:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c444:	ldr	r3, [r4, #20]
   2c448:	add	r2, r3, #1
   2c44c:	str	r2, [r4, #20]
   2c450:	mov	r2, #93	; 0x5d
   2c454:	strb	r2, [r3]
   2c458:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c45c:	mov	r0, r4
   2c460:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c464:	b	2c3e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd8>
   2c468:	str	r2, [r4, #20]
   2c46c:	strb	r7, [r3]
   2c470:	ldrb	r3, [r4, #25]
   2c474:	cmp	r3, #0
   2c478:	beq	2c4a4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x194>
   2c47c:	ldr	r3, [r4, #20]
   2c480:	mov	r0, r4
   2c484:	add	r2, r3, #1
   2c488:	str	r2, [r4, #20]
   2c48c:	strb	r9, [r3]
   2c490:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c494:	mov	r0, r4
   2c498:	ldr	r1, [r6], #4
   2c49c:	blx	r8
   2c4a0:	b	2c404 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   2c4a4:	mov	r0, r4
   2c4a8:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c4ac:	b	2c494 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x184>

0002c4b0 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2c4b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c4b4:	ldrb	lr, [r0, #27]
   2c4b8:	ldr	r9, [sp, #32]
   2c4bc:	ldr	r8, [sp, #36]	; 0x24
   2c4c0:	cmp	lr, #0
   2c4c4:	beq	2c4d0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x20>
   2c4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c4cc:	b	2b2e4 <flatcc_json_printer_uint64_vector_field@@Base>
   2c4d0:	mov	r5, r1
   2c4d4:	mov	r4, r0
   2c4d8:	mov	r1, r2
   2c4dc:	mov	r0, r5
   2c4e0:	mov	sl, r3
   2c4e4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c4e8:	cmp	r0, #0
   2c4ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c4f0:	ldr	r3, [r5, #16]
   2c4f4:	add	r2, r3, #1
   2c4f8:	cmp	r3, #0
   2c4fc:	str	r2, [r5, #16]
   2c500:	beq	2c518 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x68>
   2c504:	ldr	r3, [r4, #20]
   2c508:	add	r2, r3, #1
   2c50c:	str	r2, [r4, #20]
   2c510:	mov	r2, #44	; 0x2c
   2c514:	strb	r2, [r3]
   2c518:	ldr	r3, [r0]
   2c51c:	mov	r2, r9
   2c520:	mov	r1, sl
   2c524:	add	r7, r0, r3
   2c528:	ldr	r5, [r0, r3]
   2c52c:	mov	r0, r4
   2c530:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2c534:	ldr	r3, [r4, #32]
   2c538:	add	r6, r7, #4
   2c53c:	cmp	r5, #0
   2c540:	add	r3, r3, #1
   2c544:	str	r3, [r4, #32]
   2c548:	ldr	r3, [r4, #20]
   2c54c:	add	r2, r3, #1
   2c550:	str	r2, [r4, #20]
   2c554:	mov	r2, #91	; 0x5b
   2c558:	strb	r2, [r3]
   2c55c:	beq	2c59c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xec>
   2c560:	ldrb	r3, [r4, #25]
   2c564:	cmp	r3, #0
   2c568:	beq	2c5fc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x14c>
   2c56c:	ldr	r3, [r4, #20]
   2c570:	mov	r0, r4
   2c574:	add	r2, r3, #1
   2c578:	str	r2, [r4, #20]
   2c57c:	mov	r2, #10
   2c580:	strb	r2, [r3]
   2c584:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c588:	mov	r0, r4
   2c58c:	ldrd	r2, [r7, #4]
   2c590:	add	r6, r7, #12
   2c594:	sub	r5, r5, #1
   2c598:	blx	r8
   2c59c:	mov	r7, #44	; 0x2c
   2c5a0:	mov	r9, #10
   2c5a4:	ldr	r3, [r4, #20]
   2c5a8:	sub	r5, r5, #1
   2c5ac:	cmn	r5, #1
   2c5b0:	add	r2, r3, #1
   2c5b4:	bne	2c608 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x158>
   2c5b8:	ldrb	r1, [r4, #25]
   2c5bc:	cmp	r1, #0
   2c5c0:	beq	2c5e4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   2c5c4:	str	r2, [r4, #20]
   2c5c8:	mov	r2, #10
   2c5cc:	mov	r0, r4
   2c5d0:	strb	r2, [r3]
   2c5d4:	ldr	r3, [r4, #32]
   2c5d8:	sub	r3, r3, #1
   2c5dc:	str	r3, [r4, #32]
   2c5e0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c5e4:	ldr	r3, [r4, #20]
   2c5e8:	add	r2, r3, #1
   2c5ec:	str	r2, [r4, #20]
   2c5f0:	mov	r2, #93	; 0x5d
   2c5f4:	strb	r2, [r3]
   2c5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c5fc:	mov	r0, r4
   2c600:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c604:	b	2c588 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd8>
   2c608:	str	r2, [r4, #20]
   2c60c:	strb	r7, [r3]
   2c610:	ldrb	r3, [r4, #25]
   2c614:	cmp	r3, #0
   2c618:	beq	2c644 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x194>
   2c61c:	ldr	r3, [r4, #20]
   2c620:	mov	r0, r4
   2c624:	add	r2, r3, #1
   2c628:	str	r2, [r4, #20]
   2c62c:	strb	r9, [r3]
   2c630:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c634:	mov	r0, r4
   2c638:	ldrd	r2, [r6], #8
   2c63c:	blx	r8
   2c640:	b	2c5a4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   2c644:	mov	r0, r4
   2c648:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c64c:	b	2c634 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x184>

0002c650 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2c650:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c654:	ldrb	lr, [r0, #27]
   2c658:	ldr	r9, [sp, #32]
   2c65c:	ldr	r8, [sp, #36]	; 0x24
   2c660:	cmp	lr, #0
   2c664:	beq	2c670 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20>
   2c668:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c66c:	b	2b480 <flatcc_json_printer_int8_vector_field@@Base>
   2c670:	mov	r5, r1
   2c674:	mov	r4, r0
   2c678:	mov	r1, r2
   2c67c:	mov	r0, r5
   2c680:	mov	sl, r3
   2c684:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c688:	cmp	r0, #0
   2c68c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c690:	ldr	r3, [r5, #16]
   2c694:	add	r2, r3, #1
   2c698:	cmp	r3, #0
   2c69c:	str	r2, [r5, #16]
   2c6a0:	beq	2c6b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x68>
   2c6a4:	ldr	r3, [r4, #20]
   2c6a8:	add	r2, r3, #1
   2c6ac:	str	r2, [r4, #20]
   2c6b0:	mov	r2, #44	; 0x2c
   2c6b4:	strb	r2, [r3]
   2c6b8:	ldr	r3, [r0]
   2c6bc:	mov	r2, r9
   2c6c0:	mov	r1, sl
   2c6c4:	add	r7, r0, r3
   2c6c8:	ldr	r5, [r0, r3]
   2c6cc:	mov	r0, r4
   2c6d0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2c6d4:	ldr	r3, [r4, #32]
   2c6d8:	add	r6, r7, #4
   2c6dc:	cmp	r5, #0
   2c6e0:	add	r3, r3, #1
   2c6e4:	str	r3, [r4, #32]
   2c6e8:	ldr	r3, [r4, #20]
   2c6ec:	add	r2, r3, #1
   2c6f0:	str	r2, [r4, #20]
   2c6f4:	mov	r2, #91	; 0x5b
   2c6f8:	strb	r2, [r3]
   2c6fc:	beq	2c73c <flatcc_json_printer_int8_enum_vector_field@@Base+0xec>
   2c700:	ldrb	r3, [r4, #25]
   2c704:	cmp	r3, #0
   2c708:	beq	2c79c <flatcc_json_printer_int8_enum_vector_field@@Base+0x14c>
   2c70c:	ldr	r3, [r4, #20]
   2c710:	mov	r0, r4
   2c714:	add	r2, r3, #1
   2c718:	str	r2, [r4, #20]
   2c71c:	mov	r2, #10
   2c720:	strb	r2, [r3]
   2c724:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c728:	ldrsb	r1, [r7, #4]
   2c72c:	mov	r0, r4
   2c730:	add	r6, r7, #5
   2c734:	sub	r5, r5, #1
   2c738:	blx	r8
   2c73c:	add	r5, r6, r5
   2c740:	mov	r7, #44	; 0x2c
   2c744:	mov	r9, #10
   2c748:	ldr	r3, [r4, #20]
   2c74c:	cmp	r6, r5
   2c750:	add	r2, r3, #1
   2c754:	bne	2c7a8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   2c758:	ldrb	r1, [r4, #25]
   2c75c:	cmp	r1, #0
   2c760:	beq	2c784 <flatcc_json_printer_int8_enum_vector_field@@Base+0x134>
   2c764:	str	r2, [r4, #20]
   2c768:	mov	r2, #10
   2c76c:	mov	r0, r4
   2c770:	strb	r2, [r3]
   2c774:	ldr	r3, [r4, #32]
   2c778:	sub	r3, r3, #1
   2c77c:	str	r3, [r4, #32]
   2c780:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c784:	ldr	r3, [r4, #20]
   2c788:	add	r2, r3, #1
   2c78c:	str	r2, [r4, #20]
   2c790:	mov	r2, #93	; 0x5d
   2c794:	strb	r2, [r3]
   2c798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c79c:	mov	r0, r4
   2c7a0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c7a4:	b	2c728 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd8>
   2c7a8:	str	r2, [r4, #20]
   2c7ac:	strb	r7, [r3]
   2c7b0:	ldrb	r3, [r4, #25]
   2c7b4:	cmp	r3, #0
   2c7b8:	beq	2c7e4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   2c7bc:	ldr	r3, [r4, #20]
   2c7c0:	mov	r0, r4
   2c7c4:	add	r2, r3, #1
   2c7c8:	str	r2, [r4, #20]
   2c7cc:	strb	r9, [r3]
   2c7d0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c7d4:	ldrsb	r1, [r6], #1
   2c7d8:	mov	r0, r4
   2c7dc:	blx	r8
   2c7e0:	b	2c748 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   2c7e4:	mov	r0, r4
   2c7e8:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c7ec:	b	2c7d4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x184>

0002c7f0 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2c7f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c7f4:	ldrb	lr, [r0, #27]
   2c7f8:	ldr	r9, [sp, #32]
   2c7fc:	ldr	r8, [sp, #36]	; 0x24
   2c800:	cmp	lr, #0
   2c804:	beq	2c810 <flatcc_json_printer_int16_enum_vector_field@@Base+0x20>
   2c808:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c80c:	b	2b61c <flatcc_json_printer_int16_vector_field@@Base>
   2c810:	mov	r5, r1
   2c814:	mov	r4, r0
   2c818:	mov	r1, r2
   2c81c:	mov	r0, r5
   2c820:	mov	sl, r3
   2c824:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c828:	cmp	r0, #0
   2c82c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c830:	ldr	r3, [r5, #16]
   2c834:	add	r2, r3, #1
   2c838:	cmp	r3, #0
   2c83c:	str	r2, [r5, #16]
   2c840:	beq	2c858 <flatcc_json_printer_int16_enum_vector_field@@Base+0x68>
   2c844:	ldr	r3, [r4, #20]
   2c848:	add	r2, r3, #1
   2c84c:	str	r2, [r4, #20]
   2c850:	mov	r2, #44	; 0x2c
   2c854:	strb	r2, [r3]
   2c858:	ldr	r3, [r0]
   2c85c:	mov	r2, r9
   2c860:	mov	r1, sl
   2c864:	add	r7, r0, r3
   2c868:	ldr	r5, [r0, r3]
   2c86c:	mov	r0, r4
   2c870:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2c874:	ldr	r3, [r4, #32]
   2c878:	add	r6, r7, #4
   2c87c:	cmp	r5, #0
   2c880:	add	r3, r3, #1
   2c884:	str	r3, [r4, #32]
   2c888:	ldr	r3, [r4, #20]
   2c88c:	add	r2, r3, #1
   2c890:	str	r2, [r4, #20]
   2c894:	mov	r2, #91	; 0x5b
   2c898:	strb	r2, [r3]
   2c89c:	beq	2c8dc <flatcc_json_printer_int16_enum_vector_field@@Base+0xec>
   2c8a0:	ldrb	r3, [r4, #25]
   2c8a4:	cmp	r3, #0
   2c8a8:	beq	2c93c <flatcc_json_printer_int16_enum_vector_field@@Base+0x14c>
   2c8ac:	ldr	r3, [r4, #20]
   2c8b0:	mov	r0, r4
   2c8b4:	add	r2, r3, #1
   2c8b8:	str	r2, [r4, #20]
   2c8bc:	mov	r2, #10
   2c8c0:	strb	r2, [r3]
   2c8c4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c8c8:	ldrsh	r1, [r7, #4]
   2c8cc:	mov	r0, r4
   2c8d0:	add	r6, r7, #6
   2c8d4:	sub	r5, r5, #1
   2c8d8:	blx	r8
   2c8dc:	mov	r7, #44	; 0x2c
   2c8e0:	mov	r9, #10
   2c8e4:	ldr	r3, [r4, #20]
   2c8e8:	sub	r5, r5, #1
   2c8ec:	cmn	r5, #1
   2c8f0:	add	r2, r3, #1
   2c8f4:	bne	2c948 <flatcc_json_printer_int16_enum_vector_field@@Base+0x158>
   2c8f8:	ldrb	r1, [r4, #25]
   2c8fc:	cmp	r1, #0
   2c900:	beq	2c924 <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   2c904:	str	r2, [r4, #20]
   2c908:	mov	r2, #10
   2c90c:	mov	r0, r4
   2c910:	strb	r2, [r3]
   2c914:	ldr	r3, [r4, #32]
   2c918:	sub	r3, r3, #1
   2c91c:	str	r3, [r4, #32]
   2c920:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c924:	ldr	r3, [r4, #20]
   2c928:	add	r2, r3, #1
   2c92c:	str	r2, [r4, #20]
   2c930:	mov	r2, #93	; 0x5d
   2c934:	strb	r2, [r3]
   2c938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c93c:	mov	r0, r4
   2c940:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c944:	b	2c8c8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd8>
   2c948:	str	r2, [r4, #20]
   2c94c:	strb	r7, [r3]
   2c950:	ldrb	r3, [r4, #25]
   2c954:	cmp	r3, #0
   2c958:	beq	2c984 <flatcc_json_printer_int16_enum_vector_field@@Base+0x194>
   2c95c:	ldr	r3, [r4, #20]
   2c960:	mov	r0, r4
   2c964:	add	r2, r3, #1
   2c968:	str	r2, [r4, #20]
   2c96c:	strb	r9, [r3]
   2c970:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2c974:	ldrsh	r1, [r6], #2
   2c978:	mov	r0, r4
   2c97c:	blx	r8
   2c980:	b	2c8e4 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   2c984:	mov	r0, r4
   2c988:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2c98c:	b	2c974 <flatcc_json_printer_int16_enum_vector_field@@Base+0x184>

0002c990 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2c990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c994:	ldrb	lr, [r0, #27]
   2c998:	ldr	r9, [sp, #32]
   2c99c:	ldr	r8, [sp, #36]	; 0x24
   2c9a0:	cmp	lr, #0
   2c9a4:	beq	2c9b0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x20>
   2c9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c9ac:	b	2b7b8 <flatcc_json_printer_int32_vector_field@@Base>
   2c9b0:	mov	r5, r1
   2c9b4:	mov	r4, r0
   2c9b8:	mov	r1, r2
   2c9bc:	mov	r0, r5
   2c9c0:	mov	sl, r3
   2c9c4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2c9c8:	cmp	r0, #0
   2c9cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c9d0:	ldr	r3, [r5, #16]
   2c9d4:	add	r2, r3, #1
   2c9d8:	cmp	r3, #0
   2c9dc:	str	r2, [r5, #16]
   2c9e0:	beq	2c9f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x68>
   2c9e4:	ldr	r3, [r4, #20]
   2c9e8:	add	r2, r3, #1
   2c9ec:	str	r2, [r4, #20]
   2c9f0:	mov	r2, #44	; 0x2c
   2c9f4:	strb	r2, [r3]
   2c9f8:	ldr	r3, [r0]
   2c9fc:	mov	r2, r9
   2ca00:	mov	r1, sl
   2ca04:	add	r7, r0, r3
   2ca08:	ldr	r5, [r0, r3]
   2ca0c:	mov	r0, r4
   2ca10:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2ca14:	ldr	r3, [r4, #32]
   2ca18:	add	r6, r7, #4
   2ca1c:	cmp	r5, #0
   2ca20:	add	r3, r3, #1
   2ca24:	str	r3, [r4, #32]
   2ca28:	ldr	r3, [r4, #20]
   2ca2c:	add	r2, r3, #1
   2ca30:	str	r2, [r4, #20]
   2ca34:	mov	r2, #91	; 0x5b
   2ca38:	strb	r2, [r3]
   2ca3c:	beq	2ca7c <flatcc_json_printer_int32_enum_vector_field@@Base+0xec>
   2ca40:	ldrb	r3, [r4, #25]
   2ca44:	cmp	r3, #0
   2ca48:	beq	2cadc <flatcc_json_printer_int32_enum_vector_field@@Base+0x14c>
   2ca4c:	ldr	r3, [r4, #20]
   2ca50:	mov	r0, r4
   2ca54:	add	r2, r3, #1
   2ca58:	str	r2, [r4, #20]
   2ca5c:	mov	r2, #10
   2ca60:	strb	r2, [r3]
   2ca64:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2ca68:	mov	r0, r4
   2ca6c:	ldr	r1, [r7, #4]
   2ca70:	add	r6, r7, #8
   2ca74:	sub	r5, r5, #1
   2ca78:	blx	r8
   2ca7c:	mov	r7, #44	; 0x2c
   2ca80:	mov	r9, #10
   2ca84:	ldr	r3, [r4, #20]
   2ca88:	sub	r5, r5, #1
   2ca8c:	cmn	r5, #1
   2ca90:	add	r2, r3, #1
   2ca94:	bne	2cae8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x158>
   2ca98:	ldrb	r1, [r4, #25]
   2ca9c:	cmp	r1, #0
   2caa0:	beq	2cac4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   2caa4:	str	r2, [r4, #20]
   2caa8:	mov	r2, #10
   2caac:	mov	r0, r4
   2cab0:	strb	r2, [r3]
   2cab4:	ldr	r3, [r4, #32]
   2cab8:	sub	r3, r3, #1
   2cabc:	str	r3, [r4, #32]
   2cac0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cac4:	ldr	r3, [r4, #20]
   2cac8:	add	r2, r3, #1
   2cacc:	str	r2, [r4, #20]
   2cad0:	mov	r2, #93	; 0x5d
   2cad4:	strb	r2, [r3]
   2cad8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cadc:	mov	r0, r4
   2cae0:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2cae4:	b	2ca68 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd8>
   2cae8:	str	r2, [r4, #20]
   2caec:	strb	r7, [r3]
   2caf0:	ldrb	r3, [r4, #25]
   2caf4:	cmp	r3, #0
   2caf8:	beq	2cb24 <flatcc_json_printer_int32_enum_vector_field@@Base+0x194>
   2cafc:	ldr	r3, [r4, #20]
   2cb00:	mov	r0, r4
   2cb04:	add	r2, r3, #1
   2cb08:	str	r2, [r4, #20]
   2cb0c:	strb	r9, [r3]
   2cb10:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cb14:	mov	r0, r4
   2cb18:	ldr	r1, [r6], #4
   2cb1c:	blx	r8
   2cb20:	b	2ca84 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   2cb24:	mov	r0, r4
   2cb28:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2cb2c:	b	2cb14 <flatcc_json_printer_int32_enum_vector_field@@Base+0x184>

0002cb30 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2cb30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cb34:	ldrb	lr, [r0, #27]
   2cb38:	ldr	r9, [sp, #32]
   2cb3c:	ldr	r8, [sp, #36]	; 0x24
   2cb40:	cmp	lr, #0
   2cb44:	beq	2cb50 <flatcc_json_printer_int64_enum_vector_field@@Base+0x20>
   2cb48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cb4c:	b	2b954 <flatcc_json_printer_int64_vector_field@@Base>
   2cb50:	mov	r5, r1
   2cb54:	mov	r4, r0
   2cb58:	mov	r1, r2
   2cb5c:	mov	r0, r5
   2cb60:	mov	sl, r3
   2cb64:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2cb68:	cmp	r0, #0
   2cb6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cb70:	ldr	r3, [r5, #16]
   2cb74:	add	r2, r3, #1
   2cb78:	cmp	r3, #0
   2cb7c:	str	r2, [r5, #16]
   2cb80:	beq	2cb98 <flatcc_json_printer_int64_enum_vector_field@@Base+0x68>
   2cb84:	ldr	r3, [r4, #20]
   2cb88:	add	r2, r3, #1
   2cb8c:	str	r2, [r4, #20]
   2cb90:	mov	r2, #44	; 0x2c
   2cb94:	strb	r2, [r3]
   2cb98:	ldr	r3, [r0]
   2cb9c:	mov	r2, r9
   2cba0:	mov	r1, sl
   2cba4:	add	r7, r0, r3
   2cba8:	ldr	r5, [r0, r3]
   2cbac:	mov	r0, r4
   2cbb0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2cbb4:	ldr	r3, [r4, #32]
   2cbb8:	add	r6, r7, #4
   2cbbc:	cmp	r5, #0
   2cbc0:	add	r3, r3, #1
   2cbc4:	str	r3, [r4, #32]
   2cbc8:	ldr	r3, [r4, #20]
   2cbcc:	add	r2, r3, #1
   2cbd0:	str	r2, [r4, #20]
   2cbd4:	mov	r2, #91	; 0x5b
   2cbd8:	strb	r2, [r3]
   2cbdc:	beq	2cc1c <flatcc_json_printer_int64_enum_vector_field@@Base+0xec>
   2cbe0:	ldrb	r3, [r4, #25]
   2cbe4:	cmp	r3, #0
   2cbe8:	beq	2cc7c <flatcc_json_printer_int64_enum_vector_field@@Base+0x14c>
   2cbec:	ldr	r3, [r4, #20]
   2cbf0:	mov	r0, r4
   2cbf4:	add	r2, r3, #1
   2cbf8:	str	r2, [r4, #20]
   2cbfc:	mov	r2, #10
   2cc00:	strb	r2, [r3]
   2cc04:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cc08:	mov	r0, r4
   2cc0c:	ldrd	r2, [r7, #4]
   2cc10:	add	r6, r7, #12
   2cc14:	sub	r5, r5, #1
   2cc18:	blx	r8
   2cc1c:	mov	r7, #44	; 0x2c
   2cc20:	mov	r9, #10
   2cc24:	ldr	r3, [r4, #20]
   2cc28:	sub	r5, r5, #1
   2cc2c:	cmn	r5, #1
   2cc30:	add	r2, r3, #1
   2cc34:	bne	2cc88 <flatcc_json_printer_int64_enum_vector_field@@Base+0x158>
   2cc38:	ldrb	r1, [r4, #25]
   2cc3c:	cmp	r1, #0
   2cc40:	beq	2cc64 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   2cc44:	str	r2, [r4, #20]
   2cc48:	mov	r2, #10
   2cc4c:	mov	r0, r4
   2cc50:	strb	r2, [r3]
   2cc54:	ldr	r3, [r4, #32]
   2cc58:	sub	r3, r3, #1
   2cc5c:	str	r3, [r4, #32]
   2cc60:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cc64:	ldr	r3, [r4, #20]
   2cc68:	add	r2, r3, #1
   2cc6c:	str	r2, [r4, #20]
   2cc70:	mov	r2, #93	; 0x5d
   2cc74:	strb	r2, [r3]
   2cc78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cc7c:	mov	r0, r4
   2cc80:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2cc84:	b	2cc08 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd8>
   2cc88:	str	r2, [r4, #20]
   2cc8c:	strb	r7, [r3]
   2cc90:	ldrb	r3, [r4, #25]
   2cc94:	cmp	r3, #0
   2cc98:	beq	2ccc4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x194>
   2cc9c:	ldr	r3, [r4, #20]
   2cca0:	mov	r0, r4
   2cca4:	add	r2, r3, #1
   2cca8:	str	r2, [r4, #20]
   2ccac:	strb	r9, [r3]
   2ccb0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2ccb4:	mov	r0, r4
   2ccb8:	ldrd	r2, [r6], #8
   2ccbc:	blx	r8
   2ccc0:	b	2cc24 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   2ccc4:	mov	r0, r4
   2ccc8:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2cccc:	b	2ccb4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x184>

0002ccd0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2ccd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ccd4:	ldrb	lr, [r0, #27]
   2ccd8:	ldr	r9, [sp, #32]
   2ccdc:	ldr	r8, [sp, #36]	; 0x24
   2cce0:	cmp	lr, #0
   2cce4:	beq	2ccf0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x20>
   2cce8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ccec:	b	2baf0 <flatcc_json_printer_bool_vector_field@@Base>
   2ccf0:	mov	r5, r1
   2ccf4:	mov	r4, r0
   2ccf8:	mov	r1, r2
   2ccfc:	mov	r0, r5
   2cd00:	mov	sl, r3
   2cd04:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2cd08:	cmp	r0, #0
   2cd0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cd10:	ldr	r3, [r5, #16]
   2cd14:	add	r2, r3, #1
   2cd18:	cmp	r3, #0
   2cd1c:	str	r2, [r5, #16]
   2cd20:	beq	2cd38 <flatcc_json_printer_bool_enum_vector_field@@Base+0x68>
   2cd24:	ldr	r3, [r4, #20]
   2cd28:	add	r2, r3, #1
   2cd2c:	str	r2, [r4, #20]
   2cd30:	mov	r2, #44	; 0x2c
   2cd34:	strb	r2, [r3]
   2cd38:	ldr	r3, [r0]
   2cd3c:	mov	r2, r9
   2cd40:	mov	r1, sl
   2cd44:	add	r7, r0, r3
   2cd48:	ldr	r5, [r0, r3]
   2cd4c:	mov	r0, r4
   2cd50:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2cd54:	ldr	r3, [r4, #32]
   2cd58:	add	r6, r7, #4
   2cd5c:	cmp	r5, #0
   2cd60:	add	r3, r3, #1
   2cd64:	str	r3, [r4, #32]
   2cd68:	ldr	r3, [r4, #20]
   2cd6c:	add	r2, r3, #1
   2cd70:	str	r2, [r4, #20]
   2cd74:	mov	r2, #91	; 0x5b
   2cd78:	strb	r2, [r3]
   2cd7c:	beq	2cdbc <flatcc_json_printer_bool_enum_vector_field@@Base+0xec>
   2cd80:	ldrb	r3, [r4, #25]
   2cd84:	cmp	r3, #0
   2cd88:	beq	2ce1c <flatcc_json_printer_bool_enum_vector_field@@Base+0x14c>
   2cd8c:	ldr	r3, [r4, #20]
   2cd90:	mov	r0, r4
   2cd94:	add	r2, r3, #1
   2cd98:	str	r2, [r4, #20]
   2cd9c:	mov	r2, #10
   2cda0:	strb	r2, [r3]
   2cda4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cda8:	ldrb	r1, [r7, #4]
   2cdac:	mov	r0, r4
   2cdb0:	add	r6, r7, #5
   2cdb4:	sub	r5, r5, #1
   2cdb8:	blx	r8
   2cdbc:	add	r5, r6, r5
   2cdc0:	mov	r7, #44	; 0x2c
   2cdc4:	mov	r9, #10
   2cdc8:	ldr	r3, [r4, #20]
   2cdcc:	cmp	r6, r5
   2cdd0:	add	r2, r3, #1
   2cdd4:	bne	2ce28 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   2cdd8:	ldrb	r1, [r4, #25]
   2cddc:	cmp	r1, #0
   2cde0:	beq	2ce04 <flatcc_json_printer_bool_enum_vector_field@@Base+0x134>
   2cde4:	str	r2, [r4, #20]
   2cde8:	mov	r2, #10
   2cdec:	mov	r0, r4
   2cdf0:	strb	r2, [r3]
   2cdf4:	ldr	r3, [r4, #32]
   2cdf8:	sub	r3, r3, #1
   2cdfc:	str	r3, [r4, #32]
   2ce00:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2ce04:	ldr	r3, [r4, #20]
   2ce08:	add	r2, r3, #1
   2ce0c:	str	r2, [r4, #20]
   2ce10:	mov	r2, #93	; 0x5d
   2ce14:	strb	r2, [r3]
   2ce18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ce1c:	mov	r0, r4
   2ce20:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2ce24:	b	2cda8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd8>
   2ce28:	str	r2, [r4, #20]
   2ce2c:	strb	r7, [r3]
   2ce30:	ldrb	r3, [r4, #25]
   2ce34:	cmp	r3, #0
   2ce38:	beq	2ce64 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   2ce3c:	ldr	r3, [r4, #20]
   2ce40:	mov	r0, r4
   2ce44:	add	r2, r3, #1
   2ce48:	str	r2, [r4, #20]
   2ce4c:	strb	r9, [r3]
   2ce50:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2ce54:	ldrb	r1, [r6], #1
   2ce58:	mov	r0, r4
   2ce5c:	blx	r8
   2ce60:	b	2cdc8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   2ce64:	mov	r0, r4
   2ce68:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2ce6c:	b	2ce54 <flatcc_json_printer_bool_enum_vector_field@@Base+0x184>

0002ce70 <flatcc_json_printer_struct_vector_field@@Base>:
   2ce70:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce74:	mov	r5, r1
   2ce78:	mov	r4, r0
   2ce7c:	mov	r1, r2
   2ce80:	mov	r0, r5
   2ce84:	mov	r8, r3
   2ce88:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2ce8c:	cmp	r0, #0
   2ce90:	ldr	r9, [sp, #44]	; 0x2c
   2ce94:	ldr	r7, [sp, #48]	; 0x30
   2ce98:	beq	2d00c <flatcc_json_printer_struct_vector_field@@Base+0x19c>
   2ce9c:	ldr	r3, [r5, #16]
   2cea0:	add	r2, r3, #1
   2cea4:	cmp	r3, #0
   2cea8:	str	r2, [r5, #16]
   2ceac:	beq	2cec4 <flatcc_json_printer_struct_vector_field@@Base+0x54>
   2ceb0:	ldr	r3, [r4, #20]
   2ceb4:	add	r2, r3, #1
   2ceb8:	str	r2, [r4, #20]
   2cebc:	mov	r2, #44	; 0x2c
   2cec0:	strb	r2, [r3]
   2cec4:	ldr	r2, [r0]
   2cec8:	mov	r1, r8
   2cecc:	add	r6, r0, r2
   2ced0:	ldr	r5, [r0, r2]
   2ced4:	mov	r0, r4
   2ced8:	add	r6, r6, #4
   2cedc:	ldr	r2, [sp, #40]	; 0x28
   2cee0:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2cee4:	ldr	r3, [r4, #32]
   2cee8:	cmp	r5, #0
   2ceec:	add	r3, r3, #1
   2cef0:	str	r3, [r4, #32]
   2cef4:	ldr	r3, [r4, #20]
   2cef8:	add	r2, r3, #1
   2cefc:	str	r2, [r4, #20]
   2cf00:	mov	r2, #91	; 0x5b
   2cf04:	strb	r2, [r3]
   2cf08:	beq	2cfac <flatcc_json_printer_struct_vector_field@@Base+0x13c>
   2cf0c:	ldrb	r3, [r4, #25]
   2cf10:	cmp	r3, #0
   2cf14:	beq	2d014 <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   2cf18:	ldr	r3, [r4, #20]
   2cf1c:	mov	r0, r4
   2cf20:	add	r2, r3, #1
   2cf24:	str	r2, [r4, #20]
   2cf28:	mov	r2, #10
   2cf2c:	strb	r2, [r3]
   2cf30:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cf34:	ldr	r3, [r4, #32]
   2cf38:	mov	r1, r6
   2cf3c:	mov	r0, r4
   2cf40:	add	r3, r3, #1
   2cf44:	str	r3, [r4, #32]
   2cf48:	ldr	r3, [r4, #20]
   2cf4c:	add	r2, r3, #1
   2cf50:	str	r2, [r4, #20]
   2cf54:	mov	r2, #123	; 0x7b
   2cf58:	strb	r2, [r3]
   2cf5c:	blx	r7
   2cf60:	ldrb	r3, [r4, #25]
   2cf64:	cmp	r3, #0
   2cf68:	beq	2cf94 <flatcc_json_printer_struct_vector_field@@Base+0x124>
   2cf6c:	ldr	r3, [r4, #20]
   2cf70:	mov	r0, r4
   2cf74:	add	r2, r3, #1
   2cf78:	str	r2, [r4, #20]
   2cf7c:	mov	r2, #10
   2cf80:	strb	r2, [r3]
   2cf84:	ldr	r3, [r4, #32]
   2cf88:	sub	r3, r3, #1
   2cf8c:	str	r3, [r4, #32]
   2cf90:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cf94:	ldr	r3, [r4, #20]
   2cf98:	sub	r5, r5, #1
   2cf9c:	add	r2, r3, #1
   2cfa0:	str	r2, [r4, #20]
   2cfa4:	mov	r2, #125	; 0x7d
   2cfa8:	strb	r2, [r3]
   2cfac:	mov	sl, #44	; 0x2c
   2cfb0:	mov	r8, #10
   2cfb4:	mov	fp, #123	; 0x7b
   2cfb8:	ldr	r3, [r4, #20]
   2cfbc:	sub	r5, r5, #1
   2cfc0:	cmn	r5, #1
   2cfc4:	add	r2, r3, #1
   2cfc8:	bne	2d020 <flatcc_json_printer_struct_vector_field@@Base+0x1b0>
   2cfcc:	ldrb	r1, [r4, #25]
   2cfd0:	cmp	r1, #0
   2cfd4:	beq	2cff8 <flatcc_json_printer_struct_vector_field@@Base+0x188>
   2cfd8:	str	r2, [r4, #20]
   2cfdc:	mov	r2, #10
   2cfe0:	mov	r0, r4
   2cfe4:	strb	r2, [r3]
   2cfe8:	ldr	r3, [r4, #32]
   2cfec:	sub	r3, r3, #1
   2cff0:	str	r3, [r4, #32]
   2cff4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2cff8:	ldr	r3, [r4, #20]
   2cffc:	add	r2, r3, #1
   2d000:	str	r2, [r4, #20]
   2d004:	mov	r2, #93	; 0x5d
   2d008:	strb	r2, [r3]
   2d00c:	add	sp, sp, #4
   2d010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d014:	mov	r0, r4
   2d018:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2d01c:	b	2cf34 <flatcc_json_printer_struct_vector_field@@Base+0xc4>
   2d020:	str	r2, [r4, #20]
   2d024:	add	r6, r6, r9
   2d028:	strb	sl, [r3]
   2d02c:	ldrb	r3, [r4, #25]
   2d030:	cmp	r3, #0
   2d034:	beq	2d0c0 <flatcc_json_printer_struct_vector_field@@Base+0x250>
   2d038:	ldr	r3, [r4, #20]
   2d03c:	mov	r0, r4
   2d040:	add	r2, r3, #1
   2d044:	str	r2, [r4, #20]
   2d048:	strb	r8, [r3]
   2d04c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d050:	ldr	r3, [r4, #32]
   2d054:	mov	r1, r6
   2d058:	mov	r0, r4
   2d05c:	add	r3, r3, #1
   2d060:	str	r3, [r4, #32]
   2d064:	ldr	r3, [r4, #20]
   2d068:	add	r2, r3, #1
   2d06c:	str	r2, [r4, #20]
   2d070:	strb	fp, [r3]
   2d074:	blx	r7
   2d078:	ldrb	r3, [r4, #25]
   2d07c:	cmp	r3, #0
   2d080:	beq	2d0a8 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2d084:	ldr	r3, [r4, #20]
   2d088:	mov	r0, r4
   2d08c:	add	r2, r3, #1
   2d090:	str	r2, [r4, #20]
   2d094:	strb	r8, [r3]
   2d098:	ldr	r3, [r4, #32]
   2d09c:	sub	r3, r3, #1
   2d0a0:	str	r3, [r4, #32]
   2d0a4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d0a8:	ldr	r3, [r4, #20]
   2d0ac:	add	r2, r3, #1
   2d0b0:	str	r2, [r4, #20]
   2d0b4:	mov	r2, #125	; 0x7d
   2d0b8:	strb	r2, [r3]
   2d0bc:	b	2cfb8 <flatcc_json_printer_struct_vector_field@@Base+0x148>
   2d0c0:	mov	r0, r4
   2d0c4:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2d0c8:	b	2d050 <flatcc_json_printer_struct_vector_field@@Base+0x1e0>

0002d0cc <flatcc_json_printer_string_vector_field@@Base>:
   2d0cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d0d0:	mov	r5, r1
   2d0d4:	mov	r4, r0
   2d0d8:	mov	r1, r2
   2d0dc:	mov	r0, r5
   2d0e0:	mov	r7, r3
   2d0e4:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d0e8:	cmp	r0, #0
   2d0ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d0f0:	ldr	r2, [r5, #16]
   2d0f4:	add	r3, r2, #1
   2d0f8:	cmp	r2, #0
   2d0fc:	str	r3, [r5, #16]
   2d100:	beq	2d118 <flatcc_json_printer_string_vector_field@@Base+0x4c>
   2d104:	ldr	r2, [r4, #20]
   2d108:	add	r3, r2, #1
   2d10c:	str	r3, [r4, #20]
   2d110:	mov	r3, #44	; 0x2c
   2d114:	strb	r3, [r2]
   2d118:	ldr	r2, [r0]
   2d11c:	mov	r1, r7
   2d120:	add	r5, r0, r2
   2d124:	ldr	r6, [r0, r2]
   2d128:	mov	r0, r4
   2d12c:	ldr	r2, [sp, #32]
   2d130:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2d134:	ldr	r3, [r4, #32]
   2d138:	cmp	r6, #0
   2d13c:	add	r3, r3, #1
   2d140:	str	r3, [r4, #32]
   2d144:	ldr	r3, [r4, #20]
   2d148:	add	r2, r3, #1
   2d14c:	str	r2, [r4, #20]
   2d150:	mov	r2, #91	; 0x5b
   2d154:	strb	r2, [r3]
   2d158:	beq	2d19c <flatcc_json_printer_string_vector_field@@Base+0xd0>
   2d15c:	ldrb	r3, [r4, #25]
   2d160:	cmp	r3, #0
   2d164:	beq	2d200 <flatcc_json_printer_string_vector_field@@Base+0x134>
   2d168:	ldr	r3, [r4, #20]
   2d16c:	mov	r0, r4
   2d170:	add	r2, r3, #1
   2d174:	str	r2, [r4, #20]
   2d178:	mov	r2, #10
   2d17c:	strb	r2, [r3]
   2d180:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d184:	ldr	r1, [r5, #4]
   2d188:	mov	r0, r4
   2d18c:	sub	r6, r6, #1
   2d190:	add	r1, r1, #4
   2d194:	add	r1, r5, r1
   2d198:	bl	28180 <flatcc_json_parser_struct_as_root@@Base+0x1064>
   2d19c:	add	r5, r5, #8
   2d1a0:	mov	r8, #44	; 0x2c
   2d1a4:	mov	r9, #10
   2d1a8:	ldr	r3, [r4, #20]
   2d1ac:	sub	r6, r6, #1
   2d1b0:	cmn	r6, #1
   2d1b4:	add	r2, r3, #1
   2d1b8:	bne	2d20c <flatcc_json_printer_string_vector_field@@Base+0x140>
   2d1bc:	ldrb	r1, [r4, #25]
   2d1c0:	cmp	r1, #0
   2d1c4:	beq	2d1e8 <flatcc_json_printer_string_vector_field@@Base+0x11c>
   2d1c8:	str	r2, [r4, #20]
   2d1cc:	mov	r2, #10
   2d1d0:	mov	r0, r4
   2d1d4:	strb	r2, [r3]
   2d1d8:	ldr	r3, [r4, #32]
   2d1dc:	sub	r3, r3, #1
   2d1e0:	str	r3, [r4, #32]
   2d1e4:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d1e8:	ldr	r3, [r4, #20]
   2d1ec:	add	r2, r3, #1
   2d1f0:	str	r2, [r4, #20]
   2d1f4:	mov	r2, #93	; 0x5d
   2d1f8:	strb	r2, [r3]
   2d1fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d200:	mov	r0, r4
   2d204:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2d208:	b	2d184 <flatcc_json_printer_string_vector_field@@Base+0xb8>
   2d20c:	str	r2, [r4, #20]
   2d210:	mov	r7, r5
   2d214:	strb	r8, [r3]
   2d218:	ldrb	r3, [r4, #25]
   2d21c:	cmp	r3, #0
   2d220:	beq	2d254 <flatcc_json_printer_string_vector_field@@Base+0x188>
   2d224:	ldr	r3, [r4, #20]
   2d228:	mov	r0, r4
   2d22c:	add	r2, r3, #1
   2d230:	str	r2, [r4, #20]
   2d234:	strb	r9, [r3]
   2d238:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d23c:	ldr	r1, [r7]
   2d240:	mov	r0, r4
   2d244:	add	r5, r5, #4
   2d248:	add	r1, r7, r1
   2d24c:	bl	28180 <flatcc_json_parser_struct_as_root@@Base+0x1064>
   2d250:	b	2d1a8 <flatcc_json_printer_string_vector_field@@Base+0xdc>
   2d254:	mov	r0, r4
   2d258:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2d25c:	b	2d23c <flatcc_json_printer_string_vector_field@@Base+0x170>

0002d260 <flatcc_json_printer_table_vector_field@@Base>:
   2d260:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d264:	mov	r6, r1
   2d268:	mov	r4, r0
   2d26c:	mov	r1, r2
   2d270:	mov	r0, r6
   2d274:	mov	r9, r3
   2d278:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d27c:	cmp	r0, #0
   2d280:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d284:	ldr	r3, [r6, #16]
   2d288:	add	r2, r3, #1
   2d28c:	cmp	r3, #0
   2d290:	str	r2, [r6, #16]
   2d294:	beq	2d2ac <flatcc_json_printer_table_vector_field@@Base+0x4c>
   2d298:	ldr	r2, [r4, #20]
   2d29c:	add	r3, r2, #1
   2d2a0:	str	r3, [r4, #20]
   2d2a4:	mov	r3, #44	; 0x2c
   2d2a8:	strb	r3, [r2]
   2d2ac:	ldr	r2, [r0]
   2d2b0:	mov	r1, r9
   2d2b4:	add	r8, r0, r2
   2d2b8:	ldr	r5, [r0, r2]
   2d2bc:	mov	r0, r4
   2d2c0:	add	r7, r8, #4
   2d2c4:	ldr	r2, [sp, #32]
   2d2c8:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2d2cc:	ldr	r3, [r4, #32]
   2d2d0:	cmp	r5, #0
   2d2d4:	add	r3, r3, #1
   2d2d8:	str	r3, [r4, #32]
   2d2dc:	ldr	r3, [r4, #20]
   2d2e0:	add	r2, r3, #1
   2d2e4:	str	r2, [r4, #20]
   2d2e8:	mov	r2, #91	; 0x5b
   2d2ec:	strb	r2, [r3]
   2d2f0:	beq	2d310 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   2d2f4:	ldr	r1, [r8, #4]
   2d2f8:	mov	r0, r4
   2d2fc:	sub	r5, r5, #1
   2d300:	ldr	r2, [r6, #12]
   2d304:	ldr	r3, [sp, #36]	; 0x24
   2d308:	add	r1, r7, r1
   2d30c:	bl	28668 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   2d310:	mov	r8, #44	; 0x2c
   2d314:	ldr	r3, [r4, #20]
   2d318:	sub	r5, r5, #1
   2d31c:	cmn	r5, #1
   2d320:	add	r2, r3, #1
   2d324:	bne	2d36c <flatcc_json_printer_table_vector_field@@Base+0x10c>
   2d328:	ldrb	r1, [r4, #25]
   2d32c:	cmp	r1, #0
   2d330:	beq	2d354 <flatcc_json_printer_table_vector_field@@Base+0xf4>
   2d334:	str	r2, [r4, #20]
   2d338:	mov	r2, #10
   2d33c:	mov	r0, r4
   2d340:	strb	r2, [r3]
   2d344:	ldr	r3, [r4, #32]
   2d348:	sub	r3, r3, #1
   2d34c:	str	r3, [r4, #32]
   2d350:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d354:	ldr	r3, [r4, #20]
   2d358:	add	r2, r3, #1
   2d35c:	str	r2, [r4, #20]
   2d360:	mov	r2, #93	; 0x5d
   2d364:	strb	r2, [r3]
   2d368:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d36c:	str	r2, [r4, #20]
   2d370:	mov	r0, r4
   2d374:	strb	r8, [r3]
   2d378:	ldr	r1, [r7, #4]!
   2d37c:	ldr	r2, [r6, #12]
   2d380:	ldr	r3, [sp, #36]	; 0x24
   2d384:	add	r1, r7, r1
   2d388:	bl	28668 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   2d38c:	b	2d314 <flatcc_json_printer_table_vector_field@@Base+0xb4>

0002d390 <flatcc_json_printer_union_vector_field@@Base>:
   2d390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d394:	mov	r7, r1
   2d398:	sub	r6, r2, #1
   2d39c:	sub	sp, sp, #132	; 0x84
   2d3a0:	mov	r1, r6
   2d3a4:	mov	r4, r0
   2d3a8:	mov	r0, r7
   2d3ac:	mov	fp, r3
   2d3b0:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d3b4:	mov	r5, r0
   2d3b8:	mov	r1, r2
   2d3bc:	mov	r0, r7
   2d3c0:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d3c4:	ldr	sl, [sp, #168]	; 0xa8
   2d3c8:	ldr	r3, [r7, #12]
   2d3cc:	ldr	r9, [sp, #176]	; 0xb0
   2d3d0:	cmp	sl, #100	; 0x64
   2d3d4:	str	r3, [sp, #12]
   2d3d8:	ble	2d400 <flatcc_json_printer_union_vector_field@@Base+0x70>
   2d3dc:	ldr	r3, [r4, #36]	; 0x24
   2d3e0:	movw	r2, #843	; 0x34b
   2d3e4:	ldr	r1, [pc, #584]	; 2d634 <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   2d3e8:	ldr	r0, [pc, #584]	; 2d638 <flatcc_json_printer_union_vector_field@@Base+0x2a8>
   2d3ec:	cmp	r3, #0
   2d3f0:	moveq	r3, #1
   2d3f4:	streq	r3, [r4, #36]	; 0x24
   2d3f8:	ldr	r3, [pc, #572]	; 2d63c <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   2d3fc:	bl	14620 <__assert_fail@plt>
   2d400:	add	r3, sp, #20
   2d404:	mov	r8, r0
   2d408:	mov	r2, sl
   2d40c:	mov	r1, fp
   2d410:	mov	r0, r3
   2d414:	bl	14548 <memcpy@plt>
   2d418:	ldr	r2, [pc, #544]	; 2d640 <flatcc_json_printer_union_vector_field@@Base+0x2b0>
   2d41c:	mov	r3, r0
   2d420:	add	r1, r0, sl
   2d424:	cmp	r8, #0
   2d428:	cmpne	r5, #0
   2d42c:	ldr	r0, [r2]
   2d430:	ldrb	r2, [r2, #4]
   2d434:	str	r0, [r3, sl]
   2d438:	strb	r2, [r1, #4]
   2d43c:	beq	2d564 <flatcc_json_printer_union_vector_field@@Base+0x1d4>
   2d440:	ldr	r2, [sp, #172]	; 0xac
   2d444:	mov	r1, r7
   2d448:	mov	r0, r4
   2d44c:	str	r2, [sp, #4]
   2d450:	add	r2, sl, #5
   2d454:	str	r2, [sp]
   2d458:	mov	r2, r6
   2d45c:	bl	2bfcc <flatcc_json_printer_uint8_enum_vector_field@@Base>
   2d460:	ldr	r3, [r7, #16]
   2d464:	add	r2, r3, #1
   2d468:	cmp	r3, #0
   2d46c:	str	r2, [r7, #16]
   2d470:	beq	2d488 <flatcc_json_printer_union_vector_field@@Base+0xf8>
   2d474:	ldr	r3, [r4, #20]
   2d478:	add	r2, r3, #1
   2d47c:	str	r2, [r4, #20]
   2d480:	mov	r2, #44	; 0x2c
   2d484:	strb	r2, [r3]
   2d488:	ldr	r3, [r8]
   2d48c:	mov	r2, sl
   2d490:	mov	r1, fp
   2d494:	mov	r0, r4
   2d498:	ldr	r6, [r5]
   2d49c:	add	r7, r8, r3
   2d4a0:	add	r7, r7, #4
   2d4a4:	add	r6, r5, r6
   2d4a8:	ldr	r5, [r8, r3]
   2d4ac:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2d4b0:	ldr	r3, [r4, #32]
   2d4b4:	add	r8, r6, #4
   2d4b8:	cmp	r5, #0
   2d4bc:	add	r3, r3, #1
   2d4c0:	str	r3, [r4, #32]
   2d4c4:	ldr	r3, [r4, #20]
   2d4c8:	add	r2, r3, #1
   2d4cc:	str	r2, [r4, #20]
   2d4d0:	mov	r2, #91	; 0x5b
   2d4d4:	strb	r2, [r3]
   2d4d8:	beq	2d500 <flatcc_json_printer_union_vector_field@@Base+0x170>
   2d4dc:	ldrb	r3, [r6, #4]
   2d4e0:	cmp	r3, #0
   2d4e4:	beq	2d56c <flatcc_json_printer_union_vector_field@@Base+0x1dc>
   2d4e8:	add	r1, sp, #8
   2d4ec:	mov	r0, r4
   2d4f0:	str	r7, [sp, #8]
   2d4f4:	strb	r3, [sp, #16]
   2d4f8:	blx	r9
   2d4fc:	sub	r5, r5, #1
   2d500:	add	r5, r5, #4
   2d504:	mov	sl, #110	; 0x6e
   2d508:	add	r5, r6, r5
   2d50c:	mov	fp, #117	; 0x75
   2d510:	mov	r6, #44	; 0x2c
   2d514:	ldr	r3, [r4, #20]
   2d518:	cmp	r8, r5
   2d51c:	add	r2, r3, #1
   2d520:	bne	2d5bc <flatcc_json_printer_union_vector_field@@Base+0x22c>
   2d524:	ldrb	r1, [r4, #25]
   2d528:	cmp	r1, #0
   2d52c:	beq	2d550 <flatcc_json_printer_union_vector_field@@Base+0x1c0>
   2d530:	str	r2, [r4, #20]
   2d534:	mov	r2, #10
   2d538:	mov	r0, r4
   2d53c:	strb	r2, [r3]
   2d540:	ldr	r3, [r4, #32]
   2d544:	sub	r3, r3, #1
   2d548:	str	r3, [r4, #32]
   2d54c:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d550:	ldr	r3, [r4, #20]
   2d554:	add	r2, r3, #1
   2d558:	str	r2, [r4, #20]
   2d55c:	mov	r2, #93	; 0x5d
   2d560:	strb	r2, [r3]
   2d564:	add	sp, sp, #132	; 0x84
   2d568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d56c:	ldr	r3, [r4, #20]
   2d570:	add	r2, r3, #1
   2d574:	str	r2, [r4, #20]
   2d578:	mov	r2, #110	; 0x6e
   2d57c:	strb	r2, [r3]
   2d580:	ldr	r3, [r4, #20]
   2d584:	add	r2, r3, #1
   2d588:	str	r2, [r4, #20]
   2d58c:	mov	r2, #117	; 0x75
   2d590:	strb	r2, [r3]
   2d594:	ldr	r3, [r4, #20]
   2d598:	add	r2, r3, #1
   2d59c:	str	r2, [r4, #20]
   2d5a0:	mov	r2, #108	; 0x6c
   2d5a4:	strb	r2, [r3]
   2d5a8:	ldr	r3, [r4, #20]
   2d5ac:	add	r1, r3, #1
   2d5b0:	str	r1, [r4, #20]
   2d5b4:	strb	r2, [r3]
   2d5b8:	b	2d4fc <flatcc_json_printer_union_vector_field@@Base+0x16c>
   2d5bc:	ldrb	r1, [r8, #1]!
   2d5c0:	add	r7, r7, #4
   2d5c4:	str	r2, [r4, #20]
   2d5c8:	strb	r6, [r3]
   2d5cc:	cmp	r1, #0
   2d5d0:	beq	2d5ec <flatcc_json_printer_union_vector_field@@Base+0x25c>
   2d5d4:	mov	r0, r4
   2d5d8:	str	r7, [sp, #8]
   2d5dc:	strb	r1, [sp, #16]
   2d5e0:	add	r1, sp, #8
   2d5e4:	blx	r9
   2d5e8:	b	2d514 <flatcc_json_printer_union_vector_field@@Base+0x184>
   2d5ec:	ldr	r3, [r4, #20]
   2d5f0:	add	r2, r3, #1
   2d5f4:	str	r2, [r4, #20]
   2d5f8:	strb	sl, [r3]
   2d5fc:	ldr	r3, [r4, #20]
   2d600:	add	r2, r3, #1
   2d604:	str	r2, [r4, #20]
   2d608:	strb	fp, [r3]
   2d60c:	ldr	r3, [r4, #20]
   2d610:	add	r2, r3, #1
   2d614:	str	r2, [r4, #20]
   2d618:	mov	r2, #108	; 0x6c
   2d61c:	strb	r2, [r3]
   2d620:	ldr	r3, [r4, #20]
   2d624:	add	r1, r3, #1
   2d628:	str	r1, [r4, #20]
   2d62c:	strb	r2, [r3]
   2d630:	b	2d514 <flatcc_json_printer_union_vector_field@@Base+0x184>
   2d634:	andeq	r4, r3, sp, asr r8
   2d638:	strdeq	r4, [r3], -lr
   2d63c:	strdeq	r4, [r3], -sp
   2d640:	andeq	r4, r3, r9, lsl sl

0002d644 <flatcc_json_printer_table_field@@Base>:
   2d644:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d648:	mov	r5, r1
   2d64c:	mov	r4, r0
   2d650:	mov	r1, r2
   2d654:	mov	r0, r5
   2d658:	mov	r8, r3
   2d65c:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d660:	subs	r6, r0, #0
   2d664:	ldr	r9, [sp, #32]
   2d668:	ldr	r7, [sp, #36]	; 0x24
   2d66c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d670:	ldr	r2, [r5, #16]
   2d674:	add	r3, r2, #1
   2d678:	cmp	r2, #0
   2d67c:	str	r3, [r5, #16]
   2d680:	beq	2d698 <flatcc_json_printer_table_field@@Base+0x54>
   2d684:	ldr	r2, [r4, #20]
   2d688:	add	r3, r2, #1
   2d68c:	str	r3, [r4, #20]
   2d690:	mov	r3, #44	; 0x2c
   2d694:	strb	r3, [r2]
   2d698:	mov	r2, r9
   2d69c:	mov	r1, r8
   2d6a0:	mov	r0, r4
   2d6a4:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2d6a8:	ldr	r1, [r6]
   2d6ac:	mov	r3, r7
   2d6b0:	mov	r0, r4
   2d6b4:	ldr	r2, [r5, #12]
   2d6b8:	add	r1, r6, r1
   2d6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d6c0:	b	28668 <flatcc_json_parser_struct_as_root@@Base+0x154c>

0002d6c4 <flatcc_json_printer_union_field@@Base>:
   2d6c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d6c8:	mov	r5, r1
   2d6cc:	sub	sp, sp, #20
   2d6d0:	sub	r1, r2, #1
   2d6d4:	mov	r4, r0
   2d6d8:	mov	r0, r5
   2d6dc:	mov	r8, r3
   2d6e0:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d6e4:	mov	r7, r0
   2d6e8:	mov	r1, r2
   2d6ec:	mov	r0, r5
   2d6f0:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2d6f4:	cmp	r7, #0
   2d6f8:	cmpne	r0, #0
   2d6fc:	ldr	r6, [sp, #48]	; 0x30
   2d700:	beq	2d870 <flatcc_json_printer_union_field@@Base+0x1ac>
   2d704:	ldr	r3, [r5, #16]
   2d708:	mov	r9, r0
   2d70c:	ldrb	r7, [r7]
   2d710:	add	r2, r3, #1
   2d714:	cmp	r3, #0
   2d718:	str	r2, [r5, #16]
   2d71c:	beq	2d734 <flatcc_json_printer_union_field@@Base+0x70>
   2d720:	ldr	r3, [r4, #20]
   2d724:	add	r2, r3, #1
   2d728:	str	r2, [r4, #20]
   2d72c:	mov	r2, #44	; 0x2c
   2d730:	strb	r2, [r3]
   2d734:	ldrb	r3, [r4, #25]
   2d738:	cmp	r3, #0
   2d73c:	beq	2d878 <flatcc_json_printer_union_field@@Base+0x1b4>
   2d740:	ldr	r3, [r4, #20]
   2d744:	mov	r0, r4
   2d748:	add	r2, r3, #1
   2d74c:	str	r2, [r4, #20]
   2d750:	mov	r2, #10
   2d754:	strb	r2, [r3]
   2d758:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d75c:	ldr	r3, [r4, #20]
   2d760:	mov	r2, #34	; 0x22
   2d764:	mov	r1, r8
   2d768:	strb	r2, [r3]
   2d76c:	ldrb	r3, [r4, #26]
   2d770:	ldr	r2, [r4, #16]
   2d774:	ldr	r0, [r4, #20]
   2d778:	cmp	r3, #0
   2d77c:	addeq	r0, r0, #1
   2d780:	add	r3, r0, r6
   2d784:	cmp	r2, r3
   2d788:	mov	r2, r6
   2d78c:	str	r0, [r4, #20]
   2d790:	bls	2d884 <flatcc_json_printer_union_field@@Base+0x1c0>
   2d794:	bl	14548 <memcpy@plt>
   2d798:	ldr	r3, [r4, #20]
   2d79c:	add	r3, r3, r6
   2d7a0:	str	r3, [r4, #20]
   2d7a4:	mov	r2, #5
   2d7a8:	ldr	r1, [pc, #244]	; 2d8a4 <flatcc_json_printer_union_field@@Base+0x1e0>
   2d7ac:	mov	r0, r4
   2d7b0:	bl	27f34 <flatcc_json_parser_struct_as_root@@Base+0xe18>
   2d7b4:	ldr	r3, [r4, #20]
   2d7b8:	mov	r2, #34	; 0x22
   2d7bc:	strb	r2, [r3]
   2d7c0:	ldrb	r3, [r4, #26]
   2d7c4:	ldr	r1, [r4, #20]
   2d7c8:	clz	r3, r3
   2d7cc:	lsr	r3, r3, #5
   2d7d0:	add	r2, r1, r3
   2d7d4:	add	r2, r2, #1
   2d7d8:	str	r2, [r4, #20]
   2d7dc:	mov	r2, #58	; 0x3a
   2d7e0:	strb	r2, [r1, r3]
   2d7e4:	mov	r2, #32
   2d7e8:	ldr	r3, [r4, #20]
   2d7ec:	strb	r2, [r3]
   2d7f0:	ldrb	r3, [r4, #25]
   2d7f4:	ldr	r1, [r4, #20]
   2d7f8:	cmp	r3, #0
   2d7fc:	addne	r1, r1, #1
   2d800:	ldrb	r3, [r4, #27]
   2d804:	str	r1, [r4, #20]
   2d808:	cmp	r3, #0
   2d80c:	beq	2d890 <flatcc_json_printer_union_field@@Base+0x1cc>
   2d810:	mov	r0, r7
   2d814:	bl	28488 <flatcc_json_parser_struct_as_root@@Base+0x136c>
   2d818:	ldr	r3, [r4, #20]
   2d81c:	add	r0, r3, r0
   2d820:	str	r0, [r4, #20]
   2d824:	cmp	r7, #0
   2d828:	beq	2d870 <flatcc_json_printer_union_field@@Base+0x1ac>
   2d82c:	ldr	r3, [r4, #20]
   2d830:	mov	r1, r8
   2d834:	mov	r0, r4
   2d838:	add	r2, r3, #1
   2d83c:	str	r2, [r4, #20]
   2d840:	mov	r2, #44	; 0x2c
   2d844:	strb	r2, [r3]
   2d848:	mov	r2, r6
   2d84c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2d850:	ldr	r3, [r5, #12]
   2d854:	add	r1, sp, #4
   2d858:	mov	r0, r4
   2d85c:	str	r9, [sp, #4]
   2d860:	str	r3, [sp, #8]
   2d864:	ldr	r3, [sp, #56]	; 0x38
   2d868:	strb	r7, [sp, #12]
   2d86c:	blx	r3
   2d870:	add	sp, sp, #20
   2d874:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d878:	mov	r0, r4
   2d87c:	bl	283e8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   2d880:	b	2d75c <flatcc_json_printer_union_field@@Base+0x98>
   2d884:	mov	r0, r4
   2d888:	bl	27f34 <flatcc_json_parser_struct_as_root@@Base+0xe18>
   2d88c:	b	2d7a4 <flatcc_json_printer_union_field@@Base+0xe0>
   2d890:	mov	r1, r7
   2d894:	mov	r0, r4
   2d898:	ldr	r3, [sp, #52]	; 0x34
   2d89c:	blx	r3
   2d8a0:	b	2d824 <flatcc_json_printer_union_field@@Base+0x160>
   2d8a4:	andeq	r4, r3, r9, lsl sl

0002d8a8 <flatcc_json_printer_union_table@@Base>:
   2d8a8:	ldr	ip, [r1]
   2d8ac:	mov	r3, r2
   2d8b0:	push	{lr}		; (str lr, [sp, #-4]!)
   2d8b4:	ldr	r2, [r1, #4]
   2d8b8:	ldr	lr, [ip]
   2d8bc:	add	r1, ip, lr
   2d8c0:	pop	{lr}		; (ldr lr, [sp], #4)
   2d8c4:	b	28668 <flatcc_json_parser_struct_as_root@@Base+0x154c>

0002d8c8 <flatcc_json_printer_union_struct@@Base>:
   2d8c8:	ldr	r3, [r0, #32]
   2d8cc:	push	{r4, lr}
   2d8d0:	mov	r4, r0
   2d8d4:	add	r3, r3, #1
   2d8d8:	str	r3, [r0, #32]
   2d8dc:	ldr	r3, [r0, #20]
   2d8e0:	add	ip, r3, #1
   2d8e4:	str	ip, [r0, #20]
   2d8e8:	mov	ip, #123	; 0x7b
   2d8ec:	strb	ip, [r3]
   2d8f0:	ldr	r3, [r1]
   2d8f4:	ldr	r1, [r3]
   2d8f8:	add	r1, r3, r1
   2d8fc:	blx	r2
   2d900:	ldrb	r3, [r4, #25]
   2d904:	cmp	r3, #0
   2d908:	beq	2d934 <flatcc_json_printer_union_struct@@Base+0x6c>
   2d90c:	ldr	r3, [r4, #20]
   2d910:	mov	r0, r4
   2d914:	add	r2, r3, #1
   2d918:	str	r2, [r4, #20]
   2d91c:	mov	r2, #10
   2d920:	strb	r2, [r3]
   2d924:	ldr	r3, [r4, #32]
   2d928:	sub	r3, r3, #1
   2d92c:	str	r3, [r4, #32]
   2d930:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d934:	ldr	r3, [r4, #20]
   2d938:	add	r2, r3, #1
   2d93c:	str	r2, [r4, #20]
   2d940:	mov	r2, #125	; 0x7d
   2d944:	strb	r2, [r3]
   2d948:	pop	{r4, pc}

0002d94c <flatcc_json_printer_union_string@@Base>:
   2d94c:	ldr	r3, [r1]
   2d950:	ldr	r1, [r3]
   2d954:	add	r1, r3, r1
   2d958:	b	28180 <flatcc_json_parser_struct_as_root@@Base+0x1064>

0002d95c <flatcc_json_printer_embedded_struct_field@@Base>:
   2d95c:	cmp	r1, #0
   2d960:	push	{r4, r5, r6, lr}
   2d964:	mov	r4, r0
   2d968:	mov	r6, r2
   2d96c:	mov	r5, r3
   2d970:	beq	2d988 <flatcc_json_printer_embedded_struct_field@@Base+0x2c>
   2d974:	ldr	r2, [r0, #20]
   2d978:	add	r3, r2, #1
   2d97c:	str	r3, [r0, #20]
   2d980:	mov	r3, #44	; 0x2c
   2d984:	strb	r3, [r2]
   2d988:	mov	r0, r4
   2d98c:	ldr	r1, [sp, #16]
   2d990:	ldr	r2, [sp, #20]
   2d994:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2d998:	ldr	r2, [r4, #32]
   2d99c:	add	r1, r6, r5
   2d9a0:	mov	r0, r4
   2d9a4:	add	r2, r2, #1
   2d9a8:	str	r2, [r4, #32]
   2d9ac:	ldr	r2, [r4, #20]
   2d9b0:	add	r3, r2, #1
   2d9b4:	str	r3, [r4, #20]
   2d9b8:	mov	r3, #123	; 0x7b
   2d9bc:	strb	r3, [r2]
   2d9c0:	ldr	r3, [sp, #24]
   2d9c4:	blx	r3
   2d9c8:	ldrb	r3, [r4, #25]
   2d9cc:	cmp	r3, #0
   2d9d0:	beq	2d9fc <flatcc_json_printer_embedded_struct_field@@Base+0xa0>
   2d9d4:	ldr	r3, [r4, #20]
   2d9d8:	mov	r0, r4
   2d9dc:	add	r2, r3, #1
   2d9e0:	str	r2, [r4, #20]
   2d9e4:	mov	r2, #10
   2d9e8:	strb	r2, [r3]
   2d9ec:	ldr	r3, [r4, #32]
   2d9f0:	sub	r3, r3, #1
   2d9f4:	str	r3, [r4, #32]
   2d9f8:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2d9fc:	ldr	r3, [r4, #20]
   2da00:	add	r2, r3, #1
   2da04:	str	r2, [r4, #20]
   2da08:	mov	r2, #125	; 0x7d
   2da0c:	strb	r2, [r3]
   2da10:	pop	{r4, r5, r6, pc}

0002da14 <flatcc_json_printer_struct_field@@Base>:
   2da14:	push	{r4, r5, r6, r7, r8, lr}
   2da18:	mov	r5, r1
   2da1c:	mov	r4, r0
   2da20:	mov	r1, r2
   2da24:	mov	r0, r5
   2da28:	mov	r7, r3
   2da2c:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2da30:	subs	r6, r0, #0
   2da34:	popeq	{r4, r5, r6, r7, r8, pc}
   2da38:	ldr	r2, [r5, #16]
   2da3c:	add	r3, r2, #1
   2da40:	cmp	r2, #0
   2da44:	str	r3, [r5, #16]
   2da48:	beq	2da60 <flatcc_json_printer_struct_field@@Base+0x4c>
   2da4c:	ldr	r2, [r4, #20]
   2da50:	add	r3, r2, #1
   2da54:	str	r3, [r4, #20]
   2da58:	mov	r3, #44	; 0x2c
   2da5c:	strb	r3, [r2]
   2da60:	mov	r1, r7
   2da64:	mov	r0, r4
   2da68:	ldr	r2, [sp, #24]
   2da6c:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2da70:	ldr	r3, [r4, #32]
   2da74:	mov	r1, r6
   2da78:	mov	r0, r4
   2da7c:	add	r3, r3, #1
   2da80:	str	r3, [r4, #32]
   2da84:	ldr	r3, [r4, #20]
   2da88:	add	r2, r3, #1
   2da8c:	str	r2, [r4, #20]
   2da90:	mov	r2, #123	; 0x7b
   2da94:	strb	r2, [r3]
   2da98:	ldr	r3, [sp, #28]
   2da9c:	blx	r3
   2daa0:	ldrb	r3, [r4, #25]
   2daa4:	cmp	r3, #0
   2daa8:	beq	2dad4 <flatcc_json_printer_struct_field@@Base+0xc0>
   2daac:	ldr	r3, [r4, #20]
   2dab0:	mov	r0, r4
   2dab4:	add	r2, r3, #1
   2dab8:	str	r2, [r4, #20]
   2dabc:	mov	r2, #10
   2dac0:	strb	r2, [r3]
   2dac4:	ldr	r3, [r4, #32]
   2dac8:	sub	r3, r3, #1
   2dacc:	str	r3, [r4, #32]
   2dad0:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2dad4:	ldr	r3, [r4, #20]
   2dad8:	add	r2, r3, #1
   2dadc:	str	r2, [r4, #20]
   2dae0:	mov	r2, #125	; 0x7d
   2dae4:	strb	r2, [r3]
   2dae8:	pop	{r4, r5, r6, r7, r8, pc}

0002daec <flatcc_json_printer_struct_as_root@@Base>:
   2daec:	push	{r4, r5, r6, lr}
   2daf0:	mov	r4, r0
   2daf4:	mov	r5, r1
   2daf8:	bl	2872c <flatcc_json_parser_struct_as_root@@Base+0x1610>
   2dafc:	cmp	r0, #0
   2db00:	bne	2db0c <flatcc_json_printer_struct_as_root@@Base+0x20>
   2db04:	mvn	r0, #0
   2db08:	pop	{r4, r5, r6, pc}
   2db0c:	ldr	r3, [r4, #32]
   2db10:	mov	r0, r4
   2db14:	add	r3, r3, #1
   2db18:	str	r3, [r4, #32]
   2db1c:	ldr	r3, [r4, #20]
   2db20:	add	r2, r3, #1
   2db24:	str	r2, [r4, #20]
   2db28:	mov	r2, #123	; 0x7b
   2db2c:	strb	r2, [r3]
   2db30:	ldr	r1, [r5]
   2db34:	ldr	r3, [sp, #16]
   2db38:	add	r1, r5, r1
   2db3c:	blx	r3
   2db40:	ldrb	r3, [r4, #25]
   2db44:	cmp	r3, #0
   2db48:	beq	2db74 <flatcc_json_printer_struct_as_root@@Base+0x88>
   2db4c:	ldr	r3, [r4, #20]
   2db50:	mov	r0, r4
   2db54:	add	r2, r3, #1
   2db58:	str	r2, [r4, #20]
   2db5c:	mov	r2, #10
   2db60:	strb	r2, [r3]
   2db64:	ldr	r3, [r4, #32]
   2db68:	sub	r3, r3, #1
   2db6c:	str	r3, [r4, #32]
   2db70:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2db74:	ldr	r3, [r4, #20]
   2db78:	add	r2, r3, #1
   2db7c:	str	r2, [r4, #20]
   2db80:	mov	r2, #125	; 0x7d
   2db84:	strb	r2, [r3]
   2db88:	ldrb	r3, [r4, #25]
   2db8c:	cmp	r3, #0
   2db90:	beq	2dbb4 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   2db94:	ldr	r3, [r4, #32]
   2db98:	cmp	r3, #0
   2db9c:	bne	2dbb4 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   2dba0:	ldr	r3, [r4, #20]
   2dba4:	add	r2, r3, #1
   2dba8:	str	r2, [r4, #20]
   2dbac:	mov	r2, #10
   2dbb0:	strb	r2, [r3]
   2dbb4:	mov	r1, #1
   2dbb8:	mov	r0, r4
   2dbbc:	ldr	r3, [r4, #44]	; 0x2c
   2dbc0:	blx	r3
   2dbc4:	ldr	r3, [r4, #36]	; 0x24
   2dbc8:	cmp	r3, #0
   2dbcc:	bne	2db04 <flatcc_json_printer_struct_as_root@@Base+0x18>
   2dbd0:	ldr	r3, [r4]
   2dbd4:	ldr	r0, [r4, #20]
   2dbd8:	sub	r0, r0, r3
   2dbdc:	ldr	r3, [r4, #12]
   2dbe0:	add	r0, r0, r3
   2dbe4:	pop	{r4, r5, r6, pc}

0002dbe8 <flatcc_json_printer_table_as_root@@Base>:
   2dbe8:	push	{r4, r5, r6, lr}
   2dbec:	mov	r4, r0
   2dbf0:	mov	r5, r1
   2dbf4:	bl	2872c <flatcc_json_parser_struct_as_root@@Base+0x1610>
   2dbf8:	cmp	r0, #0
   2dbfc:	bne	2dc08 <flatcc_json_printer_table_as_root@@Base+0x20>
   2dc00:	mvn	r0, #0
   2dc04:	pop	{r4, r5, r6, pc}
   2dc08:	ldr	r1, [r5]
   2dc0c:	mov	r2, #100	; 0x64
   2dc10:	mov	r0, r4
   2dc14:	ldr	r3, [sp, #16]
   2dc18:	add	r1, r5, r1
   2dc1c:	bl	28668 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   2dc20:	ldrb	r3, [r4, #25]
   2dc24:	cmp	r3, #0
   2dc28:	beq	2dc4c <flatcc_json_printer_table_as_root@@Base+0x64>
   2dc2c:	ldr	r3, [r4, #32]
   2dc30:	cmp	r3, #0
   2dc34:	bne	2dc4c <flatcc_json_printer_table_as_root@@Base+0x64>
   2dc38:	ldr	r3, [r4, #20]
   2dc3c:	add	r2, r3, #1
   2dc40:	str	r2, [r4, #20]
   2dc44:	mov	r2, #10
   2dc48:	strb	r2, [r3]
   2dc4c:	mov	r1, #1
   2dc50:	mov	r0, r4
   2dc54:	ldr	r3, [r4, #44]	; 0x2c
   2dc58:	blx	r3
   2dc5c:	ldr	r3, [r4, #36]	; 0x24
   2dc60:	cmp	r3, #0
   2dc64:	bne	2dc00 <flatcc_json_printer_table_as_root@@Base+0x18>
   2dc68:	ldr	r3, [r4]
   2dc6c:	ldr	r0, [r4, #20]
   2dc70:	sub	r0, r0, r3
   2dc74:	ldr	r3, [r4, #12]
   2dc78:	add	r0, r0, r3
   2dc7c:	pop	{r4, r5, r6, pc}

0002dc80 <flatcc_json_printer_struct_as_nested_root@@Base>:
   2dc80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dc84:	mov	r7, r1
   2dc88:	mov	r4, r0
   2dc8c:	mov	r1, r2
   2dc90:	mov	r0, r7
   2dc94:	mov	r9, r3
   2dc98:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2dc9c:	subs	r5, r0, #0
   2dca0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dca4:	mov	r0, r4
   2dca8:	ldr	r6, [r5]
   2dcac:	ldr	r3, [sp, #36]	; 0x24
   2dcb0:	add	r8, r5, r6
   2dcb4:	ldr	r2, [r5, r6]
   2dcb8:	mov	r1, r8
   2dcbc:	bl	2872c <flatcc_json_parser_struct_as_root@@Base+0x1610>
   2dcc0:	cmp	r0, #0
   2dcc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dcc8:	ldr	r3, [r7, #16]
   2dccc:	add	r2, r3, #1
   2dcd0:	cmp	r3, #0
   2dcd4:	str	r2, [r7, #16]
   2dcd8:	beq	2dcf0 <flatcc_json_printer_struct_as_nested_root@@Base+0x70>
   2dcdc:	ldr	r3, [r4, #20]
   2dce0:	add	r2, r3, #1
   2dce4:	str	r2, [r4, #20]
   2dce8:	mov	r2, #44	; 0x2c
   2dcec:	strb	r2, [r3]
   2dcf0:	mov	r1, r9
   2dcf4:	mov	r0, r4
   2dcf8:	ldr	r2, [sp, #32]
   2dcfc:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2dd00:	ldr	r3, [r4, #32]
   2dd04:	mov	r0, r4
   2dd08:	add	r3, r3, #1
   2dd0c:	str	r3, [r4, #32]
   2dd10:	ldr	r3, [r4, #20]
   2dd14:	add	r2, r3, #1
   2dd18:	str	r2, [r4, #20]
   2dd1c:	mov	r2, #123	; 0x7b
   2dd20:	strb	r2, [r3]
   2dd24:	ldr	r1, [r5, r6]
   2dd28:	ldr	r3, [sp, #40]	; 0x28
   2dd2c:	add	r1, r8, r1
   2dd30:	blx	r3
   2dd34:	ldrb	r3, [r4, #25]
   2dd38:	cmp	r3, #0
   2dd3c:	beq	2dd68 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   2dd40:	ldr	r3, [r4, #20]
   2dd44:	mov	r0, r4
   2dd48:	add	r2, r3, #1
   2dd4c:	str	r2, [r4, #20]
   2dd50:	mov	r2, #10
   2dd54:	strb	r2, [r3]
   2dd58:	ldr	r3, [r4, #32]
   2dd5c:	sub	r3, r3, #1
   2dd60:	str	r3, [r4, #32]
   2dd64:	bl	28204 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   2dd68:	ldr	r3, [r4, #20]
   2dd6c:	add	r2, r3, #1
   2dd70:	str	r2, [r4, #20]
   2dd74:	mov	r2, #125	; 0x7d
   2dd78:	strb	r2, [r3]
   2dd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002dd80 <flatcc_json_printer_table_as_nested_root@@Base>:
   2dd80:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd84:	mov	r5, r1
   2dd88:	mov	r4, r0
   2dd8c:	mov	r1, r2
   2dd90:	mov	r0, r5
   2dd94:	mov	r9, r3
   2dd98:	bl	27eb8 <flatcc_json_parser_struct_as_root@@Base+0xd9c>
   2dd9c:	cmp	r0, #0
   2dda0:	ldrd	sl, [sp, #40]	; 0x28
   2dda4:	ldr	r8, [sp, #48]	; 0x30
   2dda8:	beq	2de2c <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   2ddac:	mov	r3, fp
   2ddb0:	ldr	r2, [r0]
   2ddb4:	add	r7, r0, r2
   2ddb8:	ldr	r2, [r0, r2]
   2ddbc:	mov	r0, r4
   2ddc0:	add	r6, r7, #4
   2ddc4:	mov	r1, r6
   2ddc8:	bl	2872c <flatcc_json_parser_struct_as_root@@Base+0x1610>
   2ddcc:	cmp	r0, #0
   2ddd0:	beq	2de2c <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   2ddd4:	ldr	r3, [r5, #16]
   2ddd8:	add	r2, r3, #1
   2dddc:	cmp	r3, #0
   2dde0:	str	r2, [r5, #16]
   2dde4:	beq	2ddfc <flatcc_json_printer_table_as_nested_root@@Base+0x7c>
   2dde8:	ldr	r3, [r4, #20]
   2ddec:	add	r2, r3, #1
   2ddf0:	str	r2, [r4, #20]
   2ddf4:	mov	r2, #44	; 0x2c
   2ddf8:	strb	r2, [r3]
   2ddfc:	mov	r2, sl
   2de00:	mov	r1, r9
   2de04:	mov	r0, r4
   2de08:	bl	28404 <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   2de0c:	ldr	r1, [r7, #4]
   2de10:	mov	r3, r8
   2de14:	mov	r0, r4
   2de18:	ldr	r2, [r5, #12]
   2de1c:	add	r1, r6, r1
   2de20:	add	sp, sp, #4
   2de24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de28:	b	28668 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   2de2c:	add	sp, sp, #4
   2de30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002de34 <flatcc_json_printer_init@@Base>:
   2de34:	push	{r4, r5, r6, lr}
   2de38:	mov	r2, #48	; 0x30
   2de3c:	mov	r5, r1
   2de40:	mov	r1, #0
   2de44:	mov	r4, r0
   2de48:	bl	145c0 <memset@plt>
   2de4c:	cmp	r5, #0
   2de50:	movw	r0, #16448	; 0x4040
   2de54:	ldreq	r3, [pc, #80]	; 2deac <flatcc_json_printer_init@@Base+0x78>
   2de58:	ldreq	r5, [r3]
   2de5c:	ldr	r3, [pc, #76]	; 2deb0 <flatcc_json_printer_init@@Base+0x7c>
   2de60:	str	r5, [r4, #40]	; 0x28
   2de64:	str	r3, [r4, #44]	; 0x2c
   2de68:	bl	14578 <malloc@plt>
   2de6c:	cmp	r0, #0
   2de70:	str	r0, [r4]
   2de74:	beq	2dea4 <flatcc_json_printer_init@@Base+0x70>
   2de78:	mov	r3, #1
   2de7c:	str	r0, [r4, #20]
   2de80:	strb	r3, [r4, #24]
   2de84:	movw	r3, #16448	; 0x4040
   2de88:	str	r3, [r4, #4]
   2de8c:	mov	r3, #16384	; 0x4000
   2de90:	add	r0, r0, r3
   2de94:	str	r3, [r4, #8]
   2de98:	str	r0, [r4, #16]
   2de9c:	mov	r0, #0
   2dea0:	pop	{r4, r5, r6, pc}
   2dea4:	mvn	r0, #0
   2dea8:	pop	{r4, r5, r6, pc}
   2deac:			; <UNDEFINED> instruction: 0x000453bc
   2deb0:	andeq	r8, r2, ip, lsr #5

0002deb4 <flatcc_json_printer_init_buffer@@Base>:
   2deb4:	cmp	r2, #63	; 0x3f
   2deb8:	push	{r4, r5, r6, lr}
   2debc:	bhi	2ded4 <flatcc_json_printer_init_buffer@@Base+0x20>
   2dec0:	ldr	r3, [pc, #84]	; 2df1c <flatcc_json_printer_init_buffer@@Base+0x68>
   2dec4:	movw	r2, #1165	; 0x48d
   2dec8:	ldr	r1, [pc, #80]	; 2df20 <flatcc_json_printer_init_buffer@@Base+0x6c>
   2decc:	ldr	r0, [pc, #80]	; 2df24 <flatcc_json_printer_init_buffer@@Base+0x70>
   2ded0:	bl	14620 <__assert_fail@plt>
   2ded4:	mov	r4, r0
   2ded8:	mov	r6, r1
   2dedc:	mov	r5, r2
   2dee0:	mov	r1, #0
   2dee4:	mov	r2, #32
   2dee8:	add	r0, r0, #12
   2deec:	bl	145c0 <memset@plt>
   2def0:	ldr	r3, [pc, #48]	; 2df28 <flatcc_json_printer_init_buffer@@Base+0x74>
   2def4:	mov	r0, #0
   2def8:	str	r6, [r4]
   2defc:	str	r5, [r4, #4]
   2df00:	sub	r5, r5, #64	; 0x40
   2df04:	str	r5, [r4, #8]
   2df08:	add	r5, r6, r5
   2df0c:	str	r6, [r4, #20]
   2df10:	str	r5, [r4, #16]
   2df14:	str	r3, [r4, #44]	; 0x2c
   2df18:	pop	{r4, r5, r6, pc}
   2df1c:	andeq	r4, r3, r4, lsr #16
   2df20:	andeq	r4, r3, sp, asr r8
   2df24:	andeq	r4, r3, pc, lsl sl
   2df28:	strdeq	r7, [r2], -r0

0002df2c <flatcc_json_printer_init_dynamic_buffer@@Base>:
   2df2c:	cmp	r1, #0
   2df30:	push	{r4, r5, r6, lr}
   2df34:	mov	r5, r0
   2df38:	moveq	r4, #4096	; 0x1000
   2df3c:	beq	2df4c <flatcc_json_printer_init_dynamic_buffer@@Base+0x20>
   2df40:	cmp	r1, #64	; 0x40
   2df44:	movcs	r4, r1
   2df48:	movcc	r4, #64	; 0x40
   2df4c:	mov	r2, #32
   2df50:	mov	r1, #0
   2df54:	add	r0, r5, #12
   2df58:	bl	145c0 <memset@plt>
   2df5c:	mov	r0, r4
   2df60:	bl	14578 <malloc@plt>
   2df64:	mov	r3, #1
   2df68:	stm	r5, {r0, r4}
   2df6c:	sub	r4, r4, #64	; 0x40
   2df70:	cmp	r0, #0
   2df74:	str	r4, [r5, #8]
   2df78:	add	r4, r0, r4
   2df7c:	strb	r3, [r5, #24]
   2df80:	ldr	r3, [pc, #44]	; 2dfb4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   2df84:	str	r4, [r5, #16]
   2df88:	str	r0, [r5, #20]
   2df8c:	str	r3, [r5, #44]	; 0x2c
   2df90:	bne	2dfac <flatcc_json_printer_init_dynamic_buffer@@Base+0x80>
   2df94:	ldr	r3, [r5, #36]	; 0x24
   2df98:	mvn	r0, #0
   2df9c:	cmp	r3, #0
   2dfa0:	moveq	r3, #3
   2dfa4:	streq	r3, [r5, #36]	; 0x24
   2dfa8:	pop	{r4, r5, r6, pc}
   2dfac:	mov	r0, #0
   2dfb0:	pop	{r4, r5, r6, pc}
   2dfb4:	andeq	r8, r2, ip, asr #6

0002dfb8 <flatcc_json_printer_get_buffer@@Base>:
   2dfb8:	push	{r4, r5, r6, lr}
   2dfbc:	mov	r5, r1
   2dfc0:	mov	r1, #0
   2dfc4:	mov	r4, r0
   2dfc8:	ldr	r3, [r0, #44]	; 0x2c
   2dfcc:	blx	r3
   2dfd0:	cmp	r5, #0
   2dfd4:	ldr	r0, [r4]
   2dfd8:	ldrne	r3, [r4, #20]
   2dfdc:	subne	r3, r3, r0
   2dfe0:	strne	r3, [r5]
   2dfe4:	pop	{r4, r5, r6, pc}

0002dfe8 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   2dfe8:	push	{r4, r5, r6, lr}
   2dfec:	mov	r5, r0
   2dff0:	bl	2dfb8 <flatcc_json_printer_get_buffer@@Base>
   2dff4:	mov	r4, r0
   2dff8:	mov	r2, #48	; 0x30
   2dffc:	mov	r1, #0
   2e000:	mov	r0, r5
   2e004:	bl	145c0 <memset@plt>
   2e008:	mov	r0, r4
   2e00c:	pop	{r4, r5, r6, pc}

0002e010 <flatcc_json_printer_clear@@Base>:
   2e010:	push	{r4, lr}
   2e014:	mov	r4, r0
   2e018:	ldrb	r3, [r0, #24]
   2e01c:	cmp	r3, #0
   2e020:	beq	2e034 <flatcc_json_printer_clear@@Base+0x24>
   2e024:	ldr	r0, [r0]
   2e028:	cmp	r0, #0
   2e02c:	beq	2e034 <flatcc_json_printer_clear@@Base+0x24>
   2e030:	bl	1453c <free@plt>
   2e034:	mov	r0, r4
   2e038:	mov	r2, #48	; 0x30
   2e03c:	pop	{r4, lr}
   2e040:	mov	r1, #0
   2e044:	b	145c0 <memset@plt>
   2e048:	eor	r1, r1, #-2147483648	; 0x80000000
   2e04c:	b	2e054 <flatcc_json_printer_clear@@Base+0x44>
   2e050:	eor	r3, r3, #-2147483648	; 0x80000000
   2e054:	push	{r4, r5, lr}
   2e058:	lsl	r4, r1, #1
   2e05c:	lsl	r5, r3, #1
   2e060:	teq	r4, r5
   2e064:	teqeq	r0, r2
   2e068:	orrsne	ip, r4, r0
   2e06c:	orrsne	ip, r5, r2
   2e070:	mvnsne	ip, r4, asr #21
   2e074:	mvnsne	ip, r5, asr #21
   2e078:	beq	2e264 <flatcc_json_printer_clear@@Base+0x254>
   2e07c:	lsr	r4, r4, #21
   2e080:	rsbs	r5, r4, r5, lsr #21
   2e084:	rsblt	r5, r5, #0
   2e088:	ble	2e0a8 <flatcc_json_printer_clear@@Base+0x98>
   2e08c:	add	r4, r4, r5
   2e090:	eor	r2, r0, r2
   2e094:	eor	r3, r1, r3
   2e098:	eor	r0, r2, r0
   2e09c:	eor	r1, r3, r1
   2e0a0:	eor	r2, r0, r2
   2e0a4:	eor	r3, r1, r3
   2e0a8:	cmp	r5, #54	; 0x36
   2e0ac:	pophi	{r4, r5, pc}
   2e0b0:	tst	r1, #-2147483648	; 0x80000000
   2e0b4:	lsl	r1, r1, #12
   2e0b8:	mov	ip, #1048576	; 0x100000
   2e0bc:	orr	r1, ip, r1, lsr #12
   2e0c0:	beq	2e0cc <flatcc_json_printer_clear@@Base+0xbc>
   2e0c4:	rsbs	r0, r0, #0
   2e0c8:	rsc	r1, r1, #0
   2e0cc:	tst	r3, #-2147483648	; 0x80000000
   2e0d0:	lsl	r3, r3, #12
   2e0d4:	orr	r3, ip, r3, lsr #12
   2e0d8:	beq	2e0e4 <flatcc_json_printer_clear@@Base+0xd4>
   2e0dc:	rsbs	r2, r2, #0
   2e0e0:	rsc	r3, r3, #0
   2e0e4:	teq	r4, r5
   2e0e8:	beq	2e24c <flatcc_json_printer_clear@@Base+0x23c>
   2e0ec:	sub	r4, r4, #1
   2e0f0:	rsbs	lr, r5, #32
   2e0f4:	blt	2e110 <flatcc_json_printer_clear@@Base+0x100>
   2e0f8:	lsl	ip, r2, lr
   2e0fc:	adds	r0, r0, r2, lsr r5
   2e100:	adc	r1, r1, #0
   2e104:	adds	r0, r0, r3, lsl lr
   2e108:	adcs	r1, r1, r3, asr r5
   2e10c:	b	2e12c <flatcc_json_printer_clear@@Base+0x11c>
   2e110:	sub	r5, r5, #32
   2e114:	add	lr, lr, #32
   2e118:	cmp	r2, #1
   2e11c:	lsl	ip, r3, lr
   2e120:	orrcs	ip, ip, #2
   2e124:	adds	r0, r0, r3, asr r5
   2e128:	adcs	r1, r1, r3, asr #31
   2e12c:	and	r5, r1, #-2147483648	; 0x80000000
   2e130:	bpl	2e140 <flatcc_json_printer_clear@@Base+0x130>
   2e134:	rsbs	ip, ip, #0
   2e138:	rscs	r0, r0, #0
   2e13c:	rsc	r1, r1, #0
   2e140:	cmp	r1, #1048576	; 0x100000
   2e144:	bcc	2e184 <flatcc_json_printer_clear@@Base+0x174>
   2e148:	cmp	r1, #2097152	; 0x200000
   2e14c:	bcc	2e16c <flatcc_json_printer_clear@@Base+0x15c>
   2e150:	lsrs	r1, r1, #1
   2e154:	rrxs	r0, r0
   2e158:	rrx	ip, ip
   2e15c:	add	r4, r4, #1
   2e160:	lsl	r2, r4, #21
   2e164:	cmn	r2, #4194304	; 0x400000
   2e168:	bcs	2e2c4 <flatcc_json_printer_clear@@Base+0x2b4>
   2e16c:	cmp	ip, #-2147483648	; 0x80000000
   2e170:	lsrseq	ip, r0, #1
   2e174:	adcs	r0, r0, #0
   2e178:	adc	r1, r1, r4, lsl #20
   2e17c:	orr	r1, r1, r5
   2e180:	pop	{r4, r5, pc}
   2e184:	lsls	ip, ip, #1
   2e188:	adcs	r0, r0, r0
   2e18c:	adc	r1, r1, r1
   2e190:	tst	r1, #1048576	; 0x100000
   2e194:	sub	r4, r4, #1
   2e198:	bne	2e16c <flatcc_json_printer_clear@@Base+0x15c>
   2e19c:	teq	r1, #0
   2e1a0:	moveq	r1, r0
   2e1a4:	moveq	r0, #0
   2e1a8:	clz	r3, r1
   2e1ac:	addeq	r3, r3, #32
   2e1b0:	sub	r3, r3, #11
   2e1b4:	subs	r2, r3, #32
   2e1b8:	bge	2e1dc <flatcc_json_printer_clear@@Base+0x1cc>
   2e1bc:	adds	r2, r2, #12
   2e1c0:	ble	2e1d8 <flatcc_json_printer_clear@@Base+0x1c8>
   2e1c4:	add	ip, r2, #20
   2e1c8:	rsb	r2, r2, #12
   2e1cc:	lsl	r0, r1, ip
   2e1d0:	lsr	r1, r1, r2
   2e1d4:	b	2e1ec <flatcc_json_printer_clear@@Base+0x1dc>
   2e1d8:	add	r2, r2, #20
   2e1dc:	rsble	ip, r2, #32
   2e1e0:	lsl	r1, r1, r2
   2e1e4:	orrle	r1, r1, r0, lsr ip
   2e1e8:	lslle	r0, r0, r2
   2e1ec:	subs	r4, r4, r3
   2e1f0:	addge	r1, r1, r4, lsl #20
   2e1f4:	orrge	r1, r1, r5
   2e1f8:	popge	{r4, r5, pc}
   2e1fc:	mvn	r4, r4
   2e200:	subs	r4, r4, #31
   2e204:	bge	2e240 <flatcc_json_printer_clear@@Base+0x230>
   2e208:	adds	r4, r4, #12
   2e20c:	bgt	2e228 <flatcc_json_printer_clear@@Base+0x218>
   2e210:	add	r4, r4, #20
   2e214:	rsb	r2, r4, #32
   2e218:	lsr	r0, r0, r4
   2e21c:	orr	r0, r0, r1, lsl r2
   2e220:	orr	r1, r5, r1, lsr r4
   2e224:	pop	{r4, r5, pc}
   2e228:	rsb	r4, r4, #12
   2e22c:	rsb	r2, r4, #32
   2e230:	lsr	r0, r0, r2
   2e234:	orr	r0, r0, r1, lsl r4
   2e238:	mov	r1, r5
   2e23c:	pop	{r4, r5, pc}
   2e240:	lsr	r0, r1, r4
   2e244:	mov	r1, r5
   2e248:	pop	{r4, r5, pc}
   2e24c:	teq	r4, #0
   2e250:	eor	r3, r3, #1048576	; 0x100000
   2e254:	eoreq	r1, r1, #1048576	; 0x100000
   2e258:	addeq	r4, r4, #1
   2e25c:	subne	r5, r5, #1
   2e260:	b	2e0ec <flatcc_json_printer_clear@@Base+0xdc>
   2e264:	mvns	ip, r4, asr #21
   2e268:	mvnsne	ip, r5, asr #21
   2e26c:	beq	2e2d4 <flatcc_json_printer_clear@@Base+0x2c4>
   2e270:	teq	r4, r5
   2e274:	teqeq	r0, r2
   2e278:	beq	2e28c <flatcc_json_printer_clear@@Base+0x27c>
   2e27c:	orrs	ip, r4, r0
   2e280:	moveq	r1, r3
   2e284:	moveq	r0, r2
   2e288:	pop	{r4, r5, pc}
   2e28c:	teq	r1, r3
   2e290:	movne	r1, #0
   2e294:	movne	r0, #0
   2e298:	popne	{r4, r5, pc}
   2e29c:	lsrs	ip, r4, #21
   2e2a0:	bne	2e2b4 <flatcc_json_printer_clear@@Base+0x2a4>
   2e2a4:	lsls	r0, r0, #1
   2e2a8:	adcs	r1, r1, r1
   2e2ac:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2e2b0:	pop	{r4, r5, pc}
   2e2b4:	adds	r4, r4, #4194304	; 0x400000
   2e2b8:	addcc	r1, r1, #1048576	; 0x100000
   2e2bc:	popcc	{r4, r5, pc}
   2e2c0:	and	r5, r1, #-2147483648	; 0x80000000
   2e2c4:	orr	r1, r5, #2130706432	; 0x7f000000
   2e2c8:	orr	r1, r1, #15728640	; 0xf00000
   2e2cc:	mov	r0, #0
   2e2d0:	pop	{r4, r5, pc}
   2e2d4:	mvns	ip, r4, asr #21
   2e2d8:	movne	r1, r3
   2e2dc:	movne	r0, r2
   2e2e0:	mvnseq	ip, r5, asr #21
   2e2e4:	movne	r3, r1
   2e2e8:	movne	r2, r0
   2e2ec:	orrs	r4, r0, r1, lsl #12
   2e2f0:	orrseq	r5, r2, r3, lsl #12
   2e2f4:	teqeq	r1, r3
   2e2f8:	orrne	r1, r1, #524288	; 0x80000
   2e2fc:	pop	{r4, r5, pc}
   2e300:	teq	r0, #0
   2e304:	moveq	r1, #0
   2e308:	bxeq	lr
   2e30c:	push	{r4, r5, lr}
   2e310:	mov	r4, #1024	; 0x400
   2e314:	add	r4, r4, #50	; 0x32
   2e318:	mov	r5, #0
   2e31c:	mov	r1, #0
   2e320:	b	2e19c <flatcc_json_printer_clear@@Base+0x18c>
   2e324:	teq	r0, #0
   2e328:	moveq	r1, #0
   2e32c:	bxeq	lr
   2e330:	push	{r4, r5, lr}
   2e334:	mov	r4, #1024	; 0x400
   2e338:	add	r4, r4, #50	; 0x32
   2e33c:	ands	r5, r0, #-2147483648	; 0x80000000
   2e340:	rsbmi	r0, r0, #0
   2e344:	mov	r1, #0
   2e348:	b	2e19c <flatcc_json_printer_clear@@Base+0x18c>
   2e34c:	lsls	r2, r0, #1
   2e350:	asr	r1, r2, #3
   2e354:	rrx	r1, r1
   2e358:	lsl	r0, r2, #28
   2e35c:	andsne	r3, r2, #-16777216	; 0xff000000
   2e360:	teqne	r3, #-16777216	; 0xff000000
   2e364:	eorne	r1, r1, #939524096	; 0x38000000
   2e368:	bxne	lr
   2e36c:	bics	r2, r2, #-16777216	; 0xff000000
   2e370:	bxeq	lr
   2e374:	teq	r3, #-16777216	; 0xff000000
   2e378:	orreq	r1, r1, #524288	; 0x80000
   2e37c:	bxeq	lr
   2e380:	push	{r4, r5, lr}
   2e384:	mov	r4, #896	; 0x380
   2e388:	and	r5, r1, #-2147483648	; 0x80000000
   2e38c:	bic	r1, r1, #-2147483648	; 0x80000000
   2e390:	b	2e19c <flatcc_json_printer_clear@@Base+0x18c>
   2e394:	orrs	r2, r0, r1
   2e398:	bxeq	lr
   2e39c:	push	{r4, r5, lr}
   2e3a0:	mov	r5, #0
   2e3a4:	b	2e3c4 <flatcc_json_printer_clear@@Base+0x3b4>
   2e3a8:	orrs	r2, r0, r1
   2e3ac:	bxeq	lr
   2e3b0:	push	{r4, r5, lr}
   2e3b4:	ands	r5, r1, #-2147483648	; 0x80000000
   2e3b8:	bpl	2e3c4 <flatcc_json_printer_clear@@Base+0x3b4>
   2e3bc:	rsbs	r0, r0, #0
   2e3c0:	rsc	r1, r1, #0
   2e3c4:	mov	r4, #1024	; 0x400
   2e3c8:	add	r4, r4, #50	; 0x32
   2e3cc:	lsrs	ip, r1, #22
   2e3d0:	beq	2e140 <flatcc_json_printer_clear@@Base+0x130>
   2e3d4:	mov	r2, #3
   2e3d8:	lsrs	ip, ip, #3
   2e3dc:	addne	r2, r2, #3
   2e3e0:	lsrs	ip, ip, #3
   2e3e4:	addne	r2, r2, #3
   2e3e8:	add	r2, r2, ip, lsr #3
   2e3ec:	rsb	r3, r2, #32
   2e3f0:	lsl	ip, r0, r3
   2e3f4:	lsr	r0, r0, r2
   2e3f8:	orr	r0, r0, r1, lsl r3
   2e3fc:	lsr	r1, r1, r2
   2e400:	add	r4, r4, r2
   2e404:	b	2e140 <flatcc_json_printer_clear@@Base+0x130>
   2e408:	eor	r0, r0, #-2147483648	; 0x80000000
   2e40c:	b	2e414 <flatcc_json_printer_clear@@Base+0x404>
   2e410:	eor	r1, r1, #-2147483648	; 0x80000000
   2e414:	lsls	r2, r0, #1
   2e418:	lslsne	r3, r1, #1
   2e41c:	teqne	r2, r3
   2e420:	mvnsne	ip, r2, asr #24
   2e424:	mvnsne	ip, r3, asr #24
   2e428:	beq	2e520 <flatcc_json_printer_clear@@Base+0x510>
   2e42c:	lsr	r2, r2, #24
   2e430:	rsbs	r3, r2, r3, lsr #24
   2e434:	addgt	r2, r2, r3
   2e438:	eorgt	r1, r0, r1
   2e43c:	eorgt	r0, r1, r0
   2e440:	eorgt	r1, r0, r1
   2e444:	rsblt	r3, r3, #0
   2e448:	cmp	r3, #25
   2e44c:	bxhi	lr
   2e450:	tst	r0, #-2147483648	; 0x80000000
   2e454:	orr	r0, r0, #8388608	; 0x800000
   2e458:	bic	r0, r0, #-16777216	; 0xff000000
   2e45c:	rsbne	r0, r0, #0
   2e460:	tst	r1, #-2147483648	; 0x80000000
   2e464:	orr	r1, r1, #8388608	; 0x800000
   2e468:	bic	r1, r1, #-16777216	; 0xff000000
   2e46c:	rsbne	r1, r1, #0
   2e470:	teq	r2, r3
   2e474:	beq	2e508 <flatcc_json_printer_clear@@Base+0x4f8>
   2e478:	sub	r2, r2, #1
   2e47c:	adds	r0, r0, r1, asr r3
   2e480:	rsb	r3, r3, #32
   2e484:	lsl	r1, r1, r3
   2e488:	and	r3, r0, #-2147483648	; 0x80000000
   2e48c:	bpl	2e498 <flatcc_json_printer_clear@@Base+0x488>
   2e490:	rsbs	r1, r1, #0
   2e494:	rsc	r0, r0, #0
   2e498:	cmp	r0, #8388608	; 0x800000
   2e49c:	bcc	2e4d0 <flatcc_json_printer_clear@@Base+0x4c0>
   2e4a0:	cmp	r0, #16777216	; 0x1000000
   2e4a4:	bcc	2e4bc <flatcc_json_printer_clear@@Base+0x4ac>
   2e4a8:	lsrs	r0, r0, #1
   2e4ac:	rrx	r1, r1
   2e4b0:	add	r2, r2, #1
   2e4b4:	cmp	r2, #254	; 0xfe
   2e4b8:	bcs	2e574 <flatcc_json_printer_clear@@Base+0x564>
   2e4bc:	cmp	r1, #-2147483648	; 0x80000000
   2e4c0:	adc	r0, r0, r2, lsl #23
   2e4c4:	biceq	r0, r0, #1
   2e4c8:	orr	r0, r0, r3
   2e4cc:	bx	lr
   2e4d0:	lsls	r1, r1, #1
   2e4d4:	adc	r0, r0, r0
   2e4d8:	tst	r0, #8388608	; 0x800000
   2e4dc:	sub	r2, r2, #1
   2e4e0:	bne	2e4bc <flatcc_json_printer_clear@@Base+0x4ac>
   2e4e4:	clz	ip, r0
   2e4e8:	sub	ip, ip, #8
   2e4ec:	subs	r2, r2, ip
   2e4f0:	lsl	r0, r0, ip
   2e4f4:	addge	r0, r0, r2, lsl #23
   2e4f8:	rsblt	r2, r2, #0
   2e4fc:	orrge	r0, r0, r3
   2e500:	orrlt	r0, r3, r0, lsr r2
   2e504:	bx	lr
   2e508:	teq	r2, #0
   2e50c:	eor	r1, r1, #8388608	; 0x800000
   2e510:	eoreq	r0, r0, #8388608	; 0x800000
   2e514:	addeq	r2, r2, #1
   2e518:	subne	r3, r3, #1
   2e51c:	b	2e478 <flatcc_json_printer_clear@@Base+0x468>
   2e520:	lsl	r3, r1, #1
   2e524:	mvns	ip, r2, asr #24
   2e528:	mvnsne	ip, r3, asr #24
   2e52c:	beq	2e580 <flatcc_json_printer_clear@@Base+0x570>
   2e530:	teq	r2, r3
   2e534:	beq	2e544 <flatcc_json_printer_clear@@Base+0x534>
   2e538:	teq	r2, #0
   2e53c:	moveq	r0, r1
   2e540:	bx	lr
   2e544:	teq	r0, r1
   2e548:	movne	r0, #0
   2e54c:	bxne	lr
   2e550:	tst	r2, #-16777216	; 0xff000000
   2e554:	bne	2e564 <flatcc_json_printer_clear@@Base+0x554>
   2e558:	lsls	r0, r0, #1
   2e55c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2e560:	bx	lr
   2e564:	adds	r2, r2, #33554432	; 0x2000000
   2e568:	addcc	r0, r0, #8388608	; 0x800000
   2e56c:	bxcc	lr
   2e570:	and	r3, r0, #-2147483648	; 0x80000000
   2e574:	orr	r0, r3, #2130706432	; 0x7f000000
   2e578:	orr	r0, r0, #8388608	; 0x800000
   2e57c:	bx	lr
   2e580:	mvns	r2, r2, asr #24
   2e584:	movne	r0, r1
   2e588:	mvnseq	r3, r3, asr #24
   2e58c:	movne	r1, r0
   2e590:	lsls	r2, r0, #9
   2e594:	lslseq	r3, r1, #9
   2e598:	teqeq	r0, r1
   2e59c:	orrne	r0, r0, #4194304	; 0x400000
   2e5a0:	bx	lr
   2e5a4:	mov	r3, #0
   2e5a8:	b	2e5b4 <flatcc_json_printer_clear@@Base+0x5a4>
   2e5ac:	ands	r3, r0, #-2147483648	; 0x80000000
   2e5b0:	rsbmi	r0, r0, #0
   2e5b4:	movs	ip, r0
   2e5b8:	bxeq	lr
   2e5bc:	orr	r3, r3, #1258291200	; 0x4b000000
   2e5c0:	mov	r1, r0
   2e5c4:	mov	r0, #0
   2e5c8:	b	2e60c <flatcc_json_printer_clear@@Base+0x5fc>
   2e5cc:	orrs	r2, r0, r1
   2e5d0:	bxeq	lr
   2e5d4:	mov	r3, #0
   2e5d8:	b	2e5f4 <flatcc_json_printer_clear@@Base+0x5e4>
   2e5dc:	orrs	r2, r0, r1
   2e5e0:	bxeq	lr
   2e5e4:	ands	r3, r1, #-2147483648	; 0x80000000
   2e5e8:	bpl	2e5f4 <flatcc_json_printer_clear@@Base+0x5e4>
   2e5ec:	rsbs	r0, r0, #0
   2e5f0:	rsc	r1, r1, #0
   2e5f4:	movs	ip, r1
   2e5f8:	moveq	ip, r0
   2e5fc:	moveq	r1, r0
   2e600:	moveq	r0, #0
   2e604:	orr	r3, r3, #1526726656	; 0x5b000000
   2e608:	subeq	r3, r3, #268435456	; 0x10000000
   2e60c:	sub	r3, r3, #8388608	; 0x800000
   2e610:	clz	r2, ip
   2e614:	subs	r2, r2, #8
   2e618:	sub	r3, r3, r2, lsl #23
   2e61c:	blt	2e63c <flatcc_json_printer_clear@@Base+0x62c>
   2e620:	add	r3, r3, r1, lsl r2
   2e624:	lsl	ip, r0, r2
   2e628:	rsb	r2, r2, #32
   2e62c:	cmp	ip, #-2147483648	; 0x80000000
   2e630:	adc	r0, r3, r0, lsr r2
   2e634:	biceq	r0, r0, #1
   2e638:	bx	lr
   2e63c:	add	r2, r2, #32
   2e640:	lsl	ip, r1, r2
   2e644:	rsb	r2, r2, #32
   2e648:	orrs	r0, r0, ip, lsl #1
   2e64c:	adc	r0, r3, r1, lsr r2
   2e650:	biceq	r0, r0, ip, lsr #31
   2e654:	bx	lr
   2e658:	cmp	r3, #0
   2e65c:	cmpeq	r2, #0
   2e660:	bne	2e684 <flatcc_json_printer_clear@@Base+0x674>
   2e664:	cmp	r1, #0
   2e668:	movlt	r1, #-2147483648	; 0x80000000
   2e66c:	movlt	r0, #0
   2e670:	blt	2e680 <flatcc_json_printer_clear@@Base+0x670>
   2e674:	cmpeq	r0, #0
   2e678:	mvnne	r1, #-2147483648	; 0x80000000
   2e67c:	mvnne	r0, #0
   2e680:	b	2e768 <flatcc_json_printer_clear@@Base+0x758>
   2e684:	sub	sp, sp, #8
   2e688:	push	{sp, lr}
   2e68c:	cmp	r1, #0
   2e690:	blt	2e6b0 <flatcc_json_printer_clear@@Base+0x6a0>
   2e694:	cmp	r3, #0
   2e698:	blt	2e6e4 <flatcc_json_printer_clear@@Base+0x6d4>
   2e69c:	bl	2e778 <flatcc_json_printer_clear@@Base+0x768>
   2e6a0:	ldr	lr, [sp, #4]
   2e6a4:	add	sp, sp, #8
   2e6a8:	pop	{r2, r3}
   2e6ac:	bx	lr
   2e6b0:	rsbs	r0, r0, #0
   2e6b4:	sbc	r1, r1, r1, lsl #1
   2e6b8:	cmp	r3, #0
   2e6bc:	blt	2e708 <flatcc_json_printer_clear@@Base+0x6f8>
   2e6c0:	bl	2e778 <flatcc_json_printer_clear@@Base+0x768>
   2e6c4:	ldr	lr, [sp, #4]
   2e6c8:	add	sp, sp, #8
   2e6cc:	pop	{r2, r3}
   2e6d0:	rsbs	r0, r0, #0
   2e6d4:	sbc	r1, r1, r1, lsl #1
   2e6d8:	rsbs	r2, r2, #0
   2e6dc:	sbc	r3, r3, r3, lsl #1
   2e6e0:	bx	lr
   2e6e4:	rsbs	r2, r2, #0
   2e6e8:	sbc	r3, r3, r3, lsl #1
   2e6ec:	bl	2e778 <flatcc_json_printer_clear@@Base+0x768>
   2e6f0:	ldr	lr, [sp, #4]
   2e6f4:	add	sp, sp, #8
   2e6f8:	pop	{r2, r3}
   2e6fc:	rsbs	r0, r0, #0
   2e700:	sbc	r1, r1, r1, lsl #1
   2e704:	bx	lr
   2e708:	rsbs	r2, r2, #0
   2e70c:	sbc	r3, r3, r3, lsl #1
   2e710:	bl	2e778 <flatcc_json_printer_clear@@Base+0x768>
   2e714:	ldr	lr, [sp, #4]
   2e718:	add	sp, sp, #8
   2e71c:	pop	{r2, r3}
   2e720:	rsbs	r2, r2, #0
   2e724:	sbc	r3, r3, r3, lsl #1
   2e728:	bx	lr
   2e72c:	cmp	r3, #0
   2e730:	cmpeq	r2, #0
   2e734:	bne	2e74c <flatcc_json_printer_clear@@Base+0x73c>
   2e738:	cmp	r1, #0
   2e73c:	cmpeq	r0, #0
   2e740:	mvnne	r1, #0
   2e744:	mvnne	r0, #0
   2e748:	b	2e768 <flatcc_json_printer_clear@@Base+0x758>
   2e74c:	sub	sp, sp, #8
   2e750:	push	{sp, lr}
   2e754:	bl	2e778 <flatcc_json_printer_clear@@Base+0x768>
   2e758:	ldr	lr, [sp, #4]
   2e75c:	add	sp, sp, #8
   2e760:	pop	{r2, r3}
   2e764:	bx	lr
   2e768:	push	{r1, lr}
   2e76c:	mov	r0, #8
   2e770:	bl	14518 <raise@plt>
   2e774:	pop	{r1, pc}
   2e778:	cmp	r1, r3
   2e77c:	cmpeq	r0, r2
   2e780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e784:	mov	r4, r0
   2e788:	movcc	r0, #0
   2e78c:	mov	r5, r1
   2e790:	ldr	lr, [sp, #36]	; 0x24
   2e794:	movcc	r1, r0
   2e798:	bcc	2e894 <flatcc_json_printer_clear@@Base+0x884>
   2e79c:	cmp	r3, #0
   2e7a0:	clzeq	ip, r2
   2e7a4:	clzne	ip, r3
   2e7a8:	addeq	ip, ip, #32
   2e7ac:	cmp	r5, #0
   2e7b0:	clzeq	r1, r4
   2e7b4:	addeq	r1, r1, #32
   2e7b8:	clzne	r1, r5
   2e7bc:	sub	ip, ip, r1
   2e7c0:	sub	sl, ip, #32
   2e7c4:	lsl	r9, r3, ip
   2e7c8:	rsb	fp, ip, #32
   2e7cc:	orr	r9, r9, r2, lsl sl
   2e7d0:	orr	r9, r9, r2, lsr fp
   2e7d4:	lsl	r8, r2, ip
   2e7d8:	cmp	r5, r9
   2e7dc:	cmpeq	r4, r8
   2e7e0:	movcc	r0, #0
   2e7e4:	movcc	r1, r0
   2e7e8:	bcc	2e804 <flatcc_json_printer_clear@@Base+0x7f4>
   2e7ec:	mov	r0, #1
   2e7f0:	subs	r4, r4, r8
   2e7f4:	lsl	r1, r0, sl
   2e7f8:	orr	r1, r1, r0, lsr fp
   2e7fc:	lsl	r0, r0, ip
   2e800:	sbc	r5, r5, r9
   2e804:	cmp	ip, #0
   2e808:	beq	2e894 <flatcc_json_printer_clear@@Base+0x884>
   2e80c:	lsr	r6, r8, #1
   2e810:	orr	r6, r6, r9, lsl #31
   2e814:	lsr	r7, r9, #1
   2e818:	mov	r2, ip
   2e81c:	b	2e840 <flatcc_json_printer_clear@@Base+0x830>
   2e820:	subs	r3, r4, r6
   2e824:	sbc	r8, r5, r7
   2e828:	adds	r3, r3, r3
   2e82c:	adc	r8, r8, r8
   2e830:	adds	r4, r3, #1
   2e834:	adc	r5, r8, #0
   2e838:	subs	r2, r2, #1
   2e83c:	beq	2e85c <flatcc_json_printer_clear@@Base+0x84c>
   2e840:	cmp	r5, r7
   2e844:	cmpeq	r4, r6
   2e848:	bcs	2e820 <flatcc_json_printer_clear@@Base+0x810>
   2e84c:	adds	r4, r4, r4
   2e850:	adc	r5, r5, r5
   2e854:	subs	r2, r2, #1
   2e858:	bne	2e840 <flatcc_json_printer_clear@@Base+0x830>
   2e85c:	lsr	r3, r4, ip
   2e860:	orr	r3, r3, r5, lsl fp
   2e864:	lsr	r2, r5, ip
   2e868:	orr	r3, r3, r5, lsr sl
   2e86c:	adds	r0, r0, r4
   2e870:	mov	r4, r3
   2e874:	lsl	r3, r2, ip
   2e878:	orr	r3, r3, r4, lsl sl
   2e87c:	lsl	ip, r4, ip
   2e880:	orr	r3, r3, r4, lsr fp
   2e884:	adc	r1, r1, r5
   2e888:	subs	r0, r0, ip
   2e88c:	mov	r5, r2
   2e890:	sbc	r1, r1, r3
   2e894:	cmp	lr, #0
   2e898:	strdne	r4, [lr]
   2e89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e8a0 <__libc_csu_init@@Base>:
   2e8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e8a4:	mov	r7, r0
   2e8a8:	ldr	r6, [pc, #72]	; 2e8f8 <__libc_csu_init@@Base+0x58>
   2e8ac:	ldr	r5, [pc, #72]	; 2e8fc <__libc_csu_init@@Base+0x5c>
   2e8b0:	add	r6, pc, r6
   2e8b4:	add	r5, pc, r5
   2e8b8:	sub	r6, r6, r5
   2e8bc:	mov	r8, r1
   2e8c0:	mov	r9, r2
   2e8c4:	bl	144f8 <raise@plt-0x20>
   2e8c8:	asrs	r6, r6, #2
   2e8cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e8d0:	mov	r4, #0
   2e8d4:	add	r4, r4, #1
   2e8d8:	ldr	r3, [r5], #4
   2e8dc:	mov	r2, r9
   2e8e0:	mov	r1, r8
   2e8e4:	mov	r0, r7
   2e8e8:	blx	r3
   2e8ec:	cmp	r6, r4
   2e8f0:	bne	2e8d4 <__libc_csu_init@@Base+0x34>
   2e8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e8f8:	andeq	r6, r1, ip, asr r6
   2e8fc:	andeq	r6, r1, r4, asr r6

0002e900 <__libc_csu_fini@@Base>:
   2e900:	bx	lr

Disassembly of section .fini:

0002e904 <.fini>:
   2e904:	push	{r3, lr}
   2e908:	pop	{r3, pc}
