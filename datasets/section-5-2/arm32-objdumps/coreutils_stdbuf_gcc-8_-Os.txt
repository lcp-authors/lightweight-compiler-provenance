
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010cf4 <.init>:
   10cf4:	push	{r3, lr}
   10cf8:	bl	11694 <__assert_fail@plt+0x6ec>
   10cfc:	pop	{r3, pc}

Disassembly of section .plt:

00010d00 <calloc@plt-0x14>:
   10d00:	push	{lr}		; (str lr, [sp, #-4]!)
   10d04:	ldr	lr, [pc, #4]	; 10d10 <calloc@plt-0x4>
   10d08:	add	lr, pc, lr
   10d0c:	ldr	pc, [lr, #8]!
   10d10:	strdeq	r5, [r1], -r0

00010d14 <calloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d20 <fputs_unlocked@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #744]!	; 0x2e8

00010d2c <strcmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #736]!	; 0x2e0

00010d38 <fflush@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #728]!	; 0x2d8

00010d44 <free@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d50 <_exit@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #712]!	; 0x2c8

00010d5c <memcpy@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #704]!	; 0x2c0

00010d68 <execvp@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #696]!	; 0x2b8

00010d74 <mbsinit@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #688]!	; 0x2b0

00010d80 <memcmp@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #680]!	; 0x2a8

00010d8c <fputc_unlocked@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #672]!	; 0x2a0

00010d98 <dcgettext@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #664]!	; 0x298

00010da4 <realloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #656]!	; 0x290

00010db0 <textdomain@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #648]!	; 0x288

00010dbc <iswprint@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #640]!	; 0x280

00010dc8 <readlink@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #632]!	; 0x278

00010dd4 <lseek64@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #624]!	; 0x270

00010de0 <__ctype_get_mb_cur_max@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #616]!	; 0x268

00010dec <__fpending@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #608]!	; 0x260

00010df8 <ferror_unlocked@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #600]!	; 0x258

00010e04 <mbrtowc@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #592]!	; 0x250

00010e10 <error@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #584]!	; 0x248

00010e1c <__asprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #576]!	; 0x240

00010e28 <getenv@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #568]!	; 0x238

00010e34 <malloc@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #560]!	; 0x230

00010e40 <__libc_start_main@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #552]!	; 0x228

00010e4c <__freading@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #544]!	; 0x220

00010e58 <__gmon_start__@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #536]!	; 0x218

00010e64 <mempcpy@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #528]!	; 0x210

00010e70 <getopt_long@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #520]!	; 0x208

00010e7c <__ctype_b_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #512]!	; 0x200

00010e88 <exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #504]!	; 0x1f8

00010e94 <strlen@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #496]!	; 0x1f0

00010ea0 <strchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #488]!	; 0x1e8

00010eac <__errno_location@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #480]!	; 0x1e0

00010eb8 <__cxa_atexit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #472]!	; 0x1d8

00010ec4 <memset@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #464]!	; 0x1d0

00010ed0 <__printf_chk@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #456]!	; 0x1c8

00010edc <fileno@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #448]!	; 0x1c0

00010ee8 <strtoumax@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #440]!	; 0x1b8

00010ef4 <__fprintf_chk@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #432]!	; 0x1b0

00010f00 <access@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #424]!	; 0x1a8

00010f0c <fclose@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #416]!	; 0x1a0

00010f18 <fseeko64@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #408]!	; 0x198

00010f24 <strtok@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #400]!	; 0x190

00010f30 <setlocale@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #392]!	; 0x188

00010f3c <putenv@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #384]!	; 0x180

00010f48 <toupper@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #376]!	; 0x178

00010f54 <strrchr@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #368]!	; 0x170

00010f60 <nl_langinfo@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #360]!	; 0x168

00010f6c <bindtextdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #352]!	; 0x160

00010f78 <__xstat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #344]!	; 0x158

00010f84 <fputs@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #336]!	; 0x150

00010f90 <strncmp@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #328]!	; 0x148

00010f9c <abort@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #320]!	; 0x140

00010fa8 <__assert_fail@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #312]!	; 0x138

Disassembly of section .text:

00010fb4 <.text>:
   10fb4:	push	{r4, lr}
   10fb8:	bl	10eac <__errno_location@plt>
   10fbc:	mov	r3, #12
   10fc0:	str	r3, [r0]
   10fc4:	mov	r0, #0
   10fc8:	pop	{r4, pc}
   10fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd0:	mov	r9, r0
   10fd4:	sub	sp, sp, #164	; 0xa4
   10fd8:	mov	r5, r1
   10fdc:	ldr	r0, [r1]
   10fe0:	bl	11edc <__assert_fail@plt+0xf34>
   10fe4:	ldr	r1, [pc, #1480]	; 115b4 <__assert_fail@plt+0x60c>
   10fe8:	mov	r0, #6
   10fec:	bl	10f30 <setlocale@plt>
   10ff0:	ldr	r1, [pc, #1472]	; 115b8 <__assert_fail@plt+0x610>
   10ff4:	ldr	r0, [pc, #1472]	; 115bc <__assert_fail@plt+0x614>
   10ff8:	bl	10f6c <bindtextdomain@plt>
   10ffc:	ldr	r0, [pc, #1464]	; 115bc <__assert_fail@plt+0x614>
   11000:	bl	10db0 <textdomain@plt>
   11004:	ldr	r3, [pc, #1460]	; 115c0 <__assert_fail@plt+0x618>
   11008:	mov	r2, #125	; 0x7d
   1100c:	ldr	r0, [pc, #1456]	; 115c4 <__assert_fail@plt+0x61c>
   11010:	ldr	fp, [pc, #1456]	; 115c8 <__assert_fail@plt+0x620>
   11014:	str	r2, [r3]
   11018:	ldr	sl, [pc, #1452]	; 115cc <__assert_fail@plt+0x624>
   1101c:	bl	14870 <__assert_fail@plt+0x38c8>
   11020:	mov	r8, #0
   11024:	mov	r3, fp
   11028:	ldr	r2, [pc, #1440]	; 115d0 <__assert_fail@plt+0x628>
   1102c:	mov	r1, r5
   11030:	mov	r0, r9
   11034:	str	r8, [sp]
   11038:	bl	10e70 <getopt_long@plt>
   1103c:	cmn	r0, #1
   11040:	ldr	r4, [pc, #1420]	; 115d4 <__assert_fail@plt+0x62c>
   11044:	mov	r6, r0
   11048:	bne	1108c <__assert_fail@plt+0xe4>
   1104c:	ldr	r3, [pc, #1412]	; 115d8 <__assert_fail@plt+0x630>
   11050:	ldr	r6, [r3]
   11054:	add	r3, r5, r6, lsl #2
   11058:	sub	r9, r9, r6
   1105c:	cmp	r9, r8
   11060:	str	r3, [sp, #16]
   11064:	bgt	1123c <__assert_fail@plt+0x294>
   11068:	mov	r2, #5
   1106c:	ldr	r1, [pc, #1384]	; 115dc <__assert_fail@plt+0x634>
   11070:	mov	r0, r8
   11074:	bl	10d98 <dcgettext@plt>
   11078:	mov	r2, r0
   1107c:	mov	r1, r8
   11080:	mov	r0, r1
   11084:	bl	10e10 <error@plt>
   11088:	b	110ac <__assert_fail@plt+0x104>
   1108c:	cmp	r6, #101	; 0x65
   11090:	beq	110c4 <__assert_fail@plt+0x11c>
   11094:	bgt	110b4 <__assert_fail@plt+0x10c>
   11098:	cmn	r6, #3
   1109c:	beq	11210 <__assert_fail@plt+0x268>
   110a0:	cmn	r6, #2
   110a4:	moveq	r0, r8
   110a8:	beq	110b0 <__assert_fail@plt+0x108>
   110ac:	mov	r0, #125	; 0x7d
   110b0:	bl	11748 <__assert_fail@plt+0x7a0>
   110b4:	cmp	r6, #105	; 0x69
   110b8:	beq	110c4 <__assert_fail@plt+0x11c>
   110bc:	cmp	r6, #111	; 0x6f
   110c0:	bne	110ac <__assert_fail@plt+0x104>
   110c4:	ldr	r3, [pc, #1300]	; 115e0 <__assert_fail@plt+0x638>
   110c8:	add	r2, r3, r6
   110cc:	ldrsb	r8, [r2, #-45]	; 0xffffffd3
   110d0:	cmp	r8, #2
   110d4:	bls	110ec <__assert_fail@plt+0x144>
   110d8:	add	r3, r3, #67	; 0x43
   110dc:	mov	r2, #336	; 0x150
   110e0:	ldr	r1, [pc, #1276]	; 115e4 <__assert_fail@plt+0x63c>
   110e4:	ldr	r0, [pc, #1276]	; 115e8 <__assert_fail@plt+0x640>
   110e8:	bl	10fa8 <__assert_fail@plt>
   110ec:	mov	r3, #12
   110f0:	mla	r3, r3, r8, r4
   110f4:	str	r6, [r3, #4]
   110f8:	ldr	r7, [sl]
   110fc:	ldrb	r0, [r7]
   11100:	bl	11b70 <__assert_fail@plt+0xbc8>
   11104:	subs	r3, r0, #0
   11108:	bne	1114c <__assert_fail@plt+0x1a4>
   1110c:	mov	r2, #12
   11110:	cmp	r6, #105	; 0x69
   11114:	mla	r2, r2, r8, r4
   11118:	str	r7, [r2, #8]
   1111c:	bne	11158 <__assert_fail@plt+0x1b0>
   11120:	ldrb	r2, [r7]
   11124:	cmp	r2, #76	; 0x4c
   11128:	bne	11158 <__assert_fail@plt+0x1b0>
   1112c:	ldr	r1, [pc, #1208]	; 115ec <__assert_fail@plt+0x644>
   11130:	mov	r2, #5
   11134:	str	r3, [sp, #16]
   11138:	bl	10d98 <dcgettext@plt>
   1113c:	ldr	r3, [sp, #16]
   11140:	mov	r2, r0
   11144:	mov	r1, r3
   11148:	b	11080 <__assert_fail@plt+0xd8>
   1114c:	add	r7, r7, #1
   11150:	str	r7, [sl]
   11154:	b	110f8 <__assert_fail@plt+0x150>
   11158:	ldr	r1, [pc, #1168]	; 115f0 <__assert_fail@plt+0x648>
   1115c:	mov	r0, r7
   11160:	bl	10d2c <strcmp@plt>
   11164:	cmp	r0, #0
   11168:	beq	11020 <__assert_fail@plt+0x78>
   1116c:	ldr	r3, [pc, #1152]	; 115f4 <__assert_fail@plt+0x64c>
   11170:	mov	r1, #0
   11174:	mov	r2, #10
   11178:	mov	r0, r7
   1117c:	str	r3, [sp]
   11180:	add	r3, sp, #56	; 0x38
   11184:	bl	13da8 <__assert_fail@plt+0x2e00>
   11188:	str	r0, [sp, #16]
   1118c:	bl	10eac <__errno_location@plt>
   11190:	ldr	r1, [sp, #16]
   11194:	cmp	r1, #0
   11198:	bne	111d0 <__assert_fail@plt+0x228>
   1119c:	ldrd	r2, [sp, #56]	; 0x38
   111a0:	mov	r7, #0
   111a4:	mvn	r6, #0
   111a8:	cmp	r3, r7
   111ac:	strd	r2, [sp, #16]
   111b0:	cmpeq	r2, r6
   111b4:	bhi	111dc <__assert_fail@plt+0x234>
   111b8:	mov	r3, #12
   111bc:	str	r1, [r0]
   111c0:	mul	r8, r3, r8
   111c4:	ldr	r3, [sp, #16]
   111c8:	str	r3, [r4, r8]
   111cc:	b	11020 <__assert_fail@plt+0x78>
   111d0:	cmp	r1, #1
   111d4:	ldrne	r4, [r0]
   111d8:	bne	111e0 <__assert_fail@plt+0x238>
   111dc:	mov	r4, #75	; 0x4b
   111e0:	mov	r2, #5
   111e4:	ldr	r1, [pc, #1036]	; 115f8 <__assert_fail@plt+0x650>
   111e8:	str	r4, [r0]
   111ec:	mov	r0, #0
   111f0:	bl	10d98 <dcgettext@plt>
   111f4:	mov	r5, r0
   111f8:	ldr	r0, [sl]
   111fc:	bl	134dc <__assert_fail@plt+0x2534>
   11200:	mov	r3, r0
   11204:	mov	r2, r5
   11208:	mov	r1, r4
   1120c:	b	11530 <__assert_fail@plt+0x588>
   11210:	ldr	r3, [pc, #996]	; 115fc <__assert_fail@plt+0x654>
   11214:	ldr	r0, [pc, #996]	; 11600 <__assert_fail@plt+0x658>
   11218:	ldr	r2, [pc, #996]	; 11604 <__assert_fail@plt+0x65c>
   1121c:	stm	sp, {r3, r8}
   11220:	ldr	r3, [pc, #992]	; 11608 <__assert_fail@plt+0x660>
   11224:	ldr	r1, [pc, #992]	; 1160c <__assert_fail@plt+0x664>
   11228:	ldr	r0, [r0]
   1122c:	ldr	r3, [r3]
   11230:	bl	13928 <__assert_fail@plt+0x2980>
   11234:	mov	r0, r8
   11238:	bl	10e88 <exit@plt>
   1123c:	ldr	r9, [pc, #972]	; 11610 <__assert_fail@plt+0x668>
   11240:	mov	r7, r4
   11244:	mov	r3, r8
   11248:	ldr	fp, [pc, #964]	; 11614 <__assert_fail@plt+0x66c>
   1124c:	ldr	sl, [pc, #964]	; 11618 <__assert_fail@plt+0x670>
   11250:	ldr	r2, [r7, #8]
   11254:	cmp	r2, #0
   11258:	str	r2, [sp, #28]
   1125c:	beq	11300 <__assert_fail@plt+0x358>
   11260:	ldr	r0, [r7, #4]
   11264:	bl	10f48 <toupper@plt>
   11268:	ldr	r2, [sp, #28]
   1126c:	ldrb	r3, [r2]
   11270:	cmp	r3, #76	; 0x4c
   11274:	bne	1129c <__assert_fail@plt+0x2f4>
   11278:	mov	r3, r9
   1127c:	mov	r2, sl
   11280:	str	r0, [sp]
   11284:	mov	r1, #1
   11288:	add	r0, sp, #36	; 0x24
   1128c:	bl	10e1c <__asprintf_chk@plt>
   11290:	cmp	r0, #0
   11294:	bge	112c8 <__assert_fail@plt+0x320>
   11298:	bl	13ca8 <__assert_fail@plt+0x2d00>
   1129c:	ldr	r3, [r7]
   112a0:	mov	r2, fp
   112a4:	mov	r1, #1
   112a8:	str	r0, [sp]
   112ac:	add	r0, sp, #36	; 0x24
   112b0:	str	r3, [sp, #8]
   112b4:	mov	r3, #0
   112b8:	str	r3, [sp, #12]
   112bc:	mov	r3, r9
   112c0:	bl	10e1c <__asprintf_chk@plt>
   112c4:	b	11290 <__assert_fail@plt+0x2e8>
   112c8:	ldr	r0, [sp, #36]	; 0x24
   112cc:	bl	10f3c <putenv@plt>
   112d0:	cmp	r0, #0
   112d4:	beq	112fc <__assert_fail@plt+0x354>
   112d8:	bl	10eac <__errno_location@plt>
   112dc:	mov	r2, #5
   112e0:	ldr	r1, [pc, #820]	; 1161c <__assert_fail@plt+0x674>
   112e4:	ldr	r4, [r0]
   112e8:	mov	r0, #0
   112ec:	bl	10d98 <dcgettext@plt>
   112f0:	mov	r5, r0
   112f4:	ldr	r0, [sp, #36]	; 0x24
   112f8:	b	111fc <__assert_fail@plt+0x254>
   112fc:	mov	r3, #1
   11300:	add	r8, r8, #1
   11304:	add	r7, r7, #12
   11308:	cmp	r8, #3
   1130c:	bne	11250 <__assert_fail@plt+0x2a8>
   11310:	cmp	r3, #0
   11314:	bne	1132c <__assert_fail@plt+0x384>
   11318:	mov	r2, #5
   1131c:	ldr	r1, [pc, #764]	; 11620 <__assert_fail@plt+0x678>
   11320:	mov	r0, r3
   11324:	str	r3, [sp, #16]
   11328:	b	11138 <__assert_fail@plt+0x190>
   1132c:	ldr	r3, [pc, #752]	; 11624 <__assert_fail@plt+0x67c>
   11330:	mov	r1, #47	; 0x2f
   11334:	ldr	r8, [r3]
   11338:	mov	r0, r8
   1133c:	bl	10ea0 <strchr@plt>
   11340:	cmp	r0, #0
   11344:	beq	11414 <__assert_fail@plt+0x46c>
   11348:	mov	r0, r8
   1134c:	bl	11d00 <__assert_fail@plt+0xd58>
   11350:	str	r0, [r4, #36]	; 0x24
   11354:	ldr	r0, [pc, #716]	; 11628 <__assert_fail@plt+0x680>
   11358:	add	r8, sp, #44	; 0x2c
   1135c:	bl	10e28 <getenv@plt>
   11360:	ldr	r3, [r4, #36]	; 0x24
   11364:	mov	r9, r0
   11368:	ldr	sl, [pc, #700]	; 1162c <__assert_fail@plt+0x684>
   1136c:	ldr	fp, [pc, #700]	; 11630 <__assert_fail@plt+0x688>
   11370:	str	r3, [sp, #44]	; 0x2c
   11374:	ldr	r3, [pc, #696]	; 11634 <__assert_fail@plt+0x68c>
   11378:	str	r3, [sp, #48]	; 0x30
   1137c:	mov	r3, #0
   11380:	str	r3, [sp, #52]	; 0x34
   11384:	ldr	r3, [r8]
   11388:	ldrb	r2, [r3]
   1138c:	cmp	r2, #0
   11390:	bne	114c4 <__assert_fail@plt+0x51c>
   11394:	ldr	r0, [pc, #656]	; 1162c <__assert_fail@plt+0x684>
   11398:	bl	13c8c <__assert_fail@plt+0x2ce4>
   1139c:	str	r0, [sp, #40]	; 0x28
   113a0:	cmp	r9, #0
   113a4:	ldr	r3, [sp, #40]	; 0x28
   113a8:	beq	11538 <__assert_fail@plt+0x590>
   113ac:	ldr	r2, [pc, #644]	; 11638 <__assert_fail@plt+0x690>
   113b0:	mov	r1, #1
   113b4:	add	r0, sp, #56	; 0x38
   113b8:	str	r9, [sp]
   113bc:	str	r3, [sp, #4]
   113c0:	ldr	r3, [pc, #608]	; 11628 <__assert_fail@plt+0x680>
   113c4:	bl	10e1c <__asprintf_chk@plt>
   113c8:	cmp	r0, #0
   113cc:	blt	11298 <__assert_fail@plt+0x2f0>
   113d0:	ldr	r0, [sp, #40]	; 0x28
   113d4:	bl	11e8c <__assert_fail@plt+0xee4>
   113d8:	ldr	r0, [sp, #56]	; 0x38
   113dc:	bl	10f3c <putenv@plt>
   113e0:	mov	r7, r0
   113e4:	bl	10eac <__errno_location@plt>
   113e8:	cmp	r7, #0
   113ec:	mov	r8, r0
   113f0:	beq	11554 <__assert_fail@plt+0x5ac>
   113f4:	mov	r2, #5
   113f8:	ldr	r1, [pc, #540]	; 1161c <__assert_fail@plt+0x674>
   113fc:	mov	r0, #0
   11400:	ldr	r4, [r8]
   11404:	bl	10d98 <dcgettext@plt>
   11408:	mov	r5, r0
   1140c:	ldr	r0, [sp, #56]	; 0x38
   11410:	b	111fc <__assert_fail@plt+0x254>
   11414:	ldr	r0, [pc, #544]	; 1163c <__assert_fail@plt+0x694>
   11418:	bl	13ce8 <__assert_fail@plt+0x2d40>
   1141c:	subs	r7, r0, #0
   11420:	beq	1144c <__assert_fail@plt+0x4a4>
   11424:	bl	11d00 <__assert_fail@plt+0xd58>
   11428:	str	r0, [r4, #36]	; 0x24
   1142c:	mov	r0, r7
   11430:	bl	11e8c <__assert_fail@plt+0xee4>
   11434:	ldr	r3, [r4, #36]	; 0x24
   11438:	cmp	r3, #0
   1143c:	bne	11354 <__assert_fail@plt+0x3ac>
   11440:	ldr	r0, [pc, #504]	; 11640 <__assert_fail@plt+0x698>
   11444:	bl	13c8c <__assert_fail@plt+0x2ce4>
   11448:	b	11350 <__assert_fail@plt+0x3a8>
   1144c:	ldr	r0, [pc, #496]	; 11644 <__assert_fail@plt+0x69c>
   11450:	bl	10e28 <getenv@plt>
   11454:	subs	r7, r0, #0
   11458:	beq	1142c <__assert_fail@plt+0x484>
   1145c:	ldr	r9, [pc, #484]	; 11648 <__assert_fail@plt+0x6a0>
   11460:	bl	13c8c <__assert_fail@plt+0x2ce4>
   11464:	ldr	r1, [pc, #476]	; 11648 <__assert_fail@plt+0x6a0>
   11468:	mov	r7, r0
   1146c:	bl	10f24 <strtok@plt>
   11470:	cmp	r0, #0
   11474:	beq	1142c <__assert_fail@plt+0x484>
   11478:	mov	r2, #0
   1147c:	mov	r1, r8
   11480:	bl	11dac <__assert_fail@plt+0xe04>
   11484:	mov	r1, #1
   11488:	mov	sl, r0
   1148c:	bl	10f00 <access@plt>
   11490:	cmp	r0, #0
   11494:	mov	r0, sl
   11498:	bne	114b0 <__assert_fail@plt+0x508>
   1149c:	bl	11d00 <__assert_fail@plt+0xd58>
   114a0:	str	r0, [r4, #36]	; 0x24
   114a4:	mov	r0, sl
   114a8:	bl	11e8c <__assert_fail@plt+0xee4>
   114ac:	b	1142c <__assert_fail@plt+0x484>
   114b0:	bl	11e8c <__assert_fail@plt+0xee4>
   114b4:	mov	r1, r9
   114b8:	mov	r0, #0
   114bc:	bl	10f24 <strtok@plt>
   114c0:	b	11470 <__assert_fail@plt+0x4c8>
   114c4:	mov	r2, fp
   114c8:	mov	r1, #1
   114cc:	str	sl, [sp]
   114d0:	add	r0, sp, #40	; 0x28
   114d4:	bl	10e1c <__asprintf_chk@plt>
   114d8:	cmp	r0, #0
   114dc:	blt	11298 <__assert_fail@plt+0x2f0>
   114e0:	add	r1, sp, #56	; 0x38
   114e4:	ldr	r0, [sp, #40]	; 0x28
   114e8:	bl	14888 <__assert_fail@plt+0x38e0>
   114ec:	cmp	r0, #0
   114f0:	beq	113a0 <__assert_fail@plt+0x3f8>
   114f4:	ldr	r0, [sp, #40]	; 0x28
   114f8:	bl	11e8c <__assert_fail@plt+0xee4>
   114fc:	ldr	r7, [r8, #4]!
   11500:	cmp	r7, #0
   11504:	bne	11384 <__assert_fail@plt+0x3dc>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #312]	; 1164c <__assert_fail@plt+0x6a4>
   11510:	mov	r0, r7
   11514:	bl	10d98 <dcgettext@plt>
   11518:	mov	r4, r0
   1151c:	ldr	r0, [pc, #264]	; 1162c <__assert_fail@plt+0x684>
   11520:	bl	134dc <__assert_fail@plt+0x2534>
   11524:	mov	r3, r0
   11528:	mov	r2, r4
   1152c:	mov	r1, r7
   11530:	mov	r0, #125	; 0x7d
   11534:	bl	10e10 <error@plt>
   11538:	ldr	r2, [pc, #272]	; 11650 <__assert_fail@plt+0x6a8>
   1153c:	mov	r1, #1
   11540:	add	r0, sp, #56	; 0x38
   11544:	str	r3, [sp]
   11548:	ldr	r3, [pc, #216]	; 11628 <__assert_fail@plt+0x680>
   1154c:	bl	10e1c <__asprintf_chk@plt>
   11550:	b	113c8 <__assert_fail@plt+0x420>
   11554:	ldr	r0, [r4, #36]	; 0x24
   11558:	bl	11e8c <__assert_fail@plt+0xee4>
   1155c:	ldr	r0, [r5, r6, lsl #2]
   11560:	ldr	r1, [sp, #16]
   11564:	bl	10d68 <execvp@plt>
   11568:	ldr	r4, [r8]
   1156c:	mov	r2, #5
   11570:	mov	r0, r7
   11574:	ldr	r1, [pc, #216]	; 11654 <__assert_fail@plt+0x6ac>
   11578:	cmp	r4, #2
   1157c:	moveq	r8, #127	; 0x7f
   11580:	movne	r8, #126	; 0x7e
   11584:	bl	10d98 <dcgettext@plt>
   11588:	mov	r9, r0
   1158c:	ldr	r0, [r5, r6, lsl #2]
   11590:	bl	134dc <__assert_fail@plt+0x2534>
   11594:	mov	r3, r0
   11598:	mov	r2, r9
   1159c:	mov	r0, r7
   115a0:	mov	r1, r4
   115a4:	bl	10e10 <error@plt>
   115a8:	mov	r0, r8
   115ac:	add	sp, sp, #164	; 0xa4
   115b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b4:	andeq	r4, r1, r9, lsl pc
   115b8:	andeq	r4, r1, sl, lsl pc
   115bc:	andeq	r4, r1, r7, ror lr
   115c0:	strdeq	r6, [r2], -ip
   115c4:	andeq	r1, r1, ip, lsr #24
   115c8:	andeq	r4, r1, ip, ror #17
   115cc:	andeq	r6, r2, r8, asr r1
   115d0:	andeq	r4, r1, r7, asr #31
   115d4:	andeq	r6, r2, r0, ror #2
   115d8:	andeq	r6, r2, r8, asr #2
   115dc:	andeq	r4, r1, pc, asr #31
   115e0:	andeq	r4, r1, r4, lsr #17
   115e4:	andeq	r4, r1, r2, lsr pc
   115e8:	andeq	r4, r1, pc, lsr pc
   115ec:	andeq	r4, r1, sl, ror pc
   115f0:	andeq	r4, r1, sp, ror #31
   115f4:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   115f8:	andeq	r4, r1, r9, lsr #31
   115fc:			; <UNDEFINED> instruction: 0x00014fb9
   11600:	andeq	r6, r2, r4, asr r1
   11604:	andeq	r4, r1, r3, ror lr
   11608:	strdeq	r6, [r2], -r8
   1160c:	andeq	r4, r1, ip, asr #18
   11610:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   11614:	andeq	r4, r1, pc, ror #31
   11618:	andeq	r4, r1, r8, ror #31
   1161c:	strdeq	r4, [r1], -r9
   11620:	andeq	r5, r1, r2, lsr #32
   11624:	muleq	r2, r0, r1
   11628:	andeq	r5, r1, r8, ror r0
   1162c:	andeq	r5, r1, r0, lsr #1
   11630:	andeq	r5, r1, sp, lsr #1
   11634:	andeq	r5, r1, r3, lsl #1
   11638:	andeq	r5, r1, r5, asr #1
   1163c:	andeq	r5, r1, fp, asr #32
   11640:	andeq	r5, r1, pc, asr r0
   11644:	andeq	r5, r1, sl, asr r0
   11648:	andeq	r4, r1, sp, asr #31
   1164c:	strheq	r5, [r1], -r3
   11650:	andeq	r5, r1, lr, asr #1
   11654:	ldrdeq	r5, [r1], -r4
   11658:	mov	fp, #0
   1165c:	mov	lr, #0
   11660:	pop	{r1}		; (ldr r1, [sp], #4)
   11664:	mov	r2, sp
   11668:	push	{r2}		; (str r2, [sp, #-4]!)
   1166c:	push	{r0}		; (str r0, [sp, #-4]!)
   11670:	ldr	ip, [pc, #16]	; 11688 <__assert_fail@plt+0x6e0>
   11674:	push	{ip}		; (str ip, [sp, #-4]!)
   11678:	ldr	r0, [pc, #12]	; 1168c <__assert_fail@plt+0x6e4>
   1167c:	ldr	r3, [pc, #12]	; 11690 <__assert_fail@plt+0x6e8>
   11680:	bl	10e40 <__libc_start_main@plt>
   11684:	bl	10f9c <abort@plt>
   11688:	andeq	r4, r1, ip, ror #16
   1168c:	andeq	r0, r1, ip, asr #31
   11690:	andeq	r4, r1, ip, lsl #16
   11694:	ldr	r3, [pc, #20]	; 116b0 <__assert_fail@plt+0x708>
   11698:	ldr	r2, [pc, #20]	; 116b4 <__assert_fail@plt+0x70c>
   1169c:	add	r3, pc, r3
   116a0:	ldr	r2, [r3, r2]
   116a4:	cmp	r2, #0
   116a8:	bxeq	lr
   116ac:	b	10e58 <__gmon_start__@plt>
   116b0:	andeq	r4, r1, ip, asr r9
   116b4:	andeq	r0, r0, ip, ror #1
   116b8:	ldr	r0, [pc, #24]	; 116d8 <__assert_fail@plt+0x730>
   116bc:	ldr	r3, [pc, #24]	; 116dc <__assert_fail@plt+0x734>
   116c0:	cmp	r3, r0
   116c4:	bxeq	lr
   116c8:	ldr	r3, [pc, #16]	; 116e0 <__assert_fail@plt+0x738>
   116cc:	cmp	r3, #0
   116d0:	bxeq	lr
   116d4:	bx	r3
   116d8:	andeq	r6, r2, r0, asr #2
   116dc:	andeq	r6, r2, r0, asr #2
   116e0:	andeq	r0, r0, r0
   116e4:	ldr	r0, [pc, #36]	; 11710 <__assert_fail@plt+0x768>
   116e8:	ldr	r1, [pc, #36]	; 11714 <__assert_fail@plt+0x76c>
   116ec:	sub	r1, r1, r0
   116f0:	asr	r1, r1, #2
   116f4:	add	r1, r1, r1, lsr #31
   116f8:	asrs	r1, r1, #1
   116fc:	bxeq	lr
   11700:	ldr	r3, [pc, #16]	; 11718 <__assert_fail@plt+0x770>
   11704:	cmp	r3, #0
   11708:	bxeq	lr
   1170c:	bx	r3
   11710:	andeq	r6, r2, r0, asr #2
   11714:	andeq	r6, r2, r0, asr #2
   11718:	andeq	r0, r0, r0
   1171c:	push	{r4, lr}
   11720:	ldr	r4, [pc, #24]	; 11740 <__assert_fail@plt+0x798>
   11724:	ldrb	r3, [r4]
   11728:	cmp	r3, #0
   1172c:	popne	{r4, pc}
   11730:	bl	116b8 <__assert_fail@plt+0x710>
   11734:	mov	r3, #1
   11738:	strb	r3, [r4]
   1173c:	pop	{r4, pc}
   11740:	andeq	r6, r2, ip, asr r1
   11744:	b	116e4 <__assert_fail@plt+0x73c>
   11748:	subs	r5, r0, #0
   1174c:	push	{r7, lr}
   11750:	sub	sp, sp, #56	; 0x38
   11754:	ldr	r4, [pc, #592]	; 119ac <__assert_fail@plt+0xa04>
   11758:	beq	11790 <__assert_fail@plt+0x7e8>
   1175c:	mov	r2, #5
   11760:	mov	r0, #0
   11764:	ldr	r3, [pc, #580]	; 119b0 <__assert_fail@plt+0xa08>
   11768:	ldr	r1, [pc, #580]	; 119b4 <__assert_fail@plt+0xa0c>
   1176c:	ldr	r6, [r3]
   11770:	bl	10d98 <dcgettext@plt>
   11774:	mov	r2, r0
   11778:	mov	r1, #1
   1177c:	ldr	r3, [r4]
   11780:	mov	r0, r6
   11784:	bl	10ef4 <__fprintf_chk@plt>
   11788:	mov	r0, r5
   1178c:	bl	10e88 <exit@plt>
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #540]	; 119b8 <__assert_fail@plt+0xa10>
   11798:	mov	r6, sp
   1179c:	bl	10d98 <dcgettext@plt>
   117a0:	ldr	r2, [r4]
   117a4:	mov	r1, r0
   117a8:	mov	r0, #1
   117ac:	bl	10ed0 <__printf_chk@plt>
   117b0:	ldr	r4, [pc, #516]	; 119bc <__assert_fail@plt+0xa14>
   117b4:	mov	r2, #5
   117b8:	mov	r0, r5
   117bc:	ldr	r1, [pc, #508]	; 119c0 <__assert_fail@plt+0xa18>
   117c0:	bl	10d98 <dcgettext@plt>
   117c4:	ldr	r7, [pc, #504]	; 119c4 <__assert_fail@plt+0xa1c>
   117c8:	ldr	r1, [r4]
   117cc:	bl	10d20 <fputs_unlocked@plt>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #492]	; 119c8 <__assert_fail@plt+0xa20>
   117d8:	mov	r0, r5
   117dc:	bl	10d98 <dcgettext@plt>
   117e0:	ldr	r1, [r4]
   117e4:	bl	10d20 <fputs_unlocked@plt>
   117e8:	mov	r2, #5
   117ec:	ldr	r1, [pc, #472]	; 119cc <__assert_fail@plt+0xa24>
   117f0:	mov	r0, r5
   117f4:	bl	10d98 <dcgettext@plt>
   117f8:	ldr	r1, [r4]
   117fc:	bl	10d20 <fputs_unlocked@plt>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #452]	; 119d0 <__assert_fail@plt+0xa28>
   11808:	mov	r0, r5
   1180c:	bl	10d98 <dcgettext@plt>
   11810:	ldr	r1, [r4]
   11814:	bl	10d20 <fputs_unlocked@plt>
   11818:	mov	r2, #5
   1181c:	ldr	r1, [pc, #432]	; 119d4 <__assert_fail@plt+0xa2c>
   11820:	mov	r0, r5
   11824:	bl	10d98 <dcgettext@plt>
   11828:	ldr	r1, [r4]
   1182c:	bl	10d20 <fputs_unlocked@plt>
   11830:	mov	r2, #5
   11834:	ldr	r1, [pc, #412]	; 119d8 <__assert_fail@plt+0xa30>
   11838:	mov	r0, r5
   1183c:	bl	10d98 <dcgettext@plt>
   11840:	ldr	r1, [r4]
   11844:	bl	10d20 <fputs_unlocked@plt>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #392]	; 119dc <__assert_fail@plt+0xa34>
   11850:	mov	r0, r5
   11854:	bl	10d98 <dcgettext@plt>
   11858:	ldr	r1, [r4]
   1185c:	bl	10d20 <fputs_unlocked@plt>
   11860:	mov	r2, #5
   11864:	ldr	r1, [pc, #372]	; 119e0 <__assert_fail@plt+0xa38>
   11868:	mov	r0, r5
   1186c:	bl	10d98 <dcgettext@plt>
   11870:	ldr	r1, [r4]
   11874:	bl	10d20 <fputs_unlocked@plt>
   11878:	mov	r2, #5
   1187c:	ldr	r1, [pc, #352]	; 119e4 <__assert_fail@plt+0xa3c>
   11880:	mov	r0, r5
   11884:	bl	10d98 <dcgettext@plt>
   11888:	ldr	r1, [r4]
   1188c:	bl	10d20 <fputs_unlocked@plt>
   11890:	ldr	lr, [pc, #336]	; 119e8 <__assert_fail@plt+0xa40>
   11894:	mov	ip, sp
   11898:	ldm	lr!, {r0, r1, r2, r3}
   1189c:	stmia	ip!, {r0, r1, r2, r3}
   118a0:	ldm	lr!, {r0, r1, r2, r3}
   118a4:	stmia	ip!, {r0, r1, r2, r3}
   118a8:	ldm	lr!, {r0, r1, r2, r3}
   118ac:	stmia	ip!, {r0, r1, r2, r3}
   118b0:	ldm	lr, {r0, r1}
   118b4:	stm	ip, {r0, r1}
   118b8:	ldr	r1, [r6]
   118bc:	cmp	r1, #0
   118c0:	bne	11964 <__assert_fail@plt+0x9bc>
   118c4:	ldr	r6, [r6, #4]
   118c8:	mov	r2, #5
   118cc:	mov	r0, #0
   118d0:	ldr	r7, [pc, #236]	; 119c4 <__assert_fail@plt+0xa1c>
   118d4:	ldr	r1, [pc, #272]	; 119ec <__assert_fail@plt+0xa44>
   118d8:	cmp	r6, #0
   118dc:	moveq	r6, r7
   118e0:	bl	10d98 <dcgettext@plt>
   118e4:	mov	r1, r0
   118e8:	ldr	r3, [pc, #256]	; 119f0 <__assert_fail@plt+0xa48>
   118ec:	mov	r0, #1
   118f0:	ldr	r2, [pc, #252]	; 119f4 <__assert_fail@plt+0xa4c>
   118f4:	bl	10ed0 <__printf_chk@plt>
   118f8:	mov	r1, #0
   118fc:	mov	r0, #5
   11900:	bl	10f30 <setlocale@plt>
   11904:	cmp	r0, #0
   11908:	bne	1197c <__assert_fail@plt+0x9d4>
   1190c:	mov	r2, #5
   11910:	ldr	r1, [pc, #224]	; 119f8 <__assert_fail@plt+0xa50>
   11914:	mov	r0, #0
   11918:	bl	10d98 <dcgettext@plt>
   1191c:	mov	r1, r0
   11920:	ldr	r3, [pc, #156]	; 119c4 <__assert_fail@plt+0xa1c>
   11924:	mov	r0, #1
   11928:	ldr	r2, [pc, #192]	; 119f0 <__assert_fail@plt+0xa48>
   1192c:	bl	10ed0 <__printf_chk@plt>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #192]	; 119fc <__assert_fail@plt+0xa54>
   11938:	mov	r0, #0
   1193c:	bl	10d98 <dcgettext@plt>
   11940:	ldr	r2, [pc, #184]	; 11a00 <__assert_fail@plt+0xa58>
   11944:	cmp	r6, r7
   11948:	mov	r1, r0
   1194c:	mov	r0, #1
   11950:	ldr	r3, [pc, #172]	; 11a04 <__assert_fail@plt+0xa5c>
   11954:	moveq	r3, r2
   11958:	mov	r2, r6
   1195c:	bl	10ed0 <__printf_chk@plt>
   11960:	b	11788 <__assert_fail@plt+0x7e0>
   11964:	mov	r0, r7
   11968:	bl	10d2c <strcmp@plt>
   1196c:	cmp	r0, #0
   11970:	beq	118c4 <__assert_fail@plt+0x91c>
   11974:	add	r6, r6, #8
   11978:	b	118b8 <__assert_fail@plt+0x910>
   1197c:	mov	r2, #3
   11980:	ldr	r1, [pc, #128]	; 11a08 <__assert_fail@plt+0xa60>
   11984:	bl	10f90 <strncmp@plt>
   11988:	cmp	r0, #0
   1198c:	beq	1190c <__assert_fail@plt+0x964>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #112]	; 11a0c <__assert_fail@plt+0xa64>
   11998:	mov	r0, #0
   1199c:	bl	10d98 <dcgettext@plt>
   119a0:	ldr	r1, [r4]
   119a4:	bl	10d20 <fputs_unlocked@plt>
   119a8:	b	1190c <__assert_fail@plt+0x964>
   119ac:	muleq	r2, r0, r1
   119b0:	andeq	r6, r2, r0, asr r1
   119b4:	andeq	r4, r1, r3, asr r9
   119b8:	andeq	r4, r1, sl, ror r9
   119bc:	andeq	r6, r2, r4, asr r1
   119c0:	muleq	r1, r7, r9
   119c4:	andeq	r4, r1, ip, asr #18
   119c8:	andeq	r4, r1, r2, ror #19
   119cc:	andeq	r4, r1, sp, lsr #20
   119d0:	andeq	r4, r1, r3, ror #21
   119d4:	andeq	r4, r1, r0, lsl fp
   119d8:	andeq	r4, r1, r6, asr #22
   119dc:			; <UNDEFINED> instruction: 0x00014bb3
   119e0:	strdeq	r4, [r1], -r1
   119e4:	andeq	r4, r1, r9, lsr #26
   119e8:	andeq	r4, r1, r4, lsr #17
   119ec:	andeq	r4, r1, r4, lsr lr
   119f0:	andeq	r4, r1, fp, asr #28
   119f4:	andeq	r4, r1, r3, ror lr
   119f8:	andeq	r4, r1, ip, asr #29
   119fc:	andeq	r4, r1, r7, ror #29
   11a00:	andeq	r5, r1, r9, lsl #2
   11a04:	andeq	r4, r1, r9, lsl pc
   11a08:	andeq	r4, r1, r1, lsl #29
   11a0c:	andeq	r4, r1, r5, lsl #29
   11a10:	cmp	r0, #90	; 0x5a
   11a14:	bgt	11a34 <__assert_fail@plt+0xa8c>
   11a18:	cmp	r0, #65	; 0x41
   11a1c:	bge	11a40 <__assert_fail@plt+0xa98>
   11a20:	sub	r0, r0, #48	; 0x30
   11a24:	cmp	r0, #9
   11a28:	movhi	r0, #0
   11a2c:	movls	r0, #1
   11a30:	bx	lr
   11a34:	sub	r0, r0, #97	; 0x61
   11a38:	cmp	r0, #25
   11a3c:	b	11a28 <__assert_fail@plt+0xa80>
   11a40:	mov	r0, #1
   11a44:	bx	lr
   11a48:	cmp	r0, #65	; 0x41
   11a4c:	blt	11a6c <__assert_fail@plt+0xac4>
   11a50:	cmp	r0, #90	; 0x5a
   11a54:	ble	11a74 <__assert_fail@plt+0xacc>
   11a58:	sub	r0, r0, #97	; 0x61
   11a5c:	cmp	r0, #25
   11a60:	movhi	r0, #0
   11a64:	movls	r0, #1
   11a68:	bx	lr
   11a6c:	mov	r0, #0
   11a70:	bx	lr
   11a74:	mov	r0, #1
   11a78:	bx	lr
   11a7c:	cmp	r0, #127	; 0x7f
   11a80:	movhi	r0, #0
   11a84:	movls	r0, #1
   11a88:	bx	lr
   11a8c:	cmp	r0, #9
   11a90:	cmpne	r0, #32
   11a94:	moveq	r0, #1
   11a98:	movne	r0, #0
   11a9c:	bx	lr
   11aa0:	cmp	r0, #0
   11aa4:	blt	11ac0 <__assert_fail@plt+0xb18>
   11aa8:	cmp	r0, #31
   11aac:	ble	11ac8 <__assert_fail@plt+0xb20>
   11ab0:	sub	r0, r0, #127	; 0x7f
   11ab4:	clz	r0, r0
   11ab8:	lsr	r0, r0, #5
   11abc:	bx	lr
   11ac0:	mov	r0, #0
   11ac4:	bx	lr
   11ac8:	mov	r0, #1
   11acc:	bx	lr
   11ad0:	sub	r0, r0, #48	; 0x30
   11ad4:	cmp	r0, #9
   11ad8:	movhi	r0, #0
   11adc:	movls	r0, #1
   11ae0:	bx	lr
   11ae4:	sub	r0, r0, #33	; 0x21
   11ae8:	cmp	r0, #93	; 0x5d
   11aec:	movhi	r0, #0
   11af0:	movls	r0, #1
   11af4:	bx	lr
   11af8:	sub	r0, r0, #97	; 0x61
   11afc:	cmp	r0, #25
   11b00:	movhi	r0, #0
   11b04:	movls	r0, #1
   11b08:	bx	lr
   11b0c:	sub	r0, r0, #32
   11b10:	cmp	r0, #94	; 0x5e
   11b14:	movhi	r0, #0
   11b18:	movls	r0, #1
   11b1c:	bx	lr
   11b20:	cmp	r0, #64	; 0x40
   11b24:	bgt	11b44 <__assert_fail@plt+0xb9c>
   11b28:	cmp	r0, #58	; 0x3a
   11b2c:	bge	11b68 <__assert_fail@plt+0xbc0>
   11b30:	sub	r0, r0, #33	; 0x21
   11b34:	cmp	r0, #14
   11b38:	movhi	r0, #0
   11b3c:	movls	r0, #1
   11b40:	bx	lr
   11b44:	cmp	r0, #91	; 0x5b
   11b48:	blt	11b60 <__assert_fail@plt+0xbb8>
   11b4c:	cmp	r0, #96	; 0x60
   11b50:	ble	11b68 <__assert_fail@plt+0xbc0>
   11b54:	sub	r0, r0, #123	; 0x7b
   11b58:	cmp	r0, #3
   11b5c:	b	11b38 <__assert_fail@plt+0xb90>
   11b60:	mov	r0, #0
   11b64:	bx	lr
   11b68:	mov	r0, #1
   11b6c:	bx	lr
   11b70:	sub	r0, r0, #9
   11b74:	cmp	r0, #23
   11b78:	bhi	11b94 <__assert_fail@plt+0xbec>
   11b7c:	ldr	r3, [pc, #24]	; 11b9c <__assert_fail@plt+0xbf4>
   11b80:	mov	r2, #1
   11b84:	ands	r3, r3, r2, lsl r0
   11b88:	movne	r0, r2
   11b8c:	moveq	r0, #0
   11b90:	bx	lr
   11b94:	mov	r0, #0
   11b98:	bx	lr
   11b9c:	addeq	r0, r0, pc, lsl r0
   11ba0:	sub	r0, r0, #65	; 0x41
   11ba4:	cmp	r0, #25
   11ba8:	movhi	r0, #0
   11bac:	movls	r0, #1
   11bb0:	bx	lr
   11bb4:	cmp	r0, #70	; 0x46
   11bb8:	bgt	11bd8 <__assert_fail@plt+0xc30>
   11bbc:	cmp	r0, #65	; 0x41
   11bc0:	bge	11be4 <__assert_fail@plt+0xc3c>
   11bc4:	sub	r0, r0, #48	; 0x30
   11bc8:	cmp	r0, #9
   11bcc:	movhi	r0, #0
   11bd0:	movls	r0, #1
   11bd4:	bx	lr
   11bd8:	sub	r0, r0, #97	; 0x61
   11bdc:	cmp	r0, #5
   11be0:	b	11bcc <__assert_fail@plt+0xc24>
   11be4:	mov	r0, #1
   11be8:	bx	lr
   11bec:	sub	r3, r0, #65	; 0x41
   11bf0:	cmp	r3, #25
   11bf4:	addls	r0, r0, #32
   11bf8:	bx	lr
   11bfc:	sub	r3, r0, #97	; 0x61
   11c00:	cmp	r3, #25
   11c04:	subls	r0, r0, #32
   11c08:	bx	lr
   11c0c:	ldr	r3, [pc, #4]	; 11c18 <__assert_fail@plt+0xc70>
   11c10:	str	r0, [r3]
   11c14:	bx	lr
   11c18:	andeq	r6, r2, r8, lsl #3
   11c1c:	ldr	r3, [pc, #4]	; 11c28 <__assert_fail@plt+0xc80>
   11c20:	strb	r0, [r3, #4]
   11c24:	bx	lr
   11c28:	andeq	r6, r2, r8, lsl #3
   11c2c:	ldr	r3, [pc, #176]	; 11ce4 <__assert_fail@plt+0xd3c>
   11c30:	push	{r0, r1, r4, r5, r6, lr}
   11c34:	ldr	r0, [r3]
   11c38:	bl	14454 <__assert_fail@plt+0x34ac>
   11c3c:	cmp	r0, #0
   11c40:	beq	11cc8 <__assert_fail@plt+0xd20>
   11c44:	ldr	r4, [pc, #156]	; 11ce8 <__assert_fail@plt+0xd40>
   11c48:	bl	10eac <__errno_location@plt>
   11c4c:	mov	r5, r0
   11c50:	ldrb	r6, [r4, #4]
   11c54:	cmp	r6, #0
   11c58:	beq	11c68 <__assert_fail@plt+0xcc0>
   11c5c:	ldr	r3, [r0]
   11c60:	cmp	r3, #32
   11c64:	beq	11cc8 <__assert_fail@plt+0xd20>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #120]	; 11cec <__assert_fail@plt+0xd44>
   11c70:	mov	r0, #0
   11c74:	bl	10d98 <dcgettext@plt>
   11c78:	mov	r6, r0
   11c7c:	ldr	r0, [r4]
   11c80:	cmp	r0, #0
   11c84:	beq	11cb4 <__assert_fail@plt+0xd0c>
   11c88:	ldr	r4, [r5]
   11c8c:	bl	1338c <__assert_fail@plt+0x23e4>
   11c90:	mov	r3, r0
   11c94:	ldr	r2, [pc, #84]	; 11cf0 <__assert_fail@plt+0xd48>
   11c98:	mov	r0, #0
   11c9c:	str	r6, [sp]
   11ca0:	mov	r1, r4
   11ca4:	bl	10e10 <error@plt>
   11ca8:	ldr	r3, [pc, #68]	; 11cf4 <__assert_fail@plt+0xd4c>
   11cac:	ldr	r0, [r3]
   11cb0:	bl	10d50 <_exit@plt>
   11cb4:	mov	r3, r6
   11cb8:	ldr	r2, [pc, #56]	; 11cf8 <__assert_fail@plt+0xd50>
   11cbc:	ldr	r1, [r5]
   11cc0:	bl	10e10 <error@plt>
   11cc4:	b	11ca8 <__assert_fail@plt+0xd00>
   11cc8:	ldr	r3, [pc, #44]	; 11cfc <__assert_fail@plt+0xd54>
   11ccc:	ldr	r0, [r3]
   11cd0:	bl	14454 <__assert_fail@plt+0x34ac>
   11cd4:	cmp	r0, #0
   11cd8:	bne	11ca8 <__assert_fail@plt+0xd00>
   11cdc:	add	sp, sp, #8
   11ce0:	pop	{r4, r5, r6, pc}
   11ce4:	andeq	r6, r2, r4, asr r1
   11ce8:	andeq	r6, r2, r8, lsl #3
   11cec:	andeq	r5, r1, r5, ror r1
   11cf0:	andeq	r5, r1, r1, lsl #3
   11cf4:	strdeq	r6, [r2], -ip
   11cf8:	andeq	r5, r1, r5, lsl #3
   11cfc:	andeq	r6, r2, r0, asr r1
   11d00:	push	{r4, lr}
   11d04:	bl	11d54 <__assert_fail@plt+0xdac>
   11d08:	cmp	r0, #0
   11d0c:	popne	{r4, pc}
   11d10:	bl	13ca8 <__assert_fail@plt+0x2d00>
   11d14:	push	{r4, r5, r6, lr}
   11d18:	mov	r5, r0
   11d1c:	ldrb	r4, [r0]
   11d20:	bl	14254 <__assert_fail@plt+0x32ac>
   11d24:	sub	r0, r0, r5
   11d28:	sub	r4, r4, #47	; 0x2f
   11d2c:	clz	r4, r4
   11d30:	lsr	r4, r4, #5
   11d34:	cmp	r0, r4
   11d38:	popls	{r4, r5, r6, pc}
   11d3c:	sub	r3, r0, #1
   11d40:	ldrb	r2, [r5, r3]
   11d44:	cmp	r2, #47	; 0x2f
   11d48:	popne	{r4, r5, r6, pc}
   11d4c:	mov	r0, r3
   11d50:	b	11d34 <__assert_fail@plt+0xd8c>
   11d54:	push	{r4, r5, r6, lr}
   11d58:	mov	r6, r0
   11d5c:	bl	11d14 <__assert_fail@plt+0xd6c>
   11d60:	add	r3, r0, #1
   11d64:	mov	r4, r0
   11d68:	cmp	r0, #0
   11d6c:	movne	r0, r3
   11d70:	addeq	r0, r3, #1
   11d74:	bl	14190 <__assert_fail@plt+0x31e8>
   11d78:	subs	r5, r0, #0
   11d7c:	beq	11da4 <__assert_fail@plt+0xdfc>
   11d80:	mov	r2, r4
   11d84:	mov	r1, r6
   11d88:	bl	10d5c <memcpy@plt>
   11d8c:	cmp	r4, #0
   11d90:	moveq	r3, #46	; 0x2e
   11d94:	moveq	r4, #1
   11d98:	strbeq	r3, [r5]
   11d9c:	mov	r3, #0
   11da0:	strb	r3, [r5, r4]
   11da4:	mov	r0, r5
   11da8:	pop	{r4, r5, r6, pc}
   11dac:	push	{r4, lr}
   11db0:	bl	11dc0 <__assert_fail@plt+0xe18>
   11db4:	cmp	r0, #0
   11db8:	popne	{r4, pc}
   11dbc:	bl	13ca8 <__assert_fail@plt+0x2d00>
   11dc0:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc4:	mov	r5, r1
   11dc8:	mov	r9, r2
   11dcc:	mov	r7, r0
   11dd0:	bl	14254 <__assert_fail@plt+0x32ac>
   11dd4:	mov	r4, r0
   11dd8:	sub	r4, r4, r7
   11ddc:	bl	142ac <__assert_fail@plt+0x3304>
   11de0:	mov	r6, r0
   11de4:	add	r4, r4, r0
   11de8:	mov	r0, r5
   11dec:	bl	10e94 <strlen@plt>
   11df0:	cmp	r6, #0
   11df4:	mov	r8, r0
   11df8:	beq	11e78 <__assert_fail@plt+0xed0>
   11dfc:	add	r3, r7, r4
   11e00:	ldrb	r3, [r3, #-1]
   11e04:	cmp	r3, #47	; 0x2f
   11e08:	moveq	r6, #0
   11e0c:	beq	11e20 <__assert_fail@plt+0xe78>
   11e10:	ldrb	r3, [r5]
   11e14:	cmp	r3, #47	; 0x2f
   11e18:	moveq	r6, #0
   11e1c:	movne	r6, #47	; 0x2f
   11e20:	adds	fp, r6, #0
   11e24:	add	r0, r8, #1
   11e28:	movne	fp, #1
   11e2c:	add	r0, r0, r4
   11e30:	add	r0, r0, fp
   11e34:	bl	14190 <__assert_fail@plt+0x31e8>
   11e38:	subs	sl, r0, #0
   11e3c:	beq	11e6c <__assert_fail@plt+0xec4>
   11e40:	mov	r2, r4
   11e44:	mov	r1, r7
   11e48:	bl	10e64 <mempcpy@plt>
   11e4c:	cmp	r9, #0
   11e50:	mov	r2, r8
   11e54:	strb	r6, [r0], fp
   11e58:	mov	r1, r5
   11e5c:	strne	r0, [r9]
   11e60:	bl	10e64 <mempcpy@plt>
   11e64:	mov	r3, #0
   11e68:	strb	r3, [r0]
   11e6c:	mov	r0, sl
   11e70:	add	sp, sp, #4
   11e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e78:	ldrb	r3, [r5]
   11e7c:	cmp	r3, #47	; 0x2f
   11e80:	movne	r6, #0
   11e84:	moveq	r6, #46	; 0x2e
   11e88:	b	11e20 <__assert_fail@plt+0xe78>
   11e8c:	push	{r0, r1, r2, r4, r5, lr}
   11e90:	mov	r5, r0
   11e94:	bl	10eac <__errno_location@plt>
   11e98:	mov	r4, r0
   11e9c:	mov	r0, r5
   11ea0:	ldr	r3, [r4]
   11ea4:	str	r3, [sp]
   11ea8:	str	r3, [sp, #4]
   11eac:	mov	r3, #0
   11eb0:	str	r3, [r4]
   11eb4:	bl	10d44 <free@plt>
   11eb8:	ldr	r3, [r4]
   11ebc:	add	r2, sp, #8
   11ec0:	clz	r3, r3
   11ec4:	lsr	r3, r3, #5
   11ec8:	add	r3, r2, r3, lsl #2
   11ecc:	ldr	r3, [r3, #-8]
   11ed0:	str	r3, [r4]
   11ed4:	add	sp, sp, #12
   11ed8:	pop	{r4, r5, pc}
   11edc:	push	{r4, r5, r6, lr}
   11ee0:	subs	r4, r0, #0
   11ee4:	bne	11efc <__assert_fail@plt+0xf54>
   11ee8:	ldr	r3, [pc, #124]	; 11f6c <__assert_fail@plt+0xfc4>
   11eec:	ldr	r0, [pc, #124]	; 11f70 <__assert_fail@plt+0xfc8>
   11ef0:	ldr	r1, [r3]
   11ef4:	bl	10f84 <fputs@plt>
   11ef8:	bl	10f9c <abort@plt>
   11efc:	mov	r1, #47	; 0x2f
   11f00:	bl	10f54 <strrchr@plt>
   11f04:	subs	r6, r0, #0
   11f08:	beq	11f58 <__assert_fail@plt+0xfb0>
   11f0c:	add	r5, r6, #1
   11f10:	sub	r3, r5, r4
   11f14:	cmp	r3, #6
   11f18:	ble	11f58 <__assert_fail@plt+0xfb0>
   11f1c:	mov	r2, #7
   11f20:	ldr	r1, [pc, #76]	; 11f74 <__assert_fail@plt+0xfcc>
   11f24:	sub	r0, r6, #6
   11f28:	bl	10f90 <strncmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	bne	11f58 <__assert_fail@plt+0xfb0>
   11f34:	mov	r2, #3
   11f38:	ldr	r1, [pc, #56]	; 11f78 <__assert_fail@plt+0xfd0>
   11f3c:	mov	r0, r5
   11f40:	bl	10f90 <strncmp@plt>
   11f44:	cmp	r0, #0
   11f48:	ldreq	r3, [pc, #44]	; 11f7c <__assert_fail@plt+0xfd4>
   11f4c:	addeq	r4, r6, #4
   11f50:	movne	r4, r5
   11f54:	streq	r4, [r3]
   11f58:	ldr	r3, [pc, #32]	; 11f80 <__assert_fail@plt+0xfd8>
   11f5c:	str	r4, [r3]
   11f60:	ldr	r3, [pc, #28]	; 11f84 <__assert_fail@plt+0xfdc>
   11f64:	str	r4, [r3]
   11f68:	pop	{r4, r5, r6, pc}
   11f6c:	andeq	r6, r2, r0, asr r1
   11f70:	andeq	r5, r1, r8, lsl #3
   11f74:	andeq	r5, r1, r0, asr #3
   11f78:	andeq	r5, r1, r8, asr #3
   11f7c:	andeq	r6, r2, r0, asr #2
   11f80:	muleq	r2, r0, r1
   11f84:	andeq	r6, r2, r4, asr #2
   11f88:	push	{r4, lr}
   11f8c:	mov	r2, #48	; 0x30
   11f90:	mov	r4, r1
   11f94:	mov	r1, #0
   11f98:	bl	10ec4 <memset@plt>
   11f9c:	cmp	r4, #10
   11fa0:	bne	11fa8 <__assert_fail@plt+0x1000>
   11fa4:	bl	10f9c <abort@plt>
   11fa8:	str	r4, [r0]
   11fac:	pop	{r4, pc}
   11fb0:	push	{r4, r5, r6, lr}
   11fb4:	mov	r2, #5
   11fb8:	mov	r6, r0
   11fbc:	mov	r5, r1
   11fc0:	mov	r1, r0
   11fc4:	mov	r0, #0
   11fc8:	bl	10d98 <dcgettext@plt>
   11fcc:	cmp	r6, r0
   11fd0:	mov	r4, r0
   11fd4:	bne	12044 <__assert_fail@plt+0x109c>
   11fd8:	bl	1467c <__assert_fail@plt+0x36d4>
   11fdc:	ldrb	r3, [r0]
   11fe0:	bic	r3, r3, #32
   11fe4:	cmp	r3, #85	; 0x55
   11fe8:	bne	1204c <__assert_fail@plt+0x10a4>
   11fec:	ldrb	r3, [r0, #1]
   11ff0:	bic	r3, r3, #32
   11ff4:	cmp	r3, #84	; 0x54
   11ff8:	bne	120bc <__assert_fail@plt+0x1114>
   11ffc:	ldrb	r3, [r0, #2]
   12000:	bic	r3, r3, #32
   12004:	cmp	r3, #70	; 0x46
   12008:	bne	120bc <__assert_fail@plt+0x1114>
   1200c:	ldrb	r3, [r0, #3]
   12010:	cmp	r3, #45	; 0x2d
   12014:	bne	120bc <__assert_fail@plt+0x1114>
   12018:	ldrb	r3, [r0, #4]
   1201c:	cmp	r3, #56	; 0x38
   12020:	bne	120bc <__assert_fail@plt+0x1114>
   12024:	ldrb	r3, [r0, #5]
   12028:	cmp	r3, #0
   1202c:	bne	120bc <__assert_fail@plt+0x1114>
   12030:	ldrb	r2, [r4]
   12034:	ldr	r3, [pc, #144]	; 120cc <__assert_fail@plt+0x1124>
   12038:	ldr	r4, [pc, #144]	; 120d0 <__assert_fail@plt+0x1128>
   1203c:	cmp	r2, #96	; 0x60
   12040:	movne	r4, r3
   12044:	mov	r0, r4
   12048:	pop	{r4, r5, r6, pc}
   1204c:	cmp	r3, #71	; 0x47
   12050:	bne	120bc <__assert_fail@plt+0x1114>
   12054:	ldrb	r3, [r0, #1]
   12058:	bic	r3, r3, #32
   1205c:	cmp	r3, #66	; 0x42
   12060:	bne	120bc <__assert_fail@plt+0x1114>
   12064:	ldrb	r3, [r0, #2]
   12068:	cmp	r3, #49	; 0x31
   1206c:	bne	120bc <__assert_fail@plt+0x1114>
   12070:	ldrb	r3, [r0, #3]
   12074:	cmp	r3, #56	; 0x38
   12078:	bne	120bc <__assert_fail@plt+0x1114>
   1207c:	ldrb	r3, [r0, #4]
   12080:	cmp	r3, #48	; 0x30
   12084:	bne	120bc <__assert_fail@plt+0x1114>
   12088:	ldrb	r3, [r0, #5]
   1208c:	cmp	r3, #51	; 0x33
   12090:	bne	120bc <__assert_fail@plt+0x1114>
   12094:	ldrb	r3, [r0, #6]
   12098:	cmp	r3, #48	; 0x30
   1209c:	bne	120bc <__assert_fail@plt+0x1114>
   120a0:	ldrb	r3, [r0, #7]
   120a4:	cmp	r3, #0
   120a8:	bne	120bc <__assert_fail@plt+0x1114>
   120ac:	ldrb	r2, [r4]
   120b0:	ldr	r3, [pc, #28]	; 120d4 <__assert_fail@plt+0x112c>
   120b4:	ldr	r4, [pc, #28]	; 120d8 <__assert_fail@plt+0x1130>
   120b8:	b	1203c <__assert_fail@plt+0x1094>
   120bc:	ldr	r4, [pc, #24]	; 120dc <__assert_fail@plt+0x1134>
   120c0:	cmp	r5, #9
   120c4:	ldr	r3, [pc, #20]	; 120e0 <__assert_fail@plt+0x1138>
   120c8:	b	12040 <__assert_fail@plt+0x1098>
   120cc:	andeq	r5, r1, r2, lsr #4
   120d0:	andeq	r5, r1, sp, lsr #4
   120d4:	andeq	r5, r1, r6, lsr #4
   120d8:	andeq	r5, r1, r9, lsr #4
   120dc:	andeq	r5, r1, r0, lsr #4
   120e0:	andeq	r5, r1, r1, lsr r2
   120e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120e8:	sub	sp, sp, #108	; 0x6c
   120ec:	mov	r8, r0
   120f0:	mov	r5, r1
   120f4:	mov	r6, #0
   120f8:	str	r3, [sp, #40]	; 0x28
   120fc:	str	r2, [sp, #48]	; 0x30
   12100:	ldr	sl, [sp, #144]	; 0x90
   12104:	bl	10de0 <__ctype_get_mb_cur_max@plt>
   12108:	ldr	r3, [sp, #148]	; 0x94
   1210c:	str	r6, [sp, #24]
   12110:	str	r6, [sp, #32]
   12114:	str	r6, [sp, #44]	; 0x2c
   12118:	str	r6, [sp, #52]	; 0x34
   1211c:	ubfx	r7, r3, #1, #1
   12120:	mov	r3, #1
   12124:	str	r6, [sp, #60]	; 0x3c
   12128:	str	r3, [sp, #72]	; 0x48
   1212c:	str	r0, [sp, #76]	; 0x4c
   12130:	cmp	sl, #10
   12134:	ldrls	pc, [pc, sl, lsl #2]
   12138:	b	1237c <__assert_fail@plt+0x13d4>
   1213c:	andeq	r2, r1, r8, ror #2
   12140:	muleq	r1, r4, r3
   12144:	andeq	r2, r1, r8, lsl r3
   12148:	andeq	r2, r1, r0, lsr r3
   1214c:	andeq	r2, r1, r0, lsl #6
   12150:	andeq	r2, r1, r8, asr r2
   12154:	andeq	r2, r1, r8, lsr r2
   12158:	andeq	r2, r1, r0, lsl #7
   1215c:	andeq	r2, r1, r8, lsl #5
   12160:	andeq	r2, r1, r8, lsl #5
   12164:	andeq	r2, r1, r8, lsl #5
   12168:	mov	r4, sl
   1216c:	mov	r7, #0
   12170:	mov	r9, r5
   12174:	mov	r3, #0
   12178:	str	r6, [sp, #68]	; 0x44
   1217c:	str	r3, [sp, #28]
   12180:	ldr	r3, [sp, #40]	; 0x28
   12184:	cmn	r3, #1
   12188:	bne	12d28 <__assert_fail@plt+0x1d80>
   1218c:	ldr	r2, [sp, #28]
   12190:	ldr	r3, [sp, #48]	; 0x30
   12194:	ldrb	r3, [r3, r2]
   12198:	adds	r3, r3, #0
   1219c:	movne	r3, #1
   121a0:	str	r3, [sp, #36]	; 0x24
   121a4:	ldr	r3, [sp, #36]	; 0x24
   121a8:	cmp	r3, #0
   121ac:	bne	123b8 <__assert_fail@plt+0x1410>
   121b0:	sub	r3, sl, #2
   121b4:	cmp	r4, #0
   121b8:	clz	r3, r3
   121bc:	movne	r2, #0
   121c0:	lsr	r3, r3, #5
   121c4:	andeq	r2, r3, r7
   121c8:	cmp	r2, #0
   121cc:	bne	1257c <__assert_fail@plt+0x15d4>
   121d0:	eor	r7, r7, #1
   121d4:	ands	r3, r3, r7
   121d8:	beq	12da0 <__assert_fail@plt+0x1df8>
   121dc:	ldr	r2, [sp, #68]	; 0x44
   121e0:	cmp	r2, #0
   121e4:	beq	12d68 <__assert_fail@plt+0x1dc0>
   121e8:	ldr	r3, [sp, #72]	; 0x48
   121ec:	cmp	r3, #0
   121f0:	beq	12d3c <__assert_fail@plt+0x1d94>
   121f4:	ldr	r2, [sp, #48]	; 0x30
   121f8:	ldr	r3, [sp, #160]	; 0xa0
   121fc:	ldr	r1, [sp, #60]	; 0x3c
   12200:	str	r3, [sp, #16]
   12204:	ldr	r3, [sp, #156]	; 0x9c
   12208:	str	r3, [sp, #12]
   1220c:	ldr	r3, [sp, #152]	; 0x98
   12210:	str	r3, [sp, #8]
   12214:	ldr	r3, [sp, #148]	; 0x94
   12218:	str	r3, [sp, #4]
   1221c:	mov	r3, #5
   12220:	str	r3, [sp]
   12224:	ldr	r3, [sp, #40]	; 0x28
   12228:	mov	r0, r8
   1222c:	bl	120e4 <__assert_fail@plt+0x113c>
   12230:	mov	r4, r0
   12234:	b	12d94 <__assert_fail@plt+0x1dec>
   12238:	ldr	r3, [pc, #2948]	; 12dc4 <__assert_fail@plt+0x1e1c>
   1223c:	mov	r7, #1
   12240:	mov	r4, #0
   12244:	mov	sl, #5
   12248:	str	r7, [sp, #24]
   1224c:	str	r7, [sp, #32]
   12250:	str	r3, [sp, #44]	; 0x2c
   12254:	b	12170 <__assert_fail@plt+0x11c8>
   12258:	cmp	r7, #0
   1225c:	bne	123a0 <__assert_fail@plt+0x13f8>
   12260:	cmp	r5, #0
   12264:	mov	r4, #1
   12268:	movne	r3, #34	; 0x22
   1226c:	strbne	r3, [r8]
   12270:	mov	r3, #1
   12274:	str	r3, [sp, #24]
   12278:	str	r3, [sp, #32]
   1227c:	ldr	r3, [pc, #2880]	; 12dc4 <__assert_fail@plt+0x1e1c>
   12280:	str	r3, [sp, #44]	; 0x2c
   12284:	b	12170 <__assert_fail@plt+0x11c8>
   12288:	cmp	sl, #10
   1228c:	beq	122b0 <__assert_fail@plt+0x1308>
   12290:	mov	r1, sl
   12294:	ldr	r0, [pc, #2860]	; 12dc8 <__assert_fail@plt+0x1e20>
   12298:	bl	11fb0 <__assert_fail@plt+0x1008>
   1229c:	mov	r1, sl
   122a0:	str	r0, [sp, #156]	; 0x9c
   122a4:	ldr	r0, [pc, #2848]	; 12dcc <__assert_fail@plt+0x1e24>
   122a8:	bl	11fb0 <__assert_fail@plt+0x1008>
   122ac:	str	r0, [sp, #160]	; 0xa0
   122b0:	cmp	r7, #0
   122b4:	moveq	r4, r7
   122b8:	beq	122d0 <__assert_fail@plt+0x1328>
   122bc:	mov	r4, #0
   122c0:	b	122e0 <__assert_fail@plt+0x1338>
   122c4:	cmp	r5, r4
   122c8:	strbhi	r3, [r8, r4]
   122cc:	add	r4, r4, #1
   122d0:	ldr	r3, [sp, #156]	; 0x9c
   122d4:	ldrb	r3, [r3, r4]
   122d8:	cmp	r3, #0
   122dc:	bne	122c4 <__assert_fail@plt+0x131c>
   122e0:	ldr	r0, [sp, #160]	; 0xa0
   122e4:	bl	10e94 <strlen@plt>
   122e8:	ldr	r3, [sp, #160]	; 0xa0
   122ec:	str	r0, [sp, #32]
   122f0:	str	r3, [sp, #44]	; 0x2c
   122f4:	mov	r3, #1
   122f8:	str	r3, [sp, #24]
   122fc:	b	12170 <__assert_fail@plt+0x11c8>
   12300:	mov	r3, #1
   12304:	cmp	r7, #0
   12308:	streq	r3, [sp, #24]
   1230c:	beq	12350 <__assert_fail@plt+0x13a8>
   12310:	str	r3, [sp, #32]
   12314:	b	1233c <__assert_fail@plt+0x1394>
   12318:	cmp	r7, #0
   1231c:	beq	12350 <__assert_fail@plt+0x13a8>
   12320:	mov	r3, #1
   12324:	str	r3, [sp, #32]
   12328:	ldr	r3, [pc, #2716]	; 12dcc <__assert_fail@plt+0x1e24>
   1232c:	b	123b0 <__assert_fail@plt+0x1408>
   12330:	mov	r7, #1
   12334:	str	r7, [sp, #24]
   12338:	str	r7, [sp, #32]
   1233c:	ldr	r3, [pc, #2696]	; 12dcc <__assert_fail@plt+0x1e24>
   12340:	mov	r4, #0
   12344:	str	r3, [sp, #44]	; 0x2c
   12348:	mov	sl, #2
   1234c:	b	12170 <__assert_fail@plt+0x11c8>
   12350:	cmp	r5, #0
   12354:	movne	r3, #39	; 0x27
   12358:	movne	r7, #0
   1235c:	strbne	r3, [r8]
   12360:	moveq	r7, r5
   12364:	mov	r3, #1
   12368:	mov	r4, #1
   1236c:	str	r3, [sp, #32]
   12370:	ldr	r3, [pc, #2644]	; 12dcc <__assert_fail@plt+0x1e24>
   12374:	str	r3, [sp, #44]	; 0x2c
   12378:	b	12348 <__assert_fail@plt+0x13a0>
   1237c:	bl	10f9c <abort@plt>
   12380:	mov	r3, #1
   12384:	mov	r7, #0
   12388:	str	r3, [sp, #24]
   1238c:	mov	r4, #0
   12390:	b	12170 <__assert_fail@plt+0x11c8>
   12394:	mov	r7, #1
   12398:	str	sl, [sp, #32]
   1239c:	b	1233c <__assert_fail@plt+0x1394>
   123a0:	mov	r3, #1
   123a4:	str	r7, [sp, #24]
   123a8:	str	r3, [sp, #32]
   123ac:	ldr	r3, [pc, #2576]	; 12dc4 <__assert_fail@plt+0x1e1c>
   123b0:	str	r3, [sp, #44]	; 0x2c
   123b4:	b	1238c <__assert_fail@plt+0x13e4>
   123b8:	ldr	fp, [sp, #24]
   123bc:	ldr	r3, [sp, #32]
   123c0:	cmp	sl, #2
   123c4:	moveq	fp, #0
   123c8:	andne	fp, fp, #1
   123cc:	adds	r5, r3, #0
   123d0:	movne	r5, #1
   123d4:	ands	r3, fp, r5
   123d8:	str	r3, [sp, #64]	; 0x40
   123dc:	beq	124ac <__assert_fail@plt+0x1504>
   123e0:	ldr	r3, [sp, #28]
   123e4:	ldr	r2, [sp, #32]
   123e8:	cmp	r2, #1
   123ec:	add	r6, r3, r2
   123f0:	mov	r3, r2
   123f4:	ldr	r2, [sp, #40]	; 0x28
   123f8:	movls	r3, #0
   123fc:	movhi	r3, #1
   12400:	cmn	r2, #1
   12404:	movne	r3, #0
   12408:	cmp	r3, #0
   1240c:	beq	1241c <__assert_fail@plt+0x1474>
   12410:	ldr	r0, [sp, #48]	; 0x30
   12414:	bl	10e94 <strlen@plt>
   12418:	str	r0, [sp, #40]	; 0x28
   1241c:	ldr	r3, [sp, #40]	; 0x28
   12420:	cmp	r6, r3
   12424:	bhi	124a4 <__assert_fail@plt+0x14fc>
   12428:	ldr	r0, [sp, #28]
   1242c:	ldr	r2, [sp, #32]
   12430:	ldr	r3, [sp, #48]	; 0x30
   12434:	ldr	r1, [sp, #44]	; 0x2c
   12438:	add	r0, r3, r0
   1243c:	bl	10d80 <memcmp@plt>
   12440:	cmp	r0, #0
   12444:	bne	124a4 <__assert_fail@plt+0x14fc>
   12448:	cmp	r7, #0
   1244c:	beq	124ac <__assert_fail@plt+0x1504>
   12450:	str	r7, [sp, #24]
   12454:	ldr	r3, [sp, #24]
   12458:	mov	r1, r9
   1245c:	ldr	r2, [sp, #48]	; 0x30
   12460:	cmp	sl, #2
   12464:	movne	r3, #0
   12468:	andeq	r3, r3, #1
   1246c:	cmp	r3, #0
   12470:	ldr	r3, [sp, #160]	; 0xa0
   12474:	movne	sl, #4
   12478:	str	sl, [sp]
   1247c:	str	r3, [sp, #16]
   12480:	ldr	r3, [sp, #156]	; 0x9c
   12484:	str	r3, [sp, #12]
   12488:	mov	r3, #0
   1248c:	str	r3, [sp, #8]
   12490:	ldr	r3, [sp, #148]	; 0x94
   12494:	bic	r3, r3, #2
   12498:	str	r3, [sp, #4]
   1249c:	ldr	r3, [sp, #40]	; 0x28
   124a0:	b	12228 <__assert_fail@plt+0x1280>
   124a4:	mov	r3, #0
   124a8:	str	r3, [sp, #64]	; 0x40
   124ac:	ldr	r2, [sp, #28]
   124b0:	ldr	r3, [sp, #48]	; 0x30
   124b4:	add	r3, r3, r2
   124b8:	str	r3, [sp, #80]	; 0x50
   124bc:	ldr	r3, [sp, #48]	; 0x30
   124c0:	ldrb	r6, [r3, r2]
   124c4:	cmp	r6, #58	; 0x3a
   124c8:	bhi	1262c <__assert_fail@plt+0x1684>
   124cc:	cmp	r6, #43	; 0x2b
   124d0:	bcs	127ec <__assert_fail@plt+0x1844>
   124d4:	cmp	r6, #32
   124d8:	beq	12840 <__assert_fail@plt+0x1898>
   124dc:	bhi	12584 <__assert_fail@plt+0x15dc>
   124e0:	cmp	r6, #9
   124e4:	beq	129e8 <__assert_fail@plt+0x1a40>
   124e8:	bhi	12548 <__assert_fail@plt+0x15a0>
   124ec:	cmp	r6, #7
   124f0:	beq	129f8 <__assert_fail@plt+0x1a50>
   124f4:	bhi	12a14 <__assert_fail@plt+0x1a6c>
   124f8:	cmp	r6, #0
   124fc:	beq	1285c <__assert_fail@plt+0x18b4>
   12500:	ldr	r3, [sp, #76]	; 0x4c
   12504:	cmp	r3, #1
   12508:	bne	12a60 <__assert_fail@plt+0x1ab8>
   1250c:	bl	10e7c <__ctype_b_loc@plt>
   12510:	ldr	r2, [r0]
   12514:	sxth	r3, r6
   12518:	lsl	r3, r3, #1
   1251c:	ldrh	r5, [r2, r3]
   12520:	ldr	r3, [sp, #76]	; 0x4c
   12524:	ubfx	r5, r5, #14, #1
   12528:	str	r3, [sp, #56]	; 0x38
   1252c:	ldr	r3, [sp, #24]
   12530:	eor	fp, r5, #1
   12534:	and	fp, fp, r3
   12538:	ands	fp, fp, #255	; 0xff
   1253c:	beq	1271c <__assert_fail@plt+0x1774>
   12540:	mov	r5, #0
   12544:	b	12b0c <__assert_fail@plt+0x1b64>
   12548:	cmp	r6, #11
   1254c:	beq	12a1c <__assert_fail@plt+0x1a74>
   12550:	bcc	129f0 <__assert_fail@plt+0x1a48>
   12554:	cmp	r6, #12
   12558:	beq	12a24 <__assert_fail@plt+0x1a7c>
   1255c:	cmp	r6, #13
   12560:	moveq	r3, #114	; 0x72
   12564:	bne	12500 <__assert_fail@plt+0x1558>
   12568:	cmp	sl, #2
   1256c:	movne	r2, #0
   12570:	andeq	r2, r7, #1
   12574:	cmp	r2, #0
   12578:	beq	129fc <__assert_fail@plt+0x1a54>
   1257c:	mov	sl, #2
   12580:	b	12454 <__assert_fail@plt+0x14ac>
   12584:	cmp	r6, #37	; 0x25
   12588:	beq	127ec <__assert_fail@plt+0x1844>
   1258c:	bhi	125a0 <__assert_fail@plt+0x15f8>
   12590:	cmp	r6, #35	; 0x23
   12594:	beq	12834 <__assert_fail@plt+0x188c>
   12598:	mov	r5, #0
   1259c:	b	12844 <__assert_fail@plt+0x189c>
   125a0:	cmp	r6, #39	; 0x27
   125a4:	bne	12598 <__assert_fail@plt+0x15f0>
   125a8:	cmp	sl, #2
   125ac:	ldrne	r5, [sp, #36]	; 0x24
   125b0:	movne	r3, r5
   125b4:	strne	r3, [sp, #68]	; 0x44
   125b8:	bne	12938 <__assert_fail@plt+0x1990>
   125bc:	cmp	r7, #0
   125c0:	bne	12454 <__assert_fail@plt+0x14ac>
   125c4:	ldr	r3, [sp, #60]	; 0x3c
   125c8:	cmp	r9, #0
   125cc:	clz	r3, r3
   125d0:	lsr	r3, r3, #5
   125d4:	moveq	r3, #0
   125d8:	cmp	r3, #0
   125dc:	strne	r9, [sp, #60]	; 0x3c
   125e0:	movne	r9, #0
   125e4:	bne	125f4 <__assert_fail@plt+0x164c>
   125e8:	cmp	r9, r4
   125ec:	movhi	r3, #39	; 0x27
   125f0:	strbhi	r3, [r8, r4]
   125f4:	add	r3, r4, #1
   125f8:	ldr	r5, [sp, #36]	; 0x24
   125fc:	mov	fp, #0
   12600:	cmp	r3, r9
   12604:	movcc	r2, #92	; 0x5c
   12608:	str	fp, [sp, #52]	; 0x34
   1260c:	strbcc	r2, [r8, r3]
   12610:	add	r3, r4, #2
   12614:	add	r4, r4, #3
   12618:	cmp	r3, r9
   1261c:	str	r5, [sp, #68]	; 0x44
   12620:	movcc	r2, #39	; 0x27
   12624:	strbcc	r2, [r8, r3]
   12628:	b	1271c <__assert_fail@plt+0x1774>
   1262c:	cmp	r6, #94	; 0x5e
   12630:	beq	12598 <__assert_fail@plt+0x15f0>
   12634:	bhi	127f4 <__assert_fail@plt+0x184c>
   12638:	cmp	r6, #90	; 0x5a
   1263c:	bhi	127e0 <__assert_fail@plt+0x1838>
   12640:	cmp	r6, #65	; 0x41
   12644:	bcs	127ec <__assert_fail@plt+0x1844>
   12648:	cmp	r6, #62	; 0x3e
   1264c:	bls	12598 <__assert_fail@plt+0x15f0>
   12650:	cmp	r6, #63	; 0x3f
   12654:	bne	12500 <__assert_fail@plt+0x1558>
   12658:	cmp	sl, #2
   1265c:	beq	12940 <__assert_fail@plt+0x1998>
   12660:	cmp	sl, #5
   12664:	movne	fp, #0
   12668:	bne	12d10 <__assert_fail@plt+0x1d68>
   1266c:	ldr	r3, [sp, #148]	; 0x94
   12670:	tst	r3, #4
   12674:	beq	12948 <__assert_fail@plt+0x19a0>
   12678:	ldr	r3, [sp, #28]
   1267c:	add	r2, r3, #2
   12680:	ldr	r3, [sp, #40]	; 0x28
   12684:	cmp	r2, r3
   12688:	bcs	12948 <__assert_fail@plt+0x19a0>
   1268c:	ldr	r1, [sp, #28]
   12690:	ldr	r3, [sp, #48]	; 0x30
   12694:	add	r3, r3, r1
   12698:	ldrb	r1, [r3, #1]
   1269c:	cmp	r1, #63	; 0x3f
   126a0:	bne	12948 <__assert_fail@plt+0x19a0>
   126a4:	ldr	r3, [sp, #48]	; 0x30
   126a8:	ldrb	r6, [r3, r2]
   126ac:	sub	r3, r6, #33	; 0x21
   126b0:	uxtb	r3, r3
   126b4:	cmp	r3, #29
   126b8:	bhi	12d18 <__assert_fail@plt+0x1d70>
   126bc:	ldr	r0, [pc, #1804]	; 12dd0 <__assert_fail@plt+0x1e28>
   126c0:	mov	r5, #1
   126c4:	ands	r5, r0, r5, lsl r3
   126c8:	beq	12d20 <__assert_fail@plt+0x1d78>
   126cc:	cmp	r7, #0
   126d0:	bne	12454 <__assert_fail@plt+0x14ac>
   126d4:	cmp	r9, r4
   126d8:	add	r3, r4, #1
   126dc:	str	r2, [sp, #28]
   126e0:	mov	r5, #0
   126e4:	strbhi	r1, [r8, r4]
   126e8:	cmp	r9, r3
   126ec:	mov	fp, r5
   126f0:	movhi	r1, #34	; 0x22
   126f4:	strbhi	r1, [r8, r3]
   126f8:	add	r3, r4, #2
   126fc:	cmp	r9, r3
   12700:	movhi	r1, #34	; 0x22
   12704:	strbhi	r1, [r8, r3]
   12708:	add	r3, r4, #3
   1270c:	add	r4, r4, #4
   12710:	cmp	r9, r3
   12714:	movhi	r1, #63	; 0x3f
   12718:	strbhi	r1, [r8, r3]
   1271c:	ldr	r3, [sp, #24]
   12720:	eor	r3, r3, #1
   12724:	cmp	sl, #2
   12728:	orreq	r3, r3, #1
   1272c:	eor	r3, r3, #1
   12730:	orr	r3, r7, r3
   12734:	tst	r3, #255	; 0xff
   12738:	beq	12764 <__assert_fail@plt+0x17bc>
   1273c:	ldr	r3, [sp, #152]	; 0x98
   12740:	cmp	r3, #0
   12744:	beq	12764 <__assert_fail@plt+0x17bc>
   12748:	ldr	r1, [sp, #152]	; 0x98
   1274c:	ubfx	r2, r6, #5, #8
   12750:	and	r3, r6, #31
   12754:	ldr	r2, [r1, r2, lsl #2]
   12758:	lsr	r3, r2, r3
   1275c:	tst	r3, #1
   12760:	bne	12770 <__assert_fail@plt+0x17c8>
   12764:	ldr	r3, [sp, #64]	; 0x40
   12768:	cmp	r3, #0
   1276c:	beq	12968 <__assert_fail@plt+0x19c0>
   12770:	sub	r3, sl, #2
   12774:	cmp	r7, #0
   12778:	clz	r3, r3
   1277c:	lsr	r3, r3, #5
   12780:	bne	12454 <__assert_fail@plt+0x14ac>
   12784:	ldr	r2, [sp, #52]	; 0x34
   12788:	eor	r2, r2, #1
   1278c:	ands	r3, r3, r2
   12790:	beq	127c8 <__assert_fail@plt+0x1820>
   12794:	cmp	r9, r4
   12798:	str	r3, [sp, #52]	; 0x34
   1279c:	movhi	r2, #39	; 0x27
   127a0:	strbhi	r2, [r8, r4]
   127a4:	add	r2, r4, #1
   127a8:	cmp	r9, r2
   127ac:	movhi	r1, #36	; 0x24
   127b0:	strbhi	r1, [r8, r2]
   127b4:	add	r2, r4, #2
   127b8:	add	r4, r4, #3
   127bc:	cmp	r9, r2
   127c0:	movhi	r1, #39	; 0x27
   127c4:	strbhi	r1, [r8, r2]
   127c8:	cmp	r9, r4
   127cc:	ldr	fp, [sp, #36]	; 0x24
   127d0:	movhi	r3, #92	; 0x5c
   127d4:	strbhi	r3, [r8, r4]
   127d8:	add	r4, r4, #1
   127dc:	b	12968 <__assert_fail@plt+0x19c0>
   127e0:	cmp	r6, #92	; 0x5c
   127e4:	beq	12950 <__assert_fail@plt+0x19a8>
   127e8:	bls	12598 <__assert_fail@plt+0x15f0>
   127ec:	ldr	r5, [sp, #36]	; 0x24
   127f0:	b	12938 <__assert_fail@plt+0x1990>
   127f4:	cmp	r6, #122	; 0x7a
   127f8:	bhi	12818 <__assert_fail@plt+0x1870>
   127fc:	cmp	r6, #97	; 0x61
   12800:	bcs	127ec <__assert_fail@plt+0x1844>
   12804:	cmp	r6, #95	; 0x5f
   12808:	beq	127ec <__assert_fail@plt+0x1844>
   1280c:	cmp	r6, #96	; 0x60
   12810:	bne	12500 <__assert_fail@plt+0x1558>
   12814:	b	12598 <__assert_fail@plt+0x15f0>
   12818:	cmp	r6, #124	; 0x7c
   1281c:	beq	12598 <__assert_fail@plt+0x15f0>
   12820:	bcc	12a2c <__assert_fail@plt+0x1a84>
   12824:	cmp	r6, #125	; 0x7d
   12828:	beq	12a2c <__assert_fail@plt+0x1a84>
   1282c:	cmp	r6, #126	; 0x7e
   12830:	bne	12500 <__assert_fail@plt+0x1558>
   12834:	ldr	r3, [sp, #28]
   12838:	cmp	r3, #0
   1283c:	bne	12948 <__assert_fail@plt+0x19a0>
   12840:	ldr	r5, [sp, #36]	; 0x24
   12844:	cmp	sl, #2
   12848:	movne	fp, #0
   1284c:	andeq	fp, r7, #1
   12850:	cmp	fp, #0
   12854:	beq	1271c <__assert_fail@plt+0x1774>
   12858:	b	1257c <__assert_fail@plt+0x15d4>
   1285c:	ldr	r3, [sp, #24]
   12860:	cmp	r3, #0
   12864:	beq	1292c <__assert_fail@plt+0x1984>
   12868:	sub	r2, sl, #2
   1286c:	cmp	r7, #0
   12870:	clz	r2, r2
   12874:	lsr	r2, r2, #5
   12878:	bne	12450 <__assert_fail@plt+0x14a8>
   1287c:	ldr	r3, [sp, #52]	; 0x34
   12880:	eor	r3, r3, #1
   12884:	ands	r2, r2, r3
   12888:	moveq	r3, r4
   1288c:	beq	128c4 <__assert_fail@plt+0x191c>
   12890:	cmp	r9, r4
   12894:	str	r2, [sp, #52]	; 0x34
   12898:	movhi	r3, #39	; 0x27
   1289c:	strbhi	r3, [r8, r4]
   128a0:	add	r3, r4, #1
   128a4:	cmp	r9, r3
   128a8:	movhi	r1, #36	; 0x24
   128ac:	strbhi	r1, [r8, r3]
   128b0:	add	r3, r4, #2
   128b4:	cmp	r9, r3
   128b8:	movhi	r1, #39	; 0x27
   128bc:	strbhi	r1, [r8, r3]
   128c0:	add	r3, r4, #3
   128c4:	cmp	r9, r3
   128c8:	add	r4, r3, #1
   128cc:	movhi	r2, #92	; 0x5c
   128d0:	strbhi	r2, [r8, r3]
   128d4:	cmp	fp, #0
   128d8:	beq	12d00 <__assert_fail@plt+0x1d58>
   128dc:	ldr	r2, [sp, #28]
   128e0:	ldr	r1, [sp, #40]	; 0x28
   128e4:	add	r2, r2, #1
   128e8:	cmp	r2, r1
   128ec:	bcs	12924 <__assert_fail@plt+0x197c>
   128f0:	ldr	r1, [sp, #48]	; 0x30
   128f4:	mov	r6, #48	; 0x30
   128f8:	ldrb	r2, [r1, r2]
   128fc:	sub	r2, r2, #48	; 0x30
   12900:	cmp	r2, #9
   12904:	bhi	12d10 <__assert_fail@plt+0x1d68>
   12908:	cmp	r9, r4
   1290c:	add	r2, r3, #2
   12910:	strbhi	r6, [r8, r4]
   12914:	cmp	r9, r2
   12918:	add	r4, r3, #3
   1291c:	movhi	r1, #48	; 0x30
   12920:	strbhi	r1, [r8, r2]
   12924:	mov	r5, #0
   12928:	b	12d08 <__assert_fail@plt+0x1d60>
   1292c:	ldr	r3, [sp, #148]	; 0x94
   12930:	ands	r5, r3, #1
   12934:	bne	129bc <__assert_fail@plt+0x1a14>
   12938:	mov	fp, #0
   1293c:	b	1271c <__assert_fail@plt+0x1774>
   12940:	cmp	r7, #0
   12944:	bne	12454 <__assert_fail@plt+0x14ac>
   12948:	mov	r5, #0
   1294c:	b	12938 <__assert_fail@plt+0x1990>
   12950:	cmp	sl, #2
   12954:	bne	129c8 <__assert_fail@plt+0x1a20>
   12958:	cmp	r7, #0
   1295c:	bne	12454 <__assert_fail@plt+0x14ac>
   12960:	mov	r5, r7
   12964:	mov	fp, r7
   12968:	ldr	r3, [sp, #52]	; 0x34
   1296c:	eor	fp, fp, #1
   12970:	tst	r3, fp
   12974:	beq	129a0 <__assert_fail@plt+0x19f8>
   12978:	cmp	r9, r4
   1297c:	movhi	r3, #39	; 0x27
   12980:	strbhi	r3, [r8, r4]
   12984:	add	r3, r4, #1
   12988:	add	r4, r4, #2
   1298c:	cmp	r9, r3
   12990:	movhi	r2, #39	; 0x27
   12994:	strbhi	r2, [r8, r3]
   12998:	mov	r3, #0
   1299c:	str	r3, [sp, #52]	; 0x34
   129a0:	cmp	r9, r4
   129a4:	ldr	r3, [sp, #72]	; 0x48
   129a8:	strbhi	r6, [r8, r4]
   129ac:	cmp	r5, #0
   129b0:	add	r4, r4, #1
   129b4:	moveq	r3, #0
   129b8:	str	r3, [sp, #72]	; 0x48
   129bc:	ldr	r3, [sp, #28]
   129c0:	add	r3, r3, #1
   129c4:	b	1217c <__assert_fail@plt+0x11d4>
   129c8:	ldr	r3, [sp, #24]
   129cc:	and	r3, r3, r7
   129d0:	tst	r5, r3
   129d4:	moveq	r3, r6
   129d8:	beq	12568 <__assert_fail@plt+0x15c0>
   129dc:	mov	fp, #0
   129e0:	mov	r5, fp
   129e4:	b	12968 <__assert_fail@plt+0x19c0>
   129e8:	mov	r3, #116	; 0x74
   129ec:	b	12568 <__assert_fail@plt+0x15c0>
   129f0:	mov	r3, #110	; 0x6e
   129f4:	b	12568 <__assert_fail@plt+0x15c0>
   129f8:	mov	r3, #97	; 0x61
   129fc:	ldr	r2, [sp, #24]
   12a00:	cmp	r2, #0
   12a04:	beq	12948 <__assert_fail@plt+0x19a0>
   12a08:	mov	r6, r3
   12a0c:	mov	r5, #0
   12a10:	b	12770 <__assert_fail@plt+0x17c8>
   12a14:	mov	r3, #98	; 0x62
   12a18:	b	129fc <__assert_fail@plt+0x1a54>
   12a1c:	mov	r3, #118	; 0x76
   12a20:	b	129fc <__assert_fail@plt+0x1a54>
   12a24:	mov	r3, #102	; 0x66
   12a28:	b	129fc <__assert_fail@plt+0x1a54>
   12a2c:	ldr	r3, [sp, #40]	; 0x28
   12a30:	cmn	r3, #1
   12a34:	bne	12a54 <__assert_fail@plt+0x1aac>
   12a38:	ldr	r3, [sp, #48]	; 0x30
   12a3c:	ldrb	r3, [r3, #1]
   12a40:	adds	r3, r3, #0
   12a44:	movne	r3, #1
   12a48:	cmp	r3, #0
   12a4c:	bne	12948 <__assert_fail@plt+0x19a0>
   12a50:	b	12834 <__assert_fail@plt+0x188c>
   12a54:	ldr	r3, [sp, #40]	; 0x28
   12a58:	subs	r3, r3, #1
   12a5c:	b	12a44 <__assert_fail@plt+0x1a9c>
   12a60:	mov	r3, #0
   12a64:	mov	r2, #0
   12a68:	strd	r2, [sp, #96]	; 0x60
   12a6c:	ldr	r3, [sp, #40]	; 0x28
   12a70:	cmn	r3, #1
   12a74:	bne	12a84 <__assert_fail@plt+0x1adc>
   12a78:	ldr	r0, [sp, #48]	; 0x30
   12a7c:	bl	10e94 <strlen@plt>
   12a80:	str	r0, [sp, #40]	; 0x28
   12a84:	ldr	r5, [sp, #36]	; 0x24
   12a88:	mov	r3, #0
   12a8c:	str	r3, [sp, #56]	; 0x38
   12a90:	ldr	r3, [sp, #28]
   12a94:	add	r0, sp, #92	; 0x5c
   12a98:	ldr	r1, [sp, #40]	; 0x28
   12a9c:	ldr	r2, [sp, #56]	; 0x38
   12aa0:	add	r2, r3, r2
   12aa4:	ldr	r3, [sp, #48]	; 0x30
   12aa8:	add	fp, r3, r2
   12aac:	sub	r2, r1, r2
   12ab0:	add	r3, sp, #96	; 0x60
   12ab4:	mov	r1, fp
   12ab8:	bl	146b0 <__assert_fail@plt+0x3708>
   12abc:	subs	r2, r0, #0
   12ac0:	beq	12b00 <__assert_fail@plt+0x1b58>
   12ac4:	cmn	r2, #1
   12ac8:	beq	12cd4 <__assert_fail@plt+0x1d2c>
   12acc:	cmn	r2, #2
   12ad0:	bne	12c44 <__assert_fail@plt+0x1c9c>
   12ad4:	ldr	r3, [sp, #28]
   12ad8:	ldr	r2, [sp, #56]	; 0x38
   12adc:	add	r3, r3, r2
   12ae0:	ldr	r2, [sp, #40]	; 0x28
   12ae4:	cmp	r2, r3
   12ae8:	bls	12cd4 <__assert_fail@plt+0x1d2c>
   12aec:	ldr	r2, [sp, #56]	; 0x38
   12af0:	ldr	r3, [sp, #80]	; 0x50
   12af4:	ldrb	r5, [r3, r2]
   12af8:	cmp	r5, #0
   12afc:	bne	12c34 <__assert_fail@plt+0x1c8c>
   12b00:	ldr	r3, [sp, #56]	; 0x38
   12b04:	cmp	r3, #1
   12b08:	bls	1252c <__assert_fail@plt+0x1584>
   12b0c:	ldr	r3, [sp, #28]
   12b10:	mov	fp, #0
   12b14:	mov	ip, #92	; 0x5c
   12b18:	ldr	r2, [sp, #56]	; 0x38
   12b1c:	add	r3, r3, r2
   12b20:	ldr	r2, [sp, #24]
   12b24:	str	r3, [sp, #36]	; 0x24
   12b28:	eor	r3, r5, #1
   12b2c:	and	r3, r3, r2
   12b30:	mov	r2, #39	; 0x27
   12b34:	uxtb	r3, r3
   12b38:	cmp	r3, #0
   12b3c:	beq	12cdc <__assert_fail@plt+0x1d34>
   12b40:	sub	r0, sl, #2
   12b44:	cmp	r7, #0
   12b48:	clz	r0, r0
   12b4c:	lsr	r0, r0, #5
   12b50:	bne	12450 <__assert_fail@plt+0x14a8>
   12b54:	ldr	r1, [sp, #52]	; 0x34
   12b58:	eor	r1, r1, #1
   12b5c:	ands	r1, r0, r1
   12b60:	beq	12b90 <__assert_fail@plt+0x1be8>
   12b64:	cmp	r9, r4
   12b68:	add	r0, r4, #1
   12b6c:	str	r1, [sp, #52]	; 0x34
   12b70:	strbhi	r2, [r8, r4]
   12b74:	cmp	r9, r0
   12b78:	movhi	lr, #36	; 0x24
   12b7c:	strbhi	lr, [r8, r0]
   12b80:	add	r0, r4, #2
   12b84:	add	r4, r4, #3
   12b88:	cmp	r9, r0
   12b8c:	strbhi	r2, [r8, r0]
   12b90:	cmp	r9, r4
   12b94:	add	r0, r4, #1
   12b98:	mov	fp, r3
   12b9c:	strbhi	ip, [r8, r4]
   12ba0:	cmp	r9, r0
   12ba4:	lsrhi	r1, r6, #6
   12ba8:	addhi	r1, r1, #48	; 0x30
   12bac:	strbhi	r1, [r8, r0]
   12bb0:	add	r0, r4, #2
   12bb4:	add	r4, r4, #3
   12bb8:	cmp	r9, r0
   12bbc:	ubfxhi	r1, r6, #3, #3
   12bc0:	and	r6, r6, #7
   12bc4:	add	r6, r6, #48	; 0x30
   12bc8:	addhi	r1, r1, #48	; 0x30
   12bcc:	strbhi	r1, [r8, r0]
   12bd0:	eor	r0, fp, #1
   12bd4:	ldr	r1, [sp, #28]
   12bd8:	ldr	lr, [sp, #52]	; 0x34
   12bdc:	add	r1, r1, #1
   12be0:	and	r0, r0, lr
   12be4:	ldr	lr, [sp, #36]	; 0x24
   12be8:	cmp	r1, lr
   12bec:	bcs	12968 <__assert_fail@plt+0x19c0>
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c18 <__assert_fail@plt+0x1c70>
   12bf8:	cmp	r9, r4
   12bfc:	add	r0, r4, #1
   12c00:	strbhi	r2, [r8, r4]
   12c04:	cmp	r9, r0
   12c08:	add	r4, r4, #2
   12c0c:	strbhi	r2, [r8, r0]
   12c10:	mov	r0, #0
   12c14:	str	r0, [sp, #52]	; 0x34
   12c18:	ldr	r0, [sp, #48]	; 0x30
   12c1c:	cmp	r9, r4
   12c20:	str	r1, [sp, #28]
   12c24:	strbhi	r6, [r8, r4]
   12c28:	add	r4, r4, #1
   12c2c:	ldrb	r6, [r0, r1]
   12c30:	b	12b38 <__assert_fail@plt+0x1b90>
   12c34:	ldr	r3, [sp, #56]	; 0x38
   12c38:	add	r3, r3, #1
   12c3c:	str	r3, [sp, #56]	; 0x38
   12c40:	b	12ad4 <__assert_fail@plt+0x1b2c>
   12c44:	cmp	sl, #2
   12c48:	movne	r3, #0
   12c4c:	andeq	r3, r7, #1
   12c50:	cmp	r3, #0
   12c54:	movne	r1, #1
   12c58:	bne	12cb4 <__assert_fail@plt+0x1d0c>
   12c5c:	ldr	r0, [sp, #92]	; 0x5c
   12c60:	str	r2, [sp, #84]	; 0x54
   12c64:	bl	10dbc <iswprint@plt>
   12c68:	ldr	r3, [sp, #56]	; 0x38
   12c6c:	cmp	r0, #0
   12c70:	add	r0, sp, #96	; 0x60
   12c74:	moveq	r5, #0
   12c78:	ldr	r2, [sp, #84]	; 0x54
   12c7c:	add	r3, r3, r2
   12c80:	str	r3, [sp, #56]	; 0x38
   12c84:	bl	10d74 <mbsinit@plt>
   12c88:	cmp	r0, #0
   12c8c:	beq	12a90 <__assert_fail@plt+0x1ae8>
   12c90:	b	12b00 <__assert_fail@plt+0x1b58>
   12c94:	ldrb	r3, [fp, #1]!
   12c98:	cmp	r3, #94	; 0x5e
   12c9c:	beq	1257c <__assert_fail@plt+0x15d4>
   12ca0:	bhi	12cc0 <__assert_fail@plt+0x1d18>
   12ca4:	sub	r3, r3, #91	; 0x5b
   12ca8:	cmp	r3, #1
   12cac:	bls	1257c <__assert_fail@plt+0x15d4>
   12cb0:	add	r1, r1, #1
   12cb4:	cmp	r1, r2
   12cb8:	bne	12c94 <__assert_fail@plt+0x1cec>
   12cbc:	b	12c5c <__assert_fail@plt+0x1cb4>
   12cc0:	cmp	r3, #96	; 0x60
   12cc4:	beq	1257c <__assert_fail@plt+0x15d4>
   12cc8:	cmp	r3, #124	; 0x7c
   12ccc:	bne	12cb0 <__assert_fail@plt+0x1d08>
   12cd0:	b	1257c <__assert_fail@plt+0x15d4>
   12cd4:	mov	r5, #0
   12cd8:	b	12b00 <__assert_fail@plt+0x1b58>
   12cdc:	ldr	r1, [sp, #64]	; 0x40
   12ce0:	cmp	r1, #0
   12ce4:	beq	12bd0 <__assert_fail@plt+0x1c28>
   12ce8:	cmp	r9, r4
   12cec:	mov	r1, #0
   12cf0:	strbhi	ip, [r8, r4]
   12cf4:	add	r4, r4, #1
   12cf8:	str	r1, [sp, #64]	; 0x40
   12cfc:	b	12bd0 <__assert_fail@plt+0x1c28>
   12d00:	mov	r5, fp
   12d04:	ldr	fp, [sp, #24]
   12d08:	mov	r6, #48	; 0x30
   12d0c:	b	1271c <__assert_fail@plt+0x1774>
   12d10:	mov	r5, #0
   12d14:	b	1271c <__assert_fail@plt+0x1774>
   12d18:	mov	r6, r1
   12d1c:	b	12948 <__assert_fail@plt+0x19a0>
   12d20:	mov	r6, r1
   12d24:	b	12938 <__assert_fail@plt+0x1990>
   12d28:	ldr	r2, [sp, #28]
   12d2c:	ldr	r3, [sp, #40]	; 0x28
   12d30:	subs	r3, r3, r2
   12d34:	movne	r3, #1
   12d38:	b	121a0 <__assert_fail@plt+0x11f8>
   12d3c:	ldr	r3, [sp, #60]	; 0x3c
   12d40:	mov	sl, #2
   12d44:	ldr	r7, [sp, #72]	; 0x48
   12d48:	adds	r6, r3, #0
   12d4c:	mov	r5, r3
   12d50:	movne	r6, #1
   12d54:	cmp	r9, #0
   12d58:	movne	r6, #0
   12d5c:	cmp	r6, #0
   12d60:	bne	12130 <__assert_fail@plt+0x1188>
   12d64:	ldr	r3, [sp, #68]	; 0x44
   12d68:	ldr	r2, [sp, #44]	; 0x2c
   12d6c:	cmp	r2, #0
   12d70:	moveq	r3, #0
   12d74:	andne	r3, r3, #1
   12d78:	cmp	r3, #0
   12d7c:	movne	r3, r2
   12d80:	subne	r3, r3, #1
   12d84:	bne	12db4 <__assert_fail@plt+0x1e0c>
   12d88:	cmp	r9, r4
   12d8c:	movhi	r3, #0
   12d90:	strbhi	r3, [r8, r4]
   12d94:	mov	r0, r4
   12d98:	add	sp, sp, #108	; 0x6c
   12d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12da0:	mov	r3, r7
   12da4:	b	12d68 <__assert_fail@plt+0x1dc0>
   12da8:	cmp	r9, r4
   12dac:	strbhi	r2, [r8, r4]
   12db0:	add	r4, r4, #1
   12db4:	ldrb	r2, [r3, #1]!
   12db8:	cmp	r2, #0
   12dbc:	bne	12da8 <__assert_fail@plt+0x1e00>
   12dc0:	b	12d88 <__assert_fail@plt+0x1de0>
   12dc4:	andeq	r5, r1, r0, lsr #4
   12dc8:	andeq	r5, r1, r3, lsr r2
   12dcc:	andeq	r5, r1, r1, lsr r2
   12dd0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dd8:	sub	sp, sp, #52	; 0x34
   12ddc:	mov	r6, r0
   12de0:	mov	r5, r3
   12de4:	mov	r8, r1
   12de8:	mov	r9, r2
   12dec:	bl	10eac <__errno_location@plt>
   12df0:	ldr	r3, [r0]
   12df4:	cmn	r6, #-2147483647	; 0x80000001
   12df8:	str	r0, [sp, #24]
   12dfc:	ldr	r7, [pc, #368]	; 12f74 <__assert_fail@plt+0x1fcc>
   12e00:	str	r3, [sp, #32]
   12e04:	movne	r3, #0
   12e08:	moveq	r3, #1
   12e0c:	orrs	r3, r3, r6, lsr #31
   12e10:	ldr	r4, [r7]
   12e14:	beq	12e1c <__assert_fail@plt+0x1e74>
   12e18:	bl	10f9c <abort@plt>
   12e1c:	ldr	r2, [r7, #4]
   12e20:	cmp	r2, r6
   12e24:	bgt	12e94 <__assert_fail@plt+0x1eec>
   12e28:	add	sl, r7, #8
   12e2c:	mov	r3, #8
   12e30:	cmp	r4, sl
   12e34:	add	r1, sp, #44	; 0x2c
   12e38:	str	r2, [sp, #44]	; 0x2c
   12e3c:	sub	r2, r6, r2
   12e40:	movne	r0, r4
   12e44:	moveq	r0, #0
   12e48:	add	r2, r2, #1
   12e4c:	str	r3, [sp]
   12e50:	mvn	r3, #-2147483648	; 0x80000000
   12e54:	bl	13b28 <__assert_fail@plt+0x2b80>
   12e58:	cmp	r4, sl
   12e5c:	mov	fp, r0
   12e60:	str	r0, [r7]
   12e64:	ldmeq	r4, {r0, r1}
   12e68:	mov	r4, fp
   12e6c:	ldr	r2, [sp, #44]	; 0x2c
   12e70:	stmeq	fp, {r0, r1}
   12e74:	mov	r1, #0
   12e78:	ldr	r0, [r7, #4]
   12e7c:	sub	r2, r2, r0
   12e80:	add	r0, fp, r0, lsl #3
   12e84:	lsl	r2, r2, #3
   12e88:	bl	10ec4 <memset@plt>
   12e8c:	ldr	r3, [sp, #44]	; 0x2c
   12e90:	str	r3, [r7, #4]
   12e94:	ldr	r3, [r5, #4]
   12e98:	add	sl, r4, r6, lsl #3
   12e9c:	mov	r2, r8
   12ea0:	ldr	fp, [r4, r6, lsl #3]
   12ea4:	ldr	r7, [sl, #4]
   12ea8:	orr	r3, r3, #1
   12eac:	str	r3, [sp, #28]
   12eb0:	add	r3, r5, #8
   12eb4:	mov	r1, fp
   12eb8:	str	r3, [sp, #36]	; 0x24
   12ebc:	mov	r0, r7
   12ec0:	ldr	r3, [r5, #44]	; 0x2c
   12ec4:	str	r3, [sp, #16]
   12ec8:	ldr	r3, [r5, #40]	; 0x28
   12ecc:	str	r3, [sp, #12]
   12ed0:	add	r3, r5, #8
   12ed4:	str	r3, [sp, #8]
   12ed8:	ldr	r3, [sp, #28]
   12edc:	str	r3, [sp, #4]
   12ee0:	ldr	r3, [r5]
   12ee4:	str	r3, [sp]
   12ee8:	mov	r3, r9
   12eec:	bl	120e4 <__assert_fail@plt+0x113c>
   12ef0:	cmp	fp, r0
   12ef4:	bhi	12f5c <__assert_fail@plt+0x1fb4>
   12ef8:	ldr	r3, [pc, #120]	; 12f78 <__assert_fail@plt+0x1fd0>
   12efc:	add	fp, r0, #1
   12f00:	str	fp, [r4, r6, lsl #3]
   12f04:	cmp	r7, r3
   12f08:	beq	12f14 <__assert_fail@plt+0x1f6c>
   12f0c:	mov	r0, r7
   12f10:	bl	11e8c <__assert_fail@plt+0xee4>
   12f14:	mov	r0, fp
   12f18:	bl	13a18 <__assert_fail@plt+0x2a70>
   12f1c:	ldr	r3, [r5, #44]	; 0x2c
   12f20:	mov	r2, r8
   12f24:	mov	r1, fp
   12f28:	str	r0, [sl, #4]
   12f2c:	mov	r7, r0
   12f30:	str	r3, [sp, #16]
   12f34:	ldr	r3, [r5, #40]	; 0x28
   12f38:	str	r3, [sp, #12]
   12f3c:	add	r3, r5, #8
   12f40:	str	r3, [sp, #8]
   12f44:	ldr	r3, [sp, #28]
   12f48:	str	r3, [sp, #4]
   12f4c:	ldr	r3, [r5]
   12f50:	str	r3, [sp]
   12f54:	mov	r3, r9
   12f58:	bl	120e4 <__assert_fail@plt+0x113c>
   12f5c:	ldr	r3, [sp, #24]
   12f60:	mov	r0, r7
   12f64:	ldr	r2, [sp, #32]
   12f68:	str	r2, [r3]
   12f6c:	add	sp, sp, #52	; 0x34
   12f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f74:	andeq	r6, r2, r0, lsl #2
   12f78:	muleq	r2, r4, r1
   12f7c:	push	{r4, r5, r6, lr}
   12f80:	mov	r5, r0
   12f84:	bl	10eac <__errno_location@plt>
   12f88:	mov	r4, r0
   12f8c:	cmp	r5, #0
   12f90:	ldr	r0, [pc, #20]	; 12fac <__assert_fail@plt+0x2004>
   12f94:	mov	r1, #48	; 0x30
   12f98:	movne	r0, r5
   12f9c:	ldr	r6, [r4]
   12fa0:	bl	13c18 <__assert_fail@plt+0x2c70>
   12fa4:	str	r6, [r4]
   12fa8:	pop	{r4, r5, r6, pc}
   12fac:	muleq	r2, r4, r2
   12fb0:	ldr	r3, [pc, #12]	; 12fc4 <__assert_fail@plt+0x201c>
   12fb4:	cmp	r0, #0
   12fb8:	moveq	r0, r3
   12fbc:	ldr	r0, [r0]
   12fc0:	bx	lr
   12fc4:	muleq	r2, r4, r2
   12fc8:	ldr	r3, [pc, #12]	; 12fdc <__assert_fail@plt+0x2034>
   12fcc:	cmp	r0, #0
   12fd0:	moveq	r0, r3
   12fd4:	str	r1, [r0]
   12fd8:	bx	lr
   12fdc:	muleq	r2, r4, r2
   12fe0:	ldr	r3, [pc, #52]	; 1301c <__assert_fail@plt+0x2074>
   12fe4:	cmp	r0, #0
   12fe8:	push	{lr}		; (str lr, [sp, #-4]!)
   12fec:	lsr	lr, r1, #5
   12ff0:	and	r1, r1, #31
   12ff4:	moveq	r0, r3
   12ff8:	add	r3, r0, #8
   12ffc:	ldr	ip, [r3, lr, lsl #2]
   13000:	lsr	r0, ip, r1
   13004:	eor	r2, r2, r0
   13008:	and	r0, r0, #1
   1300c:	and	r2, r2, #1
   13010:	eor	r1, ip, r2, lsl r1
   13014:	str	r1, [r3, lr, lsl #2]
   13018:	pop	{pc}		; (ldr pc, [sp], #4)
   1301c:	muleq	r2, r4, r2
   13020:	ldr	r3, [pc, #16]	; 13038 <__assert_fail@plt+0x2090>
   13024:	cmp	r0, #0
   13028:	movne	r3, r0
   1302c:	ldr	r0, [r3, #4]
   13030:	str	r1, [r3, #4]
   13034:	bx	lr
   13038:	muleq	r2, r4, r2
   1303c:	ldr	r3, [pc, #44]	; 13070 <__assert_fail@plt+0x20c8>
   13040:	cmp	r0, #0
   13044:	moveq	r0, r3
   13048:	mov	r3, #10
   1304c:	cmp	r2, #0
   13050:	cmpne	r1, #0
   13054:	str	r3, [r0]
   13058:	bne	13064 <__assert_fail@plt+0x20bc>
   1305c:	push	{r4, lr}
   13060:	bl	10f9c <abort@plt>
   13064:	str	r1, [r0, #40]	; 0x28
   13068:	str	r2, [r0, #44]	; 0x2c
   1306c:	bx	lr
   13070:	muleq	r2, r4, r2
   13074:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13078:	sub	sp, sp, #24
   1307c:	mov	sl, r3
   13080:	mov	r7, r0
   13084:	mov	r8, r1
   13088:	mov	r9, r2
   1308c:	ldr	r4, [sp, #56]	; 0x38
   13090:	ldr	r3, [pc, #88]	; 130f0 <__assert_fail@plt+0x2148>
   13094:	cmp	r4, #0
   13098:	moveq	r4, r3
   1309c:	bl	10eac <__errno_location@plt>
   130a0:	ldr	r3, [r4, #44]	; 0x2c
   130a4:	mov	r5, r0
   130a8:	mov	r2, r9
   130ac:	mov	r1, r8
   130b0:	mov	r0, r7
   130b4:	ldr	r6, [r5]
   130b8:	str	r3, [sp, #16]
   130bc:	ldr	r3, [r4, #40]	; 0x28
   130c0:	str	r3, [sp, #12]
   130c4:	add	r3, r4, #8
   130c8:	str	r3, [sp, #8]
   130cc:	ldr	r3, [r4, #4]
   130d0:	str	r3, [sp, #4]
   130d4:	ldr	r3, [r4]
   130d8:	str	r3, [sp]
   130dc:	mov	r3, sl
   130e0:	bl	120e4 <__assert_fail@plt+0x113c>
   130e4:	str	r6, [r5]
   130e8:	add	sp, sp, #24
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130f0:	muleq	r2, r4, r2
   130f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f8:	cmp	r3, #0
   130fc:	sub	sp, sp, #44	; 0x2c
   13100:	mov	r6, r2
   13104:	mov	sl, r1
   13108:	mov	r9, r0
   1310c:	ldr	r4, [pc, #176]	; 131c4 <__assert_fail@plt+0x221c>
   13110:	movne	r4, r3
   13114:	bl	10eac <__errno_location@plt>
   13118:	ldr	r3, [r0]
   1311c:	mov	r1, #0
   13120:	mov	r2, r9
   13124:	mov	r8, r0
   13128:	mov	r0, r1
   1312c:	ldr	r5, [r4, #4]
   13130:	add	fp, r4, #8
   13134:	str	r3, [sp, #28]
   13138:	ldr	r3, [r4, #44]	; 0x2c
   1313c:	cmp	r6, #0
   13140:	orreq	r5, r5, #1
   13144:	str	r3, [sp, #16]
   13148:	ldr	r3, [r4, #40]	; 0x28
   1314c:	stmib	sp, {r5, fp}
   13150:	str	r3, [sp, #12]
   13154:	ldr	r3, [r4]
   13158:	str	r3, [sp]
   1315c:	mov	r3, sl
   13160:	bl	120e4 <__assert_fail@plt+0x113c>
   13164:	add	r1, r0, #1
   13168:	mov	r7, r0
   1316c:	mov	r0, r1
   13170:	str	r1, [sp, #36]	; 0x24
   13174:	bl	13a18 <__assert_fail@plt+0x2a70>
   13178:	ldr	r3, [r4, #44]	; 0x2c
   1317c:	mov	r2, r9
   13180:	ldr	r1, [sp, #36]	; 0x24
   13184:	str	r3, [sp, #16]
   13188:	ldr	r3, [r4, #40]	; 0x28
   1318c:	stmib	sp, {r5, fp}
   13190:	str	r0, [sp, #32]
   13194:	str	r3, [sp, #12]
   13198:	ldr	r3, [r4]
   1319c:	str	r3, [sp]
   131a0:	mov	r3, sl
   131a4:	bl	120e4 <__assert_fail@plt+0x113c>
   131a8:	ldr	r3, [sp, #28]
   131ac:	cmp	r6, #0
   131b0:	ldr	r0, [sp, #32]
   131b4:	str	r3, [r8]
   131b8:	strne	r7, [r6]
   131bc:	add	sp, sp, #44	; 0x2c
   131c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c4:	muleq	r2, r4, r2
   131c8:	mov	r3, r2
   131cc:	mov	r2, #0
   131d0:	b	130f4 <__assert_fail@plt+0x214c>
   131d4:	push	{r4, r5, r6, r7, r8, lr}
   131d8:	mov	r6, #1
   131dc:	ldr	r4, [pc, #100]	; 13248 <__assert_fail@plt+0x22a0>
   131e0:	ldr	r5, [r4]
   131e4:	add	r7, r5, #4
   131e8:	ldr	r3, [r4, #4]
   131ec:	cmp	r3, r6
   131f0:	bgt	13238 <__assert_fail@plt+0x2290>
   131f4:	ldr	r6, [pc, #80]	; 1324c <__assert_fail@plt+0x22a4>
   131f8:	ldr	r0, [r5, #4]
   131fc:	cmp	r0, r6
   13200:	beq	13214 <__assert_fail@plt+0x226c>
   13204:	bl	11e8c <__assert_fail@plt+0xee4>
   13208:	mov	r3, #256	; 0x100
   1320c:	str	r3, [r4, #8]
   13210:	str	r6, [r4, #12]
   13214:	ldr	r6, [pc, #52]	; 13250 <__assert_fail@plt+0x22a8>
   13218:	cmp	r5, r6
   1321c:	beq	1322c <__assert_fail@plt+0x2284>
   13220:	mov	r0, r5
   13224:	bl	11e8c <__assert_fail@plt+0xee4>
   13228:	str	r6, [r4]
   1322c:	mov	r3, #1
   13230:	str	r3, [r4, #4]
   13234:	pop	{r4, r5, r6, r7, r8, pc}
   13238:	ldr	r0, [r7, r6, lsl #3]
   1323c:	add	r6, r6, #1
   13240:	bl	11e8c <__assert_fail@plt+0xee4>
   13244:	b	131e8 <__assert_fail@plt+0x2240>
   13248:	andeq	r6, r2, r0, lsl #2
   1324c:	muleq	r2, r4, r1
   13250:	andeq	r6, r2, r8, lsl #2
   13254:	ldr	r3, [pc, #4]	; 13260 <__assert_fail@plt+0x22b8>
   13258:	mvn	r2, #0
   1325c:	b	12dd4 <__assert_fail@plt+0x1e2c>
   13260:	muleq	r2, r4, r2
   13264:	ldr	r3, [pc]	; 1326c <__assert_fail@plt+0x22c4>
   13268:	b	12dd4 <__assert_fail@plt+0x1e2c>
   1326c:	muleq	r2, r4, r2
   13270:	mov	r1, r0
   13274:	mov	r0, #0
   13278:	b	13254 <__assert_fail@plt+0x22ac>
   1327c:	mov	r2, r1
   13280:	mov	r1, r0
   13284:	mov	r0, #0
   13288:	b	13264 <__assert_fail@plt+0x22bc>
   1328c:	push	{r4, r5, lr}
   13290:	sub	sp, sp, #52	; 0x34
   13294:	mov	r5, r2
   13298:	mov	r4, r0
   1329c:	mov	r0, sp
   132a0:	bl	11f88 <__assert_fail@plt+0xfe0>
   132a4:	mov	r3, sp
   132a8:	mvn	r2, #0
   132ac:	mov	r1, r5
   132b0:	mov	r0, r4
   132b4:	bl	12dd4 <__assert_fail@plt+0x1e2c>
   132b8:	add	sp, sp, #52	; 0x34
   132bc:	pop	{r4, r5, pc}
   132c0:	push	{r4, r5, r6, lr}
   132c4:	sub	sp, sp, #48	; 0x30
   132c8:	mov	r5, r2
   132cc:	mov	r6, r3
   132d0:	mov	r4, r0
   132d4:	mov	r0, sp
   132d8:	bl	11f88 <__assert_fail@plt+0xfe0>
   132dc:	mov	r3, sp
   132e0:	mov	r2, r6
   132e4:	mov	r1, r5
   132e8:	mov	r0, r4
   132ec:	bl	12dd4 <__assert_fail@plt+0x1e2c>
   132f0:	add	sp, sp, #48	; 0x30
   132f4:	pop	{r4, r5, r6, pc}
   132f8:	mov	r2, r1
   132fc:	mov	r1, r0
   13300:	mov	r0, #0
   13304:	b	1328c <__assert_fail@plt+0x22e4>
   13308:	mov	r3, r2
   1330c:	mov	r2, r1
   13310:	mov	r1, r0
   13314:	mov	r0, #0
   13318:	b	132c0 <__assert_fail@plt+0x2318>
   1331c:	push	{r4, r5, r6, lr}
   13320:	mov	r4, r0
   13324:	mov	r5, r1
   13328:	mov	r6, r2
   1332c:	sub	sp, sp, #48	; 0x30
   13330:	mov	ip, sp
   13334:	ldr	lr, [pc, #64]	; 1337c <__assert_fail@plt+0x23d4>
   13338:	ldm	lr!, {r0, r1, r2, r3}
   1333c:	stmia	ip!, {r0, r1, r2, r3}
   13340:	ldm	lr!, {r0, r1, r2, r3}
   13344:	stmia	ip!, {r0, r1, r2, r3}
   13348:	ldm	lr, {r0, r1, r2, r3}
   1334c:	stm	ip, {r0, r1, r2, r3}
   13350:	mov	r1, r6
   13354:	mov	r2, #1
   13358:	mov	r0, sp
   1335c:	bl	12fe0 <__assert_fail@plt+0x2038>
   13360:	mov	r3, sp
   13364:	mov	r2, r5
   13368:	mov	r1, r4
   1336c:	mov	r0, #0
   13370:	bl	12dd4 <__assert_fail@plt+0x1e2c>
   13374:	add	sp, sp, #48	; 0x30
   13378:	pop	{r4, r5, r6, pc}
   1337c:	muleq	r2, r4, r2
   13380:	mov	r2, r1
   13384:	mvn	r1, #0
   13388:	b	1331c <__assert_fail@plt+0x2374>
   1338c:	mov	r1, #58	; 0x3a
   13390:	b	13380 <__assert_fail@plt+0x23d8>
   13394:	mov	r2, #58	; 0x3a
   13398:	b	1331c <__assert_fail@plt+0x2374>
   1339c:	push	{r4, r5, lr}
   133a0:	sub	sp, sp, #100	; 0x64
   133a4:	mov	r4, r0
   133a8:	mov	r0, sp
   133ac:	mov	r5, r2
   133b0:	bl	11f88 <__assert_fail@plt+0xfe0>
   133b4:	mov	ip, sp
   133b8:	add	lr, sp, #48	; 0x30
   133bc:	ldm	ip!, {r0, r1, r2, r3}
   133c0:	stmia	lr!, {r0, r1, r2, r3}
   133c4:	ldm	ip!, {r0, r1, r2, r3}
   133c8:	stmia	lr!, {r0, r1, r2, r3}
   133cc:	ldm	ip, {r0, r1, r2, r3}
   133d0:	stm	lr, {r0, r1, r2, r3}
   133d4:	mov	r2, #1
   133d8:	mov	r1, #58	; 0x3a
   133dc:	add	r0, sp, #48	; 0x30
   133e0:	bl	12fe0 <__assert_fail@plt+0x2038>
   133e4:	add	r3, sp, #48	; 0x30
   133e8:	mvn	r2, #0
   133ec:	mov	r1, r5
   133f0:	mov	r0, r4
   133f4:	bl	12dd4 <__assert_fail@plt+0x1e2c>
   133f8:	add	sp, sp, #100	; 0x64
   133fc:	pop	{r4, r5, pc}
   13400:	push	{r4, r5, r6, r7, lr}
   13404:	mov	r4, r0
   13408:	mov	r6, r1
   1340c:	mov	r7, r2
   13410:	mov	r5, r3
   13414:	sub	sp, sp, #52	; 0x34
   13418:	ldr	lr, [pc, #68]	; 13464 <__assert_fail@plt+0x24bc>
   1341c:	mov	ip, sp
   13420:	ldm	lr!, {r0, r1, r2, r3}
   13424:	stmia	ip!, {r0, r1, r2, r3}
   13428:	ldm	lr!, {r0, r1, r2, r3}
   1342c:	stmia	ip!, {r0, r1, r2, r3}
   13430:	ldm	lr, {r0, r1, r2, r3}
   13434:	stm	ip, {r0, r1, r2, r3}
   13438:	mov	r2, r7
   1343c:	mov	r1, r6
   13440:	mov	r0, sp
   13444:	bl	1303c <__assert_fail@plt+0x2094>
   13448:	ldr	r2, [sp, #72]	; 0x48
   1344c:	mov	r3, sp
   13450:	mov	r1, r5
   13454:	mov	r0, r4
   13458:	bl	12dd4 <__assert_fail@plt+0x1e2c>
   1345c:	add	sp, sp, #52	; 0x34
   13460:	pop	{r4, r5, r6, r7, pc}
   13464:	muleq	r2, r4, r2
   13468:	mvn	ip, #0
   1346c:	push	{r0, r1, r2, lr}
   13470:	str	ip, [sp]
   13474:	bl	13400 <__assert_fail@plt+0x2458>
   13478:	add	sp, sp, #12
   1347c:	pop	{pc}		; (ldr pc, [sp], #4)
   13480:	mov	r3, r2
   13484:	mov	r2, r1
   13488:	mov	r1, r0
   1348c:	mov	r0, #0
   13490:	b	13468 <__assert_fail@plt+0x24c0>
   13494:	push	{r0, r1, r2, lr}
   13498:	str	r3, [sp]
   1349c:	mov	r3, r2
   134a0:	mov	r2, r1
   134a4:	mov	r1, r0
   134a8:	mov	r0, #0
   134ac:	bl	13400 <__assert_fail@plt+0x2458>
   134b0:	add	sp, sp, #12
   134b4:	pop	{pc}		; (ldr pc, [sp], #4)
   134b8:	ldr	r3, [pc]	; 134c0 <__assert_fail@plt+0x2518>
   134bc:	b	12dd4 <__assert_fail@plt+0x1e2c>
   134c0:	andeq	r6, r2, r0, lsl r1
   134c4:	mov	r2, r1
   134c8:	mov	r1, r0
   134cc:	mov	r0, #0
   134d0:	b	134b8 <__assert_fail@plt+0x2510>
   134d4:	mvn	r2, #0
   134d8:	b	134b8 <__assert_fail@plt+0x2510>
   134dc:	mov	r1, r0
   134e0:	mov	r0, #0
   134e4:	b	134d4 <__assert_fail@plt+0x252c>
   134e8:	push	{r4, r5, r6, lr}
   134ec:	cmp	r1, #0
   134f0:	sub	sp, sp, #32
   134f4:	mov	r5, r0
   134f8:	ldr	r4, [sp, #48]	; 0x30
   134fc:	ldr	r6, [sp, #52]	; 0x34
   13500:	beq	135b4 <__assert_fail@plt+0x260c>
   13504:	strd	r2, [sp]
   13508:	mov	r3, r1
   1350c:	mov	r1, #1
   13510:	ldr	r2, [pc, #856]	; 13870 <__assert_fail@plt+0x28c8>
   13514:	bl	10ef4 <__fprintf_chk@plt>
   13518:	mov	r2, #5
   1351c:	ldr	r1, [pc, #848]	; 13874 <__assert_fail@plt+0x28cc>
   13520:	mov	r0, #0
   13524:	bl	10d98 <dcgettext@plt>
   13528:	movw	r3, #2022	; 0x7e6
   1352c:	ldr	r2, [pc, #836]	; 13878 <__assert_fail@plt+0x28d0>
   13530:	mov	r1, #1
   13534:	str	r3, [sp]
   13538:	mov	r3, r0
   1353c:	mov	r0, r5
   13540:	bl	10ef4 <__fprintf_chk@plt>
   13544:	mov	r1, r5
   13548:	mov	r0, #10
   1354c:	bl	10d8c <fputc_unlocked@plt>
   13550:	mov	r2, #5
   13554:	ldr	r1, [pc, #800]	; 1387c <__assert_fail@plt+0x28d4>
   13558:	mov	r0, #0
   1355c:	bl	10d98 <dcgettext@plt>
   13560:	mov	r2, r0
   13564:	mov	r1, #1
   13568:	ldr	r3, [pc, #784]	; 13880 <__assert_fail@plt+0x28d8>
   1356c:	mov	r0, r5
   13570:	bl	10ef4 <__fprintf_chk@plt>
   13574:	mov	r1, r5
   13578:	mov	r0, #10
   1357c:	bl	10d8c <fputc_unlocked@plt>
   13580:	cmp	r6, #9
   13584:	ldrls	pc, [pc, r6, lsl #2]
   13588:	b	13864 <__assert_fail@plt+0x28bc>
   1358c:	andeq	r3, r1, r4, lsr #13
   13590:	andeq	r3, r1, ip, asr #11
   13594:	strdeq	r3, [r1], -r8
   13598:	andeq	r3, r1, ip, lsr #12
   1359c:	andeq	r3, r1, r8, ror #12
   135a0:	andeq	r3, r1, ip, lsr #13
   135a4:	strdeq	r3, [r1], -r4
   135a8:	andeq	r3, r1, r4, asr #14
   135ac:	muleq	r1, ip, r7
   135b0:	strdeq	r3, [r1], -ip
   135b4:	mov	r1, #1
   135b8:	str	r3, [sp]
   135bc:	mov	r3, r2
   135c0:	ldr	r2, [pc, #700]	; 13884 <__assert_fail@plt+0x28dc>
   135c4:	bl	10ef4 <__fprintf_chk@plt>
   135c8:	b	13518 <__assert_fail@plt+0x2570>
   135cc:	mov	r2, #5
   135d0:	ldr	r1, [pc, #688]	; 13888 <__assert_fail@plt+0x28e0>
   135d4:	mov	r0, #0
   135d8:	bl	10d98 <dcgettext@plt>
   135dc:	ldr	r3, [r4]
   135e0:	mov	r2, r0
   135e4:	mov	r1, #1
   135e8:	mov	r0, r5
   135ec:	add	sp, sp, #32
   135f0:	pop	{r4, r5, r6, lr}
   135f4:	b	10ef4 <__fprintf_chk@plt>
   135f8:	mov	r2, #5
   135fc:	ldr	r1, [pc, #648]	; 1388c <__assert_fail@plt+0x28e4>
   13600:	mov	r0, #0
   13604:	bl	10d98 <dcgettext@plt>
   13608:	ldr	r3, [r4, #4]
   1360c:	mov	r2, r0
   13610:	mov	r1, #1
   13614:	mov	r0, r5
   13618:	str	r3, [sp, #48]	; 0x30
   1361c:	ldr	r3, [r4]
   13620:	add	sp, sp, #32
   13624:	pop	{r4, r5, r6, lr}
   13628:	b	10ef4 <__fprintf_chk@plt>
   1362c:	mov	r2, #5
   13630:	ldr	r1, [pc, #600]	; 13890 <__assert_fail@plt+0x28e8>
   13634:	mov	r0, #0
   13638:	bl	10d98 <dcgettext@plt>
   1363c:	ldr	r3, [r4, #8]
   13640:	mov	r2, r0
   13644:	mov	r1, #1
   13648:	mov	r0, r5
   1364c:	str	r3, [sp, #52]	; 0x34
   13650:	ldr	r3, [r4, #4]
   13654:	str	r3, [sp, #48]	; 0x30
   13658:	ldr	r3, [r4]
   1365c:	add	sp, sp, #32
   13660:	pop	{r4, r5, r6, lr}
   13664:	b	10ef4 <__fprintf_chk@plt>
   13668:	mov	r2, #5
   1366c:	ldr	r1, [pc, #544]	; 13894 <__assert_fail@plt+0x28ec>
   13670:	mov	r0, #0
   13674:	bl	10d98 <dcgettext@plt>
   13678:	ldr	r3, [r4, #12]
   1367c:	mov	r2, r0
   13680:	mov	r1, #1
   13684:	mov	r0, r5
   13688:	str	r3, [sp, #8]
   1368c:	ldr	r3, [r4, #8]
   13690:	str	r3, [sp, #4]
   13694:	ldr	r3, [r4, #4]
   13698:	str	r3, [sp]
   1369c:	ldr	r3, [r4]
   136a0:	bl	10ef4 <__fprintf_chk@plt>
   136a4:	add	sp, sp, #32
   136a8:	pop	{r4, r5, r6, pc}
   136ac:	mov	r2, #5
   136b0:	ldr	r1, [pc, #480]	; 13898 <__assert_fail@plt+0x28f0>
   136b4:	mov	r0, #0
   136b8:	bl	10d98 <dcgettext@plt>
   136bc:	ldr	r3, [r4, #16]
   136c0:	mov	r2, r0
   136c4:	mov	r1, #1
   136c8:	mov	r0, r5
   136cc:	str	r3, [sp, #12]
   136d0:	ldr	r3, [r4, #12]
   136d4:	str	r3, [sp, #8]
   136d8:	ldr	r3, [r4, #8]
   136dc:	str	r3, [sp, #4]
   136e0:	ldr	r3, [r4, #4]
   136e4:	str	r3, [sp]
   136e8:	ldr	r3, [r4]
   136ec:	bl	10ef4 <__fprintf_chk@plt>
   136f0:	b	136a4 <__assert_fail@plt+0x26fc>
   136f4:	mov	r2, #5
   136f8:	ldr	r1, [pc, #412]	; 1389c <__assert_fail@plt+0x28f4>
   136fc:	mov	r0, #0
   13700:	bl	10d98 <dcgettext@plt>
   13704:	ldr	r3, [r4, #20]
   13708:	mov	r2, r0
   1370c:	mov	r1, #1
   13710:	mov	r0, r5
   13714:	str	r3, [sp, #16]
   13718:	ldr	r3, [r4, #16]
   1371c:	str	r3, [sp, #12]
   13720:	ldr	r3, [r4, #12]
   13724:	str	r3, [sp, #8]
   13728:	ldr	r3, [r4, #8]
   1372c:	str	r3, [sp, #4]
   13730:	ldr	r3, [r4, #4]
   13734:	str	r3, [sp]
   13738:	ldr	r3, [r4]
   1373c:	bl	10ef4 <__fprintf_chk@plt>
   13740:	b	136a4 <__assert_fail@plt+0x26fc>
   13744:	mov	r2, #5
   13748:	ldr	r1, [pc, #336]	; 138a0 <__assert_fail@plt+0x28f8>
   1374c:	mov	r0, #0
   13750:	bl	10d98 <dcgettext@plt>
   13754:	ldr	r3, [r4, #24]
   13758:	mov	r2, r0
   1375c:	mov	r1, #1
   13760:	mov	r0, r5
   13764:	str	r3, [sp, #20]
   13768:	ldr	r3, [r4, #20]
   1376c:	str	r3, [sp, #16]
   13770:	ldr	r3, [r4, #16]
   13774:	str	r3, [sp, #12]
   13778:	ldr	r3, [r4, #12]
   1377c:	str	r3, [sp, #8]
   13780:	ldr	r3, [r4, #8]
   13784:	str	r3, [sp, #4]
   13788:	ldr	r3, [r4, #4]
   1378c:	str	r3, [sp]
   13790:	ldr	r3, [r4]
   13794:	bl	10ef4 <__fprintf_chk@plt>
   13798:	b	136a4 <__assert_fail@plt+0x26fc>
   1379c:	mov	r2, #5
   137a0:	ldr	r1, [pc, #252]	; 138a4 <__assert_fail@plt+0x28fc>
   137a4:	mov	r0, #0
   137a8:	bl	10d98 <dcgettext@plt>
   137ac:	ldr	r3, [r4, #28]
   137b0:	mov	r2, r0
   137b4:	mov	r1, #1
   137b8:	mov	r0, r5
   137bc:	str	r3, [sp, #24]
   137c0:	ldr	r3, [r4, #24]
   137c4:	str	r3, [sp, #20]
   137c8:	ldr	r3, [r4, #20]
   137cc:	str	r3, [sp, #16]
   137d0:	ldr	r3, [r4, #16]
   137d4:	str	r3, [sp, #12]
   137d8:	ldr	r3, [r4, #12]
   137dc:	str	r3, [sp, #8]
   137e0:	ldr	r3, [r4, #8]
   137e4:	str	r3, [sp, #4]
   137e8:	ldr	r3, [r4, #4]
   137ec:	str	r3, [sp]
   137f0:	ldr	r3, [r4]
   137f4:	bl	10ef4 <__fprintf_chk@plt>
   137f8:	b	136a4 <__assert_fail@plt+0x26fc>
   137fc:	ldr	r1, [pc, #164]	; 138a8 <__assert_fail@plt+0x2900>
   13800:	mov	r2, #5
   13804:	mov	r0, #0
   13808:	bl	10d98 <dcgettext@plt>
   1380c:	ldr	r3, [r4, #32]
   13810:	mov	r2, r0
   13814:	mov	r1, #1
   13818:	mov	r0, r5
   1381c:	str	r3, [sp, #28]
   13820:	ldr	r3, [r4, #28]
   13824:	str	r3, [sp, #24]
   13828:	ldr	r3, [r4, #24]
   1382c:	str	r3, [sp, #20]
   13830:	ldr	r3, [r4, #20]
   13834:	str	r3, [sp, #16]
   13838:	ldr	r3, [r4, #16]
   1383c:	str	r3, [sp, #12]
   13840:	ldr	r3, [r4, #12]
   13844:	str	r3, [sp, #8]
   13848:	ldr	r3, [r4, #8]
   1384c:	str	r3, [sp, #4]
   13850:	ldr	r3, [r4, #4]
   13854:	str	r3, [sp]
   13858:	ldr	r3, [r4]
   1385c:	bl	10ef4 <__fprintf_chk@plt>
   13860:	b	136a4 <__assert_fail@plt+0x26fc>
   13864:	mov	r2, #5
   13868:	ldr	r1, [pc, #60]	; 138ac <__assert_fail@plt+0x2904>
   1386c:	b	13804 <__assert_fail@plt+0x285c>
   13870:	andeq	r5, r1, r1, lsl #5
   13874:	muleq	r1, r4, r2
   13878:	andeq	r5, r1, r2, ror #10
   1387c:	muleq	r1, r8, r2
   13880:	andeq	r5, r1, r3, asr #6
   13884:	andeq	r5, r1, sp, lsl #5
   13888:	andeq	r5, r1, r5, ror #6
   1388c:	andeq	r5, r1, r5, ror r3
   13890:	andeq	r5, r1, ip, lsl #7
   13894:	andeq	r5, r1, r8, lsr #7
   13898:	andeq	r5, r1, r8, asr #7
   1389c:	andeq	r5, r1, ip, ror #7
   138a0:	andeq	r5, r1, r4, lsl r4
   138a4:	andeq	r5, r1, r0, asr #8
   138a8:	andeq	r5, r1, r0, ror r4
   138ac:	andeq	r5, r1, r4, lsr #9
   138b0:	push	{r0, r1, r4, lr}
   138b4:	mov	ip, #0
   138b8:	ldr	lr, [sp, #16]
   138bc:	ldr	r4, [lr, ip, lsl #2]
   138c0:	cmp	r4, #0
   138c4:	bne	138dc <__assert_fail@plt+0x2934>
   138c8:	str	lr, [sp]
   138cc:	str	ip, [sp, #4]
   138d0:	bl	134e8 <__assert_fail@plt+0x2540>
   138d4:	add	sp, sp, #8
   138d8:	pop	{r4, pc}
   138dc:	add	ip, ip, #1
   138e0:	b	138bc <__assert_fail@plt+0x2914>
   138e4:	push	{r4, r5, r6, lr}
   138e8:	sub	sp, sp, #48	; 0x30
   138ec:	mov	ip, #0
   138f0:	add	lr, sp, #8
   138f4:	mov	r5, lr
   138f8:	ldr	r6, [sp, #64]	; 0x40
   138fc:	ldr	r4, [r6, ip, lsl #2]
   13900:	cmp	r4, #0
   13904:	str	r4, [lr], #4
   13908:	beq	13918 <__assert_fail@plt+0x2970>
   1390c:	add	ip, ip, #1
   13910:	cmp	ip, #10
   13914:	bne	138fc <__assert_fail@plt+0x2954>
   13918:	stm	sp, {r5, ip}
   1391c:	bl	134e8 <__assert_fail@plt+0x2540>
   13920:	add	sp, sp, #48	; 0x30
   13924:	pop	{r4, r5, r6, pc}
   13928:	push	{r3}		; (str r3, [sp, #-4]!)
   1392c:	push	{r0, r1, r2, r3, lr}
   13930:	add	r3, sp, #24
   13934:	str	r3, [sp]
   13938:	str	r3, [sp, #12]
   1393c:	ldr	r3, [sp, #20]
   13940:	bl	138e4 <__assert_fail@plt+0x293c>
   13944:	add	sp, sp, #16
   13948:	pop	{lr}		; (ldr lr, [sp], #4)
   1394c:	add	sp, sp, #4
   13950:	bx	lr
   13954:	ldr	r3, [pc, #116]	; 139d0 <__assert_fail@plt+0x2a28>
   13958:	mov	r0, #10
   1395c:	push	{r4, lr}
   13960:	ldr	r1, [r3]
   13964:	bl	10d8c <fputc_unlocked@plt>
   13968:	mov	r2, #5
   1396c:	ldr	r1, [pc, #96]	; 139d4 <__assert_fail@plt+0x2a2c>
   13970:	mov	r0, #0
   13974:	bl	10d98 <dcgettext@plt>
   13978:	mov	r1, r0
   1397c:	ldr	r2, [pc, #84]	; 139d8 <__assert_fail@plt+0x2a30>
   13980:	mov	r0, #1
   13984:	bl	10ed0 <__printf_chk@plt>
   13988:	mov	r2, #5
   1398c:	ldr	r1, [pc, #72]	; 139dc <__assert_fail@plt+0x2a34>
   13990:	mov	r0, #0
   13994:	bl	10d98 <dcgettext@plt>
   13998:	mov	r1, r0
   1399c:	ldr	r3, [pc, #60]	; 139e0 <__assert_fail@plt+0x2a38>
   139a0:	mov	r0, #1
   139a4:	ldr	r2, [pc, #56]	; 139e4 <__assert_fail@plt+0x2a3c>
   139a8:	bl	10ed0 <__printf_chk@plt>
   139ac:	mov	r2, #5
   139b0:	ldr	r1, [pc, #48]	; 139e8 <__assert_fail@plt+0x2a40>
   139b4:	mov	r0, #0
   139b8:	bl	10d98 <dcgettext@plt>
   139bc:	mov	r1, r0
   139c0:	ldr	r2, [pc, #36]	; 139ec <__assert_fail@plt+0x2a44>
   139c4:	mov	r0, #1
   139c8:	pop	{r4, lr}
   139cc:	b	10ed0 <__printf_chk@plt>
   139d0:	andeq	r6, r2, r4, asr r1
   139d4:	andeq	r5, r1, r0, ror #9
   139d8:	strdeq	r5, [r1], -r4
   139dc:	andeq	r5, r1, sl, lsl #10
   139e0:	andeq	r4, r1, fp, asr #28
   139e4:	andeq	r4, r1, r3, ror lr
   139e8:	andeq	r5, r1, lr, lsl r5
   139ec:	andeq	r5, r1, r5, asr #10
   139f0:	push	{r4, lr}
   139f4:	bl	14190 <__assert_fail@plt+0x31e8>
   139f8:	cmp	r0, #0
   139fc:	popne	{r4, pc}
   13a00:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13a04:	push	{r4, lr}
   13a08:	bl	14190 <__assert_fail@plt+0x31e8>
   13a0c:	cmp	r0, #0
   13a10:	popne	{r4, pc}
   13a14:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13a18:	b	139f0 <__assert_fail@plt+0x2a48>
   13a1c:	push	{r4, r5, r6, lr}
   13a20:	mov	r5, r0
   13a24:	mov	r4, r1
   13a28:	bl	141bc <__assert_fail@plt+0x3214>
   13a2c:	cmp	r0, #0
   13a30:	popne	{r4, r5, r6, pc}
   13a34:	adds	r4, r4, #0
   13a38:	movne	r4, #1
   13a3c:	cmp	r5, #0
   13a40:	moveq	r4, #1
   13a44:	cmp	r4, #0
   13a48:	popeq	{r4, r5, r6, pc}
   13a4c:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13a50:	push	{r4, lr}
   13a54:	bl	14658 <__assert_fail@plt+0x36b0>
   13a58:	cmp	r0, #0
   13a5c:	popne	{r4, pc}
   13a60:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13a64:	push	{r4, r5, r6, lr}
   13a68:	mov	r6, r0
   13a6c:	mov	r5, r1
   13a70:	mov	r4, r2
   13a74:	bl	14700 <__assert_fail@plt+0x3758>
   13a78:	cmp	r0, #0
   13a7c:	popne	{r4, r5, r6, pc}
   13a80:	cmp	r6, #0
   13a84:	beq	13a94 <__assert_fail@plt+0x2aec>
   13a88:	cmp	r5, #0
   13a8c:	cmpne	r4, #0
   13a90:	popeq	{r4, r5, r6, pc}
   13a94:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13a98:	b	13a64 <__assert_fail@plt+0x2abc>
   13a9c:	push	{r4, lr}
   13aa0:	bl	14668 <__assert_fail@plt+0x36c0>
   13aa4:	cmp	r0, #0
   13aa8:	popne	{r4, pc}
   13aac:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13ab0:	mov	r2, r1
   13ab4:	mov	r1, r0
   13ab8:	mov	r0, #0
   13abc:	b	13a64 <__assert_fail@plt+0x2abc>
   13ac0:	mov	r2, r1
   13ac4:	mov	r1, r0
   13ac8:	mov	r0, #0
   13acc:	b	13a9c <__assert_fail@plt+0x2af4>
   13ad0:	cmp	r0, #0
   13ad4:	push	{r4, r5, r6, lr}
   13ad8:	mov	r5, r1
   13adc:	ldr	r4, [r1]
   13ae0:	bne	13b0c <__assert_fail@plt+0x2b64>
   13ae4:	cmp	r4, #0
   13ae8:	bne	13afc <__assert_fail@plt+0x2b54>
   13aec:	mov	r4, #64	; 0x40
   13af0:	udiv	r4, r4, r2
   13af4:	cmp	r2, #64	; 0x40
   13af8:	addhi	r4, r4, #1
   13afc:	mov	r1, r4
   13b00:	bl	13a64 <__assert_fail@plt+0x2abc>
   13b04:	str	r4, [r5]
   13b08:	pop	{r4, r5, r6, pc}
   13b0c:	lsr	r3, r4, #1
   13b10:	add	r3, r3, #1
   13b14:	adds	r4, r4, r3
   13b18:	bcc	13afc <__assert_fail@plt+0x2b54>
   13b1c:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13b20:	mov	r2, #1
   13b24:	b	13ad0 <__assert_fail@plt+0x2b28>
   13b28:	ldr	ip, [r1]
   13b2c:	push	{r4, r5, r6, r7, r8, lr}
   13b30:	mov	r5, r1
   13b34:	mvn	r8, r3
   13b38:	lsr	r8, r8, #31
   13b3c:	ldr	lr, [sp, #24]
   13b40:	asr	r1, ip, #1
   13b44:	adds	r4, ip, r1
   13b48:	mvnvs	r4, #-2147483648	; 0x80000000
   13b4c:	cmp	r3, r4
   13b50:	movge	r1, #0
   13b54:	andlt	r1, r8, #1
   13b58:	cmp	r1, #0
   13b5c:	movne	r4, r3
   13b60:	smull	r6, r7, r4, lr
   13b64:	cmp	r7, r6, asr #31
   13b68:	bne	13b80 <__assert_fail@plt+0x2bd8>
   13b6c:	cmp	r6, #63	; 0x3f
   13b70:	mov	r1, r6
   13b74:	bgt	13b90 <__assert_fail@plt+0x2be8>
   13b78:	mov	r1, #64	; 0x40
   13b7c:	b	13b84 <__assert_fail@plt+0x2bdc>
   13b80:	mvn	r1, #-2147483648	; 0x80000000
   13b84:	sdiv	r4, r1, lr
   13b88:	mls	r6, lr, r4, r1
   13b8c:	sub	r1, r1, r6
   13b90:	cmp	r0, #0
   13b94:	sub	r6, r4, ip
   13b98:	streq	r0, [r5]
   13b9c:	cmp	r6, r2
   13ba0:	bge	13bd4 <__assert_fail@plt+0x2c2c>
   13ba4:	adds	r4, ip, r2
   13ba8:	bvs	13bd0 <__assert_fail@plt+0x2c28>
   13bac:	cmp	r4, r3
   13bb0:	movle	r3, #0
   13bb4:	andgt	r3, r8, #1
   13bb8:	cmp	r3, #0
   13bbc:	bne	13bd0 <__assert_fail@plt+0x2c28>
   13bc0:	smull	r2, r3, r4, lr
   13bc4:	cmp	r3, r2, asr #31
   13bc8:	mov	r1, r2
   13bcc:	beq	13bd4 <__assert_fail@plt+0x2c2c>
   13bd0:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13bd4:	bl	13a1c <__assert_fail@plt+0x2a74>
   13bd8:	str	r4, [r5]
   13bdc:	pop	{r4, r5, r6, r7, r8, pc}
   13be0:	push	{r4, lr}
   13be4:	bl	1413c <__assert_fail@plt+0x3194>
   13be8:	cmp	r0, #0
   13bec:	popne	{r4, pc}
   13bf0:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13bf4:	mov	r1, #1
   13bf8:	b	13be0 <__assert_fail@plt+0x2c38>
   13bfc:	push	{r4, lr}
   13c00:	bl	1413c <__assert_fail@plt+0x3194>
   13c04:	cmp	r0, #0
   13c08:	popne	{r4, pc}
   13c0c:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13c10:	mov	r1, #1
   13c14:	b	13bfc <__assert_fail@plt+0x2c54>
   13c18:	push	{r4, r5, r6, lr}
   13c1c:	mov	r4, r1
   13c20:	mov	r5, r0
   13c24:	mov	r0, r1
   13c28:	bl	139f0 <__assert_fail@plt+0x2a48>
   13c2c:	mov	r2, r4
   13c30:	mov	r1, r5
   13c34:	pop	{r4, r5, r6, lr}
   13c38:	b	10d5c <memcpy@plt>
   13c3c:	push	{r4, r5, r6, lr}
   13c40:	mov	r4, r1
   13c44:	mov	r5, r0
   13c48:	mov	r0, r1
   13c4c:	bl	13a04 <__assert_fail@plt+0x2a5c>
   13c50:	mov	r2, r4
   13c54:	mov	r1, r5
   13c58:	pop	{r4, r5, r6, lr}
   13c5c:	b	10d5c <memcpy@plt>
   13c60:	push	{r4, r5, r6, lr}
   13c64:	mov	r5, r0
   13c68:	add	r0, r1, #1
   13c6c:	mov	r4, r1
   13c70:	bl	13a04 <__assert_fail@plt+0x2a5c>
   13c74:	mov	r2, #0
   13c78:	mov	r1, r5
   13c7c:	strb	r2, [r0, r4]
   13c80:	mov	r2, r4
   13c84:	pop	{r4, r5, r6, lr}
   13c88:	b	10d5c <memcpy@plt>
   13c8c:	push	{r4, lr}
   13c90:	mov	r4, r0
   13c94:	bl	10e94 <strlen@plt>
   13c98:	add	r1, r0, #1
   13c9c:	mov	r0, r4
   13ca0:	pop	{r4, lr}
   13ca4:	b	13c18 <__assert_fail@plt+0x2c70>
   13ca8:	ldr	r3, [pc, #44]	; 13cdc <__assert_fail@plt+0x2d34>
   13cac:	mov	r2, #5
   13cb0:	mov	r0, #0
   13cb4:	push	{r4, lr}
   13cb8:	ldr	r1, [pc, #32]	; 13ce0 <__assert_fail@plt+0x2d38>
   13cbc:	ldr	r4, [r3]
   13cc0:	bl	10d98 <dcgettext@plt>
   13cc4:	mov	r3, r0
   13cc8:	ldr	r2, [pc, #20]	; 13ce4 <__assert_fail@plt+0x2d3c>
   13ccc:	mov	r1, #0
   13cd0:	mov	r0, r4
   13cd4:	bl	10e10 <error@plt>
   13cd8:	bl	10f9c <abort@plt>
   13cdc:	strdeq	r6, [r2], -ip
   13ce0:	muleq	r1, r1, r5
   13ce4:	andeq	r5, r1, r5, lsl #3
   13ce8:	push	{r4, lr}
   13cec:	bl	14224 <__assert_fail@plt+0x327c>
   13cf0:	subs	r4, r0, #0
   13cf4:	bne	13d0c <__assert_fail@plt+0x2d64>
   13cf8:	bl	10eac <__errno_location@plt>
   13cfc:	ldr	r3, [r0]
   13d00:	cmp	r3, #12
   13d04:	bne	13d0c <__assert_fail@plt+0x2d64>
   13d08:	bl	13ca8 <__assert_fail@plt+0x2d00>
   13d0c:	mov	r0, r4
   13d10:	pop	{r4, pc}
   13d14:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	mov	ip, r0
   13d1c:	asr	fp, r1, #31
   13d20:	mov	r0, #0
   13d24:	mov	lr, r0
   13d28:	subs	r2, r2, #1
   13d2c:	bcs	13d38 <__assert_fail@plt+0x2d90>
   13d30:	add	sp, sp, #12
   13d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d38:	ldrd	r8, [ip]
   13d3c:	mov	r3, #0
   13d40:	cmp	r9, r3
   13d44:	umulleq	r8, r9, r8, r1
   13d48:	moveq	r6, r8
   13d4c:	moveq	r4, r9
   13d50:	beq	13d88 <__assert_fail@plt+0x2de0>
   13d54:	umull	r4, r5, r8, r1
   13d58:	strd	r4, [sp]
   13d5c:	mov	r5, lr
   13d60:	ldr	r4, [sp, #4]
   13d64:	umlal	r4, r5, r9, r1
   13d68:	cmp	r5, #0
   13d6c:	ldrne	r3, [sp, #4]
   13d70:	mulne	r4, r1, r9
   13d74:	ldreq	r6, [sp]
   13d78:	mlane	r4, r8, fp, r4
   13d7c:	ldrne	r6, [sp]
   13d80:	addne	r4, r4, r3
   13d84:	movne	r3, #1
   13d88:	cmp	r3, #0
   13d8c:	mvnne	r6, #0
   13d90:	movne	r3, #1
   13d94:	movne	r4, r6
   13d98:	orr	r0, r0, r3
   13d9c:	str	r6, [ip]
   13da0:	str	r4, [ip, #4]
   13da4:	b	13d28 <__assert_fail@plt+0x2d80>
   13da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dac:	cmp	r2, #36	; 0x24
   13db0:	sub	sp, sp, #20
   13db4:	ldr	r5, [sp, #56]	; 0x38
   13db8:	bls	13dd0 <__assert_fail@plt+0x2e28>
   13dbc:	ldr	r3, [pc, #876]	; 14130 <__assert_fail@plt+0x3188>
   13dc0:	mov	r2, #85	; 0x55
   13dc4:	ldr	r1, [pc, #872]	; 14134 <__assert_fail@plt+0x318c>
   13dc8:	ldr	r0, [pc, #872]	; 14138 <__assert_fail@plt+0x3190>
   13dcc:	bl	10fa8 <__assert_fail@plt>
   13dd0:	cmp	r1, #0
   13dd4:	mov	r6, r1
   13dd8:	mov	r8, r0
   13ddc:	mov	fp, r2
   13de0:	mov	r7, r3
   13de4:	addeq	r6, sp, #4
   13de8:	bl	10eac <__errno_location@plt>
   13dec:	mov	r3, #0
   13df0:	mov	sl, r0
   13df4:	str	r3, [r0]
   13df8:	bl	10e7c <__ctype_b_loc@plt>
   13dfc:	ldrb	r9, [r8]
   13e00:	mov	r3, r8
   13e04:	ldr	r1, [r0]
   13e08:	lsl	r2, r9, #1
   13e0c:	ldrh	r4, [r1, r2]
   13e10:	ands	r4, r4, #8192	; 0x2000
   13e14:	bne	13e30 <__assert_fail@plt+0x2e88>
   13e18:	cmp	r9, #45	; 0x2d
   13e1c:	bne	13e38 <__assert_fail@plt+0x2e90>
   13e20:	mov	r4, #4
   13e24:	mov	r0, r4
   13e28:	add	sp, sp, #20
   13e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e30:	ldrb	r9, [r3, #1]!
   13e34:	b	13e08 <__assert_fail@plt+0x2e60>
   13e38:	mov	r2, fp
   13e3c:	mov	r1, r6
   13e40:	mov	r0, r8
   13e44:	bl	10ee8 <strtoumax@plt>
   13e48:	ldr	r9, [r6]
   13e4c:	strd	r0, [sp, #8]
   13e50:	cmp	r9, r8
   13e54:	bne	13eb8 <__assert_fail@plt+0x2f10>
   13e58:	cmp	r5, #0
   13e5c:	beq	13e20 <__assert_fail@plt+0x2e78>
   13e60:	ldrb	r1, [r8]
   13e64:	cmp	r1, #0
   13e68:	beq	13e20 <__assert_fail@plt+0x2e78>
   13e6c:	mov	r0, r5
   13e70:	bl	10ea0 <strchr@plt>
   13e74:	cmp	r0, #0
   13e78:	movne	r2, #1
   13e7c:	movne	r3, #0
   13e80:	strdne	r2, [sp, #8]
   13e84:	beq	13e20 <__assert_fail@plt+0x2e78>
   13e88:	ldrb	r8, [r9]
   13e8c:	cmp	r8, #0
   13e90:	beq	140e8 <__assert_fail@plt+0x3140>
   13e94:	mov	r1, r8
   13e98:	mov	r0, r5
   13e9c:	bl	10ea0 <strchr@plt>
   13ea0:	cmp	r0, #0
   13ea4:	bne	13ee0 <__assert_fail@plt+0x2f38>
   13ea8:	ldrd	r2, [sp, #8]
   13eac:	orr	r4, r4, #2
   13eb0:	strd	r2, [r7]
   13eb4:	b	13e24 <__assert_fail@plt+0x2e7c>
   13eb8:	ldr	r4, [sl]
   13ebc:	cmp	r4, #0
   13ec0:	beq	13ed0 <__assert_fail@plt+0x2f28>
   13ec4:	cmp	r4, #34	; 0x22
   13ec8:	bne	13e20 <__assert_fail@plt+0x2e78>
   13ecc:	mov	r4, #1
   13ed0:	cmp	r5, #0
   13ed4:	strdeq	r0, [r7]
   13ed8:	bne	13e88 <__assert_fail@plt+0x2ee0>
   13edc:	b	13e24 <__assert_fail@plt+0x2e7c>
   13ee0:	cmp	r8, #84	; 0x54
   13ee4:	beq	13f38 <__assert_fail@plt+0x2f90>
   13ee8:	bhi	13f20 <__assert_fail@plt+0x2f78>
   13eec:	cmp	r8, #75	; 0x4b
   13ef0:	beq	13f38 <__assert_fail@plt+0x2f90>
   13ef4:	bhi	13f10 <__assert_fail@plt+0x2f68>
   13ef8:	cmp	r8, #69	; 0x45
   13efc:	beq	13f38 <__assert_fail@plt+0x2f90>
   13f00:	cmp	r8, #71	; 0x47
   13f04:	beq	13f38 <__assert_fail@plt+0x2f90>
   13f08:	mov	r5, #1
   13f0c:	b	13ff0 <__assert_fail@plt+0x3048>
   13f10:	cmp	r8, #77	; 0x4d
   13f14:	beq	13f38 <__assert_fail@plt+0x2f90>
   13f18:	cmp	r8, #80	; 0x50
   13f1c:	b	13f04 <__assert_fail@plt+0x2f5c>
   13f20:	cmp	r8, #103	; 0x67
   13f24:	beq	13f38 <__assert_fail@plt+0x2f90>
   13f28:	bhi	13fc8 <__assert_fail@plt+0x3020>
   13f2c:	sub	r3, r8, #89	; 0x59
   13f30:	cmp	r3, #1
   13f34:	bhi	13f08 <__assert_fail@plt+0x2f60>
   13f38:	mov	r1, #48	; 0x30
   13f3c:	mov	r0, r5
   13f40:	bl	10ea0 <strchr@plt>
   13f44:	cmp	r0, #0
   13f48:	beq	13f08 <__assert_fail@plt+0x2f60>
   13f4c:	ldrb	r3, [r9, #1]
   13f50:	cmp	r3, #68	; 0x44
   13f54:	moveq	r5, #2
   13f58:	moveq	r1, #1000	; 0x3e8
   13f5c:	beq	13f7c <__assert_fail@plt+0x2fd4>
   13f60:	cmp	r3, #105	; 0x69
   13f64:	beq	13fe0 <__assert_fail@plt+0x3038>
   13f68:	cmp	r3, #66	; 0x42
   13f6c:	moveq	r5, #2
   13f70:	movne	r5, #1
   13f74:	moveq	r1, #1000	; 0x3e8
   13f78:	movne	r1, #1024	; 0x400
   13f7c:	cmp	r8, #89	; 0x59
   13f80:	beq	14118 <__assert_fail@plt+0x3170>
   13f84:	bhi	14018 <__assert_fail@plt+0x3070>
   13f88:	cmp	r8, #75	; 0x4b
   13f8c:	beq	14058 <__assert_fail@plt+0x30b0>
   13f90:	bhi	13ff8 <__assert_fail@plt+0x3050>
   13f94:	cmp	r8, #69	; 0x45
   13f98:	beq	140f4 <__assert_fail@plt+0x314c>
   13f9c:	cmp	r8, #71	; 0x47
   13fa0:	beq	14100 <__assert_fail@plt+0x3158>
   13fa4:	cmp	r8, #66	; 0x42
   13fa8:	bne	13ea8 <__assert_fail@plt+0x2f00>
   13fac:	ldr	r3, [sp, #8]
   13fb0:	ldr	r1, [sp, #12]
   13fb4:	lsl	r2, r1, #10
   13fb8:	lsr	r0, r1, #22
   13fbc:	orr	r2, r2, r3, lsr #22
   13fc0:	lsl	r3, r3, #10
   13fc4:	b	140a4 <__assert_fail@plt+0x30fc>
   13fc8:	cmp	r8, #109	; 0x6d
   13fcc:	beq	13f38 <__assert_fail@plt+0x2f90>
   13fd0:	cmp	r8, #116	; 0x74
   13fd4:	beq	13f38 <__assert_fail@plt+0x2f90>
   13fd8:	cmp	r8, #107	; 0x6b
   13fdc:	b	13f04 <__assert_fail@plt+0x2f5c>
   13fe0:	ldrb	r3, [r9, #2]
   13fe4:	cmp	r3, #66	; 0x42
   13fe8:	movne	r5, #1
   13fec:	moveq	r5, #3
   13ff0:	mov	r1, #1024	; 0x400
   13ff4:	b	13f7c <__assert_fail@plt+0x2fd4>
   13ff8:	cmp	r8, #80	; 0x50
   13ffc:	beq	14108 <__assert_fail@plt+0x3160>
   14000:	cmp	r8, #84	; 0x54
   14004:	beq	14110 <__assert_fail@plt+0x3168>
   14008:	cmp	r8, #77	; 0x4d
   1400c:	bne	13ea8 <__assert_fail@plt+0x2f00>
   14010:	mov	r2, #2
   14014:	b	140f8 <__assert_fail@plt+0x3150>
   14018:	cmp	r8, #103	; 0x67
   1401c:	beq	14100 <__assert_fail@plt+0x3158>
   14020:	bhi	14044 <__assert_fail@plt+0x309c>
   14024:	cmp	r8, #98	; 0x62
   14028:	beq	1408c <__assert_fail@plt+0x30e4>
   1402c:	cmp	r8, #99	; 0x63
   14030:	beq	14128 <__assert_fail@plt+0x3180>
   14034:	cmp	r8, #90	; 0x5a
   14038:	bne	13ea8 <__assert_fail@plt+0x2f00>
   1403c:	mov	r2, #7
   14040:	b	140f8 <__assert_fail@plt+0x3150>
   14044:	cmp	r8, #109	; 0x6d
   14048:	beq	14010 <__assert_fail@plt+0x3068>
   1404c:	bhi	14060 <__assert_fail@plt+0x30b8>
   14050:	cmp	r8, #107	; 0x6b
   14054:	bne	13ea8 <__assert_fail@plt+0x2f00>
   14058:	mov	r2, #1
   1405c:	b	140f8 <__assert_fail@plt+0x3150>
   14060:	cmp	r8, #116	; 0x74
   14064:	beq	14110 <__assert_fail@plt+0x3168>
   14068:	cmp	r8, #119	; 0x77
   1406c:	bne	13ea8 <__assert_fail@plt+0x2f00>
   14070:	ldr	r3, [sp, #8]
   14074:	ldr	r2, [sp, #12]
   14078:	ldr	r0, [sp, #12]
   1407c:	adds	r3, r3, r3
   14080:	adc	r2, r2, r2
   14084:	lsr	r0, r0, #31
   14088:	b	140a4 <__assert_fail@plt+0x30fc>
   1408c:	ldr	r3, [sp, #8]
   14090:	ldr	r1, [sp, #12]
   14094:	lsl	r2, r1, #9
   14098:	lsr	r0, r1, #23
   1409c:	orr	r2, r2, r3, lsr #23
   140a0:	lsl	r3, r3, #9
   140a4:	adds	r0, r0, #0
   140a8:	movne	r0, #1
   140ac:	cmp	r0, #0
   140b0:	streq	r3, [sp, #8]
   140b4:	streq	r2, [sp, #12]
   140b8:	beq	140cc <__assert_fail@plt+0x3124>
   140bc:	mvn	r2, #0
   140c0:	mvn	r3, #0
   140c4:	mov	r0, #1
   140c8:	strd	r2, [sp, #8]
   140cc:	ldr	r3, [r6]
   140d0:	orr	r4, r4, r0
   140d4:	add	r2, r3, r5
   140d8:	str	r2, [r6]
   140dc:	ldrb	r3, [r3, r5]
   140e0:	cmp	r3, #0
   140e4:	orrne	r4, r4, #2
   140e8:	ldrd	r2, [sp, #8]
   140ec:	strd	r2, [r7]
   140f0:	b	13e24 <__assert_fail@plt+0x2e7c>
   140f4:	mov	r2, #6
   140f8:	add	r0, sp, #8
   140fc:	b	14120 <__assert_fail@plt+0x3178>
   14100:	mov	r2, #3
   14104:	b	140f8 <__assert_fail@plt+0x3150>
   14108:	mov	r2, #5
   1410c:	b	140f8 <__assert_fail@plt+0x3150>
   14110:	mov	r2, #4
   14114:	b	140f8 <__assert_fail@plt+0x3150>
   14118:	mov	r2, #8
   1411c:	add	r0, sp, r2
   14120:	bl	13d14 <__assert_fail@plt+0x2d6c>
   14124:	b	140cc <__assert_fail@plt+0x3124>
   14128:	mov	r0, #0
   1412c:	b	140cc <__assert_fail@plt+0x3124>
   14130:	andeq	r5, r1, r2, lsr #11
   14134:	andeq	r5, r1, sp, lsr #11
   14138:			; <UNDEFINED> instruction: 0x000155bb
   1413c:	cmp	r1, #0
   14140:	cmpne	r0, #0
   14144:	beq	1417c <__assert_fail@plt+0x31d4>
   14148:	push	{r4, r5, r6, lr}
   1414c:	umull	r4, r5, r0, r1
   14150:	adds	r3, r5, #0
   14154:	movne	r3, #1
   14158:	cmp	r4, #0
   1415c:	blt	14168 <__assert_fail@plt+0x31c0>
   14160:	cmp	r3, #0
   14164:	beq	14188 <__assert_fail@plt+0x31e0>
   14168:	bl	10eac <__errno_location@plt>
   1416c:	mov	r3, #12
   14170:	str	r3, [r0]
   14174:	mov	r0, #0
   14178:	pop	{r4, r5, r6, pc}
   1417c:	mov	r1, #1
   14180:	mov	r0, r1
   14184:	b	10d14 <calloc@plt>
   14188:	pop	{r4, r5, r6, lr}
   1418c:	b	14184 <__assert_fail@plt+0x31dc>
   14190:	cmp	r0, #0
   14194:	beq	141b4 <__assert_fail@plt+0x320c>
   14198:	bge	141b8 <__assert_fail@plt+0x3210>
   1419c:	push	{r4, lr}
   141a0:	bl	10eac <__errno_location@plt>
   141a4:	mov	r3, #12
   141a8:	str	r3, [r0]
   141ac:	mov	r0, #0
   141b0:	pop	{r4, pc}
   141b4:	mov	r0, #1
   141b8:	b	10e34 <malloc@plt>
   141bc:	cmp	r0, #0
   141c0:	bne	141cc <__assert_fail@plt+0x3224>
   141c4:	mov	r0, r1
   141c8:	b	14190 <__assert_fail@plt+0x31e8>
   141cc:	cmp	r1, #0
   141d0:	push	{r4, lr}
   141d4:	bne	141e4 <__assert_fail@plt+0x323c>
   141d8:	bl	11e8c <__assert_fail@plt+0xee4>
   141dc:	mov	r0, #0
   141e0:	pop	{r4, pc}
   141e4:	blt	141f0 <__assert_fail@plt+0x3248>
   141e8:	pop	{r4, lr}
   141ec:	b	10da4 <realloc@plt>
   141f0:	bl	10eac <__errno_location@plt>
   141f4:	mov	r3, #12
   141f8:	str	r3, [r0]
   141fc:	b	141dc <__assert_fail@plt+0x3234>
   14200:	cmn	r0, #100	; 0x64
   14204:	beq	14210 <__assert_fail@plt+0x3268>
   14208:	push	{r4, lr}
   1420c:	bl	10f9c <abort@plt>
   14210:	mov	ip, r1
   14214:	mov	r1, r2
   14218:	mov	r0, ip
   1421c:	mov	r2, r3
   14220:	b	10dc8 <readlink@plt>
   14224:	ldr	r3, [pc, #36]	; 14250 <__assert_fail@plt+0x32a8>
   14228:	push	{r0, r1, r2, lr}
   1422c:	mov	r1, r0
   14230:	mvn	r0, #99	; 0x63
   14234:	str	r3, [sp, #4]
   14238:	mov	r3, #0
   1423c:	mov	r2, r3
   14240:	str	r3, [sp]
   14244:	bl	142d8 <__assert_fail@plt+0x3330>
   14248:	add	sp, sp, #12
   1424c:	pop	{pc}		; (ldr pc, [sp], #4)
   14250:	andeq	r4, r1, r0, lsl #4
   14254:	mov	r3, r0
   14258:	mov	r2, r3
   1425c:	mov	r0, r3
   14260:	ldrb	r1, [r2], #1
   14264:	cmp	r1, #47	; 0x2f
   14268:	beq	14274 <__assert_fail@plt+0x32cc>
   1426c:	mov	r2, #0
   14270:	b	14290 <__assert_fail@plt+0x32e8>
   14274:	mov	r3, r2
   14278:	b	14258 <__assert_fail@plt+0x32b0>
   1427c:	cmp	r1, #47	; 0x2f
   14280:	moveq	r2, #1
   14284:	beq	14290 <__assert_fail@plt+0x32e8>
   14288:	cmp	r2, #0
   1428c:	bne	142a4 <__assert_fail@plt+0x32fc>
   14290:	mov	ip, r3
   14294:	ldrb	r1, [r3], #1
   14298:	cmp	r1, #0
   1429c:	bne	1427c <__assert_fail@plt+0x32d4>
   142a0:	bx	lr
   142a4:	mov	r0, ip
   142a8:	b	1426c <__assert_fail@plt+0x32c4>
   142ac:	push	{r4, lr}
   142b0:	mov	r4, r0
   142b4:	bl	10e94 <strlen@plt>
   142b8:	cmp	r0, #1
   142bc:	popls	{r4, pc}
   142c0:	sub	r3, r0, #1
   142c4:	ldrb	r2, [r4, r3]
   142c8:	cmp	r2, #47	; 0x2f
   142cc:	popne	{r4, pc}
   142d0:	mov	r0, r3
   142d4:	b	142b8 <__assert_fail@plt+0x3310>
   142d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   142dc:	sub	sp, sp, #1024	; 0x400
   142e0:	mov	r9, r1
   142e4:	mvn	r5, #-2147483648	; 0x80000000
   142e8:	mov	r7, r0
   142ec:	ldr	r6, [sp, #1056]	; 0x420
   142f0:	ldr	r1, [pc, #344]	; 14450 <__assert_fail@plt+0x34a8>
   142f4:	ldr	sl, [sp, #1060]	; 0x424
   142f8:	cmp	r6, #0
   142fc:	moveq	r6, r1
   14300:	subs	r8, r2, #0
   14304:	moveq	r3, #1024	; 0x400
   14308:	moveq	r8, sp
   1430c:	cmp	r3, r5
   14310:	mov	r4, r8
   14314:	movcc	r5, r3
   14318:	mov	r3, r5
   1431c:	mov	r2, r4
   14320:	mov	r1, r9
   14324:	mov	r0, r7
   14328:	blx	sl
   1432c:	cmp	r0, #0
   14330:	bge	14360 <__assert_fail@plt+0x33b8>
   14334:	cmp	r8, r4
   14338:	beq	14358 <__assert_fail@plt+0x33b0>
   1433c:	bl	10eac <__errno_location@plt>
   14340:	mov	r5, r0
   14344:	mov	r0, r4
   14348:	ldr	r3, [r6, #8]
   1434c:	ldr	r7, [r5]
   14350:	blx	r3
   14354:	str	r7, [r5]
   14358:	mov	r4, #0
   1435c:	b	143a4 <__assert_fail@plt+0x33fc>
   14360:	cmp	r0, r5
   14364:	bge	143e0 <__assert_fail@plt+0x3438>
   14368:	mov	r3, #0
   1436c:	add	r7, r0, #1
   14370:	strb	r3, [r4, r0]
   14374:	mov	r3, sp
   14378:	cmp	r4, r3
   1437c:	bne	143b0 <__assert_fail@plt+0x3408>
   14380:	mov	r0, r7
   14384:	ldr	r3, [r6]
   14388:	blx	r3
   1438c:	cmp	r0, #0
   14390:	beq	14448 <__assert_fail@plt+0x34a0>
   14394:	mov	r1, r4
   14398:	mov	r2, r7
   1439c:	bl	10d5c <memcpy@plt>
   143a0:	mov	r4, r0
   143a4:	mov	r0, r4
   143a8:	add	sp, sp, #1024	; 0x400
   143ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143b0:	cmp	r8, r4
   143b4:	cmpne	r7, r5
   143b8:	bge	143a4 <__assert_fail@plt+0x33fc>
   143bc:	ldr	r3, [r6, #4]
   143c0:	cmp	r3, #0
   143c4:	beq	143a4 <__assert_fail@plt+0x33fc>
   143c8:	mov	r0, r4
   143cc:	mov	r1, r7
   143d0:	blx	r3
   143d4:	cmp	r0, #0
   143d8:	movne	r4, r0
   143dc:	b	143a4 <__assert_fail@plt+0x33fc>
   143e0:	cmp	r8, r4
   143e4:	beq	143f4 <__assert_fail@plt+0x344c>
   143e8:	mov	r0, r4
   143ec:	ldr	r3, [r6, #8]
   143f0:	blx	r3
   143f4:	cmn	r5, #-1073741822	; 0xc0000002
   143f8:	ble	1440c <__assert_fail@plt+0x3464>
   143fc:	bl	10eac <__errno_location@plt>
   14400:	mov	r3, #36	; 0x24
   14404:	str	r3, [r0]
   14408:	b	14358 <__assert_fail@plt+0x33b0>
   1440c:	lsl	r5, r5, #1
   14410:	ldr	r3, [r6]
   14414:	add	r5, r5, #1
   14418:	mov	r0, r5
   1441c:	blx	r3
   14420:	subs	r4, r0, #0
   14424:	bne	14318 <__assert_fail@plt+0x3370>
   14428:	ldr	r3, [r6, #12]
   1442c:	cmp	r3, #0
   14430:	beq	1443c <__assert_fail@plt+0x3494>
   14434:	mov	r0, r5
   14438:	blx	r3
   1443c:	bl	10eac <__errno_location@plt>
   14440:	mov	r3, #12
   14444:	b	14404 <__assert_fail@plt+0x345c>
   14448:	mov	r5, r7
   1444c:	b	14428 <__assert_fail@plt+0x3480>
   14450:	andeq	r5, r1, r8, ror #11
   14454:	push	{r4, r5, r6, lr}
   14458:	mov	r4, r0
   1445c:	bl	10dec <__fpending@plt>
   14460:	mov	r5, r0
   14464:	mov	r0, r4
   14468:	bl	10df8 <ferror_unlocked@plt>
   1446c:	mov	r6, r0
   14470:	mov	r0, r4
   14474:	bl	144c4 <__assert_fail@plt+0x351c>
   14478:	cmp	r6, #0
   1447c:	mov	r4, r0
   14480:	bne	144ac <__assert_fail@plt+0x3504>
   14484:	cmp	r0, #0
   14488:	beq	144a4 <__assert_fail@plt+0x34fc>
   1448c:	cmp	r5, #0
   14490:	bne	144bc <__assert_fail@plt+0x3514>
   14494:	bl	10eac <__errno_location@plt>
   14498:	ldr	r4, [r0]
   1449c:	subs	r4, r4, #9
   144a0:	mvnne	r4, #0
   144a4:	mov	r0, r4
   144a8:	pop	{r4, r5, r6, pc}
   144ac:	cmp	r0, #0
   144b0:	bne	144bc <__assert_fail@plt+0x3514>
   144b4:	bl	10eac <__errno_location@plt>
   144b8:	str	r4, [r0]
   144bc:	mvn	r4, #0
   144c0:	b	144a4 <__assert_fail@plt+0x34fc>
   144c4:	push	{r0, r1, r2, r4, r5, lr}
   144c8:	mov	r4, r0
   144cc:	bl	10edc <fileno@plt>
   144d0:	cmp	r0, #0
   144d4:	mov	r0, r4
   144d8:	bge	144e8 <__assert_fail@plt+0x3540>
   144dc:	add	sp, sp, #12
   144e0:	pop	{r4, r5, lr}
   144e4:	b	10f0c <fclose@plt>
   144e8:	bl	10e4c <__freading@plt>
   144ec:	cmp	r0, #0
   144f0:	bne	1452c <__assert_fail@plt+0x3584>
   144f4:	mov	r0, r4
   144f8:	bl	1456c <__assert_fail@plt+0x35c4>
   144fc:	cmp	r0, #0
   14500:	bne	14560 <__assert_fail@plt+0x35b8>
   14504:	mov	r5, #0
   14508:	mov	r0, r4
   1450c:	bl	10f0c <fclose@plt>
   14510:	cmp	r5, #0
   14514:	beq	14524 <__assert_fail@plt+0x357c>
   14518:	bl	10eac <__errno_location@plt>
   1451c:	str	r5, [r0]
   14520:	mvn	r0, #0
   14524:	add	sp, sp, #12
   14528:	pop	{r4, r5, pc}
   1452c:	mov	r0, r4
   14530:	bl	10edc <fileno@plt>
   14534:	mov	r3, #1
   14538:	mov	r2, #0
   1453c:	str	r3, [sp]
   14540:	mov	r3, #0
   14544:	bl	10dd4 <lseek64@plt>
   14548:	mvn	r3, #0
   1454c:	mvn	r2, #0
   14550:	cmp	r1, r3
   14554:	cmpeq	r0, r2
   14558:	bne	144f4 <__assert_fail@plt+0x354c>
   1455c:	b	14504 <__assert_fail@plt+0x355c>
   14560:	bl	10eac <__errno_location@plt>
   14564:	ldr	r5, [r0]
   14568:	b	14508 <__assert_fail@plt+0x3560>
   1456c:	push	{r0, r1, r4, lr}
   14570:	subs	r4, r0, #0
   14574:	bne	14588 <__assert_fail@plt+0x35e0>
   14578:	mov	r0, r4
   1457c:	add	sp, sp, #8
   14580:	pop	{r4, lr}
   14584:	b	10d38 <fflush@plt>
   14588:	bl	10e4c <__freading@plt>
   1458c:	cmp	r0, #0
   14590:	beq	14578 <__assert_fail@plt+0x35d0>
   14594:	ldr	r3, [r4]
   14598:	tst	r3, #256	; 0x100
   1459c:	beq	14578 <__assert_fail@plt+0x35d0>
   145a0:	mov	r3, #1
   145a4:	mov	r2, #0
   145a8:	mov	r0, r4
   145ac:	str	r3, [sp]
   145b0:	mov	r3, #0
   145b4:	bl	145bc <__assert_fail@plt+0x3614>
   145b8:	b	14578 <__assert_fail@plt+0x35d0>
   145bc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   145c0:	mov	r4, r0
   145c4:	ldmib	r0, {ip, lr}
   145c8:	ldr	r8, [sp, #32]
   145cc:	cmp	lr, ip
   145d0:	bne	14640 <__assert_fail@plt+0x3698>
   145d4:	ldr	ip, [r0, #16]
   145d8:	ldr	lr, [r0, #20]
   145dc:	cmp	lr, ip
   145e0:	bne	14640 <__assert_fail@plt+0x3698>
   145e4:	ldr	r5, [r0, #36]	; 0x24
   145e8:	cmp	r5, #0
   145ec:	bne	14640 <__assert_fail@plt+0x3698>
   145f0:	mov	r6, r2
   145f4:	mov	r7, r3
   145f8:	bl	10edc <fileno@plt>
   145fc:	mov	r2, r6
   14600:	mov	r3, r7
   14604:	str	r8, [sp]
   14608:	bl	10dd4 <lseek64@plt>
   1460c:	mvn	r3, #0
   14610:	mvn	r2, #0
   14614:	cmp	r1, r3
   14618:	cmpeq	r0, r2
   1461c:	mvneq	r0, #0
   14620:	beq	14638 <__assert_fail@plt+0x3690>
   14624:	ldr	r3, [r4]
   14628:	strd	r0, [r4, #80]	; 0x50
   1462c:	mov	r0, r5
   14630:	bic	r3, r3, #16
   14634:	str	r3, [r4]
   14638:	add	sp, sp, #8
   1463c:	pop	{r4, r5, r6, r7, r8, pc}
   14640:	mov	r0, r4
   14644:	str	r8, [sp, #32]
   14648:	add	sp, sp, #8
   1464c:	pop	{r4, r5, r6, r7, r8, lr}
   14650:	b	10f18 <fseeko64@plt>
   14654:	b	14190 <__assert_fail@plt+0x31e8>
   14658:	cmp	r1, #0
   1465c:	orreq	r1, r1, #1
   14660:	b	141bc <__assert_fail@plt+0x3214>
   14664:	b	1413c <__assert_fail@plt+0x3194>
   14668:	cmp	r2, #0
   1466c:	cmpne	r1, #0
   14670:	moveq	r2, #1
   14674:	moveq	r1, r2
   14678:	b	14700 <__assert_fail@plt+0x3758>
   1467c:	push	{r4, lr}
   14680:	mov	r0, #14
   14684:	bl	10f60 <nl_langinfo@plt>
   14688:	cmp	r0, #0
   1468c:	beq	146a4 <__assert_fail@plt+0x36fc>
   14690:	ldrb	r2, [r0]
   14694:	ldr	r3, [pc, #16]	; 146ac <__assert_fail@plt+0x3704>
   14698:	cmp	r2, #0
   1469c:	moveq	r0, r3
   146a0:	pop	{r4, pc}
   146a4:	ldr	r0, [pc]	; 146ac <__assert_fail@plt+0x3704>
   146a8:	pop	{r4, pc}
   146ac:	andeq	r5, r1, r1, ror #11
   146b0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146b4:	subs	r5, r0, #0
   146b8:	mov	r7, r2
   146bc:	addeq	r5, sp, #4
   146c0:	mov	r6, r1
   146c4:	mov	r0, r5
   146c8:	bl	10e04 <mbrtowc@plt>
   146cc:	cmp	r7, #0
   146d0:	cmnne	r0, #3
   146d4:	mov	r4, r0
   146d8:	bls	146f4 <__assert_fail@plt+0x374c>
   146dc:	mov	r0, #0
   146e0:	bl	1472c <__assert_fail@plt+0x3784>
   146e4:	cmp	r0, #0
   146e8:	ldrbeq	r3, [r6]
   146ec:	moveq	r4, #1
   146f0:	streq	r3, [r5]
   146f4:	mov	r0, r4
   146f8:	add	sp, sp, #12
   146fc:	pop	{r4, r5, r6, r7, pc}
   14700:	umull	r2, r3, r1, r2
   14704:	cmp	r3, #0
   14708:	bne	14714 <__assert_fail@plt+0x376c>
   1470c:	mov	r1, r2
   14710:	b	141bc <__assert_fail@plt+0x3214>
   14714:	push	{r4, lr}
   14718:	bl	10eac <__errno_location@plt>
   1471c:	mov	r3, #12
   14720:	str	r3, [r0]
   14724:	mov	r0, #0
   14728:	pop	{r4, pc}
   1472c:	push	{lr}		; (str lr, [sp, #-4]!)
   14730:	sub	sp, sp, #268	; 0x10c
   14734:	movw	r2, #257	; 0x101
   14738:	add	r1, sp, #4
   1473c:	bl	14788 <__assert_fail@plt+0x37e0>
   14740:	cmp	r0, #0
   14744:	movne	r0, #0
   14748:	bne	14778 <__assert_fail@plt+0x37d0>
   1474c:	ldr	r1, [pc, #44]	; 14780 <__assert_fail@plt+0x37d8>
   14750:	add	r0, sp, #4
   14754:	bl	10d2c <strcmp@plt>
   14758:	cmp	r0, #0
   1475c:	beq	14774 <__assert_fail@plt+0x37cc>
   14760:	ldr	r1, [pc, #28]	; 14784 <__assert_fail@plt+0x37dc>
   14764:	add	r0, sp, #4
   14768:	bl	10d2c <strcmp@plt>
   1476c:	adds	r0, r0, #0
   14770:	movne	r0, #1
   14774:	and	r0, r0, #1
   14778:	add	sp, sp, #268	; 0x10c
   1477c:	pop	{pc}		; (ldr pc, [sp], #4)
   14780:	strdeq	r5, [r1], -r8
   14784:	strdeq	r5, [r1], -sl
   14788:	push	{r4, r5, r6, lr}
   1478c:	mov	r5, r1
   14790:	mov	r1, #0
   14794:	mov	r4, r2
   14798:	bl	10f30 <setlocale@plt>
   1479c:	subs	r6, r0, #0
   147a0:	bne	147b4 <__assert_fail@plt+0x380c>
   147a4:	cmp	r4, #0
   147a8:	mov	r0, #22
   147ac:	strbne	r6, [r5]
   147b0:	pop	{r4, r5, r6, pc}
   147b4:	bl	10e94 <strlen@plt>
   147b8:	cmp	r4, r0
   147bc:	bls	147d8 <__assert_fail@plt+0x3830>
   147c0:	add	r2, r0, #1
   147c4:	mov	r1, r6
   147c8:	mov	r0, r5
   147cc:	bl	10d5c <memcpy@plt>
   147d0:	mov	r0, #0
   147d4:	pop	{r4, r5, r6, pc}
   147d8:	cmp	r4, #0
   147dc:	beq	147fc <__assert_fail@plt+0x3854>
   147e0:	sub	r4, r4, #1
   147e4:	mov	r1, r6
   147e8:	mov	r2, r4
   147ec:	mov	r0, r5
   147f0:	bl	10d5c <memcpy@plt>
   147f4:	mov	r3, #0
   147f8:	strb	r3, [r5, r4]
   147fc:	mov	r0, #34	; 0x22
   14800:	pop	{r4, r5, r6, pc}
   14804:	mov	r1, #0
   14808:	b	10f30 <setlocale@plt>
   1480c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14810:	mov	r7, r0
   14814:	ldr	r6, [pc, #72]	; 14864 <__assert_fail@plt+0x38bc>
   14818:	ldr	r5, [pc, #72]	; 14868 <__assert_fail@plt+0x38c0>
   1481c:	add	r6, pc, r6
   14820:	add	r5, pc, r5
   14824:	sub	r6, r6, r5
   14828:	mov	r8, r1
   1482c:	mov	r9, r2
   14830:	bl	10cf4 <calloc@plt-0x20>
   14834:	asrs	r6, r6, #2
   14838:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1483c:	mov	r4, #0
   14840:	add	r4, r4, #1
   14844:	ldr	r3, [r5], #4
   14848:	mov	r2, r9
   1484c:	mov	r1, r8
   14850:	mov	r0, r7
   14854:	blx	r3
   14858:	cmp	r6, r4
   1485c:	bne	14840 <__assert_fail@plt+0x3898>
   14860:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14864:	strdeq	r1, [r1], -r0
   14868:	andeq	r1, r1, r8, ror #13
   1486c:	bx	lr
   14870:	ldr	r3, [pc, #12]	; 14884 <__assert_fail@plt+0x38dc>
   14874:	mov	r1, #0
   14878:	add	r3, pc, r3
   1487c:	ldr	r2, [r3]
   14880:	b	10eb8 <__cxa_atexit@plt>
   14884:	andeq	r1, r1, r4, ror r8
   14888:	mov	r2, r1
   1488c:	mov	r1, r0
   14890:	mov	r0, #3
   14894:	b	10f78 <__xstat64@plt>

Disassembly of section .fini:

00014898 <.fini>:
   14898:	push	{r3, lr}
   1489c:	pop	{r3, pc}
