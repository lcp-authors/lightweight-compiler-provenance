
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144d4 <.init>:
   144d4:	push	{r3, lr}
   144d8:	bl	15128 <_start@@Base+0x3c>
   144dc:	pop	{r3, pc}

Disassembly of section .plt:

000144e0 <raise@plt-0x14>:
   144e0:	push	{lr}		; (str lr, [sp, #-4]!)
   144e4:	ldr	lr, [pc, #4]	; 144f0 <raise@plt-0x4>
   144e8:	add	lr, pc, lr
   144ec:	ldr	pc, [lr, #8]!
   144f0:	andeq	r4, r4, r0, lsl fp

000144f4 <raise@plt>:
   144f4:	add	ip, pc, #0, 12
   144f8:	add	ip, ip, #68, 20	; 0x44000
   144fc:	ldr	pc, [ip, #2832]!	; 0xb10

00014500 <strcmp@plt>:
   14500:	add	ip, pc, #0, 12
   14504:	add	ip, ip, #68, 20	; 0x44000
   14508:	ldr	pc, [ip, #2824]!	; 0xb08

0001450c <memmove@plt>:
   1450c:	add	ip, pc, #0, 12
   14510:	add	ip, ip, #68, 20	; 0x44000
   14514:	ldr	pc, [ip, #2816]!	; 0xb00

00014518 <free@plt>:
   14518:	add	ip, pc, #0, 12
   1451c:	add	ip, ip, #68, 20	; 0x44000
   14520:	ldr	pc, [ip, #2808]!	; 0xaf8

00014524 <memcpy@plt>:
   14524:	add	ip, pc, #0, 12
   14528:	add	ip, ip, #68, 20	; 0x44000
   1452c:	ldr	pc, [ip, #2800]!	; 0xaf0

00014530 <memcmp@plt>:
   14530:	add	ip, pc, #0, 12
   14534:	add	ip, ip, #68, 20	; 0x44000
   14538:	ldr	pc, [ip, #2792]!	; 0xae8

0001453c <realloc@plt>:
   1453c:	add	ip, pc, #0, 12
   14540:	add	ip, ip, #68, 20	; 0x44000
   14544:	ldr	pc, [ip, #2784]!	; 0xae0

00014548 <fwrite@plt>:
   14548:	add	ip, pc, #0, 12
   1454c:	add	ip, ip, #68, 20	; 0x44000
   14550:	ldr	pc, [ip, #2776]!	; 0xad8

00014554 <malloc@plt>:
   14554:	add	ip, pc, #0, 12
   14558:	add	ip, ip, #68, 20	; 0x44000
   1455c:	ldr	pc, [ip, #2768]!	; 0xad0

00014560 <__libc_start_main@plt>:
   14560:	add	ip, pc, #0, 12
   14564:	add	ip, ip, #68, 20	; 0x44000
   14568:	ldr	pc, [ip, #2760]!	; 0xac8

0001456c <__gmon_start__@plt>:
   1456c:	add	ip, pc, #0, 12
   14570:	add	ip, ip, #68, 20	; 0x44000
   14574:	ldr	pc, [ip, #2752]!	; 0xac0

00014578 <strlen@plt>:
   14578:	add	ip, pc, #0, 12
   1457c:	add	ip, ip, #68, 20	; 0x44000
   14580:	ldr	pc, [ip, #2744]!	; 0xab8

00014584 <fprintf@plt>:
   14584:	add	ip, pc, #0, 12
   14588:	add	ip, ip, #68, 20	; 0x44000
   1458c:	ldr	pc, [ip, #2736]!	; 0xab0

00014590 <posix_memalign@plt>:
   14590:	add	ip, pc, #0, 12
   14594:	add	ip, ip, #68, 20	; 0x44000
   14598:	ldr	pc, [ip, #2728]!	; 0xaa8

0001459c <memset@plt>:
   1459c:	add	ip, pc, #0, 12
   145a0:	add	ip, ip, #68, 20	; 0x44000
   145a4:	ldr	pc, [ip, #2720]!	; 0xaa0

000145a8 <strncpy@plt>:
   145a8:	add	ip, pc, #0, 12
   145ac:	add	ip, ip, #68, 20	; 0x44000
   145b0:	ldr	pc, [ip, #2712]!	; 0xa98

000145b4 <strtod@plt>:
   145b4:	add	ip, pc, #0, 12
   145b8:	add	ip, ip, #68, 20	; 0x44000
   145bc:	ldr	pc, [ip, #2704]!	; 0xa90

000145c0 <memchr@plt>:
   145c0:	add	ip, pc, #0, 12
   145c4:	add	ip, ip, #68, 20	; 0x44000
   145c8:	ldr	pc, [ip, #2696]!	; 0xa88

000145cc <fputc@plt>:
   145cc:	add	ip, pc, #0, 12
   145d0:	add	ip, ip, #68, 20	; 0x44000
   145d4:	ldr	pc, [ip, #2688]!	; 0xa80

000145d8 <sprintf@plt>:
   145d8:	add	ip, pc, #0, 12
   145dc:	add	ip, ip, #68, 20	; 0x44000
   145e0:	ldr	pc, [ip, #2680]!	; 0xa78

000145e4 <abort@plt>:
   145e4:	add	ip, pc, #0, 12
   145e8:	add	ip, ip, #68, 20	; 0x44000
   145ec:	ldr	pc, [ip, #2672]!	; 0xa70

000145f0 <__assert_fail@plt>:
   145f0:	add	ip, pc, #0, 12
   145f4:	add	ip, ip, #68, 20	; 0x44000
   145f8:	ldr	pc, [ip, #2664]!	; 0xa68

Disassembly of section .text:

00014600 <main@@Base>:
   14600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14604:	mov	r4, #0
   14608:	strd	r6, [sp, #8]
   1460c:	movw	r6, #11024	; 0x2b10
   14610:	movt	r6, #4
   14614:	strd	r8, [sp, #16]
   14618:	movw	r7, #19676	; 0x4cdc
   1461c:	movt	r7, #4
   14620:	strd	sl, [sp, #24]
   14624:	movw	r9, #19752	; 0x4d28
   14628:	movt	r9, #4
   1462c:	str	lr, [sp, #32]
   14630:	sub	sp, sp, #44	; 0x2c
   14634:	movw	r8, #19828	; 0x4d74
   14638:	movt	r8, #4
   1463c:	movw	sl, #20412	; 0x4fbc
   14640:	movt	sl, #4
   14644:	movw	fp, #21140	; 0x5294
   14648:	movt	fp, #4
   1464c:	bl	24acc <edge_case_tests@@Base>
   14650:	mov	r5, r0
   14654:	bl	24dc8 <error_case_tests@@Base>
   14658:	movw	r3, #20692	; 0x50d4
   1465c:	movt	r3, #4
   14660:	orr	r5, r5, r0
   14664:	movw	r2, #20804	; 0x5144
   14668:	movt	r2, #4
   1466c:	movw	r1, #20872	; 0x5188
   14670:	movt	r1, #4
   14674:	movw	r0, #20940	; 0x51cc
   14678:	movt	r0, #4
   1467c:	movw	ip, #21184	; 0x52c0
   14680:	movt	ip, #4
   14684:	movw	lr, #21340	; 0x535c
   14688:	movt	lr, #4
   1468c:	str	r3, [sp, #12]
   14690:	movw	r3, #21112	; 0x5278
   14694:	movt	r3, #4
   14698:	str	r3, [sp, #8]
   1469c:	str	r2, [sp, #16]
   146a0:	str	r1, [sp, #20]
   146a4:	str	r0, [sp, #24]
   146a8:	str	ip, [sp, #28]
   146ac:	str	lr, [sp, #32]
   146b0:	bl	2537c <union_vector_tests@@Base>
   146b4:	orr	r5, r5, r0
   146b8:	bl	250b4 <base64_tests@@Base>
   146bc:	orr	r5, r5, r0
   146c0:	bl	2527c <mixed_type_union_tests@@Base>
   146c4:	movw	ip, #525	; 0x20d
   146c8:	mov	r1, r6
   146cc:	mov	r3, r4
   146d0:	mov	r2, r4
   146d4:	orr	r5, r5, r0
   146d8:	movw	r0, #19652	; 0x4cc4
   146dc:	movt	r0, #4
   146e0:	stm	sp, {r4, ip}
   146e4:	bl	184b0 <_start@@Base+0x33c4>
   146e8:	mov	ip, #528	; 0x210
   146ec:	mov	r3, r4
   146f0:	mov	r2, r4
   146f4:	mov	r1, r7
   146f8:	orr	r5, r5, r0
   146fc:	movw	r0, #19712	; 0x4d00
   14700:	movt	r0, #4
   14704:	stm	sp, {r4, ip}
   14708:	bl	184b0 <_start@@Base+0x33c4>
   1470c:	movw	ip, #531	; 0x213
   14710:	mov	r3, r4
   14714:	mov	r2, r4
   14718:	mov	r1, r9
   1471c:	orr	r5, r5, r0
   14720:	movw	r0, #19788	; 0x4d4c
   14724:	movt	r0, #4
   14728:	stm	sp, {r4, ip}
   1472c:	bl	184b0 <_start@@Base+0x33c4>
   14730:	movw	ip, #534	; 0x216
   14734:	mov	r3, r4
   14738:	mov	r2, r4
   1473c:	mov	r1, r8
   14740:	orr	r5, r5, r0
   14744:	movw	r0, #19872	; 0x4da0
   14748:	movt	r0, #4
   1474c:	stm	sp, {r4, ip}
   14750:	bl	184b0 <_start@@Base+0x33c4>
   14754:	movw	ip, #537	; 0x219
   14758:	mov	r3, r4
   1475c:	mov	r2, r4
   14760:	mov	r1, r8
   14764:	orr	r5, r5, r0
   14768:	movw	r0, #19924	; 0x4dd4
   1476c:	movt	r0, #4
   14770:	stm	sp, {r4, ip}
   14774:	bl	184b0 <_start@@Base+0x33c4>
   14778:	mov	ip, #540	; 0x21c
   1477c:	mov	r3, r4
   14780:	mov	r2, r4
   14784:	mov	r1, r7
   14788:	orr	r5, r5, r0
   1478c:	movw	r0, #19984	; 0x4e10
   14790:	movt	r0, #4
   14794:	stm	sp, {r4, ip}
   14798:	bl	184b0 <_start@@Base+0x33c4>
   1479c:	movw	ip, #543	; 0x21f
   147a0:	mov	r3, r4
   147a4:	mov	r2, r4
   147a8:	mov	r1, r9
   147ac:	orr	r5, r5, r0
   147b0:	movw	r0, #20024	; 0x4e38
   147b4:	movt	r0, #4
   147b8:	stm	sp, {r4, ip}
   147bc:	bl	184b0 <_start@@Base+0x33c4>
   147c0:	movw	ip, #547	; 0x223
   147c4:	mov	r3, r4
   147c8:	mov	r2, r4
   147cc:	mov	r1, r6
   147d0:	orr	r5, r5, r0
   147d4:	movw	r0, #20068	; 0x4e64
   147d8:	movt	r0, #4
   147dc:	stm	sp, {r4, ip}
   147e0:	bl	184b0 <_start@@Base+0x33c4>
   147e4:	movw	ip, #551	; 0x227
   147e8:	mov	r3, r4
   147ec:	mov	r2, r4
   147f0:	mov	r1, r6
   147f4:	orr	r5, r5, r0
   147f8:	movw	r0, #10916	; 0x2aa4
   147fc:	movt	r0, #4
   14800:	stm	sp, {r4, ip}
   14804:	bl	184b0 <_start@@Base+0x33c4>
   14808:	movw	ip, #555	; 0x22b
   1480c:	mov	r3, r4
   14810:	mov	r2, r4
   14814:	mov	r1, r6
   14818:	orr	r5, r5, r0
   1481c:	movw	r0, #20108	; 0x4e8c
   14820:	movt	r0, #4
   14824:	stm	sp, {r4, ip}
   14828:	bl	184b0 <_start@@Base+0x33c4>
   1482c:	movw	ip, #558	; 0x22e
   14830:	mov	r3, r4
   14834:	mov	r2, r4
   14838:	mov	r1, r7
   1483c:	orr	r5, r5, r0
   14840:	movw	r0, #20132	; 0x4ea4
   14844:	movt	r0, #4
   14848:	stm	sp, {r4, ip}
   1484c:	bl	184b0 <_start@@Base+0x33c4>
   14850:	movw	ip, #561	; 0x231
   14854:	mov	r3, r4
   14858:	mov	r2, r4
   1485c:	mov	r1, r9
   14860:	orr	r5, r5, r0
   14864:	movw	r0, #20168	; 0x4ec8
   14868:	movt	r0, #4
   1486c:	stm	sp, {r4, ip}
   14870:	bl	184b0 <_start@@Base+0x33c4>
   14874:	mov	ip, #564	; 0x234
   14878:	mov	r3, r4
   1487c:	mov	r2, r4
   14880:	mov	r1, r8
   14884:	orr	r5, r5, r0
   14888:	movw	r0, #20204	; 0x4eec
   1488c:	movt	r0, #4
   14890:	stm	sp, {r4, ip}
   14894:	bl	184b0 <_start@@Base+0x33c4>
   14898:	movw	ip, #567	; 0x237
   1489c:	mov	r3, r4
   148a0:	mov	r2, r4
   148a4:	mov	r1, r8
   148a8:	orr	r5, r5, r0
   148ac:	movw	r0, #20252	; 0x4f1c
   148b0:	movt	r0, #4
   148b4:	stm	sp, {r4, ip}
   148b8:	bl	184b0 <_start@@Base+0x33c4>
   148bc:	movw	ip, #570	; 0x23a
   148c0:	mov	r3, r4
   148c4:	mov	r2, r4
   148c8:	mov	r1, r7
   148cc:	orr	r5, r5, r0
   148d0:	movw	r0, #20308	; 0x4f54
   148d4:	movt	r0, #4
   148d8:	stm	sp, {r4, ip}
   148dc:	bl	184b0 <_start@@Base+0x33c4>
   148e0:	movw	ip, #573	; 0x23d
   148e4:	mov	r3, r4
   148e8:	mov	r2, r4
   148ec:	mov	r1, r9
   148f0:	orr	r5, r5, r0
   148f4:	movw	r0, #20340	; 0x4f74
   148f8:	movt	r0, #4
   148fc:	stm	sp, {r4, ip}
   14900:	bl	184b0 <_start@@Base+0x33c4>
   14904:	movw	ip, #577	; 0x241
   14908:	mov	r3, r4
   1490c:	mov	r2, r4
   14910:	mov	r1, r6
   14914:	orr	r5, r5, r0
   14918:	movw	r0, #20376	; 0x4f98
   1491c:	movt	r0, #4
   14920:	stm	sp, {r4, ip}
   14924:	bl	184b0 <_start@@Base+0x33c4>
   14928:	movw	ip, #581	; 0x245
   1492c:	mov	r3, r4
   14930:	mov	r2, r4
   14934:	mov	r1, r6
   14938:	orr	r5, r5, r0
   1493c:	movw	r0, #11616	; 0x2d60
   14940:	movt	r0, #4
   14944:	stm	sp, {r4, ip}
   14948:	bl	184b0 <_start@@Base+0x33c4>
   1494c:	movw	ip, #585	; 0x249
   14950:	mov	r3, r4
   14954:	mov	r2, r4
   14958:	mov	r1, sl
   1495c:	orr	r5, r5, r0
   14960:	movw	r0, #20452	; 0x4fe4
   14964:	movt	r0, #4
   14968:	stm	sp, {r4, ip}
   1496c:	bl	184b0 <_start@@Base+0x33c4>
   14970:	movw	ip, #591	; 0x24f
   14974:	mov	r3, r4
   14978:	mov	r2, r4
   1497c:	mov	r1, sl
   14980:	orr	r5, r5, r0
   14984:	movw	r0, #20492	; 0x500c
   14988:	movt	r0, #4
   1498c:	stm	sp, {r4, ip}
   14990:	bl	184b0 <_start@@Base+0x33c4>
   14994:	movw	ip, #594	; 0x252
   14998:	mov	r1, sl
   1499c:	mov	r3, r4
   149a0:	mov	r2, r4
   149a4:	orr	r5, r5, r0
   149a8:	movw	r0, #20532	; 0x5034
   149ac:	movt	r0, #4
   149b0:	stm	sp, {r4, ip}
   149b4:	bl	184b0 <_start@@Base+0x33c4>
   149b8:	movw	ip, #597	; 0x255
   149bc:	mov	r3, r4
   149c0:	mov	r2, r4
   149c4:	mov	r1, r8
   149c8:	orr	r5, r5, r0
   149cc:	movw	r0, #20572	; 0x505c
   149d0:	movt	r0, #4
   149d4:	stm	sp, {r4, ip}
   149d8:	bl	184b0 <_start@@Base+0x33c4>
   149dc:	movw	ip, #601	; 0x259
   149e0:	mov	r3, r4
   149e4:	mov	r2, r4
   149e8:	mov	r1, r7
   149ec:	orr	r5, r5, r0
   149f0:	movw	r0, #20620	; 0x508c
   149f4:	movt	r0, #4
   149f8:	stm	sp, {r4, ip}
   149fc:	bl	184b0 <_start@@Base+0x33c4>
   14a00:	mov	ip, #604	; 0x25c
   14a04:	mov	r3, r4
   14a08:	mov	r2, r4
   14a0c:	mov	r1, r9
   14a10:	orr	r5, r5, r0
   14a14:	movw	r0, #20656	; 0x50b0
   14a18:	movt	r0, #4
   14a1c:	stm	sp, {r4, ip}
   14a20:	bl	184b0 <_start@@Base+0x33c4>
   14a24:	movw	ip, #607	; 0x25f
   14a28:	mov	r3, r4
   14a2c:	ldr	r1, [sp, #12]
   14a30:	mov	r2, r4
   14a34:	orr	r5, r5, r0
   14a38:	movw	r0, #20732	; 0x50fc
   14a3c:	movt	r0, #4
   14a40:	stm	sp, {r4, ip}
   14a44:	bl	184b0 <_start@@Base+0x33c4>
   14a48:	movw	ip, #610	; 0x262
   14a4c:	mov	r3, r4
   14a50:	mov	r2, r4
   14a54:	mov	r1, r8
   14a58:	orr	r5, r5, r0
   14a5c:	movw	r0, #20768	; 0x5120
   14a60:	movt	r0, #4
   14a64:	stm	sp, {r4, ip}
   14a68:	bl	184b0 <_start@@Base+0x33c4>
   14a6c:	movw	ip, #613	; 0x265
   14a70:	mov	r3, r4
   14a74:	ldr	r1, [sp, #16]
   14a78:	mov	r2, r4
   14a7c:	orr	r5, r5, r0
   14a80:	movw	r0, #20836	; 0x5164
   14a84:	movt	r0, #4
   14a88:	stm	sp, {r4, ip}
   14a8c:	bl	184b0 <_start@@Base+0x33c4>
   14a90:	mov	ip, #616	; 0x268
   14a94:	mov	r3, r4
   14a98:	ldr	r1, [sp, #20]
   14a9c:	mov	r2, r4
   14aa0:	orr	r5, r5, r0
   14aa4:	movw	r0, #20904	; 0x51a8
   14aa8:	movt	r0, #4
   14aac:	stm	sp, {r4, ip}
   14ab0:	bl	184b0 <_start@@Base+0x33c4>
   14ab4:	movw	ip, #619	; 0x26b
   14ab8:	mov	r3, r4
   14abc:	ldr	r1, [sp, #24]
   14ac0:	mov	r2, r4
   14ac4:	orr	r5, r5, r0
   14ac8:	movw	r0, #20972	; 0x51ec
   14acc:	movt	r0, #4
   14ad0:	stm	sp, {r4, ip}
   14ad4:	bl	184b0 <_start@@Base+0x33c4>
   14ad8:	movw	ip, #622	; 0x26e
   14adc:	mov	r3, r4
   14ae0:	mov	r2, r4
   14ae4:	mov	r1, r7
   14ae8:	orr	r5, r5, r0
   14aec:	movw	r0, #21008	; 0x5210
   14af0:	movt	r0, #4
   14af4:	stm	sp, {r4, ip}
   14af8:	bl	184b0 <_start@@Base+0x33c4>
   14afc:	movw	ip, #625	; 0x271
   14b00:	mov	r3, r4
   14b04:	mov	r2, r4
   14b08:	mov	r1, r7
   14b0c:	orr	r5, r5, r0
   14b10:	movw	r0, #21052	; 0x523c
   14b14:	movt	r0, #4
   14b18:	stm	sp, {r4, ip}
   14b1c:	bl	184b0 <_start@@Base+0x33c4>
   14b20:	ldr	sl, [sp, #8]
   14b24:	mov	ip, #628	; 0x274
   14b28:	mov	r3, r4
   14b2c:	mov	r2, r4
   14b30:	orr	r5, r5, r0
   14b34:	mov	r0, fp
   14b38:	stm	sp, {r4, ip}
   14b3c:	mov	r1, sl
   14b40:	bl	184b0 <_start@@Base+0x33c4>
   14b44:	movw	ip, #631	; 0x277
   14b48:	mov	r3, r4
   14b4c:	mov	r2, r4
   14b50:	mov	r1, sl
   14b54:	orr	r5, r5, r0
   14b58:	mov	r0, fp
   14b5c:	stm	sp, {r4, ip}
   14b60:	str	sl, [sp, #8]
   14b64:	movw	fp, #21504	; 0x5400
   14b68:	movt	fp, #4
   14b6c:	bl	184b0 <_start@@Base+0x33c4>
   14b70:	movw	ip, #634	; 0x27a
   14b74:	mov	r3, r4
   14b78:	ldr	r1, [sp, #28]
   14b7c:	mov	r2, r4
   14b80:	orr	r5, r5, r0
   14b84:	movw	r0, #21256	; 0x5308
   14b88:	movt	r0, #4
   14b8c:	stm	sp, {r4, ip}
   14b90:	bl	184b0 <_start@@Base+0x33c4>
   14b94:	movw	ip, #638	; 0x27e
   14b98:	mov	r3, r4
   14b9c:	ldr	r1, [sp, #32]
   14ba0:	mov	r2, r4
   14ba4:	orr	r5, r5, r0
   14ba8:	movw	r0, #21416	; 0x53a8
   14bac:	movt	r0, #4
   14bb0:	stm	sp, {r4, ip}
   14bb4:	bl	184b0 <_start@@Base+0x33c4>
   14bb8:	movw	ip, #642	; 0x282
   14bbc:	mov	sl, fp
   14bc0:	mov	r3, r4
   14bc4:	mov	r2, r4
   14bc8:	mov	r1, sl
   14bcc:	orr	r5, r5, r0
   14bd0:	stm	sp, {r4, ip}
   14bd4:	movw	r0, #21604	; 0x5464
   14bd8:	movt	r0, #4
   14bdc:	str	sl, [sp, #36]	; 0x24
   14be0:	bl	184b0 <_start@@Base+0x33c4>
   14be4:	movw	ip, #646	; 0x286
   14be8:	mov	r3, r4
   14bec:	mov	r2, r4
   14bf0:	mov	r1, r6
   14bf4:	orr	r5, r5, r0
   14bf8:	movw	r0, #21716	; 0x54d4
   14bfc:	movt	r0, #4
   14c00:	stm	sp, {r4, ip}
   14c04:	movw	fp, #22116	; 0x5664
   14c08:	movt	fp, #4
   14c0c:	movw	sl, #22472	; 0x57c8
   14c10:	movt	sl, #4
   14c14:	bl	184b0 <_start@@Base+0x33c4>
   14c18:	movw	ip, #649	; 0x289
   14c1c:	mov	r3, r4
   14c20:	mov	r2, r4
   14c24:	mov	r1, r6
   14c28:	orr	r5, r5, r0
   14c2c:	movw	r0, #21760	; 0x5500
   14c30:	movt	r0, #4
   14c34:	stm	sp, {r4, ip}
   14c38:	bl	184b0 <_start@@Base+0x33c4>
   14c3c:	movw	ip, #653	; 0x28d
   14c40:	mov	r3, r4
   14c44:	mov	r2, r4
   14c48:	mov	r1, r7
   14c4c:	orr	r5, r5, r0
   14c50:	movw	r0, #21800	; 0x5528
   14c54:	movt	r0, #4
   14c58:	stm	sp, {r4, ip}
   14c5c:	bl	184b0 <_start@@Base+0x33c4>
   14c60:	mov	ip, #656	; 0x290
   14c64:	mov	r1, r9
   14c68:	mov	r3, r4
   14c6c:	mov	r2, r4
   14c70:	orr	r5, r5, r0
   14c74:	movw	r0, #21832	; 0x5548
   14c78:	movt	r0, #4
   14c7c:	stm	sp, {r4, ip}
   14c80:	movw	r9, #22936	; 0x5998
   14c84:	movt	r9, #4
   14c88:	bl	184b0 <_start@@Base+0x33c4>
   14c8c:	movw	ip, #659	; 0x293
   14c90:	mov	r3, r4
   14c94:	ldr	r1, [sp, #12]
   14c98:	mov	r2, r4
   14c9c:	orr	r5, r5, r0
   14ca0:	movw	r0, #21864	; 0x5568
   14ca4:	movt	r0, #4
   14ca8:	stm	sp, {r4, ip}
   14cac:	bl	184b0 <_start@@Base+0x33c4>
   14cb0:	movw	ip, #662	; 0x296
   14cb4:	mov	r1, r8
   14cb8:	mov	r3, r4
   14cbc:	mov	r2, r4
   14cc0:	orr	r5, r5, r0
   14cc4:	movw	r0, #21896	; 0x5588
   14cc8:	movt	r0, #4
   14ccc:	stm	sp, {r4, ip}
   14cd0:	bl	184b0 <_start@@Base+0x33c4>
   14cd4:	movw	ip, #665	; 0x299
   14cd8:	mov	r3, r4
   14cdc:	ldr	r1, [sp, #16]
   14ce0:	mov	r2, r4
   14ce4:	orr	r5, r5, r0
   14ce8:	movw	r0, #21928	; 0x55a8
   14cec:	movt	r0, #4
   14cf0:	stm	sp, {r4, ip}
   14cf4:	bl	184b0 <_start@@Base+0x33c4>
   14cf8:	mov	ip, #668	; 0x29c
   14cfc:	mov	r3, r4
   14d00:	ldr	r1, [sp, #20]
   14d04:	mov	r2, r4
   14d08:	orr	r5, r5, r0
   14d0c:	movw	r0, #21960	; 0x55c8
   14d10:	movt	r0, #4
   14d14:	stm	sp, {r4, ip}
   14d18:	bl	184b0 <_start@@Base+0x33c4>
   14d1c:	movw	ip, #671	; 0x29f
   14d20:	mov	r3, r4
   14d24:	ldr	r1, [sp, #24]
   14d28:	mov	r2, r4
   14d2c:	orr	r5, r5, r0
   14d30:	movw	r0, #21992	; 0x55e8
   14d34:	movt	r0, #4
   14d38:	stm	sp, {r4, ip}
   14d3c:	bl	184b0 <_start@@Base+0x33c4>
   14d40:	movw	ip, #674	; 0x2a2
   14d44:	mov	r3, r4
   14d48:	mov	r2, r4
   14d4c:	mov	r1, r7
   14d50:	orr	r5, r5, r0
   14d54:	movw	r0, #22024	; 0x5608
   14d58:	movt	r0, #4
   14d5c:	stm	sp, {r4, ip}
   14d60:	bl	184b0 <_start@@Base+0x33c4>
   14d64:	movw	ip, #677	; 0x2a5
   14d68:	mov	r1, r7
   14d6c:	mov	r3, r4
   14d70:	mov	r2, r4
   14d74:	orr	r5, r5, r0
   14d78:	movw	r0, #22064	; 0x5630
   14d7c:	movt	r0, #4
   14d80:	stm	sp, {r4, ip}
   14d84:	bl	184b0 <_start@@Base+0x33c4>
   14d88:	ldr	r7, [sp, #8]
   14d8c:	mov	ip, #680	; 0x2a8
   14d90:	mov	r3, r4
   14d94:	mov	r2, r4
   14d98:	orr	r5, r5, r0
   14d9c:	mov	r0, fp
   14da0:	stm	sp, {r4, ip}
   14da4:	mov	r1, r7
   14da8:	bl	184b0 <_start@@Base+0x33c4>
   14dac:	movw	ip, #683	; 0x2ab
   14db0:	mov	r1, r7
   14db4:	mov	r3, r4
   14db8:	mov	r2, r4
   14dbc:	orr	r5, r5, r0
   14dc0:	mov	r0, fp
   14dc4:	stm	sp, {r4, ip}
   14dc8:	bl	184b0 <_start@@Base+0x33c4>
   14dcc:	movw	ip, #686	; 0x2ae
   14dd0:	mov	r3, r4
   14dd4:	ldr	r1, [sp, #28]
   14dd8:	mov	r2, r4
   14ddc:	orr	r5, r5, r0
   14de0:	movw	r0, #22152	; 0x5688
   14de4:	movt	r0, #4
   14de8:	stm	sp, {r4, ip}
   14dec:	bl	184b0 <_start@@Base+0x33c4>
   14df0:	movw	ip, #690	; 0x2b2
   14df4:	mov	r3, r4
   14df8:	ldr	r1, [sp, #32]
   14dfc:	mov	r2, r4
   14e00:	orr	r5, r5, r0
   14e04:	movw	r0, #22224	; 0x56d0
   14e08:	movt	r0, #4
   14e0c:	stm	sp, {r4, ip}
   14e10:	bl	184b0 <_start@@Base+0x33c4>
   14e14:	movw	ip, #694	; 0x2b6
   14e18:	mov	r3, r4
   14e1c:	ldr	r1, [sp, #36]	; 0x24
   14e20:	mov	r2, r4
   14e24:	orr	r5, r5, r0
   14e28:	movw	r0, #22300	; 0x571c
   14e2c:	movt	r0, #4
   14e30:	stm	sp, {r4, ip}
   14e34:	bl	184b0 <_start@@Base+0x33c4>
   14e38:	movw	ip, #698	; 0x2ba
   14e3c:	mov	r3, r4
   14e40:	mov	r2, r4
   14e44:	mov	r1, r6
   14e48:	orr	r5, r5, r0
   14e4c:	movw	r0, #22396	; 0x577c
   14e50:	movt	r0, #4
   14e54:	stm	sp, {r4, ip}
   14e58:	bl	184b0 <_start@@Base+0x33c4>
   14e5c:	movw	ip, #701	; 0x2bd
   14e60:	mov	r3, r4
   14e64:	mov	r2, r4
   14e68:	mov	r1, r6
   14e6c:	orr	r5, r5, r0
   14e70:	movw	r0, #22436	; 0x57a4
   14e74:	movt	r0, #4
   14e78:	stm	sp, {r4, ip}
   14e7c:	bl	184b0 <_start@@Base+0x33c4>
   14e80:	movw	ip, #711	; 0x2c7
   14e84:	mov	r3, r4
   14e88:	mov	r2, r4
   14e8c:	mov	r1, sl
   14e90:	orr	r5, r5, r0
   14e94:	movw	r0, #22568	; 0x5828
   14e98:	movt	r0, #4
   14e9c:	stm	sp, {r4, ip}
   14ea0:	bl	184b0 <_start@@Base+0x33c4>
   14ea4:	mov	ip, #716	; 0x2cc
   14ea8:	mov	r1, sl
   14eac:	mov	r3, r4
   14eb0:	mov	r2, r4
   14eb4:	orr	r5, r5, r0
   14eb8:	movw	r0, #22664	; 0x5888
   14ebc:	movt	r0, #4
   14ec0:	stm	sp, {r4, ip}
   14ec4:	bl	184b0 <_start@@Base+0x33c4>
   14ec8:	movw	ip, #731	; 0x2db
   14ecc:	mov	r3, r4
   14ed0:	mov	r2, r4
   14ed4:	orr	r5, r5, r0
   14ed8:	movw	r1, #22776	; 0x58f8
   14edc:	movt	r1, #4
   14ee0:	stm	sp, {r4, ip}
   14ee4:	movw	r0, #22824	; 0x5928
   14ee8:	movt	r0, #4
   14eec:	bl	184b0 <_start@@Base+0x33c4>
   14ef0:	movw	ip, #734	; 0x2de
   14ef4:	mov	r3, r4
   14ef8:	mov	r2, r4
   14efc:	orr	r5, r5, r0
   14f00:	movw	r1, #22888	; 0x5968
   14f04:	movt	r1, #4
   14f08:	stm	sp, {r4, ip}
   14f0c:	movw	r0, #22908	; 0x597c
   14f10:	movt	r0, #4
   14f14:	bl	184b0 <_start@@Base+0x33c4>
   14f18:	movw	ip, #738	; 0x2e2
   14f1c:	mov	r3, r4
   14f20:	mov	r2, r4
   14f24:	mov	r1, r9
   14f28:	orr	r5, r5, r0
   14f2c:	movw	r0, #23004	; 0x59dc
   14f30:	movt	r0, #4
   14f34:	stm	sp, {r4, ip}
   14f38:	bl	184b0 <_start@@Base+0x33c4>
   14f3c:	movw	ip, #750	; 0x2ee
   14f40:	mov	r1, r9
   14f44:	mov	r3, r4
   14f48:	mov	r2, r4
   14f4c:	orr	r5, r5, r0
   14f50:	movw	r0, #23076	; 0x5a24
   14f54:	movt	r0, #4
   14f58:	stm	sp, {r4, ip}
   14f5c:	bl	184b0 <_start@@Base+0x33c4>
   14f60:	movw	ip, #766	; 0x2fe
   14f64:	mov	r3, r4
   14f68:	mov	r2, r4
   14f6c:	orr	r5, r5, r0
   14f70:	movw	r1, #23236	; 0x5ac4
   14f74:	movt	r1, #4
   14f78:	stm	sp, {r4, ip}
   14f7c:	movw	r0, #23272	; 0x5ae8
   14f80:	movt	r0, #4
   14f84:	bl	184b0 <_start@@Base+0x33c4>
   14f88:	movw	ip, #770	; 0x302
   14f8c:	mov	r3, r4
   14f90:	mov	r2, r4
   14f94:	orr	r5, r5, r0
   14f98:	movw	r1, #23312	; 0x5b10
   14f9c:	movt	r1, #4
   14fa0:	stm	sp, {r4, ip}
   14fa4:	movw	r0, #23356	; 0x5b3c
   14fa8:	movt	r0, #4
   14fac:	bl	184b0 <_start@@Base+0x33c4>
   14fb0:	mov	ip, #776	; 0x308
   14fb4:	mov	r3, r4
   14fb8:	mov	r2, r4
   14fbc:	orr	r5, r5, r0
   14fc0:	movw	r1, #23404	; 0x5b6c
   14fc4:	movt	r1, #4
   14fc8:	stm	sp, {r4, ip}
   14fcc:	movw	r0, #23516	; 0x5bdc
   14fd0:	movt	r0, #4
   14fd4:	bl	184b0 <_start@@Base+0x33c4>
   14fd8:	movw	ip, #781	; 0x30d
   14fdc:	mov	r1, r6
   14fe0:	mov	r3, r4
   14fe4:	mov	r2, r4
   14fe8:	orr	r5, r5, r0
   14fec:	movw	r0, #23640	; 0x5c58
   14ff0:	movt	r0, #4
   14ff4:	stm	sp, {r4, ip}
   14ff8:	bl	184b0 <_start@@Base+0x33c4>
   14ffc:	movw	ip, #786	; 0x312
   15000:	mov	r3, r4
   15004:	mov	r2, r4
   15008:	orr	r5, r5, r0
   1500c:	movw	r1, #23760	; 0x5cd0
   15010:	movt	r1, #4
   15014:	stm	sp, {r4, ip}
   15018:	movw	r0, #23872	; 0x5d40
   1501c:	movt	r0, #4
   15020:	bl	184b0 <_start@@Base+0x33c4>
   15024:	movw	ip, #791	; 0x317
   15028:	mov	r3, r4
   1502c:	mov	r2, r4
   15030:	orr	r5, r5, r0
   15034:	movw	r1, #23996	; 0x5dbc
   15038:	movt	r1, #4
   1503c:	stm	sp, {r4, ip}
   15040:	movw	r0, #24124	; 0x5e3c
   15044:	movt	r0, #4
   15048:	bl	184b0 <_start@@Base+0x33c4>
   1504c:	mov	ip, #796	; 0x31c
   15050:	mov	r3, r4
   15054:	mov	r2, r4
   15058:	orr	r5, r5, r0
   1505c:	movw	r1, #24264	; 0x5ec8
   15060:	movt	r1, #4
   15064:	stm	sp, {r4, ip}
   15068:	movw	r0, #24376	; 0x5f38
   1506c:	movt	r0, #4
   15070:	bl	184b0 <_start@@Base+0x33c4>
   15074:	movw	ip, #801	; 0x321
   15078:	mov	r3, r4
   1507c:	mov	r2, r4
   15080:	orr	r5, r5, r0
   15084:	movw	r1, #24500	; 0x5fb4
   15088:	movt	r1, #4
   1508c:	stm	sp, {r4, ip}
   15090:	movw	r0, #24628	; 0x6034
   15094:	movt	r0, #4
   15098:	bl	184b0 <_start@@Base+0x33c4>
   1509c:	movw	ip, #806	; 0x326
   150a0:	orr	r5, r5, r0
   150a4:	mov	r3, r4
   150a8:	mov	r2, r4
   150ac:	movw	r1, #24768	; 0x60c0
   150b0:	movt	r1, #4
   150b4:	stm	sp, {r4, ip}
   150b8:	movw	r0, #24900	; 0x6144
   150bc:	movt	r0, #4
   150c0:	bl	184b0 <_start@@Base+0x33c4>
   150c4:	orrs	r3, r5, r0
   150c8:	mvnne	r0, #0
   150cc:	moveq	r0, r4
   150d0:	add	sp, sp, #44	; 0x2c
   150d4:	ldrd	r4, [sp]
   150d8:	ldrd	r6, [sp, #8]
   150dc:	ldrd	r8, [sp, #16]
   150e0:	ldrd	sl, [sp, #24]
   150e4:	add	sp, sp, #32
   150e8:	pop	{pc}		; (ldr pc, [sp], #4)

000150ec <_start@@Base>:
   150ec:	mov	fp, #0
   150f0:	mov	lr, #0
   150f4:	pop	{r1}		; (ldr r1, [sp], #4)
   150f8:	mov	r2, sp
   150fc:	push	{r2}		; (str r2, [sp, #-4]!)
   15100:	push	{r0}		; (str r0, [sp, #-4]!)
   15104:	ldr	ip, [pc, #16]	; 1511c <_start@@Base+0x30>
   15108:	push	{ip}		; (str ip, [sp, #-4]!)
   1510c:	ldr	r0, [pc, #12]	; 15120 <_start@@Base+0x34>
   15110:	ldr	r3, [pc, #12]	; 15124 <_start@@Base+0x38>
   15114:	bl	14560 <__libc_start_main@plt>
   15118:	bl	145e4 <abort@plt>
   1511c:	andeq	r2, r4, r4, lsl r4
   15120:	andeq	r4, r1, r0, lsl #12
   15124:			; <UNDEFINED> instruction: 0x000423b4
   15128:	ldr	r3, [pc, #20]	; 15144 <_start@@Base+0x58>
   1512c:	ldr	r2, [pc, #20]	; 15148 <_start@@Base+0x5c>
   15130:	add	r3, pc, r3
   15134:	ldr	r2, [r3, r2]
   15138:	cmp	r2, #0
   1513c:	bxeq	lr
   15140:	b	1456c <__gmon_start__@plt>
   15144:	andeq	r3, r4, r8, asr #29
   15148:	andeq	r0, r0, r4, rrx
   1514c:	ldr	r0, [pc, #24]	; 1516c <_start@@Base+0x80>
   15150:	ldr	r3, [pc, #24]	; 15170 <_start@@Base+0x84>
   15154:	cmp	r3, r0
   15158:	bxeq	lr
   1515c:	ldr	r3, [pc, #16]	; 15174 <_start@@Base+0x88>
   15160:	cmp	r3, #0
   15164:	bxeq	lr
   15168:	bx	r3
   1516c:			; <UNDEFINED> instruction: 0x000593b0
   15170:			; <UNDEFINED> instruction: 0x000593b0
   15174:	andeq	r0, r0, r0
   15178:	ldr	r0, [pc, #36]	; 151a4 <_start@@Base+0xb8>
   1517c:	ldr	r1, [pc, #36]	; 151a8 <_start@@Base+0xbc>
   15180:	sub	r1, r1, r0
   15184:	asr	r1, r1, #2
   15188:	add	r1, r1, r1, lsr #31
   1518c:	asrs	r1, r1, #1
   15190:	bxeq	lr
   15194:	ldr	r3, [pc, #16]	; 151ac <_start@@Base+0xc0>
   15198:	cmp	r3, #0
   1519c:	bxeq	lr
   151a0:	bx	r3
   151a4:			; <UNDEFINED> instruction: 0x000593b0
   151a8:			; <UNDEFINED> instruction: 0x000593b0
   151ac:	andeq	r0, r0, r0
   151b0:	push	{r4, lr}
   151b4:	ldr	r4, [pc, #24]	; 151d4 <_start@@Base+0xe8>
   151b8:	ldrb	r3, [r4]
   151bc:	cmp	r3, #0
   151c0:	popne	{r4, pc}
   151c4:	bl	1514c <_start@@Base+0x60>
   151c8:	mov	r3, #1
   151cc:	strb	r3, [r4]
   151d0:	pop	{r4, pc}
   151d4:			; <UNDEFINED> instruction: 0x000593b8
   151d8:	b	15178 <_start@@Base+0x8c>
   151dc:	andeq	r0, r0, r0
   151e0:	sub	r1, r1, r0
   151e4:	strd	r4, [sp, #-8]!
   151e8:	cmp	r1, #8
   151ec:	bhi	15220 <_start@@Base+0x134>
   151f0:	sub	r1, r1, #1
   151f4:	cmp	r1, #7
   151f8:	ldrls	pc, [pc, r1, lsl #2]
   151fc:	b	152c8 <_start@@Base+0x1dc>
   15200:	andeq	r5, r1, r0, lsl #5
   15204:	andeq	r5, r1, ip, lsl #5
   15208:	muleq	r1, r8, r2
   1520c:	andeq	r5, r1, r4, lsr #5
   15210:			; <UNDEFINED> instruction: 0x000152b0
   15214:			; <UNDEFINED> instruction: 0x000152bc
   15218:	andeq	r5, r1, r4, ror r2
   1521c:	andeq	r5, r1, r0, lsr #4
   15220:	ldrb	r2, [r0, #7]
   15224:	mov	r3, #0
   15228:	mov	r1, r3
   1522c:	ldrb	r4, [r0, #6]
   15230:	orr	r2, r2, r4, lsl #8
   15234:	ldrb	r4, [r0, #5]
   15238:	orr	r2, r2, r4, lsl #16
   1523c:	ldrb	r4, [r0, #4]
   15240:	orr	r2, r2, r4, lsl #24
   15244:	ldrb	r4, [r0, #3]
   15248:	orr	r1, r1, r4
   1524c:	ldrb	r4, [r0, #2]
   15250:	orr	r1, r1, r4, lsl #8
   15254:	ldrb	r4, [r0, #1]
   15258:	orr	r1, r1, r4, lsl #16
   1525c:	ldrb	r4, [r0]
   15260:	mov	r0, r2
   15264:	orr	r1, r1, r4, lsl #24
   15268:	ldrd	r4, [sp]
   1526c:	add	sp, sp, #8
   15270:	bx	lr
   15274:	mov	r2, #0
   15278:	mov	r3, #0
   1527c:	b	15228 <_start@@Base+0x13c>
   15280:	mov	r2, #0
   15284:	mov	r1, r2
   15288:	b	1525c <_start@@Base+0x170>
   1528c:	mov	r2, #0
   15290:	mov	r1, r2
   15294:	b	15254 <_start@@Base+0x168>
   15298:	mov	r2, #0
   1529c:	mov	r1, r2
   152a0:	b	1524c <_start@@Base+0x160>
   152a4:	mov	r2, #0
   152a8:	mov	r1, r2
   152ac:	b	15244 <_start@@Base+0x158>
   152b0:	mov	r2, #0
   152b4:	mov	r1, r2
   152b8:	b	1523c <_start@@Base+0x150>
   152bc:	mov	r2, #0
   152c0:	mov	r1, r2
   152c4:	b	15234 <_start@@Base+0x148>
   152c8:	mov	r0, #0
   152cc:	mov	r1, r0
   152d0:	b	15268 <_start@@Base+0x17c>
   152d4:	cmp	r0, #4
   152d8:	movhi	r0, #0
   152dc:	movls	r0, #1
   152e0:	bx	lr
   152e4:	cmp	r0, #11
   152e8:	bhi	1530c <_start@@Base+0x220>
   152ec:	cmp	r0, #8
   152f0:	bcs	1531c <_start@@Base+0x230>
   152f4:	cmp	r0, #0
   152f8:	beq	1531c <_start@@Base+0x230>
   152fc:	sub	r0, r0, #2
   15300:	clz	r0, r0
   15304:	lsr	r0, r0, #5
   15308:	bx	lr
   1530c:	sub	r0, r0, #255	; 0xff
   15310:	clz	r0, r0
   15314:	lsr	r0, r0, #5
   15318:	bx	lr
   1531c:	mov	r0, #1
   15320:	bx	lr
   15324:	bx	lr
   15328:	mov	r0, #0
   1532c:	bx	lr
   15330:	mov	r3, #4
   15334:	mov	r1, #0
   15338:	mov	r2, r3
   1533c:	b	2b61c <flatcc_verify_field@@Base>
   15340:	movw	ip, #21756	; 0x54fc
   15344:	movt	ip, #1
   15348:	strd	r4, [sp, #-16]!
   1534c:	str	r6, [sp, #8]
   15350:	mov	r2, #0
   15354:	movw	r3, #9284	; 0x2444
   15358:	movt	r3, #4
   1535c:	str	lr, [sp, #12]
   15360:	sub	sp, sp, #8
   15364:	mov	lr, #21
   15368:	mov	r4, r0
   1536c:	mov	r5, r1
   15370:	mov	r6, #22
   15374:	str	lr, [sp]
   15378:	str	ip, [sp, #4]
   1537c:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15380:	movw	r2, #21640	; 0x5488
   15384:	movt	r2, #1
   15388:	str	r6, [sp]
   1538c:	mov	r1, r5
   15390:	mov	r0, r4
   15394:	movw	r3, #9308	; 0x245c
   15398:	movt	r3, #4
   1539c:	str	r2, [sp, #4]
   153a0:	mov	r2, #1
   153a4:	bl	40404 <flatcc_json_printer_table_field@@Base>
   153a8:	movw	r2, #21524	; 0x5414
   153ac:	movt	r2, #1
   153b0:	str	r6, [sp]
   153b4:	mov	r1, r5
   153b8:	mov	r0, r4
   153bc:	movw	r3, #9332	; 0x2474
   153c0:	movt	r3, #4
   153c4:	str	r2, [sp, #4]
   153c8:	mov	r2, #2
   153cc:	bl	40404 <flatcc_json_printer_table_field@@Base>
   153d0:	add	sp, sp, #8
   153d4:	ldrd	r4, [sp]
   153d8:	ldr	r6, [sp, #8]
   153dc:	add	sp, sp, #12
   153e0:	pop	{pc}		; (ldr pc, [sp], #4)
   153e4:	mov	ip, #0
   153e8:	push	{lr}		; (str lr, [sp, #-4]!)
   153ec:	mov	lr, #19
   153f0:	sub	sp, sp, #12
   153f4:	mov	r2, ip
   153f8:	movw	r3, #9356	; 0x248c
   153fc:	movt	r3, #4
   15400:	str	lr, [sp]
   15404:	str	ip, [sp, #4]
   15408:	bl	375ec <flatcc_json_printer_int32_field@@Base>
   1540c:	add	sp, sp, #12
   15410:	pop	{pc}		; (ldr pc, [sp], #4)
   15414:	mov	r2, #15
   15418:	strd	r4, [sp, #-20]!	; 0xffffffec
   1541c:	movw	r3, #9376	; 0x24a0
   15420:	movt	r3, #4
   15424:	strd	r6, [sp, #8]
   15428:	mov	r6, #0
   1542c:	mov	r7, #0
   15430:	str	lr, [sp, #16]
   15434:	sub	sp, sp, #20
   15438:	mov	r4, r0
   1543c:	mov	r5, r1
   15440:	str	r2, [sp]
   15444:	mov	r2, #0
   15448:	strd	r6, [sp, #8]
   1544c:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   15450:	mov	ip, #0
   15454:	mov	r2, #21
   15458:	mov	r1, r5
   1545c:	mov	r0, r4
   15460:	movw	r3, #9392	; 0x24b0
   15464:	movt	r3, #4
   15468:	stm	sp, {r2, ip}
   1546c:	mov	r2, #1
   15470:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   15474:	add	sp, sp, #20
   15478:	ldrd	r4, [sp]
   1547c:	ldrd	r6, [sp, #8]
   15480:	add	sp, sp, #16
   15484:	pop	{pc}		; (ldr pc, [sp], #4)
   15488:	mov	r2, #15
   1548c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15490:	movw	r3, #9376	; 0x24a0
   15494:	movt	r3, #4
   15498:	strd	r6, [sp, #8]
   1549c:	mov	r6, #0
   154a0:	mov	r7, #0
   154a4:	str	lr, [sp, #16]
   154a8:	sub	sp, sp, #20
   154ac:	mov	r4, r0
   154b0:	mov	r5, r1
   154b4:	str	r2, [sp]
   154b8:	mov	r2, #0
   154bc:	strd	r6, [sp, #8]
   154c0:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   154c4:	mov	ip, #0
   154c8:	mov	r2, #16
   154cc:	mov	r1, r5
   154d0:	mov	r0, r4
   154d4:	movw	r3, #9416	; 0x24c8
   154d8:	movt	r3, #4
   154dc:	stm	sp, {r2, ip}
   154e0:	mov	r2, #1
   154e4:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   154e8:	add	sp, sp, #20
   154ec:	ldrd	r4, [sp]
   154f0:	ldrd	r6, [sp, #8]
   154f4:	add	sp, sp, #16
   154f8:	pop	{pc}		; (ldr pc, [sp], #4)
   154fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15500:	movw	r3, #9436	; 0x24dc
   15504:	movt	r3, #4
   15508:	strd	r6, [sp, #8]
   1550c:	mov	r7, #4
   15510:	mov	r4, r0
   15514:	strd	r8, [sp, #16]
   15518:	mov	r5, r1
   1551c:	mov	r6, #8
   15520:	strd	sl, [sp, #24]
   15524:	mov	sl, #0
   15528:	mov	fp, #9
   1552c:	str	lr, [sp, #32]
   15530:	sub	sp, sp, #20
   15534:	mov	r2, sl
   15538:	mov	r8, #0
   1553c:	mov	r9, #0
   15540:	str	r7, [sp]
   15544:	bl	3611c <flatcc_json_printer_string_field@@Base>
   15548:	mov	r1, r5
   1554c:	mov	r0, r4
   15550:	str	fp, [sp]
   15554:	mov	r2, #1
   15558:	movw	r3, #9444	; 0x24e4
   1555c:	movt	r3, #4
   15560:	str	sl, [sp, #4]
   15564:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   15568:	mov	r1, r5
   1556c:	mov	r0, r4
   15570:	str	r7, [sp]
   15574:	mov	r2, #2
   15578:	movw	r3, #9456	; 0x24f0
   1557c:	movt	r3, #4
   15580:	bl	3611c <flatcc_json_printer_string_field@@Base>
   15584:	mov	r1, r5
   15588:	mov	r0, r4
   1558c:	str	r6, [sp]
   15590:	mov	r2, #3
   15594:	movw	r3, #9464	; 0x24f8
   15598:	movt	r3, #4
   1559c:	strd	r8, [sp, #8]
   155a0:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   155a4:	mov	r2, r7
   155a8:	mov	r1, r5
   155ac:	str	r7, [sp]
   155b0:	mov	r0, r4
   155b4:	movw	r3, #9476	; 0x2504
   155b8:	movt	r3, #4
   155bc:	bl	3611c <flatcc_json_printer_string_field@@Base>
   155c0:	mov	r1, r5
   155c4:	mov	r0, r4
   155c8:	str	r6, [sp]
   155cc:	mov	r2, #5
   155d0:	movw	r3, #9484	; 0x250c
   155d4:	movt	r3, #4
   155d8:	strd	r8, [sp, #8]
   155dc:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   155e0:	mov	r1, r5
   155e4:	mov	r0, r4
   155e8:	str	fp, [sp]
   155ec:	mov	r2, #6
   155f0:	movw	r3, #9496	; 0x2518
   155f4:	movt	r3, #4
   155f8:	str	sl, [sp, #4]
   155fc:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   15600:	mov	r1, r5
   15604:	mov	r0, r4
   15608:	str	r6, [sp]
   1560c:	mov	r2, #7
   15610:	movw	r3, #9508	; 0x2524
   15614:	movt	r3, #4
   15618:	strd	r8, [sp, #8]
   1561c:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   15620:	mov	r2, r6
   15624:	mov	r1, r5
   15628:	str	fp, [sp]
   1562c:	mov	r0, r4
   15630:	movw	r3, #9520	; 0x2530
   15634:	movt	r3, #4
   15638:	str	sl, [sp, #4]
   1563c:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   15640:	add	sp, sp, #20
   15644:	ldrd	r4, [sp]
   15648:	ldrd	r6, [sp, #8]
   1564c:	ldrd	r8, [sp, #16]
   15650:	ldrd	sl, [sp, #24]
   15654:	add	sp, sp, #32
   15658:	pop	{pc}		; (ldr pc, [sp], #4)
   1565c:	movw	ip, #25244	; 0x629c
   15660:	movt	ip, #1
   15664:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15668:	strd	r6, [sp, #8]
   1566c:	mov	r2, #0
   15670:	movw	r3, #9532	; 0x253c
   15674:	movt	r3, #4
   15678:	strd	r8, [sp, #16]
   1567c:	mov	r8, #3
   15680:	strd	sl, [sp, #24]
   15684:	mov	r4, r0
   15688:	mov	r5, r1
   1568c:	str	lr, [sp, #32]
   15690:	sub	sp, sp, #28
   15694:	mov	r7, #4
   15698:	mov	fp, #9
   1569c:	mov	r6, #17
   156a0:	stm	sp, {r8, ip}
   156a4:	movw	sl, #22108	; 0x565c
   156a8:	movt	sl, #1
   156ac:	bl	40dec <flatcc_json_printer_struct_field@@Base>
   156b0:	mov	ip, #150	; 0x96
   156b4:	mov	r1, r5
   156b8:	mov	r0, r4
   156bc:	mov	r2, #1
   156c0:	movw	r3, #9536	; 0x2540
   156c4:	movt	r3, #4
   156c8:	stm	sp, {r7, ip}
   156cc:	bl	373c4 <flatcc_json_printer_int16_field@@Base>
   156d0:	mov	lr, #100	; 0x64
   156d4:	mov	ip, #2
   156d8:	mov	r2, ip
   156dc:	mov	r1, r5
   156e0:	stm	sp, {ip, lr}
   156e4:	movw	ip, #23804	; 0x5cfc
   156e8:	movt	ip, #1
   156ec:	mov	r0, r4
   156f0:	movw	r3, #9544	; 0x2548
   156f4:	movt	r3, #4
   156f8:	str	ip, [sp, #20]
   156fc:	mov	r9, #0
   15700:	bl	373c4 <flatcc_json_printer_int16_field@@Base>
   15704:	mov	r2, r8
   15708:	mov	r1, r5
   1570c:	str	r7, [sp]
   15710:	mov	r0, r4
   15714:	movw	r3, #9548	; 0x254c
   15718:	movt	r3, #4
   1571c:	mov	r8, #16
   15720:	bl	3611c <flatcc_json_printer_string_field@@Base>
   15724:	mov	r1, r5
   15728:	mov	r0, r4
   1572c:	str	fp, [sp]
   15730:	mov	r2, #5
   15734:	movw	r3, #9556	; 0x2554
   15738:	movt	r3, #4
   1573c:	bl	3bcd4 <flatcc_json_printer_uint8_vector_field@@Base>
   15740:	mov	lr, #8
   15744:	mov	r3, #5
   15748:	movw	r2, #24988	; 0x619c
   1574c:	movt	r2, #1
   15750:	mov	r1, r5
   15754:	mov	r0, r4
   15758:	stm	sp, {r3, lr}
   1575c:	movw	r3, #9568	; 0x2560
   15760:	movt	r3, #4
   15764:	str	r2, [sp, #8]
   15768:	mov	r2, #6
   1576c:	bl	389c4 <flatcc_json_printer_int8_enum_field@@Base>
   15770:	movw	r0, #23920	; 0x5d70
   15774:	movt	r0, #1
   15778:	str	r7, [sp]
   1577c:	movw	r3, #31204	; 0x79e4
   15780:	movt	r3, #1
   15784:	mov	r1, r5
   15788:	mov	r2, #8
   1578c:	str	r3, [sp, #4]
   15790:	movw	r3, #9576	; 0x2568
   15794:	movt	r3, #4
   15798:	str	r0, [sp, #8]
   1579c:	mov	r0, r4
   157a0:	bl	406d0 <flatcc_json_printer_union_field@@Base>
   157a4:	ldr	ip, [sp, #20]
   157a8:	mov	r3, #5
   157ac:	mov	r2, fp
   157b0:	mov	r1, r5
   157b4:	mov	r0, r4
   157b8:	stm	sp, {r3, r7, ip}
   157bc:	movw	r3, #9584	; 0x2570
   157c0:	movt	r3, #4
   157c4:	bl	3f598 <flatcc_json_printer_struct_vector_field@@Base>
   157c8:	mov	r1, r5
   157cc:	mov	r0, r4
   157d0:	str	r6, [sp]
   157d4:	mov	r2, #10
   157d8:	movw	r3, #9592	; 0x2578
   157dc:	movt	r3, #4
   157e0:	bl	3f924 <flatcc_json_printer_string_vector_field@@Base>
   157e4:	mov	r1, r5
   157e8:	mov	r0, r4
   157ec:	stm	sp, {r6, sl}
   157f0:	mov	r2, #11
   157f4:	movw	r3, #9612	; 0x258c
   157f8:	movt	r3, #4
   157fc:	bl	3fbf4 <flatcc_json_printer_table_vector_field@@Base>
   15800:	mov	r3, #5
   15804:	mov	r1, r5
   15808:	mov	r0, r4
   1580c:	mov	r2, #12
   15810:	stm	sp, {r3, sl}
   15814:	movw	r3, #9632	; 0x25a0
   15818:	movt	r3, #4
   1581c:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15820:	mov	r2, #20
   15824:	mov	r1, r5
   15828:	mov	r0, r4
   1582c:	movw	r3, #9640	; 0x25a8
   15830:	movt	r3, #4
   15834:	stm	sp, {r2, r9, sl}
   15838:	mov	r2, #13
   1583c:	mov	sl, #0
   15840:	bl	4165c <flatcc_json_printer_table_as_nested_root@@Base>
   15844:	movw	r2, #23644	; 0x5c5c
   15848:	movt	r2, #1
   1584c:	str	fp, [sp]
   15850:	mov	r1, r5
   15854:	mov	r0, r4
   15858:	movw	r3, #9664	; 0x25c0
   1585c:	movt	r3, #4
   15860:	str	r2, [sp, #4]
   15864:	mov	r2, #14
   15868:	mov	fp, #0
   1586c:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15870:	mov	lr, #8
   15874:	mov	r2, #1
   15878:	mov	r1, r5
   1587c:	mov	r0, r4
   15880:	movw	r3, #9676	; 0x25cc
   15884:	movt	r3, #4
   15888:	str	lr, [sp]
   1588c:	str	r2, [sp, #4]
   15890:	mov	r2, #15
   15894:	bl	37a4c <flatcc_json_printer_bool_field@@Base>
   15898:	mov	r1, r5
   1589c:	mov	r0, r4
   158a0:	strd	r8, [sp]
   158a4:	mov	r2, r8
   158a8:	movw	r3, #9688	; 0x25d8
   158ac:	movt	r3, #4
   158b0:	bl	375ec <flatcc_json_printer_int32_field@@Base>
   158b4:	mov	r2, r6
   158b8:	mov	r1, r5
   158bc:	strd	r8, [sp]
   158c0:	mov	r0, r4
   158c4:	movw	r3, #9708	; 0x25ec
   158c8:	movt	r3, #4
   158cc:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   158d0:	mov	r1, r5
   158d4:	mov	r0, r4
   158d8:	str	r8, [sp]
   158dc:	mov	r2, #18
   158e0:	movw	r3, #9728	; 0x2600
   158e4:	movt	r3, #4
   158e8:	strd	sl, [sp, #8]
   158ec:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   158f0:	mov	r1, r5
   158f4:	mov	r0, r4
   158f8:	str	r8, [sp]
   158fc:	mov	r2, #19
   15900:	movw	r3, #9748	; 0x2614
   15904:	movt	r3, #4
   15908:	strd	sl, [sp, #8]
   1590c:	bl	36ee8 <flatcc_json_printer_uint64_field@@Base>
   15910:	mov	r1, r5
   15914:	mov	r0, r4
   15918:	stm	sp, {r6, r9}
   1591c:	mov	r2, #20
   15920:	movw	r3, #9768	; 0x2628
   15924:	movt	r3, #4
   15928:	bl	375ec <flatcc_json_printer_int32_field@@Base>
   1592c:	mov	r1, r5
   15930:	mov	r0, r4
   15934:	stm	sp, {r6, r9}
   15938:	mov	r2, #21
   1593c:	movw	r3, #9788	; 0x263c
   15940:	movt	r3, #4
   15944:	bl	36ce4 <flatcc_json_printer_uint32_field@@Base>
   15948:	mov	r1, r5
   1594c:	mov	r0, r4
   15950:	str	r6, [sp]
   15954:	mov	r2, #22
   15958:	movw	r3, #9808	; 0x2650
   1595c:	movt	r3, #4
   15960:	strd	sl, [sp, #8]
   15964:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   15968:	mov	r1, r5
   1596c:	mov	r0, r4
   15970:	str	r6, [sp]
   15974:	mov	r2, #23
   15978:	movw	r3, #9828	; 0x2664
   1597c:	movt	r3, #4
   15980:	strd	sl, [sp, #8]
   15984:	bl	36ee8 <flatcc_json_printer_uint64_field@@Base>
   15988:	str	r8, [sp]
   1598c:	mov	r8, #5
   15990:	mov	r1, r5
   15994:	mov	r0, r4
   15998:	mov	r2, #24
   1599c:	movw	r3, #9848	; 0x2678
   159a0:	movt	r3, #4
   159a4:	bl	3d578 <flatcc_json_printer_bool_vector_field@@Base>
   159a8:	mov	r1, r5
   159ac:	mov	r0, r4
   159b0:	vldr	s0, [pc, #412]	; 15b54 <_start@@Base+0xa68>
   159b4:	mov	r2, #25
   159b8:	movw	r3, #9868	; 0x268c
   159bc:	movt	r3, #4
   159c0:	str	r8, [sp]
   159c4:	bl	37c98 <flatcc_json_printer_float_field@@Base>
   159c8:	mov	r2, #6
   159cc:	mov	r1, r5
   159d0:	vldr	s0, [pc, #384]	; 15b58 <_start@@Base+0xa6c>
   159d4:	mov	r9, r2
   159d8:	mov	r0, r4
   159dc:	movw	r3, #9876	; 0x2694
   159e0:	movt	r3, #4
   159e4:	str	r2, [sp]
   159e8:	mov	r2, #26
   159ec:	bl	37c98 <flatcc_json_printer_float_field@@Base>
   159f0:	vldr	s0, [pc, #356]	; 15b5c <_start@@Base+0xa70>
   159f4:	mov	r1, r5
   159f8:	mov	r0, r4
   159fc:	mov	r2, #27
   15a00:	movw	r3, #9884	; 0x269c
   15a04:	movt	r3, #4
   15a08:	str	r9, [sp]
   15a0c:	bl	37c98 <flatcc_json_printer_float_field@@Base>
   15a10:	mov	ip, #18
   15a14:	mov	r1, r5
   15a18:	mov	r0, r4
   15a1c:	mov	r2, #28
   15a20:	movw	r3, #9892	; 0x26a4
   15a24:	movt	r3, #4
   15a28:	str	ip, [sp]
   15a2c:	bl	3f924 <flatcc_json_printer_string_vector_field@@Base>
   15a30:	mov	lr, #8
   15a34:	movw	ip, #23540	; 0x5bf4
   15a38:	movt	ip, #1
   15a3c:	mov	r1, r5
   15a40:	str	lr, [sp, #4]
   15a44:	mov	lr, #23
   15a48:	mov	r0, r4
   15a4c:	mov	r2, #29
   15a50:	movw	r3, #9912	; 0x26b8
   15a54:	movt	r3, #4
   15a58:	str	lr, [sp]
   15a5c:	str	ip, [sp, #8]
   15a60:	bl	3f598 <flatcc_json_printer_struct_vector_field@@Base>
   15a64:	mov	r1, r5
   15a68:	mov	r0, r4
   15a6c:	str	r7, [sp]
   15a70:	mov	r2, #30
   15a74:	movw	r3, #9936	; 0x26d0
   15a78:	movt	r3, #4
   15a7c:	bl	3bcd4 <flatcc_json_printer_uint8_vector_field@@Base>
   15a80:	ldr	ip, [sp, #20]
   15a84:	mov	r1, r5
   15a88:	mov	r0, r4
   15a8c:	mov	r2, #31
   15a90:	movw	r3, #9944	; 0x26d8
   15a94:	movt	r3, #4
   15a98:	str	r8, [sp]
   15a9c:	stmib	sp, {r7, ip}
   15aa0:	bl	3f598 <flatcc_json_printer_struct_vector_field@@Base>
   15aa4:	mov	ip, #15
   15aa8:	mov	r1, r5
   15aac:	mov	r0, r4
   15ab0:	mov	r2, #32
   15ab4:	movw	r3, #9952	; 0x26e0
   15ab8:	movt	r3, #4
   15abc:	str	ip, [sp]
   15ac0:	bl	3d274 <flatcc_json_printer_int64_vector_field@@Base>
   15ac4:	mov	r1, r5
   15ac8:	mov	r0, r4
   15acc:	str	r6, [sp]
   15ad0:	mov	r2, #33	; 0x21
   15ad4:	movw	r3, #9968	; 0x26f0
   15ad8:	movt	r3, #4
   15adc:	bl	3db34 <flatcc_json_printer_double_vector_field@@Base>
   15ae0:	mov	lr, #21
   15ae4:	movw	ip, #21284	; 0x5324
   15ae8:	movt	ip, #1
   15aec:	mov	r1, r5
   15af0:	mov	r0, r4
   15af4:	mov	r2, #34	; 0x22
   15af8:	str	lr, [sp]
   15afc:	movw	r3, #9988	; 0x2704
   15b00:	movt	r3, #4
   15b04:	str	ip, [sp, #4]
   15b08:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15b0c:	mov	lr, #10
   15b10:	movw	ip, #23392	; 0x5b60
   15b14:	movt	ip, #1
   15b18:	mov	r1, r5
   15b1c:	mov	r0, r4
   15b20:	mov	r2, #35	; 0x23
   15b24:	str	lr, [sp]
   15b28:	movw	r3, #10012	; 0x271c
   15b2c:	movt	r3, #4
   15b30:	str	ip, [sp, #4]
   15b34:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15b38:	add	sp, sp, #28
   15b3c:	ldrd	r4, [sp]
   15b40:	ldrd	r6, [sp, #8]
   15b44:	ldrd	r8, [sp, #16]
   15b48:	ldrd	sl, [sp, #24]
   15b4c:	add	sp, sp, #32
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15b58:	submi	r0, r0, r0
   15b5c:	andeq	r0, r0, r0
   15b60:	mov	ip, #4
   15b64:	strd	r4, [sp, #-16]!
   15b68:	mov	r4, #0
   15b6c:	str	r6, [sp, #8]
   15b70:	mov	r2, r4
   15b74:	movw	r3, #10024	; 0x2728
   15b78:	movt	r3, #4
   15b7c:	str	lr, [sp, #12]
   15b80:	sub	sp, sp, #8
   15b84:	mov	r5, r0
   15b88:	mov	r6, r1
   15b8c:	str	ip, [sp]
   15b90:	str	r4, [sp, #4]
   15b94:	bl	36310 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b98:	mov	ip, #1
   15b9c:	mov	r3, #7
   15ba0:	mov	r1, r6
   15ba4:	mov	r0, r5
   15ba8:	mov	r2, ip
   15bac:	stm	sp, {r3, ip}
   15bb0:	movw	r3, #10032	; 0x2730
   15bb4:	movt	r3, #4
   15bb8:	bl	36310 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15bbc:	mov	ip, #6
   15bc0:	mov	r1, r6
   15bc4:	mov	r0, r5
   15bc8:	mov	r2, #2
   15bcc:	movw	r3, #10040	; 0x2738
   15bd0:	movt	r3, #4
   15bd4:	str	ip, [sp]
   15bd8:	str	r4, [sp, #4]
   15bdc:	bl	36310 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15be0:	add	sp, sp, #8
   15be4:	ldrd	r4, [sp]
   15be8:	ldr	r6, [sp, #8]
   15bec:	add	sp, sp, #12
   15bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf4:	movw	ip, #10048	; 0x2740
   15bf8:	movt	ip, #4
   15bfc:	strd	r4, [sp, #-12]!
   15c00:	str	lr, [sp, #8]
   15c04:	sub	sp, sp, #12
   15c08:	mov	lr, #2
   15c0c:	mov	r3, #0
   15c10:	mov	r4, r1
   15c14:	mov	r2, r1
   15c18:	mov	r1, r3
   15c1c:	stm	sp, {ip, lr}
   15c20:	mov	r5, r0
   15c24:	bl	39a68 <flatcc_json_printer_uint32_struct_field@@Base>
   15c28:	mov	ip, #8
   15c2c:	movw	r1, #10052	; 0x2744
   15c30:	movt	r1, #4
   15c34:	mov	r2, r4
   15c38:	mov	r0, r5
   15c3c:	mov	r3, #4
   15c40:	stm	sp, {r1, ip}
   15c44:	mov	r1, #1
   15c48:	bl	39a68 <flatcc_json_printer_uint32_struct_field@@Base>
   15c4c:	add	sp, sp, #12
   15c50:	ldrd	r4, [sp]
   15c54:	add	sp, sp, #8
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c60:	mov	r2, #0
   15c64:	movw	r3, #10048	; 0x2740
   15c68:	movt	r3, #4
   15c6c:	str	r6, [sp, #8]
   15c70:	mov	r6, #2
   15c74:	strd	r8, [sp, #12]
   15c78:	mov	r4, r0
   15c7c:	mov	r5, r1
   15c80:	str	lr, [sp, #20]
   15c84:	sub	sp, sp, #16
   15c88:	mov	r8, #0
   15c8c:	mov	r9, #0
   15c90:	str	r6, [sp]
   15c94:	bl	3611c <flatcc_json_printer_string_field@@Base>
   15c98:	mov	r3, #3
   15c9c:	mov	r1, r5
   15ca0:	mov	r0, r4
   15ca4:	mov	r2, #1
   15ca8:	str	r3, [sp]
   15cac:	movw	r3, #10064	; 0x2750
   15cb0:	movt	r3, #4
   15cb4:	strd	r8, [sp, #8]
   15cb8:	bl	37810 <flatcc_json_printer_int64_field@@Base>
   15cbc:	mov	ip, #0
   15cc0:	mov	lr, #5
   15cc4:	mov	r2, r6
   15cc8:	mov	r1, r5
   15ccc:	mov	r0, r4
   15cd0:	movw	r3, #10068	; 0x2754
   15cd4:	movt	r3, #4
   15cd8:	str	lr, [sp]
   15cdc:	str	ip, [sp, #4]
   15ce0:	bl	36ae0 <flatcc_json_printer_uint16_field@@Base>
   15ce4:	add	sp, sp, #16
   15ce8:	ldrd	r4, [sp]
   15cec:	ldr	r6, [sp, #8]
   15cf0:	ldrd	r8, [sp, #12]
   15cf4:	add	sp, sp, #20
   15cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cfc:	movw	ip, #9784	; 0x2638
   15d00:	movt	ip, #4
   15d04:	strd	r4, [sp, #-16]!
   15d08:	mov	r4, #1
   15d0c:	str	r6, [sp, #8]
   15d10:	mov	r3, #0
   15d14:	str	lr, [sp, #12]
   15d18:	sub	sp, sp, #8
   15d1c:	mov	r5, r1
   15d20:	mov	r2, r1
   15d24:	mov	r1, r3
   15d28:	str	ip, [sp]
   15d2c:	mov	r6, r0
   15d30:	str	r4, [sp, #4]
   15d34:	bl	39fe0 <flatcc_json_printer_int16_struct_field@@Base>
   15d38:	movw	ip, #10076	; 0x275c
   15d3c:	movt	ip, #4
   15d40:	mov	r2, r5
   15d44:	mov	r1, r4
   15d48:	mov	r0, r6
   15d4c:	mov	r3, #2
   15d50:	str	ip, [sp]
   15d54:	str	r4, [sp, #4]
   15d58:	bl	39d8c <flatcc_json_printer_int8_struct_field@@Base>
   15d5c:	add	sp, sp, #8
   15d60:	ldrd	r4, [sp]
   15d64:	ldr	r6, [sp, #8]
   15d68:	add	sp, sp, #12
   15d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d70:	ldrb	r3, [r1, #8]
   15d74:	sub	r3, r3, #1
   15d78:	cmp	r3, #3
   15d7c:	ldrls	pc, [pc, r3, lsl #2]
   15d80:	b	15dc4 <_start@@Base+0xcd8>
   15d84:			; <UNDEFINED> instruction: 0x00015db8
   15d88:	andeq	r5, r1, ip, lsr #27
   15d8c:	andeq	r5, r1, r0, lsr #27
   15d90:	muleq	r1, r4, sp
   15d94:	movw	r2, #24008	; 0x5dc8
   15d98:	movt	r2, #1
   15d9c:	b	409a0 <flatcc_json_printer_union_table@@Base>
   15da0:	movw	r2, #32272	; 0x7e10
   15da4:	movt	r2, #1
   15da8:	b	409a0 <flatcc_json_printer_union_table@@Base>
   15dac:	movw	r2, #24804	; 0x60e4
   15db0:	movt	r2, #1
   15db4:	b	409a0 <flatcc_json_printer_union_table@@Base>
   15db8:	movw	r2, #22108	; 0x565c
   15dbc:	movt	r2, #1
   15dc0:	b	409a0 <flatcc_json_printer_union_table@@Base>
   15dc4:	bx	lr
   15dc8:	movw	ip, #21312	; 0x5340
   15dcc:	movt	ip, #1
   15dd0:	strd	r4, [sp, #-12]!
   15dd4:	str	lr, [sp, #8]
   15dd8:	sub	sp, sp, #20
   15ddc:	mov	lr, #6
   15de0:	mov	r2, #0
   15de4:	movw	r3, #10080	; 0x2760
   15de8:	movt	r3, #4
   15dec:	str	lr, [sp]
   15df0:	mov	r4, r0
   15df4:	str	ip, [sp, #4]
   15df8:	mov	r5, r1
   15dfc:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15e00:	mov	r2, #5
   15e04:	movw	r3, #24176	; 0x5e70
   15e08:	movt	r3, #1
   15e0c:	mov	r1, r5
   15e10:	mov	r0, r4
   15e14:	strd	r2, [sp]
   15e18:	mov	r2, #1
   15e1c:	movw	r3, #10088	; 0x2768
   15e20:	movt	r3, #4
   15e24:	bl	40404 <flatcc_json_printer_table_field@@Base>
   15e28:	mov	lr, #7
   15e2c:	movw	r3, #23920	; 0x5d70
   15e30:	movt	r3, #1
   15e34:	movw	ip, #31204	; 0x79e4
   15e38:	movt	ip, #1
   15e3c:	mov	r1, r5
   15e40:	str	lr, [sp]
   15e44:	mov	r0, r4
   15e48:	mov	r2, #3
   15e4c:	str	ip, [sp, #4]
   15e50:	str	r3, [sp, #8]
   15e54:	movw	r3, #10096	; 0x2770
   15e58:	movt	r3, #4
   15e5c:	bl	400bc <flatcc_json_printer_union_vector_field@@Base>
   15e60:	add	sp, sp, #20
   15e64:	ldrd	r4, [sp]
   15e68:	add	sp, sp, #8
   15e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e70:	mov	r2, #14
   15e74:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15e78:	movw	r4, #24424	; 0x5f68
   15e7c:	movt	r4, #1
   15e80:	movw	r5, #24636	; 0x603c
   15e84:	movt	r5, #1
   15e88:	strd	r6, [sp, #8]
   15e8c:	movw	r3, #10104	; 0x2778
   15e90:	movt	r3, #4
   15e94:	strd	r8, [sp, #16]
   15e98:	mov	r8, #10
   15e9c:	str	lr, [sp, #24]
   15ea0:	sub	sp, sp, #20
   15ea4:	mov	r6, r0
   15ea8:	mov	r7, r1
   15eac:	mov	r9, #9
   15eb0:	stm	sp, {r2, r5}
   15eb4:	mov	r2, #1
   15eb8:	str	r4, [sp, #8]
   15ebc:	bl	406d0 <flatcc_json_printer_union_field@@Base>
   15ec0:	mov	r1, r7
   15ec4:	mov	r0, r6
   15ec8:	str	r8, [sp]
   15ecc:	mov	r2, #3
   15ed0:	movw	r3, #10120	; 0x2788
   15ed4:	movt	r3, #4
   15ed8:	str	r5, [sp, #4]
   15edc:	str	r4, [sp, #8]
   15ee0:	bl	406d0 <flatcc_json_printer_union_field@@Base>
   15ee4:	mov	r1, r7
   15ee8:	mov	r0, r6
   15eec:	str	r9, [sp]
   15ef0:	mov	r2, #5
   15ef4:	movw	r3, #10132	; 0x2794
   15ef8:	movt	r3, #4
   15efc:	str	r5, [sp, #4]
   15f00:	str	r4, [sp, #8]
   15f04:	bl	406d0 <flatcc_json_printer_union_field@@Base>
   15f08:	mov	r2, #5
   15f0c:	mov	r1, r7
   15f10:	mov	r0, r6
   15f14:	movw	r3, #10144	; 0x27a0
   15f18:	movt	r3, #4
   15f1c:	stm	sp, {r2, r5}
   15f20:	mov	r2, #7
   15f24:	str	r4, [sp, #8]
   15f28:	bl	406d0 <flatcc_json_printer_union_field@@Base>
   15f2c:	mov	r2, r9
   15f30:	mov	r1, r7
   15f34:	str	r8, [sp]
   15f38:	mov	r0, r6
   15f3c:	movw	r3, #10152	; 0x27a8
   15f40:	movt	r3, #4
   15f44:	str	r5, [sp, #4]
   15f48:	str	r4, [sp, #8]
   15f4c:	bl	400bc <flatcc_json_printer_union_vector_field@@Base>
   15f50:	add	sp, sp, #20
   15f54:	ldrd	r4, [sp]
   15f58:	ldrd	r6, [sp, #8]
   15f5c:	ldrd	r8, [sp, #16]
   15f60:	add	sp, sp, #24
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	ldrb	r3, [r1, #8]
   15f6c:	mov	r2, r1
   15f70:	mov	ip, r0
   15f74:	cmp	r3, #10
   15f78:	bhi	15fa0 <_start@@Base+0xeb4>
   15f7c:	cmp	r3, #9
   15f80:	bcs	15fc4 <_start@@Base+0xed8>
   15f84:	cmp	r3, #2
   15f88:	beq	15fd0 <_start@@Base+0xee4>
   15f8c:	cmp	r3, #8
   15f90:	bne	15fbc <_start@@Base+0xed0>
   15f94:	movw	r2, #24588	; 0x600c
   15f98:	movt	r2, #1
   15f9c:	b	40acc <flatcc_json_printer_union_struct@@Base>
   15fa0:	cmp	r3, #11
   15fa4:	beq	15fb0 <_start@@Base+0xec4>
   15fa8:	cmp	r3, #255	; 0xff
   15fac:	bne	15fc0 <_start@@Base+0xed4>
   15fb0:	mov	r1, r2
   15fb4:	mov	r0, ip
   15fb8:	b	40ba0 <flatcc_json_printer_union_string@@Base>
   15fbc:	bx	lr
   15fc0:	bx	lr
   15fc4:	movw	r2, #24540	; 0x5fdc
   15fc8:	movt	r2, #1
   15fcc:	b	40acc <flatcc_json_printer_union_struct@@Base>
   15fd0:	movw	r2, #21476	; 0x53e4
   15fd4:	movt	r2, #1
   15fd8:	b	409a0 <flatcc_json_printer_union_table@@Base>
   15fdc:	movw	ip, #10164	; 0x27b4
   15fe0:	movt	ip, #4
   15fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   15fe8:	mov	lr, #10
   15fec:	sub	sp, sp, #12
   15ff0:	mov	r3, #0
   15ff4:	mov	r2, r1
   15ff8:	mov	r1, r3
   15ffc:	stm	sp, {ip, lr}
   16000:	bl	3a194 <flatcc_json_printer_int32_struct_field@@Base>
   16004:	add	sp, sp, #12
   16008:	pop	{pc}		; (ldr pc, [sp], #4)
   1600c:	movw	ip, #10176	; 0x27c0
   16010:	movt	ip, #4
   16014:	push	{lr}		; (str lr, [sp, #-4]!)
   16018:	mov	lr, #11
   1601c:	sub	sp, sp, #12
   16020:	mov	r3, #0
   16024:	mov	r2, r1
   16028:	mov	r1, r3
   1602c:	stm	sp, {ip, lr}
   16030:	bl	398d8 <flatcc_json_printer_uint16_struct_field@@Base>
   16034:	add	sp, sp, #12
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	cmp	r1, #9
   16040:	mov	r3, r0
   16044:	beq	16090 <_start@@Base+0xfa4>
   16048:	bls	16070 <_start@@Base+0xf84>
   1604c:	cmp	r1, #11
   16050:	beq	160a0 <_start@@Base+0xfb4>
   16054:	bcc	160b0 <_start@@Base+0xfc4>
   16058:	cmp	r1, #255	; 0xff
   1605c:	bne	160c0 <_start@@Base+0xfd4>
   16060:	movw	r1, #10232	; 0x27f8
   16064:	movt	r1, #4
   16068:	mov	r2, #6
   1606c:	b	35fd0 <flatcc_json_printer_enum@@Base>
   16070:	cmp	r1, #2
   16074:	beq	160d4 <_start@@Base+0xfe8>
   16078:	cmp	r1, #8
   1607c:	bne	160c0 <_start@@Base+0xfd4>
   16080:	mov	r2, r1
   16084:	movw	r1, #10196	; 0x27d4
   16088:	movt	r1, #4
   1608c:	b	35fd0 <flatcc_json_printer_enum@@Base>
   16090:	movw	r1, #10208	; 0x27e0
   16094:	movt	r1, #4
   16098:	mov	r2, #5
   1609c:	b	35fd0 <flatcc_json_printer_enum@@Base>
   160a0:	movw	r1, #10224	; 0x27f0
   160a4:	movt	r1, #4
   160a8:	mov	r2, #5
   160ac:	b	35fd0 <flatcc_json_printer_enum@@Base>
   160b0:	movw	r1, #10216	; 0x27e8
   160b4:	movt	r1, #4
   160b8:	mov	r2, #7
   160bc:	b	35fd0 <flatcc_json_printer_enum@@Base>
   160c0:	movw	r1, #28864	; 0x70c0
   160c4:	movt	r1, #4
   160c8:	mov	r0, r3
   160cc:	mov	r2, #4
   160d0:	b	35fd0 <flatcc_json_printer_enum@@Base>
   160d4:	movw	r1, #10188	; 0x27cc
   160d8:	movt	r1, #4
   160dc:	mov	r2, #5
   160e0:	b	35fd0 <flatcc_json_printer_enum@@Base>
   160e4:	mov	ip, #5
   160e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   160ec:	mov	r4, #2
   160f0:	movw	r5, #24988	; 0x619c
   160f4:	movt	r5, #1
   160f8:	strd	r6, [sp, #8]
   160fc:	str	lr, [sp, #16]
   16100:	sub	sp, sp, #20
   16104:	mov	r2, #0
   16108:	movw	r3, #9568	; 0x2560
   1610c:	movt	r3, #4
   16110:	str	ip, [sp]
   16114:	mov	r6, r0
   16118:	mov	r7, r1
   1611c:	strd	r4, [sp, #4]
   16120:	bl	389c4 <flatcc_json_printer_int8_enum_field@@Base>
   16124:	mov	r2, #6
   16128:	mov	r1, r7
   1612c:	mov	r0, r6
   16130:	movw	r3, #10240	; 0x2800
   16134:	movt	r3, #4
   16138:	stm	sp, {r2, r4, r5}
   1613c:	mov	r2, #1
   16140:	bl	389c4 <flatcc_json_printer_int8_enum_field@@Base>
   16144:	mov	r2, r4
   16148:	mov	r1, r7
   1614c:	str	r4, [sp]
   16150:	mov	r0, r6
   16154:	movw	r3, #10248	; 0x2808
   16158:	movt	r3, #4
   1615c:	str	r4, [sp, #4]
   16160:	bl	36840 <flatcc_json_printer_uint8_field@@Base>
   16164:	mov	ip, #3
   16168:	mov	r1, r7
   1616c:	mov	r0, r6
   16170:	mov	r2, ip
   16174:	movw	r3, #10252	; 0x280c
   16178:	movt	r3, #4
   1617c:	str	ip, [sp]
   16180:	str	r4, [sp, #4]
   16184:	bl	36840 <flatcc_json_printer_uint8_field@@Base>
   16188:	add	sp, sp, #20
   1618c:	ldrd	r4, [sp]
   16190:	ldrd	r6, [sp, #8]
   16194:	add	sp, sp, #16
   16198:	pop	{pc}		; (ldr pc, [sp], #4)
   1619c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   161a0:	uxtb	r4, r1
   161a4:	tst	r4, #244	; 0xf4
   161a8:	strd	r6, [sp, #8]
   161ac:	movne	r5, #1
   161b0:	moveq	r5, #0
   161b4:	str	r8, [sp, #16]
   161b8:	cmp	r4, #0
   161bc:	str	lr, [sp, #20]
   161c0:	moveq	r5, #1
   161c4:	cmp	r5, #0
   161c8:	beq	161e4 <_start@@Base+0x10f8>
   161cc:	ldrd	r4, [sp]
   161d0:	ldrd	r6, [sp, #8]
   161d4:	ldr	r8, [sp, #16]
   161d8:	ldr	lr, [sp, #20]
   161dc:	add	sp, sp, #24
   161e0:	b	35d58 <flatcc_json_printer_int8@@Base>
   161e4:	sub	r3, r4, #1
   161e8:	mov	r6, r0
   161ec:	tst	r3, r4
   161f0:	movne	r7, #1
   161f4:	moveq	r7, #0
   161f8:	mov	r1, r7
   161fc:	bl	36060 <flatcc_json_printer_delimit_enum_flags@@Base>
   16200:	ands	r1, r4, #1
   16204:	moveq	r5, #1
   16208:	bne	1623c <_start@@Base+0x1150>
   1620c:	tst	r4, #2
   16210:	bne	16264 <_start@@Base+0x1178>
   16214:	tst	r4, #8
   16218:	bne	16284 <_start@@Base+0x1198>
   1621c:	mov	r1, r7
   16220:	mov	r0, r6
   16224:	ldrd	r4, [sp]
   16228:	ldrd	r6, [sp, #8]
   1622c:	ldr	r8, [sp, #16]
   16230:	ldr	lr, [sp, #20]
   16234:	add	sp, sp, #24
   16238:	b	36060 <flatcc_json_printer_delimit_enum_flags@@Base>
   1623c:	mov	r1, r5
   16240:	movw	r2, #10256	; 0x2810
   16244:	movt	r2, #4
   16248:	mov	r3, #3
   1624c:	mov	r0, r6
   16250:	mov	r5, #2
   16254:	bl	36090 <flatcc_json_printer_enum_flag@@Base>
   16258:	tst	r4, #2
   1625c:	mov	r1, #1
   16260:	beq	16214 <_start@@Base+0x1128>
   16264:	movw	r2, #10260	; 0x2814
   16268:	movt	r2, #4
   1626c:	mov	r3, #5
   16270:	mov	r0, r6
   16274:	bl	36090 <flatcc_json_printer_enum_flag@@Base>
   16278:	tst	r4, #8
   1627c:	mov	r1, r5
   16280:	beq	1621c <_start@@Base+0x1130>
   16284:	movw	r2, #10268	; 0x281c
   16288:	movt	r2, #4
   1628c:	mov	r3, #4
   16290:	mov	r0, r6
   16294:	bl	36090 <flatcc_json_printer_enum_flag@@Base>
   16298:	b	1621c <_start@@Base+0x1130>
   1629c:	movw	ip, #10396	; 0x289c
   162a0:	movt	ip, #4
   162a4:	strd	r4, [sp, #-16]!
   162a8:	str	r6, [sp, #8]
   162ac:	mov	r6, #1
   162b0:	mov	r3, #0
   162b4:	str	lr, [sp, #12]
   162b8:	sub	sp, sp, #16
   162bc:	mov	r4, r1
   162c0:	mov	r2, r1
   162c4:	mov	r1, r3
   162c8:	str	ip, [sp]
   162cc:	mov	r5, r0
   162d0:	str	r6, [sp, #4]
   162d4:	bl	3a6d8 <flatcc_json_printer_float_struct_field@@Base>
   162d8:	movw	r3, #9636	; 0x25a4
   162dc:	movt	r3, #4
   162e0:	mov	r2, r4
   162e4:	mov	r1, r6
   162e8:	mov	r0, r5
   162ec:	stm	sp, {r3, r6}
   162f0:	mov	r3, #4
   162f4:	bl	3a6d8 <flatcc_json_printer_float_struct_field@@Base>
   162f8:	movw	ip, #10276	; 0x2824
   162fc:	movt	ip, #4
   16300:	mov	r2, r4
   16304:	mov	r0, r5
   16308:	mov	r3, #8
   1630c:	mov	r1, #2
   16310:	str	ip, [sp]
   16314:	str	r6, [sp, #4]
   16318:	mov	r6, #5
   1631c:	bl	3a6d8 <flatcc_json_printer_float_struct_field@@Base>
   16320:	movw	r1, #10280	; 0x2828
   16324:	movt	r1, #4
   16328:	mov	r2, r4
   1632c:	mov	r0, r5
   16330:	mov	r3, #16
   16334:	stm	sp, {r1, r6}
   16338:	mov	r1, #3
   1633c:	bl	3a86c <flatcc_json_printer_double_struct_field@@Base>
   16340:	movw	r3, #24988	; 0x619c
   16344:	movt	r3, #1
   16348:	movw	r1, #10288	; 0x2830
   1634c:	movt	r1, #4
   16350:	mov	r2, r4
   16354:	mov	r0, r5
   16358:	stm	sp, {r1, r6}
   1635c:	mov	r1, #4
   16360:	str	r3, [sp, #8]
   16364:	mov	r3, #24
   16368:	bl	3b208 <flatcc_json_printer_int8_enum_struct_field@@Base>
   1636c:	movw	r3, #23804	; 0x5cfc
   16370:	movt	r3, #1
   16374:	str	r6, [sp, #4]
   16378:	movw	ip, #10296	; 0x2838
   1637c:	movt	ip, #4
   16380:	mov	r2, r4
   16384:	mov	r1, r6
   16388:	mov	r0, r5
   1638c:	str	ip, [sp]
   16390:	str	r3, [sp, #8]
   16394:	mov	r3, #26
   16398:	bl	40bb8 <flatcc_json_printer_embedded_struct_field@@Base>
   1639c:	add	sp, sp, #16
   163a0:	ldrd	r4, [sp]
   163a4:	ldr	r6, [sp, #8]
   163a8:	add	sp, sp, #12
   163ac:	pop	{pc}		; (ldr pc, [sp], #4)
   163b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   163b4:	mov	r4, r1
   163b8:	mov	r1, r2
   163bc:	strd	r6, [sp, #8]
   163c0:	mov	r5, r2
   163c4:	strd	r8, [sp, #16]
   163c8:	mov	r8, r0
   163cc:	mov	r0, r4
   163d0:	str	sl, [sp, #24]
   163d4:	mov	r9, r3
   163d8:	str	lr, [sp, #28]
   163dc:	sub	sp, sp, #8
   163e0:	bl	151e0 <_start@@Base+0xf4>
   163e4:	add	r3, pc, #652	; 0x28c
   163e8:	ldrd	r2, [r3]
   163ec:	cmp	r1, r3
   163f0:	cmpeq	r0, r2
   163f4:	bhi	164b8 <_start@@Base+0x13cc>
   163f8:	add	r7, pc, #640	; 0x280
   163fc:	ldrd	r6, [r7]
   16400:	and	r2, r0, #-16777216	; 0xff000000
   16404:	mov	r3, r1
   16408:	cmp	r1, r7
   1640c:	cmpeq	r0, r6
   16410:	bhi	16448 <_start@@Base+0x135c>
   16414:	add	r1, pc, #620	; 0x26c
   16418:	ldrd	r0, [r1]
   1641c:	cmp	r3, r1
   16420:	cmpeq	r2, r0
   16424:	beq	165f0 <_start@@Base+0x1504>
   16428:	mov	r0, r4
   1642c:	add	sp, sp, #8
   16430:	ldrd	r4, [sp]
   16434:	ldrd	r6, [sp, #8]
   16438:	ldrd	r8, [sp, #16]
   1643c:	ldr	sl, [sp, #24]
   16440:	add	sp, sp, #28
   16444:	pop	{pc}		; (ldr pc, [sp], #4)
   16448:	add	r7, pc, #576	; 0x240
   1644c:	ldrd	r6, [r7]
   16450:	cmp	r1, r7
   16454:	cmpeq	r2, r6
   16458:	beq	1661c <_start@@Base+0x1530>
   1645c:	add	r7, pc, #564	; 0x234
   16460:	ldrd	r6, [r7]
   16464:	bic	r2, r0, #255	; 0xff
   16468:	cmp	r1, r7
   1646c:	cmpeq	r2, r6
   16470:	bne	16428 <_start@@Base+0x133c>
   16474:	ldr	r3, [sp, #44]	; 0x2c
   16478:	mov	r2, r5
   1647c:	mov	r0, r8
   16480:	mov	r1, r4
   16484:	str	r3, [sp]
   16488:	mov	r3, #7
   1648c:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16490:	cmp	r4, r0
   16494:	movne	r6, #10
   16498:	beq	16428 <_start@@Base+0x133c>
   1649c:	ldr	r2, [sp, #40]	; 0x28
   164a0:	mov	r7, #0
   164a4:	mov	r3, #0
   164a8:	mov	r4, r0
   164ac:	strd	r6, [r2]
   164b0:	str	r3, [r9]
   164b4:	b	16428 <_start@@Base+0x133c>
   164b8:	add	r3, pc, #480	; 0x1e0
   164bc:	ldrd	r2, [r3]
   164c0:	cmp	r1, r3
   164c4:	cmpeq	r0, r2
   164c8:	bhi	16524 <_start@@Base+0x1438>
   164cc:	add	r7, pc, #468	; 0x1d4
   164d0:	ldrd	r6, [r7]
   164d4:	mov	sl, #0
   164d8:	cmp	r1, r7
   164dc:	cmpeq	sl, r6
   164e0:	bne	16428 <_start@@Base+0x133c>
   164e4:	ldr	r3, [sp, #44]	; 0x2c
   164e8:	mov	r2, r5
   164ec:	mov	r0, r8
   164f0:	mov	r1, r4
   164f4:	str	r3, [sp]
   164f8:	mov	r3, #4
   164fc:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16500:	cmp	r4, r0
   16504:	beq	16428 <_start@@Base+0x133c>
   16508:	ldr	r1, [sp, #40]	; 0x28
   1650c:	mov	r2, #0
   16510:	mov	r3, #0
   16514:	mov	r4, r0
   16518:	strd	r2, [r1]
   1651c:	str	sl, [r9]
   16520:	b	16428 <_start@@Base+0x133c>
   16524:	add	r3, pc, #388	; 0x184
   16528:	ldrd	r2, [r3]
   1652c:	cmp	r1, r3
   16530:	cmpeq	r0, r2
   16534:	bls	165ac <_start@@Base+0x14c0>
   16538:	add	r7, pc, #376	; 0x178
   1653c:	ldrd	r6, [r7]
   16540:	lsr	r2, r0, #16
   16544:	lsl	r2, r2, #16
   16548:	cmp	r1, r7
   1654c:	cmpeq	r2, r6
   16550:	beq	16648 <_start@@Base+0x155c>
   16554:	add	r3, pc, #356	; 0x164
   16558:	ldrd	r2, [r3]
   1655c:	cmp	r1, r3
   16560:	cmpeq	r0, r2
   16564:	bne	16428 <_start@@Base+0x133c>
   16568:	ldr	r3, [sp, #44]	; 0x2c
   1656c:	mov	r2, r5
   16570:	mov	r0, r8
   16574:	mov	r1, r4
   16578:	str	r3, [sp]
   1657c:	mov	r3, #8
   16580:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16584:	cmp	r4, r0
   16588:	beq	16428 <_start@@Base+0x133c>
   1658c:	ldr	r2, [sp, #40]	; 0x28
   16590:	mov	r4, r0
   16594:	mov	r1, #0
   16598:	mov	r0, #8
   1659c:	mov	r3, #0
   165a0:	strd	r0, [r2]
   165a4:	str	r3, [r9]
   165a8:	b	16428 <_start@@Base+0x133c>
   165ac:	add	r7, pc, #276	; 0x114
   165b0:	ldrd	r6, [r7]
   165b4:	and	r2, r0, #-16777216	; 0xff000000
   165b8:	cmp	r1, r7
   165bc:	cmpeq	r2, r6
   165c0:	bne	16428 <_start@@Base+0x133c>
   165c4:	ldr	r3, [sp, #44]	; 0x2c
   165c8:	mov	r2, r5
   165cc:	mov	r0, r8
   165d0:	mov	r1, r4
   165d4:	str	r3, [sp]
   165d8:	mov	r3, #5
   165dc:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   165e0:	cmp	r4, r0
   165e4:	movne	r6, #11
   165e8:	bne	1649c <_start@@Base+0x13b0>
   165ec:	b	16428 <_start@@Base+0x133c>
   165f0:	ldr	r3, [sp, #44]	; 0x2c
   165f4:	mov	r2, r5
   165f8:	mov	r0, r8
   165fc:	mov	r1, r4
   16600:	str	r3, [sp]
   16604:	mov	r3, #5
   16608:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   1660c:	cmp	r4, r0
   16610:	movne	r6, #9
   16614:	bne	1649c <_start@@Base+0x13b0>
   16618:	b	16428 <_start@@Base+0x133c>
   1661c:	ldr	r3, [sp, #44]	; 0x2c
   16620:	mov	r2, r5
   16624:	mov	r0, r8
   16628:	mov	r1, r4
   1662c:	str	r3, [sp]
   16630:	mov	r3, #5
   16634:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16638:	cmp	r4, r0
   1663c:	movne	r6, #2
   16640:	bne	1649c <_start@@Base+0x13b0>
   16644:	b	16428 <_start@@Base+0x133c>
   16648:	ldr	r3, [sp, #44]	; 0x2c
   1664c:	mov	r2, r5
   16650:	mov	r0, r8
   16654:	mov	r1, r4
   16658:	str	r3, [sp]
   1665c:	mov	r3, #6
   16660:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16664:	cmp	r4, r0
   16668:	beq	16428 <_start@@Base+0x133c>
   1666c:	mov	r6, #255	; 0xff
   16670:	b	1649c <_start@@Base+0x13b0>
   16674:	nop	{0}
   16678:			; <UNDEFINED> instruction: 0xffffffff
   1667c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16680:			; <UNDEFINED> instruction: 0x46616dff
   16684:	rsbmi	r6, pc, #428	; 0x1ac
   16688:	strvs	r0, [r0, #-0]
   1668c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16690:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16694:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16698:	strbtmi	r6, [r1], -r0, lsl #28
   1669c:	rsbmi	r6, pc, #428	; 0x1ac
   166a0:	ldrshvc	pc, [pc, #255]	; 167a7 <_start@@Base+0x16bb>	; <UNPREDICTABLE>
   166a4:	svcmi	0x00746865
   166a8:	andeq	r0, r0, r0
   166ac:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   166b0:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   166b4:	rsbpl	r7, r1, #117	; 0x75
   166b8:	strbvs	r0, [r4, #-0]!
   166bc:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   166c0:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   166c4:	rsbpl	r7, r1, #117	; 0x75
   166c8:	andvc	r0, r0, #0
   166cc:	svcmi	0x00746865
   166d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166d4:	mov	r4, r1
   166d8:	mov	r1, r2
   166dc:	strd	r6, [sp, #8]
   166e0:	mov	r5, r2
   166e4:	strd	r8, [sp, #16]
   166e8:	mov	r8, r0
   166ec:	mov	r0, r4
   166f0:	strd	sl, [sp, #24]
   166f4:	mov	r9, r3
   166f8:	str	lr, [sp, #32]
   166fc:	sub	sp, sp, #12
   16700:	bl	151e0 <_start@@Base+0xf4>
   16704:	add	r3, pc, #524	; 0x20c
   16708:	ldrd	r2, [r3]
   1670c:	cmp	r1, r3
   16710:	cmpeq	r0, r2
   16714:	bhi	16754 <_start@@Base+0x1668>
   16718:	add	r7, pc, #512	; 0x200
   1671c:	ldrd	r6, [r7]
   16720:	bic	r3, r1, #255	; 0xff
   16724:	mov	sl, #0
   16728:	cmp	r3, r7
   1672c:	cmpeq	sl, r6
   16730:	beq	16830 <_start@@Base+0x1744>
   16734:	mov	r0, r4
   16738:	add	sp, sp, #12
   1673c:	ldrd	r4, [sp]
   16740:	ldrd	r6, [sp, #8]
   16744:	ldrd	r8, [sp, #16]
   16748:	ldrd	sl, [sp, #24]
   1674c:	add	sp, sp, #32
   16750:	pop	{pc}		; (ldr pc, [sp], #4)
   16754:	add	r3, pc, #460	; 0x1cc
   16758:	ldrd	r2, [r3]
   1675c:	cmp	r1, r3
   16760:	cmpeq	r0, r2
   16764:	beq	168e8 <_start@@Base+0x17fc>
   16768:	add	r7, pc, #448	; 0x1c0
   1676c:	ldrd	r6, [r7]
   16770:	bic	r2, r0, #255	; 0xff
   16774:	cmp	r1, r7
   16778:	cmpeq	r2, r6
   1677c:	beq	168a8 <_start@@Base+0x17bc>
   16780:	add	r7, pc, #432	; 0x1b0
   16784:	ldrd	r6, [r7]
   16788:	mov	sl, #0
   1678c:	cmp	r1, r7
   16790:	cmpeq	sl, r6
   16794:	beq	1686c <_start@@Base+0x1780>
   16798:	add	r3, pc, #416	; 0x1a0
   1679c:	ldrd	r2, [r3]
   167a0:	cmp	r1, r3
   167a4:	cmpeq	r0, r2
   167a8:	bne	16734 <_start@@Base+0x1648>
   167ac:	mov	r1, r5
   167b0:	add	r0, r4, #8
   167b4:	bl	151e0 <_start@@Base+0xf4>
   167b8:	add	r3, pc, #392	; 0x188
   167bc:	ldrd	r2, [r3]
   167c0:	cmp	r1, r3
   167c4:	cmpeq	r0, r2
   167c8:	bne	16734 <_start@@Base+0x1648>
   167cc:	add	r7, pc, #380	; 0x17c
   167d0:	ldrd	r6, [r7]
   167d4:	add	fp, r4, #16
   167d8:	mov	r1, r5
   167dc:	mov	r0, fp
   167e0:	bl	151e0 <_start@@Base+0xf4>
   167e4:	bic	r2, r0, #255	; 0xff
   167e8:	cmp	r1, r7
   167ec:	cmpeq	r2, r6
   167f0:	bne	16734 <_start@@Base+0x1648>
   167f4:	ldr	r3, [sp, #52]	; 0x34
   167f8:	mov	r2, r5
   167fc:	mov	r0, r8
   16800:	mov	r1, fp
   16804:	str	r3, [sp]
   16808:	mov	r3, #7
   1680c:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16810:	cmp	fp, r0
   16814:	beq	16734 <_start@@Base+0x1648>
   16818:	ldr	r1, [sp, #48]	; 0x30
   1681c:	mov	r2, #2
   16820:	mov	r3, #0
   16824:	strd	r2, [r1]
   16828:	str	sl, [r9]
   1682c:	b	16738 <_start@@Base+0x164c>
   16830:	ldr	r3, [sp, #52]	; 0x34
   16834:	mov	r2, r5
   16838:	mov	r0, r8
   1683c:	mov	r1, r4
   16840:	str	r3, [sp]
   16844:	mov	r3, #3
   16848:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   1684c:	cmp	r4, r0
   16850:	beq	16738 <_start@@Base+0x164c>
   16854:	ldr	r1, [sp, #48]	; 0x30
   16858:	mov	r2, #4
   1685c:	mov	r3, #0
   16860:	strd	r2, [r1]
   16864:	str	sl, [r9]
   16868:	b	16738 <_start@@Base+0x164c>
   1686c:	ldr	r3, [sp, #52]	; 0x34
   16870:	mov	r2, r5
   16874:	mov	r0, r8
   16878:	mov	r1, r4
   1687c:	str	r3, [sp]
   16880:	mov	r3, #4
   16884:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16888:	cmp	r4, r0
   1688c:	beq	16738 <_start@@Base+0x164c>
   16890:	ldr	r1, [sp, #48]	; 0x30
   16894:	mov	r2, #0
   16898:	mov	r3, #0
   1689c:	strd	r2, [r1]
   168a0:	str	sl, [r9]
   168a4:	b	16738 <_start@@Base+0x164c>
   168a8:	ldr	r3, [sp, #52]	; 0x34
   168ac:	mov	r2, r5
   168b0:	mov	r0, r8
   168b4:	mov	r1, r4
   168b8:	str	r3, [sp]
   168bc:	mov	r3, #7
   168c0:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   168c4:	cmp	r4, r0
   168c8:	beq	16734 <_start@@Base+0x1648>
   168cc:	mov	r4, #1
   168d0:	ldr	r2, [sp, #48]	; 0x30
   168d4:	mov	r5, #0
   168d8:	mov	r3, #0
   168dc:	strd	r4, [r2]
   168e0:	str	r3, [r9]
   168e4:	b	16738 <_start@@Base+0x164c>
   168e8:	ldr	r3, [sp, #52]	; 0x34
   168ec:	mov	r1, r4
   168f0:	mov	r2, r5
   168f4:	mov	r0, r8
   168f8:	str	r3, [sp]
   168fc:	mov	r3, #8
   16900:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16904:	cmp	r4, r0
   16908:	movne	r4, #3
   1690c:	bne	168d0 <_start@@Base+0x17e4>
   16910:	b	16734 <_start@@Base+0x1648>
   16914:	nop	{0}
   16918:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   1691c:	stclmi	14, cr6, [pc, #-460]!	; 16758 <_start@@Base+0x166c>
   16920:	andeq	r0, r0, r0
   16924:	cmnmi	ip, r0, lsl #8
   16928:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   1692c:	stclmi	14, cr6, [pc, #-460]!	; 16768 <_start@@Base+0x167c>
   16930:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16934:	stclmi	14, cr6, [pc, #-460]!	; 16770 <_start@@Base+0x1684>
   16938:	andeq	r0, r0, r0
   1693c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16940:	cmnpl	r9, #112, 26	; 0x1c00
   16944:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16948:	rsbvs	r6, ip, #364904448	; 0x15c00000
   1694c:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16950:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16954:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16958:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1695c:	mov	r4, r1
   16960:	mov	r5, r0
   16964:	mov	r1, r2
   16968:	mov	r0, r4
   1696c:	strd	r6, [sp, #8]
   16970:	strd	r8, [sp, #16]
   16974:	strd	sl, [sp, #24]
   16978:	mov	sl, r2
   1697c:	mov	fp, r3
   16980:	str	lr, [sp, #32]
   16984:	sub	sp, sp, #12
   16988:	bl	151e0 <_start@@Base+0xf4>
   1698c:	add	r3, pc, #316	; 0x13c
   16990:	ldrd	r2, [r3]
   16994:	cmp	r1, r3
   16998:	cmpeq	r0, r2
   1699c:	bhi	169d8 <_start@@Base+0x18ec>
   169a0:	add	r7, pc, #304	; 0x130
   169a4:	ldrd	r6, [r7]
   169a8:	mov	r8, #0
   169ac:	cmp	r1, r7
   169b0:	cmpeq	r8, r6
   169b4:	beq	16a4c <_start@@Base+0x1960>
   169b8:	mov	r0, r4
   169bc:	add	sp, sp, #12
   169c0:	ldrd	r4, [sp]
   169c4:	ldrd	r6, [sp, #8]
   169c8:	ldrd	r8, [sp, #16]
   169cc:	ldrd	sl, [sp, #24]
   169d0:	add	sp, sp, #32
   169d4:	pop	{pc}		; (ldr pc, [sp], #4)
   169d8:	add	r9, pc, #256	; 0x100
   169dc:	ldrd	r8, [r9]
   169e0:	lsr	r6, r0, #16
   169e4:	lsl	r6, r6, #16
   169e8:	cmp	r1, r9
   169ec:	cmpeq	r6, r8
   169f0:	beq	16a8c <_start@@Base+0x19a0>
   169f4:	add	r7, pc, #236	; 0xec
   169f8:	ldrd	r6, [r7]
   169fc:	mov	r8, #0
   16a00:	cmp	r1, r7
   16a04:	cmpeq	r8, r6
   16a08:	bne	169b8 <_start@@Base+0x18cc>
   16a0c:	ldr	r3, [sp, #52]	; 0x34
   16a10:	mov	r2, sl
   16a14:	mov	r0, r5
   16a18:	mov	r1, r4
   16a1c:	str	r3, [sp]
   16a20:	mov	r3, #4
   16a24:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16a28:	cmp	r4, r0
   16a2c:	beq	169b8 <_start@@Base+0x18cc>
   16a30:	add	r3, pc, #184	; 0xb8
   16a34:	ldrd	r2, [r3]
   16a38:	mov	r4, r0
   16a3c:	ldr	r1, [sp, #48]	; 0x30
   16a40:	strd	r2, [r1]
   16a44:	str	r8, [fp]
   16a48:	b	169b8 <_start@@Base+0x18cc>
   16a4c:	ldr	r3, [sp, #52]	; 0x34
   16a50:	mov	r2, sl
   16a54:	mov	r0, r5
   16a58:	mov	r1, r4
   16a5c:	str	r3, [sp]
   16a60:	mov	r3, #4
   16a64:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16a68:	cmp	r4, r0
   16a6c:	beq	169b8 <_start@@Base+0x18cc>
   16a70:	ldr	r1, [sp, #48]	; 0x30
   16a74:	mov	r2, #3
   16a78:	mov	r3, #0
   16a7c:	mov	r4, r0
   16a80:	strd	r2, [r1]
   16a84:	str	r8, [fp]
   16a88:	b	169b8 <_start@@Base+0x18cc>
   16a8c:	ldr	r3, [sp, #52]	; 0x34
   16a90:	mov	r2, sl
   16a94:	mov	r0, r5
   16a98:	mov	r1, r4
   16a9c:	str	r3, [sp]
   16aa0:	mov	r3, #6
   16aa4:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16aa8:	cmp	r4, r0
   16aac:	beq	169b8 <_start@@Base+0x18cc>
   16ab0:	ldr	r2, [sp, #48]	; 0x30
   16ab4:	mvn	r6, #1
   16ab8:	mvn	r7, #0
   16abc:	mov	r3, #1
   16ac0:	mov	r4, r0
   16ac4:	strd	r6, [r2]
   16ac8:	str	r3, [fp]
   16acc:	b	169b8 <_start@@Base+0x18cc>
   16ad0:			; <UNDEFINED> instruction: 0xffffffff
   16ad4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16ad8:	andeq	r0, r0, r0
   16adc:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16ae0:	strbvs	r0, [r7, #-0]!
   16ae4:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16ae8:	andeq	r0, r0, r0
   16aec:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16af0:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16af4:	andeq	r0, r0, r0
   16af8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16afc:	mov	r4, r1
   16b00:	mov	r1, r2
   16b04:	strd	r6, [sp, #8]
   16b08:	mov	r5, r2
   16b0c:	strd	r8, [sp, #16]
   16b10:	mov	r8, r0
   16b14:	mov	r0, r4
   16b18:	str	sl, [sp, #24]
   16b1c:	mov	r9, r3
   16b20:	str	lr, [sp, #28]
   16b24:	sub	sp, sp, #8
   16b28:	bl	151e0 <_start@@Base+0xf4>
   16b2c:	add	r3, pc, #412	; 0x19c
   16b30:	ldrd	r2, [r3]
   16b34:	cmp	r1, r3
   16b38:	cmpeq	r0, r2
   16b3c:	bhi	16b78 <_start@@Base+0x1a8c>
   16b40:	add	r7, pc, #400	; 0x190
   16b44:	ldrd	r6, [r7]
   16b48:	mov	sl, #0
   16b4c:	cmp	r1, r7
   16b50:	cmpeq	sl, r6
   16b54:	beq	16c48 <_start@@Base+0x1b5c>
   16b58:	mov	r0, r4
   16b5c:	add	sp, sp, #8
   16b60:	ldrd	r4, [sp]
   16b64:	ldrd	r6, [sp, #8]
   16b68:	ldrd	r8, [sp, #16]
   16b6c:	ldr	sl, [sp, #24]
   16b70:	add	sp, sp, #28
   16b74:	pop	{pc}		; (ldr pc, [sp], #4)
   16b78:	add	r3, pc, #352	; 0x160
   16b7c:	ldrd	r2, [r3]
   16b80:	cmp	r1, r3
   16b84:	cmpeq	r0, r2
   16b88:	bhi	16bd0 <_start@@Base+0x1ae4>
   16b8c:	add	r7, pc, #340	; 0x154
   16b90:	ldrd	r6, [r7]
   16b94:	mov	sl, #0
   16b98:	cmp	r1, r7
   16b9c:	cmpeq	sl, r6
   16ba0:	bne	16b58 <_start@@Base+0x1a6c>
   16ba4:	ldr	r3, [sp, #44]	; 0x2c
   16ba8:	mov	r2, r5
   16bac:	mov	r0, r8
   16bb0:	mov	r1, r4
   16bb4:	str	r3, [sp]
   16bb8:	mov	r3, #4
   16bbc:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16bc0:	cmp	r4, r0
   16bc4:	beq	16b58 <_start@@Base+0x1a6c>
   16bc8:	mov	r2, #42	; 0x2a
   16bcc:	b	16c70 <_start@@Base+0x1b84>
   16bd0:	add	r7, pc, #280	; 0x118
   16bd4:	ldrd	r6, [r7]
   16bd8:	bic	r2, r0, #255	; 0xff
   16bdc:	cmp	r1, r7
   16be0:	cmpeq	r2, r6
   16be4:	beq	16c88 <_start@@Base+0x1b9c>
   16be8:	add	r7, pc, #264	; 0x108
   16bec:	ldrd	r6, [r7]
   16bf0:	lsr	r2, r0, #16
   16bf4:	lsl	r2, r2, #16
   16bf8:	cmp	r1, r7
   16bfc:	cmpeq	r2, r6
   16c00:	bne	16b58 <_start@@Base+0x1a6c>
   16c04:	ldr	r3, [sp, #44]	; 0x2c
   16c08:	mov	r2, r5
   16c0c:	mov	r0, r8
   16c10:	mov	r1, r4
   16c14:	str	r3, [sp]
   16c18:	mov	r3, #6
   16c1c:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16c20:	cmp	r4, r0
   16c24:	beq	16b58 <_start@@Base+0x1a6c>
   16c28:	ldr	r2, [sp, #40]	; 0x28
   16c2c:	mov	r4, r0
   16c30:	mvn	r1, #0
   16c34:	mvn	r0, #1
   16c38:	mov	r3, #1
   16c3c:	strd	r0, [r2]
   16c40:	str	r3, [r9]
   16c44:	b	16b58 <_start@@Base+0x1a6c>
   16c48:	ldr	r3, [sp, #44]	; 0x2c
   16c4c:	mov	r2, r5
   16c50:	mov	r0, r8
   16c54:	mov	r1, r4
   16c58:	str	r3, [sp]
   16c5c:	mov	r3, #4
   16c60:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16c64:	cmp	r4, r0
   16c68:	movne	r2, #2
   16c6c:	beq	16b58 <_start@@Base+0x1a6c>
   16c70:	ldr	r1, [sp, #40]	; 0x28
   16c74:	mov	r3, #0
   16c78:	mov	r4, r0
   16c7c:	strd	r2, [r1]
   16c80:	str	sl, [r9]
   16c84:	b	16b58 <_start@@Base+0x1a6c>
   16c88:	ldr	r3, [sp, #44]	; 0x2c
   16c8c:	mov	r2, r5
   16c90:	mov	r0, r8
   16c94:	mov	r1, r4
   16c98:	str	r3, [sp]
   16c9c:	mov	r3, #7
   16ca0:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16ca4:	cmp	r4, r0
   16ca8:	beq	16b58 <_start@@Base+0x1a6c>
   16cac:	ldr	r2, [sp, #40]	; 0x28
   16cb0:	mvn	r6, #0
   16cb4:	mvn	r7, #0
   16cb8:	mov	r3, #1
   16cbc:	mov	r4, r0
   16cc0:	strd	r6, [r2]
   16cc4:	str	r3, [r9]
   16cc8:	b	16b58 <_start@@Base+0x1a6c>
   16ccc:	nop	{0}
   16cd0:			; <UNDEFINED> instruction: 0xffffffff
   16cd4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16cd8:	andeq	r0, r0, r0
   16cdc:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16ce0:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16ce4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16ce8:	andeq	r0, r0, r0
   16cec:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16cf0:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16cf4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16cf8:	strbvs	r0, [r7, #-0]!
   16cfc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16d00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16d04:	mov	r4, r1
   16d08:	mov	r5, r0
   16d0c:	mov	r1, r2
   16d10:	mov	r0, r4
   16d14:	strd	r6, [sp, #8]
   16d18:	strd	r8, [sp, #16]
   16d1c:	mov	r6, #0
   16d20:	add	r9, pc, #312	; 0x138
   16d24:	ldrd	r8, [r9]
   16d28:	strd	sl, [sp, #24]
   16d2c:	mov	sl, r2
   16d30:	mov	fp, r3
   16d34:	str	lr, [sp, #32]
   16d38:	sub	sp, sp, #12
   16d3c:	bl	151e0 <_start@@Base+0xf4>
   16d40:	cmp	r1, r9
   16d44:	cmpeq	r0, r8
   16d48:	bhi	16d80 <_start@@Base+0x1c94>
   16d4c:	add	r3, pc, #276	; 0x114
   16d50:	ldrd	r2, [r3]
   16d54:	cmp	r1, r3
   16d58:	cmpeq	r6, r2
   16d5c:	beq	16dec <_start@@Base+0x1d00>
   16d60:	mov	r0, r4
   16d64:	add	sp, sp, #12
   16d68:	ldrd	r4, [sp]
   16d6c:	ldrd	r6, [sp, #8]
   16d70:	ldrd	r8, [sp, #16]
   16d74:	ldrd	sl, [sp, #24]
   16d78:	add	sp, sp, #32
   16d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d80:	add	r3, pc, #232	; 0xe8
   16d84:	ldrd	r2, [r3]
   16d88:	cmp	r1, r3
   16d8c:	cmpeq	r6, r2
   16d90:	beq	16e30 <_start@@Base+0x1d44>
   16d94:	add	r3, pc, #220	; 0xdc
   16d98:	ldrd	r2, [r3]
   16d9c:	cmp	r1, r3
   16da0:	cmpeq	r6, r2
   16da4:	bne	16d60 <_start@@Base+0x1c74>
   16da8:	ldr	r3, [sp, #52]	; 0x34
   16dac:	mov	r2, sl
   16db0:	mov	r0, r5
   16db4:	mov	r1, r4
   16db8:	str	r3, [sp]
   16dbc:	mov	r3, #4
   16dc0:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16dc4:	cmp	r4, r0
   16dc8:	beq	16d60 <_start@@Base+0x1c74>
   16dcc:	ldr	r2, [sp, #48]	; 0x30
   16dd0:	mov	r4, r0
   16dd4:	mvn	r1, #0
   16dd8:	mvn	r0, #10
   16ddc:	mov	r3, #1
   16de0:	strd	r0, [r2]
   16de4:	str	r3, [fp]
   16de8:	b	16d60 <_start@@Base+0x1c74>
   16dec:	ldr	r3, [sp, #52]	; 0x34
   16df0:	mov	r2, sl
   16df4:	mov	r0, r5
   16df8:	mov	r1, r4
   16dfc:	str	r3, [sp]
   16e00:	mov	r3, #4
   16e04:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16e08:	cmp	r4, r0
   16e0c:	mvnne	r6, #11
   16e10:	beq	16d60 <_start@@Base+0x1c74>
   16e14:	ldr	r2, [sp, #48]	; 0x30
   16e18:	mvn	r7, #0
   16e1c:	mov	r3, #1
   16e20:	mov	r4, r0
   16e24:	strd	r6, [r2]
   16e28:	str	r3, [fp]
   16e2c:	b	16d60 <_start@@Base+0x1c74>
   16e30:	ldr	r3, [sp, #52]	; 0x34
   16e34:	mov	r2, sl
   16e38:	mov	r0, r5
   16e3c:	mov	r1, r4
   16e40:	str	r3, [sp]
   16e44:	mov	r3, #4
   16e48:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16e4c:	cmp	r4, r0
   16e50:	beq	16d60 <_start@@Base+0x1c74>
   16e54:	mvn	r6, #9
   16e58:	b	16e14 <_start@@Base+0x1d28>
   16e5c:	nop	{0}
   16e60:			; <UNDEFINED> instruction: 0xffffffff
   16e64:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16e68:	andeq	r0, r0, r0
   16e6c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16e70:	andeq	r0, r0, r0
   16e74:	mcrvs	7, 3, r6, cr5, cr3, {1}
   16e78:	andeq	r0, r0, r0
   16e7c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   16e80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16e84:	mov	r4, r1
   16e88:	mov	r1, r2
   16e8c:	strd	r6, [sp, #8]
   16e90:	mov	r5, r2
   16e94:	strd	r8, [sp, #16]
   16e98:	mov	r8, r0
   16e9c:	mov	r0, r4
   16ea0:	str	sl, [sp, #24]
   16ea4:	mov	r9, r3
   16ea8:	str	lr, [sp, #28]
   16eac:	sub	sp, sp, #8
   16eb0:	bl	151e0 <_start@@Base+0xf4>
   16eb4:	add	r3, pc, #292	; 0x124
   16eb8:	ldrd	r2, [r3]
   16ebc:	cmp	r1, r3
   16ec0:	cmpeq	r0, r2
   16ec4:	bhi	16f00 <_start@@Base+0x1e14>
   16ec8:	add	r7, pc, #280	; 0x118
   16ecc:	ldrd	r6, [r7]
   16ed0:	mov	sl, #0
   16ed4:	cmp	r1, r7
   16ed8:	cmpeq	sl, r6
   16edc:	beq	16f74 <_start@@Base+0x1e88>
   16ee0:	mov	r0, r4
   16ee4:	add	sp, sp, #8
   16ee8:	ldrd	r4, [sp]
   16eec:	ldrd	r6, [sp, #8]
   16ef0:	ldrd	r8, [sp, #16]
   16ef4:	ldr	sl, [sp, #24]
   16ef8:	add	sp, sp, #28
   16efc:	pop	{pc}		; (ldr pc, [sp], #4)
   16f00:	add	r7, pc, #232	; 0xe8
   16f04:	ldrd	r6, [r7]
   16f08:	bic	r3, r1, #255	; 0xff
   16f0c:	mov	sl, #0
   16f10:	cmp	r3, r7
   16f14:	cmpeq	sl, r6
   16f18:	beq	16fb4 <_start@@Base+0x1ec8>
   16f1c:	add	r7, pc, #212	; 0xd4
   16f20:	ldrd	r6, [r7]
   16f24:	and	r2, r0, #-16777216	; 0xff000000
   16f28:	cmp	r1, r7
   16f2c:	cmpeq	r2, r6
   16f30:	bne	16ee0 <_start@@Base+0x1df4>
   16f34:	ldr	r3, [sp, #44]	; 0x2c
   16f38:	mov	r2, r5
   16f3c:	mov	r0, r8
   16f40:	mov	r1, r4
   16f44:	str	r3, [sp]
   16f48:	mov	r3, #5
   16f4c:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16f50:	cmp	r4, r0
   16f54:	beq	16ee0 <_start@@Base+0x1df4>
   16f58:	ldr	r1, [sp, #40]	; 0x28
   16f5c:	mov	r2, #2
   16f60:	mov	r3, #0
   16f64:	mov	r4, r0
   16f68:	strd	r2, [r1]
   16f6c:	str	sl, [r9]
   16f70:	b	16ee0 <_start@@Base+0x1df4>
   16f74:	ldr	r3, [sp, #44]	; 0x2c
   16f78:	mov	r2, r5
   16f7c:	mov	r0, r8
   16f80:	mov	r1, r4
   16f84:	str	r3, [sp]
   16f88:	mov	r3, #4
   16f8c:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16f90:	cmp	r4, r0
   16f94:	movne	r2, #8
   16f98:	beq	16ee0 <_start@@Base+0x1df4>
   16f9c:	ldr	r1, [sp, #40]	; 0x28
   16fa0:	mov	r3, #0
   16fa4:	mov	r4, r0
   16fa8:	strd	r2, [r1]
   16fac:	str	sl, [r9]
   16fb0:	b	16ee0 <_start@@Base+0x1df4>
   16fb4:	ldr	r3, [sp, #44]	; 0x2c
   16fb8:	mov	r2, r5
   16fbc:	mov	r0, r8
   16fc0:	mov	r1, r4
   16fc4:	str	r3, [sp]
   16fc8:	mov	r3, #3
   16fcc:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   16fd0:	cmp	r4, r0
   16fd4:	beq	16ee0 <_start@@Base+0x1df4>
   16fd8:	mov	r2, #1
   16fdc:	b	16f9c <_start@@Base+0x1eb0>
   16fe0:	ldclvs	15, cr15, [pc, #1020]!	; 173e4 <_start@@Base+0x22f8>
   16fe4:	ldrbmi	r6, [r2, -r5, ror #10]!
   16fe8:	andeq	r0, r0, r0
   16fec:	rsbmi	r7, ip, #423624704	; 0x19400000
   16ff0:	andeq	r0, r0, r0
   16ff4:	rsbpl	r6, r5, #0, 8
   16ff8:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16ffc:	ldrbmi	r6, [r2, -r5, ror #10]!
   17000:	sub	r3, r2, r1
   17004:	cmp	r3, #1
   17008:	ble	1701c <_start@@Base+0x1f30>
   1700c:	ldrb	r3, [r1]
   17010:	cmp	r3, #32
   17014:	bhi	17020 <_start@@Base+0x1f34>
   17018:	beq	17028 <_start@@Base+0x1f3c>
   1701c:	b	2e1ec <flatcc_json_parser_space_ext@@Base>
   17020:	mov	r0, r1
   17024:	bx	lr
   17028:	ldrb	r3, [r1, #1]
   1702c:	cmp	r3, #32
   17030:	bls	1701c <_start@@Base+0x1f30>
   17034:	add	r0, r1, #1
   17038:	bx	lr
   1703c:	mov	r3, #8
   17040:	mov	r1, #0
   17044:	str	r4, [sp, #-8]!
   17048:	mov	r2, r3
   1704c:	mov	r4, r0
   17050:	str	lr, [sp, #4]
   17054:	bl	2b61c <flatcc_verify_field@@Base>
   17058:	cmp	r0, #0
   1705c:	beq	1706c <_start@@Base+0x1f80>
   17060:	ldr	r4, [sp]
   17064:	add	sp, sp, #4
   17068:	pop	{pc}		; (ldr pc, [sp], #4)
   1706c:	mov	r3, #4
   17070:	mov	r0, r4
   17074:	ldr	r4, [sp]
   17078:	mov	r2, r3
   1707c:	mov	r1, #1
   17080:	ldr	lr, [sp, #4]
   17084:	add	sp, sp, #8
   17088:	b	2b61c <flatcc_verify_field@@Base>
   1708c:	mov	r3, #1
   17090:	mov	r1, #0
   17094:	str	r4, [sp, #-8]!
   17098:	mov	r2, r3
   1709c:	mov	r4, r0
   170a0:	str	lr, [sp, #4]
   170a4:	bl	2b61c <flatcc_verify_field@@Base>
   170a8:	cmp	r0, #0
   170ac:	beq	170bc <_start@@Base+0x1fd0>
   170b0:	ldr	r4, [sp]
   170b4:	add	sp, sp, #4
   170b8:	pop	{pc}		; (ldr pc, [sp], #4)
   170bc:	mov	r3, #1
   170c0:	mov	r0, r4
   170c4:	mov	r2, r3
   170c8:	mov	r1, r3
   170cc:	bl	2b61c <flatcc_verify_field@@Base>
   170d0:	cmp	r0, #0
   170d4:	bne	170b0 <_start@@Base+0x1fc4>
   170d8:	mov	r3, #1
   170dc:	mov	r1, #2
   170e0:	mov	r2, r3
   170e4:	mov	r0, r4
   170e8:	bl	2b61c <flatcc_verify_field@@Base>
   170ec:	cmp	r0, #0
   170f0:	bne	170b0 <_start@@Base+0x1fc4>
   170f4:	mov	r3, #1
   170f8:	mov	r0, r4
   170fc:	ldr	r4, [sp]
   17100:	mov	r2, r3
   17104:	mov	r1, #3
   17108:	ldr	lr, [sp, #4]
   1710c:	add	sp, sp, #8
   17110:	b	2b61c <flatcc_verify_field@@Base>
   17114:	mov	r2, #0
   17118:	str	r4, [sp, #-8]!
   1711c:	mov	r4, r0
   17120:	mov	r1, r2
   17124:	str	lr, [sp, #4]
   17128:	bl	2b688 <flatcc_verify_string_field@@Base>
   1712c:	cmp	r0, #0
   17130:	beq	17140 <_start@@Base+0x2054>
   17134:	ldr	r4, [sp]
   17138:	add	sp, sp, #4
   1713c:	pop	{pc}		; (ldr pc, [sp], #4)
   17140:	mov	r3, #8
   17144:	mov	r1, #1
   17148:	mov	r2, r3
   1714c:	mov	r0, r4
   17150:	bl	2b61c <flatcc_verify_field@@Base>
   17154:	cmp	r0, #0
   17158:	bne	17134 <_start@@Base+0x2048>
   1715c:	mov	r3, #2
   17160:	mov	r0, r4
   17164:	ldr	r4, [sp]
   17168:	mov	r2, r3
   1716c:	mov	r1, r3
   17170:	ldr	lr, [sp, #4]
   17174:	add	sp, sp, #8
   17178:	b	2b61c <flatcc_verify_field@@Base>
   1717c:	mov	r2, #0
   17180:	str	r4, [sp, #-8]!
   17184:	mov	r4, r0
   17188:	mov	r1, r2
   1718c:	str	lr, [sp, #4]
   17190:	bl	2b688 <flatcc_verify_string_field@@Base>
   17194:	cmp	r0, #0
   17198:	beq	171a8 <_start@@Base+0x20bc>
   1719c:	ldr	r4, [sp]
   171a0:	add	sp, sp, #4
   171a4:	pop	{pc}		; (ldr pc, [sp], #4)
   171a8:	mov	r3, #4
   171ac:	mov	r1, #1
   171b0:	mov	r2, r3
   171b4:	mov	r0, r4
   171b8:	bl	2b61c <flatcc_verify_field@@Base>
   171bc:	cmp	r0, #0
   171c0:	bne	1719c <_start@@Base+0x20b0>
   171c4:	mov	r2, r0
   171c8:	mov	r1, #2
   171cc:	mov	r0, r4
   171d0:	bl	2b688 <flatcc_verify_string_field@@Base>
   171d4:	cmp	r0, #0
   171d8:	bne	1719c <_start@@Base+0x20b0>
   171dc:	mov	r3, #8
   171e0:	mov	r1, #3
   171e4:	mov	r2, r3
   171e8:	mov	r0, r4
   171ec:	bl	2b61c <flatcc_verify_field@@Base>
   171f0:	cmp	r0, #0
   171f4:	bne	1719c <_start@@Base+0x20b0>
   171f8:	mov	r2, r0
   171fc:	mov	r1, #4
   17200:	mov	r0, r4
   17204:	bl	2b688 <flatcc_verify_string_field@@Base>
   17208:	cmp	r0, #0
   1720c:	bne	1719c <_start@@Base+0x20b0>
   17210:	mov	r3, #8
   17214:	mov	r1, #5
   17218:	mov	r2, r3
   1721c:	mov	r0, r4
   17220:	bl	2b61c <flatcc_verify_field@@Base>
   17224:	cmp	r0, #0
   17228:	bne	1719c <_start@@Base+0x20b0>
   1722c:	mov	r3, #4
   17230:	mov	r1, #6
   17234:	mov	r2, r3
   17238:	mov	r0, r4
   1723c:	bl	2b61c <flatcc_verify_field@@Base>
   17240:	cmp	r0, #0
   17244:	bne	1719c <_start@@Base+0x20b0>
   17248:	mov	r3, #8
   1724c:	mov	r1, #7
   17250:	mov	r2, r3
   17254:	mov	r0, r4
   17258:	bl	2b61c <flatcc_verify_field@@Base>
   1725c:	cmp	r0, #0
   17260:	bne	1719c <_start@@Base+0x20b0>
   17264:	mov	r3, #4
   17268:	mov	r0, r4
   1726c:	ldr	r4, [sp]
   17270:	mov	r2, r3
   17274:	mov	r1, #8
   17278:	ldr	lr, [sp, #4]
   1727c:	add	sp, sp, #8
   17280:	b	2b61c <flatcc_verify_field@@Base>
   17284:	mov	r2, #0
   17288:	movw	r3, #29052	; 0x717c
   1728c:	movt	r3, #1
   17290:	mov	r1, r2
   17294:	str	r4, [sp, #-8]!
   17298:	mov	r4, r0
   1729c:	str	lr, [sp, #4]
   172a0:	bl	2ba50 <flatcc_verify_table_field@@Base>
   172a4:	cmp	r0, #0
   172a8:	beq	172b8 <_start@@Base+0x21cc>
   172ac:	ldr	r4, [sp]
   172b0:	add	sp, sp, #4
   172b4:	pop	{pc}		; (ldr pc, [sp], #4)
   172b8:	mov	r2, r0
   172bc:	movw	r3, #33888	; 0x8460
   172c0:	movt	r3, #1
   172c4:	mov	r1, #1
   172c8:	mov	r0, r4
   172cc:	bl	2ba50 <flatcc_verify_table_field@@Base>
   172d0:	cmp	r0, #0
   172d4:	bne	172ac <_start@@Base+0x21c0>
   172d8:	mov	r2, r0
   172dc:	movw	r3, #28732	; 0x703c
   172e0:	movt	r3, #1
   172e4:	mov	r0, r4
   172e8:	ldr	r4, [sp]
   172ec:	mov	r1, #2
   172f0:	ldr	lr, [sp, #4]
   172f4:	add	sp, sp, #8
   172f8:	b	2ba50 <flatcc_verify_table_field@@Base>
   172fc:	mov	r3, #16
   17300:	mov	r2, #32
   17304:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17308:	mov	r1, #0
   1730c:	strd	r6, [sp, #8]
   17310:	mov	r4, r0
   17314:	str	r8, [sp, #16]
   17318:	str	lr, [sp, #20]
   1731c:	sub	sp, sp, #8
   17320:	bl	2b61c <flatcc_verify_field@@Base>
   17324:	cmp	r0, #0
   17328:	beq	17344 <_start@@Base+0x2258>
   1732c:	add	sp, sp, #8
   17330:	ldrd	r4, [sp]
   17334:	ldrd	r6, [sp, #8]
   17338:	ldr	r8, [sp, #16]
   1733c:	add	sp, sp, #20
   17340:	pop	{pc}		; (ldr pc, [sp], #4)
   17344:	mov	r3, #2
   17348:	mov	r0, r4
   1734c:	mov	r2, r3
   17350:	mov	r1, r3
   17354:	bl	2b61c <flatcc_verify_field@@Base>
   17358:	cmp	r0, #0
   1735c:	bne	1732c <_start@@Base+0x2240>
   17360:	mov	r3, #2
   17364:	mov	r1, #1
   17368:	mov	r2, r3
   1736c:	mov	r0, r4
   17370:	bl	2b61c <flatcc_verify_field@@Base>
   17374:	cmp	r0, #0
   17378:	bne	1732c <_start@@Base+0x2240>
   1737c:	mov	r2, #1
   17380:	mov	r1, #3
   17384:	mov	r0, r4
   17388:	bl	2b688 <flatcc_verify_string_field@@Base>
   1738c:	cmp	r0, #0
   17390:	bne	1732c <_start@@Base+0x2240>
   17394:	mov	r3, #1
   17398:	mov	r1, #6
   1739c:	mov	r2, r3
   173a0:	mov	r0, r4
   173a4:	bl	2b61c <flatcc_verify_field@@Base>
   173a8:	cmp	r0, #0
   173ac:	bne	1732c <_start@@Base+0x2240>
   173b0:	mov	r5, #1
   173b4:	mvn	r6, #0
   173b8:	mov	r2, r0
   173bc:	mov	r3, r5
   173c0:	mov	r1, #5
   173c4:	mov	r0, r4
   173c8:	stm	sp, {r5, r6}
   173cc:	bl	2b768 <flatcc_verify_vector_field@@Base>
   173d0:	cmp	r0, #0
   173d4:	bne	1732c <_start@@Base+0x2240>
   173d8:	mov	r2, r0
   173dc:	movw	r3, #29436	; 0x72fc
   173e0:	movt	r3, #1
   173e4:	mov	r1, #11
   173e8:	mov	r0, r4
   173ec:	bl	2bbbc <flatcc_verify_table_vector_field@@Base>
   173f0:	cmp	r0, #0
   173f4:	bne	1732c <_start@@Base+0x2240>
   173f8:	mov	r2, r0
   173fc:	mov	r1, #10
   17400:	mov	r0, r4
   17404:	bl	2b86c <flatcc_verify_string_vector_field@@Base>
   17408:	cmp	r0, #0
   1740c:	bne	1732c <_start@@Base+0x2240>
   17410:	mov	r2, r0
   17414:	mov	r1, #28
   17418:	mov	r0, r4
   1741c:	bl	2b86c <flatcc_verify_string_vector_field@@Base>
   17420:	cmp	r0, #0
   17424:	bne	1732c <_start@@Base+0x2240>
   17428:	mov	r2, r0
   1742c:	mov	r3, r5
   17430:	stm	sp, {r5, r6}
   17434:	mov	r1, #24
   17438:	mov	r0, r4
   1743c:	bl	2b768 <flatcc_verify_vector_field@@Base>
   17440:	cmp	r0, #0
   17444:	bne	1732c <_start@@Base+0x2240>
   17448:	mvn	ip, #-536870912	; 0xe0000000
   1744c:	mov	r5, #4
   17450:	mov	r3, #8
   17454:	mov	r2, #0
   17458:	mov	r1, #29
   1745c:	mov	r0, r4
   17460:	stm	sp, {r5, ip}
   17464:	bl	2b768 <flatcc_verify_vector_field@@Base>
   17468:	cmp	r0, #0
   1746c:	bne	1732c <_start@@Base+0x2240>
   17470:	movw	r6, #29436	; 0x72fc
   17474:	movt	r6, #1
   17478:	mov	r2, r0
   1747c:	mov	r3, r6
   17480:	mov	r1, #12
   17484:	mov	r0, r4
   17488:	bl	2ba50 <flatcc_verify_table_field@@Base>
   1748c:	cmp	r0, #0
   17490:	bne	1732c <_start@@Base+0x2240>
   17494:	mov	r2, r0
   17498:	movw	r3, #30700	; 0x77ec
   1749c:	movt	r3, #1
   174a0:	mov	r1, #8
   174a4:	mov	r0, r4
   174a8:	bl	2c9fc <flatcc_verify_union_field@@Base>
   174ac:	cmp	r0, #0
   174b0:	bne	1732c <_start@@Base+0x2240>
   174b4:	mvn	r7, #-1073741824	; 0xc0000000
   174b8:	mov	r8, #2
   174bc:	mov	r2, r0
   174c0:	mov	r3, r5
   174c4:	mov	r1, #9
   174c8:	mov	r0, r4
   174cc:	str	r8, [sp]
   174d0:	str	r7, [sp, #4]
   174d4:	bl	2b768 <flatcc_verify_vector_field@@Base>
   174d8:	cmp	r0, #0
   174dc:	bne	1732c <_start@@Base+0x2240>
   174e0:	mov	r2, r0
   174e4:	mov	r3, r5
   174e8:	str	r8, [sp]
   174ec:	mov	r1, #31
   174f0:	mov	r0, r4
   174f4:	str	r7, [sp, #4]
   174f8:	bl	2b768 <flatcc_verify_vector_field@@Base>
   174fc:	cmp	r0, #0
   17500:	bne	1732c <_start@@Base+0x2240>
   17504:	mov	r7, #1
   17508:	mov	r3, r0
   1750c:	mov	r2, r0
   17510:	mov	r1, #13
   17514:	mov	r0, r4
   17518:	str	r7, [sp]
   1751c:	str	r6, [sp, #4]
   17520:	bl	2c7a4 <flatcc_verify_table_as_nested_root@@Base>
   17524:	cmp	r0, #0
   17528:	bne	1732c <_start@@Base+0x2240>
   1752c:	mov	r2, r0
   17530:	movw	r3, #28948	; 0x7114
   17534:	movt	r3, #1
   17538:	mov	r1, #14
   1753c:	mov	r0, r4
   17540:	bl	2ba50 <flatcc_verify_table_field@@Base>
   17544:	cmp	r0, #0
   17548:	bne	1732c <_start@@Base+0x2240>
   1754c:	mov	r3, r7
   17550:	mov	r2, r7
   17554:	mov	r1, #15
   17558:	mov	r0, r4
   1755c:	bl	2b61c <flatcc_verify_field@@Base>
   17560:	cmp	r0, #0
   17564:	bne	1732c <_start@@Base+0x2240>
   17568:	mov	r3, r5
   1756c:	mov	r2, r5
   17570:	mov	r1, #16
   17574:	mov	r0, r4
   17578:	bl	2b61c <flatcc_verify_field@@Base>
   1757c:	cmp	r0, #0
   17580:	bne	1732c <_start@@Base+0x2240>
   17584:	mov	r3, r5
   17588:	mov	r2, r5
   1758c:	mov	r1, #17
   17590:	mov	r0, r4
   17594:	bl	2b61c <flatcc_verify_field@@Base>
   17598:	cmp	r0, #0
   1759c:	bne	1732c <_start@@Base+0x2240>
   175a0:	mov	r3, #8
   175a4:	mov	r1, #18
   175a8:	mov	r2, r3
   175ac:	mov	r0, r4
   175b0:	bl	2b61c <flatcc_verify_field@@Base>
   175b4:	cmp	r0, #0
   175b8:	bne	1732c <_start@@Base+0x2240>
   175bc:	mov	r3, #8
   175c0:	mov	r1, #19
   175c4:	mov	r2, r3
   175c8:	mov	r0, r4
   175cc:	bl	2b61c <flatcc_verify_field@@Base>
   175d0:	cmp	r0, #0
   175d4:	bne	1732c <_start@@Base+0x2240>
   175d8:	mov	r3, r5
   175dc:	mov	r1, #20
   175e0:	mov	r2, r5
   175e4:	mov	r0, r4
   175e8:	bl	2b61c <flatcc_verify_field@@Base>
   175ec:	cmp	r0, #0
   175f0:	bne	1732c <_start@@Base+0x2240>
   175f4:	mov	r3, r5
   175f8:	mov	r1, #21
   175fc:	mov	r2, r5
   17600:	mov	r0, r4
   17604:	bl	2b61c <flatcc_verify_field@@Base>
   17608:	cmp	r0, #0
   1760c:	bne	1732c <_start@@Base+0x2240>
   17610:	mov	r3, #8
   17614:	mov	r1, #22
   17618:	mov	r2, r3
   1761c:	mov	r0, r4
   17620:	bl	2b61c <flatcc_verify_field@@Base>
   17624:	cmp	r0, #0
   17628:	bne	1732c <_start@@Base+0x2240>
   1762c:	mov	r3, #8
   17630:	mov	r1, #23
   17634:	mov	r2, r3
   17638:	mov	r0, r4
   1763c:	bl	2b61c <flatcc_verify_field@@Base>
   17640:	cmp	r0, #0
   17644:	bne	1732c <_start@@Base+0x2240>
   17648:	mov	r3, r5
   1764c:	mov	r1, #25
   17650:	mov	r2, r5
   17654:	mov	r0, r4
   17658:	bl	2b61c <flatcc_verify_field@@Base>
   1765c:	cmp	r0, #0
   17660:	bne	1732c <_start@@Base+0x2240>
   17664:	mov	r3, r5
   17668:	mov	r1, #26
   1766c:	mov	r2, r5
   17670:	mov	r0, r4
   17674:	bl	2b61c <flatcc_verify_field@@Base>
   17678:	cmp	r0, #0
   1767c:	bne	1732c <_start@@Base+0x2240>
   17680:	mov	r3, r5
   17684:	mov	r1, #27
   17688:	mov	r2, r5
   1768c:	mov	r0, r4
   17690:	bl	2b61c <flatcc_verify_field@@Base>
   17694:	cmp	r0, #0
   17698:	bne	1732c <_start@@Base+0x2240>
   1769c:	mvn	ip, #0
   176a0:	mov	r1, r7
   176a4:	mov	r2, r0
   176a8:	mov	r3, r7
   176ac:	mov	r0, r4
   176b0:	stm	sp, {r1, ip}
   176b4:	mov	r1, #30
   176b8:	bl	2b768 <flatcc_verify_vector_field@@Base>
   176bc:	cmp	r0, #0
   176c0:	bne	1732c <_start@@Base+0x2240>
   176c4:	mov	r5, #8
   176c8:	mvn	r6, #-536870912	; 0xe0000000
   176cc:	mov	r3, r5
   176d0:	mov	r2, #0
   176d4:	mov	r1, #32
   176d8:	mov	r0, r4
   176dc:	stm	sp, {r5, r6}
   176e0:	bl	2b768 <flatcc_verify_vector_field@@Base>
   176e4:	cmp	r0, #0
   176e8:	bne	1732c <_start@@Base+0x2240>
   176ec:	mov	r2, r0
   176f0:	mov	r3, r5
   176f4:	stm	sp, {r5, r6}
   176f8:	mov	r1, #33	; 0x21
   176fc:	mov	r0, r4
   17700:	bl	2b768 <flatcc_verify_vector_field@@Base>
   17704:	cmp	r0, #0
   17708:	bne	1732c <_start@@Base+0x2240>
   1770c:	mov	r2, r0
   17710:	movw	r3, #21288	; 0x5328
   17714:	movt	r3, #1
   17718:	mov	r1, #34	; 0x22
   1771c:	mov	r0, r4
   17720:	bl	2ba50 <flatcc_verify_table_field@@Base>
   17724:	cmp	r0, #0
   17728:	bne	1732c <_start@@Base+0x2240>
   1772c:	mov	r2, r0
   17730:	movw	r3, #30556	; 0x775c
   17734:	movt	r3, #1
   17738:	mov	r0, r4
   1773c:	mov	r1, #35	; 0x23
   17740:	add	sp, sp, #8
   17744:	ldrd	r4, [sp]
   17748:	ldrd	r6, [sp, #8]
   1774c:	ldr	r8, [sp, #16]
   17750:	ldr	lr, [sp, #20]
   17754:	add	sp, sp, #24
   17758:	b	2ba50 <flatcc_verify_table_field@@Base>
   1775c:	strd	r4, [sp, #-16]!
   17760:	mov	r4, #1
   17764:	mvn	r5, #0
   17768:	str	r6, [sp, #8]
   1776c:	mov	r2, #0
   17770:	mov	r3, r4
   17774:	str	lr, [sp, #12]
   17778:	sub	sp, sp, #8
   1777c:	mov	r1, r2
   17780:	mov	r6, r0
   17784:	strd	r4, [sp]
   17788:	bl	2b768 <flatcc_verify_vector_field@@Base>
   1778c:	subs	r2, r0, #0
   17790:	beq	177ac <_start@@Base+0x26c0>
   17794:	mov	r0, r2
   17798:	add	sp, sp, #8
   1779c:	ldrd	r4, [sp]
   177a0:	ldr	r6, [sp, #8]
   177a4:	add	sp, sp, #12
   177a8:	pop	{pc}		; (ldr pc, [sp], #4)
   177ac:	mov	r3, r4
   177b0:	mov	r1, r4
   177b4:	strd	r4, [sp]
   177b8:	mov	r0, r6
   177bc:	bl	2b768 <flatcc_verify_vector_field@@Base>
   177c0:	subs	r2, r0, #0
   177c4:	bne	17794 <_start@@Base+0x26a8>
   177c8:	movw	ip, #29436	; 0x72fc
   177cc:	movt	ip, #1
   177d0:	mov	r3, r2
   177d4:	mov	r0, r6
   177d8:	mov	r1, #2
   177dc:	stm	sp, {r4, ip}
   177e0:	bl	2c7a4 <flatcc_verify_table_as_nested_root@@Base>
   177e4:	mov	r2, r0
   177e8:	b	17794 <_start@@Base+0x26a8>
   177ec:	ldrb	r3, [r0, #12]
   177f0:	sub	r3, r3, #1
   177f4:	cmp	r3, #3
   177f8:	ldrls	pc, [pc, r3, lsl #2]
   177fc:	b	17840 <_start@@Base+0x2754>
   17800:	andeq	r7, r1, r4, lsr r8
   17804:	andeq	r7, r1, r8, lsr #16
   17808:	andeq	r7, r1, ip, lsl r8
   1780c:	andeq	r7, r1, r0, lsl r8
   17810:	movw	r1, #30792	; 0x7848
   17814:	movt	r1, #1
   17818:	b	2bed8 <flatcc_verify_union_table@@Base>
   1781c:	movw	r1, #32264	; 0x7e08
   17820:	movt	r1, #1
   17824:	b	2bed8 <flatcc_verify_union_table@@Base>
   17828:	movw	r1, #28812	; 0x708c
   1782c:	movt	r1, #1
   17830:	b	2bed8 <flatcc_verify_union_table@@Base>
   17834:	movw	r1, #29436	; 0x72fc
   17838:	movt	r1, #1
   1783c:	b	2bed8 <flatcc_verify_union_table@@Base>
   17840:	mov	r0, #0
   17844:	bx	lr
   17848:	mov	r2, #0
   1784c:	movw	r3, #29316	; 0x7284
   17850:	movt	r3, #1
   17854:	mov	r1, r2
   17858:	str	r4, [sp, #-8]!
   1785c:	mov	r4, r0
   17860:	str	lr, [sp, #4]
   17864:	bl	2ba50 <flatcc_verify_table_field@@Base>
   17868:	cmp	r0, #0
   1786c:	beq	1787c <_start@@Base+0x2790>
   17870:	ldr	r4, [sp]
   17874:	add	sp, sp, #4
   17878:	pop	{pc}		; (ldr pc, [sp], #4)
   1787c:	mov	r2, r0
   17880:	movw	r3, #30912	; 0x78c0
   17884:	movt	r3, #1
   17888:	mov	r1, #1
   1788c:	mov	r0, r4
   17890:	bl	2ba50 <flatcc_verify_table_field@@Base>
   17894:	cmp	r0, #0
   17898:	bne	17870 <_start@@Base+0x2784>
   1789c:	mov	r2, r0
   178a0:	movw	r3, #30700	; 0x77ec
   178a4:	movt	r3, #1
   178a8:	mov	r0, r4
   178ac:	ldr	r4, [sp]
   178b0:	mov	r1, #3
   178b4:	ldr	lr, [sp, #4]
   178b8:	add	sp, sp, #8
   178bc:	b	2cb50 <flatcc_verify_union_vector_field@@Base>
   178c0:	movw	r3, #31096	; 0x7978
   178c4:	movt	r3, #1
   178c8:	str	r4, [sp, #-8]!
   178cc:	mov	r2, #0
   178d0:	mov	r1, #1
   178d4:	str	lr, [sp, #4]
   178d8:	mov	r4, r0
   178dc:	bl	2c9fc <flatcc_verify_union_field@@Base>
   178e0:	cmp	r0, #0
   178e4:	beq	178f4 <_start@@Base+0x2808>
   178e8:	ldr	r4, [sp]
   178ec:	add	sp, sp, #4
   178f0:	pop	{pc}		; (ldr pc, [sp], #4)
   178f4:	mov	r2, r0
   178f8:	movw	r3, #31096	; 0x7978
   178fc:	movt	r3, #1
   17900:	mov	r1, #3
   17904:	mov	r0, r4
   17908:	bl	2c9fc <flatcc_verify_union_field@@Base>
   1790c:	cmp	r0, #0
   17910:	bne	178e8 <_start@@Base+0x27fc>
   17914:	mov	r2, r0
   17918:	movw	r3, #31096	; 0x7978
   1791c:	movt	r3, #1
   17920:	mov	r1, #5
   17924:	mov	r0, r4
   17928:	bl	2c9fc <flatcc_verify_union_field@@Base>
   1792c:	cmp	r0, #0
   17930:	bne	178e8 <_start@@Base+0x27fc>
   17934:	mov	r2, r0
   17938:	movw	r3, #31096	; 0x7978
   1793c:	movt	r3, #1
   17940:	mov	r1, #7
   17944:	mov	r0, r4
   17948:	bl	2c9fc <flatcc_verify_union_field@@Base>
   1794c:	cmp	r0, #0
   17950:	bne	178e8 <_start@@Base+0x27fc>
   17954:	mov	r2, r0
   17958:	movw	r3, #31096	; 0x7978
   1795c:	movt	r3, #1
   17960:	mov	r0, r4
   17964:	ldr	r4, [sp]
   17968:	mov	r1, #9
   1796c:	ldr	lr, [sp, #4]
   17970:	add	sp, sp, #8
   17974:	b	2cb50 <flatcc_verify_union_vector_field@@Base>
   17978:	ldrb	r3, [r0, #12]
   1797c:	mov	r2, r0
   17980:	cmp	r3, #10
   17984:	bhi	179ac <_start@@Base+0x28c0>
   17988:	cmp	r3, #9
   1798c:	bcs	179c4 <_start@@Base+0x28d8>
   17990:	cmp	r3, #2
   17994:	beq	179d8 <_start@@Base+0x28ec>
   17998:	cmp	r3, #8
   1799c:	bne	179d0 <_start@@Base+0x28e4>
   179a0:	mov	r2, #2
   179a4:	mov	r1, r2
   179a8:	b	2bfd4 <flatcc_verify_union_struct@@Base>
   179ac:	cmp	r3, #11
   179b0:	beq	179bc <_start@@Base+0x28d0>
   179b4:	cmp	r3, #255	; 0xff
   179b8:	bne	179d0 <_start@@Base+0x28e4>
   179bc:	mov	r0, r2
   179c0:	b	2c034 <flatcc_verify_union_string@@Base>
   179c4:	mov	r2, #4
   179c8:	mov	r1, r2
   179cc:	b	2bfd4 <flatcc_verify_union_struct@@Base>
   179d0:	mov	r0, #0
   179d4:	bx	lr
   179d8:	movw	r1, #21296	; 0x5330
   179dc:	movt	r1, #1
   179e0:	b	2bed8 <flatcc_verify_union_table@@Base>
   179e4:	sub	r1, r1, #1
   179e8:	cmp	r1, #3
   179ec:	ldrls	pc, [pc, r1, lsl #2]
   179f0:	b	17a44 <_start@@Base+0x2958>
   179f4:	andeq	r7, r1, r4, lsr sl
   179f8:	andeq	r7, r1, r4, lsr #20
   179fc:	andeq	r7, r1, r4, lsl sl
   17a00:	andeq	r7, r1, r4, lsl #20
   17a04:	movw	r1, #10348	; 0x286c
   17a08:	movt	r1, #4
   17a0c:	mov	r2, #3
   17a10:	b	35fd0 <flatcc_json_printer_enum@@Base>
   17a14:	movw	r1, #10336	; 0x2860
   17a18:	movt	r1, #4
   17a1c:	mov	r2, #8
   17a20:	b	35fd0 <flatcc_json_printer_enum@@Base>
   17a24:	movw	r1, #10312	; 0x2848
   17a28:	movt	r1, #4
   17a2c:	mov	r2, #23
   17a30:	b	35fd0 <flatcc_json_printer_enum@@Base>
   17a34:	movw	r1, #10304	; 0x2840
   17a38:	movt	r1, #4
   17a3c:	mov	r2, #7
   17a40:	b	35fd0 <flatcc_json_printer_enum@@Base>
   17a44:	movw	r1, #28864	; 0x70c0
   17a48:	movt	r1, #4
   17a4c:	mov	r2, #4
   17a50:	b	35fd0 <flatcc_json_printer_enum@@Base>
   17a54:	strd	r4, [sp, #-20]!	; 0xffffffec
   17a58:	mov	r4, #0
   17a5c:	mov	r5, #0
   17a60:	strd	r6, [sp, #8]
   17a64:	mov	r6, #0
   17a68:	cmp	r1, r2
   17a6c:	str	lr, [sp, #16]
   17a70:	sub	sp, sp, #28
   17a74:	moveq	r0, r1
   17a78:	strd	r4, [r3]
   17a7c:	str	r6, [sp, #12]
   17a80:	strd	r4, [sp, #16]
   17a84:	beq	17ab0 <_start@@Base+0x29c4>
   17a88:	add	ip, sp, #16
   17a8c:	mov	r5, r3
   17a90:	add	r3, sp, #12
   17a94:	mov	r4, r1
   17a98:	str	ip, [sp]
   17a9c:	mov	r7, r0
   17aa0:	mov	r6, r2
   17aa4:	bl	317b8 <flatcc_json_parser_integer@@Base>
   17aa8:	cmp	r4, r0
   17aac:	bne	17ac4 <_start@@Base+0x29d8>
   17ab0:	add	sp, sp, #28
   17ab4:	ldrd	r4, [sp]
   17ab8:	ldrd	r6, [sp, #8]
   17abc:	add	sp, sp, #16
   17ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ac4:	ldr	r1, [sp, #12]
   17ac8:	ldrd	r2, [sp, #16]
   17acc:	cmp	r1, #0
   17ad0:	beq	17af0 <_start@@Base+0x2a04>
   17ad4:	cmp	r3, #-2147483648	; 0x80000000
   17ad8:	cmpeq	r2, #0
   17adc:	bhi	17b18 <_start@@Base+0x2a2c>
   17ae0:	rsbs	r2, r2, #0
   17ae4:	rsc	r3, r3, #0
   17ae8:	strd	r2, [r5]
   17aec:	b	17ab0 <_start@@Base+0x29c4>
   17af0:	cmp	r2, #0
   17af4:	sbcs	r1, r3, #0
   17af8:	strdge	r2, [r5]
   17afc:	bge	17ab0 <_start@@Base+0x29c4>
   17b00:	mov	r1, r0
   17b04:	mov	r2, r6
   17b08:	mov	r0, r7
   17b0c:	mov	r3, #7
   17b10:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   17b14:	b	17ab0 <_start@@Base+0x29c4>
   17b18:	mov	r1, r0
   17b1c:	mov	r2, r6
   17b20:	mov	r0, r7
   17b24:	mov	r3, #8
   17b28:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   17b2c:	b	17ab0 <_start@@Base+0x29c4>
   17b30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17b34:	mov	r4, r1
   17b38:	mov	r1, r2
   17b3c:	strd	r6, [sp, #8]
   17b40:	mov	r6, r0
   17b44:	mov	r0, r4
   17b48:	strd	r8, [sp, #16]
   17b4c:	mov	r5, r2
   17b50:	mov	r7, r3
   17b54:	str	sl, [sp, #24]
   17b58:	str	lr, [sp, #28]
   17b5c:	sub	sp, sp, #8
   17b60:	bl	151e0 <_start@@Base+0xf4>
   17b64:	add	r3, pc, #260	; 0x104
   17b68:	ldrd	r2, [r3]
   17b6c:	cmp	r1, r3
   17b70:	cmpeq	r0, r2
   17b74:	beq	17bec <_start@@Base+0x2b00>
   17b78:	add	r9, pc, #248	; 0xf8
   17b7c:	ldrd	r8, [r9]
   17b80:	mov	sl, #0
   17b84:	cmp	r1, r9
   17b88:	cmpeq	sl, r8
   17b8c:	beq	17bb0 <_start@@Base+0x2ac4>
   17b90:	mov	r0, r4
   17b94:	add	sp, sp, #8
   17b98:	ldrd	r4, [sp]
   17b9c:	ldrd	r6, [sp, #8]
   17ba0:	ldrd	r8, [sp, #16]
   17ba4:	ldr	sl, [sp, #24]
   17ba8:	add	sp, sp, #28
   17bac:	pop	{pc}		; (ldr pc, [sp], #4)
   17bb0:	ldr	r3, [sp, #44]	; 0x2c
   17bb4:	mov	r2, r5
   17bb8:	mov	r0, r6
   17bbc:	mov	r1, r4
   17bc0:	str	r3, [sp]
   17bc4:	mov	r3, #4
   17bc8:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   17bcc:	cmp	r4, r0
   17bd0:	beq	17b94 <_start@@Base+0x2aa8>
   17bd4:	ldr	r1, [sp, #40]	; 0x28
   17bd8:	mov	r2, #0
   17bdc:	mov	r3, #0
   17be0:	strd	r2, [r1]
   17be4:	str	sl, [r7]
   17be8:	b	17b94 <_start@@Base+0x2aa8>
   17bec:	mov	r1, r5
   17bf0:	add	r0, r4, #8
   17bf4:	bl	151e0 <_start@@Base+0xf4>
   17bf8:	add	r3, pc, #128	; 0x80
   17bfc:	ldrd	r2, [r3]
   17c00:	cmp	r1, r3
   17c04:	cmpeq	r0, r2
   17c08:	bne	17b90 <_start@@Base+0x2aa4>
   17c0c:	add	r8, r4, #16
   17c10:	mov	r1, r5
   17c14:	mov	r0, r8
   17c18:	mov	r9, #0
   17c1c:	bl	151e0 <_start@@Base+0xf4>
   17c20:	and	r3, r1, #-16777216	; 0xff000000
   17c24:	cmp	r3, #1694498816	; 0x65000000
   17c28:	cmpeq	r9, #0
   17c2c:	bne	17b90 <_start@@Base+0x2aa4>
   17c30:	ldr	r3, [sp, #44]	; 0x2c
   17c34:	mov	r2, r5
   17c38:	mov	r0, r6
   17c3c:	mov	r1, r8
   17c40:	str	r3, [sp]
   17c44:	mov	r3, #1
   17c48:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   17c4c:	cmp	r8, r0
   17c50:	beq	17b90 <_start@@Base+0x2aa4>
   17c54:	ldr	r1, [sp, #40]	; 0x28
   17c58:	mov	r2, #1
   17c5c:	mov	r3, #0
   17c60:	strd	r2, [r1]
   17c64:	str	r9, [r7]
   17c68:	b	17b94 <_start@@Base+0x2aa8>
   17c6c:	nop	{0}
   17c70:	rsbvc	r6, r5, #116, 28	; 0x740
   17c74:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   17c78:	andeq	r0, r0, r0
   17c7c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17c80:	cmnvc	r0, #-1073741800	; 0xc0000018
   17c84:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17c88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17c8c:	strd	r6, [sp, #8]
   17c90:	mov	r7, r2
   17c94:	mov	r6, r1
   17c98:	movw	r2, #10352	; 0x2870
   17c9c:	movt	r2, #4
   17ca0:	strd	r8, [sp, #16]
   17ca4:	movw	r1, #10368	; 0x2880
   17ca8:	movt	r1, #4
   17cac:	strd	sl, [sp, #24]
   17cb0:	mov	r8, r0
   17cb4:	mov	r0, r7
   17cb8:	str	lr, [sp, #32]
   17cbc:	sub	sp, sp, #36	; 0x24
   17cc0:	bl	14584 <fprintf@plt>
   17cc4:	cmp	r6, #0
   17cc8:	beq	17dfc <_start@@Base+0x2d10>
   17ccc:	movw	fp, #10384	; 0x2890
   17cd0:	movt	fp, #4
   17cd4:	movw	sl, #10376	; 0x2888
   17cd8:	movt	sl, #4
   17cdc:	movw	r9, #10392	; 0x2898
   17ce0:	movt	r9, #4
   17ce4:	add	r3, sp, #12
   17ce8:	sub	r8, r8, #1
   17cec:	mov	r4, #0
   17cf0:	str	r3, [sp, #4]
   17cf4:	ands	r5, r4, #15
   17cf8:	bne	17de4 <_start@@Base+0x2cf8>
   17cfc:	cmp	r4, #0
   17d00:	mov	r1, sl
   17d04:	ldr	r2, [sp, #4]
   17d08:	mov	r0, r7
   17d0c:	beq	17d14 <_start@@Base+0x2c28>
   17d10:	bl	14584 <fprintf@plt>
   17d14:	mov	r2, r4
   17d18:	mov	r1, fp
   17d1c:	mov	r0, r7
   17d20:	bl	14584 <fprintf@plt>
   17d24:	ldrb	r2, [r8, #1]!
   17d28:	mov	r1, r9
   17d2c:	mov	r0, r7
   17d30:	bl	14584 <fprintf@plt>
   17d34:	add	r3, sp, #32
   17d38:	mov	lr, #46	; 0x2e
   17d3c:	add	r2, r3, r5
   17d40:	mov	ip, #0
   17d44:	mov	r5, r2
   17d48:	add	r4, r4, #1
   17d4c:	ldrb	r3, [r8]
   17d50:	sub	r1, r3, #32
   17d54:	cmp	r1, #94	; 0x5e
   17d58:	bls	17dcc <_start@@Base+0x2ce0>
   17d5c:	cmp	r6, r4
   17d60:	strb	lr, [r2, #-20]	; 0xffffffec
   17d64:	strb	ip, [r2, #-19]	; 0xffffffed
   17d68:	bne	17cf4 <_start@@Base+0x2c08>
   17d6c:	tst	r6, #15
   17d70:	beq	17d9c <_start@@Base+0x2cb0>
   17d74:	movw	r4, #10400	; 0x28a0
   17d78:	movt	r4, #4
   17d7c:	add	r6, r6, #1
   17d80:	mov	r3, r7
   17d84:	mov	r2, #3
   17d88:	mov	r1, #1
   17d8c:	mov	r0, r4
   17d90:	bl	14548 <fwrite@plt>
   17d94:	tst	r6, #15
   17d98:	bne	17d7c <_start@@Base+0x2c90>
   17d9c:	ldr	r2, [sp, #4]
   17da0:	mov	r0, r7
   17da4:	movw	r1, #10376	; 0x2888
   17da8:	movt	r1, #4
   17dac:	bl	14584 <fprintf@plt>
   17db0:	add	sp, sp, #36	; 0x24
   17db4:	ldrd	r4, [sp]
   17db8:	ldrd	r6, [sp, #8]
   17dbc:	ldrd	r8, [sp, #16]
   17dc0:	ldrd	sl, [sp, #24]
   17dc4:	add	sp, sp, #32
   17dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dcc:	cmp	r4, r6
   17dd0:	strb	r3, [r2, #-20]	; 0xffffffec
   17dd4:	strb	ip, [r5, #-19]	; 0xffffffed
   17dd8:	beq	17d6c <_start@@Base+0x2c80>
   17ddc:	ands	r5, r4, #15
   17de0:	beq	17cfc <_start@@Base+0x2c10>
   17de4:	tst	r4, #7
   17de8:	bne	17d24 <_start@@Base+0x2c38>
   17dec:	mov	r1, r7
   17df0:	mov	r0, #32
   17df4:	bl	145cc <fputc@plt>
   17df8:	b	17d24 <_start@@Base+0x2c38>
   17dfc:	add	r3, sp, #12
   17e00:	str	r3, [sp, #4]
   17e04:	b	17d9c <_start@@Base+0x2cb0>
   17e08:	mov	r0, #0
   17e0c:	bx	lr
   17e10:	bx	lr
   17e14:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17e18:	mov	r5, #0
   17e1c:	mov	r4, r0
   17e20:	strd	r6, [sp, #8]
   17e24:	mov	r6, r1
   17e28:	mov	r7, r2
   17e2c:	strd	r8, [sp, #16]
   17e30:	mov	r8, r3
   17e34:	str	lr, [sp, #24]
   17e38:	sub	sp, sp, #356	; 0x164
   17e3c:	add	r0, sp, #120	; 0x78
   17e40:	bl	25ab4 <flatcc_builder_init@@Base>
   17e44:	mov	r1, r5
   17e48:	add	r0, sp, #72	; 0x48
   17e4c:	bl	419d8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   17e50:	mov	r0, r6
   17e54:	str	r5, [sp, #98]	; 0x62
   17e58:	bl	14578 <strlen@plt>
   17e5c:	ldr	lr, [r4]
   17e60:	mov	r3, r0
   17e64:	mov	r2, r6
   17e68:	str	r5, [sp]
   17e6c:	add	r0, sp, #120	; 0x78
   17e70:	add	r1, sp, #28
   17e74:	ldr	ip, [r4, #4]
   17e78:	str	lr, [sp, #4]
   17e7c:	str	ip, [sp, #8]
   17e80:	bl	33440 <flatcc_json_parser_table_as_root@@Base>
   17e84:	cmp	r0, r5
   17e88:	bne	17f2c <_start@@Base+0x2e40>
   17e8c:	add	r1, sp, #20
   17e90:	add	r0, sp, #120	; 0x78
   17e94:	bl	2aeb8 <flatcc_builder_finalize_aligned_buffer@@Base>
   17e98:	ldr	r2, [r4]
   17e9c:	mov	r5, r0
   17ea0:	ldr	r3, [r4, #12]
   17ea4:	ldr	r1, [sp, #20]
   17ea8:	bl	2c328 <flatcc_verify_table_as_root@@Base>
   17eac:	cmp	r0, #0
   17eb0:	bne	18038 <_start@@Base+0x2f4c>
   17eb4:	mov	r1, r5
   17eb8:	add	r0, sp, #72	; 0x48
   17ebc:	ldr	r3, [r4]
   17ec0:	ldr	ip, [r4, #8]
   17ec4:	ldr	r2, [sp, #20]
   17ec8:	str	ip, [sp]
   17ecc:	bl	41234 <flatcc_json_printer_table_as_root@@Base>
   17ed0:	add	r1, sp, #24
   17ed4:	add	r0, sp, #72	; 0x48
   17ed8:	bl	41a7c <flatcc_json_printer_get_buffer@@Base>
   17edc:	subs	r6, r0, #0
   17ee0:	beq	17fb8 <_start@@Base+0x2ecc>
   17ee4:	mov	r1, r6
   17ee8:	mov	r0, r7
   17eec:	bl	14500 <strcmp@plt>
   17ef0:	subs	r4, r0, #0
   17ef4:	bne	17fb8 <_start@@Base+0x2ecc>
   17ef8:	mov	r0, r5
   17efc:	bl	2afe8 <flatcc_builder_aligned_free@@Base>
   17f00:	add	r0, sp, #120	; 0x78
   17f04:	bl	25c7c <flatcc_builder_clear@@Base>
   17f08:	add	r0, sp, #72	; 0x48
   17f0c:	bl	41b18 <flatcc_json_printer_clear@@Base>
   17f10:	mov	r0, r4
   17f14:	add	sp, sp, #356	; 0x164
   17f18:	ldrd	r4, [sp]
   17f1c:	ldrd	r6, [sp, #8]
   17f20:	ldrd	r8, [sp, #16]
   17f24:	add	sp, sp, #24
   17f28:	pop	{pc}		; (ldr pc, [sp], #4)
   17f2c:	movw	r9, #37808	; 0x93b0
   17f30:	movt	r9, #5
   17f34:	ldr	r4, [r9]
   17f38:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   17f3c:	mov	r3, r0
   17f40:	mov	r2, r8
   17f44:	movw	r1, #10404	; 0x28a4
   17f48:	movt	r1, #4
   17f4c:	mov	r0, r4
   17f50:	bl	14584 <fprintf@plt>
   17f54:	mov	r2, r6
   17f58:	movw	r1, #10768	; 0x2a10
   17f5c:	movt	r1, #4
   17f60:	ldr	r0, [r9]
   17f64:	bl	14584 <fprintf@plt>
   17f68:	ldr	r3, [sp, #48]	; 0x30
   17f6c:	cmp	r3, #1
   17f70:	ble	17f94 <_start@@Base+0x2ea8>
   17f74:	mov	r0, #32
   17f78:	ldr	r1, [r9]
   17f7c:	add	r5, r5, #1
   17f80:	bl	145cc <fputc@plt>
   17f84:	ldr	r3, [sp, #48]	; 0x30
   17f88:	sub	r3, r3, #1
   17f8c:	cmp	r5, r3
   17f90:	blt	17f74 <_start@@Base+0x2e88>
   17f94:	movw	r0, #10440	; 0x28c8
   17f98:	movt	r0, #4
   17f9c:	ldr	r3, [r9]
   17fa0:	mov	r2, #2
   17fa4:	mov	r1, #1
   17fa8:	mov	r5, #0
   17fac:	mvn	r4, #0
   17fb0:	bl	14548 <fwrite@plt>
   17fb4:	b	17ef8 <_start@@Base+0x2e0c>
   17fb8:	movw	r9, #37808	; 0x93b0
   17fbc:	movt	r9, #5
   17fc0:	mov	r2, r8
   17fc4:	movw	r1, #10560	; 0x2940
   17fc8:	movt	r1, #4
   17fcc:	ldr	r0, [r9]
   17fd0:	bl	14584 <fprintf@plt>
   17fd4:	mov	r2, r6
   17fd8:	movw	r1, #10768	; 0x2a10
   17fdc:	movt	r1, #4
   17fe0:	ldr	r0, [r9]
   17fe4:	bl	14584 <fprintf@plt>
   17fe8:	mov	r2, #10
   17fec:	mov	r1, #1
   17ff0:	ldr	r3, [r9]
   17ff4:	movw	r0, #10616	; 0x2978
   17ff8:	movt	r0, #4
   17ffc:	bl	14548 <fwrite@plt>
   18000:	movw	r1, #10768	; 0x2a10
   18004:	movt	r1, #4
   18008:	ldr	r0, [r9]
   1800c:	mov	r2, r7
   18010:	bl	14584 <fprintf@plt>
   18014:	cmp	r5, #0
   18018:	mvneq	r4, #0
   1801c:	beq	17ef8 <_start@@Base+0x2e0c>
   18020:	mov	r0, r5
   18024:	ldr	r2, [r9]
   18028:	mvn	r4, #0
   1802c:	ldr	r1, [sp, #20]
   18030:	bl	17c88 <_start@@Base+0x2b9c>
   18034:	b	17ef8 <_start@@Base+0x2e0c>
   18038:	movw	r9, #37808	; 0x93b0
   1803c:	movt	r9, #5
   18040:	ldr	r4, [r9]
   18044:	bl	2b5f8 <flatcc_verify_error_string@@Base>
   18048:	mov	r3, r8
   1804c:	movw	r2, #10444	; 0x28cc
   18050:	movt	r2, #4
   18054:	movw	r1, #10520	; 0x2918
   18058:	movt	r1, #4
   1805c:	str	r0, [sp]
   18060:	mov	r0, r4
   18064:	bl	14584 <fprintf@plt>
   18068:	b	18014 <_start@@Base+0x2f28>
   1806c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18070:	mov	r4, #0
   18074:	mov	r5, #0
   18078:	strd	r6, [sp, #8]
   1807c:	mov	r6, #0
   18080:	cmp	r1, r2
   18084:	str	lr, [sp, #16]
   18088:	sub	sp, sp, #28
   1808c:	moveq	r0, r1
   18090:	strd	r4, [r3]
   18094:	str	r6, [sp, #12]
   18098:	strd	r4, [sp, #16]
   1809c:	beq	180dc <_start@@Base+0x2ff0>
   180a0:	add	ip, sp, #16
   180a4:	mov	r5, r3
   180a8:	add	r3, sp, #12
   180ac:	mov	r4, r1
   180b0:	str	ip, [sp]
   180b4:	mov	r7, r0
   180b8:	mov	r6, r2
   180bc:	bl	317b8 <flatcc_json_parser_integer@@Base>
   180c0:	cmp	r4, r0
   180c4:	beq	180dc <_start@@Base+0x2ff0>
   180c8:	ldr	r3, [sp, #12]
   180cc:	cmp	r3, #0
   180d0:	bne	180f0 <_start@@Base+0x3004>
   180d4:	ldrd	r2, [sp, #16]
   180d8:	strd	r2, [r5]
   180dc:	add	sp, sp, #28
   180e0:	ldrd	r4, [sp]
   180e4:	ldrd	r6, [sp, #8]
   180e8:	add	sp, sp, #16
   180ec:	pop	{pc}		; (ldr pc, [sp], #4)
   180f0:	mov	r1, r0
   180f4:	mov	r2, r6
   180f8:	mov	r0, r7
   180fc:	mov	r3, #8
   18100:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   18104:	b	180dc <_start@@Base+0x2ff0>
   18108:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1810c:	cmp	r1, r2
   18110:	strd	r6, [sp, #8]
   18114:	mov	r6, #0
   18118:	mov	r7, #0
   1811c:	strd	r8, [sp, #16]
   18120:	moveq	r0, r1
   18124:	str	lr, [sp, #24]
   18128:	sub	sp, sp, #28
   1812c:	mov	lr, #0
   18130:	str	lr, [r3]
   18134:	str	lr, [sp, #12]
   18138:	strd	r6, [sp, #16]
   1813c:	beq	18168 <_start@@Base+0x307c>
   18140:	add	ip, sp, #16
   18144:	mov	r5, r3
   18148:	add	r3, sp, #12
   1814c:	mov	r4, r1
   18150:	str	ip, [sp]
   18154:	mov	r7, r0
   18158:	mov	r6, r2
   1815c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   18160:	cmp	r4, r0
   18164:	bne	18180 <_start@@Base+0x3094>
   18168:	add	sp, sp, #28
   1816c:	ldrd	r4, [sp]
   18170:	ldrd	r6, [sp, #8]
   18174:	ldrd	r8, [sp, #16]
   18178:	add	sp, sp, #24
   1817c:	pop	{pc}		; (ldr pc, [sp], #4)
   18180:	ldr	r3, [sp, #12]
   18184:	cmp	r3, #0
   18188:	bne	181c0 <_start@@Base+0x30d4>
   1818c:	ldrd	r2, [sp, #16]
   18190:	mov	r9, #0
   18194:	mvn	r8, #0
   18198:	cmp	r3, r9
   1819c:	cmpeq	r2, r8
   181a0:	strls	r2, [r5]
   181a4:	bls	18168 <_start@@Base+0x307c>
   181a8:	mov	r1, r0
   181ac:	mov	r2, r6
   181b0:	mov	r0, r7
   181b4:	mov	r3, #7
   181b8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   181bc:	b	18168 <_start@@Base+0x307c>
   181c0:	mov	r1, r0
   181c4:	mov	r2, r6
   181c8:	mov	r0, r7
   181cc:	mov	r3, #8
   181d0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   181d4:	b	18168 <_start@@Base+0x307c>
   181d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   181dc:	cmp	r1, r2
   181e0:	strd	r6, [sp, #8]
   181e4:	mov	r6, #0
   181e8:	mov	r7, #0
   181ec:	str	lr, [sp, #16]
   181f0:	sub	sp, sp, #28
   181f4:	mov	lr, #0
   181f8:	moveq	r0, r1
   181fc:	strb	lr, [r3]
   18200:	str	lr, [sp, #12]
   18204:	strd	r6, [sp, #16]
   18208:	beq	18234 <_start@@Base+0x3148>
   1820c:	add	ip, sp, #16
   18210:	mov	r5, r3
   18214:	add	r3, sp, #12
   18218:	mov	r4, r1
   1821c:	str	ip, [sp]
   18220:	mov	r7, r0
   18224:	mov	r6, r2
   18228:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1822c:	cmp	r4, r0
   18230:	bne	18248 <_start@@Base+0x315c>
   18234:	add	sp, sp, #28
   18238:	ldrd	r4, [sp]
   1823c:	ldrd	r6, [sp, #8]
   18240:	add	sp, sp, #16
   18244:	pop	{pc}		; (ldr pc, [sp], #4)
   18248:	ldr	r3, [sp, #12]
   1824c:	cmp	r3, #0
   18250:	bne	18280 <_start@@Base+0x3194>
   18254:	ldrd	r2, [sp, #16]
   18258:	cmp	r3, #0
   1825c:	cmpeq	r2, #255	; 0xff
   18260:	strbls	r2, [r5]
   18264:	bls	18234 <_start@@Base+0x3148>
   18268:	mov	r1, r0
   1826c:	mov	r2, r6
   18270:	mov	r0, r7
   18274:	mov	r3, #7
   18278:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1827c:	b	18234 <_start@@Base+0x3148>
   18280:	mov	r1, r0
   18284:	mov	r2, r6
   18288:	mov	r0, r7
   1828c:	mov	r3, #8
   18290:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   18294:	b	18234 <_start@@Base+0x3148>
   18298:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1829c:	cmp	r1, r2
   182a0:	strd	r6, [sp, #8]
   182a4:	mov	r6, #0
   182a8:	mov	r7, #0
   182ac:	strd	r8, [sp, #16]
   182b0:	moveq	r0, r1
   182b4:	str	lr, [sp, #24]
   182b8:	sub	sp, sp, #28
   182bc:	mov	lr, #0
   182c0:	str	lr, [r3]
   182c4:	str	lr, [sp, #12]
   182c8:	strd	r6, [sp, #16]
   182cc:	beq	182f8 <_start@@Base+0x320c>
   182d0:	add	ip, sp, #16
   182d4:	mov	r5, r3
   182d8:	add	r3, sp, #12
   182dc:	mov	r4, r1
   182e0:	str	ip, [sp]
   182e4:	mov	r7, r0
   182e8:	mov	r6, r2
   182ec:	bl	317b8 <flatcc_json_parser_integer@@Base>
   182f0:	cmp	r4, r0
   182f4:	bne	18310 <_start@@Base+0x3224>
   182f8:	add	sp, sp, #28
   182fc:	ldrd	r4, [sp]
   18300:	ldrd	r6, [sp, #8]
   18304:	ldrd	r8, [sp, #16]
   18308:	add	sp, sp, #24
   1830c:	pop	{pc}		; (ldr pc, [sp], #4)
   18310:	ldr	r1, [sp, #12]
   18314:	ldrd	r2, [sp, #16]
   18318:	cmp	r1, #0
   1831c:	beq	1834c <_start@@Base+0x3260>
   18320:	cmp	r3, #0
   18324:	cmpeq	r2, #-2147483648	; 0x80000000
   18328:	rsbls	r2, r2, #0
   1832c:	strls	r2, [r5]
   18330:	bls	182f8 <_start@@Base+0x320c>
   18334:	mov	r1, r0
   18338:	mov	r2, r6
   1833c:	mov	r0, r7
   18340:	mov	r3, #8
   18344:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   18348:	b	182f8 <_start@@Base+0x320c>
   1834c:	mov	r9, #0
   18350:	mvn	r8, #-2147483648	; 0x80000000
   18354:	cmp	r3, r9
   18358:	cmpeq	r2, r8
   1835c:	strls	r2, [r5]
   18360:	bls	182f8 <_start@@Base+0x320c>
   18364:	mov	r1, r0
   18368:	mov	r2, r6
   1836c:	mov	r0, r7
   18370:	mov	r3, #7
   18374:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   18378:	b	182f8 <_start@@Base+0x320c>
   1837c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18380:	cmp	r1, r2
   18384:	strd	r6, [sp, #8]
   18388:	mov	r6, #0
   1838c:	mov	r7, #0
   18390:	strd	r8, [sp, #16]
   18394:	moveq	r0, r1
   18398:	str	lr, [sp, #24]
   1839c:	sub	sp, sp, #28
   183a0:	mov	lr, #0
   183a4:	strh	lr, [r3]
   183a8:	str	lr, [sp, #12]
   183ac:	strd	r6, [sp, #16]
   183b0:	beq	183dc <_start@@Base+0x32f0>
   183b4:	add	ip, sp, #16
   183b8:	mov	r5, r3
   183bc:	add	r3, sp, #12
   183c0:	mov	r4, r1
   183c4:	str	ip, [sp]
   183c8:	mov	r7, r0
   183cc:	mov	r6, r2
   183d0:	bl	317b8 <flatcc_json_parser_integer@@Base>
   183d4:	cmp	r4, r0
   183d8:	bne	183f4 <_start@@Base+0x3308>
   183dc:	add	sp, sp, #28
   183e0:	ldrd	r4, [sp]
   183e4:	ldrd	r6, [sp, #8]
   183e8:	ldrd	r8, [sp, #16]
   183ec:	add	sp, sp, #24
   183f0:	pop	{pc}		; (ldr pc, [sp], #4)
   183f4:	ldr	r1, [sp, #12]
   183f8:	ldrd	r2, [sp, #16]
   183fc:	cmp	r1, #0
   18400:	beq	18430 <_start@@Base+0x3344>
   18404:	cmp	r3, #0
   18408:	cmpeq	r2, #32768	; 0x8000
   1840c:	rsbls	r2, r2, #0
   18410:	strhls	r2, [r5]
   18414:	bls	183dc <_start@@Base+0x32f0>
   18418:	mov	r1, r0
   1841c:	mov	r2, r6
   18420:	mov	r0, r7
   18424:	mov	r3, #8
   18428:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1842c:	b	183dc <_start@@Base+0x32f0>
   18430:	mov	r9, #0
   18434:	movw	r8, #32767	; 0x7fff
   18438:	cmp	r3, r9
   1843c:	cmpeq	r2, r8
   18440:	strhls	r2, [r5]
   18444:	bls	183dc <_start@@Base+0x32f0>
   18448:	mov	r1, r0
   1844c:	mov	r2, r6
   18450:	mov	r0, r7
   18454:	mov	r3, #7
   18458:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1845c:	b	183dc <_start@@Base+0x32f0>
   18460:	mov	r3, #8
   18464:	mov	r1, #0
   18468:	str	r4, [sp, #-8]!
   1846c:	mov	r2, r3
   18470:	mov	r4, r0
   18474:	str	lr, [sp, #4]
   18478:	bl	2b61c <flatcc_verify_field@@Base>
   1847c:	cmp	r0, #0
   18480:	beq	18490 <_start@@Base+0x33a4>
   18484:	ldr	r4, [sp]
   18488:	add	sp, sp, #4
   1848c:	pop	{pc}		; (ldr pc, [sp], #4)
   18490:	mov	r3, #4
   18494:	mov	r0, r4
   18498:	ldr	r4, [sp]
   1849c:	mov	r2, r3
   184a0:	mov	r1, #1
   184a4:	ldr	lr, [sp, #4]
   184a8:	add	sp, sp, #8
   184ac:	b	2b61c <flatcc_verify_field@@Base>
   184b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   184b4:	mov	r5, r0
   184b8:	strd	r6, [sp, #8]
   184bc:	mov	r6, r2
   184c0:	mov	r7, r1
   184c4:	str	r8, [sp, #16]
   184c8:	mov	r8, r3
   184cc:	str	lr, [sp, #20]
   184d0:	sub	sp, sp, #352	; 0x160
   184d4:	ldr	r4, [sp, #376]	; 0x178
   184d8:	add	r0, sp, #120	; 0x78
   184dc:	bl	25ab4 <flatcc_builder_init@@Base>
   184e0:	mov	r1, #0
   184e4:	add	r0, sp, #72	; 0x48
   184e8:	bl	419d8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   184ec:	ubfx	r3, r4, #3, #1
   184f0:	tst	r4, #16
   184f4:	and	r0, r4, #1
   184f8:	ubfx	r1, r4, #1, #1
   184fc:	ubfx	r2, r4, #2, #1
   18500:	strb	r0, [sp, #98]	; 0x62
   18504:	strb	r3, [sp, #101]	; 0x65
   18508:	movne	r3, #2
   1850c:	strb	r1, [sp, #99]	; 0x63
   18510:	strbne	r3, [sp, #97]	; 0x61
   18514:	tst	r4, #32
   18518:	strb	r2, [sp, #100]	; 0x64
   1851c:	beq	18530 <_start@@Base+0x3444>
   18520:	mov	r2, #2
   18524:	mov	r3, #1
   18528:	strb	r2, [sp, #97]	; 0x61
   1852c:	strh	r3, [sp, #98]	; 0x62
   18530:	mov	r0, r5
   18534:	movw	r4, #10628	; 0x2984
   18538:	movt	r4, #4
   1853c:	bl	14578 <strlen@plt>
   18540:	movw	ip, #54256	; 0xd3f0
   18544:	movt	ip, #1
   18548:	str	r8, [sp]
   1854c:	mov	r3, r0
   18550:	mov	r2, r5
   18554:	add	r1, sp, #28
   18558:	add	r0, sp, #120	; 0x78
   1855c:	stmib	sp, {r4, ip}
   18560:	bl	33440 <flatcc_json_parser_table_as_root@@Base>
   18564:	cmp	r0, r6
   18568:	bne	186a4 <_start@@Base+0x35b8>
   1856c:	cmp	r6, #0
   18570:	movne	r5, #0
   18574:	movne	r4, r5
   18578:	beq	185b0 <_start@@Base+0x34c4>
   1857c:	mov	r0, r5
   18580:	bl	2afe8 <flatcc_builder_aligned_free@@Base>
   18584:	add	r0, sp, #120	; 0x78
   18588:	bl	25c7c <flatcc_builder_clear@@Base>
   1858c:	add	r0, sp, #72	; 0x48
   18590:	bl	41b18 <flatcc_json_printer_clear@@Base>
   18594:	mov	r0, r4
   18598:	add	sp, sp, #352	; 0x160
   1859c:	ldrd	r4, [sp]
   185a0:	ldrd	r6, [sp, #8]
   185a4:	ldr	r8, [sp, #16]
   185a8:	add	sp, sp, #20
   185ac:	pop	{pc}		; (ldr pc, [sp], #4)
   185b0:	add	r1, sp, #20
   185b4:	add	r0, sp, #120	; 0x78
   185b8:	bl	2aeb8 <flatcc_builder_finalize_aligned_buffer@@Base>
   185bc:	movw	r3, #29436	; 0x72fc
   185c0:	movt	r3, #1
   185c4:	ldr	r1, [sp, #20]
   185c8:	mov	r2, r4
   185cc:	mov	r5, r0
   185d0:	bl	2c328 <flatcc_verify_table_as_root@@Base>
   185d4:	cmp	r0, #0
   185d8:	bne	187a8 <_start@@Base+0x36bc>
   185dc:	movw	r0, #22108	; 0x565c
   185e0:	movt	r0, #1
   185e4:	ldr	r2, [sp, #20]
   185e8:	mov	r3, r4
   185ec:	mov	r1, r5
   185f0:	str	r0, [sp]
   185f4:	add	r0, sp, #72	; 0x48
   185f8:	bl	41234 <flatcc_json_printer_table_as_root@@Base>
   185fc:	add	r1, sp, #24
   18600:	add	r0, sp, #72	; 0x48
   18604:	bl	41a7c <flatcc_json_printer_get_buffer@@Base>
   18608:	subs	r6, r0, #0
   1860c:	beq	18624 <_start@@Base+0x3538>
   18610:	mov	r1, r6
   18614:	mov	r0, r7
   18618:	bl	14500 <strcmp@plt>
   1861c:	subs	r4, r0, #0
   18620:	beq	1857c <_start@@Base+0x3490>
   18624:	movw	r8, #37808	; 0x93b0
   18628:	movt	r8, #5
   1862c:	ldr	r2, [sp, #380]	; 0x17c
   18630:	movw	r1, #10560	; 0x2940
   18634:	movt	r1, #4
   18638:	ldr	r0, [r8]
   1863c:	bl	14584 <fprintf@plt>
   18640:	mov	r2, r6
   18644:	movw	r1, #10768	; 0x2a10
   18648:	movt	r1, #4
   1864c:	ldr	r0, [r8]
   18650:	bl	14584 <fprintf@plt>
   18654:	mov	r2, #10
   18658:	mov	r1, #1
   1865c:	ldr	r3, [r8]
   18660:	movw	r0, #10616	; 0x2978
   18664:	movt	r0, #4
   18668:	bl	14548 <fwrite@plt>
   1866c:	movw	r1, #10768	; 0x2a10
   18670:	movt	r1, #4
   18674:	ldr	r0, [r8]
   18678:	mov	r2, r7
   1867c:	bl	14584 <fprintf@plt>
   18680:	cmp	r5, #0
   18684:	mvneq	r4, #0
   18688:	beq	1857c <_start@@Base+0x3490>
   1868c:	mov	r0, r5
   18690:	ldr	r2, [r8]
   18694:	mvn	r4, #0
   18698:	ldr	r1, [sp, #20]
   1869c:	bl	17c88 <_start@@Base+0x2b9c>
   186a0:	b	1857c <_start@@Base+0x3490>
   186a4:	movw	r8, #37808	; 0x93b0
   186a8:	movt	r8, #5
   186ac:	cmp	r6, #0
   186b0:	ldr	r4, [r8]
   186b4:	beq	18788 <_start@@Base+0x369c>
   186b8:	cmp	r0, #0
   186bc:	beq	18764 <_start@@Base+0x3678>
   186c0:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   186c4:	mov	r3, r0
   186c8:	movw	r1, #10636	; 0x298c
   186cc:	movt	r1, #4
   186d0:	mov	r0, r4
   186d4:	ldr	r2, [sp, #380]	; 0x17c
   186d8:	bl	14584 <fprintf@plt>
   186dc:	ldr	r4, [r8]
   186e0:	mov	r0, r6
   186e4:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   186e8:	mov	r2, r0
   186ec:	movw	r1, #10676	; 0x29b4
   186f0:	movt	r1, #4
   186f4:	mov	r0, r4
   186f8:	bl	14584 <fprintf@plt>
   186fc:	mov	r2, r5
   18700:	movw	r1, #10768	; 0x2a10
   18704:	movt	r1, #4
   18708:	ldr	r0, [r8]
   1870c:	bl	14584 <fprintf@plt>
   18710:	ldr	r3, [sp, #48]	; 0x30
   18714:	cmp	r3, #1
   18718:	movgt	r4, #0
   1871c:	ble	18740 <_start@@Base+0x3654>
   18720:	mov	r0, #32
   18724:	ldr	r1, [r8]
   18728:	add	r4, r4, #1
   1872c:	bl	145cc <fputc@plt>
   18730:	ldr	r3, [sp, #48]	; 0x30
   18734:	sub	r3, r3, #1
   18738:	cmp	r4, r3
   1873c:	blt	18720 <_start@@Base+0x3634>
   18740:	movw	r0, #10440	; 0x28c8
   18744:	movt	r0, #4
   18748:	ldr	r3, [r8]
   1874c:	mov	r2, #2
   18750:	mov	r1, #1
   18754:	mov	r5, #0
   18758:	mvn	r4, #0
   1875c:	bl	14548 <fwrite@plt>
   18760:	b	1857c <_start@@Base+0x3490>
   18764:	mov	r0, r6
   18768:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   1876c:	mov	r3, r0
   18770:	movw	r1, #10708	; 0x29d4
   18774:	movt	r1, #4
   18778:	mov	r0, r4
   1877c:	ldr	r2, [sp, #380]	; 0x17c
   18780:	bl	14584 <fprintf@plt>
   18784:	b	186fc <_start@@Base+0x3610>
   18788:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   1878c:	mov	r3, r0
   18790:	movw	r1, #10404	; 0x28a4
   18794:	movt	r1, #4
   18798:	mov	r0, r4
   1879c:	ldr	r2, [sp, #380]	; 0x17c
   187a0:	bl	14584 <fprintf@plt>
   187a4:	b	186fc <_start@@Base+0x3610>
   187a8:	movw	r8, #37808	; 0x93b0
   187ac:	movt	r8, #5
   187b0:	ldr	r4, [r8]
   187b4:	bl	2b5f8 <flatcc_verify_error_string@@Base>
   187b8:	movw	r2, #10444	; 0x28cc
   187bc:	movt	r2, #4
   187c0:	str	r0, [sp]
   187c4:	movw	r1, #10520	; 0x2918
   187c8:	movt	r1, #4
   187cc:	ldr	r3, [sp, #380]	; 0x17c
   187d0:	mov	r0, r4
   187d4:	bl	14584 <fprintf@plt>
   187d8:	b	18680 <_start@@Base+0x3594>
   187dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187e0:	mov	r4, r1
   187e4:	mov	r5, r0
   187e8:	mov	r1, r2
   187ec:	mov	r0, r4
   187f0:	strd	r6, [sp, #8]
   187f4:	strd	r8, [sp, #16]
   187f8:	strd	sl, [sp, #24]
   187fc:	mov	sl, r2
   18800:	mov	fp, r3
   18804:	str	lr, [sp, #32]
   18808:	sub	sp, sp, #20
   1880c:	bl	151e0 <_start@@Base+0xf4>
   18810:	add	r3, pc, #880	; 0x370
   18814:	ldrd	r2, [r3]
   18818:	ldr	r9, [sp, #56]	; 0x38
   1881c:	ldr	r8, [sp, #60]	; 0x3c
   18820:	cmp	r1, r3
   18824:	cmpeq	r0, r2
   18828:	bhi	18908 <_start@@Base+0x381c>
   1882c:	add	r3, pc, #860	; 0x35c
   18830:	ldrd	r2, [r3]
   18834:	mov	r6, #0
   18838:	bic	r7, r1, #255	; 0xff
   1883c:	cmp	r1, r3
   18840:	cmpeq	r0, r2
   18844:	bhi	18894 <_start@@Base+0x37a8>
   18848:	add	r3, pc, #840	; 0x348
   1884c:	ldrd	r2, [r3]
   18850:	cmp	r7, r3
   18854:	cmpeq	r6, r2
   18858:	bne	18874 <_start@@Base+0x3788>
   1885c:	sub	r3, sl, r4
   18860:	cmp	r3, #3
   18864:	ble	18874 <_start@@Base+0x3788>
   18868:	ldrb	r3, [r4, #3]
   1886c:	cmp	r3, #46	; 0x2e
   18870:	beq	18ad0 <_start@@Base+0x39e4>
   18874:	mov	r0, r4
   18878:	add	sp, sp, #20
   1887c:	ldrd	r4, [sp]
   18880:	ldrd	r6, [sp, #8]
   18884:	ldrd	r8, [sp, #16]
   18888:	ldrd	sl, [sp, #24]
   1888c:	add	sp, sp, #32
   18890:	pop	{pc}		; (ldr pc, [sp], #4)
   18894:	add	r3, pc, #772	; 0x304
   18898:	ldrd	r2, [r3]
   1889c:	cmp	r7, r3
   188a0:	cmpeq	r6, r2
   188a4:	beq	18a88 <_start@@Base+0x399c>
   188a8:	add	r9, pc, #760	; 0x2f8
   188ac:	ldrd	r8, [r9]
   188b0:	and	r6, r0, #-16777216	; 0xff000000
   188b4:	cmp	r1, r9
   188b8:	cmpeq	r6, r8
   188bc:	bne	18874 <_start@@Base+0x3788>
   188c0:	sub	r3, sl, r4
   188c4:	cmp	r3, #5
   188c8:	ble	18874 <_start@@Base+0x3788>
   188cc:	ldrb	r3, [r4, #5]
   188d0:	cmp	r3, #46	; 0x2e
   188d4:	bne	18874 <_start@@Base+0x3788>
   188d8:	mov	r3, fp
   188dc:	mov	r2, sl
   188e0:	add	r1, r4, #6
   188e4:	mov	r0, r5
   188e8:	add	sp, sp, #20
   188ec:	ldrd	r4, [sp]
   188f0:	ldrd	r6, [sp, #8]
   188f4:	ldrd	r8, [sp, #16]
   188f8:	ldrd	sl, [sp, #24]
   188fc:	ldr	lr, [sp, #32]
   18900:	add	sp, sp, #36	; 0x24
   18904:	b	16e80 <_start@@Base+0x1d94>
   18908:	add	r3, pc, #672	; 0x2a0
   1890c:	ldrd	r2, [r3]
   18910:	cmp	r1, r3
   18914:	cmpeq	r0, r2
   18918:	bhi	18978 <_start@@Base+0x388c>
   1891c:	add	r3, pc, #660	; 0x294
   18920:	ldrd	r2, [r3]
   18924:	cmp	r1, r3
   18928:	cmpeq	r0, r2
   1892c:	bne	18874 <_start@@Base+0x3788>
   18930:	sub	r3, sl, r4
   18934:	cmp	r3, #8
   18938:	ble	18874 <_start@@Base+0x3788>
   1893c:	ldrb	r3, [r4, #8]
   18940:	cmp	r3, #46	; 0x2e
   18944:	bne	18874 <_start@@Base+0x3788>
   18948:	mov	r3, fp
   1894c:	mov	r2, sl
   18950:	add	r1, r4, #9
   18954:	mov	r0, r5
   18958:	add	sp, sp, #20
   1895c:	ldrd	r4, [sp]
   18960:	ldrd	r6, [sp, #8]
   18964:	ldrd	r8, [sp, #16]
   18968:	ldrd	sl, [sp, #24]
   1896c:	ldr	lr, [sp, #32]
   18970:	add	sp, sp, #36	; 0x24
   18974:	b	16958 <_start@@Base+0x186c>
   18978:	add	r3, pc, #576	; 0x240
   1897c:	ldrd	r2, [r3]
   18980:	cmp	r1, r3
   18984:	cmpeq	r0, r2
   18988:	bhi	189e8 <_start@@Base+0x38fc>
   1898c:	add	r3, pc, #564	; 0x234
   18990:	ldrd	r2, [r3]
   18994:	cmp	r1, r3
   18998:	cmpeq	r0, r2
   1899c:	bne	18874 <_start@@Base+0x3788>
   189a0:	sub	r3, sl, r4
   189a4:	cmp	r3, #8
   189a8:	ble	18874 <_start@@Base+0x3788>
   189ac:	ldrb	r3, [r4, #8]
   189b0:	cmp	r3, #46	; 0x2e
   189b4:	bne	18874 <_start@@Base+0x3788>
   189b8:	mov	r3, fp
   189bc:	mov	r2, sl
   189c0:	add	r1, r4, #9
   189c4:	mov	r0, r5
   189c8:	add	sp, sp, #20
   189cc:	ldrd	r4, [sp]
   189d0:	ldrd	r6, [sp, #8]
   189d4:	ldrd	r8, [sp, #16]
   189d8:	ldrd	sl, [sp, #24]
   189dc:	ldr	lr, [sp, #32]
   189e0:	add	sp, sp, #36	; 0x24
   189e4:	b	16af8 <_start@@Base+0x1a0c>
   189e8:	add	r3, pc, #480	; 0x1e0
   189ec:	ldrd	r2, [r3]
   189f0:	cmp	r1, r3
   189f4:	cmpeq	r0, r2
   189f8:	beq	18b00 <_start@@Base+0x3a14>
   189fc:	add	r3, pc, #468	; 0x1d4
   18a00:	ldrd	r2, [r3]
   18a04:	cmp	r1, r3
   18a08:	cmpeq	r0, r2
   18a0c:	bne	18874 <_start@@Base+0x3788>
   18a10:	add	r6, r4, #8
   18a14:	mov	r1, sl
   18a18:	mov	r0, r6
   18a1c:	mov	r7, #0
   18a20:	bl	151e0 <_start@@Base+0xf4>
   18a24:	mov	r3, r1
   18a28:	add	r1, pc, #432	; 0x1b0
   18a2c:	ldrd	r0, [r1]
   18a30:	cmp	r3, r1
   18a34:	cmpeq	r7, r0
   18a38:	bne	18874 <_start@@Base+0x3788>
   18a3c:	sub	r3, sl, r6
   18a40:	cmp	r3, #4
   18a44:	ble	18874 <_start@@Base+0x3788>
   18a48:	ldrb	r3, [r4, #12]
   18a4c:	cmp	r3, #46	; 0x2e
   18a50:	bne	18874 <_start@@Base+0x3788>
   18a54:	add	r3, r4, #13
   18a58:	cmp	r6, r3
   18a5c:	str	r3, [sp, #12]
   18a60:	beq	18874 <_start@@Base+0x3788>
   18a64:	mov	r0, r3
   18a68:	mov	r1, sl
   18a6c:	bl	151e0 <_start@@Base+0xf4>
   18a70:	and	r3, r1, #-16777216	; 0xff000000
   18a74:	cmp	r3, #2013265920	; 0x78000000
   18a78:	cmpeq	r7, #0
   18a7c:	beq	18b48 <_start@@Base+0x3a5c>
   18a80:	ldr	r4, [sp, #12]
   18a84:	b	18874 <_start@@Base+0x3788>
   18a88:	sub	r3, sl, r4
   18a8c:	cmp	r3, #3
   18a90:	ble	18874 <_start@@Base+0x3788>
   18a94:	ldrb	r3, [r4, #3]
   18a98:	cmp	r3, #46	; 0x2e
   18a9c:	bne	18874 <_start@@Base+0x3788>
   18aa0:	mov	r3, fp
   18aa4:	mov	r2, sl
   18aa8:	add	r1, r4, #4
   18aac:	mov	r0, r5
   18ab0:	add	sp, sp, #20
   18ab4:	ldrd	r4, [sp]
   18ab8:	ldrd	r6, [sp, #8]
   18abc:	ldrd	r8, [sp, #16]
   18ac0:	ldrd	sl, [sp, #24]
   18ac4:	ldr	lr, [sp, #32]
   18ac8:	add	sp, sp, #36	; 0x24
   18acc:	b	17b30 <_start@@Base+0x2a44>
   18ad0:	mov	r3, fp
   18ad4:	mov	r2, sl
   18ad8:	add	r1, r4, #4
   18adc:	mov	r0, r5
   18ae0:	add	sp, sp, #20
   18ae4:	ldrd	r4, [sp]
   18ae8:	ldrd	r6, [sp, #8]
   18aec:	ldrd	r8, [sp, #16]
   18af0:	ldrd	sl, [sp, #24]
   18af4:	ldr	lr, [sp, #32]
   18af8:	add	sp, sp, #36	; 0x24
   18afc:	b	166d0 <_start@@Base+0x15e4>
   18b00:	sub	r3, sl, r4
   18b04:	cmp	r3, #8
   18b08:	ble	18874 <_start@@Base+0x3788>
   18b0c:	ldrb	r3, [r4, #8]
   18b10:	cmp	r3, #46	; 0x2e
   18b14:	bne	18874 <_start@@Base+0x3788>
   18b18:	mov	r3, fp
   18b1c:	mov	r2, sl
   18b20:	add	r1, r4, #9
   18b24:	mov	r0, r5
   18b28:	add	sp, sp, #20
   18b2c:	ldrd	r4, [sp]
   18b30:	ldrd	r6, [sp, #8]
   18b34:	ldrd	r8, [sp, #16]
   18b38:	ldrd	sl, [sp, #24]
   18b3c:	ldr	lr, [sp, #32]
   18b40:	add	sp, sp, #36	; 0x24
   18b44:	b	16d00 <_start@@Base+0x1c14>
   18b48:	mov	r0, r5
   18b4c:	ldr	r5, [sp, #12]
   18b50:	mov	r2, sl
   18b54:	mov	r3, #1
   18b58:	str	r8, [sp]
   18b5c:	mov	r1, r5
   18b60:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   18b64:	cmp	r5, r0
   18b68:	mov	r4, r0
   18b6c:	beq	18874 <_start@@Base+0x3788>
   18b70:	mov	r0, #0
   18b74:	mov	r1, #0
   18b78:	strd	r0, [r9]
   18b7c:	str	r7, [fp]
   18b80:	b	18874 <_start@@Base+0x3788>
   18b84:	nop	{0}
   18b88:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18b8c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18b90:	ldrshvc	pc, [pc, #255]	; 18c97 <_start@@Base+0x3bab>	; <UNPREDICTABLE>
   18b94:	cmnmi	pc, #28416	; 0x6f00
   18b98:	andeq	r0, r0, r0
   18b9c:	cmnmi	lr, r0, lsl #18
   18ba0:	andeq	r0, r0, r0
   18ba4:	strbtmi	r6, [pc], -r0, lsl #30
   18ba8:	andvc	r0, r0, #0
   18bac:	cmnmi	pc, #28416	; 0x6f00
   18bb0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18bb4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18bb8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18bbc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18bc0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18bc4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   18bc8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18bcc:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18bd0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18bd4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   18bd8:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   18bdc:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   18be0:	andeq	r0, r0, r0
   18be4:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18be8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18bec:	mov	r4, r1
   18bf0:	mov	r1, r2
   18bf4:	strd	r6, [sp, #8]
   18bf8:	mov	r5, r2
   18bfc:	strd	r8, [sp, #16]
   18c00:	mov	r8, r0
   18c04:	mov	r0, r4
   18c08:	strd	sl, [sp, #24]
   18c0c:	mov	sl, r3
   18c10:	str	lr, [sp, #32]
   18c14:	sub	sp, sp, #20
   18c18:	bl	151e0 <_start@@Base+0xf4>
   18c1c:	add	r3, pc, #924	; 0x39c
   18c20:	ldrd	r2, [r3]
   18c24:	ldr	r7, [sp, #56]	; 0x38
   18c28:	ldr	fp, [sp, #60]	; 0x3c
   18c2c:	cmp	r1, r3
   18c30:	cmpeq	r0, r2
   18c34:	bhi	18cd8 <_start@@Base+0x3bec>
   18c38:	add	r3, pc, #904	; 0x388
   18c3c:	ldrd	r2, [r3]
   18c40:	cmp	r1, r3
   18c44:	cmpeq	r0, r2
   18c48:	bne	18e18 <_start@@Base+0x3d2c>
   18c4c:	mov	r1, r5
   18c50:	add	r0, r4, #8
   18c54:	bl	151e0 <_start@@Base+0xf4>
   18c58:	add	r3, pc, #880	; 0x370
   18c5c:	ldrd	r2, [r3]
   18c60:	cmp	r1, r3
   18c64:	cmpeq	r0, r2
   18c68:	bne	18e18 <_start@@Base+0x3d2c>
   18c6c:	add	r6, r4, #16
   18c70:	mov	r1, r5
   18c74:	mov	r0, r6
   18c78:	bl	151e0 <_start@@Base+0xf4>
   18c7c:	and	r3, r1, #-16777216	; 0xff000000
   18c80:	mov	r2, #0
   18c84:	cmp	r3, #1912602624	; 0x72000000
   18c88:	cmpeq	r2, #0
   18c8c:	bne	18e18 <_start@@Base+0x3d2c>
   18c90:	sub	r6, r5, r6
   18c94:	cmp	r6, #1
   18c98:	ble	18e18 <_start@@Base+0x3d2c>
   18c9c:	ldrb	r3, [r4, #17]
   18ca0:	cmp	r3, #46	; 0x2e
   18ca4:	bne	18e18 <_start@@Base+0x3d2c>
   18ca8:	mov	r3, sl
   18cac:	mov	r2, r5
   18cb0:	add	r1, r4, #18
   18cb4:	mov	r0, r8
   18cb8:	add	sp, sp, #20
   18cbc:	ldrd	r4, [sp]
   18cc0:	ldrd	r6, [sp, #8]
   18cc4:	ldrd	r8, [sp, #16]
   18cc8:	ldrd	sl, [sp, #24]
   18ccc:	ldr	lr, [sp, #32]
   18cd0:	add	sp, sp, #36	; 0x24
   18cd4:	b	163b0 <_start@@Base+0x12c4>
   18cd8:	add	r3, pc, #760	; 0x2f8
   18cdc:	ldrd	r2, [r3]
   18ce0:	cmp	r1, r3
   18ce4:	cmpeq	r0, r2
   18ce8:	beq	18e38 <_start@@Base+0x3d4c>
   18cec:	add	r3, pc, #748	; 0x2ec
   18cf0:	ldrd	r2, [r3]
   18cf4:	cmp	r1, r3
   18cf8:	cmpeq	r0, r2
   18cfc:	bne	18e18 <_start@@Base+0x3d2c>
   18d00:	mov	r1, r5
   18d04:	add	r0, r4, #8
   18d08:	bl	151e0 <_start@@Base+0xf4>
   18d0c:	add	r3, pc, #724	; 0x2d4
   18d10:	ldrd	r2, [r3]
   18d14:	cmp	r1, r3
   18d18:	cmpeq	r0, r2
   18d1c:	bne	18e18 <_start@@Base+0x3d2c>
   18d20:	mov	r1, r5
   18d24:	add	r0, r4, #16
   18d28:	bl	151e0 <_start@@Base+0xf4>
   18d2c:	add	r3, pc, #700	; 0x2bc
   18d30:	ldrd	r2, [r3]
   18d34:	cmp	r1, r3
   18d38:	cmpeq	r0, r2
   18d3c:	bne	18e18 <_start@@Base+0x3d2c>
   18d40:	mov	r1, r5
   18d44:	add	r0, r4, #24
   18d48:	bl	151e0 <_start@@Base+0xf4>
   18d4c:	add	r3, pc, #676	; 0x2a4
   18d50:	ldrd	r2, [r3]
   18d54:	cmp	r1, r3
   18d58:	cmpeq	r0, r2
   18d5c:	bne	18e18 <_start@@Base+0x3d2c>
   18d60:	add	r6, r4, #32
   18d64:	mov	r1, r5
   18d68:	mov	r0, r6
   18d6c:	mov	r9, #0
   18d70:	bl	151e0 <_start@@Base+0xf4>
   18d74:	and	r3, r1, #-16777216	; 0xff000000
   18d78:	cmp	r3, #1694498816	; 0x65000000
   18d7c:	cmpeq	r9, #0
   18d80:	bne	18e18 <_start@@Base+0x3d2c>
   18d84:	sub	r6, r5, r6
   18d88:	cmp	r6, #1
   18d8c:	ble	18e18 <_start@@Base+0x3d2c>
   18d90:	ldrb	r3, [r4, #33]	; 0x21
   18d94:	cmp	r3, #46	; 0x2e
   18d98:	bne	18e18 <_start@@Base+0x3d2c>
   18d9c:	add	r6, r4, #34	; 0x22
   18da0:	mov	r1, r5
   18da4:	mov	r0, r6
   18da8:	bl	151e0 <_start@@Base+0xf4>
   18dac:	bic	r3, r1, #255	; 0xff
   18db0:	strd	r0, [sp, #8]
   18db4:	add	r1, pc, #580	; 0x244
   18db8:	ldrd	r0, [r1]
   18dbc:	cmp	r3, r1
   18dc0:	cmpeq	r9, r0
   18dc4:	beq	1933c <_start@@Base+0x4250>
   18dc8:	add	r3, pc, #568	; 0x238
   18dcc:	ldrd	r2, [r3]
   18dd0:	ldrd	r0, [sp, #8]
   18dd4:	cmp	r1, r3
   18dd8:	cmpeq	r0, r2
   18ddc:	bne	18e14 <_start@@Base+0x3d28>
   18de0:	add	r9, r4, #42	; 0x2a
   18de4:	mov	r1, r5
   18de8:	mov	r0, r9
   18dec:	bl	151e0 <_start@@Base+0xf4>
   18df0:	lsr	r3, r1, #16
   18df4:	mov	r1, #0
   18df8:	movt	r1, #24940	; 0x616c
   18dfc:	mov	r2, #0
   18e00:	mov	r0, #0
   18e04:	lsl	r3, r3, #16
   18e08:	cmp	r3, r1
   18e0c:	cmpeq	r2, r0
   18e10:	beq	19374 <_start@@Base+0x4288>
   18e14:	mov	r4, r6
   18e18:	mov	r0, r4
   18e1c:	add	sp, sp, #20
   18e20:	ldrd	r4, [sp]
   18e24:	ldrd	r6, [sp, #8]
   18e28:	ldrd	r8, [sp, #16]
   18e2c:	ldrd	sl, [sp, #24]
   18e30:	add	sp, sp, #32
   18e34:	pop	{pc}		; (ldr pc, [sp], #4)
   18e38:	mov	r1, r5
   18e3c:	add	r0, r4, #8
   18e40:	bl	151e0 <_start@@Base+0xf4>
   18e44:	add	r3, pc, #452	; 0x1c4
   18e48:	ldrd	r2, [r3]
   18e4c:	cmp	r1, r3
   18e50:	cmpeq	r0, r2
   18e54:	bhi	18f10 <_start@@Base+0x3e24>
   18e58:	add	r3, pc, #440	; 0x1b8
   18e5c:	ldrd	r2, [r3]
   18e60:	cmp	r1, r3
   18e64:	cmpeq	r0, r2
   18e68:	bls	190f8 <_start@@Base+0x400c>
   18e6c:	add	r3, pc, #428	; 0x1ac
   18e70:	ldrd	r2, [r3]
   18e74:	cmp	r1, r3
   18e78:	cmpeq	r0, r2
   18e7c:	beq	19214 <_start@@Base+0x4128>
   18e80:	add	r3, pc, #416	; 0x1a0
   18e84:	ldrd	r2, [r3]
   18e88:	cmp	r1, r3
   18e8c:	cmpeq	r0, r2
   18e90:	bne	18e18 <_start@@Base+0x3d2c>
   18e94:	add	r9, r4, #16
   18e98:	mov	r1, r5
   18e9c:	mov	r0, r9
   18ea0:	mov	r7, #0
   18ea4:	movt	r7, #28527	; 0x6f6f
   18ea8:	mov	r6, #0
   18eac:	bl	151e0 <_start@@Base+0xf4>
   18eb0:	lsr	r3, r1, #16
   18eb4:	mov	r2, #0
   18eb8:	lsl	r3, r3, #16
   18ebc:	cmp	r3, r7
   18ec0:	cmpeq	r2, r6
   18ec4:	bne	18e18 <_start@@Base+0x3d2c>
   18ec8:	sub	r9, r5, r9
   18ecc:	cmp	r9, #2
   18ed0:	ble	18e18 <_start@@Base+0x3d2c>
   18ed4:	ldrb	r3, [r4, #18]
   18ed8:	cmp	r3, #46	; 0x2e
   18edc:	bne	18e18 <_start@@Base+0x3d2c>
   18ee0:	mov	r3, sl
   18ee4:	mov	r2, r5
   18ee8:	add	r1, r4, #19
   18eec:	mov	r0, r8
   18ef0:	add	sp, sp, #20
   18ef4:	ldrd	r4, [sp]
   18ef8:	ldrd	r6, [sp, #8]
   18efc:	ldrd	r8, [sp, #16]
   18f00:	ldrd	sl, [sp, #24]
   18f04:	ldr	lr, [sp, #32]
   18f08:	add	sp, sp, #36	; 0x24
   18f0c:	b	17b30 <_start@@Base+0x2a44>
   18f10:	add	r3, pc, #280	; 0x118
   18f14:	ldrd	r2, [r3]
   18f18:	cmp	r1, r3
   18f1c:	cmpeq	r0, r2
   18f20:	beq	19088 <_start@@Base+0x3f9c>
   18f24:	add	r3, pc, #268	; 0x10c
   18f28:	ldrd	r2, [r3]
   18f2c:	cmp	r1, r3
   18f30:	cmpeq	r0, r2
   18f34:	bhi	19188 <_start@@Base+0x409c>
   18f38:	add	r3, pc, #256	; 0x100
   18f3c:	ldrd	r2, [r3]
   18f40:	cmp	r1, r3
   18f44:	cmpeq	r0, r2
   18f48:	bne	18e18 <_start@@Base+0x3d2c>
   18f4c:	add	r7, pc, #244	; 0xf4
   18f50:	ldrd	r6, [r7]
   18f54:	add	r9, r4, #16
   18f58:	mov	r1, r5
   18f5c:	mov	r0, r9
   18f60:	bl	151e0 <_start@@Base+0xf4>
   18f64:	bic	r2, r0, #255	; 0xff
   18f68:	cmp	r1, r7
   18f6c:	cmpeq	r2, r6
   18f70:	bne	18e18 <_start@@Base+0x3d2c>
   18f74:	sub	r9, r5, r9
   18f78:	cmp	r9, #7
   18f7c:	ble	18e18 <_start@@Base+0x3d2c>
   18f80:	ldrb	r3, [r4, #23]
   18f84:	cmp	r3, #46	; 0x2e
   18f88:	bne	18e18 <_start@@Base+0x3d2c>
   18f8c:	mov	r3, sl
   18f90:	mov	r2, r5
   18f94:	add	r1, r4, #24
   18f98:	mov	r0, r8
   18f9c:	add	sp, sp, #20
   18fa0:	ldrd	r4, [sp]
   18fa4:	ldrd	r6, [sp, #8]
   18fa8:	ldrd	r8, [sp, #16]
   18fac:	ldrd	sl, [sp, #24]
   18fb0:	ldr	lr, [sp, #32]
   18fb4:	add	sp, sp, #36	; 0x24
   18fb8:	b	16af8 <_start@@Base+0x1a0c>
   18fbc:	nop	{0}
   18fc0:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   18fc4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18fc8:	cmnvs	r3, lr, lsr #18
   18fcc:			; <UNDEFINED> instruction: 0x46616e74
   18fd0:	cmnvs	r3, r5, ror #8
   18fd4:	cmnmi	r8, #-2147483620	; 0x8000001c
   18fd8:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   18fdc:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18fe0:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   18fe4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18fe8:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   18fec:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   18ff0:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   18ff4:	cmnpl	r0, #-1073741800	; 0xc0000018
   18ff8:	cmnvs	ip, #100, 10	; 0x19000000
   18ffc:	svcvs	0x006d496e
   19000:	andeq	r0, r0, r0
   19004:	strbtmi	r6, [pc], -r0, lsl #30
   19008:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1900c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   19010:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   19014:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19018:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1901c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19020:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   19024:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19028:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   1902c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19030:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   19034:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19038:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   1903c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19040:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   19044:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19048:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1904c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   19050:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   19054:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   19058:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   1905c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19060:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   19064:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   19068:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1906c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   19070:	andeq	r0, r0, r0
   19074:	svcvs	0x006c6f72
   19078:	rsbsvc	r7, r4, r5, ror #18
   1907c:	svcvs	0x0074656d
   19080:	andeq	r0, r0, r0
   19084:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   19088:	sub	r7, pc, #64	; 0x40
   1908c:	ldrd	r6, [r7]
   19090:	add	r9, r4, #16
   19094:	mov	r1, r5
   19098:	mov	r0, r9
   1909c:	bl	151e0 <_start@@Base+0xf4>
   190a0:	bic	r2, r0, #255	; 0xff
   190a4:	cmp	r1, r7
   190a8:	cmpeq	r2, r6
   190ac:	bne	18e18 <_start@@Base+0x3d2c>
   190b0:	sub	r9, r5, r9
   190b4:	cmp	r9, #7
   190b8:	ble	18e18 <_start@@Base+0x3d2c>
   190bc:	ldrb	r3, [r4, #23]
   190c0:	cmp	r3, #46	; 0x2e
   190c4:	bne	18e18 <_start@@Base+0x3d2c>
   190c8:	mov	r3, sl
   190cc:	mov	r2, r5
   190d0:	add	r1, r4, #24
   190d4:	mov	r0, r8
   190d8:	add	sp, sp, #20
   190dc:	ldrd	r4, [sp]
   190e0:	ldrd	r6, [sp, #8]
   190e4:	ldrd	r8, [sp, #16]
   190e8:	ldrd	sl, [sp, #24]
   190ec:	ldr	lr, [sp, #32]
   190f0:	add	sp, sp, #36	; 0x24
   190f4:	b	16958 <_start@@Base+0x186c>
   190f8:	sub	r3, pc, #168	; 0xa8
   190fc:	ldrd	r2, [r3]
   19100:	cmp	r1, r3
   19104:	cmpeq	r0, r2
   19108:	bne	18e18 <_start@@Base+0x3d2c>
   1910c:	add	r9, r4, #16
   19110:	mov	r1, r5
   19114:	mov	r0, r9
   19118:	mov	r7, #0
   1911c:	movt	r7, #28281	; 0x6e79
   19120:	mov	r6, #0
   19124:	bl	151e0 <_start@@Base+0xf4>
   19128:	lsr	r3, r1, #16
   1912c:	mov	r2, #0
   19130:	lsl	r3, r3, #16
   19134:	cmp	r3, r7
   19138:	cmpeq	r2, r6
   1913c:	bne	18e18 <_start@@Base+0x3d2c>
   19140:	sub	r9, r5, r9
   19144:	cmp	r9, #2
   19148:	ble	18e18 <_start@@Base+0x3d2c>
   1914c:	ldrb	r3, [r4, #18]
   19150:	cmp	r3, #46	; 0x2e
   19154:	bne	18e18 <_start@@Base+0x3d2c>
   19158:	mov	r3, sl
   1915c:	mov	r2, r5
   19160:	add	r1, r4, #19
   19164:	mov	r0, r8
   19168:	add	sp, sp, #20
   1916c:	ldrd	r4, [sp]
   19170:	ldrd	r6, [sp, #8]
   19174:	ldrd	r8, [sp, #16]
   19178:	ldrd	sl, [sp, #24]
   1917c:	ldr	lr, [sp, #32]
   19180:	add	sp, sp, #36	; 0x24
   19184:	b	166d0 <_start@@Base+0x15e4>
   19188:	sub	r3, pc, #304	; 0x130
   1918c:	ldrd	r2, [r3]
   19190:	cmp	r1, r3
   19194:	cmpeq	r0, r2
   19198:	bne	18e18 <_start@@Base+0x3d2c>
   1919c:	add	r9, r4, #16
   191a0:	mov	r1, r5
   191a4:	mov	r0, r9
   191a8:	bl	151e0 <_start@@Base+0xf4>
   191ac:	bic	r2, r0, #255	; 0xff
   191b0:	mov	r3, r1
   191b4:	strd	r0, [sp, #8]
   191b8:	sub	r1, pc, #344	; 0x158
   191bc:	ldrd	r0, [r1]
   191c0:	cmp	r3, r1
   191c4:	cmpeq	r2, r0
   191c8:	bne	19284 <_start@@Base+0x4198>
   191cc:	sub	r9, r5, r9
   191d0:	cmp	r9, #7
   191d4:	ble	18e18 <_start@@Base+0x3d2c>
   191d8:	ldrb	r3, [r4, #23]
   191dc:	cmp	r3, #46	; 0x2e
   191e0:	bne	18e18 <_start@@Base+0x3d2c>
   191e4:	mov	r3, sl
   191e8:	mov	r2, r5
   191ec:	add	r1, r4, #24
   191f0:	mov	r0, r8
   191f4:	add	sp, sp, #20
   191f8:	ldrd	r4, [sp]
   191fc:	ldrd	r6, [sp, #8]
   19200:	ldrd	r8, [sp, #16]
   19204:	ldrd	sl, [sp, #24]
   19208:	ldr	lr, [sp, #32]
   1920c:	add	sp, sp, #36	; 0x24
   19210:	b	16d00 <_start@@Base+0x1c14>
   19214:	sub	r7, pc, #428	; 0x1ac
   19218:	ldrd	r6, [r7]
   1921c:	add	r9, r4, #16
   19220:	mov	r1, r5
   19224:	mov	r0, r9
   19228:	bl	151e0 <_start@@Base+0xf4>
   1922c:	mov	r2, #0
   19230:	cmp	r1, r7
   19234:	cmpeq	r2, r6
   19238:	bne	18e18 <_start@@Base+0x3d2c>
   1923c:	sub	r9, r5, r9
   19240:	cmp	r9, #4
   19244:	ble	18e18 <_start@@Base+0x3d2c>
   19248:	ldrb	r3, [r4, #20]
   1924c:	cmp	r3, #46	; 0x2e
   19250:	bne	18e18 <_start@@Base+0x3d2c>
   19254:	mov	r3, sl
   19258:	mov	r2, r5
   1925c:	add	r1, r4, #21
   19260:	mov	r0, r8
   19264:	add	sp, sp, #20
   19268:	ldrd	r4, [sp]
   1926c:	ldrd	r6, [sp, #8]
   19270:	ldrd	r8, [sp, #16]
   19274:	ldrd	sl, [sp, #24]
   19278:	ldr	lr, [sp, #32]
   1927c:	add	sp, sp, #36	; 0x24
   19280:	b	16e80 <_start@@Base+0x1d94>
   19284:	sub	r3, pc, #532	; 0x214
   19288:	ldrd	r2, [r3]
   1928c:	ldrd	r0, [sp, #8]
   19290:	cmp	r1, r3
   19294:	cmpeq	r0, r2
   19298:	bne	18e18 <_start@@Base+0x3d2c>
   1929c:	add	r9, r4, #24
   192a0:	mov	r1, r5
   192a4:	mov	r0, r9
   192a8:	bl	151e0 <_start@@Base+0xf4>
   192ac:	bic	r3, r1, #255	; 0xff
   192b0:	sub	r1, pc, #568	; 0x238
   192b4:	ldrd	r0, [r1]
   192b8:	mov	r2, #0
   192bc:	cmp	r3, r1
   192c0:	cmpeq	r2, r0
   192c4:	bne	18e18 <_start@@Base+0x3d2c>
   192c8:	sub	r9, r5, r9
   192cc:	cmp	r9, #3
   192d0:	ble	18e18 <_start@@Base+0x3d2c>
   192d4:	ldrb	r3, [r4, #27]
   192d8:	cmp	r3, #46	; 0x2e
   192dc:	bne	18e18 <_start@@Base+0x3d2c>
   192e0:	add	r6, r4, #28
   192e4:	mov	r1, r5
   192e8:	mov	r0, r6
   192ec:	mov	r9, #0
   192f0:	bl	151e0 <_start@@Base+0xf4>
   192f4:	and	r3, r1, #-16777216	; 0xff000000
   192f8:	cmp	r3, #2013265920	; 0x78000000
   192fc:	cmpeq	r9, #0
   19300:	bne	18e14 <_start@@Base+0x3d28>
   19304:	mov	r2, r5
   19308:	mov	r0, r8
   1930c:	str	fp, [sp]
   19310:	mov	r3, #1
   19314:	mov	r1, r6
   19318:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   1931c:	cmp	r6, r0
   19320:	mov	r4, r0
   19324:	beq	18e18 <_start@@Base+0x3d2c>
   19328:	mov	r2, #0
   1932c:	mov	r3, #0
   19330:	strd	r2, [r7]
   19334:	str	r9, [sl]
   19338:	b	18e18 <_start@@Base+0x3d2c>
   1933c:	mov	r2, r5
   19340:	mov	r0, r8
   19344:	str	fp, [sp]
   19348:	mov	r3, #3
   1934c:	mov	r1, r6
   19350:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   19354:	cmp	r6, r0
   19358:	mov	r4, r0
   1935c:	beq	18e18 <_start@@Base+0x3d2c>
   19360:	mov	r0, #17
   19364:	mov	r1, #0
   19368:	strd	r0, [r7]
   1936c:	str	r9, [sl]
   19370:	b	18e18 <_start@@Base+0x3d2c>
   19374:	mov	r2, r5
   19378:	mov	r0, r8
   1937c:	str	fp, [sp]
   19380:	mov	r3, #2
   19384:	mov	r1, r9
   19388:	bl	2f3d8 <flatcc_json_parser_match_constant@@Base>
   1938c:	cmp	r9, r0
   19390:	mov	r4, r0
   19394:	beq	18e14 <_start@@Base+0x3d28>
   19398:	mov	r3, #0
   1939c:	mov	r2, #0
   193a0:	strd	r2, [r7]
   193a4:	mov	r3, #0
   193a8:	str	r3, [sl]
   193ac:	b	18e18 <_start@@Base+0x3d2c>
   193b0:	strd	r4, [sp, #-16]!
   193b4:	mov	r4, r2
   193b8:	sub	r2, r2, r1
   193bc:	cmp	r2, #1
   193c0:	mov	r5, r0
   193c4:	str	r6, [sp, #8]
   193c8:	mov	r6, r3
   193cc:	str	lr, [sp, #12]
   193d0:	ble	193e4 <_start@@Base+0x42f8>
   193d4:	ldrb	r3, [r1]
   193d8:	cmp	r3, #32
   193dc:	bhi	193f4 <_start@@Base+0x4308>
   193e0:	beq	194a0 <_start@@Base+0x43b4>
   193e4:	mov	r2, r4
   193e8:	mov	r0, r5
   193ec:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   193f0:	mov	r1, r0
   193f4:	cmp	r4, r1
   193f8:	moveq	r3, #0
   193fc:	moveq	r0, r4
   19400:	streq	r3, [r6]
   19404:	beq	19490 <_start@@Base+0x43a4>
   19408:	ldrb	r3, [r1]
   1940c:	cmp	r3, #44	; 0x2c
   19410:	beq	19464 <_start@@Base+0x4378>
   19414:	mov	r3, #0
   19418:	mov	r2, r4
   1941c:	str	r3, [r6]
   19420:	ldrb	r3, [r1]
   19424:	cmp	r3, #125	; 0x7d
   19428:	beq	19448 <_start@@Base+0x435c>
   1942c:	mov	r0, r5
   19430:	mov	r3, #10
   19434:	ldrd	r4, [sp]
   19438:	ldr	r6, [sp, #8]
   1943c:	ldr	lr, [sp, #12]
   19440:	add	sp, sp, #16
   19444:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   19448:	add	r1, r1, #1
   1944c:	mov	r0, r5
   19450:	ldrd	r4, [sp]
   19454:	ldr	r6, [sp, #8]
   19458:	ldr	lr, [sp, #12]
   1945c:	add	sp, sp, #16
   19460:	b	17000 <_start@@Base+0x1f14>
   19464:	add	r1, r1, #1
   19468:	mov	r2, r4
   1946c:	mov	r0, r5
   19470:	bl	17000 <_start@@Base+0x1f14>
   19474:	cmp	r4, r0
   19478:	beq	194dc <_start@@Base+0x43f0>
   1947c:	ldrb	r3, [r0]
   19480:	cmp	r3, #125	; 0x7d
   19484:	movne	r3, #1
   19488:	strne	r3, [r6]
   1948c:	beq	194c4 <_start@@Base+0x43d8>
   19490:	ldrd	r4, [sp]
   19494:	ldr	r6, [sp, #8]
   19498:	add	sp, sp, #12
   1949c:	pop	{pc}		; (ldr pc, [sp], #4)
   194a0:	ldrb	r3, [r1, #1]
   194a4:	cmp	r3, #32
   194a8:	addhi	r1, r1, #1
   194ac:	bhi	193f4 <_start@@Base+0x4308>
   194b0:	mov	r2, r4
   194b4:	mov	r0, r5
   194b8:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   194bc:	mov	r1, r0
   194c0:	b	193f4 <_start@@Base+0x4308>
   194c4:	mov	r3, #0
   194c8:	add	r1, r0, #1
   194cc:	mov	r2, r4
   194d0:	mov	r0, r5
   194d4:	str	r3, [r6]
   194d8:	b	19450 <_start@@Base+0x4364>
   194dc:	mov	ip, #0
   194e0:	mov	r0, r5
   194e4:	mov	r3, #10
   194e8:	mov	r2, r4
   194ec:	mov	r1, r4
   194f0:	str	ip, [r6]
   194f4:	b	19434 <_start@@Base+0x4348>
   194f8:	strd	r4, [sp, #-16]!
   194fc:	mov	r4, r2
   19500:	sub	r2, r2, r1
   19504:	cmp	r2, #1
   19508:	mov	r5, r0
   1950c:	str	r6, [sp, #8]
   19510:	mov	r6, r3
   19514:	str	lr, [sp, #12]
   19518:	ble	1952c <_start@@Base+0x4440>
   1951c:	ldrb	r3, [r1]
   19520:	cmp	r3, #32
   19524:	bhi	1953c <_start@@Base+0x4450>
   19528:	beq	195e8 <_start@@Base+0x44fc>
   1952c:	mov	r2, r4
   19530:	mov	r0, r5
   19534:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19538:	mov	r1, r0
   1953c:	cmp	r4, r1
   19540:	moveq	r3, #0
   19544:	moveq	r0, r4
   19548:	streq	r3, [r6]
   1954c:	beq	195d8 <_start@@Base+0x44ec>
   19550:	ldrb	r3, [r1]
   19554:	cmp	r3, #44	; 0x2c
   19558:	beq	195ac <_start@@Base+0x44c0>
   1955c:	mov	r3, #0
   19560:	mov	r2, r4
   19564:	str	r3, [r6]
   19568:	ldrb	r3, [r1]
   1956c:	cmp	r3, #93	; 0x5d
   19570:	beq	19590 <_start@@Base+0x44a4>
   19574:	mov	r0, r5
   19578:	mov	r3, #9
   1957c:	ldrd	r4, [sp]
   19580:	ldr	r6, [sp, #8]
   19584:	ldr	lr, [sp, #12]
   19588:	add	sp, sp, #16
   1958c:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   19590:	add	r1, r1, #1
   19594:	mov	r0, r5
   19598:	ldrd	r4, [sp]
   1959c:	ldr	r6, [sp, #8]
   195a0:	ldr	lr, [sp, #12]
   195a4:	add	sp, sp, #16
   195a8:	b	17000 <_start@@Base+0x1f14>
   195ac:	add	r1, r1, #1
   195b0:	mov	r2, r4
   195b4:	mov	r0, r5
   195b8:	bl	17000 <_start@@Base+0x1f14>
   195bc:	cmp	r4, r0
   195c0:	beq	19624 <_start@@Base+0x4538>
   195c4:	ldrb	r3, [r0]
   195c8:	cmp	r3, #93	; 0x5d
   195cc:	movne	r3, #1
   195d0:	strne	r3, [r6]
   195d4:	beq	1960c <_start@@Base+0x4520>
   195d8:	ldrd	r4, [sp]
   195dc:	ldr	r6, [sp, #8]
   195e0:	add	sp, sp, #12
   195e4:	pop	{pc}		; (ldr pc, [sp], #4)
   195e8:	ldrb	r3, [r1, #1]
   195ec:	cmp	r3, #32
   195f0:	addhi	r1, r1, #1
   195f4:	bhi	1953c <_start@@Base+0x4450>
   195f8:	mov	r2, r4
   195fc:	mov	r0, r5
   19600:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19604:	mov	r1, r0
   19608:	b	1953c <_start@@Base+0x4450>
   1960c:	mov	r3, #0
   19610:	add	r1, r0, #1
   19614:	mov	r2, r4
   19618:	mov	r0, r5
   1961c:	str	r3, [r6]
   19620:	b	19598 <_start@@Base+0x44ac>
   19624:	mov	ip, #0
   19628:	mov	r0, r5
   1962c:	mov	r3, #9
   19630:	mov	r2, r4
   19634:	mov	r1, r4
   19638:	str	ip, [r6]
   1963c:	b	1957c <_start@@Base+0x4490>
   19640:	ldr	ip, [r0, #12]
   19644:	ldrb	r3, [r1, #5]
   19648:	cmp	ip, #0
   1964c:	beq	196e8 <_start@@Base+0x45fc>
   19650:	cmp	r3, #58	; 0x3a
   19654:	cmpne	r3, #32
   19658:	movhi	r3, #1
   1965c:	movls	r3, #0
   19660:	bhi	196e0 <_start@@Base+0x45f4>
   19664:	add	r1, r1, #5
   19668:	str	r3, [r0, #12]
   1966c:	sub	r3, r2, r1
   19670:	strd	r4, [sp, #-16]!
   19674:	mov	r5, r2
   19678:	cmp	r3, #1
   1967c:	mov	r4, r0
   19680:	str	r6, [sp, #8]
   19684:	str	lr, [sp, #12]
   19688:	ble	1969c <_start@@Base+0x45b0>
   1968c:	ldrb	r3, [r1]
   19690:	cmp	r3, #32
   19694:	bhi	196ac <_start@@Base+0x45c0>
   19698:	beq	196f8 <_start@@Base+0x460c>
   1969c:	mov	r2, r5
   196a0:	mov	r0, r4
   196a4:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   196a8:	mov	r1, r0
   196ac:	cmp	r5, r1
   196b0:	mov	r2, r5
   196b4:	beq	196c4 <_start@@Base+0x45d8>
   196b8:	ldrb	r3, [r1]
   196bc:	cmp	r3, #58	; 0x3a
   196c0:	beq	1970c <_start@@Base+0x4620>
   196c4:	mov	r0, r4
   196c8:	mov	r3, #4
   196cc:	ldrd	r4, [sp]
   196d0:	ldr	r6, [sp, #8]
   196d4:	ldr	lr, [sp, #12]
   196d8:	add	sp, sp, #16
   196dc:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   196e0:	mov	r0, r1
   196e4:	bx	lr
   196e8:	cmp	r3, #34	; 0x22
   196ec:	bne	196e0 <_start@@Base+0x45f4>
   196f0:	add	r1, r1, #6
   196f4:	b	1966c <_start@@Base+0x4580>
   196f8:	ldrb	r3, [r1, #1]
   196fc:	cmp	r3, #32
   19700:	addhi	r1, r1, #1
   19704:	bls	1969c <_start@@Base+0x45b0>
   19708:	b	196ac <_start@@Base+0x45c0>
   1970c:	mov	r0, r4
   19710:	add	r1, r1, #1
   19714:	ldrd	r4, [sp]
   19718:	ldr	r6, [sp, #8]
   1971c:	ldr	lr, [sp, #12]
   19720:	add	sp, sp, #16
   19724:	b	17000 <_start@@Base+0x1f14>
   19728:	ldr	ip, [r0, #12]
   1972c:	ldrb	r3, [r1, #8]
   19730:	cmp	ip, #0
   19734:	beq	197d0 <_start@@Base+0x46e4>
   19738:	cmp	r3, #58	; 0x3a
   1973c:	cmpne	r3, #32
   19740:	movhi	r3, #1
   19744:	movls	r3, #0
   19748:	bhi	197c8 <_start@@Base+0x46dc>
   1974c:	add	r1, r1, #8
   19750:	str	r3, [r0, #12]
   19754:	sub	r3, r2, r1
   19758:	strd	r4, [sp, #-16]!
   1975c:	mov	r5, r2
   19760:	cmp	r3, #1
   19764:	mov	r4, r0
   19768:	str	r6, [sp, #8]
   1976c:	str	lr, [sp, #12]
   19770:	ble	19784 <_start@@Base+0x4698>
   19774:	ldrb	r3, [r1]
   19778:	cmp	r3, #32
   1977c:	bhi	19794 <_start@@Base+0x46a8>
   19780:	beq	197e0 <_start@@Base+0x46f4>
   19784:	mov	r2, r5
   19788:	mov	r0, r4
   1978c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19790:	mov	r1, r0
   19794:	cmp	r5, r1
   19798:	mov	r2, r5
   1979c:	beq	197ac <_start@@Base+0x46c0>
   197a0:	ldrb	r3, [r1]
   197a4:	cmp	r3, #58	; 0x3a
   197a8:	beq	197f4 <_start@@Base+0x4708>
   197ac:	mov	r0, r4
   197b0:	mov	r3, #4
   197b4:	ldrd	r4, [sp]
   197b8:	ldr	r6, [sp, #8]
   197bc:	ldr	lr, [sp, #12]
   197c0:	add	sp, sp, #16
   197c4:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   197c8:	mov	r0, r1
   197cc:	bx	lr
   197d0:	cmp	r3, #34	; 0x22
   197d4:	bne	197c8 <_start@@Base+0x46dc>
   197d8:	add	r1, r1, #9
   197dc:	b	19754 <_start@@Base+0x4668>
   197e0:	ldrb	r3, [r1, #1]
   197e4:	cmp	r3, #32
   197e8:	addhi	r1, r1, #1
   197ec:	bls	19784 <_start@@Base+0x4698>
   197f0:	b	19794 <_start@@Base+0x46a8>
   197f4:	mov	r0, r4
   197f8:	add	r1, r1, #1
   197fc:	ldrd	r4, [sp]
   19800:	ldr	r6, [sp, #8]
   19804:	ldr	lr, [sp, #12]
   19808:	add	sp, sp, #16
   1980c:	b	17000 <_start@@Base+0x1f14>
   19810:	ldr	ip, [r0, #12]
   19814:	ldrb	r3, [r1, #1]
   19818:	cmp	ip, #0
   1981c:	beq	198b8 <_start@@Base+0x47cc>
   19820:	cmp	r3, #58	; 0x3a
   19824:	cmpne	r3, #32
   19828:	movhi	r3, #1
   1982c:	movls	r3, #0
   19830:	bhi	198b0 <_start@@Base+0x47c4>
   19834:	add	r1, r1, #1
   19838:	str	r3, [r0, #12]
   1983c:	sub	r3, r2, r1
   19840:	strd	r4, [sp, #-16]!
   19844:	mov	r5, r2
   19848:	cmp	r3, #1
   1984c:	mov	r4, r0
   19850:	str	r6, [sp, #8]
   19854:	str	lr, [sp, #12]
   19858:	ble	1986c <_start@@Base+0x4780>
   1985c:	ldrb	r3, [r1]
   19860:	cmp	r3, #32
   19864:	bhi	1987c <_start@@Base+0x4790>
   19868:	beq	198c8 <_start@@Base+0x47dc>
   1986c:	mov	r2, r5
   19870:	mov	r0, r4
   19874:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19878:	mov	r1, r0
   1987c:	cmp	r5, r1
   19880:	mov	r2, r5
   19884:	beq	19894 <_start@@Base+0x47a8>
   19888:	ldrb	r3, [r1]
   1988c:	cmp	r3, #58	; 0x3a
   19890:	beq	198dc <_start@@Base+0x47f0>
   19894:	mov	r0, r4
   19898:	mov	r3, #4
   1989c:	ldrd	r4, [sp]
   198a0:	ldr	r6, [sp, #8]
   198a4:	ldr	lr, [sp, #12]
   198a8:	add	sp, sp, #16
   198ac:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   198b0:	mov	r0, r1
   198b4:	bx	lr
   198b8:	cmp	r3, #34	; 0x22
   198bc:	bne	198b0 <_start@@Base+0x47c4>
   198c0:	add	r1, r1, #2
   198c4:	b	1983c <_start@@Base+0x4750>
   198c8:	ldrb	r3, [r1, #1]
   198cc:	cmp	r3, #32
   198d0:	addhi	r1, r1, #1
   198d4:	bls	1986c <_start@@Base+0x4780>
   198d8:	b	1987c <_start@@Base+0x4790>
   198dc:	mov	r0, r4
   198e0:	add	r1, r1, #1
   198e4:	ldrd	r4, [sp]
   198e8:	ldr	r6, [sp, #8]
   198ec:	ldr	lr, [sp, #12]
   198f0:	add	sp, sp, #16
   198f4:	b	17000 <_start@@Base+0x1f14>
   198f8:	ldr	ip, [r0, #12]
   198fc:	ldrb	r3, [r1, #2]
   19900:	cmp	ip, #0
   19904:	beq	199a0 <_start@@Base+0x48b4>
   19908:	cmp	r3, #58	; 0x3a
   1990c:	cmpne	r3, #32
   19910:	movhi	r3, #1
   19914:	movls	r3, #0
   19918:	bhi	19998 <_start@@Base+0x48ac>
   1991c:	add	r1, r1, #2
   19920:	str	r3, [r0, #12]
   19924:	sub	r3, r2, r1
   19928:	strd	r4, [sp, #-16]!
   1992c:	mov	r5, r2
   19930:	cmp	r3, #1
   19934:	mov	r4, r0
   19938:	str	r6, [sp, #8]
   1993c:	str	lr, [sp, #12]
   19940:	ble	19954 <_start@@Base+0x4868>
   19944:	ldrb	r3, [r1]
   19948:	cmp	r3, #32
   1994c:	bhi	19964 <_start@@Base+0x4878>
   19950:	beq	199b0 <_start@@Base+0x48c4>
   19954:	mov	r2, r5
   19958:	mov	r0, r4
   1995c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19960:	mov	r1, r0
   19964:	cmp	r5, r1
   19968:	mov	r2, r5
   1996c:	beq	1997c <_start@@Base+0x4890>
   19970:	ldrb	r3, [r1]
   19974:	cmp	r3, #58	; 0x3a
   19978:	beq	199c4 <_start@@Base+0x48d8>
   1997c:	mov	r0, r4
   19980:	mov	r3, #4
   19984:	ldrd	r4, [sp]
   19988:	ldr	r6, [sp, #8]
   1998c:	ldr	lr, [sp, #12]
   19990:	add	sp, sp, #16
   19994:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   19998:	mov	r0, r1
   1999c:	bx	lr
   199a0:	cmp	r3, #34	; 0x22
   199a4:	bne	19998 <_start@@Base+0x48ac>
   199a8:	add	r1, r1, #3
   199ac:	b	19924 <_start@@Base+0x4838>
   199b0:	ldrb	r3, [r1, #1]
   199b4:	cmp	r3, #32
   199b8:	addhi	r1, r1, #1
   199bc:	bls	19954 <_start@@Base+0x4868>
   199c0:	b	19964 <_start@@Base+0x4878>
   199c4:	mov	r0, r4
   199c8:	add	r1, r1, #1
   199cc:	ldrd	r4, [sp]
   199d0:	ldr	r6, [sp, #8]
   199d4:	ldr	lr, [sp, #12]
   199d8:	add	sp, sp, #16
   199dc:	b	17000 <_start@@Base+0x1f14>
   199e0:	strd	r4, [sp, #-16]!
   199e4:	add	ip, r1, r3
   199e8:	ldr	r4, [r0, #12]
   199ec:	str	r6, [sp, #8]
   199f0:	str	lr, [sp, #12]
   199f4:	ldrb	lr, [r1, r3]
   199f8:	cmp	r4, #0
   199fc:	beq	19a9c <_start@@Base+0x49b0>
   19a00:	cmp	lr, #58	; 0x3a
   19a04:	cmpne	lr, #32
   19a08:	movls	lr, #0
   19a0c:	movhi	lr, #1
   19a10:	strls	lr, [r0, #12]
   19a14:	bhi	19a88 <_start@@Base+0x499c>
   19a18:	sub	r3, r2, ip
   19a1c:	mov	r5, r2
   19a20:	cmp	r3, #1
   19a24:	mov	r4, r0
   19a28:	ble	19a3c <_start@@Base+0x4950>
   19a2c:	ldrb	r3, [ip]
   19a30:	cmp	r3, #32
   19a34:	bhi	19a50 <_start@@Base+0x4964>
   19a38:	beq	19ab0 <_start@@Base+0x49c4>
   19a3c:	mov	r1, ip
   19a40:	mov	r2, r5
   19a44:	mov	r0, r4
   19a48:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19a4c:	mov	ip, r0
   19a50:	cmp	r5, ip
   19a54:	mov	r2, r5
   19a58:	beq	19a68 <_start@@Base+0x497c>
   19a5c:	ldrb	r3, [ip]
   19a60:	cmp	r3, #58	; 0x3a
   19a64:	beq	19ac4 <_start@@Base+0x49d8>
   19a68:	mov	r0, r4
   19a6c:	mov	r1, ip
   19a70:	ldrd	r4, [sp]
   19a74:	mov	r3, #4
   19a78:	ldr	r6, [sp, #8]
   19a7c:	ldr	lr, [sp, #12]
   19a80:	add	sp, sp, #16
   19a84:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   19a88:	ldrd	r4, [sp]
   19a8c:	mov	r0, r1
   19a90:	ldr	r6, [sp, #8]
   19a94:	add	sp, sp, #12
   19a98:	pop	{pc}		; (ldr pc, [sp], #4)
   19a9c:	cmp	lr, #34	; 0x22
   19aa0:	bne	19a88 <_start@@Base+0x499c>
   19aa4:	add	r3, r3, #1
   19aa8:	add	ip, r1, r3
   19aac:	b	19a18 <_start@@Base+0x492c>
   19ab0:	ldrb	r3, [ip, #1]
   19ab4:	cmp	r3, #32
   19ab8:	addhi	ip, ip, #1
   19abc:	bls	19a3c <_start@@Base+0x4950>
   19ac0:	b	19a50 <_start@@Base+0x4964>
   19ac4:	mov	r0, r4
   19ac8:	add	r1, ip, #1
   19acc:	ldrd	r4, [sp]
   19ad0:	ldr	r6, [sp, #8]
   19ad4:	ldr	lr, [sp, #12]
   19ad8:	add	sp, sp, #16
   19adc:	b	17000 <_start@@Base+0x1f14>
   19ae0:	cmp	r1, r2
   19ae4:	beq	19af4 <_start@@Base+0x4a08>
   19ae8:	ldrb	ip, [r1]
   19aec:	cmp	ip, #123	; 0x7b
   19af0:	beq	19b04 <_start@@Base+0x4a18>
   19af4:	mov	ip, #0
   19af8:	str	ip, [r3]
   19afc:	mov	r3, #21
   19b00:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   19b04:	strd	r4, [sp, #-16]!
   19b08:	mov	r5, r0
   19b0c:	add	r0, r1, #1
   19b10:	str	r6, [sp, #8]
   19b14:	mov	r6, r3
   19b18:	sub	r3, r2, r0
   19b1c:	cmp	r3, #1
   19b20:	mov	r4, r2
   19b24:	str	lr, [sp, #12]
   19b28:	ble	19b3c <_start@@Base+0x4a50>
   19b2c:	ldrb	r3, [r1, #1]
   19b30:	cmp	r3, #32
   19b34:	bhi	19b4c <_start@@Base+0x4a60>
   19b38:	beq	19b78 <_start@@Base+0x4a8c>
   19b3c:	mov	r1, r0
   19b40:	mov	r2, r4
   19b44:	mov	r0, r5
   19b48:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   19b4c:	cmp	r4, r0
   19b50:	beq	19b60 <_start@@Base+0x4a74>
   19b54:	ldrb	r3, [r0]
   19b58:	cmp	r3, #125	; 0x7d
   19b5c:	beq	19b8c <_start@@Base+0x4aa0>
   19b60:	mov	r3, #1
   19b64:	ldrd	r4, [sp]
   19b68:	str	r3, [r6]
   19b6c:	ldr	r6, [sp, #8]
   19b70:	add	sp, sp, #12
   19b74:	pop	{pc}		; (ldr pc, [sp], #4)
   19b78:	ldrb	r3, [r1, #2]
   19b7c:	cmp	r3, #32
   19b80:	addhi	r0, r1, #2
   19b84:	bls	19b3c <_start@@Base+0x4a50>
   19b88:	b	19b4c <_start@@Base+0x4a60>
   19b8c:	mov	r3, #0
   19b90:	mov	r2, r4
   19b94:	ldr	lr, [sp, #12]
   19b98:	add	r1, r0, #1
   19b9c:	mov	r0, r5
   19ba0:	ldrd	r4, [sp]
   19ba4:	str	r3, [r6]
   19ba8:	ldr	r6, [sp, #8]
   19bac:	add	sp, sp, #16
   19bb0:	b	17000 <_start@@Base+0x1f14>
   19bb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19bb8:	mov	r4, r1
   19bbc:	mov	r1, #10
   19bc0:	strd	r6, [sp, #8]
   19bc4:	mov	r5, r2
   19bc8:	strd	r8, [sp, #16]
   19bcc:	mov	r9, r3
   19bd0:	mov	r3, #0
   19bd4:	mov	r8, r0
   19bd8:	strd	sl, [sp, #24]
   19bdc:	str	lr, [sp, #32]
   19be0:	sub	sp, sp, #124	; 0x7c
   19be4:	ldr	r0, [r0]
   19be8:	str	r3, [r9]
   19bec:	bl	28038 <flatcc_builder_start_table@@Base>
   19bf0:	cmp	r0, #0
   19bf4:	beq	19c30 <_start@@Base+0x4b44>
   19bf8:	mov	r1, r4
   19bfc:	mov	r2, r5
   19c00:	mov	r0, r8
   19c04:	mov	r3, #33	; 0x21
   19c08:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   19c0c:	mov	r4, r0
   19c10:	mov	r0, r4
   19c14:	add	sp, sp, #124	; 0x7c
   19c18:	ldrd	r4, [sp]
   19c1c:	ldrd	r6, [sp, #8]
   19c20:	ldrd	r8, [sp, #16]
   19c24:	ldrd	sl, [sp, #24]
   19c28:	add	sp, sp, #32
   19c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c30:	add	r0, sp, #116	; 0x74
   19c34:	mov	r3, #5
   19c38:	mov	r2, r5
   19c3c:	mov	r1, r4
   19c40:	str	r0, [sp]
   19c44:	mov	r0, r8
   19c48:	bl	32188 <flatcc_json_parser_prepare_unions@@Base>
   19c4c:	cmp	r5, r0
   19c50:	beq	19bf8 <_start@@Base+0x4b0c>
   19c54:	mov	r1, r4
   19c58:	add	r3, sp, #112	; 0x70
   19c5c:	mov	r2, r5
   19c60:	mov	r0, r8
   19c64:	bl	19ae0 <_start@@Base+0x49f4>
   19c68:	ldr	r3, [sp, #112]	; 0x70
   19c6c:	mov	r4, r0
   19c70:	cmp	r3, #0
   19c74:	beq	19fc4 <_start@@Base+0x4ed8>
   19c78:	add	r7, pc, #896	; 0x380
   19c7c:	ldrd	r6, [r7]
   19c80:	strd	sl, [sp, #24]
   19c84:	str	r9, [sp, #92]	; 0x5c
   19c88:	b	19d50 <_start@@Base+0x4c64>
   19c8c:	add	r3, pc, #884	; 0x374
   19c90:	ldrd	r2, [r3]
   19c94:	cmp	r1, r3
   19c98:	cmpeq	r0, r2
   19c9c:	beq	19e7c <_start@@Base+0x4d90>
   19ca0:	add	r3, pc, #872	; 0x368
   19ca4:	ldrd	r2, [r3]
   19ca8:	cmp	r1, r3
   19cac:	cmpeq	r0, r2
   19cb0:	beq	1a05c <_start@@Base+0x4f70>
   19cb4:	and	ip, r0, #-16777216	; 0xff000000
   19cb8:	add	r3, pc, #856	; 0x358
   19cbc:	ldrd	r2, [r3]
   19cc0:	str	ip, [sp, #24]
   19cc4:	str	r1, [sp, #28]
   19cc8:	ldrd	r0, [sp, #24]
   19ccc:	cmp	r1, r3
   19cd0:	cmpeq	r0, r2
   19cd4:	bne	19edc <_start@@Base+0x4df0>
   19cd8:	sub	r3, r5, r4
   19cdc:	cmp	r3, #5
   19ce0:	ble	19edc <_start@@Base+0x4df0>
   19ce4:	mov	r1, r4
   19ce8:	mov	r2, r5
   19cec:	mov	r0, r8
   19cf0:	bl	19640 <_start@@Base+0x4554>
   19cf4:	cmp	r0, r4
   19cf8:	mov	r1, r0
   19cfc:	beq	19edc <_start@@Base+0x4df0>
   19d00:	ldr	ip, [sp, #116]	; 0x74
   19d04:	movw	r3, #49400	; 0xc0f8
   19d08:	movt	r3, #1
   19d0c:	mov	lr, #7
   19d10:	str	r3, [sp, #8]
   19d14:	mov	r3, #3
   19d18:	mov	r2, r5
   19d1c:	mov	r0, r8
   19d20:	str	lr, [sp]
   19d24:	str	ip, [sp, #4]
   19d28:	bl	322b0 <flatcc_json_parser_union@@Base>
   19d2c:	mov	r1, r0
   19d30:	add	r3, sp, #112	; 0x70
   19d34:	mov	r2, r5
   19d38:	mov	r0, r8
   19d3c:	bl	193b0 <_start@@Base+0x42c4>
   19d40:	ldr	r3, [sp, #112]	; 0x70
   19d44:	mov	r4, r0
   19d48:	cmp	r3, #0
   19d4c:	beq	19fc0 <_start@@Base+0x4ed4>
   19d50:	cmp	r5, r4
   19d54:	beq	19d80 <_start@@Base+0x4c94>
   19d58:	ldrb	r3, [r4]
   19d5c:	cmp	r3, #34	; 0x22
   19d60:	moveq	r3, #0
   19d64:	addeq	r4, r4, #1
   19d68:	streq	r3, [r8, #12]
   19d6c:	beq	19d80 <_start@@Base+0x4c94>
   19d70:	cmp	r3, #46	; 0x2e
   19d74:	movne	r3, #1
   19d78:	strne	r3, [r8, #12]
   19d7c:	beq	1a2b4 <_start@@Base+0x51c8>
   19d80:	mov	r1, r5
   19d84:	mov	r0, r4
   19d88:	bl	151e0 <_start@@Base+0xf4>
   19d8c:	cmp	r1, r7
   19d90:	cmpeq	r0, r6
   19d94:	bls	19c8c <_start@@Base+0x4ba0>
   19d98:	add	r3, pc, #640	; 0x280
   19d9c:	ldrd	r2, [r3]
   19da0:	cmp	r1, r3
   19da4:	cmpeq	r0, r2
   19da8:	bhi	19ef4 <_start@@Base+0x4e08>
   19dac:	add	r3, pc, #628	; 0x274
   19db0:	ldrd	r2, [r3]
   19db4:	cmp	r1, r3
   19db8:	cmpeq	r0, r2
   19dbc:	bne	19edc <_start@@Base+0x4df0>
   19dc0:	add	r4, r4, #8
   19dc4:	mov	r1, r5
   19dc8:	mov	r0, r4
   19dcc:	bl	151e0 <_start@@Base+0xf4>
   19dd0:	bic	r0, r0, #255	; 0xff
   19dd4:	add	r3, pc, #596	; 0x254
   19dd8:	ldrd	r2, [r3]
   19ddc:	strd	r0, [sp, #72]	; 0x48
   19de0:	ldrd	sl, [sp, #72]	; 0x48
   19de4:	cmp	fp, r3
   19de8:	cmpeq	sl, r2
   19dec:	beq	1a33c <_start@@Base+0x5250>
   19df0:	lsr	r1, r1, #16
   19df4:	mov	r3, #0
   19df8:	mov	r2, #0
   19dfc:	lsl	r1, r1, #16
   19e00:	str	r3, [sp, #56]	; 0x38
   19e04:	mov	r3, #0
   19e08:	movt	r3, #29299	; 0x7273
   19e0c:	str	r1, [sp, #60]	; 0x3c
   19e10:	ldrd	r0, [sp, #56]	; 0x38
   19e14:	cmp	r1, r3
   19e18:	cmpeq	r0, r2
   19e1c:	bne	19edc <_start@@Base+0x4df0>
   19e20:	sub	r3, r5, r4
   19e24:	cmp	r3, #2
   19e28:	ble	19edc <_start@@Base+0x4df0>
   19e2c:	mov	r1, r4
   19e30:	mov	r2, r5
   19e34:	mov	r0, r8
   19e38:	bl	198f8 <_start@@Base+0x480c>
   19e3c:	cmp	r4, r0
   19e40:	mov	r1, r0
   19e44:	beq	19edc <_start@@Base+0x4df0>
   19e48:	ldr	ip, [sp, #116]	; 0x74
   19e4c:	mov	lr, #9
   19e50:	movw	r3, #49400	; 0xc0f8
   19e54:	movt	r3, #1
   19e58:	mov	r2, r5
   19e5c:	mov	r0, r8
   19e60:	str	lr, [sp]
   19e64:	str	ip, [sp, #4]
   19e68:	str	r3, [sp, #8]
   19e6c:	mov	r3, #4
   19e70:	bl	326b8 <flatcc_json_parser_union_vector@@Base>
   19e74:	mov	r1, r0
   19e78:	b	19d30 <_start@@Base+0x4c44>
   19e7c:	add	r4, r4, #8
   19e80:	mov	r1, r5
   19e84:	mov	r0, r4
   19e88:	bl	151e0 <_start@@Base+0xf4>
   19e8c:	bic	r0, r0, #255	; 0xff
   19e90:	add	r3, pc, #416	; 0x1a0
   19e94:	ldrd	r2, [r3]
   19e98:	strd	r0, [sp, #48]	; 0x30
   19e9c:	ldrd	sl, [sp, #48]	; 0x30
   19ea0:	cmp	fp, r3
   19ea4:	cmpeq	sl, r2
   19ea8:	beq	1a2d0 <_start@@Base+0x51e4>
   19eac:	lsr	r1, r1, #16
   19eb0:	mov	r3, #0
   19eb4:	mov	r2, #0
   19eb8:	lsl	r1, r1, #16
   19ebc:	str	r3, [sp, #32]
   19ec0:	mov	r3, #0
   19ec4:	movt	r3, #29556	; 0x7374
   19ec8:	str	r1, [sp, #36]	; 0x24
   19ecc:	ldrd	r0, [sp, #32]
   19ed0:	cmp	r1, r3
   19ed4:	cmpeq	r0, r2
   19ed8:	beq	1a1a0 <_start@@Base+0x50b4>
   19edc:	mov	r1, r4
   19ee0:	mov	r2, r5
   19ee4:	mov	r0, r8
   19ee8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   19eec:	mov	r1, r0
   19ef0:	b	19d30 <_start@@Base+0x4c44>
   19ef4:	add	r3, pc, #324	; 0x144
   19ef8:	ldrd	r2, [r3]
   19efc:	cmp	r1, r3
   19f00:	cmpeq	r0, r2
   19f04:	beq	1a104 <_start@@Base+0x5018>
   19f08:	add	r3, pc, #312	; 0x138
   19f0c:	ldrd	r2, [r3]
   19f10:	cmp	r1, r3
   19f14:	cmpeq	r0, r2
   19f18:	bne	19edc <_start@@Base+0x4df0>
   19f1c:	add	r4, r4, #8
   19f20:	mov	r1, r5
   19f24:	mov	r0, r4
   19f28:	bl	151e0 <_start@@Base+0xf4>
   19f2c:	lsr	r3, r0, #16
   19f30:	str	r3, [sp, #64]	; 0x40
   19f34:	ldr	r0, [sp, #64]	; 0x40
   19f38:	str	r1, [sp, #68]	; 0x44
   19f3c:	add	r3, pc, #268	; 0x10c
   19f40:	ldrd	r2, [r3]
   19f44:	lsl	r0, r0, #16
   19f48:	str	r0, [sp, #64]	; 0x40
   19f4c:	ldrd	sl, [sp, #64]	; 0x40
   19f50:	cmp	fp, r3
   19f54:	cmpeq	sl, r2
   19f58:	beq	1a268 <_start@@Base+0x517c>
   19f5c:	mov	r3, #0
   19f60:	str	r3, [sp, #96]	; 0x60
   19f64:	and	r3, r1, #-16777216	; 0xff000000
   19f68:	str	r3, [sp, #100]	; 0x64
   19f6c:	ldrd	r2, [sp, #96]	; 0x60
   19f70:	cmp	r3, #1795162112	; 0x6b000000
   19f74:	cmpeq	r2, #0
   19f78:	bne	19edc <_start@@Base+0x4df0>
   19f7c:	sub	r3, r5, r4
   19f80:	cmp	r3, #1
   19f84:	ble	19edc <_start@@Base+0x4df0>
   19f88:	mov	r1, r4
   19f8c:	mov	r2, r5
   19f90:	mov	r0, r8
   19f94:	bl	19810 <_start@@Base+0x4724>
   19f98:	cmp	r4, r0
   19f9c:	mov	r1, r0
   19fa0:	beq	19edc <_start@@Base+0x4df0>
   19fa4:	movw	r3, #49400	; 0xc0f8
   19fa8:	movt	r3, #1
   19fac:	ldr	ip, [sp, #116]	; 0x74
   19fb0:	mov	lr, #5
   19fb4:	str	r3, [sp, #8]
   19fb8:	mov	r3, #2
   19fbc:	b	19d18 <_start@@Base+0x4c2c>
   19fc0:	ldr	r9, [sp, #92]	; 0x5c
   19fc4:	ldr	r3, [r8, #24]
   19fc8:	cmp	r3, #0
   19fcc:	bne	19bf8 <_start@@Base+0x4b0c>
   19fd0:	mov	r1, r4
   19fd4:	mov	r2, r5
   19fd8:	ldr	r3, [sp, #116]	; 0x74
   19fdc:	mov	r0, r8
   19fe0:	bl	32224 <flatcc_json_parser_finalize_unions@@Base>
   19fe4:	mov	r4, r0
   19fe8:	ldr	r0, [r8]
   19fec:	bl	289b8 <flatcc_builder_end_table@@Base>
   19ff0:	cmp	r0, #0
   19ff4:	str	r0, [r9]
   19ff8:	bne	19c10 <_start@@Base+0x4b24>
   19ffc:	b	19bf8 <_start@@Base+0x4b0c>
   1a000:	cmnvs	r3, r4, ror #8
   1a004:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a008:	strbvs	r6, [pc, -r9, ror #28]!
   1a00c:	cmnvs	lr, r1, ror #8
   1a010:	svcvs	0x005f7479
   1a014:	cmnvs	r1, #6464	; 0x1940
   1a018:	svcvs	0x00000000
   1a01c:	cmnvs	r1, #6464	; 0x1940
   1a020:	svcpl	0x00636860
   1a024:			; <UNDEFINED> instruction: 0x6d61696e
   1a028:	cmnvs	r3, r5, ror #8
   1a02c:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a030:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a034:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1a038:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a03c:	cmnvc	r4, #116, 30	; 0x1d0
   1a040:	svcpl	0x00636861
   1a044:			; <UNDEFINED> instruction: 0x6d61696e
   1a048:	svcpl	0x006b6963
   1a04c:	cmnvc	r9, #1694498816	; 0x65000000
   1a050:	rsbvc	r0, r5, r0
   1a054:	blvs	17f7240 <__bss_end__@@Base+0x179de84>
   1a058:	andeq	r9, r5, r0, lsl #1
   1a05c:	mov	r3, #0
   1a060:	add	r4, r4, #8
   1a064:	mov	r1, r5
   1a068:	mov	r0, r4
   1a06c:	str	r3, [sp, #40]	; 0x28
   1a070:	bl	151e0 <_start@@Base+0xf4>
   1a074:	lsr	r3, r1, #16
   1a078:	mov	r2, #0
   1a07c:	str	r3, [sp, #44]	; 0x2c
   1a080:	mov	r3, #0
   1a084:	movt	r3, #28773	; 0x7065
   1a088:	ldr	r1, [sp, #44]	; 0x2c
   1a08c:	lsl	r1, r1, #16
   1a090:	str	r1, [sp, #44]	; 0x2c
   1a094:	ldrd	r0, [sp, #40]	; 0x28
   1a098:	cmp	r1, r3
   1a09c:	cmpeq	r0, r2
   1a0a0:	bne	19edc <_start@@Base+0x4df0>
   1a0a4:	sub	r3, r5, r4
   1a0a8:	cmp	r3, #2
   1a0ac:	ble	19edc <_start@@Base+0x4df0>
   1a0b0:	mov	r1, r4
   1a0b4:	mov	r2, r5
   1a0b8:	mov	r0, r8
   1a0bc:	bl	198f8 <_start@@Base+0x480c>
   1a0c0:	cmp	r4, r0
   1a0c4:	mov	r1, r0
   1a0c8:	beq	19edc <_start@@Base+0x4df0>
   1a0cc:	ldr	lr, [pc, #-124]	; 1a058 <_start@@Base+0x4f6c>
   1a0d0:	mov	r3, #7
   1a0d4:	movw	r2, #49400	; 0xc0f8
   1a0d8:	movt	r2, #1
   1a0dc:	ldr	ip, [sp, #116]	; 0x74
   1a0e0:	str	r3, [sp]
   1a0e4:	mov	r3, #3
   1a0e8:	mov	r0, r8
   1a0ec:	stmib	sp, {ip, lr}
   1a0f0:	str	r2, [sp, #12]
   1a0f4:	mov	r2, r5
   1a0f8:	bl	32438 <flatcc_json_parser_union_type@@Base>
   1a0fc:	mov	r1, r0
   1a100:	b	19d30 <_start@@Base+0x4c44>
   1a104:	add	r9, r4, #8
   1a108:	mov	r1, r5
   1a10c:	mov	r0, r9
   1a110:	bl	151e0 <_start@@Base+0xf4>
   1a114:	add	r3, pc, #676	; 0x2a4
   1a118:	ldrd	r2, [r3]
   1a11c:	cmp	r1, r3
   1a120:	cmpeq	r0, r2
   1a124:	beq	1a1e4 <_start@@Base+0x50f8>
   1a128:	lsr	r3, r0, #16
   1a12c:	str	r3, [sp, #80]	; 0x50
   1a130:	ldr	ip, [sp, #80]	; 0x50
   1a134:	str	r1, [sp, #84]	; 0x54
   1a138:	add	r3, pc, #648	; 0x288
   1a13c:	ldrd	r2, [r3]
   1a140:	lsl	ip, ip, #16
   1a144:	str	ip, [sp, #80]	; 0x50
   1a148:	ldrd	r0, [sp, #80]	; 0x50
   1a14c:	cmp	r1, r3
   1a150:	cmpeq	r0, r2
   1a154:	bne	1a3a8 <_start@@Base+0x52bc>
   1a158:	sub	r3, r5, r9
   1a15c:	cmp	r3, #6
   1a160:	ble	1a3a8 <_start@@Base+0x52bc>
   1a164:	mov	r1, r9
   1a168:	mov	r3, #6
   1a16c:	mov	r2, r5
   1a170:	mov	r0, r8
   1a174:	bl	199e0 <_start@@Base+0x48f4>
   1a178:	cmp	r9, r0
   1a17c:	mov	r1, r0
   1a180:	beq	1a3a8 <_start@@Base+0x52bc>
   1a184:	movw	r3, #49400	; 0xc0f8
   1a188:	movt	r3, #1
   1a18c:	ldr	ip, [sp, #116]	; 0x74
   1a190:	mov	lr, #1
   1a194:	str	r3, [sp, #8]
   1a198:	mov	r3, #0
   1a19c:	b	19d18 <_start@@Base+0x4c2c>
   1a1a0:	sub	r3, r5, r4
   1a1a4:	cmp	r3, #2
   1a1a8:	ble	19edc <_start@@Base+0x4df0>
   1a1ac:	mov	r1, r4
   1a1b0:	mov	r2, r5
   1a1b4:	mov	r0, r8
   1a1b8:	bl	198f8 <_start@@Base+0x480c>
   1a1bc:	cmp	r0, r4
   1a1c0:	mov	r1, r0
   1a1c4:	beq	19edc <_start@@Base+0x4df0>
   1a1c8:	movw	r3, #49400	; 0xc0f8
   1a1cc:	movt	r3, #1
   1a1d0:	ldr	ip, [sp, #116]	; 0x74
   1a1d4:	mov	lr, #3
   1a1d8:	str	r3, [sp, #8]
   1a1dc:	mov	r3, #1
   1a1e0:	b	19d18 <_start@@Base+0x4c2c>
   1a1e4:	add	r4, r4, #16
   1a1e8:	mov	r1, r5
   1a1ec:	mov	r0, r4
   1a1f0:	mov	r9, #0
   1a1f4:	bl	151e0 <_start@@Base+0xf4>
   1a1f8:	bic	r1, r1, #255	; 0xff
   1a1fc:	str	r9, [sp, #104]	; 0x68
   1a200:	add	r3, pc, #456	; 0x1c8
   1a204:	ldrd	r2, [r3]
   1a208:	str	r1, [sp, #108]	; 0x6c
   1a20c:	ldrd	r0, [sp, #104]	; 0x68
   1a210:	cmp	r1, r3
   1a214:	cmpeq	r0, r2
   1a218:	bne	19edc <_start@@Base+0x4df0>
   1a21c:	sub	r3, r5, r4
   1a220:	cmp	r3, #3
   1a224:	ble	19edc <_start@@Base+0x4df0>
   1a228:	mov	r1, r4
   1a22c:	mov	r3, #3
   1a230:	mov	r2, r5
   1a234:	mov	r0, r8
   1a238:	bl	199e0 <_start@@Base+0x48f4>
   1a23c:	cmp	r4, r0
   1a240:	mov	r1, r0
   1a244:	beq	19edc <_start@@Base+0x4df0>
   1a248:	mov	r4, #1
   1a24c:	movw	r2, #49400	; 0xc0f8
   1a250:	movt	r2, #1
   1a254:	ldr	lr, [pc, #380]	; 1a3d8 <_start@@Base+0x52ec>
   1a258:	mov	r3, r9
   1a25c:	str	r4, [sp]
   1a260:	ldr	ip, [sp, #116]	; 0x74
   1a264:	b	1a0e8 <_start@@Base+0x4ffc>
   1a268:	sub	r3, r5, r4
   1a26c:	cmp	r3, #6
   1a270:	ble	19edc <_start@@Base+0x4df0>
   1a274:	mov	r1, r4
   1a278:	mov	r3, #6
   1a27c:	mov	r2, r5
   1a280:	mov	r0, r8
   1a284:	bl	199e0 <_start@@Base+0x48f4>
   1a288:	cmp	r4, r0
   1a28c:	mov	r1, r0
   1a290:	beq	19edc <_start@@Base+0x4df0>
   1a294:	mov	r3, #5
   1a298:	movw	r2, #49400	; 0xc0f8
   1a29c:	movt	r2, #1
   1a2a0:	ldr	lr, [pc, #308]	; 1a3dc <_start@@Base+0x52f0>
   1a2a4:	str	r3, [sp]
   1a2a8:	mov	r3, #2
   1a2ac:	ldr	ip, [sp, #116]	; 0x74
   1a2b0:	b	1a0e8 <_start@@Base+0x4ffc>
   1a2b4:	mov	r1, r4
   1a2b8:	mov	r3, #5
   1a2bc:	mov	r2, r5
   1a2c0:	mov	r0, r8
   1a2c4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1a2c8:	mov	r4, r0
   1a2cc:	b	19d80 <_start@@Base+0x4c94>
   1a2d0:	sub	r3, r5, r4
   1a2d4:	cmp	r3, #7
   1a2d8:	ble	19edc <_start@@Base+0x4df0>
   1a2dc:	mov	r1, r4
   1a2e0:	mov	r3, #7
   1a2e4:	mov	r2, r5
   1a2e8:	mov	r0, r8
   1a2ec:	bl	199e0 <_start@@Base+0x48f4>
   1a2f0:	cmp	r4, r0
   1a2f4:	mov	r1, r0
   1a2f8:	beq	19edc <_start@@Base+0x4df0>
   1a2fc:	ldr	ip, [sp, #116]	; 0x74
   1a300:	mov	lr, #3
   1a304:	movw	r2, #49400	; 0xc0f8
   1a308:	movt	r2, #1
   1a30c:	movw	r3, #36976	; 0x9070
   1a310:	movt	r3, #5
   1a314:	mov	r0, r8
   1a318:	str	lr, [sp]
   1a31c:	str	r2, [sp, #12]
   1a320:	mov	r2, r5
   1a324:	str	ip, [sp, #4]
   1a328:	str	r3, [sp, #8]
   1a32c:	mov	r3, #1
   1a330:	bl	32438 <flatcc_json_parser_union_type@@Base>
   1a334:	mov	r1, r0
   1a338:	b	19d30 <_start@@Base+0x4c44>
   1a33c:	sub	r3, r5, r4
   1a340:	cmp	r3, #7
   1a344:	ble	19edc <_start@@Base+0x4df0>
   1a348:	mov	r1, r4
   1a34c:	mov	r3, #7
   1a350:	mov	r2, r5
   1a354:	mov	r0, r8
   1a358:	bl	199e0 <_start@@Base+0x48f4>
   1a35c:	cmp	r4, r0
   1a360:	mov	r1, r0
   1a364:	beq	19edc <_start@@Base+0x4df0>
   1a368:	ldr	r2, [pc, #112]	; 1a3e0 <_start@@Base+0x52f4>
   1a36c:	movw	ip, #21220	; 0x52e4
   1a370:	movt	ip, #1
   1a374:	movw	r3, #49400	; 0xc0f8
   1a378:	movt	r3, #1
   1a37c:	ldr	lr, [sp, #116]	; 0x74
   1a380:	mov	r4, #9
   1a384:	mov	r0, r8
   1a388:	stm	sp, {r4, lr}
   1a38c:	strd	r2, [sp, #8]
   1a390:	mov	r3, #4
   1a394:	mov	r2, r5
   1a398:	str	ip, [sp, #16]
   1a39c:	bl	327ec <flatcc_json_parser_union_type_vector@@Base>
   1a3a0:	mov	r1, r0
   1a3a4:	b	19d30 <_start@@Base+0x4c44>
   1a3a8:	mov	r1, r9
   1a3ac:	mov	r2, r5
   1a3b0:	mov	r0, r8
   1a3b4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1a3b8:	mov	r1, r0
   1a3bc:	b	19d30 <_start@@Base+0x4c44>
   1a3c0:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1a3c4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a3c8:	ldrbvs	r0, [r2, #-0]!
   1a3cc:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a3d0:	andeq	r0, r0, r0
   1a3d4:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a3d8:	andeq	r9, r5, r0, lsr #1
   1a3dc:	strheq	r9, [r5], -r0
   1a3e0:	muleq	r5, r0, r0
   1a3e4:	cmp	r1, r2
   1a3e8:	beq	1a3f8 <_start@@Base+0x530c>
   1a3ec:	ldrb	ip, [r1]
   1a3f0:	cmp	ip, #91	; 0x5b
   1a3f4:	beq	1a408 <_start@@Base+0x531c>
   1a3f8:	mov	ip, #0
   1a3fc:	str	ip, [r3]
   1a400:	mov	r3, #22
   1a404:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   1a408:	strd	r4, [sp, #-16]!
   1a40c:	mov	r5, r0
   1a410:	add	r0, r1, #1
   1a414:	str	r6, [sp, #8]
   1a418:	mov	r6, r3
   1a41c:	sub	r3, r2, r0
   1a420:	cmp	r3, #1
   1a424:	mov	r4, r2
   1a428:	str	lr, [sp, #12]
   1a42c:	ble	1a440 <_start@@Base+0x5354>
   1a430:	ldrb	r3, [r1, #1]
   1a434:	cmp	r3, #32
   1a438:	bhi	1a450 <_start@@Base+0x5364>
   1a43c:	beq	1a47c <_start@@Base+0x5390>
   1a440:	mov	r1, r0
   1a444:	mov	r2, r4
   1a448:	mov	r0, r5
   1a44c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1a450:	cmp	r4, r0
   1a454:	beq	1a464 <_start@@Base+0x5378>
   1a458:	ldrb	r3, [r0]
   1a45c:	cmp	r3, #93	; 0x5d
   1a460:	beq	1a490 <_start@@Base+0x53a4>
   1a464:	mov	r3, #1
   1a468:	ldrd	r4, [sp]
   1a46c:	str	r3, [r6]
   1a470:	ldr	r6, [sp, #8]
   1a474:	add	sp, sp, #12
   1a478:	pop	{pc}		; (ldr pc, [sp], #4)
   1a47c:	ldrb	r3, [r1, #2]
   1a480:	cmp	r3, #32
   1a484:	addhi	r0, r1, #2
   1a488:	bls	1a440 <_start@@Base+0x5354>
   1a48c:	b	1a450 <_start@@Base+0x5364>
   1a490:	mov	r3, #0
   1a494:	mov	r2, r4
   1a498:	ldr	lr, [sp, #12]
   1a49c:	add	r1, r0, #1
   1a4a0:	mov	r0, r5
   1a4a4:	ldrd	r4, [sp]
   1a4a8:	str	r3, [r6]
   1a4ac:	ldr	r6, [sp, #8]
   1a4b0:	add	sp, sp, #16
   1a4b4:	b	17000 <_start@@Base+0x1f14>
   1a4b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4bc:	mov	ip, #0
   1a4c0:	cmp	r1, r2
   1a4c4:	strd	r6, [sp, #8]
   1a4c8:	mov	r4, r1
   1a4cc:	mov	r6, r2
   1a4d0:	strd	r8, [sp, #16]
   1a4d4:	mov	r8, r0
   1a4d8:	strd	sl, [sp, #24]
   1a4dc:	str	lr, [sp, #32]
   1a4e0:	sub	sp, sp, #36	; 0x24
   1a4e4:	ldr	fp, [sp, #72]	; 0x48
   1a4e8:	str	r3, [sp, #12]
   1a4ec:	str	ip, [fp]
   1a4f0:	beq	1a60c <_start@@Base+0x5520>
   1a4f4:	ldrb	r3, [r1]
   1a4f8:	cmp	r3, #34	; 0x22
   1a4fc:	moveq	r3, #0
   1a500:	addeq	r4, r1, #1
   1a504:	streq	r3, [r0, #12]
   1a508:	beq	1a61c <_start@@Base+0x5530>
   1a50c:	cmp	r3, #46	; 0x2e
   1a510:	movne	r3, #1
   1a514:	strne	r3, [r0, #12]
   1a518:	beq	1a5e4 <_start@@Base+0x54f8>
   1a51c:	add	sl, sp, #20
   1a520:	add	r9, sp, #24
   1a524:	ldr	r5, [sp, #12]
   1a528:	b	1a544 <_start@@Base+0x5458>
   1a52c:	cmp	r4, r0
   1a530:	mov	r4, r0
   1a534:	bne	1a58c <_start@@Base+0x54a0>
   1a538:	ldr	r3, [r5, #4]!
   1a53c:	cmp	r3, #0
   1a540:	beq	1a660 <_start@@Base+0x5574>
   1a544:	add	r3, sp, #16
   1a548:	mov	r2, r6
   1a54c:	stm	sp, {r9, sl}
   1a550:	mov	r1, r4
   1a554:	mov	r0, r8
   1a558:	ldr	r7, [r5]
   1a55c:	blx	r7
   1a560:	cmp	r6, r0
   1a564:	bne	1a52c <_start@@Base+0x5440>
   1a568:	mov	r7, r0
   1a56c:	mov	r0, r7
   1a570:	add	sp, sp, #36	; 0x24
   1a574:	ldrd	r4, [sp]
   1a578:	ldrd	r6, [sp, #8]
   1a57c:	ldrd	r8, [sp, #16]
   1a580:	ldrd	sl, [sp, #24]
   1a584:	add	sp, sp, #32
   1a588:	pop	{pc}		; (ldr pc, [sp], #4)
   1a58c:	mov	r7, r0
   1a590:	ldrd	r0, [sp, #24]
   1a594:	bl	420e0 <flatcc_json_printer_clear@@Base+0x5c8>
   1a598:	ldr	r3, [sp, #16]
   1a59c:	vmov	s15, r0
   1a5a0:	cmp	r3, #0
   1a5a4:	beq	1a5c8 <_start@@Base+0x54dc>
   1a5a8:	vldr	s14, [fp]
   1a5ac:	ldr	r3, [sp, #20]
   1a5b0:	vsub.f32	s15, s14, s15
   1a5b4:	cmp	r3, #0
   1a5b8:	vstr	s15, [fp]
   1a5bc:	beq	1a56c <_start@@Base+0x5480>
   1a5c0:	mov	r4, r7
   1a5c4:	b	1a524 <_start@@Base+0x5438>
   1a5c8:	vldr	s14, [fp]
   1a5cc:	ldr	r3, [sp, #20]
   1a5d0:	vadd.f32	s15, s14, s15
   1a5d4:	cmp	r3, #0
   1a5d8:	vstr	s15, [fp]
   1a5dc:	bne	1a5c0 <_start@@Base+0x54d4>
   1a5e0:	b	1a56c <_start@@Base+0x5480>
   1a5e4:	mov	r3, #5
   1a5e8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1a5ec:	ldr	r3, [r8, #12]
   1a5f0:	mov	r4, r0
   1a5f4:	cmp	r3, #0
   1a5f8:	beq	1a61c <_start@@Base+0x5530>
   1a5fc:	cmp	r6, r4
   1a600:	bne	1a51c <_start@@Base+0x5430>
   1a604:	mov	r7, r6
   1a608:	b	1a56c <_start@@Base+0x5480>
   1a60c:	ldr	r3, [r0, #12]
   1a610:	cmp	r3, #0
   1a614:	movne	r7, r1
   1a618:	bne	1a56c <_start@@Base+0x5480>
   1a61c:	sub	r3, r6, r4
   1a620:	cmp	r3, #1
   1a624:	ble	1a648 <_start@@Base+0x555c>
   1a628:	ldrb	r3, [r4]
   1a62c:	cmp	r3, #32
   1a630:	bhi	1a5fc <_start@@Base+0x5510>
   1a634:	bne	1a648 <_start@@Base+0x555c>
   1a638:	ldrb	r3, [r4, #1]
   1a63c:	cmp	r3, #32
   1a640:	addhi	r4, r4, #1
   1a644:	bhi	1a5fc <_start@@Base+0x5510>
   1a648:	mov	r1, r4
   1a64c:	mov	r2, r6
   1a650:	mov	r0, r8
   1a654:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1a658:	mov	r4, r0
   1a65c:	b	1a5fc <_start@@Base+0x5510>
   1a660:	mov	r1, r0
   1a664:	mov	r2, r6
   1a668:	mov	r0, r8
   1a66c:	mov	r3, #23
   1a670:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1a674:	mov	r7, r0
   1a678:	b	1a56c <_start@@Base+0x5480>
   1a67c:	vldr	d7, [pc, #444]	; 1a840 <_start@@Base+0x5754>
   1a680:	cmp	r1, r2
   1a684:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a688:	mov	r4, r1
   1a68c:	strd	r6, [sp, #8]
   1a690:	mov	r6, r2
   1a694:	strd	r8, [sp, #16]
   1a698:	mov	r8, r0
   1a69c:	strd	sl, [sp, #24]
   1a6a0:	str	lr, [sp, #32]
   1a6a4:	sub	sp, sp, #36	; 0x24
   1a6a8:	ldr	fp, [sp, #72]	; 0x48
   1a6ac:	str	r3, [sp, #12]
   1a6b0:	vstr	d7, [fp]
   1a6b4:	beq	1a7d0 <_start@@Base+0x56e4>
   1a6b8:	ldrb	r3, [r1]
   1a6bc:	cmp	r3, #34	; 0x22
   1a6c0:	moveq	r3, #0
   1a6c4:	addeq	r4, r1, #1
   1a6c8:	streq	r3, [r0, #12]
   1a6cc:	beq	1a7e0 <_start@@Base+0x56f4>
   1a6d0:	cmp	r3, #46	; 0x2e
   1a6d4:	movne	r3, #1
   1a6d8:	strne	r3, [r0, #12]
   1a6dc:	beq	1a7a8 <_start@@Base+0x56bc>
   1a6e0:	add	sl, sp, #20
   1a6e4:	add	r9, sp, #24
   1a6e8:	ldr	r5, [sp, #12]
   1a6ec:	b	1a708 <_start@@Base+0x561c>
   1a6f0:	cmp	r4, r0
   1a6f4:	mov	r4, r0
   1a6f8:	bne	1a750 <_start@@Base+0x5664>
   1a6fc:	ldr	r3, [r5, #4]!
   1a700:	cmp	r3, #0
   1a704:	beq	1a824 <_start@@Base+0x5738>
   1a708:	add	r3, sp, #16
   1a70c:	mov	r2, r6
   1a710:	stm	sp, {r9, sl}
   1a714:	mov	r1, r4
   1a718:	mov	r0, r8
   1a71c:	ldr	r7, [r5]
   1a720:	blx	r7
   1a724:	cmp	r6, r0
   1a728:	bne	1a6f0 <_start@@Base+0x5604>
   1a72c:	mov	r7, r0
   1a730:	mov	r0, r7
   1a734:	add	sp, sp, #36	; 0x24
   1a738:	ldrd	r4, [sp]
   1a73c:	ldrd	r6, [sp, #8]
   1a740:	ldrd	r8, [sp, #16]
   1a744:	ldrd	sl, [sp, #24]
   1a748:	add	sp, sp, #32
   1a74c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a750:	mov	r7, r0
   1a754:	ldrd	r0, [sp, #24]
   1a758:	bl	41ea8 <flatcc_json_printer_clear@@Base+0x390>
   1a75c:	ldr	r3, [sp, #16]
   1a760:	vmov	d7, r0, r1
   1a764:	cmp	r3, #0
   1a768:	beq	1a78c <_start@@Base+0x56a0>
   1a76c:	vldr	d6, [fp]
   1a770:	ldr	r3, [sp, #20]
   1a774:	vsub.f64	d7, d6, d7
   1a778:	cmp	r3, #0
   1a77c:	vstr	d7, [fp]
   1a780:	beq	1a730 <_start@@Base+0x5644>
   1a784:	mov	r4, r7
   1a788:	b	1a6e8 <_start@@Base+0x55fc>
   1a78c:	vldr	d6, [fp]
   1a790:	ldr	r3, [sp, #20]
   1a794:	vadd.f64	d7, d6, d7
   1a798:	cmp	r3, #0
   1a79c:	vstr	d7, [fp]
   1a7a0:	bne	1a784 <_start@@Base+0x5698>
   1a7a4:	b	1a730 <_start@@Base+0x5644>
   1a7a8:	mov	r3, #5
   1a7ac:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1a7b0:	ldr	r3, [r8, #12]
   1a7b4:	mov	r4, r0
   1a7b8:	cmp	r3, #0
   1a7bc:	beq	1a7e0 <_start@@Base+0x56f4>
   1a7c0:	cmp	r6, r4
   1a7c4:	bne	1a6e0 <_start@@Base+0x55f4>
   1a7c8:	mov	r7, r6
   1a7cc:	b	1a730 <_start@@Base+0x5644>
   1a7d0:	ldr	r3, [r0, #12]
   1a7d4:	cmp	r3, #0
   1a7d8:	movne	r7, r1
   1a7dc:	bne	1a730 <_start@@Base+0x5644>
   1a7e0:	sub	r3, r6, r4
   1a7e4:	cmp	r3, #1
   1a7e8:	ble	1a80c <_start@@Base+0x5720>
   1a7ec:	ldrb	r3, [r4]
   1a7f0:	cmp	r3, #32
   1a7f4:	bhi	1a7c0 <_start@@Base+0x56d4>
   1a7f8:	bne	1a80c <_start@@Base+0x5720>
   1a7fc:	ldrb	r3, [r4, #1]
   1a800:	cmp	r3, #32
   1a804:	addhi	r4, r4, #1
   1a808:	bhi	1a7c0 <_start@@Base+0x56d4>
   1a80c:	mov	r1, r4
   1a810:	mov	r2, r6
   1a814:	mov	r0, r8
   1a818:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1a81c:	mov	r4, r0
   1a820:	b	1a7c0 <_start@@Base+0x56d4>
   1a824:	mov	r1, r0
   1a828:	mov	r2, r6
   1a82c:	mov	r0, r8
   1a830:	mov	r3, #23
   1a834:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1a838:	mov	r7, r0
   1a83c:	b	1a730 <_start@@Base+0x5644>
	...
   1a848:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a84c:	mov	r4, r1
   1a850:	mov	r5, r0
   1a854:	strd	r6, [sp, #8]
   1a858:	strd	r8, [sp, #16]
   1a85c:	strd	sl, [sp, #24]
   1a860:	mov	sl, r2
   1a864:	mov	fp, r3
   1a868:	str	lr, [sp, #32]
   1a86c:	sub	sp, sp, #12
   1a870:	ldrd	r2, [sp, #48]	; 0x30
   1a874:	strd	r2, [sp]
   1a878:	sub	r2, sl, r1
   1a87c:	cmp	r2, #8
   1a880:	bhi	1a8b4 <_start@@Base+0x57c8>
   1a884:	sub	r2, r2, #1
   1a888:	cmp	r2, #7
   1a88c:	ldrls	pc, [pc, r2, lsl #2]
   1a890:	b	1a98c <_start@@Base+0x58a0>
   1a894:	andeq	sl, r1, ip, lsr #19
   1a898:			; <UNDEFINED> instruction: 0x0001a9b8
   1a89c:	andeq	sl, r1, r4, asr #19
   1a8a0:	ldrdeq	sl, [r1], -r0
   1a8a4:	ldrdeq	sl, [r1], -ip
   1a8a8:	andeq	sl, r1, r8, ror #19
   1a8ac:	strdeq	sl, [r1], -r4
   1a8b0:			; <UNDEFINED> instruction: 0x0001a8b4
   1a8b4:	ldrb	r6, [r4, #7]
   1a8b8:	mov	r7, #0
   1a8bc:	mov	r3, r7
   1a8c0:	ldrb	r0, [r4, #6]
   1a8c4:	orr	r2, r6, r0, lsl #8
   1a8c8:	ldrb	r0, [r4, #5]
   1a8cc:	orr	r2, r2, r0, lsl #16
   1a8d0:	ldrb	r0, [r4, #4]
   1a8d4:	orr	r2, r2, r0, lsl #24
   1a8d8:	ldrb	r8, [r4, #3]
   1a8dc:	orr	r3, r3, r8
   1a8e0:	ldrb	r6, [r4, #2]
   1a8e4:	orr	r3, r3, r6, lsl #8
   1a8e8:	ldrb	r6, [r4, #1]
   1a8ec:	orr	r3, r3, r6, lsl #16
   1a8f0:	ldrb	r8, [r4]
   1a8f4:	add	r7, pc, #260	; 0x104
   1a8f8:	ldrd	r6, [r7]
   1a8fc:	orr	r1, r3, r8, lsl #24
   1a900:	mov	r8, #0
   1a904:	cmp	r1, r7
   1a908:	cmpeq	r2, r6
   1a90c:	bne	1a98c <_start@@Base+0x58a0>
   1a910:	add	r6, r4, #8
   1a914:	mov	r1, sl
   1a918:	mov	r0, r6
   1a91c:	bl	151e0 <_start@@Base+0xf4>
   1a920:	and	r3, r1, #-16777216	; 0xff000000
   1a924:	cmp	r3, #1912602624	; 0x72000000
   1a928:	cmpeq	r8, #0
   1a92c:	bne	1a98c <_start@@Base+0x58a0>
   1a930:	sub	r3, sl, r6
   1a934:	cmp	r3, #1
   1a938:	ble	1a98c <_start@@Base+0x58a0>
   1a93c:	ldrb	r3, [r4, #9]
   1a940:	cmp	r3, #46	; 0x2e
   1a944:	bne	1a98c <_start@@Base+0x58a0>
   1a948:	add	r1, r4, #10
   1a94c:	cmp	r6, r1
   1a950:	beq	1a98c <_start@@Base+0x58a0>
   1a954:	ldm	sp, {r0, ip}
   1a958:	mov	r3, fp
   1a95c:	mov	r2, sl
   1a960:	str	r0, [sp, #48]	; 0x30
   1a964:	mov	r0, r5
   1a968:	str	ip, [sp, #52]	; 0x34
   1a96c:	add	sp, sp, #12
   1a970:	ldrd	r4, [sp]
   1a974:	ldrd	r6, [sp, #8]
   1a978:	ldrd	r8, [sp, #16]
   1a97c:	ldrd	sl, [sp, #24]
   1a980:	ldr	lr, [sp, #32]
   1a984:	add	sp, sp, #36	; 0x24
   1a988:	b	163b0 <_start@@Base+0x12c4>
   1a98c:	mov	r0, r4
   1a990:	add	sp, sp, #12
   1a994:	ldrd	r4, [sp]
   1a998:	ldrd	r6, [sp, #8]
   1a99c:	ldrd	r8, [sp, #16]
   1a9a0:	ldrd	sl, [sp, #24]
   1a9a4:	add	sp, sp, #32
   1a9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9ac:	mov	r2, #0
   1a9b0:	mov	r3, r2
   1a9b4:	b	1a8f0 <_start@@Base+0x5804>
   1a9b8:	mov	r2, #0
   1a9bc:	mov	r3, r2
   1a9c0:	b	1a8e8 <_start@@Base+0x57fc>
   1a9c4:	mov	r2, #0
   1a9c8:	mov	r3, r2
   1a9cc:	b	1a8e0 <_start@@Base+0x57f4>
   1a9d0:	mov	r2, #0
   1a9d4:	mov	r3, r2
   1a9d8:	b	1a8d8 <_start@@Base+0x57ec>
   1a9dc:	mov	r2, #0
   1a9e0:	mov	r3, r2
   1a9e4:	b	1a8d0 <_start@@Base+0x57e4>
   1a9e8:	mov	r2, #0
   1a9ec:	mov	r3, r2
   1a9f0:	b	1a8c8 <_start@@Base+0x57dc>
   1a9f4:	mov	r6, #0
   1a9f8:	mov	r7, #0
   1a9fc:	b	1a8bc <_start@@Base+0x57d0>
   1aa00:	cmnvs	r3, r5, ror #8
   1aa04:	cmnmi	r8, #-2147483620	; 0x8000001c
   1aa08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa0c:	mov	ip, #0
   1aa10:	cmp	r1, r2
   1aa14:	strd	r6, [sp, #8]
   1aa18:	mov	r4, r1
   1aa1c:	mov	r6, r2
   1aa20:	strd	r8, [sp, #16]
   1aa24:	mov	r8, r0
   1aa28:	strd	sl, [sp, #24]
   1aa2c:	str	lr, [sp, #32]
   1aa30:	sub	sp, sp, #36	; 0x24
   1aa34:	str	r3, [sp, #12]
   1aa38:	ldr	r3, [sp, #72]	; 0x48
   1aa3c:	strb	ip, [r3]
   1aa40:	beq	1ab64 <_start@@Base+0x5a78>
   1aa44:	ldrb	r3, [r1]
   1aa48:	cmp	r3, #34	; 0x22
   1aa4c:	addeq	r4, r1, #1
   1aa50:	streq	ip, [r0, #12]
   1aa54:	beq	1ab74 <_start@@Base+0x5a88>
   1aa58:	cmp	r3, #46	; 0x2e
   1aa5c:	movne	r3, #1
   1aa60:	strne	r3, [r0, #12]
   1aa64:	beq	1ab40 <_start@@Base+0x5a54>
   1aa68:	mov	fp, #0
   1aa6c:	add	sl, sp, #20
   1aa70:	add	r9, sp, #24
   1aa74:	mov	r7, r4
   1aa78:	mov	r1, r4
   1aa7c:	ldr	r5, [sp, #12]
   1aa80:	b	1aa9c <_start@@Base+0x59b0>
   1aa84:	cmp	r7, r0
   1aa88:	mov	r7, r0
   1aa8c:	bne	1aae4 <_start@@Base+0x59f8>
   1aa90:	ldr	r3, [r5, #4]!
   1aa94:	cmp	r3, #0
   1aa98:	beq	1ab28 <_start@@Base+0x5a3c>
   1aa9c:	add	r3, sp, #16
   1aaa0:	mov	r2, r6
   1aaa4:	stm	sp, {r9, sl}
   1aaa8:	mov	r0, r8
   1aaac:	ldr	r4, [r5]
   1aab0:	blx	r4
   1aab4:	cmp	r6, r0
   1aab8:	mov	r1, r0
   1aabc:	bne	1aa84 <_start@@Base+0x5998>
   1aac0:	mov	r4, r0
   1aac4:	mov	r0, r4
   1aac8:	add	sp, sp, #36	; 0x24
   1aacc:	ldrd	r4, [sp]
   1aad0:	ldrd	r6, [sp, #8]
   1aad4:	ldrd	r8, [sp, #16]
   1aad8:	ldrd	sl, [sp, #24]
   1aadc:	add	sp, sp, #32
   1aae0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aae4:	ldr	r3, [sp, #16]
   1aae8:	mov	r4, r0
   1aaec:	cmp	r3, #0
   1aaf0:	bne	1abb8 <_start@@Base+0x5acc>
   1aaf4:	ldrd	r2, [sp, #24]
   1aaf8:	orrs	r3, r2, r3
   1aafc:	movne	fp, #1
   1ab00:	moveq	fp, #0
   1ab04:	ldr	r2, [sp, #20]
   1ab08:	ldr	r3, [sp, #72]	; 0x48
   1ab0c:	cmp	r2, #0
   1ab10:	ldr	r2, [sp, #72]	; 0x48
   1ab14:	ldrb	r3, [r3]
   1ab18:	add	r3, fp, r3
   1ab1c:	strb	r3, [r2]
   1ab20:	bne	1aa74 <_start@@Base+0x5988>
   1ab24:	b	1aac4 <_start@@Base+0x59d8>
   1ab28:	mov	r2, r6
   1ab2c:	mov	r0, r8
   1ab30:	mov	r3, #23
   1ab34:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ab38:	mov	r4, r0
   1ab3c:	b	1aac4 <_start@@Base+0x59d8>
   1ab40:	mov	r3, #5
   1ab44:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ab48:	ldr	r3, [r8, #12]
   1ab4c:	mov	r4, r0
   1ab50:	cmp	r3, #0
   1ab54:	beq	1ab74 <_start@@Base+0x5a88>
   1ab58:	cmp	r6, r4
   1ab5c:	bne	1aa68 <_start@@Base+0x597c>
   1ab60:	b	1aac4 <_start@@Base+0x59d8>
   1ab64:	ldr	r3, [r0, #12]
   1ab68:	cmp	r3, #0
   1ab6c:	bne	1aac4 <_start@@Base+0x59d8>
   1ab70:	mov	r4, r6
   1ab74:	sub	r3, r6, r4
   1ab78:	cmp	r3, #1
   1ab7c:	ble	1aba0 <_start@@Base+0x5ab4>
   1ab80:	ldrb	r3, [r4]
   1ab84:	cmp	r3, #32
   1ab88:	bhi	1ab58 <_start@@Base+0x5a6c>
   1ab8c:	bne	1aba0 <_start@@Base+0x5ab4>
   1ab90:	ldrb	r3, [r4, #1]
   1ab94:	cmp	r3, #32
   1ab98:	addhi	r4, r4, #1
   1ab9c:	bhi	1ab58 <_start@@Base+0x5a6c>
   1aba0:	mov	r1, r4
   1aba4:	mov	r2, r6
   1aba8:	mov	r0, r8
   1abac:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1abb0:	mov	r4, r0
   1abb4:	b	1ab58 <_start@@Base+0x5a6c>
   1abb8:	mov	r3, #8
   1abbc:	mov	r2, r6
   1abc0:	mov	r1, r4
   1abc4:	mov	r0, r8
   1abc8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1abcc:	cmp	r6, r0
   1abd0:	bne	1ab04 <_start@@Base+0x5a18>
   1abd4:	mov	r4, r6
   1abd8:	b	1aac4 <_start@@Base+0x59d8>
   1abdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1abe0:	mov	r4, #0
   1abe4:	mov	r5, #0
   1abe8:	strd	r6, [sp, #8]
   1abec:	cmp	r1, r2
   1abf0:	mov	r6, r2
   1abf4:	strd	r8, [sp, #16]
   1abf8:	mov	r8, r0
   1abfc:	strd	sl, [sp, #24]
   1ac00:	str	lr, [sp, #32]
   1ac04:	sub	sp, sp, #44	; 0x2c
   1ac08:	ldr	fp, [sp, #80]	; 0x50
   1ac0c:	str	r3, [sp, #20]
   1ac10:	strd	r4, [fp]
   1ac14:	beq	1ad54 <_start@@Base+0x5c68>
   1ac18:	ldrb	r3, [r1]
   1ac1c:	cmp	r3, #34	; 0x22
   1ac20:	moveq	r3, #0
   1ac24:	addeq	r4, r1, #1
   1ac28:	streq	r3, [r0, #12]
   1ac2c:	beq	1ad68 <_start@@Base+0x5c7c>
   1ac30:	cmp	r3, #46	; 0x2e
   1ac34:	movne	r3, #1
   1ac38:	movne	r4, r1
   1ac3c:	strne	r3, [r0, #12]
   1ac40:	beq	1ad30 <_start@@Base+0x5c44>
   1ac44:	mov	r3, #0
   1ac48:	add	sl, sp, #28
   1ac4c:	add	r9, sp, #32
   1ac50:	str	r3, [sp, #12]
   1ac54:	str	r3, [sp, #16]
   1ac58:	mov	r7, r4
   1ac5c:	mov	r1, r4
   1ac60:	ldr	r5, [sp, #20]
   1ac64:	b	1ac80 <_start@@Base+0x5b94>
   1ac68:	cmp	r7, r0
   1ac6c:	mov	r7, r0
   1ac70:	bne	1acc8 <_start@@Base+0x5bdc>
   1ac74:	ldr	r3, [r5, #4]!
   1ac78:	cmp	r3, #0
   1ac7c:	beq	1ad18 <_start@@Base+0x5c2c>
   1ac80:	add	r3, sp, #24
   1ac84:	mov	r2, r6
   1ac88:	stm	sp, {r9, sl}
   1ac8c:	mov	r0, r8
   1ac90:	ldr	r4, [r5]
   1ac94:	blx	r4
   1ac98:	cmp	r6, r0
   1ac9c:	mov	r1, r0
   1aca0:	bne	1ac68 <_start@@Base+0x5b7c>
   1aca4:	mov	r4, r0
   1aca8:	mov	r0, r4
   1acac:	add	sp, sp, #44	; 0x2c
   1acb0:	ldrd	r4, [sp]
   1acb4:	ldrd	r6, [sp, #8]
   1acb8:	ldrd	r8, [sp, #16]
   1acbc:	ldrd	sl, [sp, #24]
   1acc0:	add	sp, sp, #32
   1acc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc8:	ldr	r3, [sp, #24]
   1accc:	mov	r4, r0
   1acd0:	cmp	r3, #0
   1acd4:	bne	1adac <_start@@Base+0x5cc0>
   1acd8:	ldr	r3, [sp, #32]
   1acdc:	str	r3, [sp, #12]
   1ace0:	ldr	r3, [sp, #36]	; 0x24
   1ace4:	str	r3, [sp, #16]
   1ace8:	ldr	r3, [fp]
   1acec:	ldr	r0, [sp, #12]
   1acf0:	ldr	r2, [fp, #4]
   1acf4:	ldr	r1, [sp, #28]
   1acf8:	adds	r3, r3, r0
   1acfc:	ldr	r0, [sp, #16]
   1ad00:	str	r3, [fp]
   1ad04:	adc	r2, r2, r0
   1ad08:	cmp	r1, #0
   1ad0c:	str	r2, [fp, #4]
   1ad10:	bne	1ac58 <_start@@Base+0x5b6c>
   1ad14:	b	1aca8 <_start@@Base+0x5bbc>
   1ad18:	mov	r2, r6
   1ad1c:	mov	r0, r8
   1ad20:	mov	r3, #23
   1ad24:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ad28:	mov	r4, r0
   1ad2c:	b	1aca8 <_start@@Base+0x5bbc>
   1ad30:	mov	r3, #5
   1ad34:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ad38:	ldr	r3, [r8, #12]
   1ad3c:	mov	r4, r0
   1ad40:	cmp	r3, #0
   1ad44:	beq	1ad68 <_start@@Base+0x5c7c>
   1ad48:	cmp	r6, r4
   1ad4c:	bne	1ac44 <_start@@Base+0x5b58>
   1ad50:	b	1aca8 <_start@@Base+0x5bbc>
   1ad54:	ldr	r3, [r0, #12]
   1ad58:	cmp	r3, #0
   1ad5c:	movne	r4, r1
   1ad60:	bne	1aca8 <_start@@Base+0x5bbc>
   1ad64:	mov	r4, r6
   1ad68:	sub	r3, r6, r4
   1ad6c:	cmp	r3, #1
   1ad70:	ble	1ad94 <_start@@Base+0x5ca8>
   1ad74:	ldrb	r3, [r4]
   1ad78:	cmp	r3, #32
   1ad7c:	bhi	1ad48 <_start@@Base+0x5c5c>
   1ad80:	bne	1ad94 <_start@@Base+0x5ca8>
   1ad84:	ldrb	r3, [r4, #1]
   1ad88:	cmp	r3, #32
   1ad8c:	addhi	r4, r4, #1
   1ad90:	bhi	1ad48 <_start@@Base+0x5c5c>
   1ad94:	mov	r1, r4
   1ad98:	mov	r2, r6
   1ad9c:	mov	r0, r8
   1ada0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1ada4:	mov	r4, r0
   1ada8:	b	1ad48 <_start@@Base+0x5c5c>
   1adac:	mov	r3, #8
   1adb0:	mov	r2, r6
   1adb4:	mov	r1, r4
   1adb8:	mov	r0, r8
   1adbc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1adc0:	cmp	r6, r0
   1adc4:	bne	1ace8 <_start@@Base+0x5bfc>
   1adc8:	mov	r4, r6
   1adcc:	b	1aca8 <_start@@Base+0x5bbc>
   1add0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1add4:	mov	ip, #0
   1add8:	cmp	r1, r2
   1addc:	strd	r6, [sp, #8]
   1ade0:	mov	r4, r1
   1ade4:	mov	r6, r2
   1ade8:	strd	r8, [sp, #16]
   1adec:	mov	r8, r0
   1adf0:	strd	sl, [sp, #24]
   1adf4:	mov	fp, r3
   1adf8:	str	lr, [sp, #32]
   1adfc:	sub	sp, sp, #36	; 0x24
   1ae00:	ldr	r3, [sp, #72]	; 0x48
   1ae04:	strh	ip, [r3]
   1ae08:	beq	1af44 <_start@@Base+0x5e58>
   1ae0c:	ldrb	r3, [r1]
   1ae10:	cmp	r3, #34	; 0x22
   1ae14:	addeq	r4, r1, #1
   1ae18:	streq	ip, [r0, #12]
   1ae1c:	beq	1af54 <_start@@Base+0x5e68>
   1ae20:	cmp	r3, #46	; 0x2e
   1ae24:	movne	r3, #1
   1ae28:	strne	r3, [r0, #12]
   1ae2c:	beq	1af20 <_start@@Base+0x5e34>
   1ae30:	mov	r3, #0
   1ae34:	add	sl, sp, #20
   1ae38:	add	r9, sp, #24
   1ae3c:	str	r3, [sp, #12]
   1ae40:	mov	r5, fp
   1ae44:	mov	r7, r4
   1ae48:	mov	r1, r4
   1ae4c:	b	1ae68 <_start@@Base+0x5d7c>
   1ae50:	cmp	r7, r0
   1ae54:	mov	r7, r0
   1ae58:	bne	1aeb0 <_start@@Base+0x5dc4>
   1ae5c:	ldr	r3, [r5, #4]!
   1ae60:	cmp	r3, #0
   1ae64:	beq	1af08 <_start@@Base+0x5e1c>
   1ae68:	add	r3, sp, #16
   1ae6c:	mov	r2, r6
   1ae70:	stm	sp, {r9, sl}
   1ae74:	mov	r0, r8
   1ae78:	ldr	r4, [r5]
   1ae7c:	blx	r4
   1ae80:	cmp	r6, r0
   1ae84:	mov	r1, r0
   1ae88:	bne	1ae50 <_start@@Base+0x5d64>
   1ae8c:	mov	r4, r0
   1ae90:	mov	r0, r4
   1ae94:	add	sp, sp, #36	; 0x24
   1ae98:	ldrd	r4, [sp]
   1ae9c:	ldrd	r6, [sp, #8]
   1aea0:	ldrd	r8, [sp, #16]
   1aea4:	ldrd	sl, [sp, #24]
   1aea8:	add	sp, sp, #32
   1aeac:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb0:	ldr	r3, [sp, #16]
   1aeb4:	mov	r4, r0
   1aeb8:	cmp	r3, #0
   1aebc:	bne	1af98 <_start@@Base+0x5eac>
   1aec0:	ldrd	r2, [sp, #24]
   1aec4:	mov	r1, #0
   1aec8:	movw	r0, #65535	; 0xffff
   1aecc:	cmp	r3, r1
   1aed0:	cmpeq	r2, r0
   1aed4:	uxthls	r3, r2
   1aed8:	strls	r3, [sp, #12]
   1aedc:	bhi	1afbc <_start@@Base+0x5ed0>
   1aee0:	ldr	r1, [sp, #12]
   1aee4:	ldr	r3, [sp, #72]	; 0x48
   1aee8:	ldr	r2, [sp, #20]
   1aeec:	ldrh	r3, [r3]
   1aef0:	cmp	r2, #0
   1aef4:	ldr	r2, [sp, #72]	; 0x48
   1aef8:	add	r3, r1, r3
   1aefc:	strh	r3, [r2]
   1af00:	bne	1ae40 <_start@@Base+0x5d54>
   1af04:	b	1ae90 <_start@@Base+0x5da4>
   1af08:	mov	r2, r6
   1af0c:	mov	r0, r8
   1af10:	mov	r3, #23
   1af14:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1af18:	mov	r4, r0
   1af1c:	b	1ae90 <_start@@Base+0x5da4>
   1af20:	mov	r3, #5
   1af24:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1af28:	ldr	r3, [r8, #12]
   1af2c:	mov	r4, r0
   1af30:	cmp	r3, #0
   1af34:	beq	1af54 <_start@@Base+0x5e68>
   1af38:	cmp	r6, r4
   1af3c:	bne	1ae30 <_start@@Base+0x5d44>
   1af40:	b	1ae90 <_start@@Base+0x5da4>
   1af44:	ldr	r3, [r0, #12]
   1af48:	cmp	r3, #0
   1af4c:	bne	1ae90 <_start@@Base+0x5da4>
   1af50:	mov	r4, r6
   1af54:	sub	r3, r6, r4
   1af58:	cmp	r3, #1
   1af5c:	ble	1af80 <_start@@Base+0x5e94>
   1af60:	ldrb	r3, [r4]
   1af64:	cmp	r3, #32
   1af68:	bhi	1af38 <_start@@Base+0x5e4c>
   1af6c:	bne	1af80 <_start@@Base+0x5e94>
   1af70:	ldrb	r3, [r4, #1]
   1af74:	cmp	r3, #32
   1af78:	addhi	r4, r4, #1
   1af7c:	bhi	1af38 <_start@@Base+0x5e4c>
   1af80:	mov	r1, r4
   1af84:	mov	r2, r6
   1af88:	mov	r0, r8
   1af8c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1af90:	mov	r4, r0
   1af94:	b	1af38 <_start@@Base+0x5e4c>
   1af98:	mov	r3, #8
   1af9c:	mov	r2, r6
   1afa0:	mov	r1, r4
   1afa4:	mov	r0, r8
   1afa8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1afac:	cmp	r6, r0
   1afb0:	bne	1aee0 <_start@@Base+0x5df4>
   1afb4:	mov	r4, r6
   1afb8:	b	1ae90 <_start@@Base+0x5da4>
   1afbc:	mov	r3, #7
   1afc0:	mov	r2, r6
   1afc4:	mov	r1, r4
   1afc8:	mov	r0, r8
   1afcc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1afd0:	b	1afac <_start@@Base+0x5ec0>
   1afd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1afd8:	mov	ip, #0
   1afdc:	cmp	r1, r2
   1afe0:	strd	r6, [sp, #8]
   1afe4:	mov	r4, r1
   1afe8:	mov	r6, r2
   1afec:	strd	r8, [sp, #16]
   1aff0:	mov	r8, r0
   1aff4:	strd	sl, [sp, #24]
   1aff8:	mov	fp, r3
   1affc:	str	lr, [sp, #32]
   1b000:	sub	sp, sp, #36	; 0x24
   1b004:	ldr	r3, [sp, #72]	; 0x48
   1b008:	strb	ip, [r3]
   1b00c:	beq	1b180 <_start@@Base+0x6094>
   1b010:	ldrb	r3, [r1]
   1b014:	cmp	r3, #34	; 0x22
   1b018:	addeq	r4, r1, #1
   1b01c:	streq	ip, [r0, #12]
   1b020:	beq	1b190 <_start@@Base+0x60a4>
   1b024:	cmp	r3, #46	; 0x2e
   1b028:	movne	r3, #1
   1b02c:	strne	r3, [r0, #12]
   1b030:	beq	1b15c <_start@@Base+0x6070>
   1b034:	mov	r3, #0
   1b038:	add	sl, sp, #20
   1b03c:	add	r9, sp, #24
   1b040:	str	r3, [sp, #12]
   1b044:	mov	r5, fp
   1b048:	mov	r7, r4
   1b04c:	mov	r1, r4
   1b050:	b	1b06c <_start@@Base+0x5f80>
   1b054:	cmp	r7, r0
   1b058:	mov	r7, r0
   1b05c:	bne	1b0b4 <_start@@Base+0x5fc8>
   1b060:	ldr	r3, [r5, #4]!
   1b064:	cmp	r3, #0
   1b068:	beq	1b108 <_start@@Base+0x601c>
   1b06c:	add	r3, sp, #16
   1b070:	mov	r2, r6
   1b074:	stm	sp, {r9, sl}
   1b078:	mov	r0, r8
   1b07c:	ldr	r4, [r5]
   1b080:	blx	r4
   1b084:	cmp	r6, r0
   1b088:	mov	r1, r0
   1b08c:	bne	1b054 <_start@@Base+0x5f68>
   1b090:	mov	r4, r0
   1b094:	mov	r0, r4
   1b098:	add	sp, sp, #36	; 0x24
   1b09c:	ldrd	r4, [sp]
   1b0a0:	ldrd	r6, [sp, #8]
   1b0a4:	ldrd	r8, [sp, #16]
   1b0a8:	ldrd	sl, [sp, #24]
   1b0ac:	add	sp, sp, #32
   1b0b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0b4:	ldr	r1, [sp, #16]
   1b0b8:	mov	r4, r0
   1b0bc:	ldrd	r2, [sp, #24]
   1b0c0:	cmp	r1, #0
   1b0c4:	beq	1b120 <_start@@Base+0x6034>
   1b0c8:	cmp	r3, #0
   1b0cc:	cmpeq	r2, #128	; 0x80
   1b0d0:	bhi	1b1d4 <_start@@Base+0x60e8>
   1b0d4:	rsb	r2, r2, #0
   1b0d8:	uxtb	r2, r2
   1b0dc:	sxtb	r3, r2
   1b0e0:	str	r3, [sp, #12]
   1b0e4:	ldr	r3, [sp, #72]	; 0x48
   1b0e8:	ldrb	r1, [r3]
   1b0ec:	ldr	r3, [sp, #20]
   1b0f0:	add	r2, r2, r1
   1b0f4:	cmp	r3, #0
   1b0f8:	ldr	r3, [sp, #72]	; 0x48
   1b0fc:	strb	r2, [r3]
   1b100:	bne	1b044 <_start@@Base+0x5f58>
   1b104:	b	1b094 <_start@@Base+0x5fa8>
   1b108:	mov	r2, r6
   1b10c:	mov	r0, r8
   1b110:	mov	r3, #23
   1b114:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b118:	mov	r4, r0
   1b11c:	b	1b094 <_start@@Base+0x5fa8>
   1b120:	cmp	r3, #0
   1b124:	cmpeq	r2, #127	; 0x7f
   1b128:	sxtbls	r1, r2
   1b12c:	uxtbls	r2, r2
   1b130:	strls	r1, [sp, #12]
   1b134:	bls	1b0e4 <_start@@Base+0x5ff8>
   1b138:	mov	r3, #7
   1b13c:	mov	r2, r6
   1b140:	mov	r1, r4
   1b144:	mov	r0, r8
   1b148:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b14c:	cmp	r6, r0
   1b150:	beq	1b1ec <_start@@Base+0x6100>
   1b154:	ldrb	r2, [sp, #12]
   1b158:	b	1b0e4 <_start@@Base+0x5ff8>
   1b15c:	mov	r3, #5
   1b160:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b164:	ldr	r3, [r8, #12]
   1b168:	mov	r4, r0
   1b16c:	cmp	r3, #0
   1b170:	beq	1b190 <_start@@Base+0x60a4>
   1b174:	cmp	r6, r4
   1b178:	bne	1b034 <_start@@Base+0x5f48>
   1b17c:	b	1b094 <_start@@Base+0x5fa8>
   1b180:	ldr	r3, [r0, #12]
   1b184:	cmp	r3, #0
   1b188:	bne	1b094 <_start@@Base+0x5fa8>
   1b18c:	mov	r4, r6
   1b190:	sub	r3, r6, r4
   1b194:	cmp	r3, #1
   1b198:	ble	1b1bc <_start@@Base+0x60d0>
   1b19c:	ldrb	r3, [r4]
   1b1a0:	cmp	r3, #32
   1b1a4:	bhi	1b174 <_start@@Base+0x6088>
   1b1a8:	bne	1b1bc <_start@@Base+0x60d0>
   1b1ac:	ldrb	r3, [r4, #1]
   1b1b0:	cmp	r3, #32
   1b1b4:	addhi	r4, r4, #1
   1b1b8:	bhi	1b174 <_start@@Base+0x6088>
   1b1bc:	mov	r1, r4
   1b1c0:	mov	r2, r6
   1b1c4:	mov	r0, r8
   1b1c8:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1b1cc:	mov	r4, r0
   1b1d0:	b	1b174 <_start@@Base+0x6088>
   1b1d4:	mov	r3, #8
   1b1d8:	mov	r2, r6
   1b1dc:	mov	r1, r4
   1b1e0:	mov	r0, r8
   1b1e4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b1e8:	b	1b14c <_start@@Base+0x6060>
   1b1ec:	mov	r4, r6
   1b1f0:	b	1b094 <_start@@Base+0x5fa8>
   1b1f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b1f8:	mov	ip, #0
   1b1fc:	cmp	r1, r2
   1b200:	strd	r6, [sp, #8]
   1b204:	mov	r4, r1
   1b208:	mov	r6, r2
   1b20c:	strd	r8, [sp, #16]
   1b210:	mov	r8, r0
   1b214:	strd	sl, [sp, #24]
   1b218:	str	lr, [sp, #32]
   1b21c:	sub	sp, sp, #36	; 0x24
   1b220:	ldr	fp, [sp, #72]	; 0x48
   1b224:	str	r3, [sp, #8]
   1b228:	str	ip, [fp]
   1b22c:	beq	1b35c <_start@@Base+0x6270>
   1b230:	ldrb	r3, [r1]
   1b234:	cmp	r3, #34	; 0x22
   1b238:	addeq	r4, r1, #1
   1b23c:	streq	ip, [r0, #12]
   1b240:	beq	1b36c <_start@@Base+0x6280>
   1b244:	cmp	r3, #46	; 0x2e
   1b248:	movne	r3, #1
   1b24c:	strne	r3, [r0, #12]
   1b250:	beq	1b338 <_start@@Base+0x624c>
   1b254:	mov	r3, #0
   1b258:	add	sl, sp, #20
   1b25c:	add	r9, sp, #24
   1b260:	str	r3, [sp, #12]
   1b264:	mov	r7, r4
   1b268:	mov	r1, r4
   1b26c:	ldr	r5, [sp, #8]
   1b270:	b	1b28c <_start@@Base+0x61a0>
   1b274:	cmp	r7, r0
   1b278:	mov	r7, r0
   1b27c:	bne	1b2d4 <_start@@Base+0x61e8>
   1b280:	ldr	r3, [r5, #4]!
   1b284:	cmp	r3, #0
   1b288:	beq	1b320 <_start@@Base+0x6234>
   1b28c:	add	r3, sp, #16
   1b290:	mov	r2, r6
   1b294:	stm	sp, {r9, sl}
   1b298:	mov	r0, r8
   1b29c:	ldr	r4, [r5]
   1b2a0:	blx	r4
   1b2a4:	cmp	r6, r0
   1b2a8:	mov	r1, r0
   1b2ac:	bne	1b274 <_start@@Base+0x6188>
   1b2b0:	mov	r4, r0
   1b2b4:	mov	r0, r4
   1b2b8:	add	sp, sp, #36	; 0x24
   1b2bc:	ldrd	r4, [sp]
   1b2c0:	ldrd	r6, [sp, #8]
   1b2c4:	ldrd	r8, [sp, #16]
   1b2c8:	ldrd	sl, [sp, #24]
   1b2cc:	add	sp, sp, #32
   1b2d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2d4:	ldr	r3, [sp, #16]
   1b2d8:	mov	r4, r0
   1b2dc:	cmp	r3, #0
   1b2e0:	bne	1b3b0 <_start@@Base+0x62c4>
   1b2e4:	ldrd	r2, [sp, #24]
   1b2e8:	mov	r1, #0
   1b2ec:	mvn	r0, #0
   1b2f0:	cmp	r3, r1
   1b2f4:	cmpeq	r2, r0
   1b2f8:	strls	r2, [sp, #12]
   1b2fc:	bhi	1b3d4 <_start@@Base+0x62e8>
   1b300:	ldr	r3, [fp]
   1b304:	ldr	r1, [sp, #12]
   1b308:	ldr	r2, [sp, #20]
   1b30c:	add	r3, r3, r1
   1b310:	cmp	r2, #0
   1b314:	str	r3, [fp]
   1b318:	bne	1b264 <_start@@Base+0x6178>
   1b31c:	b	1b2b4 <_start@@Base+0x61c8>
   1b320:	mov	r2, r6
   1b324:	mov	r0, r8
   1b328:	mov	r3, #23
   1b32c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b330:	mov	r4, r0
   1b334:	b	1b2b4 <_start@@Base+0x61c8>
   1b338:	mov	r3, #5
   1b33c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b340:	ldr	r3, [r8, #12]
   1b344:	mov	r4, r0
   1b348:	cmp	r3, #0
   1b34c:	beq	1b36c <_start@@Base+0x6280>
   1b350:	cmp	r6, r4
   1b354:	bne	1b254 <_start@@Base+0x6168>
   1b358:	b	1b2b4 <_start@@Base+0x61c8>
   1b35c:	ldr	r3, [r0, #12]
   1b360:	cmp	r3, #0
   1b364:	bne	1b2b4 <_start@@Base+0x61c8>
   1b368:	mov	r4, r6
   1b36c:	sub	r3, r6, r4
   1b370:	cmp	r3, #1
   1b374:	ble	1b398 <_start@@Base+0x62ac>
   1b378:	ldrb	r3, [r4]
   1b37c:	cmp	r3, #32
   1b380:	bhi	1b350 <_start@@Base+0x6264>
   1b384:	bne	1b398 <_start@@Base+0x62ac>
   1b388:	ldrb	r3, [r4, #1]
   1b38c:	cmp	r3, #32
   1b390:	addhi	r4, r4, #1
   1b394:	bhi	1b350 <_start@@Base+0x6264>
   1b398:	mov	r1, r4
   1b39c:	mov	r2, r6
   1b3a0:	mov	r0, r8
   1b3a4:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1b3a8:	mov	r4, r0
   1b3ac:	b	1b350 <_start@@Base+0x6264>
   1b3b0:	mov	r3, #8
   1b3b4:	mov	r2, r6
   1b3b8:	mov	r1, r4
   1b3bc:	mov	r0, r8
   1b3c0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b3c4:	cmp	r6, r0
   1b3c8:	bne	1b300 <_start@@Base+0x6214>
   1b3cc:	mov	r4, r6
   1b3d0:	b	1b2b4 <_start@@Base+0x61c8>
   1b3d4:	mov	r3, #7
   1b3d8:	mov	r2, r6
   1b3dc:	mov	r1, r4
   1b3e0:	mov	r0, r8
   1b3e4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b3e8:	b	1b3c4 <_start@@Base+0x62d8>
   1b3ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b3f0:	mov	ip, #0
   1b3f4:	cmp	r1, r2
   1b3f8:	strd	r6, [sp, #8]
   1b3fc:	mov	r4, r1
   1b400:	mov	r6, r2
   1b404:	strd	r8, [sp, #16]
   1b408:	mov	r8, r0
   1b40c:	strd	sl, [sp, #24]
   1b410:	str	lr, [sp, #32]
   1b414:	sub	sp, sp, #36	; 0x24
   1b418:	ldr	fp, [sp, #72]	; 0x48
   1b41c:	str	r3, [sp, #12]
   1b420:	str	ip, [fp]
   1b424:	beq	1b58c <_start@@Base+0x64a0>
   1b428:	ldrb	r3, [r1]
   1b42c:	cmp	r3, #34	; 0x22
   1b430:	addeq	r4, r1, #1
   1b434:	streq	ip, [r0, #12]
   1b438:	beq	1b59c <_start@@Base+0x64b0>
   1b43c:	cmp	r3, #46	; 0x2e
   1b440:	movne	r3, #1
   1b444:	strne	r3, [r0, #12]
   1b448:	beq	1b568 <_start@@Base+0x647c>
   1b44c:	mov	r3, #0
   1b450:	add	sl, sp, #20
   1b454:	add	r9, sp, #24
   1b458:	str	r3, [sp, #8]
   1b45c:	mov	r7, r4
   1b460:	mov	r1, r4
   1b464:	ldr	r5, [sp, #12]
   1b468:	b	1b484 <_start@@Base+0x6398>
   1b46c:	cmp	r7, r0
   1b470:	mov	r7, r0
   1b474:	bne	1b4cc <_start@@Base+0x63e0>
   1b478:	ldr	r3, [r5, #4]!
   1b47c:	cmp	r3, #0
   1b480:	beq	1b514 <_start@@Base+0x6428>
   1b484:	add	r3, sp, #16
   1b488:	mov	r2, r6
   1b48c:	stm	sp, {r9, sl}
   1b490:	mov	r0, r8
   1b494:	ldr	r4, [r5]
   1b498:	blx	r4
   1b49c:	cmp	r6, r0
   1b4a0:	mov	r1, r0
   1b4a4:	bne	1b46c <_start@@Base+0x6380>
   1b4a8:	mov	r4, r0
   1b4ac:	mov	r0, r4
   1b4b0:	add	sp, sp, #36	; 0x24
   1b4b4:	ldrd	r4, [sp]
   1b4b8:	ldrd	r6, [sp, #8]
   1b4bc:	ldrd	r8, [sp, #16]
   1b4c0:	ldrd	sl, [sp, #24]
   1b4c4:	add	sp, sp, #32
   1b4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4cc:	ldr	r1, [sp, #16]
   1b4d0:	mov	r4, r0
   1b4d4:	ldrd	r2, [sp, #24]
   1b4d8:	cmp	r1, #0
   1b4dc:	beq	1b52c <_start@@Base+0x6440>
   1b4e0:	cmp	r3, #0
   1b4e4:	cmpeq	r2, #-2147483648	; 0x80000000
   1b4e8:	rsbls	r3, r2, #0
   1b4ec:	strls	r3, [sp, #8]
   1b4f0:	bhi	1b5e0 <_start@@Base+0x64f4>
   1b4f4:	ldr	r3, [fp]
   1b4f8:	ldr	r1, [sp, #8]
   1b4fc:	ldr	r2, [sp, #20]
   1b500:	add	r3, r3, r1
   1b504:	cmp	r2, #0
   1b508:	str	r3, [fp]
   1b50c:	bne	1b45c <_start@@Base+0x6370>
   1b510:	b	1b4ac <_start@@Base+0x63c0>
   1b514:	mov	r2, r6
   1b518:	mov	r0, r8
   1b51c:	mov	r3, #23
   1b520:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b524:	mov	r4, r0
   1b528:	b	1b4ac <_start@@Base+0x63c0>
   1b52c:	mov	r1, #0
   1b530:	mvn	r0, #-2147483648	; 0x80000000
   1b534:	cmp	r3, r1
   1b538:	cmpeq	r2, r0
   1b53c:	strls	r2, [sp, #8]
   1b540:	bls	1b4f4 <_start@@Base+0x6408>
   1b544:	mov	r3, #7
   1b548:	mov	r2, r6
   1b54c:	mov	r1, r4
   1b550:	mov	r0, r8
   1b554:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b558:	cmp	r6, r0
   1b55c:	bne	1b4f4 <_start@@Base+0x6408>
   1b560:	mov	r4, r6
   1b564:	b	1b4ac <_start@@Base+0x63c0>
   1b568:	mov	r3, #5
   1b56c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b570:	ldr	r3, [r8, #12]
   1b574:	mov	r4, r0
   1b578:	cmp	r3, #0
   1b57c:	beq	1b59c <_start@@Base+0x64b0>
   1b580:	cmp	r6, r4
   1b584:	bne	1b44c <_start@@Base+0x6360>
   1b588:	b	1b4ac <_start@@Base+0x63c0>
   1b58c:	ldr	r3, [r0, #12]
   1b590:	cmp	r3, #0
   1b594:	bne	1b4ac <_start@@Base+0x63c0>
   1b598:	mov	r4, r6
   1b59c:	sub	r3, r6, r4
   1b5a0:	cmp	r3, #1
   1b5a4:	ble	1b5c8 <_start@@Base+0x64dc>
   1b5a8:	ldrb	r3, [r4]
   1b5ac:	cmp	r3, #32
   1b5b0:	bhi	1b580 <_start@@Base+0x6494>
   1b5b4:	bne	1b5c8 <_start@@Base+0x64dc>
   1b5b8:	ldrb	r3, [r4, #1]
   1b5bc:	cmp	r3, #32
   1b5c0:	addhi	r4, r4, #1
   1b5c4:	bhi	1b580 <_start@@Base+0x6494>
   1b5c8:	mov	r1, r4
   1b5cc:	mov	r2, r6
   1b5d0:	mov	r0, r8
   1b5d4:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1b5d8:	mov	r4, r0
   1b5dc:	b	1b580 <_start@@Base+0x6494>
   1b5e0:	mov	r3, #8
   1b5e4:	mov	r2, r6
   1b5e8:	mov	r1, r4
   1b5ec:	mov	r0, r8
   1b5f0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b5f4:	b	1b558 <_start@@Base+0x646c>
   1b5f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b5fc:	mov	ip, #0
   1b600:	cmp	r1, r2
   1b604:	strd	r6, [sp, #8]
   1b608:	mov	r4, r1
   1b60c:	mov	r6, r2
   1b610:	strd	r8, [sp, #16]
   1b614:	mov	r8, r0
   1b618:	strd	sl, [sp, #24]
   1b61c:	mov	fp, r3
   1b620:	str	lr, [sp, #32]
   1b624:	sub	sp, sp, #36	; 0x24
   1b628:	ldr	r3, [sp, #72]	; 0x48
   1b62c:	strh	ip, [r3]
   1b630:	beq	1b7ac <_start@@Base+0x66c0>
   1b634:	ldrb	r3, [r1]
   1b638:	cmp	r3, #34	; 0x22
   1b63c:	addeq	r4, r1, #1
   1b640:	streq	ip, [r0, #12]
   1b644:	beq	1b7bc <_start@@Base+0x66d0>
   1b648:	cmp	r3, #46	; 0x2e
   1b64c:	movne	r3, #1
   1b650:	strne	r3, [r0, #12]
   1b654:	beq	1b788 <_start@@Base+0x669c>
   1b658:	mov	r3, #0
   1b65c:	add	sl, sp, #20
   1b660:	add	r9, sp, #24
   1b664:	str	r3, [sp, #12]
   1b668:	mov	r5, fp
   1b66c:	mov	r7, r4
   1b670:	mov	r1, r4
   1b674:	b	1b690 <_start@@Base+0x65a4>
   1b678:	cmp	r7, r0
   1b67c:	mov	r7, r0
   1b680:	bne	1b6d8 <_start@@Base+0x65ec>
   1b684:	ldr	r3, [r5, #4]!
   1b688:	cmp	r3, #0
   1b68c:	beq	1b72c <_start@@Base+0x6640>
   1b690:	add	r3, sp, #16
   1b694:	mov	r2, r6
   1b698:	stm	sp, {r9, sl}
   1b69c:	mov	r0, r8
   1b6a0:	ldr	r4, [r5]
   1b6a4:	blx	r4
   1b6a8:	cmp	r6, r0
   1b6ac:	mov	r1, r0
   1b6b0:	bne	1b678 <_start@@Base+0x658c>
   1b6b4:	mov	r4, r0
   1b6b8:	mov	r0, r4
   1b6bc:	add	sp, sp, #36	; 0x24
   1b6c0:	ldrd	r4, [sp]
   1b6c4:	ldrd	r6, [sp, #8]
   1b6c8:	ldrd	r8, [sp, #16]
   1b6cc:	ldrd	sl, [sp, #24]
   1b6d0:	add	sp, sp, #32
   1b6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6d8:	ldr	r1, [sp, #16]
   1b6dc:	mov	r4, r0
   1b6e0:	ldrd	r2, [sp, #24]
   1b6e4:	cmp	r1, #0
   1b6e8:	beq	1b744 <_start@@Base+0x6658>
   1b6ec:	cmp	r3, #0
   1b6f0:	cmpeq	r2, #32768	; 0x8000
   1b6f4:	bhi	1b800 <_start@@Base+0x6714>
   1b6f8:	rsb	r2, r2, #0
   1b6fc:	uxth	r2, r2
   1b700:	sxth	r3, r2
   1b704:	str	r3, [sp, #12]
   1b708:	ldr	r3, [sp, #72]	; 0x48
   1b70c:	ldrh	r1, [r3]
   1b710:	ldr	r3, [sp, #20]
   1b714:	add	r2, r2, r1
   1b718:	cmp	r3, #0
   1b71c:	ldr	r3, [sp, #72]	; 0x48
   1b720:	strh	r2, [r3]
   1b724:	bne	1b668 <_start@@Base+0x657c>
   1b728:	b	1b6b8 <_start@@Base+0x65cc>
   1b72c:	mov	r2, r6
   1b730:	mov	r0, r8
   1b734:	mov	r3, #23
   1b738:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b73c:	mov	r4, r0
   1b740:	b	1b6b8 <_start@@Base+0x65cc>
   1b744:	mov	r1, #0
   1b748:	movw	r0, #32767	; 0x7fff
   1b74c:	cmp	r3, r1
   1b750:	cmpeq	r2, r0
   1b754:	sxthls	r1, r2
   1b758:	uxthls	r2, r2
   1b75c:	strls	r1, [sp, #12]
   1b760:	bls	1b708 <_start@@Base+0x661c>
   1b764:	mov	r3, #7
   1b768:	mov	r2, r6
   1b76c:	mov	r1, r4
   1b770:	mov	r0, r8
   1b774:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b778:	cmp	r6, r0
   1b77c:	beq	1b818 <_start@@Base+0x672c>
   1b780:	ldrh	r2, [sp, #12]
   1b784:	b	1b708 <_start@@Base+0x661c>
   1b788:	mov	r3, #5
   1b78c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b790:	ldr	r3, [r8, #12]
   1b794:	mov	r4, r0
   1b798:	cmp	r3, #0
   1b79c:	beq	1b7bc <_start@@Base+0x66d0>
   1b7a0:	cmp	r6, r4
   1b7a4:	bne	1b658 <_start@@Base+0x656c>
   1b7a8:	b	1b6b8 <_start@@Base+0x65cc>
   1b7ac:	ldr	r3, [r0, #12]
   1b7b0:	cmp	r3, #0
   1b7b4:	bne	1b6b8 <_start@@Base+0x65cc>
   1b7b8:	mov	r4, r6
   1b7bc:	sub	r3, r6, r4
   1b7c0:	cmp	r3, #1
   1b7c4:	ble	1b7e8 <_start@@Base+0x66fc>
   1b7c8:	ldrb	r3, [r4]
   1b7cc:	cmp	r3, #32
   1b7d0:	bhi	1b7a0 <_start@@Base+0x66b4>
   1b7d4:	bne	1b7e8 <_start@@Base+0x66fc>
   1b7d8:	ldrb	r3, [r4, #1]
   1b7dc:	cmp	r3, #32
   1b7e0:	addhi	r4, r4, #1
   1b7e4:	bhi	1b7a0 <_start@@Base+0x66b4>
   1b7e8:	mov	r1, r4
   1b7ec:	mov	r2, r6
   1b7f0:	mov	r0, r8
   1b7f4:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1b7f8:	mov	r4, r0
   1b7fc:	b	1b7a0 <_start@@Base+0x66b4>
   1b800:	mov	r3, #8
   1b804:	mov	r2, r6
   1b808:	mov	r1, r4
   1b80c:	mov	r0, r8
   1b810:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b814:	b	1b778 <_start@@Base+0x668c>
   1b818:	mov	r4, r6
   1b81c:	b	1b6b8 <_start@@Base+0x65cc>
   1b820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b824:	mov	ip, #0
   1b828:	cmp	r1, r2
   1b82c:	strd	r6, [sp, #8]
   1b830:	mov	r4, r1
   1b834:	mov	r6, r2
   1b838:	strd	r8, [sp, #16]
   1b83c:	mov	r8, r0
   1b840:	strd	sl, [sp, #24]
   1b844:	mov	fp, r3
   1b848:	str	lr, [sp, #32]
   1b84c:	sub	sp, sp, #36	; 0x24
   1b850:	ldr	r3, [sp, #72]	; 0x48
   1b854:	strb	ip, [r3]
   1b858:	beq	1b98c <_start@@Base+0x68a0>
   1b85c:	ldrb	r3, [r1]
   1b860:	cmp	r3, #34	; 0x22
   1b864:	addeq	r4, r1, #1
   1b868:	streq	ip, [r0, #12]
   1b86c:	beq	1b99c <_start@@Base+0x68b0>
   1b870:	cmp	r3, #46	; 0x2e
   1b874:	movne	r3, #1
   1b878:	strne	r3, [r0, #12]
   1b87c:	beq	1b968 <_start@@Base+0x687c>
   1b880:	mov	r3, #0
   1b884:	add	sl, sp, #20
   1b888:	add	r9, sp, #24
   1b88c:	str	r3, [sp, #12]
   1b890:	mov	r5, fp
   1b894:	mov	r7, r4
   1b898:	mov	r1, r4
   1b89c:	b	1b8b8 <_start@@Base+0x67cc>
   1b8a0:	cmp	r7, r0
   1b8a4:	mov	r7, r0
   1b8a8:	bne	1b900 <_start@@Base+0x6814>
   1b8ac:	ldr	r3, [r5, #4]!
   1b8b0:	cmp	r3, #0
   1b8b4:	beq	1b950 <_start@@Base+0x6864>
   1b8b8:	add	r3, sp, #16
   1b8bc:	mov	r2, r6
   1b8c0:	stm	sp, {r9, sl}
   1b8c4:	mov	r0, r8
   1b8c8:	ldr	r4, [r5]
   1b8cc:	blx	r4
   1b8d0:	cmp	r6, r0
   1b8d4:	mov	r1, r0
   1b8d8:	bne	1b8a0 <_start@@Base+0x67b4>
   1b8dc:	mov	r4, r0
   1b8e0:	mov	r0, r4
   1b8e4:	add	sp, sp, #36	; 0x24
   1b8e8:	ldrd	r4, [sp]
   1b8ec:	ldrd	r6, [sp, #8]
   1b8f0:	ldrd	r8, [sp, #16]
   1b8f4:	ldrd	sl, [sp, #24]
   1b8f8:	add	sp, sp, #32
   1b8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b900:	ldr	r3, [sp, #16]
   1b904:	mov	r4, r0
   1b908:	cmp	r3, #0
   1b90c:	bne	1b9e0 <_start@@Base+0x68f4>
   1b910:	ldrd	r2, [sp, #24]
   1b914:	cmp	r3, #0
   1b918:	cmpeq	r2, #255	; 0xff
   1b91c:	uxtbls	r3, r2
   1b920:	strls	r3, [sp, #12]
   1b924:	bhi	1ba04 <_start@@Base+0x6918>
   1b928:	ldr	r1, [sp, #12]
   1b92c:	ldr	r3, [sp, #72]	; 0x48
   1b930:	ldr	r2, [sp, #20]
   1b934:	ldrb	r3, [r3]
   1b938:	cmp	r2, #0
   1b93c:	ldr	r2, [sp, #72]	; 0x48
   1b940:	add	r3, r1, r3
   1b944:	strb	r3, [r2]
   1b948:	bne	1b890 <_start@@Base+0x67a4>
   1b94c:	b	1b8e0 <_start@@Base+0x67f4>
   1b950:	mov	r2, r6
   1b954:	mov	r0, r8
   1b958:	mov	r3, #23
   1b95c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b960:	mov	r4, r0
   1b964:	b	1b8e0 <_start@@Base+0x67f4>
   1b968:	mov	r3, #5
   1b96c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b970:	ldr	r3, [r8, #12]
   1b974:	mov	r4, r0
   1b978:	cmp	r3, #0
   1b97c:	beq	1b99c <_start@@Base+0x68b0>
   1b980:	cmp	r6, r4
   1b984:	bne	1b880 <_start@@Base+0x6794>
   1b988:	b	1b8e0 <_start@@Base+0x67f4>
   1b98c:	ldr	r3, [r0, #12]
   1b990:	cmp	r3, #0
   1b994:	bne	1b8e0 <_start@@Base+0x67f4>
   1b998:	mov	r4, r6
   1b99c:	sub	r3, r6, r4
   1b9a0:	cmp	r3, #1
   1b9a4:	ble	1b9c8 <_start@@Base+0x68dc>
   1b9a8:	ldrb	r3, [r4]
   1b9ac:	cmp	r3, #32
   1b9b0:	bhi	1b980 <_start@@Base+0x6894>
   1b9b4:	bne	1b9c8 <_start@@Base+0x68dc>
   1b9b8:	ldrb	r3, [r4, #1]
   1b9bc:	cmp	r3, #32
   1b9c0:	addhi	r4, r4, #1
   1b9c4:	bhi	1b980 <_start@@Base+0x6894>
   1b9c8:	mov	r1, r4
   1b9cc:	mov	r2, r6
   1b9d0:	mov	r0, r8
   1b9d4:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1b9d8:	mov	r4, r0
   1b9dc:	b	1b980 <_start@@Base+0x6894>
   1b9e0:	mov	r3, #8
   1b9e4:	mov	r2, r6
   1b9e8:	mov	r1, r4
   1b9ec:	mov	r0, r8
   1b9f0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1b9f4:	cmp	r6, r0
   1b9f8:	bne	1b928 <_start@@Base+0x683c>
   1b9fc:	mov	r4, r6
   1ba00:	b	1b8e0 <_start@@Base+0x67f4>
   1ba04:	mov	r3, #7
   1ba08:	mov	r2, r6
   1ba0c:	mov	r1, r4
   1ba10:	mov	r0, r8
   1ba14:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ba18:	b	1b9f4 <_start@@Base+0x6908>
   1ba1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba20:	mov	r5, r0
   1ba24:	mov	r4, r2
   1ba28:	ldr	r0, [r0]
   1ba2c:	mov	r2, #4
   1ba30:	strd	r6, [sp, #8]
   1ba34:	mov	r7, r3
   1ba38:	mov	r3, #0
   1ba3c:	mov	r6, r1
   1ba40:	mov	r1, r2
   1ba44:	strd	r8, [sp, #16]
   1ba48:	strd	sl, [sp, #24]
   1ba4c:	str	lr, [sp, #32]
   1ba50:	sub	sp, sp, #52	; 0x34
   1ba54:	str	r3, [r7]
   1ba58:	bl	26838 <flatcc_builder_start_struct@@Base>
   1ba5c:	subs	r3, r0, #0
   1ba60:	str	r3, [sp, #24]
   1ba64:	beq	1bab4 <_start@@Base+0x69c8>
   1ba68:	cmp	r6, r4
   1ba6c:	beq	1ba7c <_start@@Base+0x6990>
   1ba70:	ldrb	r3, [r6]
   1ba74:	cmp	r3, #123	; 0x7b
   1ba78:	beq	1baec <_start@@Base+0x6a00>
   1ba7c:	mov	r1, r6
   1ba80:	mov	r3, #21
   1ba84:	mov	r2, r4
   1ba88:	mov	r0, r5
   1ba8c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ba90:	mov	r8, r0
   1ba94:	cmp	r4, r8
   1ba98:	beq	1c0f0 <_start@@Base+0x7004>
   1ba9c:	ldr	r0, [r5]
   1baa0:	bl	26a0c <flatcc_builder_end_struct@@Base>
   1baa4:	cmp	r0, #0
   1baa8:	str	r0, [r7]
   1baac:	moveq	r6, r8
   1bab0:	bne	1bacc <_start@@Base+0x69e0>
   1bab4:	mov	r2, r4
   1bab8:	mov	r1, r6
   1babc:	mov	r0, r5
   1bac0:	mov	r3, #33	; 0x21
   1bac4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1bac8:	mov	r8, r0
   1bacc:	mov	r0, r8
   1bad0:	add	sp, sp, #52	; 0x34
   1bad4:	ldrd	r4, [sp]
   1bad8:	ldrd	r6, [sp, #8]
   1badc:	ldrd	r8, [sp, #16]
   1bae0:	ldrd	sl, [sp, #24]
   1bae4:	add	sp, sp, #32
   1bae8:	pop	{pc}		; (ldr pc, [sp], #4)
   1baec:	add	r1, r6, #1
   1baf0:	sub	r3, r4, r1
   1baf4:	cmp	r3, #1
   1baf8:	ble	1bb0c <_start@@Base+0x6a20>
   1bafc:	ldrb	r3, [r6, #1]
   1bb00:	cmp	r3, #32
   1bb04:	bhi	1bb1c <_start@@Base+0x6a30>
   1bb08:	beq	1c0a8 <_start@@Base+0x6fbc>
   1bb0c:	mov	r2, r4
   1bb10:	mov	r0, r5
   1bb14:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1bb18:	mov	r1, r0
   1bb1c:	cmp	r4, r1
   1bb20:	beq	1bb30 <_start@@Base+0x6a44>
   1bb24:	ldrb	r3, [r1]
   1bb28:	cmp	r3, #125	; 0x7d
   1bb2c:	beq	1c0d8 <_start@@Base+0x6fec>
   1bb30:	mov	r3, #0
   1bb34:	movt	r3, #65535	; 0xffff
   1bb38:	str	r3, [sp, #28]
   1bb3c:	cmp	r4, r1
   1bb40:	beq	1bb6c <_start@@Base+0x6a80>
   1bb44:	ldrb	r3, [r1]
   1bb48:	cmp	r3, #34	; 0x22
   1bb4c:	moveq	r3, #0
   1bb50:	addeq	r1, r1, #1
   1bb54:	streq	r3, [r5, #12]
   1bb58:	beq	1bb6c <_start@@Base+0x6a80>
   1bb5c:	cmp	r3, #46	; 0x2e
   1bb60:	movne	r3, #1
   1bb64:	strne	r3, [r5, #12]
   1bb68:	beq	1bf90 <_start@@Base+0x6ea4>
   1bb6c:	sub	r3, r4, r1
   1bb70:	cmp	r3, #8
   1bb74:	bhi	1bba8 <_start@@Base+0x6abc>
   1bb78:	sub	r3, r3, #1
   1bb7c:	cmp	r3, #7
   1bb80:	ldrls	pc, [pc, r3, lsl #2]
   1bb84:	b	1bf6c <_start@@Base+0x6e80>
   1bb88:	andeq	fp, r1, ip, ror #28
   1bb8c:	andeq	fp, r1, r0, ror #28
   1bb90:	andeq	fp, r1, r4, asr lr
   1bb94:	andeq	fp, r1, r8, asr #28
   1bb98:	andeq	fp, r1, ip, lsr lr
   1bb9c:	andeq	fp, r1, r0, lsr lr
   1bba0:	andeq	fp, r1, r4, lsr #28
   1bba4:	andeq	fp, r1, r8, lsr #23
   1bba8:	ldrb	sl, [r1, #7]
   1bbac:	mov	fp, #0
   1bbb0:	mov	r3, fp
   1bbb4:	ldrb	r8, [r1, #6]
   1bbb8:	orr	r2, sl, r8, lsl #8
   1bbbc:	ldrb	r8, [r1, #5]
   1bbc0:	orr	r2, r2, r8, lsl #16
   1bbc4:	ldrb	r8, [r1, #4]
   1bbc8:	orr	r2, r2, r8, lsl #24
   1bbcc:	ldrb	sl, [r1, #3]
   1bbd0:	orr	r3, r3, sl
   1bbd4:	ldrb	sl, [r1, #2]
   1bbd8:	orr	sl, r3, sl, lsl #8
   1bbdc:	ldrb	r8, [r1, #1]
   1bbe0:	orr	sl, sl, r8, lsl #16
   1bbe4:	str	r2, [sp, #8]
   1bbe8:	ldrb	r2, [r1]
   1bbec:	add	r9, pc, #956	; 0x3bc
   1bbf0:	ldrd	r8, [r9]
   1bbf4:	orr	r3, sl, r2, lsl #24
   1bbf8:	str	r3, [sp, #12]
   1bbfc:	ldrd	r2, [sp, #8]
   1bc00:	cmp	r3, r9
   1bc04:	cmpeq	r2, r8
   1bc08:	bne	1bf6c <_start@@Base+0x6e80>
   1bc0c:	add	r6, r1, #8
   1bc10:	sub	r3, r4, r6
   1bc14:	cmp	r3, #8
   1bc18:	bhi	1bc48 <_start@@Base+0x6b5c>
   1bc1c:	sub	r2, r3, #2
   1bc20:	cmp	r2, #6
   1bc24:	ldrls	pc, [pc, r2, lsl #2]
   1bc28:	b	1bf40 <_start@@Base+0x6e54>
   1bc2c:	andeq	fp, r1, r0, lsl #29
   1bc30:	andeq	fp, r1, r8, ror lr
   1bc34:	andeq	fp, r1, r8, lsl #29
   1bc38:	andeq	fp, r1, ip, lsl lr
   1bc3c:	andeq	fp, r1, ip, lsl lr
   1bc40:	andeq	fp, r1, r8, asr #24
   1bc44:	andeq	fp, r1, r8, asr #24
   1bc48:	mov	r9, #0
   1bc4c:	mov	sl, r9
   1bc50:	mov	r8, sl
   1bc54:	ldrb	sl, [r1, #11]
   1bc58:	orr	sl, r8, sl
   1bc5c:	ldrb	r8, [r1, #10]
   1bc60:	orr	sl, sl, r8, lsl #8
   1bc64:	ldrb	r8, [r1, #9]
   1bc68:	mov	r2, #0
   1bc6c:	mov	fp, #0
   1bc70:	movt	fp, #24932	; 0x6164
   1bc74:	str	r2, [sp, #16]
   1bc78:	ldr	r2, [sp, #28]
   1bc7c:	orr	sl, sl, r8, lsl #16
   1bc80:	ldrb	r8, [r1, #8]
   1bc84:	orr	r8, sl, r8, lsl #24
   1bc88:	mov	sl, #0
   1bc8c:	and	r2, r8, r2
   1bc90:	str	r2, [sp, #20]
   1bc94:	ldrd	r8, [sp, #16]
   1bc98:	cmp	r9, fp
   1bc9c:	cmpeq	r8, sl
   1bca0:	bne	1bf40 <_start@@Base+0x6e54>
   1bca4:	cmp	r3, #2
   1bca8:	ble	1bf40 <_start@@Base+0x6e54>
   1bcac:	ldr	r2, [r5, #12]
   1bcb0:	ldrb	r3, [r1, #10]
   1bcb4:	cmp	r2, #0
   1bcb8:	beq	1bf80 <_start@@Base+0x6e94>
   1bcbc:	cmp	r3, #58	; 0x3a
   1bcc0:	cmpne	r3, #32
   1bcc4:	movhi	r3, #1
   1bcc8:	movls	r3, #0
   1bccc:	bhi	1bf40 <_start@@Base+0x6e54>
   1bcd0:	add	r1, r1, #10
   1bcd4:	str	r3, [r5, #12]
   1bcd8:	sub	r3, r4, r1
   1bcdc:	cmp	r3, #1
   1bce0:	ble	1bcf4 <_start@@Base+0x6c08>
   1bce4:	ldrb	r3, [r1]
   1bce8:	cmp	r3, #32
   1bcec:	bhi	1bd04 <_start@@Base+0x6c18>
   1bcf0:	beq	1c07c <_start@@Base+0x6f90>
   1bcf4:	mov	r2, r4
   1bcf8:	mov	r0, r5
   1bcfc:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1bd00:	mov	r1, r0
   1bd04:	cmp	r4, r1
   1bd08:	beq	1bd18 <_start@@Base+0x6c2c>
   1bd0c:	ldrb	r3, [r1]
   1bd10:	cmp	r3, #58	; 0x3a
   1bd14:	beq	1c090 <_start@@Base+0x6fa4>
   1bd18:	mov	r3, #4
   1bd1c:	mov	r2, r4
   1bd20:	mov	r0, r5
   1bd24:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1bd28:	mov	r8, r0
   1bd2c:	cmp	r6, r8
   1bd30:	beq	1bf40 <_start@@Base+0x6e54>
   1bd34:	mov	r3, #0
   1bd38:	mov	r0, #0
   1bd3c:	mov	r1, #0
   1bd40:	cmp	r4, r8
   1bd44:	str	r3, [sp, #32]
   1bd48:	str	r3, [sp, #36]	; 0x24
   1bd4c:	strd	r0, [sp, #40]	; 0x28
   1bd50:	beq	1bfa8 <_start@@Base+0x6ebc>
   1bd54:	add	r0, sp, #40	; 0x28
   1bd58:	add	r3, sp, #36	; 0x24
   1bd5c:	mov	r2, r4
   1bd60:	mov	r1, r8
   1bd64:	str	r0, [sp]
   1bd68:	mov	r0, r5
   1bd6c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1bd70:	cmp	r8, r0
   1bd74:	mov	r6, r0
   1bd78:	bne	1bfbc <_start@@Base+0x6ed0>
   1bd7c:	add	ip, sp, #32
   1bd80:	ldr	r3, [pc, #560]	; 1bfb8 <_start@@Base+0x6ecc>
   1bd84:	mov	r2, r4
   1bd88:	mov	r1, r6
   1bd8c:	mov	r0, r5
   1bd90:	str	ip, [sp]
   1bd94:	bl	1b3ec <_start@@Base+0x6300>
   1bd98:	cmp	r4, r0
   1bd9c:	cmpne	r0, r6
   1bda0:	beq	1c0bc <_start@@Base+0x6fd0>
   1bda4:	ldr	r2, [sp, #32]
   1bda8:	mov	r6, r0
   1bdac:	ldr	r3, [sp, #24]
   1bdb0:	str	r2, [r3]
   1bdb4:	sub	r3, r4, r6
   1bdb8:	cmp	r3, #1
   1bdbc:	ble	1bdd0 <_start@@Base+0x6ce4>
   1bdc0:	ldrb	r3, [r6]
   1bdc4:	cmp	r3, #32
   1bdc8:	bhi	1bde4 <_start@@Base+0x6cf8>
   1bdcc:	beq	1bf58 <_start@@Base+0x6e6c>
   1bdd0:	mov	r1, r6
   1bdd4:	mov	r2, r4
   1bdd8:	mov	r0, r5
   1bddc:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1bde0:	mov	r6, r0
   1bde4:	cmp	r4, r6
   1bde8:	beq	1bab4 <_start@@Base+0x69c8>
   1bdec:	ldrb	r3, [r6]
   1bdf0:	cmp	r3, #44	; 0x2c
   1bdf4:	beq	1bec8 <_start@@Base+0x6ddc>
   1bdf8:	cmp	r3, #125	; 0x7d
   1bdfc:	beq	1be90 <_start@@Base+0x6da4>
   1be00:	mov	r1, r6
   1be04:	mov	r3, #10
   1be08:	mov	r2, r4
   1be0c:	mov	r0, r5
   1be10:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1be14:	mov	r8, r0
   1be18:	b	1ba94 <_start@@Base+0x69a8>
   1be1c:	mov	sl, #0
   1be20:	b	1bc50 <_start@@Base+0x6b64>
   1be24:	mov	sl, #0
   1be28:	mov	fp, #0
   1be2c:	b	1bbb0 <_start@@Base+0x6ac4>
   1be30:	mov	r2, #0
   1be34:	mov	r3, r2
   1be38:	b	1bbbc <_start@@Base+0x6ad0>
   1be3c:	mov	r2, #0
   1be40:	mov	r3, r2
   1be44:	b	1bbc4 <_start@@Base+0x6ad8>
   1be48:	mov	r2, #0
   1be4c:	mov	r3, r2
   1be50:	b	1bbcc <_start@@Base+0x6ae0>
   1be54:	mov	r2, #0
   1be58:	mov	r3, r2
   1be5c:	b	1bbd4 <_start@@Base+0x6ae8>
   1be60:	mov	r2, #0
   1be64:	mov	sl, r2
   1be68:	b	1bbdc <_start@@Base+0x6af0>
   1be6c:	mov	r2, #0
   1be70:	mov	sl, r2
   1be74:	b	1bbe4 <_start@@Base+0x6af8>
   1be78:	mov	sl, #0
   1be7c:	b	1bc5c <_start@@Base+0x6b70>
   1be80:	mov	sl, #0
   1be84:	b	1bc64 <_start@@Base+0x6b78>
   1be88:	mov	r8, #0
   1be8c:	b	1bc54 <_start@@Base+0x6b68>
   1be90:	add	r8, r6, #1
   1be94:	sub	r3, r4, r8
   1be98:	cmp	r3, #1
   1be9c:	ble	1beb0 <_start@@Base+0x6dc4>
   1bea0:	ldrb	r3, [r6, #1]
   1bea4:	cmp	r3, #32
   1bea8:	bhi	1ba94 <_start@@Base+0x69a8>
   1beac:	beq	1c004 <_start@@Base+0x6f18>
   1beb0:	mov	r1, r8
   1beb4:	mov	r2, r4
   1beb8:	mov	r0, r5
   1bebc:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1bec0:	mov	r8, r0
   1bec4:	b	1ba94 <_start@@Base+0x69a8>
   1bec8:	add	r1, r6, #1
   1becc:	sub	r3, r4, r1
   1bed0:	cmp	r3, #1
   1bed4:	ble	1bee8 <_start@@Base+0x6dfc>
   1bed8:	ldrb	r3, [r6, #1]
   1bedc:	cmp	r3, #32
   1bee0:	bhi	1bef8 <_start@@Base+0x6e0c>
   1bee4:	beq	1c018 <_start@@Base+0x6f2c>
   1bee8:	mov	r2, r4
   1beec:	mov	r0, r5
   1bef0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1bef4:	mov	r1, r0
   1bef8:	cmp	r4, r1
   1befc:	beq	1c030 <_start@@Base+0x6f44>
   1bf00:	ldrb	r3, [r1]
   1bf04:	cmp	r3, #125	; 0x7d
   1bf08:	bne	1bb3c <_start@@Base+0x6a50>
   1bf0c:	add	r8, r1, #1
   1bf10:	sub	r3, r4, r8
   1bf14:	cmp	r3, #1
   1bf18:	ble	1beb0 <_start@@Base+0x6dc4>
   1bf1c:	ldrb	r3, [r1, #1]
   1bf20:	cmp	r3, #32
   1bf24:	bhi	1ba94 <_start@@Base+0x69a8>
   1bf28:	bne	1beb0 <_start@@Base+0x6dc4>
   1bf2c:	ldrb	r3, [r1, #2]
   1bf30:	cmp	r3, #32
   1bf34:	addhi	r8, r1, #2
   1bf38:	bls	1beb0 <_start@@Base+0x6dc4>
   1bf3c:	b	1ba94 <_start@@Base+0x69a8>
   1bf40:	mov	r1, r6
   1bf44:	mov	r2, r4
   1bf48:	mov	r0, r5
   1bf4c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1bf50:	mov	r6, r0
   1bf54:	b	1bdb4 <_start@@Base+0x6cc8>
   1bf58:	ldrb	r3, [r6, #1]
   1bf5c:	cmp	r3, #32
   1bf60:	addhi	r6, r6, #1
   1bf64:	bls	1bdd0 <_start@@Base+0x6ce4>
   1bf68:	b	1bde4 <_start@@Base+0x6cf8>
   1bf6c:	mov	r2, r4
   1bf70:	mov	r0, r5
   1bf74:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1bf78:	mov	r6, r0
   1bf7c:	b	1bdb4 <_start@@Base+0x6cc8>
   1bf80:	cmp	r3, #34	; 0x22
   1bf84:	bne	1bf40 <_start@@Base+0x6e54>
   1bf88:	add	r1, r1, #11
   1bf8c:	b	1bcd8 <_start@@Base+0x6bec>
   1bf90:	mov	r3, #5
   1bf94:	mov	r2, r4
   1bf98:	mov	r0, r5
   1bf9c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1bfa0:	mov	r1, r0
   1bfa4:	b	1bb6c <_start@@Base+0x6a80>
   1bfa8:	mov	r6, r4
   1bfac:	b	1bd7c <_start@@Base+0x6c90>
   1bfb0:	cmpvc	pc, #1342177286	; 0x50000006
   1bfb4:	rsbvs	r6, pc, #428	; 0x1ac
   1bfb8:	andeq	r9, r5, r0, asr #1
   1bfbc:	ldr	r1, [sp, #36]	; 0x24
   1bfc0:	ldrd	r2, [sp, #40]	; 0x28
   1bfc4:	cmp	r1, #0
   1bfc8:	beq	1c04c <_start@@Base+0x6f60>
   1bfcc:	cmp	r3, #0
   1bfd0:	cmpeq	r2, #-2147483648	; 0x80000000
   1bfd4:	rsbls	r2, r2, #0
   1bfd8:	bls	1bdac <_start@@Base+0x6cc0>
   1bfdc:	mov	r1, r0
   1bfe0:	mov	r3, #8
   1bfe4:	mov	r2, r4
   1bfe8:	mov	r0, r5
   1bfec:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1bff0:	mov	r6, r0
   1bff4:	cmp	r8, r6
   1bff8:	ldrne	r2, [sp, #32]
   1bffc:	bne	1bdac <_start@@Base+0x6cc0>
   1c000:	b	1bd7c <_start@@Base+0x6c90>
   1c004:	ldrb	r3, [r6, #2]
   1c008:	cmp	r3, #32
   1c00c:	addhi	r8, r6, #2
   1c010:	bls	1beb0 <_start@@Base+0x6dc4>
   1c014:	b	1ba94 <_start@@Base+0x69a8>
   1c018:	ldrb	r3, [r6, #2]
   1c01c:	cmp	r3, #32
   1c020:	addhi	r1, r6, #2
   1c024:	bls	1bee8 <_start@@Base+0x6dfc>
   1c028:	cmp	r4, r1
   1c02c:	bne	1bf00 <_start@@Base+0x6e14>
   1c030:	mov	r3, #10
   1c034:	mov	r2, r4
   1c038:	mov	r1, r4
   1c03c:	mov	r0, r5
   1c040:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c044:	mov	r8, r0
   1c048:	b	1ba94 <_start@@Base+0x69a8>
   1c04c:	mov	r1, #0
   1c050:	mvn	r0, #-2147483648	; 0x80000000
   1c054:	cmp	r3, r1
   1c058:	cmpeq	r2, r0
   1c05c:	bls	1bdac <_start@@Base+0x6cc0>
   1c060:	mov	r1, r6
   1c064:	mov	r3, #7
   1c068:	mov	r2, r4
   1c06c:	mov	r0, r5
   1c070:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c074:	mov	r6, r0
   1c078:	b	1bff4 <_start@@Base+0x6f08>
   1c07c:	ldrb	r3, [r1, #1]
   1c080:	cmp	r3, #32
   1c084:	addhi	r1, r1, #1
   1c088:	bls	1bcf4 <_start@@Base+0x6c08>
   1c08c:	b	1bd04 <_start@@Base+0x6c18>
   1c090:	add	r1, r1, #1
   1c094:	mov	r2, r4
   1c098:	mov	r0, r5
   1c09c:	bl	17000 <_start@@Base+0x1f14>
   1c0a0:	mov	r8, r0
   1c0a4:	b	1bd2c <_start@@Base+0x6c40>
   1c0a8:	ldrb	r3, [r6, #2]
   1c0ac:	cmp	r3, #32
   1c0b0:	addhi	r1, r6, #2
   1c0b4:	bls	1bb0c <_start@@Base+0x6a20>
   1c0b8:	b	1bb1c <_start@@Base+0x6a30>
   1c0bc:	mov	r1, r0
   1c0c0:	mov	r3, #33	; 0x21
   1c0c4:	mov	r2, r4
   1c0c8:	mov	r0, r5
   1c0cc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c0d0:	mov	r8, r0
   1c0d4:	b	1ba94 <_start@@Base+0x69a8>
   1c0d8:	add	r1, r1, #1
   1c0dc:	mov	r2, r4
   1c0e0:	mov	r0, r5
   1c0e4:	bl	17000 <_start@@Base+0x1f14>
   1c0e8:	mov	r8, r0
   1c0ec:	b	1ba94 <_start@@Base+0x69a8>
   1c0f0:	mov	r6, r4
   1c0f4:	b	1bab4 <_start@@Base+0x69c8>
   1c0f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c0fc:	mov	ip, #0
   1c100:	cmp	r3, #9
   1c104:	strd	r6, [sp, #8]
   1c108:	mov	r4, r1
   1c10c:	mov	r5, r2
   1c110:	strd	r8, [sp, #16]
   1c114:	mov	r6, r0
   1c118:	strd	sl, [sp, #24]
   1c11c:	str	lr, [sp, #32]
   1c120:	sub	sp, sp, #36	; 0x24
   1c124:	ldr	r7, [sp, #72]	; 0x48
   1c128:	str	ip, [r7]
   1c12c:	beq	1c1f0 <_start@@Base+0x7104>
   1c130:	bhi	1c190 <_start@@Base+0x70a4>
   1c134:	cmp	r3, #2
   1c138:	beq	1c434 <_start@@Base+0x7348>
   1c13c:	cmp	r3, #8
   1c140:	beq	1c224 <_start@@Base+0x7138>
   1c144:	cmp	r3, ip
   1c148:	beq	1c400 <_start@@Base+0x7314>
   1c14c:	ldr	r3, [r6, #8]
   1c150:	mov	r2, r5
   1c154:	mov	r1, r4
   1c158:	mov	r0, r6
   1c15c:	tst	r3, #1
   1c160:	bne	1c218 <_start@@Base+0x712c>
   1c164:	mov	r3, #15
   1c168:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c16c:	mov	r4, r0
   1c170:	mov	r0, r4
   1c174:	add	sp, sp, #36	; 0x24
   1c178:	ldrd	r4, [sp]
   1c17c:	ldrd	r6, [sp, #8]
   1c180:	ldrd	r8, [sp, #16]
   1c184:	ldrd	sl, [sp, #24]
   1c188:	add	sp, sp, #32
   1c18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c190:	cmp	r3, #11
   1c194:	beq	1c1a4 <_start@@Base+0x70b8>
   1c198:	bcc	1c1f0 <_start@@Base+0x7104>
   1c19c:	cmp	r3, #255	; 0xff
   1c1a0:	bne	1c14c <_start@@Base+0x7060>
   1c1a4:	mov	r1, r4
   1c1a8:	mov	r3, r7
   1c1ac:	mov	r2, r5
   1c1b0:	mov	r0, r6
   1c1b4:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   1c1b8:	mov	r4, r0
   1c1bc:	ldr	r3, [r6, #24]
   1c1c0:	cmp	r3, #0
   1c1c4:	bne	1c170 <_start@@Base+0x7084>
   1c1c8:	ldr	r3, [r7]
   1c1cc:	cmp	r3, #0
   1c1d0:	bne	1c170 <_start@@Base+0x7084>
   1c1d4:	mov	r1, r4
   1c1d8:	mov	r2, r5
   1c1dc:	mov	r0, r6
   1c1e0:	mov	r3, #33	; 0x21
   1c1e4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c1e8:	mov	r4, r0
   1c1ec:	b	1c170 <_start@@Base+0x7084>
   1c1f0:	mov	r1, r4
   1c1f4:	mov	r3, r7
   1c1f8:	mov	r2, r5
   1c1fc:	mov	r0, r6
   1c200:	bl	1ba1c <_start@@Base+0x6930>
   1c204:	ldr	r3, [r6, #24]
   1c208:	mov	r4, r0
   1c20c:	cmp	r3, #0
   1c210:	beq	1c1c8 <_start@@Base+0x70dc>
   1c214:	b	1c170 <_start@@Base+0x7084>
   1c218:	bl	2fb00 <flatcc_json_parser_generic_json@@Base>
   1c21c:	mov	r4, r0
   1c220:	b	1c170 <_start@@Base+0x7084>
   1c224:	mov	r2, #2
   1c228:	ldr	r0, [r0]
   1c22c:	mov	r1, r2
   1c230:	bl	26838 <flatcc_builder_start_struct@@Base>
   1c234:	subs	sl, r0, #0
   1c238:	beq	1c3c4 <_start@@Base+0x72d8>
   1c23c:	mov	r1, r4
   1c240:	add	r3, sp, #16
   1c244:	mov	r2, r5
   1c248:	mov	r0, r6
   1c24c:	bl	19ae0 <_start@@Base+0x49f4>
   1c250:	ldr	r3, [sp, #16]
   1c254:	mov	r4, r0
   1c258:	cmp	r3, #0
   1c25c:	beq	1c3a8 <_start@@Base+0x72bc>
   1c260:	str	r7, [sp, #72]	; 0x48
   1c264:	cmp	r5, r4
   1c268:	beq	1c294 <_start@@Base+0x71a8>
   1c26c:	ldrb	r3, [r4]
   1c270:	cmp	r3, #34	; 0x22
   1c274:	moveq	r3, #0
   1c278:	addeq	r4, r4, #1
   1c27c:	streq	r3, [r6, #12]
   1c280:	beq	1c294 <_start@@Base+0x71a8>
   1c284:	cmp	r3, #46	; 0x2e
   1c288:	movne	r3, #1
   1c28c:	strne	r3, [r6, #12]
   1c290:	beq	1c678 <_start@@Base+0x758c>
   1c294:	mov	r1, r5
   1c298:	mov	r0, r4
   1c29c:	bl	151e0 <_start@@Base+0xf4>
   1c2a0:	add	r3, pc, #1008	; 0x3f0
   1c2a4:	ldrd	r2, [r3]
   1c2a8:	cmp	r1, r3
   1c2ac:	cmpeq	r0, r2
   1c2b0:	bne	1c3ec <_start@@Base+0x7300>
   1c2b4:	add	r4, r4, #8
   1c2b8:	mov	r1, r5
   1c2bc:	mov	r0, r4
   1c2c0:	mov	r7, #0
   1c2c4:	bl	151e0 <_start@@Base+0xf4>
   1c2c8:	add	r3, pc, #976	; 0x3d0
   1c2cc:	ldrd	r2, [r3]
   1c2d0:	bic	r9, r1, #255	; 0xff
   1c2d4:	cmp	r9, r3
   1c2d8:	cmpeq	r7, r2
   1c2dc:	bne	1c3ec <_start@@Base+0x7300>
   1c2e0:	sub	r3, r5, r4
   1c2e4:	cmp	r3, #3
   1c2e8:	ble	1c3ec <_start@@Base+0x7300>
   1c2ec:	mov	r3, #3
   1c2f0:	mov	r2, r5
   1c2f4:	mov	r1, r4
   1c2f8:	mov	r0, r6
   1c2fc:	bl	199e0 <_start@@Base+0x48f4>
   1c300:	cmp	r4, r0
   1c304:	mov	fp, r0
   1c308:	beq	1c3ec <_start@@Base+0x7300>
   1c30c:	mov	r2, #0
   1c310:	mov	r3, #0
   1c314:	strh	r7, [sp, #12]
   1c318:	cmp	r5, r0
   1c31c:	str	r7, [sp, #20]
   1c320:	strd	r2, [sp, #24]
   1c324:	beq	1c6c8 <_start@@Base+0x75dc>
   1c328:	add	r0, sp, #24
   1c32c:	add	r3, sp, #20
   1c330:	mov	r2, r5
   1c334:	mov	r1, fp
   1c338:	str	r0, [sp]
   1c33c:	mov	r0, r6
   1c340:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1c344:	cmp	fp, r0
   1c348:	mov	r4, r0
   1c34c:	bne	1c6d0 <_start@@Base+0x75e4>
   1c350:	add	ip, sp, #12
   1c354:	ldr	r3, [pc, #868]	; 1c6c0 <_start@@Base+0x75d4>
   1c358:	mov	r2, r5
   1c35c:	mov	r1, r4
   1c360:	mov	r0, r6
   1c364:	str	ip, [sp]
   1c368:	bl	1add0 <_start@@Base+0x5ce4>
   1c36c:	cmp	r5, r0
   1c370:	cmpne	r0, r4
   1c374:	beq	1c720 <_start@@Base+0x7634>
   1c378:	ldrh	r2, [sp, #12]
   1c37c:	strh	r2, [sl]
   1c380:	mov	r1, r0
   1c384:	add	r3, sp, #16
   1c388:	mov	r2, r5
   1c38c:	mov	r0, r6
   1c390:	bl	193b0 <_start@@Base+0x42c4>
   1c394:	ldr	r3, [sp, #16]
   1c398:	mov	r4, r0
   1c39c:	cmp	r3, #0
   1c3a0:	bne	1c264 <_start@@Base+0x7178>
   1c3a4:	ldr	r7, [sp, #72]	; 0x48
   1c3a8:	cmp	r5, r4
   1c3ac:	beq	1c3c4 <_start@@Base+0x72d8>
   1c3b0:	ldr	r0, [r6]
   1c3b4:	bl	26a0c <flatcc_builder_end_struct@@Base>
   1c3b8:	cmp	r0, #0
   1c3bc:	str	r0, [r7]
   1c3c0:	bne	1c170 <_start@@Base+0x7084>
   1c3c4:	mov	r1, r4
   1c3c8:	mov	r3, #33	; 0x21
   1c3cc:	mov	r2, r5
   1c3d0:	mov	r0, r6
   1c3d4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c3d8:	ldr	r3, [r6, #24]
   1c3dc:	mov	r4, r0
   1c3e0:	cmp	r3, #0
   1c3e4:	beq	1c1c8 <_start@@Base+0x70dc>
   1c3e8:	b	1c170 <_start@@Base+0x7084>
   1c3ec:	mov	r1, r4
   1c3f0:	mov	r2, r5
   1c3f4:	mov	r0, r6
   1c3f8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1c3fc:	b	1c380 <_start@@Base+0x7294>
   1c400:	sub	r3, r2, r1
   1c404:	cmp	r3, #3
   1c408:	ble	1c418 <_start@@Base+0x732c>
   1c40c:	ldrb	r3, [r1]
   1c410:	cmp	r3, #110	; 0x6e
   1c414:	beq	1c79c <_start@@Base+0x76b0>
   1c418:	mov	r1, r4
   1c41c:	mov	r2, r5
   1c420:	mov	r0, r6
   1c424:	mov	r3, #26
   1c428:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c42c:	mov	r4, r0
   1c430:	b	1c170 <_start@@Base+0x7084>
   1c434:	mov	r1, #1
   1c438:	ldr	r0, [r0]
   1c43c:	bl	28038 <flatcc_builder_start_table@@Base>
   1c440:	cmp	r0, #0
   1c444:	bne	1c3c4 <_start@@Base+0x72d8>
   1c448:	mov	r1, r4
   1c44c:	add	r3, sp, #12
   1c450:	mov	r2, r5
   1c454:	mov	r0, r6
   1c458:	bl	19ae0 <_start@@Base+0x49f4>
   1c45c:	ldr	r3, [sp, #12]
   1c460:	mov	r4, r0
   1c464:	cmp	r3, #0
   1c468:	beq	1c620 <_start@@Base+0x7534>
   1c46c:	cmp	r5, r4
   1c470:	beq	1c49c <_start@@Base+0x73b0>
   1c474:	ldrb	r3, [r4]
   1c478:	cmp	r3, #34	; 0x22
   1c47c:	moveq	r3, #0
   1c480:	addeq	r4, r4, #1
   1c484:	streq	r3, [r6, #12]
   1c488:	beq	1c49c <_start@@Base+0x73b0>
   1c48c:	cmp	r3, #46	; 0x2e
   1c490:	movne	r3, #1
   1c494:	strne	r3, [r6, #12]
   1c498:	beq	1c65c <_start@@Base+0x7570>
   1c49c:	mov	r1, r5
   1c4a0:	mov	r0, r4
   1c4a4:	bl	151e0 <_start@@Base+0xf4>
   1c4a8:	add	r3, pc, #504	; 0x1f8
   1c4ac:	ldrd	r2, [r3]
   1c4b0:	cmp	r1, r3
   1c4b4:	cmpeq	r0, r2
   1c4b8:	bne	1c5e8 <_start@@Base+0x74fc>
   1c4bc:	add	r8, r4, #8
   1c4c0:	mov	r1, r5
   1c4c4:	mov	r0, r8
   1c4c8:	bl	151e0 <_start@@Base+0xf4>
   1c4cc:	add	r3, pc, #476	; 0x1dc
   1c4d0:	ldrd	r2, [r3]
   1c4d4:	cmp	r1, r3
   1c4d8:	cmpeq	r0, r2
   1c4dc:	bne	1c644 <_start@@Base+0x7558>
   1c4e0:	add	r4, r4, #16
   1c4e4:	mov	r1, r5
   1c4e8:	mov	r0, r4
   1c4ec:	mov	r8, #0
   1c4f0:	bl	151e0 <_start@@Base+0xf4>
   1c4f4:	add	r3, pc, #444	; 0x1bc
   1c4f8:	ldrd	r2, [r3]
   1c4fc:	bic	fp, r1, #255	; 0xff
   1c500:	cmp	fp, r3
   1c504:	cmpeq	r8, r2
   1c508:	bne	1c5e8 <_start@@Base+0x74fc>
   1c50c:	sub	r3, r5, r4
   1c510:	cmp	r3, #3
   1c514:	ble	1c5e8 <_start@@Base+0x74fc>
   1c518:	mov	r3, #3
   1c51c:	mov	r2, r5
   1c520:	mov	r1, r4
   1c524:	mov	r0, r6
   1c528:	bl	199e0 <_start@@Base+0x48f4>
   1c52c:	cmp	r4, r0
   1c530:	mov	r9, r0
   1c534:	beq	1c5e8 <_start@@Base+0x74fc>
   1c538:	mov	r2, #0
   1c53c:	mov	r3, #0
   1c540:	str	r8, [sp, #16]
   1c544:	cmp	r5, r0
   1c548:	str	r8, [sp, #20]
   1c54c:	strd	r2, [sp, #24]
   1c550:	beq	1c748 <_start@@Base+0x765c>
   1c554:	add	r0, sp, #24
   1c558:	add	r3, sp, #20
   1c55c:	mov	r2, r5
   1c560:	mov	r1, r9
   1c564:	str	r0, [sp]
   1c568:	mov	r0, r6
   1c56c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1c570:	cmp	r9, r0
   1c574:	mov	r4, r0
   1c578:	bne	1c750 <_start@@Base+0x7664>
   1c57c:	add	ip, sp, #16
   1c580:	ldr	r3, [pc, #316]	; 1c6c4 <_start@@Base+0x75d8>
   1c584:	mov	r2, r5
   1c588:	mov	r1, r4
   1c58c:	mov	r0, r6
   1c590:	str	ip, [sp]
   1c594:	bl	1b3ec <_start@@Base+0x6300>
   1c598:	cmp	r5, r0
   1c59c:	cmpne	r0, r4
   1c5a0:	beq	1c740 <_start@@Base+0x7654>
   1c5a4:	ldr	r2, [sp, #16]
   1c5a8:	mov	r4, r0
   1c5ac:	cmp	r2, #0
   1c5b0:	bne	1c5c0 <_start@@Base+0x74d4>
   1c5b4:	ldr	r3, [r6, #8]
   1c5b8:	tst	r3, #2
   1c5bc:	beq	1c5fc <_start@@Base+0x7510>
   1c5c0:	mov	r3, #4
   1c5c4:	mov	r1, #0
   1c5c8:	ldr	r0, [r6]
   1c5cc:	mov	r2, r3
   1c5d0:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1c5d4:	cmp	r0, #0
   1c5d8:	beq	1c3c4 <_start@@Base+0x72d8>
   1c5dc:	ldr	r3, [sp, #16]
   1c5e0:	str	r3, [r0]
   1c5e4:	b	1c5fc <_start@@Base+0x7510>
   1c5e8:	mov	r1, r4
   1c5ec:	mov	r2, r5
   1c5f0:	mov	r0, r6
   1c5f4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1c5f8:	mov	r4, r0
   1c5fc:	mov	r1, r4
   1c600:	add	r3, sp, #12
   1c604:	mov	r2, r5
   1c608:	mov	r0, r6
   1c60c:	bl	193b0 <_start@@Base+0x42c4>
   1c610:	ldr	r3, [sp, #12]
   1c614:	mov	r4, r0
   1c618:	cmp	r3, #0
   1c61c:	bne	1c46c <_start@@Base+0x7380>
   1c620:	ldr	r3, [r6, #24]
   1c624:	cmp	r3, #0
   1c628:	bne	1c3c4 <_start@@Base+0x72d8>
   1c62c:	ldr	r0, [r6]
   1c630:	bl	289b8 <flatcc_builder_end_table@@Base>
   1c634:	cmp	r0, #0
   1c638:	str	r0, [r7]
   1c63c:	bne	1c1bc <_start@@Base+0x70d0>
   1c640:	b	1c3c4 <_start@@Base+0x72d8>
   1c644:	mov	r1, r8
   1c648:	mov	r2, r5
   1c64c:	mov	r0, r6
   1c650:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1c654:	mov	r4, r0
   1c658:	b	1c5fc <_start@@Base+0x7510>
   1c65c:	mov	r1, r4
   1c660:	mov	r3, #5
   1c664:	mov	r2, r5
   1c668:	mov	r0, r6
   1c66c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c670:	mov	r4, r0
   1c674:	b	1c49c <_start@@Base+0x73b0>
   1c678:	mov	r1, r4
   1c67c:	mov	r3, #5
   1c680:	mov	r2, r5
   1c684:	mov	r0, r6
   1c688:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c68c:	mov	r4, r0
   1c690:	b	1c294 <_start@@Base+0x71a8>
   1c694:	nop	{0}
   1c698:	svcpl	0x006c656e
   1c69c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1c6a0:	andeq	r0, r0, r0
   1c6a4:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1c6a8:	ldrbvs	r6, [pc], #-372	; 1c6b0 <_start@@Base+0x75c4>
   1c6ac:	cmnvc	r7, #456	; 0x1c8
   1c6b0:	svcpl	0x0064616d
   1c6b4:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1c6b8:	andeq	r0, r0, r0
   1c6bc:	cmnvs	r7, r0, lsl #10
   1c6c0:	ldrdeq	r9, [r5], -r8
   1c6c4:	andeq	r9, r5, ip, asr #1
   1c6c8:	mov	r4, r5
   1c6cc:	b	1c350 <_start@@Base+0x7264>
   1c6d0:	ldr	r3, [sp, #20]
   1c6d4:	cmp	r3, r7
   1c6d8:	bne	1c800 <_start@@Base+0x7714>
   1c6dc:	ldrd	r2, [sp, #24]
   1c6e0:	mov	r1, #0
   1c6e4:	movw	r0, #65535	; 0xffff
   1c6e8:	cmp	r3, r1
   1c6ec:	cmpeq	r2, r0
   1c6f0:	uxthls	r2, r2
   1c6f4:	movls	r0, r4
   1c6f8:	bls	1c37c <_start@@Base+0x7290>
   1c6fc:	mov	r1, r4
   1c700:	mov	r3, #7
   1c704:	mov	r2, r5
   1c708:	mov	r0, r6
   1c70c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c710:	cmp	fp, r0
   1c714:	bne	1c378 <_start@@Base+0x728c>
   1c718:	mov	r4, fp
   1c71c:	b	1c350 <_start@@Base+0x7264>
   1c720:	mov	r1, r0
   1c724:	mov	r3, #33	; 0x21
   1c728:	ldr	r7, [sp, #72]	; 0x48
   1c72c:	mov	r2, r5
   1c730:	mov	r0, r6
   1c734:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c738:	mov	r4, r0
   1c73c:	b	1c3a8 <_start@@Base+0x72bc>
   1c740:	mov	r4, r0
   1c744:	b	1c3c4 <_start@@Base+0x72d8>
   1c748:	mov	r4, r5
   1c74c:	b	1c57c <_start@@Base+0x7490>
   1c750:	ldr	r1, [sp, #20]
   1c754:	ldrd	r2, [sp, #24]
   1c758:	cmp	r1, r8
   1c75c:	beq	1c7cc <_start@@Base+0x76e0>
   1c760:	cmp	r3, #0
   1c764:	cmpeq	r2, #-2147483648	; 0x80000000
   1c768:	rsbls	r2, r2, #0
   1c76c:	strls	r2, [sp, #16]
   1c770:	bls	1c5ac <_start@@Base+0x74c0>
   1c774:	mov	r1, r0
   1c778:	mov	r3, #8
   1c77c:	mov	r2, r5
   1c780:	mov	r0, r6
   1c784:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c788:	mov	r4, r0
   1c78c:	cmp	r9, r4
   1c790:	beq	1c57c <_start@@Base+0x7490>
   1c794:	ldr	r2, [sp, #16]
   1c798:	b	1c5ac <_start@@Base+0x74c0>
   1c79c:	ldrb	r3, [r1, #1]
   1c7a0:	add	r2, r1, #1
   1c7a4:	cmp	r3, #117	; 0x75
   1c7a8:	bne	1c418 <_start@@Base+0x732c>
   1c7ac:	ldrb	r3, [r2, #1]!
   1c7b0:	cmp	r3, #108	; 0x6c
   1c7b4:	bne	1c418 <_start@@Base+0x732c>
   1c7b8:	ldrb	r3, [r2, #1]
   1c7bc:	cmp	r3, #108	; 0x6c
   1c7c0:	addeq	r4, r1, #4
   1c7c4:	bne	1c418 <_start@@Base+0x732c>
   1c7c8:	b	1c170 <_start@@Base+0x7084>
   1c7cc:	mov	r1, #0
   1c7d0:	mvn	r0, #-2147483648	; 0x80000000
   1c7d4:	cmp	r3, r1
   1c7d8:	cmpeq	r2, r0
   1c7dc:	strls	r2, [sp, #16]
   1c7e0:	bls	1c5ac <_start@@Base+0x74c0>
   1c7e4:	mov	r1, r4
   1c7e8:	mov	r3, #7
   1c7ec:	mov	r2, r5
   1c7f0:	mov	r0, r6
   1c7f4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c7f8:	mov	r4, r0
   1c7fc:	b	1c78c <_start@@Base+0x76a0>
   1c800:	mov	r1, r0
   1c804:	mov	r3, #8
   1c808:	mov	r2, r5
   1c80c:	mov	r0, r6
   1c810:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c814:	b	1c710 <_start@@Base+0x7624>
   1c818:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c81c:	mov	r4, #0
   1c820:	mov	r5, #0
   1c824:	strd	r6, [sp, #8]
   1c828:	cmp	r1, r2
   1c82c:	mov	r6, r2
   1c830:	strd	r8, [sp, #16]
   1c834:	mov	r8, r0
   1c838:	strd	sl, [sp, #24]
   1c83c:	str	lr, [sp, #32]
   1c840:	sub	sp, sp, #44	; 0x2c
   1c844:	ldr	fp, [sp, #80]	; 0x50
   1c848:	str	r3, [sp, #20]
   1c84c:	strd	r4, [fp]
   1c850:	beq	1c9cc <_start@@Base+0x78e0>
   1c854:	ldrb	r3, [r1]
   1c858:	cmp	r3, #34	; 0x22
   1c85c:	moveq	r3, #0
   1c860:	addeq	r4, r1, #1
   1c864:	streq	r3, [r0, #12]
   1c868:	beq	1c9e0 <_start@@Base+0x78f4>
   1c86c:	cmp	r3, #46	; 0x2e
   1c870:	movne	r3, #1
   1c874:	movne	r4, r1
   1c878:	strne	r3, [r0, #12]
   1c87c:	beq	1c9a8 <_start@@Base+0x78bc>
   1c880:	mov	r3, #0
   1c884:	add	sl, sp, #28
   1c888:	add	r9, sp, #32
   1c88c:	str	r3, [sp, #12]
   1c890:	str	r3, [sp, #16]
   1c894:	mov	r7, r4
   1c898:	mov	r1, r4
   1c89c:	ldr	r5, [sp, #20]
   1c8a0:	b	1c8bc <_start@@Base+0x77d0>
   1c8a4:	cmp	r7, r0
   1c8a8:	mov	r7, r0
   1c8ac:	bne	1c904 <_start@@Base+0x7818>
   1c8b0:	ldr	r3, [r5, #4]!
   1c8b4:	cmp	r3, #0
   1c8b8:	beq	1c960 <_start@@Base+0x7874>
   1c8bc:	add	r3, sp, #24
   1c8c0:	mov	r2, r6
   1c8c4:	stm	sp, {r9, sl}
   1c8c8:	mov	r0, r8
   1c8cc:	ldr	r4, [r5]
   1c8d0:	blx	r4
   1c8d4:	cmp	r6, r0
   1c8d8:	mov	r1, r0
   1c8dc:	bne	1c8a4 <_start@@Base+0x77b8>
   1c8e0:	mov	r4, r0
   1c8e4:	mov	r0, r4
   1c8e8:	add	sp, sp, #44	; 0x2c
   1c8ec:	ldrd	r4, [sp]
   1c8f0:	ldrd	r6, [sp, #8]
   1c8f4:	ldrd	r8, [sp, #16]
   1c8f8:	ldrd	sl, [sp, #24]
   1c8fc:	add	sp, sp, #32
   1c900:	pop	{pc}		; (ldr pc, [sp], #4)
   1c904:	ldr	r1, [sp, #24]
   1c908:	mov	r4, r0
   1c90c:	ldrd	r2, [sp, #32]
   1c910:	cmp	r1, #0
   1c914:	beq	1c978 <_start@@Base+0x788c>
   1c918:	cmp	r3, #-2147483648	; 0x80000000
   1c91c:	cmpeq	r2, #0
   1c920:	bhi	1ca24 <_start@@Base+0x7938>
   1c924:	rsbs	r2, r2, #0
   1c928:	rsc	r3, r3, #0
   1c92c:	strd	r2, [sp, #12]
   1c930:	ldr	r3, [fp]
   1c934:	ldr	r0, [sp, #12]
   1c938:	ldr	r2, [fp, #4]
   1c93c:	ldr	r1, [sp, #28]
   1c940:	adds	r3, r3, r0
   1c944:	ldr	r0, [sp, #16]
   1c948:	str	r3, [fp]
   1c94c:	adc	r2, r2, r0
   1c950:	cmp	r1, #0
   1c954:	str	r2, [fp, #4]
   1c958:	bne	1c894 <_start@@Base+0x77a8>
   1c95c:	b	1c8e4 <_start@@Base+0x77f8>
   1c960:	mov	r2, r6
   1c964:	mov	r0, r8
   1c968:	mov	r3, #23
   1c96c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c970:	mov	r4, r0
   1c974:	b	1c8e4 <_start@@Base+0x77f8>
   1c978:	cmp	r2, #0
   1c97c:	sbcs	r1, r3, #0
   1c980:	bge	1c92c <_start@@Base+0x7840>
   1c984:	mov	r3, #7
   1c988:	mov	r2, r6
   1c98c:	mov	r1, r4
   1c990:	mov	r0, r8
   1c994:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c998:	cmp	r6, r0
   1c99c:	bne	1c930 <_start@@Base+0x7844>
   1c9a0:	mov	r4, r6
   1c9a4:	b	1c8e4 <_start@@Base+0x77f8>
   1c9a8:	mov	r3, #5
   1c9ac:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1c9b0:	ldr	r3, [r8, #12]
   1c9b4:	mov	r4, r0
   1c9b8:	cmp	r3, #0
   1c9bc:	beq	1c9e0 <_start@@Base+0x78f4>
   1c9c0:	cmp	r6, r4
   1c9c4:	bne	1c880 <_start@@Base+0x7794>
   1c9c8:	b	1c8e4 <_start@@Base+0x77f8>
   1c9cc:	ldr	r3, [r0, #12]
   1c9d0:	cmp	r3, #0
   1c9d4:	movne	r4, r1
   1c9d8:	bne	1c8e4 <_start@@Base+0x77f8>
   1c9dc:	mov	r4, r6
   1c9e0:	sub	r3, r6, r4
   1c9e4:	cmp	r3, #1
   1c9e8:	ble	1ca0c <_start@@Base+0x7920>
   1c9ec:	ldrb	r3, [r4]
   1c9f0:	cmp	r3, #32
   1c9f4:	bhi	1c9c0 <_start@@Base+0x78d4>
   1c9f8:	bne	1ca0c <_start@@Base+0x7920>
   1c9fc:	ldrb	r3, [r4, #1]
   1ca00:	cmp	r3, #32
   1ca04:	addhi	r4, r4, #1
   1ca08:	bhi	1c9c0 <_start@@Base+0x78d4>
   1ca0c:	mov	r1, r4
   1ca10:	mov	r2, r6
   1ca14:	mov	r0, r8
   1ca18:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1ca1c:	mov	r4, r0
   1ca20:	b	1c9c0 <_start@@Base+0x78d4>
   1ca24:	mov	r3, #8
   1ca28:	mov	r2, r6
   1ca2c:	mov	r1, r4
   1ca30:	mov	r0, r8
   1ca34:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ca38:	b	1c998 <_start@@Base+0x78ac>
   1ca3c:	cmp	r1, r2
   1ca40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ca44:	strd	r6, [sp, #8]
   1ca48:	mov	r6, r2
   1ca4c:	mov	r7, r0
   1ca50:	strd	r8, [sp, #16]
   1ca54:	strd	sl, [sp, #24]
   1ca58:	str	lr, [sp, #32]
   1ca5c:	sub	sp, sp, #28
   1ca60:	beq	1ca74 <_start@@Base+0x7988>
   1ca64:	mov	fp, r3
   1ca68:	ldrb	r3, [r1]
   1ca6c:	cmp	r3, #123	; 0x7b
   1ca70:	beq	1caa8 <_start@@Base+0x79bc>
   1ca74:	mov	r2, r6
   1ca78:	mov	r0, r7
   1ca7c:	mov	r3, #21
   1ca80:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ca84:	mov	r5, r0
   1ca88:	mov	r0, r5
   1ca8c:	add	sp, sp, #28
   1ca90:	ldrd	r4, [sp]
   1ca94:	ldrd	r6, [sp, #8]
   1ca98:	ldrd	r8, [sp, #16]
   1ca9c:	ldrd	sl, [sp, #24]
   1caa0:	add	sp, sp, #32
   1caa4:	pop	{pc}		; (ldr pc, [sp], #4)
   1caa8:	add	r4, r1, #1
   1caac:	sub	r3, r2, r4
   1cab0:	cmp	r3, #1
   1cab4:	ble	1cac8 <_start@@Base+0x79dc>
   1cab8:	ldrb	r3, [r1, #1]
   1cabc:	cmp	r3, #32
   1cac0:	bhi	1cadc <_start@@Base+0x79f0>
   1cac4:	beq	1d0fc <_start@@Base+0x8010>
   1cac8:	mov	r1, r4
   1cacc:	mov	r2, r6
   1cad0:	mov	r0, r7
   1cad4:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1cad8:	mov	r4, r0
   1cadc:	cmp	r6, r4
   1cae0:	beq	1caf0 <_start@@Base+0x7a04>
   1cae4:	ldrb	r3, [r4]
   1cae8:	cmp	r3, #125	; 0x7d
   1caec:	beq	1d098 <_start@@Base+0x7fac>
   1caf0:	cmp	r6, r4
   1caf4:	beq	1cce8 <_start@@Base+0x7bfc>
   1caf8:	ldrb	r3, [r4]
   1cafc:	cmp	r3, #34	; 0x22
   1cb00:	moveq	r3, #0
   1cb04:	addeq	r4, r4, #1
   1cb08:	streq	r3, [r7, #12]
   1cb0c:	beq	1cb20 <_start@@Base+0x7a34>
   1cb10:	cmp	r3, #46	; 0x2e
   1cb14:	movne	r3, #1
   1cb18:	strne	r3, [r7, #12]
   1cb1c:	beq	1cf34 <_start@@Base+0x7e48>
   1cb20:	sub	r2, r6, r4
   1cb24:	cmp	r2, #8
   1cb28:	bls	1cd00 <_start@@Base+0x7c14>
   1cb2c:	mov	r1, #0
   1cb30:	mov	r3, r1
   1cb34:	ldrb	r0, [r4, #3]
   1cb38:	orr	r3, r3, r0
   1cb3c:	ldrb	r0, [r4, #2]
   1cb40:	orr	r3, r3, r0, lsl #8
   1cb44:	ldrb	r0, [r4, #1]
   1cb48:	orr	r3, r3, r0, lsl #16
   1cb4c:	ldrb	r0, [r4]
   1cb50:	mov	r8, #0
   1cb54:	orr	r3, r3, r0, lsl #24
   1cb58:	and	r9, r3, #-16777216	; 0xff000000
   1cb5c:	cmp	r9, #1644167168	; 0x62000000
   1cb60:	cmpeq	r8, #0
   1cb64:	beq	1cd50 <_start@@Base+0x7c64>
   1cb68:	cmp	r9, #1627389952	; 0x61000000
   1cb6c:	cmpeq	r8, #0
   1cb70:	bne	1cce8 <_start@@Base+0x7bfc>
   1cb74:	cmp	r2, #1
   1cb78:	ble	1cce8 <_start@@Base+0x7bfc>
   1cb7c:	ldr	r2, [r7, #12]
   1cb80:	ldrb	r3, [r4, #1]
   1cb84:	cmp	r2, #0
   1cb88:	beq	1cf14 <_start@@Base+0x7e28>
   1cb8c:	cmp	r3, #58	; 0x3a
   1cb90:	cmpne	r3, #32
   1cb94:	movhi	r3, #1
   1cb98:	movls	r3, #0
   1cb9c:	bhi	1cce8 <_start@@Base+0x7bfc>
   1cba0:	add	r1, r4, #1
   1cba4:	str	r3, [r7, #12]
   1cba8:	sub	r3, r6, r1
   1cbac:	cmp	r3, #1
   1cbb0:	ble	1cbc4 <_start@@Base+0x7ad8>
   1cbb4:	ldrb	r3, [r1]
   1cbb8:	cmp	r3, #32
   1cbbc:	bhi	1cbd4 <_start@@Base+0x7ae8>
   1cbc0:	beq	1d084 <_start@@Base+0x7f98>
   1cbc4:	mov	r2, r6
   1cbc8:	mov	r0, r7
   1cbcc:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1cbd0:	mov	r1, r0
   1cbd4:	cmp	r6, r1
   1cbd8:	beq	1cbe8 <_start@@Base+0x7afc>
   1cbdc:	ldrb	r3, [r1]
   1cbe0:	cmp	r3, #58	; 0x3a
   1cbe4:	beq	1d0c8 <_start@@Base+0x7fdc>
   1cbe8:	mov	r3, #4
   1cbec:	mov	r2, r6
   1cbf0:	mov	r0, r7
   1cbf4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cbf8:	mov	sl, r0
   1cbfc:	cmp	sl, r4
   1cc00:	beq	1cce8 <_start@@Base+0x7bfc>
   1cc04:	mov	r3, #0
   1cc08:	mov	r0, #0
   1cc0c:	mov	r1, #0
   1cc10:	cmp	r6, sl
   1cc14:	strh	r3, [sp, #10]
   1cc18:	str	r3, [sp, #12]
   1cc1c:	strd	r0, [sp, #16]
   1cc20:	beq	1cf2c <_start@@Base+0x7e40>
   1cc24:	add	r0, sp, #16
   1cc28:	add	r3, sp, #12
   1cc2c:	mov	r2, r6
   1cc30:	mov	r1, sl
   1cc34:	str	r0, [sp]
   1cc38:	mov	r0, r7
   1cc3c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1cc40:	cmp	sl, r0
   1cc44:	mov	r5, r0
   1cc48:	bne	1cf90 <_start@@Base+0x7ea4>
   1cc4c:	add	ip, sp, #10
   1cc50:	ldr	r3, [pc, #1208]	; 1d110 <_start@@Base+0x8024>
   1cc54:	mov	r2, r6
   1cc58:	mov	r1, r5
   1cc5c:	mov	r0, r7
   1cc60:	str	ip, [sp]
   1cc64:	bl	1b5f8 <_start@@Base+0x650c>
   1cc68:	cmp	r6, r0
   1cc6c:	cmpne	r0, r5
   1cc70:	beq	1d0e0 <_start@@Base+0x7ff4>
   1cc74:	ldrsh	r2, [sp, #10]
   1cc78:	mov	r5, r0
   1cc7c:	strh	r2, [fp]
   1cc80:	sub	r3, r6, r5
   1cc84:	cmp	r3, #1
   1cc88:	ble	1cc9c <_start@@Base+0x7bb0>
   1cc8c:	ldrb	r3, [r5]
   1cc90:	cmp	r3, #32
   1cc94:	bhi	1ccb0 <_start@@Base+0x7bc4>
   1cc98:	beq	1ce98 <_start@@Base+0x7dac>
   1cc9c:	mov	r1, r5
   1cca0:	mov	r2, r6
   1cca4:	mov	r0, r7
   1cca8:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1ccac:	mov	r5, r0
   1ccb0:	cmp	r6, r5
   1ccb4:	beq	1ca88 <_start@@Base+0x799c>
   1ccb8:	ldrb	r3, [r5]
   1ccbc:	cmp	r3, #44	; 0x2c
   1ccc0:	beq	1ceac <_start@@Base+0x7dc0>
   1ccc4:	cmp	r3, #125	; 0x7d
   1ccc8:	beq	1ce60 <_start@@Base+0x7d74>
   1cccc:	mov	r1, r5
   1ccd0:	mov	r2, r6
   1ccd4:	mov	r0, r7
   1ccd8:	mov	r3, #10
   1ccdc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cce0:	mov	r5, r0
   1cce4:	b	1ca88 <_start@@Base+0x799c>
   1cce8:	mov	r1, r4
   1ccec:	mov	r2, r6
   1ccf0:	mov	r0, r7
   1ccf4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1ccf8:	mov	r5, r0
   1ccfc:	b	1cc80 <_start@@Base+0x7b94>
   1cd00:	sub	r3, r2, #1
   1cd04:	cmp	r3, #7
   1cd08:	ldrls	pc, [pc, r3, lsl #2]
   1cd0c:	b	1cce8 <_start@@Base+0x7bfc>
   1cd10:	andeq	ip, r1, r8, asr #26
   1cd14:	andeq	ip, r1, r0, asr #26
   1cd18:	andeq	ip, r1, r8, lsr sp
   1cd1c:	andeq	ip, r1, r0, lsr sp
   1cd20:	andeq	ip, r1, r0, lsr sp
   1cd24:	andeq	ip, r1, r0, lsr sp
   1cd28:	andeq	ip, r1, ip, lsr #22
   1cd2c:	andeq	ip, r1, ip, lsr #22
   1cd30:	mov	r3, #0
   1cd34:	b	1cb34 <_start@@Base+0x7a48>
   1cd38:	mov	r3, #0
   1cd3c:	b	1cb3c <_start@@Base+0x7a50>
   1cd40:	mov	r3, #0
   1cd44:	b	1cb44 <_start@@Base+0x7a58>
   1cd48:	mov	r3, #0
   1cd4c:	b	1cb4c <_start@@Base+0x7a60>
   1cd50:	cmp	r2, #1
   1cd54:	ble	1cce8 <_start@@Base+0x7bfc>
   1cd58:	ldr	r2, [r7, #12]
   1cd5c:	ldrb	r3, [r4, #1]
   1cd60:	cmp	r2, r8
   1cd64:	beq	1cf04 <_start@@Base+0x7e18>
   1cd68:	cmp	r3, #58	; 0x3a
   1cd6c:	cmpne	r3, #32
   1cd70:	movhi	r3, #1
   1cd74:	movls	r3, #0
   1cd78:	bhi	1cce8 <_start@@Base+0x7bfc>
   1cd7c:	add	r1, r4, #1
   1cd80:	str	r3, [r7, #12]
   1cd84:	sub	r3, r6, r1
   1cd88:	cmp	r3, #1
   1cd8c:	ble	1cda0 <_start@@Base+0x7cb4>
   1cd90:	ldrb	r3, [r1]
   1cd94:	cmp	r3, #32
   1cd98:	bhi	1cdb0 <_start@@Base+0x7cc4>
   1cd9c:	beq	1d070 <_start@@Base+0x7f84>
   1cda0:	mov	r2, r6
   1cda4:	mov	r0, r7
   1cda8:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1cdac:	mov	r1, r0
   1cdb0:	cmp	r6, r1
   1cdb4:	beq	1cdc4 <_start@@Base+0x7cd8>
   1cdb8:	ldrb	r3, [r1]
   1cdbc:	cmp	r3, #58	; 0x3a
   1cdc0:	beq	1d0b0 <_start@@Base+0x7fc4>
   1cdc4:	mov	r3, #4
   1cdc8:	mov	r2, r6
   1cdcc:	mov	r0, r7
   1cdd0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cdd4:	mov	sl, r0
   1cdd8:	cmp	sl, r4
   1cddc:	beq	1cce8 <_start@@Base+0x7bfc>
   1cde0:	mov	r3, #0
   1cde4:	mov	r0, #0
   1cde8:	mov	r1, #0
   1cdec:	cmp	r6, sl
   1cdf0:	strb	r3, [sp, #10]
   1cdf4:	str	r3, [sp, #12]
   1cdf8:	strd	r0, [sp, #16]
   1cdfc:	beq	1cf24 <_start@@Base+0x7e38>
   1ce00:	add	r0, sp, #16
   1ce04:	add	r3, sp, #12
   1ce08:	mov	r2, r6
   1ce0c:	mov	r1, sl
   1ce10:	str	r0, [sp]
   1ce14:	mov	r0, r7
   1ce18:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1ce1c:	cmp	sl, r0
   1ce20:	mov	r5, r0
   1ce24:	bne	1cf50 <_start@@Base+0x7e64>
   1ce28:	add	ip, sp, #10
   1ce2c:	ldr	r3, [pc, #736]	; 1d114 <_start@@Base+0x8028>
   1ce30:	mov	r2, r6
   1ce34:	mov	r1, r5
   1ce38:	mov	r0, r7
   1ce3c:	str	ip, [sp]
   1ce40:	bl	1afd4 <_start@@Base+0x5ee8>
   1ce44:	cmp	r6, r0
   1ce48:	cmpne	r0, r5
   1ce4c:	beq	1d0e0 <_start@@Base+0x7ff4>
   1ce50:	ldrsb	r2, [sp, #10]
   1ce54:	mov	r5, r0
   1ce58:	strb	r2, [fp, #2]
   1ce5c:	b	1cc80 <_start@@Base+0x7b94>
   1ce60:	add	r1, r5, #1
   1ce64:	sub	r3, r6, r1
   1ce68:	cmp	r3, #1
   1ce6c:	ble	1ce84 <_start@@Base+0x7d98>
   1ce70:	ldrb	r3, [r5, #1]
   1ce74:	cmp	r3, #32
   1ce78:	movhi	r5, r1
   1ce7c:	bhi	1ca88 <_start@@Base+0x799c>
   1ce80:	beq	1cfdc <_start@@Base+0x7ef0>
   1ce84:	mov	r2, r6
   1ce88:	mov	r0, r7
   1ce8c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1ce90:	mov	r5, r0
   1ce94:	b	1ca88 <_start@@Base+0x799c>
   1ce98:	ldrb	r3, [r5, #1]
   1ce9c:	cmp	r3, #32
   1cea0:	addhi	r5, r5, #1
   1cea4:	bls	1cc9c <_start@@Base+0x7bb0>
   1cea8:	b	1ccb0 <_start@@Base+0x7bc4>
   1ceac:	add	r4, r5, #1
   1ceb0:	sub	r3, r6, r4
   1ceb4:	cmp	r3, #1
   1ceb8:	ble	1cecc <_start@@Base+0x7de0>
   1cebc:	ldrb	r3, [r5, #1]
   1cec0:	cmp	r3, #32
   1cec4:	bhi	1cee0 <_start@@Base+0x7df4>
   1cec8:	beq	1d05c <_start@@Base+0x7f70>
   1cecc:	mov	r1, r4
   1ced0:	mov	r2, r6
   1ced4:	mov	r0, r7
   1ced8:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1cedc:	mov	r4, r0
   1cee0:	cmp	r6, r4
   1cee4:	bne	1cae4 <_start@@Base+0x79f8>
   1cee8:	mov	r0, r7
   1ceec:	mov	r3, #10
   1cef0:	mov	r2, r6
   1cef4:	mov	r1, r6
   1cef8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cefc:	mov	r5, r0
   1cf00:	b	1ca88 <_start@@Base+0x799c>
   1cf04:	cmp	r3, #34	; 0x22
   1cf08:	bne	1cce8 <_start@@Base+0x7bfc>
   1cf0c:	add	r1, r4, #2
   1cf10:	b	1cd84 <_start@@Base+0x7c98>
   1cf14:	cmp	r3, #34	; 0x22
   1cf18:	bne	1cce8 <_start@@Base+0x7bfc>
   1cf1c:	add	r1, r4, #2
   1cf20:	b	1cba8 <_start@@Base+0x7abc>
   1cf24:	mov	r5, r6
   1cf28:	b	1ce28 <_start@@Base+0x7d3c>
   1cf2c:	mov	r5, r6
   1cf30:	b	1cc4c <_start@@Base+0x7b60>
   1cf34:	mov	r1, r4
   1cf38:	mov	r3, #5
   1cf3c:	mov	r2, r6
   1cf40:	mov	r0, r7
   1cf44:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cf48:	mov	r4, r0
   1cf4c:	b	1cb20 <_start@@Base+0x7a34>
   1cf50:	ldr	r1, [sp, #12]
   1cf54:	ldrd	r2, [sp, #16]
   1cf58:	cmp	r1, #0
   1cf5c:	beq	1cff0 <_start@@Base+0x7f04>
   1cf60:	cmp	r3, #0
   1cf64:	cmpeq	r2, #128	; 0x80
   1cf68:	rsbls	r2, r2, #0
   1cf6c:	sxtbls	r2, r2
   1cf70:	bls	1ce58 <_start@@Base+0x7d6c>
   1cf74:	mov	r1, r0
   1cf78:	mov	r3, #8
   1cf7c:	mov	r2, r6
   1cf80:	mov	r0, r7
   1cf84:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cf88:	mov	r5, r0
   1cf8c:	b	1d018 <_start@@Base+0x7f2c>
   1cf90:	ldr	r1, [sp, #12]
   1cf94:	ldrd	r2, [sp, #16]
   1cf98:	cmp	r1, #0
   1cf9c:	beq	1d028 <_start@@Base+0x7f3c>
   1cfa0:	cmp	r3, #0
   1cfa4:	cmpeq	r2, #32768	; 0x8000
   1cfa8:	rsbls	r2, r2, #0
   1cfac:	sxthls	r2, r2
   1cfb0:	bls	1cc7c <_start@@Base+0x7b90>
   1cfb4:	mov	r1, r0
   1cfb8:	mov	r3, #8
   1cfbc:	mov	r2, r6
   1cfc0:	mov	r0, r7
   1cfc4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1cfc8:	mov	r5, r0
   1cfcc:	cmp	sl, r5
   1cfd0:	ldrshne	r2, [sp, #10]
   1cfd4:	bne	1cc7c <_start@@Base+0x7b90>
   1cfd8:	b	1cc4c <_start@@Base+0x7b60>
   1cfdc:	ldrb	r3, [r5, #2]
   1cfe0:	cmp	r3, #32
   1cfe4:	addhi	r5, r5, #2
   1cfe8:	bls	1ce84 <_start@@Base+0x7d98>
   1cfec:	b	1ca88 <_start@@Base+0x799c>
   1cff0:	cmp	r3, #0
   1cff4:	cmpeq	r2, #127	; 0x7f
   1cff8:	sxtbls	r2, r2
   1cffc:	bls	1ce58 <_start@@Base+0x7d6c>
   1d000:	mov	r1, r0
   1d004:	mov	r3, #7
   1d008:	mov	r2, r6
   1d00c:	mov	r0, r7
   1d010:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d014:	mov	r5, r0
   1d018:	cmp	sl, r5
   1d01c:	ldrsbne	r2, [sp, #10]
   1d020:	bne	1ce58 <_start@@Base+0x7d6c>
   1d024:	b	1ce28 <_start@@Base+0x7d3c>
   1d028:	mov	r1, #0
   1d02c:	movw	r0, #32767	; 0x7fff
   1d030:	cmp	r3, r1
   1d034:	cmpeq	r2, r0
   1d038:	sxthls	r2, r2
   1d03c:	bls	1cc7c <_start@@Base+0x7b90>
   1d040:	mov	r1, r5
   1d044:	mov	r3, #7
   1d048:	mov	r2, r6
   1d04c:	mov	r0, r7
   1d050:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d054:	mov	r5, r0
   1d058:	b	1cfcc <_start@@Base+0x7ee0>
   1d05c:	ldrb	r3, [r5, #2]
   1d060:	cmp	r3, #32
   1d064:	addhi	r4, r5, #2
   1d068:	bls	1cecc <_start@@Base+0x7de0>
   1d06c:	b	1cee0 <_start@@Base+0x7df4>
   1d070:	ldrb	r3, [r1, #1]
   1d074:	cmp	r3, #32
   1d078:	addhi	r1, r1, #1
   1d07c:	bls	1cda0 <_start@@Base+0x7cb4>
   1d080:	b	1cdb0 <_start@@Base+0x7cc4>
   1d084:	ldrb	r3, [r1, #1]
   1d088:	cmp	r3, #32
   1d08c:	addhi	r1, r1, #1
   1d090:	bls	1cbc4 <_start@@Base+0x7ad8>
   1d094:	b	1cbd4 <_start@@Base+0x7ae8>
   1d098:	mov	r2, r6
   1d09c:	add	r1, r4, #1
   1d0a0:	mov	r0, r7
   1d0a4:	bl	17000 <_start@@Base+0x1f14>
   1d0a8:	mov	r5, r0
   1d0ac:	b	1ca88 <_start@@Base+0x799c>
   1d0b0:	add	r1, r1, #1
   1d0b4:	mov	r2, r6
   1d0b8:	mov	r0, r7
   1d0bc:	bl	17000 <_start@@Base+0x1f14>
   1d0c0:	mov	sl, r0
   1d0c4:	b	1cdd8 <_start@@Base+0x7cec>
   1d0c8:	add	r1, r1, #1
   1d0cc:	mov	r2, r6
   1d0d0:	mov	r0, r7
   1d0d4:	bl	17000 <_start@@Base+0x1f14>
   1d0d8:	mov	sl, r0
   1d0dc:	b	1cbfc <_start@@Base+0x7b10>
   1d0e0:	mov	r1, r0
   1d0e4:	mov	r2, r6
   1d0e8:	mov	r0, r7
   1d0ec:	mov	r3, #33	; 0x21
   1d0f0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d0f4:	mov	r5, r0
   1d0f8:	b	1ca88 <_start@@Base+0x799c>
   1d0fc:	ldrb	r3, [r1, #2]
   1d100:	cmp	r3, #32
   1d104:	addhi	r4, r1, #2
   1d108:	bls	1cac8 <_start@@Base+0x79dc>
   1d10c:	b	1cadc <_start@@Base+0x79f0>
   1d110:	strdeq	r9, [r5], -r0
   1d114:	andeq	r9, r5, r4, ror #1
   1d118:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d11c:	mov	r4, r1
   1d120:	mov	r5, r2
   1d124:	strd	r6, [sp, #8]
   1d128:	mov	r7, r3
   1d12c:	mov	r3, #0
   1d130:	mov	r6, r0
   1d134:	mov	r1, r3
   1d138:	strd	r8, [sp, #16]
   1d13c:	str	sl, [sp, #24]
   1d140:	str	lr, [sp, #28]
   1d144:	ldr	r0, [r0]
   1d148:	str	r3, [r7]
   1d14c:	bl	28038 <flatcc_builder_start_table@@Base>
   1d150:	cmp	r0, #0
   1d154:	beq	1d184 <_start@@Base+0x8098>
   1d158:	mov	r2, r5
   1d15c:	mov	r1, r4
   1d160:	ldrd	r4, [sp]
   1d164:	mov	r0, r6
   1d168:	mov	r3, #33	; 0x21
   1d16c:	ldrd	r6, [sp, #8]
   1d170:	ldrd	r8, [sp, #16]
   1d174:	ldr	sl, [sp, #24]
   1d178:	ldr	lr, [sp, #28]
   1d17c:	add	sp, sp, #32
   1d180:	b	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d184:	cmp	r4, r5
   1d188:	beq	1d198 <_start@@Base+0x80ac>
   1d18c:	ldrb	r3, [r4]
   1d190:	cmp	r3, #123	; 0x7b
   1d194:	beq	1d1ec <_start@@Base+0x8100>
   1d198:	mov	r1, r4
   1d19c:	mov	r3, #21
   1d1a0:	mov	r2, r5
   1d1a4:	mov	r0, r6
   1d1a8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d1ac:	mov	r4, r0
   1d1b0:	ldr	r3, [r6, #24]
   1d1b4:	cmp	r3, #0
   1d1b8:	bne	1d158 <_start@@Base+0x806c>
   1d1bc:	ldr	r0, [r6]
   1d1c0:	bl	289b8 <flatcc_builder_end_table@@Base>
   1d1c4:	cmp	r0, #0
   1d1c8:	str	r0, [r7]
   1d1cc:	beq	1d158 <_start@@Base+0x806c>
   1d1d0:	mov	r0, r4
   1d1d4:	ldrd	r4, [sp]
   1d1d8:	ldrd	r6, [sp, #8]
   1d1dc:	ldrd	r8, [sp, #16]
   1d1e0:	ldr	sl, [sp, #24]
   1d1e4:	add	sp, sp, #28
   1d1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1ec:	add	r1, r4, #1
   1d1f0:	sub	r3, r5, r1
   1d1f4:	cmp	r3, #1
   1d1f8:	ble	1d20c <_start@@Base+0x8120>
   1d1fc:	ldrb	r3, [r4, #1]
   1d200:	cmp	r3, #32
   1d204:	bhi	1d21c <_start@@Base+0x8130>
   1d208:	beq	1d3dc <_start@@Base+0x82f0>
   1d20c:	mov	r2, r5
   1d210:	mov	r0, r6
   1d214:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1d218:	mov	r1, r0
   1d21c:	cmp	r5, r1
   1d220:	beq	1d230 <_start@@Base+0x8144>
   1d224:	ldrb	r3, [r1]
   1d228:	cmp	r3, #125	; 0x7d
   1d22c:	beq	1d368 <_start@@Base+0x827c>
   1d230:	mov	r8, #1
   1d234:	mov	r9, #0
   1d238:	cmp	r5, r1
   1d23c:	beq	1d260 <_start@@Base+0x8174>
   1d240:	ldrb	r3, [r1]
   1d244:	cmp	r3, #34	; 0x22
   1d248:	addeq	r1, r1, #1
   1d24c:	streq	r9, [r6, #12]
   1d250:	beq	1d260 <_start@@Base+0x8174>
   1d254:	cmp	r3, #46	; 0x2e
   1d258:	strne	r8, [r6, #12]
   1d25c:	beq	1d380 <_start@@Base+0x8294>
   1d260:	mov	r2, r5
   1d264:	mov	r0, r6
   1d268:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1d26c:	sub	r3, r5, r0
   1d270:	mov	r4, r0
   1d274:	cmp	r3, #1
   1d278:	ble	1d28c <_start@@Base+0x81a0>
   1d27c:	ldrb	r3, [r0]
   1d280:	cmp	r3, #32
   1d284:	bhi	1d2a0 <_start@@Base+0x81b4>
   1d288:	beq	1d310 <_start@@Base+0x8224>
   1d28c:	mov	r1, r4
   1d290:	mov	r2, r5
   1d294:	mov	r0, r6
   1d298:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1d29c:	mov	r4, r0
   1d2a0:	cmp	r5, r4
   1d2a4:	beq	1d1b0 <_start@@Base+0x80c4>
   1d2a8:	ldrb	r3, [r4]
   1d2ac:	cmp	r3, #44	; 0x2c
   1d2b0:	beq	1d324 <_start@@Base+0x8238>
   1d2b4:	cmp	r3, #125	; 0x7d
   1d2b8:	beq	1d2d8 <_start@@Base+0x81ec>
   1d2bc:	mov	r1, r4
   1d2c0:	mov	r3, #10
   1d2c4:	mov	r2, r5
   1d2c8:	mov	r0, r6
   1d2cc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d2d0:	mov	r4, r0
   1d2d4:	b	1d1b0 <_start@@Base+0x80c4>
   1d2d8:	add	r1, r4, #1
   1d2dc:	sub	r3, r5, r1
   1d2e0:	cmp	r3, #1
   1d2e4:	ble	1d2fc <_start@@Base+0x8210>
   1d2e8:	ldrb	r3, [r4, #1]
   1d2ec:	cmp	r3, #32
   1d2f0:	movhi	r4, r1
   1d2f4:	bhi	1d1b0 <_start@@Base+0x80c4>
   1d2f8:	beq	1d398 <_start@@Base+0x82ac>
   1d2fc:	mov	r2, r5
   1d300:	mov	r0, r6
   1d304:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1d308:	mov	r4, r0
   1d30c:	b	1d1b0 <_start@@Base+0x80c4>
   1d310:	ldrb	r3, [r0, #1]
   1d314:	cmp	r3, #32
   1d318:	addhi	r4, r0, #1
   1d31c:	bls	1d28c <_start@@Base+0x81a0>
   1d320:	b	1d2a0 <_start@@Base+0x81b4>
   1d324:	add	r1, r4, #1
   1d328:	sub	r3, r5, r1
   1d32c:	cmp	r3, #1
   1d330:	ble	1d344 <_start@@Base+0x8258>
   1d334:	ldrb	r3, [r4, #1]
   1d338:	cmp	r3, #32
   1d33c:	bhi	1d354 <_start@@Base+0x8268>
   1d340:	beq	1d3ac <_start@@Base+0x82c0>
   1d344:	mov	r2, r5
   1d348:	mov	r0, r6
   1d34c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1d350:	mov	r1, r0
   1d354:	cmp	r5, r1
   1d358:	beq	1d3c0 <_start@@Base+0x82d4>
   1d35c:	ldrb	r3, [r1]
   1d360:	cmp	r3, #125	; 0x7d
   1d364:	bne	1d238 <_start@@Base+0x814c>
   1d368:	add	r1, r1, #1
   1d36c:	mov	r2, r5
   1d370:	mov	r0, r6
   1d374:	bl	17000 <_start@@Base+0x1f14>
   1d378:	mov	r4, r0
   1d37c:	b	1d1b0 <_start@@Base+0x80c4>
   1d380:	mov	r3, #5
   1d384:	mov	r2, r5
   1d388:	mov	r0, r6
   1d38c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d390:	mov	r1, r0
   1d394:	b	1d260 <_start@@Base+0x8174>
   1d398:	ldrb	r3, [r4, #2]
   1d39c:	cmp	r3, #32
   1d3a0:	addhi	r4, r4, #2
   1d3a4:	bls	1d2fc <_start@@Base+0x8210>
   1d3a8:	b	1d1b0 <_start@@Base+0x80c4>
   1d3ac:	ldrb	r3, [r4, #2]
   1d3b0:	cmp	r3, #32
   1d3b4:	addhi	r1, r4, #2
   1d3b8:	bls	1d344 <_start@@Base+0x8258>
   1d3bc:	b	1d354 <_start@@Base+0x8268>
   1d3c0:	mov	r3, #10
   1d3c4:	mov	r2, r5
   1d3c8:	mov	r1, r5
   1d3cc:	mov	r0, r6
   1d3d0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d3d4:	mov	r4, r0
   1d3d8:	b	1d1b0 <_start@@Base+0x80c4>
   1d3dc:	ldrb	r3, [r4, #2]
   1d3e0:	cmp	r3, #32
   1d3e4:	addhi	r1, r4, #2
   1d3e8:	bls	1d20c <_start@@Base+0x8120>
   1d3ec:	b	1d21c <_start@@Base+0x8130>
   1d3f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d3f4:	mov	ip, r3
   1d3f8:	strd	r6, [sp, #8]
   1d3fc:	strd	r8, [sp, #16]
   1d400:	mov	r9, r2
   1d404:	strd	sl, [sp, #24]
   1d408:	mov	fp, r0
   1d40c:	mov	sl, r1
   1d410:	str	lr, [sp, #32]
   1d414:	mov	r1, #36	; 0x24
   1d418:	vpush	{d8-d9}
   1d41c:	sub	sp, sp, #356	; 0x164
   1d420:	ldr	r0, [r0]
   1d424:	str	r3, [sp, #68]	; 0x44
   1d428:	mov	r3, #0
   1d42c:	str	r3, [ip]
   1d430:	bl	28038 <flatcc_builder_start_table@@Base>
   1d434:	cmp	r0, #0
   1d438:	beq	1d478 <_start@@Base+0x838c>
   1d43c:	mov	r2, r9
   1d440:	mov	r1, sl
   1d444:	mov	r0, fp
   1d448:	mov	r3, #33	; 0x21
   1d44c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1d450:	mov	r4, r0
   1d454:	mov	r0, r4
   1d458:	add	sp, sp, #356	; 0x164
   1d45c:	vpop	{d8-d9}
   1d460:	ldrd	r4, [sp]
   1d464:	ldrd	r6, [sp, #8]
   1d468:	ldrd	r8, [sp, #16]
   1d46c:	ldrd	sl, [sp, #24]
   1d470:	add	sp, sp, #32
   1d474:	pop	{pc}		; (ldr pc, [sp], #4)
   1d478:	add	r0, sp, #328	; 0x148
   1d47c:	mov	r3, #1
   1d480:	mov	r2, r9
   1d484:	mov	r1, sl
   1d488:	str	r0, [sp]
   1d48c:	mov	r0, fp
   1d490:	bl	32188 <flatcc_json_parser_prepare_unions@@Base>
   1d494:	cmp	r9, r0
   1d498:	beq	1d43c <_start@@Base+0x8350>
   1d49c:	mov	r1, sl
   1d4a0:	add	r3, sp, #320	; 0x140
   1d4a4:	mov	r2, r9
   1d4a8:	mov	r0, fp
   1d4ac:	bl	19ae0 <_start@@Base+0x49f4>
   1d4b0:	ldr	r3, [sp, #320]	; 0x140
   1d4b4:	mov	sl, r0
   1d4b8:	cmp	r3, #0
   1d4bc:	beq	1dcd8 <_start@@Base+0x8bec>
   1d4c0:	mov	r6, r4
   1d4c4:	mov	r7, r5
   1d4c8:	cmp	sl, r9
   1d4cc:	beq	1d4f8 <_start@@Base+0x840c>
   1d4d0:	ldrb	r3, [sl]
   1d4d4:	cmp	r3, #34	; 0x22
   1d4d8:	moveq	r3, #0
   1d4dc:	addeq	sl, sl, #1
   1d4e0:	streq	r3, [fp, #12]
   1d4e4:	beq	1d4f8 <_start@@Base+0x840c>
   1d4e8:	cmp	r3, #46	; 0x2e
   1d4ec:	movne	r3, #1
   1d4f0:	strne	r3, [fp, #12]
   1d4f4:	beq	1e338 <_start@@Base+0x924c>
   1d4f8:	mov	r1, r9
   1d4fc:	mov	r0, sl
   1d500:	bl	151e0 <_start@@Base+0xf4>
   1d504:	add	r3, pc, #788	; 0x314
   1d508:	ldrd	r2, [r3]
   1d50c:	mov	r4, r0
   1d510:	mov	r5, r1
   1d514:	strd	r4, [sp, #16]
   1d518:	cmp	r1, r3
   1d51c:	cmpeq	r0, r2
   1d520:	bhi	1d66c <_start@@Base+0x8580>
   1d524:	add	r3, pc, #764	; 0x2fc
   1d528:	ldrd	r2, [r3]
   1d52c:	cmp	r1, r3
   1d530:	cmpeq	r0, r2
   1d534:	bhi	1d768 <_start@@Base+0x867c>
   1d538:	add	r3, pc, #752	; 0x2f0
   1d53c:	ldrd	r2, [r3]
   1d540:	cmp	r1, r3
   1d544:	cmpeq	r0, r2
   1d548:	bhi	1dab0 <_start@@Base+0x89c4>
   1d54c:	and	r1, r0, #-16777216	; 0xff000000
   1d550:	add	r3, pc, #736	; 0x2e0
   1d554:	ldrd	r2, [r3]
   1d558:	str	r1, [sp, #40]	; 0x28
   1d55c:	str	r5, [sp, #44]	; 0x2c
   1d560:	ldrd	r0, [sp, #40]	; 0x28
   1d564:	cmp	r1, r3
   1d568:	cmpeq	r0, r2
   1d56c:	beq	1e6c0 <_start@@Base+0x95d4>
   1d570:	add	r3, pc, #712	; 0x2c8
   1d574:	ldrd	r2, [r3]
   1d578:	cmp	r1, r3
   1d57c:	cmpeq	r0, r2
   1d580:	bne	1f71c <_start@@Base+0xa630>
   1d584:	sub	r3, r9, sl
   1d588:	cmp	r3, #5
   1d58c:	ble	1f2c4 <_start@@Base+0xa1d8>
   1d590:	mov	r2, r9
   1d594:	mov	r1, sl
   1d598:	mov	r0, fp
   1d59c:	bl	19640 <_start@@Base+0x4554>
   1d5a0:	cmp	r0, sl
   1d5a4:	mov	r4, r0
   1d5a8:	beq	1f2c4 <_start@@Base+0xa1d8>
   1d5ac:	mov	r3, #0
   1d5b0:	mov	r0, #0
   1d5b4:	mov	r1, #0
   1d5b8:	cmp	r9, r4
   1d5bc:	strb	r3, [sp, #336]	; 0x150
   1d5c0:	str	r3, [sp, #340]	; 0x154
   1d5c4:	add	r3, sp, #344	; 0x158
   1d5c8:	strd	r0, [r3]
   1d5cc:	beq	2085c <_start@@Base+0xb770>
   1d5d0:	mov	r0, r3
   1d5d4:	mov	r2, r9
   1d5d8:	add	r3, sp, #340	; 0x154
   1d5dc:	mov	r1, r4
   1d5e0:	str	r0, [sp]
   1d5e4:	mov	r0, fp
   1d5e8:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1d5ec:	cmp	r4, r0
   1d5f0:	mov	sl, r0
   1d5f4:	bne	2089c <_start@@Base+0xb7b0>
   1d5f8:	add	ip, sp, #336	; 0x150
   1d5fc:	ldr	r3, [pc, #644]	; 1d888 <_start@@Base+0x879c>
   1d600:	mov	r2, r9
   1d604:	mov	r1, sl
   1d608:	mov	r0, fp
   1d60c:	str	ip, [sp]
   1d610:	bl	1afd4 <_start@@Base+0x5ee8>
   1d614:	cmp	r9, r0
   1d618:	cmpne	r0, sl
   1d61c:	beq	20550 <_start@@Base+0xb464>
   1d620:	add	r3, sp, #336	; 0x150
   1d624:	mov	sl, r0
   1d628:	ldrsb	r2, [r3]
   1d62c:	cmp	r2, #8
   1d630:	bne	1d640 <_start@@Base+0x8554>
   1d634:	ldr	r3, [fp, #8]
   1d638:	tst	r3, #2
   1d63c:	beq	1dcb4 <_start@@Base+0x8bc8>
   1d640:	mov	r3, #1
   1d644:	mov	r1, #6
   1d648:	ldr	r0, [fp]
   1d64c:	mov	r2, r3
   1d650:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1d654:	cmp	r0, #0
   1d658:	beq	1d43c <_start@@Base+0x8350>
   1d65c:	add	r3, sp, #336	; 0x150
   1d660:	ldrsb	r3, [r3]
   1d664:	strb	r3, [r0]
   1d668:	b	1dcb4 <_start@@Base+0x8bc8>
   1d66c:	add	r3, pc, #468	; 0x1d4
   1d670:	ldrd	r2, [r3]
   1d674:	cmp	r1, r3
   1d678:	cmpeq	r0, r2
   1d67c:	bhi	1d88c <_start@@Base+0x87a0>
   1d680:	add	r3, pc, #456	; 0x1c8
   1d684:	ldrd	r2, [r3]
   1d688:	cmp	r1, r3
   1d68c:	cmpeq	r0, r2
   1d690:	beq	1dd30 <_start@@Base+0x8c44>
   1d694:	add	r3, pc, #444	; 0x1bc
   1d698:	ldrd	r2, [r3]
   1d69c:	cmp	r1, r3
   1d6a0:	cmpeq	r0, r2
   1d6a4:	bhi	1decc <_start@@Base+0x8de0>
   1d6a8:	add	r3, pc, #432	; 0x1b0
   1d6ac:	ldrd	r2, [r3]
   1d6b0:	cmp	r1, r3
   1d6b4:	cmpeq	r0, r2
   1d6b8:	beq	1f8b8 <_start@@Base+0xa7cc>
   1d6bc:	add	r3, pc, #420	; 0x1a4
   1d6c0:	ldrd	r2, [r3]
   1d6c4:	cmp	r1, r3
   1d6c8:	cmpeq	r0, r2
   1d6cc:	bne	1eab8 <_start@@Base+0x99cc>
   1d6d0:	sub	r3, r9, sl
   1d6d4:	cmp	r3, #8
   1d6d8:	ble	2082c <_start@@Base+0xb740>
   1d6dc:	mov	r2, r9
   1d6e0:	mov	r1, sl
   1d6e4:	mov	r0, fp
   1d6e8:	bl	19728 <_start@@Base+0x463c>
   1d6ec:	cmp	r0, sl
   1d6f0:	mov	r4, r0
   1d6f4:	beq	2082c <_start@@Base+0xb740>
   1d6f8:	mov	r2, #0
   1d6fc:	sub	r3, r9, r0
   1d700:	cmp	r3, #3
   1d704:	strb	r2, [sp, #336]	; 0x150
   1d708:	ble	1f374 <_start@@Base+0xa288>
   1d70c:	ldrb	r2, [r0]
   1d710:	cmp	r2, #116	; 0x74
   1d714:	beq	20d14 <_start@@Base+0xbc28>
   1d718:	cmp	r3, #4
   1d71c:	beq	1f374 <_start@@Base+0xa288>
   1d720:	movw	r1, #10788	; 0x2a24
   1d724:	movt	r1, #4
   1d728:	mov	r2, #5
   1d72c:	mov	r0, r4
   1d730:	bl	14530 <memcmp@plt>
   1d734:	cmp	r0, #0
   1d738:	addeq	sl, r4, #5
   1d73c:	bne	1f374 <_start@@Base+0xa288>
   1d740:	mov	r3, #1
   1d744:	mov	r1, #15
   1d748:	ldr	r0, [fp]
   1d74c:	mov	r2, r3
   1d750:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1d754:	cmp	r0, #0
   1d758:	beq	1d43c <_start@@Base+0x8350>
   1d75c:	ldrb	r3, [sp, #336]	; 0x150
   1d760:	strb	r3, [r0]
   1d764:	b	1dcb4 <_start@@Base+0x8bc8>
   1d768:	add	r3, pc, #256	; 0x100
   1d76c:	ldrd	r2, [r3]
   1d770:	cmp	r1, r3
   1d774:	cmpeq	r0, r2
   1d778:	bhi	1dc34 <_start@@Base+0x8b48>
   1d77c:	add	r3, pc, #244	; 0xf4
   1d780:	ldrd	r2, [r3]
   1d784:	cmp	r1, r3
   1d788:	cmpeq	r0, r2
   1d78c:	bhi	1e218 <_start@@Base+0x912c>
   1d790:	mov	r1, #0
   1d794:	add	r3, pc, #228	; 0xe4
   1d798:	ldrd	r2, [r3]
   1d79c:	str	r1, [sp, #104]	; 0x68
   1d7a0:	str	r5, [sp, #108]	; 0x6c
   1d7a4:	ldrd	r0, [sp, #104]	; 0x68
   1d7a8:	cmp	r1, r3
   1d7ac:	cmpeq	r0, r2
   1d7b0:	bne	1ea88 <_start@@Base+0x999c>
   1d7b4:	sub	r3, r9, sl
   1d7b8:	cmp	r3, #4
   1d7bc:	ble	1fe98 <_start@@Base+0xadac>
   1d7c0:	mov	r1, sl
   1d7c4:	mov	r3, #4
   1d7c8:	mov	r2, r9
   1d7cc:	mov	r0, fp
   1d7d0:	bl	199e0 <_start@@Base+0x48f4>
   1d7d4:	cmp	r0, sl
   1d7d8:	mov	r1, r0
   1d7dc:	beq	1fe98 <_start@@Base+0xadac>
   1d7e0:	add	r3, sp, #324	; 0x144
   1d7e4:	mov	r2, r9
   1d7e8:	mov	r0, fp
   1d7ec:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   1d7f0:	ldr	r3, [sp, #324]	; 0x144
   1d7f4:	mov	sl, r0
   1d7f8:	cmp	r3, #0
   1d7fc:	beq	1d43c <_start@@Base+0x8350>
   1d800:	mov	r1, #3
   1d804:	ldr	r0, [fp]
   1d808:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1d80c:	cmp	r0, #0
   1d810:	beq	1d43c <_start@@Base+0x8350>
   1d814:	ldr	r3, [sp, #324]	; 0x144
   1d818:	str	r3, [r0]
   1d81c:	b	1dcb4 <_start@@Base+0x8bc8>
   1d820:	cmnvs	r2, r0, ror #4
   1d824:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d828:			; <UNDEFINED> instruction: 0xffffffff
   1d82c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1d830:			; <UNDEFINED> instruction: 0xffffffff
   1d834:			; <UNDEFINED> instruction: 0x666c6577
   1d838:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1d83c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1d840:	andvc	r0, r0, #0
   1d844:	cmnvs	pc, #28416	; 0x6f00
   1d848:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1d84c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d850:	cmnvs	r2, r1, ror #4
   1d854:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d858:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1d85c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d860:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1d864:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d868:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1d86c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d870:			; <UNDEFINED> instruction: 0xffffffff
   1d874:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1d878:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1d87c:	rsbvc	r7, r1, r5, ror #4
   1d880:	andeq	r0, r0, r0
   1d884:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1d888:	strdeq	r9, [r5], -ip
   1d88c:	add	r3, pc, #860	; 0x35c
   1d890:	ldrd	r2, [r3]
   1d894:	cmp	r1, r3
   1d898:	cmpeq	r0, r2
   1d89c:	bhi	1d968 <_start@@Base+0x887c>
   1d8a0:	lsr	r3, r0, #16
   1d8a4:	str	r3, [sp, #24]
   1d8a8:	ldr	r1, [sp, #24]
   1d8ac:	str	r5, [sp, #28]
   1d8b0:	add	r3, pc, #832	; 0x340
   1d8b4:	ldrd	r2, [r3]
   1d8b8:	lsl	r1, r1, #16
   1d8bc:	str	r1, [sp, #24]
   1d8c0:	ldrd	r0, [sp, #24]
   1d8c4:	cmp	r1, r3
   1d8c8:	cmpeq	r0, r2
   1d8cc:	bne	1e468 <_start@@Base+0x937c>
   1d8d0:	sub	r3, r9, sl
   1d8d4:	cmp	r3, #6
   1d8d8:	ble	1fc74 <_start@@Base+0xab88>
   1d8dc:	mov	r3, #6
   1d8e0:	mov	r2, r9
   1d8e4:	mov	r1, sl
   1d8e8:	mov	r0, fp
   1d8ec:	bl	199e0 <_start@@Base+0x48f4>
   1d8f0:	cmp	r0, sl
   1d8f4:	mov	r4, r0
   1d8f8:	beq	1fc74 <_start@@Base+0xab88>
   1d8fc:	mov	ip, #0
   1d900:	mov	r1, r0
   1d904:	mov	r2, r9
   1d908:	add	r3, sp, #344	; 0x158
   1d90c:	mov	r0, fp
   1d910:	str	ip, [sp, #344]	; 0x158
   1d914:	bl	2f9b0 <flatcc_json_parser_float@@Base>
   1d918:	cmp	r0, r4
   1d91c:	mov	sl, r0
   1d920:	beq	2016c <_start@@Base+0xb080>
   1d924:	vldr	s15, [sp, #344]	; 0x158
   1d928:	vcmp.f32	s15, #0.0
   1d92c:	vmrs	APSR_nzcv, fpscr
   1d930:	bne	1d940 <_start@@Base+0x8854>
   1d934:	ldr	r3, [fp, #8]
   1d938:	tst	r3, #2
   1d93c:	beq	1dcb4 <_start@@Base+0x8bc8>
   1d940:	mov	r3, #4
   1d944:	mov	r1, #27
   1d948:	ldr	r0, [fp]
   1d94c:	mov	r2, r3
   1d950:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1d954:	cmp	r0, #0
   1d958:	beq	1d43c <_start@@Base+0x8350>
   1d95c:	ldr	r3, [sp, #344]	; 0x158
   1d960:	str	r3, [r0]
   1d964:	b	1dcb4 <_start@@Base+0x8bc8>
   1d968:	add	r3, pc, #656	; 0x290
   1d96c:	ldrd	r2, [r3]
   1d970:	cmp	r1, r3
   1d974:	cmpeq	r0, r2
   1d978:	beq	1e480 <_start@@Base+0x9394>
   1d97c:	add	r3, pc, #644	; 0x284
   1d980:	ldrd	r2, [r3]
   1d984:	cmp	r1, r3
   1d988:	cmpeq	r0, r2
   1d98c:	bhi	1e76c <_start@@Base+0x9680>
   1d990:	add	r3, pc, #632	; 0x278
   1d994:	ldrd	r2, [r3]
   1d998:	cmp	r1, r3
   1d99c:	cmpeq	r0, r2
   1d9a0:	bne	1f128 <_start@@Base+0xa03c>
   1d9a4:	add	r4, sl, #8
   1d9a8:	mov	r1, r9
   1d9ac:	mov	r0, r4
   1d9b0:	bl	151e0 <_start@@Base+0xf4>
   1d9b4:	add	r3, pc, #604	; 0x25c
   1d9b8:	ldrd	r2, [r3]
   1d9bc:	cmp	r1, r3
   1d9c0:	cmpeq	r0, r2
   1d9c4:	bne	200f4 <_start@@Base+0xb008>
   1d9c8:	mov	r3, #0
   1d9cc:	add	r4, sl, #16
   1d9d0:	mov	r1, r9
   1d9d4:	mov	r0, r4
   1d9d8:	str	r3, [sp, #240]	; 0xf0
   1d9dc:	bl	151e0 <_start@@Base+0xf4>
   1d9e0:	str	r1, [sp, #244]	; 0xf4
   1d9e4:	add	r3, pc, #564	; 0x234
   1d9e8:	ldrd	r2, [r3]
   1d9ec:	ldrd	r0, [sp, #240]	; 0xf0
   1d9f0:	cmp	r1, r3
   1d9f4:	cmpeq	r0, r2
   1d9f8:	bne	201e4 <_start@@Base+0xb0f8>
   1d9fc:	sub	r3, r9, r4
   1da00:	cmp	r3, #4
   1da04:	ble	213d0 <_start@@Base+0xc2e4>
   1da08:	mov	r3, #4
   1da0c:	mov	r2, r9
   1da10:	mov	r1, r4
   1da14:	mov	r0, fp
   1da18:	bl	199e0 <_start@@Base+0x48f4>
   1da1c:	cmp	r4, r0
   1da20:	mov	sl, r0
   1da24:	beq	213cc <_start@@Base+0xc2e0>
   1da28:	cmp	r9, r0
   1da2c:	ldr	r0, [fp]
   1da30:	beq	1da40 <_start@@Base+0x8954>
   1da34:	ldrb	r3, [sl]
   1da38:	cmp	r3, #91	; 0x5b
   1da3c:	beq	2158c <_start@@Base+0xc4a0>
   1da40:	mov	r3, #0
   1da44:	mov	r2, r3
   1da48:	mov	r1, r3
   1da4c:	bl	2654c <flatcc_builder_start_buffer@@Base>
   1da50:	cmp	r0, #0
   1da54:	bne	1d43c <_start@@Base+0x8350>
   1da58:	mov	r1, sl
   1da5c:	add	r3, sp, #324	; 0x144
   1da60:	mov	r2, r9
   1da64:	mov	r0, fp
   1da68:	bl	1d3f0 <_start@@Base+0x8304>
   1da6c:	ldr	r1, [sp, #324]	; 0x144
   1da70:	mov	sl, r0
   1da74:	cmp	r1, #0
   1da78:	beq	1d43c <_start@@Base+0x8350>
   1da7c:	ldr	r0, [fp]
   1da80:	bl	266f8 <flatcc_builder_end_buffer@@Base>
   1da84:	str	r0, [sp, #324]	; 0x144
   1da88:	cmp	r0, #0
   1da8c:	beq	1d43c <_start@@Base+0x8350>
   1da90:	mov	r1, #13
   1da94:	ldr	r0, [fp]
   1da98:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1da9c:	cmp	r0, #0
   1daa0:	beq	1d43c <_start@@Base+0x8350>
   1daa4:	ldr	r3, [sp, #324]	; 0x144
   1daa8:	str	r3, [r0]
   1daac:	b	1dcb4 <_start@@Base+0x8bc8>
   1dab0:	movw	r3, #65535	; 0xffff
   1dab4:	movt	r3, #26735	; 0x686f
   1dab8:	mvn	r2, #0
   1dabc:	cmp	r1, r3
   1dac0:	cmpeq	r0, r2
   1dac4:	bhi	1e388 <_start@@Base+0x929c>
   1dac8:	mov	r1, #0
   1dacc:	add	r3, pc, #340	; 0x154
   1dad0:	ldrd	r2, [r3]
   1dad4:	str	r1, [sp, #96]	; 0x60
   1dad8:	str	r5, [sp, #100]	; 0x64
   1dadc:	ldrd	r0, [sp, #96]	; 0x60
   1dae0:	cmp	r1, r3
   1dae4:	cmpeq	r0, r2
   1dae8:	bne	1eaa0 <_start@@Base+0x99b4>
   1daec:	sub	r3, r9, sl
   1daf0:	cmp	r3, #4
   1daf4:	ble	1fdac <_start@@Base+0xacc0>
   1daf8:	mov	r3, #4
   1dafc:	mov	r2, r9
   1db00:	mov	r1, sl
   1db04:	mov	r0, fp
   1db08:	bl	199e0 <_start@@Base+0x48f4>
   1db0c:	cmp	r0, sl
   1db10:	mov	r4, r0
   1db14:	beq	1fdac <_start@@Base+0xacc0>
   1db18:	mov	r2, #1
   1db1c:	mvn	r3, #0
   1db20:	ldr	r0, [fp]
   1db24:	mov	r1, r2
   1db28:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1db2c:	subs	r5, r0, #0
   1db30:	bne	2153c <_start@@Base+0xc450>
   1db34:	add	r3, sp, #320	; 0x140
   1db38:	mov	r1, r4
   1db3c:	mov	r2, r9
   1db40:	mov	r0, fp
   1db44:	bl	1a3e4 <_start@@Base+0x52f8>
   1db48:	ldr	r3, [sp, #320]	; 0x140
   1db4c:	mov	sl, r0
   1db50:	cmp	r3, #0
   1db54:	beq	20acc <_start@@Base+0xb9e0>
   1db58:	ldr	r8, [pc, #208]	; 1dc30 <_start@@Base+0x8b44>
   1db5c:	b	1db8c <_start@@Base+0x8aa0>
   1db60:	ldrb	ip, [sp, #344]	; 0x158
   1db64:	mov	r1, r0
   1db68:	add	r3, sp, #320	; 0x140
   1db6c:	mov	r2, r9
   1db70:	mov	r0, fp
   1db74:	strb	ip, [r4]
   1db78:	bl	194f8 <_start@@Base+0x440c>
   1db7c:	ldr	r3, [sp, #320]	; 0x140
   1db80:	mov	sl, r0
   1db84:	cmp	r3, #0
   1db88:	beq	20acc <_start@@Base+0xb9e0>
   1db8c:	mov	r1, #1
   1db90:	ldr	r0, [fp]
   1db94:	strb	r5, [sp, #344]	; 0x158
   1db98:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1db9c:	subs	r4, r0, #0
   1dba0:	mov	r1, sl
   1dba4:	add	r3, sp, #344	; 0x158
   1dba8:	mov	r2, r9
   1dbac:	mov	r0, fp
   1dbb0:	beq	1d43c <_start@@Base+0x8350>
   1dbb4:	bl	181d8 <_start@@Base+0x30ec>
   1dbb8:	cmp	r0, sl
   1dbbc:	bne	1db60 <_start@@Base+0x8a74>
   1dbc0:	add	r1, sp, #344	; 0x158
   1dbc4:	mov	r3, r8
   1dbc8:	mov	r2, r9
   1dbcc:	mov	r0, fp
   1dbd0:	str	r1, [sp]
   1dbd4:	mov	r1, sl
   1dbd8:	bl	1b820 <_start@@Base+0x6734>
   1dbdc:	cmp	r9, r0
   1dbe0:	cmpne	r0, sl
   1dbe4:	bne	1db60 <_start@@Base+0x8a74>
   1dbe8:	mov	sl, r0
   1dbec:	b	1d43c <_start@@Base+0x8350>
   1dbf0:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1dbf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbf8:	ldrtvs	r0, [r3], -r0
   1dbfc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dc00:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1dc04:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dc08:	svcvs	0x00725f6e
   1dc0c:			; <UNDEFINED> instruction: 0x76656374
   1dc10:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1dc14:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dc18:	cmnvs	r4, r5, ror r2
   1dc1c:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1dc20:	andeq	r0, r0, r0
   1dc24:			; <UNDEFINED> instruction: 0x66666572
   1dc28:	andeq	r0, r0, r0
   1dc2c:			; <UNDEFINED> instruction: 0x666c6578
   1dc30:	andeq	r9, r5, ip, lsl #2
   1dc34:	and	r1, r0, #-16777216	; 0xff000000
   1dc38:	add	r3, pc, #872	; 0x368
   1dc3c:	ldrd	r2, [r3]
   1dc40:	sub	r8, r9, sl
   1dc44:	str	r1, [sp, #48]	; 0x30
   1dc48:	str	r5, [sp, #52]	; 0x34
   1dc4c:	ldrd	r0, [sp, #48]	; 0x30
   1dc50:	cmp	r1, r3
   1dc54:	cmpeq	r0, r2
   1dc58:	beq	1e548 <_start@@Base+0x945c>
   1dc5c:	cmp	r8, #4
   1dc60:	ble	1f744 <_start@@Base+0xa658>
   1dc64:	mov	r3, #4
   1dc68:	mov	r2, r9
   1dc6c:	mov	r1, sl
   1dc70:	mov	r0, fp
   1dc74:	bl	199e0 <_start@@Base+0x48f4>
   1dc78:	cmp	r0, sl
   1dc7c:	beq	1f744 <_start@@Base+0xa658>
   1dc80:	ldr	ip, [sp, #328]	; 0x148
   1dc84:	mov	lr, #8
   1dc88:	movw	r3, #16000	; 0x3e80
   1dc8c:	movt	r3, #2
   1dc90:	mov	r1, r0
   1dc94:	mov	r2, r9
   1dc98:	mov	r0, fp
   1dc9c:	str	lr, [sp]
   1dca0:	str	ip, [sp, #4]
   1dca4:	str	r3, [sp, #8]
   1dca8:	mov	r3, #0
   1dcac:	bl	322b0 <flatcc_json_parser_union@@Base>
   1dcb0:	mov	sl, r0
   1dcb4:	mov	r1, sl
   1dcb8:	add	r3, sp, #320	; 0x140
   1dcbc:	mov	r2, r9
   1dcc0:	mov	r0, fp
   1dcc4:	bl	193b0 <_start@@Base+0x42c4>
   1dcc8:	ldr	r3, [sp, #320]	; 0x140
   1dccc:	mov	sl, r0
   1dcd0:	cmp	r3, #0
   1dcd4:	bne	1d4c8 <_start@@Base+0x83dc>
   1dcd8:	ldr	r3, [fp, #24]
   1dcdc:	cmp	r3, #0
   1dce0:	bne	1d43c <_start@@Base+0x8350>
   1dce4:	mov	r1, #3
   1dce8:	ldr	r0, [fp]
   1dcec:	bl	28820 <flatcc_builder_check_required_field@@Base>
   1dcf0:	cmp	r0, #0
   1dcf4:	mov	r1, sl
   1dcf8:	beq	20ccc <_start@@Base+0xbbe0>
   1dcfc:	mov	r2, r9
   1dd00:	mov	r0, fp
   1dd04:	ldr	r3, [sp, #328]	; 0x148
   1dd08:	bl	32224 <flatcc_json_parser_finalize_unions@@Base>
   1dd0c:	mov	r4, r0
   1dd10:	ldr	r0, [fp]
   1dd14:	bl	289b8 <flatcc_builder_end_table@@Base>
   1dd18:	ldr	r3, [sp, #68]	; 0x44
   1dd1c:	cmp	r0, #0
   1dd20:	moveq	sl, r4
   1dd24:	str	r0, [r3]
   1dd28:	bne	1d454 <_start@@Base+0x8368>
   1dd2c:	b	1d43c <_start@@Base+0x8350>
   1dd30:	add	r4, sl, #8
   1dd34:	mov	r1, r9
   1dd38:	mov	r0, r4
   1dd3c:	bl	151e0 <_start@@Base+0xf4>
   1dd40:	add	r3, pc, #616	; 0x268
   1dd44:	ldrd	r2, [r3]
   1dd48:	cmp	r1, r3
   1dd4c:	cmpeq	r0, r2
   1dd50:	bhi	1e628 <_start@@Base+0x953c>
   1dd54:	add	r3, pc, #604	; 0x25c
   1dd58:	ldrd	r2, [r3]
   1dd5c:	cmp	r1, r3
   1dd60:	cmpeq	r0, r2
   1dd64:	bne	1ead0 <_start@@Base+0x99e4>
   1dd68:	sub	r3, r9, r4
   1dd6c:	cmp	r3, #8
   1dd70:	ble	1fdc8 <_start@@Base+0xacdc>
   1dd74:	mov	r2, r9
   1dd78:	mov	r1, r4
   1dd7c:	mov	r0, fp
   1dd80:	bl	19728 <_start@@Base+0x463c>
   1dd84:	cmp	r4, r0
   1dd88:	mov	sl, r0
   1dd8c:	beq	1fdc4 <_start@@Base+0xacd8>
   1dd90:	mov	r2, #1
   1dd94:	mvn	r3, #0
   1dd98:	ldr	r0, [fp]
   1dd9c:	mov	r1, r2
   1dda0:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1dda4:	cmp	r0, #0
   1dda8:	bne	1d43c <_start@@Base+0x8350>
   1ddac:	mov	r1, sl
   1ddb0:	add	r3, sp, #320	; 0x140
   1ddb4:	mov	r2, r9
   1ddb8:	mov	r0, fp
   1ddbc:	bl	1a3e4 <_start@@Base+0x52f8>
   1ddc0:	ldr	r3, [sp, #320]	; 0x140
   1ddc4:	mov	sl, r0
   1ddc8:	cmp	r3, #0
   1ddcc:	beq	20b8c <_start@@Base+0xbaa0>
   1ddd0:	movw	r8, #10788	; 0x2a24
   1ddd4:	movt	r8, #4
   1ddd8:	b	1de04 <_start@@Base+0x8d18>
   1dddc:	add	r3, sp, #320	; 0x140
   1dde0:	mov	r1, r4
   1dde4:	strb	r2, [r5]
   1dde8:	mov	r0, fp
   1ddec:	mov	r2, r9
   1ddf0:	bl	194f8 <_start@@Base+0x440c>
   1ddf4:	ldr	r3, [sp, #320]	; 0x140
   1ddf8:	mov	sl, r0
   1ddfc:	cmp	r3, #0
   1de00:	beq	20b8c <_start@@Base+0xbaa0>
   1de04:	mov	r3, #0
   1de08:	mov	r1, #1
   1de0c:	ldr	r0, [fp]
   1de10:	strb	r3, [sp, #340]	; 0x154
   1de14:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1de18:	subs	r5, r0, #0
   1de1c:	beq	1d43c <_start@@Base+0x8350>
   1de20:	sub	r3, r9, sl
   1de24:	cmp	r3, #3
   1de28:	ble	1de64 <_start@@Base+0x8d78>
   1de2c:	ldrb	r2, [sl]
   1de30:	cmp	r2, #116	; 0x74
   1de34:	beq	207a8 <_start@@Base+0xb6bc>
   1de38:	cmp	r3, #4
   1de3c:	beq	1de64 <_start@@Base+0x8d78>
   1de40:	mov	r2, #5
   1de44:	mov	r1, r8
   1de48:	mov	r0, sl
   1de4c:	bl	14530 <memcmp@plt>
   1de50:	cmp	r0, #0
   1de54:	moveq	r2, r0
   1de58:	addeq	r4, sl, #5
   1de5c:	strbeq	r0, [sp, #340]	; 0x154
   1de60:	beq	1de8c <_start@@Base+0x8da0>
   1de64:	mov	r2, r9
   1de68:	add	r3, sp, #344	; 0x158
   1de6c:	mov	r1, sl
   1de70:	mov	r0, fp
   1de74:	bl	181d8 <_start@@Base+0x30ec>
   1de78:	ldrb	r2, [sp, #344]	; 0x158
   1de7c:	mov	r4, r0
   1de80:	adds	r2, r2, #0
   1de84:	movne	r2, #1
   1de88:	strb	r2, [sp, #340]	; 0x154
   1de8c:	cmp	sl, r4
   1de90:	bne	1dddc <_start@@Base+0x8cf0>
   1de94:	add	ip, sp, #340	; 0x154
   1de98:	ldr	r3, [pc, #304]	; 1dfd0 <_start@@Base+0x8ee4>
   1de9c:	mov	r2, r9
   1dea0:	mov	r1, r4
   1dea4:	mov	r0, fp
   1dea8:	str	ip, [sp]
   1deac:	bl	1aa08 <_start@@Base+0x591c>
   1deb0:	cmp	r9, r0
   1deb4:	cmpne	r0, r4
   1deb8:	mov	sl, r0
   1debc:	beq	1d43c <_start@@Base+0x8350>
   1dec0:	ldrb	r2, [sp, #340]	; 0x154
   1dec4:	mov	r4, r0
   1dec8:	b	1dddc <_start@@Base+0x8cf0>
   1decc:	add	r3, pc, #236	; 0xec
   1ded0:	ldrd	r2, [r3]
   1ded4:	cmp	r1, r3
   1ded8:	cmpeq	r0, r2
   1dedc:	bhi	1e8e8 <_start@@Base+0x97fc>
   1dee0:	add	r3, pc, #224	; 0xe0
   1dee4:	ldrd	r2, [r3]
   1dee8:	cmp	r1, r3
   1deec:	cmpeq	r0, r2
   1def0:	bne	1f0f8 <_start@@Base+0xa00c>
   1def4:	add	r5, sl, #8
   1def8:	mov	r1, r9
   1defc:	mov	r0, r5
   1df00:	mov	r4, #0
   1df04:	bl	151e0 <_start@@Base+0xf4>
   1df08:	and	r3, r1, #-16777216	; 0xff000000
   1df0c:	str	r4, [sp, #192]	; 0xc0
   1df10:	str	r3, [sp, #196]	; 0xc4
   1df14:	ldrd	r2, [sp, #192]	; 0xc0
   1df18:	cmp	r3, #2030043136	; 0x79000000
   1df1c:	cmpeq	r2, #0
   1df20:	bne	2010c <_start@@Base+0xb020>
   1df24:	sub	r3, r9, r5
   1df28:	cmp	r3, #1
   1df2c:	ble	2045c <_start@@Base+0xb370>
   1df30:	mov	r2, r9
   1df34:	mov	r1, r5
   1df38:	mov	r0, fp
   1df3c:	bl	19810 <_start@@Base+0x4724>
   1df40:	cmp	r5, r0
   1df44:	mov	sl, r0
   1df48:	beq	20458 <_start@@Base+0xb36c>
   1df4c:	mov	r1, #3
   1df50:	ldr	r0, [fp]
   1df54:	str	r4, [sp, #324]	; 0x144
   1df58:	bl	28038 <flatcc_builder_start_table@@Base>
   1df5c:	cmp	r0, r4
   1df60:	bne	20a88 <_start@@Base+0xb99c>
   1df64:	mov	r1, sl
   1df68:	add	r3, sp, #332	; 0x14c
   1df6c:	mov	r2, r9
   1df70:	mov	r0, fp
   1df74:	bl	19ae0 <_start@@Base+0x49f4>
   1df78:	ldr	r3, [sp, #332]	; 0x14c
   1df7c:	mov	sl, r0
   1df80:	cmp	r3, r4
   1df84:	beq	20e5c <_start@@Base+0xbd70>
   1df88:	mov	r8, r4
   1df8c:	add	r3, sp, #280	; 0x118
   1df90:	strd	r6, [sp, #16]
   1df94:	movt	r8, #65535	; 0xffff
   1df98:	ldrd	r4, [r3]
   1df9c:	mov	r6, r8
   1dfa0:	b	1e114 <_start@@Base+0x9028>
   1dfa4:	nop	{0}
   1dfa8:	strcc	r0, [r0], #-0
   1dfac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dfb0:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1dfb4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1dfb8:	svcvs	0x006f6c73
   1dfbc:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1dfc0:	ldrbvs	pc, [pc, #4095]!	; 1efc7 <_start@@Base+0x9edb>	; <UNPREDICTABLE>
   1dfc4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dfc8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1dfcc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dfd0:	andeq	r9, r5, ip, lsl #3
   1dfd4:	and	r3, r0, #-16777216	; 0xff000000
   1dfd8:	str	r3, [sp, #112]	; 0x70
   1dfdc:	str	r1, [sp, #116]	; 0x74
   1dfe0:	add	r1, pc, #880	; 0x370
   1dfe4:	ldrd	r0, [r1]
   1dfe8:	ldrd	r2, [sp, #112]	; 0x70
   1dfec:	cmp	r3, r1
   1dff0:	cmpeq	r2, r0
   1dff4:	bne	20588 <_start@@Base+0xb49c>
   1dff8:	sub	r3, r9, sl
   1dffc:	cmp	r3, #5
   1e000:	ble	20588 <_start@@Base+0xb49c>
   1e004:	mov	r2, r9
   1e008:	mov	r1, sl
   1e00c:	mov	r0, fp
   1e010:	bl	19640 <_start@@Base+0x4554>
   1e014:	cmp	r0, sl
   1e018:	mov	r8, r0
   1e01c:	beq	20588 <_start@@Base+0xb49c>
   1e020:	add	r2, sp, #344	; 0x158
   1e024:	cmp	r9, r0
   1e028:	mov	r1, #0
   1e02c:	mov	r0, #0
   1e030:	mov	r3, #0
   1e034:	strd	r0, [r2]
   1e038:	add	r2, sp, #316	; 0x13c
   1e03c:	add	r2, r2, #2
   1e040:	str	r3, [sp, #340]	; 0x154
   1e044:	strh	r3, [r2]
   1e048:	beq	20a6c <_start@@Base+0xb980>
   1e04c:	add	r0, sp, #344	; 0x158
   1e050:	add	r3, sp, #340	; 0x154
   1e054:	mov	r2, r9
   1e058:	mov	r1, r8
   1e05c:	str	r0, [sp]
   1e060:	mov	r0, fp
   1e064:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1e068:	cmp	r8, r0
   1e06c:	mov	r7, r0
   1e070:	bne	20b00 <_start@@Base+0xba14>
   1e074:	add	ip, sp, #316	; 0x13c
   1e078:	ldr	r3, [pc, #772]	; 1e384 <_start@@Base+0x9298>
   1e07c:	mov	r2, r9
   1e080:	add	ip, ip, #2
   1e084:	mov	r1, r7
   1e088:	mov	r0, fp
   1e08c:	str	ip, [sp]
   1e090:	bl	1add0 <_start@@Base+0x5ce4>
   1e094:	cmp	r9, r0
   1e098:	cmpne	r0, r7
   1e09c:	mov	sl, r0
   1e0a0:	beq	21384 <_start@@Base+0xc298>
   1e0a4:	add	r3, sp, #316	; 0x13c
   1e0a8:	add	r3, r3, #2
   1e0ac:	ldrh	r2, [r3]
   1e0b0:	cmp	r2, #0
   1e0b4:	bne	1e0c4 <_start@@Base+0x8fd8>
   1e0b8:	ldr	r3, [fp, #8]
   1e0bc:	tst	r3, #2
   1e0c0:	beq	1e0f0 <_start@@Base+0x9004>
   1e0c4:	mov	r3, #2
   1e0c8:	ldr	r0, [fp]
   1e0cc:	mov	r2, r3
   1e0d0:	mov	r1, r3
   1e0d4:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1e0d8:	cmp	r0, #0
   1e0dc:	beq	21384 <_start@@Base+0xc298>
   1e0e0:	add	r3, sp, #316	; 0x13c
   1e0e4:	add	r3, r3, #2
   1e0e8:	ldrh	r3, [r3]
   1e0ec:	strh	r3, [r0]
   1e0f0:	mov	r1, sl
   1e0f4:	add	r3, sp, #332	; 0x14c
   1e0f8:	mov	r2, r9
   1e0fc:	mov	r0, fp
   1e100:	bl	193b0 <_start@@Base+0x42c4>
   1e104:	ldr	r3, [sp, #332]	; 0x14c
   1e108:	mov	sl, r0
   1e10c:	cmp	r3, #0
   1e110:	beq	20e50 <_start@@Base+0xbd64>
   1e114:	cmp	r9, sl
   1e118:	beq	1e144 <_start@@Base+0x9058>
   1e11c:	ldrb	r3, [sl]
   1e120:	cmp	r3, #34	; 0x22
   1e124:	moveq	r3, #0
   1e128:	addeq	sl, sl, #1
   1e12c:	streq	r3, [fp, #12]
   1e130:	beq	1e144 <_start@@Base+0x9058>
   1e134:	cmp	r3, #46	; 0x2e
   1e138:	movne	r3, #1
   1e13c:	strne	r3, [fp, #12]
   1e140:	beq	20880 <_start@@Base+0xb794>
   1e144:	mov	r1, r9
   1e148:	mov	r0, sl
   1e14c:	bl	151e0 <_start@@Base+0xf4>
   1e150:	movw	r3, #65535	; 0xffff
   1e154:	movt	r3, #26979	; 0x6963
   1e158:	mvn	r2, #0
   1e15c:	cmp	r1, r3
   1e160:	cmpeq	r0, r2
   1e164:	bls	1dfd4 <_start@@Base+0x8ee8>
   1e168:	add	r3, pc, #496	; 0x1f0
   1e16c:	ldrd	r2, [r3]
   1e170:	bic	r5, r1, #255	; 0xff
   1e174:	mov	r8, #0
   1e178:	mov	r4, r8
   1e17c:	cmp	r5, r3
   1e180:	cmpeq	r8, r2
   1e184:	beq	20708 <_start@@Base+0xb61c>
   1e188:	and	r3, r1, r6
   1e18c:	str	r8, [sp, #152]	; 0x98
   1e190:	mov	r1, #0
   1e194:	movt	r1, #26980	; 0x6964
   1e198:	mov	r0, #0
   1e19c:	str	r3, [sp, #156]	; 0x9c
   1e1a0:	ldrd	r2, [sp, #152]	; 0x98
   1e1a4:	cmp	r3, r1
   1e1a8:	cmpeq	r2, r0
   1e1ac:	bne	20588 <_start@@Base+0xb49c>
   1e1b0:	sub	r3, r9, sl
   1e1b4:	cmp	r3, #2
   1e1b8:	ble	20588 <_start@@Base+0xb49c>
   1e1bc:	mov	r1, sl
   1e1c0:	mov	r2, r9
   1e1c4:	mov	r0, fp
   1e1c8:	bl	198f8 <_start@@Base+0x480c>
   1e1cc:	cmp	r0, sl
   1e1d0:	mov	r1, r0
   1e1d4:	beq	20588 <_start@@Base+0xb49c>
   1e1d8:	add	r3, sp, #336	; 0x150
   1e1dc:	mov	r2, r9
   1e1e0:	mov	r0, fp
   1e1e4:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   1e1e8:	ldr	r3, [sp, #336]	; 0x150
   1e1ec:	mov	sl, r0
   1e1f0:	cmp	r3, #0
   1e1f4:	beq	21384 <_start@@Base+0xc298>
   1e1f8:	mov	r1, r8
   1e1fc:	ldr	r0, [fp]
   1e200:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1e204:	cmp	r0, #0
   1e208:	beq	21384 <_start@@Base+0xc298>
   1e20c:	ldr	r3, [sp, #336]	; 0x150
   1e210:	str	r3, [r0]
   1e214:	b	1e0f0 <_start@@Base+0x9004>
   1e218:	add	r3, pc, #328	; 0x148
   1e21c:	ldrd	r2, [r3]
   1e220:	cmp	r1, r3
   1e224:	cmpeq	r0, r2
   1e228:	beq	1fc8c <_start@@Base+0xaba0>
   1e22c:	ldr	r1, [sp, #20]
   1e230:	mov	r4, #0
   1e234:	str	r4, [sp, #144]	; 0x90
   1e238:	add	r3, pc, #304	; 0x130
   1e23c:	ldrd	r2, [r3]
   1e240:	bic	r1, r1, #255	; 0xff
   1e244:	str	r1, [sp, #148]	; 0x94
   1e248:	ldrd	r0, [sp, #144]	; 0x90
   1e24c:	cmp	r1, r3
   1e250:	cmpeq	r0, r2
   1e254:	bne	1f0e0 <_start@@Base+0x9ff4>
   1e258:	sub	r3, r9, sl
   1e25c:	cmp	r3, #3
   1e260:	ble	20a40 <_start@@Base+0xb954>
   1e264:	mov	r3, #3
   1e268:	mov	r2, r9
   1e26c:	mov	r1, sl
   1e270:	mov	r0, fp
   1e274:	bl	199e0 <_start@@Base+0x48f4>
   1e278:	cmp	r0, sl
   1e27c:	mov	r5, r0
   1e280:	beq	20a40 <_start@@Base+0xb954>
   1e284:	mov	r1, r4
   1e288:	mov	r3, #16
   1e28c:	ldr	r0, [fp]
   1e290:	mov	r2, #32
   1e294:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1e298:	subs	r8, r0, #0
   1e29c:	beq	2169c <_start@@Base+0xc5b0>
   1e2a0:	add	r3, sp, #336	; 0x150
   1e2a4:	mov	r1, r5
   1e2a8:	mov	r2, r9
   1e2ac:	mov	r0, fp
   1e2b0:	bl	19ae0 <_start@@Base+0x49f4>
   1e2b4:	ldr	r3, [sp, #336]	; 0x150
   1e2b8:	mov	r4, r0
   1e2bc:	cmp	r3, #0
   1e2c0:	beq	21508 <_start@@Base+0xc41c>
   1e2c4:	vldr	s18, [pc, #180]	; 1e380 <_start@@Base+0x9294>
   1e2c8:	vldr	d8, [pc, #168]	; 1e378 <_start@@Base+0x928c>
   1e2cc:	cmp	r9, r4
   1e2d0:	beq	1e2fc <_start@@Base+0x9210>
   1e2d4:	ldrb	r3, [r4]
   1e2d8:	cmp	r3, #34	; 0x22
   1e2dc:	moveq	r3, #0
   1e2e0:	addeq	r4, r4, #1
   1e2e4:	streq	r3, [fp, #12]
   1e2e8:	beq	1e2fc <_start@@Base+0x9210>
   1e2ec:	cmp	r3, #46	; 0x2e
   1e2f0:	movne	r3, #1
   1e2f4:	strne	r3, [fp, #12]
   1e2f8:	beq	1f700 <_start@@Base+0xa614>
   1e2fc:	sub	ip, r9, r4
   1e300:	cmp	ip, #8
   1e304:	bhi	1ee10 <_start@@Base+0x9d24>
   1e308:	sub	r3, ip, #1
   1e30c:	cmp	r3, #7
   1e310:	ldrls	pc, [pc, r3, lsl #2]
   1e314:	b	1f40c <_start@@Base+0xa320>
   1e318:	andeq	lr, r1, r8, ror #31
   1e31c:	andeq	lr, r1, ip, lsl #31
   1e320:	andeq	lr, r1, r0, lsl #31
   1e324:	andeq	lr, r1, r4, lsr #31
   1e328:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1e32c:	andeq	lr, r1, r4, ror pc
   1e330:	andeq	lr, r1, r8, ror #30
   1e334:	andeq	lr, r1, r0, lsl lr
   1e338:	mov	r1, sl
   1e33c:	mov	r3, #5
   1e340:	mov	r2, r9
   1e344:	mov	r0, fp
   1e348:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1e34c:	mov	sl, r0
   1e350:	b	1d4f8 <_start@@Base+0x840c>
   1e354:	nop	{0}
   1e358:	strvc	r0, [r0], #-0
   1e35c:	cmnvs	pc, #461373440	; 0x1b800000
   1e360:	andeq	r0, r0, r0
   1e364:	strbtvc	r6, [r1], -r0, lsl #24
   1e368:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1e36c:	rsbvc	r7, r1, r5, ror #4
   1e370:	andeq	r0, r0, r0
   1e374:	rsbvc	r7, pc, r0, lsl #6
	...
   1e384:			; <UNDEFINED> instruction: 0x000591bc
   1e388:	add	r3, pc, #920	; 0x398
   1e38c:	ldrd	r2, [r3]
   1e390:	cmp	r1, r3
   1e394:	cmpeq	r0, r2
   1e398:	bhi	1e9b0 <_start@@Base+0x98c4>
   1e39c:	lsr	r3, r1, #16
   1e3a0:	mov	r8, #0
   1e3a4:	mov	r2, #0
   1e3a8:	str	r8, [sp, #120]	; 0x78
   1e3ac:	str	r3, [sp, #124]	; 0x7c
   1e3b0:	mov	r3, #0
   1e3b4:	movt	r3, #26736	; 0x6870
   1e3b8:	ldr	r1, [sp, #124]	; 0x7c
   1e3bc:	lsl	r1, r1, #16
   1e3c0:	str	r1, [sp, #124]	; 0x7c
   1e3c4:	ldrd	r0, [sp, #120]	; 0x78
   1e3c8:	cmp	r1, r3
   1e3cc:	cmpeq	r0, r2
   1e3d0:	bne	1fde0 <_start@@Base+0xacf4>
   1e3d4:	sub	r3, r9, sl
   1e3d8:	cmp	r3, #2
   1e3dc:	ble	20b40 <_start@@Base+0xba54>
   1e3e0:	mov	r2, r9
   1e3e4:	mov	r1, sl
   1e3e8:	mov	r0, fp
   1e3ec:	bl	198f8 <_start@@Base+0x480c>
   1e3f0:	cmp	r0, sl
   1e3f4:	mov	r4, r0
   1e3f8:	beq	20b40 <_start@@Base+0xba54>
   1e3fc:	add	r3, sp, #344	; 0x158
   1e400:	mov	r1, r0
   1e404:	mov	r2, r9
   1e408:	mov	r0, fp
   1e40c:	strh	r8, [r3]
   1e410:	bl	1837c <_start@@Base+0x3290>
   1e414:	cmp	r0, r4
   1e418:	mov	sl, r0
   1e41c:	beq	20520 <_start@@Base+0xb434>
   1e420:	add	r3, sp, #344	; 0x158
   1e424:	ldrsh	r3, [r3]
   1e428:	cmp	r3, #100	; 0x64
   1e42c:	bne	1e43c <_start@@Base+0x9350>
   1e430:	ldr	r3, [fp, #8]
   1e434:	tst	r3, #2
   1e438:	beq	1dcb4 <_start@@Base+0x8bc8>
   1e43c:	mov	r3, #2
   1e440:	ldr	r0, [fp]
   1e444:	mov	r2, r3
   1e448:	mov	r1, r3
   1e44c:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1e450:	cmp	r0, #0
   1e454:	beq	1d43c <_start@@Base+0x8350>
   1e458:	add	r3, sp, #344	; 0x158
   1e45c:	ldrsh	r3, [r3]
   1e460:	strh	r3, [r0]
   1e464:	b	1dcb4 <_start@@Base+0x8bc8>
   1e468:	mov	r1, sl
   1e46c:	mov	r2, r9
   1e470:	mov	r0, fp
   1e474:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1e478:	mov	sl, r0
   1e47c:	b	1dcb4 <_start@@Base+0x8bc8>
   1e480:	add	sl, sl, #8
   1e484:	mov	r1, r9
   1e488:	mov	r0, sl
   1e48c:	bl	151e0 <_start@@Base+0xf4>
   1e490:	add	r3, pc, #664	; 0x298
   1e494:	ldrd	r2, [r3]
   1e498:	cmp	r1, r3
   1e49c:	cmpeq	r0, r2
   1e4a0:	bhi	1ed44 <_start@@Base+0x9c58>
   1e4a4:	add	r3, pc, #652	; 0x28c
   1e4a8:	ldrd	r2, [r3]
   1e4ac:	cmp	r1, r3
   1e4b0:	cmpeq	r0, r2
   1e4b4:	bne	200dc <_start@@Base+0xaff0>
   1e4b8:	sub	r3, r9, sl
   1e4bc:	cmp	r3, #8
   1e4c0:	ble	20394 <_start@@Base+0xb2a8>
   1e4c4:	mov	r2, r9
   1e4c8:	mov	r1, sl
   1e4cc:	mov	r0, fp
   1e4d0:	bl	19728 <_start@@Base+0x463c>
   1e4d4:	cmp	sl, r0
   1e4d8:	mov	r4, r0
   1e4dc:	beq	20394 <_start@@Base+0xb2a8>
   1e4e0:	mov	ip, #0
   1e4e4:	mov	r1, r0
   1e4e8:	add	r3, sp, #344	; 0x158
   1e4ec:	mov	r2, r9
   1e4f0:	mov	r0, fp
   1e4f4:	str	ip, [sp, #344]	; 0x158
   1e4f8:	bl	18298 <_start@@Base+0x31ac>
   1e4fc:	cmp	r0, r4
   1e500:	mov	sl, r0
   1e504:	beq	21354 <_start@@Base+0xc268>
   1e508:	ldr	r3, [sp, #344]	; 0x158
   1e50c:	cmp	r3, #0
   1e510:	bne	1e520 <_start@@Base+0x9434>
   1e514:	ldr	r3, [fp, #8]
   1e518:	tst	r3, #2
   1e51c:	beq	1dcb4 <_start@@Base+0x8bc8>
   1e520:	mov	r3, #4
   1e524:	mov	r1, #16
   1e528:	ldr	r0, [fp]
   1e52c:	mov	r2, r3
   1e530:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1e534:	cmp	r0, #0
   1e538:	beq	1d43c <_start@@Base+0x8350>
   1e53c:	ldr	r3, [sp, #344]	; 0x158
   1e540:	str	r3, [r0]
   1e544:	b	1dcb4 <_start@@Base+0x8bc8>
   1e548:	cmp	r8, #5
   1e54c:	ble	1f140 <_start@@Base+0xa054>
   1e550:	mov	r2, r9
   1e554:	mov	r1, sl
   1e558:	mov	r0, fp
   1e55c:	bl	19640 <_start@@Base+0x4554>
   1e560:	cmp	r0, sl
   1e564:	mov	r4, r0
   1e568:	beq	1f140 <_start@@Base+0xa054>
   1e56c:	mvn	r3, #-1073741824	; 0xc0000000
   1e570:	mov	r2, #2
   1e574:	ldr	r0, [fp]
   1e578:	mov	r1, #4
   1e57c:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1e580:	cmp	r0, #0
   1e584:	bne	21500 <_start@@Base+0xc414>
   1e588:	add	r3, sp, #320	; 0x140
   1e58c:	mov	r1, r4
   1e590:	mov	r2, r9
   1e594:	mov	r0, fp
   1e598:	bl	1a3e4 <_start@@Base+0x52f8>
   1e59c:	ldr	r3, [sp, #320]	; 0x140
   1e5a0:	mov	sl, r0
   1e5a4:	cmp	r3, #0
   1e5a8:	beq	1e5f4 <_start@@Base+0x9508>
   1e5ac:	mov	r1, #1
   1e5b0:	ldr	r0, [fp]
   1e5b4:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1e5b8:	subs	r3, r0, #0
   1e5bc:	mov	r1, sl
   1e5c0:	mov	r2, r9
   1e5c4:	mov	r0, fp
   1e5c8:	beq	1d43c <_start@@Base+0x8350>
   1e5cc:	bl	1ca3c <_start@@Base+0x7950>
   1e5d0:	mov	r1, r0
   1e5d4:	add	r3, sp, #320	; 0x140
   1e5d8:	mov	r2, r9
   1e5dc:	mov	r0, fp
   1e5e0:	bl	194f8 <_start@@Base+0x440c>
   1e5e4:	ldr	r3, [sp, #320]	; 0x140
   1e5e8:	mov	sl, r0
   1e5ec:	cmp	r3, #0
   1e5f0:	bne	1e5ac <_start@@Base+0x94c0>
   1e5f4:	ldr	r0, [fp]
   1e5f8:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   1e5fc:	cmp	r0, #0
   1e600:	str	r0, [sp, #324]	; 0x144
   1e604:	beq	1d43c <_start@@Base+0x8350>
   1e608:	mov	r1, #9
   1e60c:	ldr	r0, [fp]
   1e610:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1e614:	cmp	r0, #0
   1e618:	beq	1d43c <_start@@Base+0x8350>
   1e61c:	ldr	r3, [sp, #324]	; 0x144
   1e620:	str	r3, [r0]
   1e624:	b	1dcb4 <_start@@Base+0x8bc8>
   1e628:	add	r3, pc, #272	; 0x110
   1e62c:	ldrd	r2, [r3]
   1e630:	cmp	r1, r3
   1e634:	cmpeq	r0, r2
   1e638:	beq	1f158 <_start@@Base+0xa06c>
   1e63c:	add	r3, pc, #260	; 0x104
   1e640:	ldrd	r2, [r3]
   1e644:	cmp	r1, r3
   1e648:	cmpeq	r0, r2
   1e64c:	bne	1fdf8 <_start@@Base+0xad0c>
   1e650:	mov	r3, #0
   1e654:	add	r4, sl, #16
   1e658:	mov	r1, r9
   1e65c:	mov	r0, r4
   1e660:	str	r3, [sp, #208]	; 0xd0
   1e664:	bl	151e0 <_start@@Base+0xf4>
   1e668:	and	r3, r1, #-16777216	; 0xff000000
   1e66c:	str	r3, [sp, #212]	; 0xd4
   1e670:	ldrd	r2, [sp, #208]	; 0xd0
   1e674:	cmp	r3, #1929379840	; 0x73000000
   1e678:	cmpeq	r2, #0
   1e67c:	bne	2019c <_start@@Base+0xb0b0>
   1e680:	sub	r3, r9, r4
   1e684:	cmp	r3, #1
   1e688:	ble	20f98 <_start@@Base+0xbeac>
   1e68c:	mov	r2, r9
   1e690:	mov	r1, r4
   1e694:	mov	r0, fp
   1e698:	bl	19810 <_start@@Base+0x4724>
   1e69c:	cmp	r4, r0
   1e6a0:	mov	sl, r0
   1e6a4:	bne	20fa0 <_start@@Base+0xbeb4>
   1e6a8:	mov	r1, sl
   1e6ac:	mov	r2, r9
   1e6b0:	mov	r0, fp
   1e6b4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1e6b8:	mov	sl, r0
   1e6bc:	b	1dcb4 <_start@@Base+0x8bc8>
   1e6c0:	sub	r3, r9, sl
   1e6c4:	cmp	r3, #5
   1e6c8:	ble	1f2ac <_start@@Base+0xa1c0>
   1e6cc:	mov	r1, sl
   1e6d0:	mov	r2, r9
   1e6d4:	mov	r0, fp
   1e6d8:	bl	19640 <_start@@Base+0x4554>
   1e6dc:	cmp	r0, sl
   1e6e0:	mov	r1, r0
   1e6e4:	beq	1f2ac <_start@@Base+0xa1c0>
   1e6e8:	add	r3, sp, #324	; 0x144
   1e6ec:	mov	r2, r9
   1e6f0:	mov	r0, fp
   1e6f4:	bl	1d3f0 <_start@@Base+0x8304>
   1e6f8:	ldr	r3, [sp, #324]	; 0x144
   1e6fc:	mov	sl, r0
   1e700:	cmp	r3, #0
   1e704:	beq	1d43c <_start@@Base+0x8350>
   1e708:	mov	r1, #12
   1e70c:	ldr	r0, [fp]
   1e710:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1e714:	cmp	r0, #0
   1e718:	beq	1d43c <_start@@Base+0x8350>
   1e71c:	ldr	r3, [sp, #324]	; 0x144
   1e720:	str	r3, [r0]
   1e724:	b	1dcb4 <_start@@Base+0x8bc8>
   1e728:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1e72c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1e730:			; <UNDEFINED> instruction: 0x666e7630
   1e734:	teqvc	r6, #1593835520	; 0x5f000000
   1e738:			; <UNDEFINED> instruction: 0x666e7631
   1e73c:	teqvc	r3, #-268435451	; 0xf0000005
   1e740:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1e744:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1e748:	cmnvs	r2, r5, ror #24
   1e74c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1e750:	svcvs	0x00725f6f
   1e754:			; <UNDEFINED> instruction: 0x76656374
   1e758:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1e75c:	ldrbvs	r6, [pc], -pc, ror #8
   1e760:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1e764:	ldrbvs	r6, [pc], -pc, ror #24
   1e768:	andeq	r9, r5, r0, ror r2
   1e76c:	sub	r3, pc, #36	; 0x24
   1e770:	ldrd	r2, [r3]
   1e774:	cmp	r1, r3
   1e778:	cmpeq	r0, r2
   1e77c:	bne	1f110 <_start@@Base+0xa024>
   1e780:	add	r4, sl, #8
   1e784:	mov	r1, r9
   1e788:	mov	r0, r4
   1e78c:	bl	151e0 <_start@@Base+0xf4>
   1e790:	sub	r3, pc, #64	; 0x40
   1e794:	ldrd	r2, [r3]
   1e798:	cmp	r1, r3
   1e79c:	cmpeq	r0, r2
   1e7a0:	beq	20908 <_start@@Base+0xb81c>
   1e7a4:	bic	ip, r0, #255	; 0xff
   1e7a8:	sub	r3, pc, #80	; 0x50
   1e7ac:	ldrd	r2, [r3]
   1e7b0:	str	ip, [sp, #216]	; 0xd8
   1e7b4:	str	r1, [sp, #220]	; 0xdc
   1e7b8:	ldrd	r0, [sp, #216]	; 0xd8
   1e7bc:	cmp	r1, r3
   1e7c0:	cmpeq	r0, r2
   1e7c4:	bne	201b4 <_start@@Base+0xb0c8>
   1e7c8:	sub	r3, r9, r4
   1e7cc:	cmp	r3, #7
   1e7d0:	ble	20c24 <_start@@Base+0xbb38>
   1e7d4:	mov	r3, #7
   1e7d8:	mov	r2, r9
   1e7dc:	mov	r1, r4
   1e7e0:	mov	r0, fp
   1e7e4:	bl	199e0 <_start@@Base+0x48f4>
   1e7e8:	cmp	r4, r0
   1e7ec:	mov	sl, r0
   1e7f0:	beq	20c20 <_start@@Base+0xbb34>
   1e7f4:	mov	r2, #8
   1e7f8:	mvn	r3, #-536870912	; 0xe0000000
   1e7fc:	ldr	r0, [fp]
   1e800:	mov	r1, r2
   1e804:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1e808:	cmp	r0, #0
   1e80c:	bne	1d43c <_start@@Base+0x8350>
   1e810:	mov	r1, sl
   1e814:	add	r3, sp, #320	; 0x140
   1e818:	mov	r2, r9
   1e81c:	mov	r0, fp
   1e820:	bl	1a3e4 <_start@@Base+0x52f8>
   1e824:	ldr	r3, [sp, #320]	; 0x140
   1e828:	mov	sl, r0
   1e82c:	cmp	r3, #0
   1e830:	beq	21280 <_start@@Base+0xc194>
   1e834:	ldr	r5, [pc, #-212]	; 1e768 <_start@@Base+0x967c>
   1e838:	mov	r8, r0
   1e83c:	mov	r4, r9
   1e840:	b	1e874 <_start@@Base+0x9788>
   1e844:	add	r3, sp, #344	; 0x158
   1e848:	mov	r1, r0
   1e84c:	ldrd	r8, [r3]
   1e850:	mov	r2, r4
   1e854:	add	r3, sp, #320	; 0x140
   1e858:	mov	r0, fp
   1e85c:	strd	r8, [sl]
   1e860:	bl	194f8 <_start@@Base+0x440c>
   1e864:	ldr	r3, [sp, #320]	; 0x140
   1e868:	mov	r8, r0
   1e86c:	cmp	r3, #0
   1e870:	beq	21278 <_start@@Base+0xc18c>
   1e874:	mov	r2, #0
   1e878:	mov	r3, #0
   1e87c:	ldr	r0, [fp]
   1e880:	add	ip, sp, #344	; 0x158
   1e884:	mov	r1, #1
   1e888:	strd	r2, [ip]
   1e88c:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1e890:	subs	sl, r0, #0
   1e894:	mov	r1, r8
   1e898:	add	r3, sp, #344	; 0x158
   1e89c:	mov	r2, r4
   1e8a0:	mov	r0, fp
   1e8a4:	beq	2126c <_start@@Base+0xc180>
   1e8a8:	bl	17a54 <_start@@Base+0x2968>
   1e8ac:	cmp	r0, r8
   1e8b0:	bne	1e844 <_start@@Base+0x9758>
   1e8b4:	add	r1, sp, #344	; 0x158
   1e8b8:	mov	r3, r5
   1e8bc:	mov	r2, r4
   1e8c0:	mov	r0, fp
   1e8c4:	str	r1, [sp]
   1e8c8:	mov	r1, r8
   1e8cc:	bl	1c818 <_start@@Base+0x772c>
   1e8d0:	cmp	r4, r0
   1e8d4:	cmpne	r0, r8
   1e8d8:	bne	1e844 <_start@@Base+0x9758>
   1e8dc:	mov	r9, r4
   1e8e0:	mov	sl, r0
   1e8e4:	b	1d43c <_start@@Base+0x8350>
   1e8e8:	lsr	r3, r0, #16
   1e8ec:	str	r3, [sp, #72]	; 0x48
   1e8f0:	ldr	r1, [sp, #72]	; 0x48
   1e8f4:	str	r5, [sp, #76]	; 0x4c
   1e8f8:	add	r3, pc, #720	; 0x2d0
   1e8fc:	ldrd	r2, [r3]
   1e900:	lsl	r1, r1, #16
   1e904:	str	r1, [sp, #72]	; 0x48
   1e908:	sub	r1, r9, sl
   1e90c:	ldrd	r4, [sp, #72]	; 0x48
   1e910:	cmp	r5, r3
   1e914:	cmpeq	r4, r2
   1e918:	beq	1f2dc <_start@@Base+0xa1f0>
   1e91c:	cmp	r1, #5
   1e920:	ble	20844 <_start@@Base+0xb758>
   1e924:	mov	r2, r9
   1e928:	mov	r1, sl
   1e92c:	mov	r0, fp
   1e930:	bl	19640 <_start@@Base+0x4554>
   1e934:	cmp	r0, sl
   1e938:	mov	r4, r0
   1e93c:	beq	20844 <_start@@Base+0xb758>
   1e940:	mov	ip, #0
   1e944:	mov	r1, r0
   1e948:	mov	r2, r9
   1e94c:	add	r3, sp, #344	; 0x158
   1e950:	mov	r0, fp
   1e954:	str	ip, [sp, #344]	; 0x158
   1e958:	bl	2f9b0 <flatcc_json_parser_float@@Base>
   1e95c:	cmp	r0, r4
   1e960:	mov	sl, r0
   1e964:	beq	20ce4 <_start@@Base+0xbbf8>
   1e968:	vldr	s15, [pc, #648]	; 1ebf8 <_start@@Base+0x9b0c>
   1e96c:	vldr	s14, [sp, #344]	; 0x158
   1e970:	vcmp.f32	s14, s15
   1e974:	vmrs	APSR_nzcv, fpscr
   1e978:	bne	1e988 <_start@@Base+0x989c>
   1e97c:	ldr	r3, [fp, #8]
   1e980:	tst	r3, #2
   1e984:	beq	1dcb4 <_start@@Base+0x8bc8>
   1e988:	mov	r3, #4
   1e98c:	mov	r1, #25
   1e990:	ldr	r0, [fp]
   1e994:	mov	r2, r3
   1e998:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1e99c:	cmp	r0, #0
   1e9a0:	beq	1d43c <_start@@Base+0x8350>
   1e9a4:	ldr	r3, [sp, #344]	; 0x158
   1e9a8:	str	r3, [r0]
   1e9ac:	b	1dcb4 <_start@@Base+0x8bc8>
   1e9b0:	add	r3, pc, #544	; 0x220
   1e9b4:	ldrd	r2, [r3]
   1e9b8:	cmp	r1, r3
   1e9bc:	cmpeq	r0, r2
   1e9c0:	beq	1feb0 <_start@@Base+0xadc4>
   1e9c4:	ldr	r1, [sp, #20]
   1e9c8:	mov	r4, #0
   1e9cc:	str	r4, [sp, #176]	; 0xb0
   1e9d0:	add	r3, pc, #520	; 0x208
   1e9d4:	ldrd	r2, [r3]
   1e9d8:	str	r1, [sp, #180]	; 0xb4
   1e9dc:	ldrd	r0, [sp, #176]	; 0xb0
   1e9e0:	cmp	r1, r3
   1e9e4:	cmpeq	r0, r2
   1e9e8:	bne	207e4 <_start@@Base+0xb6f8>
   1e9ec:	sub	r3, r9, sl
   1e9f0:	cmp	r3, #4
   1e9f4:	ble	20508 <_start@@Base+0xb41c>
   1e9f8:	mov	r3, #4
   1e9fc:	mov	r2, r9
   1ea00:	mov	r1, sl
   1ea04:	mov	r0, fp
   1ea08:	bl	199e0 <_start@@Base+0x48f4>
   1ea0c:	cmp	r0, sl
   1ea10:	mov	r5, r0
   1ea14:	beq	20508 <_start@@Base+0xb41c>
   1ea18:	add	r8, sp, #344	; 0x158
   1ea1c:	mov	r1, r0
   1ea20:	mov	r2, r9
   1ea24:	mov	r3, r8
   1ea28:	mov	r0, fp
   1ea2c:	strh	r4, [r8]
   1ea30:	bl	1837c <_start@@Base+0x3290>
   1ea34:	cmp	r5, r0
   1ea38:	mov	sl, r0
   1ea3c:	beq	212b4 <_start@@Base+0xc1c8>
   1ea40:	add	r3, sp, #344	; 0x158
   1ea44:	ldrsh	r3, [r3]
   1ea48:	cmp	r3, #150	; 0x96
   1ea4c:	bne	1ea5c <_start@@Base+0x9970>
   1ea50:	ldr	r3, [fp, #8]
   1ea54:	tst	r3, #2
   1ea58:	beq	1dcb4 <_start@@Base+0x8bc8>
   1ea5c:	mov	r3, #2
   1ea60:	mov	r1, #1
   1ea64:	ldr	r0, [fp]
   1ea68:	mov	r2, r3
   1ea6c:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1ea70:	cmp	r0, #0
   1ea74:	beq	1d43c <_start@@Base+0x8350>
   1ea78:	add	r3, sp, #344	; 0x158
   1ea7c:	ldrsh	r3, [r3]
   1ea80:	strh	r3, [r0]
   1ea84:	b	1dcb4 <_start@@Base+0x8bc8>
   1ea88:	mov	r1, sl
   1ea8c:	mov	r2, r9
   1ea90:	mov	r0, fp
   1ea94:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1ea98:	mov	sl, r0
   1ea9c:	b	1dcb4 <_start@@Base+0x8bc8>
   1eaa0:	mov	r1, sl
   1eaa4:	mov	r2, r9
   1eaa8:	mov	r0, fp
   1eaac:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1eab0:	mov	sl, r0
   1eab4:	b	1dcb4 <_start@@Base+0x8bc8>
   1eab8:	mov	r1, sl
   1eabc:	mov	r2, r9
   1eac0:	mov	r0, fp
   1eac4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1eac8:	mov	sl, r0
   1eacc:	b	1dcb4 <_start@@Base+0x8bc8>
   1ead0:	add	r3, pc, #272	; 0x110
   1ead4:	ldrd	r2, [r3]
   1ead8:	cmp	r1, r3
   1eadc:	cmpeq	r0, r2
   1eae0:	bne	1fdc8 <_start@@Base+0xacdc>
   1eae4:	add	r4, sl, #16
   1eae8:	mov	r1, r9
   1eaec:	mov	r0, r4
   1eaf0:	bl	151e0 <_start@@Base+0xf4>
   1eaf4:	bic	r0, r0, #255	; 0xff
   1eaf8:	add	r3, pc, #240	; 0xf0
   1eafc:	ldrd	r2, [r3]
   1eb00:	strd	r0, [sp, #200]	; 0xc8
   1eb04:	ldrd	r0, [sp, #200]	; 0xc8
   1eb08:	cmp	r1, r3
   1eb0c:	cmpeq	r0, r2
   1eb10:	bne	20154 <_start@@Base+0xb068>
   1eb14:	sub	r3, r9, r4
   1eb18:	cmp	r3, #7
   1eb1c:	ble	20b74 <_start@@Base+0xba88>
   1eb20:	mov	r3, #7
   1eb24:	mov	r2, r9
   1eb28:	mov	r1, r4
   1eb2c:	mov	r0, fp
   1eb30:	bl	199e0 <_start@@Base+0x48f4>
   1eb34:	cmp	r4, r0
   1eb38:	mov	sl, r0
   1eb3c:	beq	20b70 <_start@@Base+0xba84>
   1eb40:	mvn	r3, #-536870912	; 0xe0000000
   1eb44:	mov	r2, #4
   1eb48:	ldr	r0, [fp]
   1eb4c:	mov	r1, #8
   1eb50:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1eb54:	cmp	r0, #0
   1eb58:	bne	1d43c <_start@@Base+0x8350>
   1eb5c:	mov	r1, sl
   1eb60:	add	r3, sp, #320	; 0x140
   1eb64:	mov	r2, r9
   1eb68:	mov	r0, fp
   1eb6c:	bl	1a3e4 <_start@@Base+0x52f8>
   1eb70:	ldr	r3, [sp, #320]	; 0x140
   1eb74:	mov	sl, r0
   1eb78:	cmp	r3, #0
   1eb7c:	beq	20664 <_start@@Base+0xb578>
   1eb80:	add	r3, sp, #272	; 0x110
   1eb84:	strd	r6, [r3]
   1eb88:	mov	r1, #1
   1eb8c:	ldr	r0, [fp]
   1eb90:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1eb94:	subs	r7, r0, #0
   1eb98:	beq	1d43c <_start@@Base+0x8350>
   1eb9c:	add	r8, sp, #340	; 0x154
   1eba0:	mov	r1, sl
   1eba4:	mov	r3, r8
   1eba8:	mov	r2, r9
   1ebac:	mov	r0, fp
   1ebb0:	bl	19ae0 <_start@@Base+0x49f4>
   1ebb4:	ldr	r3, [sp, #340]	; 0x154
   1ebb8:	mov	r4, r0
   1ebbc:	cmp	r3, #0
   1ebc0:	beq	20638 <_start@@Base+0xb54c>
   1ebc4:	mov	r5, #0
   1ebc8:	str	r7, [sp, #16]
   1ebcc:	b	1ec8c <_start@@Base+0x9ba0>
   1ebd0:	ldrtvs	r0, [r2], -r0
   1ebd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ebd8:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1ebdc:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1ebe0:	andeq	r0, r0, r0
   1ebe4:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1ebe8:	svcvs	0x00727465
   1ebec:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1ebf0:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1ebf4:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1ebf8:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1ebfc:	add	r3, pc, #940	; 0x3ac
   1ec00:	ldrd	r2, [r3]
   1ec04:	cmp	r1, r3
   1ec08:	cmpeq	r0, r2
   1ec0c:	bne	20558 <_start@@Base+0xb46c>
   1ec10:	sub	r3, r9, r4
   1ec14:	cmp	r3, #8
   1ec18:	ble	20558 <_start@@Base+0xb46c>
   1ec1c:	mov	r2, r9
   1ec20:	mov	r1, r4
   1ec24:	mov	r0, fp
   1ec28:	bl	19728 <_start@@Base+0x463c>
   1ec2c:	cmp	r0, r4
   1ec30:	mov	sl, r0
   1ec34:	beq	20558 <_start@@Base+0xb46c>
   1ec38:	mov	r1, r0
   1ec3c:	mov	r2, r9
   1ec40:	str	r5, [sp, #344]	; 0x158
   1ec44:	add	r3, sp, #344	; 0x158
   1ec48:	mov	r0, fp
   1ec4c:	bl	18108 <_start@@Base+0x301c>
   1ec50:	cmp	sl, r0
   1ec54:	mov	r4, r0
   1ec58:	beq	205ec <_start@@Base+0xb500>
   1ec5c:	ldr	r2, [sp, #16]
   1ec60:	ldr	r3, [sp, #344]	; 0x158
   1ec64:	str	r3, [r2, #4]
   1ec68:	mov	r1, r4
   1ec6c:	mov	r3, r8
   1ec70:	mov	r2, r9
   1ec74:	mov	r0, fp
   1ec78:	bl	193b0 <_start@@Base+0x42c4>
   1ec7c:	ldr	r3, [sp, #340]	; 0x154
   1ec80:	mov	r4, r0
   1ec84:	cmp	r3, #0
   1ec88:	beq	20698 <_start@@Base+0xb5ac>
   1ec8c:	cmp	r9, r4
   1ec90:	beq	1ecb8 <_start@@Base+0x9bcc>
   1ec94:	ldrb	r3, [r4]
   1ec98:	cmp	r3, #34	; 0x22
   1ec9c:	addeq	r4, r4, #1
   1eca0:	streq	r5, [fp, #12]
   1eca4:	beq	1ecb8 <_start@@Base+0x9bcc>
   1eca8:	cmp	r3, #46	; 0x2e
   1ecac:	movne	r3, #1
   1ecb0:	strne	r3, [fp, #12]
   1ecb4:	beq	205a0 <_start@@Base+0xb4b4>
   1ecb8:	mov	r1, r9
   1ecbc:	mov	r0, r4
   1ecc0:	bl	151e0 <_start@@Base+0xf4>
   1ecc4:	lsr	r7, r1, #16
   1ecc8:	mov	r3, #0
   1eccc:	movt	r3, #26980	; 0x6964
   1ecd0:	mov	r2, #0
   1ecd4:	mov	r6, r5
   1ecd8:	lsl	r7, r7, #16
   1ecdc:	cmp	r7, r3
   1ece0:	cmpeq	r5, r2
   1ece4:	bne	1ebfc <_start@@Base+0x9b10>
   1ece8:	sub	r3, r9, r4
   1ecec:	cmp	r3, #2
   1ecf0:	ble	20558 <_start@@Base+0xb46c>
   1ecf4:	mov	r2, r9
   1ecf8:	mov	r1, r4
   1ecfc:	mov	r0, fp
   1ed00:	bl	198f8 <_start@@Base+0x480c>
   1ed04:	cmp	r0, r4
   1ed08:	mov	sl, r0
   1ed0c:	beq	20558 <_start@@Base+0xb46c>
   1ed10:	mov	r1, r0
   1ed14:	mov	r2, r9
   1ed18:	str	r5, [sp, #344]	; 0x158
   1ed1c:	add	r3, sp, #344	; 0x158
   1ed20:	mov	r0, fp
   1ed24:	bl	18108 <_start@@Base+0x301c>
   1ed28:	cmp	sl, r0
   1ed2c:	mov	r4, r0
   1ed30:	beq	205bc <_start@@Base+0xb4d0>
   1ed34:	ldr	r2, [sp, #16]
   1ed38:	ldr	r3, [sp, #344]	; 0x158
   1ed3c:	str	r3, [r2]
   1ed40:	b	1ec68 <_start@@Base+0x9b7c>
   1ed44:	add	r3, pc, #620	; 0x26c
   1ed48:	ldrd	r2, [r3]
   1ed4c:	cmp	r1, r3
   1ed50:	cmpeq	r0, r2
   1ed54:	bhi	20000 <_start@@Base+0xaf14>
   1ed58:	add	r3, pc, #608	; 0x260
   1ed5c:	ldrd	r2, [r3]
   1ed60:	cmp	r1, r3
   1ed64:	cmpeq	r0, r2
   1ed68:	bne	20214 <_start@@Base+0xb128>
   1ed6c:	sub	r3, r9, sl
   1ed70:	cmp	r3, #8
   1ed74:	ble	20eb0 <_start@@Base+0xbdc4>
   1ed78:	mov	r1, sl
   1ed7c:	mov	r2, r9
   1ed80:	mov	r0, fp
   1ed84:	bl	19728 <_start@@Base+0x463c>
   1ed88:	cmp	sl, r0
   1ed8c:	mov	r1, r0
   1ed90:	str	r0, [sp, #16]
   1ed94:	beq	20eb0 <_start@@Base+0xbdc4>
   1ed98:	add	r8, sp, #344	; 0x158
   1ed9c:	mov	r4, #0
   1eda0:	mov	r5, #0
   1eda4:	mov	r3, r8
   1eda8:	mov	r2, r9
   1edac:	mov	r0, fp
   1edb0:	strd	r4, [r8]
   1edb4:	bl	17a54 <_start@@Base+0x2968>
   1edb8:	ldr	r1, [sp, #16]
   1edbc:	mov	sl, r0
   1edc0:	cmp	r0, r1
   1edc4:	beq	214bc <_start@@Base+0xc3d0>
   1edc8:	add	r3, sp, #344	; 0x158
   1edcc:	ldrd	r2, [r3]
   1edd0:	orrs	r3, r2, r3
   1edd4:	bne	1ede4 <_start@@Base+0x9cf8>
   1edd8:	ldr	r3, [fp, #8]
   1eddc:	tst	r3, #2
   1ede0:	beq	1dcb4 <_start@@Base+0x8bc8>
   1ede4:	mov	r3, #8
   1ede8:	mov	r1, #18
   1edec:	ldr	r0, [fp]
   1edf0:	mov	r2, r3
   1edf4:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1edf8:	cmp	r0, #0
   1edfc:	beq	1d43c <_start@@Base+0x8350>
   1ee00:	add	r3, sp, #344	; 0x158
   1ee04:	ldrd	r2, [r3]
   1ee08:	strd	r2, [r0]
   1ee0c:	b	1dcb4 <_start@@Base+0x8bc8>
   1ee10:	ldrb	r2, [r4, #7]
   1ee14:	mov	r3, #0
   1ee18:	mov	lr, r3
   1ee1c:	ldrb	r0, [r4, #6]
   1ee20:	orr	r1, r2, r0, lsl #8
   1ee24:	ldrb	r2, [r4, #5]
   1ee28:	mov	r0, lr
   1ee2c:	orr	r1, r1, r2, lsl #16
   1ee30:	ldrb	r2, [r4, #4]
   1ee34:	mov	lr, r0
   1ee38:	orr	r2, r1, r2, lsl #24
   1ee3c:	ldrb	r0, [r4, #3]
   1ee40:	orr	r3, lr, r0
   1ee44:	ldrb	r0, [r4, #2]
   1ee48:	orr	r3, r3, r0, lsl #8
   1ee4c:	ldrb	r0, [r4, #1]
   1ee50:	mov	r6, r2
   1ee54:	ldrb	r2, [r4]
   1ee58:	orr	r0, r3, r0, lsl #16
   1ee5c:	orr	r7, r0, r2, lsl #24
   1ee60:	add	r3, pc, #360	; 0x168
   1ee64:	ldrd	r2, [r3]
   1ee68:	cmp	r7, r3
   1ee6c:	cmpeq	r6, r2
   1ee70:	bls	1f424 <_start@@Base+0xa338>
   1ee74:	mvn	r3, #-2013265920	; 0x88000000
   1ee78:	mvn	r2, #0
   1ee7c:	cmp	r7, r3
   1ee80:	cmpeq	r6, r2
   1ee84:	bhi	1f558 <_start@@Base+0xa46c>
   1ee88:	and	r3, r6, #-16777216	; 0xff000000
   1ee8c:	add	r1, pc, #308	; 0x134
   1ee90:	ldrd	r0, [r1]
   1ee94:	str	r3, [sp, #32]
   1ee98:	str	r7, [sp, #36]	; 0x24
   1ee9c:	ldrd	r2, [sp, #32]
   1eea0:	cmp	r3, r1
   1eea4:	cmpeq	r2, r0
   1eea8:	bne	1f40c <_start@@Base+0xa320>
   1eeac:	cmp	ip, #5
   1eeb0:	ble	1f40c <_start@@Base+0xa320>
   1eeb4:	mov	r1, r4
   1eeb8:	mov	r2, r9
   1eebc:	mov	r0, fp
   1eec0:	bl	19640 <_start@@Base+0x4554>
   1eec4:	cmp	r0, r4
   1eec8:	mov	r1, r0
   1eecc:	beq	1f40c <_start@@Base+0xa320>
   1eed0:	add	r3, r8, #26
   1eed4:	mov	r2, r9
   1eed8:	mov	r0, fp
   1eedc:	bl	1ca3c <_start@@Base+0x7950>
   1eee0:	mov	sl, r0
   1eee4:	sub	r3, r9, sl
   1eee8:	cmp	r3, #1
   1eeec:	ble	1ef00 <_start@@Base+0x9e14>
   1eef0:	ldrb	r3, [sl]
   1eef4:	cmp	r3, #32
   1eef8:	bhi	1ef14 <_start@@Base+0x9e28>
   1eefc:	beq	1f5f8 <_start@@Base+0xa50c>
   1ef00:	mov	r1, sl
   1ef04:	mov	r2, r9
   1ef08:	mov	r0, fp
   1ef0c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1ef10:	mov	sl, r0
   1ef14:	cmp	r9, sl
   1ef18:	beq	1dcb4 <_start@@Base+0x8bc8>
   1ef1c:	ldrb	r3, [sl]
   1ef20:	cmp	r3, #44	; 0x2c
   1ef24:	beq	1f60c <_start@@Base+0xa520>
   1ef28:	mov	r3, #0
   1ef2c:	str	r3, [sp, #336]	; 0x150
   1ef30:	ldrb	r3, [sl]
   1ef34:	cmp	r3, #125	; 0x7d
   1ef38:	beq	1f5c0 <_start@@Base+0xa4d4>
   1ef3c:	mov	r3, #10
   1ef40:	mov	r1, sl
   1ef44:	mov	r2, r9
   1ef48:	mov	r0, fp
   1ef4c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1ef50:	ldr	r3, [sp, #336]	; 0x150
   1ef54:	mov	r4, r0
   1ef58:	cmp	r3, #0
   1ef5c:	bne	1e2cc <_start@@Base+0x91e0>
   1ef60:	mov	sl, r4
   1ef64:	b	1dcb4 <_start@@Base+0x8bc8>
   1ef68:	mov	r2, #0
   1ef6c:	mov	r3, #0
   1ef70:	b	1ee18 <_start@@Base+0x9d2c>
   1ef74:	mov	r1, #0
   1ef78:	mov	lr, r1
   1ef7c:	b	1ee24 <_start@@Base+0x9d38>
   1ef80:	mov	r2, #0
   1ef84:	mov	r3, r2
   1ef88:	b	1ee44 <_start@@Base+0x9d58>
   1ef8c:	mov	r2, #0
   1ef90:	mov	r3, r2
   1ef94:	b	1ee4c <_start@@Base+0x9d60>
   1ef98:	mov	r1, #0
   1ef9c:	mov	r0, r1
   1efa0:	b	1ee30 <_start@@Base+0x9d44>
   1efa4:	mov	r2, #0
   1efa8:	mov	lr, r2
   1efac:	b	1ee3c <_start@@Base+0x9d50>
   1efb0:	cmnvs	lr, r5, ror #6
   1efb4:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1efb8:			; <UNDEFINED> instruction: 0x666e7630
   1efbc:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1efc0:			; <UNDEFINED> instruction: 0x666e7631
   1efc4:	teqvc	r6, #1593835520	; 0x5f000000
   1efc8:	movwcc	r0, #0
   1efcc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1efd0:	rscscc	pc, pc, #1020	; 0x3fc
   1efd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1efd8:	mrscc	r0, (UNDEF: 0)
   1efdc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1efe0:			; <UNDEFINED> instruction: 0x000591b0
   1efe4:	submi	r0, r0, r0
   1efe8:	ldrb	r2, [r4]
   1efec:	mov	r6, #0
   1eff0:	lsl	r7, r2, #24
   1eff4:	sub	r3, pc, #44	; 0x2c
   1eff8:	ldrd	r2, [r3]
   1effc:	cmp	r7, r3
   1f000:	cmpeq	r6, r2
   1f004:	bhi	1ee74 <_start@@Base+0x9d88>
   1f008:	sub	r3, pc, #56	; 0x38
   1f00c:	ldrd	r2, [r3]
   1f010:	cmp	r7, r3
   1f014:	cmpeq	r6, r2
   1f018:	bne	1f40c <_start@@Base+0xa320>
   1f01c:	cmp	ip, #5
   1f020:	ble	1f40c <_start@@Base+0xa320>
   1f024:	ldr	r2, [fp, #12]
   1f028:	ldrb	r3, [r4, #5]
   1f02c:	cmp	r2, #0
   1f030:	beq	1f854 <_start@@Base+0xa768>
   1f034:	cmp	r3, #58	; 0x3a
   1f038:	cmpne	r3, #32
   1f03c:	movhi	r3, #1
   1f040:	movls	r3, #0
   1f044:	bhi	1f40c <_start@@Base+0xa320>
   1f048:	add	r1, r4, #5
   1f04c:	str	r3, [fp, #12]
   1f050:	sub	r3, r9, r1
   1f054:	cmp	r3, #1
   1f058:	ble	1f06c <_start@@Base+0x9f80>
   1f05c:	ldrb	r3, [r1]
   1f060:	cmp	r3, #32
   1f064:	bhi	1f07c <_start@@Base+0x9f90>
   1f068:	beq	20a58 <_start@@Base+0xb96c>
   1f06c:	mov	r2, r9
   1f070:	mov	r0, fp
   1f074:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1f078:	mov	r1, r0
   1f07c:	cmp	r9, r1
   1f080:	beq	1f090 <_start@@Base+0x9fa4>
   1f084:	ldrb	r3, [r1]
   1f088:	cmp	r3, #58	; 0x3a
   1f08c:	beq	20bc0 <_start@@Base+0xbad4>
   1f090:	mov	r3, #4
   1f094:	mov	r2, r9
   1f098:	mov	r0, fp
   1f09c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1f0a0:	mov	r5, r0
   1f0a4:	cmp	r5, r4
   1f0a8:	beq	1f40c <_start@@Base+0xa320>
   1f0ac:	mov	r2, r9
   1f0b0:	add	r3, sp, #344	; 0x158
   1f0b4:	vstr	d8, [sp, #344]	; 0x158
   1f0b8:	mov	r1, r5
   1f0bc:	mov	r0, fp
   1f0c0:	bl	2f878 <flatcc_json_parser_double@@Base>
   1f0c4:	cmp	r5, r0
   1f0c8:	mov	sl, r0
   1f0cc:	beq	1fe28 <_start@@Base+0xad3c>
   1f0d0:	add	r3, sp, #344	; 0x158
   1f0d4:	ldrd	r2, [r3]
   1f0d8:	strd	r2, [r8, #16]
   1f0dc:	b	1eee4 <_start@@Base+0x9df8>
   1f0e0:	mov	r1, sl
   1f0e4:	mov	r2, r9
   1f0e8:	mov	r0, fp
   1f0ec:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f0f0:	mov	sl, r0
   1f0f4:	b	1dcb4 <_start@@Base+0x8bc8>
   1f0f8:	mov	r1, sl
   1f0fc:	mov	r2, r9
   1f100:	mov	r0, fp
   1f104:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f108:	mov	sl, r0
   1f10c:	b	1dcb4 <_start@@Base+0x8bc8>
   1f110:	mov	r1, sl
   1f114:	mov	r2, r9
   1f118:	mov	r0, fp
   1f11c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f120:	mov	sl, r0
   1f124:	b	1dcb4 <_start@@Base+0x8bc8>
   1f128:	mov	r1, sl
   1f12c:	mov	r2, r9
   1f130:	mov	r0, fp
   1f134:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f138:	mov	sl, r0
   1f13c:	b	1dcb4 <_start@@Base+0x8bc8>
   1f140:	mov	r1, sl
   1f144:	mov	r2, r9
   1f148:	mov	r0, fp
   1f14c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f150:	mov	sl, r0
   1f154:	b	1dcb4 <_start@@Base+0x8bc8>
   1f158:	add	r8, sl, #16
   1f15c:	mov	r1, r9
   1f160:	mov	r0, r8
   1f164:	bl	151e0 <_start@@Base+0xf4>
   1f168:	lsr	ip, r1, #16
   1f16c:	mov	r0, #0
   1f170:	mov	r3, #0
   1f174:	movt	r3, #26418	; 0x6732
   1f178:	mov	r2, #0
   1f17c:	lsl	ip, ip, #16
   1f180:	str	r0, [sp, #160]	; 0xa0
   1f184:	str	ip, [sp, #164]	; 0xa4
   1f188:	ldrd	r4, [sp, #160]	; 0xa0
   1f18c:	cmp	r5, r3
   1f190:	cmpeq	r4, r2
   1f194:	beq	2022c <_start@@Base+0xb140>
   1f198:	and	r3, r1, #-16777216	; 0xff000000
   1f19c:	str	r0, [sp, #248]	; 0xf8
   1f1a0:	str	r3, [sp, #252]	; 0xfc
   1f1a4:	ldrd	r2, [sp, #248]	; 0xf8
   1f1a8:	cmp	r3, #1728053248	; 0x67000000
   1f1ac:	cmpeq	r2, #0
   1f1b0:	bne	20b58 <_start@@Base+0xba6c>
   1f1b4:	sub	r3, r9, r8
   1f1b8:	cmp	r3, #1
   1f1bc:	ble	20e38 <_start@@Base+0xbd4c>
   1f1c0:	mov	r2, r9
   1f1c4:	mov	r1, r8
   1f1c8:	mov	r0, fp
   1f1cc:	bl	19810 <_start@@Base+0x4724>
   1f1d0:	cmp	r8, r0
   1f1d4:	mov	sl, r0
   1f1d8:	beq	20e34 <_start@@Base+0xbd48>
   1f1dc:	ldr	r0, [fp]
   1f1e0:	bl	27a18 <flatcc_builder_start_offset_vector@@Base>
   1f1e4:	cmp	r0, #0
   1f1e8:	bne	1d43c <_start@@Base+0x8350>
   1f1ec:	mov	r1, sl
   1f1f0:	add	r3, sp, #320	; 0x140
   1f1f4:	mov	r2, r9
   1f1f8:	mov	r0, fp
   1f1fc:	bl	1a3e4 <_start@@Base+0x52f8>
   1f200:	ldr	r3, [sp, #320]	; 0x140
   1f204:	mov	sl, r0
   1f208:	cmp	r3, #0
   1f20c:	beq	1f278 <_start@@Base+0xa18c>
   1f210:	add	r4, sp, #324	; 0x144
   1f214:	mov	r1, sl
   1f218:	mov	r3, r4
   1f21c:	mov	r2, r9
   1f220:	mov	r0, fp
   1f224:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   1f228:	ldr	r3, [sp, #324]	; 0x144
   1f22c:	mov	sl, r0
   1f230:	mov	r1, #1
   1f234:	cmp	r3, #0
   1f238:	beq	1d43c <_start@@Base+0x8350>
   1f23c:	ldr	r0, [fp]
   1f240:	bl	26f6c <flatcc_builder_extend_offset_vector@@Base>
   1f244:	subs	ip, r0, #0
   1f248:	add	r3, sp, #320	; 0x140
   1f24c:	mov	r2, r9
   1f250:	mov	r1, sl
   1f254:	mov	r0, fp
   1f258:	beq	1d43c <_start@@Base+0x8350>
   1f25c:	ldr	lr, [sp, #324]	; 0x144
   1f260:	str	lr, [ip]
   1f264:	bl	194f8 <_start@@Base+0x440c>
   1f268:	ldr	r3, [sp, #320]	; 0x140
   1f26c:	mov	sl, r0
   1f270:	cmp	r3, #0
   1f274:	bne	1f214 <_start@@Base+0xa128>
   1f278:	ldr	r0, [fp]
   1f27c:	bl	29098 <flatcc_builder_end_offset_vector@@Base>
   1f280:	cmp	r0, #0
   1f284:	str	r0, [sp, #324]	; 0x144
   1f288:	beq	1d43c <_start@@Base+0x8350>
   1f28c:	mov	r1, #10
   1f290:	ldr	r0, [fp]
   1f294:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1f298:	cmp	r0, #0
   1f29c:	beq	1d43c <_start@@Base+0x8350>
   1f2a0:	ldr	r3, [sp, #324]	; 0x144
   1f2a4:	str	r3, [r0]
   1f2a8:	b	1dcb4 <_start@@Base+0x8bc8>
   1f2ac:	mov	r1, sl
   1f2b0:	mov	r2, r9
   1f2b4:	mov	r0, fp
   1f2b8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f2bc:	mov	sl, r0
   1f2c0:	b	1dcb4 <_start@@Base+0x8bc8>
   1f2c4:	mov	r1, sl
   1f2c8:	mov	r2, r9
   1f2cc:	mov	r0, fp
   1f2d0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f2d4:	mov	sl, r0
   1f2d8:	b	1dcb4 <_start@@Base+0x8bc8>
   1f2dc:	cmp	r1, #6
   1f2e0:	ble	20340 <_start@@Base+0xb254>
   1f2e4:	mov	r3, #6
   1f2e8:	mov	r2, r9
   1f2ec:	mov	r1, sl
   1f2f0:	mov	r0, fp
   1f2f4:	bl	199e0 <_start@@Base+0x48f4>
   1f2f8:	cmp	r0, sl
   1f2fc:	mov	r4, r0
   1f300:	beq	20340 <_start@@Base+0xb254>
   1f304:	mov	ip, #0
   1f308:	mov	r1, r0
   1f30c:	mov	r2, r9
   1f310:	add	r3, sp, #344	; 0x158
   1f314:	mov	r0, fp
   1f318:	str	ip, [sp, #344]	; 0x158
   1f31c:	bl	2f9b0 <flatcc_json_parser_float@@Base>
   1f320:	cmp	r0, r4
   1f324:	mov	sl, r0
   1f328:	beq	2108c <_start@@Base+0xbfa0>
   1f32c:	vldr	s15, [pc, #-848]	; 1efe4 <_start@@Base+0x9ef8>
   1f330:	vldr	s14, [sp, #344]	; 0x158
   1f334:	vcmp.f32	s14, s15
   1f338:	vmrs	APSR_nzcv, fpscr
   1f33c:	bne	1f34c <_start@@Base+0xa260>
   1f340:	ldr	r3, [fp, #8]
   1f344:	tst	r3, #2
   1f348:	beq	1dcb4 <_start@@Base+0x8bc8>
   1f34c:	mov	r3, #4
   1f350:	mov	r1, #26
   1f354:	ldr	r0, [fp]
   1f358:	mov	r2, r3
   1f35c:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   1f360:	cmp	r0, #0
   1f364:	beq	216ec <_start@@Base+0xc600>
   1f368:	ldr	r3, [sp, #344]	; 0x158
   1f36c:	str	r3, [r0]
   1f370:	b	1dcb4 <_start@@Base+0x8bc8>
   1f374:	mov	r2, #0
   1f378:	mov	r3, #0
   1f37c:	mov	r8, #0
   1f380:	add	r1, sp, #344	; 0x158
   1f384:	cmp	r9, r4
   1f388:	moveq	r5, r9
   1f38c:	strd	r2, [r1]
   1f390:	str	r8, [sp, #340]	; 0x154
   1f394:	beq	1f3c4 <_start@@Base+0xa2d8>
   1f398:	add	r0, sp, #344	; 0x158
   1f39c:	add	r3, sp, #340	; 0x154
   1f3a0:	mov	r2, r9
   1f3a4:	mov	r1, r4
   1f3a8:	str	r0, [sp]
   1f3ac:	mov	r0, fp
   1f3b0:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1f3b4:	cmp	r4, r0
   1f3b8:	mov	r5, r0
   1f3bc:	strbeq	r8, [sp, #336]	; 0x150
   1f3c0:	bne	20d4c <_start@@Base+0xbc60>
   1f3c4:	add	ip, sp, #336	; 0x150
   1f3c8:	ldr	r3, [pc, #-1008]	; 1efe0 <_start@@Base+0x9ef4>
   1f3cc:	mov	r2, r9
   1f3d0:	mov	r1, r5
   1f3d4:	mov	r0, fp
   1f3d8:	str	ip, [sp]
   1f3dc:	bl	1aa08 <_start@@Base+0x591c>
   1f3e0:	cmp	r9, r0
   1f3e4:	cmpne	r0, r5
   1f3e8:	mov	sl, r0
   1f3ec:	beq	1d43c <_start@@Base+0x8350>
   1f3f0:	ldrb	r3, [sp, #336]	; 0x150
   1f3f4:	cmp	r3, #1
   1f3f8:	bne	1d740 <_start@@Base+0x8654>
   1f3fc:	ldr	r3, [fp, #8]
   1f400:	tst	r3, #2
   1f404:	beq	1dcb4 <_start@@Base+0x8bc8>
   1f408:	b	1d740 <_start@@Base+0x8654>
   1f40c:	mov	r1, r4
   1f410:	mov	r2, r9
   1f414:	mov	r0, fp
   1f418:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f41c:	mov	sl, r0
   1f420:	b	1eee4 <_start@@Base+0x9df8>
   1f424:	and	r2, r6, #-16777216	; 0xff000000
   1f428:	mov	r6, r2
   1f42c:	add	r3, pc, #772	; 0x304
   1f430:	ldrd	r2, [r3]
   1f434:	cmp	r7, r3
   1f438:	cmpeq	r6, r2
   1f43c:	bne	1f008 <_start@@Base+0x9f1c>
   1f440:	cmp	ip, #5
   1f444:	ble	1f40c <_start@@Base+0xa320>
   1f448:	ldr	r2, [fp, #12]
   1f44c:	ldrb	r3, [r4, #5]
   1f450:	cmp	r2, #0
   1f454:	beq	1f844 <_start@@Base+0xa758>
   1f458:	cmp	r3, #58	; 0x3a
   1f45c:	cmpne	r3, #32
   1f460:	movhi	r3, #1
   1f464:	movls	r3, #0
   1f468:	bhi	1f40c <_start@@Base+0xa320>
   1f46c:	add	r1, r4, #5
   1f470:	str	r3, [fp, #12]
   1f474:	sub	r3, r9, r1
   1f478:	cmp	r3, #1
   1f47c:	ble	1f490 <_start@@Base+0xa3a4>
   1f480:	ldrb	r3, [r1]
   1f484:	cmp	r3, #32
   1f488:	bhi	1f4a0 <_start@@Base+0xa3b4>
   1f48c:	beq	208f4 <_start@@Base+0xb808>
   1f490:	mov	r2, r9
   1f494:	mov	r0, fp
   1f498:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1f49c:	mov	r1, r0
   1f4a0:	cmp	r9, r1
   1f4a4:	beq	1f4b4 <_start@@Base+0xa3c8>
   1f4a8:	ldrb	r3, [r1]
   1f4ac:	cmp	r3, #58	; 0x3a
   1f4b0:	beq	20bd8 <_start@@Base+0xbaec>
   1f4b4:	mov	r3, #4
   1f4b8:	mov	r2, r9
   1f4bc:	mov	r0, fp
   1f4c0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1f4c4:	mov	r5, r0
   1f4c8:	cmp	r5, r4
   1f4cc:	beq	1f40c <_start@@Base+0xa320>
   1f4d0:	mov	r3, #0
   1f4d4:	mov	r0, #0
   1f4d8:	mov	r1, #0
   1f4dc:	cmp	r9, r5
   1f4e0:	strb	r3, [sp, #332]	; 0x14c
   1f4e4:	str	r3, [sp, #340]	; 0x154
   1f4e8:	add	r3, sp, #344	; 0x158
   1f4ec:	strd	r0, [r3]
   1f4f0:	beq	1fbc8 <_start@@Base+0xaadc>
   1f4f4:	mov	r0, r3
   1f4f8:	mov	r2, r9
   1f4fc:	add	r3, sp, #340	; 0x154
   1f500:	mov	r1, r5
   1f504:	str	r0, [sp]
   1f508:	mov	r0, fp
   1f50c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   1f510:	cmp	r5, r0
   1f514:	mov	sl, r0
   1f518:	bne	1fd48 <_start@@Base+0xac5c>
   1f51c:	add	ip, sp, #332	; 0x14c
   1f520:	ldr	r3, [pc, #536]	; 1f740 <_start@@Base+0xa654>
   1f524:	mov	r2, r9
   1f528:	mov	r1, sl
   1f52c:	mov	r0, fp
   1f530:	str	ip, [sp]
   1f534:	bl	1afd4 <_start@@Base+0x5ee8>
   1f538:	cmp	r9, r0
   1f53c:	cmpne	r0, sl
   1f540:	beq	21394 <_start@@Base+0xc2a8>
   1f544:	add	r3, sp, #332	; 0x14c
   1f548:	mov	sl, r0
   1f54c:	ldrsb	r2, [r3]
   1f550:	strb	r2, [r8, #24]
   1f554:	b	1eee4 <_start@@Base+0x9df8>
   1f558:	mvn	r3, #-2030043136	; 0x87000000
   1f55c:	mvn	r2, #0
   1f560:	cmp	r7, r3
   1f564:	cmpeq	r6, r2
   1f568:	bhi	1f680 <_start@@Base+0xa594>
   1f56c:	cmp	ip, #1
   1f570:	ble	1f40c <_start@@Base+0xa320>
   1f574:	mov	r2, r9
   1f578:	mov	r1, r4
   1f57c:	mov	r0, fp
   1f580:	bl	19810 <_start@@Base+0x4724>
   1f584:	cmp	r0, r4
   1f588:	mov	r5, r0
   1f58c:	beq	1f40c <_start@@Base+0xa320>
   1f590:	mov	r1, r0
   1f594:	mov	r2, r9
   1f598:	vstr	s18, [sp, #344]	; 0x158
   1f59c:	add	r3, sp, #344	; 0x158
   1f5a0:	mov	r0, fp
   1f5a4:	bl	2f9b0 <flatcc_json_parser_float@@Base>
   1f5a8:	cmp	r5, r0
   1f5ac:	mov	sl, r0
   1f5b0:	beq	207fc <_start@@Base+0xb710>
   1f5b4:	ldr	r3, [sp, #344]	; 0x158
   1f5b8:	str	r3, [r8]
   1f5bc:	b	1eee4 <_start@@Base+0x9df8>
   1f5c0:	add	r1, sl, #1
   1f5c4:	sub	r3, r9, r1
   1f5c8:	cmp	r3, #1
   1f5cc:	ble	1f5e0 <_start@@Base+0xa4f4>
   1f5d0:	ldrb	r3, [sl, #1]
   1f5d4:	cmp	r3, #32
   1f5d8:	bhi	1f83c <_start@@Base+0xa750>
   1f5dc:	beq	1fbb4 <_start@@Base+0xaac8>
   1f5e0:	mov	r2, r9
   1f5e4:	mov	r0, fp
   1f5e8:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1f5ec:	mov	r4, r0
   1f5f0:	ldr	r3, [sp, #336]	; 0x150
   1f5f4:	b	1ef58 <_start@@Base+0x9e6c>
   1f5f8:	ldrb	r3, [sl, #1]
   1f5fc:	cmp	r3, #32
   1f600:	addhi	sl, sl, #1
   1f604:	bls	1ef00 <_start@@Base+0x9e14>
   1f608:	b	1ef14 <_start@@Base+0x9e28>
   1f60c:	add	r4, sl, #1
   1f610:	sub	r3, r9, r4
   1f614:	cmp	r3, #1
   1f618:	ble	1f62c <_start@@Base+0xa540>
   1f61c:	ldrb	r3, [sl, #1]
   1f620:	cmp	r3, #32
   1f624:	bhi	1f640 <_start@@Base+0xa554>
   1f628:	beq	1fd98 <_start@@Base+0xacac>
   1f62c:	mov	r1, r4
   1f630:	mov	r2, r9
   1f634:	mov	r0, fp
   1f638:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   1f63c:	mov	r4, r0
   1f640:	cmp	r9, r4
   1f644:	beq	1fe70 <_start@@Base+0xad84>
   1f648:	ldrb	r3, [r4]
   1f64c:	cmp	r3, #125	; 0x7d
   1f650:	movne	r3, #1
   1f654:	strne	r3, [sp, #336]	; 0x150
   1f658:	bne	1e2cc <_start@@Base+0x91e0>
   1f65c:	mov	r3, #0
   1f660:	add	r1, r4, #1
   1f664:	mov	r2, r9
   1f668:	mov	r0, fp
   1f66c:	str	r3, [sp, #336]	; 0x150
   1f670:	bl	17000 <_start@@Base+0x1f14>
   1f674:	mov	r4, r0
   1f678:	ldr	r3, [sp, #336]	; 0x150
   1f67c:	b	1ef58 <_start@@Base+0x9e6c>
   1f680:	mov	r3, #0
   1f684:	str	r3, [sp, #56]	; 0x38
   1f688:	and	r3, r7, #-16777216	; 0xff000000
   1f68c:	str	r3, [sp, #60]	; 0x3c
   1f690:	ldrd	r2, [sp, #56]	; 0x38
   1f694:	cmp	r3, #2046820352	; 0x7a000000
   1f698:	cmpeq	r2, #0
   1f69c:	beq	1f864 <_start@@Base+0xa778>
   1f6a0:	cmp	r3, #2030043136	; 0x79000000
   1f6a4:	cmpeq	r2, #0
   1f6a8:	bne	1f40c <_start@@Base+0xa320>
   1f6ac:	cmp	ip, #1
   1f6b0:	ble	1f40c <_start@@Base+0xa320>
   1f6b4:	mov	r2, r9
   1f6b8:	mov	r1, r4
   1f6bc:	mov	r0, fp
   1f6c0:	bl	19810 <_start@@Base+0x4724>
   1f6c4:	cmp	r0, r4
   1f6c8:	mov	r5, r0
   1f6cc:	beq	1f40c <_start@@Base+0xa320>
   1f6d0:	mov	r1, r0
   1f6d4:	mov	r2, r9
   1f6d8:	vstr	s18, [sp, #344]	; 0x158
   1f6dc:	add	r3, sp, #344	; 0x158
   1f6e0:	mov	r0, fp
   1f6e4:	bl	2f9b0 <flatcc_json_parser_float@@Base>
   1f6e8:	cmp	r5, r0
   1f6ec:	mov	sl, r0
   1f6f0:	beq	20c9c <_start@@Base+0xbbb0>
   1f6f4:	ldr	r3, [sp, #344]	; 0x158
   1f6f8:	str	r3, [r8, #4]
   1f6fc:	b	1eee4 <_start@@Base+0x9df8>
   1f700:	mov	r1, r4
   1f704:	mov	r3, #5
   1f708:	mov	r2, r9
   1f70c:	mov	r0, fp
   1f710:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1f714:	mov	r4, r0
   1f718:	b	1e2fc <_start@@Base+0x9210>
   1f71c:	mov	r1, sl
   1f720:	mov	r2, r9
   1f724:	mov	r0, fp
   1f728:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1f72c:	mov	sl, r0
   1f730:	b	1dcb4 <_start@@Base+0x8bc8>
   1f734:	nop	{0}
   1f738:	andcc	r0, r0, #0
   1f73c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f740:	andeq	r9, r5, ip, lsr r1
   1f744:	add	r3, pc, #564	; 0x234
   1f748:	ldrd	r2, [r3]
   1f74c:	ldrd	r0, [sp, #48]	; 0x30
   1f750:	cmp	r1, r3
   1f754:	cmpeq	r0, r2
   1f758:	bne	1fbd0 <_start@@Base+0xaae4>
   1f75c:	cmp	r8, #5
   1f760:	ble	1f140 <_start@@Base+0xa054>
   1f764:	mov	r2, r9
   1f768:	mov	r1, sl
   1f76c:	mov	r0, fp
   1f770:	bl	19640 <_start@@Base+0x4554>
   1f774:	cmp	r0, sl
   1f778:	mov	r4, r0
   1f77c:	beq	1f140 <_start@@Base+0xa054>
   1f780:	mvn	r3, #-1073741824	; 0xc0000000
   1f784:	mov	r2, #2
   1f788:	ldr	r0, [fp]
   1f78c:	mov	r1, #4
   1f790:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1f794:	cmp	r0, #0
   1f798:	bne	21694 <_start@@Base+0xc5a8>
   1f79c:	add	r3, sp, #320	; 0x140
   1f7a0:	mov	r1, r4
   1f7a4:	mov	r2, r9
   1f7a8:	mov	r0, fp
   1f7ac:	bl	1a3e4 <_start@@Base+0x52f8>
   1f7b0:	ldr	r3, [sp, #320]	; 0x140
   1f7b4:	mov	sl, r0
   1f7b8:	cmp	r3, #0
   1f7bc:	beq	1f808 <_start@@Base+0xa71c>
   1f7c0:	mov	r1, #1
   1f7c4:	ldr	r0, [fp]
   1f7c8:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1f7cc:	subs	r3, r0, #0
   1f7d0:	mov	r1, sl
   1f7d4:	mov	r2, r9
   1f7d8:	mov	r0, fp
   1f7dc:	beq	1d43c <_start@@Base+0x8350>
   1f7e0:	bl	1ca3c <_start@@Base+0x7950>
   1f7e4:	mov	r1, r0
   1f7e8:	add	r3, sp, #320	; 0x140
   1f7ec:	mov	r2, r9
   1f7f0:	mov	r0, fp
   1f7f4:	bl	194f8 <_start@@Base+0x440c>
   1f7f8:	ldr	r3, [sp, #320]	; 0x140
   1f7fc:	mov	sl, r0
   1f800:	cmp	r3, #0
   1f804:	bne	1f7c0 <_start@@Base+0xa6d4>
   1f808:	ldr	r0, [fp]
   1f80c:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   1f810:	cmp	r0, #0
   1f814:	str	r0, [sp, #324]	; 0x144
   1f818:	beq	1d43c <_start@@Base+0x8350>
   1f81c:	mov	r1, #31
   1f820:	ldr	r0, [fp]
   1f824:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1f828:	cmp	r0, #0
   1f82c:	beq	1d43c <_start@@Base+0x8350>
   1f830:	ldr	r3, [sp, #324]	; 0x144
   1f834:	str	r3, [r0]
   1f838:	b	1dcb4 <_start@@Base+0x8bc8>
   1f83c:	mov	sl, r1
   1f840:	b	1dcb4 <_start@@Base+0x8bc8>
   1f844:	cmp	r3, #34	; 0x22
   1f848:	bne	1f40c <_start@@Base+0xa320>
   1f84c:	add	r1, r4, #6
   1f850:	b	1f474 <_start@@Base+0xa388>
   1f854:	cmp	r3, #34	; 0x22
   1f858:	bne	1f40c <_start@@Base+0xa320>
   1f85c:	add	r1, r4, #6
   1f860:	b	1f050 <_start@@Base+0x9f64>
   1f864:	cmp	ip, #1
   1f868:	ble	1f40c <_start@@Base+0xa320>
   1f86c:	mov	r2, r9
   1f870:	mov	r1, r4
   1f874:	mov	r0, fp
   1f878:	bl	19810 <_start@@Base+0x4724>
   1f87c:	cmp	r0, r4
   1f880:	mov	r5, r0
   1f884:	beq	1f40c <_start@@Base+0xa320>
   1f888:	mov	r1, r0
   1f88c:	mov	r2, r9
   1f890:	vstr	s18, [sp, #344]	; 0x158
   1f894:	add	r3, sp, #344	; 0x158
   1f898:	mov	r0, fp
   1f89c:	bl	2f9b0 <flatcc_json_parser_float@@Base>
   1f8a0:	cmp	r5, r0
   1f8a4:	mov	sl, r0
   1f8a8:	beq	20c54 <_start@@Base+0xbb68>
   1f8ac:	ldr	r3, [sp, #344]	; 0x158
   1f8b0:	str	r3, [r8, #8]
   1f8b4:	b	1eee4 <_start@@Base+0x9df8>
   1f8b8:	add	r5, sl, #8
   1f8bc:	mov	r1, r9
   1f8c0:	mov	r0, r5
   1f8c4:	mov	r4, #0
   1f8c8:	bl	151e0 <_start@@Base+0xf4>
   1f8cc:	lsr	r1, r1, #16
   1f8d0:	str	r4, [sp, #128]	; 0x80
   1f8d4:	mov	r3, #0
   1f8d8:	movt	r3, #13876	; 0x3634
   1f8dc:	mov	r2, #0
   1f8e0:	lsl	r1, r1, #16
   1f8e4:	str	r1, [sp, #132]	; 0x84
   1f8e8:	ldrd	r0, [sp, #128]	; 0x80
   1f8ec:	cmp	r1, r3
   1f8f0:	cmpeq	r0, r2
   1f8f4:	bne	1fe10 <_start@@Base+0xad24>
   1f8f8:	sub	r3, r9, r5
   1f8fc:	cmp	r3, #2
   1f900:	ble	20328 <_start@@Base+0xb23c>
   1f904:	mov	r2, r9
   1f908:	mov	r1, r5
   1f90c:	mov	r0, fp
   1f910:	bl	198f8 <_start@@Base+0x480c>
   1f914:	cmp	r5, r0
   1f918:	mov	sl, r0
   1f91c:	beq	20324 <_start@@Base+0xb238>
   1f920:	mov	r1, #3
   1f924:	ldr	r0, [fp]
   1f928:	str	r4, [sp, #324]	; 0x144
   1f92c:	bl	28038 <flatcc_builder_start_table@@Base>
   1f930:	cmp	r0, r4
   1f934:	bne	1fb70 <_start@@Base+0xaa84>
   1f938:	add	r5, sp, #340	; 0x154
   1f93c:	mov	r1, sl
   1f940:	mov	r3, r5
   1f944:	mov	r2, r9
   1f948:	mov	r0, fp
   1f94c:	bl	19ae0 <_start@@Base+0x49f4>
   1f950:	ldr	r3, [sp, #340]	; 0x154
   1f954:	mov	sl, r0
   1f958:	cmp	r3, r4
   1f95c:	beq	20df4 <_start@@Base+0xbd08>
   1f960:	mov	r3, r4
   1f964:	add	r2, sp, #272	; 0x110
   1f968:	movt	r3, #65535	; 0xffff
   1f96c:	mov	r8, #1
   1f970:	strd	r6, [r2]
   1f974:	str	r3, [sp, #16]
   1f978:	b	1fa68 <_start@@Base+0xa97c>
   1f97c:	nop	{0}
   1f980:	strcc	r0, [r0, #-0]
   1f984:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f988:	andeq	r0, r0, r0
   1f98c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1f990:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1f994:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1f998:	cmnvs	r4, r0, lsl #2
   1f99c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1f9a0:	strbvs	r0, [r4, #-0]!
   1f9a4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1f9a8:	svcpl	0x00747970
   1f9ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f9b0:	andeq	r9, r5, ip, ror r1
   1f9b4:	mov	r4, #0
   1f9b8:	str	r4, [sp, #80]	; 0x50
   1f9bc:	str	r1, [sp, #84]	; 0x54
   1f9c0:	sub	r1, pc, #64	; 0x40
   1f9c4:	ldrd	r0, [r1]
   1f9c8:	ldrd	r2, [sp, #80]	; 0x50
   1f9cc:	cmp	r3, r1
   1f9d0:	cmpeq	r2, r0
   1f9d4:	bne	20570 <_start@@Base+0xb484>
   1f9d8:	sub	r3, r9, sl
   1f9dc:	cmp	r3, #4
   1f9e0:	ble	20570 <_start@@Base+0xb484>
   1f9e4:	mov	r1, sl
   1f9e8:	mov	r3, #4
   1f9ec:	mov	r2, r9
   1f9f0:	mov	r0, fp
   1f9f4:	bl	199e0 <_start@@Base+0x48f4>
   1f9f8:	cmp	r0, sl
   1f9fc:	mov	r1, r0
   1fa00:	beq	20570 <_start@@Base+0xb484>
   1fa04:	add	r3, sp, #344	; 0x158
   1fa08:	mov	r2, r9
   1fa0c:	str	r4, [sp]
   1fa10:	mov	r0, fp
   1fa14:	bl	31928 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1fa18:	ldr	r3, [sp, #344]	; 0x158
   1fa1c:	mov	sl, r0
   1fa20:	cmp	r3, r4
   1fa24:	beq	1fb68 <_start@@Base+0xaa7c>
   1fa28:	mov	r1, r4
   1fa2c:	ldr	r0, [fp]
   1fa30:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1fa34:	cmp	r0, #0
   1fa38:	beq	1fb68 <_start@@Base+0xaa7c>
   1fa3c:	ldr	r3, [sp, #344]	; 0x158
   1fa40:	str	r3, [r0]
   1fa44:	mov	r1, sl
   1fa48:	mov	r3, r5
   1fa4c:	mov	r2, r9
   1fa50:	mov	r0, fp
   1fa54:	bl	193b0 <_start@@Base+0x42c4>
   1fa58:	ldr	r3, [sp, #340]	; 0x154
   1fa5c:	mov	sl, r0
   1fa60:	cmp	r3, #0
   1fa64:	beq	20dec <_start@@Base+0xbd00>
   1fa68:	cmp	r9, sl
   1fa6c:	beq	1fa94 <_start@@Base+0xa9a8>
   1fa70:	ldrb	r3, [sl]
   1fa74:	cmp	r3, #34	; 0x22
   1fa78:	moveq	r3, #0
   1fa7c:	addeq	sl, sl, #1
   1fa80:	streq	r3, [fp, #12]
   1fa84:	beq	1fa94 <_start@@Base+0xa9a8>
   1fa88:	cmp	r3, #46	; 0x2e
   1fa8c:	strne	r8, [fp, #12]
   1fa90:	beq	20864 <_start@@Base+0xb778>
   1fa94:	mov	r1, r9
   1fa98:	mov	r0, sl
   1fa9c:	bl	151e0 <_start@@Base+0xf4>
   1faa0:	sub	r3, pc, #280	; 0x118
   1faa4:	ldrd	r2, [r3]
   1faa8:	cmp	r1, r3
   1faac:	cmpeq	r0, r2
   1fab0:	bls	1f9b4 <_start@@Base+0xa8c8>
   1fab4:	bic	r3, r0, #255	; 0xff
   1fab8:	sub	r7, pc, #296	; 0x128
   1fabc:	ldrd	r6, [r7]
   1fac0:	str	r3, [sp, #88]	; 0x58
   1fac4:	str	r1, [sp, #92]	; 0x5c
   1fac8:	ldrd	r2, [sp, #88]	; 0x58
   1facc:	cmp	r3, r7
   1fad0:	cmpeq	r2, r6
   1fad4:	beq	206a0 <_start@@Base+0xb5b4>
   1fad8:	ldr	r3, [sp, #16]
   1fadc:	str	r1, [sp, #140]	; 0x8c
   1fae0:	and	r3, r0, r3
   1fae4:	sub	r1, pc, #332	; 0x14c
   1fae8:	ldrd	r0, [r1]
   1faec:	str	r3, [sp, #136]	; 0x88
   1faf0:	ldrd	r2, [sp, #136]	; 0x88
   1faf4:	cmp	r3, r1
   1faf8:	cmpeq	r2, r0
   1fafc:	bne	20570 <_start@@Base+0xb484>
   1fb00:	sub	r3, r9, sl
   1fb04:	cmp	r3, #6
   1fb08:	ble	20570 <_start@@Base+0xb484>
   1fb0c:	mov	r1, sl
   1fb10:	mov	r3, #6
   1fb14:	mov	r2, r9
   1fb18:	mov	r0, fp
   1fb1c:	bl	199e0 <_start@@Base+0x48f4>
   1fb20:	cmp	r0, sl
   1fb24:	mov	r1, r0
   1fb28:	beq	20570 <_start@@Base+0xb484>
   1fb2c:	mov	r0, #0
   1fb30:	add	r3, sp, #344	; 0x158
   1fb34:	mov	r2, r9
   1fb38:	str	r0, [sp]
   1fb3c:	mov	r0, fp
   1fb40:	bl	31928 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1fb44:	ldr	r3, [sp, #344]	; 0x158
   1fb48:	mov	sl, r0
   1fb4c:	cmp	r3, #0
   1fb50:	beq	1fb68 <_start@@Base+0xaa7c>
   1fb54:	mov	r1, #2
   1fb58:	ldr	r0, [fp]
   1fb5c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1fb60:	cmp	r0, #0
   1fb64:	bne	1fa3c <_start@@Base+0xa950>
   1fb68:	add	r3, sp, #272	; 0x110
   1fb6c:	ldrd	r6, [r3]
   1fb70:	mov	r1, sl
   1fb74:	mov	r3, #33	; 0x21
   1fb78:	mov	r2, r9
   1fb7c:	mov	r0, fp
   1fb80:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1fb84:	ldr	r3, [sp, #324]	; 0x144
   1fb88:	mov	sl, r0
   1fb8c:	cmp	r3, #0
   1fb90:	beq	1d43c <_start@@Base+0x8350>
   1fb94:	mov	r1, #35	; 0x23
   1fb98:	ldr	r0, [fp]
   1fb9c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1fba0:	cmp	r0, #0
   1fba4:	beq	1d43c <_start@@Base+0x8350>
   1fba8:	ldr	r3, [sp, #324]	; 0x144
   1fbac:	str	r3, [r0]
   1fbb0:	b	1dcb4 <_start@@Base+0x8bc8>
   1fbb4:	ldrb	r3, [sl, #2]
   1fbb8:	cmp	r3, #32
   1fbbc:	bls	1f5e0 <_start@@Base+0xa4f4>
   1fbc0:	add	sl, sl, #2
   1fbc4:	b	1dcb4 <_start@@Base+0x8bc8>
   1fbc8:	mov	sl, r9
   1fbcc:	b	1f51c <_start@@Base+0xa430>
   1fbd0:	sub	r3, pc, #560	; 0x230
   1fbd4:	ldrd	r2, [r3]
   1fbd8:	ldrd	r0, [sp, #16]
   1fbdc:	cmp	r1, r3
   1fbe0:	cmpeq	r0, r2
   1fbe4:	bne	1f140 <_start@@Base+0xa054>
   1fbe8:	add	sl, sl, #8
   1fbec:	mov	r1, r9
   1fbf0:	mov	r0, sl
   1fbf4:	mov	r4, #0
   1fbf8:	bl	151e0 <_start@@Base+0xf4>
   1fbfc:	and	r3, r1, #-16777216	; 0xff000000
   1fc00:	str	r4, [sp, #168]	; 0xa8
   1fc04:	str	r3, [sp, #172]	; 0xac
   1fc08:	ldrd	r2, [sp, #168]	; 0xa8
   1fc0c:	cmp	r3, #1694498816	; 0x65000000
   1fc10:	cmpeq	r2, #0
   1fc14:	bne	1fe58 <_start@@Base+0xad6c>
   1fc18:	sub	r3, r9, sl
   1fc1c:	cmp	r3, #1
   1fc20:	ble	20358 <_start@@Base+0xb26c>
   1fc24:	mov	r1, sl
   1fc28:	mov	r2, r9
   1fc2c:	mov	r0, fp
   1fc30:	bl	19810 <_start@@Base+0x4724>
   1fc34:	cmp	sl, r0
   1fc38:	mov	r1, r0
   1fc3c:	beq	20358 <_start@@Base+0xb26c>
   1fc40:	ldr	lr, [pc, #-664]	; 1f9b0 <_start@@Base+0xa8c4>
   1fc44:	movw	r2, #16000	; 0x3e80
   1fc48:	movt	r2, #2
   1fc4c:	mov	r5, #8
   1fc50:	mov	r3, r4
   1fc54:	ldr	ip, [sp, #328]	; 0x148
   1fc58:	mov	r0, fp
   1fc5c:	stm	sp, {r5, ip, lr}
   1fc60:	str	r2, [sp, #12]
   1fc64:	mov	r2, r9
   1fc68:	bl	32438 <flatcc_json_parser_union_type@@Base>
   1fc6c:	mov	sl, r0
   1fc70:	b	1dcb4 <_start@@Base+0x8bc8>
   1fc74:	mov	r1, sl
   1fc78:	mov	r2, r9
   1fc7c:	mov	r0, fp
   1fc80:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc84:	mov	sl, r0
   1fc88:	b	1dcb4 <_start@@Base+0x8bc8>
   1fc8c:	add	r4, sl, #8
   1fc90:	mov	r1, r9
   1fc94:	mov	r0, r4
   1fc98:	bl	151e0 <_start@@Base+0xf4>
   1fc9c:	add	r3, pc, #836	; 0x344
   1fca0:	ldrd	r2, [r3]
   1fca4:	cmp	r1, r3
   1fca8:	cmpeq	r0, r2
   1fcac:	bne	200c4 <_start@@Base+0xafd8>
   1fcb0:	add	sl, sl, #16
   1fcb4:	mov	r1, r9
   1fcb8:	mov	r0, sl
   1fcbc:	bl	151e0 <_start@@Base+0xf4>
   1fcc0:	and	r0, r0, #-16777216	; 0xff000000
   1fcc4:	add	r3, pc, #804	; 0x324
   1fcc8:	ldrd	r2, [r3]
   1fccc:	strd	r0, [sp, #232]	; 0xe8
   1fcd0:	ldrd	r0, [sp, #232]	; 0xe8
   1fcd4:	cmp	r1, r3
   1fcd8:	cmpeq	r0, r2
   1fcdc:	bne	201cc <_start@@Base+0xb0e0>
   1fce0:	sub	r3, r9, sl
   1fce4:	cmp	r3, #5
   1fce8:	ble	21254 <_start@@Base+0xc168>
   1fcec:	mov	r1, sl
   1fcf0:	mov	r2, r9
   1fcf4:	mov	r0, fp
   1fcf8:	bl	19640 <_start@@Base+0x4554>
   1fcfc:	cmp	sl, r0
   1fd00:	mov	r1, r0
   1fd04:	beq	21254 <_start@@Base+0xc168>
   1fd08:	add	r3, sp, #324	; 0x144
   1fd0c:	mov	r2, r9
   1fd10:	mov	r0, fp
   1fd14:	bl	1d118 <_start@@Base+0x802c>
   1fd18:	ldr	r3, [sp, #324]	; 0x144
   1fd1c:	mov	sl, r0
   1fd20:	cmp	r3, #0
   1fd24:	beq	1d43c <_start@@Base+0x8350>
   1fd28:	mov	r1, #34	; 0x22
   1fd2c:	ldr	r0, [fp]
   1fd30:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   1fd34:	cmp	r0, #0
   1fd38:	beq	1d43c <_start@@Base+0x8350>
   1fd3c:	ldr	r3, [sp, #324]	; 0x144
   1fd40:	str	r3, [r0]
   1fd44:	b	1dcb4 <_start@@Base+0x8bc8>
   1fd48:	ldr	r1, [sp, #340]	; 0x154
   1fd4c:	add	r3, sp, #344	; 0x158
   1fd50:	ldrd	r2, [r3]
   1fd54:	cmp	r1, #0
   1fd58:	bne	20124 <_start@@Base+0xb038>
   1fd5c:	cmp	r3, #0
   1fd60:	cmpeq	r2, #127	; 0x7f
   1fd64:	sxtbls	r2, r2
   1fd68:	bls	1f550 <_start@@Base+0xa464>
   1fd6c:	mov	r1, r0
   1fd70:	mov	r3, #7
   1fd74:	mov	r2, r9
   1fd78:	mov	r0, fp
   1fd7c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1fd80:	mov	sl, r0
   1fd84:	cmp	r5, sl
   1fd88:	beq	1f51c <_start@@Base+0xa430>
   1fd8c:	add	r3, sp, #332	; 0x14c
   1fd90:	ldrsb	r2, [r3]
   1fd94:	b	1f550 <_start@@Base+0xa464>
   1fd98:	ldrb	r3, [sl, #2]
   1fd9c:	cmp	r3, #32
   1fda0:	addhi	r4, sl, #2
   1fda4:	bls	1f62c <_start@@Base+0xa540>
   1fda8:	b	1f640 <_start@@Base+0xa554>
   1fdac:	mov	r1, sl
   1fdb0:	mov	r2, r9
   1fdb4:	mov	r0, fp
   1fdb8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fdbc:	mov	sl, r0
   1fdc0:	b	1dcb4 <_start@@Base+0x8bc8>
   1fdc4:	mov	r4, r0
   1fdc8:	mov	r1, r4
   1fdcc:	mov	r2, r9
   1fdd0:	mov	r0, fp
   1fdd4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fdd8:	mov	sl, r0
   1fddc:	b	1dcb4 <_start@@Base+0x8bc8>
   1fde0:	mov	r1, sl
   1fde4:	mov	r2, r9
   1fde8:	mov	r0, fp
   1fdec:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fdf0:	mov	sl, r0
   1fdf4:	b	1dcb4 <_start@@Base+0x8bc8>
   1fdf8:	mov	r1, r4
   1fdfc:	mov	r2, r9
   1fe00:	mov	r0, fp
   1fe04:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fe08:	mov	sl, r0
   1fe0c:	b	1dcb4 <_start@@Base+0x8bc8>
   1fe10:	mov	r1, r5
   1fe14:	mov	r2, r9
   1fe18:	mov	r0, fp
   1fe1c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fe20:	mov	sl, r0
   1fe24:	b	1dcb4 <_start@@Base+0x8bc8>
   1fe28:	mov	r1, r0
   1fe2c:	add	r0, sp, #344	; 0x158
   1fe30:	ldr	r3, [pc, #448]	; 1fff8 <_start@@Base+0xaf0c>
   1fe34:	mov	r2, r9
   1fe38:	str	r0, [sp]
   1fe3c:	mov	r0, fp
   1fe40:	bl	1a67c <_start@@Base+0x5590>
   1fe44:	cmp	r9, r0
   1fe48:	cmpne	sl, r0
   1fe4c:	beq	21394 <_start@@Base+0xc2a8>
   1fe50:	mov	sl, r0
   1fe54:	b	1f0d0 <_start@@Base+0x9fe4>
   1fe58:	mov	r1, sl
   1fe5c:	mov	r2, r9
   1fe60:	mov	r0, fp
   1fe64:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fe68:	mov	sl, r0
   1fe6c:	b	1dcb4 <_start@@Base+0x8bc8>
   1fe70:	mov	ip, #0
   1fe74:	mov	r3, #10
   1fe78:	mov	r2, r9
   1fe7c:	mov	r1, r9
   1fe80:	mov	r0, fp
   1fe84:	str	ip, [sp, #336]	; 0x150
   1fe88:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   1fe8c:	mov	r4, r0
   1fe90:	ldr	r3, [sp, #336]	; 0x150
   1fe94:	b	1ef58 <_start@@Base+0x9e6c>
   1fe98:	mov	r1, sl
   1fe9c:	mov	r2, r9
   1fea0:	mov	r0, fp
   1fea4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   1fea8:	mov	sl, r0
   1feac:	b	1dcb4 <_start@@Base+0x8bc8>
   1feb0:	mov	r3, #0
   1feb4:	add	r4, sl, #8
   1feb8:	mov	r1, r9
   1febc:	mov	r0, r4
   1fec0:	str	r3, [sp, #224]	; 0xe0
   1fec4:	bl	151e0 <_start@@Base+0xf4>
   1fec8:	and	r3, r1, #-16777216	; 0xff000000
   1fecc:	str	r3, [sp, #228]	; 0xe4
   1fed0:	ldrd	r2, [sp, #224]	; 0xe0
   1fed4:	cmp	r3, #2030043136	; 0x79000000
   1fed8:	cmpeq	r2, #0
   1fedc:	bne	201fc <_start@@Base+0xb110>
   1fee0:	sub	r3, r9, r4
   1fee4:	cmp	r3, #1
   1fee8:	ble	20dd4 <_start@@Base+0xbce8>
   1feec:	mov	r2, r9
   1fef0:	mov	r1, r4
   1fef4:	mov	r0, fp
   1fef8:	bl	19810 <_start@@Base+0x4724>
   1fefc:	cmp	r4, r0
   1ff00:	mov	sl, r0
   1ff04:	beq	20dd0 <_start@@Base+0xbce4>
   1ff08:	mov	r2, #1
   1ff0c:	mvn	r3, #0
   1ff10:	ldr	r0, [fp]
   1ff14:	mov	r1, r2
   1ff18:	bl	278a0 <flatcc_builder_start_vector@@Base>
   1ff1c:	cmp	r0, #0
   1ff20:	bne	1d43c <_start@@Base+0x8350>
   1ff24:	mov	r1, sl
   1ff28:	add	r3, sp, #320	; 0x140
   1ff2c:	mov	r2, r9
   1ff30:	mov	r0, fp
   1ff34:	bl	1a3e4 <_start@@Base+0x52f8>
   1ff38:	ldr	r3, [sp, #320]	; 0x140
   1ff3c:	mov	sl, r0
   1ff40:	cmp	r3, #0
   1ff44:	beq	21320 <_start@@Base+0xc234>
   1ff48:	mov	r8, #0
   1ff4c:	b	1ff7c <_start@@Base+0xae90>
   1ff50:	ldrb	ip, [sp, #344]	; 0x158
   1ff54:	add	r3, sp, #320	; 0x140
   1ff58:	mov	r1, r4
   1ff5c:	mov	r2, r9
   1ff60:	mov	r0, fp
   1ff64:	strb	ip, [r5]
   1ff68:	bl	194f8 <_start@@Base+0x440c>
   1ff6c:	ldr	r3, [sp, #320]	; 0x140
   1ff70:	mov	sl, r0
   1ff74:	cmp	r3, #0
   1ff78:	beq	21320 <_start@@Base+0xc234>
   1ff7c:	mov	r1, #1
   1ff80:	ldr	r0, [fp]
   1ff84:	strb	r8, [sp, #344]	; 0x158
   1ff88:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   1ff8c:	subs	r5, r0, #0
   1ff90:	mov	r1, sl
   1ff94:	add	r3, sp, #344	; 0x158
   1ff98:	mov	r2, r9
   1ff9c:	mov	r0, fp
   1ffa0:	beq	1d43c <_start@@Base+0x8350>
   1ffa4:	bl	181d8 <_start@@Base+0x30ec>
   1ffa8:	cmp	sl, r0
   1ffac:	mov	r4, r0
   1ffb0:	bne	1ff50 <_start@@Base+0xae64>
   1ffb4:	add	r1, sp, #344	; 0x158
   1ffb8:	ldr	r3, [pc, #60]	; 1fffc <_start@@Base+0xaf10>
   1ffbc:	mov	r2, r9
   1ffc0:	mov	r0, fp
   1ffc4:	str	r1, [sp]
   1ffc8:	mov	r1, r4
   1ffcc:	bl	1b820 <_start@@Base+0x6734>
   1ffd0:	cmp	r9, r0
   1ffd4:	cmpne	r4, r0
   1ffd8:	mov	sl, r0
   1ffdc:	mov	r4, r0
   1ffe0:	bne	1ff50 <_start@@Base+0xae64>
   1ffe4:	b	1d43c <_start@@Base+0x8350>
   1ffe8:	rsbvc	r6, r1, r5, ror #6
   1ffec:	smcvs	54867	; 0xd653
   1fff0:	strvc	r0, [r0], #-0
   1fff4:	svcpl	0x00746573
   1fff8:	andeq	r9, r5, ip, asr #2
   1fffc:	andeq	r9, r5, r4, lsr #2
   20000:	add	r3, pc, #872	; 0x368
   20004:	ldrd	r2, [r3]
   20008:	cmp	r1, r3
   2000c:	cmpeq	r0, r2
   20010:	beq	20474 <_start@@Base+0xb388>
   20014:	add	r3, pc, #860	; 0x35c
   20018:	ldrd	r2, [r3]
   2001c:	cmp	r1, r3
   20020:	cmpeq	r0, r2
   20024:	bne	20c84 <_start@@Base+0xbb98>
   20028:	sub	r3, r9, sl
   2002c:	cmp	r3, #8
   20030:	ble	21184 <_start@@Base+0xc098>
   20034:	mov	r2, r9
   20038:	mov	r1, sl
   2003c:	mov	r0, fp
   20040:	bl	19728 <_start@@Base+0x463c>
   20044:	cmp	sl, r0
   20048:	mov	r8, r0
   2004c:	beq	21180 <_start@@Base+0xc094>
   20050:	add	r3, sp, #344	; 0x158
   20054:	mov	r4, #0
   20058:	mov	r5, #0
   2005c:	mov	r1, r0
   20060:	mov	r2, r9
   20064:	mov	r0, fp
   20068:	strd	r4, [r3]
   2006c:	bl	1806c <_start@@Base+0x2f80>
   20070:	cmp	r0, r8
   20074:	mov	sl, r0
   20078:	beq	21544 <_start@@Base+0xc458>
   2007c:	add	r3, sp, #344	; 0x158
   20080:	ldrd	r2, [r3]
   20084:	orrs	r3, r2, r3
   20088:	bne	20098 <_start@@Base+0xafac>
   2008c:	ldr	r3, [fp, #8]
   20090:	tst	r3, #2
   20094:	beq	1dcb4 <_start@@Base+0x8bc8>
   20098:	mov	r3, #8
   2009c:	mov	r1, #19
   200a0:	ldr	r0, [fp]
   200a4:	mov	r2, r3
   200a8:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   200ac:	cmp	r0, #0
   200b0:	beq	1d43c <_start@@Base+0x8350>
   200b4:	add	r3, sp, #344	; 0x158
   200b8:	ldrd	r2, [r3]
   200bc:	strd	r2, [r0]
   200c0:	b	1dcb4 <_start@@Base+0x8bc8>
   200c4:	mov	r1, r4
   200c8:	mov	r2, r9
   200cc:	mov	r0, fp
   200d0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   200d4:	mov	sl, r0
   200d8:	b	1dcb4 <_start@@Base+0x8bc8>
   200dc:	mov	r1, sl
   200e0:	mov	r2, r9
   200e4:	mov	r0, fp
   200e8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   200ec:	mov	sl, r0
   200f0:	b	1dcb4 <_start@@Base+0x8bc8>
   200f4:	mov	r1, r4
   200f8:	mov	r2, r9
   200fc:	mov	r0, fp
   20100:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20104:	mov	sl, r0
   20108:	b	1dcb4 <_start@@Base+0x8bc8>
   2010c:	mov	r1, r5
   20110:	mov	r2, r9
   20114:	mov	r0, fp
   20118:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   2011c:	mov	sl, r0
   20120:	b	1dcb4 <_start@@Base+0x8bc8>
   20124:	cmp	r3, #0
   20128:	cmpeq	r2, #128	; 0x80
   2012c:	rsbls	r2, r2, #0
   20130:	sxtbls	r2, r2
   20134:	bls	1f550 <_start@@Base+0xa464>
   20138:	mov	r1, r0
   2013c:	mov	r3, #8
   20140:	mov	r2, r9
   20144:	mov	r0, fp
   20148:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2014c:	mov	sl, r0
   20150:	b	1fd84 <_start@@Base+0xac98>
   20154:	mov	r1, r4
   20158:	mov	r2, r9
   2015c:	mov	r0, fp
   20160:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20164:	mov	sl, r0
   20168:	b	1dcb4 <_start@@Base+0x8bc8>
   2016c:	mov	r1, r0
   20170:	add	r0, sp, #344	; 0x158
   20174:	ldr	r3, [pc, #516]	; 20380 <_start@@Base+0xb294>
   20178:	mov	r2, r9
   2017c:	str	r0, [sp]
   20180:	mov	r0, fp
   20184:	bl	1a4b8 <_start@@Base+0x53cc>
   20188:	cmp	r9, r0
   2018c:	cmpne	sl, r0
   20190:	mov	sl, r0
   20194:	bne	1d924 <_start@@Base+0x8838>
   20198:	b	1d43c <_start@@Base+0x8350>
   2019c:	mov	r1, r4
   201a0:	mov	r2, r9
   201a4:	mov	r0, fp
   201a8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   201ac:	mov	sl, r0
   201b0:	b	1dcb4 <_start@@Base+0x8bc8>
   201b4:	mov	r1, r4
   201b8:	mov	r2, r9
   201bc:	mov	r0, fp
   201c0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   201c4:	mov	sl, r0
   201c8:	b	1dcb4 <_start@@Base+0x8bc8>
   201cc:	mov	r1, sl
   201d0:	mov	r2, r9
   201d4:	mov	r0, fp
   201d8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   201dc:	mov	sl, r0
   201e0:	b	1dcb4 <_start@@Base+0x8bc8>
   201e4:	mov	r1, r4
   201e8:	mov	r2, r9
   201ec:	mov	r0, fp
   201f0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   201f4:	mov	sl, r0
   201f8:	b	1dcb4 <_start@@Base+0x8bc8>
   201fc:	mov	r1, r4
   20200:	mov	r2, r9
   20204:	mov	r0, fp
   20208:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   2020c:	mov	sl, r0
   20210:	b	1dcb4 <_start@@Base+0x8bc8>
   20214:	mov	r1, sl
   20218:	mov	r2, r9
   2021c:	mov	r0, fp
   20220:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20224:	mov	sl, r0
   20228:	b	1dcb4 <_start@@Base+0x8bc8>
   2022c:	sub	r3, r9, r8
   20230:	cmp	r3, #2
   20234:	ble	20e1c <_start@@Base+0xbd30>
   20238:	mov	r2, r9
   2023c:	mov	r1, r8
   20240:	mov	r0, fp
   20244:	bl	198f8 <_start@@Base+0x480c>
   20248:	cmp	r8, r0
   2024c:	mov	sl, r0
   20250:	beq	20e18 <_start@@Base+0xbd2c>
   20254:	ldr	r0, [fp]
   20258:	bl	27a18 <flatcc_builder_start_offset_vector@@Base>
   2025c:	cmp	r0, #0
   20260:	bne	1d43c <_start@@Base+0x8350>
   20264:	mov	r1, sl
   20268:	add	r3, sp, #320	; 0x140
   2026c:	mov	r2, r9
   20270:	mov	r0, fp
   20274:	bl	1a3e4 <_start@@Base+0x52f8>
   20278:	ldr	r3, [sp, #320]	; 0x140
   2027c:	mov	sl, r0
   20280:	cmp	r3, #0
   20284:	beq	202f0 <_start@@Base+0xb204>
   20288:	add	r4, sp, #324	; 0x144
   2028c:	mov	r1, sl
   20290:	mov	r3, r4
   20294:	mov	r2, r9
   20298:	mov	r0, fp
   2029c:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   202a0:	ldr	r3, [sp, #324]	; 0x144
   202a4:	mov	sl, r0
   202a8:	mov	r1, #1
   202ac:	cmp	r3, #0
   202b0:	beq	1d43c <_start@@Base+0x8350>
   202b4:	ldr	r0, [fp]
   202b8:	bl	26f6c <flatcc_builder_extend_offset_vector@@Base>
   202bc:	subs	ip, r0, #0
   202c0:	add	r3, sp, #320	; 0x140
   202c4:	mov	r2, r9
   202c8:	mov	r1, sl
   202cc:	mov	r0, fp
   202d0:	beq	1d43c <_start@@Base+0x8350>
   202d4:	ldr	lr, [sp, #324]	; 0x144
   202d8:	str	lr, [ip]
   202dc:	bl	194f8 <_start@@Base+0x440c>
   202e0:	ldr	r3, [sp, #320]	; 0x140
   202e4:	mov	sl, r0
   202e8:	cmp	r3, #0
   202ec:	bne	2028c <_start@@Base+0xb1a0>
   202f0:	ldr	r0, [fp]
   202f4:	bl	29098 <flatcc_builder_end_offset_vector@@Base>
   202f8:	cmp	r0, #0
   202fc:	str	r0, [sp, #324]	; 0x144
   20300:	beq	1d43c <_start@@Base+0x8350>
   20304:	mov	r1, #28
   20308:	ldr	r0, [fp]
   2030c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   20310:	cmp	r0, #0
   20314:	beq	1d43c <_start@@Base+0x8350>
   20318:	ldr	r3, [sp, #324]	; 0x144
   2031c:	str	r3, [r0]
   20320:	b	1dcb4 <_start@@Base+0x8bc8>
   20324:	mov	r5, r0
   20328:	mov	r1, r5
   2032c:	mov	r2, r9
   20330:	mov	r0, fp
   20334:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20338:	mov	sl, r0
   2033c:	b	1dcb4 <_start@@Base+0x8bc8>
   20340:	mov	r1, sl
   20344:	mov	r2, r9
   20348:	mov	r0, fp
   2034c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20350:	mov	sl, r0
   20354:	b	1dcb4 <_start@@Base+0x8bc8>
   20358:	mov	r1, sl
   2035c:	mov	r2, r9
   20360:	mov	r0, fp
   20364:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20368:	mov	sl, r0
   2036c:	b	1dcb4 <_start@@Base+0x8bc8>
   20370:			; <UNDEFINED> instruction: 0x666e7631
   20374:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   20378:			; <UNDEFINED> instruction: 0x666e7631
   2037c:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   20380:	andeq	r9, r5, ip, ror #3
   20384:	andeq	r9, r5, r8, lsl r1
   20388:	muleq	r5, r8, r1
   2038c:	andeq	r9, r5, r4, lsr #3
   20390:	andeq	r9, r5, r8, asr r1
   20394:	add	sl, sl, #8
   20398:	mov	r1, r9
   2039c:	mov	r0, sl
   203a0:	mov	r5, #0
   203a4:	bl	151e0 <_start@@Base+0xf4>
   203a8:	and	r3, r1, #-16777216	; 0xff000000
   203ac:	str	r5, [sp, #264]	; 0x108
   203b0:	str	r3, [sp, #268]	; 0x10c
   203b4:	add	r3, sp, #264	; 0x108
   203b8:	ldrd	r2, [r3]
   203bc:	cmp	r3, #1627389952	; 0x61000000
   203c0:	cmpeq	r2, #0
   203c4:	bne	20f80 <_start@@Base+0xbe94>
   203c8:	sub	r3, r9, sl
   203cc:	cmp	r3, #1
   203d0:	ble	21400 <_start@@Base+0xc314>
   203d4:	mov	r2, r9
   203d8:	mov	r1, sl
   203dc:	mov	r0, fp
   203e0:	bl	19810 <_start@@Base+0x4724>
   203e4:	cmp	sl, r0
   203e8:	mov	r4, r0
   203ec:	beq	21400 <_start@@Base+0xc314>
   203f0:	add	r8, sp, #344	; 0x158
   203f4:	mov	r1, r0
   203f8:	str	r5, [sp, #344]	; 0x158
   203fc:	mov	r2, r9
   20400:	mov	r3, r8
   20404:	mov	r0, fp
   20408:	bl	18298 <_start@@Base+0x31ac>
   2040c:	cmp	r0, r4
   20410:	mov	sl, r0
   20414:	beq	21668 <_start@@Base+0xc57c>
   20418:	ldr	r3, [sp, #344]	; 0x158
   2041c:	cmp	r3, #0
   20420:	bne	20430 <_start@@Base+0xb344>
   20424:	ldr	r3, [fp, #8]
   20428:	tst	r3, #2
   2042c:	beq	1dcb4 <_start@@Base+0x8bc8>
   20430:	mov	r3, #4
   20434:	mov	r1, #20
   20438:	ldr	r0, [fp]
   2043c:	mov	r2, r3
   20440:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   20444:	cmp	r0, #0
   20448:	beq	1d43c <_start@@Base+0x8350>
   2044c:	ldr	r3, [sp, #344]	; 0x158
   20450:	str	r3, [r0]
   20454:	b	1dcb4 <_start@@Base+0x8bc8>
   20458:	mov	r5, r0
   2045c:	mov	r1, r5
   20460:	mov	r2, r9
   20464:	mov	r0, fp
   20468:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   2046c:	mov	sl, r0
   20470:	b	1dcb4 <_start@@Base+0x8bc8>
   20474:	sub	r3, r9, sl
   20478:	cmp	r3, #8
   2047c:	ble	210bc <_start@@Base+0xbfd0>
   20480:	mov	r2, r9
   20484:	mov	r1, sl
   20488:	mov	r0, fp
   2048c:	bl	19728 <_start@@Base+0x463c>
   20490:	cmp	sl, r0
   20494:	mov	r4, r0
   20498:	beq	210bc <_start@@Base+0xbfd0>
   2049c:	mov	ip, #0
   204a0:	add	r8, sp, #344	; 0x158
   204a4:	mov	r1, r0
   204a8:	mov	r3, r8
   204ac:	mov	r2, r9
   204b0:	mov	r0, fp
   204b4:	str	ip, [sp, #344]	; 0x158
   204b8:	bl	18108 <_start@@Base+0x301c>
   204bc:	cmp	r0, r4
   204c0:	mov	sl, r0
   204c4:	beq	21510 <_start@@Base+0xc424>
   204c8:	ldr	r3, [sp, #344]	; 0x158
   204cc:	cmp	r3, #0
   204d0:	bne	204e0 <_start@@Base+0xb3f4>
   204d4:	ldr	r3, [fp, #8]
   204d8:	tst	r3, #2
   204dc:	beq	1dcb4 <_start@@Base+0x8bc8>
   204e0:	mov	r3, #4
   204e4:	mov	r1, #17
   204e8:	ldr	r0, [fp]
   204ec:	mov	r2, r3
   204f0:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   204f4:	cmp	r0, #0
   204f8:	beq	1d43c <_start@@Base+0x8350>
   204fc:	ldr	r3, [sp, #344]	; 0x158
   20500:	str	r3, [r0]
   20504:	b	1dcb4 <_start@@Base+0x8bc8>
   20508:	mov	r1, sl
   2050c:	mov	r2, r9
   20510:	mov	r0, fp
   20514:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20518:	mov	sl, r0
   2051c:	b	1dcb4 <_start@@Base+0x8bc8>
   20520:	mov	r1, r0
   20524:	add	r0, sp, #344	; 0x158
   20528:	ldr	r3, [pc, #-428]	; 20384 <_start@@Base+0xb298>
   2052c:	mov	r2, r9
   20530:	str	r0, [sp]
   20534:	mov	r0, fp
   20538:	bl	1b5f8 <_start@@Base+0x650c>
   2053c:	cmp	r9, r0
   20540:	cmpne	r0, r4
   20544:	mov	sl, r0
   20548:	bne	1e420 <_start@@Base+0x9334>
   2054c:	b	1d43c <_start@@Base+0x8350>
   20550:	mov	sl, r0
   20554:	b	1d43c <_start@@Base+0x8350>
   20558:	mov	r1, r4
   2055c:	mov	r2, r9
   20560:	mov	r0, fp
   20564:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20568:	mov	r4, r0
   2056c:	b	1ec68 <_start@@Base+0x9b7c>
   20570:	mov	r1, sl
   20574:	mov	r2, r9
   20578:	mov	r0, fp
   2057c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20580:	mov	sl, r0
   20584:	b	1fa44 <_start@@Base+0xa958>
   20588:	mov	r1, sl
   2058c:	mov	r2, r9
   20590:	mov	r0, fp
   20594:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20598:	mov	sl, r0
   2059c:	b	1e0f0 <_start@@Base+0x9004>
   205a0:	mov	r1, r4
   205a4:	mov	r3, #5
   205a8:	mov	r2, r9
   205ac:	mov	r0, fp
   205b0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   205b4:	mov	r4, r0
   205b8:	b	1ecb8 <_start@@Base+0x9bcc>
   205bc:	mov	r1, r0
   205c0:	add	r0, sp, #344	; 0x158
   205c4:	ldr	r3, [pc, #-580]	; 20388 <_start@@Base+0xb29c>
   205c8:	mov	r2, r9
   205cc:	str	r0, [sp]
   205d0:	mov	r0, fp
   205d4:	bl	1b1f4 <_start@@Base+0x6108>
   205d8:	cmp	r9, r0
   205dc:	cmpne	r4, r0
   205e0:	beq	2061c <_start@@Base+0xb530>
   205e4:	mov	r4, r0
   205e8:	b	1ed34 <_start@@Base+0x9c48>
   205ec:	mov	r1, r0
   205f0:	add	r0, sp, #344	; 0x158
   205f4:	ldr	r3, [pc, #-624]	; 2038c <_start@@Base+0xb2a0>
   205f8:	mov	r2, r9
   205fc:	str	r0, [sp]
   20600:	mov	r0, fp
   20604:	bl	1b1f4 <_start@@Base+0x6108>
   20608:	cmp	r9, r0
   2060c:	cmpne	r4, r0
   20610:	beq	2061c <_start@@Base+0xb530>
   20614:	mov	r4, r0
   20618:	b	1ec5c <_start@@Base+0x9b70>
   2061c:	mov	r1, r0
   20620:	mov	r3, #33	; 0x21
   20624:	strd	r6, [sp, #184]	; 0xb8
   20628:	mov	r2, r9
   2062c:	mov	r0, fp
   20630:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   20634:	mov	r4, r0
   20638:	add	r3, sp, #320	; 0x140
   2063c:	mov	r1, r4
   20640:	mov	r2, r9
   20644:	mov	r0, fp
   20648:	bl	194f8 <_start@@Base+0x440c>
   2064c:	ldr	r3, [sp, #320]	; 0x140
   20650:	mov	sl, r0
   20654:	cmp	r3, #0
   20658:	bne	1eb88 <_start@@Base+0x9a9c>
   2065c:	add	r3, sp, #272	; 0x110
   20660:	ldrd	r6, [r3]
   20664:	ldr	r0, [fp]
   20668:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   2066c:	cmp	r0, #0
   20670:	str	r0, [sp, #324]	; 0x144
   20674:	beq	1d43c <_start@@Base+0x8350>
   20678:	mov	r1, #29
   2067c:	ldr	r0, [fp]
   20680:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   20684:	cmp	r0, #0
   20688:	beq	1d43c <_start@@Base+0x8350>
   2068c:	ldr	r3, [sp, #324]	; 0x144
   20690:	str	r3, [r0]
   20694:	b	1dcb4 <_start@@Base+0x8bc8>
   20698:	strd	r6, [sp, #184]	; 0xb8
   2069c:	b	20638 <_start@@Base+0xb54c>
   206a0:	sub	r3, r9, sl
   206a4:	cmp	r3, #7
   206a8:	ble	20570 <_start@@Base+0xb484>
   206ac:	mov	r1, sl
   206b0:	mov	r3, #7
   206b4:	mov	r2, r9
   206b8:	mov	r0, fp
   206bc:	bl	199e0 <_start@@Base+0x48f4>
   206c0:	cmp	r0, sl
   206c4:	mov	r1, r0
   206c8:	beq	20570 <_start@@Base+0xb484>
   206cc:	add	r3, sp, #344	; 0x158
   206d0:	mov	r2, r9
   206d4:	str	r8, [sp]
   206d8:	mov	r0, fp
   206dc:	bl	31928 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   206e0:	ldr	r3, [sp, #344]	; 0x158
   206e4:	mov	sl, r0
   206e8:	cmp	r3, #0
   206ec:	beq	1fb68 <_start@@Base+0xaa7c>
   206f0:	mov	r1, #1
   206f4:	ldr	r0, [fp]
   206f8:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   206fc:	cmp	r0, #0
   20700:	bne	1fa3c <_start@@Base+0xa950>
   20704:	b	1fb68 <_start@@Base+0xaa7c>
   20708:	sub	r3, r9, sl
   2070c:	cmp	r3, #3
   20710:	ble	20588 <_start@@Base+0xb49c>
   20714:	mov	r3, #3
   20718:	mov	r2, r9
   2071c:	mov	r1, sl
   20720:	mov	r0, fp
   20724:	bl	199e0 <_start@@Base+0x48f4>
   20728:	cmp	r0, sl
   2072c:	mov	r8, r0
   20730:	beq	20588 <_start@@Base+0xb49c>
   20734:	mov	r0, #0
   20738:	mov	r1, #0
   2073c:	add	r3, sp, #344	; 0x158
   20740:	mov	r2, r9
   20744:	strd	r0, [r3]
   20748:	mov	r1, r8
   2074c:	mov	r0, fp
   20750:	bl	17a54 <_start@@Base+0x2968>
   20754:	cmp	r8, r0
   20758:	mov	sl, r0
   2075c:	beq	20e80 <_start@@Base+0xbd94>
   20760:	add	r3, sp, #344	; 0x158
   20764:	ldrd	r2, [r3]
   20768:	orrs	r3, r2, r3
   2076c:	bne	2077c <_start@@Base+0xb690>
   20770:	ldr	r3, [fp, #8]
   20774:	tst	r3, #2
   20778:	beq	1e0f0 <_start@@Base+0x9004>
   2077c:	mov	r3, #8
   20780:	mov	r1, #1
   20784:	ldr	r0, [fp]
   20788:	mov	r2, r3
   2078c:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   20790:	cmp	r0, #0
   20794:	beq	20a74 <_start@@Base+0xb988>
   20798:	add	r3, sp, #344	; 0x158
   2079c:	ldrd	r2, [r3]
   207a0:	strd	r2, [r0]
   207a4:	b	1e0f0 <_start@@Base+0x9004>
   207a8:	ldrb	r2, [sl, #1]
   207ac:	add	r1, sl, #1
   207b0:	cmp	r2, #114	; 0x72
   207b4:	bne	1de38 <_start@@Base+0x8d4c>
   207b8:	ldrb	r2, [r1, #1]!
   207bc:	cmp	r2, #117	; 0x75
   207c0:	bne	1de38 <_start@@Base+0x8d4c>
   207c4:	ldrb	r2, [r1, #1]
   207c8:	cmp	r2, #101	; 0x65
   207cc:	bne	1de38 <_start@@Base+0x8d4c>
   207d0:	mov	r3, #1
   207d4:	add	r4, sl, #4
   207d8:	mov	r2, #1
   207dc:	strb	r3, [sp, #340]	; 0x154
   207e0:	b	1de8c <_start@@Base+0x8da0>
   207e4:	mov	r1, sl
   207e8:	mov	r2, r9
   207ec:	mov	r0, fp
   207f0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   207f4:	mov	sl, r0
   207f8:	b	1dcb4 <_start@@Base+0x8bc8>
   207fc:	mov	r1, r0
   20800:	add	r0, sp, #344	; 0x158
   20804:	ldr	r3, [pc, #-1148]	; 20390 <_start@@Base+0xb2a4>
   20808:	mov	r2, r9
   2080c:	str	r0, [sp]
   20810:	mov	r0, fp
   20814:	bl	1a4b8 <_start@@Base+0x53cc>
   20818:	cmp	r9, r0
   2081c:	cmpne	sl, r0
   20820:	beq	21394 <_start@@Base+0xc2a8>
   20824:	mov	sl, r0
   20828:	b	1f5b4 <_start@@Base+0xa4c8>
   2082c:	mov	r1, sl
   20830:	mov	r2, r9
   20834:	mov	r0, fp
   20838:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   2083c:	mov	sl, r0
   20840:	b	1dcb4 <_start@@Base+0x8bc8>
   20844:	mov	r1, sl
   20848:	mov	r2, r9
   2084c:	mov	r0, fp
   20850:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20854:	mov	sl, r0
   20858:	b	1dcb4 <_start@@Base+0x8bc8>
   2085c:	mov	sl, r9
   20860:	b	1d5f8 <_start@@Base+0x850c>
   20864:	mov	r1, sl
   20868:	mov	r3, #5
   2086c:	mov	r2, r9
   20870:	mov	r0, fp
   20874:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   20878:	mov	sl, r0
   2087c:	b	1fa94 <_start@@Base+0xa9a8>
   20880:	mov	r1, sl
   20884:	mov	r3, #5
   20888:	mov	r2, r9
   2088c:	mov	r0, fp
   20890:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   20894:	mov	sl, r0
   20898:	b	1e144 <_start@@Base+0x9058>
   2089c:	ldr	r1, [sp, #340]	; 0x154
   208a0:	add	r3, sp, #344	; 0x158
   208a4:	ldrd	r2, [r3]
   208a8:	cmp	r1, #0
   208ac:	beq	20bf0 <_start@@Base+0xbb04>
   208b0:	cmp	r3, #0
   208b4:	cmpeq	r2, #128	; 0x80
   208b8:	rsbls	r2, r2, #0
   208bc:	sxtbls	r2, r2
   208c0:	strbls	r2, [sp, #336]	; 0x150
   208c4:	bls	1d62c <_start@@Base+0x8540>
   208c8:	mov	r1, r0
   208cc:	mov	r3, #8
   208d0:	mov	r2, r9
   208d4:	mov	r0, fp
   208d8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   208dc:	mov	sl, r0
   208e0:	cmp	r4, sl
   208e4:	beq	1d5f8 <_start@@Base+0x850c>
   208e8:	add	r3, sp, #336	; 0x150
   208ec:	ldrsb	r2, [r3]
   208f0:	b	1d62c <_start@@Base+0x8540>
   208f4:	ldrb	r3, [r1, #1]
   208f8:	cmp	r3, #32
   208fc:	addhi	r1, r1, #1
   20900:	bls	1f490 <_start@@Base+0xa3a4>
   20904:	b	1f4a0 <_start@@Base+0xa3b4>
   20908:	mov	r3, #0
   2090c:	add	r4, sl, #16
   20910:	mov	r1, r9
   20914:	mov	r0, r4
   20918:	str	r3, [sp, #256]	; 0x100
   2091c:	bl	151e0 <_start@@Base+0xf4>
   20920:	and	r3, r1, #-16777216	; 0xff000000
   20924:	str	r3, [sp, #260]	; 0x104
   20928:	add	r3, sp, #256	; 0x100
   2092c:	ldrd	r2, [r3]
   20930:	cmp	r3, #1929379840	; 0x73000000
   20934:	cmpeq	r2, #0
   20938:	bne	20c3c <_start@@Base+0xbb50>
   2093c:	sub	r3, r9, r4
   20940:	cmp	r3, #1
   20944:	ble	21074 <_start@@Base+0xbf88>
   20948:	mov	r2, r9
   2094c:	mov	r1, r4
   20950:	mov	r0, fp
   20954:	bl	19810 <_start@@Base+0x4724>
   20958:	cmp	r4, r0
   2095c:	mov	sl, r0
   20960:	beq	21070 <_start@@Base+0xbf84>
   20964:	mov	r2, #8
   20968:	mvn	r3, #-536870912	; 0xe0000000
   2096c:	ldr	r0, [fp]
   20970:	mov	r1, r2
   20974:	bl	278a0 <flatcc_builder_start_vector@@Base>
   20978:	cmp	r0, #0
   2097c:	bne	1d43c <_start@@Base+0x8350>
   20980:	mov	r1, sl
   20984:	add	r3, sp, #320	; 0x140
   20988:	mov	r2, r9
   2098c:	mov	r0, fp
   20990:	bl	1a3e4 <_start@@Base+0x52f8>
   20994:	ldr	r3, [sp, #320]	; 0x140
   20998:	mov	sl, r0
   2099c:	cmp	r3, #0
   209a0:	beq	21430 <_start@@Base+0xc344>
   209a4:	vldr	d8, [pc, #988]	; 20d88 <_start@@Base+0xbc9c>
   209a8:	ldr	r5, [pc, #992]	; 20d90 <_start@@Base+0xbca4>
   209ac:	b	209dc <_start@@Base+0xb8f0>
   209b0:	vldr	d7, [sp, #344]	; 0x158
   209b4:	mov	r1, r0
   209b8:	add	r3, sp, #320	; 0x140
   209bc:	mov	r2, r9
   209c0:	mov	r0, fp
   209c4:	vstr	d7, [r4]
   209c8:	bl	194f8 <_start@@Base+0x440c>
   209cc:	ldr	r3, [sp, #320]	; 0x140
   209d0:	mov	sl, r0
   209d4:	cmp	r3, #0
   209d8:	beq	21430 <_start@@Base+0xc344>
   209dc:	mov	r1, #1
   209e0:	ldr	r0, [fp]
   209e4:	vstr	d8, [sp, #344]	; 0x158
   209e8:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   209ec:	subs	r4, r0, #0
   209f0:	mov	r1, sl
   209f4:	add	r3, sp, #344	; 0x158
   209f8:	mov	r2, r9
   209fc:	mov	r0, fp
   20a00:	beq	1d43c <_start@@Base+0x8350>
   20a04:	bl	2f878 <flatcc_json_parser_double@@Base>
   20a08:	cmp	r0, sl
   20a0c:	bne	209b0 <_start@@Base+0xb8c4>
   20a10:	add	r1, sp, #344	; 0x158
   20a14:	mov	r3, r5
   20a18:	mov	r2, r9
   20a1c:	mov	r0, fp
   20a20:	str	r1, [sp]
   20a24:	mov	r1, sl
   20a28:	bl	1a67c <_start@@Base+0x5590>
   20a2c:	cmp	r9, r0
   20a30:	cmpne	r0, sl
   20a34:	bne	209b0 <_start@@Base+0xb8c4>
   20a38:	mov	sl, r0
   20a3c:	b	1d43c <_start@@Base+0x8350>
   20a40:	mov	r1, sl
   20a44:	mov	r2, r9
   20a48:	mov	r0, fp
   20a4c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20a50:	mov	sl, r0
   20a54:	b	1dcb4 <_start@@Base+0x8bc8>
   20a58:	ldrb	r3, [r1, #1]
   20a5c:	cmp	r3, #32
   20a60:	addhi	r1, r1, #1
   20a64:	bls	1f06c <_start@@Base+0x9f80>
   20a68:	b	1f07c <_start@@Base+0x9f90>
   20a6c:	mov	r7, r9
   20a70:	b	1e074 <_start@@Base+0x8f88>
   20a74:	ldrd	r6, [sp, #16]
   20a78:	add	r3, sp, #280	; 0x118
   20a7c:	mov	r0, sl
   20a80:	strd	r4, [r3]
   20a84:	mov	sl, r0
   20a88:	mov	r1, sl
   20a8c:	mov	r3, #33	; 0x21
   20a90:	mov	r2, r9
   20a94:	mov	r0, fp
   20a98:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   20a9c:	ldr	r3, [sp, #324]	; 0x144
   20aa0:	mov	sl, r0
   20aa4:	cmp	r3, #0
   20aa8:	beq	1d43c <_start@@Base+0x8350>
   20aac:	mov	r1, #14
   20ab0:	ldr	r0, [fp]
   20ab4:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   20ab8:	cmp	r0, #0
   20abc:	beq	1d43c <_start@@Base+0x8350>
   20ac0:	ldr	r3, [sp, #324]	; 0x144
   20ac4:	str	r3, [r0]
   20ac8:	b	1dcb4 <_start@@Base+0x8bc8>
   20acc:	ldr	r0, [fp]
   20ad0:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   20ad4:	cmp	r0, #0
   20ad8:	str	r0, [sp, #324]	; 0x144
   20adc:	beq	1d43c <_start@@Base+0x8350>
   20ae0:	mov	r1, #30
   20ae4:	ldr	r0, [fp]
   20ae8:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   20aec:	cmp	r0, #0
   20af0:	beq	1d43c <_start@@Base+0x8350>
   20af4:	ldr	r3, [sp, #324]	; 0x144
   20af8:	str	r3, [r0]
   20afc:	b	1dcb4 <_start@@Base+0x8bc8>
   20b00:	ldr	r3, [sp, #340]	; 0x154
   20b04:	cmp	r3, #0
   20b08:	bne	212f8 <_start@@Base+0xc20c>
   20b0c:	add	r3, sp, #344	; 0x158
   20b10:	mov	r1, #0
   20b14:	ldrd	r2, [r3]
   20b18:	movw	r0, #65535	; 0xffff
   20b1c:	cmp	r3, r1
   20b20:	cmpeq	r2, r0
   20b24:	bhi	213b0 <_start@@Base+0xc2c4>
   20b28:	add	r3, sp, #316	; 0x13c
   20b2c:	uxth	r2, r2
   20b30:	add	r3, r3, #2
   20b34:	mov	sl, r7
   20b38:	strh	r2, [r3]
   20b3c:	b	1e0b0 <_start@@Base+0x8fc4>
   20b40:	mov	r1, sl
   20b44:	mov	r2, r9
   20b48:	mov	r0, fp
   20b4c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20b50:	mov	sl, r0
   20b54:	b	1dcb4 <_start@@Base+0x8bc8>
   20b58:	mov	r1, r8
   20b5c:	mov	r2, r9
   20b60:	mov	r0, fp
   20b64:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20b68:	mov	sl, r0
   20b6c:	b	1dcb4 <_start@@Base+0x8bc8>
   20b70:	mov	r4, r0
   20b74:	mov	r1, r4
   20b78:	mov	r2, r9
   20b7c:	mov	r0, fp
   20b80:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20b84:	mov	sl, r0
   20b88:	b	1dcb4 <_start@@Base+0x8bc8>
   20b8c:	ldr	r0, [fp]
   20b90:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   20b94:	cmp	r0, #0
   20b98:	str	r0, [sp, #324]	; 0x144
   20b9c:	beq	1d43c <_start@@Base+0x8350>
   20ba0:	mov	r1, #24
   20ba4:	ldr	r0, [fp]
   20ba8:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   20bac:	cmp	r0, #0
   20bb0:	beq	1d43c <_start@@Base+0x8350>
   20bb4:	ldr	r3, [sp, #324]	; 0x144
   20bb8:	str	r3, [r0]
   20bbc:	b	1dcb4 <_start@@Base+0x8bc8>
   20bc0:	add	r1, r1, #1
   20bc4:	mov	r2, r9
   20bc8:	mov	r0, fp
   20bcc:	bl	17000 <_start@@Base+0x1f14>
   20bd0:	mov	r5, r0
   20bd4:	b	1f0a4 <_start@@Base+0x9fb8>
   20bd8:	add	r1, r1, #1
   20bdc:	mov	r2, r9
   20be0:	mov	r0, fp
   20be4:	bl	17000 <_start@@Base+0x1f14>
   20be8:	mov	r5, r0
   20bec:	b	1f4c8 <_start@@Base+0xa3dc>
   20bf0:	cmp	r3, #0
   20bf4:	cmpeq	r2, #127	; 0x7f
   20bf8:	sxtbls	r2, r2
   20bfc:	strbls	r2, [sp, #336]	; 0x150
   20c00:	bls	1d62c <_start@@Base+0x8540>
   20c04:	mov	r1, r0
   20c08:	mov	r3, #7
   20c0c:	mov	r2, r9
   20c10:	mov	r0, fp
   20c14:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   20c18:	mov	sl, r0
   20c1c:	b	208e0 <_start@@Base+0xb7f4>
   20c20:	mov	r4, r0
   20c24:	mov	r1, r4
   20c28:	mov	r2, r9
   20c2c:	mov	r0, fp
   20c30:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20c34:	mov	sl, r0
   20c38:	b	1dcb4 <_start@@Base+0x8bc8>
   20c3c:	mov	r1, r4
   20c40:	mov	r2, r9
   20c44:	mov	r0, fp
   20c48:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20c4c:	mov	sl, r0
   20c50:	b	1dcb4 <_start@@Base+0x8bc8>
   20c54:	mov	r1, r0
   20c58:	add	r0, sp, #344	; 0x158
   20c5c:	ldr	r3, [pc, #304]	; 20d94 <_start@@Base+0xbca8>
   20c60:	mov	r2, r9
   20c64:	str	r0, [sp]
   20c68:	mov	r0, fp
   20c6c:	bl	1a4b8 <_start@@Base+0x53cc>
   20c70:	cmp	r9, r0
   20c74:	cmpne	sl, r0
   20c78:	beq	21394 <_start@@Base+0xc2a8>
   20c7c:	mov	sl, r0
   20c80:	b	1f8ac <_start@@Base+0xa7c0>
   20c84:	mov	r1, sl
   20c88:	mov	r2, r9
   20c8c:	mov	r0, fp
   20c90:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20c94:	mov	sl, r0
   20c98:	b	1dcb4 <_start@@Base+0x8bc8>
   20c9c:	mov	r1, r0
   20ca0:	add	r0, sp, #344	; 0x158
   20ca4:	ldr	r3, [pc, #236]	; 20d98 <_start@@Base+0xbcac>
   20ca8:	mov	r2, r9
   20cac:	str	r0, [sp]
   20cb0:	mov	r0, fp
   20cb4:	bl	1a4b8 <_start@@Base+0x53cc>
   20cb8:	cmp	r9, r0
   20cbc:	cmpne	sl, r0
   20cc0:	beq	21394 <_start@@Base+0xc2a8>
   20cc4:	mov	sl, r0
   20cc8:	b	1f6f4 <_start@@Base+0xa608>
   20ccc:	mov	r3, #29
   20cd0:	mov	r2, r9
   20cd4:	mov	r0, fp
   20cd8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   20cdc:	mov	sl, r0
   20ce0:	b	1d43c <_start@@Base+0x8350>
   20ce4:	mov	r1, r0
   20ce8:	add	r0, sp, #344	; 0x158
   20cec:	ldr	r3, [pc, #168]	; 20d9c <_start@@Base+0xbcb0>
   20cf0:	mov	r2, r9
   20cf4:	str	r0, [sp]
   20cf8:	mov	r0, fp
   20cfc:	bl	1a4b8 <_start@@Base+0x53cc>
   20d00:	cmp	r9, r0
   20d04:	cmpne	r0, r4
   20d08:	mov	sl, r0
   20d0c:	bne	1e968 <_start@@Base+0x987c>
   20d10:	b	1d43c <_start@@Base+0x8350>
   20d14:	ldrb	r1, [r0, #1]
   20d18:	add	r2, r0, #1
   20d1c:	cmp	r1, #114	; 0x72
   20d20:	bne	1d718 <_start@@Base+0x862c>
   20d24:	ldrb	r1, [r2, #1]!
   20d28:	cmp	r1, #117	; 0x75
   20d2c:	bne	1d718 <_start@@Base+0x862c>
   20d30:	ldrb	r2, [r2, #1]
   20d34:	cmp	r2, #101	; 0x65
   20d38:	moveq	r3, #1
   20d3c:	addeq	sl, r0, #4
   20d40:	strbeq	r3, [sp, #336]	; 0x150
   20d44:	bne	1d718 <_start@@Base+0x862c>
   20d48:	b	1f3fc <_start@@Base+0xa310>
   20d4c:	ldr	r3, [sp, #340]	; 0x154
   20d50:	cmp	r3, #0
   20d54:	str	r3, [sp, #16]
   20d58:	bne	21464 <_start@@Base+0xc378>
   20d5c:	add	r3, sp, #344	; 0x158
   20d60:	ldrd	r2, [r3]
   20d64:	cmp	r3, #0
   20d68:	cmpeq	r2, #255	; 0xff
   20d6c:	bhi	21490 <_start@@Base+0xc3a4>
   20d70:	uxtb	r3, r2
   20d74:	mov	sl, r0
   20d78:	adds	r3, r3, #0
   20d7c:	movne	r3, #1
   20d80:	strb	r3, [sp, #336]	; 0x150
   20d84:	b	1f3f4 <_start@@Base+0xa308>
	...
   20d90:	andeq	r9, r5, r4, ror #4
   20d94:	andeq	r9, r5, r4, ror #2
   20d98:	andeq	r9, r5, r0, ror r1
   20d9c:	andeq	r9, r5, r0, ror #3
   20da0:	andeq	r9, r5, r8, asr #3
   20da4:	ldrdeq	r9, [r5], -r4
   20da8:	andeq	r9, r5, r0, lsr r1
   20dac:	strdeq	r9, [r5], -r8
   20db0:	andeq	r9, r5, r0, lsl r2
   20db4:	andeq	r9, r5, r8, lsr #4
   20db8:	andeq	r9, r5, r0, asr #4
   20dbc:	andeq	r9, r5, r8, asr r2
   20dc0:	andeq	r9, r5, r4, lsl #4
   20dc4:	andeq	r9, r5, ip, lsl r2
   20dc8:	andeq	r9, r5, r4, lsr r2
   20dcc:	andeq	r9, r5, ip, asr #4
   20dd0:	mov	r4, r0
   20dd4:	mov	r1, r4
   20dd8:	mov	r2, r9
   20ddc:	mov	r0, fp
   20de0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20de4:	mov	sl, r0
   20de8:	b	1dcb4 <_start@@Base+0x8bc8>
   20dec:	add	r3, sp, #272	; 0x110
   20df0:	ldrd	r6, [r3]
   20df4:	ldr	r3, [fp, #24]
   20df8:	cmp	r3, #0
   20dfc:	bne	1fb70 <_start@@Base+0xaa84>
   20e00:	ldr	r0, [fp]
   20e04:	bl	289b8 <flatcc_builder_end_table@@Base>
   20e08:	cmp	r0, #0
   20e0c:	str	r0, [sp, #324]	; 0x144
   20e10:	bne	1fb94 <_start@@Base+0xaaa8>
   20e14:	b	1fb70 <_start@@Base+0xaa84>
   20e18:	mov	r8, r0
   20e1c:	mov	r1, r8
   20e20:	mov	r2, r9
   20e24:	mov	r0, fp
   20e28:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20e2c:	mov	sl, r0
   20e30:	b	1dcb4 <_start@@Base+0x8bc8>
   20e34:	mov	r8, r0
   20e38:	mov	r1, r8
   20e3c:	mov	r2, r9
   20e40:	mov	r0, fp
   20e44:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20e48:	mov	sl, r0
   20e4c:	b	1dcb4 <_start@@Base+0x8bc8>
   20e50:	ldrd	r6, [sp, #16]
   20e54:	add	r3, sp, #280	; 0x118
   20e58:	strd	r4, [r3]
   20e5c:	ldr	r3, [fp, #24]
   20e60:	cmp	r3, #0
   20e64:	bne	20a88 <_start@@Base+0xb99c>
   20e68:	ldr	r0, [fp]
   20e6c:	bl	289b8 <flatcc_builder_end_table@@Base>
   20e70:	cmp	r0, #0
   20e74:	str	r0, [sp, #324]	; 0x144
   20e78:	bne	20aac <_start@@Base+0xb9c0>
   20e7c:	b	20a88 <_start@@Base+0xb99c>
   20e80:	mov	r1, r0
   20e84:	add	r0, sp, #344	; 0x158
   20e88:	ldr	r3, [pc, #-240]	; 20da0 <_start@@Base+0xbcb4>
   20e8c:	mov	r2, r9
   20e90:	str	r0, [sp]
   20e94:	mov	r0, fp
   20e98:	bl	1c818 <_start@@Base+0x772c>
   20e9c:	cmp	r9, r0
   20ea0:	cmpne	sl, r0
   20ea4:	beq	21764 <_start@@Base+0xc678>
   20ea8:	mov	sl, r0
   20eac:	b	20760 <_start@@Base+0xb674>
   20eb0:	mov	r3, #0
   20eb4:	add	sl, sl, #8
   20eb8:	mov	r1, r9
   20ebc:	mov	r0, sl
   20ec0:	str	r3, [sp, #288]	; 0x120
   20ec4:	bl	151e0 <_start@@Base+0xf4>
   20ec8:	and	r3, r1, #-16777216	; 0xff000000
   20ecc:	str	r3, [sp, #292]	; 0x124
   20ed0:	add	r3, sp, #288	; 0x120
   20ed4:	ldrd	r2, [r3]
   20ed8:	cmp	r3, #1627389952	; 0x61000000
   20edc:	cmpeq	r2, #0
   20ee0:	bne	212e0 <_start@@Base+0xc1f4>
   20ee4:	sub	r3, r9, sl
   20ee8:	cmp	r3, #1
   20eec:	ble	214e8 <_start@@Base+0xc3fc>
   20ef0:	mov	r2, r9
   20ef4:	mov	r1, sl
   20ef8:	mov	r0, fp
   20efc:	bl	19810 <_start@@Base+0x4724>
   20f00:	cmp	sl, r0
   20f04:	mov	r8, r0
   20f08:	beq	214e8 <_start@@Base+0xc3fc>
   20f0c:	add	r3, sp, #344	; 0x158
   20f10:	mov	r4, #0
   20f14:	mov	r5, #0
   20f18:	mov	r1, r0
   20f1c:	mov	r2, r9
   20f20:	mov	r0, fp
   20f24:	strd	r4, [r3]
   20f28:	bl	17a54 <_start@@Base+0x2968>
   20f2c:	cmp	r0, r8
   20f30:	mov	sl, r0
   20f34:	beq	216bc <_start@@Base+0xc5d0>
   20f38:	add	r3, sp, #344	; 0x158
   20f3c:	ldrd	r2, [r3]
   20f40:	orrs	r3, r2, r3
   20f44:	bne	20f54 <_start@@Base+0xbe68>
   20f48:	ldr	r3, [fp, #8]
   20f4c:	tst	r3, #2
   20f50:	beq	1dcb4 <_start@@Base+0x8bc8>
   20f54:	mov	r3, #8
   20f58:	mov	r1, #22
   20f5c:	ldr	r0, [fp]
   20f60:	mov	r2, r3
   20f64:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   20f68:	cmp	r0, #0
   20f6c:	beq	1d43c <_start@@Base+0x8350>
   20f70:	add	r3, sp, #344	; 0x158
   20f74:	ldrd	r2, [r3]
   20f78:	strd	r2, [r0]
   20f7c:	b	1dcb4 <_start@@Base+0x8bc8>
   20f80:	mov	r1, sl
   20f84:	mov	r2, r9
   20f88:	mov	r0, fp
   20f8c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   20f90:	mov	sl, r0
   20f94:	b	1dcb4 <_start@@Base+0x8bc8>
   20f98:	mov	sl, r4
   20f9c:	b	1e6a8 <_start@@Base+0x95bc>
   20fa0:	ldr	r0, [fp]
   20fa4:	bl	27a18 <flatcc_builder_start_offset_vector@@Base>
   20fa8:	cmp	r0, #0
   20fac:	bne	1d43c <_start@@Base+0x8350>
   20fb0:	mov	r1, sl
   20fb4:	add	r3, sp, #320	; 0x140
   20fb8:	mov	r2, r9
   20fbc:	mov	r0, fp
   20fc0:	bl	1a3e4 <_start@@Base+0x52f8>
   20fc4:	ldr	r3, [sp, #320]	; 0x140
   20fc8:	mov	sl, r0
   20fcc:	cmp	r3, #0
   20fd0:	beq	2103c <_start@@Base+0xbf50>
   20fd4:	add	r4, sp, #324	; 0x144
   20fd8:	mov	r1, sl
   20fdc:	mov	r3, r4
   20fe0:	mov	r2, r9
   20fe4:	mov	r0, fp
   20fe8:	bl	1d3f0 <_start@@Base+0x8304>
   20fec:	ldr	r3, [sp, #324]	; 0x144
   20ff0:	mov	sl, r0
   20ff4:	mov	r1, #1
   20ff8:	cmp	r3, #0
   20ffc:	beq	1d43c <_start@@Base+0x8350>
   21000:	ldr	r0, [fp]
   21004:	bl	26f6c <flatcc_builder_extend_offset_vector@@Base>
   21008:	subs	ip, r0, #0
   2100c:	add	r3, sp, #320	; 0x140
   21010:	mov	r2, r9
   21014:	mov	r1, sl
   21018:	mov	r0, fp
   2101c:	beq	1d43c <_start@@Base+0x8350>
   21020:	ldr	lr, [sp, #324]	; 0x144
   21024:	str	lr, [ip]
   21028:	bl	194f8 <_start@@Base+0x440c>
   2102c:	ldr	r3, [sp, #320]	; 0x140
   21030:	mov	sl, r0
   21034:	cmp	r3, #0
   21038:	bne	20fd8 <_start@@Base+0xbeec>
   2103c:	ldr	r0, [fp]
   21040:	bl	29098 <flatcc_builder_end_offset_vector@@Base>
   21044:	cmp	r0, #0
   21048:	str	r0, [sp, #324]	; 0x144
   2104c:	beq	1d43c <_start@@Base+0x8350>
   21050:	mov	r1, #11
   21054:	ldr	r0, [fp]
   21058:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   2105c:	cmp	r0, #0
   21060:	beq	1d43c <_start@@Base+0x8350>
   21064:	ldr	r3, [sp, #324]	; 0x144
   21068:	str	r3, [r0]
   2106c:	b	1dcb4 <_start@@Base+0x8bc8>
   21070:	mov	r4, r0
   21074:	mov	r1, r4
   21078:	mov	r2, r9
   2107c:	mov	r0, fp
   21080:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   21084:	mov	sl, r0
   21088:	b	1dcb4 <_start@@Base+0x8bc8>
   2108c:	mov	r1, r0
   21090:	add	r0, sp, #344	; 0x158
   21094:	ldr	r3, [pc, #-760]	; 20da4 <_start@@Base+0xbcb8>
   21098:	mov	r2, r9
   2109c:	str	r0, [sp]
   210a0:	mov	r0, fp
   210a4:	bl	1a4b8 <_start@@Base+0x53cc>
   210a8:	cmp	r9, r0
   210ac:	cmpne	sl, r0
   210b0:	beq	216f0 <_start@@Base+0xc604>
   210b4:	mov	sl, r0
   210b8:	b	1f32c <_start@@Base+0xa240>
   210bc:	add	sl, sl, #8
   210c0:	mov	r1, r9
   210c4:	mov	r0, sl
   210c8:	mov	r8, #0
   210cc:	bl	151e0 <_start@@Base+0xf4>
   210d0:	and	r3, r1, #-16777216	; 0xff000000
   210d4:	str	r8, [sp, #296]	; 0x128
   210d8:	str	r3, [sp, #300]	; 0x12c
   210dc:	add	r3, sp, #296	; 0x128
   210e0:	ldrd	r2, [r3]
   210e4:	cmp	r3, #1627389952	; 0x61000000
   210e8:	cmpeq	r2, #0
   210ec:	bne	213e8 <_start@@Base+0xc2fc>
   210f0:	sub	r3, r9, sl
   210f4:	cmp	r3, #1
   210f8:	ble	216a4 <_start@@Base+0xc5b8>
   210fc:	mov	r2, r9
   21100:	mov	r1, sl
   21104:	mov	r0, fp
   21108:	bl	19810 <_start@@Base+0x4724>
   2110c:	cmp	sl, r0
   21110:	mov	r4, r0
   21114:	beq	216a4 <_start@@Base+0xc5b8>
   21118:	add	r5, sp, #344	; 0x158
   2111c:	mov	r1, r0
   21120:	str	r8, [sp, #344]	; 0x158
   21124:	mov	r2, r9
   21128:	mov	r3, r5
   2112c:	mov	r0, fp
   21130:	bl	18108 <_start@@Base+0x301c>
   21134:	cmp	r0, r4
   21138:	mov	sl, r0
   2113c:	beq	21708 <_start@@Base+0xc61c>
   21140:	ldr	r3, [sp, #344]	; 0x158
   21144:	cmp	r3, #0
   21148:	bne	21158 <_start@@Base+0xc06c>
   2114c:	ldr	r3, [fp, #8]
   21150:	tst	r3, #2
   21154:	beq	1dcb4 <_start@@Base+0x8bc8>
   21158:	mov	r3, #4
   2115c:	mov	r1, #21
   21160:	ldr	r0, [fp]
   21164:	mov	r2, r3
   21168:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   2116c:	cmp	r0, #0
   21170:	beq	1d43c <_start@@Base+0x8350>
   21174:	ldr	r3, [sp, #344]	; 0x158
   21178:	str	r3, [r0]
   2117c:	b	1dcb4 <_start@@Base+0x8bc8>
   21180:	mov	sl, r0
   21184:	mov	r3, #0
   21188:	add	sl, sl, #8
   2118c:	mov	r1, r9
   21190:	mov	r0, sl
   21194:	str	r3, [sp, #304]	; 0x130
   21198:	bl	151e0 <_start@@Base+0xf4>
   2119c:	and	r3, r1, #-16777216	; 0xff000000
   211a0:	str	r3, [sp, #308]	; 0x134
   211a4:	add	r3, sp, #304	; 0x130
   211a8:	ldrd	r2, [r3]
   211ac:	cmp	r3, #1627389952	; 0x61000000
   211b0:	cmpeq	r2, #0
   211b4:	bne	21418 <_start@@Base+0xc32c>
   211b8:	sub	r3, r9, sl
   211bc:	cmp	r3, #1
   211c0:	ble	21574 <_start@@Base+0xc488>
   211c4:	mov	r2, r9
   211c8:	mov	r1, sl
   211cc:	mov	r0, fp
   211d0:	bl	19810 <_start@@Base+0x4724>
   211d4:	cmp	sl, r0
   211d8:	mov	r8, r0
   211dc:	beq	21574 <_start@@Base+0xc488>
   211e0:	add	r3, sp, #344	; 0x158
   211e4:	mov	r4, #0
   211e8:	mov	r5, #0
   211ec:	mov	r1, r0
   211f0:	mov	r2, r9
   211f4:	mov	r0, fp
   211f8:	strd	r4, [r3]
   211fc:	bl	1806c <_start@@Base+0x2f80>
   21200:	cmp	r0, r8
   21204:	mov	sl, r0
   21208:	beq	21734 <_start@@Base+0xc648>
   2120c:	add	r3, sp, #344	; 0x158
   21210:	ldrd	r2, [r3]
   21214:	orrs	r3, r2, r3
   21218:	bne	21228 <_start@@Base+0xc13c>
   2121c:	ldr	r3, [fp, #8]
   21220:	tst	r3, #2
   21224:	beq	1dcb4 <_start@@Base+0x8bc8>
   21228:	mov	r3, #8
   2122c:	mov	r1, #23
   21230:	ldr	r0, [fp]
   21234:	mov	r2, r3
   21238:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   2123c:	cmp	r0, #0
   21240:	beq	1d43c <_start@@Base+0x8350>
   21244:	add	r3, sp, #344	; 0x158
   21248:	ldrd	r2, [r3]
   2124c:	strd	r2, [r0]
   21250:	b	1dcb4 <_start@@Base+0x8bc8>
   21254:	mov	r1, sl
   21258:	mov	r2, r9
   2125c:	mov	r0, fp
   21260:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   21264:	mov	sl, r0
   21268:	b	1dcb4 <_start@@Base+0x8bc8>
   2126c:	mov	sl, r8
   21270:	mov	r9, r4
   21274:	b	1d43c <_start@@Base+0x8350>
   21278:	mov	sl, r0
   2127c:	mov	r9, r4
   21280:	ldr	r0, [fp]
   21284:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   21288:	cmp	r0, #0
   2128c:	str	r0, [sp, #324]	; 0x144
   21290:	beq	1d43c <_start@@Base+0x8350>
   21294:	mov	r1, #32
   21298:	ldr	r0, [fp]
   2129c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   212a0:	cmp	r0, #0
   212a4:	beq	1d43c <_start@@Base+0x8350>
   212a8:	ldr	r3, [sp, #324]	; 0x144
   212ac:	str	r3, [r0]
   212b0:	b	1dcb4 <_start@@Base+0x8bc8>
   212b4:	mov	r1, r0
   212b8:	ldr	r3, [pc, #-1304]	; 20da8 <_start@@Base+0xbcbc>
   212bc:	mov	r2, r9
   212c0:	mov	r0, fp
   212c4:	str	r8, [sp]
   212c8:	bl	1b5f8 <_start@@Base+0x650c>
   212cc:	cmp	r9, r0
   212d0:	cmpne	sl, r0
   212d4:	mov	sl, r0
   212d8:	bne	1ea40 <_start@@Base+0x9954>
   212dc:	b	1d43c <_start@@Base+0x8350>
   212e0:	mov	r1, sl
   212e4:	mov	r2, r9
   212e8:	mov	r0, fp
   212ec:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   212f0:	mov	sl, r0
   212f4:	b	1dcb4 <_start@@Base+0x8bc8>
   212f8:	mov	r1, r0
   212fc:	mov	r3, #8
   21300:	mov	r2, r9
   21304:	mov	r0, fp
   21308:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2130c:	mov	sl, r0
   21310:	cmp	r8, sl
   21314:	bne	1e0a4 <_start@@Base+0x8fb8>
   21318:	mov	r7, r8
   2131c:	b	1e074 <_start@@Base+0x8f88>
   21320:	ldr	r0, [fp]
   21324:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   21328:	cmp	r0, #0
   2132c:	str	r0, [sp, #324]	; 0x144
   21330:	beq	1d43c <_start@@Base+0x8350>
   21334:	mov	r1, #5
   21338:	ldr	r0, [fp]
   2133c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   21340:	cmp	r0, #0
   21344:	beq	1d43c <_start@@Base+0x8350>
   21348:	ldr	r3, [sp, #324]	; 0x144
   2134c:	str	r3, [r0]
   21350:	b	1dcb4 <_start@@Base+0x8bc8>
   21354:	mov	r1, r0
   21358:	add	r0, sp, #344	; 0x158
   2135c:	ldr	r3, [pc, #-1464]	; 20dac <_start@@Base+0xbcc0>
   21360:	mov	r2, r9
   21364:	str	r0, [sp]
   21368:	mov	r0, fp
   2136c:	bl	1b3ec <_start@@Base+0x6300>
   21370:	cmp	r9, r0
   21374:	cmpne	r0, r4
   21378:	mov	sl, r0
   2137c:	bne	1e508 <_start@@Base+0x941c>
   21380:	b	1d43c <_start@@Base+0x8350>
   21384:	add	r3, sp, #280	; 0x118
   21388:	ldrd	r6, [sp, #16]
   2138c:	strd	r4, [r3]
   21390:	b	20a88 <_start@@Base+0xb99c>
   21394:	mov	r1, r0
   21398:	mov	r3, #33	; 0x21
   2139c:	mov	r2, r9
   213a0:	mov	r0, fp
   213a4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   213a8:	mov	sl, r0
   213ac:	b	1dcb4 <_start@@Base+0x8bc8>
   213b0:	mov	r1, r7
   213b4:	mov	r3, #7
   213b8:	mov	r2, r9
   213bc:	mov	r0, fp
   213c0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   213c4:	mov	sl, r0
   213c8:	b	21310 <_start@@Base+0xc224>
   213cc:	mov	r4, r0
   213d0:	mov	r1, r4
   213d4:	mov	r2, r9
   213d8:	mov	r0, fp
   213dc:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   213e0:	mov	sl, r0
   213e4:	b	1dcb4 <_start@@Base+0x8bc8>
   213e8:	mov	r1, sl
   213ec:	mov	r2, r9
   213f0:	mov	r0, fp
   213f4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   213f8:	mov	sl, r0
   213fc:	b	1dcb4 <_start@@Base+0x8bc8>
   21400:	mov	r1, sl
   21404:	mov	r2, r9
   21408:	mov	r0, fp
   2140c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   21410:	mov	sl, r0
   21414:	b	1dcb4 <_start@@Base+0x8bc8>
   21418:	mov	r1, sl
   2141c:	mov	r2, r9
   21420:	mov	r0, fp
   21424:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   21428:	mov	sl, r0
   2142c:	b	1dcb4 <_start@@Base+0x8bc8>
   21430:	ldr	r0, [fp]
   21434:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   21438:	cmp	r0, #0
   2143c:	str	r0, [sp, #324]	; 0x144
   21440:	beq	1d43c <_start@@Base+0x8350>
   21444:	mov	r1, #33	; 0x21
   21448:	ldr	r0, [fp]
   2144c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   21450:	cmp	r0, #0
   21454:	beq	1d43c <_start@@Base+0x8350>
   21458:	ldr	r3, [sp, #324]	; 0x144
   2145c:	str	r3, [r0]
   21460:	b	1dcb4 <_start@@Base+0x8bc8>
   21464:	mov	r1, r0
   21468:	mov	r3, #8
   2146c:	mov	r2, r9
   21470:	mov	r0, fp
   21474:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   21478:	cmp	r4, r0
   2147c:	mov	sl, r0
   21480:	strb	r8, [sp, #336]	; 0x150
   21484:	bne	1d740 <_start@@Base+0x8654>
   21488:	mov	r5, r4
   2148c:	b	1f3c4 <_start@@Base+0xa2d8>
   21490:	mov	r1, r0
   21494:	mov	r3, #7
   21498:	mov	r2, r9
   2149c:	mov	r0, fp
   214a0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   214a4:	ldr	r3, [sp, #16]
   214a8:	cmp	r4, r0
   214ac:	mov	sl, r0
   214b0:	strb	r3, [sp, #336]	; 0x150
   214b4:	bne	1d740 <_start@@Base+0x8654>
   214b8:	b	21488 <_start@@Base+0xc39c>
   214bc:	ldr	r3, [pc, #-1812]	; 20db0 <_start@@Base+0xbcc4>
   214c0:	mov	r2, r9
   214c4:	mov	r0, fp
   214c8:	str	r8, [sp]
   214cc:	mov	r4, r1
   214d0:	bl	1c818 <_start@@Base+0x772c>
   214d4:	cmp	r9, r0
   214d8:	cmpne	r0, r4
   214dc:	mov	sl, r0
   214e0:	bne	1edc8 <_start@@Base+0x9cdc>
   214e4:	b	1d43c <_start@@Base+0x8350>
   214e8:	mov	r1, sl
   214ec:	mov	r2, r9
   214f0:	mov	r0, fp
   214f4:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   214f8:	mov	sl, r0
   214fc:	b	1dcb4 <_start@@Base+0x8bc8>
   21500:	mov	sl, r4
   21504:	b	1d43c <_start@@Base+0x8350>
   21508:	mov	sl, r0
   2150c:	b	1dcb4 <_start@@Base+0x8bc8>
   21510:	ldr	r3, [pc, #-1892]	; 20db4 <_start@@Base+0xbcc8>
   21514:	mov	r2, r9
   21518:	mov	r1, r4
   2151c:	mov	r0, fp
   21520:	str	r8, [sp]
   21524:	bl	1b1f4 <_start@@Base+0x6108>
   21528:	cmp	r9, r0
   2152c:	cmpne	r0, r4
   21530:	mov	sl, r0
   21534:	bne	204c8 <_start@@Base+0xb3dc>
   21538:	b	1d43c <_start@@Base+0x8350>
   2153c:	mov	sl, r4
   21540:	b	1d43c <_start@@Base+0x8350>
   21544:	add	r0, sp, #344	; 0x158
   21548:	ldr	r3, [pc, #-1944]	; 20db8 <_start@@Base+0xbccc>
   2154c:	mov	r2, r9
   21550:	mov	r1, r8
   21554:	str	r0, [sp]
   21558:	mov	r0, fp
   2155c:	bl	1abdc <_start@@Base+0x5af0>
   21560:	cmp	r9, r0
   21564:	cmpne	r0, r8
   21568:	mov	sl, r0
   2156c:	bne	2007c <_start@@Base+0xaf90>
   21570:	b	1d43c <_start@@Base+0x8350>
   21574:	mov	r1, sl
   21578:	mov	r2, r9
   2157c:	mov	r0, fp
   21580:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   21584:	mov	sl, r0
   21588:	b	1dcb4 <_start@@Base+0x8bc8>
   2158c:	mov	r2, #1
   21590:	mvn	r3, #0
   21594:	mov	r1, r2
   21598:	bl	278a0 <flatcc_builder_start_vector@@Base>
   2159c:	subs	r4, r0, #0
   215a0:	bne	1d43c <_start@@Base+0x8350>
   215a4:	mov	r1, sl
   215a8:	add	r3, sp, #320	; 0x140
   215ac:	mov	r2, r9
   215b0:	mov	r0, fp
   215b4:	bl	1a3e4 <_start@@Base+0x52f8>
   215b8:	ldr	r3, [sp, #320]	; 0x140
   215bc:	mov	sl, r0
   215c0:	cmp	r3, #0
   215c4:	beq	216f8 <_start@@Base+0xc60c>
   215c8:	mov	r8, r4
   215cc:	b	215fc <_start@@Base+0xc510>
   215d0:	ldrb	ip, [sp, #344]	; 0x158
   215d4:	add	r3, sp, #320	; 0x140
   215d8:	mov	r1, r4
   215dc:	mov	r2, r9
   215e0:	mov	r0, fp
   215e4:	strb	ip, [r5]
   215e8:	bl	194f8 <_start@@Base+0x440c>
   215ec:	ldr	r3, [sp, #320]	; 0x140
   215f0:	mov	sl, r0
   215f4:	cmp	r3, #0
   215f8:	beq	216f8 <_start@@Base+0xc60c>
   215fc:	mov	r1, #1
   21600:	ldr	r0, [fp]
   21604:	strb	r8, [sp, #344]	; 0x158
   21608:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   2160c:	subs	r5, r0, #0
   21610:	mov	r1, sl
   21614:	add	r3, sp, #344	; 0x158
   21618:	mov	r2, r9
   2161c:	mov	r0, fp
   21620:	beq	1d43c <_start@@Base+0x8350>
   21624:	bl	181d8 <_start@@Base+0x30ec>
   21628:	cmp	sl, r0
   2162c:	mov	r4, r0
   21630:	bne	215d0 <_start@@Base+0xc4e4>
   21634:	add	r1, sp, #344	; 0x158
   21638:	ldr	r3, [pc, #-2180]	; 20dbc <_start@@Base+0xbcd0>
   2163c:	mov	r2, r9
   21640:	mov	r0, fp
   21644:	str	r1, [sp]
   21648:	mov	r1, r4
   2164c:	bl	1b820 <_start@@Base+0x6734>
   21650:	cmp	r9, r0
   21654:	cmpne	r4, r0
   21658:	mov	sl, r0
   2165c:	mov	r4, r0
   21660:	bne	215d0 <_start@@Base+0xc4e4>
   21664:	b	1d43c <_start@@Base+0x8350>
   21668:	mov	r1, r0
   2166c:	ldr	r3, [pc, #-2228]	; 20dc0 <_start@@Base+0xbcd4>
   21670:	mov	r2, r9
   21674:	mov	r0, fp
   21678:	str	r8, [sp]
   2167c:	bl	1b3ec <_start@@Base+0x6300>
   21680:	cmp	r9, r0
   21684:	cmpne	r0, r4
   21688:	mov	sl, r0
   2168c:	bne	20418 <_start@@Base+0xb32c>
   21690:	b	1d43c <_start@@Base+0x8350>
   21694:	mov	sl, r4
   21698:	b	1d43c <_start@@Base+0x8350>
   2169c:	mov	sl, r5
   216a0:	b	1d43c <_start@@Base+0x8350>
   216a4:	mov	r1, sl
   216a8:	mov	r2, r9
   216ac:	mov	r0, fp
   216b0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   216b4:	mov	sl, r0
   216b8:	b	1dcb4 <_start@@Base+0x8bc8>
   216bc:	mov	r1, r0
   216c0:	add	r0, sp, #344	; 0x158
   216c4:	ldr	r3, [pc, #-2312]	; 20dc4 <_start@@Base+0xbcd8>
   216c8:	mov	r2, r9
   216cc:	str	r0, [sp]
   216d0:	mov	r0, fp
   216d4:	bl	1c818 <_start@@Base+0x772c>
   216d8:	cmp	r9, r0
   216dc:	cmpne	r0, r8
   216e0:	mov	sl, r0
   216e4:	bne	20f38 <_start@@Base+0xbe4c>
   216e8:	b	1d43c <_start@@Base+0x8350>
   216ec:	mov	r0, sl
   216f0:	mov	sl, r0
   216f4:	b	1d43c <_start@@Base+0x8350>
   216f8:	ldr	r0, [fp]
   216fc:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   21700:	str	r0, [sp, #324]	; 0x144
   21704:	b	1da88 <_start@@Base+0x899c>
   21708:	mov	r1, r0
   2170c:	ldr	r3, [pc, #-2380]	; 20dc8 <_start@@Base+0xbcdc>
   21710:	mov	r2, r9
   21714:	mov	r0, fp
   21718:	str	r5, [sp]
   2171c:	bl	1b1f4 <_start@@Base+0x6108>
   21720:	cmp	r9, r0
   21724:	cmpne	r0, r4
   21728:	mov	sl, r0
   2172c:	bne	21140 <_start@@Base+0xc054>
   21730:	b	1d43c <_start@@Base+0x8350>
   21734:	mov	r1, r0
   21738:	add	r0, sp, #344	; 0x158
   2173c:	ldr	r3, [pc, #-2424]	; 20dcc <_start@@Base+0xbce0>
   21740:	mov	r2, r9
   21744:	str	r0, [sp]
   21748:	mov	r0, fp
   2174c:	bl	1abdc <_start@@Base+0x5af0>
   21750:	cmp	r9, r0
   21754:	cmpne	r0, r8
   21758:	mov	sl, r0
   2175c:	bne	2120c <_start@@Base+0xc120>
   21760:	b	1d43c <_start@@Base+0x8350>
   21764:	add	r3, sp, #280	; 0x118
   21768:	ldrd	r6, [sp, #16]
   2176c:	strd	r4, [r3]
   21770:	b	20a84 <_start@@Base+0xb998>
   21774:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21778:	mov	ip, r3
   2177c:	strd	r6, [sp, #8]
   21780:	strd	r8, [sp, #16]
   21784:	mov	r9, r1
   21788:	mov	r1, #4
   2178c:	strd	sl, [sp, #24]
   21790:	mov	fp, r0
   21794:	mov	sl, r2
   21798:	str	lr, [sp, #32]
   2179c:	sub	sp, sp, #252	; 0xfc
   217a0:	ldr	r0, [r0]
   217a4:	str	r3, [sp, #200]	; 0xc8
   217a8:	mov	r3, #0
   217ac:	str	r3, [ip]
   217b0:	bl	28038 <flatcc_builder_start_table@@Base>
   217b4:	cmp	r0, #0
   217b8:	beq	217f4 <_start@@Base+0xc708>
   217bc:	mov	r1, r9
   217c0:	mov	r2, sl
   217c4:	mov	r0, fp
   217c8:	mov	r3, #33	; 0x21
   217cc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   217d0:	mov	r9, r0
   217d4:	mov	r0, r9
   217d8:	add	sp, sp, #252	; 0xfc
   217dc:	ldrd	r4, [sp]
   217e0:	ldrd	r6, [sp, #8]
   217e4:	ldrd	r8, [sp, #16]
   217e8:	ldrd	sl, [sp, #24]
   217ec:	add	sp, sp, #32
   217f0:	pop	{pc}		; (ldr pc, [sp], #4)
   217f4:	add	r0, sp, #216	; 0xd8
   217f8:	mov	r3, #1
   217fc:	mov	r2, sl
   21800:	mov	r1, r9
   21804:	str	r0, [sp]
   21808:	mov	r0, fp
   2180c:	bl	32188 <flatcc_json_parser_prepare_unions@@Base>
   21810:	cmp	sl, r0
   21814:	beq	217bc <_start@@Base+0xc6d0>
   21818:	add	r3, sp, #208	; 0xd0
   2181c:	mov	r1, r9
   21820:	mov	r2, sl
   21824:	mov	r0, fp
   21828:	bl	19ae0 <_start@@Base+0x49f4>
   2182c:	ldr	r3, [sp, #208]	; 0xd0
   21830:	mov	r4, r0
   21834:	cmp	r3, #0
   21838:	beq	219f0 <_start@@Base+0xc904>
   2183c:	mov	r5, fp
   21840:	mov	r7, sl
   21844:	cmp	r7, r4
   21848:	beq	219f8 <_start@@Base+0xc90c>
   2184c:	ldrb	r3, [r4]
   21850:	cmp	r3, #34	; 0x22
   21854:	moveq	r3, #0
   21858:	addeq	r4, r4, #1
   2185c:	streq	r3, [r5, #12]
   21860:	beq	21874 <_start@@Base+0xc788>
   21864:	cmp	r3, #46	; 0x2e
   21868:	movne	r3, #1
   2186c:	strne	r3, [r5, #12]
   21870:	beq	23a00 <_start@@Base+0xe914>
   21874:	sub	ip, r7, r4
   21878:	cmp	ip, #8
   2187c:	bls	21a14 <_start@@Base+0xc928>
   21880:	ldrb	r2, [r4, #7]
   21884:	mov	r3, #0
   21888:	mov	lr, r3
   2188c:	ldrb	r0, [r4, #6]
   21890:	orr	r2, r2, r0, lsl #8
   21894:	ldrb	r8, [r4, #5]
   21898:	orr	r2, r2, r8, lsl #16
   2189c:	ldrb	r8, [r4, #4]
   218a0:	orr	r2, r2, r8, lsl #24
   218a4:	ldrb	r8, [r4, #3]
   218a8:	orr	lr, lr, r8
   218ac:	ldrb	r0, [r4]
   218b0:	mov	r9, #0
   218b4:	str	r2, [sp, #40]	; 0x28
   218b8:	ldrb	r8, [r4, #1]
   218bc:	add	r3, pc, #948	; 0x3b4
   218c0:	ldrd	r2, [r3]
   218c4:	lsl	r0, r0, #24
   218c8:	orr	r8, r0, r8, lsl #16
   218cc:	ldrb	r0, [r4, #2]
   218d0:	orr	r6, lr, r0, lsl #8
   218d4:	orr	r1, r8, r6
   218d8:	str	r1, [sp, #44]	; 0x2c
   218dc:	ldrd	r0, [sp, #40]	; 0x28
   218e0:	cmp	r1, r3
   218e4:	cmpeq	r0, r2
   218e8:	beq	21aa0 <_start@@Base+0xc9b4>
   218ec:	ldrd	r0, [sp, #40]	; 0x28
   218f0:	add	r3, pc, #904	; 0x388
   218f4:	ldrd	r2, [r3]
   218f8:	bic	lr, r0, #255	; 0xff
   218fc:	str	lr, [sp, #104]	; 0x68
   21900:	str	r1, [sp, #108]	; 0x6c
   21904:	ldrd	r0, [sp, #104]	; 0x68
   21908:	cmp	r1, r3
   2190c:	cmpeq	r0, r2
   21910:	bne	21b74 <_start@@Base+0xca88>
   21914:	cmp	ip, #7
   21918:	ble	219fc <_start@@Base+0xc910>
   2191c:	mov	r3, #7
   21920:	mov	r2, r7
   21924:	mov	r1, r4
   21928:	mov	r0, r5
   2192c:	bl	199e0 <_start@@Base+0x48f4>
   21930:	cmp	r0, r4
   21934:	beq	219fc <_start@@Base+0xc910>
   21938:	ldr	ip, [sp, #216]	; 0xd8
   2193c:	mov	lr, #3
   21940:	movw	r3, #16000	; 0x3e80
   21944:	movt	r3, #2
   21948:	mov	r1, r0
   2194c:	mov	r2, r7
   21950:	mov	r0, r5
   21954:	str	lr, [sp]
   21958:	str	ip, [sp, #4]
   2195c:	str	r3, [sp, #8]
   21960:	mov	r3, #0
   21964:	bl	326b8 <flatcc_json_parser_union_vector@@Base>
   21968:	mov	fp, r0
   2196c:	sub	r3, r7, fp
   21970:	cmp	r3, #1
   21974:	ble	21988 <_start@@Base+0xc89c>
   21978:	ldrb	r3, [fp]
   2197c:	cmp	r3, #32
   21980:	bhi	2199c <_start@@Base+0xc8b0>
   21984:	beq	235a0 <_start@@Base+0xe4b4>
   21988:	mov	r1, fp
   2198c:	mov	r2, r7
   21990:	mov	r0, r5
   21994:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   21998:	mov	fp, r0
   2199c:	cmp	r7, fp
   219a0:	beq	23534 <_start@@Base+0xe448>
   219a4:	ldrb	r3, [fp]
   219a8:	cmp	r3, #44	; 0x2c
   219ac:	beq	235b4 <_start@@Base+0xe4c8>
   219b0:	mov	r3, #0
   219b4:	str	r3, [sp, #208]	; 0xd0
   219b8:	ldrb	r3, [fp]
   219bc:	cmp	r3, #125	; 0x7d
   219c0:	beq	21b3c <_start@@Base+0xca50>
   219c4:	mov	r3, #10
   219c8:	mov	r1, fp
   219cc:	mov	r2, r7
   219d0:	mov	r0, r5
   219d4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   219d8:	ldr	r3, [sp, #208]	; 0xd0
   219dc:	mov	r4, r0
   219e0:	cmp	r3, #0
   219e4:	bne	21844 <_start@@Base+0xc758>
   219e8:	mov	fp, r5
   219ec:	mov	sl, r7
   219f0:	mov	r9, r4
   219f4:	b	23548 <_start@@Base+0xe45c>
   219f8:	mov	r4, r7
   219fc:	mov	r1, r4
   21a00:	mov	r2, r7
   21a04:	mov	r0, r5
   21a08:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   21a0c:	mov	fp, r0
   21a10:	b	2196c <_start@@Base+0xc880>
   21a14:	sub	r3, ip, #1
   21a18:	cmp	r3, #7
   21a1c:	ldrls	pc, [pc, r3, lsl #2]
   21a20:	b	219fc <_start@@Base+0xc910>
   21a24:	strdeq	r1, [r2], -ip
   21a28:	andeq	r1, r2, r4, ror sl
   21a2c:	andeq	r1, r2, r8, ror #20
   21a30:	andeq	r1, r2, ip, asr sl
   21a34:	andeq	r1, r2, r0, asr sl
   21a38:	andeq	r1, r2, r4, asr #20
   21a3c:	muleq	r2, r4, sl
   21a40:	andeq	r1, r2, r0, lsl #17
   21a44:	mov	r2, #0
   21a48:	mov	lr, r2
   21a4c:	b	21894 <_start@@Base+0xc7a8>
   21a50:	mov	r2, #0
   21a54:	mov	lr, r2
   21a58:	b	2189c <_start@@Base+0xc7b0>
   21a5c:	mov	r2, #0
   21a60:	mov	lr, r2
   21a64:	b	218a4 <_start@@Base+0xc7b8>
   21a68:	mov	r2, #0
   21a6c:	mov	lr, r2
   21a70:	b	218ac <_start@@Base+0xc7c0>
   21a74:	ldrb	r2, [r4, #1]
   21a78:	mov	r1, #0
   21a7c:	ldrb	r0, [r4]
   21a80:	str	r1, [sp, #40]	; 0x28
   21a84:	lsl	r2, r2, #16
   21a88:	orr	r3, r2, r0, lsl #24
   21a8c:	str	r3, [sp, #44]	; 0x2c
   21a90:	b	218ec <_start@@Base+0xc800>
   21a94:	mov	r2, #0
   21a98:	mov	r3, #0
   21a9c:	b	21888 <_start@@Base+0xc79c>
   21aa0:	add	r4, r4, #8
   21aa4:	mov	r1, r7
   21aa8:	str	r9, [sp, #144]	; 0x90
   21aac:	mov	r0, r4
   21ab0:	bl	151e0 <_start@@Base+0xf4>
   21ab4:	str	r1, [sp, #148]	; 0x94
   21ab8:	add	r3, pc, #456	; 0x1c8
   21abc:	ldrd	r2, [r3]
   21ac0:	ldrd	r0, [sp, #144]	; 0x90
   21ac4:	cmp	r1, r3
   21ac8:	cmpeq	r0, r2
   21acc:	bne	219fc <_start@@Base+0xc910>
   21ad0:	sub	r3, r7, r4
   21ad4:	cmp	r3, #4
   21ad8:	ble	219fc <_start@@Base+0xc910>
   21adc:	mov	r1, r4
   21ae0:	mov	r3, #4
   21ae4:	mov	r2, r7
   21ae8:	mov	r0, r5
   21aec:	bl	199e0 <_start@@Base+0x48f4>
   21af0:	cmp	r4, r0
   21af4:	mov	r1, r0
   21af8:	beq	219fc <_start@@Base+0xc910>
   21afc:	ldr	lr, [pc, #404]	; 21c98 <_start@@Base+0xcbac>
   21b00:	mov	r0, #3
   21b04:	movw	r2, #21204	; 0x52d4
   21b08:	movt	r2, #1
   21b0c:	movw	r4, #16000	; 0x3e80
   21b10:	movt	r4, #2
   21b14:	ldr	ip, [sp, #216]	; 0xd8
   21b18:	mov	r3, r9
   21b1c:	str	r2, [sp, #16]
   21b20:	mov	r2, r7
   21b24:	stm	sp, {r0, ip, lr}
   21b28:	mov	r0, r5
   21b2c:	str	r4, [sp, #12]
   21b30:	bl	327ec <flatcc_json_parser_union_type_vector@@Base>
   21b34:	mov	fp, r0
   21b38:	b	2196c <_start@@Base+0xc880>
   21b3c:	add	r1, fp, #1
   21b40:	sub	r3, r7, r1
   21b44:	cmp	r3, #1
   21b48:	ble	21b5c <_start@@Base+0xca70>
   21b4c:	ldrb	r3, [fp, #1]
   21b50:	cmp	r3, #32
   21b54:	bhi	23a98 <_start@@Base+0xe9ac>
   21b58:	beq	23b4c <_start@@Base+0xea60>
   21b5c:	mov	r2, r7
   21b60:	mov	r0, r5
   21b64:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   21b68:	mov	r4, r0
   21b6c:	ldr	r3, [sp, #208]	; 0xd0
   21b70:	b	219e0 <_start@@Base+0xc8f4>
   21b74:	ldrd	r0, [sp, #40]	; 0x28
   21b78:	lsr	r3, r0, #16
   21b7c:	str	r3, [sp, #136]	; 0x88
   21b80:	ldr	lr, [sp, #136]	; 0x88
   21b84:	str	r1, [sp, #140]	; 0x8c
   21b88:	add	r3, pc, #256	; 0x100
   21b8c:	ldrd	r2, [r3]
   21b90:	lsl	lr, lr, #16
   21b94:	str	lr, [sp, #136]	; 0x88
   21b98:	ldrd	r0, [sp, #136]	; 0x88
   21b9c:	cmp	r1, r3
   21ba0:	cmpeq	r0, r2
   21ba4:	bne	2379c <_start@@Base+0xe6b0>
   21ba8:	cmp	ip, #6
   21bac:	ble	219fc <_start@@Base+0xc910>
   21bb0:	mov	r3, #6
   21bb4:	mov	r2, r7
   21bb8:	mov	r1, r4
   21bbc:	mov	r0, r5
   21bc0:	bl	199e0 <_start@@Base+0x48f4>
   21bc4:	cmp	r0, r4
   21bc8:	mov	fp, r0
   21bcc:	beq	219fc <_start@@Base+0xc910>
   21bd0:	mov	r3, #0
   21bd4:	mov	r1, #3
   21bd8:	ldr	r0, [r5]
   21bdc:	str	r3, [sp, #212]	; 0xd4
   21be0:	bl	28038 <flatcc_builder_start_table@@Base>
   21be4:	cmp	r0, #0
   21be8:	bne	222f0 <_start@@Base+0xd204>
   21bec:	add	r3, sp, #220	; 0xdc
   21bf0:	mov	r1, fp
   21bf4:	mov	r2, r7
   21bf8:	mov	r0, r5
   21bfc:	bl	19ae0 <_start@@Base+0x49f4>
   21c00:	ldr	r3, [sp, #220]	; 0xdc
   21c04:	cmp	r3, #0
   21c08:	beq	23e70 <_start@@Base+0xed84>
   21c0c:	cmp	r7, r0
   21c10:	beq	21c3c <_start@@Base+0xcb50>
   21c14:	ldrb	r3, [r0]
   21c18:	cmp	r3, #34	; 0x22
   21c1c:	moveq	r3, #0
   21c20:	addeq	r0, r0, #1
   21c24:	streq	r3, [r5, #12]
   21c28:	beq	21c3c <_start@@Base+0xcb50>
   21c2c:	cmp	r3, #46	; 0x2e
   21c30:	movne	r3, #1
   21c34:	strne	r3, [r5, #12]
   21c38:	beq	236e0 <_start@@Base+0xe5f4>
   21c3c:	sub	r3, r7, r0
   21c40:	cmp	r3, #8
   21c44:	bhi	21c9c <_start@@Base+0xcbb0>
   21c48:	sub	r3, r3, #1
   21c4c:	cmp	r3, #7
   21c50:	ldrls	pc, [pc, r3, lsl #2]
   21c54:	b	223a0 <_start@@Base+0xd2b4>
   21c58:	andeq	r1, r2, r4, ror #26
   21c5c:	andeq	r1, r2, r8, asr sp
   21c60:	andeq	r1, r2, ip, asr #26
   21c64:	andeq	r1, r2, ip, ror sp
   21c68:	andeq	r1, r2, r0, ror sp
   21c6c:	andeq	r1, r2, r8, lsl #27
   21c70:	andeq	r1, r2, r0, asr #26
   21c74:	muleq	r2, ip, ip
   21c78:	cmnvs	lr, pc, asr r9
   21c7c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   21c80:	cmnvs	lr, r0, lsl #18
   21c84:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   21c88:	andeq	r0, r0, r0
   21c8c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   21c90:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   21c94:	rsbsvc	r6, r2, r6, ror #10
   21c98:	andeq	r9, r5, ip, ror r2
   21c9c:	ldrb	sl, [r0, #7]
   21ca0:	mov	fp, #0
   21ca4:	mov	r3, fp
   21ca8:	ldrb	r8, [r0, #6]
   21cac:	orr	r2, sl, r8, lsl #8
   21cb0:	ldrb	r8, [r0, #5]
   21cb4:	orr	r2, r2, r8, lsl #16
   21cb8:	ldrb	r8, [r0, #4]
   21cbc:	orr	r2, r2, r8, lsl #24
   21cc0:	ldrb	sl, [r0, #3]
   21cc4:	orr	r3, r3, sl
   21cc8:	ldrb	sl, [r0, #2]
   21ccc:	orr	sl, r3, sl, lsl #8
   21cd0:	ldrb	r8, [r0, #1]
   21cd4:	orr	sl, sl, r8, lsl #16
   21cd8:	str	r2, [sp, #56]	; 0x38
   21cdc:	ldrb	r2, [r0]
   21ce0:	add	r9, pc, #784	; 0x310
   21ce4:	ldrd	r8, [r9]
   21ce8:	orr	r3, sl, r2, lsl #24
   21cec:	str	r3, [sp, #60]	; 0x3c
   21cf0:	ldrd	r2, [sp, #56]	; 0x38
   21cf4:	cmp	r3, r9
   21cf8:	cmpeq	r2, r8
   21cfc:	bne	223a0 <_start@@Base+0xd2b4>
   21d00:	add	r1, r0, #8
   21d04:	sub	r3, r7, r1
   21d08:	cmp	r3, #8
   21d0c:	bhi	21d94 <_start@@Base+0xcca8>
   21d10:	sub	r3, r3, #1
   21d14:	cmp	r3, #7
   21d18:	ldrls	pc, [pc, r3, lsl #2]
   21d1c:	b	223a4 <_start@@Base+0xd2b8>
   21d20:	andeq	r1, r2, r4, asr #28
   21d24:	andeq	r1, r2, r8, lsr lr
   21d28:	andeq	r1, r2, r0, lsl #29
   21d2c:	andeq	r1, r2, r4, ror lr
   21d30:	andeq	r1, r2, r8, ror #28
   21d34:	andeq	r1, r2, ip, asr lr
   21d38:	andeq	r1, r2, r0, asr lr
   21d3c:	muleq	r2, r4, sp
   21d40:	mov	sl, #0
   21d44:	mov	fp, #0
   21d48:	b	21ca4 <_start@@Base+0xcbb8>
   21d4c:	mov	r2, #0
   21d50:	mov	r3, r2
   21d54:	b	21cc8 <_start@@Base+0xcbdc>
   21d58:	mov	r2, #0
   21d5c:	mov	sl, r2
   21d60:	b	21cd0 <_start@@Base+0xcbe4>
   21d64:	mov	r2, #0
   21d68:	mov	sl, r2
   21d6c:	b	21cd8 <_start@@Base+0xcbec>
   21d70:	mov	r2, #0
   21d74:	mov	r3, r2
   21d78:	b	21cb8 <_start@@Base+0xcbcc>
   21d7c:	mov	r2, #0
   21d80:	mov	r3, r2
   21d84:	b	21cc0 <_start@@Base+0xcbd4>
   21d88:	mov	r2, #0
   21d8c:	mov	r3, r2
   21d90:	b	21cb0 <_start@@Base+0xcbc4>
   21d94:	ldrb	sl, [r0, #15]
   21d98:	mov	fp, #0
   21d9c:	mov	r3, fp
   21da0:	ldrb	r8, [r0, #14]
   21da4:	orr	r2, sl, r8, lsl #8
   21da8:	ldrb	r8, [r0, #13]
   21dac:	orr	r2, r2, r8, lsl #16
   21db0:	ldrb	r8, [r0, #12]
   21db4:	orr	r8, r2, r8, lsl #24
   21db8:	ldrb	sl, [r0, #11]
   21dbc:	orr	r3, r3, sl
   21dc0:	ldrb	sl, [r0, #10]
   21dc4:	orr	r3, r3, sl, lsl #8
   21dc8:	ldrb	sl, [r0, #9]
   21dcc:	orr	sl, r3, sl, lsl #16
   21dd0:	ldrb	r2, [r0, #8]
   21dd4:	str	r8, [sp, #80]	; 0x50
   21dd8:	add	r9, pc, #544	; 0x220
   21ddc:	ldrd	r8, [r9]
   21de0:	orr	r3, sl, r2, lsl #24
   21de4:	str	r3, [sp, #84]	; 0x54
   21de8:	ldrd	r2, [sp, #80]	; 0x50
   21dec:	cmp	r3, r9
   21df0:	cmpeq	r2, r8
   21df4:	bne	223a4 <_start@@Base+0xd2b8>
   21df8:	add	r4, r0, #16
   21dfc:	sub	r6, r7, r4
   21e00:	cmp	r6, #8
   21e04:	bhi	21e8c <_start@@Base+0xcda0>
   21e08:	sub	r3, r6, #1
   21e0c:	cmp	r3, #7
   21e10:	ldrls	pc, [pc, r3, lsl #2]
   21e14:	b	22f60 <_start@@Base+0xde74>
   21e18:	andeq	r2, r2, ip, ror r3
   21e1c:	andeq	r2, r2, r0, asr #6
   21e20:	andeq	r2, r2, r0, ror r3
   21e24:	andeq	r2, r2, r4, ror #6
   21e28:	andeq	r2, r2, r8, asr r3
   21e2c:	andeq	r2, r2, ip, asr #6
   21e30:	andeq	r2, r2, r4, lsr r3
   21e34:	andeq	r1, r2, ip, lsl #29
   21e38:	mov	r8, #0
   21e3c:	mov	r3, r8
   21e40:	b	21dc8 <_start@@Base+0xccdc>
   21e44:	mov	r8, #0
   21e48:	mov	sl, r8
   21e4c:	b	21dd0 <_start@@Base+0xcce4>
   21e50:	mov	sl, #0
   21e54:	mov	fp, #0
   21e58:	b	21d9c <_start@@Base+0xccb0>
   21e5c:	mov	r2, #0
   21e60:	mov	r3, r2
   21e64:	b	21da8 <_start@@Base+0xccbc>
   21e68:	mov	r2, #0
   21e6c:	mov	r3, r2
   21e70:	b	21db0 <_start@@Base+0xccc4>
   21e74:	mov	r8, #0
   21e78:	mov	r3, r8
   21e7c:	b	21db8 <_start@@Base+0xcccc>
   21e80:	mov	r8, #0
   21e84:	mov	r3, r8
   21e88:	b	21dc0 <_start@@Base+0xccd4>
   21e8c:	ldrb	r2, [r0, #23]
   21e90:	mov	r3, #0
   21e94:	mov	sl, r3
   21e98:	ldrb	r8, [r0, #22]
   21e9c:	orr	r2, r2, r8, lsl #8
   21ea0:	ldrb	r8, [r0, #21]
   21ea4:	orr	r2, r2, r8, lsl #16
   21ea8:	ldrb	r8, [r0, #20]
   21eac:	orr	ip, r2, r8, lsl #24
   21eb0:	ldrb	r8, [r0, #19]
   21eb4:	orr	r3, sl, r8
   21eb8:	ldrb	sl, [r0, #18]
   21ebc:	orr	r3, r3, sl, lsl #8
   21ec0:	lsr	r2, ip, #16
   21ec4:	ldrb	sl, [r0, #17]
   21ec8:	ldrb	r0, [r0, #16]
   21ecc:	str	r2, [sp, #96]	; 0x60
   21ed0:	ldr	lr, [sp, #96]	; 0x60
   21ed4:	orr	sl, r3, sl, lsl #16
   21ed8:	add	r3, pc, #296	; 0x128
   21edc:	ldrd	r2, [r3]
   21ee0:	orr	sl, sl, r0, lsl #24
   21ee4:	lsl	lr, lr, #16
   21ee8:	str	lr, [sp, #96]	; 0x60
   21eec:	str	sl, [sp, #100]	; 0x64
   21ef0:	ldrd	r0, [sp, #96]	; 0x60
   21ef4:	cmp	r1, r3
   21ef8:	cmpeq	r0, r2
   21efc:	beq	22f78 <_start@@Base+0xde8c>
   21f00:	and	r1, ip, #-16777216	; 0xff000000
   21f04:	add	r3, pc, #260	; 0x104
   21f08:	ldrd	r2, [r3]
   21f0c:	str	r1, [sp, #152]	; 0x98
   21f10:	str	sl, [sp, #156]	; 0x9c
   21f14:	ldrd	r0, [sp, #152]	; 0x98
   21f18:	cmp	r1, r3
   21f1c:	cmpeq	r0, r2
   21f20:	bne	22854 <_start@@Base+0xd768>
   21f24:	cmp	r6, #5
   21f28:	ble	22854 <_start@@Base+0xd768>
   21f2c:	mov	r2, r7
   21f30:	mov	r1, r4
   21f34:	mov	r0, r5
   21f38:	bl	19640 <_start@@Base+0x4554>
   21f3c:	cmp	r4, r0
   21f40:	mov	r8, r0
   21f44:	beq	22854 <_start@@Base+0xd768>
   21f48:	mov	r1, #9
   21f4c:	ldr	r0, [r5]
   21f50:	bl	28038 <flatcc_builder_start_table@@Base>
   21f54:	cmp	r0, #0
   21f58:	mov	r1, r8
   21f5c:	bne	222dc <_start@@Base+0xd1f0>
   21f60:	add	r3, sp, #228	; 0xe4
   21f64:	mov	r2, r7
   21f68:	mov	r0, r5
   21f6c:	bl	19ae0 <_start@@Base+0x49f4>
   21f70:	ldr	r3, [sp, #228]	; 0xe4
   21f74:	mov	r4, r0
   21f78:	cmp	r3, #0
   21f7c:	beq	221b4 <_start@@Base+0xd0c8>
   21f80:	add	r9, pc, #144	; 0x90
   21f84:	ldrd	r8, [r9]
   21f88:	cmp	r7, r4
   21f8c:	beq	21fb8 <_start@@Base+0xcecc>
   21f90:	ldrb	r3, [r4]
   21f94:	cmp	r3, #34	; 0x22
   21f98:	moveq	r3, #0
   21f9c:	addeq	r4, r4, #1
   21fa0:	streq	r3, [r5, #12]
   21fa4:	beq	21fb8 <_start@@Base+0xcecc>
   21fa8:	cmp	r3, #46	; 0x2e
   21fac:	movne	r3, #1
   21fb0:	strne	r3, [r5, #12]
   21fb4:	beq	2382c <_start@@Base+0xe740>
   21fb8:	sub	ip, r7, r4
   21fbc:	cmp	ip, #8
   21fc0:	bhi	22030 <_start@@Base+0xcf44>
   21fc4:	sub	r3, ip, #1
   21fc8:	cmp	r3, #7
   21fcc:	ldrls	pc, [pc, r3, lsl #2]
   21fd0:	b	221bc <_start@@Base+0xd0d0>
   21fd4:			; <UNDEFINED> instruction: 0x000221bc
   21fd8:	andeq	r2, r2, r0, lsl r2
   21fdc:	strdeq	r2, [r2], -r8
   21fe0:	andeq	r2, r2, ip, ror #3
   21fe4:	andeq	r2, r2, r0, ror #3
   21fe8:	ldrdeq	r2, [r2], -r4
   21fec:	andeq	r2, r2, r4, lsl #4
   21ff0:	andeq	r2, r2, r0, lsr r0
   21ff4:	nop	{0}
   21ff8:	bvs	1cfddb8 <__bss_end__@@Base+0x1ca49fc>
   21ffc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   22000:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   22004:	rsbsvc	r6, r2, r6, ror #10
   22008:	ldrvs	r0, [r2, -r0]!
   2200c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   22010:	strvs	r0, [r0, -r0]
   22014:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   22018:			; <UNDEFINED> instruction: 0xffffffff
   2201c:	cmnvs	r3, #-2013265919	; 0x88000001
   22020:	teqcc	r2, r4, lsr r3
   22024:	cmnvs	r1, r1, ror #2
   22028:	teqcc	r2, r4, lsr r3
   2202c:	cmnvs	r3, #-1946157055	; 0x8c000001
   22030:	ldrb	r2, [r4, #7]
   22034:	mov	r3, #0
   22038:	mov	lr, r3
   2203c:	ldrb	sl, [r4, #6]
   22040:	orr	r2, r2, sl, lsl #8
   22044:	ldrb	sl, [r4, #5]
   22048:	orr	r2, r2, sl, lsl #16
   2204c:	ldrb	sl, [r4, #4]
   22050:	orr	sl, r2, sl, lsl #24
   22054:	ldrb	r0, [r4, #3]
   22058:	orr	lr, lr, r0
   2205c:	ldrb	r2, [r4]
   22060:	mov	r6, #0
   22064:	str	sl, [sp, #24]
   22068:	ldrb	r0, [r4, #2]
   2206c:	lsl	sl, r2, #24
   22070:	ldrb	r2, [r4, #1]
   22074:	orr	r0, lr, r0, lsl #8
   22078:	orr	r2, sl, r2, lsl #16
   2207c:	orr	r3, r2, r0
   22080:	str	r3, [sp, #28]
   22084:	ldrd	r2, [sp, #24]
   22088:	cmp	r3, r9
   2208c:	cmpeq	r2, r8
   22090:	bhi	2223c <_start@@Base+0xd150>
   22094:	sub	r1, pc, #124	; 0x7c
   22098:	ldrd	r0, [r1]
   2209c:	cmp	r3, r1
   220a0:	cmpeq	r2, r0
   220a4:	beq	225f4 <_start@@Base+0xd508>
   220a8:	ldr	r1, [sp, #28]
   220ac:	mov	r6, #0
   220b0:	movw	r3, #24929	; 0x6161
   220b4:	movt	r3, #24929	; 0x6161
   220b8:	mov	r2, #0
   220bc:	str	r6, [sp, #120]	; 0x78
   220c0:	str	r1, [sp, #124]	; 0x7c
   220c4:	ldrd	r0, [sp, #120]	; 0x78
   220c8:	cmp	r1, r3
   220cc:	cmpeq	r0, r2
   220d0:	bne	227c0 <_start@@Base+0xd6d4>
   220d4:	cmp	ip, #4
   220d8:	ble	221bc <_start@@Base+0xd0d0>
   220dc:	mov	r1, r4
   220e0:	mov	r3, #4
   220e4:	mov	r2, r7
   220e8:	mov	r0, r5
   220ec:	bl	199e0 <_start@@Base+0x48f4>
   220f0:	cmp	r0, r4
   220f4:	mov	r1, r0
   220f8:	beq	221bc <_start@@Base+0xd0d0>
   220fc:	add	r3, sp, #232	; 0xe8
   22100:	mov	r2, r7
   22104:	mov	r0, r5
   22108:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   2210c:	ldr	r3, [sp, #232]	; 0xe8
   22110:	mov	fp, r0
   22114:	cmp	r3, #0
   22118:	beq	222d8 <_start@@Base+0xd1ec>
   2211c:	mov	r1, r6
   22120:	ldr	r0, [r5]
   22124:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   22128:	cmp	r0, #0
   2212c:	beq	222d8 <_start@@Base+0xd1ec>
   22130:	ldr	r3, [sp, #232]	; 0xe8
   22134:	str	r3, [r0]
   22138:	sub	r3, r7, fp
   2213c:	cmp	r3, #1
   22140:	ble	22154 <_start@@Base+0xd068>
   22144:	ldrb	r3, [fp]
   22148:	cmp	r3, #32
   2214c:	bhi	22168 <_start@@Base+0xd07c>
   22150:	beq	226ac <_start@@Base+0xd5c0>
   22154:	mov	r1, fp
   22158:	mov	r2, r7
   2215c:	mov	r0, r5
   22160:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   22164:	mov	fp, r0
   22168:	cmp	r7, fp
   2216c:	beq	22524 <_start@@Base+0xd438>
   22170:	ldrb	r3, [fp]
   22174:	cmp	r3, #44	; 0x2c
   22178:	beq	226c0 <_start@@Base+0xd5d4>
   2217c:	mov	r3, #0
   22180:	str	r3, [sp, #228]	; 0xe4
   22184:	ldrb	r3, [fp]
   22188:	cmp	r3, #125	; 0x7d
   2218c:	beq	22488 <_start@@Base+0xd39c>
   22190:	mov	r3, #10
   22194:	mov	r1, fp
   22198:	mov	r2, r7
   2219c:	mov	r0, r5
   221a0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   221a4:	ldr	r3, [sp, #228]	; 0xe4
   221a8:	mov	r4, r0
   221ac:	cmp	r3, #0
   221b0:	bne	21f88 <_start@@Base+0xce9c>
   221b4:	mov	fp, r4
   221b8:	b	2252c <_start@@Base+0xd440>
   221bc:	mov	r1, r4
   221c0:	mov	r2, r7
   221c4:	mov	r0, r5
   221c8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   221cc:	mov	fp, r0
   221d0:	b	22138 <_start@@Base+0xd04c>
   221d4:	mov	r2, #0
   221d8:	mov	lr, r2
   221dc:	b	22044 <_start@@Base+0xcf58>
   221e0:	mov	r2, #0
   221e4:	mov	lr, r2
   221e8:	b	2204c <_start@@Base+0xcf60>
   221ec:	mov	sl, #0
   221f0:	mov	lr, sl
   221f4:	b	22054 <_start@@Base+0xcf68>
   221f8:	mov	sl, #0
   221fc:	mov	lr, sl
   22200:	b	2205c <_start@@Base+0xcf70>
   22204:	mov	r2, #0
   22208:	mov	r3, #0
   2220c:	b	22038 <_start@@Base+0xcf4c>
   22210:	ldrb	r2, [r4, #1]
   22214:	mov	r1, #0
   22218:	ldrb	r0, [r4]
   2221c:	str	r1, [sp, #24]
   22220:	lsl	r2, r2, #16
   22224:	orr	r3, r2, r0, lsl #24
   22228:	str	r3, [sp, #28]
   2222c:	ldrd	r2, [sp, #24]
   22230:	cmp	r3, r9
   22234:	cmpeq	r2, r8
   22238:	bls	220a8 <_start@@Base+0xcfbc>
   2223c:	sub	r1, pc, #540	; 0x21c
   22240:	ldrd	r0, [r1]
   22244:	ldrd	r2, [sp, #24]
   22248:	cmp	r3, r1
   2224c:	cmpeq	r2, r0
   22250:	beq	22564 <_start@@Base+0xd478>
   22254:	mov	r1, #0
   22258:	mov	r0, #0
   2225c:	str	r1, [sp, #128]	; 0x80
   22260:	movw	r1, #25443	; 0x6363
   22264:	movt	r1, #25443	; 0x6363
   22268:	str	r3, [sp, #132]	; 0x84
   2226c:	ldrd	r2, [sp, #128]	; 0x80
   22270:	cmp	r3, r1
   22274:	cmpeq	r2, r0
   22278:	bne	22734 <_start@@Base+0xd648>
   2227c:	cmp	ip, #4
   22280:	ble	221bc <_start@@Base+0xd0d0>
   22284:	mov	r1, r4
   22288:	mov	r3, #4
   2228c:	mov	r2, r7
   22290:	mov	r0, r5
   22294:	bl	199e0 <_start@@Base+0x48f4>
   22298:	cmp	r0, r4
   2229c:	mov	r1, r0
   222a0:	beq	221bc <_start@@Base+0xd0d0>
   222a4:	add	r3, sp, #232	; 0xe8
   222a8:	mov	r2, r7
   222ac:	mov	r0, r5
   222b0:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   222b4:	ldr	r3, [sp, #232]	; 0xe8
   222b8:	mov	fp, r0
   222bc:	cmp	r3, #0
   222c0:	beq	222d8 <_start@@Base+0xd1ec>
   222c4:	mov	r1, #4
   222c8:	ldr	r0, [r5]
   222cc:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   222d0:	cmp	r0, #0
   222d4:	bne	22130 <_start@@Base+0xd044>
   222d8:	mov	r1, fp
   222dc:	mov	r3, #33	; 0x21
   222e0:	mov	r2, r7
   222e4:	mov	r0, r5
   222e8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   222ec:	mov	fp, r0
   222f0:	mov	r1, fp
   222f4:	mov	r3, #33	; 0x21
   222f8:	mov	r2, r7
   222fc:	mov	r0, r5
   22300:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   22304:	ldr	r3, [sp, #212]	; 0xd4
   22308:	mov	fp, r0
   2230c:	cmp	r3, #0
   22310:	beq	2381c <_start@@Base+0xe730>
   22314:	mov	r1, #0
   22318:	ldr	r0, [r5]
   2231c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   22320:	cmp	r0, #0
   22324:	beq	2381c <_start@@Base+0xe730>
   22328:	ldr	r3, [sp, #212]	; 0xd4
   2232c:	str	r3, [r0]
   22330:	b	2196c <_start@@Base+0xc880>
   22334:	mov	r2, #0
   22338:	mov	r3, #0
   2233c:	b	21e94 <_start@@Base+0xcda8>
   22340:	mov	ip, #0
   22344:	mov	r3, ip
   22348:	b	21ec0 <_start@@Base+0xcdd4>
   2234c:	mov	r2, #0
   22350:	mov	sl, r2
   22354:	b	21ea0 <_start@@Base+0xcdb4>
   22358:	mov	r2, #0
   2235c:	mov	sl, r2
   22360:	b	21ea8 <_start@@Base+0xcdbc>
   22364:	mov	ip, #0
   22368:	mov	sl, ip
   2236c:	b	21eb0 <_start@@Base+0xcdc4>
   22370:	mov	ip, #0
   22374:	mov	r3, ip
   22378:	b	21eb8 <_start@@Base+0xcdcc>
   2237c:	ldrb	r2, [r0, #16]
   22380:	lsl	r3, r2, #24
   22384:	str	r3, [sp, #100]	; 0x64
   22388:	mov	r3, #0
   2238c:	str	r3, [sp, #96]	; 0x60
   22390:	ldrd	r2, [sp, #96]	; 0x60
   22394:	mov	ip, r2
   22398:	mov	sl, r3
   2239c:	b	21f00 <_start@@Base+0xce14>
   223a0:	mov	r1, r0
   223a4:	mov	r2, r7
   223a8:	mov	r0, r5
   223ac:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   223b0:	mov	fp, r0
   223b4:	sub	r3, r7, fp
   223b8:	cmp	r3, #1
   223bc:	ble	223d0 <_start@@Base+0xd2e4>
   223c0:	ldrb	r3, [fp]
   223c4:	cmp	r3, #32
   223c8:	bhi	223e4 <_start@@Base+0xd2f8>
   223cc:	beq	224c0 <_start@@Base+0xd3d4>
   223d0:	mov	r1, fp
   223d4:	mov	r2, r7
   223d8:	mov	r0, r5
   223dc:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   223e0:	mov	fp, r0
   223e4:	cmp	r7, fp
   223e8:	beq	2245c <_start@@Base+0xd370>
   223ec:	ldrb	r3, [fp]
   223f0:	cmp	r3, #44	; 0x2c
   223f4:	beq	224d4 <_start@@Base+0xd3e8>
   223f8:	mov	r3, #0
   223fc:	str	r3, [sp, #220]	; 0xdc
   22400:	ldrb	r3, [fp]
   22404:	cmp	r3, #125	; 0x7d
   22408:	beq	22428 <_start@@Base+0xd33c>
   2240c:	mov	r3, #10
   22410:	mov	r1, fp
   22414:	mov	r2, r7
   22418:	mov	r0, r5
   2241c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   22420:	ldr	r3, [sp, #220]	; 0xdc
   22424:	b	21c04 <_start@@Base+0xcb18>
   22428:	add	r1, fp, #1
   2242c:	sub	r3, r7, r1
   22430:	cmp	r3, #1
   22434:	ble	22448 <_start@@Base+0xd35c>
   22438:	ldrb	r3, [fp, #1]
   2243c:	cmp	r3, #32
   22440:	bhi	2378c <_start@@Base+0xe6a0>
   22444:	beq	23914 <_start@@Base+0xe828>
   22448:	mov	r2, r7
   2244c:	mov	r0, r5
   22450:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   22454:	ldr	r3, [sp, #220]	; 0xdc
   22458:	b	21c04 <_start@@Base+0xcb18>
   2245c:	mov	r3, #0
   22460:	str	r3, [sp, #220]	; 0xdc
   22464:	ldr	r3, [r5, #24]
   22468:	cmp	r3, #0
   2246c:	bne	222f0 <_start@@Base+0xd204>
   22470:	ldr	r0, [r5]
   22474:	bl	289b8 <flatcc_builder_end_table@@Base>
   22478:	cmp	r0, #0
   2247c:	str	r0, [sp, #212]	; 0xd4
   22480:	bne	22314 <_start@@Base+0xd228>
   22484:	b	222f0 <_start@@Base+0xd204>
   22488:	add	r1, fp, #1
   2248c:	sub	r3, r7, r1
   22490:	cmp	r3, #1
   22494:	ble	224a8 <_start@@Base+0xd3bc>
   22498:	ldrb	r3, [fp, #1]
   2249c:	cmp	r3, #32
   224a0:	bhi	23848 <_start@@Base+0xe75c>
   224a4:	beq	23a48 <_start@@Base+0xe95c>
   224a8:	mov	r2, r7
   224ac:	mov	r0, r5
   224b0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   224b4:	mov	r4, r0
   224b8:	ldr	r3, [sp, #228]	; 0xe4
   224bc:	b	221ac <_start@@Base+0xd0c0>
   224c0:	ldrb	r3, [fp, #1]
   224c4:	cmp	r3, #32
   224c8:	addhi	fp, fp, #1
   224cc:	bls	223d0 <_start@@Base+0xd2e4>
   224d0:	b	223e4 <_start@@Base+0xd2f8>
   224d4:	add	r0, fp, #1
   224d8:	sub	r3, r7, r0
   224dc:	cmp	r3, #1
   224e0:	ble	224f4 <_start@@Base+0xd408>
   224e4:	ldrb	r3, [fp, #1]
   224e8:	cmp	r3, #32
   224ec:	bhi	22504 <_start@@Base+0xd418>
   224f0:	beq	23a5c <_start@@Base+0xe970>
   224f4:	mov	r1, r0
   224f8:	mov	r2, r7
   224fc:	mov	r0, r5
   22500:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   22504:	cmp	r7, r0
   22508:	beq	23a74 <_start@@Base+0xe988>
   2250c:	ldrb	r3, [r0]
   22510:	cmp	r3, #125	; 0x7d
   22514:	beq	23bc8 <_start@@Base+0xeadc>
   22518:	mov	r3, #1
   2251c:	str	r3, [sp, #220]	; 0xdc
   22520:	b	21c0c <_start@@Base+0xcb20>
   22524:	mov	r3, #0
   22528:	str	r3, [sp, #228]	; 0xe4
   2252c:	ldr	r1, [r5, #24]
   22530:	cmp	r1, #0
   22534:	bne	222d8 <_start@@Base+0xd1ec>
   22538:	ldr	r0, [r5]
   2253c:	str	r1, [sp, #204]	; 0xcc
   22540:	bl	289b8 <flatcc_builder_end_table@@Base>
   22544:	subs	r4, r0, #0
   22548:	ldr	r1, [sp, #204]	; 0xcc
   2254c:	beq	222d8 <_start@@Base+0xd1ec>
   22550:	ldr	r0, [r5]
   22554:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   22558:	cmp	r0, #0
   2255c:	bne	22d30 <_start@@Base+0xdc44>
   22560:	b	222f0 <_start@@Base+0xd204>
   22564:	cmp	ip, #8
   22568:	ble	23640 <_start@@Base+0xe554>
   2256c:	mov	r2, r7
   22570:	mov	r1, r4
   22574:	mov	r0, r5
   22578:	bl	19728 <_start@@Base+0x463c>
   2257c:	cmp	r0, r4
   22580:	mov	r6, r0
   22584:	beq	23640 <_start@@Base+0xe554>
   22588:	mov	fp, #0
   2258c:	mov	sl, #0
   22590:	mov	r1, r0
   22594:	add	r3, sp, #240	; 0xf0
   22598:	mov	r2, r7
   2259c:	mov	r0, r5
   225a0:	strd	sl, [sp, #240]	; 0xf0
   225a4:	bl	17a54 <_start@@Base+0x2968>
   225a8:	cmp	r6, r0
   225ac:	mov	fp, r0
   225b0:	beq	23c9c <_start@@Base+0xebb0>
   225b4:	ldrd	r2, [sp, #240]	; 0xf0
   225b8:	orrs	r3, r2, r3
   225bc:	bne	225cc <_start@@Base+0xd4e0>
   225c0:	ldr	r3, [r5, #8]
   225c4:	tst	r3, #2
   225c8:	beq	22138 <_start@@Base+0xd04c>
   225cc:	mov	r3, #8
   225d0:	mov	r1, #5
   225d4:	mov	r2, r3
   225d8:	ldr	r0, [r5]
   225dc:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   225e0:	cmp	r0, #0
   225e4:	beq	222d8 <_start@@Base+0xd1ec>
   225e8:	ldrd	r2, [sp, #240]	; 0xf0
   225ec:	strd	r2, [r0]
   225f0:	b	22138 <_start@@Base+0xd04c>
   225f4:	add	r4, r4, #8
   225f8:	mov	r1, r7
   225fc:	str	r6, [sp, #168]	; 0xa8
   22600:	mov	r0, r4
   22604:	bl	151e0 <_start@@Base+0xf4>
   22608:	and	r3, r1, #-16777216	; 0xff000000
   2260c:	str	r3, [sp, #172]	; 0xac
   22610:	ldrd	r2, [sp, #168]	; 0xa8
   22614:	cmp	r3, #889192448	; 0x35000000
   22618:	cmpeq	r2, #0
   2261c:	bne	221bc <_start@@Base+0xd0d0>
   22620:	sub	r3, r7, r4
   22624:	cmp	r3, #1
   22628:	ble	221bc <_start@@Base+0xd0d0>
   2262c:	mov	r2, r7
   22630:	mov	r1, r4
   22634:	mov	r0, r5
   22638:	bl	19810 <_start@@Base+0x4724>
   2263c:	cmp	r4, r0
   22640:	mov	sl, r0
   22644:	beq	221bc <_start@@Base+0xd0d0>
   22648:	mov	r1, r0
   2264c:	mov	r2, r7
   22650:	str	r6, [sp, #240]	; 0xf0
   22654:	add	r3, sp, #240	; 0xf0
   22658:	mov	r0, r5
   2265c:	bl	18108 <_start@@Base+0x301c>
   22660:	cmp	sl, r0
   22664:	mov	fp, r0
   22668:	beq	23ccc <_start@@Base+0xebe0>
   2266c:	ldr	r3, [sp, #240]	; 0xf0
   22670:	cmp	r3, #0
   22674:	bne	22684 <_start@@Base+0xd598>
   22678:	ldr	r3, [r5, #8]
   2267c:	tst	r3, #2
   22680:	beq	22138 <_start@@Base+0xd04c>
   22684:	mov	r3, #4
   22688:	mov	r1, #1
   2268c:	mov	r2, r3
   22690:	ldr	r0, [r5]
   22694:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   22698:	cmp	r0, #0
   2269c:	beq	222d8 <_start@@Base+0xd1ec>
   226a0:	ldr	r3, [sp, #240]	; 0xf0
   226a4:	str	r3, [r0]
   226a8:	b	22138 <_start@@Base+0xd04c>
   226ac:	ldrb	r3, [fp, #1]
   226b0:	cmp	r3, #32
   226b4:	addhi	fp, fp, #1
   226b8:	bls	22154 <_start@@Base+0xd068>
   226bc:	b	22168 <_start@@Base+0xd07c>
   226c0:	add	r4, fp, #1
   226c4:	sub	r3, r7, r4
   226c8:	cmp	r3, #1
   226cc:	ble	226e0 <_start@@Base+0xd5f4>
   226d0:	ldrb	r3, [fp, #1]
   226d4:	cmp	r3, #32
   226d8:	bhi	226f4 <_start@@Base+0xd608>
   226dc:	beq	23ae4 <_start@@Base+0xe9f8>
   226e0:	mov	r1, r4
   226e4:	mov	r2, r7
   226e8:	mov	r0, r5
   226ec:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   226f0:	mov	r4, r0
   226f4:	cmp	r7, r4
   226f8:	beq	23afc <_start@@Base+0xea10>
   226fc:	ldrb	r3, [r4]
   22700:	cmp	r3, #125	; 0x7d
   22704:	movne	r3, #1
   22708:	strne	r3, [sp, #228]	; 0xe4
   2270c:	bne	21f88 <_start@@Base+0xce9c>
   22710:	mov	r3, #0
   22714:	add	r1, r4, #1
   22718:	mov	r2, r7
   2271c:	mov	r0, r5
   22720:	str	r3, [sp, #228]	; 0xe4
   22724:	bl	17000 <_start@@Base+0x1f14>
   22728:	mov	r4, r0
   2272c:	ldr	r3, [sp, #228]	; 0xe4
   22730:	b	221ac <_start@@Base+0xd0c0>
   22734:	add	r1, pc, #748	; 0x2ec
   22738:	ldrd	r0, [r1]
   2273c:	ldrd	r2, [sp, #24]
   22740:	cmp	r3, r1
   22744:	cmpeq	r2, r0
   22748:	bne	221bc <_start@@Base+0xd0d0>
   2274c:	cmp	ip, #8
   22750:	ble	23874 <_start@@Base+0xe788>
   22754:	mov	r2, r7
   22758:	mov	r1, r4
   2275c:	mov	r0, r5
   22760:	bl	19728 <_start@@Base+0x463c>
   22764:	cmp	r0, r4
   22768:	mov	r6, r0
   2276c:	beq	23874 <_start@@Base+0xe788>
   22770:	mov	fp, #0
   22774:	mov	sl, #0
   22778:	mov	r1, r0
   2277c:	add	r3, sp, #240	; 0xf0
   22780:	mov	r2, r7
   22784:	mov	r0, r5
   22788:	strd	sl, [sp, #240]	; 0xf0
   2278c:	bl	17a54 <_start@@Base+0x2968>
   22790:	cmp	r6, r0
   22794:	mov	fp, r0
   22798:	beq	23cfc <_start@@Base+0xec10>
   2279c:	ldrd	r2, [sp, #240]	; 0xf0
   227a0:	orrs	r3, r2, r3
   227a4:	bne	227b4 <_start@@Base+0xd6c8>
   227a8:	ldr	r3, [r5, #8]
   227ac:	tst	r3, #2
   227b0:	beq	22138 <_start@@Base+0xd04c>
   227b4:	mov	r3, #8
   227b8:	mov	r1, #7
   227bc:	b	225d4 <_start@@Base+0xd4e8>
   227c0:	add	r1, pc, #616	; 0x268
   227c4:	ldrd	r0, [r1]
   227c8:	ldrd	r2, [sp, #24]
   227cc:	cmp	r3, r1
   227d0:	cmpeq	r2, r0
   227d4:	beq	23718 <_start@@Base+0xe62c>
   227d8:	ldrd	r0, [sp, #120]	; 0x78
   227dc:	movw	r3, #25186	; 0x6262
   227e0:	movt	r3, #25186	; 0x6262
   227e4:	mov	r2, #0
   227e8:	cmp	r1, r3
   227ec:	cmpeq	r0, r2
   227f0:	bne	221bc <_start@@Base+0xd0d0>
   227f4:	cmp	ip, #4
   227f8:	ble	221bc <_start@@Base+0xd0d0>
   227fc:	mov	r1, r4
   22800:	mov	r3, #4
   22804:	mov	r2, r7
   22808:	mov	r0, r5
   2280c:	bl	199e0 <_start@@Base+0x48f4>
   22810:	cmp	r0, r4
   22814:	mov	r1, r0
   22818:	beq	221bc <_start@@Base+0xd0d0>
   2281c:	add	r3, sp, #232	; 0xe8
   22820:	mov	r2, r7
   22824:	mov	r0, r5
   22828:	bl	31e40 <flatcc_json_parser_build_string@@Base>
   2282c:	ldr	r3, [sp, #232]	; 0xe8
   22830:	mov	fp, r0
   22834:	cmp	r3, #0
   22838:	beq	222d8 <_start@@Base+0xd1ec>
   2283c:	mov	r1, #2
   22840:	ldr	r0, [r5]
   22844:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   22848:	cmp	r0, #0
   2284c:	bne	22130 <_start@@Base+0xd044>
   22850:	b	222d8 <_start@@Base+0xd1ec>
   22854:	add	r3, pc, #476	; 0x1dc
   22858:	ldrd	r2, [r3]
   2285c:	ldrd	r0, [sp, #96]	; 0x60
   22860:	cmp	r1, r3
   22864:	cmpeq	r0, r2
   22868:	bne	22f60 <_start@@Base+0xde74>
   2286c:	cmp	r6, #6
   22870:	ble	22f60 <_start@@Base+0xde74>
   22874:	mov	r3, #6
   22878:	mov	r2, r7
   2287c:	mov	r1, r4
   22880:	mov	r0, r5
   22884:	bl	199e0 <_start@@Base+0x48f4>
   22888:	cmp	r4, r0
   2288c:	mov	r6, r0
   22890:	beq	22f60 <_start@@Base+0xde74>
   22894:	mov	r1, #2
   22898:	ldr	r0, [r5]
   2289c:	bl	28038 <flatcc_builder_start_table@@Base>
   228a0:	cmp	r0, #0
   228a4:	mov	r1, r6
   228a8:	bne	222dc <_start@@Base+0xd1f0>
   228ac:	add	r3, sp, #224	; 0xe0
   228b0:	mov	r2, r7
   228b4:	mov	r0, r5
   228b8:	bl	19ae0 <_start@@Base+0x49f4>
   228bc:	ldr	r3, [sp, #224]	; 0xe0
   228c0:	cmp	r3, #0
   228c4:	beq	23e78 <_start@@Base+0xed8c>
   228c8:	cmp	r7, r0
   228cc:	beq	228f8 <_start@@Base+0xd80c>
   228d0:	ldrb	r3, [r0]
   228d4:	cmp	r3, #34	; 0x22
   228d8:	moveq	r3, #0
   228dc:	addeq	r0, r0, #1
   228e0:	streq	r3, [r5, #12]
   228e4:	beq	228f8 <_start@@Base+0xd80c>
   228e8:	cmp	r3, #46	; 0x2e
   228ec:	movne	r3, #1
   228f0:	strne	r3, [r5, #12]
   228f4:	beq	23700 <_start@@Base+0xe614>
   228f8:	sub	r3, r7, r0
   228fc:	cmp	r3, #8
   22900:	bhi	22934 <_start@@Base+0xd848>
   22904:	sub	r3, r3, #1
   22908:	cmp	r3, #7
   2290c:	ldrls	pc, [pc, r3, lsl #2]
   22910:	b	22c94 <_start@@Base+0xdba8>
   22914:	andeq	r2, r2, ip, lsl sl
   22918:	andeq	r2, r2, r0, lsl sl
   2291c:	andeq	r2, r2, r4, lsl #20
   22920:	strdeq	r2, [r2], -r8
   22924:	andeq	r2, r2, ip, ror #19
   22928:	andeq	r2, r2, r0, ror #19
   2292c:	ldrdeq	r2, [r2], -r4
   22930:	andeq	r2, r2, r4, lsr r9
   22934:	ldrb	sl, [r0, #7]
   22938:	mov	fp, #0
   2293c:	mov	r3, fp
   22940:	ldrb	r8, [r0, #6]
   22944:	orr	r2, sl, r8, lsl #8
   22948:	ldrb	r8, [r0, #5]
   2294c:	orr	r2, r2, r8, lsl #16
   22950:	ldrb	r8, [r0, #4]
   22954:	orr	r2, r2, r8, lsl #24
   22958:	ldrb	sl, [r0, #3]
   2295c:	orr	r3, r3, sl
   22960:	ldrb	sl, [r0, #2]
   22964:	orr	r3, r3, sl, lsl #8
   22968:	ldrb	sl, [r0, #1]
   2296c:	orr	sl, r3, sl, lsl #16
   22970:	str	r2, [sp, #72]	; 0x48
   22974:	ldrb	r2, [r0]
   22978:	add	r9, pc, #192	; 0xc0
   2297c:	ldrd	r8, [r9]
   22980:	orr	r3, sl, r2, lsl #24
   22984:	str	r3, [sp, #76]	; 0x4c
   22988:	ldrd	r2, [sp, #72]	; 0x48
   2298c:	cmp	r3, r9
   22990:	cmpeq	r2, r8
   22994:	bne	22c94 <_start@@Base+0xdba8>
   22998:	add	r4, r0, #8
   2299c:	sub	r1, r7, r4
   229a0:	cmp	r1, #8
   229a4:	bhi	22a5c <_start@@Base+0xd970>
   229a8:	sub	r3, r1, #2
   229ac:	cmp	r3, #6
   229b0:	ldrls	pc, [pc, r3, lsl #2]
   229b4:	b	22cac <_start@@Base+0xdbc0>
   229b8:	andeq	r2, r2, r4, ror ip
   229bc:	andeq	r2, r2, r8, ror #24
   229c0:	andeq	r2, r2, ip, asr ip
   229c4:	andeq	r2, r2, r0, asr ip
   229c8:	andeq	r2, r2, r4, asr #24
   229cc:	andeq	r2, r2, r8, lsr ip
   229d0:	andeq	r2, r2, ip, asr sl
   229d4:	mov	sl, #0
   229d8:	mov	fp, #0
   229dc:	b	2293c <_start@@Base+0xd850>
   229e0:	mov	r2, #0
   229e4:	mov	r3, r2
   229e8:	b	22948 <_start@@Base+0xd85c>
   229ec:	mov	r2, #0
   229f0:	mov	r3, r2
   229f4:	b	22950 <_start@@Base+0xd864>
   229f8:	mov	r2, #0
   229fc:	mov	r3, r2
   22a00:	b	22958 <_start@@Base+0xd86c>
   22a04:	mov	r2, #0
   22a08:	mov	r3, r2
   22a0c:	b	22960 <_start@@Base+0xd874>
   22a10:	mov	r2, #0
   22a14:	mov	r3, r2
   22a18:	b	22968 <_start@@Base+0xd87c>
   22a1c:	mov	r2, #0
   22a20:	mov	sl, r2
   22a24:	b	22970 <_start@@Base+0xd884>
   22a28:	teqcc	r2, r4, lsr r3
   22a2c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   22a30:	teqcc	r2, r4, lsr r3
   22a34:	rsbvs	r6, r2, #536870918	; 0x20000006
   22a38:	ldrvs	r0, [r3, -r0]!
   22a3c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   22a40:	svcpl	0x00626262
   22a44:	cmnvs	r1, r1, ror #2
   22a48:	cmnvs	r2, pc, asr r4
   22a4c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22a50:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   22a54:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22a58:	strdeq	r9, [r5], -r8
   22a5c:	ldrb	r2, [r0, #15]
   22a60:	mov	r3, #0
   22a64:	mov	ip, r3
   22a68:	ldrb	sl, [r0, #14]
   22a6c:	orr	r2, r2, sl, lsl #8
   22a70:	ldrb	sl, [r0, #13]
   22a74:	orr	r2, r2, sl, lsl #16
   22a78:	ldrb	sl, [r0, #12]
   22a7c:	orr	sl, r2, sl, lsl #24
   22a80:	ldrb	r8, [r0, #11]
   22a84:	orr	ip, ip, r8
   22a88:	ldrb	r2, [r0, #8]
   22a8c:	str	sl, [sp, #48]	; 0x30
   22a90:	ldrb	r8, [r0, #10]
   22a94:	lsl	lr, r2, #24
   22a98:	ldrb	r2, [r0, #9]
   22a9c:	orr	r8, ip, r8, lsl #8
   22aa0:	orr	r2, lr, r2, lsl #16
   22aa4:	orr	r3, r2, r8
   22aa8:	sub	r9, pc, #104	; 0x68
   22aac:	ldrd	r8, [r9]
   22ab0:	str	r3, [sp, #52]	; 0x34
   22ab4:	ldrd	r2, [sp, #48]	; 0x30
   22ab8:	cmp	r3, r9
   22abc:	cmpeq	r2, r8
   22ac0:	beq	22d38 <_start@@Base+0xdc4c>
   22ac4:	ldrd	r2, [sp, #48]	; 0x30
   22ac8:	sub	r9, pc, #128	; 0x80
   22acc:	ldrd	r8, [r9]
   22ad0:	bic	r0, r2, #255	; 0xff
   22ad4:	str	r0, [sp, #112]	; 0x70
   22ad8:	str	r3, [sp, #116]	; 0x74
   22adc:	ldrd	r2, [sp, #112]	; 0x70
   22ae0:	cmp	r3, r9
   22ae4:	cmpeq	r2, r8
   22ae8:	bne	22cac <_start@@Base+0xdbc0>
   22aec:	cmp	r1, #7
   22af0:	ble	22cac <_start@@Base+0xdbc0>
   22af4:	mov	r3, #7
   22af8:	mov	r2, r7
   22afc:	mov	r1, r4
   22b00:	mov	r0, r5
   22b04:	bl	199e0 <_start@@Base+0x48f4>
   22b08:	cmp	r4, r0
   22b0c:	mov	r6, r0
   22b10:	beq	22cac <_start@@Base+0xdbc0>
   22b14:	mov	r1, #0
   22b18:	mov	r3, #0
   22b1c:	cmp	r7, r0
   22b20:	mov	r0, #0
   22b24:	str	r3, [sp, #228]	; 0xe4
   22b28:	strd	r0, [sp, #232]	; 0xe8
   22b2c:	strd	r0, [sp, #240]	; 0xf0
   22b30:	beq	23928 <_start@@Base+0xe83c>
   22b34:	add	r0, sp, #240	; 0xf0
   22b38:	add	r3, sp, #228	; 0xe4
   22b3c:	mov	r2, r7
   22b40:	mov	r1, r6
   22b44:	str	r0, [sp]
   22b48:	mov	r0, r5
   22b4c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   22b50:	cmp	r6, r0
   22b54:	mov	fp, r0
   22b58:	bne	23a1c <_start@@Base+0xe930>
   22b5c:	add	r0, sp, #232	; 0xe8
   22b60:	ldr	r3, [pc, #-272]	; 22a58 <_start@@Base+0xd96c>
   22b64:	mov	r2, r7
   22b68:	mov	r1, fp
   22b6c:	str	r0, [sp]
   22b70:	mov	r0, r5
   22b74:	bl	1c818 <_start@@Base+0x772c>
   22b78:	cmp	r7, r0
   22b7c:	cmpne	r0, fp
   22b80:	beq	23e60 <_start@@Base+0xed74>
   22b84:	ldrd	r2, [sp, #232]	; 0xe8
   22b88:	mov	fp, r0
   22b8c:	orrs	r3, r2, r3
   22b90:	bne	22ba0 <_start@@Base+0xdab4>
   22b94:	ldr	r3, [r5, #8]
   22b98:	tst	r3, #2
   22b9c:	beq	22bc4 <_start@@Base+0xdad8>
   22ba0:	mov	r3, #8
   22ba4:	mov	r1, #0
   22ba8:	ldr	r0, [r5]
   22bac:	mov	r2, r3
   22bb0:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   22bb4:	cmp	r0, #0
   22bb8:	beq	222d8 <_start@@Base+0xd1ec>
   22bbc:	ldrd	r2, [sp, #232]	; 0xe8
   22bc0:	strd	r2, [r0]
   22bc4:	sub	r3, r7, fp
   22bc8:	cmp	r3, #1
   22bcc:	ble	22be0 <_start@@Base+0xdaf4>
   22bd0:	ldrb	r3, [fp]
   22bd4:	cmp	r3, #32
   22bd8:	bhi	22bf4 <_start@@Base+0xdb08>
   22bdc:	beq	22efc <_start@@Base+0xde10>
   22be0:	mov	r1, fp
   22be4:	mov	r2, r7
   22be8:	mov	r0, r5
   22bec:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   22bf0:	mov	fp, r0
   22bf4:	cmp	r7, fp
   22bf8:	beq	22cf8 <_start@@Base+0xdc0c>
   22bfc:	ldrb	r3, [fp]
   22c00:	cmp	r3, #44	; 0x2c
   22c04:	beq	22f10 <_start@@Base+0xde24>
   22c08:	mov	r3, #0
   22c0c:	str	r3, [sp, #224]	; 0xe0
   22c10:	ldrb	r3, [fp]
   22c14:	cmp	r3, #125	; 0x7d
   22c18:	beq	22cc4 <_start@@Base+0xdbd8>
   22c1c:	mov	r3, #10
   22c20:	mov	r1, fp
   22c24:	mov	r2, r7
   22c28:	mov	r0, r5
   22c2c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   22c30:	ldr	r3, [sp, #224]	; 0xe0
   22c34:	b	228c0 <_start@@Base+0xd7d4>
   22c38:	mov	r2, #0
   22c3c:	mov	r3, #0
   22c40:	b	22a64 <_start@@Base+0xd978>
   22c44:	mov	r2, #0
   22c48:	mov	ip, r2
   22c4c:	b	22a70 <_start@@Base+0xd984>
   22c50:	mov	r2, #0
   22c54:	mov	ip, r2
   22c58:	b	22a78 <_start@@Base+0xd98c>
   22c5c:	mov	sl, #0
   22c60:	mov	ip, sl
   22c64:	b	22a80 <_start@@Base+0xd994>
   22c68:	mov	sl, #0
   22c6c:	mov	ip, sl
   22c70:	b	22a88 <_start@@Base+0xd99c>
   22c74:	ldrb	r2, [r0, #9]
   22c78:	mov	ip, #0
   22c7c:	ldrb	r8, [r0, #8]
   22c80:	str	ip, [sp, #48]	; 0x30
   22c84:	lsl	r2, r2, #16
   22c88:	orr	r3, r2, r8, lsl #24
   22c8c:	str	r3, [sp, #52]	; 0x34
   22c90:	b	22ac4 <_start@@Base+0xd9d8>
   22c94:	mov	r1, r0
   22c98:	mov	r2, r7
   22c9c:	mov	r0, r5
   22ca0:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   22ca4:	mov	fp, r0
   22ca8:	b	22bc4 <_start@@Base+0xdad8>
   22cac:	mov	r1, r4
   22cb0:	mov	r2, r7
   22cb4:	mov	r0, r5
   22cb8:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   22cbc:	mov	fp, r0
   22cc0:	b	22bc4 <_start@@Base+0xdad8>
   22cc4:	add	r1, fp, #1
   22cc8:	sub	r3, r7, r1
   22ccc:	cmp	r3, #1
   22cd0:	ble	22ce4 <_start@@Base+0xdbf8>
   22cd4:	ldrb	r3, [fp, #1]
   22cd8:	cmp	r3, #32
   22cdc:	bhi	23794 <_start@@Base+0xe6a8>
   22ce0:	beq	23930 <_start@@Base+0xe844>
   22ce4:	mov	r2, r7
   22ce8:	mov	r0, r5
   22cec:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   22cf0:	ldr	r3, [sp, #224]	; 0xe0
   22cf4:	b	228c0 <_start@@Base+0xd7d4>
   22cf8:	mov	r3, #0
   22cfc:	str	r3, [sp, #224]	; 0xe0
   22d00:	ldr	r3, [r5, #24]
   22d04:	cmp	r3, #0
   22d08:	bne	222d8 <_start@@Base+0xd1ec>
   22d0c:	ldr	r0, [r5]
   22d10:	bl	289b8 <flatcc_builder_end_table@@Base>
   22d14:	subs	r4, r0, #0
   22d18:	beq	222d8 <_start@@Base+0xd1ec>
   22d1c:	mov	r1, #2
   22d20:	ldr	r0, [r5]
   22d24:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   22d28:	cmp	r0, #0
   22d2c:	beq	222f0 <_start@@Base+0xd204>
   22d30:	str	r4, [r0]
   22d34:	b	223b4 <_start@@Base+0xd2c8>
   22d38:	add	r4, r0, #16
   22d3c:	sub	r1, r7, r4
   22d40:	cmp	r1, #8
   22d44:	bhi	22d74 <_start@@Base+0xdc88>
   22d48:	sub	r3, r1, #2
   22d4c:	cmp	r3, #6
   22d50:	ldrls	pc, [pc, r3, lsl #2]
   22d54:	b	22cac <_start@@Base+0xdbc0>
   22d58:	andeq	r2, r2, r4, ror #29
   22d5c:	ldrdeq	r2, [r2], -r8
   22d60:	andeq	r2, r2, ip, asr #29
   22d64:	andeq	r2, r2, r0, asr #29
   22d68:			; <UNDEFINED> instruction: 0x00022eb4
   22d6c:	strdeq	r2, [r2], -r0
   22d70:	andeq	r2, r2, r4, ror sp
   22d74:	ldrb	sl, [r0, #23]
   22d78:	mov	fp, #0
   22d7c:	mov	r3, fp
   22d80:	ldrb	r8, [r0, #22]
   22d84:	orr	r2, sl, r8, lsl #8
   22d88:	ldrb	r8, [r0, #21]
   22d8c:	orr	r2, r2, r8, lsl #16
   22d90:	ldrb	r8, [r0, #20]
   22d94:	orr	r8, r2, r8, lsl #24
   22d98:	ldrb	sl, [r0, #19]
   22d9c:	orr	r3, r3, sl
   22da0:	ldrb	sl, [r0, #18]
   22da4:	orr	r3, r3, sl, lsl #8
   22da8:	and	r2, r8, #-16777216	; 0xff000000
   22dac:	ldrb	sl, [r0, #17]
   22db0:	mov	r8, #0
   22db4:	str	r2, [sp, #160]	; 0xa0
   22db8:	ldrb	r2, [r0, #16]
   22dbc:	orr	sl, r3, sl, lsl #16
   22dc0:	orr	r3, sl, r2, lsl #24
   22dc4:	add	fp, pc, #868	; 0x364
   22dc8:	ldrd	sl, [fp]
   22dcc:	str	r3, [sp, #164]	; 0xa4
   22dd0:	ldrd	r2, [sp, #160]	; 0xa0
   22dd4:	cmp	r3, fp
   22dd8:	cmpeq	r2, sl
   22ddc:	bne	22cac <_start@@Base+0xdbc0>
   22de0:	cmp	r1, #5
   22de4:	ble	22cac <_start@@Base+0xdbc0>
   22de8:	mov	r2, r7
   22dec:	mov	r1, r4
   22df0:	mov	r0, r5
   22df4:	bl	19640 <_start@@Base+0x4554>
   22df8:	cmp	r4, r0
   22dfc:	mov	r6, r0
   22e00:	beq	22cac <_start@@Base+0xdbc0>
   22e04:	mov	r2, #0
   22e08:	mov	r3, #0
   22e0c:	str	r8, [sp, #228]	; 0xe4
   22e10:	cmp	r7, r0
   22e14:	str	r8, [sp, #232]	; 0xe8
   22e18:	strd	r2, [sp, #240]	; 0xf0
   22e1c:	beq	23b44 <_start@@Base+0xea58>
   22e20:	add	r0, sp, #240	; 0xf0
   22e24:	add	r3, sp, #232	; 0xe8
   22e28:	mov	r2, r7
   22e2c:	mov	r1, r6
   22e30:	str	r0, [sp]
   22e34:	mov	r0, r5
   22e38:	bl	317b8 <flatcc_json_parser_integer@@Base>
   22e3c:	cmp	r6, r0
   22e40:	mov	r4, r0
   22e44:	bne	23c08 <_start@@Base+0xeb1c>
   22e48:	add	ip, sp, #228	; 0xe4
   22e4c:	ldr	r3, [pc, #748]	; 23140 <_start@@Base+0xe054>
   22e50:	mov	r2, r7
   22e54:	mov	r1, r4
   22e58:	mov	r0, r5
   22e5c:	str	ip, [sp]
   22e60:	bl	1b1f4 <_start@@Base+0x6108>
   22e64:	cmp	r7, r0
   22e68:	cmpne	r0, r4
   22e6c:	mov	fp, r0
   22e70:	beq	222d8 <_start@@Base+0xd1ec>
   22e74:	ldr	r2, [sp, #228]	; 0xe4
   22e78:	cmp	r2, #0
   22e7c:	bne	22e8c <_start@@Base+0xdda0>
   22e80:	ldr	r3, [r5, #8]
   22e84:	tst	r3, #2
   22e88:	beq	22bc4 <_start@@Base+0xdad8>
   22e8c:	mov	r3, #4
   22e90:	mov	r1, #1
   22e94:	ldr	r0, [r5]
   22e98:	mov	r2, r3
   22e9c:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   22ea0:	cmp	r0, #0
   22ea4:	beq	222d8 <_start@@Base+0xd1ec>
   22ea8:	ldr	r3, [sp, #228]	; 0xe4
   22eac:	str	r3, [r0]
   22eb0:	b	22bc4 <_start@@Base+0xdad8>
   22eb4:	mov	r2, #0
   22eb8:	mov	r3, r2
   22ebc:	b	22d88 <_start@@Base+0xdc9c>
   22ec0:	mov	r2, #0
   22ec4:	mov	r3, r2
   22ec8:	b	22d90 <_start@@Base+0xdca4>
   22ecc:	mov	r8, #0
   22ed0:	mov	r3, r8
   22ed4:	b	22d98 <_start@@Base+0xdcac>
   22ed8:	mov	r8, #0
   22edc:	mov	r3, r8
   22ee0:	b	22da0 <_start@@Base+0xdcb4>
   22ee4:	mov	r8, #0
   22ee8:	mov	r3, r8
   22eec:	b	22da8 <_start@@Base+0xdcbc>
   22ef0:	mov	sl, #0
   22ef4:	mov	fp, #0
   22ef8:	b	22d7c <_start@@Base+0xdc90>
   22efc:	ldrb	r3, [fp, #1]
   22f00:	cmp	r3, #32
   22f04:	addhi	fp, fp, #1
   22f08:	bls	22be0 <_start@@Base+0xdaf4>
   22f0c:	b	22bf4 <_start@@Base+0xdb08>
   22f10:	add	r0, fp, #1
   22f14:	sub	r3, r7, r0
   22f18:	cmp	r3, #1
   22f1c:	ble	22f30 <_start@@Base+0xde44>
   22f20:	ldrb	r3, [fp, #1]
   22f24:	cmp	r3, #32
   22f28:	bhi	22f40 <_start@@Base+0xde54>
   22f2c:	beq	23aa8 <_start@@Base+0xe9bc>
   22f30:	mov	r1, r0
   22f34:	mov	r2, r7
   22f38:	mov	r0, r5
   22f3c:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   22f40:	cmp	r7, r0
   22f44:	beq	23ac0 <_start@@Base+0xe9d4>
   22f48:	ldrb	r3, [r0]
   22f4c:	cmp	r3, #125	; 0x7d
   22f50:	beq	23be8 <_start@@Base+0xeafc>
   22f54:	mov	r3, #1
   22f58:	str	r3, [sp, #224]	; 0xe0
   22f5c:	b	228c8 <_start@@Base+0xd7dc>
   22f60:	mov	r1, r4
   22f64:	mov	r2, r7
   22f68:	mov	r0, r5
   22f6c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   22f70:	mov	fp, r0
   22f74:	b	223b4 <_start@@Base+0xd2c8>
   22f78:	cmp	r6, #6
   22f7c:	ble	22f60 <_start@@Base+0xde74>
   22f80:	mov	r3, #6
   22f84:	mov	r2, r7
   22f88:	mov	r1, r4
   22f8c:	mov	r0, r5
   22f90:	bl	199e0 <_start@@Base+0x48f4>
   22f94:	cmp	r4, r0
   22f98:	mov	r6, r0
   22f9c:	beq	22f60 <_start@@Base+0xde74>
   22fa0:	mov	r1, #2
   22fa4:	ldr	r0, [r5]
   22fa8:	bl	28038 <flatcc_builder_start_table@@Base>
   22fac:	cmp	r0, #0
   22fb0:	mov	r1, r6
   22fb4:	bne	222dc <_start@@Base+0xd1f0>
   22fb8:	add	r3, sp, #224	; 0xe0
   22fbc:	mov	r2, r7
   22fc0:	mov	r0, r5
   22fc4:	bl	19ae0 <_start@@Base+0x49f4>
   22fc8:	ldr	r3, [sp, #224]	; 0xe0
   22fcc:	cmp	r3, #0
   22fd0:	beq	23e68 <_start@@Base+0xed7c>
   22fd4:	cmp	r7, r0
   22fd8:	beq	23004 <_start@@Base+0xdf18>
   22fdc:	ldrb	r3, [r0]
   22fe0:	cmp	r3, #34	; 0x22
   22fe4:	moveq	r3, #0
   22fe8:	addeq	r0, r0, #1
   22fec:	streq	r3, [r5, #12]
   22ff0:	beq	23004 <_start@@Base+0xdf18>
   22ff4:	cmp	r3, #46	; 0x2e
   22ff8:	movne	r3, #1
   22ffc:	strne	r3, [r5, #12]
   23000:	beq	23628 <_start@@Base+0xe53c>
   23004:	sub	r3, r7, r0
   23008:	cmp	r3, #8
   2300c:	bhi	23040 <_start@@Base+0xdf54>
   23010:	sub	r3, r3, #1
   23014:	cmp	r3, #7
   23018:	ldrls	pc, [pc, r3, lsl #2]
   2301c:	b	23358 <_start@@Base+0xe26c>
   23020:	andeq	r3, r2, r8, lsl r1
   23024:	andeq	r3, r2, ip, lsl #2
   23028:	andeq	r3, r2, r0, lsl #2
   2302c:	strdeq	r3, [r2], -r4
   23030:	andeq	r3, r2, r8, ror #1
   23034:	andeq	r3, r2, r4, lsr #2
   23038:	ldrdeq	r3, [r2], -ip
   2303c:	andeq	r3, r2, r0, asr #32
   23040:	ldrb	sl, [r0, #7]
   23044:	mov	fp, #0
   23048:	mov	r3, fp
   2304c:	ldrb	r8, [r0, #6]
   23050:	orr	r2, sl, r8, lsl #8
   23054:	ldrb	r8, [r0, #5]
   23058:	orr	r2, r2, r8, lsl #16
   2305c:	ldrb	r8, [r0, #4]
   23060:	orr	r2, r2, r8, lsl #24
   23064:	ldrb	sl, [r0, #3]
   23068:	orr	r3, r3, sl
   2306c:	ldrb	sl, [r0, #2]
   23070:	orr	sl, r3, sl, lsl #8
   23074:	ldrb	r8, [r0, #1]
   23078:	orr	sl, sl, r8, lsl #16
   2307c:	str	r2, [sp, #64]	; 0x40
   23080:	ldrb	r2, [r0]
   23084:	add	r9, pc, #172	; 0xac
   23088:	ldrd	r8, [r9]
   2308c:	orr	r3, sl, r2, lsl #24
   23090:	str	r3, [sp, #68]	; 0x44
   23094:	ldrd	r2, [sp, #64]	; 0x40
   23098:	cmp	r3, r9
   2309c:	cmpeq	r2, r8
   230a0:	bne	23358 <_start@@Base+0xe26c>
   230a4:	add	r4, r0, #8
   230a8:	sub	r1, r7, r4
   230ac:	cmp	r1, #8
   230b0:	bhi	23144 <_start@@Base+0xe058>
   230b4:	sub	r3, r1, #3
   230b8:	cmp	r3, #5
   230bc:	ldrls	pc, [pc, r3, lsl #2]
   230c0:	b	23370 <_start@@Base+0xe284>
   230c4:	andeq	r3, r2, r0, asr #6
   230c8:	andeq	r3, r2, r4, lsr r3
   230cc:	andeq	r3, r2, r8, lsr #6
   230d0:	andeq	r3, r2, ip, lsl r3
   230d4:	andeq	r3, r2, ip, asr #6
   230d8:	andeq	r3, r2, r4, asr #2
   230dc:	mov	sl, #0
   230e0:	mov	fp, #0
   230e4:	b	23048 <_start@@Base+0xdf5c>
   230e8:	mov	r2, #0
   230ec:	mov	r3, r2
   230f0:	b	2305c <_start@@Base+0xdf70>
   230f4:	mov	r2, #0
   230f8:	mov	r3, r2
   230fc:	b	23064 <_start@@Base+0xdf78>
   23100:	mov	r2, #0
   23104:	mov	r3, r2
   23108:	b	2306c <_start@@Base+0xdf80>
   2310c:	mov	r2, #0
   23110:	mov	sl, r2
   23114:	b	23074 <_start@@Base+0xdf88>
   23118:	mov	r2, #0
   2311c:	mov	sl, r2
   23120:	b	2307c <_start@@Base+0xdf90>
   23124:	mov	r2, #0
   23128:	mov	r3, r2
   2312c:	b	23054 <_start@@Base+0xdf68>
   23130:	movwvc	r0, #0
   23134:	cmnvc	r4, #112, 10	; 0x1c000000
   23138:	svcpl	0x00626262
   2313c:	cmnvs	r1, r1, ror #2
   23140:	andeq	r9, r5, ip, ror #5
   23144:	ldrb	r2, [r0, #15]
   23148:	mov	r3, #0
   2314c:	mov	ip, r3
   23150:	ldrb	r8, [r0, #14]
   23154:	orr	r2, r2, r8, lsl #8
   23158:	ldrb	r8, [r0, #13]
   2315c:	orr	r2, r2, r8, lsl #16
   23160:	ldrb	r8, [r0, #12]
   23164:	orr	r2, r2, r8, lsl #24
   23168:	ldrb	sl, [r0, #11]
   2316c:	orr	ip, ip, sl
   23170:	ldrb	r8, [r0, #8]
   23174:	mov	r6, #0
   23178:	str	r2, [sp, #32]
   2317c:	ldrb	sl, [r0, #10]
   23180:	ldrb	r2, [r0, #9]
   23184:	lsl	r8, r8, #24
   23188:	orr	sl, ip, sl, lsl #8
   2318c:	orr	r8, r8, r2, lsl #16
   23190:	orr	r3, r8, sl
   23194:	add	r9, pc, #1004	; 0x3ec
   23198:	ldrd	r8, [r9]
   2319c:	str	r3, [sp, #36]	; 0x24
   231a0:	ldrd	r2, [sp, #32]
   231a4:	bic	r0, r2, #255	; 0xff
   231a8:	str	r0, [sp, #88]	; 0x58
   231ac:	str	r3, [sp, #92]	; 0x5c
   231b0:	ldrd	r2, [sp, #88]	; 0x58
   231b4:	cmp	r3, r9
   231b8:	cmpeq	r2, r8
   231bc:	beq	233f8 <_start@@Base+0xe30c>
   231c0:	add	r9, pc, #968	; 0x3c8
   231c4:	ldrd	r8, [r9]
   231c8:	ldrd	r2, [sp, #32]
   231cc:	cmp	r3, r9
   231d0:	cmpeq	r2, r8
   231d4:	bne	23370 <_start@@Base+0xe284>
   231d8:	cmp	r1, #8
   231dc:	ble	23370 <_start@@Base+0xe284>
   231e0:	mov	r2, r7
   231e4:	mov	r1, r4
   231e8:	mov	r0, r5
   231ec:	bl	19728 <_start@@Base+0x463c>
   231f0:	cmp	r4, r0
   231f4:	mov	r8, r0
   231f8:	beq	23370 <_start@@Base+0xe284>
   231fc:	mov	r2, #0
   23200:	mov	r3, #0
   23204:	str	r6, [sp, #228]	; 0xe4
   23208:	cmp	r7, r0
   2320c:	str	r6, [sp, #232]	; 0xe8
   23210:	strd	r2, [sp, #240]	; 0xf0
   23214:	beq	23858 <_start@@Base+0xe76c>
   23218:	add	r0, sp, #240	; 0xf0
   2321c:	add	r3, sp, #232	; 0xe8
   23220:	mov	r2, r7
   23224:	mov	r1, r8
   23228:	str	r0, [sp]
   2322c:	mov	r0, r5
   23230:	bl	317b8 <flatcc_json_parser_integer@@Base>
   23234:	cmp	r8, r0
   23238:	mov	r4, r0
   2323c:	bne	23970 <_start@@Base+0xe884>
   23240:	add	ip, sp, #228	; 0xe4
   23244:	ldr	r3, [pc, #844]	; 23598 <_start@@Base+0xe4ac>
   23248:	mov	r2, r7
   2324c:	mov	r1, r4
   23250:	mov	r0, r5
   23254:	str	ip, [sp]
   23258:	bl	1b1f4 <_start@@Base+0x6108>
   2325c:	cmp	r7, r0
   23260:	cmpne	r0, r4
   23264:	mov	fp, r0
   23268:	beq	222d8 <_start@@Base+0xd1ec>
   2326c:	ldr	r2, [sp, #228]	; 0xe4
   23270:	cmp	r2, #0
   23274:	bne	23284 <_start@@Base+0xe198>
   23278:	ldr	r3, [r5, #8]
   2327c:	tst	r3, #2
   23280:	beq	232a8 <_start@@Base+0xe1bc>
   23284:	mov	r3, #4
   23288:	mov	r1, #1
   2328c:	ldr	r0, [r5]
   23290:	mov	r2, r3
   23294:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   23298:	cmp	r0, #0
   2329c:	beq	222d8 <_start@@Base+0xd1ec>
   232a0:	ldr	r3, [sp, #228]	; 0xe4
   232a4:	str	r3, [r0]
   232a8:	sub	r3, r7, fp
   232ac:	cmp	r3, #1
   232b0:	ble	232c4 <_start@@Base+0xe1d8>
   232b4:	ldrb	r3, [fp]
   232b8:	cmp	r3, #32
   232bc:	bhi	232d8 <_start@@Base+0xe1ec>
   232c0:	beq	234d0 <_start@@Base+0xe3e4>
   232c4:	mov	r1, fp
   232c8:	mov	r2, r7
   232cc:	mov	r0, r5
   232d0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   232d4:	mov	fp, r0
   232d8:	cmp	r7, fp
   232dc:	beq	233bc <_start@@Base+0xe2d0>
   232e0:	ldrb	r3, [fp]
   232e4:	cmp	r3, #44	; 0x2c
   232e8:	beq	234e4 <_start@@Base+0xe3f8>
   232ec:	mov	r3, #0
   232f0:	str	r3, [sp, #224]	; 0xe0
   232f4:	ldrb	r3, [fp]
   232f8:	cmp	r3, #125	; 0x7d
   232fc:	beq	23388 <_start@@Base+0xe29c>
   23300:	mov	r3, #10
   23304:	mov	r1, fp
   23308:	mov	r2, r7
   2330c:	mov	r0, r5
   23310:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23314:	ldr	r3, [sp, #224]	; 0xe0
   23318:	b	22fcc <_start@@Base+0xdee0>
   2331c:	mov	r2, #0
   23320:	mov	ip, r2
   23324:	b	23158 <_start@@Base+0xe06c>
   23328:	mov	r2, #0
   2332c:	mov	ip, r2
   23330:	b	23160 <_start@@Base+0xe074>
   23334:	mov	r2, #0
   23338:	mov	ip, r2
   2333c:	b	23168 <_start@@Base+0xe07c>
   23340:	mov	r2, #0
   23344:	mov	ip, r2
   23348:	b	23170 <_start@@Base+0xe084>
   2334c:	mov	r2, #0
   23350:	mov	r3, #0
   23354:	b	2314c <_start@@Base+0xe060>
   23358:	mov	r1, r0
   2335c:	mov	r2, r7
   23360:	mov	r0, r5
   23364:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   23368:	mov	fp, r0
   2336c:	b	232a8 <_start@@Base+0xe1bc>
   23370:	mov	r1, r4
   23374:	mov	r2, r7
   23378:	mov	r0, r5
   2337c:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   23380:	mov	fp, r0
   23384:	b	232a8 <_start@@Base+0xe1bc>
   23388:	add	r1, fp, #1
   2338c:	sub	r3, r7, r1
   23390:	cmp	r3, #1
   23394:	ble	233a8 <_start@@Base+0xe2bc>
   23398:	ldrb	r3, [fp, #1]
   2339c:	cmp	r3, #32
   233a0:	bhi	236f8 <_start@@Base+0xe60c>
   233a4:	beq	23860 <_start@@Base+0xe774>
   233a8:	mov	r2, r7
   233ac:	mov	r0, r5
   233b0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   233b4:	ldr	r3, [sp, #224]	; 0xe0
   233b8:	b	22fcc <_start@@Base+0xdee0>
   233bc:	mov	r3, #0
   233c0:	str	r3, [sp, #224]	; 0xe0
   233c4:	ldr	r3, [r5, #24]
   233c8:	cmp	r3, #0
   233cc:	bne	222d8 <_start@@Base+0xd1ec>
   233d0:	ldr	r0, [r5]
   233d4:	bl	289b8 <flatcc_builder_end_table@@Base>
   233d8:	subs	r4, r0, #0
   233dc:	beq	222d8 <_start@@Base+0xd1ec>
   233e0:	mov	r1, #1
   233e4:	ldr	r0, [r5]
   233e8:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   233ec:	cmp	r0, #0
   233f0:	bne	22d30 <_start@@Base+0xdc44>
   233f4:	b	222f0 <_start@@Base+0xd204>
   233f8:	cmp	r1, #7
   233fc:	ble	23370 <_start@@Base+0xe284>
   23400:	mov	r3, #7
   23404:	mov	r2, r7
   23408:	mov	r1, r4
   2340c:	mov	r0, r5
   23410:	bl	199e0 <_start@@Base+0x48f4>
   23414:	cmp	r4, r0
   23418:	mov	r8, r0
   2341c:	beq	23370 <_start@@Base+0xe284>
   23420:	mov	r2, #0
   23424:	mov	r3, #0
   23428:	str	r6, [sp, #228]	; 0xe4
   2342c:	cmp	r7, r0
   23430:	strd	r2, [sp, #232]	; 0xe8
   23434:	strd	r2, [sp, #240]	; 0xf0
   23438:	beq	23850 <_start@@Base+0xe764>
   2343c:	add	r0, sp, #240	; 0xf0
   23440:	add	r3, sp, #228	; 0xe4
   23444:	mov	r2, r7
   23448:	mov	r1, r8
   2344c:	str	r0, [sp]
   23450:	mov	r0, r5
   23454:	bl	317b8 <flatcc_json_parser_integer@@Base>
   23458:	cmp	r8, r0
   2345c:	mov	fp, r0
   23460:	bne	23944 <_start@@Base+0xe858>
   23464:	add	ip, sp, #232	; 0xe8
   23468:	ldr	r3, [pc, #300]	; 2359c <_start@@Base+0xe4b0>
   2346c:	mov	r2, r7
   23470:	mov	r1, fp
   23474:	mov	r0, r5
   23478:	str	ip, [sp]
   2347c:	bl	1c818 <_start@@Base+0x772c>
   23480:	cmp	r7, r0
   23484:	cmpne	r0, fp
   23488:	beq	23e60 <_start@@Base+0xed74>
   2348c:	ldrd	r2, [sp, #232]	; 0xe8
   23490:	mov	fp, r0
   23494:	orrs	r3, r2, r3
   23498:	bne	234a8 <_start@@Base+0xe3bc>
   2349c:	ldr	r3, [r5, #8]
   234a0:	tst	r3, #2
   234a4:	beq	232a8 <_start@@Base+0xe1bc>
   234a8:	mov	r3, #8
   234ac:	mov	r1, #0
   234b0:	ldr	r0, [r5]
   234b4:	mov	r2, r3
   234b8:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   234bc:	cmp	r0, #0
   234c0:	beq	222d8 <_start@@Base+0xd1ec>
   234c4:	ldrd	r2, [sp, #232]	; 0xe8
   234c8:	strd	r2, [r0]
   234cc:	b	232a8 <_start@@Base+0xe1bc>
   234d0:	ldrb	r3, [fp, #1]
   234d4:	cmp	r3, #32
   234d8:	addhi	fp, fp, #1
   234dc:	bls	232c4 <_start@@Base+0xe1d8>
   234e0:	b	232d8 <_start@@Base+0xe1ec>
   234e4:	add	r0, fp, #1
   234e8:	sub	r3, r7, r0
   234ec:	cmp	r3, #1
   234f0:	ble	23504 <_start@@Base+0xe418>
   234f4:	ldrb	r3, [fp, #1]
   234f8:	cmp	r3, #32
   234fc:	bhi	23514 <_start@@Base+0xe428>
   23500:	beq	239c4 <_start@@Base+0xe8d8>
   23504:	mov	r1, r0
   23508:	mov	r2, r7
   2350c:	mov	r0, r5
   23510:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   23514:	cmp	r7, r0
   23518:	beq	239dc <_start@@Base+0xe8f0>
   2351c:	ldrb	r3, [r0]
   23520:	cmp	r3, #125	; 0x7d
   23524:	beq	23b24 <_start@@Base+0xea38>
   23528:	mov	r3, #1
   2352c:	str	r3, [sp, #224]	; 0xe0
   23530:	b	22fd4 <_start@@Base+0xdee8>
   23534:	mov	r9, fp
   23538:	mov	r3, #0
   2353c:	mov	fp, r5
   23540:	mov	sl, r7
   23544:	str	r3, [sp, #208]	; 0xd0
   23548:	ldr	r3, [fp, #24]
   2354c:	cmp	r3, #0
   23550:	bne	217bc <_start@@Base+0xc6d0>
   23554:	mov	r1, r9
   23558:	mov	r2, sl
   2355c:	ldr	r3, [sp, #216]	; 0xd8
   23560:	mov	r0, fp
   23564:	bl	32224 <flatcc_json_parser_finalize_unions@@Base>
   23568:	mov	r9, r0
   2356c:	ldr	r0, [fp]
   23570:	bl	289b8 <flatcc_builder_end_table@@Base>
   23574:	ldr	r3, [sp, #200]	; 0xc8
   23578:	cmp	r0, #0
   2357c:	str	r0, [r3]
   23580:	bne	217d4 <_start@@Base+0xc6e8>
   23584:	b	217bc <_start@@Base+0xc6d0>
   23588:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   2358c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   23590:	cmnvs	r2, pc, asr r4
   23594:	subsvs	r7, pc, #116, 6	; 0xd0000001
   23598:	muleq	r5, r8, r2
   2359c:	andeq	r9, r5, ip, lsl #5
   235a0:	ldrb	r3, [fp, #1]
   235a4:	cmp	r3, #32
   235a8:	addhi	fp, fp, #1
   235ac:	bls	21988 <_start@@Base+0xc89c>
   235b0:	b	2199c <_start@@Base+0xc8b0>
   235b4:	add	r4, fp, #1
   235b8:	sub	r3, r7, r4
   235bc:	cmp	r3, #1
   235c0:	ble	235d4 <_start@@Base+0xe4e8>
   235c4:	ldrb	r3, [fp, #1]
   235c8:	cmp	r3, #32
   235cc:	bhi	235e8 <_start@@Base+0xe4fc>
   235d0:	beq	23c88 <_start@@Base+0xeb9c>
   235d4:	mov	r1, r4
   235d8:	mov	r2, r7
   235dc:	mov	r0, r5
   235e0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   235e4:	mov	r4, r0
   235e8:	cmp	r7, r4
   235ec:	beq	23d2c <_start@@Base+0xec40>
   235f0:	ldrb	r3, [r4]
   235f4:	cmp	r3, #125	; 0x7d
   235f8:	movne	r3, #1
   235fc:	strne	r3, [sp, #208]	; 0xd0
   23600:	bne	21844 <_start@@Base+0xc758>
   23604:	mov	r3, #0
   23608:	add	r1, r4, #1
   2360c:	mov	r2, r7
   23610:	mov	r0, r5
   23614:	str	r3, [sp, #208]	; 0xd0
   23618:	bl	17000 <_start@@Base+0x1f14>
   2361c:	mov	r4, r0
   23620:	ldr	r3, [sp, #208]	; 0xd0
   23624:	b	219e0 <_start@@Base+0xc8f4>
   23628:	mov	r1, r0
   2362c:	mov	r3, #5
   23630:	mov	r2, r7
   23634:	mov	r0, r5
   23638:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2363c:	b	23004 <_start@@Base+0xdf18>
   23640:	add	r4, r4, #8
   23644:	mov	r1, r7
   23648:	mov	r0, r4
   2364c:	mov	sl, #0
   23650:	bl	151e0 <_start@@Base+0xf4>
   23654:	and	r3, r1, #-16777216	; 0xff000000
   23658:	str	sl, [sp, #176]	; 0xb0
   2365c:	str	r3, [sp, #180]	; 0xb4
   23660:	ldrd	r2, [sp, #176]	; 0xb0
   23664:	cmp	r3, #889192448	; 0x35000000
   23668:	cmpeq	r2, #0
   2366c:	bne	221bc <_start@@Base+0xd0d0>
   23670:	sub	r3, r7, r4
   23674:	cmp	r3, #1
   23678:	ble	221bc <_start@@Base+0xd0d0>
   2367c:	mov	r2, r7
   23680:	mov	r1, r4
   23684:	mov	r0, r5
   23688:	bl	19810 <_start@@Base+0x4724>
   2368c:	cmp	r4, r0
   23690:	mov	r6, r0
   23694:	beq	221bc <_start@@Base+0xd0d0>
   23698:	mov	r1, r0
   2369c:	mov	r2, r7
   236a0:	str	sl, [sp, #240]	; 0xf0
   236a4:	add	r3, sp, #240	; 0xf0
   236a8:	mov	r0, r5
   236ac:	bl	18108 <_start@@Base+0x301c>
   236b0:	cmp	r6, r0
   236b4:	mov	fp, r0
   236b8:	beq	23da0 <_start@@Base+0xecb4>
   236bc:	ldr	r3, [sp, #240]	; 0xf0
   236c0:	cmp	r3, #0
   236c4:	bne	236d4 <_start@@Base+0xe5e8>
   236c8:	ldr	r3, [r5, #8]
   236cc:	tst	r3, #2
   236d0:	beq	22138 <_start@@Base+0xd04c>
   236d4:	mov	r3, #4
   236d8:	mov	r1, #6
   236dc:	b	2268c <_start@@Base+0xd5a0>
   236e0:	mov	r1, r0
   236e4:	mov	r3, #5
   236e8:	mov	r2, r7
   236ec:	mov	r0, r5
   236f0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   236f4:	b	21c3c <_start@@Base+0xcb50>
   236f8:	mov	fp, r1
   236fc:	b	233c4 <_start@@Base+0xe2d8>
   23700:	mov	r1, r0
   23704:	mov	r3, #5
   23708:	mov	r2, r7
   2370c:	mov	r0, r5
   23710:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23714:	b	228f8 <_start@@Base+0xd80c>
   23718:	cmp	ip, #8
   2371c:	ble	221bc <_start@@Base+0xd0d0>
   23720:	mov	r2, r7
   23724:	mov	r1, r4
   23728:	mov	r0, r5
   2372c:	bl	19728 <_start@@Base+0x463c>
   23730:	cmp	r0, r4
   23734:	mov	r6, r0
   23738:	beq	221bc <_start@@Base+0xd0d0>
   2373c:	mov	fp, #0
   23740:	mov	sl, #0
   23744:	mov	r1, r0
   23748:	add	r3, sp, #240	; 0xf0
   2374c:	mov	r2, r7
   23750:	mov	r0, r5
   23754:	strd	sl, [sp, #240]	; 0xf0
   23758:	bl	17a54 <_start@@Base+0x2968>
   2375c:	cmp	r6, r0
   23760:	mov	fp, r0
   23764:	beq	23d54 <_start@@Base+0xec68>
   23768:	ldrd	r2, [sp, #240]	; 0xf0
   2376c:	orrs	r3, r2, r3
   23770:	bne	23780 <_start@@Base+0xe694>
   23774:	ldr	r3, [r5, #8]
   23778:	tst	r3, #2
   2377c:	beq	22138 <_start@@Base+0xd04c>
   23780:	mov	r3, #8
   23784:	mov	r1, #3
   23788:	b	225d4 <_start@@Base+0xd4e8>
   2378c:	mov	fp, r1
   23790:	b	22464 <_start@@Base+0xd378>
   23794:	mov	fp, r1
   23798:	b	22d00 <_start@@Base+0xdc14>
   2379c:	ldrd	r0, [sp, #40]	; 0x28
   237a0:	add	r3, pc, #968	; 0x3c8
   237a4:	ldrd	r2, [r3]
   237a8:	and	lr, r0, #-16777216	; 0xff000000
   237ac:	str	lr, [sp, #184]	; 0xb8
   237b0:	str	r1, [sp, #188]	; 0xbc
   237b4:	ldrd	r0, [sp, #184]	; 0xb8
   237b8:	cmp	r1, r3
   237bc:	cmpeq	r0, r2
   237c0:	bne	219fc <_start@@Base+0xc910>
   237c4:	cmp	ip, #5
   237c8:	ble	219fc <_start@@Base+0xc910>
   237cc:	mov	r1, r4
   237d0:	mov	r2, r7
   237d4:	mov	r0, r5
   237d8:	bl	19640 <_start@@Base+0x4554>
   237dc:	cmp	r0, r4
   237e0:	mov	r1, r0
   237e4:	beq	219fc <_start@@Base+0xc910>
   237e8:	add	r3, sp, #212	; 0xd4
   237ec:	mov	r2, r7
   237f0:	mov	r0, r5
   237f4:	bl	19bb4 <_start@@Base+0x4ac8>
   237f8:	ldr	r3, [sp, #212]	; 0xd4
   237fc:	mov	fp, r0
   23800:	cmp	r3, #0
   23804:	beq	2381c <_start@@Base+0xe730>
   23808:	mov	r1, #1
   2380c:	ldr	r0, [r5]
   23810:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   23814:	cmp	r0, #0
   23818:	bne	22328 <_start@@Base+0xd23c>
   2381c:	mov	r9, fp
   23820:	mov	sl, r7
   23824:	mov	fp, r5
   23828:	b	217bc <_start@@Base+0xc6d0>
   2382c:	mov	r1, r4
   23830:	mov	r3, #5
   23834:	mov	r2, r7
   23838:	mov	r0, r5
   2383c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23840:	mov	r4, r0
   23844:	b	21fb8 <_start@@Base+0xcecc>
   23848:	mov	fp, r1
   2384c:	b	2252c <_start@@Base+0xd440>
   23850:	mov	fp, r7
   23854:	b	23464 <_start@@Base+0xe378>
   23858:	mov	r4, r7
   2385c:	b	23240 <_start@@Base+0xe154>
   23860:	ldrb	r3, [fp, #2]
   23864:	cmp	r3, #32
   23868:	bls	233a8 <_start@@Base+0xe2bc>
   2386c:	add	fp, fp, #2
   23870:	b	233c4 <_start@@Base+0xe2d8>
   23874:	add	r4, r4, #8
   23878:	mov	r1, r7
   2387c:	mov	r0, r4
   23880:	mov	sl, #0
   23884:	bl	151e0 <_start@@Base+0xf4>
   23888:	and	r3, r1, #-16777216	; 0xff000000
   2388c:	str	sl, [sp, #192]	; 0xc0
   23890:	str	r3, [sp, #196]	; 0xc4
   23894:	ldrd	r2, [sp, #192]	; 0xc0
   23898:	cmp	r3, #889192448	; 0x35000000
   2389c:	cmpeq	r2, #0
   238a0:	bne	221bc <_start@@Base+0xd0d0>
   238a4:	sub	r3, r7, r4
   238a8:	cmp	r3, #1
   238ac:	ble	221bc <_start@@Base+0xd0d0>
   238b0:	mov	r2, r7
   238b4:	mov	r1, r4
   238b8:	mov	r0, r5
   238bc:	bl	19810 <_start@@Base+0x4724>
   238c0:	cmp	r4, r0
   238c4:	mov	r6, r0
   238c8:	beq	221bc <_start@@Base+0xd0d0>
   238cc:	mov	r1, r0
   238d0:	mov	r2, r7
   238d4:	str	sl, [sp, #240]	; 0xf0
   238d8:	add	r3, sp, #240	; 0xf0
   238dc:	mov	r0, r5
   238e0:	bl	18108 <_start@@Base+0x301c>
   238e4:	cmp	r6, r0
   238e8:	mov	fp, r0
   238ec:	beq	23e30 <_start@@Base+0xed44>
   238f0:	ldr	r3, [sp, #240]	; 0xf0
   238f4:	cmp	r3, #0
   238f8:	bne	23908 <_start@@Base+0xe81c>
   238fc:	ldr	r3, [r5, #8]
   23900:	tst	r3, #2
   23904:	beq	22138 <_start@@Base+0xd04c>
   23908:	mov	r3, #4
   2390c:	mov	r1, #8
   23910:	b	2268c <_start@@Base+0xd5a0>
   23914:	ldrb	r3, [fp, #2]
   23918:	cmp	r3, #32
   2391c:	bls	22448 <_start@@Base+0xd35c>
   23920:	add	fp, fp, #2
   23924:	b	22464 <_start@@Base+0xd378>
   23928:	mov	fp, r7
   2392c:	b	22b5c <_start@@Base+0xda70>
   23930:	ldrb	r3, [fp, #2]
   23934:	cmp	r3, #32
   23938:	bls	22ce4 <_start@@Base+0xdbf8>
   2393c:	add	fp, fp, #2
   23940:	b	22d00 <_start@@Base+0xdc14>
   23944:	ldr	r1, [sp, #228]	; 0xe4
   23948:	ldrd	r2, [sp, #240]	; 0xf0
   2394c:	cmp	r1, r6
   23950:	beq	23b90 <_start@@Base+0xeaa4>
   23954:	cmp	r3, #-2147483648	; 0x80000000
   23958:	cmpeq	r2, #0
   2395c:	bhi	23dd0 <_start@@Base+0xece4>
   23960:	rsbs	r2, r2, #0
   23964:	rsc	r3, r3, #0
   23968:	strd	r2, [sp, #232]	; 0xe8
   2396c:	b	23494 <_start@@Base+0xe3a8>
   23970:	ldr	r3, [sp, #232]	; 0xe8
   23974:	cmp	r3, #0
   23978:	bne	23d84 <_start@@Base+0xec98>
   2397c:	ldrd	r2, [sp, #240]	; 0xf0
   23980:	mov	r1, #0
   23984:	mvn	r0, #0
   23988:	cmp	r3, r1
   2398c:	cmpeq	r2, r0
   23990:	movls	fp, r4
   23994:	strls	r2, [sp, #228]	; 0xe4
   23998:	bls	23270 <_start@@Base+0xe184>
   2399c:	mov	r1, r4
   239a0:	mov	r3, #7
   239a4:	mov	r2, r7
   239a8:	mov	r0, r5
   239ac:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   239b0:	mov	fp, r0
   239b4:	cmp	r8, fp
   239b8:	bne	2326c <_start@@Base+0xe180>
   239bc:	mov	r4, r8
   239c0:	b	23240 <_start@@Base+0xe154>
   239c4:	ldrb	r3, [fp, #2]
   239c8:	cmp	r3, #32
   239cc:	addhi	r0, fp, #2
   239d0:	bls	23504 <_start@@Base+0xe418>
   239d4:	cmp	r7, r0
   239d8:	bne	2351c <_start@@Base+0xe430>
   239dc:	mov	ip, #0
   239e0:	mov	r3, #10
   239e4:	mov	r2, r7
   239e8:	mov	r1, r7
   239ec:	mov	r0, r5
   239f0:	str	ip, [sp, #224]	; 0xe0
   239f4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   239f8:	ldr	r3, [sp, #224]	; 0xe0
   239fc:	b	22fcc <_start@@Base+0xdee0>
   23a00:	mov	r1, r4
   23a04:	mov	r3, #5
   23a08:	mov	r2, r7
   23a0c:	mov	r0, r5
   23a10:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23a14:	mov	r4, r0
   23a18:	b	21874 <_start@@Base+0xc788>
   23a1c:	ldr	r1, [sp, #228]	; 0xe4
   23a20:	ldrd	r2, [sp, #240]	; 0xf0
   23a24:	cmp	r1, #0
   23a28:	beq	23c5c <_start@@Base+0xeb70>
   23a2c:	cmp	r3, #-2147483648	; 0x80000000
   23a30:	cmpeq	r2, #0
   23a34:	bhi	23e08 <_start@@Base+0xed1c>
   23a38:	rsbs	r2, r2, #0
   23a3c:	rsc	r3, r3, #0
   23a40:	strd	r2, [sp, #232]	; 0xe8
   23a44:	b	22b8c <_start@@Base+0xdaa0>
   23a48:	ldrb	r3, [fp, #2]
   23a4c:	cmp	r3, #32
   23a50:	bls	224a8 <_start@@Base+0xd3bc>
   23a54:	add	fp, fp, #2
   23a58:	b	2252c <_start@@Base+0xd440>
   23a5c:	ldrb	r3, [fp, #2]
   23a60:	cmp	r3, #32
   23a64:	addhi	r0, fp, #2
   23a68:	bls	224f4 <_start@@Base+0xd408>
   23a6c:	cmp	r7, r0
   23a70:	bne	2250c <_start@@Base+0xd420>
   23a74:	mov	ip, #0
   23a78:	mov	r3, #10
   23a7c:	mov	r2, r7
   23a80:	mov	r1, r7
   23a84:	mov	r0, r5
   23a88:	str	ip, [sp, #220]	; 0xdc
   23a8c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23a90:	ldr	r3, [sp, #220]	; 0xdc
   23a94:	b	21c04 <_start@@Base+0xcb18>
   23a98:	mov	fp, r5
   23a9c:	mov	sl, r7
   23aa0:	mov	r9, r1
   23aa4:	b	23548 <_start@@Base+0xe45c>
   23aa8:	ldrb	r3, [fp, #2]
   23aac:	cmp	r3, #32
   23ab0:	addhi	r0, fp, #2
   23ab4:	bls	22f30 <_start@@Base+0xde44>
   23ab8:	cmp	r7, r0
   23abc:	bne	22f48 <_start@@Base+0xde5c>
   23ac0:	mov	ip, #0
   23ac4:	mov	r3, #10
   23ac8:	mov	r2, r7
   23acc:	mov	r1, r7
   23ad0:	mov	r0, r5
   23ad4:	str	ip, [sp, #224]	; 0xe0
   23ad8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23adc:	ldr	r3, [sp, #224]	; 0xe0
   23ae0:	b	228c0 <_start@@Base+0xd7d4>
   23ae4:	ldrb	r3, [fp, #2]
   23ae8:	cmp	r3, #32
   23aec:	addhi	r4, fp, #2
   23af0:	bls	226e0 <_start@@Base+0xd5f4>
   23af4:	cmp	r7, r4
   23af8:	bne	226fc <_start@@Base+0xd610>
   23afc:	mov	ip, #0
   23b00:	mov	r3, #10
   23b04:	mov	r2, r7
   23b08:	mov	r1, r7
   23b0c:	mov	r0, r5
   23b10:	str	ip, [sp, #228]	; 0xe4
   23b14:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23b18:	mov	r4, r0
   23b1c:	ldr	r3, [sp, #228]	; 0xe4
   23b20:	b	221ac <_start@@Base+0xd0c0>
   23b24:	mov	r3, #0
   23b28:	add	r1, r0, #1
   23b2c:	mov	r2, r7
   23b30:	mov	r0, r5
   23b34:	str	r3, [sp, #224]	; 0xe0
   23b38:	bl	17000 <_start@@Base+0x1f14>
   23b3c:	ldr	r3, [sp, #224]	; 0xe0
   23b40:	b	22fcc <_start@@Base+0xdee0>
   23b44:	mov	r4, r7
   23b48:	b	22e48 <_start@@Base+0xdd5c>
   23b4c:	ldrb	r3, [fp, #2]
   23b50:	cmp	r3, #32
   23b54:	bls	21b5c <_start@@Base+0xca70>
   23b58:	mov	r9, fp
   23b5c:	mov	sl, r7
   23b60:	mov	fp, r5
   23b64:	add	r9, r9, #2
   23b68:	b	23548 <_start@@Base+0xe45c>
   23b6c:	nop	{0}
   23b70:	strvs	r0, [r0, #-0]
   23b74:	stclvs	6, cr7, [pc, #-420]!	; 239d8 <_start@@Base+0xe8ec>
   23b78:			; <UNDEFINED> instruction: 0x000592bc
   23b7c:	andeq	r9, r5, r4, lsr #5
   23b80:	ldrdeq	r9, [r5], -r4
   23b84:			; <UNDEFINED> instruction: 0x000592b0
   23b88:	andeq	r9, r5, r8, asr #5
   23b8c:	andeq	r9, r5, r0, ror #5
   23b90:	cmp	r2, #0
   23b94:	sbcs	r1, r3, #0
   23b98:	strdge	r2, [sp, #232]	; 0xe8
   23b9c:	bge	23494 <_start@@Base+0xe3a8>
   23ba0:	mov	r1, r0
   23ba4:	mov	r3, #7
   23ba8:	mov	r2, r7
   23bac:	mov	r0, r5
   23bb0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23bb4:	mov	fp, r0
   23bb8:	cmp	r8, fp
   23bbc:	beq	23464 <_start@@Base+0xe378>
   23bc0:	ldrd	r2, [sp, #232]	; 0xe8
   23bc4:	b	23494 <_start@@Base+0xe3a8>
   23bc8:	mov	r3, #0
   23bcc:	add	r1, r0, #1
   23bd0:	mov	r2, r7
   23bd4:	mov	r0, r5
   23bd8:	str	r3, [sp, #220]	; 0xdc
   23bdc:	bl	17000 <_start@@Base+0x1f14>
   23be0:	ldr	r3, [sp, #220]	; 0xdc
   23be4:	b	21c04 <_start@@Base+0xcb18>
   23be8:	mov	r3, #0
   23bec:	add	r1, r0, #1
   23bf0:	mov	r2, r7
   23bf4:	mov	r0, r5
   23bf8:	str	r3, [sp, #224]	; 0xe0
   23bfc:	bl	17000 <_start@@Base+0x1f14>
   23c00:	ldr	r3, [sp, #224]	; 0xe0
   23c04:	b	228c0 <_start@@Base+0xd7d4>
   23c08:	ldr	r3, [sp, #232]	; 0xe8
   23c0c:	cmp	r3, r8
   23c10:	bne	23dec <_start@@Base+0xed00>
   23c14:	ldrd	r2, [sp, #240]	; 0xf0
   23c18:	mov	r1, #0
   23c1c:	mvn	r0, #0
   23c20:	cmp	r3, r1
   23c24:	cmpeq	r2, r0
   23c28:	movls	fp, r4
   23c2c:	strls	r2, [sp, #228]	; 0xe4
   23c30:	bls	22e78 <_start@@Base+0xdd8c>
   23c34:	mov	r1, r4
   23c38:	mov	r3, #7
   23c3c:	mov	r2, r7
   23c40:	mov	r0, r5
   23c44:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23c48:	mov	fp, r0
   23c4c:	cmp	r6, fp
   23c50:	bne	22e74 <_start@@Base+0xdd88>
   23c54:	mov	r4, r6
   23c58:	b	22e48 <_start@@Base+0xdd5c>
   23c5c:	cmp	r2, #0
   23c60:	sbcs	r1, r3, #0
   23c64:	strdge	r2, [sp, #232]	; 0xe8
   23c68:	bge	22b8c <_start@@Base+0xdaa0>
   23c6c:	mov	r1, r0
   23c70:	mov	r3, #7
   23c74:	mov	r2, r7
   23c78:	mov	r0, r5
   23c7c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23c80:	mov	fp, r0
   23c84:	b	23e20 <_start@@Base+0xed34>
   23c88:	ldrb	r3, [fp, #2]
   23c8c:	cmp	r3, #32
   23c90:	addhi	r4, fp, #2
   23c94:	bls	235d4 <_start@@Base+0xe4e8>
   23c98:	b	235e8 <_start@@Base+0xe4fc>
   23c9c:	mov	r1, r0
   23ca0:	add	r0, sp, #240	; 0xf0
   23ca4:	ldr	r3, [pc, #-308]	; 23b78 <_start@@Base+0xea8c>
   23ca8:	mov	r2, r7
   23cac:	str	r0, [sp]
   23cb0:	mov	r0, r5
   23cb4:	bl	1c818 <_start@@Base+0x772c>
   23cb8:	cmp	r7, r0
   23cbc:	cmpne	fp, r0
   23cc0:	mov	fp, r0
   23cc4:	bne	225b4 <_start@@Base+0xd4c8>
   23cc8:	b	222d8 <_start@@Base+0xd1ec>
   23ccc:	mov	r1, r0
   23cd0:	add	r0, sp, #240	; 0xf0
   23cd4:	ldr	r3, [pc, #-352]	; 23b7c <_start@@Base+0xea90>
   23cd8:	mov	r2, r7
   23cdc:	str	r0, [sp]
   23ce0:	mov	r0, r5
   23ce4:	bl	1b1f4 <_start@@Base+0x6108>
   23ce8:	cmp	r7, r0
   23cec:	cmpne	fp, r0
   23cf0:	mov	fp, r0
   23cf4:	bne	2266c <_start@@Base+0xd580>
   23cf8:	b	222d8 <_start@@Base+0xd1ec>
   23cfc:	mov	r1, r0
   23d00:	add	r0, sp, #240	; 0xf0
   23d04:	ldr	r3, [pc, #-396]	; 23b80 <_start@@Base+0xea94>
   23d08:	mov	r2, r7
   23d0c:	str	r0, [sp]
   23d10:	mov	r0, r5
   23d14:	bl	1c818 <_start@@Base+0x772c>
   23d18:	cmp	r7, r0
   23d1c:	cmpne	fp, r0
   23d20:	mov	fp, r0
   23d24:	bne	2279c <_start@@Base+0xd6b0>
   23d28:	b	222d8 <_start@@Base+0xd1ec>
   23d2c:	mov	ip, #0
   23d30:	mov	r3, #10
   23d34:	mov	r2, r7
   23d38:	mov	r1, r7
   23d3c:	mov	r0, r5
   23d40:	str	ip, [sp, #208]	; 0xd0
   23d44:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23d48:	mov	r4, r0
   23d4c:	ldr	r3, [sp, #208]	; 0xd0
   23d50:	b	219e0 <_start@@Base+0xc8f4>
   23d54:	mov	r1, r0
   23d58:	add	r0, sp, #240	; 0xf0
   23d5c:	ldr	r3, [pc, #-480]	; 23b84 <_start@@Base+0xea98>
   23d60:	mov	r2, r7
   23d64:	str	r0, [sp]
   23d68:	mov	r0, r5
   23d6c:	bl	1c818 <_start@@Base+0x772c>
   23d70:	cmp	r7, r0
   23d74:	cmpne	fp, r0
   23d78:	mov	fp, r0
   23d7c:	bne	23768 <_start@@Base+0xe67c>
   23d80:	b	222d8 <_start@@Base+0xd1ec>
   23d84:	mov	r1, r0
   23d88:	mov	r3, #8
   23d8c:	mov	r2, r7
   23d90:	mov	r0, r5
   23d94:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23d98:	mov	fp, r0
   23d9c:	b	239b4 <_start@@Base+0xe8c8>
   23da0:	mov	r1, r0
   23da4:	add	r0, sp, #240	; 0xf0
   23da8:	ldr	r3, [pc, #-552]	; 23b88 <_start@@Base+0xea9c>
   23dac:	mov	r2, r7
   23db0:	str	r0, [sp]
   23db4:	mov	r0, r5
   23db8:	bl	1b1f4 <_start@@Base+0x6108>
   23dbc:	cmp	r7, r0
   23dc0:	cmpne	fp, r0
   23dc4:	mov	fp, r0
   23dc8:	bne	236bc <_start@@Base+0xe5d0>
   23dcc:	b	222d8 <_start@@Base+0xd1ec>
   23dd0:	mov	r1, r0
   23dd4:	mov	r3, #8
   23dd8:	mov	r2, r7
   23ddc:	mov	r0, r5
   23de0:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23de4:	mov	fp, r0
   23de8:	b	23bb8 <_start@@Base+0xeacc>
   23dec:	mov	r1, r0
   23df0:	mov	r3, #8
   23df4:	mov	r2, r7
   23df8:	mov	r0, r5
   23dfc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23e00:	mov	fp, r0
   23e04:	b	23c4c <_start@@Base+0xeb60>
   23e08:	mov	r1, r0
   23e0c:	mov	r3, #8
   23e10:	mov	r2, r7
   23e14:	mov	r0, r5
   23e18:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23e1c:	mov	fp, r0
   23e20:	cmp	r6, fp
   23e24:	beq	22b5c <_start@@Base+0xda70>
   23e28:	ldrd	r2, [sp, #232]	; 0xe8
   23e2c:	b	22b8c <_start@@Base+0xdaa0>
   23e30:	mov	r1, r0
   23e34:	add	r0, sp, #240	; 0xf0
   23e38:	ldr	r3, [pc, #-692]	; 23b8c <_start@@Base+0xeaa0>
   23e3c:	mov	r2, r7
   23e40:	str	r0, [sp]
   23e44:	mov	r0, r5
   23e48:	bl	1b1f4 <_start@@Base+0x6108>
   23e4c:	cmp	r7, r0
   23e50:	cmpne	fp, r0
   23e54:	mov	fp, r0
   23e58:	bne	238f0 <_start@@Base+0xe804>
   23e5c:	b	222d8 <_start@@Base+0xd1ec>
   23e60:	mov	fp, r0
   23e64:	b	222d8 <_start@@Base+0xd1ec>
   23e68:	mov	fp, r0
   23e6c:	b	233c4 <_start@@Base+0xe2d8>
   23e70:	mov	fp, r0
   23e74:	b	22464 <_start@@Base+0xd378>
   23e78:	mov	fp, r0
   23e7c:	b	22d00 <_start@@Base+0xdc14>
   23e80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23e84:	mov	ip, #0
   23e88:	mov	r5, r0
   23e8c:	strd	r6, [sp, #8]
   23e90:	mov	r4, r1
   23e94:	mov	r6, r2
   23e98:	strd	r8, [sp, #16]
   23e9c:	strd	sl, [sp, #24]
   23ea0:	str	lr, [sp, #32]
   23ea4:	sub	sp, sp, #68	; 0x44
   23ea8:	ldr	r7, [sp, #104]	; 0x68
   23eac:	str	ip, [r7]
   23eb0:	cmp	r3, #4
   23eb4:	ldrls	pc, [pc, r3, lsl #2]
   23eb8:	b	2478c <_start@@Base+0xf6a0>
   23ebc:	andeq	r3, r2, ip, lsl #30
   23ec0:	andeq	r3, r2, ip, lsr pc
   23ec4:	andeq	r3, r2, r8, asr #30
   23ec8:	strdeq	r3, [r2], -ip
   23ecc:	ldrdeq	r3, [r2], -r0
   23ed0:	mov	r3, r7
   23ed4:	bl	21774 <_start@@Base+0xc688>
   23ed8:	ldr	r3, [r5, #24]
   23edc:	cmp	r3, #0
   23ee0:	bne	23ef0 <_start@@Base+0xee04>
   23ee4:	ldr	r3, [r7]
   23ee8:	cmp	r3, #0
   23eec:	beq	245e8 <_start@@Base+0xf4fc>
   23ef0:	add	sp, sp, #68	; 0x44
   23ef4:	ldrd	r4, [sp]
   23ef8:	ldrd	r6, [sp, #8]
   23efc:	ldrd	r8, [sp, #16]
   23f00:	ldrd	sl, [sp, #24]
   23f04:	add	sp, sp, #32
   23f08:	pop	{pc}		; (ldr pc, [sp], #4)
   23f0c:	sub	r3, r2, r1
   23f10:	cmp	r3, #3
   23f14:	ble	23f24 <_start@@Base+0xee38>
   23f18:	ldrb	r3, [r1]
   23f1c:	cmp	r3, #110	; 0x6e
   23f20:	beq	24718 <_start@@Base+0xf62c>
   23f24:	mov	r2, r6
   23f28:	mov	r1, r4
   23f2c:	mov	r0, r5
   23f30:	mov	r3, #26
   23f34:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   23f38:	b	23ef0 <_start@@Base+0xee04>
   23f3c:	mov	r3, r7
   23f40:	bl	1d3f0 <_start@@Base+0x8304>
   23f44:	b	23ed8 <_start@@Base+0xedec>
   23f48:	mov	r1, #4
   23f4c:	ldr	r0, [r0]
   23f50:	bl	28038 <flatcc_builder_start_table@@Base>
   23f54:	cmp	r0, #0
   23f58:	bne	241b8 <_start@@Base+0xf0cc>
   23f5c:	mov	r1, r4
   23f60:	add	r3, sp, #48	; 0x30
   23f64:	mov	r2, r6
   23f68:	mov	r0, r5
   23f6c:	bl	19ae0 <_start@@Base+0x49f4>
   23f70:	ldr	r3, [sp, #48]	; 0x30
   23f74:	mov	r4, r0
   23f78:	cmp	r3, #0
   23f7c:	beq	24194 <_start@@Base+0xf0a8>
   23f80:	mov	r9, #0
   23f84:	movt	r9, #65535	; 0xffff
   23f88:	str	r9, [sp, #28]
   23f8c:	str	r7, [sp, #104]	; 0x68
   23f90:	cmp	r6, r4
   23f94:	beq	23fc0 <_start@@Base+0xeed4>
   23f98:	ldrb	r3, [r4]
   23f9c:	cmp	r3, #34	; 0x22
   23fa0:	moveq	r3, #0
   23fa4:	addeq	r4, r4, #1
   23fa8:	streq	r3, [r5, #12]
   23fac:	beq	23fc0 <_start@@Base+0xeed4>
   23fb0:	cmp	r3, #46	; 0x2e
   23fb4:	movne	r3, #1
   23fb8:	strne	r3, [r5, #12]
   23fbc:	beq	24534 <_start@@Base+0xf448>
   23fc0:	sub	ip, r6, r4
   23fc4:	cmp	ip, #8
   23fc8:	bhi	24008 <_start@@Base+0xef1c>
   23fcc:	sub	r3, ip, #1
   23fd0:	cmp	r3, #7
   23fd4:	ldrls	pc, [pc, r3, lsl #2]
   23fd8:	b	242fc <_start@@Base+0xf210>
   23fdc:	andeq	r4, r2, r8, lsl r2
   23fe0:	ldrdeq	r4, [r2], -ip
   23fe4:	andeq	r4, r2, ip, lsl #4
   23fe8:	andeq	r4, r2, r0, lsl #4
   23fec:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23ff0:	andeq	r4, r2, r8, ror #3
   23ff4:	ldrdeq	r4, [r2], -r0
   23ff8:	andeq	r4, r2, r8
   23ffc:	mov	r3, r7
   24000:	bl	1d118 <_start@@Base+0x802c>
   24004:	b	23ed8 <_start@@Base+0xedec>
   24008:	ldrb	r8, [r4, #7]
   2400c:	mov	r9, #0
   24010:	mov	r3, r9
   24014:	ldrb	r0, [r4, #6]
   24018:	orr	r2, r8, r0, lsl #8
   2401c:	ldrb	r0, [r4, #5]
   24020:	mov	lr, r3
   24024:	orr	r1, r2, r0, lsl #16
   24028:	ldrb	r2, [r4, #4]
   2402c:	orr	r2, r1, r2, lsl #24
   24030:	ldrb	r0, [r4, #3]
   24034:	orr	r3, lr, r0
   24038:	ldrb	r0, [r4, #2]
   2403c:	orr	r3, r3, r0, lsl #8
   24040:	ldrb	r0, [r4, #1]
   24044:	mov	r8, #0
   24048:	ldr	lr, [sp, #28]
   2404c:	orr	r3, r3, r0, lsl #16
   24050:	ldrb	r0, [r4]
   24054:	and	sl, r2, lr
   24058:	mov	lr, r2
   2405c:	orr	r0, r3, r0, lsl #24
   24060:	add	r3, pc, #944	; 0x3b0
   24064:	ldrd	r2, [r3]
   24068:	cmp	r0, r3
   2406c:	cmpeq	sl, r2
   24070:	beq	24228 <_start@@Base+0xf13c>
   24074:	and	r3, lr, #-16777216	; 0xff000000
   24078:	add	r9, pc, #928	; 0x3a0
   2407c:	ldrd	r8, [r9]
   24080:	str	r3, [sp, #8]
   24084:	str	r0, [sp, #12]
   24088:	ldrd	r2, [sp, #8]
   2408c:	cmp	r3, r9
   24090:	cmpeq	r2, r8
   24094:	bne	24314 <_start@@Base+0xf228>
   24098:	cmp	ip, #5
   2409c:	ble	242fc <_start@@Base+0xf210>
   240a0:	mov	r2, r6
   240a4:	mov	r1, r4
   240a8:	mov	r0, r5
   240ac:	bl	19640 <_start@@Base+0x4554>
   240b0:	cmp	r0, r4
   240b4:	mov	r7, r0
   240b8:	beq	242fc <_start@@Base+0xf210>
   240bc:	mov	r3, #0
   240c0:	cmp	r6, r0
   240c4:	mov	r1, #0
   240c8:	mov	r0, #0
   240cc:	strb	r3, [sp, #47]	; 0x2f
   240d0:	str	r3, [sp, #52]	; 0x34
   240d4:	strd	r0, [sp, #56]	; 0x38
   240d8:	beq	2452c <_start@@Base+0xf440>
   240dc:	add	r0, sp, #56	; 0x38
   240e0:	add	r3, sp, #52	; 0x34
   240e4:	mov	r2, r6
   240e8:	mov	r1, r7
   240ec:	str	r0, [sp]
   240f0:	mov	r0, r5
   240f4:	bl	317b8 <flatcc_json_parser_integer@@Base>
   240f8:	cmp	r7, r0
   240fc:	mov	r4, r0
   24100:	bne	24594 <_start@@Base+0xf4a8>
   24104:	add	ip, sp, #47	; 0x2f
   24108:	ldr	r3, [pc, #800]	; 24430 <_start@@Base+0xf344>
   2410c:	mov	r2, r6
   24110:	mov	r1, r4
   24114:	mov	r0, r5
   24118:	str	ip, [sp]
   2411c:	bl	1afd4 <_start@@Base+0x5ee8>
   24120:	cmp	r6, r0
   24124:	cmpne	r0, r4
   24128:	beq	24780 <_start@@Base+0xf694>
   2412c:	ldrsb	r2, [sp, #47]	; 0x2f
   24130:	mov	r4, r0
   24134:	cmp	r2, #2
   24138:	bne	24148 <_start@@Base+0xf05c>
   2413c:	ldr	r3, [r5, #8]
   24140:	tst	r3, #2
   24144:	beq	2416c <_start@@Base+0xf080>
   24148:	mov	r3, #1
   2414c:	mov	r1, #0
   24150:	ldr	r0, [r5]
   24154:	mov	r2, r3
   24158:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   2415c:	cmp	r0, #0
   24160:	beq	242f4 <_start@@Base+0xf208>
   24164:	ldrsb	r3, [sp, #47]	; 0x2f
   24168:	strb	r3, [r0]
   2416c:	mov	r1, r4
   24170:	add	r3, sp, #48	; 0x30
   24174:	mov	r2, r6
   24178:	mov	r0, r5
   2417c:	bl	193b0 <_start@@Base+0x42c4>
   24180:	ldr	r3, [sp, #48]	; 0x30
   24184:	mov	r4, r0
   24188:	cmp	r3, #0
   2418c:	bne	23f90 <_start@@Base+0xeea4>
   24190:	ldr	r7, [sp, #104]	; 0x68
   24194:	ldr	r3, [r5, #24]
   24198:	cmp	r3, #0
   2419c:	bne	241b8 <_start@@Base+0xf0cc>
   241a0:	ldr	r0, [r5]
   241a4:	bl	289b8 <flatcc_builder_end_table@@Base>
   241a8:	cmp	r0, #0
   241ac:	str	r0, [r7]
   241b0:	movne	r0, r4
   241b4:	bne	23ed8 <_start@@Base+0xedec>
   241b8:	mov	r1, r4
   241bc:	mov	r3, #33	; 0x21
   241c0:	mov	r2, r6
   241c4:	mov	r0, r5
   241c8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   241cc:	b	23ed8 <_start@@Base+0xedec>
   241d0:	mov	r8, #0
   241d4:	mov	r9, #0
   241d8:	b	24010 <_start@@Base+0xef24>
   241dc:	mov	r2, #0
   241e0:	mov	r3, r2
   241e4:	b	24040 <_start@@Base+0xef54>
   241e8:	mov	r2, #0
   241ec:	mov	r3, r2
   241f0:	b	2401c <_start@@Base+0xef30>
   241f4:	mov	r1, #0
   241f8:	mov	lr, r1
   241fc:	b	24028 <_start@@Base+0xef3c>
   24200:	mov	r2, #0
   24204:	mov	lr, r2
   24208:	b	24030 <_start@@Base+0xef44>
   2420c:	mov	r2, #0
   24210:	mov	r3, r2
   24214:	b	24038 <_start@@Base+0xef4c>
   24218:	ldrb	r0, [r4]
   2421c:	mov	lr, #0
   24220:	lsl	r0, r0, #24
   24224:	b	24074 <_start@@Base+0xef88>
   24228:	cmp	ip, #6
   2422c:	ble	242fc <_start@@Base+0xf210>
   24230:	mov	r3, #6
   24234:	mov	r2, r6
   24238:	mov	r1, r4
   2423c:	mov	r0, r5
   24240:	bl	199e0 <_start@@Base+0x48f4>
   24244:	cmp	r0, r4
   24248:	mov	r7, r0
   2424c:	beq	242fc <_start@@Base+0xf210>
   24250:	mov	r2, #0
   24254:	mov	r3, #0
   24258:	strb	r8, [sp, #47]	; 0x2f
   2425c:	cmp	r6, r0
   24260:	str	r8, [sp, #52]	; 0x34
   24264:	strd	r2, [sp, #56]	; 0x38
   24268:	beq	24524 <_start@@Base+0xf438>
   2426c:	add	r0, sp, #56	; 0x38
   24270:	add	r3, sp, #52	; 0x34
   24274:	mov	r2, r6
   24278:	mov	r1, r7
   2427c:	str	r0, [sp]
   24280:	mov	r0, r5
   24284:	bl	317b8 <flatcc_json_parser_integer@@Base>
   24288:	cmp	r7, r0
   2428c:	mov	r4, r0
   24290:	bne	24550 <_start@@Base+0xf464>
   24294:	add	ip, sp, #47	; 0x2f
   24298:	ldr	r3, [pc, #404]	; 24434 <_start@@Base+0xf348>
   2429c:	mov	r2, r6
   242a0:	mov	r1, r4
   242a4:	mov	r0, r5
   242a8:	str	ip, [sp]
   242ac:	bl	1afd4 <_start@@Base+0x5ee8>
   242b0:	cmp	r6, r0
   242b4:	cmpne	r0, r4
   242b8:	beq	24780 <_start@@Base+0xf694>
   242bc:	ldrsb	r2, [sp, #47]	; 0x2f
   242c0:	mov	r4, r0
   242c4:	cmp	r2, #2
   242c8:	bne	242d8 <_start@@Base+0xf1ec>
   242cc:	ldr	r3, [r5, #8]
   242d0:	tst	r3, #2
   242d4:	beq	2416c <_start@@Base+0xf080>
   242d8:	mov	r3, #1
   242dc:	ldr	r0, [r5]
   242e0:	mov	r2, r3
   242e4:	mov	r1, r3
   242e8:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   242ec:	cmp	r0, #0
   242f0:	bne	24164 <_start@@Base+0xf078>
   242f4:	ldr	r7, [sp, #104]	; 0x68
   242f8:	b	241b8 <_start@@Base+0xf0cc>
   242fc:	mov	r1, r4
   24300:	mov	r2, r6
   24304:	mov	r0, r5
   24308:	bl	3131c <flatcc_json_parser_unmatched_symbol@@Base>
   2430c:	mov	r4, r0
   24310:	b	2416c <_start@@Base+0xf080>
   24314:	bic	r3, r0, #255	; 0xff
   24318:	mov	r7, #0
   2431c:	add	r9, pc, #260	; 0x104
   24320:	ldrd	r8, [r9]
   24324:	str	r7, [sp, #16]
   24328:	str	r3, [sp, #20]
   2432c:	ldrd	r2, [sp, #16]
   24330:	cmp	r3, r9
   24334:	cmpeq	r2, r8
   24338:	bne	24440 <_start@@Base+0xf354>
   2433c:	cmp	ip, #3
   24340:	ble	242fc <_start@@Base+0xf210>
   24344:	mov	r3, #3
   24348:	mov	r2, r6
   2434c:	mov	r1, r4
   24350:	mov	r0, r5
   24354:	bl	199e0 <_start@@Base+0x48f4>
   24358:	cmp	r0, r4
   2435c:	mov	r8, r0
   24360:	beq	242fc <_start@@Base+0xf210>
   24364:	mov	r2, #0
   24368:	mov	r3, #0
   2436c:	strb	r7, [sp, #47]	; 0x2f
   24370:	cmp	r6, r0
   24374:	str	r7, [sp, #52]	; 0x34
   24378:	strd	r2, [sp, #56]	; 0x38
   2437c:	beq	245d8 <_start@@Base+0xf4ec>
   24380:	add	r0, sp, #56	; 0x38
   24384:	add	r3, sp, #52	; 0x34
   24388:	mov	r2, r6
   2438c:	mov	r1, r8
   24390:	str	r0, [sp]
   24394:	mov	r0, r5
   24398:	bl	317b8 <flatcc_json_parser_integer@@Base>
   2439c:	cmp	r8, r0
   243a0:	mov	r7, r0
   243a4:	bne	24600 <_start@@Base+0xf514>
   243a8:	add	ip, sp, #47	; 0x2f
   243ac:	ldr	r3, [pc, #132]	; 24438 <_start@@Base+0xf34c>
   243b0:	mov	r2, r6
   243b4:	mov	r1, r7
   243b8:	mov	r0, r5
   243bc:	str	ip, [sp]
   243c0:	bl	1b820 <_start@@Base+0x6734>
   243c4:	cmp	r6, r0
   243c8:	cmpne	r0, r7
   243cc:	mov	r4, r0
   243d0:	beq	242f4 <_start@@Base+0xf208>
   243d4:	ldrb	r2, [sp, #47]	; 0x2f
   243d8:	cmp	r2, #2
   243dc:	bne	243ec <_start@@Base+0xf300>
   243e0:	ldr	r3, [r5, #8]
   243e4:	tst	r3, #2
   243e8:	beq	2416c <_start@@Base+0xf080>
   243ec:	mov	r3, #1
   243f0:	mov	r1, #3
   243f4:	mov	r2, r3
   243f8:	ldr	r0, [r5]
   243fc:	bl	2a3b0 <flatcc_builder_table_add@@Base>
   24400:	cmp	r0, #0
   24404:	beq	242f4 <_start@@Base+0xf208>
   24408:	ldrb	r3, [sp, #47]	; 0x2f
   2440c:	strb	r3, [r0]
   24410:	b	2416c <_start@@Base+0xf080>
   24414:	nop	{0}
   24418:	eorsvc	r0, r2, #0
   2441c:	cmnvs	pc, #28416	; 0x6f00
   24420:	andvc	r0, r0, #0
   24424:	cmnvs	pc, #28416	; 0x6f00
   24428:	andeq	r0, r0, r0
   2442c:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   24430:	andeq	r9, r5, r4, lsl r3
   24434:	andeq	r9, r5, r4, lsl #6
   24438:	andeq	r9, r5, r4, lsr #6
   2443c:	andeq	r9, r5, r0, lsr r3
   24440:	ldr	r3, [sp, #28]
   24444:	mov	r1, #0
   24448:	movt	r1, #30051	; 0x7563
   2444c:	str	r7, [sp, #32]
   24450:	and	r3, r0, r3
   24454:	mov	r0, #0
   24458:	str	r3, [sp, #36]	; 0x24
   2445c:	ldrd	r2, [sp, #32]
   24460:	cmp	r3, r1
   24464:	cmpeq	r2, r0
   24468:	bne	242fc <_start@@Base+0xf210>
   2446c:	cmp	ip, #2
   24470:	ble	242fc <_start@@Base+0xf210>
   24474:	mov	r2, r6
   24478:	mov	r1, r4
   2447c:	mov	r0, r5
   24480:	bl	198f8 <_start@@Base+0x480c>
   24484:	cmp	r0, r4
   24488:	mov	r8, r0
   2448c:	beq	242fc <_start@@Base+0xf210>
   24490:	mov	r2, #0
   24494:	mov	r3, #0
   24498:	strb	r7, [sp, #47]	; 0x2f
   2449c:	cmp	r6, r0
   244a0:	str	r7, [sp, #52]	; 0x34
   244a4:	strd	r2, [sp, #56]	; 0x38
   244a8:	beq	245e0 <_start@@Base+0xf4f4>
   244ac:	add	r0, sp, #56	; 0x38
   244b0:	add	r3, sp, #52	; 0x34
   244b4:	mov	r2, r6
   244b8:	mov	r1, r8
   244bc:	str	r0, [sp]
   244c0:	mov	r0, r5
   244c4:	bl	317b8 <flatcc_json_parser_integer@@Base>
   244c8:	cmp	r8, r0
   244cc:	mov	r7, r0
   244d0:	bne	24650 <_start@@Base+0xf564>
   244d4:	add	ip, sp, #47	; 0x2f
   244d8:	ldr	r3, [pc, #-164]	; 2443c <_start@@Base+0xf350>
   244dc:	mov	r2, r6
   244e0:	mov	r1, r7
   244e4:	mov	r0, r5
   244e8:	str	ip, [sp]
   244ec:	bl	1b820 <_start@@Base+0x6734>
   244f0:	cmp	r6, r0
   244f4:	cmpne	r0, r7
   244f8:	mov	r4, r0
   244fc:	beq	242f4 <_start@@Base+0xf208>
   24500:	ldrb	r2, [sp, #47]	; 0x2f
   24504:	cmp	r2, #2
   24508:	bne	24518 <_start@@Base+0xf42c>
   2450c:	ldr	r3, [r5, #8]
   24510:	tst	r3, #2
   24514:	beq	2416c <_start@@Base+0xf080>
   24518:	mov	r3, #1
   2451c:	mov	r1, #2
   24520:	b	243f4 <_start@@Base+0xf308>
   24524:	mov	r4, r6
   24528:	b	24294 <_start@@Base+0xf1a8>
   2452c:	mov	r4, r6
   24530:	b	24104 <_start@@Base+0xf018>
   24534:	mov	r1, r4
   24538:	mov	r3, #5
   2453c:	mov	r2, r6
   24540:	mov	r0, r5
   24544:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   24548:	mov	r4, r0
   2454c:	b	23fc0 <_start@@Base+0xeed4>
   24550:	ldr	r1, [sp, #52]	; 0x34
   24554:	ldrd	r2, [sp, #56]	; 0x38
   24558:	cmp	r1, #0
   2455c:	beq	246a0 <_start@@Base+0xf5b4>
   24560:	cmp	r3, #0
   24564:	cmpeq	r2, #128	; 0x80
   24568:	rsbls	r2, r2, #0
   2456c:	sxtbls	r2, r2
   24570:	strbls	r2, [sp, #47]	; 0x2f
   24574:	bls	242c4 <_start@@Base+0xf1d8>
   24578:	mov	r1, r0
   2457c:	mov	r3, #8
   24580:	mov	r2, r6
   24584:	mov	r0, r5
   24588:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2458c:	mov	r4, r0
   24590:	b	246cc <_start@@Base+0xf5e0>
   24594:	ldr	r1, [sp, #52]	; 0x34
   24598:	ldrd	r2, [sp, #56]	; 0x38
   2459c:	cmp	r1, #0
   245a0:	beq	246dc <_start@@Base+0xf5f0>
   245a4:	cmp	r3, #0
   245a8:	cmpeq	r2, #128	; 0x80
   245ac:	rsbls	r2, r2, #0
   245b0:	sxtbls	r2, r2
   245b4:	strbls	r2, [sp, #47]	; 0x2f
   245b8:	bls	24134 <_start@@Base+0xf048>
   245bc:	mov	r1, r0
   245c0:	mov	r3, #8
   245c4:	mov	r2, r6
   245c8:	mov	r0, r5
   245cc:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   245d0:	mov	r4, r0
   245d4:	b	24708 <_start@@Base+0xf61c>
   245d8:	mov	r7, r6
   245dc:	b	243a8 <_start@@Base+0xf2bc>
   245e0:	mov	r7, r6
   245e4:	b	244d4 <_start@@Base+0xf3e8>
   245e8:	mov	r1, r0
   245ec:	mov	r2, r6
   245f0:	mov	r0, r5
   245f4:	mov	r3, #33	; 0x21
   245f8:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   245fc:	b	23ef0 <_start@@Base+0xee04>
   24600:	ldr	r3, [sp, #52]	; 0x34
   24604:	cmp	r3, #0
   24608:	bne	24748 <_start@@Base+0xf65c>
   2460c:	ldrd	r2, [sp, #56]	; 0x38
   24610:	cmp	r3, #0
   24614:	cmpeq	r2, #255	; 0xff
   24618:	uxtbls	r2, r2
   2461c:	movls	r4, r0
   24620:	strbls	r2, [sp, #47]	; 0x2f
   24624:	bls	243d8 <_start@@Base+0xf2ec>
   24628:	mov	r1, r0
   2462c:	mov	r3, #7
   24630:	mov	r2, r6
   24634:	mov	r0, r5
   24638:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2463c:	mov	r4, r0
   24640:	cmp	r8, r4
   24644:	bne	243d4 <_start@@Base+0xf2e8>
   24648:	mov	r7, r8
   2464c:	b	243a8 <_start@@Base+0xf2bc>
   24650:	ldr	r3, [sp, #52]	; 0x34
   24654:	cmp	r3, #0
   24658:	bne	24764 <_start@@Base+0xf678>
   2465c:	ldrd	r2, [sp, #56]	; 0x38
   24660:	cmp	r3, #0
   24664:	cmpeq	r2, #255	; 0xff
   24668:	uxtbls	r2, r2
   2466c:	movls	r4, r0
   24670:	strbls	r2, [sp, #47]	; 0x2f
   24674:	bls	24504 <_start@@Base+0xf418>
   24678:	mov	r1, r0
   2467c:	mov	r3, #7
   24680:	mov	r2, r6
   24684:	mov	r0, r5
   24688:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2468c:	mov	r4, r0
   24690:	cmp	r8, r4
   24694:	bne	24500 <_start@@Base+0xf414>
   24698:	mov	r7, r8
   2469c:	b	244d4 <_start@@Base+0xf3e8>
   246a0:	cmp	r3, #0
   246a4:	cmpeq	r2, #127	; 0x7f
   246a8:	sxtbls	r2, r2
   246ac:	strbls	r2, [sp, #47]	; 0x2f
   246b0:	bls	242c4 <_start@@Base+0xf1d8>
   246b4:	mov	r1, r0
   246b8:	mov	r3, #7
   246bc:	mov	r2, r6
   246c0:	mov	r0, r5
   246c4:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   246c8:	mov	r4, r0
   246cc:	cmp	r7, r4
   246d0:	beq	24294 <_start@@Base+0xf1a8>
   246d4:	ldrsb	r2, [sp, #47]	; 0x2f
   246d8:	b	242c4 <_start@@Base+0xf1d8>
   246dc:	cmp	r3, #0
   246e0:	cmpeq	r2, #127	; 0x7f
   246e4:	sxtbls	r2, r2
   246e8:	strbls	r2, [sp, #47]	; 0x2f
   246ec:	bls	24134 <_start@@Base+0xf048>
   246f0:	mov	r1, r0
   246f4:	mov	r3, #7
   246f8:	mov	r2, r6
   246fc:	mov	r0, r5
   24700:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   24704:	mov	r4, r0
   24708:	cmp	r7, r4
   2470c:	beq	24104 <_start@@Base+0xf018>
   24710:	ldrsb	r2, [sp, #47]	; 0x2f
   24714:	b	24134 <_start@@Base+0xf048>
   24718:	ldrb	r3, [r1, #1]
   2471c:	add	r2, r1, #1
   24720:	cmp	r3, #117	; 0x75
   24724:	bne	23f24 <_start@@Base+0xee38>
   24728:	ldrb	r3, [r2, #1]!
   2472c:	cmp	r3, #108	; 0x6c
   24730:	bne	23f24 <_start@@Base+0xee38>
   24734:	ldrb	r3, [r2, #1]
   24738:	cmp	r3, #108	; 0x6c
   2473c:	addeq	r0, r1, #4
   24740:	bne	23f24 <_start@@Base+0xee38>
   24744:	b	23ef0 <_start@@Base+0xee04>
   24748:	mov	r1, r0
   2474c:	mov	r3, #8
   24750:	mov	r2, r6
   24754:	mov	r0, r5
   24758:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   2475c:	mov	r4, r0
   24760:	b	24640 <_start@@Base+0xf554>
   24764:	mov	r1, r0
   24768:	mov	r3, #8
   2476c:	mov	r2, r6
   24770:	mov	r0, r5
   24774:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   24778:	mov	r4, r0
   2477c:	b	24690 <_start@@Base+0xf5a4>
   24780:	mov	r4, r0
   24784:	ldr	r7, [sp, #104]	; 0x68
   24788:	b	241b8 <_start@@Base+0xf0cc>
   2478c:	ldr	r3, [r0, #8]
   24790:	tst	r3, #1
   24794:	bne	247a4 <_start@@Base+0xf6b8>
   24798:	mov	r3, #15
   2479c:	bl	2e0e8 <flatcc_json_parser_set_error@@Base>
   247a0:	b	23ef0 <_start@@Base+0xee04>
   247a4:	bl	2fb00 <flatcc_json_parser_generic_json@@Base>
   247a8:	b	23ef0 <_start@@Base+0xee04>

000247ac <test_json@@Base>:
   247ac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   247b0:	mov	r5, r0
   247b4:	strd	r6, [sp, #8]
   247b8:	mov	r7, r3
   247bc:	mov	r6, r1
   247c0:	strd	r8, [sp, #16]
   247c4:	mov	r8, r2
   247c8:	str	lr, [sp, #24]
   247cc:	sub	sp, sp, #356	; 0x164
   247d0:	add	r0, sp, #120	; 0x78
   247d4:	ldr	r9, [sp, #384]	; 0x180
   247d8:	ldr	r4, [sp, #388]	; 0x184
   247dc:	bl	25ab4 <flatcc_builder_init@@Base>
   247e0:	mov	r1, #0
   247e4:	add	r0, sp, #72	; 0x48
   247e8:	bl	419d8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   247ec:	ubfx	r3, r4, #3, #1
   247f0:	tst	r4, #16
   247f4:	and	r0, r4, #1
   247f8:	ubfx	r1, r4, #1, #1
   247fc:	ubfx	r2, r4, #2, #1
   24800:	strb	r0, [sp, #98]	; 0x62
   24804:	strb	r3, [sp, #101]	; 0x65
   24808:	movne	r3, #2
   2480c:	strb	r1, [sp, #99]	; 0x63
   24810:	strbne	r3, [sp, #97]	; 0x61
   24814:	tst	r4, #32
   24818:	strb	r2, [sp, #100]	; 0x64
   2481c:	beq	24830 <test_json@@Base+0x84>
   24820:	mov	r2, #2
   24824:	mov	r3, #1
   24828:	strb	r2, [sp, #97]	; 0x61
   2482c:	strh	r3, [sp, #98]	; 0x62
   24830:	mov	r0, r6
   24834:	bl	14578 <strlen@plt>
   24838:	ldr	lr, [r5]
   2483c:	mov	r3, r0
   24840:	mov	r2, r6
   24844:	str	r9, [sp]
   24848:	add	r1, sp, #28
   2484c:	add	r0, sp, #120	; 0x78
   24850:	ldr	ip, [r5, #4]
   24854:	str	lr, [sp, #4]
   24858:	str	ip, [sp, #8]
   2485c:	bl	33440 <flatcc_json_parser_table_as_root@@Base>
   24860:	cmp	r0, r7
   24864:	bne	24998 <test_json@@Base+0x1ec>
   24868:	cmp	r7, #0
   2486c:	movne	r4, #0
   24870:	movne	r5, r4
   24874:	beq	248ac <test_json@@Base+0x100>
   24878:	mov	r0, r4
   2487c:	bl	2afe8 <flatcc_builder_aligned_free@@Base>
   24880:	add	r0, sp, #120	; 0x78
   24884:	bl	25c7c <flatcc_builder_clear@@Base>
   24888:	add	r0, sp, #72	; 0x48
   2488c:	bl	41b18 <flatcc_json_printer_clear@@Base>
   24890:	mov	r0, r5
   24894:	add	sp, sp, #356	; 0x164
   24898:	ldrd	r4, [sp]
   2489c:	ldrd	r6, [sp, #8]
   248a0:	ldrd	r8, [sp, #16]
   248a4:	add	sp, sp, #24
   248a8:	pop	{pc}		; (ldr pc, [sp], #4)
   248ac:	add	r1, sp, #20
   248b0:	add	r0, sp, #120	; 0x78
   248b4:	bl	2aeb8 <flatcc_builder_finalize_aligned_buffer@@Base>
   248b8:	ldr	r2, [r5]
   248bc:	mov	r4, r0
   248c0:	ldr	r3, [r5, #12]
   248c4:	ldr	r1, [sp, #20]
   248c8:	bl	2c328 <flatcc_verify_table_as_root@@Base>
   248cc:	cmp	r0, #0
   248d0:	bne	24a98 <test_json@@Base+0x2ec>
   248d4:	mov	r1, r4
   248d8:	add	r0, sp, #72	; 0x48
   248dc:	ldr	r3, [r5]
   248e0:	ldr	ip, [r5, #8]
   248e4:	ldr	r2, [sp, #20]
   248e8:	str	ip, [sp]
   248ec:	bl	41234 <flatcc_json_printer_table_as_root@@Base>
   248f0:	add	r1, sp, #24
   248f4:	add	r0, sp, #72	; 0x48
   248f8:	bl	41a7c <flatcc_json_printer_get_buffer@@Base>
   248fc:	subs	r6, r0, #0
   24900:	beq	24918 <test_json@@Base+0x16c>
   24904:	mov	r1, r6
   24908:	mov	r0, r8
   2490c:	bl	14500 <strcmp@plt>
   24910:	subs	r5, r0, #0
   24914:	beq	24878 <test_json@@Base+0xcc>
   24918:	movw	r9, #37808	; 0x93b0
   2491c:	movt	r9, #5
   24920:	ldr	r2, [sp, #392]	; 0x188
   24924:	movw	r1, #10560	; 0x2940
   24928:	movt	r1, #4
   2492c:	ldr	r0, [r9]
   24930:	bl	14584 <fprintf@plt>
   24934:	mov	r2, r6
   24938:	movw	r1, #10768	; 0x2a10
   2493c:	movt	r1, #4
   24940:	ldr	r0, [r9]
   24944:	bl	14584 <fprintf@plt>
   24948:	mov	r2, #10
   2494c:	mov	r1, #1
   24950:	ldr	r3, [r9]
   24954:	movw	r0, #10616	; 0x2978
   24958:	movt	r0, #4
   2495c:	bl	14548 <fwrite@plt>
   24960:	movw	r1, #10768	; 0x2a10
   24964:	movt	r1, #4
   24968:	ldr	r0, [r9]
   2496c:	mov	r2, r8
   24970:	bl	14584 <fprintf@plt>
   24974:	cmp	r4, #0
   24978:	mvneq	r5, #0
   2497c:	beq	24878 <test_json@@Base+0xcc>
   24980:	mov	r0, r4
   24984:	ldr	r2, [r9]
   24988:	mvn	r5, #0
   2498c:	ldr	r1, [sp, #20]
   24990:	bl	17c88 <_start@@Base+0x2b9c>
   24994:	b	24878 <test_json@@Base+0xcc>
   24998:	movw	r9, #37808	; 0x93b0
   2499c:	movt	r9, #5
   249a0:	cmp	r7, #0
   249a4:	ldr	r4, [r9]
   249a8:	beq	24a7c <test_json@@Base+0x2d0>
   249ac:	cmp	r0, #0
   249b0:	beq	24a58 <test_json@@Base+0x2ac>
   249b4:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   249b8:	mov	r3, r0
   249bc:	movw	r1, #10636	; 0x298c
   249c0:	movt	r1, #4
   249c4:	mov	r0, r4
   249c8:	ldr	r2, [sp, #392]	; 0x188
   249cc:	bl	14584 <fprintf@plt>
   249d0:	ldr	r4, [r9]
   249d4:	mov	r0, r7
   249d8:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   249dc:	mov	r2, r0
   249e0:	movw	r1, #10676	; 0x29b4
   249e4:	movt	r1, #4
   249e8:	mov	r0, r4
   249ec:	bl	14584 <fprintf@plt>
   249f0:	mov	r2, r6
   249f4:	movw	r1, #10768	; 0x2a10
   249f8:	movt	r1, #4
   249fc:	ldr	r0, [r9]
   24a00:	bl	14584 <fprintf@plt>
   24a04:	ldr	r3, [sp, #48]	; 0x30
   24a08:	cmp	r3, #1
   24a0c:	movgt	r4, #0
   24a10:	ble	24a34 <test_json@@Base+0x288>
   24a14:	mov	r0, #32
   24a18:	ldr	r1, [r9]
   24a1c:	add	r4, r4, #1
   24a20:	bl	145cc <fputc@plt>
   24a24:	ldr	r3, [sp, #48]	; 0x30
   24a28:	sub	r3, r3, #1
   24a2c:	cmp	r3, r4
   24a30:	bgt	24a14 <test_json@@Base+0x268>
   24a34:	movw	r0, #10440	; 0x28c8
   24a38:	movt	r0, #4
   24a3c:	ldr	r3, [r9]
   24a40:	mov	r2, #2
   24a44:	mov	r1, #1
   24a48:	mov	r4, #0
   24a4c:	mvn	r5, #0
   24a50:	bl	14548 <fwrite@plt>
   24a54:	b	24878 <test_json@@Base+0xcc>
   24a58:	mov	r0, r7
   24a5c:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   24a60:	ldr	r2, [sp, #392]	; 0x188
   24a64:	mov	r3, r0
   24a68:	movw	r1, #10708	; 0x29d4
   24a6c:	movt	r1, #4
   24a70:	mov	r0, r4
   24a74:	bl	14584 <fprintf@plt>
   24a78:	b	249f0 <test_json@@Base+0x244>
   24a7c:	bl	2e0c0 <flatcc_json_parser_error_string@@Base>
   24a80:	mov	r3, r0
   24a84:	movw	r1, #10404	; 0x28a4
   24a88:	movt	r1, #4
   24a8c:	mov	r0, r4
   24a90:	ldr	r2, [sp, #392]	; 0x188
   24a94:	b	24a74 <test_json@@Base+0x2c8>
   24a98:	movw	r9, #37808	; 0x93b0
   24a9c:	movt	r9, #5
   24aa0:	ldr	r5, [r9]
   24aa4:	bl	2b5f8 <flatcc_verify_error_string@@Base>
   24aa8:	movw	r2, #10444	; 0x28cc
   24aac:	movt	r2, #4
   24ab0:	str	r0, [sp]
   24ab4:	movw	r1, #10520	; 0x2918
   24ab8:	movt	r1, #4
   24abc:	ldr	r3, [sp, #392]	; 0x188
   24ac0:	mov	r0, r5
   24ac4:	bl	14584 <fprintf@plt>
   24ac8:	b	24974 <test_json@@Base+0x1c8>

00024acc <edge_case_tests@@Base>:
   24acc:	mov	ip, #155	; 0x9b
   24ad0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24ad4:	mov	r4, #0
   24ad8:	strd	r6, [sp, #8]
   24adc:	mov	r3, r4
   24ae0:	mov	r2, r4
   24ae4:	strd	r8, [sp, #16]
   24ae8:	movw	r1, #10796	; 0x2a2c
   24aec:	movt	r1, #4
   24af0:	strd	sl, [sp, #24]
   24af4:	movw	r0, #10828	; 0x2a4c
   24af8:	movt	r0, #4
   24afc:	str	lr, [sp, #32]
   24b00:	sub	sp, sp, #28
   24b04:	movw	r9, #10880	; 0x2a80
   24b08:	movt	r9, #4
   24b0c:	movw	r6, #10916	; 0x2aa4
   24b10:	movt	r6, #4
   24b14:	stm	sp, {r4, ip}
   24b18:	mov	r7, #2
   24b1c:	bl	184b0 <_start@@Base+0x33c4>
   24b20:	mov	r3, #168	; 0xa8
   24b24:	mov	r2, r4
   24b28:	str	r4, [sp]
   24b2c:	mov	r1, r9
   24b30:	mov	r5, r0
   24b34:	mov	r0, r6
   24b38:	str	r3, [sp, #4]
   24b3c:	mov	r3, #2
   24b40:	bl	184b0 <_start@@Base+0x33c4>
   24b44:	mov	ip, #172	; 0xac
   24b48:	movw	r1, #10952	; 0x2ac8
   24b4c:	movt	r1, #4
   24b50:	mov	r3, r4
   24b54:	mov	r2, r4
   24b58:	orr	r5, r5, r0
   24b5c:	stm	sp, {r7, ip}
   24b60:	movw	r0, #10984	; 0x2ae8
   24b64:	movt	r0, #4
   24b68:	str	r1, [sp, #12]
   24b6c:	bl	184b0 <_start@@Base+0x33c4>
   24b70:	mov	r1, #176	; 0xb0
   24b74:	mov	r2, #4
   24b78:	movw	ip, #11024	; 0x2b10
   24b7c:	movt	ip, #4
   24b80:	mov	r3, r7
   24b84:	orr	r5, r5, r0
   24b88:	str	r2, [sp]
   24b8c:	mov	r0, r6
   24b90:	mov	r2, r4
   24b94:	str	r1, [sp, #4]
   24b98:	mov	r1, ip
   24b9c:	str	ip, [sp, #16]
   24ba0:	mov	r6, #1
   24ba4:	bl	184b0 <_start@@Base+0x33c4>
   24ba8:	mov	ip, #180	; 0xb4
   24bac:	mov	r3, #8
   24bb0:	mov	r2, r4
   24bb4:	orr	r5, r5, r0
   24bb8:	movw	r1, #11044	; 0x2b24
   24bbc:	movt	r1, #4
   24bc0:	stm	sp, {r3, ip}
   24bc4:	movw	r0, #11320	; 0x2c38
   24bc8:	movt	r0, #4
   24bcc:	mov	r3, r4
   24bd0:	movw	r8, #11396	; 0x2c84
   24bd4:	movt	r8, #4
   24bd8:	movw	sl, #11424	; 0x2ca0
   24bdc:	movt	sl, #4
   24be0:	movw	fp, #11616	; 0x2d60
   24be4:	movt	fp, #4
   24be8:	bl	184b0 <_start@@Base+0x33c4>
   24bec:	mov	ip, #195	; 0xc3
   24bf0:	mov	r3, r7
   24bf4:	mov	r2, r4
   24bf8:	mov	r1, r9
   24bfc:	orr	r5, r5, r0
   24c00:	movw	r0, #11356	; 0x2c5c
   24c04:	movt	r0, #4
   24c08:	stm	sp, {r4, ip}
   24c0c:	bl	184b0 <_start@@Base+0x33c4>
   24c10:	mov	ip, #199	; 0xc7
   24c14:	mov	r2, r4
   24c18:	mov	r1, r8
   24c1c:	mov	r3, r6
   24c20:	orr	r5, r5, r0
   24c24:	mov	r0, sl
   24c28:	stm	sp, {r4, ip}
   24c2c:	bl	184b0 <_start@@Base+0x33c4>
   24c30:	mov	r3, #203	; 0xcb
   24c34:	movw	lr, #11476	; 0x2cd4
   24c38:	movt	lr, #4
   24c3c:	mov	r2, r4
   24c40:	str	r6, [sp]
   24c44:	mov	r1, lr
   24c48:	orr	r5, r5, r0
   24c4c:	str	r3, [sp, #4]
   24c50:	mov	r0, sl
   24c54:	mov	r3, r6
   24c58:	str	lr, [sp, #20]
   24c5c:	bl	184b0 <_start@@Base+0x33c4>
   24c60:	mov	ip, #209	; 0xd1
   24c64:	mov	r3, r6
   24c68:	mov	r2, r4
   24c6c:	mov	r1, r8
   24c70:	orr	r5, r5, r0
   24c74:	movw	r0, #11500	; 0x2cec
   24c78:	movt	r0, #4
   24c7c:	stm	sp, {r4, ip}
   24c80:	movw	sl, #12016	; 0x2ef0
   24c84:	movt	sl, #4
   24c88:	bl	184b0 <_start@@Base+0x33c4>
   24c8c:	mov	ip, #217	; 0xd9
   24c90:	mov	r3, r7
   24c94:	mov	r2, r4
   24c98:	mov	r1, r9
   24c9c:	orr	r5, r5, r0
   24ca0:	mov	r0, fp
   24ca4:	stm	sp, {r4, ip}
   24ca8:	bl	184b0 <_start@@Base+0x33c4>
   24cac:	mov	ip, #221	; 0xdd
   24cb0:	mov	r3, r4
   24cb4:	ldr	r1, [sp, #12]
   24cb8:	mov	r2, r4
   24cbc:	orr	r5, r5, r0
   24cc0:	movw	r0, #11648	; 0x2d80
   24cc4:	movt	r0, #4
   24cc8:	stm	sp, {r7, ip}
   24ccc:	bl	184b0 <_start@@Base+0x33c4>
   24cd0:	mov	ip, #225	; 0xe1
   24cd4:	mov	r2, #4
   24cd8:	ldr	r1, [sp, #16]
   24cdc:	mov	r3, r7
   24ce0:	orr	r5, r5, r0
   24ce4:	mov	r0, fp
   24ce8:	stm	sp, {r2, ip}
   24cec:	mov	r2, r4
   24cf0:	bl	184b0 <_start@@Base+0x33c4>
   24cf4:	mov	ip, #229	; 0xe5
   24cf8:	mov	r3, #8
   24cfc:	mov	r2, r4
   24d00:	orr	r5, r5, r0
   24d04:	movw	r1, #11684	; 0x2da4
   24d08:	movt	r1, #4
   24d0c:	stm	sp, {r3, ip}
   24d10:	movw	r0, #11964	; 0x2ebc
   24d14:	movt	r0, #4
   24d18:	mov	r3, r4
   24d1c:	bl	184b0 <_start@@Base+0x33c4>
   24d20:	mov	ip, #233	; 0xe9
   24d24:	mov	r3, r7
   24d28:	mov	r1, r9
   24d2c:	mov	r2, r4
   24d30:	orr	r5, r5, r0
   24d34:	movw	r0, #11984	; 0x2ed0
   24d38:	movt	r0, #4
   24d3c:	stm	sp, {r4, ip}
   24d40:	bl	184b0 <_start@@Base+0x33c4>
   24d44:	mov	ip, #237	; 0xed
   24d48:	mov	r3, r6
   24d4c:	mov	r2, r4
   24d50:	mov	r1, r8
   24d54:	orr	r5, r5, r0
   24d58:	mov	r0, sl
   24d5c:	stm	sp, {r4, ip}
   24d60:	bl	184b0 <_start@@Base+0x33c4>
   24d64:	mov	ip, #241	; 0xf1
   24d68:	mov	r3, r6
   24d6c:	ldr	r1, [sp, #20]
   24d70:	mov	r2, r4
   24d74:	orr	r5, r5, r0
   24d78:	mov	r0, sl
   24d7c:	stm	sp, {r6, ip}
   24d80:	bl	184b0 <_start@@Base+0x33c4>
   24d84:	mov	ip, #247	; 0xf7
   24d88:	orr	r5, r5, r0
   24d8c:	mov	r3, r6
   24d90:	mov	r2, r4
   24d94:	mov	r1, r8
   24d98:	movw	r0, #12060	; 0x2f1c
   24d9c:	movt	r0, #4
   24da0:	stm	sp, {r4, ip}
   24da4:	bl	184b0 <_start@@Base+0x33c4>
   24da8:	orr	r0, r5, r0
   24dac:	add	sp, sp, #28
   24db0:	ldrd	r4, [sp]
   24db4:	ldrd	r6, [sp, #8]
   24db8:	ldrd	r8, [sp, #16]
   24dbc:	ldrd	sl, [sp, #24]
   24dc0:	add	sp, sp, #32
   24dc4:	pop	{pc}		; (ldr pc, [sp], #4)

00024dc8 <error_case_tests@@Base>:
   24dc8:	movw	ip, #285	; 0x11d
   24dcc:	strd	r4, [sp, #-12]!
   24dd0:	mov	r4, #0
   24dd4:	str	lr, [sp, #8]
   24dd8:	sub	sp, sp, #12
   24ddc:	mov	r3, r4
   24de0:	mov	r1, r4
   24de4:	mov	r2, #13
   24de8:	movw	r0, #12156	; 0x2f7c
   24dec:	movt	r0, #4
   24df0:	stm	sp, {r4, ip}
   24df4:	bl	184b0 <_start@@Base+0x33c4>
   24df8:	movw	r2, #287	; 0x11f
   24dfc:	mov	r3, r4
   24e00:	str	r4, [sp]
   24e04:	mov	r1, r4
   24e08:	mov	r5, r0
   24e0c:	movw	r0, #12184	; 0x2f98
   24e10:	movt	r0, #4
   24e14:	str	r2, [sp, #4]
   24e18:	mov	r2, #13
   24e1c:	bl	184b0 <_start@@Base+0x33c4>
   24e20:	movw	r2, #289	; 0x121
   24e24:	mov	r3, r4
   24e28:	str	r4, [sp]
   24e2c:	mov	r1, r4
   24e30:	orr	r5, r5, r0
   24e34:	movw	r0, #12284	; 0x2ffc
   24e38:	movt	r0, #4
   24e3c:	str	r2, [sp, #4]
   24e40:	mov	r2, #13
   24e44:	bl	184b0 <_start@@Base+0x33c4>
   24e48:	movw	r2, #291	; 0x123
   24e4c:	mov	r3, r4
   24e50:	str	r4, [sp]
   24e54:	mov	r1, r4
   24e58:	orr	r5, r5, r0
   24e5c:	movw	r0, #12380	; 0x305c
   24e60:	movt	r0, #4
   24e64:	str	r2, [sp, #4]
   24e68:	mov	r2, #13
   24e6c:	bl	184b0 <_start@@Base+0x33c4>
   24e70:	movw	r2, #293	; 0x125
   24e74:	mov	r3, r4
   24e78:	str	r4, [sp]
   24e7c:	mov	r1, r4
   24e80:	orr	r5, r5, r0
   24e84:	movw	r0, #12468	; 0x30b4
   24e88:	movt	r0, #4
   24e8c:	str	r2, [sp, #4]
   24e90:	mov	r2, #13
   24e94:	bl	184b0 <_start@@Base+0x33c4>
   24e98:	mov	r2, #296	; 0x128
   24e9c:	mov	r3, r4
   24ea0:	str	r4, [sp]
   24ea4:	mov	r1, r4
   24ea8:	orr	r5, r5, r0
   24eac:	movw	r0, #12556	; 0x310c
   24eb0:	movt	r0, #4
   24eb4:	str	r2, [sp, #4]
   24eb8:	mov	r2, #13
   24ebc:	bl	184b0 <_start@@Base+0x33c4>
   24ec0:	movw	r2, #299	; 0x12b
   24ec4:	mov	r3, r4
   24ec8:	str	r4, [sp]
   24ecc:	mov	r1, r4
   24ed0:	orr	r5, r5, r0
   24ed4:	movw	r0, #12716	; 0x31ac
   24ed8:	movt	r0, #4
   24edc:	str	r2, [sp, #4]
   24ee0:	mov	r2, #13
   24ee4:	bl	184b0 <_start@@Base+0x33c4>
   24ee8:	movw	r2, #303	; 0x12f
   24eec:	mov	r3, r4
   24ef0:	str	r4, [sp]
   24ef4:	mov	r1, r4
   24ef8:	orr	r5, r5, r0
   24efc:	movw	r0, #12872	; 0x3248
   24f00:	movt	r0, #4
   24f04:	str	r2, [sp, #4]
   24f08:	mov	r2, #13
   24f0c:	bl	184b0 <_start@@Base+0x33c4>
   24f10:	movw	r2, #307	; 0x133
   24f14:	mov	r3, r4
   24f18:	str	r4, [sp]
   24f1c:	mov	r1, r4
   24f20:	orr	r5, r5, r0
   24f24:	movw	r0, #13072	; 0x3310
   24f28:	movt	r0, #4
   24f2c:	str	r2, [sp, #4]
   24f30:	mov	r2, #13
   24f34:	bl	184b0 <_start@@Base+0x33c4>
   24f38:	movw	r2, #322	; 0x142
   24f3c:	mov	r3, r4
   24f40:	str	r4, [sp]
   24f44:	mov	r1, r4
   24f48:	orr	r5, r5, r0
   24f4c:	movw	r0, #13272	; 0x33d8
   24f50:	movt	r0, #4
   24f54:	str	r2, [sp, #4]
   24f58:	mov	r2, #13
   24f5c:	bl	184b0 <_start@@Base+0x33c4>
   24f60:	mov	r2, #324	; 0x144
   24f64:	mov	r3, r4
   24f68:	str	r4, [sp]
   24f6c:	mov	r1, r4
   24f70:	orr	r5, r5, r0
   24f74:	movw	r0, #13296	; 0x33f0
   24f78:	movt	r0, #4
   24f7c:	str	r2, [sp, #4]
   24f80:	mov	r2, #13
   24f84:	bl	184b0 <_start@@Base+0x33c4>
   24f88:	movw	r2, #326	; 0x146
   24f8c:	mov	r3, r4
   24f90:	str	r4, [sp]
   24f94:	mov	r1, r4
   24f98:	orr	r5, r5, r0
   24f9c:	movw	r0, #13384	; 0x3448
   24fa0:	movt	r0, #4
   24fa4:	str	r2, [sp, #4]
   24fa8:	mov	r2, #13
   24fac:	bl	184b0 <_start@@Base+0x33c4>
   24fb0:	mov	r2, #328	; 0x148
   24fb4:	mov	r3, r4
   24fb8:	str	r4, [sp]
   24fbc:	mov	r1, r4
   24fc0:	orr	r5, r5, r0
   24fc4:	movw	r0, #13468	; 0x349c
   24fc8:	movt	r0, #4
   24fcc:	str	r2, [sp, #4]
   24fd0:	mov	r2, #13
   24fd4:	bl	184b0 <_start@@Base+0x33c4>
   24fd8:	movw	r2, #330	; 0x14a
   24fdc:	mov	r3, r4
   24fe0:	str	r4, [sp]
   24fe4:	mov	r1, r4
   24fe8:	orr	r5, r5, r0
   24fec:	movw	r0, #13548	; 0x34ec
   24ff0:	movt	r0, #4
   24ff4:	str	r2, [sp, #4]
   24ff8:	mov	r2, #13
   24ffc:	bl	184b0 <_start@@Base+0x33c4>
   25000:	movw	r2, #333	; 0x14d
   25004:	mov	r3, r4
   25008:	str	r4, [sp]
   2500c:	mov	r1, r4
   25010:	orr	r5, r5, r0
   25014:	movw	r0, #13628	; 0x353c
   25018:	movt	r0, #4
   2501c:	str	r2, [sp, #4]
   25020:	mov	r2, #13
   25024:	bl	184b0 <_start@@Base+0x33c4>
   25028:	mov	r2, #336	; 0x150
   2502c:	mov	r3, r4
   25030:	str	r4, [sp]
   25034:	mov	r1, r4
   25038:	orr	r5, r5, r0
   2503c:	movw	r0, #13768	; 0x35c8
   25040:	movt	r0, #4
   25044:	str	r2, [sp, #4]
   25048:	mov	r2, #13
   2504c:	bl	184b0 <_start@@Base+0x33c4>
   25050:	mov	r2, #340	; 0x154
   25054:	mov	r3, r4
   25058:	str	r4, [sp]
   2505c:	mov	r1, r4
   25060:	orr	r5, r5, r0
   25064:	movw	r0, #13908	; 0x3654
   25068:	movt	r0, #4
   2506c:	str	r2, [sp, #4]
   25070:	mov	r2, #13
   25074:	bl	184b0 <_start@@Base+0x33c4>
   25078:	mov	r2, #344	; 0x158
   2507c:	orr	r5, r5, r0
   25080:	str	r4, [sp]
   25084:	mov	r3, r4
   25088:	mov	r1, r4
   2508c:	movw	r0, #14084	; 0x3704
   25090:	movt	r0, #4
   25094:	str	r2, [sp, #4]
   25098:	mov	r2, #13
   2509c:	bl	184b0 <_start@@Base+0x33c4>
   250a0:	orr	r0, r5, r0
   250a4:	add	sp, sp, #12
   250a8:	ldrd	r4, [sp]
   250ac:	add	sp, sp, #8
   250b0:	pop	{pc}		; (ldr pc, [sp], #4)

000250b4 <base64_tests@@Base>:
   250b4:	movw	ip, #369	; 0x171
   250b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   250bc:	mov	r4, #0
   250c0:	strd	r6, [sp, #8]
   250c4:	mov	r3, r4
   250c8:	mov	r2, r4
   250cc:	str	r8, [sp, #16]
   250d0:	movw	r1, #11024	; 0x2b10
   250d4:	movt	r1, #4
   250d8:	str	lr, [sp, #20]
   250dc:	sub	sp, sp, #8
   250e0:	movw	r0, #14260	; 0x37b4
   250e4:	movt	r0, #4
   250e8:	movw	r8, #14360	; 0x3818
   250ec:	movt	r8, #4
   250f0:	stm	sp, {r4, ip}
   250f4:	movw	r7, #14728	; 0x3988
   250f8:	movt	r7, #4
   250fc:	movw	r6, #15848	; 0x3de8
   25100:	movt	r6, #4
   25104:	bl	184b0 <_start@@Base+0x33c4>
   25108:	mov	r5, r0
   2510c:	mov	r0, #372	; 0x174
   25110:	str	r4, [sp]
   25114:	mov	r3, r4
   25118:	mov	r2, r4
   2511c:	movw	r1, #14284	; 0x37cc
   25120:	movt	r1, #4
   25124:	str	r0, [sp, #4]
   25128:	movw	r0, #14320	; 0x37f0
   2512c:	movt	r0, #4
   25130:	bl	184b0 <_start@@Base+0x33c4>
   25134:	mov	r1, #376	; 0x178
   25138:	mov	r3, r4
   2513c:	str	r4, [sp]
   25140:	mov	r2, r4
   25144:	orr	r5, r5, r0
   25148:	movw	r0, #14540	; 0x38cc
   2514c:	movt	r0, #4
   25150:	str	r1, [sp, #4]
   25154:	mov	r1, r8
   25158:	bl	184b0 <_start@@Base+0x33c4>
   2515c:	movw	ip, #379	; 0x17b
   25160:	mov	r3, r4
   25164:	mov	r2, r4
   25168:	mov	r1, r7
   2516c:	orr	r5, r5, r0
   25170:	movw	r0, #14912	; 0x3a40
   25174:	movt	r0, #4
   25178:	stm	sp, {r4, ip}
   2517c:	bl	184b0 <_start@@Base+0x33c4>
   25180:	movw	ip, #382	; 0x17e
   25184:	mov	r1, r8
   25188:	mov	r3, r4
   2518c:	mov	r2, r4
   25190:	orr	r5, r5, r0
   25194:	movw	r0, #15100	; 0x3afc
   25198:	movt	r0, #4
   2519c:	stm	sp, {r4, ip}
   251a0:	bl	184b0 <_start@@Base+0x33c4>
   251a4:	movw	ip, #385	; 0x181
   251a8:	mov	r1, r7
   251ac:	mov	r3, r4
   251b0:	mov	r2, r4
   251b4:	orr	r5, r5, r0
   251b8:	movw	r0, #15284	; 0x3bb4
   251bc:	movt	r0, #4
   251c0:	stm	sp, {r4, ip}
   251c4:	bl	184b0 <_start@@Base+0x33c4>
   251c8:	mov	r2, #388	; 0x184
   251cc:	mov	r3, r4
   251d0:	str	r4, [sp]
   251d4:	mov	r1, r4
   251d8:	orr	r5, r5, r0
   251dc:	movw	r0, #15472	; 0x3c70
   251e0:	movt	r0, #4
   251e4:	str	r2, [sp, #4]
   251e8:	mov	r2, #31
   251ec:	bl	184b0 <_start@@Base+0x33c4>
   251f0:	movw	r2, #391	; 0x187
   251f4:	mov	r3, r4
   251f8:	str	r4, [sp]
   251fc:	mov	r1, r4
   25200:	orr	r5, r5, r0
   25204:	movw	r0, #15660	; 0x3d2c
   25208:	movt	r0, #4
   2520c:	str	r2, [sp, #4]
   25210:	mov	r2, #32
   25214:	bl	184b0 <_start@@Base+0x33c4>
   25218:	movw	ip, #406	; 0x196
   2521c:	mov	r3, r4
   25220:	mov	r2, r4
   25224:	mov	r1, r6
   25228:	orr	r5, r5, r0
   2522c:	movw	r0, #16064	; 0x3ec0
   25230:	movt	r0, #4
   25234:	stm	sp, {r4, ip}
   25238:	bl	184b0 <_start@@Base+0x33c4>
   2523c:	movw	ip, #419	; 0x1a3
   25240:	orr	r5, r5, r0
   25244:	mov	r1, r6
   25248:	mov	r3, r4
   2524c:	mov	r2, r4
   25250:	movw	r0, #16272	; 0x3f90
   25254:	movt	r0, #4
   25258:	stm	sp, {r4, ip}
   2525c:	bl	184b0 <_start@@Base+0x33c4>
   25260:	orr	r0, r5, r0
   25264:	add	sp, sp, #8
   25268:	ldrd	r4, [sp]
   2526c:	ldrd	r6, [sp, #8]
   25270:	ldr	r8, [sp, #16]
   25274:	add	sp, sp, #20
   25278:	pop	{pc}		; (ldr pc, [sp], #4)

0002527c <mixed_type_union_tests@@Base>:
   2527c:	strd	r4, [sp, #-16]!
   25280:	movw	r5, #9252	; 0x2424
   25284:	movt	r5, #4
   25288:	mov	r0, r5
   2528c:	mov	r3, #432	; 0x1b0
   25290:	str	r6, [sp, #8]
   25294:	movw	r2, #16476	; 0x405c
   25298:	movt	r2, #4
   2529c:	str	lr, [sp, #12]
   252a0:	movw	r1, #16548	; 0x40a4
   252a4:	movt	r1, #4
   252a8:	bl	17e14 <_start@@Base+0x2d28>
   252ac:	movw	r6, #16628	; 0x40f4
   252b0:	movt	r6, #4
   252b4:	mov	r2, r6
   252b8:	mov	r4, r0
   252bc:	movw	r3, #437	; 0x1b5
   252c0:	mov	r0, r5
   252c4:	movw	r1, #16748	; 0x416c
   252c8:	movt	r1, #4
   252cc:	bl	17e14 <_start@@Base+0x2d28>
   252d0:	orr	r4, r4, r0
   252d4:	mov	r2, r6
   252d8:	mov	r0, r5
   252dc:	movw	r3, #442	; 0x1ba
   252e0:	movw	r1, #16880	; 0x41f0
   252e4:	movt	r1, #4
   252e8:	bl	17e14 <_start@@Base+0x2d28>
   252ec:	orr	r4, r4, r0
   252f0:	movw	r3, #449	; 0x1c1
   252f4:	mov	r0, r5
   252f8:	movw	r2, #17032	; 0x4288
   252fc:	movt	r2, #4
   25300:	movw	r1, #17220	; 0x4344
   25304:	movt	r1, #4
   25308:	bl	17e14 <_start@@Base+0x2d28>
   2530c:	orr	r4, r4, r0
   25310:	movw	r3, #458	; 0x1ca
   25314:	mov	r0, r5
   25318:	movw	r2, #17444	; 0x4424
   2531c:	movt	r2, #4
   25320:	movw	r1, #17668	; 0x4504
   25324:	movt	r1, #4
   25328:	bl	17e14 <_start@@Base+0x2d28>
   2532c:	orr	r4, r4, r0
   25330:	movw	r3, #469	; 0x1d5
   25334:	mov	r0, r5
   25338:	movw	r2, #17932	; 0x460c
   2533c:	movt	r2, #4
   25340:	movw	r1, #18260	; 0x4754
   25344:	movt	r1, #4
   25348:	bl	17e14 <_start@@Base+0x2d28>
   2534c:	orr	r4, r4, r0
   25350:	mov	r2, r6
   25354:	mov	r0, r5
   25358:	movw	r1, #18648	; 0x48d8
   2535c:	movt	r1, #4
   25360:	movw	r3, #474	; 0x1da
   25364:	bl	17e14 <_start@@Base+0x2d28>
   25368:	orr	r0, r4, r0
   2536c:	ldrd	r4, [sp]
   25370:	ldr	r6, [sp, #8]
   25374:	add	sp, sp, #12
   25378:	pop	{pc}		; (ldr pc, [sp], #4)

0002537c <union_vector_tests@@Base>:
   2537c:	strd	r4, [sp, #-16]!
   25380:	movw	r3, #485	; 0x1e5
   25384:	movw	r1, #18848	; 0x49a0
   25388:	movt	r1, #4
   2538c:	ldr	r5, [pc, #200]	; 2545c <union_vector_tests@@Base+0xe0>
   25390:	str	r6, [sp, #8]
   25394:	movw	r6, #18792	; 0x4968
   25398:	movt	r6, #4
   2539c:	mov	r2, r6
   253a0:	str	lr, [sp, #12]
   253a4:	mov	r0, r5
   253a8:	bl	17e14 <_start@@Base+0x2d28>
   253ac:	mov	r4, r0
   253b0:	mov	r3, #488	; 0x1e8
   253b4:	mov	r0, r5
   253b8:	movw	r2, #18912	; 0x49e0
   253bc:	movt	r2, #4
   253c0:	movw	r1, #18956	; 0x4a0c
   253c4:	movt	r1, #4
   253c8:	bl	17e14 <_start@@Base+0x2d28>
   253cc:	orr	r4, r4, r0
   253d0:	movw	r3, #491	; 0x1eb
   253d4:	mov	r0, r5
   253d8:	movw	r2, #19008	; 0x4a40
   253dc:	movt	r2, #4
   253e0:	movw	r1, #19076	; 0x4a84
   253e4:	movt	r1, #4
   253e8:	bl	17e14 <_start@@Base+0x2d28>
   253ec:	orr	r4, r4, r0
   253f0:	movw	r3, #494	; 0x1ee
   253f4:	mov	r0, r5
   253f8:	movw	r2, #19156	; 0x4ad4
   253fc:	movt	r2, #4
   25400:	movw	r1, #19264	; 0x4b40
   25404:	movt	r1, #4
   25408:	bl	17e14 <_start@@Base+0x2d28>
   2540c:	orr	r4, r4, r0
   25410:	mov	r2, r6
   25414:	mov	r0, r5
   25418:	movw	r3, #497	; 0x1f1
   2541c:	movw	r1, #19392	; 0x4bc0
   25420:	movt	r1, #4
   25424:	bl	17e14 <_start@@Base+0x2d28>
   25428:	orr	r4, r4, r0
   2542c:	movw	r2, #19456	; 0x4c00
   25430:	movt	r2, #4
   25434:	mov	r0, r5
   25438:	movw	r1, #19548	; 0x4c5c
   2543c:	movt	r1, #4
   25440:	mov	r3, #500	; 0x1f4
   25444:	bl	17e14 <_start@@Base+0x2d28>
   25448:	orr	r0, r4, r0
   2544c:	ldrd	r4, [sp]
   25450:	ldr	r6, [sp, #8]
   25454:	add	sp, sp, #12
   25458:	pop	{pc}		; (ldr pc, [sp], #4)
   2545c:	andeq	r2, r4, r4, lsr r4

00025460 <flatcc_builder_default_alloc@@Base>:
   25460:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25464:	subs	r5, r2, #0
   25468:	strd	r6, [sp, #8]
   2546c:	mov	r6, r1
   25470:	str	r8, [sp, #16]
   25474:	str	lr, [sp, #20]
   25478:	beq	254b0 <flatcc_builder_default_alloc@@Base+0x50>
   2547c:	mov	r7, r3
   25480:	ldr	r3, [sp, #24]
   25484:	sub	r2, r3, #1
   25488:	cmp	r2, #6
   2548c:	ldrls	pc, [pc, r2, lsl #2]
   25490:	b	25560 <flatcc_builder_default_alloc@@Base+0x100>
   25494:	andeq	r5, r2, r0, ror #9
   25498:	andeq	r5, r2, r0, ror #10
   2549c:	andeq	r5, r2, r0, ror #10
   254a0:	andeq	r5, r2, r8, asr r5
   254a4:	andeq	r5, r2, r8, asr #10
   254a8:	andeq	r5, r2, r0, ror #10
   254ac:	andeq	r5, r2, r0, asr r5
   254b0:	ldr	r0, [r1]
   254b4:	cmp	r0, #0
   254b8:	beq	254cc <flatcc_builder_default_alloc@@Base+0x6c>
   254bc:	bl	14518 <free@plt>
   254c0:	mov	r0, r5
   254c4:	str	r5, [r6]
   254c8:	str	r5, [r6, #4]
   254cc:	ldrd	r4, [sp]
   254d0:	ldrd	r6, [sp, #8]
   254d4:	ldr	r8, [sp, #16]
   254d8:	add	sp, sp, #20
   254dc:	pop	{pc}		; (ldr pc, [sp], #4)
   254e0:	mov	r4, #256	; 0x100
   254e4:	cmp	r4, r5
   254e8:	bcs	254f8 <flatcc_builder_default_alloc@@Base+0x98>
   254ec:	lsl	r4, r4, #1
   254f0:	cmp	r5, r4
   254f4:	bhi	254ec <flatcc_builder_default_alloc@@Base+0x8c>
   254f8:	ldr	r2, [r6, #4]
   254fc:	cmp	r5, r2
   25500:	bhi	25510 <flatcc_builder_default_alloc@@Base+0xb0>
   25504:	cmp	r4, r2, lsr #1
   25508:	movls	r0, #0
   2550c:	bls	254cc <flatcc_builder_default_alloc@@Base+0x6c>
   25510:	mov	r1, r4
   25514:	ldr	r0, [r6]
   25518:	bl	1453c <realloc@plt>
   2551c:	subs	r5, r0, #0
   25520:	beq	2557c <flatcc_builder_default_alloc@@Base+0x11c>
   25524:	cmp	r7, #0
   25528:	beq	25538 <flatcc_builder_default_alloc@@Base+0xd8>
   2552c:	ldr	r0, [r6, #4]
   25530:	cmp	r0, r4
   25534:	bcc	25568 <flatcc_builder_default_alloc@@Base+0x108>
   25538:	mov	r0, #0
   2553c:	str	r5, [r6]
   25540:	str	r4, [r6, #4]
   25544:	b	254cc <flatcc_builder_default_alloc@@Base+0x6c>
   25548:	mov	r4, r5
   2554c:	b	254f8 <flatcc_builder_default_alloc@@Base+0x98>
   25550:	mov	r4, #64	; 0x40
   25554:	b	254e4 <flatcc_builder_default_alloc@@Base+0x84>
   25558:	mov	r4, #288	; 0x120
   2555c:	b	254e4 <flatcc_builder_default_alloc@@Base+0x84>
   25560:	mov	r4, #32
   25564:	b	254e4 <flatcc_builder_default_alloc@@Base+0x84>
   25568:	sub	r2, r4, r0
   2556c:	mov	r1, #0
   25570:	add	r0, r5, r0
   25574:	bl	1459c <memset@plt>
   25578:	b	25538 <flatcc_builder_default_alloc@@Base+0xd8>
   2557c:	mvn	r0, #0
   25580:	b	254cc <flatcc_builder_default_alloc@@Base+0x6c>
   25584:	movw	r3, #25060	; 0x61e4
   25588:	movt	r3, #4
   2558c:	str	r4, [sp, #-8]!
   25590:	movw	r1, #26932	; 0x6934
   25594:	movt	r1, #4
   25598:	str	lr, [sp, #4]
   2559c:	movw	r0, #27124	; 0x69f4
   255a0:	movt	r0, #4
   255a4:	mov	r2, #308	; 0x134
   255a8:	bl	145f0 <__assert_fail@plt>
   255ac:	movw	r1, #26932	; 0x6934
   255b0:	movt	r1, #4
   255b4:	ldr	r3, [pc, #20]	; 255d0 <flatcc_builder_default_alloc@@Base+0x170>
   255b8:	movw	r0, #27124	; 0x69f4
   255bc:	movt	r0, #4
   255c0:	str	r4, [sp, #-8]!
   255c4:	movw	r2, #677	; 0x2a5
   255c8:	str	lr, [sp, #4]
   255cc:	bl	145f0 <__assert_fail@plt>
   255d0:	strdeq	r6, [r4], -r4
   255d4:	movw	r1, #26932	; 0x6934
   255d8:	movt	r1, #4
   255dc:	ldr	r3, [pc, #20]	; 255f8 <flatcc_builder_default_alloc@@Base+0x198>
   255e0:	movw	r0, #27124	; 0x69f4
   255e4:	movt	r0, #4
   255e8:	str	r4, [sp, #-8]!
   255ec:	movw	r2, #702	; 0x2be
   255f0:	str	lr, [sp, #4]
   255f4:	bl	145f0 <__assert_fail@plt>
   255f8:	andeq	r6, r4, r0, lsl #4
   255fc:	movw	r1, #26932	; 0x6934
   25600:	movt	r1, #4
   25604:	ldr	r3, [pc, #20]	; 25620 <flatcc_builder_default_alloc@@Base+0x1c0>
   25608:	movw	r0, #27124	; 0x69f4
   2560c:	movt	r0, #4
   25610:	str	r4, [sp, #-8]!
   25614:	movw	r2, #651	; 0x28b
   25618:	str	lr, [sp, #4]
   2561c:	bl	145f0 <__assert_fail@plt>
   25620:	andeq	r6, r4, r0, lsl r2
   25624:	movw	r1, #26932	; 0x6934
   25628:	movt	r1, #4
   2562c:	ldr	r3, [pc, #20]	; 25648 <flatcc_builder_default_alloc@@Base+0x1e8>
   25630:	movw	r0, #27004	; 0x697c
   25634:	movt	r0, #4
   25638:	str	r4, [sp, #-8]!
   2563c:	mov	r2, #892	; 0x37c
   25640:	str	lr, [sp, #4]
   25644:	bl	145f0 <__assert_fail@plt>
   25648:	andeq	r6, r4, ip, lsl r2
   2564c:	movw	r1, #26932	; 0x6934
   25650:	movt	r1, #4
   25654:	ldr	r3, [pc, #20]	; 25670 <flatcc_builder_default_alloc@@Base+0x210>
   25658:	movw	r0, #27032	; 0x6998
   2565c:	movt	r0, #4
   25660:	str	r4, [sp, #-8]!
   25664:	movw	r2, #542	; 0x21e
   25668:	str	lr, [sp, #4]
   2566c:	bl	145f0 <__assert_fail@plt>
   25670:	andeq	r6, r4, r0, lsr r2
   25674:	movw	r1, #26932	; 0x6934
   25678:	movt	r1, #4
   2567c:	ldr	r3, [pc, #20]	; 25698 <flatcc_builder_default_alloc@@Base+0x238>
   25680:	movw	r0, #27060	; 0x69b4
   25684:	movt	r0, #4
   25688:	str	r4, [sp, #-8]!
   2568c:	movw	r2, #966	; 0x3c6
   25690:	str	lr, [sp, #4]
   25694:	bl	145f0 <__assert_fail@plt>
   25698:	andeq	r6, r4, r0, asr r2
   2569c:	movw	r1, #26932	; 0x6934
   256a0:	movt	r1, #4
   256a4:	ldr	r3, [pc, #20]	; 256c0 <flatcc_builder_default_alloc@@Base+0x260>
   256a8:	movw	r0, #27104	; 0x69e0
   256ac:	movt	r0, #4
   256b0:	str	r4, [sp, #-8]!
   256b4:	movw	r2, #1926	; 0x786
   256b8:	str	lr, [sp, #4]
   256bc:	bl	145f0 <__assert_fail@plt>
   256c0:	andeq	r6, r4, r0, ror r2
   256c4:	ldrd	r2, [r0, #156]	; 0x9c
   256c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   256cc:	mov	r5, r1
   256d0:	mov	r4, r0
   256d4:	strd	r6, [sp, #8]
   256d8:	str	lr, [sp, #16]
   256dc:	sub	sp, sp, #12
   256e0:	add	r1, r2, #1
   256e4:	cmp	r1, r3
   256e8:	str	r1, [r0, #156]	; 0x9c
   256ec:	ble	257cc <flatcc_builder_default_alloc@@Base+0x36c>
   256f0:	ldr	r3, [r0, #176]	; 0xb0
   256f4:	cmp	r1, r3
   256f8:	cmpgt	r3, #0
   256fc:	movgt	r3, #1
   25700:	movle	r3, #0
   25704:	bgt	257dc <flatcc_builder_default_alloc@@Base+0x37c>
   25708:	add	r2, r2, r2, lsl #3
   2570c:	ldr	r1, [r0, #88]	; 0x58
   25710:	lsl	r6, r2, #2
   25714:	add	r2, r6, #36	; 0x24
   25718:	cmp	r2, r1
   2571c:	bls	25740 <flatcc_builder_default_alloc@@Base+0x2e0>
   25720:	mov	ip, #4
   25724:	add	r1, r0, #84	; 0x54
   25728:	ldr	r0, [r0, #40]	; 0x28
   2572c:	str	ip, [sp]
   25730:	ldr	r7, [r4, #48]	; 0x30
   25734:	blx	r7
   25738:	cmp	r0, #0
   2573c:	bne	257e4 <flatcc_builder_default_alloc@@Base+0x384>
   25740:	ldr	r2, [r4, #84]	; 0x54
   25744:	add	r2, r2, r6
   25748:	cmp	r2, #0
   2574c:	str	r2, [r4, #32]
   25750:	beq	257dc <flatcc_builder_default_alloc@@Base+0x37c>
   25754:	ldr	r3, [r4, #88]	; 0x58
   25758:	movw	r0, #36409	; 0x8e39
   2575c:	movt	r0, #14563	; 0x38e3
   25760:	ldr	r1, [r4, #176]	; 0xb0
   25764:	umull	r0, r3, r0, r3
   25768:	lsr	r3, r3, #3
   2576c:	cmp	r3, r1
   25770:	cmpgt	r1, #0
   25774:	movgt	r3, r1
   25778:	str	r3, [r4, #160]	; 0xa0
   2577c:	ldr	r3, [r4, #20]
   25780:	mov	r1, #0
   25784:	mvn	lr, #3
   25788:	mov	r0, r1
   2578c:	ldr	ip, [r4, #28]
   25790:	ldrh	r6, [r4, #130]	; 0x82
   25794:	str	r3, [r2, #8]
   25798:	add	r3, r3, ip
   2579c:	add	r3, r3, #7
   257a0:	bic	r3, r3, #7
   257a4:	strh	r6, [r2, #12]
   257a8:	strh	r5, [r4, #130]	; 0x82
   257ac:	stm	r2, {ip, lr}
   257b0:	str	r1, [r4, #20]
   257b4:	str	r3, [r4, #28]
   257b8:	add	sp, sp, #12
   257bc:	ldrd	r4, [sp]
   257c0:	ldrd	r6, [sp, #8]
   257c4:	add	sp, sp, #16
   257c8:	pop	{pc}		; (ldr pc, [sp], #4)
   257cc:	ldr	r2, [r0, #32]
   257d0:	add	r2, r2, #36	; 0x24
   257d4:	str	r2, [r0, #32]
   257d8:	b	2577c <flatcc_builder_default_alloc@@Base+0x31c>
   257dc:	mvn	r0, #0
   257e0:	b	257b8 <flatcc_builder_default_alloc@@Base+0x358>
   257e4:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>
   257e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   257ec:	mov	r4, r0
   257f0:	ldrh	r0, [r0, #128]	; 0x80
   257f4:	strd	r6, [sp, #8]
   257f8:	mov	r6, #4
   257fc:	ldr	r5, [r4, #136]	; 0x88
   25800:	str	lr, [sp, #20]
   25804:	mov	lr, r2
   25808:	str	r8, [sp, #16]
   2580c:	sub	sp, sp, #88	; 0x58
   25810:	cmp	r0, #3
   25814:	add	r0, sp, #12
   25818:	movls	r2, #4
   2581c:	str	lr, [sp, #12]
   25820:	str	r6, [sp, #16]
   25824:	strhls	r2, [r4, #128]	; 0x80
   25828:	mov	r2, #1
   2582c:	lsls	ip, lr, #2
   25830:	moveq	r7, #2
   25834:	str	r2, [sp, #20]
   25838:	str	r0, [sp, #24]
   2583c:	and	r0, r5, #3
   25840:	str	r6, [sp, #28]
   25844:	beq	25868 <flatcc_builder_default_alloc@@Base+0x408>
   25848:	mov	r8, #2
   2584c:	add	r6, ip, r6
   25850:	mov	r2, r8
   25854:	mov	r7, #3
   25858:	str	r6, [sp, #16]
   2585c:	str	r8, [sp, #20]
   25860:	str	r1, [sp, #32]
   25864:	str	ip, [sp, #36]	; 0x24
   25868:	cmp	r0, #0
   2586c:	beq	25894 <flatcc_builder_default_alloc@@Base+0x434>
   25870:	ldr	r8, [pc, #360]	; 259e0 <flatcc_builder_default_alloc@@Base+0x580>
   25874:	add	r2, r2, #1
   25878:	add	ip, sp, #88	; 0x58
   2587c:	add	ip, ip, r2, lsl #3
   25880:	add	r6, r6, r0
   25884:	mov	r2, r7
   25888:	strd	r6, [sp, #16]
   2588c:	str	r8, [ip, #-72]	; 0xffffffb8
   25890:	str	r0, [ip, #-68]	; 0xffffffbc
   25894:	cmp	lr, #0
   25898:	beq	25928 <flatcc_builder_default_alloc@@Base+0x4c8>
   2589c:	cmp	r3, #0
   258a0:	subne	r5, r1, r5
   258a4:	addne	lr, r3, lr
   258a8:	addne	r5, r5, r6
   258ac:	bne	258d8 <flatcc_builder_default_alloc@@Base+0x478>
   258b0:	b	25990 <flatcc_builder_default_alloc@@Base+0x530>
   258b4:	sub	ip, r5, r1
   258b8:	add	r0, ip, r0
   258bc:	str	r0, [r1, #-4]
   258c0:	ldrb	r0, [r3]
   258c4:	cmp	r0, #0
   258c8:	beq	25974 <flatcc_builder_default_alloc@@Base+0x514>
   258cc:	add	r3, r3, #1
   258d0:	cmp	r3, lr
   258d4:	beq	25924 <flatcc_builder_default_alloc@@Base+0x4c4>
   258d8:	ldr	r0, [r1], #4
   258dc:	cmp	r0, #0
   258e0:	bne	258b4 <flatcc_builder_default_alloc@@Base+0x454>
   258e4:	ldrb	r0, [r3]
   258e8:	cmp	r0, #0
   258ec:	beq	258cc <flatcc_builder_default_alloc@@Base+0x46c>
   258f0:	movw	r1, #26932	; 0x6934
   258f4:	movt	r1, #4
   258f8:	ldr	r3, [pc, #228]	; 259e4 <flatcc_builder_default_alloc@@Base+0x584>
   258fc:	movw	r0, #27128	; 0x69f8
   25900:	movt	r0, #4
   25904:	movw	r2, #1461	; 0x5b5
   25908:	bl	145f0 <__assert_fail@plt>
   2590c:	sub	r0, ip, r1
   25910:	add	r3, r3, #1
   25914:	add	r0, r0, r5
   25918:	cmp	lr, r3
   2591c:	str	r0, [r1, #-4]
   25920:	bne	25998 <flatcc_builder_default_alloc@@Base+0x538>
   25924:	ldr	r5, [r4, #136]	; 0x88
   25928:	sub	r7, r5, r6
   2592c:	cmp	r7, r5
   25930:	bge	259c4 <flatcc_builder_default_alloc@@Base+0x564>
   25934:	mov	r3, r7
   25938:	add	r1, sp, #24
   2593c:	str	r6, [sp]
   25940:	ldr	r0, [r4, #36]	; 0x24
   25944:	ldr	r5, [r4, #44]	; 0x2c
   25948:	blx	r5
   2594c:	cmp	r0, #0
   25950:	bne	259c0 <flatcc_builder_default_alloc@@Base+0x560>
   25954:	mov	r0, r7
   25958:	str	r7, [r4, #136]	; 0x88
   2595c:	add	sp, sp, #88	; 0x58
   25960:	ldrd	r4, [sp]
   25964:	ldrd	r6, [sp, #8]
   25968:	ldr	r8, [sp, #16]
   2596c:	add	sp, sp, #20
   25970:	pop	{pc}		; (ldr pc, [sp], #4)
   25974:	movw	r1, #26932	; 0x6934
   25978:	movt	r1, #4
   2597c:	ldr	r3, [pc, #96]	; 259e4 <flatcc_builder_default_alloc@@Base+0x584>
   25980:	movw	r0, #27112	; 0x69e8
   25984:	movt	r0, #4
   25988:	movw	r2, #1457	; 0x5b1
   2598c:	bl	145f0 <__assert_fail@plt>
   25990:	sub	ip, r1, r5
   25994:	add	ip, ip, r6
   25998:	ldr	r5, [r1], #4
   2599c:	cmp	r5, #0
   259a0:	bne	2590c <flatcc_builder_default_alloc@@Base+0x4ac>
   259a4:	movw	r1, #26932	; 0x6934
   259a8:	movt	r1, #4
   259ac:	ldr	r3, [pc, #48]	; 259e4 <flatcc_builder_default_alloc@@Base+0x584>
   259b0:	movw	r0, #27124	; 0x69f4
   259b4:	movt	r0, #4
   259b8:	movw	r2, #1463	; 0x5b7
   259bc:	bl	145f0 <__assert_fail@plt>
   259c0:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   259c4:	movw	r1, #26932	; 0x6934
   259c8:	movt	r1, #4
   259cc:	ldr	r3, [pc, #20]	; 259e8 <flatcc_builder_default_alloc@@Base+0x588>
   259d0:	movw	r0, #27124	; 0x69f4
   259d4:	movt	r0, #4
   259d8:	movw	r2, #647	; 0x287
   259dc:	bl	145f0 <__assert_fail@plt>
   259e0:	andeq	r6, r4, ip, lsl #5
   259e4:	andeq	r6, r4, ip, lsl #9
   259e8:	andeq	r6, r4, r0, lsl r2

000259ec <flatcc_builder_flush_vtable_cache@@Base>:
   259ec:	ldr	r3, [r0, #116]	; 0x74
   259f0:	cmp	r3, #0
   259f4:	bxeq	lr
   259f8:	str	r4, [sp, #-8]!
   259fc:	mov	r4, r0
   25a00:	mov	r1, #0
   25a04:	ldr	r0, [r0, #92]	; 0x5c
   25a08:	ldr	r2, [r4, #96]	; 0x60
   25a0c:	str	lr, [sp, #4]
   25a10:	bl	1459c <memset@plt>
   25a14:	mov	r3, #16
   25a18:	mov	r2, #0
   25a1c:	strd	r2, [r4, #120]	; 0x78
   25a20:	ldr	r4, [sp]
   25a24:	add	sp, sp, #4
   25a28:	pop	{pc}		; (ldr pc, [sp], #4)

00025a2c <flatcc_builder_custom_init@@Base>:
   25a2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25a30:	mov	r5, r3
   25a34:	mov	r4, r0
   25a38:	strd	r6, [sp, #8]
   25a3c:	mov	r6, r1
   25a40:	mov	r7, r2
   25a44:	mov	r1, #0
   25a48:	mov	r2, #232	; 0xe8
   25a4c:	str	r8, [sp, #16]
   25a50:	str	lr, [sp, #20]
   25a54:	ldr	r8, [sp, #24]
   25a58:	bl	1459c <memset@plt>
   25a5c:	cmp	r6, #0
   25a60:	beq	25a9c <flatcc_builder_custom_init@@Base+0x70>
   25a64:	cmp	r5, #0
   25a68:	movw	r3, #21600	; 0x5460
   25a6c:	movt	r3, #2
   25a70:	str	r7, [r4, #36]	; 0x24
   25a74:	mov	r0, #0
   25a78:	moveq	r5, r3
   25a7c:	str	r8, [r4, #40]	; 0x28
   25a80:	str	r6, [r4, #44]	; 0x2c
   25a84:	str	r5, [r4, #48]	; 0x30
   25a88:	ldrd	r4, [sp]
   25a8c:	ldrd	r6, [sp, #8]
   25a90:	ldr	r8, [sp, #16]
   25a94:	add	sp, sp, #20
   25a98:	pop	{pc}		; (ldr pc, [sp], #4)
   25a9c:	mov	r3, #1
   25aa0:	movw	r6, #45468	; 0xb19c
   25aa4:	movt	r6, #2
   25aa8:	add	r7, r4, #188	; 0xbc
   25aac:	str	r3, [r4, #184]	; 0xb8
   25ab0:	b	25a64 <flatcc_builder_custom_init@@Base+0x38>

00025ab4 <flatcc_builder_init@@Base>:
   25ab4:	mov	r2, #232	; 0xe8
   25ab8:	mov	r1, #0
   25abc:	str	r4, [sp, #-8]!
   25ac0:	str	lr, [sp, #4]
   25ac4:	bl	1459c <memset@plt>
   25ac8:	mov	r3, r0
   25acc:	movw	r2, #21600	; 0x5460
   25ad0:	movt	r2, #2
   25ad4:	mov	r0, #1
   25ad8:	ldr	r4, [sp]
   25adc:	add	ip, r3, #188	; 0xbc
   25ae0:	movw	r1, #45468	; 0xb19c
   25ae4:	movt	r1, #2
   25ae8:	add	sp, sp, #4
   25aec:	str	ip, [r3, #36]	; 0x24
   25af0:	str	r1, [r3, #44]	; 0x2c
   25af4:	str	r2, [r3, #48]	; 0x30
   25af8:	str	r0, [r3, #184]	; 0xb8
   25afc:	mov	r0, #0
   25b00:	pop	{pc}		; (ldr pc, [sp], #4)

00025b04 <flatcc_builder_custom_reset@@Base>:
   25b04:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25b08:	mov	r5, #0
   25b0c:	mov	r4, r0
   25b10:	strd	r6, [sp, #8]
   25b14:	mov	r6, r0
   25b18:	strd	r8, [sp, #16]
   25b1c:	mov	r8, r1
   25b20:	mov	r9, r2
   25b24:	str	lr, [sp, #24]
   25b28:	sub	sp, sp, #12
   25b2c:	b	25b7c <flatcc_builder_custom_reset@@Base+0x78>
   25b30:	cmp	r5, #5
   25b34:	cmpne	r9, #0
   25b38:	beq	25b60 <flatcc_builder_custom_reset@@Base+0x5c>
   25b3c:	mov	r3, #1
   25b40:	str	r5, [sp]
   25b44:	mov	r2, r3
   25b48:	ldr	r0, [r6, #40]	; 0x28
   25b4c:	ldr	r7, [r6, #48]	; 0x30
   25b50:	blx	r7
   25b54:	cmp	r0, #0
   25b58:	bne	25c64 <flatcc_builder_custom_reset@@Base+0x160>
   25b5c:	ldr	r0, [r4, #52]	; 0x34
   25b60:	mov	r1, #0
   25b64:	ldr	r2, [r4, #56]	; 0x38
   25b68:	bl	1459c <memset@plt>
   25b6c:	add	r5, r5, #1
   25b70:	add	r4, r4, #8
   25b74:	cmp	r5, #8
   25b78:	beq	25bb4 <flatcc_builder_custom_reset@@Base+0xb0>
   25b7c:	ldr	r0, [r4, #52]	; 0x34
   25b80:	add	r1, r4, #52	; 0x34
   25b84:	cmp	r0, #0
   25b88:	bne	25b30 <flatcc_builder_custom_reset@@Base+0x2c>
   25b8c:	ldr	r3, [r4, #56]	; 0x38
   25b90:	cmp	r3, #0
   25b94:	beq	25b6c <flatcc_builder_custom_reset@@Base+0x68>
   25b98:	movw	r1, #26932	; 0x6934
   25b9c:	movt	r1, #4
   25ba0:	ldr	r3, [pc, #196]	; 25c6c <flatcc_builder_custom_reset@@Base+0x168>
   25ba4:	movw	r0, #27144	; 0x6a08
   25ba8:	movt	r0, #4
   25bac:	movw	r2, #434	; 0x1b2
   25bb0:	bl	145f0 <__assert_fail@plt>
   25bb4:	mov	r2, #0
   25bb8:	ldr	r0, [r6, #52]	; 0x34
   25bbc:	ldr	r3, [r6, #124]	; 0x7c
   25bc0:	ldr	r1, [r6, #60]	; 0x3c
   25bc4:	str	r0, [r6, #4]
   25bc8:	str	r2, [r6, #120]	; 0x78
   25bcc:	cmp	r3, r2
   25bd0:	ldr	r2, [r6, #76]	; 0x4c
   25bd4:	movne	r3, #16
   25bd8:	strne	r3, [r6, #124]	; 0x7c
   25bdc:	mov	r3, #0
   25be0:	cmp	r8, r3
   25be4:	str	r2, [r6]
   25be8:	str	r1, [r6, #16]
   25bec:	str	r3, [r6, #20]
   25bf0:	str	r3, [r6, #24]
   25bf4:	str	r3, [r6, #32]
   25bf8:	strh	r3, [r6, #128]	; 0x80
   25bfc:	str	r3, [r6, #136]	; 0x88
   25c00:	str	r3, [r6, #140]	; 0x8c
   25c04:	str	r3, [r6, #148]	; 0x94
   25c08:	str	r3, [r6, #152]	; 0x98
   25c0c:	str	r3, [r6, #156]	; 0x9c
   25c10:	str	r3, [r6, #160]	; 0xa0
   25c14:	bne	25c3c <flatcc_builder_custom_reset@@Base+0x138>
   25c18:	ldr	r0, [r6, #184]	; 0xb8
   25c1c:	cmp	r0, #0
   25c20:	bne	25c54 <flatcc_builder_custom_reset@@Base+0x150>
   25c24:	add	sp, sp, #12
   25c28:	ldrd	r4, [sp]
   25c2c:	ldrd	r6, [sp, #8]
   25c30:	ldrd	r8, [sp, #16]
   25c34:	add	sp, sp, #24
   25c38:	pop	{pc}		; (ldr pc, [sp], #4)
   25c3c:	ldr	r0, [r6, #184]	; 0xb8
   25c40:	str	r3, [r6, #172]	; 0xac
   25c44:	str	r3, [r6, #176]	; 0xb0
   25c48:	str	r3, [r6, #180]	; 0xb4
   25c4c:	cmp	r0, #0
   25c50:	beq	25c24 <flatcc_builder_custom_reset@@Base+0x120>
   25c54:	add	r0, r6, #188	; 0xbc
   25c58:	bl	2b048 <flatcc_emitter_reset@@Base>
   25c5c:	mov	r0, #0
   25c60:	b	25c24 <flatcc_builder_custom_reset@@Base+0x120>
   25c64:	mvn	r0, #0
   25c68:	b	25c24 <flatcc_builder_custom_reset@@Base+0x120>
   25c6c:	andeq	r6, r4, ip, lsr #9

00025c70 <flatcc_builder_reset@@Base>:
   25c70:	mov	r2, #0
   25c74:	mov	r1, r2
   25c78:	b	25b04 <flatcc_builder_custom_reset@@Base>

00025c7c <flatcc_builder_clear@@Base>:
   25c7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25c80:	mov	r4, #0
   25c84:	add	r5, r0, #52	; 0x34
   25c88:	strd	r6, [sp, #8]
   25c8c:	mov	r6, r0
   25c90:	str	lr, [sp, #16]
   25c94:	sub	sp, sp, #12
   25c98:	mov	r3, #0
   25c9c:	mov	r1, r5
   25ca0:	str	r4, [sp]
   25ca4:	mov	r2, r3
   25ca8:	add	r4, r4, #1
   25cac:	ldr	r0, [r6, #40]	; 0x28
   25cb0:	add	r5, r5, #8
   25cb4:	ldr	r7, [r6, #48]	; 0x30
   25cb8:	blx	r7
   25cbc:	cmp	r4, #8
   25cc0:	bne	25c98 <flatcc_builder_clear@@Base+0x1c>
   25cc4:	ldr	r3, [r6, #184]	; 0xb8
   25cc8:	cmp	r3, #0
   25ccc:	bne	25cf4 <flatcc_builder_clear@@Base+0x78>
   25cd0:	mov	r0, r6
   25cd4:	mov	r2, #232	; 0xe8
   25cd8:	mov	r1, #0
   25cdc:	add	sp, sp, #12
   25ce0:	ldrd	r4, [sp]
   25ce4:	ldrd	r6, [sp, #8]
   25ce8:	ldr	lr, [sp, #16]
   25cec:	add	sp, sp, #20
   25cf0:	b	1459c <memset@plt>
   25cf4:	add	r0, r6, #188	; 0xbc
   25cf8:	bl	2b11c <flatcc_emitter_clear@@Base>
   25cfc:	b	25cd0 <flatcc_builder_clear@@Base+0x54>

00025d00 <flatcc_builder_enter_user_frame_ptr@@Base>:
   25d00:	strd	r4, [sp, #-20]!	; 0xffffffec
   25d04:	add	r4, r1, #3
   25d08:	mov	r5, r0
   25d0c:	ldr	r3, [r0, #112]	; 0x70
   25d10:	bic	r4, r4, #3
   25d14:	strd	r6, [sp, #8]
   25d18:	add	r4, r4, #4
   25d1c:	ldr	r6, [r0, #228]	; 0xe4
   25d20:	str	lr, [sp, #16]
   25d24:	sub	sp, sp, #12
   25d28:	add	r2, r6, r4
   25d2c:	cmp	r2, r3
   25d30:	bls	25d58 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   25d34:	mov	ip, #7
   25d38:	add	r1, r0, #108	; 0x6c
   25d3c:	ldr	r0, [r0, #40]	; 0x28
   25d40:	mov	r3, #0
   25d44:	str	ip, [sp]
   25d48:	ldr	r7, [r5, #48]	; 0x30
   25d4c:	blx	r7
   25d50:	cmp	r0, #0
   25d54:	bne	25dac <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   25d58:	ldr	r7, [r5, #108]	; 0x6c
   25d5c:	adds	r3, r7, r6
   25d60:	moveq	r0, r3
   25d64:	beq	25d98 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   25d68:	mov	r2, r4
   25d6c:	mov	r0, r3
   25d70:	mov	r1, #0
   25d74:	bl	1459c <memset@plt>
   25d78:	ldr	r2, [r5, #224]	; 0xe0
   25d7c:	add	r0, r0, #4
   25d80:	str	r2, [r7, r6]
   25d84:	ldr	r3, [r5, #228]	; 0xe4
   25d88:	add	r4, r3, r4
   25d8c:	add	r3, r3, #4
   25d90:	str	r3, [r5, #224]	; 0xe0
   25d94:	str	r4, [r5, #228]	; 0xe4
   25d98:	add	sp, sp, #12
   25d9c:	ldrd	r4, [sp]
   25da0:	ldrd	r6, [sp, #8]
   25da4:	add	sp, sp, #16
   25da8:	pop	{pc}		; (ldr pc, [sp], #4)
   25dac:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

00025db0 <flatcc_builder_enter_user_frame@@Base>:
   25db0:	strd	r4, [sp, #-20]!	; 0xffffffec
   25db4:	add	r4, r1, #3
   25db8:	mov	r5, r0
   25dbc:	ldr	r3, [r0, #112]	; 0x70
   25dc0:	bic	r4, r4, #3
   25dc4:	strd	r6, [sp, #8]
   25dc8:	add	r4, r4, #4
   25dcc:	ldr	r6, [r0, #228]	; 0xe4
   25dd0:	str	lr, [sp, #16]
   25dd4:	sub	sp, sp, #12
   25dd8:	add	r2, r6, r4
   25ddc:	cmp	r2, r3
   25de0:	bls	25e08 <flatcc_builder_enter_user_frame@@Base+0x58>
   25de4:	mov	ip, #7
   25de8:	add	r1, r0, #108	; 0x6c
   25dec:	ldr	r0, [r0, #40]	; 0x28
   25df0:	mov	r3, #0
   25df4:	str	ip, [sp]
   25df8:	ldr	r7, [r5, #48]	; 0x30
   25dfc:	blx	r7
   25e00:	cmp	r0, #0
   25e04:	bne	25e50 <flatcc_builder_enter_user_frame@@Base+0xa0>
   25e08:	ldr	r7, [r5, #108]	; 0x6c
   25e0c:	adds	r0, r7, r6
   25e10:	beq	25e3c <flatcc_builder_enter_user_frame@@Base+0x8c>
   25e14:	mov	r2, r4
   25e18:	mov	r1, #0
   25e1c:	bl	1459c <memset@plt>
   25e20:	ldr	r3, [r5, #224]	; 0xe0
   25e24:	str	r3, [r7, r6]
   25e28:	ldr	r0, [r5, #228]	; 0xe4
   25e2c:	add	r4, r0, r4
   25e30:	add	r0, r0, #4
   25e34:	str	r0, [r5, #224]	; 0xe0
   25e38:	str	r4, [r5, #228]	; 0xe4
   25e3c:	add	sp, sp, #12
   25e40:	ldrd	r4, [sp]
   25e44:	ldrd	r6, [sp, #8]
   25e48:	add	sp, sp, #16
   25e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   25e50:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

00025e54 <flatcc_builder_exit_user_frame@@Base>:
   25e54:	ldr	r2, [r0, #224]	; 0xe0
   25e58:	cmp	r2, #0
   25e5c:	beq	25e84 <flatcc_builder_exit_user_frame@@Base+0x30>
   25e60:	mov	r3, r0
   25e64:	sub	r0, r2, #4
   25e68:	ldr	r1, [r3, #108]	; 0x6c
   25e6c:	str	r0, [r3, #228]	; 0xe4
   25e70:	add	r2, r1, r2
   25e74:	ldr	r2, [r2, #-4]
   25e78:	mov	r0, r2
   25e7c:	str	r2, [r3, #224]	; 0xe0
   25e80:	bx	lr
   25e84:	str	r4, [sp, #-8]!
   25e88:	str	lr, [sp, #4]
   25e8c:	bl	2564c <flatcc_builder_default_alloc@@Base+0x1ec>

00025e90 <flatcc_builder_exit_user_frame_at@@Base>:
   25e90:	ldr	r2, [r0, #224]	; 0xe0
   25e94:	str	r4, [sp, #-8]!
   25e98:	str	lr, [sp, #4]
   25e9c:	cmp	r2, r1
   25ea0:	bcc	25edc <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   25ea4:	cmp	r1, #0
   25ea8:	mov	r3, r0
   25eac:	str	r1, [r0, #224]	; 0xe0
   25eb0:	beq	25ef8 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   25eb4:	ldr	r2, [r3, #108]	; 0x6c
   25eb8:	sub	r0, r1, #4
   25ebc:	ldr	r4, [sp]
   25ec0:	add	sp, sp, #4
   25ec4:	str	r0, [r3, #228]	; 0xe4
   25ec8:	add	r1, r2, r1
   25ecc:	ldr	r2, [r1, #-4]
   25ed0:	mov	r0, r2
   25ed4:	str	r2, [r3, #224]	; 0xe0
   25ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   25edc:	movw	r1, #26932	; 0x6934
   25ee0:	movt	r1, #4
   25ee4:	ldr	r3, [pc, #16]	; 25efc <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   25ee8:	movw	r0, #27164	; 0x6a1c
   25eec:	movt	r0, #4
   25ef0:	movw	r2, #551	; 0x227
   25ef4:	bl	145f0 <__assert_fail@plt>
   25ef8:	bl	2564c <flatcc_builder_default_alloc@@Base+0x1ec>
   25efc:	andeq	r6, r4, r8, asr #9

00025f00 <flatcc_builder_get_current_user_frame@@Base>:
   25f00:	ldr	r0, [r0, #224]	; 0xe0
   25f04:	bx	lr

00025f08 <flatcc_builder_get_user_frame_ptr@@Base>:
   25f08:	ldr	r0, [r0, #108]	; 0x6c
   25f0c:	add	r0, r0, r1
   25f10:	bx	lr

00025f14 <flatcc_builder_embed_buffer@@Base>:
   25f14:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25f18:	mov	r5, r0
   25f1c:	ldr	r0, [r0, #152]	; 0x98
   25f20:	strd	r6, [sp, #8]
   25f24:	mov	r7, r2
   25f28:	mov	r6, r3
   25f2c:	strd	r8, [sp, #16]
   25f30:	str	sl, [sp, #24]
   25f34:	str	lr, [sp, #28]
   25f38:	sub	sp, sp, #88	; 0x58
   25f3c:	ldrh	r4, [sp, #120]	; 0x78
   25f40:	ldr	r8, [sp, #124]	; 0x7c
   25f44:	cmp	r4, #4
   25f48:	movcc	r4, #4
   25f4c:	cmp	r1, #0
   25f50:	and	r8, r8, #2
   25f54:	bne	25f64 <flatcc_builder_embed_buffer@@Base+0x50>
   25f58:	ldrh	r1, [r5, #132]	; 0x84
   25f5c:	cmp	r1, #0
   25f60:	beq	25f84 <flatcc_builder_embed_buffer@@Base+0x70>
   25f64:	cmp	r1, r4
   25f68:	movcs	r4, r1
   25f6c:	cmp	r0, #0
   25f70:	bne	25f84 <flatcc_builder_embed_buffer@@Base+0x70>
   25f74:	ldr	r9, [r5, #140]	; 0x8c
   25f78:	sub	r1, r1, #1
   25f7c:	ands	r1, r1, r9
   25f80:	bne	260ac <flatcc_builder_embed_buffer@@Base+0x198>
   25f84:	ldr	r1, [r5, #136]	; 0x88
   25f88:	cmp	r8, #0
   25f8c:	sub	r4, r4, #1
   25f90:	movne	ip, #4
   25f94:	moveq	ip, #0
   25f98:	mov	r2, #0
   25f9c:	cmp	r0, r2
   25fa0:	str	r2, [sp, #16]
   25fa4:	sub	r3, r1, r6
   25fa8:	str	r2, [sp, #20]
   25fac:	sub	r3, r3, ip
   25fb0:	and	r4, r4, r3
   25fb4:	add	r3, r6, r4
   25fb8:	str	r3, [sp, #12]
   25fbc:	bne	2607c <flatcc_builder_embed_buffer@@Base+0x168>
   25fc0:	mov	lr, #2
   25fc4:	mov	r3, #1
   25fc8:	mov	r2, r0
   25fcc:	cmp	r6, #0
   25fd0:	beq	25ffc <flatcc_builder_embed_buffer@@Base+0xe8>
   25fd4:	add	r2, r2, #1
   25fd8:	add	ip, sp, #88	; 0x58
   25fdc:	add	ip, ip, r2, lsl #3
   25fe0:	add	r0, r0, r6
   25fe4:	mov	r2, r3
   25fe8:	str	r0, [sp, #16]
   25fec:	str	r7, [ip, #-72]	; 0xffffffb8
   25ff0:	str	r6, [ip, #-68]	; 0xffffffbc
   25ff4:	str	r3, [sp, #20]
   25ff8:	mov	r3, lr
   25ffc:	cmp	r4, #0
   26000:	beq	2602c <flatcc_builder_embed_buffer@@Base+0x118>
   26004:	ldr	lr, [pc, #312]	; 26144 <flatcc_builder_embed_buffer@@Base+0x230>
   26008:	add	r2, r2, #1
   2600c:	add	ip, sp, #88	; 0x58
   26010:	add	ip, ip, r2, lsl #3
   26014:	add	r0, r0, r4
   26018:	mov	r2, r3
   2601c:	str	r0, [sp, #16]
   26020:	str	lr, [ip, #-72]	; 0xffffffb8
   26024:	str	r4, [ip, #-68]	; 0xffffffbc
   26028:	str	r3, [sp, #20]
   2602c:	sub	r4, r1, r0
   26030:	cmp	r1, r4
   26034:	ble	26104 <flatcc_builder_embed_buffer@@Base+0x1f0>
   26038:	mov	r3, r4
   2603c:	add	r1, sp, #24
   26040:	str	r0, [sp]
   26044:	ldr	r0, [r5, #36]	; 0x24
   26048:	ldr	r6, [r5, #44]	; 0x2c
   2604c:	blx	r6
   26050:	cmp	r0, #0
   26054:	bne	26100 <flatcc_builder_embed_buffer@@Base+0x1ec>
   26058:	mov	r0, r4
   2605c:	str	r4, [r5, #136]	; 0x88
   26060:	add	sp, sp, #88	; 0x58
   26064:	ldrd	r4, [sp]
   26068:	ldrd	r6, [sp, #8]
   2606c:	ldrd	r8, [sp, #16]
   26070:	ldr	sl, [sp, #24]
   26074:	add	sp, sp, #28
   26078:	pop	{pc}		; (ldr pc, [sp], #4)
   2607c:	mov	ip, #4
   26080:	mov	r3, #1
   26084:	add	r8, sp, #12
   26088:	mov	r2, r3
   2608c:	mov	r0, ip
   26090:	mov	lr, #3
   26094:	str	ip, [sp, #16]
   26098:	str	r3, [sp, #20]
   2609c:	mov	r3, #2
   260a0:	str	r8, [sp, #24]
   260a4:	str	ip, [sp, #28]
   260a8:	b	25fcc <flatcc_builder_embed_buffer@@Base+0xb8>
   260ac:	ldr	r3, [pc, #144]	; 26144 <flatcc_builder_embed_buffer@@Base+0x230>
   260b0:	add	r0, r9, r1
   260b4:	mov	r2, #1
   260b8:	cmp	r9, r0
   260bc:	str	r1, [sp, #16]
   260c0:	str	r0, [r5, #140]	; 0x8c
   260c4:	strd	r2, [sp, #20]
   260c8:	str	r1, [sp, #28]
   260cc:	bgt	26120 <flatcc_builder_embed_buffer@@Base+0x20c>
   260d0:	mov	r3, r9
   260d4:	str	r1, [sp]
   260d8:	add	r1, sp, #24
   260dc:	ldr	r0, [r5, #36]	; 0x24
   260e0:	ldr	sl, [r5, #44]	; 0x2c
   260e4:	blx	sl
   260e8:	cmp	r0, #0
   260ec:	bne	26140 <flatcc_builder_embed_buffer@@Base+0x22c>
   260f0:	cmn	r9, #1
   260f4:	beq	2613c <flatcc_builder_embed_buffer@@Base+0x228>
   260f8:	ldr	r0, [r5, #152]	; 0x98
   260fc:	b	25f84 <flatcc_builder_embed_buffer@@Base+0x70>
   26100:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   26104:	movw	r1, #26932	; 0x6934
   26108:	movt	r1, #4
   2610c:	ldr	r3, [pc, #52]	; 26148 <flatcc_builder_embed_buffer@@Base+0x234>
   26110:	movw	r0, #27124	; 0x69f4
   26114:	movt	r0, #4
   26118:	movw	r2, #647	; 0x287
   2611c:	bl	145f0 <__assert_fail@plt>
   26120:	movw	r1, #26932	; 0x6934
   26124:	movt	r1, #4
   26128:	movw	r0, #27124	; 0x69f4
   2612c:	movt	r0, #4
   26130:	sub	r3, r3, #152	; 0x98
   26134:	movw	r2, #673	; 0x2a1
   26138:	bl	145f0 <__assert_fail@plt>
   2613c:	bl	255d4 <flatcc_builder_default_alloc@@Base+0x174>
   26140:	bl	255ac <flatcc_builder_default_alloc@@Base+0x14c>
   26144:	andeq	r6, r4, ip, lsl #5
   26148:	andeq	r6, r4, r0, lsl r2

0002614c <flatcc_builder_create_buffer@@Base>:
   2614c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26150:	mov	ip, #0
   26154:	mov	r5, r0
   26158:	strd	r6, [sp, #8]
   2615c:	mov	r7, r3
   26160:	strd	r8, [sp, #16]
   26164:	mov	r9, r1
   26168:	strd	sl, [sp, #24]
   2616c:	str	lr, [sp, #32]
   26170:	sub	sp, sp, #100	; 0x64
   26174:	ldrh	r4, [sp, #136]	; 0x88
   26178:	str	ip, [sp, #20]
   2617c:	ldr	r6, [sp, #140]	; 0x8c
   26180:	cmp	r4, #4
   26184:	movcc	r4, #4
   26188:	cmp	r2, #0
   2618c:	and	r8, r6, #1
   26190:	bne	261a0 <flatcc_builder_create_buffer@@Base+0x54>
   26194:	ldrh	r2, [r0, #132]	; 0x84
   26198:	cmp	r2, ip
   2619c:	beq	261c0 <flatcc_builder_create_buffer@@Base+0x74>
   261a0:	cmp	r2, r4
   261a4:	movcs	r4, r2
   261a8:	cmp	r8, #0
   261ac:	bne	261c0 <flatcc_builder_create_buffer@@Base+0x74>
   261b0:	ldr	sl, [r5, #140]	; 0x8c
   261b4:	sub	r2, r2, #1
   261b8:	ands	r1, r2, sl
   261bc:	bne	26354 <flatcc_builder_create_buffer@@Base+0x208>
   261c0:	ldrh	r3, [r5, #128]	; 0x80
   261c4:	ldr	r0, [r5, #136]	; 0x88
   261c8:	cmp	r3, r4
   261cc:	strhcc	r4, [r5, #128]	; 0x80
   261d0:	cmp	r9, #0
   261d4:	sub	r4, r4, #1
   261d8:	ldrne	r3, [r9]
   261dc:	ldreq	r1, [sp, #20]
   261e0:	movne	r1, r3
   261e4:	strne	r3, [sp, #20]
   261e8:	sub	r3, r0, #4
   261ec:	cmp	r1, #0
   261f0:	movne	r1, #4
   261f4:	tst	r6, #2
   261f8:	movne	r2, #4
   261fc:	moveq	r2, #0
   26200:	sub	r3, r3, r1
   26204:	ands	r6, r6, #3
   26208:	sub	r3, r3, r2
   2620c:	and	r4, r4, r3
   26210:	bne	2632c <flatcc_builder_create_buffer@@Base+0x1e0>
   26214:	mov	r3, r6
   26218:	mov	r9, #3
   2621c:	mov	lr, #2
   26220:	mov	r2, #1
   26224:	mov	ip, #4
   26228:	add	fp, sp, #96	; 0x60
   2622c:	add	r3, r3, #1
   26230:	str	ip, [sp, #24]
   26234:	add	r3, fp, r3, lsl #3
   26238:	add	sl, sp, #12
   2623c:	mov	fp, #4
   26240:	cmp	r1, #0
   26244:	strd	sl, [r3, #-72]	; 0xffffffb8
   26248:	str	r2, [sp, #28]
   2624c:	beq	2627c <flatcc_builder_create_buffer@@Base+0x130>
   26250:	add	r2, r2, #1
   26254:	add	r3, sp, #96	; 0x60
   26258:	add	r3, r3, r2, lsl #3
   2625c:	add	ip, ip, r1
   26260:	add	sl, sp, #20
   26264:	mov	r2, lr
   26268:	str	ip, [sp, #24]
   2626c:	str	sl, [r3, #-72]	; 0xffffffb8
   26270:	str	r1, [r3, #-68]	; 0xffffffbc
   26274:	str	lr, [sp, #28]
   26278:	mov	lr, r9
   2627c:	cmp	r4, #0
   26280:	beq	262ac <flatcc_builder_create_buffer@@Base+0x160>
   26284:	ldr	r1, [pc, #372]	; 26400 <flatcc_builder_create_buffer@@Base+0x2b4>
   26288:	add	r2, r2, #1
   2628c:	add	r3, sp, #96	; 0x60
   26290:	add	r3, r3, r2, lsl #3
   26294:	add	ip, ip, r4
   26298:	mov	r2, lr
   2629c:	str	ip, [sp, #24]
   262a0:	str	r1, [r3, #-72]	; 0xffffffb8
   262a4:	str	r4, [r3, #-68]	; 0xffffffbc
   262a8:	str	lr, [sp, #28]
   262ac:	sub	r4, r0, ip
   262b0:	cmp	r6, #0
   262b4:	mov	r1, r4
   262b8:	addne	r1, r4, #4
   262bc:	cmp	r8, #0
   262c0:	sub	r7, r7, r1
   262c4:	ldrne	r3, [r5, #144]	; 0x90
   262c8:	str	r7, [sp, #12]
   262cc:	ldreq	r3, [r5, #140]	; 0x8c
   262d0:	cmp	r0, r4
   262d4:	sub	r3, r3, r1
   262d8:	str	r3, [sp, #16]
   262dc:	ble	263a4 <flatcc_builder_create_buffer@@Base+0x258>
   262e0:	mov	r3, r4
   262e4:	add	r1, sp, #32
   262e8:	str	ip, [sp]
   262ec:	ldr	r0, [r5, #36]	; 0x24
   262f0:	ldr	r6, [r5, #44]	; 0x2c
   262f4:	blx	r6
   262f8:	cmp	r0, #0
   262fc:	bne	263c0 <flatcc_builder_create_buffer@@Base+0x274>
   26300:	cmp	r4, #0
   26304:	str	r4, [r5, #136]	; 0x88
   26308:	beq	263c4 <flatcc_builder_create_buffer@@Base+0x278>
   2630c:	mov	r0, r4
   26310:	add	sp, sp, #100	; 0x64
   26314:	ldrd	r4, [sp]
   26318:	ldrd	r6, [sp, #8]
   2631c:	ldrd	r8, [sp, #16]
   26320:	ldrd	sl, [sp, #24]
   26324:	add	sp, sp, #32
   26328:	pop	{pc}		; (ldr pc, [sp], #4)
   2632c:	mov	ip, #4
   26330:	add	r3, sp, #16
   26334:	mov	r9, ip
   26338:	mov	lr, #3
   2633c:	mov	r2, #2
   26340:	str	r3, [sp, #32]
   26344:	mov	r3, #1
   26348:	str	ip, [sp, #36]	; 0x24
   2634c:	mov	ip, #8
   26350:	b	26228 <flatcc_builder_create_buffer@@Base+0xdc>
   26354:	ldr	r3, [pc, #164]	; 26400 <flatcc_builder_create_buffer@@Base+0x2b4>
   26358:	add	r0, sl, r1
   2635c:	mov	r2, #1
   26360:	cmp	sl, r0
   26364:	str	r1, [sp, #24]
   26368:	str	r0, [r5, #140]	; 0x8c
   2636c:	strd	r2, [sp, #28]
   26370:	str	r1, [sp, #36]	; 0x24
   26374:	bgt	263e4 <flatcc_builder_create_buffer@@Base+0x298>
   26378:	mov	r3, sl
   2637c:	str	r1, [sp]
   26380:	add	r1, sp, #32
   26384:	ldr	r0, [r5, #36]	; 0x24
   26388:	ldr	fp, [r5, #44]	; 0x2c
   2638c:	blx	fp
   26390:	cmp	r0, #0
   26394:	bne	263e0 <flatcc_builder_create_buffer@@Base+0x294>
   26398:	cmn	sl, #1
   2639c:	bne	261c0 <flatcc_builder_create_buffer@@Base+0x74>
   263a0:	bl	255d4 <flatcc_builder_default_alloc@@Base+0x174>
   263a4:	movw	r1, #26932	; 0x6934
   263a8:	movt	r1, #4
   263ac:	ldr	r3, [pc, #80]	; 26404 <flatcc_builder_create_buffer@@Base+0x2b8>
   263b0:	movw	r0, #27124	; 0x69f4
   263b4:	movt	r0, #4
   263b8:	movw	r2, #647	; 0x287
   263bc:	bl	145f0 <__assert_fail@plt>
   263c0:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   263c4:	movw	r1, #26932	; 0x6934
   263c8:	movt	r1, #4
   263cc:	ldr	r3, [pc, #52]	; 26408 <flatcc_builder_create_buffer@@Base+0x2bc>
   263d0:	movw	r0, #27124	; 0x69f4
   263d4:	movt	r0, #4
   263d8:	mov	r2, #772	; 0x304
   263dc:	bl	145f0 <__assert_fail@plt>
   263e0:	bl	255ac <flatcc_builder_default_alloc@@Base+0x14c>
   263e4:	movw	r1, #26932	; 0x6934
   263e8:	movt	r1, #4
   263ec:	movw	r0, #27124	; 0x69f4
   263f0:	movt	r0, #4
   263f4:	sub	r3, r3, #152	; 0x98
   263f8:	movw	r2, #673	; 0x2a1
   263fc:	bl	145f0 <__assert_fail@plt>
   26400:	andeq	r6, r4, ip, lsl #5
   26404:	andeq	r6, r4, r0, lsl r2
   26408:	andeq	r6, r4, ip, ror #9

0002640c <flatcc_builder_create_struct@@Base>:
   2640c:	cmp	r3, #0
   26410:	strd	r4, [sp, #-16]!
   26414:	str	r6, [sp, #8]
   26418:	str	lr, [sp, #12]
   2641c:	sub	sp, sp, #80	; 0x50
   26420:	beq	26524 <flatcc_builder_create_struct@@Base+0x118>
   26424:	mov	r4, r0
   26428:	mov	r0, r2
   2642c:	ldrh	r2, [r4, #128]	; 0x80
   26430:	ldr	ip, [r4, #136]	; 0x88
   26434:	cmp	r2, r3
   26438:	mov	r2, #0
   2643c:	strhcc	r3, [r4, #128]	; 0x80
   26440:	sub	r5, ip, r0
   26444:	sub	r3, r3, #1
   26448:	cmp	r0, r2
   2644c:	and	r3, r3, r5
   26450:	str	r2, [sp, #8]
   26454:	str	r2, [sp, #12]
   26458:	bne	264d8 <flatcc_builder_create_struct@@Base+0xcc>
   2645c:	cmp	r3, #0
   26460:	movne	r1, r2
   26464:	movne	r0, r3
   26468:	movne	r2, #1
   2646c:	beq	26504 <flatcc_builder_create_struct@@Base+0xf8>
   26470:	ldr	lr, [pc, #200]	; 26540 <flatcc_builder_create_struct@@Base+0x134>
   26474:	add	r5, sp, #80	; 0x50
   26478:	add	r1, r1, #1
   2647c:	add	r1, r5, r1, lsl #3
   26480:	sub	r5, ip, r0
   26484:	str	r0, [sp, #8]
   26488:	str	r2, [sp, #12]
   2648c:	str	lr, [r1, #-72]	; 0xffffffb8
   26490:	str	r3, [r1, #-68]	; 0xffffffbc
   26494:	cmp	ip, r5
   26498:	ble	26504 <flatcc_builder_create_struct@@Base+0xf8>
   2649c:	mov	r3, r5
   264a0:	add	r1, sp, #16
   264a4:	str	r0, [sp]
   264a8:	ldr	r0, [r4, #36]	; 0x24
   264ac:	ldr	r6, [r4, #44]	; 0x2c
   264b0:	blx	r6
   264b4:	cmp	r0, #0
   264b8:	bne	26520 <flatcc_builder_create_struct@@Base+0x114>
   264bc:	mov	r0, r5
   264c0:	str	r5, [r4, #136]	; 0x88
   264c4:	add	sp, sp, #80	; 0x50
   264c8:	ldrd	r4, [sp]
   264cc:	ldr	r6, [sp, #8]
   264d0:	add	sp, sp, #12
   264d4:	pop	{pc}		; (ldr pc, [sp], #4)
   264d8:	mov	r2, #1
   264dc:	cmp	r3, #0
   264e0:	str	r0, [sp, #8]
   264e4:	str	r2, [sp, #12]
   264e8:	str	r1, [sp, #16]
   264ec:	movne	r1, r2
   264f0:	movne	r2, #2
   264f4:	str	r0, [sp, #20]
   264f8:	addne	r0, r0, r3
   264fc:	beq	26494 <flatcc_builder_create_struct@@Base+0x88>
   26500:	b	26470 <flatcc_builder_create_struct@@Base+0x64>
   26504:	movw	r1, #26932	; 0x6934
   26508:	movt	r1, #4
   2650c:	ldr	r3, [pc, #48]	; 26544 <flatcc_builder_create_struct@@Base+0x138>
   26510:	movw	r0, #27124	; 0x69f4
   26514:	movt	r0, #4
   26518:	movw	r2, #647	; 0x287
   2651c:	bl	145f0 <__assert_fail@plt>
   26520:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   26524:	movw	r1, #26932	; 0x6934
   26528:	movt	r1, #4
   2652c:	ldr	r3, [pc, #20]	; 26548 <flatcc_builder_create_struct@@Base+0x13c>
   26530:	movw	r0, #27196	; 0x6a3c
   26534:	movt	r0, #4
   26538:	movw	r2, #783	; 0x30f
   2653c:	bl	145f0 <__assert_fail@plt>
   26540:	andeq	r6, r4, ip, lsl #5
   26544:	andeq	r6, r4, r0, lsl r2
   26548:	andeq	r6, r4, ip, lsl #10

0002654c <flatcc_builder_start_buffer@@Base>:
   2654c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26550:	mov	r5, r1
   26554:	mov	r4, r0
   26558:	ldr	r1, [r0, #156]	; 0x9c
   2655c:	strd	r6, [sp, #8]
   26560:	mov	r6, r3
   26564:	mov	r7, r2
   26568:	ldr	r3, [r0, #160]	; 0xa0
   2656c:	strd	r8, [sp, #16]
   26570:	ldrh	r8, [r0, #128]	; 0x80
   26574:	add	r2, r1, #1
   26578:	strd	sl, [sp, #24]
   2657c:	str	lr, [sp, #32]
   26580:	sub	sp, sp, #12
   26584:	cmp	r2, r3
   26588:	str	r2, [r0, #156]	; 0x9c
   2658c:	ble	266d8 <flatcc_builder_start_buffer@@Base+0x18c>
   26590:	ldr	r3, [r0, #176]	; 0xb0
   26594:	cmp	r3, #0
   26598:	cmpgt	r2, r3
   2659c:	movgt	r3, #1
   265a0:	movle	r3, #0
   265a4:	bgt	266e8 <flatcc_builder_start_buffer@@Base+0x19c>
   265a8:	add	r1, r1, r1, lsl #3
   265ac:	ldr	r0, [r0, #88]	; 0x58
   265b0:	lsl	r9, r1, #2
   265b4:	add	r2, r9, #36	; 0x24
   265b8:	cmp	r2, r0
   265bc:	bls	265e0 <flatcc_builder_start_buffer@@Base+0x94>
   265c0:	mov	ip, #4
   265c4:	add	r1, r4, #84	; 0x54
   265c8:	ldr	r0, [r4, #40]	; 0x28
   265cc:	str	ip, [sp]
   265d0:	ldr	sl, [r4, #48]	; 0x30
   265d4:	blx	sl
   265d8:	cmp	r0, #0
   265dc:	bne	266f0 <flatcc_builder_start_buffer@@Base+0x1a4>
   265e0:	ldr	r3, [r4, #84]	; 0x54
   265e4:	add	r3, r3, r9
   265e8:	cmp	r3, #0
   265ec:	str	r3, [r4, #32]
   265f0:	beq	266e8 <flatcc_builder_start_buffer@@Base+0x19c>
   265f4:	ldr	r2, [r4, #88]	; 0x58
   265f8:	movw	r0, #36409	; 0x8e39
   265fc:	movt	r0, #14563	; 0x38e3
   26600:	ldr	r1, [r4, #176]	; 0xb0
   26604:	umull	r0, r2, r0, r2
   26608:	lsr	r2, r2, #3
   2660c:	cmp	r1, #0
   26610:	cmpgt	r2, r1
   26614:	movgt	r2, r1
   26618:	str	r2, [r4, #160]	; 0xa0
   2661c:	ldr	sl, [pc, #208]	; 266f4 <flatcc_builder_start_buffer@@Base+0x1a8>
   26620:	mov	r0, #0
   26624:	mvn	lr, #3
   26628:	cmp	r5, r0
   2662c:	ldr	r2, [r4, #20]
   26630:	ldr	ip, [r4, #28]
   26634:	moveq	r5, sl
   26638:	ldrh	r9, [r4, #130]	; 0x82
   2663c:	ldrh	fp, [r4, #132]	; 0x84
   26640:	ldr	r1, [r4, #148]	; 0x94
   26644:	ldr	sl, [r4, #152]	; 0x98
   26648:	str	r2, [r3, #8]
   2664c:	add	r2, r2, ip
   26650:	add	r2, r2, #7
   26654:	strh	r9, [r3, #12]
   26658:	bic	r2, r2, #7
   2665c:	strh	r8, [r4, #130]	; 0x82
   26660:	ldrh	r8, [r4, #164]	; 0xa4
   26664:	ldr	r9, [r4, #136]	; 0x88
   26668:	stm	r3, {ip, lr}
   2666c:	mov	ip, #1
   26670:	str	r0, [r4, #20]
   26674:	str	r2, [r4, #28]
   26678:	add	r2, r1, ip
   2667c:	strh	ip, [r4, #128]	; 0x80
   26680:	ldr	lr, [r4, #144]	; 0x90
   26684:	strh	fp, [r3, #34]	; 0x22
   26688:	strh	r7, [r4, #132]	; 0x84
   2668c:	ldr	r7, [r4, #168]	; 0xa8
   26690:	strh	r8, [r3, #32]
   26694:	strh	r6, [r4, #164]	; 0xa4
   26698:	str	lr, [r3, #20]
   2669c:	str	sl, [r3, #28]
   266a0:	str	r9, [r4, #144]	; 0x90
   266a4:	str	r2, [r4, #148]	; 0x94
   266a8:	str	r1, [r4, #152]	; 0x98
   266ac:	str	r7, [r3, #16]
   266b0:	ldr	r2, [r5]
   266b4:	str	r2, [r4, #168]	; 0xa8
   266b8:	strh	ip, [r3, #14]
   266bc:	add	sp, sp, #12
   266c0:	ldrd	r4, [sp]
   266c4:	ldrd	r6, [sp, #8]
   266c8:	ldrd	r8, [sp, #16]
   266cc:	ldrd	sl, [sp, #24]
   266d0:	add	sp, sp, #32
   266d4:	pop	{pc}		; (ldr pc, [sp], #4)
   266d8:	ldr	r3, [r0, #32]
   266dc:	add	r3, r3, #36	; 0x24
   266e0:	str	r3, [r0, #32]
   266e4:	b	2661c <flatcc_builder_start_buffer@@Base+0xd0>
   266e8:	mvn	r0, #0
   266ec:	b	266bc <flatcc_builder_start_buffer@@Base+0x170>
   266f0:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>
   266f4:	andeq	r6, r4, ip, lsl #5

000266f8 <flatcc_builder_end_buffer@@Base>:
   266f8:	ldr	ip, [r0, #32]
   266fc:	strd	r4, [sp, #-16]!
   26700:	mov	r4, r0
   26704:	ldrh	r2, [r0, #164]	; 0xa4
   26708:	ldr	r0, [r0, #152]	; 0x98
   2670c:	ldrh	ip, [ip, #14]
   26710:	and	r2, r2, #2
   26714:	str	r6, [sp, #8]
   26718:	str	lr, [sp, #12]
   2671c:	sub	sp, sp, #8
   26720:	cmp	r0, #0
   26724:	moveq	r0, r2
   26728:	orrne	r0, r2, #1
   2672c:	cmp	ip, #1
   26730:	bne	26818 <flatcc_builder_end_buffer@@Base+0x120>
   26734:	ldrh	r2, [r4, #132]	; 0x84
   26738:	mov	r3, r1
   2673c:	add	r1, r4, #168	; 0xa8
   26740:	ldrh	ip, [r4, #128]	; 0x80
   26744:	cmp	r2, ip
   26748:	movhi	ip, r2
   2674c:	strhhi	r2, [r4, #128]	; 0x80
   26750:	str	ip, [sp]
   26754:	str	r0, [sp, #4]
   26758:	mov	r0, r4
   2675c:	bl	2614c <flatcc_builder_create_buffer@@Base>
   26760:	subs	r5, r0, #0
   26764:	beq	26800 <flatcc_builder_end_buffer@@Base+0x108>
   26768:	mov	r1, #0
   2676c:	ldr	r0, [r4, #16]
   26770:	ldr	r3, [r4, #32]
   26774:	ldr	r2, [r4, #20]
   26778:	ldrh	lr, [r3, #32]
   2677c:	ldr	ip, [r3, #16]
   26780:	ldr	r6, [r3, #20]
   26784:	ldr	r3, [r3, #28]
   26788:	str	r6, [r4, #144]	; 0x90
   2678c:	strh	lr, [r4, #164]	; 0xa4
   26790:	str	r3, [r4, #152]	; 0x98
   26794:	str	ip, [r4, #168]	; 0xa8
   26798:	bl	1459c <memset@plt>
   2679c:	ldr	r3, [r4, #32]
   267a0:	ldr	r0, [r4, #60]	; 0x3c
   267a4:	ldr	r2, [r4, #64]	; 0x40
   267a8:	ldr	ip, [r3]
   267ac:	ldmib	r3, {r1, lr}
   267b0:	add	r0, r0, ip
   267b4:	sub	r2, r2, ip
   267b8:	str	r0, [r4, #16]
   267bc:	cmp	r2, r1
   267c0:	ldrh	r0, [r4, #128]	; 0x80
   267c4:	movcs	r2, r1
   267c8:	str	lr, [r4, #20]
   267cc:	str	ip, [r4, #28]
   267d0:	ldrh	ip, [r4, #130]	; 0x82
   267d4:	str	r2, [r4, #24]
   267d8:	ldr	r2, [r4, #156]	; 0x9c
   267dc:	str	r1, [r3, #4]
   267e0:	cmp	r0, ip
   267e4:	sub	r0, r3, #36	; 0x24
   267e8:	strhcc	ip, [r4, #128]	; 0x80
   267ec:	ldrh	r1, [r3, #12]
   267f0:	sub	r3, r2, #1
   267f4:	str	r0, [r4, #32]
   267f8:	strh	r1, [r4, #130]	; 0x82
   267fc:	str	r3, [r4, #156]	; 0x9c
   26800:	mov	r0, r5
   26804:	add	sp, sp, #8
   26808:	ldrd	r4, [sp]
   2680c:	ldr	r6, [sp, #8]
   26810:	add	sp, sp, #12
   26814:	pop	{pc}		; (ldr pc, [sp], #4)
   26818:	movw	r1, #26932	; 0x6934
   2681c:	movt	r1, #4
   26820:	ldr	r3, [pc, #12]	; 26834 <flatcc_builder_end_buffer@@Base+0x13c>
   26824:	movw	r0, #27208	; 0x6a48
   26828:	movt	r0, #4
   2682c:	movw	r2, #838	; 0x346
   26830:	bl	145f0 <__assert_fail@plt>
   26834:	andeq	r6, r4, ip, lsr #10

00026838 <flatcc_builder_start_struct@@Base>:
   26838:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2683c:	mov	r5, r1
   26840:	mov	r4, r0
   26844:	ldr	r1, [r0, #156]	; 0x9c
   26848:	ldr	r3, [r0, #160]	; 0xa0
   2684c:	strd	r6, [sp, #8]
   26850:	mov	r6, r2
   26854:	str	r8, [sp, #16]
   26858:	add	r2, r1, #1
   2685c:	str	lr, [sp, #20]
   26860:	sub	sp, sp, #8
   26864:	cmp	r2, r3
   26868:	str	r2, [r0, #156]	; 0x9c
   2686c:	ble	2698c <flatcc_builder_start_struct@@Base+0x154>
   26870:	ldr	r3, [r0, #176]	; 0xb0
   26874:	cmp	r3, #0
   26878:	cmpgt	r2, r3
   2687c:	movgt	r3, #1
   26880:	movle	r3, #0
   26884:	bgt	269f8 <flatcc_builder_start_struct@@Base+0x1c0>
   26888:	add	r1, r1, r1, lsl #3
   2688c:	ldr	r0, [r0, #88]	; 0x58
   26890:	lsl	r7, r1, #2
   26894:	add	r2, r7, #36	; 0x24
   26898:	cmp	r2, r0
   2689c:	bls	268c0 <flatcc_builder_start_struct@@Base+0x88>
   268a0:	mov	ip, #4
   268a4:	add	r1, r4, #84	; 0x54
   268a8:	ldr	r0, [r4, #40]	; 0x28
   268ac:	str	ip, [sp]
   268b0:	ldr	r8, [r4, #48]	; 0x30
   268b4:	blx	r8
   268b8:	cmp	r0, #0
   268bc:	bne	26a00 <flatcc_builder_start_struct@@Base+0x1c8>
   268c0:	ldr	r1, [r4, #84]	; 0x54
   268c4:	add	r1, r1, r7
   268c8:	cmp	r1, #0
   268cc:	str	r1, [r4, #32]
   268d0:	beq	269f8 <flatcc_builder_start_struct@@Base+0x1c0>
   268d4:	ldr	r3, [r4, #88]	; 0x58
   268d8:	movw	r0, #36409	; 0x8e39
   268dc:	movt	r0, #14563	; 0x38e3
   268e0:	ldr	r2, [r4, #176]	; 0xb0
   268e4:	umull	r0, r3, r0, r3
   268e8:	lsr	r3, r3, #3
   268ec:	cmp	r2, #0
   268f0:	cmpgt	r3, r2
   268f4:	movgt	r3, r2
   268f8:	str	r3, [r4, #160]	; 0xa0
   268fc:	ldr	r3, [r4, #20]
   26900:	mvn	lr, #3
   26904:	ldr	ip, [r4, #28]
   26908:	ldrh	r7, [r4, #130]	; 0x82
   2690c:	ldr	r2, [r4, #64]	; 0x40
   26910:	ldr	r0, [r4, #60]	; 0x3c
   26914:	str	r3, [r1, #8]
   26918:	add	r3, r3, ip
   2691c:	add	r3, r3, #7
   26920:	strh	r7, [r1, #12]
   26924:	mov	r7, #0
   26928:	bic	r3, r3, #7
   2692c:	strh	r6, [r4, #130]	; 0x82
   26930:	mvn	r6, #3
   26934:	sub	r2, r2, r3
   26938:	stm	r1, {ip, lr}
   2693c:	mov	ip, #2
   26940:	cmp	r2, lr
   26944:	add	r0, r0, r3
   26948:	str	r7, [r4, #20]
   2694c:	movhi	r2, lr
   26950:	str	r3, [r4, #28]
   26954:	strh	ip, [r1, #14]
   26958:	strls	r2, [r4, #24]
   2695c:	strhi	lr, [r4, #24]
   26960:	cmp	r5, r2
   26964:	str	r0, [r4, #16]
   26968:	str	r6, [r1, #4]
   2696c:	str	r5, [r4, #20]
   26970:	bcs	2699c <flatcc_builder_start_struct@@Base+0x164>
   26974:	add	sp, sp, #8
   26978:	ldrd	r4, [sp]
   2697c:	ldrd	r6, [sp, #8]
   26980:	ldr	r8, [sp, #16]
   26984:	add	sp, sp, #20
   26988:	pop	{pc}		; (ldr pc, [sp], #4)
   2698c:	ldr	r1, [r0, #32]
   26990:	add	r1, r1, #36	; 0x24
   26994:	str	r1, [r0, #32]
   26998:	b	268fc <flatcc_builder_start_struct@@Base+0xc4>
   2699c:	mov	ip, #1
   269a0:	add	r1, r4, #60	; 0x3c
   269a4:	ldr	r0, [r4, #40]	; 0x28
   269a8:	add	r2, r5, ip
   269ac:	add	r2, r2, r3
   269b0:	mov	r3, ip
   269b4:	str	ip, [sp]
   269b8:	ldr	r5, [r4, #48]	; 0x30
   269bc:	blx	r5
   269c0:	cmp	r0, #0
   269c4:	bne	269f8 <flatcc_builder_start_struct@@Base+0x1c0>
   269c8:	ldr	r0, [r4, #28]
   269cc:	ldr	r2, [r4, #32]
   269d0:	ldr	r3, [r4, #64]	; 0x40
   269d4:	ldr	r1, [r4, #60]	; 0x3c
   269d8:	sub	r3, r3, r0
   269dc:	cmp	r3, r6
   269e0:	movhi	r3, r6
   269e4:	add	r0, r1, r0
   269e8:	str	r0, [r4, #16]
   269ec:	str	r3, [r4, #24]
   269f0:	str	r6, [r2, #4]
   269f4:	b	26974 <flatcc_builder_start_struct@@Base+0x13c>
   269f8:	mov	r0, #0
   269fc:	b	26974 <flatcc_builder_start_struct@@Base+0x13c>
   26a00:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

00026a04 <flatcc_builder_struct_edit@@Base>:
   26a04:	ldr	r0, [r0, #16]
   26a08:	bx	lr

00026a0c <flatcc_builder_end_struct@@Base>:
   26a0c:	ldr	r3, [r0, #32]
   26a10:	strd	r4, [sp, #-16]!
   26a14:	ldrh	r3, [r3, #14]
   26a18:	str	r6, [sp, #8]
   26a1c:	str	lr, [sp, #12]
   26a20:	sub	sp, sp, #80	; 0x50
   26a24:	cmp	r3, #2
   26a28:	bne	26bd0 <flatcc_builder_end_struct@@Base+0x1c4>
   26a2c:	ldrh	r3, [r0, #130]	; 0x82
   26a30:	mov	r4, r0
   26a34:	ldr	r1, [r0, #16]
   26a38:	ldr	r0, [r0, #20]
   26a3c:	cmp	r3, #0
   26a40:	beq	26bb4 <flatcc_builder_end_struct@@Base+0x1a8>
   26a44:	ldrh	r2, [r4, #128]	; 0x80
   26a48:	ldr	ip, [r4, #136]	; 0x88
   26a4c:	cmp	r2, r3
   26a50:	mov	r2, #0
   26a54:	strhcc	r3, [r4, #128]	; 0x80
   26a58:	sub	r5, ip, r0
   26a5c:	sub	r3, r3, #1
   26a60:	cmp	r0, r2
   26a64:	and	r3, r3, r5
   26a68:	str	r2, [sp, #8]
   26a6c:	str	r2, [sp, #12]
   26a70:	bne	26b68 <flatcc_builder_end_struct@@Base+0x15c>
   26a74:	cmp	r3, #0
   26a78:	movne	r1, r2
   26a7c:	movne	r0, r3
   26a80:	movne	r2, #1
   26a84:	beq	26b94 <flatcc_builder_end_struct@@Base+0x188>
   26a88:	ldr	lr, [pc, #348]	; 26bec <flatcc_builder_end_struct@@Base+0x1e0>
   26a8c:	add	r5, sp, #80	; 0x50
   26a90:	add	r1, r1, #1
   26a94:	add	r1, r5, r1, lsl #3
   26a98:	sub	r5, ip, r0
   26a9c:	str	r0, [sp, #8]
   26aa0:	str	r2, [sp, #12]
   26aa4:	str	lr, [r1, #-72]	; 0xffffffb8
   26aa8:	str	r3, [r1, #-68]	; 0xffffffbc
   26aac:	cmp	ip, r5
   26ab0:	ble	26b94 <flatcc_builder_end_struct@@Base+0x188>
   26ab4:	add	r1, sp, #16
   26ab8:	mov	r3, r5
   26abc:	str	r0, [sp]
   26ac0:	ldr	r0, [r4, #36]	; 0x24
   26ac4:	ldr	r6, [r4, #44]	; 0x2c
   26ac8:	blx	r6
   26acc:	subs	r1, r0, #0
   26ad0:	bne	26bb0 <flatcc_builder_end_struct@@Base+0x1a4>
   26ad4:	cmp	r5, #0
   26ad8:	str	r5, [r4, #136]	; 0x88
   26adc:	beq	26b50 <flatcc_builder_end_struct@@Base+0x144>
   26ae0:	ldr	r0, [r4, #16]
   26ae4:	ldr	r2, [r4, #20]
   26ae8:	bl	1459c <memset@plt>
   26aec:	ldr	r3, [r4, #32]
   26af0:	ldr	r0, [r4, #60]	; 0x3c
   26af4:	ldr	r2, [r4, #64]	; 0x40
   26af8:	ldr	ip, [r3]
   26afc:	ldmib	r3, {r1, lr}
   26b00:	add	r0, r0, ip
   26b04:	sub	r2, r2, ip
   26b08:	str	r0, [r4, #16]
   26b0c:	cmp	r2, r1
   26b10:	ldrh	r0, [r4, #128]	; 0x80
   26b14:	movcs	r2, r1
   26b18:	str	lr, [r4, #20]
   26b1c:	str	ip, [r4, #28]
   26b20:	ldrh	ip, [r4, #130]	; 0x82
   26b24:	str	r2, [r4, #24]
   26b28:	ldr	r2, [r4, #156]	; 0x9c
   26b2c:	str	r1, [r3, #4]
   26b30:	cmp	r0, ip
   26b34:	sub	r0, r3, #36	; 0x24
   26b38:	strhcc	ip, [r4, #128]	; 0x80
   26b3c:	ldrh	r1, [r3, #12]
   26b40:	sub	r3, r2, #1
   26b44:	str	r0, [r4, #32]
   26b48:	strh	r1, [r4, #130]	; 0x82
   26b4c:	str	r3, [r4, #156]	; 0x9c
   26b50:	mov	r0, r5
   26b54:	add	sp, sp, #80	; 0x50
   26b58:	ldrd	r4, [sp]
   26b5c:	ldr	r6, [sp, #8]
   26b60:	add	sp, sp, #12
   26b64:	pop	{pc}		; (ldr pc, [sp], #4)
   26b68:	mov	r2, #1
   26b6c:	cmp	r3, #0
   26b70:	str	r0, [sp, #8]
   26b74:	str	r2, [sp, #12]
   26b78:	str	r1, [sp, #16]
   26b7c:	movne	r1, r2
   26b80:	movne	r2, #2
   26b84:	str	r0, [sp, #20]
   26b88:	addne	r0, r0, r3
   26b8c:	beq	26aac <flatcc_builder_end_struct@@Base+0xa0>
   26b90:	b	26a88 <flatcc_builder_end_struct@@Base+0x7c>
   26b94:	movw	r1, #26932	; 0x6934
   26b98:	movt	r1, #4
   26b9c:	ldr	r3, [pc, #76]	; 26bf0 <flatcc_builder_end_struct@@Base+0x1e4>
   26ba0:	movw	r0, #27124	; 0x69f4
   26ba4:	movt	r0, #4
   26ba8:	movw	r2, #647	; 0x287
   26bac:	bl	145f0 <__assert_fail@plt>
   26bb0:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   26bb4:	movw	r1, #26932	; 0x6934
   26bb8:	movt	r1, #4
   26bbc:	ldr	r3, [pc, #48]	; 26bf4 <flatcc_builder_end_struct@@Base+0x1e8>
   26bc0:	movw	r0, #27196	; 0x6a3c
   26bc4:	movt	r0, #4
   26bc8:	movw	r2, #783	; 0x30f
   26bcc:	bl	145f0 <__assert_fail@plt>
   26bd0:	movw	r1, #26932	; 0x6934
   26bd4:	movt	r1, #4
   26bd8:	ldr	r3, [pc, #24]	; 26bf8 <flatcc_builder_end_struct@@Base+0x1ec>
   26bdc:	movw	r0, #27252	; 0x6a74
   26be0:	movt	r0, #4
   26be4:	mov	r2, #872	; 0x368
   26be8:	bl	145f0 <__assert_fail@plt>
   26bec:	andeq	r6, r4, ip, lsl #5
   26bf0:	andeq	r6, r4, r0, lsl r2
   26bf4:	andeq	r6, r4, ip, lsl #10
   26bf8:	andeq	r6, r4, r8, asr #10

00026bfc <flatcc_builder_extend_vector@@Base>:
   26bfc:	ldr	ip, [r0, #32]
   26c00:	strd	r4, [sp, #-20]!	; 0xffffffec
   26c04:	mov	r4, r0
   26c08:	ldr	r3, [ip, #20]
   26c0c:	ldr	r0, [ip, #24]
   26c10:	strd	r6, [sp, #8]
   26c14:	str	lr, [sp, #16]
   26c18:	sub	sp, sp, #12
   26c1c:	adds	r3, r1, r3
   26c20:	movcs	r5, #1
   26c24:	movcc	r5, #0
   26c28:	cmp	r0, r3
   26c2c:	orrcc	r5, r5, #1
   26c30:	cmp	r5, #0
   26c34:	bne	26ce0 <flatcc_builder_extend_vector@@Base+0xe4>
   26c38:	ldr	r2, [ip, #16]
   26c3c:	ldr	r6, [r4, #20]
   26c40:	str	r3, [ip, #20]
   26c44:	ldr	r3, [r4, #24]
   26c48:	mla	r2, r2, r1, r6
   26c4c:	cmp	r2, r3
   26c50:	str	r2, [r4, #20]
   26c54:	bcs	26c74 <flatcc_builder_extend_vector@@Base+0x78>
   26c58:	ldr	r0, [r4, #16]
   26c5c:	add	r0, r0, r6
   26c60:	add	sp, sp, #12
   26c64:	ldrd	r4, [sp]
   26c68:	ldrd	r6, [sp, #8]
   26c6c:	add	sp, sp, #16
   26c70:	pop	{pc}		; (ldr pc, [sp], #4)
   26c74:	ldr	ip, [r4, #28]
   26c78:	mov	r0, #1
   26c7c:	add	r1, r4, #60	; 0x3c
   26c80:	mov	r3, r0
   26c84:	str	r0, [sp]
   26c88:	ldr	r7, [r4, #48]	; 0x30
   26c8c:	add	ip, ip, r0
   26c90:	ldr	r0, [r4, #40]	; 0x28
   26c94:	add	r2, ip, r2
   26c98:	blx	r7
   26c9c:	cmp	r0, #0
   26ca0:	bne	26cd8 <flatcc_builder_extend_vector@@Base+0xdc>
   26ca4:	ldr	r2, [r4, #28]
   26ca8:	ldr	r0, [r4, #60]	; 0x3c
   26cac:	ldr	r3, [r4, #64]	; 0x40
   26cb0:	add	r0, r0, r2
   26cb4:	sub	r3, r3, r2
   26cb8:	mvn	r2, #3
   26cbc:	str	r0, [r4, #16]
   26cc0:	cmn	r3, #4
   26cc4:	mvnhi	r3, #3
   26cc8:	str	r3, [r4, #24]
   26ccc:	ldr	r3, [r4, #32]
   26cd0:	str	r2, [r3, #4]
   26cd4:	b	26c5c <flatcc_builder_extend_vector@@Base+0x60>
   26cd8:	mov	r0, r5
   26cdc:	b	26c60 <flatcc_builder_extend_vector@@Base+0x64>
   26ce0:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>

00026ce4 <flatcc_builder_vector_push@@Base>:
   26ce4:	ldr	r3, [r0, #32]
   26ce8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26cec:	ldrh	r2, [r3, #14]
   26cf0:	strd	r6, [sp, #8]
   26cf4:	str	r8, [sp, #16]
   26cf8:	str	lr, [sp, #20]
   26cfc:	sub	sp, sp, #8
   26d00:	cmp	r2, #4
   26d04:	bne	26e08 <flatcc_builder_vector_push@@Base+0x124>
   26d08:	mov	r6, r1
   26d0c:	ldr	r2, [r3, #20]
   26d10:	ldr	r1, [r3, #24]
   26d14:	cmp	r2, r1
   26d18:	bhi	26dec <flatcc_builder_vector_push@@Base+0x108>
   26d1c:	add	r2, r2, #1
   26d20:	ldr	r5, [r3, #16]
   26d24:	mov	r4, r0
   26d28:	ldr	r7, [r0, #20]
   26d2c:	str	r2, [r3, #20]
   26d30:	ldr	r3, [r0, #24]
   26d34:	add	ip, r5, r7
   26d38:	cmp	ip, r3
   26d3c:	str	ip, [r0, #20]
   26d40:	bcs	26d80 <flatcc_builder_vector_push@@Base+0x9c>
   26d44:	ldr	r3, [r0, #16]
   26d48:	adds	r3, r3, r7
   26d4c:	beq	26d64 <flatcc_builder_vector_push@@Base+0x80>
   26d50:	mov	r0, r3
   26d54:	mov	r2, r5
   26d58:	mov	r1, r6
   26d5c:	bl	14524 <memcpy@plt>
   26d60:	mov	r3, r0
   26d64:	mov	r0, r3
   26d68:	add	sp, sp, #8
   26d6c:	ldrd	r4, [sp]
   26d70:	ldrd	r6, [sp, #8]
   26d74:	ldr	r8, [sp, #16]
   26d78:	add	sp, sp, #20
   26d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   26d80:	ldr	r2, [r4, #28]
   26d84:	mov	r0, #1
   26d88:	add	r1, r4, #60	; 0x3c
   26d8c:	mov	r3, r0
   26d90:	str	r0, [sp]
   26d94:	ldr	r8, [r4, #48]	; 0x30
   26d98:	add	r2, r2, r0
   26d9c:	ldr	r0, [r4, #40]	; 0x28
   26da0:	add	r2, r2, ip
   26da4:	blx	r8
   26da8:	cmp	r0, #0
   26dac:	bne	26de4 <flatcc_builder_vector_push@@Base+0x100>
   26db0:	ldr	r1, [r4, #28]
   26db4:	ldr	r3, [r4, #60]	; 0x3c
   26db8:	ldr	r2, [r4, #64]	; 0x40
   26dbc:	add	r3, r3, r1
   26dc0:	sub	r2, r2, r1
   26dc4:	mvn	r1, #3
   26dc8:	str	r3, [r4, #16]
   26dcc:	cmn	r2, #4
   26dd0:	mvnhi	r2, #3
   26dd4:	str	r2, [r4, #24]
   26dd8:	ldr	r2, [r4, #32]
   26ddc:	str	r1, [r2, #4]
   26de0:	b	26d48 <flatcc_builder_vector_push@@Base+0x64>
   26de4:	mov	r3, #0
   26de8:	b	26d64 <flatcc_builder_vector_push@@Base+0x80>
   26dec:	movw	r1, #26932	; 0x6934
   26df0:	movt	r1, #4
   26df4:	ldr	r3, [pc, #40]	; 26e24 <flatcc_builder_vector_push@@Base+0x140>
   26df8:	movw	r0, #27340	; 0x6acc
   26dfc:	movt	r0, #4
   26e00:	mov	r2, #908	; 0x38c
   26e04:	bl	145f0 <__assert_fail@plt>
   26e08:	movw	r1, #26932	; 0x6934
   26e0c:	movt	r1, #4
   26e10:	ldr	r3, [pc, #12]	; 26e24 <flatcc_builder_vector_push@@Base+0x140>
   26e14:	movw	r0, #27296	; 0x6aa0
   26e18:	movt	r0, #4
   26e1c:	movw	r2, #907	; 0x38b
   26e20:	bl	145f0 <__assert_fail@plt>
   26e24:	andeq	r6, r4, r4, ror #10

00026e28 <flatcc_builder_append_vector@@Base>:
   26e28:	strd	r4, [sp, #-28]!	; 0xffffffe4
   26e2c:	mov	r5, r0
   26e30:	ldr	r0, [r0, #32]
   26e34:	ldrh	r3, [r0, #14]
   26e38:	strd	r6, [sp, #8]
   26e3c:	strd	r8, [sp, #16]
   26e40:	str	lr, [sp, #24]
   26e44:	sub	sp, sp, #12
   26e48:	cmp	r3, #4
   26e4c:	bne	26f4c <flatcc_builder_append_vector@@Base+0x124>
   26e50:	mov	r6, r1
   26e54:	ldr	r1, [r0, #20]
   26e58:	ldr	r4, [r0, #24]
   26e5c:	adds	r1, r2, r1
   26e60:	movcs	r3, #1
   26e64:	movcc	r3, #0
   26e68:	cmp	r4, r1
   26e6c:	movcs	r4, r3
   26e70:	orrcc	r4, r3, #1
   26e74:	cmp	r4, #0
   26e78:	bne	26f48 <flatcc_builder_append_vector@@Base+0x120>
   26e7c:	ldr	r7, [r0, #16]
   26e80:	ldr	r8, [r5, #20]
   26e84:	ldr	r3, [r5, #24]
   26e88:	mul	r7, r7, r2
   26e8c:	str	r1, [r0, #20]
   26e90:	add	ip, r7, r8
   26e94:	cmp	ip, r3
   26e98:	str	ip, [r5, #20]
   26e9c:	bcs	26edc <flatcc_builder_append_vector@@Base+0xb4>
   26ea0:	ldr	r3, [r5, #16]
   26ea4:	adds	r3, r3, r8
   26ea8:	beq	26ec0 <flatcc_builder_append_vector@@Base+0x98>
   26eac:	mov	r0, r3
   26eb0:	mov	r2, r7
   26eb4:	mov	r1, r6
   26eb8:	bl	14524 <memcpy@plt>
   26ebc:	mov	r3, r0
   26ec0:	mov	r0, r3
   26ec4:	add	sp, sp, #12
   26ec8:	ldrd	r4, [sp]
   26ecc:	ldrd	r6, [sp, #8]
   26ed0:	ldrd	r8, [sp, #16]
   26ed4:	add	sp, sp, #24
   26ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   26edc:	ldr	r2, [r5, #28]
   26ee0:	mov	r0, #1
   26ee4:	add	r1, r5, #60	; 0x3c
   26ee8:	mov	r3, r0
   26eec:	str	r0, [sp]
   26ef0:	ldr	r9, [r5, #48]	; 0x30
   26ef4:	add	r2, r2, r0
   26ef8:	ldr	r0, [r5, #40]	; 0x28
   26efc:	add	r2, r2, ip
   26f00:	blx	r9
   26f04:	cmp	r0, #0
   26f08:	bne	26f40 <flatcc_builder_append_vector@@Base+0x118>
   26f0c:	ldr	r1, [r5, #28]
   26f10:	ldr	r3, [r5, #60]	; 0x3c
   26f14:	ldr	r2, [r5, #64]	; 0x40
   26f18:	add	r3, r3, r1
   26f1c:	sub	r2, r2, r1
   26f20:	mvn	r1, #3
   26f24:	str	r3, [r5, #16]
   26f28:	cmn	r2, #4
   26f2c:	mvnhi	r2, #3
   26f30:	str	r2, [r5, #24]
   26f34:	ldr	r2, [r5, #32]
   26f38:	str	r1, [r2, #4]
   26f3c:	b	26ea4 <flatcc_builder_append_vector@@Base+0x7c>
   26f40:	mov	r3, r4
   26f44:	b	26ec0 <flatcc_builder_append_vector@@Base+0x98>
   26f48:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   26f4c:	movw	r1, #26932	; 0x6934
   26f50:	movt	r1, #4
   26f54:	ldr	r3, [pc, #12]	; 26f68 <flatcc_builder_append_vector@@Base+0x140>
   26f58:	movw	r0, #27296	; 0x6aa0
   26f5c:	movt	r0, #4
   26f60:	movw	r2, #915	; 0x393
   26f64:	bl	145f0 <__assert_fail@plt>
   26f68:	andeq	r6, r4, r0, lsl #11

00026f6c <flatcc_builder_extend_offset_vector@@Base>:
   26f6c:	ldr	ip, [r0, #32]
   26f70:	strd	r4, [sp, #-20]!	; 0xffffffec
   26f74:	mov	r4, r0
   26f78:	ldr	r3, [ip, #20]
   26f7c:	strd	r6, [sp, #8]
   26f80:	str	lr, [sp, #16]
   26f84:	sub	sp, sp, #12
   26f88:	adds	r3, r1, r3
   26f8c:	movcs	r2, #1
   26f90:	movcc	r2, #0
   26f94:	cmn	r3, #-1073741823	; 0xc0000001
   26f98:	movls	r0, #0
   26f9c:	movhi	r0, #1
   26fa0:	orrs	r5, r2, r0
   26fa4:	bne	2704c <flatcc_builder_extend_offset_vector@@Base+0xe0>
   26fa8:	ldr	r6, [r4, #20]
   26fac:	str	r3, [ip, #20]
   26fb0:	ldr	r3, [r4, #24]
   26fb4:	add	r2, r6, r1, lsl #2
   26fb8:	cmp	r2, r3
   26fbc:	str	r2, [r4, #20]
   26fc0:	bcs	26fe0 <flatcc_builder_extend_offset_vector@@Base+0x74>
   26fc4:	ldr	r0, [r4, #16]
   26fc8:	add	r0, r0, r6
   26fcc:	add	sp, sp, #12
   26fd0:	ldrd	r4, [sp]
   26fd4:	ldrd	r6, [sp, #8]
   26fd8:	add	sp, sp, #16
   26fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   26fe0:	ldr	ip, [r4, #28]
   26fe4:	mov	r0, #1
   26fe8:	add	r1, r4, #60	; 0x3c
   26fec:	mov	r3, r0
   26ff0:	str	r0, [sp]
   26ff4:	ldr	r7, [r4, #48]	; 0x30
   26ff8:	add	ip, ip, r0
   26ffc:	ldr	r0, [r4, #40]	; 0x28
   27000:	add	r2, ip, r2
   27004:	blx	r7
   27008:	cmp	r0, #0
   2700c:	bne	27044 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   27010:	ldr	r2, [r4, #28]
   27014:	ldr	r0, [r4, #60]	; 0x3c
   27018:	ldr	r3, [r4, #64]	; 0x40
   2701c:	add	r0, r0, r2
   27020:	sub	r3, r3, r2
   27024:	mvn	r2, #3
   27028:	str	r0, [r4, #16]
   2702c:	cmn	r3, #4
   27030:	mvnhi	r3, #3
   27034:	str	r3, [r4, #24]
   27038:	ldr	r3, [r4, #32]
   2703c:	str	r2, [r3, #4]
   27040:	b	26fc8 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   27044:	mov	r0, r5
   27048:	b	26fcc <flatcc_builder_extend_offset_vector@@Base+0x60>
   2704c:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>

00027050 <flatcc_builder_offset_vector_push@@Base>:
   27050:	ldr	r2, [r0, #32]
   27054:	strd	r4, [sp, #-20]!	; 0xffffffec
   27058:	ldrh	r3, [r2, #14]
   2705c:	strd	r6, [sp, #8]
   27060:	str	lr, [sp, #16]
   27064:	sub	sp, sp, #12
   27068:	cmp	r3, #5
   2706c:	bne	27130 <flatcc_builder_offset_vector_push@@Base+0xe0>
   27070:	ldr	r3, [r2, #20]
   27074:	cmn	r3, #-1073741823	; 0xc0000001
   27078:	beq	27128 <flatcc_builder_offset_vector_push@@Base+0xd8>
   2707c:	ldr	r5, [r0, #20]
   27080:	mov	r6, r1
   27084:	add	r3, r3, #1
   27088:	mov	r4, r0
   2708c:	ldr	r1, [r0, #24]
   27090:	str	r3, [r2, #20]
   27094:	add	r3, r5, #4
   27098:	cmp	r3, r1
   2709c:	str	r3, [r0, #20]
   270a0:	bcs	270c4 <flatcc_builder_offset_vector_push@@Base+0x74>
   270a4:	ldr	r3, [r0, #16]
   270a8:	adds	r0, r3, r5
   270ac:	strne	r6, [r3, r5]
   270b0:	add	sp, sp, #12
   270b4:	ldrd	r4, [sp]
   270b8:	ldrd	r6, [sp, #8]
   270bc:	add	sp, sp, #16
   270c0:	pop	{pc}		; (ldr pc, [sp], #4)
   270c4:	ldr	r2, [r4, #28]
   270c8:	mov	r0, #1
   270cc:	add	r1, r4, #60	; 0x3c
   270d0:	mov	r3, r0
   270d4:	str	r0, [sp]
   270d8:	ldr	r0, [r4, #40]	; 0x28
   270dc:	add	r2, r5, r2
   270e0:	ldr	r7, [r4, #48]	; 0x30
   270e4:	add	r2, r2, #5
   270e8:	blx	r7
   270ec:	cmp	r0, #0
   270f0:	bne	27128 <flatcc_builder_offset_vector_push@@Base+0xd8>
   270f4:	ldr	r1, [r4, #28]
   270f8:	ldr	r3, [r4, #60]	; 0x3c
   270fc:	ldr	r2, [r4, #64]	; 0x40
   27100:	add	r3, r3, r1
   27104:	sub	r2, r2, r1
   27108:	mvn	r1, #3
   2710c:	str	r3, [r4, #16]
   27110:	cmn	r2, #4
   27114:	mvnhi	r2, #3
   27118:	str	r2, [r4, #24]
   2711c:	ldr	r2, [r4, #32]
   27120:	str	r1, [r2, #4]
   27124:	b	270a8 <flatcc_builder_offset_vector_push@@Base+0x58>
   27128:	mov	r0, #0
   2712c:	b	270b0 <flatcc_builder_offset_vector_push@@Base+0x60>
   27130:	movw	r1, #26932	; 0x6934
   27134:	movt	r1, #4
   27138:	ldr	r3, [pc, #12]	; 2714c <flatcc_builder_offset_vector_push@@Base+0xfc>
   2713c:	movw	r0, #27404	; 0x6b0c
   27140:	movt	r0, #4
   27144:	movw	r2, #934	; 0x3a6
   27148:	bl	145f0 <__assert_fail@plt>
   2714c:	andeq	r6, r4, r0, lsr #11

00027150 <flatcc_builder_append_offset_vector@@Base>:
   27150:	strd	r4, [sp, #-28]!	; 0xffffffe4
   27154:	mov	r5, r0
   27158:	ldr	r0, [r0, #32]
   2715c:	ldrh	r3, [r0, #14]
   27160:	strd	r6, [sp, #8]
   27164:	strd	r8, [sp, #16]
   27168:	str	lr, [sp, #24]
   2716c:	sub	sp, sp, #12
   27170:	cmp	r3, #5
   27174:	bne	2726c <flatcc_builder_append_offset_vector@@Base+0x11c>
   27178:	ldr	r3, [r0, #20]
   2717c:	mov	r7, r1
   27180:	adds	r1, r2, r3
   27184:	movcs	r4, #1
   27188:	movcc	r4, #0
   2718c:	cmn	r1, #-1073741823	; 0xc0000001
   27190:	movls	r3, #0
   27194:	movhi	r3, #1
   27198:	orrs	r4, r4, r3
   2719c:	bne	27268 <flatcc_builder_append_offset_vector@@Base+0x118>
   271a0:	ldr	r8, [r5, #20]
   271a4:	lsl	r6, r2, #2
   271a8:	ldr	r3, [r5, #24]
   271ac:	str	r1, [r0, #20]
   271b0:	add	ip, r6, r8
   271b4:	cmp	ip, r3
   271b8:	str	ip, [r5, #20]
   271bc:	bcs	271fc <flatcc_builder_append_offset_vector@@Base+0xac>
   271c0:	ldr	r3, [r5, #16]
   271c4:	adds	r3, r3, r8
   271c8:	beq	271e0 <flatcc_builder_append_offset_vector@@Base+0x90>
   271cc:	mov	r0, r3
   271d0:	mov	r2, r6
   271d4:	mov	r1, r7
   271d8:	bl	14524 <memcpy@plt>
   271dc:	mov	r3, r0
   271e0:	mov	r0, r3
   271e4:	add	sp, sp, #12
   271e8:	ldrd	r4, [sp]
   271ec:	ldrd	r6, [sp, #8]
   271f0:	ldrd	r8, [sp, #16]
   271f4:	add	sp, sp, #24
   271f8:	pop	{pc}		; (ldr pc, [sp], #4)
   271fc:	ldr	r2, [r5, #28]
   27200:	mov	r0, #1
   27204:	add	r1, r5, #60	; 0x3c
   27208:	mov	r3, r0
   2720c:	str	r0, [sp]
   27210:	ldr	r9, [r5, #48]	; 0x30
   27214:	add	r2, r2, r0
   27218:	ldr	r0, [r5, #40]	; 0x28
   2721c:	add	r2, r2, ip
   27220:	blx	r9
   27224:	cmp	r0, #0
   27228:	bne	27260 <flatcc_builder_append_offset_vector@@Base+0x110>
   2722c:	ldr	r1, [r5, #28]
   27230:	ldr	r3, [r5, #60]	; 0x3c
   27234:	ldr	r2, [r5, #64]	; 0x40
   27238:	add	r3, r3, r1
   2723c:	sub	r2, r2, r1
   27240:	mvn	r1, #3
   27244:	str	r3, [r5, #16]
   27248:	cmn	r2, #4
   2724c:	mvnhi	r2, #3
   27250:	str	r2, [r5, #24]
   27254:	ldr	r2, [r5, #32]
   27258:	str	r1, [r2, #4]
   2725c:	b	271c4 <flatcc_builder_append_offset_vector@@Base+0x74>
   27260:	mov	r3, r4
   27264:	b	271e0 <flatcc_builder_append_offset_vector@@Base+0x90>
   27268:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   2726c:	movw	r1, #26932	; 0x6934
   27270:	movt	r1, #4
   27274:	ldr	r3, [pc, #12]	; 27288 <flatcc_builder_append_offset_vector@@Base+0x138>
   27278:	movw	r0, #27404	; 0x6b0c
   2727c:	movt	r0, #4
   27280:	mov	r2, #948	; 0x3b4
   27284:	bl	145f0 <__assert_fail@plt>
   27288:	andeq	r6, r4, r4, asr #11

0002728c <flatcc_builder_extend_string@@Base>:
   2728c:	ldr	r2, [r0, #32]
   27290:	strd	r4, [sp, #-16]!
   27294:	ldrh	r3, [r2, #14]
   27298:	str	r6, [sp, #8]
   2729c:	str	lr, [sp, #12]
   272a0:	sub	sp, sp, #8
   272a4:	cmp	r3, #6
   272a8:	bne	27364 <flatcc_builder_extend_string@@Base+0xd8>
   272ac:	ldr	r3, [r2, #20]
   272b0:	adds	r3, r1, r3
   272b4:	bcs	27360 <flatcc_builder_extend_string@@Base+0xd4>
   272b8:	ldr	r5, [r0, #20]
   272bc:	mov	r4, r0
   272c0:	str	r3, [r2, #20]
   272c4:	ldr	r3, [r0, #24]
   272c8:	add	r2, r1, r5
   272cc:	cmp	r2, r3
   272d0:	str	r2, [r0, #20]
   272d4:	bcs	272f4 <flatcc_builder_extend_string@@Base+0x68>
   272d8:	ldr	r0, [r0, #16]
   272dc:	add	r0, r0, r5
   272e0:	add	sp, sp, #8
   272e4:	ldrd	r4, [sp]
   272e8:	ldr	r6, [sp, #8]
   272ec:	add	sp, sp, #12
   272f0:	pop	{pc}		; (ldr pc, [sp], #4)
   272f4:	ldr	ip, [r4, #28]
   272f8:	mov	r0, #1
   272fc:	add	r1, r4, #60	; 0x3c
   27300:	mov	r3, r0
   27304:	str	r0, [sp]
   27308:	ldr	r6, [r4, #48]	; 0x30
   2730c:	add	ip, ip, r0
   27310:	ldr	r0, [r4, #40]	; 0x28
   27314:	add	r2, ip, r2
   27318:	blx	r6
   2731c:	cmp	r0, #0
   27320:	bne	27358 <flatcc_builder_extend_string@@Base+0xcc>
   27324:	ldr	r2, [r4, #28]
   27328:	ldr	r0, [r4, #60]	; 0x3c
   2732c:	ldr	r3, [r4, #64]	; 0x40
   27330:	add	r0, r0, r2
   27334:	sub	r3, r3, r2
   27338:	mvn	r2, #3
   2733c:	str	r0, [r4, #16]
   27340:	cmn	r3, #4
   27344:	mvnhi	r3, #3
   27348:	str	r3, [r4, #24]
   2734c:	ldr	r3, [r4, #32]
   27350:	str	r2, [r3, #4]
   27354:	b	272dc <flatcc_builder_extend_string@@Base+0x50>
   27358:	mov	r0, #0
   2735c:	b	272e0 <flatcc_builder_extend_string@@Base+0x54>
   27360:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   27364:	movw	r1, #26932	; 0x6934
   27368:	movt	r1, #4
   2736c:	ldr	r3, [pc, #12]	; 27380 <flatcc_builder_extend_string@@Base+0xf4>
   27370:	movw	r0, #27060	; 0x69b4
   27374:	movt	r0, #4
   27378:	movw	r2, #957	; 0x3bd
   2737c:	bl	145f0 <__assert_fail@plt>
   27380:	andeq	r6, r4, r8, ror #11

00027384 <flatcc_builder_append_string@@Base>:
   27384:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27388:	strd	r6, [sp, #8]
   2738c:	mov	r6, r1
   27390:	ldr	r1, [r0, #32]
   27394:	str	r8, [sp, #16]
   27398:	str	lr, [sp, #20]
   2739c:	sub	sp, sp, #8
   273a0:	ldrh	r3, [r1, #14]
   273a4:	cmp	r3, #6
   273a8:	bne	27488 <flatcc_builder_append_string@@Base+0x104>
   273ac:	ldr	r3, [r1, #20]
   273b0:	mov	r5, r2
   273b4:	adds	r3, r2, r3
   273b8:	bcs	27484 <flatcc_builder_append_string@@Base+0x100>
   273bc:	ldr	r7, [r0, #20]
   273c0:	mov	r4, r0
   273c4:	str	r3, [r1, #20]
   273c8:	ldr	r3, [r0, #24]
   273cc:	add	ip, r2, r7
   273d0:	cmp	ip, r3
   273d4:	str	ip, [r0, #20]
   273d8:	bcs	27418 <flatcc_builder_append_string@@Base+0x94>
   273dc:	ldr	r3, [r0, #16]
   273e0:	adds	r3, r3, r7
   273e4:	beq	273fc <flatcc_builder_append_string@@Base+0x78>
   273e8:	mov	r0, r3
   273ec:	mov	r2, r5
   273f0:	mov	r1, r6
   273f4:	bl	14524 <memcpy@plt>
   273f8:	mov	r3, r0
   273fc:	mov	r0, r3
   27400:	add	sp, sp, #8
   27404:	ldrd	r4, [sp]
   27408:	ldrd	r6, [sp, #8]
   2740c:	ldr	r8, [sp, #16]
   27410:	add	sp, sp, #20
   27414:	pop	{pc}		; (ldr pc, [sp], #4)
   27418:	ldr	r2, [r4, #28]
   2741c:	mov	r0, #1
   27420:	add	r1, r4, #60	; 0x3c
   27424:	mov	r3, r0
   27428:	str	r0, [sp]
   2742c:	ldr	r8, [r4, #48]	; 0x30
   27430:	add	r2, r2, r0
   27434:	ldr	r0, [r4, #40]	; 0x28
   27438:	add	r2, r2, ip
   2743c:	blx	r8
   27440:	cmp	r0, #0
   27444:	bne	2747c <flatcc_builder_append_string@@Base+0xf8>
   27448:	ldr	r1, [r4, #28]
   2744c:	ldr	r3, [r4, #60]	; 0x3c
   27450:	ldr	r2, [r4, #64]	; 0x40
   27454:	add	r3, r3, r1
   27458:	sub	r2, r2, r1
   2745c:	mvn	r1, #3
   27460:	str	r3, [r4, #16]
   27464:	cmn	r2, #4
   27468:	mvnhi	r2, #3
   2746c:	str	r2, [r4, #24]
   27470:	ldr	r2, [r4, #32]
   27474:	str	r1, [r2, #4]
   27478:	b	273e0 <flatcc_builder_append_string@@Base+0x5c>
   2747c:	mov	r3, #0
   27480:	b	273fc <flatcc_builder_append_string@@Base+0x78>
   27484:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   27488:	bl	25674 <flatcc_builder_default_alloc@@Base+0x214>

0002748c <flatcc_builder_append_string_str@@Base>:
   2748c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27490:	mov	r4, r0
   27494:	mov	r0, r1
   27498:	strd	r6, [sp, #8]
   2749c:	mov	r6, r1
   274a0:	str	r8, [sp, #16]
   274a4:	str	lr, [sp, #20]
   274a8:	sub	sp, sp, #8
   274ac:	bl	14578 <strlen@plt>
   274b0:	ldr	r2, [r4, #32]
   274b4:	ldrh	r3, [r2, #14]
   274b8:	cmp	r3, #6
   274bc:	bne	27598 <flatcc_builder_append_string_str@@Base+0x10c>
   274c0:	ldr	r3, [r2, #20]
   274c4:	mov	r5, r0
   274c8:	adds	r3, r0, r3
   274cc:	bcs	27594 <flatcc_builder_append_string_str@@Base+0x108>
   274d0:	ldr	r7, [r4, #20]
   274d4:	str	r3, [r2, #20]
   274d8:	ldr	r3, [r4, #24]
   274dc:	add	ip, r0, r7
   274e0:	cmp	ip, r3
   274e4:	str	ip, [r4, #20]
   274e8:	bcs	27528 <flatcc_builder_append_string_str@@Base+0x9c>
   274ec:	ldr	r3, [r4, #16]
   274f0:	adds	r3, r3, r7
   274f4:	beq	2750c <flatcc_builder_append_string_str@@Base+0x80>
   274f8:	mov	r0, r3
   274fc:	mov	r2, r5
   27500:	mov	r1, r6
   27504:	bl	14524 <memcpy@plt>
   27508:	mov	r3, r0
   2750c:	mov	r0, r3
   27510:	add	sp, sp, #8
   27514:	ldrd	r4, [sp]
   27518:	ldrd	r6, [sp, #8]
   2751c:	ldr	r8, [sp, #16]
   27520:	add	sp, sp, #20
   27524:	pop	{pc}		; (ldr pc, [sp], #4)
   27528:	ldr	r2, [r4, #28]
   2752c:	mov	r0, #1
   27530:	add	r1, r4, #60	; 0x3c
   27534:	mov	r3, r0
   27538:	str	r0, [sp]
   2753c:	ldr	r8, [r4, #48]	; 0x30
   27540:	add	r2, r2, r0
   27544:	ldr	r0, [r4, #40]	; 0x28
   27548:	add	r2, r2, ip
   2754c:	blx	r8
   27550:	cmp	r0, #0
   27554:	bne	2758c <flatcc_builder_append_string_str@@Base+0x100>
   27558:	ldr	r1, [r4, #28]
   2755c:	ldr	r3, [r4, #60]	; 0x3c
   27560:	ldr	r2, [r4, #64]	; 0x40
   27564:	add	r3, r3, r1
   27568:	sub	r2, r2, r1
   2756c:	mvn	r1, #3
   27570:	str	r3, [r4, #16]
   27574:	cmn	r2, #4
   27578:	mvnhi	r2, #3
   2757c:	str	r2, [r4, #24]
   27580:	ldr	r2, [r4, #32]
   27584:	str	r1, [r2, #4]
   27588:	b	274f0 <flatcc_builder_append_string_str@@Base+0x64>
   2758c:	mov	r3, #0
   27590:	b	2750c <flatcc_builder_append_string_str@@Base+0x80>
   27594:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   27598:	bl	25674 <flatcc_builder_default_alloc@@Base+0x214>

0002759c <flatcc_builder_append_string_strn@@Base>:
   2759c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   275a0:	mov	r4, r0
   275a4:	mov	r5, r2
   275a8:	strd	r6, [sp, #8]
   275ac:	mov	r6, r1
   275b0:	mov	r1, #0
   275b4:	mov	r0, r6
   275b8:	str	r8, [sp, #16]
   275bc:	str	lr, [sp, #20]
   275c0:	sub	sp, sp, #8
   275c4:	bl	145c0 <memchr@plt>
   275c8:	ldr	r2, [r4, #32]
   275cc:	cmp	r0, #0
   275d0:	subne	r5, r0, r6
   275d4:	ldrh	r3, [r2, #14]
   275d8:	cmp	r3, #6
   275dc:	bne	276b4 <flatcc_builder_append_string_strn@@Base+0x118>
   275e0:	ldr	r3, [r2, #20]
   275e4:	adds	r3, r5, r3
   275e8:	bcs	276b0 <flatcc_builder_append_string_strn@@Base+0x114>
   275ec:	ldr	r7, [r4, #20]
   275f0:	str	r3, [r2, #20]
   275f4:	ldr	r3, [r4, #24]
   275f8:	add	ip, r5, r7
   275fc:	cmp	ip, r3
   27600:	str	ip, [r4, #20]
   27604:	bcs	27644 <flatcc_builder_append_string_strn@@Base+0xa8>
   27608:	ldr	r3, [r4, #16]
   2760c:	adds	r3, r3, r7
   27610:	beq	27628 <flatcc_builder_append_string_strn@@Base+0x8c>
   27614:	mov	r0, r3
   27618:	mov	r2, r5
   2761c:	mov	r1, r6
   27620:	bl	14524 <memcpy@plt>
   27624:	mov	r3, r0
   27628:	mov	r0, r3
   2762c:	add	sp, sp, #8
   27630:	ldrd	r4, [sp]
   27634:	ldrd	r6, [sp, #8]
   27638:	ldr	r8, [sp, #16]
   2763c:	add	sp, sp, #20
   27640:	pop	{pc}		; (ldr pc, [sp], #4)
   27644:	ldr	r2, [r4, #28]
   27648:	mov	r0, #1
   2764c:	add	r1, r4, #60	; 0x3c
   27650:	mov	r3, r0
   27654:	str	r0, [sp]
   27658:	ldr	r8, [r4, #48]	; 0x30
   2765c:	add	r2, r2, r0
   27660:	ldr	r0, [r4, #40]	; 0x28
   27664:	add	r2, r2, ip
   27668:	blx	r8
   2766c:	cmp	r0, #0
   27670:	bne	276a8 <flatcc_builder_append_string_strn@@Base+0x10c>
   27674:	ldr	r1, [r4, #28]
   27678:	ldr	r3, [r4, #60]	; 0x3c
   2767c:	ldr	r2, [r4, #64]	; 0x40
   27680:	add	r3, r3, r1
   27684:	sub	r2, r2, r1
   27688:	mvn	r1, #3
   2768c:	str	r3, [r4, #16]
   27690:	cmn	r2, #4
   27694:	mvnhi	r2, #3
   27698:	str	r2, [r4, #24]
   2769c:	ldr	r2, [r4, #32]
   276a0:	str	r1, [r2, #4]
   276a4:	b	2760c <flatcc_builder_append_string_strn@@Base+0x70>
   276a8:	mov	r3, #0
   276ac:	b	27628 <flatcc_builder_append_string_strn@@Base+0x8c>
   276b0:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   276b4:	bl	25674 <flatcc_builder_default_alloc@@Base+0x214>

000276b8 <flatcc_builder_truncate_vector@@Base>:
   276b8:	mov	r3, r0
   276bc:	ldr	r0, [r0, #32]
   276c0:	str	r4, [sp, #-8]!
   276c4:	ldrh	r2, [r0, #14]
   276c8:	str	lr, [sp, #4]
   276cc:	cmp	r2, #4
   276d0:	bne	27720 <flatcc_builder_truncate_vector@@Base+0x68>
   276d4:	mov	lr, r1
   276d8:	ldr	r1, [r0, #20]
   276dc:	cmp	r1, lr
   276e0:	bcc	2773c <flatcc_builder_truncate_vector@@Base+0x84>
   276e4:	ldr	r2, [r0, #16]
   276e8:	sub	ip, r1, lr
   276ec:	mov	r1, #0
   276f0:	str	ip, [r0, #20]
   276f4:	ldr	r0, [r3, #16]
   276f8:	ldr	ip, [r3, #20]
   276fc:	mul	r2, r2, lr
   27700:	sub	ip, ip, r2
   27704:	add	r0, r0, ip
   27708:	str	ip, [r3, #20]
   2770c:	bl	1459c <memset@plt>
   27710:	ldr	r4, [sp]
   27714:	add	sp, sp, #4
   27718:	mov	r0, #0
   2771c:	pop	{pc}		; (ldr pc, [sp], #4)
   27720:	movw	r1, #26932	; 0x6934
   27724:	movt	r1, #4
   27728:	ldr	r3, [pc, #40]	; 27758 <flatcc_builder_truncate_vector@@Base+0xa0>
   2772c:	movw	r0, #27296	; 0x6aa0
   27730:	movt	r0, #4
   27734:	movw	r2, #985	; 0x3d9
   27738:	bl	145f0 <__assert_fail@plt>
   2773c:	movw	r1, #26932	; 0x6934
   27740:	movt	r1, #4
   27744:	ldr	r3, [pc, #12]	; 27758 <flatcc_builder_truncate_vector@@Base+0xa0>
   27748:	movw	r0, #27456	; 0x6b40
   2774c:	movt	r0, #4
   27750:	movw	r2, #986	; 0x3da
   27754:	bl	145f0 <__assert_fail@plt>
   27758:	andeq	r6, r4, r8, lsl #12

0002775c <flatcc_builder_truncate_offset_vector@@Base>:
   2775c:	mov	r3, r0
   27760:	ldr	r0, [r0, #32]
   27764:	str	r4, [sp, #-8]!
   27768:	ldrh	r2, [r0, #14]
   2776c:	str	lr, [sp, #4]
   27770:	cmp	r2, #5
   27774:	bne	277c4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   27778:	mov	lr, r1
   2777c:	ldr	r1, [r0, #20]
   27780:	cmp	r1, lr
   27784:	bcc	277e0 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   27788:	ldr	r2, [r0, #16]
   2778c:	sub	ip, r1, lr
   27790:	mov	r1, #0
   27794:	str	ip, [r0, #20]
   27798:	ldr	r0, [r3, #16]
   2779c:	ldr	ip, [r3, #20]
   277a0:	mul	r2, r2, lr
   277a4:	sub	ip, ip, r2
   277a8:	add	r0, r0, ip
   277ac:	str	ip, [r3, #20]
   277b0:	bl	1459c <memset@plt>
   277b4:	ldr	r4, [sp]
   277b8:	add	sp, sp, #4
   277bc:	mov	r0, #0
   277c0:	pop	{pc}		; (ldr pc, [sp], #4)
   277c4:	movw	r1, #26932	; 0x6934
   277c8:	movt	r1, #4
   277cc:	ldr	r3, [pc, #40]	; 277fc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   277d0:	movw	r0, #27404	; 0x6b0c
   277d4:	movt	r0, #4
   277d8:	movw	r2, #994	; 0x3e2
   277dc:	bl	145f0 <__assert_fail@plt>
   277e0:	movw	r1, #26932	; 0x6934
   277e4:	movt	r1, #4
   277e8:	ldr	r3, [pc, #12]	; 277fc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   277ec:	movw	r0, #27492	; 0x6b64
   277f0:	movt	r0, #4
   277f4:	movw	r2, #995	; 0x3e3
   277f8:	bl	145f0 <__assert_fail@plt>
   277fc:	andeq	r6, r4, r8, lsr #12

00027800 <flatcc_builder_truncate_string@@Base>:
   27800:	str	r4, [sp, #-8]!
   27804:	str	lr, [sp, #4]
   27808:	ldr	lr, [r0, #32]
   2780c:	ldrh	r2, [lr, #14]
   27810:	cmp	r2, #6
   27814:	bne	27864 <flatcc_builder_truncate_string@@Base+0x64>
   27818:	ldr	r2, [lr, #20]
   2781c:	mov	ip, r1
   27820:	cmp	r2, r1
   27824:	bcc	27880 <flatcc_builder_truncate_string@@Base+0x80>
   27828:	sub	r1, r2, r1
   2782c:	mov	r3, r0
   27830:	ldr	r0, [r0, #16]
   27834:	mov	r2, ip
   27838:	str	r1, [lr, #20]
   2783c:	mov	r1, #0
   27840:	ldr	lr, [r3, #20]
   27844:	sub	ip, lr, ip
   27848:	add	r0, r0, ip
   2784c:	str	ip, [r3, #20]
   27850:	bl	1459c <memset@plt>
   27854:	ldr	r4, [sp]
   27858:	add	sp, sp, #4
   2785c:	mov	r0, #0
   27860:	pop	{pc}		; (ldr pc, [sp], #4)
   27864:	movw	r1, #26932	; 0x6934
   27868:	movt	r1, #4
   2786c:	ldr	r3, [pc, #40]	; 2789c <flatcc_builder_truncate_string@@Base+0x9c>
   27870:	movw	r0, #27060	; 0x69b4
   27874:	movt	r0, #4
   27878:	movw	r2, #1003	; 0x3eb
   2787c:	bl	145f0 <__assert_fail@plt>
   27880:	movw	r1, #26932	; 0x6934
   27884:	movt	r1, #4
   27888:	ldr	r3, [pc, #12]	; 2789c <flatcc_builder_truncate_string@@Base+0x9c>
   2788c:	movw	r0, #27552	; 0x6ba0
   27890:	movt	r0, #4
   27894:	mov	r2, #1004	; 0x3ec
   27898:	bl	145f0 <__assert_fail@plt>
   2789c:	andeq	r6, r4, r0, asr r6

000278a0 <flatcc_builder_start_vector@@Base>:
   278a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   278a4:	mov	r4, r0
   278a8:	mov	r5, r3
   278ac:	ldr	r0, [r0, #156]	; 0x9c
   278b0:	cmp	r2, #4
   278b4:	ldr	r3, [r4, #160]	; 0xa0
   278b8:	strd	r6, [sp, #8]
   278bc:	movcs	r7, r2
   278c0:	movcc	r7, #4
   278c4:	mov	r6, r1
   278c8:	strd	r8, [sp, #16]
   278cc:	add	r2, r0, #1
   278d0:	str	lr, [sp, #24]
   278d4:	sub	sp, sp, #12
   278d8:	cmp	r2, r3
   278dc:	str	r2, [r4, #156]	; 0x9c
   278e0:	ble	279fc <flatcc_builder_start_vector@@Base+0x15c>
   278e4:	ldr	r3, [r4, #176]	; 0xb0
   278e8:	cmp	r3, #0
   278ec:	cmpgt	r2, r3
   278f0:	movgt	r3, #1
   278f4:	movle	r3, #0
   278f8:	bgt	27a0c <flatcc_builder_start_vector@@Base+0x16c>
   278fc:	add	r0, r0, r0, lsl #3
   27900:	ldr	r1, [r4, #88]	; 0x58
   27904:	lsl	r8, r0, #2
   27908:	add	r2, r8, #36	; 0x24
   2790c:	cmp	r2, r1
   27910:	bls	27934 <flatcc_builder_start_vector@@Base+0x94>
   27914:	mov	ip, #4
   27918:	add	r1, r4, #84	; 0x54
   2791c:	ldr	r0, [r4, #40]	; 0x28
   27920:	str	ip, [sp]
   27924:	ldr	r9, [r4, #48]	; 0x30
   27928:	blx	r9
   2792c:	cmp	r0, #0
   27930:	bne	27a14 <flatcc_builder_start_vector@@Base+0x174>
   27934:	ldr	r3, [r4, #84]	; 0x54
   27938:	add	r3, r3, r8
   2793c:	cmp	r3, #0
   27940:	str	r3, [r4, #32]
   27944:	beq	27a0c <flatcc_builder_start_vector@@Base+0x16c>
   27948:	ldr	r2, [r4, #88]	; 0x58
   2794c:	movw	r0, #36409	; 0x8e39
   27950:	movt	r0, #14563	; 0x38e3
   27954:	ldr	r1, [r4, #176]	; 0xb0
   27958:	umull	r0, r2, r0, r2
   2795c:	lsr	r2, r2, #3
   27960:	cmp	r1, #0
   27964:	cmpgt	r2, r1
   27968:	movgt	r2, r1
   2796c:	str	r2, [r4, #160]	; 0xa0
   27970:	ldr	r2, [r4, #20]
   27974:	mvn	r9, #3
   27978:	mov	ip, #0
   2797c:	ldr	r0, [r4, #28]
   27980:	ldrh	lr, [r4, #130]	; 0x82
   27984:	ldr	r1, [r4, #64]	; 0x40
   27988:	ldr	r8, [r4, #60]	; 0x3c
   2798c:	str	r2, [r3, #8]
   27990:	add	r2, r2, r0
   27994:	add	r2, r2, #7
   27998:	strh	lr, [r3, #12]
   2799c:	bic	r2, r2, #7
   279a0:	strh	r7, [r4, #130]	; 0x82
   279a4:	mov	r7, #4
   279a8:	sub	r1, r1, r2
   279ac:	str	r0, [r3]
   279b0:	mov	r0, ip
   279b4:	cmp	r1, r9
   279b8:	add	lr, r8, r2
   279bc:	str	ip, [r4, #20]
   279c0:	movhi	r1, r9
   279c4:	str	r2, [r4, #28]
   279c8:	strh	r7, [r3, #14]
   279cc:	str	r6, [r3, #16]
   279d0:	str	ip, [r3, #20]
   279d4:	str	r5, [r3, #24]
   279d8:	str	lr, [r4, #16]
   279dc:	str	r1, [r4, #24]
   279e0:	str	r9, [r3, #4]
   279e4:	add	sp, sp, #12
   279e8:	ldrd	r4, [sp]
   279ec:	ldrd	r6, [sp, #8]
   279f0:	ldrd	r8, [sp, #16]
   279f4:	add	sp, sp, #24
   279f8:	pop	{pc}		; (ldr pc, [sp], #4)
   279fc:	ldr	r3, [r4, #32]
   27a00:	add	r3, r3, #36	; 0x24
   27a04:	str	r3, [r4, #32]
   27a08:	b	27970 <flatcc_builder_start_vector@@Base+0xd0>
   27a0c:	mvn	r0, #0
   27a10:	b	279e4 <flatcc_builder_start_vector@@Base+0x144>
   27a14:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

00027a18 <flatcc_builder_start_offset_vector@@Base>:
   27a18:	ldrd	r2, [r0, #156]	; 0x9c
   27a1c:	strd	r4, [sp, #-16]!
   27a20:	mov	r4, r0
   27a24:	str	r6, [sp, #8]
   27a28:	str	lr, [sp, #12]
   27a2c:	sub	sp, sp, #8
   27a30:	add	r1, r2, #1
   27a34:	cmp	r1, r3
   27a38:	str	r1, [r0, #156]	; 0x9c
   27a3c:	ble	27b54 <flatcc_builder_start_offset_vector@@Base+0x13c>
   27a40:	ldr	r3, [r0, #176]	; 0xb0
   27a44:	cmp	r3, #0
   27a48:	cmpgt	r1, r3
   27a4c:	movgt	r3, #1
   27a50:	movle	r3, #0
   27a54:	bgt	27b64 <flatcc_builder_start_offset_vector@@Base+0x14c>
   27a58:	add	r2, r2, r2, lsl #3
   27a5c:	ldr	r1, [r0, #88]	; 0x58
   27a60:	lsl	r5, r2, #2
   27a64:	add	r2, r5, #36	; 0x24
   27a68:	cmp	r2, r1
   27a6c:	bls	27a90 <flatcc_builder_start_offset_vector@@Base+0x78>
   27a70:	mov	ip, #4
   27a74:	add	r1, r0, #84	; 0x54
   27a78:	ldr	r0, [r0, #40]	; 0x28
   27a7c:	str	ip, [sp]
   27a80:	ldr	r6, [r4, #48]	; 0x30
   27a84:	blx	r6
   27a88:	cmp	r0, #0
   27a8c:	bne	27b6c <flatcc_builder_start_offset_vector@@Base+0x154>
   27a90:	ldr	r3, [r4, #84]	; 0x54
   27a94:	add	r3, r3, r5
   27a98:	cmp	r3, #0
   27a9c:	str	r3, [r4, #32]
   27aa0:	beq	27b64 <flatcc_builder_start_offset_vector@@Base+0x14c>
   27aa4:	ldr	r2, [r4, #88]	; 0x58
   27aa8:	movw	r0, #36409	; 0x8e39
   27aac:	movt	r0, #14563	; 0x38e3
   27ab0:	ldr	r1, [r4, #176]	; 0xb0
   27ab4:	umull	r0, r2, r0, r2
   27ab8:	lsr	r2, r2, #3
   27abc:	cmp	r1, #0
   27ac0:	cmpgt	r2, r1
   27ac4:	movgt	r2, r1
   27ac8:	str	r2, [r4, #160]	; 0xa0
   27acc:	ldr	r2, [r4, #20]
   27ad0:	mvn	r5, #3
   27ad4:	mov	lr, #0
   27ad8:	ldr	r0, [r4, #28]
   27adc:	ldrh	r6, [r4, #130]	; 0x82
   27ae0:	ldr	ip, [r4, #60]	; 0x3c
   27ae4:	ldr	r1, [r4, #64]	; 0x40
   27ae8:	str	r2, [r3, #8]
   27aec:	add	r2, r2, r0
   27af0:	add	r2, r2, #7
   27af4:	strh	r6, [r3, #12]
   27af8:	mov	r6, #4
   27afc:	bic	r2, r2, #7
   27b00:	add	ip, ip, r2
   27b04:	strh	r6, [r4, #130]	; 0x82
   27b08:	sub	r1, r1, r2
   27b0c:	str	r0, [r3]
   27b10:	mov	r0, lr
   27b14:	cmp	r1, r5
   27b18:	str	lr, [r4, #20]
   27b1c:	movhi	r1, r5
   27b20:	str	r2, [r4, #28]
   27b24:	mov	r2, #5
   27b28:	strh	r2, [r3, #14]
   27b2c:	str	r6, [r3, #16]
   27b30:	str	lr, [r3, #20]
   27b34:	str	ip, [r4, #16]
   27b38:	str	r1, [r4, #24]
   27b3c:	str	r5, [r3, #4]
   27b40:	add	sp, sp, #8
   27b44:	ldrd	r4, [sp]
   27b48:	ldr	r6, [sp, #8]
   27b4c:	add	sp, sp, #12
   27b50:	pop	{pc}		; (ldr pc, [sp], #4)
   27b54:	ldr	r3, [r0, #32]
   27b58:	add	r3, r3, #36	; 0x24
   27b5c:	str	r3, [r0, #32]
   27b60:	b	27acc <flatcc_builder_start_offset_vector@@Base+0xb4>
   27b64:	mvn	r0, #0
   27b68:	b	27b40 <flatcc_builder_start_offset_vector@@Base+0x128>
   27b6c:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

00027b70 <flatcc_builder_create_offset_vector@@Base>:
   27b70:	strd	r4, [sp, #-28]!	; 0xffffffe4
   27b74:	mov	r5, r2
   27b78:	mov	r4, r0
   27b7c:	ldr	r3, [r0, #160]	; 0xa0
   27b80:	strd	r6, [sp, #8]
   27b84:	mov	r6, r1
   27b88:	ldr	r1, [r0, #156]	; 0x9c
   27b8c:	strd	r8, [sp, #16]
   27b90:	str	lr, [sp, #24]
   27b94:	sub	sp, sp, #12
   27b98:	add	r2, r1, #1
   27b9c:	cmp	r2, r3
   27ba0:	str	r2, [r0, #156]	; 0x9c
   27ba4:	ble	27d1c <flatcc_builder_create_offset_vector@@Base+0x1ac>
   27ba8:	ldr	r3, [r0, #176]	; 0xb0
   27bac:	cmp	r2, r3
   27bb0:	cmpgt	r3, #0
   27bb4:	movgt	r3, #1
   27bb8:	movle	r3, #0
   27bbc:	bgt	27cfc <flatcc_builder_create_offset_vector@@Base+0x18c>
   27bc0:	add	r1, r1, r1, lsl #3
   27bc4:	ldr	r0, [r0, #88]	; 0x58
   27bc8:	lsl	r7, r1, #2
   27bcc:	add	r2, r7, #36	; 0x24
   27bd0:	cmp	r2, r0
   27bd4:	bls	27bf8 <flatcc_builder_create_offset_vector@@Base+0x88>
   27bd8:	mov	ip, #4
   27bdc:	add	r1, r4, #84	; 0x54
   27be0:	ldr	r0, [r4, #40]	; 0x28
   27be4:	str	ip, [sp]
   27be8:	ldr	r8, [r4, #48]	; 0x30
   27bec:	blx	r8
   27bf0:	cmp	r0, #0
   27bf4:	bne	27dc0 <flatcc_builder_create_offset_vector@@Base+0x250>
   27bf8:	ldr	r3, [r4, #84]	; 0x54
   27bfc:	add	r3, r3, r7
   27c00:	cmp	r3, #0
   27c04:	str	r3, [r4, #32]
   27c08:	beq	27cfc <flatcc_builder_create_offset_vector@@Base+0x18c>
   27c0c:	ldr	r2, [r4, #88]	; 0x58
   27c10:	movw	r0, #36409	; 0x8e39
   27c14:	movt	r0, #14563	; 0x38e3
   27c18:	ldr	r1, [r4, #176]	; 0xb0
   27c1c:	umull	r0, r2, r0, r2
   27c20:	lsr	r2, r2, #3
   27c24:	cmp	r2, r1
   27c28:	cmpgt	r1, #0
   27c2c:	movgt	r2, r1
   27c30:	str	r2, [r4, #160]	; 0xa0
   27c34:	ldr	r2, [r4, #20]
   27c38:	mvn	lr, #3
   27c3c:	mov	r0, #4
   27c40:	ldr	r8, [r4, #28]
   27c44:	ldrh	r7, [r4, #130]	; 0x82
   27c48:	ldr	r1, [r4, #64]	; 0x40
   27c4c:	ldr	r9, [r4, #60]	; 0x3c
   27c50:	str	r2, [r3, #8]
   27c54:	add	r2, r2, r8
   27c58:	add	r2, r2, #7
   27c5c:	strh	r7, [r3, #12]
   27c60:	mov	r7, #0
   27c64:	bic	r2, r2, #7
   27c68:	strh	r0, [r4, #130]	; 0x82
   27c6c:	sub	r1, r1, r2
   27c70:	str	r8, [r3]
   27c74:	cmp	r1, lr
   27c78:	add	r9, r9, r2
   27c7c:	str	r7, [r4, #20]
   27c80:	movls	ip, r1
   27c84:	movhi	ip, lr
   27c88:	str	r2, [r4, #28]
   27c8c:	mov	r1, #5
   27c90:	strh	r1, [r3, #14]
   27c94:	mov	r1, r5
   27c98:	str	r0, [r3, #16]
   27c9c:	mov	r0, r4
   27ca0:	str	r7, [r3, #20]
   27ca4:	str	r9, [r4, #16]
   27ca8:	str	ip, [r4, #24]
   27cac:	str	lr, [r3, #4]
   27cb0:	bl	26f6c <flatcc_builder_extend_offset_vector@@Base>
   27cb4:	cmp	r0, r7
   27cb8:	beq	27cfc <flatcc_builder_create_offset_vector@@Base+0x18c>
   27cbc:	lsl	r2, r5, #2
   27cc0:	mov	r1, r6
   27cc4:	bl	14524 <memcpy@plt>
   27cc8:	ldr	r3, [r4, #32]
   27ccc:	ldrh	r2, [r3, #14]
   27cd0:	cmp	r2, #5
   27cd4:	bne	27da4 <flatcc_builder_create_offset_vector@@Base+0x234>
   27cd8:	ldr	r2, [r3, #20]
   27cdc:	cmn	r2, #-1073741823	; 0xc0000001
   27ce0:	bhi	27cfc <flatcc_builder_create_offset_vector@@Base+0x18c>
   27ce4:	mov	r3, r7
   27ce8:	mov	r0, r4
   27cec:	ldr	r1, [r4, #16]
   27cf0:	bl	257e8 <flatcc_builder_default_alloc@@Base+0x388>
   27cf4:	subs	r5, r0, #0
   27cf8:	bne	27d2c <flatcc_builder_create_offset_vector@@Base+0x1bc>
   27cfc:	mov	r5, #0
   27d00:	mov	r0, r5
   27d04:	add	sp, sp, #12
   27d08:	ldrd	r4, [sp]
   27d0c:	ldrd	r6, [sp, #8]
   27d10:	ldrd	r8, [sp, #16]
   27d14:	add	sp, sp, #24
   27d18:	pop	{pc}		; (ldr pc, [sp], #4)
   27d1c:	ldr	r3, [r0, #32]
   27d20:	add	r3, r3, #36	; 0x24
   27d24:	str	r3, [r0, #32]
   27d28:	b	27c34 <flatcc_builder_create_offset_vector@@Base+0xc4>
   27d2c:	mov	r1, r7
   27d30:	ldr	r0, [r4, #16]
   27d34:	ldr	r2, [r4, #20]
   27d38:	bl	1459c <memset@plt>
   27d3c:	ldr	r3, [r4, #32]
   27d40:	ldr	r0, [r4, #60]	; 0x3c
   27d44:	ldr	r2, [r4, #64]	; 0x40
   27d48:	ldr	ip, [r3]
   27d4c:	ldmib	r3, {r1, lr}
   27d50:	add	r0, r0, ip
   27d54:	sub	r2, r2, ip
   27d58:	str	r0, [r4, #16]
   27d5c:	cmp	r2, r1
   27d60:	ldrh	r0, [r4, #128]	; 0x80
   27d64:	movcs	r2, r1
   27d68:	str	lr, [r4, #20]
   27d6c:	str	ip, [r4, #28]
   27d70:	ldrh	ip, [r4, #130]	; 0x82
   27d74:	str	r2, [r4, #24]
   27d78:	ldr	r2, [r4, #156]	; 0x9c
   27d7c:	str	r1, [r3, #4]
   27d80:	cmp	r0, ip
   27d84:	sub	r0, r3, #36	; 0x24
   27d88:	strhcc	ip, [r4, #128]	; 0x80
   27d8c:	ldrh	r1, [r3, #12]
   27d90:	sub	r3, r2, #1
   27d94:	str	r0, [r4, #32]
   27d98:	strh	r1, [r4, #130]	; 0x82
   27d9c:	str	r3, [r4, #156]	; 0x9c
   27da0:	b	27d00 <flatcc_builder_create_offset_vector@@Base+0x190>
   27da4:	movw	r1, #26932	; 0x6934
   27da8:	movt	r1, #4
   27dac:	ldr	r3, [pc, #16]	; 27dc4 <flatcc_builder_create_offset_vector@@Base+0x254>
   27db0:	movw	r0, #27404	; 0x6b0c
   27db4:	movt	r0, #4
   27db8:	movw	r2, #1480	; 0x5c8
   27dbc:	bl	145f0 <__assert_fail@plt>
   27dc0:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>
   27dc4:	andeq	r6, r4, r0, ror r6

00027dc8 <flatcc_builder_start_string@@Base>:
   27dc8:	ldrd	r2, [r0, #156]	; 0x9c
   27dcc:	strd	r4, [sp, #-16]!
   27dd0:	mov	r4, r0
   27dd4:	str	r6, [sp, #8]
   27dd8:	str	lr, [sp, #12]
   27ddc:	sub	sp, sp, #8
   27de0:	add	r1, r2, #1
   27de4:	cmp	r1, r3
   27de8:	str	r1, [r0, #156]	; 0x9c
   27dec:	ble	27f04 <flatcc_builder_start_string@@Base+0x13c>
   27df0:	ldr	r3, [r0, #176]	; 0xb0
   27df4:	cmp	r3, #0
   27df8:	cmpgt	r1, r3
   27dfc:	movgt	r3, #1
   27e00:	movle	r3, #0
   27e04:	bgt	27f14 <flatcc_builder_start_string@@Base+0x14c>
   27e08:	add	r2, r2, r2, lsl #3
   27e0c:	ldr	r1, [r0, #88]	; 0x58
   27e10:	lsl	r5, r2, #2
   27e14:	add	r2, r5, #36	; 0x24
   27e18:	cmp	r2, r1
   27e1c:	bls	27e40 <flatcc_builder_start_string@@Base+0x78>
   27e20:	mov	ip, #4
   27e24:	add	r1, r0, #84	; 0x54
   27e28:	ldr	r0, [r0, #40]	; 0x28
   27e2c:	str	ip, [sp]
   27e30:	ldr	r6, [r4, #48]	; 0x30
   27e34:	blx	r6
   27e38:	cmp	r0, #0
   27e3c:	bne	27f1c <flatcc_builder_start_string@@Base+0x154>
   27e40:	ldr	r3, [r4, #84]	; 0x54
   27e44:	add	r3, r3, r5
   27e48:	cmp	r3, #0
   27e4c:	str	r3, [r4, #32]
   27e50:	beq	27f14 <flatcc_builder_start_string@@Base+0x14c>
   27e54:	ldr	r2, [r4, #88]	; 0x58
   27e58:	movw	r0, #36409	; 0x8e39
   27e5c:	movt	r0, #14563	; 0x38e3
   27e60:	ldr	r1, [r4, #176]	; 0xb0
   27e64:	umull	r0, r2, r0, r2
   27e68:	lsr	r2, r2, #3
   27e6c:	cmp	r1, #0
   27e70:	cmpgt	r2, r1
   27e74:	movgt	r2, r1
   27e78:	str	r2, [r4, #160]	; 0xa0
   27e7c:	ldr	r2, [r4, #20]
   27e80:	mvn	r5, #3
   27e84:	mov	lr, #0
   27e88:	ldr	r0, [r4, #28]
   27e8c:	ldrh	r6, [r4, #130]	; 0x82
   27e90:	ldr	ip, [r4, #60]	; 0x3c
   27e94:	ldr	r1, [r4, #64]	; 0x40
   27e98:	str	r2, [r3, #8]
   27e9c:	add	r2, r2, r0
   27ea0:	add	r2, r2, #7
   27ea4:	strh	r6, [r3, #12]
   27ea8:	mov	r6, #1
   27eac:	bic	r2, r2, #7
   27eb0:	add	ip, ip, r2
   27eb4:	strh	r6, [r4, #130]	; 0x82
   27eb8:	sub	r1, r1, r2
   27ebc:	str	r0, [r3]
   27ec0:	mov	r0, lr
   27ec4:	cmp	r1, r5
   27ec8:	str	lr, [r4, #20]
   27ecc:	movhi	r1, r5
   27ed0:	str	r2, [r4, #28]
   27ed4:	mov	r2, #6
   27ed8:	strh	r2, [r3, #14]
   27edc:	str	r6, [r3, #16]
   27ee0:	str	lr, [r3, #20]
   27ee4:	str	ip, [r4, #16]
   27ee8:	str	r1, [r4, #24]
   27eec:	str	r5, [r3, #4]
   27ef0:	add	sp, sp, #8
   27ef4:	ldrd	r4, [sp]
   27ef8:	ldr	r6, [sp, #8]
   27efc:	add	sp, sp, #12
   27f00:	pop	{pc}		; (ldr pc, [sp], #4)
   27f04:	ldr	r3, [r0, #32]
   27f08:	add	r3, r3, #36	; 0x24
   27f0c:	str	r3, [r0, #32]
   27f10:	b	27e7c <flatcc_builder_start_string@@Base+0xb4>
   27f14:	mvn	r0, #0
   27f18:	b	27ef0 <flatcc_builder_start_string@@Base+0x128>
   27f1c:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

00027f20 <flatcc_builder_reserve_table@@Base>:
   27f20:	cmp	r1, #0
   27f24:	strd	r4, [sp, #-20]!	; 0xffffffec
   27f28:	strd	r6, [sp, #8]
   27f2c:	str	lr, [sp, #16]
   27f30:	sub	sp, sp, #12
   27f34:	blt	28018 <flatcc_builder_reserve_table@@Base+0xf8>
   27f38:	ldr	r2, [r0, #32]
   27f3c:	add	r1, r1, #2
   27f40:	mov	r4, r0
   27f44:	lsl	r5, r1, #1
   27f48:	ldr	r1, [r0, #56]	; 0x38
   27f4c:	ldrh	r6, [r2, #28]
   27f50:	ldr	r3, [r2, #16]
   27f54:	add	r6, r3, r6, lsl #1
   27f58:	add	r2, r6, r5
   27f5c:	cmp	r2, r1
   27f60:	bhi	27fc8 <flatcc_builder_reserve_table@@Base+0xa8>
   27f64:	ldr	r3, [r4, #52]	; 0x34
   27f68:	adds	r3, r3, r6
   27f6c:	mvneq	r0, #0
   27f70:	streq	r3, [r4, #4]
   27f74:	beq	27fb4 <flatcc_builder_reserve_table@@Base+0x94>
   27f78:	ldr	r2, [r4, #32]
   27f7c:	add	r3, r3, #4
   27f80:	ldr	r1, [r4, #80]	; 0x50
   27f84:	ldr	r6, [r2, #20]
   27f88:	str	r3, [r4, #4]
   27f8c:	add	r2, r5, r6
   27f90:	sub	r2, r2, #3
   27f94:	cmp	r2, r1
   27f98:	bhi	27ff0 <flatcc_builder_reserve_table@@Base+0xd0>
   27f9c:	ldr	r3, [r4, #76]	; 0x4c
   27fa0:	add	r3, r3, r6
   27fa4:	clz	r0, r3
   27fa8:	lsr	r0, r0, #5
   27fac:	str	r3, [r4]
   27fb0:	rsb	r0, r0, #0
   27fb4:	add	sp, sp, #12
   27fb8:	ldrd	r4, [sp]
   27fbc:	ldrd	r6, [sp, #8]
   27fc0:	add	sp, sp, #16
   27fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   27fc8:	mov	ip, #0
   27fcc:	add	r1, r0, #52	; 0x34
   27fd0:	ldr	r0, [r0, #40]	; 0x28
   27fd4:	mov	r3, #1
   27fd8:	str	ip, [sp]
   27fdc:	ldr	r7, [r4, #48]	; 0x30
   27fe0:	blx	r7
   27fe4:	cmp	r0, #0
   27fe8:	beq	27f64 <flatcc_builder_reserve_table@@Base+0x44>
   27fec:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>
   27ff0:	mov	ip, #3
   27ff4:	mov	r3, #0
   27ff8:	ldr	r0, [r4, #40]	; 0x28
   27ffc:	add	r1, r4, #76	; 0x4c
   28000:	str	ip, [sp]
   28004:	ldr	r5, [r4, #48]	; 0x30
   28008:	blx	r5
   2800c:	cmp	r0, #0
   28010:	beq	27f9c <flatcc_builder_reserve_table@@Base+0x7c>
   28014:	b	27fec <flatcc_builder_reserve_table@@Base+0xcc>
   28018:	movw	r1, #26932	; 0x6934
   2801c:	movt	r1, #4
   28020:	ldr	r3, [pc, #12]	; 28034 <flatcc_builder_reserve_table@@Base+0x114>
   28024:	movw	r0, #27588	; 0x6bc4
   28028:	movt	r0, #4
   2802c:	movw	r2, #1065	; 0x429
   28030:	bl	145f0 <__assert_fail@plt>
   28034:	muleq	r4, r4, r6

00028038 <flatcc_builder_start_table@@Base>:
   28038:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2803c:	mov	r5, r1
   28040:	mov	r1, #4
   28044:	strd	r6, [sp, #8]
   28048:	mov	r4, r0
   2804c:	strd	r8, [sp, #16]
   28050:	str	sl, [sp, #24]
   28054:	str	lr, [sp, #28]
   28058:	sub	sp, sp, #8
   2805c:	bl	256c4 <flatcc_builder_default_alloc@@Base+0x264>
   28060:	subs	r7, r0, #0
   28064:	bne	281ac <flatcc_builder_start_table@@Base+0x174>
   28068:	ldm	r4, {r0, r2}
   2806c:	add	r5, r5, #2
   28070:	movw	ip, #15186	; 0x3b52
   28074:	movt	ip, #12137	; 0x2f69
   28078:	lsl	r5, r5, #1
   2807c:	mov	r8, #3
   28080:	ldrh	lr, [r4, #8]
   28084:	ldr	r1, [r4, #52]	; 0x34
   28088:	ldr	sl, [r4, #76]	; 0x4c
   2808c:	ldr	r3, [r4, #32]
   28090:	sub	r2, r2, r1
   28094:	ldr	r9, [r4, #56]	; 0x38
   28098:	add	r6, r2, lr, lsl #1
   2809c:	sub	r0, r0, sl
   280a0:	ldr	sl, [r4, #12]
   280a4:	str	r2, [r3, #16]
   280a8:	add	r2, r6, r5
   280ac:	str	r0, [r3, #20]
   280b0:	cmp	r2, r9
   280b4:	str	sl, [r3, #24]
   280b8:	strh	lr, [r3, #28]
   280bc:	strh	r7, [r4, #8]
   280c0:	str	ip, [r4, #12]
   280c4:	strh	r8, [r3, #14]
   280c8:	bls	280f0 <flatcc_builder_start_table@@Base+0xb8>
   280cc:	mov	r3, #1
   280d0:	add	r1, r4, #52	; 0x34
   280d4:	str	r7, [sp]
   280d8:	ldr	r0, [r4, #40]	; 0x28
   280dc:	ldr	r8, [r4, #48]	; 0x30
   280e0:	blx	r8
   280e4:	cmp	r0, #0
   280e8:	bne	281a8 <flatcc_builder_start_table@@Base+0x170>
   280ec:	ldr	r1, [r4, #52]	; 0x34
   280f0:	adds	r6, r6, r1
   280f4:	streq	r6, [r4, #4]
   280f8:	beq	281ac <flatcc_builder_start_table@@Base+0x174>
   280fc:	ldr	r1, [r4, #32]
   28100:	sub	r2, r5, #3
   28104:	add	r6, r6, #4
   28108:	ldr	r3, [r4, #80]	; 0x50
   2810c:	ldr	r5, [r1, #20]
   28110:	str	r6, [r4, #4]
   28114:	add	r2, r2, r5
   28118:	cmp	r2, r3
   2811c:	bhi	28184 <flatcc_builder_start_table@@Base+0x14c>
   28120:	ldr	r3, [r4, #76]	; 0x4c
   28124:	add	r3, r3, r5
   28128:	cmp	r3, #0
   2812c:	str	r3, [r4]
   28130:	beq	281ac <flatcc_builder_start_table@@Base+0x174>
   28134:	ldr	r0, [r4, #28]
   28138:	movw	r2, #65532	; 0xfffc
   2813c:	ldr	ip, [r4, #32]
   28140:	ldr	r3, [r4, #64]	; 0x40
   28144:	ldr	r1, [r4, #60]	; 0x3c
   28148:	sub	r3, r3, r0
   2814c:	cmp	r3, r2
   28150:	add	r1, r1, r0
   28154:	movcs	r3, r2
   28158:	str	r1, [r4, #16]
   2815c:	str	r3, [r4, #24]
   28160:	str	r2, [ip, #4]
   28164:	mov	r0, r7
   28168:	add	sp, sp, #8
   2816c:	ldrd	r4, [sp]
   28170:	ldrd	r6, [sp, #8]
   28174:	ldrd	r8, [sp, #16]
   28178:	ldr	sl, [sp, #24]
   2817c:	add	sp, sp, #28
   28180:	pop	{pc}		; (ldr pc, [sp], #4)
   28184:	mov	ip, #3
   28188:	mov	r3, #0
   2818c:	ldr	r0, [r4, #40]	; 0x28
   28190:	add	r1, r4, #76	; 0x4c
   28194:	str	ip, [sp]
   28198:	ldr	r6, [r4, #48]	; 0x30
   2819c:	blx	r6
   281a0:	cmp	r0, #0
   281a4:	beq	28120 <flatcc_builder_start_table@@Base+0xe8>
   281a8:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>
   281ac:	mvn	r7, #0
   281b0:	b	28164 <flatcc_builder_start_table@@Base+0x12c>

000281b4 <flatcc_builder_create_vtable@@Base>:
   281b4:	strd	r4, [sp, #-16]!
   281b8:	mov	r5, r0
   281bc:	mov	r3, #0
   281c0:	ldr	ip, [r5, #152]	; 0x98
   281c4:	subs	r0, r2, #0
   281c8:	str	r6, [sp, #8]
   281cc:	str	lr, [sp, #12]
   281d0:	sub	sp, sp, #80	; 0x50
   281d4:	str	r3, [sp, #8]
   281d8:	str	r3, [sp, #12]
   281dc:	beq	28258 <flatcc_builder_create_vtable@@Base+0xa4>
   281e0:	mov	r2, #1
   281e4:	cmp	ip, r3
   281e8:	str	r0, [sp, #8]
   281ec:	str	r2, [sp, #12]
   281f0:	str	r1, [sp, #16]
   281f4:	str	r0, [sp, #20]
   281f8:	beq	28288 <flatcc_builder_create_vtable@@Base+0xd4>
   281fc:	ldr	r3, [r5, #136]	; 0x88
   28200:	sub	r4, r3, r0
   28204:	cmp	r3, r4
   28208:	ble	2826c <flatcc_builder_create_vtable@@Base+0xb8>
   2820c:	mov	r3, r4
   28210:	mov	r2, #1
   28214:	str	r0, [sp]
   28218:	add	r1, sp, #16
   2821c:	ldr	r0, [r5, #36]	; 0x24
   28220:	ldr	r6, [r5, #44]	; 0x2c
   28224:	blx	r6
   28228:	cmp	r0, #0
   2822c:	bne	282d0 <flatcc_builder_create_vtable@@Base+0x11c>
   28230:	cmp	r4, #0
   28234:	str	r4, [r5, #136]	; 0x88
   28238:	beq	28240 <flatcc_builder_create_vtable@@Base+0x8c>
   2823c:	add	r4, r4, #1
   28240:	mov	r0, r4
   28244:	add	sp, sp, #80	; 0x50
   28248:	ldrd	r4, [sp]
   2824c:	ldr	r6, [sp, #8]
   28250:	add	sp, sp, #12
   28254:	pop	{pc}		; (ldr pc, [sp], #4)
   28258:	cmp	ip, #0
   2825c:	bne	2826c <flatcc_builder_create_vtable@@Base+0xb8>
   28260:	ldr	r2, [r5, #180]	; 0xb4
   28264:	cmp	r2, #0
   28268:	beq	282c8 <flatcc_builder_create_vtable@@Base+0x114>
   2826c:	movw	r1, #26932	; 0x6934
   28270:	movt	r1, #4
   28274:	ldr	r3, [pc, #88]	; 282d4 <flatcc_builder_create_vtable@@Base+0x120>
   28278:	movw	r0, #27124	; 0x69f4
   2827c:	movt	r0, #4
   28280:	movw	r2, #647	; 0x287
   28284:	bl	145f0 <__assert_fail@plt>
   28288:	ldr	r3, [r5, #180]	; 0xb4
   2828c:	cmp	r3, #0
   28290:	bne	281fc <flatcc_builder_create_vtable@@Base+0x48>
   28294:	ldr	r4, [r5, #140]	; 0x8c
   28298:	mov	ip, r0
   2829c:	add	r0, r4, r0
   282a0:	str	r0, [r5, #140]	; 0x8c
   282a4:	mov	r3, r4
   282a8:	add	r1, sp, #16
   282ac:	str	ip, [sp]
   282b0:	ldr	r0, [r5, #36]	; 0x24
   282b4:	ldr	r5, [r5, #44]	; 0x2c
   282b8:	blx	r5
   282bc:	cmp	r0, #0
   282c0:	beq	2823c <flatcc_builder_create_vtable@@Base+0x88>
   282c4:	bl	255ac <flatcc_builder_default_alloc@@Base+0x14c>
   282c8:	ldr	r4, [r5, #140]	; 0x8c
   282cc:	b	282a4 <flatcc_builder_create_vtable@@Base+0xf0>
   282d0:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   282d4:	andeq	r6, r4, r0, lsl r2

000282d8 <flatcc_builder_create_cached_vtable@@Base>:
   282d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   282dc:	strd	r6, [sp, #8]
   282e0:	mov	r6, r0
   282e4:	strd	r8, [sp, #16]
   282e8:	mov	r9, r2
   282ec:	mov	r8, r3
   282f0:	strd	sl, [sp, #24]
   282f4:	str	lr, [sp, #32]
   282f8:	sub	sp, sp, #28
   282fc:	str	r1, [sp, #8]
   28300:	ldr	r1, [r0, #116]	; 0x74
   28304:	cmp	r1, #0
   28308:	rsbne	r1, r1, #32
   2830c:	beq	28494 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   28310:	ldr	sl, [r6, #92]	; 0x5c
   28314:	lsr	r8, r8, r1
   28318:	adds	fp, sl, r8, lsl #2
   2831c:	str	fp, [sp, #12]
   28320:	beq	28530 <flatcc_builder_create_cached_vtable@@Base+0x258>
   28324:	ldr	r5, [sl, r8, lsl #2]
   28328:	cmp	r5, #0
   2832c:	beq	28564 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   28330:	mov	r3, #0
   28334:	str	r8, [sp, #16]
   28338:	mov	r8, fp
   2833c:	mov	fp, r6
   28340:	ldr	r7, [r6, #68]	; 0x44
   28344:	str	r3, [sp, #20]
   28348:	ldr	r3, [r6, #100]	; 0x64
   2834c:	mov	r6, r3
   28350:	add	r4, r6, r5
   28354:	ldr	r1, [r4, #8]
   28358:	ldrh	r2, [r7, r1]
   2835c:	add	r1, r7, r1
   28360:	cmp	r2, r9
   28364:	bne	28440 <flatcc_builder_create_cached_vtable@@Base+0x168>
   28368:	mov	r2, r9
   2836c:	ldr	r0, [sp, #8]
   28370:	bl	14530 <memcmp@plt>
   28374:	cmp	r0, #0
   28378:	bne	28440 <flatcc_builder_create_cached_vtable@@Base+0x168>
   2837c:	ldr	r1, [r4, #4]
   28380:	ldr	r2, [fp, #152]	; 0x98
   28384:	cmp	r1, r2
   28388:	beq	2844c <flatcc_builder_create_cached_vtable@@Base+0x174>
   2838c:	ldr	r5, [r4, #12]
   28390:	add	r8, r4, #12
   28394:	str	r4, [sp, #20]
   28398:	cmp	r5, #0
   2839c:	bne	28350 <flatcc_builder_create_cached_vtable@@Base+0x78>
   283a0:	ldr	r8, [sp, #16]
   283a4:	mov	r6, fp
   283a8:	ldr	r3, [r6, #104]	; 0x68
   283ac:	ldr	r4, [r6, #124]	; 0x7c
   283b0:	add	r2, r4, #16
   283b4:	cmp	r2, r3
   283b8:	bls	283e0 <flatcc_builder_create_cached_vtable@@Base+0x108>
   283bc:	mov	ip, #6
   283c0:	mov	r3, #0
   283c4:	ldr	r0, [r6, #40]	; 0x28
   283c8:	add	r1, r6, #100	; 0x64
   283cc:	str	ip, [sp]
   283d0:	ldr	r5, [r6, #48]	; 0x30
   283d4:	blx	r5
   283d8:	cmp	r0, #0
   283dc:	bne	28560 <flatcc_builder_create_cached_vtable@@Base+0x288>
   283e0:	ldr	r5, [r6, #100]	; 0x64
   283e4:	adds	r7, r5, r4
   283e8:	beq	28530 <flatcc_builder_create_cached_vtable@@Base+0x258>
   283ec:	ldr	r3, [r6, #124]	; 0x7c
   283f0:	mov	r2, r9
   283f4:	ldr	r0, [r6, #152]	; 0x98
   283f8:	ldr	r1, [sp, #8]
   283fc:	add	ip, r3, #16
   28400:	str	ip, [r6, #124]	; 0x7c
   28404:	str	r0, [r7, #4]
   28408:	mov	r0, r6
   2840c:	ldr	ip, [sl, r8, lsl #2]
   28410:	str	ip, [r7, #12]
   28414:	str	r3, [sl, r8, lsl #2]
   28418:	bl	281b4 <flatcc_builder_create_vtable@@Base>
   2841c:	cmp	r0, #0
   28420:	str	r0, [r5, r4]
   28424:	beq	28530 <flatcc_builder_create_cached_vtable@@Base+0x258>
   28428:	ldr	r3, [sp, #20]
   2842c:	cmp	r3, #0
   28430:	beq	28574 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   28434:	ldr	r3, [r3, #8]
   28438:	str	r3, [r7, #8]
   2843c:	b	28478 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   28440:	add	r8, r4, #12
   28444:	ldr	r5, [r4, #12]
   28448:	b	28398 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   2844c:	ldr	r3, [sp, #12]
   28450:	mov	fp, r8
   28454:	ldr	r8, [sp, #16]
   28458:	cmp	r3, fp
   2845c:	beq	28474 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   28460:	ldr	r3, [r4, #12]
   28464:	str	r3, [fp]
   28468:	ldr	r3, [sl, r8, lsl #2]
   2846c:	str	r3, [r4, #12]
   28470:	str	r5, [sl, r8, lsl #2]
   28474:	ldr	r0, [r4]
   28478:	add	sp, sp, #28
   2847c:	ldrd	r4, [sp]
   28480:	ldrd	r6, [sp, #8]
   28484:	ldrd	r8, [sp, #16]
   28488:	ldrd	sl, [sp, #24]
   2848c:	add	sp, sp, #32
   28490:	pop	{pc}		; (ldr pc, [sp], #4)
   28494:	ldr	r4, [r0, #124]	; 0x7c
   28498:	add	r5, r0, #92	; 0x5c
   2849c:	cmp	r4, #0
   284a0:	bne	28624 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   284a4:	ldr	r3, [r0, #104]	; 0x68
   284a8:	cmp	r3, #15
   284ac:	bls	28538 <flatcc_builder_create_cached_vtable@@Base+0x260>
   284b0:	ldr	r3, [r6, #100]	; 0x64
   284b4:	cmp	r3, #0
   284b8:	beq	28530 <flatcc_builder_create_cached_vtable@@Base+0x258>
   284bc:	mov	ip, #16
   284c0:	mov	r2, #5
   284c4:	ldr	r0, [r6, #40]	; 0x28
   284c8:	mov	r1, r5
   284cc:	mov	r3, #1
   284d0:	str	r2, [sp]
   284d4:	mov	r2, #256	; 0x100
   284d8:	str	ip, [r6, #124]	; 0x7c
   284dc:	ldr	r5, [r6, #48]	; 0x30
   284e0:	blx	r5
   284e4:	cmp	r0, #0
   284e8:	bne	28530 <flatcc_builder_create_cached_vtable@@Base+0x258>
   284ec:	mov	r3, #256	; 0x100
   284f0:	ldr	r1, [r6, #96]	; 0x60
   284f4:	b	284fc <flatcc_builder_create_cached_vtable@@Base+0x224>
   284f8:	mov	r3, r2
   284fc:	lsl	r2, r3, #1
   28500:	cmp	r2, r1
   28504:	bls	284f8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   28508:	lsr	r3, r3, #2
   2850c:	cmp	r3, #1
   28510:	bls	2856c <flatcc_builder_create_cached_vtable@@Base+0x294>
   28514:	mov	r2, #1
   28518:	add	r4, r4, #1
   2851c:	cmp	r3, r2, lsl r4
   28520:	bhi	28518 <flatcc_builder_create_cached_vtable@@Base+0x240>
   28524:	rsb	r1, r4, #32
   28528:	str	r4, [r6, #116]	; 0x74
   2852c:	b	28310 <flatcc_builder_create_cached_vtable@@Base+0x38>
   28530:	mov	r0, #0
   28534:	b	28478 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   28538:	mov	ip, #6
   2853c:	add	r1, r0, #100	; 0x64
   28540:	ldr	r0, [r0, #40]	; 0x28
   28544:	mov	r3, r4
   28548:	mov	r2, #16
   2854c:	str	ip, [sp]
   28550:	ldr	r7, [r6, #48]	; 0x30
   28554:	blx	r7
   28558:	cmp	r0, #0
   2855c:	beq	284b0 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   28560:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>
   28564:	str	r5, [sp, #20]
   28568:	b	283a8 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   2856c:	mov	r1, #32
   28570:	b	28528 <flatcc_builder_create_cached_vtable@@Base+0x250>
   28574:	ldr	r8, [r6, #120]	; 0x78
   28578:	ldr	r3, [r6, #172]	; 0xac
   2857c:	add	r2, r9, r8
   28580:	cmp	r3, #0
   28584:	beq	285c4 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   28588:	cmp	r3, r2
   2858c:	bcs	285c4 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   28590:	ldr	r3, [r6, #116]	; 0x74
   28594:	cmp	r3, #0
   28598:	beq	28478 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   2859c:	ldr	r7, [sp, #20]
   285a0:	ldr	r0, [r6, #92]	; 0x5c
   285a4:	ldr	r2, [r6, #96]	; 0x60
   285a8:	mov	r1, r7
   285ac:	bl	1459c <memset@plt>
   285b0:	mov	r3, #16
   285b4:	mov	r2, r7
   285b8:	ldr	r0, [r5, r4]
   285bc:	strd	r2, [r6, #120]	; 0x78
   285c0:	b	28478 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   285c4:	ldr	r3, [r6, #72]	; 0x48
   285c8:	cmp	r3, r2
   285cc:	bcs	285f4 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   285d0:	mov	ip, #2
   285d4:	mov	r3, #0
   285d8:	ldr	r0, [r6, #40]	; 0x28
   285dc:	add	r1, r6, #68	; 0x44
   285e0:	str	ip, [sp]
   285e4:	ldr	sl, [r6, #48]	; 0x30
   285e8:	blx	sl
   285ec:	cmp	r0, #0
   285f0:	bne	28560 <flatcc_builder_create_cached_vtable@@Base+0x288>
   285f4:	ldr	r3, [r6, #68]	; 0x44
   285f8:	adds	r0, r3, r8
   285fc:	beq	28640 <flatcc_builder_create_cached_vtable@@Base+0x368>
   28600:	ldr	r3, [r6, #120]	; 0x78
   28604:	mov	r2, r9
   28608:	ldr	r1, [sp, #8]
   2860c:	add	r9, r3, r9
   28610:	str	r3, [r7, #8]
   28614:	str	r9, [r6, #120]	; 0x78
   28618:	bl	14524 <memcpy@plt>
   2861c:	ldr	r0, [r5, r4]
   28620:	b	28478 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   28624:	movw	r1, #26932	; 0x6934
   28628:	movt	r1, #4
   2862c:	ldr	r3, [pc, #20]	; 28648 <flatcc_builder_create_cached_vtable@@Base+0x370>
   28630:	movw	r0, #27600	; 0x6bd0
   28634:	movt	r0, #4
   28638:	movw	r2, #342	; 0x156
   2863c:	bl	145f0 <__assert_fail@plt>
   28640:	mvn	r0, #0
   28644:	b	28478 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   28648:			; <UNDEFINED> instruction: 0x000466b4

0002864c <flatcc_builder_create_table@@Base>:
   2864c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28650:	mov	r5, r0
   28654:	strd	r6, [sp, #8]
   28658:	str	r8, [sp, #16]
   2865c:	str	lr, [sp, #20]
   28660:	sub	sp, sp, #88	; 0x58
   28664:	ldr	r6, [sp, #116]	; 0x74
   28668:	ldr	r0, [sp, #120]	; 0x78
   2866c:	cmp	r6, #0
   28670:	blt	287d8 <flatcc_builder_create_table@@Base+0x18c>
   28674:	ands	r7, r0, #1
   28678:	beq	287bc <flatcc_builder_create_table@@Base+0x170>
   2867c:	ldrh	ip, [r5, #128]	; 0x80
   28680:	cmp	r3, #4
   28684:	sub	r0, r0, #1
   28688:	movcc	r3, #4
   2868c:	cmp	ip, r3
   28690:	ldr	ip, [r5, #136]	; 0x88
   28694:	strhcc	r3, [r5, #128]	; 0x80
   28698:	sub	r3, r3, #1
   2869c:	cmp	r6, #0
   286a0:	sub	r4, ip, r2
   286a4:	mov	r8, r4
   286a8:	sub	r4, r4, #4
   286ac:	and	r8, r8, r3
   286b0:	sub	r0, r4, r0
   286b4:	sub	r0, r0, r8
   286b8:	str	r0, [sp, #12]
   286bc:	beq	286f0 <flatcc_builder_create_table@@Base+0xa4>
   286c0:	ldr	ip, [sp, #112]	; 0x70
   286c4:	sub	r4, r8, r4
   286c8:	sub	r4, r4, #4
   286cc:	add	r6, ip, r6, lsl #1
   286d0:	ldrh	r3, [ip], #2
   286d4:	ldr	r0, [r1, r3]
   286d8:	sub	lr, r4, r3
   286dc:	cmp	r6, ip
   286e0:	add	r0, r0, lr
   286e4:	str	r0, [r1, r3]
   286e8:	bne	286d0 <flatcc_builder_create_table@@Base+0x84>
   286ec:	ldr	ip, [r5, #136]	; 0x88
   286f0:	mov	r0, #4
   286f4:	add	r3, sp, #12
   286f8:	mov	lr, #1
   286fc:	cmp	r2, #0
   28700:	moveq	r2, #2
   28704:	str	r0, [sp, #16]
   28708:	str	lr, [sp, #20]
   2870c:	str	r3, [sp, #24]
   28710:	str	r0, [sp, #28]
   28714:	beq	28738 <flatcc_builder_create_table@@Base+0xec>
   28718:	mov	r3, #2
   2871c:	add	r0, r2, r0
   28720:	mov	r7, r3
   28724:	str	r0, [sp, #16]
   28728:	str	r2, [sp, #36]	; 0x24
   2872c:	mov	r2, #3
   28730:	str	r3, [sp, #20]
   28734:	str	r1, [sp, #32]
   28738:	cmp	r8, #0
   2873c:	bne	28790 <flatcc_builder_create_table@@Base+0x144>
   28740:	sub	r4, ip, r0
   28744:	cmp	r4, ip
   28748:	bge	287f8 <flatcc_builder_create_table@@Base+0x1ac>
   2874c:	mov	r2, r7
   28750:	mov	r3, r4
   28754:	str	r0, [sp]
   28758:	add	r1, sp, #24
   2875c:	ldr	r0, [r5, #36]	; 0x24
   28760:	ldr	r6, [r5, #44]	; 0x2c
   28764:	blx	r6
   28768:	cmp	r0, #0
   2876c:	bne	287f4 <flatcc_builder_create_table@@Base+0x1a8>
   28770:	mov	r0, r4
   28774:	str	r4, [r5, #136]	; 0x88
   28778:	add	sp, sp, #88	; 0x58
   2877c:	ldrd	r4, [sp]
   28780:	ldrd	r6, [sp, #8]
   28784:	ldr	r8, [sp, #16]
   28788:	add	sp, sp, #20
   2878c:	pop	{pc}		; (ldr pc, [sp], #4)
   28790:	ldr	r1, [pc, #124]	; 28814 <flatcc_builder_create_table@@Base+0x1c8>
   28794:	add	r7, r7, #1
   28798:	add	r3, sp, #88	; 0x58
   2879c:	add	r3, r3, r7, lsl #3
   287a0:	add	r0, r0, r8
   287a4:	mov	r7, r2
   287a8:	str	r0, [sp, #16]
   287ac:	str	r2, [sp, #20]
   287b0:	str	r1, [r3, #-72]	; 0xffffffb8
   287b4:	str	r8, [r3, #-68]	; 0xffffffbc
   287b8:	b	28740 <flatcc_builder_create_table@@Base+0xf4>
   287bc:	movw	r1, #26932	; 0x6934
   287c0:	movt	r1, #4
   287c4:	ldr	r3, [pc, #76]	; 28818 <flatcc_builder_create_table@@Base+0x1cc>
   287c8:	movw	r0, #27636	; 0x6bf4
   287cc:	movt	r0, #4
   287d0:	movw	r2, #1243	; 0x4db
   287d4:	bl	145f0 <__assert_fail@plt>
   287d8:	movw	r1, #26932	; 0x6934
   287dc:	movt	r1, #4
   287e0:	ldr	r3, [pc, #48]	; 28818 <flatcc_builder_create_table@@Base+0x1cc>
   287e4:	movw	r0, #27616	; 0x6be0
   287e8:	movt	r0, #4
   287ec:	movw	r2, #1237	; 0x4d5
   287f0:	bl	145f0 <__assert_fail@plt>
   287f4:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   287f8:	movw	r1, #26932	; 0x6934
   287fc:	movt	r1, #4
   28800:	ldr	r3, [pc, #20]	; 2881c <flatcc_builder_create_table@@Base+0x1d0>
   28804:	movw	r0, #27124	; 0x69f4
   28808:	movt	r0, #4
   2880c:	movw	r2, #647	; 0x287
   28810:	bl	145f0 <__assert_fail@plt>
   28814:	andeq	r6, r4, ip, lsl #5
   28818:	andeq	r6, r4, r0, asr #13
   2881c:	andeq	r6, r4, r0, lsl r2

00028820 <flatcc_builder_check_required_field@@Base>:
   28820:	ldr	r3, [r0, #32]
   28824:	ldrh	r3, [r3, #14]
   28828:	cmp	r3, #3
   2882c:	bne	2885c <flatcc_builder_check_required_field@@Base+0x3c>
   28830:	ldrh	r3, [r0, #8]
   28834:	cmp	r3, r1
   28838:	bls	28854 <flatcc_builder_check_required_field@@Base+0x34>
   2883c:	ldr	r3, [r0, #4]
   28840:	lsl	r1, r1, #1
   28844:	ldrh	r0, [r3, r1]
   28848:	adds	r0, r0, #0
   2884c:	movne	r0, #1
   28850:	bx	lr
   28854:	mov	r0, #0
   28858:	bx	lr
   2885c:	movw	r1, #26932	; 0x6934
   28860:	movt	r1, #4
   28864:	ldr	r3, [pc, #20]	; 28880 <flatcc_builder_check_required_field@@Base+0x60>
   28868:	movw	r0, #27648	; 0x6c00
   2886c:	movt	r0, #4
   28870:	str	r4, [sp, #-8]!
   28874:	movw	r2, #1272	; 0x4f8
   28878:	str	lr, [sp, #4]
   2887c:	bl	145f0 <__assert_fail@plt>
   28880:	ldrdeq	r6, [r4], -ip

00028884 <flatcc_builder_check_union_field@@Base>:
   28884:	ldr	r3, [r0, #32]
   28888:	ldrh	r3, [r3, #14]
   2888c:	cmp	r3, #3
   28890:	bne	288f4 <flatcc_builder_check_union_field@@Base+0x70>
   28894:	cmp	r1, #0
   28898:	beq	288e0 <flatcc_builder_check_union_field@@Base+0x5c>
   2889c:	ldrh	r3, [r0, #8]
   288a0:	cmp	r3, r1
   288a4:	bls	288e0 <flatcc_builder_check_union_field@@Base+0x5c>
   288a8:	ldr	r3, [r0, #4]
   288ac:	sub	r1, r1, #-2147483647	; 0x80000001
   288b0:	lsl	r1, r1, #1
   288b4:	ldrh	r2, [r3, r1]!
   288b8:	cmp	r2, #0
   288bc:	ldrh	r1, [r3, #2]
   288c0:	beq	288d4 <flatcc_builder_check_union_field@@Base+0x50>
   288c4:	ldr	r3, [r0, #16]
   288c8:	ldrb	r3, [r3, r2]
   288cc:	cmp	r3, #0
   288d0:	bne	288e8 <flatcc_builder_check_union_field@@Base+0x64>
   288d4:	clz	r0, r1
   288d8:	lsr	r0, r0, #5
   288dc:	bx	lr
   288e0:	mov	r0, #0
   288e4:	bx	lr
   288e8:	adds	r0, r1, #0
   288ec:	movne	r0, #1
   288f0:	bx	lr
   288f4:	movw	r1, #26932	; 0x6934
   288f8:	movt	r1, #4
   288fc:	ldr	r3, [pc, #20]	; 28918 <flatcc_builder_check_union_field@@Base+0x94>
   28900:	movw	r0, #27648	; 0x6c00
   28904:	movt	r0, #4
   28908:	str	r4, [sp, #-8]!
   2890c:	movw	r2, #1279	; 0x4ff
   28910:	str	lr, [sp, #4]
   28914:	bl	145f0 <__assert_fail@plt>
   28918:	andeq	r6, r4, r0, lsl #14

0002891c <flatcc_builder_check_required@@Base>:
   2891c:	ldr	r3, [r0, #32]
   28920:	ldrh	r3, [r3, #14]
   28924:	cmp	r3, #3
   28928:	bne	28990 <flatcc_builder_check_required@@Base+0x74>
   2892c:	ldrh	r3, [r0, #8]
   28930:	cmp	r3, r2
   28934:	blt	28988 <flatcc_builder_check_required@@Base+0x6c>
   28938:	cmp	r2, #0
   2893c:	ble	28980 <flatcc_builder_check_required@@Base+0x64>
   28940:	ldrh	r3, [r1]
   28944:	ldr	ip, [r0, #4]
   28948:	lsl	r3, r3, #1
   2894c:	ldrh	r0, [ip, r3]
   28950:	cmp	r0, #0
   28954:	bxeq	lr
   28958:	add	r2, r1, r2, lsl #1
   2895c:	add	r1, r1, #2
   28960:	b	28978 <flatcc_builder_check_required@@Base+0x5c>
   28964:	ldrh	r3, [r1], #2
   28968:	lsl	r3, r3, #1
   2896c:	ldrh	r0, [ip, r3]
   28970:	cmp	r0, #0
   28974:	bxeq	lr
   28978:	cmp	r1, r2
   2897c:	bne	28964 <flatcc_builder_check_required@@Base+0x48>
   28980:	mov	r0, #1
   28984:	bx	lr
   28988:	mov	r0, #0
   2898c:	bx	lr
   28990:	movw	r1, #26932	; 0x6934
   28994:	movt	r1, #4
   28998:	ldr	r3, [pc, #20]	; 289b4 <flatcc_builder_check_required@@Base+0x98>
   2899c:	movw	r0, #27648	; 0x6c00
   289a0:	movt	r0, #4
   289a4:	str	r4, [sp, #-8]!
   289a8:	movw	r2, #1297	; 0x511
   289ac:	str	lr, [sp, #4]
   289b0:	bl	145f0 <__assert_fail@plt>
   289b4:	andeq	r6, r4, r4, lsr #14

000289b8 <flatcc_builder_end_table@@Base>:
   289b8:	ldr	r3, [r0, #32]
   289bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   289c0:	ldrh	r3, [r3, #14]
   289c4:	strd	r6, [sp, #8]
   289c8:	str	lr, [sp, #16]
   289cc:	sub	sp, sp, #20
   289d0:	cmp	r3, #3
   289d4:	bne	28b58 <flatcc_builder_end_table@@Base+0x1a0>
   289d8:	ldrh	r5, [r0, #8]
   289dc:	movw	ip, #31153	; 0x79b1
   289e0:	movt	ip, #40503	; 0x9e37
   289e4:	mov	r4, r0
   289e8:	ldr	r1, [r0, #4]
   289ec:	ldr	r3, [r0, #12]
   289f0:	add	r5, r5, #2
   289f4:	lsl	r5, r5, #1
   289f8:	ldr	lr, [r0, #20]
   289fc:	sub	r6, r1, #4
   28a00:	uxth	r5, r5
   28a04:	eor	r3, r3, r5
   28a08:	mov	r2, r5
   28a0c:	strh	r5, [r1, #-4]
   28a10:	mul	r3, ip, r3
   28a14:	add	lr, lr, #4
   28a18:	uxth	lr, lr
   28a1c:	eor	r3, r3, lr
   28a20:	strh	lr, [r1, #-2]
   28a24:	mov	r1, r6
   28a28:	mul	r3, ip, r3
   28a2c:	str	r3, [r0, #12]
   28a30:	bl	282d8 <flatcc_builder_create_cached_vtable@@Base>
   28a34:	subs	r7, r0, #0
   28a38:	bne	28a58 <flatcc_builder_end_table@@Base+0xa0>
   28a3c:	mov	r5, #0
   28a40:	mov	r0, r5
   28a44:	add	sp, sp, #20
   28a48:	ldrd	r4, [sp]
   28a4c:	ldrd	r6, [sp, #8]
   28a50:	add	sp, sp, #16
   28a54:	pop	{pc}		; (ldr pc, [sp], #4)
   28a58:	mov	r2, r5
   28a5c:	mov	r1, #0
   28a60:	mov	r0, r6
   28a64:	bl	1459c <memset@plt>
   28a68:	ldr	ip, [r4]
   28a6c:	mov	r0, r4
   28a70:	ldr	r3, [r4, #32]
   28a74:	ldr	r2, [r4, #76]	; 0x4c
   28a78:	ldr	r1, [r3, #20]
   28a7c:	str	r7, [sp, #8]
   28a80:	ldrh	r3, [r4, #130]	; 0x82
   28a84:	add	r2, r2, r1
   28a88:	ldr	r1, [r4, #16]
   28a8c:	sub	ip, ip, r2
   28a90:	asr	ip, ip, #1
   28a94:	str	r2, [sp]
   28a98:	ldr	r2, [r4, #20]
   28a9c:	str	ip, [sp, #4]
   28aa0:	bl	2864c <flatcc_builder_create_table@@Base>
   28aa4:	subs	r5, r0, #0
   28aa8:	beq	28a3c <flatcc_builder_end_table@@Base+0x84>
   28aac:	ldr	r3, [r4, #32]
   28ab0:	mov	r1, #0
   28ab4:	ldr	r0, [r4, #52]	; 0x34
   28ab8:	ldr	r2, [r4, #76]	; 0x4c
   28abc:	ldr	ip, [r3, #16]
   28ac0:	ldr	r6, [r3, #20]
   28ac4:	ldrh	lr, [r3, #28]
   28ac8:	add	r0, r0, ip
   28acc:	ldr	ip, [r3, #24]
   28ad0:	add	r3, r2, r6
   28ad4:	ldr	r2, [r4, #20]
   28ad8:	str	r3, [r4]
   28adc:	str	r0, [r4, #4]
   28ae0:	strh	lr, [r4, #8]
   28ae4:	str	ip, [r4, #12]
   28ae8:	ldr	r0, [r4, #16]
   28aec:	bl	1459c <memset@plt>
   28af0:	ldr	r3, [r4, #32]
   28af4:	ldr	r0, [r4, #60]	; 0x3c
   28af8:	ldr	r2, [r4, #64]	; 0x40
   28afc:	ldr	ip, [r3]
   28b00:	ldmib	r3, {r1, lr}
   28b04:	add	r0, r0, ip
   28b08:	sub	r2, r2, ip
   28b0c:	str	r0, [r4, #16]
   28b10:	cmp	r2, r1
   28b14:	ldrh	r0, [r4, #128]	; 0x80
   28b18:	movcs	r2, r1
   28b1c:	str	lr, [r4, #20]
   28b20:	str	ip, [r4, #28]
   28b24:	ldrh	ip, [r4, #130]	; 0x82
   28b28:	str	r2, [r4, #24]
   28b2c:	ldr	r2, [r4, #156]	; 0x9c
   28b30:	str	r1, [r3, #4]
   28b34:	cmp	r0, ip
   28b38:	sub	r0, r3, #36	; 0x24
   28b3c:	strhcc	ip, [r4, #128]	; 0x80
   28b40:	ldrh	r1, [r3, #12]
   28b44:	sub	r3, r2, #1
   28b48:	str	r0, [r4, #32]
   28b4c:	strh	r1, [r4, #130]	; 0x82
   28b50:	str	r3, [r4, #156]	; 0x9c
   28b54:	b	28a40 <flatcc_builder_end_table@@Base+0x88>
   28b58:	movw	r1, #26932	; 0x6934
   28b5c:	movt	r1, #4
   28b60:	ldr	r3, [pc, #12]	; 28b74 <flatcc_builder_end_table@@Base+0x1bc>
   28b64:	movw	r0, #27648	; 0x6c00
   28b68:	movt	r0, #4
   28b6c:	movw	r2, #1317	; 0x525
   28b70:	bl	145f0 <__assert_fail@plt>
   28b74:	andeq	r6, r4, r4, asr #14

00028b78 <flatcc_builder_create_vector@@Base>:
   28b78:	strd	r4, [sp, #-16]!
   28b7c:	mov	r4, r0
   28b80:	str	r6, [sp, #8]
   28b84:	str	lr, [sp, #12]
   28b88:	sub	sp, sp, #88	; 0x58
   28b8c:	ldr	ip, [sp, #108]	; 0x6c
   28b90:	ldrh	r0, [sp, #104]	; 0x68
   28b94:	cmp	r2, ip
   28b98:	bhi	28c8c <flatcc_builder_create_vector@@Base+0x114>
   28b9c:	ldrh	ip, [r4, #128]	; 0x80
   28ba0:	cmp	r0, #4
   28ba4:	mul	r3, r3, r2
   28ba8:	movcc	r0, #4
   28bac:	add	lr, sp, #12
   28bb0:	str	r2, [sp, #12]
   28bb4:	ldr	r6, [r4, #136]	; 0x88
   28bb8:	mov	r2, #1
   28bbc:	str	lr, [sp, #24]
   28bc0:	cmp	ip, r0
   28bc4:	mov	ip, #4
   28bc8:	strhcc	r0, [r4, #128]	; 0x80
   28bcc:	sub	lr, r6, r3
   28bd0:	sub	r0, r0, #1
   28bd4:	cmp	r3, #0
   28bd8:	and	r0, r0, lr
   28bdc:	str	ip, [sp, #16]
   28be0:	moveq	r3, #2
   28be4:	str	r2, [sp, #20]
   28be8:	str	ip, [sp, #28]
   28bec:	beq	28c10 <flatcc_builder_create_vector@@Base+0x98>
   28bf0:	mov	lr, #2
   28bf4:	add	ip, r3, ip
   28bf8:	mov	r2, lr
   28bfc:	str	ip, [sp, #16]
   28c00:	str	r3, [sp, #36]	; 0x24
   28c04:	mov	r3, #3
   28c08:	str	lr, [sp, #20]
   28c0c:	str	r1, [sp, #32]
   28c10:	cmp	r0, #0
   28c14:	bne	28c60 <flatcc_builder_create_vector@@Base+0xe8>
   28c18:	sub	r5, r6, ip
   28c1c:	cmp	r6, r5
   28c20:	ble	28cac <flatcc_builder_create_vector@@Base+0x134>
   28c24:	mov	r3, r5
   28c28:	add	r1, sp, #24
   28c2c:	str	ip, [sp]
   28c30:	ldr	r0, [r4, #36]	; 0x24
   28c34:	ldr	r6, [r4, #44]	; 0x2c
   28c38:	blx	r6
   28c3c:	cmp	r0, #0
   28c40:	bne	28ca8 <flatcc_builder_create_vector@@Base+0x130>
   28c44:	mov	r0, r5
   28c48:	str	r5, [r4, #136]	; 0x88
   28c4c:	add	sp, sp, #88	; 0x58
   28c50:	ldrd	r4, [sp]
   28c54:	ldr	r6, [sp, #8]
   28c58:	add	sp, sp, #12
   28c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   28c60:	ldr	lr, [pc, #96]	; 28cc8 <flatcc_builder_create_vector@@Base+0x150>
   28c64:	add	r2, r2, #1
   28c68:	add	r1, sp, #88	; 0x58
   28c6c:	add	r1, r1, r2, lsl #3
   28c70:	add	ip, ip, r0
   28c74:	mov	r2, r3
   28c78:	str	ip, [sp, #16]
   28c7c:	str	r3, [sp, #20]
   28c80:	str	lr, [r1, #-72]	; 0xffffffb8
   28c84:	str	r0, [r1, #-68]	; 0xffffffbc
   28c88:	b	28c18 <flatcc_builder_create_vector@@Base+0xa0>
   28c8c:	movw	r1, #26932	; 0x6934
   28c90:	movt	r1, #4
   28c94:	ldr	r3, [pc, #48]	; 28ccc <flatcc_builder_create_vector@@Base+0x154>
   28c98:	movw	r0, #27692	; 0x6c2c
   28c9c:	movt	r0, #4
   28ca0:	movw	r2, #1365	; 0x555
   28ca4:	bl	145f0 <__assert_fail@plt>
   28ca8:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   28cac:	movw	r1, #26932	; 0x6934
   28cb0:	movt	r1, #4
   28cb4:	ldr	r3, [pc, #20]	; 28cd0 <flatcc_builder_create_vector@@Base+0x158>
   28cb8:	movw	r0, #27124	; 0x69f4
   28cbc:	movt	r0, #4
   28cc0:	movw	r2, #647	; 0x287
   28cc4:	bl	145f0 <__assert_fail@plt>
   28cc8:	andeq	r6, r4, ip, lsl #5
   28ccc:	andeq	r6, r4, r0, ror #14
   28cd0:	andeq	r6, r4, r0, lsl r2

00028cd4 <flatcc_builder_end_vector@@Base>:
   28cd4:	ldr	r2, [r0, #32]
   28cd8:	strd	r4, [sp, #-16]!
   28cdc:	ldrh	r3, [r2, #14]
   28ce0:	str	r6, [sp, #8]
   28ce4:	str	lr, [sp, #12]
   28ce8:	sub	sp, sp, #88	; 0x58
   28cec:	cmp	r3, #4
   28cf0:	bne	28eb8 <flatcc_builder_end_vector@@Base+0x1e4>
   28cf4:	ldr	ip, [r2, #20]
   28cf8:	mov	r4, r0
   28cfc:	ldr	r1, [r2, #24]
   28d00:	ldrh	r3, [r0, #130]	; 0x82
   28d04:	ldr	r5, [r4, #16]
   28d08:	cmp	ip, r1
   28d0c:	ldr	r0, [r2, #16]
   28d10:	bhi	28e9c <flatcc_builder_end_vector@@Base+0x1c8>
   28d14:	cmp	r3, #4
   28d18:	mul	r0, r0, ip
   28d1c:	mov	r1, #4
   28d20:	ldrh	r2, [r4, #128]	; 0x80
   28d24:	movcc	r3, #4
   28d28:	add	r6, sp, #12
   28d2c:	str	ip, [sp, #12]
   28d30:	ldr	lr, [r4, #136]	; 0x88
   28d34:	str	r1, [sp, #16]
   28d38:	str	r6, [sp, #24]
   28d3c:	cmp	r2, r3
   28d40:	mov	r2, #1
   28d44:	strhcc	r3, [r4, #128]	; 0x80
   28d48:	sub	ip, lr, r0
   28d4c:	sub	r3, r3, #1
   28d50:	cmp	r0, #0
   28d54:	and	r3, r3, ip
   28d58:	str	r2, [sp, #20]
   28d5c:	moveq	r0, #2
   28d60:	str	r1, [sp, #28]
   28d64:	beq	28d88 <flatcc_builder_end_vector@@Base+0xb4>
   28d68:	mov	ip, #2
   28d6c:	add	r1, r0, r1
   28d70:	mov	r2, ip
   28d74:	str	r1, [sp, #16]
   28d78:	str	r0, [sp, #36]	; 0x24
   28d7c:	mov	r0, #3
   28d80:	str	ip, [sp, #20]
   28d84:	str	r5, [sp, #32]
   28d88:	cmp	r3, #0
   28d8c:	bne	28e50 <flatcc_builder_end_vector@@Base+0x17c>
   28d90:	sub	r5, lr, r1
   28d94:	cmp	lr, r5
   28d98:	ble	28e80 <flatcc_builder_end_vector@@Base+0x1ac>
   28d9c:	mov	r3, r5
   28da0:	str	r1, [sp]
   28da4:	add	r1, sp, #24
   28da8:	ldr	r0, [r4, #36]	; 0x24
   28dac:	ldr	r6, [r4, #44]	; 0x2c
   28db0:	blx	r6
   28db4:	subs	r1, r0, #0
   28db8:	bne	28e7c <flatcc_builder_end_vector@@Base+0x1a8>
   28dbc:	cmp	r5, #0
   28dc0:	str	r5, [r4, #136]	; 0x88
   28dc4:	beq	28e38 <flatcc_builder_end_vector@@Base+0x164>
   28dc8:	ldr	r0, [r4, #16]
   28dcc:	ldr	r2, [r4, #20]
   28dd0:	bl	1459c <memset@plt>
   28dd4:	ldr	r3, [r4, #32]
   28dd8:	ldr	r0, [r4, #60]	; 0x3c
   28ddc:	ldr	r2, [r4, #64]	; 0x40
   28de0:	ldr	ip, [r3]
   28de4:	ldmib	r3, {r1, lr}
   28de8:	add	r0, r0, ip
   28dec:	sub	r2, r2, ip
   28df0:	str	r0, [r4, #16]
   28df4:	cmp	r2, r1
   28df8:	ldrh	r0, [r4, #128]	; 0x80
   28dfc:	movcs	r2, r1
   28e00:	str	lr, [r4, #20]
   28e04:	str	ip, [r4, #28]
   28e08:	ldrh	ip, [r4, #130]	; 0x82
   28e0c:	str	r2, [r4, #24]
   28e10:	ldr	r2, [r4, #156]	; 0x9c
   28e14:	str	r1, [r3, #4]
   28e18:	cmp	r0, ip
   28e1c:	sub	r0, r3, #36	; 0x24
   28e20:	strhcc	ip, [r4, #128]	; 0x80
   28e24:	ldrh	r1, [r3, #12]
   28e28:	sub	r3, r2, #1
   28e2c:	str	r0, [r4, #32]
   28e30:	strh	r1, [r4, #130]	; 0x82
   28e34:	str	r3, [r4, #156]	; 0x9c
   28e38:	mov	r0, r5
   28e3c:	add	sp, sp, #88	; 0x58
   28e40:	ldrd	r4, [sp]
   28e44:	ldr	r6, [sp, #8]
   28e48:	add	sp, sp, #12
   28e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   28e50:	ldr	r5, [pc, #124]	; 28ed4 <flatcc_builder_end_vector@@Base+0x200>
   28e54:	add	r2, r2, #1
   28e58:	add	ip, sp, #88	; 0x58
   28e5c:	add	ip, ip, r2, lsl #3
   28e60:	add	r1, r1, r3
   28e64:	mov	r2, r0
   28e68:	str	r1, [sp, #16]
   28e6c:	str	r0, [sp, #20]
   28e70:	str	r5, [ip, #-72]	; 0xffffffb8
   28e74:	str	r3, [ip, #-68]	; 0xffffffbc
   28e78:	b	28d90 <flatcc_builder_end_vector@@Base+0xbc>
   28e7c:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   28e80:	movw	r1, #26932	; 0x6934
   28e84:	movt	r1, #4
   28e88:	ldr	r3, [pc, #72]	; 28ed8 <flatcc_builder_end_vector@@Base+0x204>
   28e8c:	movw	r0, #27124	; 0x69f4
   28e90:	movt	r0, #4
   28e94:	movw	r2, #647	; 0x287
   28e98:	bl	145f0 <__assert_fail@plt>
   28e9c:	movw	r1, #26932	; 0x6934
   28ea0:	movt	r1, #4
   28ea4:	ldr	r3, [pc, #48]	; 28edc <flatcc_builder_end_vector@@Base+0x208>
   28ea8:	movw	r0, #27692	; 0x6c2c
   28eac:	movt	r0, #4
   28eb0:	movw	r2, #1365	; 0x555
   28eb4:	bl	145f0 <__assert_fail@plt>
   28eb8:	movw	r1, #26932	; 0x6934
   28ebc:	movt	r1, #4
   28ec0:	ldr	r3, [pc, #24]	; 28ee0 <flatcc_builder_end_vector@@Base+0x20c>
   28ec4:	movw	r0, #27296	; 0x6aa0
   28ec8:	movt	r0, #4
   28ecc:	movw	r2, #1400	; 0x578
   28ed0:	bl	145f0 <__assert_fail@plt>
   28ed4:	andeq	r6, r4, ip, lsl #5
   28ed8:	andeq	r6, r4, r0, lsl r2
   28edc:	andeq	r6, r4, r0, ror #14
   28ee0:	andeq	r6, r4, r0, lsl #15

00028ee4 <flatcc_builder_vector_count@@Base>:
   28ee4:	ldr	r3, [r0, #32]
   28ee8:	ldr	r0, [r3, #20]
   28eec:	bx	lr

00028ef0 <flatcc_builder_vector_edit@@Base>:
   28ef0:	ldr	r0, [r0, #16]
   28ef4:	bx	lr

00028ef8 <flatcc_builder_create_offset_vector_direct@@Base>:
   28ef8:	cmn	r2, #-1073741823	; 0xc0000001
   28efc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28f00:	strd	r6, [sp, #8]
   28f04:	str	r8, [sp, #16]
   28f08:	str	lr, [sp, #20]
   28f0c:	sub	sp, sp, #88	; 0x58
   28f10:	bhi	29014 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   28f14:	ldrh	r3, [r0, #128]	; 0x80
   28f18:	mov	r4, r0
   28f1c:	mov	ip, #1
   28f20:	str	r2, [sp, #12]
   28f24:	ldr	r5, [r4, #136]	; 0x88
   28f28:	str	ip, [sp, #20]
   28f2c:	cmp	r3, #3
   28f30:	movls	r3, #4
   28f34:	strhls	r3, [r0, #128]	; 0x80
   28f38:	mov	r0, #4
   28f3c:	add	r3, sp, #12
   28f40:	lsls	lr, r2, #2
   28f44:	str	r0, [sp, #16]
   28f48:	moveq	r7, #2
   28f4c:	str	r3, [sp, #24]
   28f50:	and	r3, r5, #3
   28f54:	str	r0, [sp, #28]
   28f58:	beq	28f7c <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   28f5c:	mov	r6, #2
   28f60:	add	r0, lr, r0
   28f64:	mov	ip, r6
   28f68:	mov	r7, #3
   28f6c:	str	r0, [sp, #16]
   28f70:	str	r6, [sp, #20]
   28f74:	str	r1, [sp, #32]
   28f78:	str	lr, [sp, #36]	; 0x24
   28f7c:	cmp	r3, #0
   28f80:	bne	28fe8 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   28f84:	cmp	r2, #0
   28f88:	beq	29038 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   28f8c:	ldr	r3, [r1]
   28f90:	cmp	r3, #0
   28f94:	subne	lr, lr, #4
   28f98:	movne	r2, #0
   28f9c:	beq	28fcc <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   28fa0:	sub	r3, r3, #4
   28fa4:	cmp	r2, lr
   28fa8:	sub	r3, r3, r5
   28fac:	add	r3, r3, r0
   28fb0:	sub	r3, r3, r2
   28fb4:	str	r3, [r1]
   28fb8:	beq	29034 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   28fbc:	ldr	r3, [r1, #4]!
   28fc0:	add	r2, r2, #4
   28fc4:	cmp	r3, #0
   28fc8:	bne	28fa0 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   28fcc:	movw	r1, #26932	; 0x6934
   28fd0:	movt	r1, #4
   28fd4:	ldr	r3, [pc, #176]	; 2908c <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   28fd8:	movw	r0, #27124	; 0x69f4
   28fdc:	movt	r0, #4
   28fe0:	movw	r2, #1463	; 0x5b7
   28fe4:	bl	145f0 <__assert_fail@plt>
   28fe8:	ldr	r8, [pc, #160]	; 29090 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   28fec:	add	ip, ip, #1
   28ff0:	add	r6, sp, #88	; 0x58
   28ff4:	add	r6, r6, ip, lsl #3
   28ff8:	add	r0, r0, r3
   28ffc:	mov	ip, r7
   29000:	str	r0, [sp, #16]
   29004:	str	r7, [sp, #20]
   29008:	str	r8, [r6, #-72]	; 0xffffffb8
   2900c:	str	r3, [r6, #-68]	; 0xffffffbc
   29010:	b	28f84 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   29014:	mov	r6, #0
   29018:	mov	r0, r6
   2901c:	add	sp, sp, #88	; 0x58
   29020:	ldrd	r4, [sp]
   29024:	ldrd	r6, [sp, #8]
   29028:	ldr	r8, [sp, #16]
   2902c:	add	sp, sp, #20
   29030:	pop	{pc}		; (ldr pc, [sp], #4)
   29034:	ldr	r5, [r4, #136]	; 0x88
   29038:	sub	r6, r5, r0
   2903c:	cmp	r6, r5
   29040:	bge	29070 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   29044:	mov	r2, ip
   29048:	mov	r3, r6
   2904c:	str	r0, [sp]
   29050:	add	r1, sp, #24
   29054:	ldr	r0, [r4, #36]	; 0x24
   29058:	ldr	r5, [r4, #44]	; 0x2c
   2905c:	blx	r5
   29060:	cmp	r0, #0
   29064:	streq	r6, [r4, #136]	; 0x88
   29068:	beq	29018 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   2906c:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   29070:	movw	r1, #26932	; 0x6934
   29074:	movt	r1, #4
   29078:	ldr	r3, [pc, #20]	; 29094 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   2907c:	movw	r0, #27124	; 0x69f4
   29080:	movt	r0, #4
   29084:	movw	r2, #647	; 0x287
   29088:	bl	145f0 <__assert_fail@plt>
   2908c:	andeq	r6, r4, ip, lsl #9
   29090:	andeq	r6, r4, ip, lsl #5
   29094:	andeq	r6, r4, r0, lsl r2

00029098 <flatcc_builder_end_offset_vector@@Base>:
   29098:	ldr	r3, [r0, #32]
   2909c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   290a0:	ldrh	r2, [r3, #14]
   290a4:	strd	r6, [sp, #8]
   290a8:	str	r8, [sp, #16]
   290ac:	str	lr, [sp, #20]
   290b0:	sub	sp, sp, #88	; 0x58
   290b4:	cmp	r2, #5
   290b8:	bne	292a0 <flatcc_builder_end_offset_vector@@Base+0x208>
   290bc:	ldr	r3, [r3, #20]
   290c0:	cmn	r3, #-1073741823	; 0xc0000001
   290c4:	bhi	291c8 <flatcc_builder_end_offset_vector@@Base+0x130>
   290c8:	ldrh	r2, [r0, #128]	; 0x80
   290cc:	mov	r4, r0
   290d0:	add	r5, sp, #12
   290d4:	mov	r1, #1
   290d8:	str	r3, [sp, #12]
   290dc:	ldr	ip, [r4, #136]	; 0x88
   290e0:	str	r1, [sp, #20]
   290e4:	ldr	r0, [r0, #16]
   290e8:	cmp	r2, #3
   290ec:	str	r5, [sp, #24]
   290f0:	movls	r2, #4
   290f4:	and	r5, ip, #3
   290f8:	strhls	r2, [r4, #128]	; 0x80
   290fc:	mov	r2, #4
   29100:	lsls	lr, r3, #2
   29104:	moveq	r6, #2
   29108:	str	r2, [sp, #16]
   2910c:	str	r2, [sp, #28]
   29110:	beq	29134 <flatcc_builder_end_offset_vector@@Base+0x9c>
   29114:	mov	r7, #2
   29118:	add	r2, lr, r2
   2911c:	mov	r1, r7
   29120:	mov	r6, #3
   29124:	str	r2, [sp, #16]
   29128:	str	r7, [sp, #20]
   2912c:	str	r0, [sp, #32]
   29130:	str	lr, [sp, #36]	; 0x24
   29134:	cmp	r5, #0
   29138:	bne	291a0 <flatcc_builder_end_offset_vector@@Base+0x108>
   2913c:	cmp	r3, #0
   29140:	beq	291f0 <flatcc_builder_end_offset_vector@@Base+0x158>
   29144:	ldr	r3, [r0]
   29148:	cmp	r3, #0
   2914c:	subne	lr, lr, #4
   29150:	movne	r1, #0
   29154:	beq	29184 <flatcc_builder_end_offset_vector@@Base+0xec>
   29158:	sub	r3, r3, #4
   2915c:	cmp	r1, lr
   29160:	sub	r3, r3, ip
   29164:	add	r3, r3, r2
   29168:	sub	r3, r3, r1
   2916c:	str	r3, [r0]
   29170:	beq	291e8 <flatcc_builder_end_offset_vector@@Base+0x150>
   29174:	ldr	r3, [r0, #4]!
   29178:	add	r1, r1, #4
   2917c:	cmp	r3, #0
   29180:	bne	29158 <flatcc_builder_end_offset_vector@@Base+0xc0>
   29184:	movw	r1, #26932	; 0x6934
   29188:	movt	r1, #4
   2918c:	ldr	r3, [pc, #328]	; 292dc <flatcc_builder_end_offset_vector@@Base+0x244>
   29190:	movw	r0, #27124	; 0x69f4
   29194:	movt	r0, #4
   29198:	movw	r2, #1463	; 0x5b7
   2919c:	bl	145f0 <__assert_fail@plt>
   291a0:	ldr	r7, [pc, #312]	; 292e0 <flatcc_builder_end_offset_vector@@Base+0x248>
   291a4:	add	r1, r1, #1
   291a8:	add	r8, sp, #88	; 0x58
   291ac:	add	r1, r8, r1, lsl #3
   291b0:	add	r2, r2, r5
   291b4:	str	r2, [sp, #16]
   291b8:	str	r6, [sp, #20]
   291bc:	str	r7, [r1, #-72]	; 0xffffffb8
   291c0:	str	r5, [r1, #-68]	; 0xffffffbc
   291c4:	b	2913c <flatcc_builder_end_offset_vector@@Base+0xa4>
   291c8:	mov	r5, #0
   291cc:	mov	r0, r5
   291d0:	add	sp, sp, #88	; 0x58
   291d4:	ldrd	r4, [sp]
   291d8:	ldrd	r6, [sp, #8]
   291dc:	ldr	r8, [sp, #16]
   291e0:	add	sp, sp, #20
   291e4:	pop	{pc}		; (ldr pc, [sp], #4)
   291e8:	ldr	r2, [sp, #16]
   291ec:	ldr	ip, [r4, #136]	; 0x88
   291f0:	sub	r5, ip, r2
   291f4:	cmp	r5, ip
   291f8:	bge	292c0 <flatcc_builder_end_offset_vector@@Base+0x228>
   291fc:	add	r1, sp, #24
   29200:	mov	r3, r5
   29204:	str	r2, [sp]
   29208:	ldr	r2, [sp, #20]
   2920c:	ldr	r0, [r4, #36]	; 0x24
   29210:	ldr	r6, [r4, #44]	; 0x2c
   29214:	blx	r6
   29218:	subs	r1, r0, #0
   2921c:	bne	292bc <flatcc_builder_end_offset_vector@@Base+0x224>
   29220:	cmp	r5, #0
   29224:	str	r5, [r4, #136]	; 0x88
   29228:	beq	291c8 <flatcc_builder_end_offset_vector@@Base+0x130>
   2922c:	ldr	r0, [r4, #16]
   29230:	ldr	r2, [r4, #20]
   29234:	bl	1459c <memset@plt>
   29238:	ldr	r3, [r4, #32]
   2923c:	ldr	r0, [r4, #60]	; 0x3c
   29240:	ldr	r2, [r4, #64]	; 0x40
   29244:	ldr	ip, [r3]
   29248:	ldmib	r3, {r1, lr}
   2924c:	add	r0, r0, ip
   29250:	sub	r2, r2, ip
   29254:	str	r0, [r4, #16]
   29258:	cmp	r2, r1
   2925c:	ldrh	r0, [r4, #128]	; 0x80
   29260:	movcs	r2, r1
   29264:	str	lr, [r4, #20]
   29268:	str	ip, [r4, #28]
   2926c:	ldrh	ip, [r4, #130]	; 0x82
   29270:	str	r2, [r4, #24]
   29274:	ldr	r2, [r4, #156]	; 0x9c
   29278:	str	r1, [r3, #4]
   2927c:	cmp	r0, ip
   29280:	sub	r0, r3, #36	; 0x24
   29284:	strhcc	ip, [r4, #128]	; 0x80
   29288:	ldrh	r1, [r3, #12]
   2928c:	sub	r3, r2, #1
   29290:	str	r0, [r4, #32]
   29294:	strh	r1, [r4, #130]	; 0x82
   29298:	str	r3, [r4, #156]	; 0x9c
   2929c:	b	291cc <flatcc_builder_end_offset_vector@@Base+0x134>
   292a0:	movw	r1, #26932	; 0x6934
   292a4:	movt	r1, #4
   292a8:	ldr	r3, [pc, #52]	; 292e4 <flatcc_builder_end_offset_vector@@Base+0x24c>
   292ac:	movw	r0, #27404	; 0x6b0c
   292b0:	movt	r0, #4
   292b4:	movw	r2, #1480	; 0x5c8
   292b8:	bl	145f0 <__assert_fail@plt>
   292bc:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   292c0:	movw	r1, #26932	; 0x6934
   292c4:	movt	r1, #4
   292c8:	ldr	r3, [pc, #24]	; 292e8 <flatcc_builder_end_offset_vector@@Base+0x250>
   292cc:	movw	r0, #27124	; 0x69f4
   292d0:	movt	r0, #4
   292d4:	movw	r2, #647	; 0x287
   292d8:	bl	145f0 <__assert_fail@plt>
   292dc:	andeq	r6, r4, ip, lsl #9
   292e0:	andeq	r6, r4, ip, lsl #5
   292e4:	andeq	r6, r4, r0, ror r6
   292e8:	andeq	r6, r4, r0, lsl r2

000292ec <flatcc_builder_end_offset_vector_for_unions@@Base>:
   292ec:	ldr	r2, [r0, #32]
   292f0:	strd	r4, [sp, #-16]!
   292f4:	ldrh	ip, [r2, #14]
   292f8:	str	r6, [sp, #8]
   292fc:	str	lr, [sp, #12]
   29300:	cmp	ip, #5
   29304:	bne	293bc <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   29308:	ldr	r2, [r2, #20]
   2930c:	cmn	r2, #-1073741823	; 0xc0000001
   29310:	bhi	2932c <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   29314:	mov	r3, r1
   29318:	ldr	r1, [r0, #16]
   2931c:	mov	r4, r0
   29320:	bl	257e8 <flatcc_builder_default_alloc@@Base+0x388>
   29324:	subs	r5, r0, #0
   29328:	bne	29344 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   2932c:	mov	r5, #0
   29330:	mov	r0, r5
   29334:	ldrd	r4, [sp]
   29338:	ldr	r6, [sp, #8]
   2933c:	add	sp, sp, #12
   29340:	pop	{pc}		; (ldr pc, [sp], #4)
   29344:	mov	r1, #0
   29348:	ldr	r0, [r4, #16]
   2934c:	ldr	r2, [r4, #20]
   29350:	bl	1459c <memset@plt>
   29354:	ldr	r3, [r4, #32]
   29358:	ldr	r0, [r4, #60]	; 0x3c
   2935c:	ldr	r2, [r4, #64]	; 0x40
   29360:	ldr	ip, [r3]
   29364:	ldmib	r3, {r1, lr}
   29368:	add	r0, r0, ip
   2936c:	sub	r2, r2, ip
   29370:	str	r0, [r4, #16]
   29374:	cmp	r2, r1
   29378:	ldrh	r0, [r4, #128]	; 0x80
   2937c:	movcs	r2, r1
   29380:	str	lr, [r4, #20]
   29384:	str	ip, [r4, #28]
   29388:	ldrh	ip, [r4, #130]	; 0x82
   2938c:	str	r2, [r4, #24]
   29390:	ldr	r2, [r4, #156]	; 0x9c
   29394:	str	r1, [r3, #4]
   29398:	cmp	r0, ip
   2939c:	sub	r0, r3, #36	; 0x24
   293a0:	strhcc	ip, [r4, #128]	; 0x80
   293a4:	ldrh	r1, [r3, #12]
   293a8:	sub	r3, r2, #1
   293ac:	str	r0, [r4, #32]
   293b0:	strh	r1, [r4, #130]	; 0x82
   293b4:	str	r3, [r4, #156]	; 0x9c
   293b8:	b	29330 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   293bc:	movw	r1, #26932	; 0x6934
   293c0:	movt	r1, #4
   293c4:	ldr	r3, [pc, #12]	; 293d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   293c8:	movw	r0, #27404	; 0x6b0c
   293cc:	movt	r0, #4
   293d0:	movw	r2, #1493	; 0x5d5
   293d4:	bl	145f0 <__assert_fail@plt>
   293d8:	muleq	r4, ip, r7

000293dc <flatcc_builder_offset_vector_edit@@Base>:
   293dc:	ldr	r0, [r0, #16]
   293e0:	bx	lr

000293e4 <flatcc_builder_offset_vector_count@@Base>:
   293e4:	ldr	r3, [r0, #32]
   293e8:	ldr	r0, [r3, #20]
   293ec:	bx	lr

000293f0 <flatcc_builder_create_union_vector@@Base>:
   293f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   293f4:	mov	r4, r1
   293f8:	mov	r1, #4
   293fc:	strd	r6, [sp, #8]
   29400:	mov	r6, r0
   29404:	mov	r0, r4
   29408:	strd	r8, [sp, #16]
   2940c:	mov	r5, r2
   29410:	mov	r7, r3
   29414:	str	sl, [sp, #24]
   29418:	str	lr, [sp, #28]
   2941c:	sub	sp, sp, #8
   29420:	bl	256c4 <flatcc_builder_default_alloc@@Base+0x264>
   29424:	cmp	r0, #0
   29428:	bne	29594 <flatcc_builder_create_union_vector@@Base+0x1a4>
   2942c:	ldr	ip, [r4, #28]
   29430:	mov	lr, #4
   29434:	mov	r8, #5
   29438:	mvn	r9, #3
   2943c:	ldr	r3, [r4, #32]
   29440:	ldr	r2, [r4, #64]	; 0x40
   29444:	ldr	r1, [r4, #60]	; 0x3c
   29448:	strh	r8, [r3, #14]
   2944c:	str	lr, [r3, #16]
   29450:	sub	r2, r2, ip
   29454:	str	r0, [r3, #20]
   29458:	mov	r0, r4
   2945c:	cmn	r2, #4
   29460:	add	r1, r1, ip
   29464:	mvnhi	r2, #3
   29468:	str	r1, [r4, #16]
   2946c:	mov	r1, r7
   29470:	str	r2, [r4, #24]
   29474:	str	r9, [r3, #4]
   29478:	bl	26f6c <flatcc_builder_extend_offset_vector@@Base>
   2947c:	cmp	r0, #0
   29480:	beq	29594 <flatcc_builder_create_union_vector@@Base+0x1a4>
   29484:	ldr	r8, [r4, #20]
   29488:	ldr	r3, [r4, #24]
   2948c:	add	r2, r7, r8
   29490:	cmp	r2, r3
   29494:	str	r2, [r4, #20]
   29498:	bcs	295c0 <flatcc_builder_create_union_vector@@Base+0x1d0>
   2949c:	ldr	r1, [r4, #16]
   294a0:	adds	r8, r1, r8
   294a4:	beq	29594 <flatcc_builder_create_union_vector@@Base+0x1a4>
   294a8:	cmp	r7, #0
   294ac:	beq	294dc <flatcc_builder_create_union_vector@@Base+0xec>
   294b0:	add	lr, r5, r7, lsl #3
   294b4:	mov	r2, r5
   294b8:	sub	r0, r8, #1
   294bc:	sub	r3, r1, #4
   294c0:	ldrb	ip, [r2]
   294c4:	add	r2, r2, #8
   294c8:	strb	ip, [r0, #1]!
   294cc:	ldr	ip, [r2, #-4]
   294d0:	cmp	lr, r2
   294d4:	str	ip, [r3, #4]!
   294d8:	bne	294c0 <flatcc_builder_create_union_vector@@Base+0xd0>
   294dc:	mov	r3, r8
   294e0:	mov	r2, r7
   294e4:	mov	r0, r4
   294e8:	bl	257e8 <flatcc_builder_default_alloc@@Base+0x388>
   294ec:	subs	r5, r0, #0
   294f0:	beq	29620 <flatcc_builder_create_union_vector@@Base+0x230>
   294f4:	mvn	ip, #0
   294f8:	mov	r3, #1
   294fc:	mov	r2, r7
   29500:	mov	r1, r8
   29504:	mov	r0, r4
   29508:	stm	sp, {r3, ip}
   2950c:	bl	28b78 <flatcc_builder_create_vector@@Base>
   29510:	mov	r7, r0
   29514:	mov	r1, #0
   29518:	ldr	r0, [r4, #16]
   2951c:	ldr	r2, [r4, #20]
   29520:	bl	1459c <memset@plt>
   29524:	ldr	r3, [r4, #32]
   29528:	str	r7, [r6]
   2952c:	ldr	r0, [r4, #60]	; 0x3c
   29530:	str	r5, [r6, #4]
   29534:	ldr	r2, [r4, #64]	; 0x40
   29538:	ldr	ip, [r3]
   2953c:	ldmib	r3, {r1, lr}
   29540:	add	r0, r0, ip
   29544:	sub	r2, r2, ip
   29548:	str	r0, [r4, #16]
   2954c:	cmp	r2, r1
   29550:	ldrh	r0, [r4, #128]	; 0x80
   29554:	movcs	r2, r1
   29558:	str	lr, [r4, #20]
   2955c:	str	ip, [r4, #28]
   29560:	ldrh	ip, [r4, #130]	; 0x82
   29564:	str	r2, [r4, #24]
   29568:	ldr	r2, [r4, #156]	; 0x9c
   2956c:	str	r1, [r3, #4]
   29570:	cmp	r0, ip
   29574:	sub	r0, r3, #36	; 0x24
   29578:	strhcc	ip, [r4, #128]	; 0x80
   2957c:	ldrh	r1, [r3, #12]
   29580:	sub	r3, r2, #1
   29584:	str	r0, [r4, #32]
   29588:	strh	r1, [r4, #130]	; 0x82
   2958c:	str	r3, [r4, #156]	; 0x9c
   29590:	b	295a0 <flatcc_builder_create_union_vector@@Base+0x1b0>
   29594:	mov	r3, #0
   29598:	str	r3, [r6]
   2959c:	str	r3, [r6, #4]
   295a0:	mov	r0, r6
   295a4:	add	sp, sp, #8
   295a8:	ldrd	r4, [sp]
   295ac:	ldrd	r6, [sp, #8]
   295b0:	ldrd	r8, [sp, #16]
   295b4:	ldr	sl, [sp, #24]
   295b8:	add	sp, sp, #28
   295bc:	pop	{pc}		; (ldr pc, [sp], #4)
   295c0:	ldr	ip, [r4, #28]
   295c4:	mov	r0, #1
   295c8:	add	r1, r4, #60	; 0x3c
   295cc:	mov	r3, r0
   295d0:	str	r0, [sp]
   295d4:	ldr	sl, [r4, #48]	; 0x30
   295d8:	add	ip, ip, r0
   295dc:	ldr	r0, [r4, #40]	; 0x28
   295e0:	add	r2, ip, r2
   295e4:	blx	sl
   295e8:	cmp	r0, #0
   295ec:	bne	29594 <flatcc_builder_create_union_vector@@Base+0x1a4>
   295f0:	ldr	r1, [r4, #28]
   295f4:	ldr	r2, [r4, #32]
   295f8:	ldr	r3, [r4, #64]	; 0x40
   295fc:	ldr	r0, [r4, #60]	; 0x3c
   29600:	sub	r3, r3, r1
   29604:	cmn	r3, #4
   29608:	movhi	r3, r9
   2960c:	add	r1, r0, r1
   29610:	str	r1, [r4, #16]
   29614:	str	r3, [r4, #24]
   29618:	str	r9, [r2, #4]
   2961c:	b	294a0 <flatcc_builder_create_union_vector@@Base+0xb0>
   29620:	mov	r7, r5
   29624:	b	29514 <flatcc_builder_create_union_vector@@Base+0x124>

00029628 <flatcc_builder_create_union_vector_direct@@Base>:
   29628:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2962c:	strd	r6, [sp, #8]
   29630:	mov	r6, r0
   29634:	str	r8, [sp, #16]
   29638:	str	lr, [sp, #20]
   2963c:	sub	sp, sp, #88	; 0x58
   29640:	ldr	r4, [sp, #112]	; 0x70
   29644:	cmn	r4, #-1073741823	; 0xc0000001
   29648:	bhi	2971c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   2964c:	mov	r5, r1
   29650:	mov	r8, r2
   29654:	mov	r1, r3
   29658:	mov	r0, r5
   2965c:	mov	r3, r2
   29660:	mov	r2, r4
   29664:	bl	257e8 <flatcc_builder_default_alloc@@Base+0x388>
   29668:	subs	r7, r0, #0
   2966c:	beq	2971c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   29670:	ldrh	r3, [r5, #128]	; 0x80
   29674:	mov	r2, #1
   29678:	mov	r1, #4
   2967c:	str	r4, [sp, #12]
   29680:	ldr	r0, [r5, #136]	; 0x88
   29684:	str	r1, [sp, #16]
   29688:	str	r1, [sp, #28]
   2968c:	cmp	r3, #3
   29690:	movls	r3, #4
   29694:	strhls	r3, [r5, #128]	; 0x80
   29698:	add	r3, sp, #12
   2969c:	cmp	r4, #0
   296a0:	moveq	ip, #2
   296a4:	strd	r2, [sp, #20]
   296a8:	sub	r3, r0, r4
   296ac:	and	r3, r3, #3
   296b0:	bne	29744 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   296b4:	cmp	r3, #0
   296b8:	beq	296e4 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   296bc:	ldr	r4, [pc, #196]	; 29788 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   296c0:	add	r2, r2, #1
   296c4:	add	lr, sp, #88	; 0x58
   296c8:	add	lr, lr, r2, lsl #3
   296cc:	add	r1, r1, r3
   296d0:	mov	r2, ip
   296d4:	str	r1, [sp, #16]
   296d8:	str	ip, [sp, #20]
   296dc:	str	r4, [lr, #-72]	; 0xffffffb8
   296e0:	str	r3, [lr, #-68]	; 0xffffffbc
   296e4:	sub	r4, r0, r1
   296e8:	cmp	r0, r4
   296ec:	ble	29768 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   296f0:	mov	r3, r4
   296f4:	str	r1, [sp]
   296f8:	add	r1, sp, #24
   296fc:	ldr	r0, [r5, #36]	; 0x24
   29700:	ldr	r8, [r5, #44]	; 0x2c
   29704:	blx	r8
   29708:	cmp	r0, #0
   2970c:	bne	29784 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   29710:	stm	r6, {r4, r7}
   29714:	str	r4, [r5, #136]	; 0x88
   29718:	b	29728 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   2971c:	mov	r3, #0
   29720:	str	r3, [r6]
   29724:	str	r3, [r6, #4]
   29728:	mov	r0, r6
   2972c:	add	sp, sp, #88	; 0x58
   29730:	ldrd	r4, [sp]
   29734:	ldrd	r6, [sp, #8]
   29738:	ldr	r8, [sp, #16]
   2973c:	add	sp, sp, #20
   29740:	pop	{pc}		; (ldr pc, [sp], #4)
   29744:	mov	lr, #2
   29748:	add	r1, r4, r1
   2974c:	mov	r2, lr
   29750:	mov	ip, #3
   29754:	str	r1, [sp, #16]
   29758:	str	lr, [sp, #20]
   2975c:	str	r8, [sp, #32]
   29760:	str	r4, [sp, #36]	; 0x24
   29764:	b	296b4 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   29768:	movw	r1, #26932	; 0x6934
   2976c:	movt	r1, #4
   29770:	ldr	r3, [pc, #20]	; 2978c <flatcc_builder_create_union_vector_direct@@Base+0x164>
   29774:	movw	r0, #27124	; 0x69f4
   29778:	movt	r0, #4
   2977c:	movw	r2, #647	; 0x287
   29780:	bl	145f0 <__assert_fail@plt>
   29784:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   29788:	andeq	r6, r4, ip, lsl #5
   2978c:	andeq	r6, r4, r0, lsl r2

00029790 <flatcc_builder_start_union_vector@@Base>:
   29790:	ldrd	r2, [r0, #156]	; 0x9c
   29794:	strd	r4, [sp, #-16]!
   29798:	mov	r4, r0
   2979c:	str	r6, [sp, #8]
   297a0:	str	lr, [sp, #12]
   297a4:	sub	sp, sp, #8
   297a8:	add	r1, r2, #1
   297ac:	cmp	r1, r3
   297b0:	str	r1, [r0, #156]	; 0x9c
   297b4:	ble	298d0 <flatcc_builder_start_union_vector@@Base+0x140>
   297b8:	ldr	r3, [r0, #176]	; 0xb0
   297bc:	cmp	r3, #0
   297c0:	cmpgt	r1, r3
   297c4:	movgt	r3, #1
   297c8:	movle	r3, #0
   297cc:	bgt	298e0 <flatcc_builder_start_union_vector@@Base+0x150>
   297d0:	add	r2, r2, r2, lsl #3
   297d4:	ldr	r1, [r0, #88]	; 0x58
   297d8:	lsl	r5, r2, #2
   297dc:	add	r2, r5, #36	; 0x24
   297e0:	cmp	r2, r1
   297e4:	bls	29808 <flatcc_builder_start_union_vector@@Base+0x78>
   297e8:	mov	ip, #4
   297ec:	add	r1, r0, #84	; 0x54
   297f0:	ldr	r0, [r0, #40]	; 0x28
   297f4:	str	ip, [sp]
   297f8:	ldr	r6, [r4, #48]	; 0x30
   297fc:	blx	r6
   29800:	cmp	r0, #0
   29804:	bne	298e8 <flatcc_builder_start_union_vector@@Base+0x158>
   29808:	ldr	r3, [r4, #84]	; 0x54
   2980c:	add	r3, r3, r5
   29810:	cmp	r3, #0
   29814:	str	r3, [r4, #32]
   29818:	beq	298e0 <flatcc_builder_start_union_vector@@Base+0x150>
   2981c:	ldr	r2, [r4, #88]	; 0x58
   29820:	movw	r0, #36409	; 0x8e39
   29824:	movt	r0, #14563	; 0x38e3
   29828:	ldr	r1, [r4, #176]	; 0xb0
   2982c:	umull	r0, r2, r0, r2
   29830:	lsr	r2, r2, #3
   29834:	cmp	r1, #0
   29838:	cmpgt	r2, r1
   2983c:	movgt	r2, r1
   29840:	str	r2, [r4, #160]	; 0xa0
   29844:	ldr	r2, [r4, #20]
   29848:	mvn	r5, #3
   2984c:	mov	lr, #0
   29850:	ldr	r6, [r4, #28]
   29854:	ldrh	r0, [r4, #130]	; 0x82
   29858:	ldr	ip, [r4, #60]	; 0x3c
   2985c:	ldr	r1, [r4, #64]	; 0x40
   29860:	str	r2, [r3, #8]
   29864:	add	r2, r2, r6
   29868:	add	r2, r2, #7
   2986c:	strh	r0, [r3, #12]
   29870:	mov	r0, #4
   29874:	bic	r2, r2, #7
   29878:	add	ip, ip, r2
   2987c:	strh	r0, [r4, #130]	; 0x82
   29880:	mov	r0, lr
   29884:	sub	r1, r1, r2
   29888:	str	r6, [r3]
   2988c:	mov	r6, #8
   29890:	cmp	r1, r5
   29894:	str	lr, [r4, #20]
   29898:	movhi	r1, r5
   2989c:	str	r2, [r4, #28]
   298a0:	mov	r2, #7
   298a4:	strh	r2, [r3, #14]
   298a8:	str	r6, [r3, #16]
   298ac:	str	lr, [r3, #20]
   298b0:	str	ip, [r4, #16]
   298b4:	str	r1, [r4, #24]
   298b8:	str	r5, [r3, #4]
   298bc:	add	sp, sp, #8
   298c0:	ldrd	r4, [sp]
   298c4:	ldr	r6, [sp, #8]
   298c8:	add	sp, sp, #12
   298cc:	pop	{pc}		; (ldr pc, [sp], #4)
   298d0:	ldr	r3, [r0, #32]
   298d4:	add	r3, r3, #36	; 0x24
   298d8:	str	r3, [r0, #32]
   298dc:	b	29844 <flatcc_builder_start_union_vector@@Base+0xb4>
   298e0:	mvn	r0, #0
   298e4:	b	298bc <flatcc_builder_start_union_vector@@Base+0x12c>
   298e8:	bl	25584 <flatcc_builder_default_alloc@@Base+0x124>

000298ec <flatcc_builder_end_union_vector@@Base>:
   298ec:	ldr	r3, [r1, #32]
   298f0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   298f4:	ldrh	r2, [r3, #14]
   298f8:	strd	r6, [sp, #8]
   298fc:	strd	r8, [sp, #16]
   29900:	str	lr, [sp, #24]
   29904:	sub	sp, sp, #12
   29908:	cmp	r2, #7
   2990c:	bne	29ac8 <flatcc_builder_end_union_vector@@Base+0x1dc>
   29910:	ldr	r5, [r3, #20]
   29914:	mov	r4, r1
   29918:	mov	r6, r0
   2991c:	ldr	r8, [r1, #20]
   29920:	ldr	r3, [r1, #24]
   29924:	lsl	r7, r5, #2
   29928:	add	r2, r7, r5
   2992c:	add	r2, r2, r8
   29930:	cmp	r2, r3
   29934:	str	r2, [r1, #20]
   29938:	bcs	29a48 <flatcc_builder_end_union_vector@@Base+0x15c>
   2993c:	ldr	r3, [r1, #16]
   29940:	adds	r1, r3, r8
   29944:	beq	29ab0 <flatcc_builder_end_union_vector@@Base+0x1c4>
   29948:	cmp	r5, #0
   2994c:	add	r7, r1, r7
   29950:	subne	r0, r7, #1
   29954:	addne	lr, r3, r5, lsl #3
   29958:	subne	r2, r1, #4
   2995c:	beq	2997c <flatcc_builder_end_union_vector@@Base+0x90>
   29960:	ldrb	ip, [r3]
   29964:	add	r3, r3, #8
   29968:	strb	ip, [r0, #1]!
   2996c:	ldr	ip, [r3, #-4]
   29970:	cmp	lr, r3
   29974:	str	ip, [r2, #4]!
   29978:	bne	29960 <flatcc_builder_end_union_vector@@Base+0x74>
   2997c:	mov	r3, r7
   29980:	mov	r2, r5
   29984:	mov	r0, r4
   29988:	bl	257e8 <flatcc_builder_default_alloc@@Base+0x388>
   2998c:	subs	r8, r0, #0
   29990:	beq	29ac0 <flatcc_builder_end_union_vector@@Base+0x1d4>
   29994:	mvn	ip, #0
   29998:	mov	r3, #1
   2999c:	mov	r2, r5
   299a0:	mov	r1, r7
   299a4:	mov	r0, r4
   299a8:	stm	sp, {r3, ip}
   299ac:	bl	28b78 <flatcc_builder_create_vector@@Base>
   299b0:	mov	r5, r0
   299b4:	mov	r1, #0
   299b8:	ldr	r0, [r4, #16]
   299bc:	ldr	r2, [r4, #20]
   299c0:	bl	1459c <memset@plt>
   299c4:	ldr	r3, [r4, #32]
   299c8:	stm	r6, {r5, r8}
   299cc:	ldr	r0, [r4, #60]	; 0x3c
   299d0:	ldr	r2, [r4, #64]	; 0x40
   299d4:	ldr	ip, [r3]
   299d8:	ldmib	r3, {r1, lr}
   299dc:	add	r0, r0, ip
   299e0:	sub	r2, r2, ip
   299e4:	str	r0, [r4, #16]
   299e8:	cmp	r2, r1
   299ec:	ldrh	r0, [r4, #128]	; 0x80
   299f0:	movcs	r2, r1
   299f4:	str	lr, [r4, #20]
   299f8:	str	ip, [r4, #28]
   299fc:	ldrh	ip, [r4, #130]	; 0x82
   29a00:	str	r2, [r4, #24]
   29a04:	ldr	r2, [r4, #156]	; 0x9c
   29a08:	str	r1, [r3, #4]
   29a0c:	cmp	r0, ip
   29a10:	sub	r0, r3, #36	; 0x24
   29a14:	strhcc	ip, [r4, #128]	; 0x80
   29a18:	ldrh	r1, [r3, #12]
   29a1c:	sub	r3, r2, #1
   29a20:	str	r0, [r4, #32]
   29a24:	strh	r1, [r4, #130]	; 0x82
   29a28:	str	r3, [r4, #156]	; 0x9c
   29a2c:	mov	r0, r6
   29a30:	add	sp, sp, #12
   29a34:	ldrd	r4, [sp]
   29a38:	ldrd	r6, [sp, #8]
   29a3c:	ldrd	r8, [sp, #16]
   29a40:	add	sp, sp, #24
   29a44:	pop	{pc}		; (ldr pc, [sp], #4)
   29a48:	ldr	ip, [r4, #28]
   29a4c:	mov	r0, #1
   29a50:	add	r1, r1, #60	; 0x3c
   29a54:	mov	r3, r0
   29a58:	str	r0, [sp]
   29a5c:	ldr	r9, [r4, #48]	; 0x30
   29a60:	add	ip, ip, r0
   29a64:	ldr	r0, [r4, #40]	; 0x28
   29a68:	add	r2, ip, r2
   29a6c:	blx	r9
   29a70:	cmp	r0, #0
   29a74:	bne	29ab0 <flatcc_builder_end_union_vector@@Base+0x1c4>
   29a78:	ldr	r1, [r4, #28]
   29a7c:	ldr	r3, [r4, #60]	; 0x3c
   29a80:	ldr	r2, [r4, #64]	; 0x40
   29a84:	add	r3, r3, r1
   29a88:	sub	r2, r2, r1
   29a8c:	mvn	r1, #3
   29a90:	str	r3, [r4, #16]
   29a94:	cmn	r2, #4
   29a98:	mvnhi	r2, #3
   29a9c:	str	r2, [r4, #24]
   29aa0:	ldr	r2, [r4, #32]
   29aa4:	str	r1, [r2, #4]
   29aa8:	adds	r1, r3, r8
   29aac:	bne	29948 <flatcc_builder_end_union_vector@@Base+0x5c>
   29ab0:	mov	r3, #0
   29ab4:	str	r3, [r6]
   29ab8:	str	r3, [r6, #4]
   29abc:	b	29a2c <flatcc_builder_end_union_vector@@Base+0x140>
   29ac0:	mov	r5, r8
   29ac4:	b	299b4 <flatcc_builder_end_union_vector@@Base+0xc8>
   29ac8:	movw	r1, #26932	; 0x6934
   29acc:	movt	r1, #4
   29ad0:	ldr	r3, [pc, #12]	; 29ae4 <flatcc_builder_end_union_vector@@Base+0x1f8>
   29ad4:	movw	r0, #27712	; 0x6c40
   29ad8:	movt	r0, #4
   29adc:	movw	r2, #1617	; 0x651
   29ae0:	bl	145f0 <__assert_fail@plt>
   29ae4:	andeq	r6, r4, r8, asr #15

00029ae8 <flatcc_builder_union_vector_edit@@Base>:
   29ae8:	ldr	r0, [r0, #16]
   29aec:	bx	lr

00029af0 <flatcc_builder_union_vector_count@@Base>:
   29af0:	ldr	r3, [r0, #32]
   29af4:	ldr	r0, [r3, #20]
   29af8:	bx	lr

00029afc <flatcc_builder_extend_union_vector@@Base>:
   29afc:	ldr	ip, [r0, #32]
   29b00:	strd	r4, [sp, #-20]!	; 0xffffffec
   29b04:	mov	r4, r0
   29b08:	ldr	r3, [ip, #20]
   29b0c:	strd	r6, [sp, #8]
   29b10:	str	lr, [sp, #16]
   29b14:	sub	sp, sp, #12
   29b18:	adds	r3, r1, r3
   29b1c:	movcs	r2, #1
   29b20:	movcc	r2, #0
   29b24:	cmn	r3, #-536870911	; 0xe0000001
   29b28:	movls	r0, #0
   29b2c:	movhi	r0, #1
   29b30:	orrs	r5, r2, r0
   29b34:	bne	29bdc <flatcc_builder_extend_union_vector@@Base+0xe0>
   29b38:	ldr	r6, [r4, #20]
   29b3c:	str	r3, [ip, #20]
   29b40:	ldr	r3, [r4, #24]
   29b44:	add	r2, r6, r1, lsl #3
   29b48:	cmp	r2, r3
   29b4c:	str	r2, [r4, #20]
   29b50:	bcs	29b70 <flatcc_builder_extend_union_vector@@Base+0x74>
   29b54:	ldr	r0, [r4, #16]
   29b58:	add	r0, r0, r6
   29b5c:	add	sp, sp, #12
   29b60:	ldrd	r4, [sp]
   29b64:	ldrd	r6, [sp, #8]
   29b68:	add	sp, sp, #16
   29b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   29b70:	ldr	ip, [r4, #28]
   29b74:	mov	r0, #1
   29b78:	add	r1, r4, #60	; 0x3c
   29b7c:	mov	r3, r0
   29b80:	str	r0, [sp]
   29b84:	ldr	r7, [r4, #48]	; 0x30
   29b88:	add	ip, ip, r0
   29b8c:	ldr	r0, [r4, #40]	; 0x28
   29b90:	add	r2, ip, r2
   29b94:	blx	r7
   29b98:	cmp	r0, #0
   29b9c:	bne	29bd4 <flatcc_builder_extend_union_vector@@Base+0xd8>
   29ba0:	ldr	r2, [r4, #28]
   29ba4:	ldr	r0, [r4, #60]	; 0x3c
   29ba8:	ldr	r3, [r4, #64]	; 0x40
   29bac:	add	r0, r0, r2
   29bb0:	sub	r3, r3, r2
   29bb4:	mvn	r2, #3
   29bb8:	str	r0, [r4, #16]
   29bbc:	cmn	r3, #4
   29bc0:	mvnhi	r3, #3
   29bc4:	str	r3, [r4, #24]
   29bc8:	ldr	r3, [r4, #32]
   29bcc:	str	r2, [r3, #4]
   29bd0:	b	29b58 <flatcc_builder_extend_union_vector@@Base+0x5c>
   29bd4:	mov	r0, r5
   29bd8:	b	29b5c <flatcc_builder_extend_union_vector@@Base+0x60>
   29bdc:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>

00029be0 <flatcc_builder_truncate_union_vector@@Base>:
   29be0:	mov	r3, r0
   29be4:	ldr	r0, [r0, #32]
   29be8:	str	r4, [sp, #-8]!
   29bec:	ldrh	r2, [r0, #14]
   29bf0:	str	lr, [sp, #4]
   29bf4:	cmp	r2, #7
   29bf8:	bne	29c48 <flatcc_builder_truncate_union_vector@@Base+0x68>
   29bfc:	mov	lr, r1
   29c00:	ldr	r1, [r0, #20]
   29c04:	cmp	r1, lr
   29c08:	bcc	29c64 <flatcc_builder_truncate_union_vector@@Base+0x84>
   29c0c:	ldr	r2, [r0, #16]
   29c10:	sub	ip, r1, lr
   29c14:	mov	r1, #0
   29c18:	str	ip, [r0, #20]
   29c1c:	ldr	r0, [r3, #16]
   29c20:	ldr	ip, [r3, #20]
   29c24:	mul	r2, r2, lr
   29c28:	sub	ip, ip, r2
   29c2c:	add	r0, r0, ip
   29c30:	str	ip, [r3, #20]
   29c34:	bl	1459c <memset@plt>
   29c38:	ldr	r4, [sp]
   29c3c:	add	sp, sp, #4
   29c40:	mov	r0, #0
   29c44:	pop	{pc}		; (ldr pc, [sp], #4)
   29c48:	movw	r1, #26932	; 0x6934
   29c4c:	movt	r1, #4
   29c50:	ldr	r3, [pc, #40]	; 29c80 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   29c54:	movw	r0, #27712	; 0x6c40
   29c58:	movt	r0, #4
   29c5c:	movw	r2, #1665	; 0x681
   29c60:	bl	145f0 <__assert_fail@plt>
   29c64:	movw	r1, #26932	; 0x6934
   29c68:	movt	r1, #4
   29c6c:	ldr	r3, [pc, #12]	; 29c80 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   29c70:	movw	r0, #27492	; 0x6b64
   29c74:	movt	r0, #4
   29c78:	movw	r2, #1666	; 0x682
   29c7c:	bl	145f0 <__assert_fail@plt>
   29c80:	andeq	r6, r4, r8, ror #15

00029c84 <flatcc_builder_union_vector_push@@Base>:
   29c84:	strd	r4, [sp, #-20]!	; 0xffffffec
   29c88:	strd	r6, [sp, #8]
   29c8c:	str	lr, [sp, #16]
   29c90:	sub	sp, sp, #20
   29c94:	add	r3, sp, #16
   29c98:	stmdb	r3, {r1, r2}
   29c9c:	ldr	r2, [r0, #32]
   29ca0:	ldrh	r3, [r2, #14]
   29ca4:	cmp	r3, #7
   29ca8:	bne	29d6c <flatcc_builder_union_vector_push@@Base+0xe8>
   29cac:	ldr	r3, [r2, #20]
   29cb0:	cmn	r3, #-536870911	; 0xe0000001
   29cb4:	beq	29d64 <flatcc_builder_union_vector_push@@Base+0xe0>
   29cb8:	ldr	r5, [r0, #20]
   29cbc:	add	r3, r3, #1
   29cc0:	mov	r4, r0
   29cc4:	ldr	r1, [r0, #24]
   29cc8:	str	r3, [r2, #20]
   29ccc:	add	r3, r5, #8
   29cd0:	cmp	r3, r1
   29cd4:	str	r3, [r0, #20]
   29cd8:	bcs	29d00 <flatcc_builder_union_vector_push@@Base+0x7c>
   29cdc:	ldr	r3, [r0, #16]
   29ce0:	adds	r0, r3, r5
   29ce4:	ldrdne	r6, [sp, #8]
   29ce8:	strdne	r6, [r3, r5]
   29cec:	add	sp, sp, #20
   29cf0:	ldrd	r4, [sp]
   29cf4:	ldrd	r6, [sp, #8]
   29cf8:	add	sp, sp, #16
   29cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   29d00:	ldr	r2, [r4, #28]
   29d04:	mov	r0, #1
   29d08:	add	r1, r4, #60	; 0x3c
   29d0c:	mov	r3, r0
   29d10:	str	r0, [sp]
   29d14:	ldr	r0, [r4, #40]	; 0x28
   29d18:	add	r2, r5, r2
   29d1c:	ldr	r6, [r4, #48]	; 0x30
   29d20:	add	r2, r2, #9
   29d24:	blx	r6
   29d28:	cmp	r0, #0
   29d2c:	bne	29d64 <flatcc_builder_union_vector_push@@Base+0xe0>
   29d30:	ldr	r1, [r4, #28]
   29d34:	ldr	r3, [r4, #60]	; 0x3c
   29d38:	ldr	r2, [r4, #64]	; 0x40
   29d3c:	add	r3, r3, r1
   29d40:	sub	r2, r2, r1
   29d44:	mvn	r1, #3
   29d48:	str	r3, [r4, #16]
   29d4c:	cmn	r2, #4
   29d50:	mvnhi	r2, #3
   29d54:	str	r2, [r4, #24]
   29d58:	ldr	r2, [r4, #32]
   29d5c:	str	r1, [r2, #4]
   29d60:	b	29ce0 <flatcc_builder_union_vector_push@@Base+0x5c>
   29d64:	mov	r0, #0
   29d68:	b	29cec <flatcc_builder_union_vector_push@@Base+0x68>
   29d6c:	movw	r1, #26932	; 0x6934
   29d70:	movt	r1, #4
   29d74:	ldr	r3, [pc, #12]	; 29d88 <flatcc_builder_union_vector_push@@Base+0x104>
   29d78:	movw	r0, #27712	; 0x6c40
   29d7c:	movt	r0, #4
   29d80:	movw	r2, #1677	; 0x68d
   29d84:	bl	145f0 <__assert_fail@plt>
   29d88:	andeq	r6, r4, r0, lsl r8

00029d8c <flatcc_builder_append_union_vector@@Base>:
   29d8c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   29d90:	mov	r5, r0
   29d94:	ldr	r0, [r0, #32]
   29d98:	ldrh	r3, [r0, #14]
   29d9c:	strd	r6, [sp, #8]
   29da0:	strd	r8, [sp, #16]
   29da4:	str	lr, [sp, #24]
   29da8:	sub	sp, sp, #12
   29dac:	cmp	r3, #7
   29db0:	bne	29ea8 <flatcc_builder_append_union_vector@@Base+0x11c>
   29db4:	ldr	r3, [r0, #20]
   29db8:	mov	r7, r1
   29dbc:	adds	r1, r2, r3
   29dc0:	movcs	r4, #1
   29dc4:	movcc	r4, #0
   29dc8:	cmn	r1, #-536870911	; 0xe0000001
   29dcc:	movls	r3, #0
   29dd0:	movhi	r3, #1
   29dd4:	orrs	r4, r4, r3
   29dd8:	bne	29ea4 <flatcc_builder_append_union_vector@@Base+0x118>
   29ddc:	ldr	r8, [r5, #20]
   29de0:	lsl	r6, r2, #3
   29de4:	ldr	r3, [r5, #24]
   29de8:	str	r1, [r0, #20]
   29dec:	add	ip, r6, r8
   29df0:	cmp	ip, r3
   29df4:	str	ip, [r5, #20]
   29df8:	bcs	29e38 <flatcc_builder_append_union_vector@@Base+0xac>
   29dfc:	ldr	r3, [r5, #16]
   29e00:	adds	r3, r3, r8
   29e04:	beq	29e1c <flatcc_builder_append_union_vector@@Base+0x90>
   29e08:	mov	r0, r3
   29e0c:	mov	r2, r6
   29e10:	mov	r1, r7
   29e14:	bl	14524 <memcpy@plt>
   29e18:	mov	r3, r0
   29e1c:	mov	r0, r3
   29e20:	add	sp, sp, #12
   29e24:	ldrd	r4, [sp]
   29e28:	ldrd	r6, [sp, #8]
   29e2c:	ldrd	r8, [sp, #16]
   29e30:	add	sp, sp, #24
   29e34:	pop	{pc}		; (ldr pc, [sp], #4)
   29e38:	ldr	r2, [r5, #28]
   29e3c:	mov	r0, #1
   29e40:	add	r1, r5, #60	; 0x3c
   29e44:	mov	r3, r0
   29e48:	str	r0, [sp]
   29e4c:	ldr	r9, [r5, #48]	; 0x30
   29e50:	add	r2, r2, r0
   29e54:	ldr	r0, [r5, #40]	; 0x28
   29e58:	add	r2, r2, ip
   29e5c:	blx	r9
   29e60:	cmp	r0, #0
   29e64:	bne	29e9c <flatcc_builder_append_union_vector@@Base+0x110>
   29e68:	ldr	r1, [r5, #28]
   29e6c:	ldr	r3, [r5, #60]	; 0x3c
   29e70:	ldr	r2, [r5, #64]	; 0x40
   29e74:	add	r3, r3, r1
   29e78:	sub	r2, r2, r1
   29e7c:	mvn	r1, #3
   29e80:	str	r3, [r5, #16]
   29e84:	cmn	r2, #4
   29e88:	mvnhi	r2, #3
   29e8c:	str	r2, [r5, #24]
   29e90:	ldr	r2, [r5, #32]
   29e94:	str	r1, [r2, #4]
   29e98:	b	29e00 <flatcc_builder_append_union_vector@@Base+0x74>
   29e9c:	mov	r3, r4
   29ea0:	b	29e1c <flatcc_builder_append_union_vector@@Base+0x90>
   29ea4:	bl	25624 <flatcc_builder_default_alloc@@Base+0x1c4>
   29ea8:	movw	r1, #26932	; 0x6934
   29eac:	movt	r1, #4
   29eb0:	ldr	r3, [pc, #12]	; 29ec4 <flatcc_builder_append_union_vector@@Base+0x138>
   29eb4:	movw	r0, #27712	; 0x6c40
   29eb8:	movt	r0, #4
   29ebc:	movw	r2, #1692	; 0x69c
   29ec0:	bl	145f0 <__assert_fail@plt>
   29ec4:	andeq	r6, r4, r4, lsr r8

00029ec8 <flatcc_builder_create_string@@Base>:
   29ec8:	strd	r4, [sp, #-16]!
   29ecc:	mov	r4, r0
   29ed0:	mov	ip, #4
   29ed4:	str	r6, [sp, #8]
   29ed8:	cmp	r2, #0
   29edc:	str	lr, [sp, #12]
   29ee0:	sub	sp, sp, #88	; 0x58
   29ee4:	moveq	r6, #2
   29ee8:	ldr	lr, [r0, #136]	; 0x88
   29eec:	add	r3, sp, #12
   29ef0:	str	r2, [sp, #12]
   29ef4:	str	r3, [sp, #24]
   29ef8:	mov	r3, #1
   29efc:	moveq	r1, r3
   29f00:	str	ip, [sp, #28]
   29f04:	sub	r0, lr, r2
   29f08:	sub	r0, r0, #1
   29f0c:	and	r0, r0, #3
   29f10:	add	r0, r0, r3
   29f14:	beq	29f2c <flatcc_builder_create_string@@Base+0x64>
   29f18:	add	ip, r2, ip
   29f1c:	mov	r6, #3
   29f20:	str	r1, [sp, #32]
   29f24:	mov	r1, #2
   29f28:	str	r2, [sp, #36]	; 0x24
   29f2c:	ldr	r3, [pc, #136]	; 29fbc <flatcc_builder_create_string@@Base+0xf4>
   29f30:	add	r1, r1, #1
   29f34:	add	r2, sp, #88	; 0x58
   29f38:	add	ip, r0, ip
   29f3c:	add	r1, r2, r1, lsl #3
   29f40:	sub	r5, lr, ip
   29f44:	cmp	lr, r5
   29f48:	str	ip, [sp, #16]
   29f4c:	str	r6, [sp, #20]
   29f50:	str	r3, [r1, #-72]	; 0xffffffb8
   29f54:	str	r0, [r1, #-68]	; 0xffffffbc
   29f58:	ble	29f9c <flatcc_builder_create_string@@Base+0xd4>
   29f5c:	mov	r2, r6
   29f60:	mov	r3, r5
   29f64:	str	ip, [sp]
   29f68:	add	r1, sp, #24
   29f6c:	ldr	r0, [r4, #36]	; 0x24
   29f70:	ldr	r6, [r4, #44]	; 0x2c
   29f74:	blx	r6
   29f78:	cmp	r0, #0
   29f7c:	bne	29fb8 <flatcc_builder_create_string@@Base+0xf0>
   29f80:	mov	r0, r5
   29f84:	str	r5, [r4, #136]	; 0x88
   29f88:	add	sp, sp, #88	; 0x58
   29f8c:	ldrd	r4, [sp]
   29f90:	ldr	r6, [sp, #8]
   29f94:	add	sp, sp, #12
   29f98:	pop	{pc}		; (ldr pc, [sp], #4)
   29f9c:	movw	r1, #26932	; 0x6934
   29fa0:	movt	r1, #4
   29fa4:	movw	r0, #27124	; 0x69f4
   29fa8:	movt	r0, #4
   29fac:	sub	r3, r3, #124	; 0x7c
   29fb0:	movw	r2, #647	; 0x287
   29fb4:	bl	145f0 <__assert_fail@plt>
   29fb8:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   29fbc:	andeq	r6, r4, ip, lsl #5

00029fc0 <flatcc_builder_create_string_str@@Base>:
   29fc0:	strd	r4, [sp, #-16]!
   29fc4:	mov	r4, r0
   29fc8:	mov	r0, r1
   29fcc:	str	r6, [sp, #8]
   29fd0:	mov	r6, r1
   29fd4:	str	lr, [sp, #12]
   29fd8:	sub	sp, sp, #88	; 0x58
   29fdc:	bl	14578 <strlen@plt>
   29fe0:	ldr	r5, [r4, #136]	; 0x88
   29fe4:	mov	r2, #4
   29fe8:	add	r1, sp, #12
   29fec:	mov	r3, #1
   29ff0:	cmp	r0, #0
   29ff4:	str	r0, [sp, #12]
   29ff8:	str	r1, [sp, #24]
   29ffc:	str	r2, [sp, #28]
   2a000:	sub	ip, r5, #1
   2a004:	sub	ip, ip, r0
   2a008:	and	ip, ip, #3
   2a00c:	add	ip, ip, r3
   2a010:	beq	2a094 <flatcc_builder_create_string_str@@Base+0xd4>
   2a014:	add	lr, r0, r2
   2a018:	mov	r1, #2
   2a01c:	str	r6, [sp, #32]
   2a020:	mov	r2, #3
   2a024:	str	r0, [sp, #36]	; 0x24
   2a028:	ldr	r3, [pc, #148]	; 2a0c4 <flatcc_builder_create_string_str@@Base+0x104>
   2a02c:	add	r0, ip, lr
   2a030:	add	r1, r1, #1
   2a034:	add	lr, sp, #88	; 0x58
   2a038:	sub	r6, r5, r0
   2a03c:	add	r1, lr, r1, lsl #3
   2a040:	cmp	r5, r6
   2a044:	str	r0, [sp, #16]
   2a048:	str	r2, [sp, #20]
   2a04c:	str	r3, [r1, #-72]	; 0xffffffb8
   2a050:	str	ip, [r1, #-68]	; 0xffffffbc
   2a054:	ble	2a0a4 <flatcc_builder_create_string_str@@Base+0xe4>
   2a058:	mov	r3, r6
   2a05c:	add	r1, sp, #24
   2a060:	str	r0, [sp]
   2a064:	ldr	r0, [r4, #36]	; 0x24
   2a068:	ldr	r5, [r4, #44]	; 0x2c
   2a06c:	blx	r5
   2a070:	cmp	r0, #0
   2a074:	bne	2a0c0 <flatcc_builder_create_string_str@@Base+0x100>
   2a078:	mov	r0, r6
   2a07c:	str	r6, [r4, #136]	; 0x88
   2a080:	add	sp, sp, #88	; 0x58
   2a084:	ldrd	r4, [sp]
   2a088:	ldr	r6, [sp, #8]
   2a08c:	add	sp, sp, #12
   2a090:	pop	{pc}		; (ldr pc, [sp], #4)
   2a094:	mov	lr, r2
   2a098:	mov	r1, r3
   2a09c:	mov	r2, #2
   2a0a0:	b	2a028 <flatcc_builder_create_string_str@@Base+0x68>
   2a0a4:	movw	r1, #26932	; 0x6934
   2a0a8:	movt	r1, #4
   2a0ac:	movw	r0, #27124	; 0x69f4
   2a0b0:	movt	r0, #4
   2a0b4:	sub	r3, r3, #124	; 0x7c
   2a0b8:	movw	r2, #647	; 0x287
   2a0bc:	bl	145f0 <__assert_fail@plt>
   2a0c0:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   2a0c4:	andeq	r6, r4, ip, lsl #5

0002a0c8 <flatcc_builder_create_string_strn@@Base>:
   2a0c8:	strd	r4, [sp, #-16]!
   2a0cc:	mov	r4, r0
   2a0d0:	mov	r5, r2
   2a0d4:	str	r6, [sp, #8]
   2a0d8:	mov	r6, r1
   2a0dc:	mov	r1, #0
   2a0e0:	mov	r0, r6
   2a0e4:	str	lr, [sp, #12]
   2a0e8:	sub	sp, sp, #88	; 0x58
   2a0ec:	bl	145c0 <memchr@plt>
   2a0f0:	ldr	lr, [r4, #136]	; 0x88
   2a0f4:	cmp	r0, #0
   2a0f8:	mov	ip, #4
   2a0fc:	subne	r5, r0, r6
   2a100:	add	r3, sp, #12
   2a104:	cmp	r5, #0
   2a108:	mov	r0, #1
   2a10c:	moveq	r2, #2
   2a110:	str	r5, [sp, #12]
   2a114:	str	r3, [sp, #24]
   2a118:	sub	r1, lr, #1
   2a11c:	str	ip, [sp, #28]
   2a120:	sub	r1, r1, r5
   2a124:	and	r1, r1, #3
   2a128:	add	r1, r1, r0
   2a12c:	beq	2a144 <flatcc_builder_create_string_strn@@Base+0x7c>
   2a130:	add	ip, r5, ip
   2a134:	mov	r2, #3
   2a138:	str	r6, [sp, #32]
   2a13c:	mov	r0, #2
   2a140:	str	r5, [sp, #36]	; 0x24
   2a144:	ldr	r3, [pc, #132]	; 2a1d0 <flatcc_builder_create_string_strn@@Base+0x108>
   2a148:	add	r5, sp, #88	; 0x58
   2a14c:	add	r0, r0, #1
   2a150:	add	r0, r5, r0, lsl #3
   2a154:	add	ip, r1, ip
   2a158:	sub	r5, lr, ip
   2a15c:	cmp	lr, r5
   2a160:	str	ip, [sp, #16]
   2a164:	str	r2, [sp, #20]
   2a168:	str	r3, [r0, #-72]	; 0xffffffb8
   2a16c:	str	r1, [r0, #-68]	; 0xffffffbc
   2a170:	ble	2a1b0 <flatcc_builder_create_string_strn@@Base+0xe8>
   2a174:	mov	r3, r5
   2a178:	add	r1, sp, #24
   2a17c:	str	ip, [sp]
   2a180:	ldr	r0, [r4, #36]	; 0x24
   2a184:	ldr	r6, [r4, #44]	; 0x2c
   2a188:	blx	r6
   2a18c:	cmp	r0, #0
   2a190:	bne	2a1cc <flatcc_builder_create_string_strn@@Base+0x104>
   2a194:	mov	r0, r5
   2a198:	str	r5, [r4, #136]	; 0x88
   2a19c:	add	sp, sp, #88	; 0x58
   2a1a0:	ldrd	r4, [sp]
   2a1a4:	ldr	r6, [sp, #8]
   2a1a8:	add	sp, sp, #12
   2a1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1b0:	movw	r1, #26932	; 0x6934
   2a1b4:	movt	r1, #4
   2a1b8:	movw	r0, #27124	; 0x69f4
   2a1bc:	movt	r0, #4
   2a1c0:	sub	r3, r3, #124	; 0x7c
   2a1c4:	movw	r2, #647	; 0x287
   2a1c8:	bl	145f0 <__assert_fail@plt>
   2a1cc:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   2a1d0:	andeq	r6, r4, ip, lsl #5

0002a1d4 <flatcc_builder_end_string@@Base>:
   2a1d4:	ldr	r3, [r0, #32]
   2a1d8:	strd	r4, [sp, #-16]!
   2a1dc:	ldrh	r2, [r3, #14]
   2a1e0:	str	r6, [sp, #8]
   2a1e4:	str	lr, [sp, #12]
   2a1e8:	sub	sp, sp, #88	; 0x58
   2a1ec:	cmp	r2, #6
   2a1f0:	bne	2a378 <flatcc_builder_end_string@@Base+0x1a4>
   2a1f4:	ldr	r3, [r3, #20]
   2a1f8:	mov	r4, r0
   2a1fc:	ldr	r2, [r0, #20]
   2a200:	cmp	r3, r2
   2a204:	bne	2a35c <flatcc_builder_end_string@@Base+0x188>
   2a208:	ldr	lr, [r4, #136]	; 0x88
   2a20c:	add	r2, sp, #12
   2a210:	mov	ip, #4
   2a214:	cmp	r3, #0
   2a218:	mov	r0, #1
   2a21c:	str	r3, [sp, #12]
   2a220:	str	r2, [sp, #24]
   2a224:	str	ip, [sp, #28]
   2a228:	ldr	r2, [r4, #16]
   2a22c:	moveq	r2, #2
   2a230:	sub	r1, lr, r3
   2a234:	sub	r1, r1, #1
   2a238:	and	r1, r1, #3
   2a23c:	add	r1, r1, r0
   2a240:	bne	2a328 <flatcc_builder_end_string@@Base+0x154>
   2a244:	ldr	r3, [pc, #328]	; 2a394 <flatcc_builder_end_string@@Base+0x1c0>
   2a248:	add	r5, sp, #88	; 0x58
   2a24c:	add	r0, r0, #1
   2a250:	add	r0, r5, r0, lsl #3
   2a254:	add	ip, r1, ip
   2a258:	sub	r5, lr, ip
   2a25c:	cmp	lr, r5
   2a260:	str	ip, [sp, #16]
   2a264:	str	r2, [sp, #20]
   2a268:	str	r3, [r0, #-72]	; 0xffffffb8
   2a26c:	str	r1, [r0, #-68]	; 0xffffffbc
   2a270:	ble	2a340 <flatcc_builder_end_string@@Base+0x16c>
   2a274:	add	r1, sp, #24
   2a278:	mov	r3, r5
   2a27c:	str	ip, [sp]
   2a280:	ldr	r0, [r4, #36]	; 0x24
   2a284:	ldr	r6, [r4, #44]	; 0x2c
   2a288:	blx	r6
   2a28c:	subs	r1, r0, #0
   2a290:	bne	2a33c <flatcc_builder_end_string@@Base+0x168>
   2a294:	cmp	r5, #0
   2a298:	str	r5, [r4, #136]	; 0x88
   2a29c:	beq	2a310 <flatcc_builder_end_string@@Base+0x13c>
   2a2a0:	ldr	r0, [r4, #16]
   2a2a4:	ldr	r2, [r4, #20]
   2a2a8:	bl	1459c <memset@plt>
   2a2ac:	ldr	r3, [r4, #32]
   2a2b0:	ldr	r0, [r4, #60]	; 0x3c
   2a2b4:	ldr	r2, [r4, #64]	; 0x40
   2a2b8:	ldr	ip, [r3]
   2a2bc:	ldmib	r3, {r1, lr}
   2a2c0:	add	r0, r0, ip
   2a2c4:	sub	r2, r2, ip
   2a2c8:	str	r0, [r4, #16]
   2a2cc:	cmp	r2, r1
   2a2d0:	ldrh	r0, [r4, #128]	; 0x80
   2a2d4:	movcs	r2, r1
   2a2d8:	str	lr, [r4, #20]
   2a2dc:	str	ip, [r4, #28]
   2a2e0:	ldrh	ip, [r4, #130]	; 0x82
   2a2e4:	str	r2, [r4, #24]
   2a2e8:	ldr	r2, [r4, #156]	; 0x9c
   2a2ec:	str	r1, [r3, #4]
   2a2f0:	cmp	r0, ip
   2a2f4:	sub	r0, r3, #36	; 0x24
   2a2f8:	strhcc	ip, [r4, #128]	; 0x80
   2a2fc:	ldrh	r1, [r3, #12]
   2a300:	sub	r3, r2, #1
   2a304:	str	r0, [r4, #32]
   2a308:	strh	r1, [r4, #130]	; 0x82
   2a30c:	str	r3, [r4, #156]	; 0x9c
   2a310:	mov	r0, r5
   2a314:	add	sp, sp, #88	; 0x58
   2a318:	ldrd	r4, [sp]
   2a31c:	ldr	r6, [sp, #8]
   2a320:	add	sp, sp, #12
   2a324:	pop	{pc}		; (ldr pc, [sp], #4)
   2a328:	add	ip, r3, ip
   2a32c:	mov	r0, #2
   2a330:	strd	r2, [sp, #32]
   2a334:	mov	r2, #3
   2a338:	b	2a244 <flatcc_builder_end_string@@Base+0x70>
   2a33c:	bl	255fc <flatcc_builder_default_alloc@@Base+0x19c>
   2a340:	movw	r1, #26932	; 0x6934
   2a344:	movt	r1, #4
   2a348:	movw	r0, #27124	; 0x69f4
   2a34c:	movt	r0, #4
   2a350:	sub	r3, r3, #124	; 0x7c
   2a354:	movw	r2, #647	; 0x287
   2a358:	bl	145f0 <__assert_fail@plt>
   2a35c:	movw	r1, #26932	; 0x6934
   2a360:	movt	r1, #4
   2a364:	ldr	r3, [pc, #44]	; 2a398 <flatcc_builder_end_string@@Base+0x1c4>
   2a368:	movw	r0, #27764	; 0x6c74
   2a36c:	movt	r0, #4
   2a370:	movw	r2, #1733	; 0x6c5
   2a374:	bl	145f0 <__assert_fail@plt>
   2a378:	movw	r1, #26932	; 0x6934
   2a37c:	movt	r1, #4
   2a380:	ldr	r3, [pc, #16]	; 2a398 <flatcc_builder_end_string@@Base+0x1c4>
   2a384:	movw	r0, #27060	; 0x69b4
   2a388:	movt	r0, #4
   2a38c:	movw	r2, #1732	; 0x6c4
   2a390:	bl	145f0 <__assert_fail@plt>
   2a394:	andeq	r6, r4, ip, lsl #5
   2a398:	andeq	r6, r4, r8, asr r8

0002a39c <flatcc_builder_string_edit@@Base>:
   2a39c:	ldr	r0, [r0, #16]
   2a3a0:	bx	lr

0002a3a4 <flatcc_builder_string_len@@Base>:
   2a3a4:	ldr	r3, [r0, #32]
   2a3a8:	ldr	r0, [r3, #20]
   2a3ac:	bx	lr

0002a3b0 <flatcc_builder_table_add@@Base>:
   2a3b0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2a3b4:	mov	r4, r0
   2a3b8:	ldr	r0, [r0, #32]
   2a3bc:	ldrh	r0, [r0, #14]
   2a3c0:	strd	r6, [sp, #8]
   2a3c4:	strd	r8, [sp, #16]
   2a3c8:	str	lr, [sp, #24]
   2a3cc:	sub	sp, sp, #12
   2a3d0:	cmp	r0, #3
   2a3d4:	bne	2a538 <flatcc_builder_table_add@@Base+0x188>
   2a3d8:	movw	r0, #32764	; 0x7ffc
   2a3dc:	cmp	r1, r0
   2a3e0:	bhi	2a51c <flatcc_builder_table_add@@Base+0x16c>
   2a3e4:	ldrh	r0, [r4, #130]	; 0x82
   2a3e8:	lsl	r7, r1, #1
   2a3ec:	ldr	ip, [r4, #4]
   2a3f0:	cmp	r0, r3
   2a3f4:	strhcc	r3, [r4, #130]	; 0x82
   2a3f8:	ldrh	r5, [ip, r7]
   2a3fc:	add	ip, ip, r7
   2a400:	cmp	r5, #0
   2a404:	bne	2a500 <flatcc_builder_table_add@@Base+0x150>
   2a408:	ldr	r9, [r4, #12]
   2a40c:	movw	lr, #31153	; 0x79b1
   2a410:	movt	lr, #40503	; 0x9e37
   2a414:	uxth	r6, r1
   2a418:	sub	r8, r3, #1
   2a41c:	ldr	r0, [r4, #20]
   2a420:	rsb	r3, r3, #0
   2a424:	eor	r1, r1, r9
   2a428:	mul	r1, lr, r1
   2a42c:	add	r8, r8, r0
   2a430:	ldr	r0, [r4, #24]
   2a434:	and	r8, r8, r3
   2a438:	eor	r1, r1, r2
   2a43c:	add	r2, r2, r8
   2a440:	mul	r1, lr, r1
   2a444:	cmp	r2, r0
   2a448:	str	r1, [r4, #12]
   2a44c:	str	r2, [r4, #20]
   2a450:	bcs	2a48c <flatcc_builder_table_add@@Base+0xdc>
   2a454:	ldr	r0, [r4, #16]
   2a458:	add	r3, r8, #4
   2a45c:	add	r0, r0, r8
   2a460:	strh	r3, [ip]
   2a464:	ldrh	r3, [r4, #8]
   2a468:	cmp	r3, r6
   2a46c:	addls	r6, r6, #1
   2a470:	strhls	r6, [r4, #8]
   2a474:	add	sp, sp, #12
   2a478:	ldrd	r4, [sp]
   2a47c:	ldrd	r6, [sp, #8]
   2a480:	ldrd	r8, [sp, #16]
   2a484:	add	sp, sp, #24
   2a488:	pop	{pc}		; (ldr pc, [sp], #4)
   2a48c:	ldr	ip, [r4, #28]
   2a490:	mov	r0, #1
   2a494:	add	r1, r4, #60	; 0x3c
   2a498:	mov	r3, r0
   2a49c:	str	r0, [sp]
   2a4a0:	ldr	r9, [r4, #48]	; 0x30
   2a4a4:	add	ip, ip, r0
   2a4a8:	ldr	r0, [r4, #40]	; 0x28
   2a4ac:	add	r2, ip, r2
   2a4b0:	blx	r9
   2a4b4:	cmp	r0, #0
   2a4b8:	bne	2a4f8 <flatcc_builder_table_add@@Base+0x148>
   2a4bc:	ldr	ip, [r4, #4]
   2a4c0:	movw	r2, #65532	; 0xfffc
   2a4c4:	ldr	r5, [r4, #28]
   2a4c8:	ldr	r3, [r4, #64]	; 0x40
   2a4cc:	add	ip, ip, r7
   2a4d0:	ldr	r0, [r4, #60]	; 0x3c
   2a4d4:	ldr	r1, [r4, #32]
   2a4d8:	sub	r3, r3, r5
   2a4dc:	cmp	r3, r2
   2a4e0:	add	r0, r0, r5
   2a4e4:	movcs	r3, r2
   2a4e8:	str	r0, [r4, #16]
   2a4ec:	str	r3, [r4, #24]
   2a4f0:	str	r2, [r1, #4]
   2a4f4:	b	2a458 <flatcc_builder_table_add@@Base+0xa8>
   2a4f8:	mov	r0, r5
   2a4fc:	b	2a474 <flatcc_builder_table_add@@Base+0xc4>
   2a500:	movw	r1, #26932	; 0x6934
   2a504:	movt	r1, #4
   2a508:	ldr	r3, [pc, #68]	; 2a554 <flatcc_builder_table_add@@Base+0x1a4>
   2a50c:	movw	r0, #27124	; 0x69f4
   2a510:	movt	r0, #4
   2a514:	movw	r2, #1784	; 0x6f8
   2a518:	bl	145f0 <__assert_fail@plt>
   2a51c:	movw	r1, #26932	; 0x6934
   2a520:	movt	r1, #4
   2a524:	ldr	r3, [pc, #40]	; 2a554 <flatcc_builder_table_add@@Base+0x1a4>
   2a528:	movw	r0, #27800	; 0x6c98
   2a52c:	movt	r0, #4
   2a530:	movw	r2, #1774	; 0x6ee
   2a534:	bl	145f0 <__assert_fail@plt>
   2a538:	movw	r1, #26932	; 0x6934
   2a53c:	movt	r1, #4
   2a540:	ldr	r3, [pc, #12]	; 2a554 <flatcc_builder_table_add@@Base+0x1a4>
   2a544:	movw	r0, #27648	; 0x6c00
   2a548:	movt	r0, #4
   2a54c:	movw	r2, #1773	; 0x6ed
   2a550:	bl	145f0 <__assert_fail@plt>
   2a554:	andeq	r6, r4, r4, ror r8

0002a558 <flatcc_builder_table_edit@@Base>:
   2a558:	ldr	r2, [r0, #32]
   2a55c:	ldrh	r2, [r2, #14]
   2a560:	cmp	r2, #3
   2a564:	bne	2a57c <flatcc_builder_table_edit@@Base+0x24>
   2a568:	ldr	r3, [r0, #20]
   2a56c:	ldr	r0, [r0, #16]
   2a570:	sub	r3, r3, r1
   2a574:	add	r0, r0, r3
   2a578:	bx	lr
   2a57c:	movw	r1, #26932	; 0x6934
   2a580:	movt	r1, #4
   2a584:	ldr	r3, [pc, #20]	; 2a5a0 <flatcc_builder_table_edit@@Base+0x48>
   2a588:	movw	r0, #27648	; 0x6c00
   2a58c:	movt	r0, #4
   2a590:	str	r4, [sp, #-8]!
   2a594:	movw	r2, #1794	; 0x702
   2a598:	str	lr, [sp, #4]
   2a59c:	bl	145f0 <__assert_fail@plt>
   2a5a0:	muleq	r4, r0, r8

0002a5a4 <flatcc_builder_table_add_copy@@Base>:
   2a5a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a5a8:	mov	r5, r3
   2a5ac:	ldr	r3, [r0, #32]
   2a5b0:	ldrh	r3, [r3, #14]
   2a5b4:	strd	r6, [sp, #8]
   2a5b8:	strd	r8, [sp, #16]
   2a5bc:	strd	sl, [sp, #24]
   2a5c0:	str	lr, [sp, #32]
   2a5c4:	sub	sp, sp, #12
   2a5c8:	cmp	r3, #3
   2a5cc:	ldrh	ip, [sp, #48]	; 0x30
   2a5d0:	bne	2a75c <flatcc_builder_table_add_copy@@Base+0x1b8>
   2a5d4:	movw	r3, #32764	; 0x7ffc
   2a5d8:	cmp	r1, r3
   2a5dc:	bhi	2a740 <flatcc_builder_table_add_copy@@Base+0x19c>
   2a5e0:	ldrh	r3, [r0, #130]	; 0x82
   2a5e4:	mov	r7, r2
   2a5e8:	lsl	r8, r1, #1
   2a5ec:	mov	r4, r0
   2a5f0:	ldr	r2, [r0, #4]
   2a5f4:	cmp	r3, ip
   2a5f8:	strhcc	ip, [r0, #130]	; 0x82
   2a5fc:	ldrh	r9, [r2, r8]
   2a600:	add	r2, r2, r8
   2a604:	cmp	r9, #0
   2a608:	bne	2a724 <flatcc_builder_table_add_copy@@Base+0x180>
   2a60c:	ldr	lr, [r4, #12]
   2a610:	movw	r0, #31153	; 0x79b1
   2a614:	movt	r0, #40503	; 0x9e37
   2a618:	uxth	r6, r1
   2a61c:	sub	r3, ip, #1
   2a620:	ldr	sl, [r4, #20]
   2a624:	rsb	ip, ip, #0
   2a628:	eor	r1, r1, lr
   2a62c:	ldr	lr, [r4, #24]
   2a630:	mul	r1, r0, r1
   2a634:	add	r3, r3, sl
   2a638:	and	sl, r3, ip
   2a63c:	add	ip, r5, sl
   2a640:	eor	r1, r1, r5
   2a644:	cmp	ip, lr
   2a648:	str	ip, [r4, #20]
   2a64c:	mul	r1, r0, r1
   2a650:	str	r1, [r4, #12]
   2a654:	bcs	2a6b0 <flatcc_builder_table_add_copy@@Base+0x10c>
   2a658:	ldr	r3, [r4, #16]
   2a65c:	add	r1, sl, #4
   2a660:	strh	r1, [r2]
   2a664:	ldrh	r2, [r4, #8]
   2a668:	cmp	r2, r6
   2a66c:	addls	r6, r6, #1
   2a670:	strhls	r6, [r4, #8]
   2a674:	adds	r3, r3, sl
   2a678:	beq	2a690 <flatcc_builder_table_add_copy@@Base+0xec>
   2a67c:	mov	r0, r3
   2a680:	mov	r2, r5
   2a684:	mov	r1, r7
   2a688:	bl	14524 <memcpy@plt>
   2a68c:	mov	r3, r0
   2a690:	mov	r0, r3
   2a694:	add	sp, sp, #12
   2a698:	ldrd	r4, [sp]
   2a69c:	ldrd	r6, [sp, #8]
   2a6a0:	ldrd	r8, [sp, #16]
   2a6a4:	ldrd	sl, [sp, #24]
   2a6a8:	add	sp, sp, #32
   2a6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6b0:	ldr	r2, [r4, #28]
   2a6b4:	mov	r0, #1
   2a6b8:	add	r1, r4, #60	; 0x3c
   2a6bc:	mov	r3, r0
   2a6c0:	str	r0, [sp]
   2a6c4:	ldr	fp, [r4, #48]	; 0x30
   2a6c8:	add	r2, r2, r0
   2a6cc:	ldr	r0, [r4, #40]	; 0x28
   2a6d0:	add	r2, r2, ip
   2a6d4:	blx	fp
   2a6d8:	cmp	r0, #0
   2a6dc:	bne	2a71c <flatcc_builder_table_add_copy@@Base+0x178>
   2a6e0:	ldr	r2, [r4, #4]
   2a6e4:	movw	r0, #65532	; 0xfffc
   2a6e8:	ldr	r3, [r4, #28]
   2a6ec:	ldr	r1, [r4, #64]	; 0x40
   2a6f0:	add	r2, r2, r8
   2a6f4:	ldr	lr, [r4, #60]	; 0x3c
   2a6f8:	ldr	ip, [r4, #32]
   2a6fc:	sub	r1, r1, r3
   2a700:	cmp	r1, r0
   2a704:	add	r3, lr, r3
   2a708:	movcs	r1, r0
   2a70c:	str	r3, [r4, #16]
   2a710:	str	r1, [r4, #24]
   2a714:	str	r0, [ip, #4]
   2a718:	b	2a65c <flatcc_builder_table_add_copy@@Base+0xb8>
   2a71c:	mov	r3, r9
   2a720:	b	2a690 <flatcc_builder_table_add_copy@@Base+0xec>
   2a724:	movw	r1, #26932	; 0x6934
   2a728:	movt	r1, #4
   2a72c:	ldr	r3, [pc, #68]	; 2a778 <flatcc_builder_table_add_copy@@Base+0x1d4>
   2a730:	movw	r0, #27124	; 0x69f4
   2a734:	movt	r0, #4
   2a738:	movw	r2, #1784	; 0x6f8
   2a73c:	bl	145f0 <__assert_fail@plt>
   2a740:	movw	r1, #26932	; 0x6934
   2a744:	movt	r1, #4
   2a748:	ldr	r3, [pc, #40]	; 2a778 <flatcc_builder_table_add_copy@@Base+0x1d4>
   2a74c:	movw	r0, #27800	; 0x6c98
   2a750:	movt	r0, #4
   2a754:	movw	r2, #1774	; 0x6ee
   2a758:	bl	145f0 <__assert_fail@plt>
   2a75c:	movw	r1, #26932	; 0x6934
   2a760:	movt	r1, #4
   2a764:	ldr	r3, [pc, #12]	; 2a778 <flatcc_builder_table_add_copy@@Base+0x1d4>
   2a768:	movw	r0, #27648	; 0x6c00
   2a76c:	movt	r0, #4
   2a770:	movw	r2, #1773	; 0x6ed
   2a774:	bl	145f0 <__assert_fail@plt>
   2a778:	andeq	r6, r4, r4, ror r8

0002a77c <flatcc_builder_table_add_offset@@Base>:
   2a77c:	ldr	r3, [r0, #32]
   2a780:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2a784:	ldrh	r3, [r3, #14]
   2a788:	strd	r6, [sp, #8]
   2a78c:	strd	r8, [sp, #16]
   2a790:	str	lr, [sp, #24]
   2a794:	sub	sp, sp, #12
   2a798:	cmp	r3, #3
   2a79c:	bne	2a8fc <flatcc_builder_table_add_offset@@Base+0x180>
   2a7a0:	movw	r3, #32764	; 0x7ffc
   2a7a4:	cmp	r1, r3
   2a7a8:	bhi	2a8e0 <flatcc_builder_table_add_offset@@Base+0x164>
   2a7ac:	ldr	ip, [r0, #4]
   2a7b0:	lsl	r7, r1, #1
   2a7b4:	mov	r4, r0
   2a7b8:	ldrh	r5, [ip, r7]
   2a7bc:	add	ip, ip, r7
   2a7c0:	cmp	r5, #0
   2a7c4:	bne	2a8c4 <flatcc_builder_table_add_offset@@Base+0x148>
   2a7c8:	ldr	r2, [r0, #12]
   2a7cc:	movw	r3, #31153	; 0x79b1
   2a7d0:	movt	r3, #40503	; 0x9e37
   2a7d4:	uxth	r6, r1
   2a7d8:	ldr	r8, [r0, #20]
   2a7dc:	ldr	r0, [r0, #24]
   2a7e0:	eor	r1, r1, r2
   2a7e4:	mul	r1, r3, r1
   2a7e8:	add	r8, r8, #3
   2a7ec:	bic	r8, r8, #3
   2a7f0:	add	r2, r8, #4
   2a7f4:	eor	r1, r1, #4
   2a7f8:	cmp	r2, r0
   2a7fc:	str	r2, [r4, #20]
   2a800:	mul	r1, r3, r1
   2a804:	str	r1, [r4, #12]
   2a808:	bhi	2a858 <flatcc_builder_table_add_offset@@Base+0xdc>
   2a80c:	ldr	r0, [r4, #16]
   2a810:	uxth	r2, r8
   2a814:	add	r0, r0, r8
   2a818:	add	r3, r2, #4
   2a81c:	strh	r3, [ip]
   2a820:	ldrh	r3, [r4, #8]
   2a824:	cmp	r3, r6
   2a828:	ldr	r3, [r4]
   2a82c:	addls	r6, r6, #1
   2a830:	strhls	r6, [r4, #8]
   2a834:	add	r1, r3, #2
   2a838:	str	r1, [r4]
   2a83c:	strh	r2, [r3]
   2a840:	add	sp, sp, #12
   2a844:	ldrd	r4, [sp]
   2a848:	ldrd	r6, [sp, #8]
   2a84c:	ldrd	r8, [sp, #16]
   2a850:	add	sp, sp, #24
   2a854:	pop	{pc}		; (ldr pc, [sp], #4)
   2a858:	ldr	ip, [r4, #28]
   2a85c:	mov	r0, #1
   2a860:	add	r1, r4, #60	; 0x3c
   2a864:	mov	r3, r0
   2a868:	str	r0, [sp]
   2a86c:	ldr	r0, [r4, #40]	; 0x28
   2a870:	add	r2, r2, ip
   2a874:	ldr	r9, [r4, #48]	; 0x30
   2a878:	blx	r9
   2a87c:	cmp	r0, #0
   2a880:	bne	2a8bc <flatcc_builder_table_add_offset@@Base+0x140>
   2a884:	ldr	ip, [r4, #4]
   2a888:	movw	r2, #65532	; 0xfffc
   2a88c:	ldrd	r0, [r4, #28]
   2a890:	ldr	r3, [r4, #64]	; 0x40
   2a894:	add	ip, ip, r7
   2a898:	ldr	r5, [r4, #60]	; 0x3c
   2a89c:	sub	r3, r3, r0
   2a8a0:	cmp	r3, r2
   2a8a4:	add	r0, r5, r0
   2a8a8:	movcs	r3, r2
   2a8ac:	str	r0, [r4, #16]
   2a8b0:	str	r3, [r4, #24]
   2a8b4:	str	r2, [r1, #4]
   2a8b8:	b	2a810 <flatcc_builder_table_add_offset@@Base+0x94>
   2a8bc:	mov	r0, r5
   2a8c0:	b	2a840 <flatcc_builder_table_add_offset@@Base+0xc4>
   2a8c4:	movw	r1, #26932	; 0x6934
   2a8c8:	movt	r1, #4
   2a8cc:	ldr	r3, [pc, #68]	; 2a918 <flatcc_builder_table_add_offset@@Base+0x19c>
   2a8d0:	movw	r0, #27124	; 0x69f4
   2a8d4:	movt	r0, #4
   2a8d8:	movw	r2, #1819	; 0x71b
   2a8dc:	bl	145f0 <__assert_fail@plt>
   2a8e0:	movw	r1, #26932	; 0x6934
   2a8e4:	movt	r1, #4
   2a8e8:	ldr	r3, [pc, #40]	; 2a918 <flatcc_builder_table_add_offset@@Base+0x19c>
   2a8ec:	movw	r0, #27800	; 0x6c98
   2a8f0:	movt	r0, #4
   2a8f4:	movw	r2, #1812	; 0x714
   2a8f8:	bl	145f0 <__assert_fail@plt>
   2a8fc:	movw	r1, #26932	; 0x6934
   2a900:	movt	r1, #4
   2a904:	ldr	r3, [pc, #12]	; 2a918 <flatcc_builder_table_add_offset@@Base+0x19c>
   2a908:	movw	r0, #27648	; 0x6c00
   2a90c:	movt	r0, #4
   2a910:	movw	r2, #1811	; 0x713
   2a914:	bl	145f0 <__assert_fail@plt>
   2a918:	andeq	r6, r4, ip, lsr #17

0002a91c <flatcc_builder_table_add_union@@Base>:
   2a91c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2a920:	strd	r6, [sp, #8]
   2a924:	strd	r8, [sp, #16]
   2a928:	str	lr, [sp, #24]
   2a92c:	sub	sp, sp, #20
   2a930:	add	ip, sp, #16
   2a934:	stmdb	ip, {r2, r3}
   2a938:	ldr	r3, [r0, #32]
   2a93c:	ldrb	r7, [sp, #8]
   2a940:	ldr	r6, [sp, #12]
   2a944:	ldrh	r3, [r3, #14]
   2a948:	cmp	r3, #3
   2a94c:	bne	2ab08 <flatcc_builder_table_add_union@@Base+0x1ec>
   2a950:	cmp	r7, #0
   2a954:	mov	r4, r0
   2a958:	mov	r5, r1
   2a95c:	beq	2aa40 <flatcc_builder_table_add_union@@Base+0x124>
   2a960:	cmp	r6, #0
   2a964:	beq	2a988 <flatcc_builder_table_add_union@@Base+0x6c>
   2a968:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   2a96c:	cmp	r0, #0
   2a970:	beq	2ab5c <flatcc_builder_table_add_union@@Base+0x240>
   2a974:	ldr	r3, [r4, #32]
   2a978:	ldrh	r3, [r3, #14]
   2a97c:	str	r6, [r0]
   2a980:	cmp	r3, #3
   2a984:	bne	2ab24 <flatcc_builder_table_add_union@@Base+0x208>
   2a988:	sub	r1, r5, #1
   2a98c:	movw	r3, #32764	; 0x7ffc
   2a990:	cmp	r1, r3
   2a994:	bhi	2ab40 <flatcc_builder_table_add_union@@Base+0x224>
   2a998:	ldrh	r3, [r4, #130]	; 0x82
   2a99c:	lsl	r8, r1, #1
   2a9a0:	cmp	r3, #0
   2a9a4:	moveq	r3, #1
   2a9a8:	strheq	r3, [r4, #130]	; 0x82
   2a9ac:	ldr	r3, [r4, #4]
   2a9b0:	ldrh	r2, [r3, r8]
   2a9b4:	add	r0, r3, r8
   2a9b8:	cmp	r2, #0
   2a9bc:	bne	2aaec <flatcc_builder_table_add_union@@Base+0x1d0>
   2a9c0:	ldr	r2, [r4, #12]
   2a9c4:	movw	r3, #31153	; 0x79b1
   2a9c8:	movt	r3, #40503	; 0x9e37
   2a9cc:	uxth	r6, r1
   2a9d0:	ldr	r5, [r4, #20]
   2a9d4:	ldr	ip, [r4, #24]
   2a9d8:	eor	r1, r1, r2
   2a9dc:	mul	r1, r3, r1
   2a9e0:	add	r2, r5, #1
   2a9e4:	cmp	r2, ip
   2a9e8:	str	r2, [r4, #20]
   2a9ec:	eor	r1, r1, #1
   2a9f0:	mul	r1, r3, r1
   2a9f4:	str	r1, [r4, #12]
   2a9f8:	bcs	2aa64 <flatcc_builder_table_add_union@@Base+0x148>
   2a9fc:	ldr	r3, [r4, #16]
   2aa00:	add	r2, r5, #4
   2aa04:	strh	r2, [r0]
   2aa08:	ldrh	r2, [r4, #8]
   2aa0c:	cmp	r2, r6
   2aa10:	addls	r6, r6, #1
   2aa14:	strhls	r6, [r4, #8]
   2aa18:	cmn	r3, r5
   2aa1c:	beq	2aad0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2aa20:	mov	r0, #0
   2aa24:	strb	r7, [r3, r5]
   2aa28:	add	sp, sp, #20
   2aa2c:	ldrd	r4, [sp]
   2aa30:	ldrd	r6, [sp, #8]
   2aa34:	ldrd	r8, [sp, #16]
   2aa38:	add	sp, sp, #24
   2aa3c:	pop	{pc}		; (ldr pc, [sp], #4)
   2aa40:	cmp	r6, #0
   2aa44:	beq	2a988 <flatcc_builder_table_add_union@@Base+0x6c>
   2aa48:	movw	r1, #26932	; 0x6934
   2aa4c:	movt	r1, #4
   2aa50:	ldr	r3, [pc, #288]	; 2ab78 <flatcc_builder_table_add_union@@Base+0x25c>
   2aa54:	movw	r0, #27868	; 0x6cdc
   2aa58:	movt	r0, #4
   2aa5c:	movw	r2, #1519	; 0x5ef
   2aa60:	bl	145f0 <__assert_fail@plt>
   2aa64:	ldr	r2, [r4, #28]
   2aa68:	mov	r0, #1
   2aa6c:	add	r1, r4, #60	; 0x3c
   2aa70:	mov	r3, r0
   2aa74:	str	r0, [sp]
   2aa78:	ldr	r0, [r4, #40]	; 0x28
   2aa7c:	add	r2, r5, r2
   2aa80:	ldr	r9, [r4, #48]	; 0x30
   2aa84:	add	r2, r2, #2
   2aa88:	blx	r9
   2aa8c:	cmp	r0, #0
   2aa90:	bne	2aad0 <flatcc_builder_table_add_union@@Base+0x1b4>
   2aa94:	ldr	r0, [r4, #4]
   2aa98:	movw	r1, #65532	; 0xfffc
   2aa9c:	ldr	ip, [r4, #28]
   2aaa0:	ldr	r2, [r4, #64]	; 0x40
   2aaa4:	add	r0, r0, r8
   2aaa8:	ldr	r3, [r4, #60]	; 0x3c
   2aaac:	ldr	lr, [r4, #32]
   2aab0:	sub	r2, r2, ip
   2aab4:	cmp	r2, r1
   2aab8:	add	r3, r3, ip
   2aabc:	movcs	r2, r1
   2aac0:	str	r3, [r4, #16]
   2aac4:	str	r2, [r4, #24]
   2aac8:	str	r1, [lr, #4]
   2aacc:	b	2aa00 <flatcc_builder_table_add_union@@Base+0xe4>
   2aad0:	movw	r1, #26932	; 0x6934
   2aad4:	movt	r1, #4
   2aad8:	ldr	r3, [pc, #152]	; 2ab78 <flatcc_builder_table_add_union@@Base+0x25c>
   2aadc:	movw	r0, #27916	; 0x6d0c
   2aae0:	movt	r0, #4
   2aae4:	movw	r2, #1526	; 0x5f6
   2aae8:	bl	145f0 <__assert_fail@plt>
   2aaec:	movw	r1, #26932	; 0x6934
   2aaf0:	movt	r1, #4
   2aaf4:	ldr	r3, [pc, #128]	; 2ab7c <flatcc_builder_table_add_union@@Base+0x260>
   2aaf8:	movw	r0, #27124	; 0x69f4
   2aafc:	movt	r0, #4
   2ab00:	movw	r2, #1784	; 0x6f8
   2ab04:	bl	145f0 <__assert_fail@plt>
   2ab08:	movw	r1, #26932	; 0x6934
   2ab0c:	movt	r1, #4
   2ab10:	ldr	r3, [pc, #96]	; 2ab78 <flatcc_builder_table_add_union@@Base+0x25c>
   2ab14:	movw	r0, #27648	; 0x6c00
   2ab18:	movt	r0, #4
   2ab1c:	movw	r2, #1518	; 0x5ee
   2ab20:	bl	145f0 <__assert_fail@plt>
   2ab24:	movw	r1, #26932	; 0x6934
   2ab28:	movt	r1, #4
   2ab2c:	ldr	r3, [pc, #72]	; 2ab7c <flatcc_builder_table_add_union@@Base+0x260>
   2ab30:	movw	r0, #27648	; 0x6c00
   2ab34:	movt	r0, #4
   2ab38:	movw	r2, #1773	; 0x6ed
   2ab3c:	bl	145f0 <__assert_fail@plt>
   2ab40:	movw	r1, #26932	; 0x6934
   2ab44:	movt	r1, #4
   2ab48:	ldr	r3, [pc, #44]	; 2ab7c <flatcc_builder_table_add_union@@Base+0x260>
   2ab4c:	movw	r0, #27800	; 0x6c98
   2ab50:	movt	r0, #4
   2ab54:	movw	r2, #1774	; 0x6ee
   2ab58:	bl	145f0 <__assert_fail@plt>
   2ab5c:	movw	r1, #26932	; 0x6934
   2ab60:	movt	r1, #4
   2ab64:	ldr	r3, [pc, #12]	; 2ab78 <flatcc_builder_table_add_union@@Base+0x25c>
   2ab68:	movw	r0, #27904	; 0x6d00
   2ab6c:	movt	r0, #4
   2ab70:	movw	r2, #1522	; 0x5f2
   2ab74:	bl	145f0 <__assert_fail@plt>
   2ab78:	andeq	r6, r4, ip, asr #17
   2ab7c:	andeq	r6, r4, r4, ror r8

0002ab80 <flatcc_builder_table_add_union_vector@@Base>:
   2ab80:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ab84:	strd	r6, [sp, #8]
   2ab88:	mov	r7, r1
   2ab8c:	str	lr, [sp, #16]
   2ab90:	sub	sp, sp, #12
   2ab94:	add	r1, sp, #8
   2ab98:	stmdb	r1, {r2, r3}
   2ab9c:	ldr	r3, [r0, #32]
   2aba0:	ldm	sp, {r4, r6}
   2aba4:	ldrh	r3, [r3, #14]
   2aba8:	cmp	r3, #3
   2abac:	bne	2ac4c <flatcc_builder_table_add_union_vector@@Base+0xcc>
   2abb0:	clz	r3, r6
   2abb4:	clz	r2, r4
   2abb8:	lsr	r3, r3, #5
   2abbc:	lsr	r2, r2, #5
   2abc0:	cmp	r2, r3
   2abc4:	beq	2abf4 <flatcc_builder_table_add_union_vector@@Base+0x74>
   2abc8:	adds	r4, r4, #0
   2abcc:	movne	r4, #1
   2abd0:	cmp	r4, r3
   2abd4:	mvnne	r4, #0
   2abd8:	beq	2ac68 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   2abdc:	mov	r0, r4
   2abe0:	add	sp, sp, #12
   2abe4:	ldrd	r4, [sp]
   2abe8:	ldrd	r6, [sp, #8]
   2abec:	add	sp, sp, #16
   2abf0:	pop	{pc}		; (ldr pc, [sp], #4)
   2abf4:	cmp	r4, #0
   2abf8:	beq	2abdc <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2abfc:	sub	r1, r7, #1
   2ac00:	mov	r5, r0
   2ac04:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   2ac08:	subs	r3, r0, #0
   2ac0c:	beq	2ac84 <flatcc_builder_table_add_union_vector@@Base+0x104>
   2ac10:	mov	r1, r7
   2ac14:	mov	r0, r5
   2ac18:	str	r4, [r3]
   2ac1c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   2ac20:	cmp	r0, #0
   2ac24:	movne	r4, #0
   2ac28:	strne	r6, [r0]
   2ac2c:	bne	2abdc <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2ac30:	movw	r1, #26932	; 0x6934
   2ac34:	movt	r1, #4
   2ac38:	ldr	r3, [pc, #96]	; 2aca0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2ac3c:	movw	r0, #27904	; 0x6d00
   2ac40:	movt	r0, #4
   2ac44:	movw	r2, #1544	; 0x608
   2ac48:	bl	145f0 <__assert_fail@plt>
   2ac4c:	movw	r1, #26932	; 0x6934
   2ac50:	movt	r1, #4
   2ac54:	ldr	r3, [pc, #68]	; 2aca0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2ac58:	movw	r0, #27648	; 0x6c00
   2ac5c:	movt	r0, #4
   2ac60:	mov	r2, #1536	; 0x600
   2ac64:	bl	145f0 <__assert_fail@plt>
   2ac68:	movw	r1, #26932	; 0x6934
   2ac6c:	movt	r1, #4
   2ac70:	ldr	r3, [pc, #40]	; 2aca0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2ac74:	movw	r0, #27928	; 0x6d18
   2ac78:	movt	r0, #4
   2ac7c:	movw	r2, #1537	; 0x601
   2ac80:	bl	145f0 <__assert_fail@plt>
   2ac84:	movw	r1, #26932	; 0x6934
   2ac88:	movt	r1, #4
   2ac8c:	ldr	r3, [pc, #12]	; 2aca0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2ac90:	movw	r0, #27904	; 0x6d00
   2ac94:	movt	r0, #4
   2ac98:	movw	r2, #1540	; 0x604
   2ac9c:	bl	145f0 <__assert_fail@plt>
   2aca0:	andeq	r6, r4, ip, ror #17

0002aca4 <flatcc_builder_push_buffer_alignment@@Base>:
   2aca4:	mov	r3, r0
   2aca8:	mov	r2, #4
   2acac:	ldrh	r0, [r0, #128]	; 0x80
   2acb0:	strh	r2, [r3, #128]	; 0x80
   2acb4:	bx	lr

0002acb8 <flatcc_builder_pop_buffer_alignment@@Base>:
   2acb8:	ldrh	r3, [r0, #128]	; 0x80
   2acbc:	cmp	r3, r1
   2acc0:	strhcc	r1, [r0, #128]	; 0x80
   2acc4:	bx	lr

0002acc8 <flatcc_builder_get_buffer_alignment@@Base>:
   2acc8:	ldrh	r0, [r0, #128]	; 0x80
   2accc:	bx	lr

0002acd0 <flatcc_builder_set_vtable_clustering@@Base>:
   2acd0:	clz	r1, r1
   2acd4:	lsr	r1, r1, #5
   2acd8:	str	r1, [r0, #180]	; 0xb4
   2acdc:	bx	lr

0002ace0 <flatcc_builder_set_block_align@@Base>:
   2ace0:	strh	r1, [r0, #132]	; 0x84
   2ace4:	bx	lr

0002ace8 <flatcc_builder_get_level@@Base>:
   2ace8:	ldr	r0, [r0, #156]	; 0x9c
   2acec:	bx	lr

0002acf0 <flatcc_builder_set_max_level@@Base>:
   2acf0:	ldr	r3, [r0, #160]	; 0xa0
   2acf4:	str	r1, [r0, #176]	; 0xb0
   2acf8:	cmp	r3, r1
   2acfc:	strlt	r1, [r0, #160]	; 0xa0
   2ad00:	bx	lr

0002ad04 <flatcc_builder_get_buffer_size@@Base>:
   2ad04:	ldr	r3, [r0, #136]	; 0x88
   2ad08:	ldr	r0, [r0, #140]	; 0x8c
   2ad0c:	sub	r0, r0, r3
   2ad10:	bx	lr

0002ad14 <flatcc_builder_get_buffer_start@@Base>:
   2ad14:	ldr	r0, [r0, #136]	; 0x88
   2ad18:	bx	lr

0002ad1c <flatcc_builder_get_buffer_end@@Base>:
   2ad1c:	ldr	r0, [r0, #140]	; 0x8c
   2ad20:	bx	lr

0002ad24 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2ad24:	str	r1, [r0, #172]	; 0xac
   2ad28:	bx	lr

0002ad2c <flatcc_builder_set_identifier@@Base>:
   2ad2c:	ldr	r3, [pc, #16]	; 2ad44 <flatcc_builder_set_identifier@@Base+0x18>
   2ad30:	cmp	r1, #0
   2ad34:	moveq	r1, r3
   2ad38:	ldr	r3, [r1]
   2ad3c:	str	r3, [r0, #168]	; 0xa8
   2ad40:	bx	lr
   2ad44:	andeq	r6, r4, ip, lsl #5

0002ad48 <flatcc_builder_get_type@@Base>:
   2ad48:	ldr	r0, [r0, #32]
   2ad4c:	cmp	r0, #0
   2ad50:	ldrhne	r0, [r0, #14]
   2ad54:	bx	lr

0002ad58 <flatcc_builder_get_type_at@@Base>:
   2ad58:	cmp	r1, #0
   2ad5c:	ble	2ad84 <flatcc_builder_get_type_at@@Base+0x2c>
   2ad60:	ldr	r3, [r0, #156]	; 0x9c
   2ad64:	cmp	r3, r1
   2ad68:	blt	2ad84 <flatcc_builder_get_type_at@@Base+0x2c>
   2ad6c:	ldr	r2, [r0, #32]
   2ad70:	sub	r1, r1, r3
   2ad74:	add	r1, r1, r1, lsl #3
   2ad78:	add	r1, r2, r1, lsl #2
   2ad7c:	ldrh	r0, [r1, #14]
   2ad80:	bx	lr
   2ad84:	mov	r0, #0
   2ad88:	bx	lr

0002ad8c <flatcc_builder_get_direct_buffer@@Base>:
   2ad8c:	ldr	r3, [r0, #184]	; 0xb8
   2ad90:	cmp	r3, #0
   2ad94:	bne	2adb0 <flatcc_builder_get_direct_buffer@@Base+0x24>
   2ad98:	cmp	r1, #0
   2ad9c:	movne	r3, #0
   2ada0:	movne	r0, r3
   2ada4:	moveq	r0, r1
   2ada8:	strne	r3, [r1]
   2adac:	bx	lr
   2adb0:	ldrd	r2, [r0, #188]	; 0xbc
   2adb4:	cmp	r2, r3
   2adb8:	bne	2ad98 <flatcc_builder_get_direct_buffer@@Base+0xc>
   2adbc:	cmp	r1, #0
   2adc0:	ldrne	r3, [r0, #212]	; 0xd4
   2adc4:	ldr	r0, [r0, #196]	; 0xc4
   2adc8:	strne	r3, [r1]
   2adcc:	bx	lr

0002add0 <flatcc_builder_copy_buffer@@Base>:
   2add0:	ldr	r3, [r0, #184]	; 0xb8
   2add4:	cmp	r3, #0
   2add8:	beq	2ae00 <flatcc_builder_copy_buffer@@Base+0x30>
   2addc:	add	r0, r0, #188	; 0xbc
   2ade0:	str	r4, [sp, #-8]!
   2ade4:	str	lr, [sp, #4]
   2ade8:	bl	2b53c <flatcc_emitter_copy_buffer@@Base>
   2adec:	cmp	r0, #0
   2adf0:	beq	2ae08 <flatcc_builder_copy_buffer@@Base+0x38>
   2adf4:	ldr	r4, [sp]
   2adf8:	add	sp, sp, #4
   2adfc:	pop	{pc}		; (ldr pc, [sp], #4)
   2ae00:	mov	r0, r3
   2ae04:	bx	lr
   2ae08:	bl	2569c <flatcc_builder_default_alloc@@Base+0x23c>

0002ae0c <flatcc_builder_finalize_buffer@@Base>:
   2ae0c:	strd	r4, [sp, #-16]!
   2ae10:	cmp	r1, #0
   2ae14:	mov	r5, r0
   2ae18:	ldr	r2, [r0, #136]	; 0x88
   2ae1c:	ldr	r4, [r0, #140]	; 0x8c
   2ae20:	str	r6, [sp, #8]
   2ae24:	str	lr, [sp, #12]
   2ae28:	sub	r4, r4, r2
   2ae2c:	mov	r0, r4
   2ae30:	strne	r4, [r1]
   2ae34:	bl	14554 <malloc@plt>
   2ae38:	subs	r6, r0, #0
   2ae3c:	beq	2ae94 <flatcc_builder_finalize_buffer@@Base+0x88>
   2ae40:	ldr	r3, [r5, #184]	; 0xb8
   2ae44:	cmp	r3, #0
   2ae48:	beq	2ae78 <flatcc_builder_finalize_buffer@@Base+0x6c>
   2ae4c:	mov	r2, r4
   2ae50:	add	r0, r5, #188	; 0xbc
   2ae54:	mov	r1, r6
   2ae58:	bl	2b53c <flatcc_emitter_copy_buffer@@Base>
   2ae5c:	cmp	r0, #0
   2ae60:	beq	2aeb0 <flatcc_builder_finalize_buffer@@Base+0xa4>
   2ae64:	mov	r0, r6
   2ae68:	ldrd	r4, [sp]
   2ae6c:	ldr	r6, [sp, #8]
   2ae70:	add	sp, sp, #12
   2ae74:	pop	{pc}		; (ldr pc, [sp], #4)
   2ae78:	movw	r1, #26932	; 0x6934
   2ae7c:	movt	r1, #4
   2ae80:	ldr	r3, [pc, #44]	; 2aeb4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   2ae84:	movw	r0, #27124	; 0x69f4
   2ae88:	movt	r0, #4
   2ae8c:	movw	r2, #1948	; 0x79c
   2ae90:	bl	145f0 <__assert_fail@plt>
   2ae94:	movw	r1, #26932	; 0x6934
   2ae98:	movt	r1, #4
   2ae9c:	ldr	r3, [pc, #16]	; 2aeb4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   2aea0:	movw	r0, #27124	; 0x69f4
   2aea4:	movt	r0, #4
   2aea8:	movw	r2, #1944	; 0x798
   2aeac:	bl	145f0 <__assert_fail@plt>
   2aeb0:	bl	2569c <flatcc_builder_default_alloc@@Base+0x23c>
   2aeb4:	andeq	r6, r4, r4, lsl r9

0002aeb8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2aeb8:	strd	r4, [sp, #-20]!	; 0xffffffec
   2aebc:	mov	r2, #0
   2aec0:	mov	r5, r0
   2aec4:	ldr	r3, [r0, #136]	; 0x88
   2aec8:	ldr	r4, [r0, #140]	; 0x8c
   2aecc:	strd	r6, [sp, #8]
   2aed0:	subs	r6, r1, #0
   2aed4:	ldrh	r1, [r0, #128]	; 0x80
   2aed8:	str	lr, [sp, #16]
   2aedc:	sub	sp, sp, #12
   2aee0:	add	r0, sp, #4
   2aee4:	sub	r3, r4, r3
   2aee8:	str	r2, [sp, #4]
   2aeec:	sub	r4, r1, #1
   2aef0:	rsb	r2, r1, #0
   2aef4:	strne	r3, [r6]
   2aef8:	add	r4, r4, r3
   2aefc:	cmp	r1, #4
   2af00:	and	r4, r4, r2
   2af04:	movcc	r1, #4
   2af08:	mov	r2, r4
   2af0c:	bl	14590 <posix_memalign@plt>
   2af10:	cmp	r0, #0
   2af14:	beq	2af54 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   2af18:	ldr	r0, [sp, #4]
   2af1c:	cmp	r0, #0
   2af20:	beq	2af28 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2af24:	bl	14518 <free@plt>
   2af28:	cmp	r6, #0
   2af2c:	movne	r3, #0
   2af30:	moveq	r7, r6
   2af34:	movne	r7, r3
   2af38:	strne	r3, [r6]
   2af3c:	mov	r0, r7
   2af40:	add	sp, sp, #12
   2af44:	ldrd	r4, [sp]
   2af48:	ldrd	r6, [sp, #8]
   2af4c:	add	sp, sp, #16
   2af50:	pop	{pc}		; (ldr pc, [sp], #4)
   2af54:	ldr	r7, [sp, #4]
   2af58:	cmp	r7, #0
   2af5c:	beq	2af28 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2af60:	ldr	r3, [r5, #184]	; 0xb8
   2af64:	cmp	r3, #0
   2af68:	beq	2af88 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   2af6c:	mov	r2, r4
   2af70:	add	r0, r5, #188	; 0xbc
   2af74:	mov	r1, r7
   2af78:	bl	2b53c <flatcc_emitter_copy_buffer@@Base>
   2af7c:	cmp	r0, #0
   2af80:	bne	2af3c <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   2af84:	bl	2569c <flatcc_builder_default_alloc@@Base+0x23c>
   2af88:	mov	r0, r7
   2af8c:	b	2af24 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

0002af90 <flatcc_builder_aligned_alloc@@Base>:
   2af90:	cmp	r0, #4
   2af94:	str	r4, [sp, #-8]!
   2af98:	mov	r4, #0
   2af9c:	str	lr, [sp, #4]
   2afa0:	sub	sp, sp, #8
   2afa4:	mov	r2, r1
   2afa8:	movcs	r1, r0
   2afac:	movcc	r1, #4
   2afb0:	add	r0, sp, #4
   2afb4:	str	r4, [sp, #4]
   2afb8:	bl	14590 <posix_memalign@plt>
   2afbc:	cmp	r0, r4
   2afc0:	ldr	r0, [sp, #4]
   2afc4:	beq	2afd8 <flatcc_builder_aligned_alloc@@Base+0x48>
   2afc8:	cmp	r0, #0
   2afcc:	beq	2afd8 <flatcc_builder_aligned_alloc@@Base+0x48>
   2afd0:	bl	14518 <free@plt>
   2afd4:	mov	r0, r4
   2afd8:	add	sp, sp, #8
   2afdc:	ldr	r4, [sp]
   2afe0:	add	sp, sp, #4
   2afe4:	pop	{pc}		; (ldr pc, [sp], #4)

0002afe8 <flatcc_builder_aligned_free@@Base>:
   2afe8:	b	14518 <free@plt>

0002afec <flatcc_builder_get_emit_context@@Base>:
   2afec:	ldr	r0, [r0, #36]	; 0x24
   2aff0:	bx	lr

0002aff4 <flatcc_emitter_recycle_page@@Base>:
   2aff4:	ldr	r3, [r0]
   2aff8:	cmp	r3, r1
   2affc:	beq	2b040 <flatcc_emitter_recycle_page@@Base+0x4c>
   2b000:	ldr	r2, [r0, #4]
   2b004:	cmp	r2, r1
   2b008:	beq	2b040 <flatcc_emitter_recycle_page@@Base+0x4c>
   2b00c:	push	{lr}		; (str lr, [sp, #-4]!)
   2b010:	mov	r0, #0
   2b014:	ldr	lr, [r1, #2944]	; 0xb80
   2b018:	ldr	ip, [r1, #2948]	; 0xb84
   2b01c:	str	ip, [lr, #2948]	; 0xb84
   2b020:	ldr	r2, [r3, #2948]	; 0xb84
   2b024:	str	lr, [ip, #2944]	; 0xb80
   2b028:	str	r3, [r1, #2944]	; 0xb80
   2b02c:	str	r2, [r1, #2948]	; 0xb84
   2b030:	str	r1, [r2, #2944]	; 0xb80
   2b034:	ldr	r3, [r1, #2944]	; 0xb80
   2b038:	str	r1, [r3, #2948]	; 0xb84
   2b03c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b040:	mvn	r0, #0
   2b044:	bx	lr

0002b048 <flatcc_emitter_reset@@Base>:
   2b048:	ldr	r2, [r0]
   2b04c:	cmp	r2, #0
   2b050:	bxeq	lr
   2b054:	strd	r4, [sp, #-16]!
   2b058:	movw	ip, #64064	; 0xfa40
   2b05c:	movt	ip, #65535	; 0xffff
   2b060:	ldr	r1, [r0, #24]
   2b064:	add	r4, r2, #1472	; 0x5c0
   2b068:	ldr	r3, [r0, #32]
   2b06c:	ldr	r5, [r0, #28]
   2b070:	str	r6, [sp, #8]
   2b074:	str	lr, [sp, #12]
   2b078:	mov	lr, #1472	; 0x5c0
   2b07c:	cmp	r3, #0
   2b080:	stmib	r0, {r2, r4}
   2b084:	moveq	r3, r1
   2b088:	lsr	r1, r1, #2
   2b08c:	str	lr, [r0, #12]
   2b090:	add	r3, r3, r3, lsl #1
   2b094:	str	r4, [r0, #16]
   2b098:	str	lr, [r0, #20]
   2b09c:	add	r3, r1, r3, lsr #2
   2b0a0:	str	ip, [r2, #2952]	; 0xb88
   2b0a4:	mov	ip, #0
   2b0a8:	cmp	r5, r3, lsl #1
   2b0ac:	str	ip, [r0, #24]
   2b0b0:	str	r3, [r0, #32]
   2b0b4:	bls	2b10c <flatcc_emitter_reset@@Base+0xc4>
   2b0b8:	ldr	r3, [r2, #2944]	; 0xb80
   2b0bc:	mov	r4, r0
   2b0c0:	cmp	r2, r3
   2b0c4:	bne	2b0dc <flatcc_emitter_reset@@Base+0x94>
   2b0c8:	b	2b10c <flatcc_emitter_reset@@Base+0xc4>
   2b0cc:	ldm	r4, {r1, r2}
   2b0d0:	ldr	r3, [r2, #2944]	; 0xb80
   2b0d4:	cmp	r3, r1
   2b0d8:	beq	2b10c <flatcc_emitter_reset@@Base+0xc4>
   2b0dc:	ldr	r1, [r3, #2944]	; 0xb80
   2b0e0:	mov	r0, r3
   2b0e4:	str	r1, [r2, #2944]	; 0xb80
   2b0e8:	ldr	r3, [r3, #2944]	; 0xb80
   2b0ec:	str	r2, [r3, #2948]	; 0xb84
   2b0f0:	bl	14518 <free@plt>
   2b0f4:	ldr	r3, [r4, #28]
   2b0f8:	ldr	r2, [r4, #32]
   2b0fc:	sub	r3, r3, #2944	; 0xb80
   2b100:	cmp	r3, r2, lsl #1
   2b104:	str	r3, [r4, #28]
   2b108:	bhi	2b0cc <flatcc_emitter_reset@@Base+0x84>
   2b10c:	ldrd	r4, [sp]
   2b110:	ldr	r6, [sp, #8]
   2b114:	add	sp, sp, #12
   2b118:	pop	{pc}		; (ldr pc, [sp], #4)

0002b11c <flatcc_emitter_clear@@Base>:
   2b11c:	ldr	r3, [r0]
   2b120:	cmp	r3, #0
   2b124:	bxeq	lr
   2b128:	mov	r1, #0
   2b12c:	strd	r4, [sp, #-16]!
   2b130:	mov	r5, r0
   2b134:	ldr	r2, [r3, #2948]	; 0xb84
   2b138:	str	r6, [sp, #8]
   2b13c:	str	lr, [sp, #12]
   2b140:	str	r1, [r2, #2944]	; 0xb80
   2b144:	ldr	r4, [r3, #2944]	; 0xb80
   2b148:	cmp	r4, r1
   2b14c:	bne	2b158 <flatcc_emitter_clear@@Base+0x3c>
   2b150:	b	2b194 <flatcc_emitter_clear@@Base+0x78>
   2b154:	mov	r4, r3
   2b158:	ldr	r0, [r4, #2948]	; 0xb84
   2b15c:	bl	14518 <free@plt>
   2b160:	ldr	r3, [r4, #2944]	; 0xb80
   2b164:	cmp	r3, #0
   2b168:	bne	2b154 <flatcc_emitter_clear@@Base+0x38>
   2b16c:	mov	r0, r4
   2b170:	bl	14518 <free@plt>
   2b174:	mov	r0, r5
   2b178:	mov	r2, #36	; 0x24
   2b17c:	ldrd	r4, [sp]
   2b180:	mov	r1, #0
   2b184:	ldr	r6, [sp, #8]
   2b188:	ldr	lr, [sp, #12]
   2b18c:	add	sp, sp, #16
   2b190:	b	1459c <memset@plt>
   2b194:	mov	r4, r3
   2b198:	b	2b16c <flatcc_emitter_clear@@Base+0x50>

0002b19c <flatcc_emitter@@Base>:
   2b19c:	cmp	r3, #0
   2b1a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b1a4:	mov	r4, r0
   2b1a8:	ldr	r3, [r0, #24]
   2b1ac:	strd	r6, [sp, #8]
   2b1b0:	strd	r8, [sp, #16]
   2b1b4:	sub	r8, r2, #1
   2b1b8:	strd	sl, [sp, #24]
   2b1bc:	str	lr, [sp, #32]
   2b1c0:	sub	sp, sp, #12
   2b1c4:	ldr	ip, [sp, #48]	; 0x30
   2b1c8:	add	r3, r3, ip
   2b1cc:	str	r3, [r0, #24]
   2b1d0:	blt	2b3b4 <flatcc_emitter@@Base+0x218>
   2b1d4:	ldr	r0, [r0, #20]
   2b1d8:	cmp	r0, ip
   2b1dc:	bcs	2b274 <flatcc_emitter@@Base+0xd8>
   2b1e0:	cmp	r2, #0
   2b1e4:	beq	2b2b8 <flatcc_emitter@@Base+0x11c>
   2b1e8:	movw	r3, #64064	; 0xfa40
   2b1ec:	movt	r3, #65535	; 0xffff
   2b1f0:	add	r5, r1, #8
   2b1f4:	mov	r8, r2
   2b1f8:	mov	r9, #1472	; 0x5c0
   2b1fc:	str	r3, [sp, #4]
   2b200:	ldr	r7, [r5, #-8]
   2b204:	ldr	r6, [r5, #-4]
   2b208:	cmp	r6, #0
   2b20c:	beq	2b350 <flatcc_emitter@@Base+0x1b4>
   2b210:	mov	r3, r0
   2b214:	cmp	r6, r3
   2b218:	bls	2b26c <flatcc_emitter@@Base+0xd0>
   2b21c:	cmp	r3, #0
   2b220:	beq	2b2d8 <flatcc_emitter@@Base+0x13c>
   2b224:	sub	fp, r6, r3
   2b228:	mov	r6, r3
   2b22c:	mov	r2, r6
   2b230:	mov	r1, r7
   2b234:	ldr	r0, [r4, #16]
   2b238:	bl	14524 <memcpy@plt>
   2b23c:	ldr	r2, [r4, #16]
   2b240:	cmp	fp, #0
   2b244:	add	r7, r7, r6
   2b248:	ldr	r0, [r4, #20]
   2b24c:	add	r2, r2, r6
   2b250:	sub	r3, r0, r6
   2b254:	mov	r0, r3
   2b258:	strd	r2, [r4, #16]
   2b25c:	beq	2b350 <flatcc_emitter@@Base+0x1b4>
   2b260:	mov	r6, fp
   2b264:	cmp	r6, r3
   2b268:	bhi	2b21c <flatcc_emitter@@Base+0x80>
   2b26c:	mov	fp, #0
   2b270:	b	2b22c <flatcc_emitter@@Base+0x90>
   2b274:	ldr	r3, [r4, #16]
   2b278:	sub	r0, r0, ip
   2b27c:	str	r0, [r4, #20]
   2b280:	add	ip, r3, ip
   2b284:	str	ip, [r4, #16]
   2b288:	cmp	r2, #0
   2b28c:	addne	r4, r1, #8
   2b290:	beq	2b2b8 <flatcc_emitter@@Base+0x11c>
   2b294:	mov	r0, r3
   2b298:	ldmdb	r4, {r1, r2}
   2b29c:	sub	r8, r8, #1
   2b2a0:	bl	14524 <memcpy@plt>
   2b2a4:	ldr	r2, [r4, #-4]
   2b2a8:	cmn	r8, #1
   2b2ac:	add	r4, r4, #8
   2b2b0:	add	r3, r0, r2
   2b2b4:	bne	2b294 <flatcc_emitter@@Base+0xf8>
   2b2b8:	mov	r0, #0
   2b2bc:	add	sp, sp, #12
   2b2c0:	ldrd	r4, [sp]
   2b2c4:	ldrd	r6, [sp, #8]
   2b2c8:	ldrd	r8, [sp, #16]
   2b2cc:	ldrd	sl, [sp, #24]
   2b2d0:	add	sp, sp, #32
   2b2d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b2d8:	ldr	fp, [r4, #4]
   2b2dc:	cmp	fp, #0
   2b2e0:	beq	2b360 <flatcc_emitter@@Base+0x1c4>
   2b2e4:	ldr	sl, [r4]
   2b2e8:	ldr	r0, [fp, #2944]	; 0xb80
   2b2ec:	cmp	r0, sl
   2b2f0:	beq	2b31c <flatcc_emitter@@Base+0x180>
   2b2f4:	str	r0, [r4, #4]
   2b2f8:	ldr	r1, [r0, #2948]	; 0xb84
   2b2fc:	mov	r2, #2944	; 0xb80
   2b300:	mov	r3, r2
   2b304:	str	r0, [r4, #16]
   2b308:	str	r2, [r4, #20]
   2b30c:	ldr	r2, [r1, #2952]	; 0xb88
   2b310:	add	r2, r2, r3
   2b314:	str	r2, [r0, #2952]	; 0xb88
   2b318:	b	2b214 <flatcc_emitter@@Base+0x78>
   2b31c:	movw	r0, #2956	; 0xb8c
   2b320:	bl	14554 <malloc@plt>
   2b324:	cmp	r0, #0
   2b328:	beq	2b3ac <flatcc_emitter@@Base+0x210>
   2b32c:	ldr	r2, [r4, #28]
   2b330:	str	sl, [r0, #2944]	; 0xb80
   2b334:	str	fp, [r0, #2948]	; 0xb84
   2b338:	add	r2, r2, #2944	; 0xb80
   2b33c:	str	r2, [r4, #28]
   2b340:	str	r0, [sl, #2948]	; 0xb84
   2b344:	str	r0, [fp, #2944]	; 0xb80
   2b348:	str	r0, [r4, #4]
   2b34c:	b	2b2f8 <flatcc_emitter@@Base+0x15c>
   2b350:	subs	r8, r8, #1
   2b354:	add	r5, r5, #8
   2b358:	bne	2b200 <flatcc_emitter@@Base+0x64>
   2b35c:	b	2b2b8 <flatcc_emitter@@Base+0x11c>
   2b360:	movw	r0, #2956	; 0xb8c
   2b364:	bl	14554 <malloc@plt>
   2b368:	cmp	r0, #0
   2b36c:	beq	2b3ac <flatcc_emitter@@Base+0x210>
   2b370:	ldr	r2, [r4, #28]
   2b374:	add	r1, r0, #1472	; 0x5c0
   2b378:	mov	r3, #1472	; 0x5c0
   2b37c:	str	r0, [r4]
   2b380:	strd	r0, [r4, #4]
   2b384:	str	r9, [r4, #12]
   2b388:	str	r1, [r4, #16]
   2b38c:	add	r2, r2, #2944	; 0xb80
   2b390:	str	r9, [r4, #20]
   2b394:	str	r0, [r0, #2944]	; 0xb80
   2b398:	str	r2, [r4, #28]
   2b39c:	ldr	r2, [sp, #4]
   2b3a0:	str	r0, [r0, #2948]	; 0xb84
   2b3a4:	str	r2, [r0, #2952]	; 0xb88
   2b3a8:	b	2b214 <flatcc_emitter@@Base+0x78>
   2b3ac:	mvn	r0, #0
   2b3b0:	b	2b2bc <flatcc_emitter@@Base+0x120>
   2b3b4:	ldr	r0, [r0, #12]
   2b3b8:	cmp	r0, ip
   2b3bc:	bcs	2b524 <flatcc_emitter@@Base+0x388>
   2b3c0:	add	r5, r1, r2, lsl #3
   2b3c4:	movw	r3, #64064	; 0xfa40
   2b3c8:	movt	r3, #65535	; 0xffff
   2b3cc:	str	r3, [sp, #4]
   2b3d0:	cmn	r8, #1
   2b3d4:	beq	2b2b8 <flatcc_emitter@@Base+0x11c>
   2b3d8:	ldr	r7, [r5, #-8]
   2b3dc:	ldr	r6, [r5, #-4]
   2b3e0:	cmp	r6, #0
   2b3e4:	add	r7, r7, r6
   2b3e8:	beq	2b438 <flatcc_emitter@@Base+0x29c>
   2b3ec:	mov	r9, #1472	; 0x5c0
   2b3f0:	ldr	r2, [r4, #12]
   2b3f4:	cmp	r2, r6
   2b3f8:	bcs	2b49c <flatcc_emitter@@Base+0x300>
   2b3fc:	cmp	r2, #0
   2b400:	beq	2b444 <flatcc_emitter@@Base+0x2a8>
   2b404:	sub	r6, r6, r2
   2b408:	mov	r1, #0
   2b40c:	ldr	r3, [r4, #8]
   2b410:	rsb	r0, r2, #0
   2b414:	add	r7, r7, r0
   2b418:	str	r1, [r4, #12]
   2b41c:	mov	r1, r7
   2b420:	add	r3, r3, r0
   2b424:	mov	r0, r3
   2b428:	str	r3, [r4, #8]
   2b42c:	bl	14524 <memcpy@plt>
   2b430:	cmp	r6, #0
   2b434:	bne	2b3f0 <flatcc_emitter@@Base+0x254>
   2b438:	sub	r5, r5, #8
   2b43c:	sub	r8, r8, #1
   2b440:	b	2b3d0 <flatcc_emitter@@Base+0x234>
   2b444:	ldr	fp, [r4]
   2b448:	cmp	fp, #0
   2b44c:	beq	2b4e0 <flatcc_emitter@@Base+0x344>
   2b450:	ldr	sl, [r4, #4]
   2b454:	ldr	r0, [fp, #2948]	; 0xb84
   2b458:	cmp	r0, sl
   2b45c:	beq	2b4ac <flatcc_emitter@@Base+0x310>
   2b460:	ldr	r3, [fp, #2952]	; 0xb88
   2b464:	sub	r3, r3, #2944	; 0xb80
   2b468:	str	r3, [r0, #2952]	; 0xb88
   2b46c:	str	r0, [r4]
   2b470:	ldr	r3, [r0, #2944]	; 0xb80
   2b474:	mov	r2, #2944	; 0xb80
   2b478:	add	r1, r0, #2944	; 0xb80
   2b47c:	ldr	r3, [r3, #2952]	; 0xb88
   2b480:	str	r1, [r4, #8]
   2b484:	str	r2, [r4, #12]
   2b488:	sub	r3, r3, #2944	; 0xb80
   2b48c:	str	r3, [r0, #2952]	; 0xb88
   2b490:	ldr	r2, [r4, #12]
   2b494:	cmp	r2, r6
   2b498:	bcc	2b3fc <flatcc_emitter@@Base+0x260>
   2b49c:	sub	r1, r2, r6
   2b4a0:	mov	r2, r6
   2b4a4:	mov	r6, #0
   2b4a8:	b	2b40c <flatcc_emitter@@Base+0x270>
   2b4ac:	movw	r0, #2956	; 0xb8c
   2b4b0:	bl	14554 <malloc@plt>
   2b4b4:	cmp	r0, #0
   2b4b8:	beq	2b3ac <flatcc_emitter@@Base+0x210>
   2b4bc:	ldr	r2, [r4, #28]
   2b4c0:	str	fp, [r0, #2944]	; 0xb80
   2b4c4:	str	sl, [r0, #2948]	; 0xb84
   2b4c8:	add	r2, r2, #2944	; 0xb80
   2b4cc:	str	r2, [r4, #28]
   2b4d0:	str	r0, [fp, #2948]	; 0xb84
   2b4d4:	str	r0, [sl, #2944]	; 0xb80
   2b4d8:	str	r0, [r4]
   2b4dc:	b	2b470 <flatcc_emitter@@Base+0x2d4>
   2b4e0:	movw	r0, #2956	; 0xb8c
   2b4e4:	bl	14554 <malloc@plt>
   2b4e8:	cmp	r0, #0
   2b4ec:	beq	2b3ac <flatcc_emitter@@Base+0x210>
   2b4f0:	ldr	r3, [r4, #28]
   2b4f4:	add	r2, r0, #1472	; 0x5c0
   2b4f8:	str	r0, [r4]
   2b4fc:	stmib	r4, {r0, r2, r9}
   2b500:	add	r3, r3, #2944	; 0xb80
   2b504:	str	r2, [r4, #16]
   2b508:	str	r9, [r4, #20]
   2b50c:	str	r3, [r4, #28]
   2b510:	ldr	r3, [sp, #4]
   2b514:	str	r0, [r0, #2944]	; 0xb80
   2b518:	str	r0, [r0, #2948]	; 0xb84
   2b51c:	str	r3, [r0, #2952]	; 0xb88
   2b520:	b	2b3f0 <flatcc_emitter@@Base+0x254>
   2b524:	ldr	r3, [r4, #8]
   2b528:	sub	r0, r0, ip
   2b52c:	str	r0, [r4, #12]
   2b530:	sub	r3, r3, ip
   2b534:	str	r3, [r4, #8]
   2b538:	b	2b288 <flatcc_emitter@@Base+0xec>

0002b53c <flatcc_emitter_copy_buffer@@Base>:
   2b53c:	ldr	r3, [r0, #24]
   2b540:	strd	r4, [sp, #-16]!
   2b544:	str	r6, [sp, #8]
   2b548:	str	lr, [sp, #12]
   2b54c:	cmp	r3, r2
   2b550:	movhi	r5, #0
   2b554:	bhi	2b5d4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2b558:	ldr	r5, [r0]
   2b55c:	mov	r6, r0
   2b560:	cmp	r5, #0
   2b564:	beq	2b5d4 <flatcc_emitter_copy_buffer@@Base+0x98>
   2b568:	ldr	r2, [r6, #4]
   2b56c:	mov	r0, r1
   2b570:	ldr	r1, [r6, #8]
   2b574:	cmp	r5, r2
   2b578:	beq	2b5e8 <flatcc_emitter_copy_buffer@@Base+0xac>
   2b57c:	ldr	r2, [r6, #12]
   2b580:	rsb	r2, r2, #2944	; 0xb80
   2b584:	add	r5, r0, r2
   2b588:	bl	14524 <memcpy@plt>
   2b58c:	ldrd	r2, [r6]
   2b590:	ldr	r4, [r2, #2944]	; 0xb80
   2b594:	cmp	r4, r3
   2b598:	beq	2b5c0 <flatcc_emitter_copy_buffer@@Base+0x84>
   2b59c:	mov	r2, #2944	; 0xb80
   2b5a0:	mov	r1, r4
   2b5a4:	mov	r0, r5
   2b5a8:	add	r5, r5, r2
   2b5ac:	bl	14524 <memcpy@plt>
   2b5b0:	ldr	r3, [r6, #4]
   2b5b4:	ldr	r4, [r4, #2944]	; 0xb80
   2b5b8:	cmp	r3, r4
   2b5bc:	bne	2b59c <flatcc_emitter_copy_buffer@@Base+0x60>
   2b5c0:	ldr	r2, [r6, #20]
   2b5c4:	mov	r1, r4
   2b5c8:	mov	r0, r5
   2b5cc:	rsb	r2, r2, #2944	; 0xb80
   2b5d0:	bl	14524 <memcpy@plt>
   2b5d4:	mov	r0, r5
   2b5d8:	ldrd	r4, [sp]
   2b5dc:	ldr	r6, [sp, #8]
   2b5e0:	add	sp, sp, #12
   2b5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b5e8:	mov	r2, r3
   2b5ec:	mov	r5, r0
   2b5f0:	bl	14524 <memcpy@plt>
   2b5f4:	b	2b5d4 <flatcc_emitter_copy_buffer@@Base+0x98>

0002b5f8 <flatcc_verify_error_string@@Base>:
   2b5f8:	cmp	r0, #36	; 0x24
   2b5fc:	bhi	2b610 <flatcc_verify_error_string@@Base+0x18>
   2b600:	movw	r3, #27968	; 0x6d40
   2b604:	movt	r3, #4
   2b608:	ldr	r0, [r3, r0, lsl #2]
   2b60c:	bx	lr
   2b610:	movw	r0, #28116	; 0x6dd4
   2b614:	movt	r0, #4
   2b618:	bx	lr

0002b61c <flatcc_verify_field@@Base>:
   2b61c:	ldrh	ip, [r0, #22]
   2b620:	add	r1, r1, #2
   2b624:	lsl	r1, r1, #1
   2b628:	uxth	r1, r1
   2b62c:	cmp	ip, r1
   2b630:	bls	2b678 <flatcc_verify_field@@Base+0x5c>
   2b634:	ldr	ip, [r0, #12]
   2b638:	ldrh	r1, [ip, r1]
   2b63c:	cmp	r1, #0
   2b640:	beq	2b678 <flatcc_verify_field@@Base+0x5c>
   2b644:	ldrh	ip, [r0, #20]
   2b648:	add	r2, r2, r1
   2b64c:	cmp	r2, ip
   2b650:	bhi	2b680 <flatcc_verify_field@@Base+0x64>
   2b654:	ldr	r2, [r0]
   2b658:	sub	r3, r3, #1
   2b65c:	ldr	r0, [r0, #16]
   2b660:	add	r2, r2, r0
   2b664:	add	r1, r2, r1
   2b668:	tst	r1, r3
   2b66c:	moveq	r0, #0
   2b670:	movne	r0, #12
   2b674:	bx	lr
   2b678:	mov	r0, #0
   2b67c:	bx	lr
   2b680:	mov	r0, #13
   2b684:	bx	lr

0002b688 <flatcc_verify_string_field@@Base>:
   2b688:	ldrh	r3, [r0, #22]
   2b68c:	add	r1, r1, #2
   2b690:	lsl	r1, r1, #1
   2b694:	uxth	r1, r1
   2b698:	cmp	r3, r1
   2b69c:	bls	2b738 <flatcc_verify_string_field@@Base+0xb0>
   2b6a0:	ldr	r3, [r0, #12]
   2b6a4:	ldrh	r3, [r3, r1]
   2b6a8:	cmp	r3, #0
   2b6ac:	beq	2b738 <flatcc_verify_string_field@@Base+0xb0>
   2b6b0:	ldrh	r2, [r0, #20]
   2b6b4:	add	r1, r3, #4
   2b6b8:	cmp	r1, r2
   2b6bc:	bhi	2b748 <flatcc_verify_string_field@@Base+0xc0>
   2b6c0:	ldr	r2, [r0, #16]
   2b6c4:	add	r3, r3, r2
   2b6c8:	tst	r3, #3
   2b6cc:	bne	2b750 <flatcc_verify_string_field@@Base+0xc8>
   2b6d0:	cmp	r3, #0
   2b6d4:	beq	2b760 <flatcc_verify_string_field@@Base+0xd8>
   2b6d8:	ldr	r1, [r0]
   2b6dc:	ldr	r2, [r1, r3]
   2b6e0:	add	r2, r3, r2
   2b6e4:	cmp	r3, r2
   2b6e8:	bcs	2b730 <flatcc_verify_string_field@@Base+0xa8>
   2b6ec:	ldr	r3, [r0, #4]
   2b6f0:	add	r0, r2, #4
   2b6f4:	cmp	r3, r0
   2b6f8:	bcc	2b730 <flatcc_verify_string_field@@Base+0xa8>
   2b6fc:	tst	r2, #3
   2b700:	bne	2b730 <flatcc_verify_string_field@@Base+0xa8>
   2b704:	ldr	r2, [r1, r2]
   2b708:	sub	r3, r3, r0
   2b70c:	add	ip, r2, #1
   2b710:	cmp	r3, ip
   2b714:	bcc	2b758 <flatcc_verify_string_field@@Base+0xd0>
   2b718:	add	r1, r1, r0
   2b71c:	ldrb	r3, [r1, r2]
   2b720:	cmp	r3, #0
   2b724:	moveq	r0, #0
   2b728:	movne	r0, #7
   2b72c:	bx	lr
   2b730:	mov	r0, #17
   2b734:	bx	lr
   2b738:	cmp	r2, #0
   2b73c:	moveq	r0, #0
   2b740:	movne	r0, #4
   2b744:	bx	lr
   2b748:	mov	r0, #13
   2b74c:	bx	lr
   2b750:	mov	r0, #12
   2b754:	bx	lr
   2b758:	mov	r0, #8
   2b75c:	bx	lr
   2b760:	mov	r0, r3
   2b764:	bx	lr

0002b768 <flatcc_verify_vector_field@@Base>:
   2b768:	ldrh	ip, [r0, #22]
   2b76c:	add	r1, r1, #2
   2b770:	lsl	r1, r1, #1
   2b774:	str	r4, [sp, #-8]!
   2b778:	str	lr, [sp, #4]
   2b77c:	uxth	r1, r1
   2b780:	ldrh	lr, [sp, #8]
   2b784:	cmp	ip, r1
   2b788:	bls	2b84c <flatcc_verify_vector_field@@Base+0xe4>
   2b78c:	ldr	ip, [r0, #12]
   2b790:	ldrh	r1, [ip, r1]
   2b794:	cmp	r1, #0
   2b798:	beq	2b84c <flatcc_verify_vector_field@@Base+0xe4>
   2b79c:	ldrh	r2, [r0, #20]
   2b7a0:	add	ip, r1, #4
   2b7a4:	cmp	ip, r2
   2b7a8:	movhi	r0, #13
   2b7ac:	bhi	2b830 <flatcc_verify_vector_field@@Base+0xc8>
   2b7b0:	ldr	r2, [r0, #16]
   2b7b4:	add	r2, r1, r2
   2b7b8:	tst	r2, #3
   2b7bc:	movne	r0, #12
   2b7c0:	bne	2b830 <flatcc_verify_vector_field@@Base+0xc8>
   2b7c4:	cmp	r2, #0
   2b7c8:	beq	2b864 <flatcc_verify_vector_field@@Base+0xfc>
   2b7cc:	ldr	r4, [r0]
   2b7d0:	ldr	ip, [r4, r2]
   2b7d4:	add	ip, r2, ip
   2b7d8:	cmp	r2, ip
   2b7dc:	bcs	2b83c <flatcc_verify_vector_field@@Base+0xd4>
   2b7e0:	ldr	r1, [r0, #4]
   2b7e4:	add	r0, ip, #4
   2b7e8:	cmp	r1, r0
   2b7ec:	bcc	2b83c <flatcc_verify_vector_field@@Base+0xd4>
   2b7f0:	cmp	lr, #4
   2b7f4:	movcc	lr, #4
   2b7f8:	sub	lr, lr, #1
   2b7fc:	orr	lr, lr, #3
   2b800:	tst	lr, r0
   2b804:	bne	2b83c <flatcc_verify_vector_field@@Base+0xd4>
   2b808:	ldr	r2, [r4, ip]
   2b80c:	ldr	ip, [sp, #12]
   2b810:	cmp	ip, r2
   2b814:	movcc	r0, #25
   2b818:	bcc	2b830 <flatcc_verify_vector_field@@Base+0xc8>
   2b81c:	mul	r2, r2, r3
   2b820:	sub	r0, r1, r0
   2b824:	cmp	r0, r2
   2b828:	movcc	r0, #26
   2b82c:	movcs	r0, #0
   2b830:	ldr	r4, [sp]
   2b834:	add	sp, sp, #4
   2b838:	pop	{pc}		; (ldr pc, [sp], #4)
   2b83c:	ldr	r4, [sp]
   2b840:	add	sp, sp, #4
   2b844:	mov	r0, #16
   2b848:	pop	{pc}		; (ldr pc, [sp], #4)
   2b84c:	cmp	r2, #0
   2b850:	ldr	r4, [sp]
   2b854:	add	sp, sp, #4
   2b858:	moveq	r0, #0
   2b85c:	movne	r0, #4
   2b860:	pop	{pc}		; (ldr pc, [sp], #4)
   2b864:	mov	r0, r2
   2b868:	b	2b830 <flatcc_verify_vector_field@@Base+0xc8>

0002b86c <flatcc_verify_string_vector_field@@Base>:
   2b86c:	ldrh	r3, [r0, #22]
   2b870:	add	r1, r1, #2
   2b874:	lsl	r1, r1, #1
   2b878:	uxth	r1, r1
   2b87c:	cmp	r3, r1
   2b880:	bls	2b9dc <flatcc_verify_string_vector_field@@Base+0x170>
   2b884:	ldr	r3, [r0, #12]
   2b888:	ldrh	r3, [r3, r1]
   2b88c:	cmp	r3, #0
   2b890:	beq	2b9dc <flatcc_verify_string_vector_field@@Base+0x170>
   2b894:	ldrh	r2, [r0, #20]
   2b898:	add	r1, r3, #4
   2b89c:	cmp	r1, r2
   2b8a0:	bhi	2b9ec <flatcc_verify_string_vector_field@@Base+0x180>
   2b8a4:	ldr	r2, [r0, #16]
   2b8a8:	add	r3, r3, r2
   2b8ac:	tst	r3, #3
   2b8b0:	bne	2b9f4 <flatcc_verify_string_vector_field@@Base+0x188>
   2b8b4:	cmp	r3, #0
   2b8b8:	beq	2ba2c <flatcc_verify_string_vector_field@@Base+0x1c0>
   2b8bc:	ldr	r1, [r0]
   2b8c0:	ldr	r2, [r1, r3]
   2b8c4:	add	r2, r3, r2
   2b8c8:	cmp	r3, r2
   2b8cc:	bcs	2b9d4 <flatcc_verify_string_vector_field@@Base+0x168>
   2b8d0:	ldr	ip, [r0, #4]
   2b8d4:	add	r0, r2, #4
   2b8d8:	cmp	ip, r0
   2b8dc:	bcc	2b9d4 <flatcc_verify_string_vector_field@@Base+0x168>
   2b8e0:	tst	r0, #3
   2b8e4:	bne	2b9d4 <flatcc_verify_string_vector_field@@Base+0x168>
   2b8e8:	ldr	r3, [r1, r2]
   2b8ec:	strd	r4, [sp, #-16]!
   2b8f0:	str	r6, [sp, #8]
   2b8f4:	str	lr, [sp, #12]
   2b8f8:	cmn	r3, #-1073741823	; 0xc0000001
   2b8fc:	bhi	2b9fc <flatcc_verify_string_vector_field@@Base+0x190>
   2b900:	lsl	lr, r3, #2
   2b904:	sub	r4, ip, r0
   2b908:	cmp	r4, lr
   2b90c:	bcc	2b9fc <flatcc_verify_string_vector_field@@Base+0x190>
   2b910:	cmp	r3, #0
   2b914:	beq	2ba48 <flatcc_verify_string_vector_field@@Base+0x1dc>
   2b918:	ldr	r2, [r1, r0]
   2b91c:	add	r2, r0, r2
   2b920:	cmp	r0, r2
   2b924:	bcs	2ba40 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b928:	add	r4, r2, #4
   2b92c:	cmp	ip, r4
   2b930:	bcc	2ba40 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b934:	tst	r2, #3
   2b938:	bne	2ba40 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b93c:	ldr	r3, [r1, r2]
   2b940:	sub	r5, ip, r4
   2b944:	add	r6, r3, #1
   2b948:	cmp	r6, r5
   2b94c:	addls	lr, r0, lr
   2b950:	bhi	2b9a8 <flatcc_verify_string_vector_field@@Base+0x13c>
   2b954:	add	r3, r1, r3
   2b958:	add	r0, r0, #4
   2b95c:	ldrb	r3, [r3, r4]
   2b960:	cmp	r3, #0
   2b964:	bne	2ba34 <flatcc_verify_string_vector_field@@Base+0x1c8>
   2b968:	cmp	r0, lr
   2b96c:	beq	2ba48 <flatcc_verify_string_vector_field@@Base+0x1dc>
   2b970:	ldr	r2, [r1, r0]
   2b974:	add	r2, r0, r2
   2b978:	cmp	r2, r0
   2b97c:	add	r4, r2, #4
   2b980:	bls	2ba40 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b984:	cmp	ip, r4
   2b988:	bcc	2ba40 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b98c:	tst	r2, #3
   2b990:	sub	r5, ip, r4
   2b994:	bne	2ba40 <flatcc_verify_string_vector_field@@Base+0x1d4>
   2b998:	ldr	r3, [r1, r2]
   2b99c:	add	r6, r3, #1
   2b9a0:	cmp	r5, r6
   2b9a4:	bcs	2b954 <flatcc_verify_string_vector_field@@Base+0xe8>
   2b9a8:	ldr	r3, [r1, r2]
   2b9ac:	add	r2, r3, #1
   2b9b0:	cmp	r5, r2
   2b9b4:	movcc	r0, #8
   2b9b8:	bcc	2ba1c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b9bc:	add	r3, r1, r3
   2b9c0:	ldrb	r3, [r3, r4]
   2b9c4:	cmp	r3, #0
   2b9c8:	moveq	r0, #0
   2b9cc:	movne	r0, #7
   2b9d0:	b	2ba1c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b9d4:	mov	r0, #16
   2b9d8:	bx	lr
   2b9dc:	cmp	r2, #0
   2b9e0:	movne	r0, #4
   2b9e4:	moveq	r0, #0
   2b9e8:	bx	lr
   2b9ec:	mov	r0, #13
   2b9f0:	bx	lr
   2b9f4:	mov	r0, #12
   2b9f8:	bx	lr
   2b9fc:	ldr	r3, [r1, r2]
   2ba00:	cmn	r3, #-1073741823	; 0xc0000001
   2ba04:	movhi	r0, #25
   2ba08:	bhi	2ba1c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2ba0c:	sub	r0, ip, r0
   2ba10:	cmp	r0, r3, lsl #2
   2ba14:	movcs	r0, #0
   2ba18:	movcc	r0, #26
   2ba1c:	ldrd	r4, [sp]
   2ba20:	ldr	r6, [sp, #8]
   2ba24:	add	sp, sp, #12
   2ba28:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba2c:	mov	r0, r3
   2ba30:	bx	lr
   2ba34:	cmp	ip, r4
   2ba38:	subcs	r5, ip, r4
   2ba3c:	bcs	2b9a8 <flatcc_verify_string_vector_field@@Base+0x13c>
   2ba40:	mov	r0, #17
   2ba44:	b	2ba1c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2ba48:	mov	r0, r3
   2ba4c:	b	2ba1c <flatcc_verify_string_vector_field@@Base+0x1b0>

0002ba50 <flatcc_verify_table_field@@Base>:
   2ba50:	ldrh	ip, [r0, #22]
   2ba54:	add	r1, r1, #2
   2ba58:	lsl	r1, r1, #1
   2ba5c:	uxth	r1, r1
   2ba60:	cmp	ip, r1
   2ba64:	bls	2bb84 <flatcc_verify_table_field@@Base+0x134>
   2ba68:	ldr	ip, [r0, #12]
   2ba6c:	ldrh	r1, [ip, r1]
   2ba70:	cmp	r1, #0
   2ba74:	beq	2bb84 <flatcc_verify_table_field@@Base+0x134>
   2ba78:	ldrh	r2, [r0, #20]
   2ba7c:	add	ip, r1, #4
   2ba80:	cmp	ip, r2
   2ba84:	bhi	2bb94 <flatcc_verify_table_field@@Base+0x144>
   2ba88:	ldr	r2, [r0, #16]
   2ba8c:	add	r1, r1, r2
   2ba90:	tst	r1, #3
   2ba94:	bne	2bb9c <flatcc_verify_table_field@@Base+0x14c>
   2ba98:	cmp	r1, #0
   2ba9c:	beq	2bba4 <flatcc_verify_table_field@@Base+0x154>
   2baa0:	ldr	ip, [r0]
   2baa4:	strd	r4, [sp, #-12]!
   2baa8:	ldr	r2, [r0, #8]
   2baac:	str	lr, [sp, #8]
   2bab0:	sub	sp, sp, #28
   2bab4:	ldr	lr, [r0, #4]
   2bab8:	ldr	r0, [ip, r1]
   2babc:	sub	r2, r2, #1
   2bac0:	cmp	r2, #0
   2bac4:	moveq	r0, #3
   2bac8:	str	r2, [sp, #8]
   2bacc:	beq	2bb74 <flatcc_verify_table_field@@Base+0x124>
   2bad0:	add	r2, r1, r0
   2bad4:	cmp	r1, r2
   2bad8:	bcs	2bb70 <flatcc_verify_table_field@@Base+0x120>
   2badc:	add	r1, r2, #4
   2bae0:	cmp	lr, r1
   2bae4:	bcc	2bb70 <flatcc_verify_table_field@@Base+0x120>
   2bae8:	tst	r2, #3
   2baec:	bne	2bb70 <flatcc_verify_table_field@@Base+0x120>
   2baf0:	str	r2, [sp, #16]
   2baf4:	ldr	r1, [ip, r2]
   2baf8:	subs	r1, r2, r1
   2bafc:	bmi	2bbac <flatcc_verify_table_field@@Base+0x15c>
   2bb00:	tst	r1, #1
   2bb04:	bne	2bbac <flatcc_verify_table_field@@Base+0x15c>
   2bb08:	add	r4, r1, #2
   2bb0c:	cmp	lr, r4
   2bb10:	movcc	r0, #27
   2bb14:	bcc	2bb74 <flatcc_verify_table_field@@Base+0x124>
   2bb18:	ldrh	r0, [ip, r1]
   2bb1c:	add	r5, ip, r1
   2bb20:	add	r1, r0, r1
   2bb24:	strh	r0, [sp, #22]
   2bb28:	cmp	lr, r1
   2bb2c:	bcc	2bbb4 <flatcc_verify_table_field@@Base+0x164>
   2bb30:	tst	r0, #1
   2bb34:	bne	2bbb4 <flatcc_verify_table_field@@Base+0x164>
   2bb38:	cmp	r0, #3
   2bb3c:	movls	r0, #28
   2bb40:	bls	2bb74 <flatcc_verify_table_field@@Base+0x124>
   2bb44:	ldrh	r1, [ip, r4]
   2bb48:	sub	r2, lr, r2
   2bb4c:	cmp	r2, r1
   2bb50:	strh	r1, [sp, #20]
   2bb54:	movcc	r0, #20
   2bb58:	bcc	2bb74 <flatcc_verify_table_field@@Base+0x124>
   2bb5c:	mov	r0, sp
   2bb60:	stm	sp, {ip, lr}
   2bb64:	str	r5, [sp, #12]
   2bb68:	blx	r3
   2bb6c:	b	2bb74 <flatcc_verify_table_field@@Base+0x124>
   2bb70:	mov	r0, #15
   2bb74:	add	sp, sp, #28
   2bb78:	ldrd	r4, [sp]
   2bb7c:	add	sp, sp, #8
   2bb80:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb84:	cmp	r2, #0
   2bb88:	moveq	r0, #0
   2bb8c:	movne	r0, #4
   2bb90:	bx	lr
   2bb94:	mov	r0, #13
   2bb98:	bx	lr
   2bb9c:	mov	r0, #12
   2bba0:	bx	lr
   2bba4:	mov	r0, r1
   2bba8:	bx	lr
   2bbac:	mov	r0, #29
   2bbb0:	b	2bb74 <flatcc_verify_table_field@@Base+0x124>
   2bbb4:	mov	r0, #30
   2bbb8:	b	2bb74 <flatcc_verify_table_field@@Base+0x124>

0002bbbc <flatcc_verify_table_vector_field@@Base>:
   2bbbc:	ldrh	ip, [r0, #22]
   2bbc0:	add	r1, r1, #2
   2bbc4:	lsl	r1, r1, #1
   2bbc8:	uxth	r1, r1
   2bbcc:	cmp	ip, r1
   2bbd0:	bls	2be48 <flatcc_verify_table_vector_field@@Base+0x28c>
   2bbd4:	ldr	ip, [r0, #12]
   2bbd8:	ldrh	r1, [ip, r1]
   2bbdc:	cmp	r1, #0
   2bbe0:	beq	2be48 <flatcc_verify_table_vector_field@@Base+0x28c>
   2bbe4:	ldrh	r2, [r0, #20]
   2bbe8:	add	ip, r1, #4
   2bbec:	cmp	ip, r2
   2bbf0:	bhi	2be58 <flatcc_verify_table_vector_field@@Base+0x29c>
   2bbf4:	ldr	r2, [r0, #16]
   2bbf8:	add	r1, r1, r2
   2bbfc:	tst	r1, #3
   2bc00:	bne	2be70 <flatcc_verify_table_vector_field@@Base+0x2b4>
   2bc04:	cmp	r1, #0
   2bc08:	beq	2be50 <flatcc_verify_table_vector_field@@Base+0x294>
   2bc0c:	ldr	ip, [r0, #8]
   2bc10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bc14:	strd	r6, [sp, #8]
   2bc18:	ldr	r6, [r0]
   2bc1c:	strd	r8, [sp, #16]
   2bc20:	cmp	ip, #0
   2bc24:	strd	sl, [sp, #24]
   2bc28:	str	lr, [sp, #32]
   2bc2c:	sub	sp, sp, #36	; 0x24
   2bc30:	ldr	r2, [r6, r1]
   2bc34:	ble	2be68 <flatcc_verify_table_vector_field@@Base+0x2ac>
   2bc38:	add	r2, r1, r2
   2bc3c:	cmp	r1, r2
   2bc40:	bcs	2be28 <flatcc_verify_table_vector_field@@Base+0x26c>
   2bc44:	ldr	r8, [r0, #4]
   2bc48:	add	r5, r2, #4
   2bc4c:	cmp	r8, r5
   2bc50:	bcc	2be28 <flatcc_verify_table_vector_field@@Base+0x26c>
   2bc54:	tst	r5, #3
   2bc58:	bne	2be28 <flatcc_verify_table_vector_field@@Base+0x26c>
   2bc5c:	ldr	r1, [r6, r2]
   2bc60:	cmn	r1, #-1073741823	; 0xc0000001
   2bc64:	bhi	2be78 <flatcc_verify_table_vector_field@@Base+0x2bc>
   2bc68:	lsl	r9, r1, #2
   2bc6c:	sub	r0, r8, r5
   2bc70:	cmp	r0, r9
   2bc74:	bcc	2be78 <flatcc_verify_table_vector_field@@Base+0x2bc>
   2bc78:	cmp	r1, #0
   2bc7c:	beq	2be98 <flatcc_verify_table_vector_field@@Base+0x2dc>
   2bc80:	sub	r7, ip, #2
   2bc84:	add	fp, r6, r5
   2bc88:	ldr	r1, [r6, r5]
   2bc8c:	cmp	r7, #0
   2bc90:	str	r7, [sp, #16]
   2bc94:	beq	2be68 <flatcc_verify_table_vector_field@@Base+0x2ac>
   2bc98:	add	r1, r5, r1
   2bc9c:	mov	sl, r3
   2bca0:	cmp	r5, r1
   2bca4:	bcs	2beb8 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2bca8:	add	r3, r1, #4
   2bcac:	cmp	r8, r3
   2bcb0:	bcc	2beb8 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2bcb4:	tst	r1, #3
   2bcb8:	bne	2beb8 <flatcc_verify_table_vector_field@@Base+0x2fc>
   2bcbc:	movw	r3, #65532	; 0xfffc
   2bcc0:	movt	r3, #65535	; 0xffff
   2bcc4:	sub	r3, r3, r2
   2bcc8:	add	r2, r2, #8
   2bccc:	add	r9, r5, r9
   2bcd0:	add	fp, fp, r3
   2bcd4:	add	r4, r6, r2
   2bcd8:	str	r1, [sp, #24]
   2bcdc:	add	r3, fp, r5
   2bce0:	ldr	r2, [r6, r1]
   2bce4:	subs	r2, r1, r2
   2bce8:	bmi	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bcec:	tst	r2, #1
   2bcf0:	bne	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bcf4:	add	lr, r2, #2
   2bcf8:	cmp	r8, lr
   2bcfc:	bcc	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bd00:	ldrh	r0, [r6, r2]
   2bd04:	add	ip, r6, r2
   2bd08:	add	r2, r0, r2
   2bd0c:	strh	r0, [sp, #30]
   2bd10:	cmp	r8, r2
   2bd14:	bcc	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bd18:	tst	r0, #1
   2bd1c:	bne	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bd20:	cmp	r0, #3
   2bd24:	bls	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bd28:	ldrh	r2, [r6, lr]
   2bd2c:	sub	r1, r8, r1
   2bd30:	cmp	r1, r2
   2bd34:	strh	r2, [sp, #28]
   2bd38:	bcc	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bd3c:	add	r0, sp, #8
   2bd40:	stmib	sp, {r3, r6, r8}
   2bd44:	str	ip, [sp, #20]
   2bd48:	blx	sl
   2bd4c:	cmp	r0, #0
   2bd50:	ldr	r3, [sp, #4]
   2bd54:	bne	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bd58:	add	r5, r5, #4
   2bd5c:	cmp	r5, r9
   2bd60:	beq	2be98 <flatcc_verify_table_vector_field@@Base+0x2dc>
   2bd64:	mov	r3, r4
   2bd68:	ldr	r1, [r4], #4
   2bd6c:	str	r7, [sp, #16]
   2bd70:	add	r1, r1, r5
   2bd74:	cmp	r5, r1
   2bd78:	bcc	2bea0 <flatcc_verify_table_vector_field@@Base+0x2e4>
   2bd7c:	ldr	r3, [r3]
   2bd80:	str	r7, [sp, #16]
   2bd84:	add	r3, r5, r3
   2bd88:	cmp	r3, r5
   2bd8c:	bls	2bec0 <flatcc_verify_table_vector_field@@Base+0x304>
   2bd90:	add	r2, r3, #4
   2bd94:	cmp	r8, r2
   2bd98:	bcc	2bec0 <flatcc_verify_table_vector_field@@Base+0x304>
   2bd9c:	tst	r3, #3
   2bda0:	bne	2bec0 <flatcc_verify_table_vector_field@@Base+0x304>
   2bda4:	str	r3, [sp, #24]
   2bda8:	ldr	r2, [r6, r3]
   2bdac:	subs	r2, r3, r2
   2bdb0:	bmi	2bec8 <flatcc_verify_table_vector_field@@Base+0x30c>
   2bdb4:	tst	r2, #1
   2bdb8:	bne	2bec8 <flatcc_verify_table_vector_field@@Base+0x30c>
   2bdbc:	add	r0, r2, #2
   2bdc0:	cmp	r8, r0
   2bdc4:	movcc	r0, #27
   2bdc8:	bcc	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2bdcc:	ldrh	r1, [r6, r2]
   2bdd0:	add	ip, r6, r2
   2bdd4:	add	r2, r1, r2
   2bdd8:	strh	r1, [sp, #30]
   2bddc:	cmp	r8, r2
   2bde0:	bcc	2bed0 <flatcc_verify_table_vector_field@@Base+0x314>
   2bde4:	tst	r1, #1
   2bde8:	bne	2bed0 <flatcc_verify_table_vector_field@@Base+0x314>
   2bdec:	cmp	r1, #3
   2bdf0:	movls	r0, #28
   2bdf4:	bls	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2bdf8:	ldrh	r2, [r6, r0]
   2bdfc:	sub	r3, r8, r3
   2be00:	cmp	r3, r2
   2be04:	strh	r2, [sp, #28]
   2be08:	movcc	r0, #20
   2be0c:	bcc	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2be10:	add	r0, sp, #8
   2be14:	str	r6, [sp, #8]
   2be18:	str	r8, [sp, #12]
   2be1c:	str	ip, [sp, #20]
   2be20:	blx	sl
   2be24:	b	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2be28:	mov	r0, #16
   2be2c:	add	sp, sp, #36	; 0x24
   2be30:	ldrd	r4, [sp]
   2be34:	ldrd	r6, [sp, #8]
   2be38:	ldrd	r8, [sp, #16]
   2be3c:	ldrd	sl, [sp, #24]
   2be40:	add	sp, sp, #32
   2be44:	pop	{pc}		; (ldr pc, [sp], #4)
   2be48:	cmp	r2, #0
   2be4c:	bne	2be60 <flatcc_verify_table_vector_field@@Base+0x2a4>
   2be50:	mov	r0, #0
   2be54:	bx	lr
   2be58:	mov	r0, #13
   2be5c:	bx	lr
   2be60:	mov	r0, #4
   2be64:	bx	lr
   2be68:	mov	r0, #3
   2be6c:	b	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2be70:	mov	r0, #12
   2be74:	bx	lr
   2be78:	ldr	r3, [r6, r2]
   2be7c:	cmn	r3, #-1073741823	; 0xc0000001
   2be80:	movhi	r0, #25
   2be84:	bhi	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2be88:	sub	r5, r8, r5
   2be8c:	cmp	r5, r3, lsl #2
   2be90:	movcc	r0, #26
   2be94:	bcc	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2be98:	mov	r0, #0
   2be9c:	b	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2bea0:	add	r2, r1, #4
   2bea4:	cmp	r8, r2
   2bea8:	bcc	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2beac:	tst	r1, #3
   2beb0:	beq	2bcd8 <flatcc_verify_table_vector_field@@Base+0x11c>
   2beb4:	b	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2beb8:	mov	r3, fp
   2bebc:	b	2bd7c <flatcc_verify_table_vector_field@@Base+0x1c0>
   2bec0:	mov	r0, #15
   2bec4:	b	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2bec8:	mov	r0, #29
   2becc:	b	2be2c <flatcc_verify_table_vector_field@@Base+0x270>
   2bed0:	mov	r0, #30
   2bed4:	b	2be2c <flatcc_verify_table_vector_field@@Base+0x270>

0002bed8 <flatcc_verify_union_table@@Base>:
   2bed8:	strd	r4, [sp, #-12]!
   2bedc:	ldr	r3, [r0, #8]
   2bee0:	ldr	ip, [r0, #4]
   2bee4:	ldr	r2, [r0, #16]
   2bee8:	sub	r3, r3, #1
   2beec:	str	lr, [sp, #8]
   2bef0:	sub	sp, sp, #28
   2bef4:	cmp	r3, #0
   2bef8:	ldr	lr, [r0]
   2befc:	str	r3, [sp, #8]
   2bf00:	ldr	r3, [r0, #20]
   2bf04:	moveq	r0, #3
   2bf08:	beq	2bf1c <flatcc_verify_union_table@@Base+0x44>
   2bf0c:	add	r3, r2, r3
   2bf10:	cmp	r2, r3
   2bf14:	bcc	2bf2c <flatcc_verify_union_table@@Base+0x54>
   2bf18:	mov	r0, #15
   2bf1c:	add	sp, sp, #28
   2bf20:	ldrd	r4, [sp]
   2bf24:	add	sp, sp, #8
   2bf28:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf2c:	add	r2, r3, #4
   2bf30:	cmp	ip, r2
   2bf34:	bcc	2bf18 <flatcc_verify_union_table@@Base+0x40>
   2bf38:	tst	r3, #3
   2bf3c:	bne	2bf18 <flatcc_verify_union_table@@Base+0x40>
   2bf40:	str	r3, [sp, #16]
   2bf44:	ldr	r2, [lr, r3]
   2bf48:	subs	r2, r3, r2
   2bf4c:	bmi	2bfcc <flatcc_verify_union_table@@Base+0xf4>
   2bf50:	tst	r2, #1
   2bf54:	bne	2bfcc <flatcc_verify_union_table@@Base+0xf4>
   2bf58:	add	r4, r2, #2
   2bf5c:	cmp	ip, r4
   2bf60:	movcc	r0, #27
   2bf64:	bcc	2bf1c <flatcc_verify_union_table@@Base+0x44>
   2bf68:	ldrh	r0, [lr, r2]
   2bf6c:	add	r5, lr, r2
   2bf70:	add	r2, r0, r2
   2bf74:	strh	r0, [sp, #22]
   2bf78:	cmp	ip, r2
   2bf7c:	bcc	2bfc4 <flatcc_verify_union_table@@Base+0xec>
   2bf80:	tst	r0, #1
   2bf84:	bne	2bfc4 <flatcc_verify_union_table@@Base+0xec>
   2bf88:	cmp	r0, #3
   2bf8c:	movls	r0, #28
   2bf90:	bls	2bf1c <flatcc_verify_union_table@@Base+0x44>
   2bf94:	ldrh	r2, [lr, r4]
   2bf98:	sub	r3, ip, r3
   2bf9c:	cmp	r3, r2
   2bfa0:	strh	r2, [sp, #20]
   2bfa4:	movcc	r0, #20
   2bfa8:	bcc	2bf1c <flatcc_verify_union_table@@Base+0x44>
   2bfac:	mov	r0, sp
   2bfb0:	str	lr, [sp]
   2bfb4:	str	ip, [sp, #4]
   2bfb8:	str	r5, [sp, #12]
   2bfbc:	blx	r1
   2bfc0:	b	2bf1c <flatcc_verify_union_table@@Base+0x44>
   2bfc4:	mov	r0, #30
   2bfc8:	b	2bf1c <flatcc_verify_union_table@@Base+0x44>
   2bfcc:	mov	r0, #29
   2bfd0:	b	2bf1c <flatcc_verify_union_table@@Base+0x44>

0002bfd4 <flatcc_verify_union_struct@@Base>:
   2bfd4:	push	{lr}		; (str lr, [sp, #-4]!)
   2bfd8:	ldr	ip, [r0, #20]
   2bfdc:	ldr	lr, [r0, #4]
   2bfe0:	ldr	r3, [r0, #16]
   2bfe4:	cmp	ip, #0
   2bfe8:	beq	2c01c <flatcc_verify_union_struct@@Base+0x48>
   2bfec:	add	r3, r3, ip
   2bff0:	cmp	lr, r3
   2bff4:	bcc	2c01c <flatcc_verify_union_struct@@Base+0x48>
   2bff8:	adds	r1, r1, r3
   2bffc:	bcs	2c02c <flatcc_verify_union_struct@@Base+0x58>
   2c000:	cmp	lr, r1
   2c004:	bcc	2c024 <flatcc_verify_union_struct@@Base+0x50>
   2c008:	sub	r2, r2, #1
   2c00c:	tst	r2, r3
   2c010:	moveq	r0, #0
   2c014:	movne	r0, #11
   2c018:	pop	{pc}		; (ldr pc, [sp], #4)
   2c01c:	mov	r0, #18
   2c020:	pop	{pc}		; (ldr pc, [sp], #4)
   2c024:	mov	r0, #9
   2c028:	pop	{pc}		; (ldr pc, [sp], #4)
   2c02c:	mov	r0, #10
   2c030:	b	2c018 <flatcc_verify_union_struct@@Base+0x44>

0002c034 <flatcc_verify_union_string@@Base>:
   2c034:	ldrd	r2, [r0, #16]
   2c038:	add	r3, r2, r3
   2c03c:	cmp	r2, r3
   2c040:	bcs	2c08c <flatcc_verify_union_string@@Base+0x58>
   2c044:	ldr	r2, [r0, #4]
   2c048:	add	r1, r3, #4
   2c04c:	cmp	r2, r1
   2c050:	bcc	2c08c <flatcc_verify_union_string@@Base+0x58>
   2c054:	tst	r3, #3
   2c058:	bne	2c08c <flatcc_verify_union_string@@Base+0x58>
   2c05c:	ldr	r0, [r0]
   2c060:	sub	r2, r2, r1
   2c064:	ldr	r3, [r0, r3]
   2c068:	add	ip, r3, #1
   2c06c:	cmp	r2, ip
   2c070:	bcc	2c094 <flatcc_verify_union_string@@Base+0x60>
   2c074:	add	r1, r0, r1
   2c078:	ldrb	r3, [r1, r3]
   2c07c:	cmp	r3, #0
   2c080:	moveq	r0, #0
   2c084:	movne	r0, #7
   2c088:	bx	lr
   2c08c:	mov	r0, #17
   2c090:	bx	lr
   2c094:	mov	r0, #8
   2c098:	bx	lr

0002c09c <flatcc_verify_buffer_header@@Base>:
   2c09c:	tst	r0, #3
   2c0a0:	bne	2c10c <flatcc_verify_buffer_header@@Base+0x70>
   2c0a4:	cmn	r1, #9
   2c0a8:	bhi	2c114 <flatcc_verify_buffer_header@@Base+0x78>
   2c0ac:	cmp	r1, #7
   2c0b0:	bls	2c104 <flatcc_verify_buffer_header@@Base+0x68>
   2c0b4:	cmp	r2, #0
   2c0b8:	beq	2c11c <flatcc_verify_buffer_header@@Base+0x80>
   2c0bc:	mov	r1, r2
   2c0c0:	mov	r2, #4
   2c0c4:	str	r4, [sp, #-8]!
   2c0c8:	str	lr, [sp, #4]
   2c0cc:	sub	sp, sp, #8
   2c0d0:	mov	r4, r0
   2c0d4:	add	r0, sp, r2
   2c0d8:	bl	145a8 <strncpy@plt>
   2c0dc:	ldr	r2, [r4, #4]
   2c0e0:	ldr	r3, [sp, #4]
   2c0e4:	cmp	r3, #0
   2c0e8:	cmpne	r2, r3
   2c0ec:	movne	r0, #2
   2c0f0:	moveq	r0, #0
   2c0f4:	add	sp, sp, #8
   2c0f8:	ldr	r4, [sp]
   2c0fc:	add	sp, sp, #4
   2c100:	pop	{pc}		; (ldr pc, [sp], #4)
   2c104:	mov	r0, #1
   2c108:	bx	lr
   2c10c:	mov	r0, #5
   2c110:	bx	lr
   2c114:	mov	r0, #6
   2c118:	bx	lr
   2c11c:	mov	r0, #0
   2c120:	bx	lr

0002c124 <flatcc_verify_typed_buffer_header@@Base>:
   2c124:	tst	r0, #3
   2c128:	bne	2c160 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2c12c:	cmn	r1, #9
   2c130:	bhi	2c170 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2c134:	cmp	r1, #7
   2c138:	bls	2c158 <flatcc_verify_typed_buffer_header@@Base+0x34>
   2c13c:	cmp	r2, #0
   2c140:	beq	2c168 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2c144:	ldr	r0, [r0, #4]
   2c148:	cmp	r2, r0
   2c14c:	movne	r0, #2
   2c150:	moveq	r0, #0
   2c154:	bx	lr
   2c158:	mov	r0, #1
   2c15c:	bx	lr
   2c160:	mov	r0, #5
   2c164:	bx	lr
   2c168:	mov	r0, r2
   2c16c:	bx	lr
   2c170:	mov	r0, #6
   2c174:	bx	lr

0002c178 <flatcc_verify_struct_as_root@@Base>:
   2c178:	tst	r0, #3
   2c17c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2c180:	strd	r6, [sp, #8]
   2c184:	movne	r0, #5
   2c188:	strd	r8, [sp, #16]
   2c18c:	str	lr, [sp, #24]
   2c190:	sub	sp, sp, #12
   2c194:	ldrh	r5, [sp, #40]	; 0x28
   2c198:	bne	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c19c:	cmn	r1, #9
   2c1a0:	movhi	r0, #6
   2c1a4:	bhi	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c1a8:	cmp	r1, #7
   2c1ac:	movls	r0, #1
   2c1b0:	bls	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c1b4:	cmp	r2, #0
   2c1b8:	mov	r7, r3
   2c1bc:	mov	r8, r2
   2c1c0:	mov	r6, r1
   2c1c4:	mov	r4, r0
   2c1c8:	beq	2c1f0 <flatcc_verify_struct_as_root@@Base+0x78>
   2c1cc:	mov	r2, #4
   2c1d0:	mov	r1, r8
   2c1d4:	add	r0, sp, r2
   2c1d8:	bl	145a8 <strncpy@plt>
   2c1dc:	ldr	r9, [r4, #4]
   2c1e0:	ldr	r3, [sp, #4]
   2c1e4:	cmp	r3, r9
   2c1e8:	cmpne	r3, #0
   2c1ec:	bne	2c25c <flatcc_verify_struct_as_root@@Base+0xe4>
   2c1f0:	ldr	r2, [r4]
   2c1f4:	cmp	r6, r2
   2c1f8:	movcs	r0, #0
   2c1fc:	movcc	r0, #1
   2c200:	cmp	r2, #0
   2c204:	moveq	r0, #1
   2c208:	cmp	r0, #0
   2c20c:	bne	2c24c <flatcc_verify_struct_as_root@@Base+0xd4>
   2c210:	adds	r3, r7, r2
   2c214:	bcs	2c284 <flatcc_verify_struct_as_root@@Base+0x10c>
   2c218:	cmp	r6, r3
   2c21c:	bcc	2c254 <flatcc_verify_struct_as_root@@Base+0xdc>
   2c220:	sub	r5, r5, #1
   2c224:	tst	r5, r2
   2c228:	movne	r0, #11
   2c22c:	bne	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c230:	mov	r0, #0
   2c234:	add	sp, sp, #12
   2c238:	ldrd	r4, [sp]
   2c23c:	ldrd	r6, [sp, #8]
   2c240:	ldrd	r8, [sp, #16]
   2c244:	add	sp, sp, #24
   2c248:	pop	{pc}		; (ldr pc, [sp], #4)
   2c24c:	mov	r0, #18
   2c250:	b	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c254:	mov	r0, #9
   2c258:	b	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c25c:	mov	r1, r8
   2c260:	add	r0, sp, #4
   2c264:	mov	r2, #4
   2c268:	bl	145a8 <strncpy@plt>
   2c26c:	ldr	r3, [sp, #4]
   2c270:	cmp	r9, r3
   2c274:	cmpne	r3, #0
   2c278:	beq	2c230 <flatcc_verify_struct_as_root@@Base+0xb8>
   2c27c:	mov	r0, #2
   2c280:	b	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>
   2c284:	mov	r0, #10
   2c288:	b	2c234 <flatcc_verify_struct_as_root@@Base+0xbc>

0002c28c <flatcc_verify_struct_as_typed_root@@Base>:
   2c28c:	tst	r0, #3
   2c290:	push	{lr}		; (str lr, [sp, #-4]!)
   2c294:	movne	r0, #5
   2c298:	ldrh	ip, [sp, #4]
   2c29c:	bne	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c2a0:	cmn	r1, #9
   2c2a4:	movhi	r0, #6
   2c2a8:	bhi	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c2ac:	cmp	r1, #7
   2c2b0:	movls	r0, #1
   2c2b4:	bls	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c2b8:	cmp	r2, #0
   2c2bc:	beq	2c2d0 <flatcc_verify_struct_as_typed_root@@Base+0x44>
   2c2c0:	ldr	lr, [r0, #4]
   2c2c4:	cmp	r2, lr
   2c2c8:	movne	r0, #2
   2c2cc:	bne	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c2d0:	ldr	r2, [r0]
   2c2d4:	cmp	r1, r2
   2c2d8:	movcs	r0, #0
   2c2dc:	movcc	r0, #1
   2c2e0:	cmp	r2, #0
   2c2e4:	moveq	r0, #1
   2c2e8:	cmp	r0, #0
   2c2ec:	movne	r0, #18
   2c2f0:	bne	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c2f4:	adds	r3, r3, r2
   2c2f8:	bcs	2c320 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   2c2fc:	cmp	r1, r3
   2c300:	bcc	2c318 <flatcc_verify_struct_as_typed_root@@Base+0x8c>
   2c304:	sub	ip, ip, #1
   2c308:	tst	ip, r2
   2c30c:	moveq	r0, #0
   2c310:	movne	r0, #11
   2c314:	pop	{pc}		; (ldr pc, [sp], #4)
   2c318:	mov	r0, #9
   2c31c:	b	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c320:	mov	r0, #10
   2c324:	b	2c314 <flatcc_verify_struct_as_typed_root@@Base+0x88>

0002c328 <flatcc_verify_table_as_root@@Base>:
   2c328:	tst	r0, #3
   2c32c:	bne	2c45c <flatcc_verify_table_as_root@@Base+0x134>
   2c330:	cmn	r1, #9
   2c334:	bhi	2c48c <flatcc_verify_table_as_root@@Base+0x164>
   2c338:	cmp	r1, #7
   2c33c:	bls	2c438 <flatcc_verify_table_as_root@@Base+0x110>
   2c340:	cmp	r2, #0
   2c344:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c348:	mov	r4, r2
   2c34c:	mov	r5, r0
   2c350:	strd	r6, [sp, #8]
   2c354:	mov	r7, r3
   2c358:	mov	r6, r1
   2c35c:	str	r8, [sp, #16]
   2c360:	str	lr, [sp, #20]
   2c364:	sub	sp, sp, #24
   2c368:	beq	2c390 <flatcc_verify_table_as_root@@Base+0x68>
   2c36c:	mov	r2, #4
   2c370:	mov	r0, sp
   2c374:	mov	r1, r4
   2c378:	bl	145a8 <strncpy@plt>
   2c37c:	ldr	r3, [sp]
   2c380:	ldr	r8, [r5, #4]
   2c384:	cmp	r3, r8
   2c388:	cmpne	r3, #0
   2c38c:	bne	2c464 <flatcc_verify_table_as_root@@Base+0x13c>
   2c390:	ldr	r2, [r5]
   2c394:	mov	r3, #99	; 0x63
   2c398:	str	r3, [sp, #8]
   2c39c:	cmp	r2, #0
   2c3a0:	beq	2c440 <flatcc_verify_table_as_root@@Base+0x118>
   2c3a4:	add	r3, r2, #4
   2c3a8:	cmp	r6, r3
   2c3ac:	bcc	2c440 <flatcc_verify_table_as_root@@Base+0x118>
   2c3b0:	tst	r2, #3
   2c3b4:	bne	2c440 <flatcc_verify_table_as_root@@Base+0x118>
   2c3b8:	ldr	r3, [r5, r2]
   2c3bc:	str	r2, [sp, #16]
   2c3c0:	subs	r3, r2, r3
   2c3c4:	bmi	2c494 <flatcc_verify_table_as_root@@Base+0x16c>
   2c3c8:	tst	r3, #1
   2c3cc:	bne	2c494 <flatcc_verify_table_as_root@@Base+0x16c>
   2c3d0:	add	r0, r3, #2
   2c3d4:	cmp	r6, r0
   2c3d8:	movcc	r0, #27
   2c3dc:	bcc	2c444 <flatcc_verify_table_as_root@@Base+0x11c>
   2c3e0:	ldrh	r1, [r5, r3]
   2c3e4:	add	ip, r5, r3
   2c3e8:	add	r3, r1, r3
   2c3ec:	strh	r1, [sp, #22]
   2c3f0:	cmp	r6, r3
   2c3f4:	bcc	2c49c <flatcc_verify_table_as_root@@Base+0x174>
   2c3f8:	tst	r1, #1
   2c3fc:	bne	2c49c <flatcc_verify_table_as_root@@Base+0x174>
   2c400:	cmp	r1, #3
   2c404:	movls	r0, #28
   2c408:	bls	2c444 <flatcc_verify_table_as_root@@Base+0x11c>
   2c40c:	ldrh	r3, [r5, r0]
   2c410:	sub	r2, r6, r2
   2c414:	cmp	r2, r3
   2c418:	strh	r3, [sp, #20]
   2c41c:	movcc	r0, #20
   2c420:	bcc	2c444 <flatcc_verify_table_as_root@@Base+0x11c>
   2c424:	mov	r0, sp
   2c428:	stm	sp, {r5, r6}
   2c42c:	str	ip, [sp, #12]
   2c430:	blx	r7
   2c434:	b	2c444 <flatcc_verify_table_as_root@@Base+0x11c>
   2c438:	mov	r0, #1
   2c43c:	bx	lr
   2c440:	mov	r0, #15
   2c444:	add	sp, sp, #24
   2c448:	ldrd	r4, [sp]
   2c44c:	ldrd	r6, [sp, #8]
   2c450:	ldr	r8, [sp, #16]
   2c454:	add	sp, sp, #20
   2c458:	pop	{pc}		; (ldr pc, [sp], #4)
   2c45c:	mov	r0, #5
   2c460:	bx	lr
   2c464:	mov	r1, r4
   2c468:	mov	r0, sp
   2c46c:	mov	r2, #4
   2c470:	bl	145a8 <strncpy@plt>
   2c474:	ldr	r3, [sp]
   2c478:	cmp	r8, r3
   2c47c:	cmpne	r3, #0
   2c480:	moveq	r0, #0
   2c484:	movne	r0, #2
   2c488:	b	2c444 <flatcc_verify_table_as_root@@Base+0x11c>
   2c48c:	mov	r0, #6
   2c490:	bx	lr
   2c494:	mov	r0, #29
   2c498:	b	2c444 <flatcc_verify_table_as_root@@Base+0x11c>
   2c49c:	mov	r0, #30
   2c4a0:	b	2c444 <flatcc_verify_table_as_root@@Base+0x11c>

0002c4a4 <flatcc_verify_table_as_typed_root@@Base>:
   2c4a4:	tst	r0, #3
   2c4a8:	bne	2c594 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2c4ac:	cmn	r1, #9
   2c4b0:	bhi	2c5b0 <flatcc_verify_table_as_typed_root@@Base+0x10c>
   2c4b4:	cmp	r1, #7
   2c4b8:	bls	2c58c <flatcc_verify_table_as_typed_root@@Base+0xe8>
   2c4bc:	cmp	r2, #0
   2c4c0:	beq	2c4d0 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   2c4c4:	ldr	ip, [r0, #4]
   2c4c8:	cmp	r2, ip
   2c4cc:	bne	2c5b8 <flatcc_verify_table_as_typed_root@@Base+0x114>
   2c4d0:	ldr	r2, [r0]
   2c4d4:	mov	ip, #99	; 0x63
   2c4d8:	strd	r4, [sp, #-12]!
   2c4dc:	str	lr, [sp, #8]
   2c4e0:	sub	sp, sp, #28
   2c4e4:	str	ip, [sp, #8]
   2c4e8:	cmp	r2, #0
   2c4ec:	beq	2c59c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2c4f0:	add	ip, r2, #4
   2c4f4:	cmp	r1, ip
   2c4f8:	bcc	2c59c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2c4fc:	tst	r2, #3
   2c500:	bne	2c59c <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2c504:	ldr	ip, [r0, r2]
   2c508:	str	r2, [sp, #16]
   2c50c:	subs	ip, r2, ip
   2c510:	bmi	2c5c0 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   2c514:	tst	ip, #1
   2c518:	bne	2c5c0 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   2c51c:	add	r4, ip, #2
   2c520:	cmp	r1, r4
   2c524:	movcc	r0, #27
   2c528:	bcc	2c5a0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2c52c:	ldrh	lr, [r0, ip]
   2c530:	add	r5, r0, ip
   2c534:	add	ip, lr, ip
   2c538:	strh	lr, [sp, #22]
   2c53c:	cmp	r1, ip
   2c540:	bcc	2c5c8 <flatcc_verify_table_as_typed_root@@Base+0x124>
   2c544:	tst	lr, #1
   2c548:	bne	2c5c8 <flatcc_verify_table_as_typed_root@@Base+0x124>
   2c54c:	cmp	lr, #3
   2c550:	movls	r0, #28
   2c554:	bls	2c5a0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2c558:	ldrh	ip, [r0, r4]
   2c55c:	sub	r2, r1, r2
   2c560:	cmp	r2, ip
   2c564:	strh	ip, [sp, #20]
   2c568:	movcc	r0, #20
   2c56c:	bcc	2c5a0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2c570:	mov	r2, r0
   2c574:	mov	r0, sp
   2c578:	str	r2, [sp]
   2c57c:	str	r1, [sp, #4]
   2c580:	str	r5, [sp, #12]
   2c584:	blx	r3
   2c588:	b	2c5a0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2c58c:	mov	r0, #1
   2c590:	bx	lr
   2c594:	mov	r0, #5
   2c598:	bx	lr
   2c59c:	mov	r0, #15
   2c5a0:	add	sp, sp, #28
   2c5a4:	ldrd	r4, [sp]
   2c5a8:	add	sp, sp, #8
   2c5ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5b0:	mov	r0, #6
   2c5b4:	bx	lr
   2c5b8:	mov	r0, #2
   2c5bc:	bx	lr
   2c5c0:	mov	r0, #29
   2c5c4:	b	2c5a0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2c5c8:	mov	r0, #30
   2c5cc:	b	2c5a0 <flatcc_verify_table_as_typed_root@@Base+0xfc>

0002c5d0 <flatcc_verify_struct_as_nested_root@@Base>:
   2c5d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c5d4:	add	ip, r1, #2
   2c5d8:	lsl	ip, ip, #1
   2c5dc:	strd	r6, [sp, #8]
   2c5e0:	str	lr, [sp, #20]
   2c5e4:	ldrh	lr, [r0, #22]
   2c5e8:	uxth	ip, ip
   2c5ec:	str	r8, [sp, #16]
   2c5f0:	sub	sp, sp, #8
   2c5f4:	ldrh	r4, [sp, #36]	; 0x24
   2c5f8:	cmp	lr, ip
   2c5fc:	bls	2c74c <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   2c600:	ldr	r1, [r0, #12]
   2c604:	ldrh	ip, [r1, ip]
   2c608:	cmp	ip, #0
   2c60c:	beq	2c74c <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   2c610:	ldrh	r2, [r0, #20]
   2c614:	add	r1, ip, #4
   2c618:	cmp	r1, r2
   2c61c:	movhi	r0, #13
   2c620:	bhi	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c624:	ldr	r2, [r0, #16]
   2c628:	add	r2, ip, r2
   2c62c:	tst	r2, #3
   2c630:	movne	r0, #12
   2c634:	bne	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c638:	cmp	r2, #0
   2c63c:	ldr	ip, [r0]
   2c640:	beq	2c684 <flatcc_verify_struct_as_nested_root@@Base+0xb4>
   2c644:	ldr	lr, [ip, r2]
   2c648:	add	lr, r2, lr
   2c64c:	cmp	r2, lr
   2c650:	bcs	2c744 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   2c654:	ldr	r1, [r0, #4]
   2c658:	add	r0, lr, #4
   2c65c:	cmp	r1, r0
   2c660:	bcc	2c744 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   2c664:	tst	r0, #3
   2c668:	bne	2c744 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   2c66c:	ldr	lr, [ip, lr]
   2c670:	sub	r1, r1, r0
   2c674:	mul	r0, lr, r4
   2c678:	cmp	r1, r0
   2c67c:	movcc	r0, #26
   2c680:	bcc	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c684:	adds	r1, ip, r2
   2c688:	beq	2c754 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   2c68c:	ldr	r2, [ip, r2]
   2c690:	add	r7, r1, r2
   2c694:	tst	r7, #3
   2c698:	movne	r0, #5
   2c69c:	bne	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c6a0:	ldr	r6, [r1, r2]
   2c6a4:	cmn	r6, #9
   2c6a8:	movhi	r0, #6
   2c6ac:	bhi	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c6b0:	cmp	r6, #7
   2c6b4:	movls	r0, #1
   2c6b8:	bls	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c6bc:	cmp	r3, #0
   2c6c0:	beq	2c6ec <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   2c6c4:	mov	r2, #4
   2c6c8:	mov	r1, r3
   2c6cc:	add	r0, sp, r2
   2c6d0:	mov	r5, r3
   2c6d4:	bl	145a8 <strncpy@plt>
   2c6d8:	ldr	r3, [sp, #4]
   2c6dc:	ldr	r8, [r7, #8]
   2c6e0:	cmp	r3, r8
   2c6e4:	cmpne	r3, #0
   2c6e8:	bne	2c774 <flatcc_verify_struct_as_nested_root@@Base+0x1a4>
   2c6ec:	ldr	r2, [r7, #4]
   2c6f0:	clz	r3, r2
   2c6f4:	lsr	r3, r3, #5
   2c6f8:	cmp	r6, r2
   2c6fc:	orrcc	r3, r3, #1
   2c700:	cmp	r3, #0
   2c704:	bne	2c764 <flatcc_verify_struct_as_nested_root@@Base+0x194>
   2c708:	ldr	r3, [sp, #32]
   2c70c:	adds	r3, r3, r2
   2c710:	bcs	2c79c <flatcc_verify_struct_as_nested_root@@Base+0x1cc>
   2c714:	cmp	r6, r3
   2c718:	bcc	2c76c <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   2c71c:	sub	r4, r4, #1
   2c720:	tst	r4, r2
   2c724:	movne	r0, #11
   2c728:	beq	2c754 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   2c72c:	add	sp, sp, #8
   2c730:	ldrd	r4, [sp]
   2c734:	ldrd	r6, [sp, #8]
   2c738:	ldr	r8, [sp, #16]
   2c73c:	add	sp, sp, #20
   2c740:	pop	{pc}		; (ldr pc, [sp], #4)
   2c744:	mov	r0, #16
   2c748:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c74c:	cmp	r2, #0
   2c750:	bne	2c75c <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   2c754:	mov	r0, #0
   2c758:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c75c:	mov	r0, #4
   2c760:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c764:	mov	r0, #18
   2c768:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c76c:	mov	r0, #9
   2c770:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c774:	mov	r1, r5
   2c778:	add	r0, sp, #4
   2c77c:	mov	r2, #4
   2c780:	bl	145a8 <strncpy@plt>
   2c784:	ldr	r3, [sp, #4]
   2c788:	cmp	r8, r3
   2c78c:	cmpne	r3, #0
   2c790:	beq	2c754 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   2c794:	mov	r0, #2
   2c798:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   2c79c:	mov	r0, #10
   2c7a0:	b	2c72c <flatcc_verify_struct_as_nested_root@@Base+0x15c>

0002c7a4 <flatcc_verify_table_as_nested_root@@Base>:
   2c7a4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2c7a8:	add	ip, r1, #2
   2c7ac:	lsl	ip, ip, #1
   2c7b0:	strd	r6, [sp, #8]
   2c7b4:	str	lr, [sp, #24]
   2c7b8:	ldrh	lr, [r0, #22]
   2c7bc:	uxth	ip, ip
   2c7c0:	strd	r8, [sp, #16]
   2c7c4:	sub	sp, sp, #28
   2c7c8:	ldrh	r4, [sp, #56]	; 0x38
   2c7cc:	cmp	lr, ip
   2c7d0:	bls	2c99c <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   2c7d4:	ldr	r1, [r0, #12]
   2c7d8:	ldrh	ip, [r1, ip]
   2c7dc:	cmp	ip, #0
   2c7e0:	beq	2c99c <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   2c7e4:	ldrh	r2, [r0, #20]
   2c7e8:	add	r1, ip, #4
   2c7ec:	cmp	r1, r2
   2c7f0:	movhi	r0, #13
   2c7f4:	bhi	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c7f8:	ldr	r2, [r0, #16]
   2c7fc:	add	r2, ip, r2
   2c800:	tst	r2, #3
   2c804:	movne	r0, #12
   2c808:	bne	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c80c:	cmp	r2, #0
   2c810:	ldr	ip, [r0]
   2c814:	beq	2c858 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   2c818:	ldr	lr, [ip, r2]
   2c81c:	add	lr, r2, lr
   2c820:	cmp	r2, lr
   2c824:	bcs	2c994 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   2c828:	ldr	r1, [r0, #4]
   2c82c:	add	r5, lr, #4
   2c830:	cmp	r1, r5
   2c834:	bcc	2c994 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   2c838:	tst	r5, #3
   2c83c:	bne	2c994 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   2c840:	ldr	lr, [ip, lr]
   2c844:	sub	r1, r1, r5
   2c848:	mul	r4, lr, r4
   2c84c:	cmp	r1, r4
   2c850:	movcc	r0, #26
   2c854:	bcc	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c858:	adds	r1, ip, r2
   2c85c:	beq	2c9a4 <flatcc_verify_table_as_nested_root@@Base+0x200>
   2c860:	ldr	r2, [ip, r2]
   2c864:	add	r6, r1, r2
   2c868:	add	r7, r6, #4
   2c86c:	tst	r7, #3
   2c870:	movne	r0, #5
   2c874:	bne	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c878:	ldr	r8, [r1, r2]
   2c87c:	cmn	r8, #9
   2c880:	movhi	r0, #6
   2c884:	bhi	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c888:	cmp	r8, #7
   2c88c:	movls	r0, #1
   2c890:	bls	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c894:	cmp	r3, #0
   2c898:	mov	r5, r3
   2c89c:	mov	r4, r0
   2c8a0:	beq	2c8c8 <flatcc_verify_table_as_nested_root@@Base+0x124>
   2c8a4:	mov	r1, r3
   2c8a8:	mov	r2, #4
   2c8ac:	mov	r0, sp
   2c8b0:	bl	145a8 <strncpy@plt>
   2c8b4:	ldr	r3, [sp]
   2c8b8:	ldr	r9, [r6, #8]
   2c8bc:	cmp	r3, r9
   2c8c0:	cmpne	r3, #0
   2c8c4:	bne	2c9c4 <flatcc_verify_table_as_nested_root@@Base+0x220>
   2c8c8:	ldr	r3, [r4, #8]
   2c8cc:	ldr	r2, [r6, #4]
   2c8d0:	sub	r3, r3, #1
   2c8d4:	cmp	r3, #0
   2c8d8:	str	r3, [sp, #8]
   2c8dc:	beq	2c9bc <flatcc_verify_table_as_nested_root@@Base+0x218>
   2c8e0:	cmp	r2, #0
   2c8e4:	beq	2c9ac <flatcc_verify_table_as_nested_root@@Base+0x208>
   2c8e8:	add	r3, r2, #4
   2c8ec:	cmp	r8, r3
   2c8f0:	bcc	2c9ac <flatcc_verify_table_as_nested_root@@Base+0x208>
   2c8f4:	tst	r2, #3
   2c8f8:	bne	2c9ac <flatcc_verify_table_as_nested_root@@Base+0x208>
   2c8fc:	str	r2, [sp, #16]
   2c900:	ldr	r3, [r7, r2]
   2c904:	subs	r3, r2, r3
   2c908:	bmi	2c9ec <flatcc_verify_table_as_nested_root@@Base+0x248>
   2c90c:	tst	r3, #1
   2c910:	bne	2c9ec <flatcc_verify_table_as_nested_root@@Base+0x248>
   2c914:	add	r0, r3, #2
   2c918:	cmp	r8, r0
   2c91c:	movcc	r0, #27
   2c920:	bcc	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c924:	ldrh	r1, [r7, r3]
   2c928:	add	ip, r7, r3
   2c92c:	add	r3, r1, r3
   2c930:	strh	r1, [sp, #22]
   2c934:	cmp	r8, r3
   2c938:	bcc	2c9f4 <flatcc_verify_table_as_nested_root@@Base+0x250>
   2c93c:	tst	r1, #1
   2c940:	bne	2c9f4 <flatcc_verify_table_as_nested_root@@Base+0x250>
   2c944:	cmp	r1, #3
   2c948:	movls	r0, #28
   2c94c:	bls	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c950:	ldrh	r3, [r7, r0]
   2c954:	sub	r2, r8, r2
   2c958:	cmp	r2, r3
   2c95c:	strh	r3, [sp, #20]
   2c960:	movcc	r0, #20
   2c964:	bcc	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c968:	mov	r0, sp
   2c96c:	ldr	r3, [sp, #60]	; 0x3c
   2c970:	stm	sp, {r7, r8}
   2c974:	str	ip, [sp, #12]
   2c978:	blx	r3
   2c97c:	add	sp, sp, #28
   2c980:	ldrd	r4, [sp]
   2c984:	ldrd	r6, [sp, #8]
   2c988:	ldrd	r8, [sp, #16]
   2c98c:	add	sp, sp, #24
   2c990:	pop	{pc}		; (ldr pc, [sp], #4)
   2c994:	mov	r0, #16
   2c998:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c99c:	cmp	r2, #0
   2c9a0:	bne	2c9b4 <flatcc_verify_table_as_nested_root@@Base+0x210>
   2c9a4:	mov	r0, #0
   2c9a8:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c9ac:	mov	r0, #15
   2c9b0:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c9b4:	mov	r0, #4
   2c9b8:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c9bc:	mov	r0, #3
   2c9c0:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c9c4:	mov	r1, r5
   2c9c8:	mov	r0, sp
   2c9cc:	mov	r2, #4
   2c9d0:	bl	145a8 <strncpy@plt>
   2c9d4:	ldr	r3, [sp]
   2c9d8:	cmp	r9, r3
   2c9dc:	cmpne	r3, #0
   2c9e0:	movne	r0, #2
   2c9e4:	beq	2c9a4 <flatcc_verify_table_as_nested_root@@Base+0x200>
   2c9e8:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c9ec:	mov	r0, #29
   2c9f0:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   2c9f4:	mov	r0, #30
   2c9f8:	b	2c97c <flatcc_verify_table_as_nested_root@@Base+0x1d8>

0002c9fc <flatcc_verify_union_field@@Base>:
   2c9fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ca00:	add	r1, r1, #1
   2ca04:	ldr	r4, [r0, #12]
   2ca08:	lsl	r1, r1, #1
   2ca0c:	strd	r6, [sp, #8]
   2ca10:	str	lr, [sp, #16]
   2ca14:	uxth	r1, r1
   2ca18:	sub	sp, sp, #28
   2ca1c:	ldrh	lr, [r0, #22]
   2ca20:	cmp	r1, lr
   2ca24:	bcs	2cad0 <flatcc_verify_union_field@@Base+0xd4>
   2ca28:	ldrh	ip, [r4, r1]
   2ca2c:	cmp	ip, #0
   2ca30:	beq	2cad0 <flatcc_verify_union_field@@Base+0xd4>
   2ca34:	ldrh	r5, [r0, #20]
   2ca38:	add	r6, ip, #1
   2ca3c:	cmp	r6, r5
   2ca40:	bhi	2cb20 <flatcc_verify_union_field@@Base+0x124>
   2ca44:	ldr	r6, [r0]
   2ca48:	add	r1, r1, #2
   2ca4c:	uxth	r1, r1
   2ca50:	ldr	r7, [r0, #16]
   2ca54:	cmp	lr, r1
   2ca58:	add	lr, ip, r7
   2ca5c:	ldrb	ip, [r6, lr]
   2ca60:	bls	2cb28 <flatcc_verify_union_field@@Base+0x12c>
   2ca64:	cmp	ip, #0
   2ca68:	ldrh	r1, [r4, r1]
   2ca6c:	beq	2cb10 <flatcc_verify_union_field@@Base+0x114>
   2ca70:	cmp	r1, #0
   2ca74:	beq	2cb38 <flatcc_verify_union_field@@Base+0x13c>
   2ca78:	add	r2, r1, #4
   2ca7c:	cmp	r5, r2
   2ca80:	bcc	2cb20 <flatcc_verify_union_field@@Base+0x124>
   2ca84:	add	r1, r1, r7
   2ca88:	tst	r1, #3
   2ca8c:	movne	r0, #12
   2ca90:	bne	2cafc <flatcc_verify_union_field@@Base+0x100>
   2ca94:	cmp	r1, #0
   2ca98:	beq	2cb48 <flatcc_verify_union_field@@Base+0x14c>
   2ca9c:	mov	r2, r0
   2caa0:	str	r1, [sp, #16]
   2caa4:	mov	r0, sp
   2caa8:	ldr	ip, [r2, #4]
   2caac:	ldr	r2, [r2, #8]
   2cab0:	stm	sp, {r6, ip}
   2cab4:	str	r2, [sp, #8]
   2cab8:	ldr	r2, [r6, r1]
   2cabc:	str	r2, [sp, #20]
   2cac0:	ldrb	r2, [r6, lr]
   2cac4:	strb	r2, [sp, #12]
   2cac8:	blx	r3
   2cacc:	b	2cafc <flatcc_verify_union_field@@Base+0x100>
   2cad0:	add	r1, r1, #2
   2cad4:	uxth	r1, r1
   2cad8:	cmp	lr, r1
   2cadc:	bls	2caf0 <flatcc_verify_union_field@@Base+0xf4>
   2cae0:	ldrh	r3, [r4, r1]
   2cae4:	cmp	r3, #0
   2cae8:	movne	r0, #23
   2caec:	bne	2cafc <flatcc_verify_union_field@@Base+0x100>
   2caf0:	cmp	r2, #0
   2caf4:	moveq	r0, #0
   2caf8:	movne	r0, #21
   2cafc:	add	sp, sp, #28
   2cb00:	ldrd	r4, [sp]
   2cb04:	ldrd	r6, [sp, #8]
   2cb08:	add	sp, sp, #16
   2cb0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb10:	cmp	r1, #0
   2cb14:	movne	r0, #24
   2cb18:	moveq	r0, #0
   2cb1c:	b	2cafc <flatcc_verify_union_field@@Base+0x100>
   2cb20:	mov	r0, #13
   2cb24:	b	2cafc <flatcc_verify_union_field@@Base+0x100>
   2cb28:	cmp	ip, #0
   2cb2c:	bne	2cb38 <flatcc_verify_union_field@@Base+0x13c>
   2cb30:	mov	r0, ip
   2cb34:	b	2cafc <flatcc_verify_union_field@@Base+0x100>
   2cb38:	cmp	r2, #0
   2cb3c:	moveq	r0, #0
   2cb40:	movne	r0, #4
   2cb44:	b	2cafc <flatcc_verify_union_field@@Base+0x100>
   2cb48:	mov	r0, r1
   2cb4c:	b	2cafc <flatcc_verify_union_field@@Base+0x100>

0002cb50 <flatcc_verify_union_vector_field@@Base>:
   2cb50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cb54:	add	r1, r1, #1
   2cb58:	ldrh	r4, [r0, #22]
   2cb5c:	lsl	r1, r1, #1
   2cb60:	uxth	r1, r1
   2cb64:	ldr	r5, [r0, #12]
   2cb68:	strd	r6, [sp, #8]
   2cb6c:	strd	r8, [sp, #16]
   2cb70:	cmp	r1, r4
   2cb74:	strd	sl, [sp, #24]
   2cb78:	str	lr, [sp, #32]
   2cb7c:	sub	sp, sp, #28
   2cb80:	bcs	2cc88 <flatcc_verify_union_vector_field@@Base+0x138>
   2cb84:	ldrh	ip, [r5, r1]
   2cb88:	cmp	ip, #0
   2cb8c:	beq	2cc88 <flatcc_verify_union_vector_field@@Base+0x138>
   2cb90:	ldrh	r7, [r0, #20]
   2cb94:	add	lr, ip, #4
   2cb98:	cmp	lr, r7
   2cb9c:	bhi	2ccc4 <flatcc_verify_union_vector_field@@Base+0x174>
   2cba0:	ldr	r8, [r0, #16]
   2cba4:	add	ip, ip, r8
   2cba8:	tst	ip, #3
   2cbac:	bne	2ccf0 <flatcc_verify_union_vector_field@@Base+0x1a0>
   2cbb0:	ldr	r6, [r0]
   2cbb4:	cmp	ip, #0
   2cbb8:	add	lr, r6, ip
   2cbbc:	beq	2cc00 <flatcc_verify_union_vector_field@@Base+0xb0>
   2cbc0:	ldr	r9, [r6, ip]
   2cbc4:	add	sl, ip, r9
   2cbc8:	cmp	ip, sl
   2cbcc:	bcs	2cc68 <flatcc_verify_union_vector_field@@Base+0x118>
   2cbd0:	ldr	ip, [r0, #4]
   2cbd4:	add	fp, sl, #4
   2cbd8:	cmp	ip, fp
   2cbdc:	bcc	2cc68 <flatcc_verify_union_vector_field@@Base+0x118>
   2cbe0:	tst	fp, #3
   2cbe4:	bne	2cc68 <flatcc_verify_union_vector_field@@Base+0x118>
   2cbe8:	ldr	sl, [r6, sl]
   2cbec:	sub	ip, ip, fp
   2cbf0:	cmp	sl, ip
   2cbf4:	bls	2cc0c <flatcc_verify_union_vector_field@@Base+0xbc>
   2cbf8:	mov	r0, #26
   2cbfc:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cc00:	cmp	lr, #0
   2cc04:	beq	2cce8 <flatcc_verify_union_vector_field@@Base+0x198>
   2cc08:	ldr	r9, [r6]
   2cc0c:	add	r1, r1, #2
   2cc10:	uxth	r1, r1
   2cc14:	cmp	r4, r1
   2cc18:	bls	2cca4 <flatcc_verify_union_vector_field@@Base+0x154>
   2cc1c:	ldrh	r1, [r5, r1]
   2cc20:	cmp	r1, #0
   2cc24:	beq	2cca4 <flatcc_verify_union_vector_field@@Base+0x154>
   2cc28:	add	r2, r1, #4
   2cc2c:	cmp	r2, r7
   2cc30:	bhi	2ccc4 <flatcc_verify_union_vector_field@@Base+0x174>
   2cc34:	add	r8, r1, r8
   2cc38:	tst	r8, #3
   2cc3c:	bne	2ccf0 <flatcc_verify_union_vector_field@@Base+0x1a0>
   2cc40:	cmp	r8, #0
   2cc44:	beq	2cce8 <flatcc_verify_union_vector_field@@Base+0x198>
   2cc48:	ldr	r1, [r0, #8]
   2cc4c:	ldr	r2, [r6, r8]
   2cc50:	cmp	r1, #0
   2cc54:	movle	r0, #3
   2cc58:	ble	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cc5c:	add	r2, r8, r2
   2cc60:	cmp	r8, r2
   2cc64:	bcc	2ccf8 <flatcc_verify_union_vector_field@@Base+0x1a8>
   2cc68:	mov	r0, #16
   2cc6c:	add	sp, sp, #28
   2cc70:	ldrd	r4, [sp]
   2cc74:	ldrd	r6, [sp, #8]
   2cc78:	ldrd	r8, [sp, #16]
   2cc7c:	ldrd	sl, [sp, #24]
   2cc80:	add	sp, sp, #32
   2cc84:	pop	{pc}		; (ldr pc, [sp], #4)
   2cc88:	add	r1, r1, #2
   2cc8c:	uxth	r1, r1
   2cc90:	cmp	r4, r1
   2cc94:	bls	2ccb4 <flatcc_verify_union_vector_field@@Base+0x164>
   2cc98:	ldrh	r3, [r5, r1]
   2cc9c:	cmp	r3, #0
   2cca0:	beq	2ccb4 <flatcc_verify_union_vector_field@@Base+0x164>
   2cca4:	cmp	r2, #0
   2cca8:	moveq	r0, #0
   2ccac:	movne	r0, #4
   2ccb0:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2ccb4:	cmp	r2, #0
   2ccb8:	moveq	r0, #0
   2ccbc:	movne	r0, #22
   2ccc0:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2ccc4:	mov	r0, #13
   2ccc8:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cccc:	ldr	r3, [r6, r2]
   2ccd0:	cmn	r3, #-1073741823	; 0xc0000001
   2ccd4:	movhi	r0, #25
   2ccd8:	bhi	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2ccdc:	sub	r0, r4, r0
   2cce0:	cmp	r0, r3, lsl #2
   2cce4:	bcc	2cbf8 <flatcc_verify_union_vector_field@@Base+0xa8>
   2cce8:	mov	r0, #0
   2ccec:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2ccf0:	mov	r0, #12
   2ccf4:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2ccf8:	ldr	r4, [r0, #4]
   2ccfc:	add	r0, r2, #4
   2cd00:	cmp	r4, r0
   2cd04:	bcc	2cc68 <flatcc_verify_union_vector_field@@Base+0x118>
   2cd08:	tst	r0, #3
   2cd0c:	bne	2cc68 <flatcc_verify_union_vector_field@@Base+0x118>
   2cd10:	ldr	ip, [r6, r2]
   2cd14:	add	r5, r6, r2
   2cd18:	cmn	ip, #-1073741823	; 0xc0000001
   2cd1c:	bhi	2cccc <flatcc_verify_union_vector_field@@Base+0x17c>
   2cd20:	sub	r7, r4, r0
   2cd24:	cmp	r7, ip, lsl #2
   2cd28:	bcc	2cccc <flatcc_verify_union_vector_field@@Base+0x17c>
   2cd2c:	ldr	r2, [lr, r9]
   2cd30:	add	r0, lr, r9
   2cd34:	cmp	r2, ip
   2cd38:	bne	2cdc4 <flatcc_verify_union_vector_field@@Base+0x274>
   2cd3c:	sub	r1, r1, #1
   2cd40:	cmp	ip, #0
   2cd44:	str	r6, [sp]
   2cd48:	str	r4, [sp, #4]
   2cd4c:	str	r1, [sp, #8]
   2cd50:	beq	2cce8 <flatcc_verify_union_vector_field@@Base+0x198>
   2cd54:	add	ip, ip, #4
   2cd58:	mov	r7, r3
   2cd5c:	add	r8, ip, r0
   2cd60:	add	r4, r0, #4
   2cd64:	rsb	r6, r6, #4
   2cd68:	b	2cd7c <flatcc_verify_union_vector_field@@Base+0x22c>
   2cd6c:	cmp	r2, #0
   2cd70:	bne	2cdcc <flatcc_verify_union_vector_field@@Base+0x27c>
   2cd74:	cmp	r8, r4
   2cd78:	beq	2cce8 <flatcc_verify_union_vector_field@@Base+0x198>
   2cd7c:	add	r1, r6, r5
   2cd80:	ldr	r3, [r5, #4]!
   2cd84:	mov	r0, sp
   2cd88:	add	r4, r4, #1
   2cd8c:	ldrb	r2, [r4, #-1]
   2cd90:	cmp	r3, #0
   2cd94:	beq	2cd6c <flatcc_verify_union_vector_field@@Base+0x21c>
   2cd98:	cmp	r2, #0
   2cd9c:	beq	2cdd4 <flatcc_verify_union_vector_field@@Base+0x284>
   2cda0:	strb	r2, [sp, #12]
   2cda4:	str	r1, [sp, #16]
   2cda8:	str	r3, [sp, #20]
   2cdac:	blx	r7
   2cdb0:	cmp	r0, #0
   2cdb4:	beq	2cd74 <flatcc_verify_union_vector_field@@Base+0x224>
   2cdb8:	mov	r0, sp
   2cdbc:	blx	r7
   2cdc0:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cdc4:	mov	r0, #34	; 0x22
   2cdc8:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cdcc:	mov	r0, #32
   2cdd0:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cdd4:	mov	r0, #33	; 0x21
   2cdd8:	b	2cc6c <flatcc_verify_union_vector_field@@Base+0x11c>
   2cddc:	andeq	r0, r0, r0
   2cde0:	movw	r3, #29288	; 0x7268
   2cde4:	movt	r3, #4
   2cde8:	str	r4, [sp, #-8]!
   2cdec:	movw	r1, #31488	; 0x7b00
   2cdf0:	movt	r1, #4
   2cdf4:	str	lr, [sp, #4]
   2cdf8:	movw	r0, #31576	; 0x7b58
   2cdfc:	movt	r0, #4
   2ce00:	mov	r2, #260	; 0x104
   2ce04:	bl	145f0 <__assert_fail@plt>
   2ce08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ce0c:	mov	ip, #0
   2ce10:	cmp	r1, r2
   2ce14:	strd	r6, [sp, #8]
   2ce18:	moveq	r0, r1
   2ce1c:	strd	r8, [sp, #16]
   2ce20:	strd	sl, [sp, #24]
   2ce24:	str	lr, [sp, #32]
   2ce28:	sub	sp, sp, #36	; 0x24
   2ce2c:	ldr	r7, [sp, #72]	; 0x48
   2ce30:	strb	ip, [r7]
   2ce34:	beq	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2ce38:	mov	fp, r3
   2ce3c:	ldrb	r3, [r1]
   2ce40:	mov	r8, r0
   2ce44:	mov	r5, r2
   2ce48:	cmp	r3, #34	; 0x22
   2ce4c:	beq	2cf88 <flatcc_verify_union_vector_field@@Base+0x438>
   2ce50:	cmp	r3, #46	; 0x2e
   2ce54:	movne	r3, #1
   2ce58:	movne	r0, r1
   2ce5c:	strne	r3, [r8, #12]
   2ce60:	beq	2cf40 <flatcc_verify_union_vector_field@@Base+0x3f0>
   2ce64:	add	sl, sp, #20
   2ce68:	add	r9, sp, #24
   2ce6c:	mov	r4, fp
   2ce70:	mov	r6, r0
   2ce74:	b	2ce90 <flatcc_verify_union_vector_field@@Base+0x340>
   2ce78:	cmp	r6, r0
   2ce7c:	mov	r6, r0
   2ce80:	bne	2ced0 <flatcc_verify_union_vector_field@@Base+0x380>
   2ce84:	ldr	r3, [r4, #4]!
   2ce88:	cmp	r3, #0
   2ce8c:	beq	2d0e8 <flatcc_verify_union_vector_field@@Base+0x598>
   2ce90:	mov	r1, r0
   2ce94:	add	r3, sp, #16
   2ce98:	stm	sp, {r9, sl}
   2ce9c:	mov	r2, r5
   2cea0:	mov	r0, r8
   2cea4:	ldr	ip, [r4]
   2cea8:	blx	ip
   2ceac:	cmp	r5, r0
   2ceb0:	bne	2ce78 <flatcc_verify_union_vector_field@@Base+0x328>
   2ceb4:	add	sp, sp, #36	; 0x24
   2ceb8:	ldrd	r4, [sp]
   2cebc:	ldrd	r6, [sp, #8]
   2cec0:	ldrd	r8, [sp, #16]
   2cec4:	ldrd	sl, [sp, #24]
   2cec8:	add	sp, sp, #32
   2cecc:	pop	{pc}		; (ldr pc, [sp], #4)
   2ced0:	ldr	r3, [sp, #16]
   2ced4:	cmp	r3, #0
   2ced8:	bne	2cf10 <flatcc_verify_union_vector_field@@Base+0x3c0>
   2cedc:	ldrd	r2, [sp, #24]
   2cee0:	cmp	r3, #0
   2cee4:	strd	r2, [sp, #8]
   2cee8:	cmpeq	r2, #255	; 0xff
   2ceec:	bhi	2cf70 <flatcc_verify_union_vector_field@@Base+0x420>
   2cef0:	ldrb	r3, [r7]
   2cef4:	ldr	r2, [sp, #8]
   2cef8:	ldr	r1, [sp, #20]
   2cefc:	add	r3, r3, r2
   2cf00:	cmp	r1, #0
   2cf04:	strb	r3, [r7]
   2cf08:	bne	2ce6c <flatcc_verify_union_vector_field@@Base+0x31c>
   2cf0c:	b	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2cf10:	ldr	r3, [r8, #24]
   2cf14:	cmp	r3, #0
   2cf18:	bne	2cf68 <flatcc_verify_union_vector_field@@Base+0x418>
   2cf1c:	ldr	r3, [r8, #4]
   2cf20:	mov	r2, #8
   2cf24:	sub	r3, r0, r3
   2cf28:	str	r2, [r8, #24]
   2cf2c:	add	r3, r3, #1
   2cf30:	str	r3, [r8, #20]
   2cf34:	str	r0, [r8, #36]	; 0x24
   2cf38:	mov	r0, r5
   2cf3c:	b	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2cf40:	ldr	r3, [r8, #24]
   2cf44:	cmp	r3, #0
   2cf48:	bne	2cf68 <flatcc_verify_union_vector_field@@Base+0x418>
   2cf4c:	ldr	r3, [r8, #4]
   2cf50:	mov	r2, #5
   2cf54:	str	r1, [r8, #36]	; 0x24
   2cf58:	str	r2, [r8, #24]
   2cf5c:	sub	r1, r1, r3
   2cf60:	add	r3, r1, #1
   2cf64:	str	r3, [r8, #20]
   2cf68:	mov	r0, r5
   2cf6c:	b	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2cf70:	ldr	r3, [r8, #24]
   2cf74:	cmp	r3, #0
   2cf78:	bne	2cf68 <flatcc_verify_union_vector_field@@Base+0x418>
   2cf7c:	mov	r2, #7
   2cf80:	ldr	r3, [r8, #4]
   2cf84:	b	2cf24 <flatcc_verify_union_vector_field@@Base+0x3d4>
   2cf88:	add	r0, r1, #1
   2cf8c:	str	ip, [r8, #12]
   2cf90:	sub	r3, r2, r0
   2cf94:	cmp	r3, #1
   2cf98:	ble	2cfc8 <flatcc_verify_union_vector_field@@Base+0x478>
   2cf9c:	ldrb	r3, [r1, #1]
   2cfa0:	cmp	r3, #32
   2cfa4:	bls	2cfb4 <flatcc_verify_union_vector_field@@Base+0x464>
   2cfa8:	cmp	r5, r0
   2cfac:	bne	2ce64 <flatcc_verify_union_vector_field@@Base+0x314>
   2cfb0:	b	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2cfb4:	bne	2cfc8 <flatcc_verify_union_vector_field@@Base+0x478>
   2cfb8:	ldrb	r3, [r1, #2]
   2cfbc:	cmp	r3, #32
   2cfc0:	addhi	r0, r1, #2
   2cfc4:	bhi	2cfa8 <flatcc_verify_union_vector_field@@Base+0x458>
   2cfc8:	cmp	r5, r0
   2cfcc:	beq	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2cfd0:	ldrb	r2, [r0]
   2cfd4:	cmp	r2, #32
   2cfd8:	bne	2d000 <flatcc_verify_union_vector_field@@Base+0x4b0>
   2cfdc:	add	r3, r0, #1
   2cfe0:	b	2cff0 <flatcc_verify_union_vector_field@@Base+0x4a0>
   2cfe4:	ldrb	r2, [r3], #1
   2cfe8:	cmp	r2, #32
   2cfec:	bne	2d000 <flatcc_verify_union_vector_field@@Base+0x4b0>
   2cff0:	cmp	r5, r3
   2cff4:	mov	r0, r3
   2cff8:	bne	2cfe4 <flatcc_verify_union_vector_field@@Base+0x494>
   2cffc:	b	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2d000:	cmp	r2, #32
   2d004:	bhi	2ce64 <flatcc_verify_union_vector_field@@Base+0x314>
   2d008:	sub	r2, r2, #9
   2d00c:	cmp	r2, #23
   2d010:	ldrls	pc, [pc, r2, lsl #2]
   2d014:	b	2d0d0 <flatcc_verify_union_vector_field@@Base+0x580>
   2d018:	andeq	sp, r2, r8, asr #1
   2d01c:	andeq	sp, r2, r0, asr #1
   2d020:	ldrdeq	sp, [r2], -r0
   2d024:	ldrdeq	sp, [r2], -r0
   2d028:	andeq	sp, r2, r8, ror r0
   2d02c:	ldrdeq	sp, [r2], -r0
   2d030:	ldrdeq	sp, [r2], -r0
   2d034:	ldrdeq	sp, [r2], -r0
   2d038:	ldrdeq	sp, [r2], -r0
   2d03c:	ldrdeq	sp, [r2], -r0
   2d040:	ldrdeq	sp, [r2], -r0
   2d044:	ldrdeq	sp, [r2], -r0
   2d048:	ldrdeq	sp, [r2], -r0
   2d04c:	ldrdeq	sp, [r2], -r0
   2d050:	ldrdeq	sp, [r2], -r0
   2d054:	ldrdeq	sp, [r2], -r0
   2d058:	ldrdeq	sp, [r2], -r0
   2d05c:	ldrdeq	sp, [r2], -r0
   2d060:	ldrdeq	sp, [r2], -r0
   2d064:	ldrdeq	sp, [r2], -r0
   2d068:	ldrdeq	sp, [r2], -r0
   2d06c:	ldrdeq	sp, [r2], -r0
   2d070:	ldrdeq	sp, [r2], -r0
   2d074:	andeq	ip, r2, r8, asr #31
   2d078:	sub	r3, r5, r0
   2d07c:	add	r2, r0, #1
   2d080:	cmp	r3, #1
   2d084:	ble	2d094 <flatcc_verify_union_vector_field@@Base+0x544>
   2d088:	ldrb	r3, [r0, #1]
   2d08c:	cmp	r3, #10
   2d090:	addeq	r2, r0, #2
   2d094:	mov	r0, r2
   2d098:	ldr	r3, [r8, #16]
   2d09c:	str	r0, [r8, #4]
   2d0a0:	add	r3, r3, #1
   2d0a4:	str	r3, [r8, #16]
   2d0a8:	cmp	r5, r0
   2d0ac:	beq	2ceb4 <flatcc_verify_union_vector_field@@Base+0x364>
   2d0b0:	ldrb	r2, [r0]
   2d0b4:	cmp	r2, #32
   2d0b8:	bls	2d008 <flatcc_verify_union_vector_field@@Base+0x4b8>
   2d0bc:	b	2ce64 <flatcc_verify_union_vector_field@@Base+0x314>
   2d0c0:	add	r0, r0, #1
   2d0c4:	b	2d098 <flatcc_verify_union_vector_field@@Base+0x548>
   2d0c8:	add	r0, r0, #1
   2d0cc:	b	2d0a8 <flatcc_verify_union_vector_field@@Base+0x558>
   2d0d0:	ldr	r3, [r8, #24]
   2d0d4:	cmp	r3, #0
   2d0d8:	bne	2cf68 <flatcc_verify_union_vector_field@@Base+0x418>
   2d0dc:	mov	r2, #5
   2d0e0:	ldr	r3, [r8, #4]
   2d0e4:	b	2cf24 <flatcc_verify_union_vector_field@@Base+0x3d4>
   2d0e8:	ldr	r3, [r8, #24]
   2d0ec:	cmp	r3, #0
   2d0f0:	bne	2cf68 <flatcc_verify_union_vector_field@@Base+0x418>
   2d0f4:	mov	r2, #23
   2d0f8:	ldr	r3, [r8, #4]
   2d0fc:	b	2cf24 <flatcc_verify_union_vector_field@@Base+0x3d4>

0002d100 <grisu3_diy_fp_encode_double@@Base>:
   2d100:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d104:	sub	r2, r2, r3
   2d108:	strd	r6, [sp, #8]
   2d10c:	strd	r8, [sp, #16]
   2d110:	strd	sl, [sp, #24]
   2d114:	mov	sl, r0
   2d118:	mov	fp, r1
   2d11c:	str	lr, [sp, #32]
   2d120:	sub	sp, sp, #60	; 0x3c
   2d124:	ldr	ip, [sp, #96]	; 0x60
   2d128:	cmp	ip, #0
   2d12c:	movne	ip, #4
   2d130:	orrs	r1, sl, fp
   2d134:	beq	2d5c8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2d138:	mov	lr, #0
   2d13c:	mov	r4, lr
   2d140:	mov	r0, lr
   2d144:	movt	r4, #65472	; 0xffc0
   2d148:	and	r1, fp, r4
   2d14c:	orrs	r1, r0, r1
   2d150:	movne	r1, lr
   2d154:	bne	2d190 <grisu3_diy_fp_encode_double@@Base+0x90>
   2d158:	mvn	r5, #9
   2d15c:	str	r4, [sp, #16]
   2d160:	lsl	r0, fp, #10
   2d164:	mov	r6, lr
   2d168:	mov	r1, r5
   2d16c:	lsl	r4, sl, #10
   2d170:	sub	r5, r5, #10
   2d174:	orr	r0, r0, sl, lsr #22
   2d178:	mov	sl, r4
   2d17c:	mov	fp, r0
   2d180:	ldr	r0, [sp, #16]
   2d184:	and	r7, fp, r0
   2d188:	orrs	r0, r6, r7
   2d18c:	beq	2d160 <grisu3_diy_fp_encode_double@@Base+0x60>
   2d190:	cmp	sl, #0
   2d194:	sbcs	r0, fp, #0
   2d198:	blt	2d1bc <grisu3_diy_fp_encode_double@@Base+0xbc>
   2d19c:	sub	r0, r1, #1
   2d1a0:	adds	sl, sl, sl
   2d1a4:	mov	r1, r0
   2d1a8:	adc	fp, fp, fp
   2d1ac:	cmp	sl, #0
   2d1b0:	sbcs	lr, fp, #0
   2d1b4:	sub	r0, r0, #1
   2d1b8:	bge	2d1a0 <grisu3_diy_fp_encode_double@@Base+0xa0>
   2d1bc:	rsb	r0, r1, #0
   2d1c0:	cmn	r2, #348	; 0x15c
   2d1c4:	lsl	r0, ip, r0
   2d1c8:	str	r0, [sp, #20]
   2d1cc:	blt	2d620 <grisu3_diy_fp_encode_double@@Base+0x520>
   2d1d0:	cmp	r2, #348	; 0x15c
   2d1d4:	bge	2d5e8 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2d1d8:	add	r0, r2, #348	; 0x15c
   2d1dc:	movw	ip, #29288	; 0x7268
   2d1e0:	movt	ip, #4
   2d1e4:	asr	r0, r0, #3
   2d1e8:	add	r0, ip, r0, lsl #4
   2d1ec:	ldrsh	r5, [r0, #66]	; 0x42
   2d1f0:	ldrsh	lr, [r0, #64]	; 0x40
   2d1f4:	ldr	r7, [r0, #56]	; 0x38
   2d1f8:	cmp	r2, r5
   2d1fc:	ldr	r0, [r0, #60]	; 0x3c
   2d200:	str	r0, [sp, #16]
   2d204:	blt	2d604 <grisu3_diy_fp_encode_double@@Base+0x504>
   2d208:	add	r0, r5, #7
   2d20c:	cmp	r2, r0
   2d210:	bgt	2d5cc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2d214:	cmp	r2, r5
   2d218:	beq	2d2d0 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   2d21c:	sub	r5, r2, r5
   2d220:	sub	r5, r5, #1
   2d224:	cmp	r5, #6
   2d228:	bhi	2d63c <grisu3_diy_fp_encode_double@@Base+0x53c>
   2d22c:	movw	r2, #37696	; 0x9340
   2d230:	movt	r2, #5
   2d234:	add	r4, r2, r5, lsl #4
   2d238:	ldr	r2, [r2, r5, lsl #4]
   2d23c:	add	r3, r3, #1
   2d240:	add	r5, r3, r5
   2d244:	mov	ip, #0
   2d248:	ldr	r6, [r4, #4]
   2d24c:	str	r6, [sp, #32]
   2d250:	str	r5, [sp, #36]	; 0x24
   2d254:	ldr	r6, [r4, #8]
   2d258:	umull	r4, r5, fp, r2
   2d25c:	umull	r2, r3, sl, r2
   2d260:	ldr	r0, [sp, #32]
   2d264:	strd	r4, [sp, #40]	; 0x28
   2d268:	mov	r2, r3
   2d26c:	ldr	r3, [sp, #32]
   2d270:	add	r1, r1, r6
   2d274:	add	r1, r1, #64	; 0x40
   2d278:	umull	r4, r5, sl, r3
   2d27c:	ldr	r3, [sp, #40]	; 0x28
   2d280:	strd	r4, [sp]
   2d284:	ldr	r5, [sp, #36]	; 0x24
   2d288:	adds	r4, r2, r3
   2d28c:	ldrd	r2, [sp]
   2d290:	adc	r6, ip, ip
   2d294:	adds	r4, r4, #-2147483648	; 0x80000000
   2d298:	adc	r6, r6, ip
   2d29c:	adds	r4, r4, r2
   2d2a0:	ldr	r2, [sp, #44]	; 0x2c
   2d2a4:	adc	r6, r6, ip
   2d2a8:	adds	r2, r2, r3
   2d2ac:	str	r2, [sp, #24]
   2d2b0:	adc	r2, ip, ip
   2d2b4:	str	r2, [sp, #28]
   2d2b8:	ldrd	r2, [sp, #24]
   2d2bc:	umlal	r2, r3, r0, fp
   2d2c0:	adds	sl, r6, r2
   2d2c4:	adc	fp, ip, r3
   2d2c8:	cmp	r5, #19
   2d2cc:	bgt	2d588 <grisu3_diy_fp_encode_double@@Base+0x488>
   2d2d0:	umull	r2, r3, fp, r7
   2d2d4:	add	lr, r1, lr
   2d2d8:	mov	ip, #0
   2d2dc:	umull	r0, r1, sl, r7
   2d2e0:	add	r7, lr, #64	; 0x40
   2d2e4:	strd	r2, [sp]
   2d2e8:	strd	r0, [sp, #24]
   2d2ec:	ldr	r3, [sp, #16]
   2d2f0:	ldr	r2, [sp]
   2d2f4:	ldr	r1, [sp, #28]
   2d2f8:	umull	r4, r5, sl, r3
   2d2fc:	ldr	r3, [sp, #4]
   2d300:	adds	r2, r1, r2
   2d304:	mov	r1, r4
   2d308:	adc	r0, ip, ip
   2d30c:	adds	r2, r2, #-2147483648	; 0x80000000
   2d310:	adc	r0, r0, ip
   2d314:	adds	r2, r2, r1
   2d318:	ldr	r2, [sp, #16]
   2d31c:	adc	r0, r0, ip
   2d320:	adds	r1, r3, r5
   2d324:	ldr	r3, [sp, #20]
   2d328:	str	r1, [sp, #8]
   2d32c:	adc	r1, ip, ip
   2d330:	str	r1, [sp, #12]
   2d334:	ldrd	r4, [sp, #8]
   2d338:	umlal	r4, r5, r2, fp
   2d33c:	adds	r8, r0, r4
   2d340:	adc	r9, ip, r5
   2d344:	cmp	r3, ip
   2d348:	movne	r2, #9
   2d34c:	moveq	r2, #8
   2d350:	orrs	r1, r8, r9
   2d354:	add	r2, r3, r2
   2d358:	beq	2d5c8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2d35c:	mov	r3, ip
   2d360:	mov	r4, ip
   2d364:	movt	r3, #65472	; 0xffc0
   2d368:	and	r5, r9, r3
   2d36c:	orrs	r1, r4, r5
   2d370:	bne	2d5b0 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2d374:	add	r1, lr, #54	; 0x36
   2d378:	mov	r0, r3
   2d37c:	lsl	lr, r9, #10
   2d380:	mov	r4, ip
   2d384:	mov	r3, r1
   2d388:	lsl	r6, r8, #10
   2d38c:	sub	r1, r1, #10
   2d390:	orr	lr, lr, r8, lsr #22
   2d394:	mov	r8, r6
   2d398:	and	r5, lr, r0
   2d39c:	mov	r9, lr
   2d3a0:	orrs	lr, r4, r5
   2d3a4:	beq	2d37c <grisu3_diy_fp_encode_double@@Base+0x27c>
   2d3a8:	cmp	r8, #0
   2d3ac:	sbcs	r1, r9, #0
   2d3b0:	blt	2d3d4 <grisu3_diy_fp_encode_double@@Base+0x2d4>
   2d3b4:	sub	r1, r3, #1
   2d3b8:	adds	r8, r8, r8
   2d3bc:	mov	r3, r1
   2d3c0:	adc	r9, r9, r9
   2d3c4:	cmp	r8, #0
   2d3c8:	sbcs	r0, r9, #0
   2d3cc:	sub	r1, r1, #1
   2d3d0:	bge	2d3b8 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   2d3d4:	movw	r1, #64526	; 0xfc0e
   2d3d8:	movt	r1, #65535	; 0xffff
   2d3dc:	add	r0, r3, #64	; 0x40
   2d3e0:	sub	r7, r7, r3
   2d3e4:	cmp	r0, r1
   2d3e8:	lsl	r2, r2, r7
   2d3ec:	blt	2d52c <grisu3_diy_fp_encode_double@@Base+0x42c>
   2d3f0:	add	ip, r2, #4
   2d3f4:	mov	r1, #4
   2d3f8:	cmp	ip, #0
   2d3fc:	mov	r0, #0
   2d400:	bgt	2d44c <grisu3_diy_fp_encode_double@@Base+0x34c>
   2d404:	adds	r8, r8, #1
   2d408:	mov	r4, #0
   2d40c:	adc	r9, r9, #0
   2d410:	and	r5, r9, #2097152	; 0x200000
   2d414:	orrs	lr, r4, r5
   2d418:	beq	2d434 <grisu3_diy_fp_encode_double@@Base+0x334>
   2d41c:	lsr	lr, r8, #1
   2d420:	add	r3, r3, #1
   2d424:	lsr	r4, r9, #1
   2d428:	orr	lr, lr, r9, lsl #31
   2d42c:	mov	r9, r4
   2d430:	mov	r8, lr
   2d434:	movw	r5, #65535	; 0xffff
   2d438:	movt	r5, #31
   2d43c:	mvn	r4, #0
   2d440:	cmp	r9, r5
   2d444:	cmpeq	r8, r4
   2d448:	bls	2d484 <grisu3_diy_fp_encode_double@@Base+0x384>
   2d44c:	movw	r5, #65535	; 0xffff
   2d450:	movt	r5, #31
   2d454:	add	r6, r3, #1
   2d458:	mvn	r4, #0
   2d45c:	lsr	lr, r8, #1
   2d460:	mov	r3, r6
   2d464:	add	r6, r6, #1
   2d468:	lsr	r7, r9, #1
   2d46c:	orr	lr, lr, r9, lsl #31
   2d470:	cmp	r7, r5
   2d474:	mov	r9, r7
   2d478:	cmpeq	lr, r4
   2d47c:	mov	r8, lr
   2d480:	bhi	2d45c <grisu3_diy_fp_encode_double@@Base+0x35c>
   2d484:	movw	lr, #64462	; 0xfbce
   2d488:	movt	lr, #65535	; 0xffff
   2d48c:	cmp	r3, lr
   2d490:	mov	r6, #0
   2d494:	movlt	r7, #0
   2d498:	blt	2d4f4 <grisu3_diy_fp_encode_double@@Base+0x3f4>
   2d49c:	mov	r4, r6
   2d4a0:	and	r5, r9, #1048576	; 0x100000
   2d4a4:	beq	2d4dc <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2d4a8:	orrs	r7, r4, r5
   2d4ac:	beq	2d4c0 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   2d4b0:	b	2d5b8 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   2d4b4:	orrs	sl, r4, r5
   2d4b8:	bne	2d598 <grisu3_diy_fp_encode_double@@Base+0x498>
   2d4bc:	mov	r3, r7
   2d4c0:	adds	r8, r8, r8
   2d4c4:	sub	r7, r3, #1
   2d4c8:	adc	r9, r9, r9
   2d4cc:	cmp	r7, lr
   2d4d0:	mov	r4, r6
   2d4d4:	and	r5, r9, #1048576	; 0x100000
   2d4d8:	bne	2d4b4 <grisu3_diy_fp_encode_double@@Base+0x3b4>
   2d4dc:	orrs	r3, r4, r5
   2d4e0:	movne	r4, #0
   2d4e4:	movne	r5, #1048576	; 0x100000
   2d4e8:	ubfx	r3, r9, #0, #20
   2d4ec:	orr	r6, r8, r4
   2d4f0:	orr	r7, r3, r5
   2d4f4:	ldr	r3, [sp, #100]	; 0x64
   2d4f8:	sub	r2, r1, r2
   2d4fc:	cmp	r0, ip
   2d500:	cmplt	r2, r0
   2d504:	movge	r0, #1
   2d508:	movlt	r0, #0
   2d50c:	strd	r6, [r3]
   2d510:	add	sp, sp, #60	; 0x3c
   2d514:	ldrd	r4, [sp]
   2d518:	ldrd	r6, [sp, #8]
   2d51c:	ldrd	r8, [sp, #16]
   2d520:	ldrd	sl, [sp, #24]
   2d524:	add	sp, sp, #32
   2d528:	pop	{pc}		; (ldr pc, [sp], #4)
   2d52c:	mvn	r1, #1072	; 0x430
   2d530:	cmp	r0, r1
   2d534:	blt	2d5a8 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   2d538:	add	r0, r3, #1136	; 0x470
   2d53c:	add	r0, r0, #2
   2d540:	rsb	lr, r0, #64	; 0x40
   2d544:	cmp	lr, #60	; 0x3c
   2d548:	rsbgt	r0, r0, #2
   2d54c:	ble	2d658 <grisu3_diy_fp_encode_double@@Base+0x558>
   2d550:	asr	r2, r2, r0
   2d554:	add	r3, r3, r0
   2d558:	mov	lr, #62	; 0x3e
   2d55c:	lsr	r1, r9, r0
   2d560:	mov	r9, #0
   2d564:	add	r3, r3, #62	; 0x3e
   2d568:	add	r2, r2, #9
   2d56c:	mov	r0, r9
   2d570:	lsr	r8, r1, #30
   2d574:	mov	ip, r2
   2d578:	mov	r1, r9
   2d57c:	cmp	lr, ip
   2d580:	blt	2d434 <grisu3_diy_fp_encode_double@@Base+0x334>
   2d584:	b	2d404 <grisu3_diy_fp_encode_double@@Base+0x304>
   2d588:	ldr	r3, [sp, #20]
   2d58c:	add	r3, r3, #4
   2d590:	str	r3, [sp, #20]
   2d594:	b	2d2d0 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   2d598:	add	r3, r3, #1072	; 0x430
   2d59c:	add	r3, r3, #2
   2d5a0:	lsl	r5, r3, #20
   2d5a4:	b	2d4e8 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   2d5a8:	mov	r0, #2
   2d5ac:	b	2d550 <grisu3_diy_fp_encode_double@@Base+0x450>
   2d5b0:	mov	r3, r7
   2d5b4:	b	2d3a8 <grisu3_diy_fp_encode_double@@Base+0x2a8>
   2d5b8:	add	r3, r3, #1072	; 0x430
   2d5bc:	add	r3, r3, #3
   2d5c0:	lsl	r5, r3, #20
   2d5c4:	b	2d4e8 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   2d5c8:	bl	2cde0 <flatcc_verify_union_vector_field@@Base+0x290>
   2d5cc:	movw	r1, #31588	; 0x7b64
   2d5d0:	movt	r1, #4
   2d5d4:	movw	r0, #31768	; 0x7c18
   2d5d8:	movt	r0, #4
   2d5dc:	add	r3, ip, #24
   2d5e0:	mov	r2, #89	; 0x59
   2d5e4:	bl	145f0 <__assert_fail@plt>
   2d5e8:	movw	r1, #31588	; 0x7b64
   2d5ec:	movt	r1, #4
   2d5f0:	ldr	r3, [pc, #164]	; 2d69c <grisu3_diy_fp_encode_double@@Base+0x59c>
   2d5f4:	movw	r0, #31708	; 0x7bdc
   2d5f8:	movt	r0, #4
   2d5fc:	mov	r2, #81	; 0x51
   2d600:	bl	145f0 <__assert_fail@plt>
   2d604:	movw	r1, #31588	; 0x7b64
   2d608:	movt	r1, #4
   2d60c:	movw	r0, #31752	; 0x7c08
   2d610:	movt	r0, #4
   2d614:	add	r3, ip, #24
   2d618:	mov	r2, #88	; 0x58
   2d61c:	bl	145f0 <__assert_fail@plt>
   2d620:	movw	r1, #31588	; 0x7b64
   2d624:	movt	r1, #4
   2d628:	ldr	r3, [pc, #108]	; 2d69c <grisu3_diy_fp_encode_double@@Base+0x59c>
   2d62c:	movw	r0, #31676	; 0x7bbc
   2d630:	movt	r0, #4
   2d634:	mov	r2, #80	; 0x50
   2d638:	bl	145f0 <__assert_fail@plt>
   2d63c:	movw	r1, #31588	; 0x7b64
   2d640:	movt	r1, #4
   2d644:	ldr	r3, [pc, #84]	; 2d6a0 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   2d648:	movw	r0, #31796	; 0x7c34
   2d64c:	movt	r0, #4
   2d650:	mov	r2, #185	; 0xb9
   2d654:	bl	145f0 <__assert_fail@plt>
   2d658:	lsr	ip, r8, lr
   2d65c:	rsb	r1, lr, #32
   2d660:	rsb	r0, r0, #63	; 0x3f
   2d664:	sub	r5, lr, #32
   2d668:	mov	r4, #1
   2d66c:	orr	ip, ip, r9, lsl r1
   2d670:	mov	r1, #8
   2d674:	add	r3, r3, lr
   2d678:	and	r4, r8, r4, lsl r0
   2d67c:	orr	ip, ip, r9, lsr r5
   2d680:	lsl	r1, r1, r0
   2d684:	lsr	r5, r9, lr
   2d688:	mov	r8, ip
   2d68c:	lsl	r0, r4, #3
   2d690:	add	ip, r2, r1
   2d694:	mov	r9, r5
   2d698:	b	2d57c <grisu3_diy_fp_encode_double@@Base+0x47c>
   2d69c:	andeq	r7, r4, r0, lsl #5
   2d6a0:	andeq	r7, r4, r0, lsl r8
   2d6a4:	cmp	r1, #1000	; 0x3e8
   2d6a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d6ac:	mov	r4, #0
   2d6b0:	addgt	ip, r0, #1000	; 0x3e8
   2d6b4:	addle	r1, r1, #1
   2d6b8:	strd	r6, [sp, #8]
   2d6bc:	addle	ip, r0, r1
   2d6c0:	addgt	ip, ip, #1
   2d6c4:	strd	r8, [sp, #16]
   2d6c8:	mov	r5, #0
   2d6cc:	strd	sl, [sp, #24]
   2d6d0:	cmp	ip, r0
   2d6d4:	str	lr, [sp, #32]
   2d6d8:	sub	sp, sp, #52	; 0x34
   2d6dc:	moveq	r6, ip
   2d6e0:	strd	r4, [r2]
   2d6e4:	str	r2, [sp, #16]
   2d6e8:	beq	2d880 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d6ec:	ldrb	r4, [r0]
   2d6f0:	cmp	r4, #45	; 0x2d
   2d6f4:	beq	2d978 <grisu3_diy_fp_encode_double@@Base+0x878>
   2d6f8:	cmp	r4, #48	; 0x30
   2d6fc:	beq	2d8a0 <grisu3_diy_fp_encode_double@@Base+0x7a0>
   2d700:	sub	r3, r4, #49	; 0x31
   2d704:	cmp	r3, #8
   2d708:	bhi	2da28 <grisu3_diy_fp_encode_double@@Base+0x928>
   2d70c:	mov	r2, #0
   2d710:	mov	r3, r0
   2d714:	str	r2, [sp, #20]
   2d718:	add	r7, r3, #1
   2d71c:	sub	r4, r4, #48	; 0x30
   2d720:	cmp	ip, r7
   2d724:	asr	r5, r4, #31
   2d728:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d72c:	ldrb	r1, [r3, #1]
   2d730:	sub	r3, r1, #48	; 0x30
   2d734:	cmp	r3, #9
   2d738:	movhi	sl, #0
   2d73c:	movhi	lr, sl
   2d740:	bhi	2e078 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2d744:	add	fp, pc, #996	; 0x3e4
   2d748:	ldrd	sl, [fp]
   2d74c:	add	lr, r7, #1
   2d750:	b	2d760 <grisu3_diy_fp_encode_double@@Base+0x660>
   2d754:	cmp	r5, fp
   2d758:	cmpeq	r4, sl
   2d75c:	bhi	2d8f8 <grisu3_diy_fp_encode_double@@Base+0x7f8>
   2d760:	lsl	r2, r5, #2
   2d764:	mov	r6, lr
   2d768:	lsl	r3, r4, #2
   2d76c:	orr	r2, r2, r4, lsr #30
   2d770:	adds	r3, r3, r4
   2d774:	adc	r2, r2, r5
   2d778:	adds	r8, r3, r3
   2d77c:	adc	r9, r2, r2
   2d780:	adds	r2, r8, r1
   2d784:	adc	r3, r9, #0
   2d788:	subs	r4, r2, #48	; 0x30
   2d78c:	sbc	r5, r3, #0
   2d790:	cmp	ip, lr
   2d794:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d798:	ldrb	r1, [lr]
   2d79c:	add	lr, lr, #1
   2d7a0:	sub	r3, r1, #48	; 0x30
   2d7a4:	cmp	r3, #9
   2d7a8:	bls	2d754 <grisu3_diy_fp_encode_double@@Base+0x654>
   2d7ac:	mov	lr, #0
   2d7b0:	sub	sl, r6, r7
   2d7b4:	mov	r7, lr
   2d7b8:	sub	r3, r1, #49	; 0x31
   2d7bc:	cmp	r3, #8
   2d7c0:	bls	2d9b8 <grisu3_diy_fp_encode_double@@Base+0x8b8>
   2d7c4:	cmp	r1, #46	; 0x2e
   2d7c8:	beq	2da30 <grisu3_diy_fp_encode_double@@Base+0x930>
   2d7cc:	orr	r1, r1, #32
   2d7d0:	add	r7, r7, sl
   2d7d4:	cmp	r1, #101	; 0x65
   2d7d8:	beq	2dbe8 <grisu3_diy_fp_encode_double@@Base+0xae8>
   2d7dc:	orrs	r3, r4, r5
   2d7e0:	mov	r9, r0
   2d7e4:	ldr	r8, [sp, #16]
   2d7e8:	moveq	r2, #1
   2d7ec:	movne	r2, #0
   2d7f0:	cmn	r7, #324	; 0x144
   2d7f4:	movge	r3, #0
   2d7f8:	movlt	r3, #1
   2d7fc:	orrs	r3, r2, r3
   2d800:	bne	2d95c <grisu3_diy_fp_encode_double@@Base+0x85c>
   2d804:	movw	r3, #310	; 0x136
   2d808:	cmp	r7, r3
   2d80c:	bgt	2da08 <grisu3_diy_fp_encode_double@@Base+0x908>
   2d810:	movw	r3, #65535	; 0xffff
   2d814:	movt	r3, #31
   2d818:	cmp	r5, r3
   2d81c:	mvn	r2, #0
   2d820:	cmpeq	r4, r2
   2d824:	movls	r3, #1
   2d828:	movhi	r3, #0
   2d82c:	cmp	r7, #22
   2d830:	movhi	r3, #0
   2d834:	andls	r3, r3, #1
   2d838:	cmp	r3, #0
   2d83c:	bne	2dd04 <grisu3_diy_fp_encode_double@@Base+0xc04>
   2d840:	mov	r3, sl
   2d844:	mov	r2, r7
   2d848:	str	lr, [sp]
   2d84c:	mov	r0, r4
   2d850:	mov	r1, r5
   2d854:	str	r8, [sp, #4]
   2d858:	bl	2d100 <grisu3_diy_fp_encode_double@@Base>
   2d85c:	cmp	r0, #0
   2d860:	bne	2d95c <grisu3_diy_fp_encode_double@@Base+0x85c>
   2d864:	mov	r0, r9
   2d868:	add	r1, sp, #44	; 0x2c
   2d86c:	bl	145b4 <strtod@plt>
   2d870:	ldr	r3, [sp, #44]	; 0x2c
   2d874:	vstr	d0, [r8]
   2d878:	cmp	r6, r3
   2d87c:	movcs	r6, r3
   2d880:	mov	r0, r6
   2d884:	add	sp, sp, #52	; 0x34
   2d888:	ldrd	r4, [sp]
   2d88c:	ldrd	r6, [sp, #8]
   2d890:	ldrd	r8, [sp, #16]
   2d894:	ldrd	sl, [sp, #24]
   2d898:	add	sp, sp, #32
   2d89c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d8a0:	mov	r2, #0
   2d8a4:	mov	r3, r0
   2d8a8:	str	r2, [sp, #20]
   2d8ac:	add	r7, r3, #1
   2d8b0:	cmp	ip, r7
   2d8b4:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d8b8:	ldrb	r1, [r3, #1]
   2d8bc:	orr	r2, r1, #32
   2d8c0:	cmp	r2, #120	; 0x78
   2d8c4:	beq	2da28 <grisu3_diy_fp_encode_double@@Base+0x928>
   2d8c8:	cmp	r1, #48	; 0x30
   2d8cc:	addeq	r3, r3, #2
   2d8d0:	beq	2d8e4 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   2d8d4:	b	2dc8c <grisu3_diy_fp_encode_double@@Base+0xb8c>
   2d8d8:	ldrb	r1, [r3], #1
   2d8dc:	cmp	r1, #48	; 0x30
   2d8e0:	bne	2dc8c <grisu3_diy_fp_encode_double@@Base+0xb8c>
   2d8e4:	cmp	ip, r3
   2d8e8:	mov	r7, r3
   2d8ec:	bne	2d8d8 <grisu3_diy_fp_encode_double@@Base+0x7d8>
   2d8f0:	mov	r6, #0
   2d8f4:	b	2d880 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d8f8:	cmp	r1, #52	; 0x34
   2d8fc:	sub	sl, r6, r7
   2d900:	movls	r3, #0
   2d904:	movhi	r3, #1
   2d908:	adds	r4, r4, r3
   2d90c:	adc	r5, r5, #0
   2d910:	cmp	r1, #48	; 0x30
   2d914:	movne	r7, r6
   2d918:	movne	lr, #1
   2d91c:	bne	2e078 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2d920:	add	r3, r6, #1
   2d924:	mov	r7, #0
   2d928:	b	2d93c <grisu3_diy_fp_encode_double@@Base+0x83c>
   2d92c:	ldrb	r1, [r3]
   2d930:	add	r3, r3, #1
   2d934:	cmp	r1, #48	; 0x30
   2d938:	bne	2d9a8 <grisu3_diy_fp_encode_double@@Base+0x8a8>
   2d93c:	cmp	r3, ip
   2d940:	mov	r6, r3
   2d944:	add	r7, r7, #1
   2d948:	bne	2d92c <grisu3_diy_fp_encode_double@@Base+0x82c>
   2d94c:	b	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d950:	vldr	d6, [pc, #480]	; 2db38 <grisu3_diy_fp_encode_double@@Base+0xa38>
   2d954:	vmul.f64	d7, d7, d6
   2d958:	vstr	d7, [r8]
   2d95c:	ldr	r3, [sp, #20]
   2d960:	cmp	r3, #0
   2d964:	beq	2d880 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d968:	vldr	d7, [r8]
   2d96c:	vneg.f64	d7, d7
   2d970:	vstr	d7, [r8]
   2d974:	b	2d880 <grisu3_diy_fp_encode_double@@Base+0x780>
   2d978:	add	r3, r0, #1
   2d97c:	cmp	ip, r3
   2d980:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d984:	ldrb	r4, [r0, #1]
   2d988:	cmp	r4, #48	; 0x30
   2d98c:	beq	2da1c <grisu3_diy_fp_encode_double@@Base+0x91c>
   2d990:	sub	r2, r4, #49	; 0x31
   2d994:	cmp	r2, #8
   2d998:	bhi	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d99c:	mov	r2, #1
   2d9a0:	str	r2, [sp, #20]
   2d9a4:	b	2d718 <grisu3_diy_fp_encode_double@@Base+0x618>
   2d9a8:	sub	r3, r1, #49	; 0x31
   2d9ac:	mov	lr, #1
   2d9b0:	cmp	r3, #8
   2d9b4:	bhi	2d7c4 <grisu3_diy_fp_encode_double@@Base+0x6c4>
   2d9b8:	add	r3, r6, #1
   2d9bc:	add	lr, r7, #1
   2d9c0:	cmp	ip, r3
   2d9c4:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d9c8:	ldrb	r1, [r6, #1]
   2d9cc:	sub	r2, r1, #48	; 0x30
   2d9d0:	cmp	r2, #9
   2d9d4:	bhi	2e05c <grisu3_diy_fp_encode_double@@Base+0xf5c>
   2d9d8:	sub	r8, r7, r6
   2d9dc:	add	r3, r6, #2
   2d9e0:	cmp	ip, r3
   2d9e4:	add	r7, r8, r3
   2d9e8:	mov	r6, r3
   2d9ec:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2d9f0:	ldrb	r1, [r3], #1
   2d9f4:	sub	r2, r1, #48	; 0x30
   2d9f8:	cmp	r2, #9
   2d9fc:	bls	2d9e0 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   2da00:	mov	lr, #1
   2da04:	b	2d7c4 <grisu3_diy_fp_encode_double@@Base+0x6c4>
   2da08:	mov	r2, #0
   2da0c:	mov	r3, #0
   2da10:	movt	r3, #32752	; 0x7ff0
   2da14:	strd	r2, [r8]
   2da18:	b	2d95c <grisu3_diy_fp_encode_double@@Base+0x85c>
   2da1c:	mov	r2, #1
   2da20:	str	r2, [sp, #20]
   2da24:	b	2d8ac <grisu3_diy_fp_encode_double@@Base+0x7ac>
   2da28:	mov	r6, r0
   2da2c:	b	2d880 <grisu3_diy_fp_encode_double@@Base+0x780>
   2da30:	ldrb	r9, [r6, #1]
   2da34:	add	fp, r6, #1
   2da38:	sub	r3, r9, #48	; 0x30
   2da3c:	cmp	r3, #9
   2da40:	bhi	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2da44:	cmp	ip, fp
   2da48:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2da4c:	add	r3, pc, #220	; 0xdc
   2da50:	ldrd	r2, [r3]
   2da54:	cmp	r5, r3
   2da58:	cmpeq	r4, r2
   2da5c:	bhi	2e068 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2da60:	add	r7, r6, r7
   2da64:	add	r6, r6, #2
   2da68:	strd	r2, [sp, #8]
   2da6c:	add	r1, r7, #1
   2da70:	str	fp, [sp, #24]
   2da74:	mov	fp, r6
   2da78:	str	r0, [sp, #28]
   2da7c:	b	2da90 <grisu3_diy_fp_encode_double@@Base+0x990>
   2da80:	ldrd	r2, [sp, #8]
   2da84:	cmp	r5, r3
   2da88:	cmpeq	r4, r2
   2da8c:	bhi	2e01c <grisu3_diy_fp_encode_double@@Base+0xf1c>
   2da90:	lsl	r2, r5, #2
   2da94:	mov	r8, fp
   2da98:	sub	r0, r1, fp
   2da9c:	lsl	r3, r4, #2
   2daa0:	orr	r2, r2, r4, lsr #30
   2daa4:	adds	r3, r3, r4
   2daa8:	adc	r2, r2, r5
   2daac:	adds	r6, r3, r3
   2dab0:	adc	r7, r2, r2
   2dab4:	adds	r2, r6, r9
   2dab8:	adc	r3, r7, #0
   2dabc:	subs	r4, r2, #48	; 0x30
   2dac0:	sbc	r5, r3, #0
   2dac4:	cmp	ip, fp
   2dac8:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dacc:	ldrb	r9, [fp]
   2dad0:	add	fp, fp, #1
   2dad4:	sub	r3, r9, #48	; 0x30
   2dad8:	cmp	r3, #9
   2dadc:	bls	2da80 <grisu3_diy_fp_encode_double@@Base+0x980>
   2dae0:	ldr	fp, [sp, #24]
   2dae4:	mov	r7, r0
   2dae8:	ldr	r0, [sp, #28]
   2daec:	sub	fp, r8, fp
   2daf0:	add	sl, sl, fp
   2daf4:	ldrb	r1, [r8]
   2daf8:	cmp	r1, #48	; 0x30
   2dafc:	bne	2dc98 <grisu3_diy_fp_encode_double@@Base+0xb98>
   2db00:	sub	r3, r7, r8
   2db04:	add	r8, r8, #1
   2db08:	b	2db18 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2db0c:	ldrb	r1, [r8], #1
   2db10:	cmp	r1, #48	; 0x30
   2db14:	bne	2dc9c <grisu3_diy_fp_encode_double@@Base+0xb9c>
   2db18:	cmp	ip, r8
   2db1c:	add	r7, r3, r8
   2db20:	mov	r6, r8
   2db24:	bne	2db0c <grisu3_diy_fp_encode_double@@Base+0xa0c>
   2db28:	b	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2db2c:	nop	{0}
   2db30:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2db34:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2db38:	usatle	lr, #2, r0, asr #30
   2db3c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2db40:	ldmvc	r5!, {r6, sl, fp, pc}
   2db44:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2db48:	addsvs	r3, r1, r0, lsl #26
   2db4c:	mvnmi	r5, #228, 16	; 0xe40000
   2db50:	strbvs	ip, [lr, -r0, lsl #16]
   2db54:			; <UNDEFINED> instruction: 0x43abc16d
   2db58:	ldrbhi	sl, [r8]
   2db5c:	cmnmi	r6, #1459617792	; 0x57000000
   2db60:	strbcc	r8, [r0, r0]!
   2db64:	movtmi	ip, #4985	; 0x1379
   2db68:	andeq	r0, r0, r0
   2db6c:	sbcmi	r8, r3, r0, lsl #16
   2db70:	andeq	r0, r0, r0
   2db74:	addmi	r4, pc, r0
   2db78:	andeq	r0, r0, r0
   2db7c:	smlawbmi	lr, r0, r4, r8
   2db80:	andeq	r0, r0, r0
   2db84:	orrsmi	sp, r7, r4, lsl #15
   2db88:	andcs	r0, r0, r0
   2db8c:	andmi	sl, r2, #95	; 0x5f
   2db90:	andge	r0, r0, #0
   2db94:	rsbmi	r1, sp, #148, 20	; 0x94000
   2db98:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2db9c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2dba0:	ldrtcs	r0, [r4], -r0
   2dba4:	movwmi	r6, #52213	; 0xcbf5
   2dba8:	strb	r0, [r0, #-0]
   2dbac:	adcmi	r3, r2, #156	; 0x9c
   2dbb0:	stmda	r0, {}	; <UNPREDICTABLE>
   2dbb4:	eorsmi	r4, r7, #7733248	; 0x760000
   2dbb8:	andeq	r0, r0, r0
   2dbbc:	bicmi	ip, sp, r5, ror #26
   2dbc0:	andeq	r0, r0, r0
   2dbc4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2dbc8:	andeq	r0, r0, r0
   2dbcc:	rscsmi	r6, r8, r0, lsl #20
   2dbd0:	andeq	r0, r0, r0
   2dbd4:	subsmi	r0, r9, r0
   2dbd8:			; <UNDEFINED> instruction: 0x064dd592
   2dbdc:	strmi	pc, [r0], #207	; 0xcf
   2dbe0:	andeq	r0, r0, r0
   2dbe4:	eormi	r0, r4, r0
   2dbe8:	sub	r3, ip, r6
   2dbec:	cmp	r3, #1
   2dbf0:	ble	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dbf4:	ldrb	r8, [r6, #1]
   2dbf8:	cmp	r8, #43	; 0x2b
   2dbfc:	beq	2dfe0 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2dc00:	cmp	r8, #45	; 0x2d
   2dc04:	beq	2e004 <grisu3_diy_fp_encode_double@@Base+0xf04>
   2dc08:	add	r2, r6, #1
   2dc0c:	mov	fp, #0
   2dc10:	sub	r8, r8, #48	; 0x30
   2dc14:	uxtb	r3, r8
   2dc18:	cmp	r3, #9
   2dc1c:	bhi	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dc20:	add	r6, r2, #1
   2dc24:	mov	r3, r8
   2dc28:	cmp	ip, r6
   2dc2c:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dc30:	ldrb	r1, [r2, #1]
   2dc34:	sub	r9, r1, #48	; 0x30
   2dc38:	cmp	r9, #9
   2dc3c:	bhi	2dcf0 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   2dc40:	add	r2, r2, #2
   2dc44:	add	r8, r3, r3, lsl #2
   2dc48:	cmp	r3, #32768	; 0x8000
   2dc4c:	mov	r6, r2
   2dc50:	addlt	r3, r1, r8, lsl #1
   2dc54:	sublt	r3, r3, #48	; 0x30
   2dc58:	cmp	ip, r2
   2dc5c:	beq	2dff8 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2dc60:	ldrb	r1, [r2]
   2dc64:	add	r2, r2, #1
   2dc68:	sub	r8, r1, #48	; 0x30
   2dc6c:	cmp	r8, #9
   2dc70:	bls	2dc44 <grisu3_diy_fp_encode_double@@Base+0xb44>
   2dc74:	cmp	fp, #0
   2dc78:	beq	2dcfc <grisu3_diy_fp_encode_double@@Base+0xbfc>
   2dc7c:	cmp	ip, r6
   2dc80:	sub	r7, r7, r3
   2dc84:	bne	2d7dc <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2dc88:	b	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dc8c:	mov	r4, #0
   2dc90:	mov	r5, #0
   2dc94:	b	2d730 <grisu3_diy_fp_encode_double@@Base+0x630>
   2dc98:	mov	r6, r8
   2dc9c:	sub	r3, r1, #49	; 0x31
   2dca0:	cmp	r3, #8
   2dca4:	bhi	2d7cc <grisu3_diy_fp_encode_double@@Base+0x6cc>
   2dca8:	add	r3, r6, #1
   2dcac:	cmp	ip, r3
   2dcb0:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dcb4:	ldrb	r1, [r6, #1]
   2dcb8:	sub	r2, r1, #48	; 0x30
   2dcbc:	cmp	r2, #9
   2dcc0:	bhi	2e070 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2dcc4:	add	r3, r6, #2
   2dcc8:	cmp	ip, r3
   2dccc:	mov	r6, r3
   2dcd0:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dcd4:	ldrb	r1, [r3]
   2dcd8:	add	r3, r3, #1
   2dcdc:	sub	r2, r1, #48	; 0x30
   2dce0:	cmp	r2, #9
   2dce4:	bls	2dcc8 <grisu3_diy_fp_encode_double@@Base+0xbc8>
   2dce8:	mov	lr, #1
   2dcec:	b	2d7cc <grisu3_diy_fp_encode_double@@Base+0x6cc>
   2dcf0:	cmp	fp, #0
   2dcf4:	subne	r7, r7, r8
   2dcf8:	bne	2d7dc <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2dcfc:	add	r7, r7, r3
   2dd00:	b	2d7dc <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2dd04:	mov	r0, r4
   2dd08:	mov	r1, r5
   2dd0c:	bl	41ea8 <flatcc_json_printer_clear@@Base+0x390>
   2dd10:	sub	r3, r7, sl
   2dd14:	vmov	d7, r0, r1
   2dd18:	add	r3, r3, #22
   2dd1c:	cmp	r3, #44	; 0x2c
   2dd20:	ldrls	pc, [pc, r3, lsl #2]
   2dd24:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dd28:			; <UNDEFINED> instruction: 0x0002dfbc
   2dd2c:	ldrdeq	sp, [r2], -r4
   2dd30:	andeq	sp, r2, r8, asr #31
   2dd34:			; <UNDEFINED> instruction: 0x0002dfb0
   2dd38:	andeq	sp, r2, r4, lsr #31
   2dd3c:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   2dd40:	andeq	sp, r2, ip, lsl #31
   2dd44:	andeq	sp, r2, r0, lsl #31
   2dd48:	andeq	sp, r2, r4, ror pc
   2dd4c:	andeq	sp, r2, r8, ror #30
   2dd50:	andeq	sp, r2, ip, asr pc
   2dd54:	andeq	sp, r2, r0, asr pc
   2dd58:	andeq	sp, r2, r4, asr #30
   2dd5c:	andeq	sp, r2, r8, lsr pc
   2dd60:	andeq	sp, r2, ip, lsr #30
   2dd64:	andeq	sp, r2, r0, lsr #30
   2dd68:	andeq	sp, r2, r4, lsl pc
   2dd6c:	andeq	sp, r2, r8, lsl #30
   2dd70:	strdeq	sp, [r2], -ip
   2dd74:	strdeq	sp, [r2], -r0
   2dd78:	andeq	sp, r2, r4, ror #29
   2dd7c:	ldrdeq	sp, [r2], -r8
   2dd80:	andeq	sp, r2, r8, asr r9
   2dd84:	andeq	sp, r2, r0, asr #29
   2dd88:			; <UNDEFINED> instruction: 0x0002deb4
   2dd8c:	andeq	sp, r2, r8, lsr #29
   2dd90:	muleq	r2, ip, lr
   2dd94:	muleq	r2, r0, lr
   2dd98:	andeq	sp, r2, r4, lsl #29
   2dd9c:	andeq	sp, r2, r8, ror lr
   2dda0:	andeq	sp, r2, ip, ror #28
   2dda4:	andeq	sp, r2, r0, ror #28
   2dda8:	andeq	sp, r2, r4, asr lr
   2ddac:	andeq	sp, r2, r8, asr #28
   2ddb0:	andeq	sp, r2, ip, lsr lr
   2ddb4:	andeq	sp, r2, r0, lsr lr
   2ddb8:	andeq	sp, r2, r4, lsr #28
   2ddbc:	andeq	sp, r2, r8, lsl lr
   2ddc0:	andeq	sp, r2, ip, lsl #28
   2ddc4:	andeq	sp, r2, r0, lsl #28
   2ddc8:	strdeq	sp, [r2], -r4
   2ddcc:	andeq	sp, r2, r8, ror #27
   2ddd0:	ldrdeq	sp, [r2], -ip
   2ddd4:	andeq	sp, r2, r0, asr r9
   2ddd8:	andeq	sp, r2, ip, asr #29
   2dddc:	vldr	d6, [pc, #-676]	; 2db40 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2dde0:	vmul.f64	d7, d7, d6
   2dde4:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dde8:	vldr	d6, [pc, #-680]	; 2db48 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2ddec:	vmul.f64	d7, d7, d6
   2ddf0:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2ddf4:	vldr	d6, [pc, #-684]	; 2db50 <grisu3_diy_fp_encode_double@@Base+0xa50>
   2ddf8:	vmul.f64	d7, d7, d6
   2ddfc:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de00:	vldr	d6, [pc, #-688]	; 2db58 <grisu3_diy_fp_encode_double@@Base+0xa58>
   2de04:	vmul.f64	d7, d7, d6
   2de08:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de0c:	vldr	d6, [pc, #-692]	; 2db60 <grisu3_diy_fp_encode_double@@Base+0xa60>
   2de10:	vmul.f64	d7, d7, d6
   2de14:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de18:	vldr	d6, [pc, #-640]	; 2dba0 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   2de1c:	vmul.f64	d7, d7, d6
   2de20:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de24:	vldr	d6, [pc, #-660]	; 2db98 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2de28:	vmul.f64	d7, d7, d6
   2de2c:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de30:	vldr	d6, [pc, #-656]	; 2dba8 <grisu3_diy_fp_encode_double@@Base+0xaa8>
   2de34:	vmul.f64	d7, d7, d6
   2de38:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de3c:	vldr	d6, [pc, #-692]	; 2db90 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2de40:	vmul.f64	d7, d7, d6
   2de44:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de48:	vldr	d6, [pc, #-672]	; 2dbb0 <grisu3_diy_fp_encode_double@@Base+0xab0>
   2de4c:	vmul.f64	d7, d7, d6
   2de50:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de54:	vldr	d6, [pc, #-724]	; 2db88 <grisu3_diy_fp_encode_double@@Base+0xa88>
   2de58:	vmul.f64	d7, d7, d6
   2de5c:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de60:	vldr	d6, [pc, #-688]	; 2dbb8 <grisu3_diy_fp_encode_double@@Base+0xab8>
   2de64:	vmul.f64	d7, d7, d6
   2de68:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de6c:	vldr	d6, [pc, #-756]	; 2db80 <grisu3_diy_fp_encode_double@@Base+0xa80>
   2de70:	vmul.f64	d7, d7, d6
   2de74:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de78:	vldr	d6, [pc, #-704]	; 2dbc0 <grisu3_diy_fp_encode_double@@Base+0xac0>
   2de7c:	vmul.f64	d7, d7, d6
   2de80:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de84:	vldr	d6, [pc, #-788]	; 2db78 <grisu3_diy_fp_encode_double@@Base+0xa78>
   2de88:	vmul.f64	d7, d7, d6
   2de8c:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de90:	vldr	d6, [pc, #-720]	; 2dbc8 <grisu3_diy_fp_encode_double@@Base+0xac8>
   2de94:	vmul.f64	d7, d7, d6
   2de98:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2de9c:	vldr	d6, [pc, #-828]	; 2db68 <grisu3_diy_fp_encode_double@@Base+0xa68>
   2dea0:	vmul.f64	d7, d7, d6
   2dea4:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dea8:	vldr	d6, [pc, #-832]	; 2db70 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2deac:	vmul.f64	d7, d7, d6
   2deb0:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2deb4:	vldr	d6, [pc, #-748]	; 2dbd0 <grisu3_diy_fp_encode_double@@Base+0xad0>
   2deb8:	vmul.f64	d7, d7, d6
   2debc:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dec0:	vldr	d6, [pc, #-744]	; 2dbe0 <grisu3_diy_fp_encode_double@@Base+0xae0>
   2dec4:	vmul.f64	d7, d7, d6
   2dec8:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2decc:	vldr	d6, [pc, #-764]	; 2dbd8 <grisu3_diy_fp_encode_double@@Base+0xad8>
   2ded0:	vmul.f64	d7, d7, d6
   2ded4:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2ded8:	vldr	d6, [pc, #-768]	; 2dbe0 <grisu3_diy_fp_encode_double@@Base+0xae0>
   2dedc:	vdiv.f64	d7, d7, d6
   2dee0:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dee4:	vldr	d6, [pc, #-796]	; 2dbd0 <grisu3_diy_fp_encode_double@@Base+0xad0>
   2dee8:	vdiv.f64	d7, d7, d6
   2deec:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2def0:	vldr	d6, [pc, #-904]	; 2db70 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2def4:	vdiv.f64	d7, d7, d6
   2def8:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2defc:	vldr	d6, [pc, #-924]	; 2db68 <grisu3_diy_fp_encode_double@@Base+0xa68>
   2df00:	vdiv.f64	d7, d7, d6
   2df04:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df08:	vldr	d6, [pc, #-840]	; 2dbc8 <grisu3_diy_fp_encode_double@@Base+0xac8>
   2df0c:	vdiv.f64	d7, d7, d6
   2df10:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df14:	vldr	d6, [pc, #-932]	; 2db78 <grisu3_diy_fp_encode_double@@Base+0xa78>
   2df18:	vdiv.f64	d7, d7, d6
   2df1c:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df20:	vldr	d6, [pc, #-872]	; 2dbc0 <grisu3_diy_fp_encode_double@@Base+0xac0>
   2df24:	vdiv.f64	d7, d7, d6
   2df28:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df2c:	vldr	d6, [pc, #-948]	; 2db80 <grisu3_diy_fp_encode_double@@Base+0xa80>
   2df30:	vdiv.f64	d7, d7, d6
   2df34:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df38:	vldr	d6, [pc, #-904]	; 2dbb8 <grisu3_diy_fp_encode_double@@Base+0xab8>
   2df3c:	vdiv.f64	d7, d7, d6
   2df40:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df44:	vldr	d6, [pc, #-964]	; 2db88 <grisu3_diy_fp_encode_double@@Base+0xa88>
   2df48:	vdiv.f64	d7, d7, d6
   2df4c:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df50:	vldr	d6, [pc, #-936]	; 2dbb0 <grisu3_diy_fp_encode_double@@Base+0xab0>
   2df54:	vdiv.f64	d7, d7, d6
   2df58:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df5c:	vldr	d6, [pc, #-980]	; 2db90 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2df60:	vdiv.f64	d7, d7, d6
   2df64:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df68:	vldr	d6, [pc, #-968]	; 2dba8 <grisu3_diy_fp_encode_double@@Base+0xaa8>
   2df6c:	vdiv.f64	d7, d7, d6
   2df70:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df74:	vldr	d6, [pc, #-996]	; 2db98 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2df78:	vdiv.f64	d7, d7, d6
   2df7c:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df80:	vldr	d6, [pc, #-1000]	; 2dba0 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   2df84:	vdiv.f64	d7, d7, d6
   2df88:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df8c:	vldr	d6, [pc, #244]	; 2e088 <grisu3_diy_fp_encode_double@@Base+0xf88>
   2df90:	vdiv.f64	d7, d7, d6
   2df94:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2df98:	vldr	d6, [pc, #240]	; 2e090 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2df9c:	vdiv.f64	d7, d7, d6
   2dfa0:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dfa4:	vldr	d6, [pc, #236]	; 2e098 <grisu3_diy_fp_encode_double@@Base+0xf98>
   2dfa8:	vdiv.f64	d7, d7, d6
   2dfac:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dfb0:	vldr	d6, [pc, #232]	; 2e0a0 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   2dfb4:	vdiv.f64	d7, d7, d6
   2dfb8:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dfbc:	vldr	d6, [pc, #228]	; 2e0a8 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   2dfc0:	vdiv.f64	d7, d7, d6
   2dfc4:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dfc8:	vldr	d6, [pc, #224]	; 2e0b0 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2dfcc:	vdiv.f64	d7, d7, d6
   2dfd0:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dfd4:	vldr	d6, [pc, #220]	; 2e0b8 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   2dfd8:	vdiv.f64	d7, d7, d6
   2dfdc:	b	2d958 <grisu3_diy_fp_encode_double@@Base+0x858>
   2dfe0:	add	r2, r6, #2
   2dfe4:	cmp	ip, r2
   2dfe8:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2dfec:	ldrb	r8, [r6, #2]
   2dff0:	mov	fp, #0
   2dff4:	b	2dc10 <grisu3_diy_fp_encode_double@@Base+0xb10>
   2dff8:	cmp	fp, #0
   2dffc:	bne	2dc7c <grisu3_diy_fp_encode_double@@Base+0xb7c>
   2e000:	b	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2e004:	add	r2, r6, #2
   2e008:	cmp	ip, r2
   2e00c:	beq	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2e010:	ldrb	r8, [r6, #2]
   2e014:	mov	fp, #1
   2e018:	b	2dc10 <grisu3_diy_fp_encode_double@@Base+0xb10>
   2e01c:	ldr	fp, [sp, #24]
   2e020:	mov	r7, r0
   2e024:	ldr	r0, [sp, #28]
   2e028:	sub	fp, r8, fp
   2e02c:	add	sl, sl, fp
   2e030:	cmp	lr, #0
   2e034:	bne	2daf4 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   2e038:	cmp	r9, #52	; 0x34
   2e03c:	movls	r9, #0
   2e040:	movhi	r9, #1
   2e044:	adds	r4, r4, r9
   2e048:	adc	r5, r5, #0
   2e04c:	cmp	ip, r8
   2e050:	movne	lr, #1
   2e054:	bne	2daf4 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   2e058:	b	2d8f0 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2e05c:	mov	r7, lr
   2e060:	mov	r6, r3
   2e064:	b	2da00 <grisu3_diy_fp_encode_double@@Base+0x900>
   2e068:	mov	r8, fp
   2e06c:	b	2e030 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2e070:	mov	r6, r3
   2e074:	b	2dce8 <grisu3_diy_fp_encode_double@@Base+0xbe8>
   2e078:	mov	r6, r7
   2e07c:	mov	r7, #0
   2e080:	b	2d7b8 <grisu3_diy_fp_encode_double@@Base+0x6b8>
   2e084:	nop	{0}
   2e088:	strbcc	r8, [r0, r0]!
   2e08c:	movtmi	ip, #4985	; 0x1379
   2e090:	ldrbhi	sl, [r8]
   2e094:	cmnmi	r6, #1459617792	; 0x57000000
   2e098:	strbvs	ip, [lr, -r0, lsl #16]
   2e09c:			; <UNDEFINED> instruction: 0x43abc16d
   2e0a0:	addsvs	r3, r1, r0, lsl #26
   2e0a4:	mvnmi	r5, #228, 16	; 0xe40000
   2e0a8:			; <UNDEFINED> instruction: 0x064dd592
   2e0ac:	strmi	pc, [r0], #207	; 0xcf
   2e0b0:	ldmvc	r5!, {r6, sl, fp, pc}
   2e0b4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2e0b8:	usatle	lr, #2, r0, asr #30
   2e0bc:	strbmi	r1, [fp], #-2788	; 0xfffff51c

0002e0c0 <flatcc_json_parser_error_string@@Base>:
   2e0c0:	cmp	r0, #34	; 0x22
   2e0c4:	bhi	2e0dc <flatcc_json_parser_error_string@@Base+0x1c>
   2e0c8:	movw	r3, #29288	; 0x7268
   2e0cc:	movt	r3, #4
   2e0d0:	add	r3, r3, r0, lsl #2
   2e0d4:	ldr	r0, [r3, #1476]	; 0x5c4
   2e0d8:	bx	lr
   2e0dc:	movw	r0, #28116	; 0x6dd4
   2e0e0:	movt	r0, #4
   2e0e4:	bx	lr

0002e0e8 <flatcc_json_parser_set_error@@Base>:
   2e0e8:	ldr	ip, [r0, #24]
   2e0ec:	cmp	ip, #0
   2e0f0:	bne	2e10c <flatcc_json_parser_set_error@@Base+0x24>
   2e0f4:	ldr	ip, [r0, #4]
   2e0f8:	str	r3, [r0, #24]
   2e0fc:	str	r1, [r0, #36]	; 0x24
   2e100:	sub	r1, r1, ip
   2e104:	add	r1, r1, #1
   2e108:	str	r1, [r0, #20]
   2e10c:	mov	r0, r2
   2e110:	bx	lr

0002e114 <flatcc_json_parser_string_part@@Base>:
   2e114:	cmp	r1, r2
   2e118:	push	{lr}		; (str lr, [sp, #-4]!)
   2e11c:	mov	lr, r0
   2e120:	beq	2e1c8 <flatcc_json_parser_string_part@@Base+0xb4>
   2e124:	ldrb	r3, [r1]
   2e128:	cmp	r3, #34	; 0x22
   2e12c:	cmpne	r3, #31
   2e130:	movhi	ip, #1
   2e134:	movls	ip, #0
   2e138:	cmp	r3, #92	; 0x5c
   2e13c:	moveq	ip, #0
   2e140:	andne	ip, ip, #1
   2e144:	cmp	ip, #0
   2e148:	beq	2e1e4 <flatcc_json_parser_string_part@@Base+0xd0>
   2e14c:	add	r1, r1, #1
   2e150:	cmp	r1, r2
   2e154:	mov	r0, r1
   2e158:	beq	2e1cc <flatcc_json_parser_string_part@@Base+0xb8>
   2e15c:	ldrb	r3, [r1], #1
   2e160:	cmp	r3, #34	; 0x22
   2e164:	cmpne	r3, #31
   2e168:	movhi	ip, #1
   2e16c:	movls	ip, #0
   2e170:	cmp	r3, #92	; 0x5c
   2e174:	moveq	ip, #0
   2e178:	andne	ip, ip, #1
   2e17c:	cmp	ip, #0
   2e180:	bne	2e150 <flatcc_json_parser_string_part@@Base+0x3c>
   2e184:	cmp	r3, #31
   2e188:	bls	2e190 <flatcc_json_parser_string_part@@Base+0x7c>
   2e18c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e190:	ldr	r3, [lr, #24]
   2e194:	cmp	r3, #0
   2e198:	bne	2e1c0 <flatcc_json_parser_string_part@@Base+0xac>
   2e19c:	ldr	r3, [lr, #4]
   2e1a0:	mov	r1, #17
   2e1a4:	sub	r3, r0, r3
   2e1a8:	str	r1, [lr, #24]
   2e1ac:	add	r3, r3, #1
   2e1b0:	str	r3, [lr, #20]
   2e1b4:	str	r0, [lr, #36]	; 0x24
   2e1b8:	mov	r0, r2
   2e1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2e1c0:	mov	r0, r2
   2e1c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e1c8:	mov	r0, r2
   2e1cc:	ldr	r3, [lr, #24]
   2e1d0:	cmp	r3, #0
   2e1d4:	bne	2e1c0 <flatcc_json_parser_string_part@@Base+0xac>
   2e1d8:	mov	r1, #20
   2e1dc:	ldr	r3, [lr, #4]
   2e1e0:	b	2e1a4 <flatcc_json_parser_string_part@@Base+0x90>
   2e1e4:	mov	r0, r1
   2e1e8:	b	2e184 <flatcc_json_parser_string_part@@Base+0x70>

0002e1ec <flatcc_json_parser_space_ext@@Base>:
   2e1ec:	cmp	r1, r2
   2e1f0:	beq	2e2a8 <flatcc_json_parser_space_ext@@Base+0xbc>
   2e1f4:	ldrb	ip, [r1]
   2e1f8:	cmp	ip, #32
   2e1fc:	bne	2e228 <flatcc_json_parser_space_ext@@Base+0x3c>
   2e200:	add	r3, r1, #1
   2e204:	b	2e214 <flatcc_json_parser_space_ext@@Base+0x28>
   2e208:	ldrb	ip, [r3], #1
   2e20c:	cmp	ip, #32
   2e210:	bne	2e228 <flatcc_json_parser_space_ext@@Base+0x3c>
   2e214:	cmp	r3, r2
   2e218:	mov	r1, r3
   2e21c:	bne	2e208 <flatcc_json_parser_space_ext@@Base+0x1c>
   2e220:	mov	r0, r1
   2e224:	bx	lr
   2e228:	cmp	ip, #32
   2e22c:	bhi	2e220 <flatcc_json_parser_space_ext@@Base+0x34>
   2e230:	sub	ip, ip, #9
   2e234:	cmp	ip, #23
   2e238:	ldrls	pc, [pc, ip, lsl #2]
   2e23c:	b	2e30c <flatcc_json_parser_space_ext@@Base+0x120>
   2e240:	andeq	lr, r2, r4, lsl #6
   2e244:	ldrdeq	lr, [r2], -r8
   2e248:	andeq	lr, r2, ip, lsl #6
   2e24c:	andeq	lr, r2, ip, lsl #6
   2e250:			; <UNDEFINED> instruction: 0x0002e2b4
   2e254:	andeq	lr, r2, ip, lsl #6
   2e258:	andeq	lr, r2, ip, lsl #6
   2e25c:	andeq	lr, r2, ip, lsl #6
   2e260:	andeq	lr, r2, ip, lsl #6
   2e264:	andeq	lr, r2, ip, lsl #6
   2e268:	andeq	lr, r2, ip, lsl #6
   2e26c:	andeq	lr, r2, ip, lsl #6
   2e270:	andeq	lr, r2, ip, lsl #6
   2e274:	andeq	lr, r2, ip, lsl #6
   2e278:	andeq	lr, r2, ip, lsl #6
   2e27c:	andeq	lr, r2, ip, lsl #6
   2e280:	andeq	lr, r2, ip, lsl #6
   2e284:	andeq	lr, r2, ip, lsl #6
   2e288:	andeq	lr, r2, ip, lsl #6
   2e28c:	andeq	lr, r2, ip, lsl #6
   2e290:	andeq	lr, r2, ip, lsl #6
   2e294:	andeq	lr, r2, ip, lsl #6
   2e298:	andeq	lr, r2, ip, lsl #6
   2e29c:	andeq	lr, r2, r0, lsr #5
   2e2a0:	cmp	r2, r1
   2e2a4:	bne	2e1f4 <flatcc_json_parser_space_ext@@Base+0x8>
   2e2a8:	mov	r1, r2
   2e2ac:	mov	r0, r1
   2e2b0:	bx	lr
   2e2b4:	sub	r3, r2, r1
   2e2b8:	add	ip, r1, #1
   2e2bc:	cmp	r3, #1
   2e2c0:	ble	2e2d0 <flatcc_json_parser_space_ext@@Base+0xe4>
   2e2c4:	ldrb	r3, [r1, #1]
   2e2c8:	cmp	r3, #10
   2e2cc:	addeq	ip, r1, #2
   2e2d0:	mov	r1, ip
   2e2d4:	b	2e2dc <flatcc_json_parser_space_ext@@Base+0xf0>
   2e2d8:	add	r1, r1, #1
   2e2dc:	ldr	r3, [r0, #16]
   2e2e0:	str	r1, [r0, #4]
   2e2e4:	add	r3, r3, #1
   2e2e8:	str	r3, [r0, #16]
   2e2ec:	cmp	r2, r1
   2e2f0:	beq	2e220 <flatcc_json_parser_space_ext@@Base+0x34>
   2e2f4:	ldrb	ip, [r1]
   2e2f8:	cmp	ip, #32
   2e2fc:	bls	2e230 <flatcc_json_parser_space_ext@@Base+0x44>
   2e300:	b	2e220 <flatcc_json_parser_space_ext@@Base+0x34>
   2e304:	add	r1, r1, #1
   2e308:	b	2e2ec <flatcc_json_parser_space_ext@@Base+0x100>
   2e30c:	ldr	r3, [r0, #24]
   2e310:	cmp	r3, #0
   2e314:	bne	2e2a8 <flatcc_json_parser_space_ext@@Base+0xbc>
   2e318:	ldr	r3, [r0, #4]
   2e31c:	mov	ip, #5
   2e320:	str	r1, [r0, #36]	; 0x24
   2e324:	str	ip, [r0, #24]
   2e328:	sub	r3, r1, r3
   2e32c:	mov	r1, r2
   2e330:	add	r3, r3, #1
   2e334:	str	r3, [r0, #20]
   2e338:	mov	r0, r1
   2e33c:	bx	lr
   2e340:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e344:	mov	r5, r0
   2e348:	mov	ip, #0
   2e34c:	strd	r6, [sp, #8]
   2e350:	mov	r4, r2
   2e354:	strd	r8, [sp, #16]
   2e358:	mov	r8, r3
   2e35c:	strd	sl, [sp, #24]
   2e360:	mov	sl, r1
   2e364:	str	lr, [sp, #32]
   2e368:	sub	sp, sp, #28
   2e36c:	ldrh	r0, [sp, #68]	; 0x44
   2e370:	ldr	r7, [sp, #64]	; 0x40
   2e374:	str	r0, [sp, #12]
   2e378:	ldr	r0, [r5]
   2e37c:	str	ip, [sp, #20]
   2e380:	bl	27a18 <flatcc_builder_start_offset_vector@@Base>
   2e384:	cmp	r0, #0
   2e388:	beq	2e3e0 <flatcc_json_parser_space_ext@@Base+0x1f4>
   2e38c:	ldr	r3, [r5, #24]
   2e390:	cmp	r3, #0
   2e394:	beq	2e3bc <flatcc_json_parser_space_ext@@Base+0x1d0>
   2e398:	mov	fp, r4
   2e39c:	mov	r0, fp
   2e3a0:	add	sp, sp, #28
   2e3a4:	ldrd	r4, [sp]
   2e3a8:	ldrd	r6, [sp, #8]
   2e3ac:	ldrd	r8, [sp, #16]
   2e3b0:	ldrd	sl, [sp, #24]
   2e3b4:	add	sp, sp, #32
   2e3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2e3bc:	ldr	r2, [r5, #4]
   2e3c0:	mov	r1, #33	; 0x21
   2e3c4:	mov	fp, r4
   2e3c8:	str	sl, [r5, #36]	; 0x24
   2e3cc:	str	r1, [r5, #24]
   2e3d0:	sub	sl, sl, r2
   2e3d4:	add	sl, sl, #1
   2e3d8:	str	sl, [r5, #20]
   2e3dc:	b	2e39c <flatcc_json_parser_space_ext@@Base+0x1b0>
   2e3e0:	cmp	sl, r4
   2e3e4:	beq	2e3f4 <flatcc_json_parser_space_ext@@Base+0x208>
   2e3e8:	ldrb	r3, [sl]
   2e3ec:	cmp	r3, #91	; 0x5b
   2e3f0:	beq	2e478 <flatcc_json_parser_space_ext@@Base+0x28c>
   2e3f4:	ldr	r6, [r5, #24]
   2e3f8:	cmp	r6, #0
   2e3fc:	beq	2e458 <flatcc_json_parser_space_ext@@Base+0x26c>
   2e400:	mov	r6, #0
   2e404:	cmp	r7, r6
   2e408:	moveq	sl, r4
   2e40c:	bne	2e398 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2e410:	mov	r1, r8
   2e414:	ldr	r0, [r5]
   2e418:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   2e41c:	mov	r1, r0
   2e420:	ldr	r0, [r5]
   2e424:	bl	292ec <flatcc_builder_end_offset_vector_for_unions@@Base>
   2e428:	cmp	r0, #0
   2e42c:	str	r0, [sp, #20]
   2e430:	beq	2e38c <flatcc_json_parser_space_ext@@Base+0x1a0>
   2e434:	ldr	r0, [r5]
   2e438:	ldr	r1, [sp, #12]
   2e43c:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   2e440:	cmp	r0, #0
   2e444:	beq	2e38c <flatcc_json_parser_space_ext@@Base+0x1a0>
   2e448:	ldr	r2, [sp, #20]
   2e44c:	mov	fp, sl
   2e450:	str	r2, [r0]
   2e454:	b	2e39c <flatcc_json_parser_space_ext@@Base+0x1b0>
   2e458:	ldr	r3, [r5, #4]
   2e45c:	mov	r2, #22
   2e460:	str	sl, [r5, #36]	; 0x24
   2e464:	str	r2, [r5, #24]
   2e468:	sub	sl, sl, r3
   2e46c:	add	sl, sl, #1
   2e470:	str	sl, [r5, #20]
   2e474:	b	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e478:	add	r9, sl, #1
   2e47c:	sub	r3, r4, r9
   2e480:	cmp	r3, #1
   2e484:	ble	2e498 <flatcc_json_parser_space_ext@@Base+0x2ac>
   2e488:	ldrb	r1, [sl, #1]
   2e48c:	cmp	r1, #32
   2e490:	bhi	2eab4 <flatcc_json_parser_space_ext@@Base+0x8c8>
   2e494:	beq	2eaa4 <flatcc_json_parser_space_ext@@Base+0x8b8>
   2e498:	cmp	r4, r9
   2e49c:	beq	2e4cc <flatcc_json_parser_space_ext@@Base+0x2e0>
   2e4a0:	ldrb	r1, [r9]
   2e4a4:	cmp	r1, #32
   2e4a8:	bne	2e93c <flatcc_json_parser_space_ext@@Base+0x750>
   2e4ac:	add	r3, r9, #1
   2e4b0:	b	2e4c0 <flatcc_json_parser_space_ext@@Base+0x2d4>
   2e4b4:	ldrb	r1, [r3], #1
   2e4b8:	cmp	r1, #32
   2e4bc:	bne	2e93c <flatcc_json_parser_space_ext@@Base+0x750>
   2e4c0:	cmp	r4, r3
   2e4c4:	mov	r9, r3
   2e4c8:	bne	2e4b4 <flatcc_json_parser_space_ext@@Base+0x2c8>
   2e4cc:	cmp	r7, #0
   2e4d0:	beq	2e750 <flatcc_json_parser_space_ext@@Base+0x564>
   2e4d4:	mov	r6, #0
   2e4d8:	add	sl, sp, #20
   2e4dc:	mov	r1, r8
   2e4e0:	ldr	r0, [r5]
   2e4e4:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   2e4e8:	ldrb	r3, [r0, r6]
   2e4ec:	mov	r1, r9
   2e4f0:	mov	r2, r4
   2e4f4:	mov	r0, r5
   2e4f8:	str	sl, [sp]
   2e4fc:	ldr	ip, [sp, #72]	; 0x48
   2e500:	blx	ip
   2e504:	cmp	r4, r0
   2e508:	mov	fp, r0
   2e50c:	beq	2e39c <flatcc_json_parser_space_ext@@Base+0x1b0>
   2e510:	mov	r1, #1
   2e514:	ldr	r0, [r5]
   2e518:	bl	26f6c <flatcc_builder_extend_offset_vector@@Base>
   2e51c:	cmp	r0, #0
   2e520:	beq	2ea88 <flatcc_json_parser_space_ext@@Base+0x89c>
   2e524:	ldr	r2, [sp, #20]
   2e528:	sub	r1, r4, fp
   2e52c:	cmp	r1, #1
   2e530:	str	r2, [r0]
   2e534:	ble	2e548 <flatcc_json_parser_space_ext@@Base+0x35c>
   2e538:	ldrb	r2, [fp]
   2e53c:	cmp	r2, #32
   2e540:	bhi	2e568 <flatcc_json_parser_space_ext@@Base+0x37c>
   2e544:	beq	2e5e4 <flatcc_json_parser_space_ext@@Base+0x3f8>
   2e548:	mov	r1, fp
   2e54c:	mov	r2, r4
   2e550:	mov	r0, r5
   2e554:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   2e558:	mov	fp, r0
   2e55c:	cmp	r4, fp
   2e560:	beq	2e5a8 <flatcc_json_parser_space_ext@@Base+0x3bc>
   2e564:	ldrb	r2, [fp]
   2e568:	cmp	r2, #44	; 0x2c
   2e56c:	beq	2e5f8 <flatcc_json_parser_space_ext@@Base+0x40c>
   2e570:	cmp	r2, #93	; 0x5d
   2e574:	add	r6, r6, #1
   2e578:	beq	2e7c8 <flatcc_json_parser_space_ext@@Base+0x5dc>
   2e57c:	ldr	r2, [r5, #24]
   2e580:	cmp	r2, #0
   2e584:	bne	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e588:	ldr	r2, [r5, #4]
   2e58c:	mov	r1, #9
   2e590:	sub	r3, fp, r2
   2e594:	str	r1, [r5, #24]
   2e598:	add	r3, r3, #1
   2e59c:	str	r3, [r5, #20]
   2e5a0:	str	fp, [r5, #36]	; 0x24
   2e5a4:	b	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e5a8:	add	r6, r6, #1
   2e5ac:	cmp	r7, r6
   2e5b0:	beq	2ed28 <flatcc_json_parser_space_ext@@Base+0xb3c>
   2e5b4:	ldr	r2, [r5, #24]
   2e5b8:	cmp	r2, #0
   2e5bc:	bne	2e398 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2e5c0:	ldr	r2, [r5, #4]
   2e5c4:	mov	r1, #30
   2e5c8:	str	r1, [r5, #24]
   2e5cc:	str	fp, [r5, #36]	; 0x24
   2e5d0:	sub	r2, fp, r2
   2e5d4:	mov	fp, r4
   2e5d8:	add	r2, r2, #1
   2e5dc:	str	r2, [r5, #20]
   2e5e0:	b	2e39c <flatcc_json_parser_space_ext@@Base+0x1b0>
   2e5e4:	ldrb	r2, [fp, #1]
   2e5e8:	cmp	r2, #32
   2e5ec:	addhi	fp, fp, #1
   2e5f0:	bls	2e548 <flatcc_json_parser_space_ext@@Base+0x35c>
   2e5f4:	b	2e55c <flatcc_json_parser_space_ext@@Base+0x370>
   2e5f8:	add	r9, fp, #1
   2e5fc:	sub	r1, r4, r9
   2e600:	cmp	r1, #1
   2e604:	ble	2e618 <flatcc_json_parser_space_ext@@Base+0x42c>
   2e608:	ldrb	r1, [fp, #1]
   2e60c:	cmp	r1, #32
   2e610:	bhi	2e930 <flatcc_json_parser_space_ext@@Base+0x744>
   2e614:	beq	2e920 <flatcc_json_parser_space_ext@@Base+0x734>
   2e618:	cmp	r4, r9
   2e61c:	beq	2e64c <flatcc_json_parser_space_ext@@Base+0x460>
   2e620:	ldrb	r1, [r9]
   2e624:	cmp	r1, #32
   2e628:	bne	2e680 <flatcc_json_parser_space_ext@@Base+0x494>
   2e62c:	add	r3, r9, #1
   2e630:	b	2e640 <flatcc_json_parser_space_ext@@Base+0x454>
   2e634:	ldrb	r1, [r3], #1
   2e638:	cmp	r1, #32
   2e63c:	bne	2e680 <flatcc_json_parser_space_ext@@Base+0x494>
   2e640:	cmp	r4, r3
   2e644:	mov	r9, r3
   2e648:	bne	2e634 <flatcc_json_parser_space_ext@@Base+0x448>
   2e64c:	ldr	r3, [r5, #24]
   2e650:	add	r6, r6, #1
   2e654:	mov	r1, r6
   2e658:	cmp	r3, #0
   2e65c:	bne	2e7c0 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2e660:	ldr	r3, [r5, #4]
   2e664:	mov	r1, #9
   2e668:	str	r1, [r5, #24]
   2e66c:	str	r9, [r5, #36]	; 0x24
   2e670:	sub	r3, r9, r3
   2e674:	add	r3, r3, #1
   2e678:	str	r3, [r5, #20]
   2e67c:	b	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e680:	cmp	r1, #32
   2e684:	bhi	2e73c <flatcc_json_parser_space_ext@@Base+0x550>
   2e688:	sub	r1, r1, #9
   2e68c:	cmp	r1, #23
   2e690:	ldrls	pc, [pc, r1, lsl #2]
   2e694:	b	2e790 <flatcc_json_parser_space_ext@@Base+0x5a4>
   2e698:	andeq	lr, r2, r8, lsl #15
   2e69c:	andeq	lr, r2, r0, lsl #15
   2e6a0:	muleq	r2, r0, r7
   2e6a4:	muleq	r2, r0, r7
   2e6a8:	strdeq	lr, [r2], -r8
   2e6ac:	muleq	r2, r0, r7
   2e6b0:	muleq	r2, r0, r7
   2e6b4:	muleq	r2, r0, r7
   2e6b8:	muleq	r2, r0, r7
   2e6bc:	muleq	r2, r0, r7
   2e6c0:	muleq	r2, r0, r7
   2e6c4:	muleq	r2, r0, r7
   2e6c8:	muleq	r2, r0, r7
   2e6cc:	muleq	r2, r0, r7
   2e6d0:	muleq	r2, r0, r7
   2e6d4:	muleq	r2, r0, r7
   2e6d8:	muleq	r2, r0, r7
   2e6dc:	muleq	r2, r0, r7
   2e6e0:	muleq	r2, r0, r7
   2e6e4:	muleq	r2, r0, r7
   2e6e8:	muleq	r2, r0, r7
   2e6ec:	muleq	r2, r0, r7
   2e6f0:	muleq	r2, r0, r7
   2e6f4:	andeq	lr, r2, r8, lsl r6
   2e6f8:	sub	r3, r4, r9
   2e6fc:	add	r1, r9, #1
   2e700:	cmp	r3, #1
   2e704:	ble	2e714 <flatcc_json_parser_space_ext@@Base+0x528>
   2e708:	ldrb	r3, [r9, #1]
   2e70c:	cmp	r3, #10
   2e710:	addeq	r1, r9, #2
   2e714:	mov	r9, r1
   2e718:	ldr	r3, [r5, #16]
   2e71c:	str	r9, [r5, #4]
   2e720:	add	r3, r3, #1
   2e724:	str	r3, [r5, #16]
   2e728:	cmp	r4, r9
   2e72c:	beq	2e64c <flatcc_json_parser_space_ext@@Base+0x460>
   2e730:	ldrb	r1, [r9]
   2e734:	cmp	r1, #32
   2e738:	bls	2e688 <flatcc_json_parser_space_ext@@Base+0x49c>
   2e73c:	cmp	r1, #93	; 0x5d
   2e740:	add	r6, r6, #1
   2e744:	beq	2eac0 <flatcc_json_parser_space_ext@@Base+0x8d4>
   2e748:	cmp	r7, r6
   2e74c:	bne	2e4dc <flatcc_json_parser_space_ext@@Base+0x2f0>
   2e750:	ldr	r3, [r5, #24]
   2e754:	cmp	r3, #0
   2e758:	bne	2e398 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2e75c:	ldr	r1, [r5, #4]
   2e760:	mov	r0, #30
   2e764:	mov	fp, r4
   2e768:	str	r0, [r5, #24]
   2e76c:	str	r9, [r5, #36]	; 0x24
   2e770:	sub	r2, r9, r1
   2e774:	add	r2, r2, #1
   2e778:	str	r2, [r5, #20]
   2e77c:	b	2e39c <flatcc_json_parser_space_ext@@Base+0x1b0>
   2e780:	add	r9, r9, #1
   2e784:	b	2e718 <flatcc_json_parser_space_ext@@Base+0x52c>
   2e788:	add	r9, r9, #1
   2e78c:	b	2e728 <flatcc_json_parser_space_ext@@Base+0x53c>
   2e790:	ldr	r3, [r5, #24]
   2e794:	cmp	r3, #0
   2e798:	addne	r1, r6, #1
   2e79c:	bne	2e7c0 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2e7a0:	ldr	r3, [r5, #4]
   2e7a4:	mov	r0, #5
   2e7a8:	add	r1, r6, #1
   2e7ac:	str	r0, [r5, #24]
   2e7b0:	str	r9, [r5, #36]	; 0x24
   2e7b4:	sub	r2, r9, r3
   2e7b8:	add	r2, r2, #1
   2e7bc:	str	r2, [r5, #20]
   2e7c0:	mov	r6, r1
   2e7c4:	b	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e7c8:	add	r1, fp, #1
   2e7cc:	sub	r2, r4, r1
   2e7d0:	cmp	r2, #1
   2e7d4:	ble	2e7e8 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2e7d8:	ldrb	r2, [fp, #1]
   2e7dc:	cmp	r2, #32
   2e7e0:	bhi	2e81c <flatcc_json_parser_space_ext@@Base+0x630>
   2e7e4:	beq	2ea90 <flatcc_json_parser_space_ext@@Base+0x8a4>
   2e7e8:	cmp	r4, r1
   2e7ec:	beq	2e81c <flatcc_json_parser_space_ext@@Base+0x630>
   2e7f0:	ldrb	r2, [r1]
   2e7f4:	cmp	r2, #32
   2e7f8:	bne	2e824 <flatcc_json_parser_space_ext@@Base+0x638>
   2e7fc:	add	r3, r1, #1
   2e800:	b	2e810 <flatcc_json_parser_space_ext@@Base+0x624>
   2e804:	ldrb	r2, [r3], #1
   2e808:	cmp	r2, #32
   2e80c:	bne	2e824 <flatcc_json_parser_space_ext@@Base+0x638>
   2e810:	cmp	r3, r4
   2e814:	mov	r1, r3
   2e818:	bne	2e804 <flatcc_json_parser_space_ext@@Base+0x618>
   2e81c:	mov	fp, r1
   2e820:	b	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2e824:	cmp	r2, #32
   2e828:	bhi	2e81c <flatcc_json_parser_space_ext@@Base+0x630>
   2e82c:	sub	r2, r2, #9
   2e830:	cmp	r2, #23
   2e834:	ldrls	pc, [pc, r2, lsl #2]
   2e838:	b	2e8f4 <flatcc_json_parser_space_ext@@Base+0x708>
   2e83c:	andeq	lr, r2, ip, ror #17
   2e840:	andeq	lr, r2, r4, ror #17
   2e844:	strdeq	lr, [r2], -r4
   2e848:	strdeq	lr, [r2], -r4
   2e84c:	muleq	r2, ip, r8
   2e850:	strdeq	lr, [r2], -r4
   2e854:	strdeq	lr, [r2], -r4
   2e858:	strdeq	lr, [r2], -r4
   2e85c:	strdeq	lr, [r2], -r4
   2e860:	strdeq	lr, [r2], -r4
   2e864:	strdeq	lr, [r2], -r4
   2e868:	strdeq	lr, [r2], -r4
   2e86c:	strdeq	lr, [r2], -r4
   2e870:	strdeq	lr, [r2], -r4
   2e874:	strdeq	lr, [r2], -r4
   2e878:	strdeq	lr, [r2], -r4
   2e87c:	strdeq	lr, [r2], -r4
   2e880:	strdeq	lr, [r2], -r4
   2e884:	strdeq	lr, [r2], -r4
   2e888:	strdeq	lr, [r2], -r4
   2e88c:	strdeq	lr, [r2], -r4
   2e890:	strdeq	lr, [r2], -r4
   2e894:	strdeq	lr, [r2], -r4
   2e898:	andeq	lr, r2, r8, ror #15
   2e89c:	sub	r3, r4, r1
   2e8a0:	add	r2, r1, #1
   2e8a4:	cmp	r3, #1
   2e8a8:	ble	2e8b8 <flatcc_json_parser_space_ext@@Base+0x6cc>
   2e8ac:	ldrb	r3, [r1, #1]
   2e8b0:	cmp	r3, #10
   2e8b4:	addeq	r2, r1, #2
   2e8b8:	mov	r1, r2
   2e8bc:	ldr	r3, [r5, #16]
   2e8c0:	str	r1, [r5, #4]
   2e8c4:	add	r3, r3, #1
   2e8c8:	str	r3, [r5, #16]
   2e8cc:	cmp	r4, r1
   2e8d0:	beq	2ec28 <flatcc_json_parser_space_ext@@Base+0xa3c>
   2e8d4:	ldrb	r2, [r1]
   2e8d8:	cmp	r2, #32
   2e8dc:	bls	2e82c <flatcc_json_parser_space_ext@@Base+0x640>
   2e8e0:	b	2e81c <flatcc_json_parser_space_ext@@Base+0x630>
   2e8e4:	add	r1, r1, #1
   2e8e8:	b	2e8bc <flatcc_json_parser_space_ext@@Base+0x6d0>
   2e8ec:	add	r1, r1, #1
   2e8f0:	b	2e8cc <flatcc_json_parser_space_ext@@Base+0x6e0>
   2e8f4:	ldr	r3, [r5, #24]
   2e8f8:	cmp	r3, #0
   2e8fc:	bne	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e900:	ldr	r3, [r5, #4]
   2e904:	mov	r2, #5
   2e908:	str	r1, [r5, #36]	; 0x24
   2e90c:	str	r2, [r5, #24]
   2e910:	sub	r1, r1, r3
   2e914:	add	r1, r1, #1
   2e918:	str	r1, [r5, #20]
   2e91c:	b	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2e920:	ldrb	r1, [fp, #2]
   2e924:	cmp	r1, #32
   2e928:	addhi	r9, fp, #2
   2e92c:	bls	2e618 <flatcc_json_parser_space_ext@@Base+0x42c>
   2e930:	cmp	r4, r9
   2e934:	bne	2e73c <flatcc_json_parser_space_ext@@Base+0x550>
   2e938:	b	2e64c <flatcc_json_parser_space_ext@@Base+0x460>
   2e93c:	cmp	r1, #32
   2e940:	bhi	2ea00 <flatcc_json_parser_space_ext@@Base+0x814>
   2e944:	sub	r1, r1, #9
   2e948:	cmp	r1, #23
   2e94c:	ldrls	pc, [pc, r1, lsl #2]
   2e950:	b	2ea6c <flatcc_json_parser_space_ext@@Base+0x880>
   2e954:	andeq	lr, r2, r4, ror #20
   2e958:	ldrdeq	lr, [r2], -r8
   2e95c:	andeq	lr, r2, ip, ror #20
   2e960:	andeq	lr, r2, ip, ror #20
   2e964:			; <UNDEFINED> instruction: 0x0002e9b4
   2e968:	andeq	lr, r2, ip, ror #20
   2e96c:	andeq	lr, r2, ip, ror #20
   2e970:	andeq	lr, r2, ip, ror #20
   2e974:	andeq	lr, r2, ip, ror #20
   2e978:	andeq	lr, r2, ip, ror #20
   2e97c:	andeq	lr, r2, ip, ror #20
   2e980:	andeq	lr, r2, ip, ror #20
   2e984:	andeq	lr, r2, ip, ror #20
   2e988:	andeq	lr, r2, ip, ror #20
   2e98c:	andeq	lr, r2, ip, ror #20
   2e990:	andeq	lr, r2, ip, ror #20
   2e994:	andeq	lr, r2, ip, ror #20
   2e998:	andeq	lr, r2, ip, ror #20
   2e99c:	andeq	lr, r2, ip, ror #20
   2e9a0:	andeq	lr, r2, ip, ror #20
   2e9a4:	andeq	lr, r2, ip, ror #20
   2e9a8:	andeq	lr, r2, ip, ror #20
   2e9ac:	andeq	lr, r2, ip, ror #20
   2e9b0:	muleq	r2, r8, r4
   2e9b4:	sub	r3, r4, r9
   2e9b8:	add	r1, r9, #1
   2e9bc:	cmp	r3, #1
   2e9c0:	ble	2e9d0 <flatcc_json_parser_space_ext@@Base+0x7e4>
   2e9c4:	ldrb	r3, [r9, #1]
   2e9c8:	cmp	r3, #10
   2e9cc:	addeq	r1, r9, #2
   2e9d0:	mov	r9, r1
   2e9d4:	b	2e9dc <flatcc_json_parser_space_ext@@Base+0x7f0>
   2e9d8:	add	r9, r9, #1
   2e9dc:	ldr	r3, [r5, #16]
   2e9e0:	str	r9, [r5, #4]
   2e9e4:	add	r3, r3, #1
   2e9e8:	str	r3, [r5, #16]
   2e9ec:	cmp	r4, r9
   2e9f0:	beq	2e4cc <flatcc_json_parser_space_ext@@Base+0x2e0>
   2e9f4:	ldrb	r1, [r9]
   2e9f8:	cmp	r1, #32
   2e9fc:	bls	2e944 <flatcc_json_parser_space_ext@@Base+0x758>
   2ea00:	cmp	r1, #93	; 0x5d
   2ea04:	bne	2e4cc <flatcc_json_parser_space_ext@@Base+0x2e0>
   2ea08:	add	fp, r9, #1
   2ea0c:	sub	r1, r4, fp
   2ea10:	cmp	r1, #1
   2ea14:	ble	2ea28 <flatcc_json_parser_space_ext@@Base+0x83c>
   2ea18:	ldrb	r1, [r9, #1]
   2ea1c:	cmp	r1, #32
   2ea20:	bhi	2ea5c <flatcc_json_parser_space_ext@@Base+0x870>
   2ea24:	beq	2ed10 <flatcc_json_parser_space_ext@@Base+0xb24>
   2ea28:	cmp	r4, fp
   2ea2c:	beq	2ea5c <flatcc_json_parser_space_ext@@Base+0x870>
   2ea30:	ldrb	r1, [fp]
   2ea34:	cmp	r1, #32
   2ea38:	bne	2ec30 <flatcc_json_parser_space_ext@@Base+0xa44>
   2ea3c:	add	r2, fp, #1
   2ea40:	b	2ea50 <flatcc_json_parser_space_ext@@Base+0x864>
   2ea44:	ldrb	r1, [r2], #1
   2ea48:	cmp	r1, #32
   2ea4c:	bne	2ec30 <flatcc_json_parser_space_ext@@Base+0xa44>
   2ea50:	cmp	r2, r4
   2ea54:	mov	fp, r2
   2ea58:	bne	2ea44 <flatcc_json_parser_space_ext@@Base+0x858>
   2ea5c:	mov	r6, #0
   2ea60:	b	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2ea64:	add	r9, r9, #1
   2ea68:	b	2e9ec <flatcc_json_parser_space_ext@@Base+0x800>
   2ea6c:	ldr	r3, [r5, #24]
   2ea70:	cmp	r3, #0
   2ea74:	beq	2ebf0 <flatcc_json_parser_space_ext@@Base+0xa04>
   2ea78:	cmp	r7, #0
   2ea7c:	beq	2e398 <flatcc_json_parser_space_ext@@Base+0x1ac>
   2ea80:	mov	r9, r4
   2ea84:	b	2e4d4 <flatcc_json_parser_space_ext@@Base+0x2e8>
   2ea88:	mov	sl, fp
   2ea8c:	b	2e38c <flatcc_json_parser_space_ext@@Base+0x1a0>
   2ea90:	ldrb	r2, [fp, #2]
   2ea94:	cmp	r2, #32
   2ea98:	addhi	fp, fp, #2
   2ea9c:	bls	2e7e8 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2eaa0:	b	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2eaa4:	ldrb	r1, [sl, #2]
   2eaa8:	cmp	r1, #32
   2eaac:	addhi	r9, sl, #2
   2eab0:	bls	2e498 <flatcc_json_parser_space_ext@@Base+0x2ac>
   2eab4:	cmp	r4, r9
   2eab8:	bne	2ea00 <flatcc_json_parser_space_ext@@Base+0x814>
   2eabc:	b	2e4cc <flatcc_json_parser_space_ext@@Base+0x2e0>
   2eac0:	add	fp, r9, #1
   2eac4:	sub	r1, r4, fp
   2eac8:	cmp	r1, #1
   2eacc:	ble	2eaf0 <flatcc_json_parser_space_ext@@Base+0x904>
   2ead0:	ldrb	r1, [r9, #1]
   2ead4:	cmp	r1, #32
   2ead8:	bhi	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2eadc:	bne	2eaf0 <flatcc_json_parser_space_ext@@Base+0x904>
   2eae0:	ldrb	r1, [r9, #2]
   2eae4:	cmp	r1, #32
   2eae8:	addhi	fp, r9, #2
   2eaec:	bhi	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2eaf0:	cmp	r4, fp
   2eaf4:	beq	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2eaf8:	ldrb	r1, [fp]
   2eafc:	cmp	r1, #32
   2eb00:	bne	2eb20 <flatcc_json_parser_space_ext@@Base+0x934>
   2eb04:	add	r2, fp, #1
   2eb08:	cmp	r2, r4
   2eb0c:	mov	fp, r2
   2eb10:	beq	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2eb14:	ldrb	r1, [r2], #1
   2eb18:	cmp	r1, #32
   2eb1c:	beq	2eb08 <flatcc_json_parser_space_ext@@Base+0x91c>
   2eb20:	cmp	r1, #32
   2eb24:	bhi	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2eb28:	sub	r1, r1, #9
   2eb2c:	cmp	r1, #23
   2eb30:	ldrls	pc, [pc, r1, lsl #2]
   2eb34:	b	2ec10 <flatcc_json_parser_space_ext@@Base+0xa24>
   2eb38:	andeq	lr, r2, r8, ror #23
   2eb3c:	andeq	lr, r2, r0, ror #23
   2eb40:	andeq	lr, r2, r0, lsl ip
   2eb44:	andeq	lr, r2, r0, lsl ip
   2eb48:	muleq	r2, r8, fp
   2eb4c:	andeq	lr, r2, r0, lsl ip
   2eb50:	andeq	lr, r2, r0, lsl ip
   2eb54:	andeq	lr, r2, r0, lsl ip
   2eb58:	andeq	lr, r2, r0, lsl ip
   2eb5c:	andeq	lr, r2, r0, lsl ip
   2eb60:	andeq	lr, r2, r0, lsl ip
   2eb64:	andeq	lr, r2, r0, lsl ip
   2eb68:	andeq	lr, r2, r0, lsl ip
   2eb6c:	andeq	lr, r2, r0, lsl ip
   2eb70:	andeq	lr, r2, r0, lsl ip
   2eb74:	andeq	lr, r2, r0, lsl ip
   2eb78:	andeq	lr, r2, r0, lsl ip
   2eb7c:	andeq	lr, r2, r0, lsl ip
   2eb80:	andeq	lr, r2, r0, lsl ip
   2eb84:	andeq	lr, r2, r0, lsl ip
   2eb88:	andeq	lr, r2, r0, lsl ip
   2eb8c:	andeq	lr, r2, r0, lsl ip
   2eb90:	andeq	lr, r2, r0, lsl ip
   2eb94:	strdeq	lr, [r2], -r0
   2eb98:	sub	r2, r4, fp
   2eb9c:	add	r1, fp, #1
   2eba0:	cmp	r2, #1
   2eba4:	ble	2ebb4 <flatcc_json_parser_space_ext@@Base+0x9c8>
   2eba8:	ldrb	r2, [fp, #1]
   2ebac:	cmp	r2, #10
   2ebb0:	addeq	r1, fp, #2
   2ebb4:	mov	fp, r1
   2ebb8:	ldr	r2, [r5, #16]
   2ebbc:	str	fp, [r5, #4]
   2ebc0:	add	r2, r2, #1
   2ebc4:	str	r2, [r5, #16]
   2ebc8:	cmp	r4, fp
   2ebcc:	beq	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2ebd0:	ldrb	r1, [fp]
   2ebd4:	cmp	r1, #32
   2ebd8:	bls	2eb28 <flatcc_json_parser_space_ext@@Base+0x93c>
   2ebdc:	b	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2ebe0:	add	fp, fp, #1
   2ebe4:	b	2ebb8 <flatcc_json_parser_space_ext@@Base+0x9cc>
   2ebe8:	add	fp, fp, #1
   2ebec:	b	2ebc8 <flatcc_json_parser_space_ext@@Base+0x9dc>
   2ebf0:	ldr	r3, [r5, #4]
   2ebf4:	mov	r1, #5
   2ebf8:	str	r1, [r5, #24]
   2ebfc:	str	r9, [r5, #36]	; 0x24
   2ec00:	sub	r3, r9, r3
   2ec04:	add	r3, r3, #1
   2ec08:	str	r3, [r5, #20]
   2ec0c:	b	2ea78 <flatcc_json_parser_space_ext@@Base+0x88c>
   2ec10:	ldr	r2, [r5, #24]
   2ec14:	cmp	r2, #0
   2ec18:	bne	2e404 <flatcc_json_parser_space_ext@@Base+0x218>
   2ec1c:	mov	r1, #5
   2ec20:	ldr	r2, [r5, #4]
   2ec24:	b	2e590 <flatcc_json_parser_space_ext@@Base+0x3a4>
   2ec28:	mov	fp, r4
   2ec2c:	b	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2ec30:	cmp	r1, #32
   2ec34:	bhi	2ea5c <flatcc_json_parser_space_ext@@Base+0x870>
   2ec38:	sub	r1, r1, #9
   2ec3c:	cmp	r1, #23
   2ec40:	ldrls	pc, [pc, r1, lsl #2]
   2ec44:	b	2ed00 <flatcc_json_parser_space_ext@@Base+0xb14>
   2ec48:	strdeq	lr, [r2], -r8
   2ec4c:	strdeq	lr, [r2], -r0
   2ec50:	andeq	lr, r2, r0, lsl #26
   2ec54:	andeq	lr, r2, r0, lsl #26
   2ec58:	andeq	lr, r2, r8, lsr #25
   2ec5c:	andeq	lr, r2, r0, lsl #26
   2ec60:	andeq	lr, r2, r0, lsl #26
   2ec64:	andeq	lr, r2, r0, lsl #26
   2ec68:	andeq	lr, r2, r0, lsl #26
   2ec6c:	andeq	lr, r2, r0, lsl #26
   2ec70:	andeq	lr, r2, r0, lsl #26
   2ec74:	andeq	lr, r2, r0, lsl #26
   2ec78:	andeq	lr, r2, r0, lsl #26
   2ec7c:	andeq	lr, r2, r0, lsl #26
   2ec80:	andeq	lr, r2, r0, lsl #26
   2ec84:	andeq	lr, r2, r0, lsl #26
   2ec88:	andeq	lr, r2, r0, lsl #26
   2ec8c:	andeq	lr, r2, r0, lsl #26
   2ec90:	andeq	lr, r2, r0, lsl #26
   2ec94:	andeq	lr, r2, r0, lsl #26
   2ec98:	andeq	lr, r2, r0, lsl #26
   2ec9c:	andeq	lr, r2, r0, lsl #26
   2eca0:	andeq	lr, r2, r0, lsl #26
   2eca4:	andeq	lr, r2, r8, lsr #20
   2eca8:	sub	r2, r4, fp
   2ecac:	add	r1, fp, #1
   2ecb0:	cmp	r2, #1
   2ecb4:	ble	2ecc4 <flatcc_json_parser_space_ext@@Base+0xad8>
   2ecb8:	ldrb	r2, [fp, #1]
   2ecbc:	cmp	r2, #10
   2ecc0:	addeq	r1, fp, #2
   2ecc4:	mov	fp, r1
   2ecc8:	ldr	r2, [r5, #16]
   2eccc:	str	fp, [r5, #4]
   2ecd0:	add	r2, r2, #1
   2ecd4:	str	r2, [r5, #16]
   2ecd8:	cmp	r4, fp
   2ecdc:	beq	2ea5c <flatcc_json_parser_space_ext@@Base+0x870>
   2ece0:	ldrb	r1, [fp]
   2ece4:	cmp	r1, #32
   2ece8:	bls	2ec38 <flatcc_json_parser_space_ext@@Base+0xa4c>
   2ecec:	b	2ea5c <flatcc_json_parser_space_ext@@Base+0x870>
   2ecf0:	add	fp, fp, #1
   2ecf4:	b	2ecc8 <flatcc_json_parser_space_ext@@Base+0xadc>
   2ecf8:	add	fp, fp, #1
   2ecfc:	b	2ecd8 <flatcc_json_parser_space_ext@@Base+0xaec>
   2ed00:	ldr	r6, [r5, #24]
   2ed04:	cmp	r6, #0
   2ed08:	bne	2e400 <flatcc_json_parser_space_ext@@Base+0x214>
   2ed0c:	b	2ec1c <flatcc_json_parser_space_ext@@Base+0xa30>
   2ed10:	ldrb	r1, [r9, #2]
   2ed14:	cmp	r1, #32
   2ed18:	addhi	fp, r9, #2
   2ed1c:	movhi	r6, #0
   2ed20:	bls	2ea28 <flatcc_json_parser_space_ext@@Base+0x83c>
   2ed24:	b	2e5ac <flatcc_json_parser_space_ext@@Base+0x3c0>
   2ed28:	mov	sl, fp
   2ed2c:	b	2e410 <flatcc_json_parser_space_ext@@Base+0x224>

0002ed30 <flatcc_json_parser_string_escape@@Base>:
   2ed30:	sub	ip, r2, r1
   2ed34:	strd	r4, [sp, #-12]!
   2ed38:	cmp	ip, #1
   2ed3c:	str	lr, [sp, #8]
   2ed40:	ble	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2ed44:	ldrb	lr, [r1]
   2ed48:	cmp	lr, #92	; 0x5c
   2ed4c:	beq	2ed90 <flatcc_json_parser_string_escape@@Base+0x60>
   2ed50:	mov	ip, #0
   2ed54:	strb	ip, [r3]
   2ed58:	ldr	r3, [r0, #24]
   2ed5c:	cmp	r3, ip
   2ed60:	bne	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2ed64:	ldr	r3, [r0, #4]
   2ed68:	mov	ip, #18
   2ed6c:	str	ip, [r0, #24]
   2ed70:	str	r1, [r0, #36]	; 0x24
   2ed74:	sub	r3, r1, r3
   2ed78:	add	r3, r3, #1
   2ed7c:	str	r3, [r0, #20]
   2ed80:	ldrd	r4, [sp]
   2ed84:	add	sp, sp, #8
   2ed88:	mov	r0, r2
   2ed8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ed90:	ldrb	lr, [r1, #1]
   2ed94:	sub	lr, lr, #34	; 0x22
   2ed98:	cmp	lr, #86	; 0x56
   2ed9c:	ldrls	pc, [pc, lr, lsl #2]
   2eda0:	b	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2eda4:	andeq	lr, r2, r8, lsl #31
   2eda8:	andeq	lr, r2, r0, asr sp
   2edac:	andeq	lr, r2, r0, asr sp
   2edb0:	andeq	lr, r2, r0, asr sp
   2edb4:	andeq	lr, r2, r0, asr sp
   2edb8:	andeq	lr, r2, r0, asr sp
   2edbc:	andeq	lr, r2, r0, asr sp
   2edc0:	andeq	lr, r2, r0, asr sp
   2edc4:	andeq	lr, r2, r0, asr sp
   2edc8:	andeq	lr, r2, r0, asr sp
   2edcc:	andeq	lr, r2, r0, asr sp
   2edd0:	andeq	lr, r2, r0, asr sp
   2edd4:	andeq	lr, r2, r0, asr sp
   2edd8:	andeq	lr, r2, r0, lsr #31
   2eddc:	andeq	lr, r2, r0, asr sp
   2ede0:	andeq	lr, r2, r0, asr sp
   2ede4:	andeq	lr, r2, r0, asr sp
   2ede8:	andeq	lr, r2, r0, asr sp
   2edec:	andeq	lr, r2, r0, asr sp
   2edf0:	andeq	lr, r2, r0, asr sp
   2edf4:	andeq	lr, r2, r0, asr sp
   2edf8:	andeq	lr, r2, r0, asr sp
   2edfc:	andeq	lr, r2, r0, asr sp
   2ee00:	andeq	lr, r2, r0, asr sp
   2ee04:	andeq	lr, r2, r0, asr sp
   2ee08:	andeq	lr, r2, r0, asr sp
   2ee0c:	andeq	lr, r2, r0, asr sp
   2ee10:	andeq	lr, r2, r0, asr sp
   2ee14:	andeq	lr, r2, r0, asr sp
   2ee18:	andeq	lr, r2, r0, asr sp
   2ee1c:	andeq	lr, r2, r0, asr sp
   2ee20:	andeq	lr, r2, r0, asr sp
   2ee24:	andeq	lr, r2, r0, asr sp
   2ee28:	andeq	lr, r2, r0, asr sp
   2ee2c:	andeq	lr, r2, r0, asr sp
   2ee30:	andeq	lr, r2, r0, asr sp
   2ee34:	andeq	lr, r2, r0, asr sp
   2ee38:	andeq	lr, r2, r0, asr sp
   2ee3c:	andeq	lr, r2, r0, asr sp
   2ee40:	andeq	lr, r2, r0, asr sp
   2ee44:	andeq	lr, r2, r0, asr sp
   2ee48:	andeq	lr, r2, r0, asr sp
   2ee4c:	andeq	lr, r2, r0, asr sp
   2ee50:	andeq	lr, r2, r0, asr sp
   2ee54:	andeq	lr, r2, r0, asr sp
   2ee58:	andeq	lr, r2, r0, asr sp
   2ee5c:	andeq	lr, r2, r0, asr sp
   2ee60:	andeq	lr, r2, r0, asr sp
   2ee64:	andeq	lr, r2, r0, asr sp
   2ee68:	andeq	lr, r2, r0, asr sp
   2ee6c:	andeq	lr, r2, r0, asr sp
   2ee70:	andeq	lr, r2, r0, asr sp
   2ee74:	andeq	lr, r2, r0, asr sp
   2ee78:	andeq	lr, r2, r0, asr sp
   2ee7c:	andeq	lr, r2, r0, asr sp
   2ee80:	andeq	lr, r2, r0, asr sp
   2ee84:	andeq	lr, r2, r0, asr sp
   2ee88:	andeq	lr, r2, r0, asr sp
   2ee8c:			; <UNDEFINED> instruction: 0x0002efb8
   2ee90:	andeq	lr, r2, r0, asr sp
   2ee94:	andeq	lr, r2, r0, asr sp
   2ee98:	andeq	lr, r2, r0, asr sp
   2ee9c:	andeq	lr, r2, r0, asr sp
   2eea0:	andeq	lr, r2, r0, asr sp
   2eea4:	ldrdeq	lr, [r2], -r0
   2eea8:	andeq	lr, r2, r0, asr sp
   2eeac:	andeq	lr, r2, r0, asr sp
   2eeb0:	andeq	lr, r2, r0, asr sp
   2eeb4:	andeq	lr, r2, r8, ror #31
   2eeb8:	andeq	lr, r2, r0, asr sp
   2eebc:	andeq	lr, r2, r0, asr sp
   2eec0:	andeq	lr, r2, r0, asr sp
   2eec4:	andeq	lr, r2, r0, asr sp
   2eec8:	andeq	lr, r2, r0, asr sp
   2eecc:	andeq	lr, r2, r0, asr sp
   2eed0:	andeq	lr, r2, r0, asr sp
   2eed4:	andeq	pc, r2, r0
   2eed8:	andeq	lr, r2, r0, asr sp
   2eedc:	andeq	lr, r2, r0, asr sp
   2eee0:	andeq	lr, r2, r0, asr sp
   2eee4:	andeq	pc, r2, r8, lsl r0	; <UNPREDICTABLE>
   2eee8:	andeq	lr, r2, r0, asr sp
   2eeec:	andeq	pc, r2, r0, lsr r0	; <UNPREDICTABLE>
   2eef0:	andeq	pc, r2, r8, asr #32
   2eef4:	andeq	lr, r2, r0, asr sp
   2eef8:	andeq	lr, r2, r0, asr sp
   2eefc:	andeq	lr, r2, r0, lsl #30
   2ef00:	mov	lr, #1
   2ef04:	cmp	ip, #3
   2ef08:	strb	lr, [r3]
   2ef0c:	ble	2f118 <flatcc_json_parser_string_escape@@Base+0x3e8>
   2ef10:	ldrb	ip, [r1, #2]
   2ef14:	sub	lr, ip, #48	; 0x30
   2ef18:	uxtb	r4, lr
   2ef1c:	cmp	r4, #9
   2ef20:	lslls	ip, lr, #4
   2ef24:	uxtbls	ip, ip
   2ef28:	bls	2ef48 <flatcc_json_parser_string_escape@@Base+0x218>
   2ef2c:	orr	ip, ip, #32
   2ef30:	sub	lr, ip, #97	; 0x61
   2ef34:	cmp	lr, #5
   2ef38:	bhi	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2ef3c:	sub	ip, ip, #87	; 0x57
   2ef40:	lsl	ip, ip, #4
   2ef44:	uxtb	ip, ip
   2ef48:	ldrb	lr, [r1, #3]
   2ef4c:	sub	r4, lr, #48	; 0x30
   2ef50:	uxtb	r4, r4
   2ef54:	cmp	r4, #9
   2ef58:	orrls	ip, r4, ip
   2ef5c:	bls	2ef7c <flatcc_json_parser_string_escape@@Base+0x24c>
   2ef60:	orr	lr, lr, #32
   2ef64:	sub	r4, lr, #97	; 0x61
   2ef68:	cmp	r4, #5
   2ef6c:	bhi	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2ef70:	sub	lr, lr, #87	; 0x57
   2ef74:	orr	ip, lr, ip
   2ef78:	uxtb	ip, ip
   2ef7c:	add	r2, r1, #4
   2ef80:	strb	ip, [r3, #1]
   2ef84:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2ef88:	mov	ip, #1
   2ef8c:	mov	r0, #34	; 0x22
   2ef90:	add	r2, r1, #2
   2ef94:	strb	ip, [r3]
   2ef98:	strb	r0, [r3, #1]
   2ef9c:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2efa0:	mov	ip, #1
   2efa4:	mov	r0, #47	; 0x2f
   2efa8:	add	r2, r1, #2
   2efac:	strb	ip, [r3]
   2efb0:	strb	r0, [r3, #1]
   2efb4:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2efb8:	mov	ip, #1
   2efbc:	mov	r0, #92	; 0x5c
   2efc0:	add	r2, r1, #2
   2efc4:	strb	ip, [r3]
   2efc8:	strb	r0, [r3, #1]
   2efcc:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2efd0:	mov	ip, #1
   2efd4:	mov	r0, #8
   2efd8:	add	r2, r1, #2
   2efdc:	strb	ip, [r3]
   2efe0:	strb	r0, [r3, #1]
   2efe4:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2efe8:	mov	ip, #1
   2efec:	mov	r0, #12
   2eff0:	add	r2, r1, #2
   2eff4:	strb	ip, [r3]
   2eff8:	strb	r0, [r3, #1]
   2effc:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f000:	mov	ip, #1
   2f004:	mov	r0, #10
   2f008:	add	r2, r1, #2
   2f00c:	strb	ip, [r3]
   2f010:	strb	r0, [r3, #1]
   2f014:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f018:	mov	ip, #1
   2f01c:	mov	r0, #13
   2f020:	add	r2, r1, #2
   2f024:	strb	ip, [r3]
   2f028:	strb	r0, [r3, #1]
   2f02c:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f030:	mov	ip, #1
   2f034:	mov	r0, #9
   2f038:	add	r2, r1, #2
   2f03c:	strb	ip, [r3]
   2f040:	strb	r0, [r3, #1]
   2f044:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f048:	cmp	ip, #5
   2f04c:	ble	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2f050:	ldrb	ip, [r1, #2]
   2f054:	sub	lr, ip, #48	; 0x30
   2f058:	uxtb	r4, lr
   2f05c:	cmp	r4, #9
   2f060:	lslls	ip, lr, #12
   2f064:	uxthls	ip, ip
   2f068:	bls	2f088 <flatcc_json_parser_string_escape@@Base+0x358>
   2f06c:	orr	ip, ip, #32
   2f070:	sub	lr, ip, #97	; 0x61
   2f074:	cmp	lr, #5
   2f078:	bhi	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2f07c:	sub	ip, ip, #87	; 0x57
   2f080:	lsl	ip, ip, #12
   2f084:	and	ip, ip, #61440	; 0xf000
   2f088:	ldrb	lr, [r1, #3]
   2f08c:	sub	r4, lr, #48	; 0x30
   2f090:	uxtb	r5, r4
   2f094:	cmp	r5, #9
   2f098:	bhi	2f14c <flatcc_json_parser_string_escape@@Base+0x41c>
   2f09c:	uxth	r4, r4
   2f0a0:	orr	ip, ip, r4, lsl #8
   2f0a4:	sxth	ip, ip
   2f0a8:	ldrb	lr, [r1, #4]
   2f0ac:	sub	r4, lr, #48	; 0x30
   2f0b0:	uxtb	r5, r4
   2f0b4:	cmp	r5, #9
   2f0b8:	bhi	2f170 <flatcc_json_parser_string_escape@@Base+0x440>
   2f0bc:	orr	ip, ip, r4, lsl #4
   2f0c0:	uxth	ip, ip
   2f0c4:	ldrb	lr, [r1, #5]
   2f0c8:	sub	r4, lr, #48	; 0x30
   2f0cc:	uxtb	r5, r4
   2f0d0:	cmp	r5, #9
   2f0d4:	orrls	r2, ip, r4
   2f0d8:	uxthls	r2, r2
   2f0dc:	bls	2f0fc <flatcc_json_parser_string_escape@@Base+0x3cc>
   2f0e0:	orr	lr, lr, #32
   2f0e4:	sub	r4, lr, #97	; 0x61
   2f0e8:	cmp	r4, #5
   2f0ec:	bhi	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2f0f0:	sub	r2, lr, #87	; 0x57
   2f0f4:	orr	r2, ip, r2
   2f0f8:	uxth	r2, r2
   2f0fc:	cmp	r2, #127	; 0x7f
   2f100:	bhi	2f190 <flatcc_json_parser_string_escape@@Base+0x460>
   2f104:	mov	r0, #1
   2f108:	strb	r0, [r3]
   2f10c:	strb	r2, [r3, #1]
   2f110:	add	r2, r1, #6
   2f114:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f118:	mov	ip, #0
   2f11c:	strb	ip, [r3]
   2f120:	ldr	r3, [r0, #24]
   2f124:	cmp	r3, ip
   2f128:	bne	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f12c:	ldr	r3, [r0, #4]
   2f130:	mov	ip, #18
   2f134:	str	ip, [r0, #24]
   2f138:	str	r1, [r0, #36]	; 0x24
   2f13c:	sub	r3, r1, r3
   2f140:	add	r3, r3, lr
   2f144:	str	r3, [r0, #20]
   2f148:	b	2ed80 <flatcc_json_parser_string_escape@@Base+0x50>
   2f14c:	orr	lr, lr, #32
   2f150:	sub	r4, lr, #97	; 0x61
   2f154:	cmp	r4, #5
   2f158:	bhi	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2f15c:	sub	lr, lr, #87	; 0x57
   2f160:	uxth	lr, lr
   2f164:	orr	ip, ip, lr, lsl #8
   2f168:	sxth	ip, ip
   2f16c:	b	2f0a8 <flatcc_json_parser_string_escape@@Base+0x378>
   2f170:	orr	lr, lr, #32
   2f174:	sub	r4, lr, #97	; 0x61
   2f178:	cmp	r4, #5
   2f17c:	bhi	2ed50 <flatcc_json_parser_string_escape@@Base+0x20>
   2f180:	sub	lr, lr, #87	; 0x57
   2f184:	orr	ip, ip, lr, lsl #4
   2f188:	uxth	ip, ip
   2f18c:	b	2f0c4 <flatcc_json_parser_string_escape@@Base+0x394>
   2f190:	and	r0, r2, #63	; 0x3f
   2f194:	cmp	r2, #2048	; 0x800
   2f198:	lsr	ip, r2, #6
   2f19c:	orr	r0, r0, #128	; 0x80
   2f1a0:	mvn	lr, #127	; 0x7f
   2f1a4:	bcs	2f1c4 <flatcc_json_parser_string_escape@@Base+0x494>
   2f1a8:	mvn	ip, ip, lsl #26
   2f1ac:	mov	r2, #2
   2f1b0:	mvn	ip, ip, lsr #26
   2f1b4:	strb	r2, [r3]
   2f1b8:	strb	r0, [r3, #2]
   2f1bc:	strb	ip, [r3, #1]
   2f1c0:	b	2f110 <flatcc_json_parser_string_escape@@Base+0x3e0>
   2f1c4:	mvn	r4, #31
   2f1c8:	and	ip, ip, #63	; 0x3f
   2f1cc:	strb	r0, [r3, #3]
   2f1d0:	orr	r2, r4, r2, lsr #12
   2f1d4:	orr	ip, lr, ip
   2f1d8:	mov	r0, #3
   2f1dc:	strb	r0, [r3]
   2f1e0:	strb	r2, [r3, #1]
   2f1e4:	strb	ip, [r3, #2]
   2f1e8:	b	2f110 <flatcc_json_parser_string_escape@@Base+0x3e0>

0002f1ec <flatcc_json_parser_skip_constant@@Base>:
   2f1ec:	cmp	r1, r2
   2f1f0:	beq	2f3d0 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   2f1f4:	push	{lr}		; (str lr, [sp, #-4]!)
   2f1f8:	ldrb	r3, [r1]
   2f1fc:	sub	ip, r3, #95	; 0x5f
   2f200:	clz	ip, ip
   2f204:	lsr	ip, ip, #5
   2f208:	orrs	ip, ip, r3, lsr #7
   2f20c:	bne	2f294 <flatcc_json_parser_skip_constant@@Base+0xa8>
   2f210:	sub	ip, r3, #48	; 0x30
   2f214:	cmp	r3, #46	; 0x2e
   2f218:	cmpne	ip, #9
   2f21c:	bls	2f294 <flatcc_json_parser_skip_constant@@Base+0xa8>
   2f220:	orr	ip, r3, #32
   2f224:	sub	ip, ip, #97	; 0x61
   2f228:	cmp	ip, #25
   2f22c:	bls	2f294 <flatcc_json_parser_skip_constant@@Base+0xa8>
   2f230:	sub	ip, r2, r1
   2f234:	cmp	ip, #1
   2f238:	ble	2f248 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2f23c:	cmp	r3, #32
   2f240:	bhi	2f3c0 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   2f244:	beq	2f288 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2f248:	cmp	r2, r1
   2f24c:	beq	2f3c8 <flatcc_json_parser_skip_constant@@Base+0x1dc>
   2f250:	mov	lr, r1
   2f254:	ldrb	r3, [lr]
   2f258:	cmp	r3, #32
   2f25c:	bne	2f2ac <flatcc_json_parser_skip_constant@@Base+0xc0>
   2f260:	add	ip, lr, #1
   2f264:	b	2f274 <flatcc_json_parser_skip_constant@@Base+0x88>
   2f268:	ldrb	r3, [ip], #1
   2f26c:	cmp	r3, #32
   2f270:	bne	2f2ac <flatcc_json_parser_skip_constant@@Base+0xc0>
   2f274:	cmp	r2, ip
   2f278:	mov	lr, ip
   2f27c:	bne	2f268 <flatcc_json_parser_skip_constant@@Base+0x7c>
   2f280:	mov	r2, lr
   2f284:	b	2f3bc <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2f288:	ldrb	r3, [r1, #1]
   2f28c:	cmp	r3, #32
   2f290:	bls	2f248 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2f294:	add	ip, r1, #1
   2f298:	cmp	r2, ip
   2f29c:	beq	2f3bc <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2f2a0:	ldrb	r3, [r1, #1]
   2f2a4:	mov	r1, ip
   2f2a8:	b	2f1fc <flatcc_json_parser_skip_constant@@Base+0x10>
   2f2ac:	cmp	r3, #32
   2f2b0:	bhi	2f374 <flatcc_json_parser_skip_constant@@Base+0x188>
   2f2b4:	sub	r3, r3, #9
   2f2b8:	cmp	r3, #23
   2f2bc:	ldrls	pc, [pc, r3, lsl #2]
   2f2c0:	b	2f394 <flatcc_json_parser_skip_constant@@Base+0x1a8>
   2f2c4:	andeq	pc, r2, ip, lsl #7
   2f2c8:	andeq	pc, r2, r4, lsl #7
   2f2cc:	muleq	r2, r4, r3
   2f2d0:	muleq	r2, r4, r3
   2f2d4:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   2f2d8:	muleq	r2, r4, r3
   2f2dc:	muleq	r2, r4, r3
   2f2e0:	muleq	r2, r4, r3
   2f2e4:	muleq	r2, r4, r3
   2f2e8:	muleq	r2, r4, r3
   2f2ec:	muleq	r2, r4, r3
   2f2f0:	muleq	r2, r4, r3
   2f2f4:	muleq	r2, r4, r3
   2f2f8:	muleq	r2, r4, r3
   2f2fc:	muleq	r2, r4, r3
   2f300:	muleq	r2, r4, r3
   2f304:	muleq	r2, r4, r3
   2f308:	muleq	r2, r4, r3
   2f30c:	muleq	r2, r4, r3
   2f310:	muleq	r2, r4, r3
   2f314:	muleq	r2, r4, r3
   2f318:	muleq	r2, r4, r3
   2f31c:	muleq	r2, r4, r3
   2f320:	andeq	pc, r2, r4, lsr #6
   2f324:	cmp	r2, lr
   2f328:	bne	2f254 <flatcc_json_parser_skip_constant@@Base+0x68>
   2f32c:	b	2f280 <flatcc_json_parser_skip_constant@@Base+0x94>
   2f330:	sub	r3, r2, lr
   2f334:	add	ip, lr, #1
   2f338:	cmp	r3, #1
   2f33c:	ble	2f34c <flatcc_json_parser_skip_constant@@Base+0x160>
   2f340:	ldrb	r3, [lr, #1]
   2f344:	cmp	r3, #10
   2f348:	addeq	ip, lr, #2
   2f34c:	mov	lr, ip
   2f350:	ldr	r3, [r0, #16]
   2f354:	str	lr, [r0, #4]
   2f358:	add	r3, r3, #1
   2f35c:	str	r3, [r0, #16]
   2f360:	cmp	r2, lr
   2f364:	beq	2f3bc <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2f368:	ldrb	r3, [lr]
   2f36c:	cmp	r3, #32
   2f370:	bls	2f2b4 <flatcc_json_parser_skip_constant@@Base+0xc8>
   2f374:	cmp	lr, r1
   2f378:	beq	2f3c0 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   2f37c:	mov	r1, lr
   2f380:	b	2f1fc <flatcc_json_parser_skip_constant@@Base+0x10>
   2f384:	add	lr, lr, #1
   2f388:	b	2f350 <flatcc_json_parser_skip_constant@@Base+0x164>
   2f38c:	add	lr, lr, #1
   2f390:	b	2f360 <flatcc_json_parser_skip_constant@@Base+0x174>
   2f394:	ldr	r3, [r0, #24]
   2f398:	cmp	r3, #0
   2f39c:	bne	2f3bc <flatcc_json_parser_skip_constant@@Base+0x1d0>
   2f3a0:	ldr	r3, [r0, #4]
   2f3a4:	mov	r1, #5
   2f3a8:	str	lr, [r0, #36]	; 0x24
   2f3ac:	str	r1, [r0, #24]
   2f3b0:	sub	lr, lr, r3
   2f3b4:	add	lr, lr, #1
   2f3b8:	str	lr, [r0, #20]
   2f3bc:	mov	r1, r2
   2f3c0:	mov	r0, r1
   2f3c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2f3c8:	mov	lr, r2
   2f3cc:	b	2f280 <flatcc_json_parser_skip_constant@@Base+0x94>
   2f3d0:	mov	r0, r1
   2f3d4:	bx	lr

0002f3d8 <flatcc_json_parser_match_constant@@Base>:
   2f3d8:	sub	ip, r2, r1
   2f3dc:	str	r4, [sp, #-8]!
   2f3e0:	cmp	ip, r3
   2f3e4:	str	lr, [sp, #4]
   2f3e8:	ble	2f4c4 <flatcc_json_parser_match_constant@@Base+0xec>
   2f3ec:	ldr	ip, [r0, #12]
   2f3f0:	add	r4, r1, r3
   2f3f4:	cmp	ip, #0
   2f3f8:	bne	2f454 <flatcc_json_parser_match_constant@@Base+0x7c>
   2f3fc:	ldrb	r3, [r1, r3]
   2f400:	cmp	r3, #32
   2f404:	beq	2f5e4 <flatcc_json_parser_match_constant@@Base+0x20c>
   2f408:	cmp	r3, #34	; 0x22
   2f40c:	beq	2f6c4 <flatcc_json_parser_match_constant@@Base+0x2ec>
   2f410:	cmp	r3, #92	; 0x5c
   2f414:	bne	2f598 <flatcc_json_parser_match_constant@@Base+0x1c0>
   2f418:	ldr	r3, [sp, #8]
   2f41c:	str	ip, [r3]
   2f420:	ldr	r3, [r0, #24]
   2f424:	cmp	r3, #0
   2f428:	movne	r3, r2
   2f42c:	bne	2f4d4 <flatcc_json_parser_match_constant@@Base+0xfc>
   2f430:	ldr	r1, [r0, #4]
   2f434:	mov	ip, #18
   2f438:	mov	r3, r2
   2f43c:	str	ip, [r0, #24]
   2f440:	str	r4, [r0, #36]	; 0x24
   2f444:	sub	r1, r4, r1
   2f448:	add	r1, r1, #1
   2f44c:	str	r1, [r0, #20]
   2f450:	b	2f4d4 <flatcc_json_parser_match_constant@@Base+0xfc>
   2f454:	sub	ip, r2, r4
   2f458:	cmp	ip, #1
   2f45c:	ble	2f470 <flatcc_json_parser_match_constant@@Base+0x98>
   2f460:	ldrb	r3, [r1, r3]
   2f464:	cmp	r3, #32
   2f468:	bhi	2f84c <flatcc_json_parser_match_constant@@Base+0x474>
   2f46c:	beq	2f630 <flatcc_json_parser_match_constant@@Base+0x258>
   2f470:	cmp	r4, r2
   2f474:	mov	r3, r4
   2f478:	beq	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f47c:	ldrb	ip, [r3]
   2f480:	cmp	ip, #32
   2f484:	bne	2f520 <flatcc_json_parser_match_constant@@Base+0x148>
   2f488:	add	lr, r3, #1
   2f48c:	b	2f49c <flatcc_json_parser_match_constant@@Base+0xc4>
   2f490:	ldrb	ip, [lr], #1
   2f494:	cmp	ip, #32
   2f498:	bne	2f520 <flatcc_json_parser_match_constant@@Base+0x148>
   2f49c:	cmp	r2, lr
   2f4a0:	mov	r3, lr
   2f4a4:	bne	2f490 <flatcc_json_parser_match_constant@@Base+0xb8>
   2f4a8:	ldr	r1, [sp, #8]
   2f4ac:	mov	r2, #0
   2f4b0:	str	r2, [r1]
   2f4b4:	ldr	r4, [sp]
   2f4b8:	add	sp, sp, #4
   2f4bc:	mov	r0, r3
   2f4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f4c4:	mov	r3, r1
   2f4c8:	ldr	r1, [sp, #8]
   2f4cc:	mov	r2, #0
   2f4d0:	str	r2, [r1]
   2f4d4:	ldr	r4, [sp]
   2f4d8:	add	sp, sp, #4
   2f4dc:	mov	r0, r3
   2f4e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f4e4:	sub	ip, r2, r3
   2f4e8:	add	lr, r3, #1
   2f4ec:	cmp	ip, #1
   2f4f0:	ble	2f500 <flatcc_json_parser_match_constant@@Base+0x128>
   2f4f4:	ldrb	ip, [r3, #1]
   2f4f8:	cmp	ip, #10
   2f4fc:	addeq	lr, r3, #2
   2f500:	mov	r3, lr
   2f504:	ldr	ip, [r0, #16]
   2f508:	str	r3, [r0, #4]
   2f50c:	add	ip, ip, #1
   2f510:	str	ip, [r0, #16]
   2f514:	cmp	r2, r3
   2f518:	beq	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f51c:	ldrb	ip, [r3]
   2f520:	cmp	ip, #32
   2f524:	bhi	2f648 <flatcc_json_parser_match_constant@@Base+0x270>
   2f528:	sub	ip, ip, #9
   2f52c:	cmp	ip, #23
   2f530:	ldrls	pc, [pc, ip, lsl #2]
   2f534:	b	2f5d0 <flatcc_json_parser_match_constant@@Base+0x1f8>
   2f538:	andeq	pc, r2, r8, asr #11
   2f53c:	andeq	pc, r2, r0, asr #11
   2f540:	ldrdeq	pc, [r2], -r0
   2f544:	ldrdeq	pc, [r2], -r0
   2f548:	andeq	pc, r2, r4, ror #9
   2f54c:	ldrdeq	pc, [r2], -r0
   2f550:	ldrdeq	pc, [r2], -r0
   2f554:	ldrdeq	pc, [r2], -r0
   2f558:	ldrdeq	pc, [r2], -r0
   2f55c:	ldrdeq	pc, [r2], -r0
   2f560:	ldrdeq	pc, [r2], -r0
   2f564:	ldrdeq	pc, [r2], -r0
   2f568:	ldrdeq	pc, [r2], -r0
   2f56c:	ldrdeq	pc, [r2], -r0
   2f570:	ldrdeq	pc, [r2], -r0
   2f574:	ldrdeq	pc, [r2], -r0
   2f578:	ldrdeq	pc, [r2], -r0
   2f57c:	ldrdeq	pc, [r2], -r0
   2f580:	ldrdeq	pc, [r2], -r0
   2f584:	ldrdeq	pc, [r2], -r0
   2f588:	ldrdeq	pc, [r2], -r0
   2f58c:	ldrdeq	pc, [r2], -r0
   2f590:	ldrdeq	pc, [r2], -r0
   2f594:			; <UNDEFINED> instruction: 0x0002f5b4
   2f598:	mov	r3, r1
   2f59c:	ldr	r4, [sp]
   2f5a0:	mov	r0, r3
   2f5a4:	ldr	r2, [sp, #8]
   2f5a8:	add	sp, sp, #4
   2f5ac:	str	ip, [r2]
   2f5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f5b4:	cmp	r2, r3
   2f5b8:	bne	2f47c <flatcc_json_parser_match_constant@@Base+0xa4>
   2f5bc:	b	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f5c0:	add	r3, r3, #1
   2f5c4:	b	2f504 <flatcc_json_parser_match_constant@@Base+0x12c>
   2f5c8:	add	r3, r3, #1
   2f5cc:	b	2f514 <flatcc_json_parser_match_constant@@Base+0x13c>
   2f5d0:	ldr	r1, [r0, #24]
   2f5d4:	cmp	r1, #0
   2f5d8:	beq	2f828 <flatcc_json_parser_match_constant@@Base+0x450>
   2f5dc:	mov	r3, r2
   2f5e0:	b	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f5e4:	add	r3, r4, #1
   2f5e8:	cmp	r2, r3
   2f5ec:	beq	2f870 <flatcc_json_parser_match_constant@@Base+0x498>
   2f5f0:	ldrb	r1, [r4, #1]
   2f5f4:	cmp	r1, #32
   2f5f8:	bne	2f6a4 <flatcc_json_parser_match_constant@@Base+0x2cc>
   2f5fc:	add	r3, r4, #2
   2f600:	b	2f610 <flatcc_json_parser_match_constant@@Base+0x238>
   2f604:	ldrb	r1, [r3], #1
   2f608:	cmp	r1, #32
   2f60c:	bne	2f6a8 <flatcc_json_parser_match_constant@@Base+0x2d0>
   2f610:	cmp	r2, r3
   2f614:	mov	r4, r3
   2f618:	bne	2f604 <flatcc_json_parser_match_constant@@Base+0x22c>
   2f61c:	ldr	r1, [sp, #8]
   2f620:	mov	r2, #0
   2f624:	mov	r3, r4
   2f628:	str	r2, [r1]
   2f62c:	b	2f4d4 <flatcc_json_parser_match_constant@@Base+0xfc>
   2f630:	ldrb	ip, [r4, #1]
   2f634:	cmp	ip, #32
   2f638:	bls	2f470 <flatcc_json_parser_match_constant@@Base+0x98>
   2f63c:	add	r3, r4, #1
   2f640:	cmp	r2, r3
   2f644:	beq	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f648:	cmp	r4, r3
   2f64c:	beq	2f674 <flatcc_json_parser_match_constant@@Base+0x29c>
   2f650:	sub	r2, ip, #95	; 0x5f
   2f654:	clz	r2, r2
   2f658:	lsr	r2, r2, #5
   2f65c:	orrs	r2, r2, ip, lsr #7
   2f660:	bne	2f818 <flatcc_json_parser_match_constant@@Base+0x440>
   2f664:	orr	ip, ip, #32
   2f668:	sub	ip, ip, #97	; 0x61
   2f66c:	cmp	ip, #25
   2f670:	bls	2f818 <flatcc_json_parser_match_constant@@Base+0x440>
   2f674:	mov	r2, #0
   2f678:	ldr	r4, [sp]
   2f67c:	ldr	r0, [sp, #8]
   2f680:	add	sp, sp, #4
   2f684:	str	r2, [r0]
   2f688:	ldrb	r2, [r3]
   2f68c:	and	r0, r2, #223	; 0xdf
   2f690:	cmp	r2, #44	; 0x2c
   2f694:	cmpne	r0, #93	; 0x5d
   2f698:	movne	r3, r1
   2f69c:	mov	r0, r3
   2f6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f6a4:	mov	r4, r3
   2f6a8:	cmp	r1, #34	; 0x22
   2f6ac:	beq	2f6c4 <flatcc_json_parser_match_constant@@Base+0x2ec>
   2f6b0:	ldr	r1, [sp, #8]
   2f6b4:	mov	r2, #1
   2f6b8:	mov	r3, r4
   2f6bc:	str	r2, [r1]
   2f6c0:	b	2f4d4 <flatcc_json_parser_match_constant@@Base+0xfc>
   2f6c4:	add	r3, r4, #1
   2f6c8:	cmn	r3, #1
   2f6cc:	bge	2f6e0 <flatcc_json_parser_match_constant@@Base+0x308>
   2f6d0:	ldrb	r2, [r4, #1]
   2f6d4:	cmp	r2, #32
   2f6d8:	bhi	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f6dc:	beq	2f85c <flatcc_json_parser_match_constant@@Base+0x484>
   2f6e0:	cmp	r3, #0
   2f6e4:	beq	2f714 <flatcc_json_parser_match_constant@@Base+0x33c>
   2f6e8:	ldrb	r1, [r3]
   2f6ec:	cmp	r1, #32
   2f6f0:	bne	2f748 <flatcc_json_parser_match_constant@@Base+0x370>
   2f6f4:	add	r2, r3, #1
   2f6f8:	b	2f708 <flatcc_json_parser_match_constant@@Base+0x330>
   2f6fc:	ldrb	r1, [r2], #1
   2f700:	cmp	r1, #32
   2f704:	bne	2f748 <flatcc_json_parser_match_constant@@Base+0x370>
   2f708:	cmp	r2, #0
   2f70c:	mov	r3, r2
   2f710:	bne	2f6fc <flatcc_json_parser_match_constant@@Base+0x324>
   2f714:	ldr	r1, [sp, #8]
   2f718:	mov	r2, #0
   2f71c:	mov	r3, #0
   2f720:	str	r2, [r1]
   2f724:	b	2f4b4 <flatcc_json_parser_match_constant@@Base+0xdc>
   2f728:	add	r3, r3, #1
   2f72c:	ldr	r2, [r0, #16]
   2f730:	str	r3, [r0, #4]
   2f734:	add	r2, r2, #1
   2f738:	str	r2, [r0, #16]
   2f73c:	cmp	r3, #0
   2f740:	beq	2f714 <flatcc_json_parser_match_constant@@Base+0x33c>
   2f744:	ldrb	r1, [r3]
   2f748:	cmp	r1, #32
   2f74c:	bhi	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f750:	sub	r1, r1, #9
   2f754:	cmp	r1, #23
   2f758:	ldrls	pc, [pc, r1, lsl #2]
   2f75c:	b	2f7e8 <flatcc_json_parser_match_constant@@Base+0x410>
   2f760:	andeq	pc, r2, r0, ror #15
   2f764:	andeq	pc, r2, r8, lsr #14
   2f768:	andeq	pc, r2, r8, ror #15
   2f76c:	andeq	pc, r2, r8, ror #15
   2f770:	andeq	pc, r2, r0, asr #15
   2f774:	andeq	pc, r2, r8, ror #15
   2f778:	andeq	pc, r2, r8, ror #15
   2f77c:	andeq	pc, r2, r8, ror #15
   2f780:	andeq	pc, r2, r8, ror #15
   2f784:	andeq	pc, r2, r8, ror #15
   2f788:	andeq	pc, r2, r8, ror #15
   2f78c:	andeq	pc, r2, r8, ror #15
   2f790:	andeq	pc, r2, r8, ror #15
   2f794:	andeq	pc, r2, r8, ror #15
   2f798:	andeq	pc, r2, r8, ror #15
   2f79c:	andeq	pc, r2, r8, ror #15
   2f7a0:	andeq	pc, r2, r8, ror #15
   2f7a4:	andeq	pc, r2, r8, ror #15
   2f7a8:	andeq	pc, r2, r8, ror #15
   2f7ac:	andeq	pc, r2, r8, ror #15
   2f7b0:	andeq	pc, r2, r8, ror #15
   2f7b4:	andeq	pc, r2, r8, ror #15
   2f7b8:	andeq	pc, r2, r8, ror #15
   2f7bc:	andeq	pc, r2, r8, ror #13
   2f7c0:	cmn	r3, #1
   2f7c4:	add	r2, r3, #1
   2f7c8:	bge	2f7d8 <flatcc_json_parser_match_constant@@Base+0x400>
   2f7cc:	ldrb	r1, [r3, #1]
   2f7d0:	cmp	r1, #10
   2f7d4:	addeq	r2, r3, #2
   2f7d8:	mov	r3, r2
   2f7dc:	b	2f72c <flatcc_json_parser_match_constant@@Base+0x354>
   2f7e0:	add	r3, r3, #1
   2f7e4:	b	2f73c <flatcc_json_parser_match_constant@@Base+0x364>
   2f7e8:	ldr	r1, [r0, #24]
   2f7ec:	cmp	r1, #0
   2f7f0:	bne	2f714 <flatcc_json_parser_match_constant@@Base+0x33c>
   2f7f4:	ldr	r2, [r0, #4]
   2f7f8:	mov	ip, #5
   2f7fc:	str	ip, [r0, #24]
   2f800:	str	r3, [r0, #36]	; 0x24
   2f804:	sub	r2, r3, r2
   2f808:	mov	r3, r1
   2f80c:	add	r2, r2, #1
   2f810:	str	r2, [r0, #20]
   2f814:	b	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f818:	ldr	r1, [sp, #8]
   2f81c:	mov	r2, #1
   2f820:	str	r2, [r1]
   2f824:	b	2f4d4 <flatcc_json_parser_match_constant@@Base+0xfc>
   2f828:	ldr	r1, [r0, #4]
   2f82c:	mov	ip, #5
   2f830:	str	ip, [r0, #24]
   2f834:	str	r3, [r0, #36]	; 0x24
   2f838:	sub	r1, r3, r1
   2f83c:	mov	r3, r2
   2f840:	add	r1, r1, #1
   2f844:	str	r1, [r0, #20]
   2f848:	b	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f84c:	cmp	r4, r2
   2f850:	beq	2f5dc <flatcc_json_parser_match_constant@@Base+0x204>
   2f854:	mov	r3, r4
   2f858:	b	2f674 <flatcc_json_parser_match_constant@@Base+0x29c>
   2f85c:	ldrb	r2, [r4, #2]
   2f860:	cmp	r2, #32
   2f864:	addhi	r3, r4, #2
   2f868:	bls	2f6e0 <flatcc_json_parser_match_constant@@Base+0x308>
   2f86c:	b	2f4a8 <flatcc_json_parser_match_constant@@Base+0xd0>
   2f870:	mov	r4, r2
   2f874:	b	2f61c <flatcc_json_parser_match_constant@@Base+0x244>

0002f878 <flatcc_json_parser_double@@Base>:
   2f878:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2f87c:	cmp	r1, r2
   2f880:	mov	r5, r2
   2f884:	strd	r6, [sp, #8]
   2f888:	strd	r8, [sp, #16]
   2f88c:	mov	r8, #0
   2f890:	mov	r9, #0
   2f894:	str	sl, [sp, #24]
   2f898:	str	lr, [sp, #28]
   2f89c:	strd	r8, [r3]
   2f8a0:	beq	2f960 <flatcc_json_parser_double@@Base+0xe8>
   2f8a4:	mov	r6, r3
   2f8a8:	ldrb	r3, [r1]
   2f8ac:	mov	r4, r1
   2f8b0:	mov	r7, r0
   2f8b4:	cmp	r3, #45	; 0x2d
   2f8b8:	addeq	r3, r1, #1
   2f8bc:	movne	r3, r1
   2f8c0:	sub	r2, r2, r3
   2f8c4:	cmp	r2, #1
   2f8c8:	ble	2f8e0 <flatcc_json_parser_double@@Base+0x68>
   2f8cc:	ldrb	r2, [r3]
   2f8d0:	cmp	r2, #46	; 0x2e
   2f8d4:	beq	2f98c <flatcc_json_parser_double@@Base+0x114>
   2f8d8:	cmp	r2, #48	; 0x30
   2f8dc:	beq	2f980 <flatcc_json_parser_double@@Base+0x108>
   2f8e0:	mov	r2, r6
   2f8e4:	sub	r1, r5, r4
   2f8e8:	mov	r0, r4
   2f8ec:	bl	2d6a4 <grisu3_diy_fp_encode_double@@Base+0x5a4>
   2f8f0:	cmp	r4, r0
   2f8f4:	cmpne	r0, #0
   2f8f8:	mov	r3, r0
   2f8fc:	bne	2f944 <flatcc_json_parser_double@@Base+0xcc>
   2f900:	vldr	d7, [r6]
   2f904:	vldr	d6, [pc, #156]	; 2f9a8 <flatcc_json_parser_double@@Base+0x130>
   2f908:	ldr	r3, [r7, #24]
   2f90c:	vabs.f64	d7, d7
   2f910:	vcmp.f64	d7, d6
   2f914:	vmrs	APSR_nzcv, fpscr
   2f918:	bgt	2f968 <flatcc_json_parser_double@@Base+0xf0>
   2f91c:	cmp	r3, #0
   2f920:	bne	2f960 <flatcc_json_parser_double@@Base+0xe8>
   2f924:	ldr	r2, [r7, #4]
   2f928:	mov	r3, r5
   2f92c:	mov	r1, #6
   2f930:	str	r1, [r7, #24]
   2f934:	str	r4, [r7, #36]	; 0x24
   2f938:	sub	r4, r4, r2
   2f93c:	add	r4, r4, #1
   2f940:	str	r4, [r7, #20]
   2f944:	ldrd	r4, [sp]
   2f948:	mov	r0, r3
   2f94c:	ldrd	r6, [sp, #8]
   2f950:	ldrd	r8, [sp, #16]
   2f954:	ldr	sl, [sp, #24]
   2f958:	add	sp, sp, #28
   2f95c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f960:	mov	r3, r5
   2f964:	b	2f944 <flatcc_json_parser_double@@Base+0xcc>
   2f968:	cmp	r3, #0
   2f96c:	bne	2f960 <flatcc_json_parser_double@@Base+0xe8>
   2f970:	mov	r1, #7
   2f974:	mov	r3, r5
   2f978:	ldr	r2, [r7, #4]
   2f97c:	b	2f930 <flatcc_json_parser_double@@Base+0xb8>
   2f980:	ldrb	r3, [r3, #1]
   2f984:	cmp	r3, #48	; 0x30
   2f988:	bne	2f8e0 <flatcc_json_parser_double@@Base+0x68>
   2f98c:	ldr	r3, [r7, #24]
   2f990:	cmp	r3, #0
   2f994:	bne	2f960 <flatcc_json_parser_double@@Base+0xe8>
   2f998:	mov	r1, #6
   2f99c:	mov	r3, r5
   2f9a0:	ldr	r2, [r7, #4]
   2f9a4:	b	2f930 <flatcc_json_parser_double@@Base+0xb8>
   2f9a8:			; <UNDEFINED> instruction: 0xffffffff
   2f9ac:	svcvc	0x00efffff

0002f9b0 <flatcc_json_parser_float@@Base>:
   2f9b0:	mov	ip, #0
   2f9b4:	cmp	r1, r2
   2f9b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   2f9bc:	mov	r5, r2
   2f9c0:	strd	r6, [sp, #8]
   2f9c4:	str	lr, [sp, #16]
   2f9c8:	sub	sp, sp, #12
   2f9cc:	str	ip, [r3]
   2f9d0:	beq	2fa94 <flatcc_json_parser_float@@Base+0xe4>
   2f9d4:	mov	r6, r3
   2f9d8:	ldrb	r3, [r1]
   2f9dc:	mov	r4, r1
   2f9e0:	mov	r7, r0
   2f9e4:	cmp	r3, #45	; 0x2d
   2f9e8:	addeq	r3, r1, #1
   2f9ec:	movne	r3, r1
   2f9f0:	sub	r2, r2, r3
   2f9f4:	cmp	r2, #1
   2f9f8:	ble	2fa10 <flatcc_json_parser_float@@Base+0x60>
   2f9fc:	ldrb	r2, [r3]
   2fa00:	cmp	r2, #46	; 0x2e
   2fa04:	beq	2faa8 <flatcc_json_parser_float@@Base+0xf8>
   2fa08:	cmp	r2, #48	; 0x30
   2fa0c:	beq	2fa9c <flatcc_json_parser_float@@Base+0xec>
   2fa10:	mov	r2, sp
   2fa14:	sub	r1, r5, r4
   2fa18:	mov	r0, r4
   2fa1c:	bl	2d6a4 <grisu3_diy_fp_encode_double@@Base+0x5a4>
   2fa20:	vldr	d6, [sp]
   2fa24:	vldr	s14, [pc, #200]	; 2faf4 <flatcc_json_parser_float@@Base+0x144>
   2fa28:	vcvt.f32.f64	s15, d6
   2fa2c:	vabs.f32	s11, s15
   2fa30:	vstr	s15, [r6]
   2fa34:	vcmp.f32	s11, s14
   2fa38:	vmrs	APSR_nzcv, fpscr
   2fa3c:	bgt	2fa60 <flatcc_json_parser_float@@Base+0xb0>
   2fa40:	cmp	r4, r0
   2fa44:	cmpne	r0, #0
   2fa48:	beq	2fad8 <flatcc_json_parser_float@@Base+0x128>
   2fa4c:	add	sp, sp, #12
   2fa50:	ldrd	r4, [sp]
   2fa54:	ldrd	r6, [sp, #8]
   2fa58:	add	sp, sp, #16
   2fa5c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fa60:	vcmpe.f64	d6, #0.0
   2fa64:	vldr	s15, [pc, #140]	; 2faf8 <flatcc_json_parser_float@@Base+0x148>
   2fa68:	vldr	s14, [pc, #140]	; 2fafc <flatcc_json_parser_float@@Base+0x14c>
   2fa6c:	ldr	r3, [r7, #24]
   2fa70:	vmrs	APSR_nzcv, fpscr
   2fa74:	vmovpl.f32	s15, s14
   2fa78:	cmp	r3, #0
   2fa7c:	vstr	s15, [r6]
   2fa80:	bne	2fa94 <flatcc_json_parser_float@@Base+0xe4>
   2fa84:	mov	r2, #7
   2fa88:	mov	r0, r5
   2fa8c:	ldr	r3, [r7, #4]
   2fa90:	b	2fac0 <flatcc_json_parser_float@@Base+0x110>
   2fa94:	mov	r0, r5
   2fa98:	b	2fa4c <flatcc_json_parser_float@@Base+0x9c>
   2fa9c:	ldrb	r3, [r3, #1]
   2faa0:	cmp	r3, #48	; 0x30
   2faa4:	bne	2fa10 <flatcc_json_parser_float@@Base+0x60>
   2faa8:	ldr	r3, [r7, #24]
   2faac:	cmp	r3, #0
   2fab0:	bne	2fa94 <flatcc_json_parser_float@@Base+0xe4>
   2fab4:	ldr	r3, [r7, #4]
   2fab8:	mov	r2, #6
   2fabc:	mov	r0, r5
   2fac0:	str	r2, [r7, #24]
   2fac4:	str	r4, [r7, #36]	; 0x24
   2fac8:	sub	r4, r4, r3
   2facc:	add	r4, r4, #1
   2fad0:	str	r4, [r7, #20]
   2fad4:	b	2fa4c <flatcc_json_parser_float@@Base+0x9c>
   2fad8:	ldr	r3, [r7, #24]
   2fadc:	cmp	r3, #0
   2fae0:	bne	2fa94 <flatcc_json_parser_float@@Base+0xe4>
   2fae4:	mov	r0, r5
   2fae8:	mov	r2, #6
   2faec:	ldr	r3, [r7, #4]
   2faf0:	b	2fac0 <flatcc_json_parser_float@@Base+0x110>
   2faf4:	svcvc	0x007fffff
   2faf8:			; <UNDEFINED> instruction: 0xff800000
   2fafc:	svcvc	0x00800000

0002fb00 <flatcc_json_parser_generic_json@@Base>:
   2fb00:	cmp	r1, r2
   2fb04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2fb08:	mov	r4, r2
   2fb0c:	strd	r6, [sp, #8]
   2fb10:	strd	r8, [sp, #16]
   2fb14:	strd	sl, [sp, #24]
   2fb18:	str	lr, [sp, #32]
   2fb1c:	sub	sp, sp, #524	; 0x20c
   2fb20:	beq	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   2fb24:	ldrb	r3, [r1]
   2fb28:	add	r8, sp, #8
   2fb2c:	mov	r5, r1
   2fb30:	mov	r6, r0
   2fb34:	mov	sl, #125	; 0x7d
   2fb38:	mov	r7, r8
   2fb3c:	mov	r9, #17
   2fb40:	cmp	r7, r8
   2fb44:	beq	2fbe8 <flatcc_json_parser_generic_json@@Base+0xe8>
   2fb48:	ldrb	r2, [r7, #-1]
   2fb4c:	cmp	r2, #125	; 0x7d
   2fb50:	beq	30938 <flatcc_json_parser_generic_json@@Base+0xe38>
   2fb54:	cmp	r3, #57	; 0x39
   2fb58:	bls	2fbf0 <flatcc_json_parser_generic_json@@Base+0xf0>
   2fb5c:	cmp	r3, #91	; 0x5b
   2fb60:	beq	304f4 <flatcc_json_parser_generic_json@@Base+0x9f4>
   2fb64:	cmp	r3, #123	; 0x7b
   2fb68:	bne	2fd9c <flatcc_json_parser_generic_json@@Base+0x29c>
   2fb6c:	add	r3, sp, #520	; 0x208
   2fb70:	cmp	r7, r3
   2fb74:	beq	31184 <flatcc_json_parser_generic_json@@Base+0x1684>
   2fb78:	add	r1, r5, #1
   2fb7c:	strb	sl, [r7], #1
   2fb80:	sub	r3, r4, r1
   2fb84:	cmp	r3, #1
   2fb88:	ble	2fbac <flatcc_json_parser_generic_json@@Base+0xac>
   2fb8c:	ldrb	r3, [r5, #1]
   2fb90:	cmp	r3, #32
   2fb94:	bhi	30a58 <flatcc_json_parser_generic_json@@Base+0xf58>
   2fb98:	bne	2fbac <flatcc_json_parser_generic_json@@Base+0xac>
   2fb9c:	ldrb	r3, [r5, #2]
   2fba0:	cmp	r3, #32
   2fba4:	addhi	r5, r5, #2
   2fba8:	bhi	30a5c <flatcc_json_parser_generic_json@@Base+0xf5c>
   2fbac:	cmp	r1, r4
   2fbb0:	beq	2fbe0 <flatcc_json_parser_generic_json@@Base+0xe0>
   2fbb4:	ldrb	r3, [r1]
   2fbb8:	cmp	r3, #32
   2fbbc:	bne	30608 <flatcc_json_parser_generic_json@@Base+0xb08>
   2fbc0:	add	r2, r1, #1
   2fbc4:	b	2fbd4 <flatcc_json_parser_generic_json@@Base+0xd4>
   2fbc8:	ldrb	r3, [r2], #1
   2fbcc:	cmp	r3, #32
   2fbd0:	bne	30608 <flatcc_json_parser_generic_json@@Base+0xb08>
   2fbd4:	cmp	r4, r2
   2fbd8:	mov	r1, r2
   2fbdc:	bne	2fbc8 <flatcc_json_parser_generic_json@@Base+0xc8>
   2fbe0:	mov	r4, r1
   2fbe4:	b	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   2fbe8:	cmp	r3, #57	; 0x39
   2fbec:	bhi	30310 <flatcc_json_parser_generic_json@@Base+0x810>
   2fbf0:	cmp	r3, #48	; 0x30
   2fbf4:	bcs	307f4 <flatcc_json_parser_generic_json@@Base+0xcf4>
   2fbf8:	cmp	r3, #34	; 0x22
   2fbfc:	bne	2fd94 <flatcc_json_parser_generic_json@@Base+0x294>
   2fc00:	add	r1, r5, #1
   2fc04:	cmp	r4, r1
   2fc08:	beq	30fb0 <flatcc_json_parser_generic_json@@Base+0x14b0>
   2fc0c:	ldrb	r3, [r5, #1]
   2fc10:	cmp	r3, #34	; 0x22
   2fc14:	beq	2fca4 <flatcc_json_parser_generic_json@@Base+0x1a4>
   2fc18:	mov	r5, #20
   2fc1c:	cmp	r4, r1
   2fc20:	beq	305f0 <flatcc_json_parser_generic_json@@Base+0xaf0>
   2fc24:	cmp	r3, #92	; 0x5c
   2fc28:	cmpne	r3, #31
   2fc2c:	addhi	r0, r1, #1
   2fc30:	bls	305b4 <flatcc_json_parser_generic_json@@Base+0xab4>
   2fc34:	cmp	r4, r0
   2fc38:	mov	r1, r0
   2fc3c:	beq	305f0 <flatcc_json_parser_generic_json@@Base+0xaf0>
   2fc40:	ldrb	r3, [r0]
   2fc44:	add	r0, r0, #1
   2fc48:	cmp	r3, #34	; 0x22
   2fc4c:	cmpne	r3, #31
   2fc50:	movhi	r2, #1
   2fc54:	movls	r2, #0
   2fc58:	cmp	r3, #92	; 0x5c
   2fc5c:	moveq	r2, #0
   2fc60:	andne	r2, r2, #1
   2fc64:	cmp	r2, #0
   2fc68:	bne	2fc34 <flatcc_json_parser_generic_json@@Base+0x134>
   2fc6c:	cmp	r3, #31
   2fc70:	bls	305bc <flatcc_json_parser_generic_json@@Base+0xabc>
   2fc74:	cmp	r3, #34	; 0x22
   2fc78:	beq	2fca4 <flatcc_json_parser_generic_json@@Base+0x1a4>
   2fc7c:	add	r3, sp, #4
   2fc80:	mov	r2, r4
   2fc84:	mov	r0, r6
   2fc88:	bl	2ed30 <flatcc_json_parser_string_escape@@Base>
   2fc8c:	cmp	r4, r0
   2fc90:	mov	r1, r0
   2fc94:	beq	30fb0 <flatcc_json_parser_generic_json@@Base+0x14b0>
   2fc98:	ldrb	r3, [r0]
   2fc9c:	cmp	r3, #34	; 0x22
   2fca0:	bne	2fc1c <flatcc_json_parser_generic_json@@Base+0x11c>
   2fca4:	add	r0, r1, #1
   2fca8:	cmp	r4, r0
   2fcac:	beq	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   2fcb0:	cmp	r7, r8
   2fcb4:	beq	2fd60 <flatcc_json_parser_generic_json@@Base+0x260>
   2fcb8:	ldrb	r3, [r7, #-1]
   2fcbc:	sub	fp, r7, #1
   2fcc0:	sub	r2, r4, r0
   2fcc4:	cmp	r3, #93	; 0x5d
   2fcc8:	beq	2fdcc <flatcc_json_parser_generic_json@@Base+0x2cc>
   2fccc:	cmp	r2, #1
   2fcd0:	ble	2fce4 <flatcc_json_parser_generic_json@@Base+0x1e4>
   2fcd4:	ldrb	r3, [r0]
   2fcd8:	cmp	r3, #32
   2fcdc:	bhi	2fcf4 <flatcc_json_parser_generic_json@@Base+0x1f4>
   2fce0:	beq	2fe48 <flatcc_json_parser_generic_json@@Base+0x348>
   2fce4:	mov	r1, r0
   2fce8:	mov	r2, r4
   2fcec:	mov	r0, r6
   2fcf0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   2fcf4:	cmp	r4, r0
   2fcf8:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2fcfc:	ldrb	r3, [r0]
   2fd00:	cmp	r3, #44	; 0x2c
   2fd04:	beq	2fe5c <flatcc_json_parser_generic_json@@Base+0x35c>
   2fd08:	cmp	r3, #125	; 0x7d
   2fd0c:	beq	300a4 <flatcc_json_parser_generic_json@@Base+0x5a4>
   2fd10:	ldr	r3, [r6, #24]
   2fd14:	cmp	r3, #0
   2fd18:	beq	2fe3c <flatcc_json_parser_generic_json@@Base+0x33c>
   2fd1c:	mov	r0, r4
   2fd20:	cmp	fp, r8
   2fd24:	beq	2fd60 <flatcc_json_parser_generic_json@@Base+0x260>
   2fd28:	ldrb	r2, [fp, #-1]
   2fd2c:	ldr	r3, [r6, #24]
   2fd30:	cmp	r2, #93	; 0x5d
   2fd34:	moveq	r2, #9
   2fd38:	movne	r2, #10
   2fd3c:	cmp	r3, #0
   2fd40:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   2fd44:	ldr	r3, [r6, #4]
   2fd48:	str	r2, [r6, #24]
   2fd4c:	str	r0, [r6, #36]	; 0x24
   2fd50:	sub	r3, r0, r3
   2fd54:	mov	r0, r4
   2fd58:	add	r3, r3, #1
   2fd5c:	str	r3, [r6, #20]
   2fd60:	add	sp, sp, #524	; 0x20c
   2fd64:	ldrd	r4, [sp]
   2fd68:	ldrd	r6, [sp, #8]
   2fd6c:	ldrd	r8, [sp, #16]
   2fd70:	ldrd	sl, [sp, #24]
   2fd74:	add	sp, sp, #32
   2fd78:	pop	{pc}		; (ldr pc, [sp], #4)
   2fd7c:	cmp	r3, #57	; 0x39
   2fd80:	bhi	2fb5c <flatcc_json_parser_generic_json@@Base+0x5c>
   2fd84:	cmp	r3, #48	; 0x30
   2fd88:	bcs	307f4 <flatcc_json_parser_generic_json@@Base+0xcf4>
   2fd8c:	cmp	r3, #34	; 0x22
   2fd90:	beq	30904 <flatcc_json_parser_generic_json@@Base+0xe04>
   2fd94:	cmp	r3, #45	; 0x2d
   2fd98:	beq	307f4 <flatcc_json_parser_generic_json@@Base+0xcf4>
   2fd9c:	mov	r2, r4
   2fda0:	mov	r1, r5
   2fda4:	mov	r0, r6
   2fda8:	bl	2f1ec <flatcc_json_parser_skip_constant@@Base>
   2fdac:	cmp	r0, r5
   2fdb0:	bne	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2fdb4:	ldr	r3, [r6, #24]
   2fdb8:	cmp	r3, #0
   2fdbc:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   2fdc0:	mov	r2, #5
   2fdc4:	ldr	r3, [r6, #4]
   2fdc8:	b	31198 <flatcc_json_parser_generic_json@@Base+0x1698>
   2fdcc:	cmp	r2, #1
   2fdd0:	ble	2fde4 <flatcc_json_parser_generic_json@@Base+0x2e4>
   2fdd4:	ldrb	r3, [r0]
   2fdd8:	cmp	r3, #32
   2fddc:	bhi	2fdf4 <flatcc_json_parser_generic_json@@Base+0x2f4>
   2fde0:	beq	30218 <flatcc_json_parser_generic_json@@Base+0x718>
   2fde4:	mov	r1, r0
   2fde8:	mov	r2, r4
   2fdec:	mov	r0, r6
   2fdf0:	bl	2e1ec <flatcc_json_parser_space_ext@@Base>
   2fdf4:	cmp	r4, r0
   2fdf8:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2fdfc:	ldrb	r3, [r0]
   2fe00:	cmp	r3, #44	; 0x2c
   2fe04:	beq	3022c <flatcc_json_parser_generic_json@@Base+0x72c>
   2fe08:	cmp	r3, #93	; 0x5d
   2fe0c:	beq	30378 <flatcc_json_parser_generic_json@@Base+0x878>
   2fe10:	ldr	r3, [r6, #24]
   2fe14:	cmp	r3, #0
   2fe18:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2fe1c:	ldr	r1, [r6, #4]
   2fe20:	mov	r3, #9
   2fe24:	sub	r1, r0, r1
   2fe28:	str	r3, [r6, #24]
   2fe2c:	add	r1, r1, #1
   2fe30:	str	r1, [r6, #20]
   2fe34:	str	r0, [r6, #36]	; 0x24
   2fe38:	b	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2fe3c:	mov	r3, #10
   2fe40:	ldr	r1, [r6, #4]
   2fe44:	b	2fe24 <flatcc_json_parser_generic_json@@Base+0x324>
   2fe48:	ldrb	r3, [r0, #1]
   2fe4c:	cmp	r3, #32
   2fe50:	addhi	r0, r0, #1
   2fe54:	bls	2fce4 <flatcc_json_parser_generic_json@@Base+0x1e4>
   2fe58:	b	2fcf4 <flatcc_json_parser_generic_json@@Base+0x1f4>
   2fe5c:	add	r5, r0, #1
   2fe60:	sub	r3, r4, r5
   2fe64:	cmp	r3, #1
   2fe68:	ble	2fe7c <flatcc_json_parser_generic_json@@Base+0x37c>
   2fe6c:	ldrb	r3, [r0, #1]
   2fe70:	cmp	r3, #32
   2fe74:	bhi	30204 <flatcc_json_parser_generic_json@@Base+0x704>
   2fe78:	beq	301f4 <flatcc_json_parser_generic_json@@Base+0x6f4>
   2fe7c:	cmp	r4, r5
   2fe80:	beq	2feb0 <flatcc_json_parser_generic_json@@Base+0x3b0>
   2fe84:	ldrb	r3, [r5]
   2fe88:	cmp	r3, #32
   2fe8c:	bne	2fedc <flatcc_json_parser_generic_json@@Base+0x3dc>
   2fe90:	add	r2, r5, #1
   2fe94:	b	2fea4 <flatcc_json_parser_generic_json@@Base+0x3a4>
   2fe98:	ldrb	r3, [r2], #1
   2fe9c:	cmp	r3, #32
   2fea0:	bne	2fedc <flatcc_json_parser_generic_json@@Base+0x3dc>
   2fea4:	cmp	r4, r2
   2fea8:	mov	r5, r2
   2feac:	bne	2fe98 <flatcc_json_parser_generic_json@@Base+0x398>
   2feb0:	ldr	r3, [r6, #24]
   2feb4:	cmp	r3, #0
   2feb8:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2febc:	ldr	r3, [r6, #4]
   2fec0:	mov	r2, #10
   2fec4:	sub	r3, r5, r3
   2fec8:	str	r2, [r6, #24]
   2fecc:	add	r3, r3, #1
   2fed0:	str	r3, [r6, #20]
   2fed4:	str	r5, [r6, #36]	; 0x24
   2fed8:	b	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2fedc:	cmp	r3, #32
   2fee0:	bhi	2ffa0 <flatcc_json_parser_generic_json@@Base+0x4a0>
   2fee4:	sub	r3, r3, #9
   2fee8:	cmp	r3, #23
   2feec:	ldrls	pc, [pc, r3, lsl #2]
   2fef0:	b	30078 <flatcc_json_parser_generic_json@@Base+0x578>
   2fef4:	andeq	r0, r3, r0, ror r0
   2fef8:	andeq	pc, r2, r8, ror pc	; <UNPREDICTABLE>
   2fefc:	andeq	r0, r3, r8, ror r0
   2ff00:	andeq	r0, r3, r8, ror r0
   2ff04:	andeq	pc, r2, r4, asr pc	; <UNPREDICTABLE>
   2ff08:	andeq	r0, r3, r8, ror r0
   2ff0c:	andeq	r0, r3, r8, ror r0
   2ff10:	andeq	r0, r3, r8, ror r0
   2ff14:	andeq	r0, r3, r8, ror r0
   2ff18:	andeq	r0, r3, r8, ror r0
   2ff1c:	andeq	r0, r3, r8, ror r0
   2ff20:	andeq	r0, r3, r8, ror r0
   2ff24:	andeq	r0, r3, r8, ror r0
   2ff28:	andeq	r0, r3, r8, ror r0
   2ff2c:	andeq	r0, r3, r8, ror r0
   2ff30:	andeq	r0, r3, r8, ror r0
   2ff34:	andeq	r0, r3, r8, ror r0
   2ff38:	andeq	r0, r3, r8, ror r0
   2ff3c:	andeq	r0, r3, r8, ror r0
   2ff40:	andeq	r0, r3, r8, ror r0
   2ff44:	andeq	r0, r3, r8, ror r0
   2ff48:	andeq	r0, r3, r8, ror r0
   2ff4c:	andeq	r0, r3, r8, ror r0
   2ff50:	andeq	pc, r2, ip, ror lr	; <UNPREDICTABLE>
   2ff54:	sub	r3, r4, r5
   2ff58:	add	r2, r5, #1
   2ff5c:	cmp	r3, #1
   2ff60:	ble	2ff70 <flatcc_json_parser_generic_json@@Base+0x470>
   2ff64:	ldrb	r3, [r5, #1]
   2ff68:	cmp	r3, #10
   2ff6c:	addeq	r2, r5, #2
   2ff70:	mov	r5, r2
   2ff74:	b	2ff7c <flatcc_json_parser_generic_json@@Base+0x47c>
   2ff78:	add	r5, r5, #1
   2ff7c:	ldr	r3, [r6, #16]
   2ff80:	str	r5, [r6, #4]
   2ff84:	add	r3, r3, #1
   2ff88:	str	r3, [r6, #16]
   2ff8c:	cmp	r4, r5
   2ff90:	beq	2feb0 <flatcc_json_parser_generic_json@@Base+0x3b0>
   2ff94:	ldrb	r3, [r5]
   2ff98:	cmp	r3, #32
   2ff9c:	bls	2fee4 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2ffa0:	cmp	r3, #125	; 0x7d
   2ffa4:	bne	2fb40 <flatcc_json_parser_generic_json@@Base+0x40>
   2ffa8:	add	r0, r5, #1
   2ffac:	sub	r3, r4, r0
   2ffb0:	cmp	r3, #1
   2ffb4:	ble	2ffc8 <flatcc_json_parser_generic_json@@Base+0x4c8>
   2ffb8:	ldrb	r3, [r5, #1]
   2ffbc:	cmp	r3, #32
   2ffc0:	bhi	307e4 <flatcc_json_parser_generic_json@@Base+0xce4>
   2ffc4:	beq	31140 <flatcc_json_parser_generic_json@@Base+0x1640>
   2ffc8:	cmp	r4, r0
   2ffcc:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2ffd0:	ldrb	r2, [r0]
   2ffd4:	cmp	r2, #32
   2ffd8:	bne	2fff8 <flatcc_json_parser_generic_json@@Base+0x4f8>
   2ffdc:	add	r3, r0, #1
   2ffe0:	cmp	r4, r3
   2ffe4:	mov	r0, r3
   2ffe8:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   2ffec:	ldrb	r2, [r3], #1
   2fff0:	cmp	r2, #32
   2fff4:	beq	2ffe0 <flatcc_json_parser_generic_json@@Base+0x4e0>
   2fff8:	cmp	r2, #32
   2fffc:	bhi	307ec <flatcc_json_parser_generic_json@@Base+0xcec>
   30000:	sub	r2, r2, #9
   30004:	cmp	r2, #23
   30008:	ldrls	pc, [pc, r2, lsl #2]
   3000c:	b	30c3c <flatcc_json_parser_generic_json@@Base+0x113c>
   30010:	andeq	r0, r3, ip, lsl #23
   30014:	andeq	r0, r3, r0, ror #22
   30018:	andeq	r0, r3, ip, lsr ip
   3001c:	andeq	r0, r3, ip, lsr ip
   30020:	andeq	r0, r3, ip, lsr fp
   30024:	andeq	r0, r3, ip, lsr ip
   30028:	andeq	r0, r3, ip, lsr ip
   3002c:	andeq	r0, r3, ip, lsr ip
   30030:	andeq	r0, r3, ip, lsr ip
   30034:	andeq	r0, r3, ip, lsr ip
   30038:	andeq	r0, r3, ip, lsr ip
   3003c:	andeq	r0, r3, ip, lsr ip
   30040:	andeq	r0, r3, ip, lsr ip
   30044:	andeq	r0, r3, ip, lsr ip
   30048:	andeq	r0, r3, ip, lsr ip
   3004c:	andeq	r0, r3, ip, lsr ip
   30050:	andeq	r0, r3, ip, lsr ip
   30054:	andeq	r0, r3, ip, lsr ip
   30058:	andeq	r0, r3, ip, lsr ip
   3005c:	andeq	r0, r3, ip, lsr ip
   30060:	andeq	r0, r3, ip, lsr ip
   30064:	andeq	r0, r3, ip, lsr ip
   30068:	andeq	r0, r3, ip, lsr ip
   3006c:	andeq	pc, r2, r8, asr #31
   30070:	add	r5, r5, #1
   30074:	b	2ff8c <flatcc_json_parser_generic_json@@Base+0x48c>
   30078:	ldr	r3, [r6, #24]
   3007c:	cmp	r3, #0
   30080:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30084:	ldr	r3, [r6, #4]
   30088:	mov	r2, #5
   3008c:	str	r5, [r6, #36]	; 0x24
   30090:	str	r2, [r6, #24]
   30094:	sub	r5, r5, r3
   30098:	add	r5, r5, #1
   3009c:	str	r5, [r6, #20]
   300a0:	b	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   300a4:	add	r1, r0, #1
   300a8:	sub	r3, r4, r1
   300ac:	cmp	r3, #1
   300b0:	ble	300c4 <flatcc_json_parser_generic_json@@Base+0x5c4>
   300b4:	ldrb	r3, [r0, #1]
   300b8:	cmp	r3, #32
   300bc:	bhi	307e0 <flatcc_json_parser_generic_json@@Base+0xce0>
   300c0:	beq	30a28 <flatcc_json_parser_generic_json@@Base+0xf28>
   300c4:	cmp	r4, r1
   300c8:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   300cc:	ldrb	r2, [r1]
   300d0:	cmp	r2, #32
   300d4:	bne	300f4 <flatcc_json_parser_generic_json@@Base+0x5f4>
   300d8:	add	r3, r1, #1
   300dc:	cmp	r4, r3
   300e0:	mov	r1, r3
   300e4:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   300e8:	ldrb	r2, [r3], #1
   300ec:	cmp	r2, #32
   300f0:	beq	300dc <flatcc_json_parser_generic_json@@Base+0x5dc>
   300f4:	cmp	r2, #32
   300f8:	bhi	301b8 <flatcc_json_parser_generic_json@@Base+0x6b8>
   300fc:	sub	r2, r2, #9
   30100:	cmp	r2, #23
   30104:	ldrls	pc, [pc, r2, lsl #2]
   30108:	b	301c8 <flatcc_json_parser_generic_json@@Base+0x6c8>
   3010c:	andeq	r0, r3, r0, asr #3
   30110:	muleq	r3, r0, r1
   30114:	andeq	r0, r3, r8, asr #3
   30118:	andeq	r0, r3, r8, asr #3
   3011c:	andeq	r0, r3, ip, ror #2
   30120:	andeq	r0, r3, r8, asr #3
   30124:	andeq	r0, r3, r8, asr #3
   30128:	andeq	r0, r3, r8, asr #3
   3012c:	andeq	r0, r3, r8, asr #3
   30130:	andeq	r0, r3, r8, asr #3
   30134:	andeq	r0, r3, r8, asr #3
   30138:	andeq	r0, r3, r8, asr #3
   3013c:	andeq	r0, r3, r8, asr #3
   30140:	andeq	r0, r3, r8, asr #3
   30144:	andeq	r0, r3, r8, asr #3
   30148:	andeq	r0, r3, r8, asr #3
   3014c:	andeq	r0, r3, r8, asr #3
   30150:	andeq	r0, r3, r8, asr #3
   30154:	andeq	r0, r3, r8, asr #3
   30158:	andeq	r0, r3, r8, asr #3
   3015c:	andeq	r0, r3, r8, asr #3
   30160:	andeq	r0, r3, r8, asr #3
   30164:	andeq	r0, r3, r8, asr #3
   30168:	andeq	r0, r3, r4, asr #1
   3016c:	sub	r3, r4, r1
   30170:	add	r2, r1, #1
   30174:	cmp	r3, #1
   30178:	ble	30188 <flatcc_json_parser_generic_json@@Base+0x688>
   3017c:	ldrb	r3, [r1, #1]
   30180:	cmp	r3, #10
   30184:	addeq	r2, r1, #2
   30188:	mov	r1, r2
   3018c:	b	30194 <flatcc_json_parser_generic_json@@Base+0x694>
   30190:	add	r1, r1, #1
   30194:	ldr	r3, [r6, #16]
   30198:	str	r1, [r6, #4]
   3019c:	add	r3, r3, #1
   301a0:	str	r3, [r6, #16]
   301a4:	cmp	r4, r1
   301a8:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   301ac:	ldrb	r2, [r1]
   301b0:	cmp	r2, #32
   301b4:	bls	300fc <flatcc_json_parser_generic_json@@Base+0x5fc>
   301b8:	mov	r0, r1
   301bc:	b	307ec <flatcc_json_parser_generic_json@@Base+0xcec>
   301c0:	add	r1, r1, #1
   301c4:	b	301a4 <flatcc_json_parser_generic_json@@Base+0x6a4>
   301c8:	ldr	r3, [r6, #24]
   301cc:	cmp	r3, #0
   301d0:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   301d4:	ldr	r3, [r6, #4]
   301d8:	mov	r2, #5
   301dc:	str	r1, [r6, #36]	; 0x24
   301e0:	str	r2, [r6, #24]
   301e4:	sub	r1, r1, r3
   301e8:	add	r1, r1, #1
   301ec:	str	r1, [r6, #20]
   301f0:	b	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   301f4:	ldrb	r3, [r0, #2]
   301f8:	cmp	r3, #32
   301fc:	addhi	r5, r0, #2
   30200:	bls	2fe7c <flatcc_json_parser_generic_json@@Base+0x37c>
   30204:	cmp	r4, r5
   30208:	beq	2feb0 <flatcc_json_parser_generic_json@@Base+0x3b0>
   3020c:	cmp	r3, #125	; 0x7d
   30210:	bne	2fb40 <flatcc_json_parser_generic_json@@Base+0x40>
   30214:	b	2ffa8 <flatcc_json_parser_generic_json@@Base+0x4a8>
   30218:	ldrb	r3, [r0, #1]
   3021c:	cmp	r3, #32
   30220:	addhi	r0, r0, #1
   30224:	bls	2fde4 <flatcc_json_parser_generic_json@@Base+0x2e4>
   30228:	b	2fdf4 <flatcc_json_parser_generic_json@@Base+0x2f4>
   3022c:	add	r5, r0, #1
   30230:	sub	r3, r4, r5
   30234:	cmp	r3, #1
   30238:	ble	3024c <flatcc_json_parser_generic_json@@Base+0x74c>
   3023c:	ldrb	r3, [r0, #1]
   30240:	cmp	r3, #32
   30244:	bhi	30334 <flatcc_json_parser_generic_json@@Base+0x834>
   30248:	beq	30324 <flatcc_json_parser_generic_json@@Base+0x824>
   3024c:	cmp	r4, r5
   30250:	beq	30280 <flatcc_json_parser_generic_json@@Base+0x780>
   30254:	ldrb	r3, [r5]
   30258:	cmp	r3, #32
   3025c:	bne	30298 <flatcc_json_parser_generic_json@@Base+0x798>
   30260:	add	r2, r5, #1
   30264:	b	30274 <flatcc_json_parser_generic_json@@Base+0x774>
   30268:	ldrb	r3, [r2], #1
   3026c:	cmp	r3, #32
   30270:	bne	30298 <flatcc_json_parser_generic_json@@Base+0x798>
   30274:	cmp	r2, r4
   30278:	mov	r5, r2
   3027c:	bne	30268 <flatcc_json_parser_generic_json@@Base+0x768>
   30280:	ldr	r3, [r6, #24]
   30284:	cmp	r3, #0
   30288:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   3028c:	mov	r2, #9
   30290:	ldr	r3, [r6, #4]
   30294:	b	2fec4 <flatcc_json_parser_generic_json@@Base+0x3c4>
   30298:	cmp	r3, #32
   3029c:	bhi	3033c <flatcc_json_parser_generic_json@@Base+0x83c>
   302a0:	sub	r3, r3, #9
   302a4:	cmp	r3, #23
   302a8:	ldrls	pc, [pc, r3, lsl #2]
   302ac:	b	30570 <flatcc_json_parser_generic_json@@Base+0xa70>
   302b0:	muleq	r3, r0, r4
   302b4:	andeq	r0, r3, r8, lsl #9
   302b8:	andeq	r0, r3, r0, ror r5
   302bc:	andeq	r0, r3, r0, ror r5
   302c0:	andeq	r0, r3, r0, asr #8
   302c4:	andeq	r0, r3, r0, ror r5
   302c8:	andeq	r0, r3, r0, ror r5
   302cc:	andeq	r0, r3, r0, ror r5
   302d0:	andeq	r0, r3, r0, ror r5
   302d4:	andeq	r0, r3, r0, ror r5
   302d8:	andeq	r0, r3, r0, ror r5
   302dc:	andeq	r0, r3, r0, ror r5
   302e0:	andeq	r0, r3, r0, ror r5
   302e4:	andeq	r0, r3, r0, ror r5
   302e8:	andeq	r0, r3, r0, ror r5
   302ec:	andeq	r0, r3, r0, ror r5
   302f0:	andeq	r0, r3, r0, ror r5
   302f4:	andeq	r0, r3, r0, ror r5
   302f8:	andeq	r0, r3, r0, ror r5
   302fc:	andeq	r0, r3, r0, ror r5
   30300:	andeq	r0, r3, r0, ror r5
   30304:	andeq	r0, r3, r0, ror r5
   30308:	andeq	r0, r3, r0, ror r5
   3030c:	andeq	r0, r3, ip, asr #4
   30310:	cmp	r3, #91	; 0x5b
   30314:	beq	304f4 <flatcc_json_parser_generic_json@@Base+0x9f4>
   30318:	cmp	r3, #123	; 0x7b
   3031c:	beq	2fb78 <flatcc_json_parser_generic_json@@Base+0x78>
   30320:	b	2fd9c <flatcc_json_parser_generic_json@@Base+0x29c>
   30324:	ldrb	r3, [r0, #2]
   30328:	cmp	r3, #32
   3032c:	addhi	r5, r0, #2
   30330:	bls	3024c <flatcc_json_parser_generic_json@@Base+0x74c>
   30334:	cmp	r4, r5
   30338:	beq	30280 <flatcc_json_parser_generic_json@@Base+0x780>
   3033c:	cmp	r3, #93	; 0x5d
   30340:	bne	2fb40 <flatcc_json_parser_generic_json@@Base+0x40>
   30344:	add	r0, r5, #1
   30348:	sub	r3, r4, r0
   3034c:	cmp	r3, #1
   30350:	ble	30b94 <flatcc_json_parser_generic_json@@Base+0x1094>
   30354:	ldrb	r3, [r5, #1]
   30358:	cmp	r3, #32
   3035c:	bhi	307e4 <flatcc_json_parser_generic_json@@Base+0xce4>
   30360:	bne	30b94 <flatcc_json_parser_generic_json@@Base+0x1094>
   30364:	ldrb	r3, [r5, #2]
   30368:	cmp	r3, #32
   3036c:	bls	30b94 <flatcc_json_parser_generic_json@@Base+0x1094>
   30370:	add	r0, r5, #2
   30374:	b	307e4 <flatcc_json_parser_generic_json@@Base+0xce4>
   30378:	add	r1, r0, #1
   3037c:	sub	r3, r4, r1
   30380:	cmp	r3, #1
   30384:	ble	30398 <flatcc_json_parser_generic_json@@Base+0x898>
   30388:	ldrb	r3, [r0, #1]
   3038c:	cmp	r3, #32
   30390:	bhi	307e0 <flatcc_json_parser_generic_json@@Base+0xce0>
   30394:	beq	30a70 <flatcc_json_parser_generic_json@@Base+0xf70>
   30398:	cmp	r4, r1
   3039c:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   303a0:	ldrb	r2, [r1]
   303a4:	cmp	r2, #32
   303a8:	bne	303c8 <flatcc_json_parser_generic_json@@Base+0x8c8>
   303ac:	add	r3, r1, #1
   303b0:	cmp	r4, r3
   303b4:	mov	r1, r3
   303b8:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   303bc:	ldrb	r2, [r3], #1
   303c0:	cmp	r2, #32
   303c4:	beq	303b0 <flatcc_json_parser_generic_json@@Base+0x8b0>
   303c8:	cmp	r2, #32
   303cc:	bhi	301b8 <flatcc_json_parser_generic_json@@Base+0x6b8>
   303d0:	sub	r2, r2, #9
   303d4:	cmp	r2, #23
   303d8:	ldrls	pc, [pc, r2, lsl #2]
   303dc:	b	30588 <flatcc_json_parser_generic_json@@Base+0xa88>
   303e0:	andeq	r0, r3, r4, asr #9
   303e4:	muleq	r3, r8, r4
   303e8:	andeq	r0, r3, r8, lsl #11
   303ec:	andeq	r0, r3, r8, lsl #11
   303f0:	andeq	r0, r3, ip, asr #9
   303f4:	andeq	r0, r3, r8, lsl #11
   303f8:	andeq	r0, r3, r8, lsl #11
   303fc:	andeq	r0, r3, r8, lsl #11
   30400:	andeq	r0, r3, r8, lsl #11
   30404:	andeq	r0, r3, r8, lsl #11
   30408:	andeq	r0, r3, r8, lsl #11
   3040c:	andeq	r0, r3, r8, lsl #11
   30410:	andeq	r0, r3, r8, lsl #11
   30414:	andeq	r0, r3, r8, lsl #11
   30418:	andeq	r0, r3, r8, lsl #11
   3041c:	andeq	r0, r3, r8, lsl #11
   30420:	andeq	r0, r3, r8, lsl #11
   30424:	andeq	r0, r3, r8, lsl #11
   30428:	andeq	r0, r3, r8, lsl #11
   3042c:	andeq	r0, r3, r8, lsl #11
   30430:	andeq	r0, r3, r8, lsl #11
   30434:	andeq	r0, r3, r8, lsl #11
   30438:	andeq	r0, r3, r8, lsl #11
   3043c:	muleq	r3, r8, r3
   30440:	sub	r3, r4, r5
   30444:	add	r2, r5, #1
   30448:	cmp	r3, #1
   3044c:	ble	3045c <flatcc_json_parser_generic_json@@Base+0x95c>
   30450:	ldrb	r3, [r5, #1]
   30454:	cmp	r3, #10
   30458:	addeq	r2, r5, #2
   3045c:	mov	r5, r2
   30460:	ldr	r3, [r6, #16]
   30464:	str	r5, [r6, #4]
   30468:	add	r3, r3, #1
   3046c:	str	r3, [r6, #16]
   30470:	cmp	r4, r5
   30474:	beq	30280 <flatcc_json_parser_generic_json@@Base+0x780>
   30478:	ldrb	r3, [r5]
   3047c:	cmp	r3, #32
   30480:	bls	302a0 <flatcc_json_parser_generic_json@@Base+0x7a0>
   30484:	b	3033c <flatcc_json_parser_generic_json@@Base+0x83c>
   30488:	add	r5, r5, #1
   3048c:	b	30460 <flatcc_json_parser_generic_json@@Base+0x960>
   30490:	add	r5, r5, #1
   30494:	b	30470 <flatcc_json_parser_generic_json@@Base+0x970>
   30498:	add	r1, r1, #1
   3049c:	ldr	r3, [r6, #16]
   304a0:	str	r1, [r6, #4]
   304a4:	add	r3, r3, #1
   304a8:	str	r3, [r6, #16]
   304ac:	cmp	r4, r1
   304b0:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   304b4:	ldrb	r2, [r1]
   304b8:	cmp	r2, #32
   304bc:	bls	303d0 <flatcc_json_parser_generic_json@@Base+0x8d0>
   304c0:	b	301b8 <flatcc_json_parser_generic_json@@Base+0x6b8>
   304c4:	add	r1, r1, #1
   304c8:	b	304ac <flatcc_json_parser_generic_json@@Base+0x9ac>
   304cc:	sub	r3, r4, r1
   304d0:	add	r2, r1, #1
   304d4:	cmp	r3, #1
   304d8:	ble	304e8 <flatcc_json_parser_generic_json@@Base+0x9e8>
   304dc:	ldrb	r3, [r1, #1]
   304e0:	cmp	r3, #10
   304e4:	addeq	r2, r1, #2
   304e8:	mov	r1, r2
   304ec:	b	3049c <flatcc_json_parser_generic_json@@Base+0x99c>
   304f0:	mov	r5, r4
   304f4:	add	r3, sp, #520	; 0x208
   304f8:	cmp	r7, r3
   304fc:	beq	31184 <flatcc_json_parser_generic_json@@Base+0x1684>
   30500:	add	r1, r5, #1
   30504:	mov	r3, #93	; 0x5d
   30508:	sub	r2, r4, r1
   3050c:	cmp	r2, #1
   30510:	strb	r3, [r7], #1
   30514:	ble	30538 <flatcc_json_parser_generic_json@@Base+0xa38>
   30518:	ldrb	r3, [r5, #1]
   3051c:	cmp	r3, #32
   30520:	bhi	30a3c <flatcc_json_parser_generic_json@@Base+0xf3c>
   30524:	bne	30538 <flatcc_json_parser_generic_json@@Base+0xa38>
   30528:	ldrb	r3, [r5, #2]
   3052c:	cmp	r3, #32
   30530:	addhi	r5, r5, #2
   30534:	bhi	30a40 <flatcc_json_parser_generic_json@@Base+0xf40>
   30538:	cmp	r1, r4
   3053c:	beq	2fbe0 <flatcc_json_parser_generic_json@@Base+0xe0>
   30540:	ldrb	r3, [r1]
   30544:	cmp	r3, #32
   30548:	bne	3070c <flatcc_json_parser_generic_json@@Base+0xc0c>
   3054c:	add	r2, r1, #1
   30550:	b	30560 <flatcc_json_parser_generic_json@@Base+0xa60>
   30554:	ldrb	r3, [r2], #1
   30558:	cmp	r3, #32
   3055c:	bne	3070c <flatcc_json_parser_generic_json@@Base+0xc0c>
   30560:	cmp	r4, r2
   30564:	mov	r1, r2
   30568:	bne	30554 <flatcc_json_parser_generic_json@@Base+0xa54>
   3056c:	b	2fbe0 <flatcc_json_parser_generic_json@@Base+0xe0>
   30570:	ldr	r3, [r6, #24]
   30574:	cmp	r3, #0
   30578:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   3057c:	mov	r2, #5
   30580:	ldr	r3, [r6, #4]
   30584:	b	2fec4 <flatcc_json_parser_generic_json@@Base+0x3c4>
   30588:	ldr	r3, [r6, #24]
   3058c:	cmp	r3, #0
   30590:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30594:	ldr	r3, [r6, #4]
   30598:	mov	r2, #5
   3059c:	str	r2, [r6, #24]
   305a0:	str	r1, [r6, #36]	; 0x24
   305a4:	sub	r3, r1, r3
   305a8:	add	r3, r3, #1
   305ac:	str	r3, [r6, #20]
   305b0:	b	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   305b4:	cmp	r3, #31
   305b8:	bhi	2fc7c <flatcc_json_parser_generic_json@@Base+0x17c>
   305bc:	ldr	r3, [r6, #24]
   305c0:	cmp	r3, #0
   305c4:	bne	305e8 <flatcc_json_parser_generic_json@@Base+0xae8>
   305c8:	ldr	r3, [r6, #4]
   305cc:	str	r9, [r6, #24]
   305d0:	sub	r3, r1, r3
   305d4:	str	r1, [r6, #36]	; 0x24
   305d8:	mov	r1, r4
   305dc:	add	r3, r3, #1
   305e0:	str	r3, [r6, #20]
   305e4:	b	2fc7c <flatcc_json_parser_generic_json@@Base+0x17c>
   305e8:	mov	r1, r4
   305ec:	b	2fc7c <flatcc_json_parser_generic_json@@Base+0x17c>
   305f0:	ldr	r3, [r6, #24]
   305f4:	cmp	r3, #0
   305f8:	bne	305e8 <flatcc_json_parser_generic_json@@Base+0xae8>
   305fc:	str	r5, [r6, #24]
   30600:	ldr	r3, [r6, #4]
   30604:	b	305d0 <flatcc_json_parser_generic_json@@Base+0xad0>
   30608:	cmp	r3, #32
   3060c:	bhi	306cc <flatcc_json_parser_generic_json@@Base+0xbcc>
   30610:	sub	r3, r3, #9
   30614:	cmp	r3, #23
   30618:	ldrls	pc, [pc, r3, lsl #2]
   3061c:	b	306dc <flatcc_json_parser_generic_json@@Base+0xbdc>
   30620:	ldrdeq	r0, [r3], -r4
   30624:	andeq	r0, r3, r4, lsr #13
   30628:	ldrdeq	r0, [r3], -ip
   3062c:	ldrdeq	r0, [r3], -ip
   30630:	andeq	r0, r3, r0, lsl #13
   30634:	ldrdeq	r0, [r3], -ip
   30638:	ldrdeq	r0, [r3], -ip
   3063c:	ldrdeq	r0, [r3], -ip
   30640:	ldrdeq	r0, [r3], -ip
   30644:	ldrdeq	r0, [r3], -ip
   30648:	ldrdeq	r0, [r3], -ip
   3064c:	ldrdeq	r0, [r3], -ip
   30650:	ldrdeq	r0, [r3], -ip
   30654:	ldrdeq	r0, [r3], -ip
   30658:	ldrdeq	r0, [r3], -ip
   3065c:	ldrdeq	r0, [r3], -ip
   30660:	ldrdeq	r0, [r3], -ip
   30664:	ldrdeq	r0, [r3], -ip
   30668:	ldrdeq	r0, [r3], -ip
   3066c:	ldrdeq	r0, [r3], -ip
   30670:	ldrdeq	r0, [r3], -ip
   30674:	ldrdeq	r0, [r3], -ip
   30678:	ldrdeq	r0, [r3], -ip
   3067c:	andeq	pc, r2, ip, lsr #23
   30680:	sub	r3, r4, r1
   30684:	add	r2, r1, #1
   30688:	cmp	r3, #1
   3068c:	ble	3069c <flatcc_json_parser_generic_json@@Base+0xb9c>
   30690:	ldrb	r3, [r1, #1]
   30694:	cmp	r3, #10
   30698:	addeq	r2, r1, #2
   3069c:	mov	r1, r2
   306a0:	b	306a8 <flatcc_json_parser_generic_json@@Base+0xba8>
   306a4:	add	r1, r1, #1
   306a8:	ldr	r3, [r6, #16]
   306ac:	str	r1, [r6, #4]
   306b0:	add	r3, r3, #1
   306b4:	str	r3, [r6, #16]
   306b8:	cmp	r4, r1
   306bc:	beq	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   306c0:	ldrb	r3, [r1]
   306c4:	cmp	r3, #32
   306c8:	bls	30610 <flatcc_json_parser_generic_json@@Base+0xb10>
   306cc:	mov	r5, r1
   306d0:	b	30a64 <flatcc_json_parser_generic_json@@Base+0xf64>
   306d4:	add	r1, r1, #1
   306d8:	b	306b8 <flatcc_json_parser_generic_json@@Base+0xbb8>
   306dc:	ldr	r3, [r6, #24]
   306e0:	cmp	r3, #0
   306e4:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   306e8:	ldr	r3, [r6, #4]
   306ec:	mov	r2, #5
   306f0:	str	r2, [r6, #24]
   306f4:	str	r1, [r6, #36]	; 0x24
   306f8:	sub	r3, r1, r3
   306fc:	add	r3, r3, #1
   30700:	str	r3, [r6, #20]
   30704:	mov	r0, r4
   30708:	b	2fd60 <flatcc_json_parser_generic_json@@Base+0x260>
   3070c:	cmp	r3, #32
   30710:	bhi	307d0 <flatcc_json_parser_generic_json@@Base+0xcd0>
   30714:	sub	r3, r3, #9
   30718:	cmp	r3, #23
   3071c:	ldrls	pc, [pc, r3, lsl #2]
   30720:	b	306dc <flatcc_json_parser_generic_json@@Base+0xbdc>
   30724:	ldrdeq	r0, [r3], -r8
   30728:	andeq	r0, r3, r8, lsr #15
   3072c:	ldrdeq	r0, [r3], -ip
   30730:	ldrdeq	r0, [r3], -ip
   30734:	andeq	r0, r3, r4, lsl #15
   30738:	ldrdeq	r0, [r3], -ip
   3073c:	ldrdeq	r0, [r3], -ip
   30740:	ldrdeq	r0, [r3], -ip
   30744:	ldrdeq	r0, [r3], -ip
   30748:	ldrdeq	r0, [r3], -ip
   3074c:	ldrdeq	r0, [r3], -ip
   30750:	ldrdeq	r0, [r3], -ip
   30754:	ldrdeq	r0, [r3], -ip
   30758:	ldrdeq	r0, [r3], -ip
   3075c:	ldrdeq	r0, [r3], -ip
   30760:	ldrdeq	r0, [r3], -ip
   30764:	ldrdeq	r0, [r3], -ip
   30768:	ldrdeq	r0, [r3], -ip
   3076c:	ldrdeq	r0, [r3], -ip
   30770:	ldrdeq	r0, [r3], -ip
   30774:	ldrdeq	r0, [r3], -ip
   30778:	ldrdeq	r0, [r3], -ip
   3077c:	ldrdeq	r0, [r3], -ip
   30780:	andeq	r0, r3, r8, lsr r5
   30784:	sub	r3, r4, r1
   30788:	add	r2, r1, #1
   3078c:	cmp	r3, #1
   30790:	ble	307a0 <flatcc_json_parser_generic_json@@Base+0xca0>
   30794:	ldrb	r3, [r1, #1]
   30798:	cmp	r3, #10
   3079c:	addeq	r2, r1, #2
   307a0:	mov	r1, r2
   307a4:	b	307ac <flatcc_json_parser_generic_json@@Base+0xcac>
   307a8:	add	r1, r1, #1
   307ac:	ldr	r3, [r6, #16]
   307b0:	str	r1, [r6, #4]
   307b4:	add	r3, r3, #1
   307b8:	str	r3, [r6, #16]
   307bc:	cmp	r4, r1
   307c0:	beq	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   307c4:	ldrb	r3, [r1]
   307c8:	cmp	r3, #32
   307cc:	bls	30714 <flatcc_json_parser_generic_json@@Base+0xc14>
   307d0:	mov	r5, r1
   307d4:	b	30a48 <flatcc_json_parser_generic_json@@Base+0xf48>
   307d8:	add	r1, r1, #1
   307dc:	b	307bc <flatcc_json_parser_generic_json@@Base+0xcbc>
   307e0:	mov	r0, r1
   307e4:	cmp	r0, r4
   307e8:	beq	2fd20 <flatcc_json_parser_generic_json@@Base+0x220>
   307ec:	mov	r7, fp
   307f0:	b	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   307f4:	cmp	r4, r5
   307f8:	beq	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   307fc:	cmp	r3, #45	; 0x2d
   30800:	beq	30ecc <flatcc_json_parser_generic_json@@Base+0x13cc>
   30804:	cmp	r3, #48	; 0x30
   30808:	beq	31070 <flatcc_json_parser_generic_json@@Base+0x1570>
   3080c:	sub	r3, r3, #49	; 0x31
   30810:	uxtb	r3, r3
   30814:	cmp	r3, #8
   30818:	bhi	30b0c <flatcc_json_parser_generic_json@@Base+0x100c>
   3081c:	add	r0, r5, #1
   30820:	cmp	r4, r0
   30824:	beq	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   30828:	ldrb	r3, [r5, #1]
   3082c:	sub	r2, r3, #48	; 0x30
   30830:	cmp	r2, #9
   30834:	bhi	30858 <flatcc_json_parser_generic_json@@Base+0xd58>
   30838:	add	r5, r5, #2
   3083c:	cmp	r4, r5
   30840:	mov	r0, r5
   30844:	beq	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   30848:	ldrb	r3, [r5], #1
   3084c:	sub	r2, r3, #48	; 0x30
   30850:	cmp	r2, #9
   30854:	bls	3083c <flatcc_json_parser_generic_json@@Base+0xd3c>
   30858:	cmp	r3, #46	; 0x2e
   3085c:	beq	31094 <flatcc_json_parser_generic_json@@Base+0x1594>
   30860:	and	r2, r3, #223	; 0xdf
   30864:	cmp	r2, #69	; 0x45
   30868:	bne	3101c <flatcc_json_parser_generic_json@@Base+0x151c>
   3086c:	add	r2, r0, #1
   30870:	cmp	r4, r2
   30874:	beq	31248 <flatcc_json_parser_generic_json@@Base+0x1748>
   30878:	ldrb	r3, [r0, #1]
   3087c:	sub	r1, r3, #43	; 0x2b
   30880:	tst	r1, #253	; 0xfd
   30884:	bne	30898 <flatcc_json_parser_generic_json@@Base+0xd98>
   30888:	add	r2, r0, #2
   3088c:	cmp	r4, r2
   30890:	beq	308a4 <flatcc_json_parser_generic_json@@Base+0xda4>
   30894:	ldrb	r3, [r0, #2]
   30898:	sub	r3, r3, #48	; 0x30
   3089c:	cmp	r3, #9
   308a0:	bls	30fe0 <flatcc_json_parser_generic_json@@Base+0x14e0>
   308a4:	ldr	r3, [r6, #24]
   308a8:	cmp	r3, #0
   308ac:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   308b0:	ldr	r3, [r6, #4]
   308b4:	mov	r1, #6
   308b8:	mov	r0, r4
   308bc:	str	r2, [r6, #36]	; 0x24
   308c0:	str	r1, [r6, #24]
   308c4:	sub	r2, r2, r3
   308c8:	add	r3, r2, #1
   308cc:	str	r3, [r6, #20]
   308d0:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   308d4:	ldrb	r3, [r2, #2]
   308d8:	cmp	r3, #32
   308dc:	addhi	r5, r2, #2
   308e0:	bls	30d84 <flatcc_json_parser_generic_json@@Base+0x1284>
   308e4:	cmp	r3, #57	; 0x39
   308e8:	bhi	2fb5c <flatcc_json_parser_generic_json@@Base+0x5c>
   308ec:	cmp	r3, #48	; 0x30
   308f0:	bcs	307f4 <flatcc_json_parser_generic_json@@Base+0xcf4>
   308f4:	cmp	r3, #34	; 0x22
   308f8:	bne	2fd94 <flatcc_json_parser_generic_json@@Base+0x294>
   308fc:	cmp	r5, r4
   30900:	bne	2fc00 <flatcc_json_parser_generic_json@@Base+0x100>
   30904:	ldr	r2, [r6, #24]
   30908:	cmp	r2, #0
   3090c:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   30910:	ldr	r3, [r6, #4]
   30914:	mov	r2, #16
   30918:	str	r2, [r6, #24]
   3091c:	str	r4, [r6, #36]	; 0x24
   30920:	sub	r3, r4, r3
   30924:	add	r3, r3, #1
   30928:	str	r3, [r6, #20]
   3092c:	mov	r0, r4
   30930:	mov	fp, r7
   30934:	b	2fd20 <flatcc_json_parser_generic_json@@Base+0x220>
   30938:	cmp	r3, #34	; 0x22
   3093c:	beq	30a80 <flatcc_json_parser_generic_json@@Base+0xf80>
   30940:	cmp	r3, #46	; 0x2e
   30944:	beq	311b4 <flatcc_json_parser_generic_json@@Base+0x16b4>
   30948:	mov	r3, #1
   3094c:	cmp	r4, r5
   30950:	str	r3, [r6, #12]
   30954:	beq	31310 <flatcc_json_parser_generic_json@@Base+0x1810>
   30958:	ldrb	r3, [r5]
   3095c:	cmp	r3, #32
   30960:	movls	r2, r5
   30964:	bls	309a8 <flatcc_json_parser_generic_json@@Base+0xea8>
   30968:	sub	r2, r3, #48	; 0x30
   3096c:	cmp	r3, #46	; 0x2e
   30970:	cmpne	r3, #95	; 0x5f
   30974:	uxtb	ip, r2
   30978:	add	r0, r5, #1
   3097c:	mov	r2, r5
   30980:	beq	30c6c <flatcc_json_parser_generic_json@@Base+0x116c>
   30984:	orr	r1, r3, #32
   30988:	tst	r3, #128	; 0x80
   3098c:	sub	r1, r1, #97	; 0x61
   30990:	bne	30c6c <flatcc_json_parser_generic_json@@Base+0x116c>
   30994:	cmp	ip, #9
   30998:	uxtb	r1, r1
   3099c:	bls	30c6c <flatcc_json_parser_generic_json@@Base+0x116c>
   309a0:	cmp	r1, #25
   309a4:	bls	30c68 <flatcc_json_parser_generic_json@@Base+0x1168>
   309a8:	sub	r3, r4, r2
   309ac:	cmp	r3, #1
   309b0:	ble	309c4 <flatcc_json_parser_generic_json@@Base+0xec4>
   309b4:	ldrb	r1, [r2]
   309b8:	cmp	r1, #32
   309bc:	bhi	30f58 <flatcc_json_parser_generic_json@@Base+0x1458>
   309c0:	beq	30f48 <flatcc_json_parser_generic_json@@Base+0x1448>
   309c4:	cmp	r4, r2
   309c8:	beq	309f8 <flatcc_json_parser_generic_json@@Base+0xef8>
   309cc:	ldrb	r1, [r2]
   309d0:	cmp	r1, #32
   309d4:	bne	30c90 <flatcc_json_parser_generic_json@@Base+0x1190>
   309d8:	add	r3, r2, #1
   309dc:	b	309ec <flatcc_json_parser_generic_json@@Base+0xeec>
   309e0:	ldrb	r1, [r3], #1
   309e4:	cmp	r1, #32
   309e8:	bne	30c90 <flatcc_json_parser_generic_json@@Base+0x1190>
   309ec:	cmp	r4, r3
   309f0:	mov	r2, r3
   309f4:	bne	309e0 <flatcc_json_parser_generic_json@@Base+0xee0>
   309f8:	ldr	r1, [r6, #24]
   309fc:	cmp	r1, #0
   30a00:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   30a04:	ldr	r3, [r6, #4]
   30a08:	mov	r1, #10
   30a0c:	sub	r3, r2, r3
   30a10:	mov	r0, r4
   30a14:	str	r1, [r6, #24]
   30a18:	add	r3, r3, #1
   30a1c:	str	r3, [r6, #20]
   30a20:	str	r2, [r6, #36]	; 0x24
   30a24:	b	2fd60 <flatcc_json_parser_generic_json@@Base+0x260>
   30a28:	ldrb	r3, [r0, #2]
   30a2c:	cmp	r3, #32
   30a30:	bls	300c4 <flatcc_json_parser_generic_json@@Base+0x5c4>
   30a34:	add	r0, r0, #2
   30a38:	b	307e4 <flatcc_json_parser_generic_json@@Base+0xce4>
   30a3c:	mov	r5, r1
   30a40:	cmp	r4, r5
   30a44:	beq	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   30a48:	cmp	r3, #93	; 0x5d
   30a4c:	bne	2fb40 <flatcc_json_parser_generic_json@@Base+0x40>
   30a50:	mov	r0, r5
   30a54:	b	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   30a58:	mov	r5, r1
   30a5c:	cmp	r4, r5
   30a60:	beq	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   30a64:	cmp	r3, #125	; 0x7d
   30a68:	bne	2fb40 <flatcc_json_parser_generic_json@@Base+0x40>
   30a6c:	b	30a50 <flatcc_json_parser_generic_json@@Base+0xf50>
   30a70:	ldrb	r3, [r0, #2]
   30a74:	cmp	r3, #32
   30a78:	bls	30398 <flatcc_json_parser_generic_json@@Base+0x898>
   30a7c:	b	30a34 <flatcc_json_parser_generic_json@@Base+0xf34>
   30a80:	add	r2, r5, #1
   30a84:	mov	r3, #0
   30a88:	cmp	r4, r2
   30a8c:	str	r3, [r6, #12]
   30a90:	beq	30ad8 <flatcc_json_parser_generic_json@@Base+0xfd8>
   30a94:	ldrb	r1, [r5, #1]
   30a98:	cmp	r1, #34	; 0x22
   30a9c:	bne	30abc <flatcc_json_parser_generic_json@@Base+0xfbc>
   30aa0:	b	3108c <flatcc_json_parser_generic_json@@Base+0x158c>
   30aa4:	add	r2, r3, #1
   30aa8:	cmp	r4, r2
   30aac:	beq	30ad8 <flatcc_json_parser_generic_json@@Base+0xfd8>
   30ab0:	ldrb	r1, [r3, #1]
   30ab4:	cmp	r1, #34	; 0x22
   30ab8:	beq	3108c <flatcc_json_parser_generic_json@@Base+0x158c>
   30abc:	cmp	r1, #92	; 0x5c
   30ac0:	mov	r3, r2
   30ac4:	bne	30aa4 <flatcc_json_parser_generic_json@@Base+0xfa4>
   30ac8:	sub	r1, r4, r2
   30acc:	add	r3, r2, #1
   30ad0:	cmp	r1, #1
   30ad4:	bgt	30aa4 <flatcc_json_parser_generic_json@@Base+0xfa4>
   30ad8:	ldr	r1, [r6, #24]
   30adc:	cmp	r1, #0
   30ae0:	bne	30b04 <flatcc_json_parser_generic_json@@Base+0x1004>
   30ae4:	ldr	r0, [r6, #4]
   30ae8:	mov	r3, #20
   30aec:	mov	r1, r3
   30af0:	str	r2, [r6, #36]	; 0x24
   30af4:	str	r3, [r6, #24]
   30af8:	sub	r2, r2, r0
   30afc:	add	r3, r2, #1
   30b00:	str	r3, [r6, #20]
   30b04:	mov	r2, r4
   30b08:	b	309fc <flatcc_json_parser_generic_json@@Base+0xefc>
   30b0c:	ldr	r3, [r6, #24]
   30b10:	cmp	r3, #0
   30b14:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   30b18:	ldr	r3, [r6, #4]
   30b1c:	mov	r2, #6
   30b20:	mov	r0, r4
   30b24:	str	r2, [r6, #24]
   30b28:	str	r5, [r6, #36]	; 0x24
   30b2c:	sub	r3, r5, r3
   30b30:	add	r3, r3, #1
   30b34:	str	r3, [r6, #20]
   30b38:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   30b3c:	sub	r3, r4, r0
   30b40:	add	r2, r0, #1
   30b44:	cmp	r3, #1
   30b48:	ble	30b58 <flatcc_json_parser_generic_json@@Base+0x1058>
   30b4c:	ldrb	r3, [r0, #1]
   30b50:	cmp	r3, #10
   30b54:	addeq	r2, r0, #2
   30b58:	mov	r0, r2
   30b5c:	b	30b64 <flatcc_json_parser_generic_json@@Base+0x1064>
   30b60:	add	r0, r0, #1
   30b64:	ldr	r3, [r6, #16]
   30b68:	str	r0, [r6, #4]
   30b6c:	add	r3, r3, #1
   30b70:	str	r3, [r6, #16]
   30b74:	cmp	r4, r0
   30b78:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30b7c:	ldrb	r2, [r0]
   30b80:	cmp	r2, #32
   30b84:	bls	30000 <flatcc_json_parser_generic_json@@Base+0x500>
   30b88:	b	307ec <flatcc_json_parser_generic_json@@Base+0xcec>
   30b8c:	add	r0, r0, #1
   30b90:	b	30b74 <flatcc_json_parser_generic_json@@Base+0x1074>
   30b94:	cmp	r4, r0
   30b98:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30b9c:	ldrb	r2, [r0]
   30ba0:	cmp	r2, #32
   30ba4:	bne	30bc4 <flatcc_json_parser_generic_json@@Base+0x10c4>
   30ba8:	add	r3, r0, #1
   30bac:	cmp	r3, r4
   30bb0:	mov	r0, r3
   30bb4:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30bb8:	ldrb	r2, [r3], #1
   30bbc:	cmp	r2, #32
   30bc0:	beq	30bac <flatcc_json_parser_generic_json@@Base+0x10ac>
   30bc4:	cmp	r2, #32
   30bc8:	bhi	307ec <flatcc_json_parser_generic_json@@Base+0xcec>
   30bcc:	sub	r2, r2, #9
   30bd0:	cmp	r2, #23
   30bd4:	ldrls	pc, [pc, r2, lsl #2]
   30bd8:	b	30c3c <flatcc_json_parser_generic_json@@Base+0x113c>
   30bdc:	andeq	r1, r3, r8, lsr r1
   30be0:	andeq	r1, r3, r0, lsr r1
   30be4:	andeq	r0, r3, ip, lsr ip
   30be8:	andeq	r0, r3, ip, lsr ip
   30bec:	andeq	r1, r3, r8, ror #1
   30bf0:	andeq	r0, r3, ip, lsr ip
   30bf4:	andeq	r0, r3, ip, lsr ip
   30bf8:	andeq	r0, r3, ip, lsr ip
   30bfc:	andeq	r0, r3, ip, lsr ip
   30c00:	andeq	r0, r3, ip, lsr ip
   30c04:	andeq	r0, r3, ip, lsr ip
   30c08:	andeq	r0, r3, ip, lsr ip
   30c0c:	andeq	r0, r3, ip, lsr ip
   30c10:	andeq	r0, r3, ip, lsr ip
   30c14:	andeq	r0, r3, ip, lsr ip
   30c18:	andeq	r0, r3, ip, lsr ip
   30c1c:	andeq	r0, r3, ip, lsr ip
   30c20:	andeq	r0, r3, ip, lsr ip
   30c24:	andeq	r0, r3, ip, lsr ip
   30c28:	andeq	r0, r3, ip, lsr ip
   30c2c:	andeq	r0, r3, ip, lsr ip
   30c30:	andeq	r0, r3, ip, lsr ip
   30c34:	andeq	r0, r3, ip, lsr ip
   30c38:	muleq	r3, r4, fp
   30c3c:	ldr	r3, [r6, #24]
   30c40:	cmp	r3, #0
   30c44:	bne	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30c48:	ldr	r3, [r6, #4]
   30c4c:	mov	r2, #5
   30c50:	str	r2, [r6, #24]
   30c54:	str	r0, [r6, #36]	; 0x24
   30c58:	sub	r3, r0, r3
   30c5c:	add	r3, r3, #1
   30c60:	str	r3, [r6, #20]
   30c64:	b	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   30c68:	add	r0, r5, #1
   30c6c:	cmp	r4, r0
   30c70:	mov	r2, r0
   30c74:	mov	r5, r0
   30c78:	beq	311e4 <flatcc_json_parser_generic_json@@Base+0x16e4>
   30c7c:	ldrb	r1, [r0]
   30c80:	cmp	r1, #32
   30c84:	bls	311e4 <flatcc_json_parser_generic_json@@Base+0x16e4>
   30c88:	mov	r3, r1
   30c8c:	b	30968 <flatcc_json_parser_generic_json@@Base+0xe68>
   30c90:	cmp	r1, #32
   30c94:	bhi	30d58 <flatcc_json_parser_generic_json@@Base+0x1258>
   30c98:	sub	r1, r1, #9
   30c9c:	cmp	r1, #23
   30ca0:	ldrls	pc, [pc, r1, lsl #2]
   30ca4:	b	30e30 <flatcc_json_parser_generic_json@@Base+0x1330>
   30ca8:	andeq	r0, r3, r8, lsr #28
   30cac:	andeq	r0, r3, r0, lsr #28
   30cb0:	andeq	r0, r3, r0, lsr lr
   30cb4:	andeq	r0, r3, r0, lsr lr
   30cb8:	andeq	r0, r3, r4, lsl sp
   30cbc:	andeq	r0, r3, r0, lsr lr
   30cc0:	andeq	r0, r3, r0, lsr lr
   30cc4:	andeq	r0, r3, r0, lsr lr
   30cc8:	andeq	r0, r3, r0, lsr lr
   30ccc:	andeq	r0, r3, r0, lsr lr
   30cd0:	andeq	r0, r3, r0, lsr lr
   30cd4:	andeq	r0, r3, r0, lsr lr
   30cd8:	andeq	r0, r3, r0, lsr lr
   30cdc:	andeq	r0, r3, r0, lsr lr
   30ce0:	andeq	r0, r3, r0, lsr lr
   30ce4:	andeq	r0, r3, r0, lsr lr
   30ce8:	andeq	r0, r3, r0, lsr lr
   30cec:	andeq	r0, r3, r0, lsr lr
   30cf0:	andeq	r0, r3, r0, lsr lr
   30cf4:	andeq	r0, r3, r0, lsr lr
   30cf8:	andeq	r0, r3, r0, lsr lr
   30cfc:	andeq	r0, r3, r0, lsr lr
   30d00:	andeq	r0, r3, r0, lsr lr
   30d04:	andeq	r0, r3, r8, lsl #26
   30d08:	cmp	r2, r4
   30d0c:	bne	309cc <flatcc_json_parser_generic_json@@Base+0xecc>
   30d10:	b	309f8 <flatcc_json_parser_generic_json@@Base+0xef8>
   30d14:	sub	r3, r4, r2
   30d18:	add	r1, r2, #1
   30d1c:	cmp	r3, #1
   30d20:	ble	30d30 <flatcc_json_parser_generic_json@@Base+0x1230>
   30d24:	ldrb	r3, [r2, #1]
   30d28:	cmp	r3, #10
   30d2c:	addeq	r1, r2, #2
   30d30:	mov	r2, r1
   30d34:	ldr	r3, [r6, #16]
   30d38:	str	r2, [r6, #4]
   30d3c:	add	r3, r3, #1
   30d40:	str	r3, [r6, #16]
   30d44:	cmp	r4, r2
   30d48:	beq	309f8 <flatcc_json_parser_generic_json@@Base+0xef8>
   30d4c:	ldrb	r1, [r2]
   30d50:	cmp	r1, #32
   30d54:	bls	30c98 <flatcc_json_parser_generic_json@@Base+0x1198>
   30d58:	cmp	r1, #58	; 0x3a
   30d5c:	bne	3129c <flatcc_json_parser_generic_json@@Base+0x179c>
   30d60:	add	r5, r2, #1
   30d64:	sub	r3, r4, r5
   30d68:	cmp	r3, #1
   30d6c:	ble	31084 <flatcc_json_parser_generic_json@@Base+0x1584>
   30d70:	ldrb	r3, [r2, #1]
   30d74:	cmp	r3, #32
   30d78:	mov	r1, r3
   30d7c:	bhi	308e4 <flatcc_json_parser_generic_json@@Base+0xde4>
   30d80:	beq	308d4 <flatcc_json_parser_generic_json@@Base+0xdd4>
   30d84:	cmp	r5, r4
   30d88:	mov	r3, r1
   30d8c:	bne	30da0 <flatcc_json_parser_generic_json@@Base+0x12a0>
   30d90:	b	2fd7c <flatcc_json_parser_generic_json@@Base+0x27c>
   30d94:	ldrb	r3, [r5, #1]!
   30d98:	cmp	r4, r5
   30d9c:	beq	2fd7c <flatcc_json_parser_generic_json@@Base+0x27c>
   30da0:	cmp	r3, #32
   30da4:	beq	30d94 <flatcc_json_parser_generic_json@@Base+0x1294>
   30da8:	cmp	r3, #32
   30dac:	bhi	2fb54 <flatcc_json_parser_generic_json@@Base+0x54>
   30db0:	sub	r3, r3, #9
   30db4:	cmp	r3, #23
   30db8:	ldrls	pc, [pc, r3, lsl #2]
   30dbc:	b	30ef4 <flatcc_json_parser_generic_json@@Base+0x13f4>
   30dc0:	andeq	r0, r3, ip, ror #29
   30dc4:	andeq	r0, r3, r4, ror #29
   30dc8:	strdeq	r0, [r3], -r4
   30dcc:	strdeq	r0, [r3], -r4
   30dd0:	andeq	r0, r3, r8, ror #28
   30dd4:	strdeq	r0, [r3], -r4
   30dd8:	strdeq	r0, [r3], -r4
   30ddc:	strdeq	r0, [r3], -r4
   30de0:	strdeq	r0, [r3], -r4
   30de4:	strdeq	r0, [r3], -r4
   30de8:	strdeq	r0, [r3], -r4
   30dec:	strdeq	r0, [r3], -r4
   30df0:	strdeq	r0, [r3], -r4
   30df4:	strdeq	r0, [r3], -r4
   30df8:	strdeq	r0, [r3], -r4
   30dfc:	strdeq	r0, [r3], -r4
   30e00:	strdeq	r0, [r3], -r4
   30e04:	strdeq	r0, [r3], -r4
   30e08:	strdeq	r0, [r3], -r4
   30e0c:	strdeq	r0, [r3], -r4
   30e10:	strdeq	r0, [r3], -r4
   30e14:	strdeq	r0, [r3], -r4
   30e18:	strdeq	r0, [r3], -r4
   30e1c:	andeq	r0, r3, ip, asr lr
   30e20:	add	r2, r2, #1
   30e24:	b	30d34 <flatcc_json_parser_generic_json@@Base+0x1234>
   30e28:	add	r2, r2, #1
   30e2c:	b	30d44 <flatcc_json_parser_generic_json@@Base+0x1244>
   30e30:	ldr	r3, [r6, #24]
   30e34:	cmp	r3, #0
   30e38:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   30e3c:	ldr	r3, [r6, #4]
   30e40:	mov	r1, #5
   30e44:	str	r1, [r6, #24]
   30e48:	str	r2, [r6, #36]	; 0x24
   30e4c:	sub	r3, r2, r3
   30e50:	add	r3, r3, #1
   30e54:	str	r3, [r6, #20]
   30e58:	b	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   30e5c:	cmp	r4, r5
   30e60:	bne	30d94 <flatcc_json_parser_generic_json@@Base+0x1294>
   30e64:	b	2fd9c <flatcc_json_parser_generic_json@@Base+0x29c>
   30e68:	sub	r3, r4, r5
   30e6c:	add	r2, r5, #1
   30e70:	cmp	r3, #1
   30e74:	ble	30e84 <flatcc_json_parser_generic_json@@Base+0x1384>
   30e78:	ldrb	r3, [r5, #1]
   30e7c:	cmp	r3, #10
   30e80:	addeq	r2, r5, #2
   30e84:	mov	r5, r2
   30e88:	ldr	r3, [r6, #16]
   30e8c:	str	r5, [r6, #4]
   30e90:	add	r3, r3, #1
   30e94:	str	r3, [r6, #16]
   30e98:	cmp	r4, r5
   30e9c:	ldrb	r3, [r5]
   30ea0:	beq	31278 <flatcc_json_parser_generic_json@@Base+0x1778>
   30ea4:	cmp	r3, #32
   30ea8:	bls	30db0 <flatcc_json_parser_generic_json@@Base+0x12b0>
   30eac:	cmp	r3, #57	; 0x39
   30eb0:	bhi	2fb5c <flatcc_json_parser_generic_json@@Base+0x5c>
   30eb4:	cmp	r3, #48	; 0x30
   30eb8:	bcs	307fc <flatcc_json_parser_generic_json@@Base+0xcfc>
   30ebc:	cmp	r3, #34	; 0x22
   30ec0:	beq	2fc00 <flatcc_json_parser_generic_json@@Base+0x100>
   30ec4:	cmp	r3, #45	; 0x2d
   30ec8:	bne	2fd9c <flatcc_json_parser_generic_json@@Base+0x29c>
   30ecc:	add	r0, r5, #1
   30ed0:	cmp	r4, r0
   30ed4:	beq	3121c <flatcc_json_parser_generic_json@@Base+0x171c>
   30ed8:	ldrb	r3, [r5, #1]
   30edc:	mov	r5, r0
   30ee0:	b	30804 <flatcc_json_parser_generic_json@@Base+0xd04>
   30ee4:	add	r5, r5, #1
   30ee8:	b	30e88 <flatcc_json_parser_generic_json@@Base+0x1388>
   30eec:	add	r5, r5, #1
   30ef0:	b	30e98 <flatcc_json_parser_generic_json@@Base+0x1398>
   30ef4:	ldr	r2, [r6, #24]
   30ef8:	cmp	r2, #0
   30efc:	bne	30f1c <flatcc_json_parser_generic_json@@Base+0x141c>
   30f00:	ldr	r3, [r6, #4]
   30f04:	mov	r2, #5
   30f08:	str	r2, [r6, #24]
   30f0c:	str	r5, [r6, #36]	; 0x24
   30f10:	sub	r3, r5, r3
   30f14:	add	r3, r3, #1
   30f18:	str	r3, [r6, #20]
   30f1c:	ldrb	r3, [r4]
   30f20:	cmp	r3, #57	; 0x39
   30f24:	bhi	30f64 <flatcc_json_parser_generic_json@@Base+0x1464>
   30f28:	cmp	r3, #48	; 0x30
   30f2c:	bcs	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   30f30:	cmp	r3, #34	; 0x22
   30f34:	beq	30908 <flatcc_json_parser_generic_json@@Base+0xe08>
   30f38:	cmp	r3, #45	; 0x2d
   30f3c:	beq	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   30f40:	mov	r5, r4
   30f44:	b	2fd9c <flatcc_json_parser_generic_json@@Base+0x29c>
   30f48:	ldrb	r1, [r2, #1]
   30f4c:	cmp	r1, #32
   30f50:	addhi	r2, r2, #1
   30f54:	bls	309c4 <flatcc_json_parser_generic_json@@Base+0xec4>
   30f58:	cmp	r4, r2
   30f5c:	bne	30d58 <flatcc_json_parser_generic_json@@Base+0x1258>
   30f60:	b	309f8 <flatcc_json_parser_generic_json@@Base+0xef8>
   30f64:	cmp	r3, #91	; 0x5b
   30f68:	beq	304f0 <flatcc_json_parser_generic_json@@Base+0x9f0>
   30f6c:	cmp	r3, #123	; 0x7b
   30f70:	moveq	r5, r4
   30f74:	beq	2fb6c <flatcc_json_parser_generic_json@@Base+0x6c>
   30f78:	b	30f40 <flatcc_json_parser_generic_json@@Base+0x1440>
   30f7c:	mov	r0, r4
   30f80:	ldr	r3, [r6, #24]
   30f84:	cmp	r3, #0
   30f88:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   30f8c:	ldr	r3, [r6, #4]
   30f90:	mov	r2, #6
   30f94:	str	r2, [r6, #24]
   30f98:	str	r0, [r6, #36]	; 0x24
   30f9c:	sub	r3, r0, r3
   30fa0:	mov	r0, r4
   30fa4:	add	r3, r3, #1
   30fa8:	str	r3, [r6, #20]
   30fac:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   30fb0:	ldr	r3, [r6, #24]
   30fb4:	cmp	r3, #0
   30fb8:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   30fbc:	ldr	r3, [r6, #4]
   30fc0:	mov	r2, #20
   30fc4:	mov	r0, r4
   30fc8:	str	r2, [r6, #24]
   30fcc:	str	r1, [r6, #36]	; 0x24
   30fd0:	sub	r3, r1, r3
   30fd4:	add	r3, r3, #1
   30fd8:	str	r3, [r6, #20]
   30fdc:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   30fe0:	add	r0, r2, #1
   30fe4:	cmp	r4, r0
   30fe8:	beq	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   30fec:	ldrb	r3, [r2, #1]
   30ff0:	sub	r1, r3, #48	; 0x30
   30ff4:	cmp	r1, #9
   30ff8:	bhi	312bc <flatcc_json_parser_generic_json@@Base+0x17bc>
   30ffc:	add	r2, r2, #2
   31000:	cmp	r4, r2
   31004:	mov	r0, r2
   31008:	beq	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   3100c:	ldrb	r3, [r2], #1
   31010:	sub	r1, r3, #48	; 0x30
   31014:	cmp	r1, #9
   31018:	bls	31000 <flatcc_json_parser_generic_json@@Base+0x1500>
   3101c:	cmp	r3, #32
   31020:	beq	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   31024:	bls	31048 <flatcc_json_parser_generic_json@@Base+0x1548>
   31028:	cmp	r3, #58	; 0x3a
   3102c:	beq	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   31030:	bls	31064 <flatcc_json_parser_generic_json@@Base+0x1564>
   31034:	cmp	r3, #93	; 0x5d
   31038:	beq	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   3103c:	cmp	r3, #125	; 0x7d
   31040:	bne	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   31044:	b	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   31048:	cmp	r3, #9
   3104c:	bcc	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   31050:	cmp	r3, #11
   31054:	bls	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   31058:	cmp	r3, #13
   3105c:	bne	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   31060:	b	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   31064:	cmp	r3, #44	; 0x2c
   31068:	bne	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   3106c:	b	2fca8 <flatcc_json_parser_generic_json@@Base+0x1a8>
   31070:	add	r0, r5, #1
   31074:	cmp	r4, r0
   31078:	beq	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   3107c:	ldrb	r3, [r5, #1]
   31080:	b	30858 <flatcc_json_parser_generic_json@@Base+0xd58>
   31084:	ldrb	r1, [r2, #1]
   31088:	b	30d84 <flatcc_json_parser_generic_json@@Base+0x1284>
   3108c:	add	r2, r2, #1
   31090:	b	309a8 <flatcc_json_parser_generic_json@@Base+0xea8>
   31094:	ldrb	r3, [r0, #1]
   31098:	sub	r3, r3, #48	; 0x30
   3109c:	cmp	r3, #9
   310a0:	bhi	31150 <flatcc_json_parser_generic_json@@Base+0x1650>
   310a4:	add	r2, r0, #2
   310a8:	cmp	r4, r2
   310ac:	beq	30f7c <flatcc_json_parser_generic_json@@Base+0x147c>
   310b0:	ldrb	r3, [r0, #2]
   310b4:	sub	r1, r3, #48	; 0x30
   310b8:	cmp	r1, #9
   310bc:	bhi	312b4 <flatcc_json_parser_generic_json@@Base+0x17b4>
   310c0:	add	r2, r0, #3
   310c4:	b	310d8 <flatcc_json_parser_generic_json@@Base+0x15d8>
   310c8:	ldrb	r3, [r2], #1
   310cc:	sub	r1, r3, #48	; 0x30
   310d0:	cmp	r1, #9
   310d4:	bhi	30860 <flatcc_json_parser_generic_json@@Base+0xd60>
   310d8:	cmp	r4, r2
   310dc:	mov	r0, r2
   310e0:	bne	310c8 <flatcc_json_parser_generic_json@@Base+0x15c8>
   310e4:	b	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   310e8:	sub	r3, r4, r0
   310ec:	add	r2, r0, #1
   310f0:	cmp	r3, #1
   310f4:	ble	31104 <flatcc_json_parser_generic_json@@Base+0x1604>
   310f8:	ldrb	r3, [r0, #1]
   310fc:	cmp	r3, #10
   31100:	addeq	r2, r0, #2
   31104:	mov	r0, r2
   31108:	ldr	r3, [r6, #16]
   3110c:	str	r0, [r6, #4]
   31110:	add	r3, r3, #1
   31114:	str	r3, [r6, #16]
   31118:	cmp	r4, r0
   3111c:	beq	2fd1c <flatcc_json_parser_generic_json@@Base+0x21c>
   31120:	ldrb	r2, [r0]
   31124:	cmp	r2, #32
   31128:	bls	30bcc <flatcc_json_parser_generic_json@@Base+0x10cc>
   3112c:	b	307ec <flatcc_json_parser_generic_json@@Base+0xcec>
   31130:	add	r0, r0, #1
   31134:	b	31108 <flatcc_json_parser_generic_json@@Base+0x1608>
   31138:	add	r0, r0, #1
   3113c:	b	31118 <flatcc_json_parser_generic_json@@Base+0x1618>
   31140:	ldrb	r3, [r5, #2]
   31144:	cmp	r3, #32
   31148:	bls	2ffc8 <flatcc_json_parser_generic_json@@Base+0x4c8>
   3114c:	b	30370 <flatcc_json_parser_generic_json@@Base+0x870>
   31150:	ldr	r3, [r6, #24]
   31154:	cmp	r3, #0
   31158:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   3115c:	ldr	r2, [r6, #4]
   31160:	add	r3, r0, #1
   31164:	mov	r1, #6
   31168:	mov	r0, r4
   3116c:	str	r1, [r6, #24]
   31170:	str	r3, [r6, #36]	; 0x24
   31174:	sub	r3, r3, r2
   31178:	add	r3, r3, #1
   3117c:	str	r3, [r6, #20]
   31180:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   31184:	ldr	r3, [r6, #24]
   31188:	cmp	r3, #0
   3118c:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   31190:	ldr	r3, [r6, #4]
   31194:	mov	r2, #2
   31198:	sub	r3, r5, r3
   3119c:	mov	r0, r4
   311a0:	str	r2, [r6, #24]
   311a4:	add	r3, r3, #1
   311a8:	str	r3, [r6, #20]
   311ac:	str	r5, [r6, #36]	; 0x24
   311b0:	b	2fd60 <flatcc_json_parser_generic_json@@Base+0x260>
   311b4:	ldr	r1, [r6, #24]
   311b8:	cmp	r1, #0
   311bc:	bne	30b04 <flatcc_json_parser_generic_json@@Base+0x1004>
   311c0:	ldr	r3, [r6, #4]
   311c4:	mov	r2, #5
   311c8:	mov	r1, r2
   311cc:	str	r2, [r6, #24]
   311d0:	str	r5, [r6, #36]	; 0x24
   311d4:	sub	r3, r5, r3
   311d8:	add	r3, r3, #1
   311dc:	str	r3, [r6, #20]
   311e0:	b	30b04 <flatcc_json_parser_generic_json@@Base+0x1004>
   311e4:	cmp	r3, #46	; 0x2e
   311e8:	bne	309a8 <flatcc_json_parser_generic_json@@Base+0xea8>
   311ec:	ldr	r1, [r6, #24]
   311f0:	cmp	r1, #0
   311f4:	bne	30b04 <flatcc_json_parser_generic_json@@Base+0x1004>
   311f8:	ldr	r2, [r6, #4]
   311fc:	mov	r3, #5
   31200:	mov	r1, r3
   31204:	str	r3, [r6, #24]
   31208:	str	r0, [r6, #36]	; 0x24
   3120c:	sub	r3, r0, r2
   31210:	add	r3, r3, #1
   31214:	str	r3, [r6, #20]
   31218:	b	30b04 <flatcc_json_parser_generic_json@@Base+0x1004>
   3121c:	ldr	r3, [r6, #24]
   31220:	cmp	r3, #0
   31224:	bne	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   31228:	ldr	r3, [r6, #4]
   3122c:	mov	r2, #6
   31230:	str	r2, [r6, #24]
   31234:	str	r4, [r6, #36]	; 0x24
   31238:	sub	r3, r4, r3
   3123c:	add	r3, r3, #1
   31240:	str	r3, [r6, #20]
   31244:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   31248:	ldr	r3, [r6, #24]
   3124c:	cmp	r3, #0
   31250:	bne	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   31254:	ldr	r3, [r6, #4]
   31258:	mov	r2, #6
   3125c:	mov	r0, r4
   31260:	str	r2, [r6, #24]
   31264:	str	r4, [r6, #36]	; 0x24
   31268:	sub	r3, r4, r3
   3126c:	add	r3, r3, #1
   31270:	str	r3, [r6, #20]
   31274:	b	30930 <flatcc_json_parser_generic_json@@Base+0xe30>
   31278:	cmp	r3, #57	; 0x39
   3127c:	bhi	2fb5c <flatcc_json_parser_generic_json@@Base+0x5c>
   31280:	cmp	r3, #48	; 0x30
   31284:	bcs	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   31288:	cmp	r3, #34	; 0x22
   3128c:	beq	30904 <flatcc_json_parser_generic_json@@Base+0xe04>
   31290:	cmp	r3, #45	; 0x2d
   31294:	bne	2fd9c <flatcc_json_parser_generic_json@@Base+0x29c>
   31298:	b	3092c <flatcc_json_parser_generic_json@@Base+0xe2c>
   3129c:	ldr	r3, [r6, #24]
   312a0:	cmp	r3, #0
   312a4:	bne	30704 <flatcc_json_parser_generic_json@@Base+0xc04>
   312a8:	mov	r1, #4
   312ac:	ldr	r3, [r6, #4]
   312b0:	b	30a0c <flatcc_json_parser_generic_json@@Base+0xf0c>
   312b4:	mov	r0, r2
   312b8:	b	30860 <flatcc_json_parser_generic_json@@Base+0xd60>
   312bc:	cmp	r3, #32
   312c0:	beq	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   312c4:	bls	312e8 <flatcc_json_parser_generic_json@@Base+0x17e8>
   312c8:	cmp	r3, #58	; 0x3a
   312cc:	beq	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   312d0:	bls	31304 <flatcc_json_parser_generic_json@@Base+0x1804>
   312d4:	cmp	r3, #93	; 0x5d
   312d8:	beq	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   312dc:	cmp	r3, #125	; 0x7d
   312e0:	bne	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   312e4:	b	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   312e8:	cmp	r3, #9
   312ec:	bcc	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   312f0:	cmp	r3, #11
   312f4:	bls	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   312f8:	cmp	r3, #13
   312fc:	bne	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   31300:	b	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   31304:	cmp	r3, #44	; 0x2c
   31308:	bne	30f80 <flatcc_json_parser_generic_json@@Base+0x1480>
   3130c:	b	2fcb0 <flatcc_json_parser_generic_json@@Base+0x1b0>
   31310:	mov	r2, r4
   31314:	ldr	r1, [r6, #24]
   31318:	b	309fc <flatcc_json_parser_generic_json@@Base+0xefc>

0003131c <flatcc_json_parser_unmatched_symbol@@Base>:
   3131c:	ldr	r3, [r0, #8]
   31320:	tst	r3, #1
   31324:	bne	31358 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   31328:	ldr	r3, [r0, #24]
   3132c:	cmp	r3, #0
   31330:	bne	31350 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   31334:	ldr	r3, [r0, #4]
   31338:	mov	ip, #13
   3133c:	str	r1, [r0, #36]	; 0x24
   31340:	str	ip, [r0, #24]
   31344:	sub	r1, r1, r3
   31348:	add	r1, r1, #1
   3134c:	str	r1, [r0, #20]
   31350:	mov	r0, r2
   31354:	bx	lr
   31358:	ldr	r3, [r0, #12]
   3135c:	str	r4, [sp, #-8]!
   31360:	str	lr, [sp, #4]
   31364:	cmp	r3, #0
   31368:	bne	313ec <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   3136c:	cmp	r1, r2
   31370:	beq	313b8 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   31374:	ldrb	ip, [r1]
   31378:	cmp	ip, #34	; 0x22
   3137c:	bne	3139c <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   31380:	b	31674 <flatcc_json_parser_unmatched_symbol@@Base+0x358>
   31384:	add	r1, r3, #1
   31388:	cmp	r2, r1
   3138c:	beq	313b8 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   31390:	ldrb	ip, [r3, #1]
   31394:	cmp	ip, #34	; 0x22
   31398:	beq	31674 <flatcc_json_parser_unmatched_symbol@@Base+0x358>
   3139c:	cmp	ip, #92	; 0x5c
   313a0:	mov	r3, r1
   313a4:	bne	31384 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   313a8:	sub	ip, r2, r1
   313ac:	add	r3, r1, #1
   313b0:	cmp	ip, #1
   313b4:	bgt	31384 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   313b8:	ldr	r3, [r0, #24]
   313bc:	cmp	r3, #0
   313c0:	bne	313e4 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   313c4:	ldr	ip, [r0, #4]
   313c8:	mov	lr, #20
   313cc:	mov	r3, lr
   313d0:	str	r1, [r0, #36]	; 0x24
   313d4:	str	lr, [r0, #24]
   313d8:	sub	r1, r1, ip
   313dc:	add	r1, r1, #1
   313e0:	str	r1, [r0, #20]
   313e4:	mov	r1, r2
   313e8:	b	31498 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   313ec:	cmp	r1, r2
   313f0:	beq	31494 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   313f4:	ldrb	r3, [r1]
   313f8:	cmp	r3, #32
   313fc:	bls	31444 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   31400:	mov	lr, r1
   31404:	sub	r1, r3, #48	; 0x30
   31408:	cmp	r3, #46	; 0x2e
   3140c:	cmpne	r3, #95	; 0x5f
   31410:	uxtb	ip, r1
   31414:	add	r4, lr, #1
   31418:	mov	r1, lr
   3141c:	beq	314d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   31420:	orr	lr, r3, #32
   31424:	tst	r3, #128	; 0x80
   31428:	sub	lr, lr, #97	; 0x61
   3142c:	bne	314d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   31430:	cmp	ip, #9
   31434:	uxtb	lr, lr
   31438:	bls	314d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   3143c:	cmp	lr, #25
   31440:	bls	314cc <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   31444:	sub	r3, r2, r1
   31448:	cmp	r3, #1
   3144c:	ble	31460 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   31450:	ldrb	r3, [r1]
   31454:	cmp	r3, #32
   31458:	bhi	31504 <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   3145c:	beq	314f4 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   31460:	cmp	r2, r1
   31464:	beq	31494 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   31468:	ldrb	r3, [r1]
   3146c:	cmp	r3, #32
   31470:	bne	3158c <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   31474:	add	ip, r1, #1
   31478:	b	31488 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   3147c:	ldrb	r3, [ip], #1
   31480:	cmp	r3, #32
   31484:	bne	3158c <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   31488:	cmp	r2, ip
   3148c:	mov	r1, ip
   31490:	bne	3147c <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   31494:	ldr	r3, [r0, #24]
   31498:	cmp	r3, #0
   3149c:	bne	314bc <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   314a0:	ldr	r3, [r0, #4]
   314a4:	mov	ip, #4
   314a8:	str	ip, [r0, #24]
   314ac:	str	r1, [r0, #36]	; 0x24
   314b0:	sub	r1, r1, r3
   314b4:	add	r1, r1, #1
   314b8:	str	r1, [r0, #20]
   314bc:	ldr	r4, [sp]
   314c0:	add	sp, sp, #4
   314c4:	mov	r0, r2
   314c8:	pop	{pc}		; (ldr pc, [sp], #4)
   314cc:	add	r4, r1, #1
   314d0:	cmp	r2, r4
   314d4:	mov	r1, r4
   314d8:	mov	lr, r4
   314dc:	beq	316f4 <flatcc_json_parser_unmatched_symbol@@Base+0x3d8>
   314e0:	ldrb	ip, [r4]
   314e4:	cmp	ip, #32
   314e8:	bls	316f4 <flatcc_json_parser_unmatched_symbol@@Base+0x3d8>
   314ec:	mov	r3, ip
   314f0:	b	31404 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   314f4:	ldrb	r3, [r1, #1]
   314f8:	cmp	r3, #32
   314fc:	addhi	r1, r1, #1
   31500:	bls	31460 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   31504:	cmp	r2, r1
   31508:	beq	31494 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   3150c:	cmp	r3, #58	; 0x3a
   31510:	bne	31494 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   31514:	add	lr, r1, #1
   31518:	sub	r3, r2, lr
   3151c:	cmp	r3, #1
   31520:	ble	31544 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   31524:	ldrb	r3, [r1, #1]
   31528:	cmp	r3, #32
   3152c:	bhi	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   31530:	bne	31544 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   31534:	ldrb	r3, [r1, #2]
   31538:	cmp	r3, #32
   3153c:	addhi	lr, r1, #2
   31540:	bhi	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   31544:	cmp	r2, lr
   31548:	beq	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   3154c:	ldrb	ip, [lr]
   31550:	cmp	ip, #32
   31554:	bne	3167c <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   31558:	add	r3, lr, #1
   3155c:	b	3156c <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   31560:	ldrb	ip, [r3], #1
   31564:	cmp	ip, #32
   31568:	bne	3167c <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   3156c:	cmp	r2, r3
   31570:	mov	lr, r3
   31574:	bne	31560 <flatcc_json_parser_unmatched_symbol@@Base+0x244>
   31578:	mov	r1, lr
   3157c:	ldr	r4, [sp]
   31580:	ldr	lr, [sp, #4]
   31584:	add	sp, sp, #8
   31588:	b	2fb00 <flatcc_json_parser_generic_json@@Base>
   3158c:	cmp	r3, #32
   31590:	bhi	3150c <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   31594:	sub	r3, r3, #9
   31598:	cmp	r3, #23
   3159c:	ldrls	pc, [pc, r3, lsl #2]
   315a0:	b	3165c <flatcc_json_parser_unmatched_symbol@@Base+0x340>
   315a4:	andeq	r1, r3, r4, asr r6
   315a8:	andeq	r1, r3, r8, lsr #12
   315ac:	andeq	r1, r3, ip, asr r6
   315b0:	andeq	r1, r3, ip, asr r6
   315b4:	andeq	r1, r3, r4, lsl #12
   315b8:	andeq	r1, r3, ip, asr r6
   315bc:	andeq	r1, r3, ip, asr r6
   315c0:	andeq	r1, r3, ip, asr r6
   315c4:	andeq	r1, r3, ip, asr r6
   315c8:	andeq	r1, r3, ip, asr r6
   315cc:	andeq	r1, r3, ip, asr r6
   315d0:	andeq	r1, r3, ip, asr r6
   315d4:	andeq	r1, r3, ip, asr r6
   315d8:	andeq	r1, r3, ip, asr r6
   315dc:	andeq	r1, r3, ip, asr r6
   315e0:	andeq	r1, r3, ip, asr r6
   315e4:	andeq	r1, r3, ip, asr r6
   315e8:	andeq	r1, r3, ip, asr r6
   315ec:	andeq	r1, r3, ip, asr r6
   315f0:	andeq	r1, r3, ip, asr r6
   315f4:	andeq	r1, r3, ip, asr r6
   315f8:	andeq	r1, r3, ip, asr r6
   315fc:	andeq	r1, r3, ip, asr r6
   31600:	andeq	r1, r3, r0, ror #8
   31604:	sub	r3, r2, r1
   31608:	add	ip, r1, #1
   3160c:	cmp	r3, #1
   31610:	ble	31620 <flatcc_json_parser_unmatched_symbol@@Base+0x304>
   31614:	ldrb	r3, [r1, #1]
   31618:	cmp	r3, #10
   3161c:	addeq	ip, r1, #2
   31620:	mov	r1, ip
   31624:	b	3162c <flatcc_json_parser_unmatched_symbol@@Base+0x310>
   31628:	add	r1, r1, #1
   3162c:	ldr	r3, [r0, #16]
   31630:	str	r1, [r0, #4]
   31634:	add	r3, r3, #1
   31638:	str	r3, [r0, #16]
   3163c:	cmp	r2, r1
   31640:	beq	31494 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   31644:	ldrb	r3, [r1]
   31648:	cmp	r3, #32
   3164c:	bls	31594 <flatcc_json_parser_unmatched_symbol@@Base+0x278>
   31650:	b	3150c <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   31654:	add	r1, r1, #1
   31658:	b	3163c <flatcc_json_parser_unmatched_symbol@@Base+0x320>
   3165c:	ldr	r3, [r0, #24]
   31660:	cmp	r3, #0
   31664:	bne	314bc <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   31668:	mov	ip, #5
   3166c:	ldr	r3, [r0, #4]
   31670:	b	314a8 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   31674:	add	r1, r1, #1
   31678:	b	31444 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   3167c:	cmp	ip, #32
   31680:	bhi	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   31684:	sub	ip, ip, #9
   31688:	cmp	ip, #23
   3168c:	ldrls	pc, [pc, ip, lsl #2]
   31690:	b	31784 <flatcc_json_parser_unmatched_symbol@@Base+0x468>
   31694:	andeq	r1, r3, ip, ror r7
   31698:	andeq	r1, r3, r4, ror r7
   3169c:	andeq	r1, r3, r4, lsl #15
   316a0:	andeq	r1, r3, r4, lsl #15
   316a4:	andeq	r1, r3, ip, lsr #14
   316a8:	andeq	r1, r3, r4, lsl #15
   316ac:	andeq	r1, r3, r4, lsl #15
   316b0:	andeq	r1, r3, r4, lsl #15
   316b4:	andeq	r1, r3, r4, lsl #15
   316b8:	andeq	r1, r3, r4, lsl #15
   316bc:	andeq	r1, r3, r4, lsl #15
   316c0:	andeq	r1, r3, r4, lsl #15
   316c4:	andeq	r1, r3, r4, lsl #15
   316c8:	andeq	r1, r3, r4, lsl #15
   316cc:	andeq	r1, r3, r4, lsl #15
   316d0:	andeq	r1, r3, r4, lsl #15
   316d4:	andeq	r1, r3, r4, lsl #15
   316d8:	andeq	r1, r3, r4, lsl #15
   316dc:	andeq	r1, r3, r4, lsl #15
   316e0:	andeq	r1, r3, r4, lsl #15
   316e4:	andeq	r1, r3, r4, lsl #15
   316e8:	andeq	r1, r3, r4, lsl #15
   316ec:	andeq	r1, r3, r4, lsl #15
   316f0:	andeq	r1, r3, r4, asr #10
   316f4:	cmp	r3, #46	; 0x2e
   316f8:	bne	31444 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   316fc:	ldr	r3, [r0, #24]
   31700:	cmp	r3, #0
   31704:	bne	313e4 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   31708:	ldr	ip, [r0, #4]
   3170c:	mov	r1, #5
   31710:	mov	r3, r1
   31714:	str	r4, [r0, #36]	; 0x24
   31718:	str	r1, [r0, #24]
   3171c:	sub	r4, r4, ip
   31720:	add	r4, r4, #1
   31724:	str	r4, [r0, #20]
   31728:	b	313e4 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   3172c:	sub	r3, r2, lr
   31730:	add	r1, lr, #1
   31734:	cmp	r3, #1
   31738:	ble	31748 <flatcc_json_parser_unmatched_symbol@@Base+0x42c>
   3173c:	ldrb	r3, [lr, #1]
   31740:	cmp	r3, #10
   31744:	addeq	r1, lr, #2
   31748:	mov	lr, r1
   3174c:	ldr	r3, [r0, #16]
   31750:	str	lr, [r0, #4]
   31754:	add	r3, r3, #1
   31758:	str	r3, [r0, #16]
   3175c:	cmp	r2, lr
   31760:	beq	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   31764:	ldrb	ip, [lr]
   31768:	cmp	ip, #32
   3176c:	bls	31684 <flatcc_json_parser_unmatched_symbol@@Base+0x368>
   31770:	b	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   31774:	add	lr, lr, #1
   31778:	b	3174c <flatcc_json_parser_unmatched_symbol@@Base+0x430>
   3177c:	add	lr, lr, #1
   31780:	b	3175c <flatcc_json_parser_unmatched_symbol@@Base+0x440>
   31784:	ldr	r3, [r0, #24]
   31788:	cmp	r3, #0
   3178c:	movne	lr, r2
   31790:	bne	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   31794:	ldr	r3, [r0, #4]
   31798:	mov	r1, #5
   3179c:	str	r1, [r0, #24]
   317a0:	str	lr, [r0, #36]	; 0x24
   317a4:	sub	r3, lr, r3
   317a8:	mov	lr, r2
   317ac:	add	r3, r3, #1
   317b0:	str	r3, [r0, #20]
   317b4:	b	31578 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>

000317b8 <flatcc_json_parser_integer@@Base>:
   317b8:	cmp	r1, r2
   317bc:	beq	31908 <flatcc_json_parser_integer@@Base+0x150>
   317c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   317c4:	mov	ip, r0
   317c8:	strd	r6, [sp, #8]
   317cc:	strd	r8, [sp, #16]
   317d0:	strd	sl, [sp, #24]
   317d4:	str	lr, [sp, #32]
   317d8:	ldrb	lr, [r1]
   317dc:	sub	lr, lr, #45	; 0x2d
   317e0:	clz	lr, lr
   317e4:	lsr	lr, lr, #5
   317e8:	add	r0, r1, lr
   317ec:	cmp	r2, r0
   317f0:	str	lr, [r3]
   317f4:	beq	3191c <flatcc_json_parser_integer@@Base+0x164>
   317f8:	ldrb	r8, [r1, lr]
   317fc:	sub	r3, r8, #48	; 0x30
   31800:	cmp	r3, #9
   31804:	bhi	31910 <flatcc_json_parser_integer@@Base+0x158>
   31808:	uxtb	r8, r8
   3180c:	mov	r9, #0
   31810:	subs	r4, r8, #48	; 0x30
   31814:	add	lr, r0, #1
   31818:	sbc	r5, r9, #0
   3181c:	b	31854 <flatcc_json_parser_integer@@Base+0x9c>
   31820:	adds	r9, r9, r4
   31824:	adc	r3, r3, r5
   31828:	adds	r9, r9, r9
   3182c:	adc	r3, r3, r3
   31830:	subs	r6, r9, #48	; 0x30
   31834:	sbc	r7, r3, #0
   31838:	adds	sl, r6, r8
   3183c:	adc	fp, r7, #0
   31840:	cmp	fp, r5
   31844:	mov	r5, fp
   31848:	cmpeq	sl, r4
   3184c:	mov	r4, sl
   31850:	bcc	318f0 <flatcc_json_parser_integer@@Base+0x138>
   31854:	lsl	r3, r5, #2
   31858:	cmp	lr, r2
   3185c:	mov	r0, lr
   31860:	lsl	r9, r4, #2
   31864:	orr	r3, r3, r4, lsr #30
   31868:	beq	31898 <flatcc_json_parser_integer@@Base+0xe0>
   3186c:	ldrb	r8, [lr]
   31870:	add	lr, lr, #1
   31874:	sub	sl, r8, #48	; 0x30
   31878:	cmp	sl, #9
   3187c:	bls	31820 <flatcc_json_parser_integer@@Base+0x68>
   31880:	cmp	r1, r0
   31884:	beq	318a0 <flatcc_json_parser_integer@@Base+0xe8>
   31888:	and	r3, r8, #223	; 0xdf
   3188c:	cmp	r8, #46	; 0x2e
   31890:	cmpne	r3, #69	; 0x45
   31894:	beq	318b8 <flatcc_json_parser_integer@@Base+0x100>
   31898:	ldr	r3, [sp, #36]	; 0x24
   3189c:	strd	r4, [r3]
   318a0:	ldrd	r4, [sp]
   318a4:	ldrd	r6, [sp, #8]
   318a8:	ldrd	r8, [sp, #16]
   318ac:	ldrd	sl, [sp, #24]
   318b0:	add	sp, sp, #32
   318b4:	pop	{pc}		; (ldr pc, [sp], #4)
   318b8:	ldr	r3, [ip, #24]
   318bc:	cmp	r3, #0
   318c0:	bne	318e8 <flatcc_json_parser_integer@@Base+0x130>
   318c4:	ldr	r3, [ip, #4]
   318c8:	mov	r1, #12
   318cc:	sub	r3, r0, r3
   318d0:	str	r1, [ip, #24]
   318d4:	add	r3, r3, #1
   318d8:	str	r3, [ip, #20]
   318dc:	str	r0, [ip, #36]	; 0x24
   318e0:	mov	r0, r2
   318e4:	b	318a0 <flatcc_json_parser_integer@@Base+0xe8>
   318e8:	mov	r0, r2
   318ec:	b	318a0 <flatcc_json_parser_integer@@Base+0xe8>
   318f0:	ldr	r3, [ip, #24]
   318f4:	cmp	r3, #0
   318f8:	bne	318e8 <flatcc_json_parser_integer@@Base+0x130>
   318fc:	mov	r1, #8
   31900:	ldr	r3, [ip, #4]
   31904:	b	318cc <flatcc_json_parser_integer@@Base+0x114>
   31908:	mov	r0, r2
   3190c:	bx	lr
   31910:	mov	r4, #0
   31914:	mov	r5, #0
   31918:	b	31880 <flatcc_json_parser_integer@@Base+0xc8>
   3191c:	mov	r4, #0
   31920:	mov	r5, #0
   31924:	b	31898 <flatcc_json_parser_integer@@Base+0xe0>

00031928 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   31928:	cmp	r1, r2
   3192c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31930:	mov	r5, r2
   31934:	mov	r4, r0
   31938:	strd	r6, [sp, #8]
   3193c:	strd	r8, [sp, #16]
   31940:	mov	r8, r3
   31944:	strd	sl, [sp, #24]
   31948:	str	lr, [sp, #32]
   3194c:	sub	sp, sp, #44	; 0x2c
   31950:	beq	31af0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   31954:	ldrb	r3, [r1]
   31958:	cmp	r3, #34	; 0x22
   3195c:	bne	31af0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   31960:	add	sl, r1, #1
   31964:	cmp	r2, sl
   31968:	beq	31c04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   3196c:	ldrb	r3, [r1, #1]
   31970:	cmp	r3, #34	; 0x22
   31974:	cmpne	r3, #31
   31978:	movhi	r2, #1
   3197c:	movls	r2, #0
   31980:	cmp	r3, #92	; 0x5c
   31984:	moveq	r2, #0
   31988:	andne	r2, r2, #1
   3198c:	cmp	r2, #0
   31990:	beq	31c2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x304>
   31994:	add	r1, r1, #2
   31998:	cmp	r1, r5
   3199c:	mov	r6, r1
   319a0:	beq	31c08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   319a4:	ldrb	r3, [r1], #1
   319a8:	cmp	r3, #34	; 0x22
   319ac:	cmpne	r3, #31
   319b0:	movhi	r2, #1
   319b4:	movls	r2, #0
   319b8:	cmp	r3, #92	; 0x5c
   319bc:	moveq	r2, #0
   319c0:	andne	r2, r2, #1
   319c4:	cmp	r2, #0
   319c8:	bne	31998 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   319cc:	cmp	r3, #31
   319d0:	bls	31bb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   319d4:	cmp	r3, #34	; 0x22
   319d8:	bne	31b1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   319dc:	sub	r9, r6, sl
   319e0:	lsr	r7, r9, #2
   319e4:	and	r3, r9, #3
   319e8:	cmp	r3, #2
   319ec:	add	r7, r7, r7, lsl #1
   319f0:	addeq	r7, r7, #1
   319f4:	beq	31a00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   319f8:	cmp	r3, #3
   319fc:	addeq	r7, r7, #2
   31a00:	mov	r2, #1
   31a04:	mvn	r3, #0
   31a08:	ldr	r0, [r4]
   31a0c:	mov	r1, r2
   31a10:	bl	278a0 <flatcc_builder_start_vector@@Base>
   31a14:	cmp	r0, #0
   31a18:	bne	31b78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31a1c:	mov	r1, r7
   31a20:	ldr	r0, [r4]
   31a24:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   31a28:	subs	fp, r0, #0
   31a2c:	beq	31b78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31a30:	ldr	r3, [pc, #1028]	; 31e3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x514>
   31a34:	ldr	r1, [sp, #80]	; 0x50
   31a38:	add	r2, r3, #256	; 0x100
   31a3c:	cmp	r1, #0
   31a40:	moveq	r3, r2
   31a44:	cmp	r7, #0
   31a48:	movne	r1, r7
   31a4c:	mvneq	r1, #0
   31a50:	cmp	r9, #0
   31a54:	beq	31e1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4f4>
   31a58:	sub	r2, fp, #3
   31a5c:	add	r0, fp, r1
   31a60:	str	fp, [sp, #4]
   31a64:	add	r2, r2, r1
   31a68:	mov	lr, sl
   31a6c:	str	r9, [sp, #8]
   31a70:	str	r0, [sp, #12]
   31a74:	str	r2, [sp, #24]
   31a78:	mov	r2, fp
   31a7c:	ldrd	r0, [sp, #8]
   31a80:	str	r2, [sp, #16]
   31a84:	sub	r2, r1, r2
   31a88:	mov	r1, #0
   31a8c:	str	r2, [sp, #20]
   31a90:	ldrb	r2, [lr, r1]
   31a94:	ldrb	ip, [r3, r2]
   31a98:	add	r2, sp, #40	; 0x28
   31a9c:	add	r2, r2, r1
   31aa0:	cmp	ip, #63	; 0x3f
   31aa4:	strb	ip, [r2, #-4]
   31aa8:	bls	31be8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   31aac:	cmp	ip, #65	; 0x41
   31ab0:	beq	31c20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f8>
   31ab4:	cmp	ip, #66	; 0x42
   31ab8:	movne	r2, r1
   31abc:	beq	31c34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   31ac0:	sub	r2, r0, r2
   31ac4:	cmp	r1, #2
   31ac8:	beq	31c88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   31acc:	cmp	r1, #3
   31ad0:	beq	31dc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a0>
   31ad4:	cmp	r1, #0
   31ad8:	subeq	r2, r9, r2
   31adc:	beq	31dbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   31ae0:	ldr	r3, [sp, #8]
   31ae4:	sub	r6, r9, r3
   31ae8:	add	r6, sl, r6
   31aec:	b	31b1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   31af0:	ldr	r3, [r4, #24]
   31af4:	cmp	r3, #0
   31af8:	bne	31b18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   31afc:	ldr	r3, [r4, #4]
   31b00:	mov	r2, #16
   31b04:	str	r1, [r4, #36]	; 0x24
   31b08:	str	r2, [r4, #24]
   31b0c:	sub	r1, r1, r3
   31b10:	add	r1, r1, #1
   31b14:	str	r1, [r4, #20]
   31b18:	mov	r6, r5
   31b1c:	ldr	r2, [sp, #80]	; 0x50
   31b20:	mov	r3, #0
   31b24:	str	r3, [r8]
   31b28:	cmp	r2, r3
   31b2c:	ldr	r3, [r4, #24]
   31b30:	movne	r2, #32
   31b34:	moveq	r2, #31
   31b38:	cmp	r3, #0
   31b3c:	bne	31bb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   31b40:	ldr	r3, [r4, #4]
   31b44:	mov	r0, r5
   31b48:	str	r2, [r4, #24]
   31b4c:	str	r6, [r4, #36]	; 0x24
   31b50:	sub	r6, r6, r3
   31b54:	add	r6, r6, #1
   31b58:	str	r6, [r4, #20]
   31b5c:	add	sp, sp, #44	; 0x2c
   31b60:	ldrd	r4, [sp]
   31b64:	ldrd	r6, [sp, #8]
   31b68:	ldrd	r8, [sp, #16]
   31b6c:	ldrd	sl, [sp, #24]
   31b70:	add	sp, sp, #32
   31b74:	pop	{pc}		; (ldr pc, [sp], #4)
   31b78:	mov	r3, #0
   31b7c:	str	r3, [r8]
   31b80:	ldr	r3, [r4, #24]
   31b84:	cmp	r3, #0
   31b88:	bne	31bb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   31b8c:	ldr	r3, [r4, #4]
   31b90:	mov	r2, #33	; 0x21
   31b94:	mov	r0, r5
   31b98:	str	r6, [r4, #36]	; 0x24
   31b9c:	str	r2, [r4, #24]
   31ba0:	sub	r6, r6, r3
   31ba4:	add	r6, r6, #1
   31ba8:	str	r6, [r4, #20]
   31bac:	b	31b5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31bb0:	mov	r0, r5
   31bb4:	b	31b5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31bb8:	ldr	r3, [r4, #24]
   31bbc:	cmp	r3, #0
   31bc0:	bne	31b18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   31bc4:	ldr	r3, [r4, #4]
   31bc8:	mov	r2, #17
   31bcc:	sub	r3, r6, r3
   31bd0:	str	r2, [r4, #24]
   31bd4:	add	r3, r3, #1
   31bd8:	str	r3, [r4, #20]
   31bdc:	str	r6, [r4, #36]	; 0x24
   31be0:	mov	r6, r5
   31be4:	b	31b1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   31be8:	add	r1, r1, #1
   31bec:	cmp	r1, #3
   31bf0:	bhi	31d30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x408>
   31bf4:	cmp	r0, r1
   31bf8:	bne	31a90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   31bfc:	mov	r2, #0
   31c00:	b	31ac4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   31c04:	mov	r6, r2
   31c08:	ldr	r3, [r4, #24]
   31c0c:	cmp	r3, #0
   31c10:	bne	31b18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   31c14:	mov	r2, #20
   31c18:	ldr	r3, [r4, #4]
   31c1c:	b	31bcc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   31c20:	add	lr, lr, #1
   31c24:	sub	r0, r0, #1
   31c28:	b	31bec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   31c2c:	mov	r6, sl
   31c30:	b	319cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa4>
   31c34:	add	r2, r1, #1
   31c38:	cmp	r2, #7
   31c3c:	cmpls	r2, r0
   31c40:	bcs	31ac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31c44:	ldrb	ip, [lr, r2]
   31c48:	add	lr, lr, r2
   31c4c:	ldrb	ip, [r3, ip]
   31c50:	sub	ip, ip, #65	; 0x41
   31c54:	cmp	ip, #1
   31c58:	bls	31c74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34c>
   31c5c:	b	31ac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31c60:	ldrb	ip, [lr, #1]!
   31c64:	ldrb	ip, [r3, ip]
   31c68:	sub	ip, ip, #65	; 0x41
   31c6c:	cmp	ip, #1
   31c70:	bhi	31ac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31c74:	add	r2, r2, #1
   31c78:	cmp	r2, #7
   31c7c:	cmpls	r2, r0
   31c80:	bcc	31c60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   31c84:	b	31ac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   31c88:	ldrb	r3, [sp, #37]	; 0x25
   31c8c:	lsl	r1, r3, #4
   31c90:	tst	r1, #240	; 0xf0
   31c94:	bne	31ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31c98:	ldrb	r0, [sp, #36]	; 0x24
   31c9c:	lsr	r3, r3, #4
   31ca0:	sub	r2, r9, r2
   31ca4:	ldr	r1, [sp, #4]
   31ca8:	orr	r3, r3, r0, lsl #2
   31cac:	strb	r3, [r1], #1
   31cb0:	sub	r1, r1, fp
   31cb4:	cmp	r9, r2
   31cb8:	addne	r6, sl, r2
   31cbc:	bne	31b1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   31cc0:	cmp	r7, r1
   31cc4:	ldr	r0, [r4]
   31cc8:	bls	31ce0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   31ccc:	sub	r1, r7, r1
   31cd0:	bl	276b8 <flatcc_builder_truncate_vector@@Base>
   31cd4:	cmp	r0, #0
   31cd8:	bne	31b78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31cdc:	ldr	r0, [r4]
   31ce0:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   31ce4:	cmp	r0, #0
   31ce8:	str	r0, [r8]
   31cec:	beq	31b78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   31cf0:	ldrb	r3, [r6]
   31cf4:	cmp	r3, #34	; 0x22
   31cf8:	addeq	r0, r6, #1
   31cfc:	beq	31b5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31d00:	ldr	r3, [r4, #24]
   31d04:	cmp	r3, #0
   31d08:	bne	31bb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   31d0c:	ldr	r3, [r4, #4]
   31d10:	mov	r2, #20
   31d14:	mov	r0, r5
   31d18:	str	r2, [r4, #24]
   31d1c:	str	r6, [r4, #36]	; 0x24
   31d20:	sub	r3, r6, r3
   31d24:	add	r3, r3, #1
   31d28:	str	r3, [r4, #20]
   31d2c:	b	31b5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   31d30:	ldr	r2, [sp, #20]
   31d34:	cmp	r2, #2
   31d38:	bls	31ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31d3c:	ldr	r2, [sp, #4]
   31d40:	sub	r0, r0, #4
   31d44:	add	lr, lr, #4
   31d48:	ldr	ip, [sp, #24]
   31d4c:	str	r0, [sp, #8]
   31d50:	ldrb	r1, [sp, #37]	; 0x25
   31d54:	add	r0, r2, #3
   31d58:	cmp	ip, r2
   31d5c:	ldrb	ip, [sp, #36]	; 0x24
   31d60:	str	r0, [sp, #16]
   31d64:	ldrb	r2, [sp, #38]	; 0x26
   31d68:	lsr	r0, r1, #4
   31d6c:	str	r1, [sp, #20]
   31d70:	ldrb	r1, [sp, #39]	; 0x27
   31d74:	orr	r0, r0, ip, lsl #2
   31d78:	ldr	ip, [sp, #20]
   31d7c:	str	r1, [sp, #28]
   31d80:	lsr	r1, r2, #2
   31d84:	orr	r1, r1, ip, lsl #4
   31d88:	ldr	ip, [sp, #28]
   31d8c:	orr	r2, ip, r2, lsl #6
   31d90:	ldr	ip, [sp, #4]
   31d94:	strb	r0, [ip]
   31d98:	strb	r1, [ip, #1]
   31d9c:	strb	r2, [ip, #2]
   31da0:	beq	31e28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x500>
   31da4:	ldr	r2, [sp, #8]
   31da8:	cmp	r2, #0
   31dac:	ldr	r2, [sp, #16]
   31db0:	str	r2, [sp, #4]
   31db4:	bne	31a7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   31db8:	mov	r2, r9
   31dbc:	ldr	r3, [sp, #16]
   31dc0:	sub	r1, r3, fp
   31dc4:	b	31cb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   31dc8:	ldrb	r3, [sp, #38]	; 0x26
   31dcc:	lsl	r1, r3, #6
   31dd0:	tst	r1, #192	; 0xc0
   31dd4:	bne	31ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31dd8:	ldr	r1, [sp, #20]
   31ddc:	cmp	r1, #1
   31de0:	beq	31ae0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31de4:	ldrb	r0, [sp, #37]	; 0x25
   31de8:	lsr	r3, r3, #2
   31dec:	sub	r2, r9, r2
   31df0:	ldrb	lr, [sp, #36]	; 0x24
   31df4:	ldr	r1, [sp, #4]
   31df8:	lsr	ip, r0, #4
   31dfc:	orr	r0, r3, r0, lsl #4
   31e00:	orr	r3, ip, lr, lsl #2
   31e04:	ldr	ip, [sp, #4]
   31e08:	add	r1, r1, #2
   31e0c:	sub	r1, r1, fp
   31e10:	strb	r3, [ip]
   31e14:	strb	r0, [ip, #1]
   31e18:	b	31cb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   31e1c:	mov	r2, r9
   31e20:	str	fp, [sp, #16]
   31e24:	b	31dbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   31e28:	ldr	r3, [sp, #16]
   31e2c:	sub	r1, r3, fp
   31e30:	ldr	r3, [sp, #8]
   31e34:	sub	r2, r9, r3
   31e38:	b	31cb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   31e3c:			; <UNDEFINED> instruction: 0x000478b8

00031e40 <flatcc_json_parser_build_string@@Base>:
   31e40:	cmp	r1, r2
   31e44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31e48:	mov	r5, r0
   31e4c:	strd	r6, [sp, #8]
   31e50:	mov	r6, r2
   31e54:	mov	r7, r3
   31e58:	str	r8, [sp, #16]
   31e5c:	str	lr, [sp, #20]
   31e60:	sub	sp, sp, #8
   31e64:	beq	32008 <flatcc_json_parser_build_string@@Base+0x1c8>
   31e68:	ldrb	r3, [r1]
   31e6c:	cmp	r3, #34	; 0x22
   31e70:	bne	32008 <flatcc_json_parser_build_string@@Base+0x1c8>
   31e74:	add	r8, r1, #1
   31e78:	cmp	r2, r8
   31e7c:	beq	32158 <flatcc_json_parser_build_string@@Base+0x318>
   31e80:	ldrb	r2, [r1, #1]
   31e84:	cmp	r2, #34	; 0x22
   31e88:	cmpne	r2, #31
   31e8c:	movhi	r3, #1
   31e90:	movls	r3, #0
   31e94:	cmp	r2, #92	; 0x5c
   31e98:	moveq	r3, #0
   31e9c:	andne	r3, r3, #1
   31ea0:	cmp	r3, #0
   31ea4:	beq	32178 <flatcc_json_parser_build_string@@Base+0x338>
   31ea8:	add	r3, r1, #2
   31eac:	cmp	r3, r6
   31eb0:	mov	r4, r3
   31eb4:	beq	3215c <flatcc_json_parser_build_string@@Base+0x31c>
   31eb8:	ldrb	r2, [r3], #1
   31ebc:	cmp	r2, #34	; 0x22
   31ec0:	cmpne	r2, #31
   31ec4:	movhi	r0, #1
   31ec8:	movls	r0, #0
   31ecc:	cmp	r2, #92	; 0x5c
   31ed0:	moveq	r0, #0
   31ed4:	andne	r0, r0, #1
   31ed8:	cmp	r0, #0
   31edc:	bne	31eac <flatcc_json_parser_build_string@@Base+0x6c>
   31ee0:	cmp	r2, #31
   31ee4:	ldr	r0, [r5]
   31ee8:	bls	320d4 <flatcc_json_parser_build_string@@Base+0x294>
   31eec:	cmp	r2, #34	; 0x22
   31ef0:	beq	3210c <flatcc_json_parser_build_string@@Base+0x2cc>
   31ef4:	bl	27dc8 <flatcc_builder_start_string@@Base>
   31ef8:	cmp	r0, #0
   31efc:	bne	31fe4 <flatcc_json_parser_build_string@@Base+0x1a4>
   31f00:	sub	r2, r4, r8
   31f04:	mov	r1, r8
   31f08:	ldr	r0, [r5]
   31f0c:	bl	27384 <flatcc_builder_append_string@@Base>
   31f10:	cmp	r0, #0
   31f14:	beq	31fe4 <flatcc_json_parser_build_string@@Base+0x1a4>
   31f18:	cmp	r6, r4
   31f1c:	beq	32180 <flatcc_json_parser_build_string@@Base+0x340>
   31f20:	ldrb	r3, [r4]
   31f24:	cmp	r3, #34	; 0x22
   31f28:	beq	32140 <flatcc_json_parser_build_string@@Base+0x300>
   31f2c:	mov	r1, r4
   31f30:	add	r3, sp, #4
   31f34:	mov	r2, r6
   31f38:	mov	r0, r5
   31f3c:	bl	2ed30 <flatcc_json_parser_string_escape@@Base>
   31f40:	mov	r8, r0
   31f44:	ldrb	r2, [sp, #4]
   31f48:	add	r1, sp, #5
   31f4c:	ldr	r0, [r5]
   31f50:	bl	27384 <flatcc_builder_append_string@@Base>
   31f54:	cmp	r0, #0
   31f58:	beq	32150 <flatcc_json_parser_build_string@@Base+0x310>
   31f5c:	cmp	r6, r8
   31f60:	beq	3208c <flatcc_json_parser_build_string@@Base+0x24c>
   31f64:	ldrb	r3, [r8]
   31f68:	cmp	r3, #34	; 0x22
   31f6c:	cmpne	r3, #31
   31f70:	movhi	r2, #1
   31f74:	movls	r2, #0
   31f78:	cmp	r3, #92	; 0x5c
   31f7c:	moveq	r2, #0
   31f80:	andne	r2, r2, #1
   31f84:	cmp	r2, #0
   31f88:	beq	320cc <flatcc_json_parser_build_string@@Base+0x28c>
   31f8c:	add	r2, r8, #1
   31f90:	cmp	r6, r2
   31f94:	mov	r4, r2
   31f98:	beq	32090 <flatcc_json_parser_build_string@@Base+0x250>
   31f9c:	ldrb	r3, [r2], #1
   31fa0:	cmp	r3, #34	; 0x22
   31fa4:	cmpne	r3, #31
   31fa8:	movhi	r1, #1
   31fac:	movls	r1, #0
   31fb0:	cmp	r3, #92	; 0x5c
   31fb4:	moveq	r1, #0
   31fb8:	andne	r1, r1, #1
   31fbc:	cmp	r1, #0
   31fc0:	bne	31f90 <flatcc_json_parser_build_string@@Base+0x150>
   31fc4:	cmp	r3, #31
   31fc8:	ldr	r0, [r5]
   31fcc:	bls	32040 <flatcc_json_parser_build_string@@Base+0x200>
   31fd0:	sub	r2, r4, r8
   31fd4:	mov	r1, r8
   31fd8:	bl	27384 <flatcc_builder_append_string@@Base>
   31fdc:	cmp	r0, #0
   31fe0:	bne	31f20 <flatcc_json_parser_build_string@@Base+0xe0>
   31fe4:	mov	r3, #0
   31fe8:	str	r3, [r7]
   31fec:	mov	r0, r4
   31ff0:	add	sp, sp, #8
   31ff4:	ldrd	r4, [sp]
   31ff8:	ldrd	r6, [sp, #8]
   31ffc:	ldr	r8, [sp, #16]
   32000:	add	sp, sp, #20
   32004:	pop	{pc}		; (ldr pc, [sp], #4)
   32008:	ldr	r3, [r5, #24]
   3200c:	cmp	r3, #0
   32010:	bne	32030 <flatcc_json_parser_build_string@@Base+0x1f0>
   32014:	ldr	r3, [r5, #4]
   32018:	mov	r2, #16
   3201c:	str	r2, [r5, #24]
   32020:	str	r1, [r5, #36]	; 0x24
   32024:	sub	r3, r1, r3
   32028:	add	r3, r3, #1
   3202c:	str	r3, [r5, #20]
   32030:	mov	r4, r6
   32034:	mov	r8, r6
   32038:	ldr	r0, [r5]
   3203c:	b	31ef4 <flatcc_json_parser_build_string@@Base+0xb4>
   32040:	ldr	r3, [r5, #24]
   32044:	cmp	r3, #0
   32048:	beq	320c0 <flatcc_json_parser_build_string@@Base+0x280>
   3204c:	bl	2a1d4 <flatcc_builder_end_string@@Base>
   32050:	str	r0, [r7]
   32054:	mov	r4, r6
   32058:	ldr	r3, [r5, #24]
   3205c:	cmp	r3, #0
   32060:	movne	r4, r6
   32064:	bne	31fec <flatcc_json_parser_build_string@@Base+0x1ac>
   32068:	ldr	r3, [r5, #4]
   3206c:	mov	r2, #20
   32070:	str	r2, [r5, #24]
   32074:	str	r4, [r5, #36]	; 0x24
   32078:	sub	r3, r4, r3
   3207c:	mov	r4, r6
   32080:	add	r3, r3, #1
   32084:	str	r3, [r5, #20]
   32088:	b	31fec <flatcc_json_parser_build_string@@Base+0x1ac>
   3208c:	mov	r4, r6
   32090:	ldr	r0, [r5]
   32094:	ldr	r3, [r5, #24]
   32098:	cmp	r3, #0
   3209c:	bne	3204c <flatcc_json_parser_build_string@@Base+0x20c>
   320a0:	ldr	r3, [r5, #4]
   320a4:	mov	r2, #20
   320a8:	str	r2, [r5, #24]
   320ac:	str	r4, [r5, #36]	; 0x24
   320b0:	sub	r4, r4, r3
   320b4:	add	r4, r4, #1
   320b8:	str	r4, [r5, #20]
   320bc:	b	3204c <flatcc_json_parser_build_string@@Base+0x20c>
   320c0:	mov	r2, #17
   320c4:	ldr	r3, [r5, #4]
   320c8:	b	320a8 <flatcc_json_parser_build_string@@Base+0x268>
   320cc:	mov	r4, r8
   320d0:	b	31fc4 <flatcc_json_parser_build_string@@Base+0x184>
   320d4:	ldr	r3, [r5, #24]
   320d8:	cmp	r3, #0
   320dc:	bne	32104 <flatcc_json_parser_build_string@@Base+0x2c4>
   320e0:	ldr	r3, [r5, #4]
   320e4:	mov	r2, #17
   320e8:	sub	r3, r4, r3
   320ec:	str	r2, [r5, #24]
   320f0:	add	r3, r3, #1
   320f4:	str	r3, [r5, #20]
   320f8:	str	r4, [r5, #36]	; 0x24
   320fc:	mov	r4, r6
   32100:	b	31ef4 <flatcc_json_parser_build_string@@Base+0xb4>
   32104:	mov	r4, r6
   32108:	b	31ef4 <flatcc_json_parser_build_string@@Base+0xb4>
   3210c:	sub	r2, r4, r8
   32110:	mov	r1, r8
   32114:	bl	29ec8 <flatcc_builder_create_string@@Base>
   32118:	str	r0, [r7]
   3211c:	ldrb	r3, [r4]
   32120:	cmp	r3, #34	; 0x22
   32124:	addeq	r4, r4, #1
   32128:	beq	31fec <flatcc_json_parser_build_string@@Base+0x1ac>
   3212c:	ldr	r3, [r5, #24]
   32130:	cmp	r3, #0
   32134:	movne	r4, r6
   32138:	bne	31fec <flatcc_json_parser_build_string@@Base+0x1ac>
   3213c:	b	32068 <flatcc_json_parser_build_string@@Base+0x228>
   32140:	ldr	r0, [r5]
   32144:	bl	2a1d4 <flatcc_builder_end_string@@Base>
   32148:	str	r0, [r7]
   3214c:	b	3211c <flatcc_json_parser_build_string@@Base+0x2dc>
   32150:	mov	r4, r8
   32154:	b	31fe4 <flatcc_json_parser_build_string@@Base+0x1a4>
   32158:	mov	r4, r2
   3215c:	ldr	r0, [r5]
   32160:	ldr	r3, [r5, #24]
   32164:	cmp	r3, #0
   32168:	bne	32104 <flatcc_json_parser_build_string@@Base+0x2c4>
   3216c:	mov	r2, #20
   32170:	ldr	r3, [r5, #4]
   32174:	b	320e8 <flatcc_json_parser_build_string@@Base+0x2a8>
   32178:	mov	r4, r8
   3217c:	b	31ee0 <flatcc_json_parser_build_string@@Base+0xa0>
   32180:	ldr	r0, [r5]
   32184:	b	3204c <flatcc_json_parser_build_string@@Base+0x20c>

00032188 <flatcc_json_parser_prepare_unions@@Base>:
   32188:	add	ip, r3, r3, lsl #1
   3218c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32190:	mov	r4, r0
   32194:	ldr	r0, [r0]
   32198:	mov	r5, r2
   3219c:	strd	r6, [sp, #8]
   321a0:	mov	r7, r1
   321a4:	lsl	r1, ip, #3
   321a8:	str	r8, [sp, #16]
   321ac:	mov	r6, r3
   321b0:	ldr	r8, [sp, #24]
   321b4:	add	r1, r1, #8
   321b8:	str	lr, [sp, #20]
   321bc:	bl	25db0 <flatcc_builder_enter_user_frame@@Base>
   321c0:	cmp	r0, #0
   321c4:	str	r0, [r8]
   321c8:	bne	3220c <flatcc_json_parser_prepare_unions@@Base+0x84>
   321cc:	ldr	r3, [r4, #24]
   321d0:	cmp	r3, #0
   321d4:	bne	321f4 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   321d8:	ldr	r3, [r4, #4]
   321dc:	mov	r1, #33	; 0x21
   321e0:	str	r7, [r4, #36]	; 0x24
   321e4:	str	r1, [r4, #24]
   321e8:	sub	r7, r7, r3
   321ec:	add	r7, r7, #1
   321f0:	str	r7, [r4, #20]
   321f4:	mov	r0, r5
   321f8:	ldrd	r4, [sp]
   321fc:	ldrd	r6, [sp, #8]
   32200:	ldr	r8, [sp, #16]
   32204:	add	sp, sp, #20
   32208:	pop	{pc}		; (ldr pc, [sp], #4)
   3220c:	mov	r1, r0
   32210:	ldr	r0, [r4]
   32214:	mov	r5, r7
   32218:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   3221c:	str	r6, [r0]
   32220:	b	321f4 <flatcc_json_parser_prepare_unions@@Base+0x6c>

00032224 <flatcc_json_parser_finalize_unions@@Base>:
   32224:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32228:	mov	r4, r0
   3222c:	mov	r5, r1
   32230:	mov	r1, r3
   32234:	ldr	r0, [r0]
   32238:	strd	r6, [sp, #8]
   3223c:	mov	r6, r3
   32240:	mov	r7, r2
   32244:	str	r8, [sp, #16]
   32248:	str	lr, [sp, #20]
   3224c:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   32250:	ldr	r3, [r0, #4]
   32254:	cmp	r3, #0
   32258:	beq	3228c <flatcc_json_parser_finalize_unions@@Base+0x68>
   3225c:	ldr	r3, [r4, #24]
   32260:	cmp	r3, #0
   32264:	movne	r5, r7
   32268:	bne	3228c <flatcc_json_parser_finalize_unions@@Base+0x68>
   3226c:	ldr	r3, [r4, #4]
   32270:	mov	r2, #27
   32274:	str	r5, [r4, #36]	; 0x24
   32278:	str	r2, [r4, #24]
   3227c:	sub	r3, r5, r3
   32280:	mov	r5, r7
   32284:	add	r3, r3, #1
   32288:	str	r3, [r4, #20]
   3228c:	mov	r1, r6
   32290:	ldr	r0, [r4]
   32294:	bl	25e90 <flatcc_builder_exit_user_frame_at@@Base>
   32298:	mov	r0, r5
   3229c:	ldrd	r4, [sp]
   322a0:	ldrd	r6, [sp, #8]
   322a4:	ldr	r8, [sp, #16]
   322a8:	add	sp, sp, #20
   322ac:	pop	{pc}		; (ldr pc, [sp], #4)

000322b0 <flatcc_json_parser_union@@Base>:
   322b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   322b4:	mov	r5, r0
   322b8:	mov	r4, r3
   322bc:	ldr	r0, [r0]
   322c0:	strd	r6, [sp, #8]
   322c4:	mov	r7, r1
   322c8:	mov	r6, r2
   322cc:	str	r8, [sp, #16]
   322d0:	str	lr, [sp, #20]
   322d4:	sub	sp, sp, #16
   322d8:	ldr	r1, [sp, #44]	; 0x2c
   322dc:	ldrh	r8, [sp, #40]	; 0x28
   322e0:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   322e4:	add	r3, r4, r4, lsl #1
   322e8:	add	r3, r0, r3, lsl #3
   322ec:	ldr	r2, [r3, #8]
   322f0:	cmp	r2, #0
   322f4:	beq	32348 <flatcc_json_parser_union@@Base+0x98>
   322f8:	ldr	r3, [r5, #24]
   322fc:	cmp	r3, #0
   32300:	bne	32328 <flatcc_json_parser_union@@Base+0x78>
   32304:	ldr	r3, [r5, #4]
   32308:	mov	r2, #28
   3230c:	mov	r4, r6
   32310:	str	r2, [r5, #24]
   32314:	str	r7, [r5, #36]	; 0x24
   32318:	sub	r7, r7, r3
   3231c:	add	r7, r7, #1
   32320:	str	r7, [r5, #20]
   32324:	b	3232c <flatcc_json_parser_union@@Base+0x7c>
   32328:	mov	r4, r6
   3232c:	mov	r0, r4
   32330:	add	sp, sp, #16
   32334:	ldrd	r4, [sp]
   32338:	ldrd	r6, [sp, #8]
   3233c:	ldr	r8, [sp, #16]
   32340:	add	sp, sp, #20
   32344:	pop	{pc}		; (ldr pc, [sp], #4)
   32348:	ldrb	r2, [r3, #20]
   3234c:	mov	ip, r0
   32350:	cmp	r2, #0
   32354:	beq	323e8 <flatcc_json_parser_union@@Base+0x138>
   32358:	ldrb	r3, [r3, #21]
   3235c:	cmp	r3, #0
   32360:	strb	r3, [sp, #8]
   32364:	beq	32420 <flatcc_json_parser_union@@Base+0x170>
   32368:	ldr	lr, [ip, #4]
   3236c:	add	r4, sp, #12
   32370:	mov	r1, r7
   32374:	mov	r2, r6
   32378:	mov	r0, r5
   3237c:	add	r7, sp, #8
   32380:	sub	lr, lr, #1
   32384:	str	lr, [ip, #4]
   32388:	str	r4, [sp]
   3238c:	ldr	ip, [sp, #48]	; 0x30
   32390:	blx	ip
   32394:	cmp	r6, r0
   32398:	mov	r4, r0
   3239c:	beq	3232c <flatcc_json_parser_union@@Base+0x7c>
   323a0:	mov	r1, r8
   323a4:	ldm	r7, {r2, r3}
   323a8:	ldr	r0, [r5]
   323ac:	bl	2a91c <flatcc_builder_table_add_union@@Base>
   323b0:	cmp	r0, #0
   323b4:	beq	3232c <flatcc_json_parser_union@@Base+0x7c>
   323b8:	ldr	r3, [r5, #24]
   323bc:	cmp	r3, #0
   323c0:	bne	32328 <flatcc_json_parser_union@@Base+0x78>
   323c4:	ldr	r3, [r5, #4]
   323c8:	mov	r2, #28
   323cc:	str	r2, [r5, #24]
   323d0:	str	r4, [r5, #36]	; 0x24
   323d4:	sub	r3, r4, r3
   323d8:	mov	r4, r6
   323dc:	add	r3, r3, #1
   323e0:	str	r3, [r5, #20]
   323e4:	b	3232c <flatcc_json_parser_union@@Base+0x7c>
   323e8:	ldr	lr, [ip, #4]
   323ec:	mov	r2, r6
   323f0:	mov	r1, r7
   323f4:	mov	r0, r5
   323f8:	ldr	r6, [r5, #4]
   323fc:	ldr	r4, [r5, #16]
   32400:	add	lr, lr, #1
   32404:	str	lr, [ip, #4]
   32408:	str	r7, [r3, #8]
   3240c:	str	r6, [r3, #12]
   32410:	str	r4, [r3, #16]
   32414:	bl	2fb00 <flatcc_json_parser_generic_json@@Base>
   32418:	mov	r4, r0
   3241c:	b	3232c <flatcc_json_parser_union@@Base+0x7c>
   32420:	ldr	r3, [r5, #24]
   32424:	cmp	r3, #0
   32428:	bne	32328 <flatcc_json_parser_union@@Base+0x78>
   3242c:	mov	r2, #25
   32430:	ldr	r3, [r5, #4]
   32434:	b	3230c <flatcc_json_parser_union@@Base+0x5c>

00032438 <flatcc_json_parser_union_type@@Base>:
   32438:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3243c:	mov	r5, r0
   32440:	add	r4, r3, r3, lsl #1
   32444:	ldr	r0, [r0]
   32448:	strd	r6, [sp, #8]
   3244c:	lsl	r4, r4, #3
   32450:	mov	r7, r2
   32454:	strd	r8, [sp, #16]
   32458:	strd	sl, [sp, #24]
   3245c:	mov	sl, r1
   32460:	str	lr, [sp, #32]
   32464:	sub	sp, sp, #36	; 0x24
   32468:	ldrh	r3, [sp, #72]	; 0x48
   3246c:	ldr	r1, [sp, #76]	; 0x4c
   32470:	str	r3, [sp, #12]
   32474:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   32478:	add	fp, r0, #8
   3247c:	add	r6, fp, r4
   32480:	ldrb	r3, [r6, #12]
   32484:	cmp	r3, #0
   32488:	beq	324e0 <flatcc_json_parser_union_type@@Base+0xa8>
   3248c:	ldr	r3, [r5, #24]
   32490:	cmp	r3, #0
   32494:	beq	324bc <flatcc_json_parser_union_type@@Base+0x84>
   32498:	mov	r9, r7
   3249c:	mov	r0, r9
   324a0:	add	sp, sp, #36	; 0x24
   324a4:	ldrd	r4, [sp]
   324a8:	ldrd	r6, [sp, #8]
   324ac:	ldrd	r8, [sp, #16]
   324b0:	ldrd	sl, [sp, #24]
   324b4:	add	sp, sp, #32
   324b8:	pop	{pc}		; (ldr pc, [sp], #4)
   324bc:	ldr	r3, [r5, #4]
   324c0:	mov	r2, #28
   324c4:	mov	r9, r7
   324c8:	str	sl, [r5, #36]	; 0x24
   324cc:	str	r2, [r5, #24]
   324d0:	sub	sl, sl, r3
   324d4:	add	sl, sl, #1
   324d8:	str	sl, [r5, #20]
   324dc:	b	3249c <flatcc_json_parser_union_type@@Base+0x64>
   324e0:	mov	r8, r0
   324e4:	mov	r1, #0
   324e8:	str	r3, [sp, #20]
   324ec:	mov	r0, #0
   324f0:	mov	r3, #1
   324f4:	cmp	sl, r7
   324f8:	strd	r0, [sp, #24]
   324fc:	strh	r3, [r6, #12]
   32500:	beq	32600 <flatcc_json_parser_union_type@@Base+0x1c8>
   32504:	add	r0, sp, #24
   32508:	add	r3, sp, #20
   3250c:	mov	r2, r7
   32510:	mov	r1, sl
   32514:	str	r0, [sp]
   32518:	mov	r0, r5
   3251c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   32520:	cmp	sl, r0
   32524:	mov	r9, r0
   32528:	bne	32608 <flatcc_json_parser_union_type@@Base+0x1d0>
   3252c:	add	r0, r6, #13
   32530:	mov	r1, r9
   32534:	ldr	r3, [sp, #80]	; 0x50
   32538:	mov	r2, r7
   3253c:	str	r0, [sp]
   32540:	mov	r0, r5
   32544:	bl	2ce08 <flatcc_verify_union_vector_field@@Base+0x2b8>
   32548:	mov	r9, r0
   3254c:	ldr	r1, [fp, r4]
   32550:	ldr	r3, [r8, #4]
   32554:	cmp	r1, #0
   32558:	beq	32658 <flatcc_json_parser_union_type@@Base+0x220>
   3255c:	cmp	r3, #0
   32560:	beq	32698 <flatcc_json_parser_union_type@@Base+0x260>
   32564:	ldr	lr, [r6, #4]
   32568:	sub	r3, r3, #1
   3256c:	add	ip, sp, #28
   32570:	mov	r2, r7
   32574:	mov	r0, r5
   32578:	ldr	sl, [r6, #8]
   3257c:	add	r4, sp, #24
   32580:	str	r3, [r8, #4]
   32584:	ldr	r8, [r5, #16]
   32588:	str	sl, [r5, #16]
   3258c:	ldr	sl, [r5, #4]
   32590:	str	lr, [r5, #4]
   32594:	ldrb	r3, [r6, #13]
   32598:	str	ip, [sp]
   3259c:	ldr	ip, [sp, #84]	; 0x54
   325a0:	strb	r3, [sp, #24]
   325a4:	blx	ip
   325a8:	cmp	r7, r0
   325ac:	beq	32498 <flatcc_json_parser_union_type@@Base+0x60>
   325b0:	ldm	r4, {r2, r3}
   325b4:	ldr	r0, [r5]
   325b8:	ldr	r1, [sp, #12]
   325bc:	bl	2a91c <flatcc_builder_table_add_union@@Base>
   325c0:	cmp	r0, #0
   325c4:	streq	sl, [r5, #4]
   325c8:	streq	r8, [r5, #16]
   325cc:	beq	3249c <flatcc_json_parser_union_type@@Base+0x64>
   325d0:	ldr	r3, [r5, #24]
   325d4:	cmp	r3, #0
   325d8:	bne	32498 <flatcc_json_parser_union_type@@Base+0x60>
   325dc:	ldr	r3, [r5, #4]
   325e0:	mov	r2, #28
   325e4:	str	r2, [r5, #24]
   325e8:	str	r9, [r5, #36]	; 0x24
   325ec:	sub	r3, r9, r3
   325f0:	mov	r9, r7
   325f4:	add	r3, r3, #1
   325f8:	str	r3, [r5, #20]
   325fc:	b	3249c <flatcc_json_parser_union_type@@Base+0x64>
   32600:	mov	r9, r7
   32604:	b	3252c <flatcc_json_parser_union_type@@Base+0xf4>
   32608:	ldr	r3, [sp, #20]
   3260c:	cmp	r3, #0
   32610:	bne	3266c <flatcc_json_parser_union_type@@Base+0x234>
   32614:	ldrd	r2, [sp, #24]
   32618:	cmp	r3, #0
   3261c:	cmpeq	r2, #255	; 0xff
   32620:	strbls	r2, [r6, #13]
   32624:	bls	3254c <flatcc_json_parser_union_type@@Base+0x114>
   32628:	ldr	r3, [r5, #24]
   3262c:	cmp	r3, #0
   32630:	bne	32650 <flatcc_json_parser_union_type@@Base+0x218>
   32634:	ldr	r3, [r5, #4]
   32638:	mov	r2, #7
   3263c:	str	r2, [r5, #24]
   32640:	str	r0, [r5, #36]	; 0x24
   32644:	sub	r3, r0, r3
   32648:	add	r3, r3, #1
   3264c:	str	r3, [r5, #20]
   32650:	mov	r9, r7
   32654:	b	3254c <flatcc_json_parser_union_type@@Base+0x114>
   32658:	ldrb	r2, [r6, #13]
   3265c:	cmp	r2, #0
   32660:	addne	r3, r3, #1
   32664:	str	r3, [r8, #4]
   32668:	b	3249c <flatcc_json_parser_union_type@@Base+0x64>
   3266c:	ldr	r3, [r5, #24]
   32670:	cmp	r3, #0
   32674:	bne	32650 <flatcc_json_parser_union_type@@Base+0x218>
   32678:	ldr	r3, [r5, #4]
   3267c:	mov	r2, #8
   32680:	str	r2, [r5, #24]
   32684:	str	r0, [r5, #36]	; 0x24
   32688:	sub	r9, r0, r3
   3268c:	add	r9, r9, #1
   32690:	str	r9, [r5, #20]
   32694:	b	32650 <flatcc_json_parser_union_type@@Base+0x218>
   32698:	movw	r1, #31824	; 0x7c50
   3269c:	movt	r1, #4
   326a0:	ldr	r3, [pc, #12]	; 326b4 <flatcc_json_parser_union_type@@Base+0x27c>
   326a4:	movw	r0, #31900	; 0x7c9c
   326a8:	movt	r0, #4
   326ac:	movw	r2, #965	; 0x3c5
   326b0:	bl	145f0 <__assert_fail@plt>
   326b4:			; <UNDEFINED> instruction: 0x00047ab8

000326b8 <flatcc_json_parser_union_vector@@Base>:
   326b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   326bc:	mov	r4, r3
   326c0:	mov	r5, r0
   326c4:	ldr	r0, [r0]
   326c8:	strd	r6, [sp, #8]
   326cc:	mov	r6, r1
   326d0:	ldr	r1, [sp, #36]	; 0x24
   326d4:	strd	r8, [sp, #16]
   326d8:	mov	r9, r2
   326dc:	ldrh	r8, [sp, #32]
   326e0:	str	sl, [sp, #24]
   326e4:	str	lr, [sp, #28]
   326e8:	ldr	r7, [sp, #40]	; 0x28
   326ec:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   326f0:	add	r3, r4, r4, lsl #1
   326f4:	add	ip, r0, #8
   326f8:	lsl	r3, r3, #3
   326fc:	ldr	r2, [ip, r3]
   32700:	add	r4, ip, r3
   32704:	cmp	r2, #0
   32708:	beq	32750 <flatcc_json_parser_union_vector@@Base+0x98>
   3270c:	ldr	r3, [r5, #24]
   32710:	cmp	r3, #0
   32714:	bne	32734 <flatcc_json_parser_union_vector@@Base+0x7c>
   32718:	ldr	r3, [r5, #4]
   3271c:	mov	r2, #28
   32720:	str	r6, [r5, #36]	; 0x24
   32724:	str	r2, [r5, #24]
   32728:	sub	r6, r6, r3
   3272c:	add	r6, r6, #1
   32730:	str	r6, [r5, #20]
   32734:	mov	r0, r9
   32738:	ldrd	r4, [sp]
   3273c:	ldrd	r6, [sp, #8]
   32740:	ldrd	r8, [sp, #16]
   32744:	ldr	sl, [sp, #24]
   32748:	add	sp, sp, #28
   3274c:	pop	{pc}		; (ldr pc, [sp], #4)
   32750:	ldrb	r1, [r4, #12]
   32754:	mov	lr, r0
   32758:	ldr	r2, [r0, #4]
   3275c:	cmp	r1, #0
   32760:	bne	327a8 <flatcc_json_parser_union_vector@@Base+0xf0>
   32764:	ldr	r8, [r5, #4]
   32768:	add	r1, r2, #1
   3276c:	mov	r0, r5
   32770:	mov	r2, r9
   32774:	ldr	r7, [r5, #16]
   32778:	ldr	sl, [sp, #24]
   3277c:	str	r1, [lr, #4]
   32780:	mov	r1, r6
   32784:	str	r8, [r4, #4]
   32788:	str	r7, [r4, #8]
   3278c:	str	r6, [ip, r3]
   32790:	ldrd	r4, [sp]
   32794:	ldrd	r6, [sp, #8]
   32798:	ldrd	r8, [sp, #16]
   3279c:	ldr	lr, [sp, #28]
   327a0:	add	sp, sp, #32
   327a4:	b	2fb00 <flatcc_json_parser_generic_json@@Base>
   327a8:	sub	ip, r2, #1
   327ac:	ldr	r3, [r4, #20]
   327b0:	mov	r2, r9
   327b4:	mov	r1, r6
   327b8:	mov	r0, r5
   327bc:	ldr	sl, [sp, #24]
   327c0:	str	ip, [lr, #4]
   327c4:	str	r8, [sp, #36]	; 0x24
   327c8:	str	r7, [sp, #40]	; 0x28
   327cc:	ldr	ip, [r4, #16]
   327d0:	ldrd	r4, [sp]
   327d4:	ldrd	r6, [sp, #8]
   327d8:	str	ip, [sp, #32]
   327dc:	ldrd	r8, [sp, #16]
   327e0:	ldr	lr, [sp, #28]
   327e4:	add	sp, sp, #32
   327e8:	b	2e340 <flatcc_json_parser_space_ext@@Base+0x154>

000327ec <flatcc_json_parser_union_type_vector@@Base>:
   327ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   327f0:	mov	r5, r2
   327f4:	strd	r6, [sp, #8]
   327f8:	mov	r6, r0
   327fc:	mov	r7, r1
   32800:	strd	r8, [sp, #16]
   32804:	mov	r8, r3
   32808:	strd	sl, [sp, #24]
   3280c:	add	r8, r8, r8, lsl #1
   32810:	str	lr, [sp, #32]
   32814:	sub	sp, sp, #44	; 0x2c
   32818:	ldrh	r3, [sp, #80]	; 0x50
   3281c:	lsl	r8, r8, #3
   32820:	ldr	r0, [r0]
   32824:	ldr	r1, [sp, #84]	; 0x54
   32828:	str	r3, [sp, #20]
   3282c:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   32830:	add	r0, r0, #8
   32834:	add	fp, r0, r8
   32838:	ldrb	r3, [fp, #12]
   3283c:	cmp	r3, #0
   32840:	beq	32898 <flatcc_json_parser_union_type_vector@@Base+0xac>
   32844:	ldr	r3, [r6, #24]
   32848:	cmp	r3, #0
   3284c:	bne	32874 <flatcc_json_parser_union_type_vector@@Base+0x88>
   32850:	ldr	r3, [r6, #4]
   32854:	mov	r2, #28
   32858:	mov	r4, r5
   3285c:	str	r2, [r6, #24]
   32860:	str	r7, [r6, #36]	; 0x24
   32864:	sub	r7, r7, r3
   32868:	add	r7, r7, #1
   3286c:	str	r7, [r6, #20]
   32870:	b	32878 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   32874:	mov	r4, r5
   32878:	mov	r0, r4
   3287c:	add	sp, sp, #44	; 0x2c
   32880:	ldrd	r4, [sp]
   32884:	ldrd	r6, [sp, #8]
   32888:	ldrd	r8, [sp, #16]
   3288c:	ldrd	sl, [sp, #24]
   32890:	add	sp, sp, #32
   32894:	pop	{pc}		; (ldr pc, [sp], #4)
   32898:	mov	r0, #1
   3289c:	mvn	r3, #0
   328a0:	mov	r2, r0
   328a4:	mov	r1, r0
   328a8:	strb	r0, [fp, #12]
   328ac:	ldr	r0, [r6]
   328b0:	bl	278a0 <flatcc_builder_start_vector@@Base>
   328b4:	cmp	r0, #0
   328b8:	bne	32958 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   328bc:	cmp	r7, r5
   328c0:	beq	328d0 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   328c4:	ldrb	r3, [r7]
   328c8:	cmp	r3, #91	; 0x5b
   328cc:	beq	329a0 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   328d0:	ldr	r3, [r6, #24]
   328d4:	cmp	r3, #0
   328d8:	bne	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   328dc:	ldr	r3, [r6, #4]
   328e0:	mov	r2, #22
   328e4:	mov	r4, r5
   328e8:	str	r7, [r6, #36]	; 0x24
   328ec:	str	r2, [r6, #24]
   328f0:	sub	r7, r7, r3
   328f4:	add	r7, r7, #1
   328f8:	str	r7, [r6, #20]
   328fc:	ldr	r0, [r6]
   32900:	bl	28ee4 <flatcc_builder_vector_count@@Base>
   32904:	mov	r7, r0
   32908:	mov	r1, r0
   3290c:	ldr	r0, [r6]
   32910:	str	r7, [fp, #16]
   32914:	bl	25db0 <flatcc_builder_enter_user_frame@@Base>
   32918:	mov	r1, r0
   3291c:	mov	r9, r0
   32920:	ldr	r0, [r6]
   32924:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   32928:	mov	sl, r0
   3292c:	ldr	r0, [r6]
   32930:	bl	28ef0 <flatcc_builder_vector_edit@@Base>
   32934:	mov	r1, r0
   32938:	mov	r2, r7
   3293c:	mov	r0, sl
   32940:	bl	14524 <memcpy@plt>
   32944:	ldr	r0, [r6]
   32948:	bl	28cd4 <flatcc_builder_end_vector@@Base>
   3294c:	subs	sl, r0, #0
   32950:	bne	32cc4 <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   32954:	mov	r7, r4
   32958:	ldr	r3, [r6, #24]
   3295c:	cmp	r3, #0
   32960:	bne	32874 <flatcc_json_parser_union_type_vector@@Base+0x88>
   32964:	mov	r2, #33	; 0x21
   32968:	ldr	r3, [r6, #4]
   3296c:	b	32858 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   32970:	ldr	r3, [r6, #24]
   32974:	cmp	r3, #0
   32978:	bne	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   3297c:	ldr	r3, [r6, #4]
   32980:	mov	r2, #5
   32984:	str	r7, [r6, #36]	; 0x24
   32988:	str	r2, [r6, #24]
   3298c:	sub	r7, r7, r3
   32990:	add	r7, r7, #1
   32994:	str	r7, [r6, #20]
   32998:	mov	r4, r5
   3299c:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   329a0:	add	r1, r7, #1
   329a4:	sub	r3, r5, r1
   329a8:	cmp	r3, #1
   329ac:	ble	32b58 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   329b0:	ldrb	r2, [r7, #1]
   329b4:	cmp	r2, #32
   329b8:	bhi	332d4 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   329bc:	bne	32b58 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   329c0:	ldrb	r2, [r7, #2]
   329c4:	cmp	r2, #32
   329c8:	addhi	r7, r7, #2
   329cc:	bls	32b58 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   329d0:	cmp	r5, r7
   329d4:	beq	329e0 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   329d8:	cmp	r2, #93	; 0x5d
   329dc:	beq	332f0 <flatcc_json_parser_union_type_vector@@Base+0xb04>
   329e0:	mov	r9, #0
   329e4:	mov	r1, #1
   329e8:	ldr	r0, [r6]
   329ec:	bl	26bfc <flatcc_builder_extend_vector@@Base>
   329f0:	subs	sl, r0, #0
   329f4:	beq	32958 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   329f8:	mov	r2, #0
   329fc:	mov	r3, #0
   32a00:	strb	r9, [sp, #27]
   32a04:	cmp	r5, r7
   32a08:	str	r9, [sp, #28]
   32a0c:	strd	r2, [sp, #32]
   32a10:	beq	32a3c <flatcc_json_parser_union_type_vector@@Base+0x250>
   32a14:	add	r0, sp, #32
   32a18:	add	r3, sp, #28
   32a1c:	mov	r2, r5
   32a20:	mov	r1, r7
   32a24:	str	r0, [sp]
   32a28:	mov	r0, r6
   32a2c:	bl	317b8 <flatcc_json_parser_integer@@Base>
   32a30:	cmp	r0, r7
   32a34:	mov	r4, r0
   32a38:	bne	32ea8 <flatcc_json_parser_union_type_vector@@Base+0x6bc>
   32a3c:	add	r0, sp, #27
   32a40:	mov	r2, r5
   32a44:	ldr	r3, [sp, #88]	; 0x58
   32a48:	mov	r1, r7
   32a4c:	str	r0, [sp]
   32a50:	mov	r0, r6
   32a54:	bl	2ce08 <flatcc_verify_union_vector_field@@Base+0x2b8>
   32a58:	cmp	r5, r0
   32a5c:	cmpne	r0, r7
   32a60:	mov	r4, r0
   32a64:	beq	32954 <flatcc_json_parser_union_type_vector@@Base+0x168>
   32a68:	ldrb	r0, [sp, #27]
   32a6c:	ldr	r3, [sp, #96]	; 0x60
   32a70:	blx	r3
   32a74:	cmp	r0, #0
   32a78:	bne	32ea0 <flatcc_json_parser_union_type_vector@@Base+0x6b4>
   32a7c:	ldr	r3, [r6, #8]
   32a80:	tst	r3, #1
   32a84:	beq	332a4 <flatcc_json_parser_union_type_vector@@Base+0xab8>
   32a88:	mov	r1, r0
   32a8c:	strb	r0, [sp, #27]
   32a90:	sub	r3, r5, r4
   32a94:	strb	r1, [sl]
   32a98:	cmp	r3, #1
   32a9c:	ble	32ab0 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   32aa0:	ldrb	r3, [r4]
   32aa4:	cmp	r3, #32
   32aa8:	bhi	32e0c <flatcc_json_parser_union_type_vector@@Base+0x620>
   32aac:	beq	32dfc <flatcc_json_parser_union_type_vector@@Base+0x610>
   32ab0:	cmp	r4, r5
   32ab4:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32ab8:	ldrb	r3, [r4]
   32abc:	cmp	r3, #32
   32ac0:	bne	32ae0 <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   32ac4:	add	r2, r4, #1
   32ac8:	cmp	r5, r2
   32acc:	mov	r4, r2
   32ad0:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32ad4:	ldrb	r3, [r2], #1
   32ad8:	cmp	r3, #32
   32adc:	beq	32ac8 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   32ae0:	cmp	r3, #32
   32ae4:	bhi	32c5c <flatcc_json_parser_union_type_vector@@Base+0x470>
   32ae8:	sub	r3, r3, #9
   32aec:	cmp	r3, #23
   32af0:	ldrls	pc, [pc, r3, lsl #2]
   32af4:	b	32cac <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   32af8:	andeq	r2, r3, r4, lsr #25
   32afc:	muleq	r3, ip, ip
   32b00:	andeq	r2, r3, ip, lsr #25
   32b04:	andeq	r2, r3, ip, lsr #25
   32b08:	andeq	r2, r3, r8, lsl ip
   32b0c:	andeq	r2, r3, ip, lsr #25
   32b10:	andeq	r2, r3, ip, lsr #25
   32b14:	andeq	r2, r3, ip, lsr #25
   32b18:	andeq	r2, r3, ip, lsr #25
   32b1c:	andeq	r2, r3, ip, lsr #25
   32b20:	andeq	r2, r3, ip, lsr #25
   32b24:	andeq	r2, r3, ip, lsr #25
   32b28:	andeq	r2, r3, ip, lsr #25
   32b2c:	andeq	r2, r3, ip, lsr #25
   32b30:	andeq	r2, r3, ip, lsr #25
   32b34:	andeq	r2, r3, ip, lsr #25
   32b38:	andeq	r2, r3, ip, lsr #25
   32b3c:	andeq	r2, r3, ip, lsr #25
   32b40:	andeq	r2, r3, ip, lsr #25
   32b44:	andeq	r2, r3, ip, lsr #25
   32b48:	andeq	r2, r3, ip, lsr #25
   32b4c:	andeq	r2, r3, ip, lsr #25
   32b50:	andeq	r2, r3, ip, lsr #25
   32b54:	andeq	r2, r3, ip, lsl #24
   32b58:	cmp	r5, r1
   32b5c:	beq	32b8c <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   32b60:	ldrb	r2, [r1]
   32b64:	cmp	r2, #32
   32b68:	bne	32b94 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   32b6c:	add	r3, r1, #1
   32b70:	b	32b80 <flatcc_json_parser_union_type_vector@@Base+0x394>
   32b74:	ldrb	r2, [r3], #1
   32b78:	cmp	r2, #32
   32b7c:	bne	32b94 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   32b80:	cmp	r5, r3
   32b84:	mov	r1, r3
   32b88:	bne	32b74 <flatcc_json_parser_union_type_vector@@Base+0x388>
   32b8c:	mov	r7, r1
   32b90:	b	329e0 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   32b94:	cmp	r2, #32
   32b98:	bhi	32db0 <flatcc_json_parser_union_type_vector@@Base+0x5c4>
   32b9c:	sub	r2, r2, #9
   32ba0:	cmp	r2, #23
   32ba4:	ldrls	pc, [pc, r2, lsl #2]
   32ba8:	b	32dc8 <flatcc_json_parser_union_type_vector@@Base+0x5dc>
   32bac:	andeq	r2, r3, r0, asr #27
   32bb0:			; <UNDEFINED> instruction: 0x00032db8
   32bb4:	andeq	r2, r3, r8, asr #27
   32bb8:	andeq	r2, r3, r8, asr #27
   32bbc:	andeq	r2, r3, ip, ror #26
   32bc0:	andeq	r2, r3, r8, asr #27
   32bc4:	andeq	r2, r3, r8, asr #27
   32bc8:	andeq	r2, r3, r8, asr #27
   32bcc:	andeq	r2, r3, r8, asr #27
   32bd0:	andeq	r2, r3, r8, asr #27
   32bd4:	andeq	r2, r3, r8, asr #27
   32bd8:	andeq	r2, r3, r8, asr #27
   32bdc:	andeq	r2, r3, r8, asr #27
   32be0:	andeq	r2, r3, r8, asr #27
   32be4:	andeq	r2, r3, r8, asr #27
   32be8:	andeq	r2, r3, r8, asr #27
   32bec:	andeq	r2, r3, r8, asr #27
   32bf0:	andeq	r2, r3, r8, asr #27
   32bf4:	andeq	r2, r3, r8, asr #27
   32bf8:	andeq	r2, r3, r8, asr #27
   32bfc:	andeq	r2, r3, r8, asr #27
   32c00:	andeq	r2, r3, r8, asr #27
   32c04:	andeq	r2, r3, r8, asr #27
   32c08:	andeq	r2, r3, r8, asr fp
   32c0c:	cmp	r5, r4
   32c10:	bne	32ab8 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   32c14:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32c18:	sub	r3, r5, r4
   32c1c:	add	r2, r4, #1
   32c20:	cmp	r3, #1
   32c24:	ble	32c34 <flatcc_json_parser_union_type_vector@@Base+0x448>
   32c28:	ldrb	r3, [r4, #1]
   32c2c:	cmp	r3, #10
   32c30:	addeq	r2, r4, #2
   32c34:	mov	r4, r2
   32c38:	ldr	r3, [r6, #16]
   32c3c:	str	r4, [r6, #4]
   32c40:	add	r3, r3, #1
   32c44:	str	r3, [r6, #16]
   32c48:	cmp	r5, r4
   32c4c:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32c50:	ldrb	r3, [r4]
   32c54:	cmp	r3, #32
   32c58:	bls	32ae8 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   32c5c:	cmp	r3, #44	; 0x2c
   32c60:	beq	32e1c <flatcc_json_parser_union_type_vector@@Base+0x630>
   32c64:	cmp	r3, #93	; 0x5d
   32c68:	beq	330f4 <flatcc_json_parser_union_type_vector@@Base+0x908>
   32c6c:	ldr	r3, [r6, #24]
   32c70:	cmp	r3, #0
   32c74:	bne	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32c78:	ldr	r3, [r6, #4]
   32c7c:	mov	r2, #9
   32c80:	sub	r3, r4, r3
   32c84:	str	r2, [r6, #24]
   32c88:	add	r3, r3, #1
   32c8c:	str	r3, [r6, #20]
   32c90:	str	r4, [r6, #36]	; 0x24
   32c94:	mov	r4, r5
   32c98:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32c9c:	add	r4, r4, #1
   32ca0:	b	32c38 <flatcc_json_parser_union_type_vector@@Base+0x44c>
   32ca4:	add	r4, r4, #1
   32ca8:	b	32c48 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   32cac:	ldr	r3, [r6, #24]
   32cb0:	cmp	r3, #0
   32cb4:	bne	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32cb8:	mov	r2, #5
   32cbc:	ldr	r3, [r6, #4]
   32cc0:	b	32c80 <flatcc_json_parser_union_type_vector@@Base+0x494>
   32cc4:	ldr	r3, [sp, #20]
   32cc8:	ldr	r0, [r6]
   32ccc:	sub	r1, r3, #1
   32cd0:	bl	2a77c <flatcc_builder_table_add_offset@@Base>
   32cd4:	cmp	r0, #0
   32cd8:	beq	32954 <flatcc_json_parser_union_type_vector@@Base+0x168>
   32cdc:	str	sl, [r0]
   32ce0:	ldr	r0, [r6]
   32ce4:	ldr	r1, [sp, #84]	; 0x54
   32ce8:	bl	25f08 <flatcc_builder_get_user_frame_ptr@@Base>
   32cec:	add	r3, r0, #8
   32cf0:	ldr	r1, [r3, r8]
   32cf4:	add	r8, r3, r8
   32cf8:	ldr	r3, [r0, #4]
   32cfc:	str	r9, [r8, #20]
   32d00:	cmp	r1, #0
   32d04:	addeq	r3, r3, #1
   32d08:	streq	r3, [r0, #4]
   32d0c:	beq	32878 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   32d10:	cmp	r3, #0
   32d14:	beq	33420 <flatcc_json_parser_union_type_vector@@Base+0xc34>
   32d18:	sub	r2, r3, #1
   32d1c:	ldmib	r8, {ip, lr}
   32d20:	mov	r3, r9
   32d24:	str	r2, [r0, #4]
   32d28:	mov	r2, r5
   32d2c:	mov	r0, r6
   32d30:	str	r7, [sp]
   32d34:	ldr	r7, [sp, #20]
   32d38:	str	r7, [sp, #4]
   32d3c:	ldr	r7, [sp, #92]	; 0x5c
   32d40:	str	r7, [sp, #8]
   32d44:	ldr	r8, [r6, #4]
   32d48:	str	ip, [r6, #4]
   32d4c:	ldr	r7, [r6, #16]
   32d50:	str	lr, [r6, #16]
   32d54:	bl	2e340 <flatcc_json_parser_space_ext@@Base+0x154>
   32d58:	cmp	r5, r0
   32d5c:	beq	32874 <flatcc_json_parser_union_type_vector@@Base+0x88>
   32d60:	str	r8, [r6, #4]
   32d64:	str	r7, [r6, #16]
   32d68:	b	32878 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   32d6c:	sub	r3, r5, r1
   32d70:	add	r2, r1, #1
   32d74:	cmp	r3, #1
   32d78:	ble	32d88 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   32d7c:	ldrb	r3, [r1, #1]
   32d80:	cmp	r3, #10
   32d84:	addeq	r2, r1, #2
   32d88:	mov	r1, r2
   32d8c:	ldr	r3, [r6, #16]
   32d90:	str	r1, [r6, #4]
   32d94:	add	r3, r3, #1
   32d98:	str	r3, [r6, #16]
   32d9c:	cmp	r5, r1
   32da0:	beq	32b8c <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   32da4:	ldrb	r2, [r1]
   32da8:	cmp	r2, #32
   32dac:	bls	32b9c <flatcc_json_parser_union_type_vector@@Base+0x3b0>
   32db0:	mov	r7, r1
   32db4:	b	329d8 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   32db8:	add	r1, r1, #1
   32dbc:	b	32d8c <flatcc_json_parser_union_type_vector@@Base+0x5a0>
   32dc0:	add	r1, r1, #1
   32dc4:	b	32d9c <flatcc_json_parser_union_type_vector@@Base+0x5b0>
   32dc8:	ldr	r3, [r6, #24]
   32dcc:	cmp	r3, #0
   32dd0:	movne	r7, r5
   32dd4:	bne	329e0 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   32dd8:	ldr	r3, [r6, #4]
   32ddc:	mov	r2, #5
   32de0:	mov	r7, r5
   32de4:	str	r2, [r6, #24]
   32de8:	str	r1, [r6, #36]	; 0x24
   32dec:	sub	r3, r1, r3
   32df0:	add	r3, r3, #1
   32df4:	str	r3, [r6, #20]
   32df8:	b	329e0 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   32dfc:	ldrb	r3, [r4, #1]
   32e00:	cmp	r3, #32
   32e04:	addhi	r4, r4, #1
   32e08:	bls	32ab0 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   32e0c:	cmp	r5, r4
   32e10:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32e14:	cmp	r3, #44	; 0x2c
   32e18:	bne	32c64 <flatcc_json_parser_union_type_vector@@Base+0x478>
   32e1c:	add	r7, r4, #1
   32e20:	sub	r3, r5, r7
   32e24:	cmp	r3, #1
   32e28:	ble	32e3c <flatcc_json_parser_union_type_vector@@Base+0x650>
   32e2c:	ldrb	r3, [r4, #1]
   32e30:	cmp	r3, #32
   32e34:	bhi	33260 <flatcc_json_parser_union_type_vector@@Base+0xa74>
   32e38:	beq	33250 <flatcc_json_parser_union_type_vector@@Base+0xa64>
   32e3c:	cmp	r5, r7
   32e40:	beq	32e70 <flatcc_json_parser_union_type_vector@@Base+0x684>
   32e44:	ldrb	r3, [r7]
   32e48:	cmp	r3, #32
   32e4c:	bne	32f00 <flatcc_json_parser_union_type_vector@@Base+0x714>
   32e50:	add	r2, r7, #1
   32e54:	b	32e64 <flatcc_json_parser_union_type_vector@@Base+0x678>
   32e58:	ldrb	r3, [r2], #1
   32e5c:	cmp	r3, #32
   32e60:	bne	32f00 <flatcc_json_parser_union_type_vector@@Base+0x714>
   32e64:	cmp	r5, r2
   32e68:	mov	r7, r2
   32e6c:	bne	32e58 <flatcc_json_parser_union_type_vector@@Base+0x66c>
   32e70:	ldr	r3, [r6, #24]
   32e74:	cmp	r3, #0
   32e78:	bne	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   32e7c:	ldr	r3, [r6, #4]
   32e80:	mov	r2, #9
   32e84:	mov	r4, r5
   32e88:	str	r2, [r6, #24]
   32e8c:	str	r7, [r6, #36]	; 0x24
   32e90:	sub	r3, r7, r3
   32e94:	add	r3, r3, #1
   32e98:	str	r3, [r6, #20]
   32e9c:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32ea0:	ldrb	r1, [sp, #27]
   32ea4:	b	32a90 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   32ea8:	ldr	r3, [sp, #28]
   32eac:	cmp	r3, #0
   32eb0:	bne	3326c <flatcc_json_parser_union_type_vector@@Base+0xa80>
   32eb4:	ldrd	r0, [sp, #32]
   32eb8:	cmp	r1, #0
   32ebc:	cmpeq	r0, #255	; 0xff
   32ec0:	uxtbls	r0, r0
   32ec4:	strbls	r0, [sp, #27]
   32ec8:	bls	32a6c <flatcc_json_parser_union_type_vector@@Base+0x280>
   32ecc:	ldr	r3, [r6, #24]
   32ed0:	ldrb	r0, [sp, #27]
   32ed4:	cmp	r3, #0
   32ed8:	bne	33288 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   32edc:	ldr	r3, [r6, #4]
   32ee0:	mov	r1, #7
   32ee4:	sub	r3, r4, r3
   32ee8:	str	r1, [r6, #24]
   32eec:	add	r3, r3, #1
   32ef0:	str	r3, [r6, #20]
   32ef4:	str	r4, [r6, #36]	; 0x24
   32ef8:	mov	r4, r5
   32efc:	b	32a6c <flatcc_json_parser_union_type_vector@@Base+0x280>
   32f00:	cmp	r3, #32
   32f04:	bhi	32fbc <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   32f08:	sub	r3, r3, #9
   32f0c:	cmp	r3, #23
   32f10:	ldrls	pc, [pc, r3, lsl #2]
   32f14:	b	32970 <flatcc_json_parser_union_type_vector@@Base+0x184>
   32f18:	andeq	r3, r3, ip, lsl #1
   32f1c:	muleq	r3, r4, r0
   32f20:	andeq	r2, r3, r0, ror r9
   32f24:	andeq	r2, r3, r0, ror r9
   32f28:	andeq	r2, r3, r8, ror pc
   32f2c:	andeq	r2, r3, r0, ror r9
   32f30:	andeq	r2, r3, r0, ror r9
   32f34:	andeq	r2, r3, r0, ror r9
   32f38:	andeq	r2, r3, r0, ror r9
   32f3c:	andeq	r2, r3, r0, ror r9
   32f40:	andeq	r2, r3, r0, ror r9
   32f44:	andeq	r2, r3, r0, ror r9
   32f48:	andeq	r2, r3, r0, ror r9
   32f4c:	andeq	r2, r3, r0, ror r9
   32f50:	andeq	r2, r3, r0, ror r9
   32f54:	andeq	r2, r3, r0, ror r9
   32f58:	andeq	r2, r3, r0, ror r9
   32f5c:	andeq	r2, r3, r0, ror r9
   32f60:	andeq	r2, r3, r0, ror r9
   32f64:	andeq	r2, r3, r0, ror r9
   32f68:	andeq	r2, r3, r0, ror r9
   32f6c:	andeq	r2, r3, r0, ror r9
   32f70:	andeq	r2, r3, r0, ror r9
   32f74:	andeq	r2, r3, ip, lsr lr
   32f78:	sub	r3, r5, r7
   32f7c:	add	r2, r7, #1
   32f80:	cmp	r3, #1
   32f84:	ble	32f94 <flatcc_json_parser_union_type_vector@@Base+0x7a8>
   32f88:	ldrb	r3, [r7, #1]
   32f8c:	cmp	r3, #10
   32f90:	addeq	r2, r7, #2
   32f94:	mov	r7, r2
   32f98:	ldr	r3, [r6, #16]
   32f9c:	str	r7, [r6, #4]
   32fa0:	add	r3, r3, #1
   32fa4:	str	r3, [r6, #16]
   32fa8:	cmp	r5, r7
   32fac:	beq	32e70 <flatcc_json_parser_union_type_vector@@Base+0x684>
   32fb0:	ldrb	r3, [r7]
   32fb4:	cmp	r3, #32
   32fb8:	bls	32f08 <flatcc_json_parser_union_type_vector@@Base+0x71c>
   32fbc:	cmp	r3, #93	; 0x5d
   32fc0:	bne	329e4 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   32fc4:	add	r4, r7, #1
   32fc8:	sub	r3, r5, r4
   32fcc:	cmp	r3, #1
   32fd0:	ble	32fe4 <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   32fd4:	ldrb	r3, [r7, #1]
   32fd8:	cmp	r3, #32
   32fdc:	bhi	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32fe0:	beq	332dc <flatcc_json_parser_union_type_vector@@Base+0xaf0>
   32fe4:	cmp	r5, r4
   32fe8:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   32fec:	ldrb	r2, [r4]
   32ff0:	cmp	r2, #32
   32ff4:	bne	33014 <flatcc_json_parser_union_type_vector@@Base+0x828>
   32ff8:	add	r3, r4, #1
   32ffc:	cmp	r5, r3
   33000:	mov	r4, r3
   33004:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33008:	ldrb	r2, [r3], #1
   3300c:	cmp	r2, #32
   33010:	beq	32ffc <flatcc_json_parser_union_type_vector@@Base+0x810>
   33014:	cmp	r2, #32
   33018:	bhi	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   3301c:	sub	r2, r2, #9
   33020:	cmp	r2, #23
   33024:	ldrls	pc, [pc, r2, lsl #2]
   33028:	b	32cac <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   3302c:	andeq	r3, r3, ip, ror #1
   33030:	andeq	r3, r3, r4, ror #1
   33034:	andeq	r2, r3, ip, lsr #25
   33038:	andeq	r2, r3, ip, lsr #25
   3303c:	muleq	r3, ip, r0
   33040:	andeq	r2, r3, ip, lsr #25
   33044:	andeq	r2, r3, ip, lsr #25
   33048:	andeq	r2, r3, ip, lsr #25
   3304c:	andeq	r2, r3, ip, lsr #25
   33050:	andeq	r2, r3, ip, lsr #25
   33054:	andeq	r2, r3, ip, lsr #25
   33058:	andeq	r2, r3, ip, lsr #25
   3305c:	andeq	r2, r3, ip, lsr #25
   33060:	andeq	r2, r3, ip, lsr #25
   33064:	andeq	r2, r3, ip, lsr #25
   33068:	andeq	r2, r3, ip, lsr #25
   3306c:	andeq	r2, r3, ip, lsr #25
   33070:	andeq	r2, r3, ip, lsr #25
   33074:	andeq	r2, r3, ip, lsr #25
   33078:	andeq	r2, r3, ip, lsr #25
   3307c:	andeq	r2, r3, ip, lsr #25
   33080:	andeq	r2, r3, ip, lsr #25
   33084:	andeq	r2, r3, ip, lsr #25
   33088:	andeq	r2, r3, r4, ror #31
   3308c:	add	r7, r7, #1
   33090:	b	32fa8 <flatcc_json_parser_union_type_vector@@Base+0x7bc>
   33094:	add	r7, r7, #1
   33098:	b	32f98 <flatcc_json_parser_union_type_vector@@Base+0x7ac>
   3309c:	sub	r3, r5, r4
   330a0:	add	r2, r4, #1
   330a4:	cmp	r3, #1
   330a8:	ble	330b8 <flatcc_json_parser_union_type_vector@@Base+0x8cc>
   330ac:	ldrb	r3, [r4, #1]
   330b0:	cmp	r3, #10
   330b4:	addeq	r2, r4, #2
   330b8:	mov	r4, r2
   330bc:	ldr	r3, [r6, #16]
   330c0:	str	r4, [r6, #4]
   330c4:	add	r3, r3, #1
   330c8:	str	r3, [r6, #16]
   330cc:	cmp	r5, r4
   330d0:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   330d4:	ldrb	r2, [r4]
   330d8:	cmp	r2, #32
   330dc:	bls	3301c <flatcc_json_parser_union_type_vector@@Base+0x830>
   330e0:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   330e4:	add	r4, r4, #1
   330e8:	b	330bc <flatcc_json_parser_union_type_vector@@Base+0x8d0>
   330ec:	add	r4, r4, #1
   330f0:	b	330cc <flatcc_json_parser_union_type_vector@@Base+0x8e0>
   330f4:	add	r1, r4, #1
   330f8:	sub	r3, r5, r1
   330fc:	cmp	r3, #1
   33100:	ble	33114 <flatcc_json_parser_union_type_vector@@Base+0x928>
   33104:	ldrb	r3, [r4, #1]
   33108:	cmp	r3, #32
   3310c:	bhi	33148 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33110:	beq	33290 <flatcc_json_parser_union_type_vector@@Base+0xaa4>
   33114:	cmp	r5, r1
   33118:	beq	33148 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   3311c:	ldrb	r2, [r1]
   33120:	cmp	r2, #32
   33124:	bne	33150 <flatcc_json_parser_union_type_vector@@Base+0x964>
   33128:	add	r3, r1, #1
   3312c:	b	3313c <flatcc_json_parser_union_type_vector@@Base+0x950>
   33130:	ldrb	r2, [r3], #1
   33134:	cmp	r2, #32
   33138:	bne	33150 <flatcc_json_parser_union_type_vector@@Base+0x964>
   3313c:	cmp	r3, r5
   33140:	mov	r1, r3
   33144:	bne	33130 <flatcc_json_parser_union_type_vector@@Base+0x944>
   33148:	mov	r4, r1
   3314c:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33150:	cmp	r2, #32
   33154:	bhi	33148 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33158:	sub	r2, r2, #9
   3315c:	cmp	r2, #23
   33160:	ldrls	pc, [pc, r2, lsl #2]
   33164:	b	33220 <flatcc_json_parser_union_type_vector@@Base+0xa34>
   33168:	andeq	r3, r3, r8, lsl r2
   3316c:	andeq	r3, r3, r0, lsl r2
   33170:	andeq	r3, r3, r0, lsr #4
   33174:	andeq	r3, r3, r0, lsr #4
   33178:	andeq	r3, r3, r8, asr #3
   3317c:	andeq	r3, r3, r0, lsr #4
   33180:	andeq	r3, r3, r0, lsr #4
   33184:	andeq	r3, r3, r0, lsr #4
   33188:	andeq	r3, r3, r0, lsr #4
   3318c:	andeq	r3, r3, r0, lsr #4
   33190:	andeq	r3, r3, r0, lsr #4
   33194:	andeq	r3, r3, r0, lsr #4
   33198:	andeq	r3, r3, r0, lsr #4
   3319c:	andeq	r3, r3, r0, lsr #4
   331a0:	andeq	r3, r3, r0, lsr #4
   331a4:	andeq	r3, r3, r0, lsr #4
   331a8:	andeq	r3, r3, r0, lsr #4
   331ac:	andeq	r3, r3, r0, lsr #4
   331b0:	andeq	r3, r3, r0, lsr #4
   331b4:	andeq	r3, r3, r0, lsr #4
   331b8:	andeq	r3, r3, r0, lsr #4
   331bc:	andeq	r3, r3, r0, lsr #4
   331c0:	andeq	r3, r3, r0, lsr #4
   331c4:	andeq	r3, r3, r4, lsl r1
   331c8:	sub	r3, r5, r1
   331cc:	add	r2, r1, #1
   331d0:	cmp	r3, #1
   331d4:	ble	331e4 <flatcc_json_parser_union_type_vector@@Base+0x9f8>
   331d8:	ldrb	r3, [r1, #1]
   331dc:	cmp	r3, #10
   331e0:	addeq	r2, r1, #2
   331e4:	mov	r1, r2
   331e8:	ldr	r3, [r6, #16]
   331ec:	str	r1, [r6, #4]
   331f0:	add	r3, r3, #1
   331f4:	str	r3, [r6, #16]
   331f8:	cmp	r5, r1
   331fc:	beq	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   33200:	ldrb	r2, [r1]
   33204:	cmp	r2, #32
   33208:	bls	33158 <flatcc_json_parser_union_type_vector@@Base+0x96c>
   3320c:	b	33148 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   33210:	add	r1, r1, #1
   33214:	b	331e8 <flatcc_json_parser_union_type_vector@@Base+0x9fc>
   33218:	add	r1, r1, #1
   3321c:	b	331f8 <flatcc_json_parser_union_type_vector@@Base+0xa0c>
   33220:	ldr	r3, [r6, #24]
   33224:	cmp	r3, #0
   33228:	bne	32998 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   3322c:	ldr	r3, [r6, #4]
   33230:	mov	r2, #5
   33234:	mov	r4, r5
   33238:	str	r1, [r6, #36]	; 0x24
   3323c:	str	r2, [r6, #24]
   33240:	sub	r1, r1, r3
   33244:	add	r1, r1, #1
   33248:	str	r1, [r6, #20]
   3324c:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33250:	ldrb	r3, [r4, #2]
   33254:	cmp	r3, #32
   33258:	addhi	r7, r4, #2
   3325c:	bls	32e3c <flatcc_json_parser_union_type_vector@@Base+0x650>
   33260:	cmp	r5, r7
   33264:	bne	32fbc <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   33268:	b	32e70 <flatcc_json_parser_union_type_vector@@Base+0x684>
   3326c:	ldr	r3, [r6, #24]
   33270:	ldrb	r0, [sp, #27]
   33274:	cmp	r3, #0
   33278:	bne	33288 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   3327c:	mov	r1, #8
   33280:	ldr	r3, [r6, #4]
   33284:	b	32ee4 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   33288:	mov	r4, r5
   3328c:	b	32a6c <flatcc_json_parser_union_type_vector@@Base+0x280>
   33290:	ldrb	r3, [r4, #2]
   33294:	cmp	r3, #32
   33298:	addhi	r4, r4, #2
   3329c:	bls	33114 <flatcc_json_parser_union_type_vector@@Base+0x928>
   332a0:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   332a4:	ldr	r3, [r6, #24]
   332a8:	cmp	r3, #0
   332ac:	bne	32874 <flatcc_json_parser_union_type_vector@@Base+0x88>
   332b0:	ldr	r3, [r6, #4]
   332b4:	mov	r2, #15
   332b8:	str	r2, [r6, #24]
   332bc:	str	r4, [r6, #36]	; 0x24
   332c0:	sub	r3, r4, r3
   332c4:	mov	r4, r5
   332c8:	add	r3, r3, #1
   332cc:	str	r3, [r6, #20]
   332d0:	b	32878 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   332d4:	mov	r7, r1
   332d8:	b	329d0 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   332dc:	ldrb	r3, [r7, #2]
   332e0:	cmp	r3, #32
   332e4:	bls	32fe4 <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   332e8:	add	r4, r7, #2
   332ec:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   332f0:	add	r4, r7, #1
   332f4:	sub	r3, r5, r4
   332f8:	cmp	r3, #1
   332fc:	ble	33310 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   33300:	ldrb	r3, [r7, #1]
   33304:	cmp	r3, #32
   33308:	bhi	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   3330c:	beq	33410 <flatcc_json_parser_union_type_vector@@Base+0xc24>
   33310:	cmp	r5, r4
   33314:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33318:	ldrb	r2, [r4]
   3331c:	cmp	r2, #32
   33320:	bne	33340 <flatcc_json_parser_union_type_vector@@Base+0xb54>
   33324:	add	r3, r4, #1
   33328:	cmp	r3, r5
   3332c:	mov	r4, r3
   33330:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33334:	ldrb	r2, [r3], #1
   33338:	cmp	r2, #32
   3333c:	beq	33328 <flatcc_json_parser_union_type_vector@@Base+0xb3c>
   33340:	cmp	r2, #32
   33344:	bhi	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33348:	sub	r2, r2, #9
   3334c:	cmp	r2, #23
   33350:	ldrls	pc, [pc, r2, lsl #2]
   33354:	b	32cac <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   33358:	andeq	r3, r3, r8, lsl #8
   3335c:	andeq	r3, r3, r0, lsl #8
   33360:	andeq	r2, r3, ip, lsr #25
   33364:	andeq	r2, r3, ip, lsr #25
   33368:			; <UNDEFINED> instruction: 0x000333b8
   3336c:	andeq	r2, r3, ip, lsr #25
   33370:	andeq	r2, r3, ip, lsr #25
   33374:	andeq	r2, r3, ip, lsr #25
   33378:	andeq	r2, r3, ip, lsr #25
   3337c:	andeq	r2, r3, ip, lsr #25
   33380:	andeq	r2, r3, ip, lsr #25
   33384:	andeq	r2, r3, ip, lsr #25
   33388:	andeq	r2, r3, ip, lsr #25
   3338c:	andeq	r2, r3, ip, lsr #25
   33390:	andeq	r2, r3, ip, lsr #25
   33394:	andeq	r2, r3, ip, lsr #25
   33398:	andeq	r2, r3, ip, lsr #25
   3339c:	andeq	r2, r3, ip, lsr #25
   333a0:	andeq	r2, r3, ip, lsr #25
   333a4:	andeq	r2, r3, ip, lsr #25
   333a8:	andeq	r2, r3, ip, lsr #25
   333ac:	andeq	r2, r3, ip, lsr #25
   333b0:	andeq	r2, r3, ip, lsr #25
   333b4:	andeq	r3, r3, r0, lsl r3
   333b8:	sub	r3, r5, r4
   333bc:	add	r2, r4, #1
   333c0:	cmp	r3, #1
   333c4:	ble	333d4 <flatcc_json_parser_union_type_vector@@Base+0xbe8>
   333c8:	ldrb	r3, [r4, #1]
   333cc:	cmp	r3, #10
   333d0:	addeq	r2, r4, #2
   333d4:	mov	r4, r2
   333d8:	ldr	r3, [r6, #16]
   333dc:	str	r4, [r6, #4]
   333e0:	add	r3, r3, #1
   333e4:	str	r3, [r6, #16]
   333e8:	cmp	r5, r4
   333ec:	beq	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   333f0:	ldrb	r2, [r4]
   333f4:	cmp	r2, #32
   333f8:	bls	33348 <flatcc_json_parser_union_type_vector@@Base+0xb5c>
   333fc:	b	328fc <flatcc_json_parser_union_type_vector@@Base+0x110>
   33400:	add	r4, r4, #1
   33404:	b	333d8 <flatcc_json_parser_union_type_vector@@Base+0xbec>
   33408:	add	r4, r4, #1
   3340c:	b	333e8 <flatcc_json_parser_union_type_vector@@Base+0xbfc>
   33410:	ldrb	r3, [r7, #2]
   33414:	cmp	r3, #32
   33418:	bls	33310 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   3341c:	b	332e8 <flatcc_json_parser_union_type_vector@@Base+0xafc>
   33420:	movw	r1, #31824	; 0x7c50
   33424:	movt	r1, #4
   33428:	ldr	r3, [pc, #12]	; 3343c <flatcc_json_parser_union_type_vector@@Base+0xc50>
   3342c:	movw	r0, #31900	; 0x7c9c
   33430:	movt	r0, #4
   33434:	movw	r2, #1122	; 0x462
   33438:	bl	145f0 <__assert_fail@plt>
   3343c:	ldrdeq	r7, [r4], -r8

00033440 <flatcc_json_parser_table_as_root@@Base>:
   33440:	strd	r4, [sp, #-28]!	; 0xffffffe4
   33444:	subs	r4, r1, #0
   33448:	mov	r5, r2
   3344c:	strd	r6, [sp, #8]
   33450:	mov	r2, #32
   33454:	mov	r1, #0
   33458:	strd	r8, [sp, #16]
   3345c:	mov	r8, r0
   33460:	add	r6, r5, r3
   33464:	str	lr, [sp, #24]
   33468:	sub	sp, sp, #52	; 0x34
   3346c:	ldr	r9, [sp, #80]	; 0x50
   33470:	addeq	r4, sp, #4
   33474:	add	r0, r4, #12
   33478:	bl	1459c <memset@plt>
   3347c:	mov	ip, #1
   33480:	mov	r2, #0
   33484:	str	r8, [r4]
   33488:	mov	r0, r8
   3348c:	ldr	r1, [sp, #84]	; 0x54
   33490:	asr	r7, r9, #1
   33494:	stmib	r4, {r5, r9}
   33498:	str	ip, [r4, #16]
   3349c:	and	r7, r7, #2
   334a0:	str	r5, [r4, #28]
   334a4:	mov	r3, r7
   334a8:	str	r6, [r4, #32]
   334ac:	str	r5, [r4, #36]	; 0x24
   334b0:	bl	2654c <flatcc_builder_start_buffer@@Base>
   334b4:	cmp	r0, #0
   334b8:	bne	33518 <flatcc_json_parser_table_as_root@@Base+0xd8>
   334bc:	mov	r2, r6
   334c0:	mov	r3, sp
   334c4:	ldr	ip, [sp, #88]	; 0x58
   334c8:	mov	r1, r5
   334cc:	mov	r0, r4
   334d0:	blx	ip
   334d4:	ldr	r6, [r4, #24]
   334d8:	cmp	r6, #0
   334dc:	beq	334fc <flatcc_json_parser_table_as_root@@Base+0xbc>
   334e0:	mov	r0, r6
   334e4:	add	sp, sp, #52	; 0x34
   334e8:	ldrd	r4, [sp]
   334ec:	ldrd	r6, [sp, #8]
   334f0:	ldrd	r8, [sp, #16]
   334f4:	add	sp, sp, #24
   334f8:	pop	{pc}		; (ldr pc, [sp], #4)
   334fc:	mov	r0, r8
   33500:	ldr	r1, [sp]
   33504:	bl	266f8 <flatcc_builder_end_buffer@@Base>
   33508:	cmp	r0, #0
   3350c:	beq	33518 <flatcc_json_parser_table_as_root@@Base+0xd8>
   33510:	str	r5, [r4, #40]	; 0x28
   33514:	b	334e0 <flatcc_json_parser_table_as_root@@Base+0xa0>
   33518:	mvn	r6, #0
   3351c:	b	334e0 <flatcc_json_parser_table_as_root@@Base+0xa0>

00033520 <flatcc_json_parser_struct_as_root@@Base>:
   33520:	strd	r4, [sp, #-28]!	; 0xffffffe4
   33524:	subs	r4, r1, #0
   33528:	mov	r5, r2
   3352c:	strd	r6, [sp, #8]
   33530:	mov	r2, #32
   33534:	mov	r1, #0
   33538:	strd	r8, [sp, #16]
   3353c:	mov	r8, r0
   33540:	add	r6, r5, r3
   33544:	str	lr, [sp, #24]
   33548:	sub	sp, sp, #52	; 0x34
   3354c:	ldr	r9, [sp, #80]	; 0x50
   33550:	addeq	r4, sp, #4
   33554:	add	r0, r4, #12
   33558:	bl	1459c <memset@plt>
   3355c:	mov	ip, #1
   33560:	mov	r2, #0
   33564:	str	r8, [r4]
   33568:	mov	r0, r8
   3356c:	ldr	r1, [sp, #84]	; 0x54
   33570:	asr	r7, r9, #1
   33574:	stmib	r4, {r5, r9}
   33578:	str	ip, [r4, #16]
   3357c:	and	r7, r7, #2
   33580:	str	r5, [r4, #28]
   33584:	mov	r3, r7
   33588:	str	r6, [r4, #32]
   3358c:	str	r5, [r4, #36]	; 0x24
   33590:	bl	2654c <flatcc_builder_start_buffer@@Base>
   33594:	cmp	r0, #0
   33598:	bne	335f8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3359c:	mov	r2, r6
   335a0:	mov	r3, sp
   335a4:	ldr	ip, [sp, #88]	; 0x58
   335a8:	mov	r1, r5
   335ac:	mov	r0, r4
   335b0:	blx	ip
   335b4:	ldr	r6, [r4, #24]
   335b8:	cmp	r6, #0
   335bc:	beq	335dc <flatcc_json_parser_struct_as_root@@Base+0xbc>
   335c0:	mov	r0, r6
   335c4:	add	sp, sp, #52	; 0x34
   335c8:	ldrd	r4, [sp]
   335cc:	ldrd	r6, [sp, #8]
   335d0:	ldrd	r8, [sp, #16]
   335d4:	add	sp, sp, #24
   335d8:	pop	{pc}		; (ldr pc, [sp], #4)
   335dc:	mov	r0, r8
   335e0:	ldr	r1, [sp]
   335e4:	bl	266f8 <flatcc_builder_end_buffer@@Base>
   335e8:	cmp	r0, #0
   335ec:	beq	335f8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   335f0:	str	r5, [r4, #40]	; 0x28
   335f4:	b	335c0 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   335f8:	mvn	r6, #0
   335fc:	b	335c0 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   33600:	cmp	r0, #1000	; 0x3e8
   33604:	strd	r4, [sp, #-16]!
   33608:	str	r6, [sp, #8]
   3360c:	str	lr, [sp, #12]
   33610:	bcc	336f8 <flatcc_json_parser_struct_as_root@@Base+0x1d8>
   33614:	movw	r3, #34079	; 0x851f
   33618:	movt	r3, #20971	; 0x51eb
   3361c:	mov	r2, #100	; 0x64
   33620:	movw	lr, #9999	; 0x270f
   33624:	umull	ip, r3, r3, r0
   33628:	cmp	r0, lr
   3362c:	movw	ip, #32560	; 0x7f30
   33630:	movt	ip, #4
   33634:	lsr	r3, r3, #5
   33638:	uxth	r6, r3
   3363c:	mls	r3, r2, r3, r0
   33640:	uxth	r3, r3
   33644:	add	r0, ip, r3, lsl #1
   33648:	bls	336b0 <flatcc_json_parser_struct_as_root@@Base+0x190>
   3364c:	mov	r2, #0
   33650:	add	r4, r1, #3
   33654:	mov	lr, #5
   33658:	strb	r2, [r1, #5]
   3365c:	ldrb	r3, [ip, r3, lsl #1]
   33660:	strb	r3, [r1, #3]
   33664:	ldrb	r3, [r0, #1]
   33668:	strb	r3, [r1, #4]
   3366c:	movw	r1, #34079	; 0x851f
   33670:	movt	r1, #20971	; 0x51eb
   33674:	mov	r2, #100	; 0x64
   33678:	sub	r5, r4, #2
   3367c:	umull	r3, r1, r1, r6
   33680:	lsr	r1, r1, #5
   33684:	uxth	r0, r1
   33688:	mls	r2, r2, r1, r6
   3368c:	uxth	r2, r2
   33690:	ldrb	r3, [ip, r2, lsl #1]
   33694:	add	r2, ip, r2, lsl #1
   33698:	strb	r3, [r4, #-2]
   3369c:	ldrb	r3, [r2, #1]
   336a0:	strb	r3, [r4, #-1]
   336a4:	add	r3, r0, #48	; 0x30
   336a8:	strb	r3, [r5, #-1]
   336ac:	b	336e4 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   336b0:	mov	lr, #0
   336b4:	add	r2, r1, #2
   336b8:	strb	lr, [r1, #4]
   336bc:	mov	lr, #4
   336c0:	ldrb	r3, [ip, r3, lsl #1]
   336c4:	strb	r3, [r1, #2]
   336c8:	ldrb	r3, [r0, #1]
   336cc:	strb	r3, [r1, #3]
   336d0:	ldrb	r1, [ip, r6, lsl #1]
   336d4:	add	r3, ip, r6, lsl #1
   336d8:	strb	r1, [r2, #-2]
   336dc:	ldrb	r3, [r3, #1]
   336e0:	strb	r3, [r2, #-1]
   336e4:	ldrd	r4, [sp]
   336e8:	mov	r0, lr
   336ec:	ldr	r6, [sp, #8]
   336f0:	add	sp, sp, #12
   336f4:	pop	{pc}		; (ldr pc, [sp], #4)
   336f8:	cmp	r0, #99	; 0x63
   336fc:	bhi	3371c <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   33700:	cmp	r0, #9
   33704:	mov	r3, #0
   33708:	bhi	3373c <flatcc_json_parser_struct_as_root@@Base+0x21c>
   3370c:	add	r5, r1, #1
   33710:	mov	lr, #1
   33714:	strb	r3, [r1, #1]
   33718:	b	336a4 <flatcc_json_parser_struct_as_root@@Base+0x184>
   3371c:	mov	r3, #0
   33720:	movw	ip, #32560	; 0x7f30
   33724:	movt	ip, #4
   33728:	mov	r6, r0
   3372c:	add	r4, r1, #3
   33730:	mov	lr, #3
   33734:	strb	r3, [r1, #3]
   33738:	b	3366c <flatcc_json_parser_struct_as_root@@Base+0x14c>
   3373c:	movw	ip, #32560	; 0x7f30
   33740:	movt	ip, #4
   33744:	strb	r3, [r1, #2]
   33748:	mov	r6, r0
   3374c:	add	r2, r1, #2
   33750:	mov	lr, #2
   33754:	b	336d0 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   33758:	movw	r2, #9999	; 0x270f
   3375c:	mov	r3, r0
   33760:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33764:	cmp	r0, r2
   33768:	strd	r6, [sp, #8]
   3376c:	strd	r8, [sp, #16]
   33770:	str	sl, [sp, #24]
   33774:	str	lr, [sp, #28]
   33778:	bls	338b0 <flatcc_json_parser_struct_as_root@@Base+0x390>
   3377c:	movw	r2, #34079	; 0x851f
   33780:	movt	r2, #20971	; 0x51eb
   33784:	mov	r6, #100	; 0x64
   33788:	movw	r4, #5977	; 0x1759
   3378c:	movt	r4, #53687	; 0xd1b7
   33790:	umull	ip, r0, r2, r0
   33794:	movw	ip, #38527	; 0x967f
   33798:	movt	ip, #152	; 0x98
   3379c:	movw	lr, #32560	; 0x7f30
   337a0:	movt	lr, #4
   337a4:	cmp	r3, ip
   337a8:	umull	r5, r4, r4, r3
   337ac:	lsr	ip, r0, #5
   337b0:	lsr	r4, r4, #13
   337b4:	umull	r5, r0, r2, ip
   337b8:	mls	r8, r6, ip, r3
   337bc:	lsr	r0, r0, #5
   337c0:	add	r7, lr, r8, lsl #1
   337c4:	mls	r0, r6, r0, ip
   337c8:	add	r5, lr, r0, lsl #1
   337cc:	bls	33918 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   337d0:	umull	r0, r9, r2, r4
   337d4:	movw	r0, #56963	; 0xde83
   337d8:	movt	r0, #17179	; 0x431b
   337dc:	movw	ip, #51711	; 0xc9ff
   337e0:	movt	ip, #15258	; 0x3b9a
   337e4:	umull	sl, r0, r0, r3
   337e8:	cmp	r3, ip
   337ec:	lsr	r9, r9, #5
   337f0:	mls	r9, r6, r9, r4
   337f4:	lsr	r4, r0, #18
   337f8:	add	r9, lr, r9, lsl #1
   337fc:	bhi	339a8 <flatcc_json_parser_struct_as_root@@Base+0x488>
   33800:	movw	r2, #57599	; 0xe0ff
   33804:	movt	r2, #1525	; 0x5f5
   33808:	cmp	r3, r2
   3380c:	mov	r3, #0
   33810:	bls	33a30 <flatcc_json_parser_struct_as_root@@Base+0x510>
   33814:	strb	r3, [r1, #9]
   33818:	add	ip, r1, #7
   3381c:	mov	r0, #9
   33820:	ldrb	r3, [lr, r8, lsl #1]
   33824:	strb	r3, [r1, #7]
   33828:	ldrb	r3, [r7, #1]
   3382c:	mov	r7, r5
   33830:	mov	r5, r9
   33834:	strb	r3, [r1, #8]
   33838:	movw	r3, #34079	; 0x851f
   3383c:	movt	r3, #20971	; 0x51eb
   33840:	ldrb	r6, [r7]
   33844:	mov	r2, #100	; 0x64
   33848:	umull	r1, r3, r3, r4
   3384c:	sub	r1, ip, #2
   33850:	lsr	r3, r3, #5
   33854:	strb	r6, [ip, #-2]
   33858:	ldrb	r6, [r7, #1]
   3385c:	mls	r2, r2, r3, r4
   33860:	add	r2, lr, r2, lsl #1
   33864:	strb	r6, [ip, #-1]
   33868:	ldrb	lr, [r5]
   3386c:	sub	ip, r1, #2
   33870:	strb	lr, [r1, #-2]
   33874:	ldrb	lr, [r5, #1]
   33878:	strb	lr, [r1, #-1]
   3387c:	ldrb	r1, [r2]
   33880:	sub	lr, ip, #2
   33884:	strb	r1, [ip, #-2]
   33888:	ldrb	r2, [r2, #1]
   3388c:	strb	r2, [ip, #-1]
   33890:	add	r3, r3, #48	; 0x30
   33894:	strb	r3, [lr, #-1]
   33898:	ldrd	r4, [sp]
   3389c:	ldrd	r6, [sp, #8]
   338a0:	ldrd	r8, [sp, #16]
   338a4:	ldr	sl, [sp, #24]
   338a8:	add	sp, sp, #28
   338ac:	pop	{pc}		; (ldr pc, [sp], #4)
   338b0:	cmp	r0, #99	; 0x63
   338b4:	bls	338fc <flatcc_json_parser_struct_as_root@@Base+0x3dc>
   338b8:	movw	ip, #34079	; 0x851f
   338bc:	movt	ip, #20971	; 0x51eb
   338c0:	cmp	r0, #1000	; 0x3e8
   338c4:	mov	r2, #100	; 0x64
   338c8:	umull	r0, ip, ip, r3
   338cc:	movw	lr, #32560	; 0x7f30
   338d0:	movt	lr, #4
   338d4:	lsr	ip, ip, #5
   338d8:	mov	r4, ip
   338dc:	mls	r2, r2, ip, r3
   338e0:	add	r2, lr, r2, lsl #1
   338e4:	bcc	33990 <flatcc_json_parser_struct_as_root@@Base+0x470>
   338e8:	mov	r0, #0
   338ec:	add	r3, r1, #4
   338f0:	strb	r0, [r1, #4]
   338f4:	mov	r0, #4
   338f8:	b	33964 <flatcc_json_parser_struct_as_root@@Base+0x444>
   338fc:	cmp	r0, #9
   33900:	mov	r2, #0
   33904:	bhi	33a14 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   33908:	add	lr, r1, #1
   3390c:	mov	r0, #1
   33910:	strb	r2, [r1, #1]
   33914:	b	33890 <flatcc_json_parser_struct_as_root@@Base+0x370>
   33918:	movw	r2, #16959	; 0x423f
   3391c:	movt	r2, #15
   33920:	cmp	r3, r2
   33924:	bhi	33a00 <flatcc_json_parser_struct_as_root@@Base+0x4e0>
   33928:	movw	r2, #34463	; 0x869f
   3392c:	movt	r2, #1
   33930:	cmp	r3, r2
   33934:	bls	33a4c <flatcc_json_parser_struct_as_root@@Base+0x52c>
   33938:	mov	r3, #0
   3393c:	mov	r2, r5
   33940:	mov	r9, r7
   33944:	add	ip, r1, #6
   33948:	mov	r0, #6
   3394c:	strb	r3, [r1, #6]
   33950:	ldrb	r1, [r9]
   33954:	sub	r3, ip, #2
   33958:	strb	r1, [ip, #-2]
   3395c:	ldrb	r1, [r9, #1]
   33960:	strb	r1, [ip, #-1]
   33964:	ldrb	r1, [r2]
   33968:	sub	ip, r3, #2
   3396c:	strb	r1, [r3, #-2]
   33970:	ldrb	r2, [r2, #1]
   33974:	strb	r2, [r3, #-1]
   33978:	ldrb	r3, [lr, r4, lsl #1]
   3397c:	add	r2, lr, r4, lsl #1
   33980:	strb	r3, [ip, #-2]
   33984:	ldrb	r3, [r2, #1]
   33988:	strb	r3, [ip, #-1]
   3398c:	b	33898 <flatcc_json_parser_struct_as_root@@Base+0x378>
   33990:	mov	lr, #0
   33994:	mov	r3, ip
   33998:	mov	r0, #3
   3399c:	add	ip, r1, #3
   339a0:	strb	lr, [r1, #3]
   339a4:	b	3387c <flatcc_json_parser_struct_as_root@@Base+0x35c>
   339a8:	umull	r0, r2, r2, r4
   339ac:	mov	ip, #0
   339b0:	movw	r0, #15241	; 0x3b89
   339b4:	movt	r0, #21990	; 0x55e6
   339b8:	strb	ip, [r1, #10]
   339bc:	ldrb	sl, [lr, r8, lsl #1]
   339c0:	lsr	ip, r2, #5
   339c4:	add	r8, r1, #8
   339c8:	umull	r2, r3, r0, r3
   339cc:	mov	r0, #10
   339d0:	mls	ip, r6, ip, r4
   339d4:	lsr	r4, r3, #25
   339d8:	strb	sl, [r1, #8]
   339dc:	ldrb	r3, [r7, #1]
   339e0:	add	r2, lr, ip, lsl #1
   339e4:	strb	r3, [r1, #9]
   339e8:	ldrb	r3, [r5]
   339ec:	sub	ip, r8, #2
   339f0:	strb	r3, [r8, #-2]
   339f4:	ldrb	r3, [r5, #1]
   339f8:	strb	r3, [r8, #-1]
   339fc:	b	33950 <flatcc_json_parser_struct_as_root@@Base+0x430>
   33a00:	mov	r3, #0
   33a04:	add	ip, r1, #7
   33a08:	mov	r0, #7
   33a0c:	strb	r3, [r1, #7]
   33a10:	b	33838 <flatcc_json_parser_struct_as_root@@Base+0x318>
   33a14:	mov	r4, r0
   33a18:	movw	lr, #32560	; 0x7f30
   33a1c:	movt	lr, #4
   33a20:	add	ip, r1, #2
   33a24:	strb	r2, [r1, #2]
   33a28:	mov	r0, #2
   33a2c:	b	33978 <flatcc_json_parser_struct_as_root@@Base+0x458>
   33a30:	mov	r2, r9
   33a34:	add	r8, r1, #8
   33a38:	strb	r3, [r1, #8]
   33a3c:	mov	r9, r5
   33a40:	mov	r0, #8
   33a44:	mov	r5, r7
   33a48:	b	339e8 <flatcc_json_parser_struct_as_root@@Base+0x4c8>
   33a4c:	mov	r0, #0
   33a50:	mov	r2, r5
   33a54:	mov	r3, r4
   33a58:	mov	r5, r7
   33a5c:	add	r1, r1, #5
   33a60:	strb	r0, [r1]
   33a64:	mov	r0, #5
   33a68:	b	33868 <flatcc_json_parser_struct_as_root@@Base+0x348>
   33a6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33a70:	strd	r6, [sp, #8]
   33a74:	add	r7, pc, #916	; 0x394
   33a78:	ldrd	r6, [r7]
   33a7c:	strd	r8, [sp, #16]
   33a80:	strd	sl, [sp, #24]
   33a84:	mov	sl, r0
   33a88:	str	lr, [sp, #32]
   33a8c:	sub	sp, sp, #28
   33a90:	cmp	r1, r7
   33a94:	cmpeq	r0, r6
   33a98:	bls	33de8 <flatcc_json_parser_struct_as_root@@Base+0x8c8>
   33a9c:	mov	r6, r2
   33aa0:	mov	r3, #0
   33aa4:	mov	r2, #100	; 0x64
   33aa8:	mov	fp, r1
   33aac:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ab0:	mov	ip, r2
   33ab4:	mov	r3, #0
   33ab8:	mov	r2, #100	; 0x64
   33abc:	movw	r4, #32560	; 0x7f30
   33ac0:	movt	r4, #4
   33ac4:	mov	r0, sl
   33ac8:	str	ip, [sp, #16]
   33acc:	mov	r1, fp
   33ad0:	add	r5, r4, ip, lsl #1
   33ad4:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ad8:	add	r3, pc, #824	; 0x338
   33adc:	ldrd	r2, [r3]
   33ae0:	mov	r9, r0
   33ae4:	str	r1, [sp]
   33ae8:	cmp	fp, r3
   33aec:	cmpeq	sl, r2
   33af0:	bls	33d18 <flatcc_json_parser_struct_as_root@@Base+0x7f8>
   33af4:	mov	r2, #100	; 0x64
   33af8:	mov	r3, #0
   33afc:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33b00:	add	r3, r4, r2, lsl #1
   33b04:	mov	r0, sl
   33b08:	movw	r2, #10000	; 0x2710
   33b0c:	mov	r1, fp
   33b10:	str	r3, [sp, #12]
   33b14:	mov	r3, #0
   33b18:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33b1c:	mov	r2, #100	; 0x64
   33b20:	mov	r3, #0
   33b24:	str	r1, [sp]
   33b28:	mov	r9, r0
   33b2c:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33b30:	add	r1, r4, r2, lsl #1
   33b34:	mov	r3, #0
   33b38:	mov	r0, sl
   33b3c:	movw	r2, #16960	; 0x4240
   33b40:	movt	r2, #15
   33b44:	str	r1, [sp, #8]
   33b48:	mov	r1, fp
   33b4c:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33b50:	add	r3, pc, #712	; 0x2c8
   33b54:	ldrd	r2, [r3]
   33b58:	mov	r8, r0
   33b5c:	mov	r7, r1
   33b60:	cmp	fp, r3
   33b64:	cmpeq	sl, r2
   33b68:	bhi	33e78 <flatcc_json_parser_struct_as_root@@Base+0x958>
   33b6c:	add	r3, pc, #692	; 0x2b4
   33b70:	ldrd	r2, [r3]
   33b74:	cmp	fp, r3
   33b78:	cmpeq	sl, r2
   33b7c:	bls	33fdc <flatcc_json_parser_struct_as_root@@Base+0xabc>
   33b80:	ldr	r2, [sp, #8]
   33b84:	mov	r3, #0
   33b88:	add	ip, r6, #16
   33b8c:	mov	sl, #16
   33b90:	str	r5, [sp, #8]
   33b94:	strb	r3, [r6, #16]
   33b98:	mov	r5, r2
   33b9c:	ldr	r9, [sp, #8]
   33ba0:	mov	r0, r8
   33ba4:	mov	r1, r7
   33ba8:	mov	r2, #100	; 0x64
   33bac:	mov	r3, #0
   33bb0:	sub	r6, ip, #2
   33bb4:	ldrb	lr, [r9]
   33bb8:	strb	lr, [ip, #-2]
   33bbc:	ldrb	lr, [r9, #1]
   33bc0:	strb	lr, [ip, #-1]
   33bc4:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33bc8:	add	r3, r4, r2, lsl #1
   33bcc:	mov	r0, r8
   33bd0:	mov	r1, r7
   33bd4:	mov	r2, #100	; 0x64
   33bd8:	str	r3, [sp, #4]
   33bdc:	mov	r3, #0
   33be0:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33be4:	mov	r8, r0
   33be8:	mov	r7, r1
   33bec:	ldr	r1, [sp, #12]
   33bf0:	sub	r3, r6, #2
   33bf4:	ldrb	r2, [r1]
   33bf8:	strb	r2, [r6, #-2]
   33bfc:	ldrb	r2, [r1, #1]
   33c00:	strb	r2, [r6, #-1]
   33c04:	ldrb	r2, [r5]
   33c08:	sub	r6, r3, #2
   33c0c:	strb	r2, [r3, #-2]
   33c10:	ldrb	r2, [r5, #1]
   33c14:	strb	r2, [r3, #-1]
   33c18:	ldr	r2, [sp, #4]
   33c1c:	sub	r5, r6, #2
   33c20:	ldrb	r3, [r2]
   33c24:	strb	r3, [r6, #-2]
   33c28:	ldrb	r3, [r2, #1]
   33c2c:	strb	r3, [r6, #-1]
   33c30:	mov	r0, r8
   33c34:	mov	r1, r7
   33c38:	mov	r2, #100	; 0x64
   33c3c:	mov	r3, #0
   33c40:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33c44:	ldrb	lr, [r4, r2, lsl #1]
   33c48:	add	ip, r4, r2, lsl #1
   33c4c:	mov	r0, r8
   33c50:	mov	r1, r7
   33c54:	mov	r2, #100	; 0x64
   33c58:	mov	r3, #0
   33c5c:	strb	lr, [r5, #-2]
   33c60:	ldrb	ip, [ip, #1]
   33c64:	strb	ip, [r5, #-1]
   33c68:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33c6c:	mov	r2, #100	; 0x64
   33c70:	mov	r3, #0
   33c74:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33c78:	ldrb	lr, [r4, r2, lsl #1]
   33c7c:	add	ip, r4, r2, lsl #1
   33c80:	mov	r0, r8
   33c84:	mov	r1, r7
   33c88:	movw	r2, #10000	; 0x2710
   33c8c:	mov	r3, #0
   33c90:	strb	lr, [r5, #-4]
   33c94:	ldrb	ip, [ip, #1]
   33c98:	strb	ip, [r5, #-3]
   33c9c:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ca0:	mov	r2, #100	; 0x64
   33ca4:	mov	r3, #0
   33ca8:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33cac:	ldrb	lr, [r4, r2, lsl #1]
   33cb0:	add	ip, r4, r2, lsl #1
   33cb4:	mov	r0, r8
   33cb8:	mov	r1, r7
   33cbc:	mov	r3, #0
   33cc0:	movw	r2, #16960	; 0x4240
   33cc4:	movt	r2, #15
   33cc8:	strb	lr, [r5, #-6]
   33ccc:	ldrb	ip, [ip, #1]
   33cd0:	strb	ip, [r5, #-5]
   33cd4:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33cd8:	mov	r2, #100	; 0x64
   33cdc:	mov	r3, #0
   33ce0:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ce4:	ldrb	r3, [r4, r2, lsl #1]
   33ce8:	add	r4, r4, r2, lsl #1
   33cec:	mov	r0, sl
   33cf0:	strb	r3, [r5, #-8]
   33cf4:	ldrb	r3, [r4, #1]
   33cf8:	strb	r3, [r5, #-7]
   33cfc:	add	sp, sp, #28
   33d00:	ldrd	r4, [sp]
   33d04:	ldrd	r6, [sp, #8]
   33d08:	ldrd	r8, [sp, #16]
   33d0c:	ldrd	sl, [sp, #24]
   33d10:	add	sp, sp, #32
   33d14:	pop	{pc}		; (ldr pc, [sp], #4)
   33d18:	add	r3, pc, #272	; 0x110
   33d1c:	ldrd	r2, [r3]
   33d20:	cmp	fp, r3
   33d24:	cmpeq	sl, r2
   33d28:	bls	33f5c <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   33d2c:	mov	r2, #100	; 0x64
   33d30:	mov	r3, #0
   33d34:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33d38:	add	r3, r4, r2, lsl #1
   33d3c:	mov	r0, sl
   33d40:	movw	r2, #10000	; 0x2710
   33d44:	mov	r1, fp
   33d48:	str	r3, [sp, #4]
   33d4c:	mov	r3, #0
   33d50:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33d54:	add	r3, pc, #220	; 0xdc
   33d58:	ldrd	r2, [r3]
   33d5c:	mov	r8, r0
   33d60:	mov	r7, r1
   33d64:	cmp	fp, r3
   33d68:	cmpeq	sl, r2
   33d6c:	mov	r2, #0
   33d70:	bls	3406c <flatcc_json_parser_struct_as_root@@Base+0xb4c>
   33d74:	add	r3, r6, #13
   33d78:	mov	sl, #13
   33d7c:	strb	r2, [r6, #13]
   33d80:	ldrb	r2, [r5]
   33d84:	sub	r6, r3, #2
   33d88:	strb	r2, [r3, #-2]
   33d8c:	ldrb	r2, [r5, #1]
   33d90:	strb	r2, [r3, #-1]
   33d94:	ldr	lr, [sp, #4]
   33d98:	mov	r0, r8
   33d9c:	mov	r1, r7
   33da0:	mov	r2, #10
   33da4:	mov	r3, #0
   33da8:	sub	r5, r6, #3
   33dac:	ldrb	ip, [lr]
   33db0:	strb	ip, [r6, #-2]
   33db4:	ldrb	ip, [lr, #1]
   33db8:	strb	ip, [r6, #-1]
   33dbc:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33dc0:	add	r2, r2, #48	; 0x30
   33dc4:	mov	r0, r9
   33dc8:	ldr	r1, [sp]
   33dcc:	mov	r3, #0
   33dd0:	strb	r2, [r6, #-3]
   33dd4:	mov	r2, #1000	; 0x3e8
   33dd8:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ddc:	mov	r8, r0
   33de0:	mov	r7, r1
   33de4:	b	33c30 <flatcc_json_parser_struct_as_root@@Base+0x710>
   33de8:	mov	r1, r2
   33dec:	add	sp, sp, #28
   33df0:	ldrd	r4, [sp]
   33df4:	ldrd	r6, [sp, #8]
   33df8:	ldrd	r8, [sp, #16]
   33dfc:	ldrd	sl, [sp, #24]
   33e00:	ldr	lr, [sp, #32]
   33e04:	add	sp, sp, #36	; 0x24
   33e08:	b	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33e0c:	nop	{0}
   33e10:	blcc	fe6e6614 <__bss_end__@@Base+0xfe68d258>
   33e14:	andeq	r0, r0, r0
   33e18:	mrcmi	15, 3, r9, cr2, cr15, {7}
   33e1c:	andeq	r0, r0, r8, lsl r9
   33e20:	svcvs	0x00c0ffff
   33e24:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   33e28:	strbge	r7, [r6], #4095	; 0xfff
   33e2c:	andeq	r8, r3, lr, ror sp
   33e30:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   33e34:	andeq	r0, r0, r7, lsl r0
   33e38:	strtle	r0, [r5], #4095	; 0xfff
   33e3c:	andeq	r0, r0, r8, ror #1
   33e40:	ldrbeq	lr, [r5, #256]!	; 0x100
   33e44:	andeq	r0, r0, r0
   33e48:			; <UNDEFINED> instruction: 0xa763ffff
   33e4c:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   33e50:	strpl	lr, [fp], #-1024	; 0xfffffc00
   33e54:	andeq	r0, r0, r2
   33e58:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   33e5c:	bhi	ff1fca74 <__bss_end__@@Base+0xff1a36b8>
   33e60:	strpl	lr, [fp], #-1023	; 0xfffffc01
   33e64:	andeq	r0, r0, r2
   33e68:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   33e6c:	strdeq	r5, [r0], -r3
   33e70:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   33e74:	smceq	13400	; 0x3458
   33e78:	mov	r2, #100	; 0x64
   33e7c:	mov	r3, #0
   33e80:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33e84:	add	r1, r4, r2, lsl #1
   33e88:	mov	r0, sl
   33e8c:	sub	r3, pc, #84	; 0x54
   33e90:	ldrd	r2, [r3]
   33e94:	str	r1, [sp, #20]
   33e98:	mov	r1, fp
   33e9c:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ea0:	sub	r3, pc, #96	; 0x60
   33ea4:	ldrd	r2, [r3]
   33ea8:	mov	r9, r0
   33eac:	str	r1, [sp]
   33eb0:	cmp	fp, r3
   33eb4:	cmpeq	sl, r2
   33eb8:	bls	34010 <flatcc_json_parser_struct_as_root@@Base+0xaf0>
   33ebc:	mov	r2, #100	; 0x64
   33ec0:	mov	r3, #0
   33ec4:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ec8:	add	r0, r4, r2, lsl #1
   33ecc:	mov	r1, fp
   33ed0:	sub	r3, pc, #136	; 0x88
   33ed4:	ldrd	r2, [r3]
   33ed8:	str	r0, [sp, #4]
   33edc:	mov	r0, sl
   33ee0:	bl	42240 <flatcc_json_printer_clear@@Base+0x728>
   33ee4:	sub	r3, pc, #148	; 0x94
   33ee8:	ldrd	r2, [r3]
   33eec:	mov	r8, r0
   33ef0:	mov	r7, r1
   33ef4:	cmp	fp, r3
   33ef8:	cmpeq	sl, r2
   33efc:	bhi	33f90 <flatcc_json_parser_struct_as_root@@Base+0xa70>
   33f00:	mov	r2, #0
   33f04:	add	r3, r6, #17
   33f08:	mov	sl, #19
   33f0c:	strb	r2, [r6, #19]
   33f10:	ldr	r2, [sp, #16]
   33f14:	ldrb	r2, [r4, r2, lsl #1]
   33f18:	strb	r2, [r6, #17]
   33f1c:	ldrb	r2, [r5, #1]
   33f20:	ldr	r5, [sp, #20]
   33f24:	strb	r2, [r6, #18]
   33f28:	ldr	r1, [sp, #12]
   33f2c:	sub	r6, r3, #2
   33f30:	ldrb	r2, [r1]
   33f34:	strb	r2, [r3, #-2]
   33f38:	ldrb	r2, [r1, #1]
   33f3c:	strb	r2, [r3, #-1]
   33f40:	ldr	r1, [sp, #8]
   33f44:	sub	r3, r6, #2
   33f48:	ldrb	r2, [r1]
   33f4c:	strb	r2, [r6, #-2]
   33f50:	ldrb	r2, [r1, #1]
   33f54:	strb	r2, [r6, #-1]
   33f58:	b	33d80 <flatcc_json_parser_struct_as_root@@Base+0x860>
   33f5c:	sub	r3, pc, #260	; 0x104
   33f60:	ldrd	r2, [r3]
   33f64:	mov	r7, r1
   33f68:	mov	r8, r0
   33f6c:	str	r5, [sp, #4]
   33f70:	cmp	fp, r3
   33f74:	mov	r3, #0
   33f78:	cmpeq	sl, r2
   33f7c:	bhi	34054 <flatcc_json_parser_struct_as_root@@Base+0xb34>
   33f80:	mov	sl, #10
   33f84:	add	r6, r6, #10
   33f88:	strb	r3, [r6]
   33f8c:	b	33c18 <flatcc_json_parser_struct_as_root@@Base+0x6f8>
   33f90:	mov	r1, #0
   33f94:	mov	sl, #20
   33f98:	ldr	r2, [sp, #12]
   33f9c:	ldr	ip, [sp, #16]
   33fa0:	strb	r1, [r6, #20]
   33fa4:	ldr	r3, [sp, #20]
   33fa8:	ldrb	r1, [r4, ip, lsl #1]
   33fac:	str	r3, [sp, #12]
   33fb0:	add	r3, r6, #18
   33fb4:	strb	r1, [r6, #18]
   33fb8:	ldrb	r1, [r5, #1]
   33fbc:	ldr	r5, [sp, #4]
   33fc0:	strb	r1, [r6, #19]
   33fc4:	ldrb	r1, [r2]
   33fc8:	sub	ip, r3, #2
   33fcc:	strb	r1, [r3, #-2]
   33fd0:	ldrb	r2, [r2, #1]
   33fd4:	strb	r2, [r3, #-1]
   33fd8:	b	33b9c <flatcc_json_parser_struct_as_root@@Base+0x67c>
   33fdc:	sub	r3, pc, #380	; 0x17c
   33fe0:	ldrd	r2, [r3]
   33fe4:	cmp	fp, r3
   33fe8:	mov	r3, #0
   33fec:	cmpeq	sl, r2
   33ff0:	bls	340b8 <flatcc_json_parser_struct_as_root@@Base+0xb98>
   33ff4:	ldr	r2, [sp, #8]
   33ff8:	mov	sl, #15
   33ffc:	add	r6, r6, #15
   34000:	strb	r3, [r6]
   34004:	stmib	sp, {r2, r5}
   34008:	ldr	r5, [sp, #12]
   3400c:	b	33f40 <flatcc_json_parser_struct_as_root@@Base+0xa20>
   34010:	sub	r3, pc, #424	; 0x1a8
   34014:	ldrd	r2, [r3]
   34018:	cmp	fp, r3
   3401c:	cmpeq	sl, r2
   34020:	bls	3407c <flatcc_json_parser_struct_as_root@@Base+0xb5c>
   34024:	mov	r7, r1
   34028:	mov	r8, r0
   3402c:	ldr	r1, [sp, #8]
   34030:	mov	r3, #0
   34034:	mov	r2, r5
   34038:	ldr	r0, [sp, #12]
   3403c:	mov	sl, #18
   34040:	strb	r3, [r6, #18]
   34044:	add	r3, r6, #18
   34048:	ldr	r5, [sp, #20]
   3404c:	strd	r0, [sp, #8]
   34050:	b	33fc4 <flatcc_json_parser_struct_as_root@@Base+0xaa4>
   34054:	mov	r9, sl
   34058:	add	r6, r6, #11
   3405c:	strb	r3, [r6]
   34060:	mov	sl, #11
   34064:	str	fp, [sp]
   34068:	b	33d94 <flatcc_json_parser_struct_as_root@@Base+0x874>
   3406c:	add	r3, r6, #12
   34070:	mov	sl, #12
   34074:	strb	r2, [r6, #12]
   34078:	b	33c04 <flatcc_json_parser_struct_as_root@@Base+0x6e4>
   3407c:	ldr	r3, [sp, #12]
   34080:	mov	r2, #0
   34084:	mov	r9, r8
   34088:	mov	sl, #17
   3408c:	mov	r8, r0
   34090:	str	r7, [sp]
   34094:	str	r5, [sp, #12]
   34098:	mov	r7, r1
   3409c:	ldr	r5, [sp, #8]
   340a0:	strb	r2, [r6, #17]
   340a4:	str	r3, [sp, #8]
   340a8:	ldr	r3, [sp, #20]
   340ac:	str	r3, [sp, #4]
   340b0:	add	r3, r6, #17
   340b4:	b	33f28 <flatcc_json_parser_struct_as_root@@Base+0xa08>
   340b8:	ldr	r1, [sp, #8]
   340bc:	mov	sl, #14
   340c0:	add	r6, r6, #14
   340c4:	strb	r3, [r6]
   340c8:	ldr	r2, [sp, #12]
   340cc:	str	r1, [sp, #4]
   340d0:	str	r5, [sp, #12]
   340d4:	mov	r5, r2
   340d8:	b	33bec <flatcc_json_parser_struct_as_root@@Base+0x6cc>
   340dc:	ldrd	r2, [r0, #16]
   340e0:	cmp	r3, r2
   340e4:	bcc	34114 <flatcc_json_parser_struct_as_root@@Base+0xbf4>
   340e8:	ldr	r1, [r0]
   340ec:	ldr	r2, [r0, #36]	; 0x24
   340f0:	sub	ip, r3, r1
   340f4:	mov	r3, r1
   340f8:	str	r1, [r0, #20]
   340fc:	cmp	r2, #0
   34100:	moveq	r2, #3
   34104:	streq	r2, [r0, #36]	; 0x24
   34108:	ldr	r2, [r0, #12]
   3410c:	add	r2, r2, ip
   34110:	str	r2, [r0, #12]
   34114:	mov	r2, #0
   34118:	strb	r2, [r3]
   3411c:	bx	lr
   34120:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34124:	mov	r5, r0
   34128:	ldr	r4, [r0, #16]
   3412c:	ldr	r3, [r0, #20]
   34130:	strd	r6, [sp, #8]
   34134:	mov	r6, r1
   34138:	mov	r7, r2
   3413c:	str	r8, [sp, #16]
   34140:	str	lr, [sp, #20]
   34144:	cmp	r3, r4
   34148:	bcc	34160 <flatcc_json_parser_struct_as_root@@Base+0xc40>
   3414c:	mov	r1, #0
   34150:	ldr	r3, [r0, #44]	; 0x2c
   34154:	blx	r3
   34158:	ldr	r4, [r5, #16]
   3415c:	ldr	r3, [r5, #20]
   34160:	sub	r4, r4, r3
   34164:	cmp	r4, r7
   34168:	bcs	341b4 <flatcc_json_parser_struct_as_root@@Base+0xc94>
   3416c:	mov	r2, r4
   34170:	mov	r1, r6
   34174:	mov	r0, r3
   34178:	sub	r7, r7, r4
   3417c:	bl	14524 <memcpy@plt>
   34180:	ldr	r3, [r5, #20]
   34184:	add	r6, r6, r4
   34188:	mov	r1, #0
   3418c:	mov	r0, r5
   34190:	ldr	r2, [r5, #44]	; 0x2c
   34194:	add	r4, r3, r4
   34198:	str	r4, [r5, #20]
   3419c:	blx	r2
   341a0:	ldr	r4, [r5, #16]
   341a4:	ldr	r3, [r5, #20]
   341a8:	sub	r4, r4, r3
   341ac:	cmp	r7, r4
   341b0:	bhi	3416c <flatcc_json_parser_struct_as_root@@Base+0xc4c>
   341b4:	mov	r1, r6
   341b8:	mov	r0, r3
   341bc:	mov	r2, r7
   341c0:	bl	14524 <memcpy@plt>
   341c4:	ldr	r3, [r5, #20]
   341c8:	ldr	r8, [sp, #16]
   341cc:	add	r7, r3, r7
   341d0:	str	r7, [r5, #20]
   341d4:	ldrd	r4, [sp]
   341d8:	ldrd	r6, [sp, #8]
   341dc:	add	sp, sp, #20
   341e0:	pop	{pc}		; (ldr pc, [sp], #4)
   341e4:	strd	r4, [sp, #-16]!
   341e8:	mov	r4, r0
   341ec:	ldr	r5, [r0, #16]
   341f0:	ldr	r3, [r0, #20]
   341f4:	str	r6, [sp, #8]
   341f8:	mov	r6, r1
   341fc:	str	lr, [sp, #12]
   34200:	cmp	r3, r5
   34204:	bcc	3421c <flatcc_json_parser_struct_as_root@@Base+0xcfc>
   34208:	mov	r1, #0
   3420c:	ldr	r3, [r0, #44]	; 0x2c
   34210:	blx	r3
   34214:	ldr	r5, [r4, #16]
   34218:	ldr	r3, [r4, #20]
   3421c:	sub	r5, r5, r3
   34220:	cmp	r5, r6
   34224:	bcs	3426c <flatcc_json_parser_struct_as_root@@Base+0xd4c>
   34228:	mov	r2, r5
   3422c:	mov	r0, r3
   34230:	mov	r1, #32
   34234:	sub	r6, r6, r5
   34238:	bl	1459c <memset@plt>
   3423c:	ldr	r3, [r4, #20]
   34240:	mov	r1, #0
   34244:	mov	r0, r4
   34248:	ldr	r2, [r4, #44]	; 0x2c
   3424c:	add	r5, r3, r5
   34250:	str	r5, [r4, #20]
   34254:	blx	r2
   34258:	ldr	r5, [r4, #16]
   3425c:	ldr	r3, [r4, #20]
   34260:	sub	r5, r5, r3
   34264:	cmp	r6, r5
   34268:	bhi	34228 <flatcc_json_parser_struct_as_root@@Base+0xd08>
   3426c:	mov	r0, r3
   34270:	mov	r2, r6
   34274:	mov	r1, #32
   34278:	bl	1459c <memset@plt>
   3427c:	ldr	r3, [r4, #20]
   34280:	add	r6, r3, r6
   34284:	str	r6, [r4, #20]
   34288:	ldrd	r4, [sp]
   3428c:	ldr	r6, [sp, #8]
   34290:	add	sp, sp, #12
   34294:	pop	{pc}		; (ldr pc, [sp], #4)
   34298:	strd	r4, [sp, #-16]!
   3429c:	ldr	ip, [r0, #16]
   342a0:	ldr	r2, [r0, #20]
   342a4:	ldr	r5, [r0, #32]
   342a8:	str	r6, [sp, #8]
   342ac:	str	lr, [sp, #12]
   342b0:	ldrb	r1, [r0, #25]
   342b4:	mul	r5, r5, r1
   342b8:	add	r1, r2, r5
   342bc:	cmp	ip, r1
   342c0:	bcs	342dc <flatcc_json_parser_struct_as_root@@Base+0xdbc>
   342c4:	mov	r1, r5
   342c8:	ldrd	r4, [sp]
   342cc:	ldr	r6, [sp, #8]
   342d0:	ldr	lr, [sp, #12]
   342d4:	add	sp, sp, #16
   342d8:	b	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   342dc:	mov	r4, r0
   342e0:	mov	r1, #32
   342e4:	mov	r0, r2
   342e8:	mov	r2, r5
   342ec:	bl	1459c <memset@plt>
   342f0:	ldr	r3, [r4, #20]
   342f4:	ldr	r6, [sp, #8]
   342f8:	add	r5, r3, r5
   342fc:	str	r5, [r4, #20]
   34300:	ldrd	r4, [sp]
   34304:	add	sp, sp, #12
   34308:	pop	{pc}		; (ldr pc, [sp], #4)
   3430c:	cmp	r1, #0
   34310:	strd	r4, [sp, #-16]!
   34314:	mov	r4, r0
   34318:	ldr	r0, [r0]
   3431c:	ldr	ip, [r4, #20]
   34320:	ldr	r3, [r4, #40]	; 0x28
   34324:	str	r6, [sp, #8]
   34328:	str	lr, [sp, #12]
   3432c:	bne	3433c <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   34330:	ldr	r5, [r4, #16]
   34334:	cmp	r5, ip
   34338:	bls	34378 <flatcc_json_parser_struct_as_root@@Base+0xe58>
   3433c:	sub	r5, ip, r0
   34340:	mov	r2, #1
   34344:	mov	r1, r5
   34348:	bl	14548 <fwrite@plt>
   3434c:	ldr	r3, [r4]
   34350:	ldr	ip, [r4, #12]
   34354:	str	r3, [r4, #20]
   34358:	add	ip, ip, r5
   3435c:	str	ip, [r4, #12]
   34360:	mov	r2, #0
   34364:	strb	r2, [r3]
   34368:	ldrd	r4, [sp]
   3436c:	ldr	r6, [sp, #8]
   34370:	add	sp, sp, #12
   34374:	pop	{pc}		; (ldr pc, [sp], #4)
   34378:	mov	r2, #1
   3437c:	ldr	r1, [r4, #8]
   34380:	sub	r5, ip, r5
   34384:	bl	14548 <fwrite@plt>
   34388:	ldr	r3, [r4]
   3438c:	mov	r2, r5
   34390:	ldr	r1, [r4, #8]
   34394:	mov	r0, r3
   34398:	add	r1, r3, r1
   3439c:	bl	14524 <memcpy@plt>
   343a0:	ldr	r3, [r4]
   343a4:	ldr	r1, [r4, #8]
   343a8:	ldr	r2, [r4, #12]
   343ac:	add	r3, r3, r5
   343b0:	str	r3, [r4, #20]
   343b4:	add	r2, r2, r1
   343b8:	str	r2, [r4, #12]
   343bc:	b	34360 <flatcc_json_parser_struct_as_root@@Base+0xe40>
   343c0:	ldr	r3, [r0, #20]
   343c4:	mov	r2, #0
   343c8:	strd	r4, [sp, #-16]!
   343cc:	ldr	r5, [r0]
   343d0:	str	r6, [sp, #8]
   343d4:	str	lr, [sp, #12]
   343d8:	strb	r2, [r3]
   343dc:	ldr	r2, [r0, #16]
   343e0:	ldr	r1, [r0, #20]
   343e4:	cmp	r1, r2
   343e8:	bcs	343fc <flatcc_json_parser_struct_as_root@@Base+0xedc>
   343ec:	ldrd	r4, [sp]
   343f0:	ldr	r6, [sp, #8]
   343f4:	add	sp, sp, #12
   343f8:	pop	{pc}		; (ldr pc, [sp], #4)
   343fc:	mov	r4, r0
   34400:	ldrd	r0, [r0]
   34404:	sub	r5, r3, r5
   34408:	lsl	r1, r1, #1
   3440c:	bl	1453c <realloc@plt>
   34410:	cmp	r0, #0
   34414:	beq	34454 <flatcc_json_parser_struct_as_root@@Base+0xf34>
   34418:	ldr	r3, [r4, #4]
   3441c:	add	r2, r0, r5
   34420:	str	r2, [r4, #20]
   34424:	lsl	r3, r3, #1
   34428:	sub	r1, r3, #64	; 0x40
   3442c:	stm	r4, {r0, r3}
   34430:	add	r0, r0, r1
   34434:	str	r1, [r4, #8]
   34438:	str	r0, [r4, #16]
   3443c:	mov	r3, #0
   34440:	strb	r3, [r2]
   34444:	ldrd	r4, [sp]
   34448:	ldr	r6, [sp, #8]
   3444c:	add	sp, sp, #12
   34450:	pop	{pc}		; (ldr pc, [sp], #4)
   34454:	ldr	r2, [r4]
   34458:	ldr	r3, [r4, #36]	; 0x24
   3445c:	str	r2, [r4, #20]
   34460:	cmp	r3, #0
   34464:	moveq	r3, #3
   34468:	streq	r3, [r4, #36]	; 0x24
   3446c:	ldr	r3, [r4, #12]
   34470:	add	r3, r3, r5
   34474:	str	r3, [r4, #12]
   34478:	b	3443c <flatcc_json_parser_struct_as_root@@Base+0xf1c>
   3447c:	cmp	r0, #99	; 0x63
   34480:	mov	r3, r0
   34484:	bhi	344a8 <flatcc_json_parser_struct_as_root@@Base+0xf88>
   34488:	cmp	r0, #9
   3448c:	bhi	344fc <flatcc_json_parser_struct_as_root@@Base+0xfdc>
   34490:	add	r3, r0, #48	; 0x30
   34494:	mov	r2, #0
   34498:	mov	r0, #1
   3449c:	strb	r3, [r1]
   344a0:	strb	r2, [r1, #1]
   344a4:	bx	lr
   344a8:	movw	r2, #34079	; 0x851f
   344ac:	movt	r2, #20971	; 0x51eb
   344b0:	push	{lr}		; (str lr, [sp, #-4]!)
   344b4:	mov	lr, #100	; 0x64
   344b8:	mov	r0, #0
   344bc:	umull	ip, r2, r2, r3
   344c0:	movw	ip, #32560	; 0x7f30
   344c4:	movt	ip, #4
   344c8:	strb	r0, [r1, #3]
   344cc:	mov	r0, #3
   344d0:	lsr	r2, r2, #5
   344d4:	mls	r3, lr, r2, r3
   344d8:	add	r2, r2, #48	; 0x30
   344dc:	uxtb	r3, r3
   344e0:	ldrb	lr, [ip, r3, lsl #1]
   344e4:	add	ip, ip, r3, lsl #1
   344e8:	strb	lr, [r1, #1]
   344ec:	ldrb	r3, [ip, #1]
   344f0:	strb	r2, [r1]
   344f4:	strb	r3, [r1, #2]
   344f8:	pop	{pc}		; (ldr pc, [sp], #4)
   344fc:	mov	r0, #0
   34500:	sxth	r3, r3
   34504:	movw	r2, #32560	; 0x7f30
   34508:	movt	r2, #4
   3450c:	add	ip, r2, r3, lsl #1
   34510:	strb	r0, [r1, #2]
   34514:	mov	r0, #2
   34518:	ldrb	r3, [r2, r3, lsl #1]
   3451c:	strb	r3, [r1]
   34520:	ldrb	r3, [ip, #1]
   34524:	strb	r3, [r1, #1]
   34528:	bx	lr
   3452c:	movw	r1, #31488	; 0x7b00
   34530:	movt	r1, #4
   34534:	ldr	r3, [pc, #20]	; 34550 <flatcc_json_parser_struct_as_root@@Base+0x1030>
   34538:	movw	r0, #31576	; 0x7b58
   3453c:	movt	r0, #4
   34540:	str	r4, [sp, #-8]!
   34544:	mov	r2, #260	; 0x104
   34548:	str	lr, [sp, #4]
   3454c:	bl	145f0 <__assert_fail@plt>
   34550:	strdeq	r7, [r4], -ip
   34554:	movw	r1, #31488	; 0x7b00
   34558:	movt	r1, #4
   3455c:	ldr	r3, [pc, #20]	; 34578 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   34560:	movw	r0, #34432	; 0x8680
   34564:	movt	r0, #4
   34568:	str	r4, [sp, #-8]!
   3456c:	mov	r2, #239	; 0xef
   34570:	str	lr, [sp, #4]
   34574:	bl	145f0 <__assert_fail@plt>
   34578:	andeq	r8, r4, r4, lsl r0
   3457c:	ldr	r3, [r0, #20]
   34580:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34584:	strd	r6, [sp, #8]
   34588:	mov	r6, r0
   3458c:	strd	r8, [sp, #16]
   34590:	mov	r8, r2
   34594:	mov	r9, #92	; 0x5c
   34598:	mov	r2, #34	; 0x22
   3459c:	str	sl, [sp, #24]
   345a0:	mov	sl, #102	; 0x66
   345a4:	add	r0, r3, #1
   345a8:	str	lr, [sp, #28]
   345ac:	str	r0, [r6, #20]
   345b0:	strb	r2, [r3]
   345b4:	ldrb	r4, [r1]
   345b8:	mov	r5, r1
   345bc:	cmp	r4, #34	; 0x22
   345c0:	cmpne	r4, #31
   345c4:	movhi	r7, #1
   345c8:	movls	r7, #0
   345cc:	bls	345fc <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   345d0:	cmp	r4, #92	; 0x5c
   345d4:	bne	345e4 <flatcc_json_parser_struct_as_root@@Base+0x10c4>
   345d8:	b	347c4 <flatcc_json_parser_struct_as_root@@Base+0x12a4>
   345dc:	cmp	r4, #92	; 0x5c
   345e0:	beq	345f4 <flatcc_json_parser_struct_as_root@@Base+0x10d4>
   345e4:	ldrb	r4, [r5, #1]!
   345e8:	cmp	r4, #34	; 0x22
   345ec:	cmpne	r4, #31
   345f0:	bhi	345dc <flatcc_json_parser_struct_as_root@@Base+0x10bc>
   345f4:	sub	r7, r5, r1
   345f8:	sub	r8, r8, r7
   345fc:	ldr	r2, [r6, #16]
   34600:	ldr	r0, [r6, #20]
   34604:	add	r3, r0, r7
   34608:	cmp	r2, r3
   3460c:	mov	r2, r7
   34610:	bhi	34714 <flatcc_json_parser_struct_as_root@@Base+0x11f4>
   34614:	mov	r0, r6
   34618:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3461c:	ldr	r7, [r6, #20]
   34620:	cmp	r8, #0
   34624:	add	r3, r7, #1
   34628:	beq	34730 <flatcc_json_parser_struct_as_root@@Base+0x1210>
   3462c:	cmp	r4, #12
   34630:	str	r3, [r6, #20]
   34634:	strb	r9, [r7]
   34638:	beq	34780 <flatcc_json_parser_struct_as_root@@Base+0x1260>
   3463c:	bhi	346e4 <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   34640:	cmp	r4, #9
   34644:	beq	347ac <flatcc_json_parser_struct_as_root@@Base+0x128c>
   34648:	cmp	r4, #10
   3464c:	beq	34794 <flatcc_json_parser_struct_as_root@@Base+0x1274>
   34650:	cmp	r4, #8
   34654:	beq	34768 <flatcc_json_parser_struct_as_root@@Base+0x1248>
   34658:	ldr	r2, [r6, #20]
   3465c:	mov	r1, #117	; 0x75
   34660:	mov	r0, #48	; 0x30
   34664:	lsr	r3, r4, #4
   34668:	and	r4, r4, #15
   3466c:	cmp	r3, #10
   34670:	add	ip, r2, #1
   34674:	str	ip, [r6, #20]
   34678:	strb	r1, [r2]
   3467c:	movcc	r2, r0
   34680:	movcs	r2, #87	; 0x57
   34684:	ldr	r1, [r6, #20]
   34688:	cmp	r4, #10
   3468c:	add	r2, r2, r3
   34690:	movcc	r3, r0
   34694:	movcs	r3, #87	; 0x57
   34698:	add	r3, r3, r4
   3469c:	add	ip, r1, #1
   346a0:	str	ip, [r6, #20]
   346a4:	strb	r0, [r1]
   346a8:	ldr	r1, [r6, #20]
   346ac:	add	ip, r1, #1
   346b0:	str	ip, [r6, #20]
   346b4:	strb	r0, [r1]
   346b8:	ldr	r1, [r6, #20]
   346bc:	add	r0, r1, #1
   346c0:	str	r0, [r6, #20]
   346c4:	strb	r2, [r1]
   346c8:	ldr	r2, [r6, #20]
   346cc:	add	r1, r2, #1
   346d0:	str	r1, [r6, #20]
   346d4:	strb	r3, [r2]
   346d8:	sub	r8, r8, #1
   346dc:	add	r1, r5, #1
   346e0:	b	345b4 <flatcc_json_parser_struct_as_root@@Base+0x1094>
   346e4:	cmp	r4, #34	; 0x22
   346e8:	beq	34754 <flatcc_json_parser_struct_as_root@@Base+0x1234>
   346ec:	cmp	r4, #92	; 0x5c
   346f0:	beq	34754 <flatcc_json_parser_struct_as_root@@Base+0x1234>
   346f4:	cmp	r4, #13
   346f8:	bne	34658 <flatcc_json_parser_struct_as_root@@Base+0x1138>
   346fc:	ldr	r3, [r6, #20]
   34700:	mov	r2, #114	; 0x72
   34704:	add	r1, r3, #1
   34708:	str	r1, [r6, #20]
   3470c:	strb	r2, [r3]
   34710:	b	346d8 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34714:	bl	14524 <memcpy@plt>
   34718:	ldr	r3, [r6, #20]
   3471c:	cmp	r8, #0
   34720:	add	r7, r3, r7
   34724:	add	r3, r7, #1
   34728:	str	r7, [r6, #20]
   3472c:	bne	3462c <flatcc_json_parser_struct_as_root@@Base+0x110c>
   34730:	mov	r2, #34	; 0x22
   34734:	str	r3, [r6, #20]
   34738:	strb	r2, [r7]
   3473c:	ldrd	r4, [sp]
   34740:	ldrd	r6, [sp, #8]
   34744:	ldrd	r8, [sp, #16]
   34748:	ldr	sl, [sp, #24]
   3474c:	add	sp, sp, #28
   34750:	pop	{pc}		; (ldr pc, [sp], #4)
   34754:	ldr	r3, [r6, #20]
   34758:	add	r2, r3, #1
   3475c:	str	r2, [r6, #20]
   34760:	strb	r4, [r3]
   34764:	b	346d8 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34768:	ldr	r3, [r6, #20]
   3476c:	mov	r2, #98	; 0x62
   34770:	add	r1, r3, #1
   34774:	str	r1, [r6, #20]
   34778:	strb	r2, [r3]
   3477c:	b	346d8 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34780:	ldr	r3, [r6, #20]
   34784:	add	r2, r3, #1
   34788:	str	r2, [r6, #20]
   3478c:	strb	sl, [r3]
   34790:	b	346d8 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34794:	ldr	r3, [r6, #20]
   34798:	mov	r2, #110	; 0x6e
   3479c:	add	r1, r3, #1
   347a0:	str	r1, [r6, #20]
   347a4:	strb	r2, [r3]
   347a8:	b	346d8 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   347ac:	ldr	r3, [r6, #20]
   347b0:	mov	r2, #116	; 0x74
   347b4:	add	r1, r3, #1
   347b8:	str	r1, [r6, #20]
   347bc:	strb	r2, [r3]
   347c0:	b	346d8 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   347c4:	mov	r7, #0
   347c8:	b	345fc <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   347cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   347d0:	mov	r5, r2
   347d4:	mov	r4, r0
   347d8:	ldr	r2, [r0, #20]
   347dc:	strd	r6, [sp, #8]
   347e0:	mov	r6, r1
   347e4:	str	r8, [sp, #16]
   347e8:	str	lr, [sp, #20]
   347ec:	ldrb	r1, [r0, #25]
   347f0:	cmp	r1, #0
   347f4:	bne	348d0 <flatcc_json_parser_struct_as_root@@Base+0x13b0>
   347f8:	ldr	r3, [r0, #16]
   347fc:	cmp	r3, r2
   34800:	bls	348a8 <flatcc_json_parser_struct_as_root@@Base+0x1388>
   34804:	mov	r3, #34	; 0x22
   34808:	strb	r3, [r2]
   3480c:	ldrb	r3, [r4, #26]
   34810:	ldr	r2, [r4, #16]
   34814:	ldr	r0, [r4, #20]
   34818:	cmp	r3, #0
   3481c:	addeq	r0, r0, #1
   34820:	add	r3, r0, r5
   34824:	cmp	r2, r3
   34828:	str	r0, [r4, #20]
   3482c:	bls	348b8 <flatcc_json_parser_struct_as_root@@Base+0x1398>
   34830:	mov	r2, r5
   34834:	mov	r1, r6
   34838:	bl	14524 <memcpy@plt>
   3483c:	ldr	r2, [r4, #20]
   34840:	add	r2, r2, r5
   34844:	str	r2, [r4, #20]
   34848:	mov	r3, #34	; 0x22
   3484c:	mov	ip, #58	; 0x3a
   34850:	mov	r0, #32
   34854:	strb	r3, [r2]
   34858:	ldrb	r3, [r4, #26]
   3485c:	ldr	r1, [r4, #20]
   34860:	clz	r3, r3
   34864:	lsr	r3, r3, #5
   34868:	add	r2, r1, r3
   3486c:	add	r2, r2, #1
   34870:	str	r2, [r4, #20]
   34874:	strb	ip, [r1, r3]
   34878:	ldr	r3, [r4, #20]
   3487c:	strb	r0, [r3]
   34880:	ldrb	r2, [r4, #25]
   34884:	ldr	r3, [r4, #20]
   34888:	ldrd	r6, [sp, #8]
   3488c:	ldr	r8, [sp, #16]
   34890:	cmp	r2, #0
   34894:	addne	r3, r3, #1
   34898:	str	r3, [r4, #20]
   3489c:	ldrd	r4, [sp]
   348a0:	add	sp, sp, #20
   348a4:	pop	{pc}		; (ldr pc, [sp], #4)
   348a8:	ldr	r3, [r0, #44]	; 0x2c
   348ac:	blx	r3
   348b0:	ldr	r2, [r4, #20]
   348b4:	b	34804 <flatcc_json_parser_struct_as_root@@Base+0x12e4>
   348b8:	mov	r2, r5
   348bc:	mov	r1, r6
   348c0:	mov	r0, r4
   348c4:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   348c8:	ldr	r2, [r4, #20]
   348cc:	b	34848 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   348d0:	add	r1, r2, #1
   348d4:	mov	r3, #10
   348d8:	str	r1, [r0, #20]
   348dc:	strb	r3, [r2]
   348e0:	ldrb	r7, [r0, #25]
   348e4:	ldr	r1, [r0, #16]
   348e8:	ldr	r2, [r0, #32]
   348ec:	ldr	r3, [r0, #20]
   348f0:	mul	r7, r2, r7
   348f4:	add	r2, r3, r7
   348f8:	cmp	r1, r2
   348fc:	bcs	34910 <flatcc_json_parser_struct_as_root@@Base+0x13f0>
   34900:	mov	r1, r7
   34904:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   34908:	ldr	r2, [r4, #20]
   3490c:	b	34804 <flatcc_json_parser_struct_as_root@@Base+0x12e4>
   34910:	mov	r2, r7
   34914:	mov	r0, r3
   34918:	mov	r1, #32
   3491c:	bl	1459c <memset@plt>
   34920:	ldr	r2, [r4, #20]
   34924:	add	r2, r2, r7
   34928:	str	r2, [r4, #20]
   3492c:	b	34804 <flatcc_json_parser_struct_as_root@@Base+0x12e4>
   34930:	subs	r1, r0, #0
   34934:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34938:	strd	r6, [sp, #8]
   3493c:	strd	r8, [sp, #16]
   34940:	strd	sl, [sp, #24]
   34944:	str	lr, [sp, #32]
   34948:	sub	sp, sp, #332	; 0x14c
   3494c:	vstr	d0, [sp, #24]
   34950:	str	r1, [sp, #176]	; 0xb0
   34954:	beq	35a10 <flatcc_json_parser_struct_as_root@@Base+0x24f0>
   34958:	vmov	r4, r5, d0
   3495c:	mov	r7, #0
   34960:	movt	r7, #65504	; 0xffe0
   34964:	mov	r6, #0
   34968:	adds	r2, r4, r4
   3496c:	adc	r3, r5, r5
   34970:	cmp	r3, r7
   34974:	cmpeq	r2, r6
   34978:	bhi	35418 <flatcc_json_parser_struct_as_root@@Base+0x1ef8>
   3497c:	cmp	r4, #0
   34980:	sbcs	r3, r5, #0
   34984:	movge	r3, r1
   34988:	strge	r3, [sp, #44]	; 0x2c
   3498c:	blt	353b0 <flatcc_json_parser_struct_as_root@@Base+0x1e90>
   34990:	orrs	r3, r4, r5
   34994:	beq	353dc <flatcc_json_parser_struct_as_root@@Base+0x1ebc>
   34998:	mov	r3, #0
   3499c:	movt	r3, #32752	; 0x7ff0
   349a0:	mov	r2, #0
   349a4:	cmp	r5, r3
   349a8:	cmpeq	r4, r2
   349ac:	beq	35434 <flatcc_json_parser_struct_as_root@@Base+0x1f14>
   349b0:	ldrd	r2, [sp, #24]
   349b4:	mov	r1, #0
   349b8:	mov	r0, #0
   349bc:	strd	r0, [sp, #48]	; 0x30
   349c0:	mov	r6, r3
   349c4:	str	r2, [sp, #80]	; 0x50
   349c8:	bic	r1, r6, #-2147483648	; 0x80000000
   349cc:	lsr	r2, r1, #20
   349d0:	lsl	r3, r2, #20
   349d4:	str	r3, [sp, #52]	; 0x34
   349d8:	ubfx	r3, r6, #0, #20
   349dc:	str	r3, [sp, #84]	; 0x54
   349e0:	ldrd	r2, [sp, #48]	; 0x30
   349e4:	orrs	r3, r2, r3
   349e8:	beq	35450 <flatcc_json_parser_struct_as_root@@Base+0x1f30>
   349ec:	ldrd	r2, [sp, #80]	; 0x50
   349f0:	ubfx	r6, r6, #20, #11
   349f4:	sub	r6, r6, #1072	; 0x430
   349f8:	sub	lr, r6, #3
   349fc:	sub	r6, r6, #4
   34a00:	adds	r0, r2, #0
   34a04:	adc	r5, r3, #1048576	; 0x100000
   34a08:	str	r0, [sp, #16]
   34a0c:	mov	r1, #0
   34a10:	movt	r1, #65472	; 0xffc0
   34a14:	str	r5, [sp, #20]
   34a18:	sub	r2, lr, #10
   34a1c:	mov	ip, #0
   34a20:	ldrd	r8, [sp, #16]
   34a24:	strd	sl, [sp, #160]	; 0xa0
   34a28:	mov	fp, r5
   34a2c:	lsl	r3, r9, #10
   34a30:	mov	r7, r2
   34a34:	mov	r4, ip
   34a38:	lsl	r2, r8, #10
   34a3c:	orr	r3, r3, r8, lsr #22
   34a40:	mov	r8, r2
   34a44:	sub	r2, r7, #10
   34a48:	and	r5, r3, r1
   34a4c:	mov	r9, r3
   34a50:	orrs	r3, r4, r5
   34a54:	beq	34a2c <flatcc_json_parser_struct_as_root@@Base+0x150c>
   34a58:	cmp	r8, #0
   34a5c:	mov	r5, fp
   34a60:	strd	r8, [sp, #16]
   34a64:	sbcs	r3, r9, #0
   34a68:	str	r7, [sp, #120]	; 0x78
   34a6c:	blt	34a94 <flatcc_json_parser_struct_as_root@@Base+0x1574>
   34a70:	mov	r3, r7
   34a74:	adds	r8, r8, r8
   34a78:	sub	r3, r3, #1
   34a7c:	adc	r9, r9, r9
   34a80:	cmp	r8, #0
   34a84:	sbcs	r2, r9, #0
   34a88:	bge	34a74 <flatcc_json_parser_struct_as_root@@Base+0x1554>
   34a8c:	strd	r8, [sp, #16]
   34a90:	str	r3, [sp, #120]	; 0x78
   34a94:	adds	r2, r0, r0
   34a98:	mov	r7, #0
   34a9c:	str	r6, [sp, #160]	; 0xa0
   34aa0:	adc	r3, r5, r5
   34aa4:	adds	sl, r2, #1
   34aa8:	mov	r4, #0
   34aac:	movt	r4, #65472	; 0xffc0
   34ab0:	sub	r1, r6, #10
   34ab4:	adc	fp, r3, #0
   34ab8:	str	r3, [sp, #180]	; 0xb4
   34abc:	mov	r8, r7
   34ac0:	mov	r9, r2
   34ac4:	lsl	r3, fp, #10
   34ac8:	mov	r6, r8
   34acc:	mov	r2, r1
   34ad0:	lsl	ip, sl, #10
   34ad4:	sub	r1, r1, #10
   34ad8:	orr	r3, r3, sl, lsr #22
   34adc:	mov	sl, ip
   34ae0:	and	r7, r3, r4
   34ae4:	mov	fp, r3
   34ae8:	orrs	r3, r6, r7
   34aec:	beq	34ac4 <flatcc_json_parser_struct_as_root@@Base+0x15a4>
   34af0:	mov	r3, r2
   34af4:	cmp	ip, #0
   34af8:	ldr	r6, [sp, #160]	; 0xa0
   34afc:	sbcs	r1, fp, #0
   34b00:	mov	r2, r9
   34b04:	str	r3, [sp, #168]	; 0xa8
   34b08:	blt	34b38 <flatcc_json_parser_struct_as_root@@Base+0x1618>
   34b0c:	ldrd	r8, [sp, #16]
   34b10:	sub	r3, r3, #1
   34b14:	adds	sl, sl, sl
   34b18:	mov	r1, r3
   34b1c:	adc	fp, fp, fp
   34b20:	cmp	sl, #0
   34b24:	sbcs	ip, fp, #0
   34b28:	sub	r3, r3, #1
   34b2c:	bge	34b14 <flatcc_json_parser_struct_as_root@@Base+0x15f4>
   34b30:	strd	r8, [sp, #16]
   34b34:	str	r1, [sp, #168]	; 0xa8
   34b38:	vldr	d7, [sp, #24]
   34b3c:	vcmpe.f64	d7, #0.0
   34b40:	vmrs	APSR_nzcv, fpscr
   34b44:	ble	35a2c <flatcc_json_parser_struct_as_root@@Base+0x250c>
   34b48:	vmov.f64	d6, d7
   34b4c:	vldr	d7, [pc, #924]	; 34ef0 <flatcc_json_parser_struct_as_root@@Base+0x19d0>
   34b50:	vcmpe.f64	d6, d7
   34b54:	vmrs	APSR_nzcv, fpscr
   34b58:	bhi	35a2c <flatcc_json_parser_struct_as_root@@Base+0x250c>
   34b5c:	ldrd	r8, [sp, #80]	; 0x50
   34b60:	mov	r3, r8
   34b64:	orrs	r3, r3, r9
   34b68:	ldrd	r8, [sp, #48]	; 0x30
   34b6c:	moveq	r3, #1
   34b70:	movne	r3, #0
   34b74:	mov	r1, r8
   34b78:	orrs	r1, r1, r9
   34b7c:	moveq	r3, #0
   34b80:	cmp	r3, #0
   34b84:	bne	3575c <flatcc_json_parser_struct_as_root@@Base+0x223c>
   34b88:	ldr	r3, [sp, #180]	; 0xb4
   34b8c:	subs	r2, r2, #1
   34b90:	sbc	lr, r3, #0
   34b94:	ldr	r1, [sp, #168]	; 0xa8
   34b98:	mvn	r3, #60	; 0x3c
   34b9c:	vldr	d6, [pc, #852]	; 34ef8 <flatcc_json_parser_struct_as_root@@Base+0x19d8>
   34ba0:	sub	r6, r6, r1
   34ba4:	ldr	r1, [sp, #120]	; 0x78
   34ba8:	lsl	r0, r2, r6
   34bac:	str	r0, [sp, #48]	; 0x30
   34bb0:	sub	r3, r3, r1
   34bb4:	sub	r1, r6, #32
   34bb8:	vmov	s14, r3
   34bbc:	lsl	r3, lr, r6
   34bc0:	orr	r1, r3, r2, lsl r1
   34bc4:	rsb	r3, r6, #32
   34bc8:	orr	r3, r1, r2, lsr r3
   34bcc:	str	r3, [sp, #80]	; 0x50
   34bd0:	vcvt.f64.s32	d7, s14
   34bd4:	vmul.f64	d7, d7, d6
   34bd8:	vcmpe.f64	d7, #0.0
   34bdc:	vcvt.s32.f64	s13, d7
   34be0:	vmrs	APSR_nzcv, fpscr
   34be4:	bmi	34c08 <flatcc_json_parser_struct_as_root@@Base+0x16e8>
   34be8:	vcvt.f64.s32	d5, s13
   34bec:	vsub.f64	d7, d7, d5
   34bf0:	vcmp.f64	d7, #0.0
   34bf4:	vmrs	APSR_nzcv, fpscr
   34bf8:	beq	34c08 <flatcc_json_parser_struct_as_root@@Base+0x16e8>
   34bfc:	vmov	r3, s13
   34c00:	add	r3, r3, #1
   34c04:	vmov	s13, r3
   34c08:	vmov	r3, s13
   34c0c:	movw	lr, #32560	; 0x7f30
   34c10:	movt	lr, #4
   34c14:	ldrd	r6, [sp, #16]
   34c18:	add	r2, lr, #288	; 0x120
   34c1c:	str	lr, [sp, #180]	; 0xb4
   34c20:	add	lr, lr, #280	; 0x118
   34c24:	mov	r4, r7
   34c28:	add	ip, r3, #344	; 0x158
   34c2c:	mov	r3, #0
   34c30:	add	r0, ip, #10
   34c34:	add	ip, ip, #3
   34c38:	cmp	ip, #0
   34c3c:	str	r3, [sp, #196]	; 0xc4
   34c40:	movlt	ip, r0
   34c44:	asr	ip, ip, #3
   34c48:	add	ip, ip, #1
   34c4c:	lsl	r0, ip, #4
   34c50:	add	r2, r2, r0
   34c54:	add	ip, lr, r0
   34c58:	ldmdb	r2, {r0, r2}
   34c5c:	ldrsh	r8, [ip, #8]
   34c60:	umull	r4, r5, r4, r0
   34c64:	umull	r6, r7, r6, r0
   34c68:	strd	r6, [sp, #160]	; 0xa0
   34c6c:	mov	r6, r4
   34c70:	ldr	r4, [sp, #16]
   34c74:	str	r5, [sp, #192]	; 0xc0
   34c78:	ldr	r7, [sp, #164]	; 0xa4
   34c7c:	umull	r4, r5, r4, r2
   34c80:	adds	r6, r7, r6
   34c84:	mov	r7, r4
   34c88:	mov	r4, r5
   34c8c:	ldr	r5, [sp, #192]	; 0xc0
   34c90:	adc	r1, r3, r3
   34c94:	adds	r6, r6, #-2147483648	; 0x80000000
   34c98:	adc	r1, r1, r3
   34c9c:	adds	r6, r6, r7
   34ca0:	adc	r1, r1, r3
   34ca4:	adds	r4, r5, r4
   34ca8:	adc	lr, r3, r3
   34cac:	str	r4, [sp, #152]	; 0x98
   34cb0:	str	lr, [sp, #156]	; 0x9c
   34cb4:	ldr	lr, [sp, #80]	; 0x50
   34cb8:	ldrd	r4, [sp, #152]	; 0x98
   34cbc:	umull	r6, r7, r0, lr
   34cc0:	mov	lr, r1
   34cc4:	ldrsh	r1, [ip, #10]
   34cc8:	ldr	ip, [sp, #120]	; 0x78
   34ccc:	strd	r6, [sp, #160]	; 0xa0
   34cd0:	str	r1, [sp, #192]	; 0xc0
   34cd4:	ldr	r1, [sp, #48]	; 0x30
   34cd8:	add	r9, r8, ip
   34cdc:	umull	r6, r7, r0, r1
   34ce0:	ldr	r1, [sp, #20]
   34ce4:	mov	ip, r7
   34ce8:	ldr	r7, [sp, #48]	; 0x30
   34cec:	umlal	r4, r5, r2, r1
   34cf0:	umull	r6, r7, r2, r7
   34cf4:	strd	r6, [sp, #16]
   34cf8:	adds	r7, lr, r4
   34cfc:	ldr	lr, [sp, #80]	; 0x50
   34d00:	adc	r1, r3, r5
   34d04:	str	r7, [sp, #112]	; 0x70
   34d08:	ldrd	r6, [sp, #160]	; 0xa0
   34d0c:	str	r1, [sp, #116]	; 0x74
   34d10:	umull	r4, r5, r2, lr
   34d14:	adds	ip, ip, r6
   34d18:	mov	lr, r7
   34d1c:	ldrd	r6, [sp, #16]
   34d20:	adc	r1, r3, r3
   34d24:	adds	ip, ip, #-2147483648	; 0x80000000
   34d28:	adc	r8, r1, r3
   34d2c:	adds	ip, ip, r6
   34d30:	str	r7, [sp, #48]	; 0x30
   34d34:	umull	r6, r7, r0, fp
   34d38:	umull	r0, r1, r0, sl
   34d3c:	adc	r8, r8, r3
   34d40:	subs	ip, r4, #1
   34d44:	strd	r0, [sp, #16]
   34d48:	sbc	r0, r5, #0
   34d4c:	adds	lr, ip, lr
   34d50:	ldr	r1, [sp, #48]	; 0x30
   34d54:	adc	r0, r0, r3
   34d58:	umull	r4, r5, r2, sl
   34d5c:	umull	sl, fp, r2, fp
   34d60:	adds	lr, lr, r1
   34d64:	ldr	r1, [sp, #20]
   34d68:	adc	r0, r0, r3
   34d6c:	adds	ip, r8, lr
   34d70:	adc	r2, r3, r0
   34d74:	str	ip, [sp, #104]	; 0x68
   34d78:	str	r2, [sp, #108]	; 0x6c
   34d7c:	adds	r1, r1, r6
   34d80:	adc	r2, r3, r3
   34d84:	adds	r1, r1, #-2147483648	; 0x80000000
   34d88:	adc	r2, r2, r3
   34d8c:	adds	r1, r1, r4
   34d90:	adc	r2, r2, r3
   34d94:	adds	ip, sl, #1
   34d98:	mov	r4, r5
   34d9c:	adc	r5, fp, r3
   34da0:	adds	r1, ip, r7
   34da4:	adc	lr, r5, r3
   34da8:	adds	r1, r1, r4
   34dac:	adc	lr, lr, r3
   34db0:	adds	r2, r2, r1
   34db4:	ldrd	r0, [sp, #104]	; 0x68
   34db8:	str	r2, [sp, #32]
   34dbc:	adc	r2, r3, lr
   34dc0:	str	r2, [sp, #36]	; 0x24
   34dc4:	ldrd	r4, [sp, #32]
   34dc8:	subs	r2, r4, r0
   34dcc:	str	r2, [sp, #56]	; 0x38
   34dd0:	sbc	r2, r5, r1
   34dd4:	cmp	r1, r5
   34dd8:	cmpeq	r0, r4
   34ddc:	str	r2, [sp, #60]	; 0x3c
   34de0:	bhi	35a0c <flatcc_json_parser_struct_as_root@@Base+0x24ec>
   34de4:	add	r1, r9, #129	; 0x81
   34de8:	movw	r0, #1233	; 0x4d1
   34dec:	ldrd	r4, [sp, #32]
   34df0:	mvn	r2, #63	; 0x3f
   34df4:	mov	r3, #1
   34df8:	sub	r9, r2, r9
   34dfc:	mul	r1, r0, r1
   34e00:	sub	r6, r9, #32
   34e04:	rsb	r8, r9, #32
   34e08:	lsl	ip, r3, r9
   34e0c:	lsl	r0, r3, r6
   34e10:	asr	lr, r1, #12
   34e14:	orr	r1, r0, r3, lsr r8
   34e18:	lsr	r2, r4, r9
   34e1c:	add	r0, lr, r3
   34e20:	str	r6, [sp, #48]	; 0x30
   34e24:	orr	r2, r2, r5, lsl r8
   34e28:	str	ip, [sp, #80]	; 0x50
   34e2c:	str	r1, [sp, #84]	; 0x54
   34e30:	ldr	r1, [sp, #180]	; 0xb4
   34e34:	orr	r2, r2, r5, lsr r6
   34e38:	str	lr, [sp, #16]
   34e3c:	ldrd	r6, [sp, #80]	; 0x50
   34e40:	add	r1, r1, r0, lsl #2
   34e44:	ldr	ip, [r1, #1672]	; 0x688
   34e48:	subs	r3, r6, #1
   34e4c:	sbc	r1, r7, #0
   34e50:	and	sl, r4, r3
   34e54:	and	fp, r5, r1
   34e58:	str	r3, [sp, #152]	; 0x98
   34e5c:	str	r1, [sp, #160]	; 0xa0
   34e60:	cmp	r2, ip
   34e64:	bcs	34e80 <flatcc_json_parser_struct_as_root@@Base+0x1960>
   34e68:	ldr	r3, [sp, #180]	; 0xb4
   34e6c:	mov	r0, lr
   34e70:	add	r3, r3, lr, lsl #2
   34e74:	ldr	ip, [r3, #1672]	; 0x688
   34e78:	sub	r3, lr, #1
   34e7c:	str	r3, [sp, #16]
   34e80:	cmp	r0, #0
   34e84:	ble	3598c <flatcc_json_parser_struct_as_root@@Base+0x246c>
   34e88:	udiv	r3, r2, ip
   34e8c:	ldrd	r0, [sp, #44]	; 0x2c
   34e90:	mls	r2, ip, r3, r2
   34e94:	add	r3, r3, #48	; 0x30
   34e98:	uxtb	r3, r3
   34e9c:	lsl	r1, r2, r1
   34ea0:	strb	r3, [r0]
   34ea4:	lsl	r0, r2, r9
   34ea8:	orr	r1, r1, r2, lsr r8
   34eac:	adds	r0, r0, sl
   34eb0:	adc	r1, r1, fp
   34eb4:	strd	r0, [sp]
   34eb8:	ldrd	r4, [sp]
   34ebc:	ldrd	r0, [sp, #56]	; 0x38
   34ec0:	cmp	r1, r5
   34ec4:	cmpeq	r0, r4
   34ec8:	bhi	359e0 <flatcc_json_parser_struct_as_root@@Base+0x24c0>
   34ecc:	movw	r5, #52429	; 0xcccd
   34ed0:	movt	r5, #52428	; 0xcccc
   34ed4:	ldr	lr, [sp, #16]
   34ed8:	mov	r4, #1
   34edc:	ldr	r3, [sp, #44]	; 0x2c
   34ee0:	add	r0, r3, #1
   34ee4:	str	r0, [sp, #16]
   34ee8:	b	34f58 <flatcc_json_parser_struct_as_root@@Base+0x1a38>
   34eec:	nop	{0}
   34ef0:			; <UNDEFINED> instruction: 0xffffffff
   34ef4:	svcvc	0x00efffff
   34ef8:			; <UNDEFINED> instruction: 0x509f79fe
   34efc:	svccc	0x00d34413
   34f00:	andeq	r8, r4, r8, lsr #32
   34f04:	andeq	r8, r4, ip, lsr r0
   34f08:	mov	r0, r3
   34f0c:	udiv	r3, r2, ip
   34f10:	ldr	r1, [sp, #48]	; 0x30
   34f14:	mov	r4, r6
   34f18:	mls	r2, ip, r3, r2
   34f1c:	add	r3, r3, #48	; 0x30
   34f20:	uxtb	r3, r3
   34f24:	lsl	r1, r2, r1
   34f28:	strb	r3, [r0], #1
   34f2c:	lsl	r6, r2, r9
   34f30:	str	r0, [sp, #16]
   34f34:	orr	r1, r1, r2, lsr r8
   34f38:	adds	r0, r6, sl
   34f3c:	ldrd	r6, [sp, #56]	; 0x38
   34f40:	adc	r1, r1, fp
   34f44:	strd	r0, [sp]
   34f48:	ldrd	r0, [sp]
   34f4c:	cmp	r7, r1
   34f50:	cmpeq	r6, r0
   34f54:	bhi	3551c <flatcc_json_parser_struct_as_root@@Base+0x1ffc>
   34f58:	umull	r3, ip, r5, ip
   34f5c:	ldr	r3, [sp, #16]
   34f60:	sub	lr, lr, #1
   34f64:	add	r6, r4, #1
   34f68:	cmn	lr, #1
   34f6c:	lsr	ip, ip, #3
   34f70:	str	r6, [sp, #104]	; 0x68
   34f74:	str	r3, [sp, #180]	; 0xb4
   34f78:	bne	34f08 <flatcc_json_parser_struct_as_root@@Base+0x19e8>
   34f7c:	mov	r0, #0
   34f80:	add	r3, r0, r4
   34f84:	mov	r5, #1
   34f88:	mov	ip, #0
   34f8c:	str	r3, [sp, #88]	; 0x58
   34f90:	ldr	r3, [sp, #44]	; 0x2c
   34f94:	str	r9, [sp, #96]	; 0x60
   34f98:	str	r8, [sp, #104]	; 0x68
   34f9c:	ldrd	r8, [sp, #56]	; 0x38
   34fa0:	add	r0, r3, r4
   34fa4:	mov	r4, r0
   34fa8:	b	34fb8 <flatcc_json_parser_struct_as_root@@Base+0x1a98>
   34fac:	mov	r5, r2
   34fb0:	mov	ip, lr
   34fb4:	add	r6, r6, #1
   34fb8:	ldr	r3, [sp, #88]	; 0x58
   34fbc:	mov	r7, r4
   34fc0:	lsl	r0, fp, #2
   34fc4:	lsl	r1, sl, #2
   34fc8:	str	r6, [sp, #56]	; 0x38
   34fcc:	ldr	r4, [sp, #152]	; 0x98
   34fd0:	orr	r0, r0, sl, lsr #30
   34fd4:	adds	r1, r1, sl
   34fd8:	lsl	lr, ip, #2
   34fdc:	adc	r0, r0, fp
   34fe0:	adds	r1, r1, r1
   34fe4:	lsl	r2, r5, #2
   34fe8:	sub	r3, r3, r6
   34fec:	adc	r0, r0, r0
   34ff0:	str	r3, [sp, #16]
   34ff4:	and	sl, r4, r1
   34ff8:	lsl	r4, r9, #2
   34ffc:	ldr	r3, [sp, #96]	; 0x60
   35000:	str	lr, [sp, #144]	; 0x90
   35004:	orr	lr, lr, r5, lsr #30
   35008:	str	r2, [sp, #136]	; 0x88
   3500c:	adds	r2, r2, r5
   35010:	orr	r4, r4, r8, lsr #30
   35014:	adc	lr, lr, ip
   35018:	adds	r2, r2, r2
   3501c:	adc	lr, lr, lr
   35020:	lsr	r3, r1, r3
   35024:	ldr	r1, [sp, #160]	; 0xa0
   35028:	and	fp, r1, r0
   3502c:	ldr	r1, [sp, #104]	; 0x68
   35030:	orr	r3, r3, r0, lsl r1
   35034:	lsl	r1, r8, #2
   35038:	str	r1, [sp]
   3503c:	ldr	r1, [sp, #48]	; 0x30
   35040:	orr	r3, r3, r0, lsr r1
   35044:	ldr	r1, [sp]
   35048:	add	r3, r3, #48	; 0x30
   3504c:	uxtb	r3, r3
   35050:	adds	r1, r1, r8
   35054:	strb	r3, [r7]
   35058:	adc	r0, r4, r9
   3505c:	adds	r1, r1, r1
   35060:	adc	r0, r0, r0
   35064:	mov	r8, r1
   35068:	cmp	r0, fp
   3506c:	mov	r9, r0
   35070:	cmpeq	r1, sl
   35074:	add	r4, r7, #1
   35078:	bls	34fac <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   3507c:	mov	r4, r6
   35080:	str	r7, [sp, #48]	; 0x30
   35084:	strd	r8, [sp, #56]	; 0x38
   35088:	ldrd	r8, [sp, #32]
   3508c:	str	ip, [sp, #96]	; 0x60
   35090:	mov	ip, lr
   35094:	mov	lr, r0
   35098:	ldrd	r6, [sp, #112]	; 0x70
   3509c:	str	r1, [sp, #104]	; 0x68
   350a0:	mov	r0, r9
   350a4:	subs	r1, r8, r6
   350a8:	ldrd	r8, [sp, #32]
   350ac:	sbc	r0, r0, r7
   350b0:	cmp	r7, r9
   350b4:	ldr	r7, [sp, #120]	; 0x78
   350b8:	cmpeq	r6, r8
   350bc:	ldr	r9, [sp, #168]	; 0xa8
   350c0:	movhi	r6, #1
   350c4:	movls	r6, #0
   350c8:	cmp	r7, r9
   350cc:	orrne	r6, r6, #1
   350d0:	cmp	r6, #0
   350d4:	bne	35a0c <flatcc_json_parser_struct_as_root@@Base+0x24ec>
   350d8:	mul	r0, r2, r0
   350dc:	umull	r6, r7, r2, r1
   350e0:	mla	r0, r1, ip, r0
   350e4:	strd	r6, [sp]
   350e8:	add	r1, r0, r7
   350ec:	str	r1, [sp, #4]
   350f0:	ldrd	r6, [sp]
   350f4:	subs	r1, r6, r2
   350f8:	str	r1, [sp, #128]	; 0x80
   350fc:	sbc	r1, r7, ip
   35100:	str	r1, [sp, #132]	; 0x84
   35104:	ldrd	r0, [sp, #128]	; 0x80
   35108:	cmp	fp, r1
   3510c:	cmpeq	sl, r0
   35110:	bcs	35958 <flatcc_json_parser_struct_as_root@@Base+0x2438>
   35114:	ldrd	r8, [sp, #56]	; 0x38
   35118:	ldrd	r6, [sp, #80]	; 0x50
   3511c:	subs	r1, r8, sl
   35120:	str	r1, [sp, #200]	; 0xc8
   35124:	sbc	r1, r9, fp
   35128:	str	r1, [sp, #204]	; 0xcc
   3512c:	ldrd	r0, [sp, #200]	; 0xc8
   35130:	cmp	r7, r1
   35134:	cmpeq	r6, r0
   35138:	bhi	359ec <flatcc_json_parser_struct_as_root@@Base+0x24cc>
   3513c:	subs	r1, r8, r6
   35140:	str	r4, [sp, #32]
   35144:	mov	r4, r6
   35148:	sbc	r0, r9, r7
   3514c:	subs	r1, r1, sl
   35150:	ldrd	r8, [sp, #128]	; 0x80
   35154:	str	r2, [sp, #56]	; 0x38
   35158:	str	ip, [sp, #88]	; 0x58
   3515c:	mov	ip, r5
   35160:	mov	r5, r7
   35164:	str	r1, [sp, #208]	; 0xd0
   35168:	sbc	r1, r0, fp
   3516c:	str	r1, [sp, #212]	; 0xd4
   35170:	ldrd	r0, [sp, #208]	; 0xd0
   35174:	adds	r2, r4, sl
   35178:	str	r2, [sp, #8]
   3517c:	adc	r2, r5, fp
   35180:	str	r2, [sp, #12]
   35184:	ldrd	r6, [sp, #8]
   35188:	cmp	r9, r7
   3518c:	cmpeq	r8, r6
   35190:	bhi	354e4 <flatcc_json_parser_struct_as_root@@Base+0x1fc4>
   35194:	subs	r7, r8, sl
   35198:	mov	r5, ip
   3519c:	ldr	r4, [sp, #32]
   351a0:	sbc	r1, r9, fp
   351a4:	str	r7, [sp, #64]	; 0x40
   351a8:	ldrd	r6, [sp]
   351ac:	str	r1, [sp, #68]	; 0x44
   351b0:	ldr	r2, [sp, #56]	; 0x38
   351b4:	ldrd	r8, [sp, #8]
   351b8:	ldr	ip, [sp, #88]	; 0x58
   351bc:	subs	r1, r2, r6
   351c0:	sbc	r0, ip, r7
   351c4:	adds	r1, r1, r8
   351c8:	str	r1, [sp, #72]	; 0x48
   351cc:	adc	r1, r0, r9
   351d0:	str	r1, [sp, #76]	; 0x4c
   351d4:	ldrd	r0, [sp, #64]	; 0x40
   351d8:	ldrd	r6, [sp, #72]	; 0x48
   351dc:	cmp	r1, r7
   351e0:	cmpeq	r0, r6
   351e4:	bcc	35958 <flatcc_json_parser_struct_as_root@@Base+0x2438>
   351e8:	ldr	r1, [sp, #48]	; 0x30
   351ec:	sub	r3, r3, #1
   351f0:	strb	r3, [r1]
   351f4:	ldrd	r0, [sp]
   351f8:	adds	r3, r2, r0
   351fc:	str	r3, [sp, #240]	; 0xf0
   35200:	adc	r3, ip, r1
   35204:	str	r3, [sp, #244]	; 0xf4
   35208:	ldrd	r2, [sp, #8]
   3520c:	ldrd	r0, [sp, #240]	; 0xf0
   35210:	cmp	r1, r3
   35214:	cmpeq	r0, r2
   35218:	bls	352ac <flatcc_json_parser_struct_as_root@@Base+0x1d8c>
   3521c:	ldrd	r6, [sp, #80]	; 0x50
   35220:	ldr	ip, [sp, #104]	; 0x68
   35224:	subs	ip, ip, r2
   35228:	str	ip, [sp, #264]	; 0x108
   3522c:	sbc	ip, lr, r3
   35230:	str	ip, [sp, #268]	; 0x10c
   35234:	add	ip, sp, #264	; 0x108
   35238:	ldrd	r8, [ip]
   3523c:	cmp	r7, r9
   35240:	cmpeq	r6, r8
   35244:	bhi	352ac <flatcc_json_parser_struct_as_root@@Base+0x1d8c>
   35248:	adds	ip, r6, r2
   3524c:	str	ip, [sp, #288]	; 0x120
   35250:	adc	ip, r7, r3
   35254:	str	ip, [sp, #292]	; 0x124
   35258:	add	ip, sp, #288	; 0x120
   3525c:	ldrd	r6, [ip]
   35260:	cmp	r1, r7
   35264:	cmpeq	r0, r6
   35268:	bhi	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   3526c:	subs	ip, r0, r2
   35270:	sbc	r3, r1, r3
   35274:	str	ip, [sp, #296]	; 0x128
   35278:	mov	ip, r1
   3527c:	add	r1, sp, #304	; 0x130
   35280:	str	r3, [sp, #300]	; 0x12c
   35284:	subs	r3, r6, r0
   35288:	str	r3, [sp, #304]	; 0x130
   3528c:	sbc	r3, r7, ip
   35290:	str	r3, [sp, #308]	; 0x134
   35294:	add	r3, sp, #296	; 0x128
   35298:	ldrd	r0, [r1]
   3529c:	ldrd	r2, [r3]
   352a0:	cmp	r3, r1
   352a4:	cmpeq	r2, r0
   352a8:	bhi	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   352ac:	ldr	ip, [sp, #96]	; 0x60
   352b0:	ldr	r8, [sp, #136]	; 0x88
   352b4:	ldr	r3, [sp, #144]	; 0x90
   352b8:	adds	r2, r8, r5
   352bc:	orr	r3, r3, r5, lsr #30
   352c0:	str	r2, [sp, #184]	; 0xb8
   352c4:	adc	r2, r3, ip
   352c8:	str	r2, [sp, #188]	; 0xbc
   352cc:	ldrd	r6, [sp, #184]	; 0xb8
   352d0:	lsl	r2, r7, #2
   352d4:	lsl	r1, r6, #2
   352d8:	orr	r2, r2, r6, lsr #30
   352dc:	str	r1, [sp, #184]	; 0xb8
   352e0:	str	r2, [sp, #188]	; 0xbc
   352e4:	ldrd	r0, [sp, #8]
   352e8:	ldrd	r6, [sp, #184]	; 0xb8
   352ec:	cmp	r1, r7
   352f0:	cmpeq	r0, r6
   352f4:	bcc	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   352f8:	adds	r5, r8, r5
   352fc:	adc	r3, r3, ip
   35300:	lsl	r2, r5, #3
   35304:	lsl	r3, r3, #3
   35308:	orr	r3, r3, r5, lsr #29
   3530c:	mov	r5, r2
   35310:	ldr	r2, [sp, #104]	; 0x68
   35314:	subs	r2, r2, r5
   35318:	sbc	r3, lr, r3
   3531c:	strd	r2, [sp, #248]	; 0xf8
   35320:	ldrd	r2, [sp, #248]	; 0xf8
   35324:	cmp	r1, r3
   35328:	cmpeq	r0, r2
   3532c:	bhi	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   35330:	ldr	r3, [sp, #16]
   35334:	ldr	r2, [sp, #192]	; 0xc0
   35338:	sub	r5, r3, r2
   3533c:	mov	r3, r2
   35340:	ldr	r2, [sp, #16]
   35344:	cmp	r4, #2
   35348:	sub	r1, r3, r2
   3534c:	movge	r3, r4
   35350:	movlt	r3, #2
   35354:	cmp	r3, r1
   35358:	suble	r7, r3, #1
   3535c:	movgt	r7, r1
   35360:	cmp	r5, #0
   35364:	blt	357a8 <flatcc_json_parser_struct_as_root@@Base+0x2288>
   35368:	ldr	r3, [sp, #44]	; 0x2c
   3536c:	cmp	r5, #2
   35370:	add	lr, r3, r4
   35374:	bgt	35960 <flatcc_json_parser_struct_as_root@@Base+0x2440>
   35378:	cmp	r5, #0
   3537c:	ble	3539c <flatcc_json_parser_struct_as_root@@Base+0x1e7c>
   35380:	mov	r0, lr
   35384:	mov	r2, r5
   35388:	mov	r1, #48	; 0x30
   3538c:	bl	1459c <memset@plt>
   35390:	ldr	r3, [sp, #44]	; 0x2c
   35394:	add	r4, r4, r5
   35398:	add	lr, r3, r4
   3539c:	ldr	r2, [sp, #176]	; 0xb0
   353a0:	mov	r3, #0
   353a4:	strb	r3, [lr]
   353a8:	sub	r0, lr, r2
   353ac:	b	353fc <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   353b0:	vldr	d7, [sp, #24]
   353b4:	add	r3, r5, #-2147483648	; 0x80000000
   353b8:	mov	r0, r1
   353bc:	mov	r2, #45	; 0x2d
   353c0:	mov	r5, r3
   353c4:	orrs	r3, r4, r5
   353c8:	strb	r2, [r0], #1
   353cc:	str	r0, [sp, #44]	; 0x2c
   353d0:	vneg.f64	d7, d7
   353d4:	vstr	d7, [sp, #24]
   353d8:	bne	34998 <flatcc_json_parser_struct_as_root@@Base+0x1478>
   353dc:	ldr	r1, [sp, #44]	; 0x2c
   353e0:	mov	r3, #0
   353e4:	mov	r2, #48	; 0x30
   353e8:	mov	r0, r1
   353ec:	strb	r2, [r1]
   353f0:	strb	r3, [r0, #1]!
   353f4:	ldr	r3, [sp, #176]	; 0xb0
   353f8:	sub	r0, r0, r3
   353fc:	add	sp, sp, #332	; 0x14c
   35400:	ldrd	r4, [sp]
   35404:	ldrd	r6, [sp, #8]
   35408:	ldrd	r8, [sp, #16]
   3540c:	ldrd	sl, [sp, #24]
   35410:	add	sp, sp, #32
   35414:	pop	{pc}		; (ldr pc, [sp], #4)
   35418:	movw	r1, #34552	; 0x86f8
   3541c:	movt	r1, #4
   35420:	vmov	r3, s0
   35424:	mov	r2, r5
   35428:	bl	145d8 <sprintf@plt>
   3542c:	mov	r0, #21
   35430:	b	353fc <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   35434:	ldr	r0, [sp, #44]	; 0x2c
   35438:	movw	r3, #28265	; 0x6e69
   3543c:	movt	r3, #102	; 0x66
   35440:	str	r3, [r0], #3
   35444:	ldr	r3, [sp, #176]	; 0xb0
   35448:	sub	r0, r0, r3
   3544c:	b	353fc <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   35450:	ldrd	r2, [sp, #80]	; 0x50
   35454:	orrs	r1, r2, r3
   35458:	beq	35a48 <flatcc_json_parser_struct_as_root@@Base+0x2528>
   3545c:	movw	r6, #64461	; 0xfbcd
   35460:	movt	r6, #65535	; 0xffff
   35464:	movw	lr, #64462	; 0xfbce
   35468:	movt	lr, #65535	; 0xffff
   3546c:	mov	r0, r2
   35470:	mov	r5, r3
   35474:	b	34a08 <flatcc_json_parser_struct_as_root@@Base+0x14e8>
   35478:	mov	r2, sl
   3547c:	mov	r3, fp
   35480:	strd	r2, [sp, #144]	; 0x90
   35484:	ldrd	r2, [sp, #144]	; 0x90
   35488:	cmp	r3, #0
   3548c:	cmpeq	r2, #1
   35490:	bls	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   35494:	ldrd	r0, [sp, #56]	; 0x38
   35498:	subs	ip, r0, #4
   3549c:	sbc	r1, r1, #0
   354a0:	str	ip, [sp, #256]	; 0x100
   354a4:	str	r1, [sp, #260]	; 0x104
   354a8:	add	r1, sp, #256	; 0x100
   354ac:	ldrd	r0, [r1]
   354b0:	cmp	r1, r3
   354b4:	cmpeq	r0, r2
   354b8:	bcs	35790 <flatcc_json_parser_struct_as_root@@Base+0x2270>
   354bc:	movw	r1, #34608	; 0x8730
   354c0:	movt	r1, #4
   354c4:	ldrd	r2, [sp, #24]
   354c8:	ldr	r4, [sp, #44]	; 0x2c
   354cc:	mov	r0, r4
   354d0:	bl	145d8 <sprintf@plt>
   354d4:	ldr	r2, [sp, #176]	; 0xb0
   354d8:	sub	r3, r4, r2
   354dc:	add	r0, r3, r0
   354e0:	b	353fc <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   354e4:	subs	r2, r0, r4
   354e8:	mov	sl, r6
   354ec:	sbc	r6, r1, r5
   354f0:	cmp	r5, r1
   354f4:	ldr	r1, [sp, #48]	; 0x30
   354f8:	sub	r3, r3, #1
   354fc:	cmpeq	r4, r0
   35500:	uxtb	r3, r3
   35504:	mov	fp, r7
   35508:	strb	r3, [r1]
   3550c:	bhi	35778 <flatcc_json_parser_struct_as_root@@Base+0x2258>
   35510:	mov	r0, r2
   35514:	mov	r1, r6
   35518:	b	35174 <flatcc_json_parser_struct_as_root@@Base+0x1c54>
   3551c:	str	lr, [sp, #16]
   35520:	mov	r7, r4
   35524:	ldr	lr, [sp, #180]	; 0xb4
   35528:	ldrd	sl, [sp, #32]
   3552c:	ldrd	r0, [sp, #112]	; 0x70
   35530:	subs	r6, sl, r0
   35534:	sbc	r2, fp, r1
   35538:	cmp	r1, fp
   3553c:	ldr	r1, [sp, #120]	; 0x78
   35540:	cmpeq	r0, sl
   35544:	str	r6, [sp, #64]	; 0x40
   35548:	ldr	r0, [sp, #168]	; 0xa8
   3554c:	movhi	r5, #1
   35550:	movls	r5, #0
   35554:	cmp	r1, r0
   35558:	orrne	r5, r5, #1
   3555c:	cmp	r5, #0
   35560:	bne	35a0c <flatcc_json_parser_struct_as_root@@Base+0x24ec>
   35564:	subs	r4, r6, #1
   35568:	ldrd	sl, [sp]
   3556c:	lsl	r0, ip, r9
   35570:	str	r4, [sp, #136]	; 0x88
   35574:	sbc	r4, r2, #0
   35578:	str	r4, [sp, #140]	; 0x8c
   3557c:	ldr	r4, [sp, #48]	; 0x30
   35580:	lsl	r1, ip, r4
   35584:	ldrd	r4, [sp, #136]	; 0x88
   35588:	orr	r1, r1, ip, lsr r8
   3558c:	cmp	r5, fp
   35590:	cmpeq	r4, sl
   35594:	bls	359f4 <flatcc_json_parser_struct_as_root@@Base+0x24d4>
   35598:	ldrd	r8, [sp, #56]	; 0x38
   3559c:	subs	ip, r8, sl
   355a0:	str	ip, [sp, #216]	; 0xd8
   355a4:	sbc	ip, r9, fp
   355a8:	str	ip, [sp, #220]	; 0xdc
   355ac:	ldrd	r8, [sp, #216]	; 0xd8
   355b0:	cmp	r1, r9
   355b4:	cmpeq	r0, r8
   355b8:	bhi	35478 <flatcc_json_parser_struct_as_root@@Base+0x1f58>
   355bc:	subs	ip, r8, r0
   355c0:	str	r7, [sp]
   355c4:	ldrd	r4, [sp, #136]	; 0x88
   355c8:	str	r2, [sp, #8]
   355cc:	str	ip, [sp, #224]	; 0xe0
   355d0:	sbc	ip, r9, r1
   355d4:	str	ip, [sp, #228]	; 0xe4
   355d8:	ldrd	r6, [sp, #224]	; 0xe0
   355dc:	adds	r8, r0, sl
   355e0:	adc	r9, r1, fp
   355e4:	cmp	r5, r9
   355e8:	cmpeq	r4, r8
   355ec:	bhi	35728 <flatcc_json_parser_struct_as_root@@Base+0x2208>
   355f0:	ldr	r7, [sp]
   355f4:	strd	sl, [sp]
   355f8:	mov	sl, r8
   355fc:	mov	r8, r4
   35600:	ldr	r4, [sp]
   35604:	mov	fp, r9
   35608:	strd	sl, [sp, #144]	; 0x90
   3560c:	ldr	r2, [sp, #8]
   35610:	subs	ip, r8, r4
   35614:	ldr	r4, [sp, #4]
   35618:	ldrd	r8, [sp, #112]	; 0x70
   3561c:	str	ip, [sp, #88]	; 0x58
   35620:	sbc	ip, r5, r4
   35624:	str	ip, [sp, #92]	; 0x5c
   35628:	adds	ip, r8, #1
   3562c:	adc	r5, r9, #0
   35630:	ldrd	r8, [sp, #32]
   35634:	subs	ip, ip, r8
   35638:	sbc	r5, r5, r9
   3563c:	adds	ip, ip, sl
   35640:	ldrd	r8, [sp, #88]	; 0x58
   35644:	str	ip, [sp, #96]	; 0x60
   35648:	adc	ip, r5, fp
   3564c:	str	ip, [sp, #100]	; 0x64
   35650:	ldrd	sl, [sp, #96]	; 0x60
   35654:	cmp	r9, fp
   35658:	cmpeq	r8, sl
   3565c:	subcs	r3, r3, #1
   35660:	strbcs	r3, [lr]
   35664:	bcc	35980 <flatcc_json_parser_struct_as_root@@Base+0x2460>
   35668:	ldr	r3, [sp, #64]	; 0x40
   3566c:	adds	r3, r3, #1
   35670:	str	r3, [sp, #232]	; 0xe8
   35674:	adc	r3, r2, #0
   35678:	str	r3, [sp, #236]	; 0xec
   3567c:	ldrd	r2, [sp, #144]	; 0x90
   35680:	ldrd	r4, [sp, #232]	; 0xe8
   35684:	cmp	r5, r3
   35688:	cmpeq	r4, r2
   3568c:	bls	35484 <flatcc_json_parser_struct_as_root@@Base+0x1f64>
   35690:	ldrd	r8, [sp, #56]	; 0x38
   35694:	subs	ip, r8, r2
   35698:	str	ip, [sp, #280]	; 0x118
   3569c:	sbc	ip, r9, r3
   356a0:	str	ip, [sp, #284]	; 0x11c
   356a4:	add	ip, sp, #280	; 0x118
   356a8:	ldrd	r8, [ip]
   356ac:	cmp	r1, r9
   356b0:	cmpeq	r0, r8
   356b4:	bhi	35484 <flatcc_json_parser_struct_as_root@@Base+0x1f64>
   356b8:	adds	ip, r0, r2
   356bc:	adc	r3, r1, r3
   356c0:	str	ip, [sp, #272]	; 0x110
   356c4:	str	r3, [sp, #276]	; 0x114
   356c8:	add	r3, sp, #272	; 0x110
   356cc:	ldrd	r2, [r3]
   356d0:	cmp	r5, r3
   356d4:	cmpeq	r4, r2
   356d8:	bhi	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   356dc:	ldrd	r0, [sp, #144]	; 0x90
   356e0:	subs	ip, r4, r0
   356e4:	sbc	r1, r5, r1
   356e8:	str	ip, [sp, #312]	; 0x138
   356ec:	str	r1, [sp, #316]	; 0x13c
   356f0:	add	r1, sp, #272	; 0x110
   356f4:	ldrd	r0, [r1]
   356f8:	subs	ip, r0, r4
   356fc:	sbc	r3, r1, r5
   35700:	add	r1, sp, #320	; 0x140
   35704:	str	ip, [sp, #320]	; 0x140
   35708:	str	r3, [sp, #324]	; 0x144
   3570c:	add	r3, sp, #312	; 0x138
   35710:	ldrd	r0, [r1]
   35714:	ldrd	r2, [r3]
   35718:	cmp	r3, r1
   3571c:	cmpeq	r2, r0
   35720:	bls	35484 <flatcc_json_parser_struct_as_root@@Base+0x1f64>
   35724:	b	354bc <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   35728:	subs	ip, r6, r0
   3572c:	sub	r3, r3, #1
   35730:	uxtb	r3, r3
   35734:	sbc	r2, r7, r1
   35738:	cmp	r1, r7
   3573c:	mov	sl, r8
   35740:	cmpeq	r0, r6
   35744:	mov	fp, r9
   35748:	strb	r3, [lr]
   3574c:	bhi	35784 <flatcc_json_parser_struct_as_root@@Base+0x2264>
   35750:	mov	r6, ip
   35754:	mov	r7, r2
   35758:	b	355dc <flatcc_json_parser_struct_as_root@@Base+0x20bc>
   3575c:	lsl	r3, r5, #2
   35760:	sub	r6, lr, #2
   35764:	lsl	r2, r0, #2
   35768:	orr	r3, r3, r0, lsr #30
   3576c:	subs	r2, r2, #1
   35770:	sbc	lr, r3, #0
   35774:	b	34b94 <flatcc_json_parser_struct_as_root@@Base+0x1674>
   35778:	mov	r5, ip
   3577c:	ldr	r4, [sp, #32]
   35780:	b	352ac <flatcc_json_parser_struct_as_root@@Base+0x1d8c>
   35784:	strd	r8, [sp, #144]	; 0x90
   35788:	ldr	r7, [sp]
   3578c:	b	35484 <flatcc_json_parser_struct_as_root@@Base+0x1f64>
   35790:	ldr	r3, [sp, #16]
   35794:	mov	r4, r7
   35798:	ldr	r2, [sp, #192]	; 0xc0
   3579c:	sub	r5, r3, r2
   357a0:	mov	r3, r2
   357a4:	b	35340 <flatcc_json_parser_struct_as_root@@Base+0x1e20>
   357a8:	add	r0, r5, r4
   357ac:	cmp	r1, r4
   357b0:	cmnge	r0, #2
   357b4:	bge	35998 <flatcc_json_parser_struct_as_root@@Base+0x2478>
   357b8:	cmp	r4, #1
   357bc:	beq	358b0 <flatcc_json_parser_struct_as_root@@Base+0x2390>
   357c0:	cmp	r7, #0
   357c4:	add	r6, r4, #1
   357c8:	sub	r8, r4, r7
   357cc:	ble	357e8 <flatcc_json_parser_struct_as_root@@Base+0x22c8>
   357d0:	ldr	r3, [sp, #44]	; 0x2c
   357d4:	sub	r0, r6, r7
   357d8:	mov	r2, r7
   357dc:	add	r1, r3, r8
   357e0:	add	r0, r3, r0
   357e4:	bl	1450c <memmove@plt>
   357e8:	ldr	r2, [sp, #44]	; 0x2c
   357ec:	add	r5, r7, r5
   357f0:	mov	r3, #46	; 0x2e
   357f4:	cmp	r5, #0
   357f8:	add	lr, r2, r6
   357fc:	strb	r3, [r2, r8]
   35800:	beq	3539c <flatcc_json_parser_struct_as_root@@Base+0x1e7c>
   35804:	mov	r3, #101	; 0x65
   35808:	add	r4, r4, #2
   3580c:	add	lr, r2, r4
   35810:	movge	r0, lr
   35814:	strb	r3, [r2, r6]
   35818:	bge	3582c <flatcc_json_parser_struct_as_root@@Base+0x230c>
   3581c:	mov	r3, #45	; 0x2d
   35820:	rsb	r5, r5, #0
   35824:	add	r0, lr, #1
   35828:	strb	r3, [r2, r4]
   3582c:	movw	ip, #52429	; 0xcccd
   35830:	movt	ip, #52428	; 0xcccc
   35834:	mov	r3, r0
   35838:	mvn	r6, #9
   3583c:	umull	r1, r2, ip, r5
   35840:	lsr	r2, r2, #3
   35844:	mla	r1, r6, r2, r5
   35848:	subs	r5, r2, #0
   3584c:	add	r2, r1, #48	; 0x30
   35850:	strb	r2, [r3], #1
   35854:	bne	3583c <flatcc_json_parser_struct_as_root@@Base+0x231c>
   35858:	sub	r2, r3, r0
   3585c:	strb	r5, [r3]
   35860:	add	r7, r2, r2, lsr #31
   35864:	cmp	r2, #1
   35868:	subgt	r2, r0, #1
   3586c:	movgt	ip, r3
   35870:	asr	r7, r7, #1
   35874:	ble	3589c <flatcc_json_parser_struct_as_root@@Base+0x237c>
   35878:	ldrb	r5, [r2, #1]
   3587c:	add	r1, r2, #2
   35880:	add	r2, r2, #1
   35884:	sub	r1, r1, r0
   35888:	ldrb	r6, [ip, #-1]!
   3588c:	cmp	r1, r7
   35890:	strb	r6, [r2]
   35894:	strb	r5, [ip]
   35898:	blt	35878 <flatcc_json_parser_struct_as_root@@Base+0x2358>
   3589c:	sub	lr, r3, lr
   358a0:	ldr	r3, [sp, #44]	; 0x2c
   358a4:	add	lr, lr, r4
   358a8:	add	lr, r3, lr
   358ac:	b	3539c <flatcc_json_parser_struct_as_root@@Base+0x1e7c>
   358b0:	ldr	r0, [sp, #44]	; 0x2c
   358b4:	mov	r2, #101	; 0x65
   358b8:	mov	r3, #45	; 0x2d
   358bc:	mov	lr, #2
   358c0:	add	r5, r0, #2
   358c4:	add	ip, r0, #3
   358c8:	strb	r2, [r0, #1]
   358cc:	strb	r3, [r0, #2]
   358d0:	movw	r4, #26215	; 0x6667
   358d4:	movt	r4, #26214	; 0x6666
   358d8:	mov	r3, ip
   358dc:	mvn	r6, #9
   358e0:	smull	r2, r0, r4, r1
   358e4:	asr	r2, r1, #31
   358e8:	rsb	r2, r2, r0, asr #2
   358ec:	mla	r0, r6, r2, r1
   358f0:	subs	r1, r2, #0
   358f4:	add	r2, r0, #48	; 0x30
   358f8:	strb	r2, [r3], #1
   358fc:	bne	358e0 <flatcc_json_parser_struct_as_root@@Base+0x23c0>
   35900:	sub	r2, r3, ip
   35904:	strb	r1, [r3]
   35908:	add	r7, r2, r2, lsr #31
   3590c:	cmp	r2, #1
   35910:	subgt	r2, ip, #1
   35914:	movgt	r0, r3
   35918:	asr	r7, r7, #1
   3591c:	ble	35944 <flatcc_json_parser_struct_as_root@@Base+0x2424>
   35920:	ldrb	r4, [r2, #1]
   35924:	add	r1, r2, #2
   35928:	add	r2, r2, #1
   3592c:	sub	r1, r1, ip
   35930:	ldrb	r6, [r0, #-1]!
   35934:	cmp	r7, r1
   35938:	strb	r6, [r2]
   3593c:	strb	r4, [r0]
   35940:	bgt	35920 <flatcc_json_parser_struct_as_root@@Base+0x2400>
   35944:	sub	r3, r3, r5
   35948:	add	lr, r3, lr
   3594c:	ldr	r3, [sp, #44]	; 0x2c
   35950:	add	lr, r3, lr
   35954:	b	3539c <flatcc_json_parser_struct_as_root@@Base+0x1e7c>
   35958:	strd	sl, [sp, #8]
   3595c:	b	351f4 <flatcc_json_parser_struct_as_root@@Base+0x1cd4>
   35960:	mov	r2, r3
   35964:	add	lr, r4, #1
   35968:	mov	r3, #101	; 0x65
   3596c:	add	ip, r2, lr
   35970:	mov	r1, r5
   35974:	mov	r5, ip
   35978:	strb	r3, [r2, r4]
   3597c:	b	358d0 <flatcc_json_parser_struct_as_root@@Base+0x23b0>
   35980:	ldrd	r4, [sp]
   35984:	strd	r4, [sp, #144]	; 0x90
   35988:	b	35668 <flatcc_json_parser_struct_as_root@@Base+0x2148>
   3598c:	mov	r4, #0
   35990:	mov	r6, #1
   35994:	b	34f80 <flatcc_json_parser_struct_as_root@@Base+0x1a60>
   35998:	ldr	r6, [sp, #44]	; 0x2c
   3599c:	rsb	r0, r0, #2
   359a0:	mov	r2, r4
   359a4:	rsb	r5, r5, #2
   359a8:	sub	r5, r5, r4
   359ac:	mov	r1, r6
   359b0:	add	r0, r6, r0
   359b4:	bl	1450c <memmove@plt>
   359b8:	mov	r1, #48	; 0x30
   359bc:	mov	r3, #46	; 0x2e
   359c0:	cmp	r5, #2
   359c4:	strb	r1, [r6]
   359c8:	strb	r3, [r6, #1]
   359cc:	ble	35a04 <flatcc_json_parser_struct_as_root@@Base+0x24e4>
   359d0:	sub	r2, r5, #2
   359d4:	add	r0, r6, #2
   359d8:	bl	1459c <memset@plt>
   359dc:	b	35390 <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   359e0:	mov	r7, #1
   359e4:	ldr	lr, [sp, #44]	; 0x2c
   359e8:	b	35528 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   359ec:	strd	sl, [sp, #8]
   359f0:	b	352ac <flatcc_json_parser_struct_as_root@@Base+0x1d8c>
   359f4:	mov	r4, sl
   359f8:	mov	r5, fp
   359fc:	strd	r4, [sp, #144]	; 0x90
   35a00:	b	35668 <flatcc_json_parser_struct_as_root@@Base+0x2148>
   35a04:	mov	r5, #2
   35a08:	b	35390 <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   35a0c:	bl	34554 <flatcc_json_parser_struct_as_root@@Base+0x1034>
   35a10:	movw	r1, #34460	; 0x869c
   35a14:	movt	r1, #4
   35a18:	ldr	r3, [pc, #-2848]	; 34f00 <flatcc_json_parser_struct_as_root@@Base+0x19e0>
   35a1c:	movw	r0, #34548	; 0x86f4
   35a20:	movt	r0, #4
   35a24:	mov	r2, #189	; 0xbd
   35a28:	bl	145f0 <__assert_fail@plt>
   35a2c:	movw	r1, #34460	; 0x869c
   35a30:	movt	r1, #4
   35a34:	ldr	r3, [pc, #-2872]	; 34f04 <flatcc_json_parser_struct_as_root@@Base+0x19e4>
   35a38:	movw	r0, #34568	; 0x8708
   35a3c:	movt	r0, #4
   35a40:	mov	r2, #138	; 0x8a
   35a44:	bl	145f0 <__assert_fail@plt>
   35a48:	bl	3452c <flatcc_json_parser_struct_as_root@@Base+0x100c>

00035a4c <flatcc_json_printer_error_string@@Base>:
   35a4c:	cmp	r0, #3
   35a50:	bhi	35a68 <flatcc_json_printer_error_string@@Base+0x1c>
   35a54:	movw	r3, #32560	; 0x7f30
   35a58:	movt	r3, #4
   35a5c:	add	r3, r3, r0, lsl #2
   35a60:	ldr	r0, [r3, #1716]	; 0x6b4
   35a64:	bx	lr
   35a68:	movw	r0, #28116	; 0x6dd4
   35a6c:	movt	r0, #4
   35a70:	bx	lr

00035a74 <flatcc_json_printer_fmt_float@@Base>:
   35a74:	vcvt.f64.f32	d0, s0
   35a78:	b	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>

00035a7c <flatcc_json_printer_fmt_double@@Base>:
   35a7c:	b	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>

00035a80 <flatcc_json_printer_fmt_bool@@Base>:
   35a80:	cmp	r1, #0
   35a84:	mov	r2, r0
   35a88:	bne	35aac <flatcc_json_printer_fmt_bool@@Base+0x2c>
   35a8c:	movw	r3, #10788	; 0x2a24
   35a90:	movt	r3, #4
   35a94:	ldrb	r1, [r3, #4]
   35a98:	mov	r0, #5
   35a9c:	ldr	r3, [r3]
   35aa0:	str	r3, [r2]
   35aa4:	strb	r1, [r2, #4]
   35aa8:	bx	lr
   35aac:	movw	r3, #10780	; 0x2a1c
   35ab0:	movt	r3, #4
   35ab4:	ldr	r3, [r3]
   35ab8:	mov	r0, #4
   35abc:	str	r3, [r2]
   35ac0:	bx	lr

00035ac4 <flatcc_json_printer_string@@Base>:
   35ac4:	b	3457c <flatcc_json_parser_struct_as_root@@Base+0x105c>

00035ac8 <flatcc_json_printer_write@@Base>:
   35ac8:	strd	r4, [sp, #-16]!
   35acc:	ldr	ip, [r0, #16]
   35ad0:	str	r6, [sp, #8]
   35ad4:	str	lr, [sp, #12]
   35ad8:	ldr	lr, [r0, #20]
   35adc:	add	r4, lr, r2
   35ae0:	cmp	ip, r4
   35ae4:	bhi	35afc <flatcc_json_printer_write@@Base+0x34>
   35ae8:	ldrd	r4, [sp]
   35aec:	ldr	r6, [sp, #8]
   35af0:	ldr	lr, [sp, #12]
   35af4:	add	sp, sp, #16
   35af8:	b	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   35afc:	mov	r4, r0
   35b00:	mov	r0, lr
   35b04:	mov	r5, r2
   35b08:	bl	14524 <memcpy@plt>
   35b0c:	ldr	ip, [r4, #20]
   35b10:	ldr	r6, [sp, #8]
   35b14:	add	ip, ip, r5
   35b18:	str	ip, [r4, #20]
   35b1c:	ldrd	r4, [sp]
   35b20:	add	sp, sp, #12
   35b24:	pop	{pc}		; (ldr pc, [sp], #4)

00035b28 <flatcc_json_printer_nl@@Base>:
   35b28:	ldr	r2, [r0, #20]
   35b2c:	mov	r1, #10
   35b30:	add	ip, r2, #1
   35b34:	str	ip, [r0, #20]
   35b38:	strb	r1, [r2]
   35b3c:	ldr	r2, [r0, #16]
   35b40:	ldr	r1, [r0, #20]
   35b44:	cmp	r1, r2
   35b48:	bcc	35b58 <flatcc_json_printer_nl@@Base+0x30>
   35b4c:	mov	r1, #0
   35b50:	ldr	r3, [r0, #44]	; 0x2c
   35b54:	bx	r3
   35b58:	bx	lr

00035b5c <flatcc_json_printer_char@@Base>:
   35b5c:	ldr	r3, [r0, #20]
   35b60:	add	r2, r3, #1
   35b64:	str	r2, [r0, #20]
   35b68:	strb	r1, [r3]
   35b6c:	bx	lr

00035b70 <flatcc_json_printer_indent@@Base>:
   35b70:	strd	r4, [sp, #-16]!
   35b74:	ldr	ip, [r0, #16]
   35b78:	ldr	r2, [r0, #20]
   35b7c:	ldr	r5, [r0, #32]
   35b80:	str	r6, [sp, #8]
   35b84:	str	lr, [sp, #12]
   35b88:	ldrb	r1, [r0, #25]
   35b8c:	mul	r5, r5, r1
   35b90:	add	r1, r2, r5
   35b94:	cmp	ip, r1
   35b98:	bcs	35bb4 <flatcc_json_printer_indent@@Base+0x44>
   35b9c:	mov	r1, r5
   35ba0:	ldrd	r4, [sp]
   35ba4:	ldr	r6, [sp, #8]
   35ba8:	ldr	lr, [sp, #12]
   35bac:	add	sp, sp, #16
   35bb0:	b	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   35bb4:	mov	r4, r0
   35bb8:	mov	r1, #32
   35bbc:	mov	r0, r2
   35bc0:	mov	r2, r5
   35bc4:	bl	1459c <memset@plt>
   35bc8:	ldr	r3, [r4, #20]
   35bcc:	ldr	r6, [sp, #8]
   35bd0:	add	r5, r3, r5
   35bd4:	str	r5, [r4, #20]
   35bd8:	ldrd	r4, [sp]
   35bdc:	add	sp, sp, #12
   35be0:	pop	{pc}		; (ldr pc, [sp], #4)

00035be4 <flatcc_json_printer_add_level@@Base>:
   35be4:	ldr	r3, [r0, #32]
   35be8:	add	r1, r3, r1
   35bec:	str	r1, [r0, #32]
   35bf0:	bx	lr

00035bf4 <flatcc_json_printer_get_level@@Base>:
   35bf4:	ldr	r0, [r0, #32]
   35bf8:	bx	lr

00035bfc <flatcc_json_printer_uint8@@Base>:
   35bfc:	cmp	r1, #99	; 0x63
   35c00:	str	r4, [sp, #-8]!
   35c04:	str	lr, [sp, #4]
   35c08:	ldr	r2, [r0, #20]
   35c0c:	bhi	35c44 <flatcc_json_printer_uint8@@Base+0x48>
   35c10:	cmp	r1, #9
   35c14:	bhi	35c94 <flatcc_json_printer_uint8@@Base+0x98>
   35c18:	add	r1, r1, #48	; 0x30
   35c1c:	mov	r3, #0
   35c20:	mov	lr, #1
   35c24:	strb	r1, [r2]
   35c28:	strb	r3, [r2, #1]
   35c2c:	ldr	r3, [r0, #20]
   35c30:	ldr	r4, [sp]
   35c34:	add	sp, sp, #4
   35c38:	add	r3, r3, lr
   35c3c:	str	r3, [r0, #20]
   35c40:	pop	{pc}		; (ldr pc, [sp], #4)
   35c44:	movw	ip, #34079	; 0x851f
   35c48:	movt	ip, #20971	; 0x51eb
   35c4c:	mov	r4, #100	; 0x64
   35c50:	mov	lr, #0
   35c54:	umull	r3, ip, ip, r1
   35c58:	movw	r3, #32560	; 0x7f30
   35c5c:	movt	r3, #4
   35c60:	strb	lr, [r2, #3]
   35c64:	mov	lr, #3
   35c68:	lsr	ip, ip, #5
   35c6c:	mls	r1, r4, ip, r1
   35c70:	add	ip, ip, #48	; 0x30
   35c74:	uxtb	r1, r1
   35c78:	ldrb	r4, [r3, r1, lsl #1]
   35c7c:	add	r3, r3, r1, lsl #1
   35c80:	strb	r4, [r2, #1]
   35c84:	ldrb	r3, [r3, #1]
   35c88:	strb	ip, [r2]
   35c8c:	strb	r3, [r2, #2]
   35c90:	b	35c2c <flatcc_json_printer_uint8@@Base+0x30>
   35c94:	mov	ip, #0
   35c98:	sxth	r1, r1
   35c9c:	movw	r3, #32560	; 0x7f30
   35ca0:	movt	r3, #4
   35ca4:	strb	ip, [r2, #2]
   35ca8:	add	ip, r3, r1, lsl #1
   35cac:	mov	lr, #2
   35cb0:	ldrb	r3, [r3, r1, lsl #1]
   35cb4:	strb	r3, [r2]
   35cb8:	ldrb	r3, [ip, #1]
   35cbc:	strb	r3, [r2, #1]
   35cc0:	b	35c2c <flatcc_json_printer_uint8@@Base+0x30>

00035cc4 <flatcc_json_printer_uint16@@Base>:
   35cc4:	str	r4, [sp, #-8]!
   35cc8:	mov	r4, r0
   35ccc:	mov	r0, r1
   35cd0:	ldr	r1, [r4, #20]
   35cd4:	str	lr, [sp, #4]
   35cd8:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   35cdc:	ldr	r3, [r4, #20]
   35ce0:	add	r0, r3, r0
   35ce4:	str	r0, [r4, #20]
   35ce8:	ldr	r4, [sp]
   35cec:	add	sp, sp, #4
   35cf0:	pop	{pc}		; (ldr pc, [sp], #4)

00035cf4 <flatcc_json_printer_uint32@@Base>:
   35cf4:	str	r4, [sp, #-8]!
   35cf8:	mov	r4, r0
   35cfc:	mov	r0, r1
   35d00:	ldr	r1, [r4, #20]
   35d04:	str	lr, [sp, #4]
   35d08:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   35d0c:	ldr	r3, [r4, #20]
   35d10:	add	r0, r3, r0
   35d14:	str	r0, [r4, #20]
   35d18:	ldr	r4, [sp]
   35d1c:	add	sp, sp, #4
   35d20:	pop	{pc}		; (ldr pc, [sp], #4)

00035d24 <flatcc_json_printer_uint64@@Base>:
   35d24:	str	r4, [sp, #-8]!
   35d28:	mov	r4, r0
   35d2c:	mov	r1, r3
   35d30:	mov	r0, r2
   35d34:	ldr	r2, [r4, #20]
   35d38:	str	lr, [sp, #4]
   35d3c:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   35d40:	ldr	r3, [r4, #20]
   35d44:	add	r0, r3, r0
   35d48:	str	r0, [r4, #20]
   35d4c:	ldr	r4, [sp]
   35d50:	add	sp, sp, #4
   35d54:	pop	{pc}		; (ldr pc, [sp], #4)

00035d58 <flatcc_json_printer_int8@@Base>:
   35d58:	cmp	r1, #0
   35d5c:	lsr	r2, r1, #31
   35d60:	uxtb	r1, r1
   35d64:	strd	r4, [sp, #-16]!
   35d68:	str	r6, [sp, #8]
   35d6c:	str	lr, [sp, #12]
   35d70:	ldr	r4, [r0, #20]
   35d74:	bge	35d90 <flatcc_json_printer_int8@@Base+0x38>
   35d78:	mov	ip, r4
   35d7c:	mov	r3, #45	; 0x2d
   35d80:	rsb	r1, r1, #0
   35d84:	uxtb	r1, r1
   35d88:	strb	r3, [ip], #1
   35d8c:	mov	r4, ip
   35d90:	cmp	r1, #99	; 0x63
   35d94:	bhi	35dd4 <flatcc_json_printer_int8@@Base+0x7c>
   35d98:	cmp	r1, #9
   35d9c:	bhi	35e24 <flatcc_json_printer_int8@@Base+0xcc>
   35da0:	add	r1, r1, #48	; 0x30
   35da4:	mov	lr, #0
   35da8:	mov	r5, #1
   35dac:	strb	r1, [r4]
   35db0:	strb	lr, [r4, #1]
   35db4:	ldr	r3, [r0, #20]
   35db8:	add	r2, r2, r5
   35dbc:	ldrd	r4, [sp]
   35dc0:	ldr	r6, [sp, #8]
   35dc4:	add	sp, sp, #12
   35dc8:	add	r3, r3, r2
   35dcc:	str	r3, [r0, #20]
   35dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   35dd4:	movw	ip, #34079	; 0x851f
   35dd8:	movt	ip, #20971	; 0x51eb
   35ddc:	mov	r3, #100	; 0x64
   35de0:	mov	lr, #0
   35de4:	umull	r5, ip, ip, r1
   35de8:	mov	r6, #49	; 0x31
   35dec:	mov	r5, #3
   35df0:	strb	lr, [r4, #3]
   35df4:	movw	lr, #32560	; 0x7f30
   35df8:	movt	lr, #4
   35dfc:	lsr	ip, ip, #5
   35e00:	mls	r1, r3, ip, r1
   35e04:	uxtb	r1, r1
   35e08:	ldrb	r3, [lr, r1, lsl #1]
   35e0c:	add	r1, lr, r1, lsl #1
   35e10:	strb	r3, [r4, #1]
   35e14:	ldrb	r3, [r1, #1]
   35e18:	strb	r6, [r4]
   35e1c:	strb	r3, [r4, #2]
   35e20:	b	35db4 <flatcc_json_printer_int8@@Base+0x5c>
   35e24:	mov	r3, #0
   35e28:	sxth	r1, r1
   35e2c:	movw	lr, #32560	; 0x7f30
   35e30:	movt	lr, #4
   35e34:	strb	r3, [r4, #2]
   35e38:	add	r3, lr, r1, lsl #1
   35e3c:	mov	r5, #2
   35e40:	ldrb	r1, [lr, r1, lsl #1]
   35e44:	strb	r1, [r4]
   35e48:	ldrb	r3, [r3, #1]
   35e4c:	strb	r3, [r4, #1]
   35e50:	b	35db4 <flatcc_json_printer_int8@@Base+0x5c>

00035e54 <flatcc_json_printer_int16@@Base>:
   35e54:	cmp	r1, #0
   35e58:	strd	r4, [sp, #-16]!
   35e5c:	mov	r4, r0
   35e60:	lsr	r5, r1, #31
   35e64:	uxth	r0, r1
   35e68:	ldr	r1, [r4, #20]
   35e6c:	str	r6, [sp, #8]
   35e70:	str	lr, [sp, #12]
   35e74:	bge	35e88 <flatcc_json_printer_int16@@Base+0x34>
   35e78:	rsb	r0, r0, #0
   35e7c:	mov	r3, #45	; 0x2d
   35e80:	uxth	r0, r0
   35e84:	strb	r3, [r1], #1
   35e88:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   35e8c:	ldr	r3, [r4, #20]
   35e90:	add	r0, r5, r0
   35e94:	ldr	r6, [sp, #8]
   35e98:	add	r3, r3, r0
   35e9c:	str	r3, [r4, #20]
   35ea0:	ldrd	r4, [sp]
   35ea4:	add	sp, sp, #12
   35ea8:	pop	{pc}		; (ldr pc, [sp], #4)

00035eac <flatcc_json_printer_int32@@Base>:
   35eac:	cmp	r1, #0
   35eb0:	mov	r3, r1
   35eb4:	strd	r4, [sp, #-16]!
   35eb8:	lsr	r5, r1, #31
   35ebc:	mov	r4, r0
   35ec0:	ldr	r1, [r0, #20]
   35ec4:	str	r6, [sp, #8]
   35ec8:	str	lr, [sp, #12]
   35ecc:	bge	35edc <flatcc_json_printer_int32@@Base+0x30>
   35ed0:	mov	r2, #45	; 0x2d
   35ed4:	rsb	r3, r3, #0
   35ed8:	strb	r2, [r1], #1
   35edc:	mov	r0, r3
   35ee0:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   35ee4:	ldr	r3, [r4, #20]
   35ee8:	add	r0, r5, r0
   35eec:	ldr	r6, [sp, #8]
   35ef0:	add	r3, r3, r0
   35ef4:	str	r3, [r4, #20]
   35ef8:	ldrd	r4, [sp]
   35efc:	add	sp, sp, #12
   35f00:	pop	{pc}		; (ldr pc, [sp], #4)

00035f04 <flatcc_json_printer_int64@@Base>:
   35f04:	cmp	r2, #0
   35f08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35f0c:	mov	r5, r3
   35f10:	sbcs	r3, r3, #0
   35f14:	mov	r4, r2
   35f18:	ldr	r2, [r0, #20]
   35f1c:	strd	r6, [sp, #8]
   35f20:	mov	r6, r0
   35f24:	lsr	r7, r5, #31
   35f28:	str	r8, [sp, #16]
   35f2c:	str	lr, [sp, #20]
   35f30:	bge	35f44 <flatcc_json_printer_int64@@Base+0x40>
   35f34:	rsbs	r4, r4, #0
   35f38:	mov	r3, #45	; 0x2d
   35f3c:	rsc	r5, r5, #0
   35f40:	strb	r3, [r2], #1
   35f44:	mov	r0, r4
   35f48:	mov	r1, r5
   35f4c:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   35f50:	ldr	r3, [r6, #20]
   35f54:	add	r0, r7, r0
   35f58:	ldrd	r4, [sp]
   35f5c:	ldr	r8, [sp, #16]
   35f60:	add	r3, r3, r0
   35f64:	str	r3, [r6, #20]
   35f68:	ldrd	r6, [sp, #8]
   35f6c:	add	sp, sp, #20
   35f70:	pop	{pc}		; (ldr pc, [sp], #4)

00035f74 <flatcc_json_printer_float@@Base>:
   35f74:	vcvt.f64.f32	d0, s0
   35f78:	str	r4, [sp, #-8]!
   35f7c:	mov	r4, r0
   35f80:	ldr	r0, [r0, #20]
   35f84:	str	lr, [sp, #4]
   35f88:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   35f8c:	ldr	r3, [r4, #20]
   35f90:	add	r0, r3, r0
   35f94:	str	r0, [r4, #20]
   35f98:	ldr	r4, [sp]
   35f9c:	add	sp, sp, #4
   35fa0:	pop	{pc}		; (ldr pc, [sp], #4)

00035fa4 <flatcc_json_printer_double@@Base>:
   35fa4:	str	r4, [sp, #-8]!
   35fa8:	mov	r4, r0
   35fac:	ldr	r0, [r0, #20]
   35fb0:	str	lr, [sp, #4]
   35fb4:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   35fb8:	ldr	r3, [r4, #20]
   35fbc:	add	r0, r3, r0
   35fc0:	str	r0, [r4, #20]
   35fc4:	ldr	r4, [sp]
   35fc8:	add	sp, sp, #4
   35fcc:	pop	{pc}		; (ldr pc, [sp], #4)

00035fd0 <flatcc_json_printer_enum@@Base>:
   35fd0:	ldr	r3, [r0, #20]
   35fd4:	mov	ip, #34	; 0x22
   35fd8:	strd	r4, [sp, #-16]!
   35fdc:	mov	r4, r0
   35fe0:	str	r6, [sp, #8]
   35fe4:	str	lr, [sp, #12]
   35fe8:	strb	ip, [r3]
   35fec:	ldrb	ip, [r0, #26]
   35ff0:	ldr	lr, [r0, #16]
   35ff4:	ldr	r3, [r0, #20]
   35ff8:	cmp	ip, #0
   35ffc:	addeq	r3, r3, #1
   36000:	add	ip, r3, r2
   36004:	cmp	lr, ip
   36008:	str	r3, [r0, #20]
   3600c:	bls	36054 <flatcc_json_printer_enum@@Base+0x84>
   36010:	mov	r0, r3
   36014:	mov	r5, r2
   36018:	bl	14524 <memcpy@plt>
   3601c:	ldr	r2, [r4, #20]
   36020:	add	r2, r2, r5
   36024:	str	r2, [r4, #20]
   36028:	mov	r3, #34	; 0x22
   3602c:	strb	r3, [r2]
   36030:	ldrb	r2, [r4, #26]
   36034:	ldr	r3, [r4, #20]
   36038:	ldr	r6, [sp, #8]
   3603c:	cmp	r2, #0
   36040:	addeq	r3, r3, #1
   36044:	str	r3, [r4, #20]
   36048:	ldrd	r4, [sp]
   3604c:	add	sp, sp, #12
   36050:	pop	{pc}		; (ldr pc, [sp], #4)
   36054:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   36058:	ldr	r2, [r4, #20]
   3605c:	b	36028 <flatcc_json_printer_enum@@Base+0x58>

00036060 <flatcc_json_printer_delimit_enum_flags@@Base>:
   36060:	ldr	r3, [r0, #20]
   36064:	mov	ip, #34	; 0x22
   36068:	adds	r1, r1, #0
   3606c:	movne	r1, #1
   36070:	ldrb	r2, [r0, #26]
   36074:	strb	ip, [r3]
   36078:	ldr	r3, [r0, #20]
   3607c:	cmp	r2, #0
   36080:	moveq	r1, #1
   36084:	add	r3, r3, r1
   36088:	str	r3, [r0, #20]
   3608c:	bx	lr

00036090 <flatcc_json_printer_enum_flag@@Base>:
   36090:	strd	r4, [sp, #-16]!
   36094:	mov	r5, #32
   36098:	mov	r4, r2
   3609c:	str	r6, [sp, #8]
   360a0:	str	lr, [sp, #12]
   360a4:	ldr	lr, [r0, #20]
   360a8:	strb	r5, [lr]
   360ac:	ldr	r5, [r0, #16]
   360b0:	ldr	lr, [r0, #20]
   360b4:	cmp	r1, #0
   360b8:	addgt	lr, lr, #1
   360bc:	add	r2, lr, r3
   360c0:	cmp	r5, r2
   360c4:	str	lr, [r0, #20]
   360c8:	bhi	360e8 <flatcc_json_printer_enum_flag@@Base+0x58>
   360cc:	mov	r1, r4
   360d0:	mov	r2, r3
   360d4:	ldrd	r4, [sp]
   360d8:	ldr	r6, [sp, #8]
   360dc:	ldr	lr, [sp, #12]
   360e0:	add	sp, sp, #16
   360e4:	b	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   360e8:	mov	r1, r4
   360ec:	mov	r2, r3
   360f0:	mov	r4, r0
   360f4:	mov	r0, lr
   360f8:	mov	r5, r3
   360fc:	bl	14524 <memcpy@plt>
   36100:	ldr	r3, [r4, #20]
   36104:	ldr	r6, [sp, #8]
   36108:	add	r3, r3, r5
   3610c:	str	r3, [r4, #20]
   36110:	ldrd	r4, [sp]
   36114:	add	sp, sp, #12
   36118:	pop	{pc}		; (ldr pc, [sp], #4)

0003611c <flatcc_json_printer_string_field@@Base>:
   3611c:	ldr	ip, [r1, #8]
   36120:	add	r2, r2, #2
   36124:	lsl	r2, r2, #1
   36128:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3612c:	strd	r6, [sp, #8]
   36130:	strd	r8, [sp, #16]
   36134:	str	sl, [sp, #24]
   36138:	cmp	r2, ip
   3613c:	str	lr, [sp, #28]
   36140:	ldr	r7, [sp, #32]
   36144:	bge	36270 <flatcc_json_printer_string_field@@Base+0x154>
   36148:	ldr	ip, [r1, #4]
   3614c:	ldrh	r5, [ip, r2]
   36150:	cmp	r5, #0
   36154:	beq	36270 <flatcc_json_printer_string_field@@Base+0x154>
   36158:	ldr	r6, [r1]
   3615c:	adds	r8, r6, r5
   36160:	beq	36270 <flatcc_json_printer_string_field@@Base+0x154>
   36164:	ldr	ip, [r1, #16]
   36168:	ldr	r2, [r0, #20]
   3616c:	cmp	ip, #0
   36170:	add	ip, ip, #1
   36174:	str	ip, [r1, #16]
   36178:	beq	36190 <flatcc_json_printer_string_field@@Base+0x74>
   3617c:	add	ip, r2, #1
   36180:	mov	r1, #44	; 0x2c
   36184:	str	ip, [r0, #20]
   36188:	strb	r1, [r2]
   3618c:	ldr	r2, [r0, #20]
   36190:	mov	r9, r3
   36194:	mov	r4, r0
   36198:	ldrb	r1, [r0, #25]
   3619c:	cmp	r1, #0
   361a0:	bne	362b0 <flatcc_json_printer_string_field@@Base+0x194>
   361a4:	ldr	r3, [r0, #16]
   361a8:	cmp	r3, r2
   361ac:	bls	362a0 <flatcc_json_printer_string_field@@Base+0x184>
   361b0:	mov	r3, #34	; 0x22
   361b4:	strb	r3, [r2]
   361b8:	ldrb	r3, [r4, #26]
   361bc:	ldr	r2, [r4, #16]
   361c0:	ldr	r0, [r4, #20]
   361c4:	cmp	r3, #0
   361c8:	addeq	r0, r0, #1
   361cc:	add	r3, r0, r7
   361d0:	cmp	r2, r3
   361d4:	str	r0, [r4, #20]
   361d8:	bls	36288 <flatcc_json_printer_string_field@@Base+0x16c>
   361dc:	mov	r2, r7
   361e0:	mov	r1, r9
   361e4:	bl	14524 <memcpy@plt>
   361e8:	ldr	r3, [r4, #20]
   361ec:	add	r7, r3, r7
   361f0:	str	r7, [r4, #20]
   361f4:	mov	r3, #34	; 0x22
   361f8:	mov	lr, #58	; 0x3a
   361fc:	mov	ip, #32
   36200:	mov	r0, r4
   36204:	strb	r3, [r7]
   36208:	ldrb	r3, [r4, #26]
   3620c:	ldr	r1, [r4, #20]
   36210:	clz	r3, r3
   36214:	lsr	r3, r3, #5
   36218:	add	r2, r1, r3
   3621c:	add	r2, r2, #1
   36220:	str	r2, [r4, #20]
   36224:	strb	lr, [r1, r3]
   36228:	ldr	r3, [r4, #20]
   3622c:	strb	ip, [r3]
   36230:	ldrb	r1, [r4, #25]
   36234:	ldr	r3, [r4, #20]
   36238:	ldr	r2, [r6, r5]
   3623c:	ldrd	r6, [sp, #8]
   36240:	cmp	r1, #0
   36244:	addne	r3, r3, #1
   36248:	ldr	sl, [sp, #24]
   3624c:	add	r1, r8, r2
   36250:	add	r1, r1, #4
   36254:	ldr	r2, [r8, r2]
   36258:	ldrd	r8, [sp, #16]
   3625c:	ldr	lr, [sp, #28]
   36260:	str	r3, [r4, #20]
   36264:	ldrd	r4, [sp]
   36268:	add	sp, sp, #32
   3626c:	b	3457c <flatcc_json_parser_struct_as_root@@Base+0x105c>
   36270:	ldrd	r4, [sp]
   36274:	ldrd	r6, [sp, #8]
   36278:	ldrd	r8, [sp, #16]
   3627c:	ldr	sl, [sp, #24]
   36280:	add	sp, sp, #28
   36284:	pop	{pc}		; (ldr pc, [sp], #4)
   36288:	mov	r2, r7
   3628c:	mov	r1, r9
   36290:	mov	r0, r4
   36294:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   36298:	ldr	r7, [r4, #20]
   3629c:	b	361f4 <flatcc_json_printer_string_field@@Base+0xd8>
   362a0:	ldr	r3, [r0, #44]	; 0x2c
   362a4:	blx	r3
   362a8:	ldr	r2, [r4, #20]
   362ac:	b	361b0 <flatcc_json_printer_string_field@@Base+0x94>
   362b0:	add	r1, r2, #1
   362b4:	mov	r3, #10
   362b8:	str	r1, [r0, #20]
   362bc:	strb	r3, [r2]
   362c0:	ldrb	r3, [r0, #25]
   362c4:	ldr	r2, [r4, #32]
   362c8:	ldr	r1, [r0, #16]
   362cc:	ldr	r0, [r0, #20]
   362d0:	mul	sl, r2, r3
   362d4:	add	r3, r0, sl
   362d8:	cmp	r1, r3
   362dc:	bcs	362f4 <flatcc_json_printer_string_field@@Base+0x1d8>
   362e0:	mov	r1, sl
   362e4:	mov	r0, r4
   362e8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   362ec:	ldr	r2, [r4, #20]
   362f0:	b	361b0 <flatcc_json_printer_string_field@@Base+0x94>
   362f4:	mov	r2, sl
   362f8:	mov	r1, #32
   362fc:	bl	1459c <memset@plt>
   36300:	ldr	r2, [r4, #20]
   36304:	add	r2, r2, sl
   36308:	str	r2, [r4, #20]
   3630c:	b	361b0 <flatcc_json_printer_string_field@@Base+0x94>

00036310 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   36310:	ldr	ip, [r1, #8]
   36314:	add	r2, r2, #2
   36318:	lsl	r2, r2, #1
   3631c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   36320:	strd	r6, [sp, #8]
   36324:	strd	r8, [sp, #16]
   36328:	strd	sl, [sp, #24]
   3632c:	cmp	r2, ip
   36330:	str	lr, [sp, #32]
   36334:	sub	sp, sp, #4
   36338:	ldr	r5, [sp, #40]	; 0x28
   3633c:	bge	36748 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36340:	ldr	ip, [r1, #4]
   36344:	ldrh	r7, [ip, r2]
   36348:	cmp	r7, #0
   3634c:	beq	36748 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36350:	ldr	r6, [r1]
   36354:	adds	r8, r6, r7
   36358:	beq	36748 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   3635c:	ldr	ip, [r1, #16]
   36360:	ldr	r2, [r0, #20]
   36364:	cmp	ip, #0
   36368:	add	ip, ip, #1
   3636c:	str	ip, [r1, #16]
   36370:	beq	36388 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x78>
   36374:	add	ip, r2, #1
   36378:	mov	r1, #44	; 0x2c
   3637c:	str	ip, [r0, #20]
   36380:	strb	r1, [r2]
   36384:	ldr	r2, [r0, #20]
   36388:	mov	r9, r3
   3638c:	mov	r4, r0
   36390:	ldrb	r1, [r0, #25]
   36394:	cmp	r1, #0
   36398:	bne	36764 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x454>
   3639c:	ldr	r3, [r0, #16]
   363a0:	cmp	r2, r3
   363a4:	bcc	363b4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   363a8:	ldr	r3, [r0, #44]	; 0x2c
   363ac:	blx	r3
   363b0:	ldr	r2, [r4, #20]
   363b4:	mov	r3, #34	; 0x22
   363b8:	strb	r3, [r2]
   363bc:	ldrb	r3, [r4, #26]
   363c0:	ldr	r2, [r4, #16]
   363c4:	ldr	r0, [r4, #20]
   363c8:	cmp	r3, #0
   363cc:	addeq	r0, r0, #1
   363d0:	add	r3, r0, r5
   363d4:	cmp	r2, r3
   363d8:	str	r0, [r4, #20]
   363dc:	bls	367d8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c8>
   363e0:	mov	r2, r5
   363e4:	mov	r1, r9
   363e8:	bl	14524 <memcpy@plt>
   363ec:	ldr	r3, [r4, #20]
   363f0:	add	r5, r3, r5
   363f4:	str	r5, [r4, #20]
   363f8:	mov	r1, #34	; 0x22
   363fc:	mov	lr, #58	; 0x3a
   36400:	movw	r2, #43691	; 0xaaab
   36404:	movt	r2, #43690	; 0xaaaa
   36408:	strb	r1, [r5]
   3640c:	mov	r5, #32
   36410:	ldrb	r3, [r4, #26]
   36414:	ldr	ip, [r4, #20]
   36418:	clz	r3, r3
   3641c:	lsr	r3, r3, #5
   36420:	add	r0, ip, r3
   36424:	add	r0, r0, #1
   36428:	str	r0, [r4, #20]
   3642c:	strb	lr, [ip, r3]
   36430:	ldr	r3, [r4, #20]
   36434:	strb	r5, [r3]
   36438:	ldr	r0, [r6, r7]
   3643c:	ldrb	r3, [r4, #25]
   36440:	ldr	ip, [r4, #20]
   36444:	add	r7, r8, r0
   36448:	ldr	r6, [r8, r0]
   3644c:	add	r7, r7, #4
   36450:	adds	r3, r3, #0
   36454:	movne	r3, #1
   36458:	add	r0, ip, r3
   3645c:	add	r0, r0, #1
   36460:	lsl	r9, r6, #2
   36464:	str	r0, [r4, #20]
   36468:	strb	r1, [ip, r3]
   3646c:	umull	r3, r9, r2, r9
   36470:	ldr	r3, [r4, #16]
   36474:	ldr	r2, [r4, #20]
   36478:	lsr	r9, r9, #1
   3647c:	add	r9, r9, #3
   36480:	bic	r9, r9, #3
   36484:	add	r1, r2, r9
   36488:	cmp	r1, r3
   3648c:	bcc	364ac <flatcc_json_printer_uint8_vector_base64_field@@Base+0x19c>
   36490:	mov	r1, #0
   36494:	mov	r0, r4
   36498:	ldr	r3, [r4, #44]	; 0x2c
   3649c:	blx	r3
   364a0:	ldr	r3, [r4, #16]
   364a4:	ldr	r2, [r4, #20]
   364a8:	add	r1, r2, r9
   364ac:	cmp	r3, r1
   364b0:	bcs	36640 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   364b4:	sub	r3, r3, r2
   364b8:	bic	r3, r3, #3
   364bc:	add	ip, r3, r3, lsl #1
   364c0:	cmp	ip, #3
   364c4:	lsr	ip, ip, #2
   364c8:	bls	36624 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x314>
   364cc:	ldr	r0, [sp, #44]	; 0x2c
   364d0:	movw	r1, #34616	; 0x8738
   364d4:	movt	r1, #4
   364d8:	movw	r5, #34684	; 0x877c
   364dc:	movt	r5, #4
   364e0:	movw	r8, #43691	; 0xaaab
   364e4:	movt	r8, #43690	; 0xaaaa
   364e8:	cmp	r0, #0
   364ec:	moveq	r5, r1
   364f0:	cmp	ip, #2
   364f4:	bls	367cc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4bc>
   364f8:	add	lr, r2, #4
   364fc:	add	r1, r7, #3
   36500:	mov	sl, ip
   36504:	ldrb	r9, [r1, #-3]
   36508:	sub	sl, sl, #3
   3650c:	mov	r0, r1
   36510:	cmp	sl, #2
   36514:	mov	r2, lr
   36518:	add	r1, r1, #3
   3651c:	add	lr, lr, #4
   36520:	ldrb	r9, [r5, r9, lsr #2]
   36524:	strb	r9, [lr, #-8]
   36528:	ldrb	r9, [r1, #-6]
   3652c:	ldrb	fp, [r1, #-5]
   36530:	lsl	r9, r9, #4
   36534:	and	r9, r9, #48	; 0x30
   36538:	orr	r9, r9, fp, lsr #4
   3653c:	ldrb	r9, [r5, r9]
   36540:	strb	r9, [lr, #-7]
   36544:	ldrb	r9, [r1, #-5]
   36548:	ldrb	fp, [r1, #-4]
   3654c:	lsl	r9, r9, #2
   36550:	and	r9, r9, #60	; 0x3c
   36554:	orr	r9, r9, fp, lsr #6
   36558:	ldrb	r9, [r5, r9]
   3655c:	strb	r9, [lr, #-6]
   36560:	ldrb	r9, [r1, #-4]
   36564:	and	r9, r9, #63	; 0x3f
   36568:	ldrb	r9, [r5, r9]
   3656c:	strb	r9, [lr, #-5]
   36570:	bhi	36504 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1f4>
   36574:	cmp	sl, #1
   36578:	beq	367a8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x498>
   3657c:	cmp	sl, #2
   36580:	bne	365c0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b0>
   36584:	ldrb	r1, [r0]
   36588:	ldrb	r1, [r5, r1, lsr #2]
   3658c:	strb	r1, [r2]
   36590:	ldrb	r1, [r0]
   36594:	ldrb	lr, [r0, #1]
   36598:	lsl	r1, r1, #4
   3659c:	and	r1, r1, #48	; 0x30
   365a0:	orr	r1, r1, lr, lsr #4
   365a4:	ldrb	r1, [r5, r1]
   365a8:	strb	r1, [r2, #1]
   365ac:	ldrb	r1, [r0, #1]
   365b0:	lsl	r1, r1, #2
   365b4:	and	r1, r1, #60	; 0x3c
   365b8:	ldrb	r1, [r5, r1]
   365bc:	strb	r1, [r2, #2]
   365c0:	ldr	r2, [r4, #20]
   365c4:	mov	r1, #0
   365c8:	sub	r6, r6, ip
   365cc:	mov	r0, r4
   365d0:	add	r7, r7, ip
   365d4:	ldr	r9, [r4, #44]	; 0x2c
   365d8:	add	r3, r2, r3
   365dc:	str	r3, [r4, #20]
   365e0:	blx	r9
   365e4:	lsl	r9, r6, #2
   365e8:	ldr	r3, [r4, #16]
   365ec:	ldr	r2, [r4, #20]
   365f0:	umull	r1, r9, r8, r9
   365f4:	lsr	r9, r9, #1
   365f8:	add	r9, r9, #3
   365fc:	bic	r9, r9, #3
   36600:	add	r1, r2, r9
   36604:	cmp	r3, r1
   36608:	bcs	36640 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   3660c:	sub	r3, r3, r2
   36610:	bic	r3, r3, #3
   36614:	add	ip, r3, r3, lsl #1
   36618:	cmp	ip, #3
   3661c:	lsr	ip, ip, #2
   36620:	bhi	364f0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1e0>
   36624:	movw	r1, #34752	; 0x87c0
   36628:	movt	r1, #4
   3662c:	ldr	r3, [pc, #520]	; 3683c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x52c>
   36630:	movw	r0, #34828	; 0x880c
   36634:	movt	r0, #4
   36638:	movw	r2, #277	; 0x115
   3663c:	bl	145f0 <__assert_fail@plt>
   36640:	ldr	r0, [sp, #44]	; 0x2c
   36644:	movw	r3, #34684	; 0x877c
   36648:	movt	r3, #4
   3664c:	movw	r1, #34616	; 0x8738
   36650:	movt	r1, #4
   36654:	cmp	r0, #0
   36658:	movne	r1, r3
   3665c:	cmp	r6, #2
   36660:	bls	366dc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x3cc>
   36664:	add	ip, r2, #4
   36668:	add	r3, r7, #3
   3666c:	ldrb	r0, [r3, #-3]
   36670:	sub	r6, r6, #3
   36674:	mov	r7, r3
   36678:	cmp	r6, #2
   3667c:	mov	r2, ip
   36680:	add	r3, r3, #3
   36684:	add	ip, ip, #4
   36688:	ldrb	r0, [r1, r0, lsr #2]
   3668c:	strb	r0, [ip, #-8]
   36690:	ldrb	r0, [r3, #-6]
   36694:	ldrb	lr, [r3, #-5]
   36698:	lsl	r0, r0, #4
   3669c:	and	r0, r0, #48	; 0x30
   366a0:	orr	r0, r0, lr, lsr #4
   366a4:	ldrb	r0, [r1, r0]
   366a8:	strb	r0, [ip, #-7]
   366ac:	ldrb	r0, [r3, #-5]
   366b0:	ldrb	lr, [r3, #-4]
   366b4:	lsl	r0, r0, #2
   366b8:	and	r0, r0, #60	; 0x3c
   366bc:	orr	r0, r0, lr, lsr #6
   366c0:	ldrb	r0, [r1, r0]
   366c4:	strb	r0, [ip, #-6]
   366c8:	ldrb	r0, [r3, #-4]
   366cc:	and	r0, r0, #63	; 0x3f
   366d0:	ldrb	r0, [r1, r0]
   366d4:	strb	r0, [ip, #-5]
   366d8:	bhi	3666c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x35c>
   366dc:	cmp	r6, #1
   366e0:	beq	3680c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4fc>
   366e4:	cmp	r6, #2
   366e8:	bne	36730 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x420>
   366ec:	ldrb	r3, [r7]
   366f0:	mov	r0, #61	; 0x3d
   366f4:	ldrb	r3, [r1, r3, lsr #2]
   366f8:	strb	r3, [r2]
   366fc:	ldrb	r3, [r7]
   36700:	ldrb	ip, [r7, #1]
   36704:	lsl	r3, r3, #4
   36708:	and	r3, r3, #48	; 0x30
   3670c:	orr	r3, r3, ip, lsr #4
   36710:	ldrb	r3, [r1, r3]
   36714:	strb	r3, [r2, #1]
   36718:	ldrb	r3, [r7, #1]
   3671c:	lsl	r3, r3, #2
   36720:	and	r3, r3, #60	; 0x3c
   36724:	ldrb	r3, [r1, r3]
   36728:	strb	r3, [r2, #2]
   3672c:	strb	r0, [r2, #3]
   36730:	ldr	r2, [r4, #20]
   36734:	mov	r1, #34	; 0x22
   36738:	add	r3, r2, r9
   3673c:	add	r3, r3, #1
   36740:	str	r3, [r4, #20]
   36744:	strb	r1, [r2, r9]
   36748:	add	sp, sp, #4
   3674c:	ldrd	r4, [sp]
   36750:	ldrd	r6, [sp, #8]
   36754:	ldrd	r8, [sp, #16]
   36758:	ldrd	sl, [sp, #24]
   3675c:	add	sp, sp, #32
   36760:	pop	{pc}		; (ldr pc, [sp], #4)
   36764:	add	r1, r2, #1
   36768:	mov	r3, #10
   3676c:	str	r1, [r0, #20]
   36770:	strb	r3, [r2]
   36774:	ldrb	r3, [r0, #25]
   36778:	ldr	r2, [r4, #32]
   3677c:	ldr	r1, [r0, #16]
   36780:	ldr	r0, [r0, #20]
   36784:	mul	sl, r2, r3
   36788:	add	r3, r0, sl
   3678c:	cmp	r1, r3
   36790:	bcs	367f0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4e0>
   36794:	mov	r1, sl
   36798:	mov	r0, r4
   3679c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   367a0:	ldr	r2, [r4, #20]
   367a4:	b	363b4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   367a8:	ldrb	r1, [r0]
   367ac:	ldrb	r1, [r5, r1, lsr #2]
   367b0:	strb	r1, [r2]
   367b4:	ldrb	r1, [r0]
   367b8:	lsl	r1, r1, #4
   367bc:	and	r1, r1, #48	; 0x30
   367c0:	ldrb	r1, [r5, r1]
   367c4:	strb	r1, [r2, #1]
   367c8:	b	365c0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b0>
   367cc:	mov	sl, ip
   367d0:	mov	r0, r7
   367d4:	b	36574 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x264>
   367d8:	mov	r2, r5
   367dc:	mov	r1, r9
   367e0:	mov	r0, r4
   367e4:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   367e8:	ldr	r5, [r4, #20]
   367ec:	b	363f8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xe8>
   367f0:	mov	r2, sl
   367f4:	mov	r1, #32
   367f8:	bl	1459c <memset@plt>
   367fc:	ldr	r2, [r4, #20]
   36800:	add	r2, r2, sl
   36804:	str	r2, [r4, #20]
   36808:	b	363b4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   3680c:	ldrb	r3, [r7]
   36810:	mov	r0, #61	; 0x3d
   36814:	ldrb	r3, [r1, r3, lsr #2]
   36818:	strb	r3, [r2]
   3681c:	ldrb	r3, [r7]
   36820:	lsl	r3, r3, #4
   36824:	and	r3, r3, #48	; 0x30
   36828:	ldrb	r3, [r1, r3]
   3682c:	strb	r3, [r2, #1]
   36830:	strb	r0, [r2, #2]
   36834:	strb	r0, [r2, #3]
   36838:	b	36730 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x420>
   3683c:	strdeq	r8, [r4], -r4

00036840 <flatcc_json_printer_uint8_field@@Base>:
   36840:	ldr	ip, [r1, #8]
   36844:	add	r2, r2, #2
   36848:	lsl	r2, r2, #1
   3684c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36850:	strd	r6, [sp, #8]
   36854:	str	r8, [sp, #16]
   36858:	str	lr, [sp, #20]
   3685c:	cmp	r2, ip
   36860:	ldrb	lr, [sp, #28]
   36864:	ldr	r6, [sp, #24]
   36868:	bge	369c4 <flatcc_json_printer_uint8_field@@Base+0x184>
   3686c:	ldr	ip, [r1, #4]
   36870:	ldrh	r2, [ip, r2]
   36874:	cmp	r2, #0
   36878:	beq	369c4 <flatcc_json_printer_uint8_field@@Base+0x184>
   3687c:	ldr	ip, [r1]
   36880:	cmn	ip, r2
   36884:	beq	369c4 <flatcc_json_printer_uint8_field@@Base+0x184>
   36888:	ldrb	r5, [ip, r2]
   3688c:	cmp	lr, r5
   36890:	beq	36aa0 <flatcc_json_printer_uint8_field@@Base+0x260>
   36894:	ldr	ip, [r1, #16]
   36898:	ldr	r2, [r0, #20]
   3689c:	cmp	ip, #0
   368a0:	add	ip, ip, #1
   368a4:	str	ip, [r1, #16]
   368a8:	beq	368c0 <flatcc_json_printer_uint8_field@@Base+0x80>
   368ac:	add	ip, r2, #1
   368b0:	mov	r1, #44	; 0x2c
   368b4:	str	ip, [r0, #20]
   368b8:	strb	r1, [r2]
   368bc:	ldr	r2, [r0, #20]
   368c0:	mov	r7, r3
   368c4:	mov	r4, r0
   368c8:	ldrb	r1, [r0, #25]
   368cc:	cmp	r1, #0
   368d0:	bne	369f0 <flatcc_json_printer_uint8_field@@Base+0x1b0>
   368d4:	ldr	r3, [r0, #16]
   368d8:	cmp	r3, r2
   368dc:	bhi	368ec <flatcc_json_printer_uint8_field@@Base+0xac>
   368e0:	ldr	r3, [r0, #44]	; 0x2c
   368e4:	blx	r3
   368e8:	ldr	r2, [r4, #20]
   368ec:	mov	r3, #34	; 0x22
   368f0:	strb	r3, [r2]
   368f4:	ldrb	r3, [r4, #26]
   368f8:	ldr	r2, [r4, #16]
   368fc:	ldr	r0, [r4, #20]
   36900:	cmp	r3, #0
   36904:	addeq	r0, r0, #1
   36908:	add	r3, r0, r6
   3690c:	cmp	r2, r3
   36910:	str	r0, [r4, #20]
   36914:	bls	369d8 <flatcc_json_printer_uint8_field@@Base+0x198>
   36918:	mov	r2, r6
   3691c:	mov	r1, r7
   36920:	bl	14524 <memcpy@plt>
   36924:	ldr	r3, [r4, #20]
   36928:	add	r6, r3, r6
   3692c:	str	r6, [r4, #20]
   36930:	mov	r3, #34	; 0x22
   36934:	mov	ip, #58	; 0x3a
   36938:	mov	r0, #32
   3693c:	strb	r3, [r6]
   36940:	ldrb	r3, [r4, #26]
   36944:	ldr	r1, [r4, #20]
   36948:	clz	r3, r3
   3694c:	lsr	r3, r3, #5
   36950:	add	r2, r1, r3
   36954:	add	r2, r2, #1
   36958:	str	r2, [r4, #20]
   3695c:	strb	ip, [r1, r3]
   36960:	ldr	r3, [r4, #20]
   36964:	strb	r0, [r3]
   36968:	ldrb	r3, [r4, #25]
   3696c:	ldr	r0, [r4, #20]
   36970:	adds	r3, r3, #0
   36974:	movne	r3, #1
   36978:	cmp	r5, #99	; 0x63
   3697c:	add	r1, r0, r3
   36980:	str	r1, [r4, #20]
   36984:	bhi	36a50 <flatcc_json_printer_uint8_field@@Base+0x210>
   36988:	cmp	r5, #9
   3698c:	bhi	36ab0 <flatcc_json_printer_uint8_field@@Base+0x270>
   36990:	add	r5, r5, #48	; 0x30
   36994:	mov	r2, #0
   36998:	mov	ip, #1
   3699c:	strb	r2, [r1, #1]
   369a0:	strb	r5, [r0, r3]
   369a4:	ldr	r3, [r4, #20]
   369a8:	add	r3, r3, ip
   369ac:	str	r3, [r4, #20]
   369b0:	ldrd	r4, [sp]
   369b4:	ldrd	r6, [sp, #8]
   369b8:	ldr	r8, [sp, #16]
   369bc:	add	sp, sp, #20
   369c0:	pop	{pc}		; (ldr pc, [sp], #4)
   369c4:	ldrb	r2, [r0, #29]
   369c8:	cmp	r2, #0
   369cc:	beq	369b0 <flatcc_json_printer_uint8_field@@Base+0x170>
   369d0:	mov	r5, lr
   369d4:	b	36894 <flatcc_json_printer_uint8_field@@Base+0x54>
   369d8:	mov	r2, r6
   369dc:	mov	r1, r7
   369e0:	mov	r0, r4
   369e4:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   369e8:	ldr	r6, [r4, #20]
   369ec:	b	36930 <flatcc_json_printer_uint8_field@@Base+0xf0>
   369f0:	add	r1, r2, #1
   369f4:	mov	r3, #10
   369f8:	str	r1, [r0, #20]
   369fc:	strb	r3, [r2]
   36a00:	ldrb	r8, [r0, #25]
   36a04:	ldr	r2, [r4, #32]
   36a08:	ldr	r1, [r0, #16]
   36a0c:	ldr	r0, [r0, #20]
   36a10:	mul	r8, r2, r8
   36a14:	add	r3, r0, r8
   36a18:	cmp	r1, r3
   36a1c:	bcs	36a34 <flatcc_json_printer_uint8_field@@Base+0x1f4>
   36a20:	mov	r1, r8
   36a24:	mov	r0, r4
   36a28:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   36a2c:	ldr	r2, [r4, #20]
   36a30:	b	368ec <flatcc_json_printer_uint8_field@@Base+0xac>
   36a34:	mov	r2, r8
   36a38:	mov	r1, #32
   36a3c:	bl	1459c <memset@plt>
   36a40:	ldr	r2, [r4, #20]
   36a44:	add	r2, r2, r8
   36a48:	str	r2, [r4, #20]
   36a4c:	b	368ec <flatcc_json_printer_uint8_field@@Base+0xac>
   36a50:	movw	r2, #34079	; 0x851f
   36a54:	movt	r2, #20971	; 0x51eb
   36a58:	mov	r6, #100	; 0x64
   36a5c:	mov	ip, #0
   36a60:	umull	lr, r2, r2, r5
   36a64:	movw	lr, #32560	; 0x7f30
   36a68:	movt	lr, #4
   36a6c:	strb	ip, [r1, #3]
   36a70:	mov	ip, #3
   36a74:	lsr	r2, r2, #5
   36a78:	mls	r5, r6, r2, r5
   36a7c:	add	r2, r2, #48	; 0x30
   36a80:	uxtb	r5, r5
   36a84:	ldrb	r6, [lr, r5, lsl #1]
   36a88:	add	lr, lr, r5, lsl #1
   36a8c:	strb	r6, [r1, #1]
   36a90:	ldrb	lr, [lr, #1]
   36a94:	strb	lr, [r1, #2]
   36a98:	strb	r2, [r0, r3]
   36a9c:	b	369a4 <flatcc_json_printer_uint8_field@@Base+0x164>
   36aa0:	ldrb	r2, [r0, #28]
   36aa4:	cmp	r2, #0
   36aa8:	beq	36894 <flatcc_json_printer_uint8_field@@Base+0x54>
   36aac:	b	369b0 <flatcc_json_printer_uint8_field@@Base+0x170>
   36ab0:	mov	ip, #0
   36ab4:	sxth	r5, r5
   36ab8:	movw	r2, #32560	; 0x7f30
   36abc:	movt	r2, #4
   36ac0:	add	lr, r2, r5, lsl #1
   36ac4:	strb	ip, [r1, #2]
   36ac8:	mov	ip, #2
   36acc:	ldrb	r2, [r2, r5, lsl #1]
   36ad0:	strb	r2, [r0, r3]
   36ad4:	ldrb	r3, [lr, #1]
   36ad8:	strb	r3, [r1, #1]
   36adc:	b	369a4 <flatcc_json_printer_uint8_field@@Base+0x164>

00036ae0 <flatcc_json_printer_uint16_field@@Base>:
   36ae0:	ldr	ip, [r1, #8]
   36ae4:	add	r2, r2, #2
   36ae8:	lsl	r2, r2, #1
   36aec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36af0:	strd	r6, [sp, #8]
   36af4:	str	r8, [sp, #16]
   36af8:	str	lr, [sp, #20]
   36afc:	cmp	r2, ip
   36b00:	ldrh	lr, [sp, #28]
   36b04:	ldr	r5, [sp, #24]
   36b08:	bge	36c48 <flatcc_json_printer_uint16_field@@Base+0x168>
   36b0c:	ldr	ip, [r1, #4]
   36b10:	ldrh	r2, [ip, r2]
   36b14:	cmp	r2, #0
   36b18:	beq	36c48 <flatcc_json_printer_uint16_field@@Base+0x168>
   36b1c:	ldr	ip, [r1]
   36b20:	cmn	ip, r2
   36b24:	beq	36c48 <flatcc_json_printer_uint16_field@@Base+0x168>
   36b28:	ldrh	r6, [ip, r2]
   36b2c:	cmp	lr, r6
   36b30:	beq	36cd4 <flatcc_json_printer_uint16_field@@Base+0x1f4>
   36b34:	ldr	ip, [r1, #16]
   36b38:	ldr	r2, [r0, #20]
   36b3c:	cmp	ip, #0
   36b40:	add	ip, ip, #1
   36b44:	str	ip, [r1, #16]
   36b48:	beq	36b60 <flatcc_json_printer_uint16_field@@Base+0x80>
   36b4c:	add	ip, r2, #1
   36b50:	mov	r1, #44	; 0x2c
   36b54:	str	ip, [r0, #20]
   36b58:	strb	r1, [r2]
   36b5c:	ldr	r2, [r0, #20]
   36b60:	mov	r7, r3
   36b64:	mov	r4, r0
   36b68:	ldrb	r1, [r0, #25]
   36b6c:	cmp	r1, #0
   36b70:	bne	36c74 <flatcc_json_printer_uint16_field@@Base+0x194>
   36b74:	ldr	r3, [r0, #16]
   36b78:	cmp	r3, r2
   36b7c:	bhi	36b8c <flatcc_json_printer_uint16_field@@Base+0xac>
   36b80:	ldr	r3, [r0, #44]	; 0x2c
   36b84:	blx	r3
   36b88:	ldr	r2, [r4, #20]
   36b8c:	mov	r3, #34	; 0x22
   36b90:	strb	r3, [r2]
   36b94:	ldrb	r3, [r4, #26]
   36b98:	ldr	r2, [r4, #16]
   36b9c:	ldr	r0, [r4, #20]
   36ba0:	cmp	r3, #0
   36ba4:	addeq	r0, r0, #1
   36ba8:	add	r3, r0, r5
   36bac:	cmp	r2, r3
   36bb0:	str	r0, [r4, #20]
   36bb4:	bls	36c5c <flatcc_json_printer_uint16_field@@Base+0x17c>
   36bb8:	mov	r2, r5
   36bbc:	mov	r1, r7
   36bc0:	bl	14524 <memcpy@plt>
   36bc4:	ldr	r3, [r4, #20]
   36bc8:	add	r5, r3, r5
   36bcc:	str	r5, [r4, #20]
   36bd0:	mov	r3, #34	; 0x22
   36bd4:	mov	lr, #58	; 0x3a
   36bd8:	mov	ip, #32
   36bdc:	mov	r0, r6
   36be0:	strb	r3, [r5]
   36be4:	ldrb	r3, [r4, #26]
   36be8:	ldr	r1, [r4, #20]
   36bec:	clz	r3, r3
   36bf0:	lsr	r3, r3, #5
   36bf4:	add	r2, r1, r3
   36bf8:	add	r2, r2, #1
   36bfc:	str	r2, [r4, #20]
   36c00:	strb	lr, [r1, r3]
   36c04:	ldr	r3, [r4, #20]
   36c08:	strb	ip, [r3]
   36c0c:	ldrb	r2, [r4, #25]
   36c10:	ldr	r3, [r4, #20]
   36c14:	cmp	r2, #0
   36c18:	addne	r3, r3, #1
   36c1c:	mov	r1, r3
   36c20:	str	r3, [r4, #20]
   36c24:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   36c28:	ldr	r3, [r4, #20]
   36c2c:	add	r0, r3, r0
   36c30:	str	r0, [r4, #20]
   36c34:	ldrd	r4, [sp]
   36c38:	ldrd	r6, [sp, #8]
   36c3c:	ldr	r8, [sp, #16]
   36c40:	add	sp, sp, #20
   36c44:	pop	{pc}		; (ldr pc, [sp], #4)
   36c48:	ldrb	r2, [r0, #29]
   36c4c:	cmp	r2, #0
   36c50:	beq	36c34 <flatcc_json_printer_uint16_field@@Base+0x154>
   36c54:	mov	r6, lr
   36c58:	b	36b34 <flatcc_json_printer_uint16_field@@Base+0x54>
   36c5c:	mov	r2, r5
   36c60:	mov	r1, r7
   36c64:	mov	r0, r4
   36c68:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   36c6c:	ldr	r5, [r4, #20]
   36c70:	b	36bd0 <flatcc_json_printer_uint16_field@@Base+0xf0>
   36c74:	add	r1, r2, #1
   36c78:	mov	r3, #10
   36c7c:	str	r1, [r0, #20]
   36c80:	strb	r3, [r2]
   36c84:	ldrb	r8, [r0, #25]
   36c88:	ldr	r2, [r4, #32]
   36c8c:	ldr	r1, [r0, #16]
   36c90:	ldr	r0, [r0, #20]
   36c94:	mul	r8, r2, r8
   36c98:	add	r3, r0, r8
   36c9c:	cmp	r1, r3
   36ca0:	bcs	36cb8 <flatcc_json_printer_uint16_field@@Base+0x1d8>
   36ca4:	mov	r1, r8
   36ca8:	mov	r0, r4
   36cac:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   36cb0:	ldr	r2, [r4, #20]
   36cb4:	b	36b8c <flatcc_json_printer_uint16_field@@Base+0xac>
   36cb8:	mov	r2, r8
   36cbc:	mov	r1, #32
   36cc0:	bl	1459c <memset@plt>
   36cc4:	ldr	r2, [r4, #20]
   36cc8:	add	r2, r2, r8
   36ccc:	str	r2, [r4, #20]
   36cd0:	b	36b8c <flatcc_json_printer_uint16_field@@Base+0xac>
   36cd4:	ldrb	r2, [r0, #28]
   36cd8:	cmp	r2, #0
   36cdc:	beq	36b34 <flatcc_json_printer_uint16_field@@Base+0x54>
   36ce0:	b	36c34 <flatcc_json_printer_uint16_field@@Base+0x154>

00036ce4 <flatcc_json_printer_uint32_field@@Base>:
   36ce4:	ldr	ip, [r1, #8]
   36ce8:	add	r2, r2, #2
   36cec:	lsl	r2, r2, #1
   36cf0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36cf4:	strd	r6, [sp, #8]
   36cf8:	str	r8, [sp, #16]
   36cfc:	str	lr, [sp, #20]
   36d00:	cmp	r2, ip
   36d04:	ldr	r5, [sp, #24]
   36d08:	bge	36e4c <flatcc_json_printer_uint32_field@@Base+0x168>
   36d0c:	ldr	ip, [r1, #4]
   36d10:	ldrh	r2, [ip, r2]
   36d14:	cmp	r2, #0
   36d18:	beq	36e4c <flatcc_json_printer_uint32_field@@Base+0x168>
   36d1c:	ldr	ip, [r1]
   36d20:	cmn	ip, r2
   36d24:	beq	36e4c <flatcc_json_printer_uint32_field@@Base+0x168>
   36d28:	ldr	r6, [ip, r2]
   36d2c:	ldr	r2, [sp, #28]
   36d30:	cmp	r2, r6
   36d34:	beq	36ed8 <flatcc_json_printer_uint32_field@@Base+0x1f4>
   36d38:	ldr	ip, [r1, #16]
   36d3c:	ldr	r2, [r0, #20]
   36d40:	cmp	ip, #0
   36d44:	add	ip, ip, #1
   36d48:	str	ip, [r1, #16]
   36d4c:	beq	36d64 <flatcc_json_printer_uint32_field@@Base+0x80>
   36d50:	add	ip, r2, #1
   36d54:	mov	r1, #44	; 0x2c
   36d58:	str	ip, [r0, #20]
   36d5c:	strb	r1, [r2]
   36d60:	ldr	r2, [r0, #20]
   36d64:	mov	r7, r3
   36d68:	mov	r4, r0
   36d6c:	ldrb	r1, [r0, #25]
   36d70:	cmp	r1, #0
   36d74:	bne	36e78 <flatcc_json_printer_uint32_field@@Base+0x194>
   36d78:	ldr	r3, [r0, #16]
   36d7c:	cmp	r3, r2
   36d80:	bhi	36d90 <flatcc_json_printer_uint32_field@@Base+0xac>
   36d84:	ldr	r3, [r0, #44]	; 0x2c
   36d88:	blx	r3
   36d8c:	ldr	r2, [r4, #20]
   36d90:	mov	r3, #34	; 0x22
   36d94:	strb	r3, [r2]
   36d98:	ldrb	r3, [r4, #26]
   36d9c:	ldr	r2, [r4, #16]
   36da0:	ldr	r0, [r4, #20]
   36da4:	cmp	r3, #0
   36da8:	addeq	r0, r0, #1
   36dac:	add	r3, r0, r5
   36db0:	cmp	r2, r3
   36db4:	str	r0, [r4, #20]
   36db8:	bls	36e60 <flatcc_json_printer_uint32_field@@Base+0x17c>
   36dbc:	mov	r2, r5
   36dc0:	mov	r1, r7
   36dc4:	bl	14524 <memcpy@plt>
   36dc8:	ldr	r3, [r4, #20]
   36dcc:	add	r5, r3, r5
   36dd0:	str	r5, [r4, #20]
   36dd4:	mov	r3, #34	; 0x22
   36dd8:	mov	lr, #58	; 0x3a
   36ddc:	mov	ip, #32
   36de0:	mov	r0, r6
   36de4:	strb	r3, [r5]
   36de8:	ldrb	r3, [r4, #26]
   36dec:	ldr	r1, [r4, #20]
   36df0:	clz	r3, r3
   36df4:	lsr	r3, r3, #5
   36df8:	add	r2, r1, r3
   36dfc:	add	r2, r2, #1
   36e00:	str	r2, [r4, #20]
   36e04:	strb	lr, [r1, r3]
   36e08:	ldr	r3, [r4, #20]
   36e0c:	strb	ip, [r3]
   36e10:	ldrb	r2, [r4, #25]
   36e14:	ldr	r3, [r4, #20]
   36e18:	cmp	r2, #0
   36e1c:	addne	r3, r3, #1
   36e20:	mov	r1, r3
   36e24:	str	r3, [r4, #20]
   36e28:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   36e2c:	ldr	r3, [r4, #20]
   36e30:	add	r0, r3, r0
   36e34:	str	r0, [r4, #20]
   36e38:	ldrd	r4, [sp]
   36e3c:	ldrd	r6, [sp, #8]
   36e40:	ldr	r8, [sp, #16]
   36e44:	add	sp, sp, #20
   36e48:	pop	{pc}		; (ldr pc, [sp], #4)
   36e4c:	ldrb	r2, [r0, #29]
   36e50:	cmp	r2, #0
   36e54:	beq	36e38 <flatcc_json_printer_uint32_field@@Base+0x154>
   36e58:	ldr	r6, [sp, #28]
   36e5c:	b	36d38 <flatcc_json_printer_uint32_field@@Base+0x54>
   36e60:	mov	r2, r5
   36e64:	mov	r1, r7
   36e68:	mov	r0, r4
   36e6c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   36e70:	ldr	r5, [r4, #20]
   36e74:	b	36dd4 <flatcc_json_printer_uint32_field@@Base+0xf0>
   36e78:	add	r1, r2, #1
   36e7c:	mov	r3, #10
   36e80:	str	r1, [r0, #20]
   36e84:	strb	r3, [r2]
   36e88:	ldrb	r8, [r0, #25]
   36e8c:	ldr	r2, [r4, #32]
   36e90:	ldr	r1, [r0, #16]
   36e94:	ldr	r0, [r0, #20]
   36e98:	mul	r8, r2, r8
   36e9c:	add	r3, r0, r8
   36ea0:	cmp	r1, r3
   36ea4:	bcs	36ebc <flatcc_json_printer_uint32_field@@Base+0x1d8>
   36ea8:	mov	r1, r8
   36eac:	mov	r0, r4
   36eb0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   36eb4:	ldr	r2, [r4, #20]
   36eb8:	b	36d90 <flatcc_json_printer_uint32_field@@Base+0xac>
   36ebc:	mov	r2, r8
   36ec0:	mov	r1, #32
   36ec4:	bl	1459c <memset@plt>
   36ec8:	ldr	r2, [r4, #20]
   36ecc:	add	r2, r2, r8
   36ed0:	str	r2, [r4, #20]
   36ed4:	b	36d90 <flatcc_json_printer_uint32_field@@Base+0xac>
   36ed8:	ldrb	r2, [r0, #28]
   36edc:	cmp	r2, #0
   36ee0:	beq	36d38 <flatcc_json_printer_uint32_field@@Base+0x54>
   36ee4:	b	36e38 <flatcc_json_printer_uint32_field@@Base+0x154>

00036ee8 <flatcc_json_printer_uint64_field@@Base>:
   36ee8:	ldr	ip, [r1, #8]
   36eec:	add	r2, r2, #2
   36ef0:	lsl	r2, r2, #1
   36ef4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36ef8:	strd	r6, [sp, #8]
   36efc:	strd	r8, [sp, #16]
   36f00:	str	sl, [sp, #24]
   36f04:	cmp	r2, ip
   36f08:	str	lr, [sp, #28]
   36f0c:	ldr	r5, [sp, #32]
   36f10:	bge	37060 <flatcc_json_printer_uint64_field@@Base+0x178>
   36f14:	ldr	ip, [r1, #4]
   36f18:	ldrh	r2, [ip, r2]
   36f1c:	cmp	r2, #0
   36f20:	beq	37060 <flatcc_json_printer_uint64_field@@Base+0x178>
   36f24:	ldr	ip, [r1]
   36f28:	cmn	ip, r2
   36f2c:	beq	37060 <flatcc_json_printer_uint64_field@@Base+0x178>
   36f30:	ldrd	r6, [ip, r2]
   36f34:	ldrd	r8, [sp, #40]	; 0x28
   36f38:	cmp	r9, r7
   36f3c:	cmpeq	r8, r6
   36f40:	beq	370ec <flatcc_json_printer_uint64_field@@Base+0x204>
   36f44:	ldr	ip, [r1, #16]
   36f48:	ldr	r2, [r0, #20]
   36f4c:	cmp	ip, #0
   36f50:	add	ip, ip, #1
   36f54:	str	ip, [r1, #16]
   36f58:	beq	36f70 <flatcc_json_printer_uint64_field@@Base+0x88>
   36f5c:	add	ip, r2, #1
   36f60:	mov	r1, #44	; 0x2c
   36f64:	str	ip, [r0, #20]
   36f68:	strb	r1, [r2]
   36f6c:	ldr	r2, [r0, #20]
   36f70:	mov	r8, r3
   36f74:	mov	r4, r0
   36f78:	ldrb	r1, [r0, #25]
   36f7c:	cmp	r1, #0
   36f80:	bne	3708c <flatcc_json_printer_uint64_field@@Base+0x1a4>
   36f84:	ldr	r3, [r0, #16]
   36f88:	cmp	r3, r2
   36f8c:	bhi	36f9c <flatcc_json_printer_uint64_field@@Base+0xb4>
   36f90:	ldr	r3, [r0, #44]	; 0x2c
   36f94:	blx	r3
   36f98:	ldr	r2, [r4, #20]
   36f9c:	mov	r3, #34	; 0x22
   36fa0:	strb	r3, [r2]
   36fa4:	ldrb	r3, [r4, #26]
   36fa8:	ldr	r2, [r4, #16]
   36fac:	ldr	r0, [r4, #20]
   36fb0:	cmp	r3, #0
   36fb4:	addeq	r0, r0, #1
   36fb8:	add	r3, r0, r5
   36fbc:	cmp	r2, r3
   36fc0:	str	r0, [r4, #20]
   36fc4:	bls	37074 <flatcc_json_printer_uint64_field@@Base+0x18c>
   36fc8:	mov	r2, r5
   36fcc:	mov	r1, r8
   36fd0:	bl	14524 <memcpy@plt>
   36fd4:	ldr	r3, [r4, #20]
   36fd8:	add	r5, r3, r5
   36fdc:	str	r5, [r4, #20]
   36fe0:	mov	r3, #34	; 0x22
   36fe4:	mov	r0, r6
   36fe8:	mov	r6, #58	; 0x3a
   36fec:	mov	lr, #32
   36ff0:	strb	r3, [r5]
   36ff4:	mov	r1, r7
   36ff8:	ldrb	r3, [r4, #26]
   36ffc:	ldr	ip, [r4, #20]
   37000:	clz	r3, r3
   37004:	lsr	r3, r3, #5
   37008:	add	r2, ip, r3
   3700c:	add	r2, r2, #1
   37010:	str	r2, [r4, #20]
   37014:	strb	r6, [ip, r3]
   37018:	ldr	r3, [r4, #20]
   3701c:	strb	lr, [r3]
   37020:	ldrb	r2, [r4, #25]
   37024:	ldr	r3, [r4, #20]
   37028:	cmp	r2, #0
   3702c:	addne	r3, r3, #1
   37030:	mov	r2, r3
   37034:	str	r3, [r4, #20]
   37038:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3703c:	ldr	r3, [r4, #20]
   37040:	add	r0, r3, r0
   37044:	str	r0, [r4, #20]
   37048:	ldrd	r4, [sp]
   3704c:	ldrd	r6, [sp, #8]
   37050:	ldrd	r8, [sp, #16]
   37054:	ldr	sl, [sp, #24]
   37058:	add	sp, sp, #28
   3705c:	pop	{pc}		; (ldr pc, [sp], #4)
   37060:	ldrb	r2, [r0, #29]
   37064:	cmp	r2, #0
   37068:	beq	37048 <flatcc_json_printer_uint64_field@@Base+0x160>
   3706c:	ldrd	r6, [sp, #40]	; 0x28
   37070:	b	36f44 <flatcc_json_printer_uint64_field@@Base+0x5c>
   37074:	mov	r2, r5
   37078:	mov	r1, r8
   3707c:	mov	r0, r4
   37080:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   37084:	ldr	r5, [r4, #20]
   37088:	b	36fe0 <flatcc_json_printer_uint64_field@@Base+0xf8>
   3708c:	add	r1, r2, #1
   37090:	mov	r3, #10
   37094:	str	r1, [r0, #20]
   37098:	strb	r3, [r2]
   3709c:	ldrb	r3, [r0, #25]
   370a0:	ldr	r2, [r4, #32]
   370a4:	ldr	r1, [r0, #16]
   370a8:	ldr	r0, [r0, #20]
   370ac:	mul	r9, r2, r3
   370b0:	add	r3, r0, r9
   370b4:	cmp	r1, r3
   370b8:	bcs	370d0 <flatcc_json_printer_uint64_field@@Base+0x1e8>
   370bc:	mov	r1, r9
   370c0:	mov	r0, r4
   370c4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   370c8:	ldr	r2, [r4, #20]
   370cc:	b	36f9c <flatcc_json_printer_uint64_field@@Base+0xb4>
   370d0:	mov	r2, r9
   370d4:	mov	r1, #32
   370d8:	bl	1459c <memset@plt>
   370dc:	ldr	r2, [r4, #20]
   370e0:	add	r2, r2, r9
   370e4:	str	r2, [r4, #20]
   370e8:	b	36f9c <flatcc_json_printer_uint64_field@@Base+0xb4>
   370ec:	ldrb	r2, [r0, #28]
   370f0:	cmp	r2, #0
   370f4:	beq	36f44 <flatcc_json_printer_uint64_field@@Base+0x5c>
   370f8:	b	37048 <flatcc_json_printer_uint64_field@@Base+0x160>

000370fc <flatcc_json_printer_int8_field@@Base>:
   370fc:	ldr	ip, [r1, #8]
   37100:	add	r2, r2, #2
   37104:	lsl	r2, r2, #1
   37108:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3710c:	strd	r6, [sp, #8]
   37110:	str	r8, [sp, #16]
   37114:	str	lr, [sp, #20]
   37118:	cmp	r2, ip
   3711c:	ldrsb	lr, [sp, #28]
   37120:	ldr	r6, [sp, #24]
   37124:	bge	372a8 <flatcc_json_printer_int8_field@@Base+0x1ac>
   37128:	ldr	ip, [r1, #4]
   3712c:	ldrh	r2, [ip, r2]
   37130:	cmp	r2, #0
   37134:	beq	372a8 <flatcc_json_printer_int8_field@@Base+0x1ac>
   37138:	ldr	ip, [r1]
   3713c:	cmn	ip, r2
   37140:	beq	372a8 <flatcc_json_printer_int8_field@@Base+0x1ac>
   37144:	ldrsb	r5, [ip, r2]
   37148:	cmp	lr, r5
   3714c:	beq	37384 <flatcc_json_printer_int8_field@@Base+0x288>
   37150:	ldr	ip, [r1, #16]
   37154:	ldr	r2, [r0, #20]
   37158:	cmp	ip, #0
   3715c:	add	ip, ip, #1
   37160:	str	ip, [r1, #16]
   37164:	beq	3717c <flatcc_json_printer_int8_field@@Base+0x80>
   37168:	add	ip, r2, #1
   3716c:	mov	r1, #44	; 0x2c
   37170:	str	ip, [r0, #20]
   37174:	strb	r1, [r2]
   37178:	ldr	r2, [r0, #20]
   3717c:	mov	r7, r3
   37180:	mov	r4, r0
   37184:	ldrb	r1, [r0, #25]
   37188:	cmp	r1, #0
   3718c:	bne	372d4 <flatcc_json_printer_int8_field@@Base+0x1d8>
   37190:	ldr	r3, [r0, #16]
   37194:	cmp	r3, r2
   37198:	bhi	371a8 <flatcc_json_printer_int8_field@@Base+0xac>
   3719c:	ldr	r3, [r0, #44]	; 0x2c
   371a0:	blx	r3
   371a4:	ldr	r2, [r4, #20]
   371a8:	mov	r3, #34	; 0x22
   371ac:	strb	r3, [r2]
   371b0:	ldrb	r3, [r4, #26]
   371b4:	ldr	r2, [r4, #16]
   371b8:	ldr	r0, [r4, #20]
   371bc:	cmp	r3, #0
   371c0:	addeq	r0, r0, #1
   371c4:	add	r3, r0, r6
   371c8:	cmp	r2, r3
   371cc:	str	r0, [r4, #20]
   371d0:	bls	372bc <flatcc_json_printer_int8_field@@Base+0x1c0>
   371d4:	mov	r2, r6
   371d8:	mov	r1, r7
   371dc:	bl	14524 <memcpy@plt>
   371e0:	ldr	r3, [r4, #20]
   371e4:	add	r6, r3, r6
   371e8:	str	r6, [r4, #20]
   371ec:	mov	r3, #34	; 0x22
   371f0:	mov	r7, #58	; 0x3a
   371f4:	lsr	r0, r5, #31
   371f8:	mov	lr, #32
   371fc:	strb	r3, [r6]
   37200:	uxtb	r3, r5
   37204:	ldrb	r2, [r4, #26]
   37208:	ldr	ip, [r4, #20]
   3720c:	clz	r2, r2
   37210:	lsr	r2, r2, #5
   37214:	add	r1, ip, r2
   37218:	add	r1, r1, #1
   3721c:	str	r1, [r4, #20]
   37220:	strb	r7, [ip, r2]
   37224:	ldr	r2, [r4, #20]
   37228:	strb	lr, [r2]
   3722c:	ldrb	r1, [r4, #25]
   37230:	ldr	ip, [r4, #20]
   37234:	adds	r1, r1, #0
   37238:	movne	r1, #1
   3723c:	cmp	r5, #0
   37240:	add	r2, ip, r1
   37244:	str	r2, [r4, #20]
   37248:	bge	37260 <flatcc_json_printer_int8_field@@Base+0x164>
   3724c:	rsb	r3, r3, #0
   37250:	mov	lr, #45	; 0x2d
   37254:	add	r2, r2, #1
   37258:	uxtb	r3, r3
   3725c:	strb	lr, [ip, r1]
   37260:	cmp	r3, #99	; 0x63
   37264:	bhi	37334 <flatcc_json_printer_int8_field@@Base+0x238>
   37268:	cmp	r3, #9
   3726c:	bhi	37394 <flatcc_json_printer_int8_field@@Base+0x298>
   37270:	add	r3, r3, #48	; 0x30
   37274:	mov	r1, #0
   37278:	mov	ip, #1
   3727c:	strb	r3, [r2]
   37280:	strb	r1, [r2, #1]
   37284:	ldr	r3, [r4, #20]
   37288:	add	r2, r0, ip
   3728c:	add	r3, r3, r2
   37290:	str	r3, [r4, #20]
   37294:	ldrd	r4, [sp]
   37298:	ldrd	r6, [sp, #8]
   3729c:	ldr	r8, [sp, #16]
   372a0:	add	sp, sp, #20
   372a4:	pop	{pc}		; (ldr pc, [sp], #4)
   372a8:	ldrb	r2, [r0, #29]
   372ac:	cmp	r2, #0
   372b0:	beq	37294 <flatcc_json_printer_int8_field@@Base+0x198>
   372b4:	mov	r5, lr
   372b8:	b	37150 <flatcc_json_printer_int8_field@@Base+0x54>
   372bc:	mov	r2, r6
   372c0:	mov	r1, r7
   372c4:	mov	r0, r4
   372c8:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   372cc:	ldr	r6, [r4, #20]
   372d0:	b	371ec <flatcc_json_printer_int8_field@@Base+0xf0>
   372d4:	add	r1, r2, #1
   372d8:	mov	r3, #10
   372dc:	str	r1, [r0, #20]
   372e0:	strb	r3, [r2]
   372e4:	ldrb	r8, [r0, #25]
   372e8:	ldr	r2, [r4, #32]
   372ec:	ldr	r1, [r0, #16]
   372f0:	ldr	r0, [r0, #20]
   372f4:	mul	r8, r2, r8
   372f8:	add	r3, r0, r8
   372fc:	cmp	r1, r3
   37300:	bcs	37318 <flatcc_json_printer_int8_field@@Base+0x21c>
   37304:	mov	r1, r8
   37308:	mov	r0, r4
   3730c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   37310:	ldr	r2, [r4, #20]
   37314:	b	371a8 <flatcc_json_printer_int8_field@@Base+0xac>
   37318:	mov	r2, r8
   3731c:	mov	r1, #32
   37320:	bl	1459c <memset@plt>
   37324:	ldr	r2, [r4, #20]
   37328:	add	r2, r2, r8
   3732c:	str	r2, [r4, #20]
   37330:	b	371a8 <flatcc_json_printer_int8_field@@Base+0xac>
   37334:	movw	ip, #34079	; 0x851f
   37338:	movt	ip, #20971	; 0x51eb
   3733c:	mov	r6, #100	; 0x64
   37340:	mov	lr, #0
   37344:	umull	ip, r1, ip, r3
   37348:	mov	r5, #49	; 0x31
   3734c:	mov	ip, #3
   37350:	strb	lr, [r2, #3]
   37354:	movw	lr, #32560	; 0x7f30
   37358:	movt	lr, #4
   3735c:	lsr	r1, r1, #5
   37360:	mls	r1, r6, r1, r3
   37364:	uxtb	r1, r1
   37368:	ldrb	r3, [lr, r1, lsl #1]
   3736c:	add	r1, lr, r1, lsl #1
   37370:	strb	r3, [r2, #1]
   37374:	ldrb	r3, [r1, #1]
   37378:	strb	r5, [r2]
   3737c:	strb	r3, [r2, #2]
   37380:	b	37284 <flatcc_json_printer_int8_field@@Base+0x188>
   37384:	ldrb	r2, [r0, #28]
   37388:	cmp	r2, #0
   3738c:	beq	37150 <flatcc_json_printer_int8_field@@Base+0x54>
   37390:	b	37294 <flatcc_json_printer_int8_field@@Base+0x198>
   37394:	mov	ip, #0
   37398:	sxth	r3, r3
   3739c:	movw	r1, #32560	; 0x7f30
   373a0:	movt	r1, #4
   373a4:	add	lr, r1, r3, lsl #1
   373a8:	strb	ip, [r2, #2]
   373ac:	mov	ip, #2
   373b0:	ldrb	r3, [r1, r3, lsl #1]
   373b4:	strb	r3, [r2]
   373b8:	ldrb	r3, [lr, #1]
   373bc:	strb	r3, [r2, #1]
   373c0:	b	37284 <flatcc_json_printer_int8_field@@Base+0x188>

000373c4 <flatcc_json_printer_int16_field@@Base>:
   373c4:	ldr	ip, [r1, #8]
   373c8:	add	r2, r2, #2
   373cc:	lsl	r2, r2, #1
   373d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   373d4:	strd	r6, [sp, #8]
   373d8:	str	r8, [sp, #16]
   373dc:	str	lr, [sp, #20]
   373e0:	cmp	r2, ip
   373e4:	ldrsh	lr, [sp, #28]
   373e8:	ldr	r6, [sp, #24]
   373ec:	bge	37550 <flatcc_json_printer_int16_field@@Base+0x18c>
   373f0:	ldr	ip, [r1, #4]
   373f4:	ldrh	r2, [ip, r2]
   373f8:	cmp	r2, #0
   373fc:	beq	37550 <flatcc_json_printer_int16_field@@Base+0x18c>
   37400:	ldr	ip, [r1]
   37404:	cmn	ip, r2
   37408:	beq	37550 <flatcc_json_printer_int16_field@@Base+0x18c>
   3740c:	ldrsh	r5, [ip, r2]
   37410:	cmp	lr, r5
   37414:	beq	375dc <flatcc_json_printer_int16_field@@Base+0x218>
   37418:	ldr	ip, [r1, #16]
   3741c:	ldr	r2, [r0, #20]
   37420:	cmp	ip, #0
   37424:	add	ip, ip, #1
   37428:	str	ip, [r1, #16]
   3742c:	beq	37444 <flatcc_json_printer_int16_field@@Base+0x80>
   37430:	add	ip, r2, #1
   37434:	mov	r1, #44	; 0x2c
   37438:	str	ip, [r0, #20]
   3743c:	strb	r1, [r2]
   37440:	ldr	r2, [r0, #20]
   37444:	mov	r7, r3
   37448:	mov	r4, r0
   3744c:	ldrb	r1, [r0, #25]
   37450:	cmp	r1, #0
   37454:	bne	3757c <flatcc_json_printer_int16_field@@Base+0x1b8>
   37458:	ldr	r3, [r0, #16]
   3745c:	cmp	r3, r2
   37460:	bhi	37470 <flatcc_json_printer_int16_field@@Base+0xac>
   37464:	ldr	r3, [r0, #44]	; 0x2c
   37468:	blx	r3
   3746c:	ldr	r2, [r4, #20]
   37470:	mov	r3, #34	; 0x22
   37474:	strb	r3, [r2]
   37478:	ldrb	r3, [r4, #26]
   3747c:	ldr	r2, [r4, #16]
   37480:	ldr	r0, [r4, #20]
   37484:	cmp	r3, #0
   37488:	addeq	r0, r0, #1
   3748c:	add	r3, r0, r6
   37490:	cmp	r2, r3
   37494:	str	r0, [r4, #20]
   37498:	bls	37564 <flatcc_json_printer_int16_field@@Base+0x1a0>
   3749c:	mov	r2, r6
   374a0:	mov	r1, r7
   374a4:	bl	14524 <memcpy@plt>
   374a8:	ldr	r3, [r4, #20]
   374ac:	add	r6, r3, r6
   374b0:	str	r6, [r4, #20]
   374b4:	mov	r3, #34	; 0x22
   374b8:	mov	lr, #58	; 0x3a
   374bc:	lsr	r7, r5, #31
   374c0:	mov	ip, #32
   374c4:	uxth	r0, r5
   374c8:	strb	r3, [r6]
   374cc:	ldrb	r3, [r4, #26]
   374d0:	ldr	r1, [r4, #20]
   374d4:	clz	r3, r3
   374d8:	lsr	r3, r3, #5
   374dc:	add	r2, r1, r3
   374e0:	add	r2, r2, #1
   374e4:	str	r2, [r4, #20]
   374e8:	strb	lr, [r1, r3]
   374ec:	ldr	r3, [r4, #20]
   374f0:	strb	ip, [r3]
   374f4:	ldrb	r3, [r4, #25]
   374f8:	ldr	r2, [r4, #20]
   374fc:	adds	r3, r3, #0
   37500:	movne	r3, #1
   37504:	cmp	r5, #0
   37508:	add	r1, r2, r3
   3750c:	str	r1, [r4, #20]
   37510:	bge	37528 <flatcc_json_printer_int16_field@@Base+0x164>
   37514:	rsb	r0, r0, #0
   37518:	mov	ip, #45	; 0x2d
   3751c:	add	r1, r1, #1
   37520:	uxth	r0, r0
   37524:	strb	ip, [r2, r3]
   37528:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3752c:	ldr	r3, [r4, #20]
   37530:	add	r0, r7, r0
   37534:	add	r3, r3, r0
   37538:	str	r3, [r4, #20]
   3753c:	ldrd	r4, [sp]
   37540:	ldrd	r6, [sp, #8]
   37544:	ldr	r8, [sp, #16]
   37548:	add	sp, sp, #20
   3754c:	pop	{pc}		; (ldr pc, [sp], #4)
   37550:	ldrb	r2, [r0, #29]
   37554:	cmp	r2, #0
   37558:	beq	3753c <flatcc_json_printer_int16_field@@Base+0x178>
   3755c:	mov	r5, lr
   37560:	b	37418 <flatcc_json_printer_int16_field@@Base+0x54>
   37564:	mov	r2, r6
   37568:	mov	r1, r7
   3756c:	mov	r0, r4
   37570:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   37574:	ldr	r6, [r4, #20]
   37578:	b	374b4 <flatcc_json_printer_int16_field@@Base+0xf0>
   3757c:	add	r1, r2, #1
   37580:	mov	r3, #10
   37584:	str	r1, [r0, #20]
   37588:	strb	r3, [r2]
   3758c:	ldrb	r8, [r0, #25]
   37590:	ldr	r2, [r4, #32]
   37594:	ldr	r1, [r0, #16]
   37598:	ldr	r0, [r0, #20]
   3759c:	mul	r8, r2, r8
   375a0:	add	r3, r0, r8
   375a4:	cmp	r1, r3
   375a8:	bcs	375c0 <flatcc_json_printer_int16_field@@Base+0x1fc>
   375ac:	mov	r1, r8
   375b0:	mov	r0, r4
   375b4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   375b8:	ldr	r2, [r4, #20]
   375bc:	b	37470 <flatcc_json_printer_int16_field@@Base+0xac>
   375c0:	mov	r2, r8
   375c4:	mov	r1, #32
   375c8:	bl	1459c <memset@plt>
   375cc:	ldr	r2, [r4, #20]
   375d0:	add	r2, r2, r8
   375d4:	str	r2, [r4, #20]
   375d8:	b	37470 <flatcc_json_printer_int16_field@@Base+0xac>
   375dc:	ldrb	r2, [r0, #28]
   375e0:	cmp	r2, #0
   375e4:	beq	37418 <flatcc_json_printer_int16_field@@Base+0x54>
   375e8:	b	3753c <flatcc_json_printer_int16_field@@Base+0x178>

000375ec <flatcc_json_printer_int32_field@@Base>:
   375ec:	ldr	ip, [r1, #8]
   375f0:	add	r2, r2, #2
   375f4:	lsl	r2, r2, #1
   375f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   375fc:	strd	r6, [sp, #8]
   37600:	str	r8, [sp, #16]
   37604:	str	lr, [sp, #20]
   37608:	cmp	r2, ip
   3760c:	ldr	r6, [sp, #24]
   37610:	bge	37774 <flatcc_json_printer_int32_field@@Base+0x188>
   37614:	ldr	ip, [r1, #4]
   37618:	ldrh	r2, [ip, r2]
   3761c:	cmp	r2, #0
   37620:	beq	37774 <flatcc_json_printer_int32_field@@Base+0x188>
   37624:	ldr	ip, [r1]
   37628:	cmn	ip, r2
   3762c:	beq	37774 <flatcc_json_printer_int32_field@@Base+0x188>
   37630:	ldr	r5, [ip, r2]
   37634:	ldr	r2, [sp, #28]
   37638:	cmp	r2, r5
   3763c:	beq	37800 <flatcc_json_printer_int32_field@@Base+0x214>
   37640:	ldr	ip, [r1, #16]
   37644:	ldr	r2, [r0, #20]
   37648:	cmp	ip, #0
   3764c:	add	ip, ip, #1
   37650:	str	ip, [r1, #16]
   37654:	beq	3766c <flatcc_json_printer_int32_field@@Base+0x80>
   37658:	add	ip, r2, #1
   3765c:	mov	r1, #44	; 0x2c
   37660:	str	ip, [r0, #20]
   37664:	strb	r1, [r2]
   37668:	ldr	r2, [r0, #20]
   3766c:	mov	r7, r3
   37670:	mov	r4, r0
   37674:	ldrb	r1, [r0, #25]
   37678:	cmp	r1, #0
   3767c:	bne	377a0 <flatcc_json_printer_int32_field@@Base+0x1b4>
   37680:	ldr	r3, [r0, #16]
   37684:	cmp	r3, r2
   37688:	bhi	37698 <flatcc_json_printer_int32_field@@Base+0xac>
   3768c:	ldr	r3, [r0, #44]	; 0x2c
   37690:	blx	r3
   37694:	ldr	r2, [r4, #20]
   37698:	mov	r3, #34	; 0x22
   3769c:	strb	r3, [r2]
   376a0:	ldrb	r3, [r4, #26]
   376a4:	ldr	r2, [r4, #16]
   376a8:	ldr	r0, [r4, #20]
   376ac:	cmp	r3, #0
   376b0:	addeq	r0, r0, #1
   376b4:	add	r3, r0, r6
   376b8:	cmp	r2, r3
   376bc:	str	r0, [r4, #20]
   376c0:	bls	37788 <flatcc_json_printer_int32_field@@Base+0x19c>
   376c4:	mov	r2, r6
   376c8:	mov	r1, r7
   376cc:	bl	14524 <memcpy@plt>
   376d0:	ldr	r3, [r4, #20]
   376d4:	add	r6, r3, r6
   376d8:	str	r6, [r4, #20]
   376dc:	mov	r3, #34	; 0x22
   376e0:	mov	ip, #58	; 0x3a
   376e4:	lsr	r7, r5, #31
   376e8:	mov	r0, #32
   376ec:	strb	r3, [r6]
   376f0:	ldrb	r3, [r4, #26]
   376f4:	ldr	r1, [r4, #20]
   376f8:	clz	r3, r3
   376fc:	lsr	r3, r3, #5
   37700:	add	r2, r1, r3
   37704:	add	r2, r2, #1
   37708:	str	r2, [r4, #20]
   3770c:	strb	ip, [r1, r3]
   37710:	ldr	r3, [r4, #20]
   37714:	strb	r0, [r3]
   37718:	ldrb	r3, [r4, #25]
   3771c:	ldr	r2, [r4, #20]
   37720:	adds	r3, r3, #0
   37724:	movne	r3, #1
   37728:	cmp	r5, #0
   3772c:	add	r1, r2, r3
   37730:	str	r1, [r4, #20]
   37734:	bge	37748 <flatcc_json_printer_int32_field@@Base+0x15c>
   37738:	mov	r0, #45	; 0x2d
   3773c:	rsb	r5, r5, #0
   37740:	add	r1, r1, #1
   37744:	strb	r0, [r2, r3]
   37748:	mov	r0, r5
   3774c:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   37750:	ldr	r3, [r4, #20]
   37754:	add	r0, r7, r0
   37758:	add	r3, r3, r0
   3775c:	str	r3, [r4, #20]
   37760:	ldrd	r4, [sp]
   37764:	ldrd	r6, [sp, #8]
   37768:	ldr	r8, [sp, #16]
   3776c:	add	sp, sp, #20
   37770:	pop	{pc}		; (ldr pc, [sp], #4)
   37774:	ldrb	r2, [r0, #29]
   37778:	cmp	r2, #0
   3777c:	beq	37760 <flatcc_json_printer_int32_field@@Base+0x174>
   37780:	ldr	r5, [sp, #28]
   37784:	b	37640 <flatcc_json_printer_int32_field@@Base+0x54>
   37788:	mov	r2, r6
   3778c:	mov	r1, r7
   37790:	mov	r0, r4
   37794:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   37798:	ldr	r6, [r4, #20]
   3779c:	b	376dc <flatcc_json_printer_int32_field@@Base+0xf0>
   377a0:	add	r1, r2, #1
   377a4:	mov	r3, #10
   377a8:	str	r1, [r0, #20]
   377ac:	strb	r3, [r2]
   377b0:	ldrb	r8, [r0, #25]
   377b4:	ldr	r2, [r4, #32]
   377b8:	ldr	r1, [r0, #16]
   377bc:	ldr	r0, [r0, #20]
   377c0:	mul	r8, r2, r8
   377c4:	add	r3, r0, r8
   377c8:	cmp	r1, r3
   377cc:	bcs	377e4 <flatcc_json_printer_int32_field@@Base+0x1f8>
   377d0:	mov	r1, r8
   377d4:	mov	r0, r4
   377d8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   377dc:	ldr	r2, [r4, #20]
   377e0:	b	37698 <flatcc_json_printer_int32_field@@Base+0xac>
   377e4:	mov	r2, r8
   377e8:	mov	r1, #32
   377ec:	bl	1459c <memset@plt>
   377f0:	ldr	r2, [r4, #20]
   377f4:	add	r2, r2, r8
   377f8:	str	r2, [r4, #20]
   377fc:	b	37698 <flatcc_json_printer_int32_field@@Base+0xac>
   37800:	ldrb	r2, [r0, #28]
   37804:	cmp	r2, #0
   37808:	beq	37640 <flatcc_json_printer_int32_field@@Base+0x54>
   3780c:	b	37760 <flatcc_json_printer_int32_field@@Base+0x174>

00037810 <flatcc_json_printer_int64_field@@Base>:
   37810:	ldr	ip, [r1, #8]
   37814:	add	r2, r2, #2
   37818:	lsl	r2, r2, #1
   3781c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37820:	strd	r6, [sp, #8]
   37824:	strd	r8, [sp, #16]
   37828:	str	sl, [sp, #24]
   3782c:	cmp	r2, ip
   37830:	str	lr, [sp, #28]
   37834:	ldr	r5, [sp, #32]
   37838:	bge	379b0 <flatcc_json_printer_int64_field@@Base+0x1a0>
   3783c:	ldr	ip, [r1, #4]
   37840:	ldrh	r2, [ip, r2]
   37844:	cmp	r2, #0
   37848:	beq	379b0 <flatcc_json_printer_int64_field@@Base+0x1a0>
   3784c:	ldr	ip, [r1]
   37850:	cmn	ip, r2
   37854:	beq	379b0 <flatcc_json_printer_int64_field@@Base+0x1a0>
   37858:	ldrd	r6, [ip, r2]
   3785c:	ldrd	r8, [sp, #40]	; 0x28
   37860:	cmp	r9, r7
   37864:	cmpeq	r8, r6
   37868:	beq	37a3c <flatcc_json_printer_int64_field@@Base+0x22c>
   3786c:	ldr	ip, [r1, #16]
   37870:	ldr	r2, [r0, #20]
   37874:	cmp	ip, #0
   37878:	add	ip, ip, #1
   3787c:	str	ip, [r1, #16]
   37880:	beq	37898 <flatcc_json_printer_int64_field@@Base+0x88>
   37884:	add	ip, r2, #1
   37888:	mov	r1, #44	; 0x2c
   3788c:	str	ip, [r0, #20]
   37890:	strb	r1, [r2]
   37894:	ldr	r2, [r0, #20]
   37898:	mov	r8, r3
   3789c:	mov	r4, r0
   378a0:	ldrb	r1, [r0, #25]
   378a4:	cmp	r1, #0
   378a8:	bne	379dc <flatcc_json_printer_int64_field@@Base+0x1cc>
   378ac:	ldr	r3, [r0, #16]
   378b0:	cmp	r3, r2
   378b4:	bhi	378c4 <flatcc_json_printer_int64_field@@Base+0xb4>
   378b8:	ldr	r3, [r0, #44]	; 0x2c
   378bc:	blx	r3
   378c0:	ldr	r2, [r4, #20]
   378c4:	mov	r3, #34	; 0x22
   378c8:	strb	r3, [r2]
   378cc:	ldrb	r3, [r4, #26]
   378d0:	ldr	r2, [r4, #16]
   378d4:	ldr	r0, [r4, #20]
   378d8:	cmp	r3, #0
   378dc:	addeq	r0, r0, #1
   378e0:	add	r3, r0, r5
   378e4:	cmp	r2, r3
   378e8:	str	r0, [r4, #20]
   378ec:	bls	379c4 <flatcc_json_printer_int64_field@@Base+0x1b4>
   378f0:	mov	r2, r5
   378f4:	mov	r1, r8
   378f8:	bl	14524 <memcpy@plt>
   378fc:	ldr	r3, [r4, #20]
   37900:	add	r5, r3, r5
   37904:	str	r5, [r4, #20]
   37908:	mov	r3, #34	; 0x22
   3790c:	mov	ip, #58	; 0x3a
   37910:	lsr	r8, r7, #31
   37914:	mov	r0, #32
   37918:	strb	r3, [r5]
   3791c:	ldrb	r3, [r4, #26]
   37920:	ldr	r1, [r4, #20]
   37924:	clz	r3, r3
   37928:	lsr	r3, r3, #5
   3792c:	add	r2, r1, r3
   37930:	add	r2, r2, #1
   37934:	str	r2, [r4, #20]
   37938:	strb	ip, [r1, r3]
   3793c:	ldr	r3, [r4, #20]
   37940:	strb	r0, [r3]
   37944:	ldrb	r3, [r4, #25]
   37948:	ldr	r1, [r4, #20]
   3794c:	adds	r3, r3, #0
   37950:	movne	r3, #1
   37954:	cmp	r6, #0
   37958:	sbcs	r2, r7, #0
   3795c:	add	r2, r1, r3
   37960:	str	r2, [r4, #20]
   37964:	bge	3797c <flatcc_json_printer_int64_field@@Base+0x16c>
   37968:	rsbs	r6, r6, #0
   3796c:	mov	r0, #45	; 0x2d
   37970:	rsc	r7, r7, #0
   37974:	add	r2, r2, #1
   37978:	strb	r0, [r1, r3]
   3797c:	mov	r0, r6
   37980:	mov	r1, r7
   37984:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   37988:	ldr	r3, [r4, #20]
   3798c:	add	r0, r8, r0
   37990:	add	r3, r3, r0
   37994:	str	r3, [r4, #20]
   37998:	ldrd	r4, [sp]
   3799c:	ldrd	r6, [sp, #8]
   379a0:	ldrd	r8, [sp, #16]
   379a4:	ldr	sl, [sp, #24]
   379a8:	add	sp, sp, #28
   379ac:	pop	{pc}		; (ldr pc, [sp], #4)
   379b0:	ldrb	r2, [r0, #29]
   379b4:	cmp	r2, #0
   379b8:	beq	37998 <flatcc_json_printer_int64_field@@Base+0x188>
   379bc:	ldrd	r6, [sp, #40]	; 0x28
   379c0:	b	3786c <flatcc_json_printer_int64_field@@Base+0x5c>
   379c4:	mov	r2, r5
   379c8:	mov	r1, r8
   379cc:	mov	r0, r4
   379d0:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   379d4:	ldr	r5, [r4, #20]
   379d8:	b	37908 <flatcc_json_printer_int64_field@@Base+0xf8>
   379dc:	add	r1, r2, #1
   379e0:	mov	r3, #10
   379e4:	str	r1, [r0, #20]
   379e8:	strb	r3, [r2]
   379ec:	ldrb	r3, [r0, #25]
   379f0:	ldr	r2, [r4, #32]
   379f4:	ldr	r1, [r0, #16]
   379f8:	ldr	r0, [r0, #20]
   379fc:	mul	r9, r2, r3
   37a00:	add	r3, r0, r9
   37a04:	cmp	r1, r3
   37a08:	bcs	37a20 <flatcc_json_printer_int64_field@@Base+0x210>
   37a0c:	mov	r1, r9
   37a10:	mov	r0, r4
   37a14:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   37a18:	ldr	r2, [r4, #20]
   37a1c:	b	378c4 <flatcc_json_printer_int64_field@@Base+0xb4>
   37a20:	mov	r2, r9
   37a24:	mov	r1, #32
   37a28:	bl	1459c <memset@plt>
   37a2c:	ldr	r2, [r4, #20]
   37a30:	add	r2, r2, r9
   37a34:	str	r2, [r4, #20]
   37a38:	b	378c4 <flatcc_json_printer_int64_field@@Base+0xb4>
   37a3c:	ldrb	r2, [r0, #28]
   37a40:	cmp	r2, #0
   37a44:	beq	3786c <flatcc_json_printer_int64_field@@Base+0x5c>
   37a48:	b	37998 <flatcc_json_printer_int64_field@@Base+0x188>

00037a4c <flatcc_json_printer_bool_field@@Base>:
   37a4c:	ldr	ip, [r1, #8]
   37a50:	add	r2, r2, #2
   37a54:	lsl	r2, r2, #1
   37a58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37a5c:	strd	r6, [sp, #8]
   37a60:	str	r8, [sp, #16]
   37a64:	str	lr, [sp, #20]
   37a68:	cmp	r2, ip
   37a6c:	ldrb	lr, [sp, #28]
   37a70:	ldr	r6, [sp, #24]
   37a74:	bge	37bd4 <flatcc_json_printer_bool_field@@Base+0x188>
   37a78:	ldr	ip, [r1, #4]
   37a7c:	ldrh	r2, [ip, r2]
   37a80:	cmp	r2, #0
   37a84:	beq	37bd4 <flatcc_json_printer_bool_field@@Base+0x188>
   37a88:	ldr	ip, [r1]
   37a8c:	cmn	ip, r2
   37a90:	beq	37bd4 <flatcc_json_printer_bool_field@@Base+0x188>
   37a94:	ldrb	r5, [ip, r2]
   37a98:	cmp	lr, r5
   37a9c:	beq	37c84 <flatcc_json_printer_bool_field@@Base+0x238>
   37aa0:	ldr	ip, [r1, #16]
   37aa4:	ldr	r2, [r0, #20]
   37aa8:	cmp	ip, #0
   37aac:	add	ip, ip, #1
   37ab0:	str	ip, [r1, #16]
   37ab4:	beq	37acc <flatcc_json_printer_bool_field@@Base+0x80>
   37ab8:	add	ip, r2, #1
   37abc:	mov	r1, #44	; 0x2c
   37ac0:	str	ip, [r0, #20]
   37ac4:	strb	r1, [r2]
   37ac8:	ldr	r2, [r0, #20]
   37acc:	mov	r7, r3
   37ad0:	mov	r4, r0
   37ad4:	ldrb	r1, [r0, #25]
   37ad8:	cmp	r1, #0
   37adc:	bne	37c24 <flatcc_json_printer_bool_field@@Base+0x1d8>
   37ae0:	ldr	r3, [r0, #16]
   37ae4:	cmp	r3, r2
   37ae8:	bhi	37af8 <flatcc_json_printer_bool_field@@Base+0xac>
   37aec:	ldr	r3, [r0, #44]	; 0x2c
   37af0:	blx	r3
   37af4:	ldr	r2, [r4, #20]
   37af8:	mov	r3, #34	; 0x22
   37afc:	strb	r3, [r2]
   37b00:	ldrb	r3, [r4, #26]
   37b04:	ldr	r2, [r4, #16]
   37b08:	ldr	r0, [r4, #20]
   37b0c:	cmp	r3, #0
   37b10:	addeq	r0, r0, #1
   37b14:	add	r3, r0, r6
   37b18:	cmp	r2, r3
   37b1c:	str	r0, [r4, #20]
   37b20:	bls	37c0c <flatcc_json_printer_bool_field@@Base+0x1c0>
   37b24:	mov	r2, r6
   37b28:	mov	r1, r7
   37b2c:	bl	14524 <memcpy@plt>
   37b30:	ldr	r3, [r4, #20]
   37b34:	add	r6, r3, r6
   37b38:	str	r6, [r4, #20]
   37b3c:	mov	r3, #34	; 0x22
   37b40:	mov	ip, #58	; 0x3a
   37b44:	mov	r0, #32
   37b48:	strb	r3, [r6]
   37b4c:	ldrb	r3, [r4, #26]
   37b50:	ldr	r1, [r4, #20]
   37b54:	clz	r3, r3
   37b58:	lsr	r3, r3, #5
   37b5c:	add	r2, r1, r3
   37b60:	add	r2, r2, #1
   37b64:	str	r2, [r4, #20]
   37b68:	strb	ip, [r1, r3]
   37b6c:	ldr	r3, [r4, #20]
   37b70:	strb	r0, [r3]
   37b74:	ldrb	r3, [r4, #25]
   37b78:	ldr	r1, [r4, #20]
   37b7c:	adds	r3, r3, #0
   37b80:	movne	r3, #1
   37b84:	cmp	r5, #0
   37b88:	add	r2, r1, r3
   37b8c:	str	r2, [r4, #20]
   37b90:	beq	37be8 <flatcc_json_printer_bool_field@@Base+0x19c>
   37b94:	ldr	ip, [pc, #248]	; 37c94 <flatcc_json_printer_bool_field@@Base+0x248>
   37b98:	movw	r0, #32560	; 0x7f30
   37b9c:	movt	r0, #4
   37ba0:	ldr	lr, [r0, #1768]	; 0x6e8
   37ba4:	mov	r0, #4
   37ba8:	ldrb	ip, [ip, #4]
   37bac:	str	lr, [r1, r3]
   37bb0:	strb	ip, [r2, #4]
   37bb4:	ldr	r3, [r4, #20]
   37bb8:	add	r3, r3, r0
   37bbc:	str	r3, [r4, #20]
   37bc0:	ldrd	r4, [sp]
   37bc4:	ldrd	r6, [sp, #8]
   37bc8:	ldr	r8, [sp, #16]
   37bcc:	add	sp, sp, #20
   37bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   37bd4:	ldrb	r2, [r0, #29]
   37bd8:	cmp	r2, #0
   37bdc:	beq	37bc0 <flatcc_json_printer_bool_field@@Base+0x174>
   37be0:	mov	r5, lr
   37be4:	b	37aa0 <flatcc_json_printer_bool_field@@Base+0x54>
   37be8:	movw	r0, #32560	; 0x7f30
   37bec:	movt	r0, #4
   37bf0:	add	ip, r0, #1776	; 0x6f0
   37bf4:	ldr	lr, [r0, #1776]	; 0x6f0
   37bf8:	mov	r0, #5
   37bfc:	ldrh	ip, [ip, #4]
   37c00:	str	lr, [r1, r3]
   37c04:	strh	ip, [r2, #4]
   37c08:	b	37bb4 <flatcc_json_printer_bool_field@@Base+0x168>
   37c0c:	mov	r2, r6
   37c10:	mov	r1, r7
   37c14:	mov	r0, r4
   37c18:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   37c1c:	ldr	r6, [r4, #20]
   37c20:	b	37b3c <flatcc_json_printer_bool_field@@Base+0xf0>
   37c24:	add	r1, r2, #1
   37c28:	mov	r3, #10
   37c2c:	str	r1, [r0, #20]
   37c30:	strb	r3, [r2]
   37c34:	ldrb	r8, [r0, #25]
   37c38:	ldr	r2, [r4, #32]
   37c3c:	ldr	r1, [r0, #16]
   37c40:	ldr	r0, [r0, #20]
   37c44:	mul	r8, r2, r8
   37c48:	add	r3, r0, r8
   37c4c:	cmp	r1, r3
   37c50:	bcs	37c68 <flatcc_json_printer_bool_field@@Base+0x21c>
   37c54:	mov	r1, r8
   37c58:	mov	r0, r4
   37c5c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   37c60:	ldr	r2, [r4, #20]
   37c64:	b	37af8 <flatcc_json_printer_bool_field@@Base+0xac>
   37c68:	mov	r2, r8
   37c6c:	mov	r1, #32
   37c70:	bl	1459c <memset@plt>
   37c74:	ldr	r2, [r4, #20]
   37c78:	add	r2, r2, r8
   37c7c:	str	r2, [r4, #20]
   37c80:	b	37af8 <flatcc_json_printer_bool_field@@Base+0xac>
   37c84:	ldrb	r2, [r0, #28]
   37c88:	cmp	r2, #0
   37c8c:	beq	37aa0 <flatcc_json_printer_bool_field@@Base+0x54>
   37c90:	b	37bc0 <flatcc_json_printer_bool_field@@Base+0x174>
   37c94:	andeq	r8, r4, r8, lsl r6

00037c98 <flatcc_json_printer_float_field@@Base>:
   37c98:	ldr	ip, [r1, #8]
   37c9c:	add	r2, r2, #2
   37ca0:	lsl	r2, r2, #1
   37ca4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37ca8:	strd	r6, [sp, #8]
   37cac:	str	r8, [sp, #16]
   37cb0:	str	lr, [sp, #20]
   37cb4:	cmp	r2, ip
   37cb8:	vpush	{d8}
   37cbc:	ldr	r5, [sp, #32]
   37cc0:	bge	37d14 <flatcc_json_printer_float_field@@Base+0x7c>
   37cc4:	ldr	ip, [r1, #4]
   37cc8:	ldrh	ip, [ip, r2]
   37ccc:	cmp	ip, #0
   37cd0:	beq	37d14 <flatcc_json_printer_float_field@@Base+0x7c>
   37cd4:	ldr	r2, [r1]
   37cd8:	adds	r2, r2, ip
   37cdc:	beq	37d14 <flatcc_json_printer_float_field@@Base+0x7c>
   37ce0:	vldr	s16, [r2]
   37ce4:	vcmp.f32	s0, s16
   37ce8:	vmrs	APSR_nzcv, fpscr
   37cec:	bne	37d24 <flatcc_json_printer_float_field@@Base+0x8c>
   37cf0:	ldrb	r2, [r0, #28]
   37cf4:	cmp	r2, #0
   37cf8:	beq	37d24 <flatcc_json_printer_float_field@@Base+0x8c>
   37cfc:	vpop	{d8}
   37d00:	ldrd	r4, [sp]
   37d04:	ldrd	r6, [sp, #8]
   37d08:	ldr	r8, [sp, #16]
   37d0c:	add	sp, sp, #20
   37d10:	pop	{pc}		; (ldr pc, [sp], #4)
   37d14:	ldrb	r2, [r0, #29]
   37d18:	cmp	r2, #0
   37d1c:	beq	37cfc <flatcc_json_printer_float_field@@Base+0x64>
   37d20:	vmov.f32	s16, s0
   37d24:	ldr	ip, [r1, #16]
   37d28:	ldr	r2, [r0, #20]
   37d2c:	cmp	ip, #0
   37d30:	add	ip, ip, #1
   37d34:	str	ip, [r1, #16]
   37d38:	beq	37d50 <flatcc_json_printer_float_field@@Base+0xb8>
   37d3c:	add	ip, r2, #1
   37d40:	mov	r1, #44	; 0x2c
   37d44:	str	ip, [r0, #20]
   37d48:	strb	r1, [r2]
   37d4c:	ldr	r2, [r0, #20]
   37d50:	mov	r6, r3
   37d54:	mov	r4, r0
   37d58:	ldrb	r1, [r0, #25]
   37d5c:	cmp	r1, #0
   37d60:	bne	37e40 <flatcc_json_printer_float_field@@Base+0x1a8>
   37d64:	ldr	r3, [r0, #16]
   37d68:	cmp	r3, r2
   37d6c:	bhi	37d7c <flatcc_json_printer_float_field@@Base+0xe4>
   37d70:	ldr	r3, [r0, #44]	; 0x2c
   37d74:	blx	r3
   37d78:	ldr	r2, [r4, #20]
   37d7c:	mov	r3, #34	; 0x22
   37d80:	strb	r3, [r2]
   37d84:	ldrb	r3, [r4, #26]
   37d88:	ldr	r2, [r4, #16]
   37d8c:	ldr	r0, [r4, #20]
   37d90:	cmp	r3, #0
   37d94:	addeq	r0, r0, #1
   37d98:	add	r3, r0, r5
   37d9c:	cmp	r2, r3
   37da0:	str	r0, [r4, #20]
   37da4:	bls	37e28 <flatcc_json_printer_float_field@@Base+0x190>
   37da8:	mov	r2, r5
   37dac:	mov	r1, r6
   37db0:	bl	14524 <memcpy@plt>
   37db4:	ldr	r3, [r4, #20]
   37db8:	add	r5, r3, r5
   37dbc:	str	r5, [r4, #20]
   37dc0:	mov	r3, #34	; 0x22
   37dc4:	mov	ip, #58	; 0x3a
   37dc8:	vcvt.f64.f32	d0, s16
   37dcc:	mov	r0, #32
   37dd0:	strb	r3, [r5]
   37dd4:	ldrb	r3, [r4, #26]
   37dd8:	ldr	r1, [r4, #20]
   37ddc:	clz	r3, r3
   37de0:	lsr	r3, r3, #5
   37de4:	add	r2, r1, r3
   37de8:	add	r2, r2, #1
   37dec:	str	r2, [r4, #20]
   37df0:	strb	ip, [r1, r3]
   37df4:	ldr	r3, [r4, #20]
   37df8:	strb	r0, [r3]
   37dfc:	ldrb	r2, [r4, #25]
   37e00:	ldr	r3, [r4, #20]
   37e04:	cmp	r2, #0
   37e08:	addne	r3, r3, #1
   37e0c:	mov	r0, r3
   37e10:	str	r3, [r4, #20]
   37e14:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   37e18:	ldr	r3, [r4, #20]
   37e1c:	add	r0, r3, r0
   37e20:	str	r0, [r4, #20]
   37e24:	b	37cfc <flatcc_json_printer_float_field@@Base+0x64>
   37e28:	mov	r2, r5
   37e2c:	mov	r1, r6
   37e30:	mov	r0, r4
   37e34:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   37e38:	ldr	r5, [r4, #20]
   37e3c:	b	37dc0 <flatcc_json_printer_float_field@@Base+0x128>
   37e40:	add	r1, r2, #1
   37e44:	mov	r3, #10
   37e48:	str	r1, [r0, #20]
   37e4c:	strb	r3, [r2]
   37e50:	ldrb	r7, [r0, #25]
   37e54:	ldr	r2, [r4, #32]
   37e58:	ldr	r1, [r0, #16]
   37e5c:	ldr	r0, [r0, #20]
   37e60:	mul	r7, r2, r7
   37e64:	add	r3, r0, r7
   37e68:	cmp	r1, r3
   37e6c:	bcs	37e84 <flatcc_json_printer_float_field@@Base+0x1ec>
   37e70:	mov	r1, r7
   37e74:	mov	r0, r4
   37e78:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   37e7c:	ldr	r2, [r4, #20]
   37e80:	b	37d7c <flatcc_json_printer_float_field@@Base+0xe4>
   37e84:	mov	r2, r7
   37e88:	mov	r1, #32
   37e8c:	bl	1459c <memset@plt>
   37e90:	ldr	r2, [r4, #20]
   37e94:	add	r2, r2, r7
   37e98:	str	r2, [r4, #20]
   37e9c:	b	37d7c <flatcc_json_printer_float_field@@Base+0xe4>

00037ea0 <flatcc_json_printer_double_field@@Base>:
   37ea0:	ldr	ip, [r1, #8]
   37ea4:	add	r2, r2, #2
   37ea8:	lsl	r2, r2, #1
   37eac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37eb0:	strd	r6, [sp, #8]
   37eb4:	str	r8, [sp, #16]
   37eb8:	str	lr, [sp, #20]
   37ebc:	cmp	r2, ip
   37ec0:	vpush	{d8}
   37ec4:	ldr	r5, [sp, #32]
   37ec8:	bge	37f1c <flatcc_json_printer_double_field@@Base+0x7c>
   37ecc:	ldr	ip, [r1, #4]
   37ed0:	ldrh	ip, [ip, r2]
   37ed4:	cmp	ip, #0
   37ed8:	beq	37f1c <flatcc_json_printer_double_field@@Base+0x7c>
   37edc:	ldr	r2, [r1]
   37ee0:	adds	r2, r2, ip
   37ee4:	beq	37f1c <flatcc_json_printer_double_field@@Base+0x7c>
   37ee8:	vldr	d8, [r2]
   37eec:	vcmp.f64	d0, d8
   37ef0:	vmrs	APSR_nzcv, fpscr
   37ef4:	bne	37f2c <flatcc_json_printer_double_field@@Base+0x8c>
   37ef8:	ldrb	r2, [r0, #28]
   37efc:	cmp	r2, #0
   37f00:	beq	37f2c <flatcc_json_printer_double_field@@Base+0x8c>
   37f04:	vpop	{d8}
   37f08:	ldrd	r4, [sp]
   37f0c:	ldrd	r6, [sp, #8]
   37f10:	ldr	r8, [sp, #16]
   37f14:	add	sp, sp, #20
   37f18:	pop	{pc}		; (ldr pc, [sp], #4)
   37f1c:	ldrb	r2, [r0, #29]
   37f20:	cmp	r2, #0
   37f24:	beq	37f04 <flatcc_json_printer_double_field@@Base+0x64>
   37f28:	vmov.f64	d8, d0
   37f2c:	ldr	ip, [r1, #16]
   37f30:	ldr	r2, [r0, #20]
   37f34:	cmp	ip, #0
   37f38:	add	ip, ip, #1
   37f3c:	str	ip, [r1, #16]
   37f40:	beq	37f58 <flatcc_json_printer_double_field@@Base+0xb8>
   37f44:	add	ip, r2, #1
   37f48:	mov	r1, #44	; 0x2c
   37f4c:	str	ip, [r0, #20]
   37f50:	strb	r1, [r2]
   37f54:	ldr	r2, [r0, #20]
   37f58:	mov	r6, r3
   37f5c:	mov	r4, r0
   37f60:	ldrb	r1, [r0, #25]
   37f64:	cmp	r1, #0
   37f68:	bne	38048 <flatcc_json_printer_double_field@@Base+0x1a8>
   37f6c:	ldr	r3, [r0, #16]
   37f70:	cmp	r3, r2
   37f74:	bhi	37f84 <flatcc_json_printer_double_field@@Base+0xe4>
   37f78:	ldr	r3, [r0, #44]	; 0x2c
   37f7c:	blx	r3
   37f80:	ldr	r2, [r4, #20]
   37f84:	mov	r3, #34	; 0x22
   37f88:	strb	r3, [r2]
   37f8c:	ldrb	r3, [r4, #26]
   37f90:	ldr	r2, [r4, #16]
   37f94:	ldr	r0, [r4, #20]
   37f98:	cmp	r3, #0
   37f9c:	addeq	r0, r0, #1
   37fa0:	add	r3, r0, r5
   37fa4:	cmp	r2, r3
   37fa8:	str	r0, [r4, #20]
   37fac:	bls	38030 <flatcc_json_printer_double_field@@Base+0x190>
   37fb0:	mov	r2, r5
   37fb4:	mov	r1, r6
   37fb8:	bl	14524 <memcpy@plt>
   37fbc:	ldr	r3, [r4, #20]
   37fc0:	add	r5, r3, r5
   37fc4:	str	r5, [r4, #20]
   37fc8:	mov	r3, #34	; 0x22
   37fcc:	mov	ip, #58	; 0x3a
   37fd0:	vmov.f64	d0, d8
   37fd4:	mov	r0, #32
   37fd8:	strb	r3, [r5]
   37fdc:	ldrb	r3, [r4, #26]
   37fe0:	ldr	r1, [r4, #20]
   37fe4:	clz	r3, r3
   37fe8:	lsr	r3, r3, #5
   37fec:	add	r2, r1, r3
   37ff0:	add	r2, r2, #1
   37ff4:	str	r2, [r4, #20]
   37ff8:	strb	ip, [r1, r3]
   37ffc:	ldr	r3, [r4, #20]
   38000:	strb	r0, [r3]
   38004:	ldrb	r2, [r4, #25]
   38008:	ldr	r3, [r4, #20]
   3800c:	cmp	r2, #0
   38010:	addne	r3, r3, #1
   38014:	mov	r0, r3
   38018:	str	r3, [r4, #20]
   3801c:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   38020:	ldr	r3, [r4, #20]
   38024:	add	r0, r3, r0
   38028:	str	r0, [r4, #20]
   3802c:	b	37f04 <flatcc_json_printer_double_field@@Base+0x64>
   38030:	mov	r2, r5
   38034:	mov	r1, r6
   38038:	mov	r0, r4
   3803c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   38040:	ldr	r5, [r4, #20]
   38044:	b	37fc8 <flatcc_json_printer_double_field@@Base+0x128>
   38048:	add	r1, r2, #1
   3804c:	mov	r3, #10
   38050:	str	r1, [r0, #20]
   38054:	strb	r3, [r2]
   38058:	ldrb	r7, [r0, #25]
   3805c:	ldr	r2, [r4, #32]
   38060:	ldr	r1, [r0, #16]
   38064:	ldr	r0, [r0, #20]
   38068:	mul	r7, r2, r7
   3806c:	add	r3, r0, r7
   38070:	cmp	r1, r3
   38074:	bcs	3808c <flatcc_json_printer_double_field@@Base+0x1ec>
   38078:	mov	r1, r7
   3807c:	mov	r0, r4
   38080:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   38084:	ldr	r2, [r4, #20]
   38088:	b	37f84 <flatcc_json_printer_double_field@@Base+0xe4>
   3808c:	mov	r2, r7
   38090:	mov	r1, #32
   38094:	bl	1459c <memset@plt>
   38098:	ldr	r2, [r4, #20]
   3809c:	add	r2, r2, r7
   380a0:	str	r2, [r4, #20]
   380a4:	b	37f84 <flatcc_json_printer_double_field@@Base+0xe4>

000380a8 <flatcc_json_printer_uint8_enum_field@@Base>:
   380a8:	ldr	ip, [r1, #8]
   380ac:	add	r2, r2, #2
   380b0:	lsl	r2, r2, #1
   380b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   380b8:	strd	r6, [sp, #8]
   380bc:	strd	r8, [sp, #16]
   380c0:	str	sl, [sp, #24]
   380c4:	cmp	r2, ip
   380c8:	str	lr, [sp, #28]
   380cc:	ldrb	lr, [sp, #36]	; 0x24
   380d0:	ldr	r7, [sp, #32]
   380d4:	ldr	r5, [sp, #40]	; 0x28
   380d8:	bge	38220 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   380dc:	ldr	ip, [r1, #4]
   380e0:	ldrh	r2, [ip, r2]
   380e4:	cmp	r2, #0
   380e8:	beq	38220 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   380ec:	ldr	ip, [r1]
   380f0:	cmn	ip, r2
   380f4:	beq	38220 <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   380f8:	ldrb	r6, [ip, r2]
   380fc:	cmp	lr, r6
   38100:	beq	382d8 <flatcc_json_printer_uint8_enum_field@@Base+0x230>
   38104:	ldr	ip, [r1, #16]
   38108:	ldr	r2, [r0, #20]
   3810c:	cmp	ip, #0
   38110:	add	ip, ip, #1
   38114:	str	ip, [r1, #16]
   38118:	beq	38130 <flatcc_json_printer_uint8_enum_field@@Base+0x88>
   3811c:	add	ip, r2, #1
   38120:	mov	r1, #44	; 0x2c
   38124:	str	ip, [r0, #20]
   38128:	strb	r1, [r2]
   3812c:	ldr	r2, [r0, #20]
   38130:	mov	r8, r3
   38134:	mov	r4, r0
   38138:	ldrb	r1, [r0, #25]
   3813c:	cmp	r1, #0
   38140:	bne	38278 <flatcc_json_printer_uint8_enum_field@@Base+0x1d0>
   38144:	ldr	r3, [r0, #16]
   38148:	cmp	r3, r2
   3814c:	bhi	3815c <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   38150:	ldr	r3, [r0, #44]	; 0x2c
   38154:	blx	r3
   38158:	ldr	r2, [r4, #20]
   3815c:	mov	r3, #34	; 0x22
   38160:	strb	r3, [r2]
   38164:	ldrb	r3, [r4, #26]
   38168:	ldr	r2, [r4, #16]
   3816c:	ldr	r0, [r4, #20]
   38170:	cmp	r3, #0
   38174:	addeq	r0, r0, #1
   38178:	add	r3, r0, r7
   3817c:	cmp	r2, r3
   38180:	str	r0, [r4, #20]
   38184:	bls	38260 <flatcc_json_printer_uint8_enum_field@@Base+0x1b8>
   38188:	mov	r2, r7
   3818c:	mov	r1, r8
   38190:	bl	14524 <memcpy@plt>
   38194:	ldr	r3, [r4, #20]
   38198:	add	r7, r3, r7
   3819c:	str	r7, [r4, #20]
   381a0:	mov	r3, #34	; 0x22
   381a4:	mov	ip, #58	; 0x3a
   381a8:	mov	r0, #32
   381ac:	strb	r3, [r7]
   381b0:	ldrb	r3, [r4, #26]
   381b4:	ldr	r1, [r4, #20]
   381b8:	clz	r3, r3
   381bc:	lsr	r3, r3, #5
   381c0:	add	r2, r1, r3
   381c4:	add	r2, r2, #1
   381c8:	str	r2, [r4, #20]
   381cc:	strb	ip, [r1, r3]
   381d0:	ldr	r3, [r4, #20]
   381d4:	strb	r0, [r3]
   381d8:	ldrb	r2, [r4, #25]
   381dc:	ldr	r1, [r4, #20]
   381e0:	ldrb	r3, [r4, #27]
   381e4:	cmp	r2, #0
   381e8:	addne	r1, r1, #1
   381ec:	cmp	r3, #0
   381f0:	str	r1, [r4, #20]
   381f4:	bne	38234 <flatcc_json_printer_uint8_enum_field@@Base+0x18c>
   381f8:	mov	r1, r6
   381fc:	mov	r0, r4
   38200:	ldrd	r6, [sp, #8]
   38204:	mov	r3, r5
   38208:	ldrd	r4, [sp]
   3820c:	ldrd	r8, [sp, #16]
   38210:	ldr	sl, [sp, #24]
   38214:	ldr	lr, [sp, #28]
   38218:	add	sp, sp, #32
   3821c:	bx	r3
   38220:	ldrb	r2, [r0, #29]
   38224:	cmp	r2, #0
   38228:	beq	38248 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>
   3822c:	mov	r6, lr
   38230:	b	38104 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   38234:	mov	r0, r6
   38238:	bl	3447c <flatcc_json_parser_struct_as_root@@Base+0xf5c>
   3823c:	ldr	r3, [r4, #20]
   38240:	add	r0, r3, r0
   38244:	str	r0, [r4, #20]
   38248:	ldrd	r4, [sp]
   3824c:	ldrd	r6, [sp, #8]
   38250:	ldrd	r8, [sp, #16]
   38254:	ldr	sl, [sp, #24]
   38258:	add	sp, sp, #28
   3825c:	pop	{pc}		; (ldr pc, [sp], #4)
   38260:	mov	r2, r7
   38264:	mov	r1, r8
   38268:	mov	r0, r4
   3826c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   38270:	ldr	r7, [r4, #20]
   38274:	b	381a0 <flatcc_json_printer_uint8_enum_field@@Base+0xf8>
   38278:	add	r1, r2, #1
   3827c:	mov	r3, #10
   38280:	str	r1, [r0, #20]
   38284:	strb	r3, [r2]
   38288:	ldrb	r3, [r0, #25]
   3828c:	ldr	r2, [r4, #32]
   38290:	ldr	r1, [r0, #16]
   38294:	ldr	r0, [r0, #20]
   38298:	mul	r9, r2, r3
   3829c:	add	r3, r0, r9
   382a0:	cmp	r1, r3
   382a4:	bcs	382bc <flatcc_json_printer_uint8_enum_field@@Base+0x214>
   382a8:	mov	r1, r9
   382ac:	mov	r0, r4
   382b0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   382b4:	ldr	r2, [r4, #20]
   382b8:	b	3815c <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   382bc:	mov	r2, r9
   382c0:	mov	r1, #32
   382c4:	bl	1459c <memset@plt>
   382c8:	ldr	r2, [r4, #20]
   382cc:	add	r2, r2, r9
   382d0:	str	r2, [r4, #20]
   382d4:	b	3815c <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   382d8:	ldrb	r2, [r0, #28]
   382dc:	cmp	r2, #0
   382e0:	beq	38104 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   382e4:	b	38248 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>

000382e8 <flatcc_json_printer_uint16_enum_field@@Base>:
   382e8:	ldr	ip, [r1, #8]
   382ec:	add	r2, r2, #2
   382f0:	lsl	r2, r2, #1
   382f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   382f8:	strd	r6, [sp, #8]
   382fc:	strd	r8, [sp, #16]
   38300:	str	sl, [sp, #24]
   38304:	cmp	r2, ip
   38308:	str	lr, [sp, #28]
   3830c:	ldrh	lr, [sp, #36]	; 0x24
   38310:	ldr	r7, [sp, #32]
   38314:	ldr	r5, [sp, #40]	; 0x28
   38318:	bge	38460 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   3831c:	ldr	ip, [r1, #4]
   38320:	ldrh	r2, [ip, r2]
   38324:	cmp	r2, #0
   38328:	beq	38460 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   3832c:	ldr	ip, [r1]
   38330:	cmn	ip, r2
   38334:	beq	38460 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   38338:	ldrh	r6, [ip, r2]
   3833c:	cmp	lr, r6
   38340:	beq	38518 <flatcc_json_printer_uint16_enum_field@@Base+0x230>
   38344:	ldr	ip, [r1, #16]
   38348:	ldr	r2, [r0, #20]
   3834c:	cmp	ip, #0
   38350:	add	ip, ip, #1
   38354:	str	ip, [r1, #16]
   38358:	beq	38370 <flatcc_json_printer_uint16_enum_field@@Base+0x88>
   3835c:	add	ip, r2, #1
   38360:	mov	r1, #44	; 0x2c
   38364:	str	ip, [r0, #20]
   38368:	strb	r1, [r2]
   3836c:	ldr	r2, [r0, #20]
   38370:	mov	r8, r3
   38374:	mov	r4, r0
   38378:	ldrb	r1, [r0, #25]
   3837c:	cmp	r1, #0
   38380:	bne	384b8 <flatcc_json_printer_uint16_enum_field@@Base+0x1d0>
   38384:	ldr	r3, [r0, #16]
   38388:	cmp	r3, r2
   3838c:	bhi	3839c <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   38390:	ldr	r3, [r0, #44]	; 0x2c
   38394:	blx	r3
   38398:	ldr	r2, [r4, #20]
   3839c:	mov	r3, #34	; 0x22
   383a0:	strb	r3, [r2]
   383a4:	ldrb	r3, [r4, #26]
   383a8:	ldr	r2, [r4, #16]
   383ac:	ldr	r0, [r4, #20]
   383b0:	cmp	r3, #0
   383b4:	addeq	r0, r0, #1
   383b8:	add	r3, r0, r7
   383bc:	cmp	r2, r3
   383c0:	str	r0, [r4, #20]
   383c4:	bls	384a0 <flatcc_json_printer_uint16_enum_field@@Base+0x1b8>
   383c8:	mov	r2, r7
   383cc:	mov	r1, r8
   383d0:	bl	14524 <memcpy@plt>
   383d4:	ldr	r3, [r4, #20]
   383d8:	add	r7, r3, r7
   383dc:	str	r7, [r4, #20]
   383e0:	mov	r3, #34	; 0x22
   383e4:	mov	ip, #58	; 0x3a
   383e8:	mov	r0, #32
   383ec:	strb	r3, [r7]
   383f0:	ldrb	r3, [r4, #26]
   383f4:	ldr	r1, [r4, #20]
   383f8:	clz	r3, r3
   383fc:	lsr	r3, r3, #5
   38400:	add	r2, r1, r3
   38404:	add	r2, r2, #1
   38408:	str	r2, [r4, #20]
   3840c:	strb	ip, [r1, r3]
   38410:	ldr	r3, [r4, #20]
   38414:	strb	r0, [r3]
   38418:	ldrb	r2, [r4, #25]
   3841c:	ldr	r1, [r4, #20]
   38420:	ldrb	r3, [r4, #27]
   38424:	cmp	r2, #0
   38428:	addne	r1, r1, #1
   3842c:	cmp	r3, #0
   38430:	str	r1, [r4, #20]
   38434:	bne	38474 <flatcc_json_printer_uint16_enum_field@@Base+0x18c>
   38438:	mov	r1, r6
   3843c:	mov	r0, r4
   38440:	ldrd	r6, [sp, #8]
   38444:	mov	r3, r5
   38448:	ldrd	r4, [sp]
   3844c:	ldrd	r8, [sp, #16]
   38450:	ldr	sl, [sp, #24]
   38454:	ldr	lr, [sp, #28]
   38458:	add	sp, sp, #32
   3845c:	bx	r3
   38460:	ldrb	r2, [r0, #29]
   38464:	cmp	r2, #0
   38468:	beq	38488 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>
   3846c:	mov	r6, lr
   38470:	b	38344 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   38474:	mov	r0, r6
   38478:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3847c:	ldr	r3, [r4, #20]
   38480:	add	r0, r3, r0
   38484:	str	r0, [r4, #20]
   38488:	ldrd	r4, [sp]
   3848c:	ldrd	r6, [sp, #8]
   38490:	ldrd	r8, [sp, #16]
   38494:	ldr	sl, [sp, #24]
   38498:	add	sp, sp, #28
   3849c:	pop	{pc}		; (ldr pc, [sp], #4)
   384a0:	mov	r2, r7
   384a4:	mov	r1, r8
   384a8:	mov	r0, r4
   384ac:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   384b0:	ldr	r7, [r4, #20]
   384b4:	b	383e0 <flatcc_json_printer_uint16_enum_field@@Base+0xf8>
   384b8:	add	r1, r2, #1
   384bc:	mov	r3, #10
   384c0:	str	r1, [r0, #20]
   384c4:	strb	r3, [r2]
   384c8:	ldrb	r3, [r0, #25]
   384cc:	ldr	r2, [r4, #32]
   384d0:	ldr	r1, [r0, #16]
   384d4:	ldr	r0, [r0, #20]
   384d8:	mul	r9, r2, r3
   384dc:	add	r3, r0, r9
   384e0:	cmp	r1, r3
   384e4:	bcs	384fc <flatcc_json_printer_uint16_enum_field@@Base+0x214>
   384e8:	mov	r1, r9
   384ec:	mov	r0, r4
   384f0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   384f4:	ldr	r2, [r4, #20]
   384f8:	b	3839c <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   384fc:	mov	r2, r9
   38500:	mov	r1, #32
   38504:	bl	1459c <memset@plt>
   38508:	ldr	r2, [r4, #20]
   3850c:	add	r2, r2, r9
   38510:	str	r2, [r4, #20]
   38514:	b	3839c <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   38518:	ldrb	r2, [r0, #28]
   3851c:	cmp	r2, #0
   38520:	beq	38344 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   38524:	b	38488 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>

00038528 <flatcc_json_printer_uint32_enum_field@@Base>:
   38528:	ldr	ip, [r1, #8]
   3852c:	add	r2, r2, #2
   38530:	lsl	r2, r2, #1
   38534:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38538:	strd	r6, [sp, #8]
   3853c:	strd	r8, [sp, #16]
   38540:	str	sl, [sp, #24]
   38544:	cmp	r2, ip
   38548:	str	lr, [sp, #28]
   3854c:	ldr	r5, [sp, #32]
   38550:	ldr	lr, [sp, #36]	; 0x24
   38554:	ldr	r6, [sp, #40]	; 0x28
   38558:	bge	386a0 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   3855c:	ldr	ip, [r1, #4]
   38560:	ldrh	r2, [ip, r2]
   38564:	cmp	r2, #0
   38568:	beq	386a0 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   3856c:	ldr	ip, [r1]
   38570:	cmn	ip, r2
   38574:	beq	386a0 <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   38578:	ldr	r7, [ip, r2]
   3857c:	cmp	lr, r7
   38580:	beq	38758 <flatcc_json_printer_uint32_enum_field@@Base+0x230>
   38584:	ldr	ip, [r1, #16]
   38588:	ldr	r2, [r0, #20]
   3858c:	cmp	ip, #0
   38590:	add	ip, ip, #1
   38594:	str	ip, [r1, #16]
   38598:	beq	385b0 <flatcc_json_printer_uint32_enum_field@@Base+0x88>
   3859c:	add	ip, r2, #1
   385a0:	mov	r1, #44	; 0x2c
   385a4:	str	ip, [r0, #20]
   385a8:	strb	r1, [r2]
   385ac:	ldr	r2, [r0, #20]
   385b0:	mov	r8, r3
   385b4:	mov	r4, r0
   385b8:	ldrb	r1, [r0, #25]
   385bc:	cmp	r1, #0
   385c0:	bne	386f8 <flatcc_json_printer_uint32_enum_field@@Base+0x1d0>
   385c4:	ldr	r3, [r0, #16]
   385c8:	cmp	r3, r2
   385cc:	bhi	385dc <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   385d0:	ldr	r3, [r0, #44]	; 0x2c
   385d4:	blx	r3
   385d8:	ldr	r2, [r4, #20]
   385dc:	mov	r3, #34	; 0x22
   385e0:	strb	r3, [r2]
   385e4:	ldrb	r3, [r4, #26]
   385e8:	ldr	r2, [r4, #16]
   385ec:	ldr	r0, [r4, #20]
   385f0:	cmp	r3, #0
   385f4:	addeq	r0, r0, #1
   385f8:	add	r3, r0, r5
   385fc:	cmp	r2, r3
   38600:	str	r0, [r4, #20]
   38604:	bls	386e0 <flatcc_json_printer_uint32_enum_field@@Base+0x1b8>
   38608:	mov	r2, r5
   3860c:	mov	r1, r8
   38610:	bl	14524 <memcpy@plt>
   38614:	ldr	r3, [r4, #20]
   38618:	add	r5, r3, r5
   3861c:	str	r5, [r4, #20]
   38620:	mov	r3, #34	; 0x22
   38624:	mov	ip, #58	; 0x3a
   38628:	mov	r0, #32
   3862c:	strb	r3, [r5]
   38630:	ldrb	r3, [r4, #26]
   38634:	ldr	r1, [r4, #20]
   38638:	clz	r3, r3
   3863c:	lsr	r3, r3, #5
   38640:	add	r2, r1, r3
   38644:	add	r2, r2, #1
   38648:	str	r2, [r4, #20]
   3864c:	strb	ip, [r1, r3]
   38650:	ldr	r3, [r4, #20]
   38654:	strb	r0, [r3]
   38658:	ldrb	r2, [r4, #25]
   3865c:	ldr	r1, [r4, #20]
   38660:	ldrb	r3, [r4, #27]
   38664:	cmp	r2, #0
   38668:	addne	r1, r1, #1
   3866c:	cmp	r3, #0
   38670:	str	r1, [r4, #20]
   38674:	bne	386b4 <flatcc_json_printer_uint32_enum_field@@Base+0x18c>
   38678:	mov	r1, r7
   3867c:	mov	r0, r4
   38680:	ldrd	r4, [sp]
   38684:	mov	r3, r6
   38688:	ldrd	r6, [sp, #8]
   3868c:	ldrd	r8, [sp, #16]
   38690:	ldr	sl, [sp, #24]
   38694:	ldr	lr, [sp, #28]
   38698:	add	sp, sp, #32
   3869c:	bx	r3
   386a0:	ldrb	r2, [r0, #29]
   386a4:	cmp	r2, #0
   386a8:	beq	386c8 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>
   386ac:	mov	r7, lr
   386b0:	b	38584 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   386b4:	mov	r0, r7
   386b8:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   386bc:	ldr	r3, [r4, #20]
   386c0:	add	r0, r3, r0
   386c4:	str	r0, [r4, #20]
   386c8:	ldrd	r4, [sp]
   386cc:	ldrd	r6, [sp, #8]
   386d0:	ldrd	r8, [sp, #16]
   386d4:	ldr	sl, [sp, #24]
   386d8:	add	sp, sp, #28
   386dc:	pop	{pc}		; (ldr pc, [sp], #4)
   386e0:	mov	r2, r5
   386e4:	mov	r1, r8
   386e8:	mov	r0, r4
   386ec:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   386f0:	ldr	r5, [r4, #20]
   386f4:	b	38620 <flatcc_json_printer_uint32_enum_field@@Base+0xf8>
   386f8:	add	r1, r2, #1
   386fc:	mov	r3, #10
   38700:	str	r1, [r0, #20]
   38704:	strb	r3, [r2]
   38708:	ldrb	r3, [r0, #25]
   3870c:	ldr	r2, [r4, #32]
   38710:	ldr	r1, [r0, #16]
   38714:	ldr	r0, [r0, #20]
   38718:	mul	r9, r2, r3
   3871c:	add	r3, r0, r9
   38720:	cmp	r1, r3
   38724:	bcs	3873c <flatcc_json_printer_uint32_enum_field@@Base+0x214>
   38728:	mov	r1, r9
   3872c:	mov	r0, r4
   38730:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   38734:	ldr	r2, [r4, #20]
   38738:	b	385dc <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   3873c:	mov	r2, r9
   38740:	mov	r1, #32
   38744:	bl	1459c <memset@plt>
   38748:	ldr	r2, [r4, #20]
   3874c:	add	r2, r2, r9
   38750:	str	r2, [r4, #20]
   38754:	b	385dc <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   38758:	ldrb	r2, [r0, #28]
   3875c:	cmp	r2, #0
   38760:	beq	38584 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   38764:	b	386c8 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>

00038768 <flatcc_json_printer_uint64_enum_field@@Base>:
   38768:	ldr	ip, [r1, #8]
   3876c:	add	r2, r2, #2
   38770:	lsl	r2, r2, #1
   38774:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38778:	strd	r6, [sp, #8]
   3877c:	strd	r8, [sp, #16]
   38780:	strd	sl, [sp, #24]
   38784:	cmp	r2, ip
   38788:	str	lr, [sp, #32]
   3878c:	sub	sp, sp, #4
   38790:	ldr	r8, [sp, #40]	; 0x28
   38794:	ldrd	sl, [sp, #48]	; 0x30
   38798:	ldr	r5, [sp, #56]	; 0x38
   3879c:	bge	388f0 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   387a0:	ldr	ip, [r1, #4]
   387a4:	ldrh	r2, [ip, r2]
   387a8:	cmp	r2, #0
   387ac:	beq	388f0 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   387b0:	ldr	ip, [r1]
   387b4:	cmn	ip, r2
   387b8:	beq	388f0 <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   387bc:	ldrd	r6, [ip, r2]
   387c0:	cmp	fp, r7
   387c4:	cmpeq	sl, r6
   387c8:	beq	389b4 <flatcc_json_printer_uint64_enum_field@@Base+0x24c>
   387cc:	ldr	ip, [r1, #16]
   387d0:	ldr	r2, [r0, #20]
   387d4:	cmp	ip, #0
   387d8:	add	ip, ip, #1
   387dc:	str	ip, [r1, #16]
   387e0:	beq	387f8 <flatcc_json_printer_uint64_enum_field@@Base+0x90>
   387e4:	add	ip, r2, #1
   387e8:	mov	r1, #44	; 0x2c
   387ec:	str	ip, [r0, #20]
   387f0:	strb	r1, [r2]
   387f4:	ldr	r2, [r0, #20]
   387f8:	mov	r9, r3
   387fc:	mov	r4, r0
   38800:	ldrb	r1, [r0, #25]
   38804:	cmp	r1, #0
   38808:	bne	38954 <flatcc_json_printer_uint64_enum_field@@Base+0x1ec>
   3880c:	ldr	r3, [r0, #16]
   38810:	cmp	r3, r2
   38814:	bhi	38824 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   38818:	ldr	r3, [r0, #44]	; 0x2c
   3881c:	blx	r3
   38820:	ldr	r2, [r4, #20]
   38824:	mov	r3, #34	; 0x22
   38828:	strb	r3, [r2]
   3882c:	ldrb	r3, [r4, #26]
   38830:	ldr	r2, [r4, #16]
   38834:	ldr	r0, [r4, #20]
   38838:	cmp	r3, #0
   3883c:	addeq	r0, r0, #1
   38840:	add	r3, r0, r8
   38844:	cmp	r2, r3
   38848:	str	r0, [r4, #20]
   3884c:	bls	3893c <flatcc_json_printer_uint64_enum_field@@Base+0x1d4>
   38850:	mov	r2, r8
   38854:	mov	r1, r9
   38858:	bl	14524 <memcpy@plt>
   3885c:	ldr	r3, [r4, #20]
   38860:	add	r8, r3, r8
   38864:	str	r8, [r4, #20]
   38868:	mov	r3, #34	; 0x22
   3886c:	mov	ip, #58	; 0x3a
   38870:	mov	r0, #32
   38874:	strb	r3, [r8]
   38878:	ldrb	r3, [r4, #26]
   3887c:	ldr	r1, [r4, #20]
   38880:	clz	r3, r3
   38884:	lsr	r3, r3, #5
   38888:	add	r2, r1, r3
   3888c:	add	r2, r2, #1
   38890:	str	r2, [r4, #20]
   38894:	strb	ip, [r1, r3]
   38898:	ldr	r3, [r4, #20]
   3889c:	strb	r0, [r3]
   388a0:	ldrb	r1, [r4, #25]
   388a4:	ldr	r2, [r4, #20]
   388a8:	ldrb	r3, [r4, #27]
   388ac:	cmp	r1, #0
   388b0:	addne	r2, r2, #1
   388b4:	cmp	r3, #0
   388b8:	str	r2, [r4, #20]
   388bc:	bne	38908 <flatcc_json_printer_uint64_enum_field@@Base+0x1a0>
   388c0:	mov	r2, r6
   388c4:	mov	r3, r7
   388c8:	mov	r0, r4
   388cc:	mov	r1, r5
   388d0:	add	sp, sp, #4
   388d4:	ldrd	r4, [sp]
   388d8:	ldrd	r6, [sp, #8]
   388dc:	ldrd	r8, [sp, #16]
   388e0:	ldrd	sl, [sp, #24]
   388e4:	ldr	lr, [sp, #32]
   388e8:	add	sp, sp, #36	; 0x24
   388ec:	bx	r1
   388f0:	ldrb	r2, [r0, #29]
   388f4:	cmp	r2, #0
   388f8:	beq	38920 <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>
   388fc:	mov	r6, sl
   38900:	mov	r7, fp
   38904:	b	387cc <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   38908:	mov	r0, r6
   3890c:	mov	r1, r7
   38910:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   38914:	ldr	r3, [r4, #20]
   38918:	add	r0, r3, r0
   3891c:	str	r0, [r4, #20]
   38920:	add	sp, sp, #4
   38924:	ldrd	r4, [sp]
   38928:	ldrd	r6, [sp, #8]
   3892c:	ldrd	r8, [sp, #16]
   38930:	ldrd	sl, [sp, #24]
   38934:	add	sp, sp, #32
   38938:	pop	{pc}		; (ldr pc, [sp], #4)
   3893c:	mov	r2, r8
   38940:	mov	r1, r9
   38944:	mov	r0, r4
   38948:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3894c:	ldr	r8, [r4, #20]
   38950:	b	38868 <flatcc_json_printer_uint64_enum_field@@Base+0x100>
   38954:	add	r1, r2, #1
   38958:	mov	r3, #10
   3895c:	str	r1, [r0, #20]
   38960:	strb	r3, [r2]
   38964:	ldrb	r3, [r0, #25]
   38968:	ldr	r2, [r4, #32]
   3896c:	ldr	r1, [r0, #16]
   38970:	ldr	r0, [r0, #20]
   38974:	mul	sl, r2, r3
   38978:	add	r3, r0, sl
   3897c:	cmp	r1, r3
   38980:	bcs	38998 <flatcc_json_printer_uint64_enum_field@@Base+0x230>
   38984:	mov	r1, sl
   38988:	mov	r0, r4
   3898c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   38990:	ldr	r2, [r4, #20]
   38994:	b	38824 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   38998:	mov	r2, sl
   3899c:	mov	r1, #32
   389a0:	bl	1459c <memset@plt>
   389a4:	ldr	r2, [r4, #20]
   389a8:	add	r2, r2, sl
   389ac:	str	r2, [r4, #20]
   389b0:	b	38824 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   389b4:	ldrb	r2, [r0, #28]
   389b8:	cmp	r2, #0
   389bc:	beq	387cc <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   389c0:	b	38920 <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>

000389c4 <flatcc_json_printer_int8_enum_field@@Base>:
   389c4:	ldr	ip, [r1, #8]
   389c8:	add	r2, r2, #2
   389cc:	lsl	r2, r2, #1
   389d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   389d4:	strd	r6, [sp, #8]
   389d8:	strd	r8, [sp, #16]
   389dc:	str	sl, [sp, #24]
   389e0:	cmp	r2, ip
   389e4:	str	lr, [sp, #28]
   389e8:	ldrsb	lr, [sp, #36]	; 0x24
   389ec:	ldr	r7, [sp, #32]
   389f0:	ldr	r6, [sp, #40]	; 0x28
   389f4:	bge	38b88 <flatcc_json_printer_int8_enum_field@@Base+0x1c4>
   389f8:	ldr	ip, [r1, #4]
   389fc:	ldrh	r2, [ip, r2]
   38a00:	cmp	r2, #0
   38a04:	beq	38b88 <flatcc_json_printer_int8_enum_field@@Base+0x1c4>
   38a08:	ldr	ip, [r1]
   38a0c:	cmn	ip, r2
   38a10:	beq	38b88 <flatcc_json_printer_int8_enum_field@@Base+0x1c4>
   38a14:	ldrsb	r5, [ip, r2]
   38a18:	cmp	lr, r5
   38a1c:	beq	38c3c <flatcc_json_printer_int8_enum_field@@Base+0x278>
   38a20:	ldr	ip, [r1, #16]
   38a24:	ldr	r2, [r0, #20]
   38a28:	cmp	ip, #0
   38a2c:	add	ip, ip, #1
   38a30:	str	ip, [r1, #16]
   38a34:	beq	38a4c <flatcc_json_printer_int8_enum_field@@Base+0x88>
   38a38:	add	ip, r2, #1
   38a3c:	mov	r1, #44	; 0x2c
   38a40:	str	ip, [r0, #20]
   38a44:	strb	r1, [r2]
   38a48:	ldr	r2, [r0, #20]
   38a4c:	mov	r8, r3
   38a50:	mov	r4, r0
   38a54:	ldrb	r1, [r0, #25]
   38a58:	cmp	r1, #0
   38a5c:	bne	38bdc <flatcc_json_printer_int8_enum_field@@Base+0x218>
   38a60:	ldr	r3, [r0, #16]
   38a64:	cmp	r3, r2
   38a68:	bhi	38a78 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   38a6c:	ldr	r3, [r0, #44]	; 0x2c
   38a70:	blx	r3
   38a74:	ldr	r2, [r4, #20]
   38a78:	mov	r3, #34	; 0x22
   38a7c:	strb	r3, [r2]
   38a80:	ldrb	r3, [r4, #26]
   38a84:	ldr	r2, [r4, #16]
   38a88:	ldr	r0, [r4, #20]
   38a8c:	cmp	r3, #0
   38a90:	addeq	r0, r0, #1
   38a94:	add	r3, r0, r7
   38a98:	cmp	r2, r3
   38a9c:	str	r0, [r4, #20]
   38aa0:	bls	38bc4 <flatcc_json_printer_int8_enum_field@@Base+0x200>
   38aa4:	mov	r2, r7
   38aa8:	mov	r1, r8
   38aac:	bl	14524 <memcpy@plt>
   38ab0:	ldr	r3, [r4, #20]
   38ab4:	add	r7, r3, r7
   38ab8:	str	r7, [r4, #20]
   38abc:	mov	r3, #34	; 0x22
   38ac0:	mov	ip, #58	; 0x3a
   38ac4:	mov	r0, #32
   38ac8:	strb	r3, [r7]
   38acc:	ldrb	r3, [r4, #26]
   38ad0:	ldr	r1, [r4, #20]
   38ad4:	clz	r3, r3
   38ad8:	lsr	r3, r3, #5
   38adc:	add	r2, r1, r3
   38ae0:	add	r2, r2, #1
   38ae4:	str	r2, [r4, #20]
   38ae8:	strb	ip, [r1, r3]
   38aec:	ldr	r3, [r4, #20]
   38af0:	strb	r0, [r3]
   38af4:	ldrb	r3, [r4, #25]
   38af8:	ldr	r1, [r4, #20]
   38afc:	ldrb	r0, [r4, #27]
   38b00:	adds	r3, r3, #0
   38b04:	movne	r3, #1
   38b08:	add	r2, r1, r3
   38b0c:	cmp	r0, #0
   38b10:	str	r2, [r4, #20]
   38b14:	beq	38b9c <flatcc_json_printer_int8_enum_field@@Base+0x1d8>
   38b18:	cmp	r5, #0
   38b1c:	lsr	r0, r5, #31
   38b20:	uxtb	r5, r5
   38b24:	bge	38b3c <flatcc_json_printer_int8_enum_field@@Base+0x178>
   38b28:	rsb	r5, r5, #0
   38b2c:	mov	ip, #45	; 0x2d
   38b30:	add	r2, r2, #1
   38b34:	uxtb	r5, r5
   38b38:	strb	ip, [r1, r3]
   38b3c:	cmp	r5, #99	; 0x63
   38b40:	bhi	38c4c <flatcc_json_printer_int8_enum_field@@Base+0x288>
   38b44:	cmp	r5, #9
   38b48:	bhi	38c9c <flatcc_json_printer_int8_enum_field@@Base+0x2d8>
   38b4c:	add	r5, r5, #48	; 0x30
   38b50:	mov	r1, #0
   38b54:	mov	lr, #1
   38b58:	strb	r5, [r2]
   38b5c:	strb	r1, [r2, #1]
   38b60:	ldr	r3, [r4, #20]
   38b64:	add	r2, r0, lr
   38b68:	add	r3, r3, r2
   38b6c:	str	r3, [r4, #20]
   38b70:	ldrd	r4, [sp]
   38b74:	ldrd	r6, [sp, #8]
   38b78:	ldrd	r8, [sp, #16]
   38b7c:	ldr	sl, [sp, #24]
   38b80:	add	sp, sp, #28
   38b84:	pop	{pc}		; (ldr pc, [sp], #4)
   38b88:	ldrb	r2, [r0, #29]
   38b8c:	cmp	r2, #0
   38b90:	beq	38b70 <flatcc_json_printer_int8_enum_field@@Base+0x1ac>
   38b94:	mov	r5, lr
   38b98:	b	38a20 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   38b9c:	mov	r1, r5
   38ba0:	mov	r0, r4
   38ba4:	ldrd	r4, [sp]
   38ba8:	mov	r3, r6
   38bac:	ldrd	r6, [sp, #8]
   38bb0:	ldrd	r8, [sp, #16]
   38bb4:	ldr	sl, [sp, #24]
   38bb8:	ldr	lr, [sp, #28]
   38bbc:	add	sp, sp, #32
   38bc0:	bx	r3
   38bc4:	mov	r2, r7
   38bc8:	mov	r1, r8
   38bcc:	mov	r0, r4
   38bd0:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   38bd4:	ldr	r7, [r4, #20]
   38bd8:	b	38abc <flatcc_json_printer_int8_enum_field@@Base+0xf8>
   38bdc:	add	r1, r2, #1
   38be0:	mov	r3, #10
   38be4:	str	r1, [r0, #20]
   38be8:	strb	r3, [r2]
   38bec:	ldrb	r3, [r0, #25]
   38bf0:	ldr	r2, [r4, #32]
   38bf4:	ldr	ip, [r0, #16]
   38bf8:	ldr	r0, [r0, #20]
   38bfc:	mul	r9, r2, r3
   38c00:	add	r3, r0, r9
   38c04:	cmp	ip, r3
   38c08:	bcs	38c20 <flatcc_json_printer_int8_enum_field@@Base+0x25c>
   38c0c:	mov	r1, r9
   38c10:	mov	r0, r4
   38c14:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   38c18:	ldr	r2, [r4, #20]
   38c1c:	b	38a78 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   38c20:	mov	r2, r9
   38c24:	mov	r1, #32
   38c28:	bl	1459c <memset@plt>
   38c2c:	ldr	r2, [r4, #20]
   38c30:	add	r2, r2, r9
   38c34:	str	r2, [r4, #20]
   38c38:	b	38a78 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   38c3c:	ldrb	r2, [r0, #28]
   38c40:	cmp	r2, #0
   38c44:	beq	38a20 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   38c48:	b	38b70 <flatcc_json_printer_int8_enum_field@@Base+0x1ac>
   38c4c:	movw	r3, #34079	; 0x851f
   38c50:	movt	r3, #20971	; 0x51eb
   38c54:	mov	r1, #0
   38c58:	mov	r7, #100	; 0x64
   38c5c:	umull	ip, r3, r3, r5
   38c60:	movw	ip, #32560	; 0x7f30
   38c64:	movt	ip, #4
   38c68:	strb	r1, [r2, #3]
   38c6c:	mov	r6, #49	; 0x31
   38c70:	mov	lr, #3
   38c74:	lsr	r1, r3, #5
   38c78:	mls	r5, r7, r1, r5
   38c7c:	uxtb	r5, r5
   38c80:	ldrb	r3, [ip, r5, lsl #1]
   38c84:	add	r5, ip, r5, lsl #1
   38c88:	strb	r3, [r2, #1]
   38c8c:	ldrb	r3, [r5, #1]
   38c90:	strb	r6, [r2]
   38c94:	strb	r3, [r2, #2]
   38c98:	b	38b60 <flatcc_json_printer_int8_enum_field@@Base+0x19c>
   38c9c:	mov	r3, #0
   38ca0:	sxth	r5, r5
   38ca4:	movw	r1, #32560	; 0x7f30
   38ca8:	movt	r1, #4
   38cac:	strb	r3, [r2, #2]
   38cb0:	add	r3, r1, r5, lsl #1
   38cb4:	mov	lr, #2
   38cb8:	ldrb	r1, [r1, r5, lsl #1]
   38cbc:	strb	r1, [r2]
   38cc0:	ldrb	r3, [r3, #1]
   38cc4:	strb	r3, [r2, #1]
   38cc8:	b	38b60 <flatcc_json_printer_int8_enum_field@@Base+0x19c>

00038ccc <flatcc_json_printer_int16_enum_field@@Base>:
   38ccc:	ldr	ip, [r1, #8]
   38cd0:	add	r2, r2, #2
   38cd4:	lsl	r2, r2, #1
   38cd8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38cdc:	strd	r6, [sp, #8]
   38ce0:	strd	r8, [sp, #16]
   38ce4:	str	sl, [sp, #24]
   38ce8:	cmp	r2, ip
   38cec:	str	lr, [sp, #28]
   38cf0:	ldrsh	lr, [sp, #36]	; 0x24
   38cf4:	ldr	r7, [sp, #32]
   38cf8:	ldr	r6, [sp, #40]	; 0x28
   38cfc:	bge	38e70 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   38d00:	ldr	ip, [r1, #4]
   38d04:	ldrh	r2, [ip, r2]
   38d08:	cmp	r2, #0
   38d0c:	beq	38e70 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   38d10:	ldr	ip, [r1]
   38d14:	cmn	ip, r2
   38d18:	beq	38e70 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   38d1c:	ldrsh	r5, [ip, r2]
   38d20:	cmp	lr, r5
   38d24:	beq	38f24 <flatcc_json_printer_int16_enum_field@@Base+0x258>
   38d28:	ldr	ip, [r1, #16]
   38d2c:	ldr	r2, [r0, #20]
   38d30:	cmp	ip, #0
   38d34:	add	ip, ip, #1
   38d38:	str	ip, [r1, #16]
   38d3c:	beq	38d54 <flatcc_json_printer_int16_enum_field@@Base+0x88>
   38d40:	add	ip, r2, #1
   38d44:	mov	r1, #44	; 0x2c
   38d48:	str	ip, [r0, #20]
   38d4c:	strb	r1, [r2]
   38d50:	ldr	r2, [r0, #20]
   38d54:	mov	r8, r3
   38d58:	mov	r4, r0
   38d5c:	ldrb	r1, [r0, #25]
   38d60:	cmp	r1, #0
   38d64:	bne	38ec4 <flatcc_json_printer_int16_enum_field@@Base+0x1f8>
   38d68:	ldr	r3, [r0, #16]
   38d6c:	cmp	r3, r2
   38d70:	bhi	38d80 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   38d74:	ldr	r3, [r0, #44]	; 0x2c
   38d78:	blx	r3
   38d7c:	ldr	r2, [r4, #20]
   38d80:	mov	r3, #34	; 0x22
   38d84:	strb	r3, [r2]
   38d88:	ldrb	r3, [r4, #26]
   38d8c:	ldr	r2, [r4, #16]
   38d90:	ldr	r0, [r4, #20]
   38d94:	cmp	r3, #0
   38d98:	addeq	r0, r0, #1
   38d9c:	add	r3, r0, r7
   38da0:	cmp	r2, r3
   38da4:	str	r0, [r4, #20]
   38da8:	bls	38eac <flatcc_json_printer_int16_enum_field@@Base+0x1e0>
   38dac:	mov	r2, r7
   38db0:	mov	r1, r8
   38db4:	bl	14524 <memcpy@plt>
   38db8:	ldr	r3, [r4, #20]
   38dbc:	add	r7, r3, r7
   38dc0:	str	r7, [r4, #20]
   38dc4:	mov	r3, #34	; 0x22
   38dc8:	mov	ip, #58	; 0x3a
   38dcc:	mov	r0, #32
   38dd0:	strb	r3, [r7]
   38dd4:	ldrb	r3, [r4, #26]
   38dd8:	ldr	r1, [r4, #20]
   38ddc:	clz	r3, r3
   38de0:	lsr	r3, r3, #5
   38de4:	add	r2, r1, r3
   38de8:	add	r2, r2, #1
   38dec:	str	r2, [r4, #20]
   38df0:	strb	ip, [r1, r3]
   38df4:	ldr	r3, [r4, #20]
   38df8:	strb	r0, [r3]
   38dfc:	ldrb	r3, [r4, #25]
   38e00:	ldr	r2, [r4, #20]
   38e04:	ldrb	r0, [r4, #27]
   38e08:	adds	r3, r3, #0
   38e0c:	movne	r3, #1
   38e10:	add	r1, r2, r3
   38e14:	cmp	r0, #0
   38e18:	str	r1, [r4, #20]
   38e1c:	beq	38e84 <flatcc_json_printer_int16_enum_field@@Base+0x1b8>
   38e20:	cmp	r5, #0
   38e24:	lsr	r6, r5, #31
   38e28:	uxth	r0, r5
   38e2c:	bge	38e44 <flatcc_json_printer_int16_enum_field@@Base+0x178>
   38e30:	rsb	r0, r0, #0
   38e34:	mov	ip, #45	; 0x2d
   38e38:	add	r1, r1, #1
   38e3c:	uxth	r0, r0
   38e40:	strb	ip, [r2, r3]
   38e44:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   38e48:	ldr	r3, [r4, #20]
   38e4c:	add	r0, r6, r0
   38e50:	add	r3, r3, r0
   38e54:	str	r3, [r4, #20]
   38e58:	ldrd	r4, [sp]
   38e5c:	ldrd	r6, [sp, #8]
   38e60:	ldrd	r8, [sp, #16]
   38e64:	ldr	sl, [sp, #24]
   38e68:	add	sp, sp, #28
   38e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   38e70:	ldrb	r2, [r0, #29]
   38e74:	cmp	r2, #0
   38e78:	beq	38e58 <flatcc_json_printer_int16_enum_field@@Base+0x18c>
   38e7c:	mov	r5, lr
   38e80:	b	38d28 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   38e84:	mov	r1, r5
   38e88:	mov	r0, r4
   38e8c:	ldrd	r4, [sp]
   38e90:	mov	r3, r6
   38e94:	ldrd	r6, [sp, #8]
   38e98:	ldrd	r8, [sp, #16]
   38e9c:	ldr	sl, [sp, #24]
   38ea0:	ldr	lr, [sp, #28]
   38ea4:	add	sp, sp, #32
   38ea8:	bx	r3
   38eac:	mov	r2, r7
   38eb0:	mov	r1, r8
   38eb4:	mov	r0, r4
   38eb8:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   38ebc:	ldr	r7, [r4, #20]
   38ec0:	b	38dc4 <flatcc_json_printer_int16_enum_field@@Base+0xf8>
   38ec4:	add	r1, r2, #1
   38ec8:	mov	r3, #10
   38ecc:	str	r1, [r0, #20]
   38ed0:	strb	r3, [r2]
   38ed4:	ldrb	r3, [r0, #25]
   38ed8:	ldr	r2, [r4, #32]
   38edc:	ldr	r1, [r0, #16]
   38ee0:	ldr	r0, [r0, #20]
   38ee4:	mul	r9, r2, r3
   38ee8:	add	r3, r0, r9
   38eec:	cmp	r1, r3
   38ef0:	bcs	38f08 <flatcc_json_printer_int16_enum_field@@Base+0x23c>
   38ef4:	mov	r1, r9
   38ef8:	mov	r0, r4
   38efc:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   38f00:	ldr	r2, [r4, #20]
   38f04:	b	38d80 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   38f08:	mov	r2, r9
   38f0c:	mov	r1, #32
   38f10:	bl	1459c <memset@plt>
   38f14:	ldr	r2, [r4, #20]
   38f18:	add	r2, r2, r9
   38f1c:	str	r2, [r4, #20]
   38f20:	b	38d80 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   38f24:	ldrb	r2, [r0, #28]
   38f28:	cmp	r2, #0
   38f2c:	beq	38d28 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   38f30:	b	38e58 <flatcc_json_printer_int16_enum_field@@Base+0x18c>

00038f34 <flatcc_json_printer_int32_enum_field@@Base>:
   38f34:	ldr	ip, [r1, #8]
   38f38:	add	r2, r2, #2
   38f3c:	lsl	r2, r2, #1
   38f40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38f44:	strd	r6, [sp, #8]
   38f48:	strd	r8, [sp, #16]
   38f4c:	str	sl, [sp, #24]
   38f50:	cmp	r2, ip
   38f54:	str	lr, [sp, #28]
   38f58:	ldr	r6, [sp, #32]
   38f5c:	ldr	lr, [sp, #36]	; 0x24
   38f60:	ldr	r5, [sp, #40]	; 0x28
   38f64:	bge	390d4 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   38f68:	ldr	ip, [r1, #4]
   38f6c:	ldrh	r2, [ip, r2]
   38f70:	cmp	r2, #0
   38f74:	beq	390d4 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   38f78:	ldr	ip, [r1]
   38f7c:	cmn	ip, r2
   38f80:	beq	390d4 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   38f84:	ldr	r7, [ip, r2]
   38f88:	cmp	lr, r7
   38f8c:	beq	39188 <flatcc_json_printer_int32_enum_field@@Base+0x254>
   38f90:	ldr	ip, [r1, #16]
   38f94:	ldr	r2, [r0, #20]
   38f98:	cmp	ip, #0
   38f9c:	add	ip, ip, #1
   38fa0:	str	ip, [r1, #16]
   38fa4:	beq	38fbc <flatcc_json_printer_int32_enum_field@@Base+0x88>
   38fa8:	add	ip, r2, #1
   38fac:	mov	r1, #44	; 0x2c
   38fb0:	str	ip, [r0, #20]
   38fb4:	strb	r1, [r2]
   38fb8:	ldr	r2, [r0, #20]
   38fbc:	mov	r8, r3
   38fc0:	mov	r4, r0
   38fc4:	ldrb	r1, [r0, #25]
   38fc8:	cmp	r1, #0
   38fcc:	bne	39128 <flatcc_json_printer_int32_enum_field@@Base+0x1f4>
   38fd0:	ldr	r3, [r0, #16]
   38fd4:	cmp	r2, r3
   38fd8:	bcc	38fe8 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   38fdc:	ldr	r3, [r0, #44]	; 0x2c
   38fe0:	blx	r3
   38fe4:	ldr	r2, [r4, #20]
   38fe8:	mov	r3, #34	; 0x22
   38fec:	strb	r3, [r2]
   38ff0:	ldrb	r3, [r4, #26]
   38ff4:	ldr	r2, [r4, #16]
   38ff8:	ldr	r0, [r4, #20]
   38ffc:	cmp	r3, #0
   39000:	addeq	r0, r0, #1
   39004:	add	r3, r0, r6
   39008:	cmp	r2, r3
   3900c:	str	r0, [r4, #20]
   39010:	bls	39110 <flatcc_json_printer_int32_enum_field@@Base+0x1dc>
   39014:	mov	r2, r6
   39018:	mov	r1, r8
   3901c:	bl	14524 <memcpy@plt>
   39020:	ldr	r3, [r4, #20]
   39024:	add	r6, r3, r6
   39028:	str	r6, [r4, #20]
   3902c:	mov	r3, #34	; 0x22
   39030:	mov	ip, #58	; 0x3a
   39034:	mov	r0, #32
   39038:	strb	r3, [r6]
   3903c:	ldrb	r3, [r4, #26]
   39040:	ldr	r1, [r4, #20]
   39044:	clz	r3, r3
   39048:	lsr	r3, r3, #5
   3904c:	add	r2, r1, r3
   39050:	add	r2, r2, #1
   39054:	str	r2, [r4, #20]
   39058:	strb	ip, [r1, r3]
   3905c:	ldr	r3, [r4, #20]
   39060:	strb	r0, [r3]
   39064:	ldrb	r3, [r4, #25]
   39068:	ldr	r2, [r4, #20]
   3906c:	ldrb	r0, [r4, #27]
   39070:	adds	r3, r3, #0
   39074:	movne	r3, #1
   39078:	add	r1, r2, r3
   3907c:	cmp	r0, #0
   39080:	str	r1, [r4, #20]
   39084:	beq	390e8 <flatcc_json_printer_int32_enum_field@@Base+0x1b4>
   39088:	cmp	r7, #0
   3908c:	lsr	r5, r7, #31
   39090:	bge	390a4 <flatcc_json_printer_int32_enum_field@@Base+0x170>
   39094:	mov	r0, #45	; 0x2d
   39098:	rsb	r7, r7, #0
   3909c:	add	r1, r1, #1
   390a0:	strb	r0, [r2, r3]
   390a4:	mov	r0, r7
   390a8:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   390ac:	ldr	r3, [r4, #20]
   390b0:	add	r0, r5, r0
   390b4:	add	r3, r3, r0
   390b8:	str	r3, [r4, #20]
   390bc:	ldrd	r4, [sp]
   390c0:	ldrd	r6, [sp, #8]
   390c4:	ldrd	r8, [sp, #16]
   390c8:	ldr	sl, [sp, #24]
   390cc:	add	sp, sp, #28
   390d0:	pop	{pc}		; (ldr pc, [sp], #4)
   390d4:	ldrb	r2, [r0, #29]
   390d8:	cmp	r2, #0
   390dc:	beq	390bc <flatcc_json_printer_int32_enum_field@@Base+0x188>
   390e0:	mov	r7, lr
   390e4:	b	38f90 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   390e8:	mov	r1, r7
   390ec:	mov	r0, r4
   390f0:	ldrd	r6, [sp, #8]
   390f4:	mov	r3, r5
   390f8:	ldrd	r4, [sp]
   390fc:	ldrd	r8, [sp, #16]
   39100:	ldr	sl, [sp, #24]
   39104:	ldr	lr, [sp, #28]
   39108:	add	sp, sp, #32
   3910c:	bx	r3
   39110:	mov	r2, r6
   39114:	mov	r1, r8
   39118:	mov	r0, r4
   3911c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   39120:	ldr	r6, [r4, #20]
   39124:	b	3902c <flatcc_json_printer_int32_enum_field@@Base+0xf8>
   39128:	add	r1, r2, #1
   3912c:	mov	r3, #10
   39130:	str	r1, [r0, #20]
   39134:	strb	r3, [r2]
   39138:	ldrb	r3, [r0, #25]
   3913c:	ldr	r2, [r4, #32]
   39140:	ldr	r1, [r0, #16]
   39144:	ldr	r0, [r0, #20]
   39148:	mul	r9, r2, r3
   3914c:	add	r3, r0, r9
   39150:	cmp	r1, r3
   39154:	bcs	3916c <flatcc_json_printer_int32_enum_field@@Base+0x238>
   39158:	mov	r1, r9
   3915c:	mov	r0, r4
   39160:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39164:	ldr	r2, [r4, #20]
   39168:	b	38fe8 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   3916c:	mov	r2, r9
   39170:	mov	r1, #32
   39174:	bl	1459c <memset@plt>
   39178:	ldr	r2, [r4, #20]
   3917c:	add	r2, r2, r9
   39180:	str	r2, [r4, #20]
   39184:	b	38fe8 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   39188:	ldrb	r2, [r0, #28]
   3918c:	cmp	r2, #0
   39190:	beq	38f90 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   39194:	b	390bc <flatcc_json_printer_int32_enum_field@@Base+0x188>

00039198 <flatcc_json_printer_int64_enum_field@@Base>:
   39198:	ldr	ip, [r1, #8]
   3919c:	add	r2, r2, #2
   391a0:	lsl	r2, r2, #1
   391a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   391a8:	strd	r6, [sp, #8]
   391ac:	strd	r8, [sp, #16]
   391b0:	strd	sl, [sp, #24]
   391b4:	cmp	r2, ip
   391b8:	str	lr, [sp, #32]
   391bc:	sub	sp, sp, #4
   391c0:	ldr	r8, [sp, #40]	; 0x28
   391c4:	ldrd	sl, [sp, #48]	; 0x30
   391c8:	ldr	r5, [sp, #56]	; 0x38
   391cc:	bge	39350 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   391d0:	ldr	ip, [r1, #4]
   391d4:	ldrh	r2, [ip, r2]
   391d8:	cmp	r2, #0
   391dc:	beq	39350 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   391e0:	ldr	ip, [r1]
   391e4:	cmn	ip, r2
   391e8:	beq	39350 <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   391ec:	ldrd	r6, [ip, r2]
   391f0:	cmp	fp, r7
   391f4:	cmpeq	sl, r6
   391f8:	beq	39410 <flatcc_json_printer_int64_enum_field@@Base+0x278>
   391fc:	ldr	ip, [r1, #16]
   39200:	ldr	r2, [r0, #20]
   39204:	cmp	ip, #0
   39208:	add	ip, ip, #1
   3920c:	str	ip, [r1, #16]
   39210:	beq	39228 <flatcc_json_printer_int64_enum_field@@Base+0x90>
   39214:	add	ip, r2, #1
   39218:	mov	r1, #44	; 0x2c
   3921c:	str	ip, [r0, #20]
   39220:	strb	r1, [r2]
   39224:	ldr	r2, [r0, #20]
   39228:	mov	r9, r3
   3922c:	mov	r4, r0
   39230:	ldrb	r1, [r0, #25]
   39234:	cmp	r1, #0
   39238:	bne	393b0 <flatcc_json_printer_int64_enum_field@@Base+0x218>
   3923c:	ldr	r3, [r0, #16]
   39240:	cmp	r2, r3
   39244:	bcc	39254 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   39248:	ldr	r3, [r0, #44]	; 0x2c
   3924c:	blx	r3
   39250:	ldr	r2, [r4, #20]
   39254:	mov	r3, #34	; 0x22
   39258:	strb	r3, [r2]
   3925c:	ldrb	r3, [r4, #26]
   39260:	ldr	r2, [r4, #16]
   39264:	ldr	r0, [r4, #20]
   39268:	cmp	r3, #0
   3926c:	addeq	r0, r0, #1
   39270:	add	r3, r0, r8
   39274:	cmp	r2, r3
   39278:	str	r0, [r4, #20]
   3927c:	bls	39398 <flatcc_json_printer_int64_enum_field@@Base+0x200>
   39280:	mov	r2, r8
   39284:	mov	r1, r9
   39288:	bl	14524 <memcpy@plt>
   3928c:	ldr	r3, [r4, #20]
   39290:	add	r8, r3, r8
   39294:	str	r8, [r4, #20]
   39298:	mov	r3, #34	; 0x22
   3929c:	mov	ip, #58	; 0x3a
   392a0:	mov	r0, #32
   392a4:	strb	r3, [r8]
   392a8:	ldrb	r3, [r4, #26]
   392ac:	ldr	r1, [r4, #20]
   392b0:	clz	r3, r3
   392b4:	lsr	r3, r3, #5
   392b8:	add	r2, r1, r3
   392bc:	add	r2, r2, #1
   392c0:	str	r2, [r4, #20]
   392c4:	strb	ip, [r1, r3]
   392c8:	ldr	r3, [r4, #20]
   392cc:	strb	r0, [r3]
   392d0:	ldrb	r3, [r4, #25]
   392d4:	ldr	r1, [r4, #20]
   392d8:	ldrb	r0, [r4, #27]
   392dc:	adds	r3, r3, #0
   392e0:	movne	r3, #1
   392e4:	add	r2, r1, r3
   392e8:	cmp	r0, #0
   392ec:	str	r2, [r4, #20]
   392f0:	beq	39368 <flatcc_json_printer_int64_enum_field@@Base+0x1d0>
   392f4:	cmp	r6, #0
   392f8:	lsr	r5, r7, #31
   392fc:	sbcs	r0, r7, #0
   39300:	bge	39318 <flatcc_json_printer_int64_enum_field@@Base+0x180>
   39304:	rsbs	r6, r6, #0
   39308:	mov	r0, #45	; 0x2d
   3930c:	rsc	r7, r7, #0
   39310:	add	r2, r2, #1
   39314:	strb	r0, [r1, r3]
   39318:	mov	r0, r6
   3931c:	mov	r1, r7
   39320:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   39324:	ldr	r3, [r4, #20]
   39328:	add	r0, r5, r0
   3932c:	add	r3, r3, r0
   39330:	str	r3, [r4, #20]
   39334:	add	sp, sp, #4
   39338:	ldrd	r4, [sp]
   3933c:	ldrd	r6, [sp, #8]
   39340:	ldrd	r8, [sp, #16]
   39344:	ldrd	sl, [sp, #24]
   39348:	add	sp, sp, #32
   3934c:	pop	{pc}		; (ldr pc, [sp], #4)
   39350:	ldrb	r2, [r0, #29]
   39354:	cmp	r2, #0
   39358:	beq	39334 <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   3935c:	mov	r6, sl
   39360:	mov	r7, fp
   39364:	b	391fc <flatcc_json_printer_int64_enum_field@@Base+0x64>
   39368:	mov	r2, r6
   3936c:	mov	r3, r7
   39370:	mov	r0, r4
   39374:	mov	r1, r5
   39378:	add	sp, sp, #4
   3937c:	ldrd	r4, [sp]
   39380:	ldrd	r6, [sp, #8]
   39384:	ldrd	r8, [sp, #16]
   39388:	ldrd	sl, [sp, #24]
   3938c:	ldr	lr, [sp, #32]
   39390:	add	sp, sp, #36	; 0x24
   39394:	bx	r1
   39398:	mov	r2, r8
   3939c:	mov	r1, r9
   393a0:	mov	r0, r4
   393a4:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   393a8:	ldr	r8, [r4, #20]
   393ac:	b	39298 <flatcc_json_printer_int64_enum_field@@Base+0x100>
   393b0:	add	r1, r2, #1
   393b4:	mov	r3, #10
   393b8:	str	r1, [r0, #20]
   393bc:	strb	r3, [r2]
   393c0:	ldrb	r3, [r0, #25]
   393c4:	ldr	r2, [r4, #32]
   393c8:	ldr	r1, [r0, #16]
   393cc:	ldr	r0, [r0, #20]
   393d0:	mul	sl, r2, r3
   393d4:	add	r3, r0, sl
   393d8:	cmp	r1, r3
   393dc:	bcs	393f4 <flatcc_json_printer_int64_enum_field@@Base+0x25c>
   393e0:	mov	r1, sl
   393e4:	mov	r0, r4
   393e8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   393ec:	ldr	r2, [r4, #20]
   393f0:	b	39254 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   393f4:	mov	r2, sl
   393f8:	mov	r1, #32
   393fc:	bl	1459c <memset@plt>
   39400:	ldr	r2, [r4, #20]
   39404:	add	r2, r2, sl
   39408:	str	r2, [r4, #20]
   3940c:	b	39254 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   39410:	ldrb	r2, [r0, #28]
   39414:	cmp	r2, #0
   39418:	beq	391fc <flatcc_json_printer_int64_enum_field@@Base+0x64>
   3941c:	b	39334 <flatcc_json_printer_int64_enum_field@@Base+0x19c>

00039420 <flatcc_json_printer_bool_enum_field@@Base>:
   39420:	ldr	ip, [r1, #8]
   39424:	add	r2, r2, #2
   39428:	lsl	r2, r2, #1
   3942c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39430:	strd	r6, [sp, #8]
   39434:	strd	r8, [sp, #16]
   39438:	str	sl, [sp, #24]
   3943c:	cmp	r2, ip
   39440:	str	lr, [sp, #28]
   39444:	ldrb	lr, [sp, #36]	; 0x24
   39448:	ldr	r7, [sp, #32]
   3944c:	ldr	r5, [sp, #40]	; 0x28
   39450:	bge	3959c <flatcc_json_printer_bool_enum_field@@Base+0x17c>
   39454:	ldr	ip, [r1, #4]
   39458:	ldrh	r2, [ip, r2]
   3945c:	cmp	r2, #0
   39460:	beq	3959c <flatcc_json_printer_bool_enum_field@@Base+0x17c>
   39464:	ldr	ip, [r1]
   39468:	cmn	ip, r2
   3946c:	beq	3959c <flatcc_json_printer_bool_enum_field@@Base+0x17c>
   39470:	ldrb	r6, [ip, r2]
   39474:	cmp	lr, r6
   39478:	beq	39698 <flatcc_json_printer_bool_enum_field@@Base+0x278>
   3947c:	ldr	ip, [r1, #16]
   39480:	ldr	r2, [r0, #20]
   39484:	cmp	ip, #0
   39488:	add	ip, ip, #1
   3948c:	str	ip, [r1, #16]
   39490:	beq	394a8 <flatcc_json_printer_bool_enum_field@@Base+0x88>
   39494:	add	ip, r2, #1
   39498:	mov	r1, #44	; 0x2c
   3949c:	str	ip, [r0, #20]
   394a0:	strb	r1, [r2]
   394a4:	ldr	r2, [r0, #20]
   394a8:	mov	r8, r3
   394ac:	mov	r4, r0
   394b0:	ldrb	r1, [r0, #25]
   394b4:	cmp	r1, #0
   394b8:	bne	39614 <flatcc_json_printer_bool_enum_field@@Base+0x1f4>
   394bc:	ldr	r3, [r0, #16]
   394c0:	cmp	r3, r2
   394c4:	bhi	394d4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   394c8:	ldr	r3, [r0, #44]	; 0x2c
   394cc:	blx	r3
   394d0:	ldr	r2, [r4, #20]
   394d4:	mov	r3, #34	; 0x22
   394d8:	strb	r3, [r2]
   394dc:	ldrb	r3, [r4, #26]
   394e0:	ldr	r2, [r4, #16]
   394e4:	ldr	r0, [r4, #20]
   394e8:	cmp	r3, #0
   394ec:	addeq	r0, r0, #1
   394f0:	add	r3, r0, r7
   394f4:	cmp	r2, r3
   394f8:	str	r0, [r4, #20]
   394fc:	bls	395fc <flatcc_json_printer_bool_enum_field@@Base+0x1dc>
   39500:	mov	r2, r7
   39504:	mov	r1, r8
   39508:	bl	14524 <memcpy@plt>
   3950c:	ldr	r3, [r4, #20]
   39510:	add	r7, r3, r7
   39514:	str	r7, [r4, #20]
   39518:	mov	r3, #34	; 0x22
   3951c:	mov	ip, #58	; 0x3a
   39520:	mov	r0, #32
   39524:	strb	r3, [r7]
   39528:	ldrb	r3, [r4, #26]
   3952c:	ldr	r1, [r4, #20]
   39530:	clz	r3, r3
   39534:	lsr	r3, r3, #5
   39538:	add	r2, r1, r3
   3953c:	add	r2, r2, #1
   39540:	str	r2, [r4, #20]
   39544:	strb	ip, [r1, r3]
   39548:	ldr	r3, [r4, #20]
   3954c:	strb	r0, [r3]
   39550:	ldrb	r3, [r4, #25]
   39554:	ldr	r0, [r4, #20]
   39558:	ldrb	r1, [r4, #27]
   3955c:	adds	r3, r3, #0
   39560:	movne	r3, #1
   39564:	add	r2, r0, r3
   39568:	cmp	r1, #0
   3956c:	str	r2, [r4, #20]
   39570:	bne	395b0 <flatcc_json_printer_bool_enum_field@@Base+0x190>
   39574:	mov	r1, r6
   39578:	mov	r0, r4
   3957c:	ldrd	r6, [sp, #8]
   39580:	mov	r3, r5
   39584:	ldrd	r4, [sp]
   39588:	ldrd	r8, [sp, #16]
   3958c:	ldr	sl, [sp, #24]
   39590:	ldr	lr, [sp, #28]
   39594:	add	sp, sp, #32
   39598:	bx	r3
   3959c:	ldrb	r2, [r0, #29]
   395a0:	cmp	r2, #0
   395a4:	beq	395e4 <flatcc_json_printer_bool_enum_field@@Base+0x1c4>
   395a8:	mov	r6, lr
   395ac:	b	3947c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   395b0:	cmp	r6, #0
   395b4:	bne	39658 <flatcc_json_printer_bool_enum_field@@Base+0x238>
   395b8:	movw	r1, #32560	; 0x7f30
   395bc:	movt	r1, #4
   395c0:	add	ip, r1, #1776	; 0x6f0
   395c4:	ldr	lr, [r1, #1776]	; 0x6f0
   395c8:	mov	r1, #5
   395cc:	ldrh	ip, [ip, #4]
   395d0:	str	lr, [r0, r3]
   395d4:	strh	ip, [r2, #4]
   395d8:	ldr	r3, [r4, #20]
   395dc:	add	r3, r3, r1
   395e0:	str	r3, [r4, #20]
   395e4:	ldrd	r4, [sp]
   395e8:	ldrd	r6, [sp, #8]
   395ec:	ldrd	r8, [sp, #16]
   395f0:	ldr	sl, [sp, #24]
   395f4:	add	sp, sp, #28
   395f8:	pop	{pc}		; (ldr pc, [sp], #4)
   395fc:	mov	r2, r7
   39600:	mov	r1, r8
   39604:	mov	r0, r4
   39608:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3960c:	ldr	r7, [r4, #20]
   39610:	b	39518 <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   39614:	add	r1, r2, #1
   39618:	mov	r3, #10
   3961c:	str	r1, [r0, #20]
   39620:	strb	r3, [r2]
   39624:	ldrb	r3, [r0, #25]
   39628:	ldr	r2, [r4, #32]
   3962c:	ldr	r1, [r0, #16]
   39630:	ldr	r0, [r0, #20]
   39634:	mul	r9, r2, r3
   39638:	add	r3, r0, r9
   3963c:	cmp	r1, r3
   39640:	bcs	3967c <flatcc_json_printer_bool_enum_field@@Base+0x25c>
   39644:	mov	r1, r9
   39648:	mov	r0, r4
   3964c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39650:	ldr	r2, [r4, #20]
   39654:	b	394d4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   39658:	ldr	ip, [pc, #72]	; 396a8 <flatcc_json_printer_bool_enum_field@@Base+0x288>
   3965c:	movw	r1, #32560	; 0x7f30
   39660:	movt	r1, #4
   39664:	ldr	lr, [r1, #1768]	; 0x6e8
   39668:	mov	r1, #4
   3966c:	ldrb	ip, [ip, #4]
   39670:	str	lr, [r0, r3]
   39674:	strb	ip, [r2, #4]
   39678:	b	395d8 <flatcc_json_printer_bool_enum_field@@Base+0x1b8>
   3967c:	mov	r2, r9
   39680:	mov	r1, #32
   39684:	bl	1459c <memset@plt>
   39688:	ldr	r2, [r4, #20]
   3968c:	add	r2, r2, r9
   39690:	str	r2, [r4, #20]
   39694:	b	394d4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   39698:	ldrb	r2, [r0, #28]
   3969c:	cmp	r2, #0
   396a0:	beq	3947c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   396a4:	b	395e4 <flatcc_json_printer_bool_enum_field@@Base+0x1c4>
   396a8:	andeq	r8, r4, r8, lsl r6

000396ac <flatcc_json_printer_uint8_struct_field@@Base>:
   396ac:	cmp	r1, #0
   396b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   396b4:	mov	r4, r0
   396b8:	strd	r6, [sp, #8]
   396bc:	str	r8, [sp, #16]
   396c0:	str	lr, [sp, #20]
   396c4:	ldrb	r5, [r2, r3]
   396c8:	ldr	r2, [r0, #20]
   396cc:	ldr	r6, [sp, #28]
   396d0:	beq	396e8 <flatcc_json_printer_uint8_struct_field@@Base+0x3c>
   396d4:	add	r1, r2, #1
   396d8:	mov	r3, #44	; 0x2c
   396dc:	str	r1, [r0, #20]
   396e0:	strb	r3, [r2]
   396e4:	ldr	r2, [r0, #20]
   396e8:	ldrb	r1, [r4, #25]
   396ec:	cmp	r1, #0
   396f0:	bne	397f8 <flatcc_json_printer_uint8_struct_field@@Base+0x14c>
   396f4:	ldr	r3, [r4, #16]
   396f8:	cmp	r3, r2
   396fc:	bhi	39710 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   39700:	mov	r0, r4
   39704:	ldr	r3, [r4, #44]	; 0x2c
   39708:	blx	r3
   3970c:	ldr	r2, [r4, #20]
   39710:	mov	r3, #34	; 0x22
   39714:	ldr	r1, [sp, #24]
   39718:	strb	r3, [r2]
   3971c:	ldrb	r3, [r4, #26]
   39720:	ldr	r2, [r4, #16]
   39724:	ldr	r0, [r4, #20]
   39728:	cmp	r3, #0
   3972c:	addeq	r0, r0, #1
   39730:	add	r3, r0, r6
   39734:	cmp	r2, r3
   39738:	mov	r2, r6
   3973c:	str	r0, [r4, #20]
   39740:	bhi	397e4 <flatcc_json_printer_uint8_struct_field@@Base+0x138>
   39744:	mov	r0, r4
   39748:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3974c:	ldr	r2, [r4, #20]
   39750:	mov	r3, #34	; 0x22
   39754:	mov	ip, #58	; 0x3a
   39758:	mov	r0, #32
   3975c:	strb	r3, [r2]
   39760:	ldrb	r3, [r4, #26]
   39764:	ldr	r1, [r4, #20]
   39768:	clz	r3, r3
   3976c:	lsr	r3, r3, #5
   39770:	add	r2, r1, r3
   39774:	add	r2, r2, #1
   39778:	str	r2, [r4, #20]
   3977c:	strb	ip, [r1, r3]
   39780:	ldr	r3, [r4, #20]
   39784:	strb	r0, [r3]
   39788:	ldrb	r3, [r4, #25]
   3978c:	ldr	r0, [r4, #20]
   39790:	adds	r3, r3, #0
   39794:	movne	r3, #1
   39798:	cmp	r5, #99	; 0x63
   3979c:	add	r1, r0, r3
   397a0:	str	r1, [r4, #20]
   397a4:	bhi	3983c <flatcc_json_printer_uint8_struct_field@@Base+0x190>
   397a8:	cmp	r5, #9
   397ac:	bhi	398a8 <flatcc_json_printer_uint8_struct_field@@Base+0x1fc>
   397b0:	add	r5, r5, #48	; 0x30
   397b4:	mov	r2, #0
   397b8:	mov	ip, #1
   397bc:	strb	r2, [r1, #1]
   397c0:	strb	r5, [r0, r3]
   397c4:	ldr	r3, [r4, #20]
   397c8:	ldrd	r6, [sp, #8]
   397cc:	ldr	r8, [sp, #16]
   397d0:	add	r3, r3, ip
   397d4:	str	r3, [r4, #20]
   397d8:	ldrd	r4, [sp]
   397dc:	add	sp, sp, #20
   397e0:	pop	{pc}		; (ldr pc, [sp], #4)
   397e4:	bl	14524 <memcpy@plt>
   397e8:	ldr	r2, [r4, #20]
   397ec:	add	r2, r2, r6
   397f0:	str	r2, [r4, #20]
   397f4:	b	39750 <flatcc_json_printer_uint8_struct_field@@Base+0xa4>
   397f8:	add	r1, r2, #1
   397fc:	mov	r3, #10
   39800:	str	r1, [r4, #20]
   39804:	strb	r3, [r2]
   39808:	ldrb	r7, [r4, #25]
   3980c:	ldr	r1, [r4, #16]
   39810:	ldr	r2, [r4, #32]
   39814:	ldr	r0, [r4, #20]
   39818:	mul	r7, r2, r7
   3981c:	add	r3, r0, r7
   39820:	cmp	r1, r3
   39824:	bcs	3988c <flatcc_json_printer_uint8_struct_field@@Base+0x1e0>
   39828:	mov	r1, r7
   3982c:	mov	r0, r4
   39830:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39834:	ldr	r2, [r4, #20]
   39838:	b	39710 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   3983c:	movw	r2, #34079	; 0x851f
   39840:	movt	r2, #20971	; 0x51eb
   39844:	mov	r6, #100	; 0x64
   39848:	mov	ip, #0
   3984c:	umull	lr, r2, r2, r5
   39850:	movw	lr, #32560	; 0x7f30
   39854:	movt	lr, #4
   39858:	strb	ip, [r1, #3]
   3985c:	mov	ip, #3
   39860:	lsr	r2, r2, #5
   39864:	mls	r5, r6, r2, r5
   39868:	add	r2, r2, #48	; 0x30
   3986c:	uxtb	r5, r5
   39870:	ldrb	r6, [lr, r5, lsl #1]
   39874:	add	lr, lr, r5, lsl #1
   39878:	strb	r6, [r1, #1]
   3987c:	ldrb	lr, [lr, #1]
   39880:	strb	lr, [r1, #2]
   39884:	strb	r2, [r0, r3]
   39888:	b	397c4 <flatcc_json_printer_uint8_struct_field@@Base+0x118>
   3988c:	mov	r2, r7
   39890:	mov	r1, #32
   39894:	bl	1459c <memset@plt>
   39898:	ldr	r2, [r4, #20]
   3989c:	add	r2, r2, r7
   398a0:	str	r2, [r4, #20]
   398a4:	b	39710 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   398a8:	mov	ip, #0
   398ac:	sxth	r5, r5
   398b0:	movw	r2, #32560	; 0x7f30
   398b4:	movt	r2, #4
   398b8:	add	lr, r2, r5, lsl #1
   398bc:	strb	ip, [r1, #2]
   398c0:	mov	ip, #2
   398c4:	ldrb	r2, [r2, r5, lsl #1]
   398c8:	strb	r2, [r0, r3]
   398cc:	ldrb	r3, [lr, #1]
   398d0:	strb	r3, [r1, #1]
   398d4:	b	397c4 <flatcc_json_printer_uint8_struct_field@@Base+0x118>

000398d8 <flatcc_json_printer_uint16_struct_field@@Base>:
   398d8:	cmp	r1, #0
   398dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   398e0:	mov	r4, r0
   398e4:	ldrh	r5, [r2, r3]
   398e8:	ldr	r2, [r0, #20]
   398ec:	strd	r6, [sp, #8]
   398f0:	str	r8, [sp, #16]
   398f4:	str	lr, [sp, #20]
   398f8:	ldr	r6, [sp, #28]
   398fc:	beq	39914 <flatcc_json_printer_uint16_struct_field@@Base+0x3c>
   39900:	add	r1, r2, #1
   39904:	mov	r3, #44	; 0x2c
   39908:	str	r1, [r0, #20]
   3990c:	strb	r3, [r2]
   39910:	ldr	r2, [r0, #20]
   39914:	ldrb	r1, [r4, #25]
   39918:	cmp	r1, #0
   3991c:	bne	39a08 <flatcc_json_printer_uint16_struct_field@@Base+0x130>
   39920:	ldr	r3, [r4, #16]
   39924:	cmp	r3, r2
   39928:	bhi	3993c <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   3992c:	mov	r0, r4
   39930:	ldr	r3, [r4, #44]	; 0x2c
   39934:	blx	r3
   39938:	ldr	r2, [r4, #20]
   3993c:	mov	r3, #34	; 0x22
   39940:	ldr	r1, [sp, #24]
   39944:	strb	r3, [r2]
   39948:	ldrb	r3, [r4, #26]
   3994c:	ldr	r2, [r4, #16]
   39950:	ldr	r0, [r4, #20]
   39954:	cmp	r3, #0
   39958:	addeq	r0, r0, #1
   3995c:	add	r3, r0, r6
   39960:	cmp	r2, r3
   39964:	mov	r2, r6
   39968:	str	r0, [r4, #20]
   3996c:	bhi	399f4 <flatcc_json_printer_uint16_struct_field@@Base+0x11c>
   39970:	mov	r0, r4
   39974:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   39978:	ldr	r2, [r4, #20]
   3997c:	mov	r3, #34	; 0x22
   39980:	mov	lr, #58	; 0x3a
   39984:	mov	ip, #32
   39988:	mov	r0, r5
   3998c:	strb	r3, [r2]
   39990:	ldrb	r3, [r4, #26]
   39994:	ldr	r1, [r4, #20]
   39998:	clz	r3, r3
   3999c:	lsr	r3, r3, #5
   399a0:	add	r2, r1, r3
   399a4:	add	r2, r2, #1
   399a8:	str	r2, [r4, #20]
   399ac:	strb	lr, [r1, r3]
   399b0:	ldr	r3, [r4, #20]
   399b4:	strb	ip, [r3]
   399b8:	ldrb	r2, [r4, #25]
   399bc:	ldr	r3, [r4, #20]
   399c0:	cmp	r2, #0
   399c4:	addne	r3, r3, #1
   399c8:	mov	r1, r3
   399cc:	str	r3, [r4, #20]
   399d0:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   399d4:	ldr	r3, [r4, #20]
   399d8:	ldrd	r6, [sp, #8]
   399dc:	ldr	r8, [sp, #16]
   399e0:	add	r0, r3, r0
   399e4:	str	r0, [r4, #20]
   399e8:	ldrd	r4, [sp]
   399ec:	add	sp, sp, #20
   399f0:	pop	{pc}		; (ldr pc, [sp], #4)
   399f4:	bl	14524 <memcpy@plt>
   399f8:	ldr	r2, [r4, #20]
   399fc:	add	r2, r2, r6
   39a00:	str	r2, [r4, #20]
   39a04:	b	3997c <flatcc_json_printer_uint16_struct_field@@Base+0xa4>
   39a08:	add	r1, r2, #1
   39a0c:	mov	r3, #10
   39a10:	str	r1, [r4, #20]
   39a14:	strb	r3, [r2]
   39a18:	ldrb	r7, [r4, #25]
   39a1c:	ldr	r1, [r4, #16]
   39a20:	ldr	r2, [r4, #32]
   39a24:	ldr	r0, [r4, #20]
   39a28:	mul	r7, r2, r7
   39a2c:	add	r3, r0, r7
   39a30:	cmp	r1, r3
   39a34:	bcs	39a4c <flatcc_json_printer_uint16_struct_field@@Base+0x174>
   39a38:	mov	r1, r7
   39a3c:	mov	r0, r4
   39a40:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39a44:	ldr	r2, [r4, #20]
   39a48:	b	3993c <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   39a4c:	mov	r2, r7
   39a50:	mov	r1, #32
   39a54:	bl	1459c <memset@plt>
   39a58:	ldr	r2, [r4, #20]
   39a5c:	add	r2, r2, r7
   39a60:	str	r2, [r4, #20]
   39a64:	b	3993c <flatcc_json_printer_uint16_struct_field@@Base+0x64>

00039a68 <flatcc_json_printer_uint32_struct_field@@Base>:
   39a68:	cmp	r1, #0
   39a6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39a70:	mov	r4, r0
   39a74:	ldr	r5, [r2, r3]
   39a78:	ldr	r2, [r0, #20]
   39a7c:	strd	r6, [sp, #8]
   39a80:	str	r8, [sp, #16]
   39a84:	str	lr, [sp, #20]
   39a88:	ldr	r6, [sp, #28]
   39a8c:	beq	39aa4 <flatcc_json_printer_uint32_struct_field@@Base+0x3c>
   39a90:	add	r1, r2, #1
   39a94:	mov	r3, #44	; 0x2c
   39a98:	str	r1, [r0, #20]
   39a9c:	strb	r3, [r2]
   39aa0:	ldr	r2, [r0, #20]
   39aa4:	ldrb	r1, [r4, #25]
   39aa8:	cmp	r1, #0
   39aac:	bne	39b98 <flatcc_json_printer_uint32_struct_field@@Base+0x130>
   39ab0:	ldr	r3, [r4, #16]
   39ab4:	cmp	r3, r2
   39ab8:	bhi	39acc <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   39abc:	mov	r0, r4
   39ac0:	ldr	r3, [r4, #44]	; 0x2c
   39ac4:	blx	r3
   39ac8:	ldr	r2, [r4, #20]
   39acc:	mov	r3, #34	; 0x22
   39ad0:	ldr	r1, [sp, #24]
   39ad4:	strb	r3, [r2]
   39ad8:	ldrb	r3, [r4, #26]
   39adc:	ldr	r2, [r4, #16]
   39ae0:	ldr	r0, [r4, #20]
   39ae4:	cmp	r3, #0
   39ae8:	addeq	r0, r0, #1
   39aec:	add	r3, r0, r6
   39af0:	cmp	r2, r3
   39af4:	mov	r2, r6
   39af8:	str	r0, [r4, #20]
   39afc:	bhi	39b84 <flatcc_json_printer_uint32_struct_field@@Base+0x11c>
   39b00:	mov	r0, r4
   39b04:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   39b08:	ldr	r2, [r4, #20]
   39b0c:	mov	r3, #34	; 0x22
   39b10:	mov	lr, #58	; 0x3a
   39b14:	mov	ip, #32
   39b18:	mov	r0, r5
   39b1c:	strb	r3, [r2]
   39b20:	ldrb	r3, [r4, #26]
   39b24:	ldr	r1, [r4, #20]
   39b28:	clz	r3, r3
   39b2c:	lsr	r3, r3, #5
   39b30:	add	r2, r1, r3
   39b34:	add	r2, r2, #1
   39b38:	str	r2, [r4, #20]
   39b3c:	strb	lr, [r1, r3]
   39b40:	ldr	r3, [r4, #20]
   39b44:	strb	ip, [r3]
   39b48:	ldrb	r2, [r4, #25]
   39b4c:	ldr	r3, [r4, #20]
   39b50:	cmp	r2, #0
   39b54:	addne	r3, r3, #1
   39b58:	mov	r1, r3
   39b5c:	str	r3, [r4, #20]
   39b60:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   39b64:	ldr	r3, [r4, #20]
   39b68:	ldrd	r6, [sp, #8]
   39b6c:	ldr	r8, [sp, #16]
   39b70:	add	r0, r3, r0
   39b74:	str	r0, [r4, #20]
   39b78:	ldrd	r4, [sp]
   39b7c:	add	sp, sp, #20
   39b80:	pop	{pc}		; (ldr pc, [sp], #4)
   39b84:	bl	14524 <memcpy@plt>
   39b88:	ldr	r2, [r4, #20]
   39b8c:	add	r2, r2, r6
   39b90:	str	r2, [r4, #20]
   39b94:	b	39b0c <flatcc_json_printer_uint32_struct_field@@Base+0xa4>
   39b98:	add	r1, r2, #1
   39b9c:	mov	r3, #10
   39ba0:	str	r1, [r4, #20]
   39ba4:	strb	r3, [r2]
   39ba8:	ldrb	r7, [r4, #25]
   39bac:	ldr	r1, [r4, #16]
   39bb0:	ldr	r2, [r4, #32]
   39bb4:	ldr	r0, [r4, #20]
   39bb8:	mul	r7, r2, r7
   39bbc:	add	r3, r0, r7
   39bc0:	cmp	r1, r3
   39bc4:	bcs	39bdc <flatcc_json_printer_uint32_struct_field@@Base+0x174>
   39bc8:	mov	r1, r7
   39bcc:	mov	r0, r4
   39bd0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39bd4:	ldr	r2, [r4, #20]
   39bd8:	b	39acc <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   39bdc:	mov	r2, r7
   39be0:	mov	r1, #32
   39be4:	bl	1459c <memset@plt>
   39be8:	ldr	r2, [r4, #20]
   39bec:	add	r2, r2, r7
   39bf0:	str	r2, [r4, #20]
   39bf4:	b	39acc <flatcc_json_printer_uint32_struct_field@@Base+0x64>

00039bf8 <flatcc_json_printer_uint64_struct_field@@Base>:
   39bf8:	cmp	r1, #0
   39bfc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39c00:	mov	r4, r0
   39c04:	strd	r6, [sp, #8]
   39c08:	str	r8, [sp, #16]
   39c0c:	str	lr, [sp, #20]
   39c10:	ldrd	r6, [r2, r3]
   39c14:	ldr	r2, [r0, #20]
   39c18:	ldr	r5, [sp, #28]
   39c1c:	beq	39c34 <flatcc_json_printer_uint64_struct_field@@Base+0x3c>
   39c20:	add	r1, r2, #1
   39c24:	mov	r3, #44	; 0x2c
   39c28:	str	r1, [r0, #20]
   39c2c:	strb	r3, [r2]
   39c30:	ldr	r2, [r0, #20]
   39c34:	ldrb	r1, [r4, #25]
   39c38:	cmp	r1, #0
   39c3c:	bne	39d2c <flatcc_json_printer_uint64_struct_field@@Base+0x134>
   39c40:	ldr	r3, [r4, #16]
   39c44:	cmp	r3, r2
   39c48:	bhi	39c5c <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   39c4c:	mov	r0, r4
   39c50:	ldr	r3, [r4, #44]	; 0x2c
   39c54:	blx	r3
   39c58:	ldr	r2, [r4, #20]
   39c5c:	mov	r3, #34	; 0x22
   39c60:	ldr	r1, [sp, #24]
   39c64:	strb	r3, [r2]
   39c68:	ldrb	r3, [r4, #26]
   39c6c:	ldr	r2, [r4, #16]
   39c70:	ldr	r0, [r4, #20]
   39c74:	cmp	r3, #0
   39c78:	addeq	r0, r0, #1
   39c7c:	add	r3, r0, r5
   39c80:	cmp	r2, r3
   39c84:	mov	r2, r5
   39c88:	str	r0, [r4, #20]
   39c8c:	bhi	39d18 <flatcc_json_printer_uint64_struct_field@@Base+0x120>
   39c90:	mov	r0, r4
   39c94:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   39c98:	ldr	r2, [r4, #20]
   39c9c:	mov	r3, #34	; 0x22
   39ca0:	mov	r5, #58	; 0x3a
   39ca4:	mov	lr, #32
   39ca8:	mov	r0, r6
   39cac:	strb	r3, [r2]
   39cb0:	mov	r1, r7
   39cb4:	ldrb	r3, [r4, #26]
   39cb8:	ldr	ip, [r4, #20]
   39cbc:	clz	r3, r3
   39cc0:	lsr	r3, r3, #5
   39cc4:	add	r2, ip, r3
   39cc8:	add	r2, r2, #1
   39ccc:	str	r2, [r4, #20]
   39cd0:	strb	r5, [ip, r3]
   39cd4:	ldr	r3, [r4, #20]
   39cd8:	strb	lr, [r3]
   39cdc:	ldrb	r2, [r4, #25]
   39ce0:	ldr	r3, [r4, #20]
   39ce4:	cmp	r2, #0
   39ce8:	addne	r3, r3, #1
   39cec:	mov	r2, r3
   39cf0:	str	r3, [r4, #20]
   39cf4:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   39cf8:	ldr	r3, [r4, #20]
   39cfc:	ldrd	r6, [sp, #8]
   39d00:	ldr	r8, [sp, #16]
   39d04:	add	r0, r3, r0
   39d08:	str	r0, [r4, #20]
   39d0c:	ldrd	r4, [sp]
   39d10:	add	sp, sp, #20
   39d14:	pop	{pc}		; (ldr pc, [sp], #4)
   39d18:	bl	14524 <memcpy@plt>
   39d1c:	ldr	r2, [r4, #20]
   39d20:	add	r2, r2, r5
   39d24:	str	r2, [r4, #20]
   39d28:	b	39c9c <flatcc_json_printer_uint64_struct_field@@Base+0xa4>
   39d2c:	add	r1, r2, #1
   39d30:	mov	r3, #10
   39d34:	str	r1, [r4, #20]
   39d38:	strb	r3, [r2]
   39d3c:	ldrb	r8, [r4, #25]
   39d40:	ldr	r1, [r4, #16]
   39d44:	ldr	r2, [r4, #32]
   39d48:	ldr	r0, [r4, #20]
   39d4c:	mul	r8, r2, r8
   39d50:	add	r3, r0, r8
   39d54:	cmp	r1, r3
   39d58:	bcs	39d70 <flatcc_json_printer_uint64_struct_field@@Base+0x178>
   39d5c:	mov	r1, r8
   39d60:	mov	r0, r4
   39d64:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39d68:	ldr	r2, [r4, #20]
   39d6c:	b	39c5c <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   39d70:	mov	r2, r8
   39d74:	mov	r1, #32
   39d78:	bl	1459c <memset@plt>
   39d7c:	ldr	r2, [r4, #20]
   39d80:	add	r2, r2, r8
   39d84:	str	r2, [r4, #20]
   39d88:	b	39c5c <flatcc_json_printer_uint64_struct_field@@Base+0x64>

00039d8c <flatcc_json_printer_int8_struct_field@@Base>:
   39d8c:	cmp	r1, #0
   39d90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39d94:	mov	r4, r0
   39d98:	strd	r6, [sp, #8]
   39d9c:	str	r8, [sp, #16]
   39da0:	str	lr, [sp, #20]
   39da4:	ldrsb	r5, [r2, r3]
   39da8:	ldr	r2, [r0, #20]
   39dac:	ldr	r6, [sp, #28]
   39db0:	beq	39dc8 <flatcc_json_printer_int8_struct_field@@Base+0x3c>
   39db4:	add	r1, r2, #1
   39db8:	mov	r3, #44	; 0x2c
   39dbc:	str	r1, [r0, #20]
   39dc0:	strb	r3, [r2]
   39dc4:	ldr	r2, [r0, #20]
   39dc8:	ldrb	r1, [r4, #25]
   39dcc:	cmp	r1, #0
   39dd0:	bne	39f00 <flatcc_json_printer_int8_struct_field@@Base+0x174>
   39dd4:	ldr	r3, [r4, #16]
   39dd8:	cmp	r3, r2
   39ddc:	bhi	39df0 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   39de0:	mov	r0, r4
   39de4:	ldr	r3, [r4, #44]	; 0x2c
   39de8:	blx	r3
   39dec:	ldr	r2, [r4, #20]
   39df0:	mov	r3, #34	; 0x22
   39df4:	ldr	r1, [sp, #24]
   39df8:	strb	r3, [r2]
   39dfc:	ldrb	r3, [r4, #26]
   39e00:	ldr	r2, [r4, #16]
   39e04:	ldr	r0, [r4, #20]
   39e08:	cmp	r3, #0
   39e0c:	addeq	r0, r0, #1
   39e10:	add	r3, r0, r6
   39e14:	cmp	r2, r3
   39e18:	mov	r2, r6
   39e1c:	str	r0, [r4, #20]
   39e20:	bhi	39eec <flatcc_json_printer_int8_struct_field@@Base+0x160>
   39e24:	mov	r0, r4
   39e28:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   39e2c:	ldr	r2, [r4, #20]
   39e30:	mov	r3, #34	; 0x22
   39e34:	mov	r6, #58	; 0x3a
   39e38:	lsr	r0, r5, #31
   39e3c:	mov	lr, #32
   39e40:	strb	r3, [r2]
   39e44:	uxtb	r3, r5
   39e48:	ldrb	r2, [r4, #26]
   39e4c:	ldr	ip, [r4, #20]
   39e50:	clz	r2, r2
   39e54:	lsr	r2, r2, #5
   39e58:	add	r1, ip, r2
   39e5c:	add	r1, r1, #1
   39e60:	str	r1, [r4, #20]
   39e64:	strb	r6, [ip, r2]
   39e68:	ldr	r2, [r4, #20]
   39e6c:	strb	lr, [r2]
   39e70:	ldrb	r1, [r4, #25]
   39e74:	ldr	ip, [r4, #20]
   39e78:	adds	r1, r1, #0
   39e7c:	movne	r1, #1
   39e80:	cmp	r5, #0
   39e84:	add	r2, ip, r1
   39e88:	str	r2, [r4, #20]
   39e8c:	bge	39ea4 <flatcc_json_printer_int8_struct_field@@Base+0x118>
   39e90:	rsb	r3, r3, #0
   39e94:	mov	lr, #45	; 0x2d
   39e98:	add	r2, r2, #1
   39e9c:	uxtb	r3, r3
   39ea0:	strb	lr, [ip, r1]
   39ea4:	cmp	r3, #99	; 0x63
   39ea8:	bhi	39f44 <flatcc_json_printer_int8_struct_field@@Base+0x1b8>
   39eac:	cmp	r3, #9
   39eb0:	bhi	39fb0 <flatcc_json_printer_int8_struct_field@@Base+0x224>
   39eb4:	add	r3, r3, #48	; 0x30
   39eb8:	mov	r1, #0
   39ebc:	mov	ip, #1
   39ec0:	strb	r3, [r2]
   39ec4:	strb	r1, [r2, #1]
   39ec8:	ldr	r3, [r4, #20]
   39ecc:	add	r2, r0, ip
   39ed0:	ldrd	r6, [sp, #8]
   39ed4:	ldr	r8, [sp, #16]
   39ed8:	add	r3, r3, r2
   39edc:	str	r3, [r4, #20]
   39ee0:	ldrd	r4, [sp]
   39ee4:	add	sp, sp, #20
   39ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   39eec:	bl	14524 <memcpy@plt>
   39ef0:	ldr	r2, [r4, #20]
   39ef4:	add	r2, r2, r6
   39ef8:	str	r2, [r4, #20]
   39efc:	b	39e30 <flatcc_json_printer_int8_struct_field@@Base+0xa4>
   39f00:	add	r1, r2, #1
   39f04:	mov	r3, #10
   39f08:	str	r1, [r4, #20]
   39f0c:	strb	r3, [r2]
   39f10:	ldrb	r7, [r4, #25]
   39f14:	ldr	r1, [r4, #16]
   39f18:	ldr	r2, [r4, #32]
   39f1c:	ldr	r0, [r4, #20]
   39f20:	mul	r7, r2, r7
   39f24:	add	r3, r0, r7
   39f28:	cmp	r1, r3
   39f2c:	bcs	39f94 <flatcc_json_printer_int8_struct_field@@Base+0x208>
   39f30:	mov	r1, r7
   39f34:	mov	r0, r4
   39f38:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   39f3c:	ldr	r2, [r4, #20]
   39f40:	b	39df0 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   39f44:	movw	ip, #34079	; 0x851f
   39f48:	movt	ip, #20971	; 0x51eb
   39f4c:	mov	r6, #100	; 0x64
   39f50:	mov	lr, #0
   39f54:	umull	ip, r1, ip, r3
   39f58:	mov	r5, #49	; 0x31
   39f5c:	mov	ip, #3
   39f60:	strb	lr, [r2, #3]
   39f64:	movw	lr, #32560	; 0x7f30
   39f68:	movt	lr, #4
   39f6c:	lsr	r1, r1, #5
   39f70:	mls	r1, r6, r1, r3
   39f74:	uxtb	r1, r1
   39f78:	ldrb	r3, [lr, r1, lsl #1]
   39f7c:	add	r1, lr, r1, lsl #1
   39f80:	strb	r3, [r2, #1]
   39f84:	ldrb	r3, [r1, #1]
   39f88:	strb	r5, [r2]
   39f8c:	strb	r3, [r2, #2]
   39f90:	b	39ec8 <flatcc_json_printer_int8_struct_field@@Base+0x13c>
   39f94:	mov	r2, r7
   39f98:	mov	r1, #32
   39f9c:	bl	1459c <memset@plt>
   39fa0:	ldr	r2, [r4, #20]
   39fa4:	add	r2, r2, r7
   39fa8:	str	r2, [r4, #20]
   39fac:	b	39df0 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   39fb0:	mov	ip, #0
   39fb4:	sxth	r3, r3
   39fb8:	movw	r1, #32560	; 0x7f30
   39fbc:	movt	r1, #4
   39fc0:	add	lr, r1, r3, lsl #1
   39fc4:	strb	ip, [r2, #2]
   39fc8:	mov	ip, #2
   39fcc:	ldrb	r3, [r1, r3, lsl #1]
   39fd0:	strb	r3, [r2]
   39fd4:	ldrb	r3, [lr, #1]
   39fd8:	strb	r3, [r2, #1]
   39fdc:	b	39ec8 <flatcc_json_printer_int8_struct_field@@Base+0x13c>

00039fe0 <flatcc_json_printer_int16_struct_field@@Base>:
   39fe0:	cmp	r1, #0
   39fe4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39fe8:	mov	r4, r0
   39fec:	ldrsh	r5, [r2, r3]
   39ff0:	ldr	r2, [r0, #20]
   39ff4:	strd	r6, [sp, #8]
   39ff8:	str	r8, [sp, #16]
   39ffc:	str	lr, [sp, #20]
   3a000:	ldr	r6, [sp, #28]
   3a004:	beq	3a01c <flatcc_json_printer_int16_struct_field@@Base+0x3c>
   3a008:	add	r1, r2, #1
   3a00c:	mov	r3, #44	; 0x2c
   3a010:	str	r1, [r0, #20]
   3a014:	strb	r3, [r2]
   3a018:	ldr	r2, [r0, #20]
   3a01c:	ldrb	r1, [r4, #25]
   3a020:	cmp	r1, #0
   3a024:	bne	3a134 <flatcc_json_printer_int16_struct_field@@Base+0x154>
   3a028:	ldr	r3, [r4, #16]
   3a02c:	cmp	r3, r2
   3a030:	bhi	3a044 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   3a034:	mov	r0, r4
   3a038:	ldr	r3, [r4, #44]	; 0x2c
   3a03c:	blx	r3
   3a040:	ldr	r2, [r4, #20]
   3a044:	mov	r3, #34	; 0x22
   3a048:	ldr	r1, [sp, #24]
   3a04c:	strb	r3, [r2]
   3a050:	ldrb	r3, [r4, #26]
   3a054:	ldr	r2, [r4, #16]
   3a058:	ldr	r0, [r4, #20]
   3a05c:	cmp	r3, #0
   3a060:	addeq	r0, r0, #1
   3a064:	add	r3, r0, r6
   3a068:	cmp	r2, r3
   3a06c:	mov	r2, r6
   3a070:	str	r0, [r4, #20]
   3a074:	bhi	3a120 <flatcc_json_printer_int16_struct_field@@Base+0x140>
   3a078:	mov	r0, r4
   3a07c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3a080:	ldr	r2, [r4, #20]
   3a084:	mov	r3, #34	; 0x22
   3a088:	mov	lr, #58	; 0x3a
   3a08c:	lsr	r6, r5, #31
   3a090:	mov	ip, #32
   3a094:	uxth	r0, r5
   3a098:	strb	r3, [r2]
   3a09c:	ldrb	r3, [r4, #26]
   3a0a0:	ldr	r1, [r4, #20]
   3a0a4:	clz	r3, r3
   3a0a8:	lsr	r3, r3, #5
   3a0ac:	add	r2, r1, r3
   3a0b0:	add	r2, r2, #1
   3a0b4:	str	r2, [r4, #20]
   3a0b8:	strb	lr, [r1, r3]
   3a0bc:	ldr	r3, [r4, #20]
   3a0c0:	strb	ip, [r3]
   3a0c4:	ldrb	r3, [r4, #25]
   3a0c8:	ldr	r2, [r4, #20]
   3a0cc:	adds	r3, r3, #0
   3a0d0:	movne	r3, #1
   3a0d4:	cmp	r5, #0
   3a0d8:	add	r1, r2, r3
   3a0dc:	str	r1, [r4, #20]
   3a0e0:	bge	3a0f8 <flatcc_json_printer_int16_struct_field@@Base+0x118>
   3a0e4:	rsb	r0, r0, #0
   3a0e8:	mov	ip, #45	; 0x2d
   3a0ec:	add	r1, r1, #1
   3a0f0:	uxth	r0, r0
   3a0f4:	strb	ip, [r2, r3]
   3a0f8:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3a0fc:	ldr	r3, [r4, #20]
   3a100:	add	r0, r6, r0
   3a104:	ldrd	r6, [sp, #8]
   3a108:	ldr	r8, [sp, #16]
   3a10c:	add	r3, r3, r0
   3a110:	str	r3, [r4, #20]
   3a114:	ldrd	r4, [sp]
   3a118:	add	sp, sp, #20
   3a11c:	pop	{pc}		; (ldr pc, [sp], #4)
   3a120:	bl	14524 <memcpy@plt>
   3a124:	ldr	r2, [r4, #20]
   3a128:	add	r2, r2, r6
   3a12c:	str	r2, [r4, #20]
   3a130:	b	3a084 <flatcc_json_printer_int16_struct_field@@Base+0xa4>
   3a134:	add	r1, r2, #1
   3a138:	mov	r3, #10
   3a13c:	str	r1, [r4, #20]
   3a140:	strb	r3, [r2]
   3a144:	ldrb	r7, [r4, #25]
   3a148:	ldr	r1, [r4, #16]
   3a14c:	ldr	r2, [r4, #32]
   3a150:	ldr	r0, [r4, #20]
   3a154:	mul	r7, r2, r7
   3a158:	add	r3, r0, r7
   3a15c:	cmp	r1, r3
   3a160:	bcs	3a178 <flatcc_json_printer_int16_struct_field@@Base+0x198>
   3a164:	mov	r1, r7
   3a168:	mov	r0, r4
   3a16c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3a170:	ldr	r2, [r4, #20]
   3a174:	b	3a044 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   3a178:	mov	r2, r7
   3a17c:	mov	r1, #32
   3a180:	bl	1459c <memset@plt>
   3a184:	ldr	r2, [r4, #20]
   3a188:	add	r2, r2, r7
   3a18c:	str	r2, [r4, #20]
   3a190:	b	3a044 <flatcc_json_printer_int16_struct_field@@Base+0x64>

0003a194 <flatcc_json_printer_int32_struct_field@@Base>:
   3a194:	cmp	r1, #0
   3a198:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a19c:	mov	r4, r0
   3a1a0:	ldr	r5, [r2, r3]
   3a1a4:	ldr	r2, [r0, #20]
   3a1a8:	strd	r6, [sp, #8]
   3a1ac:	str	r8, [sp, #16]
   3a1b0:	str	lr, [sp, #20]
   3a1b4:	ldr	r6, [sp, #28]
   3a1b8:	beq	3a1d0 <flatcc_json_printer_int32_struct_field@@Base+0x3c>
   3a1bc:	add	r1, r2, #1
   3a1c0:	mov	r3, #44	; 0x2c
   3a1c4:	str	r1, [r0, #20]
   3a1c8:	strb	r3, [r2]
   3a1cc:	ldr	r2, [r0, #20]
   3a1d0:	ldrb	r1, [r4, #25]
   3a1d4:	cmp	r1, #0
   3a1d8:	bne	3a2e4 <flatcc_json_printer_int32_struct_field@@Base+0x150>
   3a1dc:	ldr	r3, [r4, #16]
   3a1e0:	cmp	r3, r2
   3a1e4:	bhi	3a1f8 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   3a1e8:	mov	r0, r4
   3a1ec:	ldr	r3, [r4, #44]	; 0x2c
   3a1f0:	blx	r3
   3a1f4:	ldr	r2, [r4, #20]
   3a1f8:	mov	r3, #34	; 0x22
   3a1fc:	ldr	r1, [sp, #24]
   3a200:	strb	r3, [r2]
   3a204:	ldrb	r3, [r4, #26]
   3a208:	ldr	r2, [r4, #16]
   3a20c:	ldr	r0, [r4, #20]
   3a210:	cmp	r3, #0
   3a214:	addeq	r0, r0, #1
   3a218:	add	r3, r0, r6
   3a21c:	cmp	r2, r3
   3a220:	mov	r2, r6
   3a224:	str	r0, [r4, #20]
   3a228:	bhi	3a2d0 <flatcc_json_printer_int32_struct_field@@Base+0x13c>
   3a22c:	mov	r0, r4
   3a230:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3a234:	ldr	r2, [r4, #20]
   3a238:	mov	r3, #34	; 0x22
   3a23c:	mov	ip, #58	; 0x3a
   3a240:	lsr	r6, r5, #31
   3a244:	mov	r0, #32
   3a248:	strb	r3, [r2]
   3a24c:	ldrb	r3, [r4, #26]
   3a250:	ldr	r1, [r4, #20]
   3a254:	clz	r3, r3
   3a258:	lsr	r3, r3, #5
   3a25c:	add	r2, r1, r3
   3a260:	add	r2, r2, #1
   3a264:	str	r2, [r4, #20]
   3a268:	strb	ip, [r1, r3]
   3a26c:	ldr	r3, [r4, #20]
   3a270:	strb	r0, [r3]
   3a274:	ldrb	r3, [r4, #25]
   3a278:	ldr	r2, [r4, #20]
   3a27c:	adds	r3, r3, #0
   3a280:	movne	r3, #1
   3a284:	cmp	r5, #0
   3a288:	add	r1, r2, r3
   3a28c:	str	r1, [r4, #20]
   3a290:	bge	3a2a4 <flatcc_json_printer_int32_struct_field@@Base+0x110>
   3a294:	mov	r0, #45	; 0x2d
   3a298:	rsb	r5, r5, #0
   3a29c:	add	r1, r1, #1
   3a2a0:	strb	r0, [r2, r3]
   3a2a4:	mov	r0, r5
   3a2a8:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3a2ac:	ldr	r3, [r4, #20]
   3a2b0:	add	r0, r6, r0
   3a2b4:	ldrd	r6, [sp, #8]
   3a2b8:	ldr	r8, [sp, #16]
   3a2bc:	add	r3, r3, r0
   3a2c0:	str	r3, [r4, #20]
   3a2c4:	ldrd	r4, [sp]
   3a2c8:	add	sp, sp, #20
   3a2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   3a2d0:	bl	14524 <memcpy@plt>
   3a2d4:	ldr	r2, [r4, #20]
   3a2d8:	add	r2, r2, r6
   3a2dc:	str	r2, [r4, #20]
   3a2e0:	b	3a238 <flatcc_json_printer_int32_struct_field@@Base+0xa4>
   3a2e4:	add	r1, r2, #1
   3a2e8:	mov	r3, #10
   3a2ec:	str	r1, [r4, #20]
   3a2f0:	strb	r3, [r2]
   3a2f4:	ldrb	r7, [r4, #25]
   3a2f8:	ldr	r1, [r4, #16]
   3a2fc:	ldr	r2, [r4, #32]
   3a300:	ldr	r0, [r4, #20]
   3a304:	mul	r7, r2, r7
   3a308:	add	r3, r0, r7
   3a30c:	cmp	r1, r3
   3a310:	bcs	3a328 <flatcc_json_printer_int32_struct_field@@Base+0x194>
   3a314:	mov	r1, r7
   3a318:	mov	r0, r4
   3a31c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3a320:	ldr	r2, [r4, #20]
   3a324:	b	3a1f8 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   3a328:	mov	r2, r7
   3a32c:	mov	r1, #32
   3a330:	bl	1459c <memset@plt>
   3a334:	ldr	r2, [r4, #20]
   3a338:	add	r2, r2, r7
   3a33c:	str	r2, [r4, #20]
   3a340:	b	3a1f8 <flatcc_json_printer_int32_struct_field@@Base+0x64>

0003a344 <flatcc_json_printer_int64_struct_field@@Base>:
   3a344:	cmp	r1, #0
   3a348:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a34c:	mov	r4, r0
   3a350:	strd	r6, [sp, #8]
   3a354:	str	r8, [sp, #16]
   3a358:	str	lr, [sp, #20]
   3a35c:	ldrd	r6, [r2, r3]
   3a360:	ldr	r2, [r0, #20]
   3a364:	ldr	r5, [sp, #28]
   3a368:	beq	3a380 <flatcc_json_printer_int64_struct_field@@Base+0x3c>
   3a36c:	add	r1, r2, #1
   3a370:	mov	r3, #44	; 0x2c
   3a374:	str	r1, [r0, #20]
   3a378:	strb	r3, [r2]
   3a37c:	ldr	r2, [r0, #20]
   3a380:	ldrb	r1, [r4, #25]
   3a384:	cmp	r1, #0
   3a388:	bne	3a4a0 <flatcc_json_printer_int64_struct_field@@Base+0x15c>
   3a38c:	ldr	r3, [r4, #16]
   3a390:	cmp	r3, r2
   3a394:	bhi	3a3a8 <flatcc_json_printer_int64_struct_field@@Base+0x64>
   3a398:	mov	r0, r4
   3a39c:	ldr	r3, [r4, #44]	; 0x2c
   3a3a0:	blx	r3
   3a3a4:	ldr	r2, [r4, #20]
   3a3a8:	mov	r3, #34	; 0x22
   3a3ac:	ldr	r1, [sp, #24]
   3a3b0:	strb	r3, [r2]
   3a3b4:	ldrb	r3, [r4, #26]
   3a3b8:	ldr	r2, [r4, #16]
   3a3bc:	ldr	r0, [r4, #20]
   3a3c0:	cmp	r3, #0
   3a3c4:	addeq	r0, r0, #1
   3a3c8:	add	r3, r0, r5
   3a3cc:	cmp	r2, r3
   3a3d0:	mov	r2, r5
   3a3d4:	str	r0, [r4, #20]
   3a3d8:	bhi	3a48c <flatcc_json_printer_int64_struct_field@@Base+0x148>
   3a3dc:	mov	r0, r4
   3a3e0:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3a3e4:	ldr	r2, [r4, #20]
   3a3e8:	mov	r3, #34	; 0x22
   3a3ec:	mov	ip, #58	; 0x3a
   3a3f0:	lsr	r5, r7, #31
   3a3f4:	mov	r0, #32
   3a3f8:	strb	r3, [r2]
   3a3fc:	ldrb	r3, [r4, #26]
   3a400:	ldr	r1, [r4, #20]
   3a404:	clz	r3, r3
   3a408:	lsr	r3, r3, #5
   3a40c:	add	r2, r1, r3
   3a410:	add	r2, r2, #1
   3a414:	str	r2, [r4, #20]
   3a418:	strb	ip, [r1, r3]
   3a41c:	ldr	r3, [r4, #20]
   3a420:	strb	r0, [r3]
   3a424:	ldrb	r3, [r4, #25]
   3a428:	ldr	r1, [r4, #20]
   3a42c:	adds	r3, r3, #0
   3a430:	movne	r3, #1
   3a434:	cmp	r6, #0
   3a438:	sbcs	r2, r7, #0
   3a43c:	add	r2, r1, r3
   3a440:	str	r2, [r4, #20]
   3a444:	bge	3a45c <flatcc_json_printer_int64_struct_field@@Base+0x118>
   3a448:	rsbs	r6, r6, #0
   3a44c:	mov	r0, #45	; 0x2d
   3a450:	rsc	r7, r7, #0
   3a454:	add	r2, r2, #1
   3a458:	strb	r0, [r1, r3]
   3a45c:	mov	r0, r6
   3a460:	mov	r1, r7
   3a464:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3a468:	ldr	r3, [r4, #20]
   3a46c:	add	r0, r5, r0
   3a470:	ldrd	r6, [sp, #8]
   3a474:	ldr	r8, [sp, #16]
   3a478:	add	r3, r3, r0
   3a47c:	str	r3, [r4, #20]
   3a480:	ldrd	r4, [sp]
   3a484:	add	sp, sp, #20
   3a488:	pop	{pc}		; (ldr pc, [sp], #4)
   3a48c:	bl	14524 <memcpy@plt>
   3a490:	ldr	r2, [r4, #20]
   3a494:	add	r2, r2, r5
   3a498:	str	r2, [r4, #20]
   3a49c:	b	3a3e8 <flatcc_json_printer_int64_struct_field@@Base+0xa4>
   3a4a0:	add	r1, r2, #1
   3a4a4:	mov	r3, #10
   3a4a8:	str	r1, [r4, #20]
   3a4ac:	strb	r3, [r2]
   3a4b0:	ldrb	r8, [r4, #25]
   3a4b4:	ldr	r1, [r4, #16]
   3a4b8:	ldr	r2, [r4, #32]
   3a4bc:	ldr	r0, [r4, #20]
   3a4c0:	mul	r8, r2, r8
   3a4c4:	add	r3, r0, r8
   3a4c8:	cmp	r1, r3
   3a4cc:	bcs	3a4e4 <flatcc_json_printer_int64_struct_field@@Base+0x1a0>
   3a4d0:	mov	r1, r8
   3a4d4:	mov	r0, r4
   3a4d8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3a4dc:	ldr	r2, [r4, #20]
   3a4e0:	b	3a3a8 <flatcc_json_printer_int64_struct_field@@Base+0x64>
   3a4e4:	mov	r2, r8
   3a4e8:	mov	r1, #32
   3a4ec:	bl	1459c <memset@plt>
   3a4f0:	ldr	r2, [r4, #20]
   3a4f4:	add	r2, r2, r8
   3a4f8:	str	r2, [r4, #20]
   3a4fc:	b	3a3a8 <flatcc_json_printer_int64_struct_field@@Base+0x64>

0003a500 <flatcc_json_printer_bool_struct_field@@Base>:
   3a500:	cmp	r1, #0
   3a504:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a508:	mov	r4, r0
   3a50c:	strd	r6, [sp, #8]
   3a510:	str	r8, [sp, #16]
   3a514:	str	lr, [sp, #20]
   3a518:	ldrb	r5, [r2, r3]
   3a51c:	ldr	r2, [r0, #20]
   3a520:	ldr	r6, [sp, #28]
   3a524:	beq	3a53c <flatcc_json_printer_bool_struct_field@@Base+0x3c>
   3a528:	add	r1, r2, #1
   3a52c:	mov	r3, #44	; 0x2c
   3a530:	str	r1, [r0, #20]
   3a534:	strb	r3, [r2]
   3a538:	ldr	r2, [r0, #20]
   3a53c:	ldrb	r1, [r4, #25]
   3a540:	cmp	r1, #0
   3a544:	bne	3a674 <flatcc_json_printer_bool_struct_field@@Base+0x174>
   3a548:	ldr	r3, [r4, #16]
   3a54c:	cmp	r3, r2
   3a550:	bhi	3a564 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   3a554:	mov	r0, r4
   3a558:	ldr	r3, [r4, #44]	; 0x2c
   3a55c:	blx	r3
   3a560:	ldr	r2, [r4, #20]
   3a564:	mov	r3, #34	; 0x22
   3a568:	ldr	r1, [sp, #24]
   3a56c:	strb	r3, [r2]
   3a570:	ldrb	r3, [r4, #26]
   3a574:	ldr	r2, [r4, #16]
   3a578:	ldr	r0, [r4, #20]
   3a57c:	cmp	r3, #0
   3a580:	addeq	r0, r0, #1
   3a584:	add	r3, r0, r6
   3a588:	cmp	r2, r3
   3a58c:	mov	r2, r6
   3a590:	str	r0, [r4, #20]
   3a594:	bhi	3a63c <flatcc_json_printer_bool_struct_field@@Base+0x13c>
   3a598:	mov	r0, r4
   3a59c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3a5a0:	ldr	r2, [r4, #20]
   3a5a4:	mov	r3, #34	; 0x22
   3a5a8:	mov	ip, #58	; 0x3a
   3a5ac:	mov	r0, #32
   3a5b0:	strb	r3, [r2]
   3a5b4:	ldrb	r3, [r4, #26]
   3a5b8:	ldr	r1, [r4, #20]
   3a5bc:	clz	r3, r3
   3a5c0:	lsr	r3, r3, #5
   3a5c4:	add	r2, r1, r3
   3a5c8:	add	r2, r2, #1
   3a5cc:	str	r2, [r4, #20]
   3a5d0:	strb	ip, [r1, r3]
   3a5d4:	ldr	r3, [r4, #20]
   3a5d8:	strb	r0, [r3]
   3a5dc:	ldrb	r3, [r4, #25]
   3a5e0:	ldr	r1, [r4, #20]
   3a5e4:	adds	r3, r3, #0
   3a5e8:	movne	r3, #1
   3a5ec:	cmp	r5, #0
   3a5f0:	add	r2, r1, r3
   3a5f4:	str	r2, [r4, #20]
   3a5f8:	beq	3a650 <flatcc_json_printer_bool_struct_field@@Base+0x150>
   3a5fc:	ldr	ip, [pc, #208]	; 3a6d4 <flatcc_json_printer_bool_struct_field@@Base+0x1d4>
   3a600:	movw	r0, #32560	; 0x7f30
   3a604:	movt	r0, #4
   3a608:	ldr	lr, [r0, #1768]	; 0x6e8
   3a60c:	mov	r0, #4
   3a610:	ldrb	ip, [ip, #4]
   3a614:	str	lr, [r1, r3]
   3a618:	strb	ip, [r2, #4]
   3a61c:	ldr	r3, [r4, #20]
   3a620:	ldrd	r6, [sp, #8]
   3a624:	ldr	r8, [sp, #16]
   3a628:	add	r3, r3, r0
   3a62c:	str	r3, [r4, #20]
   3a630:	ldrd	r4, [sp]
   3a634:	add	sp, sp, #20
   3a638:	pop	{pc}		; (ldr pc, [sp], #4)
   3a63c:	bl	14524 <memcpy@plt>
   3a640:	ldr	r2, [r4, #20]
   3a644:	add	r2, r2, r6
   3a648:	str	r2, [r4, #20]
   3a64c:	b	3a5a4 <flatcc_json_printer_bool_struct_field@@Base+0xa4>
   3a650:	movw	r0, #32560	; 0x7f30
   3a654:	movt	r0, #4
   3a658:	add	ip, r0, #1776	; 0x6f0
   3a65c:	ldr	lr, [r0, #1776]	; 0x6f0
   3a660:	mov	r0, #5
   3a664:	ldrh	ip, [ip, #4]
   3a668:	str	lr, [r1, r3]
   3a66c:	strh	ip, [r2, #4]
   3a670:	b	3a61c <flatcc_json_printer_bool_struct_field@@Base+0x11c>
   3a674:	add	r1, r2, #1
   3a678:	mov	r3, #10
   3a67c:	str	r1, [r4, #20]
   3a680:	strb	r3, [r2]
   3a684:	ldrb	r7, [r4, #25]
   3a688:	ldr	r1, [r4, #16]
   3a68c:	ldr	r2, [r4, #32]
   3a690:	ldr	r0, [r4, #20]
   3a694:	mul	r7, r2, r7
   3a698:	add	r3, r0, r7
   3a69c:	cmp	r1, r3
   3a6a0:	bcs	3a6b8 <flatcc_json_printer_bool_struct_field@@Base+0x1b8>
   3a6a4:	mov	r1, r7
   3a6a8:	mov	r0, r4
   3a6ac:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3a6b0:	ldr	r2, [r4, #20]
   3a6b4:	b	3a564 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   3a6b8:	mov	r2, r7
   3a6bc:	mov	r1, #32
   3a6c0:	bl	1459c <memset@plt>
   3a6c4:	ldr	r2, [r4, #20]
   3a6c8:	add	r2, r2, r7
   3a6cc:	str	r2, [r4, #20]
   3a6d0:	b	3a564 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   3a6d4:	andeq	r8, r4, r8, lsl r6

0003a6d8 <flatcc_json_printer_float_struct_field@@Base>:
   3a6d8:	add	r3, r2, r3
   3a6dc:	cmp	r1, #0
   3a6e0:	strd	r4, [sp, #-16]!
   3a6e4:	ldr	r2, [r0, #20]
   3a6e8:	mov	r4, r0
   3a6ec:	str	r6, [sp, #8]
   3a6f0:	str	lr, [sp, #12]
   3a6f4:	vpush	{d8}
   3a6f8:	vldr	s16, [r3]
   3a6fc:	ldr	r5, [sp, #28]
   3a700:	beq	3a718 <flatcc_json_printer_float_struct_field@@Base+0x40>
   3a704:	add	r1, r2, #1
   3a708:	mov	r3, #44	; 0x2c
   3a70c:	str	r1, [r0, #20]
   3a710:	strb	r3, [r2]
   3a714:	ldr	r2, [r0, #20]
   3a718:	ldrb	r1, [r4, #25]
   3a71c:	cmp	r1, #0
   3a720:	bne	3a80c <flatcc_json_printer_float_struct_field@@Base+0x134>
   3a724:	ldr	r3, [r4, #16]
   3a728:	cmp	r3, r2
   3a72c:	bhi	3a740 <flatcc_json_printer_float_struct_field@@Base+0x68>
   3a730:	mov	r0, r4
   3a734:	ldr	r3, [r4, #44]	; 0x2c
   3a738:	blx	r3
   3a73c:	ldr	r2, [r4, #20]
   3a740:	mov	r3, #34	; 0x22
   3a744:	ldr	r1, [sp, #24]
   3a748:	strb	r3, [r2]
   3a74c:	ldrb	r3, [r4, #26]
   3a750:	ldr	r2, [r4, #16]
   3a754:	ldr	r0, [r4, #20]
   3a758:	cmp	r3, #0
   3a75c:	addeq	r0, r0, #1
   3a760:	add	r3, r0, r5
   3a764:	cmp	r2, r3
   3a768:	mov	r2, r5
   3a76c:	str	r0, [r4, #20]
   3a770:	bhi	3a7f8 <flatcc_json_printer_float_struct_field@@Base+0x120>
   3a774:	mov	r0, r4
   3a778:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3a77c:	ldr	r2, [r4, #20]
   3a780:	mov	r3, #34	; 0x22
   3a784:	mov	ip, #58	; 0x3a
   3a788:	vcvt.f64.f32	d0, s16
   3a78c:	mov	r0, #32
   3a790:	strb	r3, [r2]
   3a794:	ldrb	r3, [r4, #26]
   3a798:	ldr	r1, [r4, #20]
   3a79c:	clz	r3, r3
   3a7a0:	lsr	r3, r3, #5
   3a7a4:	add	r2, r1, r3
   3a7a8:	add	r2, r2, #1
   3a7ac:	str	r2, [r4, #20]
   3a7b0:	strb	ip, [r1, r3]
   3a7b4:	ldr	r3, [r4, #20]
   3a7b8:	strb	r0, [r3]
   3a7bc:	ldrb	r2, [r4, #25]
   3a7c0:	ldr	r3, [r4, #20]
   3a7c4:	cmp	r2, #0
   3a7c8:	addne	r3, r3, #1
   3a7cc:	mov	r0, r3
   3a7d0:	str	r3, [r4, #20]
   3a7d4:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   3a7d8:	ldr	r3, [r4, #20]
   3a7dc:	vpop	{d8}
   3a7e0:	add	r0, r3, r0
   3a7e4:	ldr	r6, [sp, #8]
   3a7e8:	str	r0, [r4, #20]
   3a7ec:	ldrd	r4, [sp]
   3a7f0:	add	sp, sp, #12
   3a7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   3a7f8:	bl	14524 <memcpy@plt>
   3a7fc:	ldr	r2, [r4, #20]
   3a800:	add	r2, r2, r5
   3a804:	str	r2, [r4, #20]
   3a808:	b	3a780 <flatcc_json_printer_float_struct_field@@Base+0xa8>
   3a80c:	add	r1, r2, #1
   3a810:	mov	r3, #10
   3a814:	str	r1, [r4, #20]
   3a818:	strb	r3, [r2]
   3a81c:	ldrb	r6, [r4, #25]
   3a820:	ldr	r1, [r4, #16]
   3a824:	ldr	r2, [r4, #32]
   3a828:	ldr	r0, [r4, #20]
   3a82c:	mul	r6, r2, r6
   3a830:	add	r3, r0, r6
   3a834:	cmp	r1, r3
   3a838:	bcs	3a850 <flatcc_json_printer_float_struct_field@@Base+0x178>
   3a83c:	mov	r1, r6
   3a840:	mov	r0, r4
   3a844:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3a848:	ldr	r2, [r4, #20]
   3a84c:	b	3a740 <flatcc_json_printer_float_struct_field@@Base+0x68>
   3a850:	mov	r2, r6
   3a854:	mov	r1, #32
   3a858:	bl	1459c <memset@plt>
   3a85c:	ldr	r2, [r4, #20]
   3a860:	add	r2, r2, r6
   3a864:	str	r2, [r4, #20]
   3a868:	b	3a740 <flatcc_json_printer_float_struct_field@@Base+0x68>

0003a86c <flatcc_json_printer_double_struct_field@@Base>:
   3a86c:	add	r3, r2, r3
   3a870:	cmp	r1, #0
   3a874:	strd	r4, [sp, #-16]!
   3a878:	ldr	r2, [r0, #20]
   3a87c:	mov	r4, r0
   3a880:	str	r6, [sp, #8]
   3a884:	str	lr, [sp, #12]
   3a888:	vpush	{d8}
   3a88c:	vldr	d8, [r3]
   3a890:	ldr	r5, [sp, #28]
   3a894:	beq	3a8ac <flatcc_json_printer_double_struct_field@@Base+0x40>
   3a898:	add	r1, r2, #1
   3a89c:	mov	r3, #44	; 0x2c
   3a8a0:	str	r1, [r0, #20]
   3a8a4:	strb	r3, [r2]
   3a8a8:	ldr	r2, [r0, #20]
   3a8ac:	ldrb	r1, [r4, #25]
   3a8b0:	cmp	r1, #0
   3a8b4:	bne	3a9a0 <flatcc_json_printer_double_struct_field@@Base+0x134>
   3a8b8:	ldr	r3, [r4, #16]
   3a8bc:	cmp	r3, r2
   3a8c0:	bhi	3a8d4 <flatcc_json_printer_double_struct_field@@Base+0x68>
   3a8c4:	mov	r0, r4
   3a8c8:	ldr	r3, [r4, #44]	; 0x2c
   3a8cc:	blx	r3
   3a8d0:	ldr	r2, [r4, #20]
   3a8d4:	mov	r3, #34	; 0x22
   3a8d8:	ldr	r1, [sp, #24]
   3a8dc:	strb	r3, [r2]
   3a8e0:	ldrb	r3, [r4, #26]
   3a8e4:	ldr	r2, [r4, #16]
   3a8e8:	ldr	r0, [r4, #20]
   3a8ec:	cmp	r3, #0
   3a8f0:	addeq	r0, r0, #1
   3a8f4:	add	r3, r0, r5
   3a8f8:	cmp	r2, r3
   3a8fc:	mov	r2, r5
   3a900:	str	r0, [r4, #20]
   3a904:	bhi	3a98c <flatcc_json_printer_double_struct_field@@Base+0x120>
   3a908:	mov	r0, r4
   3a90c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3a910:	ldr	r2, [r4, #20]
   3a914:	mov	r3, #34	; 0x22
   3a918:	mov	ip, #58	; 0x3a
   3a91c:	vmov.f64	d0, d8
   3a920:	mov	r0, #32
   3a924:	strb	r3, [r2]
   3a928:	ldrb	r3, [r4, #26]
   3a92c:	ldr	r1, [r4, #20]
   3a930:	clz	r3, r3
   3a934:	lsr	r3, r3, #5
   3a938:	add	r2, r1, r3
   3a93c:	add	r2, r2, #1
   3a940:	str	r2, [r4, #20]
   3a944:	strb	ip, [r1, r3]
   3a948:	ldr	r3, [r4, #20]
   3a94c:	strb	r0, [r3]
   3a950:	ldrb	r2, [r4, #25]
   3a954:	ldr	r3, [r4, #20]
   3a958:	cmp	r2, #0
   3a95c:	addne	r3, r3, #1
   3a960:	mov	r0, r3
   3a964:	str	r3, [r4, #20]
   3a968:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   3a96c:	ldr	r3, [r4, #20]
   3a970:	vpop	{d8}
   3a974:	add	r0, r3, r0
   3a978:	ldr	r6, [sp, #8]
   3a97c:	str	r0, [r4, #20]
   3a980:	ldrd	r4, [sp]
   3a984:	add	sp, sp, #12
   3a988:	pop	{pc}		; (ldr pc, [sp], #4)
   3a98c:	bl	14524 <memcpy@plt>
   3a990:	ldr	r2, [r4, #20]
   3a994:	add	r2, r2, r5
   3a998:	str	r2, [r4, #20]
   3a99c:	b	3a914 <flatcc_json_printer_double_struct_field@@Base+0xa8>
   3a9a0:	add	r1, r2, #1
   3a9a4:	mov	r3, #10
   3a9a8:	str	r1, [r4, #20]
   3a9ac:	strb	r3, [r2]
   3a9b0:	ldrb	r6, [r4, #25]
   3a9b4:	ldr	r1, [r4, #16]
   3a9b8:	ldr	r2, [r4, #32]
   3a9bc:	ldr	r0, [r4, #20]
   3a9c0:	mul	r6, r2, r6
   3a9c4:	add	r3, r0, r6
   3a9c8:	cmp	r1, r3
   3a9cc:	bcs	3a9e4 <flatcc_json_printer_double_struct_field@@Base+0x178>
   3a9d0:	mov	r1, r6
   3a9d4:	mov	r0, r4
   3a9d8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3a9dc:	ldr	r2, [r4, #20]
   3a9e0:	b	3a8d4 <flatcc_json_printer_double_struct_field@@Base+0x68>
   3a9e4:	mov	r2, r6
   3a9e8:	mov	r1, #32
   3a9ec:	bl	1459c <memset@plt>
   3a9f0:	ldr	r2, [r4, #20]
   3a9f4:	add	r2, r2, r6
   3a9f8:	str	r2, [r4, #20]
   3a9fc:	b	3a8d4 <flatcc_json_printer_double_struct_field@@Base+0x68>

0003aa00 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   3aa00:	cmp	r1, #0
   3aa04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3aa08:	mov	r4, r0
   3aa0c:	strd	r6, [sp, #8]
   3aa10:	strd	r8, [sp, #16]
   3aa14:	str	sl, [sp, #24]
   3aa18:	str	lr, [sp, #28]
   3aa1c:	ldrb	r5, [r2, r3]
   3aa20:	ldr	r2, [r0, #20]
   3aa24:	ldr	r8, [sp, #32]
   3aa28:	ldr	r7, [sp, #36]	; 0x24
   3aa2c:	ldr	r6, [sp, #40]	; 0x28
   3aa30:	beq	3aa48 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x48>
   3aa34:	add	r1, r2, #1
   3aa38:	mov	r3, #44	; 0x2c
   3aa3c:	str	r1, [r0, #20]
   3aa40:	strb	r3, [r2]
   3aa44:	ldr	r2, [r0, #20]
   3aa48:	ldrb	r1, [r4, #25]
   3aa4c:	cmp	r1, #0
   3aa50:	bne	3ab98 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x198>
   3aa54:	ldr	r3, [r4, #16]
   3aa58:	cmp	r2, r3
   3aa5c:	bcc	3aa70 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3aa60:	mov	r0, r4
   3aa64:	ldr	r3, [r4, #44]	; 0x2c
   3aa68:	blx	r3
   3aa6c:	ldr	r2, [r4, #20]
   3aa70:	mov	r3, #34	; 0x22
   3aa74:	strb	r3, [r2]
   3aa78:	ldrb	r3, [r4, #26]
   3aa7c:	ldr	r2, [r4, #16]
   3aa80:	ldr	r0, [r4, #20]
   3aa84:	cmp	r3, #0
   3aa88:	addeq	r0, r0, #1
   3aa8c:	add	r3, r0, r7
   3aa90:	cmp	r2, r3
   3aa94:	str	r0, [r4, #20]
   3aa98:	bhi	3ab34 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x134>
   3aa9c:	mov	r2, r7
   3aaa0:	mov	r1, r8
   3aaa4:	mov	r0, r4
   3aaa8:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3aaac:	ldr	r2, [r4, #20]
   3aab0:	mov	r3, #34	; 0x22
   3aab4:	mov	ip, #58	; 0x3a
   3aab8:	mov	r0, #32
   3aabc:	strb	r3, [r2]
   3aac0:	ldrb	r3, [r4, #26]
   3aac4:	ldr	r1, [r4, #20]
   3aac8:	clz	r3, r3
   3aacc:	lsr	r3, r3, #5
   3aad0:	add	r2, r1, r3
   3aad4:	add	r2, r2, #1
   3aad8:	str	r2, [r4, #20]
   3aadc:	strb	ip, [r1, r3]
   3aae0:	ldr	r3, [r4, #20]
   3aae4:	strb	r0, [r3]
   3aae8:	ldrb	r3, [r4, #25]
   3aaec:	ldr	r0, [r4, #20]
   3aaf0:	ldrb	r2, [r4, #27]
   3aaf4:	adds	r3, r3, #0
   3aaf8:	movne	r3, #1
   3aafc:	add	r1, r0, r3
   3ab00:	cmp	r2, #0
   3ab04:	str	r1, [r4, #20]
   3ab08:	bne	3ab50 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x150>
   3ab0c:	mov	r1, r5
   3ab10:	mov	r0, r4
   3ab14:	ldrd	r4, [sp]
   3ab18:	mov	r3, r6
   3ab1c:	ldrd	r6, [sp, #8]
   3ab20:	ldrd	r8, [sp, #16]
   3ab24:	ldr	sl, [sp, #24]
   3ab28:	ldr	lr, [sp, #28]
   3ab2c:	add	sp, sp, #32
   3ab30:	bx	r3
   3ab34:	mov	r2, r7
   3ab38:	mov	r1, r8
   3ab3c:	bl	14524 <memcpy@plt>
   3ab40:	ldr	r2, [r4, #20]
   3ab44:	add	r2, r2, r7
   3ab48:	str	r2, [r4, #20]
   3ab4c:	b	3aab0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xb0>
   3ab50:	cmp	r5, #99	; 0x63
   3ab54:	bhi	3abf8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1f8>
   3ab58:	cmp	r5, #9
   3ab5c:	bhi	3ac48 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x248>
   3ab60:	add	r5, r5, #48	; 0x30
   3ab64:	mov	r2, #0
   3ab68:	mov	ip, #1
   3ab6c:	strb	r2, [r1, #1]
   3ab70:	strb	r5, [r0, r3]
   3ab74:	ldr	r3, [r4, #20]
   3ab78:	ldrd	r6, [sp, #8]
   3ab7c:	ldrd	r8, [sp, #16]
   3ab80:	add	r3, r3, ip
   3ab84:	ldr	sl, [sp, #24]
   3ab88:	str	r3, [r4, #20]
   3ab8c:	ldrd	r4, [sp]
   3ab90:	add	sp, sp, #28
   3ab94:	pop	{pc}		; (ldr pc, [sp], #4)
   3ab98:	add	r1, r2, #1
   3ab9c:	mov	r3, #10
   3aba0:	str	r1, [r4, #20]
   3aba4:	strb	r3, [r2]
   3aba8:	ldrb	r3, [r4, #25]
   3abac:	ldr	r1, [r4, #16]
   3abb0:	ldr	r2, [r4, #32]
   3abb4:	ldr	r0, [r4, #20]
   3abb8:	mul	r9, r2, r3
   3abbc:	add	r3, r0, r9
   3abc0:	cmp	r1, r3
   3abc4:	bcs	3abdc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1dc>
   3abc8:	mov	r1, r9
   3abcc:	mov	r0, r4
   3abd0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3abd4:	ldr	r2, [r4, #20]
   3abd8:	b	3aa70 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3abdc:	mov	r2, r9
   3abe0:	mov	r1, #32
   3abe4:	bl	1459c <memset@plt>
   3abe8:	ldr	r2, [r4, #20]
   3abec:	add	r2, r2, r9
   3abf0:	str	r2, [r4, #20]
   3abf4:	b	3aa70 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3abf8:	movw	r2, #34079	; 0x851f
   3abfc:	movt	r2, #20971	; 0x51eb
   3ac00:	mov	r6, #100	; 0x64
   3ac04:	mov	ip, #0
   3ac08:	umull	lr, r2, r2, r5
   3ac0c:	movw	lr, #32560	; 0x7f30
   3ac10:	movt	lr, #4
   3ac14:	strb	ip, [r1, #3]
   3ac18:	mov	ip, #3
   3ac1c:	lsr	r2, r2, #5
   3ac20:	mls	r5, r6, r2, r5
   3ac24:	add	r2, r2, #48	; 0x30
   3ac28:	uxtb	r5, r5
   3ac2c:	ldrb	r6, [lr, r5, lsl #1]
   3ac30:	add	lr, lr, r5, lsl #1
   3ac34:	strb	r6, [r1, #1]
   3ac38:	ldrb	lr, [lr, #1]
   3ac3c:	strb	lr, [r1, #2]
   3ac40:	strb	r2, [r0, r3]
   3ac44:	b	3ab74 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x174>
   3ac48:	mov	ip, #0
   3ac4c:	sxth	r5, r5
   3ac50:	movw	r2, #32560	; 0x7f30
   3ac54:	movt	r2, #4
   3ac58:	add	lr, r2, r5, lsl #1
   3ac5c:	strb	ip, [r1, #2]
   3ac60:	mov	ip, #2
   3ac64:	ldrb	r2, [r2, r5, lsl #1]
   3ac68:	strb	r2, [r0, r3]
   3ac6c:	ldrb	r3, [lr, #1]
   3ac70:	strb	r3, [r1, #1]
   3ac74:	b	3ab74 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x174>

0003ac78 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   3ac78:	cmp	r1, #0
   3ac7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ac80:	mov	r4, r0
   3ac84:	ldrh	r5, [r2, r3]
   3ac88:	ldr	r2, [r0, #20]
   3ac8c:	strd	r6, [sp, #8]
   3ac90:	strd	r8, [sp, #16]
   3ac94:	str	sl, [sp, #24]
   3ac98:	str	lr, [sp, #28]
   3ac9c:	ldr	r8, [sp, #32]
   3aca0:	ldr	r7, [sp, #36]	; 0x24
   3aca4:	ldr	r6, [sp, #40]	; 0x28
   3aca8:	beq	3acc0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x48>
   3acac:	add	r1, r2, #1
   3acb0:	mov	r3, #44	; 0x2c
   3acb4:	str	r1, [r0, #20]
   3acb8:	strb	r3, [r2]
   3acbc:	ldr	r2, [r0, #20]
   3acc0:	ldrb	r1, [r4, #25]
   3acc4:	cmp	r1, #0
   3acc8:	bne	3adf0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x178>
   3accc:	ldr	r3, [r4, #16]
   3acd0:	cmp	r3, r2
   3acd4:	bhi	3ace8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   3acd8:	mov	r0, r4
   3acdc:	ldr	r3, [r4, #44]	; 0x2c
   3ace0:	blx	r3
   3ace4:	ldr	r2, [r4, #20]
   3ace8:	mov	r3, #34	; 0x22
   3acec:	strb	r3, [r2]
   3acf0:	ldrb	r3, [r4, #26]
   3acf4:	ldr	r2, [r4, #16]
   3acf8:	ldr	r0, [r4, #20]
   3acfc:	cmp	r3, #0
   3ad00:	addeq	r0, r0, #1
   3ad04:	add	r3, r0, r7
   3ad08:	cmp	r2, r3
   3ad0c:	str	r0, [r4, #20]
   3ad10:	bhi	3ada8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x130>
   3ad14:	mov	r2, r7
   3ad18:	mov	r1, r8
   3ad1c:	mov	r0, r4
   3ad20:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3ad24:	ldr	r2, [r4, #20]
   3ad28:	mov	r3, #34	; 0x22
   3ad2c:	mov	ip, #58	; 0x3a
   3ad30:	mov	r0, #32
   3ad34:	strb	r3, [r2]
   3ad38:	ldrb	r3, [r4, #26]
   3ad3c:	ldr	r1, [r4, #20]
   3ad40:	clz	r3, r3
   3ad44:	lsr	r3, r3, #5
   3ad48:	add	r2, r1, r3
   3ad4c:	add	r2, r2, #1
   3ad50:	str	r2, [r4, #20]
   3ad54:	strb	ip, [r1, r3]
   3ad58:	ldr	r3, [r4, #20]
   3ad5c:	strb	r0, [r3]
   3ad60:	ldrb	r2, [r4, #25]
   3ad64:	ldr	r1, [r4, #20]
   3ad68:	ldrb	r3, [r4, #27]
   3ad6c:	cmp	r2, #0
   3ad70:	addne	r1, r1, #1
   3ad74:	cmp	r3, #0
   3ad78:	str	r1, [r4, #20]
   3ad7c:	bne	3adc4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x14c>
   3ad80:	mov	r1, r5
   3ad84:	mov	r0, r4
   3ad88:	ldrd	r4, [sp]
   3ad8c:	mov	r3, r6
   3ad90:	ldrd	r6, [sp, #8]
   3ad94:	ldrd	r8, [sp, #16]
   3ad98:	ldr	sl, [sp, #24]
   3ad9c:	ldr	lr, [sp, #28]
   3ada0:	add	sp, sp, #32
   3ada4:	bx	r3
   3ada8:	mov	r2, r7
   3adac:	mov	r1, r8
   3adb0:	bl	14524 <memcpy@plt>
   3adb4:	ldr	r2, [r4, #20]
   3adb8:	add	r2, r2, r7
   3adbc:	str	r2, [r4, #20]
   3adc0:	b	3ad28 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xb0>
   3adc4:	mov	r0, r5
   3adc8:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3adcc:	ldr	r3, [r4, #20]
   3add0:	ldrd	r6, [sp, #8]
   3add4:	ldrd	r8, [sp, #16]
   3add8:	add	r0, r3, r0
   3addc:	ldr	sl, [sp, #24]
   3ade0:	str	r0, [r4, #20]
   3ade4:	ldrd	r4, [sp]
   3ade8:	add	sp, sp, #28
   3adec:	pop	{pc}		; (ldr pc, [sp], #4)
   3adf0:	add	r1, r2, #1
   3adf4:	mov	r3, #10
   3adf8:	str	r1, [r4, #20]
   3adfc:	strb	r3, [r2]
   3ae00:	ldrb	r3, [r4, #25]
   3ae04:	ldr	r1, [r4, #16]
   3ae08:	ldr	r2, [r4, #32]
   3ae0c:	ldr	r0, [r4, #20]
   3ae10:	mul	r9, r2, r3
   3ae14:	add	r3, r0, r9
   3ae18:	cmp	r1, r3
   3ae1c:	bcs	3ae34 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1bc>
   3ae20:	mov	r1, r9
   3ae24:	mov	r0, r4
   3ae28:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3ae2c:	ldr	r2, [r4, #20]
   3ae30:	b	3ace8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   3ae34:	mov	r2, r9
   3ae38:	mov	r1, #32
   3ae3c:	bl	1459c <memset@plt>
   3ae40:	ldr	r2, [r4, #20]
   3ae44:	add	r2, r2, r9
   3ae48:	str	r2, [r4, #20]
   3ae4c:	b	3ace8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>

0003ae50 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   3ae50:	cmp	r1, #0
   3ae54:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ae58:	mov	r4, r0
   3ae5c:	ldr	r5, [r2, r3]
   3ae60:	ldr	r2, [r0, #20]
   3ae64:	strd	r6, [sp, #8]
   3ae68:	strd	r8, [sp, #16]
   3ae6c:	str	sl, [sp, #24]
   3ae70:	str	lr, [sp, #28]
   3ae74:	ldr	r8, [sp, #32]
   3ae78:	ldr	r7, [sp, #36]	; 0x24
   3ae7c:	ldr	r6, [sp, #40]	; 0x28
   3ae80:	beq	3ae98 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x48>
   3ae84:	add	r1, r2, #1
   3ae88:	mov	r3, #44	; 0x2c
   3ae8c:	str	r1, [r0, #20]
   3ae90:	strb	r3, [r2]
   3ae94:	ldr	r2, [r0, #20]
   3ae98:	ldrb	r1, [r4, #25]
   3ae9c:	cmp	r1, #0
   3aea0:	bne	3afc8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x178>
   3aea4:	ldr	r3, [r4, #16]
   3aea8:	cmp	r3, r2
   3aeac:	bhi	3aec0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   3aeb0:	mov	r0, r4
   3aeb4:	ldr	r3, [r4, #44]	; 0x2c
   3aeb8:	blx	r3
   3aebc:	ldr	r2, [r4, #20]
   3aec0:	mov	r3, #34	; 0x22
   3aec4:	strb	r3, [r2]
   3aec8:	ldrb	r3, [r4, #26]
   3aecc:	ldr	r2, [r4, #16]
   3aed0:	ldr	r0, [r4, #20]
   3aed4:	cmp	r3, #0
   3aed8:	addeq	r0, r0, #1
   3aedc:	add	r3, r0, r7
   3aee0:	cmp	r2, r3
   3aee4:	str	r0, [r4, #20]
   3aee8:	bhi	3af80 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x130>
   3aeec:	mov	r2, r7
   3aef0:	mov	r1, r8
   3aef4:	mov	r0, r4
   3aef8:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3aefc:	ldr	r2, [r4, #20]
   3af00:	mov	r3, #34	; 0x22
   3af04:	mov	ip, #58	; 0x3a
   3af08:	mov	r0, #32
   3af0c:	strb	r3, [r2]
   3af10:	ldrb	r3, [r4, #26]
   3af14:	ldr	r1, [r4, #20]
   3af18:	clz	r3, r3
   3af1c:	lsr	r3, r3, #5
   3af20:	add	r2, r1, r3
   3af24:	add	r2, r2, #1
   3af28:	str	r2, [r4, #20]
   3af2c:	strb	ip, [r1, r3]
   3af30:	ldr	r3, [r4, #20]
   3af34:	strb	r0, [r3]
   3af38:	ldrb	r2, [r4, #25]
   3af3c:	ldr	r1, [r4, #20]
   3af40:	ldrb	r3, [r4, #27]
   3af44:	cmp	r2, #0
   3af48:	addne	r1, r1, #1
   3af4c:	cmp	r3, #0
   3af50:	str	r1, [r4, #20]
   3af54:	bne	3af9c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x14c>
   3af58:	mov	r1, r5
   3af5c:	mov	r0, r4
   3af60:	ldrd	r4, [sp]
   3af64:	mov	r3, r6
   3af68:	ldrd	r6, [sp, #8]
   3af6c:	ldrd	r8, [sp, #16]
   3af70:	ldr	sl, [sp, #24]
   3af74:	ldr	lr, [sp, #28]
   3af78:	add	sp, sp, #32
   3af7c:	bx	r3
   3af80:	mov	r2, r7
   3af84:	mov	r1, r8
   3af88:	bl	14524 <memcpy@plt>
   3af8c:	ldr	r2, [r4, #20]
   3af90:	add	r2, r2, r7
   3af94:	str	r2, [r4, #20]
   3af98:	b	3af00 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xb0>
   3af9c:	mov	r0, r5
   3afa0:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3afa4:	ldr	r3, [r4, #20]
   3afa8:	ldrd	r6, [sp, #8]
   3afac:	ldrd	r8, [sp, #16]
   3afb0:	add	r0, r3, r0
   3afb4:	ldr	sl, [sp, #24]
   3afb8:	str	r0, [r4, #20]
   3afbc:	ldrd	r4, [sp]
   3afc0:	add	sp, sp, #28
   3afc4:	pop	{pc}		; (ldr pc, [sp], #4)
   3afc8:	add	r1, r2, #1
   3afcc:	mov	r3, #10
   3afd0:	str	r1, [r4, #20]
   3afd4:	strb	r3, [r2]
   3afd8:	ldrb	r3, [r4, #25]
   3afdc:	ldr	r1, [r4, #16]
   3afe0:	ldr	r2, [r4, #32]
   3afe4:	ldr	r0, [r4, #20]
   3afe8:	mul	r9, r2, r3
   3afec:	add	r3, r0, r9
   3aff0:	cmp	r1, r3
   3aff4:	bcs	3b00c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1bc>
   3aff8:	mov	r1, r9
   3affc:	mov	r0, r4
   3b000:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3b004:	ldr	r2, [r4, #20]
   3b008:	b	3aec0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   3b00c:	mov	r2, r9
   3b010:	mov	r1, #32
   3b014:	bl	1459c <memset@plt>
   3b018:	ldr	r2, [r4, #20]
   3b01c:	add	r2, r2, r9
   3b020:	str	r2, [r4, #20]
   3b024:	b	3aec0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>

0003b028 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   3b028:	cmp	r1, #0
   3b02c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b030:	mov	r4, r0
   3b034:	strd	r6, [sp, #8]
   3b038:	strd	r8, [sp, #16]
   3b03c:	str	sl, [sp, #24]
   3b040:	str	lr, [sp, #28]
   3b044:	ldrd	r6, [r2, r3]
   3b048:	ldr	r2, [r0, #20]
   3b04c:	ldr	r9, [sp, #32]
   3b050:	ldr	r8, [sp, #36]	; 0x24
   3b054:	ldr	r5, [sp, #40]	; 0x28
   3b058:	beq	3b070 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x48>
   3b05c:	add	r1, r2, #1
   3b060:	mov	r3, #44	; 0x2c
   3b064:	str	r1, [r0, #20]
   3b068:	strb	r3, [r2]
   3b06c:	ldr	r2, [r0, #20]
   3b070:	ldrb	r1, [r4, #25]
   3b074:	cmp	r1, #0
   3b078:	bne	3b1a8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x180>
   3b07c:	ldr	r3, [r4, #16]
   3b080:	cmp	r3, r2
   3b084:	bhi	3b098 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   3b088:	mov	r0, r4
   3b08c:	ldr	r3, [r4, #44]	; 0x2c
   3b090:	blx	r3
   3b094:	ldr	r2, [r4, #20]
   3b098:	mov	r3, #34	; 0x22
   3b09c:	strb	r3, [r2]
   3b0a0:	ldrb	r3, [r4, #26]
   3b0a4:	ldr	r2, [r4, #16]
   3b0a8:	ldr	r0, [r4, #20]
   3b0ac:	cmp	r3, #0
   3b0b0:	addeq	r0, r0, #1
   3b0b4:	add	r3, r0, r8
   3b0b8:	cmp	r2, r3
   3b0bc:	str	r0, [r4, #20]
   3b0c0:	bhi	3b15c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x134>
   3b0c4:	mov	r2, r8
   3b0c8:	mov	r1, r9
   3b0cc:	mov	r0, r4
   3b0d0:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3b0d4:	ldr	r8, [r4, #20]
   3b0d8:	mov	r3, #34	; 0x22
   3b0dc:	mov	ip, #58	; 0x3a
   3b0e0:	mov	r0, #32
   3b0e4:	strb	r3, [r8]
   3b0e8:	ldrb	r3, [r4, #26]
   3b0ec:	ldr	r1, [r4, #20]
   3b0f0:	clz	r3, r3
   3b0f4:	lsr	r3, r3, #5
   3b0f8:	add	r2, r1, r3
   3b0fc:	add	r2, r2, #1
   3b100:	str	r2, [r4, #20]
   3b104:	strb	ip, [r1, r3]
   3b108:	ldr	r3, [r4, #20]
   3b10c:	strb	r0, [r3]
   3b110:	ldrb	r1, [r4, #25]
   3b114:	ldr	r2, [r4, #20]
   3b118:	ldrb	r3, [r4, #27]
   3b11c:	cmp	r1, #0
   3b120:	addne	r2, r2, #1
   3b124:	cmp	r3, #0
   3b128:	str	r2, [r4, #20]
   3b12c:	bne	3b178 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x150>
   3b130:	mov	r2, r6
   3b134:	mov	r3, r7
   3b138:	ldrd	r6, [sp, #8]
   3b13c:	mov	r0, r4
   3b140:	mov	r1, r5
   3b144:	ldrd	r4, [sp]
   3b148:	ldrd	r8, [sp, #16]
   3b14c:	ldr	sl, [sp, #24]
   3b150:	ldr	lr, [sp, #28]
   3b154:	add	sp, sp, #32
   3b158:	bx	r1
   3b15c:	mov	r2, r8
   3b160:	mov	r1, r9
   3b164:	bl	14524 <memcpy@plt>
   3b168:	ldr	r3, [r4, #20]
   3b16c:	add	r8, r3, r8
   3b170:	str	r8, [r4, #20]
   3b174:	b	3b0d8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xb0>
   3b178:	mov	r0, r6
   3b17c:	mov	r1, r7
   3b180:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3b184:	ldr	r3, [r4, #20]
   3b188:	ldrd	r6, [sp, #8]
   3b18c:	ldrd	r8, [sp, #16]
   3b190:	add	r0, r3, r0
   3b194:	ldr	sl, [sp, #24]
   3b198:	str	r0, [r4, #20]
   3b19c:	ldrd	r4, [sp]
   3b1a0:	add	sp, sp, #28
   3b1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   3b1a8:	add	r1, r2, #1
   3b1ac:	mov	r3, #10
   3b1b0:	str	r1, [r4, #20]
   3b1b4:	strb	r3, [r2]
   3b1b8:	ldrb	r3, [r4, #25]
   3b1bc:	ldr	r1, [r4, #16]
   3b1c0:	ldr	r2, [r4, #32]
   3b1c4:	ldr	r0, [r4, #20]
   3b1c8:	mul	sl, r2, r3
   3b1cc:	add	r3, r0, sl
   3b1d0:	cmp	r1, r3
   3b1d4:	bcs	3b1ec <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1c4>
   3b1d8:	mov	r1, sl
   3b1dc:	mov	r0, r4
   3b1e0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3b1e4:	ldr	r2, [r4, #20]
   3b1e8:	b	3b098 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   3b1ec:	mov	r2, sl
   3b1f0:	mov	r1, #32
   3b1f4:	bl	1459c <memset@plt>
   3b1f8:	ldr	r2, [r4, #20]
   3b1fc:	add	r2, r2, sl
   3b200:	str	r2, [r4, #20]
   3b204:	b	3b098 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>

0003b208 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   3b208:	cmp	r1, #0
   3b20c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b210:	mov	r4, r0
   3b214:	strd	r6, [sp, #8]
   3b218:	strd	r8, [sp, #16]
   3b21c:	str	sl, [sp, #24]
   3b220:	str	lr, [sp, #28]
   3b224:	ldrsb	r5, [r2, r3]
   3b228:	ldr	r2, [r0, #20]
   3b22c:	ldr	r8, [sp, #32]
   3b230:	ldr	r7, [sp, #36]	; 0x24
   3b234:	ldr	r6, [sp, #40]	; 0x28
   3b238:	beq	3b250 <flatcc_json_printer_int8_enum_struct_field@@Base+0x48>
   3b23c:	add	r1, r2, #1
   3b240:	mov	r3, #44	; 0x2c
   3b244:	str	r1, [r0, #20]
   3b248:	strb	r3, [r2]
   3b24c:	ldr	r2, [r0, #20]
   3b250:	ldrb	r1, [r4, #25]
   3b254:	cmp	r1, #0
   3b258:	bne	3b3c8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1c0>
   3b25c:	ldr	r3, [r4, #16]
   3b260:	cmp	r3, r2
   3b264:	bhi	3b278 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   3b268:	mov	r0, r4
   3b26c:	ldr	r3, [r4, #44]	; 0x2c
   3b270:	blx	r3
   3b274:	ldr	r2, [r4, #20]
   3b278:	mov	r3, #34	; 0x22
   3b27c:	strb	r3, [r2]
   3b280:	ldrb	r3, [r4, #26]
   3b284:	ldr	r2, [r4, #16]
   3b288:	ldr	r0, [r4, #20]
   3b28c:	cmp	r3, #0
   3b290:	addeq	r0, r0, #1
   3b294:	add	r3, r0, r7
   3b298:	cmp	r2, r3
   3b29c:	str	r0, [r4, #20]
   3b2a0:	bhi	3b384 <flatcc_json_printer_int8_enum_struct_field@@Base+0x17c>
   3b2a4:	mov	r2, r7
   3b2a8:	mov	r1, r8
   3b2ac:	mov	r0, r4
   3b2b0:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3b2b4:	ldr	r2, [r4, #20]
   3b2b8:	mov	r3, #34	; 0x22
   3b2bc:	mov	ip, #58	; 0x3a
   3b2c0:	mov	r0, #32
   3b2c4:	strb	r3, [r2]
   3b2c8:	ldrb	r3, [r4, #26]
   3b2cc:	ldr	r1, [r4, #20]
   3b2d0:	clz	r3, r3
   3b2d4:	lsr	r3, r3, #5
   3b2d8:	add	r2, r1, r3
   3b2dc:	add	r2, r2, #1
   3b2e0:	str	r2, [r4, #20]
   3b2e4:	strb	ip, [r1, r3]
   3b2e8:	ldr	r3, [r4, #20]
   3b2ec:	strb	r0, [r3]
   3b2f0:	ldrb	r3, [r4, #25]
   3b2f4:	ldr	r1, [r4, #20]
   3b2f8:	ldrb	r0, [r4, #27]
   3b2fc:	adds	r3, r3, #0
   3b300:	movne	r3, #1
   3b304:	add	r2, r1, r3
   3b308:	cmp	r0, #0
   3b30c:	str	r2, [r4, #20]
   3b310:	beq	3b3a0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x198>
   3b314:	cmp	r5, #0
   3b318:	lsr	r0, r5, #31
   3b31c:	uxtb	r5, r5
   3b320:	bge	3b338 <flatcc_json_printer_int8_enum_struct_field@@Base+0x130>
   3b324:	rsb	r5, r5, #0
   3b328:	mov	ip, #45	; 0x2d
   3b32c:	add	r2, r2, #1
   3b330:	uxtb	r5, r5
   3b334:	strb	ip, [r1, r3]
   3b338:	cmp	r5, #99	; 0x63
   3b33c:	bhi	3b428 <flatcc_json_printer_int8_enum_struct_field@@Base+0x220>
   3b340:	cmp	r5, #9
   3b344:	bhi	3b478 <flatcc_json_printer_int8_enum_struct_field@@Base+0x270>
   3b348:	add	r5, r5, #48	; 0x30
   3b34c:	mov	r1, #0
   3b350:	mov	lr, #1
   3b354:	strb	r5, [r2]
   3b358:	strb	r1, [r2, #1]
   3b35c:	ldr	r3, [r4, #20]
   3b360:	add	r2, r0, lr
   3b364:	ldrd	r6, [sp, #8]
   3b368:	ldrd	r8, [sp, #16]
   3b36c:	add	r3, r3, r2
   3b370:	ldr	sl, [sp, #24]
   3b374:	str	r3, [r4, #20]
   3b378:	ldrd	r4, [sp]
   3b37c:	add	sp, sp, #28
   3b380:	pop	{pc}		; (ldr pc, [sp], #4)
   3b384:	mov	r2, r7
   3b388:	mov	r1, r8
   3b38c:	bl	14524 <memcpy@plt>
   3b390:	ldr	r2, [r4, #20]
   3b394:	add	r2, r2, r7
   3b398:	str	r2, [r4, #20]
   3b39c:	b	3b2b8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xb0>
   3b3a0:	mov	r1, r5
   3b3a4:	mov	r0, r4
   3b3a8:	ldrd	r4, [sp]
   3b3ac:	mov	r3, r6
   3b3b0:	ldrd	r6, [sp, #8]
   3b3b4:	ldrd	r8, [sp, #16]
   3b3b8:	ldr	sl, [sp, #24]
   3b3bc:	ldr	lr, [sp, #28]
   3b3c0:	add	sp, sp, #32
   3b3c4:	bx	r3
   3b3c8:	add	r1, r2, #1
   3b3cc:	mov	r3, #10
   3b3d0:	str	r1, [r4, #20]
   3b3d4:	strb	r3, [r2]
   3b3d8:	ldrb	r3, [r4, #25]
   3b3dc:	ldr	r1, [r4, #16]
   3b3e0:	ldr	r2, [r4, #32]
   3b3e4:	ldr	r0, [r4, #20]
   3b3e8:	mul	r9, r2, r3
   3b3ec:	add	r3, r0, r9
   3b3f0:	cmp	r1, r3
   3b3f4:	bcs	3b40c <flatcc_json_printer_int8_enum_struct_field@@Base+0x204>
   3b3f8:	mov	r1, r9
   3b3fc:	mov	r0, r4
   3b400:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3b404:	ldr	r2, [r4, #20]
   3b408:	b	3b278 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   3b40c:	mov	r2, r9
   3b410:	mov	r1, #32
   3b414:	bl	1459c <memset@plt>
   3b418:	ldr	r2, [r4, #20]
   3b41c:	add	r2, r2, r9
   3b420:	str	r2, [r4, #20]
   3b424:	b	3b278 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   3b428:	movw	r3, #34079	; 0x851f
   3b42c:	movt	r3, #20971	; 0x51eb
   3b430:	mov	r1, #0
   3b434:	mov	r7, #100	; 0x64
   3b438:	umull	ip, r3, r3, r5
   3b43c:	movw	ip, #32560	; 0x7f30
   3b440:	movt	ip, #4
   3b444:	strb	r1, [r2, #3]
   3b448:	mov	r6, #49	; 0x31
   3b44c:	mov	lr, #3
   3b450:	lsr	r1, r3, #5
   3b454:	mls	r5, r7, r1, r5
   3b458:	uxtb	r5, r5
   3b45c:	ldrb	r3, [ip, r5, lsl #1]
   3b460:	add	r5, ip, r5, lsl #1
   3b464:	strb	r3, [r2, #1]
   3b468:	ldrb	r3, [r5, #1]
   3b46c:	strb	r6, [r2]
   3b470:	strb	r3, [r2, #2]
   3b474:	b	3b35c <flatcc_json_printer_int8_enum_struct_field@@Base+0x154>
   3b478:	mov	r3, #0
   3b47c:	sxth	r5, r5
   3b480:	movw	r1, #32560	; 0x7f30
   3b484:	movt	r1, #4
   3b488:	strb	r3, [r2, #2]
   3b48c:	add	r3, r1, r5, lsl #1
   3b490:	mov	lr, #2
   3b494:	ldrb	r1, [r1, r5, lsl #1]
   3b498:	strb	r1, [r2]
   3b49c:	ldrb	r3, [r3, #1]
   3b4a0:	strb	r3, [r2, #1]
   3b4a4:	b	3b35c <flatcc_json_printer_int8_enum_struct_field@@Base+0x154>

0003b4a8 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   3b4a8:	cmp	r1, #0
   3b4ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b4b0:	mov	r4, r0
   3b4b4:	ldrsh	r5, [r2, r3]
   3b4b8:	ldr	r2, [r0, #20]
   3b4bc:	strd	r6, [sp, #8]
   3b4c0:	strd	r8, [sp, #16]
   3b4c4:	str	sl, [sp, #24]
   3b4c8:	str	lr, [sp, #28]
   3b4cc:	ldr	r8, [sp, #32]
   3b4d0:	ldr	r7, [sp, #36]	; 0x24
   3b4d4:	ldr	r6, [sp, #40]	; 0x28
   3b4d8:	beq	3b4f0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x48>
   3b4dc:	add	r1, r2, #1
   3b4e0:	mov	r3, #44	; 0x2c
   3b4e4:	str	r1, [r0, #20]
   3b4e8:	strb	r3, [r2]
   3b4ec:	ldr	r2, [r0, #20]
   3b4f0:	ldrb	r1, [r4, #25]
   3b4f4:	cmp	r1, #0
   3b4f8:	bne	3b648 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1a0>
   3b4fc:	ldr	r3, [r4, #16]
   3b500:	cmp	r3, r2
   3b504:	bhi	3b518 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   3b508:	mov	r0, r4
   3b50c:	ldr	r3, [r4, #44]	; 0x2c
   3b510:	blx	r3
   3b514:	ldr	r2, [r4, #20]
   3b518:	mov	r3, #34	; 0x22
   3b51c:	strb	r3, [r2]
   3b520:	ldrb	r3, [r4, #26]
   3b524:	ldr	r2, [r4, #16]
   3b528:	ldr	r0, [r4, #20]
   3b52c:	cmp	r3, #0
   3b530:	addeq	r0, r0, #1
   3b534:	add	r3, r0, r7
   3b538:	cmp	r2, r3
   3b53c:	str	r0, [r4, #20]
   3b540:	bhi	3b604 <flatcc_json_printer_int16_enum_struct_field@@Base+0x15c>
   3b544:	mov	r2, r7
   3b548:	mov	r1, r8
   3b54c:	mov	r0, r4
   3b550:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3b554:	ldr	r2, [r4, #20]
   3b558:	mov	r3, #34	; 0x22
   3b55c:	mov	ip, #58	; 0x3a
   3b560:	mov	r0, #32
   3b564:	strb	r3, [r2]
   3b568:	ldrb	r3, [r4, #26]
   3b56c:	ldr	r1, [r4, #20]
   3b570:	clz	r3, r3
   3b574:	lsr	r3, r3, #5
   3b578:	add	r2, r1, r3
   3b57c:	add	r2, r2, #1
   3b580:	str	r2, [r4, #20]
   3b584:	strb	ip, [r1, r3]
   3b588:	ldr	r3, [r4, #20]
   3b58c:	strb	r0, [r3]
   3b590:	ldrb	r3, [r4, #25]
   3b594:	ldr	r2, [r4, #20]
   3b598:	ldrb	r0, [r4, #27]
   3b59c:	adds	r3, r3, #0
   3b5a0:	movne	r3, #1
   3b5a4:	add	r1, r2, r3
   3b5a8:	cmp	r0, #0
   3b5ac:	str	r1, [r4, #20]
   3b5b0:	beq	3b620 <flatcc_json_printer_int16_enum_struct_field@@Base+0x178>
   3b5b4:	cmp	r5, #0
   3b5b8:	lsr	r6, r5, #31
   3b5bc:	uxth	r0, r5
   3b5c0:	bge	3b5d8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x130>
   3b5c4:	rsb	r0, r0, #0
   3b5c8:	mov	ip, #45	; 0x2d
   3b5cc:	add	r1, r1, #1
   3b5d0:	uxth	r0, r0
   3b5d4:	strb	ip, [r2, r3]
   3b5d8:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3b5dc:	ldr	r3, [r4, #20]
   3b5e0:	add	r0, r6, r0
   3b5e4:	ldrd	r6, [sp, #8]
   3b5e8:	ldrd	r8, [sp, #16]
   3b5ec:	add	r3, r3, r0
   3b5f0:	ldr	sl, [sp, #24]
   3b5f4:	str	r3, [r4, #20]
   3b5f8:	ldrd	r4, [sp]
   3b5fc:	add	sp, sp, #28
   3b600:	pop	{pc}		; (ldr pc, [sp], #4)
   3b604:	mov	r2, r7
   3b608:	mov	r1, r8
   3b60c:	bl	14524 <memcpy@plt>
   3b610:	ldr	r2, [r4, #20]
   3b614:	add	r2, r2, r7
   3b618:	str	r2, [r4, #20]
   3b61c:	b	3b558 <flatcc_json_printer_int16_enum_struct_field@@Base+0xb0>
   3b620:	mov	r1, r5
   3b624:	mov	r0, r4
   3b628:	ldrd	r4, [sp]
   3b62c:	mov	r3, r6
   3b630:	ldrd	r6, [sp, #8]
   3b634:	ldrd	r8, [sp, #16]
   3b638:	ldr	sl, [sp, #24]
   3b63c:	ldr	lr, [sp, #28]
   3b640:	add	sp, sp, #32
   3b644:	bx	r3
   3b648:	add	r1, r2, #1
   3b64c:	mov	r3, #10
   3b650:	str	r1, [r4, #20]
   3b654:	strb	r3, [r2]
   3b658:	ldrb	r3, [r4, #25]
   3b65c:	ldr	r1, [r4, #16]
   3b660:	ldr	r2, [r4, #32]
   3b664:	ldr	r0, [r4, #20]
   3b668:	mul	r9, r2, r3
   3b66c:	add	r3, r0, r9
   3b670:	cmp	r1, r3
   3b674:	bcs	3b68c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1e4>
   3b678:	mov	r1, r9
   3b67c:	mov	r0, r4
   3b680:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3b684:	ldr	r2, [r4, #20]
   3b688:	b	3b518 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   3b68c:	mov	r2, r9
   3b690:	mov	r1, #32
   3b694:	bl	1459c <memset@plt>
   3b698:	ldr	r2, [r4, #20]
   3b69c:	add	r2, r2, r9
   3b6a0:	str	r2, [r4, #20]
   3b6a4:	b	3b518 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>

0003b6a8 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   3b6a8:	cmp	r1, #0
   3b6ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b6b0:	mov	r4, r0
   3b6b4:	strd	r6, [sp, #8]
   3b6b8:	strd	r8, [sp, #16]
   3b6bc:	str	sl, [sp, #24]
   3b6c0:	str	lr, [sp, #28]
   3b6c4:	ldr	r6, [r2, r3]
   3b6c8:	ldr	r2, [r0, #20]
   3b6cc:	ldr	r8, [sp, #32]
   3b6d0:	ldr	r7, [sp, #36]	; 0x24
   3b6d4:	ldr	r5, [sp, #40]	; 0x28
   3b6d8:	beq	3b6f0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x48>
   3b6dc:	add	r1, r2, #1
   3b6e0:	mov	r3, #44	; 0x2c
   3b6e4:	str	r1, [r0, #20]
   3b6e8:	strb	r3, [r2]
   3b6ec:	ldr	r2, [r0, #20]
   3b6f0:	ldrb	r1, [r4, #25]
   3b6f4:	cmp	r1, #0
   3b6f8:	bne	3b844 <flatcc_json_printer_int32_enum_struct_field@@Base+0x19c>
   3b6fc:	ldr	r3, [r4, #16]
   3b700:	cmp	r3, r2
   3b704:	bhi	3b718 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   3b708:	mov	r0, r4
   3b70c:	ldr	r3, [r4, #44]	; 0x2c
   3b710:	blx	r3
   3b714:	ldr	r2, [r4, #20]
   3b718:	mov	r3, #34	; 0x22
   3b71c:	strb	r3, [r2]
   3b720:	ldrb	r3, [r4, #26]
   3b724:	ldr	r2, [r4, #16]
   3b728:	ldr	r0, [r4, #20]
   3b72c:	cmp	r3, #0
   3b730:	addeq	r0, r0, #1
   3b734:	add	r3, r0, r7
   3b738:	cmp	r2, r3
   3b73c:	str	r0, [r4, #20]
   3b740:	bhi	3b800 <flatcc_json_printer_int32_enum_struct_field@@Base+0x158>
   3b744:	mov	r2, r7
   3b748:	mov	r1, r8
   3b74c:	mov	r0, r4
   3b750:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3b754:	ldr	r2, [r4, #20]
   3b758:	mov	r3, #34	; 0x22
   3b75c:	mov	ip, #58	; 0x3a
   3b760:	mov	r0, #32
   3b764:	strb	r3, [r2]
   3b768:	ldrb	r3, [r4, #26]
   3b76c:	ldr	r1, [r4, #20]
   3b770:	clz	r3, r3
   3b774:	lsr	r3, r3, #5
   3b778:	add	r2, r1, r3
   3b77c:	add	r2, r2, #1
   3b780:	str	r2, [r4, #20]
   3b784:	strb	ip, [r1, r3]
   3b788:	ldr	r3, [r4, #20]
   3b78c:	strb	r0, [r3]
   3b790:	ldrb	r3, [r4, #25]
   3b794:	ldr	r2, [r4, #20]
   3b798:	ldrb	r0, [r4, #27]
   3b79c:	adds	r3, r3, #0
   3b7a0:	movne	r3, #1
   3b7a4:	add	r1, r2, r3
   3b7a8:	cmp	r0, #0
   3b7ac:	str	r1, [r4, #20]
   3b7b0:	beq	3b81c <flatcc_json_printer_int32_enum_struct_field@@Base+0x174>
   3b7b4:	cmp	r6, #0
   3b7b8:	lsr	r5, r6, #31
   3b7bc:	bge	3b7d0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x128>
   3b7c0:	mov	r0, #45	; 0x2d
   3b7c4:	rsb	r6, r6, #0
   3b7c8:	add	r1, r1, #1
   3b7cc:	strb	r0, [r2, r3]
   3b7d0:	mov	r0, r6
   3b7d4:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3b7d8:	ldr	r3, [r4, #20]
   3b7dc:	add	r0, r5, r0
   3b7e0:	ldrd	r6, [sp, #8]
   3b7e4:	ldrd	r8, [sp, #16]
   3b7e8:	add	r3, r3, r0
   3b7ec:	ldr	sl, [sp, #24]
   3b7f0:	str	r3, [r4, #20]
   3b7f4:	ldrd	r4, [sp]
   3b7f8:	add	sp, sp, #28
   3b7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   3b800:	mov	r2, r7
   3b804:	mov	r1, r8
   3b808:	bl	14524 <memcpy@plt>
   3b80c:	ldr	r2, [r4, #20]
   3b810:	add	r2, r2, r7
   3b814:	str	r2, [r4, #20]
   3b818:	b	3b758 <flatcc_json_printer_int32_enum_struct_field@@Base+0xb0>
   3b81c:	mov	r1, r6
   3b820:	mov	r0, r4
   3b824:	ldrd	r6, [sp, #8]
   3b828:	mov	r3, r5
   3b82c:	ldrd	r4, [sp]
   3b830:	ldrd	r8, [sp, #16]
   3b834:	ldr	sl, [sp, #24]
   3b838:	ldr	lr, [sp, #28]
   3b83c:	add	sp, sp, #32
   3b840:	bx	r3
   3b844:	add	r1, r2, #1
   3b848:	mov	r3, #10
   3b84c:	str	r1, [r4, #20]
   3b850:	strb	r3, [r2]
   3b854:	ldrb	r3, [r4, #25]
   3b858:	ldr	r1, [r4, #16]
   3b85c:	ldr	r2, [r4, #32]
   3b860:	ldr	r0, [r4, #20]
   3b864:	mul	r9, r2, r3
   3b868:	add	r3, r0, r9
   3b86c:	cmp	r1, r3
   3b870:	bcs	3b888 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1e0>
   3b874:	mov	r1, r9
   3b878:	mov	r0, r4
   3b87c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3b880:	ldr	r2, [r4, #20]
   3b884:	b	3b718 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   3b888:	mov	r2, r9
   3b88c:	mov	r1, #32
   3b890:	bl	1459c <memset@plt>
   3b894:	ldr	r2, [r4, #20]
   3b898:	add	r2, r2, r9
   3b89c:	str	r2, [r4, #20]
   3b8a0:	b	3b718 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>

0003b8a4 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   3b8a4:	cmp	r1, #0
   3b8a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b8ac:	mov	r4, r0
   3b8b0:	strd	r6, [sp, #8]
   3b8b4:	strd	r8, [sp, #16]
   3b8b8:	str	sl, [sp, #24]
   3b8bc:	str	lr, [sp, #28]
   3b8c0:	ldrd	r6, [r2, r3]
   3b8c4:	ldr	r2, [r0, #20]
   3b8c8:	ldr	r9, [sp, #32]
   3b8cc:	ldr	r8, [sp, #36]	; 0x24
   3b8d0:	ldr	r5, [sp, #40]	; 0x28
   3b8d4:	beq	3b8ec <flatcc_json_printer_int64_enum_struct_field@@Base+0x48>
   3b8d8:	add	r1, r2, #1
   3b8dc:	mov	r3, #44	; 0x2c
   3b8e0:	str	r1, [r0, #20]
   3b8e4:	strb	r3, [r2]
   3b8e8:	ldr	r2, [r0, #20]
   3b8ec:	ldrb	r1, [r4, #25]
   3b8f0:	cmp	r1, #0
   3b8f4:	bne	3ba50 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1ac>
   3b8f8:	ldr	r3, [r4, #16]
   3b8fc:	cmp	r3, r2
   3b900:	bhi	3b914 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   3b904:	mov	r0, r4
   3b908:	ldr	r3, [r4, #44]	; 0x2c
   3b90c:	blx	r3
   3b910:	ldr	r2, [r4, #20]
   3b914:	mov	r3, #34	; 0x22
   3b918:	strb	r3, [r2]
   3b91c:	ldrb	r3, [r4, #26]
   3b920:	ldr	r2, [r4, #16]
   3b924:	ldr	r0, [r4, #20]
   3b928:	cmp	r3, #0
   3b92c:	addeq	r0, r0, #1
   3b930:	add	r3, r0, r8
   3b934:	cmp	r2, r3
   3b938:	str	r0, [r4, #20]
   3b93c:	bhi	3ba08 <flatcc_json_printer_int64_enum_struct_field@@Base+0x164>
   3b940:	mov	r2, r8
   3b944:	mov	r1, r9
   3b948:	mov	r0, r4
   3b94c:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3b950:	ldr	r8, [r4, #20]
   3b954:	mov	r3, #34	; 0x22
   3b958:	mov	ip, #58	; 0x3a
   3b95c:	mov	r0, #32
   3b960:	strb	r3, [r8]
   3b964:	ldrb	r3, [r4, #26]
   3b968:	ldr	r1, [r4, #20]
   3b96c:	clz	r3, r3
   3b970:	lsr	r3, r3, #5
   3b974:	add	r2, r1, r3
   3b978:	add	r2, r2, #1
   3b97c:	str	r2, [r4, #20]
   3b980:	strb	ip, [r1, r3]
   3b984:	ldr	r3, [r4, #20]
   3b988:	strb	r0, [r3]
   3b98c:	ldrb	r3, [r4, #25]
   3b990:	ldr	r1, [r4, #20]
   3b994:	ldrb	r0, [r4, #27]
   3b998:	adds	r3, r3, #0
   3b99c:	movne	r3, #1
   3b9a0:	add	r2, r1, r3
   3b9a4:	cmp	r0, #0
   3b9a8:	str	r2, [r4, #20]
   3b9ac:	beq	3ba24 <flatcc_json_printer_int64_enum_struct_field@@Base+0x180>
   3b9b0:	cmp	r6, #0
   3b9b4:	lsr	r5, r7, #31
   3b9b8:	sbcs	r0, r7, #0
   3b9bc:	bge	3b9d4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x130>
   3b9c0:	rsbs	r6, r6, #0
   3b9c4:	mov	r0, #45	; 0x2d
   3b9c8:	rsc	r7, r7, #0
   3b9cc:	add	r2, r2, #1
   3b9d0:	strb	r0, [r1, r3]
   3b9d4:	mov	r0, r6
   3b9d8:	mov	r1, r7
   3b9dc:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3b9e0:	ldr	r3, [r4, #20]
   3b9e4:	add	r0, r5, r0
   3b9e8:	ldrd	r6, [sp, #8]
   3b9ec:	ldrd	r8, [sp, #16]
   3b9f0:	add	r3, r3, r0
   3b9f4:	ldr	sl, [sp, #24]
   3b9f8:	str	r3, [r4, #20]
   3b9fc:	ldrd	r4, [sp]
   3ba00:	add	sp, sp, #28
   3ba04:	pop	{pc}		; (ldr pc, [sp], #4)
   3ba08:	mov	r2, r8
   3ba0c:	mov	r1, r9
   3ba10:	bl	14524 <memcpy@plt>
   3ba14:	ldr	r3, [r4, #20]
   3ba18:	add	r8, r3, r8
   3ba1c:	str	r8, [r4, #20]
   3ba20:	b	3b954 <flatcc_json_printer_int64_enum_struct_field@@Base+0xb0>
   3ba24:	mov	r2, r6
   3ba28:	mov	r3, r7
   3ba2c:	ldrd	r6, [sp, #8]
   3ba30:	mov	r0, r4
   3ba34:	mov	r1, r5
   3ba38:	ldrd	r4, [sp]
   3ba3c:	ldrd	r8, [sp, #16]
   3ba40:	ldr	sl, [sp, #24]
   3ba44:	ldr	lr, [sp, #28]
   3ba48:	add	sp, sp, #32
   3ba4c:	bx	r1
   3ba50:	add	r1, r2, #1
   3ba54:	mov	r3, #10
   3ba58:	str	r1, [r4, #20]
   3ba5c:	strb	r3, [r2]
   3ba60:	ldrb	r3, [r4, #25]
   3ba64:	ldr	r1, [r4, #16]
   3ba68:	ldr	r2, [r4, #32]
   3ba6c:	ldr	r0, [r4, #20]
   3ba70:	mul	sl, r2, r3
   3ba74:	add	r3, r0, sl
   3ba78:	cmp	r1, r3
   3ba7c:	bcs	3ba94 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1f0>
   3ba80:	mov	r1, sl
   3ba84:	mov	r0, r4
   3ba88:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3ba8c:	ldr	r2, [r4, #20]
   3ba90:	b	3b914 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   3ba94:	mov	r2, sl
   3ba98:	mov	r1, #32
   3ba9c:	bl	1459c <memset@plt>
   3baa0:	ldr	r2, [r4, #20]
   3baa4:	add	r2, r2, sl
   3baa8:	str	r2, [r4, #20]
   3baac:	b	3b914 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>

0003bab0 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   3bab0:	cmp	r1, #0
   3bab4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3bab8:	mov	r4, r0
   3babc:	strd	r6, [sp, #8]
   3bac0:	strd	r8, [sp, #16]
   3bac4:	str	sl, [sp, #24]
   3bac8:	str	lr, [sp, #28]
   3bacc:	ldrb	r5, [r2, r3]
   3bad0:	ldr	r2, [r0, #20]
   3bad4:	ldr	r8, [sp, #32]
   3bad8:	ldr	r7, [sp, #36]	; 0x24
   3badc:	ldr	r6, [sp, #40]	; 0x28
   3bae0:	beq	3baf8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x48>
   3bae4:	add	r1, r2, #1
   3bae8:	mov	r3, #44	; 0x2c
   3baec:	str	r1, [r0, #20]
   3baf0:	strb	r3, [r2]
   3baf4:	ldr	r2, [r0, #20]
   3baf8:	ldrb	r1, [r4, #25]
   3bafc:	cmp	r1, #0
   3bb00:	bne	3bc4c <flatcc_json_printer_bool_enum_struct_field@@Base+0x19c>
   3bb04:	ldr	r3, [r4, #16]
   3bb08:	cmp	r3, r2
   3bb0c:	bhi	3bb20 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3bb10:	mov	r0, r4
   3bb14:	ldr	r3, [r4, #44]	; 0x2c
   3bb18:	blx	r3
   3bb1c:	ldr	r2, [r4, #20]
   3bb20:	mov	r3, #34	; 0x22
   3bb24:	strb	r3, [r2]
   3bb28:	ldrb	r3, [r4, #26]
   3bb2c:	ldr	r2, [r4, #16]
   3bb30:	ldr	r0, [r4, #20]
   3bb34:	cmp	r3, #0
   3bb38:	addeq	r0, r0, #1
   3bb3c:	add	r3, r0, r7
   3bb40:	cmp	r2, r3
   3bb44:	str	r0, [r4, #20]
   3bb48:	bhi	3bbe4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x134>
   3bb4c:	mov	r2, r7
   3bb50:	mov	r1, r8
   3bb54:	mov	r0, r4
   3bb58:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3bb5c:	ldr	r2, [r4, #20]
   3bb60:	mov	r3, #34	; 0x22
   3bb64:	mov	ip, #58	; 0x3a
   3bb68:	mov	r0, #32
   3bb6c:	strb	r3, [r2]
   3bb70:	ldrb	r3, [r4, #26]
   3bb74:	ldr	r1, [r4, #20]
   3bb78:	clz	r3, r3
   3bb7c:	lsr	r3, r3, #5
   3bb80:	add	r2, r1, r3
   3bb84:	add	r2, r2, #1
   3bb88:	str	r2, [r4, #20]
   3bb8c:	strb	ip, [r1, r3]
   3bb90:	ldr	r3, [r4, #20]
   3bb94:	strb	r0, [r3]
   3bb98:	ldrb	r3, [r4, #25]
   3bb9c:	ldr	r0, [r4, #20]
   3bba0:	ldrb	r1, [r4, #27]
   3bba4:	adds	r3, r3, #0
   3bba8:	movne	r3, #1
   3bbac:	add	r2, r0, r3
   3bbb0:	cmp	r1, #0
   3bbb4:	str	r2, [r4, #20]
   3bbb8:	bne	3bc00 <flatcc_json_printer_bool_enum_struct_field@@Base+0x150>
   3bbbc:	mov	r1, r5
   3bbc0:	mov	r0, r4
   3bbc4:	ldrd	r4, [sp]
   3bbc8:	mov	r3, r6
   3bbcc:	ldrd	r6, [sp, #8]
   3bbd0:	ldrd	r8, [sp, #16]
   3bbd4:	ldr	sl, [sp, #24]
   3bbd8:	ldr	lr, [sp, #28]
   3bbdc:	add	sp, sp, #32
   3bbe0:	bx	r3
   3bbe4:	mov	r2, r7
   3bbe8:	mov	r1, r8
   3bbec:	bl	14524 <memcpy@plt>
   3bbf0:	ldr	r2, [r4, #20]
   3bbf4:	add	r2, r2, r7
   3bbf8:	str	r2, [r4, #20]
   3bbfc:	b	3bb60 <flatcc_json_printer_bool_enum_struct_field@@Base+0xb0>
   3bc00:	cmp	r5, #0
   3bc04:	bne	3bcac <flatcc_json_printer_bool_enum_struct_field@@Base+0x1fc>
   3bc08:	movw	r1, #32560	; 0x7f30
   3bc0c:	movt	r1, #4
   3bc10:	add	ip, r1, #1776	; 0x6f0
   3bc14:	ldr	lr, [r1, #1776]	; 0x6f0
   3bc18:	mov	r1, #5
   3bc1c:	ldrh	ip, [ip, #4]
   3bc20:	str	lr, [r0, r3]
   3bc24:	strh	ip, [r2, #4]
   3bc28:	ldr	r3, [r4, #20]
   3bc2c:	ldrd	r6, [sp, #8]
   3bc30:	ldrd	r8, [sp, #16]
   3bc34:	add	r3, r3, r1
   3bc38:	ldr	sl, [sp, #24]
   3bc3c:	str	r3, [r4, #20]
   3bc40:	ldrd	r4, [sp]
   3bc44:	add	sp, sp, #28
   3bc48:	pop	{pc}		; (ldr pc, [sp], #4)
   3bc4c:	add	r1, r2, #1
   3bc50:	mov	r3, #10
   3bc54:	str	r1, [r4, #20]
   3bc58:	strb	r3, [r2]
   3bc5c:	ldrb	r3, [r4, #25]
   3bc60:	ldr	r1, [r4, #16]
   3bc64:	ldr	r2, [r4, #32]
   3bc68:	ldr	r0, [r4, #20]
   3bc6c:	mul	r9, r2, r3
   3bc70:	add	r3, r0, r9
   3bc74:	cmp	r1, r3
   3bc78:	bcs	3bc90 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1e0>
   3bc7c:	mov	r1, r9
   3bc80:	mov	r0, r4
   3bc84:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3bc88:	ldr	r2, [r4, #20]
   3bc8c:	b	3bb20 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3bc90:	mov	r2, r9
   3bc94:	mov	r1, #32
   3bc98:	bl	1459c <memset@plt>
   3bc9c:	ldr	r2, [r4, #20]
   3bca0:	add	r2, r2, r9
   3bca4:	str	r2, [r4, #20]
   3bca8:	b	3bb20 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3bcac:	ldr	ip, [pc, #28]	; 3bcd0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x220>
   3bcb0:	movw	r1, #32560	; 0x7f30
   3bcb4:	movt	r1, #4
   3bcb8:	ldr	lr, [r1, #1768]	; 0x6e8
   3bcbc:	mov	r1, #4
   3bcc0:	ldrb	ip, [ip, #4]
   3bcc4:	str	lr, [r0, r3]
   3bcc8:	strb	ip, [r2, #4]
   3bccc:	b	3bc28 <flatcc_json_printer_bool_enum_struct_field@@Base+0x178>
   3bcd0:	andeq	r8, r4, r8, lsl r6

0003bcd4 <flatcc_json_printer_uint8_vector_field@@Base>:
   3bcd4:	ldr	ip, [r1, #8]
   3bcd8:	add	r2, r2, #2
   3bcdc:	lsl	r2, r2, #1
   3bce0:	cmp	ip, r2
   3bce4:	bxle	lr
   3bce8:	ldr	ip, [r1, #4]
   3bcec:	ldrh	r2, [ip, r2]
   3bcf0:	cmp	r2, #0
   3bcf4:	bxeq	lr
   3bcf8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3bcfc:	ldr	ip, [r1]
   3bd00:	strd	r6, [sp, #8]
   3bd04:	strd	r8, [sp, #16]
   3bd08:	str	sl, [sp, #24]
   3bd0c:	str	lr, [sp, #28]
   3bd10:	adds	r6, ip, r2
   3bd14:	beq	3bf1c <flatcc_json_printer_uint8_vector_field@@Base+0x248>
   3bd18:	ldr	lr, [r1, #16]
   3bd1c:	add	r5, lr, #1
   3bd20:	cmp	lr, #0
   3bd24:	str	r5, [r1, #16]
   3bd28:	beq	3bd40 <flatcc_json_printer_uint8_vector_field@@Base+0x6c>
   3bd2c:	ldr	r1, [r0, #20]
   3bd30:	mov	lr, #44	; 0x2c
   3bd34:	add	r4, r1, #1
   3bd38:	str	r4, [r0, #20]
   3bd3c:	strb	lr, [r1]
   3bd40:	mov	r1, r3
   3bd44:	ldr	r3, [ip, r2]
   3bd48:	mov	r4, r0
   3bd4c:	ldr	r2, [sp, #32]
   3bd50:	add	r5, r6, r3
   3bd54:	ldr	r6, [r6, r3]
   3bd58:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3bd5c:	ldr	r2, [r4, #20]
   3bd60:	mov	r1, #91	; 0x5b
   3bd64:	ldr	r3, [r4, #32]
   3bd68:	cmp	r6, #0
   3bd6c:	add	r0, r2, #1
   3bd70:	add	r3, r3, #1
   3bd74:	str	r0, [r4, #20]
   3bd78:	str	r3, [r4, #32]
   3bd7c:	strb	r1, [r2]
   3bd80:	beq	3befc <flatcc_json_printer_uint8_vector_field@@Base+0x228>
   3bd84:	ldrb	r3, [r4, #25]
   3bd88:	ldr	r1, [r4, #20]
   3bd8c:	cmp	r3, #0
   3bd90:	bne	3bf34 <flatcc_json_printer_uint8_vector_field@@Base+0x260>
   3bd94:	ldr	r2, [r4, #16]
   3bd98:	cmp	r2, r1
   3bd9c:	bhi	3bdb4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   3bda0:	mov	r1, r3
   3bda4:	mov	r0, r4
   3bda8:	ldr	r3, [r4, #44]	; 0x2c
   3bdac:	blx	r3
   3bdb0:	ldr	r1, [r4, #20]
   3bdb4:	add	r9, r5, #5
   3bdb8:	ldrb	r0, [r5, #4]
   3bdbc:	bl	3447c <flatcc_json_parser_struct_as_root@@Base+0xf5c>
   3bdc0:	ldr	r3, [r4, #20]
   3bdc4:	cmp	r6, #1
   3bdc8:	add	r0, r3, r0
   3bdcc:	str	r0, [r4, #20]
   3bdd0:	beq	3bf00 <flatcc_json_printer_uint8_vector_field@@Base+0x22c>
   3bdd4:	add	r6, r6, #4
   3bdd8:	movw	r7, #32560	; 0x7f30
   3bddc:	movt	r7, #4
   3bde0:	add	r5, r5, r6
   3bde4:	movw	r8, #34079	; 0x851f
   3bde8:	movt	r8, #20971	; 0x51eb
   3bdec:	mov	r6, #44	; 0x2c
   3bdf0:	b	3be54 <flatcc_json_printer_uint8_vector_field@@Base+0x180>
   3bdf4:	ldr	r3, [r4, #16]
   3bdf8:	ldr	r2, [r4, #20]
   3bdfc:	cmp	r2, r3
   3be00:	bcc	3be14 <flatcc_json_printer_uint8_vector_field@@Base+0x140>
   3be04:	mov	r0, r4
   3be08:	ldr	r3, [r4, #44]	; 0x2c
   3be0c:	blx	r3
   3be10:	ldr	r2, [r4, #20]
   3be14:	ldrb	r3, [r9]
   3be18:	cmp	r3, #99	; 0x63
   3be1c:	bhi	3bebc <flatcc_json_printer_uint8_vector_field@@Base+0x1e8>
   3be20:	cmp	r3, #9
   3be24:	bhi	3bf54 <flatcc_json_printer_uint8_vector_field@@Base+0x280>
   3be28:	add	r3, r3, #48	; 0x30
   3be2c:	mov	r0, #0
   3be30:	mov	r1, #1
   3be34:	strb	r3, [r2]
   3be38:	strb	r0, [r2, #1]
   3be3c:	ldr	r0, [r4, #20]
   3be40:	add	r9, r9, #1
   3be44:	cmp	r5, r9
   3be48:	add	r0, r0, r1
   3be4c:	str	r0, [r4, #20]
   3be50:	beq	3bf00 <flatcc_json_printer_uint8_vector_field@@Base+0x22c>
   3be54:	add	r3, r0, #1
   3be58:	str	r3, [r4, #20]
   3be5c:	strb	r6, [r0]
   3be60:	ldrb	r1, [r4, #25]
   3be64:	cmp	r1, #0
   3be68:	beq	3bdf4 <flatcc_json_printer_uint8_vector_field@@Base+0x120>
   3be6c:	ldr	r3, [r4, #20]
   3be70:	mov	r2, #10
   3be74:	add	r1, r3, #1
   3be78:	str	r1, [r4, #20]
   3be7c:	strb	r2, [r3]
   3be80:	ldrb	r3, [r4, #25]
   3be84:	ldr	r1, [r4, #16]
   3be88:	ldr	r2, [r4, #32]
   3be8c:	ldr	r0, [r4, #20]
   3be90:	mul	sl, r2, r3
   3be94:	add	r3, r0, sl
   3be98:	cmp	r1, r3
   3be9c:	bcs	3bf7c <flatcc_json_printer_uint8_vector_field@@Base+0x2a8>
   3bea0:	mov	r1, sl
   3bea4:	mov	r0, r4
   3bea8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3beac:	ldrb	r3, [r9]
   3beb0:	ldr	r2, [r4, #20]
   3beb4:	cmp	r3, #99	; 0x63
   3beb8:	bls	3be20 <flatcc_json_printer_uint8_vector_field@@Base+0x14c>
   3bebc:	umull	r1, ip, r8, r3
   3bec0:	mov	r0, #100	; 0x64
   3bec4:	mov	r1, #0
   3bec8:	strb	r1, [r2, #3]
   3becc:	mov	r1, #3
   3bed0:	lsr	ip, ip, #5
   3bed4:	mls	r3, r0, ip, r3
   3bed8:	add	ip, ip, #48	; 0x30
   3bedc:	uxtb	r3, r3
   3bee0:	ldrb	r0, [r7, r3, lsl #1]
   3bee4:	add	r3, r7, r3, lsl #1
   3bee8:	strb	r0, [r2, #1]
   3beec:	ldrb	r3, [r3, #1]
   3bef0:	strb	ip, [r2]
   3bef4:	strb	r3, [r2, #2]
   3bef8:	b	3be3c <flatcc_json_printer_uint8_vector_field@@Base+0x168>
   3befc:	ldr	r0, [r4, #20]
   3bf00:	add	r3, r0, #1
   3bf04:	ldrb	r2, [r4, #25]
   3bf08:	cmp	r2, #0
   3bf0c:	bne	3bf98 <flatcc_json_printer_uint8_vector_field@@Base+0x2c4>
   3bf10:	mov	r2, #93	; 0x5d
   3bf14:	str	r3, [r4, #20]
   3bf18:	strb	r2, [r0]
   3bf1c:	ldrd	r4, [sp]
   3bf20:	ldrd	r6, [sp, #8]
   3bf24:	ldrd	r8, [sp, #16]
   3bf28:	ldr	sl, [sp, #24]
   3bf2c:	add	sp, sp, #28
   3bf30:	pop	{pc}		; (ldr pc, [sp], #4)
   3bf34:	add	r2, r1, #1
   3bf38:	mov	r3, #10
   3bf3c:	mov	r0, r4
   3bf40:	str	r2, [r4, #20]
   3bf44:	strb	r3, [r1]
   3bf48:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3bf4c:	ldr	r1, [r4, #20]
   3bf50:	b	3bdb4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   3bf54:	mov	r1, #0
   3bf58:	sxth	r3, r3
   3bf5c:	add	r0, r7, r3, lsl #1
   3bf60:	strb	r1, [r2, #2]
   3bf64:	mov	r1, #2
   3bf68:	ldrb	r3, [r7, r3, lsl #1]
   3bf6c:	strb	r3, [r2]
   3bf70:	ldrb	r3, [r0, #1]
   3bf74:	strb	r3, [r2, #1]
   3bf78:	b	3be3c <flatcc_json_printer_uint8_vector_field@@Base+0x168>
   3bf7c:	mov	r2, sl
   3bf80:	mov	r1, #32
   3bf84:	bl	1459c <memset@plt>
   3bf88:	ldr	r2, [r4, #20]
   3bf8c:	add	r2, r2, sl
   3bf90:	str	r2, [r4, #20]
   3bf94:	b	3be14 <flatcc_json_printer_uint8_vector_field@@Base+0x140>
   3bf98:	mov	r2, #10
   3bf9c:	str	r3, [r4, #20]
   3bfa0:	strb	r2, [r0]
   3bfa4:	ldrb	r5, [r4, #25]
   3bfa8:	ldr	r3, [r4, #32]
   3bfac:	ldr	r2, [r4, #16]
   3bfb0:	ldr	r0, [r4, #20]
   3bfb4:	sub	r3, r3, #1
   3bfb8:	mul	r5, r3, r5
   3bfbc:	str	r3, [r4, #32]
   3bfc0:	add	r3, r0, r5
   3bfc4:	cmp	r2, r3
   3bfc8:	bcs	3bfe4 <flatcc_json_printer_uint8_vector_field@@Base+0x310>
   3bfcc:	mov	r0, r4
   3bfd0:	mov	r1, r5
   3bfd4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3bfd8:	ldr	r0, [r4, #20]
   3bfdc:	add	r3, r0, #1
   3bfe0:	b	3bf10 <flatcc_json_printer_uint8_vector_field@@Base+0x23c>
   3bfe4:	mov	r2, r5
   3bfe8:	mov	r1, #32
   3bfec:	bl	1459c <memset@plt>
   3bff0:	ldr	r0, [r4, #20]
   3bff4:	add	r0, r0, r5
   3bff8:	add	r3, r0, #1
   3bffc:	b	3bf10 <flatcc_json_printer_uint8_vector_field@@Base+0x23c>

0003c000 <flatcc_json_printer_utype_vector_field@@Base>:
   3c000:	b	3bcd4 <flatcc_json_printer_uint8_vector_field@@Base>

0003c004 <flatcc_json_printer_uint16_vector_field@@Base>:
   3c004:	ldr	ip, [r1, #8]
   3c008:	add	r2, r2, #2
   3c00c:	lsl	r2, r2, #1
   3c010:	cmp	ip, r2
   3c014:	bxle	lr
   3c018:	ldr	ip, [r1, #4]
   3c01c:	ldrh	r2, [ip, r2]
   3c020:	cmp	r2, #0
   3c024:	bxeq	lr
   3c028:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c02c:	ldr	ip, [r1]
   3c030:	strd	r6, [sp, #8]
   3c034:	str	lr, [sp, #28]
   3c038:	strd	r8, [sp, #16]
   3c03c:	str	sl, [sp, #24]
   3c040:	adds	lr, ip, r2
   3c044:	beq	3c244 <flatcc_json_printer_uint16_vector_field@@Base+0x240>
   3c048:	ldr	r4, [r1, #16]
   3c04c:	add	r5, r4, #1
   3c050:	cmp	r4, #0
   3c054:	str	r5, [r1, #16]
   3c058:	beq	3c070 <flatcc_json_printer_uint16_vector_field@@Base+0x6c>
   3c05c:	ldr	r1, [r0, #20]
   3c060:	mov	r4, #44	; 0x2c
   3c064:	add	r5, r1, #1
   3c068:	str	r5, [r0, #20]
   3c06c:	strb	r4, [r1]
   3c070:	mov	r1, r3
   3c074:	ldr	r3, [ip, r2]
   3c078:	mov	r4, r0
   3c07c:	ldr	r2, [sp, #32]
   3c080:	add	r5, lr, r3
   3c084:	ldr	r7, [lr, r3]
   3c088:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3c08c:	ldr	r2, [r4, #20]
   3c090:	mov	r1, #91	; 0x5b
   3c094:	ldr	r3, [r4, #32]
   3c098:	cmp	r7, #0
   3c09c:	add	r0, r2, #1
   3c0a0:	add	r3, r3, #1
   3c0a4:	str	r0, [r4, #20]
   3c0a8:	str	r3, [r4, #32]
   3c0ac:	strb	r1, [r2]
   3c0b0:	beq	3c224 <flatcc_json_printer_uint16_vector_field@@Base+0x220>
   3c0b4:	ldrb	r3, [r4, #25]
   3c0b8:	ldr	r1, [r4, #20]
   3c0bc:	cmp	r3, #0
   3c0c0:	bne	3c25c <flatcc_json_printer_uint16_vector_field@@Base+0x258>
   3c0c4:	ldr	r2, [r4, #16]
   3c0c8:	cmp	r2, r1
   3c0cc:	bhi	3c0e4 <flatcc_json_printer_uint16_vector_field@@Base+0xe0>
   3c0d0:	mov	r1, r3
   3c0d4:	mov	r0, r4
   3c0d8:	ldr	r3, [r4, #44]	; 0x2c
   3c0dc:	blx	r3
   3c0e0:	ldr	r1, [r4, #20]
   3c0e4:	add	r6, r5, #6
   3c0e8:	ldrh	r0, [r5, #4]
   3c0ec:	sub	r5, r7, #2
   3c0f0:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3c0f4:	ldr	r3, [r4, #20]
   3c0f8:	cmp	r7, #1
   3c0fc:	add	r0, r3, r0
   3c100:	str	r0, [r4, #20]
   3c104:	beq	3c228 <flatcc_json_printer_uint16_vector_field@@Base+0x224>
   3c108:	movw	r9, #34079	; 0x851f
   3c10c:	movt	r9, #20971	; 0x51eb
   3c110:	movw	r7, #32560	; 0x7f30
   3c114:	movt	r7, #4
   3c118:	mov	r8, #44	; 0x2c
   3c11c:	b	3c1bc <flatcc_json_printer_uint16_vector_field@@Base+0x1b8>
   3c120:	umull	r0, r1, r9, r3
   3c124:	mov	r0, #100	; 0x64
   3c128:	movw	ip, #9999	; 0x270f
   3c12c:	cmp	r3, ip
   3c130:	lsr	r1, r1, #5
   3c134:	uxth	ip, r1
   3c138:	mls	r3, r0, r1, r3
   3c13c:	mov	r1, #0
   3c140:	uxth	r3, r3
   3c144:	add	lr, r7, r3, lsl #1
   3c148:	bls	3c2e8 <flatcc_json_printer_uint16_vector_field@@Base+0x2e4>
   3c14c:	strb	r1, [r2, #5]
   3c150:	add	r0, r2, #3
   3c154:	mov	r1, #5
   3c158:	ldrb	r3, [r7, r3, lsl #1]
   3c15c:	strb	r3, [r2, #3]
   3c160:	ldrb	r3, [lr, #1]
   3c164:	strb	r3, [r2, #4]
   3c168:	umull	r2, r3, r9, ip
   3c16c:	mov	r2, #100	; 0x64
   3c170:	sub	lr, r0, #2
   3c174:	lsr	r3, r3, #5
   3c178:	mls	ip, r2, r3, ip
   3c17c:	uxth	r3, r3
   3c180:	uxth	ip, ip
   3c184:	ldrb	r2, [r7, ip, lsl #1]
   3c188:	add	ip, r7, ip, lsl #1
   3c18c:	strb	r2, [r0, #-2]
   3c190:	ldrb	r2, [ip, #1]
   3c194:	strb	r2, [r0, #-1]
   3c198:	add	r3, r3, #48	; 0x30
   3c19c:	strb	r3, [lr, #-1]
   3c1a0:	ldr	r0, [r4, #20]
   3c1a4:	sub	r5, r5, #1
   3c1a8:	add	r6, r6, #2
   3c1ac:	cmn	r5, #1
   3c1b0:	add	r0, r0, r1
   3c1b4:	str	r0, [r4, #20]
   3c1b8:	beq	3c228 <flatcc_json_printer_uint16_vector_field@@Base+0x224>
   3c1bc:	add	r3, r0, #1
   3c1c0:	str	r3, [r4, #20]
   3c1c4:	strb	r8, [r0]
   3c1c8:	ldrb	r1, [r4, #25]
   3c1cc:	cmp	r1, #0
   3c1d0:	bne	3c2a0 <flatcc_json_printer_uint16_vector_field@@Base+0x29c>
   3c1d4:	ldr	r3, [r4, #16]
   3c1d8:	ldr	r2, [r4, #20]
   3c1dc:	cmp	r2, r3
   3c1e0:	bcc	3c1f4 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   3c1e4:	mov	r0, r4
   3c1e8:	ldr	r3, [r4, #44]	; 0x2c
   3c1ec:	blx	r3
   3c1f0:	ldr	r2, [r4, #20]
   3c1f4:	ldrh	r3, [r6]
   3c1f8:	cmp	r3, #1000	; 0x3e8
   3c1fc:	bcs	3c120 <flatcc_json_printer_uint16_vector_field@@Base+0x11c>
   3c200:	cmp	r3, #99	; 0x63
   3c204:	mov	r1, #0
   3c208:	bhi	3c330 <flatcc_json_printer_uint16_vector_field@@Base+0x32c>
   3c20c:	cmp	r3, #9
   3c210:	bhi	3c360 <flatcc_json_printer_uint16_vector_field@@Base+0x35c>
   3c214:	add	lr, r2, #1
   3c218:	strb	r1, [r2, #1]
   3c21c:	mov	r1, #1
   3c220:	b	3c198 <flatcc_json_printer_uint16_vector_field@@Base+0x194>
   3c224:	ldr	r0, [r4, #20]
   3c228:	add	r3, r0, #1
   3c22c:	ldrb	r2, [r4, #25]
   3c230:	cmp	r2, #0
   3c234:	bne	3c374 <flatcc_json_printer_uint16_vector_field@@Base+0x370>
   3c238:	mov	r2, #93	; 0x5d
   3c23c:	str	r3, [r4, #20]
   3c240:	strb	r2, [r0]
   3c244:	ldrd	r4, [sp]
   3c248:	ldrd	r6, [sp, #8]
   3c24c:	ldrd	r8, [sp, #16]
   3c250:	ldr	sl, [sp, #24]
   3c254:	add	sp, sp, #28
   3c258:	pop	{pc}		; (ldr pc, [sp], #4)
   3c25c:	add	r2, r1, #1
   3c260:	mov	r3, #10
   3c264:	str	r2, [r4, #20]
   3c268:	strb	r3, [r1]
   3c26c:	ldrb	r6, [r4, #25]
   3c270:	ldr	r2, [r4, #16]
   3c274:	ldr	r1, [r4, #32]
   3c278:	ldr	r0, [r4, #20]
   3c27c:	mul	r6, r1, r6
   3c280:	add	r3, r0, r6
   3c284:	cmp	r2, r3
   3c288:	bcs	3c3dc <flatcc_json_printer_uint16_vector_field@@Base+0x3d8>
   3c28c:	mov	r1, r6
   3c290:	mov	r0, r4
   3c294:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c298:	ldr	r1, [r4, #20]
   3c29c:	b	3c0e4 <flatcc_json_printer_uint16_vector_field@@Base+0xe0>
   3c2a0:	ldr	r3, [r4, #20]
   3c2a4:	mov	r2, #10
   3c2a8:	add	r1, r3, #1
   3c2ac:	str	r1, [r4, #20]
   3c2b0:	strb	r2, [r3]
   3c2b4:	ldrb	r3, [r4, #25]
   3c2b8:	ldr	r1, [r4, #16]
   3c2bc:	ldr	r2, [r4, #32]
   3c2c0:	ldr	r0, [r4, #20]
   3c2c4:	mul	sl, r2, r3
   3c2c8:	add	r3, r0, sl
   3c2cc:	cmp	r1, r3
   3c2d0:	bcs	3c344 <flatcc_json_printer_uint16_vector_field@@Base+0x340>
   3c2d4:	mov	r1, sl
   3c2d8:	mov	r0, r4
   3c2dc:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c2e0:	ldr	r2, [r4, #20]
   3c2e4:	b	3c1f4 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   3c2e8:	strb	r1, [r2, #4]
   3c2ec:	add	r0, r2, #2
   3c2f0:	mov	r1, #4
   3c2f4:	ldrb	r3, [r7, r3, lsl #1]
   3c2f8:	strb	r3, [r2, #2]
   3c2fc:	ldrb	r3, [lr, #1]
   3c300:	strb	r3, [r2, #3]
   3c304:	umull	r2, r3, r9, ip
   3c308:	mov	r2, #100	; 0x64
   3c30c:	lsr	r3, r3, #5
   3c310:	mls	r3, r2, r3, ip
   3c314:	uxth	r3, r3
   3c318:	ldrb	r2, [r7, r3, lsl #1]
   3c31c:	add	r3, r7, r3, lsl #1
   3c320:	strb	r2, [r0, #-2]
   3c324:	ldrb	r3, [r3, #1]
   3c328:	strb	r3, [r0, #-1]
   3c32c:	b	3c1a0 <flatcc_json_printer_uint16_vector_field@@Base+0x19c>
   3c330:	mov	ip, r3
   3c334:	add	r0, r2, #3
   3c338:	strb	r1, [r2, #3]
   3c33c:	mov	r1, #3
   3c340:	b	3c168 <flatcc_json_printer_uint16_vector_field@@Base+0x164>
   3c344:	mov	r2, sl
   3c348:	mov	r1, #32
   3c34c:	bl	1459c <memset@plt>
   3c350:	ldr	r2, [r4, #20]
   3c354:	add	r2, r2, sl
   3c358:	str	r2, [r4, #20]
   3c35c:	b	3c1f4 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   3c360:	mov	ip, r3
   3c364:	add	r0, r2, #2
   3c368:	strb	r1, [r2, #2]
   3c36c:	mov	r1, #2
   3c370:	b	3c304 <flatcc_json_printer_uint16_vector_field@@Base+0x300>
   3c374:	mov	r2, #10
   3c378:	str	r3, [r4, #20]
   3c37c:	strb	r2, [r0]
   3c380:	ldrb	r5, [r4, #25]
   3c384:	ldr	r3, [r4, #32]
   3c388:	ldr	r2, [r4, #16]
   3c38c:	ldr	r0, [r4, #20]
   3c390:	sub	r3, r3, #1
   3c394:	mul	r5, r3, r5
   3c398:	str	r3, [r4, #32]
   3c39c:	add	r3, r0, r5
   3c3a0:	cmp	r2, r3
   3c3a4:	bcs	3c3c0 <flatcc_json_printer_uint16_vector_field@@Base+0x3bc>
   3c3a8:	mov	r0, r4
   3c3ac:	mov	r1, r5
   3c3b0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c3b4:	ldr	r0, [r4, #20]
   3c3b8:	add	r3, r0, #1
   3c3bc:	b	3c238 <flatcc_json_printer_uint16_vector_field@@Base+0x234>
   3c3c0:	mov	r2, r5
   3c3c4:	mov	r1, #32
   3c3c8:	bl	1459c <memset@plt>
   3c3cc:	ldr	r0, [r4, #20]
   3c3d0:	add	r0, r0, r5
   3c3d4:	add	r3, r0, #1
   3c3d8:	b	3c238 <flatcc_json_printer_uint16_vector_field@@Base+0x234>
   3c3dc:	mov	r1, #32
   3c3e0:	mov	r2, r6
   3c3e4:	bl	1459c <memset@plt>
   3c3e8:	ldr	r1, [r4, #20]
   3c3ec:	add	r1, r1, r6
   3c3f0:	str	r1, [r4, #20]
   3c3f4:	b	3c0e4 <flatcc_json_printer_uint16_vector_field@@Base+0xe0>

0003c3f8 <flatcc_json_printer_uint32_vector_field@@Base>:
   3c3f8:	ldr	ip, [r1, #8]
   3c3fc:	add	r2, r2, #2
   3c400:	lsl	r2, r2, #1
   3c404:	cmp	ip, r2
   3c408:	bxle	lr
   3c40c:	ldr	ip, [r1, #4]
   3c410:	ldrh	r2, [ip, r2]
   3c414:	cmp	r2, #0
   3c418:	bxeq	lr
   3c41c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c420:	ldr	ip, [r1]
   3c424:	strd	r6, [sp, #8]
   3c428:	str	lr, [sp, #28]
   3c42c:	strd	r8, [sp, #16]
   3c430:	str	sl, [sp, #24]
   3c434:	adds	lr, ip, r2
   3c438:	beq	3c5d0 <flatcc_json_printer_uint32_vector_field@@Base+0x1d8>
   3c43c:	ldr	r4, [r1, #16]
   3c440:	add	r5, r4, #1
   3c444:	cmp	r4, #0
   3c448:	str	r5, [r1, #16]
   3c44c:	beq	3c464 <flatcc_json_printer_uint32_vector_field@@Base+0x6c>
   3c450:	ldr	r1, [r0, #20]
   3c454:	mov	r4, #44	; 0x2c
   3c458:	add	r5, r1, #1
   3c45c:	str	r5, [r0, #20]
   3c460:	strb	r4, [r1]
   3c464:	mov	r1, r3
   3c468:	ldr	r3, [ip, r2]
   3c46c:	mov	r4, r0
   3c470:	ldr	r2, [sp, #32]
   3c474:	add	r5, lr, r3
   3c478:	ldr	r7, [lr, r3]
   3c47c:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3c480:	ldr	r2, [r4, #20]
   3c484:	mov	r1, #91	; 0x5b
   3c488:	ldr	r3, [r4, #32]
   3c48c:	cmp	r7, #0
   3c490:	add	r0, r2, #1
   3c494:	add	r3, r3, #1
   3c498:	str	r0, [r4, #20]
   3c49c:	str	r3, [r4, #32]
   3c4a0:	strb	r1, [r2]
   3c4a4:	beq	3c5b0 <flatcc_json_printer_uint32_vector_field@@Base+0x1b8>
   3c4a8:	ldrb	r3, [r4, #25]
   3c4ac:	ldr	r1, [r4, #20]
   3c4b0:	cmp	r3, #0
   3c4b4:	bne	3c5e8 <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   3c4b8:	ldr	r2, [r4, #16]
   3c4bc:	cmp	r2, r1
   3c4c0:	bhi	3c4d8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   3c4c4:	mov	r1, r3
   3c4c8:	mov	r0, r4
   3c4cc:	ldr	r3, [r4, #44]	; 0x2c
   3c4d0:	blx	r3
   3c4d4:	ldr	r1, [r4, #20]
   3c4d8:	add	r6, r5, #8
   3c4dc:	ldr	r0, [r5, #4]
   3c4e0:	sub	r5, r7, #2
   3c4e4:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3c4e8:	ldr	r3, [r4, #20]
   3c4ec:	cmp	r7, #1
   3c4f0:	add	r0, r3, r0
   3c4f4:	str	r0, [r4, #20]
   3c4f8:	beq	3c5b4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   3c4fc:	mov	r7, #44	; 0x2c
   3c500:	mov	r8, #10
   3c504:	b	3c54c <flatcc_json_printer_uint32_vector_field@@Base+0x154>
   3c508:	ldr	r3, [r4, #16]
   3c50c:	mov	r0, r4
   3c510:	ldr	r2, [r4, #20]
   3c514:	cmp	r2, r3
   3c518:	bcc	3c528 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3c51c:	ldr	r3, [r4, #44]	; 0x2c
   3c520:	blx	r3
   3c524:	ldr	r2, [r4, #20]
   3c528:	mov	r1, r2
   3c52c:	sub	r5, r5, #1
   3c530:	ldr	r0, [r6], #4
   3c534:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3c538:	ldr	r3, [r4, #20]
   3c53c:	cmn	r5, #1
   3c540:	add	r0, r3, r0
   3c544:	str	r0, [r4, #20]
   3c548:	beq	3c5b4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   3c54c:	add	r3, r0, #1
   3c550:	str	r3, [r4, #20]
   3c554:	strb	r7, [r0]
   3c558:	ldrb	r1, [r4, #25]
   3c55c:	cmp	r1, #0
   3c560:	beq	3c508 <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   3c564:	ldr	r3, [r4, #20]
   3c568:	mov	r1, #32
   3c56c:	mov	r0, r4
   3c570:	add	r2, r3, #1
   3c574:	str	r2, [r4, #20]
   3c578:	strb	r8, [r3]
   3c57c:	ldrb	r2, [r4, #25]
   3c580:	ldr	lr, [r4, #16]
   3c584:	ldr	r9, [r4, #32]
   3c588:	ldr	r3, [r4, #20]
   3c58c:	mul	r9, r9, r2
   3c590:	add	ip, r3, r9
   3c594:	mov	r2, r9
   3c598:	cmp	lr, ip
   3c59c:	bcs	3c608 <flatcc_json_printer_uint32_vector_field@@Base+0x210>
   3c5a0:	mov	r1, r9
   3c5a4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c5a8:	ldr	r2, [r4, #20]
   3c5ac:	b	3c528 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3c5b0:	ldr	r0, [r4, #20]
   3c5b4:	add	r3, r0, #1
   3c5b8:	ldrb	r2, [r4, #25]
   3c5bc:	cmp	r2, #0
   3c5c0:	bne	3c620 <flatcc_json_printer_uint32_vector_field@@Base+0x228>
   3c5c4:	mov	r2, #93	; 0x5d
   3c5c8:	str	r3, [r4, #20]
   3c5cc:	strb	r2, [r0]
   3c5d0:	ldrd	r4, [sp]
   3c5d4:	ldrd	r6, [sp, #8]
   3c5d8:	ldrd	r8, [sp, #16]
   3c5dc:	ldr	sl, [sp, #24]
   3c5e0:	add	sp, sp, #28
   3c5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   3c5e8:	add	r2, r1, #1
   3c5ec:	mov	r3, #10
   3c5f0:	mov	r0, r4
   3c5f4:	str	r2, [r4, #20]
   3c5f8:	strb	r3, [r1]
   3c5fc:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3c600:	ldr	r1, [r4, #20]
   3c604:	b	3c4d8 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   3c608:	mov	r0, r3
   3c60c:	bl	1459c <memset@plt>
   3c610:	ldr	r2, [r4, #20]
   3c614:	add	r2, r2, r9
   3c618:	str	r2, [r4, #20]
   3c61c:	b	3c528 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3c620:	mov	r2, #10
   3c624:	str	r3, [r4, #20]
   3c628:	strb	r2, [r0]
   3c62c:	ldrb	r5, [r4, #25]
   3c630:	ldr	r3, [r4, #32]
   3c634:	ldr	r2, [r4, #16]
   3c638:	ldr	r0, [r4, #20]
   3c63c:	sub	r3, r3, #1
   3c640:	mul	r5, r3, r5
   3c644:	str	r3, [r4, #32]
   3c648:	add	r3, r0, r5
   3c64c:	cmp	r2, r3
   3c650:	bcs	3c66c <flatcc_json_printer_uint32_vector_field@@Base+0x274>
   3c654:	mov	r0, r4
   3c658:	mov	r1, r5
   3c65c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c660:	ldr	r0, [r4, #20]
   3c664:	add	r3, r0, #1
   3c668:	b	3c5c4 <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>
   3c66c:	mov	r2, r5
   3c670:	mov	r1, #32
   3c674:	bl	1459c <memset@plt>
   3c678:	ldr	r0, [r4, #20]
   3c67c:	add	r0, r0, r5
   3c680:	add	r3, r0, #1
   3c684:	b	3c5c4 <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>

0003c688 <flatcc_json_printer_uint64_vector_field@@Base>:
   3c688:	ldr	ip, [r1, #8]
   3c68c:	add	r2, r2, #2
   3c690:	lsl	r2, r2, #1
   3c694:	cmp	ip, r2
   3c698:	bxle	lr
   3c69c:	ldr	ip, [r1, #4]
   3c6a0:	ldrh	r2, [ip, r2]
   3c6a4:	cmp	r2, #0
   3c6a8:	bxeq	lr
   3c6ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c6b0:	ldr	ip, [r1]
   3c6b4:	strd	r6, [sp, #8]
   3c6b8:	str	lr, [sp, #28]
   3c6bc:	strd	r8, [sp, #16]
   3c6c0:	str	sl, [sp, #24]
   3c6c4:	adds	lr, ip, r2
   3c6c8:	beq	3c858 <flatcc_json_printer_uint64_vector_field@@Base+0x1d0>
   3c6cc:	ldr	r4, [r1, #16]
   3c6d0:	add	r5, r4, #1
   3c6d4:	cmp	r4, #0
   3c6d8:	str	r5, [r1, #16]
   3c6dc:	beq	3c6f4 <flatcc_json_printer_uint64_vector_field@@Base+0x6c>
   3c6e0:	ldr	r1, [r0, #20]
   3c6e4:	mov	r4, #44	; 0x2c
   3c6e8:	add	r5, r1, #1
   3c6ec:	str	r5, [r0, #20]
   3c6f0:	strb	r4, [r1]
   3c6f4:	mov	r1, r3
   3c6f8:	ldr	r3, [ip, r2]
   3c6fc:	mov	r4, r0
   3c700:	ldr	r2, [sp, #32]
   3c704:	add	r5, lr, r3
   3c708:	ldr	r7, [lr, r3]
   3c70c:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3c710:	ldr	r2, [r4, #20]
   3c714:	mov	r1, #91	; 0x5b
   3c718:	ldr	r3, [r4, #32]
   3c71c:	cmp	r7, #0
   3c720:	add	r0, r2, #1
   3c724:	add	r3, r3, #1
   3c728:	str	r0, [r4, #20]
   3c72c:	str	r3, [r4, #32]
   3c730:	strb	r1, [r2]
   3c734:	beq	3c838 <flatcc_json_printer_uint64_vector_field@@Base+0x1b0>
   3c738:	ldrb	r1, [r4, #25]
   3c73c:	ldr	r2, [r4, #20]
   3c740:	cmp	r1, #0
   3c744:	bne	3c870 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   3c748:	ldr	r3, [r4, #16]
   3c74c:	cmp	r3, r2
   3c750:	bhi	3c764 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3c754:	mov	r0, r4
   3c758:	ldr	r3, [r4, #44]	; 0x2c
   3c75c:	blx	r3
   3c760:	ldr	r2, [r4, #20]
   3c764:	add	r6, r5, #12
   3c768:	ldrd	r0, [r5, #4]
   3c76c:	sub	r5, r7, #2
   3c770:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3c774:	ldr	r3, [r4, #20]
   3c778:	cmp	r7, #1
   3c77c:	add	r0, r3, r0
   3c780:	str	r0, [r4, #20]
   3c784:	beq	3c83c <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   3c788:	mov	r7, #44	; 0x2c
   3c78c:	mov	r8, #10
   3c790:	b	3c7d4 <flatcc_json_printer_uint64_vector_field@@Base+0x14c>
   3c794:	ldr	r3, [r4, #16]
   3c798:	mov	r0, r4
   3c79c:	ldr	r2, [r4, #20]
   3c7a0:	cmp	r2, r3
   3c7a4:	bcc	3c7b4 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   3c7a8:	ldr	r3, [r4, #44]	; 0x2c
   3c7ac:	blx	r3
   3c7b0:	ldr	r2, [r4, #20]
   3c7b4:	sub	r5, r5, #1
   3c7b8:	ldrd	r0, [r6], #8
   3c7bc:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3c7c0:	ldr	r3, [r4, #20]
   3c7c4:	cmn	r5, #1
   3c7c8:	add	r0, r3, r0
   3c7cc:	str	r0, [r4, #20]
   3c7d0:	beq	3c83c <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   3c7d4:	add	r3, r0, #1
   3c7d8:	str	r3, [r4, #20]
   3c7dc:	strb	r7, [r0]
   3c7e0:	ldrb	r1, [r4, #25]
   3c7e4:	cmp	r1, #0
   3c7e8:	beq	3c794 <flatcc_json_printer_uint64_vector_field@@Base+0x10c>
   3c7ec:	ldr	r3, [r4, #20]
   3c7f0:	mov	r1, #32
   3c7f4:	mov	r0, r4
   3c7f8:	add	r2, r3, #1
   3c7fc:	str	r2, [r4, #20]
   3c800:	strb	r8, [r3]
   3c804:	ldrb	r2, [r4, #25]
   3c808:	ldr	lr, [r4, #16]
   3c80c:	ldr	r9, [r4, #32]
   3c810:	ldr	r3, [r4, #20]
   3c814:	mul	r9, r9, r2
   3c818:	add	ip, r3, r9
   3c81c:	mov	r2, r9
   3c820:	cmp	lr, ip
   3c824:	bcs	3c890 <flatcc_json_printer_uint64_vector_field@@Base+0x208>
   3c828:	mov	r1, r9
   3c82c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c830:	ldr	r2, [r4, #20]
   3c834:	b	3c7b4 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   3c838:	ldr	r0, [r4, #20]
   3c83c:	add	r3, r0, #1
   3c840:	ldrb	r2, [r4, #25]
   3c844:	cmp	r2, #0
   3c848:	bne	3c8a8 <flatcc_json_printer_uint64_vector_field@@Base+0x220>
   3c84c:	mov	r2, #93	; 0x5d
   3c850:	str	r3, [r4, #20]
   3c854:	strb	r2, [r0]
   3c858:	ldrd	r4, [sp]
   3c85c:	ldrd	r6, [sp, #8]
   3c860:	ldrd	r8, [sp, #16]
   3c864:	ldr	sl, [sp, #24]
   3c868:	add	sp, sp, #28
   3c86c:	pop	{pc}		; (ldr pc, [sp], #4)
   3c870:	add	r1, r2, #1
   3c874:	mov	r3, #10
   3c878:	mov	r0, r4
   3c87c:	str	r1, [r4, #20]
   3c880:	strb	r3, [r2]
   3c884:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3c888:	ldr	r2, [r4, #20]
   3c88c:	b	3c764 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3c890:	mov	r0, r3
   3c894:	bl	1459c <memset@plt>
   3c898:	ldr	r2, [r4, #20]
   3c89c:	add	r2, r2, r9
   3c8a0:	str	r2, [r4, #20]
   3c8a4:	b	3c7b4 <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   3c8a8:	mov	r2, #10
   3c8ac:	str	r3, [r4, #20]
   3c8b0:	strb	r2, [r0]
   3c8b4:	ldrb	r5, [r4, #25]
   3c8b8:	ldr	r3, [r4, #32]
   3c8bc:	ldr	r2, [r4, #16]
   3c8c0:	ldr	r0, [r4, #20]
   3c8c4:	sub	r3, r3, #1
   3c8c8:	mul	r5, r3, r5
   3c8cc:	str	r3, [r4, #32]
   3c8d0:	add	r3, r0, r5
   3c8d4:	cmp	r2, r3
   3c8d8:	bcs	3c8f4 <flatcc_json_printer_uint64_vector_field@@Base+0x26c>
   3c8dc:	mov	r0, r4
   3c8e0:	mov	r1, r5
   3c8e4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3c8e8:	ldr	r0, [r4, #20]
   3c8ec:	add	r3, r0, #1
   3c8f0:	b	3c84c <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   3c8f4:	mov	r2, r5
   3c8f8:	mov	r1, #32
   3c8fc:	bl	1459c <memset@plt>
   3c900:	ldr	r0, [r4, #20]
   3c904:	add	r0, r0, r5
   3c908:	add	r3, r0, #1
   3c90c:	b	3c84c <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>

0003c910 <flatcc_json_printer_int8_vector_field@@Base>:
   3c910:	ldr	ip, [r1, #8]
   3c914:	add	r2, r2, #2
   3c918:	lsl	r2, r2, #1
   3c91c:	cmp	ip, r2
   3c920:	bxle	lr
   3c924:	ldr	ip, [r1, #4]
   3c928:	ldrh	r2, [ip, r2]
   3c92c:	cmp	r2, #0
   3c930:	bxeq	lr
   3c934:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c938:	ldr	ip, [r1]
   3c93c:	strd	r6, [sp, #8]
   3c940:	strd	r8, [sp, #16]
   3c944:	str	sl, [sp, #24]
   3c948:	str	lr, [sp, #28]
   3c94c:	adds	r6, ip, r2
   3c950:	beq	3cb58 <flatcc_json_printer_int8_vector_field@@Base+0x248>
   3c954:	ldr	lr, [r1, #16]
   3c958:	add	r5, lr, #1
   3c95c:	cmp	lr, #0
   3c960:	str	r5, [r1, #16]
   3c964:	beq	3c97c <flatcc_json_printer_int8_vector_field@@Base+0x6c>
   3c968:	ldr	r1, [r0, #20]
   3c96c:	mov	lr, #44	; 0x2c
   3c970:	add	r4, r1, #1
   3c974:	str	r4, [r0, #20]
   3c978:	strb	lr, [r1]
   3c97c:	mov	r1, r3
   3c980:	ldr	r3, [ip, r2]
   3c984:	mov	r4, r0
   3c988:	ldr	r2, [sp, #32]
   3c98c:	add	r5, r6, r3
   3c990:	ldr	r6, [r6, r3]
   3c994:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3c998:	ldr	r2, [r4, #20]
   3c99c:	mov	r1, #91	; 0x5b
   3c9a0:	ldr	r3, [r4, #32]
   3c9a4:	cmp	r6, #0
   3c9a8:	add	r0, r2, #1
   3c9ac:	add	r3, r3, #1
   3c9b0:	str	r0, [r4, #20]
   3c9b4:	str	r3, [r4, #32]
   3c9b8:	strb	r1, [r2]
   3c9bc:	beq	3cb38 <flatcc_json_printer_int8_vector_field@@Base+0x228>
   3c9c0:	ldrb	r3, [r4, #25]
   3c9c4:	ldr	r1, [r4, #20]
   3c9c8:	cmp	r3, #0
   3c9cc:	bne	3cb70 <flatcc_json_printer_int8_vector_field@@Base+0x260>
   3c9d0:	ldr	r2, [r4, #16]
   3c9d4:	cmp	r2, r1
   3c9d8:	bhi	3c9f0 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   3c9dc:	mov	r1, r3
   3c9e0:	mov	r0, r4
   3c9e4:	ldr	r3, [r4, #44]	; 0x2c
   3c9e8:	blx	r3
   3c9ec:	ldr	r1, [r4, #20]
   3c9f0:	ldrsb	r0, [r5, #4]
   3c9f4:	cmp	r0, #0
   3c9f8:	lsr	r7, r0, #31
   3c9fc:	uxtb	r0, r0
   3ca00:	bge	3ca14 <flatcc_json_printer_int8_vector_field@@Base+0x104>
   3ca04:	rsb	r0, r0, #0
   3ca08:	mov	r3, #45	; 0x2d
   3ca0c:	uxtb	r0, r0
   3ca10:	strb	r3, [r1], #1
   3ca14:	bl	3447c <flatcc_json_parser_struct_as_root@@Base+0xf5c>
   3ca18:	ldr	r3, [r4, #20]
   3ca1c:	add	r0, r7, r0
   3ca20:	cmp	r6, #1
   3ca24:	add	r9, r5, #5
   3ca28:	add	r3, r3, r0
   3ca2c:	str	r3, [r4, #20]
   3ca30:	beq	3cb3c <flatcc_json_printer_int8_vector_field@@Base+0x22c>
   3ca34:	add	r6, r6, #4
   3ca38:	movw	r7, #32560	; 0x7f30
   3ca3c:	movt	r7, #4
   3ca40:	add	r5, r5, r6
   3ca44:	movw	r8, #34079	; 0x851f
   3ca48:	movt	r8, #20971	; 0x51eb
   3ca4c:	mov	r6, #44	; 0x2c
   3ca50:	b	3cad8 <flatcc_json_printer_int8_vector_field@@Base+0x1c8>
   3ca54:	ldr	r3, [r4, #16]
   3ca58:	ldr	r2, [r4, #20]
   3ca5c:	cmp	r2, r3
   3ca60:	bcc	3ca74 <flatcc_json_printer_int8_vector_field@@Base+0x164>
   3ca64:	mov	r0, r4
   3ca68:	ldr	r3, [r4, #44]	; 0x2c
   3ca6c:	blx	r3
   3ca70:	ldr	r2, [r4, #20]
   3ca74:	ldrsb	ip, [r9]
   3ca78:	cmp	ip, #0
   3ca7c:	lsr	r0, ip, #31
   3ca80:	uxtb	r3, ip
   3ca84:	bge	3ca98 <flatcc_json_printer_int8_vector_field@@Base+0x188>
   3ca88:	rsb	r3, r3, #0
   3ca8c:	mov	r1, #45	; 0x2d
   3ca90:	uxtb	r3, r3
   3ca94:	strb	r1, [r2], #1
   3ca98:	cmp	r3, #99	; 0x63
   3ca9c:	bhi	3cb90 <flatcc_json_printer_int8_vector_field@@Base+0x280>
   3caa0:	cmp	r3, #9
   3caa4:	bhi	3cbd0 <flatcc_json_printer_int8_vector_field@@Base+0x2c0>
   3caa8:	add	r3, r3, #48	; 0x30
   3caac:	mov	r1, #0
   3cab0:	mov	ip, #1
   3cab4:	strb	r3, [r2]
   3cab8:	strb	r1, [r2, #1]
   3cabc:	ldr	r3, [r4, #20]
   3cac0:	add	r0, r0, ip
   3cac4:	add	r9, r9, #1
   3cac8:	cmp	r5, r9
   3cacc:	add	r3, r3, r0
   3cad0:	str	r3, [r4, #20]
   3cad4:	beq	3cb3c <flatcc_json_printer_int8_vector_field@@Base+0x22c>
   3cad8:	add	r2, r3, #1
   3cadc:	str	r2, [r4, #20]
   3cae0:	strb	r6, [r3]
   3cae4:	ldrb	r1, [r4, #25]
   3cae8:	cmp	r1, #0
   3caec:	beq	3ca54 <flatcc_json_printer_int8_vector_field@@Base+0x144>
   3caf0:	ldr	r3, [r4, #20]
   3caf4:	mov	r2, #10
   3caf8:	add	r1, r3, #1
   3cafc:	str	r1, [r4, #20]
   3cb00:	strb	r2, [r3]
   3cb04:	ldrb	r3, [r4, #25]
   3cb08:	ldr	r1, [r4, #16]
   3cb0c:	ldr	r2, [r4, #32]
   3cb10:	ldr	r0, [r4, #20]
   3cb14:	mul	sl, r2, r3
   3cb18:	add	r3, r0, sl
   3cb1c:	cmp	r1, r3
   3cb20:	bcs	3cbf8 <flatcc_json_printer_int8_vector_field@@Base+0x2e8>
   3cb24:	mov	r1, sl
   3cb28:	mov	r0, r4
   3cb2c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3cb30:	ldr	r2, [r4, #20]
   3cb34:	b	3ca74 <flatcc_json_printer_int8_vector_field@@Base+0x164>
   3cb38:	ldr	r3, [r4, #20]
   3cb3c:	add	r2, r3, #1
   3cb40:	ldrb	r1, [r4, #25]
   3cb44:	cmp	r1, #0
   3cb48:	bne	3cc14 <flatcc_json_printer_int8_vector_field@@Base+0x304>
   3cb4c:	mov	r1, #93	; 0x5d
   3cb50:	str	r2, [r4, #20]
   3cb54:	strb	r1, [r3]
   3cb58:	ldrd	r4, [sp]
   3cb5c:	ldrd	r6, [sp, #8]
   3cb60:	ldrd	r8, [sp, #16]
   3cb64:	ldr	sl, [sp, #24]
   3cb68:	add	sp, sp, #28
   3cb6c:	pop	{pc}		; (ldr pc, [sp], #4)
   3cb70:	add	r2, r1, #1
   3cb74:	mov	r3, #10
   3cb78:	mov	r0, r4
   3cb7c:	str	r2, [r4, #20]
   3cb80:	strb	r3, [r1]
   3cb84:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3cb88:	ldr	r1, [r4, #20]
   3cb8c:	b	3c9f0 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   3cb90:	umull	ip, r1, r8, r3
   3cb94:	mov	sl, #100	; 0x64
   3cb98:	mov	ip, #0
   3cb9c:	mov	lr, #49	; 0x31
   3cba0:	strb	ip, [r2, #3]
   3cba4:	mov	ip, #3
   3cba8:	lsr	r1, r1, #5
   3cbac:	mls	r1, sl, r1, r3
   3cbb0:	uxtb	r1, r1
   3cbb4:	ldrb	r3, [r7, r1, lsl #1]
   3cbb8:	add	r1, r7, r1, lsl #1
   3cbbc:	strb	r3, [r2, #1]
   3cbc0:	ldrb	r3, [r1, #1]
   3cbc4:	strb	lr, [r2]
   3cbc8:	strb	r3, [r2, #2]
   3cbcc:	b	3cabc <flatcc_json_printer_int8_vector_field@@Base+0x1ac>
   3cbd0:	mov	ip, #0
   3cbd4:	sxth	r3, r3
   3cbd8:	add	r1, r7, r3, lsl #1
   3cbdc:	strb	ip, [r2, #2]
   3cbe0:	mov	ip, #2
   3cbe4:	ldrb	r3, [r7, r3, lsl #1]
   3cbe8:	strb	r3, [r2]
   3cbec:	ldrb	r3, [r1, #1]
   3cbf0:	strb	r3, [r2, #1]
   3cbf4:	b	3cabc <flatcc_json_printer_int8_vector_field@@Base+0x1ac>
   3cbf8:	mov	r2, sl
   3cbfc:	mov	r1, #32
   3cc00:	bl	1459c <memset@plt>
   3cc04:	ldr	r2, [r4, #20]
   3cc08:	add	r2, r2, sl
   3cc0c:	str	r2, [r4, #20]
   3cc10:	b	3ca74 <flatcc_json_printer_int8_vector_field@@Base+0x164>
   3cc14:	mov	r1, #10
   3cc18:	str	r2, [r4, #20]
   3cc1c:	strb	r1, [r3]
   3cc20:	ldrb	r3, [r4, #25]
   3cc24:	ldr	r2, [r4, #32]
   3cc28:	ldr	r1, [r4, #16]
   3cc2c:	ldr	r0, [r4, #20]
   3cc30:	sub	r2, r2, #1
   3cc34:	mul	r5, r2, r3
   3cc38:	str	r2, [r4, #32]
   3cc3c:	add	r3, r0, r5
   3cc40:	cmp	r1, r3
   3cc44:	bcs	3cc60 <flatcc_json_printer_int8_vector_field@@Base+0x350>
   3cc48:	mov	r1, r5
   3cc4c:	mov	r0, r4
   3cc50:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3cc54:	ldr	r3, [r4, #20]
   3cc58:	add	r2, r3, #1
   3cc5c:	b	3cb4c <flatcc_json_printer_int8_vector_field@@Base+0x23c>
   3cc60:	mov	r2, r5
   3cc64:	mov	r1, #32
   3cc68:	bl	1459c <memset@plt>
   3cc6c:	ldr	r3, [r4, #20]
   3cc70:	add	r3, r3, r5
   3cc74:	add	r2, r3, #1
   3cc78:	b	3cb4c <flatcc_json_printer_int8_vector_field@@Base+0x23c>

0003cc7c <flatcc_json_printer_int16_vector_field@@Base>:
   3cc7c:	ldr	ip, [r1, #8]
   3cc80:	add	r2, r2, #2
   3cc84:	lsl	r2, r2, #1
   3cc88:	cmp	ip, r2
   3cc8c:	bxle	lr
   3cc90:	ldr	ip, [r1, #4]
   3cc94:	ldrh	r2, [ip, r2]
   3cc98:	cmp	r2, #0
   3cc9c:	bxeq	lr
   3cca0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cca4:	ldr	ip, [r1]
   3cca8:	strd	r6, [sp, #8]
   3ccac:	str	lr, [sp, #28]
   3ccb0:	strd	r8, [sp, #16]
   3ccb4:	str	sl, [sp, #24]
   3ccb8:	adds	lr, ip, r2
   3ccbc:	beq	3ce48 <flatcc_json_printer_int16_vector_field@@Base+0x1cc>
   3ccc0:	ldr	r4, [r1, #16]
   3ccc4:	add	r5, r4, #1
   3ccc8:	cmp	r4, #0
   3cccc:	str	r5, [r1, #16]
   3ccd0:	beq	3cce8 <flatcc_json_printer_int16_vector_field@@Base+0x6c>
   3ccd4:	ldr	r1, [r0, #20]
   3ccd8:	mov	r4, #44	; 0x2c
   3ccdc:	add	r5, r1, #1
   3cce0:	str	r5, [r0, #20]
   3cce4:	strb	r4, [r1]
   3cce8:	mov	r1, r3
   3ccec:	ldr	r3, [ip, r2]
   3ccf0:	mov	r4, r0
   3ccf4:	ldr	r2, [sp, #32]
   3ccf8:	add	r6, lr, r3
   3ccfc:	ldr	r5, [lr, r3]
   3cd00:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3cd04:	ldr	r2, [r4, #20]
   3cd08:	mov	r1, #91	; 0x5b
   3cd0c:	ldr	r3, [r4, #32]
   3cd10:	cmp	r5, #0
   3cd14:	add	r0, r2, #1
   3cd18:	add	r3, r3, #1
   3cd1c:	str	r0, [r4, #20]
   3cd20:	str	r3, [r4, #32]
   3cd24:	strb	r1, [r2]
   3cd28:	beq	3ce28 <flatcc_json_printer_int16_vector_field@@Base+0x1ac>
   3cd2c:	ldrb	r3, [r4, #25]
   3cd30:	ldr	r1, [r4, #20]
   3cd34:	cmp	r3, #0
   3cd38:	bne	3ce60 <flatcc_json_printer_int16_vector_field@@Base+0x1e4>
   3cd3c:	ldr	r2, [r4, #16]
   3cd40:	cmp	r2, r1
   3cd44:	bhi	3cd5c <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   3cd48:	mov	r1, r3
   3cd4c:	mov	r0, r4
   3cd50:	ldr	r3, [r4, #44]	; 0x2c
   3cd54:	blx	r3
   3cd58:	ldr	r1, [r4, #20]
   3cd5c:	ldrsh	r0, [r6, #4]
   3cd60:	cmp	r0, #0
   3cd64:	lsr	r7, r0, #31
   3cd68:	uxth	r0, r0
   3cd6c:	bge	3cd80 <flatcc_json_printer_int16_vector_field@@Base+0x104>
   3cd70:	rsb	r0, r0, #0
   3cd74:	mov	r3, #45	; 0x2d
   3cd78:	uxth	r0, r0
   3cd7c:	strb	r3, [r1], #1
   3cd80:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3cd84:	ldr	r3, [r4, #20]
   3cd88:	add	r0, r7, r0
   3cd8c:	cmp	r5, #1
   3cd90:	add	r6, r6, #6
   3cd94:	sub	r5, r5, #2
   3cd98:	add	r0, r3, r0
   3cd9c:	str	r0, [r4, #20]
   3cda0:	beq	3ce2c <flatcc_json_printer_int16_vector_field@@Base+0x1b0>
   3cda4:	mov	r7, #44	; 0x2c
   3cda8:	mov	r8, #10
   3cdac:	add	r3, r0, #1
   3cdb0:	str	r3, [r4, #20]
   3cdb4:	strb	r7, [r0]
   3cdb8:	ldrb	r1, [r4, #25]
   3cdbc:	cmp	r1, #0
   3cdc0:	bne	3ceb4 <flatcc_json_printer_int16_vector_field@@Base+0x238>
   3cdc4:	ldr	r3, [r4, #16]
   3cdc8:	mov	r0, r4
   3cdcc:	ldr	r2, [r4, #20]
   3cdd0:	cmp	r2, r3
   3cdd4:	bcc	3cde4 <flatcc_json_printer_int16_vector_field@@Base+0x168>
   3cdd8:	ldr	r3, [r4, #44]	; 0x2c
   3cddc:	blx	r3
   3cde0:	ldr	r2, [r4, #20]
   3cde4:	mov	r3, r2
   3cde8:	mov	r1, r2
   3cdec:	ldrsh	r0, [r6]
   3cdf0:	mov	ip, #45	; 0x2d
   3cdf4:	cmp	r0, #0
   3cdf8:	uxth	r0, r0
   3cdfc:	rsb	r2, r0, #0
   3ce00:	blt	3ce80 <flatcc_json_printer_int16_vector_field@@Base+0x204>
   3ce04:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3ce08:	ldr	r3, [r4, #20]
   3ce0c:	sub	r5, r5, #1
   3ce10:	add	r6, r6, #2
   3ce14:	cmn	r5, #1
   3ce18:	add	r0, r3, r0
   3ce1c:	str	r0, [r4, #20]
   3ce20:	bne	3cdac <flatcc_json_printer_int16_vector_field@@Base+0x130>
   3ce24:	b	3ce2c <flatcc_json_printer_int16_vector_field@@Base+0x1b0>
   3ce28:	ldr	r0, [r4, #20]
   3ce2c:	add	r3, r0, #1
   3ce30:	ldrb	r2, [r4, #25]
   3ce34:	cmp	r2, #0
   3ce38:	bne	3cf18 <flatcc_json_printer_int16_vector_field@@Base+0x29c>
   3ce3c:	mov	r2, #93	; 0x5d
   3ce40:	str	r3, [r4, #20]
   3ce44:	strb	r2, [r0]
   3ce48:	ldrd	r4, [sp]
   3ce4c:	ldrd	r6, [sp, #8]
   3ce50:	ldrd	r8, [sp, #16]
   3ce54:	ldr	sl, [sp, #24]
   3ce58:	add	sp, sp, #28
   3ce5c:	pop	{pc}		; (ldr pc, [sp], #4)
   3ce60:	add	r2, r1, #1
   3ce64:	mov	r3, #10
   3ce68:	mov	r0, r4
   3ce6c:	str	r2, [r4, #20]
   3ce70:	strb	r3, [r1]
   3ce74:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3ce78:	ldr	r1, [r4, #20]
   3ce7c:	b	3cd5c <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   3ce80:	uxth	r0, r2
   3ce84:	strb	ip, [r3], #1
   3ce88:	mov	r1, r3
   3ce8c:	bl	33600 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3ce90:	ldr	r3, [r4, #20]
   3ce94:	add	r0, r0, #1
   3ce98:	sub	r5, r5, #1
   3ce9c:	cmn	r5, #1
   3cea0:	add	r6, r6, #2
   3cea4:	add	r0, r3, r0
   3cea8:	str	r0, [r4, #20]
   3ceac:	bne	3cdac <flatcc_json_printer_int16_vector_field@@Base+0x130>
   3ceb0:	b	3ce2c <flatcc_json_printer_int16_vector_field@@Base+0x1b0>
   3ceb4:	ldr	r3, [r4, #20]
   3ceb8:	mov	r1, #32
   3cebc:	mov	r0, r4
   3cec0:	add	r2, r3, #1
   3cec4:	str	r2, [r4, #20]
   3cec8:	strb	r8, [r3]
   3cecc:	ldrb	r2, [r4, #25]
   3ced0:	ldr	lr, [r4, #16]
   3ced4:	ldr	r9, [r4, #32]
   3ced8:	ldr	r3, [r4, #20]
   3cedc:	mul	r9, r9, r2
   3cee0:	add	ip, r3, r9
   3cee4:	mov	r2, r9
   3cee8:	cmp	lr, ip
   3ceec:	bcs	3cf00 <flatcc_json_printer_int16_vector_field@@Base+0x284>
   3cef0:	mov	r1, r9
   3cef4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3cef8:	ldr	r2, [r4, #20]
   3cefc:	b	3cde4 <flatcc_json_printer_int16_vector_field@@Base+0x168>
   3cf00:	mov	r0, r3
   3cf04:	bl	1459c <memset@plt>
   3cf08:	ldr	r2, [r4, #20]
   3cf0c:	add	r2, r2, r9
   3cf10:	str	r2, [r4, #20]
   3cf14:	b	3cde4 <flatcc_json_printer_int16_vector_field@@Base+0x168>
   3cf18:	mov	r2, #10
   3cf1c:	str	r3, [r4, #20]
   3cf20:	strb	r2, [r0]
   3cf24:	ldrb	r5, [r4, #25]
   3cf28:	ldr	r3, [r4, #32]
   3cf2c:	ldr	r2, [r4, #16]
   3cf30:	ldr	r0, [r4, #20]
   3cf34:	sub	r3, r3, #1
   3cf38:	mul	r5, r3, r5
   3cf3c:	str	r3, [r4, #32]
   3cf40:	add	r3, r0, r5
   3cf44:	cmp	r2, r3
   3cf48:	bcs	3cf64 <flatcc_json_printer_int16_vector_field@@Base+0x2e8>
   3cf4c:	mov	r0, r4
   3cf50:	mov	r1, r5
   3cf54:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3cf58:	ldr	r0, [r4, #20]
   3cf5c:	add	r3, r0, #1
   3cf60:	b	3ce3c <flatcc_json_printer_int16_vector_field@@Base+0x1c0>
   3cf64:	mov	r2, r5
   3cf68:	mov	r1, #32
   3cf6c:	bl	1459c <memset@plt>
   3cf70:	ldr	r0, [r4, #20]
   3cf74:	add	r0, r0, r5
   3cf78:	add	r3, r0, #1
   3cf7c:	b	3ce3c <flatcc_json_printer_int16_vector_field@@Base+0x1c0>

0003cf80 <flatcc_json_printer_int32_vector_field@@Base>:
   3cf80:	ldr	ip, [r1, #8]
   3cf84:	add	r2, r2, #2
   3cf88:	lsl	r2, r2, #1
   3cf8c:	cmp	ip, r2
   3cf90:	bxle	lr
   3cf94:	ldr	ip, [r1, #4]
   3cf98:	ldrh	r2, [ip, r2]
   3cf9c:	cmp	r2, #0
   3cfa0:	bxeq	lr
   3cfa4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cfa8:	ldr	ip, [r1]
   3cfac:	strd	r6, [sp, #8]
   3cfb0:	str	lr, [sp, #28]
   3cfb4:	strd	r8, [sp, #16]
   3cfb8:	str	sl, [sp, #24]
   3cfbc:	adds	lr, ip, r2
   3cfc0:	beq	3d13c <flatcc_json_printer_int32_vector_field@@Base+0x1bc>
   3cfc4:	ldr	r4, [r1, #16]
   3cfc8:	add	r5, r4, #1
   3cfcc:	cmp	r4, #0
   3cfd0:	str	r5, [r1, #16]
   3cfd4:	beq	3cfec <flatcc_json_printer_int32_vector_field@@Base+0x6c>
   3cfd8:	ldr	r1, [r0, #20]
   3cfdc:	mov	r4, #44	; 0x2c
   3cfe0:	add	r5, r1, #1
   3cfe4:	str	r5, [r0, #20]
   3cfe8:	strb	r4, [r1]
   3cfec:	mov	r1, r3
   3cff0:	ldr	r3, [ip, r2]
   3cff4:	mov	r4, r0
   3cff8:	ldr	r2, [sp, #32]
   3cffc:	add	r6, lr, r3
   3d000:	ldr	r5, [lr, r3]
   3d004:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3d008:	ldr	r2, [r4, #20]
   3d00c:	mov	r1, #91	; 0x5b
   3d010:	ldr	r3, [r4, #32]
   3d014:	cmp	r5, #0
   3d018:	add	r0, r2, #1
   3d01c:	add	r3, r3, #1
   3d020:	str	r0, [r4, #20]
   3d024:	str	r3, [r4, #32]
   3d028:	strb	r1, [r2]
   3d02c:	beq	3d11c <flatcc_json_printer_int32_vector_field@@Base+0x19c>
   3d030:	ldrb	r3, [r4, #25]
   3d034:	ldr	r1, [r4, #20]
   3d038:	cmp	r3, #0
   3d03c:	bne	3d154 <flatcc_json_printer_int32_vector_field@@Base+0x1d4>
   3d040:	ldr	r2, [r4, #16]
   3d044:	cmp	r2, r1
   3d048:	bhi	3d060 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   3d04c:	mov	r1, r3
   3d050:	mov	r0, r4
   3d054:	ldr	r3, [r4, #44]	; 0x2c
   3d058:	blx	r3
   3d05c:	ldr	r1, [r4, #20]
   3d060:	ldr	r0, [r6, #4]
   3d064:	cmp	r0, #0
   3d068:	lsr	r7, r0, #31
   3d06c:	bge	3d07c <flatcc_json_printer_int32_vector_field@@Base+0xfc>
   3d070:	mov	r3, #45	; 0x2d
   3d074:	rsb	r0, r0, #0
   3d078:	strb	r3, [r1], #1
   3d07c:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3d080:	ldr	r3, [r4, #20]
   3d084:	add	r0, r7, r0
   3d088:	cmp	r5, #1
   3d08c:	add	r6, r6, #8
   3d090:	sub	r5, r5, #2
   3d094:	add	r0, r3, r0
   3d098:	str	r0, [r4, #20]
   3d09c:	beq	3d120 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   3d0a0:	mov	r7, #44	; 0x2c
   3d0a4:	mov	r8, #10
   3d0a8:	add	r3, r0, #1
   3d0ac:	str	r3, [r4, #20]
   3d0b0:	strb	r7, [r0]
   3d0b4:	ldrb	r1, [r4, #25]
   3d0b8:	cmp	r1, #0
   3d0bc:	bne	3d1a8 <flatcc_json_printer_int32_vector_field@@Base+0x228>
   3d0c0:	ldr	r3, [r4, #16]
   3d0c4:	mov	r0, r4
   3d0c8:	ldr	r2, [r4, #20]
   3d0cc:	cmp	r2, r3
   3d0d0:	bcc	3d0e0 <flatcc_json_printer_int32_vector_field@@Base+0x160>
   3d0d4:	ldr	r3, [r4, #44]	; 0x2c
   3d0d8:	blx	r3
   3d0dc:	ldr	r2, [r4, #20]
   3d0e0:	mov	lr, #45	; 0x2d
   3d0e4:	mov	ip, r2
   3d0e8:	ldr	r3, [r6]
   3d0ec:	mov	r1, r2
   3d0f0:	subs	r0, r3, #0
   3d0f4:	blt	3d174 <flatcc_json_printer_int32_vector_field@@Base+0x1f4>
   3d0f8:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3d0fc:	ldr	r3, [r4, #20]
   3d100:	sub	r5, r5, #1
   3d104:	add	r6, r6, #4
   3d108:	cmn	r5, #1
   3d10c:	add	r0, r3, r0
   3d110:	str	r0, [r4, #20]
   3d114:	bne	3d0a8 <flatcc_json_printer_int32_vector_field@@Base+0x128>
   3d118:	b	3d120 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   3d11c:	ldr	r0, [r4, #20]
   3d120:	add	r3, r0, #1
   3d124:	ldrb	r2, [r4, #25]
   3d128:	cmp	r2, #0
   3d12c:	bne	3d20c <flatcc_json_printer_int32_vector_field@@Base+0x28c>
   3d130:	mov	r2, #93	; 0x5d
   3d134:	str	r3, [r4, #20]
   3d138:	strb	r2, [r0]
   3d13c:	ldrd	r4, [sp]
   3d140:	ldrd	r6, [sp, #8]
   3d144:	ldrd	r8, [sp, #16]
   3d148:	ldr	sl, [sp, #24]
   3d14c:	add	sp, sp, #28
   3d150:	pop	{pc}		; (ldr pc, [sp], #4)
   3d154:	add	r2, r1, #1
   3d158:	mov	r3, #10
   3d15c:	mov	r0, r4
   3d160:	str	r2, [r4, #20]
   3d164:	strb	r3, [r1]
   3d168:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3d16c:	ldr	r1, [r4, #20]
   3d170:	b	3d060 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   3d174:	rsb	r0, r3, #0
   3d178:	strb	lr, [ip], #1
   3d17c:	mov	r1, ip
   3d180:	bl	33758 <flatcc_json_parser_struct_as_root@@Base+0x238>
   3d184:	ldr	r3, [r4, #20]
   3d188:	add	r0, r0, #1
   3d18c:	sub	r5, r5, #1
   3d190:	cmn	r5, #1
   3d194:	add	r6, r6, #4
   3d198:	add	r0, r3, r0
   3d19c:	str	r0, [r4, #20]
   3d1a0:	bne	3d0a8 <flatcc_json_printer_int32_vector_field@@Base+0x128>
   3d1a4:	b	3d120 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   3d1a8:	ldr	r3, [r4, #20]
   3d1ac:	mov	r1, #32
   3d1b0:	mov	r0, r4
   3d1b4:	add	r2, r3, #1
   3d1b8:	str	r2, [r4, #20]
   3d1bc:	strb	r8, [r3]
   3d1c0:	ldrb	r2, [r4, #25]
   3d1c4:	ldr	lr, [r4, #16]
   3d1c8:	ldr	r9, [r4, #32]
   3d1cc:	ldr	r3, [r4, #20]
   3d1d0:	mul	r9, r9, r2
   3d1d4:	add	ip, r3, r9
   3d1d8:	mov	r2, r9
   3d1dc:	cmp	lr, ip
   3d1e0:	bcs	3d1f4 <flatcc_json_printer_int32_vector_field@@Base+0x274>
   3d1e4:	mov	r1, r9
   3d1e8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3d1ec:	ldr	r2, [r4, #20]
   3d1f0:	b	3d0e0 <flatcc_json_printer_int32_vector_field@@Base+0x160>
   3d1f4:	mov	r0, r3
   3d1f8:	bl	1459c <memset@plt>
   3d1fc:	ldr	r2, [r4, #20]
   3d200:	add	r2, r2, r9
   3d204:	str	r2, [r4, #20]
   3d208:	b	3d0e0 <flatcc_json_printer_int32_vector_field@@Base+0x160>
   3d20c:	mov	r2, #10
   3d210:	str	r3, [r4, #20]
   3d214:	strb	r2, [r0]
   3d218:	ldrb	r5, [r4, #25]
   3d21c:	ldr	r3, [r4, #32]
   3d220:	ldr	r2, [r4, #16]
   3d224:	ldr	r0, [r4, #20]
   3d228:	sub	r3, r3, #1
   3d22c:	mul	r5, r3, r5
   3d230:	str	r3, [r4, #32]
   3d234:	add	r3, r0, r5
   3d238:	cmp	r2, r3
   3d23c:	bcs	3d258 <flatcc_json_printer_int32_vector_field@@Base+0x2d8>
   3d240:	mov	r0, r4
   3d244:	mov	r1, r5
   3d248:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3d24c:	ldr	r0, [r4, #20]
   3d250:	add	r3, r0, #1
   3d254:	b	3d130 <flatcc_json_printer_int32_vector_field@@Base+0x1b0>
   3d258:	mov	r2, r5
   3d25c:	mov	r1, #32
   3d260:	bl	1459c <memset@plt>
   3d264:	ldr	r0, [r4, #20]
   3d268:	add	r0, r0, r5
   3d26c:	add	r3, r0, #1
   3d270:	b	3d130 <flatcc_json_printer_int32_vector_field@@Base+0x1b0>

0003d274 <flatcc_json_printer_int64_vector_field@@Base>:
   3d274:	ldr	ip, [r1, #8]
   3d278:	add	r2, r2, #2
   3d27c:	lsl	r2, r2, #1
   3d280:	cmp	ip, r2
   3d284:	bxle	lr
   3d288:	ldr	ip, [r1, #4]
   3d28c:	ldrh	r2, [ip, r2]
   3d290:	cmp	r2, #0
   3d294:	bxeq	lr
   3d298:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d29c:	ldr	ip, [r1]
   3d2a0:	strd	r6, [sp, #8]
   3d2a4:	str	lr, [sp, #28]
   3d2a8:	strd	r8, [sp, #16]
   3d2ac:	str	sl, [sp, #24]
   3d2b0:	adds	lr, ip, r2
   3d2b4:	beq	3d43c <flatcc_json_printer_int64_vector_field@@Base+0x1c8>
   3d2b8:	ldr	r4, [r1, #16]
   3d2bc:	add	r5, r4, #1
   3d2c0:	cmp	r4, #0
   3d2c4:	str	r5, [r1, #16]
   3d2c8:	beq	3d2e0 <flatcc_json_printer_int64_vector_field@@Base+0x6c>
   3d2cc:	ldr	r1, [r0, #20]
   3d2d0:	mov	r4, #44	; 0x2c
   3d2d4:	add	r5, r1, #1
   3d2d8:	str	r5, [r0, #20]
   3d2dc:	strb	r4, [r1]
   3d2e0:	mov	r1, r3
   3d2e4:	ldr	r3, [ip, r2]
   3d2e8:	mov	r4, r0
   3d2ec:	ldr	r2, [sp, #32]
   3d2f0:	add	r8, lr, r3
   3d2f4:	ldr	r5, [lr, r3]
   3d2f8:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3d2fc:	ldr	r2, [r4, #20]
   3d300:	mov	r1, #91	; 0x5b
   3d304:	ldr	r3, [r4, #32]
   3d308:	cmp	r5, #0
   3d30c:	add	r0, r2, #1
   3d310:	add	r3, r3, #1
   3d314:	str	r0, [r4, #20]
   3d318:	str	r3, [r4, #32]
   3d31c:	strb	r1, [r2]
   3d320:	beq	3d41c <flatcc_json_printer_int64_vector_field@@Base+0x1a8>
   3d324:	ldrb	r1, [r4, #25]
   3d328:	ldr	r2, [r4, #20]
   3d32c:	cmp	r1, #0
   3d330:	bne	3d454 <flatcc_json_printer_int64_vector_field@@Base+0x1e0>
   3d334:	ldr	r3, [r4, #16]
   3d338:	cmp	r3, r2
   3d33c:	bhi	3d350 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   3d340:	mov	r0, r4
   3d344:	ldr	r3, [r4, #44]	; 0x2c
   3d348:	blx	r3
   3d34c:	ldr	r2, [r4, #20]
   3d350:	ldrd	r0, [r8, #4]
   3d354:	cmp	r0, #0
   3d358:	lsr	r6, r1, #31
   3d35c:	sbcs	r3, r1, #0
   3d360:	bge	3d374 <flatcc_json_printer_int64_vector_field@@Base+0x100>
   3d364:	rsbs	r0, r0, #0
   3d368:	mov	r3, #45	; 0x2d
   3d36c:	rsc	r1, r1, #0
   3d370:	strb	r3, [r2], #1
   3d374:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3d378:	ldr	r3, [r4, #20]
   3d37c:	add	r0, r6, r0
   3d380:	cmp	r5, #1
   3d384:	add	r8, r8, #12
   3d388:	sub	r5, r5, #2
   3d38c:	add	r0, r3, r0
   3d390:	str	r0, [r4, #20]
   3d394:	beq	3d420 <flatcc_json_printer_int64_vector_field@@Base+0x1ac>
   3d398:	mov	r9, #44	; 0x2c
   3d39c:	mov	sl, #10
   3d3a0:	add	r3, r0, #1
   3d3a4:	str	r3, [r4, #20]
   3d3a8:	strb	r9, [r0]
   3d3ac:	ldrb	r1, [r4, #25]
   3d3b0:	cmp	r1, #0
   3d3b4:	bne	3d4ac <flatcc_json_printer_int64_vector_field@@Base+0x238>
   3d3b8:	ldr	r3, [r4, #16]
   3d3bc:	mov	r0, r4
   3d3c0:	ldr	r2, [r4, #20]
   3d3c4:	cmp	r2, r3
   3d3c8:	bcc	3d3d8 <flatcc_json_printer_int64_vector_field@@Base+0x164>
   3d3cc:	ldr	r3, [r4, #44]	; 0x2c
   3d3d0:	blx	r3
   3d3d4:	ldr	r2, [r4, #20]
   3d3d8:	mov	ip, #45	; 0x2d
   3d3dc:	mov	r3, r2
   3d3e0:	ldrd	r6, [r8]
   3d3e4:	cmp	r6, #0
   3d3e8:	mov	r0, r6
   3d3ec:	sbcs	lr, r7, #0
   3d3f0:	mov	r1, r7
   3d3f4:	blt	3d474 <flatcc_json_printer_int64_vector_field@@Base+0x200>
   3d3f8:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3d3fc:	ldr	r3, [r4, #20]
   3d400:	sub	r5, r5, #1
   3d404:	add	r8, r8, #8
   3d408:	cmn	r5, #1
   3d40c:	add	r0, r3, r0
   3d410:	str	r0, [r4, #20]
   3d414:	bne	3d3a0 <flatcc_json_printer_int64_vector_field@@Base+0x12c>
   3d418:	b	3d420 <flatcc_json_printer_int64_vector_field@@Base+0x1ac>
   3d41c:	ldr	r0, [r4, #20]
   3d420:	add	r3, r0, #1
   3d424:	ldrb	r2, [r4, #25]
   3d428:	cmp	r2, #0
   3d42c:	bne	3d510 <flatcc_json_printer_int64_vector_field@@Base+0x29c>
   3d430:	mov	r2, #93	; 0x5d
   3d434:	str	r3, [r4, #20]
   3d438:	strb	r2, [r0]
   3d43c:	ldrd	r4, [sp]
   3d440:	ldrd	r6, [sp, #8]
   3d444:	ldrd	r8, [sp, #16]
   3d448:	ldr	sl, [sp, #24]
   3d44c:	add	sp, sp, #28
   3d450:	pop	{pc}		; (ldr pc, [sp], #4)
   3d454:	add	r1, r2, #1
   3d458:	mov	r3, #10
   3d45c:	mov	r0, r4
   3d460:	str	r1, [r4, #20]
   3d464:	strb	r3, [r2]
   3d468:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3d46c:	ldr	r2, [r4, #20]
   3d470:	b	3d350 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   3d474:	rsbs	r0, r6, #0
   3d478:	strb	ip, [r3], #1
   3d47c:	mov	r2, r3
   3d480:	rsc	r1, r7, #0
   3d484:	sub	r5, r5, #1
   3d488:	bl	33a6c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   3d48c:	ldr	r3, [r4, #20]
   3d490:	add	r0, r0, #1
   3d494:	cmn	r5, #1
   3d498:	add	r8, r8, #8
   3d49c:	add	r0, r3, r0
   3d4a0:	str	r0, [r4, #20]
   3d4a4:	bne	3d3a0 <flatcc_json_printer_int64_vector_field@@Base+0x12c>
   3d4a8:	b	3d420 <flatcc_json_printer_int64_vector_field@@Base+0x1ac>
   3d4ac:	ldr	r3, [r4, #20]
   3d4b0:	mov	r1, #32
   3d4b4:	mov	r0, r4
   3d4b8:	add	r2, r3, #1
   3d4bc:	str	r2, [r4, #20]
   3d4c0:	strb	sl, [r3]
   3d4c4:	ldrb	r2, [r4, #25]
   3d4c8:	ldr	lr, [r4, #16]
   3d4cc:	ldr	r6, [r4, #32]
   3d4d0:	ldr	r3, [r4, #20]
   3d4d4:	mul	r6, r6, r2
   3d4d8:	add	ip, r3, r6
   3d4dc:	mov	r2, r6
   3d4e0:	cmp	lr, ip
   3d4e4:	bcs	3d4f8 <flatcc_json_printer_int64_vector_field@@Base+0x284>
   3d4e8:	mov	r1, r6
   3d4ec:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3d4f0:	ldr	r2, [r4, #20]
   3d4f4:	b	3d3d8 <flatcc_json_printer_int64_vector_field@@Base+0x164>
   3d4f8:	mov	r0, r3
   3d4fc:	bl	1459c <memset@plt>
   3d500:	ldr	r2, [r4, #20]
   3d504:	add	r2, r2, r6
   3d508:	str	r2, [r4, #20]
   3d50c:	b	3d3d8 <flatcc_json_printer_int64_vector_field@@Base+0x164>
   3d510:	mov	r2, #10
   3d514:	str	r3, [r4, #20]
   3d518:	strb	r2, [r0]
   3d51c:	ldrb	r5, [r4, #25]
   3d520:	ldr	r3, [r4, #32]
   3d524:	ldr	r2, [r4, #16]
   3d528:	ldr	r0, [r4, #20]
   3d52c:	sub	r3, r3, #1
   3d530:	mul	r5, r3, r5
   3d534:	str	r3, [r4, #32]
   3d538:	add	r3, r0, r5
   3d53c:	cmp	r2, r3
   3d540:	bcs	3d55c <flatcc_json_printer_int64_vector_field@@Base+0x2e8>
   3d544:	mov	r0, r4
   3d548:	mov	r1, r5
   3d54c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3d550:	ldr	r0, [r4, #20]
   3d554:	add	r3, r0, #1
   3d558:	b	3d430 <flatcc_json_printer_int64_vector_field@@Base+0x1bc>
   3d55c:	mov	r2, r5
   3d560:	mov	r1, #32
   3d564:	bl	1459c <memset@plt>
   3d568:	ldr	r0, [r4, #20]
   3d56c:	add	r0, r0, r5
   3d570:	add	r3, r0, #1
   3d574:	b	3d430 <flatcc_json_printer_int64_vector_field@@Base+0x1bc>

0003d578 <flatcc_json_printer_bool_vector_field@@Base>:
   3d578:	ldr	ip, [r1, #8]
   3d57c:	add	r2, r2, #2
   3d580:	lsl	r2, r2, #1
   3d584:	cmp	ip, r2
   3d588:	bxle	lr
   3d58c:	ldr	ip, [r1, #4]
   3d590:	ldrh	r2, [ip, r2]
   3d594:	cmp	r2, #0
   3d598:	bxeq	lr
   3d59c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d5a0:	ldr	ip, [r1]
   3d5a4:	strd	r6, [sp, #8]
   3d5a8:	strd	r8, [sp, #16]
   3d5ac:	str	sl, [sp, #24]
   3d5b0:	str	lr, [sp, #28]
   3d5b4:	adds	r7, ip, r2
   3d5b8:	beq	3d73c <flatcc_json_printer_bool_vector_field@@Base+0x1c4>
   3d5bc:	ldr	lr, [r1, #16]
   3d5c0:	add	r5, lr, #1
   3d5c4:	cmp	lr, #0
   3d5c8:	str	r5, [r1, #16]
   3d5cc:	beq	3d5e4 <flatcc_json_printer_bool_vector_field@@Base+0x6c>
   3d5d0:	ldr	r1, [r0, #20]
   3d5d4:	mov	lr, #44	; 0x2c
   3d5d8:	add	r4, r1, #1
   3d5dc:	str	r4, [r0, #20]
   3d5e0:	strb	lr, [r1]
   3d5e4:	mov	r1, r3
   3d5e8:	ldr	r3, [ip, r2]
   3d5ec:	mov	r4, r0
   3d5f0:	ldr	r2, [sp, #32]
   3d5f4:	add	r6, r7, r3
   3d5f8:	ldr	r8, [r7, r3]
   3d5fc:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3d600:	ldr	r2, [r4, #20]
   3d604:	mov	r1, #91	; 0x5b
   3d608:	ldr	r3, [r4, #32]
   3d60c:	cmp	r8, #0
   3d610:	add	r0, r2, #1
   3d614:	add	r3, r3, #1
   3d618:	str	r0, [r4, #20]
   3d61c:	str	r3, [r4, #32]
   3d620:	strb	r1, [r2]
   3d624:	beq	3d71c <flatcc_json_printer_bool_vector_field@@Base+0x1a4>
   3d628:	ldrb	r1, [r4, #25]
   3d62c:	ldr	r2, [r4, #20]
   3d630:	cmp	r1, #0
   3d634:	bne	3d754 <flatcc_json_printer_bool_vector_field@@Base+0x1dc>
   3d638:	ldr	r3, [r4, #16]
   3d63c:	cmp	r3, r2
   3d640:	bhi	3d654 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   3d644:	mov	r0, r4
   3d648:	ldr	r3, [r4, #44]	; 0x2c
   3d64c:	blx	r3
   3d650:	ldr	r2, [r4, #20]
   3d654:	ldrb	r3, [r6, #4]
   3d658:	cmp	r3, #0
   3d65c:	beq	3d854 <flatcc_json_printer_bool_vector_field@@Base+0x2dc>
   3d660:	ldr	ip, [pc, #556]	; 3d894 <flatcc_json_printer_bool_vector_field@@Base+0x31c>
   3d664:	movw	r3, #32560	; 0x7f30
   3d668:	movt	r3, #4
   3d66c:	mov	r1, #4
   3d670:	ldr	r0, [r3, #1768]	; 0x6e8
   3d674:	ldrb	r3, [ip, #4]
   3d678:	str	r0, [r2]
   3d67c:	strb	r3, [r2, #4]
   3d680:	ldr	r3, [r4, #20]
   3d684:	cmp	r8, #1
   3d688:	add	r5, r6, #5
   3d68c:	add	r3, r3, r1
   3d690:	str	r3, [r4, #20]
   3d694:	beq	3d720 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   3d698:	ldr	r7, [pc, #504]	; 3d898 <flatcc_json_printer_bool_vector_field@@Base+0x320>
   3d69c:	add	r2, r8, #4
   3d6a0:	mov	r8, #44	; 0x2c
   3d6a4:	add	r6, r6, r2
   3d6a8:	sub	r9, r7, #8
   3d6ac:	add	r2, r3, #1
   3d6b0:	str	r2, [r4, #20]
   3d6b4:	strb	r8, [r3]
   3d6b8:	ldrb	r1, [r4, #25]
   3d6bc:	cmp	r1, #0
   3d6c0:	bne	3d7a0 <flatcc_json_printer_bool_vector_field@@Base+0x228>
   3d6c4:	ldr	r3, [r4, #16]
   3d6c8:	mov	r0, r4
   3d6cc:	ldr	r2, [r4, #20]
   3d6d0:	cmp	r2, r3
   3d6d4:	bcc	3d6e4 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   3d6d8:	ldr	r3, [r4, #44]	; 0x2c
   3d6dc:	blx	r3
   3d6e0:	ldr	r2, [r4, #20]
   3d6e4:	ldrb	r3, [r5]
   3d6e8:	cmp	r3, #0
   3d6ec:	beq	3d774 <flatcc_json_printer_bool_vector_field@@Base+0x1fc>
   3d6f0:	ldrb	r3, [r9, #4]
   3d6f4:	add	r5, r5, #1
   3d6f8:	cmp	r6, r5
   3d6fc:	ldr	r1, [r9]
   3d700:	str	r1, [r2]
   3d704:	strb	r3, [r2, #4]
   3d708:	ldr	r3, [r4, #20]
   3d70c:	add	r3, r3, #4
   3d710:	str	r3, [r4, #20]
   3d714:	bne	3d6ac <flatcc_json_printer_bool_vector_field@@Base+0x134>
   3d718:	b	3d720 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   3d71c:	ldr	r3, [r4, #20]
   3d720:	add	r2, r3, #1
   3d724:	ldrb	r1, [r4, #25]
   3d728:	cmp	r1, #0
   3d72c:	bne	3d808 <flatcc_json_printer_bool_vector_field@@Base+0x290>
   3d730:	mov	r1, #93	; 0x5d
   3d734:	str	r2, [r4, #20]
   3d738:	strb	r1, [r3]
   3d73c:	ldrd	r4, [sp]
   3d740:	ldrd	r6, [sp, #8]
   3d744:	ldrd	r8, [sp, #16]
   3d748:	ldr	sl, [sp, #24]
   3d74c:	add	sp, sp, #28
   3d750:	pop	{pc}		; (ldr pc, [sp], #4)
   3d754:	add	r1, r2, #1
   3d758:	mov	r3, #10
   3d75c:	mov	r0, r4
   3d760:	str	r1, [r4, #20]
   3d764:	strb	r3, [r2]
   3d768:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3d76c:	ldr	r2, [r4, #20]
   3d770:	b	3d654 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   3d774:	ldrh	r3, [r7, #4]
   3d778:	add	r5, r5, #1
   3d77c:	cmp	r6, r5
   3d780:	ldr	r1, [r7]
   3d784:	str	r1, [r2]
   3d788:	strh	r3, [r2, #4]
   3d78c:	ldr	r3, [r4, #20]
   3d790:	add	r3, r3, #5
   3d794:	str	r3, [r4, #20]
   3d798:	bne	3d6ac <flatcc_json_printer_bool_vector_field@@Base+0x134>
   3d79c:	b	3d720 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   3d7a0:	ldr	r3, [r4, #20]
   3d7a4:	mov	r2, #10
   3d7a8:	mov	r1, #32
   3d7ac:	mov	r0, r4
   3d7b0:	add	ip, r3, #1
   3d7b4:	str	ip, [r4, #20]
   3d7b8:	strb	r2, [r3]
   3d7bc:	ldrb	r2, [r4, #25]
   3d7c0:	ldr	lr, [r4, #16]
   3d7c4:	ldr	sl, [r4, #32]
   3d7c8:	ldr	r3, [r4, #20]
   3d7cc:	mul	sl, sl, r2
   3d7d0:	add	ip, r3, sl
   3d7d4:	mov	r2, sl
   3d7d8:	cmp	lr, ip
   3d7dc:	bcs	3d7f0 <flatcc_json_printer_bool_vector_field@@Base+0x278>
   3d7e0:	mov	r1, sl
   3d7e4:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3d7e8:	ldr	r2, [r4, #20]
   3d7ec:	b	3d6e4 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   3d7f0:	mov	r0, r3
   3d7f4:	bl	1459c <memset@plt>
   3d7f8:	ldr	r2, [r4, #20]
   3d7fc:	add	r2, r2, sl
   3d800:	str	r2, [r4, #20]
   3d804:	b	3d6e4 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   3d808:	mov	r1, #10
   3d80c:	str	r2, [r4, #20]
   3d810:	strb	r1, [r3]
   3d814:	ldrb	r3, [r4, #25]
   3d818:	ldr	r2, [r4, #32]
   3d81c:	ldr	r1, [r4, #16]
   3d820:	ldr	r0, [r4, #20]
   3d824:	sub	r2, r2, #1
   3d828:	mul	r5, r2, r3
   3d82c:	str	r2, [r4, #32]
   3d830:	add	r3, r0, r5
   3d834:	cmp	r1, r3
   3d838:	bcs	3d878 <flatcc_json_printer_bool_vector_field@@Base+0x300>
   3d83c:	mov	r1, r5
   3d840:	mov	r0, r4
   3d844:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3d848:	ldr	r3, [r4, #20]
   3d84c:	add	r2, r3, #1
   3d850:	b	3d730 <flatcc_json_printer_bool_vector_field@@Base+0x1b8>
   3d854:	movw	r3, #32560	; 0x7f30
   3d858:	movt	r3, #4
   3d85c:	add	ip, r3, #1776	; 0x6f0
   3d860:	ldr	r0, [r3, #1776]	; 0x6f0
   3d864:	mov	r1, #5
   3d868:	ldrh	r3, [ip, #4]
   3d86c:	str	r0, [r2]
   3d870:	strh	r3, [r2, #4]
   3d874:	b	3d680 <flatcc_json_printer_bool_vector_field@@Base+0x108>
   3d878:	mov	r2, r5
   3d87c:	mov	r1, #32
   3d880:	bl	1459c <memset@plt>
   3d884:	ldr	r3, [r4, #20]
   3d888:	add	r3, r3, r5
   3d88c:	add	r2, r3, #1
   3d890:	b	3d730 <flatcc_json_printer_bool_vector_field@@Base+0x1b8>
   3d894:	andeq	r8, r4, r8, lsl r6
   3d898:	andeq	r8, r4, r0, lsr #12

0003d89c <flatcc_json_printer_float_vector_field@@Base>:
   3d89c:	ldr	ip, [r1, #8]
   3d8a0:	add	r2, r2, #2
   3d8a4:	lsl	r2, r2, #1
   3d8a8:	cmp	ip, r2
   3d8ac:	bxle	lr
   3d8b0:	ldr	ip, [r1, #4]
   3d8b4:	ldrh	r2, [ip, r2]
   3d8b8:	cmp	r2, #0
   3d8bc:	bxeq	lr
   3d8c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d8c4:	ldr	ip, [r1]
   3d8c8:	strd	r6, [sp, #8]
   3d8cc:	str	lr, [sp, #28]
   3d8d0:	strd	r8, [sp, #16]
   3d8d4:	str	sl, [sp, #24]
   3d8d8:	adds	lr, ip, r2
   3d8dc:	beq	3da7c <flatcc_json_printer_float_vector_field@@Base+0x1e0>
   3d8e0:	ldr	r4, [r1, #16]
   3d8e4:	add	r5, r4, #1
   3d8e8:	cmp	r4, #0
   3d8ec:	str	r5, [r1, #16]
   3d8f0:	beq	3d908 <flatcc_json_printer_float_vector_field@@Base+0x6c>
   3d8f4:	ldr	r1, [r0, #20]
   3d8f8:	mov	r4, #44	; 0x2c
   3d8fc:	add	r5, r1, #1
   3d900:	str	r5, [r0, #20]
   3d904:	strb	r4, [r1]
   3d908:	mov	r1, r3
   3d90c:	ldr	r3, [ip, r2]
   3d910:	mov	r4, r0
   3d914:	ldr	r2, [sp, #32]
   3d918:	add	r5, lr, r3
   3d91c:	ldr	r7, [lr, r3]
   3d920:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3d924:	ldr	r2, [r4, #20]
   3d928:	mov	r1, #91	; 0x5b
   3d92c:	ldr	r3, [r4, #32]
   3d930:	cmp	r7, #0
   3d934:	add	r0, r2, #1
   3d938:	add	r3, r3, #1
   3d93c:	str	r0, [r4, #20]
   3d940:	str	r3, [r4, #32]
   3d944:	strb	r1, [r2]
   3d948:	beq	3da5c <flatcc_json_printer_float_vector_field@@Base+0x1c0>
   3d94c:	ldrb	r1, [r4, #25]
   3d950:	ldr	r3, [r4, #20]
   3d954:	cmp	r1, #0
   3d958:	bne	3da94 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   3d95c:	ldr	r2, [r4, #16]
   3d960:	cmp	r2, r3
   3d964:	bhi	3d978 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   3d968:	mov	r0, r4
   3d96c:	ldr	r3, [r4, #44]	; 0x2c
   3d970:	blx	r3
   3d974:	ldr	r3, [r4, #20]
   3d978:	mov	r0, r3
   3d97c:	add	r6, r5, #8
   3d980:	vldr	s0, [r5, #4]
   3d984:	sub	r5, r7, #2
   3d988:	vcvt.f64.f32	d0, s0
   3d98c:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   3d990:	ldr	r3, [r4, #20]
   3d994:	cmp	r7, #1
   3d998:	add	r0, r3, r0
   3d99c:	str	r0, [r4, #20]
   3d9a0:	beq	3da60 <flatcc_json_printer_float_vector_field@@Base+0x1c4>
   3d9a4:	mov	r7, #44	; 0x2c
   3d9a8:	mov	r8, #10
   3d9ac:	b	3d9f8 <flatcc_json_printer_float_vector_field@@Base+0x15c>
   3d9b0:	ldr	r3, [r4, #16]
   3d9b4:	mov	r0, r4
   3d9b8:	ldr	r2, [r4, #20]
   3d9bc:	cmp	r2, r3
   3d9c0:	bcc	3d9d0 <flatcc_json_printer_float_vector_field@@Base+0x134>
   3d9c4:	ldr	r3, [r4, #44]	; 0x2c
   3d9c8:	blx	r3
   3d9cc:	ldr	r2, [r4, #20]
   3d9d0:	mov	r0, r2
   3d9d4:	sub	r5, r5, #1
   3d9d8:	vldmia	r6!, {s0}
   3d9dc:	vcvt.f64.f32	d0, s0
   3d9e0:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   3d9e4:	ldr	r3, [r4, #20]
   3d9e8:	cmn	r5, #1
   3d9ec:	add	r0, r3, r0
   3d9f0:	str	r0, [r4, #20]
   3d9f4:	beq	3da60 <flatcc_json_printer_float_vector_field@@Base+0x1c4>
   3d9f8:	add	r3, r0, #1
   3d9fc:	str	r3, [r4, #20]
   3da00:	strb	r7, [r0]
   3da04:	ldrb	r1, [r4, #25]
   3da08:	cmp	r1, #0
   3da0c:	beq	3d9b0 <flatcc_json_printer_float_vector_field@@Base+0x114>
   3da10:	ldr	r3, [r4, #20]
   3da14:	mov	r1, #32
   3da18:	mov	r0, r4
   3da1c:	add	r2, r3, #1
   3da20:	str	r2, [r4, #20]
   3da24:	strb	r8, [r3]
   3da28:	ldrb	r2, [r4, #25]
   3da2c:	ldr	lr, [r4, #16]
   3da30:	ldr	r9, [r4, #32]
   3da34:	ldr	r3, [r4, #20]
   3da38:	mul	r9, r9, r2
   3da3c:	add	ip, r3, r9
   3da40:	mov	r2, r9
   3da44:	cmp	lr, ip
   3da48:	bcs	3dab4 <flatcc_json_printer_float_vector_field@@Base+0x218>
   3da4c:	mov	r1, r9
   3da50:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3da54:	ldr	r2, [r4, #20]
   3da58:	b	3d9d0 <flatcc_json_printer_float_vector_field@@Base+0x134>
   3da5c:	ldr	r0, [r4, #20]
   3da60:	add	r3, r0, #1
   3da64:	ldrb	r2, [r4, #25]
   3da68:	cmp	r2, #0
   3da6c:	bne	3dacc <flatcc_json_printer_float_vector_field@@Base+0x230>
   3da70:	mov	r2, #93	; 0x5d
   3da74:	str	r3, [r4, #20]
   3da78:	strb	r2, [r0]
   3da7c:	ldrd	r4, [sp]
   3da80:	ldrd	r6, [sp, #8]
   3da84:	ldrd	r8, [sp, #16]
   3da88:	ldr	sl, [sp, #24]
   3da8c:	add	sp, sp, #28
   3da90:	pop	{pc}		; (ldr pc, [sp], #4)
   3da94:	add	r1, r3, #1
   3da98:	mov	r2, #10
   3da9c:	mov	r0, r4
   3daa0:	str	r1, [r4, #20]
   3daa4:	strb	r2, [r3]
   3daa8:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3daac:	ldr	r3, [r4, #20]
   3dab0:	b	3d978 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   3dab4:	mov	r0, r3
   3dab8:	bl	1459c <memset@plt>
   3dabc:	ldr	r2, [r4, #20]
   3dac0:	add	r2, r2, r9
   3dac4:	str	r2, [r4, #20]
   3dac8:	b	3d9d0 <flatcc_json_printer_float_vector_field@@Base+0x134>
   3dacc:	mov	r2, #10
   3dad0:	str	r3, [r4, #20]
   3dad4:	strb	r2, [r0]
   3dad8:	ldrb	r5, [r4, #25]
   3dadc:	ldr	r3, [r4, #32]
   3dae0:	ldr	r2, [r4, #16]
   3dae4:	ldr	r0, [r4, #20]
   3dae8:	sub	r3, r3, #1
   3daec:	mul	r5, r3, r5
   3daf0:	str	r3, [r4, #32]
   3daf4:	add	r3, r0, r5
   3daf8:	cmp	r2, r3
   3dafc:	bcs	3db18 <flatcc_json_printer_float_vector_field@@Base+0x27c>
   3db00:	mov	r0, r4
   3db04:	mov	r1, r5
   3db08:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3db0c:	ldr	r0, [r4, #20]
   3db10:	add	r3, r0, #1
   3db14:	b	3da70 <flatcc_json_printer_float_vector_field@@Base+0x1d4>
   3db18:	mov	r2, r5
   3db1c:	mov	r1, #32
   3db20:	bl	1459c <memset@plt>
   3db24:	ldr	r0, [r4, #20]
   3db28:	add	r0, r0, r5
   3db2c:	add	r3, r0, #1
   3db30:	b	3da70 <flatcc_json_printer_float_vector_field@@Base+0x1d4>

0003db34 <flatcc_json_printer_double_vector_field@@Base>:
   3db34:	ldr	ip, [r1, #8]
   3db38:	add	r2, r2, #2
   3db3c:	lsl	r2, r2, #1
   3db40:	cmp	ip, r2
   3db44:	bxle	lr
   3db48:	ldr	ip, [r1, #4]
   3db4c:	ldrh	r2, [ip, r2]
   3db50:	cmp	r2, #0
   3db54:	bxeq	lr
   3db58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3db5c:	ldr	ip, [r1]
   3db60:	strd	r6, [sp, #8]
   3db64:	str	lr, [sp, #28]
   3db68:	strd	r8, [sp, #16]
   3db6c:	str	sl, [sp, #24]
   3db70:	adds	lr, ip, r2
   3db74:	beq	3dd0c <flatcc_json_printer_double_vector_field@@Base+0x1d8>
   3db78:	ldr	r4, [r1, #16]
   3db7c:	add	r5, r4, #1
   3db80:	cmp	r4, #0
   3db84:	str	r5, [r1, #16]
   3db88:	beq	3dba0 <flatcc_json_printer_double_vector_field@@Base+0x6c>
   3db8c:	ldr	r1, [r0, #20]
   3db90:	mov	r4, #44	; 0x2c
   3db94:	add	r5, r1, #1
   3db98:	str	r5, [r0, #20]
   3db9c:	strb	r4, [r1]
   3dba0:	mov	r1, r3
   3dba4:	ldr	r3, [ip, r2]
   3dba8:	mov	r4, r0
   3dbac:	ldr	r2, [sp, #32]
   3dbb0:	add	r5, lr, r3
   3dbb4:	ldr	r7, [lr, r3]
   3dbb8:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3dbbc:	ldr	r2, [r4, #20]
   3dbc0:	mov	r1, #91	; 0x5b
   3dbc4:	ldr	r3, [r4, #32]
   3dbc8:	cmp	r7, #0
   3dbcc:	add	r0, r2, #1
   3dbd0:	add	r3, r3, #1
   3dbd4:	str	r0, [r4, #20]
   3dbd8:	str	r3, [r4, #32]
   3dbdc:	strb	r1, [r2]
   3dbe0:	beq	3dcec <flatcc_json_printer_double_vector_field@@Base+0x1b8>
   3dbe4:	ldrb	r1, [r4, #25]
   3dbe8:	ldr	r3, [r4, #20]
   3dbec:	cmp	r1, #0
   3dbf0:	bne	3dd24 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   3dbf4:	ldr	r2, [r4, #16]
   3dbf8:	cmp	r2, r3
   3dbfc:	bhi	3dc10 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3dc00:	mov	r0, r4
   3dc04:	ldr	r3, [r4, #44]	; 0x2c
   3dc08:	blx	r3
   3dc0c:	ldr	r3, [r4, #20]
   3dc10:	mov	r0, r3
   3dc14:	add	r6, r5, #12
   3dc18:	vldr	d0, [r5, #4]
   3dc1c:	sub	r5, r7, #2
   3dc20:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   3dc24:	ldr	r3, [r4, #20]
   3dc28:	cmp	r7, #1
   3dc2c:	add	r0, r3, r0
   3dc30:	str	r0, [r4, #20]
   3dc34:	beq	3dcf0 <flatcc_json_printer_double_vector_field@@Base+0x1bc>
   3dc38:	mov	r7, #44	; 0x2c
   3dc3c:	mov	r8, #10
   3dc40:	b	3dc88 <flatcc_json_printer_double_vector_field@@Base+0x154>
   3dc44:	ldr	r3, [r4, #16]
   3dc48:	mov	r0, r4
   3dc4c:	ldr	r2, [r4, #20]
   3dc50:	cmp	r2, r3
   3dc54:	bcc	3dc64 <flatcc_json_printer_double_vector_field@@Base+0x130>
   3dc58:	ldr	r3, [r4, #44]	; 0x2c
   3dc5c:	blx	r3
   3dc60:	ldr	r2, [r4, #20]
   3dc64:	mov	r0, r2
   3dc68:	sub	r5, r5, #1
   3dc6c:	vldmia	r6!, {d0}
   3dc70:	bl	34930 <flatcc_json_parser_struct_as_root@@Base+0x1410>
   3dc74:	ldr	r3, [r4, #20]
   3dc78:	cmn	r5, #1
   3dc7c:	add	r0, r3, r0
   3dc80:	str	r0, [r4, #20]
   3dc84:	beq	3dcf0 <flatcc_json_printer_double_vector_field@@Base+0x1bc>
   3dc88:	add	r3, r0, #1
   3dc8c:	str	r3, [r4, #20]
   3dc90:	strb	r7, [r0]
   3dc94:	ldrb	r1, [r4, #25]
   3dc98:	cmp	r1, #0
   3dc9c:	beq	3dc44 <flatcc_json_printer_double_vector_field@@Base+0x110>
   3dca0:	ldr	r3, [r4, #20]
   3dca4:	mov	r1, #32
   3dca8:	mov	r0, r4
   3dcac:	add	r2, r3, #1
   3dcb0:	str	r2, [r4, #20]
   3dcb4:	strb	r8, [r3]
   3dcb8:	ldrb	r2, [r4, #25]
   3dcbc:	ldr	lr, [r4, #16]
   3dcc0:	ldr	r9, [r4, #32]
   3dcc4:	ldr	r3, [r4, #20]
   3dcc8:	mul	r9, r9, r2
   3dccc:	add	ip, r3, r9
   3dcd0:	mov	r2, r9
   3dcd4:	cmp	lr, ip
   3dcd8:	bcs	3dd44 <flatcc_json_printer_double_vector_field@@Base+0x210>
   3dcdc:	mov	r1, r9
   3dce0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3dce4:	ldr	r2, [r4, #20]
   3dce8:	b	3dc64 <flatcc_json_printer_double_vector_field@@Base+0x130>
   3dcec:	ldr	r0, [r4, #20]
   3dcf0:	add	r3, r0, #1
   3dcf4:	ldrb	r2, [r4, #25]
   3dcf8:	cmp	r2, #0
   3dcfc:	bne	3dd5c <flatcc_json_printer_double_vector_field@@Base+0x228>
   3dd00:	mov	r2, #93	; 0x5d
   3dd04:	str	r3, [r4, #20]
   3dd08:	strb	r2, [r0]
   3dd0c:	ldrd	r4, [sp]
   3dd10:	ldrd	r6, [sp, #8]
   3dd14:	ldrd	r8, [sp, #16]
   3dd18:	ldr	sl, [sp, #24]
   3dd1c:	add	sp, sp, #28
   3dd20:	pop	{pc}		; (ldr pc, [sp], #4)
   3dd24:	add	r1, r3, #1
   3dd28:	mov	r2, #10
   3dd2c:	mov	r0, r4
   3dd30:	str	r1, [r4, #20]
   3dd34:	strb	r2, [r3]
   3dd38:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3dd3c:	ldr	r3, [r4, #20]
   3dd40:	b	3dc10 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3dd44:	mov	r0, r3
   3dd48:	bl	1459c <memset@plt>
   3dd4c:	ldr	r2, [r4, #20]
   3dd50:	add	r2, r2, r9
   3dd54:	str	r2, [r4, #20]
   3dd58:	b	3dc64 <flatcc_json_printer_double_vector_field@@Base+0x130>
   3dd5c:	mov	r2, #10
   3dd60:	str	r3, [r4, #20]
   3dd64:	strb	r2, [r0]
   3dd68:	ldrb	r5, [r4, #25]
   3dd6c:	ldr	r3, [r4, #32]
   3dd70:	ldr	r2, [r4, #16]
   3dd74:	ldr	r0, [r4, #20]
   3dd78:	sub	r3, r3, #1
   3dd7c:	mul	r5, r3, r5
   3dd80:	str	r3, [r4, #32]
   3dd84:	add	r3, r0, r5
   3dd88:	cmp	r2, r3
   3dd8c:	bcs	3dda8 <flatcc_json_printer_double_vector_field@@Base+0x274>
   3dd90:	mov	r0, r4
   3dd94:	mov	r1, r5
   3dd98:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3dd9c:	ldr	r0, [r4, #20]
   3dda0:	add	r3, r0, #1
   3dda4:	b	3dd00 <flatcc_json_printer_double_vector_field@@Base+0x1cc>
   3dda8:	mov	r2, r5
   3ddac:	mov	r1, #32
   3ddb0:	bl	1459c <memset@plt>
   3ddb4:	ldr	r0, [r4, #20]
   3ddb8:	add	r0, r0, r5
   3ddbc:	add	r3, r0, #1
   3ddc0:	b	3dd00 <flatcc_json_printer_double_vector_field@@Base+0x1cc>

0003ddc4 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   3ddc4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ddc8:	strd	r6, [sp, #8]
   3ddcc:	strd	r8, [sp, #16]
   3ddd0:	str	sl, [sp, #24]
   3ddd4:	str	lr, [sp, #28]
   3ddd8:	ldrb	r8, [r0, #27]
   3dddc:	ldr	r7, [sp, #32]
   3dde0:	ldr	r6, [sp, #36]	; 0x24
   3dde4:	cmp	r8, #0
   3dde8:	bne	3dfb4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   3ddec:	mov	r5, r3
   3ddf0:	ldr	r3, [r1, #8]
   3ddf4:	add	r2, r2, #2
   3ddf8:	lsl	r2, r2, #1
   3ddfc:	mov	lr, r1
   3de00:	cmp	r3, r2
   3de04:	ble	3df9c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3de08:	ldr	r3, [r1, #4]
   3de0c:	ldrh	r2, [r3, r2]
   3de10:	cmp	r2, #0
   3de14:	beq	3df9c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3de18:	ldr	r3, [r1]
   3de1c:	adds	ip, r3, r2
   3de20:	beq	3df9c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   3de24:	ldr	r1, [r1, #16]
   3de28:	mov	r4, r0
   3de2c:	add	r0, r1, #1
   3de30:	cmp	r1, #0
   3de34:	str	r0, [lr, #16]
   3de38:	beq	3de50 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x8c>
   3de3c:	ldr	r1, [r4, #20]
   3de40:	mov	r0, #44	; 0x2c
   3de44:	add	lr, r1, #1
   3de48:	str	lr, [r4, #20]
   3de4c:	strb	r0, [r1]
   3de50:	ldr	r3, [r3, r2]
   3de54:	mov	r1, r5
   3de58:	mov	r2, r7
   3de5c:	mov	r0, r4
   3de60:	add	r7, ip, r3
   3de64:	ldr	r8, [ip, r3]
   3de68:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3de6c:	ldr	r2, [r4, #20]
   3de70:	mov	r1, #91	; 0x5b
   3de74:	ldr	r3, [r4, #32]
   3de78:	cmp	r8, #0
   3de7c:	add	r0, r2, #1
   3de80:	add	r3, r3, #1
   3de84:	str	r0, [r4, #20]
   3de88:	str	r3, [r4, #32]
   3de8c:	strb	r1, [r2]
   3de90:	beq	3df7c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3de94:	ldrb	r1, [r4, #25]
   3de98:	ldr	r3, [r4, #20]
   3de9c:	cmp	r1, #0
   3dea0:	bne	3e034 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x270>
   3dea4:	ldr	r2, [r4, #16]
   3dea8:	cmp	r2, r3
   3deac:	bhi	3debc <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   3deb0:	mov	r0, r4
   3deb4:	ldr	r3, [r4, #44]	; 0x2c
   3deb8:	blx	r3
   3debc:	ldrb	r1, [r7, #4]
   3dec0:	mov	r0, r4
   3dec4:	add	r5, r7, #5
   3dec8:	blx	r6
   3decc:	cmp	r8, #1
   3ded0:	beq	3df7c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3ded4:	add	r3, r8, #4
   3ded8:	mov	r9, #10
   3dedc:	mov	r8, #44	; 0x2c
   3dee0:	add	r7, r7, r3
   3dee4:	b	3df18 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x154>
   3dee8:	ldr	r3, [r4, #16]
   3deec:	mov	r0, r4
   3def0:	ldr	r2, [r4, #20]
   3def4:	cmp	r2, r3
   3def8:	bcc	3df04 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3defc:	ldr	r3, [r4, #44]	; 0x2c
   3df00:	blx	r3
   3df04:	ldrb	r1, [r5], #1
   3df08:	mov	r0, r4
   3df0c:	blx	r6
   3df10:	cmp	r5, r7
   3df14:	beq	3df7c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3df18:	ldr	r3, [r4, #20]
   3df1c:	add	r2, r3, #1
   3df20:	str	r2, [r4, #20]
   3df24:	strb	r8, [r3]
   3df28:	ldrb	r1, [r4, #25]
   3df2c:	cmp	r1, #0
   3df30:	beq	3dee8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   3df34:	ldr	r3, [r4, #20]
   3df38:	mov	r1, #32
   3df3c:	mov	r0, r4
   3df40:	add	r2, r3, #1
   3df44:	str	r2, [r4, #20]
   3df48:	strb	r9, [r3]
   3df4c:	ldrb	r2, [r4, #25]
   3df50:	ldr	lr, [r4, #16]
   3df54:	ldr	sl, [r4, #32]
   3df58:	ldr	r3, [r4, #20]
   3df5c:	mul	sl, sl, r2
   3df60:	add	ip, r3, sl
   3df64:	mov	r2, sl
   3df68:	cmp	lr, ip
   3df6c:	bcs	3dfd0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20c>
   3df70:	mov	r1, sl
   3df74:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3df78:	b	3df04 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3df7c:	ldrb	r2, [r4, #25]
   3df80:	ldr	r3, [r4, #20]
   3df84:	cmp	r2, #0
   3df88:	add	r2, r3, #1
   3df8c:	bne	3dfe8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3df90:	mov	r1, #93	; 0x5d
   3df94:	str	r2, [r4, #20]
   3df98:	strb	r1, [r3]
   3df9c:	ldrd	r4, [sp]
   3dfa0:	ldrd	r6, [sp, #8]
   3dfa4:	ldrd	r8, [sp, #16]
   3dfa8:	ldr	sl, [sp, #24]
   3dfac:	add	sp, sp, #28
   3dfb0:	pop	{pc}		; (ldr pc, [sp], #4)
   3dfb4:	ldrd	r4, [sp]
   3dfb8:	ldrd	r6, [sp, #8]
   3dfbc:	ldrd	r8, [sp, #16]
   3dfc0:	ldr	sl, [sp, #24]
   3dfc4:	ldr	lr, [sp, #28]
   3dfc8:	add	sp, sp, #32
   3dfcc:	b	3bcd4 <flatcc_json_printer_uint8_vector_field@@Base>
   3dfd0:	mov	r0, r3
   3dfd4:	bl	1459c <memset@plt>
   3dfd8:	ldr	r3, [r4, #20]
   3dfdc:	add	sl, r3, sl
   3dfe0:	str	sl, [r4, #20]
   3dfe4:	b	3df04 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   3dfe8:	mov	r1, #10
   3dfec:	str	r2, [r4, #20]
   3dff0:	strb	r1, [r3]
   3dff4:	ldrb	r3, [r4, #25]
   3dff8:	ldr	r2, [r4, #32]
   3dffc:	ldr	r1, [r4, #16]
   3e000:	ldr	r0, [r4, #20]
   3e004:	sub	r2, r2, #1
   3e008:	mul	r5, r2, r3
   3e00c:	str	r2, [r4, #32]
   3e010:	add	r3, r0, r5
   3e014:	cmp	r1, r3
   3e018:	bcs	3e050 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x28c>
   3e01c:	mov	r1, r5
   3e020:	mov	r0, r4
   3e024:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e028:	ldr	r3, [r4, #20]
   3e02c:	add	r2, r3, #1
   3e030:	b	3df90 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>
   3e034:	add	r1, r3, #1
   3e038:	mov	r2, #10
   3e03c:	mov	r0, r4
   3e040:	str	r1, [r4, #20]
   3e044:	strb	r2, [r3]
   3e048:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3e04c:	b	3debc <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   3e050:	mov	r2, r5
   3e054:	mov	r1, #32
   3e058:	bl	1459c <memset@plt>
   3e05c:	ldr	r3, [r4, #20]
   3e060:	add	r3, r3, r5
   3e064:	add	r2, r3, #1
   3e068:	b	3df90 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>

0003e06c <flatcc_json_printer_utype_enum_vector_field@@Base>:
   3e06c:	b	3ddc4 <flatcc_json_printer_uint8_enum_vector_field@@Base>

0003e070 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   3e070:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e074:	strd	r6, [sp, #8]
   3e078:	strd	r8, [sp, #16]
   3e07c:	str	sl, [sp, #24]
   3e080:	str	lr, [sp, #28]
   3e084:	ldrb	r8, [r0, #27]
   3e088:	ldrd	r6, [sp, #32]
   3e08c:	cmp	r8, #0
   3e090:	bne	3e25c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1ec>
   3e094:	mov	r5, r3
   3e098:	ldr	r3, [r1, #8]
   3e09c:	add	r2, r2, #2
   3e0a0:	lsl	r2, r2, #1
   3e0a4:	mov	lr, r1
   3e0a8:	cmp	r3, r2
   3e0ac:	ble	3e244 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3e0b0:	ldr	r3, [r1, #4]
   3e0b4:	ldrh	r2, [r3, r2]
   3e0b8:	cmp	r2, #0
   3e0bc:	beq	3e244 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3e0c0:	ldr	r3, [r1]
   3e0c4:	adds	ip, r3, r2
   3e0c8:	beq	3e244 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   3e0cc:	ldr	r1, [r1, #16]
   3e0d0:	mov	r4, r0
   3e0d4:	add	r0, r1, #1
   3e0d8:	cmp	r1, #0
   3e0dc:	str	r0, [lr, #16]
   3e0e0:	beq	3e0f8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x88>
   3e0e4:	ldr	r1, [r4, #20]
   3e0e8:	mov	r0, #44	; 0x2c
   3e0ec:	add	lr, r1, #1
   3e0f0:	str	lr, [r4, #20]
   3e0f4:	strb	r0, [r1]
   3e0f8:	ldr	r3, [r3, r2]
   3e0fc:	mov	r1, r5
   3e100:	mov	r2, r6
   3e104:	mov	r0, r4
   3e108:	add	r6, ip, r3
   3e10c:	ldr	r5, [ip, r3]
   3e110:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3e114:	ldr	r2, [r4, #20]
   3e118:	mov	r1, #91	; 0x5b
   3e11c:	ldr	r3, [r4, #32]
   3e120:	cmp	r5, #0
   3e124:	add	r0, r2, #1
   3e128:	add	r3, r3, #1
   3e12c:	str	r0, [r4, #20]
   3e130:	str	r3, [r4, #32]
   3e134:	strb	r1, [r2]
   3e138:	beq	3e224 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3e13c:	ldrb	r1, [r4, #25]
   3e140:	ldr	r3, [r4, #20]
   3e144:	cmp	r1, #0
   3e148:	bne	3e2dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x26c>
   3e14c:	ldr	r2, [r4, #16]
   3e150:	cmp	r2, r3
   3e154:	bhi	3e164 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3e158:	mov	r0, r4
   3e15c:	ldr	r3, [r4, #44]	; 0x2c
   3e160:	blx	r3
   3e164:	ldrh	r1, [r6, #4]
   3e168:	mov	r0, r4
   3e16c:	add	r6, r6, #6
   3e170:	blx	r7
   3e174:	cmp	r5, #1
   3e178:	sub	r5, r5, #2
   3e17c:	beq	3e224 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3e180:	mov	r8, #44	; 0x2c
   3e184:	mov	r9, #10
   3e188:	b	3e1c0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
   3e18c:	ldr	r3, [r4, #16]
   3e190:	mov	r0, r4
   3e194:	ldr	r2, [r4, #20]
   3e198:	cmp	r2, r3
   3e19c:	bcc	3e1a8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3e1a0:	ldr	r3, [r4, #44]	; 0x2c
   3e1a4:	blx	r3
   3e1a8:	sub	r5, r5, #1
   3e1ac:	ldrh	r1, [r6], #2
   3e1b0:	mov	r0, r4
   3e1b4:	blx	r7
   3e1b8:	cmn	r5, #1
   3e1bc:	beq	3e224 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   3e1c0:	ldr	r3, [r4, #20]
   3e1c4:	add	r2, r3, #1
   3e1c8:	str	r2, [r4, #20]
   3e1cc:	strb	r8, [r3]
   3e1d0:	ldrb	r1, [r4, #25]
   3e1d4:	cmp	r1, #0
   3e1d8:	beq	3e18c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3e1dc:	ldr	r3, [r4, #20]
   3e1e0:	mov	r1, #32
   3e1e4:	mov	r0, r4
   3e1e8:	add	r2, r3, #1
   3e1ec:	str	r2, [r4, #20]
   3e1f0:	strb	r9, [r3]
   3e1f4:	ldrb	r2, [r4, #25]
   3e1f8:	ldr	lr, [r4, #16]
   3e1fc:	ldr	sl, [r4, #32]
   3e200:	ldr	r3, [r4, #20]
   3e204:	mul	sl, sl, r2
   3e208:	add	ip, r3, sl
   3e20c:	mov	r2, sl
   3e210:	cmp	lr, ip
   3e214:	bcs	3e278 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x208>
   3e218:	mov	r1, sl
   3e21c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e220:	b	3e1a8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3e224:	ldrb	r2, [r4, #25]
   3e228:	ldr	r3, [r4, #20]
   3e22c:	cmp	r2, #0
   3e230:	add	r2, r3, #1
   3e234:	bne	3e290 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x220>
   3e238:	mov	r1, #93	; 0x5d
   3e23c:	str	r2, [r4, #20]
   3e240:	strb	r1, [r3]
   3e244:	ldrd	r4, [sp]
   3e248:	ldrd	r6, [sp, #8]
   3e24c:	ldrd	r8, [sp, #16]
   3e250:	ldr	sl, [sp, #24]
   3e254:	add	sp, sp, #28
   3e258:	pop	{pc}		; (ldr pc, [sp], #4)
   3e25c:	ldrd	r4, [sp]
   3e260:	ldrd	r6, [sp, #8]
   3e264:	ldrd	r8, [sp, #16]
   3e268:	ldr	sl, [sp, #24]
   3e26c:	ldr	lr, [sp, #28]
   3e270:	add	sp, sp, #32
   3e274:	b	3c004 <flatcc_json_printer_uint16_vector_field@@Base>
   3e278:	mov	r0, r3
   3e27c:	bl	1459c <memset@plt>
   3e280:	ldr	r3, [r4, #20]
   3e284:	add	sl, r3, sl
   3e288:	str	sl, [r4, #20]
   3e28c:	b	3e1a8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3e290:	mov	r1, #10
   3e294:	str	r2, [r4, #20]
   3e298:	strb	r1, [r3]
   3e29c:	ldrb	r3, [r4, #25]
   3e2a0:	ldr	r2, [r4, #32]
   3e2a4:	ldr	r1, [r4, #16]
   3e2a8:	ldr	r0, [r4, #20]
   3e2ac:	sub	r2, r2, #1
   3e2b0:	mul	r5, r2, r3
   3e2b4:	str	r2, [r4, #32]
   3e2b8:	add	r3, r0, r5
   3e2bc:	cmp	r1, r3
   3e2c0:	bcs	3e2f8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x288>
   3e2c4:	mov	r1, r5
   3e2c8:	mov	r0, r4
   3e2cc:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e2d0:	ldr	r3, [r4, #20]
   3e2d4:	add	r2, r3, #1
   3e2d8:	b	3e238 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>
   3e2dc:	add	r1, r3, #1
   3e2e0:	mov	r2, #10
   3e2e4:	mov	r0, r4
   3e2e8:	str	r1, [r4, #20]
   3e2ec:	strb	r2, [r3]
   3e2f0:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3e2f4:	b	3e164 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3e2f8:	mov	r2, r5
   3e2fc:	mov	r1, #32
   3e300:	bl	1459c <memset@plt>
   3e304:	ldr	r3, [r4, #20]
   3e308:	add	r3, r3, r5
   3e30c:	add	r2, r3, #1
   3e310:	b	3e238 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>

0003e314 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3e314:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e318:	strd	r6, [sp, #8]
   3e31c:	strd	r8, [sp, #16]
   3e320:	str	sl, [sp, #24]
   3e324:	str	lr, [sp, #28]
   3e328:	ldrb	r8, [r0, #27]
   3e32c:	ldrd	r6, [sp, #32]
   3e330:	cmp	r8, #0
   3e334:	bne	3e500 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1ec>
   3e338:	mov	r5, r3
   3e33c:	ldr	r3, [r1, #8]
   3e340:	add	r2, r2, #2
   3e344:	lsl	r2, r2, #1
   3e348:	mov	lr, r1
   3e34c:	cmp	r3, r2
   3e350:	ble	3e4e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3e354:	ldr	r3, [r1, #4]
   3e358:	ldrh	r2, [r3, r2]
   3e35c:	cmp	r2, #0
   3e360:	beq	3e4e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3e364:	ldr	r3, [r1]
   3e368:	adds	ip, r3, r2
   3e36c:	beq	3e4e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3e370:	ldr	r1, [r1, #16]
   3e374:	mov	r4, r0
   3e378:	add	r0, r1, #1
   3e37c:	cmp	r1, #0
   3e380:	str	r0, [lr, #16]
   3e384:	beq	3e39c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x88>
   3e388:	ldr	r1, [r4, #20]
   3e38c:	mov	r0, #44	; 0x2c
   3e390:	add	lr, r1, #1
   3e394:	str	lr, [r4, #20]
   3e398:	strb	r0, [r1]
   3e39c:	ldr	r3, [r3, r2]
   3e3a0:	mov	r1, r5
   3e3a4:	mov	r2, r6
   3e3a8:	mov	r0, r4
   3e3ac:	add	r6, ip, r3
   3e3b0:	ldr	r5, [ip, r3]
   3e3b4:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3e3b8:	ldr	r2, [r4, #20]
   3e3bc:	mov	r1, #91	; 0x5b
   3e3c0:	ldr	r3, [r4, #32]
   3e3c4:	cmp	r5, #0
   3e3c8:	add	r0, r2, #1
   3e3cc:	add	r3, r3, #1
   3e3d0:	str	r0, [r4, #20]
   3e3d4:	str	r3, [r4, #32]
   3e3d8:	strb	r1, [r2]
   3e3dc:	beq	3e4c8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3e3e0:	ldrb	r1, [r4, #25]
   3e3e4:	ldr	r3, [r4, #20]
   3e3e8:	cmp	r1, #0
   3e3ec:	bne	3e580 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x26c>
   3e3f0:	ldr	r2, [r4, #16]
   3e3f4:	cmp	r2, r3
   3e3f8:	bhi	3e408 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3e3fc:	mov	r0, r4
   3e400:	ldr	r3, [r4, #44]	; 0x2c
   3e404:	blx	r3
   3e408:	mov	r0, r4
   3e40c:	ldr	r1, [r6, #4]
   3e410:	add	r6, r6, #8
   3e414:	blx	r7
   3e418:	cmp	r5, #1
   3e41c:	sub	r5, r5, #2
   3e420:	beq	3e4c8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3e424:	mov	r8, #44	; 0x2c
   3e428:	mov	r9, #10
   3e42c:	b	3e464 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x150>
   3e430:	ldr	r3, [r4, #16]
   3e434:	mov	r0, r4
   3e438:	ldr	r2, [r4, #20]
   3e43c:	cmp	r2, r3
   3e440:	bcc	3e44c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3e444:	ldr	r3, [r4, #44]	; 0x2c
   3e448:	blx	r3
   3e44c:	sub	r5, r5, #1
   3e450:	mov	r0, r4
   3e454:	ldr	r1, [r6], #4
   3e458:	blx	r7
   3e45c:	cmn	r5, #1
   3e460:	beq	3e4c8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3e464:	ldr	r3, [r4, #20]
   3e468:	add	r2, r3, #1
   3e46c:	str	r2, [r4, #20]
   3e470:	strb	r8, [r3]
   3e474:	ldrb	r1, [r4, #25]
   3e478:	cmp	r1, #0
   3e47c:	beq	3e430 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3e480:	ldr	r3, [r4, #20]
   3e484:	mov	r1, #32
   3e488:	mov	r0, r4
   3e48c:	add	r2, r3, #1
   3e490:	str	r2, [r4, #20]
   3e494:	strb	r9, [r3]
   3e498:	ldrb	r2, [r4, #25]
   3e49c:	ldr	lr, [r4, #16]
   3e4a0:	ldr	sl, [r4, #32]
   3e4a4:	ldr	r3, [r4, #20]
   3e4a8:	mul	sl, sl, r2
   3e4ac:	add	ip, r3, sl
   3e4b0:	mov	r2, sl
   3e4b4:	cmp	lr, ip
   3e4b8:	bcs	3e51c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x208>
   3e4bc:	mov	r1, sl
   3e4c0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e4c4:	b	3e44c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3e4c8:	ldrb	r2, [r4, #25]
   3e4cc:	ldr	r3, [r4, #20]
   3e4d0:	cmp	r2, #0
   3e4d4:	add	r2, r3, #1
   3e4d8:	bne	3e534 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x220>
   3e4dc:	mov	r1, #93	; 0x5d
   3e4e0:	str	r2, [r4, #20]
   3e4e4:	strb	r1, [r3]
   3e4e8:	ldrd	r4, [sp]
   3e4ec:	ldrd	r6, [sp, #8]
   3e4f0:	ldrd	r8, [sp, #16]
   3e4f4:	ldr	sl, [sp, #24]
   3e4f8:	add	sp, sp, #28
   3e4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   3e500:	ldrd	r4, [sp]
   3e504:	ldrd	r6, [sp, #8]
   3e508:	ldrd	r8, [sp, #16]
   3e50c:	ldr	sl, [sp, #24]
   3e510:	ldr	lr, [sp, #28]
   3e514:	add	sp, sp, #32
   3e518:	b	3c3f8 <flatcc_json_printer_uint32_vector_field@@Base>
   3e51c:	mov	r0, r3
   3e520:	bl	1459c <memset@plt>
   3e524:	ldr	r3, [r4, #20]
   3e528:	add	sl, r3, sl
   3e52c:	str	sl, [r4, #20]
   3e530:	b	3e44c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3e534:	mov	r1, #10
   3e538:	str	r2, [r4, #20]
   3e53c:	strb	r1, [r3]
   3e540:	ldrb	r3, [r4, #25]
   3e544:	ldr	r2, [r4, #32]
   3e548:	ldr	r1, [r4, #16]
   3e54c:	ldr	r0, [r4, #20]
   3e550:	sub	r2, r2, #1
   3e554:	mul	r5, r2, r3
   3e558:	str	r2, [r4, #32]
   3e55c:	add	r3, r0, r5
   3e560:	cmp	r1, r3
   3e564:	bcs	3e59c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x288>
   3e568:	mov	r1, r5
   3e56c:	mov	r0, r4
   3e570:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e574:	ldr	r3, [r4, #20]
   3e578:	add	r2, r3, #1
   3e57c:	b	3e4dc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>
   3e580:	add	r1, r3, #1
   3e584:	mov	r2, #10
   3e588:	mov	r0, r4
   3e58c:	str	r1, [r4, #20]
   3e590:	strb	r2, [r3]
   3e594:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3e598:	b	3e408 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3e59c:	mov	r2, r5
   3e5a0:	mov	r1, #32
   3e5a4:	bl	1459c <memset@plt>
   3e5a8:	ldr	r3, [r4, #20]
   3e5ac:	add	r3, r3, r5
   3e5b0:	add	r2, r3, #1
   3e5b4:	b	3e4dc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>

0003e5b8 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3e5b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e5bc:	strd	r6, [sp, #8]
   3e5c0:	strd	r8, [sp, #16]
   3e5c4:	str	sl, [sp, #24]
   3e5c8:	str	lr, [sp, #28]
   3e5cc:	ldrb	r8, [r0, #27]
   3e5d0:	ldrd	r6, [sp, #32]
   3e5d4:	cmp	r8, #0
   3e5d8:	bne	3e7a4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1ec>
   3e5dc:	mov	r5, r3
   3e5e0:	ldr	r3, [r1, #8]
   3e5e4:	add	r2, r2, #2
   3e5e8:	lsl	r2, r2, #1
   3e5ec:	mov	lr, r1
   3e5f0:	cmp	r3, r2
   3e5f4:	ble	3e78c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3e5f8:	ldr	r3, [r1, #4]
   3e5fc:	ldrh	r2, [r3, r2]
   3e600:	cmp	r2, #0
   3e604:	beq	3e78c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3e608:	ldr	r3, [r1]
   3e60c:	adds	ip, r3, r2
   3e610:	beq	3e78c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3e614:	ldr	r1, [r1, #16]
   3e618:	mov	r4, r0
   3e61c:	add	r0, r1, #1
   3e620:	cmp	r1, #0
   3e624:	str	r0, [lr, #16]
   3e628:	beq	3e640 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x88>
   3e62c:	ldr	r1, [r4, #20]
   3e630:	mov	r0, #44	; 0x2c
   3e634:	add	lr, r1, #1
   3e638:	str	lr, [r4, #20]
   3e63c:	strb	r0, [r1]
   3e640:	ldr	r3, [r3, r2]
   3e644:	mov	r1, r5
   3e648:	mov	r2, r6
   3e64c:	mov	r0, r4
   3e650:	add	r6, ip, r3
   3e654:	ldr	r5, [ip, r3]
   3e658:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3e65c:	ldr	r2, [r4, #20]
   3e660:	mov	r1, #91	; 0x5b
   3e664:	ldr	r3, [r4, #32]
   3e668:	cmp	r5, #0
   3e66c:	add	r0, r2, #1
   3e670:	add	r3, r3, #1
   3e674:	str	r0, [r4, #20]
   3e678:	str	r3, [r4, #32]
   3e67c:	strb	r1, [r2]
   3e680:	beq	3e76c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3e684:	ldrb	r1, [r4, #25]
   3e688:	ldr	r3, [r4, #20]
   3e68c:	cmp	r1, #0
   3e690:	bne	3e824 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x26c>
   3e694:	ldr	r2, [r4, #16]
   3e698:	cmp	r2, r3
   3e69c:	bhi	3e6ac <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3e6a0:	mov	r0, r4
   3e6a4:	ldr	r3, [r4, #44]	; 0x2c
   3e6a8:	blx	r3
   3e6ac:	mov	r0, r4
   3e6b0:	ldrd	r2, [r6, #4]
   3e6b4:	add	r6, r6, #12
   3e6b8:	blx	r7
   3e6bc:	cmp	r5, #1
   3e6c0:	sub	r5, r5, #2
   3e6c4:	beq	3e76c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3e6c8:	mov	r8, #44	; 0x2c
   3e6cc:	mov	r9, #10
   3e6d0:	b	3e708 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
   3e6d4:	ldr	r3, [r4, #16]
   3e6d8:	mov	r0, r4
   3e6dc:	ldr	r2, [r4, #20]
   3e6e0:	cmp	r2, r3
   3e6e4:	bcc	3e6f0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3e6e8:	ldr	r3, [r4, #44]	; 0x2c
   3e6ec:	blx	r3
   3e6f0:	sub	r5, r5, #1
   3e6f4:	mov	r0, r4
   3e6f8:	ldrd	r2, [r6], #8
   3e6fc:	blx	r7
   3e700:	cmn	r5, #1
   3e704:	beq	3e76c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3e708:	ldr	r3, [r4, #20]
   3e70c:	add	r2, r3, #1
   3e710:	str	r2, [r4, #20]
   3e714:	strb	r8, [r3]
   3e718:	ldrb	r1, [r4, #25]
   3e71c:	cmp	r1, #0
   3e720:	beq	3e6d4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3e724:	ldr	r3, [r4, #20]
   3e728:	mov	r1, #32
   3e72c:	mov	r0, r4
   3e730:	add	r2, r3, #1
   3e734:	str	r2, [r4, #20]
   3e738:	strb	r9, [r3]
   3e73c:	ldrb	r2, [r4, #25]
   3e740:	ldr	lr, [r4, #16]
   3e744:	ldr	sl, [r4, #32]
   3e748:	ldr	r3, [r4, #20]
   3e74c:	mul	sl, sl, r2
   3e750:	add	ip, r3, sl
   3e754:	mov	r2, sl
   3e758:	cmp	lr, ip
   3e75c:	bcs	3e7c0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x208>
   3e760:	mov	r1, sl
   3e764:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e768:	b	3e6f0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3e76c:	ldrb	r2, [r4, #25]
   3e770:	ldr	r3, [r4, #20]
   3e774:	cmp	r2, #0
   3e778:	add	r2, r3, #1
   3e77c:	bne	3e7d8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x220>
   3e780:	mov	r1, #93	; 0x5d
   3e784:	str	r2, [r4, #20]
   3e788:	strb	r1, [r3]
   3e78c:	ldrd	r4, [sp]
   3e790:	ldrd	r6, [sp, #8]
   3e794:	ldrd	r8, [sp, #16]
   3e798:	ldr	sl, [sp, #24]
   3e79c:	add	sp, sp, #28
   3e7a0:	pop	{pc}		; (ldr pc, [sp], #4)
   3e7a4:	ldrd	r4, [sp]
   3e7a8:	ldrd	r6, [sp, #8]
   3e7ac:	ldrd	r8, [sp, #16]
   3e7b0:	ldr	sl, [sp, #24]
   3e7b4:	ldr	lr, [sp, #28]
   3e7b8:	add	sp, sp, #32
   3e7bc:	b	3c688 <flatcc_json_printer_uint64_vector_field@@Base>
   3e7c0:	mov	r0, r3
   3e7c4:	bl	1459c <memset@plt>
   3e7c8:	ldr	r3, [r4, #20]
   3e7cc:	add	sl, r3, sl
   3e7d0:	str	sl, [r4, #20]
   3e7d4:	b	3e6f0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3e7d8:	mov	r1, #10
   3e7dc:	str	r2, [r4, #20]
   3e7e0:	strb	r1, [r3]
   3e7e4:	ldrb	r3, [r4, #25]
   3e7e8:	ldr	r2, [r4, #32]
   3e7ec:	ldr	r1, [r4, #16]
   3e7f0:	ldr	r0, [r4, #20]
   3e7f4:	sub	r2, r2, #1
   3e7f8:	mul	r5, r2, r3
   3e7fc:	str	r2, [r4, #32]
   3e800:	add	r3, r0, r5
   3e804:	cmp	r1, r3
   3e808:	bcs	3e840 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x288>
   3e80c:	mov	r1, r5
   3e810:	mov	r0, r4
   3e814:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3e818:	ldr	r3, [r4, #20]
   3e81c:	add	r2, r3, #1
   3e820:	b	3e780 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>
   3e824:	add	r1, r3, #1
   3e828:	mov	r2, #10
   3e82c:	mov	r0, r4
   3e830:	str	r1, [r4, #20]
   3e834:	strb	r2, [r3]
   3e838:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3e83c:	b	3e6ac <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3e840:	mov	r2, r5
   3e844:	mov	r1, #32
   3e848:	bl	1459c <memset@plt>
   3e84c:	ldr	r3, [r4, #20]
   3e850:	add	r3, r3, r5
   3e854:	add	r2, r3, #1
   3e858:	b	3e780 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>

0003e85c <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3e85c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3e860:	strd	r6, [sp, #8]
   3e864:	strd	r8, [sp, #16]
   3e868:	str	sl, [sp, #24]
   3e86c:	str	lr, [sp, #28]
   3e870:	ldrb	r8, [r0, #27]
   3e874:	ldr	r7, [sp, #32]
   3e878:	ldr	r6, [sp, #36]	; 0x24
   3e87c:	cmp	r8, #0
   3e880:	bne	3ea4c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3e884:	mov	r5, r3
   3e888:	ldr	r3, [r1, #8]
   3e88c:	add	r2, r2, #2
   3e890:	lsl	r2, r2, #1
   3e894:	mov	lr, r1
   3e898:	cmp	r3, r2
   3e89c:	ble	3ea34 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3e8a0:	ldr	r3, [r1, #4]
   3e8a4:	ldrh	r2, [r3, r2]
   3e8a8:	cmp	r2, #0
   3e8ac:	beq	3ea34 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3e8b0:	ldr	r3, [r1]
   3e8b4:	adds	ip, r3, r2
   3e8b8:	beq	3ea34 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3e8bc:	ldr	r1, [r1, #16]
   3e8c0:	mov	r4, r0
   3e8c4:	add	r0, r1, #1
   3e8c8:	cmp	r1, #0
   3e8cc:	str	r0, [lr, #16]
   3e8d0:	beq	3e8e8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x8c>
   3e8d4:	ldr	r1, [r4, #20]
   3e8d8:	mov	r0, #44	; 0x2c
   3e8dc:	add	lr, r1, #1
   3e8e0:	str	lr, [r4, #20]
   3e8e4:	strb	r0, [r1]
   3e8e8:	ldr	r3, [r3, r2]
   3e8ec:	mov	r1, r5
   3e8f0:	mov	r2, r7
   3e8f4:	mov	r0, r4
   3e8f8:	add	r7, ip, r3
   3e8fc:	ldr	r8, [ip, r3]
   3e900:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3e904:	ldr	r2, [r4, #20]
   3e908:	mov	r1, #91	; 0x5b
   3e90c:	ldr	r3, [r4, #32]
   3e910:	cmp	r8, #0
   3e914:	add	r0, r2, #1
   3e918:	add	r3, r3, #1
   3e91c:	str	r0, [r4, #20]
   3e920:	str	r3, [r4, #32]
   3e924:	strb	r1, [r2]
   3e928:	beq	3ea14 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e92c:	ldrb	r1, [r4, #25]
   3e930:	ldr	r3, [r4, #20]
   3e934:	cmp	r1, #0
   3e938:	bne	3eacc <flatcc_json_printer_int8_enum_vector_field@@Base+0x270>
   3e93c:	ldr	r2, [r4, #16]
   3e940:	cmp	r2, r3
   3e944:	bhi	3e954 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3e948:	mov	r0, r4
   3e94c:	ldr	r3, [r4, #44]	; 0x2c
   3e950:	blx	r3
   3e954:	ldrsb	r1, [r7, #4]
   3e958:	mov	r0, r4
   3e95c:	add	r5, r7, #5
   3e960:	blx	r6
   3e964:	cmp	r8, #1
   3e968:	beq	3ea14 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e96c:	add	r3, r8, #4
   3e970:	mov	r9, #10
   3e974:	mov	r8, #44	; 0x2c
   3e978:	add	r7, r7, r3
   3e97c:	b	3e9b0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x154>
   3e980:	ldr	r3, [r4, #16]
   3e984:	mov	r0, r4
   3e988:	ldr	r2, [r4, #20]
   3e98c:	cmp	r2, r3
   3e990:	bcc	3e99c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3e994:	ldr	r3, [r4, #44]	; 0x2c
   3e998:	blx	r3
   3e99c:	ldrsb	r1, [r5], #1
   3e9a0:	mov	r0, r4
   3e9a4:	blx	r6
   3e9a8:	cmp	r5, r7
   3e9ac:	beq	3ea14 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e9b0:	ldr	r3, [r4, #20]
   3e9b4:	add	r2, r3, #1
   3e9b8:	str	r2, [r4, #20]
   3e9bc:	strb	r8, [r3]
   3e9c0:	ldrb	r1, [r4, #25]
   3e9c4:	cmp	r1, #0
   3e9c8:	beq	3e980 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   3e9cc:	ldr	r3, [r4, #20]
   3e9d0:	mov	r1, #32
   3e9d4:	mov	r0, r4
   3e9d8:	add	r2, r3, #1
   3e9dc:	str	r2, [r4, #20]
   3e9e0:	strb	r9, [r3]
   3e9e4:	ldrb	r2, [r4, #25]
   3e9e8:	ldr	lr, [r4, #16]
   3e9ec:	ldr	sl, [r4, #32]
   3e9f0:	ldr	r3, [r4, #20]
   3e9f4:	mul	sl, sl, r2
   3e9f8:	add	ip, r3, sl
   3e9fc:	mov	r2, sl
   3ea00:	cmp	lr, ip
   3ea04:	bcs	3ea68 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20c>
   3ea08:	mov	r1, sl
   3ea0c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3ea10:	b	3e99c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3ea14:	ldrb	r2, [r4, #25]
   3ea18:	ldr	r3, [r4, #20]
   3ea1c:	cmp	r2, #0
   3ea20:	add	r2, r3, #1
   3ea24:	bne	3ea80 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3ea28:	mov	r1, #93	; 0x5d
   3ea2c:	str	r2, [r4, #20]
   3ea30:	strb	r1, [r3]
   3ea34:	ldrd	r4, [sp]
   3ea38:	ldrd	r6, [sp, #8]
   3ea3c:	ldrd	r8, [sp, #16]
   3ea40:	ldr	sl, [sp, #24]
   3ea44:	add	sp, sp, #28
   3ea48:	pop	{pc}		; (ldr pc, [sp], #4)
   3ea4c:	ldrd	r4, [sp]
   3ea50:	ldrd	r6, [sp, #8]
   3ea54:	ldrd	r8, [sp, #16]
   3ea58:	ldr	sl, [sp, #24]
   3ea5c:	ldr	lr, [sp, #28]
   3ea60:	add	sp, sp, #32
   3ea64:	b	3c910 <flatcc_json_printer_int8_vector_field@@Base>
   3ea68:	mov	r0, r3
   3ea6c:	bl	1459c <memset@plt>
   3ea70:	ldr	r3, [r4, #20]
   3ea74:	add	sl, r3, sl
   3ea78:	str	sl, [r4, #20]
   3ea7c:	b	3e99c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3ea80:	mov	r1, #10
   3ea84:	str	r2, [r4, #20]
   3ea88:	strb	r1, [r3]
   3ea8c:	ldrb	r3, [r4, #25]
   3ea90:	ldr	r2, [r4, #32]
   3ea94:	ldr	r1, [r4, #16]
   3ea98:	ldr	r0, [r4, #20]
   3ea9c:	sub	r2, r2, #1
   3eaa0:	mul	r5, r2, r3
   3eaa4:	str	r2, [r4, #32]
   3eaa8:	add	r3, r0, r5
   3eaac:	cmp	r1, r3
   3eab0:	bcs	3eae8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x28c>
   3eab4:	mov	r1, r5
   3eab8:	mov	r0, r4
   3eabc:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3eac0:	ldr	r3, [r4, #20]
   3eac4:	add	r2, r3, #1
   3eac8:	b	3ea28 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>
   3eacc:	add	r1, r3, #1
   3ead0:	mov	r2, #10
   3ead4:	mov	r0, r4
   3ead8:	str	r1, [r4, #20]
   3eadc:	strb	r2, [r3]
   3eae0:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3eae4:	b	3e954 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3eae8:	mov	r2, r5
   3eaec:	mov	r1, #32
   3eaf0:	bl	1459c <memset@plt>
   3eaf4:	ldr	r3, [r4, #20]
   3eaf8:	add	r3, r3, r5
   3eafc:	add	r2, r3, #1
   3eb00:	b	3ea28 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>

0003eb04 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3eb04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3eb08:	strd	r6, [sp, #8]
   3eb0c:	strd	r8, [sp, #16]
   3eb10:	str	sl, [sp, #24]
   3eb14:	str	lr, [sp, #28]
   3eb18:	ldrb	r8, [r0, #27]
   3eb1c:	ldrd	r6, [sp, #32]
   3eb20:	cmp	r8, #0
   3eb24:	bne	3ecf0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1ec>
   3eb28:	mov	r5, r3
   3eb2c:	ldr	r3, [r1, #8]
   3eb30:	add	r2, r2, #2
   3eb34:	lsl	r2, r2, #1
   3eb38:	mov	lr, r1
   3eb3c:	cmp	r3, r2
   3eb40:	ble	3ecd8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3eb44:	ldr	r3, [r1, #4]
   3eb48:	ldrh	r2, [r3, r2]
   3eb4c:	cmp	r2, #0
   3eb50:	beq	3ecd8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3eb54:	ldr	r3, [r1]
   3eb58:	adds	ip, r3, r2
   3eb5c:	beq	3ecd8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3eb60:	ldr	r1, [r1, #16]
   3eb64:	mov	r4, r0
   3eb68:	add	r0, r1, #1
   3eb6c:	cmp	r1, #0
   3eb70:	str	r0, [lr, #16]
   3eb74:	beq	3eb8c <flatcc_json_printer_int16_enum_vector_field@@Base+0x88>
   3eb78:	ldr	r1, [r4, #20]
   3eb7c:	mov	r0, #44	; 0x2c
   3eb80:	add	lr, r1, #1
   3eb84:	str	lr, [r4, #20]
   3eb88:	strb	r0, [r1]
   3eb8c:	ldr	r3, [r3, r2]
   3eb90:	mov	r1, r5
   3eb94:	mov	r2, r6
   3eb98:	mov	r0, r4
   3eb9c:	add	r6, ip, r3
   3eba0:	ldr	r5, [ip, r3]
   3eba4:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3eba8:	ldr	r2, [r4, #20]
   3ebac:	mov	r1, #91	; 0x5b
   3ebb0:	ldr	r3, [r4, #32]
   3ebb4:	cmp	r5, #0
   3ebb8:	add	r0, r2, #1
   3ebbc:	add	r3, r3, #1
   3ebc0:	str	r0, [r4, #20]
   3ebc4:	str	r3, [r4, #32]
   3ebc8:	strb	r1, [r2]
   3ebcc:	beq	3ecb8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3ebd0:	ldrb	r1, [r4, #25]
   3ebd4:	ldr	r3, [r4, #20]
   3ebd8:	cmp	r1, #0
   3ebdc:	bne	3ed70 <flatcc_json_printer_int16_enum_vector_field@@Base+0x26c>
   3ebe0:	ldr	r2, [r4, #16]
   3ebe4:	cmp	r2, r3
   3ebe8:	bhi	3ebf8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3ebec:	mov	r0, r4
   3ebf0:	ldr	r3, [r4, #44]	; 0x2c
   3ebf4:	blx	r3
   3ebf8:	ldrsh	r1, [r6, #4]
   3ebfc:	mov	r0, r4
   3ec00:	add	r6, r6, #6
   3ec04:	blx	r7
   3ec08:	cmp	r5, #1
   3ec0c:	sub	r5, r5, #2
   3ec10:	beq	3ecb8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3ec14:	mov	r8, #44	; 0x2c
   3ec18:	mov	r9, #10
   3ec1c:	b	3ec54 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
   3ec20:	ldr	r3, [r4, #16]
   3ec24:	mov	r0, r4
   3ec28:	ldr	r2, [r4, #20]
   3ec2c:	cmp	r2, r3
   3ec30:	bcc	3ec3c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3ec34:	ldr	r3, [r4, #44]	; 0x2c
   3ec38:	blx	r3
   3ec3c:	sub	r5, r5, #1
   3ec40:	ldrsh	r1, [r6], #2
   3ec44:	mov	r0, r4
   3ec48:	blx	r7
   3ec4c:	cmn	r5, #1
   3ec50:	beq	3ecb8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3ec54:	ldr	r3, [r4, #20]
   3ec58:	add	r2, r3, #1
   3ec5c:	str	r2, [r4, #20]
   3ec60:	strb	r8, [r3]
   3ec64:	ldrb	r1, [r4, #25]
   3ec68:	cmp	r1, #0
   3ec6c:	beq	3ec20 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3ec70:	ldr	r3, [r4, #20]
   3ec74:	mov	r1, #32
   3ec78:	mov	r0, r4
   3ec7c:	add	r2, r3, #1
   3ec80:	str	r2, [r4, #20]
   3ec84:	strb	r9, [r3]
   3ec88:	ldrb	r2, [r4, #25]
   3ec8c:	ldr	lr, [r4, #16]
   3ec90:	ldr	sl, [r4, #32]
   3ec94:	ldr	r3, [r4, #20]
   3ec98:	mul	sl, sl, r2
   3ec9c:	add	ip, r3, sl
   3eca0:	mov	r2, sl
   3eca4:	cmp	lr, ip
   3eca8:	bcs	3ed0c <flatcc_json_printer_int16_enum_vector_field@@Base+0x208>
   3ecac:	mov	r1, sl
   3ecb0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3ecb4:	b	3ec3c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3ecb8:	ldrb	r2, [r4, #25]
   3ecbc:	ldr	r3, [r4, #20]
   3ecc0:	cmp	r2, #0
   3ecc4:	add	r2, r3, #1
   3ecc8:	bne	3ed24 <flatcc_json_printer_int16_enum_vector_field@@Base+0x220>
   3eccc:	mov	r1, #93	; 0x5d
   3ecd0:	str	r2, [r4, #20]
   3ecd4:	strb	r1, [r3]
   3ecd8:	ldrd	r4, [sp]
   3ecdc:	ldrd	r6, [sp, #8]
   3ece0:	ldrd	r8, [sp, #16]
   3ece4:	ldr	sl, [sp, #24]
   3ece8:	add	sp, sp, #28
   3ecec:	pop	{pc}		; (ldr pc, [sp], #4)
   3ecf0:	ldrd	r4, [sp]
   3ecf4:	ldrd	r6, [sp, #8]
   3ecf8:	ldrd	r8, [sp, #16]
   3ecfc:	ldr	sl, [sp, #24]
   3ed00:	ldr	lr, [sp, #28]
   3ed04:	add	sp, sp, #32
   3ed08:	b	3cc7c <flatcc_json_printer_int16_vector_field@@Base>
   3ed0c:	mov	r0, r3
   3ed10:	bl	1459c <memset@plt>
   3ed14:	ldr	r3, [r4, #20]
   3ed18:	add	sl, r3, sl
   3ed1c:	str	sl, [r4, #20]
   3ed20:	b	3ec3c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3ed24:	mov	r1, #10
   3ed28:	str	r2, [r4, #20]
   3ed2c:	strb	r1, [r3]
   3ed30:	ldrb	r3, [r4, #25]
   3ed34:	ldr	r2, [r4, #32]
   3ed38:	ldr	r1, [r4, #16]
   3ed3c:	ldr	r0, [r4, #20]
   3ed40:	sub	r2, r2, #1
   3ed44:	mul	r5, r2, r3
   3ed48:	str	r2, [r4, #32]
   3ed4c:	add	r3, r0, r5
   3ed50:	cmp	r1, r3
   3ed54:	bcs	3ed8c <flatcc_json_printer_int16_enum_vector_field@@Base+0x288>
   3ed58:	mov	r1, r5
   3ed5c:	mov	r0, r4
   3ed60:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3ed64:	ldr	r3, [r4, #20]
   3ed68:	add	r2, r3, #1
   3ed6c:	b	3eccc <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>
   3ed70:	add	r1, r3, #1
   3ed74:	mov	r2, #10
   3ed78:	mov	r0, r4
   3ed7c:	str	r1, [r4, #20]
   3ed80:	strb	r2, [r3]
   3ed84:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3ed88:	b	3ebf8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3ed8c:	mov	r2, r5
   3ed90:	mov	r1, #32
   3ed94:	bl	1459c <memset@plt>
   3ed98:	ldr	r3, [r4, #20]
   3ed9c:	add	r3, r3, r5
   3eda0:	add	r2, r3, #1
   3eda4:	b	3eccc <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>

0003eda8 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3eda8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3edac:	strd	r6, [sp, #8]
   3edb0:	strd	r8, [sp, #16]
   3edb4:	str	sl, [sp, #24]
   3edb8:	str	lr, [sp, #28]
   3edbc:	ldrb	r8, [r0, #27]
   3edc0:	ldrd	r6, [sp, #32]
   3edc4:	cmp	r8, #0
   3edc8:	bne	3ef94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1ec>
   3edcc:	mov	r5, r3
   3edd0:	ldr	r3, [r1, #8]
   3edd4:	add	r2, r2, #2
   3edd8:	lsl	r2, r2, #1
   3eddc:	mov	lr, r1
   3ede0:	cmp	r3, r2
   3ede4:	ble	3ef7c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ede8:	ldr	r3, [r1, #4]
   3edec:	ldrh	r2, [r3, r2]
   3edf0:	cmp	r2, #0
   3edf4:	beq	3ef7c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3edf8:	ldr	r3, [r1]
   3edfc:	adds	ip, r3, r2
   3ee00:	beq	3ef7c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ee04:	ldr	r1, [r1, #16]
   3ee08:	mov	r4, r0
   3ee0c:	add	r0, r1, #1
   3ee10:	cmp	r1, #0
   3ee14:	str	r0, [lr, #16]
   3ee18:	beq	3ee30 <flatcc_json_printer_int32_enum_vector_field@@Base+0x88>
   3ee1c:	ldr	r1, [r4, #20]
   3ee20:	mov	r0, #44	; 0x2c
   3ee24:	add	lr, r1, #1
   3ee28:	str	lr, [r4, #20]
   3ee2c:	strb	r0, [r1]
   3ee30:	ldr	r3, [r3, r2]
   3ee34:	mov	r1, r5
   3ee38:	mov	r2, r6
   3ee3c:	mov	r0, r4
   3ee40:	add	r6, ip, r3
   3ee44:	ldr	r5, [ip, r3]
   3ee48:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3ee4c:	ldr	r2, [r4, #20]
   3ee50:	mov	r1, #91	; 0x5b
   3ee54:	ldr	r3, [r4, #32]
   3ee58:	cmp	r5, #0
   3ee5c:	add	r0, r2, #1
   3ee60:	add	r3, r3, #1
   3ee64:	str	r0, [r4, #20]
   3ee68:	str	r3, [r4, #32]
   3ee6c:	strb	r1, [r2]
   3ee70:	beq	3ef5c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3ee74:	ldrb	r1, [r4, #25]
   3ee78:	ldr	r3, [r4, #20]
   3ee7c:	cmp	r1, #0
   3ee80:	bne	3f014 <flatcc_json_printer_int32_enum_vector_field@@Base+0x26c>
   3ee84:	ldr	r2, [r4, #16]
   3ee88:	cmp	r2, r3
   3ee8c:	bhi	3ee9c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3ee90:	mov	r0, r4
   3ee94:	ldr	r3, [r4, #44]	; 0x2c
   3ee98:	blx	r3
   3ee9c:	mov	r0, r4
   3eea0:	ldr	r1, [r6, #4]
   3eea4:	add	r6, r6, #8
   3eea8:	blx	r7
   3eeac:	cmp	r5, #1
   3eeb0:	sub	r5, r5, #2
   3eeb4:	beq	3ef5c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3eeb8:	mov	r8, #44	; 0x2c
   3eebc:	mov	r9, #10
   3eec0:	b	3eef8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x150>
   3eec4:	ldr	r3, [r4, #16]
   3eec8:	mov	r0, r4
   3eecc:	ldr	r2, [r4, #20]
   3eed0:	cmp	r2, r3
   3eed4:	bcc	3eee0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3eed8:	ldr	r3, [r4, #44]	; 0x2c
   3eedc:	blx	r3
   3eee0:	sub	r5, r5, #1
   3eee4:	mov	r0, r4
   3eee8:	ldr	r1, [r6], #4
   3eeec:	blx	r7
   3eef0:	cmn	r5, #1
   3eef4:	beq	3ef5c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3eef8:	ldr	r3, [r4, #20]
   3eefc:	add	r2, r3, #1
   3ef00:	str	r2, [r4, #20]
   3ef04:	strb	r8, [r3]
   3ef08:	ldrb	r1, [r4, #25]
   3ef0c:	cmp	r1, #0
   3ef10:	beq	3eec4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3ef14:	ldr	r3, [r4, #20]
   3ef18:	mov	r1, #32
   3ef1c:	mov	r0, r4
   3ef20:	add	r2, r3, #1
   3ef24:	str	r2, [r4, #20]
   3ef28:	strb	r9, [r3]
   3ef2c:	ldrb	r2, [r4, #25]
   3ef30:	ldr	lr, [r4, #16]
   3ef34:	ldr	sl, [r4, #32]
   3ef38:	ldr	r3, [r4, #20]
   3ef3c:	mul	sl, sl, r2
   3ef40:	add	ip, r3, sl
   3ef44:	mov	r2, sl
   3ef48:	cmp	lr, ip
   3ef4c:	bcs	3efb0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x208>
   3ef50:	mov	r1, sl
   3ef54:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3ef58:	b	3eee0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3ef5c:	ldrb	r2, [r4, #25]
   3ef60:	ldr	r3, [r4, #20]
   3ef64:	cmp	r2, #0
   3ef68:	add	r2, r3, #1
   3ef6c:	bne	3efc8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x220>
   3ef70:	mov	r1, #93	; 0x5d
   3ef74:	str	r2, [r4, #20]
   3ef78:	strb	r1, [r3]
   3ef7c:	ldrd	r4, [sp]
   3ef80:	ldrd	r6, [sp, #8]
   3ef84:	ldrd	r8, [sp, #16]
   3ef88:	ldr	sl, [sp, #24]
   3ef8c:	add	sp, sp, #28
   3ef90:	pop	{pc}		; (ldr pc, [sp], #4)
   3ef94:	ldrd	r4, [sp]
   3ef98:	ldrd	r6, [sp, #8]
   3ef9c:	ldrd	r8, [sp, #16]
   3efa0:	ldr	sl, [sp, #24]
   3efa4:	ldr	lr, [sp, #28]
   3efa8:	add	sp, sp, #32
   3efac:	b	3cf80 <flatcc_json_printer_int32_vector_field@@Base>
   3efb0:	mov	r0, r3
   3efb4:	bl	1459c <memset@plt>
   3efb8:	ldr	r3, [r4, #20]
   3efbc:	add	sl, r3, sl
   3efc0:	str	sl, [r4, #20]
   3efc4:	b	3eee0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3efc8:	mov	r1, #10
   3efcc:	str	r2, [r4, #20]
   3efd0:	strb	r1, [r3]
   3efd4:	ldrb	r3, [r4, #25]
   3efd8:	ldr	r2, [r4, #32]
   3efdc:	ldr	r1, [r4, #16]
   3efe0:	ldr	r0, [r4, #20]
   3efe4:	sub	r2, r2, #1
   3efe8:	mul	r5, r2, r3
   3efec:	str	r2, [r4, #32]
   3eff0:	add	r3, r0, r5
   3eff4:	cmp	r1, r3
   3eff8:	bcs	3f030 <flatcc_json_printer_int32_enum_vector_field@@Base+0x288>
   3effc:	mov	r1, r5
   3f000:	mov	r0, r4
   3f004:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f008:	ldr	r3, [r4, #20]
   3f00c:	add	r2, r3, #1
   3f010:	b	3ef70 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>
   3f014:	add	r1, r3, #1
   3f018:	mov	r2, #10
   3f01c:	mov	r0, r4
   3f020:	str	r1, [r4, #20]
   3f024:	strb	r2, [r3]
   3f028:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3f02c:	b	3ee9c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3f030:	mov	r2, r5
   3f034:	mov	r1, #32
   3f038:	bl	1459c <memset@plt>
   3f03c:	ldr	r3, [r4, #20]
   3f040:	add	r3, r3, r5
   3f044:	add	r2, r3, #1
   3f048:	b	3ef70 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>

0003f04c <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3f04c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3f050:	strd	r6, [sp, #8]
   3f054:	strd	r8, [sp, #16]
   3f058:	str	sl, [sp, #24]
   3f05c:	str	lr, [sp, #28]
   3f060:	ldrb	r8, [r0, #27]
   3f064:	ldrd	r6, [sp, #32]
   3f068:	cmp	r8, #0
   3f06c:	bne	3f238 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1ec>
   3f070:	mov	r5, r3
   3f074:	ldr	r3, [r1, #8]
   3f078:	add	r2, r2, #2
   3f07c:	lsl	r2, r2, #1
   3f080:	mov	lr, r1
   3f084:	cmp	r3, r2
   3f088:	ble	3f220 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3f08c:	ldr	r3, [r1, #4]
   3f090:	ldrh	r2, [r3, r2]
   3f094:	cmp	r2, #0
   3f098:	beq	3f220 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3f09c:	ldr	r3, [r1]
   3f0a0:	adds	ip, r3, r2
   3f0a4:	beq	3f220 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3f0a8:	ldr	r1, [r1, #16]
   3f0ac:	mov	r4, r0
   3f0b0:	add	r0, r1, #1
   3f0b4:	cmp	r1, #0
   3f0b8:	str	r0, [lr, #16]
   3f0bc:	beq	3f0d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x88>
   3f0c0:	ldr	r1, [r4, #20]
   3f0c4:	mov	r0, #44	; 0x2c
   3f0c8:	add	lr, r1, #1
   3f0cc:	str	lr, [r4, #20]
   3f0d0:	strb	r0, [r1]
   3f0d4:	ldr	r3, [r3, r2]
   3f0d8:	mov	r1, r5
   3f0dc:	mov	r2, r6
   3f0e0:	mov	r0, r4
   3f0e4:	add	r6, ip, r3
   3f0e8:	ldr	r5, [ip, r3]
   3f0ec:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3f0f0:	ldr	r2, [r4, #20]
   3f0f4:	mov	r1, #91	; 0x5b
   3f0f8:	ldr	r3, [r4, #32]
   3f0fc:	cmp	r5, #0
   3f100:	add	r0, r2, #1
   3f104:	add	r3, r3, #1
   3f108:	str	r0, [r4, #20]
   3f10c:	str	r3, [r4, #32]
   3f110:	strb	r1, [r2]
   3f114:	beq	3f200 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3f118:	ldrb	r1, [r4, #25]
   3f11c:	ldr	r3, [r4, #20]
   3f120:	cmp	r1, #0
   3f124:	bne	3f2b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x26c>
   3f128:	ldr	r2, [r4, #16]
   3f12c:	cmp	r2, r3
   3f130:	bhi	3f140 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3f134:	mov	r0, r4
   3f138:	ldr	r3, [r4, #44]	; 0x2c
   3f13c:	blx	r3
   3f140:	mov	r0, r4
   3f144:	ldrd	r2, [r6, #4]
   3f148:	add	r6, r6, #12
   3f14c:	blx	r7
   3f150:	cmp	r5, #1
   3f154:	sub	r5, r5, #2
   3f158:	beq	3f200 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3f15c:	mov	r8, #44	; 0x2c
   3f160:	mov	r9, #10
   3f164:	b	3f19c <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
   3f168:	ldr	r3, [r4, #16]
   3f16c:	mov	r0, r4
   3f170:	ldr	r2, [r4, #20]
   3f174:	cmp	r2, r3
   3f178:	bcc	3f184 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3f17c:	ldr	r3, [r4, #44]	; 0x2c
   3f180:	blx	r3
   3f184:	sub	r5, r5, #1
   3f188:	mov	r0, r4
   3f18c:	ldrd	r2, [r6], #8
   3f190:	blx	r7
   3f194:	cmn	r5, #1
   3f198:	beq	3f200 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3f19c:	ldr	r3, [r4, #20]
   3f1a0:	add	r2, r3, #1
   3f1a4:	str	r2, [r4, #20]
   3f1a8:	strb	r8, [r3]
   3f1ac:	ldrb	r1, [r4, #25]
   3f1b0:	cmp	r1, #0
   3f1b4:	beq	3f168 <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3f1b8:	ldr	r3, [r4, #20]
   3f1bc:	mov	r1, #32
   3f1c0:	mov	r0, r4
   3f1c4:	add	r2, r3, #1
   3f1c8:	str	r2, [r4, #20]
   3f1cc:	strb	r9, [r3]
   3f1d0:	ldrb	r2, [r4, #25]
   3f1d4:	ldr	lr, [r4, #16]
   3f1d8:	ldr	sl, [r4, #32]
   3f1dc:	ldr	r3, [r4, #20]
   3f1e0:	mul	sl, sl, r2
   3f1e4:	add	ip, r3, sl
   3f1e8:	mov	r2, sl
   3f1ec:	cmp	lr, ip
   3f1f0:	bcs	3f254 <flatcc_json_printer_int64_enum_vector_field@@Base+0x208>
   3f1f4:	mov	r1, sl
   3f1f8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f1fc:	b	3f184 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3f200:	ldrb	r2, [r4, #25]
   3f204:	ldr	r3, [r4, #20]
   3f208:	cmp	r2, #0
   3f20c:	add	r2, r3, #1
   3f210:	bne	3f26c <flatcc_json_printer_int64_enum_vector_field@@Base+0x220>
   3f214:	mov	r1, #93	; 0x5d
   3f218:	str	r2, [r4, #20]
   3f21c:	strb	r1, [r3]
   3f220:	ldrd	r4, [sp]
   3f224:	ldrd	r6, [sp, #8]
   3f228:	ldrd	r8, [sp, #16]
   3f22c:	ldr	sl, [sp, #24]
   3f230:	add	sp, sp, #28
   3f234:	pop	{pc}		; (ldr pc, [sp], #4)
   3f238:	ldrd	r4, [sp]
   3f23c:	ldrd	r6, [sp, #8]
   3f240:	ldrd	r8, [sp, #16]
   3f244:	ldr	sl, [sp, #24]
   3f248:	ldr	lr, [sp, #28]
   3f24c:	add	sp, sp, #32
   3f250:	b	3d274 <flatcc_json_printer_int64_vector_field@@Base>
   3f254:	mov	r0, r3
   3f258:	bl	1459c <memset@plt>
   3f25c:	ldr	r3, [r4, #20]
   3f260:	add	sl, r3, sl
   3f264:	str	sl, [r4, #20]
   3f268:	b	3f184 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3f26c:	mov	r1, #10
   3f270:	str	r2, [r4, #20]
   3f274:	strb	r1, [r3]
   3f278:	ldrb	r3, [r4, #25]
   3f27c:	ldr	r2, [r4, #32]
   3f280:	ldr	r1, [r4, #16]
   3f284:	ldr	r0, [r4, #20]
   3f288:	sub	r2, r2, #1
   3f28c:	mul	r5, r2, r3
   3f290:	str	r2, [r4, #32]
   3f294:	add	r3, r0, r5
   3f298:	cmp	r1, r3
   3f29c:	bcs	3f2d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x288>
   3f2a0:	mov	r1, r5
   3f2a4:	mov	r0, r4
   3f2a8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f2ac:	ldr	r3, [r4, #20]
   3f2b0:	add	r2, r3, #1
   3f2b4:	b	3f214 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>
   3f2b8:	add	r1, r3, #1
   3f2bc:	mov	r2, #10
   3f2c0:	mov	r0, r4
   3f2c4:	str	r1, [r4, #20]
   3f2c8:	strb	r2, [r3]
   3f2cc:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3f2d0:	b	3f140 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3f2d4:	mov	r2, r5
   3f2d8:	mov	r1, #32
   3f2dc:	bl	1459c <memset@plt>
   3f2e0:	ldr	r3, [r4, #20]
   3f2e4:	add	r3, r3, r5
   3f2e8:	add	r2, r3, #1
   3f2ec:	b	3f214 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>

0003f2f0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3f2f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3f2f4:	strd	r6, [sp, #8]
   3f2f8:	strd	r8, [sp, #16]
   3f2fc:	str	sl, [sp, #24]
   3f300:	str	lr, [sp, #28]
   3f304:	ldrb	r8, [r0, #27]
   3f308:	ldr	r7, [sp, #32]
   3f30c:	ldr	r6, [sp, #36]	; 0x24
   3f310:	cmp	r8, #0
   3f314:	bne	3f4e0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3f318:	mov	r5, r3
   3f31c:	ldr	r3, [r1, #8]
   3f320:	add	r2, r2, #2
   3f324:	lsl	r2, r2, #1
   3f328:	mov	lr, r1
   3f32c:	cmp	r3, r2
   3f330:	ble	3f4c8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3f334:	ldr	r3, [r1, #4]
   3f338:	ldrh	r2, [r3, r2]
   3f33c:	cmp	r2, #0
   3f340:	beq	3f4c8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3f344:	ldr	r3, [r1]
   3f348:	adds	ip, r3, r2
   3f34c:	beq	3f4c8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3f350:	ldr	r1, [r1, #16]
   3f354:	mov	r4, r0
   3f358:	add	r0, r1, #1
   3f35c:	cmp	r1, #0
   3f360:	str	r0, [lr, #16]
   3f364:	beq	3f37c <flatcc_json_printer_bool_enum_vector_field@@Base+0x8c>
   3f368:	ldr	r1, [r4, #20]
   3f36c:	mov	r0, #44	; 0x2c
   3f370:	add	lr, r1, #1
   3f374:	str	lr, [r4, #20]
   3f378:	strb	r0, [r1]
   3f37c:	ldr	r3, [r3, r2]
   3f380:	mov	r1, r5
   3f384:	mov	r2, r7
   3f388:	mov	r0, r4
   3f38c:	add	r7, ip, r3
   3f390:	ldr	r8, [ip, r3]
   3f394:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3f398:	ldr	r2, [r4, #20]
   3f39c:	mov	r1, #91	; 0x5b
   3f3a0:	ldr	r3, [r4, #32]
   3f3a4:	cmp	r8, #0
   3f3a8:	add	r0, r2, #1
   3f3ac:	add	r3, r3, #1
   3f3b0:	str	r0, [r4, #20]
   3f3b4:	str	r3, [r4, #32]
   3f3b8:	strb	r1, [r2]
   3f3bc:	beq	3f4a8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3f3c0:	ldrb	r1, [r4, #25]
   3f3c4:	ldr	r3, [r4, #20]
   3f3c8:	cmp	r1, #0
   3f3cc:	bne	3f560 <flatcc_json_printer_bool_enum_vector_field@@Base+0x270>
   3f3d0:	ldr	r2, [r4, #16]
   3f3d4:	cmp	r2, r3
   3f3d8:	bhi	3f3e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3f3dc:	mov	r0, r4
   3f3e0:	ldr	r3, [r4, #44]	; 0x2c
   3f3e4:	blx	r3
   3f3e8:	ldrb	r1, [r7, #4]
   3f3ec:	mov	r0, r4
   3f3f0:	add	r5, r7, #5
   3f3f4:	blx	r6
   3f3f8:	cmp	r8, #1
   3f3fc:	beq	3f4a8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3f400:	add	r3, r8, #4
   3f404:	mov	r9, #10
   3f408:	mov	r8, #44	; 0x2c
   3f40c:	add	r7, r7, r3
   3f410:	b	3f444 <flatcc_json_printer_bool_enum_vector_field@@Base+0x154>
   3f414:	ldr	r3, [r4, #16]
   3f418:	mov	r0, r4
   3f41c:	ldr	r2, [r4, #20]
   3f420:	cmp	r2, r3
   3f424:	bcc	3f430 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3f428:	ldr	r3, [r4, #44]	; 0x2c
   3f42c:	blx	r3
   3f430:	ldrb	r1, [r5], #1
   3f434:	mov	r0, r4
   3f438:	blx	r6
   3f43c:	cmp	r5, r7
   3f440:	beq	3f4a8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3f444:	ldr	r3, [r4, #20]
   3f448:	add	r2, r3, #1
   3f44c:	str	r2, [r4, #20]
   3f450:	strb	r8, [r3]
   3f454:	ldrb	r1, [r4, #25]
   3f458:	cmp	r1, #0
   3f45c:	beq	3f414 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   3f460:	ldr	r3, [r4, #20]
   3f464:	mov	r1, #32
   3f468:	mov	r0, r4
   3f46c:	add	r2, r3, #1
   3f470:	str	r2, [r4, #20]
   3f474:	strb	r9, [r3]
   3f478:	ldrb	r2, [r4, #25]
   3f47c:	ldr	lr, [r4, #16]
   3f480:	ldr	sl, [r4, #32]
   3f484:	ldr	r3, [r4, #20]
   3f488:	mul	sl, sl, r2
   3f48c:	add	ip, r3, sl
   3f490:	mov	r2, sl
   3f494:	cmp	lr, ip
   3f498:	bcs	3f4fc <flatcc_json_printer_bool_enum_vector_field@@Base+0x20c>
   3f49c:	mov	r1, sl
   3f4a0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f4a4:	b	3f430 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3f4a8:	ldrb	r2, [r4, #25]
   3f4ac:	ldr	r3, [r4, #20]
   3f4b0:	cmp	r2, #0
   3f4b4:	add	r2, r3, #1
   3f4b8:	bne	3f514 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3f4bc:	mov	r1, #93	; 0x5d
   3f4c0:	str	r2, [r4, #20]
   3f4c4:	strb	r1, [r3]
   3f4c8:	ldrd	r4, [sp]
   3f4cc:	ldrd	r6, [sp, #8]
   3f4d0:	ldrd	r8, [sp, #16]
   3f4d4:	ldr	sl, [sp, #24]
   3f4d8:	add	sp, sp, #28
   3f4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   3f4e0:	ldrd	r4, [sp]
   3f4e4:	ldrd	r6, [sp, #8]
   3f4e8:	ldrd	r8, [sp, #16]
   3f4ec:	ldr	sl, [sp, #24]
   3f4f0:	ldr	lr, [sp, #28]
   3f4f4:	add	sp, sp, #32
   3f4f8:	b	3d578 <flatcc_json_printer_bool_vector_field@@Base>
   3f4fc:	mov	r0, r3
   3f500:	bl	1459c <memset@plt>
   3f504:	ldr	r3, [r4, #20]
   3f508:	add	sl, r3, sl
   3f50c:	str	sl, [r4, #20]
   3f510:	b	3f430 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3f514:	mov	r1, #10
   3f518:	str	r2, [r4, #20]
   3f51c:	strb	r1, [r3]
   3f520:	ldrb	r3, [r4, #25]
   3f524:	ldr	r2, [r4, #32]
   3f528:	ldr	r1, [r4, #16]
   3f52c:	ldr	r0, [r4, #20]
   3f530:	sub	r2, r2, #1
   3f534:	mul	r5, r2, r3
   3f538:	str	r2, [r4, #32]
   3f53c:	add	r3, r0, r5
   3f540:	cmp	r1, r3
   3f544:	bcs	3f57c <flatcc_json_printer_bool_enum_vector_field@@Base+0x28c>
   3f548:	mov	r1, r5
   3f54c:	mov	r0, r4
   3f550:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f554:	ldr	r3, [r4, #20]
   3f558:	add	r2, r3, #1
   3f55c:	b	3f4bc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>
   3f560:	add	r1, r3, #1
   3f564:	mov	r2, #10
   3f568:	mov	r0, r4
   3f56c:	str	r1, [r4, #20]
   3f570:	strb	r2, [r3]
   3f574:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3f578:	b	3f3e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3f57c:	mov	r2, r5
   3f580:	mov	r1, #32
   3f584:	bl	1459c <memset@plt>
   3f588:	ldr	r3, [r4, #20]
   3f58c:	add	r3, r3, r5
   3f590:	add	r2, r3, #1
   3f594:	b	3f4bc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>

0003f598 <flatcc_json_printer_struct_vector_field@@Base>:
   3f598:	ldr	ip, [r1, #8]
   3f59c:	add	r2, r2, #2
   3f5a0:	lsl	r2, r2, #1
   3f5a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3f5a8:	strd	r6, [sp, #8]
   3f5ac:	strd	r8, [sp, #16]
   3f5b0:	strd	sl, [sp, #24]
   3f5b4:	cmp	r2, ip
   3f5b8:	str	lr, [sp, #32]
   3f5bc:	sub	sp, sp, #4
   3f5c0:	ldr	r8, [sp, #44]	; 0x2c
   3f5c4:	ldr	r7, [sp, #48]	; 0x30
   3f5c8:	bge	3f7dc <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3f5cc:	ldr	ip, [r1, #4]
   3f5d0:	ldrh	r2, [ip, r2]
   3f5d4:	cmp	r2, #0
   3f5d8:	beq	3f7dc <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3f5dc:	ldr	ip, [r1]
   3f5e0:	adds	lr, ip, r2
   3f5e4:	beq	3f7dc <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3f5e8:	ldr	r4, [r1, #16]
   3f5ec:	add	r5, r4, #1
   3f5f0:	cmp	r4, #0
   3f5f4:	str	r5, [r1, #16]
   3f5f8:	beq	3f610 <flatcc_json_printer_struct_vector_field@@Base+0x78>
   3f5fc:	ldr	r1, [r0, #20]
   3f600:	mov	r4, #44	; 0x2c
   3f604:	add	r5, r1, #1
   3f608:	str	r5, [r0, #20]
   3f60c:	strb	r4, [r1]
   3f610:	mov	r1, r3
   3f614:	ldr	r3, [ip, r2]
   3f618:	mov	r4, r0
   3f61c:	ldr	r2, [sp, #40]	; 0x28
   3f620:	add	r6, lr, r3
   3f624:	ldr	r5, [lr, r3]
   3f628:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3f62c:	ldr	r2, [r4, #20]
   3f630:	mov	r1, #91	; 0x5b
   3f634:	ldr	r3, [r4, #32]
   3f638:	cmp	r5, #0
   3f63c:	add	r0, r2, #1
   3f640:	add	r3, r3, #1
   3f644:	str	r0, [r4, #20]
   3f648:	str	r3, [r4, #32]
   3f64c:	strb	r1, [r2]
   3f650:	beq	3f7bc <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3f654:	ldrb	r1, [r4, #25]
   3f658:	ldr	r3, [r4, #20]
   3f65c:	cmp	r1, #0
   3f660:	bne	3f7f8 <flatcc_json_printer_struct_vector_field@@Base+0x260>
   3f664:	ldr	r2, [r4, #16]
   3f668:	cmp	r2, r3
   3f66c:	bhi	3f680 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3f670:	mov	r0, r4
   3f674:	ldr	r3, [r4, #44]	; 0x2c
   3f678:	blx	r3
   3f67c:	ldr	r3, [r4, #20]
   3f680:	add	r1, r3, #1
   3f684:	mov	ip, #123	; 0x7b
   3f688:	ldr	r2, [r4, #32]
   3f68c:	add	r6, r6, #4
   3f690:	mov	r0, r4
   3f694:	str	r1, [r4, #20]
   3f698:	mov	r1, r6
   3f69c:	add	r2, r2, #1
   3f6a0:	str	r2, [r4, #32]
   3f6a4:	strb	ip, [r3]
   3f6a8:	blx	r7
   3f6ac:	ldrb	r3, [r4, #25]
   3f6b0:	cmp	r3, #0
   3f6b4:	bne	3f8dc <flatcc_json_printer_struct_vector_field@@Base+0x344>
   3f6b8:	ldr	r3, [r4, #20]
   3f6bc:	mov	r2, #125	; 0x7d
   3f6c0:	cmp	r5, #1
   3f6c4:	sub	r5, r5, #2
   3f6c8:	add	r1, r3, #1
   3f6cc:	str	r1, [r4, #20]
   3f6d0:	strb	r2, [r3]
   3f6d4:	beq	3f7bc <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3f6d8:	mov	r9, #44	; 0x2c
   3f6dc:	mov	sl, #10
   3f6e0:	b	3f758 <flatcc_json_printer_struct_vector_field@@Base+0x1c0>
   3f6e4:	ldr	r3, [r4, #16]
   3f6e8:	ldr	r2, [r4, #20]
   3f6ec:	cmp	r2, r3
   3f6f0:	bcc	3f704 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3f6f4:	mov	r0, r4
   3f6f8:	ldr	r3, [r4, #44]	; 0x2c
   3f6fc:	blx	r3
   3f700:	ldr	r2, [r4, #20]
   3f704:	add	r0, r2, #1
   3f708:	mov	ip, #123	; 0x7b
   3f70c:	ldr	r3, [r4, #32]
   3f710:	mov	r1, r6
   3f714:	str	r0, [r4, #20]
   3f718:	mov	r0, r4
   3f71c:	add	r3, r3, #1
   3f720:	str	r3, [r4, #32]
   3f724:	strb	ip, [r2]
   3f728:	blx	r7
   3f72c:	ldrb	r3, [r4, #25]
   3f730:	cmp	r3, #0
   3f734:	bne	3f818 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   3f738:	ldr	r1, [r4, #20]
   3f73c:	sub	r5, r5, #1
   3f740:	add	r2, r1, #1
   3f744:	mov	r3, #125	; 0x7d
   3f748:	cmn	r5, #1
   3f74c:	str	r2, [r4, #20]
   3f750:	strb	r3, [r1]
   3f754:	beq	3f7bc <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3f758:	ldr	r3, [r4, #20]
   3f75c:	add	r6, r6, r8
   3f760:	add	r2, r3, #1
   3f764:	str	r2, [r4, #20]
   3f768:	strb	r9, [r3]
   3f76c:	ldrb	r1, [r4, #25]
   3f770:	cmp	r1, #0
   3f774:	beq	3f6e4 <flatcc_json_printer_struct_vector_field@@Base+0x14c>
   3f778:	ldr	r3, [r4, #20]
   3f77c:	add	r2, r3, #1
   3f780:	str	r2, [r4, #20]
   3f784:	strb	sl, [r3]
   3f788:	ldrb	r3, [r4, #25]
   3f78c:	ldr	r1, [r4, #16]
   3f790:	ldr	r2, [r4, #32]
   3f794:	ldr	r0, [r4, #20]
   3f798:	mul	fp, r2, r3
   3f79c:	add	r3, r0, fp
   3f7a0:	cmp	r1, r3
   3f7a4:	bcs	3f860 <flatcc_json_printer_struct_vector_field@@Base+0x2c8>
   3f7a8:	mov	r1, fp
   3f7ac:	mov	r0, r4
   3f7b0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f7b4:	ldr	r2, [r4, #20]
   3f7b8:	b	3f704 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3f7bc:	ldrb	r2, [r4, #25]
   3f7c0:	ldr	r3, [r4, #20]
   3f7c4:	cmp	r2, #0
   3f7c8:	add	r2, r3, #1
   3f7cc:	bne	3f890 <flatcc_json_printer_struct_vector_field@@Base+0x2f8>
   3f7d0:	mov	r1, #93	; 0x5d
   3f7d4:	str	r2, [r4, #20]
   3f7d8:	strb	r1, [r3]
   3f7dc:	add	sp, sp, #4
   3f7e0:	ldrd	r4, [sp]
   3f7e4:	ldrd	r6, [sp, #8]
   3f7e8:	ldrd	r8, [sp, #16]
   3f7ec:	ldrd	sl, [sp, #24]
   3f7f0:	add	sp, sp, #32
   3f7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   3f7f8:	add	r1, r3, #1
   3f7fc:	mov	r2, #10
   3f800:	mov	r0, r4
   3f804:	str	r1, [r4, #20]
   3f808:	strb	r2, [r3]
   3f80c:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3f810:	ldr	r3, [r4, #20]
   3f814:	b	3f680 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3f818:	ldr	r3, [r4, #20]
   3f81c:	add	r2, r3, #1
   3f820:	str	r2, [r4, #20]
   3f824:	strb	sl, [r3]
   3f828:	ldrb	r1, [r4, #25]
   3f82c:	ldr	r3, [r4, #32]
   3f830:	ldr	r2, [r4, #16]
   3f834:	ldr	r0, [r4, #20]
   3f838:	sub	r3, r3, #1
   3f83c:	mul	fp, r3, r1
   3f840:	str	r3, [r4, #32]
   3f844:	add	r3, r0, fp
   3f848:	cmp	r2, r3
   3f84c:	bcs	3f878 <flatcc_json_printer_struct_vector_field@@Base+0x2e0>
   3f850:	mov	r1, fp
   3f854:	mov	r0, r4
   3f858:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f85c:	b	3f738 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
   3f860:	mov	r2, fp
   3f864:	mov	r1, #32
   3f868:	bl	1459c <memset@plt>
   3f86c:	ldr	r2, [r4, #20]
   3f870:	add	r2, r2, fp
   3f874:	b	3f704 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3f878:	mov	r1, #32
   3f87c:	mov	r2, fp
   3f880:	bl	1459c <memset@plt>
   3f884:	ldr	r1, [r4, #20]
   3f888:	add	r1, r1, fp
   3f88c:	b	3f73c <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   3f890:	mov	r1, #10
   3f894:	str	r2, [r4, #20]
   3f898:	strb	r1, [r3]
   3f89c:	ldrb	r3, [r4, #25]
   3f8a0:	ldr	r2, [r4, #32]
   3f8a4:	ldr	r1, [r4, #16]
   3f8a8:	ldr	r0, [r4, #20]
   3f8ac:	sub	r2, r2, #1
   3f8b0:	mul	r5, r2, r3
   3f8b4:	str	r2, [r4, #32]
   3f8b8:	add	r3, r0, r5
   3f8bc:	cmp	r1, r3
   3f8c0:	bcs	3f908 <flatcc_json_printer_struct_vector_field@@Base+0x370>
   3f8c4:	mov	r1, r5
   3f8c8:	mov	r0, r4
   3f8cc:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3f8d0:	ldr	r3, [r4, #20]
   3f8d4:	add	r2, r3, #1
   3f8d8:	b	3f7d0 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   3f8dc:	ldr	r3, [r4, #20]
   3f8e0:	mov	r2, #10
   3f8e4:	mov	r0, r4
   3f8e8:	add	r1, r3, #1
   3f8ec:	str	r1, [r4, #20]
   3f8f0:	strb	r2, [r3]
   3f8f4:	ldr	r3, [r4, #32]
   3f8f8:	sub	r3, r3, #1
   3f8fc:	str	r3, [r4, #32]
   3f900:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   3f904:	b	3f6b8 <flatcc_json_printer_struct_vector_field@@Base+0x120>
   3f908:	mov	r2, r5
   3f90c:	mov	r1, #32
   3f910:	bl	1459c <memset@plt>
   3f914:	ldr	r3, [r4, #20]
   3f918:	add	r3, r3, r5
   3f91c:	add	r2, r3, #1
   3f920:	b	3f7d0 <flatcc_json_printer_struct_vector_field@@Base+0x238>

0003f924 <flatcc_json_printer_string_vector_field@@Base>:
   3f924:	ldr	ip, [r1, #8]
   3f928:	add	r2, r2, #2
   3f92c:	lsl	r2, r2, #1
   3f930:	cmp	ip, r2
   3f934:	bxle	lr
   3f938:	ldr	ip, [r1, #4]
   3f93c:	ldrh	r2, [ip, r2]
   3f940:	cmp	r2, #0
   3f944:	bxeq	lr
   3f948:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3f94c:	ldr	ip, [r1]
   3f950:	strd	r6, [sp, #8]
   3f954:	str	lr, [sp, #28]
   3f958:	strd	r8, [sp, #16]
   3f95c:	str	sl, [sp, #24]
   3f960:	adds	lr, ip, r2
   3f964:	beq	3fb00 <flatcc_json_printer_string_vector_field@@Base+0x1dc>
   3f968:	ldr	r4, [r1, #16]
   3f96c:	add	r5, r4, #1
   3f970:	cmp	r4, #0
   3f974:	str	r5, [r1, #16]
   3f978:	beq	3f990 <flatcc_json_printer_string_vector_field@@Base+0x6c>
   3f97c:	ldr	r1, [r0, #20]
   3f980:	mov	r4, #44	; 0x2c
   3f984:	add	r5, r1, #1
   3f988:	str	r5, [r0, #20]
   3f98c:	strb	r4, [r1]
   3f990:	mov	r1, r3
   3f994:	ldr	r3, [ip, r2]
   3f998:	mov	r4, r0
   3f99c:	ldr	r2, [sp, #32]
   3f9a0:	add	r6, lr, r3
   3f9a4:	ldr	r5, [lr, r3]
   3f9a8:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   3f9ac:	ldr	r2, [r4, #20]
   3f9b0:	mov	r1, #91	; 0x5b
   3f9b4:	ldr	r3, [r4, #32]
   3f9b8:	cmp	r5, #0
   3f9bc:	add	r0, r2, #1
   3f9c0:	add	r3, r3, #1
   3f9c4:	str	r0, [r4, #20]
   3f9c8:	str	r3, [r4, #32]
   3f9cc:	strb	r1, [r2]
   3f9d0:	beq	3fae0 <flatcc_json_printer_string_vector_field@@Base+0x1bc>
   3f9d4:	ldrb	r1, [r4, #25]
   3f9d8:	ldr	r3, [r4, #20]
   3f9dc:	cmp	r1, #0
   3f9e0:	bne	3fb18 <flatcc_json_printer_string_vector_field@@Base+0x1f4>
   3f9e4:	ldr	r2, [r4, #16]
   3f9e8:	cmp	r2, r3
   3f9ec:	bhi	3f9fc <flatcc_json_printer_string_vector_field@@Base+0xd8>
   3f9f0:	mov	r0, r4
   3f9f4:	ldr	r3, [r4, #44]	; 0x2c
   3f9f8:	blx	r3
   3f9fc:	ldr	r3, [r6, #4]
   3fa00:	mov	r0, r4
   3fa04:	sub	r7, r5, #2
   3fa08:	add	r3, r3, #4
   3fa0c:	add	r1, r6, r3
   3fa10:	ldr	r2, [r6, r3]
   3fa14:	add	r1, r1, #4
   3fa18:	bl	3457c <flatcc_json_parser_struct_as_root@@Base+0x105c>
   3fa1c:	cmp	r5, #1
   3fa20:	beq	3fae0 <flatcc_json_printer_string_vector_field@@Base+0x1bc>
   3fa24:	add	r6, r6, #8
   3fa28:	mov	r8, #44	; 0x2c
   3fa2c:	mov	r9, #10
   3fa30:	b	3fa78 <flatcc_json_printer_string_vector_field@@Base+0x154>
   3fa34:	ldr	r3, [r4, #16]
   3fa38:	mov	r0, r4
   3fa3c:	ldr	r2, [r4, #20]
   3fa40:	cmp	r2, r3
   3fa44:	bcc	3fa50 <flatcc_json_printer_string_vector_field@@Base+0x12c>
   3fa48:	ldr	r3, [r4, #44]	; 0x2c
   3fa4c:	blx	r3
   3fa50:	ldr	r3, [r5]
   3fa54:	sub	r7, r7, #1
   3fa58:	mov	r0, r4
   3fa5c:	add	r6, r6, #4
   3fa60:	add	r1, r5, r3
   3fa64:	ldr	r2, [r5, r3]
   3fa68:	add	r1, r1, #4
   3fa6c:	bl	3457c <flatcc_json_parser_struct_as_root@@Base+0x105c>
   3fa70:	cmn	r7, #1
   3fa74:	beq	3fae0 <flatcc_json_printer_string_vector_field@@Base+0x1bc>
   3fa78:	ldr	r3, [r4, #20]
   3fa7c:	mov	r5, r6
   3fa80:	add	r2, r3, #1
   3fa84:	str	r2, [r4, #20]
   3fa88:	strb	r8, [r3]
   3fa8c:	ldrb	r1, [r4, #25]
   3fa90:	cmp	r1, #0
   3fa94:	beq	3fa34 <flatcc_json_printer_string_vector_field@@Base+0x110>
   3fa98:	ldr	r3, [r4, #20]
   3fa9c:	mov	r1, #32
   3faa0:	mov	r0, r4
   3faa4:	add	r2, r3, #1
   3faa8:	str	r2, [r4, #20]
   3faac:	strb	r9, [r3]
   3fab0:	ldrb	r2, [r4, #25]
   3fab4:	ldr	lr, [r4, #16]
   3fab8:	ldr	sl, [r4, #32]
   3fabc:	ldr	r3, [r4, #20]
   3fac0:	mul	sl, sl, r2
   3fac4:	add	ip, r3, sl
   3fac8:	mov	r2, sl
   3facc:	cmp	lr, ip
   3fad0:	bcs	3fb58 <flatcc_json_printer_string_vector_field@@Base+0x234>
   3fad4:	mov	r1, sl
   3fad8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3fadc:	b	3fa50 <flatcc_json_printer_string_vector_field@@Base+0x12c>
   3fae0:	ldrb	r2, [r4, #25]
   3fae4:	ldr	r3, [r4, #20]
   3fae8:	cmp	r2, #0
   3faec:	add	r2, r3, #1
   3faf0:	bne	3fb70 <flatcc_json_printer_string_vector_field@@Base+0x24c>
   3faf4:	mov	r1, #93	; 0x5d
   3faf8:	str	r2, [r4, #20]
   3fafc:	strb	r1, [r3]
   3fb00:	ldrd	r4, [sp]
   3fb04:	ldrd	r6, [sp, #8]
   3fb08:	ldrd	r8, [sp, #16]
   3fb0c:	ldr	sl, [sp, #24]
   3fb10:	add	sp, sp, #28
   3fb14:	pop	{pc}		; (ldr pc, [sp], #4)
   3fb18:	add	r1, r3, #1
   3fb1c:	mov	r2, #10
   3fb20:	str	r1, [r4, #20]
   3fb24:	strb	r2, [r3]
   3fb28:	ldrb	r3, [r4, #25]
   3fb2c:	ldr	r2, [r4, #16]
   3fb30:	ldr	r7, [r4, #32]
   3fb34:	ldr	r0, [r4, #20]
   3fb38:	mul	r7, r7, r3
   3fb3c:	add	r3, r0, r7
   3fb40:	cmp	r2, r3
   3fb44:	bcs	3fbd8 <flatcc_json_printer_string_vector_field@@Base+0x2b4>
   3fb48:	mov	r1, r7
   3fb4c:	mov	r0, r4
   3fb50:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3fb54:	b	3f9fc <flatcc_json_printer_string_vector_field@@Base+0xd8>
   3fb58:	mov	r0, r3
   3fb5c:	bl	1459c <memset@plt>
   3fb60:	ldr	r3, [r4, #20]
   3fb64:	add	sl, r3, sl
   3fb68:	str	sl, [r4, #20]
   3fb6c:	b	3fa50 <flatcc_json_printer_string_vector_field@@Base+0x12c>
   3fb70:	mov	r1, #10
   3fb74:	str	r2, [r4, #20]
   3fb78:	strb	r1, [r3]
   3fb7c:	ldrb	r3, [r4, #25]
   3fb80:	ldr	r2, [r4, #32]
   3fb84:	ldr	r1, [r4, #16]
   3fb88:	ldr	r0, [r4, #20]
   3fb8c:	sub	r2, r2, #1
   3fb90:	mul	r5, r2, r3
   3fb94:	str	r2, [r4, #32]
   3fb98:	add	r3, r0, r5
   3fb9c:	cmp	r1, r3
   3fba0:	bcs	3fbbc <flatcc_json_printer_string_vector_field@@Base+0x298>
   3fba4:	mov	r1, r5
   3fba8:	mov	r0, r4
   3fbac:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3fbb0:	ldr	r3, [r4, #20]
   3fbb4:	add	r2, r3, #1
   3fbb8:	b	3faf4 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
   3fbbc:	mov	r2, r5
   3fbc0:	mov	r1, #32
   3fbc4:	bl	1459c <memset@plt>
   3fbc8:	ldr	r3, [r4, #20]
   3fbcc:	add	r3, r3, r5
   3fbd0:	add	r2, r3, #1
   3fbd4:	b	3faf4 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
   3fbd8:	mov	r2, r7
   3fbdc:	mov	r1, #32
   3fbe0:	bl	1459c <memset@plt>
   3fbe4:	ldr	r3, [r4, #20]
   3fbe8:	add	r7, r3, r7
   3fbec:	str	r7, [r4, #20]
   3fbf0:	b	3f9fc <flatcc_json_printer_string_vector_field@@Base+0xd8>

0003fbf4 <flatcc_json_printer_table_vector_field@@Base>:
   3fbf4:	ldr	ip, [r1, #8]
   3fbf8:	add	r2, r2, #2
   3fbfc:	lsl	r2, r2, #1
   3fc00:	cmp	ip, r2
   3fc04:	bxle	lr
   3fc08:	ldr	ip, [r1, #4]
   3fc0c:	ldrh	r2, [ip, r2]
   3fc10:	cmp	r2, #0
   3fc14:	bxeq	lr
   3fc18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3fc1c:	strd	r6, [sp, #8]
   3fc20:	str	lr, [sp, #32]
   3fc24:	ldr	lr, [r1]
   3fc28:	strd	r8, [sp, #16]
   3fc2c:	strd	sl, [sp, #24]
   3fc30:	sub	sp, sp, #28
   3fc34:	adds	r6, lr, r2
   3fc38:	beq	3fd74 <flatcc_json_printer_table_vector_field@@Base+0x180>
   3fc3c:	ldr	r4, [r1, #16]
   3fc40:	ldr	ip, [r0, #20]
   3fc44:	cmp	r4, #0
   3fc48:	add	r4, r4, #1
   3fc4c:	str	r4, [r1, #16]
   3fc50:	beq	3fc68 <flatcc_json_printer_table_vector_field@@Base+0x74>
   3fc54:	add	r5, ip, #1
   3fc58:	mov	r4, #44	; 0x2c
   3fc5c:	str	r5, [r0, #20]
   3fc60:	strb	r4, [ip]
   3fc64:	ldr	ip, [r0, #20]
   3fc68:	mov	r7, r1
   3fc6c:	mov	r5, r3
   3fc70:	ldrb	r1, [r0, #25]
   3fc74:	mov	r4, r0
   3fc78:	ldr	r3, [lr, r2]
   3fc7c:	cmp	r1, #0
   3fc80:	add	r8, r6, r3
   3fc84:	ldr	r6, [r6, r3]
   3fc88:	bne	3fdb0 <flatcc_json_printer_table_vector_field@@Base+0x1bc>
   3fc8c:	ldr	r3, [r0, #16]
   3fc90:	cmp	r3, ip
   3fc94:	bls	3fda0 <flatcc_json_printer_table_vector_field@@Base+0x1ac>
   3fc98:	mov	r3, #34	; 0x22
   3fc9c:	mov	r1, r5
   3fca0:	strb	r3, [ip]
   3fca4:	ldrb	r3, [r4, #26]
   3fca8:	ldr	r2, [r4, #16]
   3fcac:	ldr	r0, [r4, #20]
   3fcb0:	cmp	r3, #0
   3fcb4:	addeq	r0, r0, #1
   3fcb8:	ldr	r3, [sp, #64]	; 0x40
   3fcbc:	str	r0, [r4, #20]
   3fcc0:	add	r3, r0, r3
   3fcc4:	cmp	r2, r3
   3fcc8:	ldr	r2, [sp, #64]	; 0x40
   3fccc:	bls	3fd90 <flatcc_json_printer_table_vector_field@@Base+0x19c>
   3fcd0:	bl	14524 <memcpy@plt>
   3fcd4:	ldr	r3, [r4, #20]
   3fcd8:	ldr	r2, [sp, #64]	; 0x40
   3fcdc:	add	r3, r3, r2
   3fce0:	str	r3, [r4, #20]
   3fce4:	mov	r2, #34	; 0x22
   3fce8:	mov	ip, #58	; 0x3a
   3fcec:	mov	r9, #32
   3fcf0:	mov	r0, #91	; 0x5b
   3fcf4:	strb	r2, [r3]
   3fcf8:	ldrb	r3, [r4, #26]
   3fcfc:	ldr	r1, [r4, #20]
   3fd00:	clz	r3, r3
   3fd04:	lsr	r3, r3, #5
   3fd08:	add	r2, r1, r3
   3fd0c:	add	r2, r2, #1
   3fd10:	str	r2, [r4, #20]
   3fd14:	strb	ip, [r1, r3]
   3fd18:	ldr	r3, [r4, #20]
   3fd1c:	strb	r9, [r3]
   3fd20:	ldrb	r3, [r4, #25]
   3fd24:	ldr	ip, [r4, #20]
   3fd28:	ldr	r2, [r4, #32]
   3fd2c:	adds	r3, r3, #0
   3fd30:	movne	r3, #1
   3fd34:	cmp	r6, #0
   3fd38:	add	r1, ip, r3
   3fd3c:	add	r1, r1, #1
   3fd40:	add	r2, r2, #1
   3fd44:	str	r1, [r4, #20]
   3fd48:	str	r2, [r4, #32]
   3fd4c:	strb	r0, [ip, r3]
   3fd50:	bne	3fe40 <flatcc_json_printer_table_vector_field@@Base+0x24c>
   3fd54:	ldr	r3, [r4, #20]
   3fd58:	add	r2, r3, #1
   3fd5c:	ldrb	r1, [r4, #25]
   3fd60:	cmp	r1, #0
   3fd64:	bne	3fdf4 <flatcc_json_printer_table_vector_field@@Base+0x200>
   3fd68:	mov	r1, #93	; 0x5d
   3fd6c:	str	r2, [r4, #20]
   3fd70:	strb	r1, [r3]
   3fd74:	add	sp, sp, #28
   3fd78:	ldrd	r4, [sp]
   3fd7c:	ldrd	r6, [sp, #8]
   3fd80:	ldrd	r8, [sp, #16]
   3fd84:	ldrd	sl, [sp, #24]
   3fd88:	add	sp, sp, #32
   3fd8c:	pop	{pc}		; (ldr pc, [sp], #4)
   3fd90:	mov	r0, r4
   3fd94:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   3fd98:	ldr	r3, [r4, #20]
   3fd9c:	b	3fce4 <flatcc_json_printer_table_vector_field@@Base+0xf0>
   3fda0:	ldr	r3, [r0, #44]	; 0x2c
   3fda4:	blx	r3
   3fda8:	ldr	ip, [r4, #20]
   3fdac:	b	3fc98 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3fdb0:	add	r2, ip, #1
   3fdb4:	mov	r3, #10
   3fdb8:	str	r2, [r0, #20]
   3fdbc:	strb	r3, [ip]
   3fdc0:	ldrb	r3, [r0, #25]
   3fdc4:	ldr	ip, [r4, #32]
   3fdc8:	ldr	r2, [r0, #16]
   3fdcc:	ldr	r0, [r0, #20]
   3fdd0:	mul	r9, ip, r3
   3fdd4:	add	r3, r0, r9
   3fdd8:	cmp	r2, r3
   3fddc:	bcs	4000c <flatcc_json_printer_table_vector_field@@Base+0x418>
   3fde0:	mov	r1, r9
   3fde4:	mov	r0, r4
   3fde8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3fdec:	ldr	ip, [r4, #20]
   3fdf0:	b	3fc98 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3fdf4:	mov	r1, #10
   3fdf8:	str	r2, [r4, #20]
   3fdfc:	strb	r1, [r3]
   3fe00:	ldrb	r3, [r4, #25]
   3fe04:	ldr	r2, [r4, #32]
   3fe08:	ldr	r1, [r4, #16]
   3fe0c:	ldr	r0, [r4, #20]
   3fe10:	sub	r2, r2, #1
   3fe14:	mul	r5, r2, r3
   3fe18:	str	r2, [r4, #32]
   3fe1c:	add	r3, r0, r5
   3fe20:	cmp	r1, r3
   3fe24:	bcs	40028 <flatcc_json_printer_table_vector_field@@Base+0x434>
   3fe28:	mov	r1, r5
   3fe2c:	mov	r0, r4
   3fe30:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3fe34:	ldr	r3, [r4, #20]
   3fe38:	add	r2, r3, #1
   3fe3c:	b	3fd68 <flatcc_json_printer_table_vector_field@@Base+0x174>
   3fe40:	ldr	r2, [r7, #12]
   3fe44:	add	r5, r8, #4
   3fe48:	ldr	r3, [r4, #20]
   3fe4c:	subs	r2, r2, #1
   3fe50:	beq	40044 <flatcc_json_printer_table_vector_field@@Base+0x450>
   3fe54:	ldr	r1, [r4, #32]
   3fe58:	add	sl, r3, #1
   3fe5c:	mov	r0, #123	; 0x7b
   3fe60:	mov	lr, #0
   3fe64:	ldr	ip, [r8, #4]
   3fe68:	str	sl, [r4, #20]
   3fe6c:	add	r1, r1, #1
   3fe70:	str	r1, [r4, #32]
   3fe74:	add	r1, sp, #4
   3fe78:	strb	r0, [r3]
   3fe7c:	add	r3, r5, ip
   3fe80:	mov	r0, r4
   3fe84:	str	r2, [sp, #16]
   3fe88:	str	lr, [sp, #20]
   3fe8c:	ldr	r2, [r5, ip]
   3fe90:	str	r3, [sp, #4]
   3fe94:	sub	r3, r3, r2
   3fe98:	ldrh	r2, [r3]
   3fe9c:	str	r3, [sp, #8]
   3fea0:	ldr	r3, [sp, #68]	; 0x44
   3fea4:	str	r2, [sp, #12]
   3fea8:	blx	r3
   3feac:	ldrb	r3, [r4, #25]
   3feb0:	cmp	r3, #0
   3feb4:	ldr	r3, [r4, #20]
   3feb8:	bne	40058 <flatcc_json_printer_table_vector_field@@Base+0x464>
   3febc:	add	r1, r3, #1
   3fec0:	mov	r2, #125	; 0x7d
   3fec4:	str	r1, [r4, #20]
   3fec8:	strb	r2, [r3]
   3fecc:	ldr	r3, [r4, #20]
   3fed0:	cmp	r6, #1
   3fed4:	add	r2, r3, #1
   3fed8:	sub	r6, r6, #2
   3fedc:	beq	3fd5c <flatcc_json_printer_table_vector_field@@Base+0x168>
   3fee0:	mov	r8, #44	; 0x2c
   3fee4:	mov	sl, #123	; 0x7b
   3fee8:	mov	r9, #0
   3feec:	b	3ff70 <flatcc_json_printer_table_vector_field@@Base+0x37c>
   3fef0:	ldr	lr, [r4, #20]
   3fef4:	ldr	r2, [r4, #32]
   3fef8:	ldr	ip, [r5]
   3fefc:	add	fp, lr, #1
   3ff00:	add	r2, r2, #1
   3ff04:	str	fp, [r4, #20]
   3ff08:	str	r2, [r4, #32]
   3ff0c:	add	r2, r5, ip
   3ff10:	strb	sl, [lr]
   3ff14:	str	r3, [sp, #16]
   3ff18:	str	r9, [sp, #20]
   3ff1c:	ldr	r3, [r5, ip]
   3ff20:	str	r2, [sp, #4]
   3ff24:	sub	r3, r2, r3
   3ff28:	ldrh	r2, [r3]
   3ff2c:	str	r3, [sp, #8]
   3ff30:	ldr	r3, [sp, #68]	; 0x44
   3ff34:	str	r2, [sp, #12]
   3ff38:	blx	r3
   3ff3c:	ldrb	r3, [r4, #25]
   3ff40:	cmp	r3, #0
   3ff44:	bne	3ffa4 <flatcc_json_printer_table_vector_field@@Base+0x3b0>
   3ff48:	ldr	fp, [r4, #20]
   3ff4c:	add	r2, fp, #1
   3ff50:	mov	r3, #125	; 0x7d
   3ff54:	str	r2, [r4, #20]
   3ff58:	strb	r3, [fp]
   3ff5c:	ldr	r3, [r4, #20]
   3ff60:	sub	r6, r6, #1
   3ff64:	cmn	r6, #1
   3ff68:	add	r2, r3, #1
   3ff6c:	beq	3fd5c <flatcc_json_printer_table_vector_field@@Base+0x168>
   3ff70:	str	r2, [r4, #20]
   3ff74:	add	r1, sp, #4
   3ff78:	mov	r0, r4
   3ff7c:	strb	r8, [r3]
   3ff80:	add	r5, r5, #4
   3ff84:	ldr	r3, [r7, #12]
   3ff88:	subs	r3, r3, #1
   3ff8c:	bne	3fef0 <flatcc_json_printer_table_vector_field@@Base+0x2fc>
   3ff90:	ldr	r3, [r4, #36]	; 0x24
   3ff94:	mov	r2, #2
   3ff98:	cmp	r3, #0
   3ff9c:	streq	r2, [r4, #36]	; 0x24
   3ffa0:	b	3ff5c <flatcc_json_printer_table_vector_field@@Base+0x368>
   3ffa4:	ldr	r3, [r4, #20]
   3ffa8:	mov	r2, #10
   3ffac:	mov	r1, #32
   3ffb0:	mov	r0, r4
   3ffb4:	add	ip, r3, #1
   3ffb8:	str	ip, [r4, #20]
   3ffbc:	strb	r2, [r3]
   3ffc0:	ldrb	fp, [r4, #25]
   3ffc4:	ldr	r2, [r4, #32]
   3ffc8:	ldr	lr, [r4, #16]
   3ffcc:	ldr	r3, [r4, #20]
   3ffd0:	sub	r2, r2, #1
   3ffd4:	mul	fp, r2, fp
   3ffd8:	str	r2, [r4, #32]
   3ffdc:	add	ip, r3, fp
   3ffe0:	mov	r2, fp
   3ffe4:	cmp	lr, ip
   3ffe8:	bcs	3fff8 <flatcc_json_printer_table_vector_field@@Base+0x404>
   3ffec:	mov	r1, fp
   3fff0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   3fff4:	b	3ff48 <flatcc_json_printer_table_vector_field@@Base+0x354>
   3fff8:	mov	r0, r3
   3fffc:	bl	1459c <memset@plt>
   40000:	ldr	r3, [r4, #20]
   40004:	add	fp, r3, fp
   40008:	b	3ff4c <flatcc_json_printer_table_vector_field@@Base+0x358>
   4000c:	mov	r2, r9
   40010:	mov	r1, #32
   40014:	bl	1459c <memset@plt>
   40018:	ldr	ip, [r4, #20]
   4001c:	add	ip, ip, r9
   40020:	str	ip, [r4, #20]
   40024:	b	3fc98 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   40028:	mov	r2, r5
   4002c:	mov	r1, #32
   40030:	bl	1459c <memset@plt>
   40034:	ldr	r3, [r4, #20]
   40038:	add	r3, r3, r5
   4003c:	add	r2, r3, #1
   40040:	b	3fd68 <flatcc_json_printer_table_vector_field@@Base+0x174>
   40044:	ldr	r2, [r4, #36]	; 0x24
   40048:	cmp	r2, #0
   4004c:	moveq	r2, #2
   40050:	streq	r2, [r4, #36]	; 0x24
   40054:	b	3fed0 <flatcc_json_printer_table_vector_field@@Base+0x2dc>
   40058:	add	r1, r3, #1
   4005c:	mov	r2, #10
   40060:	str	r1, [r4, #20]
   40064:	strb	r2, [r3]
   40068:	ldrb	r3, [r4, #25]
   4006c:	ldr	r2, [r4, #32]
   40070:	ldr	r1, [r4, #16]
   40074:	ldr	r0, [r4, #20]
   40078:	sub	r2, r2, #1
   4007c:	mul	r8, r2, r3
   40080:	str	r2, [r4, #32]
   40084:	add	r3, r0, r8
   40088:	cmp	r1, r3
   4008c:	bcs	400a4 <flatcc_json_printer_table_vector_field@@Base+0x4b0>
   40090:	mov	r1, r8
   40094:	mov	r0, r4
   40098:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   4009c:	ldr	r3, [r4, #20]
   400a0:	b	3febc <flatcc_json_printer_table_vector_field@@Base+0x2c8>
   400a4:	mov	r1, r9
   400a8:	mov	r2, r8
   400ac:	bl	1459c <memset@plt>
   400b0:	ldr	r3, [r4, #20]
   400b4:	add	r3, r3, r8
   400b8:	b	3febc <flatcc_json_printer_table_vector_field@@Base+0x2c8>

000400bc <flatcc_json_printer_union_vector_field@@Base>:
   400bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   400c0:	mov	r5, r1
   400c4:	mov	r4, r0
   400c8:	ldr	r1, [r1, #8]
   400cc:	strd	r6, [sp, #8]
   400d0:	strd	r8, [sp, #16]
   400d4:	mov	r9, r2
   400d8:	add	r2, r2, #1
   400dc:	lsl	r2, r2, #1
   400e0:	strd	sl, [sp, #24]
   400e4:	mov	fp, r3
   400e8:	str	lr, [sp, #32]
   400ec:	sub	sp, sp, #140	; 0x8c
   400f0:	cmp	r2, r1
   400f4:	ldr	r6, [sp, #176]	; 0xb0
   400f8:	movge	r7, #0
   400fc:	bge	40114 <flatcc_json_printer_union_vector_field@@Base+0x58>
   40100:	ldr	r3, [r5, #4]
   40104:	ldrh	r7, [r3, r2]
   40108:	cmp	r7, #0
   4010c:	ldrne	r3, [r5]
   40110:	addne	r7, r3, r7
   40114:	add	r2, r2, #2
   40118:	ldr	r3, [r5, #12]
   4011c:	cmp	r2, r1
   40120:	bge	402d0 <flatcc_json_printer_union_vector_field@@Base+0x214>
   40124:	ldr	r1, [r5, #4]
   40128:	ldrh	r8, [r1, r2]
   4012c:	cmp	r8, #0
   40130:	beq	402d0 <flatcc_json_printer_union_vector_field@@Base+0x214>
   40134:	ldr	r2, [r5]
   40138:	cmp	r6, #100	; 0x64
   4013c:	add	sl, r2, r8
   40140:	str	r2, [sp, #12]
   40144:	str	r3, [sp, #20]
   40148:	bgt	402dc <flatcc_json_printer_union_vector_field@@Base+0x220>
   4014c:	add	r3, sp, #28
   40150:	mov	r2, r6
   40154:	mov	r0, r3
   40158:	mov	r1, fp
   4015c:	bl	14524 <memcpy@plt>
   40160:	movw	r2, #34864	; 0x8830
   40164:	movt	r2, #4
   40168:	mov	r3, r0
   4016c:	ldrb	r0, [r2, #4]
   40170:	cmp	sl, #0
   40174:	cmpne	r7, #0
   40178:	add	r1, r3, r6
   4017c:	ldr	r2, [r2]
   40180:	str	r2, [r3, r6]
   40184:	strb	r0, [r1, #4]
   40188:	bne	401a8 <flatcc_json_printer_union_vector_field@@Base+0xec>
   4018c:	add	sp, sp, #140	; 0x8c
   40190:	ldrd	r4, [sp]
   40194:	ldrd	r6, [sp, #8]
   40198:	ldrd	r8, [sp, #16]
   4019c:	ldrd	sl, [sp, #24]
   401a0:	add	sp, sp, #32
   401a4:	pop	{pc}		; (ldr pc, [sp], #4)
   401a8:	ldr	r2, [sp, #180]	; 0xb4
   401ac:	add	r0, r6, #5
   401b0:	mov	r1, r5
   401b4:	stm	sp, {r0, r2}
   401b8:	sub	r2, r9, #1
   401bc:	mov	r0, r4
   401c0:	bl	3ddc4 <flatcc_json_printer_uint8_enum_vector_field@@Base>
   401c4:	ldr	r3, [r5, #16]
   401c8:	add	r2, r3, #1
   401cc:	cmp	r3, #0
   401d0:	str	r2, [r5, #16]
   401d4:	beq	401ec <flatcc_json_printer_union_vector_field@@Base+0x130>
   401d8:	ldr	r3, [r4, #20]
   401dc:	mov	r2, #44	; 0x2c
   401e0:	add	r1, r3, #1
   401e4:	str	r1, [r4, #20]
   401e8:	strb	r2, [r3]
   401ec:	ldr	r3, [sp, #12]
   401f0:	mov	r2, r6
   401f4:	mov	r1, fp
   401f8:	mov	r0, r4
   401fc:	ldr	r5, [r7]
   40200:	ldr	r3, [r3, r8]
   40204:	add	r6, sl, r3
   40208:	ldr	r8, [sl, r3]
   4020c:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   40210:	ldr	r2, [r4, #20]
   40214:	mov	r1, #91	; 0x5b
   40218:	ldr	r3, [r4, #32]
   4021c:	cmp	r8, #0
   40220:	add	r0, r2, #1
   40224:	add	r3, r3, #1
   40228:	str	r0, [r4, #20]
   4022c:	str	r3, [r4, #32]
   40230:	strb	r1, [r2]
   40234:	beq	40308 <flatcc_json_printer_union_vector_field@@Base+0x24c>
   40238:	add	r7, r7, r5
   4023c:	add	r6, r6, #4
   40240:	ldrb	r3, [r7, #4]
   40244:	cmp	r3, #0
   40248:	beq	403b0 <flatcc_json_printer_union_vector_field@@Base+0x2f4>
   4024c:	add	r1, sp, #16
   40250:	mov	r0, r4
   40254:	str	r6, [sp, #16]
   40258:	strb	r3, [sp, #24]
   4025c:	ldr	r3, [sp, #184]	; 0xb8
   40260:	blx	r3
   40264:	ldr	r3, [r4, #20]
   40268:	cmp	r8, #1
   4026c:	add	r5, r7, #4
   40270:	add	r1, r3, #1
   40274:	beq	40310 <flatcc_json_printer_union_vector_field@@Base+0x254>
   40278:	add	r8, r8, #3
   4027c:	mov	sl, #44	; 0x2c
   40280:	add	r7, r7, r8
   40284:	mov	r9, #110	; 0x6e
   40288:	mov	r8, #117	; 0x75
   4028c:	ldrb	r2, [r5, #1]!
   40290:	add	r6, r6, #4
   40294:	str	r1, [r4, #20]
   40298:	strb	sl, [r3]
   4029c:	cmp	r2, #0
   402a0:	beq	4032c <flatcc_json_printer_union_vector_field@@Base+0x270>
   402a4:	add	r1, sp, #16
   402a8:	mov	r0, r4
   402ac:	ldr	r3, [sp, #184]	; 0xb8
   402b0:	str	r6, [sp, #16]
   402b4:	strb	r2, [sp, #24]
   402b8:	blx	r3
   402bc:	ldr	r3, [r4, #20]
   402c0:	cmp	r7, r5
   402c4:	add	r1, r3, #1
   402c8:	bne	4028c <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   402cc:	b	40310 <flatcc_json_printer_union_vector_field@@Base+0x254>
   402d0:	cmp	r6, #100	; 0x64
   402d4:	str	r3, [sp, #20]
   402d8:	ble	4018c <flatcc_json_printer_union_vector_field@@Base+0xd0>
   402dc:	ldr	r3, [r4, #36]	; 0x24
   402e0:	movw	r1, #34752	; 0x87c0
   402e4:	movt	r1, #4
   402e8:	movw	r0, #34836	; 0x8814
   402ec:	movt	r0, #4
   402f0:	movw	r2, #843	; 0x34b
   402f4:	cmp	r3, #0
   402f8:	moveq	r3, #1
   402fc:	streq	r3, [r4, #36]	; 0x24
   40300:	ldr	r3, [pc, #248]	; 40400 <flatcc_json_printer_union_vector_field@@Base+0x344>
   40304:	bl	145f0 <__assert_fail@plt>
   40308:	ldr	r3, [r4, #20]
   4030c:	add	r1, r3, #1
   40310:	ldrb	r2, [r4, #25]
   40314:	cmp	r2, #0
   40318:	bne	40384 <flatcc_json_printer_union_vector_field@@Base+0x2c8>
   4031c:	mov	r2, #93	; 0x5d
   40320:	str	r1, [r4, #20]
   40324:	strb	r2, [r3]
   40328:	b	4018c <flatcc_json_printer_union_vector_field@@Base+0xd0>
   4032c:	ldr	r3, [r4, #20]
   40330:	mov	r2, #108	; 0x6c
   40334:	cmp	r7, r5
   40338:	add	r1, r3, #1
   4033c:	str	r1, [r4, #20]
   40340:	strb	r9, [r3]
   40344:	ldr	r3, [r4, #20]
   40348:	add	r1, r3, #1
   4034c:	str	r1, [r4, #20]
   40350:	strb	r8, [r3]
   40354:	ldr	r3, [r4, #20]
   40358:	add	r1, r3, #1
   4035c:	str	r1, [r4, #20]
   40360:	strb	r2, [r3]
   40364:	ldr	r3, [r4, #20]
   40368:	add	r1, r3, #1
   4036c:	str	r1, [r4, #20]
   40370:	strb	r2, [r3]
   40374:	ldr	r3, [r4, #20]
   40378:	add	r1, r3, #1
   4037c:	bne	4028c <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   40380:	b	40310 <flatcc_json_printer_union_vector_field@@Base+0x254>
   40384:	mov	r2, #10
   40388:	str	r1, [r4, #20]
   4038c:	mov	r0, r4
   40390:	strb	r2, [r3]
   40394:	ldr	r3, [r4, #32]
   40398:	sub	r3, r3, #1
   4039c:	str	r3, [r4, #32]
   403a0:	bl	34298 <flatcc_json_parser_struct_as_root@@Base+0xd78>
   403a4:	ldr	r3, [r4, #20]
   403a8:	add	r1, r3, #1
   403ac:	b	4031c <flatcc_json_printer_union_vector_field@@Base+0x260>
   403b0:	ldr	r3, [r4, #20]
   403b4:	mov	r0, #110	; 0x6e
   403b8:	mov	r1, #117	; 0x75
   403bc:	mov	r2, #108	; 0x6c
   403c0:	add	ip, r3, #1
   403c4:	str	ip, [r4, #20]
   403c8:	strb	r0, [r3]
   403cc:	ldr	r3, [r4, #20]
   403d0:	add	r0, r3, #1
   403d4:	str	r0, [r4, #20]
   403d8:	strb	r1, [r3]
   403dc:	ldr	r3, [r4, #20]
   403e0:	add	r1, r3, #1
   403e4:	str	r1, [r4, #20]
   403e8:	strb	r2, [r3]
   403ec:	ldr	r3, [r4, #20]
   403f0:	add	r1, r3, #1
   403f4:	str	r1, [r4, #20]
   403f8:	strb	r2, [r3]
   403fc:	b	40264 <flatcc_json_printer_union_vector_field@@Base+0x1a8>
   40400:	andeq	r8, r4, r8, lsr #12

00040404 <flatcc_json_printer_table_field@@Base>:
   40404:	ldr	ip, [r1, #8]
   40408:	add	r2, r2, #2
   4040c:	lsl	r2, r2, #1
   40410:	cmp	r2, ip
   40414:	bxge	lr
   40418:	strd	r4, [sp, #-32]!	; 0xffffffe0
   4041c:	ldr	ip, [r1, #4]
   40420:	strd	r6, [sp, #8]
   40424:	strd	r8, [sp, #16]
   40428:	str	sl, [sp, #24]
   4042c:	str	lr, [sp, #28]
   40430:	sub	sp, sp, #24
   40434:	ldrh	r6, [ip, r2]
   40438:	cmp	r6, #0
   4043c:	beq	405bc <flatcc_json_printer_table_field@@Base+0x1b8>
   40440:	ldr	r8, [r1]
   40444:	adds	r7, r8, r6
   40448:	beq	405bc <flatcc_json_printer_table_field@@Base+0x1b8>
   4044c:	ldr	ip, [r1, #16]
   40450:	ldr	r2, [r0, #20]
   40454:	cmp	ip, #0
   40458:	add	ip, ip, #1
   4045c:	str	ip, [r1, #16]
   40460:	beq	40478 <flatcc_json_printer_table_field@@Base+0x74>
   40464:	add	lr, r2, #1
   40468:	mov	ip, #44	; 0x2c
   4046c:	str	lr, [r0, #20]
   40470:	strb	ip, [r2]
   40474:	ldr	r2, [r0, #20]
   40478:	mov	r5, r1
   4047c:	mov	r9, r3
   40480:	ldrb	r1, [r0, #25]
   40484:	mov	r4, r0
   40488:	cmp	r1, #0
   4048c:	bne	4060c <flatcc_json_printer_table_field@@Base+0x208>
   40490:	ldr	r3, [r0, #16]
   40494:	cmp	r3, r2
   40498:	bls	405e8 <flatcc_json_printer_table_field@@Base+0x1e4>
   4049c:	mov	r3, #34	; 0x22
   404a0:	mov	r1, r9
   404a4:	strb	r3, [r2]
   404a8:	ldrb	r3, [r4, #26]
   404ac:	ldr	r2, [r4, #16]
   404b0:	ldr	r0, [r4, #20]
   404b4:	cmp	r3, #0
   404b8:	addeq	r0, r0, #1
   404bc:	ldr	r3, [sp, #56]	; 0x38
   404c0:	str	r0, [r4, #20]
   404c4:	add	r3, r0, r3
   404c8:	cmp	r2, r3
   404cc:	ldr	r2, [sp, #56]	; 0x38
   404d0:	bls	405d8 <flatcc_json_printer_table_field@@Base+0x1d4>
   404d4:	bl	14524 <memcpy@plt>
   404d8:	ldr	r3, [r4, #20]
   404dc:	ldr	r2, [sp, #56]	; 0x38
   404e0:	add	r3, r3, r2
   404e4:	str	r3, [r4, #20]
   404e8:	mov	r2, #34	; 0x22
   404ec:	mov	r0, #58	; 0x3a
   404f0:	mov	r9, #32
   404f4:	strb	r2, [r3]
   404f8:	ldrb	r3, [r4, #26]
   404fc:	ldr	r1, [r4, #20]
   40500:	clz	r3, r3
   40504:	lsr	r3, r3, #5
   40508:	add	r2, r1, r3
   4050c:	add	r2, r2, #1
   40510:	str	r2, [r4, #20]
   40514:	strb	r0, [r1, r3]
   40518:	ldr	r3, [r4, #20]
   4051c:	strb	r9, [r3]
   40520:	ldrb	r3, [r4, #25]
   40524:	ldr	r0, [r4, #20]
   40528:	ldr	r1, [r5, #12]
   4052c:	adds	r3, r3, #0
   40530:	movne	r3, #1
   40534:	add	r2, r0, r3
   40538:	subs	ip, r1, #1
   4053c:	str	r2, [r4, #20]
   40540:	beq	405f8 <flatcc_json_printer_table_field@@Base+0x1f4>
   40544:	ldr	lr, [r4, #32]
   40548:	add	r2, r2, #1
   4054c:	add	r1, sp, #4
   40550:	ldr	r5, [r8, r6]
   40554:	mov	r6, #0
   40558:	mov	r8, #123	; 0x7b
   4055c:	str	r2, [r4, #20]
   40560:	add	r2, lr, #1
   40564:	str	r2, [r4, #32]
   40568:	strb	r8, [r0, r3]
   4056c:	add	r3, r7, r5
   40570:	mov	r0, r4
   40574:	str	ip, [sp, #16]
   40578:	str	r6, [sp, #20]
   4057c:	ldr	r2, [r7, r5]
   40580:	str	r3, [sp, #4]
   40584:	sub	r3, r3, r2
   40588:	ldrh	r2, [r3]
   4058c:	str	r3, [sp, #8]
   40590:	ldr	r3, [sp, #60]	; 0x3c
   40594:	str	r2, [sp, #12]
   40598:	blx	r3
   4059c:	ldrb	r3, [r4, #25]
   405a0:	cmp	r3, r6
   405a4:	ldr	r3, [r4, #20]
   405a8:	bne	40650 <flatcc_json_printer_table_field@@Base+0x24c>
   405ac:	add	r1, r3, #1
   405b0:	mov	r2, #125	; 0x7d
   405b4:	str	r1, [r4, #20]
   405b8:	strb	r2, [r3]
   405bc:	add	sp, sp, #24
   405c0:	ldrd	r4, [sp]
   405c4:	ldrd	r6, [sp, #8]
   405c8:	ldrd	r8, [sp, #16]
   405cc:	ldr	sl, [sp, #24]
   405d0:	add	sp, sp, #28
   405d4:	pop	{pc}		; (ldr pc, [sp], #4)
   405d8:	mov	r0, r4
   405dc:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   405e0:	ldr	r3, [r4, #20]
   405e4:	b	404e8 <flatcc_json_printer_table_field@@Base+0xe4>
   405e8:	ldr	r3, [r0, #44]	; 0x2c
   405ec:	blx	r3
   405f0:	ldr	r2, [r4, #20]
   405f4:	b	4049c <flatcc_json_printer_table_field@@Base+0x98>
   405f8:	ldr	r3, [r4, #36]	; 0x24
   405fc:	cmp	r3, #0
   40600:	moveq	r3, #2
   40604:	streq	r3, [r4, #36]	; 0x24
   40608:	b	405bc <flatcc_json_printer_table_field@@Base+0x1b8>
   4060c:	add	r1, r2, #1
   40610:	mov	r3, #10
   40614:	str	r1, [r0, #20]
   40618:	strb	r3, [r2]
   4061c:	ldrb	r3, [r0, #25]
   40620:	ldr	r2, [r4, #32]
   40624:	ldr	r1, [r0, #16]
   40628:	ldr	r0, [r0, #20]
   4062c:	mul	sl, r2, r3
   40630:	add	r3, r0, sl
   40634:	cmp	r1, r3
   40638:	bcs	4069c <flatcc_json_printer_table_field@@Base+0x298>
   4063c:	mov	r1, sl
   40640:	mov	r0, r4
   40644:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40648:	ldr	r2, [r4, #20]
   4064c:	b	4049c <flatcc_json_printer_table_field@@Base+0x98>
   40650:	add	r1, r3, #1
   40654:	mov	r2, #10
   40658:	str	r1, [r4, #20]
   4065c:	strb	r2, [r3]
   40660:	ldrb	r3, [r4, #25]
   40664:	ldr	r2, [r4, #32]
   40668:	ldr	r1, [r4, #16]
   4066c:	ldr	r0, [r4, #20]
   40670:	sub	r2, r2, #1
   40674:	mul	r5, r2, r3
   40678:	str	r2, [r4, #32]
   4067c:	add	r3, r0, r5
   40680:	cmp	r1, r3
   40684:	bcs	406b8 <flatcc_json_printer_table_field@@Base+0x2b4>
   40688:	mov	r1, r5
   4068c:	mov	r0, r4
   40690:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40694:	ldr	r3, [r4, #20]
   40698:	b	405ac <flatcc_json_printer_table_field@@Base+0x1a8>
   4069c:	mov	r2, sl
   406a0:	mov	r1, #32
   406a4:	bl	1459c <memset@plt>
   406a8:	ldr	r2, [r4, #20]
   406ac:	add	r2, r2, sl
   406b0:	str	r2, [r4, #20]
   406b4:	b	4049c <flatcc_json_printer_table_field@@Base+0x98>
   406b8:	mov	r1, r9
   406bc:	mov	r2, r5
   406c0:	bl	1459c <memset@plt>
   406c4:	ldr	r3, [r4, #20]
   406c8:	add	r3, r3, r5
   406cc:	b	405ac <flatcc_json_printer_table_field@@Base+0x1a8>

000406d0 <flatcc_json_printer_union_field@@Base>:
   406d0:	ldr	ip, [r1, #8]
   406d4:	add	r2, r2, #1
   406d8:	lsl	r2, r2, #1
   406dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   406e0:	strd	r6, [sp, #8]
   406e4:	strd	r8, [sp, #16]
   406e8:	str	sl, [sp, #24]
   406ec:	cmp	r2, ip
   406f0:	str	lr, [sp, #28]
   406f4:	sub	sp, sp, #16
   406f8:	movge	lr, #0
   406fc:	ldr	r6, [sp, #48]	; 0x30
   40700:	bge	40718 <flatcc_json_printer_union_field@@Base+0x48>
   40704:	ldr	lr, [r1, #4]
   40708:	ldrh	lr, [lr, r2]
   4070c:	cmp	lr, #0
   40710:	ldrne	r4, [r1]
   40714:	addne	lr, r4, lr
   40718:	add	r2, r2, #2
   4071c:	cmp	r2, ip
   40720:	bge	408d4 <flatcc_json_printer_union_field@@Base+0x204>
   40724:	ldr	ip, [r1, #4]
   40728:	ldrh	r2, [ip, r2]
   4072c:	cmp	r2, #0
   40730:	beq	408d4 <flatcc_json_printer_union_field@@Base+0x204>
   40734:	ldr	r8, [r1]
   40738:	adds	r8, r8, r2
   4073c:	moveq	r2, #1
   40740:	movne	r2, #0
   40744:	cmp	lr, #0
   40748:	moveq	r2, #1
   4074c:	cmp	r2, #0
   40750:	bne	408d4 <flatcc_json_printer_union_field@@Base+0x204>
   40754:	ldr	ip, [r1, #16]
   40758:	ldrb	r9, [lr]
   4075c:	ldr	r2, [r0, #20]
   40760:	cmp	ip, #0
   40764:	add	ip, ip, #1
   40768:	str	ip, [r1, #16]
   4076c:	beq	40784 <flatcc_json_printer_union_field@@Base+0xb4>
   40770:	add	lr, r2, #1
   40774:	mov	ip, #44	; 0x2c
   40778:	str	lr, [r0, #20]
   4077c:	strb	ip, [r2]
   40780:	ldr	r2, [r0, #20]
   40784:	mov	r5, r1
   40788:	mov	r7, r3
   4078c:	ldrb	r1, [r0, #25]
   40790:	mov	r4, r0
   40794:	cmp	r1, #0
   40798:	bne	408f0 <flatcc_json_printer_union_field@@Base+0x220>
   4079c:	ldr	r3, [r0, #16]
   407a0:	cmp	r3, r2
   407a4:	bhi	407b4 <flatcc_json_printer_union_field@@Base+0xe4>
   407a8:	ldr	r3, [r0, #44]	; 0x2c
   407ac:	blx	r3
   407b0:	ldr	r2, [r4, #20]
   407b4:	mov	r3, #34	; 0x22
   407b8:	mov	r1, r7
   407bc:	strb	r3, [r2]
   407c0:	ldrb	r3, [r4, #26]
   407c4:	ldr	r2, [r4, #16]
   407c8:	ldr	r0, [r4, #20]
   407cc:	cmp	r3, #0
   407d0:	addeq	r0, r0, #1
   407d4:	add	r3, r0, r6
   407d8:	cmp	r2, r3
   407dc:	mov	r2, r6
   407e0:	str	r0, [r4, #20]
   407e4:	bls	4095c <flatcc_json_printer_union_field@@Base+0x28c>
   407e8:	bl	14524 <memcpy@plt>
   407ec:	ldr	r3, [r4, #20]
   407f0:	add	r3, r3, r6
   407f4:	str	r3, [r4, #20]
   407f8:	ldr	r1, [r4, #16]
   407fc:	add	r2, r3, #5
   40800:	cmp	r1, r2
   40804:	bhi	40934 <flatcc_json_printer_union_field@@Base+0x264>
   40808:	movw	r1, #34864	; 0x8830
   4080c:	movt	r1, #4
   40810:	mov	r2, #5
   40814:	mov	r0, r4
   40818:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   4081c:	ldr	r3, [r4, #20]
   40820:	mov	r2, #34	; 0x22
   40824:	mov	ip, #58	; 0x3a
   40828:	mov	r0, #32
   4082c:	strb	r2, [r3]
   40830:	ldrb	r2, [r4, #26]
   40834:	ldr	r1, [r4, #20]
   40838:	clz	r2, r2
   4083c:	lsr	r2, r2, #5
   40840:	add	r3, r1, r2
   40844:	add	r3, r3, #1
   40848:	str	r3, [r4, #20]
   4084c:	strb	ip, [r1, r2]
   40850:	ldr	r3, [r4, #20]
   40854:	strb	r0, [r3]
   40858:	ldrb	r2, [r4, #25]
   4085c:	ldr	r1, [r4, #20]
   40860:	ldrb	r3, [r4, #27]
   40864:	cmp	r2, #0
   40868:	addne	r1, r1, #1
   4086c:	cmp	r3, #0
   40870:	str	r1, [r4, #20]
   40874:	bne	4096c <flatcc_json_printer_union_field@@Base+0x29c>
   40878:	mov	r1, r9
   4087c:	mov	r0, r4
   40880:	ldr	r3, [sp, #52]	; 0x34
   40884:	blx	r3
   40888:	cmp	r9, #0
   4088c:	beq	408d4 <flatcc_json_printer_union_field@@Base+0x204>
   40890:	ldr	r3, [r4, #20]
   40894:	mov	ip, #44	; 0x2c
   40898:	mov	r1, r7
   4089c:	mov	r0, r4
   408a0:	mov	r2, r6
   408a4:	add	lr, r3, #1
   408a8:	str	lr, [r4, #20]
   408ac:	strb	ip, [r3]
   408b0:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   408b4:	ldr	r3, [r5, #12]
   408b8:	mov	r0, r4
   408bc:	add	r1, sp, #4
   408c0:	str	r8, [sp, #4]
   408c4:	str	r3, [sp, #8]
   408c8:	ldr	r3, [sp, #56]	; 0x38
   408cc:	strb	r9, [sp, #12]
   408d0:	blx	r3
   408d4:	add	sp, sp, #16
   408d8:	ldrd	r4, [sp]
   408dc:	ldrd	r6, [sp, #8]
   408e0:	ldrd	r8, [sp, #16]
   408e4:	ldr	sl, [sp, #24]
   408e8:	add	sp, sp, #28
   408ec:	pop	{pc}		; (ldr pc, [sp], #4)
   408f0:	add	r1, r2, #1
   408f4:	mov	r3, #10
   408f8:	str	r1, [r0, #20]
   408fc:	strb	r3, [r2]
   40900:	ldrb	r3, [r0, #25]
   40904:	ldr	r2, [r4, #32]
   40908:	ldr	r1, [r0, #16]
   4090c:	ldr	r0, [r0, #20]
   40910:	mul	sl, r2, r3
   40914:	add	r3, r0, sl
   40918:	cmp	r1, r3
   4091c:	bcs	40984 <flatcc_json_printer_union_field@@Base+0x2b4>
   40920:	mov	r1, sl
   40924:	mov	r0, r4
   40928:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   4092c:	ldr	r2, [r4, #20]
   40930:	b	407b4 <flatcc_json_printer_union_field@@Base+0xe4>
   40934:	movw	r2, #34864	; 0x8830
   40938:	movt	r2, #4
   4093c:	ldr	r1, [r2]
   40940:	ldrb	r2, [r2, #4]
   40944:	str	r1, [r3]
   40948:	strb	r2, [r3, #4]
   4094c:	ldr	r3, [r4, #20]
   40950:	add	r3, r3, #5
   40954:	str	r3, [r4, #20]
   40958:	b	40820 <flatcc_json_printer_union_field@@Base+0x150>
   4095c:	mov	r0, r4
   40960:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   40964:	ldr	r3, [r4, #20]
   40968:	b	407f8 <flatcc_json_printer_union_field@@Base+0x128>
   4096c:	mov	r0, r9
   40970:	bl	3447c <flatcc_json_parser_struct_as_root@@Base+0xf5c>
   40974:	ldr	r3, [r4, #20]
   40978:	add	r0, r3, r0
   4097c:	str	r0, [r4, #20]
   40980:	b	40888 <flatcc_json_printer_union_field@@Base+0x1b8>
   40984:	mov	r2, sl
   40988:	mov	r1, #32
   4098c:	bl	1459c <memset@plt>
   40990:	ldr	r2, [r4, #20]
   40994:	add	r2, r2, sl
   40998:	str	r2, [r4, #20]
   4099c:	b	407b4 <flatcc_json_printer_union_field@@Base+0xe4>

000409a0 <flatcc_json_printer_union_table@@Base>:
   409a0:	ldr	r3, [r1, #4]
   409a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   409a8:	mov	r4, r0
   409ac:	strd	r6, [sp, #8]
   409b0:	str	r8, [sp, #16]
   409b4:	str	lr, [sp, #20]
   409b8:	sub	sp, sp, #24
   409bc:	subs	ip, r3, #1
   409c0:	beq	40aa0 <flatcc_json_printer_union_table@@Base+0x100>
   409c4:	ldr	lr, [r1]
   409c8:	mov	r6, #0
   409cc:	mov	r7, #123	; 0x7b
   409d0:	ldr	r1, [r0, #20]
   409d4:	ldr	r3, [r0, #32]
   409d8:	ldr	r5, [lr]
   409dc:	add	r8, r1, #1
   409e0:	add	r3, r3, #1
   409e4:	str	r8, [r0, #20]
   409e8:	str	r3, [r0, #32]
   409ec:	add	r3, lr, r5
   409f0:	strb	r7, [r1]
   409f4:	add	r1, sp, #4
   409f8:	str	ip, [sp, #16]
   409fc:	str	r6, [sp, #20]
   40a00:	ldr	ip, [lr, r5]
   40a04:	str	r3, [sp, #4]
   40a08:	sub	r3, r3, ip
   40a0c:	ldrh	ip, [r3]
   40a10:	str	r3, [sp, #8]
   40a14:	str	ip, [sp, #12]
   40a18:	blx	r2
   40a1c:	ldrb	r3, [r4, #25]
   40a20:	cmp	r3, r6
   40a24:	bne	40a54 <flatcc_json_printer_union_table@@Base+0xb4>
   40a28:	ldr	r1, [r4, #20]
   40a2c:	add	r2, r1, #1
   40a30:	mov	r3, #125	; 0x7d
   40a34:	str	r2, [r4, #20]
   40a38:	strb	r3, [r1]
   40a3c:	add	sp, sp, #24
   40a40:	ldrd	r4, [sp]
   40a44:	ldrd	r6, [sp, #8]
   40a48:	ldr	r8, [sp, #16]
   40a4c:	add	sp, sp, #20
   40a50:	pop	{pc}		; (ldr pc, [sp], #4)
   40a54:	ldr	r3, [r4, #20]
   40a58:	mov	r2, #10
   40a5c:	add	r1, r3, #1
   40a60:	str	r1, [r4, #20]
   40a64:	strb	r2, [r3]
   40a68:	ldrb	r1, [r4, #25]
   40a6c:	ldr	r3, [r4, #32]
   40a70:	ldr	r2, [r4, #16]
   40a74:	ldr	r0, [r4, #20]
   40a78:	sub	r3, r3, #1
   40a7c:	mul	r5, r3, r1
   40a80:	str	r3, [r4, #32]
   40a84:	add	r3, r0, r5
   40a88:	cmp	r2, r3
   40a8c:	bcs	40ab4 <flatcc_json_printer_union_table@@Base+0x114>
   40a90:	mov	r1, r5
   40a94:	mov	r0, r4
   40a98:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40a9c:	b	40a28 <flatcc_json_printer_union_table@@Base+0x88>
   40aa0:	ldr	r3, [r0, #36]	; 0x24
   40aa4:	cmp	r3, #0
   40aa8:	moveq	r3, #2
   40aac:	streq	r3, [r0, #36]	; 0x24
   40ab0:	b	40a3c <flatcc_json_printer_union_table@@Base+0x9c>
   40ab4:	mov	r1, #32
   40ab8:	mov	r2, r5
   40abc:	bl	1459c <memset@plt>
   40ac0:	ldr	r1, [r4, #20]
   40ac4:	add	r1, r1, r5
   40ac8:	b	40a2c <flatcc_json_printer_union_table@@Base+0x8c>

00040acc <flatcc_json_printer_union_struct@@Base>:
   40acc:	ldr	ip, [r0, #20]
   40ad0:	strd	r4, [sp, #-16]!
   40ad4:	mov	r4, r0
   40ad8:	ldr	r3, [r0, #32]
   40adc:	str	r6, [sp, #8]
   40ae0:	str	lr, [sp, #12]
   40ae4:	mov	lr, #123	; 0x7b
   40ae8:	add	r5, ip, #1
   40aec:	add	r3, r3, #1
   40af0:	str	r5, [r0, #20]
   40af4:	str	r3, [r0, #32]
   40af8:	strb	lr, [ip]
   40afc:	ldr	r3, [r1]
   40b00:	ldr	r1, [r3]
   40b04:	add	r1, r3, r1
   40b08:	blx	r2
   40b0c:	ldrb	r3, [r4, #25]
   40b10:	cmp	r3, #0
   40b14:	bne	40b3c <flatcc_json_printer_union_struct@@Base+0x70>
   40b18:	ldr	r1, [r4, #20]
   40b1c:	add	r2, r1, #1
   40b20:	mov	r3, #125	; 0x7d
   40b24:	str	r2, [r4, #20]
   40b28:	strb	r3, [r1]
   40b2c:	ldrd	r4, [sp]
   40b30:	ldr	r6, [sp, #8]
   40b34:	add	sp, sp, #12
   40b38:	pop	{pc}		; (ldr pc, [sp], #4)
   40b3c:	ldr	r3, [r4, #20]
   40b40:	mov	r2, #10
   40b44:	add	r1, r3, #1
   40b48:	str	r1, [r4, #20]
   40b4c:	strb	r2, [r3]
   40b50:	ldrb	r1, [r4, #25]
   40b54:	ldr	r3, [r4, #32]
   40b58:	ldr	r2, [r4, #16]
   40b5c:	ldr	r0, [r4, #20]
   40b60:	sub	r3, r3, #1
   40b64:	mul	r5, r3, r1
   40b68:	str	r3, [r4, #32]
   40b6c:	add	r3, r0, r5
   40b70:	cmp	r2, r3
   40b74:	bcs	40b88 <flatcc_json_printer_union_struct@@Base+0xbc>
   40b78:	mov	r1, r5
   40b7c:	mov	r0, r4
   40b80:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40b84:	b	40b18 <flatcc_json_printer_union_struct@@Base+0x4c>
   40b88:	mov	r1, #32
   40b8c:	mov	r2, r5
   40b90:	bl	1459c <memset@plt>
   40b94:	ldr	r1, [r4, #20]
   40b98:	add	r1, r1, r5
   40b9c:	b	40b1c <flatcc_json_printer_union_struct@@Base+0x50>

00040ba0 <flatcc_json_printer_union_string@@Base>:
   40ba0:	ldr	r3, [r1]
   40ba4:	ldr	r2, [r3]
   40ba8:	add	r1, r3, r2
   40bac:	ldr	r2, [r3, r2]
   40bb0:	add	r1, r1, #4
   40bb4:	b	3457c <flatcc_json_parser_struct_as_root@@Base+0x105c>

00040bb8 <flatcc_json_printer_embedded_struct_field@@Base>:
   40bb8:	cmp	r1, #0
   40bbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   40bc0:	mov	r4, r0
   40bc4:	strd	r6, [sp, #8]
   40bc8:	mov	r7, r3
   40bcc:	strd	r8, [sp, #16]
   40bd0:	mov	r8, r2
   40bd4:	str	sl, [sp, #24]
   40bd8:	str	lr, [sp, #28]
   40bdc:	ldr	r2, [r0, #20]
   40be0:	ldr	r5, [sp, #36]	; 0x24
   40be4:	ldr	r6, [sp, #40]	; 0x28
   40be8:	beq	40c00 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   40bec:	add	r1, r2, #1
   40bf0:	mov	r3, #44	; 0x2c
   40bf4:	str	r1, [r0, #20]
   40bf8:	strb	r3, [r2]
   40bfc:	ldr	r2, [r0, #20]
   40c00:	ldrb	r1, [r4, #25]
   40c04:	cmp	r1, #0
   40c08:	bne	40d74 <flatcc_json_printer_embedded_struct_field@@Base+0x1bc>
   40c0c:	ldr	r3, [r4, #16]
   40c10:	cmp	r3, r2
   40c14:	bhi	40c28 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   40c18:	mov	r0, r4
   40c1c:	ldr	r3, [r4, #44]	; 0x2c
   40c20:	blx	r3
   40c24:	ldr	r2, [r4, #20]
   40c28:	mov	r3, #34	; 0x22
   40c2c:	ldr	r1, [sp, #32]
   40c30:	strb	r3, [r2]
   40c34:	ldrb	r3, [r4, #26]
   40c38:	ldr	r2, [r4, #16]
   40c3c:	ldr	r0, [r4, #20]
   40c40:	cmp	r3, #0
   40c44:	addeq	r0, r0, #1
   40c48:	add	r3, r0, r5
   40c4c:	cmp	r2, r3
   40c50:	mov	r2, r5
   40c54:	str	r0, [r4, #20]
   40c58:	bhi	40d14 <flatcc_json_printer_embedded_struct_field@@Base+0x15c>
   40c5c:	mov	r0, r4
   40c60:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   40c64:	ldr	r5, [r4, #20]
   40c68:	mov	r3, #34	; 0x22
   40c6c:	mov	ip, #58	; 0x3a
   40c70:	add	r1, r8, r7
   40c74:	mov	r7, #32
   40c78:	strb	r3, [r5]
   40c7c:	mov	lr, #123	; 0x7b
   40c80:	mov	r0, r4
   40c84:	ldrb	r3, [r4, #26]
   40c88:	ldr	r5, [r4, #20]
   40c8c:	clz	r3, r3
   40c90:	lsr	r3, r3, #5
   40c94:	add	r2, r5, r3
   40c98:	add	r2, r2, #1
   40c9c:	str	r2, [r4, #20]
   40ca0:	strb	ip, [r5, r3]
   40ca4:	ldr	r3, [r4, #20]
   40ca8:	strb	r7, [r3]
   40cac:	ldrb	r3, [r4, #25]
   40cb0:	ldr	r5, [r4, #20]
   40cb4:	ldr	r2, [r4, #32]
   40cb8:	adds	r3, r3, #0
   40cbc:	movne	r3, #1
   40cc0:	add	ip, r5, r3
   40cc4:	add	ip, ip, #1
   40cc8:	add	r2, r2, #1
   40ccc:	str	ip, [r4, #20]
   40cd0:	str	r2, [r4, #32]
   40cd4:	strb	lr, [r5, r3]
   40cd8:	blx	r6
   40cdc:	ldrb	r3, [r4, #25]
   40ce0:	cmp	r3, #0
   40ce4:	bne	40d28 <flatcc_json_printer_embedded_struct_field@@Base+0x170>
   40ce8:	ldr	r1, [r4, #20]
   40cec:	add	r2, r1, #1
   40cf0:	mov	r3, #125	; 0x7d
   40cf4:	str	r2, [r4, #20]
   40cf8:	strb	r3, [r1]
   40cfc:	ldrd	r4, [sp]
   40d00:	ldrd	r6, [sp, #8]
   40d04:	ldrd	r8, [sp, #16]
   40d08:	ldr	sl, [sp, #24]
   40d0c:	add	sp, sp, #28
   40d10:	pop	{pc}		; (ldr pc, [sp], #4)
   40d14:	bl	14524 <memcpy@plt>
   40d18:	ldr	r3, [r4, #20]
   40d1c:	add	r5, r3, r5
   40d20:	str	r5, [r4, #20]
   40d24:	b	40c68 <flatcc_json_printer_embedded_struct_field@@Base+0xb0>
   40d28:	ldr	r3, [r4, #20]
   40d2c:	mov	r2, #10
   40d30:	add	r1, r3, #1
   40d34:	str	r1, [r4, #20]
   40d38:	strb	r2, [r3]
   40d3c:	ldrb	r1, [r4, #25]
   40d40:	ldr	r3, [r4, #32]
   40d44:	ldr	r2, [r4, #16]
   40d48:	ldr	r0, [r4, #20]
   40d4c:	sub	r3, r3, #1
   40d50:	mul	r5, r3, r1
   40d54:	str	r3, [r4, #32]
   40d58:	add	r3, r0, r5
   40d5c:	cmp	r2, r3
   40d60:	bcs	40dd4 <flatcc_json_printer_embedded_struct_field@@Base+0x21c>
   40d64:	mov	r1, r5
   40d68:	mov	r0, r4
   40d6c:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40d70:	b	40ce8 <flatcc_json_printer_embedded_struct_field@@Base+0x130>
   40d74:	add	r1, r2, #1
   40d78:	mov	r3, #10
   40d7c:	str	r1, [r4, #20]
   40d80:	strb	r3, [r2]
   40d84:	ldrb	r3, [r4, #25]
   40d88:	ldr	r1, [r4, #16]
   40d8c:	ldr	r2, [r4, #32]
   40d90:	ldr	r0, [r4, #20]
   40d94:	mul	r9, r2, r3
   40d98:	add	r3, r0, r9
   40d9c:	cmp	r1, r3
   40da0:	bcs	40db8 <flatcc_json_printer_embedded_struct_field@@Base+0x200>
   40da4:	mov	r1, r9
   40da8:	mov	r0, r4
   40dac:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40db0:	ldr	r2, [r4, #20]
   40db4:	b	40c28 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   40db8:	mov	r2, r9
   40dbc:	mov	r1, #32
   40dc0:	bl	1459c <memset@plt>
   40dc4:	ldr	r2, [r4, #20]
   40dc8:	add	r2, r2, r9
   40dcc:	str	r2, [r4, #20]
   40dd0:	b	40c28 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   40dd4:	mov	r1, r7
   40dd8:	mov	r2, r5
   40ddc:	bl	1459c <memset@plt>
   40de0:	ldr	r1, [r4, #20]
   40de4:	add	r1, r1, r5
   40de8:	b	40cec <flatcc_json_printer_embedded_struct_field@@Base+0x134>

00040dec <flatcc_json_printer_struct_field@@Base>:
   40dec:	ldr	ip, [r1, #8]
   40df0:	add	r2, r2, #2
   40df4:	lsl	r2, r2, #1
   40df8:	cmp	r2, ip
   40dfc:	bxge	lr
   40e00:	ldr	ip, [r1, #4]
   40e04:	ldrh	r2, [ip, r2]
   40e08:	cmp	r2, #0
   40e0c:	bxeq	lr
   40e10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40e14:	ldr	r5, [r1]
   40e18:	strd	r6, [sp, #8]
   40e1c:	str	r8, [sp, #16]
   40e20:	str	lr, [sp, #20]
   40e24:	adds	r5, r5, r2
   40e28:	beq	40f5c <flatcc_json_printer_struct_field@@Base+0x170>
   40e2c:	ldr	ip, [r1, #16]
   40e30:	ldr	r2, [r0, #20]
   40e34:	cmp	ip, #0
   40e38:	add	ip, ip, #1
   40e3c:	str	ip, [r1, #16]
   40e40:	beq	40e58 <flatcc_json_printer_struct_field@@Base+0x6c>
   40e44:	add	ip, r2, #1
   40e48:	mov	r1, #44	; 0x2c
   40e4c:	str	ip, [r0, #20]
   40e50:	strb	r1, [r2]
   40e54:	ldr	r2, [r0, #20]
   40e58:	mov	r6, r3
   40e5c:	mov	r4, r0
   40e60:	ldrb	r1, [r0, #25]
   40e64:	cmp	r1, #0
   40e68:	bne	40f90 <flatcc_json_printer_struct_field@@Base+0x1a4>
   40e6c:	ldr	r3, [r0, #16]
   40e70:	cmp	r3, r2
   40e74:	bls	40f80 <flatcc_json_printer_struct_field@@Base+0x194>
   40e78:	mov	r3, #34	; 0x22
   40e7c:	mov	r1, r6
   40e80:	strb	r3, [r2]
   40e84:	ldrb	r3, [r4, #26]
   40e88:	ldr	r2, [r4, #16]
   40e8c:	ldr	r0, [r4, #20]
   40e90:	cmp	r3, #0
   40e94:	addeq	r0, r0, #1
   40e98:	ldr	r3, [sp, #24]
   40e9c:	str	r0, [r4, #20]
   40ea0:	add	r3, r0, r3
   40ea4:	cmp	r2, r3
   40ea8:	ldr	r2, [sp, #24]
   40eac:	bls	40f70 <flatcc_json_printer_struct_field@@Base+0x184>
   40eb0:	bl	14524 <memcpy@plt>
   40eb4:	ldr	r3, [r4, #20]
   40eb8:	ldr	r2, [sp, #24]
   40ebc:	add	r3, r3, r2
   40ec0:	str	r3, [r4, #20]
   40ec4:	mov	r2, #34	; 0x22
   40ec8:	mov	r6, #58	; 0x3a
   40ecc:	mov	r1, r5
   40ed0:	mov	r5, #32
   40ed4:	strb	r2, [r3]
   40ed8:	mov	lr, #123	; 0x7b
   40edc:	mov	r0, r4
   40ee0:	ldrb	r3, [r4, #26]
   40ee4:	ldr	ip, [r4, #20]
   40ee8:	clz	r3, r3
   40eec:	lsr	r3, r3, #5
   40ef0:	add	r2, ip, r3
   40ef4:	add	r2, r2, #1
   40ef8:	str	r2, [r4, #20]
   40efc:	strb	r6, [ip, r3]
   40f00:	ldr	r3, [r4, #20]
   40f04:	strb	r5, [r3]
   40f08:	ldrb	r3, [r4, #25]
   40f0c:	ldr	r6, [r4, #20]
   40f10:	ldr	r2, [r4, #32]
   40f14:	adds	r3, r3, #0
   40f18:	movne	r3, #1
   40f1c:	add	ip, r6, r3
   40f20:	add	ip, ip, #1
   40f24:	add	r2, r2, #1
   40f28:	str	ip, [r4, #20]
   40f2c:	str	r2, [r4, #32]
   40f30:	strb	lr, [r6, r3]
   40f34:	ldr	r3, [sp, #28]
   40f38:	blx	r3
   40f3c:	ldrb	r3, [r4, #25]
   40f40:	cmp	r3, #0
   40f44:	bne	40fd4 <flatcc_json_printer_struct_field@@Base+0x1e8>
   40f48:	ldr	r1, [r4, #20]
   40f4c:	add	r2, r1, #1
   40f50:	mov	r3, #125	; 0x7d
   40f54:	str	r2, [r4, #20]
   40f58:	strb	r3, [r1]
   40f5c:	ldrd	r4, [sp]
   40f60:	ldrd	r6, [sp, #8]
   40f64:	ldr	r8, [sp, #16]
   40f68:	add	sp, sp, #20
   40f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   40f70:	mov	r0, r4
   40f74:	bl	34120 <flatcc_json_parser_struct_as_root@@Base+0xc00>
   40f78:	ldr	r3, [r4, #20]
   40f7c:	b	40ec4 <flatcc_json_printer_struct_field@@Base+0xd8>
   40f80:	ldr	r3, [r0, #44]	; 0x2c
   40f84:	blx	r3
   40f88:	ldr	r2, [r4, #20]
   40f8c:	b	40e78 <flatcc_json_printer_struct_field@@Base+0x8c>
   40f90:	add	r1, r2, #1
   40f94:	mov	r3, #10
   40f98:	str	r1, [r0, #20]
   40f9c:	strb	r3, [r2]
   40fa0:	ldrb	r7, [r0, #25]
   40fa4:	ldr	r2, [r4, #32]
   40fa8:	ldr	r1, [r0, #16]
   40fac:	ldr	r0, [r0, #20]
   40fb0:	mul	r7, r2, r7
   40fb4:	add	r3, r0, r7
   40fb8:	cmp	r1, r3
   40fbc:	bcs	41020 <flatcc_json_printer_struct_field@@Base+0x234>
   40fc0:	mov	r1, r7
   40fc4:	mov	r0, r4
   40fc8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   40fcc:	ldr	r2, [r4, #20]
   40fd0:	b	40e78 <flatcc_json_printer_struct_field@@Base+0x8c>
   40fd4:	ldr	r3, [r4, #20]
   40fd8:	mov	r2, #10
   40fdc:	add	r1, r3, #1
   40fe0:	str	r1, [r4, #20]
   40fe4:	strb	r2, [r3]
   40fe8:	ldrb	r1, [r4, #25]
   40fec:	ldr	r3, [r4, #32]
   40ff0:	ldr	r2, [r4, #16]
   40ff4:	ldr	r0, [r4, #20]
   40ff8:	sub	r3, r3, #1
   40ffc:	mul	r6, r3, r1
   41000:	str	r3, [r4, #32]
   41004:	add	r3, r0, r6
   41008:	cmp	r2, r3
   4100c:	bcs	4103c <flatcc_json_printer_struct_field@@Base+0x250>
   41010:	mov	r1, r6
   41014:	mov	r0, r4
   41018:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   4101c:	b	40f48 <flatcc_json_printer_struct_field@@Base+0x15c>
   41020:	mov	r2, r7
   41024:	mov	r1, #32
   41028:	bl	1459c <memset@plt>
   4102c:	ldr	r2, [r4, #20]
   41030:	add	r2, r2, r7
   41034:	str	r2, [r4, #20]
   41038:	b	40e78 <flatcc_json_printer_struct_field@@Base+0x8c>
   4103c:	mov	r1, r5
   41040:	mov	r2, r6
   41044:	bl	1459c <memset@plt>
   41048:	ldr	r1, [r4, #20]
   4104c:	add	r1, r1, r6
   41050:	b	40f4c <flatcc_json_printer_struct_field@@Base+0x160>

00041054 <flatcc_json_printer_struct_as_root@@Base>:
   41054:	mov	ip, #0
   41058:	strd	r4, [sp, #-12]!
   4105c:	mov	r4, r0
   41060:	str	lr, [sp, #8]
   41064:	sub	sp, sp, #12
   41068:	cmp	r1, ip
   4106c:	cmpne	r2, #7
   41070:	str	ip, [sp, #4]
   41074:	bls	411d8 <flatcc_json_printer_struct_as_root@@Base+0x184>
   41078:	cmp	r3, #0
   4107c:	mov	r5, r1
   41080:	beq	410a8 <flatcc_json_printer_struct_as_root@@Base+0x54>
   41084:	mov	r2, #4
   41088:	mov	r1, r3
   4108c:	add	r0, sp, r2
   41090:	bl	145a8 <strncpy@plt>
   41094:	ldr	r2, [r5, #4]
   41098:	ldr	r3, [sp, #4]
   4109c:	cmp	r2, r3
   410a0:	cmpne	r3, #0
   410a4:	bne	41204 <flatcc_json_printer_struct_as_root@@Base+0x1b0>
   410a8:	ldr	r2, [r4, #20]
   410ac:	mov	r1, #123	; 0x7b
   410b0:	mov	r0, r4
   410b4:	ldr	r3, [r4, #32]
   410b8:	add	ip, r2, #1
   410bc:	add	r3, r3, #1
   410c0:	str	ip, [r4, #20]
   410c4:	str	r3, [r4, #32]
   410c8:	strb	r1, [r2]
   410cc:	ldr	r1, [r5]
   410d0:	ldr	r3, [sp, #24]
   410d4:	add	r1, r5, r1
   410d8:	blx	r3
   410dc:	ldrb	r3, [r4, #25]
   410e0:	cmp	r3, #0
   410e4:	bne	4116c <flatcc_json_printer_struct_as_root@@Base+0x118>
   410e8:	ldr	r1, [r4, #20]
   410ec:	mov	r3, #125	; 0x7d
   410f0:	add	r2, r1, #1
   410f4:	str	r2, [r4, #20]
   410f8:	strb	r3, [r1]
   410fc:	ldrb	r3, [r4, #25]
   41100:	cmp	r3, #0
   41104:	bne	41148 <flatcc_json_printer_struct_as_root@@Base+0xf4>
   41108:	mov	r1, #1
   4110c:	mov	r0, r4
   41110:	ldr	r3, [r4, #44]	; 0x2c
   41114:	blx	r3
   41118:	ldr	r3, [r4, #36]	; 0x24
   4111c:	cmp	r3, #0
   41120:	bne	411d0 <flatcc_json_printer_struct_as_root@@Base+0x17c>
   41124:	ldr	r2, [r4]
   41128:	ldr	r3, [r4, #12]
   4112c:	ldr	r0, [r4, #20]
   41130:	sub	r0, r0, r2
   41134:	add	r0, r0, r3
   41138:	add	sp, sp, #12
   4113c:	ldrd	r4, [sp]
   41140:	add	sp, sp, #8
   41144:	pop	{pc}		; (ldr pc, [sp], #4)
   41148:	ldr	r3, [r4, #32]
   4114c:	cmp	r3, #0
   41150:	bne	41108 <flatcc_json_printer_struct_as_root@@Base+0xb4>
   41154:	ldr	r3, [r4, #20]
   41158:	mov	r2, #10
   4115c:	add	r1, r3, #1
   41160:	str	r1, [r4, #20]
   41164:	strb	r2, [r3]
   41168:	b	41108 <flatcc_json_printer_struct_as_root@@Base+0xb4>
   4116c:	ldr	r3, [r4, #20]
   41170:	mov	r2, #10
   41174:	add	r1, r3, #1
   41178:	str	r1, [r4, #20]
   4117c:	strb	r2, [r3]
   41180:	ldrb	r1, [r4, #25]
   41184:	ldr	r3, [r4, #32]
   41188:	ldr	r2, [r4, #16]
   4118c:	ldr	r0, [r4, #20]
   41190:	sub	r3, r3, #1
   41194:	mul	r5, r3, r1
   41198:	str	r3, [r4, #32]
   4119c:	add	r3, r0, r5
   411a0:	cmp	r2, r3
   411a4:	bcs	411b8 <flatcc_json_printer_struct_as_root@@Base+0x164>
   411a8:	mov	r1, r5
   411ac:	mov	r0, r4
   411b0:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   411b4:	b	410e8 <flatcc_json_printer_struct_as_root@@Base+0x94>
   411b8:	mov	r1, #32
   411bc:	mov	r2, r5
   411c0:	bl	1459c <memset@plt>
   411c4:	ldr	r1, [r4, #20]
   411c8:	add	r1, r1, r5
   411cc:	b	410ec <flatcc_json_printer_struct_as_root@@Base+0x98>
   411d0:	mvn	r0, #0
   411d4:	b	41138 <flatcc_json_printer_struct_as_root@@Base+0xe4>
   411d8:	ldr	r3, [r0, #36]	; 0x24
   411dc:	movw	r1, #34752	; 0x87c0
   411e0:	movt	r1, #4
   411e4:	movw	r2, #1019	; 0x3fb
   411e8:	cmp	r3, ip
   411ec:	moveq	r3, #1
   411f0:	streq	r3, [r0, #36]	; 0x24
   411f4:	movw	r0, #34872	; 0x8838
   411f8:	movt	r0, #4
   411fc:	ldr	r3, [pc, #44]	; 41230 <flatcc_json_printer_struct_as_root@@Base+0x1dc>
   41200:	bl	145f0 <__assert_fail@plt>
   41204:	ldr	r3, [r4, #36]	; 0x24
   41208:	movw	r1, #34752	; 0x87c0
   4120c:	movt	r1, #4
   41210:	movw	r0, #34904	; 0x8858
   41214:	movt	r0, #4
   41218:	movw	r2, #1028	; 0x404
   4121c:	cmp	r3, #0
   41220:	moveq	r3, #1
   41224:	streq	r3, [r4, #36]	; 0x24
   41228:	ldr	r3, [pc]	; 41230 <flatcc_json_printer_struct_as_root@@Base+0x1dc>
   4122c:	bl	145f0 <__assert_fail@plt>
   41230:	andeq	r8, r4, r0, asr r6

00041234 <flatcc_json_printer_table_as_root@@Base>:
   41234:	mov	ip, #0
   41238:	strd	r4, [sp, #-20]!	; 0xffffffec
   4123c:	mov	r4, r0
   41240:	strd	r6, [sp, #8]
   41244:	cmp	r1, ip
   41248:	cmpne	r2, #7
   4124c:	str	lr, [sp, #16]
   41250:	sub	sp, sp, #28
   41254:	str	ip, [sp, #4]
   41258:	bls	413f0 <flatcc_json_printer_table_as_root@@Base+0x1bc>
   4125c:	cmp	r3, #0
   41260:	mov	r5, r1
   41264:	add	r6, sp, #4
   41268:	beq	41290 <flatcc_json_printer_table_as_root@@Base+0x5c>
   4126c:	mov	r1, r3
   41270:	mov	r2, #4
   41274:	mov	r0, r6
   41278:	bl	145a8 <strncpy@plt>
   4127c:	ldr	r2, [r5, #4]
   41280:	ldr	r3, [sp, #4]
   41284:	cmp	r2, r3
   41288:	cmpne	r3, #0
   4128c:	bne	4141c <flatcc_json_printer_table_as_root@@Base+0x1e8>
   41290:	ldr	r0, [r4, #20]
   41294:	mov	r1, r6
   41298:	mov	ip, #0
   4129c:	mov	lr, #99	; 0x63
   412a0:	mov	r6, #123	; 0x7b
   412a4:	ldr	r3, [r4, #32]
   412a8:	ldr	r2, [r5]
   412ac:	add	r7, r0, #1
   412b0:	add	r3, r3, #1
   412b4:	str	r7, [r4, #20]
   412b8:	str	r3, [r4, #32]
   412bc:	add	r3, r5, r2
   412c0:	strb	r6, [r0]
   412c4:	mov	r0, r4
   412c8:	str	lr, [sp, #16]
   412cc:	str	ip, [sp, #20]
   412d0:	ldr	r2, [r5, r2]
   412d4:	str	r3, [sp, #4]
   412d8:	sub	r3, r3, r2
   412dc:	ldrh	r2, [r3]
   412e0:	str	r3, [sp, #8]
   412e4:	ldr	r3, [sp, #48]	; 0x30
   412e8:	str	r2, [sp, #12]
   412ec:	blx	r3
   412f0:	ldrb	r3, [r4, #25]
   412f4:	cmp	r3, #0
   412f8:	bne	41384 <flatcc_json_printer_table_as_root@@Base+0x150>
   412fc:	ldr	r1, [r4, #20]
   41300:	mov	r3, #125	; 0x7d
   41304:	add	r2, r1, #1
   41308:	str	r2, [r4, #20]
   4130c:	strb	r3, [r1]
   41310:	ldrb	r3, [r4, #25]
   41314:	cmp	r3, #0
   41318:	bne	41360 <flatcc_json_printer_table_as_root@@Base+0x12c>
   4131c:	mov	r1, #1
   41320:	mov	r0, r4
   41324:	ldr	r3, [r4, #44]	; 0x2c
   41328:	blx	r3
   4132c:	ldr	r3, [r4, #36]	; 0x24
   41330:	cmp	r3, #0
   41334:	bne	413e8 <flatcc_json_printer_table_as_root@@Base+0x1b4>
   41338:	ldr	r2, [r4]
   4133c:	ldr	r3, [r4, #12]
   41340:	ldr	r0, [r4, #20]
   41344:	sub	r0, r0, r2
   41348:	add	r0, r0, r3
   4134c:	add	sp, sp, #28
   41350:	ldrd	r4, [sp]
   41354:	ldrd	r6, [sp, #8]
   41358:	add	sp, sp, #16
   4135c:	pop	{pc}		; (ldr pc, [sp], #4)
   41360:	ldr	r3, [r4, #32]
   41364:	cmp	r3, #0
   41368:	bne	4131c <flatcc_json_printer_table_as_root@@Base+0xe8>
   4136c:	ldr	r3, [r4, #20]
   41370:	mov	r2, #10
   41374:	add	r1, r3, #1
   41378:	str	r1, [r4, #20]
   4137c:	strb	r2, [r3]
   41380:	b	4131c <flatcc_json_printer_table_as_root@@Base+0xe8>
   41384:	ldr	r3, [r4, #20]
   41388:	mov	r2, #10
   4138c:	add	r1, r3, #1
   41390:	str	r1, [r4, #20]
   41394:	strb	r2, [r3]
   41398:	ldrb	r1, [r4, #25]
   4139c:	ldr	r3, [r4, #32]
   413a0:	ldr	r2, [r4, #16]
   413a4:	ldr	r0, [r4, #20]
   413a8:	sub	r3, r3, #1
   413ac:	mul	r5, r3, r1
   413b0:	str	r3, [r4, #32]
   413b4:	add	r3, r0, r5
   413b8:	cmp	r2, r3
   413bc:	bcs	413d0 <flatcc_json_printer_table_as_root@@Base+0x19c>
   413c0:	mov	r1, r5
   413c4:	mov	r0, r4
   413c8:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   413cc:	b	412fc <flatcc_json_printer_table_as_root@@Base+0xc8>
   413d0:	mov	r1, #32
   413d4:	mov	r2, r5
   413d8:	bl	1459c <memset@plt>
   413dc:	ldr	r1, [r4, #20]
   413e0:	add	r1, r1, r5
   413e4:	b	41300 <flatcc_json_printer_table_as_root@@Base+0xcc>
   413e8:	mvn	r0, #0
   413ec:	b	4134c <flatcc_json_printer_table_as_root@@Base+0x118>
   413f0:	ldr	r3, [r0, #36]	; 0x24
   413f4:	movw	r1, #34752	; 0x87c0
   413f8:	movt	r1, #4
   413fc:	movw	r2, #1019	; 0x3fb
   41400:	cmp	r3, ip
   41404:	moveq	r3, #1
   41408:	streq	r3, [r0, #36]	; 0x24
   4140c:	movw	r0, #34872	; 0x8838
   41410:	movt	r0, #4
   41414:	ldr	r3, [pc, #44]	; 41448 <flatcc_json_printer_table_as_root@@Base+0x214>
   41418:	bl	145f0 <__assert_fail@plt>
   4141c:	ldr	r3, [r4, #36]	; 0x24
   41420:	movw	r1, #34752	; 0x87c0
   41424:	movt	r1, #4
   41428:	movw	r0, #34904	; 0x8858
   4142c:	movt	r0, #4
   41430:	movw	r2, #1028	; 0x404
   41434:	cmp	r3, #0
   41438:	moveq	r3, #1
   4143c:	streq	r3, [r4, #36]	; 0x24
   41440:	ldr	r3, [pc]	; 41448 <flatcc_json_printer_table_as_root@@Base+0x214>
   41444:	bl	145f0 <__assert_fail@plt>
   41448:	andeq	r8, r4, r0, asr r6

0004144c <flatcc_json_printer_struct_as_nested_root@@Base>:
   4144c:	ldr	ip, [r1, #8]
   41450:	add	r2, r2, #2
   41454:	lsl	r2, r2, #1
   41458:	cmp	r2, ip
   4145c:	bxge	lr
   41460:	ldr	ip, [r1, #4]
   41464:	ldrh	r2, [ip, r2]
   41468:	cmp	r2, #0
   4146c:	bxeq	lr
   41470:	strd	r4, [sp, #-28]!	; 0xffffffe4
   41474:	ldr	ip, [r1]
   41478:	strd	r6, [sp, #8]
   4147c:	strd	r8, [sp, #16]
   41480:	str	lr, [sp, #24]
   41484:	sub	sp, sp, #12
   41488:	adds	r6, ip, r2
   4148c:	beq	41584 <flatcc_json_printer_struct_as_nested_root@@Base+0x138>
   41490:	ldr	r5, [ip, r2]
   41494:	mov	r7, r3
   41498:	mov	r8, r1
   4149c:	mov	r1, #0
   414a0:	mov	r4, r0
   414a4:	ldr	r3, [r6, r5]
   414a8:	adds	r9, r6, r5
   414ac:	moveq	r2, #1
   414b0:	movne	r2, r1
   414b4:	str	r1, [sp, #4]
   414b8:	cmp	r3, #7
   414bc:	orrls	r2, r2, #1
   414c0:	cmp	r2, r1
   414c4:	bne	41600 <flatcc_json_printer_struct_as_nested_root@@Base+0x1b4>
   414c8:	ldr	r3, [sp, #44]	; 0x2c
   414cc:	cmp	r3, #0
   414d0:	beq	414f8 <flatcc_json_printer_struct_as_nested_root@@Base+0xac>
   414d4:	mov	r2, #4
   414d8:	mov	r1, r3
   414dc:	add	r0, sp, r2
   414e0:	bl	145a8 <strncpy@plt>
   414e4:	ldr	r2, [r9, #4]
   414e8:	ldr	r3, [sp, #4]
   414ec:	cmp	r2, r3
   414f0:	cmpne	r3, #0
   414f4:	bne	4162c <flatcc_json_printer_struct_as_nested_root@@Base+0x1e0>
   414f8:	ldr	r3, [r8, #16]
   414fc:	add	r2, r3, #1
   41500:	cmp	r3, #0
   41504:	str	r2, [r8, #16]
   41508:	beq	41520 <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>
   4150c:	ldr	r3, [r4, #20]
   41510:	mov	r2, #44	; 0x2c
   41514:	add	r1, r3, #1
   41518:	str	r1, [r4, #20]
   4151c:	strb	r2, [r3]
   41520:	mov	r1, r7
   41524:	mov	r0, r4
   41528:	ldr	r2, [sp, #40]	; 0x28
   4152c:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   41530:	ldr	r2, [r4, #20]
   41534:	mov	r1, #123	; 0x7b
   41538:	mov	r0, r4
   4153c:	ldr	r3, [r4, #32]
   41540:	add	ip, r2, #1
   41544:	add	r3, r3, #1
   41548:	str	ip, [r4, #20]
   4154c:	str	r3, [r4, #32]
   41550:	strb	r1, [r2]
   41554:	ldr	r1, [r6, r5]
   41558:	ldr	r3, [sp, #48]	; 0x30
   4155c:	add	r1, r9, r1
   41560:	blx	r3
   41564:	ldrb	r3, [r4, #25]
   41568:	cmp	r3, #0
   4156c:	ldr	r3, [r4, #20]
   41570:	bne	4159c <flatcc_json_printer_struct_as_nested_root@@Base+0x150>
   41574:	add	r1, r3, #1
   41578:	mov	r2, #125	; 0x7d
   4157c:	str	r1, [r4, #20]
   41580:	strb	r2, [r3]
   41584:	add	sp, sp, #12
   41588:	ldrd	r4, [sp]
   4158c:	ldrd	r6, [sp, #8]
   41590:	ldrd	r8, [sp, #16]
   41594:	add	sp, sp, #24
   41598:	pop	{pc}		; (ldr pc, [sp], #4)
   4159c:	add	r1, r3, #1
   415a0:	mov	r2, #10
   415a4:	str	r1, [r4, #20]
   415a8:	strb	r2, [r3]
   415ac:	ldrb	r3, [r4, #25]
   415b0:	ldr	r2, [r4, #32]
   415b4:	ldr	r1, [r4, #16]
   415b8:	ldr	r0, [r4, #20]
   415bc:	sub	r2, r2, #1
   415c0:	mul	r5, r2, r3
   415c4:	str	r2, [r4, #32]
   415c8:	add	r3, r0, r5
   415cc:	cmp	r1, r3
   415d0:	bcs	415e8 <flatcc_json_printer_struct_as_nested_root@@Base+0x19c>
   415d4:	mov	r1, r5
   415d8:	mov	r0, r4
   415dc:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   415e0:	ldr	r3, [r4, #20]
   415e4:	b	41574 <flatcc_json_printer_struct_as_nested_root@@Base+0x128>
   415e8:	mov	r2, r5
   415ec:	mov	r1, #32
   415f0:	bl	1459c <memset@plt>
   415f4:	ldr	r3, [r4, #20]
   415f8:	add	r3, r3, r5
   415fc:	b	41574 <flatcc_json_printer_struct_as_nested_root@@Base+0x128>
   41600:	ldr	r3, [r0, #36]	; 0x24
   41604:	movw	r2, #1019	; 0x3fb
   41608:	cmp	r3, r1
   4160c:	movw	r1, #34752	; 0x87c0
   41610:	movt	r1, #4
   41614:	moveq	r3, #1
   41618:	streq	r3, [r0, #36]	; 0x24
   4161c:	movw	r0, #34872	; 0x8838
   41620:	movt	r0, #4
   41624:	ldr	r3, [pc, #44]	; 41658 <flatcc_json_printer_struct_as_nested_root@@Base+0x20c>
   41628:	bl	145f0 <__assert_fail@plt>
   4162c:	ldr	r3, [r4, #36]	; 0x24
   41630:	movw	r1, #34752	; 0x87c0
   41634:	movt	r1, #4
   41638:	movw	r0, #34904	; 0x8858
   4163c:	movt	r0, #4
   41640:	movw	r2, #1028	; 0x404
   41644:	cmp	r3, #0
   41648:	moveq	r3, #1
   4164c:	streq	r3, [r4, #36]	; 0x24
   41650:	ldr	r3, [pc]	; 41658 <flatcc_json_printer_struct_as_nested_root@@Base+0x20c>
   41654:	bl	145f0 <__assert_fail@plt>
   41658:	andeq	r8, r4, r0, asr r6

0004165c <flatcc_json_printer_table_as_nested_root@@Base>:
   4165c:	ldr	ip, [r1, #8]
   41660:	add	r2, r2, #2
   41664:	lsl	r2, r2, #1
   41668:	cmp	r2, ip
   4166c:	bxge	lr
   41670:	ldr	ip, [r1, #4]
   41674:	ldrh	r2, [ip, r2]
   41678:	cmp	r2, #0
   4167c:	bxeq	lr
   41680:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41684:	ldr	ip, [r1]
   41688:	strd	r6, [sp, #8]
   4168c:	str	r8, [sp, #16]
   41690:	str	lr, [sp, #20]
   41694:	sub	sp, sp, #24
   41698:	adds	r5, ip, r2
   4169c:	beq	417c8 <flatcc_json_printer_table_as_nested_root@@Base+0x16c>
   416a0:	mov	r6, r3
   416a4:	ldr	r3, [ip, r2]
   416a8:	mov	r7, r1
   416ac:	mov	r2, #0
   416b0:	mov	r4, r0
   416b4:	ldr	r1, [r5, r3]
   416b8:	add	r5, r5, r3
   416bc:	adds	r8, r5, #4
   416c0:	str	r2, [sp, #4]
   416c4:	moveq	r2, #1
   416c8:	cmp	r1, #7
   416cc:	orrls	r2, r2, #1
   416d0:	cmp	r2, #0
   416d4:	bne	41858 <flatcc_json_printer_table_as_nested_root@@Base+0x1fc>
   416d8:	ldr	r3, [sp, #52]	; 0x34
   416dc:	cmp	r3, #0
   416e0:	beq	41708 <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   416e4:	mov	r2, #4
   416e8:	mov	r1, r3
   416ec:	add	r0, sp, r2
   416f0:	bl	145a8 <strncpy@plt>
   416f4:	ldr	r3, [sp, #4]
   416f8:	ldr	r2, [r5, #8]
   416fc:	cmp	r2, r3
   41700:	cmpne	r3, #0
   41704:	bne	41884 <flatcc_json_printer_table_as_nested_root@@Base+0x228>
   41708:	ldr	r3, [r7, #16]
   4170c:	add	r2, r3, #1
   41710:	cmp	r3, #0
   41714:	str	r2, [r7, #16]
   41718:	beq	41730 <flatcc_json_printer_table_as_nested_root@@Base+0xd4>
   4171c:	ldr	r3, [r4, #20]
   41720:	mov	r2, #44	; 0x2c
   41724:	add	r1, r3, #1
   41728:	str	r1, [r4, #20]
   4172c:	strb	r2, [r3]
   41730:	mov	r1, r6
   41734:	mov	r0, r4
   41738:	ldr	r2, [sp, #48]	; 0x30
   4173c:	bl	347cc <flatcc_json_parser_struct_as_root@@Base+0x12ac>
   41740:	ldr	r3, [r7, #12]
   41744:	subs	r3, r3, #1
   41748:	beq	4182c <flatcc_json_printer_table_as_nested_root@@Base+0x1d0>
   4174c:	ldr	r1, [r4, #20]
   41750:	mov	r0, #123	; 0x7b
   41754:	mov	lr, #0
   41758:	ldr	r2, [r4, #32]
   4175c:	ldr	ip, [r5, #4]
   41760:	add	r5, r1, #1
   41764:	add	r2, r2, #1
   41768:	str	r5, [r4, #20]
   4176c:	str	r2, [r4, #32]
   41770:	add	r2, r8, ip
   41774:	strb	r0, [r1]
   41778:	add	r1, sp, #4
   4177c:	mov	r0, r4
   41780:	str	r3, [sp, #16]
   41784:	str	lr, [sp, #20]
   41788:	ldr	r3, [r8, ip]
   4178c:	str	r2, [sp, #4]
   41790:	sub	r3, r2, r3
   41794:	ldrh	r2, [r3]
   41798:	str	r3, [sp, #8]
   4179c:	ldr	r3, [sp, #56]	; 0x38
   417a0:	str	r2, [sp, #12]
   417a4:	blx	r3
   417a8:	ldrb	r3, [r4, #25]
   417ac:	cmp	r3, #0
   417b0:	ldr	r3, [r4, #20]
   417b4:	bne	417e0 <flatcc_json_printer_table_as_nested_root@@Base+0x184>
   417b8:	add	r1, r3, #1
   417bc:	mov	r2, #125	; 0x7d
   417c0:	str	r1, [r4, #20]
   417c4:	strb	r2, [r3]
   417c8:	add	sp, sp, #24
   417cc:	ldrd	r4, [sp]
   417d0:	ldrd	r6, [sp, #8]
   417d4:	ldr	r8, [sp, #16]
   417d8:	add	sp, sp, #20
   417dc:	pop	{pc}		; (ldr pc, [sp], #4)
   417e0:	add	r1, r3, #1
   417e4:	mov	r2, #10
   417e8:	str	r1, [r4, #20]
   417ec:	strb	r2, [r3]
   417f0:	ldrb	r3, [r4, #25]
   417f4:	ldr	r2, [r4, #32]
   417f8:	ldr	r1, [r4, #16]
   417fc:	ldr	r0, [r4, #20]
   41800:	sub	r2, r2, #1
   41804:	mul	r5, r2, r3
   41808:	str	r2, [r4, #32]
   4180c:	add	r3, r0, r5
   41810:	cmp	r1, r3
   41814:	bcs	41840 <flatcc_json_printer_table_as_nested_root@@Base+0x1e4>
   41818:	mov	r1, r5
   4181c:	mov	r0, r4
   41820:	bl	341e4 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   41824:	ldr	r3, [r4, #20]
   41828:	b	417b8 <flatcc_json_printer_table_as_nested_root@@Base+0x15c>
   4182c:	ldr	r3, [r4, #36]	; 0x24
   41830:	cmp	r3, #0
   41834:	moveq	r3, #2
   41838:	streq	r3, [r4, #36]	; 0x24
   4183c:	b	417c8 <flatcc_json_printer_table_as_nested_root@@Base+0x16c>
   41840:	mov	r2, r5
   41844:	mov	r1, #32
   41848:	bl	1459c <memset@plt>
   4184c:	ldr	r3, [r4, #20]
   41850:	add	r3, r3, r5
   41854:	b	417b8 <flatcc_json_printer_table_as_nested_root@@Base+0x15c>
   41858:	ldr	r3, [r0, #36]	; 0x24
   4185c:	movw	r1, #34752	; 0x87c0
   41860:	movt	r1, #4
   41864:	movw	r2, #1019	; 0x3fb
   41868:	cmp	r3, #0
   4186c:	moveq	r3, #1
   41870:	streq	r3, [r0, #36]	; 0x24
   41874:	movw	r0, #34872	; 0x8838
   41878:	movt	r0, #4
   4187c:	ldr	r3, [pc, #44]	; 418b0 <flatcc_json_printer_table_as_nested_root@@Base+0x254>
   41880:	bl	145f0 <__assert_fail@plt>
   41884:	ldr	r3, [r4, #36]	; 0x24
   41888:	movw	r1, #34752	; 0x87c0
   4188c:	movt	r1, #4
   41890:	movw	r0, #34904	; 0x8858
   41894:	movt	r0, #4
   41898:	movw	r2, #1028	; 0x404
   4189c:	cmp	r3, #0
   418a0:	moveq	r3, #1
   418a4:	streq	r3, [r4, #36]	; 0x24
   418a8:	ldr	r3, [pc]	; 418b0 <flatcc_json_printer_table_as_nested_root@@Base+0x254>
   418ac:	bl	145f0 <__assert_fail@plt>
   418b0:	andeq	r8, r4, r0, asr r6

000418b4 <flatcc_json_printer_init@@Base>:
   418b4:	mov	r2, #48	; 0x30
   418b8:	strd	r4, [sp, #-16]!
   418bc:	mov	r5, r1
   418c0:	mov	r1, #0
   418c4:	mov	r4, r0
   418c8:	str	r6, [sp, #8]
   418cc:	str	lr, [sp, #12]
   418d0:	bl	1459c <memset@plt>
   418d4:	cmp	r5, #0
   418d8:	beq	41934 <flatcc_json_printer_init@@Base+0x80>
   418dc:	movw	r3, #17164	; 0x430c
   418e0:	movt	r3, #3
   418e4:	str	r5, [r4, #40]	; 0x28
   418e8:	movw	r0, #16448	; 0x4040
   418ec:	str	r3, [r4, #44]	; 0x2c
   418f0:	bl	14554 <malloc@plt>
   418f4:	cmp	r0, #0
   418f8:	str	r0, [r4]
   418fc:	beq	41944 <flatcc_json_printer_init@@Base+0x90>
   41900:	add	ip, r0, #16384	; 0x4000
   41904:	mov	r3, #1
   41908:	movw	r1, #16448	; 0x4040
   4190c:	mov	r2, #16384	; 0x4000
   41910:	str	r0, [r4, #20]
   41914:	mov	r0, #0
   41918:	stmib	r4, {r1, r2}
   4191c:	str	ip, [r4, #16]
   41920:	strb	r3, [r4, #24]
   41924:	ldrd	r4, [sp]
   41928:	ldr	r6, [sp, #8]
   4192c:	add	sp, sp, #12
   41930:	pop	{pc}		; (ldr pc, [sp], #4)
   41934:	movw	r3, #37812	; 0x93b4
   41938:	movt	r3, #5
   4193c:	ldr	r5, [r3]
   41940:	b	418dc <flatcc_json_printer_init@@Base+0x28>
   41944:	mvn	r0, #0
   41948:	b	41924 <flatcc_json_printer_init@@Base+0x70>

0004194c <flatcc_json_printer_init_buffer@@Base>:
   4194c:	cmp	r2, #63	; 0x3f
   41950:	strd	r4, [sp, #-16]!
   41954:	str	r6, [sp, #8]
   41958:	str	lr, [sp, #12]
   4195c:	bls	419b8 <flatcc_json_printer_init_buffer@@Base+0x6c>
   41960:	mov	r4, r0
   41964:	mov	r6, r1
   41968:	mov	r5, r2
   4196c:	mov	r1, #0
   41970:	mov	r2, #32
   41974:	add	r0, r0, #12
   41978:	bl	1459c <memset@plt>
   4197c:	sub	r2, r5, #64	; 0x40
   41980:	movw	r3, #16604	; 0x40dc
   41984:	movt	r3, #3
   41988:	add	r1, r6, r2
   4198c:	str	r6, [r4]
   41990:	str	r5, [r4, #4]
   41994:	mov	r0, #0
   41998:	str	r2, [r4, #8]
   4199c:	str	r1, [r4, #16]
   419a0:	str	r6, [r4, #20]
   419a4:	str	r3, [r4, #44]	; 0x2c
   419a8:	ldrd	r4, [sp]
   419ac:	ldr	r6, [sp, #8]
   419b0:	add	sp, sp, #12
   419b4:	pop	{pc}		; (ldr pc, [sp], #4)
   419b8:	movw	r1, #34752	; 0x87c0
   419bc:	movt	r1, #4
   419c0:	ldr	r3, [pc, #12]	; 419d4 <flatcc_json_printer_init_buffer@@Base+0x88>
   419c4:	movw	r0, #34932	; 0x8874
   419c8:	movt	r0, #4
   419cc:	movw	r2, #1165	; 0x48d
   419d0:	bl	145f0 <__assert_fail@plt>
   419d4:	andeq	r8, r4, r0, ror #12

000419d8 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   419d8:	cmp	r1, #0
   419dc:	strd	r4, [sp, #-16]!
   419e0:	mov	r4, r0
   419e4:	moveq	r5, #4096	; 0x1000
   419e8:	str	r6, [sp, #8]
   419ec:	moveq	r6, #4032	; 0xfc0
   419f0:	str	lr, [sp, #12]
   419f4:	beq	41a08 <flatcc_json_printer_init_dynamic_buffer@@Base+0x30>
   419f8:	cmp	r1, #64	; 0x40
   419fc:	movcs	r5, r1
   41a00:	movcc	r5, #64	; 0x40
   41a04:	sub	r6, r5, #64	; 0x40
   41a08:	mov	r2, #32
   41a0c:	mov	r1, #0
   41a10:	add	r0, r4, #12
   41a14:	bl	1459c <memset@plt>
   41a18:	mov	r0, r5
   41a1c:	bl	14554 <malloc@plt>
   41a20:	add	r1, r0, r6
   41a24:	movw	r3, #17344	; 0x43c0
   41a28:	movt	r3, #3
   41a2c:	mov	r2, #1
   41a30:	stm	r4, {r0, r5, r6}
   41a34:	cmp	r0, #0
   41a38:	str	r1, [r4, #16]
   41a3c:	str	r0, [r4, #20]
   41a40:	movne	r0, #0
   41a44:	strb	r2, [r4, #24]
   41a48:	str	r3, [r4, #44]	; 0x2c
   41a4c:	beq	41a60 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   41a50:	ldrd	r4, [sp]
   41a54:	ldr	r6, [sp, #8]
   41a58:	add	sp, sp, #12
   41a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   41a60:	ldr	r3, [r4, #36]	; 0x24
   41a64:	cmp	r3, #0
   41a68:	moveq	r3, #3
   41a6c:	mvneq	r0, #0
   41a70:	mvnne	r0, #0
   41a74:	streq	r3, [r4, #36]	; 0x24
   41a78:	b	41a50 <flatcc_json_printer_init_dynamic_buffer@@Base+0x78>

00041a7c <flatcc_json_printer_get_buffer@@Base>:
   41a7c:	strd	r4, [sp, #-16]!
   41a80:	mov	r5, r1
   41a84:	mov	r1, #0
   41a88:	ldr	r3, [r0, #44]	; 0x2c
   41a8c:	mov	r4, r0
   41a90:	str	r6, [sp, #8]
   41a94:	str	lr, [sp, #12]
   41a98:	blx	r3
   41a9c:	cmp	r5, #0
   41aa0:	ldr	r0, [r4]
   41aa4:	ldrne	r3, [r4, #20]
   41aa8:	ldr	r6, [sp, #8]
   41aac:	subne	r3, r3, r0
   41ab0:	strne	r3, [r5]
   41ab4:	ldrd	r4, [sp]
   41ab8:	add	sp, sp, #12
   41abc:	pop	{pc}		; (ldr pc, [sp], #4)

00041ac0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   41ac0:	strd	r4, [sp, #-16]!
   41ac4:	mov	r4, r0
   41ac8:	ldr	r3, [r0, #44]	; 0x2c
   41acc:	str	r6, [sp, #8]
   41ad0:	mov	r6, r1
   41ad4:	mov	r1, #0
   41ad8:	str	lr, [sp, #12]
   41adc:	blx	r3
   41ae0:	cmp	r6, #0
   41ae4:	ldr	r5, [r4]
   41ae8:	mov	r0, r4
   41aec:	mov	r2, #48	; 0x30
   41af0:	mov	r1, #0
   41af4:	ldrne	r3, [r4, #20]
   41af8:	subne	r3, r3, r5
   41afc:	strne	r3, [r6]
   41b00:	bl	1459c <memset@plt>
   41b04:	mov	r0, r5
   41b08:	ldrd	r4, [sp]
   41b0c:	ldr	r6, [sp, #8]
   41b10:	add	sp, sp, #12
   41b14:	pop	{pc}		; (ldr pc, [sp], #4)

00041b18 <flatcc_json_printer_clear@@Base>:
   41b18:	str	r4, [sp, #-8]!
   41b1c:	mov	r4, r0
   41b20:	str	lr, [sp, #4]
   41b24:	ldrb	r3, [r0, #24]
   41b28:	cmp	r3, #0
   41b2c:	beq	41b40 <flatcc_json_printer_clear@@Base+0x28>
   41b30:	ldr	r0, [r0]
   41b34:	cmp	r0, #0
   41b38:	beq	41b40 <flatcc_json_printer_clear@@Base+0x28>
   41b3c:	bl	14518 <free@plt>
   41b40:	mov	r0, r4
   41b44:	mov	r2, #48	; 0x30
   41b48:	ldr	r4, [sp]
   41b4c:	mov	r1, #0
   41b50:	ldr	lr, [sp, #4]
   41b54:	add	sp, sp, #8
   41b58:	b	1459c <memset@plt>
   41b5c:	eor	r1, r1, #-2147483648	; 0x80000000
   41b60:	b	41b68 <flatcc_json_printer_clear@@Base+0x50>
   41b64:	eor	r3, r3, #-2147483648	; 0x80000000
   41b68:	push	{r4, r5, lr}
   41b6c:	lsl	r4, r1, #1
   41b70:	lsl	r5, r3, #1
   41b74:	teq	r4, r5
   41b78:	teqeq	r0, r2
   41b7c:	orrsne	ip, r4, r0
   41b80:	orrsne	ip, r5, r2
   41b84:	mvnsne	ip, r4, asr #21
   41b88:	mvnsne	ip, r5, asr #21
   41b8c:	beq	41d78 <flatcc_json_printer_clear@@Base+0x260>
   41b90:	lsr	r4, r4, #21
   41b94:	rsbs	r5, r4, r5, lsr #21
   41b98:	rsblt	r5, r5, #0
   41b9c:	ble	41bbc <flatcc_json_printer_clear@@Base+0xa4>
   41ba0:	add	r4, r4, r5
   41ba4:	eor	r2, r0, r2
   41ba8:	eor	r3, r1, r3
   41bac:	eor	r0, r2, r0
   41bb0:	eor	r1, r3, r1
   41bb4:	eor	r2, r0, r2
   41bb8:	eor	r3, r1, r3
   41bbc:	cmp	r5, #54	; 0x36
   41bc0:	pophi	{r4, r5, pc}
   41bc4:	tst	r1, #-2147483648	; 0x80000000
   41bc8:	lsl	r1, r1, #12
   41bcc:	mov	ip, #1048576	; 0x100000
   41bd0:	orr	r1, ip, r1, lsr #12
   41bd4:	beq	41be0 <flatcc_json_printer_clear@@Base+0xc8>
   41bd8:	rsbs	r0, r0, #0
   41bdc:	rsc	r1, r1, #0
   41be0:	tst	r3, #-2147483648	; 0x80000000
   41be4:	lsl	r3, r3, #12
   41be8:	orr	r3, ip, r3, lsr #12
   41bec:	beq	41bf8 <flatcc_json_printer_clear@@Base+0xe0>
   41bf0:	rsbs	r2, r2, #0
   41bf4:	rsc	r3, r3, #0
   41bf8:	teq	r4, r5
   41bfc:	beq	41d60 <flatcc_json_printer_clear@@Base+0x248>
   41c00:	sub	r4, r4, #1
   41c04:	rsbs	lr, r5, #32
   41c08:	blt	41c24 <flatcc_json_printer_clear@@Base+0x10c>
   41c0c:	lsl	ip, r2, lr
   41c10:	adds	r0, r0, r2, lsr r5
   41c14:	adc	r1, r1, #0
   41c18:	adds	r0, r0, r3, lsl lr
   41c1c:	adcs	r1, r1, r3, asr r5
   41c20:	b	41c40 <flatcc_json_printer_clear@@Base+0x128>
   41c24:	sub	r5, r5, #32
   41c28:	add	lr, lr, #32
   41c2c:	cmp	r2, #1
   41c30:	lsl	ip, r3, lr
   41c34:	orrcs	ip, ip, #2
   41c38:	adds	r0, r0, r3, asr r5
   41c3c:	adcs	r1, r1, r3, asr #31
   41c40:	and	r5, r1, #-2147483648	; 0x80000000
   41c44:	bpl	41c54 <flatcc_json_printer_clear@@Base+0x13c>
   41c48:	rsbs	ip, ip, #0
   41c4c:	rscs	r0, r0, #0
   41c50:	rsc	r1, r1, #0
   41c54:	cmp	r1, #1048576	; 0x100000
   41c58:	bcc	41c98 <flatcc_json_printer_clear@@Base+0x180>
   41c5c:	cmp	r1, #2097152	; 0x200000
   41c60:	bcc	41c80 <flatcc_json_printer_clear@@Base+0x168>
   41c64:	lsrs	r1, r1, #1
   41c68:	rrxs	r0, r0
   41c6c:	rrx	ip, ip
   41c70:	add	r4, r4, #1
   41c74:	lsl	r2, r4, #21
   41c78:	cmn	r2, #4194304	; 0x400000
   41c7c:	bcs	41dd8 <flatcc_json_printer_clear@@Base+0x2c0>
   41c80:	cmp	ip, #-2147483648	; 0x80000000
   41c84:	lsrseq	ip, r0, #1
   41c88:	adcs	r0, r0, #0
   41c8c:	adc	r1, r1, r4, lsl #20
   41c90:	orr	r1, r1, r5
   41c94:	pop	{r4, r5, pc}
   41c98:	lsls	ip, ip, #1
   41c9c:	adcs	r0, r0, r0
   41ca0:	adc	r1, r1, r1
   41ca4:	tst	r1, #1048576	; 0x100000
   41ca8:	sub	r4, r4, #1
   41cac:	bne	41c80 <flatcc_json_printer_clear@@Base+0x168>
   41cb0:	teq	r1, #0
   41cb4:	moveq	r1, r0
   41cb8:	moveq	r0, #0
   41cbc:	clz	r3, r1
   41cc0:	addeq	r3, r3, #32
   41cc4:	sub	r3, r3, #11
   41cc8:	subs	r2, r3, #32
   41ccc:	bge	41cf0 <flatcc_json_printer_clear@@Base+0x1d8>
   41cd0:	adds	r2, r2, #12
   41cd4:	ble	41cec <flatcc_json_printer_clear@@Base+0x1d4>
   41cd8:	add	ip, r2, #20
   41cdc:	rsb	r2, r2, #12
   41ce0:	lsl	r0, r1, ip
   41ce4:	lsr	r1, r1, r2
   41ce8:	b	41d00 <flatcc_json_printer_clear@@Base+0x1e8>
   41cec:	add	r2, r2, #20
   41cf0:	rsble	ip, r2, #32
   41cf4:	lsl	r1, r1, r2
   41cf8:	orrle	r1, r1, r0, lsr ip
   41cfc:	lslle	r0, r0, r2
   41d00:	subs	r4, r4, r3
   41d04:	addge	r1, r1, r4, lsl #20
   41d08:	orrge	r1, r1, r5
   41d0c:	popge	{r4, r5, pc}
   41d10:	mvn	r4, r4
   41d14:	subs	r4, r4, #31
   41d18:	bge	41d54 <flatcc_json_printer_clear@@Base+0x23c>
   41d1c:	adds	r4, r4, #12
   41d20:	bgt	41d3c <flatcc_json_printer_clear@@Base+0x224>
   41d24:	add	r4, r4, #20
   41d28:	rsb	r2, r4, #32
   41d2c:	lsr	r0, r0, r4
   41d30:	orr	r0, r0, r1, lsl r2
   41d34:	orr	r1, r5, r1, lsr r4
   41d38:	pop	{r4, r5, pc}
   41d3c:	rsb	r4, r4, #12
   41d40:	rsb	r2, r4, #32
   41d44:	lsr	r0, r0, r2
   41d48:	orr	r0, r0, r1, lsl r4
   41d4c:	mov	r1, r5
   41d50:	pop	{r4, r5, pc}
   41d54:	lsr	r0, r1, r4
   41d58:	mov	r1, r5
   41d5c:	pop	{r4, r5, pc}
   41d60:	teq	r4, #0
   41d64:	eor	r3, r3, #1048576	; 0x100000
   41d68:	eoreq	r1, r1, #1048576	; 0x100000
   41d6c:	addeq	r4, r4, #1
   41d70:	subne	r5, r5, #1
   41d74:	b	41c00 <flatcc_json_printer_clear@@Base+0xe8>
   41d78:	mvns	ip, r4, asr #21
   41d7c:	mvnsne	ip, r5, asr #21
   41d80:	beq	41de8 <flatcc_json_printer_clear@@Base+0x2d0>
   41d84:	teq	r4, r5
   41d88:	teqeq	r0, r2
   41d8c:	beq	41da0 <flatcc_json_printer_clear@@Base+0x288>
   41d90:	orrs	ip, r4, r0
   41d94:	moveq	r1, r3
   41d98:	moveq	r0, r2
   41d9c:	pop	{r4, r5, pc}
   41da0:	teq	r1, r3
   41da4:	movne	r1, #0
   41da8:	movne	r0, #0
   41dac:	popne	{r4, r5, pc}
   41db0:	lsrs	ip, r4, #21
   41db4:	bne	41dc8 <flatcc_json_printer_clear@@Base+0x2b0>
   41db8:	lsls	r0, r0, #1
   41dbc:	adcs	r1, r1, r1
   41dc0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   41dc4:	pop	{r4, r5, pc}
   41dc8:	adds	r4, r4, #4194304	; 0x400000
   41dcc:	addcc	r1, r1, #1048576	; 0x100000
   41dd0:	popcc	{r4, r5, pc}
   41dd4:	and	r5, r1, #-2147483648	; 0x80000000
   41dd8:	orr	r1, r5, #2130706432	; 0x7f000000
   41ddc:	orr	r1, r1, #15728640	; 0xf00000
   41de0:	mov	r0, #0
   41de4:	pop	{r4, r5, pc}
   41de8:	mvns	ip, r4, asr #21
   41dec:	movne	r1, r3
   41df0:	movne	r0, r2
   41df4:	mvnseq	ip, r5, asr #21
   41df8:	movne	r3, r1
   41dfc:	movne	r2, r0
   41e00:	orrs	r4, r0, r1, lsl #12
   41e04:	orrseq	r5, r2, r3, lsl #12
   41e08:	teqeq	r1, r3
   41e0c:	orrne	r1, r1, #524288	; 0x80000
   41e10:	pop	{r4, r5, pc}
   41e14:	teq	r0, #0
   41e18:	moveq	r1, #0
   41e1c:	bxeq	lr
   41e20:	push	{r4, r5, lr}
   41e24:	mov	r4, #1024	; 0x400
   41e28:	add	r4, r4, #50	; 0x32
   41e2c:	mov	r5, #0
   41e30:	mov	r1, #0
   41e34:	b	41cb0 <flatcc_json_printer_clear@@Base+0x198>
   41e38:	teq	r0, #0
   41e3c:	moveq	r1, #0
   41e40:	bxeq	lr
   41e44:	push	{r4, r5, lr}
   41e48:	mov	r4, #1024	; 0x400
   41e4c:	add	r4, r4, #50	; 0x32
   41e50:	ands	r5, r0, #-2147483648	; 0x80000000
   41e54:	rsbmi	r0, r0, #0
   41e58:	mov	r1, #0
   41e5c:	b	41cb0 <flatcc_json_printer_clear@@Base+0x198>
   41e60:	lsls	r2, r0, #1
   41e64:	asr	r1, r2, #3
   41e68:	rrx	r1, r1
   41e6c:	lsl	r0, r2, #28
   41e70:	andsne	r3, r2, #-16777216	; 0xff000000
   41e74:	teqne	r3, #-16777216	; 0xff000000
   41e78:	eorne	r1, r1, #939524096	; 0x38000000
   41e7c:	bxne	lr
   41e80:	bics	r2, r2, #-16777216	; 0xff000000
   41e84:	bxeq	lr
   41e88:	teq	r3, #-16777216	; 0xff000000
   41e8c:	orreq	r1, r1, #524288	; 0x80000
   41e90:	bxeq	lr
   41e94:	push	{r4, r5, lr}
   41e98:	mov	r4, #896	; 0x380
   41e9c:	and	r5, r1, #-2147483648	; 0x80000000
   41ea0:	bic	r1, r1, #-2147483648	; 0x80000000
   41ea4:	b	41cb0 <flatcc_json_printer_clear@@Base+0x198>
   41ea8:	orrs	r2, r0, r1
   41eac:	bxeq	lr
   41eb0:	push	{r4, r5, lr}
   41eb4:	mov	r5, #0
   41eb8:	b	41ed8 <flatcc_json_printer_clear@@Base+0x3c0>
   41ebc:	orrs	r2, r0, r1
   41ec0:	bxeq	lr
   41ec4:	push	{r4, r5, lr}
   41ec8:	ands	r5, r1, #-2147483648	; 0x80000000
   41ecc:	bpl	41ed8 <flatcc_json_printer_clear@@Base+0x3c0>
   41ed0:	rsbs	r0, r0, #0
   41ed4:	rsc	r1, r1, #0
   41ed8:	mov	r4, #1024	; 0x400
   41edc:	add	r4, r4, #50	; 0x32
   41ee0:	lsrs	ip, r1, #22
   41ee4:	beq	41c54 <flatcc_json_printer_clear@@Base+0x13c>
   41ee8:	mov	r2, #3
   41eec:	lsrs	ip, ip, #3
   41ef0:	addne	r2, r2, #3
   41ef4:	lsrs	ip, ip, #3
   41ef8:	addne	r2, r2, #3
   41efc:	add	r2, r2, ip, lsr #3
   41f00:	rsb	r3, r2, #32
   41f04:	lsl	ip, r0, r3
   41f08:	lsr	r0, r0, r2
   41f0c:	orr	r0, r0, r1, lsl r3
   41f10:	lsr	r1, r1, r2
   41f14:	add	r4, r4, r2
   41f18:	b	41c54 <flatcc_json_printer_clear@@Base+0x13c>
   41f1c:	eor	r0, r0, #-2147483648	; 0x80000000
   41f20:	b	41f28 <flatcc_json_printer_clear@@Base+0x410>
   41f24:	eor	r1, r1, #-2147483648	; 0x80000000
   41f28:	lsls	r2, r0, #1
   41f2c:	lslsne	r3, r1, #1
   41f30:	teqne	r2, r3
   41f34:	mvnsne	ip, r2, asr #24
   41f38:	mvnsne	ip, r3, asr #24
   41f3c:	beq	42034 <flatcc_json_printer_clear@@Base+0x51c>
   41f40:	lsr	r2, r2, #24
   41f44:	rsbs	r3, r2, r3, lsr #24
   41f48:	addgt	r2, r2, r3
   41f4c:	eorgt	r1, r0, r1
   41f50:	eorgt	r0, r1, r0
   41f54:	eorgt	r1, r0, r1
   41f58:	rsblt	r3, r3, #0
   41f5c:	cmp	r3, #25
   41f60:	bxhi	lr
   41f64:	tst	r0, #-2147483648	; 0x80000000
   41f68:	orr	r0, r0, #8388608	; 0x800000
   41f6c:	bic	r0, r0, #-16777216	; 0xff000000
   41f70:	rsbne	r0, r0, #0
   41f74:	tst	r1, #-2147483648	; 0x80000000
   41f78:	orr	r1, r1, #8388608	; 0x800000
   41f7c:	bic	r1, r1, #-16777216	; 0xff000000
   41f80:	rsbne	r1, r1, #0
   41f84:	teq	r2, r3
   41f88:	beq	4201c <flatcc_json_printer_clear@@Base+0x504>
   41f8c:	sub	r2, r2, #1
   41f90:	adds	r0, r0, r1, asr r3
   41f94:	rsb	r3, r3, #32
   41f98:	lsl	r1, r1, r3
   41f9c:	and	r3, r0, #-2147483648	; 0x80000000
   41fa0:	bpl	41fac <flatcc_json_printer_clear@@Base+0x494>
   41fa4:	rsbs	r1, r1, #0
   41fa8:	rsc	r0, r0, #0
   41fac:	cmp	r0, #8388608	; 0x800000
   41fb0:	bcc	41fe4 <flatcc_json_printer_clear@@Base+0x4cc>
   41fb4:	cmp	r0, #16777216	; 0x1000000
   41fb8:	bcc	41fd0 <flatcc_json_printer_clear@@Base+0x4b8>
   41fbc:	lsrs	r0, r0, #1
   41fc0:	rrx	r1, r1
   41fc4:	add	r2, r2, #1
   41fc8:	cmp	r2, #254	; 0xfe
   41fcc:	bcs	42088 <flatcc_json_printer_clear@@Base+0x570>
   41fd0:	cmp	r1, #-2147483648	; 0x80000000
   41fd4:	adc	r0, r0, r2, lsl #23
   41fd8:	biceq	r0, r0, #1
   41fdc:	orr	r0, r0, r3
   41fe0:	bx	lr
   41fe4:	lsls	r1, r1, #1
   41fe8:	adc	r0, r0, r0
   41fec:	tst	r0, #8388608	; 0x800000
   41ff0:	sub	r2, r2, #1
   41ff4:	bne	41fd0 <flatcc_json_printer_clear@@Base+0x4b8>
   41ff8:	clz	ip, r0
   41ffc:	sub	ip, ip, #8
   42000:	subs	r2, r2, ip
   42004:	lsl	r0, r0, ip
   42008:	addge	r0, r0, r2, lsl #23
   4200c:	rsblt	r2, r2, #0
   42010:	orrge	r0, r0, r3
   42014:	orrlt	r0, r3, r0, lsr r2
   42018:	bx	lr
   4201c:	teq	r2, #0
   42020:	eor	r1, r1, #8388608	; 0x800000
   42024:	eoreq	r0, r0, #8388608	; 0x800000
   42028:	addeq	r2, r2, #1
   4202c:	subne	r3, r3, #1
   42030:	b	41f8c <flatcc_json_printer_clear@@Base+0x474>
   42034:	lsl	r3, r1, #1
   42038:	mvns	ip, r2, asr #24
   4203c:	mvnsne	ip, r3, asr #24
   42040:	beq	42094 <flatcc_json_printer_clear@@Base+0x57c>
   42044:	teq	r2, r3
   42048:	beq	42058 <flatcc_json_printer_clear@@Base+0x540>
   4204c:	teq	r2, #0
   42050:	moveq	r0, r1
   42054:	bx	lr
   42058:	teq	r0, r1
   4205c:	movne	r0, #0
   42060:	bxne	lr
   42064:	tst	r2, #-16777216	; 0xff000000
   42068:	bne	42078 <flatcc_json_printer_clear@@Base+0x560>
   4206c:	lsls	r0, r0, #1
   42070:	orrcs	r0, r0, #-2147483648	; 0x80000000
   42074:	bx	lr
   42078:	adds	r2, r2, #33554432	; 0x2000000
   4207c:	addcc	r0, r0, #8388608	; 0x800000
   42080:	bxcc	lr
   42084:	and	r3, r0, #-2147483648	; 0x80000000
   42088:	orr	r0, r3, #2130706432	; 0x7f000000
   4208c:	orr	r0, r0, #8388608	; 0x800000
   42090:	bx	lr
   42094:	mvns	r2, r2, asr #24
   42098:	movne	r0, r1
   4209c:	mvnseq	r3, r3, asr #24
   420a0:	movne	r1, r0
   420a4:	lsls	r2, r0, #9
   420a8:	lslseq	r3, r1, #9
   420ac:	teqeq	r0, r1
   420b0:	orrne	r0, r0, #4194304	; 0x400000
   420b4:	bx	lr
   420b8:	mov	r3, #0
   420bc:	b	420c8 <flatcc_json_printer_clear@@Base+0x5b0>
   420c0:	ands	r3, r0, #-2147483648	; 0x80000000
   420c4:	rsbmi	r0, r0, #0
   420c8:	movs	ip, r0
   420cc:	bxeq	lr
   420d0:	orr	r3, r3, #1258291200	; 0x4b000000
   420d4:	mov	r1, r0
   420d8:	mov	r0, #0
   420dc:	b	42120 <flatcc_json_printer_clear@@Base+0x608>
   420e0:	orrs	r2, r0, r1
   420e4:	bxeq	lr
   420e8:	mov	r3, #0
   420ec:	b	42108 <flatcc_json_printer_clear@@Base+0x5f0>
   420f0:	orrs	r2, r0, r1
   420f4:	bxeq	lr
   420f8:	ands	r3, r1, #-2147483648	; 0x80000000
   420fc:	bpl	42108 <flatcc_json_printer_clear@@Base+0x5f0>
   42100:	rsbs	r0, r0, #0
   42104:	rsc	r1, r1, #0
   42108:	movs	ip, r1
   4210c:	moveq	ip, r0
   42110:	moveq	r1, r0
   42114:	moveq	r0, #0
   42118:	orr	r3, r3, #1526726656	; 0x5b000000
   4211c:	subeq	r3, r3, #268435456	; 0x10000000
   42120:	sub	r3, r3, #8388608	; 0x800000
   42124:	clz	r2, ip
   42128:	subs	r2, r2, #8
   4212c:	sub	r3, r3, r2, lsl #23
   42130:	blt	42150 <flatcc_json_printer_clear@@Base+0x638>
   42134:	add	r3, r3, r1, lsl r2
   42138:	lsl	ip, r0, r2
   4213c:	rsb	r2, r2, #32
   42140:	cmp	ip, #-2147483648	; 0x80000000
   42144:	adc	r0, r3, r0, lsr r2
   42148:	biceq	r0, r0, #1
   4214c:	bx	lr
   42150:	add	r2, r2, #32
   42154:	lsl	ip, r1, r2
   42158:	rsb	r2, r2, #32
   4215c:	orrs	r0, r0, ip, lsl #1
   42160:	adc	r0, r3, r1, lsr r2
   42164:	biceq	r0, r0, ip, lsr #31
   42168:	bx	lr
   4216c:	cmp	r3, #0
   42170:	cmpeq	r2, #0
   42174:	bne	42198 <flatcc_json_printer_clear@@Base+0x680>
   42178:	cmp	r1, #0
   4217c:	movlt	r1, #-2147483648	; 0x80000000
   42180:	movlt	r0, #0
   42184:	blt	42194 <flatcc_json_printer_clear@@Base+0x67c>
   42188:	cmpeq	r0, #0
   4218c:	mvnne	r1, #-2147483648	; 0x80000000
   42190:	mvnne	r0, #0
   42194:	b	4227c <flatcc_json_printer_clear@@Base+0x764>
   42198:	sub	sp, sp, #8
   4219c:	push	{sp, lr}
   421a0:	cmp	r1, #0
   421a4:	blt	421c4 <flatcc_json_printer_clear@@Base+0x6ac>
   421a8:	cmp	r3, #0
   421ac:	blt	421f8 <flatcc_json_printer_clear@@Base+0x6e0>
   421b0:	bl	4228c <flatcc_json_printer_clear@@Base+0x774>
   421b4:	ldr	lr, [sp, #4]
   421b8:	add	sp, sp, #8
   421bc:	pop	{r2, r3}
   421c0:	bx	lr
   421c4:	rsbs	r0, r0, #0
   421c8:	sbc	r1, r1, r1, lsl #1
   421cc:	cmp	r3, #0
   421d0:	blt	4221c <flatcc_json_printer_clear@@Base+0x704>
   421d4:	bl	4228c <flatcc_json_printer_clear@@Base+0x774>
   421d8:	ldr	lr, [sp, #4]
   421dc:	add	sp, sp, #8
   421e0:	pop	{r2, r3}
   421e4:	rsbs	r0, r0, #0
   421e8:	sbc	r1, r1, r1, lsl #1
   421ec:	rsbs	r2, r2, #0
   421f0:	sbc	r3, r3, r3, lsl #1
   421f4:	bx	lr
   421f8:	rsbs	r2, r2, #0
   421fc:	sbc	r3, r3, r3, lsl #1
   42200:	bl	4228c <flatcc_json_printer_clear@@Base+0x774>
   42204:	ldr	lr, [sp, #4]
   42208:	add	sp, sp, #8
   4220c:	pop	{r2, r3}
   42210:	rsbs	r0, r0, #0
   42214:	sbc	r1, r1, r1, lsl #1
   42218:	bx	lr
   4221c:	rsbs	r2, r2, #0
   42220:	sbc	r3, r3, r3, lsl #1
   42224:	bl	4228c <flatcc_json_printer_clear@@Base+0x774>
   42228:	ldr	lr, [sp, #4]
   4222c:	add	sp, sp, #8
   42230:	pop	{r2, r3}
   42234:	rsbs	r2, r2, #0
   42238:	sbc	r3, r3, r3, lsl #1
   4223c:	bx	lr
   42240:	cmp	r3, #0
   42244:	cmpeq	r2, #0
   42248:	bne	42260 <flatcc_json_printer_clear@@Base+0x748>
   4224c:	cmp	r1, #0
   42250:	cmpeq	r0, #0
   42254:	mvnne	r1, #0
   42258:	mvnne	r0, #0
   4225c:	b	4227c <flatcc_json_printer_clear@@Base+0x764>
   42260:	sub	sp, sp, #8
   42264:	push	{sp, lr}
   42268:	bl	4228c <flatcc_json_printer_clear@@Base+0x774>
   4226c:	ldr	lr, [sp, #4]
   42270:	add	sp, sp, #8
   42274:	pop	{r2, r3}
   42278:	bx	lr
   4227c:	push	{r1, lr}
   42280:	mov	r0, #8
   42284:	bl	144f4 <raise@plt>
   42288:	pop	{r1, pc}
   4228c:	cmp	r1, r3
   42290:	cmpeq	r0, r2
   42294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42298:	mov	r4, r0
   4229c:	movcc	r0, #0
   422a0:	mov	r5, r1
   422a4:	ldr	lr, [sp, #36]	; 0x24
   422a8:	movcc	r1, r0
   422ac:	bcc	423a8 <flatcc_json_printer_clear@@Base+0x890>
   422b0:	cmp	r3, #0
   422b4:	clzeq	ip, r2
   422b8:	clzne	ip, r3
   422bc:	addeq	ip, ip, #32
   422c0:	cmp	r5, #0
   422c4:	clzeq	r1, r4
   422c8:	addeq	r1, r1, #32
   422cc:	clzne	r1, r5
   422d0:	sub	ip, ip, r1
   422d4:	sub	sl, ip, #32
   422d8:	lsl	r9, r3, ip
   422dc:	rsb	fp, ip, #32
   422e0:	orr	r9, r9, r2, lsl sl
   422e4:	orr	r9, r9, r2, lsr fp
   422e8:	lsl	r8, r2, ip
   422ec:	cmp	r5, r9
   422f0:	cmpeq	r4, r8
   422f4:	movcc	r0, #0
   422f8:	movcc	r1, r0
   422fc:	bcc	42318 <flatcc_json_printer_clear@@Base+0x800>
   42300:	mov	r0, #1
   42304:	subs	r4, r4, r8
   42308:	lsl	r1, r0, sl
   4230c:	orr	r1, r1, r0, lsr fp
   42310:	lsl	r0, r0, ip
   42314:	sbc	r5, r5, r9
   42318:	cmp	ip, #0
   4231c:	beq	423a8 <flatcc_json_printer_clear@@Base+0x890>
   42320:	lsr	r6, r8, #1
   42324:	orr	r6, r6, r9, lsl #31
   42328:	lsr	r7, r9, #1
   4232c:	mov	r2, ip
   42330:	b	42354 <flatcc_json_printer_clear@@Base+0x83c>
   42334:	subs	r3, r4, r6
   42338:	sbc	r8, r5, r7
   4233c:	adds	r3, r3, r3
   42340:	adc	r8, r8, r8
   42344:	adds	r4, r3, #1
   42348:	adc	r5, r8, #0
   4234c:	subs	r2, r2, #1
   42350:	beq	42370 <flatcc_json_printer_clear@@Base+0x858>
   42354:	cmp	r5, r7
   42358:	cmpeq	r4, r6
   4235c:	bcs	42334 <flatcc_json_printer_clear@@Base+0x81c>
   42360:	adds	r4, r4, r4
   42364:	adc	r5, r5, r5
   42368:	subs	r2, r2, #1
   4236c:	bne	42354 <flatcc_json_printer_clear@@Base+0x83c>
   42370:	lsr	r3, r4, ip
   42374:	orr	r3, r3, r5, lsl fp
   42378:	lsr	r2, r5, ip
   4237c:	orr	r3, r3, r5, lsr sl
   42380:	adds	r0, r0, r4
   42384:	mov	r4, r3
   42388:	lsl	r3, r2, ip
   4238c:	orr	r3, r3, r4, lsl sl
   42390:	lsl	ip, r4, ip
   42394:	orr	r3, r3, r4, lsr fp
   42398:	adc	r1, r1, r5
   4239c:	subs	r0, r0, ip
   423a0:	mov	r5, r2
   423a4:	sbc	r1, r1, r3
   423a8:	cmp	lr, #0
   423ac:	strdne	r4, [lr]
   423b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000423b4 <__libc_csu_init@@Base>:
   423b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   423b8:	mov	r7, r0
   423bc:	ldr	r6, [pc, #72]	; 4240c <__libc_csu_init@@Base+0x58>
   423c0:	ldr	r5, [pc, #72]	; 42410 <__libc_csu_init@@Base+0x5c>
   423c4:	add	r6, pc, r6
   423c8:	add	r5, pc, r5
   423cc:	sub	r6, r6, r5
   423d0:	mov	r8, r1
   423d4:	mov	r9, r2
   423d8:	bl	144d4 <raise@plt-0x20>
   423dc:	asrs	r6, r6, #2
   423e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   423e4:	mov	r4, #0
   423e8:	add	r4, r4, #1
   423ec:	ldr	r3, [r5], #4
   423f0:	mov	r2, r9
   423f4:	mov	r1, r8
   423f8:	mov	r0, r7
   423fc:	blx	r3
   42400:	cmp	r6, r4
   42404:	bne	423e8 <__libc_csu_init@@Base+0x34>
   42408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4240c:	andeq	r6, r1, r8, asr #22
   42410:	andeq	r6, r1, r0, asr #22

00042414 <__libc_csu_fini@@Base>:
   42414:	bx	lr

Disassembly of section .fini:

00042418 <.fini>:
   42418:	push	{r3, lr}
   4241c:	pop	{r3, pc}
