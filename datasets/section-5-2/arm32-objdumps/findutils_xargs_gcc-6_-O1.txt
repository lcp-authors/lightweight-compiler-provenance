
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001119c <.init>:
   1119c:	push	{r3, lr}
   111a0:	bl	115e8 <__assert_fail@plt+0x48>
   111a4:	pop	{r3, pc}

Disassembly of section .plt:

000111a8 <fdopen@plt-0x14>:
   111a8:	push	{lr}		; (str lr, [sp, #-4]!)
   111ac:	ldr	lr, [pc, #4]	; 111b8 <fdopen@plt-0x4>
   111b0:	add	lr, pc, lr
   111b4:	ldr	pc, [lr, #8]!
   111b8:	andeq	fp, r1, r8, asr #28

000111bc <fdopen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3656]!	; 0xe48

000111c8 <calloc@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3648]!	; 0xe40

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3640]!	; 0xe38

000111e0 <strcmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3632]!	; 0xe30

000111ec <strtol@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3624]!	; 0xe28

000111f8 <printf@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3616]!	; 0xe20

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3608]!	; 0xe18

00011210 <fflush@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3600]!	; 0xe10

0001121c <wcwidth@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3592]!	; 0xe08

00011228 <free@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3584]!	; 0xe00

00011234 <ferror@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011240 <_exit@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3568]!	; 0xdf0

0001124c <memcpy@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3560]!	; 0xde8

00011258 <execvp@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3552]!	; 0xde0

00011264 <mbsinit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011270 <signal@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3536]!	; 0xdd0

0001127c <memcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3528]!	; 0xdc8

00011288 <dcgettext@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3520]!	; 0xdc0

00011294 <sysconf@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3512]!	; 0xdb8

000112a0 <dup2@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112ac <getrlimit64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3496]!	; 0xda8

000112b8 <realloc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3488]!	; 0xda0

000112c4 <textdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3480]!	; 0xd98

000112d0 <iswcntrl@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3472]!	; 0xd90

000112dc <iswprint@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3464]!	; 0xd88

000112e8 <poll@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3456]!	; 0xd80

000112f4 <sigaction@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3448]!	; 0xd78

00011300 <fwrite@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3440]!	; 0xd70

0001130c <lseek64@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3432]!	; 0xd68

00011318 <waitpid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3424]!	; 0xd60

00011324 <__ctype_get_mb_cur_max@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3416]!	; 0xd58

00011330 <strcpy@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #110592	; 0x1b000
   11338:	ldr	pc, [ip, #3408]!	; 0xd50

0001133c <__fpending@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #110592	; 0x1b000
   11344:	ldr	pc, [ip, #3400]!	; 0xd48

00011348 <mbrtowc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #110592	; 0x1b000
   11350:	ldr	pc, [ip, #3392]!	; 0xd40

00011354 <error@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #110592	; 0x1b000
   1135c:	ldr	pc, [ip, #3384]!	; 0xd38

00011360 <opendir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #110592	; 0x1b000
   11368:	ldr	pc, [ip, #3376]!	; 0xd30

0001136c <open64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #110592	; 0x1b000
   11374:	ldr	pc, [ip, #3368]!	; 0xd28

00011378 <getenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #110592	; 0x1b000
   11380:	ldr	pc, [ip, #3360]!	; 0xd20

00011384 <malloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #110592	; 0x1b000
   1138c:	ldr	pc, [ip, #3352]!	; 0xd18

00011390 <__libc_start_main@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #110592	; 0x1b000
   11398:	ldr	pc, [ip, #3344]!	; 0xd10

0001139c <__freading@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #110592	; 0x1b000
   113a4:	ldr	pc, [ip, #3336]!	; 0xd08

000113a8 <__gmon_start__@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #110592	; 0x1b000
   113b0:	ldr	pc, [ip, #3328]!	; 0xd00

000113b4 <getopt_long@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #110592	; 0x1b000
   113bc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113c0 <__ctype_b_loc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #110592	; 0x1b000
   113c8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113cc <getpid@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #110592	; 0x1b000
   113d4:	ldr	pc, [ip, #3304]!	; 0xce8

000113d8 <exit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #110592	; 0x1b000
   113e0:	ldr	pc, [ip, #3296]!	; 0xce0

000113e4 <strtoul@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #110592	; 0x1b000
   113ec:	ldr	pc, [ip, #3288]!	; 0xcd8

000113f0 <strlen@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #110592	; 0x1b000
   113f8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113fc <strchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #110592	; 0x1b000
   11404:	ldr	pc, [ip, #3272]!	; 0xcc8

00011408 <setenv@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #110592	; 0x1b000
   11410:	ldr	pc, [ip, #3264]!	; 0xcc0

00011414 <fprintf@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #110592	; 0x1b000
   1141c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011420 <__errno_location@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #110592	; 0x1b000
   11428:	ldr	pc, [ip, #3248]!	; 0xcb0

0001142c <snprintf@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #110592	; 0x1b000
   11434:	ldr	pc, [ip, #3240]!	; 0xca8

00011438 <__cxa_atexit@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #110592	; 0x1b000
   11440:	ldr	pc, [ip, #3232]!	; 0xca0

00011444 <memset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #110592	; 0x1b000
   1144c:	ldr	pc, [ip, #3224]!	; 0xc98

00011450 <strncpy@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #110592	; 0x1b000
   11458:	ldr	pc, [ip, #3216]!	; 0xc90

0001145c <write@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #110592	; 0x1b000
   11464:	ldr	pc, [ip, #3208]!	; 0xc88

00011468 <fileno@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #110592	; 0x1b000
   11470:	ldr	pc, [ip, #3200]!	; 0xc80

00011474 <memchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #110592	; 0x1b000
   1147c:	ldr	pc, [ip, #3192]!	; 0xc78

00011480 <fclose@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #110592	; 0x1b000
   11488:	ldr	pc, [ip, #3184]!	; 0xc70

0001148c <strnlen@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #110592	; 0x1b000
   11494:	ldr	pc, [ip, #3176]!	; 0xc68

00011498 <pipe@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #110592	; 0x1b000
   114a0:	ldr	pc, [ip, #3168]!	; 0xc60

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #110592	; 0x1b000
   114ac:	ldr	pc, [ip, #3160]!	; 0xc58

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #110592	; 0x1b000
   114b8:	ldr	pc, [ip, #3152]!	; 0xc50

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #110592	; 0x1b000
   114c4:	ldr	pc, [ip, #3144]!	; 0xc48

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #110592	; 0x1b000
   114d0:	ldr	pc, [ip, #3136]!	; 0xc40

000114d4 <fork@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #110592	; 0x1b000
   114dc:	ldr	pc, [ip, #3128]!	; 0xc38

000114e0 <strrchr@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #110592	; 0x1b000
   114e8:	ldr	pc, [ip, #3120]!	; 0xc30

000114ec <nl_langinfo@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #110592	; 0x1b000
   114f4:	ldr	pc, [ip, #3112]!	; 0xc28

000114f8 <fputc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #110592	; 0x1b000
   11500:	ldr	pc, [ip, #3104]!	; 0xc20

00011504 <readdir64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #110592	; 0x1b000
   1150c:	ldr	pc, [ip, #3096]!	; 0xc18

00011510 <fdopendir@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #110592	; 0x1b000
   11518:	ldr	pc, [ip, #3088]!	; 0xc10

0001151c <putc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #110592	; 0x1b000
   11524:	ldr	pc, [ip, #3080]!	; 0xc08

00011528 <dirfd@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #110592	; 0x1b000
   11530:	ldr	pc, [ip, #3072]!	; 0xc00

00011534 <bindtextdomain@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #110592	; 0x1b000
   1153c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011540 <isatty@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #110592	; 0x1b000
   11548:	ldr	pc, [ip, #3056]!	; 0xbf0

0001154c <unsetenv@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #110592	; 0x1b000
   11554:	ldr	pc, [ip, #3048]!	; 0xbe8

00011558 <fputs@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #110592	; 0x1b000
   11560:	ldr	pc, [ip, #3040]!	; 0xbe0

00011564 <strncmp@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #110592	; 0x1b000
   1156c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011570 <abort@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #110592	; 0x1b000
   11578:	ldr	pc, [ip, #3024]!	; 0xbd0

0001157c <getc@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #110592	; 0x1b000
   11584:	ldr	pc, [ip, #3016]!	; 0xbc8

00011588 <close@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #110592	; 0x1b000
   11590:	ldr	pc, [ip, #3008]!	; 0xbc0

00011594 <closedir@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #110592	; 0x1b000
   1159c:	ldr	pc, [ip, #3000]!	; 0xbb8

000115a0 <__assert_fail@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #110592	; 0x1b000
   115a8:	ldr	pc, [ip, #2992]!	; 0xbb0

Disassembly of section .text:

000115ac <.text>:
   115ac:	mov	fp, #0
   115b0:	mov	lr, #0
   115b4:	pop	{r1}		; (ldr r1, [sp], #4)
   115b8:	mov	r2, sp
   115bc:	push	{r2}		; (str r2, [sp, #-4]!)
   115c0:	push	{r0}		; (str r0, [sp, #-4]!)
   115c4:	ldr	ip, [pc, #16]	; 115dc <__assert_fail@plt+0x3c>
   115c8:	push	{ip}		; (str ip, [sp, #-4]!)
   115cc:	ldr	r0, [pc, #12]	; 115e0 <__assert_fail@plt+0x40>
   115d0:	ldr	r3, [pc, #12]	; 115e4 <__assert_fail@plt+0x44>
   115d4:	bl	11390 <__libc_start_main@plt>
   115d8:	bl	11570 <abort@plt>
   115dc:	andeq	sl, r1, r4, ror #18
   115e0:	strdeq	r2, [r1], -r4
   115e4:	andeq	sl, r1, r4, lsl #18
   115e8:	ldr	r3, [pc, #20]	; 11604 <__assert_fail@plt+0x64>
   115ec:	ldr	r2, [pc, #20]	; 11608 <__assert_fail@plt+0x68>
   115f0:	add	r3, pc, r3
   115f4:	ldr	r2, [r3, r2]
   115f8:	cmp	r2, #0
   115fc:	bxeq	lr
   11600:	b	113a8 <__gmon_start__@plt>
   11604:	andeq	fp, r1, r8, lsl #20
   11608:	andeq	r0, r0, ip, asr r1
   1160c:	ldr	r3, [pc, #28]	; 11630 <__assert_fail@plt+0x90>
   11610:	ldr	r0, [pc, #28]	; 11634 <__assert_fail@plt+0x94>
   11614:	sub	r3, r3, r0
   11618:	cmp	r3, #6
   1161c:	bxls	lr
   11620:	ldr	r3, [pc, #16]	; 11638 <__assert_fail@plt+0x98>
   11624:	cmp	r3, #0
   11628:	bxeq	lr
   1162c:	bx	r3
   11630:			; <UNDEFINED> instruction: 0x0002d1bb
   11634:			; <UNDEFINED> instruction: 0x0002d1b8
   11638:	andeq	r0, r0, r0
   1163c:	ldr	r1, [pc, #36]	; 11668 <__assert_fail@plt+0xc8>
   11640:	ldr	r0, [pc, #36]	; 1166c <__assert_fail@plt+0xcc>
   11644:	sub	r1, r1, r0
   11648:	asr	r1, r1, #2
   1164c:	add	r1, r1, r1, lsr #31
   11650:	asrs	r1, r1, #1
   11654:	bxeq	lr
   11658:	ldr	r3, [pc, #16]	; 11670 <__assert_fail@plt+0xd0>
   1165c:	cmp	r3, #0
   11660:	bxeq	lr
   11664:	bx	r3
   11668:			; <UNDEFINED> instruction: 0x0002d1b8
   1166c:			; <UNDEFINED> instruction: 0x0002d1b8
   11670:	andeq	r0, r0, r0
   11674:	push	{r4, lr}
   11678:	ldr	r4, [pc, #24]	; 11698 <__assert_fail@plt+0xf8>
   1167c:	ldrb	r3, [r4]
   11680:	cmp	r3, #0
   11684:	popne	{r4, pc}
   11688:	bl	1160c <__assert_fail@plt+0x6c>
   1168c:	mov	r3, #1
   11690:	strb	r3, [r4]
   11694:	pop	{r4, pc}
   11698:	andeq	sp, r2, r4, ror #3
   1169c:	ldr	r0, [pc, #40]	; 116cc <__assert_fail@plt+0x12c>
   116a0:	ldr	r3, [r0]
   116a4:	cmp	r3, #0
   116a8:	bne	116b0 <__assert_fail@plt+0x110>
   116ac:	b	1163c <__assert_fail@plt+0x9c>
   116b0:	ldr	r3, [pc, #24]	; 116d0 <__assert_fail@plt+0x130>
   116b4:	cmp	r3, #0
   116b8:	beq	116ac <__assert_fail@plt+0x10c>
   116bc:	push	{r4, lr}
   116c0:	blx	r3
   116c4:	pop	{r4, lr}
   116c8:	b	1163c <__assert_fail@plt+0x9c>
   116cc:	andeq	ip, r2, r4, lsl pc
   116d0:	andeq	r0, r0, r0
   116d4:	bx	lr
   116d8:	ldr	r3, [pc, #36]	; 11704 <__assert_fail@plt+0x164>
   116dc:	ldr	r3, [r3]
   116e0:	cmn	r3, #-2147483647	; 0x80000001
   116e4:	ldrne	r2, [pc, #24]	; 11704 <__assert_fail@plt+0x164>
   116e8:	ldrne	r3, [r2]
   116ec:	addne	r3, r3, #1
   116f0:	strne	r3, [r2]
   116f4:	mov	r2, #1
   116f8:	ldr	r3, [pc, #8]	; 11708 <__assert_fail@plt+0x168>
   116fc:	str	r2, [r3]
   11700:	bx	lr
   11704:	andeq	sp, r2, r8, ror #2
   11708:	andeq	sp, r2, r8, ror #3
   1170c:	ldr	r3, [pc, #24]	; 1172c <__assert_fail@plt+0x18c>
   11710:	ldr	r3, [r3]
   11714:	cmp	r3, #1
   11718:	ldrgt	r2, [pc, #12]	; 1172c <__assert_fail@plt+0x18c>
   1171c:	ldrgt	r3, [r2]
   11720:	subgt	r3, r3, #1
   11724:	strgt	r3, [r2]
   11728:	bx	lr
   1172c:	andeq	sp, r2, r8, ror #2
   11730:	push	{r4, r5, lr}
   11734:	sub	sp, sp, #12
   11738:	mov	r5, r0
   1173c:	mov	r4, r1
   11740:	mov	r2, #5
   11744:	ldr	r1, [pc, #40]	; 11774 <__assert_fail@plt+0x1d4>
   11748:	mov	r0, #0
   1174c:	bl	11288 <dcgettext@plt>
   11750:	str	r4, [sp, #4]
   11754:	str	r5, [sp]
   11758:	mov	r3, r4
   1175c:	mov	r2, r0
   11760:	mov	r1, #0
   11764:	mov	r0, r1
   11768:	bl	11354 <error@plt>
   1176c:	add	sp, sp, #12
   11770:	pop	{r4, r5, pc}
   11774:	strdeq	sl, [r1], -r4
   11778:	push	{r4, lr}
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #20]	; 1179c <__assert_fail@plt+0x1fc>
   11784:	mov	r0, #0
   11788:	bl	11288 <dcgettext@plt>
   1178c:	mov	r2, r0
   11790:	mov	r1, #0
   11794:	mov	r0, #1
   11798:	bl	11354 <error@plt>
   1179c:	andeq	sl, r1, r4, asr #22
   117a0:	ldr	r3, [pc, #84]	; 117fc <__assert_fail@plt+0x25c>
   117a4:	ldr	r3, [r3, #28]
   117a8:	cmp	r3, #0
   117ac:	bxne	lr
   117b0:	ldr	r3, [pc, #72]	; 11800 <__assert_fail@plt+0x260>
   117b4:	ldrb	r3, [r3, #4]
   117b8:	cmp	r3, #0
   117bc:	bxne	lr
   117c0:	ldr	r3, [pc, #52]	; 117fc <__assert_fail@plt+0x25c>
   117c4:	ldr	r2, [r3, #48]	; 0x30
   117c8:	ldr	r3, [r3, #32]
   117cc:	cmp	r2, r3
   117d0:	bxeq	lr
   117d4:	ldr	r3, [pc, #32]	; 117fc <__assert_fail@plt+0x25c>
   117d8:	ldr	r3, [r3, #4]
   117dc:	cmp	r3, #0
   117e0:	bxne	lr
   117e4:	push	{r4, lr}
   117e8:	ldr	r0, [pc, #12]	; 117fc <__assert_fail@plt+0x25c>
   117ec:	add	r1, r0, #48	; 0x30
   117f0:	add	r0, r0, #4
   117f4:	bl	144dc <__assert_fail@plt+0x2f3c>
   117f8:	pop	{r4, pc}
   117fc:	andeq	sp, r2, r8, ror #3
   11800:	andeq	sp, r2, r8, ror #2
   11804:	push	{r4, r5, r6, r7, lr}
   11808:	sub	sp, sp, #20
   1180c:	ldr	r3, [pc, #332]	; 11960 <__assert_fail@plt+0x3c0>
   11810:	ldr	r5, [r3, #92]	; 0x5c
   11814:	ldr	r7, [r3, #16]
   11818:	sub	r7, r7, #1
   1181c:	ldr	r2, [r3, #68]	; 0x44
   11820:	sub	r7, r7, r2
   11824:	add	r7, r5, r7
   11828:	ldrb	r3, [r3, #96]	; 0x60
   1182c:	cmp	r3, #0
   11830:	bne	11958 <__assert_fail@plt+0x3b8>
   11834:	ldr	r6, [pc, #292]	; 11960 <__assert_fail@plt+0x3c0>
   11838:	ldr	r0, [r6, #100]	; 0x64
   1183c:	bl	1157c <getc@plt>
   11840:	mov	r4, r0
   11844:	cmn	r0, #1
   11848:	beq	11868 <__assert_fail@plt+0x2c8>
   1184c:	ldrb	r3, [r6, #104]	; 0x68
   11850:	cmp	r0, r3
   11854:	beq	118d8 <__assert_fail@plt+0x338>
   11858:	cmp	r5, r7
   1185c:	bcs	11934 <__assert_fail@plt+0x394>
   11860:	strb	r0, [r5], #1
   11864:	b	11838 <__assert_fail@plt+0x298>
   11868:	ldr	r3, [pc, #240]	; 11960 <__assert_fail@plt+0x3c0>
   1186c:	mov	r2, #1
   11870:	strb	r2, [r3, #96]	; 0x60
   11874:	ldr	r2, [r3, #92]	; 0x5c
   11878:	cmp	r5, r2
   1187c:	beq	1189c <__assert_fail@plt+0x2fc>
   11880:	mov	r3, #0
   11884:	strb	r3, [r5], #1
   11888:	sub	r4, r5, r2
   1188c:	ldr	r3, [pc, #204]	; 11960 <__assert_fail@plt+0x3c0>
   11890:	ldr	r3, [r3, #28]
   11894:	cmp	r3, #0
   11898:	beq	118a8 <__assert_fail@plt+0x308>
   1189c:	mov	r0, r4
   118a0:	add	sp, sp, #20
   118a4:	pop	{r4, r5, r6, r7, pc}
   118a8:	ldr	r0, [pc, #176]	; 11960 <__assert_fail@plt+0x3c0>
   118ac:	ldr	r3, [pc, #176]	; 11964 <__assert_fail@plt+0x3c4>
   118b0:	ldrb	r3, [r3, #4]
   118b4:	str	r3, [sp, #8]
   118b8:	mov	r3, #0
   118bc:	str	r3, [sp, #4]
   118c0:	str	r3, [sp]
   118c4:	mov	r3, r4
   118c8:	add	r1, r0, #48	; 0x30
   118cc:	add	r0, r0, #4
   118d0:	bl	14094 <__assert_fail@plt+0x2af4>
   118d4:	b	1189c <__assert_fail@plt+0x2fc>
   118d8:	ldr	r3, [pc, #128]	; 11960 <__assert_fail@plt+0x3c0>
   118dc:	ldr	r2, [r3, #108]	; 0x6c
   118e0:	add	r2, r2, #1
   118e4:	str	r2, [r3, #108]	; 0x6c
   118e8:	mov	r2, #0
   118ec:	strb	r2, [r5], #1
   118f0:	ldr	r2, [r3, #92]	; 0x5c
   118f4:	sub	r4, r5, r2
   118f8:	ldr	r3, [r3, #28]
   118fc:	cmp	r3, #0
   11900:	bne	1189c <__assert_fail@plt+0x2fc>
   11904:	ldr	r0, [pc, #84]	; 11960 <__assert_fail@plt+0x3c0>
   11908:	ldr	r3, [pc, #84]	; 11964 <__assert_fail@plt+0x3c4>
   1190c:	ldrb	r3, [r3, #4]
   11910:	str	r3, [sp, #8]
   11914:	mov	r3, #0
   11918:	str	r3, [sp, #4]
   1191c:	str	r3, [sp]
   11920:	mov	r3, r4
   11924:	add	r1, r0, #48	; 0x30
   11928:	add	r0, r0, #4
   1192c:	bl	14094 <__assert_fail@plt+0x2af4>
   11930:	b	1189c <__assert_fail@plt+0x2fc>
   11934:	bl	117a0 <__assert_fail@plt+0x200>
   11938:	mov	r2, #5
   1193c:	ldr	r1, [pc, #36]	; 11968 <__assert_fail@plt+0x3c8>
   11940:	mov	r0, #0
   11944:	bl	11288 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	mov	r1, #0
   11950:	mov	r0, #1
   11954:	bl	11354 <error@plt>
   11958:	mvn	r4, #0
   1195c:	b	1189c <__assert_fail@plt+0x2fc>
   11960:	andeq	sp, r2, r8, ror #3
   11964:	andeq	sp, r2, r8, ror #2
   11968:	andeq	sl, r1, r8, ror #22
   1196c:	ldr	r3, [pc, #556]	; 11ba0 <__assert_fail@plt+0x600>
   11970:	ldr	r3, [r3, #112]	; 0x70
   11974:	cmp	r3, #0
   11978:	bxeq	lr
   1197c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11980:	sub	sp, sp, #28
   11984:	mov	r9, r0
   11988:	mov	r8, #0
   1198c:	eor	fp, r0, #1
   11990:	ldr	r5, [pc, #520]	; 11ba0 <__assert_fail@plt+0x600>
   11994:	mov	sl, r8
   11998:	str	r8, [sp, #12]
   1199c:	mov	r7, r1
   119a0:	b	11abc <__assert_fail@plt+0x51c>
   119a4:	bl	11420 <__errno_location@plt>
   119a8:	ldr	r3, [r0]
   119ac:	cmp	r3, #4
   119b0:	bne	11ad8 <__assert_fail@plt+0x538>
   119b4:	ldr	r3, [r5]
   119b8:	cmp	r3, #0
   119bc:	movne	r3, r9
   119c0:	orreq	r3, r9, #1
   119c4:	cmp	r3, #0
   119c8:	moveq	r4, #1
   119cc:	mov	r2, r4
   119d0:	add	r1, sp, #20
   119d4:	mov	r0, r6
   119d8:	bl	11318 <waitpid@plt>
   119dc:	cmn	r0, #1
   119e0:	beq	119a4 <__assert_fail@plt+0x404>
   119e4:	cmp	r0, #0
   119e8:	beq	11b88 <__assert_fail@plt+0x5e8>
   119ec:	ldr	ip, [r5, #116]	; 0x74
   119f0:	cmp	ip, #0
   119f4:	beq	119cc <__assert_fail@plt+0x42c>
   119f8:	ldr	r2, [r5, #120]	; 0x78
   119fc:	ldr	r3, [r2]
   11a00:	cmp	r0, r3
   11a04:	beq	11b98 <__assert_fail@plt+0x5f8>
   11a08:	mov	r3, #0
   11a0c:	add	r3, r3, #1
   11a10:	cmp	r3, ip
   11a14:	beq	119cc <__assert_fail@plt+0x42c>
   11a18:	ldr	r1, [r2, #4]!
   11a1c:	cmp	r0, r1
   11a20:	bne	11a0c <__assert_fail@plt+0x46c>
   11a24:	ldr	r2, [r5, #120]	; 0x78
   11a28:	str	sl, [r2, r3, lsl #2]
   11a2c:	ldr	r3, [r5, #112]	; 0x70
   11a30:	sub	r3, r3, #1
   11a34:	str	r3, [r5, #112]	; 0x70
   11a38:	add	r8, r8, #1
   11a3c:	ldrb	r3, [sp, #21]
   11a40:	cmp	r3, #255	; 0xff
   11a44:	beq	11b28 <__assert_fail@plt+0x588>
   11a48:	ldrb	r3, [sp, #20]
   11a4c:	cmp	r3, #127	; 0x7f
   11a50:	beq	11b54 <__assert_fail@plt+0x5b4>
   11a54:	ldr	r3, [sp, #20]
   11a58:	and	r3, r3, #127	; 0x7f
   11a5c:	add	r3, r3, #1
   11a60:	sxtb	r3, r3
   11a64:	cmp	r3, #1
   11a68:	ble	11aa0 <__assert_fail@plt+0x500>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #300]	; 11ba4 <__assert_fail@plt+0x604>
   11a74:	mov	r0, sl
   11a78:	bl	11288 <dcgettext@plt>
   11a7c:	ldr	r3, [r5, #52]	; 0x34
   11a80:	ldr	r3, [r3]
   11a84:	ldr	r2, [sp, #20]
   11a88:	and	r2, r2, #127	; 0x7f
   11a8c:	str	r2, [sp]
   11a90:	mov	r2, r0
   11a94:	mov	r1, sl
   11a98:	mov	r0, #125	; 0x7d
   11a9c:	bl	11354 <error@plt>
   11aa0:	ldrb	r3, [sp, #21]
   11aa4:	cmp	r3, #0
   11aa8:	movne	r3, #123	; 0x7b
   11aac:	strne	r3, [r5, #124]	; 0x7c
   11ab0:	ldr	r3, [r5, #112]	; 0x70
   11ab4:	cmp	r3, #0
   11ab8:	beq	11b90 <__assert_fail@plt+0x5f0>
   11abc:	cmp	r7, r8
   11ac0:	movhi	r4, #0
   11ac4:	andls	r4, fp, #1
   11ac8:	ldr	r3, [sp, #12]
   11acc:	str	r3, [r5]
   11ad0:	mvn	r6, #0
   11ad4:	b	119cc <__assert_fail@plt+0x42c>
   11ad8:	mov	r7, r3
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #192]	; 11ba8 <__assert_fail@plt+0x608>
   11ae4:	mov	r0, #0
   11ae8:	bl	11288 <dcgettext@plt>
   11aec:	mov	r2, r0
   11af0:	mov	r1, r7
   11af4:	mov	r0, #1
   11af8:	bl	11354 <error@plt>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #164]	; 11bac <__assert_fail@plt+0x60c>
   11b04:	mov	r0, #0
   11b08:	bl	11288 <dcgettext@plt>
   11b0c:	ldr	r3, [pc, #140]	; 11ba0 <__assert_fail@plt+0x600>
   11b10:	ldr	r3, [r3, #112]	; 0x70
   11b14:	mov	r2, r0
   11b18:	mov	r1, #0
   11b1c:	mov	r0, r1
   11b20:	bl	11354 <error@plt>
   11b24:	b	11b90 <__assert_fail@plt+0x5f0>
   11b28:	mov	r2, #5
   11b2c:	ldr	r1, [pc, #124]	; 11bb0 <__assert_fail@plt+0x610>
   11b30:	mov	r0, sl
   11b34:	bl	11288 <dcgettext@plt>
   11b38:	ldr	r3, [r5, #52]	; 0x34
   11b3c:	ldr	r3, [r3]
   11b40:	mov	r2, r0
   11b44:	mov	r1, sl
   11b48:	mov	r0, #124	; 0x7c
   11b4c:	bl	11354 <error@plt>
   11b50:	b	11a48 <__assert_fail@plt+0x4a8>
   11b54:	mov	r2, #5
   11b58:	ldr	r1, [pc, #84]	; 11bb4 <__assert_fail@plt+0x614>
   11b5c:	mov	r0, sl
   11b60:	bl	11288 <dcgettext@plt>
   11b64:	ldr	r3, [r5, #52]	; 0x34
   11b68:	ldr	r3, [r3]
   11b6c:	ldrb	r2, [sp, #21]
   11b70:	str	r2, [sp]
   11b74:	mov	r2, r0
   11b78:	mov	r1, sl
   11b7c:	mov	r0, #125	; 0x7d
   11b80:	bl	11354 <error@plt>
   11b84:	b	11a54 <__assert_fail@plt+0x4b4>
   11b88:	tst	r4, #1
   11b8c:	beq	11afc <__assert_fail@plt+0x55c>
   11b90:	add	sp, sp, #28
   11b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b98:	mov	r3, #0
   11b9c:	b	11a24 <__assert_fail@plt+0x484>
   11ba0:	andeq	sp, r2, r8, ror #3
   11ba4:	andeq	sl, r1, r0, lsl ip
   11ba8:	andeq	sl, r1, r0, lsl #23
   11bac:	andeq	sl, r1, r0, lsr #23
   11bb0:	andeq	sl, r1, ip, asr #23
   11bb4:	strdeq	sl, [r1], -r4
   11bb8:	push	{r4, lr}
   11bbc:	bl	113cc <getpid@plt>
   11bc0:	ldr	r3, [pc, #96]	; 11c28 <__assert_fail@plt+0x688>
   11bc4:	ldr	r3, [r3, #128]	; 0x80
   11bc8:	cmp	r0, r3
   11bcc:	bne	11c14 <__assert_fail@plt+0x674>
   11bd0:	ldr	r3, [pc, #80]	; 11c28 <__assert_fail@plt+0x688>
   11bd4:	ldrb	r3, [r3, #132]	; 0x84
   11bd8:	cmp	r3, #0
   11bdc:	popne	{r4, pc}
   11be0:	ldr	r4, [pc, #64]	; 11c28 <__assert_fail@plt+0x688>
   11be4:	mov	r0, #1
   11be8:	strb	r0, [r4, #132]	; 0x84
   11bec:	mov	r1, #0
   11bf0:	bl	1196c <__assert_fail@plt+0x3cc>
   11bf4:	mov	r3, #0
   11bf8:	strb	r3, [r4, #132]	; 0x84
   11bfc:	ldr	r2, [r4, #136]	; 0x88
   11c00:	ldr	r3, [r4, #124]	; 0x7c
   11c04:	cmp	r2, r3
   11c08:	popeq	{r4, pc}
   11c0c:	ldr	r0, [r4, #124]	; 0x7c
   11c10:	bl	11240 <_exit@plt>
   11c14:	ldr	r3, [pc, #16]	; 11c2c <__assert_fail@plt+0x68c>
   11c18:	ldr	r2, [pc, #16]	; 11c30 <__assert_fail@plt+0x690>
   11c1c:	ldr	r1, [pc, #16]	; 11c34 <__assert_fail@plt+0x694>
   11c20:	ldr	r0, [pc, #16]	; 11c38 <__assert_fail@plt+0x698>
   11c24:	bl	115a0 <__assert_fail@plt>
   11c28:	andeq	sp, r2, r8, ror #3
   11c2c:	andeq	sl, r1, ip, lsl #19
   11c30:	andeq	r0, r0, r5, asr #12
   11c34:	andeq	sl, r1, ip, lsr #24
   11c38:	andeq	sl, r1, r4, lsr ip
   11c3c:	push	{r4, r5, r6, lr}
   11c40:	mov	r5, r0
   11c44:	ldr	r3, [pc, #228]	; 11d30 <__assert_fail@plt+0x790>
   11c48:	ldr	r1, [r3, #116]	; 0x74
   11c4c:	cmp	r1, #0
   11c50:	beq	11cbc <__assert_fail@plt+0x71c>
   11c54:	ldr	r3, [r3, #120]	; 0x78
   11c58:	ldr	r2, [r3]
   11c5c:	cmp	r2, #0
   11c60:	beq	11d20 <__assert_fail@plt+0x780>
   11c64:	mov	r4, #0
   11c68:	add	r4, r4, #1
   11c6c:	cmp	r4, r1
   11c70:	beq	11cc0 <__assert_fail@plt+0x720>
   11c74:	ldr	r2, [r3, #4]!
   11c78:	cmp	r2, #0
   11c7c:	bne	11c68 <__assert_fail@plt+0x6c8>
   11c80:	ldr	r3, [pc, #168]	; 11d30 <__assert_fail@plt+0x790>
   11c84:	ldr	r3, [r3, #120]	; 0x78
   11c88:	add	r2, r3, r4, lsl #2
   11c8c:	ldr	r3, [r3, r4, lsl #2]
   11c90:	cmp	r3, #0
   11c94:	bne	11d0c <__assert_fail@plt+0x76c>
   11c98:	str	r5, [r2]
   11c9c:	ldr	r3, [pc, #140]	; 11d30 <__assert_fail@plt+0x790>
   11ca0:	ldr	r2, [r3, #112]	; 0x70
   11ca4:	add	r2, r2, #1
   11ca8:	str	r2, [r3, #112]	; 0x70
   11cac:	mov	r2, #1
   11cb0:	strb	r2, [r3, #140]	; 0x8c
   11cb4:	mov	r0, r4
   11cb8:	pop	{r4, r5, r6, pc}
   11cbc:	mov	r4, r1
   11cc0:	ldr	r6, [pc, #104]	; 11d30 <__assert_fail@plt+0x790>
   11cc4:	mov	r2, #4
   11cc8:	add	r1, r6, #116	; 0x74
   11ccc:	ldr	r0, [r6, #120]	; 0x78
   11cd0:	bl	190b0 <__assert_fail@plt+0x7b10>
   11cd4:	str	r0, [r6, #120]	; 0x78
   11cd8:	ldr	r3, [r6, #116]	; 0x74
   11cdc:	cmp	r3, r4
   11ce0:	bls	11c80 <__assert_fail@plt+0x6e0>
   11ce4:	add	r2, r0, r4, lsl #2
   11ce8:	mov	r3, r4
   11cec:	mov	ip, #0
   11cf0:	mov	r0, r6
   11cf4:	str	ip, [r2], #4
   11cf8:	add	r3, r3, #1
   11cfc:	ldr	r1, [r0, #116]	; 0x74
   11d00:	cmp	r1, r3
   11d04:	bhi	11cf4 <__assert_fail@plt+0x754>
   11d08:	b	11c80 <__assert_fail@plt+0x6e0>
   11d0c:	ldr	r3, [pc, #32]	; 11d34 <__assert_fail@plt+0x794>
   11d10:	ldr	r2, [pc, #32]	; 11d38 <__assert_fail@plt+0x798>
   11d14:	ldr	r1, [pc, #32]	; 11d3c <__assert_fail@plt+0x79c>
   11d18:	ldr	r0, [pc, #32]	; 11d40 <__assert_fail@plt+0x7a0>
   11d1c:	bl	115a0 <__assert_fail@plt>
   11d20:	ldr	r3, [pc, #8]	; 11d30 <__assert_fail@plt+0x790>
   11d24:	ldr	r2, [r3, #120]	; 0x78
   11d28:	mov	r4, #0
   11d2c:	b	11c98 <__assert_fail@plt+0x6f8>
   11d30:	andeq	sp, r2, r8, ror #3
   11d34:	andeq	sl, r1, r0, lsr #19
   11d38:	andeq	r0, r0, r5, asr #11
   11d3c:	andeq	sl, r1, ip, lsr #24
   11d40:	andeq	sl, r1, r8, asr #24
   11d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d48:	sub	sp, sp, #36	; 0x24
   11d4c:	ldr	r3, [pc, #1168]	; 121e4 <__assert_fail@plt+0xc44>
   11d50:	ldr	r5, [r3, #92]	; 0x5c
   11d54:	ldr	r9, [r3, #16]
   11d58:	sub	r9, r9, #1
   11d5c:	ldr	r2, [r3, #68]	; 0x44
   11d60:	sub	r9, r9, r2
   11d64:	add	r9, r5, r9
   11d68:	ldrb	r3, [r3, #141]	; 0x8d
   11d6c:	str	r3, [sp, #24]
   11d70:	cmp	r3, #0
   11d74:	bne	121d4 <__assert_fail@plt+0xc34>
   11d78:	mov	fp, r3
   11d7c:	mov	r3, #1
   11d80:	str	r3, [sp, #20]
   11d84:	mvn	r8, #0
   11d88:	mov	sl, #0
   11d8c:	mov	r6, r3
   11d90:	ldr	r7, [pc, #1100]	; 121e4 <__assert_fail@plt+0xc44>
   11d94:	add	r3, r7, #48	; 0x30
   11d98:	str	r3, [sp, #28]
   11d9c:	b	11ed8 <__assert_fail@plt+0x938>
   11da0:	mov	r6, #1
   11da4:	b	11ed4 <__assert_fail@plt+0x934>
   11da8:	mov	fp, #1
   11dac:	mov	r6, #3
   11db0:	b	11ed4 <__assert_fail@plt+0x934>
   11db4:	ldr	r3, [pc, #1064]	; 121e4 <__assert_fail@plt+0xc44>
   11db8:	mov	r2, #1
   11dbc:	strb	r2, [r3, #141]	; 0x8d
   11dc0:	ldr	r7, [r3, #92]	; 0x5c
   11dc4:	cmp	r5, r7
   11dc8:	beq	121dc <__assert_fail@plt+0xc3c>
   11dcc:	mov	r3, #0
   11dd0:	strb	r3, [r5], #1
   11dd4:	sub	r5, r5, r7
   11dd8:	cmp	r6, #2
   11ddc:	beq	11e50 <__assert_fail@plt+0x8b0>
   11de0:	ldr	r3, [sp, #20]
   11de4:	cmp	r3, #0
   11de8:	beq	11e0c <__assert_fail@plt+0x86c>
   11dec:	ldr	r3, [pc, #1008]	; 121e4 <__assert_fail@plt+0xc44>
   11df0:	ldr	r0, [r3, #144]	; 0x90
   11df4:	cmp	r0, #0
   11df8:	beq	11e0c <__assert_fail@plt+0x86c>
   11dfc:	ldrb	r2, [r0]
   11e00:	ldrb	r3, [r7]
   11e04:	cmp	r2, r3
   11e08:	beq	11e94 <__assert_fail@plt+0x8f4>
   11e0c:	ldr	r3, [pc, #976]	; 121e4 <__assert_fail@plt+0xc44>
   11e10:	ldr	r3, [r3, #28]
   11e14:	cmp	r3, #0
   11e18:	bne	11ff8 <__assert_fail@plt+0xa58>
   11e1c:	ldr	r0, [pc, #960]	; 121e4 <__assert_fail@plt+0xc44>
   11e20:	ldr	r3, [pc, #960]	; 121e8 <__assert_fail@plt+0xc48>
   11e24:	ldrb	r3, [r3, #4]
   11e28:	str	r3, [sp, #8]
   11e2c:	mov	r3, #0
   11e30:	str	r3, [sp, #4]
   11e34:	str	r3, [sp]
   11e38:	mov	r3, r5
   11e3c:	mov	r2, r7
   11e40:	add	r1, r0, #48	; 0x30
   11e44:	add	r0, r0, #4
   11e48:	bl	14094 <__assert_fail@plt+0x2af4>
   11e4c:	b	11ff8 <__assert_fail@plt+0xa58>
   11e50:	bl	117a0 <__assert_fail@plt+0x200>
   11e54:	mov	r2, #5
   11e58:	ldr	r1, [pc, #908]	; 121ec <__assert_fail@plt+0xc4c>
   11e5c:	mov	r0, #0
   11e60:	bl	11288 <dcgettext@plt>
   11e64:	mov	r4, r0
   11e68:	cmp	sl, #34	; 0x22
   11e6c:	mov	r2, #5
   11e70:	ldreq	r1, [pc, #888]	; 121f0 <__assert_fail@plt+0xc50>
   11e74:	ldrne	r1, [pc, #888]	; 121f4 <__assert_fail@plt+0xc54>
   11e78:	mov	r0, #0
   11e7c:	bl	11288 <dcgettext@plt>
   11e80:	mov	r3, r0
   11e84:	mov	r2, r4
   11e88:	mov	r1, #0
   11e8c:	mov	r0, #1
   11e90:	bl	11354 <error@plt>
   11e94:	mov	r1, r7
   11e98:	bl	111e0 <strcmp@plt>
   11e9c:	cmp	r0, #0
   11ea0:	bne	11e0c <__assert_fail@plt+0x86c>
   11ea4:	mov	r5, r4
   11ea8:	b	11ff8 <__assert_fail@plt+0xa58>
   11eac:	mov	r6, #0
   11eb0:	cmp	r4, #0
   11eb4:	bne	11ec4 <__assert_fail@plt+0x924>
   11eb8:	ldr	r3, [r7, #148]	; 0x94
   11ebc:	cmp	r3, #0
   11ec0:	beq	12184 <__assert_fail@plt+0xbe4>
   11ec4:	cmp	r5, r9
   11ec8:	bcs	121b0 <__assert_fail@plt+0xc10>
   11ecc:	strb	r4, [r5]
   11ed0:	add	r5, r5, #1
   11ed4:	mov	r8, r4
   11ed8:	ldr	r0, [r7, #100]	; 0x64
   11edc:	bl	1157c <getc@plt>
   11ee0:	mov	r4, r0
   11ee4:	cmn	r0, #1
   11ee8:	beq	11db4 <__assert_fail@plt+0x814>
   11eec:	cmp	r6, #3
   11ef0:	ldrls	pc, [pc, r6, lsl #2]
   11ef4:	b	11eb0 <__assert_fail@plt+0x910>
   11ef8:	andeq	r1, r1, r4, lsr pc
   11efc:	andeq	r1, r1, r8, lsl #30
   11f00:	andeq	r2, r1, r0, lsr #2
   11f04:	andeq	r1, r1, ip, lsr #29
   11f08:	bics	r3, r0, #127	; 0x7f
   11f0c:	bne	11f28 <__assert_fail@plt+0x988>
   11f10:	bl	113c0 <__ctype_b_loc@plt>
   11f14:	ldr	r2, [r0]
   11f18:	lsl	r3, r4, #1
   11f1c:	ldrh	r3, [r2, r3]
   11f20:	tst	r3, #1
   11f24:	bne	11ed4 <__assert_fail@plt+0x934>
   11f28:	sub	r3, r4, #10
   11f2c:	cmp	r3, #3
   11f30:	bls	11ed4 <__assert_fail@plt+0x934>
   11f34:	cmp	r4, #10
   11f38:	beq	11f78 <__assert_fail@plt+0x9d8>
   11f3c:	ldr	r3, [r7, #28]
   11f40:	cmp	r3, #0
   11f44:	beq	12064 <__assert_fail@plt+0xac4>
   11f48:	cmp	r4, #39	; 0x27
   11f4c:	beq	11f68 <__assert_fail@plt+0x9c8>
   11f50:	cmp	r4, #92	; 0x5c
   11f54:	beq	11da8 <__assert_fail@plt+0x808>
   11f58:	cmp	r4, #34	; 0x22
   11f5c:	movne	fp, #1
   11f60:	movne	r6, #0
   11f64:	bne	11eb0 <__assert_fail@plt+0x910>
   11f68:	mov	sl, r4
   11f6c:	mov	fp, #1
   11f70:	mov	r6, #2
   11f74:	b	11ed4 <__assert_fail@plt+0x934>
   11f78:	bics	r3, r8, #127	; 0x7f
   11f7c:	bne	11f98 <__assert_fail@plt+0x9f8>
   11f80:	bl	113c0 <__ctype_b_loc@plt>
   11f84:	ldr	r3, [r0]
   11f88:	lsl	r8, r8, #1
   11f8c:	ldrh	r3, [r3, r8]
   11f90:	tst	r3, #1
   11f94:	bne	11fa4 <__assert_fail@plt+0xa04>
   11f98:	ldr	r3, [r7, #108]	; 0x6c
   11f9c:	add	r3, r3, #1
   11fa0:	str	r3, [r7, #108]	; 0x6c
   11fa4:	ldr	r6, [r7, #92]	; 0x5c
   11fa8:	cmp	r5, r6
   11fac:	moveq	r3, fp
   11fb0:	orrne	r3, fp, #1
   11fb4:	cmp	r3, #0
   11fb8:	beq	11da0 <__assert_fail@plt+0x800>
   11fbc:	mov	r3, #0
   11fc0:	strb	r3, [r5], #1
   11fc4:	sub	r5, r5, r6
   11fc8:	ldr	r3, [pc, #532]	; 121e4 <__assert_fail@plt+0xc44>
   11fcc:	ldr	r0, [r3, #144]	; 0x90
   11fd0:	cmp	r0, #0
   11fd4:	beq	11fe8 <__assert_fail@plt+0xa48>
   11fd8:	ldrb	r2, [r0]
   11fdc:	ldrb	r3, [r6]
   11fe0:	cmp	r2, r3
   11fe4:	beq	12004 <__assert_fail@plt+0xa64>
   11fe8:	ldr	r3, [pc, #500]	; 121e4 <__assert_fail@plt+0xc44>
   11fec:	ldr	r3, [r3, #28]
   11ff0:	cmp	r3, #0
   11ff4:	beq	12030 <__assert_fail@plt+0xa90>
   11ff8:	mov	r0, r5
   11ffc:	add	sp, sp, #36	; 0x24
   12000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12004:	mov	r1, r6
   12008:	bl	111e0 <strcmp@plt>
   1200c:	cmp	r0, #0
   12010:	bne	11fe8 <__assert_fail@plt+0xa48>
   12014:	mov	r2, #1
   12018:	ldr	r3, [pc, #452]	; 121e4 <__assert_fail@plt+0xc44>
   1201c:	strb	r2, [r3, #141]	; 0x8d
   12020:	ldr	r3, [sp, #20]
   12024:	cmp	r3, #0
   12028:	mvnne	r5, #0
   1202c:	b	11ff8 <__assert_fail@plt+0xa58>
   12030:	ldr	r0, [pc, #428]	; 121e4 <__assert_fail@plt+0xc44>
   12034:	ldr	r3, [pc, #428]	; 121e8 <__assert_fail@plt+0xc48>
   12038:	ldrb	r3, [r3, #4]
   1203c:	str	r3, [sp, #8]
   12040:	mov	r3, #0
   12044:	str	r3, [sp, #4]
   12048:	str	r3, [sp]
   1204c:	mov	r3, r5
   12050:	mov	r2, r6
   12054:	add	r1, r0, #48	; 0x30
   12058:	add	r0, r0, #4
   1205c:	bl	14094 <__assert_fail@plt+0x2af4>
   12060:	b	11ff8 <__assert_fail@plt+0xa58>
   12064:	bics	r3, r4, #127	; 0x7f
   12068:	bne	11f48 <__assert_fail@plt+0x9a8>
   1206c:	bl	113c0 <__ctype_b_loc@plt>
   12070:	ldr	r2, [r0]
   12074:	lsl	r3, r4, #1
   12078:	ldrh	r3, [r2, r3]
   1207c:	tst	r3, #1
   12080:	beq	11f48 <__assert_fail@plt+0x9a8>
   12084:	mov	r3, #0
   12088:	strb	r3, [r5], #1
   1208c:	ldr	r6, [r7, #92]	; 0x5c
   12090:	sub	r5, r5, r6
   12094:	ldr	r0, [r7, #144]	; 0x90
   12098:	cmp	r0, #0
   1209c:	beq	120b0 <__assert_fail@plt+0xb10>
   120a0:	ldrb	r2, [r0]
   120a4:	ldrb	r3, [r6]
   120a8:	cmp	r2, r3
   120ac:	beq	120f4 <__assert_fail@plt+0xb54>
   120b0:	ldr	r3, [pc, #304]	; 121e8 <__assert_fail@plt+0xc48>
   120b4:	ldrb	r3, [r3, #4]
   120b8:	str	r3, [sp, #8]
   120bc:	mov	r3, #0
   120c0:	str	r3, [sp, #4]
   120c4:	str	r3, [sp]
   120c8:	mov	r3, r5
   120cc:	mov	r2, r6
   120d0:	ldr	r1, [sp, #28]
   120d4:	add	r0, r7, #4
   120d8:	bl	14094 <__assert_fail@plt+0x2af4>
   120dc:	ldr	r5, [r7, #92]	; 0x5c
   120e0:	ldr	r3, [sp, #24]
   120e4:	str	r3, [sp, #20]
   120e8:	mov	fp, #1
   120ec:	mov	r6, fp
   120f0:	b	11ed4 <__assert_fail@plt+0x934>
   120f4:	mov	r1, r6
   120f8:	bl	111e0 <strcmp@plt>
   120fc:	cmp	r0, #0
   12100:	bne	120b0 <__assert_fail@plt+0xb10>
   12104:	mov	r2, #1
   12108:	ldr	r3, [pc, #212]	; 121e4 <__assert_fail@plt+0xc44>
   1210c:	strb	r2, [r3, #141]	; 0x8d
   12110:	ldr	r3, [sp, #20]
   12114:	cmp	r3, #0
   12118:	mvnne	r5, #0
   1211c:	b	11ff8 <__assert_fail@plt+0xa58>
   12120:	cmp	r0, #10
   12124:	beq	12140 <__assert_fail@plt+0xba0>
   12128:	cmp	sl, r0
   1212c:	bne	11eb0 <__assert_fail@plt+0x910>
   12130:	mov	sl, r4
   12134:	mov	fp, #1
   12138:	mov	r6, #0
   1213c:	b	11ed4 <__assert_fail@plt+0x934>
   12140:	bl	117a0 <__assert_fail@plt+0x200>
   12144:	mov	r2, #5
   12148:	ldr	r1, [pc, #156]	; 121ec <__assert_fail@plt+0xc4c>
   1214c:	mov	r0, #0
   12150:	bl	11288 <dcgettext@plt>
   12154:	mov	r4, r0
   12158:	cmp	sl, #34	; 0x22
   1215c:	mov	r2, #5
   12160:	ldreq	r1, [pc, #136]	; 121f0 <__assert_fail@plt+0xc50>
   12164:	ldrne	r1, [pc, #136]	; 121f4 <__assert_fail@plt+0xc54>
   12168:	mov	r0, #0
   1216c:	bl	11288 <dcgettext@plt>
   12170:	mov	r3, r0
   12174:	mov	r2, r4
   12178:	mov	r1, #0
   1217c:	mov	r0, #1
   12180:	bl	11354 <error@plt>
   12184:	mov	r2, #5
   12188:	ldr	r1, [pc, #104]	; 121f8 <__assert_fail@plt+0xc58>
   1218c:	mov	r0, #0
   12190:	bl	11288 <dcgettext@plt>
   12194:	mov	r2, r0
   12198:	mov	r1, #0
   1219c:	mov	r0, r1
   121a0:	bl	11354 <error@plt>
   121a4:	mov	r3, #1
   121a8:	str	r3, [r7, #148]	; 0x94
   121ac:	b	11ec4 <__assert_fail@plt+0x924>
   121b0:	bl	117a0 <__assert_fail@plt+0x200>
   121b4:	mov	r2, #5
   121b8:	ldr	r1, [pc, #60]	; 121fc <__assert_fail@plt+0xc5c>
   121bc:	mov	r0, #0
   121c0:	bl	11288 <dcgettext@plt>
   121c4:	mov	r2, r0
   121c8:	mov	r1, #0
   121cc:	mov	r0, #1
   121d0:	bl	11354 <error@plt>
   121d4:	mvn	r5, #0
   121d8:	b	11ff8 <__assert_fail@plt+0xa58>
   121dc:	mov	r5, r0
   121e0:	b	11ff8 <__assert_fail@plt+0xa58>
   121e4:	andeq	sp, r2, r8, ror #3
   121e8:	andeq	sp, r2, r8, ror #2
   121ec:	andeq	sl, r1, r8, asr ip
   121f0:			; <UNDEFINED> instruction: 0x0001acb0
   121f4:			; <UNDEFINED> instruction: 0x0001acb8
   121f8:	andeq	sl, r1, r0, asr #25
   121fc:	andeq	sl, r1, r8, ror #22
   12200:	push	{r4, lr}
   12204:	subs	r4, r0, #0
   12208:	beq	12240 <__assert_fail@plt+0xca0>
   1220c:	ldr	r3, [pc, #660]	; 124a8 <__assert_fail@plt+0xf08>
   12210:	ldr	r5, [r3]
   12214:	mov	r2, #5
   12218:	ldr	r1, [pc, #652]	; 124ac <__assert_fail@plt+0xf0c>
   1221c:	mov	r0, #0
   12220:	bl	11288 <dcgettext@plt>
   12224:	ldr	r3, [pc, #644]	; 124b0 <__assert_fail@plt+0xf10>
   12228:	ldr	r2, [r3]
   1222c:	mov	r1, r0
   12230:	mov	r0, r5
   12234:	bl	11414 <fprintf@plt>
   12238:	mov	r0, r4
   1223c:	bl	113d8 <exit@plt>
   12240:	ldr	r4, [pc, #620]	; 124b4 <__assert_fail@plt+0xf14>
   12244:	ldr	r6, [r4]
   12248:	mov	r2, #5
   1224c:	ldr	r1, [pc, #612]	; 124b8 <__assert_fail@plt+0xf18>
   12250:	mov	r0, #0
   12254:	bl	11288 <dcgettext@plt>
   12258:	ldr	r5, [pc, #592]	; 124b0 <__assert_fail@plt+0xf10>
   1225c:	ldr	r2, [r5]
   12260:	mov	r1, r0
   12264:	mov	r0, r6
   12268:	bl	11414 <fprintf@plt>
   1226c:	mov	r2, #5
   12270:	ldr	r1, [pc, #580]	; 124bc <__assert_fail@plt+0xf1c>
   12274:	mov	r0, #0
   12278:	bl	11288 <dcgettext@plt>
   1227c:	ldr	r1, [r4]
   12280:	bl	11558 <fputs@plt>
   12284:	mov	r2, #5
   12288:	ldr	r1, [pc, #560]	; 124c0 <__assert_fail@plt+0xf20>
   1228c:	mov	r0, #0
   12290:	bl	11288 <dcgettext@plt>
   12294:	ldr	r1, [r4]
   12298:	bl	11558 <fputs@plt>
   1229c:	mov	r2, #5
   122a0:	ldr	r1, [pc, #540]	; 124c4 <__assert_fail@plt+0xf24>
   122a4:	mov	r0, #0
   122a8:	bl	11288 <dcgettext@plt>
   122ac:	ldr	r1, [r4]
   122b0:	bl	11558 <fputs@plt>
   122b4:	mov	r2, #5
   122b8:	ldr	r1, [pc, #520]	; 124c8 <__assert_fail@plt+0xf28>
   122bc:	mov	r0, #0
   122c0:	bl	11288 <dcgettext@plt>
   122c4:	ldr	r1, [r4]
   122c8:	bl	11558 <fputs@plt>
   122cc:	mov	r2, #5
   122d0:	ldr	r1, [pc, #500]	; 124cc <__assert_fail@plt+0xf2c>
   122d4:	mov	r0, #0
   122d8:	bl	11288 <dcgettext@plt>
   122dc:	ldr	r1, [r4]
   122e0:	bl	11558 <fputs@plt>
   122e4:	mov	r2, #5
   122e8:	ldr	r1, [pc, #480]	; 124d0 <__assert_fail@plt+0xf30>
   122ec:	mov	r0, #0
   122f0:	bl	11288 <dcgettext@plt>
   122f4:	ldr	r1, [r4]
   122f8:	bl	11558 <fputs@plt>
   122fc:	mov	r2, #5
   12300:	ldr	r1, [pc, #460]	; 124d4 <__assert_fail@plt+0xf34>
   12304:	mov	r0, #0
   12308:	bl	11288 <dcgettext@plt>
   1230c:	ldr	r1, [r4]
   12310:	bl	11558 <fputs@plt>
   12314:	mov	r2, #5
   12318:	ldr	r1, [pc, #440]	; 124d8 <__assert_fail@plt+0xf38>
   1231c:	mov	r0, #0
   12320:	bl	11288 <dcgettext@plt>
   12324:	ldr	r1, [r4]
   12328:	bl	11558 <fputs@plt>
   1232c:	mov	r2, #5
   12330:	ldr	r1, [pc, #420]	; 124dc <__assert_fail@plt+0xf3c>
   12334:	mov	r0, #0
   12338:	bl	11288 <dcgettext@plt>
   1233c:	ldr	r1, [r4]
   12340:	bl	11558 <fputs@plt>
   12344:	mov	r2, #5
   12348:	ldr	r1, [pc, #400]	; 124e0 <__assert_fail@plt+0xf40>
   1234c:	mov	r0, #0
   12350:	bl	11288 <dcgettext@plt>
   12354:	ldr	r1, [r4]
   12358:	bl	11558 <fputs@plt>
   1235c:	mov	r2, #5
   12360:	ldr	r1, [pc, #380]	; 124e4 <__assert_fail@plt+0xf44>
   12364:	mov	r0, #0
   12368:	bl	11288 <dcgettext@plt>
   1236c:	ldr	r1, [r4]
   12370:	bl	11558 <fputs@plt>
   12374:	mov	r2, #5
   12378:	ldr	r1, [pc, #360]	; 124e8 <__assert_fail@plt+0xf48>
   1237c:	mov	r0, #0
   12380:	bl	11288 <dcgettext@plt>
   12384:	ldr	r1, [r4]
   12388:	bl	11558 <fputs@plt>
   1238c:	mov	r2, #5
   12390:	ldr	r1, [pc, #340]	; 124ec <__assert_fail@plt+0xf4c>
   12394:	mov	r0, #0
   12398:	bl	11288 <dcgettext@plt>
   1239c:	ldr	r1, [r4]
   123a0:	bl	11558 <fputs@plt>
   123a4:	mov	r2, #5
   123a8:	ldr	r1, [pc, #320]	; 124f0 <__assert_fail@plt+0xf50>
   123ac:	mov	r0, #0
   123b0:	bl	11288 <dcgettext@plt>
   123b4:	ldr	r1, [r4]
   123b8:	bl	11558 <fputs@plt>
   123bc:	mov	r2, #5
   123c0:	ldr	r1, [pc, #300]	; 124f4 <__assert_fail@plt+0xf54>
   123c4:	mov	r0, #0
   123c8:	bl	11288 <dcgettext@plt>
   123cc:	ldr	r1, [r4]
   123d0:	bl	11558 <fputs@plt>
   123d4:	mov	r2, #5
   123d8:	ldr	r1, [pc, #280]	; 124f8 <__assert_fail@plt+0xf58>
   123dc:	mov	r0, #0
   123e0:	bl	11288 <dcgettext@plt>
   123e4:	ldr	r1, [r4]
   123e8:	bl	11558 <fputs@plt>
   123ec:	mov	r2, #5
   123f0:	ldr	r1, [pc, #260]	; 124fc <__assert_fail@plt+0xf5c>
   123f4:	mov	r0, #0
   123f8:	bl	11288 <dcgettext@plt>
   123fc:	ldr	r1, [r4]
   12400:	bl	11558 <fputs@plt>
   12404:	mov	r2, #5
   12408:	ldr	r1, [pc, #240]	; 12500 <__assert_fail@plt+0xf60>
   1240c:	mov	r0, #0
   12410:	bl	11288 <dcgettext@plt>
   12414:	ldr	r1, [r4]
   12418:	bl	11558 <fputs@plt>
   1241c:	mov	r2, #5
   12420:	ldr	r1, [pc, #220]	; 12504 <__assert_fail@plt+0xf64>
   12424:	mov	r0, #0
   12428:	bl	11288 <dcgettext@plt>
   1242c:	ldr	r1, [r4]
   12430:	bl	11558 <fputs@plt>
   12434:	mov	r2, #5
   12438:	ldr	r1, [pc, #200]	; 12508 <__assert_fail@plt+0xf68>
   1243c:	mov	r0, #0
   12440:	bl	11288 <dcgettext@plt>
   12444:	ldr	r1, [r4]
   12448:	bl	11558 <fputs@plt>
   1244c:	mov	r2, #5
   12450:	ldr	r1, [pc, #180]	; 1250c <__assert_fail@plt+0xf6c>
   12454:	mov	r0, #0
   12458:	bl	11288 <dcgettext@plt>
   1245c:	ldr	r1, [r4]
   12460:	bl	11558 <fputs@plt>
   12464:	mov	r2, #5
   12468:	ldr	r1, [pc, #160]	; 12510 <__assert_fail@plt+0xf70>
   1246c:	mov	r0, #0
   12470:	bl	11288 <dcgettext@plt>
   12474:	ldr	r1, [r4]
   12478:	bl	11558 <fputs@plt>
   1247c:	mov	r2, #5
   12480:	ldr	r1, [pc, #140]	; 12514 <__assert_fail@plt+0xf74>
   12484:	mov	r0, #0
   12488:	bl	11288 <dcgettext@plt>
   1248c:	ldr	r1, [r4]
   12490:	bl	11558 <fputs@plt>
   12494:	ldr	r1, [r5]
   12498:	ldr	r0, [r4]
   1249c:	bl	15128 <__assert_fail@plt+0x3b88>
   124a0:	mov	r0, #0
   124a4:	bl	113d8 <exit@plt>
   124a8:	ldrdeq	sp, [r2], -r0
   124ac:	andeq	sl, r1, ip, asr #26
   124b0:			; <UNDEFINED> instruction: 0x0002d2b0
   124b4:	ldrdeq	sp, [r2], -ip
   124b8:	andeq	sl, r1, r4, ror sp
   124bc:	andeq	sl, r1, r8, lsr #27
   124c0:	strdeq	sl, [r1], -r8
   124c4:	andeq	sl, r1, r0, ror lr
   124c8:	andeq	sl, r1, r4, asr #30
   124cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   124d0:	andeq	fp, r1, r0, lsl #1
   124d4:	andeq	fp, r1, r4, ror #2
   124d8:	strdeq	fp, [r1], -ip
   124dc:	andeq	fp, r1, r0, lsr r2
   124e0:	andeq	fp, r1, r4, lsl #6
   124e4:	andeq	fp, r1, r4, lsl #7
   124e8:	andeq	fp, r1, r4, lsr #8
   124ec:	andeq	fp, r1, r4, ror r4
   124f0:	andeq	fp, r1, ip, asr #10
   124f4:	muleq	r1, r8, r5
   124f8:	ldrdeq	fp, [r1], -r8
   124fc:	andeq	fp, r1, r8, lsr #12
   12500:	andeq	fp, r1, r0, lsl #14
   12504:	andeq	fp, r1, ip, asr #14
   12508:	muleq	r1, r0, r7
   1250c:	ldrdeq	fp, [r1], -r8
   12510:	andeq	fp, r1, r0, lsr #16
   12514:	andeq	fp, r1, ip, asr r8
   12518:	push	{r4, r5, r6, r7, lr}
   1251c:	sub	sp, sp, #20
   12520:	mov	r6, r0
   12524:	mov	r7, r1
   12528:	mov	r5, r2
   1252c:	mov	r4, r3
   12530:	mov	r2, #10
   12534:	add	r1, sp, #12
   12538:	bl	111ec <strtol@plt>
   1253c:	ldr	r3, [sp, #12]
   12540:	cmp	r6, r3
   12544:	beq	12570 <__assert_fail@plt+0xfd0>
   12548:	ldrb	r3, [r3]
   1254c:	cmp	r3, #0
   12550:	bne	12570 <__assert_fail@plt+0xfd0>
   12554:	cmp	r0, r5
   12558:	blt	125ac <__assert_fail@plt+0x100c>
   1255c:	cmp	r4, #0
   12560:	cmpge	r0, r4
   12564:	bgt	125fc <__assert_fail@plt+0x105c>
   12568:	add	sp, sp, #20
   1256c:	pop	{r4, r5, r6, r7, pc}
   12570:	ldr	r3, [pc, #212]	; 1264c <__assert_fail@plt+0x10ac>
   12574:	ldr	r4, [r3]
   12578:	mov	r2, #5
   1257c:	ldr	r1, [pc, #204]	; 12650 <__assert_fail@plt+0x10b0>
   12580:	mov	r0, #0
   12584:	bl	11288 <dcgettext@plt>
   12588:	str	r7, [sp]
   1258c:	mov	r3, r6
   12590:	ldr	r2, [pc, #188]	; 12654 <__assert_fail@plt+0x10b4>
   12594:	ldr	r2, [r2]
   12598:	mov	r1, r0
   1259c:	mov	r0, r4
   125a0:	bl	11414 <fprintf@plt>
   125a4:	mov	r0, #1
   125a8:	bl	12200 <__assert_fail@plt+0xc60>
   125ac:	ldr	r3, [pc, #152]	; 1264c <__assert_fail@plt+0x10ac>
   125b0:	ldr	r4, [r3]
   125b4:	mov	r2, #5
   125b8:	ldr	r1, [pc, #152]	; 12658 <__assert_fail@plt+0x10b8>
   125bc:	mov	r0, #0
   125c0:	bl	11288 <dcgettext@plt>
   125c4:	ldr	r3, [pc, #136]	; 12654 <__assert_fail@plt+0x10b4>
   125c8:	ldr	r2, [r3]
   125cc:	str	r5, [sp, #4]
   125d0:	str	r7, [sp]
   125d4:	mov	r3, r6
   125d8:	mov	r1, r0
   125dc:	mov	r0, r4
   125e0:	bl	11414 <fprintf@plt>
   125e4:	ldr	r3, [sp, #40]	; 0x28
   125e8:	cmp	r3, #0
   125ec:	moveq	r0, r5
   125f0:	beq	12568 <__assert_fail@plt+0xfc8>
   125f4:	mov	r0, #1
   125f8:	bl	12200 <__assert_fail@plt+0xc60>
   125fc:	ldr	r3, [pc, #72]	; 1264c <__assert_fail@plt+0x10ac>
   12600:	ldr	r5, [r3]
   12604:	mov	r2, #5
   12608:	ldr	r1, [pc, #76]	; 1265c <__assert_fail@plt+0x10bc>
   1260c:	mov	r0, #0
   12610:	bl	11288 <dcgettext@plt>
   12614:	ldr	r3, [pc, #56]	; 12654 <__assert_fail@plt+0x10b4>
   12618:	ldr	r2, [r3]
   1261c:	str	r4, [sp, #4]
   12620:	str	r7, [sp]
   12624:	mov	r3, r6
   12628:	mov	r1, r0
   1262c:	mov	r0, r5
   12630:	bl	11414 <fprintf@plt>
   12634:	ldr	r3, [sp, #40]	; 0x28
   12638:	cmp	r3, #0
   1263c:	moveq	r0, r4
   12640:	beq	12568 <__assert_fail@plt+0xfc8>
   12644:	mov	r0, #1
   12648:	bl	12200 <__assert_fail@plt+0xc60>
   1264c:	ldrdeq	sp, [r2], -r0
   12650:	andeq	fp, r1, r4, lsr #17
   12654:			; <UNDEFINED> instruction: 0x0002d2b0
   12658:	andeq	fp, r1, ip, asr #17
   1265c:	strdeq	fp, [r1], -ip
   12660:	push	{r4, r5, r6, r7, r8, lr}
   12664:	mov	r1, #0
   12668:	bl	14da0 <__assert_fail@plt+0x3800>
   1266c:	subs	r5, r0, #0
   12670:	blt	126ac <__assert_fail@plt+0x110c>
   12674:	ldr	r1, [pc, #56]	; 126b4 <__assert_fail@plt+0x1114>
   12678:	mov	r0, r5
   1267c:	bl	111bc <fdopen@plt>
   12680:	subs	r4, r0, #0
   12684:	beq	12690 <__assert_fail@plt+0x10f0>
   12688:	mov	r0, r4
   1268c:	pop	{r4, r5, r6, r7, r8, pc}
   12690:	bl	11420 <__errno_location@plt>
   12694:	mov	r6, r0
   12698:	ldr	r7, [r0]
   1269c:	mov	r0, r5
   126a0:	bl	11588 <close@plt>
   126a4:	str	r7, [r6]
   126a8:	b	12688 <__assert_fail@plt+0x10e8>
   126ac:	mov	r4, #0
   126b0:	b	12688 <__assert_fail@plt+0x10e8>
   126b4:	andeq	fp, r1, ip, lsr pc
   126b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126bc:	sub	sp, sp, #12
   126c0:	str	r0, [sp, #4]
   126c4:	ldr	r3, [pc, #492]	; 128b8 <__assert_fail@plt+0x1318>
   126c8:	ldr	r3, [r3, #48]	; 0x30
   126cc:	cmp	r3, #1
   126d0:	beq	12778 <__assert_fail@plt+0x11d8>
   126d4:	ldr	r3, [pc, #480]	; 128bc <__assert_fail@plt+0x131c>
   126d8:	ldr	r7, [r3]
   126dc:	mov	r4, #0
   126e0:	ldr	r6, [pc, #472]	; 128c0 <__assert_fail@plt+0x1320>
   126e4:	ldr	r5, [pc, #460]	; 128b8 <__assert_fail@plt+0x1318>
   126e8:	mov	r8, #3
   126ec:	mov	fp, r3
   126f0:	mov	sl, r6
   126f4:	ldr	r9, [pc, #456]	; 128c4 <__assert_fail@plt+0x1324>
   126f8:	ldr	r3, [r5, #52]	; 0x34
   126fc:	ldr	r2, [r3, r4, lsl #2]
   12700:	mov	r1, r8
   12704:	mov	r0, #0
   12708:	bl	1867c <__assert_fail@plt+0x70dc>
   1270c:	mov	r3, r0
   12710:	mov	r2, r6
   12714:	ldr	r1, [pc, #428]	; 128c8 <__assert_fail@plt+0x1328>
   12718:	mov	r0, r7
   1271c:	bl	11414 <fprintf@plt>
   12720:	cmp	r0, #0
   12724:	blt	12750 <__assert_fail@plt+0x11b0>
   12728:	add	r4, r4, #1
   1272c:	ldr	r3, [r5, #48]	; 0x30
   12730:	sub	r3, r3, #1
   12734:	cmp	r3, r4
   12738:	bls	12778 <__assert_fail@plt+0x11d8>
   1273c:	ldr	r7, [fp]
   12740:	cmp	r4, #0
   12744:	moveq	r6, sl
   12748:	movne	r6, r9
   1274c:	b	126f8 <__assert_fail@plt+0x1158>
   12750:	bl	11420 <__errno_location@plt>
   12754:	ldr	r4, [r0]
   12758:	mov	r2, #5
   1275c:	ldr	r1, [pc, #360]	; 128cc <__assert_fail@plt+0x132c>
   12760:	mov	r0, #0
   12764:	bl	11288 <dcgettext@plt>
   12768:	mov	r2, r0
   1276c:	mov	r1, r4
   12770:	mov	r0, #1
   12774:	bl	11354 <error@plt>
   12778:	ldr	r3, [sp, #4]
   1277c:	cmp	r3, #0
   12780:	beq	128a0 <__assert_fail@plt+0x1300>
   12784:	ldr	r3, [pc, #300]	; 128b8 <__assert_fail@plt+0x1318>
   12788:	ldr	r3, [r3, #152]	; 0x98
   1278c:	cmp	r3, #0
   12790:	beq	12810 <__assert_fail@plt+0x1270>
   12794:	ldr	r4, [pc, #288]	; 128bc <__assert_fail@plt+0x131c>
   12798:	ldr	r3, [r4]
   1279c:	mov	r2, #4
   127a0:	mov	r1, #1
   127a4:	ldr	r0, [pc, #292]	; 128d0 <__assert_fail@plt+0x1330>
   127a8:	bl	11300 <fwrite@plt>
   127ac:	ldr	r0, [r4]
   127b0:	bl	19d30 <__assert_fail@plt+0x8790>
   127b4:	cmp	r0, #0
   127b8:	bne	12850 <__assert_fail@plt+0x12b0>
   127bc:	ldr	r3, [pc, #244]	; 128b8 <__assert_fail@plt+0x1318>
   127c0:	ldr	r0, [r3, #152]	; 0x98
   127c4:	bl	1157c <getc@plt>
   127c8:	mov	r4, r0
   127cc:	cmp	r0, #10
   127d0:	cmnne	r0, #1
   127d4:	beq	127f0 <__assert_fail@plt+0x1250>
   127d8:	ldr	r5, [pc, #216]	; 128b8 <__assert_fail@plt+0x1318>
   127dc:	ldr	r0, [r5, #152]	; 0x98
   127e0:	bl	1157c <getc@plt>
   127e4:	cmp	r0, #10
   127e8:	cmnne	r0, #1
   127ec:	bne	127dc <__assert_fail@plt+0x123c>
   127f0:	cmn	r0, #1
   127f4:	beq	12878 <__assert_fail@plt+0x12d8>
   127f8:	bic	r0, r4, #32
   127fc:	cmp	r0, #89	; 0x59
   12800:	movne	r0, #0
   12804:	moveq	r0, #1
   12808:	add	sp, sp, #12
   1280c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12810:	ldr	r0, [pc, #188]	; 128d4 <__assert_fail@plt+0x1334>
   12814:	bl	12660 <__assert_fail@plt+0x10c0>
   12818:	ldr	r3, [pc, #152]	; 128b8 <__assert_fail@plt+0x1318>
   1281c:	str	r0, [r3, #152]	; 0x98
   12820:	cmp	r0, #0
   12824:	bne	12794 <__assert_fail@plt+0x11f4>
   12828:	bl	11420 <__errno_location@plt>
   1282c:	ldr	r4, [r0]
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #156]	; 128d8 <__assert_fail@plt+0x1338>
   12838:	mov	r0, #0
   1283c:	bl	11288 <dcgettext@plt>
   12840:	mov	r2, r0
   12844:	mov	r1, r4
   12848:	mov	r0, #1
   1284c:	bl	11354 <error@plt>
   12850:	bl	11420 <__errno_location@plt>
   12854:	ldr	r4, [r0]
   12858:	mov	r2, #5
   1285c:	ldr	r1, [pc, #104]	; 128cc <__assert_fail@plt+0x132c>
   12860:	mov	r0, #0
   12864:	bl	11288 <dcgettext@plt>
   12868:	mov	r2, r0
   1286c:	mov	r1, r4
   12870:	mov	r0, #1
   12874:	bl	11354 <error@plt>
   12878:	bl	11420 <__errno_location@plt>
   1287c:	ldr	r4, [r0]
   12880:	mov	r2, #5
   12884:	ldr	r1, [pc, #80]	; 128dc <__assert_fail@plt+0x133c>
   12888:	mov	r0, #0
   1288c:	bl	11288 <dcgettext@plt>
   12890:	mov	r2, r0
   12894:	mov	r1, r4
   12898:	mov	r0, #1
   1289c:	bl	11354 <error@plt>
   128a0:	ldr	r3, [pc, #20]	; 128bc <__assert_fail@plt+0x131c>
   128a4:	ldr	r1, [r3]
   128a8:	mov	r0, #10
   128ac:	bl	1151c <putc@plt>
   128b0:	ldr	r0, [sp, #4]
   128b4:	b	12808 <__assert_fail@plt+0x1268>
   128b8:	andeq	sp, r2, r8, ror #3
   128bc:	ldrdeq	sp, [r2], -r0
   128c0:	andeq	fp, r1, r0, lsr #17
   128c4:	andeq	fp, r1, ip, lsr #18
   128c8:	andeq	fp, r1, r0, lsr r9
   128cc:	andeq	fp, r1, r8, lsr r9
   128d0:	andeq	fp, r1, r4, lsl #19
   128d4:	andeq	fp, r1, r4, asr r9
   128d8:	andeq	fp, r1, r0, ror #18
   128dc:	andeq	fp, r1, ip, lsl #19
   128e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   128e4:	sub	sp, sp, #36	; 0x24
   128e8:	mov	r8, r3
   128ec:	ldr	r3, [pc, #1216]	; 12db4 <__assert_fail@plt+0x1814>
   128f0:	ldr	r3, [r3]
   128f4:	cmp	r3, #0
   128f8:	beq	12940 <__assert_fail@plt+0x13a0>
   128fc:	ldr	r3, [pc, #1200]	; 12db4 <__assert_fail@plt+0x1814>
   12900:	ldr	r3, [r3]
   12904:	ldr	r2, [pc, #1196]	; 12db8 <__assert_fail@plt+0x1818>
   12908:	ldr	r2, [r2, #112]	; 0x70
   1290c:	cmp	r2, r3
   12910:	bcc	12940 <__assert_fail@plt+0x13a0>
   12914:	mov	r7, #1
   12918:	mov	r6, #0
   1291c:	ldr	r5, [pc, #1168]	; 12db4 <__assert_fail@plt+0x1814>
   12920:	ldr	r4, [pc, #1168]	; 12db8 <__assert_fail@plt+0x1818>
   12924:	mov	r1, r7
   12928:	mov	r0, r6
   1292c:	bl	1196c <__assert_fail@plt+0x3cc>
   12930:	ldr	r3, [r5]
   12934:	ldr	r2, [r4, #112]	; 0x70
   12938:	cmp	r2, r3
   1293c:	bcs	12924 <__assert_fail@plt+0x1384>
   12940:	ldr	r3, [pc, #1136]	; 12db8 <__assert_fail@plt+0x1818>
   12944:	ldrb	r3, [r3, #156]	; 0x9c
   12948:	cmp	r3, #0
   1294c:	bne	1299c <__assert_fail@plt+0x13fc>
   12950:	ldr	r3, [pc, #1120]	; 12db8 <__assert_fail@plt+0x1818>
   12954:	ldrb	r3, [r3, #157]	; 0x9d
   12958:	cmp	r3, #0
   1295c:	bne	129c0 <__assert_fail@plt+0x1420>
   12960:	mov	r1, #0
   12964:	mov	r0, r1
   12968:	bl	1196c <__assert_fail@plt+0x3cc>
   1296c:	add	r0, sp, #24
   12970:	bl	18a10 <__assert_fail@plt+0x7470>
   12974:	subs	r9, r0, #0
   12978:	bne	129cc <__assert_fail@plt+0x142c>
   1297c:	mov	r2, #1
   12980:	mov	r1, #2
   12984:	ldr	r0, [sp, #28]
   12988:	bl	19ad8 <__assert_fail@plt+0x8538>
   1298c:	ldr	r5, [pc, #1060]	; 12db8 <__assert_fail@plt+0x1818>
   12990:	mov	r7, #1
   12994:	mov	r6, #0
   12998:	b	12a00 <__assert_fail@plt+0x1460>
   1299c:	mov	r0, #1
   129a0:	bl	126b8 <__assert_fail@plt+0x1118>
   129a4:	cmp	r0, #0
   129a8:	beq	12dac <__assert_fail@plt+0x180c>
   129ac:	ldr	r3, [pc, #1028]	; 12db8 <__assert_fail@plt+0x1818>
   129b0:	ldrb	r3, [r3, #156]	; 0x9c
   129b4:	cmp	r3, #0
   129b8:	bne	12960 <__assert_fail@plt+0x13c0>
   129bc:	b	12950 <__assert_fail@plt+0x13b0>
   129c0:	mov	r0, #0
   129c4:	bl	126b8 <__assert_fail@plt+0x1118>
   129c8:	b	12960 <__assert_fail@plt+0x13c0>
   129cc:	bl	11420 <__errno_location@plt>
   129d0:	ldr	r4, [r0]
   129d4:	mov	r2, #5
   129d8:	ldr	r1, [pc, #988]	; 12dbc <__assert_fail@plt+0x181c>
   129dc:	mov	r0, #0
   129e0:	bl	11288 <dcgettext@plt>
   129e4:	mov	r2, r0
   129e8:	mov	r1, r4
   129ec:	mov	r0, #1
   129f0:	bl	11354 <error@plt>
   129f4:	mov	r1, r7
   129f8:	mov	r0, r6
   129fc:	bl	1196c <__assert_fail@plt+0x3cc>
   12a00:	bl	114d4 <fork@plt>
   12a04:	subs	r4, r0, #0
   12a08:	bge	12a28 <__assert_fail@plt+0x1488>
   12a0c:	bl	11420 <__errno_location@plt>
   12a10:	ldr	r3, [r0]
   12a14:	cmp	r3, #11
   12a18:	bne	12a28 <__assert_fail@plt+0x1488>
   12a1c:	ldr	r3, [r5, #112]	; 0x70
   12a20:	cmp	r3, #0
   12a24:	bne	129f4 <__assert_fail@plt+0x1454>
   12a28:	cmn	r4, #1
   12a2c:	beq	12a98 <__assert_fail@plt+0x14f8>
   12a30:	cmp	r4, #0
   12a34:	beq	12ac0 <__assert_fail@plt+0x1520>
   12a38:	ldr	r0, [sp, #28]
   12a3c:	bl	11588 <close@plt>
   12a40:	mov	r2, #4
   12a44:	add	r1, sp, #20
   12a48:	ldr	r0, [sp, #24]
   12a4c:	bl	18930 <__assert_fail@plt+0x7390>
   12a50:	mov	r5, r0
   12a54:	cmp	r0, #4
   12a58:	beq	12d64 <__assert_fail@plt+0x17c4>
   12a5c:	cmn	r0, #1
   12a60:	beq	12d1c <__assert_fail@plt+0x177c>
   12a64:	cmp	r0, #0
   12a68:	beq	12da0 <__assert_fail@plt+0x1800>
   12a6c:	bl	11420 <__errno_location@plt>
   12a70:	ldr	r4, [r0]
   12a74:	mov	r2, #5
   12a78:	ldr	r1, [pc, #832]	; 12dc0 <__assert_fail@plt+0x1820>
   12a7c:	mov	r0, #0
   12a80:	bl	11288 <dcgettext@plt>
   12a84:	mov	r3, r5
   12a88:	mov	r2, r0
   12a8c:	mov	r1, r4
   12a90:	mov	r0, #1
   12a94:	bl	11354 <error@plt>
   12a98:	bl	11420 <__errno_location@plt>
   12a9c:	ldr	r4, [r0]
   12aa0:	mov	r2, #5
   12aa4:	ldr	r1, [pc, #792]	; 12dc4 <__assert_fail@plt+0x1824>
   12aa8:	mov	r0, #0
   12aac:	bl	11288 <dcgettext@plt>
   12ab0:	mov	r2, r0
   12ab4:	mov	r1, r4
   12ab8:	mov	r0, #1
   12abc:	bl	11354 <error@plt>
   12ac0:	ldr	r0, [sp, #24]
   12ac4:	bl	11588 <close@plt>
   12ac8:	mov	r2, #0
   12acc:	ldr	r3, [pc, #740]	; 12db8 <__assert_fail@plt+0x1818>
   12ad0:	str	r2, [r3, #124]	; 0x7c
   12ad4:	bl	14e90 <__assert_fail@plt+0x38f0>
   12ad8:	cmp	r0, #0
   12adc:	bne	12b54 <__assert_fail@plt+0x15b4>
   12ae0:	mov	r0, #0
   12ae4:	bl	11c3c <__assert_fail@plt+0x69c>
   12ae8:	mov	r3, r0
   12aec:	ldr	r2, [pc, #724]	; 12dc8 <__assert_fail@plt+0x1828>
   12af0:	mov	r1, #19
   12af4:	mov	r0, sp
   12af8:	bl	1142c <snprintf@plt>
   12afc:	cmp	r0, #19
   12b00:	bhi	12b5c <__assert_fail@plt+0x15bc>
   12b04:	ldr	r3, [pc, #684]	; 12db8 <__assert_fail@plt+0x1818>
   12b08:	ldr	r4, [r3, #160]	; 0xa0
   12b0c:	cmp	r4, #0
   12b10:	beq	12b2c <__assert_fail@plt+0x158c>
   12b14:	mov	r2, #1
   12b18:	mov	r1, sp
   12b1c:	mov	r0, r4
   12b20:	bl	11408 <setenv@plt>
   12b24:	cmp	r0, #0
   12b28:	blt	12b70 <__assert_fail@plt+0x15d0>
   12b2c:	ldr	r3, [pc, #644]	; 12db8 <__assert_fail@plt+0x1818>
   12b30:	ldr	r3, [r3, #164]	; 0xa4
   12b34:	cmp	r3, #0
   12b38:	beq	12ba0 <__assert_fail@plt+0x1600>
   12b3c:	ldr	r3, [pc, #628]	; 12db8 <__assert_fail@plt+0x1818>
   12b40:	ldrb	r3, [r3, #168]	; 0xa8
   12b44:	cmp	r3, #0
   12b48:	beq	12bf8 <__assert_fail@plt+0x1658>
   12b4c:	ldr	r4, [pc, #632]	; 12dcc <__assert_fail@plt+0x182c>
   12b50:	b	12bb8 <__assert_fail@plt+0x1618>
   12b54:	bl	14eac <__assert_fail@plt+0x390c>
   12b58:	b	12ae0 <__assert_fail@plt+0x1540>
   12b5c:	ldr	r3, [pc, #620]	; 12dd0 <__assert_fail@plt+0x1830>
   12b60:	ldr	r2, [pc, #620]	; 12dd4 <__assert_fail@plt+0x1834>
   12b64:	ldr	r1, [pc, #620]	; 12dd8 <__assert_fail@plt+0x1838>
   12b68:	ldr	r0, [pc, #620]	; 12ddc <__assert_fail@plt+0x183c>
   12b6c:	bl	115a0 <__assert_fail@plt>
   12b70:	bl	11420 <__errno_location@plt>
   12b74:	ldr	r5, [r0]
   12b78:	mov	r2, #5
   12b7c:	ldr	r1, [pc, #604]	; 12de0 <__assert_fail@plt+0x1840>
   12b80:	mov	r0, #0
   12b84:	bl	11288 <dcgettext@plt>
   12b88:	mov	r3, r4
   12b8c:	mov	r2, r0
   12b90:	mov	r1, r5
   12b94:	mov	r0, #0
   12b98:	bl	11354 <error@plt>
   12b9c:	b	12b2c <__assert_fail@plt+0x158c>
   12ba0:	ldr	r3, [pc, #528]	; 12db8 <__assert_fail@plt+0x1818>
   12ba4:	ldrb	r2, [r3, #168]	; 0xa8
   12ba8:	ldr	r3, [pc, #564]	; 12de4 <__assert_fail@plt+0x1844>
   12bac:	ldr	r4, [pc, #536]	; 12dcc <__assert_fail@plt+0x182c>
   12bb0:	cmp	r2, #0
   12bb4:	moveq	r4, r3
   12bb8:	mov	r0, #0
   12bbc:	bl	11588 <close@plt>
   12bc0:	mov	r1, #0
   12bc4:	mov	r0, r4
   12bc8:	bl	15604 <__assert_fail@plt+0x4064>
   12bcc:	subs	r5, r0, #0
   12bd0:	blt	12c2c <__assert_fail@plt+0x168c>
   12bd4:	cmp	r5, #0
   12bd8:	ble	12bf8 <__assert_fail@plt+0x1658>
   12bdc:	mov	r1, #0
   12be0:	mov	r0, r5
   12be4:	bl	112a0 <dup2@plt>
   12be8:	cmp	r0, #0
   12bec:	bne	12c98 <__assert_fail@plt+0x16f8>
   12bf0:	mov	r0, r5
   12bf4:	bl	11588 <close@plt>
   12bf8:	mov	r0, r8
   12bfc:	bl	149c0 <__assert_fail@plt+0x3420>
   12c00:	cmp	r0, #0
   12c04:	beq	12cc0 <__assert_fail@plt+0x1720>
   12c08:	bl	11420 <__errno_location@plt>
   12c0c:	mov	r4, r0
   12c10:	mov	r3, #7
   12c14:	str	r3, [r0]
   12c18:	mov	r2, #4
   12c1c:	mov	r1, r4
   12c20:	ldr	r0, [sp, #28]
   12c24:	bl	1145c <write@plt>
   12c28:	b	12ce0 <__assert_fail@plt+0x1740>
   12c2c:	ldr	r3, [pc, #388]	; 12db8 <__assert_fail@plt+0x1818>
   12c30:	ldrb	r3, [r3, #168]	; 0xa8
   12c34:	cmp	r3, #0
   12c38:	bne	12c6c <__assert_fail@plt+0x16cc>
   12c3c:	bl	11420 <__errno_location@plt>
   12c40:	ldr	r6, [r0]
   12c44:	mov	r2, r4
   12c48:	mov	r1, #8
   12c4c:	mov	r0, #0
   12c50:	bl	1867c <__assert_fail@plt+0x70dc>
   12c54:	mov	r3, r0
   12c58:	ldr	r2, [pc, #392]	; 12de8 <__assert_fail@plt+0x1848>
   12c5c:	mov	r1, r6
   12c60:	mov	r0, #0
   12c64:	bl	11354 <error@plt>
   12c68:	b	12bd4 <__assert_fail@plt+0x1634>
   12c6c:	bl	11420 <__errno_location@plt>
   12c70:	ldr	r5, [r0]
   12c74:	mov	r2, r4
   12c78:	mov	r1, #8
   12c7c:	mov	r0, #0
   12c80:	bl	1867c <__assert_fail@plt+0x70dc>
   12c84:	mov	r3, r0
   12c88:	ldr	r2, [pc, #344]	; 12de8 <__assert_fail@plt+0x1848>
   12c8c:	mov	r1, r5
   12c90:	mov	r0, #1
   12c94:	bl	11354 <error@plt>
   12c98:	bl	11420 <__errno_location@plt>
   12c9c:	ldr	r4, [r0]
   12ca0:	mov	r2, #5
   12ca4:	ldr	r1, [pc, #320]	; 12dec <__assert_fail@plt+0x184c>
   12ca8:	mov	r0, #0
   12cac:	bl	11288 <dcgettext@plt>
   12cb0:	mov	r2, r0
   12cb4:	mov	r1, r4
   12cb8:	mov	r0, #1
   12cbc:	bl	11354 <error@plt>
   12cc0:	mov	r1, r8
   12cc4:	ldr	r0, [r8]
   12cc8:	bl	11258 <execvp@plt>
   12ccc:	bl	11420 <__errno_location@plt>
   12cd0:	mov	r4, r0
   12cd4:	ldr	r3, [r0]
   12cd8:	cmp	r3, #0
   12cdc:	bne	12c18 <__assert_fail@plt+0x1678>
   12ce0:	ldr	r0, [sp, #28]
   12ce4:	bl	11588 <close@plt>
   12ce8:	ldr	r1, [r4]
   12cec:	cmp	r1, #7
   12cf0:	moveq	r0, #126	; 0x7e
   12cf4:	beq	12d18 <__assert_fail@plt+0x1778>
   12cf8:	ldr	r3, [r8]
   12cfc:	ldr	r2, [pc, #228]	; 12de8 <__assert_fail@plt+0x1848>
   12d00:	mov	r0, #0
   12d04:	bl	11354 <error@plt>
   12d08:	ldr	r0, [r4]
   12d0c:	cmp	r0, #2
   12d10:	moveq	r0, #127	; 0x7f
   12d14:	movne	r0, #126	; 0x7e
   12d18:	bl	11240 <_exit@plt>
   12d1c:	ldr	r0, [sp, #24]
   12d20:	bl	11588 <close@plt>
   12d24:	bl	11420 <__errno_location@plt>
   12d28:	ldr	r4, [r0]
   12d2c:	mov	r2, #5
   12d30:	ldr	r1, [pc, #184]	; 12df0 <__assert_fail@plt+0x1850>
   12d34:	mov	r0, #0
   12d38:	bl	11288 <dcgettext@plt>
   12d3c:	mov	r2, r0
   12d40:	mov	r1, r4
   12d44:	mov	r0, #0
   12d48:	bl	11354 <error@plt>
   12d4c:	ldr	r0, [sp, #24]
   12d50:	bl	11588 <close@plt>
   12d54:	mov	r9, #1
   12d58:	mov	r0, r9
   12d5c:	add	sp, sp, #36	; 0x24
   12d60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d64:	ldr	r0, [sp, #24]
   12d68:	bl	11588 <close@plt>
   12d6c:	mov	r2, #0
   12d70:	mov	r1, sp
   12d74:	mov	r0, r4
   12d78:	bl	11318 <waitpid@plt>
   12d7c:	ldr	r3, [sp, #20]
   12d80:	cmp	r3, #7
   12d84:	beq	12d58 <__assert_fail@plt+0x17b8>
   12d88:	cmp	r3, #2
   12d8c:	beq	12d98 <__assert_fail@plt+0x17f8>
   12d90:	mov	r0, #126	; 0x7e
   12d94:	bl	113d8 <exit@plt>
   12d98:	mov	r0, #127	; 0x7f
   12d9c:	bl	113d8 <exit@plt>
   12da0:	mov	r0, r4
   12da4:	bl	11c3c <__assert_fail@plt+0x69c>
   12da8:	b	12d4c <__assert_fail@plt+0x17ac>
   12dac:	mov	r9, #1
   12db0:	b	12d58 <__assert_fail@plt+0x17b8>
   12db4:	andeq	sp, r2, r8, ror #2
   12db8:	andeq	sp, r2, r8, ror #3
   12dbc:			; <UNDEFINED> instruction: 0x0001b9b4
   12dc0:	andeq	fp, r1, r0, ror #21
   12dc4:	ldrdeq	fp, [r1], -r8
   12dc8:	andeq	fp, r1, r4, ror #19
   12dcc:	andeq	fp, r1, r4, asr r9
   12dd0:	andeq	sl, r1, ip, lsr #19
   12dd4:	andeq	r0, r0, r6, lsr #9
   12dd8:	andeq	sl, r1, ip, lsr #24
   12ddc:	andeq	fp, r1, r8, ror #19
   12de0:	andeq	fp, r1, r4, lsr #20
   12de4:	andeq	fp, r1, r8, lsr #19
   12de8:	andeq	ip, r1, r4, lsl r8
   12dec:	andeq	fp, r1, ip, asr #20
   12df0:	andeq	fp, r1, r4, lsl #21
   12df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df8:	sub	sp, sp, #220	; 0xdc
   12dfc:	mov	fp, r0
   12e00:	mov	r2, r1
   12e04:	str	r1, [sp, #36]	; 0x24
   12e08:	ldr	r3, [pc, #4036]	; 13dd4 <__assert_fail@plt+0x2834>
   12e0c:	ldm	r3, {r0, r1}
   12e10:	str	r0, [sp, #204]	; 0xcc
   12e14:	strb	r1, [sp, #208]	; 0xd0
   12e18:	ldr	r0, [r2]
   12e1c:	cmp	r0, #0
   12e20:	ldreq	r0, [pc, #4016]	; 13dd8 <__assert_fail@plt+0x2838>
   12e24:	bl	16dcc <__assert_fail@plt+0x582c>
   12e28:	bl	14d44 <__assert_fail@plt+0x37a4>
   12e2c:	bl	113cc <getpid@plt>
   12e30:	ldr	r3, [pc, #4004]	; 13ddc <__assert_fail@plt+0x283c>
   12e34:	str	r0, [r3, #128]	; 0x80
   12e38:	mov	r2, #0
   12e3c:	str	r2, [r3, #136]	; 0x88
   12e40:	ldr	r1, [pc, #3992]	; 13de0 <__assert_fail@plt+0x2840>
   12e44:	mov	r0, #6
   12e48:	bl	114bc <setlocale@plt>
   12e4c:	ldr	r4, [pc, #3984]	; 13de4 <__assert_fail@plt+0x2844>
   12e50:	ldr	r1, [pc, #3984]	; 13de8 <__assert_fail@plt+0x2848>
   12e54:	mov	r0, r4
   12e58:	bl	11534 <bindtextdomain@plt>
   12e5c:	mov	r0, r4
   12e60:	bl	112c4 <textdomain@plt>
   12e64:	ldr	r0, [pc, #3968]	; 13dec <__assert_fail@plt+0x284c>
   12e68:	bl	1a968 <__assert_fail@plt+0x93c8>
   12e6c:	cmp	r0, #0
   12e70:	bne	12f00 <__assert_fail@plt+0x1960>
   12e74:	ldr	r0, [pc, #3956]	; 13df0 <__assert_fail@plt+0x2850>
   12e78:	bl	1a968 <__assert_fail@plt+0x93c8>
   12e7c:	subs	r6, r0, #0
   12e80:	bne	12f00 <__assert_fail@plt+0x1960>
   12e84:	mov	r1, #2048	; 0x800
   12e88:	ldr	r0, [pc, #3940]	; 13df4 <__assert_fail@plt+0x2854>
   12e8c:	bl	1482c <__assert_fail@plt+0x328c>
   12e90:	mov	r7, r0
   12e94:	sub	r3, r0, #1
   12e98:	cmp	r3, #1
   12e9c:	bls	12f50 <__assert_fail@plt+0x19b0>
   12ea0:	mov	r0, #0
   12ea4:	bl	11294 <sysconf@plt>
   12ea8:	cmp	r0, #0
   12eac:	ble	12ed0 <__assert_fail@plt+0x1930>
   12eb0:	cmp	r0, #2048	; 0x800
   12eb4:	ble	12f28 <__assert_fail@plt+0x1988>
   12eb8:	ldr	r2, [pc, #3868]	; 13ddc <__assert_fail@plt+0x283c>
   12ebc:	sub	r0, r0, #2048	; 0x800
   12ec0:	ldr	r3, [r2, #16]
   12ec4:	cmp	r3, r0
   12ec8:	movcc	r0, r3
   12ecc:	str	r0, [r2, #16]
   12ed0:	ldr	r3, [pc, #3844]	; 13ddc <__assert_fail@plt+0x283c>
   12ed4:	ldr	r3, [r3, #16]
   12ed8:	cmp	r3, #2048	; 0x800
   12edc:	bcc	12f3c <__assert_fail@plt+0x199c>
   12ee0:	ldr	r0, [pc, #3828]	; 13ddc <__assert_fail@plt+0x283c>
   12ee4:	ldr	r3, [pc, #3852]	; 13df8 <__assert_fail@plt+0x2858>
   12ee8:	str	r3, [r0, #36]	; 0x24
   12eec:	add	r0, r0, #4
   12ef0:	bl	148ec <__assert_fail@plt+0x334c>
   12ef4:	ldr	r3, [pc, #3840]	; 13dfc <__assert_fail@plt+0x285c>
   12ef8:	str	r3, [sp, #48]	; 0x30
   12efc:	b	12f58 <__assert_fail@plt+0x19b8>
   12f00:	bl	11420 <__errno_location@plt>
   12f04:	ldr	r4, [r0]
   12f08:	mov	r2, #5
   12f0c:	ldr	r1, [pc, #3820]	; 13e00 <__assert_fail@plt+0x2860>
   12f10:	mov	r0, #0
   12f14:	bl	11288 <dcgettext@plt>
   12f18:	mov	r2, r0
   12f1c:	mov	r1, r4
   12f20:	mov	r0, #1
   12f24:	bl	11354 <error@plt>
   12f28:	ldr	r3, [pc, #3796]	; 13e04 <__assert_fail@plt+0x2864>
   12f2c:	ldr	r2, [pc, #3796]	; 13e08 <__assert_fail@plt+0x2868>
   12f30:	ldr	r1, [pc, #3796]	; 13e0c <__assert_fail@plt+0x286c>
   12f34:	ldr	r0, [pc, #3796]	; 13e10 <__assert_fail@plt+0x2870>
   12f38:	bl	115a0 <__assert_fail@plt>
   12f3c:	ldr	r3, [pc, #3776]	; 13e04 <__assert_fail@plt+0x2864>
   12f40:	ldr	r2, [pc, #3788]	; 13e14 <__assert_fail@plt+0x2874>
   12f44:	ldr	r1, [pc, #3776]	; 13e0c <__assert_fail@plt+0x286c>
   12f48:	ldr	r0, [pc, #3784]	; 13e18 <__assert_fail@plt+0x2878>
   12f4c:	bl	115a0 <__assert_fail@plt>
   12f50:	ldr	r3, [pc, #3780]	; 13e1c <__assert_fail@plt+0x287c>
   12f54:	str	r3, [sp, #48]	; 0x30
   12f58:	str	r6, [sp, #32]
   12f5c:	ldr	r3, [pc, #3772]	; 13e20 <__assert_fail@plt+0x2880>
   12f60:	str	r3, [sp, #40]	; 0x28
   12f64:	ldr	r3, [pc, #3768]	; 13e24 <__assert_fail@plt+0x2884>
   12f68:	str	r3, [sp, #28]
   12f6c:	mov	r3, #1
   12f70:	str	r3, [sp, #44]	; 0x2c
   12f74:	ldr	sl, [pc, #3756]	; 13e28 <__assert_fail@plt+0x2888>
   12f78:	ldr	r9, [pc, #3756]	; 13e2c <__assert_fail@plt+0x288c>
   12f7c:	ldr	r5, [pc, #3756]	; 13e30 <__assert_fail@plt+0x2890>
   12f80:	ldr	r4, [pc, #3668]	; 13ddc <__assert_fail@plt+0x283c>
   12f84:	add	r3, sp, #212	; 0xd4
   12f88:	str	r3, [sp]
   12f8c:	mov	r3, sl
   12f90:	mov	r2, r9
   12f94:	ldr	r1, [sp, #36]	; 0x24
   12f98:	mov	r0, fp
   12f9c:	bl	113b4 <getopt_long@plt>
   12fa0:	cmn	r0, #1
   12fa4:	beq	138a4 <__assert_fail@plt+0x2304>
   12fa8:	sub	r0, r0, #48	; 0x30
   12fac:	cmp	r0, #208	; 0xd0
   12fb0:	ldrls	pc, [pc, r0, lsl #2]
   12fb4:	b	13890 <__assert_fail@plt+0x22f0>
   12fb8:	andeq	r3, r1, r4, lsl #6
   12fbc:	muleq	r1, r0, r8
   12fc0:	muleq	r1, r0, r8
   12fc4:	muleq	r1, r0, r8
   12fc8:	muleq	r1, r0, r8
   12fcc:	muleq	r1, r0, r8
   12fd0:	muleq	r1, r0, r8
   12fd4:	muleq	r1, r0, r8
   12fd8:	muleq	r1, r0, r8
   12fdc:	muleq	r1, r0, r8
   12fe0:	muleq	r1, r0, r8
   12fe4:	muleq	r1, r0, r8
   12fe8:	muleq	r1, r0, r8
   12fec:	muleq	r1, r0, r8
   12ff0:	muleq	r1, r0, r8
   12ff4:	muleq	r1, r0, r8
   12ff8:	muleq	r1, r0, r8
   12ffc:	muleq	r1, r0, r8
   13000:	muleq	r1, r0, r8
   13004:	muleq	r1, r0, r8
   13008:	muleq	r1, r0, r8
   1300c:	andeq	r3, r1, ip, lsr r5
   13010:	muleq	r1, r0, r8
   13014:	muleq	r1, r0, r8
   13018:	muleq	r1, r0, r8
   1301c:	andeq	r3, r1, ip, ror #10
   13020:	muleq	r1, r0, r8
   13024:	muleq	r1, r0, r8
   13028:	andeq	r3, r1, r4, asr #11
   1302c:	muleq	r1, r0, r8
   13030:	muleq	r1, r0, r8
   13034:	muleq	r1, r0, r8
   13038:	andeq	r3, r1, r0, asr #15
   1303c:	muleq	r1, r0, r8
   13040:	muleq	r1, r0, r8
   13044:	muleq	r1, r8, r8
   13048:	muleq	r1, r0, r8
   1304c:	muleq	r1, r0, r8
   13050:	muleq	r1, r0, r8
   13054:	muleq	r1, r0, r8
   13058:	muleq	r1, r0, r8
   1305c:	muleq	r1, r0, r8
   13060:	muleq	r1, r0, r8
   13064:	muleq	r1, r0, r8
   13068:	muleq	r1, r0, r8
   1306c:	muleq	r1, r0, r8
   13070:	muleq	r1, r0, r8
   13074:	muleq	r1, r0, r8
   13078:	muleq	r1, r0, r8
   1307c:	andeq	r3, r1, r8, ror #15
   13080:	muleq	r1, r0, r8
   13084:	muleq	r1, r0, r8
   13088:	andeq	r3, r1, r8, lsl r3
   1308c:	andeq	r3, r1, ip, lsr r5
   13090:	muleq	r1, r0, r8
   13094:	muleq	r1, r0, r8
   13098:	andeq	r3, r1, r4, ror #10
   1309c:	andeq	r3, r1, ip, ror #10
   130a0:	muleq	r1, r0, r8
   130a4:	muleq	r1, r0, r8
   130a8:	andeq	r3, r1, r8, lsr #12
   130ac:	muleq	r1, r0, r8
   130b0:	andeq	r3, r1, r0, lsr #13
   130b4:	andeq	r3, r1, r4, lsr #15
   130b8:			; <UNDEFINED> instruction: 0x000137b0
   130bc:	muleq	r1, r0, r8
   130c0:	strdeq	r3, [r1], -ip
   130c4:	andeq	r3, r1, r8, lsl r7
   130c8:	andeq	r3, r1, ip, lsl #15
   130cc:	muleq	r1, r0, r8
   130d0:	strdeq	r3, [r1], -r4
   130d4:	muleq	r1, r0, r8
   130d8:	muleq	r1, r8, r7
   130dc:	muleq	r1, r0, r8
   130e0:	muleq	r1, r0, r8
   130e4:	muleq	r1, r0, r8
   130e8:	muleq	r1, r0, r8
   130ec:	muleq	r1, r0, r8
   130f0:	muleq	r1, r0, r8
   130f4:	muleq	r1, r0, r8
   130f8:	muleq	r1, r0, r8
   130fc:	muleq	r1, r0, r8
   13100:	muleq	r1, r0, r8
   13104:	muleq	r1, r0, r8
   13108:	muleq	r1, r0, r8
   1310c:	muleq	r1, r0, r8
   13110:	muleq	r1, r0, r8
   13114:	muleq	r1, r0, r8
   13118:	muleq	r1, r0, r8
   1311c:	muleq	r1, r0, r8
   13120:	muleq	r1, r0, r8
   13124:	muleq	r1, r0, r8
   13128:	muleq	r1, r0, r8
   1312c:	muleq	r1, r0, r8
   13130:	muleq	r1, r0, r8
   13134:	muleq	r1, r0, r8
   13138:	muleq	r1, r0, r8
   1313c:	muleq	r1, r0, r8
   13140:	muleq	r1, r0, r8
   13144:	muleq	r1, r0, r8
   13148:	muleq	r1, r0, r8
   1314c:	muleq	r1, r0, r8
   13150:	muleq	r1, r0, r8
   13154:	muleq	r1, r0, r8
   13158:	muleq	r1, r0, r8
   1315c:	muleq	r1, r0, r8
   13160:	muleq	r1, r0, r8
   13164:	muleq	r1, r0, r8
   13168:	muleq	r1, r0, r8
   1316c:	muleq	r1, r0, r8
   13170:	muleq	r1, r0, r8
   13174:	muleq	r1, r0, r8
   13178:	muleq	r1, r0, r8
   1317c:	muleq	r1, r0, r8
   13180:	muleq	r1, r0, r8
   13184:	muleq	r1, r0, r8
   13188:	muleq	r1, r0, r8
   1318c:	muleq	r1, r0, r8
   13190:	muleq	r1, r0, r8
   13194:	muleq	r1, r0, r8
   13198:	muleq	r1, r0, r8
   1319c:	muleq	r1, r0, r8
   131a0:	muleq	r1, r0, r8
   131a4:	muleq	r1, r0, r8
   131a8:	muleq	r1, r0, r8
   131ac:	muleq	r1, r0, r8
   131b0:	muleq	r1, r0, r8
   131b4:	muleq	r1, r0, r8
   131b8:	muleq	r1, r0, r8
   131bc:	muleq	r1, r0, r8
   131c0:	muleq	r1, r0, r8
   131c4:	muleq	r1, r0, r8
   131c8:	muleq	r1, r0, r8
   131cc:	muleq	r1, r0, r8
   131d0:	muleq	r1, r0, r8
   131d4:	muleq	r1, r0, r8
   131d8:	muleq	r1, r0, r8
   131dc:	muleq	r1, r0, r8
   131e0:	muleq	r1, r0, r8
   131e4:	muleq	r1, r0, r8
   131e8:	muleq	r1, r0, r8
   131ec:	muleq	r1, r0, r8
   131f0:	muleq	r1, r0, r8
   131f4:	muleq	r1, r0, r8
   131f8:	muleq	r1, r0, r8
   131fc:	muleq	r1, r0, r8
   13200:	muleq	r1, r0, r8
   13204:	muleq	r1, r0, r8
   13208:	muleq	r1, r0, r8
   1320c:	muleq	r1, r0, r8
   13210:	muleq	r1, r0, r8
   13214:	muleq	r1, r0, r8
   13218:	muleq	r1, r0, r8
   1321c:	muleq	r1, r0, r8
   13220:	muleq	r1, r0, r8
   13224:	muleq	r1, r0, r8
   13228:	muleq	r1, r0, r8
   1322c:	muleq	r1, r0, r8
   13230:	muleq	r1, r0, r8
   13234:	muleq	r1, r0, r8
   13238:	muleq	r1, r0, r8
   1323c:	muleq	r1, r0, r8
   13240:	muleq	r1, r0, r8
   13244:	muleq	r1, r0, r8
   13248:	muleq	r1, r0, r8
   1324c:	muleq	r1, r0, r8
   13250:	muleq	r1, r0, r8
   13254:	muleq	r1, r0, r8
   13258:	muleq	r1, r0, r8
   1325c:	muleq	r1, r0, r8
   13260:	muleq	r1, r0, r8
   13264:	muleq	r1, r0, r8
   13268:	muleq	r1, r0, r8
   1326c:	muleq	r1, r0, r8
   13270:	muleq	r1, r0, r8
   13274:	muleq	r1, r0, r8
   13278:	muleq	r1, r0, r8
   1327c:	muleq	r1, r0, r8
   13280:	muleq	r1, r0, r8
   13284:	muleq	r1, r0, r8
   13288:	muleq	r1, r0, r8
   1328c:	muleq	r1, r0, r8
   13290:	muleq	r1, r0, r8
   13294:	muleq	r1, r0, r8
   13298:	muleq	r1, r0, r8
   1329c:	muleq	r1, r0, r8
   132a0:	muleq	r1, r0, r8
   132a4:	muleq	r1, r0, r8
   132a8:	muleq	r1, r0, r8
   132ac:	muleq	r1, r0, r8
   132b0:	muleq	r1, r0, r8
   132b4:	muleq	r1, r0, r8
   132b8:	muleq	r1, r0, r8
   132bc:	muleq	r1, r0, r8
   132c0:	muleq	r1, r0, r8
   132c4:	muleq	r1, r0, r8
   132c8:	muleq	r1, r0, r8
   132cc:	muleq	r1, r0, r8
   132d0:	muleq	r1, r0, r8
   132d4:	muleq	r1, r0, r8
   132d8:	muleq	r1, r0, r8
   132dc:	muleq	r1, r0, r8
   132e0:	muleq	r1, r0, r8
   132e4:	muleq	r1, r0, r8
   132e8:	muleq	r1, r0, r8
   132ec:	muleq	r1, r0, r8
   132f0:	muleq	r1, r0, r8
   132f4:	muleq	r1, r0, r8
   132f8:	andeq	r3, r1, r8, lsl #16
   132fc:	str	r6, [sp, #44]	; 0x2c
   13300:	b	12f84 <__assert_fail@plt+0x19e4>
   13304:	mov	r3, #0
   13308:	strb	r3, [r4, #104]	; 0x68
   1330c:	ldr	r3, [pc, #2848]	; 13e34 <__assert_fail@plt+0x2894>
   13310:	str	r3, [sp, #40]	; 0x28
   13314:	b	12f84 <__assert_fail@plt+0x19e4>
   13318:	ldr	r3, [r5]
   1331c:	str	r3, [sp, #40]	; 0x28
   13320:	mov	r0, r3
   13324:	bl	113f0 <strlen@plt>
   13328:	cmp	r0, #1
   1332c:	ldreq	r3, [sp, #40]	; 0x28
   13330:	ldrbeq	r8, [r3]
   13334:	beq	13418 <__assert_fail@plt+0x1e78>
   13338:	ldr	r2, [sp, #40]	; 0x28
   1333c:	ldrb	r3, [r2]
   13340:	cmp	r3, #92	; 0x5c
   13344:	bne	13508 <__assert_fail@plt+0x1f68>
   13348:	ldrb	r8, [r2, #1]
   1334c:	cmp	r8, #102	; 0x66
   13350:	beq	13534 <__assert_fail@plt+0x1f94>
   13354:	bls	1337c <__assert_fail@plt+0x1ddc>
   13358:	cmp	r8, #114	; 0x72
   1335c:	beq	13430 <__assert_fail@plt+0x1e90>
   13360:	bls	1340c <__assert_fail@plt+0x1e6c>
   13364:	cmp	r8, #116	; 0x74
   13368:	beq	13438 <__assert_fail@plt+0x1e98>
   1336c:	cmp	r8, #118	; 0x76
   13370:	moveq	r8, #11
   13374:	beq	13418 <__assert_fail@plt+0x1e78>
   13378:	b	13394 <__assert_fail@plt+0x1df4>
   1337c:	cmp	r8, #97	; 0x61
   13380:	beq	1352c <__assert_fail@plt+0x1f8c>
   13384:	cmp	r8, #98	; 0x62
   13388:	beq	13428 <__assert_fail@plt+0x1e88>
   1338c:	cmp	r8, #92	; 0x5c
   13390:	beq	13418 <__assert_fail@plt+0x1e78>
   13394:	cmp	r8, #120	; 0x78
   13398:	beq	13440 <__assert_fail@plt+0x1ea0>
   1339c:	bl	113c0 <__ctype_b_loc@plt>
   133a0:	ldr	r3, [r0]
   133a4:	lsl	r8, r8, #1
   133a8:	ldrh	r3, [r3, r8]
   133ac:	tst	r3, #2048	; 0x800
   133b0:	beq	13454 <__assert_fail@plt+0x1eb4>
   133b4:	ldr	r3, [sp, #40]	; 0x28
   133b8:	add	r8, r3, #1
   133bc:	mov	r3, #8
   133c0:	str	r3, [sp, #52]	; 0x34
   133c4:	bl	11420 <__errno_location@plt>
   133c8:	mov	r3, #0
   133cc:	str	r3, [r0]
   133d0:	add	r1, sp, #216	; 0xd8
   133d4:	str	r3, [r1, #-160]!	; 0xffffff60
   133d8:	ldr	r2, [sp, #52]	; 0x34
   133dc:	mov	r0, r8
   133e0:	bl	113e4 <strtoul@plt>
   133e4:	cmn	r0, #1
   133e8:	beq	13478 <__assert_fail@plt+0x1ed8>
   133ec:	cmp	r0, #255	; 0xff
   133f0:	bhi	13478 <__assert_fail@plt+0x1ed8>
   133f4:	ldr	r3, [sp, #56]	; 0x38
   133f8:	ldrb	r3, [r3]
   133fc:	cmp	r3, #0
   13400:	bne	134dc <__assert_fail@plt+0x1f3c>
   13404:	uxtb	r8, r0
   13408:	b	13418 <__assert_fail@plt+0x1e78>
   1340c:	cmp	r8, #110	; 0x6e
   13410:	moveq	r8, #10
   13414:	bne	13394 <__assert_fail@plt+0x1df4>
   13418:	strb	r8, [r4, #104]	; 0x68
   1341c:	ldr	r3, [pc, #2576]	; 13e34 <__assert_fail@plt+0x2894>
   13420:	str	r3, [sp, #40]	; 0x28
   13424:	b	12f84 <__assert_fail@plt+0x19e4>
   13428:	mov	r8, #8
   1342c:	b	13418 <__assert_fail@plt+0x1e78>
   13430:	mov	r8, #13
   13434:	b	13418 <__assert_fail@plt+0x1e78>
   13438:	mov	r8, #9
   1343c:	b	13418 <__assert_fail@plt+0x1e78>
   13440:	ldr	r3, [sp, #40]	; 0x28
   13444:	add	r8, r3, #2
   13448:	mov	r3, #16
   1344c:	str	r3, [sp, #52]	; 0x34
   13450:	b	133c4 <__assert_fail@plt+0x1e24>
   13454:	mov	r2, #5
   13458:	ldr	r1, [pc, #2520]	; 13e38 <__assert_fail@plt+0x2898>
   1345c:	mov	r0, #0
   13460:	bl	11288 <dcgettext@plt>
   13464:	ldr	r3, [sp, #40]	; 0x28
   13468:	mov	r2, r0
   1346c:	mov	r1, #0
   13470:	mov	r0, #1
   13474:	bl	11354 <error@plt>
   13478:	ldr	r3, [sp, #52]	; 0x34
   1347c:	cmp	r3, #16
   13480:	beq	134b0 <__assert_fail@plt+0x1f10>
   13484:	mov	r2, #5
   13488:	ldr	r1, [pc, #2476]	; 13e3c <__assert_fail@plt+0x289c>
   1348c:	mov	r0, #0
   13490:	bl	11288 <dcgettext@plt>
   13494:	mov	r3, #255	; 0xff
   13498:	str	r3, [sp]
   1349c:	ldr	r3, [sp, #40]	; 0x28
   134a0:	mov	r2, r0
   134a4:	mov	r1, #0
   134a8:	mov	r0, #1
   134ac:	bl	11354 <error@plt>
   134b0:	mov	r2, #5
   134b4:	ldr	r1, [pc, #2436]	; 13e40 <__assert_fail@plt+0x28a0>
   134b8:	mov	r0, #0
   134bc:	bl	11288 <dcgettext@plt>
   134c0:	mov	r3, #255	; 0xff
   134c4:	str	r3, [sp]
   134c8:	ldr	r3, [sp, #40]	; 0x28
   134cc:	mov	r2, r0
   134d0:	mov	r1, #0
   134d4:	mov	r0, #1
   134d8:	bl	11354 <error@plt>
   134dc:	mov	r2, #5
   134e0:	ldr	r1, [pc, #2396]	; 13e44 <__assert_fail@plt+0x28a4>
   134e4:	mov	r0, #0
   134e8:	bl	11288 <dcgettext@plt>
   134ec:	ldr	r3, [sp, #56]	; 0x38
   134f0:	str	r3, [sp]
   134f4:	ldr	r3, [sp, #40]	; 0x28
   134f8:	mov	r2, r0
   134fc:	mov	r1, #0
   13500:	mov	r0, #1
   13504:	bl	11354 <error@plt>
   13508:	mov	r2, #5
   1350c:	ldr	r1, [pc, #2356]	; 13e48 <__assert_fail@plt+0x28a8>
   13510:	mov	r0, #0
   13514:	bl	11288 <dcgettext@plt>
   13518:	ldr	r3, [sp, #40]	; 0x28
   1351c:	mov	r2, r0
   13520:	mov	r1, #0
   13524:	mov	r0, #1
   13528:	bl	11354 <error@plt>
   1352c:	mov	r8, #7
   13530:	b	13418 <__assert_fail@plt+0x1e78>
   13534:	mov	r8, #12
   13538:	b	13418 <__assert_fail@plt+0x1e78>
   1353c:	ldr	r3, [r5]
   13540:	cmp	r3, #0
   13544:	beq	13558 <__assert_fail@plt+0x1fb8>
   13548:	ldrb	r2, [r3]
   1354c:	cmp	r2, #0
   13550:	strne	r3, [r4, #144]	; 0x90
   13554:	bne	12f84 <__assert_fail@plt+0x19e4>
   13558:	mov	r3, #0
   1355c:	str	r3, [r4, #144]	; 0x90
   13560:	b	12f84 <__assert_fail@plt+0x19e4>
   13564:	mov	r0, #0
   13568:	bl	12200 <__assert_fail@plt+0xc60>
   1356c:	ldr	r3, [r5]
   13570:	cmp	r3, #0
   13574:	ldreq	r3, [pc, #2256]	; 13e4c <__assert_fail@plt+0x28ac>
   13578:	str	r3, [r4, #28]
   1357c:	ldr	r3, [r4, #44]	; 0x2c
   13580:	cmp	r3, #0
   13584:	bne	135ac <__assert_fail@plt+0x200c>
   13588:	ldr	r3, [r4, #40]	; 0x28
   1358c:	cmp	r3, #0
   13590:	beq	12f84 <__assert_fail@plt+0x19e4>
   13594:	ldr	r1, [pc, #2228]	; 13e50 <__assert_fail@plt+0x28b0>
   13598:	ldr	r0, [pc, #2228]	; 13e54 <__assert_fail@plt+0x28b4>
   1359c:	bl	11730 <__assert_fail@plt+0x190>
   135a0:	mov	r3, #0
   135a4:	str	r3, [r4, #40]	; 0x28
   135a8:	b	12f84 <__assert_fail@plt+0x19e4>
   135ac:	ldr	r1, [pc, #2212]	; 13e58 <__assert_fail@plt+0x28b8>
   135b0:	ldr	r0, [pc, #2204]	; 13e54 <__assert_fail@plt+0x28b4>
   135b4:	bl	11730 <__assert_fail@plt+0x190>
   135b8:	mov	r3, #0
   135bc:	str	r3, [r4, #44]	; 0x2c
   135c0:	b	13588 <__assert_fail@plt+0x1fe8>
   135c4:	mov	r2, #1
   135c8:	str	r2, [sp]
   135cc:	mvn	r3, #0
   135d0:	mov	r1, #76	; 0x4c
   135d4:	ldr	r0, [r5]
   135d8:	bl	12518 <__assert_fail@plt+0xf78>
   135dc:	str	r0, [r4, #40]	; 0x28
   135e0:	ldr	r3, [r4, #44]	; 0x2c
   135e4:	cmp	r3, #0
   135e8:	bne	13610 <__assert_fail@plt+0x2070>
   135ec:	ldr	r3, [r4, #28]
   135f0:	cmp	r3, #0
   135f4:	beq	12f84 <__assert_fail@plt+0x19e4>
   135f8:	ldr	r1, [pc, #2140]	; 13e5c <__assert_fail@plt+0x28bc>
   135fc:	ldr	r0, [pc, #2140]	; 13e60 <__assert_fail@plt+0x28c0>
   13600:	bl	11730 <__assert_fail@plt+0x190>
   13604:	mov	r3, #0
   13608:	str	r3, [r4, #28]
   1360c:	b	12f84 <__assert_fail@plt+0x19e4>
   13610:	ldr	r1, [pc, #2112]	; 13e58 <__assert_fail@plt+0x28b8>
   13614:	ldr	r0, [pc, #2116]	; 13e60 <__assert_fail@plt+0x28c0>
   13618:	bl	11730 <__assert_fail@plt+0x190>
   1361c:	mov	r3, #0
   13620:	str	r3, [r4, #44]	; 0x2c
   13624:	b	135ec <__assert_fail@plt+0x204c>
   13628:	ldr	r0, [r5]
   1362c:	cmp	r0, #0
   13630:	beq	1367c <__assert_fail@plt+0x20dc>
   13634:	mov	r2, #1
   13638:	str	r2, [sp]
   1363c:	mvn	r3, #0
   13640:	mov	r1, #108	; 0x6c
   13644:	bl	12518 <__assert_fail@plt+0xf78>
   13648:	str	r0, [r4, #40]	; 0x28
   1364c:	ldr	r3, [r4, #44]	; 0x2c
   13650:	cmp	r3, #0
   13654:	bne	13688 <__assert_fail@plt+0x20e8>
   13658:	ldr	r3, [r4, #28]
   1365c:	cmp	r3, #0
   13660:	beq	12f84 <__assert_fail@plt+0x19e4>
   13664:	ldr	r1, [pc, #2032]	; 13e5c <__assert_fail@plt+0x28bc>
   13668:	ldr	r0, [pc, #2036]	; 13e64 <__assert_fail@plt+0x28c4>
   1366c:	bl	11730 <__assert_fail@plt+0x190>
   13670:	mov	r3, #0
   13674:	str	r3, [r4, #28]
   13678:	b	12f84 <__assert_fail@plt+0x19e4>
   1367c:	mov	r3, #1
   13680:	str	r3, [r4, #40]	; 0x28
   13684:	b	1364c <__assert_fail@plt+0x20ac>
   13688:	ldr	r1, [pc, #1992]	; 13e58 <__assert_fail@plt+0x28b8>
   1368c:	ldr	r0, [pc, #2000]	; 13e64 <__assert_fail@plt+0x28c4>
   13690:	bl	11730 <__assert_fail@plt+0x190>
   13694:	mov	r3, #0
   13698:	str	r3, [r4, #44]	; 0x2c
   1369c:	b	13658 <__assert_fail@plt+0x20b8>
   136a0:	mov	r2, #1
   136a4:	str	r2, [sp]
   136a8:	mvn	r3, #0
   136ac:	mov	r1, #110	; 0x6e
   136b0:	ldr	r0, [r5]
   136b4:	bl	12518 <__assert_fail@plt+0xf78>
   136b8:	str	r0, [r4, #44]	; 0x2c
   136bc:	ldr	r3, [r4, #40]	; 0x28
   136c0:	cmp	r3, #0
   136c4:	bne	13700 <__assert_fail@plt+0x2160>
   136c8:	ldr	r3, [r4, #28]
   136cc:	cmp	r3, #0
   136d0:	beq	12f84 <__assert_fail@plt+0x19e4>
   136d4:	ldr	r3, [r4, #44]	; 0x2c
   136d8:	cmp	r3, #1
   136dc:	moveq	r3, #0
   136e0:	streq	r3, [r4, #44]	; 0x2c
   136e4:	beq	12f84 <__assert_fail@plt+0x19e4>
   136e8:	ldr	r1, [pc, #1900]	; 13e5c <__assert_fail@plt+0x28bc>
   136ec:	ldr	r0, [pc, #1908]	; 13e68 <__assert_fail@plt+0x28c8>
   136f0:	bl	11730 <__assert_fail@plt+0x190>
   136f4:	mov	r3, #0
   136f8:	str	r3, [r4, #28]
   136fc:	b	12f84 <__assert_fail@plt+0x19e4>
   13700:	ldr	r1, [pc, #1864]	; 13e50 <__assert_fail@plt+0x28b0>
   13704:	ldr	r0, [pc, #1884]	; 13e68 <__assert_fail@plt+0x28c8>
   13708:	bl	11730 <__assert_fail@plt+0x190>
   1370c:	mov	r3, #0
   13710:	str	r3, [r4, #40]	; 0x28
   13714:	b	136c8 <__assert_fail@plt+0x2128>
   13718:	ldr	r3, [sp, #48]	; 0x30
   1371c:	blx	r3
   13720:	mov	r3, #0
   13724:	str	r3, [sp]
   13728:	ldr	r3, [r4, #8]
   1372c:	mov	r2, #1
   13730:	mov	r1, #115	; 0x73
   13734:	ldr	r0, [r5]
   13738:	bl	12518 <__assert_fail@plt+0xf78>
   1373c:	mov	r8, r0
   13740:	mov	r3, r0
   13744:	ldr	r2, [r4, #8]
   13748:	cmp	r0, r2
   1374c:	bhi	13758 <__assert_fail@plt+0x21b8>
   13750:	str	r3, [r4, #16]
   13754:	b	12f84 <__assert_fail@plt+0x19e4>
   13758:	mov	r2, #5
   1375c:	ldr	r1, [pc, #1800]	; 13e6c <__assert_fail@plt+0x28cc>
   13760:	mov	r0, #0
   13764:	bl	11288 <dcgettext@plt>
   13768:	ldr	r3, [r4, #8]
   1376c:	str	r3, [sp]
   13770:	mov	r3, r8
   13774:	mov	r2, r0
   13778:	mov	r1, #0
   1377c:	mov	r0, r1
   13780:	bl	11354 <error@plt>
   13784:	ldr	r3, [r4, #8]
   13788:	b	13750 <__assert_fail@plt+0x21b0>
   1378c:	mov	r3, #1
   13790:	strb	r3, [r4, #157]	; 0x9d
   13794:	b	12f84 <__assert_fail@plt+0x19e4>
   13798:	mov	r3, #1
   1379c:	str	r3, [r4, #4]
   137a0:	b	12f84 <__assert_fail@plt+0x19e4>
   137a4:	mov	r3, #1
   137a8:	strb	r3, [r4, #168]	; 0xa8
   137ac:	b	12f84 <__assert_fail@plt+0x19e4>
   137b0:	mov	r3, #1
   137b4:	strb	r3, [r4, #156]	; 0x9c
   137b8:	strb	r3, [r4, #157]	; 0x9d
   137bc:	b	12f84 <__assert_fail@plt+0x19e4>
   137c0:	mov	r3, #1
   137c4:	str	r3, [sp]
   137c8:	mvn	r3, #-2147483648	; 0x80000000
   137cc:	mov	r2, #0
   137d0:	mov	r1, #80	; 0x50
   137d4:	ldr	r0, [r5]
   137d8:	bl	12518 <__assert_fail@plt+0xf78>
   137dc:	ldr	r3, [pc, #1676]	; 13e70 <__assert_fail@plt+0x28d0>
   137e0:	str	r0, [r3]
   137e4:	b	12f84 <__assert_fail@plt+0x19e4>
   137e8:	ldr	r3, [r5]
   137ec:	str	r3, [sp, #28]
   137f0:	b	12f84 <__assert_fail@plt+0x19e4>
   137f4:	ldr	r0, [pc, #1500]	; 13dd8 <__assert_fail@plt+0x2838>
   137f8:	bl	14f58 <__assert_fail@plt+0x39b8>
   137fc:	mov	r0, r6
   13800:	add	sp, sp, #220	; 0xdc
   13804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13808:	ldr	r8, [r5]
   1380c:	mov	r1, #61	; 0x3d
   13810:	mov	r0, r8
   13814:	bl	113fc <strchr@plt>
   13818:	cmp	r0, #0
   1381c:	bne	13860 <__assert_fail@plt+0x22c0>
   13820:	str	r8, [r4, #160]	; 0xa0
   13824:	mov	r0, r8
   13828:	bl	1154c <unsetenv@plt>
   1382c:	cmp	r0, #0
   13830:	beq	12f84 <__assert_fail@plt+0x19e4>
   13834:	bl	11420 <__errno_location@plt>
   13838:	ldr	r4, [r0]
   1383c:	mov	r2, #5
   13840:	ldr	r1, [pc, #1580]	; 13e74 <__assert_fail@plt+0x28d4>
   13844:	mov	r0, #0
   13848:	bl	11288 <dcgettext@plt>
   1384c:	mov	r3, r8
   13850:	mov	r2, r0
   13854:	mov	r1, r4
   13858:	mov	r0, #1
   1385c:	bl	11354 <error@plt>
   13860:	mov	r2, #5
   13864:	ldr	r1, [pc, #1548]	; 13e78 <__assert_fail@plt+0x28d8>
   13868:	mov	r0, #0
   1386c:	bl	11288 <dcgettext@plt>
   13870:	ldr	r2, [sp, #212]	; 0xd4
   13874:	ldr	r3, [pc, #1536]	; 13e7c <__assert_fail@plt+0x28dc>
   13878:	add	r3, r3, r2, lsl #4
   1387c:	ldr	r3, [r3, #56]	; 0x38
   13880:	mov	r2, r0
   13884:	mov	r1, #0
   13888:	mov	r0, #1
   1388c:	bl	11354 <error@plt>
   13890:	mov	r0, #1
   13894:	bl	12200 <__assert_fail@plt+0xc60>
   13898:	mov	r3, #1
   1389c:	str	r3, [sp, #32]
   138a0:	b	12f84 <__assert_fail@plt+0x19e4>
   138a4:	ldr	r3, [pc, #1328]	; 13ddc <__assert_fail@plt+0x283c>
   138a8:	ldr	r3, [r3, #144]	; 0x90
   138ac:	ldr	r2, [pc, #1408]	; 13e34 <__assert_fail@plt+0x2894>
   138b0:	ldr	r1, [sp, #40]	; 0x28
   138b4:	adds	r3, r3, #0
   138b8:	movne	r3, #1
   138bc:	cmp	r1, r2
   138c0:	movne	r3, #0
   138c4:	cmp	r3, #0
   138c8:	bne	13a4c <__assert_fail@plt+0x24ac>
   138cc:	ldr	r3, [sp, #48]	; 0x30
   138d0:	blx	r3
   138d4:	cmp	r7, #0
   138d8:	bne	13a70 <__assert_fail@plt+0x24d0>
   138dc:	add	r4, sp, #216	; 0xd8
   138e0:	ldr	r3, [pc, #1432]	; 13e80 <__assert_fail@plt+0x28e0>
   138e4:	str	r3, [r4, #-156]!	; 0xffffff64
   138e8:	add	r0, r4, #4
   138ec:	bl	114c8 <sigemptyset@plt>
   138f0:	mov	r2, #0
   138f4:	str	r2, [sp, #192]	; 0xc0
   138f8:	mov	r1, r4
   138fc:	mov	r0, #10
   13900:	bl	112f4 <sigaction@plt>
   13904:	cmp	r0, #0
   13908:	bne	13a84 <__assert_fail@plt+0x24e4>
   1390c:	add	r4, sp, #216	; 0xd8
   13910:	ldr	r3, [pc, #1388]	; 13e84 <__assert_fail@plt+0x28e4>
   13914:	str	r3, [r4, #-156]!	; 0xffffff64
   13918:	add	r0, r4, #4
   1391c:	bl	114c8 <sigemptyset@plt>
   13920:	mov	r2, #0
   13924:	str	r2, [sp, #192]	; 0xc0
   13928:	mov	r1, r4
   1392c:	mov	r0, #12
   13930:	bl	112f4 <sigaction@plt>
   13934:	cmp	r0, #0
   13938:	bne	13ab0 <__assert_fail@plt+0x2510>
   1393c:	ldr	r1, [pc, #1248]	; 13e24 <__assert_fail@plt+0x2884>
   13940:	ldr	r0, [sp, #28]
   13944:	bl	111e0 <strcmp@plt>
   13948:	cmp	r0, #0
   1394c:	bne	13adc <__assert_fail@plt+0x253c>
   13950:	ldr	r3, [pc, #1328]	; 13e88 <__assert_fail@plt+0x28e8>
   13954:	ldr	r2, [r3]
   13958:	ldr	r3, [pc, #1148]	; 13ddc <__assert_fail@plt+0x283c>
   1395c:	str	r2, [r3, #100]	; 0x64
   13960:	ldr	r3, [pc, #1140]	; 13ddc <__assert_fail@plt+0x283c>
   13964:	ldr	r3, [r3, #28]
   13968:	cmp	r3, #0
   1396c:	beq	13b3c <__assert_fail@plt+0x259c>
   13970:	mov	r2, #1
   13974:	ldr	r3, [pc, #1120]	; 13ddc <__assert_fail@plt+0x283c>
   13978:	str	r2, [r3, #4]
   1397c:	ldr	r3, [pc, #1352]	; 13ecc <__assert_fail@plt+0x292c>
   13980:	ldr	r3, [r3]
   13984:	cmp	fp, r3
   13988:	beq	13b50 <__assert_fail@plt+0x25b0>
   1398c:	ldr	r3, [sp, #32]
   13990:	cmp	r3, #0
   13994:	bne	13b78 <__assert_fail@plt+0x25d8>
   13998:	ldr	r4, [pc, #1084]	; 13ddc <__assert_fail@plt+0x283c>
   1399c:	ldr	r0, [r4, #16]
   139a0:	add	r0, r0, #1
   139a4:	bl	18f88 <__assert_fail@plt+0x79e8>
   139a8:	str	r0, [r4, #92]	; 0x5c
   139ac:	ldr	r0, [r4, #16]
   139b0:	add	r0, r0, #1
   139b4:	bl	18f88 <__assert_fail@plt+0x79e8>
   139b8:	str	r0, [r4, #60]	; 0x3c
   139bc:	mov	r1, #0
   139c0:	mov	r0, #17
   139c4:	bl	11270 <signal@plt>
   139c8:	ldr	r3, [r4, #28]
   139cc:	cmp	r3, #0
   139d0:	beq	13db4 <__assert_fail@plt+0x2814>
   139d4:	lsl	r6, fp, #2
   139d8:	mov	r0, r6
   139dc:	bl	18f88 <__assert_fail@plt+0x79e8>
   139e0:	str	r0, [sp, #44]	; 0x2c
   139e4:	ldr	r3, [pc, #1248]	; 13ecc <__assert_fail@plt+0x292c>
   139e8:	ldr	r5, [r3]
   139ec:	cmp	fp, r5
   139f0:	ble	13a1c <__assert_fail@plt+0x247c>
   139f4:	lsl	r5, r5, #2
   139f8:	ldr	r3, [sp, #36]	; 0x24
   139fc:	add	r4, r3, r5
   13a00:	add	r5, r0, r5
   13a04:	add	r6, r3, r6
   13a08:	ldr	r0, [r4], #4
   13a0c:	bl	113f0 <strlen@plt>
   13a10:	str	r0, [r5], #4
   13a14:	cmp	r4, r6
   13a18:	bne	13a08 <__assert_fail@plt+0x2468>
   13a1c:	ldr	r4, [pc, #952]	; 13ddc <__assert_fail@plt+0x283c>
   13a20:	ldr	r0, [r4, #28]
   13a24:	bl	113f0 <strlen@plt>
   13a28:	str	r0, [r4, #24]
   13a2c:	mov	sl, r4
   13a30:	add	r3, r4, #48	; 0x30
   13a34:	str	r3, [sp, #28]
   13a38:	add	r3, r4, #4
   13a3c:	str	r3, [sp, #32]
   13a40:	mov	r6, #0
   13a44:	ldr	r9, [pc, #1060]	; 13e70 <__assert_fail@plt+0x28d0>
   13a48:	b	13f30 <__assert_fail@plt+0x2990>
   13a4c:	mov	r2, #5
   13a50:	ldr	r1, [pc, #1076]	; 13e8c <__assert_fail@plt+0x28ec>
   13a54:	mov	r0, #0
   13a58:	bl	11288 <dcgettext@plt>
   13a5c:	mov	r2, r0
   13a60:	mov	r1, #0
   13a64:	mov	r0, r1
   13a68:	bl	11354 <error@plt>
   13a6c:	b	138cc <__assert_fail@plt+0x232c>
   13a70:	ldr	r3, [pc, #908]	; 13e04 <__assert_fail@plt+0x2864>
   13a74:	ldr	r2, [pc, #1044]	; 13e90 <__assert_fail@plt+0x28f0>
   13a78:	ldr	r1, [pc, #908]	; 13e0c <__assert_fail@plt+0x286c>
   13a7c:	ldr	r0, [pc, #1040]	; 13e94 <__assert_fail@plt+0x28f4>
   13a80:	bl	115a0 <__assert_fail@plt>
   13a84:	bl	11420 <__errno_location@plt>
   13a88:	ldr	r4, [r0]
   13a8c:	mov	r2, #5
   13a90:	ldr	r1, [pc, #1024]	; 13e98 <__assert_fail@plt+0x28f8>
   13a94:	mov	r0, #0
   13a98:	bl	11288 <dcgettext@plt>
   13a9c:	mov	r2, r0
   13aa0:	mov	r1, r4
   13aa4:	mov	r0, #0
   13aa8:	bl	11354 <error@plt>
   13aac:	b	1390c <__assert_fail@plt+0x236c>
   13ab0:	bl	11420 <__errno_location@plt>
   13ab4:	ldr	r4, [r0]
   13ab8:	mov	r2, #5
   13abc:	ldr	r1, [pc, #984]	; 13e9c <__assert_fail@plt+0x28fc>
   13ac0:	mov	r0, #0
   13ac4:	bl	11288 <dcgettext@plt>
   13ac8:	mov	r2, r0
   13acc:	mov	r1, r4
   13ad0:	mov	r0, #0
   13ad4:	bl	11354 <error@plt>
   13ad8:	b	1393c <__assert_fail@plt+0x239c>
   13adc:	ldr	r4, [pc, #760]	; 13ddc <__assert_fail@plt+0x283c>
   13ae0:	mov	r3, #1
   13ae4:	str	r3, [r4, #164]	; 0xa4
   13ae8:	ldr	r0, [sp, #28]
   13aec:	bl	12660 <__assert_fail@plt+0x10c0>
   13af0:	str	r0, [r4, #100]	; 0x64
   13af4:	cmp	r0, #0
   13af8:	bne	13960 <__assert_fail@plt+0x23c0>
   13afc:	bl	11420 <__errno_location@plt>
   13b00:	ldr	r4, [r0]
   13b04:	mov	r2, #5
   13b08:	ldr	r1, [pc, #912]	; 13ea0 <__assert_fail@plt+0x2900>
   13b0c:	mov	r0, #0
   13b10:	bl	11288 <dcgettext@plt>
   13b14:	mov	r5, r0
   13b18:	ldr	r2, [sp, #28]
   13b1c:	mov	r1, #8
   13b20:	mov	r0, #0
   13b24:	bl	1867c <__assert_fail@plt+0x70dc>
   13b28:	mov	r3, r0
   13b2c:	mov	r2, r5
   13b30:	mov	r1, r4
   13b34:	mov	r0, #1
   13b38:	bl	11354 <error@plt>
   13b3c:	ldr	r3, [pc, #664]	; 13ddc <__assert_fail@plt+0x283c>
   13b40:	ldr	r3, [r3, #40]	; 0x28
   13b44:	cmp	r3, #0
   13b48:	beq	1397c <__assert_fail@plt+0x23dc>
   13b4c:	b	13970 <__assert_fail@plt+0x23d0>
   13b50:	mov	r2, #0
   13b54:	ldr	r3, [pc, #880]	; 13ecc <__assert_fail@plt+0x292c>
   13b58:	str	r2, [r3]
   13b5c:	add	r3, sp, #216	; 0xd8
   13b60:	mov	r2, r3
   13b64:	add	r3, sp, #204	; 0xcc
   13b68:	str	r3, [r2, #-16]!
   13b6c:	str	r2, [sp, #36]	; 0x24
   13b70:	mov	fp, #1
   13b74:	b	1398c <__assert_fail@plt+0x23ec>
   13b78:	ldr	r5, [pc, #804]	; 13ea4 <__assert_fail@plt+0x2904>
   13b7c:	ldr	r6, [r5]
   13b80:	mov	r2, #5
   13b84:	ldr	r1, [pc, #796]	; 13ea8 <__assert_fail@plt+0x2908>
   13b88:	mov	r0, #0
   13b8c:	bl	11288 <dcgettext@plt>
   13b90:	mov	r7, r0
   13b94:	bl	147e4 <__assert_fail@plt+0x3244>
   13b98:	mov	r4, #0
   13b9c:	mov	r2, r0
   13ba0:	mov	r3, r4
   13ba4:	mov	r1, r7
   13ba8:	mov	r0, r6
   13bac:	bl	11414 <fprintf@plt>
   13bb0:	ldr	r7, [r5]
   13bb4:	mov	r2, #5
   13bb8:	ldr	r1, [pc, #748]	; 13eac <__assert_fail@plt+0x290c>
   13bbc:	mov	r0, r4
   13bc0:	bl	11288 <dcgettext@plt>
   13bc4:	ldr	r6, [pc, #528]	; 13ddc <__assert_fail@plt+0x283c>
   13bc8:	ldr	r2, [r6, #8]
   13bcc:	mov	r3, r4
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, r7
   13bd8:	bl	11414 <fprintf@plt>
   13bdc:	ldr	r7, [r5]
   13be0:	mov	r2, #5
   13be4:	ldr	r1, [pc, #708]	; 13eb0 <__assert_fail@plt+0x2910>
   13be8:	mov	r0, r4
   13bec:	bl	11288 <dcgettext@plt>
   13bf0:	ldr	r2, [r6, #12]
   13bf4:	mov	r3, r4
   13bf8:	mov	r1, r0
   13bfc:	mov	r0, r7
   13c00:	bl	11414 <fprintf@plt>
   13c04:	ldr	r7, [r5]
   13c08:	mov	r2, #5
   13c0c:	ldr	r1, [pc, #672]	; 13eb4 <__assert_fail@plt+0x2914>
   13c10:	mov	r0, r4
   13c14:	bl	11288 <dcgettext@plt>
   13c18:	mov	r8, r0
   13c1c:	ldr	r9, [r6, #8]
   13c20:	bl	147e4 <__assert_fail@plt+0x3244>
   13c24:	sub	r2, r9, r0
   13c28:	mov	r3, r4
   13c2c:	mov	r1, r8
   13c30:	mov	r0, r7
   13c34:	bl	11414 <fprintf@plt>
   13c38:	ldr	r7, [r5]
   13c3c:	mov	r2, #5
   13c40:	ldr	r1, [pc, #624]	; 13eb8 <__assert_fail@plt+0x2918>
   13c44:	mov	r0, r4
   13c48:	bl	11288 <dcgettext@plt>
   13c4c:	ldr	r2, [r6, #16]
   13c50:	mov	r3, r4
   13c54:	mov	r1, r0
   13c58:	mov	r0, r7
   13c5c:	bl	11414 <fprintf@plt>
   13c60:	ldr	r5, [r5]
   13c64:	mov	r2, #5
   13c68:	ldr	r1, [pc, #588]	; 13ebc <__assert_fail@plt+0x291c>
   13c6c:	mov	r0, r4
   13c70:	bl	11288 <dcgettext@plt>
   13c74:	mvn	r2, #-2147483648	; 0x80000000
   13c78:	mov	r3, #0
   13c7c:	mov	r1, r0
   13c80:	mov	r0, r5
   13c84:	bl	11414 <fprintf@plt>
   13c88:	mov	r0, r4
   13c8c:	bl	11540 <isatty@plt>
   13c90:	cmp	r0, r4
   13c94:	beq	13998 <__assert_fail@plt+0x23f8>
   13c98:	ldr	r3, [pc, #516]	; 13ea4 <__assert_fail@plt+0x2904>
   13c9c:	ldr	r4, [r3]
   13ca0:	mov	r2, #5
   13ca4:	ldr	r1, [pc, #532]	; 13ec0 <__assert_fail@plt+0x2920>
   13ca8:	mov	r0, #0
   13cac:	bl	11288 <dcgettext@plt>
   13cb0:	mov	r1, r0
   13cb4:	mov	r0, r4
   13cb8:	bl	11414 <fprintf@plt>
   13cbc:	ldr	r3, [sp, #44]	; 0x2c
   13cc0:	cmp	r3, #0
   13cc4:	beq	13998 <__assert_fail@plt+0x23f8>
   13cc8:	ldr	r3, [pc, #468]	; 13ea4 <__assert_fail@plt+0x2904>
   13ccc:	ldr	r4, [r3]
   13cd0:	mov	r2, #5
   13cd4:	ldr	r1, [pc, #488]	; 13ec4 <__assert_fail@plt+0x2924>
   13cd8:	mov	r0, #0
   13cdc:	bl	11288 <dcgettext@plt>
   13ce0:	ldr	r3, [pc, #484]	; 13ecc <__assert_fail@plt+0x292c>
   13ce4:	ldr	r3, [r3]
   13ce8:	ldr	r2, [sp, #36]	; 0x24
   13cec:	ldr	r2, [r2, r3, lsl #2]
   13cf0:	mov	r1, r0
   13cf4:	mov	r0, r4
   13cf8:	bl	11414 <fprintf@plt>
   13cfc:	b	13998 <__assert_fail@plt+0x23f8>
   13d00:	ldr	sl, [r5, r3, lsl #2]
   13d04:	mov	r0, sl
   13d08:	bl	113f0 <strlen@plt>
   13d0c:	ldrb	r3, [r8, #4]
   13d10:	str	r3, [sp, #8]
   13d14:	str	r6, [sp, #4]
   13d18:	str	r6, [sp]
   13d1c:	add	r3, r0, #1
   13d20:	mov	r2, sl
   13d24:	mov	r1, r9
   13d28:	mov	r0, r7
   13d2c:	bl	14094 <__assert_fail@plt+0x2af4>
   13d30:	ldr	r3, [r4]
   13d34:	add	r3, r3, #1
   13d38:	str	r3, [r4]
   13d3c:	ldr	r3, [r4]
   13d40:	cmp	fp, r3
   13d44:	bgt	13d00 <__assert_fail@plt+0x2760>
   13d48:	mov	r2, #0
   13d4c:	ldr	r3, [pc, #284]	; 13e70 <__assert_fail@plt+0x28d0>
   13d50:	strb	r2, [r3, #4]
   13d54:	ldr	r3, [pc, #128]	; 13ddc <__assert_fail@plt+0x283c>
   13d58:	ldr	r2, [r3, #48]	; 0x30
   13d5c:	str	r2, [r3, #32]
   13d60:	ldr	r2, [r3, #64]	; 0x40
   13d64:	str	r2, [r3, #68]	; 0x44
   13d68:	mov	r4, r3
   13d6c:	add	r6, r3, #48	; 0x30
   13d70:	add	r5, r3, #4
   13d74:	ldr	r3, [sp, #40]	; 0x28
   13d78:	blx	r3
   13d7c:	cmn	r0, #1
   13d80:	beq	13ed0 <__assert_fail@plt+0x2930>
   13d84:	ldr	r3, [r4, #40]	; 0x28
   13d88:	cmp	r3, #0
   13d8c:	beq	13d74 <__assert_fail@plt+0x27d4>
   13d90:	ldr	r2, [r4, #108]	; 0x6c
   13d94:	cmp	r3, r2
   13d98:	bhi	13d74 <__assert_fail@plt+0x27d4>
   13d9c:	mov	r1, r6
   13da0:	mov	r0, r5
   13da4:	bl	144dc <__assert_fail@plt+0x2f3c>
   13da8:	mov	r3, #0
   13dac:	str	r3, [r4, #108]	; 0x6c
   13db0:	b	13d74 <__assert_fail@plt+0x27d4>
   13db4:	ldr	r4, [pc, #272]	; 13ecc <__assert_fail@plt+0x292c>
   13db8:	ldr	r7, [pc, #28]	; 13ddc <__assert_fail@plt+0x283c>
   13dbc:	add	r9, r7, #48	; 0x30
   13dc0:	add	r7, r7, #4
   13dc4:	ldr	r8, [pc, #164]	; 13e70 <__assert_fail@plt+0x28d0>
   13dc8:	mov	r6, #0
   13dcc:	ldr	r5, [sp, #36]	; 0x24
   13dd0:	b	13d3c <__assert_fail@plt+0x279c>
   13dd4:	andeq	ip, r1, r4, lsl #4
   13dd8:	andeq	fp, r1, r4, lsr fp
   13ddc:	andeq	sp, r2, r8, ror #3
   13de0:	andeq	fp, r1, r0, lsr #17
   13de4:	andeq	ip, r1, r4, lsr r6
   13de8:	andeq	fp, r1, ip, lsr fp
   13dec:	andeq	r5, r1, r8, asr #6
   13df0:			; <UNDEFINED> instruction: 0x00011bb8
   13df4:	andeq	sp, r2, ip, ror #3
   13df8:	andeq	r2, r1, r0, ror #17
   13dfc:	ldrdeq	r1, [r1], -r4
   13e00:	andeq	fp, r1, r4, asr fp
   13e04:			; <UNDEFINED> instruction: 0x0001a9bc
   13e08:	andeq	r0, r0, r3, ror #3
   13e0c:	andeq	sl, r1, ip, lsr #24
   13e10:	andeq	fp, r1, r8, ror fp
   13e14:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13e18:	muleq	r1, r4, fp
   13e1c:	andeq	r1, r1, r8, ror r7
   13e20:	andeq	r1, r1, r4, asr #26
   13e24:	andeq	fp, r1, r0, lsr fp
   13e28:	andeq	sl, r1, r4, asr #19
   13e2c:	andeq	fp, r1, r4, lsr #29
   13e30:	andeq	sp, r2, r0, ror #3
   13e34:	andeq	r1, r1, r4, lsl #16
   13e38:			; <UNDEFINED> instruction: 0x0001bbb0
   13e3c:	andeq	fp, r1, r4, asr ip
   13e40:	strdeq	fp, [r1], -r0
   13e44:			; <UNDEFINED> instruction: 0x0001bcb8
   13e48:	andeq	fp, r1, ip, lsl sp
   13e4c:	andeq	fp, r1, r0, lsr #27
   13e50:	andeq	fp, r1, r0, asr #27
   13e54:			; <UNDEFINED> instruction: 0x0001bdb0
   13e58:	andeq	fp, r1, r4, lsr #27
   13e5c:	ldrdeq	fp, [r1], -r0
   13e60:	andeq	fp, r1, ip, asr #27
   13e64:	ldrdeq	fp, [r1], -ip
   13e68:	andeq	fp, r1, ip, ror #27
   13e6c:	strdeq	fp, [r1], -ip
   13e70:	andeq	sp, r2, r8, ror #2
   13e74:	andeq	fp, r1, ip, ror lr
   13e78:	andeq	fp, r1, r0, asr #28
   13e7c:	andeq	sl, r1, ip, lsl #19
   13e80:	ldrdeq	r1, [r1], -r8
   13e84:	andeq	r1, r1, ip, lsl #14
   13e88:	ldrdeq	sp, [r2], -r8
   13e8c:	andeq	fp, r1, r8, asr #29
   13e90:	ldrdeq	r0, [r0], -r3
   13e94:	andeq	fp, r1, r4, lsl #30
   13e98:	andeq	fp, r1, ip, lsl pc
   13e9c:	andeq	fp, r1, r0, asr #30
   13ea0:	andeq	fp, r1, r4, ror #30
   13ea4:	ldrdeq	sp, [r2], -r0
   13ea8:	andeq	fp, r1, r0, lsl #31
   13eac:			; <UNDEFINED> instruction: 0x0001bfb0
   13eb0:	andeq	fp, r1, ip, ror #31
   13eb4:	andeq	ip, r1, ip, lsr r0
   13eb8:	andeq	ip, r1, r4, ror r0
   13ebc:	andeq	ip, r1, r8, lsr #1
   13ec0:	andeq	ip, r1, r4, ror #1
   13ec4:	muleq	r1, r4, r1
   13ec8:	andeq	sp, r2, r8, ror #3
   13ecc:	andeq	sp, r2, r8, asr #3
   13ed0:	ldr	r3, [pc, #-16]	; 13ec8 <__assert_fail@plt+0x2928>
   13ed4:	ldr	r2, [r3, #48]	; 0x30
   13ed8:	ldr	r3, [r3, #32]
   13edc:	cmp	r2, r3
   13ee0:	bne	13f00 <__assert_fail@plt+0x2960>
   13ee4:	ldr	r3, [sp, #44]	; 0x2c
   13ee8:	cmp	r3, #0
   13eec:	beq	13f10 <__assert_fail@plt+0x2970>
   13ef0:	ldr	r3, [pc, #-48]	; 13ec8 <__assert_fail@plt+0x2928>
   13ef4:	ldrb	r3, [r3, #140]	; 0x8c
   13ef8:	cmp	r3, #0
   13efc:	bne	13f10 <__assert_fail@plt+0x2970>
   13f00:	ldr	r0, [pc, #-64]	; 13ec8 <__assert_fail@plt+0x2928>
   13f04:	add	r1, r0, #48	; 0x30
   13f08:	add	r0, r0, #4
   13f0c:	bl	144dc <__assert_fail@plt+0x2f3c>
   13f10:	ldr	r3, [pc, #-80]	; 13ec8 <__assert_fail@plt+0x2928>
   13f14:	ldr	r2, [r3, #124]	; 0x7c
   13f18:	str	r2, [r3, #136]	; 0x88
   13f1c:	ldr	r6, [r3, #124]	; 0x7c
   13f20:	b	137fc <__assert_fail@plt+0x225c>
   13f24:	ldr	r1, [sp, #28]
   13f28:	ldr	r0, [sp, #32]
   13f2c:	bl	144dc <__assert_fail@plt+0x2f3c>
   13f30:	ldr	r3, [sp, #40]	; 0x28
   13f34:	blx	r3
   13f38:	mov	r8, r0
   13f3c:	cmn	r0, #1
   13f40:	beq	13f10 <__assert_fail@plt+0x2970>
   13f44:	ldr	r5, [sp, #28]
   13f48:	mov	r1, r5
   13f4c:	ldr	r4, [sp, #32]
   13f50:	mov	r0, r4
   13f54:	bl	1499c <__assert_fail@plt+0x33fc>
   13f58:	str	r6, [sl, #64]	; 0x40
   13f5c:	ldr	r3, [pc, #-152]	; 13ecc <__assert_fail@plt+0x292c>
   13f60:	ldr	r2, [r3]
   13f64:	ldr	r3, [sp, #44]	; 0x2c
   13f68:	ldr	r3, [r3, r2, lsl #2]
   13f6c:	ldr	r7, [sp, #36]	; 0x24
   13f70:	ldr	r2, [r7, r2, lsl #2]
   13f74:	ldrb	r1, [r9, #4]
   13f78:	str	r1, [sp, #8]
   13f7c:	str	r6, [sp, #4]
   13f80:	str	r6, [sp]
   13f84:	add	r3, r3, #1
   13f88:	mov	r1, r5
   13f8c:	mov	r0, r4
   13f90:	bl	14094 <__assert_fail@plt+0x2af4>
   13f94:	sub	r8, r8, #1
   13f98:	strb	r6, [r9, #4]
   13f9c:	ldr	r2, [pc, #-216]	; 13ecc <__assert_fail@plt+0x292c>
   13fa0:	ldr	r5, [r2]
   13fa4:	add	r4, r5, #1
   13fa8:	cmp	fp, r4
   13fac:	ble	13f24 <__assert_fail@plt+0x2984>
   13fb0:	lsl	r5, r5, #2
   13fb4:	add	r7, r7, r5
   13fb8:	ldr	r3, [sp, #44]	; 0x2c
   13fbc:	add	r5, r3, r5
   13fc0:	ldr	r3, [r5, #4]!
   13fc4:	ldr	r2, [r7, #4]!
   13fc8:	ldrb	r1, [r9, #4]
   13fcc:	str	r1, [sp, #16]
   13fd0:	str	r8, [sp, #12]
   13fd4:	ldr	r1, [sl, #92]	; 0x5c
   13fd8:	str	r1, [sp, #8]
   13fdc:	str	r6, [sp, #4]
   13fe0:	str	r6, [sp]
   13fe4:	ldr	r1, [sp, #28]
   13fe8:	ldr	r0, [sp, #32]
   13fec:	bl	14348 <__assert_fail@plt+0x2da8>
   13ff0:	add	r4, r4, #1
   13ff4:	cmp	fp, r4
   13ff8:	bgt	13fc0 <__assert_fail@plt+0x2a20>
   13ffc:	b	13f24 <__assert_fail@plt+0x2984>
   14000:	mov	r0, #0
   14004:	bx	lr
   14008:	push	{r4, r5, lr}
   1400c:	sub	sp, sp, #20
   14010:	mov	r5, r0
   14014:	mov	r4, r1
   14018:	bl	11378 <getenv@plt>
   1401c:	cmp	r0, #0
   14020:	beq	14088 <__assert_fail@plt+0x2ae8>
   14024:	mov	r3, #0
   14028:	str	r3, [sp]
   1402c:	add	r3, sp, #12
   14030:	mov	r2, #10
   14034:	add	r1, sp, #8
   14038:	bl	195d8 <__assert_fail@plt+0x8038>
   1403c:	cmp	r0, #0
   14040:	bne	1405c <__assert_fail@plt+0x2abc>
   14044:	ldr	r0, [sp, #12]
   14048:	cmp	r0, r4
   1404c:	movcs	r0, #0
   14050:	movcc	r0, #1
   14054:	add	sp, sp, #20
   14058:	pop	{r4, r5, pc}
   1405c:	bl	11420 <__errno_location@plt>
   14060:	ldr	r4, [r0]
   14064:	mov	r2, #5
   14068:	ldr	r1, [pc, #32]	; 14090 <__assert_fail@plt+0x2af0>
   1406c:	mov	r0, #0
   14070:	bl	11288 <dcgettext@plt>
   14074:	mov	r3, r5
   14078:	mov	r2, r0
   1407c:	mov	r1, r4
   14080:	mov	r0, #1
   14084:	bl	11354 <error@plt>
   14088:	mov	r0, #0
   1408c:	b	14054 <__assert_fail@plt+0x2ab4>
   14090:	andeq	ip, r1, r8, lsl r3
   14094:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14098:	ldr	r9, [sp, #36]	; 0x24
   1409c:	ldr	r7, [sp, #40]	; 0x28
   140a0:	subs	r6, r2, #0
   140a4:	beq	1424c <__assert_fail@plt+0x2cac>
   140a8:	mov	r5, r0
   140ac:	mov	r4, r1
   140b0:	mov	r8, r3
   140b4:	ldr	r3, [pc, #624]	; 1432c <__assert_fail@plt+0x2d8c>
   140b8:	cmp	r6, r3
   140bc:	beq	1415c <__assert_fail@plt+0x2bbc>
   140c0:	add	r3, r8, r9
   140c4:	ldr	r2, [r1, #16]
   140c8:	add	r3, r3, r2
   140cc:	ldr	r2, [r0, #12]
   140d0:	cmp	r3, r2
   140d4:	bls	142a0 <__assert_fail@plt+0x2d00>
   140d8:	cmp	r7, #0
   140dc:	bne	14260 <__assert_fail@plt+0x2cc0>
   140e0:	ldr	r2, [r1]
   140e4:	ldr	r3, [r0, #28]
   140e8:	cmp	r2, r3
   140ec:	beq	14260 <__assert_fail@plt+0x2cc0>
   140f0:	ldr	r3, [r0, #24]
   140f4:	cmp	r3, #0
   140f8:	bne	14280 <__assert_fail@plt+0x2ce0>
   140fc:	ldr	r3, [r0]
   14100:	cmp	r3, #0
   14104:	beq	14120 <__assert_fail@plt+0x2b80>
   14108:	ldr	r3, [r0, #36]	; 0x24
   1410c:	cmp	r3, #0
   14110:	bne	14280 <__assert_fail@plt+0x2ce0>
   14114:	ldr	r3, [r0, #40]	; 0x28
   14118:	cmp	r3, #0
   1411c:	bne	14280 <__assert_fail@plt+0x2ce0>
   14120:	mov	r1, r4
   14124:	mov	r0, r5
   14128:	bl	144dc <__assert_fail@plt+0x2f3c>
   1412c:	ldr	r3, [r5, #40]	; 0x28
   14130:	cmp	r3, #0
   14134:	beq	1414c <__assert_fail@plt+0x2bac>
   14138:	ldr	r2, [r4]
   1413c:	ldr	r1, [r5, #28]
   14140:	sub	r2, r2, r1
   14144:	cmp	r3, r2
   14148:	beq	142b8 <__assert_fail@plt+0x2d18>
   1414c:	ldr	r2, [r4]
   14150:	ldr	r3, [r5, #16]
   14154:	cmp	r2, r3
   14158:	beq	142b8 <__assert_fail@plt+0x2d18>
   1415c:	cmp	r7, #0
   14160:	moveq	r3, #1
   14164:	streq	r3, [r4, #28]
   14168:	ldr	r1, [r4, #8]
   1416c:	ldr	r3, [r4]
   14170:	cmp	r3, r1
   14174:	bcc	14198 <__assert_fail@plt+0x2bf8>
   14178:	ldr	r0, [r4, #4]
   1417c:	cmp	r0, #0
   14180:	beq	142c8 <__assert_fail@plt+0x2d28>
   14184:	lsl	r3, r1, #1
   14188:	str	r3, [r4, #8]
   1418c:	lsl	r1, r1, #3
   14190:	bl	18fbc <__assert_fail@plt+0x7a1c>
   14194:	str	r0, [r4, #4]
   14198:	ldr	r3, [pc, #396]	; 1432c <__assert_fail@plt+0x2d8c>
   1419c:	cmp	r6, r3
   141a0:	beq	142e0 <__assert_fail@plt+0x2d40>
   141a4:	ldr	r1, [r4, #4]
   141a8:	ldr	r2, [r4]
   141ac:	add	r3, r2, #1
   141b0:	str	r3, [r4]
   141b4:	ldr	r3, [r4, #12]
   141b8:	ldr	r0, [r4, #16]
   141bc:	add	r3, r3, r0
   141c0:	str	r3, [r1, r2, lsl #2]
   141c4:	ldr	r3, [sp, #32]
   141c8:	cmp	r3, #0
   141cc:	beq	141f0 <__assert_fail@plt+0x2c50>
   141d0:	ldr	r0, [r4, #12]
   141d4:	ldr	r3, [r4, #16]
   141d8:	ldr	r1, [sp, #32]
   141dc:	add	r0, r0, r3
   141e0:	bl	11330 <strcpy@plt>
   141e4:	ldr	r3, [r4, #16]
   141e8:	add	r9, r3, r9
   141ec:	str	r9, [r4, #16]
   141f0:	ldr	r0, [r4, #12]
   141f4:	ldr	r3, [r4, #16]
   141f8:	mov	r1, r6
   141fc:	add	r0, r0, r3
   14200:	bl	11330 <strcpy@plt>
   14204:	ldr	r3, [r4, #16]
   14208:	add	r3, r3, r8
   1420c:	str	r3, [r4, #16]
   14210:	cmp	r7, #0
   14214:	bne	142fc <__assert_fail@plt+0x2d5c>
   14218:	ldr	r3, [r5, #40]	; 0x28
   1421c:	cmp	r3, #0
   14220:	beq	14238 <__assert_fail@plt+0x2c98>
   14224:	ldr	r2, [r4]
   14228:	ldr	r1, [r5, #28]
   1422c:	sub	r2, r2, r1
   14230:	cmp	r3, r2
   14234:	beq	1430c <__assert_fail@plt+0x2d6c>
   14238:	ldr	r2, [r4]
   1423c:	ldr	r3, [r5, #16]
   14240:	cmp	r2, r3
   14244:	beq	1430c <__assert_fail@plt+0x2d6c>
   14248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1424c:	ldr	r3, [pc, #220]	; 14330 <__assert_fail@plt+0x2d90>
   14250:	ldr	r2, [pc, #220]	; 14334 <__assert_fail@plt+0x2d94>
   14254:	ldr	r1, [pc, #220]	; 14338 <__assert_fail@plt+0x2d98>
   14258:	ldr	r0, [pc, #220]	; 1433c <__assert_fail@plt+0x2d9c>
   1425c:	bl	115a0 <__assert_fail@plt>
   14260:	mov	r2, #5
   14264:	ldr	r1, [pc, #212]	; 14340 <__assert_fail@plt+0x2da0>
   14268:	mov	r0, #0
   1426c:	bl	11288 <dcgettext@plt>
   14270:	mov	r2, r0
   14274:	mov	r1, #0
   14278:	mov	r0, #1
   1427c:	bl	11354 <error@plt>
   14280:	mov	r2, #5
   14284:	ldr	r1, [pc, #184]	; 14344 <__assert_fail@plt+0x2da4>
   14288:	mov	r0, #0
   1428c:	bl	11288 <dcgettext@plt>
   14290:	mov	r2, r0
   14294:	mov	r1, #0
   14298:	mov	r0, #1
   1429c:	bl	11354 <error@plt>
   142a0:	cmp	r7, #0
   142a4:	beq	1412c <__assert_fail@plt+0x2b8c>
   142a8:	ldr	r2, [r1]
   142ac:	ldr	r3, [r0, #16]
   142b0:	cmp	r2, r3
   142b4:	bne	14168 <__assert_fail@plt+0x2bc8>
   142b8:	mov	r1, r4
   142bc:	mov	r0, r5
   142c0:	bl	144dc <__assert_fail@plt+0x2f3c>
   142c4:	b	1415c <__assert_fail@plt+0x2bbc>
   142c8:	mov	r3, #64	; 0x40
   142cc:	str	r3, [r4, #8]
   142d0:	mov	r0, #256	; 0x100
   142d4:	bl	18f88 <__assert_fail@plt+0x79e8>
   142d8:	str	r0, [r4, #4]
   142dc:	b	14198 <__assert_fail@plt+0x2bf8>
   142e0:	ldr	r2, [r4, #4]
   142e4:	ldr	r3, [r4]
   142e8:	add	r1, r3, #1
   142ec:	str	r1, [r4]
   142f0:	mov	r1, #0
   142f4:	str	r1, [r2, r3, lsl #2]
   142f8:	b	14318 <__assert_fail@plt+0x2d78>
   142fc:	ldr	r2, [r4]
   14300:	ldr	r3, [r5, #16]
   14304:	cmp	r2, r3
   14308:	bne	14320 <__assert_fail@plt+0x2d80>
   1430c:	mov	r1, r4
   14310:	mov	r0, r5
   14314:	bl	144dc <__assert_fail@plt+0x2f3c>
   14318:	cmp	r7, #0
   1431c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14320:	ldr	r3, [r4, #16]
   14324:	str	r3, [r4, #20]
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1432c:	andeq	ip, r1, r0, ror r3
   14330:	ldrdeq	ip, [r1], -r0
   14334:	andeq	r0, r0, r5, asr r1
   14338:	andeq	ip, r1, r8, asr r3
   1433c:	andeq	ip, r1, r4, ror #6
   14340:	andeq	ip, r1, ip, ror r3
   14344:			; <UNDEFINED> instruction: 0x0001c3b8
   14348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1434c:	sub	sp, sp, #28
   14350:	mov	sl, r0
   14354:	str	r1, [sp, #20]
   14358:	mov	r8, r2
   1435c:	mov	r5, r3
   14360:	ldr	r0, [r0, #12]
   14364:	sub	r7, r0, #1
   14368:	ldr	r3, [pc, #356]	; 144d4 <__assert_fail@plt+0x2f34>
   1436c:	ldr	r3, [r3]
   14370:	cmp	r3, #0
   14374:	beq	14398 <__assert_fail@plt+0x2df8>
   14378:	ldr	r3, [pc, #340]	; 144d4 <__assert_fail@plt+0x2f34>
   1437c:	ldr	r3, [r3]
   14380:	str	r3, [sp, #16]
   14384:	mov	r6, r3
   14388:	ldr	r3, [sp, #76]	; 0x4c
   1438c:	ldr	r2, [sp, #68]	; 0x44
   14390:	add	fp, r3, r2
   14394:	b	143d8 <__assert_fail@plt+0x2e38>
   14398:	add	r0, r0, #1
   1439c:	bl	18f88 <__assert_fail@plt+0x79e8>
   143a0:	ldr	r3, [pc, #300]	; 144d4 <__assert_fail@plt+0x2f34>
   143a4:	str	r0, [r3]
   143a8:	b	14378 <__assert_fail@plt+0x2dd8>
   143ac:	ldr	r1, [sp, #72]	; 0x48
   143b0:	mov	r0, r6
   143b4:	bl	11330 <strcpy@plt>
   143b8:	ldr	r3, [sp, #76]	; 0x4c
   143bc:	add	r6, r6, r3
   143c0:	ldr	r5, [sl, #20]
   143c4:	add	r8, r9, r5
   143c8:	sub	r5, r4, r5
   143cc:	ldrb	r3, [r8]
   143d0:	cmp	r3, #0
   143d4:	beq	14454 <__assert_fail@plt+0x2eb4>
   143d8:	ldr	r1, [sl, #24]
   143dc:	mov	r0, r8
   143e0:	bl	16074 <__assert_fail@plt+0x4ad4>
   143e4:	subs	r9, r0, #0
   143e8:	beq	144a8 <__assert_fail@plt+0x2f08>
   143ec:	sub	r4, r9, r8
   143f0:	cmp	r7, r4
   143f4:	bls	14448 <__assert_fail@plt+0x2ea8>
   143f8:	sub	r7, r7, r4
   143fc:	mov	r2, r4
   14400:	mov	r1, r8
   14404:	mov	r0, r6
   14408:	bl	11450 <strncpy@plt>
   1440c:	add	r6, r6, r4
   14410:	sub	r4, r5, r4
   14414:	cmp	fp, r7
   14418:	bcs	14444 <__assert_fail@plt+0x2ea4>
   1441c:	sub	r7, r7, fp
   14420:	ldr	r3, [sp, #64]	; 0x40
   14424:	cmp	r3, #0
   14428:	beq	143ac <__assert_fail@plt+0x2e0c>
   1442c:	mov	r1, r3
   14430:	mov	r0, r6
   14434:	bl	11330 <strcpy@plt>
   14438:	ldr	r3, [sp, #68]	; 0x44
   1443c:	add	r6, r6, r3
   14440:	b	143ac <__assert_fail@plt+0x2e0c>
   14444:	mov	r8, r9
   14448:	ldrb	r3, [r8]
   1444c:	cmp	r3, #0
   14450:	bne	14488 <__assert_fail@plt+0x2ee8>
   14454:	mov	r3, #0
   14458:	strb	r3, [r6], #1
   1445c:	ldr	r2, [sp, #80]	; 0x50
   14460:	str	r2, [sp, #8]
   14464:	str	r3, [sp, #4]
   14468:	str	r3, [sp]
   1446c:	ldr	r2, [sp, #16]
   14470:	sub	r3, r6, r2
   14474:	ldr	r1, [sp, #20]
   14478:	mov	r0, sl
   1447c:	bl	14094 <__assert_fail@plt+0x2af4>
   14480:	add	sp, sp, #28
   14484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14488:	mov	r2, #5
   1448c:	ldr	r1, [pc, #68]	; 144d8 <__assert_fail@plt+0x2f38>
   14490:	mov	r0, #0
   14494:	bl	11288 <dcgettext@plt>
   14498:	mov	r2, r0
   1449c:	mov	r1, #0
   144a0:	mov	r0, #1
   144a4:	bl	11354 <error@plt>
   144a8:	cmp	r5, r7
   144ac:	bcs	14448 <__assert_fail@plt+0x2ea8>
   144b0:	sub	r7, r7, r5
   144b4:	mov	r2, r5
   144b8:	mov	r1, r8
   144bc:	mov	r0, r6
   144c0:	bl	11450 <strncpy@plt>
   144c4:	add	r6, r6, r5
   144c8:	add	r8, r8, r5
   144cc:	mov	r5, #0
   144d0:	b	143cc <__assert_fail@plt+0x2e2c>
   144d4:	muleq	r2, r4, r2
   144d8:	ldrdeq	ip, [r1], -r0
   144dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e0:	sub	sp, sp, #20
   144e4:	mov	r8, r0
   144e8:	mov	r7, r1
   144ec:	mov	r3, #0
   144f0:	str	r3, [sp, #8]
   144f4:	str	r3, [sp, #4]
   144f8:	str	r3, [sp]
   144fc:	ldr	r2, [pc, #672]	; 147a4 <__assert_fail@plt+0x3204>
   14500:	bl	14094 <__assert_fail@plt+0x2af4>
   14504:	ldr	r3, [r7]
   14508:	cmp	r3, #0
   1450c:	beq	14544 <__assert_fail@plt+0x2fa4>
   14510:	sub	r3, r3, #-1073741823	; 0xc0000001
   14514:	lsl	r0, r3, #2
   14518:	ldr	r2, [r7, #4]
   1451c:	ldr	r3, [r2, r3, lsl #2]
   14520:	cmp	r3, #0
   14524:	bne	14558 <__assert_fail@plt+0x2fb8>
   14528:	add	r0, r0, #8
   1452c:	bl	18f88 <__assert_fail@plt+0x79e8>
   14530:	mov	r9, r0
   14534:	ldr	r5, [r7]
   14538:	mov	r6, #0
   1453c:	mov	sl, r6
   14540:	b	14654 <__assert_fail@plt+0x30b4>
   14544:	ldr	r3, [pc, #604]	; 147a8 <__assert_fail@plt+0x3208>
   14548:	ldr	r2, [pc, #604]	; 147ac <__assert_fail@plt+0x320c>
   1454c:	ldr	r1, [pc, #604]	; 147b0 <__assert_fail@plt+0x3210>
   14550:	ldr	r0, [pc, #604]	; 147b4 <__assert_fail@plt+0x3214>
   14554:	bl	115a0 <__assert_fail@plt>
   14558:	ldr	r3, [pc, #584]	; 147a8 <__assert_fail@plt+0x3208>
   1455c:	ldr	r2, [pc, #596]	; 147b8 <__assert_fail@plt+0x3218>
   14560:	ldr	r1, [pc, #584]	; 147b0 <__assert_fail@plt+0x3210>
   14564:	ldr	r0, [pc, #592]	; 147bc <__assert_fail@plt+0x321c>
   14568:	bl	115a0 <__assert_fail@plt>
   1456c:	ldr	r3, [pc, #588]	; 147c0 <__assert_fail@plt+0x3220>
   14570:	mov	r2, #242	; 0xf2
   14574:	ldr	r1, [pc, #564]	; 147b0 <__assert_fail@plt+0x3210>
   14578:	ldr	r0, [pc, #580]	; 147c4 <__assert_fail@plt+0x3224>
   1457c:	bl	115a0 <__assert_fail@plt>
   14580:	mov	r4, r0
   14584:	b	146e4 <__assert_fail@plt+0x3144>
   14588:	ldr	r3, [r7, #36]	; 0x24
   1458c:	cmp	r5, r3
   14590:	strhi	r5, [r7, #36]	; 0x24
   14594:	ldr	r3, [r7, #36]	; 0x24
   14598:	cmp	r3, #0
   1459c:	beq	145ac <__assert_fail@plt+0x300c>
   145a0:	ldr	r2, [r7, #40]	; 0x28
   145a4:	cmp	r3, r2
   145a8:	bcc	145e4 <__assert_fail@plt+0x3044>
   145ac:	cmn	r5, #1
   145b0:	addne	r5, r5, #1
   145b4:	beq	14794 <__assert_fail@plt+0x31f4>
   145b8:	ldr	r3, [r8, #28]
   145bc:	cmp	r3, #0
   145c0:	beq	145d0 <__assert_fail@plt+0x3030>
   145c4:	add	r2, r3, #1
   145c8:	cmp	r5, r2
   145cc:	movcc	r5, r2
   145d0:	cmp	r5, #0
   145d4:	moveq	r5, #1
   145d8:	add	r6, r6, r4
   145dc:	sub	r6, r6, r3
   145e0:	b	1463c <__assert_fail@plt+0x309c>
   145e4:	sub	r3, r2, r3
   145e8:	lsrs	r3, r3, #1
   145ec:	addne	r5, r5, r3
   145f0:	addeq	r5, r5, #1
   145f4:	b	145b8 <__assert_fail@plt+0x3018>
   145f8:	mov	r2, #5
   145fc:	ldr	r1, [pc, #452]	; 147c8 <__assert_fail@plt+0x3228>
   14600:	mov	r0, #0
   14604:	bl	11288 <dcgettext@plt>
   14608:	mov	r2, r0
   1460c:	mov	r1, #0
   14610:	mov	r0, #1
   14614:	bl	11354 <error@plt>
   14618:	lsr	r5, r5, #1
   1461c:	ldr	r3, [r8, #28]
   14620:	cmp	r3, #0
   14624:	beq	14634 <__assert_fail@plt+0x3094>
   14628:	add	r3, r3, #1
   1462c:	cmp	r5, r3
   14630:	movcc	r5, r3
   14634:	cmp	r5, #0
   14638:	moveq	r5, #1
   1463c:	add	r2, r6, #1
   14640:	ldr	r3, [r7]
   14644:	ldr	r1, [r8, #28]
   14648:	sub	r3, r3, r1
   1464c:	cmp	r2, r3
   14650:	bcs	14764 <__assert_fail@plt+0x31c4>
   14654:	ldr	r0, [r8, #28]
   14658:	cmp	r0, #0
   1465c:	beq	1467c <__assert_fail@plt+0x30dc>
   14660:	ldr	r3, [r7, #4]
   14664:	sub	r2, r9, #4
   14668:	add	ip, r3, r0, lsl #2
   1466c:	ldr	r1, [r3], #4
   14670:	str	r1, [r2, #4]!
   14674:	cmp	r3, ip
   14678:	bne	1466c <__assert_fail@plt+0x30cc>
   1467c:	add	r3, r6, r0
   14680:	ldr	ip, [r7]
   14684:	cmp	r5, r0
   14688:	movls	r2, #0
   1468c:	movhi	r2, #1
   14690:	cmp	r3, ip
   14694:	movcs	r2, #0
   14698:	cmp	r2, #0
   1469c:	beq	14580 <__assert_fail@plt+0x2fe0>
   146a0:	ldr	r2, [r7, #4]
   146a4:	add	r2, r2, r3, lsl #2
   146a8:	add	r1, r9, r0, lsl #2
   146ac:	mov	r4, r0
   146b0:	add	r4, r4, #1
   146b4:	ldr	r3, [r2], #4
   146b8:	str	r3, [r1], #4
   146bc:	add	r3, r6, r4
   146c0:	cmp	r3, ip
   146c4:	movcs	r3, #0
   146c8:	movcc	r3, #1
   146cc:	cmp	r5, r4
   146d0:	movls	r3, #0
   146d4:	cmp	r3, #0
   146d8:	bne	146b0 <__assert_fail@plt+0x3110>
   146dc:	cmp	r0, r4
   146e0:	bhi	1456c <__assert_fail@plt+0x2fcc>
   146e4:	str	sl, [r9, r4, lsl #2]
   146e8:	ldr	fp, [r8, #32]
   146ec:	mov	r3, r9
   146f0:	mov	r2, r4
   146f4:	ldr	r1, [r7, #24]
   146f8:	mov	r0, r8
   146fc:	blx	fp
   14700:	cmp	r0, #0
   14704:	bne	14588 <__assert_fail@plt+0x2fe8>
   14708:	ldr	r3, [r8, #28]
   1470c:	add	r3, r3, #1
   14710:	cmp	r5, r3
   14714:	bls	145f8 <__assert_fail@plt+0x3058>
   14718:	ldr	r2, [r7, #40]	; 0x28
   1471c:	cmp	r5, r2
   14720:	movcs	r3, #0
   14724:	movcc	r3, #1
   14728:	cmp	r2, #0
   1472c:	orreq	r3, r3, #1
   14730:	cmp	r3, #0
   14734:	strne	r5, [r7, #40]	; 0x28
   14738:	ldr	r3, [r7, #36]	; 0x24
   1473c:	cmp	r3, #0
   14740:	beq	14618 <__assert_fail@plt+0x3078>
   14744:	ldr	r2, [r7, #40]	; 0x28
   14748:	cmp	r3, r2
   1474c:	bcs	14618 <__assert_fail@plt+0x3078>
   14750:	sub	r3, r2, r3
   14754:	lsrs	r3, r3, #1
   14758:	subne	r5, r5, r3
   1475c:	subeq	r5, r5, #1
   14760:	b	1461c <__assert_fail@plt+0x307c>
   14764:	mov	r0, r9
   14768:	bl	19dd4 <__assert_fail@plt+0x8834>
   1476c:	ldr	r3, [r8, #28]
   14770:	str	r3, [r7]
   14774:	ldr	r3, [r7, #20]
   14778:	str	r3, [r7, #16]
   1477c:	mov	r3, #0
   14780:	str	r3, [r7, #28]
   14784:	mvn	r3, #0
   14788:	str	r3, [r7, #32]
   1478c:	add	sp, sp, #20
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14794:	ldr	r3, [r8, #28]
   14798:	cmp	r3, #0
   1479c:	bne	145c4 <__assert_fail@plt+0x3024>
   147a0:	b	145d8 <__assert_fail@plt+0x3038>
   147a4:	andeq	ip, r1, r0, ror r3
   147a8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   147ac:	andeq	r0, r0, r5, lsl #2
   147b0:	andeq	ip, r1, r8, asr r3
   147b4:	andeq	ip, r1, r4, ror #7
   147b8:	andeq	r0, r0, r6, lsl #2
   147bc:	strdeq	ip, [r1], -r8
   147c0:	andeq	ip, r1, r8, ror #5
   147c4:	andeq	ip, r1, r4, lsr #8
   147c8:	andeq	ip, r1, r4, asr #8
   147cc:	push	{r4, lr}
   147d0:	mov	r0, #0
   147d4:	bl	11294 <sysconf@plt>
   147d8:	cmp	r0, #0
   147dc:	mvnle	r0, #-2147483648	; 0x80000000
   147e0:	pop	{r4, pc}
   147e4:	push	{r4, r5, r6, lr}
   147e8:	ldr	r3, [pc, #56]	; 14828 <__assert_fail@plt+0x3288>
   147ec:	ldr	r4, [r3]
   147f0:	ldr	r0, [r4]
   147f4:	cmp	r0, #0
   147f8:	beq	14820 <__assert_fail@plt+0x3280>
   147fc:	mov	r5, #0
   14800:	bl	113f0 <strlen@plt>
   14804:	add	r0, r0, #1
   14808:	add	r5, r5, r0
   1480c:	ldr	r0, [r4, #4]!
   14810:	cmp	r0, #0
   14814:	bne	14800 <__assert_fail@plt+0x3260>
   14818:	mov	r0, r5
   1481c:	pop	{r4, r5, r6, pc}
   14820:	mov	r5, #0
   14824:	b	14818 <__assert_fail@plt+0x3278>
   14828:			; <UNDEFINED> instruction: 0x0002d1bc
   1482c:	push	{r4, r5, r6, lr}
   14830:	mov	r4, r0
   14834:	mov	r6, r1
   14838:	bl	147e4 <__assert_fail@plt+0x3244>
   1483c:	mov	r5, r0
   14840:	mov	r3, #4096	; 0x1000
   14844:	str	r3, [r4, #8]
   14848:	bl	147cc <__assert_fail@plt+0x322c>
   1484c:	str	r0, [r4, #4]
   14850:	mov	r3, #0
   14854:	str	r3, [r4]
   14858:	cmp	r5, r0
   1485c:	bhi	148d0 <__assert_fail@plt+0x3330>
   14860:	add	r3, r5, r6
   14864:	cmp	r0, r3
   14868:	bhi	14874 <__assert_fail@plt+0x32d4>
   1486c:	mov	r0, #2
   14870:	pop	{r4, r5, r6, pc}
   14874:	sub	r0, r0, r5
   14878:	sub	r1, r0, r6
   1487c:	str	r1, [r4, #4]
   14880:	lsr	r3, r1, #2
   14884:	sub	r3, r3, #2
   14888:	str	r3, [r4, #16]
   1488c:	cmp	r3, #0
   14890:	beq	148bc <__assert_fail@plt+0x331c>
   14894:	mov	r0, #0
   14898:	str	r0, [r4, #20]
   1489c:	str	r0, [r4, #24]
   148a0:	str	r0, [r4, #28]
   148a4:	ldr	r3, [pc, #44]	; 148d8 <__assert_fail@plt+0x3338>
   148a8:	str	r3, [r4, #32]
   148ac:	str	r0, [r4, #36]	; 0x24
   148b0:	str	r0, [r4, #40]	; 0x28
   148b4:	str	r1, [r4, #12]
   148b8:	pop	{r4, r5, r6, pc}
   148bc:	ldr	r3, [pc, #24]	; 148dc <__assert_fail@plt+0x333c>
   148c0:	ldr	r2, [pc, #24]	; 148e0 <__assert_fail@plt+0x3340>
   148c4:	ldr	r1, [pc, #24]	; 148e4 <__assert_fail@plt+0x3344>
   148c8:	ldr	r0, [pc, #24]	; 148e8 <__assert_fail@plt+0x3348>
   148cc:	bl	115a0 <__assert_fail@plt>
   148d0:	mov	r0, #1
   148d4:	pop	{r4, r5, r6, pc}
   148d8:	andeq	r4, r1, r0
   148dc:	strdeq	ip, [r1], -r4
   148e0:	andeq	r0, r0, r6, lsl #4
   148e4:	andeq	ip, r1, r8, asr r3
   148e8:	andeq	ip, r1, r8, ror r4
   148ec:	ldr	r3, [r0, #4]
   148f0:	cmp	r3, #131072	; 0x20000
   148f4:	bcc	1490c <__assert_fail@plt+0x336c>
   148f8:	ldr	r3, [r0, #8]
   148fc:	cmp	r3, #131072	; 0x20000
   14900:	movls	r3, #131072	; 0x20000
   14904:	str	r3, [r0, #12]
   14908:	bx	lr
   1490c:	str	r3, [r0, #12]
   14910:	bx	lr
   14914:	push	{r4, r5, r6, lr}
   14918:	mov	r3, #0
   1491c:	str	r3, [r1]
   14920:	str	r3, [r1, #16]
   14924:	str	r3, [r1, #4]
   14928:	str	r3, [r1, #8]
   1492c:	str	r3, [r1, #36]	; 0x24
   14930:	str	r3, [r1, #40]	; 0x28
   14934:	ldr	r0, [r0, #12]
   14938:	ldr	r3, [pc, #76]	; 1498c <__assert_fail@plt+0x33ec>
   1493c:	cmp	r0, r3
   14940:	bhi	14978 <__assert_fail@plt+0x33d8>
   14944:	mov	r4, r1
   14948:	mov	r5, r2
   1494c:	add	r0, r0, #1
   14950:	bl	18f88 <__assert_fail@plt+0x79e8>
   14954:	str	r0, [r4, #12]
   14958:	mov	r3, #0
   1495c:	str	r3, [r4, #20]
   14960:	str	r3, [r4, #16]
   14964:	str	r3, [r4, #28]
   14968:	mvn	r3, #0
   1496c:	str	r3, [r4, #32]
   14970:	str	r5, [r4, #24]
   14974:	pop	{r4, r5, r6, pc}
   14978:	ldr	r3, [pc, #16]	; 14990 <__assert_fail@plt+0x33f0>
   1497c:	mov	r2, #572	; 0x23c
   14980:	ldr	r1, [pc, #12]	; 14994 <__assert_fail@plt+0x33f4>
   14984:	ldr	r0, [pc, #12]	; 14998 <__assert_fail@plt+0x33f8>
   14988:	bl	115a0 <__assert_fail@plt>
   1498c:	svcvc	0x00fff7ff
   14990:	andeq	ip, r1, r8, lsl #6
   14994:	andeq	ip, r1, r8, asr r3
   14998:	muleq	r1, r0, r4
   1499c:	ldr	r3, [r0, #28]
   149a0:	str	r3, [r1]
   149a4:	ldr	r3, [r1, #20]
   149a8:	str	r3, [r1, #16]
   149ac:	mov	r3, #0
   149b0:	str	r3, [r1, #28]
   149b4:	mvn	r3, #0
   149b8:	str	r3, [r1, #32]
   149bc:	bx	lr
   149c0:	push	{r4, r5, r6, lr}
   149c4:	mov	r5, r0
   149c8:	ldr	r0, [r0]
   149cc:	cmp	r0, #0
   149d0:	beq	14a10 <__assert_fail@plt+0x3470>
   149d4:	mov	r4, #0
   149d8:	mov	r6, r4
   149dc:	add	r4, r4, #1
   149e0:	bl	113f0 <strlen@plt>
   149e4:	add	r6, r6, r0
   149e8:	ldr	r0, [r5, #4]!
   149ec:	cmp	r0, #0
   149f0:	bne	149dc <__assert_fail@plt+0x343c>
   149f4:	mov	r1, r4
   149f8:	ldr	r0, [pc, #52]	; 14a34 <__assert_fail@plt+0x3494>
   149fc:	bl	14008 <__assert_fail@plt+0x2a68>
   14a00:	cmp	r0, #0
   14a04:	beq	14a1c <__assert_fail@plt+0x347c>
   14a08:	mov	r0, #1
   14a0c:	pop	{r4, r5, r6, pc}
   14a10:	mov	r4, #0
   14a14:	mov	r6, r4
   14a18:	b	149f4 <__assert_fail@plt+0x3454>
   14a1c:	mov	r1, r6
   14a20:	ldr	r0, [pc, #16]	; 14a38 <__assert_fail@plt+0x3498>
   14a24:	bl	14008 <__assert_fail@plt+0x2a68>
   14a28:	adds	r0, r0, #0
   14a2c:	movne	r0, #1
   14a30:	pop	{r4, r5, r6, pc}
   14a34:			; <UNDEFINED> instruction: 0x0001c4b4
   14a38:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14a3c:	push	{r4, r5, r6, lr}
   14a40:	mov	r6, r0
   14a44:	mov	r4, r1
   14a48:	mov	r1, #1
   14a4c:	bl	19ad8 <__assert_fail@plt+0x8538>
   14a50:	ands	r5, r0, #1
   14a54:	movne	r5, #0
   14a58:	beq	14a64 <__assert_fail@plt+0x34c4>
   14a5c:	mov	r0, r5
   14a60:	pop	{r4, r5, r6, pc}
   14a64:	ldr	r1, [r4, #4]
   14a68:	add	r1, r1, #1
   14a6c:	add	r2, r4, #8
   14a70:	lsl	r1, r1, #2
   14a74:	ldr	r0, [r4]
   14a78:	bl	15190 <__assert_fail@plt+0x3bf0>
   14a7c:	cmp	r0, #0
   14a80:	strne	r0, [r4]
   14a84:	ldrne	r3, [r4, #4]
   14a88:	strne	r6, [r0, r3, lsl #2]
   14a8c:	ldrne	r3, [r4, #4]
   14a90:	addne	r3, r3, #1
   14a94:	strne	r3, [r4, #4]
   14a98:	mvneq	r5, #0
   14a9c:	b	14a5c <__assert_fail@plt+0x34bc>
   14aa0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14aa4:	sub	sp, sp, #20
   14aa8:	ldr	r0, [pc, #280]	; 14bc8 <__assert_fail@plt+0x3628>
   14aac:	bl	15574 <__assert_fail@plt+0x3fd4>
   14ab0:	subs	r7, r0, #0
   14ab4:	beq	14b30 <__assert_fail@plt+0x3590>
   14ab8:	bl	11420 <__errno_location@plt>
   14abc:	mov	r6, r0
   14ac0:	mov	r8, #0
   14ac4:	mvn	r4, #0
   14ac8:	mov	r5, r8
   14acc:	mov	r9, #1
   14ad0:	b	14b8c <__assert_fail@plt+0x35ec>
   14ad4:	ldr	r5, [r6]
   14ad8:	cmp	r5, #0
   14adc:	bne	14b04 <__assert_fail@plt+0x3564>
   14ae0:	mov	r0, r7
   14ae4:	bl	11594 <closedir@plt>
   14ae8:	cmp	r8, #0
   14aec:	beq	14b30 <__assert_fail@plt+0x3590>
   14af0:	cmp	r4, #0
   14af4:	blt	14b30 <__assert_fail@plt+0x3590>
   14af8:	mov	r0, r4
   14afc:	add	sp, sp, #20
   14b00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14b04:	ldr	r2, [pc, #188]	; 14bc8 <__assert_fail@plt+0x3628>
   14b08:	mov	r1, #8
   14b0c:	mov	r0, #0
   14b10:	bl	1867c <__assert_fail@plt+0x70dc>
   14b14:	mov	r3, r0
   14b18:	ldr	r2, [pc, #172]	; 14bcc <__assert_fail@plt+0x362c>
   14b1c:	mov	r1, r5
   14b20:	mov	r0, #0
   14b24:	bl	11354 <error@plt>
   14b28:	mov	r0, r7
   14b2c:	bl	11594 <closedir@plt>
   14b30:	mov	r0, #4
   14b34:	bl	11294 <sysconf@plt>
   14b38:	mov	r4, r0
   14b3c:	cmn	r0, #1
   14b40:	moveq	r4, #20
   14b44:	mov	r1, sp
   14b48:	mov	r0, #7
   14b4c:	bl	112ac <getrlimit64@plt>
   14b50:	cmp	r0, #0
   14b54:	bne	14af8 <__assert_fail@plt+0x3558>
   14b58:	ldrd	r2, [sp]
   14b5c:	mvn	r0, #0
   14b60:	mvn	r1, #0
   14b64:	cmp	r3, r1
   14b68:	cmpeq	r2, r0
   14b6c:	movne	r4, r2
   14b70:	b	14af8 <__assert_fail@plt+0x3558>
   14b74:	mov	r1, r5
   14b78:	add	r0, r0, #19
   14b7c:	bl	15004 <__assert_fail@plt+0x3a64>
   14b80:	cmp	r4, r0
   14b84:	movlt	r4, r0
   14b88:	mov	r8, r9
   14b8c:	str	r5, [r6]
   14b90:	mov	r0, r7
   14b94:	bl	11504 <readdir64@plt>
   14b98:	cmp	r0, #0
   14b9c:	beq	14ad4 <__assert_fail@plt+0x3534>
   14ba0:	ldrb	r3, [r0, #19]
   14ba4:	cmp	r3, #46	; 0x2e
   14ba8:	bne	14b74 <__assert_fail@plt+0x35d4>
   14bac:	ldrb	r3, [r0, #20]
   14bb0:	cmp	r3, #0
   14bb4:	beq	14b8c <__assert_fail@plt+0x35ec>
   14bb8:	ldrh	r3, [r0, #20]
   14bbc:	cmp	r3, #46	; 0x2e
   14bc0:	bne	14b74 <__assert_fail@plt+0x35d4>
   14bc4:	b	14b8c <__assert_fail@plt+0x35ec>
   14bc8:	andeq	ip, r1, r0, lsr #10
   14bcc:	andeq	ip, r1, r4, lsl r8
   14bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bd4:	sub	sp, sp, #524	; 0x20c
   14bd8:	str	r3, [sp, #4]
   14bdc:	cmp	r0, r1
   14be0:	bge	14c40 <__assert_fail@plt+0x36a0>
   14be4:	mov	sl, r0
   14be8:	mov	fp, r1
   14bec:	mov	r9, r2
   14bf0:	mov	r5, #5
   14bf4:	mov	r4, #0
   14bf8:	b	14c6c <__assert_fail@plt+0x36cc>
   14bfc:	add	r6, r6, #1
   14c00:	add	r7, r7, #8
   14c04:	cmp	r8, r6
   14c08:	beq	14c60 <__assert_fail@plt+0x36c0>
   14c0c:	ldrsh	r3, [r7, #6]
   14c10:	cmp	r3, #32
   14c14:	beq	14bfc <__assert_fail@plt+0x365c>
   14c18:	ldr	r1, [sp, #4]
   14c1c:	add	r3, sp, #8
   14c20:	ldr	r0, [r3, r6, lsl #3]
   14c24:	blx	r9
   14c28:	cmp	r0, #0
   14c2c:	beq	14bfc <__assert_fail@plt+0x365c>
   14c30:	add	sp, sp, #524	; 0x20c
   14c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c38:	mov	r0, #0
   14c3c:	b	14c30 <__assert_fail@plt+0x3690>
   14c40:	mov	r0, #0
   14c44:	b	14c30 <__assert_fail@plt+0x3690>
   14c48:	mov	r2, r4
   14c4c:	mov	r1, r8
   14c50:	add	r0, sp, #8
   14c54:	bl	112e8 <poll@plt>
   14c58:	cmn	r0, #1
   14c5c:	beq	14c30 <__assert_fail@plt+0x3690>
   14c60:	add	sl, sl, r8
   14c64:	cmp	fp, sl
   14c68:	ble	14c38 <__assert_fail@plt+0x3698>
   14c6c:	sub	r8, fp, sl
   14c70:	cmp	r8, #64	; 0x40
   14c74:	movge	r8, #64	; 0x40
   14c78:	cmp	r8, #0
   14c7c:	ble	14c48 <__assert_fail@plt+0x36a8>
   14c80:	add	r7, sp, #8
   14c84:	mov	r2, sl
   14c88:	add	r1, r7, r8, lsl #3
   14c8c:	mov	r3, r7
   14c90:	strh	r5, [r3, #4]
   14c94:	strh	r4, [r3, #6]
   14c98:	str	r2, [r3], #8
   14c9c:	add	r2, r2, #1
   14ca0:	cmp	r3, r1
   14ca4:	bne	14c90 <__assert_fail@plt+0x36f0>
   14ca8:	mov	r2, r4
   14cac:	mov	r1, r8
   14cb0:	add	r0, sp, #8
   14cb4:	bl	112e8 <poll@plt>
   14cb8:	cmn	r0, #1
   14cbc:	beq	14c30 <__assert_fail@plt+0x3690>
   14cc0:	mov	r6, #0
   14cc4:	b	14c0c <__assert_fail@plt+0x366c>
   14cc8:	push	{r4, r5, r6, lr}
   14ccc:	mov	r5, r0
   14cd0:	mov	r4, r1
   14cd4:	mov	r1, #1
   14cd8:	bl	19ad8 <__assert_fail@plt+0x8538>
   14cdc:	ands	r0, r0, #1
   14ce0:	bne	14d3c <__assert_fail@plt+0x379c>
   14ce4:	ldr	r3, [r4, #8]
   14ce8:	ldr	ip, [r4, #4]
   14cec:	cmp	ip, r3
   14cf0:	bls	14d30 <__assert_fail@plt+0x3790>
   14cf4:	ldr	r1, [r4]
   14cf8:	add	r2, r1, r3, lsl #2
   14cfc:	ldr	r1, [r1, r3, lsl #2]
   14d00:	cmp	r5, r1
   14d04:	ble	14d28 <__assert_fail@plt+0x3788>
   14d08:	add	r3, r3, #1
   14d0c:	str	r3, [r4, #8]
   14d10:	cmp	ip, r3
   14d14:	beq	14d30 <__assert_fail@plt+0x3790>
   14d18:	ldr	r1, [r2, #4]!
   14d1c:	add	r3, r3, #1
   14d20:	cmp	r5, r1
   14d24:	bgt	14d0c <__assert_fail@plt+0x376c>
   14d28:	cmp	r5, r1
   14d2c:	popeq	{r4, r5, r6, pc}
   14d30:	str	r5, [r4, #12]
   14d34:	mvn	r0, #0
   14d38:	pop	{r4, r5, r6, pc}
   14d3c:	mov	r0, #0
   14d40:	pop	{r4, r5, r6, pc}
   14d44:	push	{lr}		; (str lr, [sp, #-4]!)
   14d48:	sub	sp, sp, #20
   14d4c:	bl	14aa0 <__assert_fail@plt+0x3500>
   14d50:	mov	r1, r0
   14d54:	mov	r3, #0
   14d58:	str	r3, [sp, #4]
   14d5c:	str	r3, [sp, #12]
   14d60:	str	r3, [sp, #8]
   14d64:	cmn	r0, #-2147483647	; 0x80000001
   14d68:	addne	r1, r0, #1
   14d6c:	add	r3, sp, #4
   14d70:	ldr	r2, [pc, #32]	; 14d98 <__assert_fail@plt+0x37f8>
   14d74:	mov	r0, #0
   14d78:	bl	14bd0 <__assert_fail@plt+0x3630>
   14d7c:	ldr	r3, [pc, #24]	; 14d9c <__assert_fail@plt+0x37fc>
   14d80:	ldr	r2, [sp, #4]
   14d84:	str	r2, [r3]
   14d88:	ldr	r2, [sp, #8]
   14d8c:	str	r2, [r3, #4]
   14d90:	add	sp, sp, #20
   14d94:	pop	{pc}		; (ldr pc, [sp], #4)
   14d98:	andeq	r4, r1, ip, lsr sl
   14d9c:	muleq	r2, r8, r2
   14da0:	push	{r1, r2, r3}
   14da4:	push	{r4, r5, r6, r7, r8, lr}
   14da8:	sub	sp, sp, #12
   14dac:	mov	r6, r0
   14db0:	ldr	r4, [sp, #36]	; 0x24
   14db4:	tst	r4, #64	; 0x40
   14db8:	addne	r3, sp, #44	; 0x2c
   14dbc:	strne	r3, [sp, #4]
   14dc0:	ldrne	r7, [sp, #40]	; 0x28
   14dc4:	moveq	r7, #0
   14dc8:	ldr	r3, [pc, #148]	; 14e64 <__assert_fail@plt+0x38c4>
   14dcc:	ldrb	r5, [r3, #8]
   14dd0:	cmp	r5, #0
   14dd4:	beq	14e14 <__assert_fail@plt+0x3874>
   14dd8:	mov	r2, r7
   14ddc:	orr	r1, r4, #524288	; 0x80000
   14de0:	mov	r0, r6
   14de4:	bl	15604 <__assert_fail@plt+0x4064>
   14de8:	subs	r4, r0, #0
   14dec:	blt	14e00 <__assert_fail@plt+0x3860>
   14df0:	ldr	r3, [pc, #108]	; 14e64 <__assert_fail@plt+0x38c4>
   14df4:	ldrb	r3, [r3, #9]
   14df8:	cmp	r3, #0
   14dfc:	beq	14e54 <__assert_fail@plt+0x38b4>
   14e00:	mov	r0, r4
   14e04:	add	sp, sp, #12
   14e08:	pop	{r4, r5, r6, r7, r8, lr}
   14e0c:	add	sp, sp, #12
   14e10:	bx	lr
   14e14:	mov	r1, #524288	; 0x80000
   14e18:	ldr	r0, [pc, #72]	; 14e68 <__assert_fail@plt+0x38c8>
   14e1c:	bl	15604 <__assert_fail@plt+0x4064>
   14e20:	subs	r8, r0, #0
   14e24:	blt	14e40 <__assert_fail@plt+0x38a0>
   14e28:	mov	r1, #1
   14e2c:	mov	r0, r8
   14e30:	bl	19ad8 <__assert_fail@plt+0x8538>
   14e34:	and	r5, r0, #1
   14e38:	mov	r0, r8
   14e3c:	bl	11588 <close@plt>
   14e40:	ldr	r3, [pc, #28]	; 14e64 <__assert_fail@plt+0x38c4>
   14e44:	strb	r5, [r3, #9]
   14e48:	mov	r2, #1
   14e4c:	strb	r2, [r3, #8]
   14e50:	b	14dd8 <__assert_fail@plt+0x3838>
   14e54:	mov	r1, #1
   14e58:	mov	r0, r4
   14e5c:	bl	152bc <__assert_fail@plt+0x3d1c>
   14e60:	b	14e00 <__assert_fail@plt+0x3860>
   14e64:	muleq	r2, r8, r2
   14e68:	andeq	ip, r1, r0, lsr r5
   14e6c:	push	{r4, lr}
   14e70:	ldr	r4, [pc, #20]	; 14e8c <__assert_fail@plt+0x38ec>
   14e74:	ldr	r0, [r4]
   14e78:	bl	19dd4 <__assert_fail@plt+0x8834>
   14e7c:	mov	r3, #0
   14e80:	str	r3, [r4]
   14e84:	str	r3, [r4, #4]
   14e88:	pop	{r4, pc}
   14e8c:	muleq	r2, r8, r2
   14e90:	push	{r4, lr}
   14e94:	ldr	r0, [pc, #12]	; 14ea8 <__assert_fail@plt+0x3908>
   14e98:	bl	11378 <getenv@plt>
   14e9c:	adds	r0, r0, #0
   14ea0:	movne	r0, #1
   14ea4:	pop	{r4, pc}
   14ea8:	andeq	ip, r1, r4, lsr r5
   14eac:	push	{r4, r5, lr}
   14eb0:	sub	sp, sp, #20
   14eb4:	ldr	r3, [pc, #132]	; 14f40 <__assert_fail@plt+0x39a0>
   14eb8:	ldr	r5, [r3]
   14ebc:	ldr	r4, [r3, #4]
   14ec0:	bl	14aa0 <__assert_fail@plt+0x3500>
   14ec4:	mov	r1, r0
   14ec8:	cmn	r0, #-2147483647	; 0x80000001
   14ecc:	addne	r1, r0, #1
   14ed0:	str	r5, [sp]
   14ed4:	str	r4, [sp, #4]
   14ed8:	mov	r0, #0
   14edc:	str	r0, [sp, #8]
   14ee0:	mvn	r3, #0
   14ee4:	str	r3, [sp, #12]
   14ee8:	mov	r3, sp
   14eec:	ldr	r2, [pc, #80]	; 14f44 <__assert_fail@plt+0x39a4>
   14ef0:	bl	14bd0 <__assert_fail@plt+0x3630>
   14ef4:	ldr	r4, [sp, #12]
   14ef8:	cmp	r4, #0
   14efc:	blt	14f38 <__assert_fail@plt+0x3998>
   14f00:	mov	r2, #5
   14f04:	ldr	r1, [pc, #60]	; 14f48 <__assert_fail@plt+0x39a8>
   14f08:	mov	r0, #0
   14f0c:	bl	11288 <dcgettext@plt>
   14f10:	mov	r3, r4
   14f14:	mov	r2, r0
   14f18:	mov	r1, #0
   14f1c:	mov	r0, r1
   14f20:	bl	11354 <error@plt>
   14f24:	ldr	r3, [pc, #32]	; 14f4c <__assert_fail@plt+0x39ac>
   14f28:	mov	r2, #396	; 0x18c
   14f2c:	ldr	r1, [pc, #28]	; 14f50 <__assert_fail@plt+0x39b0>
   14f30:	ldr	r0, [pc, #28]	; 14f54 <__assert_fail@plt+0x39b4>
   14f34:	bl	115a0 <__assert_fail@plt>
   14f38:	add	sp, sp, #20
   14f3c:	pop	{r4, r5, pc}
   14f40:	muleq	r2, r8, r2
   14f44:	andeq	r4, r1, r8, asr #25
   14f48:	andeq	ip, r1, r0, asr r5
   14f4c:	andeq	ip, r1, r4, lsl #10
   14f50:	andeq	ip, r1, r8, ror #11
   14f54:	strdeq	ip, [r1], -r4
   14f58:	push	{r4, r5, r6, r7, r8, lr}
   14f5c:	sub	sp, sp, #16
   14f60:	mov	r5, r0
   14f64:	ldr	r3, [pc, #124]	; 14fe8 <__assert_fail@plt+0x3a48>
   14f68:	ldr	r0, [r3]
   14f6c:	bl	19d30 <__assert_fail@plt+0x8790>
   14f70:	ldr	r3, [pc, #116]	; 14fec <__assert_fail@plt+0x3a4c>
   14f74:	ldr	r4, [r3]
   14f78:	ldr	r3, [pc, #112]	; 14ff0 <__assert_fail@plt+0x3a50>
   14f7c:	ldr	r6, [r3]
   14f80:	mov	r2, #5
   14f84:	ldr	r1, [pc, #104]	; 14ff4 <__assert_fail@plt+0x3a54>
   14f88:	mov	r0, #0
   14f8c:	bl	11288 <dcgettext@plt>
   14f90:	mov	r7, r0
   14f94:	mov	r2, #5
   14f98:	ldr	r1, [pc, #88]	; 14ff8 <__assert_fail@plt+0x3a58>
   14f9c:	mov	r0, #0
   14fa0:	bl	11288 <dcgettext@plt>
   14fa4:	mov	r8, r0
   14fa8:	mov	r2, #5
   14fac:	ldr	r1, [pc, #72]	; 14ffc <__assert_fail@plt+0x3a5c>
   14fb0:	mov	r0, #0
   14fb4:	bl	11288 <dcgettext@plt>
   14fb8:	mov	r3, #0
   14fbc:	str	r3, [sp, #12]
   14fc0:	str	r0, [sp, #8]
   14fc4:	str	r8, [sp, #4]
   14fc8:	str	r7, [sp]
   14fcc:	mov	r3, r6
   14fd0:	ldr	r2, [pc, #40]	; 15000 <__assert_fail@plt+0x3a60>
   14fd4:	mov	r1, r5
   14fd8:	mov	r0, r4
   14fdc:	bl	18ed4 <__assert_fail@plt+0x7934>
   14fe0:	add	sp, sp, #16
   14fe4:	pop	{r4, r5, r6, r7, r8, pc}
   14fe8:	ldrdeq	sp, [r2], -r0
   14fec:	ldrdeq	sp, [r2], -ip
   14ff0:	andeq	sp, r2, r0, ror r1
   14ff4:	andeq	ip, r1, r0, lsl #12
   14ff8:	andeq	ip, r1, r0, lsl r6
   14ffc:	andeq	ip, r1, r0, lsr #12
   15000:	andeq	ip, r1, r0, lsr r6
   15004:	push	{r4, r5, r6, r7, r8, lr}
   15008:	sub	sp, sp, #16
   1500c:	mov	r4, r0
   15010:	mov	r6, r1
   15014:	bl	11420 <__errno_location@plt>
   15018:	mov	r5, r0
   1501c:	mov	r3, #0
   15020:	str	r3, [r0]
   15024:	mov	r2, #10
   15028:	add	r1, sp, #12
   1502c:	mov	r0, r4
   15030:	bl	111ec <strtol@plt>
   15034:	sub	r3, r0, #-2147483647	; 0x80000001
   15038:	cmn	r3, #3
   1503c:	bls	1506c <__assert_fail@plt+0x3acc>
   15040:	ldr	r1, [r5]
   15044:	cmp	r1, #34	; 0x22
   15048:	beq	1505c <__assert_fail@plt+0x3abc>
   1504c:	mov	r3, r4
   15050:	ldr	r2, [pc, #196]	; 1511c <__assert_fail@plt+0x3b7c>
   15054:	mov	r0, #1
   15058:	bl	11354 <error@plt>
   1505c:	mov	r3, r4
   15060:	ldr	r2, [pc, #180]	; 1511c <__assert_fail@plt+0x3b7c>
   15064:	mov	r0, #1
   15068:	bl	11354 <error@plt>
   1506c:	ldr	r3, [sp, #12]
   15070:	ldrb	r2, [r3]
   15074:	cmp	r2, #0
   15078:	bne	1508c <__assert_fail@plt+0x3aec>
   1507c:	cmp	r4, r3
   15080:	beq	150e0 <__assert_fail@plt+0x3b40>
   15084:	add	sp, sp, #16
   15088:	pop	{r4, r5, r6, r7, r8, pc}
   1508c:	ldr	r5, [r5]
   15090:	mov	r2, #5
   15094:	ldr	r1, [pc, #132]	; 15120 <__assert_fail@plt+0x3b80>
   15098:	mov	r0, #0
   1509c:	bl	11288 <dcgettext@plt>
   150a0:	mov	r7, r0
   150a4:	ldr	r2, [sp, #12]
   150a8:	mov	r1, r6
   150ac:	mov	r0, #0
   150b0:	bl	1867c <__assert_fail@plt+0x70dc>
   150b4:	mov	r8, r0
   150b8:	mov	r2, r4
   150bc:	mov	r1, r6
   150c0:	mov	r0, #1
   150c4:	bl	1867c <__assert_fail@plt+0x70dc>
   150c8:	str	r0, [sp]
   150cc:	mov	r3, r8
   150d0:	mov	r2, r7
   150d4:	mov	r1, r5
   150d8:	mov	r0, #1
   150dc:	bl	11354 <error@plt>
   150e0:	ldr	r5, [r5]
   150e4:	mov	r2, #5
   150e8:	ldr	r1, [pc, #52]	; 15124 <__assert_fail@plt+0x3b84>
   150ec:	mov	r0, #0
   150f0:	bl	11288 <dcgettext@plt>
   150f4:	mov	r7, r0
   150f8:	mov	r2, r4
   150fc:	mov	r1, r6
   15100:	mov	r0, #0
   15104:	bl	1867c <__assert_fail@plt+0x70dc>
   15108:	mov	r3, r0
   1510c:	mov	r2, r7
   15110:	mov	r1, r5
   15114:	mov	r0, #1
   15118:	bl	11354 <error@plt>
   1511c:	andeq	ip, r1, r4, lsl r8
   15120:	andeq	ip, r1, r0, asr r6
   15124:	andeq	ip, r1, ip, ror #12
   15128:	push	{r4, r5, lr}
   1512c:	sub	sp, sp, #20
   15130:	mov	r4, r0
   15134:	mov	r5, r1
   15138:	mov	r2, #5
   1513c:	ldr	r1, [pc, #56]	; 1517c <__assert_fail@plt+0x3bdc>
   15140:	mov	r0, #0
   15144:	bl	11288 <dcgettext@plt>
   15148:	ldr	r3, [pc, #48]	; 15180 <__assert_fail@plt+0x3be0>
   1514c:	str	r3, [sp, #8]
   15150:	ldr	r3, [pc, #44]	; 15184 <__assert_fail@plt+0x3be4>
   15154:	str	r3, [sp, #4]
   15158:	ldr	r3, [pc, #40]	; 15188 <__assert_fail@plt+0x3be8>
   1515c:	str	r3, [sp]
   15160:	mov	r3, r5
   15164:	ldr	r2, [pc, #32]	; 1518c <__assert_fail@plt+0x3bec>
   15168:	mov	r1, r0
   1516c:	mov	r0, r4
   15170:	bl	11414 <fprintf@plt>
   15174:	add	sp, sp, #20
   15178:	pop	{r4, r5, pc}
   1517c:	andeq	ip, r1, r4, lsl #13
   15180:	andeq	ip, r1, ip, ror r7
   15184:	muleq	r1, r4, r7
   15188:	andeq	ip, r1, r0, lsr r6
   1518c:	andeq	ip, r1, r4, asr r7
   15190:	push	{r4, r5, r6, r7, r8, lr}
   15194:	mov	r5, r0
   15198:	mov	r4, r1
   1519c:	mov	r8, r2
   151a0:	bl	11420 <__errno_location@plt>
   151a4:	ldr	r7, [r0]
   151a8:	cmp	r4, #0
   151ac:	beq	151e0 <__assert_fail@plt+0x3c40>
   151b0:	mov	r6, r0
   151b4:	ldr	r2, [r8]
   151b8:	cmp	r2, #0
   151bc:	beq	15260 <__assert_fail@plt+0x3cc0>
   151c0:	cmp	r4, r2
   151c4:	movls	r0, r5
   151c8:	bls	15210 <__assert_fail@plt+0x3c70>
   151cc:	lsl	r0, r2, #1
   151d0:	cmp	r2, r0
   151d4:	bls	15270 <__assert_fail@plt+0x3cd0>
   151d8:	mov	r0, r4
   151dc:	b	1523c <__assert_fail@plt+0x3c9c>
   151e0:	ldr	r3, [pc, #164]	; 1528c <__assert_fail@plt+0x3cec>
   151e4:	mov	r2, #71	; 0x47
   151e8:	ldr	r1, [pc, #160]	; 15290 <__assert_fail@plt+0x3cf0>
   151ec:	ldr	r0, [pc, #160]	; 15294 <__assert_fail@plt+0x3cf4>
   151f0:	bl	115a0 <__assert_fail@plt>
   151f4:	mov	r0, r4
   151f8:	cmp	r2, #0
   151fc:	bne	15234 <__assert_fail@plt+0x3c94>
   15200:	cmp	r5, #0
   15204:	bne	15220 <__assert_fail@plt+0x3c80>
   15208:	str	r0, [r8]
   1520c:	bl	19ed4 <__assert_fail@plt+0x8934>
   15210:	cmp	r0, #0
   15214:	popeq	{r4, r5, r6, r7, r8, pc}
   15218:	str	r7, [r6]
   1521c:	pop	{r4, r5, r6, r7, r8, pc}
   15220:	ldr	r3, [pc, #100]	; 1528c <__assert_fail@plt+0x3cec>
   15224:	mov	r2, #79	; 0x4f
   15228:	ldr	r1, [pc, #96]	; 15290 <__assert_fail@plt+0x3cf0>
   1522c:	ldr	r0, [pc, #100]	; 15298 <__assert_fail@plt+0x3cf8>
   15230:	bl	115a0 <__assert_fail@plt>
   15234:	cmp	r2, r0
   15238:	beq	15258 <__assert_fail@plt+0x3cb8>
   1523c:	str	r0, [r8]
   15240:	mov	r1, r0
   15244:	mov	r0, r5
   15248:	bl	19f5c <__assert_fail@plt+0x89bc>
   1524c:	cmp	r0, #0
   15250:	bne	15218 <__assert_fail@plt+0x3c78>
   15254:	pop	{r4, r5, r6, r7, r8, pc}
   15258:	mov	r0, r5
   1525c:	b	15210 <__assert_fail@plt+0x3c70>
   15260:	cmp	r4, #16
   15264:	movls	r0, #16
   15268:	bls	15200 <__assert_fail@plt+0x3c60>
   1526c:	mov	r0, #32
   15270:	cmp	r4, r0
   15274:	bls	151f8 <__assert_fail@plt+0x3c58>
   15278:	lsl	r3, r0, #1
   1527c:	cmp	r3, r0
   15280:	bcc	151f4 <__assert_fail@plt+0x3c54>
   15284:	mov	r0, r3
   15288:	b	15270 <__assert_fail@plt+0x3cd0>
   1528c:	andeq	ip, r1, r4, asr #15
   15290:	ldrdeq	ip, [r1], -r0
   15294:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15298:	andeq	ip, r1, r8, ror #15
   1529c:	push	{r4, lr}
   152a0:	mov	r4, r0
   152a4:	bl	15190 <__assert_fail@plt+0x3bf0>
   152a8:	cmp	r0, #0
   152ac:	popne	{r4, pc}
   152b0:	mov	r0, r4
   152b4:	bl	19dd4 <__assert_fail@plt+0x8834>
   152b8:	bl	1952c <__assert_fail@plt+0x7f8c>
   152bc:	push	{r4, r5, r6, lr}
   152c0:	mov	r5, r0
   152c4:	mov	r4, r1
   152c8:	mov	r2, #0
   152cc:	mov	r1, #1
   152d0:	bl	19ad8 <__assert_fail@plt+0x8538>
   152d4:	cmp	r0, #0
   152d8:	blt	15310 <__assert_fail@plt+0x3d70>
   152dc:	cmp	r4, #0
   152e0:	orrne	r2, r0, #1
   152e4:	biceq	r2, r0, #1
   152e8:	cmp	r2, r0
   152ec:	beq	15318 <__assert_fail@plt+0x3d78>
   152f0:	mov	r1, #2
   152f4:	mov	r0, r5
   152f8:	bl	19ad8 <__assert_fail@plt+0x8538>
   152fc:	cmn	r0, #1
   15300:	movne	r0, #0
   15304:	moveq	r0, #1
   15308:	rsb	r0, r0, #0
   1530c:	pop	{r4, r5, r6, pc}
   15310:	mvn	r0, #0
   15314:	pop	{r4, r5, r6, pc}
   15318:	mov	r0, #0
   1531c:	pop	{r4, r5, r6, pc}
   15320:	push	{r4, lr}
   15324:	mov	r2, #0
   15328:	ldr	r1, [pc, #4]	; 15334 <__assert_fail@plt+0x3d94>
   1532c:	bl	19ad8 <__assert_fail@plt+0x8538>
   15330:	pop	{r4, pc}
   15334:	andeq	r0, r0, r6, lsl #8
   15338:	ldr	r3, [pc, #4]	; 15344 <__assert_fail@plt+0x3da4>
   1533c:	str	r0, [r3]
   15340:	bx	lr
   15344:	andeq	sp, r2, r4, lsr #5
   15348:	push	{r4, r5, r6, lr}
   1534c:	sub	sp, sp, #8
   15350:	ldr	r3, [pc, #240]	; 15448 <__assert_fail@plt+0x3ea8>
   15354:	ldr	r4, [r3]
   15358:	mov	r0, r4
   1535c:	bl	19d94 <__assert_fail@plt+0x87f4>
   15360:	cmp	r0, #0
   15364:	bne	15388 <__assert_fail@plt+0x3de8>
   15368:	ldr	r3, [pc, #216]	; 15448 <__assert_fail@plt+0x3ea8>
   1536c:	ldr	r0, [r3]
   15370:	bl	19ff8 <__assert_fail@plt+0x8a58>
   15374:	cmp	r0, #0
   15378:	bne	153d0 <__assert_fail@plt+0x3e30>
   1537c:	bl	15480 <__assert_fail@plt+0x3ee0>
   15380:	add	sp, sp, #8
   15384:	pop	{r4, r5, r6, pc}
   15388:	mov	r3, #1
   1538c:	str	r3, [sp]
   15390:	mov	r2, #0
   15394:	mov	r3, #0
   15398:	mov	r0, r4
   1539c:	bl	19e2c <__assert_fail@plt+0x888c>
   153a0:	cmp	r0, #0
   153a4:	bne	15368 <__assert_fail@plt+0x3dc8>
   153a8:	ldr	r4, [pc, #152]	; 15448 <__assert_fail@plt+0x3ea8>
   153ac:	ldr	r0, [r4]
   153b0:	bl	19d30 <__assert_fail@plt+0x8790>
   153b4:	mov	r5, r0
   153b8:	ldr	r0, [r4]
   153bc:	bl	19ff8 <__assert_fail@plt+0x8a58>
   153c0:	cmp	r0, #0
   153c4:	bne	153d0 <__assert_fail@plt+0x3e30>
   153c8:	cmp	r5, #0
   153cc:	beq	1537c <__assert_fail@plt+0x3ddc>
   153d0:	mov	r2, #5
   153d4:	ldr	r1, [pc, #112]	; 1544c <__assert_fail@plt+0x3eac>
   153d8:	mov	r0, #0
   153dc:	bl	11288 <dcgettext@plt>
   153e0:	mov	r5, r0
   153e4:	ldr	r3, [pc, #100]	; 15450 <__assert_fail@plt+0x3eb0>
   153e8:	ldr	r4, [r3]
   153ec:	cmp	r4, #0
   153f0:	beq	1542c <__assert_fail@plt+0x3e8c>
   153f4:	bl	11420 <__errno_location@plt>
   153f8:	ldr	r6, [r0]
   153fc:	mov	r0, r4
   15400:	bl	18794 <__assert_fail@plt+0x71f4>
   15404:	str	r5, [sp]
   15408:	mov	r3, r0
   1540c:	ldr	r2, [pc, #64]	; 15454 <__assert_fail@plt+0x3eb4>
   15410:	mov	r1, r6
   15414:	mov	r0, #0
   15418:	bl	11354 <error@plt>
   1541c:	bl	15480 <__assert_fail@plt+0x3ee0>
   15420:	ldr	r3, [pc, #48]	; 15458 <__assert_fail@plt+0x3eb8>
   15424:	ldr	r0, [r3]
   15428:	bl	11240 <_exit@plt>
   1542c:	bl	11420 <__errno_location@plt>
   15430:	mov	r3, r5
   15434:	ldr	r2, [pc, #32]	; 1545c <__assert_fail@plt+0x3ebc>
   15438:	ldr	r1, [r0]
   1543c:	mov	r0, #0
   15440:	bl	11354 <error@plt>
   15444:	b	1541c <__assert_fail@plt+0x3e7c>
   15448:	ldrdeq	sp, [r2], -r8
   1544c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15450:	andeq	sp, r2, r4, lsr #5
   15454:	andeq	ip, r1, r0, lsl r8
   15458:	andeq	sp, r2, r4, ror r1
   1545c:	andeq	ip, r1, r4, lsl r8
   15460:	ldr	r3, [pc, #4]	; 1546c <__assert_fail@plt+0x3ecc>
   15464:	str	r0, [r3]
   15468:	bx	lr
   1546c:	andeq	sp, r2, r8, lsr #5
   15470:	ldr	r3, [pc, #4]	; 1547c <__assert_fail@plt+0x3edc>
   15474:	strb	r0, [r3, #4]
   15478:	bx	lr
   1547c:	andeq	sp, r2, r8, lsr #5
   15480:	push	{r4, r5, r6, lr}
   15484:	sub	sp, sp, #8
   15488:	ldr	r3, [pc, #200]	; 15558 <__assert_fail@plt+0x3fb8>
   1548c:	ldr	r0, [r3]
   15490:	bl	19ff8 <__assert_fail@plt+0x8a58>
   15494:	cmp	r0, #0
   15498:	beq	154bc <__assert_fail@plt+0x3f1c>
   1549c:	ldr	r3, [pc, #184]	; 1555c <__assert_fail@plt+0x3fbc>
   154a0:	ldrb	r3, [r3, #4]
   154a4:	cmp	r3, #0
   154a8:	beq	154d8 <__assert_fail@plt+0x3f38>
   154ac:	bl	11420 <__errno_location@plt>
   154b0:	ldr	r3, [r0]
   154b4:	cmp	r3, #32
   154b8:	bne	154d8 <__assert_fail@plt+0x3f38>
   154bc:	ldr	r3, [pc, #156]	; 15560 <__assert_fail@plt+0x3fc0>
   154c0:	ldr	r0, [r3]
   154c4:	bl	19ff8 <__assert_fail@plt+0x8a58>
   154c8:	cmp	r0, #0
   154cc:	bne	1554c <__assert_fail@plt+0x3fac>
   154d0:	add	sp, sp, #8
   154d4:	pop	{r4, r5, r6, pc}
   154d8:	mov	r2, #5
   154dc:	ldr	r1, [pc, #128]	; 15564 <__assert_fail@plt+0x3fc4>
   154e0:	mov	r0, #0
   154e4:	bl	11288 <dcgettext@plt>
   154e8:	mov	r4, r0
   154ec:	ldr	r3, [pc, #104]	; 1555c <__assert_fail@plt+0x3fbc>
   154f0:	ldr	r5, [r3]
   154f4:	cmp	r5, #0
   154f8:	beq	15530 <__assert_fail@plt+0x3f90>
   154fc:	bl	11420 <__errno_location@plt>
   15500:	ldr	r6, [r0]
   15504:	mov	r0, r5
   15508:	bl	18794 <__assert_fail@plt+0x71f4>
   1550c:	str	r4, [sp]
   15510:	mov	r3, r0
   15514:	ldr	r2, [pc, #76]	; 15568 <__assert_fail@plt+0x3fc8>
   15518:	mov	r1, r6
   1551c:	mov	r0, #0
   15520:	bl	11354 <error@plt>
   15524:	ldr	r3, [pc, #64]	; 1556c <__assert_fail@plt+0x3fcc>
   15528:	ldr	r0, [r3]
   1552c:	bl	11240 <_exit@plt>
   15530:	bl	11420 <__errno_location@plt>
   15534:	mov	r3, r4
   15538:	ldr	r2, [pc, #48]	; 15570 <__assert_fail@plt+0x3fd0>
   1553c:	ldr	r1, [r0]
   15540:	mov	r0, #0
   15544:	bl	11354 <error@plt>
   15548:	b	15524 <__assert_fail@plt+0x3f84>
   1554c:	ldr	r3, [pc, #24]	; 1556c <__assert_fail@plt+0x3fcc>
   15550:	ldr	r0, [r3]
   15554:	bl	11240 <_exit@plt>
   15558:	ldrdeq	sp, [r2], -ip
   1555c:	andeq	sp, r2, r8, lsr #5
   15560:	ldrdeq	sp, [r2], -r0
   15564:	andeq	ip, r1, r8, lsl r8
   15568:	andeq	ip, r1, r0, lsl r8
   1556c:	andeq	sp, r2, r4, ror r1
   15570:	andeq	ip, r1, r4, lsl r8
   15574:	push	{r4, r5, r6, r7, r8, lr}
   15578:	bl	11360 <opendir@plt>
   1557c:	subs	r4, r0, #0
   15580:	beq	15594 <__assert_fail@plt+0x3ff4>
   15584:	mov	r0, r4
   15588:	bl	11528 <dirfd@plt>
   1558c:	cmp	r0, #2
   15590:	bls	1559c <__assert_fail@plt+0x3ffc>
   15594:	mov	r0, r4
   15598:	pop	{r4, r5, r6, r7, r8, pc}
   1559c:	mov	r2, #3
   155a0:	ldr	r1, [pc, #88]	; 15600 <__assert_fail@plt+0x4060>
   155a4:	bl	19ad8 <__assert_fail@plt+0x8538>
   155a8:	subs	r7, r0, #0
   155ac:	blt	155e4 <__assert_fail@plt+0x4044>
   155b0:	mov	r0, r7
   155b4:	bl	11510 <fdopendir@plt>
   155b8:	mov	r5, r0
   155bc:	bl	11420 <__errno_location@plt>
   155c0:	ldr	r6, [r0]
   155c4:	cmp	r5, #0
   155c8:	beq	155f4 <__assert_fail@plt+0x4054>
   155cc:	mov	r0, r4
   155d0:	bl	11594 <closedir@plt>
   155d4:	bl	11420 <__errno_location@plt>
   155d8:	str	r6, [r0]
   155dc:	mov	r4, r5
   155e0:	b	15594 <__assert_fail@plt+0x3ff4>
   155e4:	bl	11420 <__errno_location@plt>
   155e8:	ldr	r6, [r0]
   155ec:	mov	r5, #0
   155f0:	b	155cc <__assert_fail@plt+0x402c>
   155f4:	mov	r0, r7
   155f8:	bl	11588 <close@plt>
   155fc:	b	155cc <__assert_fail@plt+0x402c>
   15600:	andeq	r0, r0, r6, lsl #8
   15604:	push	{r1, r2, r3}
   15608:	push	{lr}		; (str lr, [sp, #-4]!)
   1560c:	sub	sp, sp, #8
   15610:	ldr	r1, [sp, #12]
   15614:	tst	r1, #64	; 0x40
   15618:	addne	r3, sp, #20
   1561c:	strne	r3, [sp, #4]
   15620:	ldrne	r2, [sp, #16]
   15624:	moveq	r2, #0
   15628:	bl	1136c <open64@plt>
   1562c:	bl	189d0 <__assert_fail@plt+0x7430>
   15630:	add	sp, sp, #8
   15634:	pop	{lr}		; (ldr lr, [sp], #4)
   15638:	add	sp, sp, #12
   1563c:	bx	lr
   15640:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15644:	add	fp, sp, #28
   15648:	mov	r7, r3
   1564c:	lsr	r8, r2, #30
   15650:	lsl	r3, r2, #2
   15654:	adds	r8, r8, #0
   15658:	movne	r8, #1
   1565c:	cmp	r3, #0
   15660:	movlt	r8, #1
   15664:	cmp	r8, #0
   15668:	movne	r8, #0
   1566c:	bne	1578c <__assert_fail@plt+0x41ec>
   15670:	mov	r5, r0
   15674:	mov	r4, r1
   15678:	mov	r6, r2
   1567c:	mov	r0, r3
   15680:	cmp	r3, #4016	; 0xfb0
   15684:	bhi	156c8 <__assert_fail@plt+0x4128>
   15688:	add	r3, r3, #29
   1568c:	bic	r3, r3, #7
   15690:	sub	sp, sp, r3
   15694:	add	r0, sp, #15
   15698:	bic	r0, r0, #15
   1569c:	cmp	r0, #0
   156a0:	beq	1578c <__assert_fail@plt+0x41ec>
   156a4:	mov	r3, #1
   156a8:	str	r3, [r0, #4]
   156ac:	cmp	r6, #2
   156b0:	bls	1572c <__assert_fail@plt+0x418c>
   156b4:	mov	r8, r4
   156b8:	add	lr, r0, #8
   156bc:	mov	r3, #0
   156c0:	mov	ip, #2
   156c4:	b	156ec <__assert_fail@plt+0x414c>
   156c8:	bl	1a108 <__assert_fail@plt+0x8b68>
   156cc:	b	1569c <__assert_fail@plt+0x40fc>
   156d0:	add	r3, r3, #1
   156d4:	sub	r2, ip, r3
   156d8:	str	r2, [lr]
   156dc:	add	ip, ip, #1
   156e0:	add	lr, lr, #4
   156e4:	cmp	r6, ip
   156e8:	beq	1572c <__assert_fail@plt+0x418c>
   156ec:	ldrb	r1, [r8, #1]!
   156f0:	ldrb	r2, [r4, r3]
   156f4:	cmp	r2, r1
   156f8:	beq	156d0 <__assert_fail@plt+0x4130>
   156fc:	cmp	r3, #0
   15700:	beq	15720 <__assert_fail@plt+0x4180>
   15704:	ldr	r2, [r0, r3, lsl #2]
   15708:	sub	r3, r3, r2
   1570c:	ldrb	r2, [r4, r3]
   15710:	cmp	r2, r1
   15714:	beq	156d0 <__assert_fail@plt+0x4130>
   15718:	cmp	r3, #0
   1571c:	bne	15704 <__assert_fail@plt+0x4164>
   15720:	str	ip, [lr]
   15724:	mov	r3, #0
   15728:	b	156dc <__assert_fail@plt+0x413c>
   1572c:	mov	r3, #0
   15730:	str	r3, [r7]
   15734:	mov	r1, r5
   15738:	b	1574c <__assert_fail@plt+0x41ac>
   1573c:	add	r3, r3, #1
   15740:	add	r1, r1, #1
   15744:	cmp	r6, r3
   15748:	beq	15780 <__assert_fail@plt+0x41e0>
   1574c:	ldrb	r2, [r1]
   15750:	cmp	r2, #0
   15754:	beq	15784 <__assert_fail@plt+0x41e4>
   15758:	ldrb	ip, [r4, r3]
   1575c:	cmp	ip, r2
   15760:	beq	1573c <__assert_fail@plt+0x419c>
   15764:	cmp	r3, #0
   15768:	ldrne	r2, [r0, r3, lsl #2]
   1576c:	addne	r5, r5, r2
   15770:	subne	r3, r3, r2
   15774:	addeq	r5, r5, #1
   15778:	addeq	r1, r1, #1
   1577c:	b	1574c <__assert_fail@plt+0x41ac>
   15780:	str	r5, [r7]
   15784:	bl	1a150 <__assert_fail@plt+0x8bb0>
   15788:	mov	r8, #1
   1578c:	mov	r0, r8
   15790:	sub	sp, fp, #28
   15794:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1579c:	add	fp, sp, #32
   157a0:	sub	sp, sp, #140	; 0x8c
   157a4:	str	r0, [fp, #-172]	; 0xffffff54
   157a8:	mov	r4, r1
   157ac:	str	r2, [fp, #-168]	; 0xffffff58
   157b0:	mov	r0, r1
   157b4:	bl	1a218 <__assert_fail@plt+0x8c78>
   157b8:	str	r0, [fp, #-160]	; 0xffffff60
   157bc:	mov	r2, #44	; 0x2c
   157c0:	umull	r2, r3, r0, r2
   157c4:	adds	r3, r3, #0
   157c8:	movne	r3, #1
   157cc:	mov	r1, r3
   157d0:	cmp	r2, #0
   157d4:	movlt	r1, #1
   157d8:	str	r1, [fp, #-152]	; 0xffffff68
   157dc:	cmp	r1, #0
   157e0:	bne	16044 <__assert_fail@plt+0x4aa4>
   157e4:	mov	ip, r0
   157e8:	mov	r0, #44	; 0x2c
   157ec:	mul	r0, r0, ip
   157f0:	cmp	r0, #4016	; 0xfb0
   157f4:	bhi	1584c <__assert_fail@plt+0x42ac>
   157f8:	add	r3, r0, #29
   157fc:	bic	r3, r3, #7
   15800:	sub	sp, sp, r3
   15804:	add	r3, sp, #15
   15808:	bic	r9, r3, #15
   1580c:	cmp	r9, #0
   15810:	beq	16050 <__assert_fail@plt+0x4ab0>
   15814:	ldr	r3, [fp, #-160]	; 0xffffff60
   15818:	add	sl, r3, r3, lsl #2
   1581c:	add	sl, r9, sl, lsl #3
   15820:	str	r4, [fp, #-76]	; 0xffffffb4
   15824:	mov	r3, #0
   15828:	strb	r3, [fp, #-92]	; 0xffffffa4
   1582c:	str	r3, [fp, #-88]	; 0xffffffa8
   15830:	str	r3, [fp, #-84]	; 0xffffffac
   15834:	strb	r3, [fp, #-80]	; 0xffffffb0
   15838:	add	r4, r9, #16
   1583c:	mov	r5, #1
   15840:	mov	r6, r3
   15844:	sub	r7, fp, #60	; 0x3c
   15848:	b	15954 <__assert_fail@plt+0x43b4>
   1584c:	bl	1a108 <__assert_fail@plt+0x8b68>
   15850:	mov	r9, r0
   15854:	b	1580c <__assert_fail@plt+0x426c>
   15858:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1585c:	mov	r1, r7
   15860:	mov	r0, r4
   15864:	bl	1124c <memcpy@plt>
   15868:	str	r4, [r4, #-16]
   1586c:	b	15924 <__assert_fail@plt+0x4384>
   15870:	sub	r0, fp, #88	; 0x58
   15874:	bl	11264 <mbsinit@plt>
   15878:	cmp	r0, #0
   1587c:	beq	159a4 <__assert_fail@plt+0x4404>
   15880:	strb	r5, [fp, #-92]	; 0xffffffa4
   15884:	ldr	r8, [fp, #-76]	; 0xffffffb4
   15888:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1588c:	mov	r1, r0
   15890:	mov	r0, r8
   15894:	bl	189a4 <__assert_fail@plt+0x7404>
   15898:	sub	r3, fp, #88	; 0x58
   1589c:	mov	r2, r0
   158a0:	mov	r1, r8
   158a4:	sub	r0, fp, #64	; 0x40
   158a8:	bl	19f04 <__assert_fail@plt+0x8964>
   158ac:	str	r0, [fp, #-72]	; 0xffffffb8
   158b0:	cmn	r0, #1
   158b4:	streq	r5, [fp, #-72]	; 0xffffffb8
   158b8:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   158bc:	beq	15904 <__assert_fail@plt+0x4364>
   158c0:	cmn	r0, #2
   158c4:	beq	159b8 <__assert_fail@plt+0x4418>
   158c8:	cmp	r0, #0
   158cc:	bne	158f0 <__assert_fail@plt+0x4350>
   158d0:	str	r5, [fp, #-72]	; 0xffffffb8
   158d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   158d8:	ldrb	r3, [r3]
   158dc:	cmp	r3, #0
   158e0:	bne	159cc <__assert_fail@plt+0x442c>
   158e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   158e8:	cmp	r3, #0
   158ec:	bne	159e0 <__assert_fail@plt+0x4440>
   158f0:	strb	r5, [fp, #-68]	; 0xffffffbc
   158f4:	sub	r0, fp, #88	; 0x58
   158f8:	bl	11264 <mbsinit@plt>
   158fc:	cmp	r0, #0
   15900:	strbne	r6, [fp, #-92]	; 0xffffffa4
   15904:	strb	r5, [fp, #-80]	; 0xffffffb0
   15908:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1590c:	cmp	r3, #0
   15910:	bne	159f4 <__assert_fail@plt+0x4454>
   15914:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15918:	cmp	r3, r7
   1591c:	strne	r3, [r4, #-16]
   15920:	beq	15858 <__assert_fail@plt+0x42b8>
   15924:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15928:	str	r2, [r4, #-12]
   1592c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15930:	strb	r3, [r4, #-8]
   15934:	cmp	r3, #0
   15938:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   1593c:	strne	r3, [r4, #-4]
   15940:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15944:	add	r3, r3, r2
   15948:	str	r3, [fp, #-76]	; 0xffffffb4
   1594c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15950:	add	r4, r4, #40	; 0x28
   15954:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15958:	cmp	r3, #0
   1595c:	bne	15908 <__assert_fail@plt+0x4368>
   15960:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15964:	cmp	r3, #0
   15968:	bne	15884 <__assert_fail@plt+0x42e4>
   1596c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15970:	ldrb	r3, [r1]
   15974:	lsr	r2, r3, #5
   15978:	and	r3, r3, #31
   1597c:	ldr	r0, [pc, #1752]	; 1605c <__assert_fail@plt+0x4abc>
   15980:	ldr	r2, [r0, r2, lsl #2]
   15984:	lsr	r3, r2, r3
   15988:	tst	r3, #1
   1598c:	beq	15870 <__assert_fail@plt+0x42d0>
   15990:	str	r5, [fp, #-72]	; 0xffffffb8
   15994:	ldrb	r3, [r1]
   15998:	str	r3, [fp, #-64]	; 0xffffffc0
   1599c:	strb	r5, [fp, #-68]	; 0xffffffbc
   159a0:	b	15904 <__assert_fail@plt+0x4364>
   159a4:	ldr	r3, [pc, #1716]	; 16060 <__assert_fail@plt+0x4ac0>
   159a8:	mov	r2, #143	; 0x8f
   159ac:	ldr	r1, [pc, #1712]	; 16064 <__assert_fail@plt+0x4ac4>
   159b0:	ldr	r0, [pc, #1712]	; 16068 <__assert_fail@plt+0x4ac8>
   159b4:	bl	115a0 <__assert_fail@plt>
   159b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   159bc:	bl	113f0 <strlen@plt>
   159c0:	str	r0, [fp, #-72]	; 0xffffffb8
   159c4:	strb	r6, [fp, #-68]	; 0xffffffbc
   159c8:	b	15904 <__assert_fail@plt+0x4364>
   159cc:	ldr	r3, [pc, #1676]	; 16060 <__assert_fail@plt+0x4ac0>
   159d0:	mov	r2, #171	; 0xab
   159d4:	ldr	r1, [pc, #1672]	; 16064 <__assert_fail@plt+0x4ac4>
   159d8:	ldr	r0, [pc, #1676]	; 1606c <__assert_fail@plt+0x4acc>
   159dc:	bl	115a0 <__assert_fail@plt>
   159e0:	ldr	r3, [pc, #1656]	; 16060 <__assert_fail@plt+0x4ac0>
   159e4:	mov	r2, #172	; 0xac
   159e8:	ldr	r1, [pc, #1652]	; 16064 <__assert_fail@plt+0x4ac4>
   159ec:	ldr	r0, [pc, #1660]	; 16070 <__assert_fail@plt+0x4ad0>
   159f0:	bl	115a0 <__assert_fail@plt>
   159f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   159f8:	cmp	r2, #0
   159fc:	bne	15914 <__assert_fail@plt+0x4374>
   15a00:	str	r3, [fp, #-164]	; 0xffffff5c
   15a04:	mov	r3, #1
   15a08:	str	r3, [sl, #4]
   15a0c:	ldr	r3, [fp, #-160]	; 0xffffff60
   15a10:	cmp	r3, #2
   15a14:	bls	15af8 <__assert_fail@plt+0x4558>
   15a18:	mov	r8, r9
   15a1c:	add	r3, sl, #8
   15a20:	str	r3, [fp, #-156]	; 0xffffff64
   15a24:	mov	r4, #0
   15a28:	mov	r7, #2
   15a2c:	b	15ae0 <__assert_fail@plt+0x4540>
   15a30:	ldr	r2, [r5, #44]	; 0x2c
   15a34:	add	r3, r4, r4, lsl #2
   15a38:	add	r1, r9, r3, lsl #3
   15a3c:	ldr	r1, [r1, #4]
   15a40:	cmp	r2, r1
   15a44:	ldrne	r0, [fp, #-152]	; 0xffffff68
   15a48:	beq	15a98 <__assert_fail@plt+0x44f8>
   15a4c:	cmp	r0, #0
   15a50:	bne	15ab0 <__assert_fail@plt+0x4510>
   15a54:	cmp	r4, #0
   15a58:	beq	15aec <__assert_fail@plt+0x454c>
   15a5c:	ldr	r3, [sl, r4, lsl #2]
   15a60:	sub	r4, r4, r3
   15a64:	cmp	r6, #0
   15a68:	beq	15a30 <__assert_fail@plt+0x4490>
   15a6c:	add	r3, r4, r4, lsl #2
   15a70:	add	r3, r9, r3, lsl #3
   15a74:	ldrb	r2, [r3, #8]
   15a78:	cmp	r2, #0
   15a7c:	beq	15a30 <__assert_fail@plt+0x4490>
   15a80:	ldr	r0, [r5, #52]	; 0x34
   15a84:	ldr	r3, [r3, #12]
   15a88:	cmp	r0, r3
   15a8c:	movne	r0, #0
   15a90:	moveq	r0, #1
   15a94:	b	15a4c <__assert_fail@plt+0x44ac>
   15a98:	ldr	r1, [r9, r3, lsl #3]
   15a9c:	ldr	r0, [r5, #40]	; 0x28
   15aa0:	bl	1127c <memcmp@plt>
   15aa4:	clz	r0, r0
   15aa8:	lsr	r0, r0, #5
   15aac:	b	15a4c <__assert_fail@plt+0x44ac>
   15ab0:	add	r4, r4, #1
   15ab4:	sub	r3, r7, r4
   15ab8:	ldr	r2, [fp, #-156]	; 0xffffff64
   15abc:	str	r3, [r2]
   15ac0:	add	r7, r7, #1
   15ac4:	add	r8, r8, #40	; 0x28
   15ac8:	ldr	r3, [fp, #-156]	; 0xffffff64
   15acc:	add	r3, r3, #4
   15ad0:	str	r3, [fp, #-156]	; 0xffffff64
   15ad4:	ldr	r3, [fp, #-160]	; 0xffffff60
   15ad8:	cmp	r3, r7
   15adc:	beq	15af8 <__assert_fail@plt+0x4558>
   15ae0:	mov	r5, r8
   15ae4:	ldrb	r6, [r8, #48]	; 0x30
   15ae8:	b	15a64 <__assert_fail@plt+0x44c4>
   15aec:	ldr	r3, [fp, #-156]	; 0xffffff64
   15af0:	str	r7, [r3]
   15af4:	b	15ac0 <__assert_fail@plt+0x4520>
   15af8:	mov	r8, #0
   15afc:	ldr	r3, [fp, #-168]	; 0xffffff58
   15b00:	str	r8, [r3]
   15b04:	ldr	r3, [fp, #-172]	; 0xffffff54
   15b08:	str	r3, [fp, #-132]	; 0xffffff7c
   15b0c:	strb	r8, [fp, #-148]	; 0xffffff6c
   15b10:	str	r8, [fp, #-144]	; 0xffffff70
   15b14:	str	r8, [fp, #-140]	; 0xffffff74
   15b18:	strb	r8, [fp, #-136]	; 0xffffff78
   15b1c:	str	r3, [fp, #-76]	; 0xffffffb4
   15b20:	strb	r8, [fp, #-92]	; 0xffffffa4
   15b24:	str	r8, [fp, #-88]	; 0xffffffa8
   15b28:	str	r8, [fp, #-84]	; 0xffffffac
   15b2c:	strb	r8, [fp, #-80]	; 0xffffffb0
   15b30:	mov	r5, #1
   15b34:	mov	r6, r8
   15b38:	ldr	r7, [pc, #1308]	; 1605c <__assert_fail@plt+0x4abc>
   15b3c:	str	sl, [fp, #-156]	; 0xffffff64
   15b40:	b	15f70 <__assert_fail@plt+0x49d0>
   15b44:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15b48:	ldr	r0, [r3]
   15b4c:	bl	1127c <memcmp@plt>
   15b50:	clz	r0, r0
   15b54:	lsr	r0, r0, #5
   15b58:	b	15f44 <__assert_fail@plt+0x49a4>
   15b5c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15b60:	ldr	r2, [fp, #-168]	; 0xffffff58
   15b64:	str	r3, [r2]
   15b68:	mov	r0, r9
   15b6c:	bl	1a150 <__assert_fail@plt+0x8bb0>
   15b70:	ldr	r0, [fp, #-164]	; 0xffffff5c
   15b74:	sub	sp, fp, #32
   15b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b7c:	cmp	r8, #0
   15b80:	beq	15d08 <__assert_fail@plt+0x4768>
   15b84:	ldr	r3, [fp, #-156]	; 0xffffff64
   15b88:	ldr	r4, [r3, r8, lsl #2]
   15b8c:	sub	r8, r8, r4
   15b90:	cmp	r4, #0
   15b94:	bne	15c5c <__assert_fail@plt+0x46bc>
   15b98:	b	15f70 <__assert_fail@plt+0x49d0>
   15b9c:	sub	r0, fp, #144	; 0x90
   15ba0:	bl	11264 <mbsinit@plt>
   15ba4:	cmp	r0, #0
   15ba8:	beq	15ca8 <__assert_fail@plt+0x4708>
   15bac:	strb	r5, [fp, #-148]	; 0xffffff6c
   15bb0:	ldr	sl, [fp, #-132]	; 0xffffff7c
   15bb4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15bb8:	mov	r1, r0
   15bbc:	mov	r0, sl
   15bc0:	bl	189a4 <__assert_fail@plt+0x7404>
   15bc4:	sub	r3, fp, #144	; 0x90
   15bc8:	mov	r2, r0
   15bcc:	mov	r1, sl
   15bd0:	sub	r0, fp, #120	; 0x78
   15bd4:	bl	19f04 <__assert_fail@plt+0x8964>
   15bd8:	str	r0, [fp, #-128]	; 0xffffff80
   15bdc:	cmn	r0, #1
   15be0:	streq	r5, [fp, #-128]	; 0xffffff80
   15be4:	strbeq	r6, [fp, #-124]	; 0xffffff84
   15be8:	beq	15c30 <__assert_fail@plt+0x4690>
   15bec:	cmn	r0, #2
   15bf0:	beq	15cbc <__assert_fail@plt+0x471c>
   15bf4:	cmp	r0, #0
   15bf8:	bne	15c1c <__assert_fail@plt+0x467c>
   15bfc:	str	r5, [fp, #-128]	; 0xffffff80
   15c00:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15c04:	ldrb	r3, [r3]
   15c08:	cmp	r3, #0
   15c0c:	bne	15cd0 <__assert_fail@plt+0x4730>
   15c10:	ldr	r3, [fp, #-120]	; 0xffffff88
   15c14:	cmp	r3, #0
   15c18:	bne	15ce4 <__assert_fail@plt+0x4744>
   15c1c:	strb	r5, [fp, #-124]	; 0xffffff84
   15c20:	sub	r0, fp, #144	; 0x90
   15c24:	bl	11264 <mbsinit@plt>
   15c28:	cmp	r0, #0
   15c2c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   15c30:	strb	r5, [fp, #-136]	; 0xffffff78
   15c34:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15c38:	cmp	r3, #0
   15c3c:	bne	15cf8 <__assert_fail@plt+0x4758>
   15c40:	ldr	r2, [fp, #-128]	; 0xffffff80
   15c44:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15c48:	add	r3, r3, r2
   15c4c:	str	r3, [fp, #-132]	; 0xffffff7c
   15c50:	strb	r6, [fp, #-136]	; 0xffffff78
   15c54:	subs	r4, r4, #1
   15c58:	beq	15f70 <__assert_fail@plt+0x49d0>
   15c5c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15c60:	cmp	r3, #0
   15c64:	bne	15c34 <__assert_fail@plt+0x4694>
   15c68:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15c6c:	cmp	r3, #0
   15c70:	bne	15bb0 <__assert_fail@plt+0x4610>
   15c74:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15c78:	ldrb	r3, [r1]
   15c7c:	lsr	r2, r3, #5
   15c80:	and	r3, r3, #31
   15c84:	ldr	r2, [r7, r2, lsl #2]
   15c88:	lsr	r3, r2, r3
   15c8c:	tst	r3, #1
   15c90:	beq	15b9c <__assert_fail@plt+0x45fc>
   15c94:	str	r5, [fp, #-128]	; 0xffffff80
   15c98:	ldrb	r3, [r1]
   15c9c:	str	r3, [fp, #-120]	; 0xffffff88
   15ca0:	strb	r5, [fp, #-124]	; 0xffffff84
   15ca4:	b	15c30 <__assert_fail@plt+0x4690>
   15ca8:	ldr	r3, [pc, #944]	; 16060 <__assert_fail@plt+0x4ac0>
   15cac:	mov	r2, #143	; 0x8f
   15cb0:	ldr	r1, [pc, #940]	; 16064 <__assert_fail@plt+0x4ac4>
   15cb4:	ldr	r0, [pc, #940]	; 16068 <__assert_fail@plt+0x4ac8>
   15cb8:	bl	115a0 <__assert_fail@plt>
   15cbc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15cc0:	bl	113f0 <strlen@plt>
   15cc4:	str	r0, [fp, #-128]	; 0xffffff80
   15cc8:	strb	r6, [fp, #-124]	; 0xffffff84
   15ccc:	b	15c30 <__assert_fail@plt+0x4690>
   15cd0:	ldr	r3, [pc, #904]	; 16060 <__assert_fail@plt+0x4ac0>
   15cd4:	mov	r2, #171	; 0xab
   15cd8:	ldr	r1, [pc, #900]	; 16064 <__assert_fail@plt+0x4ac4>
   15cdc:	ldr	r0, [pc, #904]	; 1606c <__assert_fail@plt+0x4acc>
   15ce0:	bl	115a0 <__assert_fail@plt>
   15ce4:	ldr	r3, [pc, #884]	; 16060 <__assert_fail@plt+0x4ac0>
   15ce8:	mov	r2, #172	; 0xac
   15cec:	ldr	r1, [pc, #880]	; 16064 <__assert_fail@plt+0x4ac4>
   15cf0:	ldr	r0, [pc, #888]	; 16070 <__assert_fail@plt+0x4ad0>
   15cf4:	bl	115a0 <__assert_fail@plt>
   15cf8:	ldr	r3, [fp, #-120]	; 0xffffff88
   15cfc:	cmp	r3, #0
   15d00:	bne	15c40 <__assert_fail@plt+0x46a0>
   15d04:	bl	11570 <abort@plt>
   15d08:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15d0c:	cmp	r3, #0
   15d10:	bne	15d54 <__assert_fail@plt+0x47b4>
   15d14:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15d18:	cmp	r3, #0
   15d1c:	bne	15da0 <__assert_fail@plt+0x4800>
   15d20:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15d24:	ldrb	r3, [r1]
   15d28:	lsr	r2, r3, #5
   15d2c:	and	r3, r3, #31
   15d30:	ldr	r2, [r7, r2, lsl #2]
   15d34:	lsr	r3, r2, r3
   15d38:	tst	r3, #1
   15d3c:	beq	15d8c <__assert_fail@plt+0x47ec>
   15d40:	str	r5, [fp, #-128]	; 0xffffff80
   15d44:	ldrb	r3, [r1]
   15d48:	str	r3, [fp, #-120]	; 0xffffff88
   15d4c:	strb	r5, [fp, #-124]	; 0xffffff84
   15d50:	strb	r5, [fp, #-136]	; 0xffffff78
   15d54:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15d58:	cmp	r3, #0
   15d5c:	bne	15e74 <__assert_fail@plt+0x48d4>
   15d60:	ldr	r2, [fp, #-128]	; 0xffffff80
   15d64:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15d68:	add	r3, r3, r2
   15d6c:	str	r3, [fp, #-132]	; 0xffffff7c
   15d70:	strb	r6, [fp, #-136]	; 0xffffff78
   15d74:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15d78:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15d7c:	add	r3, r3, r2
   15d80:	str	r3, [fp, #-76]	; 0xffffffb4
   15d84:	strb	r6, [fp, #-80]	; 0xffffffb0
   15d88:	b	15f70 <__assert_fail@plt+0x49d0>
   15d8c:	sub	r0, fp, #144	; 0x90
   15d90:	bl	11264 <mbsinit@plt>
   15d94:	cmp	r0, #0
   15d98:	beq	15e24 <__assert_fail@plt+0x4884>
   15d9c:	strb	r5, [fp, #-148]	; 0xffffff6c
   15da0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15da4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15da8:	mov	r1, r0
   15dac:	mov	r0, r4
   15db0:	bl	189a4 <__assert_fail@plt+0x7404>
   15db4:	sub	r3, fp, #144	; 0x90
   15db8:	mov	r2, r0
   15dbc:	mov	r1, r4
   15dc0:	sub	r0, fp, #120	; 0x78
   15dc4:	bl	19f04 <__assert_fail@plt+0x8964>
   15dc8:	str	r0, [fp, #-128]	; 0xffffff80
   15dcc:	cmn	r0, #1
   15dd0:	streq	r5, [fp, #-128]	; 0xffffff80
   15dd4:	strbeq	r6, [fp, #-124]	; 0xffffff84
   15dd8:	beq	15d50 <__assert_fail@plt+0x47b0>
   15ddc:	cmn	r0, #2
   15de0:	beq	15e38 <__assert_fail@plt+0x4898>
   15de4:	cmp	r0, #0
   15de8:	bne	15e0c <__assert_fail@plt+0x486c>
   15dec:	str	r5, [fp, #-128]	; 0xffffff80
   15df0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15df4:	ldrb	r3, [r3]
   15df8:	cmp	r3, #0
   15dfc:	bne	15e4c <__assert_fail@plt+0x48ac>
   15e00:	ldr	r3, [fp, #-120]	; 0xffffff88
   15e04:	cmp	r3, #0
   15e08:	bne	15e60 <__assert_fail@plt+0x48c0>
   15e0c:	strb	r5, [fp, #-124]	; 0xffffff84
   15e10:	sub	r0, fp, #144	; 0x90
   15e14:	bl	11264 <mbsinit@plt>
   15e18:	cmp	r0, #0
   15e1c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   15e20:	b	15d50 <__assert_fail@plt+0x47b0>
   15e24:	ldr	r3, [pc, #564]	; 16060 <__assert_fail@plt+0x4ac0>
   15e28:	mov	r2, #143	; 0x8f
   15e2c:	ldr	r1, [pc, #560]	; 16064 <__assert_fail@plt+0x4ac4>
   15e30:	ldr	r0, [pc, #560]	; 16068 <__assert_fail@plt+0x4ac8>
   15e34:	bl	115a0 <__assert_fail@plt>
   15e38:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15e3c:	bl	113f0 <strlen@plt>
   15e40:	str	r0, [fp, #-128]	; 0xffffff80
   15e44:	strb	r6, [fp, #-124]	; 0xffffff84
   15e48:	b	15d50 <__assert_fail@plt+0x47b0>
   15e4c:	ldr	r3, [pc, #524]	; 16060 <__assert_fail@plt+0x4ac0>
   15e50:	mov	r2, #171	; 0xab
   15e54:	ldr	r1, [pc, #520]	; 16064 <__assert_fail@plt+0x4ac4>
   15e58:	ldr	r0, [pc, #524]	; 1606c <__assert_fail@plt+0x4acc>
   15e5c:	bl	115a0 <__assert_fail@plt>
   15e60:	ldr	r3, [pc, #504]	; 16060 <__assert_fail@plt+0x4ac0>
   15e64:	mov	r2, #172	; 0xac
   15e68:	ldr	r1, [pc, #500]	; 16064 <__assert_fail@plt+0x4ac4>
   15e6c:	ldr	r0, [pc, #508]	; 16070 <__assert_fail@plt+0x4ad0>
   15e70:	bl	115a0 <__assert_fail@plt>
   15e74:	ldr	r3, [fp, #-120]	; 0xffffff88
   15e78:	cmp	r3, #0
   15e7c:	bne	15d60 <__assert_fail@plt+0x47c0>
   15e80:	bl	11570 <abort@plt>
   15e84:	sub	r0, fp, #88	; 0x58
   15e88:	bl	11264 <mbsinit@plt>
   15e8c:	cmp	r0, #0
   15e90:	beq	15fbc <__assert_fail@plt+0x4a1c>
   15e94:	strb	r5, [fp, #-92]	; 0xffffffa4
   15e98:	ldr	r4, [fp, #-76]	; 0xffffffb4
   15e9c:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15ea0:	mov	r1, r0
   15ea4:	mov	r0, r4
   15ea8:	bl	189a4 <__assert_fail@plt+0x7404>
   15eac:	sub	r3, fp, #88	; 0x58
   15eb0:	mov	r2, r0
   15eb4:	mov	r1, r4
   15eb8:	sub	r0, fp, #64	; 0x40
   15ebc:	bl	19f04 <__assert_fail@plt+0x8964>
   15ec0:	str	r0, [fp, #-72]	; 0xffffffb8
   15ec4:	cmn	r0, #1
   15ec8:	streq	r5, [fp, #-72]	; 0xffffffb8
   15ecc:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   15ed0:	beq	15f18 <__assert_fail@plt+0x4978>
   15ed4:	cmn	r0, #2
   15ed8:	beq	15fd0 <__assert_fail@plt+0x4a30>
   15edc:	cmp	r0, #0
   15ee0:	bne	15f04 <__assert_fail@plt+0x4964>
   15ee4:	str	r5, [fp, #-72]	; 0xffffffb8
   15ee8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15eec:	ldrb	r3, [r3]
   15ef0:	cmp	r3, #0
   15ef4:	bne	15fe4 <__assert_fail@plt+0x4a44>
   15ef8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15efc:	cmp	r3, #0
   15f00:	bne	15ff8 <__assert_fail@plt+0x4a58>
   15f04:	strb	r5, [fp, #-68]	; 0xffffffbc
   15f08:	sub	r0, fp, #88	; 0x58
   15f0c:	bl	11264 <mbsinit@plt>
   15f10:	cmp	r0, #0
   15f14:	strbne	r6, [fp, #-92]	; 0xffffffa4
   15f18:	strb	r5, [fp, #-80]	; 0xffffffb0
   15f1c:	ldrb	r2, [fp, #-68]	; 0xffffffbc
   15f20:	cmp	r2, #0
   15f24:	addeq	r3, r8, r8, lsl #2
   15f28:	addeq	r3, r9, r3, lsl #3
   15f2c:	bne	1600c <__assert_fail@plt+0x4a6c>
   15f30:	ldr	r2, [r3, #4]
   15f34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15f38:	cmp	r2, r1
   15f3c:	ldrne	r0, [fp, #-152]	; 0xffffff68
   15f40:	beq	15b44 <__assert_fail@plt+0x45a4>
   15f44:	cmp	r0, #0
   15f48:	beq	15b7c <__assert_fail@plt+0x45dc>
   15f4c:	add	r8, r8, #1
   15f50:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15f54:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15f58:	add	r3, r3, r2
   15f5c:	str	r3, [fp, #-76]	; 0xffffffb4
   15f60:	strb	r6, [fp, #-80]	; 0xffffffb0
   15f64:	ldr	r3, [fp, #-160]	; 0xffffff60
   15f68:	cmp	r3, r8
   15f6c:	beq	15b5c <__assert_fail@plt+0x45bc>
   15f70:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15f74:	cmp	r3, #0
   15f78:	bne	15f1c <__assert_fail@plt+0x497c>
   15f7c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15f80:	cmp	r3, #0
   15f84:	bne	15e98 <__assert_fail@plt+0x48f8>
   15f88:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15f8c:	ldrb	r3, [r1]
   15f90:	lsr	r2, r3, #5
   15f94:	and	r3, r3, #31
   15f98:	ldr	r2, [r7, r2, lsl #2]
   15f9c:	lsr	r3, r2, r3
   15fa0:	tst	r3, #1
   15fa4:	beq	15e84 <__assert_fail@plt+0x48e4>
   15fa8:	str	r5, [fp, #-72]	; 0xffffffb8
   15fac:	ldrb	r3, [r1]
   15fb0:	str	r3, [fp, #-64]	; 0xffffffc0
   15fb4:	strb	r5, [fp, #-68]	; 0xffffffbc
   15fb8:	b	15f18 <__assert_fail@plt+0x4978>
   15fbc:	ldr	r3, [pc, #156]	; 16060 <__assert_fail@plt+0x4ac0>
   15fc0:	mov	r2, #143	; 0x8f
   15fc4:	ldr	r1, [pc, #152]	; 16064 <__assert_fail@plt+0x4ac4>
   15fc8:	ldr	r0, [pc, #152]	; 16068 <__assert_fail@plt+0x4ac8>
   15fcc:	bl	115a0 <__assert_fail@plt>
   15fd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15fd4:	bl	113f0 <strlen@plt>
   15fd8:	str	r0, [fp, #-72]	; 0xffffffb8
   15fdc:	strb	r6, [fp, #-68]	; 0xffffffbc
   15fe0:	b	15f18 <__assert_fail@plt+0x4978>
   15fe4:	ldr	r3, [pc, #116]	; 16060 <__assert_fail@plt+0x4ac0>
   15fe8:	mov	r2, #171	; 0xab
   15fec:	ldr	r1, [pc, #112]	; 16064 <__assert_fail@plt+0x4ac4>
   15ff0:	ldr	r0, [pc, #116]	; 1606c <__assert_fail@plt+0x4acc>
   15ff4:	bl	115a0 <__assert_fail@plt>
   15ff8:	ldr	r3, [pc, #96]	; 16060 <__assert_fail@plt+0x4ac0>
   15ffc:	mov	r2, #172	; 0xac
   16000:	ldr	r1, [pc, #92]	; 16064 <__assert_fail@plt+0x4ac4>
   16004:	ldr	r0, [pc, #100]	; 16070 <__assert_fail@plt+0x4ad0>
   16008:	bl	115a0 <__assert_fail@plt>
   1600c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16010:	cmp	r3, #0
   16014:	beq	15b68 <__assert_fail@plt+0x45c8>
   16018:	add	r3, r8, r8, lsl #2
   1601c:	add	r3, r9, r3, lsl #3
   16020:	ldrb	r1, [r3, #8]
   16024:	tst	r2, r1
   16028:	beq	15f30 <__assert_fail@plt+0x4990>
   1602c:	ldr	r0, [r3, #12]
   16030:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16034:	cmp	r0, r3
   16038:	movne	r0, #0
   1603c:	moveq	r0, #1
   16040:	b	15f44 <__assert_fail@plt+0x49a4>
   16044:	mov	r3, #0
   16048:	str	r3, [fp, #-164]	; 0xffffff5c
   1604c:	b	15b70 <__assert_fail@plt+0x45d0>
   16050:	ldr	r3, [fp, #-152]	; 0xffffff68
   16054:	str	r3, [fp, #-164]	; 0xffffff5c
   16058:	b	15b70 <__assert_fail@plt+0x45d0>
   1605c:	andeq	ip, r1, ip, lsl #26
   16060:	andeq	ip, r1, r4, lsr #16
   16064:	andeq	ip, r1, r8, lsr r8
   16068:	andeq	ip, r1, r4, asr #16
   1606c:	andeq	ip, r1, ip, asr r8
   16070:	andeq	ip, r1, r4, ror r8
   16074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16078:	sub	sp, sp, #300	; 0x12c
   1607c:	str	r0, [sp, #4]
   16080:	mov	sl, r1
   16084:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16088:	cmp	r0, #1
   1608c:	bls	16c34 <__assert_fail@plt+0x5694>
   16090:	str	sl, [sp, #32]
   16094:	mov	r3, #0
   16098:	strb	r3, [sp, #16]
   1609c:	str	r3, [sp, #20]
   160a0:	str	r3, [sp, #24]
   160a4:	strb	r3, [sp, #28]
   160a8:	ldrb	r2, [sl]
   160ac:	lsr	r0, r2, #5
   160b0:	and	r1, r2, #31
   160b4:	ldr	r3, [pc, #3320]	; 16db4 <__assert_fail@plt+0x5814>
   160b8:	ldr	r3, [r3, r0, lsl #2]
   160bc:	lsr	r3, r3, r1
   160c0:	tst	r3, #1
   160c4:	beq	16104 <__assert_fail@plt+0x4b64>
   160c8:	mov	r3, #1
   160cc:	str	r3, [sp, #36]	; 0x24
   160d0:	str	r2, [sp, #44]	; 0x2c
   160d4:	strb	r3, [sp, #40]	; 0x28
   160d8:	mov	r3, #1
   160dc:	strb	r3, [sp, #28]
   160e0:	ldrb	r3, [sp, #40]	; 0x28
   160e4:	cmp	r3, #0
   160e8:	beq	16208 <__assert_fail@plt+0x4c68>
   160ec:	ldr	r3, [sp, #44]	; 0x2c
   160f0:	cmp	r3, #0
   160f4:	ldreq	r0, [sp, #4]
   160f8:	bne	16208 <__assert_fail@plt+0x4c68>
   160fc:	add	sp, sp, #300	; 0x12c
   16100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16104:	add	r0, sp, #20
   16108:	bl	11264 <mbsinit@plt>
   1610c:	cmp	r0, #0
   16110:	beq	161a0 <__assert_fail@plt+0x4c00>
   16114:	mov	r3, #1
   16118:	strb	r3, [sp, #16]
   1611c:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16120:	mov	r1, r0
   16124:	mov	r0, sl
   16128:	bl	189a4 <__assert_fail@plt+0x7404>
   1612c:	add	r3, sp, #20
   16130:	mov	r2, r0
   16134:	mov	r1, sl
   16138:	add	r0, sp, #44	; 0x2c
   1613c:	bl	19f04 <__assert_fail@plt+0x8964>
   16140:	str	r0, [sp, #36]	; 0x24
   16144:	cmn	r0, #1
   16148:	beq	161b4 <__assert_fail@plt+0x4c14>
   1614c:	cmn	r0, #2
   16150:	beq	161c8 <__assert_fail@plt+0x4c28>
   16154:	cmp	r0, #0
   16158:	bne	16180 <__assert_fail@plt+0x4be0>
   1615c:	mov	r3, #1
   16160:	str	r3, [sp, #36]	; 0x24
   16164:	ldr	r3, [sp, #32]
   16168:	ldrb	r3, [r3]
   1616c:	cmp	r3, #0
   16170:	bne	161e0 <__assert_fail@plt+0x4c40>
   16174:	ldr	r3, [sp, #44]	; 0x2c
   16178:	cmp	r3, #0
   1617c:	bne	161f4 <__assert_fail@plt+0x4c54>
   16180:	mov	r3, #1
   16184:	strb	r3, [sp, #40]	; 0x28
   16188:	add	r0, sp, #20
   1618c:	bl	11264 <mbsinit@plt>
   16190:	cmp	r0, #0
   16194:	movne	r3, #0
   16198:	strbne	r3, [sp, #16]
   1619c:	b	160d8 <__assert_fail@plt+0x4b38>
   161a0:	ldr	r3, [pc, #3088]	; 16db8 <__assert_fail@plt+0x5818>
   161a4:	mov	r2, #143	; 0x8f
   161a8:	ldr	r1, [pc, #3084]	; 16dbc <__assert_fail@plt+0x581c>
   161ac:	ldr	r0, [pc, #3084]	; 16dc0 <__assert_fail@plt+0x5820>
   161b0:	bl	115a0 <__assert_fail@plt>
   161b4:	mov	r3, #1
   161b8:	str	r3, [sp, #36]	; 0x24
   161bc:	mov	r3, #0
   161c0:	strb	r3, [sp, #40]	; 0x28
   161c4:	b	160d8 <__assert_fail@plt+0x4b38>
   161c8:	ldr	r0, [sp, #32]
   161cc:	bl	113f0 <strlen@plt>
   161d0:	str	r0, [sp, #36]	; 0x24
   161d4:	mov	r3, #0
   161d8:	strb	r3, [sp, #40]	; 0x28
   161dc:	b	160d8 <__assert_fail@plt+0x4b38>
   161e0:	ldr	r3, [pc, #3024]	; 16db8 <__assert_fail@plt+0x5818>
   161e4:	mov	r2, #171	; 0xab
   161e8:	ldr	r1, [pc, #3020]	; 16dbc <__assert_fail@plt+0x581c>
   161ec:	ldr	r0, [pc, #3024]	; 16dc4 <__assert_fail@plt+0x5824>
   161f0:	bl	115a0 <__assert_fail@plt>
   161f4:	ldr	r3, [pc, #3004]	; 16db8 <__assert_fail@plt+0x5818>
   161f8:	mov	r2, #172	; 0xac
   161fc:	ldr	r1, [pc, #3000]	; 16dbc <__assert_fail@plt+0x581c>
   16200:	ldr	r0, [pc, #3008]	; 16dc8 <__assert_fail@plt+0x5828>
   16204:	bl	115a0 <__assert_fail@plt>
   16208:	str	sl, [sp, #88]	; 0x58
   1620c:	mov	r7, #0
   16210:	strb	r7, [sp, #72]	; 0x48
   16214:	str	r7, [sp, #76]	; 0x4c
   16218:	str	r7, [sp, #80]	; 0x50
   1621c:	strb	r7, [sp, #84]	; 0x54
   16220:	ldr	r3, [sp, #4]
   16224:	str	r3, [sp, #144]	; 0x90
   16228:	strb	r7, [sp, #128]	; 0x80
   1622c:	str	r7, [sp, #132]	; 0x84
   16230:	str	r7, [sp, #136]	; 0x88
   16234:	strb	r7, [sp, #140]	; 0x8c
   16238:	str	r7, [sp, #12]
   1623c:	mov	fp, r7
   16240:	mov	r3, #1
   16244:	mov	r4, r3
   16248:	mov	r5, r7
   1624c:	ldr	r8, [pc, #2912]	; 16db4 <__assert_fail@plt+0x5814>
   16250:	str	sl, [sp, #8]
   16254:	mov	sl, r3
   16258:	b	16ad4 <__assert_fail@plt+0x5534>
   1625c:	add	r0, sp, #132	; 0x84
   16260:	bl	11264 <mbsinit@plt>
   16264:	cmp	r0, #0
   16268:	beq	162f4 <__assert_fail@plt+0x4d54>
   1626c:	strb	r4, [sp, #128]	; 0x80
   16270:	ldr	r6, [sp, #144]	; 0x90
   16274:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16278:	mov	r1, r0
   1627c:	mov	r0, r6
   16280:	bl	189a4 <__assert_fail@plt+0x7404>
   16284:	add	r3, sp, #132	; 0x84
   16288:	mov	r2, r0
   1628c:	mov	r1, r6
   16290:	add	r0, sp, #156	; 0x9c
   16294:	bl	19f04 <__assert_fail@plt+0x8964>
   16298:	str	r0, [sp, #148]	; 0x94
   1629c:	cmn	r0, #1
   162a0:	streq	r4, [sp, #148]	; 0x94
   162a4:	strbeq	r5, [sp, #152]	; 0x98
   162a8:	beq	16b1c <__assert_fail@plt+0x557c>
   162ac:	cmn	r0, #2
   162b0:	beq	16308 <__assert_fail@plt+0x4d68>
   162b4:	cmp	r0, #0
   162b8:	bne	162dc <__assert_fail@plt+0x4d3c>
   162bc:	str	r4, [sp, #148]	; 0x94
   162c0:	ldr	r3, [sp, #144]	; 0x90
   162c4:	ldrb	r3, [r3]
   162c8:	cmp	r3, #0
   162cc:	bne	1631c <__assert_fail@plt+0x4d7c>
   162d0:	ldr	r3, [sp, #156]	; 0x9c
   162d4:	cmp	r3, #0
   162d8:	bne	16330 <__assert_fail@plt+0x4d90>
   162dc:	strb	r4, [sp, #152]	; 0x98
   162e0:	add	r0, sp, #132	; 0x84
   162e4:	bl	11264 <mbsinit@plt>
   162e8:	cmp	r0, #0
   162ec:	strbne	r5, [sp, #128]	; 0x80
   162f0:	b	16b1c <__assert_fail@plt+0x557c>
   162f4:	ldr	r3, [pc, #2748]	; 16db8 <__assert_fail@plt+0x5818>
   162f8:	mov	r2, #143	; 0x8f
   162fc:	ldr	r1, [pc, #2744]	; 16dbc <__assert_fail@plt+0x581c>
   16300:	ldr	r0, [pc, #2744]	; 16dc0 <__assert_fail@plt+0x5820>
   16304:	bl	115a0 <__assert_fail@plt>
   16308:	ldr	r0, [sp, #144]	; 0x90
   1630c:	bl	113f0 <strlen@plt>
   16310:	str	r0, [sp, #148]	; 0x94
   16314:	strb	r5, [sp, #152]	; 0x98
   16318:	b	16b1c <__assert_fail@plt+0x557c>
   1631c:	ldr	r3, [pc, #2708]	; 16db8 <__assert_fail@plt+0x5818>
   16320:	mov	r2, #171	; 0xab
   16324:	ldr	r1, [pc, #2704]	; 16dbc <__assert_fail@plt+0x581c>
   16328:	ldr	r0, [pc, #2708]	; 16dc4 <__assert_fail@plt+0x5824>
   1632c:	bl	115a0 <__assert_fail@plt>
   16330:	ldr	r3, [pc, #2688]	; 16db8 <__assert_fail@plt+0x5818>
   16334:	mov	r2, #172	; 0xac
   16338:	ldr	r1, [pc, #2684]	; 16dbc <__assert_fail@plt+0x581c>
   1633c:	ldr	r0, [pc, #2692]	; 16dc8 <__assert_fail@plt+0x5828>
   16340:	bl	115a0 <__assert_fail@plt>
   16344:	ldr	r3, [sp, #156]	; 0x9c
   16348:	cmp	r3, #0
   1634c:	beq	16c2c <__assert_fail@plt+0x568c>
   16350:	cmp	r7, #9
   16354:	movls	r3, #0
   16358:	andhi	r3, sl, #1
   1635c:	cmp	r3, #0
   16360:	beq	16da8 <__assert_fail@plt+0x5808>
   16364:	add	r3, r7, r7, lsl #2
   16368:	cmp	fp, r3
   1636c:	bcc	163d8 <__assert_fail@plt+0x4e38>
   16370:	ldr	r3, [sp, #12]
   16374:	subs	r6, fp, r3
   16378:	bne	164d0 <__assert_fail@plt+0x4f30>
   1637c:	ldrb	r3, [sp, #84]	; 0x54
   16380:	cmp	r3, #0
   16384:	bne	163c8 <__assert_fail@plt+0x4e28>
   16388:	ldrb	r3, [sp, #72]	; 0x48
   1638c:	cmp	r3, #0
   16390:	bne	165c4 <__assert_fail@plt+0x5024>
   16394:	ldr	r1, [sp, #88]	; 0x58
   16398:	ldrb	r3, [r1]
   1639c:	lsr	r2, r3, #5
   163a0:	and	r3, r3, #31
   163a4:	ldr	r2, [r8, r2, lsl #2]
   163a8:	lsr	r3, r2, r3
   163ac:	tst	r3, #1
   163b0:	beq	165b0 <__assert_fail@plt+0x5010>
   163b4:	str	r4, [sp, #92]	; 0x5c
   163b8:	ldrb	r3, [r1]
   163bc:	str	r3, [sp, #100]	; 0x64
   163c0:	strb	r4, [sp, #96]	; 0x60
   163c4:	strb	r4, [sp, #84]	; 0x54
   163c8:	ldrb	r3, [sp, #96]	; 0x60
   163cc:	cmp	r3, #0
   163d0:	streq	fp, [sp, #12]
   163d4:	bne	16584 <__assert_fail@plt+0x4fe4>
   163d8:	add	r7, r7, #1
   163dc:	add	r6, fp, #1
   163e0:	ldrb	r3, [sp, #152]	; 0x98
   163e4:	cmp	r3, #0
   163e8:	beq	16b48 <__assert_fail@plt+0x55a8>
   163ec:	ldrb	r3, [sp, #40]	; 0x28
   163f0:	cmp	r3, #0
   163f4:	beq	16b48 <__assert_fail@plt+0x55a8>
   163f8:	ldr	r3, [sp, #44]	; 0x2c
   163fc:	ldr	r0, [sp, #156]	; 0x9c
   16400:	cmp	r0, r3
   16404:	movne	r0, #0
   16408:	moveq	r0, #1
   1640c:	b	16b5c <__assert_fail@plt+0x55bc>
   16410:	add	r0, sp, #76	; 0x4c
   16414:	bl	11264 <mbsinit@plt>
   16418:	cmp	r0, #0
   1641c:	beq	1651c <__assert_fail@plt+0x4f7c>
   16420:	strb	r4, [sp, #72]	; 0x48
   16424:	ldr	r9, [sp, #88]	; 0x58
   16428:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1642c:	mov	r1, r0
   16430:	mov	r0, r9
   16434:	bl	189a4 <__assert_fail@plt+0x7404>
   16438:	add	r3, sp, #76	; 0x4c
   1643c:	mov	r2, r0
   16440:	mov	r1, r9
   16444:	add	r0, sp, #100	; 0x64
   16448:	bl	19f04 <__assert_fail@plt+0x8964>
   1644c:	str	r0, [sp, #92]	; 0x5c
   16450:	cmn	r0, #1
   16454:	streq	r4, [sp, #92]	; 0x5c
   16458:	strbeq	r5, [sp, #96]	; 0x60
   1645c:	beq	164a4 <__assert_fail@plt+0x4f04>
   16460:	cmn	r0, #2
   16464:	beq	16530 <__assert_fail@plt+0x4f90>
   16468:	cmp	r0, #0
   1646c:	bne	16490 <__assert_fail@plt+0x4ef0>
   16470:	str	r4, [sp, #92]	; 0x5c
   16474:	ldr	r3, [sp, #88]	; 0x58
   16478:	ldrb	r3, [r3]
   1647c:	cmp	r3, #0
   16480:	bne	16544 <__assert_fail@plt+0x4fa4>
   16484:	ldr	r3, [sp, #100]	; 0x64
   16488:	cmp	r3, #0
   1648c:	bne	16558 <__assert_fail@plt+0x4fb8>
   16490:	strb	r4, [sp, #96]	; 0x60
   16494:	add	r0, sp, #76	; 0x4c
   16498:	bl	11264 <mbsinit@plt>
   1649c:	cmp	r0, #0
   164a0:	strbne	r5, [sp, #72]	; 0x48
   164a4:	strb	r4, [sp, #84]	; 0x54
   164a8:	ldrb	r3, [sp, #96]	; 0x60
   164ac:	cmp	r3, #0
   164b0:	bne	1656c <__assert_fail@plt+0x4fcc>
   164b4:	ldr	r2, [sp, #92]	; 0x5c
   164b8:	ldr	r3, [sp, #88]	; 0x58
   164bc:	add	r3, r3, r2
   164c0:	str	r3, [sp, #88]	; 0x58
   164c4:	strb	r5, [sp, #84]	; 0x54
   164c8:	subs	r6, r6, #1
   164cc:	beq	16388 <__assert_fail@plt+0x4de8>
   164d0:	ldrb	r3, [sp, #84]	; 0x54
   164d4:	cmp	r3, #0
   164d8:	bne	164a8 <__assert_fail@plt+0x4f08>
   164dc:	ldrb	r3, [sp, #72]	; 0x48
   164e0:	cmp	r3, #0
   164e4:	bne	16424 <__assert_fail@plt+0x4e84>
   164e8:	ldr	r1, [sp, #88]	; 0x58
   164ec:	ldrb	r3, [r1]
   164f0:	lsr	r2, r3, #5
   164f4:	and	r3, r3, #31
   164f8:	ldr	r2, [r8, r2, lsl #2]
   164fc:	lsr	r3, r2, r3
   16500:	tst	r3, #1
   16504:	beq	16410 <__assert_fail@plt+0x4e70>
   16508:	str	r4, [sp, #92]	; 0x5c
   1650c:	ldrb	r3, [r1]
   16510:	str	r3, [sp, #100]	; 0x64
   16514:	strb	r4, [sp, #96]	; 0x60
   16518:	b	164a4 <__assert_fail@plt+0x4f04>
   1651c:	ldr	r3, [pc, #2196]	; 16db8 <__assert_fail@plt+0x5818>
   16520:	mov	r2, #143	; 0x8f
   16524:	ldr	r1, [pc, #2192]	; 16dbc <__assert_fail@plt+0x581c>
   16528:	ldr	r0, [pc, #2192]	; 16dc0 <__assert_fail@plt+0x5820>
   1652c:	bl	115a0 <__assert_fail@plt>
   16530:	ldr	r0, [sp, #88]	; 0x58
   16534:	bl	113f0 <strlen@plt>
   16538:	str	r0, [sp, #92]	; 0x5c
   1653c:	strb	r5, [sp, #96]	; 0x60
   16540:	b	164a4 <__assert_fail@plt+0x4f04>
   16544:	ldr	r3, [pc, #2156]	; 16db8 <__assert_fail@plt+0x5818>
   16548:	mov	r2, #171	; 0xab
   1654c:	ldr	r1, [pc, #2152]	; 16dbc <__assert_fail@plt+0x581c>
   16550:	ldr	r0, [pc, #2156]	; 16dc4 <__assert_fail@plt+0x5824>
   16554:	bl	115a0 <__assert_fail@plt>
   16558:	ldr	r3, [pc, #2136]	; 16db8 <__assert_fail@plt+0x5818>
   1655c:	mov	r2, #172	; 0xac
   16560:	ldr	r1, [pc, #2132]	; 16dbc <__assert_fail@plt+0x581c>
   16564:	ldr	r0, [pc, #2140]	; 16dc8 <__assert_fail@plt+0x5828>
   16568:	bl	115a0 <__assert_fail@plt>
   1656c:	ldr	r3, [sp, #100]	; 0x64
   16570:	cmp	r3, #0
   16574:	bne	164b4 <__assert_fail@plt+0x4f14>
   16578:	ldrb	r3, [sp, #84]	; 0x54
   1657c:	cmp	r3, #0
   16580:	beq	16388 <__assert_fail@plt+0x4de8>
   16584:	ldr	r3, [sp, #100]	; 0x64
   16588:	cmp	r3, #0
   1658c:	bne	166a0 <__assert_fail@plt+0x5100>
   16590:	add	r2, sp, #240	; 0xf0
   16594:	ldr	r1, [sp, #8]
   16598:	ldr	r0, [sp, #4]
   1659c:	bl	15798 <__assert_fail@plt+0x41f8>
   165a0:	subs	sl, r0, #0
   165a4:	bne	16698 <__assert_fail@plt+0x50f8>
   165a8:	str	fp, [sp, #12]
   165ac:	b	163d8 <__assert_fail@plt+0x4e38>
   165b0:	add	r0, sp, #76	; 0x4c
   165b4:	bl	11264 <mbsinit@plt>
   165b8:	cmp	r0, #0
   165bc:	beq	16648 <__assert_fail@plt+0x50a8>
   165c0:	strb	r4, [sp, #72]	; 0x48
   165c4:	ldr	r6, [sp, #88]	; 0x58
   165c8:	bl	11324 <__ctype_get_mb_cur_max@plt>
   165cc:	mov	r1, r0
   165d0:	mov	r0, r6
   165d4:	bl	189a4 <__assert_fail@plt+0x7404>
   165d8:	add	r3, sp, #76	; 0x4c
   165dc:	mov	r2, r0
   165e0:	mov	r1, r6
   165e4:	add	r0, sp, #100	; 0x64
   165e8:	bl	19f04 <__assert_fail@plt+0x8964>
   165ec:	str	r0, [sp, #92]	; 0x5c
   165f0:	cmn	r0, #1
   165f4:	streq	r4, [sp, #92]	; 0x5c
   165f8:	strbeq	r5, [sp, #96]	; 0x60
   165fc:	beq	163c4 <__assert_fail@plt+0x4e24>
   16600:	cmn	r0, #2
   16604:	beq	1665c <__assert_fail@plt+0x50bc>
   16608:	cmp	r0, #0
   1660c:	bne	16630 <__assert_fail@plt+0x5090>
   16610:	str	r4, [sp, #92]	; 0x5c
   16614:	ldr	r3, [sp, #88]	; 0x58
   16618:	ldrb	r3, [r3]
   1661c:	cmp	r3, #0
   16620:	bne	16670 <__assert_fail@plt+0x50d0>
   16624:	ldr	r3, [sp, #100]	; 0x64
   16628:	cmp	r3, #0
   1662c:	bne	16684 <__assert_fail@plt+0x50e4>
   16630:	strb	r4, [sp, #96]	; 0x60
   16634:	add	r0, sp, #76	; 0x4c
   16638:	bl	11264 <mbsinit@plt>
   1663c:	cmp	r0, #0
   16640:	strbne	r5, [sp, #72]	; 0x48
   16644:	b	163c4 <__assert_fail@plt+0x4e24>
   16648:	ldr	r3, [pc, #1896]	; 16db8 <__assert_fail@plt+0x5818>
   1664c:	mov	r2, #143	; 0x8f
   16650:	ldr	r1, [pc, #1892]	; 16dbc <__assert_fail@plt+0x581c>
   16654:	ldr	r0, [pc, #1892]	; 16dc0 <__assert_fail@plt+0x5820>
   16658:	bl	115a0 <__assert_fail@plt>
   1665c:	ldr	r0, [sp, #88]	; 0x58
   16660:	bl	113f0 <strlen@plt>
   16664:	str	r0, [sp, #92]	; 0x5c
   16668:	strb	r5, [sp, #96]	; 0x60
   1666c:	b	163c4 <__assert_fail@plt+0x4e24>
   16670:	ldr	r3, [pc, #1856]	; 16db8 <__assert_fail@plt+0x5818>
   16674:	mov	r2, #171	; 0xab
   16678:	ldr	r1, [pc, #1852]	; 16dbc <__assert_fail@plt+0x581c>
   1667c:	ldr	r0, [pc, #1856]	; 16dc4 <__assert_fail@plt+0x5824>
   16680:	bl	115a0 <__assert_fail@plt>
   16684:	ldr	r3, [pc, #1836]	; 16db8 <__assert_fail@plt+0x5818>
   16688:	mov	r2, #172	; 0xac
   1668c:	ldr	r1, [pc, #1832]	; 16dbc <__assert_fail@plt+0x581c>
   16690:	ldr	r0, [pc, #1840]	; 16dc8 <__assert_fail@plt+0x5828>
   16694:	bl	115a0 <__assert_fail@plt>
   16698:	ldr	r0, [sp, #240]	; 0xf0
   1669c:	b	160fc <__assert_fail@plt+0x4b5c>
   166a0:	str	fp, [sp, #12]
   166a4:	b	163d8 <__assert_fail@plt+0x4e38>
   166a8:	ldr	r1, [sp, #32]
   166ac:	ldr	r0, [sp, #144]	; 0x90
   166b0:	bl	1127c <memcmp@plt>
   166b4:	clz	r0, r0
   166b8:	lsr	r0, r0, #5
   166bc:	b	16b5c <__assert_fail@plt+0x55bc>
   166c0:	add	r0, sp, #244	; 0xf4
   166c4:	bl	11264 <mbsinit@plt>
   166c8:	cmp	r0, #0
   166cc:	beq	16758 <__assert_fail@plt+0x51b8>
   166d0:	strb	r4, [sp, #240]	; 0xf0
   166d4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   166d8:	mov	r1, r0
   166dc:	ldr	r6, [sp, #8]
   166e0:	mov	r0, r6
   166e4:	bl	189a4 <__assert_fail@plt+0x7404>
   166e8:	add	r3, sp, #244	; 0xf4
   166ec:	mov	r2, r0
   166f0:	mov	r1, r6
   166f4:	add	r0, sp, #268	; 0x10c
   166f8:	bl	19f04 <__assert_fail@plt+0x8964>
   166fc:	str	r0, [sp, #260]	; 0x104
   16700:	cmn	r0, #1
   16704:	streq	r4, [sp, #260]	; 0x104
   16708:	strbeq	r5, [sp, #264]	; 0x108
   1670c:	beq	16be0 <__assert_fail@plt+0x5640>
   16710:	cmn	r0, #2
   16714:	beq	1676c <__assert_fail@plt+0x51cc>
   16718:	cmp	r0, #0
   1671c:	bne	16740 <__assert_fail@plt+0x51a0>
   16720:	str	r4, [sp, #260]	; 0x104
   16724:	ldr	r3, [sp, #256]	; 0x100
   16728:	ldrb	r3, [r3]
   1672c:	cmp	r3, #0
   16730:	bne	16780 <__assert_fail@plt+0x51e0>
   16734:	ldr	r3, [sp, #268]	; 0x10c
   16738:	cmp	r3, #0
   1673c:	bne	16794 <__assert_fail@plt+0x51f4>
   16740:	strb	r4, [sp, #264]	; 0x108
   16744:	add	r0, sp, #244	; 0xf4
   16748:	bl	11264 <mbsinit@plt>
   1674c:	cmp	r0, #0
   16750:	strbne	r5, [sp, #240]	; 0xf0
   16754:	b	16be0 <__assert_fail@plt+0x5640>
   16758:	ldr	r3, [pc, #1624]	; 16db8 <__assert_fail@plt+0x5818>
   1675c:	mov	r2, #143	; 0x8f
   16760:	ldr	r1, [pc, #1620]	; 16dbc <__assert_fail@plt+0x581c>
   16764:	ldr	r0, [pc, #1620]	; 16dc0 <__assert_fail@plt+0x5820>
   16768:	bl	115a0 <__assert_fail@plt>
   1676c:	ldr	r0, [sp, #256]	; 0x100
   16770:	bl	113f0 <strlen@plt>
   16774:	str	r0, [sp, #260]	; 0x104
   16778:	strb	r5, [sp, #264]	; 0x108
   1677c:	b	16be0 <__assert_fail@plt+0x5640>
   16780:	ldr	r3, [pc, #1584]	; 16db8 <__assert_fail@plt+0x5818>
   16784:	mov	r2, #171	; 0xab
   16788:	ldr	r1, [pc, #1580]	; 16dbc <__assert_fail@plt+0x581c>
   1678c:	ldr	r0, [pc, #1584]	; 16dc4 <__assert_fail@plt+0x5824>
   16790:	bl	115a0 <__assert_fail@plt>
   16794:	ldr	r3, [pc, #1564]	; 16db8 <__assert_fail@plt+0x5818>
   16798:	mov	r2, #172	; 0xac
   1679c:	ldr	r1, [pc, #1560]	; 16dbc <__assert_fail@plt+0x581c>
   167a0:	ldr	r0, [pc, #1568]	; 16dc8 <__assert_fail@plt+0x5828>
   167a4:	bl	115a0 <__assert_fail@plt>
   167a8:	ldr	r3, [sp, #268]	; 0x10c
   167ac:	cmp	r3, #0
   167b0:	bne	16bf0 <__assert_fail@plt+0x5650>
   167b4:	bl	11570 <abort@plt>
   167b8:	add	r0, sp, #244	; 0xf4
   167bc:	bl	11264 <mbsinit@plt>
   167c0:	cmp	r0, #0
   167c4:	beq	16850 <__assert_fail@plt+0x52b0>
   167c8:	strb	r4, [sp, #240]	; 0xf0
   167cc:	ldr	r9, [sp, #256]	; 0x100
   167d0:	bl	11324 <__ctype_get_mb_cur_max@plt>
   167d4:	mov	r1, r0
   167d8:	mov	r0, r9
   167dc:	bl	189a4 <__assert_fail@plt+0x7404>
   167e0:	add	r3, sp, #244	; 0xf4
   167e4:	mov	r2, r0
   167e8:	mov	r1, r9
   167ec:	add	r0, sp, #268	; 0x10c
   167f0:	bl	19f04 <__assert_fail@plt+0x8964>
   167f4:	str	r0, [sp, #260]	; 0x104
   167f8:	cmn	r0, #1
   167fc:	streq	r4, [sp, #260]	; 0x104
   16800:	strbeq	r5, [sp, #264]	; 0x108
   16804:	beq	16a44 <__assert_fail@plt+0x54a4>
   16808:	cmn	r0, #2
   1680c:	beq	16864 <__assert_fail@plt+0x52c4>
   16810:	cmp	r0, #0
   16814:	bne	16838 <__assert_fail@plt+0x5298>
   16818:	str	r4, [sp, #260]	; 0x104
   1681c:	ldr	r3, [sp, #256]	; 0x100
   16820:	ldrb	r3, [r3]
   16824:	cmp	r3, #0
   16828:	bne	16878 <__assert_fail@plt+0x52d8>
   1682c:	ldr	r3, [sp, #268]	; 0x10c
   16830:	cmp	r3, #0
   16834:	bne	1688c <__assert_fail@plt+0x52ec>
   16838:	strb	r4, [sp, #264]	; 0x108
   1683c:	add	r0, sp, #244	; 0xf4
   16840:	bl	11264 <mbsinit@plt>
   16844:	cmp	r0, #0
   16848:	strbne	r5, [sp, #240]	; 0xf0
   1684c:	b	16a44 <__assert_fail@plt+0x54a4>
   16850:	ldr	r3, [pc, #1376]	; 16db8 <__assert_fail@plt+0x5818>
   16854:	mov	r2, #143	; 0x8f
   16858:	ldr	r1, [pc, #1372]	; 16dbc <__assert_fail@plt+0x581c>
   1685c:	ldr	r0, [pc, #1372]	; 16dc0 <__assert_fail@plt+0x5820>
   16860:	bl	115a0 <__assert_fail@plt>
   16864:	ldr	r0, [sp, #256]	; 0x100
   16868:	bl	113f0 <strlen@plt>
   1686c:	str	r0, [sp, #260]	; 0x104
   16870:	strb	r5, [sp, #264]	; 0x108
   16874:	b	16a44 <__assert_fail@plt+0x54a4>
   16878:	ldr	r3, [pc, #1336]	; 16db8 <__assert_fail@plt+0x5818>
   1687c:	mov	r2, #171	; 0xab
   16880:	ldr	r1, [pc, #1332]	; 16dbc <__assert_fail@plt+0x581c>
   16884:	ldr	r0, [pc, #1336]	; 16dc4 <__assert_fail@plt+0x5824>
   16888:	bl	115a0 <__assert_fail@plt>
   1688c:	ldr	r3, [pc, #1316]	; 16db8 <__assert_fail@plt+0x5818>
   16890:	mov	r2, #172	; 0xac
   16894:	ldr	r1, [pc, #1312]	; 16dbc <__assert_fail@plt+0x581c>
   16898:	ldr	r0, [pc, #1320]	; 16dc8 <__assert_fail@plt+0x5828>
   1689c:	bl	115a0 <__assert_fail@plt>
   168a0:	ldr	r3, [sp, #268]	; 0x10c
   168a4:	cmp	r3, #0
   168a8:	bne	16a54 <__assert_fail@plt+0x54b4>
   168ac:	ldr	r0, [sp, #144]	; 0x90
   168b0:	b	160fc <__assert_fail@plt+0x4b5c>
   168b4:	add	r0, sp, #188	; 0xbc
   168b8:	bl	11264 <mbsinit@plt>
   168bc:	cmp	r0, #0
   168c0:	beq	1694c <__assert_fail@plt+0x53ac>
   168c4:	strb	r4, [sp, #184]	; 0xb8
   168c8:	ldr	r9, [sp, #200]	; 0xc8
   168cc:	bl	11324 <__ctype_get_mb_cur_max@plt>
   168d0:	mov	r1, r0
   168d4:	mov	r0, r9
   168d8:	bl	189a4 <__assert_fail@plt+0x7404>
   168dc:	add	r3, sp, #188	; 0xbc
   168e0:	mov	r2, r0
   168e4:	mov	r1, r9
   168e8:	add	r0, sp, #212	; 0xd4
   168ec:	bl	19f04 <__assert_fail@plt+0x8964>
   168f0:	str	r0, [sp, #204]	; 0xcc
   168f4:	cmn	r0, #1
   168f8:	streq	r4, [sp, #204]	; 0xcc
   168fc:	strbeq	r5, [sp, #208]	; 0xd0
   16900:	beq	16a9c <__assert_fail@plt+0x54fc>
   16904:	cmn	r0, #2
   16908:	beq	16960 <__assert_fail@plt+0x53c0>
   1690c:	cmp	r0, #0
   16910:	bne	16934 <__assert_fail@plt+0x5394>
   16914:	str	r4, [sp, #204]	; 0xcc
   16918:	ldr	r3, [sp, #200]	; 0xc8
   1691c:	ldrb	r3, [r3]
   16920:	cmp	r3, #0
   16924:	bne	16974 <__assert_fail@plt+0x53d4>
   16928:	ldr	r3, [sp, #212]	; 0xd4
   1692c:	cmp	r3, #0
   16930:	bne	16988 <__assert_fail@plt+0x53e8>
   16934:	strb	r4, [sp, #208]	; 0xd0
   16938:	add	r0, sp, #188	; 0xbc
   1693c:	bl	11264 <mbsinit@plt>
   16940:	cmp	r0, #0
   16944:	strbne	r5, [sp, #184]	; 0xb8
   16948:	b	16a9c <__assert_fail@plt+0x54fc>
   1694c:	ldr	r3, [pc, #1124]	; 16db8 <__assert_fail@plt+0x5818>
   16950:	mov	r2, #143	; 0x8f
   16954:	ldr	r1, [pc, #1120]	; 16dbc <__assert_fail@plt+0x581c>
   16958:	ldr	r0, [pc, #1120]	; 16dc0 <__assert_fail@plt+0x5820>
   1695c:	bl	115a0 <__assert_fail@plt>
   16960:	ldr	r0, [sp, #200]	; 0xc8
   16964:	bl	113f0 <strlen@plt>
   16968:	str	r0, [sp, #204]	; 0xcc
   1696c:	strb	r5, [sp, #208]	; 0xd0
   16970:	b	16a9c <__assert_fail@plt+0x54fc>
   16974:	ldr	r3, [pc, #1084]	; 16db8 <__assert_fail@plt+0x5818>
   16978:	mov	r2, #171	; 0xab
   1697c:	ldr	r1, [pc, #1080]	; 16dbc <__assert_fail@plt+0x581c>
   16980:	ldr	r0, [pc, #1084]	; 16dc4 <__assert_fail@plt+0x5824>
   16984:	bl	115a0 <__assert_fail@plt>
   16988:	ldr	r3, [pc, #1064]	; 16db8 <__assert_fail@plt+0x5818>
   1698c:	mov	r2, #172	; 0xac
   16990:	ldr	r1, [pc, #1060]	; 16dbc <__assert_fail@plt+0x581c>
   16994:	ldr	r0, [pc, #1068]	; 16dc8 <__assert_fail@plt+0x5828>
   16998:	bl	115a0 <__assert_fail@plt>
   1699c:	ldr	r3, [sp, #212]	; 0xd4
   169a0:	cmp	r3, #0
   169a4:	beq	16c24 <__assert_fail@plt+0x5684>
   169a8:	ldrb	r3, [sp, #264]	; 0x108
   169ac:	cmp	r3, #0
   169b0:	beq	16aac <__assert_fail@plt+0x550c>
   169b4:	ldr	r3, [sp, #268]	; 0x10c
   169b8:	ldr	r0, [sp, #212]	; 0xd4
   169bc:	subs	r0, r0, r3
   169c0:	movne	r0, #1
   169c4:	add	r2, r6, #1
   169c8:	cmp	r0, #0
   169cc:	bne	16abc <__assert_fail@plt+0x551c>
   169d0:	ldr	r1, [sp, #204]	; 0xcc
   169d4:	ldr	r3, [sp, #200]	; 0xc8
   169d8:	add	r3, r3, r1
   169dc:	str	r3, [sp, #200]	; 0xc8
   169e0:	strb	r5, [sp, #196]	; 0xc4
   169e4:	ldr	r1, [sp, #260]	; 0x104
   169e8:	ldr	r3, [sp, #256]	; 0x100
   169ec:	add	r3, r3, r1
   169f0:	str	r3, [sp, #256]	; 0x100
   169f4:	strb	r5, [sp, #252]	; 0xfc
   169f8:	mov	r6, r2
   169fc:	ldrb	r3, [sp, #252]	; 0xfc
   16a00:	cmp	r3, #0
   16a04:	bne	16a48 <__assert_fail@plt+0x54a8>
   16a08:	ldrb	r3, [sp, #240]	; 0xf0
   16a0c:	cmp	r3, #0
   16a10:	bne	167cc <__assert_fail@plt+0x522c>
   16a14:	ldr	r1, [sp, #256]	; 0x100
   16a18:	ldrb	r3, [r1]
   16a1c:	lsr	r2, r3, #5
   16a20:	and	r3, r3, #31
   16a24:	ldr	r2, [r8, r2, lsl #2]
   16a28:	lsr	r3, r2, r3
   16a2c:	tst	r3, #1
   16a30:	beq	167b8 <__assert_fail@plt+0x5218>
   16a34:	str	r4, [sp, #260]	; 0x104
   16a38:	ldrb	r3, [r1]
   16a3c:	str	r3, [sp, #268]	; 0x10c
   16a40:	strb	r4, [sp, #264]	; 0x108
   16a44:	strb	r4, [sp, #252]	; 0xfc
   16a48:	ldrb	r3, [sp, #264]	; 0x108
   16a4c:	cmp	r3, #0
   16a50:	bne	168a0 <__assert_fail@plt+0x5300>
   16a54:	ldrb	r3, [sp, #196]	; 0xc4
   16a58:	cmp	r3, #0
   16a5c:	bne	16aa0 <__assert_fail@plt+0x5500>
   16a60:	ldrb	r3, [sp, #184]	; 0xb8
   16a64:	cmp	r3, #0
   16a68:	bne	168c8 <__assert_fail@plt+0x5328>
   16a6c:	ldr	r1, [sp, #200]	; 0xc8
   16a70:	ldrb	r3, [r1]
   16a74:	lsr	r2, r3, #5
   16a78:	and	r3, r3, #31
   16a7c:	ldr	r2, [r8, r2, lsl #2]
   16a80:	lsr	r3, r2, r3
   16a84:	tst	r3, #1
   16a88:	beq	168b4 <__assert_fail@plt+0x5314>
   16a8c:	str	r4, [sp, #204]	; 0xcc
   16a90:	ldrb	r3, [r1]
   16a94:	str	r3, [sp, #212]	; 0xd4
   16a98:	strb	r4, [sp, #208]	; 0xd0
   16a9c:	strb	r4, [sp, #196]	; 0xc4
   16aa0:	ldrb	r3, [sp, #208]	; 0xd0
   16aa4:	cmp	r3, #0
   16aa8:	bne	1699c <__assert_fail@plt+0x53fc>
   16aac:	ldr	r2, [sp, #204]	; 0xcc
   16ab0:	ldr	r3, [sp, #260]	; 0x104
   16ab4:	cmp	r2, r3
   16ab8:	beq	16c0c <__assert_fail@plt+0x566c>
   16abc:	ldr	r2, [sp, #148]	; 0x94
   16ac0:	ldr	r3, [sp, #144]	; 0x90
   16ac4:	add	r3, r3, r2
   16ac8:	str	r3, [sp, #144]	; 0x90
   16acc:	strb	r5, [sp, #140]	; 0x8c
   16ad0:	mov	fp, r6
   16ad4:	ldrb	r3, [sp, #140]	; 0x8c
   16ad8:	cmp	r3, #0
   16adc:	bne	16b20 <__assert_fail@plt+0x5580>
   16ae0:	ldrb	r3, [sp, #128]	; 0x80
   16ae4:	cmp	r3, #0
   16ae8:	bne	16270 <__assert_fail@plt+0x4cd0>
   16aec:	ldr	r1, [sp, #144]	; 0x90
   16af0:	ldrb	r3, [r1]
   16af4:	lsr	r2, r3, #5
   16af8:	and	r3, r3, #31
   16afc:	ldr	r2, [r8, r2, lsl #2]
   16b00:	lsr	r3, r2, r3
   16b04:	tst	r3, #1
   16b08:	beq	1625c <__assert_fail@plt+0x4cbc>
   16b0c:	str	r4, [sp, #148]	; 0x94
   16b10:	ldrb	r3, [r1]
   16b14:	str	r3, [sp, #156]	; 0x9c
   16b18:	strb	r4, [sp, #152]	; 0x98
   16b1c:	strb	r4, [sp, #140]	; 0x8c
   16b20:	ldrb	r3, [sp, #152]	; 0x98
   16b24:	cmp	r3, #0
   16b28:	bne	16344 <__assert_fail@plt+0x4da4>
   16b2c:	cmp	r7, #9
   16b30:	movls	r3, #0
   16b34:	andhi	r3, sl, #1
   16b38:	cmp	r3, #0
   16b3c:	addeq	r7, r7, #1
   16b40:	addeq	r6, fp, #1
   16b44:	bne	16364 <__assert_fail@plt+0x4dc4>
   16b48:	ldr	r2, [sp, #148]	; 0x94
   16b4c:	ldr	r3, [sp, #36]	; 0x24
   16b50:	cmp	r2, r3
   16b54:	movne	r0, r5
   16b58:	beq	166a8 <__assert_fail@plt+0x5108>
   16b5c:	cmp	r0, #0
   16b60:	beq	16abc <__assert_fail@plt+0x551c>
   16b64:	add	ip, sp, #184	; 0xb8
   16b68:	add	lr, sp, #128	; 0x80
   16b6c:	ldm	lr!, {r0, r1, r2, r3}
   16b70:	stmia	ip!, {r0, r1, r2, r3}
   16b74:	ldm	lr!, {r0, r1, r2, r3}
   16b78:	stmia	ip!, {r0, r1, r2, r3}
   16b7c:	ldm	lr!, {r0, r1, r2, r3}
   16b80:	stmia	ip!, {r0, r1, r2, r3}
   16b84:	ldm	lr, {r0, r1}
   16b88:	stm	ip, {r0, r1}
   16b8c:	ldr	r2, [sp, #204]	; 0xcc
   16b90:	ldr	r3, [sp, #200]	; 0xc8
   16b94:	add	r3, r3, r2
   16b98:	str	r3, [sp, #200]	; 0xc8
   16b9c:	strb	r5, [sp, #196]	; 0xc4
   16ba0:	ldr	r3, [sp, #8]
   16ba4:	str	r3, [sp, #256]	; 0x100
   16ba8:	strb	r5, [sp, #240]	; 0xf0
   16bac:	str	r5, [sp, #244]	; 0xf4
   16bb0:	str	r5, [sp, #248]	; 0xf8
   16bb4:	strb	r5, [sp, #252]	; 0xfc
   16bb8:	ldrb	r2, [r3]
   16bbc:	lsr	r3, r2, #5
   16bc0:	and	r1, r2, #31
   16bc4:	ldr	r3, [r8, r3, lsl #2]
   16bc8:	lsr	r3, r3, r1
   16bcc:	tst	r3, #1
   16bd0:	beq	166c0 <__assert_fail@plt+0x5120>
   16bd4:	str	r4, [sp, #260]	; 0x104
   16bd8:	str	r2, [sp, #268]	; 0x10c
   16bdc:	strb	r4, [sp, #264]	; 0x108
   16be0:	strb	r4, [sp, #252]	; 0xfc
   16be4:	ldrb	r3, [sp, #264]	; 0x108
   16be8:	cmp	r3, #0
   16bec:	bne	167a8 <__assert_fail@plt+0x5208>
   16bf0:	ldr	r2, [sp, #260]	; 0x104
   16bf4:	ldr	r3, [sp, #256]	; 0x100
   16bf8:	add	r3, r3, r2
   16bfc:	str	r3, [sp, #256]	; 0x100
   16c00:	strb	r5, [sp, #252]	; 0xfc
   16c04:	add	r6, fp, #2
   16c08:	b	169fc <__assert_fail@plt+0x545c>
   16c0c:	ldr	r1, [sp, #256]	; 0x100
   16c10:	ldr	r0, [sp, #200]	; 0xc8
   16c14:	bl	1127c <memcmp@plt>
   16c18:	adds	r0, r0, #0
   16c1c:	movne	r0, #1
   16c20:	b	169c4 <__assert_fail@plt+0x5424>
   16c24:	mov	r0, #0
   16c28:	b	160fc <__assert_fail@plt+0x4b5c>
   16c2c:	mov	r0, #0
   16c30:	b	160fc <__assert_fail@plt+0x4b5c>
   16c34:	ldrb	r7, [sl]
   16c38:	cmp	r7, #0
   16c3c:	beq	16d58 <__assert_fail@plt+0x57b8>
   16c40:	add	r3, sl, #1
   16c44:	str	r3, [sp, #8]
   16c48:	ldr	r5, [sp, #4]
   16c4c:	ldrb	r3, [r5]
   16c50:	cmp	r3, #0
   16c54:	beq	16d60 <__assert_fail@plt+0x57c0>
   16c58:	mov	r8, sl
   16c5c:	mov	r4, #0
   16c60:	mov	r6, r4
   16c64:	mov	r9, r4
   16c68:	mov	fp, #1
   16c6c:	mov	r0, r5
   16c70:	add	r6, r6, #1
   16c74:	add	r5, r5, #1
   16c78:	ldrb	r3, [r0]
   16c7c:	cmp	r3, r7
   16c80:	beq	16cf4 <__assert_fail@plt+0x5754>
   16c84:	str	r5, [sp, #4]
   16c88:	ldrb	r3, [r5]
   16c8c:	cmp	r3, #0
   16c90:	beq	16d50 <__assert_fail@plt+0x57b0>
   16c94:	add	r4, r4, #1
   16c98:	cmp	r6, #9
   16c9c:	movls	r3, #0
   16ca0:	andhi	r3, fp, #1
   16ca4:	cmp	r3, #0
   16ca8:	beq	16c6c <__assert_fail@plt+0x56cc>
   16cac:	add	r3, r6, r6, lsl #2
   16cb0:	cmp	r3, r4
   16cb4:	bhi	16c6c <__assert_fail@plt+0x56cc>
   16cb8:	cmp	r8, #0
   16cbc:	beq	16d7c <__assert_fail@plt+0x57dc>
   16cc0:	sub	r1, r4, r9
   16cc4:	mov	r0, r8
   16cc8:	bl	1148c <strnlen@plt>
   16ccc:	ldrb	r3, [r8, r0]!
   16cd0:	cmp	r3, #0
   16cd4:	beq	16d78 <__assert_fail@plt+0x57d8>
   16cd8:	cmp	r8, #0
   16cdc:	movne	r9, r4
   16ce0:	bne	16c6c <__assert_fail@plt+0x56cc>
   16ce4:	mov	r9, r4
   16ce8:	b	16d7c <__assert_fail@plt+0x57dc>
   16cec:	ldr	r0, [sp, #240]	; 0xf0
   16cf0:	b	160fc <__assert_fail@plt+0x4b5c>
   16cf4:	ldrb	r3, [sl, #1]
   16cf8:	cmp	r3, #0
   16cfc:	beq	160fc <__assert_fail@plt+0x4b5c>
   16d00:	mov	lr, r5
   16d04:	ldrb	r2, [r5]
   16d08:	cmp	r2, #0
   16d0c:	beq	16d68 <__assert_fail@plt+0x57c8>
   16d10:	add	r4, r4, #2
   16d14:	cmp	r3, r2
   16d18:	bne	16d48 <__assert_fail@plt+0x57a8>
   16d1c:	mov	ip, r5
   16d20:	ldr	r1, [sp, #8]
   16d24:	ldrb	r3, [r1, #1]!
   16d28:	cmp	r3, #0
   16d2c:	beq	160fc <__assert_fail@plt+0x4b5c>
   16d30:	ldrb	r2, [ip, #1]!
   16d34:	cmp	r2, #0
   16d38:	beq	16d70 <__assert_fail@plt+0x57d0>
   16d3c:	add	r4, r4, #1
   16d40:	cmp	r3, r2
   16d44:	beq	16d24 <__assert_fail@plt+0x5784>
   16d48:	str	lr, [sp, #4]
   16d4c:	b	16c98 <__assert_fail@plt+0x56f8>
   16d50:	mov	r0, #0
   16d54:	b	160fc <__assert_fail@plt+0x4b5c>
   16d58:	ldr	r0, [sp, #4]
   16d5c:	b	160fc <__assert_fail@plt+0x4b5c>
   16d60:	mov	r0, #0
   16d64:	b	160fc <__assert_fail@plt+0x4b5c>
   16d68:	mov	r0, #0
   16d6c:	b	160fc <__assert_fail@plt+0x4b5c>
   16d70:	mov	r0, #0
   16d74:	b	160fc <__assert_fail@plt+0x4b5c>
   16d78:	mov	r9, r4
   16d7c:	mov	r0, sl
   16d80:	bl	113f0 <strlen@plt>
   16d84:	add	r3, sp, #240	; 0xf0
   16d88:	mov	r2, r0
   16d8c:	mov	r1, sl
   16d90:	ldr	r0, [sp, #4]
   16d94:	bl	15640 <__assert_fail@plt+0x40a0>
   16d98:	subs	fp, r0, #0
   16d9c:	bne	16cec <__assert_fail@plt+0x574c>
   16da0:	mov	r8, #0
   16da4:	b	16c6c <__assert_fail@plt+0x56cc>
   16da8:	add	r7, r7, #1
   16dac:	add	r6, fp, #1
   16db0:	b	163ec <__assert_fail@plt+0x4e4c>
   16db4:	andeq	ip, r1, ip, lsl #26
   16db8:	andeq	ip, r1, r4, lsr #16
   16dbc:	andeq	ip, r1, r8, lsr r8
   16dc0:	andeq	ip, r1, r4, asr #16
   16dc4:	andeq	ip, r1, ip, asr r8
   16dc8:	andeq	ip, r1, r4, ror r8
   16dcc:	push	{r4, r5, r6, lr}
   16dd0:	subs	r4, r0, #0
   16dd4:	beq	16e4c <__assert_fail@plt+0x58ac>
   16dd8:	mov	r1, #47	; 0x2f
   16ddc:	mov	r0, r4
   16de0:	bl	114e0 <strrchr@plt>
   16de4:	cmp	r0, #0
   16de8:	addne	r5, r0, #1
   16dec:	moveq	r5, r4
   16df0:	sub	r3, r5, r4
   16df4:	cmp	r3, #6
   16df8:	ble	16e38 <__assert_fail@plt+0x5898>
   16dfc:	mov	r2, #7
   16e00:	ldr	r1, [pc, #96]	; 16e68 <__assert_fail@plt+0x58c8>
   16e04:	sub	r0, r5, #7
   16e08:	bl	11564 <strncmp@plt>
   16e0c:	cmp	r0, #0
   16e10:	bne	16e38 <__assert_fail@plt+0x5898>
   16e14:	mov	r2, #3
   16e18:	ldr	r1, [pc, #76]	; 16e6c <__assert_fail@plt+0x58cc>
   16e1c:	mov	r0, r5
   16e20:	bl	11564 <strncmp@plt>
   16e24:	cmp	r0, #0
   16e28:	addeq	r4, r5, #3
   16e2c:	ldreq	r3, [pc, #60]	; 16e70 <__assert_fail@plt+0x58d0>
   16e30:	streq	r4, [r3]
   16e34:	movne	r4, r5
   16e38:	ldr	r3, [pc, #52]	; 16e74 <__assert_fail@plt+0x58d4>
   16e3c:	str	r4, [r3]
   16e40:	ldr	r3, [pc, #48]	; 16e78 <__assert_fail@plt+0x58d8>
   16e44:	str	r4, [r3]
   16e48:	pop	{r4, r5, r6, pc}
   16e4c:	ldr	r3, [pc, #40]	; 16e7c <__assert_fail@plt+0x58dc>
   16e50:	ldr	r3, [r3]
   16e54:	mov	r2, #55	; 0x37
   16e58:	mov	r1, #1
   16e5c:	ldr	r0, [pc, #28]	; 16e80 <__assert_fail@plt+0x58e0>
   16e60:	bl	11300 <fwrite@plt>
   16e64:	bl	11570 <abort@plt>
   16e68:	andeq	ip, r1, r0, asr #17
   16e6c:	andeq	ip, r1, r8, asr #17
   16e70:			; <UNDEFINED> instruction: 0x0002d1b8
   16e74:			; <UNDEFINED> instruction: 0x0002d2b0
   16e78:	andeq	sp, r2, r0, asr #3
   16e7c:	ldrdeq	sp, [r2], -r0
   16e80:	andeq	ip, r1, r8, lsl #17
   16e84:	push	{r4, r5, r6, lr}
   16e88:	mov	r5, r0
   16e8c:	mov	r4, r1
   16e90:	mov	r2, #48	; 0x30
   16e94:	mov	r1, #0
   16e98:	bl	11444 <memset@plt>
   16e9c:	cmp	r4, #10
   16ea0:	beq	16eb0 <__assert_fail@plt+0x5910>
   16ea4:	str	r4, [r5]
   16ea8:	mov	r0, r5
   16eac:	pop	{r4, r5, r6, pc}
   16eb0:	bl	11570 <abort@plt>
   16eb4:	push	{r4, r5, r6, lr}
   16eb8:	mov	r4, r0
   16ebc:	mov	r5, r1
   16ec0:	mov	r2, #5
   16ec4:	mov	r1, r0
   16ec8:	mov	r0, #0
   16ecc:	bl	11288 <dcgettext@plt>
   16ed0:	cmp	r4, r0
   16ed4:	popne	{r4, r5, r6, pc}
   16ed8:	bl	1a0d4 <__assert_fail@plt+0x8b34>
   16edc:	ldrb	r3, [r0]
   16ee0:	bic	r3, r3, #32
   16ee4:	cmp	r3, #85	; 0x55
   16ee8:	beq	16f64 <__assert_fail@plt+0x59c4>
   16eec:	cmp	r3, #71	; 0x47
   16ef0:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16ef4:	ldrb	r3, [r0, #1]
   16ef8:	bic	r3, r3, #32
   16efc:	cmp	r3, #66	; 0x42
   16f00:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f04:	ldrb	r3, [r0, #2]
   16f08:	cmp	r3, #49	; 0x31
   16f0c:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f10:	ldrb	r3, [r0, #3]
   16f14:	cmp	r3, #56	; 0x38
   16f18:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f1c:	ldrb	r3, [r0, #4]
   16f20:	cmp	r3, #48	; 0x30
   16f24:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f28:	ldrb	r3, [r0, #5]
   16f2c:	cmp	r3, #51	; 0x33
   16f30:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f34:	ldrb	r3, [r0, #6]
   16f38:	cmp	r3, #48	; 0x30
   16f3c:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f40:	ldrb	r3, [r0, #7]
   16f44:	cmp	r3, #0
   16f48:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f4c:	ldrb	r2, [r4]
   16f50:	ldr	r3, [pc, #124]	; 16fd4 <__assert_fail@plt+0x5a34>
   16f54:	ldr	r0, [pc, #124]	; 16fd8 <__assert_fail@plt+0x5a38>
   16f58:	cmp	r2, #96	; 0x60
   16f5c:	movne	r0, r3
   16f60:	pop	{r4, r5, r6, pc}
   16f64:	ldrb	r3, [r0, #1]
   16f68:	bic	r3, r3, #32
   16f6c:	cmp	r3, #84	; 0x54
   16f70:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f74:	ldrb	r3, [r0, #2]
   16f78:	bic	r3, r3, #32
   16f7c:	cmp	r3, #70	; 0x46
   16f80:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f84:	ldrb	r3, [r0, #3]
   16f88:	cmp	r3, #45	; 0x2d
   16f8c:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f90:	ldrb	r3, [r0, #4]
   16f94:	cmp	r3, #56	; 0x38
   16f98:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16f9c:	ldrb	r3, [r0, #5]
   16fa0:	cmp	r3, #0
   16fa4:	bne	16fc0 <__assert_fail@plt+0x5a20>
   16fa8:	ldrb	r2, [r4]
   16fac:	ldr	r3, [pc, #40]	; 16fdc <__assert_fail@plt+0x5a3c>
   16fb0:	ldr	r0, [pc, #40]	; 16fe0 <__assert_fail@plt+0x5a40>
   16fb4:	cmp	r2, #96	; 0x60
   16fb8:	movne	r0, r3
   16fbc:	pop	{r4, r5, r6, pc}
   16fc0:	ldr	r3, [pc, #28]	; 16fe4 <__assert_fail@plt+0x5a44>
   16fc4:	ldr	r0, [pc, #28]	; 16fe8 <__assert_fail@plt+0x5a48>
   16fc8:	cmp	r5, #9
   16fcc:	movne	r0, r3
   16fd0:	pop	{r4, r5, r6, pc}
   16fd4:	andeq	ip, r1, r4, lsr #18
   16fd8:	andeq	ip, r1, r0, lsr r9
   16fdc:	andeq	ip, r1, r0, lsr #18
   16fe0:	andeq	ip, r1, r4, lsr r9
   16fe4:	andeq	ip, r1, r8, lsr #18
   16fe8:	andeq	ip, r1, ip, lsr #18
   16fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ff0:	sub	sp, sp, #116	; 0x74
   16ff4:	str	r0, [sp, #36]	; 0x24
   16ff8:	mov	sl, r1
   16ffc:	str	r2, [sp, #52]	; 0x34
   17000:	str	r3, [sp, #28]
   17004:	ldr	r8, [sp, #152]	; 0x98
   17008:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1700c:	str	r0, [sp, #84]	; 0x54
   17010:	ldr	r3, [sp, #156]	; 0x9c
   17014:	lsr	r3, r3, #1
   17018:	and	r3, r3, #1
   1701c:	str	r3, [sp, #32]
   17020:	mov	r3, #1
   17024:	str	r3, [sp, #40]	; 0x28
   17028:	mov	r3, #0
   1702c:	str	r3, [sp, #80]	; 0x50
   17030:	str	r3, [sp, #44]	; 0x2c
   17034:	str	r3, [sp, #48]	; 0x30
   17038:	str	r3, [sp, #60]	; 0x3c
   1703c:	str	r3, [sp, #72]	; 0x48
   17040:	str	r3, [sp, #76]	; 0x4c
   17044:	mov	r7, sl
   17048:	mov	sl, r8
   1704c:	cmp	sl, #10
   17050:	ldrls	pc, [pc, sl, lsl #2]
   17054:	b	1720c <__assert_fail@plt+0x5c6c>
   17058:	strheq	r7, [r1], -ip
   1705c:	andeq	r7, r1, ip, lsl #1
   17060:	andeq	r7, r1, r8, ror #3
   17064:	andeq	r7, r1, r4, lsl #1
   17068:	muleq	r1, ip, r1
   1706c:	andeq	r7, r1, ip, asr #1
   17070:	andeq	r8, r1, r8, lsr r1
   17074:	andeq	r7, r1, r0, lsl r2
   17078:	andeq	r7, r1, r8, lsl #2
   1707c:	andeq	r7, r1, r8, lsl #2
   17080:	andeq	r7, r1, r8, lsl #2
   17084:	mov	r3, #1
   17088:	str	r3, [sp, #48]	; 0x30
   1708c:	mov	r3, #1
   17090:	str	r3, [sp, #32]
   17094:	str	r3, [sp, #60]	; 0x3c
   17098:	ldr	r3, [pc, #4068]	; 18084 <__assert_fail@plt+0x6ae4>
   1709c:	str	r3, [sp, #72]	; 0x48
   170a0:	mov	fp, #0
   170a4:	mov	sl, #2
   170a8:	mov	r6, #0
   170ac:	ldr	r3, [sp, #48]	; 0x30
   170b0:	eor	r3, r3, #1
   170b4:	str	r3, [sp, #68]	; 0x44
   170b8:	b	179a0 <__assert_fail@plt+0x6400>
   170bc:	mov	r3, #0
   170c0:	str	r3, [sp, #32]
   170c4:	mov	fp, r3
   170c8:	b	170a8 <__assert_fail@plt+0x5b08>
   170cc:	ldr	r3, [sp, #32]
   170d0:	cmp	r3, #0
   170d4:	bne	17228 <__assert_fail@plt+0x5c88>
   170d8:	cmp	r7, #0
   170dc:	beq	17248 <__assert_fail@plt+0x5ca8>
   170e0:	ldr	r3, [sp, #36]	; 0x24
   170e4:	mov	r2, #34	; 0x22
   170e8:	strb	r2, [r3]
   170ec:	mov	r3, #1
   170f0:	str	r3, [sp, #48]	; 0x30
   170f4:	str	r3, [sp, #60]	; 0x3c
   170f8:	ldr	r3, [pc, #3980]	; 1808c <__assert_fail@plt+0x6aec>
   170fc:	str	r3, [sp, #72]	; 0x48
   17100:	mov	fp, #1
   17104:	b	170a8 <__assert_fail@plt+0x5b08>
   17108:	cmp	sl, #10
   1710c:	beq	17130 <__assert_fail@plt+0x5b90>
   17110:	mov	r1, sl
   17114:	ldr	r0, [pc, #3948]	; 18088 <__assert_fail@plt+0x6ae8>
   17118:	bl	16eb4 <__assert_fail@plt+0x5914>
   1711c:	str	r0, [sp, #164]	; 0xa4
   17120:	mov	r1, sl
   17124:	ldr	r0, [pc, #3928]	; 18084 <__assert_fail@plt+0x6ae4>
   17128:	bl	16eb4 <__assert_fail@plt+0x5914>
   1712c:	str	r0, [sp, #168]	; 0xa8
   17130:	ldr	r3, [sp, #32]
   17134:	cmp	r3, #0
   17138:	movne	fp, #0
   1713c:	bne	17174 <__assert_fail@plt+0x5bd4>
   17140:	ldr	r3, [sp, #164]	; 0xa4
   17144:	ldrb	r3, [r3]
   17148:	cmp	r3, #0
   1714c:	beq	17194 <__assert_fail@plt+0x5bf4>
   17150:	ldr	r2, [sp, #164]	; 0xa4
   17154:	mov	fp, #0
   17158:	ldr	r1, [sp, #36]	; 0x24
   1715c:	cmp	r7, fp
   17160:	strbhi	r3, [r1, fp]
   17164:	add	fp, fp, #1
   17168:	ldrb	r3, [r2, #1]!
   1716c:	cmp	r3, #0
   17170:	bne	1715c <__assert_fail@plt+0x5bbc>
   17174:	ldr	r0, [sp, #168]	; 0xa8
   17178:	bl	113f0 <strlen@plt>
   1717c:	str	r0, [sp, #60]	; 0x3c
   17180:	ldr	r3, [sp, #168]	; 0xa8
   17184:	str	r3, [sp, #72]	; 0x48
   17188:	mov	r3, #1
   1718c:	str	r3, [sp, #48]	; 0x30
   17190:	b	170a8 <__assert_fail@plt+0x5b08>
   17194:	mov	fp, #0
   17198:	b	17174 <__assert_fail@plt+0x5bd4>
   1719c:	ldr	r3, [sp, #32]
   171a0:	cmp	r3, #0
   171a4:	bne	17264 <__assert_fail@plt+0x5cc4>
   171a8:	mov	r3, #1
   171ac:	str	r3, [sp, #48]	; 0x30
   171b0:	cmp	r7, #0
   171b4:	beq	17280 <__assert_fail@plt+0x5ce0>
   171b8:	ldr	r3, [sp, #36]	; 0x24
   171bc:	mov	r2, #39	; 0x27
   171c0:	strb	r2, [r3]
   171c4:	mov	r3, #0
   171c8:	str	r3, [sp, #32]
   171cc:	mov	r3, #1
   171d0:	str	r3, [sp, #60]	; 0x3c
   171d4:	ldr	r3, [pc, #3752]	; 18084 <__assert_fail@plt+0x6ae4>
   171d8:	str	r3, [sp, #72]	; 0x48
   171dc:	mov	fp, #1
   171e0:	mov	sl, #2
   171e4:	b	170a8 <__assert_fail@plt+0x5b08>
   171e8:	ldr	r3, [sp, #32]
   171ec:	cmp	r3, #0
   171f0:	beq	171b0 <__assert_fail@plt+0x5c10>
   171f4:	mov	r3, #1
   171f8:	str	r3, [sp, #60]	; 0x3c
   171fc:	ldr	r3, [pc, #3712]	; 18084 <__assert_fail@plt+0x6ae4>
   17200:	str	r3, [sp, #72]	; 0x48
   17204:	mov	fp, #0
   17208:	b	170a8 <__assert_fail@plt+0x5b08>
   1720c:	bl	11570 <abort@plt>
   17210:	mov	r3, #0
   17214:	str	r3, [sp, #32]
   17218:	mov	r3, #1
   1721c:	str	r3, [sp, #48]	; 0x30
   17220:	mov	fp, #0
   17224:	b	170a8 <__assert_fail@plt+0x5b08>
   17228:	ldr	r3, [sp, #32]
   1722c:	str	r3, [sp, #48]	; 0x30
   17230:	mov	r3, #1
   17234:	str	r3, [sp, #60]	; 0x3c
   17238:	ldr	r3, [pc, #3660]	; 1808c <__assert_fail@plt+0x6aec>
   1723c:	str	r3, [sp, #72]	; 0x48
   17240:	mov	fp, #0
   17244:	b	170a8 <__assert_fail@plt+0x5b08>
   17248:	mov	r3, #1
   1724c:	str	r3, [sp, #48]	; 0x30
   17250:	str	r3, [sp, #60]	; 0x3c
   17254:	ldr	r3, [pc, #3632]	; 1808c <__assert_fail@plt+0x6aec>
   17258:	str	r3, [sp, #72]	; 0x48
   1725c:	mov	fp, #1
   17260:	b	170a8 <__assert_fail@plt+0x5b08>
   17264:	mov	r3, #1
   17268:	str	r3, [sp, #60]	; 0x3c
   1726c:	ldr	r3, [pc, #3600]	; 18084 <__assert_fail@plt+0x6ae4>
   17270:	str	r3, [sp, #72]	; 0x48
   17274:	mov	fp, #0
   17278:	mov	sl, #2
   1727c:	b	170a8 <__assert_fail@plt+0x5b08>
   17280:	mov	r3, #0
   17284:	str	r3, [sp, #32]
   17288:	mov	r3, #1
   1728c:	str	r3, [sp, #60]	; 0x3c
   17290:	ldr	r3, [pc, #3564]	; 18084 <__assert_fail@plt+0x6ae4>
   17294:	str	r3, [sp, #72]	; 0x48
   17298:	mov	fp, #1
   1729c:	mov	sl, #2
   172a0:	b	170a8 <__assert_fail@plt+0x5b08>
   172a4:	mov	r3, #0
   172a8:	str	r3, [sp, #56]	; 0x38
   172ac:	ldr	r3, [sp, #52]	; 0x34
   172b0:	add	r2, r3, r6
   172b4:	str	r2, [sp, #64]	; 0x40
   172b8:	ldrb	r4, [r3, r6]
   172bc:	cmp	r4, #126	; 0x7e
   172c0:	ldrls	pc, [pc, r4, lsl #2]
   172c4:	b	17b00 <__assert_fail@plt+0x6560>
   172c8:	andeq	r7, r1, r0, ror #9
   172cc:	andeq	r7, r1, r0, lsl #22
   172d0:	andeq	r7, r1, r0, lsl #22
   172d4:	andeq	r7, r1, r0, lsl #22
   172d8:	andeq	r7, r1, r0, lsl #22
   172dc:	andeq	r7, r1, r0, lsl #22
   172e0:	andeq	r7, r1, r0, lsl #22
   172e4:	andeq	r7, r1, ip, lsr r8
   172e8:	ldrdeq	r7, [r1], -r8
   172ec:	strdeq	r7, [r1], -r4
   172f0:	andeq	r7, r1, ip, ror #15
   172f4:	andeq	r7, r1, ip, asr r7
   172f8:	andeq	r7, r1, r4, asr r7
   172fc:	ldrdeq	r7, [r1], -r0
   17300:	andeq	r7, r1, r0, lsl #22
   17304:	andeq	r7, r1, r0, lsl #22
   17308:	andeq	r7, r1, r0, lsl #22
   1730c:	andeq	r7, r1, r0, lsl #22
   17310:	andeq	r7, r1, r0, lsl #22
   17314:	andeq	r7, r1, r0, lsl #22
   17318:	andeq	r7, r1, r0, lsl #22
   1731c:	andeq	r7, r1, r0, lsl #22
   17320:	andeq	r7, r1, r0, lsl #22
   17324:	andeq	r7, r1, r0, lsl #22
   17328:	andeq	r7, r1, r0, lsl #22
   1732c:	andeq	r7, r1, r0, lsl #22
   17330:	andeq	r7, r1, r0, lsl #22
   17334:	andeq	r7, r1, r0, lsl #22
   17338:	andeq	r7, r1, r0, lsl #22
   1733c:	andeq	r7, r1, r0, lsl #22
   17340:	andeq	r7, r1, r0, lsl #22
   17344:	andeq	r7, r1, r0, lsl #22
   17348:	muleq	r1, r0, r8
   1734c:	andeq	r7, r1, ip, lsl #17
   17350:	andeq	r7, r1, ip, lsl #17
   17354:	andeq	r7, r1, r4, ror #16
   17358:	andeq	r7, r1, ip, lsl #17
   1735c:	ldrdeq	r7, [r1], -r4
   17360:	andeq	r7, r1, ip, lsl #17
   17364:	andeq	r7, r1, r4, ror #20
   17368:	andeq	r7, r1, ip, lsl #17
   1736c:	andeq	r7, r1, ip, lsl #17
   17370:	andeq	r7, r1, ip, lsl #17
   17374:	ldrdeq	r7, [r1], -r4
   17378:	ldrdeq	r7, [r1], -r4
   1737c:	ldrdeq	r7, [r1], -r4
   17380:	ldrdeq	r7, [r1], -r4
   17384:	ldrdeq	r7, [r1], -r4
   17388:	ldrdeq	r7, [r1], -r4
   1738c:	ldrdeq	r7, [r1], -r4
   17390:	ldrdeq	r7, [r1], -r4
   17394:	ldrdeq	r7, [r1], -r4
   17398:	ldrdeq	r7, [r1], -r4
   1739c:	ldrdeq	r7, [r1], -r4
   173a0:	ldrdeq	r7, [r1], -r4
   173a4:	ldrdeq	r7, [r1], -r4
   173a8:	ldrdeq	r7, [r1], -r4
   173ac:	ldrdeq	r7, [r1], -r4
   173b0:	ldrdeq	r7, [r1], -r4
   173b4:	andeq	r7, r1, ip, lsl #17
   173b8:	andeq	r7, r1, ip, lsl #17
   173bc:	andeq	r7, r1, ip, lsl #17
   173c0:	andeq	r7, r1, ip, lsl #17
   173c4:	andeq	r7, r1, r8, ror #11
   173c8:	andeq	r7, r1, r0, lsl #22
   173cc:	ldrdeq	r7, [r1], -r4
   173d0:	ldrdeq	r7, [r1], -r4
   173d4:	ldrdeq	r7, [r1], -r4
   173d8:	ldrdeq	r7, [r1], -r4
   173dc:	ldrdeq	r7, [r1], -r4
   173e0:	ldrdeq	r7, [r1], -r4
   173e4:	ldrdeq	r7, [r1], -r4
   173e8:	ldrdeq	r7, [r1], -r4
   173ec:	ldrdeq	r7, [r1], -r4
   173f0:	ldrdeq	r7, [r1], -r4
   173f4:	ldrdeq	r7, [r1], -r4
   173f8:	ldrdeq	r7, [r1], -r4
   173fc:	ldrdeq	r7, [r1], -r4
   17400:	ldrdeq	r7, [r1], -r4
   17404:	ldrdeq	r7, [r1], -r4
   17408:	ldrdeq	r7, [r1], -r4
   1740c:	ldrdeq	r7, [r1], -r4
   17410:	ldrdeq	r7, [r1], -r4
   17414:	ldrdeq	r7, [r1], -r4
   17418:	ldrdeq	r7, [r1], -r4
   1741c:	ldrdeq	r7, [r1], -r4
   17420:	ldrdeq	r7, [r1], -r4
   17424:	ldrdeq	r7, [r1], -r4
   17428:	ldrdeq	r7, [r1], -r4
   1742c:	ldrdeq	r7, [r1], -r4
   17430:	ldrdeq	r7, [r1], -r4
   17434:	andeq	r7, r1, ip, lsl #17
   17438:	andeq	r7, r1, r4, ror #14
   1743c:	ldrdeq	r7, [r1], -r4
   17440:	andeq	r7, r1, ip, lsl #17
   17444:	ldrdeq	r7, [r1], -r4
   17448:	andeq	r7, r1, ip, lsl #17
   1744c:	ldrdeq	r7, [r1], -r4
   17450:	ldrdeq	r7, [r1], -r4
   17454:	ldrdeq	r7, [r1], -r4
   17458:	ldrdeq	r7, [r1], -r4
   1745c:	ldrdeq	r7, [r1], -r4
   17460:	ldrdeq	r7, [r1], -r4
   17464:	ldrdeq	r7, [r1], -r4
   17468:	ldrdeq	r7, [r1], -r4
   1746c:	ldrdeq	r7, [r1], -r4
   17470:	ldrdeq	r7, [r1], -r4
   17474:	ldrdeq	r7, [r1], -r4
   17478:	ldrdeq	r7, [r1], -r4
   1747c:	ldrdeq	r7, [r1], -r4
   17480:	ldrdeq	r7, [r1], -r4
   17484:	ldrdeq	r7, [r1], -r4
   17488:	ldrdeq	r7, [r1], -r4
   1748c:	ldrdeq	r7, [r1], -r4
   17490:	ldrdeq	r7, [r1], -r4
   17494:	ldrdeq	r7, [r1], -r4
   17498:	ldrdeq	r7, [r1], -r4
   1749c:	ldrdeq	r7, [r1], -r4
   174a0:	ldrdeq	r7, [r1], -r4
   174a4:	ldrdeq	r7, [r1], -r4
   174a8:	ldrdeq	r7, [r1], -r4
   174ac:	ldrdeq	r7, [r1], -r4
   174b0:	ldrdeq	r7, [r1], -r4
   174b4:	andeq	r7, r1, r4, asr #16
   174b8:	andeq	r7, r1, ip, lsl #17
   174bc:	andeq	r7, r1, r4, asr #16
   174c0:	andeq	r7, r1, r4, ror #16
   174c4:	mov	r3, #0
   174c8:	str	r3, [sp, #56]	; 0x38
   174cc:	b	172ac <__assert_fail@plt+0x5d0c>
   174d0:	mov	r3, #114	; 0x72
   174d4:	b	177f8 <__assert_fail@plt+0x6258>
   174d8:	mov	r3, #98	; 0x62
   174dc:	b	17810 <__assert_fail@plt+0x6270>
   174e0:	ldr	r3, [sp, #48]	; 0x30
   174e4:	cmp	r3, #0
   174e8:	beq	175d0 <__assert_fail@plt+0x6030>
   174ec:	ldr	r3, [sp, #32]
   174f0:	cmp	r3, #0
   174f4:	bne	18058 <__assert_fail@plt+0x6ab8>
   174f8:	ldr	r3, [sp, #44]	; 0x2c
   174fc:	eor	r3, r3, #1
   17500:	cmp	sl, #2
   17504:	movne	r3, #0
   17508:	andeq	r3, r3, #1
   1750c:	cmp	r3, #0
   17510:	moveq	r2, fp
   17514:	beq	17558 <__assert_fail@plt+0x5fb8>
   17518:	cmp	r7, fp
   1751c:	ldrhi	r2, [sp, #36]	; 0x24
   17520:	movhi	r1, #39	; 0x27
   17524:	strbhi	r1, [r2, fp]
   17528:	add	r2, fp, #1
   1752c:	cmp	r7, r2
   17530:	ldrhi	r1, [sp, #36]	; 0x24
   17534:	movhi	r0, #36	; 0x24
   17538:	strbhi	r0, [r1, r2]
   1753c:	add	r2, fp, #2
   17540:	cmp	r7, r2
   17544:	ldrhi	r1, [sp, #36]	; 0x24
   17548:	movhi	r0, #39	; 0x27
   1754c:	strbhi	r0, [r1, r2]
   17550:	add	r2, fp, #3
   17554:	str	r3, [sp, #44]	; 0x2c
   17558:	cmp	r7, r2
   1755c:	ldrhi	r3, [sp, #36]	; 0x24
   17560:	movhi	r1, #92	; 0x5c
   17564:	strbhi	r1, [r3, r2]
   17568:	add	fp, r2, #1
   1756c:	cmp	r5, #0
   17570:	beq	17edc <__assert_fail@plt+0x693c>
   17574:	add	r3, r6, #1
   17578:	ldr	r1, [sp, #28]
   1757c:	cmp	r1, r3
   17580:	bls	17eec <__assert_fail@plt+0x694c>
   17584:	ldr	r1, [sp, #52]	; 0x34
   17588:	ldrb	r3, [r1, r3]
   1758c:	sub	r3, r3, #48	; 0x30
   17590:	uxtb	r3, r3
   17594:	cmp	r3, #9
   17598:	bhi	17ef8 <__assert_fail@plt+0x6958>
   1759c:	cmp	r7, fp
   175a0:	movhi	r3, #48	; 0x30
   175a4:	ldrhi	r1, [sp, #36]	; 0x24
   175a8:	strbhi	r3, [r1, fp]
   175ac:	add	r3, r2, #2
   175b0:	cmp	r7, r3
   175b4:	movhi	r1, #48	; 0x30
   175b8:	ldrhi	r0, [sp, #36]	; 0x24
   175bc:	strbhi	r1, [r0, r3]
   175c0:	add	fp, r2, #3
   175c4:	ldr	r8, [sp, #32]
   175c8:	mov	r4, #48	; 0x30
   175cc:	b	178a8 <__assert_fail@plt+0x6308>
   175d0:	ldr	r3, [sp, #156]	; 0x9c
   175d4:	tst	r3, #1
   175d8:	bne	1799c <__assert_fail@plt+0x63fc>
   175dc:	ldr	r5, [sp, #48]	; 0x30
   175e0:	mov	r8, r5
   175e4:	b	178a8 <__assert_fail@plt+0x6308>
   175e8:	cmp	sl, #2
   175ec:	beq	17604 <__assert_fail@plt+0x6064>
   175f0:	cmp	sl, #5
   175f4:	beq	1761c <__assert_fail@plt+0x607c>
   175f8:	mov	r8, #0
   175fc:	mov	r5, r8
   17600:	b	178a8 <__assert_fail@plt+0x6308>
   17604:	ldr	r3, [sp, #32]
   17608:	cmp	r3, #0
   1760c:	bne	1806c <__assert_fail@plt+0x6acc>
   17610:	mov	r8, r3
   17614:	mov	r5, r3
   17618:	b	178a8 <__assert_fail@plt+0x6308>
   1761c:	ldr	r3, [sp, #156]	; 0x9c
   17620:	tst	r3, #4
   17624:	beq	17f04 <__assert_fail@plt+0x6964>
   17628:	add	r3, r6, #2
   1762c:	ldr	r2, [sp, #28]
   17630:	cmp	r2, r3
   17634:	bls	17f10 <__assert_fail@plt+0x6970>
   17638:	ldr	r2, [sp, #52]	; 0x34
   1763c:	add	r2, r2, r6
   17640:	ldrb	r2, [r2, #1]
   17644:	cmp	r2, #63	; 0x3f
   17648:	movne	r8, #0
   1764c:	movne	r5, r8
   17650:	bne	178a8 <__assert_fail@plt+0x6308>
   17654:	ldr	r2, [sp, #52]	; 0x34
   17658:	ldrb	r2, [r2, r3]
   1765c:	sub	r1, r2, #33	; 0x21
   17660:	cmp	r1, #29
   17664:	ldrls	pc, [pc, r1, lsl #2]
   17668:	b	17f1c <__assert_fail@plt+0x697c>
   1766c:	andeq	r7, r1, r4, ror #13
   17670:	andeq	r7, r1, ip, lsl pc
   17674:	andeq	r7, r1, ip, lsl pc
   17678:	andeq	r7, r1, ip, lsl pc
   1767c:	andeq	r7, r1, ip, lsl pc
   17680:	andeq	r7, r1, ip, lsl pc
   17684:	andeq	r7, r1, r4, ror #13
   17688:	andeq	r7, r1, r4, ror #13
   1768c:	andeq	r7, r1, r4, ror #13
   17690:	andeq	r7, r1, ip, lsl pc
   17694:	andeq	r7, r1, ip, lsl pc
   17698:	andeq	r7, r1, ip, lsl pc
   1769c:	andeq	r7, r1, r4, ror #13
   176a0:	andeq	r7, r1, ip, lsl pc
   176a4:	andeq	r7, r1, r4, ror #13
   176a8:	andeq	r7, r1, ip, lsl pc
   176ac:	andeq	r7, r1, ip, lsl pc
   176b0:	andeq	r7, r1, ip, lsl pc
   176b4:	andeq	r7, r1, ip, lsl pc
   176b8:	andeq	r7, r1, ip, lsl pc
   176bc:	andeq	r7, r1, ip, lsl pc
   176c0:	andeq	r7, r1, ip, lsl pc
   176c4:	andeq	r7, r1, ip, lsl pc
   176c8:	andeq	r7, r1, ip, lsl pc
   176cc:	andeq	r7, r1, ip, lsl pc
   176d0:	andeq	r7, r1, ip, lsl pc
   176d4:	andeq	r7, r1, ip, lsl pc
   176d8:	andeq	r7, r1, r4, ror #13
   176dc:	andeq	r7, r1, r4, ror #13
   176e0:	andeq	r7, r1, r4, ror #13
   176e4:	ldr	r1, [sp, #32]
   176e8:	cmp	r1, #0
   176ec:	bne	1812c <__assert_fail@plt+0x6b8c>
   176f0:	cmp	r7, fp
   176f4:	movhi	r1, #63	; 0x3f
   176f8:	ldrhi	r0, [sp, #36]	; 0x24
   176fc:	strbhi	r1, [r0, fp]
   17700:	add	r1, fp, #1
   17704:	cmp	r7, r1
   17708:	ldrhi	r0, [sp, #36]	; 0x24
   1770c:	movhi	ip, #34	; 0x22
   17710:	strbhi	ip, [r0, r1]
   17714:	add	r1, fp, #2
   17718:	cmp	r7, r1
   1771c:	ldrhi	r0, [sp, #36]	; 0x24
   17720:	movhi	ip, #34	; 0x22
   17724:	strbhi	ip, [r0, r1]
   17728:	add	r1, fp, #3
   1772c:	cmp	r7, r1
   17730:	movhi	r0, #63	; 0x3f
   17734:	ldrhi	ip, [sp, #36]	; 0x24
   17738:	strbhi	r0, [ip, r1]
   1773c:	add	fp, fp, #4
   17740:	ldr	r5, [sp, #32]
   17744:	mov	r8, r5
   17748:	mov	r4, r2
   1774c:	mov	r6, r3
   17750:	b	178a8 <__assert_fail@plt+0x6308>
   17754:	mov	r3, #102	; 0x66
   17758:	b	17810 <__assert_fail@plt+0x6270>
   1775c:	mov	r3, #118	; 0x76
   17760:	b	17810 <__assert_fail@plt+0x6270>
   17764:	cmp	sl, #2
   17768:	beq	177d4 <__assert_fail@plt+0x6234>
   1776c:	ldr	r3, [sp, #48]	; 0x30
   17770:	ldr	r2, [sp, #32]
   17774:	and	r3, r3, r2
   17778:	tst	r9, r3
   1777c:	moveq	r3, r4
   17780:	beq	17810 <__assert_fail@plt+0x6270>
   17784:	mov	r8, #0
   17788:	mov	r5, r8
   1778c:	eor	r5, r5, #1
   17790:	ldr	r3, [sp, #44]	; 0x2c
   17794:	and	r5, r5, r3
   17798:	tst	r5, #255	; 0xff
   1779c:	beq	1797c <__assert_fail@plt+0x63dc>
   177a0:	cmp	r7, fp
   177a4:	ldrhi	r3, [sp, #36]	; 0x24
   177a8:	movhi	r2, #39	; 0x27
   177ac:	strbhi	r2, [r3, fp]
   177b0:	add	r3, fp, #1
   177b4:	cmp	r7, r3
   177b8:	ldrhi	r2, [sp, #36]	; 0x24
   177bc:	movhi	r1, #39	; 0x27
   177c0:	strbhi	r1, [r2, r3]
   177c4:	add	fp, fp, #2
   177c8:	mov	r3, #0
   177cc:	str	r3, [sp, #44]	; 0x2c
   177d0:	b	1797c <__assert_fail@plt+0x63dc>
   177d4:	ldr	r3, [sp, #32]
   177d8:	cmp	r3, #0
   177dc:	bne	18078 <__assert_fail@plt+0x6ad8>
   177e0:	mov	r8, r3
   177e4:	mov	r5, r3
   177e8:	b	1778c <__assert_fail@plt+0x61ec>
   177ec:	mov	r3, #110	; 0x6e
   177f0:	b	177f8 <__assert_fail@plt+0x6258>
   177f4:	mov	r3, #116	; 0x74
   177f8:	ldr	r2, [sp, #32]
   177fc:	cmp	sl, #2
   17800:	movne	r2, #0
   17804:	andeq	r2, r2, #1
   17808:	cmp	r2, #0
   1780c:	bne	17830 <__assert_fail@plt+0x6290>
   17810:	ldr	r2, [sp, #48]	; 0x30
   17814:	cmp	r2, #0
   17818:	moveq	r8, r2
   1781c:	moveq	r5, r2
   17820:	beq	178a8 <__assert_fail@plt+0x6308>
   17824:	mov	r4, r3
   17828:	mov	r8, #0
   1782c:	b	17900 <__assert_fail@plt+0x6360>
   17830:	mov	r8, sl
   17834:	mov	sl, r7
   17838:	b	180a4 <__assert_fail@plt+0x6b04>
   1783c:	mov	r3, #97	; 0x61
   17840:	b	17810 <__assert_fail@plt+0x6270>
   17844:	ldr	r3, [sp, #28]
   17848:	cmn	r3, #1
   1784c:	beq	17878 <__assert_fail@plt+0x62d8>
   17850:	ldr	r3, [sp, #28]
   17854:	subs	r3, r3, #1
   17858:	movne	r3, #1
   1785c:	cmp	r3, #0
   17860:	bne	17f28 <__assert_fail@plt+0x6988>
   17864:	cmp	r6, #0
   17868:	beq	17890 <__assert_fail@plt+0x62f0>
   1786c:	mov	r8, #0
   17870:	mov	r5, r8
   17874:	b	178a8 <__assert_fail@plt+0x6308>
   17878:	ldr	r3, [sp, #52]	; 0x34
   1787c:	ldrb	r3, [r3, #1]
   17880:	adds	r3, r3, #0
   17884:	movne	r3, #1
   17888:	b	1785c <__assert_fail@plt+0x62bc>
   1788c:	mov	r8, #0
   17890:	ldr	r5, [sp, #32]
   17894:	cmp	sl, #2
   17898:	movne	r5, #0
   1789c:	andeq	r5, r5, #1
   178a0:	cmp	r5, #0
   178a4:	bne	17a58 <__assert_fail@plt+0x64b8>
   178a8:	ldr	r3, [sp, #68]	; 0x44
   178ac:	cmp	sl, #2
   178b0:	orreq	r3, r3, #1
   178b4:	eor	r3, r3, #1
   178b8:	ldr	r2, [sp, #32]
   178bc:	orr	r3, r2, r3
   178c0:	tst	r3, #255	; 0xff
   178c4:	beq	178f4 <__assert_fail@plt+0x6354>
   178c8:	ldr	r3, [sp, #160]	; 0xa0
   178cc:	cmp	r3, #0
   178d0:	beq	178f4 <__assert_fail@plt+0x6354>
   178d4:	lsr	r2, r4, #5
   178d8:	uxtb	r2, r2
   178dc:	and	r3, r4, #31
   178e0:	ldr	r1, [sp, #160]	; 0xa0
   178e4:	ldr	r2, [r1, r2, lsl #2]
   178e8:	lsr	r3, r2, r3
   178ec:	tst	r3, #1
   178f0:	bne	17900 <__assert_fail@plt+0x6360>
   178f4:	ldr	r3, [sp, #56]	; 0x38
   178f8:	cmp	r3, #0
   178fc:	beq	1778c <__assert_fail@plt+0x61ec>
   17900:	ldr	r3, [sp, #32]
   17904:	cmp	r3, #0
   17908:	bne	18114 <__assert_fail@plt+0x6b74>
   1790c:	ldr	r3, [sp, #44]	; 0x2c
   17910:	eor	r3, r3, #1
   17914:	cmp	sl, #2
   17918:	movne	r3, #0
   1791c:	andeq	r3, r3, #1
   17920:	cmp	r3, #0
   17924:	beq	17968 <__assert_fail@plt+0x63c8>
   17928:	cmp	r7, fp
   1792c:	ldrhi	r2, [sp, #36]	; 0x24
   17930:	movhi	r1, #39	; 0x27
   17934:	strbhi	r1, [r2, fp]
   17938:	add	r2, fp, #1
   1793c:	cmp	r7, r2
   17940:	ldrhi	r1, [sp, #36]	; 0x24
   17944:	movhi	r0, #36	; 0x24
   17948:	strbhi	r0, [r1, r2]
   1794c:	add	r2, fp, #2
   17950:	cmp	r7, r2
   17954:	ldrhi	r1, [sp, #36]	; 0x24
   17958:	movhi	r0, #39	; 0x27
   1795c:	strbhi	r0, [r1, r2]
   17960:	add	fp, fp, #3
   17964:	str	r3, [sp, #44]	; 0x2c
   17968:	cmp	r7, fp
   1796c:	ldrhi	r3, [sp, #36]	; 0x24
   17970:	movhi	r2, #92	; 0x5c
   17974:	strbhi	r2, [r3, fp]
   17978:	add	fp, fp, #1
   1797c:	cmp	fp, r7
   17980:	ldrcc	r3, [sp, #36]	; 0x24
   17984:	strbcc	r4, [r3, fp]
   17988:	add	fp, fp, #1
   1798c:	ldr	r3, [sp, #40]	; 0x28
   17990:	cmp	r8, #0
   17994:	moveq	r3, #0
   17998:	str	r3, [sp, #40]	; 0x28
   1799c:	add	r6, r6, #1
   179a0:	ldr	r3, [sp, #28]
   179a4:	cmn	r3, #1
   179a8:	beq	17f34 <__assert_fail@plt+0x6994>
   179ac:	ldr	r3, [sp, #28]
   179b0:	subs	r8, r3, r6
   179b4:	movne	r8, #1
   179b8:	cmp	r8, #0
   179bc:	beq	17f48 <__assert_fail@plt+0x69a8>
   179c0:	ldr	r5, [sp, #48]	; 0x30
   179c4:	cmp	sl, #2
   179c8:	moveq	r5, #0
   179cc:	andne	r5, r5, #1
   179d0:	ldr	r3, [sp, #60]	; 0x3c
   179d4:	adds	r9, r3, #0
   179d8:	movne	r9, #1
   179dc:	ands	r2, r5, r9
   179e0:	str	r2, [sp, #56]	; 0x38
   179e4:	beq	172ac <__assert_fail@plt+0x5d0c>
   179e8:	add	r4, r6, r3
   179ec:	ldr	r2, [sp, #28]
   179f0:	cmp	r3, #1
   179f4:	movls	r3, #0
   179f8:	movhi	r3, #1
   179fc:	cmn	r2, #1
   17a00:	movne	r3, #0
   17a04:	cmp	r3, #0
   17a08:	beq	17a18 <__assert_fail@plt+0x6478>
   17a0c:	ldr	r0, [sp, #52]	; 0x34
   17a10:	bl	113f0 <strlen@plt>
   17a14:	str	r0, [sp, #28]
   17a18:	ldr	r3, [sp, #28]
   17a1c:	cmp	r3, r4
   17a20:	bcc	172a4 <__assert_fail@plt+0x5d04>
   17a24:	ldr	r2, [sp, #60]	; 0x3c
   17a28:	ldr	r1, [sp, #72]	; 0x48
   17a2c:	ldr	r3, [sp, #52]	; 0x34
   17a30:	add	r0, r3, r6
   17a34:	bl	1127c <memcmp@plt>
   17a38:	cmp	r0, #0
   17a3c:	bne	174c4 <__assert_fail@plt+0x5f24>
   17a40:	ldr	r3, [sp, #32]
   17a44:	cmp	r3, #0
   17a48:	beq	172ac <__assert_fail@plt+0x5d0c>
   17a4c:	mov	r8, sl
   17a50:	mov	sl, r7
   17a54:	b	180a4 <__assert_fail@plt+0x6b04>
   17a58:	mov	r8, sl
   17a5c:	mov	sl, r7
   17a60:	b	180a4 <__assert_fail@plt+0x6b04>
   17a64:	cmp	sl, #2
   17a68:	strne	r8, [sp, #80]	; 0x50
   17a6c:	movne	r5, #0
   17a70:	bne	178a8 <__assert_fail@plt+0x6308>
   17a74:	ldr	r3, [sp, #32]
   17a78:	cmp	r3, #0
   17a7c:	bne	18090 <__assert_fail@plt+0x6af0>
   17a80:	ldr	r2, [sp, #76]	; 0x4c
   17a84:	adds	r3, r7, #0
   17a88:	movne	r3, #1
   17a8c:	cmp	r2, #0
   17a90:	movne	r3, #0
   17a94:	cmp	r3, #0
   17a98:	movne	r3, #0
   17a9c:	bne	17acc <__assert_fail@plt+0x652c>
   17aa0:	cmp	r7, fp
   17aa4:	ldrhi	r3, [sp, #36]	; 0x24
   17aa8:	movhi	r2, #39	; 0x27
   17aac:	strbhi	r2, [r3, fp]
   17ab0:	add	r3, fp, #1
   17ab4:	cmp	r7, r3
   17ab8:	ldrhi	r2, [sp, #36]	; 0x24
   17abc:	movhi	r1, #92	; 0x5c
   17ac0:	strbhi	r1, [r2, r3]
   17ac4:	mov	r3, r7
   17ac8:	ldr	r7, [sp, #76]	; 0x4c
   17acc:	add	r2, fp, #2
   17ad0:	cmp	r2, r3
   17ad4:	ldrcc	r1, [sp, #36]	; 0x24
   17ad8:	movcc	r0, #39	; 0x27
   17adc:	strbcc	r0, [r1, r2]
   17ae0:	add	fp, fp, #3
   17ae4:	ldr	r2, [sp, #32]
   17ae8:	mov	r5, r2
   17aec:	str	r8, [sp, #80]	; 0x50
   17af0:	str	r2, [sp, #44]	; 0x2c
   17af4:	str	r7, [sp, #76]	; 0x4c
   17af8:	mov	r7, r3
   17afc:	b	178a8 <__assert_fail@plt+0x6308>
   17b00:	ldr	r5, [sp, #84]	; 0x54
   17b04:	cmp	r5, #1
   17b08:	beq	17b38 <__assert_fail@plt+0x6598>
   17b0c:	mov	r3, #0
   17b10:	str	r3, [sp, #104]	; 0x68
   17b14:	str	r3, [sp, #108]	; 0x6c
   17b18:	ldr	r3, [sp, #28]
   17b1c:	cmn	r3, #1
   17b20:	beq	17b6c <__assert_fail@plt+0x65cc>
   17b24:	mov	r3, #0
   17b28:	str	r4, [sp, #88]	; 0x58
   17b2c:	str	fp, [sp, #92]	; 0x5c
   17b30:	mov	fp, r3
   17b34:	b	17c94 <__assert_fail@plt+0x66f4>
   17b38:	bl	113c0 <__ctype_b_loc@plt>
   17b3c:	ldr	r2, [r0]
   17b40:	lsl	r3, r4, #1
   17b44:	ldrh	r8, [r2, r3]
   17b48:	lsr	r8, r8, #14
   17b4c:	and	r8, r8, #1
   17b50:	mov	r2, r5
   17b54:	eor	r5, r8, #1
   17b58:	ldr	r3, [sp, #48]	; 0x30
   17b5c:	and	r5, r5, r3
   17b60:	ands	r5, r5, #255	; 0xff
   17b64:	beq	178a8 <__assert_fail@plt+0x6308>
   17b68:	b	17d2c <__assert_fail@plt+0x678c>
   17b6c:	ldr	r0, [sp, #52]	; 0x34
   17b70:	bl	113f0 <strlen@plt>
   17b74:	str	r0, [sp, #28]
   17b78:	b	17b24 <__assert_fail@plt+0x6584>
   17b7c:	mov	r2, fp
   17b80:	mov	r1, r4
   17b84:	ldr	r4, [sp, #88]	; 0x58
   17b88:	ldr	fp, [sp, #92]	; 0x5c
   17b8c:	ldr	r0, [sp, #28]
   17b90:	cmp	r0, r5
   17b94:	bls	17d60 <__assert_fail@plt+0x67c0>
   17b98:	ldrb	r3, [r1]
   17b9c:	cmp	r3, #0
   17ba0:	beq	17d68 <__assert_fail@plt+0x67c8>
   17ba4:	mov	r3, r1
   17ba8:	add	r2, r2, #1
   17bac:	add	r1, r6, r2
   17bb0:	cmp	r0, r1
   17bb4:	bls	17d70 <__assert_fail@plt+0x67d0>
   17bb8:	ldrb	r1, [r3, #1]!
   17bbc:	cmp	r1, #0
   17bc0:	bne	17ba8 <__assert_fail@plt+0x6608>
   17bc4:	mov	r8, #0
   17bc8:	b	17d24 <__assert_fail@plt+0x6784>
   17bcc:	cmp	r4, r5
   17bd0:	beq	17c70 <__assert_fail@plt+0x66d0>
   17bd4:	ldrb	r3, [r4, #1]!
   17bd8:	sub	r3, r3, #91	; 0x5b
   17bdc:	cmp	r3, #33	; 0x21
   17be0:	ldrls	pc, [pc, r3, lsl #2]
   17be4:	b	17bcc <__assert_fail@plt+0x662c>
   17be8:	muleq	r1, ip, r0
   17bec:	muleq	r1, ip, r0
   17bf0:	andeq	r7, r1, ip, asr #23
   17bf4:	muleq	r1, ip, r0
   17bf8:	andeq	r7, r1, ip, asr #23
   17bfc:	muleq	r1, ip, r0
   17c00:	andeq	r7, r1, ip, asr #23
   17c04:	andeq	r7, r1, ip, asr #23
   17c08:	andeq	r7, r1, ip, asr #23
   17c0c:	andeq	r7, r1, ip, asr #23
   17c10:	andeq	r7, r1, ip, asr #23
   17c14:	andeq	r7, r1, ip, asr #23
   17c18:	andeq	r7, r1, ip, asr #23
   17c1c:	andeq	r7, r1, ip, asr #23
   17c20:	andeq	r7, r1, ip, asr #23
   17c24:	andeq	r7, r1, ip, asr #23
   17c28:	andeq	r7, r1, ip, asr #23
   17c2c:	andeq	r7, r1, ip, asr #23
   17c30:	andeq	r7, r1, ip, asr #23
   17c34:	andeq	r7, r1, ip, asr #23
   17c38:	andeq	r7, r1, ip, asr #23
   17c3c:	andeq	r7, r1, ip, asr #23
   17c40:	andeq	r7, r1, ip, asr #23
   17c44:	andeq	r7, r1, ip, asr #23
   17c48:	andeq	r7, r1, ip, asr #23
   17c4c:	andeq	r7, r1, ip, asr #23
   17c50:	andeq	r7, r1, ip, asr #23
   17c54:	andeq	r7, r1, ip, asr #23
   17c58:	andeq	r7, r1, ip, asr #23
   17c5c:	andeq	r7, r1, ip, asr #23
   17c60:	andeq	r7, r1, ip, asr #23
   17c64:	andeq	r7, r1, ip, asr #23
   17c68:	andeq	r7, r1, ip, asr #23
   17c6c:	muleq	r1, ip, r0
   17c70:	ldr	r0, [sp, #100]	; 0x64
   17c74:	bl	112dc <iswprint@plt>
   17c78:	cmp	r0, #0
   17c7c:	moveq	r8, #0
   17c80:	add	fp, fp, r9
   17c84:	add	r0, sp, #104	; 0x68
   17c88:	bl	11264 <mbsinit@plt>
   17c8c:	cmp	r0, #0
   17c90:	bne	17d04 <__assert_fail@plt+0x6764>
   17c94:	add	r5, r6, fp
   17c98:	ldr	r3, [sp, #52]	; 0x34
   17c9c:	add	r4, r3, r5
   17ca0:	add	r3, sp, #104	; 0x68
   17ca4:	ldr	r2, [sp, #28]
   17ca8:	sub	r2, r2, r5
   17cac:	mov	r1, r4
   17cb0:	add	r0, sp, #100	; 0x64
   17cb4:	bl	19f04 <__assert_fail@plt+0x8964>
   17cb8:	subs	r9, r0, #0
   17cbc:	beq	17d78 <__assert_fail@plt+0x67d8>
   17cc0:	cmn	r9, #1
   17cc4:	beq	17d14 <__assert_fail@plt+0x6774>
   17cc8:	cmn	r9, #2
   17ccc:	beq	17b7c <__assert_fail@plt+0x65dc>
   17cd0:	ldr	r3, [sp, #32]
   17cd4:	cmp	sl, #2
   17cd8:	movne	r3, #0
   17cdc:	andeq	r3, r3, #1
   17ce0:	cmp	r3, #0
   17ce4:	beq	17c70 <__assert_fail@plt+0x66d0>
   17ce8:	cmp	r9, #1
   17cec:	bls	17c70 <__assert_fail@plt+0x66d0>
   17cf0:	sub	r3, r9, #1
   17cf4:	add	r5, r3, r5
   17cf8:	ldr	r3, [sp, #52]	; 0x34
   17cfc:	add	r5, r3, r5
   17d00:	b	17bd4 <__assert_fail@plt+0x6634>
   17d04:	ldr	r4, [sp, #88]	; 0x58
   17d08:	mov	r2, fp
   17d0c:	ldr	fp, [sp, #92]	; 0x5c
   17d10:	b	17d24 <__assert_fail@plt+0x6784>
   17d14:	ldr	r4, [sp, #88]	; 0x58
   17d18:	mov	r2, fp
   17d1c:	ldr	fp, [sp, #92]	; 0x5c
   17d20:	mov	r8, #0
   17d24:	cmp	r2, #1
   17d28:	bls	17b54 <__assert_fail@plt+0x65b4>
   17d2c:	add	r1, r6, r2
   17d30:	ldr	ip, [sp, #64]	; 0x40
   17d34:	mov	r5, #0
   17d38:	eor	r3, r8, #1
   17d3c:	ldr	r2, [sp, #48]	; 0x30
   17d40:	and	r3, r3, r2
   17d44:	uxtb	r3, r3
   17d48:	ldr	r9, [sp, #32]
   17d4c:	ldr	lr, [sp, #44]	; 0x2c
   17d50:	ldr	r2, [sp, #56]	; 0x38
   17d54:	str	r8, [sp, #56]	; 0x38
   17d58:	ldr	r0, [sp, #36]	; 0x24
   17d5c:	b	17df8 <__assert_fail@plt+0x6858>
   17d60:	mov	r8, #0
   17d64:	b	17d24 <__assert_fail@plt+0x6784>
   17d68:	mov	r8, #0
   17d6c:	b	17d24 <__assert_fail@plt+0x6784>
   17d70:	mov	r8, #0
   17d74:	b	17d24 <__assert_fail@plt+0x6784>
   17d78:	ldr	r4, [sp, #88]	; 0x58
   17d7c:	mov	r2, fp
   17d80:	ldr	fp, [sp, #92]	; 0x5c
   17d84:	b	17d24 <__assert_fail@plt+0x6784>
   17d88:	cmp	r2, #0
   17d8c:	beq	17da0 <__assert_fail@plt+0x6800>
   17d90:	cmp	r7, fp
   17d94:	movhi	r2, #92	; 0x5c
   17d98:	strbhi	r2, [r0, fp]
   17d9c:	add	fp, fp, #1
   17da0:	add	r8, r6, #1
   17da4:	cmp	r1, r8
   17da8:	bls	17eb0 <__assert_fail@plt+0x6910>
   17dac:	eor	r2, r5, #1
   17db0:	and	r2, r2, lr
   17db4:	ands	r2, r2, #255	; 0xff
   17db8:	beq	17ecc <__assert_fail@plt+0x692c>
   17dbc:	cmp	r7, fp
   17dc0:	movhi	r2, #39	; 0x27
   17dc4:	strbhi	r2, [r0, fp]
   17dc8:	add	r2, fp, #1
   17dcc:	cmp	r7, r2
   17dd0:	movhi	lr, #39	; 0x27
   17dd4:	strbhi	lr, [r0, r2]
   17dd8:	add	fp, fp, #2
   17ddc:	mov	r6, r8
   17de0:	mov	r2, r3
   17de4:	mov	lr, r3
   17de8:	cmp	r7, fp
   17dec:	strbhi	r4, [r0, fp]
   17df0:	add	fp, fp, #1
   17df4:	ldrb	r4, [ip, #1]!
   17df8:	cmp	r3, #0
   17dfc:	beq	17d88 <__assert_fail@plt+0x67e8>
   17e00:	cmp	r9, #0
   17e04:	bne	18108 <__assert_fail@plt+0x6b68>
   17e08:	eor	r5, lr, #1
   17e0c:	cmp	sl, #2
   17e10:	movne	r5, #0
   17e14:	andeq	r5, r5, #1
   17e18:	cmp	r5, #0
   17e1c:	beq	17e54 <__assert_fail@plt+0x68b4>
   17e20:	cmp	r7, fp
   17e24:	movhi	lr, #39	; 0x27
   17e28:	strbhi	lr, [r0, fp]
   17e2c:	add	lr, fp, #1
   17e30:	cmp	r7, lr
   17e34:	movhi	r8, #36	; 0x24
   17e38:	strbhi	r8, [r0, lr]
   17e3c:	add	lr, fp, #2
   17e40:	cmp	r7, lr
   17e44:	movhi	r8, #39	; 0x27
   17e48:	strbhi	r8, [r0, lr]
   17e4c:	add	fp, fp, #3
   17e50:	mov	lr, r5
   17e54:	cmp	r7, fp
   17e58:	movhi	r5, #92	; 0x5c
   17e5c:	strbhi	r5, [r0, fp]
   17e60:	add	r5, fp, #1
   17e64:	cmp	r7, r5
   17e68:	lsrhi	r8, r4, #6
   17e6c:	addhi	r8, r8, #48	; 0x30
   17e70:	strbhi	r8, [r0, r5]
   17e74:	add	r8, fp, #2
   17e78:	cmp	r7, r8
   17e7c:	lsrhi	r5, r4, #3
   17e80:	andhi	r5, r5, #7
   17e84:	addhi	r5, r5, #48	; 0x30
   17e88:	strbhi	r5, [r0, r8]
   17e8c:	add	fp, fp, #3
   17e90:	and	r4, r4, #7
   17e94:	add	r4, r4, #48	; 0x30
   17e98:	add	r5, r6, #1
   17e9c:	cmp	r1, r5
   17ea0:	bls	17ebc <__assert_fail@plt+0x691c>
   17ea4:	mov	r6, r5
   17ea8:	mov	r5, r3
   17eac:	b	17de8 <__assert_fail@plt+0x6848>
   17eb0:	str	lr, [sp, #44]	; 0x2c
   17eb4:	ldr	r8, [sp, #56]	; 0x38
   17eb8:	b	1778c <__assert_fail@plt+0x61ec>
   17ebc:	str	lr, [sp, #44]	; 0x2c
   17ec0:	ldr	r8, [sp, #56]	; 0x38
   17ec4:	mov	r5, r3
   17ec8:	b	1778c <__assert_fail@plt+0x61ec>
   17ecc:	mov	r6, r8
   17ed0:	b	17de8 <__assert_fail@plt+0x6848>
   17ed4:	mov	r5, #0
   17ed8:	b	178a8 <__assert_fail@plt+0x6308>
   17edc:	mov	r8, r5
   17ee0:	ldr	r5, [sp, #48]	; 0x30
   17ee4:	mov	r4, #48	; 0x30
   17ee8:	b	178a8 <__assert_fail@plt+0x6308>
   17eec:	ldr	r8, [sp, #32]
   17ef0:	mov	r4, #48	; 0x30
   17ef4:	b	178a8 <__assert_fail@plt+0x6308>
   17ef8:	ldr	r8, [sp, #32]
   17efc:	mov	r4, #48	; 0x30
   17f00:	b	178a8 <__assert_fail@plt+0x6308>
   17f04:	mov	r8, #0
   17f08:	mov	r5, r8
   17f0c:	b	178a8 <__assert_fail@plt+0x6308>
   17f10:	mov	r8, #0
   17f14:	mov	r5, r8
   17f18:	b	178a8 <__assert_fail@plt+0x6308>
   17f1c:	mov	r8, #0
   17f20:	mov	r5, r8
   17f24:	b	178a8 <__assert_fail@plt+0x6308>
   17f28:	mov	r8, #0
   17f2c:	mov	r5, r8
   17f30:	b	178a8 <__assert_fail@plt+0x6308>
   17f34:	ldr	r3, [sp, #52]	; 0x34
   17f38:	ldrb	r8, [r3, r6]
   17f3c:	adds	r8, r8, #0
   17f40:	movne	r8, #1
   17f44:	b	179b8 <__assert_fail@plt+0x6418>
   17f48:	cmp	sl, #2
   17f4c:	movne	r3, #0
   17f50:	moveq	r3, #1
   17f54:	ldr	r1, [sp, #32]
   17f58:	mov	r2, r1
   17f5c:	and	r2, r2, r3
   17f60:	cmp	fp, #0
   17f64:	movne	r2, #0
   17f68:	andeq	r2, r2, #1
   17f6c:	cmp	r2, #0
   17f70:	bne	18120 <__assert_fail@plt+0x6b80>
   17f74:	eor	r2, r1, #1
   17f78:	and	r3, r3, r2
   17f7c:	ldr	r1, [sp, #80]	; 0x50
   17f80:	tst	r1, r3
   17f84:	beq	17ffc <__assert_fail@plt+0x6a5c>
   17f88:	ldr	r3, [sp, #40]	; 0x28
   17f8c:	cmp	r3, #0
   17f90:	bne	17fb8 <__assert_fail@plt+0x6a18>
   17f94:	ldr	r1, [sp, #76]	; 0x4c
   17f98:	clz	r3, r7
   17f9c:	lsr	r3, r3, #5
   17fa0:	cmp	r1, #0
   17fa4:	moveq	r3, #0
   17fa8:	cmp	r3, #0
   17fac:	beq	17ffc <__assert_fail@plt+0x6a5c>
   17fb0:	ldr	r7, [sp, #76]	; 0x4c
   17fb4:	b	1704c <__assert_fail@plt+0x5aac>
   17fb8:	ldr	r3, [sp, #168]	; 0xa8
   17fbc:	str	r3, [sp, #16]
   17fc0:	ldr	r3, [sp, #164]	; 0xa4
   17fc4:	str	r3, [sp, #12]
   17fc8:	ldr	r3, [sp, #160]	; 0xa0
   17fcc:	str	r3, [sp, #8]
   17fd0:	ldr	r3, [sp, #156]	; 0x9c
   17fd4:	str	r3, [sp, #4]
   17fd8:	mov	r3, #5
   17fdc:	str	r3, [sp]
   17fe0:	ldr	r3, [sp, #28]
   17fe4:	ldr	r2, [sp, #52]	; 0x34
   17fe8:	ldr	r1, [sp, #76]	; 0x4c
   17fec:	ldr	r0, [sp, #36]	; 0x24
   17ff0:	bl	16fec <__assert_fail@plt+0x5a4c>
   17ff4:	mov	fp, r0
   17ff8:	b	180fc <__assert_fail@plt+0x6b5c>
   17ffc:	mov	sl, r7
   18000:	ldr	r3, [sp, #72]	; 0x48
   18004:	cmp	r3, #0
   18008:	moveq	r2, #0
   1800c:	andne	r2, r2, #1
   18010:	cmp	r2, #0
   18014:	beq	18044 <__assert_fail@plt+0x6aa4>
   18018:	mov	r2, r3
   1801c:	ldrb	r3, [r3]
   18020:	cmp	r3, #0
   18024:	beq	18044 <__assert_fail@plt+0x6aa4>
   18028:	ldr	r1, [sp, #36]	; 0x24
   1802c:	cmp	sl, fp
   18030:	strbhi	r3, [r1, fp]
   18034:	add	fp, fp, #1
   18038:	ldrb	r3, [r2, #1]!
   1803c:	cmp	r3, #0
   18040:	bne	1802c <__assert_fail@plt+0x6a8c>
   18044:	cmp	sl, fp
   18048:	movhi	r3, #0
   1804c:	ldrhi	r2, [sp, #36]	; 0x24
   18050:	strbhi	r3, [r2, fp]
   18054:	b	180fc <__assert_fail@plt+0x6b5c>
   18058:	mov	r8, sl
   1805c:	mov	sl, r7
   18060:	ldr	r3, [sp, #32]
   18064:	str	r3, [sp, #48]	; 0x30
   18068:	b	180a4 <__assert_fail@plt+0x6b04>
   1806c:	mov	r8, sl
   18070:	mov	sl, r7
   18074:	b	180a4 <__assert_fail@plt+0x6b04>
   18078:	mov	r8, sl
   1807c:	mov	sl, r7
   18080:	b	180a4 <__assert_fail@plt+0x6b04>
   18084:	andeq	ip, r1, r8, lsr #18
   18088:	andeq	ip, r1, r8, lsr r9
   1808c:	andeq	ip, r1, ip, lsr #18
   18090:	mov	r8, sl
   18094:	mov	sl, r7
   18098:	b	180a4 <__assert_fail@plt+0x6b04>
   1809c:	mov	r8, sl
   180a0:	mov	sl, r7
   180a4:	ldr	r3, [sp, #48]	; 0x30
   180a8:	cmp	r8, #2
   180ac:	movne	r3, #0
   180b0:	andeq	r3, r3, #1
   180b4:	cmp	r3, #0
   180b8:	movne	r8, #4
   180bc:	ldr	r3, [sp, #168]	; 0xa8
   180c0:	str	r3, [sp, #16]
   180c4:	ldr	r3, [sp, #164]	; 0xa4
   180c8:	str	r3, [sp, #12]
   180cc:	mov	r3, #0
   180d0:	str	r3, [sp, #8]
   180d4:	ldr	r3, [sp, #156]	; 0x9c
   180d8:	bic	r3, r3, #2
   180dc:	str	r3, [sp, #4]
   180e0:	str	r8, [sp]
   180e4:	ldr	r3, [sp, #28]
   180e8:	ldr	r2, [sp, #52]	; 0x34
   180ec:	mov	r1, sl
   180f0:	ldr	r0, [sp, #36]	; 0x24
   180f4:	bl	16fec <__assert_fail@plt+0x5a4c>
   180f8:	mov	fp, r0
   180fc:	mov	r0, fp
   18100:	add	sp, sp, #116	; 0x74
   18104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18108:	mov	r8, sl
   1810c:	mov	sl, r7
   18110:	b	180a4 <__assert_fail@plt+0x6b04>
   18114:	mov	r8, sl
   18118:	mov	sl, r7
   1811c:	b	180a4 <__assert_fail@plt+0x6b04>
   18120:	mov	r8, sl
   18124:	mov	sl, r7
   18128:	b	180a4 <__assert_fail@plt+0x6b04>
   1812c:	mov	r8, sl
   18130:	mov	sl, r7
   18134:	b	180bc <__assert_fail@plt+0x6b1c>
   18138:	mov	r3, #1
   1813c:	str	r3, [sp, #32]
   18140:	str	r3, [sp, #48]	; 0x30
   18144:	str	r3, [sp, #60]	; 0x3c
   18148:	ldr	r3, [pc, #-196]	; 1808c <__assert_fail@plt+0x6aec>
   1814c:	str	r3, [sp, #72]	; 0x48
   18150:	mov	fp, #0
   18154:	mov	sl, #5
   18158:	b	170a8 <__assert_fail@plt+0x5b08>
   1815c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18160:	sub	sp, sp, #52	; 0x34
   18164:	mov	r5, r0
   18168:	str	r1, [sp, #24]
   1816c:	str	r2, [sp, #28]
   18170:	mov	r4, r3
   18174:	bl	11420 <__errno_location@plt>
   18178:	str	r0, [sp, #32]
   1817c:	ldr	r3, [r0]
   18180:	str	r3, [sp, #36]	; 0x24
   18184:	ldr	r3, [pc, #396]	; 18318 <__assert_fail@plt+0x6d78>
   18188:	ldr	r6, [r3]
   1818c:	cmn	r5, #-2147483647	; 0x80000001
   18190:	movne	r3, #0
   18194:	moveq	r3, #1
   18198:	orrs	r3, r3, r5, lsr #31
   1819c:	bne	182dc <__assert_fail@plt+0x6d3c>
   181a0:	ldr	r3, [pc, #368]	; 18318 <__assert_fail@plt+0x6d78>
   181a4:	ldr	r2, [r3, #4]
   181a8:	cmp	r5, r2
   181ac:	blt	18214 <__assert_fail@plt+0x6c74>
   181b0:	str	r2, [sp, #44]	; 0x2c
   181b4:	add	r3, r3, #8
   181b8:	cmp	r6, r3
   181bc:	beq	182e0 <__assert_fail@plt+0x6d40>
   181c0:	sub	r2, r5, r2
   181c4:	mov	r3, #8
   181c8:	str	r3, [sp]
   181cc:	mvn	r3, #-2147483648	; 0x80000000
   181d0:	add	r2, r2, #1
   181d4:	add	r1, sp, #44	; 0x2c
   181d8:	mov	r0, r6
   181dc:	bl	19134 <__assert_fail@plt+0x7b94>
   181e0:	mov	r6, r0
   181e4:	ldr	r3, [pc, #300]	; 18318 <__assert_fail@plt+0x6d78>
   181e8:	str	r0, [r3]
   181ec:	ldr	r7, [pc, #292]	; 18318 <__assert_fail@plt+0x6d78>
   181f0:	ldr	r0, [r7, #4]
   181f4:	ldr	r2, [sp, #44]	; 0x2c
   181f8:	sub	r2, r2, r0
   181fc:	lsl	r2, r2, #3
   18200:	mov	r1, #0
   18204:	add	r0, r6, r0, lsl #3
   18208:	bl	11444 <memset@plt>
   1820c:	ldr	r3, [sp, #44]	; 0x2c
   18210:	str	r3, [r7, #4]
   18214:	add	fp, r6, r5, lsl #3
   18218:	ldr	r8, [r6, r5, lsl #3]
   1821c:	ldr	r7, [fp, #4]
   18220:	ldr	r9, [r4, #4]
   18224:	orr	r9, r9, #1
   18228:	add	sl, r4, #8
   1822c:	ldr	r3, [r4, #44]	; 0x2c
   18230:	str	r3, [sp, #16]
   18234:	ldr	r3, [r4, #40]	; 0x28
   18238:	str	r3, [sp, #12]
   1823c:	str	sl, [sp, #8]
   18240:	str	r9, [sp, #4]
   18244:	ldr	r3, [r4]
   18248:	str	r3, [sp]
   1824c:	ldr	r3, [sp, #28]
   18250:	ldr	r2, [sp, #24]
   18254:	mov	r1, r8
   18258:	mov	r0, r7
   1825c:	bl	16fec <__assert_fail@plt+0x5a4c>
   18260:	cmp	r8, r0
   18264:	bhi	182c4 <__assert_fail@plt+0x6d24>
   18268:	add	r8, r0, #1
   1826c:	str	r8, [r6, r5, lsl #3]
   18270:	ldr	r3, [pc, #164]	; 1831c <__assert_fail@plt+0x6d7c>
   18274:	cmp	r7, r3
   18278:	beq	18284 <__assert_fail@plt+0x6ce4>
   1827c:	mov	r0, r7
   18280:	bl	19dd4 <__assert_fail@plt+0x8834>
   18284:	mov	r0, r8
   18288:	bl	18fb0 <__assert_fail@plt+0x7a10>
   1828c:	mov	r7, r0
   18290:	str	r0, [fp, #4]
   18294:	ldr	r3, [r4, #44]	; 0x2c
   18298:	str	r3, [sp, #16]
   1829c:	ldr	r3, [r4, #40]	; 0x28
   182a0:	str	r3, [sp, #12]
   182a4:	str	sl, [sp, #8]
   182a8:	str	r9, [sp, #4]
   182ac:	ldr	r3, [r4]
   182b0:	str	r3, [sp]
   182b4:	ldr	r3, [sp, #28]
   182b8:	ldr	r2, [sp, #24]
   182bc:	mov	r1, r8
   182c0:	bl	16fec <__assert_fail@plt+0x5a4c>
   182c4:	ldr	r3, [sp, #32]
   182c8:	ldr	r2, [sp, #36]	; 0x24
   182cc:	str	r2, [r3]
   182d0:	mov	r0, r7
   182d4:	add	sp, sp, #52	; 0x34
   182d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182dc:	bl	11570 <abort@plt>
   182e0:	sub	r2, r5, r2
   182e4:	mov	r3, #8
   182e8:	str	r3, [sp]
   182ec:	mvn	r3, #-2147483648	; 0x80000000
   182f0:	add	r2, r2, #1
   182f4:	add	r1, sp, #44	; 0x2c
   182f8:	mov	r0, #0
   182fc:	bl	19134 <__assert_fail@plt+0x7b94>
   18300:	mov	r6, r0
   18304:	ldr	r3, [pc, #12]	; 18318 <__assert_fail@plt+0x6d78>
   18308:	str	r0, [r3], #8
   1830c:	ldm	r3, {r0, r1}
   18310:	stm	r6, {r0, r1}
   18314:	b	181ec <__assert_fail@plt+0x6c4c>
   18318:	andeq	sp, r2, r8, ror r1
   1831c:			; <UNDEFINED> instruction: 0x0002d2b4
   18320:	push	{r4, r5, r6, lr}
   18324:	mov	r4, r0
   18328:	bl	11420 <__errno_location@plt>
   1832c:	mov	r5, r0
   18330:	ldr	r6, [r0]
   18334:	cmp	r4, #0
   18338:	ldr	r3, [pc, #20]	; 18354 <__assert_fail@plt+0x6db4>
   1833c:	moveq	r4, r3
   18340:	mov	r1, #48	; 0x30
   18344:	mov	r0, r4
   18348:	bl	1949c <__assert_fail@plt+0x7efc>
   1834c:	str	r6, [r5]
   18350:	pop	{r4, r5, r6, pc}
   18354:			; <UNDEFINED> instruction: 0x0002d3b4
   18358:	subs	r3, r0, #0
   1835c:	ldr	r2, [pc, #8]	; 1836c <__assert_fail@plt+0x6dcc>
   18360:	moveq	r3, r2
   18364:	ldr	r0, [r3]
   18368:	bx	lr
   1836c:			; <UNDEFINED> instruction: 0x0002d3b4
   18370:	subs	r3, r0, #0
   18374:	ldr	r2, [pc, #8]	; 18384 <__assert_fail@plt+0x6de4>
   18378:	moveq	r3, r2
   1837c:	str	r1, [r3]
   18380:	bx	lr
   18384:			; <UNDEFINED> instruction: 0x0002d3b4
   18388:	push	{lr}		; (str lr, [sp, #-4]!)
   1838c:	subs	r3, r0, #0
   18390:	ldr	r0, [pc, #44]	; 183c4 <__assert_fail@plt+0x6e24>
   18394:	moveq	r3, r0
   18398:	add	r3, r3, #8
   1839c:	lsr	lr, r1, #5
   183a0:	and	r1, r1, #31
   183a4:	ldr	ip, [r3, lr, lsl #2]
   183a8:	lsr	r0, ip, r1
   183ac:	eor	r2, r2, r0
   183b0:	and	r2, r2, #1
   183b4:	eor	r1, ip, r2, lsl r1
   183b8:	str	r1, [r3, lr, lsl #2]
   183bc:	and	r0, r0, #1
   183c0:	pop	{pc}		; (ldr pc, [sp], #4)
   183c4:			; <UNDEFINED> instruction: 0x0002d3b4
   183c8:	subs	r3, r0, #0
   183cc:	ldr	r2, [pc, #12]	; 183e0 <__assert_fail@plt+0x6e40>
   183d0:	moveq	r3, r2
   183d4:	ldr	r0, [r3, #4]
   183d8:	str	r1, [r3, #4]
   183dc:	bx	lr
   183e0:			; <UNDEFINED> instruction: 0x0002d3b4
   183e4:	subs	r3, r0, #0
   183e8:	ldr	r0, [pc, #40]	; 18418 <__assert_fail@plt+0x6e78>
   183ec:	moveq	r3, r0
   183f0:	mov	r0, #10
   183f4:	str	r0, [r3]
   183f8:	cmp	r2, #0
   183fc:	cmpne	r1, #0
   18400:	beq	18410 <__assert_fail@plt+0x6e70>
   18404:	str	r1, [r3, #40]	; 0x28
   18408:	str	r2, [r3, #44]	; 0x2c
   1840c:	bx	lr
   18410:	push	{r4, lr}
   18414:	bl	11570 <abort@plt>
   18418:			; <UNDEFINED> instruction: 0x0002d3b4
   1841c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18420:	sub	sp, sp, #24
   18424:	mov	r7, r0
   18428:	mov	r8, r1
   1842c:	mov	r9, r2
   18430:	mov	sl, r3
   18434:	ldr	r4, [sp, #56]	; 0x38
   18438:	cmp	r4, #0
   1843c:	ldr	r3, [pc, #84]	; 18498 <__assert_fail@plt+0x6ef8>
   18440:	moveq	r4, r3
   18444:	bl	11420 <__errno_location@plt>
   18448:	mov	r5, r0
   1844c:	ldr	r6, [r0]
   18450:	ldr	r3, [r4, #44]	; 0x2c
   18454:	str	r3, [sp, #16]
   18458:	ldr	r3, [r4, #40]	; 0x28
   1845c:	str	r3, [sp, #12]
   18460:	add	r3, r4, #8
   18464:	str	r3, [sp, #8]
   18468:	ldr	r3, [r4, #4]
   1846c:	str	r3, [sp, #4]
   18470:	ldr	r3, [r4]
   18474:	str	r3, [sp]
   18478:	mov	r3, sl
   1847c:	mov	r2, r9
   18480:	mov	r1, r8
   18484:	mov	r0, r7
   18488:	bl	16fec <__assert_fail@plt+0x5a4c>
   1848c:	str	r6, [r5]
   18490:	add	sp, sp, #24
   18494:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18498:			; <UNDEFINED> instruction: 0x0002d3b4
   1849c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a0:	sub	sp, sp, #44	; 0x2c
   184a4:	str	r0, [sp, #28]
   184a8:	str	r1, [sp, #32]
   184ac:	mov	r6, r2
   184b0:	subs	r4, r3, #0
   184b4:	ldr	r3, [pc, #172]	; 18568 <__assert_fail@plt+0x6fc8>
   184b8:	moveq	r4, r3
   184bc:	bl	11420 <__errno_location@plt>
   184c0:	mov	r7, r0
   184c4:	ldr	fp, [r0]
   184c8:	ldr	r5, [r4, #4]
   184cc:	cmp	r6, #0
   184d0:	orreq	r5, r5, #1
   184d4:	add	r9, r4, #8
   184d8:	ldr	r3, [r4, #44]	; 0x2c
   184dc:	str	r3, [sp, #16]
   184e0:	ldr	r3, [r4, #40]	; 0x28
   184e4:	str	r3, [sp, #12]
   184e8:	str	r9, [sp, #8]
   184ec:	str	r5, [sp, #4]
   184f0:	ldr	r3, [r4]
   184f4:	str	r3, [sp]
   184f8:	ldr	r3, [sp, #32]
   184fc:	ldr	r2, [sp, #28]
   18500:	mov	r1, #0
   18504:	mov	r0, r1
   18508:	bl	16fec <__assert_fail@plt+0x5a4c>
   1850c:	mov	sl, r0
   18510:	add	r8, r0, #1
   18514:	mov	r0, r8
   18518:	bl	18fb0 <__assert_fail@plt+0x7a10>
   1851c:	str	r0, [sp, #36]	; 0x24
   18520:	ldr	r3, [r4, #44]	; 0x2c
   18524:	str	r3, [sp, #16]
   18528:	ldr	r3, [r4, #40]	; 0x28
   1852c:	str	r3, [sp, #12]
   18530:	str	r9, [sp, #8]
   18534:	str	r5, [sp, #4]
   18538:	ldr	r3, [r4]
   1853c:	str	r3, [sp]
   18540:	ldr	r3, [sp, #32]
   18544:	ldr	r2, [sp, #28]
   18548:	mov	r1, r8
   1854c:	bl	16fec <__assert_fail@plt+0x5a4c>
   18550:	str	fp, [r7]
   18554:	cmp	r6, #0
   18558:	strne	sl, [r6]
   1855c:	ldr	r0, [sp, #36]	; 0x24
   18560:	add	sp, sp, #44	; 0x2c
   18564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18568:			; <UNDEFINED> instruction: 0x0002d3b4
   1856c:	push	{r4, lr}
   18570:	mov	r3, r2
   18574:	mov	r2, #0
   18578:	bl	1849c <__assert_fail@plt+0x6efc>
   1857c:	pop	{r4, pc}
   18580:	push	{r4, r5, r6, r7, r8, lr}
   18584:	ldr	r3, [pc, #140]	; 18618 <__assert_fail@plt+0x7078>
   18588:	ldr	r7, [r3]
   1858c:	ldr	r3, [r3, #4]
   18590:	cmp	r3, #1
   18594:	ble	185c0 <__assert_fail@plt+0x7020>
   18598:	mov	r5, r7
   1859c:	mov	r4, #1
   185a0:	ldr	r6, [pc, #112]	; 18618 <__assert_fail@plt+0x7078>
   185a4:	ldr	r0, [r5, #12]
   185a8:	bl	19dd4 <__assert_fail@plt+0x8834>
   185ac:	add	r4, r4, #1
   185b0:	add	r5, r5, #8
   185b4:	ldr	r3, [r6, #4]
   185b8:	cmp	r3, r4
   185bc:	bgt	185a4 <__assert_fail@plt+0x7004>
   185c0:	ldr	r0, [r7, #4]
   185c4:	ldr	r3, [pc, #80]	; 1861c <__assert_fail@plt+0x707c>
   185c8:	cmp	r0, r3
   185cc:	beq	185e8 <__assert_fail@plt+0x7048>
   185d0:	bl	19dd4 <__assert_fail@plt+0x8834>
   185d4:	ldr	r3, [pc, #60]	; 18618 <__assert_fail@plt+0x7078>
   185d8:	mov	r2, #256	; 0x100
   185dc:	str	r2, [r3, #8]
   185e0:	ldr	r2, [pc, #52]	; 1861c <__assert_fail@plt+0x707c>
   185e4:	str	r2, [r3, #12]
   185e8:	ldr	r3, [pc, #48]	; 18620 <__assert_fail@plt+0x7080>
   185ec:	cmp	r7, r3
   185f0:	beq	18608 <__assert_fail@plt+0x7068>
   185f4:	mov	r0, r7
   185f8:	bl	19dd4 <__assert_fail@plt+0x8834>
   185fc:	ldr	r3, [pc, #20]	; 18618 <__assert_fail@plt+0x7078>
   18600:	add	r2, r3, #8
   18604:	str	r2, [r3]
   18608:	mov	r2, #1
   1860c:	ldr	r3, [pc, #4]	; 18618 <__assert_fail@plt+0x7078>
   18610:	str	r2, [r3, #4]
   18614:	pop	{r4, r5, r6, r7, r8, pc}
   18618:	andeq	sp, r2, r8, ror r1
   1861c:			; <UNDEFINED> instruction: 0x0002d2b4
   18620:	andeq	sp, r2, r0, lsl #3
   18624:	push	{r4, lr}
   18628:	ldr	r3, [pc, #8]	; 18638 <__assert_fail@plt+0x7098>
   1862c:	mvn	r2, #0
   18630:	bl	1815c <__assert_fail@plt+0x6bbc>
   18634:	pop	{r4, pc}
   18638:			; <UNDEFINED> instruction: 0x0002d3b4
   1863c:	push	{r4, lr}
   18640:	ldr	r3, [pc, #4]	; 1864c <__assert_fail@plt+0x70ac>
   18644:	bl	1815c <__assert_fail@plt+0x6bbc>
   18648:	pop	{r4, pc}
   1864c:			; <UNDEFINED> instruction: 0x0002d3b4
   18650:	push	{r4, lr}
   18654:	mov	r1, r0
   18658:	mov	r0, #0
   1865c:	bl	18624 <__assert_fail@plt+0x7084>
   18660:	pop	{r4, pc}
   18664:	push	{r4, lr}
   18668:	mov	r2, r1
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	bl	1863c <__assert_fail@plt+0x709c>
   18678:	pop	{r4, pc}
   1867c:	push	{r4, r5, lr}
   18680:	sub	sp, sp, #52	; 0x34
   18684:	mov	r4, r0
   18688:	mov	r5, r2
   1868c:	mov	r0, sp
   18690:	bl	16e84 <__assert_fail@plt+0x58e4>
   18694:	mov	r3, sp
   18698:	mvn	r2, #0
   1869c:	mov	r1, r5
   186a0:	mov	r0, r4
   186a4:	bl	1815c <__assert_fail@plt+0x6bbc>
   186a8:	add	sp, sp, #52	; 0x34
   186ac:	pop	{r4, r5, pc}
   186b0:	push	{r4, r5, r6, lr}
   186b4:	sub	sp, sp, #48	; 0x30
   186b8:	mov	r4, r0
   186bc:	mov	r5, r2
   186c0:	mov	r6, r3
   186c4:	mov	r0, sp
   186c8:	bl	16e84 <__assert_fail@plt+0x58e4>
   186cc:	mov	r3, sp
   186d0:	mov	r2, r6
   186d4:	mov	r1, r5
   186d8:	mov	r0, r4
   186dc:	bl	1815c <__assert_fail@plt+0x6bbc>
   186e0:	add	sp, sp, #48	; 0x30
   186e4:	pop	{r4, r5, r6, pc}
   186e8:	push	{r4, lr}
   186ec:	mov	r2, r1
   186f0:	mov	r1, r0
   186f4:	mov	r0, #0
   186f8:	bl	1867c <__assert_fail@plt+0x70dc>
   186fc:	pop	{r4, pc}
   18700:	push	{r4, lr}
   18704:	mov	r3, r2
   18708:	mov	r2, r1
   1870c:	mov	r1, r0
   18710:	mov	r0, #0
   18714:	bl	186b0 <__assert_fail@plt+0x7110>
   18718:	pop	{r4, pc}
   1871c:	push	{r4, r5, r6, lr}
   18720:	sub	sp, sp, #48	; 0x30
   18724:	mov	r4, r0
   18728:	mov	r5, r1
   1872c:	mov	r6, r2
   18730:	mov	ip, sp
   18734:	ldr	lr, [pc, #64]	; 1877c <__assert_fail@plt+0x71dc>
   18738:	ldm	lr!, {r0, r1, r2, r3}
   1873c:	stmia	ip!, {r0, r1, r2, r3}
   18740:	ldm	lr!, {r0, r1, r2, r3}
   18744:	stmia	ip!, {r0, r1, r2, r3}
   18748:	ldm	lr, {r0, r1, r2, r3}
   1874c:	stm	ip, {r0, r1, r2, r3}
   18750:	mov	r2, #1
   18754:	mov	r1, r6
   18758:	mov	r0, sp
   1875c:	bl	18388 <__assert_fail@plt+0x6de8>
   18760:	mov	r3, sp
   18764:	mov	r2, r5
   18768:	mov	r1, r4
   1876c:	mov	r0, #0
   18770:	bl	1815c <__assert_fail@plt+0x6bbc>
   18774:	add	sp, sp, #48	; 0x30
   18778:	pop	{r4, r5, r6, pc}
   1877c:			; <UNDEFINED> instruction: 0x0002d3b4
   18780:	push	{r4, lr}
   18784:	mov	r2, r1
   18788:	mvn	r1, #0
   1878c:	bl	1871c <__assert_fail@plt+0x717c>
   18790:	pop	{r4, pc}
   18794:	push	{r4, lr}
   18798:	mov	r1, #58	; 0x3a
   1879c:	bl	18780 <__assert_fail@plt+0x71e0>
   187a0:	pop	{r4, pc}
   187a4:	push	{r4, lr}
   187a8:	mov	r2, #58	; 0x3a
   187ac:	bl	1871c <__assert_fail@plt+0x717c>
   187b0:	pop	{r4, pc}
   187b4:	push	{r4, r5, lr}
   187b8:	sub	sp, sp, #100	; 0x64
   187bc:	mov	r4, r0
   187c0:	mov	r5, r2
   187c4:	mov	r0, sp
   187c8:	bl	16e84 <__assert_fail@plt+0x58e4>
   187cc:	add	lr, sp, #48	; 0x30
   187d0:	mov	ip, sp
   187d4:	ldm	ip!, {r0, r1, r2, r3}
   187d8:	stmia	lr!, {r0, r1, r2, r3}
   187dc:	ldm	ip!, {r0, r1, r2, r3}
   187e0:	stmia	lr!, {r0, r1, r2, r3}
   187e4:	ldm	ip, {r0, r1, r2, r3}
   187e8:	stm	lr, {r0, r1, r2, r3}
   187ec:	mov	r2, #1
   187f0:	mov	r1, #58	; 0x3a
   187f4:	add	r0, sp, #48	; 0x30
   187f8:	bl	18388 <__assert_fail@plt+0x6de8>
   187fc:	add	r3, sp, #48	; 0x30
   18800:	mvn	r2, #0
   18804:	mov	r1, r5
   18808:	mov	r0, r4
   1880c:	bl	1815c <__assert_fail@plt+0x6bbc>
   18810:	add	sp, sp, #100	; 0x64
   18814:	pop	{r4, r5, pc}
   18818:	push	{r4, r5, r6, r7, lr}
   1881c:	sub	sp, sp, #52	; 0x34
   18820:	mov	r4, r0
   18824:	mov	r6, r1
   18828:	mov	r7, r2
   1882c:	mov	r5, r3
   18830:	mov	ip, sp
   18834:	ldr	lr, [pc, #64]	; 1887c <__assert_fail@plt+0x72dc>
   18838:	ldm	lr!, {r0, r1, r2, r3}
   1883c:	stmia	ip!, {r0, r1, r2, r3}
   18840:	ldm	lr!, {r0, r1, r2, r3}
   18844:	stmia	ip!, {r0, r1, r2, r3}
   18848:	ldm	lr, {r0, r1, r2, r3}
   1884c:	stm	ip, {r0, r1, r2, r3}
   18850:	mov	r2, r7
   18854:	mov	r1, r6
   18858:	mov	r0, sp
   1885c:	bl	183e4 <__assert_fail@plt+0x6e44>
   18860:	mov	r3, sp
   18864:	ldr	r2, [sp, #72]	; 0x48
   18868:	mov	r1, r5
   1886c:	mov	r0, r4
   18870:	bl	1815c <__assert_fail@plt+0x6bbc>
   18874:	add	sp, sp, #52	; 0x34
   18878:	pop	{r4, r5, r6, r7, pc}
   1887c:			; <UNDEFINED> instruction: 0x0002d3b4
   18880:	push	{lr}		; (str lr, [sp, #-4]!)
   18884:	sub	sp, sp, #12
   18888:	mvn	ip, #0
   1888c:	str	ip, [sp]
   18890:	bl	18818 <__assert_fail@plt+0x7278>
   18894:	add	sp, sp, #12
   18898:	pop	{pc}		; (ldr pc, [sp], #4)
   1889c:	push	{r4, lr}
   188a0:	mov	r3, r2
   188a4:	mov	r2, r1
   188a8:	mov	r1, r0
   188ac:	mov	r0, #0
   188b0:	bl	18880 <__assert_fail@plt+0x72e0>
   188b4:	pop	{r4, pc}
   188b8:	push	{lr}		; (str lr, [sp, #-4]!)
   188bc:	sub	sp, sp, #12
   188c0:	str	r3, [sp]
   188c4:	mov	r3, r2
   188c8:	mov	r2, r1
   188cc:	mov	r1, r0
   188d0:	mov	r0, #0
   188d4:	bl	18818 <__assert_fail@plt+0x7278>
   188d8:	add	sp, sp, #12
   188dc:	pop	{pc}		; (ldr pc, [sp], #4)
   188e0:	push	{r4, lr}
   188e4:	ldr	r3, [pc, #4]	; 188f0 <__assert_fail@plt+0x7350>
   188e8:	bl	1815c <__assert_fail@plt+0x6bbc>
   188ec:	pop	{r4, pc}
   188f0:	andeq	sp, r2, r8, lsl #3
   188f4:	push	{r4, lr}
   188f8:	mov	r2, r1
   188fc:	mov	r1, r0
   18900:	mov	r0, #0
   18904:	bl	188e0 <__assert_fail@plt+0x7340>
   18908:	pop	{r4, pc}
   1890c:	push	{r4, lr}
   18910:	mvn	r2, #0
   18914:	bl	188e0 <__assert_fail@plt+0x7340>
   18918:	pop	{r4, pc}
   1891c:	push	{r4, lr}
   18920:	mov	r1, r0
   18924:	mov	r0, #0
   18928:	bl	1890c <__assert_fail@plt+0x736c>
   1892c:	pop	{r4, pc}
   18930:	push	{r4, r5, r6, r7, r8, lr}
   18934:	mov	r8, r0
   18938:	mov	r7, r1
   1893c:	mov	r4, r2
   18940:	ldr	r5, [pc, #88]	; 189a0 <__assert_fail@plt+0x7400>
   18944:	b	1894c <__assert_fail@plt+0x73ac>
   18948:	mov	r4, r5
   1894c:	mov	r2, r4
   18950:	mov	r1, r7
   18954:	mov	r0, r8
   18958:	bl	11204 <read@plt>
   1895c:	subs	r6, r0, #0
   18960:	bge	18998 <__assert_fail@plt+0x73f8>
   18964:	bl	11420 <__errno_location@plt>
   18968:	ldr	r3, [r0]
   1896c:	cmp	r3, #4
   18970:	beq	1894c <__assert_fail@plt+0x73ac>
   18974:	cmp	r4, r5
   18978:	movls	r4, #0
   1897c:	movhi	r4, #1
   18980:	cmp	r3, #22
   18984:	movne	r4, #0
   18988:	cmp	r4, #0
   1898c:	bne	18948 <__assert_fail@plt+0x73a8>
   18990:	mov	r0, r6
   18994:	pop	{r4, r5, r6, r7, r8, pc}
   18998:	mov	r0, r6
   1899c:	pop	{r4, r5, r6, r7, r8, pc}
   189a0:	svcvc	0x00f00000	; IMB
   189a4:	push	{r4, r5, r6, lr}
   189a8:	mov	r5, r0
   189ac:	mov	r4, r1
   189b0:	mov	r2, r1
   189b4:	mov	r1, #0
   189b8:	bl	11474 <memchr@plt>
   189bc:	cmp	r0, #0
   189c0:	subne	r0, r0, r5
   189c4:	addne	r0, r0, #1
   189c8:	moveq	r0, r4
   189cc:	pop	{r4, r5, r6, pc}
   189d0:	push	{r4, r5, r6, r7, r8, lr}
   189d4:	mov	r4, r0
   189d8:	cmp	r0, #2
   189dc:	bls	189e8 <__assert_fail@plt+0x7448>
   189e0:	mov	r0, r4
   189e4:	pop	{r4, r5, r6, r7, r8, pc}
   189e8:	bl	1a494 <__assert_fail@plt+0x8ef4>
   189ec:	mov	r6, r0
   189f0:	bl	11420 <__errno_location@plt>
   189f4:	mov	r5, r0
   189f8:	ldr	r7, [r0]
   189fc:	mov	r0, r4
   18a00:	bl	11588 <close@plt>
   18a04:	str	r7, [r5]
   18a08:	mov	r4, r6
   18a0c:	b	189e0 <__assert_fail@plt+0x7440>
   18a10:	push	{r4, r5, r6, r7, r8, lr}
   18a14:	mov	r4, r0
   18a18:	bl	11498 <pipe@plt>
   18a1c:	subs	r5, r0, #0
   18a20:	bne	18a7c <__assert_fail@plt+0x74dc>
   18a24:	ldr	r0, [r4]
   18a28:	bl	189d0 <__assert_fail@plt+0x7430>
   18a2c:	str	r0, [r4]
   18a30:	cmp	r0, #0
   18a34:	blt	18a58 <__assert_fail@plt+0x74b8>
   18a38:	ldr	r0, [r4, #4]
   18a3c:	bl	189d0 <__assert_fail@plt+0x7430>
   18a40:	str	r0, [r4, #4]
   18a44:	cmp	r0, #0
   18a48:	blt	18a54 <__assert_fail@plt+0x74b4>
   18a4c:	mov	r0, r5
   18a50:	pop	{r4, r5, r6, r7, r8, pc}
   18a54:	mov	r5, #1
   18a58:	bl	11420 <__errno_location@plt>
   18a5c:	mov	r6, r0
   18a60:	ldr	r7, [r0]
   18a64:	rsb	r5, r5, #1
   18a68:	ldr	r0, [r4, r5, lsl #2]
   18a6c:	bl	11588 <close@plt>
   18a70:	str	r7, [r6]
   18a74:	mvn	r5, #0
   18a78:	b	18a4c <__assert_fail@plt+0x74ac>
   18a7c:	mvn	r5, #0
   18a80:	b	18a4c <__assert_fail@plt+0x74ac>
   18a84:	push	{r4, r5, r6, lr}
   18a88:	sub	sp, sp, #32
   18a8c:	mov	r4, r0
   18a90:	ldr	r5, [sp, #48]	; 0x30
   18a94:	ldr	r6, [sp, #52]	; 0x34
   18a98:	cmp	r1, #0
   18a9c:	beq	18b44 <__assert_fail@plt+0x75a4>
   18aa0:	str	r3, [sp]
   18aa4:	mov	r3, r2
   18aa8:	mov	r2, r1
   18aac:	ldr	r1, [pc, #836]	; 18df8 <__assert_fail@plt+0x7858>
   18ab0:	bl	11414 <fprintf@plt>
   18ab4:	mov	r2, #5
   18ab8:	ldr	r1, [pc, #828]	; 18dfc <__assert_fail@plt+0x785c>
   18abc:	mov	r0, #0
   18ac0:	bl	11288 <dcgettext@plt>
   18ac4:	ldr	r3, [pc, #820]	; 18e00 <__assert_fail@plt+0x7860>
   18ac8:	mov	r2, r0
   18acc:	ldr	r1, [pc, #816]	; 18e04 <__assert_fail@plt+0x7864>
   18ad0:	mov	r0, r4
   18ad4:	bl	11414 <fprintf@plt>
   18ad8:	mov	r1, r4
   18adc:	mov	r0, #10
   18ae0:	bl	114f8 <fputc@plt>
   18ae4:	mov	r2, #5
   18ae8:	ldr	r1, [pc, #792]	; 18e08 <__assert_fail@plt+0x7868>
   18aec:	mov	r0, #0
   18af0:	bl	11288 <dcgettext@plt>
   18af4:	ldr	r2, [pc, #784]	; 18e0c <__assert_fail@plt+0x786c>
   18af8:	mov	r1, r0
   18afc:	mov	r0, r4
   18b00:	bl	11414 <fprintf@plt>
   18b04:	mov	r1, r4
   18b08:	mov	r0, #10
   18b0c:	bl	114f8 <fputc@plt>
   18b10:	cmp	r6, #9
   18b14:	ldrls	pc, [pc, r6, lsl #2]
   18b18:	b	18d98 <__assert_fail@plt+0x77f8>
   18b1c:	andeq	r8, r1, r0, ror fp
   18b20:	andeq	r8, r1, r0, asr fp
   18b24:	andeq	r8, r1, r8, ror fp
   18b28:	andeq	r8, r1, r0, lsr #23
   18b2c:	ldrdeq	r8, [r1], -r0
   18b30:	andeq	r8, r1, r8, lsl #24
   18b34:	andeq	r8, r1, r8, asr #24
   18b38:	muleq	r1, r0, ip
   18b3c:	andeq	r8, r1, r0, ror #25
   18b40:	andeq	r8, r1, r8, lsr sp
   18b44:	ldr	r1, [pc, #708]	; 18e10 <__assert_fail@plt+0x7870>
   18b48:	bl	11414 <fprintf@plt>
   18b4c:	b	18ab4 <__assert_fail@plt+0x7514>
   18b50:	mov	r2, #5
   18b54:	ldr	r1, [pc, #696]	; 18e14 <__assert_fail@plt+0x7874>
   18b58:	mov	r0, #0
   18b5c:	bl	11288 <dcgettext@plt>
   18b60:	ldr	r2, [r5]
   18b64:	mov	r1, r0
   18b68:	mov	r0, r4
   18b6c:	bl	11414 <fprintf@plt>
   18b70:	add	sp, sp, #32
   18b74:	pop	{r4, r5, r6, pc}
   18b78:	mov	r2, #5
   18b7c:	ldr	r1, [pc, #660]	; 18e18 <__assert_fail@plt+0x7878>
   18b80:	mov	r0, #0
   18b84:	bl	11288 <dcgettext@plt>
   18b88:	ldr	r3, [r5, #4]
   18b8c:	ldr	r2, [r5]
   18b90:	mov	r1, r0
   18b94:	mov	r0, r4
   18b98:	bl	11414 <fprintf@plt>
   18b9c:	b	18b70 <__assert_fail@plt+0x75d0>
   18ba0:	mov	r2, #5
   18ba4:	ldr	r1, [pc, #624]	; 18e1c <__assert_fail@plt+0x787c>
   18ba8:	mov	r0, #0
   18bac:	bl	11288 <dcgettext@plt>
   18bb0:	ldr	r3, [r5, #4]
   18bb4:	ldr	r2, [r5]
   18bb8:	ldr	r1, [r5, #8]
   18bbc:	str	r1, [sp]
   18bc0:	mov	r1, r0
   18bc4:	mov	r0, r4
   18bc8:	bl	11414 <fprintf@plt>
   18bcc:	b	18b70 <__assert_fail@plt+0x75d0>
   18bd0:	mov	r2, #5
   18bd4:	ldr	r1, [pc, #580]	; 18e20 <__assert_fail@plt+0x7880>
   18bd8:	mov	r0, #0
   18bdc:	bl	11288 <dcgettext@plt>
   18be0:	ldr	r3, [r5, #4]
   18be4:	ldr	r2, [r5]
   18be8:	ldr	r1, [r5, #12]
   18bec:	str	r1, [sp, #4]
   18bf0:	ldr	r1, [r5, #8]
   18bf4:	str	r1, [sp]
   18bf8:	mov	r1, r0
   18bfc:	mov	r0, r4
   18c00:	bl	11414 <fprintf@plt>
   18c04:	b	18b70 <__assert_fail@plt+0x75d0>
   18c08:	mov	r2, #5
   18c0c:	ldr	r1, [pc, #528]	; 18e24 <__assert_fail@plt+0x7884>
   18c10:	mov	r0, #0
   18c14:	bl	11288 <dcgettext@plt>
   18c18:	ldr	r3, [r5, #4]
   18c1c:	ldr	r2, [r5]
   18c20:	ldr	r1, [r5, #16]
   18c24:	str	r1, [sp, #8]
   18c28:	ldr	r1, [r5, #12]
   18c2c:	str	r1, [sp, #4]
   18c30:	ldr	r1, [r5, #8]
   18c34:	str	r1, [sp]
   18c38:	mov	r1, r0
   18c3c:	mov	r0, r4
   18c40:	bl	11414 <fprintf@plt>
   18c44:	b	18b70 <__assert_fail@plt+0x75d0>
   18c48:	mov	r2, #5
   18c4c:	ldr	r1, [pc, #468]	; 18e28 <__assert_fail@plt+0x7888>
   18c50:	mov	r0, #0
   18c54:	bl	11288 <dcgettext@plt>
   18c58:	ldr	r3, [r5, #4]
   18c5c:	ldr	r2, [r5]
   18c60:	ldr	r1, [r5, #20]
   18c64:	str	r1, [sp, #12]
   18c68:	ldr	r1, [r5, #16]
   18c6c:	str	r1, [sp, #8]
   18c70:	ldr	r1, [r5, #12]
   18c74:	str	r1, [sp, #4]
   18c78:	ldr	r1, [r5, #8]
   18c7c:	str	r1, [sp]
   18c80:	mov	r1, r0
   18c84:	mov	r0, r4
   18c88:	bl	11414 <fprintf@plt>
   18c8c:	b	18b70 <__assert_fail@plt+0x75d0>
   18c90:	mov	r2, #5
   18c94:	ldr	r1, [pc, #400]	; 18e2c <__assert_fail@plt+0x788c>
   18c98:	mov	r0, #0
   18c9c:	bl	11288 <dcgettext@plt>
   18ca0:	ldr	r3, [r5, #4]
   18ca4:	ldr	r2, [r5]
   18ca8:	ldr	r1, [r5, #24]
   18cac:	str	r1, [sp, #16]
   18cb0:	ldr	r1, [r5, #20]
   18cb4:	str	r1, [sp, #12]
   18cb8:	ldr	r1, [r5, #16]
   18cbc:	str	r1, [sp, #8]
   18cc0:	ldr	r1, [r5, #12]
   18cc4:	str	r1, [sp, #4]
   18cc8:	ldr	r1, [r5, #8]
   18ccc:	str	r1, [sp]
   18cd0:	mov	r1, r0
   18cd4:	mov	r0, r4
   18cd8:	bl	11414 <fprintf@plt>
   18cdc:	b	18b70 <__assert_fail@plt+0x75d0>
   18ce0:	mov	r2, #5
   18ce4:	ldr	r1, [pc, #324]	; 18e30 <__assert_fail@plt+0x7890>
   18ce8:	mov	r0, #0
   18cec:	bl	11288 <dcgettext@plt>
   18cf0:	ldr	r3, [r5, #4]
   18cf4:	ldr	r2, [r5]
   18cf8:	ldr	r1, [r5, #28]
   18cfc:	str	r1, [sp, #20]
   18d00:	ldr	r1, [r5, #24]
   18d04:	str	r1, [sp, #16]
   18d08:	ldr	r1, [r5, #20]
   18d0c:	str	r1, [sp, #12]
   18d10:	ldr	r1, [r5, #16]
   18d14:	str	r1, [sp, #8]
   18d18:	ldr	r1, [r5, #12]
   18d1c:	str	r1, [sp, #4]
   18d20:	ldr	r1, [r5, #8]
   18d24:	str	r1, [sp]
   18d28:	mov	r1, r0
   18d2c:	mov	r0, r4
   18d30:	bl	11414 <fprintf@plt>
   18d34:	b	18b70 <__assert_fail@plt+0x75d0>
   18d38:	mov	r2, #5
   18d3c:	ldr	r1, [pc, #240]	; 18e34 <__assert_fail@plt+0x7894>
   18d40:	mov	r0, #0
   18d44:	bl	11288 <dcgettext@plt>
   18d48:	ldr	r3, [r5, #4]
   18d4c:	ldr	r2, [r5]
   18d50:	ldr	r1, [r5, #32]
   18d54:	str	r1, [sp, #24]
   18d58:	ldr	r1, [r5, #28]
   18d5c:	str	r1, [sp, #20]
   18d60:	ldr	r1, [r5, #24]
   18d64:	str	r1, [sp, #16]
   18d68:	ldr	r1, [r5, #20]
   18d6c:	str	r1, [sp, #12]
   18d70:	ldr	r1, [r5, #16]
   18d74:	str	r1, [sp, #8]
   18d78:	ldr	r1, [r5, #12]
   18d7c:	str	r1, [sp, #4]
   18d80:	ldr	r1, [r5, #8]
   18d84:	str	r1, [sp]
   18d88:	mov	r1, r0
   18d8c:	mov	r0, r4
   18d90:	bl	11414 <fprintf@plt>
   18d94:	b	18b70 <__assert_fail@plt+0x75d0>
   18d98:	mov	r2, #5
   18d9c:	ldr	r1, [pc, #148]	; 18e38 <__assert_fail@plt+0x7898>
   18da0:	mov	r0, #0
   18da4:	bl	11288 <dcgettext@plt>
   18da8:	ldr	r3, [r5, #4]
   18dac:	ldr	r2, [r5]
   18db0:	ldr	r1, [r5, #32]
   18db4:	str	r1, [sp, #24]
   18db8:	ldr	r1, [r5, #28]
   18dbc:	str	r1, [sp, #20]
   18dc0:	ldr	r1, [r5, #24]
   18dc4:	str	r1, [sp, #16]
   18dc8:	ldr	r1, [r5, #20]
   18dcc:	str	r1, [sp, #12]
   18dd0:	ldr	r1, [r5, #16]
   18dd4:	str	r1, [sp, #8]
   18dd8:	ldr	r1, [r5, #12]
   18ddc:	str	r1, [sp, #4]
   18de0:	ldr	r1, [r5, #8]
   18de4:	str	r1, [sp]
   18de8:	mov	r1, r0
   18dec:	mov	r0, r4
   18df0:	bl	11414 <fprintf@plt>
   18df4:	b	18b70 <__assert_fail@plt+0x75d0>
   18df8:	andeq	ip, r1, r0, lsr #19
   18dfc:			; <UNDEFINED> instruction: 0x0001c9b4
   18e00:	andeq	r0, r0, r6, ror #15
   18e04:	andeq	ip, r1, r4, ror ip
   18e08:			; <UNDEFINED> instruction: 0x0001c9b8
   18e0c:	andeq	ip, r1, r4, ror #20
   18e10:	andeq	ip, r1, ip, lsr #19
   18e14:	andeq	ip, r1, r8, lsl #21
   18e18:	muleq	r1, r8, sl
   18e1c:			; <UNDEFINED> instruction: 0x0001cab0
   18e20:	andeq	ip, r1, ip, asr #21
   18e24:	andeq	ip, r1, ip, ror #21
   18e28:	andeq	ip, r1, r0, lsl fp
   18e2c:	andeq	ip, r1, r8, lsr fp
   18e30:	andeq	ip, r1, r4, ror #22
   18e34:	muleq	r1, r4, fp
   18e38:	andeq	ip, r1, r8, asr #23
   18e3c:	push	{r4, r5, lr}
   18e40:	sub	sp, sp, #12
   18e44:	ldr	r5, [sp, #24]
   18e48:	ldr	ip, [r5]
   18e4c:	cmp	ip, #0
   18e50:	beq	18e80 <__assert_fail@plt+0x78e0>
   18e54:	mov	lr, r5
   18e58:	mov	ip, #0
   18e5c:	add	ip, ip, #1
   18e60:	ldr	r4, [lr, #4]!
   18e64:	cmp	r4, #0
   18e68:	bne	18e5c <__assert_fail@plt+0x78bc>
   18e6c:	str	ip, [sp, #4]
   18e70:	str	r5, [sp]
   18e74:	bl	18a84 <__assert_fail@plt+0x74e4>
   18e78:	add	sp, sp, #12
   18e7c:	pop	{r4, r5, pc}
   18e80:	mov	ip, #0
   18e84:	b	18e6c <__assert_fail@plt+0x78cc>
   18e88:	push	{r4, r5, lr}
   18e8c:	sub	sp, sp, #52	; 0x34
   18e90:	ldr	r4, [sp, #64]	; 0x40
   18e94:	sub	r4, r4, #4
   18e98:	add	r5, sp, #4
   18e9c:	mov	ip, #0
   18ea0:	ldr	lr, [r4, #4]!
   18ea4:	str	lr, [r5, #4]!
   18ea8:	cmp	lr, #0
   18eac:	beq	18ebc <__assert_fail@plt+0x791c>
   18eb0:	add	ip, ip, #1
   18eb4:	cmp	ip, #10
   18eb8:	bne	18ea0 <__assert_fail@plt+0x7900>
   18ebc:	str	ip, [sp, #4]
   18ec0:	add	ip, sp, #8
   18ec4:	str	ip, [sp]
   18ec8:	bl	18a84 <__assert_fail@plt+0x74e4>
   18ecc:	add	sp, sp, #52	; 0x34
   18ed0:	pop	{r4, r5, pc}
   18ed4:	push	{r3}		; (str r3, [sp, #-4]!)
   18ed8:	push	{lr}		; (str lr, [sp, #-4]!)
   18edc:	sub	sp, sp, #16
   18ee0:	add	r3, sp, #24
   18ee4:	str	r3, [sp, #12]
   18ee8:	str	r3, [sp]
   18eec:	ldr	r3, [sp, #20]
   18ef0:	bl	18e88 <__assert_fail@plt+0x78e8>
   18ef4:	add	sp, sp, #16
   18ef8:	pop	{lr}		; (ldr lr, [sp], #4)
   18efc:	add	sp, sp, #4
   18f00:	bx	lr
   18f04:	push	{r4, lr}
   18f08:	ldr	r3, [pc, #88]	; 18f68 <__assert_fail@plt+0x79c8>
   18f0c:	ldr	r1, [r3]
   18f10:	mov	r0, #10
   18f14:	bl	114f8 <fputc@plt>
   18f18:	mov	r2, #5
   18f1c:	ldr	r1, [pc, #72]	; 18f6c <__assert_fail@plt+0x79cc>
   18f20:	mov	r0, #0
   18f24:	bl	11288 <dcgettext@plt>
   18f28:	ldr	r1, [pc, #64]	; 18f70 <__assert_fail@plt+0x79d0>
   18f2c:	bl	111f8 <printf@plt>
   18f30:	mov	r2, #5
   18f34:	ldr	r1, [pc, #56]	; 18f74 <__assert_fail@plt+0x79d4>
   18f38:	mov	r0, #0
   18f3c:	bl	11288 <dcgettext@plt>
   18f40:	ldr	r2, [pc, #48]	; 18f78 <__assert_fail@plt+0x79d8>
   18f44:	ldr	r1, [pc, #48]	; 18f7c <__assert_fail@plt+0x79dc>
   18f48:	bl	111f8 <printf@plt>
   18f4c:	mov	r2, #5
   18f50:	ldr	r1, [pc, #40]	; 18f80 <__assert_fail@plt+0x79e0>
   18f54:	mov	r0, #0
   18f58:	bl	11288 <dcgettext@plt>
   18f5c:	ldr	r1, [pc, #32]	; 18f84 <__assert_fail@plt+0x79e4>
   18f60:	bl	111f8 <printf@plt>
   18f64:	pop	{r4, pc}
   18f68:	ldrdeq	sp, [r2], -ip
   18f6c:	andeq	ip, r1, r4, lsl #24
   18f70:	andeq	ip, r1, ip, ror r7
   18f74:	andeq	ip, r1, r8, lsl ip
   18f78:	andeq	ip, r1, r4, asr r7
   18f7c:	andeq	ip, r1, r0, lsr r6
   18f80:	andeq	ip, r1, ip, lsr #24
   18f84:	andeq	ip, r1, r4, asr ip
   18f88:	push	{r4, lr}
   18f8c:	bl	19ed4 <__assert_fail@plt+0x8934>
   18f90:	cmp	r0, #0
   18f94:	popne	{r4, pc}
   18f98:	bl	1952c <__assert_fail@plt+0x7f8c>
   18f9c:	push	{r4, lr}
   18fa0:	bl	19ed4 <__assert_fail@plt+0x8934>
   18fa4:	cmp	r0, #0
   18fa8:	popne	{r4, pc}
   18fac:	bl	1952c <__assert_fail@plt+0x7f8c>
   18fb0:	push	{r4, lr}
   18fb4:	bl	18f88 <__assert_fail@plt+0x79e8>
   18fb8:	pop	{r4, pc}
   18fbc:	push	{r4, r5, r6, lr}
   18fc0:	mov	r5, r0
   18fc4:	mov	r4, r1
   18fc8:	bl	19f5c <__assert_fail@plt+0x89bc>
   18fcc:	cmp	r0, #0
   18fd0:	popne	{r4, r5, r6, pc}
   18fd4:	adds	r4, r4, #0
   18fd8:	movne	r4, #1
   18fdc:	cmp	r5, #0
   18fe0:	orreq	r4, r4, #1
   18fe4:	cmp	r4, #0
   18fe8:	popeq	{r4, r5, r6, pc}
   18fec:	bl	1952c <__assert_fail@plt+0x7f8c>
   18ff0:	push	{r4, lr}
   18ff4:	cmp	r1, #0
   18ff8:	orreq	r1, r1, #1
   18ffc:	bl	19f5c <__assert_fail@plt+0x89bc>
   19000:	cmp	r0, #0
   19004:	popne	{r4, pc}
   19008:	bl	1952c <__assert_fail@plt+0x7f8c>
   1900c:	push	{r4, r5, r6, lr}
   19010:	mov	r6, r0
   19014:	mov	r5, r1
   19018:	mov	r4, r2
   1901c:	bl	19fac <__assert_fail@plt+0x8a0c>
   19020:	cmp	r0, #0
   19024:	popne	{r4, r5, r6, pc}
   19028:	cmp	r6, #0
   1902c:	beq	1903c <__assert_fail@plt+0x7a9c>
   19030:	cmp	r5, #0
   19034:	cmpne	r4, #0
   19038:	popeq	{r4, r5, r6, pc}
   1903c:	bl	1952c <__assert_fail@plt+0x7f8c>
   19040:	push	{r4, lr}
   19044:	bl	1900c <__assert_fail@plt+0x7a6c>
   19048:	pop	{r4, pc}
   1904c:	push	{r4, lr}
   19050:	mov	ip, r1
   19054:	mov	r3, r2
   19058:	cmp	r2, #0
   1905c:	cmpne	r1, #0
   19060:	moveq	r3, #1
   19064:	moveq	ip, r3
   19068:	mov	r2, r3
   1906c:	mov	r1, ip
   19070:	bl	19fac <__assert_fail@plt+0x8a0c>
   19074:	cmp	r0, #0
   19078:	popne	{r4, pc}
   1907c:	bl	1952c <__assert_fail@plt+0x7f8c>
   19080:	push	{r4, lr}
   19084:	mov	r2, r1
   19088:	mov	r1, r0
   1908c:	mov	r0, #0
   19090:	bl	1900c <__assert_fail@plt+0x7a6c>
   19094:	pop	{r4, pc}
   19098:	push	{r4, lr}
   1909c:	mov	r2, r1
   190a0:	mov	r1, r0
   190a4:	mov	r0, #0
   190a8:	bl	1904c <__assert_fail@plt+0x7aac>
   190ac:	pop	{r4, pc}
   190b0:	push	{r4, r5, r6, r7, r8, lr}
   190b4:	mov	r5, r1
   190b8:	mov	r6, r2
   190bc:	ldr	r4, [r1]
   190c0:	subs	r7, r0, #0
   190c4:	beq	190e0 <__assert_fail@plt+0x7b40>
   190c8:	lsr	r2, r4, #1
   190cc:	add	r3, r2, #1
   190d0:	mvn	r3, r3
   190d4:	cmp	r4, r3
   190d8:	bls	19104 <__assert_fail@plt+0x7b64>
   190dc:	bl	1952c <__assert_fail@plt+0x7f8c>
   190e0:	cmp	r4, #0
   190e4:	bne	1910c <__assert_fail@plt+0x7b6c>
   190e8:	mov	r1, r2
   190ec:	mov	r0, #64	; 0x40
   190f0:	bl	1a4a8 <__assert_fail@plt+0x8f08>
   190f4:	cmp	r0, #0
   190f8:	movne	r4, r0
   190fc:	addeq	r4, r0, #1
   19100:	b	1910c <__assert_fail@plt+0x7b6c>
   19104:	add	r4, r4, #1
   19108:	add	r4, r4, r2
   1910c:	mov	r2, r6
   19110:	mov	r1, r4
   19114:	mov	r0, r7
   19118:	bl	1900c <__assert_fail@plt+0x7a6c>
   1911c:	str	r4, [r5]
   19120:	pop	{r4, r5, r6, r7, r8, pc}
   19124:	push	{r4, lr}
   19128:	mov	r2, #1
   1912c:	bl	190b0 <__assert_fail@plt+0x7b10>
   19130:	pop	{r4, pc}
   19134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19138:	sub	sp, sp, #12
   1913c:	mov	fp, r0
   19140:	mov	sl, r1
   19144:	mov	r9, r2
   19148:	mov	r7, r3
   1914c:	ldr	r6, [sp, #48]	; 0x30
   19150:	ldr	r5, [r1]
   19154:	asrs	r4, r5, #1
   19158:	bmi	192b4 <__assert_fail@plt+0x7d14>
   1915c:	cmp	r5, #0
   19160:	blt	192c8 <__assert_fail@plt+0x7d28>
   19164:	mvn	r3, #-2147483648	; 0x80000000
   19168:	sub	r3, r3, r4
   1916c:	cmp	r5, r3
   19170:	movle	r3, #0
   19174:	movgt	r3, #1
   19178:	cmp	r3, #0
   1917c:	addeq	r4, r4, r5
   19180:	mvnne	r4, #-2147483648	; 0x80000000
   19184:	mvn	r8, r7
   19188:	lsr	r8, r8, #31
   1918c:	cmp	r7, r4
   19190:	movge	r3, #0
   19194:	andlt	r3, r8, #1
   19198:	cmp	r3, #0
   1919c:	movne	r4, r7
   191a0:	cmp	r6, #0
   191a4:	blt	192dc <__assert_fail@plt+0x7d3c>
   191a8:	cmp	r6, #0
   191ac:	beq	19388 <__assert_fail@plt+0x7de8>
   191b0:	cmp	r4, #0
   191b4:	blt	19338 <__assert_fail@plt+0x7d98>
   191b8:	mov	r1, r6
   191bc:	mvn	r0, #-2147483648	; 0x80000000
   191c0:	bl	1a6b4 <__assert_fail@plt+0x9114>
   191c4:	cmp	r0, r4
   191c8:	movge	r0, #0
   191cc:	movlt	r0, #1
   191d0:	cmp	r0, #0
   191d4:	mvnne	r3, #-2147483648	; 0x80000000
   191d8:	strne	r3, [sp, #4]
   191dc:	beq	19370 <__assert_fail@plt+0x7dd0>
   191e0:	mov	r1, r6
   191e4:	ldr	r0, [sp, #4]
   191e8:	bl	1a6b4 <__assert_fail@plt+0x9114>
   191ec:	mov	r4, r0
   191f0:	mov	r1, r6
   191f4:	ldr	r0, [sp, #4]
   191f8:	bl	1a8d4 <__assert_fail@plt+0x9334>
   191fc:	ldr	r3, [sp, #4]
   19200:	sub	r1, r3, r1
   19204:	cmp	fp, #0
   19208:	moveq	r3, #0
   1920c:	streq	r3, [sl]
   19210:	sub	r3, r4, r5
   19214:	cmp	r3, r9
   19218:	bge	192a0 <__assert_fail@plt+0x7d00>
   1921c:	cmp	r9, #0
   19220:	blt	19394 <__assert_fail@plt+0x7df4>
   19224:	cmp	r5, #0
   19228:	blt	193a8 <__assert_fail@plt+0x7e08>
   1922c:	mvn	r3, #-2147483648	; 0x80000000
   19230:	sub	r3, r3, r9
   19234:	cmp	r5, r3
   19238:	movle	r3, #0
   1923c:	movgt	r3, #1
   19240:	cmp	r3, #0
   19244:	bne	19450 <__assert_fail@plt+0x7eb0>
   19248:	add	r5, r5, r9
   1924c:	mov	r4, r5
   19250:	cmp	r7, r5
   19254:	movge	r7, #0
   19258:	andlt	r7, r8, #1
   1925c:	cmp	r7, #0
   19260:	bne	19450 <__assert_fail@plt+0x7eb0>
   19264:	cmp	r6, #0
   19268:	blt	193bc <__assert_fail@plt+0x7e1c>
   1926c:	cmp	r6, #0
   19270:	beq	1929c <__assert_fail@plt+0x7cfc>
   19274:	cmp	r5, #0
   19278:	blt	19418 <__assert_fail@plt+0x7e78>
   1927c:	mov	r1, r6
   19280:	mvn	r0, #-2147483648	; 0x80000000
   19284:	bl	1a6b4 <__assert_fail@plt+0x9114>
   19288:	cmp	r5, r0
   1928c:	movle	r0, #0
   19290:	movgt	r0, #1
   19294:	cmp	r0, #0
   19298:	bne	19450 <__assert_fail@plt+0x7eb0>
   1929c:	mul	r1, r5, r6
   192a0:	mov	r0, fp
   192a4:	bl	18fbc <__assert_fail@plt+0x7a1c>
   192a8:	str	r4, [sl]
   192ac:	add	sp, sp, #12
   192b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192b4:	rsb	r3, r4, #-2147483648	; 0x80000000
   192b8:	cmp	r5, r3
   192bc:	movge	r3, #0
   192c0:	movlt	r3, #1
   192c4:	b	19178 <__assert_fail@plt+0x7bd8>
   192c8:	rsb	r3, r5, #-2147483648	; 0x80000000
   192cc:	cmp	r4, r3
   192d0:	movge	r3, #0
   192d4:	movlt	r3, #1
   192d8:	b	19178 <__assert_fail@plt+0x7bd8>
   192dc:	cmp	r4, #0
   192e0:	blt	19308 <__assert_fail@plt+0x7d68>
   192e4:	cmn	r6, #1
   192e8:	beq	19324 <__assert_fail@plt+0x7d84>
   192ec:	mov	r1, r6
   192f0:	mov	r0, #-2147483648	; 0x80000000
   192f4:	bl	1a6b4 <__assert_fail@plt+0x9114>
   192f8:	cmp	r0, r4
   192fc:	movge	r0, #0
   19300:	movlt	r0, #1
   19304:	b	191d0 <__assert_fail@plt+0x7c30>
   19308:	mov	r1, r6
   1930c:	mvn	r0, #-2147483648	; 0x80000000
   19310:	bl	1a6b4 <__assert_fail@plt+0x9114>
   19314:	cmp	r0, r4
   19318:	movle	r0, #0
   1931c:	movgt	r0, #1
   19320:	b	191d0 <__assert_fail@plt+0x7c30>
   19324:	add	r0, r4, #-2147483648	; 0x80000000
   19328:	cmp	r0, #0
   1932c:	movle	r0, #0
   19330:	movgt	r0, #1
   19334:	b	191d0 <__assert_fail@plt+0x7c30>
   19338:	cmn	r4, #1
   1933c:	beq	1935c <__assert_fail@plt+0x7dbc>
   19340:	mov	r1, r4
   19344:	mov	r0, #-2147483648	; 0x80000000
   19348:	bl	1a6b4 <__assert_fail@plt+0x9114>
   1934c:	cmp	r6, r0
   19350:	movle	r0, #0
   19354:	movgt	r0, #1
   19358:	b	191d0 <__assert_fail@plt+0x7c30>
   1935c:	add	r0, r6, #-2147483648	; 0x80000000
   19360:	cmp	r0, #0
   19364:	movle	r0, #0
   19368:	movgt	r0, #1
   1936c:	b	191d0 <__assert_fail@plt+0x7c30>
   19370:	mul	r1, r6, r4
   19374:	cmp	r1, #63	; 0x3f
   19378:	movle	r3, #64	; 0x40
   1937c:	strle	r3, [sp, #4]
   19380:	bgt	19204 <__assert_fail@plt+0x7c64>
   19384:	b	191e0 <__assert_fail@plt+0x7c40>
   19388:	mov	r3, #64	; 0x40
   1938c:	str	r3, [sp, #4]
   19390:	b	191e0 <__assert_fail@plt+0x7c40>
   19394:	rsb	r3, r9, #-2147483648	; 0x80000000
   19398:	cmp	r5, r3
   1939c:	movge	r3, #0
   193a0:	movlt	r3, #1
   193a4:	b	19240 <__assert_fail@plt+0x7ca0>
   193a8:	rsb	r3, r5, #-2147483648	; 0x80000000
   193ac:	cmp	r9, r3
   193b0:	movge	r3, #0
   193b4:	movlt	r3, #1
   193b8:	b	19240 <__assert_fail@plt+0x7ca0>
   193bc:	cmp	r5, #0
   193c0:	blt	193e8 <__assert_fail@plt+0x7e48>
   193c4:	cmn	r6, #1
   193c8:	beq	19404 <__assert_fail@plt+0x7e64>
   193cc:	mov	r1, r6
   193d0:	mov	r0, #-2147483648	; 0x80000000
   193d4:	bl	1a6b4 <__assert_fail@plt+0x9114>
   193d8:	cmp	r5, r0
   193dc:	movle	r0, #0
   193e0:	movgt	r0, #1
   193e4:	b	19294 <__assert_fail@plt+0x7cf4>
   193e8:	mov	r1, r6
   193ec:	mvn	r0, #-2147483648	; 0x80000000
   193f0:	bl	1a6b4 <__assert_fail@plt+0x9114>
   193f4:	cmp	r5, r0
   193f8:	movge	r0, #0
   193fc:	movlt	r0, #1
   19400:	b	19294 <__assert_fail@plt+0x7cf4>
   19404:	add	r0, r5, #-2147483648	; 0x80000000
   19408:	cmp	r0, #0
   1940c:	movle	r0, #0
   19410:	movgt	r0, #1
   19414:	b	19294 <__assert_fail@plt+0x7cf4>
   19418:	cmn	r5, #1
   1941c:	beq	1943c <__assert_fail@plt+0x7e9c>
   19420:	mov	r1, r5
   19424:	mov	r0, #-2147483648	; 0x80000000
   19428:	bl	1a6b4 <__assert_fail@plt+0x9114>
   1942c:	cmp	r6, r0
   19430:	movle	r0, #0
   19434:	movgt	r0, #1
   19438:	b	19294 <__assert_fail@plt+0x7cf4>
   1943c:	add	r0, r6, #-2147483648	; 0x80000000
   19440:	cmp	r0, #0
   19444:	movle	r0, #0
   19448:	movgt	r0, #1
   1944c:	b	19294 <__assert_fail@plt+0x7cf4>
   19450:	bl	1952c <__assert_fail@plt+0x7f8c>
   19454:	push	{r4, lr}
   19458:	bl	19a88 <__assert_fail@plt+0x84e8>
   1945c:	cmp	r0, #0
   19460:	popne	{r4, pc}
   19464:	bl	1952c <__assert_fail@plt+0x7f8c>
   19468:	push	{r4, lr}
   1946c:	mov	r1, #1
   19470:	bl	19454 <__assert_fail@plt+0x7eb4>
   19474:	pop	{r4, pc}
   19478:	push	{r4, lr}
   1947c:	bl	19a88 <__assert_fail@plt+0x84e8>
   19480:	cmp	r0, #0
   19484:	popne	{r4, pc}
   19488:	bl	1952c <__assert_fail@plt+0x7f8c>
   1948c:	push	{r4, lr}
   19490:	mov	r1, #1
   19494:	bl	19478 <__assert_fail@plt+0x7ed8>
   19498:	pop	{r4, pc}
   1949c:	push	{r4, r5, r6, lr}
   194a0:	mov	r5, r0
   194a4:	mov	r4, r1
   194a8:	mov	r0, r1
   194ac:	bl	18f88 <__assert_fail@plt+0x79e8>
   194b0:	mov	r2, r4
   194b4:	mov	r1, r5
   194b8:	bl	1124c <memcpy@plt>
   194bc:	pop	{r4, r5, r6, pc}
   194c0:	push	{r4, r5, r6, lr}
   194c4:	mov	r5, r0
   194c8:	mov	r4, r1
   194cc:	mov	r0, r1
   194d0:	bl	18f9c <__assert_fail@plt+0x79fc>
   194d4:	mov	r2, r4
   194d8:	mov	r1, r5
   194dc:	bl	1124c <memcpy@plt>
   194e0:	pop	{r4, r5, r6, pc}
   194e4:	push	{r4, r5, r6, lr}
   194e8:	mov	r5, r0
   194ec:	mov	r4, r1
   194f0:	add	r0, r1, #1
   194f4:	bl	18f9c <__assert_fail@plt+0x79fc>
   194f8:	mov	r2, #0
   194fc:	strb	r2, [r0, r4]
   19500:	mov	r2, r4
   19504:	mov	r1, r5
   19508:	bl	1124c <memcpy@plt>
   1950c:	pop	{r4, r5, r6, pc}
   19510:	push	{r4, lr}
   19514:	mov	r4, r0
   19518:	bl	113f0 <strlen@plt>
   1951c:	add	r1, r0, #1
   19520:	mov	r0, r4
   19524:	bl	1949c <__assert_fail@plt+0x7efc>
   19528:	pop	{r4, pc}
   1952c:	push	{r4, lr}
   19530:	ldr	r3, [pc, #40]	; 19560 <__assert_fail@plt+0x7fc0>
   19534:	ldr	r4, [r3]
   19538:	mov	r2, #5
   1953c:	ldr	r1, [pc, #32]	; 19564 <__assert_fail@plt+0x7fc4>
   19540:	mov	r0, #0
   19544:	bl	11288 <dcgettext@plt>
   19548:	mov	r3, r0
   1954c:	ldr	r2, [pc, #20]	; 19568 <__assert_fail@plt+0x7fc8>
   19550:	mov	r1, #0
   19554:	mov	r0, r4
   19558:	bl	11354 <error@plt>
   1955c:	bl	11570 <abort@plt>
   19560:	andeq	sp, r2, r4, ror r1
   19564:	andeq	ip, r1, r4, lsr #25
   19568:	andeq	ip, r1, r4, lsl r8
   1956c:	cmp	r2, #0
   19570:	beq	195d0 <__assert_fail@plt+0x8030>
   19574:	push	{r4, r5, r6, lr}
   19578:	sub	r4, r2, #1
   1957c:	mov	r5, r0
   19580:	mov	r6, r1
   19584:	mvn	r0, #0
   19588:	bl	1a4a8 <__assert_fail@plt+0x8f08>
   1958c:	mov	r2, r0
   19590:	mov	r0, #0
   19594:	mov	r1, r0
   19598:	mvn	lr, #0
   1959c:	mov	ip, #1
   195a0:	ldr	r3, [r5]
   195a4:	cmp	r2, r3
   195a8:	strcc	lr, [r5]
   195ac:	movcc	r3, ip
   195b0:	mulcs	r3, r3, r6
   195b4:	strcs	r3, [r5]
   195b8:	movcs	r3, r1
   195bc:	orr	r0, r0, r3
   195c0:	sub	r4, r4, #1
   195c4:	cmn	r4, #1
   195c8:	bne	195a0 <__assert_fail@plt+0x8000>
   195cc:	pop	{r4, r5, r6, pc}
   195d0:	mov	r0, #0
   195d4:	bx	lr
   195d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   195dc:	sub	sp, sp, #12
   195e0:	cmp	r2, #36	; 0x24
   195e4:	bhi	19624 <__assert_fail@plt+0x8084>
   195e8:	mov	r5, r0
   195ec:	mov	r6, r1
   195f0:	mov	r7, r2
   195f4:	mov	r9, r3
   195f8:	cmp	r1, #0
   195fc:	addeq	r6, sp, #4
   19600:	bl	11420 <__errno_location@plt>
   19604:	mov	r8, r0
   19608:	mov	r3, #0
   1960c:	str	r3, [r0]
   19610:	ldrb	r4, [r5]
   19614:	bl	113c0 <__ctype_b_loc@plt>
   19618:	ldr	r1, [r0]
   1961c:	mov	r2, r5
   19620:	b	1963c <__assert_fail@plt+0x809c>
   19624:	ldr	r3, [pc, #1104]	; 19a7c <__assert_fail@plt+0x84dc>
   19628:	mov	r2, #84	; 0x54
   1962c:	ldr	r1, [pc, #1100]	; 19a80 <__assert_fail@plt+0x84e0>
   19630:	ldr	r0, [pc, #1100]	; 19a84 <__assert_fail@plt+0x84e4>
   19634:	bl	115a0 <__assert_fail@plt>
   19638:	ldrb	r4, [r2, #1]!
   1963c:	lsl	r3, r4, #1
   19640:	ldrh	r3, [r1, r3]
   19644:	tst	r3, #8192	; 0x2000
   19648:	bne	19638 <__assert_fail@plt+0x8098>
   1964c:	cmp	r4, #45	; 0x2d
   19650:	moveq	r4, #4
   19654:	bne	19664 <__assert_fail@plt+0x80c4>
   19658:	mov	r0, r4
   1965c:	add	sp, sp, #12
   19660:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19664:	mov	r2, r7
   19668:	mov	r1, r6
   1966c:	mov	r0, r5
   19670:	bl	113e4 <strtoul@plt>
   19674:	str	r0, [sp]
   19678:	ldr	r7, [r6]
   1967c:	cmp	r5, r7
   19680:	beq	196a4 <__assert_fail@plt+0x8104>
   19684:	ldr	r3, [r8]
   19688:	cmp	r3, #0
   1968c:	beq	196e8 <__assert_fail@plt+0x8148>
   19690:	cmp	r3, #34	; 0x22
   19694:	moveq	r4, #1
   19698:	beq	196ec <__assert_fail@plt+0x814c>
   1969c:	mov	r4, #4
   196a0:	b	19658 <__assert_fail@plt+0x80b8>
   196a4:	ldr	r3, [sp, #40]	; 0x28
   196a8:	cmp	r3, #0
   196ac:	moveq	r4, #4
   196b0:	beq	19658 <__assert_fail@plt+0x80b8>
   196b4:	ldrb	r1, [r7]
   196b8:	cmp	r1, #0
   196bc:	moveq	r4, #4
   196c0:	beq	19658 <__assert_fail@plt+0x80b8>
   196c4:	mov	r0, r3
   196c8:	bl	113fc <strchr@plt>
   196cc:	cmp	r0, #0
   196d0:	moveq	r4, #4
   196d4:	beq	19658 <__assert_fail@plt+0x80b8>
   196d8:	mov	r3, #1
   196dc:	str	r3, [sp]
   196e0:	mov	r4, #0
   196e4:	b	196fc <__assert_fail@plt+0x815c>
   196e8:	mov	r4, #0
   196ec:	ldr	r3, [sp, #40]	; 0x28
   196f0:	cmp	r3, #0
   196f4:	streq	r0, [r9]
   196f8:	beq	19658 <__assert_fail@plt+0x80b8>
   196fc:	ldrb	r5, [r7]
   19700:	cmp	r5, #0
   19704:	beq	19990 <__assert_fail@plt+0x83f0>
   19708:	mov	r1, r5
   1970c:	ldr	r0, [sp, #40]	; 0x28
   19710:	bl	113fc <strchr@plt>
   19714:	cmp	r0, #0
   19718:	beq	197ec <__assert_fail@plt+0x824c>
   1971c:	sub	r3, r5, #69	; 0x45
   19720:	cmp	r3, #47	; 0x2f
   19724:	ldrls	pc, [pc, r3, lsl #2]
   19728:	b	19858 <__assert_fail@plt+0x82b8>
   1972c:	strdeq	r9, [r1], -ip
   19730:	andeq	r9, r1, r8, asr r8
   19734:	strdeq	r9, [r1], -ip
   19738:	andeq	r9, r1, r8, asr r8
   1973c:	andeq	r9, r1, r8, asr r8
   19740:	andeq	r9, r1, r8, asr r8
   19744:	strdeq	r9, [r1], -ip
   19748:	andeq	r9, r1, r8, asr r8
   1974c:	strdeq	r9, [r1], -ip
   19750:	andeq	r9, r1, r8, asr r8
   19754:	andeq	r9, r1, r8, asr r8
   19758:	strdeq	r9, [r1], -ip
   1975c:	andeq	r9, r1, r8, asr r8
   19760:	andeq	r9, r1, r8, asr r8
   19764:	andeq	r9, r1, r8, asr r8
   19768:	strdeq	r9, [r1], -ip
   1976c:	andeq	r9, r1, r8, asr r8
   19770:	andeq	r9, r1, r8, asr r8
   19774:	andeq	r9, r1, r8, asr r8
   19778:	andeq	r9, r1, r8, asr r8
   1977c:	strdeq	r9, [r1], -ip
   19780:	strdeq	r9, [r1], -ip
   19784:	andeq	r9, r1, r8, asr r8
   19788:	andeq	r9, r1, r8, asr r8
   1978c:	andeq	r9, r1, r8, asr r8
   19790:	andeq	r9, r1, r8, asr r8
   19794:	andeq	r9, r1, r8, asr r8
   19798:	andeq	r9, r1, r8, asr r8
   1979c:	andeq	r9, r1, r8, asr r8
   197a0:	andeq	r9, r1, r8, asr r8
   197a4:	andeq	r9, r1, r8, asr r8
   197a8:	andeq	r9, r1, r8, asr r8
   197ac:	andeq	r9, r1, r8, asr r8
   197b0:	andeq	r9, r1, r8, asr r8
   197b4:	strdeq	r9, [r1], -ip
   197b8:	andeq	r9, r1, r8, asr r8
   197bc:	andeq	r9, r1, r8, asr r8
   197c0:	andeq	r9, r1, r8, asr r8
   197c4:	strdeq	r9, [r1], -ip
   197c8:	andeq	r9, r1, r8, asr r8
   197cc:	strdeq	r9, [r1], -ip
   197d0:	andeq	r9, r1, r8, asr r8
   197d4:	andeq	r9, r1, r8, asr r8
   197d8:	andeq	r9, r1, r8, asr r8
   197dc:	andeq	r9, r1, r8, asr r8
   197e0:	andeq	r9, r1, r8, asr r8
   197e4:	andeq	r9, r1, r8, asr r8
   197e8:	strdeq	r9, [r1], -ip
   197ec:	ldr	r3, [sp]
   197f0:	str	r3, [r9]
   197f4:	orr	r4, r4, #2
   197f8:	b	19658 <__assert_fail@plt+0x80b8>
   197fc:	mov	r1, #48	; 0x30
   19800:	ldr	r0, [sp, #40]	; 0x28
   19804:	bl	113fc <strchr@plt>
   19808:	cmp	r0, #0
   1980c:	beq	19948 <__assert_fail@plt+0x83a8>
   19810:	ldrb	r3, [r7, #1]
   19814:	cmp	r3, #68	; 0x44
   19818:	beq	19834 <__assert_fail@plt+0x8294>
   1981c:	cmp	r3, #105	; 0x69
   19820:	beq	19840 <__assert_fail@plt+0x82a0>
   19824:	cmp	r3, #66	; 0x42
   19828:	movne	r7, #1
   1982c:	movne	r1, #1024	; 0x400
   19830:	bne	19860 <__assert_fail@plt+0x82c0>
   19834:	mov	r7, #2
   19838:	mov	r1, #1000	; 0x3e8
   1983c:	b	19860 <__assert_fail@plt+0x82c0>
   19840:	ldrb	r7, [r7, #2]
   19844:	cmp	r7, #66	; 0x42
   19848:	movne	r7, #1
   1984c:	moveq	r7, #3
   19850:	mov	r1, #1024	; 0x400
   19854:	b	19860 <__assert_fail@plt+0x82c0>
   19858:	mov	r7, #1
   1985c:	mov	r1, #1024	; 0x400
   19860:	sub	r5, r5, #66	; 0x42
   19864:	cmp	r5, #53	; 0x35
   19868:	ldrls	pc, [pc, r5, lsl #2]
   1986c:	b	19a64 <__assert_fail@plt+0x84c4>
   19870:	muleq	r1, ip, r9
   19874:	andeq	r9, r1, r4, ror #20
   19878:	andeq	r9, r1, r4, ror #20
   1987c:	andeq	r9, r1, r0, asr #19
   19880:	andeq	r9, r1, r4, ror #20
   19884:	ldrdeq	r9, [r1], -r0
   19888:	andeq	r9, r1, r4, ror #20
   1988c:	andeq	r9, r1, r4, ror #20
   19890:	andeq	r9, r1, r4, ror #20
   19894:	andeq	r9, r1, r0, ror #19
   19898:	andeq	r9, r1, r4, ror #20
   1989c:	strdeq	r9, [r1], -r0
   198a0:	andeq	r9, r1, r4, ror #20
   198a4:	andeq	r9, r1, r4, ror #20
   198a8:	andeq	r9, r1, r0, lsl #20
   198ac:	andeq	r9, r1, r4, ror #20
   198b0:	andeq	r9, r1, r4, ror #20
   198b4:	andeq	r9, r1, r4, ror #20
   198b8:	andeq	r9, r1, r0, lsl sl
   198bc:	andeq	r9, r1, r4, ror #20
   198c0:	andeq	r9, r1, r4, ror #20
   198c4:	andeq	r9, r1, r4, ror #20
   198c8:	andeq	r9, r1, r4, ror #20
   198cc:	andeq	r9, r1, r4, asr #20
   198d0:	andeq	r9, r1, r4, asr sl
   198d4:	andeq	r9, r1, r4, ror #20
   198d8:	andeq	r9, r1, r4, ror #20
   198dc:	andeq	r9, r1, r4, ror #20
   198e0:	andeq	r9, r1, r4, ror #20
   198e4:	andeq	r9, r1, r4, ror #20
   198e8:	andeq	r9, r1, r4, ror #20
   198ec:	andeq	r9, r1, r4, ror #20
   198f0:	andeq	r9, r1, r4, asr r9
   198f4:	andeq	r9, r1, r4, ror sl
   198f8:	andeq	r9, r1, r4, ror #20
   198fc:	andeq	r9, r1, r4, ror #20
   19900:	andeq	r9, r1, r4, ror #20
   19904:	ldrdeq	r9, [r1], -r0
   19908:	andeq	r9, r1, r4, ror #20
   1990c:	andeq	r9, r1, r4, ror #20
   19910:	andeq	r9, r1, r4, ror #20
   19914:	andeq	r9, r1, r0, ror #19
   19918:	andeq	r9, r1, r4, ror #20
   1991c:	strdeq	r9, [r1], -r0
   19920:	andeq	r9, r1, r4, ror #20
   19924:	andeq	r9, r1, r4, ror #20
   19928:	andeq	r9, r1, r4, ror #20
   1992c:	andeq	r9, r1, r4, ror #20
   19930:	andeq	r9, r1, r4, ror #20
   19934:	andeq	r9, r1, r4, ror #20
   19938:	andeq	r9, r1, r0, lsl sl
   1993c:	andeq	r9, r1, r4, ror #20
   19940:	andeq	r9, r1, r4, ror #20
   19944:	andeq	r9, r1, r0, lsr #20
   19948:	mov	r7, #1
   1994c:	mov	r1, #1024	; 0x400
   19950:	b	19860 <__assert_fail@plt+0x82c0>
   19954:	ldr	r3, [sp]
   19958:	cmp	r3, #8388608	; 0x800000
   1995c:	mvncs	r3, #0
   19960:	strcs	r3, [sp]
   19964:	movcs	r0, #1
   19968:	lslcc	r3, r3, #9
   1996c:	strcc	r3, [sp]
   19970:	movcc	r0, #0
   19974:	orr	r4, r4, r0
   19978:	ldr	r3, [r6]
   1997c:	add	r2, r3, r7
   19980:	str	r2, [r6]
   19984:	ldrb	r3, [r3, r7]
   19988:	cmp	r3, #0
   1998c:	orrne	r4, r4, #2
   19990:	ldr	r3, [sp]
   19994:	str	r3, [r9]
   19998:	b	19658 <__assert_fail@plt+0x80b8>
   1999c:	ldr	r3, [sp]
   199a0:	cmp	r3, #4194304	; 0x400000
   199a4:	mvncs	r3, #0
   199a8:	strcs	r3, [sp]
   199ac:	movcs	r0, #1
   199b0:	lslcc	r3, r3, #10
   199b4:	strcc	r3, [sp]
   199b8:	movcc	r0, #0
   199bc:	b	19974 <__assert_fail@plt+0x83d4>
   199c0:	mov	r2, #6
   199c4:	mov	r0, sp
   199c8:	bl	1956c <__assert_fail@plt+0x7fcc>
   199cc:	b	19974 <__assert_fail@plt+0x83d4>
   199d0:	mov	r2, #3
   199d4:	mov	r0, sp
   199d8:	bl	1956c <__assert_fail@plt+0x7fcc>
   199dc:	b	19974 <__assert_fail@plt+0x83d4>
   199e0:	mov	r2, #1
   199e4:	mov	r0, sp
   199e8:	bl	1956c <__assert_fail@plt+0x7fcc>
   199ec:	b	19974 <__assert_fail@plt+0x83d4>
   199f0:	mov	r2, #2
   199f4:	mov	r0, sp
   199f8:	bl	1956c <__assert_fail@plt+0x7fcc>
   199fc:	b	19974 <__assert_fail@plt+0x83d4>
   19a00:	mov	r2, #5
   19a04:	mov	r0, sp
   19a08:	bl	1956c <__assert_fail@plt+0x7fcc>
   19a0c:	b	19974 <__assert_fail@plt+0x83d4>
   19a10:	mov	r2, #4
   19a14:	mov	r0, sp
   19a18:	bl	1956c <__assert_fail@plt+0x7fcc>
   19a1c:	b	19974 <__assert_fail@plt+0x83d4>
   19a20:	ldr	r3, [sp]
   19a24:	cmp	r3, #0
   19a28:	mvnlt	r3, #0
   19a2c:	strlt	r3, [sp]
   19a30:	movlt	r0, #1
   19a34:	lslge	r3, r3, #1
   19a38:	strge	r3, [sp]
   19a3c:	movge	r0, #0
   19a40:	b	19974 <__assert_fail@plt+0x83d4>
   19a44:	mov	r2, #8
   19a48:	mov	r0, sp
   19a4c:	bl	1956c <__assert_fail@plt+0x7fcc>
   19a50:	b	19974 <__assert_fail@plt+0x83d4>
   19a54:	mov	r2, #7
   19a58:	mov	r0, sp
   19a5c:	bl	1956c <__assert_fail@plt+0x7fcc>
   19a60:	b	19974 <__assert_fail@plt+0x83d4>
   19a64:	ldr	r3, [sp]
   19a68:	str	r3, [r9]
   19a6c:	orr	r4, r4, #2
   19a70:	b	19658 <__assert_fail@plt+0x80b8>
   19a74:	mov	r0, #0
   19a78:	b	19974 <__assert_fail@plt+0x83d4>
   19a7c:			; <UNDEFINED> instruction: 0x0001ccb8
   19a80:	andeq	ip, r1, r4, asr #25
   19a84:	ldrdeq	ip, [r1], -r0
   19a88:	push	{r4, lr}
   19a8c:	mov	r2, r0
   19a90:	mov	r3, r1
   19a94:	cmp	r1, #0
   19a98:	cmpne	r0, #0
   19a9c:	moveq	r3, #1
   19aa0:	moveq	r2, r3
   19aa4:	umull	r0, r1, r2, r3
   19aa8:	cmp	r0, #0
   19aac:	cmpge	r1, #0
   19ab0:	bne	19ac4 <__assert_fail@plt+0x8524>
   19ab4:	mov	r1, r3
   19ab8:	mov	r0, r2
   19abc:	bl	111c8 <calloc@plt>
   19ac0:	pop	{r4, pc}
   19ac4:	bl	11420 <__errno_location@plt>
   19ac8:	mov	r3, #12
   19acc:	str	r3, [r0]
   19ad0:	mov	r0, #0
   19ad4:	pop	{r4, pc}
   19ad8:	push	{r1, r2, r3}
   19adc:	push	{r4, r5, r6, lr}
   19ae0:	sub	sp, sp, #12
   19ae4:	mov	r5, r0
   19ae8:	ldr	r1, [sp, #28]
   19aec:	add	r3, sp, #32
   19af0:	str	r3, [sp, #4]
   19af4:	cmp	r1, #0
   19af8:	beq	19b40 <__assert_fail@plt+0x85a0>
   19afc:	ldr	r3, [pc, #540]	; 19d20 <__assert_fail@plt+0x8780>
   19b00:	cmp	r1, r3
   19b04:	beq	19b70 <__assert_fail@plt+0x85d0>
   19b08:	cmp	r1, #11
   19b0c:	beq	19d10 <__assert_fail@plt+0x8770>
   19b10:	bgt	19c9c <__assert_fail@plt+0x86fc>
   19b14:	cmp	r1, #3
   19b18:	beq	19d10 <__assert_fail@plt+0x8770>
   19b1c:	ble	19c5c <__assert_fail@plt+0x86bc>
   19b20:	cmp	r1, #8
   19b24:	beq	19c7c <__assert_fail@plt+0x86dc>
   19b28:	ble	19c74 <__assert_fail@plt+0x86d4>
   19b2c:	cmp	r1, #9
   19b30:	beq	19d10 <__assert_fail@plt+0x8770>
   19b34:	cmp	r1, #10
   19b38:	bne	19cd4 <__assert_fail@plt+0x8734>
   19b3c:	b	19c7c <__assert_fail@plt+0x86dc>
   19b40:	ldr	r3, [sp, #4]
   19b44:	add	r2, r3, #4
   19b48:	str	r2, [sp, #4]
   19b4c:	ldr	r2, [r3]
   19b50:	mov	r1, #0
   19b54:	bl	114b0 <fcntl64@plt>
   19b58:	mov	r4, r0
   19b5c:	mov	r0, r4
   19b60:	add	sp, sp, #12
   19b64:	pop	{r4, r5, r6, lr}
   19b68:	add	sp, sp, #12
   19b6c:	bx	lr
   19b70:	ldr	r3, [sp, #4]
   19b74:	add	r2, r3, #4
   19b78:	str	r2, [sp, #4]
   19b7c:	ldr	r6, [r3]
   19b80:	ldr	r3, [pc, #412]	; 19d24 <__assert_fail@plt+0x8784>
   19b84:	ldr	r3, [r3]
   19b88:	cmp	r3, #0
   19b8c:	blt	19bec <__assert_fail@plt+0x864c>
   19b90:	mov	r2, r6
   19b94:	ldr	r1, [pc, #388]	; 19d20 <__assert_fail@plt+0x8780>
   19b98:	bl	114b0 <fcntl64@plt>
   19b9c:	subs	r4, r0, #0
   19ba0:	blt	19bb4 <__assert_fail@plt+0x8614>
   19ba4:	mov	r2, #1
   19ba8:	ldr	r3, [pc, #372]	; 19d24 <__assert_fail@plt+0x8784>
   19bac:	str	r2, [r3]
   19bb0:	b	19b5c <__assert_fail@plt+0x85bc>
   19bb4:	bl	11420 <__errno_location@plt>
   19bb8:	ldr	r3, [r0]
   19bbc:	cmp	r3, #22
   19bc0:	bne	19ba4 <__assert_fail@plt+0x8604>
   19bc4:	mov	r2, r6
   19bc8:	mov	r1, #0
   19bcc:	mov	r0, r5
   19bd0:	bl	114b0 <fcntl64@plt>
   19bd4:	subs	r4, r0, #0
   19bd8:	blt	19b5c <__assert_fail@plt+0x85bc>
   19bdc:	mvn	r2, #0
   19be0:	ldr	r3, [pc, #316]	; 19d24 <__assert_fail@plt+0x8784>
   19be4:	str	r2, [r3]
   19be8:	b	19c10 <__assert_fail@plt+0x8670>
   19bec:	mov	r2, r6
   19bf0:	mov	r1, #0
   19bf4:	bl	114b0 <fcntl64@plt>
   19bf8:	subs	r4, r0, #0
   19bfc:	blt	19b5c <__assert_fail@plt+0x85bc>
   19c00:	ldr	r3, [pc, #284]	; 19d24 <__assert_fail@plt+0x8784>
   19c04:	ldr	r3, [r3]
   19c08:	cmn	r3, #1
   19c0c:	bne	19b5c <__assert_fail@plt+0x85bc>
   19c10:	mov	r1, #1
   19c14:	mov	r0, r4
   19c18:	bl	114b0 <fcntl64@plt>
   19c1c:	subs	r2, r0, #0
   19c20:	blt	19c3c <__assert_fail@plt+0x869c>
   19c24:	orr	r2, r2, #1
   19c28:	mov	r1, #2
   19c2c:	mov	r0, r4
   19c30:	bl	114b0 <fcntl64@plt>
   19c34:	cmn	r0, #1
   19c38:	bne	19b5c <__assert_fail@plt+0x85bc>
   19c3c:	bl	11420 <__errno_location@plt>
   19c40:	mov	r5, r0
   19c44:	ldr	r6, [r0]
   19c48:	mov	r0, r4
   19c4c:	bl	11588 <close@plt>
   19c50:	str	r6, [r5]
   19c54:	mvn	r4, #0
   19c58:	b	19b5c <__assert_fail@plt+0x85bc>
   19c5c:	cmp	r1, #1
   19c60:	beq	19d10 <__assert_fail@plt+0x8770>
   19c64:	bgt	19c7c <__assert_fail@plt+0x86dc>
   19c68:	cmp	r1, #0
   19c6c:	bne	19cd4 <__assert_fail@plt+0x8734>
   19c70:	b	19c7c <__assert_fail@plt+0x86dc>
   19c74:	cmp	r1, #4
   19c78:	bne	19cd4 <__assert_fail@plt+0x8734>
   19c7c:	ldr	r3, [sp, #4]
   19c80:	add	r2, r3, #4
   19c84:	str	r2, [sp, #4]
   19c88:	ldr	r2, [r3]
   19c8c:	mov	r0, r5
   19c90:	bl	114b0 <fcntl64@plt>
   19c94:	mov	r4, r0
   19c98:	b	19b5c <__assert_fail@plt+0x85bc>
   19c9c:	ldr	r3, [pc, #132]	; 19d28 <__assert_fail@plt+0x8788>
   19ca0:	cmp	r1, r3
   19ca4:	bgt	19cf4 <__assert_fail@plt+0x8754>
   19ca8:	sub	r3, r3, #1
   19cac:	cmp	r1, r3
   19cb0:	bge	19c7c <__assert_fail@plt+0x86dc>
   19cb4:	sub	r3, r3, #5
   19cb8:	cmp	r1, r3
   19cbc:	beq	19d10 <__assert_fail@plt+0x8770>
   19cc0:	add	r3, r3, #1
   19cc4:	cmp	r1, r3
   19cc8:	beq	19c7c <__assert_fail@plt+0x86dc>
   19ccc:	cmp	r1, #1024	; 0x400
   19cd0:	beq	19c7c <__assert_fail@plt+0x86dc>
   19cd4:	ldr	r3, [sp, #4]
   19cd8:	add	r2, r3, #4
   19cdc:	str	r2, [sp, #4]
   19ce0:	ldr	r2, [r3]
   19ce4:	mov	r0, r5
   19ce8:	bl	114b0 <fcntl64@plt>
   19cec:	mov	r4, r0
   19cf0:	b	19b5c <__assert_fail@plt+0x85bc>
   19cf4:	ldr	r3, [pc, #48]	; 19d2c <__assert_fail@plt+0x878c>
   19cf8:	cmp	r1, r3
   19cfc:	beq	19c7c <__assert_fail@plt+0x86dc>
   19d00:	blt	19d10 <__assert_fail@plt+0x8770>
   19d04:	add	r3, r3, #1
   19d08:	cmp	r1, r3
   19d0c:	bne	19cd4 <__assert_fail@plt+0x8734>
   19d10:	mov	r0, r5
   19d14:	bl	114b0 <fcntl64@plt>
   19d18:	mov	r4, r0
   19d1c:	b	19b5c <__assert_fail@plt+0x85bc>
   19d20:	andeq	r0, r0, r6, lsl #8
   19d24:	andeq	sp, r2, r4, ror #7
   19d28:	andeq	r0, r0, r7, lsl #8
   19d2c:	andeq	r0, r0, r9, lsl #8
   19d30:	push	{r4, lr}
   19d34:	sub	sp, sp, #8
   19d38:	subs	r4, r0, #0
   19d3c:	beq	19d50 <__assert_fail@plt+0x87b0>
   19d40:	mov	r0, r4
   19d44:	bl	1139c <__freading@plt>
   19d48:	cmp	r0, #0
   19d4c:	bne	19d60 <__assert_fail@plt+0x87c0>
   19d50:	mov	r0, r4
   19d54:	bl	11210 <fflush@plt>
   19d58:	add	sp, sp, #8
   19d5c:	pop	{r4, pc}
   19d60:	ldr	r3, [r4]
   19d64:	tst	r3, #256	; 0x100
   19d68:	bne	19d78 <__assert_fail@plt+0x87d8>
   19d6c:	mov	r0, r4
   19d70:	bl	11210 <fflush@plt>
   19d74:	b	19d58 <__assert_fail@plt+0x87b8>
   19d78:	mov	r3, #1
   19d7c:	str	r3, [sp]
   19d80:	mov	r2, #0
   19d84:	mov	r3, #0
   19d88:	mov	r0, r4
   19d8c:	bl	19e2c <__assert_fail@plt+0x888c>
   19d90:	b	19d6c <__assert_fail@plt+0x87cc>
   19d94:	ldr	r2, [r0, #20]
   19d98:	ldr	r3, [r0, #16]
   19d9c:	cmp	r2, r3
   19da0:	bhi	19dcc <__assert_fail@plt+0x882c>
   19da4:	ldr	r2, [r0, #8]
   19da8:	ldr	r3, [r0, #4]
   19dac:	sub	r2, r2, r3
   19db0:	ldr	r3, [r0]
   19db4:	ands	r3, r3, #256	; 0x100
   19db8:	ldrne	r3, [r0, #44]	; 0x2c
   19dbc:	ldrne	r0, [r0, #36]	; 0x24
   19dc0:	subne	r3, r3, r0
   19dc4:	add	r0, r3, r2
   19dc8:	bx	lr
   19dcc:	mov	r0, #0
   19dd0:	bx	lr
   19dd4:	push	{r4, r5, lr}
   19dd8:	sub	sp, sp, #12
   19ddc:	mov	r5, r0
   19de0:	bl	11420 <__errno_location@plt>
   19de4:	mov	r4, r0
   19de8:	ldr	r3, [r0]
   19dec:	str	r3, [sp]
   19df0:	str	r3, [sp, #4]
   19df4:	mov	r3, #0
   19df8:	str	r3, [r0]
   19dfc:	mov	r0, r5
   19e00:	bl	11228 <free@plt>
   19e04:	ldr	r3, [r4]
   19e08:	cmp	r3, #0
   19e0c:	moveq	r3, #4
   19e10:	movne	r3, #0
   19e14:	add	r2, sp, #8
   19e18:	add	r3, r2, r3
   19e1c:	ldr	r3, [r3, #-8]
   19e20:	str	r3, [r4]
   19e24:	add	sp, sp, #12
   19e28:	pop	{r4, r5, pc}
   19e2c:	push	{r4, r5, r6, r7, lr}
   19e30:	sub	sp, sp, #12
   19e34:	mov	r4, r0
   19e38:	mov	r6, r2
   19e3c:	mov	r7, r3
   19e40:	ldr	r5, [sp, #32]
   19e44:	ldr	r2, [r0, #8]
   19e48:	ldr	r3, [r0, #4]
   19e4c:	cmp	r2, r3
   19e50:	beq	19e70 <__assert_fail@plt+0x88d0>
   19e54:	str	r5, [sp]
   19e58:	mov	r2, r6
   19e5c:	mov	r3, r7
   19e60:	mov	r0, r4
   19e64:	bl	114a4 <fseeko64@plt>
   19e68:	add	sp, sp, #12
   19e6c:	pop	{r4, r5, r6, r7, pc}
   19e70:	ldr	r2, [r0, #20]
   19e74:	ldr	r3, [r0, #16]
   19e78:	cmp	r2, r3
   19e7c:	bne	19e54 <__assert_fail@plt+0x88b4>
   19e80:	ldr	r3, [r0, #36]	; 0x24
   19e84:	cmp	r3, #0
   19e88:	bne	19e54 <__assert_fail@plt+0x88b4>
   19e8c:	bl	11468 <fileno@plt>
   19e90:	str	r5, [sp]
   19e94:	mov	r2, r6
   19e98:	mov	r3, r7
   19e9c:	bl	1130c <lseek64@plt>
   19ea0:	mvn	r2, #0
   19ea4:	mvn	r3, #0
   19ea8:	cmp	r1, r3
   19eac:	cmpeq	r0, r2
   19eb0:	beq	19ecc <__assert_fail@plt+0x892c>
   19eb4:	ldr	r3, [r4]
   19eb8:	bic	r3, r3, #16
   19ebc:	str	r3, [r4]
   19ec0:	strd	r0, [r4, #80]	; 0x50
   19ec4:	mov	r0, #0
   19ec8:	b	19e68 <__assert_fail@plt+0x88c8>
   19ecc:	mvn	r0, #0
   19ed0:	b	19e68 <__assert_fail@plt+0x88c8>
   19ed4:	push	{r4, lr}
   19ed8:	cmp	r0, #0
   19edc:	moveq	r0, #1
   19ee0:	cmp	r0, #0
   19ee4:	blt	19ef0 <__assert_fail@plt+0x8950>
   19ee8:	bl	11384 <malloc@plt>
   19eec:	pop	{r4, pc}
   19ef0:	bl	11420 <__errno_location@plt>
   19ef4:	mov	r3, #12
   19ef8:	str	r3, [r0]
   19efc:	mov	r0, #0
   19f00:	pop	{r4, pc}
   19f04:	push	{r4, r5, r6, r7, lr}
   19f08:	sub	sp, sp, #12
   19f0c:	mov	r7, r1
   19f10:	mov	r5, r2
   19f14:	subs	r6, r0, #0
   19f18:	addeq	r6, sp, #4
   19f1c:	mov	r0, r6
   19f20:	bl	11348 <mbrtowc@plt>
   19f24:	mov	r4, r0
   19f28:	cmp	r5, #0
   19f2c:	cmnne	r0, #3
   19f30:	bhi	19f40 <__assert_fail@plt+0x89a0>
   19f34:	mov	r0, r4
   19f38:	add	sp, sp, #12
   19f3c:	pop	{r4, r5, r6, r7, pc}
   19f40:	mov	r0, #0
   19f44:	bl	1a074 <__assert_fail@plt+0x8ad4>
   19f48:	cmp	r0, #0
   19f4c:	ldrbeq	r3, [r7]
   19f50:	streq	r3, [r6]
   19f54:	moveq	r4, #1
   19f58:	b	19f34 <__assert_fail@plt+0x8994>
   19f5c:	push	{r4, lr}
   19f60:	cmp	r0, #0
   19f64:	beq	19f80 <__assert_fail@plt+0x89e0>
   19f68:	cmp	r1, #0
   19f6c:	beq	19f8c <__assert_fail@plt+0x89ec>
   19f70:	cmp	r1, #0
   19f74:	blt	19f98 <__assert_fail@plt+0x89f8>
   19f78:	bl	112b8 <realloc@plt>
   19f7c:	pop	{r4, pc}
   19f80:	mov	r0, r1
   19f84:	bl	19ed4 <__assert_fail@plt+0x8934>
   19f88:	pop	{r4, pc}
   19f8c:	bl	19dd4 <__assert_fail@plt+0x8834>
   19f90:	mov	r0, #0
   19f94:	pop	{r4, pc}
   19f98:	bl	11420 <__errno_location@plt>
   19f9c:	mov	r3, #12
   19fa0:	str	r3, [r0]
   19fa4:	mov	r0, #0
   19fa8:	pop	{r4, pc}
   19fac:	push	{r4, r5, r6, lr}
   19fb0:	mov	r6, r0
   19fb4:	mov	r5, r1
   19fb8:	subs	r4, r2, #0
   19fbc:	beq	19fe8 <__assert_fail@plt+0x8a48>
   19fc0:	mov	r1, r4
   19fc4:	mvn	r0, #0
   19fc8:	bl	1a4a8 <__assert_fail@plt+0x8f08>
   19fcc:	cmp	r0, r5
   19fd0:	bcs	19fe8 <__assert_fail@plt+0x8a48>
   19fd4:	bl	11420 <__errno_location@plt>
   19fd8:	mov	r3, #12
   19fdc:	str	r3, [r0]
   19fe0:	mov	r0, #0
   19fe4:	pop	{r4, r5, r6, pc}
   19fe8:	mul	r1, r5, r4
   19fec:	mov	r0, r6
   19ff0:	bl	19f5c <__assert_fail@plt+0x89bc>
   19ff4:	pop	{r4, r5, r6, pc}
   19ff8:	push	{r4, r5, r6, lr}
   19ffc:	mov	r4, r0
   1a000:	bl	1133c <__fpending@plt>
   1a004:	mov	r6, r0
   1a008:	mov	r0, r4
   1a00c:	bl	11234 <ferror@plt>
   1a010:	mov	r5, r0
   1a014:	mov	r0, r4
   1a018:	bl	11480 <fclose@plt>
   1a01c:	cmp	r5, #0
   1a020:	bne	1a048 <__assert_fail@plt+0x8aa8>
   1a024:	cmp	r0, #0
   1a028:	popeq	{r4, r5, r6, pc}
   1a02c:	cmp	r6, #0
   1a030:	bne	1a064 <__assert_fail@plt+0x8ac4>
   1a034:	bl	11420 <__errno_location@plt>
   1a038:	ldr	r0, [r0]
   1a03c:	subs	r0, r0, #9
   1a040:	mvnne	r0, #0
   1a044:	pop	{r4, r5, r6, pc}
   1a048:	cmp	r0, #0
   1a04c:	bne	1a06c <__assert_fail@plt+0x8acc>
   1a050:	bl	11420 <__errno_location@plt>
   1a054:	mov	r3, #0
   1a058:	str	r3, [r0]
   1a05c:	mvn	r0, #0
   1a060:	pop	{r4, r5, r6, pc}
   1a064:	mvn	r0, #0
   1a068:	pop	{r4, r5, r6, pc}
   1a06c:	mvn	r0, #0
   1a070:	pop	{r4, r5, r6, pc}
   1a074:	push	{lr}		; (str lr, [sp, #-4]!)
   1a078:	sub	sp, sp, #268	; 0x10c
   1a07c:	ldr	r2, [pc, #68]	; 1a0c8 <__assert_fail@plt+0x8b28>
   1a080:	add	r1, sp, #4
   1a084:	bl	1a3ec <__assert_fail@plt+0x8e4c>
   1a088:	cmp	r0, #0
   1a08c:	movne	r0, #0
   1a090:	bne	1a0c0 <__assert_fail@plt+0x8b20>
   1a094:	ldr	r1, [pc, #48]	; 1a0cc <__assert_fail@plt+0x8b2c>
   1a098:	add	r0, sp, #4
   1a09c:	bl	111e0 <strcmp@plt>
   1a0a0:	cmp	r0, #0
   1a0a4:	moveq	r0, #0
   1a0a8:	beq	1a0c0 <__assert_fail@plt+0x8b20>
   1a0ac:	ldr	r1, [pc, #28]	; 1a0d0 <__assert_fail@plt+0x8b30>
   1a0b0:	add	r0, sp, #4
   1a0b4:	bl	111e0 <strcmp@plt>
   1a0b8:	adds	r0, r0, #0
   1a0bc:	movne	r0, #1
   1a0c0:	add	sp, sp, #268	; 0x10c
   1a0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0c8:	andeq	r0, r0, r1, lsl #2
   1a0cc:	strdeq	ip, [r1], -r8
   1a0d0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1a0d4:	push	{r4, lr}
   1a0d8:	mov	r0, #14
   1a0dc:	bl	114ec <nl_langinfo@plt>
   1a0e0:	cmp	r0, #0
   1a0e4:	beq	1a0fc <__assert_fail@plt+0x8b5c>
   1a0e8:	ldrb	r2, [r0]
   1a0ec:	ldr	r3, [pc, #16]	; 1a104 <__assert_fail@plt+0x8b64>
   1a0f0:	cmp	r2, #0
   1a0f4:	moveq	r0, r3
   1a0f8:	pop	{r4, pc}
   1a0fc:	ldr	r0, [pc]	; 1a104 <__assert_fail@plt+0x8b64>
   1a100:	pop	{r4, pc}
   1a104:	andeq	ip, r1, r4, lsl #26
   1a108:	cmn	r0, #-2147483631	; 0x80000011
   1a10c:	bhi	1a140 <__assert_fail@plt+0x8ba0>
   1a110:	push	{r4, lr}
   1a114:	add	r0, r0, #16
   1a118:	bl	11384 <malloc@plt>
   1a11c:	cmp	r0, #0
   1a120:	beq	1a148 <__assert_fail@plt+0x8ba8>
   1a124:	add	r3, r0, #8
   1a128:	bic	r3, r3, #15
   1a12c:	rsb	r2, r0, #8
   1a130:	add	r3, r3, r2
   1a134:	add	r0, r0, r3
   1a138:	strb	r3, [r0, #-1]
   1a13c:	pop	{r4, pc}
   1a140:	mov	r0, #0
   1a144:	bx	lr
   1a148:	mov	r0, #0
   1a14c:	pop	{r4, pc}
   1a150:	push	{r4, lr}
   1a154:	tst	r0, #7
   1a158:	bne	1a174 <__assert_fail@plt+0x8bd4>
   1a15c:	tst	r0, #8
   1a160:	popeq	{r4, pc}
   1a164:	ldrb	r3, [r0, #-1]
   1a168:	sub	r0, r0, r3
   1a16c:	bl	19dd4 <__assert_fail@plt+0x8834>
   1a170:	pop	{r4, pc}
   1a174:	bl	11570 <abort@plt>
   1a178:	push	{r4, lr}
   1a17c:	mov	r4, r0
   1a180:	bl	1121c <wcwidth@plt>
   1a184:	cmp	r0, #0
   1a188:	popge	{r4, pc}
   1a18c:	mov	r0, r4
   1a190:	bl	112d0 <iswcntrl@plt>
   1a194:	clz	r0, r0
   1a198:	lsr	r0, r0, #5
   1a19c:	pop	{r4, pc}
   1a1a0:	push	{r4, r5, r6, lr}
   1a1a4:	mov	r5, r0
   1a1a8:	mov	r4, r1
   1a1ac:	mov	r3, r1
   1a1b0:	ldr	r1, [r3], #16
   1a1b4:	cmp	r1, r3
   1a1b8:	strne	r1, [r0]
   1a1bc:	beq	1a1e0 <__assert_fail@plt+0x8c40>
   1a1c0:	ldr	r3, [r4, #4]
   1a1c4:	str	r3, [r5, #4]
   1a1c8:	ldrb	r3, [r4, #8]
   1a1cc:	strb	r3, [r5, #8]
   1a1d0:	cmp	r3, #0
   1a1d4:	ldrne	r3, [r4, #12]
   1a1d8:	strne	r3, [r5, #12]
   1a1dc:	pop	{r4, r5, r6, pc}
   1a1e0:	add	r6, r0, #16
   1a1e4:	ldr	r2, [r4, #4]
   1a1e8:	mov	r0, r6
   1a1ec:	bl	1124c <memcpy@plt>
   1a1f0:	str	r6, [r5]
   1a1f4:	b	1a1c0 <__assert_fail@plt+0x8c20>
   1a1f8:	lsr	r2, r0, #5
   1a1fc:	and	r0, r0, #31
   1a200:	ldr	r3, [pc, #12]	; 1a214 <__assert_fail@plt+0x8c74>
   1a204:	ldr	r3, [r3, r2, lsl #2]
   1a208:	lsr	r0, r3, r0
   1a20c:	and	r0, r0, #1
   1a210:	bx	lr
   1a214:	andeq	ip, r1, ip, lsl #26
   1a218:	push	{r4, r5, r6, r7, r8, lr}
   1a21c:	sub	sp, sp, #56	; 0x38
   1a220:	mov	r4, r0
   1a224:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1a228:	cmp	r0, #1
   1a22c:	bls	1a3c4 <__assert_fail@plt+0x8e24>
   1a230:	str	r4, [sp, #16]
   1a234:	mov	r4, #0
   1a238:	strb	r4, [sp]
   1a23c:	str	r4, [sp, #4]
   1a240:	str	r4, [sp, #8]
   1a244:	strb	r4, [sp, #12]
   1a248:	mov	r6, #1
   1a24c:	mov	r5, r4
   1a250:	ldr	r7, [pc, #380]	; 1a3d4 <__assert_fail@plt+0x8e34>
   1a254:	b	1a310 <__assert_fail@plt+0x8d70>
   1a258:	add	r0, sp, #4
   1a25c:	bl	11264 <mbsinit@plt>
   1a260:	cmp	r0, #0
   1a264:	beq	1a35c <__assert_fail@plt+0x8dbc>
   1a268:	strb	r6, [sp]
   1a26c:	ldr	r8, [sp, #16]
   1a270:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1a274:	mov	r1, r0
   1a278:	mov	r0, r8
   1a27c:	bl	189a4 <__assert_fail@plt+0x7404>
   1a280:	add	r3, sp, #4
   1a284:	mov	r2, r0
   1a288:	mov	r1, r8
   1a28c:	add	r0, sp, #28
   1a290:	bl	19f04 <__assert_fail@plt+0x8964>
   1a294:	str	r0, [sp, #20]
   1a298:	cmn	r0, #1
   1a29c:	streq	r6, [sp, #20]
   1a2a0:	strbeq	r5, [sp, #24]
   1a2a4:	beq	1a2ec <__assert_fail@plt+0x8d4c>
   1a2a8:	cmn	r0, #2
   1a2ac:	beq	1a370 <__assert_fail@plt+0x8dd0>
   1a2b0:	cmp	r0, #0
   1a2b4:	bne	1a2d8 <__assert_fail@plt+0x8d38>
   1a2b8:	str	r6, [sp, #20]
   1a2bc:	ldr	r3, [sp, #16]
   1a2c0:	ldrb	r3, [r3]
   1a2c4:	cmp	r3, #0
   1a2c8:	bne	1a384 <__assert_fail@plt+0x8de4>
   1a2cc:	ldr	r3, [sp, #28]
   1a2d0:	cmp	r3, #0
   1a2d4:	bne	1a398 <__assert_fail@plt+0x8df8>
   1a2d8:	strb	r6, [sp, #24]
   1a2dc:	add	r0, sp, #4
   1a2e0:	bl	11264 <mbsinit@plt>
   1a2e4:	cmp	r0, #0
   1a2e8:	strbne	r5, [sp]
   1a2ec:	ldrb	r3, [sp, #24]
   1a2f0:	cmp	r3, #0
   1a2f4:	bne	1a3ac <__assert_fail@plt+0x8e0c>
   1a2f8:	add	r4, r4, #1
   1a2fc:	ldr	r2, [sp, #20]
   1a300:	ldr	r3, [sp, #16]
   1a304:	add	r3, r3, r2
   1a308:	str	r3, [sp, #16]
   1a30c:	strb	r5, [sp, #12]
   1a310:	ldrb	r3, [sp, #12]
   1a314:	cmp	r3, #0
   1a318:	bne	1a2ec <__assert_fail@plt+0x8d4c>
   1a31c:	ldrb	r3, [sp]
   1a320:	cmp	r3, #0
   1a324:	bne	1a26c <__assert_fail@plt+0x8ccc>
   1a328:	ldr	r1, [sp, #16]
   1a32c:	ldrb	r3, [r1]
   1a330:	lsr	r2, r3, #5
   1a334:	and	r3, r3, #31
   1a338:	ldr	r2, [r7, r2, lsl #2]
   1a33c:	lsr	r3, r2, r3
   1a340:	tst	r3, #1
   1a344:	beq	1a258 <__assert_fail@plt+0x8cb8>
   1a348:	str	r6, [sp, #20]
   1a34c:	ldrb	r3, [r1]
   1a350:	str	r3, [sp, #28]
   1a354:	strb	r6, [sp, #24]
   1a358:	b	1a2ec <__assert_fail@plt+0x8d4c>
   1a35c:	ldr	r3, [pc, #116]	; 1a3d8 <__assert_fail@plt+0x8e38>
   1a360:	mov	r2, #143	; 0x8f
   1a364:	ldr	r1, [pc, #112]	; 1a3dc <__assert_fail@plt+0x8e3c>
   1a368:	ldr	r0, [pc, #112]	; 1a3e0 <__assert_fail@plt+0x8e40>
   1a36c:	bl	115a0 <__assert_fail@plt>
   1a370:	ldr	r0, [sp, #16]
   1a374:	bl	113f0 <strlen@plt>
   1a378:	str	r0, [sp, #20]
   1a37c:	strb	r5, [sp, #24]
   1a380:	b	1a2ec <__assert_fail@plt+0x8d4c>
   1a384:	ldr	r3, [pc, #76]	; 1a3d8 <__assert_fail@plt+0x8e38>
   1a388:	mov	r2, #171	; 0xab
   1a38c:	ldr	r1, [pc, #72]	; 1a3dc <__assert_fail@plt+0x8e3c>
   1a390:	ldr	r0, [pc, #76]	; 1a3e4 <__assert_fail@plt+0x8e44>
   1a394:	bl	115a0 <__assert_fail@plt>
   1a398:	ldr	r3, [pc, #56]	; 1a3d8 <__assert_fail@plt+0x8e38>
   1a39c:	mov	r2, #172	; 0xac
   1a3a0:	ldr	r1, [pc, #52]	; 1a3dc <__assert_fail@plt+0x8e3c>
   1a3a4:	ldr	r0, [pc, #60]	; 1a3e8 <__assert_fail@plt+0x8e48>
   1a3a8:	bl	115a0 <__assert_fail@plt>
   1a3ac:	ldr	r3, [sp, #28]
   1a3b0:	cmp	r3, #0
   1a3b4:	bne	1a2f8 <__assert_fail@plt+0x8d58>
   1a3b8:	mov	r0, r4
   1a3bc:	add	sp, sp, #56	; 0x38
   1a3c0:	pop	{r4, r5, r6, r7, r8, pc}
   1a3c4:	mov	r0, r4
   1a3c8:	bl	113f0 <strlen@plt>
   1a3cc:	mov	r4, r0
   1a3d0:	b	1a3b8 <__assert_fail@plt+0x8e18>
   1a3d4:	andeq	ip, r1, ip, lsl #26
   1a3d8:	andeq	ip, r1, ip, lsr #26
   1a3dc:	andeq	ip, r1, r8, lsr r8
   1a3e0:	andeq	ip, r1, r4, asr #16
   1a3e4:	andeq	ip, r1, ip, asr r8
   1a3e8:	andeq	ip, r1, r4, ror r8
   1a3ec:	push	{r4, r5, r6, lr}
   1a3f0:	mov	r6, r1
   1a3f4:	mov	r4, r2
   1a3f8:	mov	r1, #0
   1a3fc:	bl	114bc <setlocale@plt>
   1a400:	subs	r5, r0, #0
   1a404:	beq	1a428 <__assert_fail@plt+0x8e88>
   1a408:	mov	r0, r5
   1a40c:	bl	113f0 <strlen@plt>
   1a410:	cmp	r4, r0
   1a414:	bhi	1a440 <__assert_fail@plt+0x8ea0>
   1a418:	cmp	r4, #0
   1a41c:	bne	1a458 <__assert_fail@plt+0x8eb8>
   1a420:	mov	r0, #34	; 0x22
   1a424:	pop	{r4, r5, r6, pc}
   1a428:	cmp	r4, #0
   1a42c:	beq	1a47c <__assert_fail@plt+0x8edc>
   1a430:	mov	r3, #0
   1a434:	strb	r3, [r6]
   1a438:	mov	r0, #22
   1a43c:	pop	{r4, r5, r6, pc}
   1a440:	add	r2, r0, #1
   1a444:	mov	r1, r5
   1a448:	mov	r0, r6
   1a44c:	bl	1124c <memcpy@plt>
   1a450:	mov	r0, #0
   1a454:	pop	{r4, r5, r6, pc}
   1a458:	sub	r4, r4, #1
   1a45c:	mov	r2, r4
   1a460:	mov	r1, r5
   1a464:	mov	r0, r6
   1a468:	bl	1124c <memcpy@plt>
   1a46c:	mov	r3, #0
   1a470:	strb	r3, [r6, r4]
   1a474:	mov	r0, #34	; 0x22
   1a478:	pop	{r4, r5, r6, pc}
   1a47c:	mov	r0, #22
   1a480:	pop	{r4, r5, r6, pc}
   1a484:	push	{r4, lr}
   1a488:	mov	r1, #0
   1a48c:	bl	114bc <setlocale@plt>
   1a490:	pop	{r4, pc}
   1a494:	push	{r4, lr}
   1a498:	mov	r2, #3
   1a49c:	mov	r1, #0
   1a4a0:	bl	19ad8 <__assert_fail@plt+0x8538>
   1a4a4:	pop	{r4, pc}
   1a4a8:	subs	r2, r1, #1
   1a4ac:	bxeq	lr
   1a4b0:	bcc	1a688 <__assert_fail@plt+0x90e8>
   1a4b4:	cmp	r0, r1
   1a4b8:	bls	1a66c <__assert_fail@plt+0x90cc>
   1a4bc:	tst	r1, r2
   1a4c0:	beq	1a678 <__assert_fail@plt+0x90d8>
   1a4c4:	clz	r3, r0
   1a4c8:	clz	r2, r1
   1a4cc:	sub	r3, r2, r3
   1a4d0:	rsbs	r3, r3, #31
   1a4d4:	addne	r3, r3, r3, lsl #1
   1a4d8:	mov	r2, #0
   1a4dc:	addne	pc, pc, r3, lsl #2
   1a4e0:	nop			; (mov r0, r0)
   1a4e4:	cmp	r0, r1, lsl #31
   1a4e8:	adc	r2, r2, r2
   1a4ec:	subcs	r0, r0, r1, lsl #31
   1a4f0:	cmp	r0, r1, lsl #30
   1a4f4:	adc	r2, r2, r2
   1a4f8:	subcs	r0, r0, r1, lsl #30
   1a4fc:	cmp	r0, r1, lsl #29
   1a500:	adc	r2, r2, r2
   1a504:	subcs	r0, r0, r1, lsl #29
   1a508:	cmp	r0, r1, lsl #28
   1a50c:	adc	r2, r2, r2
   1a510:	subcs	r0, r0, r1, lsl #28
   1a514:	cmp	r0, r1, lsl #27
   1a518:	adc	r2, r2, r2
   1a51c:	subcs	r0, r0, r1, lsl #27
   1a520:	cmp	r0, r1, lsl #26
   1a524:	adc	r2, r2, r2
   1a528:	subcs	r0, r0, r1, lsl #26
   1a52c:	cmp	r0, r1, lsl #25
   1a530:	adc	r2, r2, r2
   1a534:	subcs	r0, r0, r1, lsl #25
   1a538:	cmp	r0, r1, lsl #24
   1a53c:	adc	r2, r2, r2
   1a540:	subcs	r0, r0, r1, lsl #24
   1a544:	cmp	r0, r1, lsl #23
   1a548:	adc	r2, r2, r2
   1a54c:	subcs	r0, r0, r1, lsl #23
   1a550:	cmp	r0, r1, lsl #22
   1a554:	adc	r2, r2, r2
   1a558:	subcs	r0, r0, r1, lsl #22
   1a55c:	cmp	r0, r1, lsl #21
   1a560:	adc	r2, r2, r2
   1a564:	subcs	r0, r0, r1, lsl #21
   1a568:	cmp	r0, r1, lsl #20
   1a56c:	adc	r2, r2, r2
   1a570:	subcs	r0, r0, r1, lsl #20
   1a574:	cmp	r0, r1, lsl #19
   1a578:	adc	r2, r2, r2
   1a57c:	subcs	r0, r0, r1, lsl #19
   1a580:	cmp	r0, r1, lsl #18
   1a584:	adc	r2, r2, r2
   1a588:	subcs	r0, r0, r1, lsl #18
   1a58c:	cmp	r0, r1, lsl #17
   1a590:	adc	r2, r2, r2
   1a594:	subcs	r0, r0, r1, lsl #17
   1a598:	cmp	r0, r1, lsl #16
   1a59c:	adc	r2, r2, r2
   1a5a0:	subcs	r0, r0, r1, lsl #16
   1a5a4:	cmp	r0, r1, lsl #15
   1a5a8:	adc	r2, r2, r2
   1a5ac:	subcs	r0, r0, r1, lsl #15
   1a5b0:	cmp	r0, r1, lsl #14
   1a5b4:	adc	r2, r2, r2
   1a5b8:	subcs	r0, r0, r1, lsl #14
   1a5bc:	cmp	r0, r1, lsl #13
   1a5c0:	adc	r2, r2, r2
   1a5c4:	subcs	r0, r0, r1, lsl #13
   1a5c8:	cmp	r0, r1, lsl #12
   1a5cc:	adc	r2, r2, r2
   1a5d0:	subcs	r0, r0, r1, lsl #12
   1a5d4:	cmp	r0, r1, lsl #11
   1a5d8:	adc	r2, r2, r2
   1a5dc:	subcs	r0, r0, r1, lsl #11
   1a5e0:	cmp	r0, r1, lsl #10
   1a5e4:	adc	r2, r2, r2
   1a5e8:	subcs	r0, r0, r1, lsl #10
   1a5ec:	cmp	r0, r1, lsl #9
   1a5f0:	adc	r2, r2, r2
   1a5f4:	subcs	r0, r0, r1, lsl #9
   1a5f8:	cmp	r0, r1, lsl #8
   1a5fc:	adc	r2, r2, r2
   1a600:	subcs	r0, r0, r1, lsl #8
   1a604:	cmp	r0, r1, lsl #7
   1a608:	adc	r2, r2, r2
   1a60c:	subcs	r0, r0, r1, lsl #7
   1a610:	cmp	r0, r1, lsl #6
   1a614:	adc	r2, r2, r2
   1a618:	subcs	r0, r0, r1, lsl #6
   1a61c:	cmp	r0, r1, lsl #5
   1a620:	adc	r2, r2, r2
   1a624:	subcs	r0, r0, r1, lsl #5
   1a628:	cmp	r0, r1, lsl #4
   1a62c:	adc	r2, r2, r2
   1a630:	subcs	r0, r0, r1, lsl #4
   1a634:	cmp	r0, r1, lsl #3
   1a638:	adc	r2, r2, r2
   1a63c:	subcs	r0, r0, r1, lsl #3
   1a640:	cmp	r0, r1, lsl #2
   1a644:	adc	r2, r2, r2
   1a648:	subcs	r0, r0, r1, lsl #2
   1a64c:	cmp	r0, r1, lsl #1
   1a650:	adc	r2, r2, r2
   1a654:	subcs	r0, r0, r1, lsl #1
   1a658:	cmp	r0, r1
   1a65c:	adc	r2, r2, r2
   1a660:	subcs	r0, r0, r1
   1a664:	mov	r0, r2
   1a668:	bx	lr
   1a66c:	moveq	r0, #1
   1a670:	movne	r0, #0
   1a674:	bx	lr
   1a678:	clz	r2, r1
   1a67c:	rsb	r2, r2, #31
   1a680:	lsr	r0, r0, r2
   1a684:	bx	lr
   1a688:	cmp	r0, #0
   1a68c:	mvnne	r0, #0
   1a690:	b	1a8f4 <__assert_fail@plt+0x9354>
   1a694:	cmp	r1, #0
   1a698:	beq	1a688 <__assert_fail@plt+0x90e8>
   1a69c:	push	{r0, r1, lr}
   1a6a0:	bl	1a4a8 <__assert_fail@plt+0x8f08>
   1a6a4:	pop	{r1, r2, lr}
   1a6a8:	mul	r3, r2, r0
   1a6ac:	sub	r1, r1, r3
   1a6b0:	bx	lr
   1a6b4:	cmp	r1, #0
   1a6b8:	beq	1a8c4 <__assert_fail@plt+0x9324>
   1a6bc:	eor	ip, r0, r1
   1a6c0:	rsbmi	r1, r1, #0
   1a6c4:	subs	r2, r1, #1
   1a6c8:	beq	1a890 <__assert_fail@plt+0x92f0>
   1a6cc:	movs	r3, r0
   1a6d0:	rsbmi	r3, r0, #0
   1a6d4:	cmp	r3, r1
   1a6d8:	bls	1a89c <__assert_fail@plt+0x92fc>
   1a6dc:	tst	r1, r2
   1a6e0:	beq	1a8ac <__assert_fail@plt+0x930c>
   1a6e4:	clz	r2, r3
   1a6e8:	clz	r0, r1
   1a6ec:	sub	r2, r0, r2
   1a6f0:	rsbs	r2, r2, #31
   1a6f4:	addne	r2, r2, r2, lsl #1
   1a6f8:	mov	r0, #0
   1a6fc:	addne	pc, pc, r2, lsl #2
   1a700:	nop			; (mov r0, r0)
   1a704:	cmp	r3, r1, lsl #31
   1a708:	adc	r0, r0, r0
   1a70c:	subcs	r3, r3, r1, lsl #31
   1a710:	cmp	r3, r1, lsl #30
   1a714:	adc	r0, r0, r0
   1a718:	subcs	r3, r3, r1, lsl #30
   1a71c:	cmp	r3, r1, lsl #29
   1a720:	adc	r0, r0, r0
   1a724:	subcs	r3, r3, r1, lsl #29
   1a728:	cmp	r3, r1, lsl #28
   1a72c:	adc	r0, r0, r0
   1a730:	subcs	r3, r3, r1, lsl #28
   1a734:	cmp	r3, r1, lsl #27
   1a738:	adc	r0, r0, r0
   1a73c:	subcs	r3, r3, r1, lsl #27
   1a740:	cmp	r3, r1, lsl #26
   1a744:	adc	r0, r0, r0
   1a748:	subcs	r3, r3, r1, lsl #26
   1a74c:	cmp	r3, r1, lsl #25
   1a750:	adc	r0, r0, r0
   1a754:	subcs	r3, r3, r1, lsl #25
   1a758:	cmp	r3, r1, lsl #24
   1a75c:	adc	r0, r0, r0
   1a760:	subcs	r3, r3, r1, lsl #24
   1a764:	cmp	r3, r1, lsl #23
   1a768:	adc	r0, r0, r0
   1a76c:	subcs	r3, r3, r1, lsl #23
   1a770:	cmp	r3, r1, lsl #22
   1a774:	adc	r0, r0, r0
   1a778:	subcs	r3, r3, r1, lsl #22
   1a77c:	cmp	r3, r1, lsl #21
   1a780:	adc	r0, r0, r0
   1a784:	subcs	r3, r3, r1, lsl #21
   1a788:	cmp	r3, r1, lsl #20
   1a78c:	adc	r0, r0, r0
   1a790:	subcs	r3, r3, r1, lsl #20
   1a794:	cmp	r3, r1, lsl #19
   1a798:	adc	r0, r0, r0
   1a79c:	subcs	r3, r3, r1, lsl #19
   1a7a0:	cmp	r3, r1, lsl #18
   1a7a4:	adc	r0, r0, r0
   1a7a8:	subcs	r3, r3, r1, lsl #18
   1a7ac:	cmp	r3, r1, lsl #17
   1a7b0:	adc	r0, r0, r0
   1a7b4:	subcs	r3, r3, r1, lsl #17
   1a7b8:	cmp	r3, r1, lsl #16
   1a7bc:	adc	r0, r0, r0
   1a7c0:	subcs	r3, r3, r1, lsl #16
   1a7c4:	cmp	r3, r1, lsl #15
   1a7c8:	adc	r0, r0, r0
   1a7cc:	subcs	r3, r3, r1, lsl #15
   1a7d0:	cmp	r3, r1, lsl #14
   1a7d4:	adc	r0, r0, r0
   1a7d8:	subcs	r3, r3, r1, lsl #14
   1a7dc:	cmp	r3, r1, lsl #13
   1a7e0:	adc	r0, r0, r0
   1a7e4:	subcs	r3, r3, r1, lsl #13
   1a7e8:	cmp	r3, r1, lsl #12
   1a7ec:	adc	r0, r0, r0
   1a7f0:	subcs	r3, r3, r1, lsl #12
   1a7f4:	cmp	r3, r1, lsl #11
   1a7f8:	adc	r0, r0, r0
   1a7fc:	subcs	r3, r3, r1, lsl #11
   1a800:	cmp	r3, r1, lsl #10
   1a804:	adc	r0, r0, r0
   1a808:	subcs	r3, r3, r1, lsl #10
   1a80c:	cmp	r3, r1, lsl #9
   1a810:	adc	r0, r0, r0
   1a814:	subcs	r3, r3, r1, lsl #9
   1a818:	cmp	r3, r1, lsl #8
   1a81c:	adc	r0, r0, r0
   1a820:	subcs	r3, r3, r1, lsl #8
   1a824:	cmp	r3, r1, lsl #7
   1a828:	adc	r0, r0, r0
   1a82c:	subcs	r3, r3, r1, lsl #7
   1a830:	cmp	r3, r1, lsl #6
   1a834:	adc	r0, r0, r0
   1a838:	subcs	r3, r3, r1, lsl #6
   1a83c:	cmp	r3, r1, lsl #5
   1a840:	adc	r0, r0, r0
   1a844:	subcs	r3, r3, r1, lsl #5
   1a848:	cmp	r3, r1, lsl #4
   1a84c:	adc	r0, r0, r0
   1a850:	subcs	r3, r3, r1, lsl #4
   1a854:	cmp	r3, r1, lsl #3
   1a858:	adc	r0, r0, r0
   1a85c:	subcs	r3, r3, r1, lsl #3
   1a860:	cmp	r3, r1, lsl #2
   1a864:	adc	r0, r0, r0
   1a868:	subcs	r3, r3, r1, lsl #2
   1a86c:	cmp	r3, r1, lsl #1
   1a870:	adc	r0, r0, r0
   1a874:	subcs	r3, r3, r1, lsl #1
   1a878:	cmp	r3, r1
   1a87c:	adc	r0, r0, r0
   1a880:	subcs	r3, r3, r1
   1a884:	cmp	ip, #0
   1a888:	rsbmi	r0, r0, #0
   1a88c:	bx	lr
   1a890:	teq	ip, r0
   1a894:	rsbmi	r0, r0, #0
   1a898:	bx	lr
   1a89c:	movcc	r0, #0
   1a8a0:	asreq	r0, ip, #31
   1a8a4:	orreq	r0, r0, #1
   1a8a8:	bx	lr
   1a8ac:	clz	r2, r1
   1a8b0:	rsb	r2, r2, #31
   1a8b4:	cmp	ip, #0
   1a8b8:	lsr	r0, r3, r2
   1a8bc:	rsbmi	r0, r0, #0
   1a8c0:	bx	lr
   1a8c4:	cmp	r0, #0
   1a8c8:	mvngt	r0, #-2147483648	; 0x80000000
   1a8cc:	movlt	r0, #-2147483648	; 0x80000000
   1a8d0:	b	1a8f4 <__assert_fail@plt+0x9354>
   1a8d4:	cmp	r1, #0
   1a8d8:	beq	1a8c4 <__assert_fail@plt+0x9324>
   1a8dc:	push	{r0, r1, lr}
   1a8e0:	bl	1a6bc <__assert_fail@plt+0x911c>
   1a8e4:	pop	{r1, r2, lr}
   1a8e8:	mul	r3, r2, r0
   1a8ec:	sub	r1, r1, r3
   1a8f0:	bx	lr
   1a8f4:	push	{r1, lr}
   1a8f8:	mov	r0, #8
   1a8fc:	bl	111d4 <raise@plt>
   1a900:	pop	{r1, pc}
   1a904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a908:	mov	r7, r0
   1a90c:	ldr	r6, [pc, #72]	; 1a95c <__assert_fail@plt+0x93bc>
   1a910:	ldr	r5, [pc, #72]	; 1a960 <__assert_fail@plt+0x93c0>
   1a914:	add	r6, pc, r6
   1a918:	add	r5, pc, r5
   1a91c:	sub	r6, r6, r5
   1a920:	mov	r8, r1
   1a924:	mov	r9, r2
   1a928:	bl	1119c <fdopen@plt-0x20>
   1a92c:	asrs	r6, r6, #2
   1a930:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a934:	mov	r4, #0
   1a938:	add	r4, r4, #1
   1a93c:	ldr	r3, [r5], #4
   1a940:	mov	r2, r9
   1a944:	mov	r1, r8
   1a948:	mov	r0, r7
   1a94c:	blx	r3
   1a950:	cmp	r6, r4
   1a954:	bne	1a938 <__assert_fail@plt+0x9398>
   1a958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a95c:	strdeq	r2, [r1], -r4
   1a960:	andeq	r2, r1, ip, ror #11
   1a964:	bx	lr
   1a968:	ldr	r3, [pc, #12]	; 1a97c <__assert_fail@plt+0x93dc>
   1a96c:	mov	r1, #0
   1a970:	add	r3, pc, r3
   1a974:	ldr	r2, [r3]
   1a978:	b	11438 <__cxa_atexit@plt>
   1a97c:	andeq	r2, r1, ip, ror #15

Disassembly of section .fini:

0001a980 <.fini>:
   1a980:	push	{r3, lr}
   1a984:	pop	{r3, pc}
