
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r8, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <fputc_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <dcgettext@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <iswprint@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <lseek64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <__ctype_get_mb_cur_max@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__fpending@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <ferror_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <mbrtowc@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <error@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__gmon_start__@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <bcmp@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <strlen@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strchr@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <__errno_location@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__cxa_atexit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <memset@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <__printf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <fileno@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <__fprintf_chk@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <memchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <strtoimax@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <setlocale@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <strrchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <nl_langinfo@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <fopen64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <fread_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fputs@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fa0 <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:	andeq	r6, r1, r4, ror #25
   1113c:	andeq	r1, r1, ip, ror #10
   11140:	andeq	r6, r1, r4, lsl #25
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fb8 <__gmon_start__@plt>
   11160:	andeq	r7, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r9, r2, r8, lsr r1
   1118c:	andeq	r9, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r9, r2, r8, lsr r1
   111c4:	andeq	r9, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r9, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r8, r0
   11208:	cmp	r0, #0
   1120c:	bne	1152c <__assert_fail@plt+0x430>
   11210:	movw	r1, #27955	; 0x6d33
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f1c <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #37244	; 0x917c
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11030 <__printf_chk@plt>
   1123c:	movw	r1, #27985	; 0x6d51
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f1c <dcgettext@plt>
   11250:	movw	r9, #37204	; 0x9154
   11254:	movt	r9, #2
   11258:	ldr	r1, [r9]
   1125c:	bl	10e8c <fputs_unlocked@plt>
   11260:	movw	r1, #29454	; 0x730e
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f1c <dcgettext@plt>
   11274:	ldr	r1, [r9]
   11278:	bl	10e8c <fputs_unlocked@plt>
   1127c:	movw	r1, #29510	; 0x7346
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10f1c <dcgettext@plt>
   11290:	ldr	r1, [r9]
   11294:	bl	10e8c <fputs_unlocked@plt>
   11298:	movw	r1, #28055	; 0x6d97
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	movt	r1, #1
   112a8:	bl	10f1c <dcgettext@plt>
   112ac:	ldr	r1, [r9]
   112b0:	bl	10e8c <fputs_unlocked@plt>
   112b4:	movw	r1, #28125	; 0x6ddd
   112b8:	mov	r0, #0
   112bc:	mov	r2, #5
   112c0:	movt	r1, #1
   112c4:	bl	10f1c <dcgettext@plt>
   112c8:	ldr	r1, [r9]
   112cc:	bl	10e8c <fputs_unlocked@plt>
   112d0:	movw	r1, #28196	; 0x6e24
   112d4:	mov	r0, #0
   112d8:	mov	r2, #5
   112dc:	movt	r1, #1
   112e0:	bl	10f1c <dcgettext@plt>
   112e4:	ldr	r1, [r9]
   112e8:	bl	10e8c <fputs_unlocked@plt>
   112ec:	movw	r1, #28266	; 0x6e6a
   112f0:	mov	r0, #0
   112f4:	mov	r2, #5
   112f8:	movt	r1, #1
   112fc:	bl	10f1c <dcgettext@plt>
   11300:	ldr	r1, [r9]
   11304:	bl	10e8c <fputs_unlocked@plt>
   11308:	movw	r1, #28340	; 0x6eb4
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	movt	r1, #1
   11318:	bl	10f1c <dcgettext@plt>
   1131c:	ldr	r1, [r9]
   11320:	bl	10e8c <fputs_unlocked@plt>
   11324:	movw	r1, #28398	; 0x6eee
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10f1c <dcgettext@plt>
   11338:	ldr	r1, [r9]
   1133c:	bl	10e8c <fputs_unlocked@plt>
   11340:	movw	r1, #28472	; 0x6f38
   11344:	mov	r0, #0
   11348:	mov	r2, #5
   1134c:	movt	r1, #1
   11350:	bl	10f1c <dcgettext@plt>
   11354:	ldr	r1, [r9]
   11358:	bl	10e8c <fputs_unlocked@plt>
   1135c:	movw	r1, #28547	; 0x6f83
   11360:	mov	r0, #0
   11364:	mov	r2, #5
   11368:	movt	r1, #1
   1136c:	bl	10f1c <dcgettext@plt>
   11370:	ldr	r1, [r9]
   11374:	bl	10e8c <fputs_unlocked@plt>
   11378:	movw	r1, #28789	; 0x7075
   1137c:	mov	r0, #0
   11380:	mov	r2, #5
   11384:	movt	r1, #1
   11388:	bl	10f1c <dcgettext@plt>
   1138c:	ldr	r1, [r9]
   11390:	bl	10e8c <fputs_unlocked@plt>
   11394:	movw	r1, #29011	; 0x7153
   11398:	mov	r0, #0
   1139c:	mov	r2, #5
   113a0:	movt	r1, #1
   113a4:	bl	10f1c <dcgettext@plt>
   113a8:	ldr	r1, [r9]
   113ac:	bl	10e8c <fputs_unlocked@plt>
   113b0:	movw	r1, #29056	; 0x7180
   113b4:	mov	r0, #0
   113b8:	mov	r2, #5
   113bc:	movt	r1, #1
   113c0:	bl	10f1c <dcgettext@plt>
   113c4:	ldr	r1, [r9]
   113c8:	bl	10e8c <fputs_unlocked@plt>
   113cc:	movw	r1, #29110	; 0x71b6
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10f1c <dcgettext@plt>
   113e0:	ldr	r1, [r9]
   113e4:	bl	10e8c <fputs_unlocked@plt>
   113e8:	movw	r0, #30480	; 0x7710
   113ec:	mov	r6, sp
   113f0:	movt	r0, #1
   113f4:	mov	r1, r6
   113f8:	ldm	r0!, {r2, r3, r4, r5}
   113fc:	stmia	r1!, {r2, r3, r4, r5}
   11400:	ldm	r0!, {r2, r3, r4, r5, r7}
   11404:	stmia	r1!, {r2, r3, r4, r5, r7}
   11408:	ldm	r0, {r2, r3, r4, r5, r7}
   1140c:	stm	r1, {r2, r3, r4, r5, r7}
   11410:	movw	r1, #29585	; 0x7391
   11414:	movw	r5, #29308	; 0x727c
   11418:	movt	r1, #1
   1141c:	movt	r5, #1
   11420:	mov	r0, r5
   11424:	bl	10ea4 <strcmp@plt>
   11428:	cmp	r0, #0
   1142c:	ldrne	r1, [r6, #8]!
   11430:	cmpne	r1, #0
   11434:	bne	11420 <__assert_fail@plt+0x324>
   11438:	movw	r1, #29680	; 0x73f0
   1143c:	ldr	r6, [r6, #4]
   11440:	mov	r0, #0
   11444:	mov	r2, #5
   11448:	movt	r1, #1
   1144c:	bl	10f1c <dcgettext@plt>
   11450:	movw	r2, #29369	; 0x72b9
   11454:	movw	r3, #29703	; 0x7407
   11458:	mov	r1, r0
   1145c:	mov	r0, #1
   11460:	movt	r2, #1
   11464:	movt	r3, #1
   11468:	bl	11030 <__printf_chk@plt>
   1146c:	cmp	r6, #0
   11470:	mov	r0, #5
   11474:	mov	r1, #0
   11478:	moveq	r6, r5
   1147c:	bl	11084 <setlocale@plt>
   11480:	cmp	r0, #0
   11484:	beq	114bc <__assert_fail@plt+0x3c0>
   11488:	movw	r1, #29743	; 0x742f
   1148c:	mov	r2, #3
   11490:	movt	r1, #1
   11494:	bl	110d8 <strncmp@plt>
   11498:	cmp	r0, #0
   1149c:	beq	114bc <__assert_fail@plt+0x3c0>
   114a0:	movw	r1, #29747	; 0x7433
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	movt	r1, #1
   114b0:	bl	10f1c <dcgettext@plt>
   114b4:	ldr	r1, [r9]
   114b8:	bl	10e8c <fputs_unlocked@plt>
   114bc:	movw	r1, #29818	; 0x747a
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	movt	r1, #1
   114cc:	bl	10f1c <dcgettext@plt>
   114d0:	movw	r2, #29703	; 0x7407
   114d4:	mov	r1, r0
   114d8:	mov	r0, #1
   114dc:	mov	r3, r5
   114e0:	movt	r2, #1
   114e4:	bl	11030 <__printf_chk@plt>
   114e8:	movw	r1, #29845	; 0x7495
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	10f1c <dcgettext@plt>
   114fc:	mov	r1, r0
   11500:	movw	r0, #29613	; 0x73ad
   11504:	movw	r3, #29895	; 0x74c7
   11508:	cmp	r6, r5
   1150c:	mov	r2, r6
   11510:	movt	r0, #1
   11514:	movt	r3, #1
   11518:	moveq	r3, r0
   1151c:	mov	r0, #1
   11520:	bl	11030 <__printf_chk@plt>
   11524:	mov	r0, r8
   11528:	bl	10fdc <exit@plt>
   1152c:	movw	r0, #37192	; 0x9148
   11530:	movw	r1, #27916	; 0x6d0c
   11534:	mov	r2, #5
   11538:	movt	r0, #2
   1153c:	movt	r1, #1
   11540:	ldr	r5, [r0]
   11544:	mov	r0, #0
   11548:	bl	10f1c <dcgettext@plt>
   1154c:	mov	r2, r0
   11550:	movw	r0, #37244	; 0x917c
   11554:	mov	r1, #1
   11558:	movt	r0, #2
   1155c:	ldr	r3, [r0]
   11560:	mov	r0, r5
   11564:	bl	11048 <__fprintf_chk@plt>
   11568:	b	11524 <__assert_fail@plt+0x428>
   1156c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11570:	add	fp, sp, #28
   11574:	sub	sp, sp, #36	; 0x24
   11578:	mov	r5, r0
   1157c:	ldr	r0, [r1]
   11580:	mov	r4, r1
   11584:	bl	13c94 <__assert_fail@plt+0x2b98>
   11588:	movw	r1, #29895	; 0x74c7
   1158c:	mov	r0, #6
   11590:	movt	r1, #1
   11594:	bl	11084 <setlocale@plt>
   11598:	movw	r6, #29373	; 0x72bd
   1159c:	movw	r1, #29315	; 0x7283
   115a0:	movt	r6, #1
   115a4:	movt	r1, #1
   115a8:	mov	r0, r6
   115ac:	bl	110b4 <bindtextdomain@plt>
   115b0:	mov	r0, r6
   115b4:	bl	10f34 <textdomain@plt>
   115b8:	movw	r0, #14760	; 0x39a8
   115bc:	movt	r0, #1
   115c0:	bl	16ce8 <__assert_fail@plt+0x5bec>
   115c4:	mov	r0, #0
   115c8:	movw	r7, #29339	; 0x729b
   115cc:	movw	r6, #30256	; 0x7630
   115d0:	mov	sl, #0
   115d4:	mov	r9, #76	; 0x4c
   115d8:	str	r0, [sp, #20]
   115dc:	mov	r0, #0
   115e0:	movt	r7, #1
   115e4:	movt	r6, #1
   115e8:	str	r0, [sp, #16]
   115ec:	mov	r0, #0
   115f0:	mov	r8, r0
   115f4:	mov	r0, r5
   115f8:	mov	r1, r4
   115fc:	mov	r2, r7
   11600:	mov	r3, r6
   11604:	str	sl, [sp]
   11608:	bl	10fc4 <getopt_long@plt>
   1160c:	sub	r1, r0, #256	; 0x100
   11610:	cmp	r1, #8
   11614:	bcc	115f0 <__assert_fail@plt+0x4f4>
   11618:	cmp	r0, #99	; 0x63
   1161c:	ble	116b0 <__assert_fail@plt+0x5b4>
   11620:	cmp	r0, #100	; 0x64
   11624:	beq	11694 <__assert_fail@plt+0x598>
   11628:	cmp	r0, #105	; 0x69
   1162c:	beq	116a0 <__assert_fail@plt+0x5a4>
   11630:	cmp	r0, #119	; 0x77
   11634:	bne	11824 <__assert_fail@plt+0x728>
   11638:	movw	r0, #37208	; 0x9158
   1163c:	movw	r1, #29895	; 0x74c7
   11640:	mov	r2, #10
   11644:	add	r3, sp, #24
   11648:	movt	r0, #2
   1164c:	movt	r1, #1
   11650:	ldr	r0, [r0]
   11654:	str	r1, [sp]
   11658:	mov	r1, #0
   1165c:	bl	160fc <__assert_fail@plt+0x5000>
   11660:	cmp	r0, #1
   11664:	bhi	11900 <__assert_fail@plt+0x804>
   11668:	ldr	r1, [sp, #28]
   1166c:	cmn	r1, #1
   11670:	ble	11900 <__assert_fail@plt+0x804>
   11674:	ldr	r2, [sp, #24]
   11678:	mvn	r3, #-2147483648	; 0x80000000
   1167c:	subs	r3, r3, r2
   11680:	rscs	r1, r1, #0
   11684:	movwlt	r2, #0
   11688:	subs	r9, r0, #1
   1168c:	movne	r9, r2
   11690:	b	116a8 <__assert_fail@plt+0x5ac>
   11694:	mov	r0, #1
   11698:	str	r0, [sp, #20]
   1169c:	b	116a8 <__assert_fail@plt+0x5ac>
   116a0:	mov	r0, #1
   116a4:	str	r0, [sp, #16]
   116a8:	mov	r0, r8
   116ac:	b	115f0 <__assert_fail@plt+0x4f4>
   116b0:	cmn	r0, #3
   116b4:	beq	117a4 <__assert_fail@plt+0x6a8>
   116b8:	cmn	r0, #2
   116bc:	beq	117f8 <__assert_fail@plt+0x6fc>
   116c0:	cmn	r0, #1
   116c4:	bne	11824 <__assert_fail@plt+0x728>
   116c8:	sub	r0, r8, #256	; 0x100
   116cc:	cmp	r0, #8
   116d0:	bcs	11800 <__assert_fail@plt+0x704>
   116d4:	movw	r1, #30828	; 0x786c
   116d8:	movw	r2, #37220	; 0x9164
   116dc:	movw	r6, #37184	; 0x9140
   116e0:	movt	r1, #1
   116e4:	movt	r2, #2
   116e8:	movt	r6, #2
   116ec:	ldr	r1, [r1, r0, lsl #2]
   116f0:	str	r1, [r2]
   116f4:	movw	r1, #30796	; 0x784c
   116f8:	movw	r2, #37216	; 0x9160
   116fc:	movt	r1, #1
   11700:	movt	r2, #2
   11704:	ldr	r1, [r1, r0, lsl #2]
   11708:	str	r1, [r2]
   1170c:	movw	r1, #30860	; 0x788c
   11710:	movw	r2, #37224	; 0x9168
   11714:	movt	r1, #1
   11718:	movt	r2, #2
   1171c:	ldr	r1, [r1, r0, lsl #2]
   11720:	str	r1, [r2]
   11724:	movw	r1, #30892	; 0x78ac
   11728:	movw	r2, #37228	; 0x916c
   1172c:	movt	r1, #1
   11730:	movt	r2, #2
   11734:	ldr	r1, [r1, r0, lsl #2]
   11738:	str	r1, [r2]
   1173c:	movw	r1, #30924	; 0x78cc
   11740:	movt	r1, #1
   11744:	ldr	r0, [r1, r0, lsl #2]
   11748:	movw	r1, #37232	; 0x9170
   1174c:	movt	r1, #2
   11750:	str	r0, [r1]
   11754:	ldr	r0, [r6]
   11758:	sub	r1, r5, r0
   1175c:	cmp	r1, #2
   11760:	blt	1182c <__assert_fail@plt+0x730>
   11764:	movw	r1, #29434	; 0x72fa
   11768:	mov	r0, #0
   1176c:	mov	r2, #5
   11770:	movt	r1, #1
   11774:	bl	10f1c <dcgettext@plt>
   11778:	mov	r5, r0
   1177c:	ldr	r0, [r6]
   11780:	add	r0, r4, r0, lsl #2
   11784:	ldr	r0, [r0, #4]
   11788:	bl	15680 <__assert_fail@plt+0x4584>
   1178c:	mov	r3, r0
   11790:	mov	r0, #0
   11794:	mov	r1, #0
   11798:	mov	r2, r5
   1179c:	bl	10f88 <error@plt>
   117a0:	b	11824 <__assert_fail@plt+0x728>
   117a4:	movw	r0, #37104	; 0x90f0
   117a8:	movw	r2, #29399	; 0x72d7
   117ac:	mov	r1, #0
   117b0:	movw	r7, #29383	; 0x72c7
   117b4:	movt	r0, #2
   117b8:	movt	r2, #1
   117bc:	str	r1, [sp, #8]
   117c0:	movw	r1, #29308	; 0x727c
   117c4:	movt	r7, #1
   117c8:	movt	r1, #1
   117cc:	ldr	r3, [r0]
   117d0:	movw	r0, #37204	; 0x9154
   117d4:	str	r2, [sp, #4]
   117d8:	movw	r2, #29369	; 0x72b9
   117dc:	str	r7, [sp]
   117e0:	movt	r0, #2
   117e4:	movt	r2, #1
   117e8:	ldr	r0, [r0]
   117ec:	bl	15b84 <__assert_fail@plt+0x4a88>
   117f0:	mov	r0, #0
   117f4:	bl	10fdc <exit@plt>
   117f8:	mov	r0, #0
   117fc:	bl	111f8 <__assert_fail@plt+0xfc>
   11800:	movw	r1, #29412	; 0x72e4
   11804:	mov	r0, #0
   11808:	mov	r2, #5
   1180c:	movt	r1, #1
   11810:	bl	10f1c <dcgettext@plt>
   11814:	mov	r2, r0
   11818:	mov	r0, #0
   1181c:	mov	r1, #0
   11820:	bl	10f88 <error@plt>
   11824:	mov	r0, #1
   11828:	bl	111f8 <__assert_fail@plt+0xfc>
   1182c:	cmp	r0, r5
   11830:	bge	1183c <__assert_fail@plt+0x740>
   11834:	ldr	r4, [r4, r0, lsl #2]
   11838:	b	11844 <__assert_fail@plt+0x748>
   1183c:	movw	r4, #31661	; 0x7bad
   11840:	movt	r4, #1
   11844:	movw	r1, #31661	; 0x7bad
   11848:	mov	r0, r4
   1184c:	movt	r1, #1
   11850:	bl	10ea4 <strcmp@plt>
   11854:	cmp	r0, #0
   11858:	bne	1186c <__assert_fail@plt+0x770>
   1185c:	movw	r0, #37200	; 0x9150
   11860:	movt	r0, #2
   11864:	ldr	r5, [r0]
   11868:	b	118b8 <__assert_fail@plt+0x7bc>
   1186c:	movw	r1, #29451	; 0x730b
   11870:	mov	r0, r4
   11874:	movt	r1, #1
   11878:	bl	110a8 <fopen64@plt>
   1187c:	mov	r5, r0
   11880:	cmp	r0, #0
   11884:	bne	118b8 <__assert_fail@plt+0x7bc>
   11888:	bl	1100c <__errno_location@plt>
   1188c:	ldr	r5, [r0]
   11890:	mov	r0, #0
   11894:	mov	r1, #3
   11898:	mov	r2, r4
   1189c:	bl	154ec <__assert_fail@plt+0x43f0>
   118a0:	movw	r2, #29348	; 0x72a4
   118a4:	mov	r3, r0
   118a8:	mov	r0, #1
   118ac:	mov	r1, r5
   118b0:	movt	r2, #1
   118b4:	bl	10f88 <error@plt>
   118b8:	mov	r0, r5
   118bc:	mov	r1, #2
   118c0:	bl	13a94 <__assert_fail@plt+0x2998>
   118c4:	movw	r0, #37204	; 0x9154
   118c8:	movt	r0, #2
   118cc:	ldr	r2, [r0]
   118d0:	ldr	r0, [sp, #20]
   118d4:	tst	r0, #1
   118d8:	beq	118f0 <__assert_fail@plt+0x7f4>
   118dc:	ldr	r0, [sp, #16]
   118e0:	mov	r1, r4
   118e4:	and	r3, r0, #1
   118e8:	mov	r0, r5
   118ec:	bl	123b0 <__assert_fail@plt+0x12b4>
   118f0:	mov	r0, r5
   118f4:	mov	r1, r4
   118f8:	mov	r3, r9
   118fc:	bl	12620 <__assert_fail@plt+0x1524>
   11900:	movw	r1, #29351	; 0x72a7
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #1
   11910:	bl	10f1c <dcgettext@plt>
   11914:	mov	r4, r0
   11918:	movw	r0, #37208	; 0x9158
   1191c:	movt	r0, #2
   11920:	ldr	r0, [r0]
   11924:	bl	15680 <__assert_fail@plt+0x4584>
   11928:	movw	r2, #29344	; 0x72a0
   1192c:	str	r0, [sp]
   11930:	mov	r0, #1
   11934:	mov	r1, #0
   11938:	mov	r3, r4
   1193c:	movt	r2, #1
   11940:	bl	10f88 <error@plt>
   11944:	movw	r1, #21846	; 0x5556
   11948:	add	r0, r0, #2
   1194c:	movt	r1, #21845	; 0x5555
   11950:	smmul	r0, r0, r1
   11954:	add	r0, r0, r0, lsr #31
   11958:	lsl	r0, r0, #2
   1195c:	bx	lr
   11960:	add	r0, r0, #4
   11964:	b	13370 <__assert_fail@plt+0x2274>
   11968:	push	{r4, sl, fp, lr}
   1196c:	add	fp, sp, #8
   11970:	sub	sp, sp, #8
   11974:	mov	r4, r0
   11978:	ldr	r0, [fp, #8]
   1197c:	str	r0, [sp]
   11980:	add	r0, r4, #4
   11984:	bl	1337c <__assert_fail@plt+0x2280>
   11988:	ldr	r1, [r4, #4]
   1198c:	str	r1, [r4]
   11990:	sub	sp, fp, #8
   11994:	pop	{r4, sl, fp, pc}
   11998:	mov	r1, r0
   1199c:	mov	r0, #1
   119a0:	cmp	r1, #46	; 0x2e
   119a4:	bgt	119bc <__assert_fail@plt+0x8c0>
   119a8:	cmp	r1, #43	; 0x2b
   119ac:	beq	119d4 <__assert_fail@plt+0x8d8>
   119b0:	cmp	r1, #45	; 0x2d
   119b4:	bne	119cc <__assert_fail@plt+0x8d0>
   119b8:	bx	lr
   119bc:	cmp	r1, #47	; 0x2f
   119c0:	beq	119d4 <__assert_fail@plt+0x8d8>
   119c4:	cmp	r1, #95	; 0x5f
   119c8:	bxeq	lr
   119cc:	mov	r0, r1
   119d0:	b	13350 <__assert_fail@plt+0x2254>
   119d4:	mov	r0, #0
   119d8:	bx	lr
   119dc:	push	{r4, r5, fp, lr}
   119e0:	add	fp, sp, #8
   119e4:	mov	r4, r3
   119e8:	mov	r5, r2
   119ec:	bl	130fc <__assert_fail@plt+0x2000>
   119f0:	cmp	r4, #0
   119f4:	beq	11a28 <__assert_fail@plt+0x92c>
   119f8:	ldrb	r0, [r5]
   119fc:	sub	r4, r4, #1
   11a00:	cmp	r0, #43	; 0x2b
   11a04:	beq	11a18 <__assert_fail@plt+0x91c>
   11a08:	cmp	r0, #47	; 0x2f
   11a0c:	bne	11a20 <__assert_fail@plt+0x924>
   11a10:	mov	r0, #95	; 0x5f
   11a14:	b	11a1c <__assert_fail@plt+0x920>
   11a18:	mov	r0, #45	; 0x2d
   11a1c:	strb	r0, [r5]
   11a20:	add	r5, r5, #1
   11a24:	b	119f0 <__assert_fail@plt+0x8f4>
   11a28:	pop	{r4, r5, fp, pc}
   11a2c:	push	{r4, sl, fp, lr}
   11a30:	add	fp, sp, #8
   11a34:	mov	r4, r0
   11a38:	add	r0, r0, #4
   11a3c:	bl	13370 <__assert_fail@plt+0x2274>
   11a40:	movw	r0, #4200	; 0x1068
   11a44:	str	r0, [r4, #20]
   11a48:	movw	r0, #4200	; 0x1068
   11a4c:	bl	15cbc <__assert_fail@plt+0x4bc0>
   11a50:	str	r0, [r4, #16]
   11a54:	pop	{r4, sl, fp, pc}
   11a58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a5c:	add	fp, sp, #24
   11a60:	sub	sp, sp, #8
   11a64:	mov	r4, r0
   11a68:	ldr	r0, [r0, #20]
   11a6c:	mov	r5, r3
   11a70:	mov	r6, r2
   11a74:	mov	r7, r1
   11a78:	cmp	r0, r2
   11a7c:	bge	11a9c <__assert_fail@plt+0x9a0>
   11a80:	lsl	r1, r6, #1
   11a84:	mov	r2, #1
   11a88:	str	r1, [r4, #20]
   11a8c:	ldr	r0, [r4, #16]
   11a90:	bl	15c50 <__assert_fail@plt+0x4b54>
   11a94:	str	r0, [r4, #16]
   11a98:	b	11aa0 <__assert_fail@plt+0x9a4>
   11a9c:	ldr	r0, [r4, #16]
   11aa0:	ldr	r8, [fp, #8]
   11aa4:	mov	r1, r7
   11aa8:	mov	r2, r6
   11aac:	bl	10eec <memcpy@plt>
   11ab0:	ldr	r1, [r4, #16]
   11ab4:	cmp	r6, #0
   11ab8:	beq	11b20 <__assert_fail@plt+0xa24>
   11abc:	mov	r0, r6
   11ac0:	ldrb	r2, [r1]
   11ac4:	cmp	r2, #46	; 0x2e
   11ac8:	bgt	11ae4 <__assert_fail@plt+0x9e8>
   11acc:	mov	r3, #43	; 0x2b
   11ad0:	cmp	r2, #45	; 0x2d
   11ad4:	beq	11af0 <__assert_fail@plt+0x9f4>
   11ad8:	cmp	r2, #43	; 0x2b
   11adc:	bne	11af4 <__assert_fail@plt+0x9f8>
   11ae0:	b	11b0c <__assert_fail@plt+0xa10>
   11ae4:	cmp	r2, #95	; 0x5f
   11ae8:	bne	11b04 <__assert_fail@plt+0xa08>
   11aec:	mov	r3, #47	; 0x2f
   11af0:	strb	r3, [r1]
   11af4:	subs	r0, r0, #1
   11af8:	add	r1, r1, #1
   11afc:	bne	11ac0 <__assert_fail@plt+0x9c4>
   11b00:	b	11b1c <__assert_fail@plt+0xa20>
   11b04:	cmp	r2, #47	; 0x2f
   11b08:	bne	11af4 <__assert_fail@plt+0x9f8>
   11b0c:	mov	r0, #0
   11b10:	str	r0, [r8]
   11b14:	mov	r0, #0
   11b18:	b	11b3c <__assert_fail@plt+0xa40>
   11b1c:	ldr	r1, [r4, #16]
   11b20:	add	r0, r4, #4
   11b24:	mov	r2, r6
   11b28:	mov	r3, r5
   11b2c:	str	r8, [sp]
   11b30:	bl	1337c <__assert_fail@plt+0x2280>
   11b34:	ldr	r1, [r4, #4]
   11b38:	str	r1, [r4]
   11b3c:	sub	sp, fp, #24
   11b40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b44:	movw	r1, #26215	; 0x6667
   11b48:	add	r0, r0, #4
   11b4c:	movt	r1, #26214	; 0x6666
   11b50:	smmul	r0, r0, r1
   11b54:	lsr	r1, r0, #1
   11b58:	add	r0, r1, r0, lsr #31
   11b5c:	lsl	r0, r0, #3
   11b60:	bx	lr
   11b64:	add	r0, r0, #4
   11b68:	b	12bd8 <__assert_fail@plt+0x1adc>
   11b6c:	push	{r4, sl, fp, lr}
   11b70:	add	fp, sp, #8
   11b74:	sub	sp, sp, #8
   11b78:	mov	r4, r0
   11b7c:	ldr	r0, [fp, #8]
   11b80:	str	r0, [sp]
   11b84:	add	r0, r4, #4
   11b88:	bl	12be4 <__assert_fail@plt+0x1ae8>
   11b8c:	ldr	r1, [r4, #4]
   11b90:	str	r1, [r4]
   11b94:	sub	sp, fp, #8
   11b98:	pop	{r4, sl, fp, pc}
   11b9c:	sub	r1, r0, #65	; 0x41
   11ba0:	sub	r0, r0, #48	; 0x30
   11ba4:	mov	r2, #0
   11ba8:	uxtb	r1, r1
   11bac:	uxtb	r0, r0
   11bb0:	cmp	r1, #22
   11bb4:	mov	r1, #0
   11bb8:	movwcc	r1, #1
   11bbc:	cmp	r0, #10
   11bc0:	movwcc	r2, #1
   11bc4:	orr	r0, r2, r1
   11bc8:	bx	lr
   11bcc:	push	{r4, r5, fp, lr}
   11bd0:	add	fp, sp, #8
   11bd4:	mov	r4, r3
   11bd8:	mov	r5, r2
   11bdc:	bl	128e8 <__assert_fail@plt+0x17ec>
   11be0:	cmp	r4, #0
   11be4:	popeq	{r4, r5, fp, pc}
   11be8:	movw	r0, #30536	; 0x7748
   11bec:	movt	r0, #1
   11bf0:	ldrb	r1, [r5]
   11bf4:	sub	r2, r1, #50	; 0x32
   11bf8:	uxtb	r2, r2
   11bfc:	cmp	r2, #41	; 0x29
   11c00:	bcs	11c1c <__assert_fail@plt+0xb20>
   11c04:	add	r1, r1, r0
   11c08:	subs	r4, r4, #1
   11c0c:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11c10:	strb	r1, [r5], #1
   11c14:	bne	11bf0 <__assert_fail@plt+0xaf4>
   11c18:	pop	{r4, r5, fp, pc}
   11c1c:	movw	r0, #30001	; 0x7531
   11c20:	movw	r1, #30026	; 0x754a
   11c24:	movw	r3, #30039	; 0x7557
   11c28:	mov	r2, #452	; 0x1c4
   11c2c:	movt	r0, #1
   11c30:	movt	r1, #1
   11c34:	movt	r3, #1
   11c38:	bl	110fc <__assert_fail@plt>
   11c3c:	push	{r4, sl, fp, lr}
   11c40:	add	fp, sp, #8
   11c44:	mov	r4, r0
   11c48:	add	r0, r0, #4
   11c4c:	bl	12bd8 <__assert_fail@plt+0x1adc>
   11c50:	movw	r0, #4200	; 0x1068
   11c54:	str	r0, [r4, #20]
   11c58:	movw	r0, #4200	; 0x1068
   11c5c:	bl	15cbc <__assert_fail@plt+0x4bc0>
   11c60:	str	r0, [r4, #16]
   11c64:	pop	{r4, sl, fp, pc}
   11c68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c6c:	add	fp, sp, #24
   11c70:	sub	sp, sp, #8
   11c74:	mov	r4, r0
   11c78:	ldr	r0, [r0, #20]
   11c7c:	mov	r8, r3
   11c80:	mov	r6, r2
   11c84:	mov	r7, r1
   11c88:	cmp	r0, r2
   11c8c:	bge	11cb0 <__assert_fail@plt+0xbb4>
   11c90:	lsl	r1, r6, #1
   11c94:	mov	r2, #1
   11c98:	str	r1, [r4, #20]
   11c9c:	ldr	r0, [r4, #16]
   11ca0:	bl	15c50 <__assert_fail@plt+0x4b54>
   11ca4:	mov	r1, r0
   11ca8:	str	r0, [r4, #16]
   11cac:	b	11cb4 <__assert_fail@plt+0xbb8>
   11cb0:	ldr	r1, [r4, #16]
   11cb4:	ldr	ip, [fp, #8]
   11cb8:	cmp	r6, #0
   11cbc:	beq	11d0c <__assert_fail@plt+0xc10>
   11cc0:	movw	r2, #30577	; 0x7771
   11cc4:	mov	r3, r6
   11cc8:	movt	r2, #1
   11ccc:	ldrb	r0, [r7]
   11cd0:	sub	r3, r3, #1
   11cd4:	sub	r5, r0, #48	; 0x30
   11cd8:	uxtb	r5, r5
   11cdc:	cmp	r5, #10
   11ce0:	subcs	r5, r0, #65	; 0x41
   11ce4:	uxtbcs	r5, r5
   11ce8:	cmpcs	r5, #21
   11cec:	bhi	11cf8 <__assert_fail@plt+0xbfc>
   11cf0:	add	r0, r0, r2
   11cf4:	ldrb	r0, [r0, #-48]	; 0xffffffd0
   11cf8:	strb	r0, [r1], #1
   11cfc:	add	r7, r7, #1
   11d00:	cmp	r3, #0
   11d04:	bne	11ccc <__assert_fail@plt+0xbd0>
   11d08:	ldr	r1, [r4, #16]
   11d0c:	add	r0, r4, #4
   11d10:	mov	r2, r6
   11d14:	mov	r3, r8
   11d18:	str	ip, [sp]
   11d1c:	bl	12be4 <__assert_fail@plt+0x1ae8>
   11d20:	ldr	r1, [r4, #4]
   11d24:	str	r1, [r4]
   11d28:	sub	sp, fp, #24
   11d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d30:	lsl	r0, r0, #1
   11d34:	bx	lr
   11d38:	sub	r1, r0, #65	; 0x41
   11d3c:	sub	r0, r0, #48	; 0x30
   11d40:	mov	r2, #0
   11d44:	uxtb	r1, r1
   11d48:	uxtb	r0, r0
   11d4c:	cmp	r1, #6
   11d50:	mov	r1, #0
   11d54:	movwcc	r1, #1
   11d58:	cmp	r0, #10
   11d5c:	movwcc	r2, #1
   11d60:	orr	r0, r2, r1
   11d64:	bx	lr
   11d68:	push	{fp, lr}
   11d6c:	mov	fp, sp
   11d70:	cmp	r1, #0
   11d74:	popeq	{fp, pc}
   11d78:	movw	ip, #30956	; 0x78ec
   11d7c:	movt	ip, #1
   11d80:	ldrb	lr, [r0], #1
   11d84:	subs	r1, r1, #1
   11d88:	ldrb	r3, [ip, lr, lsr #4]
   11d8c:	strb	r3, [r2]
   11d90:	and	r3, lr, #15
   11d94:	ldrb	r3, [ip, r3]
   11d98:	strb	r3, [r2, #1]
   11d9c:	add	r2, r2, #2
   11da0:	bne	11d80 <__assert_fail@plt+0xc84>
   11da4:	pop	{fp, pc}
   11da8:	push	{r4, sl, fp, lr}
   11dac:	add	fp, sp, #8
   11db0:	mov	r4, r0
   11db4:	movw	r0, #4200	; 0x1068
   11db8:	str	r0, [r4, #20]
   11dbc:	movw	r0, #4200	; 0x1068
   11dc0:	bl	15cbc <__assert_fail@plt+0x4bc0>
   11dc4:	str	r0, [r4, #16]
   11dc8:	mov	r0, #0
   11dcc:	strb	r0, [r4, #5]
   11dd0:	mov	r0, #1
   11dd4:	str	r0, [r4]
   11dd8:	pop	{r4, sl, fp, pc}
   11ddc:	push	{r4, r5, fp, lr}
   11de0:	add	fp, sp, #8
   11de4:	ldr	ip, [fp, #8]
   11de8:	mov	r4, #0
   11dec:	cmp	r2, #0
   11df0:	str	r4, [ip]
   11df4:	beq	11e84 <__assert_fail@plt+0xd88>
   11df8:	cmp	r2, #0
   11dfc:	beq	11e7c <__assert_fail@plt+0xd80>
   11e00:	ldrb	lr, [r1], #1
   11e04:	sub	r2, r2, #1
   11e08:	cmp	lr, #10
   11e0c:	beq	11df8 <__assert_fail@plt+0xcfc>
   11e10:	sub	r4, lr, #48	; 0x30
   11e14:	uxtb	r5, r4
   11e18:	mvn	r4, #47	; 0x2f
   11e1c:	cmp	r5, #10
   11e20:	bcc	11e38 <__assert_fail@plt+0xd3c>
   11e24:	sub	r4, lr, #65	; 0x41
   11e28:	uxtb	r5, r4
   11e2c:	mvn	r4, #54	; 0x36
   11e30:	cmp	r5, #5
   11e34:	bhi	11e94 <__assert_fail@plt+0xd98>
   11e38:	ldrb	r5, [r0, #5]
   11e3c:	add	r4, r4, lr
   11e40:	cmp	r5, #0
   11e44:	beq	11e68 <__assert_fail@plt+0xd6c>
   11e48:	ldrb	r5, [r0, #4]
   11e4c:	add	r5, r4, r5, lsl #4
   11e50:	strb	r5, [r3], #1
   11e54:	ldr	r5, [ip]
   11e58:	add	r5, r5, #1
   11e5c:	str	r5, [ip]
   11e60:	ldrb	r4, [r0, #5]
   11e64:	b	11e70 <__assert_fail@plt+0xd74>
   11e68:	strb	r4, [r0, #4]
   11e6c:	mov	r4, #0
   11e70:	eor	r5, r4, #1
   11e74:	strb	r5, [r0, #5]
   11e78:	b	11df8 <__assert_fail@plt+0xcfc>
   11e7c:	mov	r0, #1
   11e80:	pop	{r4, r5, fp, pc}
   11e84:	ldrb	r0, [r0, #5]
   11e88:	clz	r0, r0
   11e8c:	lsr	r0, r0, #5
   11e90:	pop	{r4, r5, fp, pc}
   11e94:	mov	r0, #0
   11e98:	pop	{r4, r5, fp, pc}
   11e9c:	lsl	r0, r0, #3
   11ea0:	bx	lr
   11ea4:	orr	r0, r0, #1
   11ea8:	sub	r0, r0, #49	; 0x31
   11eac:	clz	r0, r0
   11eb0:	lsr	r0, r0, #5
   11eb4:	bx	lr
   11eb8:	push	{fp, lr}
   11ebc:	mov	fp, sp
   11ec0:	cmp	r1, #0
   11ec4:	popeq	{fp, pc}
   11ec8:	ldrb	ip, [r0]
   11ecc:	mov	lr, #0
   11ed0:	sxtb	r3, ip
   11ed4:	lsl	ip, ip, #1
   11ed8:	cmn	r3, #1
   11edc:	mov	r3, #49	; 0x31
   11ee0:	movwgt	r3, #48	; 0x30
   11ee4:	strb	r3, [r2, -lr]
   11ee8:	sub	lr, lr, #1
   11eec:	cmn	lr, #8
   11ef0:	bne	11ed0 <__assert_fail@plt+0xdd4>
   11ef4:	sub	r2, r2, lr
   11ef8:	add	r0, r0, #1
   11efc:	subs	r1, r1, #1
   11f00:	bne	11ec8 <__assert_fail@plt+0xdcc>
   11f04:	pop	{fp, pc}
   11f08:	push	{r4, sl, fp, lr}
   11f0c:	add	fp, sp, #8
   11f10:	mov	r4, r0
   11f14:	movw	r0, #4200	; 0x1068
   11f18:	str	r0, [r4, #20]
   11f1c:	movw	r0, #4200	; 0x1068
   11f20:	bl	15cbc <__assert_fail@plt+0x4bc0>
   11f24:	str	r0, [r4, #16]
   11f28:	mov	r0, #0
   11f2c:	strb	r0, [r4, #4]
   11f30:	str	r0, [r4]
   11f34:	pop	{r4, sl, fp, pc}
   11f38:	push	{r4, r5, r6, sl, fp, lr}
   11f3c:	add	fp, sp, #16
   11f40:	ldr	ip, [fp, #8]
   11f44:	mov	lr, #0
   11f48:	cmp	r2, #0
   11f4c:	str	lr, [ip]
   11f50:	beq	11fe8 <__assert_fail@plt+0xeec>
   11f54:	add	r1, r1, #1
   11f58:	rsb	r4, r2, #1
   11f5c:	ldrb	r2, [r1, #-1]
   11f60:	cmp	r2, #10
   11f64:	bne	11f7c <__assert_fail@plt+0xe80>
   11f68:	add	r4, r4, #1
   11f6c:	add	r1, r1, #1
   11f70:	cmp	r4, #1
   11f74:	bne	11f5c <__assert_fail@plt+0xe60>
   11f78:	b	11fe0 <__assert_fail@plt+0xee4>
   11f7c:	orr	r5, r2, #1
   11f80:	cmp	r5, #49	; 0x31
   11f84:	bne	11ff8 <__assert_fail@plt+0xefc>
   11f88:	ldr	r5, [r0]
   11f8c:	sub	r2, r2, #49	; 0x31
   11f90:	clz	r2, r2
   11f94:	lsr	r2, r2, #5
   11f98:	cmp	r5, #0
   11f9c:	moveq	r5, #8
   11fa0:	streq	r5, [r0]
   11fa4:	subs	r5, r5, #1
   11fa8:	str	r5, [r0]
   11fac:	ldrb	r6, [r0, #4]
   11fb0:	orr	r2, r6, r2, lsl r5
   11fb4:	strb	r2, [r0, #4]
   11fb8:	bne	11fd4 <__assert_fail@plt+0xed8>
   11fbc:	strb	r2, [r3], #1
   11fc0:	strb	lr, [r0, #4]
   11fc4:	ldr	r2, [ip]
   11fc8:	add	r2, r2, #1
   11fcc:	str	r2, [ip]
   11fd0:	str	lr, [r0]
   11fd4:	rsb	r2, r4, #0
   11fd8:	cmp	r4, #0
   11fdc:	bne	11f54 <__assert_fail@plt+0xe58>
   11fe0:	mov	r0, #1
   11fe4:	pop	{r4, r5, r6, sl, fp, pc}
   11fe8:	ldr	r0, [r0]
   11fec:	clz	r0, r0
   11ff0:	lsr	r0, r0, #5
   11ff4:	pop	{r4, r5, r6, sl, fp, pc}
   11ff8:	mov	r0, #0
   11ffc:	pop	{r4, r5, r6, sl, fp, pc}
   12000:	push	{r4, sl, fp, lr}
   12004:	add	fp, sp, #8
   12008:	cmp	r1, #0
   1200c:	popeq	{r4, sl, fp, pc}
   12010:	mov	ip, #24
   12014:	ldrb	r3, [r0]
   12018:	mov	lr, #0
   1201c:	uxtb	r4, r3
   12020:	bfi	r3, ip, #1, #31
   12024:	strb	r3, [r2, -lr]
   12028:	sub	lr, lr, #1
   1202c:	lsr	r3, r4, #1
   12030:	cmn	lr, #8
   12034:	bne	1201c <__assert_fail@plt+0xf20>
   12038:	sub	r2, r2, lr
   1203c:	add	r0, r0, #1
   12040:	subs	r1, r1, #1
   12044:	bne	12014 <__assert_fail@plt+0xf18>
   12048:	pop	{r4, sl, fp, pc}
   1204c:	push	{r4, r5, r6, sl, fp, lr}
   12050:	add	fp, sp, #16
   12054:	ldr	ip, [fp, #8]
   12058:	mov	lr, #0
   1205c:	cmp	r2, #0
   12060:	str	lr, [ip]
   12064:	beq	120f4 <__assert_fail@plt+0xff8>
   12068:	add	r1, r1, #1
   1206c:	rsb	r4, r2, #1
   12070:	ldrb	r2, [r1, #-1]
   12074:	cmp	r2, #10
   12078:	bne	12090 <__assert_fail@plt+0xf94>
   1207c:	add	r4, r4, #1
   12080:	add	r1, r1, #1
   12084:	cmp	r4, #1
   12088:	bne	12070 <__assert_fail@plt+0xf74>
   1208c:	b	120ec <__assert_fail@plt+0xff0>
   12090:	orr	r5, r2, #1
   12094:	cmp	r5, #49	; 0x31
   12098:	bne	12104 <__assert_fail@plt+0x1008>
   1209c:	ldr	r5, [r0]
   120a0:	ldrb	r6, [r0, #4]
   120a4:	sub	r2, r2, #49	; 0x31
   120a8:	clz	r2, r2
   120ac:	lsr	r2, r2, #5
   120b0:	orr	r2, r6, r2, lsl r5
   120b4:	add	r5, r5, #1
   120b8:	cmp	r5, #8
   120bc:	strb	r2, [r0, #4]
   120c0:	str	r5, [r0]
   120c4:	bne	120e0 <__assert_fail@plt+0xfe4>
   120c8:	strb	r2, [r3], #1
   120cc:	strb	lr, [r0, #4]
   120d0:	ldr	r2, [ip]
   120d4:	add	r2, r2, #1
   120d8:	str	r2, [ip]
   120dc:	str	lr, [r0]
   120e0:	rsb	r2, r4, #0
   120e4:	cmp	r4, #0
   120e8:	bne	12068 <__assert_fail@plt+0xf6c>
   120ec:	mov	r0, #1
   120f0:	pop	{r4, r5, r6, sl, fp, pc}
   120f4:	ldr	r0, [r0]
   120f8:	clz	r0, r0
   120fc:	lsr	r0, r0, #5
   12100:	pop	{r4, r5, r6, sl, fp, pc}
   12104:	mov	r0, #0
   12108:	pop	{r4, r5, r6, sl, fp, pc}
   1210c:	add	r0, r0, r0, lsl #2
   12110:	asr	r1, r0, #31
   12114:	add	r0, r0, r1, lsr #30
   12118:	asr	r0, r0, #2
   1211c:	bx	lr
   12120:	push	{r4, sl, fp, lr}
   12124:	add	fp, sp, #8
   12128:	mov	r4, r0
   1212c:	bl	137b8 <__assert_fail@plt+0x26bc>
   12130:	mov	r1, r0
   12134:	mov	r0, #1
   12138:	cmp	r1, #0
   1213c:	popne	{r4, sl, fp, pc}
   12140:	movw	r0, #30113	; 0x75a1
   12144:	mov	r1, r4
   12148:	mov	r2, #24
   1214c:	movt	r0, #1
   12150:	bl	11054 <memchr@plt>
   12154:	cmp	r0, #0
   12158:	movwne	r0, #1
   1215c:	pop	{r4, sl, fp, pc}
   12160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12164:	add	fp, sp, #28
   12168:	sub	sp, sp, #12
   1216c:	cmp	r1, #0
   12170:	beq	1221c <__assert_fail@plt+0x1120>
   12174:	movw	r8, #30618	; 0x779a
   12178:	mov	r4, r3
   1217c:	mov	r5, r2
   12180:	mov	r6, #0
   12184:	add	r7, sp, #8
   12188:	mov	sl, #85	; 0x55
   1218c:	mov	r3, #0
   12190:	movt	r8, #1
   12194:	ldrb	r2, [r0], #1
   12198:	sub	r1, r1, #1
   1219c:	strb	r2, [r7, r3]
   121a0:	add	r3, r3, #1
   121a4:	cmp	r3, #4
   121a8:	bne	1220c <__assert_fail@plt+0x1110>
   121ac:	stm	sp, {r0, r1}
   121b0:	ldr	r0, [sp, #8]
   121b4:	mov	r1, #0
   121b8:	mov	r9, #4
   121bc:	rev	r7, r0
   121c0:	mov	r0, r7
   121c4:	mov	r2, #85	; 0x55
   121c8:	mov	r3, #0
   121cc:	bl	16a78 <__assert_fail@plt+0x597c>
   121d0:	add	r2, r6, r9
   121d4:	cmp	r2, r4
   121d8:	bge	121e8 <__assert_fail@plt+0x10ec>
   121dc:	mls	r2, r0, sl, r7
   121e0:	ldrb	r2, [r8, r2]
   121e4:	strb	r2, [r5, r9]
   121e8:	sub	r9, r9, #1
   121ec:	mov	r7, r0
   121f0:	cmn	r9, #1
   121f4:	bne	121c0 <__assert_fail@plt+0x10c4>
   121f8:	ldm	sp, {r0, r1}
   121fc:	add	r6, r6, #5
   12200:	add	r5, r5, #5
   12204:	mov	r3, #0
   12208:	add	r7, sp, #8
   1220c:	cmp	r1, #0
   12210:	bne	12194 <__assert_fail@plt+0x1098>
   12214:	cmp	r3, #0
   12218:	bne	12224 <__assert_fail@plt+0x1128>
   1221c:	sub	sp, fp, #28
   12220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12224:	movw	r1, #30137	; 0x75b9
   12228:	mov	r0, #0
   1222c:	mov	r2, #5
   12230:	movt	r1, #1
   12234:	bl	10f1c <dcgettext@plt>
   12238:	mov	r2, r0
   1223c:	mov	r0, #1
   12240:	mov	r1, #0
   12244:	bl	10f88 <error@plt>
   12248:	push	{r4, sl, fp, lr}
   1224c:	add	fp, sp, #8
   12250:	mov	r4, r0
   12254:	movw	r0, #4200	; 0x1068
   12258:	str	r0, [r4, #20]
   1225c:	movw	r0, #4200	; 0x1068
   12260:	bl	15cbc <__assert_fail@plt+0x4bc0>
   12264:	str	r0, [r4, #16]
   12268:	mov	r1, #1
   1226c:	mov	r0, #0
   12270:	str	r1, [r4]
   12274:	str	r0, [r4, #4]
   12278:	pop	{r4, sl, fp, pc}
   1227c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12280:	add	fp, sp, #28
   12284:	ldr	lr, [fp, #8]
   12288:	mov	ip, #0
   1228c:	cmp	r2, #0
   12290:	str	ip, [lr]
   12294:	beq	1239c <__assert_fail@plt+0x12a0>
   12298:	movw	r9, #30703	; 0x77ef
   1229c:	movw	r8, #33969	; 0x84b1
   122a0:	movt	r9, #1
   122a4:	movt	r8, #796	; 0x31c
   122a8:	add	r1, r1, #1
   122ac:	rsb	r6, r2, #1
   122b0:	ldrb	r2, [r1, #-1]
   122b4:	cmp	r2, #10
   122b8:	bne	122d0 <__assert_fail@plt+0x11d4>
   122bc:	add	r6, r6, #1
   122c0:	add	r1, r1, #1
   122c4:	cmp	r6, #1
   122c8:	bne	122b0 <__assert_fail@plt+0x11b4>
   122cc:	b	1238c <__assert_fail@plt+0x1290>
   122d0:	sub	r7, r2, #33	; 0x21
   122d4:	mov	ip, #0
   122d8:	uxtb	r7, r7
   122dc:	cmp	r7, #92	; 0x5c
   122e0:	bhi	123a8 <__assert_fail@plt+0x12ac>
   122e4:	add	r2, r2, r9
   122e8:	ldrsb	r2, [r2, #-33]	; 0xffffffdf
   122ec:	cmp	r2, #0
   122f0:	bmi	123a8 <__assert_fail@plt+0x12ac>
   122f4:	mov	r4, r0
   122f8:	ldr	r5, [r4, #4]!
   122fc:	mov	r7, r4
   12300:	add	ip, r5, #1
   12304:	str	ip, [r7], r5
   12308:	strb	r2, [r7, #4]
   1230c:	ldr	r7, [r4]
   12310:	cmp	r7, #5
   12314:	bne	1237c <__assert_fail@plt+0x1280>
   12318:	ldrb	r2, [r0, #9]
   1231c:	movw	r4, #24301	; 0x5eed
   12320:	ldrb	r7, [r0, #10]
   12324:	ldrb	r5, [r0, #11]
   12328:	ldrb	sl, [r0, #8]
   1232c:	mov	ip, #0
   12330:	movt	r4, #9
   12334:	mul	r2, r2, r4
   12338:	movw	r4, #7225	; 0x1c39
   1233c:	smlabb	r2, r7, r4, r2
   12340:	mov	r7, #85	; 0x55
   12344:	smlabb	r2, r5, r7, r2
   12348:	ldrb	r7, [r0, #12]
   1234c:	mov	r5, #0
   12350:	add	r2, r2, r7
   12354:	umlal	r2, r5, sl, r8
   12358:	tst	r5, #7
   1235c:	bne	123a8 <__assert_fail@plt+0x12ac>
   12360:	rev	r2, r2
   12364:	mov	r7, #0
   12368:	str	r2, [r3], #4
   1236c:	ldr	r2, [lr]
   12370:	add	r2, r2, #4
   12374:	str	r2, [lr]
   12378:	str	r7, [r0, #4]
   1237c:	rsb	r2, r6, #0
   12380:	cmp	r6, #0
   12384:	bne	122a8 <__assert_fail@plt+0x11ac>
   12388:	b	12390 <__assert_fail@plt+0x1294>
   1238c:	ldr	r7, [r0, #4]
   12390:	mov	ip, #1
   12394:	str	r7, [r0]
   12398:	b	123a8 <__assert_fail@plt+0x12ac>
   1239c:	ldr	r0, [r0, #4]
   123a0:	cmp	r0, #1
   123a4:	movwlt	ip, #1
   123a8:	mov	r0, ip
   123ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123b0:	push	{fp, lr}
   123b4:	mov	fp, sp
   123b8:	sub	sp, sp, #48	; 0x30
   123bc:	movw	r5, #37216	; 0x9160
   123c0:	stmib	sp, {r1, r2, r3}
   123c4:	mov	r8, r0
   123c8:	movw	r0, #4200	; 0x1068
   123cc:	movt	r5, #2
   123d0:	ldr	r1, [r5]
   123d4:	blx	r1
   123d8:	bl	15c8c <__assert_fail@plt+0x4b90>
   123dc:	mov	r4, r0
   123e0:	movw	r0, #4200	; 0x1068
   123e4:	bl	15c8c <__assert_fail@plt+0x4b90>
   123e8:	mov	r9, r0
   123ec:	movw	r0, #37228	; 0x916c
   123f0:	mov	sl, #0
   123f4:	movt	r0, #2
   123f8:	str	sl, [sp, #40]	; 0x28
   123fc:	ldr	r1, [r0]
   12400:	add	r0, sp, #24
   12404:	blx	r1
   12408:	str	r8, [sp, #16]
   1240c:	ldr	r1, [r5]
   12410:	movw	r0, #4200	; 0x1068
   12414:	blx	r1
   12418:	add	r1, r4, sl
   1241c:	sub	r2, r0, sl
   12420:	mov	r3, r8
   12424:	mov	r5, r1
   12428:	mov	r0, r1
   1242c:	mov	r1, #1
   12430:	bl	110c0 <fread_unlocked@plt>
   12434:	mov	r8, r0
   12438:	cmp	r0, #1
   1243c:	blt	124a8 <__assert_fail@plt+0x13ac>
   12440:	ldr	r0, [sp, #12]
   12444:	cmp	r0, #0
   12448:	beq	124a8 <__assert_fail@plt+0x13ac>
   1244c:	mov	r6, #0
   12450:	movw	r1, #37220	; 0x9164
   12454:	add	r7, r6, sl
   12458:	movt	r1, #2
   1245c:	ldrb	r0, [r4, r7]
   12460:	ldr	r1, [r1]
   12464:	blx	r1
   12468:	cmp	r0, #0
   1246c:	bne	1247c <__assert_fail@plt+0x1380>
   12470:	ldrb	r0, [r4, r7]
   12474:	cmp	r0, #61	; 0x3d
   12478:	bne	12484 <__assert_fail@plt+0x1388>
   1247c:	add	r6, r6, #1
   12480:	b	12498 <__assert_fail@plt+0x139c>
   12484:	sub	r8, r8, #1
   12488:	add	r0, r5, r6
   1248c:	sub	r2, r8, r6
   12490:	add	r1, r0, #1
   12494:	bl	10ec8 <memmove@plt>
   12498:	cmp	r8, #1
   1249c:	blt	124a8 <__assert_fail@plt+0x13ac>
   124a0:	cmp	r6, r8
   124a4:	blt	12450 <__assert_fail@plt+0x1354>
   124a8:	ldr	r0, [sp, #16]
   124ac:	bl	10f70 <ferror_unlocked@plt>
   124b0:	cmp	r0, #0
   124b4:	bne	1260c <__assert_fail@plt+0x1510>
   124b8:	movw	r5, #37216	; 0x9160
   124bc:	movw	r0, #4200	; 0x1068
   124c0:	add	sl, r8, sl
   124c4:	movt	r5, #2
   124c8:	ldr	r1, [r5]
   124cc:	blx	r1
   124d0:	ldr	r8, [sp, #16]
   124d4:	cmp	sl, r0
   124d8:	bge	124ec <__assert_fail@plt+0x13f0>
   124dc:	mov	r0, r8
   124e0:	bl	110f0 <feof_unlocked@plt>
   124e4:	cmp	r0, #0
   124e8:	beq	1240c <__assert_fail@plt+0x1310>
   124ec:	mov	r0, r8
   124f0:	bl	110f0 <feof_unlocked@plt>
   124f4:	ldr	r5, [sp, #8]
   124f8:	mov	r6, #0
   124fc:	cmp	r6, #1
   12500:	bne	12510 <__assert_fail@plt+0x1414>
   12504:	ldr	r0, [sp, #24]
   12508:	cmp	r0, #0
   1250c:	beq	12594 <__assert_fail@plt+0x1498>
   12510:	movw	r0, #4200	; 0x1068
   12514:	cmp	r6, #0
   12518:	mov	r2, #0
   1251c:	mov	r1, r4
   12520:	mov	r3, r9
   12524:	str	r0, [sp, #20]
   12528:	movw	r0, #37232	; 0x9170
   1252c:	moveq	r2, sl
   12530:	movt	r0, #2
   12534:	ldr	r7, [r0]
   12538:	add	r0, sp, #20
   1253c:	str	r0, [sp]
   12540:	add	r0, sp, #24
   12544:	blx	r7
   12548:	ldr	r2, [sp, #20]
   1254c:	mov	r7, r0
   12550:	mov	r0, r9
   12554:	mov	r1, #1
   12558:	mov	r3, r5
   1255c:	bl	10f04 <fwrite_unlocked@plt>
   12560:	ldr	r1, [sp, #20]
   12564:	cmp	r0, r1
   12568:	bcc	125bc <__assert_fail@plt+0x14c0>
   1256c:	cmp	r7, #0
   12570:	beq	125e8 <__assert_fail@plt+0x14ec>
   12574:	mov	r0, r8
   12578:	bl	110f0 <feof_unlocked@plt>
   1257c:	cmp	r0, #0
   12580:	mov	r0, #2
   12584:	add	r6, r6, #1
   12588:	movweq	r0, #1
   1258c:	cmp	r6, r0
   12590:	bcc	124fc <__assert_fail@plt+0x1400>
   12594:	mov	r0, r8
   12598:	bl	110f0 <feof_unlocked@plt>
   1259c:	movw	r5, #37216	; 0x9160
   125a0:	mov	sl, #0
   125a4:	cmp	r0, #0
   125a8:	movt	r5, #2
   125ac:	beq	1240c <__assert_fail@plt+0x1310>
   125b0:	ldr	r1, [sp, #4]
   125b4:	mov	r0, r8
   125b8:	bl	12858 <__assert_fail@plt+0x175c>
   125bc:	bl	1100c <__errno_location@plt>
   125c0:	ldr	r4, [r0]
   125c4:	movw	r1, #30204	; 0x75fc
   125c8:	movt	r1, #1
   125cc:	mov	r0, #0
   125d0:	mov	r2, #5
   125d4:	bl	10f1c <dcgettext@plt>
   125d8:	mov	r2, r0
   125dc:	mov	r0, #1
   125e0:	mov	r1, r4
   125e4:	bl	10f88 <error@plt>
   125e8:	movw	r1, #30216	; 0x7608
   125ec:	mov	r0, #0
   125f0:	mov	r2, #5
   125f4:	movt	r1, #1
   125f8:	bl	10f1c <dcgettext@plt>
   125fc:	mov	r2, r0
   12600:	mov	r0, #1
   12604:	mov	r1, #0
   12608:	bl	10f88 <error@plt>
   1260c:	bl	1100c <__errno_location@plt>
   12610:	ldr	r4, [r0]
   12614:	movw	r1, #30193	; 0x75f1
   12618:	movt	r1, #1
   1261c:	b	125cc <__assert_fail@plt+0x14d0>
   12620:	push	{fp, lr}
   12624:	mov	fp, sp
   12628:	sub	sp, sp, #16
   1262c:	mov	r5, r0
   12630:	mov	r0, #30720	; 0x7800
   12634:	str	r3, [fp, #-4]
   12638:	stm	sp, {r1, r2}
   1263c:	bl	15c8c <__assert_fail@plt+0x4b90>
   12640:	mov	r4, r0
   12644:	movw	r0, #37216	; 0x9160
   12648:	movt	r0, #2
   1264c:	ldr	r1, [r0]
   12650:	mov	r0, #30720	; 0x7800
   12654:	blx	r1
   12658:	bl	15c8c <__assert_fail@plt+0x4b90>
   1265c:	mov	r9, r0
   12660:	mov	sl, #0
   12664:	str	r0, [sp, #8]
   12668:	mov	r6, #0
   1266c:	add	r0, r4, r6
   12670:	rsb	r2, r6, #30720	; 0x7800
   12674:	mov	r1, #1
   12678:	mov	r3, r5
   1267c:	bl	110c0 <fread_unlocked@plt>
   12680:	add	r6, r0, r6
   12684:	mov	r0, r5
   12688:	bl	110f0 <feof_unlocked@plt>
   1268c:	cmp	r0, #0
   12690:	bne	126ac <__assert_fail@plt+0x15b0>
   12694:	mov	r0, r5
   12698:	bl	10f70 <ferror_unlocked@plt>
   1269c:	cmp	r6, #30720	; 0x7800
   126a0:	bge	126ac <__assert_fail@plt+0x15b0>
   126a4:	cmp	r0, #0
   126a8:	beq	1266c <__assert_fail@plt+0x1570>
   126ac:	cmp	r6, #1
   126b0:	blt	127ac <__assert_fail@plt+0x16b0>
   126b4:	movw	r0, #37224	; 0x9168
   126b8:	movt	r0, #2
   126bc:	ldr	r7, [r0]
   126c0:	movw	r0, #37216	; 0x9160
   126c4:	movt	r0, #2
   126c8:	ldr	r1, [r0]
   126cc:	mov	r8, r0
   126d0:	mov	r0, r6
   126d4:	blx	r1
   126d8:	mov	r3, r0
   126dc:	mov	r0, r4
   126e0:	mov	r1, r6
   126e4:	mov	r2, r9
   126e8:	blx	r7
   126ec:	ldr	r1, [r8]
   126f0:	mov	r0, r6
   126f4:	blx	r1
   126f8:	mov	r8, r0
   126fc:	ldr	r0, [fp, #-4]
   12700:	cmp	r0, #0
   12704:	beq	12788 <__assert_fail@plt+0x168c>
   12708:	cmp	r8, #1
   1270c:	blt	127ac <__assert_fail@plt+0x16b0>
   12710:	mov	r7, #0
   12714:	ldr	r0, [fp, #-4]
   12718:	sub	r9, r8, r7
   1271c:	sub	r0, r0, sl
   12720:	cmp	r0, r9
   12724:	movlt	r9, r0
   12728:	cmp	r9, #0
   1272c:	beq	12764 <__assert_fail@plt+0x1668>
   12730:	movw	r1, #37204	; 0x9154
   12734:	ldr	r0, [sp, #8]
   12738:	mov	r2, r9
   1273c:	movt	r1, #2
   12740:	ldr	r3, [r1]
   12744:	mov	r1, #1
   12748:	add	r0, r0, r7
   1274c:	bl	10f04 <fwrite_unlocked@plt>
   12750:	cmp	r0, r9
   12754:	bcc	127fc <__assert_fail@plt+0x1700>
   12758:	add	r7, r9, r7
   1275c:	add	sl, r9, sl
   12760:	b	1277c <__assert_fail@plt+0x1680>
   12764:	ldr	r1, [sp, #4]
   12768:	mov	r0, #10
   1276c:	bl	10f10 <fputc_unlocked@plt>
   12770:	mov	sl, #0
   12774:	cmn	r0, #1
   12778:	beq	127fc <__assert_fail@plt+0x1700>
   1277c:	cmp	r7, r8
   12780:	blt	12714 <__assert_fail@plt+0x1618>
   12784:	b	127ac <__assert_fail@plt+0x16b0>
   12788:	movw	r0, #37204	; 0x9154
   1278c:	mov	r1, #1
   12790:	mov	r2, r8
   12794:	movt	r0, #2
   12798:	ldr	r3, [r0]
   1279c:	mov	r0, r9
   127a0:	bl	10f04 <fwrite_unlocked@plt>
   127a4:	cmp	r0, r8
   127a8:	bcc	127fc <__assert_fail@plt+0x1700>
   127ac:	mov	r0, r5
   127b0:	bl	110f0 <feof_unlocked@plt>
   127b4:	ldr	r9, [sp, #8]
   127b8:	cmp	r0, #0
   127bc:	bne	127d4 <__assert_fail@plt+0x16d8>
   127c0:	mov	r0, r5
   127c4:	bl	10f70 <ferror_unlocked@plt>
   127c8:	cmp	r6, #30720	; 0x7800
   127cc:	cmpeq	r0, #0
   127d0:	beq	12668 <__assert_fail@plt+0x156c>
   127d4:	ldr	r0, [fp, #-4]
   127d8:	cmp	r0, #0
   127dc:	beq	12828 <__assert_fail@plt+0x172c>
   127e0:	cmp	sl, #1
   127e4:	blt	12828 <__assert_fail@plt+0x172c>
   127e8:	ldr	r1, [sp, #4]
   127ec:	mov	r0, #10
   127f0:	bl	10f10 <fputc_unlocked@plt>
   127f4:	cmn	r0, #1
   127f8:	bne	12828 <__assert_fail@plt+0x172c>
   127fc:	bl	1100c <__errno_location@plt>
   12800:	ldr	r4, [r0]
   12804:	movw	r1, #30204	; 0x75fc
   12808:	movt	r1, #1
   1280c:	mov	r0, #0
   12810:	mov	r2, #5
   12814:	bl	10f1c <dcgettext@plt>
   12818:	mov	r2, r0
   1281c:	mov	r0, #1
   12820:	mov	r1, r4
   12824:	bl	10f88 <error@plt>
   12828:	mov	r0, r5
   1282c:	bl	10f70 <ferror_unlocked@plt>
   12830:	cmp	r0, #0
   12834:	bne	12844 <__assert_fail@plt+0x1748>
   12838:	ldr	r1, [sp]
   1283c:	mov	r0, r5
   12840:	bl	12858 <__assert_fail@plt+0x175c>
   12844:	bl	1100c <__errno_location@plt>
   12848:	ldr	r4, [r0]
   1284c:	movw	r1, #30193	; 0x75f1
   12850:	movt	r1, #1
   12854:	b	1280c <__assert_fail@plt+0x1710>
   12858:	push	{fp, lr}
   1285c:	mov	fp, sp
   12860:	mov	r5, r1
   12864:	bl	13ad0 <__assert_fail@plt+0x29d4>
   12868:	cmp	r0, #0
   1286c:	bne	12878 <__assert_fail@plt+0x177c>
   12870:	mov	r0, #0
   12874:	bl	10fdc <exit@plt>
   12878:	movw	r1, #31661	; 0x7bad
   1287c:	mov	r0, r5
   12880:	movt	r1, #1
   12884:	bl	10ea4 <strcmp@plt>
   12888:	mov	r6, r0
   1288c:	bl	1100c <__errno_location@plt>
   12890:	ldr	r4, [r0]
   12894:	cmp	r6, #0
   12898:	bne	128c0 <__assert_fail@plt+0x17c4>
   1289c:	movw	r1, #30230	; 0x7616
   128a0:	mov	r0, #0
   128a4:	mov	r2, #5
   128a8:	movt	r1, #1
   128ac:	bl	10f1c <dcgettext@plt>
   128b0:	mov	r2, r0
   128b4:	mov	r0, #1
   128b8:	mov	r1, r4
   128bc:	bl	10f88 <error@plt>
   128c0:	mov	r0, #0
   128c4:	mov	r1, #3
   128c8:	mov	r2, r5
   128cc:	bl	154ec <__assert_fail@plt+0x43f0>
   128d0:	movw	r2, #29348	; 0x72a4
   128d4:	mov	r3, r0
   128d8:	mov	r0, #1
   128dc:	mov	r1, r4
   128e0:	movt	r2, #1
   128e4:	bl	10f88 <error@plt>
   128e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   128ec:	add	fp, sp, #24
   128f0:	cmp	r1, #0
   128f4:	cmpne	r3, #0
   128f8:	bne	12910 <__assert_fail@plt+0x1814>
   128fc:	cmp	r3, #0
   12900:	beq	1290c <__assert_fail@plt+0x1810>
   12904:	mov	r0, #0
   12908:	strb	r0, [r2]
   1290c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12910:	movw	r8, #30987	; 0x790b
   12914:	add	r0, r0, #2
   12918:	rsb	lr, r3, #0
   1291c:	mov	ip, #0
   12920:	mov	r9, #0
   12924:	movt	r8, #1
   12928:	ldrb	r3, [r0, #-2]
   1292c:	mov	r5, r2
   12930:	add	r6, lr, r9
   12934:	ldrb	r3, [r8, r3, lsr #3]
   12938:	strb	r3, [r5, r9]!
   1293c:	adds	r3, r6, #1
   12940:	bcs	1290c <__assert_fail@plt+0x1810>
   12944:	cmp	r1, #1
   12948:	ldrb	r3, [r0, #-2]
   1294c:	mov	r4, #0
   12950:	add	r7, r6, #2
   12954:	ldrbne	r4, [r0, #-1]
   12958:	lsl	r3, r3, #2
   1295c:	lsrne	r4, r4, #6
   12960:	cmp	r7, #0
   12964:	add	r3, r4, r3
   12968:	and	r3, r3, #31
   1296c:	ldrb	r3, [r8, r3]
   12970:	strb	r3, [r5, #1]
   12974:	beq	1290c <__assert_fail@plt+0x1810>
   12978:	add	r7, r6, #3
   1297c:	mov	r3, #61	; 0x3d
   12980:	cmp	r1, #1
   12984:	beq	12994 <__assert_fail@plt+0x1898>
   12988:	ldrb	r3, [r0, #-1]
   1298c:	ubfx	r3, r3, #1, #5
   12990:	ldrb	r3, [r8, r3]
   12994:	cmp	r7, #0
   12998:	strb	r3, [r5, #2]
   1299c:	beq	1290c <__assert_fail@plt+0x1810>
   129a0:	add	r7, r6, #4
   129a4:	cmp	r1, #1
   129a8:	beq	129c8 <__assert_fail@plt+0x18cc>
   129ac:	ldrb	r3, [r0, #-1]
   129b0:	subs	r1, r1, #2
   129b4:	lsl	r3, r3, #4
   129b8:	beq	129d4 <__assert_fail@plt+0x18d8>
   129bc:	ldrb	r4, [r0]
   129c0:	lsr	r4, r4, #4
   129c4:	b	129d8 <__assert_fail@plt+0x18dc>
   129c8:	mov	r3, #61	; 0x3d
   129cc:	mov	r1, #0
   129d0:	b	129e4 <__assert_fail@plt+0x18e8>
   129d4:	mov	r4, #0
   129d8:	add	r3, r4, r3
   129dc:	and	r3, r3, #31
   129e0:	ldrb	r3, [r8, r3]
   129e4:	cmp	r7, #0
   129e8:	strb	r3, [r5, #3]
   129ec:	beq	1290c <__assert_fail@plt+0x1810>
   129f0:	add	r7, r6, #5
   129f4:	cmp	r1, #0
   129f8:	beq	12a18 <__assert_fail@plt+0x191c>
   129fc:	ldrb	r3, [r0]
   12a00:	subs	r1, r1, #1
   12a04:	lsl	r3, r3, #1
   12a08:	beq	12a24 <__assert_fail@plt+0x1928>
   12a0c:	ldrb	r4, [r0, #1]
   12a10:	lsr	r4, r4, #7
   12a14:	b	12a28 <__assert_fail@plt+0x192c>
   12a18:	mov	r3, #61	; 0x3d
   12a1c:	mov	r1, #0
   12a20:	b	12a34 <__assert_fail@plt+0x1938>
   12a24:	mov	r4, #0
   12a28:	add	r3, r4, r3
   12a2c:	and	r3, r3, #31
   12a30:	ldrb	r3, [r8, r3]
   12a34:	cmp	r7, #0
   12a38:	strb	r3, [r5, #4]
   12a3c:	beq	1290c <__assert_fail@plt+0x1810>
   12a40:	add	r7, r6, #6
   12a44:	cmp	r1, #0
   12a48:	beq	12a5c <__assert_fail@plt+0x1960>
   12a4c:	ldrb	r3, [r0, #1]
   12a50:	ubfx	r3, r3, #2, #5
   12a54:	ldrb	r3, [r8, r3]
   12a58:	b	12a60 <__assert_fail@plt+0x1964>
   12a5c:	mov	r3, #61	; 0x3d
   12a60:	cmp	r7, #0
   12a64:	strb	r3, [r5, #5]
   12a68:	beq	1290c <__assert_fail@plt+0x1810>
   12a6c:	add	r7, r6, #7
   12a70:	cmp	r1, #0
   12a74:	beq	12a94 <__assert_fail@plt+0x1998>
   12a78:	ldrb	r3, [r0, #1]
   12a7c:	subs	r1, r1, #1
   12a80:	lsl	r3, r3, #3
   12a84:	beq	12aa0 <__assert_fail@plt+0x19a4>
   12a88:	ldrb	r4, [r0, #2]
   12a8c:	lsr	r4, r4, #5
   12a90:	b	12aa4 <__assert_fail@plt+0x19a8>
   12a94:	mov	r3, #61	; 0x3d
   12a98:	mov	r1, #0
   12a9c:	b	12ab0 <__assert_fail@plt+0x19b4>
   12aa0:	mov	r4, #0
   12aa4:	add	r3, r4, r3
   12aa8:	and	r3, r3, #31
   12aac:	ldrb	r3, [r8, r3]
   12ab0:	cmp	r7, #0
   12ab4:	strb	r3, [r5, #6]
   12ab8:	beq	1290c <__assert_fail@plt+0x1810>
   12abc:	cmp	r1, #0
   12ac0:	beq	12ad4 <__assert_fail@plt+0x19d8>
   12ac4:	ldrb	r3, [r0, #2]
   12ac8:	and	r3, r3, #31
   12acc:	ldrb	r3, [r8, r3]
   12ad0:	b	12ad8 <__assert_fail@plt+0x19dc>
   12ad4:	mov	r3, #61	; 0x3d
   12ad8:	cmn	r6, #8
   12adc:	strb	r3, [r5, #7]
   12ae0:	beq	1290c <__assert_fail@plt+0x1810>
   12ae4:	subs	r1, r1, #1
   12ae8:	add	r9, r9, #8
   12aec:	adc	r3, ip, #0
   12af0:	cmp	r1, #0
   12af4:	addne	r0, r0, #5
   12af8:	cmpne	r3, #0
   12afc:	bne	12928 <__assert_fail@plt+0x182c>
   12b00:	add	r2, r2, r9
   12b04:	b	12904 <__assert_fail@plt+0x1808>
   12b08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b0c:	add	fp, sp, #24
   12b10:	mov	r8, r0
   12b14:	movw	r0, #26215	; 0x6667
   12b18:	mov	r4, r1
   12b1c:	mov	r6, r2
   12b20:	movt	r0, #26214	; 0x6666
   12b24:	smmul	r0, r1, r0
   12b28:	asr	r1, r0, #1
   12b2c:	add	r0, r1, r0, lsr #31
   12b30:	add	r1, r0, r0, lsl #2
   12b34:	subs	r1, r4, r1
   12b38:	addne	r0, r0, #1
   12b3c:	cmn	r0, #1
   12b40:	ble	12b50 <__assert_fail@plt+0x1a54>
   12b44:	cmn	r0, #-268435455	; 0xf0000001
   12b48:	ble	12b64 <__assert_fail@plt+0x1a68>
   12b4c:	b	12ba0 <__assert_fail@plt+0x1aa4>
   12b50:	beq	12b64 <__assert_fail@plt+0x1a68>
   12b54:	mov	r1, #-2147483648	; 0x80000000
   12b58:	sdiv	r1, r1, r0
   12b5c:	cmp	r1, #8
   12b60:	blt	12ba0 <__assert_fail@plt+0x1aa4>
   12b64:	cmn	r4, #1
   12b68:	ble	12ba0 <__assert_fail@plt+0x1aa4>
   12b6c:	lsl	r7, r0, #3
   12b70:	orr	r5, r7, #1
   12b74:	mov	r0, r5
   12b78:	bl	167a0 <__assert_fail@plt+0x56a4>
   12b7c:	cmp	r0, #0
   12b80:	str	r0, [r6]
   12b84:	beq	12bb0 <__assert_fail@plt+0x1ab4>
   12b88:	mov	r2, r0
   12b8c:	mov	r0, r8
   12b90:	mov	r1, r4
   12b94:	mov	r3, r5
   12b98:	bl	128e8 <__assert_fail@plt+0x17ec>
   12b9c:	b	12ba8 <__assert_fail@plt+0x1aac>
   12ba0:	mov	r7, #0
   12ba4:	str	r7, [r6]
   12ba8:	mov	r0, r7
   12bac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12bb0:	mov	r7, r5
   12bb4:	b	12ba8 <__assert_fail@plt+0x1aac>
   12bb8:	movw	r1, #31019	; 0x792b
   12bbc:	movt	r1, #1
   12bc0:	add	r0, r1, r0
   12bc4:	ldrsb	r1, [r0]
   12bc8:	mov	r0, #0
   12bcc:	cmn	r1, #1
   12bd0:	movwgt	r0, #1
   12bd4:	bx	lr
   12bd8:	mov	r1, #0
   12bdc:	str	r1, [r0]
   12be0:	bx	lr
   12be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be8:	add	fp, sp, #28
   12bec:	sub	sp, sp, #28
   12bf0:	mov	r6, r2
   12bf4:	mov	r2, r0
   12bf8:	ldr	r0, [fp, #8]
   12bfc:	str	r3, [sp, #24]
   12c00:	mov	r5, r1
   12c04:	mov	r8, #0
   12c08:	cmp	r2, #0
   12c0c:	ldr	r7, [r0]
   12c10:	mov	r0, #0
   12c14:	str	r7, [sp, #20]
   12c18:	beq	12c30 <__assert_fail@plt+0x1b34>
   12c1c:	clz	r0, r6
   12c20:	lsr	r8, r0, #5
   12c24:	ldr	r0, [r2]
   12c28:	cmp	r0, #0
   12c2c:	movwne	r0, #1
   12c30:	orr	r0, r0, r8
   12c34:	add	sl, sp, #24
   12c38:	add	r4, sp, #20
   12c3c:	str	r2, [sp, #16]
   12c40:	str	r0, [sp, #8]
   12c44:	add	r0, r2, #4
   12c48:	str	r0, [sp, #4]
   12c4c:	clz	r0, r2
   12c50:	lsr	r0, r0, #5
   12c54:	str	r0, [sp, #12]
   12c58:	ldr	r0, [sp, #8]
   12c5c:	cmp	r0, #0
   12c60:	bne	12c94 <__assert_fail@plt+0x1b98>
   12c64:	mov	r0, r5
   12c68:	mov	r1, r6
   12c6c:	mov	r2, sl
   12c70:	mov	r3, r4
   12c74:	bl	12e44 <__assert_fail@plt+0x1d48>
   12c78:	cmp	r0, #0
   12c7c:	beq	12c90 <__assert_fail@plt+0x1b94>
   12c80:	ldr	r7, [sp, #20]
   12c84:	add	r5, r5, #8
   12c88:	sub	r6, r6, #8
   12c8c:	b	12c64 <__assert_fail@plt+0x1b68>
   12c90:	ldr	r2, [sp, #16]
   12c94:	cmp	r6, #0
   12c98:	mov	r0, r6
   12c9c:	movwne	r0, #1
   12ca0:	orr	r0, r8, r0
   12ca4:	cmp	r0, #1
   12ca8:	bne	12e18 <__assert_fail@plt+0x1d1c>
   12cac:	cmp	r6, #0
   12cb0:	beq	12ccc <__assert_fail@plt+0x1bd0>
   12cb4:	ldrb	r0, [r5]
   12cb8:	ldr	r1, [sp, #12]
   12cbc:	subs	r0, r0, #10
   12cc0:	movwne	r0, #1
   12cc4:	orrs	r0, r0, r1
   12cc8:	beq	12d90 <__assert_fail@plt+0x1c94>
   12ccc:	ldr	r0, [sp, #20]
   12cd0:	ldr	r1, [sp, #24]
   12cd4:	add	r9, r5, r6
   12cd8:	cmp	r2, #0
   12cdc:	str	r7, [sp, #20]
   12ce0:	sub	r0, r0, r7
   12ce4:	add	r0, r1, r0
   12ce8:	str	r0, [sp, #24]
   12cec:	beq	12d9c <__assert_fail@plt+0x1ca0>
   12cf0:	ldr	r7, [r2]
   12cf4:	cmp	r7, #0
   12cf8:	beq	12d0c <__assert_fail@plt+0x1c10>
   12cfc:	cmp	r7, #8
   12d00:	bne	12d38 <__assert_fail@plt+0x1c3c>
   12d04:	mov	r0, #0
   12d08:	str	r0, [r2]
   12d0c:	sub	r0, r9, r5
   12d10:	mov	r7, #0
   12d14:	cmp	r0, #8
   12d18:	blt	12d38 <__assert_fail@plt+0x1c3c>
   12d1c:	mov	r0, r5
   12d20:	mov	r1, #10
   12d24:	mov	r2, #8
   12d28:	bl	11054 <memchr@plt>
   12d2c:	ldr	r2, [sp, #16]
   12d30:	cmp	r0, #0
   12d34:	beq	12e04 <__assert_fail@plt+0x1d08>
   12d38:	cmp	r6, #1
   12d3c:	blt	12da4 <__assert_fail@plt+0x1ca8>
   12d40:	mov	r6, r7
   12d44:	mov	r0, r5
   12d48:	ldrb	r1, [r5], #1
   12d4c:	cmp	r1, #10
   12d50:	bne	12d60 <__assert_fail@plt+0x1c64>
   12d54:	cmp	r5, r9
   12d58:	bcc	12d44 <__assert_fail@plt+0x1c48>
   12d5c:	b	12d88 <__assert_fail@plt+0x1c8c>
   12d60:	add	r7, r6, #1
   12d64:	mov	r3, r2
   12d68:	add	r5, r0, #1
   12d6c:	str	r7, [r3], r6
   12d70:	cmp	r5, r9
   12d74:	strb	r1, [r3, #4]
   12d78:	ldr	r6, [r2]
   12d7c:	bcs	12d88 <__assert_fail@plt+0x1c8c>
   12d80:	cmp	r6, #8
   12d84:	bne	12d44 <__assert_fail@plt+0x1c48>
   12d88:	add	r5, r0, #1
   12d8c:	b	12da8 <__assert_fail@plt+0x1cac>
   12d90:	sub	r6, r6, #1
   12d94:	add	r5, r5, #1
   12d98:	b	12dfc <__assert_fail@plt+0x1d00>
   12d9c:	mov	r0, r5
   12da0:	b	12dac <__assert_fail@plt+0x1cb0>
   12da4:	mov	r6, r7
   12da8:	ldr	r0, [sp, #4]
   12dac:	mov	r1, #0
   12db0:	cmp	r6, #0
   12db4:	beq	12e1c <__assert_fail@plt+0x1d20>
   12db8:	ldr	r3, [sp, #12]
   12dbc:	cmp	r6, #7
   12dc0:	mov	r2, #0
   12dc4:	movwgt	r2, #1
   12dc8:	orr	r2, r8, r2
   12dcc:	orr	r2, r2, r3
   12dd0:	cmp	r2, #1
   12dd4:	bne	12e1c <__assert_fail@plt+0x1d20>
   12dd8:	mov	r1, r6
   12ddc:	mov	r2, sl
   12de0:	mov	r3, r4
   12de4:	bl	12e44 <__assert_fail@plt+0x1d48>
   12de8:	cmp	r0, #0
   12dec:	mov	r1, r6
   12df0:	beq	12e1c <__assert_fail@plt+0x1d20>
   12df4:	ldr	r2, [sp, #16]
   12df8:	sub	r6, r9, r5
   12dfc:	ldr	r7, [sp, #20]
   12e00:	b	12c58 <__assert_fail@plt+0x1b5c>
   12e04:	add	r1, r5, #8
   12e08:	mov	r0, r5
   12e0c:	mov	r6, #8
   12e10:	mov	r5, r1
   12e14:	b	12dd8 <__assert_fail@plt+0x1cdc>
   12e18:	mov	r1, r6
   12e1c:	ldr	r0, [fp, #8]
   12e20:	ldr	r2, [sp, #20]
   12e24:	mov	r3, r0
   12e28:	ldr	r0, [r0]
   12e2c:	sub	r0, r0, r2
   12e30:	str	r0, [r3]
   12e34:	clz	r0, r1
   12e38:	lsr	r0, r0, #5
   12e3c:	sub	sp, fp, #28
   12e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e44:	push	{r4, r5, r6, sl, fp, lr}
   12e48:	add	fp, sp, #16
   12e4c:	mov	ip, #0
   12e50:	cmp	r1, #8
   12e54:	blt	13060 <__assert_fail@plt+0x1f64>
   12e58:	ldrb	r1, [r0]
   12e5c:	movw	lr, #31019	; 0x792b
   12e60:	movt	lr, #1
   12e64:	add	r1, lr, r1
   12e68:	ldrsb	r4, [r1]
   12e6c:	cmp	r4, #0
   12e70:	bmi	13060 <__assert_fail@plt+0x1f64>
   12e74:	ldrb	r1, [r0, #1]
   12e78:	add	r1, lr, r1
   12e7c:	ldrsb	r1, [r1]
   12e80:	cmp	r1, #0
   12e84:	bmi	13060 <__assert_fail@plt+0x1f64>
   12e88:	ldr	r5, [r3]
   12e8c:	ldr	ip, [r2]
   12e90:	cmp	r5, #0
   12e94:	beq	12eb8 <__assert_fail@plt+0x1dbc>
   12e98:	uxtb	r5, r1
   12e9c:	lsr	r5, r5, #2
   12ea0:	orr	r4, r5, r4, lsl #3
   12ea4:	strb	r4, [ip], #1
   12ea8:	ldr	r4, [r3]
   12eac:	sub	r5, r4, #1
   12eb0:	str	r5, [r3]
   12eb4:	b	12ebc <__assert_fail@plt+0x1dc0>
   12eb8:	mov	r5, #0
   12ebc:	ldrb	r4, [r0, #2]
   12ec0:	cmp	r4, #61	; 0x3d
   12ec4:	bne	12ee4 <__assert_fail@plt+0x1de8>
   12ec8:	ldrb	r1, [r0, #3]
   12ecc:	cmp	r1, #61	; 0x3d
   12ed0:	bne	13058 <__assert_fail@plt+0x1f5c>
   12ed4:	ldrb	r1, [r0, #4]
   12ed8:	cmp	r1, #61	; 0x3d
   12edc:	beq	12f44 <__assert_fail@plt+0x1e48>
   12ee0:	b	13058 <__assert_fail@plt+0x1f5c>
   12ee4:	add	r4, lr, r4
   12ee8:	ldrsb	r6, [r4]
   12eec:	cmp	r6, #0
   12ef0:	bmi	13058 <__assert_fail@plt+0x1f5c>
   12ef4:	ldrb	r4, [r0, #3]
   12ef8:	add	r4, lr, r4
   12efc:	ldrsb	r4, [r4]
   12f00:	cmn	r4, #1
   12f04:	ble	13058 <__assert_fail@plt+0x1f5c>
   12f08:	cmp	r5, #0
   12f0c:	beq	12f34 <__assert_fail@plt+0x1e38>
   12f10:	lsl	r5, r6, #1
   12f14:	orr	r1, r5, r1, lsl #6
   12f18:	uxtb	r5, r4
   12f1c:	orr	r1, r1, r5, lsr #4
   12f20:	strb	r1, [ip], #1
   12f24:	ldr	r1, [r3]
   12f28:	sub	r5, r1, #1
   12f2c:	str	r5, [r3]
   12f30:	b	12f38 <__assert_fail@plt+0x1e3c>
   12f34:	mov	r5, #0
   12f38:	ldrb	r1, [r0, #4]
   12f3c:	cmp	r1, #61	; 0x3d
   12f40:	bne	12f54 <__assert_fail@plt+0x1e58>
   12f44:	ldrb	r1, [r0, #5]
   12f48:	cmp	r1, #61	; 0x3d
   12f4c:	beq	12f9c <__assert_fail@plt+0x1ea0>
   12f50:	b	13058 <__assert_fail@plt+0x1f5c>
   12f54:	add	r1, lr, r1
   12f58:	ldrsb	r1, [r1]
   12f5c:	cmn	r1, #1
   12f60:	ble	13058 <__assert_fail@plt+0x1f5c>
   12f64:	cmp	r5, #0
   12f68:	beq	12f8c <__assert_fail@plt+0x1e90>
   12f6c:	uxtb	r5, r1
   12f70:	lsr	r5, r5, #1
   12f74:	orr	r4, r5, r4, lsl #4
   12f78:	strb	r4, [ip], #1
   12f7c:	ldr	r4, [r3]
   12f80:	sub	r4, r4, #1
   12f84:	str	r4, [r3]
   12f88:	b	12f90 <__assert_fail@plt+0x1e94>
   12f8c:	mov	r4, #0
   12f90:	ldrb	r5, [r0, #5]
   12f94:	cmp	r5, #61	; 0x3d
   12f98:	bne	12fc0 <__assert_fail@plt+0x1ec4>
   12f9c:	ldrb	r1, [r0, #6]
   12fa0:	cmp	r1, #61	; 0x3d
   12fa4:	bne	13058 <__assert_fail@plt+0x1f5c>
   12fa8:	ldrb	r0, [r0, #7]
   12fac:	cmp	r0, #61	; 0x3d
   12fb0:	bne	13058 <__assert_fail@plt+0x1f5c>
   12fb4:	str	ip, [r2]
   12fb8:	mov	ip, #1
   12fbc:	b	13060 <__assert_fail@plt+0x1f64>
   12fc0:	add	r5, lr, r5
   12fc4:	ldrsb	r5, [r5]
   12fc8:	cmp	r5, #0
   12fcc:	bmi	13058 <__assert_fail@plt+0x1f5c>
   12fd0:	ldrb	r6, [r0, #6]
   12fd4:	add	r6, lr, r6
   12fd8:	ldrsb	r6, [r6]
   12fdc:	cmn	r6, #1
   12fe0:	ble	13058 <__assert_fail@plt+0x1f5c>
   12fe4:	cmp	r4, #0
   12fe8:	beq	13010 <__assert_fail@plt+0x1f14>
   12fec:	uxtb	r4, r6
   12ff0:	lsr	r4, r4, #3
   12ff4:	orr	r4, r4, r5, lsl #2
   12ff8:	orr	r1, r4, r1, lsl #7
   12ffc:	strb	r1, [ip], #1
   13000:	ldr	r1, [r3]
   13004:	sub	r1, r1, #1
   13008:	str	r1, [r3]
   1300c:	b	13014 <__assert_fail@plt+0x1f18>
   13010:	mov	r1, #0
   13014:	ldrb	r4, [r0, #7]
   13018:	cmp	r4, #61	; 0x3d
   1301c:	beq	12fb4 <__assert_fail@plt+0x1eb8>
   13020:	add	r4, lr, r4
   13024:	ldrsb	r4, [r4]
   13028:	cmn	r4, #1
   1302c:	ble	13058 <__assert_fail@plt+0x1f5c>
   13030:	cmp	r1, #0
   13034:	beq	12fb4 <__assert_fail@plt+0x1eb8>
   13038:	ldrb	r0, [r0, #6]
   1303c:	ldrb	r0, [lr, r0]
   13040:	orr	r0, r4, r0, lsl #5
   13044:	strb	r0, [ip], #1
   13048:	ldr	r0, [r3]
   1304c:	sub	r0, r0, #1
   13050:	str	r0, [r3]
   13054:	b	12fb4 <__assert_fail@plt+0x1eb8>
   13058:	str	ip, [r2]
   1305c:	mov	ip, #0
   13060:	mov	r0, ip
   13064:	pop	{r4, r5, r6, sl, fp, pc}
   13068:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1306c:	add	fp, sp, #24
   13070:	sub	sp, sp, #8
   13074:	mov	r7, r0
   13078:	asr	r0, r2, #3
   1307c:	mov	r4, r3
   13080:	mov	r6, r2
   13084:	mov	r8, r1
   13088:	add	r0, r0, r0, lsl #2
   1308c:	add	r0, r0, #5
   13090:	str	r0, [sp, #4]
   13094:	bl	167a0 <__assert_fail@plt+0x56a4>
   13098:	mov	r5, #1
   1309c:	cmp	r0, #0
   130a0:	str	r0, [r4]
   130a4:	beq	130f0 <__assert_fail@plt+0x1ff4>
   130a8:	mov	r3, r0
   130ac:	add	r0, sp, #4
   130b0:	mov	r1, r8
   130b4:	mov	r2, r6
   130b8:	str	r0, [sp]
   130bc:	mov	r0, r7
   130c0:	bl	12be4 <__assert_fail@plt+0x1ae8>
   130c4:	cmp	r0, #0
   130c8:	beq	130e0 <__assert_fail@plt+0x1fe4>
   130cc:	ldr	r0, [fp, #8]
   130d0:	cmp	r0, #0
   130d4:	ldrne	r1, [sp, #4]
   130d8:	strne	r1, [r0]
   130dc:	b	130f0 <__assert_fail@plt+0x1ff4>
   130e0:	ldr	r0, [r4]
   130e4:	bl	13bc8 <__assert_fail@plt+0x2acc>
   130e8:	mov	r5, #0
   130ec:	str	r5, [r4]
   130f0:	mov	r0, r5
   130f4:	sub	sp, fp, #24
   130f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13100:	add	fp, sp, #28
   13104:	tst	r3, #3
   13108:	bne	13180 <__assert_fail@plt+0x2084>
   1310c:	asr	r7, r3, #2
   13110:	add	r7, r7, r7, lsl #1
   13114:	cmp	r7, r1
   13118:	bne	13180 <__assert_fail@plt+0x2084>
   1311c:	cmp	r1, #0
   13120:	beq	1319c <__assert_fail@plt+0x20a0>
   13124:	movw	r3, #31275	; 0x7a2b
   13128:	movt	r3, #1
   1312c:	ldrb	r7, [r0]
   13130:	subs	r1, r1, #3
   13134:	ldrb	r6, [r3, r7, lsr #2]
   13138:	strb	r6, [r2]
   1313c:	ldrb	r6, [r0, #1]
   13140:	lsr	r5, r6, #4
   13144:	bfi	r5, r7, #4, #2
   13148:	ldrb	r7, [r3, r5]
   1314c:	strb	r7, [r2, #1]
   13150:	ldrb	r7, [r0, #2]
   13154:	add	r0, r0, #3
   13158:	and	r5, r7, #63	; 0x3f
   1315c:	lsr	r7, r7, #6
   13160:	bfi	r7, r6, #2, #4
   13164:	ldrb	r5, [r3, r5]
   13168:	ldrb	r7, [r3, r7]
   1316c:	strb	r5, [r2, #3]
   13170:	strb	r7, [r2, #2]
   13174:	add	r2, r2, #4
   13178:	bne	1312c <__assert_fail@plt+0x2030>
   1317c:	b	1319c <__assert_fail@plt+0x20a0>
   13180:	cmp	r1, #0
   13184:	cmpne	r3, #0
   13188:	bne	131a0 <__assert_fail@plt+0x20a4>
   1318c:	cmp	r3, #0
   13190:	beq	1319c <__assert_fail@plt+0x20a0>
   13194:	mov	r0, #0
   13198:	strb	r0, [r2]
   1319c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a0:	movw	r6, #31275	; 0x7a2b
   131a4:	add	r0, r0, #1
   131a8:	sub	ip, r3, #3
   131ac:	sub	lr, r3, #2
   131b0:	sub	sl, r3, #1
   131b4:	sub	r9, r3, #4
   131b8:	mov	r8, #0
   131bc:	mov	r7, #0
   131c0:	movt	r6, #1
   131c4:	ldrb	r3, [r0, #-1]
   131c8:	mov	r5, r2
   131cc:	cmp	sl, r7
   131d0:	ldrb	r3, [r6, r3, lsr #2]
   131d4:	strb	r3, [r5, r7]!
   131d8:	beq	1319c <__assert_fail@plt+0x20a0>
   131dc:	cmp	r1, #1
   131e0:	ldrb	r3, [r0, #-1]
   131e4:	mov	r4, #0
   131e8:	ldrbne	r4, [r0]
   131ec:	lsl	r3, r3, #4
   131f0:	lsrne	r4, r4, #4
   131f4:	cmp	lr, r7
   131f8:	add	r3, r4, r3
   131fc:	and	r3, r3, #63	; 0x3f
   13200:	ldrb	r3, [r6, r3]
   13204:	strb	r3, [r5, #1]
   13208:	beq	1319c <__assert_fail@plt+0x20a0>
   1320c:	cmp	r1, #1
   13210:	beq	13230 <__assert_fail@plt+0x2134>
   13214:	ldrb	r3, [r0]
   13218:	subs	r1, r1, #2
   1321c:	lsl	r3, r3, #2
   13220:	beq	1323c <__assert_fail@plt+0x2140>
   13224:	ldrb	r4, [r0, #1]
   13228:	lsr	r4, r4, #6
   1322c:	b	13240 <__assert_fail@plt+0x2144>
   13230:	mov	r3, #61	; 0x3d
   13234:	mov	r1, #0
   13238:	b	1324c <__assert_fail@plt+0x2150>
   1323c:	mov	r4, #0
   13240:	add	r3, r4, r3
   13244:	and	r3, r3, #63	; 0x3f
   13248:	ldrb	r3, [r6, r3]
   1324c:	cmp	ip, r7
   13250:	strb	r3, [r5, #2]
   13254:	beq	1319c <__assert_fail@plt+0x20a0>
   13258:	cmp	r1, #0
   1325c:	beq	13270 <__assert_fail@plt+0x2174>
   13260:	ldrb	r3, [r0, #1]
   13264:	and	r3, r3, #63	; 0x3f
   13268:	ldrb	r3, [r6, r3]
   1326c:	b	13274 <__assert_fail@plt+0x2178>
   13270:	mov	r3, #61	; 0x3d
   13274:	cmp	r9, r7
   13278:	strb	r3, [r5, #3]
   1327c:	beq	1319c <__assert_fail@plt+0x20a0>
   13280:	subs	r1, r1, #1
   13284:	add	r7, r7, #4
   13288:	adc	r3, r8, #0
   1328c:	cmp	r1, #0
   13290:	addne	r0, r0, #3
   13294:	cmpne	r3, #0
   13298:	bne	131c4 <__assert_fail@plt+0x20c8>
   1329c:	add	r2, r2, r7
   132a0:	b	13194 <__assert_fail@plt+0x2098>
   132a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   132a8:	add	fp, sp, #24
   132ac:	mov	r8, r0
   132b0:	movw	r0, #21846	; 0x5556
   132b4:	mov	r4, r1
   132b8:	mov	r6, r2
   132bc:	movt	r0, #21845	; 0x5555
   132c0:	smmul	r0, r1, r0
   132c4:	add	r0, r0, r0, lsr #31
   132c8:	add	r1, r0, r0, lsl #1
   132cc:	subs	r1, r4, r1
   132d0:	addne	r0, r0, #1
   132d4:	cmn	r0, #1
   132d8:	ble	132e8 <__assert_fail@plt+0x21ec>
   132dc:	cmn	r0, #-536870911	; 0xe0000001
   132e0:	ble	132fc <__assert_fail@plt+0x2200>
   132e4:	b	13338 <__assert_fail@plt+0x223c>
   132e8:	beq	132fc <__assert_fail@plt+0x2200>
   132ec:	mov	r1, #-2147483648	; 0x80000000
   132f0:	sdiv	r1, r1, r0
   132f4:	cmp	r1, #4
   132f8:	blt	13338 <__assert_fail@plt+0x223c>
   132fc:	cmn	r4, #1
   13300:	ble	13338 <__assert_fail@plt+0x223c>
   13304:	lsl	r7, r0, #2
   13308:	orr	r5, r7, #1
   1330c:	mov	r0, r5
   13310:	bl	167a0 <__assert_fail@plt+0x56a4>
   13314:	cmp	r0, #0
   13318:	str	r0, [r6]
   1331c:	beq	13348 <__assert_fail@plt+0x224c>
   13320:	mov	r2, r0
   13324:	mov	r0, r8
   13328:	mov	r1, r4
   1332c:	mov	r3, r5
   13330:	bl	130fc <__assert_fail@plt+0x2000>
   13334:	b	13340 <__assert_fail@plt+0x2244>
   13338:	mov	r7, #0
   1333c:	str	r7, [r6]
   13340:	mov	r0, r7
   13344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13348:	mov	r7, r5
   1334c:	b	13340 <__assert_fail@plt+0x2244>
   13350:	movw	r1, #31339	; 0x7a6b
   13354:	movt	r1, #1
   13358:	add	r0, r1, r0
   1335c:	ldrsb	r1, [r0]
   13360:	mov	r0, #0
   13364:	cmn	r1, #1
   13368:	movwgt	r0, #1
   1336c:	bx	lr
   13370:	mov	r1, #0
   13374:	str	r1, [r0]
   13378:	bx	lr
   1337c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13380:	add	fp, sp, #28
   13384:	sub	sp, sp, #28
   13388:	mov	r6, r2
   1338c:	mov	r2, r0
   13390:	ldr	r0, [fp, #8]
   13394:	str	r3, [sp, #24]
   13398:	mov	r5, r1
   1339c:	mov	r8, #0
   133a0:	cmp	r2, #0
   133a4:	ldr	r7, [r0]
   133a8:	mov	r0, #0
   133ac:	str	r7, [sp, #20]
   133b0:	beq	133c8 <__assert_fail@plt+0x22cc>
   133b4:	clz	r0, r6
   133b8:	lsr	r8, r0, #5
   133bc:	ldr	r0, [r2]
   133c0:	cmp	r0, #0
   133c4:	movwne	r0, #1
   133c8:	orr	r0, r0, r8
   133cc:	add	sl, sp, #24
   133d0:	add	r4, sp, #20
   133d4:	str	r2, [sp, #16]
   133d8:	str	r0, [sp, #8]
   133dc:	add	r0, r2, #4
   133e0:	str	r0, [sp, #4]
   133e4:	clz	r0, r2
   133e8:	lsr	r0, r0, #5
   133ec:	str	r0, [sp, #12]
   133f0:	ldr	r0, [sp, #8]
   133f4:	cmp	r0, #0
   133f8:	bne	1342c <__assert_fail@plt+0x2330>
   133fc:	mov	r0, r5
   13400:	mov	r1, r6
   13404:	mov	r2, sl
   13408:	mov	r3, r4
   1340c:	bl	135dc <__assert_fail@plt+0x24e0>
   13410:	cmp	r0, #0
   13414:	beq	13428 <__assert_fail@plt+0x232c>
   13418:	ldr	r7, [sp, #20]
   1341c:	add	r5, r5, #4
   13420:	sub	r6, r6, #4
   13424:	b	133fc <__assert_fail@plt+0x2300>
   13428:	ldr	r2, [sp, #16]
   1342c:	cmp	r6, #0
   13430:	mov	r0, r6
   13434:	movwne	r0, #1
   13438:	orr	r0, r8, r0
   1343c:	cmp	r0, #1
   13440:	bne	135b0 <__assert_fail@plt+0x24b4>
   13444:	cmp	r6, #0
   13448:	beq	13464 <__assert_fail@plt+0x2368>
   1344c:	ldrb	r0, [r5]
   13450:	ldr	r1, [sp, #12]
   13454:	subs	r0, r0, #10
   13458:	movwne	r0, #1
   1345c:	orrs	r0, r0, r1
   13460:	beq	13528 <__assert_fail@plt+0x242c>
   13464:	ldr	r0, [sp, #20]
   13468:	ldr	r1, [sp, #24]
   1346c:	add	r9, r5, r6
   13470:	cmp	r2, #0
   13474:	str	r7, [sp, #20]
   13478:	sub	r0, r0, r7
   1347c:	add	r0, r1, r0
   13480:	str	r0, [sp, #24]
   13484:	beq	13534 <__assert_fail@plt+0x2438>
   13488:	ldr	r7, [r2]
   1348c:	cmp	r7, #0
   13490:	beq	134a4 <__assert_fail@plt+0x23a8>
   13494:	cmp	r7, #4
   13498:	bne	134d0 <__assert_fail@plt+0x23d4>
   1349c:	mov	r0, #0
   134a0:	str	r0, [r2]
   134a4:	sub	r0, r9, r5
   134a8:	mov	r7, #0
   134ac:	cmp	r0, #4
   134b0:	blt	134d0 <__assert_fail@plt+0x23d4>
   134b4:	mov	r0, r5
   134b8:	mov	r1, #10
   134bc:	mov	r2, #4
   134c0:	bl	11054 <memchr@plt>
   134c4:	ldr	r2, [sp, #16]
   134c8:	cmp	r0, #0
   134cc:	beq	1359c <__assert_fail@plt+0x24a0>
   134d0:	cmp	r6, #1
   134d4:	blt	1353c <__assert_fail@plt+0x2440>
   134d8:	mov	r6, r7
   134dc:	mov	r0, r5
   134e0:	ldrb	r1, [r5], #1
   134e4:	cmp	r1, #10
   134e8:	bne	134f8 <__assert_fail@plt+0x23fc>
   134ec:	cmp	r5, r9
   134f0:	bcc	134dc <__assert_fail@plt+0x23e0>
   134f4:	b	13520 <__assert_fail@plt+0x2424>
   134f8:	add	r7, r6, #1
   134fc:	mov	r3, r2
   13500:	add	r5, r0, #1
   13504:	str	r7, [r3], r6
   13508:	cmp	r5, r9
   1350c:	strb	r1, [r3, #4]
   13510:	ldr	r6, [r2]
   13514:	bcs	13520 <__assert_fail@plt+0x2424>
   13518:	cmp	r6, #4
   1351c:	bne	134dc <__assert_fail@plt+0x23e0>
   13520:	add	r5, r0, #1
   13524:	b	13540 <__assert_fail@plt+0x2444>
   13528:	sub	r6, r6, #1
   1352c:	add	r5, r5, #1
   13530:	b	13594 <__assert_fail@plt+0x2498>
   13534:	mov	r0, r5
   13538:	b	13544 <__assert_fail@plt+0x2448>
   1353c:	mov	r6, r7
   13540:	ldr	r0, [sp, #4]
   13544:	mov	r1, #0
   13548:	cmp	r6, #0
   1354c:	beq	135b4 <__assert_fail@plt+0x24b8>
   13550:	ldr	r3, [sp, #12]
   13554:	cmp	r6, #3
   13558:	mov	r2, #0
   1355c:	movwgt	r2, #1
   13560:	orr	r2, r8, r2
   13564:	orr	r2, r2, r3
   13568:	cmp	r2, #1
   1356c:	bne	135b4 <__assert_fail@plt+0x24b8>
   13570:	mov	r1, r6
   13574:	mov	r2, sl
   13578:	mov	r3, r4
   1357c:	bl	135dc <__assert_fail@plt+0x24e0>
   13580:	cmp	r0, #0
   13584:	mov	r1, r6
   13588:	beq	135b4 <__assert_fail@plt+0x24b8>
   1358c:	ldr	r2, [sp, #16]
   13590:	sub	r6, r9, r5
   13594:	ldr	r7, [sp, #20]
   13598:	b	133f0 <__assert_fail@plt+0x22f4>
   1359c:	add	r1, r5, #4
   135a0:	mov	r0, r5
   135a4:	mov	r6, #4
   135a8:	mov	r5, r1
   135ac:	b	13570 <__assert_fail@plt+0x2474>
   135b0:	mov	r1, r6
   135b4:	ldr	r0, [fp, #8]
   135b8:	ldr	r2, [sp, #20]
   135bc:	mov	r3, r0
   135c0:	ldr	r0, [r0]
   135c4:	sub	r0, r0, r2
   135c8:	str	r0, [r3]
   135cc:	clz	r0, r1
   135d0:	lsr	r0, r0, #5
   135d4:	sub	sp, fp, #28
   135d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135dc:	push	{r4, r5, r6, sl, fp, lr}
   135e0:	add	fp, sp, #16
   135e4:	mov	ip, #0
   135e8:	cmp	r1, #2
   135ec:	blt	13664 <__assert_fail@plt+0x2568>
   135f0:	ldrb	r4, [r0]
   135f4:	movw	lr, #31339	; 0x7a6b
   135f8:	movt	lr, #1
   135fc:	add	r4, lr, r4
   13600:	ldrsb	r5, [r4]
   13604:	cmp	r5, #0
   13608:	bmi	13664 <__assert_fail@plt+0x2568>
   1360c:	ldrb	r4, [r0, #1]
   13610:	add	r4, lr, r4
   13614:	ldrsb	r4, [r4]
   13618:	cmp	r4, #0
   1361c:	bmi	13664 <__assert_fail@plt+0x2568>
   13620:	ldr	r6, [r3]
   13624:	ldr	ip, [r2]
   13628:	cmp	r6, #0
   1362c:	beq	13650 <__assert_fail@plt+0x2554>
   13630:	uxtb	r6, r4
   13634:	lsr	r6, r6, #4
   13638:	orr	r5, r6, r5, lsl #2
   1363c:	strb	r5, [ip], #1
   13640:	ldr	r5, [r3]
   13644:	sub	r6, r5, #1
   13648:	str	r6, [r3]
   1364c:	b	13654 <__assert_fail@plt+0x2558>
   13650:	mov	r6, #0
   13654:	cmp	r1, #2
   13658:	bne	1366c <__assert_fail@plt+0x2570>
   1365c:	str	ip, [r2]
   13660:	mov	ip, #0
   13664:	mov	r0, ip
   13668:	pop	{r4, r5, r6, sl, fp, pc}
   1366c:	ldrb	r5, [r0, #2]
   13670:	cmp	r5, #61	; 0x3d
   13674:	bne	13690 <__assert_fail@plt+0x2594>
   13678:	cmp	r1, #4
   1367c:	bne	1365c <__assert_fail@plt+0x2560>
   13680:	ldrb	r0, [r0, #3]
   13684:	cmp	r0, #61	; 0x3d
   13688:	bne	1365c <__assert_fail@plt+0x2560>
   1368c:	b	13718 <__assert_fail@plt+0x261c>
   13690:	add	r5, lr, r5
   13694:	ldrsb	r5, [r5]
   13698:	cmn	r5, #1
   1369c:	ble	1365c <__assert_fail@plt+0x2560>
   136a0:	cmp	r6, #0
   136a4:	beq	136c8 <__assert_fail@plt+0x25cc>
   136a8:	uxtb	r6, r5
   136ac:	lsr	r6, r6, #2
   136b0:	orr	r4, r6, r4, lsl #4
   136b4:	strb	r4, [ip], #1
   136b8:	ldr	r4, [r3]
   136bc:	sub	r4, r4, #1
   136c0:	str	r4, [r3]
   136c4:	b	136cc <__assert_fail@plt+0x25d0>
   136c8:	mov	r4, #0
   136cc:	cmp	r1, #3
   136d0:	beq	1365c <__assert_fail@plt+0x2560>
   136d4:	ldrb	r0, [r0, #3]
   136d8:	cmp	r0, #61	; 0x3d
   136dc:	bne	136ec <__assert_fail@plt+0x25f0>
   136e0:	cmp	r1, #4
   136e4:	bne	1365c <__assert_fail@plt+0x2560>
   136e8:	b	13718 <__assert_fail@plt+0x261c>
   136ec:	add	r0, lr, r0
   136f0:	ldrsb	r0, [r0]
   136f4:	cmn	r0, #1
   136f8:	ble	1365c <__assert_fail@plt+0x2560>
   136fc:	cmp	r4, #0
   13700:	beq	13718 <__assert_fail@plt+0x261c>
   13704:	orr	r0, r0, r5, lsl #6
   13708:	strb	r0, [ip], #1
   1370c:	ldr	r0, [r3]
   13710:	sub	r0, r0, #1
   13714:	str	r0, [r3]
   13718:	str	ip, [r2]
   1371c:	mov	ip, #1
   13720:	b	13664 <__assert_fail@plt+0x2568>
   13724:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13728:	add	fp, sp, #24
   1372c:	sub	sp, sp, #8
   13730:	mov	r7, r0
   13734:	asr	r0, r2, #2
   13738:	mov	r4, r3
   1373c:	mov	r6, r2
   13740:	mov	r8, r1
   13744:	add	r0, r0, r0, lsl #1
   13748:	add	r0, r0, #3
   1374c:	str	r0, [sp, #4]
   13750:	bl	167a0 <__assert_fail@plt+0x56a4>
   13754:	mov	r5, #1
   13758:	cmp	r0, #0
   1375c:	str	r0, [r4]
   13760:	beq	137ac <__assert_fail@plt+0x26b0>
   13764:	mov	r3, r0
   13768:	add	r0, sp, #4
   1376c:	mov	r1, r8
   13770:	mov	r2, r6
   13774:	str	r0, [sp]
   13778:	mov	r0, r7
   1377c:	bl	1337c <__assert_fail@plt+0x2280>
   13780:	cmp	r0, #0
   13784:	beq	1379c <__assert_fail@plt+0x26a0>
   13788:	ldr	r0, [fp, #8]
   1378c:	cmp	r0, #0
   13790:	ldrne	r1, [sp, #4]
   13794:	strne	r1, [r0]
   13798:	b	137ac <__assert_fail@plt+0x26b0>
   1379c:	ldr	r0, [r4]
   137a0:	bl	13bc8 <__assert_fail@plt+0x2acc>
   137a4:	mov	r5, #0
   137a8:	str	r5, [r4]
   137ac:	mov	r0, r5
   137b0:	sub	sp, fp, #24
   137b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137b8:	sub	r2, r0, #65	; 0x41
   137bc:	mov	r1, r0
   137c0:	mov	r0, #1
   137c4:	cmp	r2, #26
   137c8:	subcs	r2, r1, #97	; 0x61
   137cc:	cmpcs	r2, #26
   137d0:	bcs	137d8 <__assert_fail@plt+0x26dc>
   137d4:	bx	lr
   137d8:	sub	r1, r1, #48	; 0x30
   137dc:	cmp	r1, #10
   137e0:	movcs	r0, #0
   137e4:	bx	lr
   137e8:	sub	r2, r0, #65	; 0x41
   137ec:	mov	r1, r0
   137f0:	mov	r0, #1
   137f4:	cmp	r2, #26
   137f8:	subcs	r1, r1, #97	; 0x61
   137fc:	cmpcs	r1, #26
   13800:	movcs	r0, #0
   13804:	bx	lr
   13808:	cmp	r0, #128	; 0x80
   1380c:	mov	r1, #0
   13810:	movwcc	r1, #1
   13814:	mov	r0, r1
   13818:	bx	lr
   1381c:	sub	r1, r0, #9
   13820:	sub	r0, r0, #32
   13824:	clz	r1, r1
   13828:	clz	r0, r0
   1382c:	lsr	r1, r1, #5
   13830:	lsr	r0, r0, #5
   13834:	orr	r0, r0, r1
   13838:	bx	lr
   1383c:	mov	r1, r0
   13840:	mov	r0, #1
   13844:	cmp	r1, #32
   13848:	bxcc	lr
   1384c:	cmp	r1, #127	; 0x7f
   13850:	movne	r0, #0
   13854:	bx	lr
   13858:	sub	r1, r0, #48	; 0x30
   1385c:	mov	r0, #0
   13860:	cmp	r1, #10
   13864:	movwcc	r0, #1
   13868:	bx	lr
   1386c:	sub	r1, r0, #33	; 0x21
   13870:	mov	r0, #0
   13874:	cmp	r1, #94	; 0x5e
   13878:	movwcc	r0, #1
   1387c:	bx	lr
   13880:	sub	r1, r0, #97	; 0x61
   13884:	mov	r0, #0
   13888:	cmp	r1, #26
   1388c:	movwcc	r0, #1
   13890:	bx	lr
   13894:	sub	r1, r0, #32
   13898:	mov	r0, #0
   1389c:	cmp	r1, #95	; 0x5f
   138a0:	movwcc	r0, #1
   138a4:	bx	lr
   138a8:	sub	r2, r0, #33	; 0x21
   138ac:	mov	r1, r0
   138b0:	mov	r0, #1
   138b4:	cmp	r2, #31
   138b8:	bhi	138d0 <__assert_fail@plt+0x27d4>
   138bc:	movw	r3, #32767	; 0x7fff
   138c0:	mov	ip, #1
   138c4:	movt	r3, #65024	; 0xfe00
   138c8:	tst	r3, ip, lsl r2
   138cc:	bxne	lr
   138d0:	sub	r2, r1, #91	; 0x5b
   138d4:	cmp	r2, #6
   138d8:	subcs	r1, r1, #123	; 0x7b
   138dc:	cmpcs	r1, #4
   138e0:	bcs	138e8 <__assert_fail@plt+0x27ec>
   138e4:	bx	lr
   138e8:	mov	r0, #0
   138ec:	bx	lr
   138f0:	sub	r0, r0, #9
   138f4:	cmp	r0, #23
   138f8:	movhi	r0, #0
   138fc:	bxhi	lr
   13900:	movw	r1, #31
   13904:	bic	r0, r0, #-16777216	; 0xff000000
   13908:	mov	r2, #1
   1390c:	movt	r1, #128	; 0x80
   13910:	and	r0, r2, r1, lsr r0
   13914:	bx	lr
   13918:	sub	r1, r0, #65	; 0x41
   1391c:	mov	r0, #0
   13920:	cmp	r1, #26
   13924:	movwcc	r0, #1
   13928:	bx	lr
   1392c:	sub	r2, r0, #48	; 0x30
   13930:	mov	r1, r0
   13934:	mov	r0, #1
   13938:	cmp	r2, #22
   1393c:	bhi	13954 <__assert_fail@plt+0x2858>
   13940:	movw	r3, #1023	; 0x3ff
   13944:	mov	ip, #1
   13948:	movt	r3, #126	; 0x7e
   1394c:	tst	r3, ip, lsl r2
   13950:	bxne	lr
   13954:	sub	r1, r1, #97	; 0x61
   13958:	cmp	r1, #6
   1395c:	movcs	r0, #0
   13960:	bxcs	lr
   13964:	bx	lr
   13968:	sub	r1, r0, #65	; 0x41
   1396c:	cmp	r1, #26
   13970:	addcc	r0, r0, #32
   13974:	bx	lr
   13978:	sub	r1, r0, #97	; 0x61
   1397c:	cmp	r1, #26
   13980:	subcc	r0, r0, #32
   13984:	bx	lr
   13988:	movw	r1, #37236	; 0x9174
   1398c:	movt	r1, #2
   13990:	str	r0, [r1]
   13994:	bx	lr
   13998:	movw	r1, #37240	; 0x9178
   1399c:	movt	r1, #2
   139a0:	strb	r0, [r1]
   139a4:	bx	lr
   139a8:	push	{r4, r5, r6, sl, fp, lr}
   139ac:	add	fp, sp, #16
   139b0:	sub	sp, sp, #8
   139b4:	movw	r0, #37204	; 0x9154
   139b8:	movt	r0, #2
   139bc:	ldr	r0, [r0]
   139c0:	bl	16820 <__assert_fail@plt+0x5724>
   139c4:	cmp	r0, #0
   139c8:	beq	139f0 <__assert_fail@plt+0x28f4>
   139cc:	movw	r0, #37240	; 0x9178
   139d0:	movt	r0, #2
   139d4:	ldrb	r0, [r0]
   139d8:	cmp	r0, #0
   139dc:	beq	13a10 <__assert_fail@plt+0x2914>
   139e0:	bl	1100c <__errno_location@plt>
   139e4:	ldr	r0, [r0]
   139e8:	cmp	r0, #32
   139ec:	bne	13a10 <__assert_fail@plt+0x2914>
   139f0:	movw	r0, #37192	; 0x9148
   139f4:	movt	r0, #2
   139f8:	ldr	r0, [r0]
   139fc:	bl	16820 <__assert_fail@plt+0x5724>
   13a00:	cmp	r0, #0
   13a04:	subeq	sp, fp, #16
   13a08:	popeq	{r4, r5, r6, sl, fp, pc}
   13a0c:	b	13a80 <__assert_fail@plt+0x2984>
   13a10:	movw	r1, #30204	; 0x75fc
   13a14:	mov	r0, #0
   13a18:	mov	r2, #5
   13a1c:	movt	r1, #1
   13a20:	bl	10f1c <dcgettext@plt>
   13a24:	mov	r4, r0
   13a28:	movw	r0, #37236	; 0x9174
   13a2c:	movt	r0, #2
   13a30:	ldr	r6, [r0]
   13a34:	bl	1100c <__errno_location@plt>
   13a38:	ldr	r5, [r0]
   13a3c:	cmp	r6, #0
   13a40:	bne	13a5c <__assert_fail@plt+0x2960>
   13a44:	movw	r2, #29348	; 0x72a4
   13a48:	mov	r0, #0
   13a4c:	mov	r1, r5
   13a50:	mov	r3, r4
   13a54:	movt	r2, #1
   13a58:	b	13a7c <__assert_fail@plt+0x2980>
   13a5c:	mov	r0, r6
   13a60:	bl	15440 <__assert_fail@plt+0x4344>
   13a64:	movw	r2, #29344	; 0x72a0
   13a68:	mov	r3, r0
   13a6c:	str	r4, [sp]
   13a70:	mov	r0, #0
   13a74:	mov	r1, r5
   13a78:	movt	r2, #1
   13a7c:	bl	10f88 <error@plt>
   13a80:	movw	r0, #37108	; 0x90f4
   13a84:	movt	r0, #2
   13a88:	ldr	r0, [r0]
   13a8c:	bl	10ee0 <_exit@plt>
   13a90:	b	10eb0 <posix_fadvise64@plt>
   13a94:	cmp	r0, #0
   13a98:	bxeq	lr
   13a9c:	push	{r4, sl, fp, lr}
   13aa0:	add	fp, sp, #8
   13aa4:	sub	sp, sp, #16
   13aa8:	mov	r4, r1
   13aac:	bl	1103c <fileno@plt>
   13ab0:	mov	r1, #0
   13ab4:	mov	r2, #0
   13ab8:	mov	r3, #0
   13abc:	str	r1, [sp]
   13ac0:	stmib	sp, {r1, r4}
   13ac4:	bl	10eb0 <posix_fadvise64@plt>
   13ac8:	sub	sp, fp, #8
   13acc:	pop	{r4, sl, fp, pc}
   13ad0:	push	{r4, r5, r6, sl, fp, lr}
   13ad4:	add	fp, sp, #16
   13ad8:	sub	sp, sp, #8
   13adc:	mov	r4, r0
   13ae0:	bl	1103c <fileno@plt>
   13ae4:	cmn	r0, #1
   13ae8:	ble	13b5c <__assert_fail@plt+0x2a60>
   13aec:	mov	r0, r4
   13af0:	bl	10fac <__freading@plt>
   13af4:	cmp	r0, #0
   13af8:	beq	13b24 <__assert_fail@plt+0x2a28>
   13afc:	mov	r0, r4
   13b00:	bl	1103c <fileno@plt>
   13b04:	mov	r1, #1
   13b08:	mov	r2, #0
   13b0c:	mov	r3, #0
   13b10:	str	r1, [sp]
   13b14:	bl	10f4c <lseek64@plt>
   13b18:	and	r0, r0, r1
   13b1c:	cmn	r0, #1
   13b20:	beq	13b5c <__assert_fail@plt+0x2a60>
   13b24:	mov	r0, r4
   13b28:	bl	13b6c <__assert_fail@plt+0x2a70>
   13b2c:	cmp	r0, #0
   13b30:	beq	13b5c <__assert_fail@plt+0x2a60>
   13b34:	bl	1100c <__errno_location@plt>
   13b38:	ldr	r6, [r0]
   13b3c:	mov	r5, r0
   13b40:	mov	r0, r4
   13b44:	bl	1106c <fclose@plt>
   13b48:	cmp	r6, #0
   13b4c:	strne	r6, [r5]
   13b50:	mvnne	r0, #0
   13b54:	sub	sp, fp, #16
   13b58:	pop	{r4, r5, r6, sl, fp, pc}
   13b5c:	mov	r0, r4
   13b60:	sub	sp, fp, #16
   13b64:	pop	{r4, r5, r6, sl, fp, lr}
   13b68:	b	1106c <fclose@plt>
   13b6c:	push	{r4, sl, fp, lr}
   13b70:	add	fp, sp, #8
   13b74:	sub	sp, sp, #8
   13b78:	mov	r4, r0
   13b7c:	cmp	r0, #0
   13b80:	beq	13bb8 <__assert_fail@plt+0x2abc>
   13b84:	mov	r0, r4
   13b88:	bl	10fac <__freading@plt>
   13b8c:	cmp	r0, #0
   13b90:	beq	13bb8 <__assert_fail@plt+0x2abc>
   13b94:	ldrb	r0, [r4, #1]
   13b98:	tst	r0, #1
   13b9c:	beq	13bb8 <__assert_fail@plt+0x2abc>
   13ba0:	mov	r0, #1
   13ba4:	mov	r2, #0
   13ba8:	mov	r3, #0
   13bac:	str	r0, [sp]
   13bb0:	mov	r0, r4
   13bb4:	bl	13bf0 <__assert_fail@plt+0x2af4>
   13bb8:	mov	r0, r4
   13bbc:	sub	sp, fp, #8
   13bc0:	pop	{r4, sl, fp, lr}
   13bc4:	b	10ebc <fflush@plt>
   13bc8:	push	{r4, r5, r6, sl, fp, lr}
   13bcc:	add	fp, sp, #16
   13bd0:	mov	r4, r0
   13bd4:	bl	1100c <__errno_location@plt>
   13bd8:	ldr	r6, [r0]
   13bdc:	mov	r5, r0
   13be0:	mov	r0, r4
   13be4:	bl	10ed4 <free@plt>
   13be8:	str	r6, [r5]
   13bec:	pop	{r4, r5, r6, sl, fp, pc}
   13bf0:	push	{r4, r5, r6, r7, fp, lr}
   13bf4:	add	fp, sp, #16
   13bf8:	sub	sp, sp, #8
   13bfc:	mov	r4, r0
   13c00:	ldr	r0, [r0, #4]
   13c04:	mov	r5, r3
   13c08:	mov	r6, r2
   13c0c:	ldr	r1, [r4, #8]
   13c10:	cmp	r1, r0
   13c14:	bne	13c30 <__assert_fail@plt+0x2b34>
   13c18:	ldrd	r0, [r4, #16]
   13c1c:	cmp	r1, r0
   13c20:	bne	13c30 <__assert_fail@plt+0x2b34>
   13c24:	ldr	r0, [r4, #36]	; 0x24
   13c28:	cmp	r0, #0
   13c2c:	beq	13c48 <__assert_fail@plt+0x2b4c>
   13c30:	mov	r0, r4
   13c34:	mov	r2, r6
   13c38:	mov	r3, r5
   13c3c:	sub	sp, fp, #16
   13c40:	pop	{r4, r5, r6, r7, fp, lr}
   13c44:	b	11078 <fseeko64@plt>
   13c48:	ldr	r7, [fp, #8]
   13c4c:	mov	r0, r4
   13c50:	bl	1103c <fileno@plt>
   13c54:	mov	r2, r6
   13c58:	mov	r3, r5
   13c5c:	str	r7, [sp]
   13c60:	bl	10f4c <lseek64@plt>
   13c64:	and	r2, r0, r1
   13c68:	cmn	r2, #1
   13c6c:	beq	13c88 <__assert_fail@plt+0x2b8c>
   13c70:	strd	r0, [r4, #80]	; 0x50
   13c74:	ldr	r0, [r4]
   13c78:	bic	r0, r0, #16
   13c7c:	str	r0, [r4]
   13c80:	mov	r0, #0
   13c84:	b	13c8c <__assert_fail@plt+0x2b90>
   13c88:	mvn	r0, #0
   13c8c:	sub	sp, fp, #16
   13c90:	pop	{r4, r5, r6, r7, fp, pc}
   13c94:	push	{r4, r5, fp, lr}
   13c98:	add	fp, sp, #8
   13c9c:	cmp	r0, #0
   13ca0:	beq	13d34 <__assert_fail@plt+0x2c38>
   13ca4:	mov	r1, #47	; 0x2f
   13ca8:	mov	r4, r0
   13cac:	bl	11090 <strrchr@plt>
   13cb0:	cmp	r0, #0
   13cb4:	mov	r5, r4
   13cb8:	addne	r5, r0, #1
   13cbc:	sub	r0, r5, r4
   13cc0:	cmp	r0, #7
   13cc4:	blt	13d18 <__assert_fail@plt+0x2c1c>
   13cc8:	movw	r1, #31651	; 0x7ba3
   13ccc:	sub	r0, r5, #7
   13cd0:	mov	r2, #7
   13cd4:	movt	r1, #1
   13cd8:	bl	110d8 <strncmp@plt>
   13cdc:	cmp	r0, #0
   13ce0:	bne	13d18 <__assert_fail@plt+0x2c1c>
   13ce4:	movw	r1, #31659	; 0x7bab
   13ce8:	mov	r0, r5
   13cec:	mov	r2, #3
   13cf0:	movt	r1, #1
   13cf4:	bl	110d8 <strncmp@plt>
   13cf8:	cmp	r0, #0
   13cfc:	beq	13d08 <__assert_fail@plt+0x2c0c>
   13d00:	mov	r4, r5
   13d04:	b	13d18 <__assert_fail@plt+0x2c1c>
   13d08:	movw	r0, #37176	; 0x9138
   13d0c:	add	r4, r5, #3
   13d10:	movt	r0, #2
   13d14:	str	r4, [r0]
   13d18:	movw	r0, #37180	; 0x913c
   13d1c:	movt	r0, #2
   13d20:	str	r4, [r0]
   13d24:	movw	r0, #37244	; 0x917c
   13d28:	movt	r0, #2
   13d2c:	str	r4, [r0]
   13d30:	pop	{r4, r5, fp, pc}
   13d34:	movw	r0, #37192	; 0x9148
   13d38:	movt	r0, #2
   13d3c:	ldr	r1, [r0]
   13d40:	movw	r0, #31595	; 0x7b6b
   13d44:	movt	r0, #1
   13d48:	bl	110cc <fputs@plt>
   13d4c:	bl	110e4 <abort@plt>
   13d50:	push	{r4, r5, r6, sl, fp, lr}
   13d54:	add	fp, sp, #16
   13d58:	mov	r4, r0
   13d5c:	movw	r0, #37248	; 0x9180
   13d60:	movt	r0, #2
   13d64:	cmp	r4, #0
   13d68:	moveq	r4, r0
   13d6c:	bl	1100c <__errno_location@plt>
   13d70:	ldr	r6, [r0]
   13d74:	mov	r5, r0
   13d78:	mov	r0, r4
   13d7c:	mov	r1, #48	; 0x30
   13d80:	bl	15fdc <__assert_fail@plt+0x4ee0>
   13d84:	str	r6, [r5]
   13d88:	pop	{r4, r5, r6, sl, fp, pc}
   13d8c:	movw	r1, #37248	; 0x9180
   13d90:	cmp	r0, #0
   13d94:	movt	r1, #2
   13d98:	movne	r1, r0
   13d9c:	ldr	r0, [r1]
   13da0:	bx	lr
   13da4:	movw	r2, #37248	; 0x9180
   13da8:	cmp	r0, #0
   13dac:	movt	r2, #2
   13db0:	movne	r2, r0
   13db4:	str	r1, [r2]
   13db8:	bx	lr
   13dbc:	movw	r3, #37248	; 0x9180
   13dc0:	cmp	r0, #0
   13dc4:	and	r2, r2, #1
   13dc8:	movt	r3, #2
   13dcc:	movne	r3, r0
   13dd0:	ubfx	r0, r1, #5, #3
   13dd4:	and	r1, r1, #31
   13dd8:	add	ip, r3, r0, lsl #2
   13ddc:	mov	r0, #1
   13de0:	ldr	r3, [ip, #8]
   13de4:	and	r0, r0, r3, lsr r1
   13de8:	eor	r2, r0, r2
   13dec:	eor	r1, r3, r2, lsl r1
   13df0:	str	r1, [ip, #8]
   13df4:	bx	lr
   13df8:	movw	r2, #37248	; 0x9180
   13dfc:	cmp	r0, #0
   13e00:	movt	r2, #2
   13e04:	movne	r2, r0
   13e08:	ldr	r0, [r2, #4]
   13e0c:	str	r1, [r2, #4]
   13e10:	bx	lr
   13e14:	push	{fp, lr}
   13e18:	mov	fp, sp
   13e1c:	movw	r3, #37248	; 0x9180
   13e20:	cmp	r0, #0
   13e24:	movt	r3, #2
   13e28:	movne	r3, r0
   13e2c:	cmp	r1, #0
   13e30:	mov	r0, #10
   13e34:	cmpne	r2, #0
   13e38:	str	r0, [r3]
   13e3c:	bne	13e44 <__assert_fail@plt+0x2d48>
   13e40:	bl	110e4 <abort@plt>
   13e44:	str	r1, [r3, #40]	; 0x28
   13e48:	str	r2, [r3, #44]	; 0x2c
   13e4c:	pop	{fp, pc}
   13e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e54:	add	fp, sp, #28
   13e58:	sub	sp, sp, #20
   13e5c:	mov	r7, r0
   13e60:	ldr	r0, [fp, #8]
   13e64:	movw	r5, #37248	; 0x9180
   13e68:	mov	r8, r3
   13e6c:	mov	r9, r2
   13e70:	mov	sl, r1
   13e74:	movt	r5, #2
   13e78:	cmp	r0, #0
   13e7c:	movne	r5, r0
   13e80:	bl	1100c <__errno_location@plt>
   13e84:	ldr	r2, [r5, #40]	; 0x28
   13e88:	ldr	r3, [r5, #44]	; 0x2c
   13e8c:	mov	r4, r0
   13e90:	ldm	r5, {r0, r1}
   13e94:	add	r5, r5, #8
   13e98:	ldr	r6, [r4]
   13e9c:	stm	sp, {r0, r1, r5}
   13ea0:	mov	r0, r7
   13ea4:	mov	r1, sl
   13ea8:	str	r2, [sp, #12]
   13eac:	str	r3, [sp, #16]
   13eb0:	mov	r2, r9
   13eb4:	mov	r3, r8
   13eb8:	bl	13ec8 <__assert_fail@plt+0x2dcc>
   13ebc:	str	r6, [r4]
   13ec0:	sub	sp, fp, #28
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ecc:	add	fp, sp, #28
   13ed0:	sub	sp, sp, #156	; 0x9c
   13ed4:	mov	r5, r0
   13ed8:	add	r0, r2, #1
   13edc:	mov	r6, r1
   13ee0:	mov	sl, r3
   13ee4:	str	r2, [fp, #-80]	; 0xffffffb0
   13ee8:	str	r0, [sp, #72]	; 0x48
   13eec:	ldr	r0, [fp, #12]
   13ef0:	and	r1, r0, #1
   13ef4:	str	r1, [sp, #32]
   13ef8:	and	r1, r0, #4
   13efc:	str	r1, [sp, #28]
   13f00:	ubfx	r9, r0, #1, #1
   13f04:	bl	10f58 <__ctype_get_mb_cur_max@plt>
   13f08:	str	r0, [sp, #40]	; 0x28
   13f0c:	ldr	r0, [fp, #24]
   13f10:	ldr	r7, [fp, #8]
   13f14:	mov	r1, #0
   13f18:	mov	lr, #0
   13f1c:	str	r5, [fp, #-84]	; 0xffffffac
   13f20:	str	r1, [sp, #60]	; 0x3c
   13f24:	mov	r1, #1
   13f28:	str	r1, [fp, #-48]	; 0xffffffd0
   13f2c:	str	r0, [sp, #80]	; 0x50
   13f30:	ldr	r0, [fp, #20]
   13f34:	str	r0, [sp, #76]	; 0x4c
   13f38:	mov	r0, #0
   13f3c:	str	r0, [sp, #56]	; 0x38
   13f40:	mov	r0, #0
   13f44:	str	r0, [fp, #-88]	; 0xffffffa8
   13f48:	mov	r0, #0
   13f4c:	str	r0, [fp, #-72]	; 0xffffffb8
   13f50:	mov	r0, #0
   13f54:	cmp	r7, #10
   13f58:	bhi	14f34 <__assert_fail@plt+0x3e38>
   13f5c:	add	r1, pc, #24
   13f60:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13f64:	mov	ip, r6
   13f68:	mov	r8, #0
   13f6c:	mov	r2, #1
   13f70:	mov	r6, #0
   13f74:	mov	r3, sl
   13f78:	ldr	pc, [r1, r7, lsl #2]
   13f7c:	andeq	r4, r1, r8, rrx
   13f80:	strheq	r4, [r1], -ip
   13f84:	andeq	r4, r1, ip, ror r0
   13f88:	andeq	r4, r1, r0, rrx
   13f8c:	strheq	r4, [r1], -r0
   13f90:	andeq	r4, r1, r4, ror #1
   13f94:	andeq	r4, r1, ip, lsl #1
   13f98:	andeq	r4, r1, r8, ror #2
   13f9c:	andeq	r3, r1, r8, lsr #31
   13fa0:	andeq	r3, r1, r8, lsr #31
   13fa4:	andeq	r3, r1, r8, ror #31
   13fa8:	movw	r0, #31741	; 0x7bfd
   13fac:	mov	r1, r7
   13fb0:	mov	r6, r5
   13fb4:	mov	r4, ip
   13fb8:	mov	r5, lr
   13fbc:	movt	r0, #1
   13fc0:	bl	15698 <__assert_fail@plt+0x459c>
   13fc4:	str	r0, [sp, #76]	; 0x4c
   13fc8:	movw	r0, #31743	; 0x7bff
   13fcc:	mov	r1, r7
   13fd0:	movt	r0, #1
   13fd4:	bl	15698 <__assert_fail@plt+0x459c>
   13fd8:	mov	lr, r5
   13fdc:	mov	r5, r6
   13fe0:	mov	ip, r4
   13fe4:	str	r0, [sp, #80]	; 0x50
   13fe8:	mov	r8, #0
   13fec:	tst	r9, #1
   13ff0:	str	lr, [sp, #44]	; 0x2c
   13ff4:	bne	1402c <__assert_fail@plt+0x2f30>
   13ff8:	ldr	r0, [sp, #76]	; 0x4c
   13ffc:	ldrb	r0, [r0]
   14000:	cmp	r0, #0
   14004:	beq	1402c <__assert_fail@plt+0x2f30>
   14008:	ldr	r1, [sp, #76]	; 0x4c
   1400c:	mov	r8, #0
   14010:	add	r1, r1, #1
   14014:	cmp	r8, ip
   14018:	strbcc	r0, [r5, r8]
   1401c:	ldrb	r0, [r1, r8]
   14020:	add	r8, r8, #1
   14024:	cmp	r0, #0
   14028:	bne	14014 <__assert_fail@plt+0x2f18>
   1402c:	ldr	r6, [sp, #80]	; 0x50
   14030:	mov	r4, ip
   14034:	mov	r0, r6
   14038:	bl	10ff4 <strlen@plt>
   1403c:	mov	ip, r4
   14040:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14044:	ldr	lr, [sp, #44]	; 0x2c
   14048:	str	r6, [fp, #-88]	; 0xffffffa8
   1404c:	str	r0, [fp, #-72]	; 0xffffffb8
   14050:	mov	r2, #1
   14054:	mov	r6, r9
   14058:	mov	r3, sl
   1405c:	b	14168 <__assert_fail@plt+0x306c>
   14060:	mov	r0, #1
   14064:	b	140bc <__assert_fail@plt+0x2fc0>
   14068:	mov	r7, #0
   1406c:	mov	r8, #0
   14070:	mov	r2, r0
   14074:	mov	r6, #0
   14078:	b	14168 <__assert_fail@plt+0x306c>
   1407c:	tst	r9, #1
   14080:	bne	140bc <__assert_fail@plt+0x2fc0>
   14084:	mov	r2, r0
   14088:	b	14114 <__assert_fail@plt+0x3018>
   1408c:	mov	r0, #1
   14090:	mov	r8, #0
   14094:	mov	r7, #5
   14098:	mov	r2, #1
   1409c:	str	r0, [fp, #-72]	; 0xffffffb8
   140a0:	movw	r0, #31739	; 0x7bfb
   140a4:	movt	r0, #1
   140a8:	str	r0, [fp, #-88]	; 0xffffffa8
   140ac:	b	140dc <__assert_fail@plt+0x2fe0>
   140b0:	mov	r2, #1
   140b4:	tst	r9, #1
   140b8:	beq	14114 <__assert_fail@plt+0x3018>
   140bc:	mov	r1, #1
   140c0:	mov	r8, #0
   140c4:	mov	r7, #2
   140c8:	mov	r2, r0
   140cc:	str	r1, [fp, #-72]	; 0xffffffb8
   140d0:	movw	r1, #31743	; 0x7bff
   140d4:	movt	r1, #1
   140d8:	str	r1, [fp, #-88]	; 0xffffffa8
   140dc:	mov	r6, #1
   140e0:	b	14168 <__assert_fail@plt+0x306c>
   140e4:	tst	r9, #1
   140e8:	beq	14138 <__assert_fail@plt+0x303c>
   140ec:	mov	r0, #1
   140f0:	mov	r8, #0
   140f4:	mov	r2, #1
   140f8:	mov	r6, #1
   140fc:	mov	r7, #5
   14100:	str	r0, [fp, #-72]	; 0xffffffb8
   14104:	movw	r0, #31739	; 0x7bfb
   14108:	movt	r0, #1
   1410c:	str	r0, [fp, #-88]	; 0xffffffa8
   14110:	b	14168 <__assert_fail@plt+0x306c>
   14114:	cmp	ip, #0
   14118:	mov	r8, #1
   1411c:	mov	r6, #0
   14120:	mov	r7, #2
   14124:	movne	r0, #39	; 0x27
   14128:	strbne	r0, [r5]
   1412c:	movw	r0, #31743	; 0x7bff
   14130:	movt	r0, #1
   14134:	b	1415c <__assert_fail@plt+0x3060>
   14138:	cmp	ip, #0
   1413c:	mov	r8, #1
   14140:	mov	r2, #1
   14144:	mov	r7, #5
   14148:	mov	r6, #0
   1414c:	movne	r0, #34	; 0x22
   14150:	strbne	r0, [r5]
   14154:	movw	r0, #31739	; 0x7bfb
   14158:	movt	r0, #1
   1415c:	str	r0, [fp, #-88]	; 0xffffffa8
   14160:	mov	r0, #1
   14164:	str	r0, [fp, #-72]	; 0xffffffb8
   14168:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1416c:	str	r7, [fp, #-68]	; 0xffffffbc
   14170:	str	r6, [fp, #-76]	; 0xffffffb4
   14174:	str	r2, [sp, #84]	; 0x54
   14178:	cmp	r0, #0
   1417c:	movwne	r0, #1
   14180:	and	r1, r0, r6
   14184:	and	r1, r2, r1
   14188:	str	r1, [sp, #48]	; 0x30
   1418c:	sub	r1, r7, #2
   14190:	clz	r1, r1
   14194:	lsr	r1, r1, #5
   14198:	and	r1, r1, r6
   1419c:	str	r1, [sp, #64]	; 0x40
   141a0:	subs	r1, r7, #2
   141a4:	eor	r7, r6, #1
   141a8:	movwne	r1, #1
   141ac:	str	r7, [sp, #92]	; 0x5c
   141b0:	orr	r7, r1, r7
   141b4:	and	r1, r1, r2
   141b8:	and	r0, r0, r1
   141bc:	str	r7, [sp, #68]	; 0x44
   141c0:	mov	r7, #0
   141c4:	str	r0, [fp, #-60]	; 0xffffffc4
   141c8:	orr	r0, r1, r6
   141cc:	ldr	r1, [fp, #16]
   141d0:	eor	r0, r0, #1
   141d4:	clz	r1, r1
   141d8:	lsr	r1, r1, #5
   141dc:	orr	r0, r1, r0
   141e0:	str	r0, [fp, #-64]	; 0xffffffc0
   141e4:	eor	r0, r2, #1
   141e8:	str	r0, [sp, #52]	; 0x34
   141ec:	cmn	r3, #1
   141f0:	beq	14200 <__assert_fail@plt+0x3104>
   141f4:	cmp	r7, r3
   141f8:	bne	1420c <__assert_fail@plt+0x3110>
   141fc:	b	14d68 <__assert_fail@plt+0x3c6c>
   14200:	ldrb	r0, [r4, r7]
   14204:	cmp	r0, #0
   14208:	beq	14d70 <__assert_fail@plt+0x3c74>
   1420c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14210:	cmp	r0, #0
   14214:	beq	1425c <__assert_fail@plt+0x3160>
   14218:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1421c:	add	r5, r7, r0
   14220:	cmp	r0, #2
   14224:	bcc	14270 <__assert_fail@plt+0x3174>
   14228:	mov	r0, #0
   1422c:	cmn	r3, #1
   14230:	str	r0, [fp, #-56]	; 0xffffffc8
   14234:	bne	14278 <__assert_fail@plt+0x317c>
   14238:	mov	r0, r4
   1423c:	mov	r4, ip
   14240:	mov	r6, lr
   14244:	bl	10ff4 <strlen@plt>
   14248:	mov	ip, r4
   1424c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14250:	mov	lr, r6
   14254:	mov	r3, r0
   14258:	b	14278 <__assert_fail@plt+0x317c>
   1425c:	mov	r0, #0
   14260:	mov	sl, r3
   14264:	str	r0, [fp, #-56]	; 0xffffffc8
   14268:	mov	r0, #0
   1426c:	b	142e4 <__assert_fail@plt+0x31e8>
   14270:	mov	r0, #0
   14274:	str	r0, [fp, #-56]	; 0xffffffc8
   14278:	cmp	r5, r3
   1427c:	bls	14290 <__assert_fail@plt+0x3194>
   14280:	ldr	r5, [fp, #-84]	; 0xffffffac
   14284:	mov	r0, #0
   14288:	mov	sl, r3
   1428c:	b	142e4 <__assert_fail@plt+0x31e8>
   14290:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14294:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14298:	add	r0, r4, r7
   1429c:	mov	r5, lr
   142a0:	mov	r6, ip
   142a4:	mov	sl, r3
   142a8:	bl	10fe8 <bcmp@plt>
   142ac:	ldr	r2, [sp, #92]	; 0x5c
   142b0:	cmp	r0, #0
   142b4:	ldr	r3, [fp, #-84]	; 0xffffffac
   142b8:	mov	r1, r0
   142bc:	movwne	r1, #1
   142c0:	orr	r1, r1, r2
   142c4:	tst	r1, #1
   142c8:	beq	14df4 <__assert_fail@plt+0x3cf8>
   142cc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   142d0:	clz	r0, r0
   142d4:	mov	lr, r5
   142d8:	mov	ip, r6
   142dc:	mov	r5, r3
   142e0:	lsr	r0, r0, #5
   142e4:	str	r0, [fp, #-52]	; 0xffffffcc
   142e8:	ldrb	r6, [r4, r7]
   142ec:	cmp	r6, #126	; 0x7e
   142f0:	bhi	14818 <__assert_fail@plt+0x371c>
   142f4:	add	r3, pc, #16
   142f8:	mov	r9, #1
   142fc:	mov	r2, #110	; 0x6e
   14300:	mov	r0, #97	; 0x61
   14304:	mov	r1, #0
   14308:	ldr	pc, [r3, r6, lsl #2]
   1430c:	andeq	r4, r1, ip, ror r6
   14310:	andeq	r4, r1, r8, lsl r8
   14314:	andeq	r4, r1, r8, lsl r8
   14318:	andeq	r4, r1, r8, lsl r8
   1431c:	andeq	r4, r1, r8, lsl r8
   14320:	andeq	r4, r1, r8, lsl r8
   14324:	andeq	r4, r1, r8, lsl r8
   14328:	muleq	r1, r8, r8
   1432c:	andeq	r4, r1, ip, asr r6
   14330:	andeq	r4, r1, r4, asr r6
   14334:	andeq	r4, r1, r8, ror #12
   14338:	andeq	r4, r1, r0, lsl #15
   1433c:	andeq	r4, r1, ip, asr #12
   14340:	andeq	r4, r1, r4, ror #12
   14344:	andeq	r4, r1, r8, lsl r8
   14348:	andeq	r4, r1, r8, lsl r8
   1434c:	andeq	r4, r1, r8, lsl r8
   14350:	andeq	r4, r1, r8, lsl r8
   14354:	andeq	r4, r1, r8, lsl r8
   14358:	andeq	r4, r1, r8, lsl r8
   1435c:	andeq	r4, r1, r8, lsl r8
   14360:	andeq	r4, r1, r8, lsl r8
   14364:	andeq	r4, r1, r8, lsl r8
   14368:	andeq	r4, r1, r8, lsl r8
   1436c:	andeq	r4, r1, r8, lsl r8
   14370:	andeq	r4, r1, r8, lsl r8
   14374:	andeq	r4, r1, r8, lsl r8
   14378:	andeq	r4, r1, r8, lsl r8
   1437c:	andeq	r4, r1, r8, lsl r8
   14380:	andeq	r4, r1, r8, lsl r8
   14384:	andeq	r4, r1, r8, lsl r8
   14388:	andeq	r4, r1, r8, lsl r8
   1438c:	strdeq	r4, [r1], -ip
   14390:	andeq	r4, r1, r0, lsl #12
   14394:	andeq	r4, r1, r0, lsl #12
   14398:	andeq	r4, r1, r4, ror #11
   1439c:	andeq	r4, r1, r0, lsl #12
   143a0:	andeq	r4, r1, r8, lsl #10
   143a4:	andeq	r4, r1, r0, lsl #12
   143a8:	andeq	r4, r1, r8, lsl #15
   143ac:	andeq	r4, r1, r0, lsl #12
   143b0:	andeq	r4, r1, r0, lsl #12
   143b4:	andeq	r4, r1, r0, lsl #12
   143b8:	andeq	r4, r1, r8, lsl #10
   143bc:	andeq	r4, r1, r8, lsl #10
   143c0:	andeq	r4, r1, r8, lsl #10
   143c4:	andeq	r4, r1, r8, lsl #10
   143c8:	andeq	r4, r1, r8, lsl #10
   143cc:	andeq	r4, r1, r8, lsl #10
   143d0:	andeq	r4, r1, r8, lsl #10
   143d4:	andeq	r4, r1, r8, lsl #10
   143d8:	andeq	r4, r1, r8, lsl #10
   143dc:	andeq	r4, r1, r8, lsl #10
   143e0:	andeq	r4, r1, r8, lsl #10
   143e4:	andeq	r4, r1, r8, lsl #10
   143e8:	andeq	r4, r1, r8, lsl #10
   143ec:	andeq	r4, r1, r8, lsl #10
   143f0:	andeq	r4, r1, r8, lsl #10
   143f4:	andeq	r4, r1, r8, lsl #10
   143f8:	andeq	r4, r1, r0, lsl #12
   143fc:	andeq	r4, r1, r0, lsl #12
   14400:	andeq	r4, r1, r0, lsl #12
   14404:	andeq	r4, r1, r0, lsl #12
   14408:	andeq	r4, r1, r4, asr r7
   1440c:	andeq	r4, r1, r8, lsl r8
   14410:	andeq	r4, r1, r8, lsl #10
   14414:	andeq	r4, r1, r8, lsl #10
   14418:	andeq	r4, r1, r8, lsl #10
   1441c:	andeq	r4, r1, r8, lsl #10
   14420:	andeq	r4, r1, r8, lsl #10
   14424:	andeq	r4, r1, r8, lsl #10
   14428:	andeq	r4, r1, r8, lsl #10
   1442c:	andeq	r4, r1, r8, lsl #10
   14430:	andeq	r4, r1, r8, lsl #10
   14434:	andeq	r4, r1, r8, lsl #10
   14438:	andeq	r4, r1, r8, lsl #10
   1443c:	andeq	r4, r1, r8, lsl #10
   14440:	andeq	r4, r1, r8, lsl #10
   14444:	andeq	r4, r1, r8, lsl #10
   14448:	andeq	r4, r1, r8, lsl #10
   1444c:	andeq	r4, r1, r8, lsl #10
   14450:	andeq	r4, r1, r8, lsl #10
   14454:	andeq	r4, r1, r8, lsl #10
   14458:	andeq	r4, r1, r8, lsl #10
   1445c:	andeq	r4, r1, r8, lsl #10
   14460:	andeq	r4, r1, r8, lsl #10
   14464:	andeq	r4, r1, r8, lsl #10
   14468:	andeq	r4, r1, r8, lsl #10
   1446c:	andeq	r4, r1, r8, lsl #10
   14470:	andeq	r4, r1, r8, lsl #10
   14474:	andeq	r4, r1, r8, lsl #10
   14478:	andeq	r4, r1, r0, lsl #12
   1447c:	andeq	r4, r1, r8, lsr #12
   14480:	andeq	r4, r1, r8, lsl #10
   14484:	andeq	r4, r1, r0, lsl #12
   14488:	andeq	r4, r1, r8, lsl #10
   1448c:	andeq	r4, r1, r0, lsl #12
   14490:	andeq	r4, r1, r8, lsl #10
   14494:	andeq	r4, r1, r8, lsl #10
   14498:	andeq	r4, r1, r8, lsl #10
   1449c:	andeq	r4, r1, r8, lsl #10
   144a0:	andeq	r4, r1, r8, lsl #10
   144a4:	andeq	r4, r1, r8, lsl #10
   144a8:	andeq	r4, r1, r8, lsl #10
   144ac:	andeq	r4, r1, r8, lsl #10
   144b0:	andeq	r4, r1, r8, lsl #10
   144b4:	andeq	r4, r1, r8, lsl #10
   144b8:	andeq	r4, r1, r8, lsl #10
   144bc:	andeq	r4, r1, r8, lsl #10
   144c0:	andeq	r4, r1, r8, lsl #10
   144c4:	andeq	r4, r1, r8, lsl #10
   144c8:	andeq	r4, r1, r8, lsl #10
   144cc:	andeq	r4, r1, r8, lsl #10
   144d0:	andeq	r4, r1, r8, lsl #10
   144d4:	andeq	r4, r1, r8, lsl #10
   144d8:	andeq	r4, r1, r8, lsl #10
   144dc:	andeq	r4, r1, r8, lsl #10
   144e0:	andeq	r4, r1, r8, lsl #10
   144e4:	andeq	r4, r1, r8, lsl #10
   144e8:	andeq	r4, r1, r8, lsl #10
   144ec:	andeq	r4, r1, r8, lsl #10
   144f0:	andeq	r4, r1, r8, lsl #10
   144f4:	andeq	r4, r1, r8, lsl #10
   144f8:			; <UNDEFINED> instruction: 0x000145bc
   144fc:	andeq	r4, r1, r0, lsl #12
   14500:			; <UNDEFINED> instruction: 0x000145bc
   14504:	andeq	r4, r1, r4, ror #11
   14508:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1450c:	tst	r0, #1
   14510:	bne	1453c <__assert_fail@plt+0x3440>
   14514:	ldr	r1, [fp, #16]
   14518:	ubfx	r0, r6, #5, #3
   1451c:	mov	r2, #1
   14520:	ldr	r0, [r1, r0, lsl #2]
   14524:	and	r1, r6, #31
   14528:	tst	r0, r2, lsl r1
   1452c:	beq	1453c <__assert_fail@plt+0x3440>
   14530:	mov	r0, r6
   14534:	mov	r1, r9
   14538:	b	14550 <__assert_fail@plt+0x3454>
   1453c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14540:	mov	r1, r9
   14544:	cmp	r0, #0
   14548:	mov	r0, r6
   1454c:	beq	14c9c <__assert_fail@plt+0x3ba0>
   14550:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14554:	tst	r2, #1
   14558:	bne	14e38 <__assert_fail@plt+0x3d3c>
   1455c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14560:	subs	r2, r2, #2
   14564:	movwne	r2, #1
   14568:	orr	r2, r2, lr
   1456c:	tst	r2, #1
   14570:	bne	145a8 <__assert_fail@plt+0x34ac>
   14574:	cmp	r8, ip
   14578:	mov	lr, #1
   1457c:	movcc	r2, #39	; 0x27
   14580:	strbcc	r2, [r5, r8]
   14584:	add	r2, r8, #1
   14588:	cmp	r2, ip
   1458c:	movcc	r3, #36	; 0x24
   14590:	strbcc	r3, [r5, r2]
   14594:	add	r2, r8, #2
   14598:	add	r8, r8, #3
   1459c:	cmp	r2, ip
   145a0:	movcc	r3, #39	; 0x27
   145a4:	strbcc	r3, [r5, r2]
   145a8:	cmp	r8, ip
   145ac:	movcc	r2, #92	; 0x5c
   145b0:	strbcc	r2, [r5, r8]
   145b4:	add	r8, r8, #1
   145b8:	b	14cdc <__assert_fail@plt+0x3be0>
   145bc:	cmp	sl, #1
   145c0:	beq	145e4 <__assert_fail@plt+0x34e8>
   145c4:	mov	r9, #0
   145c8:	cmn	sl, #1
   145cc:	bne	145f0 <__assert_fail@plt+0x34f4>
   145d0:	ldrb	r0, [r4, #1]
   145d4:	cmp	r0, #0
   145d8:	beq	145e4 <__assert_fail@plt+0x34e8>
   145dc:	mvn	sl, #0
   145e0:	b	145f0 <__assert_fail@plt+0x34f4>
   145e4:	mov	r9, #0
   145e8:	cmp	r7, #0
   145ec:	beq	145fc <__assert_fail@plt+0x3500>
   145f0:	mov	r0, #0
   145f4:	str	r0, [fp, #-56]	; 0xffffffc8
   145f8:	b	14508 <__assert_fail@plt+0x340c>
   145fc:	mov	r1, #1
   14600:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14604:	cmp	r0, #2
   14608:	bne	14620 <__assert_fail@plt+0x3524>
   1460c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14610:	mov	r9, r1
   14614:	tst	r0, #1
   14618:	beq	14508 <__assert_fail@plt+0x340c>
   1461c:	b	14e38 <__assert_fail@plt+0x3d3c>
   14620:	mov	r9, r1
   14624:	b	14508 <__assert_fail@plt+0x340c>
   14628:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1462c:	cmp	r0, #2
   14630:	bne	14874 <__assert_fail@plt+0x3778>
   14634:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14638:	tst	r0, #1
   1463c:	bne	14e38 <__assert_fail@plt+0x3d3c>
   14640:	mov	r0, #0
   14644:	str	r0, [fp, #-56]	; 0xffffffc8
   14648:	b	1488c <__assert_fail@plt+0x3790>
   1464c:	mov	r0, #102	; 0x66
   14650:	b	14898 <__assert_fail@plt+0x379c>
   14654:	mov	r2, #116	; 0x74
   14658:	b	14668 <__assert_fail@plt+0x356c>
   1465c:	mov	r0, #98	; 0x62
   14660:	b	14898 <__assert_fail@plt+0x379c>
   14664:	mov	r2, #114	; 0x72
   14668:	ldr	r0, [sp, #68]	; 0x44
   1466c:	tst	r0, #1
   14670:	mov	r0, r2
   14674:	bne	14898 <__assert_fail@plt+0x379c>
   14678:	b	14e38 <__assert_fail@plt+0x3d3c>
   1467c:	ldr	r0, [sp, #84]	; 0x54
   14680:	tst	r0, #1
   14684:	beq	148b8 <__assert_fail@plt+0x37bc>
   14688:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1468c:	tst	r0, #1
   14690:	bne	14f24 <__assert_fail@plt+0x3e28>
   14694:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14698:	mov	r2, sl
   1469c:	subs	r0, r0, #2
   146a0:	movwne	r0, #1
   146a4:	orr	r0, r0, lr
   146a8:	tst	r0, #1
   146ac:	bne	146e4 <__assert_fail@plt+0x35e8>
   146b0:	cmp	r8, ip
   146b4:	mov	lr, #1
   146b8:	movcc	r0, #39	; 0x27
   146bc:	strbcc	r0, [r5, r8]
   146c0:	add	r0, r8, #1
   146c4:	cmp	r0, ip
   146c8:	movcc	r1, #36	; 0x24
   146cc:	strbcc	r1, [r5, r0]
   146d0:	add	r0, r8, #2
   146d4:	add	r8, r8, #3
   146d8:	cmp	r0, ip
   146dc:	movcc	r1, #39	; 0x27
   146e0:	strbcc	r1, [r5, r0]
   146e4:	mov	r1, #1
   146e8:	cmp	r8, ip
   146ec:	mov	r9, #0
   146f0:	mov	r6, #48	; 0x30
   146f4:	str	r1, [fp, #-56]	; 0xffffffc8
   146f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   146fc:	movcc	r0, #92	; 0x5c
   14700:	strbcc	r0, [r5, r8]
   14704:	add	r0, r8, #1
   14708:	cmp	r1, #2
   1470c:	beq	14a14 <__assert_fail@plt+0x3918>
   14710:	add	r1, r7, #1
   14714:	cmp	r1, r2
   14718:	bcs	14a14 <__assert_fail@plt+0x3918>
   1471c:	ldrb	r1, [r4, r1]
   14720:	sub	r1, r1, #48	; 0x30
   14724:	uxtb	r1, r1
   14728:	cmp	r1, #9
   1472c:	bhi	14a14 <__assert_fail@plt+0x3918>
   14730:	cmp	r0, ip
   14734:	movcc	r1, #48	; 0x30
   14738:	strbcc	r1, [r5, r0]
   1473c:	add	r0, r8, #2
   14740:	add	r8, r8, #3
   14744:	cmp	r0, ip
   14748:	movcc	r1, #48	; 0x30
   1474c:	strbcc	r1, [r5, r0]
   14750:	b	14508 <__assert_fail@plt+0x340c>
   14754:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14758:	mov	r6, #63	; 0x3f
   1475c:	cmp	r0, #5
   14760:	beq	14a1c <__assert_fail@plt+0x3920>
   14764:	mov	r1, #0
   14768:	cmp	r0, #2
   1476c:	str	r1, [fp, #-56]	; 0xffffffc8
   14770:	bne	14ad0 <__assert_fail@plt+0x39d4>
   14774:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14778:	mov	r9, #0
   1477c:	b	14614 <__assert_fail@plt+0x3518>
   14780:	mov	r0, #118	; 0x76
   14784:	b	14898 <__assert_fail@plt+0x379c>
   14788:	mov	r0, #1
   1478c:	mov	r6, #39	; 0x27
   14790:	str	r0, [sp, #60]	; 0x3c
   14794:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14798:	cmp	r0, #2
   1479c:	bne	14810 <__assert_fail@plt+0x3714>
   147a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   147a4:	tst	r0, #1
   147a8:	bne	14e38 <__assert_fail@plt+0x3d3c>
   147ac:	ldr	r2, [sp, #56]	; 0x38
   147b0:	clz	r1, ip
   147b4:	mov	lr, #0
   147b8:	lsr	r1, r1, #5
   147bc:	cmp	r2, #0
   147c0:	mov	r0, r2
   147c4:	movwne	r0, #1
   147c8:	orrs	r0, r0, r1
   147cc:	moveq	r2, ip
   147d0:	moveq	ip, r0
   147d4:	cmp	r8, ip
   147d8:	str	r2, [sp, #56]	; 0x38
   147dc:	movcc	r0, #39	; 0x27
   147e0:	strbcc	r0, [r5, r8]
   147e4:	add	r0, r8, #1
   147e8:	cmp	r0, ip
   147ec:	movcc	r1, #92	; 0x5c
   147f0:	strbcc	r1, [r5, r0]
   147f4:	add	r0, r8, #2
   147f8:	add	r8, r8, #3
   147fc:	cmp	r0, ip
   14800:	movcc	r1, #39	; 0x27
   14804:	strbcc	r1, [r5, r0]
   14808:	mov	r0, #0
   1480c:	str	r0, [fp, #-56]	; 0xffffffc8
   14810:	mov	r9, #1
   14814:	b	14508 <__assert_fail@plt+0x340c>
   14818:	ldr	r0, [sp, #40]	; 0x28
   1481c:	str	lr, [sp, #44]	; 0x2c
   14820:	str	ip, [sp, #88]	; 0x58
   14824:	cmp	r0, #1
   14828:	bne	148d8 <__assert_fail@plt+0x37dc>
   1482c:	str	sl, [sp, #36]	; 0x24
   14830:	bl	10fd0 <__ctype_b_loc@plt>
   14834:	ldr	r0, [r0]
   14838:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1483c:	mov	r1, #1
   14840:	add	r0, r0, r6, lsl #1
   14844:	ldrb	r0, [r0, #1]
   14848:	ubfx	r9, r0, #6, #1
   1484c:	ldr	r0, [sp, #52]	; 0x34
   14850:	ldr	lr, [sp, #44]	; 0x2c
   14854:	cmp	r1, #1
   14858:	orr	r3, r9, r0
   1485c:	bhi	14ad8 <__assert_fail@plt+0x39dc>
   14860:	tst	r3, #1
   14864:	beq	14ad8 <__assert_fail@plt+0x39dc>
   14868:	ldr	sl, [sp, #36]	; 0x24
   1486c:	ldr	ip, [sp, #88]	; 0x58
   14870:	b	14508 <__assert_fail@plt+0x340c>
   14874:	ldr	r1, [sp, #48]	; 0x30
   14878:	mov	r0, #0
   1487c:	str	r0, [fp, #-56]	; 0xffffffc8
   14880:	mov	r0, #92	; 0x5c
   14884:	cmp	r1, #0
   14888:	beq	14898 <__assert_fail@plt+0x379c>
   1488c:	mov	r6, #92	; 0x5c
   14890:	mov	r9, #0
   14894:	b	14c9c <__assert_fail@plt+0x3ba0>
   14898:	mov	r1, #0
   1489c:	mov	r9, #0
   148a0:	str	r1, [fp, #-56]	; 0xffffffc8
   148a4:	ldr	r1, [sp, #84]	; 0x54
   148a8:	tst	r1, #1
   148ac:	mov	r1, #0
   148b0:	beq	14508 <__assert_fail@plt+0x340c>
   148b4:	b	14550 <__assert_fail@plt+0x3454>
   148b8:	ldr	r0, [sp, #32]
   148bc:	mov	r6, #0
   148c0:	mov	r9, #0
   148c4:	cmp	r0, #0
   148c8:	mov	r0, #0
   148cc:	str	r0, [fp, #-56]	; 0xffffffc8
   148d0:	beq	14508 <__assert_fail@plt+0x340c>
   148d4:	b	14cf4 <__assert_fail@plt+0x3bf8>
   148d8:	mov	r0, #0
   148dc:	cmn	sl, #1
   148e0:	sub	r3, fp, #40	; 0x28
   148e4:	str	r0, [fp, #-36]	; 0xffffffdc
   148e8:	str	r0, [fp, #-40]	; 0xffffffd8
   148ec:	bne	14904 <__assert_fail@plt+0x3808>
   148f0:	mov	r0, r4
   148f4:	bl	10ff4 <strlen@plt>
   148f8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   148fc:	sub	r3, fp, #40	; 0x28
   14900:	mov	sl, r0
   14904:	ldr	r0, [sp, #72]	; 0x48
   14908:	mov	r9, #1
   1490c:	mov	r1, #0
   14910:	str	sl, [sp, #36]	; 0x24
   14914:	add	r0, r0, r7
   14918:	str	r0, [sp, #20]
   1491c:	add	r0, r1, r7
   14920:	str	r1, [sp, #24]
   14924:	add	r1, r4, r0
   14928:	mov	r4, r0
   1492c:	sub	r2, sl, r0
   14930:	sub	r0, fp, #44	; 0x2c
   14934:	bl	168d8 <__assert_fail@plt+0x57dc>
   14938:	cmp	r0, #0
   1493c:	beq	14d48 <__assert_fail@plt+0x3c4c>
   14940:	cmn	r0, #1
   14944:	beq	14d00 <__assert_fail@plt+0x3c04>
   14948:	ldr	r2, [sp, #36]	; 0x24
   1494c:	cmn	r0, #2
   14950:	beq	14d08 <__assert_fail@plt+0x3c0c>
   14954:	ldr	r2, [sp, #64]	; 0x40
   14958:	ldr	ip, [sp, #88]	; 0x58
   1495c:	ldr	r4, [sp, #84]	; 0x54
   14960:	ldr	lr, [fp, #-48]	; 0xffffffd0
   14964:	cmp	r0, #2
   14968:	mov	r1, #0
   1496c:	movwcc	r1, #1
   14970:	eor	r2, r2, #1
   14974:	orrs	r1, r2, r1
   14978:	bne	149c8 <__assert_fail@plt+0x38cc>
   1497c:	ldr	r1, [sp, #24]
   14980:	ldr	r2, [sp, #20]
   14984:	add	r1, r2, r1
   14988:	sub	r2, r0, #1
   1498c:	ldrb	r3, [r1]
   14990:	sub	r5, r3, #94	; 0x5e
   14994:	cmp	r5, #30
   14998:	bhi	149b0 <__assert_fail@plt+0x38b4>
   1499c:	mov	r4, #1
   149a0:	mov	sl, #1073741829	; 0x40000005
   149a4:	tst	sl, r4, lsl r5
   149a8:	ldr	r4, [sp, #84]	; 0x54
   149ac:	bne	14e10 <__assert_fail@plt+0x3d14>
   149b0:	sub	r3, r3, #91	; 0x5b
   149b4:	cmp	r3, #2
   149b8:	bcc	14e10 <__assert_fail@plt+0x3d14>
   149bc:	add	r1, r1, #1
   149c0:	subs	r2, r2, #1
   149c4:	bne	1498c <__assert_fail@plt+0x3890>
   149c8:	ldr	r5, [sp, #24]
   149cc:	str	lr, [fp, #-48]	; 0xffffffd0
   149d0:	add	r5, r0, r5
   149d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   149d8:	bl	10f40 <iswprint@plt>
   149dc:	cmp	r0, #0
   149e0:	sub	r4, fp, #40	; 0x28
   149e4:	movwne	r0, #1
   149e8:	and	r9, r9, r0
   149ec:	mov	r0, r4
   149f0:	bl	10ef8 <mbsinit@plt>
   149f4:	mov	r1, r5
   149f8:	mov	r3, r4
   149fc:	ldr	sl, [sp, #36]	; 0x24
   14a00:	ldr	r5, [fp, #-84]	; 0xffffffac
   14a04:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14a08:	cmp	r0, #0
   14a0c:	beq	1491c <__assert_fail@plt+0x3820>
   14a10:	b	1484c <__assert_fail@plt+0x3750>
   14a14:	mov	r8, r0
   14a18:	b	14508 <__assert_fail@plt+0x340c>
   14a1c:	mov	r0, #0
   14a20:	str	r0, [fp, #-56]	; 0xffffffc8
   14a24:	ldr	r0, [sp, #28]
   14a28:	cmp	r0, #0
   14a2c:	beq	14ad0 <__assert_fail@plt+0x39d4>
   14a30:	add	r0, r7, #2
   14a34:	mov	r1, sl
   14a38:	cmp	r0, sl
   14a3c:	bcs	14ad0 <__assert_fail@plt+0x39d4>
   14a40:	add	r1, r7, r4
   14a44:	ldrb	r1, [r1, #1]
   14a48:	cmp	r1, #63	; 0x3f
   14a4c:	bne	14ad0 <__assert_fail@plt+0x39d4>
   14a50:	ldrb	r9, [r4, r0]
   14a54:	sub	r2, r9, #33	; 0x21
   14a58:	cmp	r2, #29
   14a5c:	bhi	14ad0 <__assert_fail@plt+0x39d4>
   14a60:	mov	r1, r4
   14a64:	movw	r4, #20929	; 0x51c1
   14a68:	mov	r3, #1
   14a6c:	movt	r4, #14336	; 0x3800
   14a70:	tst	r4, r3, lsl r2
   14a74:	beq	14d5c <__assert_fail@plt+0x3c60>
   14a78:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14a7c:	tst	r2, #1
   14a80:	bne	14f2c <__assert_fail@plt+0x3e30>
   14a84:	cmp	r8, ip
   14a88:	mov	r4, r1
   14a8c:	mov	r7, r0
   14a90:	mov	r6, r9
   14a94:	movcc	r2, #63	; 0x3f
   14a98:	strbcc	r2, [r5, r8]
   14a9c:	add	r2, r8, #1
   14aa0:	cmp	r2, ip
   14aa4:	movcc	r3, #34	; 0x22
   14aa8:	strbcc	r3, [r5, r2]
   14aac:	add	r2, r8, #2
   14ab0:	cmp	r2, ip
   14ab4:	movcc	r3, #34	; 0x22
   14ab8:	strbcc	r3, [r5, r2]
   14abc:	add	r2, r8, #3
   14ac0:	add	r8, r8, #4
   14ac4:	cmp	r2, ip
   14ac8:	movcc	r3, #63	; 0x3f
   14acc:	strbcc	r3, [r5, r2]
   14ad0:	mov	r9, #0
   14ad4:	b	14508 <__assert_fail@plt+0x340c>
   14ad8:	ldr	sl, [sp, #36]	; 0x24
   14adc:	add	r0, r1, r7
   14ae0:	mov	r2, #0
   14ae4:	str	r3, [sp, #24]
   14ae8:	str	r0, [fp, #-56]	; 0xffffffc8
   14aec:	tst	r3, #1
   14af0:	beq	14b1c <__assert_fail@plt+0x3a20>
   14af4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14af8:	tst	r0, #1
   14afc:	beq	14be4 <__assert_fail@plt+0x3ae8>
   14b00:	ldr	r1, [sp, #88]	; 0x58
   14b04:	mov	r0, r3
   14b08:	cmp	r8, r1
   14b0c:	movcc	r1, #92	; 0x5c
   14b10:	strbcc	r1, [r5, r8]
   14b14:	add	r8, r8, #1
   14b18:	b	14be8 <__assert_fail@plt+0x3aec>
   14b1c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14b20:	tst	r1, #1
   14b24:	bne	14e34 <__assert_fail@plt+0x3d38>
   14b28:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14b2c:	subs	r2, r1, #2
   14b30:	movwne	r2, #1
   14b34:	orr	r2, r2, lr
   14b38:	tst	r2, #1
   14b3c:	bne	14b80 <__assert_fail@plt+0x3a84>
   14b40:	ldr	r1, [sp, #88]	; 0x58
   14b44:	add	r2, r8, #1
   14b48:	mov	lr, #1
   14b4c:	cmp	r8, r1
   14b50:	movcc	r1, #39	; 0x27
   14b54:	strbcc	r1, [r5, r8]
   14b58:	ldr	r1, [sp, #88]	; 0x58
   14b5c:	cmp	r2, r1
   14b60:	movcc	r1, #36	; 0x24
   14b64:	strbcc	r1, [r5, r2]
   14b68:	ldr	r1, [sp, #88]	; 0x58
   14b6c:	add	r2, r8, #2
   14b70:	add	r8, r8, #3
   14b74:	cmp	r2, r1
   14b78:	movcc	r1, #39	; 0x27
   14b7c:	strbcc	r1, [r5, r2]
   14b80:	ldr	r1, [sp, #88]	; 0x58
   14b84:	add	r2, r8, #1
   14b88:	mov	r0, r3
   14b8c:	cmp	r8, r1
   14b90:	movcc	r1, #92	; 0x5c
   14b94:	strbcc	r1, [r5, r8]
   14b98:	ldr	r1, [sp, #88]	; 0x58
   14b9c:	cmp	r2, r1
   14ba0:	bcs	14bb4 <__assert_fail@plt+0x3ab8>
   14ba4:	uxtb	r3, r6
   14ba8:	mov	r1, #48	; 0x30
   14bac:	orr	r3, r1, r3, lsr #6
   14bb0:	strb	r3, [r5, r2]
   14bb4:	ldr	r1, [sp, #88]	; 0x58
   14bb8:	add	r2, r8, #2
   14bbc:	add	r8, r8, #3
   14bc0:	cmp	r2, r1
   14bc4:	lsrcc	r3, r6, #3
   14bc8:	movcc	r1, #6
   14bcc:	bficc	r3, r1, #3, #29
   14bd0:	mov	r1, #6
   14bd4:	bfi	r6, r1, #3, #29
   14bd8:	strbcc	r3, [r5, r2]
   14bdc:	mov	r2, #1
   14be0:	b	14bf0 <__assert_fail@plt+0x3af4>
   14be4:	mov	r0, r3
   14be8:	mov	r1, #0
   14bec:	str	r1, [fp, #-52]	; 0xffffffcc
   14bf0:	mov	ip, r2
   14bf4:	and	r1, r2, #1
   14bf8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14bfc:	add	r3, r7, #1
   14c00:	cmp	r2, r3
   14c04:	bls	14c8c <__assert_fail@plt+0x3b90>
   14c08:	cmp	r1, #0
   14c0c:	mvn	r5, lr
   14c10:	movwne	r1, #1
   14c14:	orr	r5, r5, r1
   14c18:	tst	r5, #1
   14c1c:	bne	14c60 <__assert_fail@plt+0x3b64>
   14c20:	ldr	r1, [sp, #88]	; 0x58
   14c24:	ldr	r5, [fp, #-84]	; 0xffffffac
   14c28:	mov	r2, r4
   14c2c:	ldr	r4, [sp, #88]	; 0x58
   14c30:	ldr	r0, [sp, #24]
   14c34:	mov	lr, #0
   14c38:	cmp	r8, r1
   14c3c:	movcc	r1, #39	; 0x27
   14c40:	strbcc	r1, [r5, r8]
   14c44:	add	r1, r8, #1
   14c48:	add	r8, r8, #2
   14c4c:	cmp	r1, r4
   14c50:	movcc	r4, #39	; 0x27
   14c54:	strbcc	r4, [r5, r1]
   14c58:	mov	r4, r2
   14c5c:	b	14c64 <__assert_fail@plt+0x3b68>
   14c60:	ldr	r5, [fp, #-84]	; 0xffffffac
   14c64:	ldr	r1, [sp, #88]	; 0x58
   14c68:	mov	r2, ip
   14c6c:	cmp	r8, r1
   14c70:	ldr	r1, [sp, #72]	; 0x48
   14c74:	strbcc	r6, [r5, r8]
   14c78:	add	r8, r8, #1
   14c7c:	ldrb	r6, [r1, r7]
   14c80:	mov	r7, r3
   14c84:	mov	r3, r0
   14c88:	b	14aec <__assert_fail@plt+0x39f0>
   14c8c:	ldr	ip, [sp, #88]	; 0x58
   14c90:	cmp	r1, #0
   14c94:	movwne	r1, #1
   14c98:	str	r1, [fp, #-56]	; 0xffffffc8
   14c9c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14ca0:	cmp	r0, #0
   14ca4:	bne	14cd4 <__assert_fail@plt+0x3bd8>
   14ca8:	tst	lr, #1
   14cac:	beq	14cd4 <__assert_fail@plt+0x3bd8>
   14cb0:	cmp	r8, ip
   14cb4:	mov	lr, #0
   14cb8:	movcc	r0, #39	; 0x27
   14cbc:	strbcc	r0, [r5, r8]
   14cc0:	add	r0, r8, #1
   14cc4:	add	r8, r8, #2
   14cc8:	cmp	r0, ip
   14ccc:	movcc	r1, #39	; 0x27
   14cd0:	strbcc	r1, [r5, r0]
   14cd4:	mov	r1, r9
   14cd8:	mov	r0, r6
   14cdc:	cmp	r8, ip
   14ce0:	strbcc	r0, [r5, r8]
   14ce4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14ce8:	add	r8, r8, #1
   14cec:	and	r0, r0, r1
   14cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   14cf4:	mov	r3, sl
   14cf8:	add	r7, r7, #1
   14cfc:	b	141ec <__assert_fail@plt+0x30f0>
   14d00:	mov	r9, #0
   14d04:	b	14d48 <__assert_fail@plt+0x3c4c>
   14d08:	mov	r9, #0
   14d0c:	cmp	r2, r4
   14d10:	bls	14d48 <__assert_fail@plt+0x3c4c>
   14d14:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14d18:	ldr	r1, [sp, #24]
   14d1c:	add	r0, r4, r7
   14d20:	mov	r3, r1
   14d24:	ldrb	r1, [r0, r1]
   14d28:	cmp	r1, #0
   14d2c:	beq	14d54 <__assert_fail@plt+0x3c58>
   14d30:	add	r3, r3, #1
   14d34:	add	r1, r7, r3
   14d38:	cmp	r1, r2
   14d3c:	mov	r1, r3
   14d40:	bcc	14d20 <__assert_fail@plt+0x3c24>
   14d44:	b	1484c <__assert_fail@plt+0x3750>
   14d48:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14d4c:	ldr	r1, [sp, #24]
   14d50:	b	1484c <__assert_fail@plt+0x3750>
   14d54:	mov	r1, r3
   14d58:	b	1484c <__assert_fail@plt+0x3750>
   14d5c:	mov	r9, #0
   14d60:	mov	r4, r1
   14d64:	b	14508 <__assert_fail@plt+0x340c>
   14d68:	mov	sl, r7
   14d6c:	b	14d74 <__assert_fail@plt+0x3c78>
   14d70:	mvn	sl, #0
   14d74:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14d78:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14d7c:	eor	r0, r1, #2
   14d80:	orr	r0, r0, r8
   14d84:	clz	r0, r0
   14d88:	lsr	r0, r0, #5
   14d8c:	tst	r2, r0
   14d90:	bne	14e38 <__assert_fail@plt+0x3d3c>
   14d94:	subs	r0, r1, #2
   14d98:	movwne	r0, #1
   14d9c:	orr	r0, r2, r0
   14da0:	tst	r0, #1
   14da4:	ldreq	r0, [sp, #60]	; 0x3c
   14da8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   14dac:	eoreq	r0, r0, #1
   14db0:	tsteq	r0, #1
   14db4:	bne	14ecc <__assert_fail@plt+0x3dd0>
   14db8:	tst	r1, #1
   14dbc:	bne	14e98 <__assert_fail@plt+0x3d9c>
   14dc0:	ldr	r6, [sp, #56]	; 0x38
   14dc4:	mov	r9, #0
   14dc8:	cmp	r6, #0
   14dcc:	beq	14ec4 <__assert_fail@plt+0x3dc8>
   14dd0:	ldr	r0, [sp, #84]	; 0x54
   14dd4:	mov	r1, #0
   14dd8:	mov	r7, #2
   14ddc:	cmp	ip, #0
   14de0:	str	r1, [fp, #-48]	; 0xffffffd0
   14de4:	mov	r1, #0
   14de8:	str	r1, [fp, #-76]	; 0xffffffb4
   14dec:	beq	13f54 <__assert_fail@plt+0x2e58>
   14df0:	b	14ecc <__assert_fail@plt+0x3dd0>
   14df4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14df8:	ldr	r1, [fp, #12]
   14dfc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14e00:	mov	r5, r3
   14e04:	mov	ip, r6
   14e08:	mov	r3, sl
   14e0c:	b	14e5c <__assert_fail@plt+0x3d60>
   14e10:	tst	r4, #1
   14e14:	ldr	r5, [fp, #-84]	; 0xffffffac
   14e18:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14e1c:	ldr	r1, [fp, #12]
   14e20:	ldr	r3, [sp, #36]	; 0x24
   14e24:	mov	r0, #2
   14e28:	movwne	r0, #4
   14e2c:	mov	r2, r0
   14e30:	b	14e5c <__assert_fail@plt+0x3d60>
   14e34:	ldr	ip, [sp, #88]	; 0x58
   14e38:	ldr	r1, [sp, #84]	; 0x54
   14e3c:	mov	r0, #2
   14e40:	tst	r1, #1
   14e44:	movwne	r0, #4
   14e48:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14e4c:	ldr	r1, [fp, #12]
   14e50:	mov	r3, sl
   14e54:	cmp	r2, #2
   14e58:	moveq	r2, r0
   14e5c:	mov	r0, #0
   14e60:	bic	r1, r1, #2
   14e64:	str	r2, [sp]
   14e68:	mov	r2, r4
   14e6c:	str	r0, [sp, #8]
   14e70:	ldr	r0, [sp, #76]	; 0x4c
   14e74:	str	r1, [sp, #4]
   14e78:	mov	r1, ip
   14e7c:	str	r0, [sp, #12]
   14e80:	ldr	r0, [sp, #80]	; 0x50
   14e84:	str	r0, [sp, #16]
   14e88:	mov	r0, r5
   14e8c:	bl	13ec8 <__assert_fail@plt+0x2dcc>
   14e90:	mov	r8, r0
   14e94:	b	14f18 <__assert_fail@plt+0x3e1c>
   14e98:	mov	r0, #5
   14e9c:	ldr	r1, [sp, #56]	; 0x38
   14ea0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14ea4:	mov	r3, sl
   14ea8:	str	r0, [sp]
   14eac:	ldr	r0, [fp, #12]
   14eb0:	str	r0, [sp, #4]
   14eb4:	ldr	r0, [fp, #16]
   14eb8:	str	r0, [sp, #8]
   14ebc:	ldr	r0, [sp, #76]	; 0x4c
   14ec0:	b	14e7c <__assert_fail@plt+0x3d80>
   14ec4:	mov	r0, #0
   14ec8:	str	r0, [fp, #-76]	; 0xffffffb4
   14ecc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14ed0:	cmp	r1, #0
   14ed4:	beq	14f0c <__assert_fail@plt+0x3e10>
   14ed8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14edc:	tst	r0, #1
   14ee0:	bne	14f0c <__assert_fail@plt+0x3e10>
   14ee4:	ldrb	r0, [r1]
   14ee8:	cmp	r0, #0
   14eec:	beq	14f0c <__assert_fail@plt+0x3e10>
   14ef0:	add	r1, r1, #1
   14ef4:	cmp	r8, ip
   14ef8:	strbcc	r0, [r5, r8]
   14efc:	add	r8, r8, #1
   14f00:	ldrb	r0, [r1], #1
   14f04:	cmp	r0, #0
   14f08:	bne	14ef4 <__assert_fail@plt+0x3df8>
   14f0c:	cmp	r8, ip
   14f10:	movcc	r0, #0
   14f14:	strbcc	r0, [r5, r8]
   14f18:	mov	r0, r8
   14f1c:	sub	sp, fp, #28
   14f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f24:	mov	r0, #4
   14f28:	b	14e48 <__assert_fail@plt+0x3d4c>
   14f2c:	mov	r4, r1
   14f30:	b	14e38 <__assert_fail@plt+0x3d3c>
   14f34:	bl	110e4 <abort@plt>
   14f38:	mov	r3, r2
   14f3c:	mov	r2, #0
   14f40:	b	14f44 <__assert_fail@plt+0x3e48>
   14f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f48:	add	fp, sp, #28
   14f4c:	sub	sp, sp, #36	; 0x24
   14f50:	movw	r8, #37248	; 0x9180
   14f54:	cmp	r3, #0
   14f58:	mov	r4, r2
   14f5c:	str	r2, [sp, #24]
   14f60:	mov	r5, r1
   14f64:	mov	r6, r0
   14f68:	str	r0, [sp, #20]
   14f6c:	movt	r8, #2
   14f70:	movne	r8, r3
   14f74:	bl	1100c <__errno_location@plt>
   14f78:	str	r0, [sp, #28]
   14f7c:	ldr	r1, [r8, #40]	; 0x28
   14f80:	ldr	r2, [r8, #44]	; 0x2c
   14f84:	ldr	r7, [r0]
   14f88:	cmp	r4, #0
   14f8c:	add	sl, r8, #8
   14f90:	mov	r0, #0
   14f94:	ldm	r8, {r3, r9}
   14f98:	orreq	r9, r9, #1
   14f9c:	stm	sp, {r3, r9, sl}
   14fa0:	str	r1, [sp, #12]
   14fa4:	str	r2, [sp, #16]
   14fa8:	mov	r1, #0
   14fac:	mov	r2, r6
   14fb0:	mov	r3, r5
   14fb4:	str	r7, [sp, #32]
   14fb8:	mov	r7, r5
   14fbc:	bl	13ec8 <__assert_fail@plt+0x2dcc>
   14fc0:	add	r4, r0, #1
   14fc4:	mov	r5, r0
   14fc8:	mov	r0, r4
   14fcc:	bl	15cbc <__assert_fail@plt+0x4bc0>
   14fd0:	mov	r6, r0
   14fd4:	ldr	r0, [r8]
   14fd8:	ldr	r2, [r8, #44]	; 0x2c
   14fdc:	ldr	r1, [r8, #40]	; 0x28
   14fe0:	mov	r3, r7
   14fe4:	stm	sp, {r0, r9, sl}
   14fe8:	str	r2, [sp, #16]
   14fec:	ldr	r2, [sp, #20]
   14ff0:	str	r1, [sp, #12]
   14ff4:	mov	r0, r6
   14ff8:	mov	r1, r4
   14ffc:	bl	13ec8 <__assert_fail@plt+0x2dcc>
   15000:	ldr	r0, [sp, #24]
   15004:	ldr	r1, [sp, #32]
   15008:	ldr	r2, [sp, #28]
   1500c:	cmp	r0, #0
   15010:	str	r1, [r2]
   15014:	strne	r5, [r0]
   15018:	mov	r0, r6
   1501c:	sub	sp, fp, #28
   15020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15024:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15028:	add	fp, sp, #24
   1502c:	movw	r5, #37116	; 0x90fc
   15030:	movw	r8, #37112	; 0x90f8
   15034:	movt	r5, #2
   15038:	movt	r8, #2
   1503c:	ldr	r0, [r5]
   15040:	ldr	r4, [r8]
   15044:	cmp	r0, #2
   15048:	blt	15074 <__assert_fail@plt+0x3f78>
   1504c:	add	r7, r4, #12
   15050:	mov	r6, #0
   15054:	ldr	r0, [r7, r6, lsl #3]
   15058:	bl	13bc8 <__assert_fail@plt+0x2acc>
   1505c:	ldr	r1, [r5]
   15060:	add	r2, r6, #2
   15064:	add	r0, r6, #1
   15068:	mov	r6, r0
   1506c:	cmp	r2, r1
   15070:	blt	15054 <__assert_fail@plt+0x3f58>
   15074:	ldr	r0, [r4, #4]
   15078:	movw	r9, #37296	; 0x91b0
   1507c:	movw	r7, #37120	; 0x9100
   15080:	movt	r9, #2
   15084:	movt	r7, #2
   15088:	cmp	r0, r9
   1508c:	beq	1509c <__assert_fail@plt+0x3fa0>
   15090:	bl	13bc8 <__assert_fail@plt+0x2acc>
   15094:	mov	r0, #256	; 0x100
   15098:	stm	r7, {r0, r9}
   1509c:	cmp	r4, r7
   150a0:	beq	150b0 <__assert_fail@plt+0x3fb4>
   150a4:	mov	r0, r4
   150a8:	bl	13bc8 <__assert_fail@plt+0x2acc>
   150ac:	str	r7, [r8]
   150b0:	mov	r0, #1
   150b4:	str	r0, [r5]
   150b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150bc:	movw	r3, #37248	; 0x9180
   150c0:	mvn	r2, #0
   150c4:	movt	r3, #2
   150c8:	b	150cc <__assert_fail@plt+0x3fd0>
   150cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150d0:	add	fp, sp, #28
   150d4:	sub	sp, sp, #44	; 0x2c
   150d8:	mov	r7, r3
   150dc:	str	r2, [sp, #36]	; 0x24
   150e0:	str	r1, [sp, #32]
   150e4:	mov	r5, r0
   150e8:	bl	1100c <__errno_location@plt>
   150ec:	cmp	r5, #0
   150f0:	bmi	15260 <__assert_fail@plt+0x4164>
   150f4:	cmn	r5, #-2147483647	; 0x80000001
   150f8:	beq	15260 <__assert_fail@plt+0x4164>
   150fc:	movw	r8, #37116	; 0x90fc
   15100:	movw	r4, #37112	; 0x90f8
   15104:	str	r0, [sp, #28]
   15108:	ldr	r0, [r0]
   1510c:	movt	r8, #2
   15110:	movt	r4, #2
   15114:	ldr	r1, [r8]
   15118:	ldr	r6, [r4]
   1511c:	str	r0, [sp, #24]
   15120:	cmp	r1, r5
   15124:	ble	15130 <__assert_fail@plt+0x4034>
   15128:	mov	sl, r6
   1512c:	b	1519c <__assert_fail@plt+0x40a0>
   15130:	movw	r9, #37120	; 0x9100
   15134:	mov	r0, #8
   15138:	str	r1, [fp, #-32]	; 0xffffffe0
   1513c:	sub	r1, r5, r1
   15140:	mvn	r3, #-2147483648	; 0x80000000
   15144:	movt	r9, #2
   15148:	str	r0, [sp]
   1514c:	add	r2, r1, #1
   15150:	sub	r1, fp, #32
   15154:	subs	r0, r6, r9
   15158:	movne	r0, r6
   1515c:	bl	15dec <__assert_fail@plt+0x4cf0>
   15160:	mov	sl, r0
   15164:	cmp	r6, r9
   15168:	str	r0, [r4]
   1516c:	bne	15178 <__assert_fail@plt+0x407c>
   15170:	ldrd	r0, [r9]
   15174:	stm	sl, {r0, r1}
   15178:	ldr	r1, [r8]
   1517c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15180:	add	r0, sl, r1, lsl #3
   15184:	sub	r1, r2, r1
   15188:	lsl	r2, r1, #3
   1518c:	mov	r1, #0
   15190:	bl	11024 <memset@plt>
   15194:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15198:	str	r0, [r8]
   1519c:	mov	r9, sl
   151a0:	ldm	r7, {r0, r1}
   151a4:	orr	r8, r1, #1
   151a8:	add	r1, r7, #8
   151ac:	ldr	r2, [r7, #40]	; 0x28
   151b0:	ldr	r3, [r7, #44]	; 0x2c
   151b4:	ldr	r6, [r9, r5, lsl #3]!
   151b8:	str	r1, [sp, #20]
   151bc:	ldr	r4, [r9, #4]!
   151c0:	stm	sp, {r0, r8}
   151c4:	add	r0, sp, #8
   151c8:	stm	r0, {r1, r2, r3}
   151cc:	ldr	r2, [sp, #32]
   151d0:	ldr	r3, [sp, #36]	; 0x24
   151d4:	mov	r1, r6
   151d8:	mov	r0, r4
   151dc:	bl	13ec8 <__assert_fail@plt+0x2dcc>
   151e0:	cmp	r6, r0
   151e4:	bhi	15248 <__assert_fail@plt+0x414c>
   151e8:	add	r6, r0, #1
   151ec:	movw	r0, #37296	; 0x91b0
   151f0:	movt	r0, #2
   151f4:	str	r6, [sl, r5, lsl #3]
   151f8:	cmp	r4, r0
   151fc:	beq	15208 <__assert_fail@plt+0x410c>
   15200:	mov	r0, r4
   15204:	bl	13bc8 <__assert_fail@plt+0x2acc>
   15208:	mov	r0, r6
   1520c:	bl	15cbc <__assert_fail@plt+0x4bc0>
   15210:	str	r0, [r9]
   15214:	mov	r4, r0
   15218:	add	r3, sp, #8
   1521c:	ldr	r0, [r7]
   15220:	ldr	r1, [r7, #40]	; 0x28
   15224:	ldr	r2, [r7, #44]	; 0x2c
   15228:	stm	sp, {r0, r8}
   1522c:	ldr	r0, [sp, #20]
   15230:	stm	r3, {r0, r1, r2}
   15234:	ldr	r2, [sp, #32]
   15238:	ldr	r3, [sp, #36]	; 0x24
   1523c:	mov	r0, r4
   15240:	mov	r1, r6
   15244:	bl	13ec8 <__assert_fail@plt+0x2dcc>
   15248:	ldr	r0, [sp, #28]
   1524c:	ldr	r1, [sp, #24]
   15250:	str	r1, [r0]
   15254:	mov	r0, r4
   15258:	sub	sp, fp, #28
   1525c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15260:	bl	110e4 <abort@plt>
   15264:	movw	r3, #37248	; 0x9180
   15268:	movt	r3, #2
   1526c:	b	150cc <__assert_fail@plt+0x3fd0>
   15270:	movw	r3, #37248	; 0x9180
   15274:	mov	r1, r0
   15278:	mov	r0, #0
   1527c:	mvn	r2, #0
   15280:	movt	r3, #2
   15284:	b	150cc <__assert_fail@plt+0x3fd0>
   15288:	movw	r3, #37248	; 0x9180
   1528c:	mov	r2, r1
   15290:	mov	r1, r0
   15294:	mov	r0, #0
   15298:	movt	r3, #2
   1529c:	b	150cc <__assert_fail@plt+0x3fd0>
   152a0:	push	{fp, lr}
   152a4:	mov	fp, sp
   152a8:	sub	sp, sp, #48	; 0x30
   152ac:	vmov.i32	q8, #0	; 0x00000000
   152b0:	mov	ip, #32
   152b4:	mov	r3, sp
   152b8:	mov	lr, r2
   152bc:	cmp	r1, #10
   152c0:	add	r2, r3, #16
   152c4:	vst1.64	{d16-d17}, [r3], ip
   152c8:	vst1.64	{d16-d17}, [r2]
   152cc:	vst1.64	{d16-d17}, [r3]
   152d0:	beq	152f0 <__assert_fail@plt+0x41f4>
   152d4:	str	r1, [sp]
   152d8:	mov	r3, sp
   152dc:	mov	r1, lr
   152e0:	mvn	r2, #0
   152e4:	bl	150cc <__assert_fail@plt+0x3fd0>
   152e8:	mov	sp, fp
   152ec:	pop	{fp, pc}
   152f0:	bl	110e4 <abort@plt>
   152f4:	push	{r4, sl, fp, lr}
   152f8:	add	fp, sp, #8
   152fc:	sub	sp, sp, #48	; 0x30
   15300:	vmov.i32	q8, #0	; 0x00000000
   15304:	mov	ip, r3
   15308:	mov	r3, sp
   1530c:	mov	lr, #32
   15310:	cmp	r1, #10
   15314:	add	r4, r3, #16
   15318:	vst1.64	{d16-d17}, [r3], lr
   1531c:	vst1.64	{d16-d17}, [r4]
   15320:	vst1.64	{d16-d17}, [r3]
   15324:	beq	15344 <__assert_fail@plt+0x4248>
   15328:	str	r1, [sp]
   1532c:	mov	r1, r2
   15330:	mov	r3, sp
   15334:	mov	r2, ip
   15338:	bl	150cc <__assert_fail@plt+0x3fd0>
   1533c:	sub	sp, fp, #8
   15340:	pop	{r4, sl, fp, pc}
   15344:	bl	110e4 <abort@plt>
   15348:	mov	r2, r1
   1534c:	mov	r1, r0
   15350:	mov	r0, #0
   15354:	b	152a0 <__assert_fail@plt+0x41a4>
   15358:	mov	r3, r2
   1535c:	mov	r2, r1
   15360:	mov	r1, r0
   15364:	mov	r0, #0
   15368:	b	152f4 <__assert_fail@plt+0x41f8>
   1536c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15370:	add	fp, sp, #24
   15374:	sub	sp, sp, #48	; 0x30
   15378:	movw	r8, #37248	; 0x9180
   1537c:	mov	lr, r0
   15380:	mov	r3, sp
   15384:	mov	ip, r1
   15388:	movt	r8, #2
   1538c:	mov	r1, r3
   15390:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   15394:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   15398:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   1539c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   153a0:	ubfx	r0, r2, #5, #3
   153a4:	and	r2, r2, #31
   153a8:	mov	r4, #1
   153ac:	add	r0, r3, r0, lsl #2
   153b0:	ldr	r1, [r0, #8]
   153b4:	bic	r4, r4, r1, lsr r2
   153b8:	eor	r1, r1, r4, lsl r2
   153bc:	mov	r2, ip
   153c0:	str	r1, [r0, #8]
   153c4:	mov	r0, #0
   153c8:	mov	r1, lr
   153cc:	bl	150cc <__assert_fail@plt+0x3fd0>
   153d0:	sub	sp, fp, #24
   153d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153dc:	add	fp, sp, #24
   153e0:	sub	sp, sp, #48	; 0x30
   153e4:	movw	lr, #37248	; 0x9180
   153e8:	mov	ip, r0
   153ec:	mov	r3, sp
   153f0:	movt	lr, #2
   153f4:	mov	r2, r3
   153f8:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   153fc:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   15400:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   15404:	stm	r2, {r0, r4, r5, r6, r7, r8}
   15408:	ubfx	r0, r1, #5, #3
   1540c:	and	r1, r1, #31
   15410:	mov	r7, #1
   15414:	add	r0, r3, r0, lsl #2
   15418:	ldr	r2, [r0, #8]
   1541c:	bic	r7, r7, r2, lsr r1
   15420:	eor	r1, r2, r7, lsl r1
   15424:	mvn	r2, #0
   15428:	str	r1, [r0, #8]
   1542c:	mov	r0, #0
   15430:	mov	r1, ip
   15434:	bl	150cc <__assert_fail@plt+0x3fd0>
   15438:	sub	sp, fp, #24
   1543c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15440:	push	{r4, r5, r6, r7, fp, lr}
   15444:	add	fp, sp, #16
   15448:	sub	sp, sp, #48	; 0x30
   1544c:	movw	lr, #37248	; 0x9180
   15450:	mov	ip, r0
   15454:	mov	r3, sp
   15458:	movt	lr, #2
   1545c:	mov	r2, r3
   15460:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15464:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15468:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1546c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15470:	mov	r1, ip
   15474:	mvn	r2, #0
   15478:	ldr	r0, [sp, #12]
   1547c:	orr	r0, r0, #67108864	; 0x4000000
   15480:	str	r0, [sp, #12]
   15484:	mov	r0, #0
   15488:	bl	150cc <__assert_fail@plt+0x3fd0>
   1548c:	sub	sp, fp, #16
   15490:	pop	{r4, r5, r6, r7, fp, pc}
   15494:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15498:	add	fp, sp, #24
   1549c:	sub	sp, sp, #48	; 0x30
   154a0:	movw	r8, #37248	; 0x9180
   154a4:	mov	ip, r1
   154a8:	mov	lr, r0
   154ac:	mov	r3, sp
   154b0:	movt	r8, #2
   154b4:	mov	r2, r3
   154b8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   154bc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   154c0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   154c4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   154c8:	mov	r1, lr
   154cc:	mov	r2, ip
   154d0:	ldr	r0, [sp, #12]
   154d4:	orr	r0, r0, #67108864	; 0x4000000
   154d8:	str	r0, [sp, #12]
   154dc:	mov	r0, #0
   154e0:	bl	150cc <__assert_fail@plt+0x3fd0>
   154e4:	sub	sp, fp, #24
   154e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154f0:	add	fp, sp, #24
   154f4:	sub	sp, sp, #96	; 0x60
   154f8:	vmov.i32	q8, #0	; 0x00000000
   154fc:	mov	lr, sp
   15500:	mov	ip, r2
   15504:	cmp	r1, #10
   15508:	add	r3, lr, #16
   1550c:	mov	r2, lr
   15510:	vst1.64	{d16-d17}, [r3]
   15514:	mov	r3, #28
   15518:	vst1.64	{d16-d17}, [r2], r3
   1551c:	vst1.32	{d16-d17}, [r2]
   15520:	beq	15560 <__assert_fail@plt+0x4464>
   15524:	str	r1, [sp, #48]	; 0x30
   15528:	add	r3, sp, #48	; 0x30
   1552c:	ldm	lr!, {r2, r4, r5, r6, r7}
   15530:	add	r1, r3, #4
   15534:	stmia	r1!, {r2, r4, r5, r6, r7}
   15538:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1553c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15540:	mvn	r2, #0
   15544:	ldr	r1, [sp, #60]	; 0x3c
   15548:	orr	r1, r1, #67108864	; 0x4000000
   1554c:	str	r1, [sp, #60]	; 0x3c
   15550:	mov	r1, ip
   15554:	bl	150cc <__assert_fail@plt+0x3fd0>
   15558:	sub	sp, fp, #24
   1555c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15560:	bl	110e4 <abort@plt>
   15564:	push	{fp, lr}
   15568:	mov	fp, sp
   1556c:	sub	sp, sp, #8
   15570:	mvn	ip, #0
   15574:	str	ip, [sp]
   15578:	bl	15584 <__assert_fail@plt+0x4488>
   1557c:	mov	sp, fp
   15580:	pop	{fp, pc}
   15584:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15588:	add	fp, sp, #24
   1558c:	sub	sp, sp, #48	; 0x30
   15590:	movw	ip, #37248	; 0x9180
   15594:	mov	lr, r3
   15598:	mov	r3, sp
   1559c:	cmp	r1, #0
   155a0:	movt	ip, #2
   155a4:	cmpne	r2, #0
   155a8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   155ac:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   155b0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   155b4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   155b8:	mov	r3, #10
   155bc:	str	r3, [sp]
   155c0:	bne	155c8 <__assert_fail@plt+0x44cc>
   155c4:	bl	110e4 <abort@plt>
   155c8:	ldr	ip, [fp, #8]
   155cc:	str	r2, [sp, #44]	; 0x2c
   155d0:	str	r1, [sp, #40]	; 0x28
   155d4:	mov	r3, sp
   155d8:	mov	r1, lr
   155dc:	mov	r2, ip
   155e0:	bl	150cc <__assert_fail@plt+0x3fd0>
   155e4:	sub	sp, fp, #24
   155e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155ec:	push	{fp, lr}
   155f0:	mov	fp, sp
   155f4:	sub	sp, sp, #8
   155f8:	mov	r3, r2
   155fc:	mov	r2, r1
   15600:	mov	r1, r0
   15604:	mvn	r0, #0
   15608:	str	r0, [sp]
   1560c:	mov	r0, #0
   15610:	bl	15584 <__assert_fail@plt+0x4488>
   15614:	mov	sp, fp
   15618:	pop	{fp, pc}
   1561c:	push	{fp, lr}
   15620:	mov	fp, sp
   15624:	sub	sp, sp, #8
   15628:	mov	ip, r2
   1562c:	mov	r2, r1
   15630:	mov	r1, r0
   15634:	str	r3, [sp]
   15638:	mov	r0, #0
   1563c:	mov	r3, ip
   15640:	bl	15584 <__assert_fail@plt+0x4488>
   15644:	mov	sp, fp
   15648:	pop	{fp, pc}
   1564c:	movw	r3, #37128	; 0x9108
   15650:	movt	r3, #2
   15654:	b	150cc <__assert_fail@plt+0x3fd0>
   15658:	movw	r3, #37128	; 0x9108
   1565c:	mov	r2, r1
   15660:	mov	r1, r0
   15664:	mov	r0, #0
   15668:	movt	r3, #2
   1566c:	b	150cc <__assert_fail@plt+0x3fd0>
   15670:	movw	r3, #37128	; 0x9108
   15674:	mvn	r2, #0
   15678:	movt	r3, #2
   1567c:	b	150cc <__assert_fail@plt+0x3fd0>
   15680:	movw	r3, #37128	; 0x9108
   15684:	mov	r1, r0
   15688:	mov	r0, #0
   1568c:	mvn	r2, #0
   15690:	movt	r3, #2
   15694:	b	150cc <__assert_fail@plt+0x3fd0>
   15698:	push	{r4, r5, fp, lr}
   1569c:	add	fp, sp, #8
   156a0:	mov	r5, r0
   156a4:	mov	r4, r1
   156a8:	mov	r0, #0
   156ac:	mov	r2, #5
   156b0:	mov	r1, r5
   156b4:	bl	10f1c <dcgettext@plt>
   156b8:	cmp	r0, r5
   156bc:	popne	{r4, r5, fp, pc}
   156c0:	bl	168a0 <__assert_fail@plt+0x57a4>
   156c4:	ldrb	r1, [r0]
   156c8:	and	r1, r1, #223	; 0xdf
   156cc:	cmp	r1, #71	; 0x47
   156d0:	beq	15738 <__assert_fail@plt+0x463c>
   156d4:	cmp	r1, #85	; 0x55
   156d8:	bne	15790 <__assert_fail@plt+0x4694>
   156dc:	ldrb	r1, [r0, #1]
   156e0:	and	r1, r1, #223	; 0xdf
   156e4:	cmp	r1, #84	; 0x54
   156e8:	bne	15790 <__assert_fail@plt+0x4694>
   156ec:	ldrb	r1, [r0, #2]
   156f0:	and	r1, r1, #223	; 0xdf
   156f4:	cmp	r1, #70	; 0x46
   156f8:	bne	15790 <__assert_fail@plt+0x4694>
   156fc:	ldrb	r1, [r0, #3]
   15700:	cmp	r1, #45	; 0x2d
   15704:	bne	15790 <__assert_fail@plt+0x4694>
   15708:	ldrb	r1, [r0, #4]
   1570c:	cmp	r1, #56	; 0x38
   15710:	bne	15790 <__assert_fail@plt+0x4694>
   15714:	ldrb	r0, [r0, #5]
   15718:	cmp	r0, #0
   1571c:	bne	15790 <__assert_fail@plt+0x4694>
   15720:	ldrb	r1, [r5]
   15724:	movw	r2, #31745	; 0x7c01
   15728:	movw	r0, #31749	; 0x7c05
   1572c:	movt	r2, #1
   15730:	movt	r0, #1
   15734:	b	157c0 <__assert_fail@plt+0x46c4>
   15738:	ldrb	r1, [r0, #1]
   1573c:	and	r1, r1, #223	; 0xdf
   15740:	cmp	r1, #66	; 0x42
   15744:	bne	15790 <__assert_fail@plt+0x4694>
   15748:	ldrb	r1, [r0, #2]
   1574c:	cmp	r1, #49	; 0x31
   15750:	bne	15790 <__assert_fail@plt+0x4694>
   15754:	ldrb	r1, [r0, #3]
   15758:	cmp	r1, #56	; 0x38
   1575c:	bne	15790 <__assert_fail@plt+0x4694>
   15760:	ldrb	r1, [r0, #4]
   15764:	cmp	r1, #48	; 0x30
   15768:	bne	15790 <__assert_fail@plt+0x4694>
   1576c:	ldrb	r1, [r0, #5]
   15770:	cmp	r1, #51	; 0x33
   15774:	bne	15790 <__assert_fail@plt+0x4694>
   15778:	ldrb	r1, [r0, #6]
   1577c:	cmp	r1, #48	; 0x30
   15780:	bne	15790 <__assert_fail@plt+0x4694>
   15784:	ldrb	r0, [r0, #7]
   15788:	cmp	r0, #0
   1578c:	beq	157ac <__assert_fail@plt+0x46b0>
   15790:	movw	r1, #31739	; 0x7bfb
   15794:	movw	r0, #31743	; 0x7bff
   15798:	cmp	r4, #9
   1579c:	movt	r1, #1
   157a0:	movt	r0, #1
   157a4:	moveq	r0, r1
   157a8:	pop	{r4, r5, fp, pc}
   157ac:	ldrb	r1, [r5]
   157b0:	movw	r2, #31753	; 0x7c09
   157b4:	movw	r0, #31757	; 0x7c0d
   157b8:	movt	r2, #1
   157bc:	movt	r0, #1
   157c0:	cmp	r1, #96	; 0x60
   157c4:	moveq	r0, r2
   157c8:	pop	{r4, r5, fp, pc}
   157cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157d0:	add	fp, sp, #24
   157d4:	sub	sp, sp, #32
   157d8:	ldr	r6, [fp, #12]
   157dc:	ldr	r7, [fp, #8]
   157e0:	mov	r4, r2
   157e4:	mov	r8, r0
   157e8:	cmp	r1, #0
   157ec:	beq	15814 <__assert_fail@plt+0x4718>
   157f0:	movw	r2, #31844	; 0x7c64
   157f4:	mov	r5, r1
   157f8:	str	r3, [sp, #4]
   157fc:	str	r4, [sp]
   15800:	mov	r0, r8
   15804:	mov	r1, #1
   15808:	movt	r2, #1
   1580c:	mov	r3, r5
   15810:	b	1582c <__assert_fail@plt+0x4730>
   15814:	movw	r2, #31856	; 0x7c70
   15818:	str	r3, [sp]
   1581c:	mov	r0, r8
   15820:	mov	r1, #1
   15824:	mov	r3, r4
   15828:	movt	r2, #1
   1582c:	bl	11048 <__fprintf_chk@plt>
   15830:	movw	r1, #31863	; 0x7c77
   15834:	mov	r0, #0
   15838:	mov	r2, #5
   1583c:	movt	r1, #1
   15840:	bl	10f1c <dcgettext@plt>
   15844:	movw	r2, #32581	; 0x7f45
   15848:	mov	r3, r0
   1584c:	movw	r0, #2022	; 0x7e6
   15850:	mov	r1, #1
   15854:	movt	r2, #1
   15858:	str	r0, [sp]
   1585c:	mov	r0, r8
   15860:	bl	11048 <__fprintf_chk@plt>
   15864:	movw	r4, #29894	; 0x74c6
   15868:	mov	r1, r8
   1586c:	movt	r4, #1
   15870:	mov	r0, r4
   15874:	bl	10e8c <fputs_unlocked@plt>
   15878:	movw	r1, #31867	; 0x7c7b
   1587c:	mov	r0, #0
   15880:	mov	r2, #5
   15884:	movt	r1, #1
   15888:	bl	10f1c <dcgettext@plt>
   1588c:	movw	r3, #32038	; 0x7d26
   15890:	mov	r2, r0
   15894:	mov	r0, r8
   15898:	mov	r1, #1
   1589c:	movt	r3, #1
   158a0:	bl	11048 <__fprintf_chk@plt>
   158a4:	mov	r0, r4
   158a8:	mov	r1, r8
   158ac:	bl	10e8c <fputs_unlocked@plt>
   158b0:	cmp	r6, #9
   158b4:	bhi	15918 <__assert_fail@plt+0x481c>
   158b8:	add	r0, pc, #0
   158bc:	ldr	pc, [r0, r6, lsl #2]
   158c0:	strdeq	r5, [r1], -r0
   158c4:	andeq	r5, r1, r8, ror #17
   158c8:	andeq	r5, r1, r4, lsr #18
   158cc:	andeq	r5, r1, ip, asr #18
   158d0:	andeq	r5, r1, r4, ror r9
   158d4:	muleq	r1, ip, r9
   158d8:	andeq	r5, r1, r4, asr #19
   158dc:	strdeq	r5, [r1], -ip
   158e0:	muleq	r1, ip, sl
   158e4:	andeq	r5, r1, r4, asr #20
   158e8:	movw	r1, #32072	; 0x7d48
   158ec:	mov	r0, #0
   158f0:	mov	r2, #5
   158f4:	movt	r1, #1
   158f8:	bl	10f1c <dcgettext@plt>
   158fc:	ldr	r3, [r7]
   15900:	mov	r2, r0
   15904:	mov	r0, r8
   15908:	mov	r1, #1
   1590c:	sub	sp, fp, #24
   15910:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15914:	b	11048 <__fprintf_chk@plt>
   15918:	movw	r1, #32391	; 0x7e87
   1591c:	movt	r1, #1
   15920:	b	15a4c <__assert_fail@plt+0x4950>
   15924:	movw	r1, #32088	; 0x7d58
   15928:	mov	r0, #0
   1592c:	mov	r2, #5
   15930:	movt	r1, #1
   15934:	bl	10f1c <dcgettext@plt>
   15938:	mov	r2, r0
   1593c:	ldr	r3, [r7]
   15940:	ldr	r0, [r7, #4]
   15944:	str	r0, [sp]
   15948:	b	15a38 <__assert_fail@plt+0x493c>
   1594c:	movw	r1, #32111	; 0x7d6f
   15950:	mov	r0, #0
   15954:	mov	r2, #5
   15958:	movt	r1, #1
   1595c:	bl	10f1c <dcgettext@plt>
   15960:	mov	r2, r0
   15964:	ldr	r3, [r7]
   15968:	ldmib	r7, {r0, r1}
   1596c:	stm	sp, {r0, r1}
   15970:	b	15a38 <__assert_fail@plt+0x493c>
   15974:	movw	r1, #32139	; 0x7d8b
   15978:	mov	r0, #0
   1597c:	mov	r2, #5
   15980:	movt	r1, #1
   15984:	bl	10f1c <dcgettext@plt>
   15988:	ldr	r3, [r7]
   1598c:	mov	r2, r0
   15990:	ldmib	r7, {r0, r1, r7}
   15994:	stm	sp, {r0, r1, r7}
   15998:	b	15a38 <__assert_fail@plt+0x493c>
   1599c:	movw	r1, #32171	; 0x7dab
   159a0:	mov	r0, #0
   159a4:	mov	r2, #5
   159a8:	movt	r1, #1
   159ac:	bl	10f1c <dcgettext@plt>
   159b0:	ldr	r3, [r7]
   159b4:	mov	r2, r0
   159b8:	ldmib	r7, {r0, r1, r6, r7}
   159bc:	stm	sp, {r0, r1, r6, r7}
   159c0:	b	15a38 <__assert_fail@plt+0x493c>
   159c4:	movw	r1, #32207	; 0x7dcf
   159c8:	mov	r0, #0
   159cc:	mov	r2, #5
   159d0:	movt	r1, #1
   159d4:	bl	10f1c <dcgettext@plt>
   159d8:	mov	r2, r0
   159dc:	ldr	r3, [r7]
   159e0:	ldmib	r7, {r0, r1, r6}
   159e4:	ldr	r5, [r7, #16]
   159e8:	ldr	r7, [r7, #20]
   159ec:	stm	sp, {r0, r1, r6}
   159f0:	str	r5, [sp, #12]
   159f4:	str	r7, [sp, #16]
   159f8:	b	15a38 <__assert_fail@plt+0x493c>
   159fc:	movw	r1, #32247	; 0x7df7
   15a00:	mov	r0, #0
   15a04:	mov	r2, #5
   15a08:	movt	r1, #1
   15a0c:	bl	10f1c <dcgettext@plt>
   15a10:	mov	r2, r0
   15a14:	ldr	r3, [r7]
   15a18:	ldmib	r7, {r0, r1, r6}
   15a1c:	ldr	r5, [r7, #16]
   15a20:	ldr	r4, [r7, #20]
   15a24:	ldr	r7, [r7, #24]
   15a28:	stm	sp, {r0, r1, r6}
   15a2c:	str	r5, [sp, #12]
   15a30:	str	r4, [sp, #16]
   15a34:	str	r7, [sp, #20]
   15a38:	mov	r0, r8
   15a3c:	mov	r1, #1
   15a40:	b	15aec <__assert_fail@plt+0x49f0>
   15a44:	movw	r1, #32339	; 0x7e53
   15a48:	movt	r1, #1
   15a4c:	mov	r0, #0
   15a50:	mov	r2, #5
   15a54:	bl	10f1c <dcgettext@plt>
   15a58:	mov	ip, r0
   15a5c:	ldr	r3, [r7]
   15a60:	ldr	r0, [r7, #4]
   15a64:	ldr	r1, [r7, #8]
   15a68:	ldr	r6, [r7, #12]
   15a6c:	ldr	r5, [r7, #16]
   15a70:	ldr	r4, [r7, #20]
   15a74:	ldr	r2, [r7, #24]
   15a78:	ldr	lr, [r7, #28]
   15a7c:	ldr	r7, [r7, #32]
   15a80:	stm	sp, {r0, r1, r6}
   15a84:	str	r5, [sp, #12]
   15a88:	str	r4, [sp, #16]
   15a8c:	str	r2, [sp, #20]
   15a90:	str	lr, [sp, #24]
   15a94:	str	r7, [sp, #28]
   15a98:	b	15ae0 <__assert_fail@plt+0x49e4>
   15a9c:	movw	r1, #32291	; 0x7e23
   15aa0:	mov	r0, #0
   15aa4:	mov	r2, #5
   15aa8:	movt	r1, #1
   15aac:	bl	10f1c <dcgettext@plt>
   15ab0:	mov	ip, r0
   15ab4:	ldr	r3, [r7]
   15ab8:	ldmib	r7, {r0, r1, r6}
   15abc:	ldr	r5, [r7, #16]
   15ac0:	ldr	r4, [r7, #20]
   15ac4:	ldr	r2, [r7, #24]
   15ac8:	ldr	r7, [r7, #28]
   15acc:	stm	sp, {r0, r1, r6}
   15ad0:	str	r5, [sp, #12]
   15ad4:	str	r4, [sp, #16]
   15ad8:	str	r2, [sp, #20]
   15adc:	str	r7, [sp, #24]
   15ae0:	mov	r0, r8
   15ae4:	mov	r1, #1
   15ae8:	mov	r2, ip
   15aec:	bl	11048 <__fprintf_chk@plt>
   15af0:	sub	sp, fp, #24
   15af4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15af8:	push	{r4, sl, fp, lr}
   15afc:	add	fp, sp, #8
   15b00:	sub	sp, sp, #8
   15b04:	ldr	ip, [fp, #8]
   15b08:	mov	lr, #0
   15b0c:	ldr	r4, [ip, lr, lsl #2]
   15b10:	add	lr, lr, #1
   15b14:	cmp	r4, #0
   15b18:	bne	15b0c <__assert_fail@plt+0x4a10>
   15b1c:	sub	r4, lr, #1
   15b20:	str	ip, [sp]
   15b24:	str	r4, [sp, #4]
   15b28:	bl	157cc <__assert_fail@plt+0x46d0>
   15b2c:	sub	sp, fp, #8
   15b30:	pop	{r4, sl, fp, pc}
   15b34:	push	{r4, r5, fp, lr}
   15b38:	add	fp, sp, #8
   15b3c:	sub	sp, sp, #48	; 0x30
   15b40:	ldr	r4, [fp, #8]
   15b44:	mov	ip, #0
   15b48:	add	lr, sp, #8
   15b4c:	ldr	r5, [r4]
   15b50:	cmp	r5, #0
   15b54:	str	r5, [lr, ip, lsl #2]
   15b58:	beq	15b70 <__assert_fail@plt+0x4a74>
   15b5c:	add	ip, ip, #1
   15b60:	add	r4, r4, #4
   15b64:	cmp	ip, #10
   15b68:	bne	15b4c <__assert_fail@plt+0x4a50>
   15b6c:	mov	ip, #10
   15b70:	str	lr, [sp]
   15b74:	str	ip, [sp, #4]
   15b78:	bl	157cc <__assert_fail@plt+0x46d0>
   15b7c:	sub	sp, fp, #8
   15b80:	pop	{r4, r5, fp, pc}
   15b84:	push	{fp, lr}
   15b88:	mov	fp, sp
   15b8c:	sub	sp, sp, #8
   15b90:	add	ip, fp, #8
   15b94:	str	ip, [sp, #4]
   15b98:	str	ip, [sp]
   15b9c:	bl	15b34 <__assert_fail@plt+0x4a38>
   15ba0:	mov	sp, fp
   15ba4:	pop	{fp, pc}
   15ba8:	push	{fp, lr}
   15bac:	mov	fp, sp
   15bb0:	movw	r0, #37204	; 0x9154
   15bb4:	movt	r0, #2
   15bb8:	ldr	r1, [r0]
   15bbc:	movw	r0, #29894	; 0x74c6
   15bc0:	movt	r0, #1
   15bc4:	bl	10e8c <fputs_unlocked@plt>
   15bc8:	movw	r1, #32451	; 0x7ec3
   15bcc:	mov	r0, #0
   15bd0:	mov	r2, #5
   15bd4:	movt	r1, #1
   15bd8:	bl	10f1c <dcgettext@plt>
   15bdc:	movw	r2, #32471	; 0x7ed7
   15be0:	mov	r1, r0
   15be4:	mov	r0, #1
   15be8:	movt	r2, #1
   15bec:	bl	11030 <__printf_chk@plt>
   15bf0:	movw	r1, #32493	; 0x7eed
   15bf4:	mov	r0, #0
   15bf8:	mov	r2, #5
   15bfc:	movt	r1, #1
   15c00:	bl	10f1c <dcgettext@plt>
   15c04:	movw	r2, #29369	; 0x72b9
   15c08:	movw	r3, #29703	; 0x7407
   15c0c:	mov	r1, r0
   15c10:	mov	r0, #1
   15c14:	movt	r2, #1
   15c18:	movt	r3, #1
   15c1c:	bl	11030 <__printf_chk@plt>
   15c20:	movw	r1, #32513	; 0x7f01
   15c24:	mov	r0, #0
   15c28:	mov	r2, #5
   15c2c:	movt	r1, #1
   15c30:	bl	10f1c <dcgettext@plt>
   15c34:	movw	r2, #32552	; 0x7f28
   15c38:	mov	r1, r0
   15c3c:	mov	r0, #1
   15c40:	movt	r2, #1
   15c44:	pop	{fp, lr}
   15c48:	b	11030 <__printf_chk@plt>
   15c4c:	b	15c50 <__assert_fail@plt+0x4b54>
   15c50:	push	{r4, r5, r6, sl, fp, lr}
   15c54:	add	fp, sp, #16
   15c58:	mov	r4, r2
   15c5c:	mov	r5, r1
   15c60:	mov	r6, r0
   15c64:	bl	1693c <__assert_fail@plt+0x5840>
   15c68:	cmp	r0, #0
   15c6c:	popne	{r4, r5, r6, sl, fp, pc}
   15c70:	cmp	r6, #0
   15c74:	beq	15c88 <__assert_fail@plt+0x4b8c>
   15c78:	cmp	r5, #0
   15c7c:	cmpne	r4, #0
   15c80:	bne	15c88 <__assert_fail@plt+0x4b8c>
   15c84:	pop	{r4, r5, r6, sl, fp, pc}
   15c88:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15c8c:	push	{fp, lr}
   15c90:	mov	fp, sp
   15c94:	bl	167a0 <__assert_fail@plt+0x56a4>
   15c98:	cmp	r0, #0
   15c9c:	popne	{fp, pc}
   15ca0:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15ca4:	push	{fp, lr}
   15ca8:	mov	fp, sp
   15cac:	bl	167a0 <__assert_fail@plt+0x56a4>
   15cb0:	cmp	r0, #0
   15cb4:	popne	{fp, pc}
   15cb8:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15cbc:	push	{fp, lr}
   15cc0:	mov	fp, sp
   15cc4:	bl	167a0 <__assert_fail@plt+0x56a4>
   15cc8:	cmp	r0, #0
   15ccc:	popne	{fp, pc}
   15cd0:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15cd4:	push	{r4, r5, fp, lr}
   15cd8:	add	fp, sp, #8
   15cdc:	mov	r4, r1
   15ce0:	mov	r5, r0
   15ce4:	bl	167d0 <__assert_fail@plt+0x56d4>
   15ce8:	cmp	r0, #0
   15cec:	popne	{r4, r5, fp, pc}
   15cf0:	cmp	r5, #0
   15cf4:	beq	15d04 <__assert_fail@plt+0x4c08>
   15cf8:	cmp	r4, #0
   15cfc:	bne	15d04 <__assert_fail@plt+0x4c08>
   15d00:	pop	{r4, r5, fp, pc}
   15d04:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15d08:	push	{fp, lr}
   15d0c:	mov	fp, sp
   15d10:	cmp	r1, #0
   15d14:	orreq	r1, r1, #1
   15d18:	bl	167d0 <__assert_fail@plt+0x56d4>
   15d1c:	cmp	r0, #0
   15d20:	popne	{fp, pc}
   15d24:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15d28:	push	{fp, lr}
   15d2c:	mov	fp, sp
   15d30:	clz	r3, r2
   15d34:	lsr	ip, r3, #5
   15d38:	clz	r3, r1
   15d3c:	lsr	r3, r3, #5
   15d40:	orrs	r3, r3, ip
   15d44:	movwne	r1, #1
   15d48:	movwne	r2, #1
   15d4c:	bl	1693c <__assert_fail@plt+0x5840>
   15d50:	cmp	r0, #0
   15d54:	popne	{fp, pc}
   15d58:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15d5c:	push	{fp, lr}
   15d60:	mov	fp, sp
   15d64:	mov	r2, r1
   15d68:	mov	r1, r0
   15d6c:	mov	r0, #0
   15d70:	bl	1693c <__assert_fail@plt+0x5840>
   15d74:	cmp	r0, #0
   15d78:	popne	{fp, pc}
   15d7c:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15d80:	mov	r2, r1
   15d84:	mov	r1, r0
   15d88:	mov	r0, #0
   15d8c:	b	15d28 <__assert_fail@plt+0x4c2c>
   15d90:	mov	r2, #1
   15d94:	b	15d98 <__assert_fail@plt+0x4c9c>
   15d98:	push	{r4, r5, fp, lr}
   15d9c:	add	fp, sp, #8
   15da0:	ldr	r5, [r1]
   15da4:	mov	r4, r1
   15da8:	cmp	r0, #0
   15dac:	beq	15dc4 <__assert_fail@plt+0x4cc8>
   15db0:	mov	r1, #1
   15db4:	add	r1, r1, r5, lsr #1
   15db8:	adds	r5, r5, r1
   15dbc:	bcc	15ddc <__assert_fail@plt+0x4ce0>
   15dc0:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15dc4:	cmp	r5, #0
   15dc8:	bne	15ddc <__assert_fail@plt+0x4ce0>
   15dcc:	mov	r1, #64	; 0x40
   15dd0:	cmp	r2, #64	; 0x40
   15dd4:	udiv	r5, r1, r2
   15dd8:	addhi	r5, r5, #1
   15ddc:	mov	r1, r5
   15de0:	bl	15c50 <__assert_fail@plt+0x4b54>
   15de4:	str	r5, [r4]
   15de8:	pop	{r4, r5, fp, pc}
   15dec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15df0:	add	fp, sp, #24
   15df4:	ldr	r6, [r1]
   15df8:	mov	r8, r1
   15dfc:	ldr	r4, [fp, #8]
   15e00:	add	r1, r6, r6, asr #1
   15e04:	cmp	r1, r6
   15e08:	mvnvs	r1, #-2147483648	; 0x80000000
   15e0c:	cmp	r1, r3
   15e10:	mov	r5, r1
   15e14:	movgt	r5, r3
   15e18:	cmn	r3, #1
   15e1c:	movle	r5, r1
   15e20:	cmn	r4, #1
   15e24:	ble	15e44 <__assert_fail@plt+0x4d48>
   15e28:	cmp	r4, #0
   15e2c:	beq	15e98 <__assert_fail@plt+0x4d9c>
   15e30:	cmn	r5, #1
   15e34:	ble	15e6c <__assert_fail@plt+0x4d70>
   15e38:	mvn	r7, #-2147483648	; 0x80000000
   15e3c:	udiv	r1, r7, r4
   15e40:	b	15e60 <__assert_fail@plt+0x4d64>
   15e44:	cmn	r5, #1
   15e48:	ble	15e88 <__assert_fail@plt+0x4d8c>
   15e4c:	cmn	r4, #1
   15e50:	beq	15e98 <__assert_fail@plt+0x4d9c>
   15e54:	mov	r1, #-2147483648	; 0x80000000
   15e58:	mvn	r7, #-2147483648	; 0x80000000
   15e5c:	sdiv	r1, r1, r4
   15e60:	cmp	r1, r5
   15e64:	bge	15e98 <__assert_fail@plt+0x4d9c>
   15e68:	b	15ea8 <__assert_fail@plt+0x4dac>
   15e6c:	beq	15e98 <__assert_fail@plt+0x4d9c>
   15e70:	mov	r1, #-2147483648	; 0x80000000
   15e74:	mvn	r7, #-2147483648	; 0x80000000
   15e78:	sdiv	r1, r1, r5
   15e7c:	cmp	r1, r4
   15e80:	bge	15e98 <__assert_fail@plt+0x4d9c>
   15e84:	b	15ea8 <__assert_fail@plt+0x4dac>
   15e88:	mvn	r7, #-2147483648	; 0x80000000
   15e8c:	sdiv	r1, r7, r4
   15e90:	cmp	r5, r1
   15e94:	blt	15ea8 <__assert_fail@plt+0x4dac>
   15e98:	mul	r1, r5, r4
   15e9c:	mov	r7, #64	; 0x40
   15ea0:	cmp	r1, #63	; 0x3f
   15ea4:	bgt	15eb0 <__assert_fail@plt+0x4db4>
   15ea8:	sdiv	r5, r7, r4
   15eac:	mul	r1, r5, r4
   15eb0:	cmp	r0, #0
   15eb4:	moveq	r7, #0
   15eb8:	streq	r7, [r8]
   15ebc:	sub	r7, r5, r6
   15ec0:	cmp	r7, r2
   15ec4:	bge	15f68 <__assert_fail@plt+0x4e6c>
   15ec8:	add	r5, r6, r2
   15ecc:	mov	r2, #0
   15ed0:	mov	r1, #0
   15ed4:	cmp	r5, r3
   15ed8:	movwgt	r2, #1
   15edc:	cmn	r3, #1
   15ee0:	movwgt	r1, #1
   15ee4:	cmp	r5, r6
   15ee8:	bvs	15f50 <__assert_fail@plt+0x4e54>
   15eec:	ands	r1, r1, r2
   15ef0:	bne	15f50 <__assert_fail@plt+0x4e54>
   15ef4:	cmn	r4, #1
   15ef8:	ble	15f18 <__assert_fail@plt+0x4e1c>
   15efc:	cmp	r4, #0
   15f00:	beq	15f64 <__assert_fail@plt+0x4e68>
   15f04:	cmn	r5, #1
   15f08:	ble	15f3c <__assert_fail@plt+0x4e40>
   15f0c:	mvn	r1, #-2147483648	; 0x80000000
   15f10:	udiv	r1, r1, r4
   15f14:	b	15f30 <__assert_fail@plt+0x4e34>
   15f18:	cmn	r5, #1
   15f1c:	ble	15f54 <__assert_fail@plt+0x4e58>
   15f20:	cmn	r4, #1
   15f24:	beq	15f64 <__assert_fail@plt+0x4e68>
   15f28:	mov	r1, #-2147483648	; 0x80000000
   15f2c:	sdiv	r1, r1, r4
   15f30:	cmp	r1, r5
   15f34:	bge	15f64 <__assert_fail@plt+0x4e68>
   15f38:	b	15f50 <__assert_fail@plt+0x4e54>
   15f3c:	beq	15f64 <__assert_fail@plt+0x4e68>
   15f40:	mov	r1, #-2147483648	; 0x80000000
   15f44:	sdiv	r1, r1, r5
   15f48:	cmp	r1, r4
   15f4c:	bge	15f64 <__assert_fail@plt+0x4e68>
   15f50:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15f54:	mvn	r1, #-2147483648	; 0x80000000
   15f58:	sdiv	r1, r1, r4
   15f5c:	cmp	r5, r1
   15f60:	blt	15f50 <__assert_fail@plt+0x4e54>
   15f64:	mul	r1, r5, r4
   15f68:	bl	15cd4 <__assert_fail@plt+0x4bd8>
   15f6c:	str	r5, [r8]
   15f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f74:	push	{fp, lr}
   15f78:	mov	fp, sp
   15f7c:	mov	r1, #1
   15f80:	bl	1674c <__assert_fail@plt+0x5650>
   15f84:	cmp	r0, #0
   15f88:	popne	{fp, pc}
   15f8c:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15f90:	push	{fp, lr}
   15f94:	mov	fp, sp
   15f98:	bl	1674c <__assert_fail@plt+0x5650>
   15f9c:	cmp	r0, #0
   15fa0:	popne	{fp, pc}
   15fa4:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15fa8:	push	{fp, lr}
   15fac:	mov	fp, sp
   15fb0:	mov	r1, #1
   15fb4:	bl	1674c <__assert_fail@plt+0x5650>
   15fb8:	cmp	r0, #0
   15fbc:	popne	{fp, pc}
   15fc0:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15fc4:	push	{fp, lr}
   15fc8:	mov	fp, sp
   15fcc:	bl	1674c <__assert_fail@plt+0x5650>
   15fd0:	cmp	r0, #0
   15fd4:	popne	{fp, pc}
   15fd8:	bl	160b8 <__assert_fail@plt+0x4fbc>
   15fdc:	push	{r4, r5, fp, lr}
   15fe0:	add	fp, sp, #8
   15fe4:	mov	r5, r0
   15fe8:	mov	r0, r1
   15fec:	mov	r4, r1
   15ff0:	bl	167a0 <__assert_fail@plt+0x56a4>
   15ff4:	cmp	r0, #0
   15ff8:	beq	1600c <__assert_fail@plt+0x4f10>
   15ffc:	mov	r1, r5
   16000:	mov	r2, r4
   16004:	pop	{r4, r5, fp, lr}
   16008:	b	10eec <memcpy@plt>
   1600c:	bl	160b8 <__assert_fail@plt+0x4fbc>
   16010:	push	{r4, r5, fp, lr}
   16014:	add	fp, sp, #8
   16018:	mov	r5, r0
   1601c:	mov	r0, r1
   16020:	mov	r4, r1
   16024:	bl	167a0 <__assert_fail@plt+0x56a4>
   16028:	cmp	r0, #0
   1602c:	beq	16040 <__assert_fail@plt+0x4f44>
   16030:	mov	r1, r5
   16034:	mov	r2, r4
   16038:	pop	{r4, r5, fp, lr}
   1603c:	b	10eec <memcpy@plt>
   16040:	bl	160b8 <__assert_fail@plt+0x4fbc>
   16044:	push	{r4, r5, fp, lr}
   16048:	add	fp, sp, #8
   1604c:	mov	r5, r0
   16050:	add	r0, r1, #1
   16054:	mov	r4, r1
   16058:	bl	167a0 <__assert_fail@plt+0x56a4>
   1605c:	cmp	r0, #0
   16060:	beq	1607c <__assert_fail@plt+0x4f80>
   16064:	mov	r1, #0
   16068:	mov	r2, r4
   1606c:	strb	r1, [r0, r4]
   16070:	mov	r1, r5
   16074:	pop	{r4, r5, fp, lr}
   16078:	b	10eec <memcpy@plt>
   1607c:	bl	160b8 <__assert_fail@plt+0x4fbc>
   16080:	push	{r4, r5, fp, lr}
   16084:	add	fp, sp, #8
   16088:	mov	r4, r0
   1608c:	bl	10ff4 <strlen@plt>
   16090:	add	r5, r0, #1
   16094:	mov	r0, r5
   16098:	bl	167a0 <__assert_fail@plt+0x56a4>
   1609c:	cmp	r0, #0
   160a0:	beq	160b4 <__assert_fail@plt+0x4fb8>
   160a4:	mov	r1, r4
   160a8:	mov	r2, r5
   160ac:	pop	{r4, r5, fp, lr}
   160b0:	b	10eec <memcpy@plt>
   160b4:	bl	160b8 <__assert_fail@plt+0x4fbc>
   160b8:	push	{fp, lr}
   160bc:	mov	fp, sp
   160c0:	movw	r0, #37108	; 0x90f4
   160c4:	movw	r1, #32628	; 0x7f74
   160c8:	mov	r2, #5
   160cc:	movt	r0, #2
   160d0:	movt	r1, #1
   160d4:	ldr	r4, [r0]
   160d8:	mov	r0, #0
   160dc:	bl	10f1c <dcgettext@plt>
   160e0:	movw	r2, #29348	; 0x72a4
   160e4:	mov	r3, r0
   160e8:	mov	r0, r4
   160ec:	mov	r1, #0
   160f0:	movt	r2, #1
   160f4:	bl	10f88 <error@plt>
   160f8:	bl	110e4 <abort@plt>
   160fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16100:	add	fp, sp, #28
   16104:	sub	sp, sp, #28
   16108:	cmp	r2, #37	; 0x25
   1610c:	str	r3, [sp, #12]
   16110:	bcs	16624 <__assert_fail@plt+0x5528>
   16114:	ldr	sl, [fp, #8]
   16118:	mov	r4, r2
   1611c:	mov	r6, r1
   16120:	mov	r5, r0
   16124:	bl	1100c <__errno_location@plt>
   16128:	cmp	r6, #0
   1612c:	add	r8, sp, #24
   16130:	mov	r7, r0
   16134:	mov	r0, #0
   16138:	mov	r2, r4
   1613c:	movne	r8, r6
   16140:	str	r0, [r7]
   16144:	mov	r0, r5
   16148:	mov	r1, r8
   1614c:	bl	11060 <strtoimax@plt>
   16150:	str	r1, [sp, #20]
   16154:	str	r0, [sp, #16]
   16158:	ldr	r4, [r8]
   1615c:	cmp	r4, r5
   16160:	beq	1618c <__assert_fail@plt+0x5090>
   16164:	mov	r6, r0
   16168:	ldr	r0, [r7]
   1616c:	mov	r9, r1
   16170:	cmp	r0, #0
   16174:	beq	161cc <__assert_fail@plt+0x50d0>
   16178:	mov	r7, #4
   1617c:	cmp	r0, #34	; 0x22
   16180:	bne	16618 <__assert_fail@plt+0x551c>
   16184:	mov	r7, #1
   16188:	b	161d0 <__assert_fail@plt+0x50d4>
   1618c:	mov	r7, #4
   16190:	cmp	sl, #0
   16194:	beq	16618 <__assert_fail@plt+0x551c>
   16198:	ldrb	r1, [r5]
   1619c:	cmp	r1, #0
   161a0:	beq	16618 <__assert_fail@plt+0x551c>
   161a4:	mov	r0, sl
   161a8:	bl	11000 <strchr@plt>
   161ac:	cmp	r0, #0
   161b0:	beq	16618 <__assert_fail@plt+0x551c>
   161b4:	mov	r9, #0
   161b8:	mov	r6, #1
   161bc:	mov	r7, #0
   161c0:	str	r9, [sp, #20]
   161c4:	str	r6, [sp, #16]
   161c8:	b	161d8 <__assert_fail@plt+0x50dc>
   161cc:	mov	r7, r0
   161d0:	cmp	sl, #0
   161d4:	beq	1627c <__assert_fail@plt+0x5180>
   161d8:	ldrb	r5, [r4]
   161dc:	cmp	r5, #0
   161e0:	beq	16284 <__assert_fail@plt+0x5188>
   161e4:	mov	r0, sl
   161e8:	mov	r1, r5
   161ec:	bl	11000 <strchr@plt>
   161f0:	cmp	r0, #0
   161f4:	beq	1628c <__assert_fail@plt+0x5190>
   161f8:	sub	r0, r5, #69	; 0x45
   161fc:	str	r7, [sp, #4]
   16200:	mov	r1, #1
   16204:	mov	r7, #1024	; 0x400
   16208:	cmp	r0, #21
   1620c:	str	r1, [sp, #8]
   16210:	bhi	16228 <__assert_fail@plt+0x512c>
   16214:	movw	r2, #35141	; 0x8945
   16218:	mov	r1, #1
   1621c:	movt	r2, #48	; 0x30
   16220:	tst	r2, r1, lsl r0
   16224:	bne	16244 <__assert_fail@plt+0x5148>
   16228:	sub	r0, r5, #103	; 0x67
   1622c:	cmp	r0, #13
   16230:	bhi	1629c <__assert_fail@plt+0x51a0>
   16234:	mov	r1, #1
   16238:	movw	r2, #8273	; 0x2051
   1623c:	tst	r2, r1, lsl r0
   16240:	beq	1629c <__assert_fail@plt+0x51a0>
   16244:	ldr	r0, [fp, #8]
   16248:	mov	r1, #48	; 0x30
   1624c:	bl	11000 <strchr@plt>
   16250:	cmp	r0, #0
   16254:	beq	1629c <__assert_fail@plt+0x51a0>
   16258:	ldrb	r0, [r4, #1]
   1625c:	ldr	sl, [sp, #12]
   16260:	cmp	r0, #66	; 0x42
   16264:	cmpne	r0, #68	; 0x44
   16268:	bne	16370 <__assert_fail@plt+0x5274>
   1626c:	mov	r0, #2
   16270:	mov	r7, #1000	; 0x3e8
   16274:	str	r0, [sp, #8]
   16278:	b	162a0 <__assert_fail@plt+0x51a4>
   1627c:	ldr	r0, [sp, #12]
   16280:	b	16294 <__assert_fail@plt+0x5198>
   16284:	ldr	sl, [sp, #12]
   16288:	b	16614 <__assert_fail@plt+0x5518>
   1628c:	ldr	r0, [sp, #12]
   16290:	orr	r7, r7, #2
   16294:	stm	r0, {r6, r9}
   16298:	b	16618 <__assert_fail@plt+0x551c>
   1629c:	ldr	sl, [sp, #12]
   162a0:	cmp	r5, #89	; 0x59
   162a4:	bgt	1630c <__assert_fail@plt+0x5210>
   162a8:	sub	r0, r5, #66	; 0x42
   162ac:	cmp	r0, #14
   162b0:	bhi	16390 <__assert_fail@plt+0x5294>
   162b4:	add	r1, pc, #0
   162b8:	ldr	pc, [r1, r0, lsl #2]
   162bc:	strdeq	r6, [r1], -r8
   162c0:	andeq	r6, r1, r8, lsr #9
   162c4:	andeq	r6, r1, r8, lsr #9
   162c8:			; <UNDEFINED> instruction: 0x000164b8
   162cc:	andeq	r6, r1, r8, lsr #9
   162d0:	andeq	r6, r1, ip, ror #7
   162d4:	andeq	r6, r1, r8, lsr #9
   162d8:	andeq	r6, r1, r8, lsr #9
   162dc:	andeq	r6, r1, r8, lsr #9
   162e0:	andeq	r6, r1, r4, lsl r4
   162e4:	andeq	r6, r1, r8, lsr #9
   162e8:	andeq	r6, r1, r8, lsr #8
   162ec:	andeq	r6, r1, r8, lsr #9
   162f0:	andeq	r6, r1, r8, lsr #9
   162f4:	andeq	r6, r1, r0, ror #9
   162f8:	cmn	r9, #1
   162fc:	ble	16508 <__assert_fail@plt+0x540c>
   16300:	cmp	r9, #2097152	; 0x200000
   16304:	blt	16534 <__assert_fail@plt+0x5438>
   16308:	b	165b4 <__assert_fail@plt+0x54b8>
   1630c:	cmp	r5, #115	; 0x73
   16310:	bgt	163c8 <__assert_fail@plt+0x52cc>
   16314:	sub	r0, r5, #98	; 0x62
   16318:	cmp	r0, #11
   1631c:	bhi	16478 <__assert_fail@plt+0x537c>
   16320:	add	r1, pc, #4
   16324:	mov	r4, #0
   16328:	ldr	pc, [r1, r0, lsl #2]
   1632c:	andeq	r6, r1, ip, asr r3
   16330:	andeq	r6, r1, r8, ror #11
   16334:	andeq	r6, r1, r8, lsr #9
   16338:	andeq	r6, r1, r8, lsr #9
   1633c:	andeq	r6, r1, r8, lsr #9
   16340:	andeq	r6, r1, ip, ror #7
   16344:	andeq	r6, r1, r8, lsr #9
   16348:	andeq	r6, r1, r8, lsr #9
   1634c:	andeq	r6, r1, r8, lsr #9
   16350:	andeq	r6, r1, r4, lsl r4
   16354:	andeq	r6, r1, r8, lsr #9
   16358:	andeq	r6, r1, r8, lsr #8
   1635c:	cmn	r9, #1
   16360:	ble	16548 <__assert_fail@plt+0x544c>
   16364:	cmp	r9, #4194304	; 0x400000
   16368:	blt	16574 <__assert_fail@plt+0x5478>
   1636c:	b	165b4 <__assert_fail@plt+0x54b8>
   16370:	cmp	r0, #105	; 0x69
   16374:	bne	162a0 <__assert_fail@plt+0x51a4>
   16378:	ldrb	r0, [r4, #2]
   1637c:	mov	r1, #1
   16380:	cmp	r0, #66	; 0x42
   16384:	movweq	r1, #3
   16388:	str	r1, [sp, #8]
   1638c:	b	162a0 <__assert_fail@plt+0x51a4>
   16390:	cmp	r5, #84	; 0x54
   16394:	beq	16450 <__assert_fail@plt+0x5354>
   16398:	cmp	r5, #89	; 0x59
   1639c:	bne	164a8 <__assert_fail@plt+0x53ac>
   163a0:	mov	r4, #0
   163a4:	mvn	r6, #7
   163a8:	add	r5, sp, #16
   163ac:	mov	r0, r5
   163b0:	mov	r1, r7
   163b4:	bl	16644 <__assert_fail@plt+0x5548>
   163b8:	orr	r4, r0, r4
   163bc:	adds	r6, r6, #1
   163c0:	bcc	163ac <__assert_fail@plt+0x52b0>
   163c4:	b	165e8 <__assert_fail@plt+0x54ec>
   163c8:	cmp	r5, #116	; 0x74
   163cc:	beq	16450 <__assert_fail@plt+0x5354>
   163d0:	cmp	r5, #119	; 0x77
   163d4:	bne	164a8 <__assert_fail@plt+0x53ac>
   163d8:	cmn	r9, #1
   163dc:	ble	16588 <__assert_fail@plt+0x548c>
   163e0:	cmp	r9, #1073741824	; 0x40000000
   163e4:	bge	165b4 <__assert_fail@plt+0x54b8>
   163e8:	b	165d0 <__assert_fail@plt+0x54d4>
   163ec:	mov	r4, #0
   163f0:	mvn	r6, #2
   163f4:	add	r5, sp, #16
   163f8:	mov	r0, r5
   163fc:	mov	r1, r7
   16400:	bl	16644 <__assert_fail@plt+0x5548>
   16404:	orr	r4, r0, r4
   16408:	adds	r6, r6, #1
   1640c:	bcc	163f8 <__assert_fail@plt+0x52fc>
   16410:	b	165e8 <__assert_fail@plt+0x54ec>
   16414:	add	r0, sp, #16
   16418:	mov	r1, r7
   1641c:	bl	16644 <__assert_fail@plt+0x5548>
   16420:	mov	r4, r0
   16424:	b	165e8 <__assert_fail@plt+0x54ec>
   16428:	mov	r4, #0
   1642c:	mvn	r6, #1
   16430:	add	r5, sp, #16
   16434:	mov	r0, r5
   16438:	mov	r1, r7
   1643c:	bl	16644 <__assert_fail@plt+0x5548>
   16440:	orr	r4, r0, r4
   16444:	adds	r6, r6, #1
   16448:	bcc	16434 <__assert_fail@plt+0x5338>
   1644c:	b	165e8 <__assert_fail@plt+0x54ec>
   16450:	mov	r4, #0
   16454:	mvn	r6, #3
   16458:	add	r5, sp, #16
   1645c:	mov	r0, r5
   16460:	mov	r1, r7
   16464:	bl	16644 <__assert_fail@plt+0x5548>
   16468:	orr	r4, r0, r4
   1646c:	adds	r6, r6, #1
   16470:	bcc	1645c <__assert_fail@plt+0x5360>
   16474:	b	165e8 <__assert_fail@plt+0x54ec>
   16478:	cmp	r5, #90	; 0x5a
   1647c:	bne	164a8 <__assert_fail@plt+0x53ac>
   16480:	mov	r4, #0
   16484:	mvn	r6, #6
   16488:	add	r5, sp, #16
   1648c:	mov	r0, r5
   16490:	mov	r1, r7
   16494:	bl	16644 <__assert_fail@plt+0x5548>
   16498:	orr	r4, r0, r4
   1649c:	adds	r6, r6, #1
   164a0:	bcc	1648c <__assert_fail@plt+0x5390>
   164a4:	b	165e8 <__assert_fail@plt+0x54ec>
   164a8:	stm	sl, {r6, r9}
   164ac:	ldr	r7, [sp, #4]
   164b0:	orr	r7, r7, #2
   164b4:	b	16618 <__assert_fail@plt+0x551c>
   164b8:	mov	r4, #0
   164bc:	mvn	r6, #5
   164c0:	add	r5, sp, #16
   164c4:	mov	r0, r5
   164c8:	mov	r1, r7
   164cc:	bl	16644 <__assert_fail@plt+0x5548>
   164d0:	orr	r4, r0, r4
   164d4:	adds	r6, r6, #1
   164d8:	bcc	164c4 <__assert_fail@plt+0x53c8>
   164dc:	b	165e8 <__assert_fail@plt+0x54ec>
   164e0:	mov	r4, #0
   164e4:	mvn	r6, #4
   164e8:	add	r5, sp, #16
   164ec:	mov	r0, r5
   164f0:	mov	r1, r7
   164f4:	bl	16644 <__assert_fail@plt+0x5548>
   164f8:	orr	r4, r0, r4
   164fc:	adds	r6, r6, #1
   16500:	bcc	164ec <__assert_fail@plt+0x53f0>
   16504:	b	165e8 <__assert_fail@plt+0x54ec>
   16508:	and	r0, r6, r9
   1650c:	cmn	r0, #1
   16510:	beq	16534 <__assert_fail@plt+0x5438>
   16514:	mov	r0, #0
   16518:	mov	r1, #-2147483648	; 0x80000000
   1651c:	mov	r2, r6
   16520:	mov	r3, r9
   16524:	bl	16a78 <__assert_fail@plt+0x597c>
   16528:	subs	r0, r0, #1024	; 0x400
   1652c:	sbcs	r0, r1, #0
   16530:	blt	165b4 <__assert_fail@plt+0x54b8>
   16534:	lsl	r0, r9, #10
   16538:	lsl	r1, r6, #10
   1653c:	mov	r4, #0
   16540:	orr	r0, r0, r6, lsr #22
   16544:	b	165e0 <__assert_fail@plt+0x54e4>
   16548:	and	r0, r6, r9
   1654c:	cmn	r0, #1
   16550:	beq	16574 <__assert_fail@plt+0x5478>
   16554:	mov	r0, #0
   16558:	mov	r1, #-2147483648	; 0x80000000
   1655c:	mov	r2, r6
   16560:	mov	r3, r9
   16564:	bl	16a78 <__assert_fail@plt+0x597c>
   16568:	subs	r0, r0, #512	; 0x200
   1656c:	sbcs	r0, r1, #0
   16570:	blt	165b4 <__assert_fail@plt+0x54b8>
   16574:	lsl	r0, r9, #9
   16578:	lsl	r1, r6, #9
   1657c:	mov	r4, #0
   16580:	orr	r0, r0, r6, lsr #23
   16584:	b	165e0 <__assert_fail@plt+0x54e4>
   16588:	and	r0, r6, r9
   1658c:	cmn	r0, #1
   16590:	beq	165d0 <__assert_fail@plt+0x54d4>
   16594:	mov	r0, #0
   16598:	mov	r1, #-2147483648	; 0x80000000
   1659c:	mov	r2, r6
   165a0:	mov	r3, r9
   165a4:	bl	16a78 <__assert_fail@plt+0x597c>
   165a8:	subs	r0, r0, #2
   165ac:	sbcs	r0, r1, #0
   165b0:	bge	165d0 <__assert_fail@plt+0x54d4>
   165b4:	cmp	r9, #0
   165b8:	mvn	r0, #-2147483648	; 0x80000000
   165bc:	mvn	r1, #0
   165c0:	mov	r4, #1
   165c4:	movmi	r0, #-2147483648	; 0x80000000
   165c8:	movwmi	r1, #0
   165cc:	b	165e0 <__assert_fail@plt+0x54e4>
   165d0:	lsl	r0, r9, #1
   165d4:	lsl	r1, r6, #1
   165d8:	mov	r4, #0
   165dc:	orr	r0, r0, r6, lsr #31
   165e0:	str	r1, [sp, #16]
   165e4:	str	r0, [sp, #20]
   165e8:	ldr	r0, [r8]
   165ec:	ldr	r2, [sp, #8]
   165f0:	ldr	r7, [sp, #4]
   165f4:	add	r1, r0, r2
   165f8:	orr	r7, r4, r7
   165fc:	str	r1, [r8]
   16600:	ldrb	r0, [r0, r2]
   16604:	ldr	r6, [sp, #16]
   16608:	ldr	r9, [sp, #20]
   1660c:	cmp	r0, #0
   16610:	orrne	r7, r7, #2
   16614:	stm	sl, {r6, r9}
   16618:	mov	r0, r7
   1661c:	sub	sp, fp, #28
   16620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16624:	movw	r0, #32645	; 0x7f85
   16628:	movw	r1, #32683	; 0x7fab
   1662c:	movw	r3, #32699	; 0x7fbb
   16630:	mov	r2, #85	; 0x55
   16634:	movt	r0, #1
   16638:	movt	r1, #1
   1663c:	movt	r3, #1
   16640:	bl	110fc <__assert_fail@plt>
   16644:	push	{r4, r5, r6, r7, fp, lr}
   16648:	add	fp, sp, #16
   1664c:	mov	r5, r1
   16650:	mov	r4, r0
   16654:	cmn	r1, #1
   16658:	ble	16680 <__assert_fail@plt+0x5584>
   1665c:	ldrd	r6, [r4]
   16660:	cmp	r5, #0
   16664:	beq	1672c <__assert_fail@plt+0x5630>
   16668:	cmn	r7, #1
   1666c:	ble	166b8 <__assert_fail@plt+0x55bc>
   16670:	asr	r3, r5, #31
   16674:	mvn	r0, #0
   16678:	mvn	r1, #-2147483648	; 0x80000000
   1667c:	b	166a0 <__assert_fail@plt+0x55a4>
   16680:	ldrd	r6, [r4]
   16684:	cmn	r7, #1
   16688:	ble	166e8 <__assert_fail@plt+0x55ec>
   1668c:	cmn	r5, #1
   16690:	beq	1672c <__assert_fail@plt+0x5630>
   16694:	asr	r3, r5, #31
   16698:	mov	r0, #0
   1669c:	mov	r1, #-2147483648	; 0x80000000
   166a0:	mov	r2, r5
   166a4:	bl	16a78 <__assert_fail@plt+0x597c>
   166a8:	subs	r0, r0, r6
   166ac:	sbcs	r0, r1, r7
   166b0:	blt	16708 <__assert_fail@plt+0x560c>
   166b4:	b	1672c <__assert_fail@plt+0x5630>
   166b8:	and	r0, r6, r7
   166bc:	cmn	r0, #1
   166c0:	beq	16724 <__assert_fail@plt+0x5628>
   166c4:	mov	r0, #0
   166c8:	mov	r1, #-2147483648	; 0x80000000
   166cc:	mov	r2, r6
   166d0:	mov	r3, r7
   166d4:	bl	16a78 <__assert_fail@plt+0x597c>
   166d8:	subs	r0, r0, r5
   166dc:	sbcs	r0, r1, r5, asr #31
   166e0:	blt	16708 <__assert_fail@plt+0x560c>
   166e4:	b	1672c <__assert_fail@plt+0x5630>
   166e8:	asr	r3, r5, #31
   166ec:	mvn	r0, #0
   166f0:	mvn	r1, #-2147483648	; 0x80000000
   166f4:	mov	r2, r5
   166f8:	bl	16a78 <__assert_fail@plt+0x597c>
   166fc:	subs	r0, r6, r0
   16700:	sbcs	r0, r7, r1
   16704:	bge	1672c <__assert_fail@plt+0x5630>
   16708:	cmp	r7, #0
   1670c:	mvn	r1, #-2147483648	; 0x80000000
   16710:	mvn	r2, #0
   16714:	mov	r0, #1
   16718:	movmi	r1, #-2147483648	; 0x80000000
   1671c:	movwmi	r2, #0
   16720:	b	16740 <__assert_fail@plt+0x5644>
   16724:	mvn	r6, #0
   16728:	mvn	r7, #0
   1672c:	umull	r2, r0, r6, r5
   16730:	asr	r1, r5, #31
   16734:	mla	r0, r6, r1, r0
   16738:	mla	r1, r7, r5, r0
   1673c:	mov	r0, #0
   16740:	str	r2, [r4]
   16744:	str	r1, [r4, #4]
   16748:	pop	{r4, r5, r6, r7, fp, pc}
   1674c:	clz	r2, r1
   16750:	clz	r3, r0
   16754:	lsr	r2, r2, #5
   16758:	lsr	r3, r3, #5
   1675c:	orrs	r2, r3, r2
   16760:	movwne	r1, #1
   16764:	movwne	r0, #1
   16768:	cmp	r1, #0
   1676c:	beq	1679c <__assert_fail@plt+0x56a0>
   16770:	mvn	r2, #-2147483648	; 0x80000000
   16774:	udiv	r2, r2, r1
   16778:	cmp	r2, r0
   1677c:	bcs	1679c <__assert_fail@plt+0x56a0>
   16780:	push	{fp, lr}
   16784:	mov	fp, sp
   16788:	bl	1100c <__errno_location@plt>
   1678c:	mov	r1, #12
   16790:	str	r1, [r0]
   16794:	mov	r0, #0
   16798:	pop	{fp, pc}
   1679c:	b	10e80 <calloc@plt>
   167a0:	cmp	r0, #0
   167a4:	movweq	r0, #1
   167a8:	cmn	r0, #1
   167ac:	ble	167b4 <__assert_fail@plt+0x56b8>
   167b0:	b	10f94 <malloc@plt>
   167b4:	push	{fp, lr}
   167b8:	mov	fp, sp
   167bc:	bl	1100c <__errno_location@plt>
   167c0:	mov	r1, #12
   167c4:	str	r1, [r0]
   167c8:	mov	r0, #0
   167cc:	pop	{fp, pc}
   167d0:	push	{fp, lr}
   167d4:	mov	fp, sp
   167d8:	cmp	r0, #0
   167dc:	beq	167f8 <__assert_fail@plt+0x56fc>
   167e0:	cmp	r1, #0
   167e4:	beq	16804 <__assert_fail@plt+0x5708>
   167e8:	cmn	r1, #1
   167ec:	ble	1680c <__assert_fail@plt+0x5710>
   167f0:	pop	{fp, lr}
   167f4:	b	10f28 <realloc@plt>
   167f8:	mov	r0, r1
   167fc:	pop	{fp, lr}
   16800:	b	167a0 <__assert_fail@plt+0x56a4>
   16804:	bl	13bc8 <__assert_fail@plt+0x2acc>
   16808:	b	16818 <__assert_fail@plt+0x571c>
   1680c:	bl	1100c <__errno_location@plt>
   16810:	mov	r1, #12
   16814:	str	r1, [r0]
   16818:	mov	r0, #0
   1681c:	pop	{fp, pc}
   16820:	push	{r4, r5, r6, sl, fp, lr}
   16824:	add	fp, sp, #16
   16828:	mov	r4, r0
   1682c:	bl	10f64 <__fpending@plt>
   16830:	mov	r5, r0
   16834:	mov	r0, r4
   16838:	bl	10f70 <ferror_unlocked@plt>
   1683c:	mov	r6, r0
   16840:	mov	r0, r4
   16844:	bl	13ad0 <__assert_fail@plt+0x29d4>
   16848:	cmp	r6, #0
   1684c:	beq	1686c <__assert_fail@plt+0x5770>
   16850:	mvn	r4, #0
   16854:	cmp	r0, #0
   16858:	bne	16898 <__assert_fail@plt+0x579c>
   1685c:	bl	1100c <__errno_location@plt>
   16860:	mov	r1, #0
   16864:	str	r1, [r0]
   16868:	b	16898 <__assert_fail@plt+0x579c>
   1686c:	cmp	r0, #0
   16870:	mov	r4, r0
   16874:	mvnne	r4, #0
   16878:	cmp	r5, #0
   1687c:	bne	16898 <__assert_fail@plt+0x579c>
   16880:	cmp	r0, #0
   16884:	beq	16898 <__assert_fail@plt+0x579c>
   16888:	bl	1100c <__errno_location@plt>
   1688c:	ldr	r0, [r0]
   16890:	subs	r4, r0, #9
   16894:	mvnne	r4, #0
   16898:	mov	r0, r4
   1689c:	pop	{r4, r5, r6, sl, fp, pc}
   168a0:	push	{fp, lr}
   168a4:	mov	fp, sp
   168a8:	mov	r0, #14
   168ac:	bl	1109c <nl_langinfo@plt>
   168b0:	movw	r1, #29895	; 0x74c7
   168b4:	cmp	r0, #0
   168b8:	movt	r1, #1
   168bc:	movne	r1, r0
   168c0:	movw	r0, #32777	; 0x8009
   168c4:	ldrb	r2, [r1]
   168c8:	movt	r0, #1
   168cc:	cmp	r2, #0
   168d0:	movne	r0, r1
   168d4:	pop	{fp, pc}
   168d8:	push	{r4, r5, r6, r7, fp, lr}
   168dc:	add	fp, sp, #16
   168e0:	sub	sp, sp, #8
   168e4:	cmp	r0, #0
   168e8:	add	r5, sp, #4
   168ec:	mov	r7, r2
   168f0:	mov	r4, r1
   168f4:	movne	r5, r0
   168f8:	mov	r0, r5
   168fc:	bl	10f7c <mbrtowc@plt>
   16900:	mov	r6, r0
   16904:	cmp	r7, #0
   16908:	beq	16930 <__assert_fail@plt+0x5834>
   1690c:	cmn	r6, #2
   16910:	bcc	16930 <__assert_fail@plt+0x5834>
   16914:	mov	r0, #0
   16918:	bl	16978 <__assert_fail@plt+0x587c>
   1691c:	cmp	r0, #0
   16920:	bne	16930 <__assert_fail@plt+0x5834>
   16924:	ldrb	r0, [r4]
   16928:	mov	r6, #1
   1692c:	str	r0, [r5]
   16930:	mov	r0, r6
   16934:	sub	sp, fp, #16
   16938:	pop	{r4, r5, r6, r7, fp, pc}
   1693c:	cmp	r2, #0
   16940:	beq	16970 <__assert_fail@plt+0x5874>
   16944:	mvn	r3, #0
   16948:	udiv	r3, r3, r2
   1694c:	cmp	r3, r1
   16950:	bcs	16970 <__assert_fail@plt+0x5874>
   16954:	push	{fp, lr}
   16958:	mov	fp, sp
   1695c:	bl	1100c <__errno_location@plt>
   16960:	mov	r1, #12
   16964:	str	r1, [r0]
   16968:	mov	r0, #0
   1696c:	pop	{fp, pc}
   16970:	mul	r1, r2, r1
   16974:	b	167d0 <__assert_fail@plt+0x56d4>
   16978:	push	{r4, sl, fp, lr}
   1697c:	add	fp, sp, #8
   16980:	sub	sp, sp, #264	; 0x108
   16984:	add	r1, sp, #7
   16988:	movw	r2, #257	; 0x101
   1698c:	bl	169e4 <__assert_fail@plt+0x58e8>
   16990:	mov	r4, #0
   16994:	cmp	r0, #0
   16998:	bne	169d8 <__assert_fail@plt+0x58dc>
   1699c:	movw	r1, #32783	; 0x800f
   169a0:	add	r0, sp, #7
   169a4:	mov	r2, #2
   169a8:	movt	r1, #1
   169ac:	bl	10fe8 <bcmp@plt>
   169b0:	cmp	r0, #0
   169b4:	beq	169d8 <__assert_fail@plt+0x58dc>
   169b8:	movw	r1, #32785	; 0x8011
   169bc:	add	r0, sp, #7
   169c0:	mov	r2, #6
   169c4:	movt	r1, #1
   169c8:	bl	10fe8 <bcmp@plt>
   169cc:	cmp	r0, #0
   169d0:	mov	r4, r0
   169d4:	movwne	r4, #1
   169d8:	mov	r0, r4
   169dc:	sub	sp, fp, #8
   169e0:	pop	{r4, sl, fp, pc}
   169e4:	push	{r4, r5, r6, r7, fp, lr}
   169e8:	add	fp, sp, #16
   169ec:	mov	r4, r1
   169f0:	mov	r1, #0
   169f4:	mov	r6, r2
   169f8:	bl	11084 <setlocale@plt>
   169fc:	cmp	r0, #0
   16a00:	beq	16a2c <__assert_fail@plt+0x5930>
   16a04:	mov	r7, r0
   16a08:	bl	10ff4 <strlen@plt>
   16a0c:	cmp	r0, r6
   16a10:	bcs	16a40 <__assert_fail@plt+0x5944>
   16a14:	add	r2, r0, #1
   16a18:	mov	r0, r4
   16a1c:	mov	r1, r7
   16a20:	bl	10eec <memcpy@plt>
   16a24:	mov	r5, #0
   16a28:	b	16a68 <__assert_fail@plt+0x596c>
   16a2c:	cmp	r6, #0
   16a30:	mov	r5, #22
   16a34:	movne	r0, #0
   16a38:	strbne	r0, [r4]
   16a3c:	b	16a68 <__assert_fail@plt+0x596c>
   16a40:	mov	r5, #34	; 0x22
   16a44:	cmp	r6, #0
   16a48:	beq	16a68 <__assert_fail@plt+0x596c>
   16a4c:	sub	r6, r6, #1
   16a50:	mov	r0, r4
   16a54:	mov	r1, r7
   16a58:	mov	r2, r6
   16a5c:	bl	10eec <memcpy@plt>
   16a60:	mov	r0, #0
   16a64:	strb	r0, [r4, r6]
   16a68:	mov	r0, r5
   16a6c:	pop	{r4, r5, r6, r7, fp, pc}
   16a70:	mov	r1, #0
   16a74:	b	11084 <setlocale@plt>
   16a78:	cmp	r3, #0
   16a7c:	cmpeq	r2, #0
   16a80:	bne	16aa4 <__assert_fail@plt+0x59a8>
   16a84:	cmp	r1, #0
   16a88:	movlt	r1, #-2147483648	; 0x80000000
   16a8c:	movlt	r0, #0
   16a90:	blt	16aa0 <__assert_fail@plt+0x59a4>
   16a94:	cmpeq	r0, #0
   16a98:	mvnne	r1, #-2147483648	; 0x80000000
   16a9c:	mvnne	r0, #0
   16aa0:	b	16b4c <__assert_fail@plt+0x5a50>
   16aa4:	sub	sp, sp, #8
   16aa8:	push	{sp, lr}
   16aac:	cmp	r1, #0
   16ab0:	blt	16ad0 <__assert_fail@plt+0x59d4>
   16ab4:	cmp	r3, #0
   16ab8:	blt	16b04 <__assert_fail@plt+0x5a08>
   16abc:	bl	16b5c <__assert_fail@plt+0x5a60>
   16ac0:	ldr	lr, [sp, #4]
   16ac4:	add	sp, sp, #8
   16ac8:	pop	{r2, r3}
   16acc:	bx	lr
   16ad0:	rsbs	r0, r0, #0
   16ad4:	sbc	r1, r1, r1, lsl #1
   16ad8:	cmp	r3, #0
   16adc:	blt	16b28 <__assert_fail@plt+0x5a2c>
   16ae0:	bl	16b5c <__assert_fail@plt+0x5a60>
   16ae4:	ldr	lr, [sp, #4]
   16ae8:	add	sp, sp, #8
   16aec:	pop	{r2, r3}
   16af0:	rsbs	r0, r0, #0
   16af4:	sbc	r1, r1, r1, lsl #1
   16af8:	rsbs	r2, r2, #0
   16afc:	sbc	r3, r3, r3, lsl #1
   16b00:	bx	lr
   16b04:	rsbs	r2, r2, #0
   16b08:	sbc	r3, r3, r3, lsl #1
   16b0c:	bl	16b5c <__assert_fail@plt+0x5a60>
   16b10:	ldr	lr, [sp, #4]
   16b14:	add	sp, sp, #8
   16b18:	pop	{r2, r3}
   16b1c:	rsbs	r0, r0, #0
   16b20:	sbc	r1, r1, r1, lsl #1
   16b24:	bx	lr
   16b28:	rsbs	r2, r2, #0
   16b2c:	sbc	r3, r3, r3, lsl #1
   16b30:	bl	16b5c <__assert_fail@plt+0x5a60>
   16b34:	ldr	lr, [sp, #4]
   16b38:	add	sp, sp, #8
   16b3c:	pop	{r2, r3}
   16b40:	rsbs	r2, r2, #0
   16b44:	sbc	r3, r3, r3, lsl #1
   16b48:	bx	lr
   16b4c:	push	{r1, lr}
   16b50:	mov	r0, #8
   16b54:	bl	10e98 <raise@plt>
   16b58:	pop	{r1, pc}
   16b5c:	cmp	r1, r3
   16b60:	cmpeq	r0, r2
   16b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b68:	mov	r4, r0
   16b6c:	movcc	r0, #0
   16b70:	mov	r5, r1
   16b74:	ldr	lr, [sp, #36]	; 0x24
   16b78:	movcc	r1, r0
   16b7c:	bcc	16c78 <__assert_fail@plt+0x5b7c>
   16b80:	cmp	r3, #0
   16b84:	clzeq	ip, r2
   16b88:	clzne	ip, r3
   16b8c:	addeq	ip, ip, #32
   16b90:	cmp	r5, #0
   16b94:	clzeq	r1, r4
   16b98:	addeq	r1, r1, #32
   16b9c:	clzne	r1, r5
   16ba0:	sub	ip, ip, r1
   16ba4:	sub	sl, ip, #32
   16ba8:	lsl	r9, r3, ip
   16bac:	rsb	fp, ip, #32
   16bb0:	orr	r9, r9, r2, lsl sl
   16bb4:	orr	r9, r9, r2, lsr fp
   16bb8:	lsl	r8, r2, ip
   16bbc:	cmp	r5, r9
   16bc0:	cmpeq	r4, r8
   16bc4:	movcc	r0, #0
   16bc8:	movcc	r1, r0
   16bcc:	bcc	16be8 <__assert_fail@plt+0x5aec>
   16bd0:	mov	r0, #1
   16bd4:	subs	r4, r4, r8
   16bd8:	lsl	r1, r0, sl
   16bdc:	orr	r1, r1, r0, lsr fp
   16be0:	lsl	r0, r0, ip
   16be4:	sbc	r5, r5, r9
   16be8:	cmp	ip, #0
   16bec:	beq	16c78 <__assert_fail@plt+0x5b7c>
   16bf0:	lsr	r6, r8, #1
   16bf4:	orr	r6, r6, r9, lsl #31
   16bf8:	lsr	r7, r9, #1
   16bfc:	mov	r2, ip
   16c00:	b	16c24 <__assert_fail@plt+0x5b28>
   16c04:	subs	r3, r4, r6
   16c08:	sbc	r8, r5, r7
   16c0c:	adds	r3, r3, r3
   16c10:	adc	r8, r8, r8
   16c14:	adds	r4, r3, #1
   16c18:	adc	r5, r8, #0
   16c1c:	subs	r2, r2, #1
   16c20:	beq	16c40 <__assert_fail@plt+0x5b44>
   16c24:	cmp	r5, r7
   16c28:	cmpeq	r4, r6
   16c2c:	bcs	16c04 <__assert_fail@plt+0x5b08>
   16c30:	adds	r4, r4, r4
   16c34:	adc	r5, r5, r5
   16c38:	subs	r2, r2, #1
   16c3c:	bne	16c24 <__assert_fail@plt+0x5b28>
   16c40:	lsr	r3, r4, ip
   16c44:	orr	r3, r3, r5, lsl fp
   16c48:	lsr	r2, r5, ip
   16c4c:	orr	r3, r3, r5, lsr sl
   16c50:	adds	r0, r0, r4
   16c54:	mov	r4, r3
   16c58:	lsl	r3, r2, ip
   16c5c:	orr	r3, r3, r4, lsl sl
   16c60:	lsl	ip, r4, ip
   16c64:	orr	r3, r3, r4, lsr fp
   16c68:	adc	r1, r1, r5
   16c6c:	subs	r0, r0, ip
   16c70:	mov	r5, r2
   16c74:	sbc	r1, r1, r3
   16c78:	cmp	lr, #0
   16c7c:	strdne	r4, [lr]
   16c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c88:	mov	r7, r0
   16c8c:	ldr	r6, [pc, #72]	; 16cdc <__assert_fail@plt+0x5be0>
   16c90:	ldr	r5, [pc, #72]	; 16ce0 <__assert_fail@plt+0x5be4>
   16c94:	add	r6, pc, r6
   16c98:	add	r5, pc, r5
   16c9c:	sub	r6, r6, r5
   16ca0:	mov	r8, r1
   16ca4:	mov	r9, r2
   16ca8:	bl	10e60 <calloc@plt-0x20>
   16cac:	asrs	r6, r6, #2
   16cb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cb4:	mov	r4, #0
   16cb8:	add	r4, r4, #1
   16cbc:	ldr	r3, [r5], #4
   16cc0:	mov	r2, r9
   16cc4:	mov	r1, r8
   16cc8:	mov	r0, r7
   16ccc:	blx	r3
   16cd0:	cmp	r6, r4
   16cd4:	bne	16cb8 <__assert_fail@plt+0x5bbc>
   16cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cdc:	andeq	r2, r1, r0, ror r2
   16ce0:	andeq	r2, r1, r8, ror #4
   16ce4:	bx	lr
   16ce8:	ldr	r3, [pc, #12]	; 16cfc <__assert_fail@plt+0x5c00>
   16cec:	mov	r1, #0
   16cf0:	add	r3, pc, r3
   16cf4:	ldr	r2, [r3]
   16cf8:	b	11018 <__cxa_atexit@plt>
   16cfc:	strdeq	r2, [r1], -r4

Disassembly of section .fini:

00016d00 <.fini>:
   16d00:	push	{r3, lr}
   16d04:	pop	{r3, pc}
