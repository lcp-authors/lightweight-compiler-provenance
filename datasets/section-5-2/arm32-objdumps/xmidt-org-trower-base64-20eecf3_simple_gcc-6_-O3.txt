
../repos/xmidt-org-trower-base64-20eecf3/tests/simple:     file format elf32-littlearm


Disassembly of section .init:

00010ea4 <.init>:
   10ea4:	push	{r3, lr}
   10ea8:	bl	11104 <_start@@Base+0x3c>
   10eac:	pop	{r3, pc}

Disassembly of section .plt:

00010eb0 <fdopen@plt-0x14>:
   10eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb4:	ldr	lr, [pc, #4]	; 10ec0 <fdopen@plt-0x4>
   10eb8:	add	lr, pc, lr
   10ebc:	ldr	pc, [lr, #8]!
   10ec0:	andeq	r5, r1, r0, asr #2

00010ec4 <fdopen@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #320]!	; 0x140

00010ed0 <CU_basic_set_mode@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #312]!	; 0x138

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #304]!	; 0x130

00010ee8 <CU_initialize_registry@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #296]!	; 0x128

00010ef4 <setbuf@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #288]!	; 0x120

00010f00 <printf@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #280]!	; 0x118

00010f0c <CU_get_number_of_tests_failed@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #272]!	; 0x110

00010f18 <CU_cleanup_registry@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #264]!	; 0x108

00010f24 <free@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #256]!	; 0x100

00010f30 <CU_add_suite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #248]!	; 0xf8

00010f3c <memcpy@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #240]!	; 0xf0

00010f48 <CU_basic_run_tests@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #232]!	; 0xe8

00010f54 <CU_basic_show_failures@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #224]!	; 0xe0

00010f60 <ftell@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #216]!	; 0xd8

00010f6c <fwrite@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #208]!	; 0xd0

00010f78 <strcpy@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #200]!	; 0xc8

00010f84 <fread@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #192]!	; 0xc0

00010f90 <getenv@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #184]!	; 0xb8

00010f9c <puts@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #176]!	; 0xb0

00010fa8 <malloc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #168]!	; 0xa8

00010fb4 <__libc_start_main@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #160]!	; 0xa0

00010fc0 <__fxstat@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #152]!	; 0x98

00010fcc <__gmon_start__@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #144]!	; 0x90

00010fd8 <CU_assertImplementation@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #136]!	; 0x88

00010fe4 <open@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #128]!	; 0x80

00010ff0 <getpid@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #120]!	; 0x78

00010ffc <strlen@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #112]!	; 0x70

00011008 <fprintf@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #104]!	; 0x68

00011014 <__errno_location@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #96]!	; 0x60

00011020 <__cxa_atexit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #88]!	; 0x58

0001102c <mkdir@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #80]!	; 0x50

00011038 <fcntl@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #72]!	; 0x48

00011044 <memset@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #64]!	; 0x40

00011050 <putchar@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #56]!	; 0x38

0001105c <CU_add_test@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #86016	; 0x15000
   11064:	ldr	pc, [ip, #48]!	; 0x30

00011068 <access@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #86016	; 0x15000
   11070:	ldr	pc, [ip, #40]!	; 0x28

00011074 <fclose@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #86016	; 0x15000
   1107c:	ldr	pc, [ip, #32]!

00011080 <vfprintf@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #86016	; 0x15000
   11088:	ldr	pc, [ip, #24]!

0001108c <atoi@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #86016	; 0x15000
   11094:	ldr	pc, [ip, #16]!

00011098 <CU_get_failure_list@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #86016	; 0x15000
   110a0:	ldr	pc, [ip, #8]!

000110a4 <fseek@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #86016	; 0x15000
   110ac:	ldr	pc, [ip, #0]!

000110b0 <abort@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #4088]!	; 0xff8

000110bc <close@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110c8 <_start@@Base>:
   110c8:	mov	fp, #0
   110cc:	mov	lr, #0
   110d0:	pop	{r1}		; (ldr r1, [sp], #4)
   110d4:	mov	r2, sp
   110d8:	push	{r2}		; (str r2, [sp, #-4]!)
   110dc:	push	{r0}		; (str r0, [sp, #-4]!)
   110e0:	ldr	ip, [pc, #16]	; 110f8 <_start@@Base+0x30>
   110e4:	push	{ip}		; (str ip, [sp, #-4]!)
   110e8:	ldr	r0, [pc, #12]	; 110fc <_start@@Base+0x34>
   110ec:	ldr	r3, [pc, #12]	; 11100 <_start@@Base+0x38>
   110f0:	bl	10fb4 <__libc_start_main@plt>
   110f4:	bl	110b0 <abort@plt>
   110f8:	andeq	r5, r1, r0, lsr #32
   110fc:	andeq	r2, r1, r8, ror #6
   11100:	andeq	r4, r1, r0, asr #31
   11104:	ldr	r3, [pc, #20]	; 11120 <_start@@Base+0x58>
   11108:	ldr	r2, [pc, #20]	; 11124 <_start@@Base+0x5c>
   1110c:	add	r3, pc, r3
   11110:	ldr	r2, [r3, r2]
   11114:	cmp	r2, #0
   11118:	bxeq	lr
   1111c:	b	10fcc <__gmon_start__@plt>
   11120:	andeq	r4, r1, ip, ror #29
   11124:	strheq	r0, [r0], -ip
   11128:	ldr	r3, [pc, #28]	; 1114c <_start@@Base+0x84>
   1112c:	ldr	r0, [pc, #28]	; 11150 <_start@@Base+0x88>
   11130:	sub	r3, r3, r0
   11134:	cmp	r3, #6
   11138:	bxls	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <_start@@Base+0x8c>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r6, r2, r7, lsl #6
   11150:	andeq	r6, r2, r4, lsl #6
   11154:	andeq	r0, r0, r0
   11158:	ldr	r1, [pc, #36]	; 11184 <_start@@Base+0xbc>
   1115c:	ldr	r0, [pc, #36]	; 11188 <_start@@Base+0xc0>
   11160:	sub	r1, r1, r0
   11164:	asr	r1, r1, #2
   11168:	add	r1, r1, r1, lsr #31
   1116c:	asrs	r1, r1, #1
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <_start@@Base+0xc4>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r6, r2, r4, lsl #6
   11188:	andeq	r6, r2, r4, lsl #6
   1118c:	andeq	r0, r0, r0
   11190:	push	{r4, lr}
   11194:	ldr	r4, [pc, #24]	; 111b4 <_start@@Base+0xec>
   11198:	ldrb	r3, [r4]
   1119c:	cmp	r3, #0
   111a0:	popne	{r4, pc}
   111a4:	bl	11128 <_start@@Base+0x60>
   111a8:	mov	r3, #1
   111ac:	strb	r3, [r4]
   111b0:	pop	{r4, pc}
   111b4:	andeq	r6, r2, r8, lsl #6
   111b8:	ldr	r0, [pc, #40]	; 111e8 <_start@@Base+0x120>
   111bc:	ldr	r3, [r0]
   111c0:	cmp	r3, #0
   111c4:	bne	111cc <_start@@Base+0x104>
   111c8:	b	11158 <_start@@Base+0x90>
   111cc:	ldr	r3, [pc, #24]	; 111ec <_start@@Base+0x124>
   111d0:	cmp	r3, #0
   111d4:	beq	111c8 <_start@@Base+0x100>
   111d8:	push	{r4, lr}
   111dc:	blx	r3
   111e0:	pop	{r4, lr}
   111e4:	b	11158 <_start@@Base+0x90>
   111e8:	andeq	r5, r2, ip, lsl #30
   111ec:	andeq	r0, r0, r0

000111f0 <test_encoded_size@@Base>:
   111f0:	push	{fp, lr}
   111f4:	add	fp, sp, #4
   111f8:	sub	sp, sp, #8
   111fc:	ldr	r3, [pc, #676]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11200:	ldrd	r2, [r3]
   11204:	adds	r2, r2, #1
   11208:	adc	r3, r3, #0
   1120c:	ldr	r1, [pc, #660]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11210:	strd	r2, [r1]
   11214:	mov	r0, #0
   11218:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   1121c:	ldr	r3, [pc, #644]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11220:	ldrd	r2, [r3, #8]
   11224:	adds	r2, r2, #1
   11228:	adc	r3, r3, #0
   1122c:	ldr	r1, [pc, #628]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11230:	strd	r2, [r1, #8]
   11234:	cmp	r0, #0
   11238:	moveq	r3, #1
   1123c:	movne	r3, #0
   11240:	uxtb	r3, r3
   11244:	mov	r0, r3
   11248:	mov	r3, #0
   1124c:	str	r3, [sp, #4]
   11250:	ldr	r3, [pc, #596]	; 114ac <test_encoded_size@@Base+0x2bc>
   11254:	str	r3, [sp]
   11258:	ldr	r3, [pc, #592]	; 114b0 <test_encoded_size@@Base+0x2c0>
   1125c:	ldr	r2, [pc, #592]	; 114b4 <test_encoded_size@@Base+0x2c4>
   11260:	mov	r1, #29
   11264:	bl	10fd8 <CU_assertImplementation@plt>
   11268:	ldr	r3, [pc, #568]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1126c:	ldrd	r2, [r3, #16]
   11270:	adds	r2, r2, #1
   11274:	adc	r3, r3, #0
   11278:	ldr	r1, [pc, #552]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1127c:	strd	r2, [r1, #16]
   11280:	mov	r0, #1
   11284:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   11288:	ldr	r3, [pc, #536]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1128c:	ldrd	r2, [r3, #24]
   11290:	adds	r2, r2, #1
   11294:	adc	r3, r3, #0
   11298:	ldr	r1, [pc, #520]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1129c:	strd	r2, [r1, #24]
   112a0:	cmp	r0, #4
   112a4:	moveq	r3, #1
   112a8:	movne	r3, #0
   112ac:	uxtb	r3, r3
   112b0:	mov	r0, r3
   112b4:	mov	r3, #0
   112b8:	str	r3, [sp, #4]
   112bc:	ldr	r3, [pc, #488]	; 114ac <test_encoded_size@@Base+0x2bc>
   112c0:	str	r3, [sp]
   112c4:	ldr	r3, [pc, #484]	; 114b0 <test_encoded_size@@Base+0x2c0>
   112c8:	ldr	r2, [pc, #488]	; 114b8 <test_encoded_size@@Base+0x2c8>
   112cc:	mov	r1, #30
   112d0:	bl	10fd8 <CU_assertImplementation@plt>
   112d4:	ldr	r3, [pc, #460]	; 114a8 <test_encoded_size@@Base+0x2b8>
   112d8:	ldrd	r2, [r3, #32]
   112dc:	adds	r2, r2, #1
   112e0:	adc	r3, r3, #0
   112e4:	ldr	r1, [pc, #444]	; 114a8 <test_encoded_size@@Base+0x2b8>
   112e8:	strd	r2, [r1, #32]
   112ec:	mov	r0, #2
   112f0:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   112f4:	ldr	r3, [pc, #428]	; 114a8 <test_encoded_size@@Base+0x2b8>
   112f8:	ldrd	r2, [r3, #40]	; 0x28
   112fc:	adds	r2, r2, #1
   11300:	adc	r3, r3, #0
   11304:	ldr	r1, [pc, #412]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11308:	strd	r2, [r1, #40]	; 0x28
   1130c:	cmp	r0, #4
   11310:	moveq	r3, #1
   11314:	movne	r3, #0
   11318:	uxtb	r3, r3
   1131c:	mov	r0, r3
   11320:	mov	r3, #0
   11324:	str	r3, [sp, #4]
   11328:	ldr	r3, [pc, #380]	; 114ac <test_encoded_size@@Base+0x2bc>
   1132c:	str	r3, [sp]
   11330:	ldr	r3, [pc, #376]	; 114b0 <test_encoded_size@@Base+0x2c0>
   11334:	ldr	r2, [pc, #384]	; 114bc <test_encoded_size@@Base+0x2cc>
   11338:	mov	r1, #31
   1133c:	bl	10fd8 <CU_assertImplementation@plt>
   11340:	ldr	r3, [pc, #352]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11344:	ldrd	r2, [r3, #48]	; 0x30
   11348:	adds	r2, r2, #1
   1134c:	adc	r3, r3, #0
   11350:	ldr	r1, [pc, #336]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11354:	strd	r2, [r1, #48]	; 0x30
   11358:	mov	r0, #3
   1135c:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   11360:	ldr	r3, [pc, #320]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11364:	ldrd	r2, [r3, #56]	; 0x38
   11368:	adds	r2, r2, #1
   1136c:	adc	r3, r3, #0
   11370:	ldr	r1, [pc, #304]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11374:	strd	r2, [r1, #56]	; 0x38
   11378:	cmp	r0, #4
   1137c:	moveq	r3, #1
   11380:	movne	r3, #0
   11384:	uxtb	r3, r3
   11388:	mov	r0, r3
   1138c:	mov	r3, #0
   11390:	str	r3, [sp, #4]
   11394:	ldr	r3, [pc, #272]	; 114ac <test_encoded_size@@Base+0x2bc>
   11398:	str	r3, [sp]
   1139c:	ldr	r3, [pc, #268]	; 114b0 <test_encoded_size@@Base+0x2c0>
   113a0:	ldr	r2, [pc, #280]	; 114c0 <test_encoded_size@@Base+0x2d0>
   113a4:	mov	r1, #32
   113a8:	bl	10fd8 <CU_assertImplementation@plt>
   113ac:	ldr	r3, [pc, #244]	; 114a8 <test_encoded_size@@Base+0x2b8>
   113b0:	ldrd	r2, [r3, #64]	; 0x40
   113b4:	adds	r2, r2, #1
   113b8:	adc	r3, r3, #0
   113bc:	ldr	r1, [pc, #228]	; 114a8 <test_encoded_size@@Base+0x2b8>
   113c0:	strd	r2, [r1, #64]	; 0x40
   113c4:	mov	r0, #4
   113c8:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   113cc:	ldr	r3, [pc, #212]	; 114a8 <test_encoded_size@@Base+0x2b8>
   113d0:	ldrd	r2, [r3, #72]	; 0x48
   113d4:	adds	r2, r2, #1
   113d8:	adc	r3, r3, #0
   113dc:	ldr	r1, [pc, #196]	; 114a8 <test_encoded_size@@Base+0x2b8>
   113e0:	strd	r2, [r1, #72]	; 0x48
   113e4:	cmp	r0, #8
   113e8:	moveq	r3, #1
   113ec:	movne	r3, #0
   113f0:	uxtb	r3, r3
   113f4:	mov	r0, r3
   113f8:	mov	r3, #0
   113fc:	str	r3, [sp, #4]
   11400:	ldr	r3, [pc, #164]	; 114ac <test_encoded_size@@Base+0x2bc>
   11404:	str	r3, [sp]
   11408:	ldr	r3, [pc, #160]	; 114b0 <test_encoded_size@@Base+0x2c0>
   1140c:	ldr	r2, [pc, #176]	; 114c4 <test_encoded_size@@Base+0x2d4>
   11410:	mov	r1, #33	; 0x21
   11414:	bl	10fd8 <CU_assertImplementation@plt>
   11418:	ldr	r3, [pc, #136]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1141c:	ldrd	r2, [r3, #80]	; 0x50
   11420:	adds	r2, r2, #1
   11424:	adc	r3, r3, #0
   11428:	ldr	r1, [pc, #120]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1142c:	strd	r2, [r1, #80]	; 0x50
   11430:	mov	r0, #300	; 0x12c
   11434:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   11438:	ldr	r3, [pc, #104]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1143c:	ldrd	r2, [r3, #88]	; 0x58
   11440:	adds	r2, r2, #1
   11444:	adc	r3, r3, #0
   11448:	ldr	r1, [pc, #88]	; 114a8 <test_encoded_size@@Base+0x2b8>
   1144c:	strd	r2, [r1, #88]	; 0x58
   11450:	cmp	r0, #400	; 0x190
   11454:	moveq	r3, #1
   11458:	movne	r3, #0
   1145c:	uxtb	r3, r3
   11460:	mov	r0, r3
   11464:	mov	r3, #0
   11468:	str	r3, [sp, #4]
   1146c:	ldr	r3, [pc, #56]	; 114ac <test_encoded_size@@Base+0x2bc>
   11470:	str	r3, [sp]
   11474:	ldr	r3, [pc, #52]	; 114b0 <test_encoded_size@@Base+0x2c0>
   11478:	ldr	r2, [pc, #72]	; 114c8 <test_encoded_size@@Base+0x2d8>
   1147c:	mov	r1, #34	; 0x22
   11480:	bl	10fd8 <CU_assertImplementation@plt>
   11484:	ldr	r3, [pc, #28]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11488:	ldrd	r2, [r3, #96]	; 0x60
   1148c:	adds	r2, r2, #1
   11490:	adc	r3, r3, #0
   11494:	ldr	r1, [pc, #12]	; 114a8 <test_encoded_size@@Base+0x2b8>
   11498:	strd	r2, [r1, #96]	; 0x60
   1149c:	nop			; (mov r0, r0)
   114a0:	sub	sp, fp, #4
   114a4:	pop	{fp, pc}
   114a8:	andeq	r6, r2, r8, lsr r5
   114ac:	ldrdeq	r5, [r1], -r4
   114b0:	andeq	r5, r1, r8, asr r0
   114b4:	andeq	r5, r1, r0, lsr #1
   114b8:	ldrdeq	r5, [r1], -r8
   114bc:	andeq	r5, r1, ip, lsl #2
   114c0:	andeq	r5, r1, r0, asr #2
   114c4:	andeq	r5, r1, r4, ror r1
   114c8:	andeq	r5, r1, r8, lsr #3

000114cc <test_decoded_size@@Base>:
   114cc:	push	{fp, lr}
   114d0:	add	fp, sp, #4
   114d4:	sub	sp, sp, #8
   114d8:	ldr	r3, [pc, #676]	; 11784 <test_decoded_size@@Base+0x2b8>
   114dc:	ldrd	r2, [r3]
   114e0:	adds	r2, r2, #1
   114e4:	adc	r3, r3, #0
   114e8:	ldr	r1, [pc, #660]	; 11784 <test_decoded_size@@Base+0x2b8>
   114ec:	strd	r2, [r1]
   114f0:	mov	r0, #0
   114f4:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   114f8:	ldr	r3, [pc, #644]	; 11784 <test_decoded_size@@Base+0x2b8>
   114fc:	ldrd	r2, [r3, #8]
   11500:	adds	r2, r2, #1
   11504:	adc	r3, r3, #0
   11508:	ldr	r1, [pc, #628]	; 11784 <test_decoded_size@@Base+0x2b8>
   1150c:	strd	r2, [r1, #8]
   11510:	cmp	r0, #0
   11514:	moveq	r3, #1
   11518:	movne	r3, #0
   1151c:	uxtb	r3, r3
   11520:	mov	r0, r3
   11524:	mov	r3, #0
   11528:	str	r3, [sp, #4]
   1152c:	ldr	r3, [pc, #596]	; 11788 <test_decoded_size@@Base+0x2bc>
   11530:	str	r3, [sp]
   11534:	ldr	r3, [pc, #592]	; 1178c <test_decoded_size@@Base+0x2c0>
   11538:	ldr	r2, [pc, #592]	; 11790 <test_decoded_size@@Base+0x2c4>
   1153c:	mov	r1, #38	; 0x26
   11540:	bl	10fd8 <CU_assertImplementation@plt>
   11544:	ldr	r3, [pc, #568]	; 11784 <test_decoded_size@@Base+0x2b8>
   11548:	ldrd	r2, [r3, #16]
   1154c:	adds	r2, r2, #1
   11550:	adc	r3, r3, #0
   11554:	ldr	r1, [pc, #552]	; 11784 <test_decoded_size@@Base+0x2b8>
   11558:	strd	r2, [r1, #16]
   1155c:	mov	r0, #1
   11560:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   11564:	ldr	r3, [pc, #536]	; 11784 <test_decoded_size@@Base+0x2b8>
   11568:	ldrd	r2, [r3, #24]
   1156c:	adds	r2, r2, #1
   11570:	adc	r3, r3, #0
   11574:	ldr	r1, [pc, #520]	; 11784 <test_decoded_size@@Base+0x2b8>
   11578:	strd	r2, [r1, #24]
   1157c:	cmp	r0, #0
   11580:	moveq	r3, #1
   11584:	movne	r3, #0
   11588:	uxtb	r3, r3
   1158c:	mov	r0, r3
   11590:	mov	r3, #0
   11594:	str	r3, [sp, #4]
   11598:	ldr	r3, [pc, #488]	; 11788 <test_decoded_size@@Base+0x2bc>
   1159c:	str	r3, [sp]
   115a0:	ldr	r3, [pc, #484]	; 1178c <test_decoded_size@@Base+0x2c0>
   115a4:	ldr	r2, [pc, #488]	; 11794 <test_decoded_size@@Base+0x2c8>
   115a8:	mov	r1, #39	; 0x27
   115ac:	bl	10fd8 <CU_assertImplementation@plt>
   115b0:	ldr	r3, [pc, #460]	; 11784 <test_decoded_size@@Base+0x2b8>
   115b4:	ldrd	r2, [r3, #32]
   115b8:	adds	r2, r2, #1
   115bc:	adc	r3, r3, #0
   115c0:	ldr	r1, [pc, #444]	; 11784 <test_decoded_size@@Base+0x2b8>
   115c4:	strd	r2, [r1, #32]
   115c8:	mov	r0, #2
   115cc:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   115d0:	ldr	r3, [pc, #428]	; 11784 <test_decoded_size@@Base+0x2b8>
   115d4:	ldrd	r2, [r3, #40]	; 0x28
   115d8:	adds	r2, r2, #1
   115dc:	adc	r3, r3, #0
   115e0:	ldr	r1, [pc, #412]	; 11784 <test_decoded_size@@Base+0x2b8>
   115e4:	strd	r2, [r1, #40]	; 0x28
   115e8:	cmp	r0, #0
   115ec:	moveq	r3, #1
   115f0:	movne	r3, #0
   115f4:	uxtb	r3, r3
   115f8:	mov	r0, r3
   115fc:	mov	r3, #0
   11600:	str	r3, [sp, #4]
   11604:	ldr	r3, [pc, #380]	; 11788 <test_decoded_size@@Base+0x2bc>
   11608:	str	r3, [sp]
   1160c:	ldr	r3, [pc, #376]	; 1178c <test_decoded_size@@Base+0x2c0>
   11610:	ldr	r2, [pc, #384]	; 11798 <test_decoded_size@@Base+0x2cc>
   11614:	mov	r1, #40	; 0x28
   11618:	bl	10fd8 <CU_assertImplementation@plt>
   1161c:	ldr	r3, [pc, #352]	; 11784 <test_decoded_size@@Base+0x2b8>
   11620:	ldrd	r2, [r3, #48]	; 0x30
   11624:	adds	r2, r2, #1
   11628:	adc	r3, r3, #0
   1162c:	ldr	r1, [pc, #336]	; 11784 <test_decoded_size@@Base+0x2b8>
   11630:	strd	r2, [r1, #48]	; 0x30
   11634:	mov	r0, #3
   11638:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   1163c:	ldr	r3, [pc, #320]	; 11784 <test_decoded_size@@Base+0x2b8>
   11640:	ldrd	r2, [r3, #56]	; 0x38
   11644:	adds	r2, r2, #1
   11648:	adc	r3, r3, #0
   1164c:	ldr	r1, [pc, #304]	; 11784 <test_decoded_size@@Base+0x2b8>
   11650:	strd	r2, [r1, #56]	; 0x38
   11654:	cmp	r0, #0
   11658:	moveq	r3, #1
   1165c:	movne	r3, #0
   11660:	uxtb	r3, r3
   11664:	mov	r0, r3
   11668:	mov	r3, #0
   1166c:	str	r3, [sp, #4]
   11670:	ldr	r3, [pc, #272]	; 11788 <test_decoded_size@@Base+0x2bc>
   11674:	str	r3, [sp]
   11678:	ldr	r3, [pc, #268]	; 1178c <test_decoded_size@@Base+0x2c0>
   1167c:	ldr	r2, [pc, #280]	; 1179c <test_decoded_size@@Base+0x2d0>
   11680:	mov	r1, #41	; 0x29
   11684:	bl	10fd8 <CU_assertImplementation@plt>
   11688:	ldr	r3, [pc, #244]	; 11784 <test_decoded_size@@Base+0x2b8>
   1168c:	ldrd	r2, [r3, #64]	; 0x40
   11690:	adds	r2, r2, #1
   11694:	adc	r3, r3, #0
   11698:	ldr	r1, [pc, #228]	; 11784 <test_decoded_size@@Base+0x2b8>
   1169c:	strd	r2, [r1, #64]	; 0x40
   116a0:	mov	r0, #4
   116a4:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   116a8:	ldr	r3, [pc, #212]	; 11784 <test_decoded_size@@Base+0x2b8>
   116ac:	ldrd	r2, [r3, #72]	; 0x48
   116b0:	adds	r2, r2, #1
   116b4:	adc	r3, r3, #0
   116b8:	ldr	r1, [pc, #196]	; 11784 <test_decoded_size@@Base+0x2b8>
   116bc:	strd	r2, [r1, #72]	; 0x48
   116c0:	cmp	r0, #3
   116c4:	moveq	r3, #1
   116c8:	movne	r3, #0
   116cc:	uxtb	r3, r3
   116d0:	mov	r0, r3
   116d4:	mov	r3, #0
   116d8:	str	r3, [sp, #4]
   116dc:	ldr	r3, [pc, #164]	; 11788 <test_decoded_size@@Base+0x2bc>
   116e0:	str	r3, [sp]
   116e4:	ldr	r3, [pc, #160]	; 1178c <test_decoded_size@@Base+0x2c0>
   116e8:	ldr	r2, [pc, #176]	; 117a0 <test_decoded_size@@Base+0x2d4>
   116ec:	mov	r1, #42	; 0x2a
   116f0:	bl	10fd8 <CU_assertImplementation@plt>
   116f4:	ldr	r3, [pc, #136]	; 11784 <test_decoded_size@@Base+0x2b8>
   116f8:	ldrd	r2, [r3, #80]	; 0x50
   116fc:	adds	r2, r2, #1
   11700:	adc	r3, r3, #0
   11704:	ldr	r1, [pc, #120]	; 11784 <test_decoded_size@@Base+0x2b8>
   11708:	strd	r2, [r1, #80]	; 0x50
   1170c:	mov	r0, #8
   11710:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   11714:	ldr	r3, [pc, #104]	; 11784 <test_decoded_size@@Base+0x2b8>
   11718:	ldrd	r2, [r3, #88]	; 0x58
   1171c:	adds	r2, r2, #1
   11720:	adc	r3, r3, #0
   11724:	ldr	r1, [pc, #88]	; 11784 <test_decoded_size@@Base+0x2b8>
   11728:	strd	r2, [r1, #88]	; 0x58
   1172c:	cmp	r0, #6
   11730:	moveq	r3, #1
   11734:	movne	r3, #0
   11738:	uxtb	r3, r3
   1173c:	mov	r0, r3
   11740:	mov	r3, #0
   11744:	str	r3, [sp, #4]
   11748:	ldr	r3, [pc, #56]	; 11788 <test_decoded_size@@Base+0x2bc>
   1174c:	str	r3, [sp]
   11750:	ldr	r3, [pc, #52]	; 1178c <test_decoded_size@@Base+0x2c0>
   11754:	ldr	r2, [pc, #72]	; 117a4 <test_decoded_size@@Base+0x2d8>
   11758:	mov	r1, #43	; 0x2b
   1175c:	bl	10fd8 <CU_assertImplementation@plt>
   11760:	ldr	r3, [pc, #28]	; 11784 <test_decoded_size@@Base+0x2b8>
   11764:	ldrd	r2, [r3, #96]	; 0x60
   11768:	adds	r2, r2, #1
   1176c:	adc	r3, r3, #0
   11770:	ldr	r1, [pc, #12]	; 11784 <test_decoded_size@@Base+0x2b8>
   11774:	strd	r2, [r1, #96]	; 0x60
   11778:	nop			; (mov r0, r0)
   1177c:	sub	sp, fp, #4
   11780:	pop	{fp, pc}
   11784:	ldrdeq	r6, [r2], -r0
   11788:	ldrdeq	r5, [r1], -r4
   1178c:	andeq	r5, r1, r8, asr r0
   11790:	andeq	r5, r1, r0, ror #3
   11794:	andeq	r5, r1, r4, lsl r2
   11798:	andeq	r5, r1, r8, asr #4
   1179c:	andeq	r5, r1, ip, ror r2
   117a0:			; <UNDEFINED> instruction: 0x000152b0
   117a4:	andeq	r5, r1, r4, ror #5

000117a8 <test_encode@@Base>:
   117a8:	push	{fp, lr}
   117ac:	add	fp, sp, #4
   117b0:	sub	sp, sp, #8
   117b4:	ldr	r3, [pc, #508]	; 119b8 <test_encode@@Base+0x210>
   117b8:	ldrd	r2, [r3]
   117bc:	adds	r2, r2, #1
   117c0:	adc	r3, r3, #0
   117c4:	ldr	r1, [pc, #492]	; 119b8 <test_encode@@Base+0x210>
   117c8:	strd	r2, [r1]
   117cc:	mov	r3, #12
   117d0:	ldr	r2, [pc, #484]	; 119bc <test_encode@@Base+0x214>
   117d4:	mov	r1, #8
   117d8:	ldr	r0, [pc, #480]	; 119c0 <test_encode@@Base+0x218>
   117dc:	bl	119f4 <test_encoded_stuff@@Base>
   117e0:	mov	r3, r0
   117e4:	mov	r0, r3
   117e8:	ldr	r3, [pc, #456]	; 119b8 <test_encode@@Base+0x210>
   117ec:	ldrd	r2, [r3, #8]
   117f0:	adds	r2, r2, #1
   117f4:	adc	r3, r3, #0
   117f8:	ldr	r1, [pc, #440]	; 119b8 <test_encode@@Base+0x210>
   117fc:	strd	r2, [r1, #8]
   11800:	eor	r3, r0, #1
   11804:	uxtb	r3, r3
   11808:	mov	r0, r3
   1180c:	mov	r3, #0
   11810:	str	r3, [sp, #4]
   11814:	ldr	r3, [pc, #424]	; 119c4 <test_encode@@Base+0x21c>
   11818:	str	r3, [sp]
   1181c:	ldr	r3, [pc, #420]	; 119c8 <test_encode@@Base+0x220>
   11820:	ldr	r2, [pc, #420]	; 119cc <test_encode@@Base+0x224>
   11824:	mov	r1, #47	; 0x2f
   11828:	bl	10fd8 <CU_assertImplementation@plt>
   1182c:	ldr	r3, [pc, #388]	; 119b8 <test_encode@@Base+0x210>
   11830:	ldrd	r2, [r3, #16]
   11834:	adds	r2, r2, #1
   11838:	adc	r3, r3, #0
   1183c:	ldr	r1, [pc, #372]	; 119b8 <test_encode@@Base+0x210>
   11840:	strd	r2, [r1, #16]
   11844:	mov	r3, #12
   11848:	ldr	r2, [pc, #384]	; 119d0 <test_encode@@Base+0x228>
   1184c:	mov	r1, #7
   11850:	ldr	r0, [pc, #380]	; 119d4 <test_encode@@Base+0x22c>
   11854:	bl	119f4 <test_encoded_stuff@@Base>
   11858:	mov	r3, r0
   1185c:	mov	r0, r3
   11860:	ldr	r3, [pc, #336]	; 119b8 <test_encode@@Base+0x210>
   11864:	ldrd	r2, [r3, #24]
   11868:	adds	r2, r2, #1
   1186c:	adc	r3, r3, #0
   11870:	ldr	r1, [pc, #320]	; 119b8 <test_encode@@Base+0x210>
   11874:	strd	r2, [r1, #24]
   11878:	eor	r3, r0, #1
   1187c:	uxtb	r3, r3
   11880:	mov	r0, r3
   11884:	mov	r3, #0
   11888:	str	r3, [sp, #4]
   1188c:	ldr	r3, [pc, #304]	; 119c4 <test_encode@@Base+0x21c>
   11890:	str	r3, [sp]
   11894:	ldr	r3, [pc, #300]	; 119c8 <test_encode@@Base+0x220>
   11898:	ldr	r2, [pc, #312]	; 119d8 <test_encode@@Base+0x230>
   1189c:	mov	r1, #48	; 0x30
   118a0:	bl	10fd8 <CU_assertImplementation@plt>
   118a4:	ldr	r3, [pc, #268]	; 119b8 <test_encode@@Base+0x210>
   118a8:	ldrd	r2, [r3, #32]
   118ac:	adds	r2, r2, #1
   118b0:	adc	r3, r3, #0
   118b4:	ldr	r1, [pc, #252]	; 119b8 <test_encode@@Base+0x210>
   118b8:	strd	r2, [r1, #32]
   118bc:	mov	r3, #8
   118c0:	ldr	r2, [pc, #276]	; 119dc <test_encode@@Base+0x234>
   118c4:	mov	r1, #6
   118c8:	ldr	r0, [pc, #272]	; 119e0 <test_encode@@Base+0x238>
   118cc:	bl	119f4 <test_encoded_stuff@@Base>
   118d0:	mov	r3, r0
   118d4:	mov	r0, r3
   118d8:	ldr	r3, [pc, #216]	; 119b8 <test_encode@@Base+0x210>
   118dc:	ldrd	r2, [r3, #40]	; 0x28
   118e0:	adds	r2, r2, #1
   118e4:	adc	r3, r3, #0
   118e8:	ldr	r1, [pc, #200]	; 119b8 <test_encode@@Base+0x210>
   118ec:	strd	r2, [r1, #40]	; 0x28
   118f0:	eor	r3, r0, #1
   118f4:	uxtb	r3, r3
   118f8:	mov	r0, r3
   118fc:	mov	r3, #0
   11900:	str	r3, [sp, #4]
   11904:	ldr	r3, [pc, #184]	; 119c4 <test_encode@@Base+0x21c>
   11908:	str	r3, [sp]
   1190c:	ldr	r3, [pc, #180]	; 119c8 <test_encode@@Base+0x220>
   11910:	ldr	r2, [pc, #204]	; 119e4 <test_encode@@Base+0x23c>
   11914:	mov	r1, #49	; 0x31
   11918:	bl	10fd8 <CU_assertImplementation@plt>
   1191c:	ldr	r3, [pc, #148]	; 119b8 <test_encode@@Base+0x210>
   11920:	ldrd	r2, [r3, #48]	; 0x30
   11924:	adds	r2, r2, #1
   11928:	adc	r3, r3, #0
   1192c:	ldr	r1, [pc, #132]	; 119b8 <test_encode@@Base+0x210>
   11930:	strd	r2, [r1, #48]	; 0x30
   11934:	mov	r3, #8
   11938:	ldr	r2, [pc, #168]	; 119e8 <test_encode@@Base+0x240>
   1193c:	mov	r1, #5
   11940:	ldr	r0, [pc, #164]	; 119ec <test_encode@@Base+0x244>
   11944:	bl	119f4 <test_encoded_stuff@@Base>
   11948:	mov	r3, r0
   1194c:	mov	r0, r3
   11950:	ldr	r3, [pc, #96]	; 119b8 <test_encode@@Base+0x210>
   11954:	ldrd	r2, [r3, #56]	; 0x38
   11958:	adds	r2, r2, #1
   1195c:	adc	r3, r3, #0
   11960:	ldr	r1, [pc, #80]	; 119b8 <test_encode@@Base+0x210>
   11964:	strd	r2, [r1, #56]	; 0x38
   11968:	eor	r3, r0, #1
   1196c:	uxtb	r3, r3
   11970:	mov	r0, r3
   11974:	mov	r3, #0
   11978:	str	r3, [sp, #4]
   1197c:	ldr	r3, [pc, #64]	; 119c4 <test_encode@@Base+0x21c>
   11980:	str	r3, [sp]
   11984:	ldr	r3, [pc, #60]	; 119c8 <test_encode@@Base+0x220>
   11988:	ldr	r2, [pc, #96]	; 119f0 <test_encode@@Base+0x248>
   1198c:	mov	r1, #50	; 0x32
   11990:	bl	10fd8 <CU_assertImplementation@plt>
   11994:	ldr	r3, [pc, #28]	; 119b8 <test_encode@@Base+0x210>
   11998:	ldrd	r2, [r3, #64]	; 0x40
   1199c:	adds	r2, r2, #1
   119a0:	adc	r3, r3, #0
   119a4:	ldr	r1, [pc, #12]	; 119b8 <test_encode@@Base+0x210>
   119a8:	strd	r2, [r1, #64]	; 0x40
   119ac:	nop			; (mov r0, r0)
   119b0:	sub	sp, fp, #4
   119b4:	pop	{fp, pc}
   119b8:	andeq	r6, r2, r8, lsl #9
   119bc:	andeq	r5, r1, r8, lsl r3
   119c0:	andeq	r5, r1, r8, lsr #6
   119c4:	ldrdeq	r5, [r1], -r4
   119c8:	andeq	r5, r1, r8, asr r0
   119cc:	andeq	r5, r1, r4, lsr r3
   119d0:	muleq	r1, r4, r3
   119d4:	andeq	r5, r1, r4, lsr #7
   119d8:	andeq	r5, r1, ip, lsr #7
   119dc:	andeq	r5, r1, r8, lsl #8
   119e0:	andeq	r5, r1, r4, lsl r4
   119e4:	andeq	r5, r1, ip, lsl r4
   119e8:	andeq	r5, r1, r4, ror r4
   119ec:	andeq	r5, r1, r0, lsl #9
   119f0:	andeq	r5, r1, r8, lsl #9

000119f4 <test_encoded_stuff@@Base>:
   119f4:	push	{fp, lr}
   119f8:	add	fp, sp, #4
   119fc:	sub	sp, sp, #56	; 0x38
   11a00:	str	r0, [fp, #-24]	; 0xffffffe8
   11a04:	str	r1, [fp, #-28]	; 0xffffffe4
   11a08:	str	r2, [fp, #-32]	; 0xffffffe0
   11a0c:	str	r3, [fp, #-36]	; 0xffffffdc
   11a10:	ldr	r3, [pc, #644]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11a14:	ldrd	r2, [r3]
   11a18:	adds	r2, r2, #1
   11a1c:	adc	r3, r3, #0
   11a20:	ldr	r1, [pc, #628]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11a24:	strd	r2, [r1]
   11a28:	mov	r3, #0
   11a2c:	strb	r3, [fp, #-9]
   11a30:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11a34:	bl	12570 <b64_get_encoded_buffer_size@@Base>
   11a38:	str	r0, [fp, #-16]
   11a3c:	ldr	r3, [pc, #600]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11a40:	ldrd	r2, [r3, #8]
   11a44:	adds	r2, r2, #1
   11a48:	adc	r3, r3, #0
   11a4c:	ldr	r1, [pc, #584]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11a50:	strd	r2, [r1, #8]
   11a54:	ldr	r0, [fp, #-16]
   11a58:	bl	10fa8 <malloc@plt>
   11a5c:	mov	r3, r0
   11a60:	str	r3, [fp, #-20]	; 0xffffffec
   11a64:	ldr	r2, [fp, #-20]	; 0xffffffec
   11a68:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11a6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a70:	bl	125cc <b64_encode@@Base>
   11a74:	ldr	r3, [pc, #544]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11a78:	ldrd	r2, [r3, #16]
   11a7c:	adds	r2, r2, #1
   11a80:	adc	r3, r3, #0
   11a84:	ldr	r1, [pc, #528]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11a88:	strd	r2, [r1, #16]
   11a8c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11a90:	ldr	r3, [fp, #-16]
   11a94:	cmp	r2, r3
   11a98:	moveq	r3, #1
   11a9c:	movne	r3, #0
   11aa0:	uxtb	r3, r3
   11aa4:	mov	r0, r3
   11aa8:	mov	r3, #0
   11aac:	str	r3, [sp, #4]
   11ab0:	ldr	r3, [pc, #488]	; 11ca0 <test_encoded_stuff@@Base+0x2ac>
   11ab4:	str	r3, [sp]
   11ab8:	ldr	r3, [pc, #484]	; 11ca4 <test_encoded_stuff@@Base+0x2b0>
   11abc:	ldr	r2, [pc, #484]	; 11ca8 <test_encoded_stuff@@Base+0x2b4>
   11ac0:	mov	r1, #62	; 0x3e
   11ac4:	bl	10fd8 <CU_assertImplementation@plt>
   11ac8:	ldrb	r3, [fp, #-9]
   11acc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11ad0:	ldr	r2, [fp, #-16]
   11ad4:	cmp	r1, r2
   11ad8:	movne	r2, #1
   11adc:	moveq	r2, #0
   11ae0:	uxtb	r2, r2
   11ae4:	orr	r3, r3, r2
   11ae8:	cmp	r3, #0
   11aec:	movne	r3, #1
   11af0:	moveq	r3, #0
   11af4:	strb	r3, [fp, #-9]
   11af8:	mov	r3, #0
   11afc:	str	r3, [fp, #-8]
   11b00:	b	11c58 <test_encoded_stuff@@Base+0x264>
   11b04:	ldr	r3, [pc, #400]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11b08:	ldrd	r2, [r3, #48]	; 0x30
   11b0c:	adds	r2, r2, #1
   11b10:	adc	r3, r3, #0
   11b14:	ldr	r1, [pc, #384]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11b18:	strd	r2, [r1, #48]	; 0x30
   11b1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11b20:	ldr	r3, [fp, #-8]
   11b24:	add	r3, r2, r3
   11b28:	ldrb	r2, [r3]
   11b2c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11b30:	ldr	r3, [fp, #-8]
   11b34:	add	r3, r1, r3
   11b38:	ldrb	r3, [r3]
   11b3c:	cmp	r2, r3
   11b40:	moveq	r3, #1
   11b44:	movne	r3, #0
   11b48:	uxtb	r3, r3
   11b4c:	mov	r0, r3
   11b50:	mov	r3, #0
   11b54:	str	r3, [sp, #4]
   11b58:	ldr	r3, [pc, #320]	; 11ca0 <test_encoded_stuff@@Base+0x2ac>
   11b5c:	str	r3, [sp]
   11b60:	ldr	r3, [pc, #316]	; 11ca4 <test_encoded_stuff@@Base+0x2b0>
   11b64:	ldr	r2, [pc, #320]	; 11cac <test_encoded_stuff@@Base+0x2b8>
   11b68:	mov	r1, #65	; 0x41
   11b6c:	bl	10fd8 <CU_assertImplementation@plt>
   11b70:	ldr	r3, [pc, #292]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11b74:	ldrd	r2, [r3, #24]
   11b78:	adds	r2, r2, #1
   11b7c:	adc	r3, r3, #0
   11b80:	ldr	r1, [pc, #276]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11b84:	strd	r2, [r1, #24]
   11b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   11b8c:	ldr	r3, [fp, #-8]
   11b90:	add	r3, r2, r3
   11b94:	ldrb	r2, [r3]
   11b98:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11b9c:	ldr	r3, [fp, #-8]
   11ba0:	add	r3, r1, r3
   11ba4:	ldrb	r3, [r3]
   11ba8:	cmp	r2, r3
   11bac:	beq	11c34 <test_encoded_stuff@@Base+0x240>
   11bb0:	ldr	r3, [pc, #228]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11bb4:	ldrd	r2, [r3, #32]
   11bb8:	adds	r2, r2, #1
   11bbc:	adc	r3, r3, #0
   11bc0:	ldr	r1, [pc, #212]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11bc4:	strd	r2, [r1, #32]
   11bc8:	mov	r3, #1
   11bcc:	strb	r3, [fp, #-9]
   11bd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11bd4:	ldr	r3, [fp, #-8]
   11bd8:	add	r3, r2, r3
   11bdc:	ldrb	r3, [r3]
   11be0:	mov	ip, r3
   11be4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11bec:	ldr	r3, [fp, #-8]
   11bf0:	add	r3, r2, r3
   11bf4:	ldrb	r3, [r3]
   11bf8:	mov	r0, r3
   11bfc:	ldr	r3, [fp, #-16]
   11c00:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c04:	str	r2, [sp, #16]
   11c08:	str	r3, [sp, #12]
   11c0c:	str	r0, [sp, #8]
   11c10:	ldr	r3, [fp, #-8]
   11c14:	str	r3, [sp, #4]
   11c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c1c:	str	r3, [sp]
   11c20:	mov	r3, r1
   11c24:	mov	r2, ip
   11c28:	ldr	r1, [fp, #-8]
   11c2c:	ldr	r0, [pc, #124]	; 11cb0 <test_encoded_stuff@@Base+0x2bc>
   11c30:	bl	10f00 <printf@plt>
   11c34:	ldr	r3, [fp, #-8]
   11c38:	add	r3, r3, #1
   11c3c:	str	r3, [fp, #-8]
   11c40:	ldr	r3, [pc, #84]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11c44:	ldrd	r2, [r3, #40]	; 0x28
   11c48:	adds	r2, r2, #1
   11c4c:	adc	r3, r3, #0
   11c50:	ldr	r1, [pc, #68]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11c54:	strd	r2, [r1, #40]	; 0x28
   11c58:	ldr	r2, [fp, #-8]
   11c5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c60:	cmp	r2, r3
   11c64:	bcc	11b04 <test_encoded_stuff@@Base+0x110>
   11c68:	ldr	r0, [fp, #-20]	; 0xffffffec
   11c6c:	bl	10f24 <free@plt>
   11c70:	ldrb	r0, [fp, #-9]
   11c74:	ldr	r3, [pc, #32]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11c78:	ldrd	r2, [r3, #56]	; 0x38
   11c7c:	adds	r2, r2, #1
   11c80:	adc	r3, r3, #0
   11c84:	ldr	r1, [pc, #16]	; 11c9c <test_encoded_stuff@@Base+0x2a8>
   11c88:	strd	r2, [r1, #56]	; 0x38
   11c8c:	mov	r3, r0
   11c90:	mov	r0, r3
   11c94:	sub	sp, fp, #4
   11c98:	pop	{fp, pc}
   11c9c:	andeq	r6, r2, r8, asr #8
   11ca0:	ldrdeq	r5, [r1], -r4
   11ca4:	andeq	r5, r1, r8, asr r0
   11ca8:	andeq	r5, r1, r0, ror #9
   11cac:	andeq	r5, r1, r0, lsl r5
   11cb0:	andeq	r5, r1, ip, lsr r5

00011cb4 <test_decode@@Base>:
   11cb4:	push	{fp, lr}
   11cb8:	add	fp, sp, #4
   11cbc:	sub	sp, sp, #8
   11cc0:	ldr	r3, [pc, #508]	; 11ec4 <test_decode@@Base+0x210>
   11cc4:	ldrd	r2, [r3]
   11cc8:	adds	r2, r2, #1
   11ccc:	adc	r3, r3, #0
   11cd0:	ldr	r1, [pc, #492]	; 11ec4 <test_decode@@Base+0x210>
   11cd4:	strd	r2, [r1]
   11cd8:	mov	r3, #8
   11cdc:	ldr	r2, [pc, #484]	; 11ec8 <test_decode@@Base+0x214>
   11ce0:	mov	r1, #12
   11ce4:	ldr	r0, [pc, #480]	; 11ecc <test_decode@@Base+0x218>
   11ce8:	bl	11f00 <test_decoded_stuff@@Base>
   11cec:	mov	r3, r0
   11cf0:	mov	r0, r3
   11cf4:	ldr	r3, [pc, #456]	; 11ec4 <test_decode@@Base+0x210>
   11cf8:	ldrd	r2, [r3, #8]
   11cfc:	adds	r2, r2, #1
   11d00:	adc	r3, r3, #0
   11d04:	ldr	r1, [pc, #440]	; 11ec4 <test_decode@@Base+0x210>
   11d08:	strd	r2, [r1, #8]
   11d0c:	eor	r3, r0, #1
   11d10:	uxtb	r3, r3
   11d14:	mov	r0, r3
   11d18:	mov	r3, #0
   11d1c:	str	r3, [sp, #4]
   11d20:	ldr	r3, [pc, #424]	; 11ed0 <test_decode@@Base+0x21c>
   11d24:	str	r3, [sp]
   11d28:	ldr	r3, [pc, #420]	; 11ed4 <test_decode@@Base+0x220>
   11d2c:	ldr	r2, [pc, #420]	; 11ed8 <test_decode@@Base+0x224>
   11d30:	mov	r1, #78	; 0x4e
   11d34:	bl	10fd8 <CU_assertImplementation@plt>
   11d38:	ldr	r3, [pc, #388]	; 11ec4 <test_decode@@Base+0x210>
   11d3c:	ldrd	r2, [r3, #16]
   11d40:	adds	r2, r2, #1
   11d44:	adc	r3, r3, #0
   11d48:	ldr	r1, [pc, #372]	; 11ec4 <test_decode@@Base+0x210>
   11d4c:	strd	r2, [r1, #16]
   11d50:	mov	r3, #7
   11d54:	ldr	r2, [pc, #384]	; 11edc <test_decode@@Base+0x228>
   11d58:	mov	r1, #12
   11d5c:	ldr	r0, [pc, #380]	; 11ee0 <test_decode@@Base+0x22c>
   11d60:	bl	11f00 <test_decoded_stuff@@Base>
   11d64:	mov	r3, r0
   11d68:	mov	r0, r3
   11d6c:	ldr	r3, [pc, #336]	; 11ec4 <test_decode@@Base+0x210>
   11d70:	ldrd	r2, [r3, #24]
   11d74:	adds	r2, r2, #1
   11d78:	adc	r3, r3, #0
   11d7c:	ldr	r1, [pc, #320]	; 11ec4 <test_decode@@Base+0x210>
   11d80:	strd	r2, [r1, #24]
   11d84:	eor	r3, r0, #1
   11d88:	uxtb	r3, r3
   11d8c:	mov	r0, r3
   11d90:	mov	r3, #0
   11d94:	str	r3, [sp, #4]
   11d98:	ldr	r3, [pc, #304]	; 11ed0 <test_decode@@Base+0x21c>
   11d9c:	str	r3, [sp]
   11da0:	ldr	r3, [pc, #300]	; 11ed4 <test_decode@@Base+0x220>
   11da4:	ldr	r2, [pc, #312]	; 11ee4 <test_decode@@Base+0x230>
   11da8:	mov	r1, #79	; 0x4f
   11dac:	bl	10fd8 <CU_assertImplementation@plt>
   11db0:	ldr	r3, [pc, #268]	; 11ec4 <test_decode@@Base+0x210>
   11db4:	ldrd	r2, [r3, #32]
   11db8:	adds	r2, r2, #1
   11dbc:	adc	r3, r3, #0
   11dc0:	ldr	r1, [pc, #252]	; 11ec4 <test_decode@@Base+0x210>
   11dc4:	strd	r2, [r1, #32]
   11dc8:	mov	r3, #6
   11dcc:	ldr	r2, [pc, #276]	; 11ee8 <test_decode@@Base+0x234>
   11dd0:	mov	r1, #8
   11dd4:	ldr	r0, [pc, #272]	; 11eec <test_decode@@Base+0x238>
   11dd8:	bl	11f00 <test_decoded_stuff@@Base>
   11ddc:	mov	r3, r0
   11de0:	mov	r0, r3
   11de4:	ldr	r3, [pc, #216]	; 11ec4 <test_decode@@Base+0x210>
   11de8:	ldrd	r2, [r3, #40]	; 0x28
   11dec:	adds	r2, r2, #1
   11df0:	adc	r3, r3, #0
   11df4:	ldr	r1, [pc, #200]	; 11ec4 <test_decode@@Base+0x210>
   11df8:	strd	r2, [r1, #40]	; 0x28
   11dfc:	eor	r3, r0, #1
   11e00:	uxtb	r3, r3
   11e04:	mov	r0, r3
   11e08:	mov	r3, #0
   11e0c:	str	r3, [sp, #4]
   11e10:	ldr	r3, [pc, #184]	; 11ed0 <test_decode@@Base+0x21c>
   11e14:	str	r3, [sp]
   11e18:	ldr	r3, [pc, #180]	; 11ed4 <test_decode@@Base+0x220>
   11e1c:	ldr	r2, [pc, #204]	; 11ef0 <test_decode@@Base+0x23c>
   11e20:	mov	r1, #80	; 0x50
   11e24:	bl	10fd8 <CU_assertImplementation@plt>
   11e28:	ldr	r3, [pc, #148]	; 11ec4 <test_decode@@Base+0x210>
   11e2c:	ldrd	r2, [r3, #48]	; 0x30
   11e30:	adds	r2, r2, #1
   11e34:	adc	r3, r3, #0
   11e38:	ldr	r1, [pc, #132]	; 11ec4 <test_decode@@Base+0x210>
   11e3c:	strd	r2, [r1, #48]	; 0x30
   11e40:	mov	r3, #5
   11e44:	ldr	r2, [pc, #168]	; 11ef4 <test_decode@@Base+0x240>
   11e48:	mov	r1, #8
   11e4c:	ldr	r0, [pc, #164]	; 11ef8 <test_decode@@Base+0x244>
   11e50:	bl	11f00 <test_decoded_stuff@@Base>
   11e54:	mov	r3, r0
   11e58:	mov	r0, r3
   11e5c:	ldr	r3, [pc, #96]	; 11ec4 <test_decode@@Base+0x210>
   11e60:	ldrd	r2, [r3, #56]	; 0x38
   11e64:	adds	r2, r2, #1
   11e68:	adc	r3, r3, #0
   11e6c:	ldr	r1, [pc, #80]	; 11ec4 <test_decode@@Base+0x210>
   11e70:	strd	r2, [r1, #56]	; 0x38
   11e74:	eor	r3, r0, #1
   11e78:	uxtb	r3, r3
   11e7c:	mov	r0, r3
   11e80:	mov	r3, #0
   11e84:	str	r3, [sp, #4]
   11e88:	ldr	r3, [pc, #64]	; 11ed0 <test_decode@@Base+0x21c>
   11e8c:	str	r3, [sp]
   11e90:	ldr	r3, [pc, #60]	; 11ed4 <test_decode@@Base+0x220>
   11e94:	ldr	r2, [pc, #96]	; 11efc <test_decode@@Base+0x248>
   11e98:	mov	r1, #81	; 0x51
   11e9c:	bl	10fd8 <CU_assertImplementation@plt>
   11ea0:	ldr	r3, [pc, #28]	; 11ec4 <test_decode@@Base+0x210>
   11ea4:	ldrd	r2, [r3, #64]	; 0x40
   11ea8:	adds	r2, r2, #1
   11eac:	adc	r3, r3, #0
   11eb0:	ldr	r1, [pc, #12]	; 11ec4 <test_decode@@Base+0x210>
   11eb4:	strd	r2, [r1, #64]	; 0x40
   11eb8:	nop			; (mov r0, r0)
   11ebc:	sub	sp, fp, #4
   11ec0:	pop	{fp, pc}
   11ec4:	andeq	r6, r2, r0, lsl #8
   11ec8:	andeq	r5, r1, r8, lsr #6
   11ecc:	andeq	r5, r1, r8, lsl r3
   11ed0:	ldrdeq	r5, [r1], -r4
   11ed4:	andeq	r5, r1, r8, asr r0
   11ed8:	andeq	r5, r1, r8, ror #10
   11edc:	andeq	r5, r1, r4, lsr #7
   11ee0:	muleq	r1, r4, r3
   11ee4:	andeq	r5, r1, r8, asr #11
   11ee8:	andeq	r5, r1, r4, lsl r4
   11eec:	andeq	r5, r1, r8, lsl #8
   11ef0:	andeq	r5, r1, r4, lsr #12
   11ef4:	andeq	r5, r1, r0, lsl #9
   11ef8:	andeq	r5, r1, r4, ror r4
   11efc:	andeq	r5, r1, ip, ror r6

00011f00 <test_decoded_stuff@@Base>:
   11f00:	push	{r4, fp, lr}
   11f04:	add	fp, sp, #8
   11f08:	sub	sp, sp, #68	; 0x44
   11f0c:	str	r0, [fp, #-40]	; 0xffffffd8
   11f10:	str	r1, [fp, #-44]	; 0xffffffd4
   11f14:	str	r2, [fp, #-48]	; 0xffffffd0
   11f18:	str	r3, [fp, #-52]	; 0xffffffcc
   11f1c:	ldr	r3, [pc, #732]	; 12200 <test_decoded_stuff@@Base+0x300>
   11f20:	ldrd	r2, [r3]
   11f24:	adds	r2, r2, #1
   11f28:	adc	r3, r3, #0
   11f2c:	ldr	r1, [pc, #716]	; 12200 <test_decoded_stuff@@Base+0x300>
   11f30:	strd	r2, [r1]
   11f34:	mov	r3, #0
   11f38:	strb	r3, [fp, #-17]	; 0xffffffef
   11f3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11f40:	bl	1295c <b64_get_decoded_buffer_size@@Base>
   11f44:	str	r0, [fp, #-24]	; 0xffffffe8
   11f48:	ldr	r3, [pc, #688]	; 12200 <test_decoded_stuff@@Base+0x300>
   11f4c:	ldrd	r2, [r3, #8]
   11f50:	adds	r2, r2, #1
   11f54:	adc	r3, r3, #0
   11f58:	ldr	r1, [pc, #672]	; 12200 <test_decoded_stuff@@Base+0x300>
   11f5c:	strd	r2, [r1, #8]
   11f60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f64:	bl	10fa8 <malloc@plt>
   11f68:	mov	r3, r0
   11f6c:	str	r3, [fp, #-28]	; 0xffffffe4
   11f70:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11f74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11f78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f7c:	bl	12a0c <b64_decode@@Base>
   11f80:	str	r0, [fp, #-32]	; 0xffffffe0
   11f84:	ldr	r3, [pc, #628]	; 12200 <test_decoded_stuff@@Base+0x300>
   11f88:	ldrd	r2, [r3, #16]
   11f8c:	adds	r2, r2, #1
   11f90:	adc	r3, r3, #0
   11f94:	ldr	r1, [pc, #612]	; 12200 <test_decoded_stuff@@Base+0x300>
   11f98:	strd	r2, [r1, #16]
   11f9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11fa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11fa4:	cmp	r2, r3
   11fa8:	moveq	r3, #1
   11fac:	movne	r3, #0
   11fb0:	uxtb	r3, r3
   11fb4:	mov	r0, r3
   11fb8:	mov	r3, #0
   11fbc:	str	r3, [sp, #4]
   11fc0:	ldr	r3, [pc, #572]	; 12204 <test_decoded_stuff@@Base+0x304>
   11fc4:	str	r3, [sp]
   11fc8:	ldr	r3, [pc, #568]	; 12208 <test_decoded_stuff@@Base+0x308>
   11fcc:	ldr	r2, [pc, #568]	; 1220c <test_decoded_stuff@@Base+0x30c>
   11fd0:	mov	r1, #92	; 0x5c
   11fd4:	bl	10fd8 <CU_assertImplementation@plt>
   11fd8:	ldr	r3, [pc, #544]	; 12200 <test_decoded_stuff@@Base+0x300>
   11fdc:	ldrd	r2, [r3, #24]
   11fe0:	adds	r2, r2, #1
   11fe4:	adc	r3, r3, #0
   11fe8:	ldr	r1, [pc, #528]	; 12200 <test_decoded_stuff@@Base+0x300>
   11fec:	strd	r2, [r1, #24]
   11ff0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11ff4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11ff8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11ffc:	cmp	r1, r2
   12000:	movne	r2, #1
   12004:	moveq	r2, #0
   12008:	uxtb	r2, r2
   1200c:	orr	r3, r3, r2
   12010:	cmp	r3, #0
   12014:	movne	r3, #1
   12018:	moveq	r3, #0
   1201c:	strb	r3, [fp, #-17]	; 0xffffffef
   12020:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12024:	cmp	r3, #0
   12028:	beq	12058 <test_decoded_stuff@@Base+0x158>
   1202c:	ldr	r3, [pc, #460]	; 12200 <test_decoded_stuff@@Base+0x300>
   12030:	ldrd	r2, [r3, #32]
   12034:	adds	r2, r2, #1
   12038:	adc	r3, r3, #0
   1203c:	ldr	r1, [pc, #444]	; 12200 <test_decoded_stuff@@Base+0x300>
   12040:	strd	r2, [r1, #32]
   12044:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1204c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12050:	ldr	r0, [pc, #440]	; 12210 <test_decoded_stuff@@Base+0x310>
   12054:	bl	10f00 <printf@plt>
   12058:	mov	r3, #0
   1205c:	str	r3, [fp, #-16]
   12060:	b	121bc <test_decoded_stuff@@Base+0x2bc>
   12064:	ldr	r3, [pc, #404]	; 12200 <test_decoded_stuff@@Base+0x300>
   12068:	ldrd	r2, [r3, #64]	; 0x40
   1206c:	adds	r2, r2, #1
   12070:	adc	r3, r3, #0
   12074:	ldr	r1, [pc, #388]	; 12200 <test_decoded_stuff@@Base+0x300>
   12078:	strd	r2, [r1, #64]	; 0x40
   1207c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12080:	ldr	r3, [fp, #-16]
   12084:	add	r3, r2, r3
   12088:	ldrb	r2, [r3]
   1208c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12090:	ldr	r3, [fp, #-16]
   12094:	add	r3, r1, r3
   12098:	ldrb	r3, [r3]
   1209c:	cmp	r2, r3
   120a0:	moveq	r3, #1
   120a4:	movne	r3, #0
   120a8:	uxtb	r3, r3
   120ac:	mov	r0, r3
   120b0:	mov	r3, #0
   120b4:	str	r3, [sp, #4]
   120b8:	ldr	r3, [pc, #324]	; 12204 <test_decoded_stuff@@Base+0x304>
   120bc:	str	r3, [sp]
   120c0:	ldr	r3, [pc, #320]	; 12208 <test_decoded_stuff@@Base+0x308>
   120c4:	ldr	r2, [pc, #328]	; 12214 <test_decoded_stuff@@Base+0x314>
   120c8:	mov	r1, #99	; 0x63
   120cc:	bl	10fd8 <CU_assertImplementation@plt>
   120d0:	ldr	r3, [pc, #296]	; 12200 <test_decoded_stuff@@Base+0x300>
   120d4:	ldrd	r2, [r3, #40]	; 0x28
   120d8:	adds	r2, r2, #1
   120dc:	adc	r3, r3, #0
   120e0:	ldr	r1, [pc, #280]	; 12200 <test_decoded_stuff@@Base+0x300>
   120e4:	strd	r2, [r1, #40]	; 0x28
   120e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   120ec:	ldr	r3, [fp, #-16]
   120f0:	add	r3, r2, r3
   120f4:	ldrb	r2, [r3]
   120f8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   120fc:	ldr	r3, [fp, #-16]
   12100:	add	r3, r1, r3
   12104:	ldrb	r3, [r3]
   12108:	cmp	r2, r3
   1210c:	beq	12198 <test_decoded_stuff@@Base+0x298>
   12110:	ldr	r3, [pc, #232]	; 12200 <test_decoded_stuff@@Base+0x300>
   12114:	ldrd	r2, [r3, #48]	; 0x30
   12118:	adds	r2, r2, #1
   1211c:	adc	r3, r3, #0
   12120:	ldr	r1, [pc, #216]	; 12200 <test_decoded_stuff@@Base+0x300>
   12124:	strd	r2, [r1, #48]	; 0x30
   12128:	mov	r3, #1
   1212c:	strb	r3, [fp, #-17]	; 0xffffffef
   12130:	ldr	r0, [fp, #-16]
   12134:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12138:	ldr	r3, [fp, #-16]
   1213c:	add	r3, r2, r3
   12140:	ldrb	r3, [r3]
   12144:	mov	r4, r3
   12148:	ldr	ip, [fp, #-52]	; 0xffffffcc
   1214c:	ldr	r3, [fp, #-16]
   12150:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12154:	ldr	r2, [fp, #-16]
   12158:	add	r2, r1, r2
   1215c:	ldrb	r2, [r2]
   12160:	mov	lr, r2
   12164:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12168:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1216c:	str	r1, [sp, #16]
   12170:	str	r2, [sp, #12]
   12174:	str	lr, [sp, #8]
   12178:	str	r3, [sp, #4]
   1217c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12180:	str	r3, [sp]
   12184:	mov	r3, ip
   12188:	mov	r2, r4
   1218c:	mov	r1, r0
   12190:	ldr	r0, [pc, #128]	; 12218 <test_decoded_stuff@@Base+0x318>
   12194:	bl	10f00 <printf@plt>
   12198:	ldr	r3, [fp, #-16]
   1219c:	add	r3, r3, #1
   121a0:	str	r3, [fp, #-16]
   121a4:	ldr	r3, [pc, #84]	; 12200 <test_decoded_stuff@@Base+0x300>
   121a8:	ldrd	r2, [r3, #56]	; 0x38
   121ac:	adds	r2, r2, #1
   121b0:	adc	r3, r3, #0
   121b4:	ldr	r1, [pc, #68]	; 12200 <test_decoded_stuff@@Base+0x300>
   121b8:	strd	r2, [r1, #56]	; 0x38
   121bc:	ldr	r2, [fp, #-16]
   121c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   121c4:	cmp	r2, r3
   121c8:	bcc	12064 <test_decoded_stuff@@Base+0x164>
   121cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   121d0:	bl	10f24 <free@plt>
   121d4:	ldrb	r0, [fp, #-17]	; 0xffffffef
   121d8:	ldr	r3, [pc, #32]	; 12200 <test_decoded_stuff@@Base+0x300>
   121dc:	ldrd	r2, [r3, #72]	; 0x48
   121e0:	adds	r2, r2, #1
   121e4:	adc	r3, r3, #0
   121e8:	ldr	r1, [pc, #16]	; 12200 <test_decoded_stuff@@Base+0x300>
   121ec:	strd	r2, [r1, #72]	; 0x48
   121f0:	mov	r3, r0
   121f4:	mov	r0, r3
   121f8:	sub	sp, fp, #8
   121fc:	pop	{r4, fp, pc}
   12200:			; <UNDEFINED> instruction: 0x000263b0
   12204:	ldrdeq	r5, [r1], -r4
   12208:	andeq	r5, r1, r8, asr r0
   1220c:	ldrdeq	r5, [r1], -r4
   12210:	andeq	r5, r1, r0, lsl #14
   12214:	andeq	r5, r1, r0, lsl r5
   12218:	andeq	r5, r1, r8, lsl r7

0001221c <add_suites@@Base>:
   1221c:	push	{fp, lr}
   12220:	add	fp, sp, #4
   12224:	sub	sp, sp, #8
   12228:	str	r0, [fp, #-8]
   1222c:	ldr	r3, [pc, #268]	; 12340 <add_suites@@Base+0x124>
   12230:	ldrd	r2, [r3]
   12234:	adds	r2, r2, #1
   12238:	adc	r3, r3, #0
   1223c:	ldr	r1, [pc, #252]	; 12340 <add_suites@@Base+0x124>
   12240:	strd	r2, [r1]
   12244:	mov	r2, #0
   12248:	mov	r1, #0
   1224c:	ldr	r0, [pc, #240]	; 12344 <add_suites@@Base+0x128>
   12250:	bl	10f30 <CU_add_suite@plt>
   12254:	ldr	r3, [pc, #228]	; 12340 <add_suites@@Base+0x124>
   12258:	ldrd	r2, [r3, #8]
   1225c:	adds	r2, r2, #1
   12260:	adc	r3, r3, #0
   12264:	ldr	r1, [pc, #212]	; 12340 <add_suites@@Base+0x124>
   12268:	strd	r2, [r1, #8]
   1226c:	ldr	r3, [fp, #-8]
   12270:	str	r0, [r3]
   12274:	ldr	r3, [fp, #-8]
   12278:	ldr	r3, [r3]
   1227c:	ldr	r2, [pc, #196]	; 12348 <add_suites@@Base+0x12c>
   12280:	ldr	r1, [pc, #196]	; 1234c <add_suites@@Base+0x130>
   12284:	mov	r0, r3
   12288:	bl	1105c <CU_add_test@plt>
   1228c:	ldr	r3, [pc, #172]	; 12340 <add_suites@@Base+0x124>
   12290:	ldrd	r2, [r3, #16]
   12294:	adds	r2, r2, #1
   12298:	adc	r3, r3, #0
   1229c:	ldr	r1, [pc, #156]	; 12340 <add_suites@@Base+0x124>
   122a0:	strd	r2, [r1, #16]
   122a4:	ldr	r3, [fp, #-8]
   122a8:	ldr	r3, [r3]
   122ac:	ldr	r2, [pc, #156]	; 12350 <add_suites@@Base+0x134>
   122b0:	ldr	r1, [pc, #156]	; 12354 <add_suites@@Base+0x138>
   122b4:	mov	r0, r3
   122b8:	bl	1105c <CU_add_test@plt>
   122bc:	ldr	r3, [pc, #124]	; 12340 <add_suites@@Base+0x124>
   122c0:	ldrd	r2, [r3, #24]
   122c4:	adds	r2, r2, #1
   122c8:	adc	r3, r3, #0
   122cc:	ldr	r1, [pc, #108]	; 12340 <add_suites@@Base+0x124>
   122d0:	strd	r2, [r1, #24]
   122d4:	ldr	r3, [fp, #-8]
   122d8:	ldr	r3, [r3]
   122dc:	ldr	r2, [pc, #116]	; 12358 <add_suites@@Base+0x13c>
   122e0:	ldr	r1, [pc, #116]	; 1235c <add_suites@@Base+0x140>
   122e4:	mov	r0, r3
   122e8:	bl	1105c <CU_add_test@plt>
   122ec:	ldr	r3, [pc, #76]	; 12340 <add_suites@@Base+0x124>
   122f0:	ldrd	r2, [r3, #32]
   122f4:	adds	r2, r2, #1
   122f8:	adc	r3, r3, #0
   122fc:	ldr	r1, [pc, #60]	; 12340 <add_suites@@Base+0x124>
   12300:	strd	r2, [r1, #32]
   12304:	ldr	r3, [fp, #-8]
   12308:	ldr	r3, [r3]
   1230c:	ldr	r2, [pc, #76]	; 12360 <add_suites@@Base+0x144>
   12310:	ldr	r1, [pc, #76]	; 12364 <add_suites@@Base+0x148>
   12314:	mov	r0, r3
   12318:	bl	1105c <CU_add_test@plt>
   1231c:	ldr	r3, [pc, #28]	; 12340 <add_suites@@Base+0x124>
   12320:	ldrd	r2, [r3, #40]	; 0x28
   12324:	adds	r2, r2, #1
   12328:	adc	r3, r3, #0
   1232c:	ldr	r1, [pc, #12]	; 12340 <add_suites@@Base+0x124>
   12330:	strd	r2, [r1, #40]	; 0x28
   12334:	nop			; (mov r0, r0)
   12338:	sub	sp, fp, #4
   1233c:	pop	{fp, pc}
   12340:	andeq	r6, r2, r0, lsl #7
   12344:	andeq	r5, r1, r4, asr #14
   12348:	strdeq	r1, [r1], -r0
   1234c:	andeq	r5, r1, ip, asr r7
   12350:	andeq	r1, r1, ip, asr #9
   12354:	andeq	r5, r1, r8, ror r7
   12358:	andeq	r1, r1, r8, lsr #15
   1235c:	muleq	r1, r4, r7
   12360:			; <UNDEFINED> instruction: 0x00011cb4
   12364:			; <UNDEFINED> instruction: 0x000157b0

00012368 <main@@Base>:
   12368:	push	{fp, lr}
   1236c:	add	fp, sp, #4
   12370:	sub	sp, sp, #8
   12374:	ldr	r3, [pc, #468]	; 12550 <main@@Base+0x1e8>
   12378:	ldrd	r2, [r3]
   1237c:	adds	r2, r2, #1
   12380:	adc	r3, r3, #0
   12384:	ldr	r1, [pc, #452]	; 12550 <main@@Base+0x1e8>
   12388:	strd	r2, [r1]
   1238c:	mov	r3, #1
   12390:	str	r3, [fp, #-8]
   12394:	mov	r3, #0
   12398:	str	r3, [fp, #-12]
   1239c:	bl	10ee8 <CU_initialize_registry@plt>
   123a0:	ldr	r3, [pc, #424]	; 12550 <main@@Base+0x1e8>
   123a4:	ldrd	r2, [r3, #8]
   123a8:	adds	r2, r2, #1
   123ac:	adc	r3, r3, #0
   123b0:	ldr	r1, [pc, #408]	; 12550 <main@@Base+0x1e8>
   123b4:	strd	r2, [r1, #8]
   123b8:	cmp	r0, #0
   123bc:	bne	124f8 <main@@Base+0x190>
   123c0:	ldr	r3, [pc, #392]	; 12550 <main@@Base+0x1e8>
   123c4:	ldrd	r2, [r3, #16]
   123c8:	adds	r2, r2, #1
   123cc:	adc	r3, r3, #0
   123d0:	ldr	r1, [pc, #376]	; 12550 <main@@Base+0x1e8>
   123d4:	strd	r2, [r1, #16]
   123d8:	sub	r3, fp, #12
   123dc:	mov	r0, r3
   123e0:	bl	1221c <add_suites@@Base>
   123e4:	ldr	r3, [pc, #356]	; 12550 <main@@Base+0x1e8>
   123e8:	ldrd	r2, [r3, #24]
   123ec:	adds	r2, r2, #1
   123f0:	adc	r3, r3, #0
   123f4:	ldr	r1, [pc, #340]	; 12550 <main@@Base+0x1e8>
   123f8:	strd	r2, [r1, #24]
   123fc:	ldr	r3, [fp, #-12]
   12400:	cmp	r3, #0
   12404:	beq	124f4 <main@@Base+0x18c>
   12408:	ldr	r3, [pc, #320]	; 12550 <main@@Base+0x1e8>
   1240c:	ldrd	r2, [r3, #32]
   12410:	adds	r2, r2, #1
   12414:	adc	r3, r3, #0
   12418:	ldr	r1, [pc, #304]	; 12550 <main@@Base+0x1e8>
   1241c:	strd	r2, [r1, #32]
   12420:	mov	r0, #2
   12424:	bl	10ed0 <CU_basic_set_mode@plt>
   12428:	ldr	r3, [pc, #288]	; 12550 <main@@Base+0x1e8>
   1242c:	ldrd	r2, [r3, #40]	; 0x28
   12430:	adds	r2, r2, #1
   12434:	adc	r3, r3, #0
   12438:	ldr	r1, [pc, #272]	; 12550 <main@@Base+0x1e8>
   1243c:	strd	r2, [r1, #40]	; 0x28
   12440:	bl	10f48 <CU_basic_run_tests@plt>
   12444:	ldr	r3, [pc, #260]	; 12550 <main@@Base+0x1e8>
   12448:	ldrd	r2, [r3, #48]	; 0x30
   1244c:	adds	r2, r2, #1
   12450:	adc	r3, r3, #0
   12454:	ldr	r1, [pc, #244]	; 12550 <main@@Base+0x1e8>
   12458:	strd	r2, [r1, #48]	; 0x30
   1245c:	mov	r0, #10
   12460:	bl	11050 <putchar@plt>
   12464:	ldr	r3, [pc, #228]	; 12550 <main@@Base+0x1e8>
   12468:	ldrd	r2, [r3, #56]	; 0x38
   1246c:	adds	r2, r2, #1
   12470:	adc	r3, r3, #0
   12474:	ldr	r1, [pc, #212]	; 12550 <main@@Base+0x1e8>
   12478:	strd	r2, [r1, #56]	; 0x38
   1247c:	bl	11098 <CU_get_failure_list@plt>
   12480:	ldr	r3, [pc, #200]	; 12550 <main@@Base+0x1e8>
   12484:	ldrd	r2, [r3, #64]	; 0x40
   12488:	adds	r2, r2, #1
   1248c:	adc	r3, r3, #0
   12490:	ldr	r1, [pc, #184]	; 12550 <main@@Base+0x1e8>
   12494:	strd	r2, [r1, #64]	; 0x40
   12498:	bl	10f54 <CU_basic_show_failures@plt>
   1249c:	ldr	r3, [pc, #172]	; 12550 <main@@Base+0x1e8>
   124a0:	ldrd	r2, [r3, #72]	; 0x48
   124a4:	adds	r2, r2, #1
   124a8:	adc	r3, r3, #0
   124ac:	ldr	r1, [pc, #156]	; 12550 <main@@Base+0x1e8>
   124b0:	strd	r2, [r1, #72]	; 0x48
   124b4:	ldr	r0, [pc, #152]	; 12554 <main@@Base+0x1ec>
   124b8:	bl	10f9c <puts@plt>
   124bc:	ldr	r3, [pc, #140]	; 12550 <main@@Base+0x1e8>
   124c0:	ldrd	r2, [r3, #80]	; 0x50
   124c4:	adds	r2, r2, #1
   124c8:	adc	r3, r3, #0
   124cc:	ldr	r1, [pc, #124]	; 12550 <main@@Base+0x1e8>
   124d0:	strd	r2, [r1, #80]	; 0x50
   124d4:	bl	10f0c <CU_get_number_of_tests_failed@plt>
   124d8:	str	r0, [fp, #-8]
   124dc:	ldr	r3, [pc, #108]	; 12550 <main@@Base+0x1e8>
   124e0:	ldrd	r2, [r3, #88]	; 0x58
   124e4:	adds	r2, r2, #1
   124e8:	adc	r3, r3, #0
   124ec:	ldr	r1, [pc, #92]	; 12550 <main@@Base+0x1e8>
   124f0:	strd	r2, [r1, #88]	; 0x58
   124f4:	bl	10f18 <CU_cleanup_registry@plt>
   124f8:	ldr	r3, [fp, #-8]
   124fc:	cmp	r3, #0
   12500:	beq	1250c <main@@Base+0x1a4>
   12504:	mov	r0, #1
   12508:	b	12528 <main@@Base+0x1c0>
   1250c:	mov	r0, #0
   12510:	ldr	r3, [pc, #56]	; 12550 <main@@Base+0x1e8>
   12514:	ldrd	r2, [r3, #96]	; 0x60
   12518:	adds	r2, r2, #1
   1251c:	adc	r3, r3, #0
   12520:	ldr	r1, [pc, #40]	; 12550 <main@@Base+0x1e8>
   12524:	strd	r2, [r1, #96]	; 0x60
   12528:	ldr	r3, [pc, #32]	; 12550 <main@@Base+0x1e8>
   1252c:	ldrd	r2, [r3, #104]	; 0x68
   12530:	adds	r2, r2, #1
   12534:	adc	r3, r3, #0
   12538:	ldr	r1, [pc, #16]	; 12550 <main@@Base+0x1e8>
   1253c:	strd	r2, [r1, #104]	; 0x68
   12540:	mov	r3, r0
   12544:	mov	r0, r3
   12548:	sub	sp, fp, #4
   1254c:	pop	{fp, pc}
   12550:	andeq	r6, r2, r0, lsl r3
   12554:	andeq	r5, r1, ip, asr #15
   12558:	push	{fp, lr}
   1255c:	add	fp, sp, #4
   12560:	ldr	r0, [pc, #4]	; 1256c <main@@Base+0x204>
   12564:	bl	14c94 <__gcov_sort_n_vals@@Base+0x458>
   12568:	pop	{fp, pc}
   1256c:	andeq	r6, r2, r8, ror #1

00012570 <b64_get_encoded_buffer_size@@Base>:
   12570:	push	{fp}		; (str fp, [sp, #-4]!)
   12574:	add	fp, sp, #0
   12578:	sub	sp, sp, #12
   1257c:	str	r0, [fp, #-8]
   12580:	ldr	r3, [fp, #-8]
   12584:	add	r3, r3, #2
   12588:	ldr	r2, [pc, #52]	; 125c4 <b64_get_encoded_buffer_size@@Base+0x54>
   1258c:	umull	r2, r3, r2, r3
   12590:	lsr	r3, r3, #1
   12594:	lsl	r0, r3, #2
   12598:	ldr	r3, [pc, #40]	; 125c8 <b64_get_encoded_buffer_size@@Base+0x58>
   1259c:	ldrd	r2, [r3]
   125a0:	adds	r2, r2, #1
   125a4:	adc	r3, r3, #0
   125a8:	ldr	r1, [pc, #24]	; 125c8 <b64_get_encoded_buffer_size@@Base+0x58>
   125ac:	strd	r2, [r1]
   125b0:	mov	r3, r0
   125b4:	mov	r0, r3
   125b8:	add	sp, fp, #0
   125bc:	pop	{fp}		; (ldr fp, [sp], #4)
   125c0:	bx	lr
   125c4:	bge	feabd078 <__bss_end__@@Base+0xfea959c0>
   125c8:	andeq	r6, r2, r8, ror #11

000125cc <b64_encode@@Base>:
   125cc:	push	{fp}		; (str fp, [sp, #-4]!)
   125d0:	add	fp, sp, #0
   125d4:	sub	sp, sp, #44	; 0x2c
   125d8:	str	r0, [fp, #-32]	; 0xffffffe0
   125dc:	str	r1, [fp, #-36]	; 0xffffffdc
   125e0:	str	r2, [fp, #-40]	; 0xffffffd8
   125e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   125e8:	str	r3, [fp, #-8]
   125ec:	b	12808 <b64_encode@@Base+0x23c>
   125f0:	ldr	r3, [pc, #580]	; 1283c <b64_encode@@Base+0x270>
   125f4:	ldrd	r2, [r3, #56]	; 0x38
   125f8:	adds	r2, r2, #1
   125fc:	adc	r3, r3, #0
   12600:	ldr	r1, [pc, #564]	; 1283c <b64_encode@@Base+0x270>
   12604:	strd	r2, [r1, #56]	; 0x38
   12608:	ldr	r3, [fp, #-8]
   1260c:	cmp	r3, #3
   12610:	movcc	r3, r3
   12614:	movcs	r3, #3
   12618:	str	r3, [fp, #-20]	; 0xffffffec
   1261c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12620:	ldr	r2, [fp, #-8]
   12624:	sub	r3, r2, r3
   12628:	str	r3, [fp, #-8]
   1262c:	mov	r3, #0
   12630:	str	r3, [fp, #-16]
   12634:	mov	r3, #0
   12638:	str	r3, [fp, #-12]
   1263c:	b	12684 <b64_encode@@Base+0xb8>
   12640:	ldr	r3, [pc, #500]	; 1283c <b64_encode@@Base+0x270>
   12644:	ldrd	r2, [r3]
   12648:	adds	r2, r2, #1
   1264c:	adc	r3, r3, #0
   12650:	ldr	r1, [pc, #484]	; 1283c <b64_encode@@Base+0x270>
   12654:	strd	r2, [r1]
   12658:	ldr	r3, [fp, #-16]
   1265c:	lsl	r2, r3, #8
   12660:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12664:	add	r1, r3, #1
   12668:	str	r1, [fp, #-32]	; 0xffffffe0
   1266c:	ldrb	r3, [r3]
   12670:	orr	r3, r2, r3
   12674:	str	r3, [fp, #-16]
   12678:	ldr	r3, [fp, #-12]
   1267c:	add	r3, r3, #1
   12680:	str	r3, [fp, #-12]
   12684:	ldr	r3, [fp, #-12]
   12688:	cmp	r3, #2
   1268c:	ble	12640 <b64_encode@@Base+0x74>
   12690:	mov	r3, #4
   12694:	str	r3, [fp, #-12]
   12698:	b	127e4 <b64_encode@@Base+0x218>
   1269c:	ldr	r3, [pc, #408]	; 1283c <b64_encode@@Base+0x270>
   126a0:	ldrd	r2, [r3, #48]	; 0x30
   126a4:	adds	r2, r2, #1
   126a8:	adc	r3, r3, #0
   126ac:	ldr	r1, [pc, #392]	; 1283c <b64_encode@@Base+0x270>
   126b0:	strd	r2, [r1, #48]	; 0x30
   126b4:	ldr	r3, [fp, #-16]
   126b8:	and	r3, r3, #63	; 0x3f
   126bc:	str	r3, [fp, #-24]	; 0xffffffe8
   126c0:	ldr	r3, [fp, #-12]
   126c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   126c8:	add	r2, r2, r3
   126cc:	ldr	r1, [fp, #-12]
   126d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   126d4:	cmp	r1, r3
   126d8:	bgt	127b8 <b64_encode@@Base+0x1ec>
   126dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126e0:	cmp	r3, #25
   126e4:	bgt	126fc <b64_encode@@Base+0x130>
   126e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126ec:	uxtb	r3, r3
   126f0:	add	r3, r3, #65	; 0x41
   126f4:	uxtb	r3, r3
   126f8:	b	127d4 <b64_encode@@Base+0x208>
   126fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12700:	cmp	r3, #51	; 0x33
   12704:	bgt	1271c <b64_encode@@Base+0x150>
   12708:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1270c:	uxtb	r3, r3
   12710:	add	r3, r3, #71	; 0x47
   12714:	uxtb	r3, r3
   12718:	b	1279c <b64_encode@@Base+0x1d0>
   1271c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12720:	cmp	r3, #61	; 0x3d
   12724:	bgt	1273c <b64_encode@@Base+0x170>
   12728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1272c:	uxtb	r3, r3
   12730:	sub	r3, r3, #4
   12734:	uxtb	r3, r3
   12738:	b	12784 <b64_encode@@Base+0x1b8>
   1273c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12740:	cmp	r3, #62	; 0x3e
   12744:	bne	12750 <b64_encode@@Base+0x184>
   12748:	mov	r3, #43	; 0x2b
   1274c:	b	1276c <b64_encode@@Base+0x1a0>
   12750:	mov	r3, #47	; 0x2f
   12754:	ldr	r1, [pc, #224]	; 1283c <b64_encode@@Base+0x270>
   12758:	ldrd	r0, [r1, #8]
   1275c:	adds	r0, r0, #1
   12760:	adc	r1, r1, #0
   12764:	ldr	ip, [pc, #208]	; 1283c <b64_encode@@Base+0x270>
   12768:	strd	r0, [ip, #8]
   1276c:	ldr	r1, [pc, #200]	; 1283c <b64_encode@@Base+0x270>
   12770:	ldrd	r0, [r1, #16]
   12774:	adds	r0, r0, #1
   12778:	adc	r1, r1, #0
   1277c:	ldr	ip, [pc, #184]	; 1283c <b64_encode@@Base+0x270>
   12780:	strd	r0, [ip, #16]
   12784:	ldr	r1, [pc, #176]	; 1283c <b64_encode@@Base+0x270>
   12788:	ldrd	r0, [r1, #24]
   1278c:	adds	r0, r0, #1
   12790:	adc	r1, r1, #0
   12794:	ldr	ip, [pc, #160]	; 1283c <b64_encode@@Base+0x270>
   12798:	strd	r0, [ip, #24]
   1279c:	ldr	r1, [pc, #152]	; 1283c <b64_encode@@Base+0x270>
   127a0:	ldrd	r0, [r1, #32]
   127a4:	adds	r0, r0, #1
   127a8:	adc	r1, r1, #0
   127ac:	ldr	ip, [pc, #136]	; 1283c <b64_encode@@Base+0x270>
   127b0:	strd	r0, [ip, #32]
   127b4:	b	127d4 <b64_encode@@Base+0x208>
   127b8:	mov	r3, #61	; 0x3d
   127bc:	ldr	r1, [pc, #120]	; 1283c <b64_encode@@Base+0x270>
   127c0:	ldrd	r0, [r1, #40]	; 0x28
   127c4:	adds	r0, r0, #1
   127c8:	adc	r1, r1, #0
   127cc:	ldr	ip, [pc, #104]	; 1283c <b64_encode@@Base+0x270>
   127d0:	strd	r0, [ip, #40]	; 0x28
   127d4:	strb	r3, [r2]
   127d8:	ldr	r3, [fp, #-16]
   127dc:	lsr	r3, r3, #6
   127e0:	str	r3, [fp, #-16]
   127e4:	ldr	r3, [fp, #-12]
   127e8:	sub	r3, r3, #1
   127ec:	str	r3, [fp, #-12]
   127f0:	ldr	r3, [fp, #-12]
   127f4:	cmp	r3, #0
   127f8:	bge	1269c <b64_encode@@Base+0xd0>
   127fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12800:	add	r3, r3, #4
   12804:	str	r3, [fp, #-40]	; 0xffffffd8
   12808:	ldr	r3, [fp, #-8]
   1280c:	cmp	r3, #0
   12810:	bne	125f0 <b64_encode@@Base+0x24>
   12814:	ldr	r3, [pc, #32]	; 1283c <b64_encode@@Base+0x270>
   12818:	ldrd	r2, [r3, #64]	; 0x40
   1281c:	adds	r2, r2, #1
   12820:	adc	r3, r3, #0
   12824:	ldr	r1, [pc, #16]	; 1283c <b64_encode@@Base+0x270>
   12828:	strd	r2, [r1, #64]	; 0x40
   1282c:	nop			; (mov r0, r0)
   12830:	add	sp, fp, #0
   12834:	pop	{fp}		; (ldr fp, [sp], #4)
   12838:	bx	lr
   1283c:	andeq	r6, r2, r0, lsr #11
   12840:	push	{fp, lr}
   12844:	add	fp, sp, #4
   12848:	ldr	r0, [pc, #4]	; 12854 <b64_encode@@Base+0x288>
   1284c:	bl	14c94 <__gcov_sort_n_vals@@Base+0x458>
   12850:	pop	{fp, pc}
   12854:	andeq	r6, r2, r8, lsl #4
   12858:	push	{fp}		; (str fp, [sp, #-4]!)
   1285c:	add	fp, sp, #0
   12860:	sub	sp, sp, #12
   12864:	str	r0, [fp, #-8]
   12868:	str	r1, [fp, #-12]
   1286c:	ldr	r3, [pc, #228]	; 12958 <b64_encode@@Base+0x38c>
   12870:	ldrd	r2, [r3]
   12874:	adds	r2, r2, #1
   12878:	adc	r3, r3, #0
   1287c:	ldr	r1, [pc, #212]	; 12958 <b64_encode@@Base+0x38c>
   12880:	strd	r2, [r1]
   12884:	ldr	r3, [fp, #-8]
   12888:	ldrb	r3, [r3]
   1288c:	lsl	r3, r3, #2
   12890:	sxtb	r2, r3
   12894:	ldr	r3, [fp, #-8]
   12898:	add	r3, r3, #1
   1289c:	ldrb	r3, [r3]
   128a0:	lsr	r3, r3, #4
   128a4:	uxtb	r3, r3
   128a8:	sxtb	r3, r3
   128ac:	orr	r3, r2, r3
   128b0:	sxtb	r3, r3
   128b4:	uxtb	r2, r3
   128b8:	ldr	r3, [fp, #-12]
   128bc:	strb	r2, [r3]
   128c0:	ldr	r3, [fp, #-12]
   128c4:	add	r3, r3, #1
   128c8:	ldr	r2, [fp, #-8]
   128cc:	add	r2, r2, #1
   128d0:	ldrb	r2, [r2]
   128d4:	lsl	r2, r2, #4
   128d8:	sxtb	r1, r2
   128dc:	ldr	r2, [fp, #-8]
   128e0:	add	r2, r2, #2
   128e4:	ldrb	r2, [r2]
   128e8:	lsr	r2, r2, #2
   128ec:	uxtb	r2, r2
   128f0:	sxtb	r2, r2
   128f4:	orr	r2, r1, r2
   128f8:	sxtb	r2, r2
   128fc:	uxtb	r2, r2
   12900:	strb	r2, [r3]
   12904:	ldr	r3, [fp, #-12]
   12908:	add	r3, r3, #2
   1290c:	ldr	r2, [fp, #-8]
   12910:	add	r2, r2, #2
   12914:	ldrb	r2, [r2]
   12918:	lsl	r2, r2, #6
   1291c:	sxtb	r2, r2
   12920:	bic	r2, r2, #63	; 0x3f
   12924:	sxtb	r1, r2
   12928:	ldr	r2, [fp, #-8]
   1292c:	add	r2, r2, #3
   12930:	ldrb	r2, [r2]
   12934:	sxtb	r2, r2
   12938:	orr	r2, r1, r2
   1293c:	sxtb	r2, r2
   12940:	uxtb	r2, r2
   12944:	strb	r2, [r3]
   12948:	nop			; (mov r0, r0)
   1294c:	add	sp, fp, #0
   12950:	pop	{fp}		; (ldr fp, [sp], #4)
   12954:	bx	lr
   12958:	andeq	r6, r2, r8, ror r6

0001295c <b64_get_decoded_buffer_size@@Base>:
   1295c:	push	{fp}		; (str fp, [sp, #-4]!)
   12960:	add	fp, sp, #0
   12964:	sub	sp, sp, #20
   12968:	str	r0, [fp, #-16]
   1296c:	ldr	r3, [fp, #-16]
   12970:	cmp	r3, #0
   12974:	beq	129a0 <b64_get_decoded_buffer_size@@Base+0x44>
   12978:	ldr	r3, [pc, #136]	; 12a08 <b64_get_decoded_buffer_size@@Base+0xac>
   1297c:	ldrd	r2, [r3]
   12980:	adds	r2, r2, #1
   12984:	adc	r3, r3, #0
   12988:	ldr	r1, [pc, #120]	; 12a08 <b64_get_decoded_buffer_size@@Base+0xac>
   1298c:	strd	r2, [r1]
   12990:	ldr	r3, [fp, #-16]
   12994:	lsr	r3, r3, #2
   12998:	cmp	r3, #0
   1299c:	bne	129c0 <b64_get_decoded_buffer_size@@Base+0x64>
   129a0:	mov	r1, #0
   129a4:	ldr	r3, [pc, #92]	; 12a08 <b64_get_decoded_buffer_size@@Base+0xac>
   129a8:	ldrd	r2, [r3, #8]
   129ac:	adds	r2, r2, #1
   129b0:	adc	r3, r3, #0
   129b4:	ldr	r0, [pc, #76]	; 12a08 <b64_get_decoded_buffer_size@@Base+0xac>
   129b8:	strd	r2, [r0, #8]
   129bc:	b	129f4 <b64_get_decoded_buffer_size@@Base+0x98>
   129c0:	ldr	r3, [fp, #-16]
   129c4:	lsr	r2, r3, #2
   129c8:	mov	r3, r2
   129cc:	lsl	r3, r3, #1
   129d0:	add	r3, r3, r2
   129d4:	str	r3, [fp, #-8]
   129d8:	ldr	r1, [fp, #-8]
   129dc:	ldr	r3, [pc, #36]	; 12a08 <b64_get_decoded_buffer_size@@Base+0xac>
   129e0:	ldrd	r2, [r3, #16]
   129e4:	adds	r2, r2, #1
   129e8:	adc	r3, r3, #0
   129ec:	ldr	r0, [pc, #20]	; 12a08 <b64_get_decoded_buffer_size@@Base+0xac>
   129f0:	strd	r2, [r0, #16]
   129f4:	mov	r3, r1
   129f8:	mov	r0, r3
   129fc:	add	sp, fp, #0
   12a00:	pop	{fp}		; (ldr fp, [sp], #4)
   12a04:	bx	lr
   12a08:	andeq	r6, r2, r0, ror #12

00012a0c <b64_decode@@Base>:
   12a0c:	push	{fp, lr}
   12a10:	add	fp, sp, #4
   12a14:	sub	sp, sp, #48	; 0x30
   12a18:	str	r0, [fp, #-40]	; 0xffffffd8
   12a1c:	str	r1, [fp, #-44]	; 0xffffffd4
   12a20:	str	r2, [fp, #-48]	; 0xffffffd0
   12a24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12a28:	str	r3, [fp, #-12]
   12a2c:	mov	r3, #0
   12a30:	str	r3, [fp, #-24]	; 0xffffffe8
   12a34:	b	12cf8 <b64_decode@@Base+0x2ec>
   12a38:	ldr	r3, [pc, #768]	; 12d40 <b64_decode@@Base+0x334>
   12a3c:	ldrd	r2, [r3, #96]	; 0x60
   12a40:	adds	r2, r2, #1
   12a44:	adc	r3, r3, #0
   12a48:	ldr	r1, [pc, #752]	; 12d40 <b64_decode@@Base+0x334>
   12a4c:	strd	r2, [r1, #96]	; 0x60
   12a50:	mov	r3, #0
   12a54:	str	r3, [fp, #-20]	; 0xffffffec
   12a58:	mov	r3, #0
   12a5c:	str	r3, [fp, #-16]
   12a60:	b	12c64 <b64_decode@@Base+0x258>
   12a64:	ldr	r3, [pc, #724]	; 12d40 <b64_decode@@Base+0x334>
   12a68:	ldrd	r2, [r3, #72]	; 0x48
   12a6c:	adds	r2, r2, #1
   12a70:	adc	r3, r3, #0
   12a74:	ldr	r1, [pc, #708]	; 12d40 <b64_decode@@Base+0x334>
   12a78:	strd	r2, [r1, #72]	; 0x48
   12a7c:	mov	r3, #0
   12a80:	strb	r3, [fp, #-5]
   12a84:	b	12b70 <b64_decode@@Base+0x164>
   12a88:	ldr	r3, [pc, #688]	; 12d40 <b64_decode@@Base+0x334>
   12a8c:	ldrd	r2, [r3, #32]
   12a90:	adds	r2, r2, #1
   12a94:	adc	r3, r3, #0
   12a98:	ldr	r1, [pc, #672]	; 12d40 <b64_decode@@Base+0x334>
   12a9c:	strd	r2, [r1, #32]
   12aa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12aa4:	add	r2, r3, #1
   12aa8:	str	r2, [fp, #-24]	; 0xffffffe8
   12aac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12ab0:	add	r3, r2, r3
   12ab4:	ldrb	r3, [r3]
   12ab8:	strb	r3, [fp, #-5]
   12abc:	ldrb	r3, [fp, #-5]
   12ac0:	sub	r3, r3, #43	; 0x2b
   12ac4:	str	r3, [fp, #-28]	; 0xffffffe4
   12ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12acc:	cmp	r3, #79	; 0x4f
   12ad0:	bhi	12ae8 <b64_decode@@Base+0xdc>
   12ad4:	ldr	r2, [pc, #616]	; 12d44 <b64_decode@@Base+0x338>
   12ad8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12adc:	add	r3, r2, r3
   12ae0:	ldrb	r1, [r3]
   12ae4:	b	12b04 <b64_decode@@Base+0xf8>
   12ae8:	mov	r1, #0
   12aec:	ldr	r3, [pc, #588]	; 12d40 <b64_decode@@Base+0x334>
   12af0:	ldrd	r2, [r3]
   12af4:	adds	r2, r2, #1
   12af8:	adc	r3, r3, #0
   12afc:	ldr	r0, [pc, #572]	; 12d40 <b64_decode@@Base+0x334>
   12b00:	strd	r2, [r0]
   12b04:	mov	r3, r1
   12b08:	strb	r3, [fp, #-5]
   12b0c:	ldrb	r3, [fp, #-5]
   12b10:	cmp	r3, #0
   12b14:	beq	12b70 <b64_decode@@Base+0x164>
   12b18:	ldrb	r3, [fp, #-5]
   12b1c:	cmp	r3, #36	; 0x24
   12b20:	beq	12b34 <b64_decode@@Base+0x128>
   12b24:	ldrb	r3, [fp, #-5]
   12b28:	sub	r3, r3, #61	; 0x3d
   12b2c:	uxtb	r1, r3
   12b30:	b	12b50 <b64_decode@@Base+0x144>
   12b34:	mov	r1, #0
   12b38:	ldr	r3, [pc, #512]	; 12d40 <b64_decode@@Base+0x334>
   12b3c:	ldrd	r2, [r3, #8]
   12b40:	adds	r2, r2, #1
   12b44:	adc	r3, r3, #0
   12b48:	ldr	r0, [pc, #496]	; 12d40 <b64_decode@@Base+0x334>
   12b4c:	strd	r2, [r0, #8]
   12b50:	mov	r3, r1
   12b54:	strb	r3, [fp, #-5]
   12b58:	ldr	r3, [pc, #480]	; 12d40 <b64_decode@@Base+0x334>
   12b5c:	ldrd	r2, [r3, #16]
   12b60:	adds	r2, r2, #1
   12b64:	adc	r3, r3, #0
   12b68:	ldr	r1, [pc, #464]	; 12d40 <b64_decode@@Base+0x334>
   12b6c:	strd	r2, [r1, #16]
   12b70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12b74:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12b78:	cmp	r2, r3
   12b7c:	bcs	12ba4 <b64_decode@@Base+0x198>
   12b80:	ldr	r3, [pc, #440]	; 12d40 <b64_decode@@Base+0x334>
   12b84:	ldrd	r2, [r3, #24]
   12b88:	adds	r2, r2, #1
   12b8c:	adc	r3, r3, #0
   12b90:	ldr	r1, [pc, #424]	; 12d40 <b64_decode@@Base+0x334>
   12b94:	strd	r2, [r1, #24]
   12b98:	ldrb	r3, [fp, #-5]
   12b9c:	cmp	r3, #0
   12ba0:	beq	12a88 <b64_decode@@Base+0x7c>
   12ba4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ba8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12bac:	cmp	r2, r3
   12bb0:	bcc	12bd8 <b64_decode@@Base+0x1cc>
   12bb4:	ldr	r3, [pc, #388]	; 12d40 <b64_decode@@Base+0x334>
   12bb8:	ldrd	r2, [r3, #40]	; 0x28
   12bbc:	adds	r2, r2, #1
   12bc0:	adc	r3, r3, #0
   12bc4:	ldr	r1, [pc, #372]	; 12d40 <b64_decode@@Base+0x334>
   12bc8:	strd	r2, [r1, #40]	; 0x28
   12bcc:	ldrb	r3, [fp, #-5]
   12bd0:	cmp	r3, #0
   12bd4:	beq	12c2c <b64_decode@@Base+0x220>
   12bd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bdc:	add	r3, r3, #1
   12be0:	str	r3, [fp, #-20]	; 0xffffffec
   12be4:	ldrb	r3, [fp, #-5]
   12be8:	cmp	r3, #0
   12bec:	beq	12c58 <b64_decode@@Base+0x24c>
   12bf0:	ldrb	r3, [fp, #-5]
   12bf4:	sub	r3, r3, #1
   12bf8:	uxtb	r1, r3
   12bfc:	sub	r2, fp, #32
   12c00:	ldr	r3, [fp, #-16]
   12c04:	add	r3, r2, r3
   12c08:	mov	r2, r1
   12c0c:	strb	r2, [r3]
   12c10:	ldr	r3, [pc, #296]	; 12d40 <b64_decode@@Base+0x334>
   12c14:	ldrd	r2, [r3, #48]	; 0x30
   12c18:	adds	r2, r2, #1
   12c1c:	adc	r3, r3, #0
   12c20:	ldr	r1, [pc, #280]	; 12d40 <b64_decode@@Base+0x334>
   12c24:	strd	r2, [r1, #48]	; 0x30
   12c28:	b	12c58 <b64_decode@@Base+0x24c>
   12c2c:	sub	r2, fp, #32
   12c30:	ldr	r3, [fp, #-16]
   12c34:	add	r3, r2, r3
   12c38:	mov	r2, #0
   12c3c:	strb	r2, [r3]
   12c40:	ldr	r3, [pc, #248]	; 12d40 <b64_decode@@Base+0x334>
   12c44:	ldrd	r2, [r3, #56]	; 0x38
   12c48:	adds	r2, r2, #1
   12c4c:	adc	r3, r3, #0
   12c50:	ldr	r1, [pc, #232]	; 12d40 <b64_decode@@Base+0x334>
   12c54:	strd	r2, [r1, #56]	; 0x38
   12c58:	ldr	r3, [fp, #-16]
   12c5c:	add	r3, r3, #1
   12c60:	str	r3, [fp, #-16]
   12c64:	ldr	r3, [fp, #-16]
   12c68:	cmp	r3, #3
   12c6c:	bgt	12c98 <b64_decode@@Base+0x28c>
   12c70:	ldr	r3, [pc, #200]	; 12d40 <b64_decode@@Base+0x334>
   12c74:	ldrd	r2, [r3, #64]	; 0x40
   12c78:	adds	r2, r2, #1
   12c7c:	adc	r3, r3, #0
   12c80:	ldr	r1, [pc, #184]	; 12d40 <b64_decode@@Base+0x334>
   12c84:	strd	r2, [r1, #64]	; 0x40
   12c88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12c8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12c90:	cmp	r2, r3
   12c94:	bcc	12a64 <b64_decode@@Base+0x58>
   12c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c9c:	cmp	r3, #0
   12ca0:	beq	12cf8 <b64_decode@@Base+0x2ec>
   12ca4:	ldr	r3, [pc, #148]	; 12d40 <b64_decode@@Base+0x334>
   12ca8:	ldrd	r2, [r3, #80]	; 0x50
   12cac:	adds	r2, r2, #1
   12cb0:	adc	r3, r3, #0
   12cb4:	ldr	r1, [pc, #132]	; 12d40 <b64_decode@@Base+0x334>
   12cb8:	strd	r2, [r1, #80]	; 0x50
   12cbc:	sub	r3, fp, #32
   12cc0:	ldr	r1, [fp, #-12]
   12cc4:	mov	r0, r3
   12cc8:	bl	12858 <b64_encode@@Base+0x28c>
   12ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cd0:	sub	r3, r3, #1
   12cd4:	ldr	r2, [fp, #-12]
   12cd8:	add	r3, r2, r3
   12cdc:	str	r3, [fp, #-12]
   12ce0:	ldr	r3, [pc, #88]	; 12d40 <b64_decode@@Base+0x334>
   12ce4:	ldrd	r2, [r3, #88]	; 0x58
   12ce8:	adds	r2, r2, #1
   12cec:	adc	r3, r3, #0
   12cf0:	ldr	r1, [pc, #72]	; 12d40 <b64_decode@@Base+0x334>
   12cf4:	strd	r2, [r1, #88]	; 0x58
   12cf8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12cfc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12d00:	cmp	r2, r3
   12d04:	bcc	12a38 <b64_decode@@Base+0x2c>
   12d08:	ldr	r2, [fp, #-12]
   12d0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d10:	sub	r3, r2, r3
   12d14:	mov	r0, r3
   12d18:	ldr	r3, [pc, #32]	; 12d40 <b64_decode@@Base+0x334>
   12d1c:	ldrd	r2, [r3, #104]	; 0x68
   12d20:	adds	r2, r2, #1
   12d24:	adc	r3, r3, #0
   12d28:	ldr	r1, [pc, #16]	; 12d40 <b64_decode@@Base+0x334>
   12d2c:	strd	r2, [r1, #104]	; 0x68
   12d30:	mov	r3, r0
   12d34:	mov	r0, r3
   12d38:	sub	sp, fp, #4
   12d3c:	pop	{fp, pc}
   12d40:	strdeq	r6, [r2], -r0
   12d44:	muleq	r1, ip, r8
   12d48:	push	{fp, lr}
   12d4c:	add	fp, sp, #4
   12d50:	ldr	r0, [pc, #4]	; 12d5c <b64_decode@@Base+0x350>
   12d54:	bl	14c94 <__gcov_sort_n_vals@@Base+0x458>
   12d58:	pop	{fp, pc}
   12d5c:	andeq	r6, r2, r0, lsl #5
   12d60:	b	13f8c <b64_decode@@Base+0x1580>
   12d64:	push	{r4, r5, r6, lr}
   12d68:	subs	r5, r1, #0
   12d6c:	popeq	{r4, r5, r6, pc}
   12d70:	mov	r4, r0
   12d74:	bl	12d60 <b64_decode@@Base+0x354>
   12d78:	ldrd	r2, [r4]
   12d7c:	adds	r0, r0, r2
   12d80:	adc	r1, r1, r3
   12d84:	subs	r5, r5, #1
   12d88:	strd	r0, [r4], #8
   12d8c:	bne	12d74 <b64_decode@@Base+0x368>
   12d90:	pop	{r4, r5, r6, pc}
   12d94:	ldr	r3, [pc, #20]	; 12db0 <b64_decode@@Base+0x3a4>
   12d98:	ldr	r2, [pc, #20]	; 12db4 <b64_decode@@Base+0x3a8>
   12d9c:	add	r3, pc, r3
   12da0:	ldr	r3, [r3, r2]
   12da4:	ldmib	r3, {r0, r3}
   12da8:	add	r0, r0, r3
   12dac:	bx	lr
   12db0:	andeq	r3, r1, ip, asr r2
   12db4:	andeq	r0, r0, r4, asr #1
   12db8:	ldr	r3, [pc, #28]	; 12ddc <b64_decode@@Base+0x3d0>
   12dbc:	ldr	r2, [pc, #28]	; 12de0 <b64_decode@@Base+0x3d4>
   12dc0:	add	r3, pc, r3
   12dc4:	ldr	r3, [r3, r2]
   12dc8:	ldr	r2, [r3]
   12dcc:	cmp	r2, #0
   12dd0:	ldrne	r0, [r3, #20]
   12dd4:	moveq	r0, #1
   12dd8:	bx	lr
   12ddc:	andeq	r3, r1, r8, lsr r2
   12de0:	andeq	r0, r0, r4, asr #1
   12de4:	bx	lr
   12de8:	ldr	ip, [pc, #32]	; 12e10 <b64_decode@@Base+0x404>
   12dec:	mov	r3, #32
   12df0:	teq	r0, r1
   12df4:	movmi	r2, ip
   12df8:	movpl	r2, #0
   12dfc:	subs	r3, r3, #1
   12e00:	lsl	r1, r1, #1
   12e04:	eor	r0, r2, r0, lsl #1
   12e08:	bne	12df0 <b64_decode@@Base+0x3e4>
   12e0c:	bx	lr
   12e10:	strbeq	r1, [r1], #3511	; 0xdb7
   12e14:	ldr	r3, [pc, #76]	; 12e68 <b64_decode@@Base+0x45c>
   12e18:	ldr	r1, [pc, #76]	; 12e6c <b64_decode@@Base+0x460>
   12e1c:	add	r3, pc, r3
   12e20:	push	{r4, r5, r6, lr}
   12e24:	mov	r5, r0
   12e28:	ldr	r4, [r3, r1]
   12e2c:	lsl	r1, r0, #2
   12e30:	mov	r0, r4
   12e34:	mov	r2, #1
   12e38:	ldr	r3, [r0], #28
   12e3c:	bl	10f6c <fwrite@plt>
   12e40:	cmp	r0, #1
   12e44:	movne	r3, #1
   12e48:	ldr	r0, [r4, #8]
   12e4c:	strne	r3, [r4, #20]
   12e50:	ldr	r3, [r4, #4]
   12e54:	sub	r0, r0, r5
   12e58:	add	r3, r3, r5
   12e5c:	str	r3, [r4, #4]
   12e60:	str	r0, [r4, #8]
   12e64:	pop	{r4, r5, r6, pc}
   12e68:	ldrdeq	r3, [r1], -ip
   12e6c:	andeq	r0, r0, r4, asr #1
   12e70:	ldr	r3, [pc, #76]	; 12ec4 <b64_decode@@Base+0x4b8>
   12e74:	ldr	r2, [pc, #76]	; 12ec8 <b64_decode@@Base+0x4bc>
   12e78:	add	r3, pc, r3
   12e7c:	push	{r4, r5, r6, lr}
   12e80:	mov	r5, r0
   12e84:	ldr	r4, [r3, r2]
   12e88:	ldr	r3, [r4, #8]
   12e8c:	cmp	r3, #1024	; 0x400
   12e90:	bcc	12eb0 <b64_decode@@Base+0x4a4>
   12e94:	mov	r0, #1024	; 0x400
   12e98:	bl	12e14 <b64_decode@@Base+0x408>
   12e9c:	ldr	r3, [r4, #8]
   12ea0:	cmp	r3, #0
   12ea4:	addne	r2, r4, #4096	; 0x1000
   12ea8:	ldrne	r2, [r2, #28]
   12eac:	strne	r2, [r4, #28]
   12eb0:	add	r0, r3, #7
   12eb4:	add	r3, r5, r3
   12eb8:	str	r3, [r4, #8]
   12ebc:	add	r0, r4, r0, lsl #2
   12ec0:	pop	{r4, r5, r6, pc}
   12ec4:	andeq	r3, r1, r0, lsl #3
   12ec8:	andeq	r0, r0, r4, asr #1
   12ecc:	ldr	r3, [pc, #172]	; 12f80 <b64_decode@@Base+0x574>
   12ed0:	ldr	r2, [pc, #172]	; 12f84 <b64_decode@@Base+0x578>
   12ed4:	add	r3, pc, r3
   12ed8:	push	{r4, r5, r6, lr}
   12edc:	mov	r5, r0
   12ee0:	ldr	r4, [r3, r2]
   12ee4:	ldr	r3, [r4, #8]
   12ee8:	ldr	ip, [r4, #12]
   12eec:	sub	ip, ip, r3
   12ef0:	cmp	ip, r0
   12ef4:	bcs	12f50 <b64_decode@@Base+0x544>
   12ef8:	ldr	r2, [r4, #4]
   12efc:	cmp	ip, #0
   12f00:	add	r2, r2, r3
   12f04:	str	r2, [r4, #4]
   12f08:	addne	r2, r4, #28
   12f0c:	mov	r0, r4
   12f10:	ldrne	r3, [r2, r3, lsl #2]
   12f14:	mov	r6, #0
   12f18:	strne	r3, [r4, #28]
   12f1c:	ldr	r3, [r0], #28
   12f20:	mov	r2, #4096	; 0x1000
   12f24:	add	r0, r0, ip, lsl #2
   12f28:	mov	r1, #1
   12f2c:	str	ip, [r4, #12]
   12f30:	str	r6, [r4, #8]
   12f34:	bl	10f84 <fread@plt>
   12f38:	ldr	r3, [r4, #12]
   12f3c:	add	r0, r3, r0, lsr #2
   12f40:	cmp	r5, r0
   12f44:	str	r0, [r4, #12]
   12f48:	bhi	12f64 <b64_decode@@Base+0x558>
   12f4c:	ldr	r3, [r4, #8]
   12f50:	add	r0, r3, #7
   12f54:	add	r5, r5, r3
   12f58:	add	r0, r4, r0, lsl #2
   12f5c:	str	r5, [r4, #8]
   12f60:	pop	{r4, r5, r6, pc}
   12f64:	ldr	r3, [r4, #16]
   12f68:	str	r6, [r4, #12]
   12f6c:	add	r5, r5, r3
   12f70:	sub	r5, r5, r0
   12f74:	str	r5, [r4, #16]
   12f78:	mov	r0, r6
   12f7c:	pop	{r4, r5, r6, pc}
   12f80:	andeq	r3, r1, r4, lsr #2
   12f84:	andeq	r0, r0, r4, asr #1
   12f88:	push	{r0, r1, r2, r3}
   12f8c:	ldr	r3, [pc, #52]	; 12fc8 <b64_decode@@Base+0x5bc>
   12f90:	ldr	r1, [pc, #52]	; 12fcc <b64_decode@@Base+0x5c0>
   12f94:	push	{lr}		; (str lr, [sp, #-4]!)
   12f98:	add	r3, pc, r3
   12f9c:	sub	sp, sp, #12
   12fa0:	add	r2, sp, #20
   12fa4:	str	r2, [sp, #4]
   12fa8:	ldr	r0, [r3, r1]
   12fac:	ldr	r1, [sp, #16]
   12fb0:	ldr	r0, [r0]
   12fb4:	bl	11080 <vfprintf@plt>
   12fb8:	add	sp, sp, #12
   12fbc:	pop	{lr}		; (ldr lr, [sp], #4)
   12fc0:	add	sp, sp, #16
   12fc4:	bx	lr
   12fc8:	andeq	r3, r1, r0, rrx
   12fcc:	strheq	r0, [r0], -r8
   12fd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fd4:	subs	r6, r1, #0
   12fd8:	beq	13034 <b64_decode@@Base+0x628>
   12fdc:	cmp	r2, #0
   12fe0:	movne	r3, #0
   12fe4:	mov	r7, r2
   12fe8:	ldr	r8, [r6]
   12fec:	addne	r5, r0, #12
   12ff0:	movne	r4, r3
   12ff4:	beq	13024 <b64_decode@@Base+0x618>
   12ff8:	ldr	r0, [r5, #4]!
   12ffc:	add	r2, r6, r3, lsl #3
   13000:	cmp	r0, #0
   13004:	add	r9, r3, #1
   13008:	add	r4, r4, #1
   1300c:	beq	1301c <b64_decode@@Base+0x610>
   13010:	ldr	r0, [r2, #28]
   13014:	bl	10f24 <free@plt>
   13018:	mov	r3, r9
   1301c:	cmp	r7, r4
   13020:	bne	12ff8 <b64_decode@@Base+0x5ec>
   13024:	mov	r0, r6
   13028:	bl	10f24 <free@plt>
   1302c:	mov	r0, r8
   13030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13034:	mov	r8, r6
   13038:	b	1302c <b64_decode@@Base+0x620>
   1303c:	push	{r4, r5}
   13040:	mov	r4, r0
   13044:	mov	r5, r1
   13048:	orrs	r3, r4, r5
   1304c:	beq	13090 <b64_decode@@Base+0x684>
   13050:	cmp	r1, #0
   13054:	clzeq	r1, r0
   13058:	addeq	r1, r1, #32
   1305c:	clzne	r1, r1
   13060:	rsb	r3, r1, #63	; 0x3f
   13064:	cmp	r3, #1
   13068:	bls	13090 <b64_decode@@Base+0x684>
   1306c:	rsb	r2, r1, #61	; 0x3d
   13070:	rsb	r0, r2, #32
   13074:	lsr	r3, r4, r2
   13078:	sub	r2, r2, #32
   1307c:	orr	r3, r3, r5, lsl r0
   13080:	orr	r3, r3, r5, lsr r2
   13084:	rsb	r1, r1, #1073741886	; 0x4000003e
   13088:	and	r0, r3, #3
   1308c:	add	r0, r0, r1, lsl #2
   13090:	pop	{r4, r5}
   13094:	bx	lr
   13098:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1309c:	mov	r1, r3
   130a0:	mov	sl, r0
   130a4:	mov	r0, r2
   130a8:	mov	r8, r2
   130ac:	mov	r9, r3
   130b0:	bl	1303c <b64_decode@@Base+0x630>
   130b4:	add	r0, r0, r0, lsl #1
   130b8:	lsl	r0, r0, #3
   130bc:	add	r3, sl, r0
   130c0:	ldr	r2, [sl, r0]
   130c4:	ldrd	r4, [r3, #16]
   130c8:	ldrd	r6, [r3, #8]
   130cc:	add	r2, r2, #1
   130d0:	adds	r4, r4, r8
   130d4:	adc	r5, r5, r9
   130d8:	cmp	r8, r6
   130dc:	sbcs	r1, r9, r7
   130e0:	str	r2, [sl, r0]
   130e4:	strd	r4, [r3, #16]
   130e8:	strdlt	r8, [r3, #8]
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130f0:	ldr	r3, [r1, #8]
   130f4:	cmp	r3, #0
   130f8:	bxeq	lr
   130fc:	push	{r4, r5, r6, r7, r8, lr}
   13100:	add	r2, r1, #6016	; 0x1780
   13104:	mov	r8, r1
   13108:	mov	r7, r0
   1310c:	ldrd	r0, [r1, #24]
   13110:	add	r2, r2, #32
   13114:	mov	r3, r8
   13118:	mov	ip, #0
   1311c:	mov	r4, #0
   13120:	mov	r5, #0
   13124:	str	ip, [r3, #40]	; 0x28
   13128:	strd	r0, [r3, #48]	; 0x30
   1312c:	strd	r4, [r3, #56]	; 0x38
   13130:	add	r3, r3, #24
   13134:	cmp	r2, r3
   13138:	bne	13124 <b64_decode@@Base+0x718>
   1313c:	cmp	r7, #0
   13140:	popeq	{r4, r5, r6, r7, r8, pc}
   13144:	add	r8, r8, #40	; 0x28
   13148:	ldr	r3, [r7, #16]
   1314c:	cmp	r3, #0
   13150:	beq	131d8 <b64_decode@@Base+0x7cc>
   13154:	ldr	r2, [r7, #56]	; 0x38
   13158:	cmp	r2, #0
   1315c:	beq	131d8 <b64_decode@@Base+0x7cc>
   13160:	mov	r6, #0
   13164:	b	13174 <b64_decode@@Base+0x768>
   13168:	add	r6, r6, #1
   1316c:	cmp	r2, r6
   13170:	beq	131d8 <b64_decode@@Base+0x7cc>
   13174:	ldr	r3, [r7, #60]	; 0x3c
   13178:	ldr	r4, [r3, r6, lsl #2]
   1317c:	cmp	r4, #0
   13180:	beq	13168 <b64_decode@@Base+0x75c>
   13184:	ldr	r3, [r4]
   13188:	cmp	r3, r7
   1318c:	bne	13168 <b64_decode@@Base+0x75c>
   13190:	ldr	r3, [r4, #16]
   13194:	cmp	r3, #0
   13198:	beq	13168 <b64_decode@@Base+0x75c>
   1319c:	mov	r5, #0
   131a0:	ldr	r2, [r4, #20]
   131a4:	lsl	r3, r5, #3
   131a8:	add	r2, r2, r3
   131ac:	mov	r0, r8
   131b0:	ldrd	r2, [r2]
   131b4:	bl	13098 <b64_decode@@Base+0x68c>
   131b8:	ldr	r3, [r4, #16]
   131bc:	add	r5, r5, #1
   131c0:	cmp	r3, r5
   131c4:	bhi	131a0 <b64_decode@@Base+0x794>
   131c8:	ldr	r2, [r7, #56]	; 0x38
   131cc:	add	r6, r6, #1
   131d0:	cmp	r2, r6
   131d4:	bne	13174 <b64_decode@@Base+0x768>
   131d8:	ldr	r7, [r7, #4]
   131dc:	cmp	r7, #0
   131e0:	bne	13148 <b64_decode@@Base+0x73c>
   131e4:	pop	{r4, r5, r6, r7, r8, pc}
   131e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	sub	sp, sp, #12
   131f0:	mov	r5, r0
   131f4:	str	r0, [sp, #4]
   131f8:	mov	r6, r2
   131fc:	str	r2, [sp]
   13200:	mov	r0, r1
   13204:	mov	r4, r1
   13208:	ldr	r2, [pc, #344]	; 13368 <b64_decode@@Base+0x95c>
   1320c:	mov	r1, #0
   13210:	bl	11044 <memset@plt>
   13214:	subs	r3, r5, #0
   13218:	mov	r5, #0
   1321c:	str	r5, [r6]
   13220:	beq	1334c <b64_decode@@Base+0x940>
   13224:	mov	r7, r5
   13228:	mov	r9, r5
   1322c:	mov	r8, r3
   13230:	ldr	r0, [r8, #12]
   13234:	bl	10ffc <strlen@plt>
   13238:	cmp	r5, r0
   1323c:	ldrcc	r3, [sp]
   13240:	strcc	r0, [r3]
   13244:	mov	r0, r7
   13248:	ldr	r1, [r8, #8]
   1324c:	bl	12de8 <b64_decode@@Base+0x3dc>
   13250:	ldr	r6, [r8, #56]	; 0x38
   13254:	mov	r1, r6
   13258:	bl	12de8 <b64_decode@@Base+0x3dc>
   1325c:	cmp	r6, #0
   13260:	mov	r7, r0
   13264:	beq	13334 <b64_decode@@Base+0x928>
   13268:	ldr	r5, [r8, #60]	; 0x3c
   1326c:	add	r6, r5, r6, lsl #2
   13270:	b	13294 <b64_decode@@Base+0x888>
   13274:	mov	r0, r7
   13278:	mov	r1, r9
   1327c:	bl	12de8 <b64_decode@@Base+0x3dc>
   13280:	mov	r1, r9
   13284:	bl	12de8 <b64_decode@@Base+0x3dc>
   13288:	mov	r7, r0
   1328c:	cmp	r6, r5
   13290:	beq	13334 <b64_decode@@Base+0x928>
   13294:	ldr	fp, [r5], #4
   13298:	cmp	fp, #0
   1329c:	beq	13274 <b64_decode@@Base+0x868>
   132a0:	ldr	r3, [fp]
   132a4:	cmp	r3, r8
   132a8:	bne	13274 <b64_decode@@Base+0x868>
   132ac:	mov	r0, r7
   132b0:	ldr	r1, [fp, #12]
   132b4:	bl	12de8 <b64_decode@@Base+0x3dc>
   132b8:	ldr	r1, [fp, #8]
   132bc:	bl	12de8 <b64_decode@@Base+0x3dc>
   132c0:	ldr	r3, [r8, #16]
   132c4:	cmp	r3, #0
   132c8:	mov	r7, r0
   132cc:	beq	1328c <b64_decode@@Base+0x880>
   132d0:	ldr	sl, [fp, #16]
   132d4:	ldr	r3, [r4, #8]
   132d8:	mov	r1, sl
   132dc:	add	r3, r3, sl
   132e0:	str	r3, [r4, #8]
   132e4:	bl	12de8 <b64_decode@@Base+0x3dc>
   132e8:	cmp	sl, #0
   132ec:	mov	r7, r0
   132f0:	beq	1328c <b64_decode@@Base+0x880>
   132f4:	ldr	ip, [fp, #20]
   132f8:	ldrd	r2, [r4, #16]
   132fc:	add	lr, ip, sl, lsl #3
   13300:	ldrd	r0, [ip]
   13304:	ldrd	sl, [r4, #24]
   13308:	adds	r2, r2, r0
   1330c:	adc	r3, r3, r1
   13310:	strd	r2, [r4, #16]
   13314:	ldrd	r0, [ip], #8
   13318:	cmp	sl, r0
   1331c:	sbcs	sl, fp, r1
   13320:	strdlt	r0, [r4, #24]
   13324:	cmp	lr, ip
   13328:	bne	13300 <b64_decode@@Base+0x8f4>
   1332c:	cmp	r6, r5
   13330:	bne	13294 <b64_decode@@Base+0x888>
   13334:	ldr	r8, [r8, #4]
   13338:	cmp	r8, #0
   1333c:	beq	13350 <b64_decode@@Base+0x944>
   13340:	ldr	r3, [sp]
   13344:	ldr	r5, [r3]
   13348:	b	13230 <b64_decode@@Base+0x824>
   1334c:	ldr	r7, [sp, #4]
   13350:	ldr	r0, [sp, #4]
   13354:	mov	r1, r4
   13358:	bl	130f0 <b64_decode@@Base+0x6e4>
   1335c:	mov	r0, r7
   13360:	add	sp, sp, #12
   13364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13368:	andeq	r1, r0, r8, asr #15
   1336c:	push	{r4, r5, r6, lr}
   13370:	mov	r4, r0
   13374:	ldr	r0, [pc, #172]	; 13428 <b64_decode@@Base+0xa1c>
   13378:	add	r0, pc, r0
   1337c:	bl	10f90 <getenv@plt>
   13380:	subs	r3, r0, #0
   13384:	beq	13390 <b64_decode@@Base+0x984>
   13388:	bl	1108c <atoi@plt>
   1338c:	bic	r3, r0, r0, asr #31
   13390:	ldr	r0, [pc, #148]	; 1342c <b64_decode@@Base+0xa20>
   13394:	str	r3, [r4, #8]
   13398:	add	r0, pc, r0
   1339c:	bl	10f90 <getenv@plt>
   133a0:	subs	r6, r0, #0
   133a4:	beq	133f8 <b64_decode@@Base+0x9ec>
   133a8:	bl	10ffc <strlen@plt>
   133ac:	subs	r5, r0, #0
   133b0:	beq	133f8 <b64_decode@@Base+0x9ec>
   133b4:	sub	r3, r5, #1
   133b8:	ldrb	r2, [r6, r3]
   133bc:	cmp	r2, #47	; 0x2f
   133c0:	beq	133ec <b64_decode@@Base+0x9e0>
   133c4:	ldr	r0, [r4, #4]
   133c8:	str	r5, [r4, #12]
   133cc:	add	r0, r0, #2
   133d0:	add	r0, r0, r5
   133d4:	bl	10fa8 <malloc@plt>
   133d8:	mov	r2, r5
   133dc:	mov	r1, r6
   133e0:	str	r0, [r4]
   133e4:	pop	{r4, r5, r6, lr}
   133e8:	b	10f3c <memcpy@plt>
   133ec:	cmp	r3, #0
   133f0:	movne	r5, r3
   133f4:	bne	133c4 <b64_decode@@Base+0x9b8>
   133f8:	ldr	r3, [r4, #8]
   133fc:	cmp	r3, #0
   13400:	ldrne	r6, [pc, #40]	; 13430 <b64_decode@@Base+0xa24>
   13404:	movne	r5, #1
   13408:	addne	r6, pc, r6
   1340c:	bne	133c4 <b64_decode@@Base+0x9b8>
   13410:	ldr	r0, [r4, #4]
   13414:	str	r3, [r4, #12]
   13418:	add	r0, r0, #2
   1341c:	bl	10fa8 <malloc@plt>
   13420:	str	r0, [r4]
   13424:	pop	{r4, r5, r6, pc}
   13428:	andeq	r2, r0, r0, ror #11
   1342c:	ldrdeq	r2, [r0], -r4
   13430:	andeq	r2, r0, ip, asr #10
   13434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13438:	sub	sp, sp, #6080	; 0x17c0
   1343c:	sub	sp, sp, #44	; 0x2c
   13440:	add	r3, sp, #72	; 0x48
   13444:	mov	r4, r0
   13448:	str	r0, [sp, #64]	; 0x40
   1344c:	str	r1, [sp, #60]	; 0x3c
   13450:	mov	r0, r3
   13454:	ldr	r2, [pc, #1068]	; 13888 <b64_decode@@Base+0xe7c>
   13458:	mov	r1, #0
   1345c:	str	r3, [sp, #68]	; 0x44
   13460:	bl	11044 <memset@plt>
   13464:	add	r3, r4, #6016	; 0x1780
   13468:	add	r3, r3, #8
   1346c:	add	r2, sp, #2016	; 0x7e0
   13470:	mov	sl, #251	; 0xfb
   13474:	add	r2, r2, #8
   13478:	mov	fp, #0
   1347c:	str	r3, [sp, #56]	; 0x38
   13480:	add	r3, sp, #72	; 0x48
   13484:	str	r2, [sp, #44]	; 0x2c
   13488:	str	r3, [sp, #48]	; 0x30
   1348c:	mov	r2, #0
   13490:	mov	r3, #0
   13494:	mov	r5, sl
   13498:	mov	r0, fp
   1349c:	strd	r2, [sp, #24]
   134a0:	str	sl, [sp, #52]	; 0x34
   134a4:	ldr	r9, [sp, #56]	; 0x38
   134a8:	str	r5, [sp, #40]	; 0x28
   134ac:	ldr	sl, [sp, #60]	; 0x3c
   134b0:	ldrd	r2, [r9, #16]
   134b4:	ldr	r4, [r9]
   134b8:	str	r4, [sp, #4]
   134bc:	strd	r2, [sp, #8]
   134c0:	ldr	r3, [sp, #4]
   134c4:	cmp	r3, #0
   134c8:	beq	13774 <b64_decode@@Base+0xd68>
   134cc:	cmp	fp, #0
   134d0:	bne	13658 <b64_decode@@Base+0xc4c>
   134d4:	ldr	r5, [sp, #40]	; 0x28
   134d8:	cmp	r5, #0
   134dc:	blt	13864 <b64_decode@@Base+0xe58>
   134e0:	add	ip, r5, r5, lsl #1
   134e4:	ldr	fp, [sl, ip, lsl #3]
   134e8:	add	ip, sl, ip, lsl #3
   134ec:	cmp	fp, #0
   134f0:	bne	13858 <b64_decode@@Base+0xe4c>
   134f4:	mov	r3, ip
   134f8:	ldr	r4, [sp, #4]
   134fc:	b	13510 <b64_decode@@Base+0xb04>
   13500:	ldr	fp, [r3]
   13504:	mov	ip, r3
   13508:	cmp	fp, #0
   1350c:	bne	13850 <b64_decode@@Base+0xe44>
   13510:	subs	r5, r5, #1
   13514:	sub	r3, r3, #24
   13518:	bcs	13500 <b64_decode@@Base+0xaf4>
   1351c:	ldr	sl, [sp, #52]	; 0x34
   13520:	mov	r8, r0
   13524:	mov	r5, r4
   13528:	lsl	r4, sl, #1
   1352c:	ldr	r3, [sp, #44]	; 0x2c
   13530:	add	lr, r4, sl
   13534:	sub	ip, r3, #1952	; 0x7a0
   13538:	lsl	lr, lr, #3
   1353c:	add	ip, ip, lr
   13540:	ldrd	r0, [sp, #8]
   13544:	add	lr, r3, lr
   13548:	ldrd	r2, [ip, #16]
   1354c:	ldr	r6, [lr, #-1952]	; 0xfffff860
   13550:	adds	r0, r0, r2
   13554:	adc	r1, r1, r3
   13558:	mov	r2, r0
   1355c:	mov	r3, r1
   13560:	ldrd	r0, [ip, #8]
   13564:	strd	r2, [ip, #16]
   13568:	ldr	r3, [sp, #56]	; 0x38
   1356c:	add	r5, r6, r5
   13570:	str	r5, [lr, #-1952]	; 0xfffff860
   13574:	orrs	lr, r0, r1
   13578:	ldrd	r2, [r3, #8]
   1357c:	beq	1358c <b64_decode@@Base+0xb80>
   13580:	cmp	r2, r0
   13584:	sbcs	r1, r3, r1
   13588:	bge	135a0 <b64_decode@@Base+0xb94>
   1358c:	ldr	r1, [sp, #44]	; 0x2c
   13590:	add	r0, r4, sl
   13594:	sub	r1, r1, #1952	; 0x7a0
   13598:	add	r1, r1, r0, lsl #3
   1359c:	strd	r2, [r1, #8]
   135a0:	add	lr, r4, sl
   135a4:	ldr	r3, [sp, #68]	; 0x44
   135a8:	lsl	lr, lr, #3
   135ac:	add	ip, r3, lr
   135b0:	ldr	r3, [sp, #64]	; 0x40
   135b4:	add	lr, r3, lr
   135b8:	b	13608 <b64_decode@@Base+0xbfc>
   135bc:	ldrd	r0, [ip, #-8]
   135c0:	ldrd	r2, [lr, #-8]
   135c4:	ldrd	r4, [ip, #-16]
   135c8:	adds	r6, r0, r2
   135cc:	adc	r7, r1, r3
   135d0:	ldr	r2, [lr, #-24]	; 0xffffffe8
   135d4:	ldr	r3, [ip, #-24]	; 0xffffffe8
   135d8:	orrs	r1, r4, r5
   135dc:	add	r3, r3, r2
   135e0:	str	r3, [ip, #-24]	; 0xffffffe8
   135e4:	strd	r6, [ip, #-8]
   135e8:	ldrd	r2, [lr, #-16]
   135ec:	beq	135fc <b64_decode@@Base+0xbf0>
   135f0:	cmp	r2, r4
   135f4:	sbcs	r1, r3, r5
   135f8:	bge	13600 <b64_decode@@Base+0xbf4>
   135fc:	strd	r2, [ip, #-16]
   13600:	sub	ip, ip, #24
   13604:	sub	lr, lr, #24
   13608:	subs	sl, sl, #1
   1360c:	bpl	135bc <b64_decode@@Base+0xbb0>
   13610:	ldr	r3, [sp, #44]	; 0x2c
   13614:	add	r0, r8, r8, lsl #1
   13618:	sub	r3, r3, #1952	; 0x7a0
   1361c:	add	r3, r3, r0, lsl #3
   13620:	ldrd	r6, [sp, #24]
   13624:	ldrd	r4, [r3, #16]
   13628:	ldr	r1, [sp, #68]	; 0x44
   1362c:	ldr	r0, [sp, #64]	; 0x40
   13630:	adds	r6, r6, r4
   13634:	adc	r7, r7, r5
   13638:	mov	r4, r6
   1363c:	mov	r5, r7
   13640:	ldr	r2, [pc, #576]	; 13888 <b64_decode@@Base+0xe7c>
   13644:	strd	r4, [r3, #16]
   13648:	bl	10f3c <memcpy@plt>
   1364c:	add	sp, sp, #6080	; 0x17c0
   13650:	add	sp, sp, #44	; 0x2c
   13654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13658:	ldr	r3, [sp, #40]	; 0x28
   1365c:	add	ip, r3, r3, lsl #1
   13660:	add	ip, sl, ip, lsl #3
   13664:	ldr	lr, [sp, #4]
   13668:	cmp	fp, lr
   1366c:	bcc	137e4 <b64_decode@@Base+0xdd8>
   13670:	ldrd	r2, [r9, #8]
   13674:	ldrd	r0, [ip, #8]
   13678:	adds	r4, r2, r0
   1367c:	adc	r5, r3, r1
   13680:	cmp	fp, lr
   13684:	strd	r4, [sp, #16]
   13688:	bls	13874 <b64_decode@@Base+0xe68>
   1368c:	ldrd	r6, [sp, #24]
   13690:	mov	r2, fp
   13694:	mov	r3, #0
   13698:	umull	r0, r1, lr, r6
   1369c:	mla	r1, lr, r7, r1
   136a0:	bl	14d70 <__gcov_sort_n_vals@@Base+0x534>
   136a4:	mov	r2, r0
   136a8:	subs	r0, r6, r2
   136ac:	mov	r3, r1
   136b0:	sbc	r1, r7, r3
   136b4:	strd	r0, [sp, #24]
   136b8:	ldr	r1, [sp, #4]
   136bc:	mov	r0, #0
   136c0:	sub	fp, fp, r1
   136c4:	mov	r8, r1
   136c8:	mov	r1, #0
   136cc:	str	r1, [sp, #4]
   136d0:	mov	r1, #0
   136d4:	ldrd	r6, [sp, #8]
   136d8:	strd	r0, [sp, #8]
   136dc:	adds	r4, r2, r6
   136e0:	adc	r5, r3, r7
   136e4:	ldrd	r0, [sp, #16]
   136e8:	strd	r4, [sp, #32]
   136ec:	bl	1303c <b64_decode@@Base+0x630>
   136f0:	ldr	r3, [sp, #48]	; 0x30
   136f4:	ldrd	r4, [sp, #32]
   136f8:	add	r1, r0, r0, lsl #1
   136fc:	lsl	r1, r1, #3
   13700:	add	ip, r3, r1
   13704:	ldr	r3, [sp, #44]	; 0x2c
   13708:	ldrd	r6, [ip, #8]
   1370c:	add	r1, r3, r1
   13710:	ldrd	r2, [ip, #16]
   13714:	adds	r2, r2, r4
   13718:	adc	r3, r3, r5
   1371c:	strd	r2, [sp, #32]
   13720:	ldrd	r2, [sp, #16]
   13724:	cmp	r2, r6
   13728:	sbcs	lr, r3, r7
   1372c:	movlt	lr, #1
   13730:	movge	lr, #0
   13734:	orrs	r4, r6, r7
   13738:	ldr	r4, [r1, #-1952]	; 0xfffff860
   1373c:	orreq	lr, lr, #1
   13740:	add	r8, r4, r8
   13744:	ldrd	r4, [sp, #32]
   13748:	cmp	lr, #0
   1374c:	str	r8, [r1, #-1952]	; 0xfffff860
   13750:	strd	r4, [ip, #16]
   13754:	strdne	r2, [ip, #8]
   13758:	cmp	fp, #0
   1375c:	ldreq	r3, [sp, #40]	; 0x28
   13760:	subeq	r3, r3, #1
   13764:	streq	r3, [sp, #40]	; 0x28
   13768:	ldr	r3, [sp, #4]
   1376c:	cmp	r3, #0
   13770:	bne	134cc <b64_decode@@Base+0xac0>
   13774:	ldr	r3, [sp, #52]	; 0x34
   13778:	ldr	r5, [sp, #40]	; 0x28
   1377c:	sub	r3, r3, #1
   13780:	str	r3, [sp, #52]	; 0x34
   13784:	cmn	r3, #1
   13788:	ldr	r3, [sp, #56]	; 0x38
   1378c:	sub	r3, r3, #24
   13790:	str	r3, [sp, #56]	; 0x38
   13794:	bne	134a4 <b64_decode@@Base+0xa98>
   13798:	cmp	fp, #0
   1379c:	mov	r9, r5
   137a0:	subne	r9, r5, #1
   137a4:	cmp	r9, #0
   137a8:	mov	r8, r0
   137ac:	blt	13610 <b64_decode@@Base+0xc04>
   137b0:	ldr	r2, [sp, #60]	; 0x3c
   137b4:	add	r3, r9, r9, lsl #1
   137b8:	sub	r0, r2, #24
   137bc:	add	r1, r2, r3, lsl #3
   137c0:	ldrd	r2, [sp, #24]
   137c4:	ldrd	r4, [r1, #16]
   137c8:	sub	r1, r1, #24
   137cc:	adds	r2, r2, r4
   137d0:	adc	r3, r3, r5
   137d4:	cmp	r0, r1
   137d8:	bne	137c4 <b64_decode@@Base+0xdb8>
   137dc:	strd	r2, [sp, #24]
   137e0:	b	13610 <b64_decode@@Base+0xc04>
   137e4:	ldrd	r2, [sp, #8]
   137e8:	ldrd	r6, [ip, #8]
   137ec:	ldrd	r4, [r9, #8]
   137f0:	umull	r0, r1, fp, r2
   137f4:	ldr	r8, [sp, #4]
   137f8:	adds	r4, r4, r6
   137fc:	adc	r5, r5, r7
   13800:	mla	r1, fp, r3, r1
   13804:	mov	r2, r8
   13808:	mov	r3, #0
   1380c:	strd	r4, [sp, #16]
   13810:	bl	14d70 <__gcov_sort_n_vals@@Base+0x534>
   13814:	sub	r3, r8, fp
   13818:	str	r3, [sp, #4]
   1381c:	ldrd	r2, [sp, #8]
   13820:	mov	r8, fp
   13824:	mov	fp, #0
   13828:	subs	r2, r2, r0
   1382c:	sbc	r3, r3, r1
   13830:	mov	r6, r0
   13834:	mov	r7, r1
   13838:	mov	r0, #0
   1383c:	mov	r1, #0
   13840:	strd	r2, [sp, #8]
   13844:	ldrd	r2, [sp, #24]
   13848:	strd	r0, [sp, #24]
   1384c:	b	136dc <b64_decode@@Base+0xcd0>
   13850:	str	r5, [sp, #40]	; 0x28
   13854:	str	r4, [sp, #4]
   13858:	ldrd	r2, [ip, #16]
   1385c:	strd	r2, [sp, #24]
   13860:	b	13664 <b64_decode@@Base+0xc58>
   13864:	ldr	sl, [sp, #52]	; 0x34
   13868:	mov	r8, r0
   1386c:	ldr	r5, [sp, #4]
   13870:	b	13528 <b64_decode@@Base+0xb1c>
   13874:	mov	r0, #0
   13878:	mov	r1, #0
   1387c:	ldrd	r2, [sp, #24]
   13880:	strd	r0, [sp, #24]
   13884:	b	136b8 <b64_decode@@Base+0xcac>
   13888:	andeq	r1, r0, r0, lsr #15
   1388c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13890:	ldrb	r4, [r0]
   13894:	cmp	r4, #47	; 0x2f
   13898:	addeq	r5, r0, #1
   1389c:	ldrbeq	r4, [r0, #1]
   138a0:	movne	r5, r0
   138a4:	cmp	r4, #0
   138a8:	beq	138fc <b64_decode@@Base+0xef0>
   138ac:	mov	r6, r0
   138b0:	ldr	sl, [pc, #144]	; 13948 <b64_decode@@Base+0xf3c>
   138b4:	mov	r8, #0
   138b8:	mov	r7, #47	; 0x2f
   138bc:	b	138cc <b64_decode@@Base+0xec0>
   138c0:	ldrb	r4, [r5, #1]!
   138c4:	cmp	r4, #0
   138c8:	beq	138fc <b64_decode@@Base+0xef0>
   138cc:	cmp	r4, #47	; 0x2f
   138d0:	bne	138c0 <b64_decode@@Base+0xeb4>
   138d4:	strb	r8, [r5]
   138d8:	mov	r1, #0
   138dc:	mov	r0, r6
   138e0:	bl	11068 <access@plt>
   138e4:	cmn	r0, #1
   138e8:	beq	13908 <b64_decode@@Base+0xefc>
   138ec:	strb	r7, [r5]
   138f0:	ldrb	r4, [r5, #1]!
   138f4:	cmp	r4, #0
   138f8:	bne	138cc <b64_decode@@Base+0xec0>
   138fc:	mov	r9, #0
   13900:	mov	r0, r9
   13904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13908:	mov	r1, sl
   1390c:	mov	r0, r6
   13910:	bl	1102c <mkdir@plt>
   13914:	cmn	r0, #1
   13918:	mov	r9, r0
   1391c:	bne	138ec <b64_decode@@Base+0xee0>
   13920:	bl	11014 <__errno_location@plt>
   13924:	ldr	r3, [r0]
   13928:	cmp	r3, #17
   1392c:	beq	138ec <b64_decode@@Base+0xee0>
   13930:	ldr	r0, [pc, #20]	; 1394c <b64_decode@@Base+0xf40>
   13934:	mov	r1, r6
   13938:	add	r0, pc, r0
   1393c:	bl	12f88 <b64_decode@@Base+0x57c>
   13940:	strb	r4, [r5]
   13944:	b	13900 <b64_decode@@Base+0xef4>
   13948:	andeq	r0, r0, sp, ror #3
   1394c:	andeq	r2, r0, r0, asr #32
   13950:	ldr	r3, [pc, #124]	; 139d4 <b64_decode@@Base+0xfc8>
   13954:	cmp	r1, r3
   13958:	beq	139cc <b64_decode@@Base+0xfc0>
   1395c:	cmp	r2, #0
   13960:	push	{r4, r5, lr}
   13964:	sub	sp, sp, #12
   13968:	ldreq	r2, [r0]
   1396c:	lsr	r3, r1, #24
   13970:	ldr	r0, [pc, #96]	; 139d8 <b64_decode@@Base+0xfcc>
   13974:	lsr	r5, r1, #16
   13978:	lsr	r4, r1, #8
   1397c:	strb	r1, [sp, #3]
   13980:	strb	r3, [sp]
   13984:	mov	r1, #53	; 0x35
   13988:	mov	r3, #42	; 0x2a
   1398c:	mov	lr, #54	; 0x36
   13990:	mov	ip, #48	; 0x30
   13994:	strb	r1, [sp, #6]
   13998:	strb	r3, [sp, #7]
   1399c:	mov	r1, r2
   139a0:	mov	r3, sp
   139a4:	add	r2, sp, #4
   139a8:	add	r0, pc, r0
   139ac:	strb	r5, [sp, #1]
   139b0:	strb	r4, [sp, #2]
   139b4:	strb	lr, [sp, #4]
   139b8:	strb	ip, [sp, #5]
   139bc:	bl	12f88 <b64_decode@@Base+0x57c>
   139c0:	mov	r0, #0
   139c4:	add	sp, sp, #12
   139c8:	pop	{r4, r5, pc}
   139cc:	mov	r0, #1
   139d0:	bx	lr
   139d4:	ldrtcc	r3, [r0], -sl, lsr #10
   139d8:	strdeq	r1, [r0], -r8
   139dc:	ldr	r2, [r2, #16]
   139e0:	push	{r4, r5, r6, lr}
   139e4:	cmp	r2, #0
   139e8:	mov	r6, r3
   139ec:	ldr	ip, [sp, #16]
   139f0:	beq	13abc <b64_decode@@Base+0x10b0>
   139f4:	ldr	r3, [r3, #12]
   139f8:	cmp	r1, #0
   139fc:	addeq	r2, r3, #1
   13a00:	streq	r2, [r6, #12]
   13a04:	cmp	r3, #0
   13a08:	beq	13a60 <b64_decode@@Base+0x1054>
   13a0c:	ldrd	r0, [ip, #16]
   13a10:	ldrd	r2, [r6, #16]
   13a14:	ldrd	r4, [r6, #24]
   13a18:	adds	r2, r2, r0
   13a1c:	adc	r3, r3, r1
   13a20:	strd	r2, [r6, #16]
   13a24:	ldrd	r0, [ip, #24]
   13a28:	cmp	r4, r0
   13a2c:	sbcs	r3, r5, r1
   13a30:	blt	13ae0 <b64_decode@@Base+0x10d4>
   13a34:	ldrd	r2, [r6, #32]
   13a38:	adds	r2, r2, r0
   13a3c:	adc	r3, r3, r1
   13a40:	strd	r2, [r6, #32]
   13a44:	add	r1, ip, #40	; 0x28
   13a48:	add	r0, r6, #40	; 0x28
   13a4c:	bl	13434 <b64_decode@@Base+0xa28>
   13a50:	ldr	r3, [sp, #20]
   13a54:	mov	r0, #0
   13a58:	str	r3, [r6]
   13a5c:	pop	{r4, r5, r6, pc}
   13a60:	ldr	r1, [ip, #8]
   13a64:	ldrd	r2, [r6, #16]
   13a68:	str	r1, [r6, #8]
   13a6c:	ldrd	r0, [ip, #16]
   13a70:	ldrd	r4, [r6, #24]
   13a74:	adds	r2, r2, r0
   13a78:	adc	r3, r3, r1
   13a7c:	strd	r2, [r6, #16]
   13a80:	ldrd	r0, [ip, #24]
   13a84:	cmp	r4, r0
   13a88:	sbcs	r3, r5, r1
   13a8c:	bge	13afc <b64_decode@@Base+0x10f0>
   13a90:	ldrd	r2, [r6, #32]
   13a94:	strd	r0, [r6, #24]
   13a98:	ldrd	r0, [ip, #24]
   13a9c:	adds	r2, r2, r0
   13aa0:	adc	r3, r3, r1
   13aa4:	strd	r2, [r6, #32]
   13aa8:	add	r1, ip, #40	; 0x28
   13aac:	ldr	r2, [pc, #92]	; 13b10 <b64_decode@@Base+0x1104>
   13ab0:	add	r0, r6, #40	; 0x28
   13ab4:	bl	10f3c <memcpy@plt>
   13ab8:	b	13a50 <b64_decode@@Base+0x1044>
   13abc:	ldr	r3, [r3, #12]
   13ac0:	cmp	r3, #0
   13ac4:	beq	13a50 <b64_decode@@Base+0x1044>
   13ac8:	mov	r1, r0
   13acc:	ldr	r0, [pc, #64]	; 13b14 <b64_decode@@Base+0x1108>
   13ad0:	add	r0, pc, r0
   13ad4:	bl	12f88 <b64_decode@@Base+0x57c>
   13ad8:	mvn	r0, #0
   13adc:	pop	{r4, r5, r6, pc}
   13ae0:	ldrd	r2, [r6, #32]
   13ae4:	strd	r0, [r6, #24]
   13ae8:	ldrd	r0, [ip, #24]
   13aec:	adds	r2, r2, r0
   13af0:	adc	r3, r3, r1
   13af4:	strd	r2, [r6, #32]
   13af8:	b	13a44 <b64_decode@@Base+0x1038>
   13afc:	ldrd	r2, [r6, #32]
   13b00:	adds	r2, r2, r0
   13b04:	adc	r3, r3, r1
   13b08:	strd	r2, [r6, #32]
   13b0c:	b	13aa8 <b64_decode@@Base+0x109c>
   13b10:	andeq	r1, r0, r0, lsr #15
   13b14:	andeq	r1, r0, r8, lsl #30
   13b18:	ldr	ip, [pc, #52]	; 13b54 <b64_decode@@Base+0x1148>
   13b1c:	ldr	r3, [pc, #52]	; 13b58 <b64_decode@@Base+0x114c>
   13b20:	add	ip, pc, ip
   13b24:	push	{r4, lr}
   13b28:	mov	lr, #0
   13b2c:	ldr	r3, [ip, r3]
   13b30:	mvn	r4, #0
   13b34:	mov	r2, lr
   13b38:	mov	r1, lr
   13b3c:	str	r4, [r3, #24]
   13b40:	str	lr, [r3, #4]
   13b44:	str	lr, [r3, #8]
   13b48:	ldr	r0, [r3]
   13b4c:	pop	{r4, lr}
   13b50:	b	110a4 <fseek@plt>
   13b54:	ldrdeq	r2, [r1], -r8
   13b58:	andeq	r0, r0, r4, asr #1
   13b5c:	push	{r4, r5, r6, r7, lr}
   13b60:	sub	sp, sp, #108	; 0x6c
   13b64:	mov	r4, #0
   13b68:	mov	r7, r0
   13b6c:	strh	r4, [sp, #2]
   13b70:	str	r4, [sp, #4]
   13b74:	str	r4, [sp, #8]
   13b78:	bl	10ff0 <getpid@plt>
   13b7c:	ldr	r3, [pc, #240]	; 13c74 <b64_decode@@Base+0x1268>
   13b80:	ldr	ip, [pc, #240]	; 13c78 <b64_decode@@Base+0x126c>
   13b84:	add	r3, pc, r3
   13b88:	mvn	lr, #0
   13b8c:	mov	r6, #1
   13b90:	ldr	r2, [pc, #228]	; 13c7c <b64_decode@@Base+0x1270>
   13b94:	mov	r1, #66	; 0x42
   13b98:	str	r0, [sp, #12]
   13b9c:	ldr	r5, [r3, ip]
   13ba0:	mov	r0, r7
   13ba4:	strh	r6, [sp]
   13ba8:	str	r4, [r5, #4]
   13bac:	str	r4, [r5, #12]
   13bb0:	str	r4, [r5, #8]
   13bb4:	str	r4, [r5, #20]
   13bb8:	str	lr, [r5, #16]
   13bbc:	bl	10fe4 <open@plt>
   13bc0:	subs	r6, r0, #0
   13bc4:	movlt	r0, r4
   13bc8:	blt	13c48 <b64_decode@@Base+0x123c>
   13bcc:	mov	r7, sp
   13bd0:	mov	r4, #7
   13bd4:	mov	r2, r7
   13bd8:	mov	r1, r4
   13bdc:	mov	r0, r6
   13be0:	bl	11038 <fcntl@plt>
   13be4:	cmp	r0, #0
   13be8:	beq	13bfc <b64_decode@@Base+0x11f0>
   13bec:	bl	11014 <__errno_location@plt>
   13bf0:	ldr	r3, [r0]
   13bf4:	cmp	r3, #4
   13bf8:	beq	13bd4 <b64_decode@@Base+0x11c8>
   13bfc:	ldr	r1, [pc, #124]	; 13c80 <b64_decode@@Base+0x1274>
   13c00:	mov	r0, r6
   13c04:	add	r1, pc, r1
   13c08:	bl	10ec4 <fdopen@plt>
   13c0c:	mov	r4, r0
   13c10:	cmp	r4, #0
   13c14:	mov	r0, r6
   13c18:	str	r4, [r5]
   13c1c:	beq	13c50 <b64_decode@@Base+0x1244>
   13c20:	add	r1, sp, #16
   13c24:	bl	1503c <__libc_csu_fini@@Base+0x1c>
   13c28:	cmp	r0, #0
   13c2c:	blt	13c5c <b64_decode@@Base+0x1250>
   13c30:	mov	r4, #1
   13c34:	ldr	r0, [r5]
   13c38:	mov	r1, #0
   13c3c:	str	r4, [r5, #24]
   13c40:	bl	10ef4 <setbuf@plt>
   13c44:	mov	r0, r4
   13c48:	add	sp, sp, #108	; 0x6c
   13c4c:	pop	{r4, r5, r6, r7, pc}
   13c50:	bl	110bc <close@plt>
   13c54:	mov	r0, r4
   13c58:	b	13c48 <b64_decode@@Base+0x123c>
   13c5c:	mov	r4, #0
   13c60:	ldr	r0, [r5]
   13c64:	bl	11074 <fclose@plt>
   13c68:	str	r4, [r5]
   13c6c:	mov	r0, r4
   13c70:	b	13c48 <b64_decode@@Base+0x123c>
   13c74:	andeq	r2, r1, r4, ror r4
   13c78:	andeq	r0, r0, r4, asr #1
   13c7c:			; <UNDEFINED> instruction: 0x000001b6
   13c80:	andeq	r1, r0, r0, lsl #28
   13c84:	push	{r4, r5, r6, lr}
   13c88:	mov	r4, r1
   13c8c:	ldr	r5, [pc, #244]	; 13d88 <b64_decode@@Base+0x137c>
   13c90:	ldr	ip, [r4, #8]
   13c94:	ldr	lr, [r4, #12]
   13c98:	ldr	r6, [r4]
   13c9c:	cmp	ip, #0
   13ca0:	mov	r1, r0
   13ca4:	add	r5, pc, r5
   13ca8:	add	r0, r6, lr
   13cac:	ble	13ce8 <b64_decode@@Base+0x12dc>
   13cb0:	ldrb	r3, [r1]
   13cb4:	cmp	r3, #47	; 0x2f
   13cb8:	addeq	r2, r1, #1
   13cbc:	ldrbeq	r3, [r1, #1]
   13cc0:	movne	r2, r1
   13cc4:	cmp	r3, #0
   13cc8:	beq	13ce8 <b64_decode@@Base+0x12dc>
   13ccc:	cmp	r3, #47	; 0x2f
   13cd0:	moveq	r1, r2
   13cd4:	ldrb	r3, [r2, #1]!
   13cd8:	subeq	ip, ip, #1
   13cdc:	cmp	r3, #0
   13ce0:	cmpne	ip, #0
   13ce4:	bne	13ccc <b64_decode@@Base+0x12c0>
   13ce8:	cmp	lr, #0
   13cec:	beq	13d04 <b64_decode@@Base+0x12f8>
   13cf0:	ldrb	r3, [r1]
   13cf4:	cmp	r3, #47	; 0x2f
   13cf8:	addne	r0, r0, #1
   13cfc:	movne	r3, #47	; 0x2f
   13d00:	strbne	r3, [r6, lr]
   13d04:	bl	10f78 <strcpy@plt>
   13d08:	ldr	r0, [r4]
   13d0c:	bl	13b5c <b64_decode@@Base+0x1150>
   13d10:	cmp	r0, #0
   13d14:	beq	13d20 <b64_decode@@Base+0x1314>
   13d18:	mov	r0, #0
   13d1c:	pop	{r4, r5, r6, pc}
   13d20:	ldr	r0, [r4]
   13d24:	bl	1388c <b64_decode@@Base+0xe80>
   13d28:	cmp	r0, #0
   13d2c:	bne	13d64 <b64_decode@@Base+0x1358>
   13d30:	ldr	r0, [r4]
   13d34:	bl	13b5c <b64_decode@@Base+0x1150>
   13d38:	cmp	r0, #0
   13d3c:	bne	13d18 <b64_decode@@Base+0x130c>
   13d40:	ldr	r3, [pc, #68]	; 13d8c <b64_decode@@Base+0x1380>
   13d44:	ldr	r1, [pc, #68]	; 13d90 <b64_decode@@Base+0x1384>
   13d48:	ldr	r2, [r4]
   13d4c:	ldr	r3, [r5, r3]
   13d50:	add	r1, pc, r1
   13d54:	ldr	r0, [r3]
   13d58:	bl	11008 <fprintf@plt>
   13d5c:	mvn	r0, #0
   13d60:	pop	{r4, r5, r6, pc}
   13d64:	ldr	r3, [pc, #32]	; 13d8c <b64_decode@@Base+0x1380>
   13d68:	ldr	r1, [pc, #36]	; 13d94 <b64_decode@@Base+0x1388>
   13d6c:	ldr	r2, [r4]
   13d70:	ldr	r3, [r5, r3]
   13d74:	add	r1, pc, r1
   13d78:	ldr	r0, [r3]
   13d7c:	bl	11008 <fprintf@plt>
   13d80:	mvn	r0, #0
   13d84:	pop	{r4, r5, r6, pc}
   13d88:	andeq	r2, r1, r4, asr r3
   13d8c:	strheq	r0, [r0], -r8
   13d90:	andeq	r1, r0, ip, asr #25
   13d94:	muleq	r0, r4, ip
   13d98:	ldr	r3, [pc, #96]	; 13e00 <b64_decode@@Base+0x13f4>
   13d9c:	ldr	r2, [pc, #96]	; 13e04 <b64_decode@@Base+0x13f8>
   13da0:	add	r3, pc, r3
   13da4:	push	{r4, lr}
   13da8:	ldr	r4, [r3, r2]
   13dac:	ldr	r0, [r4]
   13db0:	cmp	r0, #0
   13db4:	beq	13dd4 <b64_decode@@Base+0x13c8>
   13db8:	ldr	r3, [r4, #8]
   13dbc:	cmp	r3, #0
   13dc0:	bne	13de4 <b64_decode@@Base+0x13d8>
   13dc4:	bl	11074 <fclose@plt>
   13dc8:	mov	r3, #0
   13dcc:	str	r3, [r4]
   13dd0:	str	r3, [r4, #12]
   13dd4:	mov	r3, #0
   13dd8:	str	r3, [r4, #24]
   13ddc:	ldr	r0, [r4, #20]
   13de0:	pop	{r4, pc}
   13de4:	ldr	r2, [r4, #24]
   13de8:	cmp	r2, #0
   13dec:	bge	13dc4 <b64_decode@@Base+0x13b8>
   13df0:	mov	r0, r3
   13df4:	bl	12e14 <b64_decode@@Base+0x408>
   13df8:	ldr	r0, [r4]
   13dfc:	b	13dc4 <b64_decode@@Base+0x13b8>
   13e00:	andeq	r2, r1, r8, asr r2
   13e04:	andeq	r0, r0, r4, asr #1
   13e08:	push	{r4, lr}
   13e0c:	mov	r4, r0
   13e10:	mov	r0, #1
   13e14:	bl	12e70 <b64_decode@@Base+0x464>
   13e18:	str	r4, [r0]
   13e1c:	pop	{r4, pc}
   13e20:	push	{r4, r5, r6, lr}
   13e24:	mov	r5, r0
   13e28:	mov	r0, #2
   13e2c:	mov	r4, r1
   13e30:	bl	12e70 <b64_decode@@Base+0x464>
   13e34:	str	r5, [r0]
   13e38:	str	r4, [r0, #4]
   13e3c:	pop	{r4, r5, r6, pc}
   13e40:	push	{r4, r5, r6, lr}
   13e44:	mov	r5, r0
   13e48:	mov	r0, #2
   13e4c:	mov	r4, r1
   13e50:	bl	12e70 <b64_decode@@Base+0x464>
   13e54:	str	r5, [r0]
   13e58:	str	r4, [r0, #4]
   13e5c:	pop	{r4, r5, r6, pc}
   13e60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e64:	sub	sp, sp, #32
   13e68:	mov	r7, sp
   13e6c:	mov	r5, r1
   13e70:	mov	r6, sp
   13e74:	add	r2, sp, #32
   13e78:	mov	r3, #0
   13e7c:	str	r3, [r6], #4
   13e80:	cmp	r2, r6
   13e84:	bne	13e7c <b64_decode@@Base+0x1470>
   13e88:	mov	r8, #0
   13e8c:	mov	r3, r8
   13e90:	mov	r4, r5
   13e94:	mov	r1, r5
   13e98:	mov	r9, #1
   13e9c:	lsr	r2, r3, #5
   13ea0:	ldr	lr, [r1, #40]	; 0x28
   13ea4:	add	ip, sp, #32
   13ea8:	cmp	lr, #0
   13eac:	add	r2, ip, r2, lsl #2
   13eb0:	and	sl, r3, #31
   13eb4:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   13eb8:	add	r3, r3, #1
   13ebc:	orrne	ip, ip, r9, lsl sl
   13ec0:	addne	r8, r8, #1
   13ec4:	strne	ip, [r2, #-32]	; 0xffffffe0
   13ec8:	cmp	r3, #252	; 0xfc
   13ecc:	add	r1, r1, #24
   13ed0:	bne	13e9c <b64_decode@@Base+0x1490>
   13ed4:	add	r8, r8, r8, lsl #2
   13ed8:	add	r1, r8, #17
   13edc:	bl	13e40 <b64_decode@@Base+0x1434>
   13ee0:	ldr	r0, [r5]
   13ee4:	bl	13e08 <b64_decode@@Base+0x13fc>
   13ee8:	ldr	r0, [r5, #8]
   13eec:	bl	13e08 <b64_decode@@Base+0x13fc>
   13ef0:	ldr	r0, [r5, #12]
   13ef4:	bl	13e08 <b64_decode@@Base+0x13fc>
   13ef8:	ldrd	r0, [r5, #16]
   13efc:	bl	13e20 <b64_decode@@Base+0x1414>
   13f00:	ldrd	r0, [r5, #24]
   13f04:	bl	13e20 <b64_decode@@Base+0x1414>
   13f08:	ldrd	r0, [r5, #32]
   13f0c:	bl	13e20 <b64_decode@@Base+0x1414>
   13f10:	ldr	r0, [r7], #4
   13f14:	bl	13e08 <b64_decode@@Base+0x13fc>
   13f18:	cmp	r7, r6
   13f1c:	bne	13f10 <b64_decode@@Base+0x1504>
   13f20:	add	r5, r5, #6016	; 0x1780
   13f24:	add	r5, r5, #32
   13f28:	b	13f38 <b64_decode@@Base+0x152c>
   13f2c:	add	r4, r4, #24
   13f30:	cmp	r4, r5
   13f34:	beq	13f64 <b64_decode@@Base+0x1558>
   13f38:	ldr	r0, [r4, #40]	; 0x28
   13f3c:	cmp	r0, #0
   13f40:	beq	13f2c <b64_decode@@Base+0x1520>
   13f44:	bl	13e08 <b64_decode@@Base+0x13fc>
   13f48:	ldrd	r0, [r4, #48]	; 0x30
   13f4c:	bl	13e20 <b64_decode@@Base+0x1414>
   13f50:	add	r4, r4, #24
   13f54:	ldrd	r0, [r4, #32]
   13f58:	bl	13e20 <b64_decode@@Base+0x1414>
   13f5c:	cmp	r4, r5
   13f60:	bne	13f38 <b64_decode@@Base+0x152c>
   13f64:	add	sp, sp, #32
   13f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f6c:	push	{r4, lr}
   13f70:	mov	r0, #1
   13f74:	bl	12ecc <b64_decode@@Base+0x4c0>
   13f78:	subs	r3, r0, #0
   13f7c:	popeq	{r4, pc}
   13f80:	ldr	r0, [r3]
   13f84:	pop	{r4, lr}
   13f88:	b	12de4 <b64_decode@@Base+0x3d8>
   13f8c:	push	{r4, r5, r6, lr}
   13f90:	mov	r0, #2
   13f94:	bl	12ecc <b64_decode@@Base+0x4c0>
   13f98:	subs	r3, r0, #0
   13f9c:	beq	13fcc <b64_decode@@Base+0x15c0>
   13fa0:	ldr	r0, [r3]
   13fa4:	bl	12de4 <b64_decode@@Base+0x3d8>
   13fa8:	mov	r5, #0
   13fac:	mov	r4, r0
   13fb0:	ldr	r0, [r3, #4]
   13fb4:	bl	12de4 <b64_decode@@Base+0x3d8>
   13fb8:	mov	r2, #0
   13fbc:	mov	r3, r0
   13fc0:	orr	r1, r3, r5
   13fc4:	orr	r0, r2, r4
   13fc8:	pop	{r4, r5, r6, pc}
   13fcc:	mov	r0, #0
   13fd0:	mov	r1, #0
   13fd4:	pop	{r4, r5, r6, pc}
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	sub	sp, sp, #28
   13fe0:	mov	r4, #0
   13fe4:	str	r1, [sp, #8]
   13fe8:	str	r3, [sp, #12]
   13fec:	add	r3, r1, #56	; 0x38
   13ff0:	add	r1, r1, #16
   13ff4:	str	r0, [sp, #16]
   13ff8:	str	r2, [sp, #20]
   13ffc:	ldr	r2, [r3, #-4]!
   14000:	cmp	r2, #0
   14004:	addne	r4, r4, #1
   14008:	cmp	r3, r1
   1400c:	bne	13ffc <b64_decode@@Base+0x15f0>
   14010:	add	r4, r4, #4
   14014:	lsl	r4, r4, #3
   14018:	mov	r0, r4
   1401c:	bl	10fa8 <malloc@plt>
   14020:	subs	r8, r0, #0
   14024:	beq	140e8 <b64_decode@@Base+0x16dc>
   14028:	ldr	r3, [sp, #12]
   1402c:	mov	r4, #0
   14030:	str	r3, [r8, #4]
   14034:	str	r4, [r8]
   14038:	bl	13f6c <b64_decode@@Base+0x1560>
   1403c:	ldr	r3, [sp, #8]
   14040:	ldr	r5, [pc, #272]	; 14158 <b64_decode@@Base+0x174c>
   14044:	add	r6, r3, #12
   14048:	mov	r7, r4
   1404c:	str	r0, [r8, #12]
   14050:	bl	13f6c <b64_decode@@Base+0x1560>
   14054:	str	r0, [r8, #16]
   14058:	bl	13f6c <b64_decode@@Base+0x1560>
   1405c:	str	r0, [r8, #20]
   14060:	ldr	r3, [r6, #4]!
   14064:	cmp	r3, #0
   14068:	beq	140c4 <b64_decode@@Base+0x16b8>
   1406c:	bl	13f6c <b64_decode@@Base+0x1560>
   14070:	cmp	r5, r0
   14074:	bne	1413c <b64_decode@@Base+0x1730>
   14078:	bl	13f6c <b64_decode@@Base+0x1560>
   1407c:	lsr	r9, r0, #1
   14080:	lsl	fp, r9, #3
   14084:	mov	r0, fp
   14088:	bl	10fa8 <malloc@plt>
   1408c:	subs	sl, r0, #0
   14090:	beq	1414c <b64_decode@@Base+0x1740>
   14094:	add	r3, r8, r7, lsl #3
   14098:	cmp	r9, #0
   1409c:	str	r9, [r3, #24]
   140a0:	str	sl, [r3, #28]
   140a4:	sub	r9, r9, #1
   140a8:	beq	140c0 <b64_decode@@Base+0x16b4>
   140ac:	bl	13f8c <b64_decode@@Base+0x1580>
   140b0:	sub	r9, r9, #1
   140b4:	cmn	r9, #1
   140b8:	strd	r0, [sl], #8
   140bc:	bne	140ac <b64_decode@@Base+0x16a0>
   140c0:	add	r7, r7, #1
   140c4:	add	r4, r4, #1
   140c8:	cmp	r4, #10
   140cc:	add	r5, r5, #131072	; 0x20000
   140d0:	bne	14060 <b64_decode@@Base+0x1654>
   140d4:	ldr	r3, [sp, #20]
   140d8:	mov	r0, r8
   140dc:	str	r8, [r3]
   140e0:	add	sp, sp, #28
   140e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e8:	mvn	r5, #0
   140ec:	cmp	r4, #0
   140f0:	beq	1412c <b64_decode@@Base+0x1720>
   140f4:	ldr	r3, [pc, #96]	; 1415c <b64_decode@@Base+0x1750>
   140f8:	add	r3, pc, r3
   140fc:	ldr	r0, [pc, #92]	; 14160 <b64_decode@@Base+0x1754>
   14100:	ldr	r2, [sp, #12]
   14104:	ldr	r1, [sp, #16]
   14108:	str	r4, [sp]
   1410c:	add	r0, pc, r0
   14110:	bl	12f88 <b64_decode@@Base+0x57c>
   14114:	mov	r2, r5
   14118:	mov	r1, r8
   1411c:	ldr	r0, [sp, #8]
   14120:	add	sp, sp, #28
   14124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14128:	b	12fd0 <b64_decode@@Base+0x5c4>
   1412c:	ldr	r3, [pc, #48]	; 14164 <b64_decode@@Base+0x1758>
   14130:	mov	r4, r5
   14134:	add	r3, pc, r3
   14138:	b	140fc <b64_decode@@Base+0x16f0>
   1413c:	ldr	r3, [pc, #36]	; 14168 <b64_decode@@Base+0x175c>
   14140:	mov	r5, r4
   14144:	add	r3, pc, r3
   14148:	b	140fc <b64_decode@@Base+0x16f0>
   1414c:	mov	r5, r4
   14150:	mov	r4, fp
   14154:	b	140ec <b64_decode@@Base+0x16e0>
   14158:			; <UNDEFINED> instruction: 0x01a10000
   1415c:	andeq	r1, r0, r0, asr #18
   14160:	andeq	r1, r0, r0, asr r9
   14164:	andeq	r1, r0, r4, lsl r9
   14168:	andeq	r1, r0, r4, lsl #18
   1416c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14170:	sub	sp, sp, #44	; 0x2c
   14174:	mov	r9, r0
   14178:	bl	13f6c <b64_decode@@Base+0x1560>
   1417c:	mov	r7, #0
   14180:	add	sl, sp, #8
   14184:	mov	r4, sl
   14188:	add	r5, sp, #40	; 0x28
   1418c:	str	r0, [r9]
   14190:	bl	13f6c <b64_decode@@Base+0x1560>
   14194:	str	r0, [r9, #8]
   14198:	bl	13f6c <b64_decode@@Base+0x1560>
   1419c:	str	r0, [r9, #12]
   141a0:	bl	13f8c <b64_decode@@Base+0x1580>
   141a4:	strd	r0, [r9, #16]
   141a8:	bl	13f8c <b64_decode@@Base+0x1580>
   141ac:	strd	r0, [r9, #24]
   141b0:	bl	13f8c <b64_decode@@Base+0x1580>
   141b4:	ldr	r2, [pc, #244]	; 142b0 <b64_decode@@Base+0x18a4>
   141b8:	strd	r0, [r9, #32]
   141bc:	add	r0, r9, #40	; 0x28
   141c0:	mov	r1, r7
   141c4:	bl	11044 <memset@plt>
   141c8:	bl	13f6c <b64_decode@@Base+0x1560>
   141cc:	str	r0, [r4], #4
   141d0:	bl	14e54 <__gcov_sort_n_vals@@Base+0x618>
   141d4:	cmp	r5, r4
   141d8:	add	r7, r7, r0
   141dc:	bne	141c8 <b64_decode@@Base+0x17bc>
   141e0:	cmp	r7, #0
   141e4:	sub	r7, r7, #1
   141e8:	beq	1429c <b64_decode@@Base+0x1890>
   141ec:	ldr	r8, [pc, #192]	; 142b4 <b64_decode@@Base+0x18a8>
   141f0:	mov	r4, #0
   141f4:	ldr	r3, [pc, #188]	; 142b8 <b64_decode@@Base+0x18ac>
   141f8:	add	r8, pc, r8
   141fc:	mov	r5, r4
   14200:	mov	r6, r4
   14204:	add	r3, pc, r3
   14208:	str	r3, [sp, #4]
   1420c:	cmp	r4, #0
   14210:	addeq	r6, sl, r5, lsl #2
   14214:	beq	14220 <b64_decode@@Base+0x1814>
   14218:	b	14248 <b64_decode@@Base+0x183c>
   1421c:	mov	r5, r3
   14220:	cmp	r5, #7
   14224:	bls	14230 <b64_decode@@Base+0x1824>
   14228:	mov	r0, r8
   1422c:	bl	12f88 <b64_decode@@Base+0x57c>
   14230:	ldr	r4, [r6], #4
   14234:	add	r3, r5, #1
   14238:	cmp	r4, #0
   1423c:	beq	1421c <b64_decode@@Base+0x1810>
   14240:	lsl	r6, r5, #5
   14244:	mov	r5, r3
   14248:	tst	r4, #1
   1424c:	bne	14260 <b64_decode@@Base+0x1854>
   14250:	lsr	r4, r4, #1
   14254:	tst	r4, #1
   14258:	add	r6, r6, #1
   1425c:	beq	14250 <b64_decode@@Base+0x1844>
   14260:	cmp	r6, #251	; 0xfb
   14264:	bhi	142a4 <b64_decode@@Base+0x1898>
   14268:	bl	13f6c <b64_decode@@Base+0x1560>
   1426c:	add	r3, r6, r6, lsl #1
   14270:	sub	r7, r7, #1
   14274:	add	fp, r9, r3, lsl #3
   14278:	lsr	r4, r4, #1
   1427c:	add	r6, r6, #1
   14280:	str	r0, [fp, #40]	; 0x28
   14284:	bl	13f8c <b64_decode@@Base+0x1580>
   14288:	strd	r0, [fp, #48]	; 0x30
   1428c:	bl	13f8c <b64_decode@@Base+0x1580>
   14290:	cmn	r7, #1
   14294:	strd	r0, [fp, #56]	; 0x38
   14298:	bne	1420c <b64_decode@@Base+0x1800>
   1429c:	add	sp, sp, #44	; 0x2c
   142a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a4:	ldr	r0, [sp, #4]
   142a8:	bl	12f88 <b64_decode@@Base+0x57c>
   142ac:	b	14268 <b64_decode@@Base+0x185c>
   142b0:	andeq	r1, r0, r0, lsr #15
   142b4:	andeq	r1, r0, r4, asr #17
   142b8:	andeq	r1, r0, ip, ror r8
   142bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c0:	sub	sp, sp, #6080	; 0x17c0
   142c4:	sub	sp, sp, #28
   142c8:	mov	r4, r1
   142cc:	stmib	sp, {r2, r3}
   142d0:	add	r3, sp, #6144	; 0x1800
   142d4:	mov	sl, r0
   142d8:	ldr	r7, [r3]
   142dc:	add	r3, sp, #6144	; 0x1800
   142e0:	add	r3, r3, #4
   142e4:	ldr	r6, [r3]
   142e8:	bl	13f6c <b64_decode@@Base+0x1560>
   142ec:	add	r3, r4, #12
   142f0:	mov	r2, sl
   142f4:	str	r3, [sp, #12]
   142f8:	mov	r1, r0
   142fc:	mov	r0, r3
   14300:	bl	13950 <b64_decode@@Base+0xf44>
   14304:	cmp	r0, #0
   14308:	beq	14588 <b64_decode@@Base+0x1b7c>
   1430c:	bl	13f6c <b64_decode@@Base+0x1560>
   14310:	ldr	r3, [r4, #8]
   14314:	cmp	r0, r3
   14318:	beq	1432c <b64_decode@@Base+0x1920>
   1431c:	mov	r0, #0
   14320:	add	sp, sp, #6080	; 0x17c0
   14324:	add	sp, sp, #28
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432c:	ldr	fp, [pc, #628]	; 145a8 <b64_decode@@Base+0x1b9c>
   14330:	add	r9, sp, #2000	; 0x7d0
   14334:	add	r5, sp, #16
   14338:	add	fp, pc, fp
   1433c:	add	r9, r9, #8
   14340:	bl	12d94 <b64_decode@@Base+0x388>
   14344:	str	r0, [r6]
   14348:	bl	13f6c <b64_decode@@Base+0x1560>
   1434c:	cmp	r0, #-1560281088	; 0xa3000000
   14350:	bne	143f4 <b64_decode@@Base+0x19e8>
   14354:	bl	13f6c <b64_decode@@Base+0x1560>
   14358:	mov	r0, r5
   1435c:	bl	1416c <b64_decode@@Base+0x1760>
   14360:	bl	12db8 <b64_decode@@Base+0x3ac>
   14364:	subs	r8, r0, #0
   14368:	bne	14528 <b64_decode@@Base+0x1b1c>
   1436c:	ldr	r3, [r7]
   14370:	cmp	r3, #0
   14374:	bne	143c0 <b64_decode@@Base+0x19b4>
   14378:	add	r2, sp, #6144	; 0x1800
   1437c:	add	r2, r2, #8
   14380:	ldr	r3, [r9, #-1992]	; 0xfffff838
   14384:	ldr	r2, [r2]
   14388:	cmp	r3, r2
   1438c:	bne	14340 <b64_decode@@Base+0x1934>
   14390:	ldr	r3, [sp, #8]
   14394:	ldr	ip, [r9, #-1984]	; 0xfffff840
   14398:	ldr	r2, [pc, #524]	; 145ac <b64_decode@@Base+0x1ba0>
   1439c:	ldr	r3, [r3, #8]
   143a0:	mov	r1, r5
   143a4:	cmp	ip, r3
   143a8:	ldr	r0, [sp, #4]
   143ac:	bne	14340 <b64_decode@@Base+0x1934>
   143b0:	bl	10f3c <memcpy@plt>
   143b4:	ldr	r3, [r6]
   143b8:	str	r3, [r7]
   143bc:	b	14340 <b64_decode@@Base+0x1934>
   143c0:	ldr	r0, [pc, #488]	; 145b0 <b64_decode@@Base+0x1ba4>
   143c4:	bl	10fa8 <malloc@plt>
   143c8:	ldr	r2, [pc, #476]	; 145ac <b64_decode@@Base+0x1ba0>
   143cc:	mov	r1, r5
   143d0:	mov	r3, r0
   143d4:	str	r0, [fp]
   143d8:	add	r0, r0, #8
   143dc:	str	r3, [sp]
   143e0:	bl	10f3c <memcpy@plt>
   143e4:	ldr	r3, [sp]
   143e8:	str	r8, [r3]
   143ec:	ldr	fp, [fp]
   143f0:	b	14340 <b64_decode@@Base+0x1934>
   143f4:	ldr	r5, [r4, #56]	; 0x38
   143f8:	cmp	r5, #0
   143fc:	beq	14590 <b64_decode@@Base+0x1b84>
   14400:	ldr	r3, [r4, #60]	; 0x3c
   14404:	cmp	r0, #16777216	; 0x1000000
   14408:	ldr	r8, [r3]
   1440c:	bne	14558 <b64_decode@@Base+0x1b4c>
   14410:	ldr	r6, [pc, #412]	; 145b4 <b64_decode@@Base+0x1ba8>
   14414:	mov	r5, #0
   14418:	add	r6, pc, r6
   1441c:	add	r6, r6, #4
   14420:	b	14464 <b64_decode@@Base+0x1a58>
   14424:	mov	r2, r6
   14428:	mov	r3, r5
   1442c:	mov	r1, r4
   14430:	mov	r0, sl
   14434:	bl	13fd8 <b64_decode@@Base+0x15cc>
   14438:	subs	r6, r0, #0
   1443c:	beq	1455c <b64_decode@@Base+0x1b50>
   14440:	bl	13f6c <b64_decode@@Base+0x1560>
   14444:	ldr	r3, [r4, #56]	; 0x38
   14448:	add	r5, r5, #1
   1444c:	cmp	r3, r5
   14450:	beq	14590 <b64_decode@@Base+0x1b84>
   14454:	ldr	r3, [r4, #60]	; 0x3c
   14458:	cmp	r0, #16777216	; 0x1000000
   1445c:	ldr	r8, [r3, r5, lsl #2]
   14460:	bne	1455c <b64_decode@@Base+0x1b50>
   14464:	bl	13f6c <b64_decode@@Base+0x1560>
   14468:	cmp	r0, #0
   1446c:	beq	14440 <b64_decode@@Base+0x1a34>
   14470:	cmp	r0, #3
   14474:	bne	1455c <b64_decode@@Base+0x1b50>
   14478:	cmp	r8, #0
   1447c:	beq	14424 <b64_decode@@Base+0x1a18>
   14480:	ldr	r3, [r8]
   14484:	cmp	r4, r3
   14488:	bne	14424 <b64_decode@@Base+0x1a18>
   1448c:	bl	13f6c <b64_decode@@Base+0x1560>
   14490:	ldr	r3, [r8, #4]
   14494:	cmp	r0, r3
   14498:	bne	1455c <b64_decode@@Base+0x1b50>
   1449c:	bl	13f6c <b64_decode@@Base+0x1560>
   144a0:	ldr	r3, [r8, #8]
   144a4:	cmp	r0, r3
   144a8:	bne	1455c <b64_decode@@Base+0x1b50>
   144ac:	bl	13f6c <b64_decode@@Base+0x1560>
   144b0:	ldr	r3, [r8, #12]
   144b4:	cmp	r0, r3
   144b8:	bne	1455c <b64_decode@@Base+0x1b50>
   144bc:	ldr	r7, [pc, #244]	; 145b8 <b64_decode@@Base+0x1bac>
   144c0:	ldr	fp, [sp, #12]
   144c4:	add	r8, r8, #16
   144c8:	ldr	r9, [fp, #4]!
   144cc:	cmp	r9, #0
   144d0:	beq	14508 <b64_decode@@Base+0x1afc>
   144d4:	bl	13f6c <b64_decode@@Base+0x1560>
   144d8:	str	r0, [sp]
   144dc:	bl	13f6c <b64_decode@@Base+0x1560>
   144e0:	ldr	r3, [sp]
   144e4:	cmp	r3, r7
   144e8:	bne	1455c <b64_decode@@Base+0x1b50>
   144ec:	ldr	r3, [r8]
   144f0:	mov	r1, r3
   144f4:	cmp	r0, r3, lsl #1
   144f8:	bne	1455c <b64_decode@@Base+0x1b50>
   144fc:	ldr	r0, [r8, #4]
   14500:	blx	r9
   14504:	add	r8, r8, #8
   14508:	ldr	r3, [pc, #172]	; 145bc <b64_decode@@Base+0x1bb0>
   1450c:	add	r7, r7, #131072	; 0x20000
   14510:	cmp	r7, r3
   14514:	bne	144c8 <b64_decode@@Base+0x1abc>
   14518:	bl	12db8 <b64_decode@@Base+0x3ac>
   1451c:	cmp	r0, #0
   14520:	beq	14440 <b64_decode@@Base+0x1a34>
   14524:	mov	r8, r0
   14528:	cmp	r8, #0
   1452c:	blt	1459c <b64_decode@@Base+0x1b90>
   14530:	ldr	r2, [pc, #136]	; 145c0 <b64_decode@@Base+0x1bb4>
   14534:	add	r2, pc, r2
   14538:	ldr	r0, [pc, #132]	; 145c4 <b64_decode@@Base+0x1bb8>
   1453c:	mov	r1, sl
   14540:	add	r0, pc, r0
   14544:	bl	12f88 <b64_decode@@Base+0x57c>
   14548:	mvn	r0, #0
   1454c:	add	sp, sp, #6080	; 0x17c0
   14550:	add	sp, sp, #28
   14554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14558:	mov	r5, #0
   1455c:	ldr	r2, [pc, #100]	; 145c8 <b64_decode@@Base+0x1bbc>
   14560:	ldr	r0, [pc, #100]	; 145cc <b64_decode@@Base+0x1bc0>
   14564:	mov	r3, r5
   14568:	mov	r1, sl
   1456c:	add	r2, pc, r2
   14570:	add	r0, pc, r0
   14574:	bl	12f88 <b64_decode@@Base+0x57c>
   14578:	mvn	r0, #0
   1457c:	add	sp, sp, #6080	; 0x17c0
   14580:	add	sp, sp, #28
   14584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14588:	mvn	r0, #0
   1458c:	b	14320 <b64_decode@@Base+0x1914>
   14590:	cmp	r0, #0
   14594:	beq	1431c <b64_decode@@Base+0x1910>
   14598:	b	1455c <b64_decode@@Base+0x1b50>
   1459c:	ldr	r2, [pc, #44]	; 145d0 <b64_decode@@Base+0x1bc4>
   145a0:	add	r2, pc, r2
   145a4:	b	14538 <b64_decode@@Base+0x1b2c>
   145a8:	andeq	r2, r1, r0, asr #6
   145ac:	andeq	r1, r0, r8, asr #15
   145b0:	ldrdeq	r1, [r0], -r0
   145b4:	andeq	r2, r1, r0, ror #4
   145b8:			; <UNDEFINED> instruction: 0x01a10000
   145bc:			; <UNDEFINED> instruction: 0x01b50000
   145c0:	ldrdeq	r1, [r0], -r4
   145c4:	andeq	r1, r0, r4, lsl #12
   145c8:	andeq	r1, r0, r4, lsr #11
   145cc:	andeq	r1, r0, ip, lsr #11
   145d0:	andeq	r1, r0, ip, asr r5
   145d4:	ldr	r3, [pc, #68]	; 14620 <b64_decode@@Base+0x1c14>
   145d8:	ldr	r2, [pc, #68]	; 14624 <b64_decode@@Base+0x1c18>
   145dc:	add	r3, pc, r3
   145e0:	push	{r4, r5, r6, lr}
   145e4:	mov	r5, r0
   145e8:	ldr	r4, [r3, r2]
   145ec:	ldr	r0, [r4, #8]
   145f0:	cmp	r0, #0
   145f4:	beq	145fc <b64_decode@@Base+0x1bf0>
   145f8:	bl	12e14 <b64_decode@@Base+0x408>
   145fc:	lsl	r1, r5, #2
   14600:	mov	r2, #0
   14604:	ldr	r0, [r4]
   14608:	bl	110a4 <fseek@plt>
   1460c:	ldr	r0, [r4]
   14610:	bl	10f60 <ftell@plt>
   14614:	asr	r0, r0, #2
   14618:	str	r0, [r4, #4]
   1461c:	pop	{r4, r5, r6, pc}
   14620:	andeq	r1, r1, ip, lsl sl
   14624:	andeq	r0, r0, r4, asr #1
   14628:	cmp	r2, #0
   1462c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14630:	mov	r9, r0
   14634:	sub	sp, sp, #20
   14638:	mov	r5, r1
   1463c:	mov	r4, r3
   14640:	beq	147f8 <b64_decode@@Base+0x1dec>
   14644:	cmp	r4, #0
   14648:	bne	14814 <b64_decode@@Base+0x1e08>
   1464c:	mov	r1, r5
   14650:	ldr	r5, [pc, #456]	; 14820 <b64_decode@@Base+0x1e14>
   14654:	mov	r0, #-1560281088	; 0xa3000000
   14658:	add	r5, pc, r5
   1465c:	bl	13e60 <b64_decode@@Base+0x1454>
   14660:	ldr	r4, [r5]
   14664:	cmp	r4, #0
   14668:	movne	r6, #-1560281088	; 0xa3000000
   1466c:	beq	14698 <b64_decode@@Base+0x1c8c>
   14670:	add	r1, r4, #8
   14674:	mov	r0, r6
   14678:	bl	13e60 <b64_decode@@Base+0x1454>
   1467c:	ldr	r3, [r5]
   14680:	mov	r0, r3
   14684:	ldr	r4, [r3]
   14688:	bl	10f24 <free@plt>
   1468c:	cmp	r4, #0
   14690:	str	r4, [r5]
   14694:	bne	14670 <b64_decode@@Base+0x1c64>
   14698:	ldr	r3, [r9, #56]	; 0x38
   1469c:	cmp	r3, #0
   146a0:	beq	147dc <b64_decode@@Base+0x1dd0>
   146a4:	ldr	r3, [pc, #376]	; 14824 <b64_decode@@Base+0x1e18>
   146a8:	ldr	r8, [pc, #376]	; 14828 <b64_decode@@Base+0x1e1c>
   146ac:	add	r3, pc, r3
   146b0:	str	r3, [sp, #4]
   146b4:	ldr	r3, [pc, #368]	; 1482c <b64_decode@@Base+0x1e20>
   146b8:	mov	r7, #0
   146bc:	add	r3, pc, r3
   146c0:	str	r3, [sp, #12]
   146c4:	b	14700 <b64_decode@@Base+0x1cf4>
   146c8:	ldr	r3, [r9, #60]	; 0x3c
   146cc:	ldr	r4, [r3, r7, lsl #2]
   146d0:	cmp	r4, #0
   146d4:	beq	146e4 <b64_decode@@Base+0x1cd8>
   146d8:	ldr	r3, [r4]
   146dc:	cmp	r9, r3
   146e0:	beq	147ec <b64_decode@@Base+0x1de0>
   146e4:	mov	r1, #0
   146e8:	mov	r0, #16777216	; 0x1000000
   146ec:	bl	13e40 <b64_decode@@Base+0x1434>
   146f0:	ldr	r3, [r9, #56]	; 0x38
   146f4:	add	r7, r7, #1
   146f8:	cmp	r3, r7
   146fc:	beq	147dc <b64_decode@@Base+0x1dd0>
   14700:	ldr	r3, [sp, #4]
   14704:	ldr	r4, [r3, #4]
   14708:	cmp	r4, #0
   1470c:	beq	146c8 <b64_decode@@Base+0x1cbc>
   14710:	ldr	r3, [r4, #4]
   14714:	cmp	r3, r7
   14718:	moveq	r3, #1
   1471c:	addeq	r4, r4, #8
   14720:	streq	r3, [sp, #8]
   14724:	bne	146c8 <b64_decode@@Base+0x1cbc>
   14728:	mov	r1, #3
   1472c:	mov	r0, #16777216	; 0x1000000
   14730:	bl	13e40 <b64_decode@@Base+0x1434>
   14734:	ldr	r0, [r4, #4]
   14738:	bl	13e08 <b64_decode@@Base+0x13fc>
   1473c:	ldr	r0, [r4, #8]
   14740:	bl	13e08 <b64_decode@@Base+0x13fc>
   14744:	ldr	r0, [r4, #12]
   14748:	bl	13e08 <b64_decode@@Base+0x13fc>
   1474c:	ldr	r5, [pc, #220]	; 14830 <b64_decode@@Base+0x1e24>
   14750:	add	r4, r4, #16
   14754:	add	r6, r9, #12
   14758:	ldr	r3, [r6, #4]!
   1475c:	cmp	r3, #0
   14760:	beq	1479c <b64_decode@@Base+0x1d90>
   14764:	ldr	fp, [r4]
   14768:	mov	r0, r5
   1476c:	sub	sl, fp, #1
   14770:	lsl	r1, fp, #1
   14774:	bl	13e40 <b64_decode@@Base+0x1434>
   14778:	cmp	fp, #0
   1477c:	ldr	fp, [r4, #4]
   14780:	beq	14798 <b64_decode@@Base+0x1d8c>
   14784:	sub	sl, sl, #1
   14788:	ldrd	r0, [fp], #8
   1478c:	bl	13e20 <b64_decode@@Base+0x1414>
   14790:	cmn	sl, #1
   14794:	bne	14784 <b64_decode@@Base+0x1d78>
   14798:	add	r4, r4, #8
   1479c:	add	r5, r5, #131072	; 0x20000
   147a0:	cmp	r5, r8
   147a4:	bne	14758 <b64_decode@@Base+0x1d4c>
   147a8:	ldr	r3, [sp, #8]
   147ac:	cmp	r3, #0
   147b0:	beq	146f0 <b64_decode@@Base+0x1ce4>
   147b4:	ldr	r4, [sp, #12]
   147b8:	mov	r2, #10
   147bc:	mov	r0, r9
   147c0:	ldr	r1, [r4, #4]
   147c4:	bl	12fd0 <b64_decode@@Base+0x5c4>
   147c8:	ldr	r3, [r9, #56]	; 0x38
   147cc:	add	r7, r7, #1
   147d0:	cmp	r3, r7
   147d4:	str	r0, [r4, #4]
   147d8:	bne	14700 <b64_decode@@Base+0x1cf4>
   147dc:	mov	r0, #0
   147e0:	add	sp, sp, #20
   147e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e8:	b	13e08 <b64_decode@@Base+0x13fc>
   147ec:	mov	r3, #0
   147f0:	str	r3, [sp, #8]
   147f4:	b	14728 <b64_decode@@Base+0x1d1c>
   147f8:	ldr	r1, [pc, #52]	; 14834 <b64_decode@@Base+0x1e28>
   147fc:	ldr	r0, [pc, #52]	; 14838 <b64_decode@@Base+0x1e2c>
   14800:	bl	13e40 <b64_decode@@Base+0x1434>
   14804:	ldr	r0, [r9, #8]
   14808:	bl	13e08 <b64_decode@@Base+0x13fc>
   1480c:	cmp	r4, #0
   14810:	beq	1464c <b64_decode@@Base+0x1c40>
   14814:	mov	r0, r4
   14818:	bl	145d4 <b64_decode@@Base+0x1bc8>
   1481c:	b	1464c <b64_decode@@Base+0x1c40>
   14820:	andeq	r2, r1, r0, lsr #32
   14824:	andeq	r1, r1, ip, asr #31
   14828:			; <UNDEFINED> instruction: 0x01b50000
   1482c:			; <UNDEFINED> instruction: 0x00011fbc
   14830:			; <UNDEFINED> instruction: 0x01a10000
   14834:	ldrtcc	r3, [r0], -sl, lsr #10
   14838:	strbvs	r6, [r3, -r1, ror #8]!

0001483c <__gcov_sort_n_vals@@Base>:
   1483c:	cmp	r1, #2
   14840:	bxle	lr
   14844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14848:	sub	lr, r1, #3
   1484c:	mov	ip, #0
   14850:	lsr	lr, lr, #1
   14854:	add	r1, r0, #8
   14858:	add	lr, r0, lr, lsl #4
   1485c:	add	lr, lr, #24
   14860:	ldrd	r4, [r1, #16]
   14864:	ldrd	r6, [r1]
   14868:	ldrd	r8, [r1, #8]
   1486c:	mov	r2, ip
   14870:	cmp	r6, r4
   14874:	sbcs	r3, r7, r5
   14878:	mov	fp, ip
   1487c:	bge	148c4 <__gcov_sort_n_vals@@Base+0x88>
   14880:	add	r3, r1, #8
   14884:	mov	sl, #0
   14888:	b	148a0 <__gcov_sort_n_vals@@Base+0x64>
   1488c:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   14890:	sub	r3, r3, #16
   14894:	cmp	r6, r4
   14898:	sbcs	r6, r7, r5
   1489c:	bge	148c4 <__gcov_sort_n_vals@@Base+0x88>
   148a0:	ldrd	r6, [r3, #-16]
   148a4:	subs	r2, r2, #2
   148a8:	mov	fp, r2
   148ac:	strd	r6, [r3]
   148b0:	ldrd	r6, [r1, sl]
   148b4:	sub	sl, sl, #16
   148b8:	strd	r6, [r3, #8]
   148bc:	mov	r6, r3
   148c0:	bpl	1488c <__gcov_sort_n_vals@@Base+0x50>
   148c4:	add	fp, fp, #2
   148c8:	mov	r3, r0
   148cc:	add	r1, r1, #16
   148d0:	lsl	fp, fp, #3
   148d4:	cmp	lr, r1
   148d8:	strd	r8, [r3, fp]!
   148dc:	add	ip, ip, #2
   148e0:	strd	r4, [r3, #8]
   148e4:	bne	14860 <__gcov_sort_n_vals@@Base+0x24>
   148e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ec:	push	{r4, r5, r6, r7, r8, lr}
   148f0:	ldr	r6, [r0]
   148f4:	ldr	r4, [pc, #76]	; 14948 <__gcov_sort_n_vals@@Base+0x10c>
   148f8:	smull	r2, r3, r4, r6
   148fc:	asr	r4, r6, #31
   14900:	rsb	r4, r4, r3, asr #1
   14904:	add	r4, r4, r4, lsl #3
   14908:	subs	r4, r6, r4
   1490c:	bne	14944 <__gcov_sort_n_vals@@Base+0x108>
   14910:	cmp	r6, #0
   14914:	ldr	r5, [r0, #4]
   14918:	pople	{r4, r5, r6, r7, r8, pc}
   1491c:	add	r5, r5, #8
   14920:	mov	r7, #8
   14924:	mov	r0, r5
   14928:	add	r4, r4, #9
   1492c:	mov	r1, r7
   14930:	bl	1483c <__gcov_sort_n_vals@@Base>
   14934:	cmp	r6, r4
   14938:	add	r5, r5, #72	; 0x48
   1493c:	bgt	14924 <__gcov_sort_n_vals@@Base+0xe8>
   14940:	pop	{r4, r5, r6, r7, r8, pc}
   14944:	bl	110b0 <abort@plt>
   14948:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1494c:	ldr	r3, [r0, #52]	; 0x34
   14950:	cmp	r3, #0
   14954:	bxeq	lr
   14958:	ldr	ip, [r0, #56]	; 0x38
   1495c:	cmp	ip, #0
   14960:	bxeq	lr
   14964:	push	{r4, r5, r6, lr}
   14968:	mov	r5, r0
   1496c:	mov	r4, #0
   14970:	add	r6, r0, #12
   14974:	ldr	r1, [r5, #60]	; 0x3c
   14978:	mov	r2, r6
   1497c:	mov	r3, #0
   14980:	ldr	r0, [r1, r4, lsl #2]
   14984:	add	r0, r0, #16
   14988:	ldr	r1, [r2, #4]!
   1498c:	cmp	r1, #0
   14990:	beq	149a0 <__gcov_sort_n_vals@@Base+0x164>
   14994:	cmp	r3, #9
   14998:	beq	149bc <__gcov_sort_n_vals@@Base+0x180>
   1499c:	add	r0, r0, #8
   149a0:	add	r3, r3, #1
   149a4:	cmp	r3, #10
   149a8:	bne	14988 <__gcov_sort_n_vals@@Base+0x14c>
   149ac:	add	r4, r4, #1
   149b0:	cmp	ip, r4
   149b4:	bne	14974 <__gcov_sort_n_vals@@Base+0x138>
   149b8:	pop	{r4, r5, r6, pc}
   149bc:	bl	148ec <__gcov_sort_n_vals@@Base+0xb0>
   149c0:	ldr	ip, [r5, #56]	; 0x38
   149c4:	add	r4, r4, #1
   149c8:	cmp	ip, r4
   149cc:	bne	14974 <__gcov_sort_n_vals@@Base+0x138>
   149d0:	b	149b8 <__gcov_sort_n_vals@@Base+0x17c>
   149d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   149d8:	sub	sp, sp, #6080	; 0x17c0
   149dc:	ldr	ip, [pc, #388]	; 14b68 <__gcov_sort_n_vals@@Base+0x32c>
   149e0:	sub	sp, sp, #36	; 0x24
   149e4:	add	ip, pc, ip
   149e8:	add	r5, sp, #2016	; 0x7e0
   149ec:	mov	r4, r0
   149f0:	mov	r7, r1
   149f4:	mov	r1, #0
   149f8:	str	r1, [ip, #4]
   149fc:	str	r1, [ip]
   14a00:	mov	r8, r2
   14a04:	mov	r6, r3
   14a08:	str	r1, [r5, #-2000]	; 0xfffff830
   14a0c:	str	r1, [r5, #-1996]	; 0xfffff834
   14a10:	bl	1494c <__gcov_sort_n_vals@@Base+0x110>
   14a14:	mov	r1, r7
   14a18:	ldr	r0, [r4, #12]
   14a1c:	bl	13c84 <b64_decode@@Base+0x1278>
   14a20:	cmn	r0, #1
   14a24:	beq	14aa4 <__gcov_sort_n_vals@@Base+0x268>
   14a28:	bl	13f6c <b64_decode@@Base+0x1560>
   14a2c:	cmp	r0, #0
   14a30:	beq	14ab0 <__gcov_sort_n_vals@@Base+0x274>
   14a34:	ldr	r3, [pc, #304]	; 14b6c <__gcov_sort_n_vals@@Base+0x330>
   14a38:	cmp	r0, r3
   14a3c:	beq	14b08 <__gcov_sort_n_vals@@Base+0x2cc>
   14a40:	ldr	r0, [pc, #296]	; 14b70 <__gcov_sort_n_vals@@Base+0x334>
   14a44:	ldr	r1, [r7]
   14a48:	add	r0, pc, r0
   14a4c:	bl	12f88 <b64_decode@@Base+0x57c>
   14a50:	ldr	r5, [pc, #284]	; 14b74 <__gcov_sort_n_vals@@Base+0x338>
   14a54:	add	r5, pc, r5
   14a58:	ldr	r1, [r5, #4]
   14a5c:	cmp	r1, #0
   14a60:	movne	r6, #10
   14a64:	beq	14a84 <__gcov_sort_n_vals@@Base+0x248>
   14a68:	mov	r2, r6
   14a6c:	mov	r0, r4
   14a70:	bl	12fd0 <b64_decode@@Base+0x5c4>
   14a74:	cmp	r0, #0
   14a78:	mov	r1, r0
   14a7c:	str	r0, [r5, #4]
   14a80:	bne	14a68 <__gcov_sort_n_vals@@Base+0x22c>
   14a84:	bl	13d98 <b64_decode@@Base+0x138c>
   14a88:	cmp	r0, #0
   14a8c:	beq	14aa4 <__gcov_sort_n_vals@@Base+0x268>
   14a90:	blt	14b44 <__gcov_sort_n_vals@@Base+0x308>
   14a94:	ldr	r0, [pc, #220]	; 14b78 <__gcov_sort_n_vals@@Base+0x33c>
   14a98:	add	r0, pc, r0
   14a9c:	ldr	r1, [r7]
   14aa0:	bl	12f88 <b64_decode@@Base+0x57c>
   14aa4:	add	sp, sp, #6080	; 0x17c0
   14aa8:	add	sp, sp, #36	; 0x24
   14aac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ab0:	add	r9, sp, #24
   14ab4:	bl	13b18 <b64_decode@@Base+0x110c>
   14ab8:	ldr	r1, [r5, #-2000]	; 0xfffff830
   14abc:	cmp	r1, #0
   14ac0:	beq	14b50 <__gcov_sort_n_vals@@Base+0x314>
   14ac4:	add	r3, sp, #6144	; 0x1800
   14ac8:	ldr	r0, [r7]
   14acc:	str	r6, [sp, #4]
   14ad0:	ldr	r3, [r3]
   14ad4:	mov	r1, r8
   14ad8:	str	r3, [sp]
   14adc:	mov	r2, r4
   14ae0:	mov	r3, r9
   14ae4:	bl	139dc <b64_decode@@Base+0xfd0>
   14ae8:	cmn	r0, #1
   14aec:	beq	14a50 <__gcov_sort_n_vals@@Base+0x214>
   14af0:	mov	r1, r9
   14af4:	ldr	r3, [r5, #-2000]	; 0xfffff830
   14af8:	ldr	r2, [r5, #-1996]	; 0xfffff834
   14afc:	mov	r0, r4
   14b00:	bl	14628 <b64_decode@@Base+0x1c1c>
   14b04:	b	14a50 <__gcov_sort_n_vals@@Base+0x214>
   14b08:	add	r3, sp, #16
   14b0c:	ldr	r0, [r7]
   14b10:	str	r3, [sp]
   14b14:	add	r3, sp, #6144	; 0x1800
   14b18:	add	r1, sp, #20
   14b1c:	add	r9, sp, #24
   14b20:	str	r1, [sp, #4]
   14b24:	str	r6, [sp, #8]
   14b28:	mov	r2, r9
   14b2c:	ldr	r3, [r3]
   14b30:	mov	r1, r4
   14b34:	bl	142bc <b64_decode@@Base+0x18b0>
   14b38:	cmn	r0, #1
   14b3c:	bne	14ab4 <__gcov_sort_n_vals@@Base+0x278>
   14b40:	b	14a50 <__gcov_sort_n_vals@@Base+0x214>
   14b44:	ldr	r0, [pc, #48]	; 14b7c <__gcov_sort_n_vals@@Base+0x340>
   14b48:	add	r0, pc, r0
   14b4c:	b	14a9c <__gcov_sort_n_vals@@Base+0x260>
   14b50:	ldr	r2, [pc, #40]	; 14b80 <__gcov_sort_n_vals@@Base+0x344>
   14b54:	mov	r0, r9
   14b58:	bl	11044 <memset@plt>
   14b5c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   14b60:	str	r3, [r5, #-2000]	; 0xfffff830
   14b64:	b	14ac4 <__gcov_sort_n_vals@@Base+0x288>
   14b68:	muleq	r1, r4, ip
   14b6c:	strbvs	r6, [r3, -r1, ror #8]!
   14b70:	andeq	r1, r0, r4, asr r1
   14b74:	andeq	r1, r1, r4, lsr #24
   14b78:	andeq	r1, r0, r8, ror #1
   14b7c:	andeq	r1, r0, r8, lsl r0
   14b80:	andeq	r1, r0, r8, asr #15
   14b84:	push	{r4, r5, r6, r7, r8, lr}
   14b88:	sub	sp, sp, #6080	; 0x17c0
   14b8c:	sub	sp, sp, #32
   14b90:	add	r6, sp, #24
   14b94:	add	r2, sp, #12
   14b98:	mov	r8, r1
   14b9c:	mov	r1, r6
   14ba0:	mov	r4, r0
   14ba4:	bl	131e8 <b64_decode@@Base+0x7dc>
   14ba8:	add	r5, sp, #8
   14bac:	mov	r7, r0
   14bb0:	mov	r0, r5
   14bb4:	bl	1336c <b64_decode@@Base+0x960>
   14bb8:	cmp	r4, #0
   14bbc:	beq	14be4 <__gcov_sort_n_vals@@Base+0x3a8>
   14bc0:	mov	r0, r4
   14bc4:	str	r6, [sp]
   14bc8:	mov	r3, r7
   14bcc:	mov	r2, r8
   14bd0:	mov	r1, r5
   14bd4:	bl	149d4 <__gcov_sort_n_vals@@Base+0x198>
   14bd8:	ldr	r4, [r4, #4]
   14bdc:	cmp	r4, #0
   14be0:	bne	14bc0 <__gcov_sort_n_vals@@Base+0x384>
   14be4:	ldr	r0, [sp, #8]
   14be8:	bl	10f24 <free@plt>
   14bec:	add	sp, sp, #6080	; 0x17c0
   14bf0:	add	sp, sp, #32
   14bf4:	pop	{r4, r5, r6, r7, r8, pc}
   14bf8:	ldrb	r1, [r0, #4]
   14bfc:	tst	r1, #1
   14c00:	bxne	lr
   14c04:	push	{r4, lr}
   14c08:	lsr	r1, r1, #1
   14c0c:	mov	r4, r0
   14c10:	and	r1, r1, #1
   14c14:	ldr	r0, [r0]
   14c18:	bl	14b84 <__gcov_sort_n_vals@@Base+0x348>
   14c1c:	ldrb	r3, [r4, #4]
   14c20:	orr	r3, r3, #3
   14c24:	strb	r3, [r4, #4]
   14c28:	pop	{r4, pc}
   14c2c:	push	{r4, r5, r6, lr}
   14c30:	ldr	r4, [pc, #76]	; 14c84 <__gcov_sort_n_vals@@Base+0x448>
   14c34:	ldr	r5, [pc, #76]	; 14c88 <__gcov_sort_n_vals@@Base+0x44c>
   14c38:	add	r4, pc, r4
   14c3c:	mov	r0, r4
   14c40:	bl	14bf8 <__gcov_sort_n_vals@@Base+0x3bc>
   14c44:	ldr	r3, [r4, #8]
   14c48:	add	r5, pc, r5
   14c4c:	cmp	r3, #0
   14c50:	ldrne	r2, [r4, #12]
   14c54:	strne	r2, [r3, #12]
   14c58:	ldr	r2, [pc, #44]	; 14c8c <__gcov_sort_n_vals@@Base+0x450>
   14c5c:	add	r2, pc, r2
   14c60:	ldr	r2, [r2, #12]
   14c64:	cmp	r2, #0
   14c68:	beq	14c74 <__gcov_sort_n_vals@@Base+0x438>
   14c6c:	str	r3, [r2, #8]
   14c70:	pop	{r4, r5, r6, pc}
   14c74:	ldr	r2, [pc, #20]	; 14c90 <__gcov_sort_n_vals@@Base+0x454>
   14c78:	ldr	r2, [r5, r2]
   14c7c:	str	r3, [r2, #4]
   14c80:	pop	{r4, r5, r6, pc}
   14c84:	andeq	r1, r1, r8, asr #20
   14c88:			; <UNDEFINED> instruction: 0x000113b0
   14c8c:	andeq	r1, r1, r4, lsr #20
   14c90:	andeq	r0, r0, r0, asr #1
   14c94:	ldr	r1, [r0]
   14c98:	push	{r4, r5, r6, lr}
   14c9c:	cmp	r1, #0
   14ca0:	ldr	r5, [pc, #168]	; 14d50 <__gcov_sort_n_vals@@Base+0x514>
   14ca4:	add	r5, pc, r5
   14ca8:	popeq	{r4, r5, r6, pc}
   14cac:	ldr	r3, [r0, #56]	; 0x38
   14cb0:	cmp	r3, #0
   14cb4:	popeq	{r4, r5, r6, pc}
   14cb8:	mov	r4, r0
   14cbc:	mov	r2, #0
   14cc0:	add	r0, r0, #12
   14cc4:	bl	13950 <b64_decode@@Base+0xf44>
   14cc8:	cmp	r0, #0
   14ccc:	popeq	{r4, r5, r6, pc}
   14cd0:	ldr	r6, [pc, #124]	; 14d54 <__gcov_sort_n_vals@@Base+0x518>
   14cd4:	add	r6, pc, r6
   14cd8:	ldr	r2, [r6]
   14cdc:	cmp	r2, #0
   14ce0:	beq	14cf8 <__gcov_sort_n_vals@@Base+0x4bc>
   14ce4:	ldr	r3, [pc, #108]	; 14d58 <__gcov_sort_n_vals@@Base+0x51c>
   14ce8:	str	r2, [r4, #4]
   14cec:	add	r3, pc, r3
   14cf0:	str	r4, [r3]
   14cf4:	pop	{r4, r5, r6, pc}
   14cf8:	ldr	r3, [pc, #92]	; 14d5c <__gcov_sort_n_vals@@Base+0x520>
   14cfc:	ldr	r2, [pc, #92]	; 14d60 <__gcov_sort_n_vals@@Base+0x524>
   14d00:	mov	r0, #12
   14d04:	ldr	r5, [r5, r3]
   14d08:	add	r2, pc, r2
   14d0c:	ldr	r1, [r5]
   14d10:	bl	13950 <b64_decode@@Base+0xf44>
   14d14:	cmp	r0, #0
   14d18:	beq	14d38 <__gcov_sort_n_vals@@Base+0x4fc>
   14d1c:	ldr	r3, [r5, #4]
   14d20:	cmp	r3, #0
   14d24:	str	r3, [r6, #8]
   14d28:	strne	r6, [r3, #12]
   14d2c:	ldr	r3, [pc, #48]	; 14d64 <__gcov_sort_n_vals@@Base+0x528>
   14d30:	add	r3, pc, r3
   14d34:	str	r3, [r5, #4]
   14d38:	ldr	r0, [pc, #40]	; 14d68 <__gcov_sort_n_vals@@Base+0x52c>
   14d3c:	add	r0, pc, r0
   14d40:	bl	15024 <__libc_csu_fini@@Base+0x4>
   14d44:	ldr	r3, [pc, #32]	; 14d6c <__gcov_sort_n_vals@@Base+0x530>
   14d48:	ldr	r2, [pc, r3]
   14d4c:	b	14ce4 <__gcov_sort_n_vals@@Base+0x4a8>
   14d50:	andeq	r1, r1, r4, asr r3
   14d54:	andeq	r1, r1, ip, lsr #19
   14d58:	muleq	r1, r4, r9
   14d5c:	andeq	r0, r0, r0, asr #1
   14d60:			; <UNDEFINED> instruction: 0x00000eb8
   14d64:	andeq	r1, r1, r0, asr r9
   14d68:			; <UNDEFINED> instruction: 0xfffffee8
   14d6c:	andeq	r1, r1, r8, lsr r9
   14d70:	cmp	r3, #0
   14d74:	cmpeq	r2, #0
   14d78:	bne	14d9c <__gcov_sort_n_vals@@Base+0x560>
   14d7c:	cmp	r1, #0
   14d80:	movlt	r1, #-2147483648	; 0x80000000
   14d84:	movlt	r0, #0
   14d88:	blt	14d98 <__gcov_sort_n_vals@@Base+0x55c>
   14d8c:	cmpeq	r0, #0
   14d90:	mvnne	r1, #-2147483648	; 0x80000000
   14d94:	mvnne	r0, #0
   14d98:	b	14e44 <__gcov_sort_n_vals@@Base+0x608>
   14d9c:	sub	sp, sp, #8
   14da0:	push	{sp, lr}
   14da4:	cmp	r1, #0
   14da8:	blt	14dc8 <__gcov_sort_n_vals@@Base+0x58c>
   14dac:	cmp	r3, #0
   14db0:	blt	14dfc <__gcov_sort_n_vals@@Base+0x5c0>
   14db4:	bl	14e98 <__gcov_sort_n_vals@@Base+0x65c>
   14db8:	ldr	lr, [sp, #4]
   14dbc:	add	sp, sp, #8
   14dc0:	pop	{r2, r3}
   14dc4:	bx	lr
   14dc8:	rsbs	r0, r0, #0
   14dcc:	sbc	r1, r1, r1, lsl #1
   14dd0:	cmp	r3, #0
   14dd4:	blt	14e20 <__gcov_sort_n_vals@@Base+0x5e4>
   14dd8:	bl	14e98 <__gcov_sort_n_vals@@Base+0x65c>
   14ddc:	ldr	lr, [sp, #4]
   14de0:	add	sp, sp, #8
   14de4:	pop	{r2, r3}
   14de8:	rsbs	r0, r0, #0
   14dec:	sbc	r1, r1, r1, lsl #1
   14df0:	rsbs	r2, r2, #0
   14df4:	sbc	r3, r3, r3, lsl #1
   14df8:	bx	lr
   14dfc:	rsbs	r2, r2, #0
   14e00:	sbc	r3, r3, r3, lsl #1
   14e04:	bl	14e98 <__gcov_sort_n_vals@@Base+0x65c>
   14e08:	ldr	lr, [sp, #4]
   14e0c:	add	sp, sp, #8
   14e10:	pop	{r2, r3}
   14e14:	rsbs	r0, r0, #0
   14e18:	sbc	r1, r1, r1, lsl #1
   14e1c:	bx	lr
   14e20:	rsbs	r2, r2, #0
   14e24:	sbc	r3, r3, r3, lsl #1
   14e28:	bl	14e98 <__gcov_sort_n_vals@@Base+0x65c>
   14e2c:	ldr	lr, [sp, #4]
   14e30:	add	sp, sp, #8
   14e34:	pop	{r2, r3}
   14e38:	rsbs	r2, r2, #0
   14e3c:	sbc	r3, r3, r3, lsl #1
   14e40:	bx	lr
   14e44:	push	{r1, lr}
   14e48:	mov	r0, #8
   14e4c:	bl	10edc <raise@plt>
   14e50:	pop	{r1, pc}
   14e54:	ldr	r3, [pc, #48]	; 14e8c <__gcov_sort_n_vals@@Base+0x650>
   14e58:	ldr	r2, [pc, #48]	; 14e90 <__gcov_sort_n_vals@@Base+0x654>
   14e5c:	and	r3, r3, r0, lsr #1
   14e60:	sub	r0, r0, r3
   14e64:	and	r3, r0, r2
   14e68:	and	r0, r2, r0, lsr #2
   14e6c:	add	r3, r3, r0
   14e70:	ldr	r0, [pc, #28]	; 14e94 <__gcov_sort_n_vals@@Base+0x658>
   14e74:	add	r3, r3, r3, lsr #4
   14e78:	and	r0, r0, r3
   14e7c:	add	r0, r0, r0, lsl #8
   14e80:	add	r0, r0, r0, lsl #16
   14e84:	lsr	r0, r0, #24
   14e88:	bx	lr
   14e8c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   14e90:	teqcc	r3, #-872415232	; 0xcc000000
   14e94:	svceq	0x000f0f0f
   14e98:	cmp	r1, r3
   14e9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ea0:	cmpeq	r0, r2
   14ea4:	mov	r4, r0
   14ea8:	mov	r5, r1
   14eac:	ldr	r9, [sp, #28]
   14eb0:	movcc	r0, #0
   14eb4:	movcc	r1, #0
   14eb8:	bcc	14fb0 <__gcov_sort_n_vals@@Base+0x774>
   14ebc:	cmp	r3, #0
   14ec0:	clzeq	ip, r2
   14ec4:	clzne	ip, r3
   14ec8:	addeq	ip, ip, #32
   14ecc:	cmp	r5, #0
   14ed0:	clzeq	r1, r4
   14ed4:	addeq	r1, r1, #32
   14ed8:	clzne	r1, r5
   14edc:	sub	ip, ip, r1
   14ee0:	sub	lr, ip, #32
   14ee4:	lsl	r7, r3, ip
   14ee8:	rsb	r8, ip, #32
   14eec:	orr	r7, r7, r2, lsl lr
   14ef0:	orr	r7, r7, r2, lsr r8
   14ef4:	lsl	r6, r2, ip
   14ef8:	cmp	r5, r7
   14efc:	cmpeq	r4, r6
   14f00:	movcc	r0, #0
   14f04:	movcc	r1, #0
   14f08:	bcc	14f24 <__gcov_sort_n_vals@@Base+0x6e8>
   14f0c:	mov	r3, #1
   14f10:	subs	r4, r4, r6
   14f14:	lsl	r1, r3, lr
   14f18:	lsl	r0, r3, ip
   14f1c:	orr	r1, r1, r3, lsr r8
   14f20:	sbc	r5, r5, r7
   14f24:	cmp	ip, #0
   14f28:	beq	14fb0 <__gcov_sort_n_vals@@Base+0x774>
   14f2c:	lsrs	r3, r7, #1
   14f30:	rrx	r2, r6
   14f34:	mov	r6, ip
   14f38:	b	14f5c <__gcov_sort_n_vals@@Base+0x720>
   14f3c:	subs	r4, r4, r2
   14f40:	sbc	r5, r5, r3
   14f44:	adds	r4, r4, r4
   14f48:	adc	r5, r5, r5
   14f4c:	adds	r4, r4, #1
   14f50:	adc	r5, r5, #0
   14f54:	subs	r6, r6, #1
   14f58:	beq	14f78 <__gcov_sort_n_vals@@Base+0x73c>
   14f5c:	cmp	r5, r3
   14f60:	cmpeq	r4, r2
   14f64:	bcs	14f3c <__gcov_sort_n_vals@@Base+0x700>
   14f68:	adds	r4, r4, r4
   14f6c:	adc	r5, r5, r5
   14f70:	subs	r6, r6, #1
   14f74:	bne	14f5c <__gcov_sort_n_vals@@Base+0x720>
   14f78:	lsr	r6, r4, ip
   14f7c:	lsr	r7, r5, ip
   14f80:	orr	r6, r6, r5, lsl r8
   14f84:	adds	r2, r0, r4
   14f88:	orr	r6, r6, r5, lsr lr
   14f8c:	adc	r3, r1, r5
   14f90:	lsl	r1, r7, ip
   14f94:	orr	r1, r1, r6, lsl lr
   14f98:	lsl	r0, r6, ip
   14f9c:	orr	r1, r1, r6, lsr r8
   14fa0:	subs	r0, r2, r0
   14fa4:	mov	r4, r6
   14fa8:	mov	r5, r7
   14fac:	sbc	r1, r3, r1
   14fb0:	cmp	r9, #0
   14fb4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   14fb8:	strd	r4, [r9]
   14fbc:	pop	{r4, r5, r6, r7, r8, r9, pc}

00014fc0 <__libc_csu_init@@Base>:
   14fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14fc4:	mov	r7, r0
   14fc8:	ldr	r6, [pc, #72]	; 15018 <__libc_csu_init@@Base+0x58>
   14fcc:	ldr	r5, [pc, #72]	; 1501c <__libc_csu_init@@Base+0x5c>
   14fd0:	add	r6, pc, r6
   14fd4:	add	r5, pc, r5
   14fd8:	sub	r6, r6, r5
   14fdc:	mov	r8, r1
   14fe0:	mov	r9, r2
   14fe4:	bl	10ea4 <fdopen@plt-0x20>
   14fe8:	asrs	r6, r6, #2
   14fec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ff0:	mov	r4, #0
   14ff4:	add	r4, r4, #1
   14ff8:	ldr	r3, [r5], #4
   14ffc:	mov	r2, r9
   15000:	mov	r1, r8
   15004:	mov	r0, r7
   15008:	blx	r3
   1500c:	cmp	r6, r4
   15010:	bne	14ff4 <__libc_csu_init@@Base+0x34>
   15014:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15018:	andeq	r0, r1, r0, lsr pc
   1501c:	andeq	r0, r1, ip, lsl pc

00015020 <__libc_csu_fini@@Base>:
   15020:	bx	lr
   15024:	ldr	r3, [pc, #12]	; 15038 <__libc_csu_fini@@Base+0x18>
   15028:	mov	r1, #0
   1502c:	add	r3, pc, r3
   15030:	ldr	r2, [r3]
   15034:	b	11020 <__cxa_atexit@plt>
   15038:	muleq	r1, r8, r0
   1503c:	mov	r2, r1
   15040:	mov	r1, r0
   15044:	mov	r0, #3
   15048:	b	10fc0 <__fxstat@plt>

Disassembly of section .fini:

0001504c <.fini>:
   1504c:	push	{r3, lr}
   15050:	pop	{r3, pc}
