
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000083c <_init>:
 83c:	push	{r3, lr}
 840:	bl	9d0 <call_weak_fn>
 844:	pop	{r3, pc}

Disassembly of section .plt:

00000848 <.plt>:
 848:	push	{lr}		; (str lr, [sp, #-4]!)
 84c:	ldr	lr, [pc, #4]	; 858 <.plt+0x10>
 850:	add	lr, pc, lr
 854:	ldr	pc, [lr, #8]!
 858:	.word	0x000117a8

0000085c <calloc@plt>:
 85c:	add	ip, pc, #0, 12
 860:	add	ip, ip, #69632	; 0x11000
 864:	ldr	pc, [ip, #1960]!	; 0x7a8

00000868 <rb_current_time@plt>:
 868:	add	ip, pc, #0, 12
 86c:	add	ip, ip, #69632	; 0x11000
 870:	ldr	pc, [ip, #1952]!	; 0x7a0

00000874 <__cxa_finalize@plt>:
 874:	add	ip, pc, #0, 12
 878:	add	ip, ip, #69632	; 0x11000
 87c:	ldr	pc, [ip, #1944]!	; 0x798

00000880 <RSA_public_encrypt@plt>:
 880:	add	ip, pc, #0, 12
 884:	add	ip, ip, #69632	; 0x11000
 888:	ldr	pc, [ip, #1936]!	; 0x790

0000088c <sendto_one@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1928]!	; 0x788

00000898 <free@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1920]!	; 0x780

000008a4 <rb_strcasecmp@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1912]!	; 0x778

000008b0 <memcpy@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1904]!	; 0x770

000008bc <RSA_size@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1896]!	; 0x768

000008c8 <rb_outofmemory@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1888]!	; 0x760

000008d4 <memcmp@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1880]!	; 0x758

000008e0 <sendto_realops_snomask@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1872]!	; 0x750

000008ec <rb_base64_decode@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1864]!	; 0x748

000008f8 <malloc@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1856]!	; 0x740

00000904 <rb_get_random@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1848]!	; 0x738

00000910 <__gmon_start__@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1840]!	; 0x730

0000091c <OPENSSL_init_crypto@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1832]!	; 0x728

00000928 <send_oper_motd@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1824]!	; 0x720

00000934 <sendto_one_numeric@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1816]!	; 0x718

00000940 <strlen@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1808]!	; 0x710

0000094c <SHA1_Update@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1800]!	; 0x708

00000958 <ERR_error_string@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1792]!	; 0x700

00000964 <ilog@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1784]!	; 0x6f8

00000970 <SHA1_Init@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1776]!	; 0x6f0

0000097c <ERR_get_error@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1768]!	; 0x6e8

00000988 <sendto_one_notice@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1760]!	; 0x6e0

00000994 <rb_strlcpy@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1752]!	; 0x6d8

000009a0 <find_oper_conf@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1744]!	; 0x6d0

000009ac <oper_up@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1736]!	; 0x6c8

000009b8 <rb_base64_encode@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1728]!	; 0x6c0

000009c4 <SHA1_Final@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

000009d0 <call_weak_fn>:
     9d0:	ldr	r3, [pc, #20]	; 9ec <call_weak_fn+0x1c>
     9d4:	ldr	r2, [pc, #20]	; 9f0 <call_weak_fn+0x20>
     9d8:	add	r3, pc, r3
     9dc:	ldr	r2, [r3, r2]
     9e0:	cmp	r2, #0
     9e4:	bxeq	lr
     9e8:	b	910 <__gmon_start__@plt>
     9ec:	.word	0x00011620
     9f0:	.word	0x00000090

000009f4 <deregister_tm_clones>:
     9f4:	ldr	r0, [pc, #44]	; a28 <deregister_tm_clones+0x34>
     9f8:	ldr	r3, [pc, #44]	; a2c <deregister_tm_clones+0x38>
     9fc:	add	r0, pc, r0
     a00:	add	r3, pc, r3
     a04:	cmp	r3, r0
     a08:	ldr	r3, [pc, #32]	; a30 <deregister_tm_clones+0x3c>
     a0c:	add	r3, pc, r3
     a10:	bxeq	lr
     a14:	ldr	r2, [pc, #24]	; a34 <deregister_tm_clones+0x40>
     a18:	ldr	r3, [r3, r2]
     a1c:	cmp	r3, #0
     a20:	bxeq	lr
     a24:	bx	r3
     a28:	.word	0x00011714
     a2c:	.word	0x00011710
     a30:	.word	0x000115ec
     a34:	.word	0x0000008c

00000a38 <register_tm_clones>:
     a38:	ldr	r0, [pc, #56]	; a78 <register_tm_clones+0x40>
     a3c:	ldr	r3, [pc, #56]	; a7c <register_tm_clones+0x44>
     a40:	add	r0, pc, r0
     a44:	add	r3, pc, r3
     a48:	sub	r1, r3, r0
     a4c:	ldr	r3, [pc, #44]	; a80 <register_tm_clones+0x48>
     a50:	asr	r1, r1, #2
     a54:	add	r3, pc, r3
     a58:	add	r1, r1, r1, lsr #31
     a5c:	asrs	r1, r1, #1
     a60:	bxeq	lr
     a64:	ldr	r2, [pc, #24]	; a84 <register_tm_clones+0x4c>
     a68:	ldr	r3, [r3, r2]
     a6c:	cmp	r3, #0
     a70:	bxeq	lr
     a74:	bx	r3
     a78:	.word	0x000116d0
     a7c:	.word	0x000116cc
     a80:	.word	0x000115a4
     a84:	.word	0x00000094

00000a88 <__do_global_dtors_aux>:
     a88:	ldr	r3, [pc, #76]	; adc <__do_global_dtors_aux+0x54>
     a8c:	ldr	r2, [pc, #76]	; ae0 <__do_global_dtors_aux+0x58>
     a90:	add	r3, pc, r3
     a94:	add	r2, pc, r2
     a98:	ldrb	r3, [r3]
     a9c:	cmp	r3, #0
     aa0:	bxne	lr
     aa4:	ldr	r3, [pc, #56]	; ae4 <__do_global_dtors_aux+0x5c>
     aa8:	push	{r4, lr}
     aac:	ldr	r3, [r2, r3]
     ab0:	cmp	r3, #0
     ab4:	beq	ac4 <__do_global_dtors_aux+0x3c>
     ab8:	ldr	r3, [pc, #40]	; ae8 <__do_global_dtors_aux+0x60>
     abc:	ldr	r0, [pc, r3]
     ac0:	bl	874 <__cxa_finalize@plt>
     ac4:	bl	9f4 <deregister_tm_clones>
     ac8:	ldr	r3, [pc, #28]	; aec <__do_global_dtors_aux+0x64>
     acc:	mov	r2, #1
     ad0:	add	r3, pc, r3
     ad4:	strb	r2, [r3]
     ad8:	pop	{r4, pc}
     adc:	.word	0x00011680
     ae0:	.word	0x00011564
     ae4:	.word	0x00000088
     ae8:	.word	0x000115dc
     aec:	.word	0x00011640

00000af0 <frame_dummy>:
     af0:	b	a38 <register_tm_clones>

00000af4 <m_challenge>:
     af4:	strd	r4, [sp, #-36]!	; 0xffffffdc
     af8:	mov	r4, r2
     afc:	mov	r2, #0
     b00:	ldr	r3, [r4, #56]	; 0x38
     b04:	strd	r6, [sp, #8]
     b08:	strd	r8, [sp, #16]
     b0c:	ldr	r8, [pc, #2016]	; 12f4 <m_challenge+0x800>
     b10:	strd	sl, [sp, #24]
     b14:	str	lr, [sp, #32]
     b18:	sub	sp, sp, #668	; 0x29c
     b1c:	tst	r3, #4096	; 0x1000
     b20:	ldr	r5, [sp, #704]	; 0x2c0
     b24:	str	r2, [sp, #28]
     b28:	add	r8, pc, r8
     b2c:	bne	e04 <m_challenge+0x310>
     b30:	ldr	r3, [r5, #4]
     b34:	ldr	r2, [r4, #432]	; 0x1b0
     b38:	ldrb	r1, [r3]
     b3c:	cmp	r1, #43	; 0x2b
     b40:	bne	c2c <m_challenge+0x138>
     b44:	ldr	r3, [r2, #284]	; 0x11c
     b48:	cmp	r3, #0
     b4c:	beq	de8 <m_challenge+0x2f4>
     b50:	bl	868 <rb_current_time@plt>
     b54:	ldr	r3, [r4, #432]	; 0x1b0
     b58:	add	r6, r4, #288	; 0x120
     b5c:	add	r9, r4, #152	; 0x98
     b60:	add	r6, r6, #3
     b64:	add	r7, r4, #88	; 0x58
     b68:	add	sl, r4, #163	; 0xa3
     b6c:	ldr	r3, [r3, #304]	; 0x130
     b70:	sub	r0, r0, r3
     b74:	cmp	r0, #180	; 0xb4
     b78:	bgt	eb4 <m_challenge+0x3c0>
     b7c:	ldr	fp, [r5, #4]
     b80:	add	fp, fp, #1
     b84:	mov	r0, fp
     b88:	str	fp, [r5, #4]
     b8c:	bl	940 <strlen@plt>
     b90:	mov	r1, r0
     b94:	add	r2, sp, #28
     b98:	mov	r0, fp
     b9c:	bl	8ec <rb_base64_decode@plt>
     ba0:	ldr	r2, [sp, #28]
     ba4:	mov	r5, r0
     ba8:	cmp	r2, #20
     bac:	bne	10b0 <m_challenge+0x5bc>
     bb0:	ldr	r3, [r4, #432]	; 0x1b0
     bb4:	mov	r1, r0
     bb8:	ldr	r0, [r3, #284]	; 0x11c
     bbc:	bl	8d4 <memcmp@plt>
     bc0:	cmp	r0, #0
     bc4:	beq	1114 <m_challenge+0x620>
     bc8:	ldr	r2, [pc, #1832]	; 12f8 <m_challenge+0x804>
     bcc:	mov	r3, r7
     bd0:	mov	r0, r4
     bd4:	ldr	r1, [pc, #1824]	; 12fc <m_challenge+0x808>
     bd8:	ldr	r2, [r8, r2]
     bdc:	add	r1, pc, r1
     be0:	add	r2, r2, #88	; 0x58
     be4:	bl	88c <sendto_one@plt>
     be8:	ldr	r1, [pc, #1808]	; 1300 <m_challenge+0x80c>
     bec:	mov	r3, r7
     bf0:	mov	r0, #4
     bf4:	ldr	r2, [r4, #24]
     bf8:	add	r1, pc, r1
     bfc:	ldr	r2, [r2, #32]
     c00:	stm	sp, {r9, sl}
     c04:	str	r6, [sp, #8]
     c08:	bl	964 <ilog@plt>
     c0c:	ldr	r3, [pc, #1776]	; 1304 <m_challenge+0x810>
     c10:	ldr	r3, [r8, r3]
     c14:	ldr	r3, [r3, #84]	; 0x54
     c18:	cmp	r3, #0
     c1c:	bne	11b8 <m_challenge+0x6c4>
     c20:	mov	r0, r5
     c24:	bl	898 <free@plt>
     c28:	b	f0c <m_challenge+0x418>
     c2c:	cmp	r2, #0
     c30:	beq	c74 <m_challenge+0x180>
     c34:	ldr	r0, [r2, #284]	; 0x11c
     c38:	cmp	r0, #0
     c3c:	beq	c44 <m_challenge+0x150>
     c40:	bl	898 <free@plt>
     c44:	ldr	r3, [r4, #24]
     c48:	ldr	r0, [r3, #32]
     c4c:	cmp	r0, #0
     c50:	beq	c5c <m_challenge+0x168>
     c54:	bl	898 <free@plt>
     c58:	ldr	r3, [r4, #24]
     c5c:	mov	r2, #0
     c60:	ldr	r1, [r4, #432]	; 0x1b0
     c64:	str	r2, [r1, #284]	; 0x11c
     c68:	str	r2, [r3, #32]
     c6c:	ldr	r3, [r5, #4]
     c70:	str	r2, [r1, #304]	; 0x130
     c74:	add	r6, r4, #288	; 0x120
     c78:	add	sl, r4, #152	; 0x98
     c7c:	add	r6, r6, #3
     c80:	mov	r0, sl
     c84:	mov	r2, r6
     c88:	add	r1, r4, #227	; 0xe3
     c8c:	bl	9a0 <find_oper_conf@plt>
     c90:	subs	r7, r0, #0
     c94:	beq	1244 <m_challenge+0x750>
     c98:	ldr	r9, [r7, #40]	; 0x28
     c9c:	cmp	r9, #0
     ca0:	beq	12bc <m_challenge+0x7c8>
     ca4:	ldr	r3, [r7, #20]
     ca8:	tst	r3, #524288	; 0x80000
     cac:	bne	e30 <m_challenge+0x33c>
     cb0:	ldr	r1, [r7, #16]
     cb4:	cmp	r1, #0
     cb8:	beq	ce0 <m_challenge+0x1ec>
     cbc:	ldr	r0, [r4, #444]	; 0x1bc
     cc0:	cmp	r0, #0
     cc4:	beq	f58 <m_challenge+0x464>
     cc8:	bl	8a4 <rb_strcasecmp@plt>
     ccc:	cmp	r0, #0
     cd0:	bne	f58 <m_challenge+0x464>
     cd4:	ldr	r9, [r7, #40]	; 0x28
     cd8:	cmp	r9, #0
     cdc:	beq	dd8 <m_challenge+0x2e4>
     ce0:	add	r5, sp, #128	; 0x80
     ce4:	mov	r1, #128	; 0x80
     ce8:	ldr	sl, [r4, #432]	; 0x1b0
     cec:	mov	r0, r5
     cf0:	bl	904 <rb_get_random@plt>
     cf4:	cmp	r0, #0
     cf8:	beq	d8c <m_challenge+0x298>
     cfc:	add	r6, sp, #32
     d00:	mov	r0, r6
     d04:	bl	970 <SHA1_Init@plt>
     d08:	mov	r2, #128	; 0x80
     d0c:	mov	r1, r5
     d10:	mov	r0, r6
     d14:	bl	94c <SHA1_Update@plt>
     d18:	mov	r0, #20
     d1c:	bl	8f8 <malloc@plt>
     d20:	mov	r1, r6
     d24:	str	r0, [sl, #284]	; 0x11c
     d28:	bl	9c4 <SHA1_Final@plt>
     d2c:	mov	r0, r9
     d30:	bl	8bc <RSA_size@plt>
     d34:	mov	r1, r0
     d38:	mov	r0, #1
     d3c:	bl	85c <calloc@plt>
     d40:	subs	r6, r0, #0
     d44:	beq	12f0 <m_challenge+0x7fc>
     d48:	mov	r0, #4
     d4c:	mov	r1, r5
     d50:	mov	r3, r9
     d54:	mov	r2, r6
     d58:	str	r0, [sp]
     d5c:	mov	r0, #128	; 0x80
     d60:	bl	880 <RSA_public_encrypt@plt>
     d64:	subs	r1, r0, #0
     d68:	mov	r0, r6
     d6c:	bge	fd0 <m_challenge+0x4dc>
     d70:	bl	898 <free@plt>
     d74:	ldr	r0, [sl, #284]	; 0x11c
     d78:	cmp	r0, #0
     d7c:	beq	d84 <m_challenge+0x290>
     d80:	bl	898 <free@plt>
     d84:	mov	r3, #0
     d88:	str	r3, [sl, #284]	; 0x11c
     d8c:	ldr	r6, [pc, #1396]	; 1308 <m_challenge+0x814>
     d90:	mov	r2, #0
     d94:	mov	r0, #2
     d98:	mov	r1, #0
     d9c:	mov	r5, #100	; 0x64
     da0:	bl	91c <OPENSSL_init_crypto@plt>
     da4:	add	r6, pc, r6
     da8:	b	dcc <m_challenge+0x2d8>
     dac:	mov	r1, #0
     db0:	bl	958 <ERR_error_string@plt>
     db4:	mov	r2, r0
     db8:	mov	r1, r6
     dbc:	mov	r0, #0
     dc0:	bl	964 <ilog@plt>
     dc4:	subs	r5, r5, #1
     dc8:	beq	dd8 <m_challenge+0x2e4>
     dcc:	bl	97c <ERR_get_error@plt>
     dd0:	cmp	r0, #0
     dd4:	bne	dac <m_challenge+0x2b8>
     dd8:	ldr	r1, [pc, #1324]	; 130c <m_challenge+0x818>
     ddc:	mov	r0, r4
     de0:	add	r1, pc, r1
     de4:	bl	988 <sendto_one_notice@plt>
     de8:	add	sp, sp, #668	; 0x29c
     dec:	ldrd	r4, [sp]
     df0:	ldrd	r6, [sp, #8]
     df4:	ldrd	r8, [sp, #16]
     df8:	ldrd	sl, [sp, #24]
     dfc:	add	sp, sp, #32
     e00:	pop	{pc}		; (ldr pc, [sp], #4)
     e04:	ldr	r2, [pc, #1260]	; 12f8 <m_challenge+0x804>
     e08:	mov	r0, r4
     e0c:	add	r3, r4, #88	; 0x58
     e10:	ldr	r1, [pc, #1272]	; 1310 <m_challenge+0x81c>
     e14:	ldr	r2, [r8, r2]
     e18:	add	r1, pc, r1
     e1c:	add	r2, r2, #88	; 0x58
     e20:	bl	88c <sendto_one@plt>
     e24:	mov	r0, r4
     e28:	bl	928 <send_oper_motd@plt>
     e2c:	b	de8 <m_challenge+0x2f4>
     e30:	ldr	r1, [r4, #56]	; 0x38
     e34:	ands	fp, r1, #16384	; 0x4000
     e38:	bne	cb0 <m_challenge+0x1bc>
     e3c:	ldr	r2, [pc, #1232]	; 1314 <m_challenge+0x820>
     e40:	mov	r0, r4
     e44:	movw	r1, #491	; 0x1eb
     e48:	add	r7, r4, #163	; 0xa3
     e4c:	add	r4, r4, #88	; 0x58
     e50:	add	r2, pc, r2
     e54:	bl	934 <sendto_one_numeric@plt>
     e58:	ldr	r1, [pc, #1208]	; 1318 <m_challenge+0x824>
     e5c:	mov	r3, r4
     e60:	mov	r0, #4
     e64:	str	sl, [sp]
     e68:	str	r7, [sp, #4]
     e6c:	str	r6, [sp, #8]
     e70:	ldr	r2, [r5, #4]
     e74:	add	r1, pc, r1
     e78:	bl	964 <ilog@plt>
     e7c:	ldr	r3, [pc, #1152]	; 1304 <m_challenge+0x810>
     e80:	ldr	r3, [r8, r3]
     e84:	ldr	r3, [r3, #84]	; 0x54
     e88:	cmp	r3, #0
     e8c:	beq	de8 <m_challenge+0x2f4>
     e90:	ldr	r2, [pc, #1156]	; 131c <m_challenge+0x828>
     e94:	mov	r3, r4
     e98:	mov	r1, fp
     e9c:	mov	r0, #256	; 0x100
     ea0:	str	sl, [sp]
     ea4:	str	r7, [sp, #4]
     ea8:	add	r2, pc, r2
     eac:	bl	8e0 <sendto_realops_snomask@plt>
     eb0:	b	de8 <m_challenge+0x2f4>
     eb4:	ldr	r2, [pc, #1084]	; 12f8 <m_challenge+0x804>
     eb8:	mov	r3, r7
     ebc:	mov	r0, r4
     ec0:	ldr	r1, [pc, #1112]	; 1320 <m_challenge+0x82c>
     ec4:	ldr	r2, [r8, r2]
     ec8:	add	r1, pc, r1
     ecc:	add	r2, r2, #88	; 0x58
     ed0:	bl	88c <sendto_one@plt>
     ed4:	ldr	r1, [pc, #1096]	; 1324 <m_challenge+0x830>
     ed8:	mov	r3, r7
     edc:	mov	r0, #4
     ee0:	ldr	r2, [r4, #24]
     ee4:	add	r1, pc, r1
     ee8:	ldr	r2, [r2, #32]
     eec:	stm	sp, {r9, sl}
     ef0:	str	r6, [sp, #8]
     ef4:	bl	964 <ilog@plt>
     ef8:	ldr	r3, [pc, #1028]	; 1304 <m_challenge+0x810>
     efc:	ldr	r3, [r8, r3]
     f00:	ldr	r3, [r3, #84]	; 0x54
     f04:	cmp	r3, #0
     f08:	bne	12d0 <m_challenge+0x7dc>
     f0c:	ldr	r3, [r4, #432]	; 0x1b0
     f10:	cmp	r3, #0
     f14:	beq	de8 <m_challenge+0x2f4>
     f18:	ldr	r0, [r3, #284]	; 0x11c
     f1c:	cmp	r0, #0
     f20:	beq	f28 <m_challenge+0x434>
     f24:	bl	898 <free@plt>
     f28:	ldr	r2, [r4, #24]
     f2c:	ldr	r0, [r2, #32]
     f30:	cmp	r0, #0
     f34:	beq	f40 <m_challenge+0x44c>
     f38:	bl	898 <free@plt>
     f3c:	ldr	r2, [r4, #24]
     f40:	mov	r3, #0
     f44:	ldr	r1, [r4, #432]	; 0x1b0
     f48:	str	r3, [r1, #284]	; 0x11c
     f4c:	str	r3, [r2, #32]
     f50:	str	r3, [r1, #304]	; 0x130
     f54:	b	de8 <m_challenge+0x2f4>
     f58:	ldr	r2, [pc, #968]	; 1328 <m_challenge+0x834>
     f5c:	mov	r0, r4
     f60:	movw	r1, #491	; 0x1eb
     f64:	add	r7, r4, #163	; 0xa3
     f68:	add	r4, r4, #88	; 0x58
     f6c:	add	r2, pc, r2
     f70:	bl	934 <sendto_one_numeric@plt>
     f74:	ldr	r1, [pc, #944]	; 132c <m_challenge+0x838>
     f78:	mov	r3, r4
     f7c:	mov	r0, #4
     f80:	str	sl, [sp]
     f84:	str	r7, [sp, #4]
     f88:	str	r6, [sp, #8]
     f8c:	ldr	r2, [r5, #4]
     f90:	add	r1, pc, r1
     f94:	bl	964 <ilog@plt>
     f98:	ldr	r3, [pc, #868]	; 1304 <m_challenge+0x810>
     f9c:	ldr	r3, [r8, r3]
     fa0:	ldr	r3, [r3, #84]	; 0x54
     fa4:	cmp	r3, #0
     fa8:	beq	de8 <m_challenge+0x2f4>
     fac:	ldr	r2, [pc, #892]	; 1330 <m_challenge+0x83c>
     fb0:	mov	r3, r4
     fb4:	mov	r1, #0
     fb8:	mov	r0, #256	; 0x100
     fbc:	str	sl, [sp]
     fc0:	str	r7, [sp, #4]
     fc4:	add	r2, pc, r2
     fc8:	bl	8e0 <sendto_realops_snomask@plt>
     fcc:	b	de8 <m_challenge+0x2f4>
     fd0:	bl	9b8 <rb_base64_encode@plt>
     fd4:	mov	r5, r0
     fd8:	mov	r0, r6
     fdc:	ldr	fp, [pc, #848]	; 1334 <m_challenge+0x840>
     fe0:	add	sl, r4, #88	; 0x58
     fe4:	add	r6, sp, #256	; 0x100
     fe8:	str	r5, [sp, #20]
     fec:	bl	898 <free@plt>
     ff0:	ldr	r9, [r4, #432]	; 0x1b0
     ff4:	bl	868 <rb_current_time@plt>
     ff8:	ldr	r3, [pc, #760]	; 12f8 <m_challenge+0x804>
     ffc:	add	fp, pc, fp
    1000:	str	r0, [r9, #304]	; 0x130
    1004:	ldr	r9, [r8, r3]
    1008:	add	r9, r9, #88	; 0x58
    100c:	b	1014 <m_challenge+0x520>
    1010:	add	r5, r5, #404	; 0x194
    1014:	movw	r2, #405	; 0x195
    1018:	mov	r1, r5
    101c:	mov	r0, r6
    1020:	bl	994 <rb_strlcpy@plt>
    1024:	mov	r8, r0
    1028:	mov	r3, sl
    102c:	str	r6, [sp]
    1030:	mov	r2, r9
    1034:	mov	r1, fp
    1038:	mov	r0, r4
    103c:	bl	88c <sendto_one@plt>
    1040:	movw	r3, #405	; 0x195
    1044:	cmp	r8, r3
    1048:	bhi	1010 <m_challenge+0x51c>
    104c:	ldr	r1, [pc, #740]	; 1338 <m_challenge+0x844>
    1050:	mov	r3, sl
    1054:	mov	r2, r9
    1058:	mov	r0, r4
    105c:	add	r1, pc, r1
    1060:	bl	88c <sendto_one@plt>
    1064:	ldr	r3, [sp, #20]
    1068:	cmp	r3, #0
    106c:	beq	1078 <m_challenge+0x584>
    1070:	mov	r0, r3
    1074:	bl	898 <free@plt>
    1078:	ldr	r5, [r7]
    107c:	ldr	r6, [r4, #24]
    1080:	mov	r0, r5
    1084:	bl	940 <strlen@plt>
    1088:	add	r4, r0, #1
    108c:	mov	r0, r4
    1090:	bl	8f8 <malloc@plt>
    1094:	subs	r7, r0, #0
    1098:	beq	12f0 <m_challenge+0x7fc>
    109c:	mov	r2, r4
    10a0:	mov	r1, r5
    10a4:	bl	8b0 <memcpy@plt>
    10a8:	str	r7, [r6, #32]
    10ac:	b	de8 <m_challenge+0x2f4>
    10b0:	ldr	r2, [pc, #576]	; 12f8 <m_challenge+0x804>
    10b4:	mov	r3, r7
    10b8:	mov	r0, r4
    10bc:	ldr	r1, [pc, #632]	; 133c <m_challenge+0x848>
    10c0:	ldr	r2, [r8, r2]
    10c4:	add	r1, pc, r1
    10c8:	add	r2, r2, #88	; 0x58
    10cc:	bl	88c <sendto_one@plt>
    10d0:	ldr	r1, [pc, #616]	; 1340 <m_challenge+0x84c>
    10d4:	mov	r3, r7
    10d8:	mov	r0, #4
    10dc:	ldr	r2, [r4, #24]
    10e0:	add	r1, pc, r1
    10e4:	ldr	r2, [r2, #32]
    10e8:	stm	sp, {r9, sl}
    10ec:	str	r6, [sp, #8]
    10f0:	bl	964 <ilog@plt>
    10f4:	ldr	r3, [pc, #520]	; 1304 <m_challenge+0x810>
    10f8:	ldr	r3, [r8, r3]
    10fc:	ldr	r3, [r3, #84]	; 0x54
    1100:	cmp	r3, #0
    1104:	bne	11b8 <m_challenge+0x6c4>
    1108:	cmp	r5, #0
    110c:	bne	c20 <m_challenge+0x12c>
    1110:	b	f0c <m_challenge+0x418>
    1114:	mov	r0, r5
    1118:	bl	898 <free@plt>
    111c:	ldr	r3, [r4, #24]
    1120:	mov	r2, r6
    1124:	add	r1, r4, #227	; 0xe3
    1128:	mov	r0, r9
    112c:	ldr	r3, [r3, #32]
    1130:	bl	9a0 <find_oper_conf@plt>
    1134:	subs	r5, r0, #0
    1138:	beq	11d8 <m_challenge+0x6e4>
    113c:	ldr	r3, [r4, #432]	; 0x1b0
    1140:	cmp	r3, #0
    1144:	beq	1184 <m_challenge+0x690>
    1148:	ldr	r0, [r3, #284]	; 0x11c
    114c:	cmp	r0, #0
    1150:	beq	1158 <m_challenge+0x664>
    1154:	bl	898 <free@plt>
    1158:	ldr	r2, [r4, #24]
    115c:	ldr	r0, [r2, #32]
    1160:	cmp	r0, #0
    1164:	beq	1170 <m_challenge+0x67c>
    1168:	bl	898 <free@plt>
    116c:	ldr	r2, [r4, #24]
    1170:	mov	r3, #0
    1174:	ldr	r1, [r4, #432]	; 0x1b0
    1178:	str	r3, [r1, #284]	; 0x11c
    117c:	str	r3, [r2, #32]
    1180:	str	r3, [r1, #304]	; 0x130
    1184:	mov	r1, r5
    1188:	mov	r0, r4
    118c:	bl	9ac <oper_up@plt>
    1190:	ldr	r1, [pc, #428]	; 1344 <m_challenge+0x850>
    1194:	mov	r3, r7
    1198:	mov	r0, #3
    119c:	ldr	r2, [r4, #24]
    11a0:	add	r1, pc, r1
    11a4:	ldr	r2, [r2, #32]
    11a8:	stm	sp, {r9, sl}
    11ac:	str	r6, [sp, #8]
    11b0:	bl	964 <ilog@plt>
    11b4:	b	de8 <m_challenge+0x2f4>
    11b8:	ldr	r2, [pc, #392]	; 1348 <m_challenge+0x854>
    11bc:	mov	r1, #256	; 0x100
    11c0:	mov	r3, r7
    11c4:	mov	r0, r1
    11c8:	stm	sp, {r9, sl}
    11cc:	add	r2, pc, r2
    11d0:	bl	8e0 <sendto_realops_snomask@plt>
    11d4:	b	1108 <m_challenge+0x614>
    11d8:	ldr	r2, [pc, #364]	; 134c <m_challenge+0x858>
    11dc:	movw	r1, #491	; 0x1eb
    11e0:	mov	r0, r4
    11e4:	add	r2, pc, r2
    11e8:	bl	934 <sendto_one_numeric@plt>
    11ec:	ldr	r1, [pc, #348]	; 1350 <m_challenge+0x85c>
    11f0:	mov	r3, r7
    11f4:	mov	r0, #4
    11f8:	ldr	r2, [r4, #24]
    11fc:	add	r1, pc, r1
    1200:	ldr	r2, [r2, #32]
    1204:	stm	sp, {r9, sl}
    1208:	str	r6, [sp, #8]
    120c:	bl	964 <ilog@plt>
    1210:	ldr	r3, [pc, #236]	; 1304 <m_challenge+0x810>
    1214:	ldr	r3, [r8, r3]
    1218:	ldr	r3, [r3, #84]	; 0x54
    121c:	cmp	r3, #0
    1220:	beq	de8 <m_challenge+0x2f4>
    1224:	ldr	r2, [pc, #296]	; 1354 <m_challenge+0x860>
    1228:	mov	r1, #256	; 0x100
    122c:	mov	r3, r7
    1230:	mov	r0, r1
    1234:	stm	sp, {r9, sl}
    1238:	add	r2, pc, r2
    123c:	bl	8e0 <sendto_realops_snomask@plt>
    1240:	b	de8 <m_challenge+0x2f4>
    1244:	ldr	r2, [pc, #268]	; 1358 <m_challenge+0x864>
    1248:	mov	r0, r4
    124c:	movw	r1, #491	; 0x1eb
    1250:	add	r7, r4, #163	; 0xa3
    1254:	add	r4, r4, #88	; 0x58
    1258:	add	r2, pc, r2
    125c:	bl	934 <sendto_one_numeric@plt>
    1260:	ldr	r1, [pc, #244]	; 135c <m_challenge+0x868>
    1264:	mov	r3, r4
    1268:	mov	r0, #4
    126c:	str	sl, [sp]
    1270:	str	r7, [sp, #4]
    1274:	str	r6, [sp, #8]
    1278:	ldr	r2, [r5, #4]
    127c:	add	r1, pc, r1
    1280:	bl	964 <ilog@plt>
    1284:	ldr	r3, [pc, #120]	; 1304 <m_challenge+0x810>
    1288:	ldr	r3, [r8, r3]
    128c:	ldr	r3, [r3, #84]	; 0x54
    1290:	cmp	r3, #0
    1294:	beq	de8 <m_challenge+0x2f4>
    1298:	ldr	r2, [pc, #192]	; 1360 <m_challenge+0x86c>
    129c:	mov	r1, #256	; 0x100
    12a0:	mov	r3, r4
    12a4:	mov	r0, r1
    12a8:	str	sl, [sp]
    12ac:	str	r7, [sp, #4]
    12b0:	add	r2, pc, r2
    12b4:	bl	8e0 <sendto_realops_snomask@plt>
    12b8:	b	de8 <m_challenge+0x2f4>
    12bc:	ldr	r1, [pc, #160]	; 1364 <m_challenge+0x870>
    12c0:	mov	r0, r4
    12c4:	add	r1, pc, r1
    12c8:	bl	988 <sendto_one_notice@plt>
    12cc:	b	de8 <m_challenge+0x2f4>
    12d0:	ldr	r2, [pc, #144]	; 1368 <m_challenge+0x874>
    12d4:	mov	r1, #256	; 0x100
    12d8:	mov	r3, r7
    12dc:	mov	r0, r1
    12e0:	stm	sp, {r9, sl}
    12e4:	add	r2, pc, r2
    12e8:	bl	8e0 <sendto_realops_snomask@plt>
    12ec:	b	f0c <m_challenge+0x418>
    12f0:	bl	8c8 <rb_outofmemory@plt>
    12f4:	.word	0x000114d0
    12f8:	.word	0x00000098
    12fc:	.word	0x00000868
    1300:	.word	0x000008c0
    1304:	.word	0x0000009c
    1308:	.word	0x00000998
    130c:	.word	0x0000093c
    1310:	.word	0x000005a0
    1314:	.word	0x000006bc
    1318:	.word	0x00000790
    131c:	.word	0x0000079c
    1320:	.word	0x0000057c
    1324:	.word	0x00000580
    1328:	.word	0x000005a0
    132c:	.word	0x000006f0
    1330:	.word	0x0000070c
    1334:	.word	0x00000750
    1338:	.word	0x00000700
    133c:	.word	0x00000380
    1340:	.word	0x000003d8
    1344:	.word	0x00000404
    1348:	.word	0x00000318
    134c:	.word	0x00000328
    1350:	.word	0x0000034c
    1354:	.word	0x00000334
    1358:	.word	0x000002b4
    135c:	.word	0x000002cc
    1360:	.word	0x000002bc
    1364:	.word	0x000002fc
    1368:	.word	0x000001ac

Disassembly of section .fini:

0000136c <_fini>:
    136c:	push	{r3, lr}
    1370:	pop	{r3, pc}
