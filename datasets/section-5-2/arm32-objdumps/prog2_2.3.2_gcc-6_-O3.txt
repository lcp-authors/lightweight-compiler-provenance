
../repos/prog2/2.3.2:     file format elf32-littlearm


Disassembly of section .init:

000109e8 <.init>:
   109e8:	push	{r3, lr}
   109ec:	bl	10c50 <_start@@Base+0x3c>
   109f0:	pop	{r3, pc}

Disassembly of section .plt:

000109f4 <calloc@plt-0x14>:
   109f4:	push	{lr}		; (str lr, [sp, #-4]!)
   109f8:	ldr	lr, [pc, #4]	; 10a04 <calloc@plt-0x4>
   109fc:	add	lr, pc, lr
   10a00:	ldr	pc, [lr, #8]!
   10a04:	strdeq	r1, [r1], -ip

00010a08 <calloc@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a14 <raise@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a20 <strcmp@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a2c <printf@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a38 <memmove@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a44 <free@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a50 <fgets@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a5c <time@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a68 <realloc@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a74 <strcat@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a80 <strcpy@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1452]!	; 0x5ac

00010a8c <puts@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1444]!	; 0x5a4

00010a98 <malloc@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #69632	; 0x11000
   10aa0:	ldr	pc, [ip, #1436]!	; 0x59c

00010aa4 <__libc_start_main@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #69632	; 0x11000
   10aac:	ldr	pc, [ip, #1428]!	; 0x594

00010ab0 <__gmon_start__@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #69632	; 0x11000
   10ab8:	ldr	pc, [ip, #1420]!	; 0x58c

00010abc <strlen@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #69632	; 0x11000
   10ac4:	ldr	pc, [ip, #1412]!	; 0x584

00010ac8 <srand@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #69632	; 0x11000
   10ad0:	ldr	pc, [ip, #1404]!	; 0x57c

00010ad4 <rand@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #69632	; 0x11000
   10adc:	ldr	pc, [ip, #1396]!	; 0x574

00010ae0 <__isoc99_scanf@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #69632	; 0x11000
   10ae8:	ldr	pc, [ip, #1388]!	; 0x56c

00010aec <abort@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #69632	; 0x11000
   10af4:	ldr	pc, [ip, #1380]!	; 0x564

Disassembly of section .text:

00010af8 <main@@Base>:
   10af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10afc:	sub	sp, sp, #104	; 0x68
   10b00:	bl	10d7c <vetor_novo@@Base>
   10b04:	mov	r4, #0
   10b08:	ldr	sl, [pc, #232]	; 10bf8 <main@@Base+0x100>
   10b0c:	ldr	r9, [pc, #232]	; 10bfc <main@@Base+0x104>
   10b10:	mov	r8, r4
   10b14:	mov	r7, #100	; 0x64
   10b18:	mov	r6, r0
   10b1c:	add	r5, r4, #1
   10b20:	mov	r1, r5
   10b24:	mov	r0, r9
   10b28:	bl	10a2c <printf@plt>
   10b2c:	ldr	r2, [sl]
   10b30:	mov	r1, r7
   10b34:	add	r0, sp, #4
   10b38:	bl	10a50 <fgets@plt>
   10b3c:	add	r0, sp, #4
   10b40:	bl	10abc <strlen@plt>
   10b44:	add	r3, sp, #104	; 0x68
   10b48:	mov	r2, r4
   10b4c:	add	r1, sp, #4
   10b50:	mov	r4, r5
   10b54:	add	r3, r3, r0
   10b58:	mov	r0, r6
   10b5c:	strb	r8, [r3, #-101]	; 0xffffff9b
   10b60:	bl	10ec4 <vetor_insere@@Base>
   10b64:	cmp	r5, #5
   10b68:	bne	10b1c <main@@Base+0x24>
   10b6c:	mov	r0, r6
   10b70:	bl	10d3c <imprime@@Base>
   10b74:	ldr	r0, [pc, #132]	; 10c00 <main@@Base+0x108>
   10b78:	bl	10a2c <printf@plt>
   10b7c:	add	r1, sp, #4
   10b80:	ldr	r0, [pc, #124]	; 10c04 <main@@Base+0x10c>
   10b84:	bl	10ae0 <__isoc99_scanf@plt>
   10b88:	add	r1, sp, #4
   10b8c:	mov	r0, r6
   10b90:	bl	1102c <vetor_pesquisa@@Base>
   10b94:	mov	r1, r0
   10b98:	mov	r0, r6
   10b9c:	bl	10fa8 <vetor_remove@@Base>
   10ba0:	cmp	r0, #0
   10ba4:	beq	10bec <main@@Base+0xf4>
   10ba8:	ldr	r0, [pc, #88]	; 10c08 <main@@Base+0x110>
   10bac:	bl	10a8c <puts@plt>
   10bb0:	mov	r0, r6
   10bb4:	bl	1108c <vetor_ordena@@Base>
   10bb8:	cmp	r0, #0
   10bbc:	beq	10bc8 <main@@Base+0xd0>
   10bc0:	ldr	r0, [pc, #68]	; 10c0c <main@@Base+0x114>
   10bc4:	bl	10a2c <printf@plt>
   10bc8:	ldr	r0, [pc, #64]	; 10c10 <main@@Base+0x118>
   10bcc:	bl	10a8c <puts@plt>
   10bd0:	mov	r0, r6
   10bd4:	bl	10d3c <imprime@@Base>
   10bd8:	mov	r0, r6
   10bdc:	bl	10da0 <vetor_apaga@@Base>
   10be0:	mov	r0, #0
   10be4:	add	sp, sp, #104	; 0x68
   10be8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bec:	mov	r0, r6
   10bf0:	bl	10d3c <imprime@@Base>
   10bf4:	b	10bb0 <main@@Base+0xb8>
   10bf8:	andeq	r2, r2, r8, rrx
   10bfc:	andeq	r1, r1, ip, ror #10
   10c00:	andeq	r1, r1, r0, lsl #11
   10c04:	andeq	r1, r1, r0, lsr #11
   10c08:	andeq	r1, r1, r4, lsr #11
   10c0c:			; <UNDEFINED> instruction: 0x000115bc
   10c10:	andeq	r1, r1, r0, ror #11

00010c14 <_start@@Base>:
   10c14:	mov	fp, #0
   10c18:	mov	lr, #0
   10c1c:	pop	{r1}		; (ldr r1, [sp], #4)
   10c20:	mov	r2, sp
   10c24:	push	{r2}		; (str r2, [sp, #-4]!)
   10c28:	push	{r0}		; (str r0, [sp, #-4]!)
   10c2c:	ldr	ip, [pc, #16]	; 10c44 <_start@@Base+0x30>
   10c30:	push	{ip}		; (str ip, [sp, #-4]!)
   10c34:	ldr	r0, [pc, #12]	; 10c48 <_start@@Base+0x34>
   10c38:	ldr	r3, [pc, #12]	; 10c4c <_start@@Base+0x38>
   10c3c:	bl	10aa4 <__libc_start_main@plt>
   10c40:	bl	10aec <abort@plt>
   10c44:	andeq	r1, r1, ip, lsr r5
   10c48:	strdeq	r0, [r1], -r8
   10c4c:	ldrdeq	r1, [r1], -ip
   10c50:	ldr	r3, [pc, #20]	; 10c6c <_start@@Base+0x58>
   10c54:	ldr	r2, [pc, #20]	; 10c70 <_start@@Base+0x5c>
   10c58:	add	r3, pc, r3
   10c5c:	ldr	r2, [r3, r2]
   10c60:	cmp	r2, #0
   10c64:	bxeq	lr
   10c68:	b	10ab0 <__gmon_start__@plt>
   10c6c:	andeq	r1, r1, r0, lsr #7
   10c70:	andeq	r0, r0, ip, asr r0
   10c74:	ldr	r3, [pc, #28]	; 10c98 <_start@@Base+0x84>
   10c78:	ldr	r0, [pc, #28]	; 10c9c <_start@@Base+0x88>
   10c7c:	sub	r3, r3, r0
   10c80:	cmp	r3, #6
   10c84:	bxls	lr
   10c88:	ldr	r3, [pc, #16]	; 10ca0 <_start@@Base+0x8c>
   10c8c:	cmp	r3, #0
   10c90:	bxeq	lr
   10c94:	bx	r3
   10c98:	andeq	r2, r2, fp, rrx
   10c9c:	andeq	r2, r2, r8, rrx
   10ca0:	andeq	r0, r0, r0
   10ca4:	ldr	r1, [pc, #36]	; 10cd0 <_start@@Base+0xbc>
   10ca8:	ldr	r0, [pc, #36]	; 10cd4 <_start@@Base+0xc0>
   10cac:	sub	r1, r1, r0
   10cb0:	asr	r1, r1, #2
   10cb4:	add	r1, r1, r1, lsr #31
   10cb8:	asrs	r1, r1, #1
   10cbc:	bxeq	lr
   10cc0:	ldr	r3, [pc, #16]	; 10cd8 <_start@@Base+0xc4>
   10cc4:	cmp	r3, #0
   10cc8:	bxeq	lr
   10ccc:	bx	r3
   10cd0:	andeq	r2, r2, r8, rrx
   10cd4:	andeq	r2, r2, r8, rrx
   10cd8:	andeq	r0, r0, r0
   10cdc:	push	{r4, lr}
   10ce0:	ldr	r4, [pc, #24]	; 10d00 <_start@@Base+0xec>
   10ce4:	ldrb	r3, [r4]
   10ce8:	cmp	r3, #0
   10cec:	popne	{r4, pc}
   10cf0:	bl	10c74 <_start@@Base+0x60>
   10cf4:	mov	r3, #1
   10cf8:	strb	r3, [r4]
   10cfc:	pop	{r4, pc}
   10d00:	andeq	r2, r2, ip, rrx
   10d04:	ldr	r0, [pc, #40]	; 10d34 <_start@@Base+0x120>
   10d08:	ldr	r3, [r0]
   10d0c:	cmp	r3, #0
   10d10:	bne	10d18 <_start@@Base+0x104>
   10d14:	b	10ca4 <_start@@Base+0x90>
   10d18:	ldr	r3, [pc, #24]	; 10d38 <_start@@Base+0x124>
   10d1c:	cmp	r3, #0
   10d20:	beq	10d14 <_start@@Base+0x100>
   10d24:	push	{r4, lr}
   10d28:	blx	r3
   10d2c:	pop	{r4, lr}
   10d30:	b	10ca4 <_start@@Base+0x90>
   10d34:	andeq	r1, r2, r4, lsl pc
   10d38:	andeq	r0, r0, r0

00010d3c <imprime@@Base>:
   10d3c:	push	{r4, r5, r6, lr}
   10d40:	mov	r1, #0
   10d44:	ldr	r6, [pc, #44]	; 10d78 <imprime@@Base+0x3c>
   10d48:	mov	r5, r0
   10d4c:	mov	r0, r5
   10d50:	add	r4, r1, #1
   10d54:	bl	10e90 <vetor_elemento@@Base>
   10d58:	mov	r1, r4
   10d5c:	mov	r2, r0
   10d60:	mov	r0, r6
   10d64:	bl	10a2c <printf@plt>
   10d68:	cmp	r4, #5
   10d6c:	mov	r1, r4
   10d70:	bne	10d4c <imprime@@Base+0x10>
   10d74:	pop	{r4, r5, r6, pc}
   10d78:	andeq	r1, r1, ip, asr #10

00010d7c <vetor_novo@@Base>:
   10d7c:	push	{r4, lr}
   10d80:	mov	r0, #12
   10d84:	bl	10a98 <malloc@plt>
   10d88:	cmp	r0, #0
   10d8c:	movne	r3, #0
   10d90:	strne	r3, [r0]
   10d94:	strne	r3, [r0, #4]
   10d98:	strne	r3, [r0, #8]
   10d9c:	pop	{r4, pc}

00010da0 <vetor_apaga@@Base>:
   10da0:	push	{r4, r5, r6, lr}
   10da4:	subs	r5, r0, #0
   10da8:	popeq	{r4, r5, r6, pc}
   10dac:	ldr	r3, [r5]
   10db0:	cmp	r3, #0
   10db4:	movgt	r4, #0
   10db8:	ble	10dd8 <vetor_apaga@@Base+0x38>
   10dbc:	ldr	r3, [r5, #8]
   10dc0:	ldr	r0, [r3, r4, lsl #2]
   10dc4:	bl	10a44 <free@plt>
   10dc8:	ldr	r3, [r5]
   10dcc:	add	r4, r4, #1
   10dd0:	cmp	r3, r4
   10dd4:	bgt	10dbc <vetor_apaga@@Base+0x1c>
   10dd8:	ldr	r0, [r5, #8]
   10ddc:	bl	10a44 <free@plt>
   10de0:	mov	r0, r5
   10de4:	pop	{r4, r5, r6, lr}
   10de8:	b	10a44 <free@plt>

00010dec <vetor_atribui@@Base>:
   10dec:	clz	r3, r0
   10df0:	lsr	r3, r3, #5
   10df4:	orrs	r3, r3, r1, lsr #31
   10df8:	bne	10e78 <vetor_atribui@@Base+0x8c>
   10dfc:	ldr	r3, [r0]
   10e00:	cmp	r1, r3
   10e04:	bge	10e78 <vetor_atribui@@Base+0x8c>
   10e08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e0c:	mov	r5, r0
   10e10:	mov	r0, r2
   10e14:	mov	r4, r1
   10e18:	mov	r6, r2
   10e1c:	bl	10abc <strlen@plt>
   10e20:	ldr	r8, [r5, #8]
   10e24:	ldr	r7, [r8, r4, lsl #2]
   10e28:	mov	r9, r0
   10e2c:	mov	r0, r7
   10e30:	bl	10abc <strlen@plt>
   10e34:	cmp	r9, r0
   10e38:	bls	10e5c <vetor_atribui@@Base+0x70>
   10e3c:	mov	r0, r7
   10e40:	add	r1, r9, #1
   10e44:	bl	10a68 <realloc@plt>
   10e48:	ldr	r3, [r5, #8]
   10e4c:	str	r0, [r8, r4, lsl #2]
   10e50:	ldr	r7, [r3, r4, lsl #2]
   10e54:	cmp	r7, #0
   10e58:	beq	10e70 <vetor_atribui@@Base+0x84>
   10e5c:	mov	r1, r6
   10e60:	mov	r0, r7
   10e64:	bl	10a80 <strcpy@plt>
   10e68:	mov	r0, r4
   10e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e70:	mvn	r0, #0
   10e74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e78:	mvn	r0, #0
   10e7c:	bx	lr

00010e80 <vetor_tamanho@@Base>:
   10e80:	cmp	r0, #0
   10e84:	ldrne	r0, [r0]
   10e88:	mvneq	r0, #0
   10e8c:	bx	lr

00010e90 <vetor_elemento@@Base>:
   10e90:	lsr	r3, r1, #31
   10e94:	cmp	r0, #0
   10e98:	orreq	r3, r3, #1
   10e9c:	cmp	r3, #0
   10ea0:	bne	10ebc <vetor_elemento@@Base+0x2c>
   10ea4:	ldr	r2, [r0]
   10ea8:	cmp	r1, r2
   10eac:	bge	10ebc <vetor_elemento@@Base+0x2c>
   10eb0:	ldr	r3, [r0, #8]
   10eb4:	ldr	r0, [r3, r1, lsl #2]
   10eb8:	bx	lr
   10ebc:	mov	r0, #0
   10ec0:	bx	lr

00010ec4 <vetor_insere@@Base>:
   10ec4:	clz	r3, r0
   10ec8:	lsr	r3, r3, #5
   10ecc:	orrs	r3, r3, r2, lsr #31
   10ed0:	bne	10fa0 <vetor_insere@@Base+0xdc>
   10ed4:	push	{r4, r5, r6, r7, r8, lr}
   10ed8:	ldr	r5, [r0]
   10edc:	cmp	r2, r5
   10ee0:	bgt	10f98 <vetor_insere@@Base+0xd4>
   10ee4:	ldr	r3, [r0, #4]
   10ee8:	mov	r6, r0
   10eec:	cmp	r5, r3
   10ef0:	mov	r7, r1
   10ef4:	mov	r4, r2
   10ef8:	beq	10f64 <vetor_insere@@Base+0xa0>
   10efc:	ldr	r8, [r0, #8]
   10f00:	cmp	r4, r5
   10f04:	bge	10f2c <vetor_insere@@Base+0x68>
   10f08:	sub	r2, r5, r4
   10f0c:	lsl	r1, r5, #2
   10f10:	lsl	r2, r2, #2
   10f14:	add	r0, r1, #4
   10f18:	sub	r0, r0, r2
   10f1c:	sub	r1, r1, r2
   10f20:	add	r1, r8, r1
   10f24:	add	r0, r8, r0
   10f28:	bl	10a38 <memmove@plt>
   10f2c:	mov	r0, r7
   10f30:	bl	10abc <strlen@plt>
   10f34:	mov	r1, #1
   10f38:	add	r0, r0, r1
   10f3c:	bl	10a08 <calloc@plt>
   10f40:	cmp	r0, #0
   10f44:	str	r0, [r8, r4, lsl #2]
   10f48:	beq	10f98 <vetor_insere@@Base+0xd4>
   10f4c:	mov	r1, r7
   10f50:	add	r5, r5, #1
   10f54:	bl	10a80 <strcpy@plt>
   10f58:	mov	r0, r4
   10f5c:	str	r5, [r6]
   10f60:	pop	{r4, r5, r6, r7, r8, pc}
   10f64:	cmp	r5, #0
   10f68:	lslne	r3, r5, #1
   10f6c:	moveq	r3, #1
   10f70:	lslne	r1, r5, #3
   10f74:	moveq	r1, #4
   10f78:	str	r3, [r0, #4]
   10f7c:	ldr	r0, [r0, #8]
   10f80:	bl	10a68 <realloc@plt>
   10f84:	cmp	r0, #0
   10f88:	str	r0, [r6, #8]
   10f8c:	ldrne	r5, [r6]
   10f90:	movne	r8, r0
   10f94:	bne	10f00 <vetor_insere@@Base+0x3c>
   10f98:	mvn	r0, #0
   10f9c:	pop	{r4, r5, r6, r7, r8, pc}
   10fa0:	mvn	r0, #0
   10fa4:	bx	lr

00010fa8 <vetor_remove@@Base>:
   10fa8:	clz	r3, r0
   10fac:	lsr	r3, r3, #5
   10fb0:	orrs	r3, r3, r1, lsr #31
   10fb4:	bne	11024 <vetor_remove@@Base+0x7c>
   10fb8:	ldr	r3, [r0]
   10fbc:	cmp	r1, r3
   10fc0:	bge	11024 <vetor_remove@@Base+0x7c>
   10fc4:	ldr	r3, [r0, #8]
   10fc8:	push	{r4, r5, r6, r7, r8, lr}
   10fcc:	mov	r5, r0
   10fd0:	ldr	r0, [r3, r1, lsl #2]
   10fd4:	mov	r4, r1
   10fd8:	lsl	r7, r1, #2
   10fdc:	bl	10a44 <free@plt>
   10fe0:	ldr	r6, [r5]
   10fe4:	add	r3, r4, #1
   10fe8:	cmp	r3, r6
   10fec:	bge	11014 <vetor_remove@@Base+0x6c>
   10ff0:	mvn	r2, #-1073741824	; 0xc0000000
   10ff4:	sub	r2, r2, r4
   10ff8:	ldr	r0, [r5, #8]
   10ffc:	add	r2, r2, r6
   11000:	add	r1, r7, #4
   11004:	add	r1, r0, r1
   11008:	lsl	r2, r2, #2
   1100c:	add	r0, r0, r7
   11010:	bl	10a38 <memmove@plt>
   11014:	sub	r6, r6, #1
   11018:	str	r6, [r5]
   1101c:	mov	r0, #0
   11020:	pop	{r4, r5, r6, r7, r8, pc}
   11024:	mvn	r0, #0
   11028:	bx	lr

0001102c <vetor_pesquisa@@Base>:
   1102c:	cmp	r0, #0
   11030:	push	{r4, r5, r6, r7, r8, lr}
   11034:	beq	11080 <vetor_pesquisa@@Base+0x54>
   11038:	ldr	r7, [r0]
   1103c:	cmp	r7, #0
   11040:	ble	11080 <vetor_pesquisa@@Base+0x54>
   11044:	ldr	r5, [r0, #8]
   11048:	mov	r6, r1
   1104c:	mov	r4, #0
   11050:	sub	r5, r5, #4
   11054:	b	11064 <vetor_pesquisa@@Base+0x38>
   11058:	add	r4, r4, #1
   1105c:	cmp	r4, r7
   11060:	beq	11080 <vetor_pesquisa@@Base+0x54>
   11064:	mov	r1, r6
   11068:	ldr	r0, [r5, #4]!
   1106c:	bl	10a20 <strcmp@plt>
   11070:	cmp	r0, #0
   11074:	bne	11058 <vetor_pesquisa@@Base+0x2c>
   11078:	mov	r0, r4
   1107c:	pop	{r4, r5, r6, r7, r8, pc}
   11080:	mvn	r4, #0
   11084:	mov	r0, r4
   11088:	pop	{r4, r5, r6, r7, r8, pc}

0001108c <vetor_ordena@@Base>:
   1108c:	cmp	r0, #0
   11090:	beq	11108 <vetor_ordena@@Base+0x7c>
   11094:	ldr	r3, [r0]
   11098:	cmp	r3, #1
   1109c:	ble	11100 <vetor_ordena@@Base+0x74>
   110a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   110a4:	sub	r3, r3, #-1073741823	; 0xc0000001
   110a8:	ldr	sl, [r0, #8]
   110ac:	mov	r8, #1
   110b0:	mov	r7, sl
   110b4:	add	r9, sl, r3, lsl #2
   110b8:	ldr	r6, [r7, #4]!
   110bc:	mov	r5, r8
   110c0:	mov	r4, r7
   110c4:	ldr	r1, [r4, #-4]
   110c8:	mov	r0, r6
   110cc:	bl	10a20 <strcmp@plt>
   110d0:	cmp	r0, #0
   110d4:	bge	110e8 <vetor_ordena@@Base+0x5c>
   110d8:	ldr	r3, [r4, #-4]!
   110dc:	subs	r5, r5, #1
   110e0:	str	r3, [r4, #4]
   110e4:	bne	110c4 <vetor_ordena@@Base+0x38>
   110e8:	cmp	r9, r7
   110ec:	str	r6, [sl, r5, lsl #2]
   110f0:	add	r8, r8, #1
   110f4:	bne	110b8 <vetor_ordena@@Base+0x2c>
   110f8:	mov	r0, #0
   110fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11100:	mov	r0, #0
   11104:	bx	lr
   11108:	mvn	r0, #0
   1110c:	bx	lr

00011110 <vetor_concatena@@Base>:
   11110:	cmp	r1, #0
   11114:	cmpne	r0, #0
   11118:	push	{r4, r5, r6, r7, r8, lr}
   1111c:	moveq	r7, #1
   11120:	movne	r7, #0
   11124:	beq	1119c <vetor_concatena@@Base+0x8c>
   11128:	mov	r5, r0
   1112c:	mov	r0, #12
   11130:	mov	r6, r1
   11134:	bl	10a98 <malloc@plt>
   11138:	subs	r4, r0, #0
   1113c:	beq	11188 <vetor_concatena@@Base+0x78>
   11140:	ldm	r5, {r2, r3, ip}
   11144:	ldr	r1, [r6]
   11148:	ldr	lr, [r6, #4]
   1114c:	str	r7, [r4]
   11150:	add	r0, r2, r1, lsl #2
   11154:	add	r3, r3, lr
   11158:	str	r0, [r4, #8]
   1115c:	ldr	r0, [r2, r1, lsl #2]
   11160:	ldr	r1, [ip]
   11164:	str	r3, [r4, #4]
   11168:	bl	10a80 <strcpy@plt>
   1116c:	ldr	r2, [r6, #8]
   11170:	ldr	r3, [r4, #8]
   11174:	ldr	r1, [r2]
   11178:	ldr	r0, [r3]
   1117c:	bl	10a74 <strcat@plt>
   11180:	mov	r0, r4
   11184:	pop	{r4, r5, r6, r7, r8, pc}
   11188:	ldr	r2, [r6]
   1118c:	ldr	r3, [r5]
   11190:	add	r3, r3, r2, lsl #2
   11194:	str	r3, [r4, #8]
   11198:	udf	#0
   1119c:	mov	r4, #0
   111a0:	mov	r0, r4
   111a4:	pop	{r4, r5, r6, r7, r8, pc}

000111a8 <vetor_inverte@@Base>:
   111a8:	cmp	r0, #0
   111ac:	beq	11208 <vetor_inverte@@Base+0x60>
   111b0:	ldr	ip, [r0]
   111b4:	cmp	ip, #0
   111b8:	ble	11208 <vetor_inverte@@Base+0x60>
   111bc:	ldr	r2, [r0, #8]
   111c0:	mov	r3, ip
   111c4:	sub	r0, r2, #4
   111c8:	mov	r1, #0
   111cc:	add	r2, r2, ip, lsl #2
   111d0:	push	{r4, r5, lr}
   111d4:	sub	r3, r3, #1
   111d8:	cmp	ip, r3
   111dc:	ldr	lr, [r0, #4]
   111e0:	ldr	r4, [r2]
   111e4:	add	r1, r1, #1
   111e8:	movlt	r5, ip
   111ec:	movge	r5, r3
   111f0:	cmp	r1, r5
   111f4:	str	r4, [r0, #4]!
   111f8:	str	lr, [r2], #-4
   111fc:	blt	111d4 <vetor_inverte@@Base+0x2c>
   11200:	mov	r0, #0
   11204:	pop	{r4, r5, pc}
   11208:	mov	r0, #0
   1120c:	bx	lr

00011210 <vetor_baralha@@Base>:
   11210:	push	{r4, r5, r6, r7, r8, lr}
   11214:	sub	sp, sp, #8
   11218:	ldr	r7, [r0]
   1121c:	mov	r0, #12
   11220:	bl	10a98 <malloc@plt>
   11224:	subs	r6, r0, #0
   11228:	movne	r3, #0
   1122c:	strne	r3, [r6]
   11230:	strne	r3, [r6, #4]
   11234:	strne	r3, [r6, #8]
   11238:	add	r0, sp, #4
   1123c:	bl	10a5c <time@plt>
   11240:	bl	10ac8 <srand@plt>
   11244:	cmp	r7, #0
   11248:	ble	11280 <vetor_baralha@@Base+0x70>
   1124c:	add	r8, r7, #1
   11250:	mov	r4, #0
   11254:	bl	10ad4 <rand@plt>
   11258:	mov	r1, r8
   1125c:	bl	114ac <vetor_baralha@@Base+0x29c>
   11260:	ldr	r5, [r6, #8]
   11264:	ldr	r3, [r5, r4, lsl #2]
   11268:	ldr	r2, [r5, r1, lsl #2]
   1126c:	str	r2, [r5, r4, lsl #2]
   11270:	add	r4, r4, #1
   11274:	cmp	r7, r4
   11278:	str	r3, [r5, r1, lsl #2]
   1127c:	bne	11254 <vetor_baralha@@Base+0x44>
   11280:	mov	r0, r6
   11284:	add	sp, sp, #8
   11288:	pop	{r4, r5, r6, r7, r8, pc}
   1128c:	cmp	r1, #0
   11290:	beq	1149c <vetor_baralha@@Base+0x28c>
   11294:	eor	ip, r0, r1
   11298:	rsbmi	r1, r1, #0
   1129c:	subs	r2, r1, #1
   112a0:	beq	11468 <vetor_baralha@@Base+0x258>
   112a4:	movs	r3, r0
   112a8:	rsbmi	r3, r0, #0
   112ac:	cmp	r3, r1
   112b0:	bls	11474 <vetor_baralha@@Base+0x264>
   112b4:	tst	r1, r2
   112b8:	beq	11484 <vetor_baralha@@Base+0x274>
   112bc:	clz	r2, r3
   112c0:	clz	r0, r1
   112c4:	sub	r2, r0, r2
   112c8:	rsbs	r2, r2, #31
   112cc:	addne	r2, r2, r2, lsl #1
   112d0:	mov	r0, #0
   112d4:	addne	pc, pc, r2, lsl #2
   112d8:	nop			; (mov r0, r0)
   112dc:	cmp	r3, r1, lsl #31
   112e0:	adc	r0, r0, r0
   112e4:	subcs	r3, r3, r1, lsl #31
   112e8:	cmp	r3, r1, lsl #30
   112ec:	adc	r0, r0, r0
   112f0:	subcs	r3, r3, r1, lsl #30
   112f4:	cmp	r3, r1, lsl #29
   112f8:	adc	r0, r0, r0
   112fc:	subcs	r3, r3, r1, lsl #29
   11300:	cmp	r3, r1, lsl #28
   11304:	adc	r0, r0, r0
   11308:	subcs	r3, r3, r1, lsl #28
   1130c:	cmp	r3, r1, lsl #27
   11310:	adc	r0, r0, r0
   11314:	subcs	r3, r3, r1, lsl #27
   11318:	cmp	r3, r1, lsl #26
   1131c:	adc	r0, r0, r0
   11320:	subcs	r3, r3, r1, lsl #26
   11324:	cmp	r3, r1, lsl #25
   11328:	adc	r0, r0, r0
   1132c:	subcs	r3, r3, r1, lsl #25
   11330:	cmp	r3, r1, lsl #24
   11334:	adc	r0, r0, r0
   11338:	subcs	r3, r3, r1, lsl #24
   1133c:	cmp	r3, r1, lsl #23
   11340:	adc	r0, r0, r0
   11344:	subcs	r3, r3, r1, lsl #23
   11348:	cmp	r3, r1, lsl #22
   1134c:	adc	r0, r0, r0
   11350:	subcs	r3, r3, r1, lsl #22
   11354:	cmp	r3, r1, lsl #21
   11358:	adc	r0, r0, r0
   1135c:	subcs	r3, r3, r1, lsl #21
   11360:	cmp	r3, r1, lsl #20
   11364:	adc	r0, r0, r0
   11368:	subcs	r3, r3, r1, lsl #20
   1136c:	cmp	r3, r1, lsl #19
   11370:	adc	r0, r0, r0
   11374:	subcs	r3, r3, r1, lsl #19
   11378:	cmp	r3, r1, lsl #18
   1137c:	adc	r0, r0, r0
   11380:	subcs	r3, r3, r1, lsl #18
   11384:	cmp	r3, r1, lsl #17
   11388:	adc	r0, r0, r0
   1138c:	subcs	r3, r3, r1, lsl #17
   11390:	cmp	r3, r1, lsl #16
   11394:	adc	r0, r0, r0
   11398:	subcs	r3, r3, r1, lsl #16
   1139c:	cmp	r3, r1, lsl #15
   113a0:	adc	r0, r0, r0
   113a4:	subcs	r3, r3, r1, lsl #15
   113a8:	cmp	r3, r1, lsl #14
   113ac:	adc	r0, r0, r0
   113b0:	subcs	r3, r3, r1, lsl #14
   113b4:	cmp	r3, r1, lsl #13
   113b8:	adc	r0, r0, r0
   113bc:	subcs	r3, r3, r1, lsl #13
   113c0:	cmp	r3, r1, lsl #12
   113c4:	adc	r0, r0, r0
   113c8:	subcs	r3, r3, r1, lsl #12
   113cc:	cmp	r3, r1, lsl #11
   113d0:	adc	r0, r0, r0
   113d4:	subcs	r3, r3, r1, lsl #11
   113d8:	cmp	r3, r1, lsl #10
   113dc:	adc	r0, r0, r0
   113e0:	subcs	r3, r3, r1, lsl #10
   113e4:	cmp	r3, r1, lsl #9
   113e8:	adc	r0, r0, r0
   113ec:	subcs	r3, r3, r1, lsl #9
   113f0:	cmp	r3, r1, lsl #8
   113f4:	adc	r0, r0, r0
   113f8:	subcs	r3, r3, r1, lsl #8
   113fc:	cmp	r3, r1, lsl #7
   11400:	adc	r0, r0, r0
   11404:	subcs	r3, r3, r1, lsl #7
   11408:	cmp	r3, r1, lsl #6
   1140c:	adc	r0, r0, r0
   11410:	subcs	r3, r3, r1, lsl #6
   11414:	cmp	r3, r1, lsl #5
   11418:	adc	r0, r0, r0
   1141c:	subcs	r3, r3, r1, lsl #5
   11420:	cmp	r3, r1, lsl #4
   11424:	adc	r0, r0, r0
   11428:	subcs	r3, r3, r1, lsl #4
   1142c:	cmp	r3, r1, lsl #3
   11430:	adc	r0, r0, r0
   11434:	subcs	r3, r3, r1, lsl #3
   11438:	cmp	r3, r1, lsl #2
   1143c:	adc	r0, r0, r0
   11440:	subcs	r3, r3, r1, lsl #2
   11444:	cmp	r3, r1, lsl #1
   11448:	adc	r0, r0, r0
   1144c:	subcs	r3, r3, r1, lsl #1
   11450:	cmp	r3, r1
   11454:	adc	r0, r0, r0
   11458:	subcs	r3, r3, r1
   1145c:	cmp	ip, #0
   11460:	rsbmi	r0, r0, #0
   11464:	bx	lr
   11468:	teq	ip, r0
   1146c:	rsbmi	r0, r0, #0
   11470:	bx	lr
   11474:	movcc	r0, #0
   11478:	asreq	r0, ip, #31
   1147c:	orreq	r0, r0, #1
   11480:	bx	lr
   11484:	clz	r2, r1
   11488:	rsb	r2, r2, #31
   1148c:	cmp	ip, #0
   11490:	lsr	r0, r3, r2
   11494:	rsbmi	r0, r0, #0
   11498:	bx	lr
   1149c:	cmp	r0, #0
   114a0:	mvngt	r0, #-2147483648	; 0x80000000
   114a4:	movlt	r0, #-2147483648	; 0x80000000
   114a8:	b	114cc <vetor_baralha@@Base+0x2bc>
   114ac:	cmp	r1, #0
   114b0:	beq	1149c <vetor_baralha@@Base+0x28c>
   114b4:	push	{r0, r1, lr}
   114b8:	bl	11294 <vetor_baralha@@Base+0x84>
   114bc:	pop	{r1, r2, lr}
   114c0:	mul	r3, r2, r0
   114c4:	sub	r1, r1, r3
   114c8:	bx	lr
   114cc:	push	{r1, lr}
   114d0:	mov	r0, #8
   114d4:	bl	10a14 <raise@plt>
   114d8:	pop	{r1, pc}

000114dc <__libc_csu_init@@Base>:
   114dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   114e0:	mov	r7, r0
   114e4:	ldr	r6, [pc, #72]	; 11534 <__libc_csu_init@@Base+0x58>
   114e8:	ldr	r5, [pc, #72]	; 11538 <__libc_csu_init@@Base+0x5c>
   114ec:	add	r6, pc, r6
   114f0:	add	r5, pc, r5
   114f4:	sub	r6, r6, r5
   114f8:	mov	r8, r1
   114fc:	mov	r9, r2
   11500:	bl	109e8 <calloc@plt-0x20>
   11504:	asrs	r6, r6, #2
   11508:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1150c:	mov	r4, #0
   11510:	add	r4, r4, #1
   11514:	ldr	r3, [r5], #4
   11518:	mov	r2, r9
   1151c:	mov	r1, r8
   11520:	mov	r0, r7
   11524:	blx	r3
   11528:	cmp	r6, r4
   1152c:	bne	11510 <__libc_csu_init@@Base+0x34>
   11530:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11534:	andeq	r0, r1, ip, lsl sl
   11538:	andeq	r0, r1, r4, lsl sl

0001153c <__libc_csu_fini@@Base>:
   1153c:	bx	lr

Disassembly of section .fini:

00011540 <.fini>:
   11540:	push	{r3, lr}
   11544:	pop	{r3, pc}
