
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	12358 <__assert_fail@plt+0xdf4>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	r1, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #135168	; 0x21000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #135168	; 0x21000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #135168	; 0x21000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #135168	; 0x21000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #135168	; 0x21000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #135168	; 0x21000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #135168	; 0x21000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #135168	; 0x21000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #135168	; 0x21000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #135168	; 0x21000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #135168	; 0x21000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #135168	; 0x21000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #135168	; 0x21000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #135168	; 0x21000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #135168	; 0x21000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #135168	; 0x21000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #135168	; 0x21000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #135168	; 0x21000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <tolower@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #135168	; 0x21000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <pthread_mutex_init@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #135168	; 0x21000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #135168	; 0x21000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #135168	; 0x21000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #135168	; 0x21000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #135168	; 0x21000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #135168	; 0x21000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #135168	; 0x21000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #135168	; 0x21000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #135168	; 0x21000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #135168	; 0x21000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #135168	; 0x21000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #135168	; 0x21000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #135168	; 0x21000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #135168	; 0x21000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #135168	; 0x21000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #135168	; 0x21000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <lseek64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #135168	; 0x21000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <__ctype_get_mb_cur_max@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #135168	; 0x21000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <strcpy@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #135168	; 0x21000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <__fpending@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #135168	; 0x21000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <ferror_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #135168	; 0x21000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #135168	; 0x21000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #135168	; 0x21000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #135168	; 0x21000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #135168	; 0x21000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #135168	; 0x21000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #135168	; 0x21000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #135168	; 0x21000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__gmon_start__@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #135168	; 0x21000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <getopt_long@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #135168	; 0x21000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__ctype_b_loc@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #135168	; 0x21000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <exit@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #135168	; 0x21000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <strlen@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #135168	; 0x21000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <strchr@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #135168	; 0x21000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <__errno_location@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #135168	; 0x21000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <iswalnum@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #135168	; 0x21000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__sprintf_chk@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #135168	; 0x21000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <__cxa_atexit@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #135168	; 0x21000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <memset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #135168	; 0x21000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <btowc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #135168	; 0x21000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <__printf_chk@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #135168	; 0x21000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <fileno@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #135168	; 0x21000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <strtoumax@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #135168	; 0x21000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <__fprintf_chk@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #135168	; 0x21000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <strtoimax@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #135168	; 0x21000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #135168	; 0x21000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #135168	; 0x21000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #135168	; 0x21000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #135168	; 0x21000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #135168	; 0x21000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <toupper@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #135168	; 0x21000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <strrchr@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #135168	; 0x21000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <nl_langinfo@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #135168	; 0x21000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <fputc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #135168	; 0x21000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #135168	; 0x21000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #135168	; 0x21000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #135168	; 0x21000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <fputs@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #135168	; 0x21000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <strncmp@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #135168	; 0x21000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <abort@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #135168	; 0x21000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <close@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #135168	; 0x21000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__snprintf_chk@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #135168	; 0x21000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

00011564 <__assert_fail@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #135168	; 0x21000
   1156c:	ldr	pc, [ip, #3044]!	; 0xbe4

Disassembly of section .text:

00011570 <.text>:
   11570:	push	{r4, lr}
   11574:	bl	11414 <__errno_location@plt>
   11578:	mov	r3, #12
   1157c:	str	r3, [r0]
   11580:	mov	r0, #0
   11584:	pop	{r4, pc}
   11588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1158c:	sub	sp, sp, #220	; 0xdc
   11590:	mov	fp, r1
   11594:	str	r0, [sp, #24]
   11598:	ldr	r0, [r1]
   1159c:	bl	137f8 <__assert_fail@plt+0x2294>
   115a0:	ldr	r1, [pc, #3268]	; 1226c <__assert_fail@plt+0xd08>
   115a4:	mov	r0, #6
   115a8:	bl	114bc <setlocale@plt>
   115ac:	ldr	r4, [pc, #3260]	; 12270 <__assert_fail@plt+0xd0c>
   115b0:	ldr	r1, [pc, #3260]	; 12274 <__assert_fail@plt+0xd10>
   115b4:	ldr	r0, [pc, #3260]	; 12278 <__assert_fail@plt+0xd14>
   115b8:	bl	11510 <bindtextdomain@plt>
   115bc:	ldr	r0, [pc, #3252]	; 12278 <__assert_fail@plt+0xd14>
   115c0:	bl	1130c <textdomain@plt>
   115c4:	ldr	r0, [pc, #3248]	; 1227c <__assert_fail@plt+0xd18>
   115c8:	bl	21680 <__assert_fail@plt+0x1011c>
   115cc:	mov	r3, #0
   115d0:	ldr	r8, [pc, #3240]	; 12280 <__assert_fail@plt+0xd1c>
   115d4:	mov	r2, #1
   115d8:	ldr	r7, [pc, #3236]	; 12284 <__assert_fail@plt+0xd20>
   115dc:	str	r3, [r4, #12]
   115e0:	ldr	r6, [pc, #3232]	; 12288 <__assert_fail@plt+0xd24>
   115e4:	str	r3, [r4, #20]
   115e8:	strb	r3, [r4, #180]	; 0xb4
   115ec:	strb	r2, [r4, #181]	; 0xb5
   115f0:	strb	r3, [r4, #224]	; 0xe0
   115f4:	ldr	r3, [pc, #3216]	; 1228c <__assert_fail@plt+0xd28>
   115f8:	str	r3, [r4, #4]
   115fc:	str	fp, [r4, #220]	; 0xdc
   11600:	mov	r5, #0
   11604:	mov	r3, r8
   11608:	ldr	r0, [sp, #24]
   1160c:	mov	r2, r7
   11610:	mov	r1, fp
   11614:	str	r5, [sp]
   11618:	bl	113d8 <getopt_long@plt>
   1161c:	cmn	r0, #1
   11620:	bne	1166c <__assert_fail@plt+0x108>
   11624:	ldr	r6, [pc, #3172]	; 12290 <__assert_fail@plt+0xd2c>
   11628:	ldr	r2, [sp, #24]
   1162c:	ldr	r3, [r6]
   11630:	sub	r2, r2, r3
   11634:	cmp	r2, #1
   11638:	bgt	117d0 <__assert_fail@plt+0x26c>
   1163c:	ldr	r2, [sp, #24]
   11640:	cmp	r3, r2
   11644:	mov	r2, #5
   11648:	blt	11798 <__assert_fail@plt+0x234>
   1164c:	ldr	r1, [pc, #3136]	; 12294 <__assert_fail@plt+0xd30>
   11650:	mov	r0, r5
   11654:	bl	112d0 <dcgettext@plt>
   11658:	mov	r2, r0
   1165c:	mov	r1, r5
   11660:	mov	r0, r5
   11664:	bl	11384 <error@plt>
   11668:	b	1168c <__assert_fail@plt+0x128>
   1166c:	cmp	r0, #107	; 0x6b
   11670:	beq	11700 <__assert_fail@plt+0x19c>
   11674:	bgt	116b0 <__assert_fail@plt+0x14c>
   11678:	cmn	r0, #2
   1167c:	beq	1175c <__assert_fail@plt+0x1f8>
   11680:	bgt	11694 <__assert_fail@plt+0x130>
   11684:	cmn	r0, #3
   11688:	beq	11764 <__assert_fail@plt+0x200>
   1168c:	mov	r0, #1
   11690:	b	11760 <__assert_fail@plt+0x1fc>
   11694:	cmp	r0, #98	; 0x62
   11698:	beq	116f4 <__assert_fail@plt+0x190>
   1169c:	cmp	r0, #102	; 0x66
   116a0:	bne	1168c <__assert_fail@plt+0x128>
   116a4:	ldr	r3, [r6]
   116a8:	str	r3, [r4, #4]
   116ac:	b	11600 <__assert_fail@plt+0x9c>
   116b0:	cmp	r0, #115	; 0x73
   116b4:	beq	116cc <__assert_fail@plt+0x168>
   116b8:	bgt	116d8 <__assert_fail@plt+0x174>
   116bc:	cmp	r0, #110	; 0x6e
   116c0:	beq	11708 <__assert_fail@plt+0x1a4>
   116c4:	cmp	r0, #113	; 0x71
   116c8:	bne	1168c <__assert_fail@plt+0x128>
   116cc:	mov	r3, #1
   116d0:	strb	r3, [r4, #180]	; 0xb4
   116d4:	b	11600 <__assert_fail@plt+0x9c>
   116d8:	cmp	r0, #122	; 0x7a
   116dc:	mov	r3, #1
   116e0:	beq	11754 <__assert_fail@plt+0x1f0>
   116e4:	cmp	r0, #256	; 0x100
   116e8:	bne	1168c <__assert_fail@plt+0x128>
   116ec:	strb	r3, [r4, #224]	; 0xe0
   116f0:	b	11600 <__assert_fail@plt+0x9c>
   116f4:	ldr	r3, [r6]
   116f8:	str	r3, [r4, #8]
   116fc:	b	11600 <__assert_fail@plt+0x9c>
   11700:	strb	r5, [r4, #181]	; 0xb5
   11704:	b	11600 <__assert_fail@plt+0x9c>
   11708:	mov	r2, #5
   1170c:	ldr	r1, [pc, #2948]	; 12298 <__assert_fail@plt+0xd34>
   11710:	mov	r0, r5
   11714:	ldr	r9, [r6]
   11718:	bl	112d0 <dcgettext@plt>
   1171c:	ldr	r3, [pc, #2888]	; 1226c <__assert_fail@plt+0xd08>
   11720:	mvn	r2, #-2147483648	; 0x80000000
   11724:	str	r3, [sp, #8]
   11728:	mov	r3, #0
   1172c:	str	r0, [sp, #12]
   11730:	mov	r0, r9
   11734:	strd	r2, [sp]
   11738:	mov	r3, #0
   1173c:	mov	r2, #0
   11740:	str	r5, [sp, #16]
   11744:	bl	20554 <__assert_fail@plt+0xeff0>
   11748:	ldr	r3, [pc, #2892]	; 1229c <__assert_fail@plt+0xd38>
   1174c:	str	r0, [r3]
   11750:	b	11600 <__assert_fail@plt+0x9c>
   11754:	strb	r3, [r4, #48]	; 0x30
   11758:	b	11600 <__assert_fail@plt+0x9c>
   1175c:	mov	r0, r5
   11760:	bl	130a0 <__assert_fail@plt+0x1b3c>
   11764:	ldr	r3, [pc, #2868]	; 122a0 <__assert_fail@plt+0xd3c>
   11768:	ldr	r0, [pc, #2868]	; 122a4 <__assert_fail@plt+0xd40>
   1176c:	ldr	r2, [pc, #2868]	; 122a8 <__assert_fail@plt+0xd44>
   11770:	stmib	sp, {r3, r5}
   11774:	ldr	r3, [pc, #2864]	; 122ac <__assert_fail@plt+0xd48>
   11778:	ldr	r1, [pc, #2864]	; 122b0 <__assert_fail@plt+0xd4c>
   1177c:	str	r3, [sp]
   11780:	ldr	r3, [pc, #2860]	; 122b4 <__assert_fail@plt+0xd50>
   11784:	ldr	r0, [r0]
   11788:	ldr	r3, [r3]
   1178c:	bl	200d0 <__assert_fail@plt+0xeb6c>
   11790:	mov	r0, #0
   11794:	bl	113f0 <exit@plt>
   11798:	ldr	r1, [pc, #2840]	; 122b8 <__assert_fail@plt+0xd54>
   1179c:	mov	r0, r5
   117a0:	bl	112d0 <dcgettext@plt>
   117a4:	ldr	r3, [sp, #24]
   117a8:	mov	r4, r0
   117ac:	sub	r3, r3, #-1073741823	; 0xc0000001
   117b0:	ldr	r0, [fp, r3, lsl #2]
   117b4:	bl	14df8 <__assert_fail@plt+0x3894>
   117b8:	mov	r3, r0
   117bc:	mov	r2, r4
   117c0:	mov	r1, r5
   117c4:	mov	r0, r5
   117c8:	bl	11384 <error@plt>
   117cc:	b	1168c <__assert_fail@plt+0x128>
   117d0:	ldr	r0, [r4, #4]
   117d4:	bl	113fc <strlen@plt>
   117d8:	ldr	r3, [r4, #8]
   117dc:	mov	r7, r0
   117e0:	cmp	r3, #0
   117e4:	ldrne	r0, [r4, #8]
   117e8:	movne	ip, #100	; 0x64
   117ec:	movne	r3, r0
   117f0:	bne	11a30 <__assert_fail@plt+0x4cc>
   117f4:	ldr	r3, [pc, #2720]	; 1229c <__assert_fail@plt+0xd38>
   117f8:	ldr	r2, [r3]
   117fc:	cmp	r2, #10
   11800:	ldrhi	r0, [r3]
   11804:	movls	r0, #11
   11808:	add	r0, r0, #1
   1180c:	adds	r0, r7, r0
   11810:	movvs	r5, #1
   11814:	movvc	r5, #0
   11818:	cmp	r5, #0
   1181c:	str	r5, [sp, #44]	; 0x2c
   11820:	bne	11a6c <__assert_fail@plt+0x508>
   11824:	bl	201ac <__assert_fail@plt+0xec48>
   11828:	ldr	r3, [r6]
   1182c:	str	r0, [r4]
   11830:	ldr	r1, [pc, #2692]	; 122bc <__assert_fail@plt+0xd58>
   11834:	ldr	r7, [fp, r3, lsl #2]
   11838:	add	r2, r3, #1
   1183c:	str	r2, [r6]
   11840:	mov	r0, r7
   11844:	bl	111f8 <strcmp@plt>
   11848:	cmp	r0, #0
   1184c:	beq	11a70 <__assert_fail@plt+0x50c>
   11850:	mov	r3, r5
   11854:	mov	r2, r5
   11858:	mov	r1, r7
   1185c:	mov	r0, r5
   11860:	bl	13504 <__assert_fail@plt+0x1fa0>
   11864:	cmp	r0, #0
   11868:	bge	11a70 <__assert_fail@plt+0x50c>
   1186c:	bl	11414 <__errno_location@plt>
   11870:	ldr	r4, [r0]
   11874:	mov	r2, #5
   11878:	mov	r0, r5
   1187c:	ldr	r1, [pc, #2620]	; 122c0 <__assert_fail@plt+0xd5c>
   11880:	bl	112d0 <dcgettext@plt>
   11884:	mov	r5, r0
   11888:	mov	r1, r7
   1188c:	mov	r0, #4
   11890:	bl	14c14 <__assert_fail@plt+0x36b0>
   11894:	mov	r3, r0
   11898:	mov	r2, r5
   1189c:	mov	r1, r4
   118a0:	b	11a20 <__assert_fail@plt+0x4bc>
   118a4:	cmp	r1, #37	; 0x25
   118a8:	bne	11a2c <__assert_fail@plt+0x4c8>
   118ac:	add	r2, r3, #1
   118b0:	ldrb	r3, [r3, #1]
   118b4:	cmp	r3, #37	; 0x25
   118b8:	moveq	r3, r2
   118bc:	beq	11a2c <__assert_fail@plt+0x4c8>
   118c0:	cmp	r5, #0
   118c4:	beq	118fc <__assert_fail@plt+0x398>
   118c8:	ldr	r1, [pc, #2548]	; 122c4 <__assert_fail@plt+0xd60>
   118cc:	mov	r2, #5
   118d0:	mov	r0, #0
   118d4:	bl	112d0 <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	mov	r1, #0
   118e0:	mov	r0, #1
   118e4:	bl	11384 <error@plt>
   118e8:	cmp	r3, #45	; 0x2d
   118ec:	beq	118f8 <__assert_fail@plt+0x394>
   118f0:	cmp	r3, #48	; 0x30
   118f4:	bne	11918 <__assert_fail@plt+0x3b4>
   118f8:	mov	r2, r1
   118fc:	mov	r1, r2
   11900:	ldrb	r3, [r1], #1
   11904:	cmp	r3, #39	; 0x27
   11908:	beq	1197c <__assert_fail@plt+0x418>
   1190c:	bhi	118e8 <__assert_fail@plt+0x384>
   11910:	cmp	r3, #35	; 0x23
   11914:	beq	11984 <__assert_fail@plt+0x420>
   11918:	ldrb	r1, [r2]
   1191c:	mov	r3, r2
   11920:	add	r2, r2, #1
   11924:	sub	lr, r1, #48	; 0x30
   11928:	cmp	lr, #9
   1192c:	bls	11918 <__assert_fail@plt+0x3b4>
   11930:	cmp	r1, #46	; 0x2e
   11934:	bne	11948 <__assert_fail@plt+0x3e4>
   11938:	ldrb	r2, [r3, #1]!
   1193c:	sub	r2, r2, #48	; 0x30
   11940:	cmp	r2, #9
   11944:	bls	11938 <__assert_fail@plt+0x3d4>
   11948:	ldrb	r8, [r3]
   1194c:	cmp	r8, #105	; 0x69
   11950:	beq	119b0 <__assert_fail@plt+0x44c>
   11954:	bhi	1198c <__assert_fail@plt+0x428>
   11958:	cmp	r8, #88	; 0x58
   1195c:	beq	119a4 <__assert_fail@plt+0x440>
   11960:	cmp	r8, #100	; 0x64
   11964:	beq	119b0 <__assert_fail@plt+0x44c>
   11968:	cmp	r8, #0
   1196c:	bne	119ec <__assert_fail@plt+0x488>
   11970:	mov	r2, #5
   11974:	ldr	r1, [pc, #2380]	; 122c8 <__assert_fail@plt+0xd64>
   11978:	b	118d0 <__assert_fail@plt+0x36c>
   1197c:	orr	r5, r5, #1
   11980:	b	118f8 <__assert_fail@plt+0x394>
   11984:	orr	r5, r5, #2
   11988:	b	118f8 <__assert_fail@plt+0x394>
   1198c:	cmp	r8, #117	; 0x75
   11990:	beq	119ac <__assert_fail@plt+0x448>
   11994:	cmp	r8, #120	; 0x78
   11998:	beq	119a4 <__assert_fail@plt+0x440>
   1199c:	cmp	r8, #111	; 0x6f
   119a0:	bne	119ec <__assert_fail@plt+0x488>
   119a4:	mov	r2, #2
   119a8:	b	119b4 <__assert_fail@plt+0x450>
   119ac:	strb	ip, [r3]
   119b0:	mov	r2, #1
   119b4:	bics	r5, r5, r2
   119b8:	beq	11a28 <__assert_fail@plt+0x4c4>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #2308]	; 122cc <__assert_fail@plt+0xd68>
   119c4:	mov	r0, #0
   119c8:	bl	112d0 <dcgettext@plt>
   119cc:	tst	r5, #2
   119d0:	str	r8, [sp]
   119d4:	movne	r3, #35	; 0x23
   119d8:	moveq	r3, #39	; 0x27
   119dc:	mov	r2, r0
   119e0:	mov	r1, #0
   119e4:	mov	r0, #1
   119e8:	bl	11384 <error@plt>
   119ec:	bl	113e4 <__ctype_b_loc@plt>
   119f0:	ldr	r2, [r0]
   119f4:	lsl	r3, r8, #1
   119f8:	mov	r0, #0
   119fc:	ldrh	r4, [r2, r3]
   11a00:	mov	r2, #5
   11a04:	ands	r4, r4, #16384	; 0x4000
   11a08:	ldreq	r1, [pc, #2240]	; 122d0 <__assert_fail@plt+0xd6c>
   11a0c:	ldrne	r1, [pc, #2240]	; 122d4 <__assert_fail@plt+0xd70>
   11a10:	bl	112d0 <dcgettext@plt>
   11a14:	mov	r3, r8
   11a18:	mov	r2, r0
   11a1c:	mov	r1, #0
   11a20:	mov	r0, #1
   11a24:	bl	11384 <error@plt>
   11a28:	mov	r5, #1
   11a2c:	add	r3, r3, #1
   11a30:	ldrb	r1, [r3]
   11a34:	cmp	r1, #0
   11a38:	bne	118a4 <__assert_fail@plt+0x340>
   11a3c:	cmp	r5, #0
   11a40:	moveq	r2, #5
   11a44:	ldreq	r1, [pc, #2188]	; 122d8 <__assert_fail@plt+0xd74>
   11a48:	beq	118d0 <__assert_fail@plt+0x36c>
   11a4c:	mvn	r3, #-2147483648	; 0x80000000
   11a50:	mov	r2, #1
   11a54:	stm	sp, {r0, r3}
   11a58:	mvn	r3, #0
   11a5c:	mov	r0, r1
   11a60:	bl	11558 <__snprintf_chk@plt>
   11a64:	cmp	r0, #0
   11a68:	bge	11808 <__assert_fail@plt+0x2a4>
   11a6c:	bl	12ab8 <__assert_fail@plt+0x1554>
   11a70:	ldr	sl, [r6]
   11a74:	ldr	r3, [sp, #24]
   11a78:	cmp	r3, sl
   11a7c:	bgt	11b78 <__assert_fail@plt+0x614>
   11a80:	ldr	r6, [pc, #2132]	; 122dc <__assert_fail@plt+0xd78>
   11a84:	mov	r5, #0
   11a88:	ldr	r8, [pc, #2128]	; 122e0 <__assert_fail@plt+0xd7c>
   11a8c:	ldr	r0, [pc, #2124]	; 122e0 <__assert_fail@plt+0xd7c>
   11a90:	mov	r7, r6
   11a94:	bl	114c8 <sigemptyset@plt>
   11a98:	ldr	r9, [r7], #4
   11a9c:	add	r2, sp, #72	; 0x48
   11aa0:	mov	r1, #0
   11aa4:	mov	r0, r9
   11aa8:	bl	11330 <sigaction@plt>
   11aac:	ldr	r3, [sp, #72]	; 0x48
   11ab0:	cmp	r3, #1
   11ab4:	beq	11ac4 <__assert_fail@plt+0x560>
   11ab8:	mov	r1, r9
   11abc:	mov	r0, r8
   11ac0:	bl	113a8 <sigaddset@plt>
   11ac4:	add	r5, r5, #1
   11ac8:	cmp	r5, #11
   11acc:	bne	11a98 <__assert_fail@plt+0x534>
   11ad0:	ldr	r3, [pc, #2060]	; 122e4 <__assert_fail@plt+0xd80>
   11ad4:	mov	r5, #0
   11ad8:	mov	r2, #128	; 0x80
   11adc:	add	r0, sp, #76	; 0x4c
   11ae0:	ldr	r8, [pc, #2040]	; 122e0 <__assert_fail@plt+0xd7c>
   11ae4:	ldr	r1, [pc, #2036]	; 122e0 <__assert_fail@plt+0xd7c>
   11ae8:	str	r3, [sp, #72]	; 0x48
   11aec:	bl	11264 <memcpy@plt>
   11af0:	str	r5, [sp, #204]	; 0xcc
   11af4:	ldr	r7, [r6], #4
   11af8:	mov	r0, r8
   11afc:	mov	r1, r7
   11b00:	bl	11300 <sigismember@plt>
   11b04:	cmp	r0, #0
   11b08:	beq	11b1c <__assert_fail@plt+0x5b8>
   11b0c:	mov	r2, #0
   11b10:	add	r1, sp, #72	; 0x48
   11b14:	mov	r0, r7
   11b18:	bl	11330 <sigaction@plt>
   11b1c:	add	r5, r5, #1
   11b20:	cmp	r5, #11
   11b24:	bne	11af4 <__assert_fail@plt+0x590>
   11b28:	ldr	r3, [r4, #12]
   11b2c:	ldr	r2, [sp, #44]	; 0x2c
   11b30:	cmp	r2, r3
   11b34:	blt	11eb8 <__assert_fail@plt+0x954>
   11b38:	bl	127bc <__assert_fail@plt+0x1258>
   11b3c:	bl	12fa4 <__assert_fail@plt+0x1a40>
   11b40:	bl	125d4 <__assert_fail@plt+0x1070>
   11b44:	mov	r0, #0
   11b48:	bl	1154c <close@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	12264 <__assert_fail@plt+0xd00>
   11b54:	bl	11414 <__errno_location@plt>
   11b58:	ldr	r4, [r0]
   11b5c:	mov	r2, #5
   11b60:	mov	r0, #0
   11b64:	ldr	r1, [pc, #1916]	; 122e8 <__assert_fail@plt+0xd84>
   11b68:	bl	112d0 <dcgettext@plt>
   11b6c:	mov	r2, r0
   11b70:	mov	r1, r4
   11b74:	b	11f90 <__assert_fail@plt+0xa2c>
   11b78:	ldr	r6, [fp, sl, lsl #2]
   11b7c:	lsl	r3, sl, #2
   11b80:	add	r7, fp, r3
   11b84:	ldrb	r5, [r6]
   11b88:	sub	r3, r5, #37	; 0x25
   11b8c:	clz	r3, r3
   11b90:	lsr	r3, r3, #5
   11b94:	mov	r8, r3
   11b98:	cmp	r5, #47	; 0x2f
   11b9c:	orreq	r8, r8, #1
   11ba0:	str	r3, [sp, #56]	; 0x38
   11ba4:	cmp	r8, #0
   11ba8:	beq	11cc0 <__assert_fail@plt+0x75c>
   11bac:	add	r8, r6, #1
   11bb0:	mov	r1, r5
   11bb4:	mov	r0, r8
   11bb8:	bl	114e0 <strrchr@plt>
   11bbc:	subs	r9, r0, #0
   11bc0:	bne	11bdc <__assert_fail@plt+0x678>
   11bc4:	mov	r2, #5
   11bc8:	ldr	r1, [pc, #1820]	; 122ec <__assert_fail@plt+0xd88>
   11bcc:	bl	112d0 <dcgettext@plt>
   11bd0:	mov	r3, r6
   11bd4:	str	r5, [sp]
   11bd8:	b	119dc <__assert_fail@plt+0x478>
   11bdc:	bl	12494 <__assert_fail@plt+0xf30>
   11be0:	ldr	r3, [sp, #56]	; 0x38
   11be4:	mov	r5, r0
   11be8:	mov	r7, #0
   11bec:	mov	r0, #256	; 0x100
   11bf0:	str	sl, [r5, #24]
   11bf4:	strb	r3, [r5, #29]
   11bf8:	mov	r3, #1
   11bfc:	str	r7, [r5, #32]
   11c00:	strb	r3, [r5, #30]
   11c04:	str	r7, [r5, #36]	; 0x24
   11c08:	bl	20198 <__assert_fail@plt+0xec34>
   11c0c:	ldr	r2, [pc, #1756]	; 122f0 <__assert_fail@plt+0xd8c>
   11c10:	movw	r3, #710	; 0x2c6
   11c14:	sub	r1, r9, r6
   11c18:	sub	r1, r1, #1
   11c1c:	str	r0, [r5, #48]	; 0x30
   11c20:	mov	r0, r8
   11c24:	str	r7, [r5, #52]	; 0x34
   11c28:	str	r3, [r2]
   11c2c:	add	r2, r5, #32
   11c30:	bl	1f32c <__assert_fail@plt+0xddc8>
   11c34:	subs	r8, r0, #0
   11c38:	beq	11c74 <__assert_fail@plt+0x710>
   11c3c:	mov	r2, #5
   11c40:	ldr	r1, [pc, #1708]	; 122f4 <__assert_fail@plt+0xd90>
   11c44:	mov	r0, r7
   11c48:	bl	112d0 <dcgettext@plt>
   11c4c:	mov	r4, r0
   11c50:	mov	r0, r6
   11c54:	bl	14df8 <__assert_fail@plt+0x3894>
   11c58:	mov	r3, r0
   11c5c:	mov	r2, r4
   11c60:	str	r8, [sp]
   11c64:	mov	r1, r7
   11c68:	mov	r0, r7
   11c6c:	bl	11384 <error@plt>
   11c70:	bl	1276c <__assert_fail@plt+0x1208>
   11c74:	ldrb	r3, [r9, #1]
   11c78:	cmp	r3, #0
   11c7c:	beq	11dcc <__assert_fail@plt+0x868>
   11c80:	ldr	r3, [pc, #1508]	; 1226c <__assert_fail@plt+0xd08>
   11c84:	mov	r2, #10
   11c88:	mov	r1, r8
   11c8c:	add	r0, r9, #1
   11c90:	str	r3, [sp]
   11c94:	mov	r3, r5
   11c98:	bl	20620 <__assert_fail@plt+0xf0bc>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11dcc <__assert_fail@plt+0x868>
   11ca4:	ldr	r1, [pc, #1612]	; 122f8 <__assert_fail@plt+0xd94>
   11ca8:	mov	r2, #5
   11cac:	mov	r0, #0
   11cb0:	bl	112d0 <dcgettext@plt>
   11cb4:	mov	r4, r0
   11cb8:	mov	r0, r6
   11cbc:	b	11d18 <__assert_fail@plt+0x7b4>
   11cc0:	bl	12494 <__assert_fail@plt+0xf30>
   11cc4:	ldr	r3, [pc, #1440]	; 1226c <__assert_fail@plt+0xd08>
   11cc8:	mov	r5, r0
   11ccc:	mov	r2, #10
   11cd0:	str	sl, [r0, #24]
   11cd4:	mov	r1, r8
   11cd8:	str	r3, [sp]
   11cdc:	add	r3, sp, #64	; 0x40
   11ce0:	ldr	r0, [fp, sl, lsl #2]
   11ce4:	bl	20b04 <__assert_fail@plt+0xf5a0>
   11ce8:	subs	r6, r0, #0
   11cec:	bne	11d00 <__assert_fail@plt+0x79c>
   11cf0:	ldrd	r8, [sp, #64]	; 0x40
   11cf4:	cmp	r8, #0
   11cf8:	sbcs	r3, r9, #0
   11cfc:	bge	11d28 <__assert_fail@plt+0x7c4>
   11d00:	mov	r2, #5
   11d04:	ldr	r1, [pc, #1520]	; 122fc <__assert_fail@plt+0xd98>
   11d08:	mov	r0, #0
   11d0c:	bl	112d0 <dcgettext@plt>
   11d10:	mov	r4, r0
   11d14:	ldr	r0, [r7]
   11d18:	bl	14df8 <__assert_fail@plt+0x3894>
   11d1c:	mov	r3, r0
   11d20:	mov	r2, r4
   11d24:	b	11a1c <__assert_fail@plt+0x4b8>
   11d28:	orrs	r3, r8, r9
   11d2c:	bne	11d44 <__assert_fail@plt+0x7e0>
   11d30:	mov	r2, #5
   11d34:	ldr	r1, [pc, #1476]	; 12300 <__assert_fail@plt+0xd9c>
   11d38:	bl	112d0 <dcgettext@plt>
   11d3c:	ldr	r3, [r7]
   11d40:	b	11a18 <__assert_fail@plt+0x4b4>
   11d44:	ldrd	r2, [r4, #232]	; 0xe8
   11d48:	cmp	r9, r3
   11d4c:	cmpeq	r8, r2
   11d50:	bcs	11d8c <__assert_fail@plt+0x828>
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #1444]	; 12304 <__assert_fail@plt+0xda0>
   11d5c:	bl	112d0 <dcgettext@plt>
   11d60:	mov	r5, r0
   11d64:	ldr	r0, [r7]
   11d68:	bl	14df8 <__assert_fail@plt+0x3894>
   11d6c:	mov	r7, r0
   11d70:	add	r2, sp, #72	; 0x48
   11d74:	ldrd	r0, [r4, #232]	; 0xe8
   11d78:	bl	13730 <__assert_fail@plt+0x21cc>
   11d7c:	mov	r3, r7
   11d80:	mov	r2, r5
   11d84:	str	r0, [sp]
   11d88:	b	119e0 <__assert_fail@plt+0x47c>
   11d8c:	bne	11dc0 <__assert_fail@plt+0x85c>
   11d90:	mov	r2, #5
   11d94:	ldr	r1, [pc, #1388]	; 12308 <__assert_fail@plt+0xda4>
   11d98:	bl	112d0 <dcgettext@plt>
   11d9c:	lsl	r3, sl, #2
   11da0:	mov	r7, r0
   11da4:	ldr	r0, [fp, r3]
   11da8:	bl	14df8 <__assert_fail@plt+0x3894>
   11dac:	mov	r3, r0
   11db0:	mov	r2, r7
   11db4:	mov	r1, r6
   11db8:	mov	r0, r6
   11dbc:	bl	11384 <error@plt>
   11dc0:	ldrd	r2, [sp, #64]	; 0x40
   11dc4:	strd	r2, [r5, #8]
   11dc8:	strd	r2, [r4, #232]	; 0xe8
   11dcc:	ldr	r3, [sp, #24]
   11dd0:	add	r7, sl, #1
   11dd4:	cmp	r3, r7
   11dd8:	ble	11eb0 <__assert_fail@plt+0x94c>
   11ddc:	lsl	r3, sl, #2
   11de0:	add	r8, r3, #4
   11de4:	ldr	r6, [fp, r8]
   11de8:	ldrb	r3, [r6]
   11dec:	cmp	r3, #123	; 0x7b
   11df0:	bne	11eb0 <__assert_fail@plt+0x94c>
   11df4:	mov	r0, r6
   11df8:	bl	113fc <strlen@plt>
   11dfc:	sub	r9, r0, #1
   11e00:	ldrb	r2, [r6, r9]
   11e04:	add	r3, r6, r9
   11e08:	cmp	r2, #125	; 0x7d
   11e0c:	movne	r2, #5
   11e10:	ldrne	r1, [pc, #1268]	; 1230c <__assert_fail@plt+0xda8>
   11e14:	bne	11cac <__assert_fail@plt+0x748>
   11e18:	mov	r2, #0
   11e1c:	add	r0, r6, #1
   11e20:	sub	r3, r3, #1
   11e24:	cmp	r0, r3
   11e28:	strb	r2, [r6, r9]
   11e2c:	bne	11e44 <__assert_fail@plt+0x8e0>
   11e30:	ldrb	r3, [r6, #1]
   11e34:	cmp	r3, #42	; 0x2a
   11e38:	moveq	r3, #1
   11e3c:	strbeq	r3, [r5, #28]
   11e40:	beq	11ea4 <__assert_fail@plt+0x940>
   11e44:	ldr	r3, [pc, #1056]	; 1226c <__assert_fail@plt+0xd08>
   11e48:	mov	r2, #10
   11e4c:	mov	r1, #0
   11e50:	str	r3, [sp]
   11e54:	add	r3, sp, #72	; 0x48
   11e58:	bl	20b04 <__assert_fail@plt+0xf5a0>
   11e5c:	cmp	r0, #0
   11e60:	bne	11e74 <__assert_fail@plt+0x910>
   11e64:	ldrd	r2, [sp, #72]	; 0x48
   11e68:	cmp	r2, #0
   11e6c:	sbcs	r1, r3, #0
   11e70:	bge	11ea0 <__assert_fail@plt+0x93c>
   11e74:	mov	r2, #5
   11e78:	ldr	r1, [pc, #1168]	; 12310 <__assert_fail@plt+0xdac>
   11e7c:	mov	r0, #0
   11e80:	bl	112d0 <dcgettext@plt>
   11e84:	ldr	r3, [r4, #220]	; 0xdc
   11e88:	mov	r5, r0
   11e8c:	ldr	r0, [r3, r8]
   11e90:	bl	14df8 <__assert_fail@plt+0x3894>
   11e94:	mov	r3, r0
   11e98:	mov	r2, r5
   11e9c:	b	11a1c <__assert_fail@plt+0x4b8>
   11ea0:	strd	r2, [r5, #16]
   11ea4:	mov	r3, #125	; 0x7d
   11ea8:	mov	sl, r7
   11eac:	strb	r3, [r6, r9]
   11eb0:	add	sl, sl, #1
   11eb4:	b	11a74 <__assert_fail@plt+0x510>
   11eb8:	ldr	r3, [sp, #44]	; 0x2c
   11ebc:	lsl	r8, r3, #6
   11ec0:	ldr	r3, [r4, #20]
   11ec4:	add	r3, r3, r8
   11ec8:	ldrb	r3, [r3, #30]
   11ecc:	cmp	r3, #0
   11ed0:	moveq	r6, #0
   11ed4:	moveq	r7, #0
   11ed8:	beq	121c0 <__assert_fail@plt+0xc5c>
   11edc:	mov	sl, #0
   11ee0:	mov	fp, #0
   11ee4:	b	12100 <__assert_fail@plt+0xb9c>
   11ee8:	ldrb	r6, [r5, #29]
   11eec:	cmp	r6, #0
   11ef0:	bne	11ef8 <__assert_fail@plt+0x994>
   11ef4:	bl	127bc <__assert_fail@plt+0x1258>
   11ef8:	ldrd	r2, [r7, r8]
   11efc:	add	r9, r5, #32
   11f00:	cmp	r2, #0
   11f04:	sbcs	r3, r3, #0
   11f08:	blt	1202c <__assert_fail@plt+0xac8>
   11f0c:	ldrd	r0, [r4, #208]	; 0xd0
   11f10:	adds	r0, r0, #1
   11f14:	adc	r1, r1, #0
   11f18:	strd	r0, [r4, #208]	; 0xd0
   11f1c:	bl	12d84 <__assert_fail@plt+0x1820>
   11f20:	cmp	r0, #0
   11f24:	bne	11f48 <__assert_fail@plt+0x9e4>
   11f28:	ldrb	r3, [r5, #28]
   11f2c:	cmp	r3, #0
   11f30:	beq	12084 <__assert_fail@plt+0xb20>
   11f34:	cmp	r6, #0
   11f38:	bne	11790 <__assert_fail@plt+0x22c>
   11f3c:	bl	12fa4 <__assert_fail@plt+0x1a40>
   11f40:	bl	125d4 <__assert_fail@plt+0x1070>
   11f44:	b	11790 <__assert_fail@plt+0x22c>
   11f48:	ldr	r2, [r0]
   11f4c:	ldr	r1, [r0, #4]
   11f50:	mov	r0, r9
   11f54:	add	r3, r1, r2
   11f58:	ldrb	r3, [r3, #-1]
   11f5c:	cmp	r3, #10
   11f60:	mov	r3, #0
   11f64:	subeq	r2, r2, #1
   11f68:	strd	r2, [sp]
   11f6c:	bl	1fb28 <__assert_fail@plt+0xe5c4>
   11f70:	cmn	r0, #2
   11f74:	bne	11f9c <__assert_fail@plt+0xa38>
   11f78:	mov	r2, #5
   11f7c:	ldr	r1, [pc, #912]	; 12314 <__assert_fail@plt+0xdb0>
   11f80:	mov	r0, #0
   11f84:	bl	112d0 <dcgettext@plt>
   11f88:	mov	r2, r0
   11f8c:	mov	r1, #0
   11f90:	mov	r0, #0
   11f94:	bl	11384 <error@plt>
   11f98:	b	11c70 <__assert_fail@plt+0x70c>
   11f9c:	cmn	r0, #1
   11fa0:	beq	12018 <__assert_fail@plt+0xab4>
   11fa4:	add	r2, r7, r8
   11fa8:	ldr	r3, [r7, r8]
   11fac:	ldr	r0, [r2, #4]
   11fb0:	ldr	r2, [r4, #208]	; 0xd0
   11fb4:	ldr	r1, [r4, #212]	; 0xd4
   11fb8:	ldr	r5, [r5, #24]
   11fbc:	adds	r3, r3, r2
   11fc0:	str	r3, [sp, #32]
   11fc4:	adc	r3, r0, r1
   11fc8:	str	r3, [sp, #36]	; 0x24
   11fcc:	bl	12e88 <__assert_fail@plt+0x1924>
   11fd0:	ldrd	r2, [sp, #32]
   11fd4:	cmp	r2, r0
   11fd8:	sbcs	r3, r3, r1
   11fdc:	bge	12098 <__assert_fail@plt+0xb34>
   11fe0:	ldr	r1, [pc, #816]	; 12318 <__assert_fail@plt+0xdb4>
   11fe4:	mov	r2, #5
   11fe8:	mov	r0, #0
   11fec:	bl	112d0 <dcgettext@plt>
   11ff0:	ldr	r3, [r4, #220]	; 0xdc
   11ff4:	mov	r6, r0
   11ff8:	ldr	r0, [r3, r5, lsl #2]
   11ffc:	bl	14df8 <__assert_fail@plt+0x3894>
   12000:	mov	r1, #0
   12004:	mov	r3, r0
   12008:	mov	r2, r6
   1200c:	mov	r0, r1
   12010:	bl	11384 <error@plt>
   12014:	b	11c70 <__assert_fail@plt+0x70c>
   12018:	bl	12ee8 <__assert_fail@plt+0x1984>
   1201c:	cmp	r6, #0
   12020:	bne	11f0c <__assert_fail@plt+0x9a8>
   12024:	bl	1294c <__assert_fail@plt+0x13e8>
   12028:	b	11f0c <__assert_fail@plt+0x9a8>
   1202c:	ldrd	r0, [r4, #208]	; 0xd0
   12030:	adds	r0, r0, #1
   12034:	adc	r1, r1, #0
   12038:	strd	r0, [r4, #208]	; 0xd0
   1203c:	bl	12d84 <__assert_fail@plt+0x1820>
   12040:	cmp	r0, #0
   12044:	beq	11f28 <__assert_fail@plt+0x9c4>
   12048:	ldr	r2, [r0]
   1204c:	ldr	r1, [r0, #4]
   12050:	mov	r0, r9
   12054:	add	r3, r1, r2
   12058:	ldrb	r3, [r3, #-1]
   1205c:	cmp	r3, #10
   12060:	mov	r3, #0
   12064:	subeq	r2, r2, #1
   12068:	strd	r2, [sp]
   1206c:	bl	1fb28 <__assert_fail@plt+0xe5c4>
   12070:	cmn	r0, #2
   12074:	beq	11f78 <__assert_fail@plt+0xa14>
   12078:	cmn	r0, #1
   1207c:	beq	1202c <__assert_fail@plt+0xac8>
   12080:	b	11fa4 <__assert_fail@plt+0xa40>
   12084:	mov	r2, sl
   12088:	mov	r3, fp
   1208c:	str	r6, [sp]
   12090:	add	r0, r5, #24
   12094:	bl	12fbc <__assert_fail@plt+0x1a58>
   12098:	ldr	r3, [sp, #32]
   1209c:	mov	r2, #0
   120a0:	subs	r3, r3, r0
   120a4:	str	r3, [sp, #48]	; 0x30
   120a8:	ldr	r3, [sp, #36]	; 0x24
   120ac:	sbc	r3, r3, r1
   120b0:	str	r3, [sp, #52]	; 0x34
   120b4:	mov	r3, #0
   120b8:	ldrd	r0, [sp, #48]	; 0x30
   120bc:	cmp	r1, r3
   120c0:	cmpeq	r0, r2
   120c4:	bne	12134 <__assert_fail@plt+0xbd0>
   120c8:	cmp	r6, #0
   120cc:	bne	120d4 <__assert_fail@plt+0xb70>
   120d0:	bl	125d4 <__assert_fail@plt+0x1070>
   120d4:	ldrd	r2, [r7, r8]
   120d8:	cmp	r2, #1
   120dc:	sbcs	r3, r3, #0
   120e0:	ldrdge	r2, [sp, #32]
   120e4:	strdge	r2, [r4, #208]	; 0xd0
   120e8:	ldrb	r3, [r4, #224]	; 0xe0
   120ec:	cmp	r3, #0
   120f0:	beq	120f8 <__assert_fail@plt+0xb94>
   120f4:	bl	12ee8 <__assert_fail@plt+0x1984>
   120f8:	adds	sl, sl, #1
   120fc:	adc	fp, fp, #0
   12100:	ldr	r7, [r4, #20]
   12104:	add	r5, r7, r8
   12108:	ldrb	r3, [r5, #28]
   1210c:	cmp	r3, #0
   12110:	bne	11ee8 <__assert_fail@plt+0x984>
   12114:	ldrd	r2, [r5, #16]
   12118:	cmp	r2, sl
   1211c:	sbcs	r3, r3, fp
   12120:	bge	11ee8 <__assert_fail@plt+0x984>
   12124:	ldr	r3, [sp, #44]	; 0x2c
   12128:	add	r3, r3, #1
   1212c:	str	r3, [sp, #44]	; 0x2c
   12130:	b	11b28 <__assert_fail@plt+0x5c4>
   12134:	strd	r2, [sp, #24]
   12138:	bl	12ee8 <__assert_fail@plt+0x1984>
   1213c:	subs	r9, r0, #0
   12140:	ldrd	r2, [sp, #24]
   12144:	moveq	r2, #5
   12148:	ldreq	r1, [pc, #456]	; 12318 <__assert_fail@plt+0xdb4>
   1214c:	beq	11fec <__assert_fail@plt+0xa88>
   12150:	cmp	r6, #0
   12154:	bne	12164 <__assert_fail@plt+0xc00>
   12158:	strd	r2, [sp, #24]
   1215c:	bl	1294c <__assert_fail@plt+0x13e8>
   12160:	ldrd	r2, [sp, #24]
   12164:	adds	r2, r2, #1
   12168:	adc	r3, r3, #0
   1216c:	b	120b8 <__assert_fail@plt+0xb54>
   12170:	bl	12e88 <__assert_fail@plt+0x1924>
   12174:	mov	r2, r0
   12178:	mov	r3, r1
   1217c:	ldrd	r0, [sp, #24]
   12180:	cmp	r2, r0
   12184:	sbcs	r1, r3, r1
   12188:	blt	12238 <__assert_fail@plt+0xcd4>
   1218c:	bl	125d4 <__assert_fail@plt+0x1070>
   12190:	ldrb	r3, [r4, #224]	; 0xe0
   12194:	cmp	r3, #0
   12198:	beq	121a0 <__assert_fail@plt+0xc3c>
   1219c:	bl	12ee8 <__assert_fail@plt+0x1984>
   121a0:	bl	12e60 <__assert_fail@plt+0x18fc>
   121a4:	cmp	r0, #0
   121a8:	beq	121b8 <__assert_fail@plt+0xc54>
   121ac:	ldrb	r3, [r4, #224]	; 0xe0
   121b0:	cmp	r3, #0
   121b4:	beq	12228 <__assert_fail@plt+0xcc4>
   121b8:	mov	r6, r9
   121bc:	mov	r7, sl
   121c0:	ldr	r5, [r4, #20]
   121c4:	add	r5, r5, r8
   121c8:	ldrb	r3, [r5, #28]
   121cc:	cmp	r3, #0
   121d0:	bne	121e4 <__assert_fail@plt+0xc80>
   121d4:	ldrd	r2, [r5, #16]
   121d8:	cmp	r2, r6
   121dc:	sbcs	r3, r3, r7
   121e0:	blt	12124 <__assert_fail@plt+0xbc0>
   121e4:	ldrd	r2, [r5, #8]
   121e8:	adds	r9, r6, #1
   121ec:	adc	sl, r7, #0
   121f0:	umull	r0, r1, r2, r9
   121f4:	mul	r3, r9, r3
   121f8:	strd	r0, [sp, #24]
   121fc:	mla	r3, r2, sl, r3
   12200:	ldr	r2, [sp, #28]
   12204:	add	r3, r3, r2
   12208:	str	r3, [sp, #28]
   1220c:	bl	127bc <__assert_fail@plt+0x1258>
   12210:	bl	12e60 <__assert_fail@plt+0x18fc>
   12214:	cmp	r0, #0
   12218:	beq	12170 <__assert_fail@plt+0xc0c>
   1221c:	ldrb	r3, [r4, #224]	; 0xe0
   12220:	cmp	r3, #0
   12224:	beq	12170 <__assert_fail@plt+0xc0c>
   12228:	mov	r2, r6
   1222c:	mov	r3, r7
   12230:	add	r0, r5, #8
   12234:	bl	12884 <__assert_fail@plt+0x1320>
   12238:	strd	r2, [sp, #56]	; 0x38
   1223c:	bl	12ee8 <__assert_fail@plt+0x1984>
   12240:	ldrd	r2, [sp, #56]	; 0x38
   12244:	adds	r2, r2, #1
   12248:	adc	r3, r3, #0
   1224c:	cmp	r0, #0
   12250:	beq	12228 <__assert_fail@plt+0xcc4>
   12254:	strd	r2, [sp, #56]	; 0x38
   12258:	bl	1294c <__assert_fail@plt+0x13e8>
   1225c:	ldrd	r2, [sp, #56]	; 0x38
   12260:	b	1217c <__assert_fail@plt+0xc18>
   12264:	add	sp, sp, #220	; 0xdc
   12268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1226c:	andeq	r1, r2, sp, lsl #27
   12270:	ldrdeq	r3, [r3], -r0
   12274:	andeq	r1, r2, r4, ror lr
   12278:	ldrdeq	r1, [r2], -r1	; <UNPREDICTABLE>
   1227c:	andeq	r3, r1, r8, lsl #7
   12280:	andeq	r1, r2, r8, ror #13
   12284:			; <UNDEFINED> instruction: 0x00021eba
   12288:	andeq	r3, r3, r8, asr #3
   1228c:	andeq	r1, r2, ip, lsl #29
   12290:			; <UNDEFINED> instruction: 0x000331b8
   12294:	andeq	r1, r2, r5, asr #29
   12298:	andeq	r1, r2, pc, lsl #29
   1229c:	andeq	r3, r3, r0, ror #2
   122a0:	muleq	r2, lr, lr
   122a4:	andeq	r3, r3, r4, asr #3
   122a8:	andeq	r1, r2, sp, asr #27
   122ac:	andeq	r1, r2, lr, lsr #29
   122b0:	andeq	r1, r2, r7, ror #16
   122b4:	andeq	r3, r3, r4, ror #2
   122b8:	ldrdeq	r1, [r2], -r5
   122bc:	ldrdeq	r2, [r2], -r0
   122c0:	strdeq	r1, [r2], -lr
   122c4:	andeq	r1, r2, lr, ror #29
   122c8:	andeq	r1, r2, lr, lsl pc
   122cc:	muleq	r2, lr, pc	; <UNPREDICTABLE>
   122d0:	andeq	r1, r2, r0, ror pc
   122d4:	andeq	r1, r2, r5, asr #30
   122d8:	ldrdeq	r1, [r2], -r0
   122dc:	muleq	r2, r8, r7
   122e0:	andeq	r3, r3, r4, lsl #4
   122e4:	ldrdeq	r2, [r1], -ip
   122e8:	andeq	r1, r2, r3, lsr #16
   122ec:	andeq	r2, r2, r9, lsl r0
   122f0:	strdeq	r3, [r3], -ip
   122f4:	andeq	r2, r2, ip, lsr r0
   122f8:	andeq	r2, r2, pc, asr r0
   122fc:	andeq	r2, r2, r4, lsl #1
   12300:	muleq	r2, r8, r0
   12304:	andeq	r2, r2, r2, asr #1
   12308:	strdeq	r2, [r2], -fp
   1230c:	andeq	r2, r2, r8, lsr r1
   12310:	andeq	r2, r2, ip, asr r1
   12314:	andeq	r2, r2, r6, lsl #3
   12318:	andeq	r1, r2, r2, ror #15
   1231c:	mov	fp, #0
   12320:	mov	lr, #0
   12324:	pop	{r1}		; (ldr r1, [sp], #4)
   12328:	mov	r2, sp
   1232c:	push	{r2}		; (str r2, [sp, #-4]!)
   12330:	push	{r0}		; (str r0, [sp, #-4]!)
   12334:	ldr	ip, [pc, #16]	; 1234c <__assert_fail@plt+0xde8>
   12338:	push	{ip}		; (str ip, [sp, #-4]!)
   1233c:	ldr	r0, [pc, #12]	; 12350 <__assert_fail@plt+0xdec>
   12340:	ldr	r3, [pc, #12]	; 12354 <__assert_fail@plt+0xdf0>
   12344:	bl	113b4 <__libc_start_main@plt>
   12348:	bl	11540 <abort@plt>
   1234c:	andeq	r1, r2, ip, ror r6
   12350:	andeq	r1, r1, r8, lsl #11
   12354:	andeq	r1, r2, ip, lsl r6
   12358:	ldr	r3, [pc, #20]	; 12374 <__assert_fail@plt+0xe10>
   1235c:	ldr	r2, [pc, #20]	; 12378 <__assert_fail@plt+0xe14>
   12360:	add	r3, pc, r3
   12364:	ldr	r2, [r3, r2]
   12368:	cmp	r2, #0
   1236c:	bxeq	lr
   12370:	b	113cc <__gmon_start__@plt>
   12374:	muleq	r2, r8, ip
   12378:	andeq	r0, r0, r4, asr r1
   1237c:	ldr	r0, [pc, #24]	; 1239c <__assert_fail@plt+0xe38>
   12380:	ldr	r3, [pc, #24]	; 123a0 <__assert_fail@plt+0xe3c>
   12384:	cmp	r3, r0
   12388:	bxeq	lr
   1238c:	ldr	r3, [pc, #16]	; 123a4 <__assert_fail@plt+0xe40>
   12390:	cmp	r3, #0
   12394:	bxeq	lr
   12398:	bx	r3
   1239c:	andeq	r3, r3, ip, lsr #3
   123a0:	andeq	r3, r3, ip, lsr #3
   123a4:	andeq	r0, r0, r0
   123a8:	ldr	r0, [pc, #36]	; 123d4 <__assert_fail@plt+0xe70>
   123ac:	ldr	r1, [pc, #36]	; 123d8 <__assert_fail@plt+0xe74>
   123b0:	sub	r1, r1, r0
   123b4:	asr	r1, r1, #2
   123b8:	add	r1, r1, r1, lsr #31
   123bc:	asrs	r1, r1, #1
   123c0:	bxeq	lr
   123c4:	ldr	r3, [pc, #16]	; 123dc <__assert_fail@plt+0xe78>
   123c8:	cmp	r3, #0
   123cc:	bxeq	lr
   123d0:	bx	r3
   123d4:	andeq	r3, r3, ip, lsr #3
   123d8:	andeq	r3, r3, ip, lsr #3
   123dc:	andeq	r0, r0, r0
   123e0:	push	{r4, lr}
   123e4:	ldr	r4, [pc, #24]	; 12404 <__assert_fail@plt+0xea0>
   123e8:	ldrb	r3, [r4]
   123ec:	cmp	r3, #0
   123f0:	popne	{r4, pc}
   123f4:	bl	1237c <__assert_fail@plt+0xe18>
   123f8:	mov	r3, #1
   123fc:	strb	r3, [r4]
   12400:	pop	{r4, pc}
   12404:	andeq	r3, r3, ip, asr #3
   12408:	b	123a8 <__assert_fail@plt+0xe44>
   1240c:	push	{r0, r1, r4, r5, r6, lr}
   12410:	mov	r5, r0
   12414:	ldr	r4, [pc, #108]	; 12488 <__assert_fail@plt+0xf24>
   12418:	ldr	r0, [r4]
   1241c:	ldr	r1, [r4, #4]
   12420:	bl	11354 <strcpy@plt>
   12424:	ldr	r3, [r4, #8]
   12428:	ldr	r6, [r4]
   1242c:	ldr	r0, [r4, #4]
   12430:	cmp	r3, #0
   12434:	beq	12460 <__assert_fail@plt+0xefc>
   12438:	bl	113fc <strlen@plt>
   1243c:	add	r0, r6, r0
   12440:	mvn	r2, #0
   12444:	str	r5, [sp]
   12448:	mov	r1, #1
   1244c:	ldr	r3, [r4, #8]
   12450:	bl	1142c <__sprintf_chk@plt>
   12454:	ldr	r0, [r4]
   12458:	add	sp, sp, #8
   1245c:	pop	{r4, r5, r6, pc}
   12460:	bl	113fc <strlen@plt>
   12464:	ldr	r3, [pc, #32]	; 1248c <__assert_fail@plt+0xf28>
   12468:	mvn	r2, #0
   1246c:	mov	r1, #1
   12470:	add	r0, r6, r0
   12474:	ldr	r3, [r3]
   12478:	stm	sp, {r3, r5}
   1247c:	ldr	r3, [pc, #12]	; 12490 <__assert_fail@plt+0xf2c>
   12480:	bl	1142c <__sprintf_chk@plt>
   12484:	b	12454 <__assert_fail@plt+0xef0>
   12488:	ldrdeq	r3, [r3], -r0
   1248c:	andeq	r3, r3, r0, ror #2
   12490:	andeq	r1, r2, r4, asr #15
   12494:	push	{r0, r1, r2, r4, r5, lr}
   12498:	ldr	r4, [pc, #104]	; 12508 <__assert_fail@plt+0xfa4>
   1249c:	ldrd	r2, [r4, #12]
   124a0:	cmp	r2, r3
   124a4:	bne	124c8 <__assert_fail@plt+0xf64>
   124a8:	mov	r3, #64	; 0x40
   124ac:	mov	r2, #1
   124b0:	add	r1, r4, #16
   124b4:	str	r3, [sp]
   124b8:	mvn	r3, #0
   124bc:	ldr	r0, [r4, #20]
   124c0:	bl	202d0 <__assert_fail@plt+0xed6c>
   124c4:	str	r0, [r4, #20]
   124c8:	ldr	r3, [r4, #12]
   124cc:	mov	r5, #0
   124d0:	ldr	r2, [r4, #20]
   124d4:	add	r1, r3, #1
   124d8:	lsl	r3, r3, #6
   124dc:	add	r0, r2, r3
   124e0:	str	r1, [r4, #12]
   124e4:	mov	r4, #0
   124e8:	mov	r1, #0
   124ec:	strd	r4, [r0, #8]
   124f0:	strd	r4, [r0, #16]
   124f4:	strb	r1, [r0, #28]
   124f8:	strb	r1, [r0, #30]
   124fc:	strd	r4, [r2, r3]
   12500:	add	sp, sp, #12
   12504:	pop	{r4, r5, pc}
   12508:	ldrdeq	r3, [r3], -r0
   1250c:	push	{r4, r5, r6, lr}
   12510:	mov	r4, r0
   12514:	ldr	r0, [r0, #32]
   12518:	cmp	r0, #0
   1251c:	bne	12534 <__assert_fail@plt+0xfd0>
   12520:	ldr	r0, [r4, #28]
   12524:	bl	13648 <__assert_fail@plt+0x20e4>
   12528:	mov	r0, r4
   1252c:	pop	{r4, r5, r6, lr}
   12530:	b	13648 <__assert_fail@plt+0x20e4>
   12534:	ldr	r5, [r0, #652]	; 0x28c
   12538:	bl	13648 <__assert_fail@plt+0x20e4>
   1253c:	mov	r0, r5
   12540:	b	12518 <__assert_fail@plt+0xfb4>
   12544:	ldr	r3, [pc, #128]	; 125cc <__assert_fail@plt+0x1068>
   12548:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1254c:	mov	r8, r0
   12550:	ldr	r9, [pc, #120]	; 125d0 <__assert_fail@plt+0x106c>
   12554:	mov	r4, r3
   12558:	ldr	r5, [r3, #24]
   1255c:	subs	r5, r5, #1
   12560:	bpl	12570 <__assert_fail@plt+0x100c>
   12564:	mov	r3, #0
   12568:	str	r3, [r4, #24]
   1256c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12570:	mov	r0, r5
   12574:	bl	1240c <__assert_fail@plt+0xea8>
   12578:	mov	sl, r0
   1257c:	bl	112dc <unlink@plt>
   12580:	cmp	r0, #0
   12584:	beq	1255c <__assert_fail@plt+0xff8>
   12588:	bl	11414 <__errno_location@plt>
   1258c:	ldr	r7, [r0]
   12590:	cmp	r7, #2
   12594:	movne	r6, r8
   12598:	orreq	r6, r8, #1
   1259c:	cmp	r6, #0
   125a0:	bne	1255c <__assert_fail@plt+0xff8>
   125a4:	mov	r2, sl
   125a8:	mov	r1, #3
   125ac:	mov	r0, r6
   125b0:	bl	14cb8 <__assert_fail@plt+0x3754>
   125b4:	mov	r3, r0
   125b8:	mov	r2, r9
   125bc:	mov	r1, r7
   125c0:	mov	r0, r6
   125c4:	bl	11384 <error@plt>
   125c8:	b	1255c <__assert_fail@plt+0xff8>
   125cc:	ldrdeq	r3, [r3], -r0
   125d0:	strdeq	r2, [r2], -r8
   125d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   125d8:	sub	sp, sp, #132	; 0x84
   125dc:	ldr	r5, [pc, #372]	; 12758 <__assert_fail@plt+0x11f4>
   125e0:	ldr	r6, [r5, #28]
   125e4:	cmp	r6, #0
   125e8:	beq	12714 <__assert_fail@plt+0x11b0>
   125ec:	mov	r0, r6
   125f0:	bl	1136c <ferror_unlocked@plt>
   125f4:	subs	r7, r0, #0
   125f8:	beq	1263c <__assert_fail@plt+0x10d8>
   125fc:	mov	r2, #5
   12600:	ldr	r1, [pc, #340]	; 1275c <__assert_fail@plt+0x11f8>
   12604:	mov	r0, #0
   12608:	bl	112d0 <dcgettext@plt>
   1260c:	mov	r4, r0
   12610:	mov	r0, #4
   12614:	ldr	r1, [r5, #32]
   12618:	bl	14c14 <__assert_fail@plt+0x36b0>
   1261c:	mov	r1, #0
   12620:	mov	r3, r0
   12624:	mov	r2, r4
   12628:	mov	r0, r1
   1262c:	bl	11384 <error@plt>
   12630:	mov	r3, #0
   12634:	str	r3, [r5, #28]
   12638:	bl	1276c <__assert_fail@plt+0x1208>
   1263c:	mov	r0, r6
   12640:	bl	1345c <__assert_fail@plt+0x1ef8>
   12644:	subs	r6, r0, #0
   12648:	beq	12680 <__assert_fail@plt+0x111c>
   1264c:	bl	11414 <__errno_location@plt>
   12650:	ldr	r4, [r0]
   12654:	mov	r1, #3
   12658:	mov	r0, r7
   1265c:	ldr	r2, [r5, #32]
   12660:	bl	14cb8 <__assert_fail@plt+0x3754>
   12664:	mov	r3, r0
   12668:	ldr	r2, [pc, #240]	; 12760 <__assert_fail@plt+0x11fc>
   1266c:	mov	r0, r7
   12670:	mov	r1, r4
   12674:	bl	11384 <error@plt>
   12678:	str	r7, [r5, #28]
   1267c:	b	12638 <__assert_fail@plt+0x10d4>
   12680:	ldrd	r8, [r5, #40]	; 0x28
   12684:	mov	r4, r5
   12688:	orrs	r3, r8, r9
   1268c:	bne	1271c <__assert_fail@plt+0x11b8>
   12690:	ldrb	r3, [r5, #48]	; 0x30
   12694:	cmp	r3, #0
   12698:	beq	1271c <__assert_fail@plt+0x11b8>
   1269c:	add	r1, r5, #52	; 0x34
   126a0:	mov	r2, sp
   126a4:	bl	11228 <sigprocmask@plt>
   126a8:	ldr	r7, [r5, #32]
   126ac:	mov	r0, r7
   126b0:	bl	112dc <unlink@plt>
   126b4:	mov	r8, r0
   126b8:	bl	11414 <__errno_location@plt>
   126bc:	ldr	r3, [r4, #24]
   126c0:	mov	r2, r6
   126c4:	mov	r1, sp
   126c8:	ldr	r5, [r0]
   126cc:	mov	r0, #2
   126d0:	sub	r3, r3, #1
   126d4:	str	r3, [r4, #24]
   126d8:	bl	11228 <sigprocmask@plt>
   126dc:	cmp	r8, #0
   126e0:	cmpne	r5, #2
   126e4:	beq	1270c <__assert_fail@plt+0x11a8>
   126e8:	mov	r2, r7
   126ec:	mov	r1, #3
   126f0:	mov	r0, r6
   126f4:	bl	14cb8 <__assert_fail@plt+0x3754>
   126f8:	mov	r3, r0
   126fc:	ldr	r2, [pc, #92]	; 12760 <__assert_fail@plt+0x11fc>
   12700:	mov	r1, r5
   12704:	mov	r0, r6
   12708:	bl	11384 <error@plt>
   1270c:	mov	r3, #0
   12710:	str	r3, [r4, #28]
   12714:	add	sp, sp, #132	; 0x84
   12718:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1271c:	ldrb	r3, [r4, #180]	; 0xb4
   12720:	cmp	r3, #0
   12724:	bne	1270c <__assert_fail@plt+0x11a8>
   12728:	ldr	r3, [pc, #52]	; 12764 <__assert_fail@plt+0x1200>
   1272c:	mov	r2, sp
   12730:	mov	r1, r9
   12734:	mov	r0, r8
   12738:	ldr	r5, [r3]
   1273c:	bl	13730 <__assert_fail@plt+0x21cc>
   12740:	mov	r3, r0
   12744:	ldr	r2, [pc, #28]	; 12768 <__assert_fail@plt+0x1204>
   12748:	mov	r1, #1
   1274c:	mov	r0, r5
   12750:	bl	11480 <__fprintf_chk@plt>
   12754:	b	1270c <__assert_fail@plt+0x11a8>
   12758:	ldrdeq	r3, [r3], -r0
   1275c:	andeq	r1, r2, r9, asr #15
   12760:	strdeq	r2, [r2], -r8
   12764:	andeq	r3, r3, r4, asr #3
   12768:			; <UNDEFINED> instruction: 0x000225b9
   1276c:	ldr	r4, [pc, #68]	; 127b8 <__assert_fail@plt+0x1254>
   12770:	push	{lr}		; (str lr, [sp, #-4]!)
   12774:	sub	sp, sp, #132	; 0x84
   12778:	bl	125d4 <__assert_fail@plt+0x1070>
   1277c:	mov	r2, sp
   12780:	add	r1, r4, #52	; 0x34
   12784:	mov	r0, #0
   12788:	bl	11228 <sigprocmask@plt>
   1278c:	ldrb	r3, [r4, #181]	; 0xb5
   12790:	cmp	r3, #0
   12794:	beq	127a0 <__assert_fail@plt+0x123c>
   12798:	mov	r0, #0
   1279c:	bl	12544 <__assert_fail@plt+0xfe0>
   127a0:	mov	r2, #0
   127a4:	mov	r1, sp
   127a8:	mov	r0, #2
   127ac:	bl	11228 <sigprocmask@plt>
   127b0:	mov	r0, #1
   127b4:	bl	113f0 <exit@plt>
   127b8:	ldrdeq	r3, [r3], -r0
   127bc:	push	{r4, r5, r6, r7, r8, lr}
   127c0:	sub	sp, sp, #128	; 0x80
   127c4:	ldr	r4, [pc, #172]	; 12878 <__assert_fail@plt+0x1314>
   127c8:	ldr	r5, [r4, #24]
   127cc:	mov	r8, r4
   127d0:	mov	r0, r5
   127d4:	bl	1240c <__assert_fail@plt+0xea8>
   127d8:	cmn	r5, #-2147483647	; 0x80000001
   127dc:	str	r0, [r4, #32]
   127e0:	moveq	r7, #75	; 0x4b
   127e4:	beq	1283c <__assert_fail@plt+0x12d8>
   127e8:	mov	r2, sp
   127ec:	mov	r6, r0
   127f0:	add	r1, r4, #52	; 0x34
   127f4:	mov	r0, #0
   127f8:	bl	11228 <sigprocmask@plt>
   127fc:	ldr	r1, [pc, #120]	; 1287c <__assert_fail@plt+0x1318>
   12800:	mov	r0, r6
   12804:	bl	135b4 <__assert_fail@plt+0x2050>
   12808:	cmp	r0, #0
   1280c:	addne	r5, r5, #1
   12810:	mov	r6, r0
   12814:	str	r0, [r4, #28]
   12818:	bl	11414 <__errno_location@plt>
   1281c:	mov	r2, #0
   12820:	mov	r1, sp
   12824:	ldr	r7, [r0]
   12828:	mov	r0, #2
   1282c:	str	r5, [r4, #24]
   12830:	bl	11228 <sigprocmask@plt>
   12834:	cmp	r6, #0
   12838:	bne	12864 <__assert_fail@plt+0x1300>
   1283c:	mov	r1, #3
   12840:	mov	r0, #0
   12844:	ldr	r2, [r8, #32]
   12848:	bl	14cb8 <__assert_fail@plt+0x3754>
   1284c:	mov	r3, r0
   12850:	ldr	r2, [pc, #40]	; 12880 <__assert_fail@plt+0x131c>
   12854:	mov	r1, r7
   12858:	mov	r0, #0
   1285c:	bl	11384 <error@plt>
   12860:	bl	1276c <__assert_fail@plt+0x1208>
   12864:	mov	r2, #0
   12868:	mov	r3, #0
   1286c:	strd	r2, [r4, #40]	; 0x28
   12870:	add	sp, sp, #128	; 0x80
   12874:	pop	{r4, r5, r6, r7, r8, pc}
   12878:	ldrdeq	r3, [r3], -r0
   1287c:	ldrdeq	r1, [r2], -ip
   12880:	strdeq	r2, [r2], -r8
   12884:	ldr	r4, [pc, #176]	; 1293c <__assert_fail@plt+0x13d8>
   12888:	mov	sl, r0
   1288c:	mov	r6, r2
   12890:	push	{r7, lr}
   12894:	mov	r2, #5
   12898:	sub	sp, sp, #32
   1289c:	mov	r0, #0
   128a0:	mov	r7, r3
   128a4:	ldr	r1, [pc, #148]	; 12940 <__assert_fail@plt+0x13dc>
   128a8:	ldr	r5, [r4]
   128ac:	bl	112d0 <dcgettext@plt>
   128b0:	ldr	r3, [pc, #140]	; 12944 <__assert_fail@plt+0x13e0>
   128b4:	add	r2, sp, #8
   128b8:	mov	r8, r0
   128bc:	ldrd	r0, [sl]
   128c0:	ldr	r9, [r3]
   128c4:	bl	13730 <__assert_fail@plt+0x21cc>
   128c8:	bl	14df8 <__assert_fail@plt+0x3894>
   128cc:	mov	r2, r8
   128d0:	mov	r1, #1
   128d4:	str	r0, [sp]
   128d8:	mov	r0, r5
   128dc:	mov	r3, r9
   128e0:	bl	11480 <__fprintf_chk@plt>
   128e4:	orrs	r3, r6, r7
   128e8:	beq	1292c <__assert_fail@plt+0x13c8>
   128ec:	ldr	r4, [r4]
   128f0:	mov	r2, #5
   128f4:	mov	r0, #0
   128f8:	ldr	r1, [pc, #72]	; 12948 <__assert_fail@plt+0x13e4>
   128fc:	bl	112d0 <dcgettext@plt>
   12900:	mov	r5, r0
   12904:	add	r2, sp, #8
   12908:	mov	r1, r7
   1290c:	mov	r0, r6
   12910:	bl	13730 <__assert_fail@plt+0x21cc>
   12914:	mov	r3, r0
   12918:	mov	r2, r5
   1291c:	mov	r1, #1
   12920:	mov	r0, r4
   12924:	bl	11480 <__fprintf_chk@plt>
   12928:	bl	1276c <__assert_fail@plt+0x1208>
   1292c:	mov	r0, #10
   12930:	ldr	r1, [r4]
   12934:	bl	114f8 <fputc@plt>
   12938:	b	12928 <__assert_fail@plt+0x13c4>
   1293c:	andeq	r3, r3, r0, asr #3
   12940:	ldrdeq	r1, [r2], -lr
   12944:	andeq	r3, r3, r8, asr #5
   12948:	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
   1294c:	push	{r4, r5, r6, r7, r8, lr}
   12950:	mov	r1, #1
   12954:	mov	r5, r0
   12958:	ldr	r4, [pc, #116]	; 129d4 <__assert_fail@plt+0x1470>
   1295c:	ldr	r2, [r0]
   12960:	ldr	r0, [r0, #4]
   12964:	ldr	r3, [r4, #28]
   12968:	bl	112ac <fwrite_unlocked@plt>
   1296c:	ldr	r1, [r5]
   12970:	cmp	r1, r0
   12974:	beq	129c0 <__assert_fail@plt+0x145c>
   12978:	bl	11414 <__errno_location@plt>
   1297c:	ldr	r5, [r0]
   12980:	mov	r2, #5
   12984:	mov	r0, #0
   12988:	ldr	r1, [pc, #72]	; 129d8 <__assert_fail@plt+0x1474>
   1298c:	bl	112d0 <dcgettext@plt>
   12990:	mov	r6, r0
   12994:	mov	r0, #4
   12998:	ldr	r1, [r4, #32]
   1299c:	bl	14c14 <__assert_fail@plt+0x36b0>
   129a0:	mov	r3, r0
   129a4:	mov	r2, r6
   129a8:	mov	r1, r5
   129ac:	mov	r0, #0
   129b0:	bl	11384 <error@plt>
   129b4:	mov	r3, #0
   129b8:	str	r3, [r4, #28]
   129bc:	bl	1276c <__assert_fail@plt+0x1208>
   129c0:	ldrd	r2, [r4, #40]	; 0x28
   129c4:	adds	r6, r2, r1
   129c8:	adc	r7, r3, r1, asr #31
   129cc:	strd	r6, [r4, #40]	; 0x28
   129d0:	pop	{r4, r5, r6, r7, r8, pc}
   129d4:	ldrdeq	r3, [r3], -r0
   129d8:	andeq	r1, r2, r9, asr #15
   129dc:	ldr	r3, [pc, #48]	; 12a14 <__assert_fail@plt+0x14b0>
   129e0:	push	{r4, lr}
   129e4:	mov	r4, r0
   129e8:	ldrb	r3, [r3, #181]	; 0xb5
   129ec:	cmp	r3, #0
   129f0:	beq	129fc <__assert_fail@plt+0x1498>
   129f4:	mov	r0, #1
   129f8:	bl	12544 <__assert_fail@plt+0xfe0>
   129fc:	mov	r0, r4
   12a00:	mov	r1, #0
   12a04:	bl	112a0 <signal@plt>
   12a08:	mov	r0, r4
   12a0c:	pop	{r4, lr}
   12a10:	b	111d4 <raise@plt>
   12a14:	ldrdeq	r3, [r3], -r0
   12a18:	push	{r4, r5, r6, r7, r8, lr}
   12a1c:	mov	r4, r0
   12a20:	mov	r7, r1
   12a24:	mov	r6, r2
   12a28:	ldr	r5, [r0, #32]
   12a2c:	cmp	r5, #0
   12a30:	bne	12a54 <__assert_fail@plt+0x14f0>
   12a34:	mov	r0, #656	; 0x290
   12a38:	bl	20198 <__assert_fail@plt+0xec34>
   12a3c:	str	r5, [r0]
   12a40:	str	r5, [r0, #4]
   12a44:	str	r5, [r0, #8]
   12a48:	str	r0, [r4, #32]
   12a4c:	str	r0, [r4, #36]	; 0x24
   12a50:	str	r5, [r0, #652]	; 0x28c
   12a54:	ldr	r5, [r4, #36]	; 0x24
   12a58:	ldr	r3, [r5]
   12a5c:	cmp	r3, #80	; 0x50
   12a60:	bne	12a90 <__assert_fail@plt+0x152c>
   12a64:	mov	r0, #656	; 0x290
   12a68:	bl	20198 <__assert_fail@plt+0xec34>
   12a6c:	mov	r3, #0
   12a70:	str	r3, [r0]
   12a74:	str	r3, [r0, #4]
   12a78:	str	r3, [r0, #8]
   12a7c:	str	r3, [r0, #652]	; 0x28c
   12a80:	ldr	r3, [r4, #36]	; 0x24
   12a84:	str	r0, [r5, #652]	; 0x28c
   12a88:	ldr	r3, [r3, #652]	; 0x28c
   12a8c:	str	r3, [r4, #36]	; 0x24
   12a90:	ldr	r3, [r4, #36]	; 0x24
   12a94:	ldr	r2, [r3, #4]
   12a98:	add	r1, r3, r2, lsl #3
   12a9c:	add	r2, r2, #1
   12aa0:	strd	r6, [r1, #12]
   12aa4:	ldr	r1, [r3]
   12aa8:	str	r2, [r3, #4]
   12aac:	add	r1, r1, #1
   12ab0:	str	r1, [r3]
   12ab4:	pop	{r4, r5, r6, r7, r8, pc}
   12ab8:	push	{r4, lr}
   12abc:	mov	r2, #5
   12ac0:	mov	r0, #0
   12ac4:	ldr	r1, [pc, #24]	; 12ae4 <__assert_fail@plt+0x1580>
   12ac8:	bl	112d0 <dcgettext@plt>
   12acc:	mov	r1, #0
   12ad0:	mov	r3, r0
   12ad4:	ldr	r2, [pc, #12]	; 12ae8 <__assert_fail@plt+0x1584>
   12ad8:	mov	r0, r1
   12adc:	bl	11384 <error@plt>
   12ae0:	bl	1276c <__assert_fail@plt+0x1208>
   12ae4:	andeq	r1, r2, r2, lsl r8
   12ae8:	strdeq	r2, [r2], -r8
   12aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af0:	sub	sp, sp, #20
   12af4:	ldr	r5, [pc, #640]	; 12d7c <__assert_fail@plt+0x1818>
   12af8:	ldrb	r3, [r5, #182]	; 0xb6
   12afc:	cmp	r3, #0
   12b00:	bne	12d74 <__assert_fail@plt+0x1810>
   12b04:	ldr	r6, [r5, #184]	; 0xb8
   12b08:	movw	r3, #8190	; 0x1ffe
   12b0c:	mov	r7, #0
   12b10:	mov	r8, #1
   12b14:	cmp	r6, r3
   12b18:	addgt	r6, r6, #1
   12b1c:	movwle	r6, #8191	; 0x1fff
   12b20:	mov	r0, #48	; 0x30
   12b24:	bl	20198 <__assert_fail@plt+0xec34>
   12b28:	mov	r4, r0
   12b2c:	mov	r2, r6
   12b30:	mvn	r3, #0
   12b34:	mov	r1, r0
   12b38:	mov	r0, #0
   12b3c:	str	r7, [r4]
   12b40:	str	r8, [sp]
   12b44:	bl	202d0 <__assert_fail@plt+0xed6c>
   12b48:	ldr	sl, [r5, #184]	; 0xb8
   12b4c:	mov	r9, r0
   12b50:	str	r7, [r4, #4]
   12b54:	ldr	r3, [r5, #192]	; 0xc0
   12b58:	str	r7, [r4, #24]
   12b5c:	ldr	r2, [r5, #196]	; 0xc4
   12b60:	str	r0, [r4, #28]
   12b64:	str	r7, [r4, #32]
   12b68:	adds	r3, r3, #1
   12b6c:	ldr	r6, [r4]
   12b70:	adc	r2, r2, #0
   12b74:	cmp	sl, #0
   12b78:	str	r3, [r4, #8]
   12b7c:	str	r7, [r4, #36]	; 0x24
   12b80:	strd	r2, [r4, #12]
   12b84:	str	r2, [r4, #20]
   12b88:	str	r7, [r4, #40]	; 0x28
   12b8c:	beq	12bb4 <__assert_fail@plt+0x1650>
   12b90:	mov	r2, sl
   12b94:	ldr	r1, [r5, #200]	; 0xc8
   12b98:	add	r9, r0, sl
   12b9c:	bl	11264 <memcpy@plt>
   12ba0:	ldr	r3, [r4, #4]
   12ba4:	sub	r6, r6, sl
   12ba8:	str	r7, [r5, #184]	; 0xb8
   12bac:	add	r3, r3, sl
   12bb0:	str	r3, [r4, #4]
   12bb4:	subs	r2, r6, #1
   12bb8:	beq	12c08 <__assert_fail@plt+0x16a4>
   12bbc:	mov	r1, r9
   12bc0:	mov	r0, #0
   12bc4:	bl	1fc18 <__assert_fail@plt+0xe6b4>
   12bc8:	subs	r2, r0, #0
   12bcc:	strbeq	r8, [r5, #182]	; 0xb6
   12bd0:	beq	12c08 <__assert_fail@plt+0x16a4>
   12bd4:	cmn	r2, #1
   12bd8:	bne	12c08 <__assert_fail@plt+0x16a4>
   12bdc:	bl	11414 <__errno_location@plt>
   12be0:	ldr	r4, [r0]
   12be4:	mov	r2, #5
   12be8:	mov	r0, #0
   12bec:	ldr	r1, [pc, #396]	; 12d80 <__assert_fail@plt+0x181c>
   12bf0:	bl	112d0 <dcgettext@plt>
   12bf4:	mov	r2, r0
   12bf8:	mov	r0, #0
   12bfc:	mov	r1, r4
   12c00:	bl	11384 <error@plt>
   12c04:	bl	1276c <__assert_fail@plt+0x1208>
   12c08:	ldr	r0, [r4, #4]
   12c0c:	add	r2, r2, r0
   12c10:	cmp	r2, #0
   12c14:	str	r2, [r4, #4]
   12c18:	bne	12c38 <__assert_fail@plt+0x16d4>
   12c1c:	ldrb	r3, [r5, #182]	; 0xb6
   12c20:	cmp	r3, #0
   12c24:	beq	12d30 <__assert_fail@plt+0x17cc>
   12c28:	mov	r0, r4
   12c2c:	mov	r6, #0
   12c30:	bl	1250c <__assert_fail@plt+0xfa8>
   12c34:	b	12cfc <__assert_fail@plt+0x1798>
   12c38:	ldr	r9, [r4, #28]
   12c3c:	mov	r3, #10
   12c40:	mov	r6, #0
   12c44:	add	sl, r9, r2
   12c48:	strb	r3, [r9, r2]
   12c4c:	mov	r1, #10
   12c50:	mov	r0, r9
   12c54:	bl	11318 <rawmemchr@plt>
   12c58:	cmp	sl, r0
   12c5c:	sub	fp, r0, r9
   12c60:	str	r0, [sp, #12]
   12c64:	beq	12c88 <__assert_fail@plt+0x1724>
   12c68:	mov	r1, r9
   12c6c:	add	r2, fp, #1
   12c70:	mov	r0, r4
   12c74:	add	r6, r6, #1
   12c78:	bl	12a18 <__assert_fail@plt+0x14b4>
   12c7c:	ldr	r3, [sp, #12]
   12c80:	add	r9, r3, #1
   12c84:	b	12c4c <__assert_fail@plt+0x16e8>
   12c88:	cmp	fp, #0
   12c8c:	beq	12cb0 <__assert_fail@plt+0x174c>
   12c90:	ldrb	r3, [r5, #182]	; 0xb6
   12c94:	cmp	r3, #0
   12c98:	beq	12d0c <__assert_fail@plt+0x17a8>
   12c9c:	mov	r2, fp
   12ca0:	mov	r1, r9
   12ca4:	mov	r0, r4
   12ca8:	add	r6, r6, #1
   12cac:	bl	12a18 <__assert_fail@plt+0x14b4>
   12cb0:	ldrd	sl, [r5, #192]	; 0xc0
   12cb4:	str	r6, [r4, #24]
   12cb8:	adds	r0, sl, #1
   12cbc:	adc	r1, fp, #0
   12cc0:	adds	r2, sl, r6
   12cc4:	adc	r3, fp, r6, asr #31
   12cc8:	cmp	r6, #0
   12ccc:	strd	r0, [r4, #8]
   12cd0:	strd	r0, [r4, #16]
   12cd4:	strd	r2, [r5, #192]	; 0xc0
   12cd8:	beq	12c1c <__assert_fail@plt+0x16b8>
   12cdc:	mov	r3, #0
   12ce0:	str	r3, [r4, #40]	; 0x28
   12ce4:	ldr	r3, [r4, #32]
   12ce8:	str	r3, [r4, #36]	; 0x24
   12cec:	ldr	r3, [r5, #204]	; 0xcc
   12cf0:	cmp	r3, #0
   12cf4:	bne	12d60 <__assert_fail@plt+0x17fc>
   12cf8:	str	r4, [r5, #204]	; 0xcc
   12cfc:	adds	r0, r6, #0
   12d00:	movne	r0, #1
   12d04:	add	sp, sp, #20
   12d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d0c:	mov	r1, fp
   12d10:	mov	r0, r9
   12d14:	bl	203e4 <__assert_fail@plt+0xee80>
   12d18:	mov	r9, r0
   12d1c:	ldr	r0, [r5, #200]	; 0xc8
   12d20:	bl	13648 <__assert_fail@plt+0x20e4>
   12d24:	str	fp, [r5, #184]	; 0xb8
   12d28:	str	r9, [r5, #200]	; 0xc8
   12d2c:	b	12cb0 <__assert_fail@plt+0x174c>
   12d30:	ldr	r2, [r4]
   12d34:	asr	r1, r2, #31
   12d38:	adds	r2, r2, r2
   12d3c:	mov	r6, r2
   12d40:	adc	r3, r1, r1
   12d44:	cmp	r3, r2, asr #31
   12d48:	beq	12d50 <__assert_fail@plt+0x17ec>
   12d4c:	bl	12ab8 <__assert_fail@plt+0x1554>
   12d50:	mov	r0, r4
   12d54:	bl	1250c <__assert_fail@plt+0xfa8>
   12d58:	b	12b20 <__assert_fail@plt+0x15bc>
   12d5c:	mov	r3, r2
   12d60:	ldr	r2, [r3, #40]	; 0x28
   12d64:	cmp	r2, #0
   12d68:	bne	12d5c <__assert_fail@plt+0x17f8>
   12d6c:	str	r4, [r3, #40]	; 0x28
   12d70:	b	12cfc <__assert_fail@plt+0x1798>
   12d74:	mov	r0, #0
   12d78:	b	12d04 <__assert_fail@plt+0x17a0>
   12d7c:	ldrdeq	r3, [r3], -r0
   12d80:	andeq	r1, r2, r3, lsr #16
   12d84:	ldr	r3, [pc, #196]	; 12e50 <__assert_fail@plt+0x18ec>
   12d88:	push	{r4, r6, r7, lr}
   12d8c:	mov	r6, r0
   12d90:	mov	r7, r1
   12d94:	ldr	r2, [r3, #204]	; 0xcc
   12d98:	mov	r4, r3
   12d9c:	cmp	r2, #0
   12da0:	beq	12dc0 <__assert_fail@plt+0x185c>
   12da4:	ldr	r4, [r4, #204]	; 0xcc
   12da8:	ldrd	r2, [r4, #8]
   12dac:	cmp	r6, r2
   12db0:	sbcs	r3, r7, r3
   12db4:	bge	12dd0 <__assert_fail@plt+0x186c>
   12db8:	mov	r0, #0
   12dbc:	pop	{r4, r6, r7, pc}
   12dc0:	bl	12aec <__assert_fail@plt+0x1588>
   12dc4:	cmp	r0, #0
   12dc8:	bne	12da4 <__assert_fail@plt+0x1840>
   12dcc:	b	12db8 <__assert_fail@plt+0x1854>
   12dd0:	ldrd	r0, [r4, #8]
   12dd4:	ldr	ip, [r4, #24]
   12dd8:	adds	r2, r0, ip
   12ddc:	adc	r3, r1, ip, asr #31
   12de0:	cmp	r6, r2
   12de4:	sbcs	r3, r7, r3
   12de8:	bge	12e14 <__assert_fail@plt+0x18b0>
   12dec:	ldr	r3, [r4, #32]
   12df0:	sub	r0, r6, r0
   12df4:	cmp	r0, #79	; 0x4f
   12df8:	bgt	12e08 <__assert_fail@plt+0x18a4>
   12dfc:	add	r0, r3, r0, lsl #3
   12e00:	add	r0, r0, #12
   12e04:	pop	{r4, r6, r7, pc}
   12e08:	sub	r0, r0, #80	; 0x50
   12e0c:	ldr	r3, [r3, #652]	; 0x28c
   12e10:	b	12df4 <__assert_fail@plt+0x1890>
   12e14:	ldr	r3, [r4, #40]	; 0x28
   12e18:	cmp	r3, #0
   12e1c:	beq	12e40 <__assert_fail@plt+0x18dc>
   12e20:	ldr	r4, [r4, #40]	; 0x28
   12e24:	cmp	r4, #0
   12e28:	bne	12dd0 <__assert_fail@plt+0x186c>
   12e2c:	ldr	r3, [pc, #32]	; 12e54 <__assert_fail@plt+0x18f0>
   12e30:	movw	r2, #583	; 0x247
   12e34:	ldr	r1, [pc, #28]	; 12e58 <__assert_fail@plt+0x18f4>
   12e38:	ldr	r0, [pc, #28]	; 12e5c <__assert_fail@plt+0x18f8>
   12e3c:	bl	11564 <__assert_fail@plt>
   12e40:	bl	12aec <__assert_fail@plt+0x1588>
   12e44:	cmp	r0, #0
   12e48:	bne	12e20 <__assert_fail@plt+0x18bc>
   12e4c:	b	12db8 <__assert_fail@plt+0x1854>
   12e50:	ldrdeq	r3, [r3], -r0
   12e54:	andeq	r1, r2, r4, lsr #13
   12e58:	andeq	r1, r2, lr, lsr #16
   12e5c:	andeq	r1, r2, fp, lsr r8
   12e60:	ldr	r3, [pc, #28]	; 12e84 <__assert_fail@plt+0x1920>
   12e64:	push	{r4, lr}
   12e68:	ldrd	r0, [r3, #208]	; 0xd0
   12e6c:	adds	r0, r0, #1
   12e70:	adc	r1, r1, #0
   12e74:	bl	12d84 <__assert_fail@plt+0x1820>
   12e78:	clz	r0, r0
   12e7c:	lsr	r0, r0, #5
   12e80:	pop	{r4, pc}
   12e84:	ldrdeq	r3, [r3], -r0
   12e88:	ldr	r3, [pc, #80]	; 12ee0 <__assert_fail@plt+0x197c>
   12e8c:	push	{r4, r5, r6, lr}
   12e90:	ldr	r2, [r3, #204]	; 0xcc
   12e94:	mov	r4, r3
   12e98:	cmp	r2, #0
   12e9c:	bne	12ed4 <__assert_fail@plt+0x1970>
   12ea0:	bl	12aec <__assert_fail@plt+0x1588>
   12ea4:	subs	r5, r0, #0
   12ea8:	bne	12ed4 <__assert_fail@plt+0x1970>
   12eac:	bl	11414 <__errno_location@plt>
   12eb0:	ldr	r4, [r0]
   12eb4:	mov	r2, #5
   12eb8:	mov	r0, r5
   12ebc:	ldr	r1, [pc, #32]	; 12ee4 <__assert_fail@plt+0x1980>
   12ec0:	bl	112d0 <dcgettext@plt>
   12ec4:	mov	r2, r0
   12ec8:	mov	r0, #1
   12ecc:	mov	r1, r4
   12ed0:	bl	11384 <error@plt>
   12ed4:	ldr	r3, [r4, #204]	; 0xcc
   12ed8:	ldrd	r0, [r3, #16]
   12edc:	pop	{r4, r5, r6, pc}
   12ee0:	ldrdeq	r3, [r3], -r0
   12ee4:	andeq	r1, r2, sp, lsr r8
   12ee8:	push	{r4, r5, r6, r7, r8, lr}
   12eec:	ldr	r4, [pc, #172]	; 12fa0 <__assert_fail@plt+0x1a3c>
   12ef0:	ldr	r0, [r4, #216]	; 0xd8
   12ef4:	cmp	r0, #0
   12ef8:	beq	12f08 <__assert_fail@plt+0x19a4>
   12efc:	bl	1250c <__assert_fail@plt+0xfa8>
   12f00:	mov	r3, #0
   12f04:	str	r3, [r4, #216]	; 0xd8
   12f08:	ldr	r5, [r4, #204]	; 0xcc
   12f0c:	cmp	r5, #0
   12f10:	beq	12f8c <__assert_fail@plt+0x1a28>
   12f14:	ldr	r3, [r4, #204]	; 0xcc
   12f18:	ldrd	r0, [r4, #208]	; 0xd0
   12f1c:	ldrd	r6, [r3, #16]
   12f20:	cmp	r0, r6
   12f24:	sbcs	r2, r1, r7
   12f28:	strdlt	r6, [r4, #208]	; 0xd0
   12f2c:	adds	r1, r6, #1
   12f30:	adc	r2, r7, #0
   12f34:	str	r1, [r3, #16]
   12f38:	str	r2, [r3, #20]
   12f3c:	ldr	r2, [r3, #36]	; 0x24
   12f40:	ldr	r0, [r2]
   12f44:	ldr	r1, [r2, #8]
   12f48:	add	r1, r1, #1
   12f4c:	add	r5, r2, r1, lsl #3
   12f50:	cmp	r1, r0
   12f54:	str	r1, [r2, #8]
   12f58:	add	r5, r5, #4
   12f5c:	bne	12f98 <__assert_fail@plt+0x1a34>
   12f60:	ldr	r2, [r2, #652]	; 0x28c
   12f64:	cmp	r2, #0
   12f68:	str	r2, [r3, #36]	; 0x24
   12f6c:	beq	12f7c <__assert_fail@plt+0x1a18>
   12f70:	ldr	r2, [r2]
   12f74:	cmp	r2, #0
   12f78:	bne	12f98 <__assert_fail@plt+0x1a34>
   12f7c:	str	r3, [r4, #216]	; 0xd8
   12f80:	ldr	r3, [r3, #40]	; 0x28
   12f84:	str	r3, [r4, #204]	; 0xcc
   12f88:	b	12f98 <__assert_fail@plt+0x1a34>
   12f8c:	bl	12aec <__assert_fail@plt+0x1588>
   12f90:	cmp	r0, #0
   12f94:	bne	12f14 <__assert_fail@plt+0x19b0>
   12f98:	mov	r0, r5
   12f9c:	pop	{r4, r5, r6, r7, r8, pc}
   12fa0:	ldrdeq	r3, [r3], -r0
   12fa4:	push	{r4, lr}
   12fa8:	bl	12ee8 <__assert_fail@plt+0x1984>
   12fac:	cmp	r0, #0
   12fb0:	popeq	{r4, pc}
   12fb4:	bl	1294c <__assert_fail@plt+0x13e8>
   12fb8:	b	12fa8 <__assert_fail@plt+0x1a44>
   12fbc:	ldr	r4, [pc, #200]	; 1308c <__assert_fail@plt+0x1b28>
   12fc0:	mov	sl, r0
   12fc4:	mov	r6, r2
   12fc8:	push	{r7, lr}
   12fcc:	mov	r2, #5
   12fd0:	sub	sp, sp, #32
   12fd4:	mov	r0, #0
   12fd8:	mov	r7, r3
   12fdc:	ldr	r1, [pc, #172]	; 13090 <__assert_fail@plt+0x1b2c>
   12fe0:	ldr	r5, [r4]
   12fe4:	bl	112d0 <dcgettext@plt>
   12fe8:	ldr	r3, [pc, #164]	; 13094 <__assert_fail@plt+0x1b30>
   12fec:	mov	r8, r0
   12ff0:	ldr	r2, [sl]
   12ff4:	ldr	r9, [r3]
   12ff8:	ldr	r3, [pc, #152]	; 13098 <__assert_fail@plt+0x1b34>
   12ffc:	ldr	r3, [r3, #220]	; 0xdc
   13000:	ldr	r0, [r3, r2, lsl #2]
   13004:	bl	14df8 <__assert_fail@plt+0x3894>
   13008:	mov	r3, r9
   1300c:	mov	r2, r8
   13010:	str	r0, [sp]
   13014:	mov	r1, #1
   13018:	mov	r0, r5
   1301c:	bl	11480 <__fprintf_chk@plt>
   13020:	orrs	r3, r6, r7
   13024:	beq	1307c <__assert_fail@plt+0x1b18>
   13028:	ldr	r4, [r4]
   1302c:	mov	r2, #5
   13030:	mov	r0, #0
   13034:	ldr	r1, [pc, #96]	; 1309c <__assert_fail@plt+0x1b38>
   13038:	bl	112d0 <dcgettext@plt>
   1303c:	mov	r5, r0
   13040:	add	r2, sp, #8
   13044:	mov	r1, r7
   13048:	mov	r0, r6
   1304c:	bl	13730 <__assert_fail@plt+0x21cc>
   13050:	mov	r3, r0
   13054:	mov	r2, r5
   13058:	mov	r1, #1
   1305c:	mov	r0, r4
   13060:	bl	11480 <__fprintf_chk@plt>
   13064:	ldrb	r3, [sp, #40]	; 0x28
   13068:	cmp	r3, #0
   1306c:	bne	13078 <__assert_fail@plt+0x1b14>
   13070:	bl	12fa4 <__assert_fail@plt+0x1a40>
   13074:	bl	125d4 <__assert_fail@plt+0x1070>
   13078:	bl	1276c <__assert_fail@plt+0x1208>
   1307c:	mov	r0, #10
   13080:	ldr	r1, [r4]
   13084:	bl	114f8 <fputc@plt>
   13088:	b	13064 <__assert_fail@plt+0x1b00>
   1308c:	andeq	r3, r3, r0, asr #3
   13090:	andeq	r1, r2, pc, asr #16
   13094:	andeq	r3, r3, r8, asr #5
   13098:	ldrdeq	r3, [r3], -r0
   1309c:	strdeq	r1, [r2], -pc	; <UNPREDICTABLE>
   130a0:	subs	r5, r0, #0
   130a4:	push	{r7, lr}
   130a8:	sub	sp, sp, #56	; 0x38
   130ac:	ldr	r4, [pc, #592]	; 13304 <__assert_fail@plt+0x1da0>
   130b0:	beq	130e8 <__assert_fail@plt+0x1b84>
   130b4:	mov	r2, #5
   130b8:	mov	r0, #0
   130bc:	ldr	r3, [pc, #580]	; 13308 <__assert_fail@plt+0x1da4>
   130c0:	ldr	r1, [pc, #580]	; 1330c <__assert_fail@plt+0x1da8>
   130c4:	ldr	r6, [r3]
   130c8:	bl	112d0 <dcgettext@plt>
   130cc:	mov	r2, r0
   130d0:	mov	r1, #1
   130d4:	ldr	r3, [r4]
   130d8:	mov	r0, r6
   130dc:	bl	11480 <__fprintf_chk@plt>
   130e0:	mov	r0, r5
   130e4:	bl	113f0 <exit@plt>
   130e8:	mov	r2, #5
   130ec:	ldr	r1, [pc, #540]	; 13310 <__assert_fail@plt+0x1dac>
   130f0:	mov	r6, sp
   130f4:	bl	112d0 <dcgettext@plt>
   130f8:	ldr	r2, [r4]
   130fc:	mov	r1, r0
   13100:	mov	r0, #1
   13104:	bl	1145c <__printf_chk@plt>
   13108:	ldr	r4, [pc, #516]	; 13314 <__assert_fail@plt+0x1db0>
   1310c:	mov	r2, #5
   13110:	mov	r0, r5
   13114:	ldr	r1, [pc, #508]	; 13318 <__assert_fail@plt+0x1db4>
   13118:	bl	112d0 <dcgettext@plt>
   1311c:	ldr	r7, [pc, #504]	; 1331c <__assert_fail@plt+0x1db8>
   13120:	ldr	r1, [r4]
   13124:	bl	111bc <fputs_unlocked@plt>
   13128:	mov	r2, #5
   1312c:	ldr	r1, [pc, #492]	; 13320 <__assert_fail@plt+0x1dbc>
   13130:	mov	r0, r5
   13134:	bl	112d0 <dcgettext@plt>
   13138:	ldr	r1, [r4]
   1313c:	bl	111bc <fputs_unlocked@plt>
   13140:	mov	r2, #5
   13144:	ldr	r1, [pc, #472]	; 13324 <__assert_fail@plt+0x1dc0>
   13148:	mov	r0, r5
   1314c:	bl	112d0 <dcgettext@plt>
   13150:	ldr	r1, [r4]
   13154:	bl	111bc <fputs_unlocked@plt>
   13158:	mov	r2, #5
   1315c:	ldr	r1, [pc, #452]	; 13328 <__assert_fail@plt+0x1dc4>
   13160:	mov	r0, r5
   13164:	bl	112d0 <dcgettext@plt>
   13168:	ldr	r1, [r4]
   1316c:	bl	111bc <fputs_unlocked@plt>
   13170:	mov	r2, #5
   13174:	ldr	r1, [pc, #432]	; 1332c <__assert_fail@plt+0x1dc8>
   13178:	mov	r0, r5
   1317c:	bl	112d0 <dcgettext@plt>
   13180:	ldr	r1, [r4]
   13184:	bl	111bc <fputs_unlocked@plt>
   13188:	mov	r2, #5
   1318c:	ldr	r1, [pc, #412]	; 13330 <__assert_fail@plt+0x1dcc>
   13190:	mov	r0, r5
   13194:	bl	112d0 <dcgettext@plt>
   13198:	ldr	r1, [r4]
   1319c:	bl	111bc <fputs_unlocked@plt>
   131a0:	mov	r2, #5
   131a4:	ldr	r1, [pc, #392]	; 13334 <__assert_fail@plt+0x1dd0>
   131a8:	mov	r0, r5
   131ac:	bl	112d0 <dcgettext@plt>
   131b0:	ldr	r1, [r4]
   131b4:	bl	111bc <fputs_unlocked@plt>
   131b8:	mov	r2, #5
   131bc:	ldr	r1, [pc, #372]	; 13338 <__assert_fail@plt+0x1dd4>
   131c0:	mov	r0, r5
   131c4:	bl	112d0 <dcgettext@plt>
   131c8:	ldr	r1, [r4]
   131cc:	bl	111bc <fputs_unlocked@plt>
   131d0:	mov	r2, #5
   131d4:	ldr	r1, [pc, #352]	; 1333c <__assert_fail@plt+0x1dd8>
   131d8:	mov	r0, r5
   131dc:	bl	112d0 <dcgettext@plt>
   131e0:	ldr	r1, [r4]
   131e4:	bl	111bc <fputs_unlocked@plt>
   131e8:	ldr	lr, [pc, #336]	; 13340 <__assert_fail@plt+0x1ddc>
   131ec:	mov	ip, sp
   131f0:	ldm	lr!, {r0, r1, r2, r3}
   131f4:	stmia	ip!, {r0, r1, r2, r3}
   131f8:	ldm	lr!, {r0, r1, r2, r3}
   131fc:	stmia	ip!, {r0, r1, r2, r3}
   13200:	ldm	lr!, {r0, r1, r2, r3}
   13204:	stmia	ip!, {r0, r1, r2, r3}
   13208:	ldm	lr, {r0, r1}
   1320c:	stm	ip, {r0, r1}
   13210:	ldr	r1, [r6]
   13214:	cmp	r1, #0
   13218:	bne	132bc <__assert_fail@plt+0x1d58>
   1321c:	ldr	r6, [r6, #4]
   13220:	mov	r2, #5
   13224:	mov	r0, #0
   13228:	ldr	r7, [pc, #236]	; 1331c <__assert_fail@plt+0x1db8>
   1322c:	ldr	r1, [pc, #272]	; 13344 <__assert_fail@plt+0x1de0>
   13230:	cmp	r6, #0
   13234:	moveq	r6, r7
   13238:	bl	112d0 <dcgettext@plt>
   1323c:	mov	r1, r0
   13240:	ldr	r3, [pc, #256]	; 13348 <__assert_fail@plt+0x1de4>
   13244:	mov	r0, #1
   13248:	ldr	r2, [pc, #252]	; 1334c <__assert_fail@plt+0x1de8>
   1324c:	bl	1145c <__printf_chk@plt>
   13250:	mov	r1, #0
   13254:	mov	r0, #5
   13258:	bl	114bc <setlocale@plt>
   1325c:	cmp	r0, #0
   13260:	bne	132d4 <__assert_fail@plt+0x1d70>
   13264:	mov	r2, #5
   13268:	ldr	r1, [pc, #224]	; 13350 <__assert_fail@plt+0x1dec>
   1326c:	mov	r0, #0
   13270:	bl	112d0 <dcgettext@plt>
   13274:	mov	r1, r0
   13278:	ldr	r3, [pc, #156]	; 1331c <__assert_fail@plt+0x1db8>
   1327c:	mov	r0, #1
   13280:	ldr	r2, [pc, #192]	; 13348 <__assert_fail@plt+0x1de4>
   13284:	bl	1145c <__printf_chk@plt>
   13288:	mov	r2, #5
   1328c:	ldr	r1, [pc, #192]	; 13354 <__assert_fail@plt+0x1df0>
   13290:	mov	r0, #0
   13294:	bl	112d0 <dcgettext@plt>
   13298:	ldr	r2, [pc, #184]	; 13358 <__assert_fail@plt+0x1df4>
   1329c:	cmp	r6, r7
   132a0:	mov	r1, r0
   132a4:	mov	r0, #1
   132a8:	ldr	r3, [pc, #172]	; 1335c <__assert_fail@plt+0x1df8>
   132ac:	moveq	r3, r2
   132b0:	mov	r2, r6
   132b4:	bl	1145c <__printf_chk@plt>
   132b8:	b	130e0 <__assert_fail@plt+0x1b7c>
   132bc:	mov	r0, r7
   132c0:	bl	111f8 <strcmp@plt>
   132c4:	cmp	r0, #0
   132c8:	beq	1321c <__assert_fail@plt+0x1cb8>
   132cc:	add	r6, r6, #8
   132d0:	b	13210 <__assert_fail@plt+0x1cac>
   132d4:	mov	r2, #3
   132d8:	ldr	r1, [pc, #128]	; 13360 <__assert_fail@plt+0x1dfc>
   132dc:	bl	11534 <strncmp@plt>
   132e0:	cmp	r0, #0
   132e4:	beq	13264 <__assert_fail@plt+0x1d00>
   132e8:	mov	r2, #5
   132ec:	ldr	r1, [pc, #112]	; 13364 <__assert_fail@plt+0x1e00>
   132f0:	mov	r0, #0
   132f4:	bl	112d0 <dcgettext@plt>
   132f8:	ldr	r1, [r4]
   132fc:	bl	111bc <fputs_unlocked@plt>
   13300:	b	13264 <__assert_fail@plt+0x1d00>
   13304:	andeq	r3, r3, r8, asr #5
   13308:	andeq	r3, r3, r0, asr #3
   1330c:	andeq	r1, r2, lr, ror #16
   13310:	muleq	r2, r5, r8
   13314:	andeq	r3, r3, r4, asr #3
   13318:			; <UNDEFINED> instruction: 0x000218bc
   1331c:	andeq	r1, r2, r7, ror #16
   13320:	andeq	r1, r2, r2, asr #18
   13324:	andeq	r1, r2, r5, ror #18
   13328:			; <UNDEFINED> instruction: 0x000219b0
   1332c:	andeq	r1, r2, ip, ror #20
   13330:	andeq	r1, r2, lr, lsr #21
   13334:	andeq	r1, r2, r5, ror fp
   13338:	andeq	r1, r2, r2, lsr #23
   1333c:	ldrdeq	r1, [r2], -r8
   13340:			; <UNDEFINED> instruction: 0x000216b0
   13344:	andeq	r1, r2, lr, lsl #27
   13348:	andeq	r1, r2, r5, lsr #27
   1334c:	andeq	r1, r2, sp, asr #27
   13350:	andeq	r1, r2, r6, lsr #28
   13354:	andeq	r1, r2, r1, asr #28
   13358:	andeq	r2, r2, r5, asr #3
   1335c:	andeq	r1, r2, sp, lsl #27
   13360:	ldrdeq	r1, [r2], -fp
   13364:	ldrdeq	r1, [r2], -pc	; <UNPREDICTABLE>
   13368:	ldr	r3, [pc, #4]	; 13374 <__assert_fail@plt+0x1e10>
   1336c:	str	r0, [r3]
   13370:	bx	lr
   13374:	andeq	r3, r3, r0, asr #5
   13378:	ldr	r3, [pc, #4]	; 13384 <__assert_fail@plt+0x1e20>
   1337c:	strb	r0, [r3, #4]
   13380:	bx	lr
   13384:	andeq	r3, r3, r0, asr #5
   13388:	ldr	r3, [pc, #176]	; 13440 <__assert_fail@plt+0x1edc>
   1338c:	push	{r0, r1, r4, r5, r6, lr}
   13390:	ldr	r0, [r3]
   13394:	bl	20f5c <__assert_fail@plt+0xf9f8>
   13398:	cmp	r0, #0
   1339c:	beq	13424 <__assert_fail@plt+0x1ec0>
   133a0:	ldr	r4, [pc, #156]	; 13444 <__assert_fail@plt+0x1ee0>
   133a4:	bl	11414 <__errno_location@plt>
   133a8:	mov	r5, r0
   133ac:	ldrb	r6, [r4, #4]
   133b0:	cmp	r6, #0
   133b4:	beq	133c4 <__assert_fail@plt+0x1e60>
   133b8:	ldr	r3, [r0]
   133bc:	cmp	r3, #32
   133c0:	beq	13424 <__assert_fail@plt+0x1ec0>
   133c4:	mov	r2, #5
   133c8:	ldr	r1, [pc, #120]	; 13448 <__assert_fail@plt+0x1ee4>
   133cc:	mov	r0, #0
   133d0:	bl	112d0 <dcgettext@plt>
   133d4:	mov	r6, r0
   133d8:	ldr	r0, [r4]
   133dc:	cmp	r0, #0
   133e0:	beq	13410 <__assert_fail@plt+0x1eac>
   133e4:	ldr	r4, [r5]
   133e8:	bl	14ca8 <__assert_fail@plt+0x3744>
   133ec:	mov	r3, r0
   133f0:	ldr	r2, [pc, #84]	; 1344c <__assert_fail@plt+0x1ee8>
   133f4:	mov	r0, #0
   133f8:	str	r6, [sp]
   133fc:	mov	r1, r4
   13400:	bl	11384 <error@plt>
   13404:	ldr	r3, [pc, #68]	; 13450 <__assert_fail@plt+0x1eec>
   13408:	ldr	r0, [r3]
   1340c:	bl	11258 <_exit@plt>
   13410:	mov	r3, r6
   13414:	ldr	r2, [pc, #56]	; 13454 <__assert_fail@plt+0x1ef0>
   13418:	ldr	r1, [r5]
   1341c:	bl	11384 <error@plt>
   13420:	b	13404 <__assert_fail@plt+0x1ea0>
   13424:	ldr	r3, [pc, #44]	; 13458 <__assert_fail@plt+0x1ef4>
   13428:	ldr	r0, [r3]
   1342c:	bl	20f5c <__assert_fail@plt+0xf9f8>
   13430:	cmp	r0, #0
   13434:	bne	13404 <__assert_fail@plt+0x1ea0>
   13438:	add	sp, sp, #8
   1343c:	pop	{r4, r5, r6, pc}
   13440:	andeq	r3, r3, r4, asr #3
   13444:	andeq	r3, r3, r0, asr #5
   13448:	andeq	r2, r2, fp, ror r2
   1344c:	andeq	r2, r2, r7, lsl #5
   13450:	andeq	r3, r3, r8, ror #2
   13454:	strdeq	r2, [r2], -r8
   13458:	andeq	r3, r3, r0, asr #3
   1345c:	push	{r0, r1, r2, r4, r5, lr}
   13460:	mov	r4, r0
   13464:	bl	11468 <fileno@plt>
   13468:	cmp	r0, #0
   1346c:	mov	r0, r4
   13470:	bge	13480 <__assert_fail@plt+0x1f1c>
   13474:	add	sp, sp, #12
   13478:	pop	{r4, r5, lr}
   1347c:	b	11498 <fclose@plt>
   13480:	bl	113c0 <__freading@plt>
   13484:	cmp	r0, #0
   13488:	bne	134c4 <__assert_fail@plt+0x1f60>
   1348c:	mov	r0, r4
   13490:	bl	13564 <__assert_fail@plt+0x2000>
   13494:	cmp	r0, #0
   13498:	bne	134f8 <__assert_fail@plt+0x1f94>
   1349c:	mov	r5, #0
   134a0:	mov	r0, r4
   134a4:	bl	11498 <fclose@plt>
   134a8:	cmp	r5, #0
   134ac:	beq	134bc <__assert_fail@plt+0x1f58>
   134b0:	bl	11414 <__errno_location@plt>
   134b4:	str	r5, [r0]
   134b8:	mvn	r0, #0
   134bc:	add	sp, sp, #12
   134c0:	pop	{r4, r5, pc}
   134c4:	mov	r0, r4
   134c8:	bl	11468 <fileno@plt>
   134cc:	mov	r3, #1
   134d0:	mov	r2, #0
   134d4:	str	r3, [sp]
   134d8:	mov	r3, #0
   134dc:	bl	1133c <lseek64@plt>
   134e0:	mvn	r3, #0
   134e4:	mvn	r2, #0
   134e8:	cmp	r1, r3
   134ec:	cmpeq	r0, r2
   134f0:	bne	1348c <__assert_fail@plt+0x1f28>
   134f4:	b	1349c <__assert_fail@plt+0x1f38>
   134f8:	bl	11414 <__errno_location@plt>
   134fc:	ldr	r5, [r0]
   13500:	b	134a0 <__assert_fail@plt+0x1f3c>
   13504:	push	{r4, r5, r6, r7, r8, lr}
   13508:	mov	r5, r0
   1350c:	mov	r0, r1
   13510:	mov	r1, r2
   13514:	mov	r2, r3
   13518:	bl	11390 <open64@plt>
   1351c:	sub	r3, r5, r0
   13520:	mov	r4, r0
   13524:	clz	r3, r3
   13528:	lsr	r3, r3, #5
   1352c:	orrs	r3, r3, r0, lsr #31
   13530:	bne	1355c <__assert_fail@plt+0x1ff8>
   13534:	mov	r1, r5
   13538:	bl	112e8 <dup2@plt>
   1353c:	mov	r6, r0
   13540:	bl	11414 <__errno_location@plt>
   13544:	mov	r5, r0
   13548:	mov	r0, r4
   1354c:	ldr	r7, [r5]
   13550:	mov	r4, r6
   13554:	bl	1154c <close@plt>
   13558:	str	r7, [r5]
   1355c:	mov	r0, r4
   13560:	pop	{r4, r5, r6, r7, r8, pc}
   13564:	push	{r0, r1, r4, lr}
   13568:	subs	r4, r0, #0
   1356c:	bne	13580 <__assert_fail@plt+0x201c>
   13570:	mov	r0, r4
   13574:	add	sp, sp, #8
   13578:	pop	{r4, lr}
   1357c:	b	1121c <fflush@plt>
   13580:	bl	113c0 <__freading@plt>
   13584:	cmp	r0, #0
   13588:	beq	13570 <__assert_fail@plt+0x200c>
   1358c:	ldr	r3, [r4]
   13590:	tst	r3, #256	; 0x100
   13594:	beq	13570 <__assert_fail@plt+0x200c>
   13598:	mov	r3, #1
   1359c:	mov	r2, #0
   135a0:	mov	r0, r4
   135a4:	str	r3, [sp]
   135a8:	mov	r3, #0
   135ac:	bl	13698 <__assert_fail@plt+0x2134>
   135b0:	b	13570 <__assert_fail@plt+0x200c>
   135b4:	push	{r4, r5, r6, lr}
   135b8:	mov	r6, r1
   135bc:	bl	11504 <fopen64@plt>
   135c0:	subs	r4, r0, #0
   135c4:	beq	135fc <__assert_fail@plt+0x2098>
   135c8:	bl	11468 <fileno@plt>
   135cc:	cmp	r0, #2
   135d0:	bhi	135fc <__assert_fail@plt+0x2098>
   135d4:	bl	1fc84 <__assert_fail@plt+0xe720>
   135d8:	subs	r5, r0, #0
   135dc:	bge	13604 <__assert_fail@plt+0x20a0>
   135e0:	bl	11414 <__errno_location@plt>
   135e4:	mov	r5, r0
   135e8:	mov	r0, r4
   135ec:	ldr	r6, [r5]
   135f0:	bl	1345c <__assert_fail@plt+0x1ef8>
   135f4:	str	r6, [r5]
   135f8:	mov	r4, #0
   135fc:	mov	r0, r4
   13600:	pop	{r4, r5, r6, pc}
   13604:	mov	r0, r4
   13608:	bl	1345c <__assert_fail@plt+0x1ef8>
   1360c:	cmp	r0, #0
   13610:	beq	13630 <__assert_fail@plt+0x20cc>
   13614:	bl	11414 <__errno_location@plt>
   13618:	mov	r4, r0
   1361c:	mov	r0, r5
   13620:	ldr	r6, [r4]
   13624:	bl	1154c <close@plt>
   13628:	str	r6, [r4]
   1362c:	b	135f8 <__assert_fail@plt+0x2094>
   13630:	mov	r1, r6
   13634:	mov	r0, r5
   13638:	bl	111a4 <fdopen@plt>
   1363c:	subs	r4, r0, #0
   13640:	bne	135fc <__assert_fail@plt+0x2098>
   13644:	b	13614 <__assert_fail@plt+0x20b0>
   13648:	push	{r0, r1, r2, r4, r5, lr}
   1364c:	mov	r5, r0
   13650:	bl	11414 <__errno_location@plt>
   13654:	mov	r4, r0
   13658:	mov	r0, r5
   1365c:	ldr	r3, [r4]
   13660:	str	r3, [sp]
   13664:	str	r3, [sp, #4]
   13668:	mov	r3, #0
   1366c:	str	r3, [r4]
   13670:	bl	11240 <free@plt>
   13674:	ldr	r3, [r4]
   13678:	add	r2, sp, #8
   1367c:	clz	r3, r3
   13680:	lsr	r3, r3, #5
   13684:	add	r3, r2, r3, lsl #2
   13688:	ldr	r3, [r3, #-8]
   1368c:	str	r3, [r4]
   13690:	add	sp, sp, #12
   13694:	pop	{r4, r5, pc}
   13698:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1369c:	mov	r4, r0
   136a0:	ldmib	r0, {ip, lr}
   136a4:	ldr	r8, [sp, #32]
   136a8:	cmp	lr, ip
   136ac:	bne	1371c <__assert_fail@plt+0x21b8>
   136b0:	ldr	ip, [r0, #16]
   136b4:	ldr	lr, [r0, #20]
   136b8:	cmp	lr, ip
   136bc:	bne	1371c <__assert_fail@plt+0x21b8>
   136c0:	ldr	r5, [r0, #36]	; 0x24
   136c4:	cmp	r5, #0
   136c8:	bne	1371c <__assert_fail@plt+0x21b8>
   136cc:	mov	r6, r2
   136d0:	mov	r7, r3
   136d4:	bl	11468 <fileno@plt>
   136d8:	mov	r2, r6
   136dc:	mov	r3, r7
   136e0:	str	r8, [sp]
   136e4:	bl	1133c <lseek64@plt>
   136e8:	mvn	r3, #0
   136ec:	mvn	r2, #0
   136f0:	cmp	r1, r3
   136f4:	cmpeq	r0, r2
   136f8:	mvneq	r0, #0
   136fc:	beq	13714 <__assert_fail@plt+0x21b0>
   13700:	ldr	r3, [r4]
   13704:	strd	r0, [r4, #80]	; 0x50
   13708:	mov	r0, r5
   1370c:	bic	r3, r3, #16
   13710:	str	r3, [r4]
   13714:	add	sp, sp, #8
   13718:	pop	{r4, r5, r6, r7, r8, pc}
   1371c:	mov	r0, r4
   13720:	str	r8, [sp, #32]
   13724:	add	sp, sp, #8
   13728:	pop	{r4, r5, r6, r7, r8, lr}
   1372c:	b	114a4 <fseeko64@plt>
   13730:	mov	r3, #0
   13734:	cmp	r0, #0
   13738:	push	{r4, r5, r6, r7, r8, lr}
   1373c:	mov	r4, r0
   13740:	mov	r5, r1
   13744:	add	r6, r2, #20
   13748:	strb	r3, [r2, #20]
   1374c:	sbcs	r3, r1, #0
   13750:	bge	137b4 <__assert_fail@plt+0x2250>
   13754:	mov	r0, r4
   13758:	mov	r1, r5
   1375c:	mov	r2, #10
   13760:	mov	r3, #0
   13764:	bl	213d4 <__assert_fail@plt+0xfe70>
   13768:	rsb	r2, r2, #48	; 0x30
   1376c:	mov	r3, #0
   13770:	mov	r0, r4
   13774:	mov	r1, r5
   13778:	strb	r2, [r6, #-1]
   1377c:	mov	r2, #10
   13780:	sub	r7, r6, #1
   13784:	bl	213d4 <__assert_fail@plt+0xfe70>
   13788:	mov	r4, r0
   1378c:	mov	r5, r1
   13790:	orrs	r3, r4, r5
   13794:	bne	137ac <__assert_fail@plt+0x2248>
   13798:	mov	r3, #45	; 0x2d
   1379c:	sub	r6, r6, #2
   137a0:	strb	r3, [r7, #-1]
   137a4:	mov	r0, r6
   137a8:	pop	{r4, r5, r6, r7, r8, pc}
   137ac:	mov	r6, r7
   137b0:	b	13754 <__assert_fail@plt+0x21f0>
   137b4:	mov	r0, r4
   137b8:	mov	r1, r5
   137bc:	mov	r2, #10
   137c0:	mov	r3, #0
   137c4:	bl	213d4 <__assert_fail@plt+0xfe70>
   137c8:	add	r2, r2, #48	; 0x30
   137cc:	mov	r3, #0
   137d0:	mov	r0, r4
   137d4:	mov	r1, r5
   137d8:	strb	r2, [r6, #-1]!
   137dc:	mov	r2, #10
   137e0:	bl	213d4 <__assert_fail@plt+0xfe70>
   137e4:	mov	r4, r0
   137e8:	mov	r5, r1
   137ec:	orrs	r3, r4, r5
   137f0:	bne	137b4 <__assert_fail@plt+0x2250>
   137f4:	b	137a4 <__assert_fail@plt+0x2240>
   137f8:	push	{r4, r5, r6, lr}
   137fc:	subs	r4, r0, #0
   13800:	bne	13818 <__assert_fail@plt+0x22b4>
   13804:	ldr	r3, [pc, #124]	; 13888 <__assert_fail@plt+0x2324>
   13808:	ldr	r0, [pc, #124]	; 1388c <__assert_fail@plt+0x2328>
   1380c:	ldr	r1, [r3]
   13810:	bl	11528 <fputs@plt>
   13814:	bl	11540 <abort@plt>
   13818:	mov	r1, #47	; 0x2f
   1381c:	bl	114e0 <strrchr@plt>
   13820:	subs	r6, r0, #0
   13824:	beq	13874 <__assert_fail@plt+0x2310>
   13828:	add	r5, r6, #1
   1382c:	sub	r3, r5, r4
   13830:	cmp	r3, #6
   13834:	ble	13874 <__assert_fail@plt+0x2310>
   13838:	mov	r2, #7
   1383c:	ldr	r1, [pc, #76]	; 13890 <__assert_fail@plt+0x232c>
   13840:	sub	r0, r6, #6
   13844:	bl	11534 <strncmp@plt>
   13848:	cmp	r0, #0
   1384c:	bne	13874 <__assert_fail@plt+0x2310>
   13850:	mov	r2, #3
   13854:	ldr	r1, [pc, #56]	; 13894 <__assert_fail@plt+0x2330>
   13858:	mov	r0, r5
   1385c:	bl	11534 <strncmp@plt>
   13860:	cmp	r0, #0
   13864:	ldreq	r3, [pc, #44]	; 13898 <__assert_fail@plt+0x2334>
   13868:	addeq	r4, r6, #4
   1386c:	movne	r4, r5
   13870:	streq	r4, [r3]
   13874:	ldr	r3, [pc, #32]	; 1389c <__assert_fail@plt+0x2338>
   13878:	str	r4, [r3]
   1387c:	ldr	r3, [pc, #28]	; 138a0 <__assert_fail@plt+0x233c>
   13880:	str	r4, [r3]
   13884:	pop	{r4, r5, r6, pc}
   13888:	andeq	r3, r3, r0, asr #3
   1388c:	andeq	r2, r2, lr, lsl #5
   13890:	andeq	r2, r2, r6, asr #5
   13894:	andeq	r2, r2, lr, asr #5
   13898:			; <UNDEFINED> instruction: 0x000331b0
   1389c:	andeq	r3, r3, r8, asr #5
   138a0:			; <UNDEFINED> instruction: 0x000331b4
   138a4:	push	{r4, lr}
   138a8:	mov	r2, #48	; 0x30
   138ac:	mov	r4, r1
   138b0:	mov	r1, #0
   138b4:	bl	11444 <memset@plt>
   138b8:	cmp	r4, #10
   138bc:	bne	138c4 <__assert_fail@plt+0x2360>
   138c0:	bl	11540 <abort@plt>
   138c4:	str	r4, [r0]
   138c8:	pop	{r4, pc}
   138cc:	push	{r4, r5, r6, lr}
   138d0:	mov	r2, #5
   138d4:	mov	r6, r0
   138d8:	mov	r5, r1
   138dc:	mov	r1, r0
   138e0:	mov	r0, #0
   138e4:	bl	112d0 <dcgettext@plt>
   138e8:	cmp	r6, r0
   138ec:	mov	r4, r0
   138f0:	bne	13960 <__assert_fail@plt+0x23fc>
   138f4:	bl	21244 <__assert_fail@plt+0xfce0>
   138f8:	ldrb	r3, [r0]
   138fc:	bic	r3, r3, #32
   13900:	cmp	r3, #85	; 0x55
   13904:	bne	13968 <__assert_fail@plt+0x2404>
   13908:	ldrb	r3, [r0, #1]
   1390c:	bic	r3, r3, #32
   13910:	cmp	r3, #84	; 0x54
   13914:	bne	139d8 <__assert_fail@plt+0x2474>
   13918:	ldrb	r3, [r0, #2]
   1391c:	bic	r3, r3, #32
   13920:	cmp	r3, #70	; 0x46
   13924:	bne	139d8 <__assert_fail@plt+0x2474>
   13928:	ldrb	r3, [r0, #3]
   1392c:	cmp	r3, #45	; 0x2d
   13930:	bne	139d8 <__assert_fail@plt+0x2474>
   13934:	ldrb	r3, [r0, #4]
   13938:	cmp	r3, #56	; 0x38
   1393c:	bne	139d8 <__assert_fail@plt+0x2474>
   13940:	ldrb	r3, [r0, #5]
   13944:	cmp	r3, #0
   13948:	bne	139d8 <__assert_fail@plt+0x2474>
   1394c:	ldrb	r2, [r4]
   13950:	ldr	r3, [pc, #144]	; 139e8 <__assert_fail@plt+0x2484>
   13954:	ldr	r4, [pc, #144]	; 139ec <__assert_fail@plt+0x2488>
   13958:	cmp	r2, #96	; 0x60
   1395c:	movne	r4, r3
   13960:	mov	r0, r4
   13964:	pop	{r4, r5, r6, pc}
   13968:	cmp	r3, #71	; 0x47
   1396c:	bne	139d8 <__assert_fail@plt+0x2474>
   13970:	ldrb	r3, [r0, #1]
   13974:	bic	r3, r3, #32
   13978:	cmp	r3, #66	; 0x42
   1397c:	bne	139d8 <__assert_fail@plt+0x2474>
   13980:	ldrb	r3, [r0, #2]
   13984:	cmp	r3, #49	; 0x31
   13988:	bne	139d8 <__assert_fail@plt+0x2474>
   1398c:	ldrb	r3, [r0, #3]
   13990:	cmp	r3, #56	; 0x38
   13994:	bne	139d8 <__assert_fail@plt+0x2474>
   13998:	ldrb	r3, [r0, #4]
   1399c:	cmp	r3, #48	; 0x30
   139a0:	bne	139d8 <__assert_fail@plt+0x2474>
   139a4:	ldrb	r3, [r0, #5]
   139a8:	cmp	r3, #51	; 0x33
   139ac:	bne	139d8 <__assert_fail@plt+0x2474>
   139b0:	ldrb	r3, [r0, #6]
   139b4:	cmp	r3, #48	; 0x30
   139b8:	bne	139d8 <__assert_fail@plt+0x2474>
   139bc:	ldrb	r3, [r0, #7]
   139c0:	cmp	r3, #0
   139c4:	bne	139d8 <__assert_fail@plt+0x2474>
   139c8:	ldrb	r2, [r4]
   139cc:	ldr	r3, [pc, #28]	; 139f0 <__assert_fail@plt+0x248c>
   139d0:	ldr	r4, [pc, #28]	; 139f4 <__assert_fail@plt+0x2490>
   139d4:	b	13958 <__assert_fail@plt+0x23f4>
   139d8:	ldr	r4, [pc, #24]	; 139f8 <__assert_fail@plt+0x2494>
   139dc:	cmp	r5, #9
   139e0:	ldr	r3, [pc, #20]	; 139fc <__assert_fail@plt+0x2498>
   139e4:	b	1395c <__assert_fail@plt+0x23f8>
   139e8:	andeq	r2, r2, sl, lsr #6
   139ec:	andeq	r2, r2, r5, lsr r3
   139f0:	andeq	r2, r2, lr, lsr #6
   139f4:	andeq	r2, r2, r1, lsr r3
   139f8:	andeq	r2, r2, r8, lsr #6
   139fc:	andeq	r2, r2, r4, lsl #3
   13a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a04:	sub	sp, sp, #108	; 0x6c
   13a08:	mov	r8, r0
   13a0c:	mov	r5, r1
   13a10:	mov	r6, #0
   13a14:	str	r3, [sp, #40]	; 0x28
   13a18:	str	r2, [sp, #48]	; 0x30
   13a1c:	ldr	sl, [sp, #144]	; 0x90
   13a20:	bl	11348 <__ctype_get_mb_cur_max@plt>
   13a24:	ldr	r3, [sp, #148]	; 0x94
   13a28:	str	r6, [sp, #24]
   13a2c:	str	r6, [sp, #32]
   13a30:	str	r6, [sp, #44]	; 0x2c
   13a34:	str	r6, [sp, #52]	; 0x34
   13a38:	ubfx	r7, r3, #1, #1
   13a3c:	mov	r3, #1
   13a40:	str	r6, [sp, #60]	; 0x3c
   13a44:	str	r3, [sp, #72]	; 0x48
   13a48:	str	r0, [sp, #76]	; 0x4c
   13a4c:	cmp	sl, #10
   13a50:	ldrls	pc, [pc, sl, lsl #2]
   13a54:	b	13c98 <__assert_fail@plt+0x2734>
   13a58:	andeq	r3, r1, r4, lsl #21
   13a5c:			; <UNDEFINED> instruction: 0x00013cb0
   13a60:	andeq	r3, r1, r4, lsr ip
   13a64:	andeq	r3, r1, ip, asr #24
   13a68:	andeq	r3, r1, ip, lsl ip
   13a6c:	andeq	r3, r1, r4, ror fp
   13a70:	andeq	r3, r1, r4, asr fp
   13a74:	muleq	r1, ip, ip
   13a78:	andeq	r3, r1, r4, lsr #23
   13a7c:	andeq	r3, r1, r4, lsr #23
   13a80:	andeq	r3, r1, r4, lsr #23
   13a84:	mov	r4, sl
   13a88:	mov	r7, #0
   13a8c:	mov	r9, r5
   13a90:	mov	r3, #0
   13a94:	str	r6, [sp, #68]	; 0x44
   13a98:	str	r3, [sp, #28]
   13a9c:	ldr	r3, [sp, #40]	; 0x28
   13aa0:	cmn	r3, #1
   13aa4:	bne	14644 <__assert_fail@plt+0x30e0>
   13aa8:	ldr	r2, [sp, #28]
   13aac:	ldr	r3, [sp, #48]	; 0x30
   13ab0:	ldrb	r3, [r3, r2]
   13ab4:	adds	r3, r3, #0
   13ab8:	movne	r3, #1
   13abc:	str	r3, [sp, #36]	; 0x24
   13ac0:	ldr	r3, [sp, #36]	; 0x24
   13ac4:	cmp	r3, #0
   13ac8:	bne	13cd4 <__assert_fail@plt+0x2770>
   13acc:	sub	r3, sl, #2
   13ad0:	cmp	r4, #0
   13ad4:	clz	r3, r3
   13ad8:	movne	r2, #0
   13adc:	lsr	r3, r3, #5
   13ae0:	andeq	r2, r3, r7
   13ae4:	cmp	r2, #0
   13ae8:	bne	13e98 <__assert_fail@plt+0x2934>
   13aec:	eor	r7, r7, #1
   13af0:	ands	r3, r3, r7
   13af4:	beq	146bc <__assert_fail@plt+0x3158>
   13af8:	ldr	r2, [sp, #68]	; 0x44
   13afc:	cmp	r2, #0
   13b00:	beq	14684 <__assert_fail@plt+0x3120>
   13b04:	ldr	r3, [sp, #72]	; 0x48
   13b08:	cmp	r3, #0
   13b0c:	beq	14658 <__assert_fail@plt+0x30f4>
   13b10:	ldr	r2, [sp, #48]	; 0x30
   13b14:	ldr	r3, [sp, #160]	; 0xa0
   13b18:	ldr	r1, [sp, #60]	; 0x3c
   13b1c:	str	r3, [sp, #16]
   13b20:	ldr	r3, [sp, #156]	; 0x9c
   13b24:	str	r3, [sp, #12]
   13b28:	ldr	r3, [sp, #152]	; 0x98
   13b2c:	str	r3, [sp, #8]
   13b30:	ldr	r3, [sp, #148]	; 0x94
   13b34:	str	r3, [sp, #4]
   13b38:	mov	r3, #5
   13b3c:	str	r3, [sp]
   13b40:	ldr	r3, [sp, #40]	; 0x28
   13b44:	mov	r0, r8
   13b48:	bl	13a00 <__assert_fail@plt+0x249c>
   13b4c:	mov	r4, r0
   13b50:	b	146b0 <__assert_fail@plt+0x314c>
   13b54:	ldr	r3, [pc, #2948]	; 146e0 <__assert_fail@plt+0x317c>
   13b58:	mov	r7, #1
   13b5c:	mov	r4, #0
   13b60:	mov	sl, #5
   13b64:	str	r7, [sp, #24]
   13b68:	str	r7, [sp, #32]
   13b6c:	str	r3, [sp, #44]	; 0x2c
   13b70:	b	13a8c <__assert_fail@plt+0x2528>
   13b74:	cmp	r7, #0
   13b78:	bne	13cbc <__assert_fail@plt+0x2758>
   13b7c:	cmp	r5, #0
   13b80:	mov	r4, #1
   13b84:	movne	r3, #34	; 0x22
   13b88:	strbne	r3, [r8]
   13b8c:	mov	r3, #1
   13b90:	str	r3, [sp, #24]
   13b94:	str	r3, [sp, #32]
   13b98:	ldr	r3, [pc, #2880]	; 146e0 <__assert_fail@plt+0x317c>
   13b9c:	str	r3, [sp, #44]	; 0x2c
   13ba0:	b	13a8c <__assert_fail@plt+0x2528>
   13ba4:	cmp	sl, #10
   13ba8:	beq	13bcc <__assert_fail@plt+0x2668>
   13bac:	mov	r1, sl
   13bb0:	ldr	r0, [pc, #2860]	; 146e4 <__assert_fail@plt+0x3180>
   13bb4:	bl	138cc <__assert_fail@plt+0x2368>
   13bb8:	mov	r1, sl
   13bbc:	str	r0, [sp, #156]	; 0x9c
   13bc0:	ldr	r0, [pc, #2848]	; 146e8 <__assert_fail@plt+0x3184>
   13bc4:	bl	138cc <__assert_fail@plt+0x2368>
   13bc8:	str	r0, [sp, #160]	; 0xa0
   13bcc:	cmp	r7, #0
   13bd0:	moveq	r4, r7
   13bd4:	beq	13bec <__assert_fail@plt+0x2688>
   13bd8:	mov	r4, #0
   13bdc:	b	13bfc <__assert_fail@plt+0x2698>
   13be0:	cmp	r5, r4
   13be4:	strbhi	r3, [r8, r4]
   13be8:	add	r4, r4, #1
   13bec:	ldr	r3, [sp, #156]	; 0x9c
   13bf0:	ldrb	r3, [r3, r4]
   13bf4:	cmp	r3, #0
   13bf8:	bne	13be0 <__assert_fail@plt+0x267c>
   13bfc:	ldr	r0, [sp, #160]	; 0xa0
   13c00:	bl	113fc <strlen@plt>
   13c04:	ldr	r3, [sp, #160]	; 0xa0
   13c08:	str	r0, [sp, #32]
   13c0c:	str	r3, [sp, #44]	; 0x2c
   13c10:	mov	r3, #1
   13c14:	str	r3, [sp, #24]
   13c18:	b	13a8c <__assert_fail@plt+0x2528>
   13c1c:	mov	r3, #1
   13c20:	cmp	r7, #0
   13c24:	streq	r3, [sp, #24]
   13c28:	beq	13c6c <__assert_fail@plt+0x2708>
   13c2c:	str	r3, [sp, #32]
   13c30:	b	13c58 <__assert_fail@plt+0x26f4>
   13c34:	cmp	r7, #0
   13c38:	beq	13c6c <__assert_fail@plt+0x2708>
   13c3c:	mov	r3, #1
   13c40:	str	r3, [sp, #32]
   13c44:	ldr	r3, [pc, #2716]	; 146e8 <__assert_fail@plt+0x3184>
   13c48:	b	13ccc <__assert_fail@plt+0x2768>
   13c4c:	mov	r7, #1
   13c50:	str	r7, [sp, #24]
   13c54:	str	r7, [sp, #32]
   13c58:	ldr	r3, [pc, #2696]	; 146e8 <__assert_fail@plt+0x3184>
   13c5c:	mov	r4, #0
   13c60:	str	r3, [sp, #44]	; 0x2c
   13c64:	mov	sl, #2
   13c68:	b	13a8c <__assert_fail@plt+0x2528>
   13c6c:	cmp	r5, #0
   13c70:	movne	r3, #39	; 0x27
   13c74:	movne	r7, #0
   13c78:	strbne	r3, [r8]
   13c7c:	moveq	r7, r5
   13c80:	mov	r3, #1
   13c84:	mov	r4, #1
   13c88:	str	r3, [sp, #32]
   13c8c:	ldr	r3, [pc, #2644]	; 146e8 <__assert_fail@plt+0x3184>
   13c90:	str	r3, [sp, #44]	; 0x2c
   13c94:	b	13c64 <__assert_fail@plt+0x2700>
   13c98:	bl	11540 <abort@plt>
   13c9c:	mov	r3, #1
   13ca0:	mov	r7, #0
   13ca4:	str	r3, [sp, #24]
   13ca8:	mov	r4, #0
   13cac:	b	13a8c <__assert_fail@plt+0x2528>
   13cb0:	mov	r7, #1
   13cb4:	str	sl, [sp, #32]
   13cb8:	b	13c58 <__assert_fail@plt+0x26f4>
   13cbc:	mov	r3, #1
   13cc0:	str	r7, [sp, #24]
   13cc4:	str	r3, [sp, #32]
   13cc8:	ldr	r3, [pc, #2576]	; 146e0 <__assert_fail@plt+0x317c>
   13ccc:	str	r3, [sp, #44]	; 0x2c
   13cd0:	b	13ca8 <__assert_fail@plt+0x2744>
   13cd4:	ldr	fp, [sp, #24]
   13cd8:	ldr	r3, [sp, #32]
   13cdc:	cmp	sl, #2
   13ce0:	moveq	fp, #0
   13ce4:	andne	fp, fp, #1
   13ce8:	adds	r5, r3, #0
   13cec:	movne	r5, #1
   13cf0:	ands	r3, fp, r5
   13cf4:	str	r3, [sp, #64]	; 0x40
   13cf8:	beq	13dc8 <__assert_fail@plt+0x2864>
   13cfc:	ldr	r3, [sp, #28]
   13d00:	ldr	r2, [sp, #32]
   13d04:	cmp	r2, #1
   13d08:	add	r6, r3, r2
   13d0c:	mov	r3, r2
   13d10:	ldr	r2, [sp, #40]	; 0x28
   13d14:	movls	r3, #0
   13d18:	movhi	r3, #1
   13d1c:	cmn	r2, #1
   13d20:	movne	r3, #0
   13d24:	cmp	r3, #0
   13d28:	beq	13d38 <__assert_fail@plt+0x27d4>
   13d2c:	ldr	r0, [sp, #48]	; 0x30
   13d30:	bl	113fc <strlen@plt>
   13d34:	str	r0, [sp, #40]	; 0x28
   13d38:	ldr	r3, [sp, #40]	; 0x28
   13d3c:	cmp	r6, r3
   13d40:	bhi	13dc0 <__assert_fail@plt+0x285c>
   13d44:	ldr	r0, [sp, #28]
   13d48:	ldr	r2, [sp, #32]
   13d4c:	ldr	r3, [sp, #48]	; 0x30
   13d50:	ldr	r1, [sp, #44]	; 0x2c
   13d54:	add	r0, r3, r0
   13d58:	bl	112b8 <memcmp@plt>
   13d5c:	cmp	r0, #0
   13d60:	bne	13dc0 <__assert_fail@plt+0x285c>
   13d64:	cmp	r7, #0
   13d68:	beq	13dc8 <__assert_fail@plt+0x2864>
   13d6c:	str	r7, [sp, #24]
   13d70:	ldr	r3, [sp, #24]
   13d74:	mov	r1, r9
   13d78:	ldr	r2, [sp, #48]	; 0x30
   13d7c:	cmp	sl, #2
   13d80:	movne	r3, #0
   13d84:	andeq	r3, r3, #1
   13d88:	cmp	r3, #0
   13d8c:	ldr	r3, [sp, #160]	; 0xa0
   13d90:	movne	sl, #4
   13d94:	str	sl, [sp]
   13d98:	str	r3, [sp, #16]
   13d9c:	ldr	r3, [sp, #156]	; 0x9c
   13da0:	str	r3, [sp, #12]
   13da4:	mov	r3, #0
   13da8:	str	r3, [sp, #8]
   13dac:	ldr	r3, [sp, #148]	; 0x94
   13db0:	bic	r3, r3, #2
   13db4:	str	r3, [sp, #4]
   13db8:	ldr	r3, [sp, #40]	; 0x28
   13dbc:	b	13b44 <__assert_fail@plt+0x25e0>
   13dc0:	mov	r3, #0
   13dc4:	str	r3, [sp, #64]	; 0x40
   13dc8:	ldr	r2, [sp, #28]
   13dcc:	ldr	r3, [sp, #48]	; 0x30
   13dd0:	add	r3, r3, r2
   13dd4:	str	r3, [sp, #80]	; 0x50
   13dd8:	ldr	r3, [sp, #48]	; 0x30
   13ddc:	ldrb	r6, [r3, r2]
   13de0:	cmp	r6, #58	; 0x3a
   13de4:	bhi	13f48 <__assert_fail@plt+0x29e4>
   13de8:	cmp	r6, #43	; 0x2b
   13dec:	bcs	14108 <__assert_fail@plt+0x2ba4>
   13df0:	cmp	r6, #32
   13df4:	beq	1415c <__assert_fail@plt+0x2bf8>
   13df8:	bhi	13ea0 <__assert_fail@plt+0x293c>
   13dfc:	cmp	r6, #9
   13e00:	beq	14304 <__assert_fail@plt+0x2da0>
   13e04:	bhi	13e64 <__assert_fail@plt+0x2900>
   13e08:	cmp	r6, #7
   13e0c:	beq	14314 <__assert_fail@plt+0x2db0>
   13e10:	bhi	14330 <__assert_fail@plt+0x2dcc>
   13e14:	cmp	r6, #0
   13e18:	beq	14178 <__assert_fail@plt+0x2c14>
   13e1c:	ldr	r3, [sp, #76]	; 0x4c
   13e20:	cmp	r3, #1
   13e24:	bne	1437c <__assert_fail@plt+0x2e18>
   13e28:	bl	113e4 <__ctype_b_loc@plt>
   13e2c:	ldr	r2, [r0]
   13e30:	sxth	r3, r6
   13e34:	lsl	r3, r3, #1
   13e38:	ldrh	r5, [r2, r3]
   13e3c:	ldr	r3, [sp, #76]	; 0x4c
   13e40:	ubfx	r5, r5, #14, #1
   13e44:	str	r3, [sp, #56]	; 0x38
   13e48:	ldr	r3, [sp, #24]
   13e4c:	eor	fp, r5, #1
   13e50:	and	fp, fp, r3
   13e54:	ands	fp, fp, #255	; 0xff
   13e58:	beq	14038 <__assert_fail@plt+0x2ad4>
   13e5c:	mov	r5, #0
   13e60:	b	14428 <__assert_fail@plt+0x2ec4>
   13e64:	cmp	r6, #11
   13e68:	beq	14338 <__assert_fail@plt+0x2dd4>
   13e6c:	bcc	1430c <__assert_fail@plt+0x2da8>
   13e70:	cmp	r6, #12
   13e74:	beq	14340 <__assert_fail@plt+0x2ddc>
   13e78:	cmp	r6, #13
   13e7c:	moveq	r3, #114	; 0x72
   13e80:	bne	13e1c <__assert_fail@plt+0x28b8>
   13e84:	cmp	sl, #2
   13e88:	movne	r2, #0
   13e8c:	andeq	r2, r7, #1
   13e90:	cmp	r2, #0
   13e94:	beq	14318 <__assert_fail@plt+0x2db4>
   13e98:	mov	sl, #2
   13e9c:	b	13d70 <__assert_fail@plt+0x280c>
   13ea0:	cmp	r6, #37	; 0x25
   13ea4:	beq	14108 <__assert_fail@plt+0x2ba4>
   13ea8:	bhi	13ebc <__assert_fail@plt+0x2958>
   13eac:	cmp	r6, #35	; 0x23
   13eb0:	beq	14150 <__assert_fail@plt+0x2bec>
   13eb4:	mov	r5, #0
   13eb8:	b	14160 <__assert_fail@plt+0x2bfc>
   13ebc:	cmp	r6, #39	; 0x27
   13ec0:	bne	13eb4 <__assert_fail@plt+0x2950>
   13ec4:	cmp	sl, #2
   13ec8:	ldrne	r5, [sp, #36]	; 0x24
   13ecc:	movne	r3, r5
   13ed0:	strne	r3, [sp, #68]	; 0x44
   13ed4:	bne	14254 <__assert_fail@plt+0x2cf0>
   13ed8:	cmp	r7, #0
   13edc:	bne	13d70 <__assert_fail@plt+0x280c>
   13ee0:	ldr	r3, [sp, #60]	; 0x3c
   13ee4:	cmp	r9, #0
   13ee8:	clz	r3, r3
   13eec:	lsr	r3, r3, #5
   13ef0:	moveq	r3, #0
   13ef4:	cmp	r3, #0
   13ef8:	strne	r9, [sp, #60]	; 0x3c
   13efc:	movne	r9, #0
   13f00:	bne	13f10 <__assert_fail@plt+0x29ac>
   13f04:	cmp	r9, r4
   13f08:	movhi	r3, #39	; 0x27
   13f0c:	strbhi	r3, [r8, r4]
   13f10:	add	r3, r4, #1
   13f14:	ldr	r5, [sp, #36]	; 0x24
   13f18:	mov	fp, #0
   13f1c:	cmp	r3, r9
   13f20:	movcc	r2, #92	; 0x5c
   13f24:	str	fp, [sp, #52]	; 0x34
   13f28:	strbcc	r2, [r8, r3]
   13f2c:	add	r3, r4, #2
   13f30:	add	r4, r4, #3
   13f34:	cmp	r3, r9
   13f38:	str	r5, [sp, #68]	; 0x44
   13f3c:	movcc	r2, #39	; 0x27
   13f40:	strbcc	r2, [r8, r3]
   13f44:	b	14038 <__assert_fail@plt+0x2ad4>
   13f48:	cmp	r6, #94	; 0x5e
   13f4c:	beq	13eb4 <__assert_fail@plt+0x2950>
   13f50:	bhi	14110 <__assert_fail@plt+0x2bac>
   13f54:	cmp	r6, #90	; 0x5a
   13f58:	bhi	140fc <__assert_fail@plt+0x2b98>
   13f5c:	cmp	r6, #65	; 0x41
   13f60:	bcs	14108 <__assert_fail@plt+0x2ba4>
   13f64:	cmp	r6, #62	; 0x3e
   13f68:	bls	13eb4 <__assert_fail@plt+0x2950>
   13f6c:	cmp	r6, #63	; 0x3f
   13f70:	bne	13e1c <__assert_fail@plt+0x28b8>
   13f74:	cmp	sl, #2
   13f78:	beq	1425c <__assert_fail@plt+0x2cf8>
   13f7c:	cmp	sl, #5
   13f80:	movne	fp, #0
   13f84:	bne	1462c <__assert_fail@plt+0x30c8>
   13f88:	ldr	r3, [sp, #148]	; 0x94
   13f8c:	tst	r3, #4
   13f90:	beq	14264 <__assert_fail@plt+0x2d00>
   13f94:	ldr	r3, [sp, #28]
   13f98:	add	r2, r3, #2
   13f9c:	ldr	r3, [sp, #40]	; 0x28
   13fa0:	cmp	r2, r3
   13fa4:	bcs	14264 <__assert_fail@plt+0x2d00>
   13fa8:	ldr	r1, [sp, #28]
   13fac:	ldr	r3, [sp, #48]	; 0x30
   13fb0:	add	r3, r3, r1
   13fb4:	ldrb	r1, [r3, #1]
   13fb8:	cmp	r1, #63	; 0x3f
   13fbc:	bne	14264 <__assert_fail@plt+0x2d00>
   13fc0:	ldr	r3, [sp, #48]	; 0x30
   13fc4:	ldrb	r6, [r3, r2]
   13fc8:	sub	r3, r6, #33	; 0x21
   13fcc:	uxtb	r3, r3
   13fd0:	cmp	r3, #29
   13fd4:	bhi	14634 <__assert_fail@plt+0x30d0>
   13fd8:	ldr	r0, [pc, #1804]	; 146ec <__assert_fail@plt+0x3188>
   13fdc:	mov	r5, #1
   13fe0:	ands	r5, r0, r5, lsl r3
   13fe4:	beq	1463c <__assert_fail@plt+0x30d8>
   13fe8:	cmp	r7, #0
   13fec:	bne	13d70 <__assert_fail@plt+0x280c>
   13ff0:	cmp	r9, r4
   13ff4:	add	r3, r4, #1
   13ff8:	str	r2, [sp, #28]
   13ffc:	mov	r5, #0
   14000:	strbhi	r1, [r8, r4]
   14004:	cmp	r9, r3
   14008:	mov	fp, r5
   1400c:	movhi	r1, #34	; 0x22
   14010:	strbhi	r1, [r8, r3]
   14014:	add	r3, r4, #2
   14018:	cmp	r9, r3
   1401c:	movhi	r1, #34	; 0x22
   14020:	strbhi	r1, [r8, r3]
   14024:	add	r3, r4, #3
   14028:	add	r4, r4, #4
   1402c:	cmp	r9, r3
   14030:	movhi	r1, #63	; 0x3f
   14034:	strbhi	r1, [r8, r3]
   14038:	ldr	r3, [sp, #24]
   1403c:	eor	r3, r3, #1
   14040:	cmp	sl, #2
   14044:	orreq	r3, r3, #1
   14048:	eor	r3, r3, #1
   1404c:	orr	r3, r7, r3
   14050:	tst	r3, #255	; 0xff
   14054:	beq	14080 <__assert_fail@plt+0x2b1c>
   14058:	ldr	r3, [sp, #152]	; 0x98
   1405c:	cmp	r3, #0
   14060:	beq	14080 <__assert_fail@plt+0x2b1c>
   14064:	ldr	r1, [sp, #152]	; 0x98
   14068:	ubfx	r2, r6, #5, #8
   1406c:	and	r3, r6, #31
   14070:	ldr	r2, [r1, r2, lsl #2]
   14074:	lsr	r3, r2, r3
   14078:	tst	r3, #1
   1407c:	bne	1408c <__assert_fail@plt+0x2b28>
   14080:	ldr	r3, [sp, #64]	; 0x40
   14084:	cmp	r3, #0
   14088:	beq	14284 <__assert_fail@plt+0x2d20>
   1408c:	sub	r3, sl, #2
   14090:	cmp	r7, #0
   14094:	clz	r3, r3
   14098:	lsr	r3, r3, #5
   1409c:	bne	13d70 <__assert_fail@plt+0x280c>
   140a0:	ldr	r2, [sp, #52]	; 0x34
   140a4:	eor	r2, r2, #1
   140a8:	ands	r3, r3, r2
   140ac:	beq	140e4 <__assert_fail@plt+0x2b80>
   140b0:	cmp	r9, r4
   140b4:	str	r3, [sp, #52]	; 0x34
   140b8:	movhi	r2, #39	; 0x27
   140bc:	strbhi	r2, [r8, r4]
   140c0:	add	r2, r4, #1
   140c4:	cmp	r9, r2
   140c8:	movhi	r1, #36	; 0x24
   140cc:	strbhi	r1, [r8, r2]
   140d0:	add	r2, r4, #2
   140d4:	add	r4, r4, #3
   140d8:	cmp	r9, r2
   140dc:	movhi	r1, #39	; 0x27
   140e0:	strbhi	r1, [r8, r2]
   140e4:	cmp	r9, r4
   140e8:	ldr	fp, [sp, #36]	; 0x24
   140ec:	movhi	r3, #92	; 0x5c
   140f0:	strbhi	r3, [r8, r4]
   140f4:	add	r4, r4, #1
   140f8:	b	14284 <__assert_fail@plt+0x2d20>
   140fc:	cmp	r6, #92	; 0x5c
   14100:	beq	1426c <__assert_fail@plt+0x2d08>
   14104:	bls	13eb4 <__assert_fail@plt+0x2950>
   14108:	ldr	r5, [sp, #36]	; 0x24
   1410c:	b	14254 <__assert_fail@plt+0x2cf0>
   14110:	cmp	r6, #122	; 0x7a
   14114:	bhi	14134 <__assert_fail@plt+0x2bd0>
   14118:	cmp	r6, #97	; 0x61
   1411c:	bcs	14108 <__assert_fail@plt+0x2ba4>
   14120:	cmp	r6, #95	; 0x5f
   14124:	beq	14108 <__assert_fail@plt+0x2ba4>
   14128:	cmp	r6, #96	; 0x60
   1412c:	bne	13e1c <__assert_fail@plt+0x28b8>
   14130:	b	13eb4 <__assert_fail@plt+0x2950>
   14134:	cmp	r6, #124	; 0x7c
   14138:	beq	13eb4 <__assert_fail@plt+0x2950>
   1413c:	bcc	14348 <__assert_fail@plt+0x2de4>
   14140:	cmp	r6, #125	; 0x7d
   14144:	beq	14348 <__assert_fail@plt+0x2de4>
   14148:	cmp	r6, #126	; 0x7e
   1414c:	bne	13e1c <__assert_fail@plt+0x28b8>
   14150:	ldr	r3, [sp, #28]
   14154:	cmp	r3, #0
   14158:	bne	14264 <__assert_fail@plt+0x2d00>
   1415c:	ldr	r5, [sp, #36]	; 0x24
   14160:	cmp	sl, #2
   14164:	movne	fp, #0
   14168:	andeq	fp, r7, #1
   1416c:	cmp	fp, #0
   14170:	beq	14038 <__assert_fail@plt+0x2ad4>
   14174:	b	13e98 <__assert_fail@plt+0x2934>
   14178:	ldr	r3, [sp, #24]
   1417c:	cmp	r3, #0
   14180:	beq	14248 <__assert_fail@plt+0x2ce4>
   14184:	sub	r2, sl, #2
   14188:	cmp	r7, #0
   1418c:	clz	r2, r2
   14190:	lsr	r2, r2, #5
   14194:	bne	13d6c <__assert_fail@plt+0x2808>
   14198:	ldr	r3, [sp, #52]	; 0x34
   1419c:	eor	r3, r3, #1
   141a0:	ands	r2, r2, r3
   141a4:	moveq	r3, r4
   141a8:	beq	141e0 <__assert_fail@plt+0x2c7c>
   141ac:	cmp	r9, r4
   141b0:	str	r2, [sp, #52]	; 0x34
   141b4:	movhi	r3, #39	; 0x27
   141b8:	strbhi	r3, [r8, r4]
   141bc:	add	r3, r4, #1
   141c0:	cmp	r9, r3
   141c4:	movhi	r1, #36	; 0x24
   141c8:	strbhi	r1, [r8, r3]
   141cc:	add	r3, r4, #2
   141d0:	cmp	r9, r3
   141d4:	movhi	r1, #39	; 0x27
   141d8:	strbhi	r1, [r8, r3]
   141dc:	add	r3, r4, #3
   141e0:	cmp	r9, r3
   141e4:	add	r4, r3, #1
   141e8:	movhi	r2, #92	; 0x5c
   141ec:	strbhi	r2, [r8, r3]
   141f0:	cmp	fp, #0
   141f4:	beq	1461c <__assert_fail@plt+0x30b8>
   141f8:	ldr	r2, [sp, #28]
   141fc:	ldr	r1, [sp, #40]	; 0x28
   14200:	add	r2, r2, #1
   14204:	cmp	r2, r1
   14208:	bcs	14240 <__assert_fail@plt+0x2cdc>
   1420c:	ldr	r1, [sp, #48]	; 0x30
   14210:	mov	r6, #48	; 0x30
   14214:	ldrb	r2, [r1, r2]
   14218:	sub	r2, r2, #48	; 0x30
   1421c:	cmp	r2, #9
   14220:	bhi	1462c <__assert_fail@plt+0x30c8>
   14224:	cmp	r9, r4
   14228:	add	r2, r3, #2
   1422c:	strbhi	r6, [r8, r4]
   14230:	cmp	r9, r2
   14234:	add	r4, r3, #3
   14238:	movhi	r1, #48	; 0x30
   1423c:	strbhi	r1, [r8, r2]
   14240:	mov	r5, #0
   14244:	b	14624 <__assert_fail@plt+0x30c0>
   14248:	ldr	r3, [sp, #148]	; 0x94
   1424c:	ands	r5, r3, #1
   14250:	bne	142d8 <__assert_fail@plt+0x2d74>
   14254:	mov	fp, #0
   14258:	b	14038 <__assert_fail@plt+0x2ad4>
   1425c:	cmp	r7, #0
   14260:	bne	13d70 <__assert_fail@plt+0x280c>
   14264:	mov	r5, #0
   14268:	b	14254 <__assert_fail@plt+0x2cf0>
   1426c:	cmp	sl, #2
   14270:	bne	142e4 <__assert_fail@plt+0x2d80>
   14274:	cmp	r7, #0
   14278:	bne	13d70 <__assert_fail@plt+0x280c>
   1427c:	mov	r5, r7
   14280:	mov	fp, r7
   14284:	ldr	r3, [sp, #52]	; 0x34
   14288:	eor	fp, fp, #1
   1428c:	tst	r3, fp
   14290:	beq	142bc <__assert_fail@plt+0x2d58>
   14294:	cmp	r9, r4
   14298:	movhi	r3, #39	; 0x27
   1429c:	strbhi	r3, [r8, r4]
   142a0:	add	r3, r4, #1
   142a4:	add	r4, r4, #2
   142a8:	cmp	r9, r3
   142ac:	movhi	r2, #39	; 0x27
   142b0:	strbhi	r2, [r8, r3]
   142b4:	mov	r3, #0
   142b8:	str	r3, [sp, #52]	; 0x34
   142bc:	cmp	r9, r4
   142c0:	ldr	r3, [sp, #72]	; 0x48
   142c4:	strbhi	r6, [r8, r4]
   142c8:	cmp	r5, #0
   142cc:	add	r4, r4, #1
   142d0:	moveq	r3, #0
   142d4:	str	r3, [sp, #72]	; 0x48
   142d8:	ldr	r3, [sp, #28]
   142dc:	add	r3, r3, #1
   142e0:	b	13a98 <__assert_fail@plt+0x2534>
   142e4:	ldr	r3, [sp, #24]
   142e8:	and	r3, r3, r7
   142ec:	tst	r5, r3
   142f0:	moveq	r3, r6
   142f4:	beq	13e84 <__assert_fail@plt+0x2920>
   142f8:	mov	fp, #0
   142fc:	mov	r5, fp
   14300:	b	14284 <__assert_fail@plt+0x2d20>
   14304:	mov	r3, #116	; 0x74
   14308:	b	13e84 <__assert_fail@plt+0x2920>
   1430c:	mov	r3, #110	; 0x6e
   14310:	b	13e84 <__assert_fail@plt+0x2920>
   14314:	mov	r3, #97	; 0x61
   14318:	ldr	r2, [sp, #24]
   1431c:	cmp	r2, #0
   14320:	beq	14264 <__assert_fail@plt+0x2d00>
   14324:	mov	r6, r3
   14328:	mov	r5, #0
   1432c:	b	1408c <__assert_fail@plt+0x2b28>
   14330:	mov	r3, #98	; 0x62
   14334:	b	14318 <__assert_fail@plt+0x2db4>
   14338:	mov	r3, #118	; 0x76
   1433c:	b	14318 <__assert_fail@plt+0x2db4>
   14340:	mov	r3, #102	; 0x66
   14344:	b	14318 <__assert_fail@plt+0x2db4>
   14348:	ldr	r3, [sp, #40]	; 0x28
   1434c:	cmn	r3, #1
   14350:	bne	14370 <__assert_fail@plt+0x2e0c>
   14354:	ldr	r3, [sp, #48]	; 0x30
   14358:	ldrb	r3, [r3, #1]
   1435c:	adds	r3, r3, #0
   14360:	movne	r3, #1
   14364:	cmp	r3, #0
   14368:	bne	14264 <__assert_fail@plt+0x2d00>
   1436c:	b	14150 <__assert_fail@plt+0x2bec>
   14370:	ldr	r3, [sp, #40]	; 0x28
   14374:	subs	r3, r3, #1
   14378:	b	14360 <__assert_fail@plt+0x2dfc>
   1437c:	mov	r3, #0
   14380:	mov	r2, #0
   14384:	strd	r2, [sp, #96]	; 0x60
   14388:	ldr	r3, [sp, #40]	; 0x28
   1438c:	cmn	r3, #1
   14390:	bne	143a0 <__assert_fail@plt+0x2e3c>
   14394:	ldr	r0, [sp, #48]	; 0x30
   14398:	bl	113fc <strlen@plt>
   1439c:	str	r0, [sp, #40]	; 0x28
   143a0:	ldr	r5, [sp, #36]	; 0x24
   143a4:	mov	r3, #0
   143a8:	str	r3, [sp, #56]	; 0x38
   143ac:	ldr	r3, [sp, #28]
   143b0:	add	r0, sp, #92	; 0x5c
   143b4:	ldr	r1, [sp, #40]	; 0x28
   143b8:	ldr	r2, [sp, #56]	; 0x38
   143bc:	add	r2, r3, r2
   143c0:	ldr	r3, [sp, #48]	; 0x30
   143c4:	add	fp, r3, r2
   143c8:	sub	r2, r1, r2
   143cc:	add	r3, sp, #96	; 0x60
   143d0:	mov	r1, fp
   143d4:	bl	21278 <__assert_fail@plt+0xfd14>
   143d8:	subs	r2, r0, #0
   143dc:	beq	1441c <__assert_fail@plt+0x2eb8>
   143e0:	cmn	r2, #1
   143e4:	beq	145f0 <__assert_fail@plt+0x308c>
   143e8:	cmn	r2, #2
   143ec:	bne	14560 <__assert_fail@plt+0x2ffc>
   143f0:	ldr	r3, [sp, #28]
   143f4:	ldr	r2, [sp, #56]	; 0x38
   143f8:	add	r3, r3, r2
   143fc:	ldr	r2, [sp, #40]	; 0x28
   14400:	cmp	r2, r3
   14404:	bls	145f0 <__assert_fail@plt+0x308c>
   14408:	ldr	r2, [sp, #56]	; 0x38
   1440c:	ldr	r3, [sp, #80]	; 0x50
   14410:	ldrb	r5, [r3, r2]
   14414:	cmp	r5, #0
   14418:	bne	14550 <__assert_fail@plt+0x2fec>
   1441c:	ldr	r3, [sp, #56]	; 0x38
   14420:	cmp	r3, #1
   14424:	bls	13e48 <__assert_fail@plt+0x28e4>
   14428:	ldr	r3, [sp, #28]
   1442c:	mov	fp, #0
   14430:	mov	ip, #92	; 0x5c
   14434:	ldr	r2, [sp, #56]	; 0x38
   14438:	add	r3, r3, r2
   1443c:	ldr	r2, [sp, #24]
   14440:	str	r3, [sp, #36]	; 0x24
   14444:	eor	r3, r5, #1
   14448:	and	r3, r3, r2
   1444c:	mov	r2, #39	; 0x27
   14450:	uxtb	r3, r3
   14454:	cmp	r3, #0
   14458:	beq	145f8 <__assert_fail@plt+0x3094>
   1445c:	sub	r0, sl, #2
   14460:	cmp	r7, #0
   14464:	clz	r0, r0
   14468:	lsr	r0, r0, #5
   1446c:	bne	13d6c <__assert_fail@plt+0x2808>
   14470:	ldr	r1, [sp, #52]	; 0x34
   14474:	eor	r1, r1, #1
   14478:	ands	r1, r0, r1
   1447c:	beq	144ac <__assert_fail@plt+0x2f48>
   14480:	cmp	r9, r4
   14484:	add	r0, r4, #1
   14488:	str	r1, [sp, #52]	; 0x34
   1448c:	strbhi	r2, [r8, r4]
   14490:	cmp	r9, r0
   14494:	movhi	lr, #36	; 0x24
   14498:	strbhi	lr, [r8, r0]
   1449c:	add	r0, r4, #2
   144a0:	add	r4, r4, #3
   144a4:	cmp	r9, r0
   144a8:	strbhi	r2, [r8, r0]
   144ac:	cmp	r9, r4
   144b0:	add	r0, r4, #1
   144b4:	mov	fp, r3
   144b8:	strbhi	ip, [r8, r4]
   144bc:	cmp	r9, r0
   144c0:	lsrhi	r1, r6, #6
   144c4:	addhi	r1, r1, #48	; 0x30
   144c8:	strbhi	r1, [r8, r0]
   144cc:	add	r0, r4, #2
   144d0:	add	r4, r4, #3
   144d4:	cmp	r9, r0
   144d8:	ubfxhi	r1, r6, #3, #3
   144dc:	and	r6, r6, #7
   144e0:	add	r6, r6, #48	; 0x30
   144e4:	addhi	r1, r1, #48	; 0x30
   144e8:	strbhi	r1, [r8, r0]
   144ec:	eor	r0, fp, #1
   144f0:	ldr	r1, [sp, #28]
   144f4:	ldr	lr, [sp, #52]	; 0x34
   144f8:	add	r1, r1, #1
   144fc:	and	r0, r0, lr
   14500:	ldr	lr, [sp, #36]	; 0x24
   14504:	cmp	r1, lr
   14508:	bcs	14284 <__assert_fail@plt+0x2d20>
   1450c:	cmp	r0, #0
   14510:	beq	14534 <__assert_fail@plt+0x2fd0>
   14514:	cmp	r9, r4
   14518:	add	r0, r4, #1
   1451c:	strbhi	r2, [r8, r4]
   14520:	cmp	r9, r0
   14524:	add	r4, r4, #2
   14528:	strbhi	r2, [r8, r0]
   1452c:	mov	r0, #0
   14530:	str	r0, [sp, #52]	; 0x34
   14534:	ldr	r0, [sp, #48]	; 0x30
   14538:	cmp	r9, r4
   1453c:	str	r1, [sp, #28]
   14540:	strbhi	r6, [r8, r4]
   14544:	add	r4, r4, #1
   14548:	ldrb	r6, [r0, r1]
   1454c:	b	14454 <__assert_fail@plt+0x2ef0>
   14550:	ldr	r3, [sp, #56]	; 0x38
   14554:	add	r3, r3, #1
   14558:	str	r3, [sp, #56]	; 0x38
   1455c:	b	143f0 <__assert_fail@plt+0x2e8c>
   14560:	cmp	sl, #2
   14564:	movne	r3, #0
   14568:	andeq	r3, r7, #1
   1456c:	cmp	r3, #0
   14570:	movne	r1, #1
   14574:	bne	145d0 <__assert_fail@plt+0x306c>
   14578:	ldr	r0, [sp, #92]	; 0x5c
   1457c:	str	r2, [sp, #84]	; 0x54
   14580:	bl	11324 <iswprint@plt>
   14584:	ldr	r3, [sp, #56]	; 0x38
   14588:	cmp	r0, #0
   1458c:	add	r0, sp, #96	; 0x60
   14590:	moveq	r5, #0
   14594:	ldr	r2, [sp, #84]	; 0x54
   14598:	add	r3, r3, r2
   1459c:	str	r3, [sp, #56]	; 0x38
   145a0:	bl	11294 <mbsinit@plt>
   145a4:	cmp	r0, #0
   145a8:	beq	143ac <__assert_fail@plt+0x2e48>
   145ac:	b	1441c <__assert_fail@plt+0x2eb8>
   145b0:	ldrb	r3, [fp, #1]!
   145b4:	cmp	r3, #94	; 0x5e
   145b8:	beq	13e98 <__assert_fail@plt+0x2934>
   145bc:	bhi	145dc <__assert_fail@plt+0x3078>
   145c0:	sub	r3, r3, #91	; 0x5b
   145c4:	cmp	r3, #1
   145c8:	bls	13e98 <__assert_fail@plt+0x2934>
   145cc:	add	r1, r1, #1
   145d0:	cmp	r1, r2
   145d4:	bne	145b0 <__assert_fail@plt+0x304c>
   145d8:	b	14578 <__assert_fail@plt+0x3014>
   145dc:	cmp	r3, #96	; 0x60
   145e0:	beq	13e98 <__assert_fail@plt+0x2934>
   145e4:	cmp	r3, #124	; 0x7c
   145e8:	bne	145cc <__assert_fail@plt+0x3068>
   145ec:	b	13e98 <__assert_fail@plt+0x2934>
   145f0:	mov	r5, #0
   145f4:	b	1441c <__assert_fail@plt+0x2eb8>
   145f8:	ldr	r1, [sp, #64]	; 0x40
   145fc:	cmp	r1, #0
   14600:	beq	144ec <__assert_fail@plt+0x2f88>
   14604:	cmp	r9, r4
   14608:	mov	r1, #0
   1460c:	strbhi	ip, [r8, r4]
   14610:	add	r4, r4, #1
   14614:	str	r1, [sp, #64]	; 0x40
   14618:	b	144ec <__assert_fail@plt+0x2f88>
   1461c:	mov	r5, fp
   14620:	ldr	fp, [sp, #24]
   14624:	mov	r6, #48	; 0x30
   14628:	b	14038 <__assert_fail@plt+0x2ad4>
   1462c:	mov	r5, #0
   14630:	b	14038 <__assert_fail@plt+0x2ad4>
   14634:	mov	r6, r1
   14638:	b	14264 <__assert_fail@plt+0x2d00>
   1463c:	mov	r6, r1
   14640:	b	14254 <__assert_fail@plt+0x2cf0>
   14644:	ldr	r2, [sp, #28]
   14648:	ldr	r3, [sp, #40]	; 0x28
   1464c:	subs	r3, r3, r2
   14650:	movne	r3, #1
   14654:	b	13abc <__assert_fail@plt+0x2558>
   14658:	ldr	r3, [sp, #60]	; 0x3c
   1465c:	mov	sl, #2
   14660:	ldr	r7, [sp, #72]	; 0x48
   14664:	adds	r6, r3, #0
   14668:	mov	r5, r3
   1466c:	movne	r6, #1
   14670:	cmp	r9, #0
   14674:	movne	r6, #0
   14678:	cmp	r6, #0
   1467c:	bne	13a4c <__assert_fail@plt+0x24e8>
   14680:	ldr	r3, [sp, #68]	; 0x44
   14684:	ldr	r2, [sp, #44]	; 0x2c
   14688:	cmp	r2, #0
   1468c:	moveq	r3, #0
   14690:	andne	r3, r3, #1
   14694:	cmp	r3, #0
   14698:	movne	r3, r2
   1469c:	subne	r3, r3, #1
   146a0:	bne	146d0 <__assert_fail@plt+0x316c>
   146a4:	cmp	r9, r4
   146a8:	movhi	r3, #0
   146ac:	strbhi	r3, [r8, r4]
   146b0:	mov	r0, r4
   146b4:	add	sp, sp, #108	; 0x6c
   146b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146bc:	mov	r3, r7
   146c0:	b	14684 <__assert_fail@plt+0x3120>
   146c4:	cmp	r9, r4
   146c8:	strbhi	r2, [r8, r4]
   146cc:	add	r4, r4, #1
   146d0:	ldrb	r2, [r3, #1]!
   146d4:	cmp	r2, #0
   146d8:	bne	146c4 <__assert_fail@plt+0x3160>
   146dc:	b	146a4 <__assert_fail@plt+0x3140>
   146e0:	andeq	r2, r2, r8, lsr #6
   146e4:	andeq	r2, r2, r9, lsr r3
   146e8:	andeq	r2, r2, r4, lsl #3
   146ec:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   146f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146f4:	sub	sp, sp, #52	; 0x34
   146f8:	mov	r6, r0
   146fc:	mov	r5, r3
   14700:	mov	r8, r1
   14704:	mov	r9, r2
   14708:	bl	11414 <__errno_location@plt>
   1470c:	ldr	r3, [r0]
   14710:	cmn	r6, #-2147483647	; 0x80000001
   14714:	str	r0, [sp, #24]
   14718:	ldr	r7, [pc, #368]	; 14890 <__assert_fail@plt+0x332c>
   1471c:	str	r3, [sp, #32]
   14720:	movne	r3, #0
   14724:	moveq	r3, #1
   14728:	orrs	r3, r3, r6, lsr #31
   1472c:	ldr	r4, [r7]
   14730:	beq	14738 <__assert_fail@plt+0x31d4>
   14734:	bl	11540 <abort@plt>
   14738:	ldr	r2, [r7, #4]
   1473c:	cmp	r2, r6
   14740:	bgt	147b0 <__assert_fail@plt+0x324c>
   14744:	add	sl, r7, #8
   14748:	mov	r3, #8
   1474c:	cmp	r4, sl
   14750:	add	r1, sp, #44	; 0x2c
   14754:	str	r2, [sp, #44]	; 0x2c
   14758:	sub	r2, r6, r2
   1475c:	movne	r0, r4
   14760:	moveq	r0, #0
   14764:	add	r2, r2, #1
   14768:	str	r3, [sp]
   1476c:	mvn	r3, #-2147483648	; 0x80000000
   14770:	bl	202d0 <__assert_fail@plt+0xed6c>
   14774:	cmp	r4, sl
   14778:	mov	fp, r0
   1477c:	str	r0, [r7]
   14780:	ldmeq	r4, {r0, r1}
   14784:	mov	r4, fp
   14788:	ldr	r2, [sp, #44]	; 0x2c
   1478c:	stmeq	fp, {r0, r1}
   14790:	mov	r1, #0
   14794:	ldr	r0, [r7, #4]
   14798:	sub	r2, r2, r0
   1479c:	add	r0, fp, r0, lsl #3
   147a0:	lsl	r2, r2, #3
   147a4:	bl	11444 <memset@plt>
   147a8:	ldr	r3, [sp, #44]	; 0x2c
   147ac:	str	r3, [r7, #4]
   147b0:	ldr	r3, [r5, #4]
   147b4:	add	sl, r4, r6, lsl #3
   147b8:	mov	r2, r8
   147bc:	ldr	fp, [r4, r6, lsl #3]
   147c0:	ldr	r7, [sl, #4]
   147c4:	orr	r3, r3, #1
   147c8:	str	r3, [sp, #28]
   147cc:	add	r3, r5, #8
   147d0:	mov	r1, fp
   147d4:	str	r3, [sp, #36]	; 0x24
   147d8:	mov	r0, r7
   147dc:	ldr	r3, [r5, #44]	; 0x2c
   147e0:	str	r3, [sp, #16]
   147e4:	ldr	r3, [r5, #40]	; 0x28
   147e8:	str	r3, [sp, #12]
   147ec:	add	r3, r5, #8
   147f0:	str	r3, [sp, #8]
   147f4:	ldr	r3, [sp, #28]
   147f8:	str	r3, [sp, #4]
   147fc:	ldr	r3, [r5]
   14800:	str	r3, [sp]
   14804:	mov	r3, r9
   14808:	bl	13a00 <__assert_fail@plt+0x249c>
   1480c:	cmp	fp, r0
   14810:	bhi	14878 <__assert_fail@plt+0x3314>
   14814:	ldr	r3, [pc, #120]	; 14894 <__assert_fail@plt+0x3330>
   14818:	add	fp, r0, #1
   1481c:	str	fp, [r4, r6, lsl #3]
   14820:	cmp	r7, r3
   14824:	beq	14830 <__assert_fail@plt+0x32cc>
   14828:	mov	r0, r7
   1482c:	bl	13648 <__assert_fail@plt+0x20e4>
   14830:	mov	r0, fp
   14834:	bl	201c0 <__assert_fail@plt+0xec5c>
   14838:	ldr	r3, [r5, #44]	; 0x2c
   1483c:	mov	r2, r8
   14840:	mov	r1, fp
   14844:	str	r0, [sl, #4]
   14848:	mov	r7, r0
   1484c:	str	r3, [sp, #16]
   14850:	ldr	r3, [r5, #40]	; 0x28
   14854:	str	r3, [sp, #12]
   14858:	add	r3, r5, #8
   1485c:	str	r3, [sp, #8]
   14860:	ldr	r3, [sp, #28]
   14864:	str	r3, [sp, #4]
   14868:	ldr	r3, [r5]
   1486c:	str	r3, [sp]
   14870:	mov	r3, r9
   14874:	bl	13a00 <__assert_fail@plt+0x249c>
   14878:	ldr	r3, [sp, #24]
   1487c:	mov	r0, r7
   14880:	ldr	r2, [sp, #32]
   14884:	str	r2, [r3]
   14888:	add	sp, sp, #52	; 0x34
   1488c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14890:	andeq	r3, r3, ip, ror #2
   14894:	andeq	r3, r3, ip, asr #5
   14898:	push	{r4, r5, r6, lr}
   1489c:	mov	r5, r0
   148a0:	bl	11414 <__errno_location@plt>
   148a4:	mov	r4, r0
   148a8:	cmp	r5, #0
   148ac:	ldr	r0, [pc, #20]	; 148c8 <__assert_fail@plt+0x3364>
   148b0:	mov	r1, #48	; 0x30
   148b4:	movne	r0, r5
   148b8:	ldr	r6, [r4]
   148bc:	bl	203c0 <__assert_fail@plt+0xee5c>
   148c0:	str	r6, [r4]
   148c4:	pop	{r4, r5, r6, pc}
   148c8:	andeq	r3, r3, ip, asr #7
   148cc:	ldr	r3, [pc, #12]	; 148e0 <__assert_fail@plt+0x337c>
   148d0:	cmp	r0, #0
   148d4:	moveq	r0, r3
   148d8:	ldr	r0, [r0]
   148dc:	bx	lr
   148e0:	andeq	r3, r3, ip, asr #7
   148e4:	ldr	r3, [pc, #12]	; 148f8 <__assert_fail@plt+0x3394>
   148e8:	cmp	r0, #0
   148ec:	moveq	r0, r3
   148f0:	str	r1, [r0]
   148f4:	bx	lr
   148f8:	andeq	r3, r3, ip, asr #7
   148fc:	ldr	r3, [pc, #52]	; 14938 <__assert_fail@plt+0x33d4>
   14900:	cmp	r0, #0
   14904:	push	{lr}		; (str lr, [sp, #-4]!)
   14908:	lsr	lr, r1, #5
   1490c:	and	r1, r1, #31
   14910:	moveq	r0, r3
   14914:	add	r3, r0, #8
   14918:	ldr	ip, [r3, lr, lsl #2]
   1491c:	lsr	r0, ip, r1
   14920:	eor	r2, r2, r0
   14924:	and	r0, r0, #1
   14928:	and	r2, r2, #1
   1492c:	eor	r1, ip, r2, lsl r1
   14930:	str	r1, [r3, lr, lsl #2]
   14934:	pop	{pc}		; (ldr pc, [sp], #4)
   14938:	andeq	r3, r3, ip, asr #7
   1493c:	ldr	r3, [pc, #16]	; 14954 <__assert_fail@plt+0x33f0>
   14940:	cmp	r0, #0
   14944:	movne	r3, r0
   14948:	ldr	r0, [r3, #4]
   1494c:	str	r1, [r3, #4]
   14950:	bx	lr
   14954:	andeq	r3, r3, ip, asr #7
   14958:	ldr	r3, [pc, #44]	; 1498c <__assert_fail@plt+0x3428>
   1495c:	cmp	r0, #0
   14960:	moveq	r0, r3
   14964:	mov	r3, #10
   14968:	cmp	r2, #0
   1496c:	cmpne	r1, #0
   14970:	str	r3, [r0]
   14974:	bne	14980 <__assert_fail@plt+0x341c>
   14978:	push	{r4, lr}
   1497c:	bl	11540 <abort@plt>
   14980:	str	r1, [r0, #40]	; 0x28
   14984:	str	r2, [r0, #44]	; 0x2c
   14988:	bx	lr
   1498c:	andeq	r3, r3, ip, asr #7
   14990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14994:	sub	sp, sp, #24
   14998:	mov	sl, r3
   1499c:	mov	r7, r0
   149a0:	mov	r8, r1
   149a4:	mov	r9, r2
   149a8:	ldr	r4, [sp, #56]	; 0x38
   149ac:	ldr	r3, [pc, #88]	; 14a0c <__assert_fail@plt+0x34a8>
   149b0:	cmp	r4, #0
   149b4:	moveq	r4, r3
   149b8:	bl	11414 <__errno_location@plt>
   149bc:	ldr	r3, [r4, #44]	; 0x2c
   149c0:	mov	r5, r0
   149c4:	mov	r2, r9
   149c8:	mov	r1, r8
   149cc:	mov	r0, r7
   149d0:	ldr	r6, [r5]
   149d4:	str	r3, [sp, #16]
   149d8:	ldr	r3, [r4, #40]	; 0x28
   149dc:	str	r3, [sp, #12]
   149e0:	add	r3, r4, #8
   149e4:	str	r3, [sp, #8]
   149e8:	ldr	r3, [r4, #4]
   149ec:	str	r3, [sp, #4]
   149f0:	ldr	r3, [r4]
   149f4:	str	r3, [sp]
   149f8:	mov	r3, sl
   149fc:	bl	13a00 <__assert_fail@plt+0x249c>
   14a00:	str	r6, [r5]
   14a04:	add	sp, sp, #24
   14a08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a0c:	andeq	r3, r3, ip, asr #7
   14a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a14:	cmp	r3, #0
   14a18:	sub	sp, sp, #44	; 0x2c
   14a1c:	mov	r6, r2
   14a20:	mov	sl, r1
   14a24:	mov	r9, r0
   14a28:	ldr	r4, [pc, #176]	; 14ae0 <__assert_fail@plt+0x357c>
   14a2c:	movne	r4, r3
   14a30:	bl	11414 <__errno_location@plt>
   14a34:	ldr	r3, [r0]
   14a38:	mov	r1, #0
   14a3c:	mov	r2, r9
   14a40:	mov	r8, r0
   14a44:	mov	r0, r1
   14a48:	ldr	r5, [r4, #4]
   14a4c:	add	fp, r4, #8
   14a50:	str	r3, [sp, #28]
   14a54:	ldr	r3, [r4, #44]	; 0x2c
   14a58:	cmp	r6, #0
   14a5c:	orreq	r5, r5, #1
   14a60:	str	r3, [sp, #16]
   14a64:	ldr	r3, [r4, #40]	; 0x28
   14a68:	stmib	sp, {r5, fp}
   14a6c:	str	r3, [sp, #12]
   14a70:	ldr	r3, [r4]
   14a74:	str	r3, [sp]
   14a78:	mov	r3, sl
   14a7c:	bl	13a00 <__assert_fail@plt+0x249c>
   14a80:	add	r1, r0, #1
   14a84:	mov	r7, r0
   14a88:	mov	r0, r1
   14a8c:	str	r1, [sp, #36]	; 0x24
   14a90:	bl	201c0 <__assert_fail@plt+0xec5c>
   14a94:	ldr	r3, [r4, #44]	; 0x2c
   14a98:	mov	r2, r9
   14a9c:	ldr	r1, [sp, #36]	; 0x24
   14aa0:	str	r3, [sp, #16]
   14aa4:	ldr	r3, [r4, #40]	; 0x28
   14aa8:	stmib	sp, {r5, fp}
   14aac:	str	r0, [sp, #32]
   14ab0:	str	r3, [sp, #12]
   14ab4:	ldr	r3, [r4]
   14ab8:	str	r3, [sp]
   14abc:	mov	r3, sl
   14ac0:	bl	13a00 <__assert_fail@plt+0x249c>
   14ac4:	ldr	r3, [sp, #28]
   14ac8:	cmp	r6, #0
   14acc:	ldr	r0, [sp, #32]
   14ad0:	str	r3, [r8]
   14ad4:	strne	r7, [r6]
   14ad8:	add	sp, sp, #44	; 0x2c
   14adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae0:	andeq	r3, r3, ip, asr #7
   14ae4:	mov	r3, r2
   14ae8:	mov	r2, #0
   14aec:	b	14a10 <__assert_fail@plt+0x34ac>
   14af0:	push	{r4, r5, r6, r7, r8, lr}
   14af4:	mov	r6, #1
   14af8:	ldr	r4, [pc, #100]	; 14b64 <__assert_fail@plt+0x3600>
   14afc:	ldr	r5, [r4]
   14b00:	add	r7, r5, #4
   14b04:	ldr	r3, [r4, #4]
   14b08:	cmp	r3, r6
   14b0c:	bgt	14b54 <__assert_fail@plt+0x35f0>
   14b10:	ldr	r6, [pc, #80]	; 14b68 <__assert_fail@plt+0x3604>
   14b14:	ldr	r0, [r5, #4]
   14b18:	cmp	r0, r6
   14b1c:	beq	14b30 <__assert_fail@plt+0x35cc>
   14b20:	bl	13648 <__assert_fail@plt+0x20e4>
   14b24:	mov	r3, #256	; 0x100
   14b28:	str	r3, [r4, #8]
   14b2c:	str	r6, [r4, #12]
   14b30:	ldr	r6, [pc, #52]	; 14b6c <__assert_fail@plt+0x3608>
   14b34:	cmp	r5, r6
   14b38:	beq	14b48 <__assert_fail@plt+0x35e4>
   14b3c:	mov	r0, r5
   14b40:	bl	13648 <__assert_fail@plt+0x20e4>
   14b44:	str	r6, [r4]
   14b48:	mov	r3, #1
   14b4c:	str	r3, [r4, #4]
   14b50:	pop	{r4, r5, r6, r7, r8, pc}
   14b54:	ldr	r0, [r7, r6, lsl #3]
   14b58:	add	r6, r6, #1
   14b5c:	bl	13648 <__assert_fail@plt+0x20e4>
   14b60:	b	14b04 <__assert_fail@plt+0x35a0>
   14b64:	andeq	r3, r3, ip, ror #2
   14b68:	andeq	r3, r3, ip, asr #5
   14b6c:	andeq	r3, r3, r4, ror r1
   14b70:	ldr	r3, [pc, #4]	; 14b7c <__assert_fail@plt+0x3618>
   14b74:	mvn	r2, #0
   14b78:	b	146f0 <__assert_fail@plt+0x318c>
   14b7c:	andeq	r3, r3, ip, asr #7
   14b80:	ldr	r3, [pc]	; 14b88 <__assert_fail@plt+0x3624>
   14b84:	b	146f0 <__assert_fail@plt+0x318c>
   14b88:	andeq	r3, r3, ip, asr #7
   14b8c:	mov	r1, r0
   14b90:	mov	r0, #0
   14b94:	b	14b70 <__assert_fail@plt+0x360c>
   14b98:	mov	r2, r1
   14b9c:	mov	r1, r0
   14ba0:	mov	r0, #0
   14ba4:	b	14b80 <__assert_fail@plt+0x361c>
   14ba8:	push	{r4, r5, lr}
   14bac:	sub	sp, sp, #52	; 0x34
   14bb0:	mov	r5, r2
   14bb4:	mov	r4, r0
   14bb8:	mov	r0, sp
   14bbc:	bl	138a4 <__assert_fail@plt+0x2340>
   14bc0:	mov	r3, sp
   14bc4:	mvn	r2, #0
   14bc8:	mov	r1, r5
   14bcc:	mov	r0, r4
   14bd0:	bl	146f0 <__assert_fail@plt+0x318c>
   14bd4:	add	sp, sp, #52	; 0x34
   14bd8:	pop	{r4, r5, pc}
   14bdc:	push	{r4, r5, r6, lr}
   14be0:	sub	sp, sp, #48	; 0x30
   14be4:	mov	r5, r2
   14be8:	mov	r6, r3
   14bec:	mov	r4, r0
   14bf0:	mov	r0, sp
   14bf4:	bl	138a4 <__assert_fail@plt+0x2340>
   14bf8:	mov	r3, sp
   14bfc:	mov	r2, r6
   14c00:	mov	r1, r5
   14c04:	mov	r0, r4
   14c08:	bl	146f0 <__assert_fail@plt+0x318c>
   14c0c:	add	sp, sp, #48	; 0x30
   14c10:	pop	{r4, r5, r6, pc}
   14c14:	mov	r2, r1
   14c18:	mov	r1, r0
   14c1c:	mov	r0, #0
   14c20:	b	14ba8 <__assert_fail@plt+0x3644>
   14c24:	mov	r3, r2
   14c28:	mov	r2, r1
   14c2c:	mov	r1, r0
   14c30:	mov	r0, #0
   14c34:	b	14bdc <__assert_fail@plt+0x3678>
   14c38:	push	{r4, r5, r6, lr}
   14c3c:	mov	r4, r0
   14c40:	mov	r5, r1
   14c44:	mov	r6, r2
   14c48:	sub	sp, sp, #48	; 0x30
   14c4c:	mov	ip, sp
   14c50:	ldr	lr, [pc, #64]	; 14c98 <__assert_fail@plt+0x3734>
   14c54:	ldm	lr!, {r0, r1, r2, r3}
   14c58:	stmia	ip!, {r0, r1, r2, r3}
   14c5c:	ldm	lr!, {r0, r1, r2, r3}
   14c60:	stmia	ip!, {r0, r1, r2, r3}
   14c64:	ldm	lr, {r0, r1, r2, r3}
   14c68:	stm	ip, {r0, r1, r2, r3}
   14c6c:	mov	r1, r6
   14c70:	mov	r2, #1
   14c74:	mov	r0, sp
   14c78:	bl	148fc <__assert_fail@plt+0x3398>
   14c7c:	mov	r3, sp
   14c80:	mov	r2, r5
   14c84:	mov	r1, r4
   14c88:	mov	r0, #0
   14c8c:	bl	146f0 <__assert_fail@plt+0x318c>
   14c90:	add	sp, sp, #48	; 0x30
   14c94:	pop	{r4, r5, r6, pc}
   14c98:	andeq	r3, r3, ip, asr #7
   14c9c:	mov	r2, r1
   14ca0:	mvn	r1, #0
   14ca4:	b	14c38 <__assert_fail@plt+0x36d4>
   14ca8:	mov	r1, #58	; 0x3a
   14cac:	b	14c9c <__assert_fail@plt+0x3738>
   14cb0:	mov	r2, #58	; 0x3a
   14cb4:	b	14c38 <__assert_fail@plt+0x36d4>
   14cb8:	push	{r4, r5, lr}
   14cbc:	sub	sp, sp, #100	; 0x64
   14cc0:	mov	r4, r0
   14cc4:	mov	r0, sp
   14cc8:	mov	r5, r2
   14ccc:	bl	138a4 <__assert_fail@plt+0x2340>
   14cd0:	mov	ip, sp
   14cd4:	add	lr, sp, #48	; 0x30
   14cd8:	ldm	ip!, {r0, r1, r2, r3}
   14cdc:	stmia	lr!, {r0, r1, r2, r3}
   14ce0:	ldm	ip!, {r0, r1, r2, r3}
   14ce4:	stmia	lr!, {r0, r1, r2, r3}
   14ce8:	ldm	ip, {r0, r1, r2, r3}
   14cec:	stm	lr, {r0, r1, r2, r3}
   14cf0:	mov	r2, #1
   14cf4:	mov	r1, #58	; 0x3a
   14cf8:	add	r0, sp, #48	; 0x30
   14cfc:	bl	148fc <__assert_fail@plt+0x3398>
   14d00:	add	r3, sp, #48	; 0x30
   14d04:	mvn	r2, #0
   14d08:	mov	r1, r5
   14d0c:	mov	r0, r4
   14d10:	bl	146f0 <__assert_fail@plt+0x318c>
   14d14:	add	sp, sp, #100	; 0x64
   14d18:	pop	{r4, r5, pc}
   14d1c:	push	{r4, r5, r6, r7, lr}
   14d20:	mov	r4, r0
   14d24:	mov	r6, r1
   14d28:	mov	r7, r2
   14d2c:	mov	r5, r3
   14d30:	sub	sp, sp, #52	; 0x34
   14d34:	ldr	lr, [pc, #68]	; 14d80 <__assert_fail@plt+0x381c>
   14d38:	mov	ip, sp
   14d3c:	ldm	lr!, {r0, r1, r2, r3}
   14d40:	stmia	ip!, {r0, r1, r2, r3}
   14d44:	ldm	lr!, {r0, r1, r2, r3}
   14d48:	stmia	ip!, {r0, r1, r2, r3}
   14d4c:	ldm	lr, {r0, r1, r2, r3}
   14d50:	stm	ip, {r0, r1, r2, r3}
   14d54:	mov	r2, r7
   14d58:	mov	r1, r6
   14d5c:	mov	r0, sp
   14d60:	bl	14958 <__assert_fail@plt+0x33f4>
   14d64:	ldr	r2, [sp, #72]	; 0x48
   14d68:	mov	r3, sp
   14d6c:	mov	r1, r5
   14d70:	mov	r0, r4
   14d74:	bl	146f0 <__assert_fail@plt+0x318c>
   14d78:	add	sp, sp, #52	; 0x34
   14d7c:	pop	{r4, r5, r6, r7, pc}
   14d80:	andeq	r3, r3, ip, asr #7
   14d84:	mvn	ip, #0
   14d88:	push	{r0, r1, r2, lr}
   14d8c:	str	ip, [sp]
   14d90:	bl	14d1c <__assert_fail@plt+0x37b8>
   14d94:	add	sp, sp, #12
   14d98:	pop	{pc}		; (ldr pc, [sp], #4)
   14d9c:	mov	r3, r2
   14da0:	mov	r2, r1
   14da4:	mov	r1, r0
   14da8:	mov	r0, #0
   14dac:	b	14d84 <__assert_fail@plt+0x3820>
   14db0:	push	{r0, r1, r2, lr}
   14db4:	str	r3, [sp]
   14db8:	mov	r3, r2
   14dbc:	mov	r2, r1
   14dc0:	mov	r1, r0
   14dc4:	mov	r0, #0
   14dc8:	bl	14d1c <__assert_fail@plt+0x37b8>
   14dcc:	add	sp, sp, #12
   14dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dd4:	ldr	r3, [pc]	; 14ddc <__assert_fail@plt+0x3878>
   14dd8:	b	146f0 <__assert_fail@plt+0x318c>
   14ddc:	andeq	r3, r3, ip, ror r1
   14de0:	mov	r2, r1
   14de4:	mov	r1, r0
   14de8:	mov	r0, #0
   14dec:	b	14dd4 <__assert_fail@plt+0x3870>
   14df0:	mvn	r2, #0
   14df4:	b	14dd4 <__assert_fail@plt+0x3870>
   14df8:	mov	r1, r0
   14dfc:	mov	r0, #0
   14e00:	b	14df0 <__assert_fail@plt+0x388c>
   14e04:	cmp	r1, #0
   14e08:	add	r3, r1, #31
   14e0c:	movge	r3, r1
   14e10:	rsbs	r2, r1, #0
   14e14:	asr	r3, r3, #5
   14e18:	and	r2, r2, #31
   14e1c:	and	r1, r1, #31
   14e20:	rsbpl	r1, r2, #0
   14e24:	mov	ip, #1
   14e28:	ldr	r2, [r0, r3, lsl #2]
   14e2c:	orr	r1, r2, ip, lsl r1
   14e30:	str	r1, [r0, r3, lsl #2]
   14e34:	bx	lr
   14e38:	asr	r3, r1, #5
   14e3c:	and	r1, r1, #31
   14e40:	ldr	r0, [r0, r3, lsl #2]
   14e44:	lsr	r0, r0, r1
   14e48:	and	r0, r0, #1
   14e4c:	bx	lr
   14e50:	sub	r3, r0, #4
   14e54:	add	r0, r0, #28
   14e58:	ldr	r2, [r3, #4]!
   14e5c:	mvn	r2, r2
   14e60:	cmp	r3, r0
   14e64:	str	r2, [r3]
   14e68:	bne	14e58 <__assert_fail@plt+0x38f4>
   14e6c:	bx	lr
   14e70:	sub	r3, r0, #4
   14e74:	sub	r1, r1, #4
   14e78:	add	r0, r0, #28
   14e7c:	ldr	r2, [r3, #4]!
   14e80:	ldr	ip, [r1, #4]!
   14e84:	cmp	r3, r0
   14e88:	orr	r2, r2, ip
   14e8c:	str	r2, [r3]
   14e90:	bne	14e7c <__assert_fail@plt+0x3918>
   14e94:	bx	lr
   14e98:	sub	r3, r0, #4
   14e9c:	sub	r1, r1, #4
   14ea0:	add	r0, r0, #28
   14ea4:	ldr	r2, [r3, #4]!
   14ea8:	ldr	ip, [r1, #4]!
   14eac:	cmp	r3, r0
   14eb0:	and	r2, r2, ip
   14eb4:	str	r2, [r3]
   14eb8:	bne	14ea4 <__assert_fail@plt+0x3940>
   14ebc:	bx	lr
   14ec0:	ldr	r3, [r0, #80]	; 0x50
   14ec4:	cmp	r3, #1
   14ec8:	ldreq	r3, [r0, #4]
   14ecc:	ldrne	r3, [r0, #8]
   14ed0:	ldrbeq	r0, [r3, r1]
   14ed4:	ldrne	r0, [r3, r1, lsl #2]
   14ed8:	bx	lr
   14edc:	ldr	r3, [r0, #36]	; 0x24
   14ee0:	ldr	r2, [r0, #48]	; 0x30
   14ee4:	cmp	r3, r2
   14ee8:	movlt	r2, r3
   14eec:	ldr	r3, [r0, #28]
   14ef0:	cmp	r3, r2
   14ef4:	blt	14f04 <__assert_fail@plt+0x39a0>
   14ef8:	str	r3, [r0, #28]
   14efc:	str	r3, [r0, #32]
   14f00:	bx	lr
   14f04:	ldr	r1, [r0]
   14f08:	ldr	ip, [r0, #24]
   14f0c:	add	r1, r1, r3
   14f10:	ldrb	r1, [r1, ip]
   14f14:	ldr	ip, [r0, #64]	; 0x40
   14f18:	ldrb	ip, [ip, r1]
   14f1c:	ldr	r1, [r0, #4]
   14f20:	strb	ip, [r1, r3]
   14f24:	add	r3, r3, #1
   14f28:	b	14ef0 <__assert_fail@plt+0x398c>
   14f2c:	mov	r2, r1
   14f30:	clz	r1, r1
   14f34:	lsr	r1, r1, #5
   14f38:	cmp	r0, #0
   14f3c:	moveq	r1, #1
   14f40:	cmp	r1, #0
   14f44:	bne	14f68 <__assert_fail@plt+0x3a04>
   14f48:	ldr	r3, [r0, #4]
   14f4c:	ldr	ip, [r2, #4]
   14f50:	cmp	r3, ip
   14f54:	bne	14f6c <__assert_fail@plt+0x3a08>
   14f58:	subs	r3, r3, #1
   14f5c:	bpl	14f74 <__assert_fail@plt+0x3a10>
   14f60:	mov	r1, #1
   14f64:	b	14f6c <__assert_fail@plt+0x3a08>
   14f68:	mov	r1, #0
   14f6c:	mov	r0, r1
   14f70:	bx	lr
   14f74:	push	{lr}		; (str lr, [sp, #-4]!)
   14f78:	ldr	lr, [r0, #8]
   14f7c:	ldr	ip, [r2, #8]
   14f80:	ldr	lr, [lr, r3, lsl #2]
   14f84:	ldr	ip, [ip, r3, lsl #2]
   14f88:	cmp	lr, ip
   14f8c:	bne	14f9c <__assert_fail@plt+0x3a38>
   14f90:	subs	r3, r3, #1
   14f94:	bpl	14f78 <__assert_fail@plt+0x3a14>
   14f98:	mov	r1, #1
   14f9c:	mov	r0, r1
   14fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa4:	ldr	r3, [r0, #4]
   14fa8:	cmp	r3, #0
   14fac:	ble	14fd8 <__assert_fail@plt+0x3a74>
   14fb0:	sub	r3, r3, #1
   14fb4:	ldr	ip, [r0, #8]
   14fb8:	mov	r0, #0
   14fbc:	cmp	r0, r3
   14fc0:	bcc	14fe0 <__assert_fail@plt+0x3a7c>
   14fc4:	ldr	r3, [ip, r0, lsl #2]
   14fc8:	cmp	r3, r1
   14fcc:	bne	14fd8 <__assert_fail@plt+0x3a74>
   14fd0:	add	r0, r0, #1
   14fd4:	bx	lr
   14fd8:	mov	r0, #0
   14fdc:	bx	lr
   14fe0:	push	{lr}		; (str lr, [sp, #-4]!)
   14fe4:	add	r2, r0, r3
   14fe8:	lsr	r2, r2, #1
   14fec:	ldr	lr, [ip, r2, lsl #2]
   14ff0:	cmp	lr, r1
   14ff4:	addlt	r0, r2, #1
   14ff8:	movge	r3, r2
   14ffc:	cmp	r0, r3
   15000:	bcc	14fe4 <__assert_fail@plt+0x3a80>
   15004:	ldr	r3, [ip, r0, lsl #2]
   15008:	cmp	r3, r1
   1500c:	addeq	r0, r0, #1
   15010:	movne	r0, #0
   15014:	pop	{pc}		; (ldr pc, [sp], #4)
   15018:	push	{r4, r5, r6, lr}
   1501c:	mov	r4, r0
   15020:	mov	r5, r1
   15024:	mov	r6, r2
   15028:	ldr	r3, [r4, #4]
   1502c:	cmp	r3, #0
   15030:	bne	15088 <__assert_fail@plt+0x3b24>
   15034:	ldr	r3, [r4, #8]
   15038:	cmp	r3, #0
   1503c:	bne	15088 <__assert_fail@plt+0x3b24>
   15040:	mov	r1, r4
   15044:	mov	r0, r6
   15048:	blx	r5
   1504c:	cmp	r0, #0
   15050:	popne	{r4, r5, r6, pc}
   15054:	ldr	r1, [r4]
   15058:	cmp	r1, #0
   1505c:	popeq	{r4, r5, r6, pc}
   15060:	ldr	r3, [r1, #8]
   15064:	sub	r4, r3, r4
   15068:	cmp	r3, #0
   1506c:	clz	r4, r4
   15070:	moveq	r2, #1
   15074:	lsr	r4, r4, #5
   15078:	movne	r2, r4
   1507c:	mov	r4, r1
   15080:	cmp	r2, #0
   15084:	bne	15040 <__assert_fail@plt+0x3adc>
   15088:	mov	r4, r3
   1508c:	b	15028 <__assert_fail@plt+0x3ac4>
   15090:	ldr	r3, [r1, #40]	; 0x28
   15094:	ldr	ip, [r1, #56]	; 0x38
   15098:	cmp	ip, r3
   1509c:	bgt	150b4 <__assert_fail@plt+0x3b50>
   150a0:	mov	r3, #2
   150a4:	strb	r3, [r0, #4]
   150a8:	mov	r3, #0
   150ac:	mov	r0, r3
   150b0:	bx	lr
   150b4:	push	{r4, lr}
   150b8:	ldr	lr, [r1, #4]
   150bc:	ldr	r4, [r1, #80]	; 0x50
   150c0:	ldrb	ip, [lr, r3]
   150c4:	cmp	r4, #1
   150c8:	strb	ip, [r0]
   150cc:	ble	150f8 <__assert_fail@plt+0x3b94>
   150d0:	ldr	r4, [r1, #28]
   150d4:	cmp	r3, r4
   150d8:	beq	150f8 <__assert_fail@plt+0x3b94>
   150dc:	ldr	r4, [r1, #8]
   150e0:	ldr	r4, [r4, r3, lsl #2]
   150e4:	cmn	r4, #1
   150e8:	bne	150f8 <__assert_fail@plt+0x3b94>
   150ec:	mov	r3, #1
   150f0:	strb	r3, [r0, #4]
   150f4:	b	15184 <__assert_fail@plt+0x3c20>
   150f8:	cmp	ip, #92	; 0x5c
   150fc:	bne	15124 <__assert_fail@plt+0x3bc0>
   15100:	tst	r2, #1
   15104:	beq	150ec <__assert_fail@plt+0x3b88>
   15108:	ldr	r2, [r1, #48]	; 0x30
   1510c:	add	r3, r3, #1
   15110:	cmp	r3, r2
   15114:	strlt	r3, [r1, #40]	; 0x28
   15118:	ldrblt	r3, [lr, r3]
   1511c:	strblt	r3, [r0]
   15120:	b	150ec <__assert_fail@plt+0x3b88>
   15124:	cmp	ip, #91	; 0x5b
   15128:	bne	1519c <__assert_fail@plt+0x3c38>
   1512c:	ldr	r1, [r1, #48]	; 0x30
   15130:	add	ip, r3, #1
   15134:	cmp	ip, r1
   15138:	bge	15164 <__assert_fail@plt+0x3c00>
   1513c:	add	r3, lr, r3
   15140:	ldrb	r3, [r3, #1]
   15144:	cmp	r3, #58	; 0x3a
   15148:	strb	r3, [r0]
   1514c:	beq	1518c <__assert_fail@plt+0x3c28>
   15150:	cmp	r3, #61	; 0x3d
   15154:	beq	15178 <__assert_fail@plt+0x3c14>
   15158:	cmp	r3, #46	; 0x2e
   1515c:	moveq	r3, #26
   15160:	beq	1517c <__assert_fail@plt+0x3c18>
   15164:	mov	r3, #1
   15168:	mov	r2, #91	; 0x5b
   1516c:	strb	r2, [r0]
   15170:	strb	r3, [r0, #4]
   15174:	b	15184 <__assert_fail@plt+0x3c20>
   15178:	mov	r3, #28
   1517c:	strb	r3, [r0, #4]
   15180:	mov	r3, #2
   15184:	mov	r0, r3
   15188:	pop	{r4, pc}
   1518c:	tst	r2, #4
   15190:	beq	15164 <__assert_fail@plt+0x3c00>
   15194:	mov	r3, #30
   15198:	b	1517c <__assert_fail@plt+0x3c18>
   1519c:	cmp	ip, #93	; 0x5d
   151a0:	beq	151c8 <__assert_fail@plt+0x3c64>
   151a4:	cmp	ip, #94	; 0x5e
   151a8:	moveq	r3, #25
   151ac:	beq	151bc <__assert_fail@plt+0x3c58>
   151b0:	cmp	ip, #45	; 0x2d
   151b4:	moveq	r3, #22
   151b8:	bne	150ec <__assert_fail@plt+0x3b88>
   151bc:	strb	r3, [r0, #4]
   151c0:	mov	r3, #1
   151c4:	b	15184 <__assert_fail@plt+0x3c20>
   151c8:	mov	r3, #21
   151cc:	b	151bc <__assert_fail@plt+0x3c58>
   151d0:	ldrb	r3, [r1, #24]
   151d4:	cmp	r3, #17
   151d8:	bne	151f0 <__assert_fail@plt+0x3c8c>
   151dc:	ldr	r3, [r1, #20]
   151e0:	cmp	r0, r3
   151e4:	ldrbeq	r3, [r1, #26]
   151e8:	orreq	r3, r3, #8
   151ec:	strbeq	r3, [r1, #26]
   151f0:	mov	r0, #0
   151f4:	bx	lr
   151f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151fc:	sub	sp, sp, #36	; 0x24
   15200:	mov	r6, r2
   15204:	mov	r9, #12
   15208:	mov	fp, r0
   1520c:	mov	r4, r1
   15210:	mov	r8, #0
   15214:	ldr	sl, [r0, #84]	; 0x54
   15218:	str	r3, [sp, #12]
   1521c:	ldr	r2, [sp, #12]
   15220:	ldr	r3, [sl, #24]
   15224:	mla	r9, r9, r2, r3
   15228:	mov	r3, #1
   1522c:	ldr	r2, [sp, #72]	; 0x48
   15230:	lsl	r3, r3, r6
   15234:	str	r3, [sp, #8]
   15238:	mvn	r3, r3
   1523c:	str	r3, [sp, #20]
   15240:	mov	r3, #24
   15244:	mla	r3, r2, r3, r3
   15248:	str	r3, [sp, #28]
   1524c:	ldr	r3, [r9, #4]
   15250:	cmp	r3, r8
   15254:	asrle	r0, r4, #1
   15258:	ble	152fc <__assert_fail@plt+0x3d98>
   1525c:	ldr	r3, [r9, #8]
   15260:	ldr	r7, [r3, r8, lsl #2]
   15264:	ldr	r3, [sl]
   15268:	add	r2, r3, r7, lsl #3
   1526c:	ldrb	r2, [r2, #4]
   15270:	cmp	r2, #8
   15274:	beq	15374 <__assert_fail@plt+0x3e10>
   15278:	cmp	r2, #9
   1527c:	beq	1538c <__assert_fail@plt+0x3e28>
   15280:	cmp	r2, #4
   15284:	bne	1536c <__assert_fail@plt+0x3e08>
   15288:	ldr	r3, [sp, #72]	; 0x48
   1528c:	cmn	r3, #1
   15290:	beq	1536c <__assert_fail@plt+0x3e08>
   15294:	mov	r3, #12
   15298:	ldr	r5, [fp, #116]	; 0x74
   1529c:	mul	r3, r3, r7
   152a0:	str	r3, [sp, #16]
   152a4:	ldr	r3, [sp, #28]
   152a8:	add	r5, r5, r3
   152ac:	and	r3, r4, #2
   152b0:	str	r3, [sp, #24]
   152b4:	ldr	r3, [r5, #-24]	; 0xffffffe8
   152b8:	cmp	r3, r7
   152bc:	bne	1535c <__assert_fail@plt+0x3df8>
   152c0:	cmp	r6, #31
   152c4:	bgt	152d8 <__assert_fail@plt+0x3d74>
   152c8:	ldr	r3, [r5, #-8]
   152cc:	ldr	r2, [sp, #8]
   152d0:	tst	r2, r3
   152d4:	beq	1535c <__assert_fail@plt+0x3df8>
   152d8:	ldr	r2, [sp, #16]
   152dc:	ldr	r3, [sl, #20]
   152e0:	add	r3, r3, r2
   152e4:	ldr	r2, [sp, #12]
   152e8:	ldr	r3, [r3, #8]
   152ec:	ldr	r3, [r3]
   152f0:	cmp	r2, r3
   152f4:	bne	15304 <__assert_fail@plt+0x3da0>
   152f8:	sbfx	r0, r4, #0, #1
   152fc:	add	sp, sp, #36	; 0x24
   15300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15304:	ldr	r2, [sp, #72]	; 0x48
   15308:	mov	r1, r4
   1530c:	mov	r0, fp
   15310:	str	r2, [sp]
   15314:	mov	r2, r6
   15318:	bl	151f8 <__assert_fail@plt+0x3c94>
   1531c:	cmn	r0, #1
   15320:	bne	1532c <__assert_fail@plt+0x3dc8>
   15324:	mvn	r0, #0
   15328:	b	152fc <__assert_fail@plt+0x3d98>
   1532c:	cmp	r0, #0
   15330:	bne	15348 <__assert_fail@plt+0x3de4>
   15334:	ldr	r3, [sp, #24]
   15338:	cmp	r3, #0
   1533c:	beq	15348 <__assert_fail@plt+0x3de4>
   15340:	mov	r0, #0
   15344:	b	152fc <__assert_fail@plt+0x3d98>
   15348:	cmp	r6, #31
   1534c:	ldrle	r3, [r5, #-8]
   15350:	ldrle	r2, [sp, #20]
   15354:	andle	r3, r3, r2
   15358:	strle	r3, [r5, #-8]
   1535c:	add	r5, r5, #24
   15360:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   15364:	cmp	r3, #0
   15368:	bne	152b4 <__assert_fail@plt+0x3d50>
   1536c:	add	r8, r8, #1
   15370:	b	1524c <__assert_fail@plt+0x3ce8>
   15374:	tst	r4, #1
   15378:	beq	1536c <__assert_fail@plt+0x3e08>
   1537c:	ldr	r3, [r3, r7, lsl #3]
   15380:	cmp	r3, r6
   15384:	bne	1536c <__assert_fail@plt+0x3e08>
   15388:	b	15324 <__assert_fail@plt+0x3dc0>
   1538c:	tst	r4, #2
   15390:	beq	1536c <__assert_fail@plt+0x3e08>
   15394:	ldr	r3, [r3, r7, lsl #3]
   15398:	cmp	r3, r6
   1539c:	bne	1536c <__assert_fail@plt+0x3e08>
   153a0:	b	15340 <__assert_fail@plt+0x3ddc>
   153a4:	push	{r4, r5, lr}
   153a8:	mov	lr, #24
   153ac:	ldr	r5, [r0, #116]	; 0x74
   153b0:	ldr	ip, [sp, #12]
   153b4:	ldr	r4, [sp, #16]
   153b8:	mla	r1, lr, r1, r5
   153bc:	ldr	lr, [r1, #8]
   153c0:	cmp	lr, ip
   153c4:	bgt	153fc <__assert_fail@plt+0x3e98>
   153c8:	ldr	r1, [r1, #12]
   153cc:	cmp	r1, ip
   153d0:	blt	15408 <__assert_fail@plt+0x3ea4>
   153d4:	cmp	r1, ip
   153d8:	moveq	r1, #2
   153dc:	movne	r1, #0
   153e0:	cmp	lr, ip
   153e4:	orreq	r1, r1, #1
   153e8:	cmp	r1, #0
   153ec:	beq	15400 <__assert_fail@plt+0x3e9c>
   153f0:	str	r4, [sp, #12]
   153f4:	pop	{r4, r5, lr}
   153f8:	b	151f8 <__assert_fail@plt+0x3c94>
   153fc:	mvn	r1, #0
   15400:	mov	r0, r1
   15404:	pop	{r4, r5, pc}
   15408:	mov	r1, #1
   1540c:	b	15400 <__assert_fail@plt+0x3e9c>
   15410:	push	{r4, r5, lr}
   15414:	mov	r3, #0
   15418:	mov	r5, #24
   1541c:	ldr	r4, [r0, #108]	; 0x6c
   15420:	mov	ip, r4
   15424:	cmp	ip, r3
   15428:	bgt	15458 <__assert_fail@plt+0x3ef4>
   1542c:	cmp	r4, r3
   15430:	mvnle	r3, #0
   15434:	ble	15450 <__assert_fail@plt+0x3eec>
   15438:	ldr	r0, [r0, #116]	; 0x74
   1543c:	mov	r2, #24
   15440:	mla	r2, r2, r3, r0
   15444:	ldr	r2, [r2, #4]
   15448:	cmp	r2, r1
   1544c:	mvnne	r3, #0
   15450:	mov	r0, r3
   15454:	pop	{r4, r5, pc}
   15458:	ldr	lr, [r0, #116]	; 0x74
   1545c:	add	r2, ip, r3
   15460:	asr	r2, r2, #1
   15464:	mla	lr, r5, r2, lr
   15468:	ldr	lr, [lr, #4]
   1546c:	cmp	lr, r1
   15470:	addlt	r3, r2, #1
   15474:	movge	ip, r2
   15478:	b	15424 <__assert_fail@plt+0x3ec0>
   1547c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15480:	mov	r6, r1
   15484:	sub	sp, sp, #20
   15488:	mov	r1, r3
   1548c:	mov	r5, r0
   15490:	mov	sl, r2
   15494:	mov	r7, r3
   15498:	ldr	r9, [r0, #84]	; 0x54
   1549c:	mov	r4, #0
   154a0:	bl	15410 <__assert_fail@plt+0x3eac>
   154a4:	str	r0, [sp, #8]
   154a8:	mov	r0, r5
   154ac:	ldr	r1, [sp, #60]	; 0x3c
   154b0:	bl	15410 <__assert_fail@plt+0x3eac>
   154b4:	str	r0, [sp, #12]
   154b8:	ldr	r3, [r6, #4]
   154bc:	cmp	r3, r4
   154c0:	bgt	154d0 <__assert_fail@plt+0x3f6c>
   154c4:	mov	r0, #0
   154c8:	add	sp, sp, #20
   154cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d0:	ldr	r3, [r6, #8]
   154d4:	mov	r0, r5
   154d8:	ldr	r2, [r5, #116]	; 0x74
   154dc:	ldr	r1, [r3, r4, lsl #2]
   154e0:	mov	r3, #24
   154e4:	mul	r3, r3, r1
   154e8:	ldr	r2, [r2, r3]
   154ec:	ldr	r3, [r9]
   154f0:	ldr	r8, [r3, r2, lsl #3]
   154f4:	str	r7, [sp]
   154f8:	ldr	r3, [sp, #8]
   154fc:	mov	r2, r8
   15500:	str	r3, [sp, #4]
   15504:	mov	r3, sl
   15508:	bl	153a4 <__assert_fail@plt+0x3e40>
   1550c:	ldr	r3, [sp, #12]
   15510:	mov	fp, r0
   15514:	mov	r2, r8
   15518:	mov	r0, r5
   1551c:	ldr	r1, [r6, #8]
   15520:	str	r3, [sp, #4]
   15524:	ldr	r3, [sp, #60]	; 0x3c
   15528:	str	r3, [sp]
   1552c:	ldr	r1, [r1, r4, lsl #2]
   15530:	ldr	r3, [sp, #56]	; 0x38
   15534:	bl	153a4 <__assert_fail@plt+0x3e40>
   15538:	cmp	fp, r0
   1553c:	addeq	r4, r4, #1
   15540:	beq	154b8 <__assert_fail@plt+0x3f54>
   15544:	mov	r0, #1
   15548:	b	154c8 <__assert_fail@plt+0x3f64>
   1554c:	ldr	r3, [r0, #80]	; 0x50
   15550:	push	{r4, r5, r6, lr}
   15554:	mov	r4, r0
   15558:	mov	r5, r1
   1555c:	cmp	r3, #1
   15560:	ble	155b0 <__assert_fail@plt+0x404c>
   15564:	cmn	r1, #-1073741823	; 0xc0000001
   15568:	bls	15574 <__assert_fail@plt+0x4010>
   1556c:	mov	r0, #12
   15570:	pop	{r4, r5, r6, pc}
   15574:	lsl	r6, r1, #2
   15578:	ldr	r0, [r0, #8]
   1557c:	mov	r1, r6
   15580:	bl	20f18 <__assert_fail@plt+0xf9b4>
   15584:	cmp	r0, #0
   15588:	beq	1556c <__assert_fail@plt+0x4008>
   1558c:	str	r0, [r4, #8]
   15590:	ldr	r0, [r4, #12]
   15594:	cmp	r0, #0
   15598:	beq	155b0 <__assert_fail@plt+0x404c>
   1559c:	mov	r1, r6
   155a0:	bl	20f18 <__assert_fail@plt+0xf9b4>
   155a4:	cmp	r0, #0
   155a8:	beq	1556c <__assert_fail@plt+0x4008>
   155ac:	str	r0, [r4, #12]
   155b0:	ldrb	r3, [r4, #75]	; 0x4b
   155b4:	cmp	r3, #0
   155b8:	beq	155d4 <__assert_fail@plt+0x4070>
   155bc:	mov	r1, r5
   155c0:	ldr	r0, [r4, #4]
   155c4:	bl	20f18 <__assert_fail@plt+0xf9b4>
   155c8:	cmp	r0, #0
   155cc:	beq	1556c <__assert_fail@plt+0x4008>
   155d0:	str	r0, [r4, #4]
   155d4:	mov	r0, #0
   155d8:	str	r5, [r4, #36]	; 0x24
   155dc:	pop	{r4, r5, r6, pc}
   155e0:	push	{r4, r5, r6, lr}
   155e4:	mov	r5, r1
   155e8:	mov	r4, r0
   155ec:	ldm	r0, {r1, r3}
   155f0:	cmp	r1, r3
   155f4:	bne	1561c <__assert_fail@plt+0x40b8>
   155f8:	add	r1, r1, #1
   155fc:	ldr	r0, [r0, #8]
   15600:	lsl	r3, r1, #1
   15604:	lsl	r1, r1, #3
   15608:	str	r3, [r4]
   1560c:	bl	20f18 <__assert_fail@plt+0xf9b4>
   15610:	cmp	r0, #0
   15614:	popeq	{r4, r5, r6, pc}
   15618:	str	r0, [r4, #8]
   1561c:	ldr	r3, [r4, #4]
   15620:	mov	r0, #1
   15624:	ldr	r2, [r4, #8]
   15628:	add	r1, r3, #1
   1562c:	str	r1, [r4, #4]
   15630:	str	r5, [r2, r3, lsl #2]
   15634:	pop	{r4, r5, r6, pc}
   15638:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1563c:	mov	r9, r3
   15640:	mov	r4, r0
   15644:	mov	r7, r1
   15648:	mov	r8, r2
   1564c:	ldr	r3, [r0, #64]	; 0x40
   15650:	cmp	r3, #31
   15654:	bne	1567c <__assert_fail@plt+0x4118>
   15658:	mov	r0, #996	; 0x3e4
   1565c:	bl	20eec <__assert_fail@plt+0xf988>
   15660:	subs	r5, r0, #0
   15664:	beq	156e4 <__assert_fail@plt+0x4180>
   15668:	ldr	r3, [r4, #56]	; 0x38
   1566c:	str	r0, [r4, #56]	; 0x38
   15670:	str	r3, [r0]
   15674:	mov	r3, #0
   15678:	str	r3, [r4, #64]	; 0x40
   1567c:	ldr	r6, [r4, #56]	; 0x38
   15680:	mov	r2, #0
   15684:	cmp	r7, r2
   15688:	ldr	ip, [r4, #64]	; 0x40
   1568c:	add	r3, ip, #1
   15690:	lsl	ip, ip, #5
   15694:	add	lr, r6, ip
   15698:	str	r3, [r4, #64]	; 0x40
   1569c:	add	r5, ip, #4
   156a0:	add	r3, lr, #24
   156a4:	add	ip, ip, #16
   156a8:	stmib	lr, {r2, r7, r8}
   156ac:	add	ip, r6, ip
   156b0:	add	r5, r6, r5
   156b4:	ldm	r9, {r0, r1}
   156b8:	stm	r3, {r0, r1}
   156bc:	ldrb	r3, [ip, #14]
   156c0:	bic	r3, r3, #12
   156c4:	strb	r3, [ip, #14]
   156c8:	mvn	r3, #0
   156cc:	str	r2, [lr, #16]
   156d0:	str	r2, [lr, #20]
   156d4:	str	r3, [lr, #32]
   156d8:	strne	r5, [r7]
   156dc:	cmp	r8, #0
   156e0:	strne	r5, [r8]
   156e4:	mov	r0, r5
   156e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156ec:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156f0:	mov	r5, r0
   156f4:	mov	r7, r1
   156f8:	add	r6, sp, #4
   156fc:	ldr	r4, [r0]
   15700:	mov	r2, #0
   15704:	add	r3, r5, #20
   15708:	mov	r1, r2
   1570c:	mov	r0, r7
   15710:	bl	15638 <__assert_fail@plt+0x40d4>
   15714:	cmp	r0, #0
   15718:	str	r0, [r6]
   1571c:	beq	1577c <__assert_fail@plt+0x4218>
   15720:	str	r4, [r0]
   15724:	ldr	r4, [r6]
   15728:	ldrb	r3, [r4, #26]
   1572c:	orr	r3, r3, #4
   15730:	strb	r3, [r4, #26]
   15734:	ldr	r3, [r5, #4]
   15738:	cmp	r3, #0
   1573c:	addne	r6, r4, #4
   15740:	bne	1575c <__assert_fail@plt+0x41f8>
   15744:	ldr	r2, [r5, #8]
   15748:	cmp	r2, r3
   1574c:	cmpne	r2, #0
   15750:	beq	15764 <__assert_fail@plt+0x4200>
   15754:	add	r6, r4, #8
   15758:	mov	r3, r2
   1575c:	mov	r5, r3
   15760:	b	15700 <__assert_fail@plt+0x419c>
   15764:	ldr	r2, [r5]
   15768:	mov	r3, r5
   1576c:	ldr	r4, [r4]
   15770:	cmp	r2, #0
   15774:	bne	15784 <__assert_fail@plt+0x4220>
   15778:	ldr	r0, [sp, #4]
   1577c:	add	sp, sp, #12
   15780:	pop	{r4, r5, r6, r7, pc}
   15784:	mov	r5, r2
   15788:	b	15744 <__assert_fail@plt+0x41e0>
   1578c:	push	{r0, r1, r2, r4, r5, lr}
   15790:	mov	r4, #0
   15794:	mov	r5, #0
   15798:	strd	r4, [sp]
   1579c:	strb	r3, [sp, #4]
   157a0:	mov	r3, sp
   157a4:	bl	15638 <__assert_fail@plt+0x40d4>
   157a8:	add	sp, sp, #12
   157ac:	pop	{r4, r5, pc}
   157b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157b4:	ldr	r4, [r2, #4]
   157b8:	ldr	r9, [r1]
   157bc:	ldrb	r1, [r1, #28]
   157c0:	adds	r3, r4, #0
   157c4:	movne	r3, #1
   157c8:	ands	r3, r3, r1, lsr #4
   157cc:	beq	157ec <__assert_fail@plt+0x4288>
   157d0:	ldr	r1, [r2, #20]
   157d4:	cmp	r1, #31
   157d8:	bgt	15884 <__assert_fail@plt+0x4320>
   157dc:	ldr	r3, [r9, #80]	; 0x50
   157e0:	lsr	r3, r3, r1
   157e4:	tst	r3, #1
   157e8:	beq	15884 <__assert_fail@plt+0x4320>
   157ec:	mov	sl, r2
   157f0:	mov	r2, #0
   157f4:	mov	r1, r2
   157f8:	mov	r3, #8
   157fc:	mov	r6, r0
   15800:	mov	r0, r9
   15804:	bl	1578c <__assert_fail@plt+0x4228>
   15808:	mov	r2, #0
   1580c:	mov	r8, r0
   15810:	mov	r3, #9
   15814:	mov	r1, r2
   15818:	mov	r0, r9
   1581c:	bl	1578c <__assert_fail@plt+0x4228>
   15820:	cmp	r4, #0
   15824:	mov	r5, r0
   15828:	moveq	r7, r0
   1582c:	beq	15848 <__assert_fail@plt+0x42e4>
   15830:	mov	r2, r0
   15834:	mov	r3, #16
   15838:	mov	r1, r4
   1583c:	mov	r0, r9
   15840:	bl	1578c <__assert_fail@plt+0x4228>
   15844:	mov	r7, r0
   15848:	mov	r3, #16
   1584c:	mov	r2, r7
   15850:	mov	r1, r8
   15854:	mov	r0, r9
   15858:	bl	1578c <__assert_fail@plt+0x4228>
   1585c:	cmp	r7, #0
   15860:	cmpne	r0, #0
   15864:	mov	r4, r0
   15868:	beq	15878 <__assert_fail@plt+0x4314>
   1586c:	cmp	r5, #0
   15870:	cmpne	r8, #0
   15874:	bne	1588c <__assert_fail@plt+0x4328>
   15878:	mov	r3, #12
   1587c:	mov	r4, #0
   15880:	str	r3, [r6]
   15884:	mov	r0, r4
   15888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1588c:	ldr	r3, [sl, #20]
   15890:	str	r3, [r5, #20]
   15894:	str	r3, [r8, #20]
   15898:	ldrb	r3, [sl, #26]
   1589c:	ldrb	r2, [r5, #26]
   158a0:	ubfx	r3, r3, #3, #1
   158a4:	bfi	r2, r3, #3, #1
   158a8:	strb	r2, [r5, #26]
   158ac:	ldrb	r2, [r8, #26]
   158b0:	bfi	r2, r3, #3, #1
   158b4:	strb	r2, [r8, #26]
   158b8:	b	15884 <__assert_fail@plt+0x4320>
   158bc:	push	{r0, r1, r2, r4, r5, lr}
   158c0:	mov	r3, #0
   158c4:	mov	r5, r0
   158c8:	mov	r4, r1
   158cc:	ldr	r2, [r1, #4]
   158d0:	str	r3, [sp, #4]
   158d4:	cmp	r2, r3
   158d8:	beq	15900 <__assert_fail@plt+0x439c>
   158dc:	ldrb	r3, [r2, #24]
   158e0:	cmp	r3, #17
   158e4:	bne	15900 <__assert_fail@plt+0x439c>
   158e8:	mov	r1, r0
   158ec:	add	r0, sp, #4
   158f0:	bl	157b0 <__assert_fail@plt+0x424c>
   158f4:	cmp	r0, #0
   158f8:	str	r0, [r4, #4]
   158fc:	strne	r4, [r0]
   15900:	ldr	r2, [r4, #8]
   15904:	cmp	r2, #0
   15908:	beq	15930 <__assert_fail@plt+0x43cc>
   1590c:	ldrb	r3, [r2, #24]
   15910:	cmp	r3, #17
   15914:	bne	15930 <__assert_fail@plt+0x43cc>
   15918:	mov	r1, r5
   1591c:	add	r0, sp, #4
   15920:	bl	157b0 <__assert_fail@plt+0x424c>
   15924:	cmp	r0, #0
   15928:	str	r0, [r4, #8]
   1592c:	strne	r4, [r0]
   15930:	ldr	r0, [sp, #4]
   15934:	add	sp, sp, #12
   15938:	pop	{r4, r5, pc}
   1593c:	mov	r3, #1
   15940:	push	{r4, r5, r6, lr}
   15944:	mov	r4, r0
   15948:	mov	r5, r1
   1594c:	str	r3, [r0]
   15950:	str	r3, [r0, #4]
   15954:	mov	r0, #4
   15958:	bl	20eec <__assert_fail@plt+0xf988>
   1595c:	cmp	r0, #0
   15960:	str	r0, [r4, #8]
   15964:	streq	r0, [r4]
   15968:	streq	r0, [r4, #4]
   1596c:	moveq	r0, #12
   15970:	strne	r5, [r0]
   15974:	movne	r0, #0
   15978:	pop	{r4, r5, r6, pc}
   1597c:	push	{r4, lr}
   15980:	mov	r3, #0
   15984:	mov	r4, r0
   15988:	lsl	r0, r1, #2
   1598c:	stm	r4, {r1, r3}
   15990:	bl	20eec <__assert_fail@plt+0xf988>
   15994:	cmp	r0, #0
   15998:	str	r0, [r4, #8]
   1599c:	moveq	r0, #12
   159a0:	movne	r0, #0
   159a4:	pop	{r4, pc}
   159a8:	mov	r2, #32
   159ac:	mov	r1, #0
   159b0:	b	11444 <memset@plt>
   159b4:	push	{r4, r5, r6, r7, r8, lr}
   159b8:	sub	sp, sp, #80	; 0x50
   159bc:	mov	r4, r0
   159c0:	add	r7, sp, #8
   159c4:	add	r6, r0, #16
   159c8:	ldr	r5, [r0, #28]
   159cc:	ldr	r8, [r0, #36]	; 0x24
   159d0:	ldr	r3, [r0, #48]	; 0x30
   159d4:	cmp	r8, r3
   159d8:	movge	r8, r3
   159dc:	cmp	r5, r8
   159e0:	bge	15af8 <__assert_fail@plt+0x4594>
   159e4:	ldr	r3, [r4, #64]	; 0x40
   159e8:	sub	r2, r8, r5
   159ec:	ldm	r6, {r0, r1}
   159f0:	cmp	r3, #0
   159f4:	stm	r7, {r0, r1}
   159f8:	beq	15adc <__assert_fail@plt+0x4578>
   159fc:	mov	r3, #0
   15a00:	add	r1, sp, #16
   15a04:	b	15a38 <__assert_fail@plt+0x44d4>
   15a08:	ldr	r0, [r4]
   15a0c:	ldr	ip, [r4, #24]
   15a10:	add	r0, r0, r5
   15a14:	add	r0, r0, r3
   15a18:	ldrb	r0, [r0, ip]
   15a1c:	ldr	ip, [r4, #64]	; 0x40
   15a20:	ldrb	ip, [ip, r0]
   15a24:	ldr	r0, [r4, #4]
   15a28:	add	r0, r0, r3
   15a2c:	strb	ip, [r0, r5]
   15a30:	strb	ip, [r1, r3]
   15a34:	add	r3, r3, #1
   15a38:	ldr	r0, [r4, #80]	; 0x50
   15a3c:	cmp	r2, r0
   15a40:	movlt	r0, r2
   15a44:	cmp	r0, r3
   15a48:	bgt	15a08 <__assert_fail@plt+0x44a4>
   15a4c:	mov	r3, r6
   15a50:	add	r0, sp, #4
   15a54:	bl	21278 <__assert_fail@plt+0xfd14>
   15a58:	sub	r3, r0, #1
   15a5c:	cmn	r3, #3
   15a60:	bhi	15a7c <__assert_fail@plt+0x4518>
   15a64:	cmn	r0, #2
   15a68:	bne	15aac <__assert_fail@plt+0x4548>
   15a6c:	ldr	r2, [r4, #36]	; 0x24
   15a70:	ldr	r3, [r4, #48]	; 0x30
   15a74:	cmp	r2, r3
   15a78:	blt	15af0 <__assert_fail@plt+0x458c>
   15a7c:	ldr	r3, [r4]
   15a80:	ldr	r2, [r4, #24]
   15a84:	ldm	r7, {r0, r1}
   15a88:	add	r3, r3, r5
   15a8c:	ldrb	r3, [r3, r2]
   15a90:	ldr	r2, [r4, #64]	; 0x40
   15a94:	str	r3, [sp, #4]
   15a98:	cmp	r2, #0
   15a9c:	ldrbne	r3, [r2, r3]
   15aa0:	stm	r6, {r0, r1}
   15aa4:	mov	r0, #1
   15aa8:	strne	r3, [sp, #4]
   15aac:	ldr	r3, [sp, #4]
   15ab0:	add	r0, r5, r0
   15ab4:	mvn	r1, #0
   15ab8:	ldr	r2, [r4, #8]
   15abc:	str	r3, [r2, r5, lsl #2]
   15ac0:	add	r3, r5, #1
   15ac4:	cmp	r3, r0
   15ac8:	mov	r5, r3
   15acc:	bge	159dc <__assert_fail@plt+0x4478>
   15ad0:	str	r1, [r2, r3, lsl #2]
   15ad4:	add	r3, r3, #1
   15ad8:	b	15ac4 <__assert_fail@plt+0x4560>
   15adc:	ldr	r1, [r4, #24]
   15ae0:	add	r3, r5, r1
   15ae4:	ldr	r1, [r4]
   15ae8:	add	r1, r1, r3
   15aec:	b	15a4c <__assert_fail@plt+0x44e8>
   15af0:	ldm	r7, {r0, r1}
   15af4:	stm	r6, {r0, r1}
   15af8:	str	r5, [r4, #28]
   15afc:	str	r5, [r4, #32]
   15b00:	add	sp, sp, #80	; 0x50
   15b04:	pop	{r4, r5, r6, r7, r8, pc}
   15b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b0c:	mov	r4, r0
   15b10:	sub	sp, sp, #100	; 0x64
   15b14:	ldr	r5, [r0, #28]
   15b18:	ldr	r7, [r0, #36]	; 0x24
   15b1c:	ldr	r3, [r0, #48]	; 0x30
   15b20:	cmp	r7, r3
   15b24:	movge	r7, r3
   15b28:	ldrb	r3, [r0, #74]	; 0x4a
   15b2c:	cmp	r3, #0
   15b30:	bne	15b54 <__assert_fail@plt+0x45f0>
   15b34:	ldr	r3, [r0, #64]	; 0x40
   15b38:	cmp	r3, #0
   15b3c:	bne	15b54 <__assert_fail@plt+0x45f0>
   15b40:	ldrb	r3, [r0, #76]	; 0x4c
   15b44:	cmp	r3, #0
   15b48:	addeq	r6, r0, #16
   15b4c:	addeq	r8, sp, #24
   15b50:	beq	15bb8 <__assert_fail@plt+0x4654>
   15b54:	mov	r6, r5
   15b58:	ldr	r5, [r4, #32]
   15b5c:	cmp	r6, r7
   15b60:	blt	15c68 <__assert_fail@plt+0x4704>
   15b64:	b	15d38 <__assert_fail@plt+0x47d4>
   15b68:	ldr	fp, [r4]
   15b6c:	str	r5, [sp, #4]
   15b70:	ldr	sl, [r4, #24]
   15b74:	add	r3, fp, sl
   15b78:	ldrb	r9, [r3, r5]
   15b7c:	tst	r9, #128	; 0x80
   15b80:	bne	15bc4 <__assert_fail@plt+0x4660>
   15b84:	mov	r0, r6
   15b88:	bl	11294 <mbsinit@plt>
   15b8c:	cmp	r0, #0
   15b90:	beq	15bc4 <__assert_fail@plt+0x4660>
   15b94:	mov	r0, r9
   15b98:	bl	1151c <towupper@plt>
   15b9c:	bics	r3, r0, #127	; 0x7f
   15ba0:	bne	15bc4 <__assert_fail@plt+0x4660>
   15ba4:	ldr	r3, [r4, #4]
   15ba8:	strb	r0, [r3, r5]
   15bac:	ldr	r3, [r4, #8]
   15bb0:	str	r0, [r3, r5, lsl #2]
   15bb4:	add	r5, r5, #1
   15bb8:	cmp	r5, r7
   15bbc:	blt	15b68 <__assert_fail@plt+0x4604>
   15bc0:	b	15da4 <__assert_fail@plt+0x4840>
   15bc4:	ldm	r6, {r0, r1}
   15bc8:	mov	r3, r6
   15bcc:	sub	r2, r7, r5
   15bd0:	stm	r8, {r0, r1}
   15bd4:	add	r1, sl, r5
   15bd8:	add	r0, sp, #20
   15bdc:	add	r1, fp, r1
   15be0:	bl	21278 <__assert_fail@plt+0xfd14>
   15be4:	sub	r3, r0, #1
   15be8:	mov	sl, r0
   15bec:	cmn	r3, #4
   15bf0:	bhi	15d5c <__assert_fail@plt+0x47f8>
   15bf4:	ldr	fp, [sp, #20]
   15bf8:	mov	r0, fp
   15bfc:	bl	1151c <towupper@plt>
   15c00:	cmp	fp, r0
   15c04:	mov	r9, r0
   15c08:	beq	15d40 <__assert_fail@plt+0x47dc>
   15c0c:	mov	r1, r0
   15c10:	mov	r2, r8
   15c14:	add	r0, sp, #32
   15c18:	bl	111e0 <wcrtomb@plt>
   15c1c:	cmp	sl, r0
   15c20:	bne	15c64 <__assert_fail@plt+0x4700>
   15c24:	ldr	r0, [r4, #4]
   15c28:	mov	r2, sl
   15c2c:	add	r1, sp, #32
   15c30:	add	r0, r0, r5
   15c34:	add	sl, sl, r5
   15c38:	bl	11264 <memcpy@plt>
   15c3c:	ldr	r2, [r4, #8]
   15c40:	add	r3, r5, #1
   15c44:	mvn	r1, #0
   15c48:	str	r9, [r2, r5, lsl #2]
   15c4c:	cmp	r3, sl
   15c50:	mov	r5, r3
   15c54:	bge	15bb8 <__assert_fail@plt+0x4654>
   15c58:	str	r1, [r2, r3, lsl #2]
   15c5c:	add	r3, r3, #1
   15c60:	b	15c4c <__assert_fail@plt+0x46e8>
   15c64:	mov	r6, r5
   15c68:	add	r3, r4, #16
   15c6c:	ldr	ip, [r4, #64]	; 0x40
   15c70:	add	sl, sp, #24
   15c74:	sub	r2, r7, r6
   15c78:	ldm	r3, {r0, r1}
   15c7c:	str	r3, [sp, #4]
   15c80:	cmp	ip, #0
   15c84:	stm	sl, {r0, r1}
   15c88:	beq	15ddc <__assert_fail@plt+0x4878>
   15c8c:	ldr	r0, [r4, #80]	; 0x50
   15c90:	mov	r3, #0
   15c94:	add	r9, sp, #32
   15c98:	cmp	r2, r0
   15c9c:	movlt	r0, r2
   15ca0:	cmp	r0, r3
   15ca4:	bgt	15db8 <__assert_fail@plt+0x4854>
   15ca8:	mov	r1, r9
   15cac:	add	r0, sp, #20
   15cb0:	ldr	r3, [sp, #4]
   15cb4:	bl	21278 <__assert_fail@plt+0xfd14>
   15cb8:	sub	r3, r0, #1
   15cbc:	mov	r8, r0
   15cc0:	cmn	r3, #4
   15cc4:	str	r3, [sp, #8]
   15cc8:	bhi	15f60 <__assert_fail@plt+0x49fc>
   15ccc:	ldr	r3, [sp, #20]
   15cd0:	mov	r0, r3
   15cd4:	str	r3, [sp, #12]
   15cd8:	bl	1151c <towupper@plt>
   15cdc:	ldr	r3, [sp, #12]
   15ce0:	mov	fp, r0
   15ce4:	cmp	r3, r0
   15ce8:	beq	15eec <__assert_fail@plt+0x4988>
   15cec:	mov	r1, r0
   15cf0:	mov	r2, sl
   15cf4:	add	r0, sp, #32
   15cf8:	bl	111e0 <wcrtomb@plt>
   15cfc:	cmp	r8, r0
   15d00:	mov	r3, r0
   15d04:	moveq	r2, r8
   15d08:	addeq	r1, sp, #32
   15d0c:	ldreq	r0, [r4, #4]
   15d10:	beq	15ef8 <__assert_fail@plt+0x4994>
   15d14:	cmn	r3, #1
   15d18:	beq	15eec <__assert_fail@plt+0x4988>
   15d1c:	ldr	r0, [r4, #36]	; 0x24
   15d20:	add	r9, r6, r3
   15d24:	cmp	r9, r0
   15d28:	bls	15df0 <__assert_fail@plt+0x488c>
   15d2c:	ldm	sl, {r0, r1}
   15d30:	ldr	r3, [sp, #4]
   15d34:	stm	r3, {r0, r1}
   15d38:	str	r6, [r4, #28]
   15d3c:	b	15da8 <__assert_fail@plt+0x4844>
   15d40:	ldr	r1, [r4]
   15d44:	mov	r2, sl
   15d48:	ldr	r3, [r4, #24]
   15d4c:	ldr	r0, [r4, #4]
   15d50:	add	r3, r5, r3
   15d54:	add	r1, r1, r3
   15d58:	b	15c30 <__assert_fail@plt+0x46cc>
   15d5c:	cmn	r3, #3
   15d60:	bne	15d74 <__assert_fail@plt+0x4810>
   15d64:	ldr	r2, [r4, #36]	; 0x24
   15d68:	ldr	r3, [r4, #48]	; 0x30
   15d6c:	cmp	r2, r3
   15d70:	blt	15d9c <__assert_fail@plt+0x4838>
   15d74:	ldr	r3, [r4, #4]
   15d78:	cmn	sl, #1
   15d7c:	ldr	r2, [sp, #4]
   15d80:	strb	r9, [r3, r5]
   15d84:	add	r5, r5, #1
   15d88:	ldr	r3, [r4, #8]
   15d8c:	str	r9, [r3, r2, lsl #2]
   15d90:	ldmeq	r8, {r0, r1}
   15d94:	stmeq	r6, {r0, r1}
   15d98:	b	15bb8 <__assert_fail@plt+0x4654>
   15d9c:	ldm	r8, {r0, r1}
   15da0:	stm	r6, {r0, r1}
   15da4:	str	r5, [r4, #28]
   15da8:	mov	r0, #0
   15dac:	str	r5, [r4, #32]
   15db0:	add	sp, sp, #100	; 0x64
   15db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db8:	ldr	r1, [r4]
   15dbc:	ldr	lr, [r4, #24]
   15dc0:	add	r1, r1, r5
   15dc4:	add	r1, r1, r3
   15dc8:	ldrb	r1, [r1, lr]
   15dcc:	ldrb	r1, [ip, r1]
   15dd0:	strb	r1, [r9, r3]
   15dd4:	add	r3, r3, #1
   15dd8:	b	15ca0 <__assert_fail@plt+0x473c>
   15ddc:	ldr	r9, [r4, #24]
   15de0:	add	r3, r5, r9
   15de4:	ldr	r9, [r4]
   15de8:	add	r9, r9, r3
   15dec:	b	15ca8 <__assert_fail@plt+0x4744>
   15df0:	ldr	r2, [r4, #12]
   15df4:	cmp	r2, #0
   15df8:	bne	15e1c <__assert_fail@plt+0x48b8>
   15dfc:	lsl	r0, r0, #2
   15e00:	str	r3, [sp, #4]
   15e04:	bl	20eec <__assert_fail@plt+0xf988>
   15e08:	cmp	r0, #0
   15e0c:	str	r0, [r4, #12]
   15e10:	moveq	r0, #12
   15e14:	ldr	r3, [sp, #4]
   15e18:	beq	15db0 <__assert_fail@plt+0x484c>
   15e1c:	ldrb	r2, [r4, #76]	; 0x4c
   15e20:	cmp	r2, #0
   15e24:	beq	15eb8 <__assert_fail@plt+0x4954>
   15e28:	ldr	r0, [r4, #4]
   15e2c:	mov	r2, r3
   15e30:	add	r1, sp, #32
   15e34:	str	r3, [sp, #4]
   15e38:	add	r0, r0, r6
   15e3c:	bl	11264 <memcpy@plt>
   15e40:	ldr	r1, [r4, #8]
   15e44:	lsl	r2, r6, #2
   15e48:	mvn	lr, #0
   15e4c:	ldr	r0, [r4, #12]
   15e50:	ldr	r3, [sp, #4]
   15e54:	str	fp, [r1, r6, lsl #2]
   15e58:	add	r1, r1, r2
   15e5c:	str	r5, [r0, r6, lsl #2]
   15e60:	add	r0, r0, r2
   15e64:	mov	r2, #1
   15e68:	cmp	r2, r3
   15e6c:	bcc	15ecc <__assert_fail@plt+0x4968>
   15e70:	ldr	r7, [r4, #48]	; 0x30
   15e74:	sub	r3, r3, r8
   15e78:	mov	r6, r9
   15e7c:	ldr	r2, [r4, #52]	; 0x34
   15e80:	add	r7, r3, r7
   15e84:	cmp	r2, r5
   15e88:	add	r5, r5, r8
   15e8c:	str	r7, [r4, #48]	; 0x30
   15e90:	ldrgt	r2, [r4, #56]	; 0x38
   15e94:	addgt	r3, r2, r3
   15e98:	strgt	r3, [r4, #56]	; 0x38
   15e9c:	ldr	r3, [r4, #36]	; 0x24
   15ea0:	cmp	r7, r3
   15ea4:	movge	r7, r3
   15ea8:	b	15b5c <__assert_fail@plt+0x45f8>
   15eac:	ldr	r1, [r4, #12]
   15eb0:	str	r2, [r1, r2, lsl #2]
   15eb4:	add	r2, r2, #1
   15eb8:	cmp	r2, r6
   15ebc:	bne	15eac <__assert_fail@plt+0x4948>
   15ec0:	mov	r2, #1
   15ec4:	strb	r2, [r4, #76]	; 0x4c
   15ec8:	b	15e28 <__assert_fail@plt+0x48c4>
   15ecc:	ldr	ip, [sp, #8]
   15ed0:	cmp	r2, r8
   15ed4:	movcc	ip, r2
   15ed8:	add	r2, r2, #1
   15edc:	add	ip, r5, ip
   15ee0:	str	ip, [r0, #4]!
   15ee4:	str	lr, [r1, #4]!
   15ee8:	b	15e68 <__assert_fail@plt+0x4904>
   15eec:	ldr	r0, [r4, #4]
   15ef0:	mov	r2, r8
   15ef4:	mov	r1, r9
   15ef8:	add	r0, r0, r6
   15efc:	bl	11264 <memcpy@plt>
   15f00:	ldrb	r3, [r4, #76]	; 0x4c
   15f04:	cmp	r3, #0
   15f08:	bne	15f3c <__assert_fail@plt+0x49d8>
   15f0c:	ldr	r2, [r4, #8]
   15f10:	add	r5, r5, r8
   15f14:	add	r3, r6, #1
   15f18:	add	r8, r8, r6
   15f1c:	mvn	r1, #0
   15f20:	str	fp, [r2, r6, lsl #2]
   15f24:	cmp	r3, r8
   15f28:	mov	r6, r3
   15f2c:	bge	15b5c <__assert_fail@plt+0x45f8>
   15f30:	str	r1, [r2, r3, lsl #2]
   15f34:	add	r3, r3, #1
   15f38:	b	15f24 <__assert_fail@plt+0x49c0>
   15f3c:	ldr	r2, [r4, #12]
   15f40:	mov	r3, #0
   15f44:	add	r2, r2, r6, lsl #2
   15f48:	add	r1, r5, r3
   15f4c:	add	r3, r3, #1
   15f50:	cmp	r8, r3
   15f54:	str	r1, [r2], #4
   15f58:	bne	15f48 <__assert_fail@plt+0x49e4>
   15f5c:	b	15f0c <__assert_fail@plt+0x49a8>
   15f60:	sub	r3, r0, #1
   15f64:	cmn	r3, #3
   15f68:	bne	15f7c <__assert_fail@plt+0x4a18>
   15f6c:	ldr	r2, [r4, #36]	; 0x24
   15f70:	ldr	r3, [r4, #48]	; 0x30
   15f74:	cmp	r2, r3
   15f78:	blt	15d2c <__assert_fail@plt+0x47c8>
   15f7c:	ldr	r3, [r4]
   15f80:	ldr	r2, [r4, #24]
   15f84:	add	r3, r3, r5
   15f88:	ldrb	r3, [r3, r2]
   15f8c:	ldr	r2, [r4, #64]	; 0x40
   15f90:	cmp	r2, #0
   15f94:	ldrbne	r3, [r2, r3]
   15f98:	ldr	r2, [r4, #4]
   15f9c:	strb	r3, [r2, r6]
   15fa0:	lsl	r2, r6, #2
   15fa4:	ldrb	r1, [r4, #76]	; 0x4c
   15fa8:	cmp	r1, #0
   15fac:	ldrne	r1, [r4, #12]
   15fb0:	strne	r5, [r1, r6, lsl #2]
   15fb4:	cmn	r8, #1
   15fb8:	add	r5, r5, #1
   15fbc:	ldr	r1, [r4, #8]
   15fc0:	add	r6, r6, #1
   15fc4:	str	r3, [r1, r2]
   15fc8:	ldreq	r3, [sp, #4]
   15fcc:	ldmeq	sl, {r0, r1}
   15fd0:	stmeq	r3, {r0, r1}
   15fd4:	b	15b5c <__assert_fail@plt+0x45f8>
   15fd8:	push	{r4, r5, r6, lr}
   15fdc:	mov	r4, r0
   15fe0:	ldr	r5, [r0, #28]
   15fe4:	ldr	r3, [r0, #36]	; 0x24
   15fe8:	ldr	r6, [r0, #48]	; 0x30
   15fec:	cmp	r3, r6
   15ff0:	movlt	r6, r3
   15ff4:	cmp	r5, r6
   15ff8:	blt	16008 <__assert_fail@plt+0x4aa4>
   15ffc:	str	r5, [r4, #28]
   16000:	str	r5, [r4, #32]
   16004:	pop	{r4, r5, r6, pc}
   16008:	ldr	r3, [r4]
   1600c:	ldr	r2, [r4, #24]
   16010:	add	r3, r3, r5
   16014:	ldrb	r0, [r3, r2]
   16018:	ldr	r3, [r4, #64]	; 0x40
   1601c:	cmp	r3, #0
   16020:	ldrbne	r0, [r3, r0]
   16024:	bl	114d4 <toupper@plt>
   16028:	ldr	r3, [r4, #4]
   1602c:	strb	r0, [r3, r5]
   16030:	add	r5, r5, #1
   16034:	b	15ff4 <__assert_fail@plt+0x4a90>
   16038:	ldr	r3, [r0, #36]	; 0x24
   1603c:	push	{r4, r5, r6, lr}
   16040:	cmn	r3, #-536870910	; 0xe0000002
   16044:	bls	16054 <__assert_fail@plt+0x4af0>
   16048:	mov	r5, #12
   1604c:	mov	r0, r5
   16050:	pop	{r4, r5, r6, pc}
   16054:	ldr	r2, [r0, #48]	; 0x30
   16058:	lsl	r3, r3, #1
   1605c:	mov	r4, r0
   16060:	cmp	r3, r2
   16064:	movge	r3, r2
   16068:	cmp	r3, r1
   1606c:	movge	r1, r3
   16070:	bl	1554c <__assert_fail@plt+0x3fe8>
   16074:	subs	r5, r0, #0
   16078:	bne	1604c <__assert_fail@plt+0x4ae8>
   1607c:	ldr	r0, [r4, #100]	; 0x64
   16080:	cmp	r0, #0
   16084:	beq	160a4 <__assert_fail@plt+0x4b40>
   16088:	ldr	r1, [r4, #36]	; 0x24
   1608c:	add	r1, r1, #1
   16090:	lsl	r1, r1, #2
   16094:	bl	20f18 <__assert_fail@plt+0xf9b4>
   16098:	cmp	r0, #0
   1609c:	beq	16048 <__assert_fail@plt+0x4ae4>
   160a0:	str	r0, [r4, #100]	; 0x64
   160a4:	ldrb	r2, [r4, #72]	; 0x48
   160a8:	ldr	r3, [r4, #80]	; 0x50
   160ac:	cmp	r2, #0
   160b0:	beq	160d0 <__assert_fail@plt+0x4b6c>
   160b4:	cmp	r3, #1
   160b8:	mov	r0, r4
   160bc:	ble	160c8 <__assert_fail@plt+0x4b64>
   160c0:	pop	{r4, r5, r6, lr}
   160c4:	b	15b08 <__assert_fail@plt+0x45a4>
   160c8:	bl	15fd8 <__assert_fail@plt+0x4a74>
   160cc:	b	1604c <__assert_fail@plt+0x4ae8>
   160d0:	cmp	r3, #1
   160d4:	ble	160e4 <__assert_fail@plt+0x4b80>
   160d8:	mov	r0, r4
   160dc:	bl	159b4 <__assert_fail@plt+0x4450>
   160e0:	b	1604c <__assert_fail@plt+0x4ae8>
   160e4:	ldr	r3, [r4, #64]	; 0x40
   160e8:	cmp	r3, #0
   160ec:	beq	1604c <__assert_fail@plt+0x4ae8>
   160f0:	mov	r0, r4
   160f4:	bl	14edc <__assert_fail@plt+0x3978>
   160f8:	b	1604c <__assert_fail@plt+0x4ae8>
   160fc:	push	{r4, lr}
   16100:	mov	r4, r0
   16104:	ldr	r0, [r0]
   16108:	bl	13648 <__assert_fail@plt+0x20e4>
   1610c:	ldr	r0, [r4, #4]
   16110:	bl	13648 <__assert_fail@plt+0x20e4>
   16114:	ldr	r0, [r4, #8]
   16118:	bl	13648 <__assert_fail@plt+0x20e4>
   1611c:	ldr	r0, [r4, #12]
   16120:	bl	13648 <__assert_fail@plt+0x20e4>
   16124:	mov	r0, r4
   16128:	pop	{r4, lr}
   1612c:	b	13648 <__assert_fail@plt+0x20e4>
   16130:	ldr	r3, [pc, #36]	; 1615c <__assert_fail@plt+0x4bf8>
   16134:	ldr	r2, [r0, #4]
   16138:	and	r3, r3, r2
   1613c:	cmp	r3, #6
   16140:	bne	1614c <__assert_fail@plt+0x4be8>
   16144:	ldr	r0, [r0]
   16148:	b	160fc <__assert_fail@plt+0x4b98>
   1614c:	cmp	r3, #3
   16150:	bxne	lr
   16154:	ldr	r0, [r0]
   16158:	b	13648 <__assert_fail@plt+0x20e4>
   1615c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   16160:	add	r0, r1, #20
   16164:	push	{r4, lr}
   16168:	bl	16130 <__assert_fail@plt+0x4bcc>
   1616c:	mov	r0, #0
   16170:	pop	{r4, pc}
   16174:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16178:	mov	r7, sp
   1617c:	mov	r4, r0
   16180:	ldr	r6, [r0, #4]
   16184:	stm	r7, {r1, r2}
   16188:	ldr	r3, [r0, #8]
   1618c:	ldrb	r5, [sp, #4]
   16190:	cmp	r3, r6
   16194:	bcc	16268 <__assert_fail@plt+0x4d04>
   16198:	ldr	r3, [pc, #372]	; 16314 <__assert_fail@plt+0x4db0>
   1619c:	lsl	r8, r6, #1
   161a0:	cmp	r8, r3
   161a4:	bls	161b4 <__assert_fail@plt+0x4c50>
   161a8:	mvn	r0, #0
   161ac:	add	sp, sp, #12
   161b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161b4:	lsl	r1, r6, #4
   161b8:	ldr	r0, [r0]
   161bc:	bl	20f18 <__assert_fail@plt+0xf9b4>
   161c0:	cmp	r0, #0
   161c4:	beq	161a8 <__assert_fail@plt+0x4c44>
   161c8:	lsl	r9, r6, #3
   161cc:	str	r0, [r4]
   161d0:	ldr	r0, [r4, #12]
   161d4:	mov	r1, r9
   161d8:	bl	20f18 <__assert_fail@plt+0xf9b4>
   161dc:	mov	sl, r0
   161e0:	mov	r1, r9
   161e4:	ldr	r0, [r4, #16]
   161e8:	bl	20f18 <__assert_fail@plt+0xf9b4>
   161ec:	mov	r3, #24
   161f0:	mov	r9, r0
   161f4:	ldr	r0, [r4, #20]
   161f8:	mul	r6, r3, r6
   161fc:	mov	r1, r6
   16200:	bl	20f18 <__assert_fail@plt+0xf9b4>
   16204:	mov	fp, r0
   16208:	mov	r1, r6
   1620c:	ldr	r0, [r4, #24]
   16210:	bl	20f18 <__assert_fail@plt+0xf9b4>
   16214:	cmp	r9, #0
   16218:	cmpne	sl, #0
   1621c:	mov	r6, r0
   16220:	beq	16230 <__assert_fail@plt+0x4ccc>
   16224:	cmp	r0, #0
   16228:	cmpne	fp, #0
   1622c:	bne	16254 <__assert_fail@plt+0x4cf0>
   16230:	mov	r0, sl
   16234:	bl	13648 <__assert_fail@plt+0x20e4>
   16238:	mov	r0, r9
   1623c:	bl	13648 <__assert_fail@plt+0x20e4>
   16240:	mov	r0, fp
   16244:	bl	13648 <__assert_fail@plt+0x20e4>
   16248:	mov	r0, r6
   1624c:	bl	13648 <__assert_fail@plt+0x20e4>
   16250:	b	161a8 <__assert_fail@plt+0x4c44>
   16254:	str	r8, [r4, #4]
   16258:	str	sl, [r4, #12]
   1625c:	str	r9, [r4, #16]
   16260:	str	fp, [r4, #20]
   16264:	str	r0, [r4, #24]
   16268:	ldr	r3, [r4]
   1626c:	cmp	r5, #5
   16270:	ldr	r2, [r4, #8]
   16274:	ldm	r7, {r0, r1}
   16278:	add	r3, r3, r2, lsl #3
   1627c:	stm	r3, {r0, r1}
   16280:	bfc	r1, #8, #10
   16284:	str	r1, [r3, #4]
   16288:	bne	16304 <__assert_fail@plt+0x4da0>
   1628c:	ldr	r5, [r4, #92]	; 0x5c
   16290:	cmp	r5, #1
   16294:	movle	r5, #0
   16298:	movgt	r5, #1
   1629c:	ldrb	r1, [r3, #6]
   162a0:	bfi	r1, r5, #4, #1
   162a4:	strb	r1, [r3, #6]
   162a8:	mvn	r1, #0
   162ac:	ldr	r3, [r4, #12]
   162b0:	ldr	ip, [r4, #20]
   162b4:	str	r1, [r3, r2, lsl #2]
   162b8:	mov	r2, #12
   162bc:	mov	r3, #0
   162c0:	ldr	r1, [r4, #8]
   162c4:	mul	r1, r2, r1
   162c8:	add	r0, ip, r1
   162cc:	str	r3, [ip, r1]
   162d0:	str	r3, [r0, #4]
   162d4:	str	r3, [r0, #8]
   162d8:	ldr	r1, [r4, #8]
   162dc:	ldr	r0, [r4, #24]
   162e0:	mul	r2, r2, r1
   162e4:	add	r1, r0, r2
   162e8:	str	r3, [r0, r2]
   162ec:	str	r3, [r1, #4]
   162f0:	str	r3, [r1, #8]
   162f4:	ldr	r0, [r4, #8]
   162f8:	add	r3, r0, #1
   162fc:	str	r3, [r4, #8]
   16300:	b	161ac <__assert_fail@plt+0x4c48>
   16304:	sub	r5, r5, #6
   16308:	clz	r5, r5
   1630c:	lsr	r5, r5, #5
   16310:	b	1629c <__assert_fail@plt+0x4d38>
   16314:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   16318:	ldr	r3, [r0]
   1631c:	push	{r4, r5, r6, r7, r8, lr}
   16320:	lsl	r7, r1, #3
   16324:	mov	r6, r1
   16328:	mov	r4, r2
   1632c:	mov	r5, r0
   16330:	add	r3, r3, r7
   16334:	ldm	r3, {r1, r2}
   16338:	bl	16174 <__assert_fail@plt+0x4c10>
   1633c:	cmn	r0, #1
   16340:	popeq	{r4, r5, r6, r7, r8, pc}
   16344:	ubfx	r2, r4, #0, #10
   16348:	ldr	ip, [r5]
   1634c:	add	r1, ip, r0, lsl #3
   16350:	add	ip, ip, r7
   16354:	ldr	r3, [r1, #4]
   16358:	bfi	r3, r2, #8, #10
   1635c:	str	r3, [r1, #4]
   16360:	ldr	ip, [ip, #4]
   16364:	ubfx	ip, ip, #8, #10
   16368:	orr	r2, r2, ip
   1636c:	bfi	r3, r2, #8, #10
   16370:	str	r3, [r1, #4]
   16374:	ubfx	r3, r3, #16, #8
   16378:	orr	r3, r3, #4
   1637c:	strb	r3, [r1, #6]
   16380:	ldr	r3, [r5, #16]
   16384:	str	r6, [r3, r0, lsl #2]
   16388:	pop	{r4, r5, r6, r7, r8, pc}
   1638c:	push	{r4, lr}
   16390:	mov	r4, r0
   16394:	ldr	r0, [r0, #24]
   16398:	bl	13648 <__assert_fail@plt+0x20e4>
   1639c:	ldr	r0, [r4, #36]	; 0x24
   163a0:	bl	13648 <__assert_fail@plt+0x20e4>
   163a4:	ldr	r3, [r4, #40]	; 0x28
   163a8:	add	r2, r4, #4
   163ac:	cmp	r3, r2
   163b0:	beq	163c4 <__assert_fail@plt+0x4e60>
   163b4:	ldr	r0, [r3, #8]
   163b8:	bl	13648 <__assert_fail@plt+0x20e4>
   163bc:	ldr	r0, [r4, #40]	; 0x28
   163c0:	bl	13648 <__assert_fail@plt+0x20e4>
   163c4:	ldr	r0, [r4, #12]
   163c8:	bl	13648 <__assert_fail@plt+0x20e4>
   163cc:	ldr	r0, [r4, #48]	; 0x30
   163d0:	bl	13648 <__assert_fail@plt+0x20e4>
   163d4:	ldr	r0, [r4, #44]	; 0x2c
   163d8:	bl	13648 <__assert_fail@plt+0x20e4>
   163dc:	mov	r0, r4
   163e0:	pop	{r4, lr}
   163e4:	b	13648 <__assert_fail@plt+0x20e4>
   163e8:	push	{r4, lr}
   163ec:	mov	r4, r0
   163f0:	ldr	r0, [r0, #8]
   163f4:	bl	13648 <__assert_fail@plt+0x20e4>
   163f8:	ldr	r0, [r4, #12]
   163fc:	bl	13648 <__assert_fail@plt+0x20e4>
   16400:	ldrb	r3, [r4, #75]	; 0x4b
   16404:	cmp	r3, #0
   16408:	popeq	{r4, pc}
   1640c:	ldr	r0, [r4, #4]
   16410:	pop	{r4, lr}
   16414:	b	13648 <__assert_fail@plt+0x20e4>
   16418:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1641c:	mov	r4, #0
   16420:	mov	r6, r0
   16424:	mov	r8, r4
   16428:	ldr	r3, [r6, #124]	; 0x7c
   1642c:	cmp	r3, r4
   16430:	bgt	16440 <__assert_fail@plt+0x4edc>
   16434:	str	r8, [r6, #108]	; 0x6c
   16438:	str	r8, [r6, #124]	; 0x7c
   1643c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16440:	ldr	r3, [r6, #132]	; 0x84
   16444:	mov	r7, #0
   16448:	ldr	r5, [r3, r4, lsl #2]
   1644c:	ldr	r3, [r5, #16]
   16450:	ldr	r0, [r5, #20]
   16454:	cmp	r3, r7
   16458:	bgt	1648c <__assert_fail@plt+0x4f28>
   1645c:	bl	13648 <__assert_fail@plt+0x20e4>
   16460:	ldr	r3, [r5, #8]
   16464:	cmp	r3, #0
   16468:	beq	1647c <__assert_fail@plt+0x4f18>
   1646c:	ldr	r0, [r3, #8]
   16470:	bl	13648 <__assert_fail@plt+0x20e4>
   16474:	ldr	r0, [r5, #8]
   16478:	bl	13648 <__assert_fail@plt+0x20e4>
   1647c:	mov	r0, r5
   16480:	add	r4, r4, #1
   16484:	bl	13648 <__assert_fail@plt+0x20e4>
   16488:	b	16428 <__assert_fail@plt+0x4ec4>
   1648c:	ldr	r9, [r0, r7, lsl #2]
   16490:	add	r7, r7, #1
   16494:	ldr	r0, [r9, #16]
   16498:	bl	13648 <__assert_fail@plt+0x20e4>
   1649c:	mov	r0, r9
   164a0:	bl	13648 <__assert_fail@plt+0x20e4>
   164a4:	b	1644c <__assert_fail@plt+0x4ee8>
   164a8:	push	{r4, r5, r6, lr}
   164ac:	add	r5, r0, #12
   164b0:	mov	r4, r0
   164b4:	ldr	r0, [r0, #8]
   164b8:	cmp	r0, r5
   164bc:	beq	164c4 <__assert_fail@plt+0x4f60>
   164c0:	bl	13648 <__assert_fail@plt+0x20e4>
   164c4:	mov	r3, #0
   164c8:	str	r3, [r4]
   164cc:	mov	r3, #16
   164d0:	str	r5, [r4, #8]
   164d4:	str	r3, [r4, #4]
   164d8:	pop	{r4, r5, r6, pc}
   164dc:	mov	r3, r1
   164e0:	ldr	r2, [r1, #28]
   164e4:	ldrb	r1, [r1, #24]
   164e8:	sub	r1, r1, #2
   164ec:	cmp	r1, #14
   164f0:	ldrls	pc, [pc, r1, lsl #2]
   164f4:	b	16608 <__assert_fail@plt+0x50a4>
   164f8:	andeq	r6, r1, r8, lsl r6
   164fc:	andeq	r6, r1, r8, lsl #12
   16500:	andeq	r6, r1, r4, ror #11
   16504:	andeq	r6, r1, r8, lsl #12
   16508:	andeq	r6, r1, r8, lsl #12
   1650c:	andeq	r6, r1, r8, lsl #12
   16510:	andeq	r6, r1, ip, asr #11
   16514:	andeq	r6, r1, ip, asr #11
   16518:	andeq	r6, r1, r4, lsr r5
   1651c:	andeq	r6, r1, r4, lsr r5
   16520:	andeq	r6, r1, ip, asr #11
   16524:	andeq	r6, r1, r8, lsl #12
   16528:	andeq	r6, r1, r8, lsl #12
   1652c:	andeq	r6, r1, r8, lsl #12
   16530:	andeq	r6, r1, r8, lsl r6
   16534:	ldrb	r1, [r0, #88]	; 0x58
   16538:	push	{r4, r5, r6, r7, r8, lr}
   1653c:	mov	r4, #12
   16540:	mov	r8, #2
   16544:	mul	r2, r4, r2
   16548:	orr	r1, r1, #1
   1654c:	strb	r1, [r0, #88]	; 0x58
   16550:	ldr	r1, [r3, #4]
   16554:	cmp	r1, #0
   16558:	ldreq	r1, [r3, #16]
   1655c:	ldrne	r1, [r1, #12]
   16560:	ldr	r5, [r1, #28]
   16564:	ldr	r1, [r3, #8]
   16568:	cmp	r1, #0
   1656c:	ldrne	r3, [r1, #12]
   16570:	ldreq	r3, [r3, #16]
   16574:	ldr	r6, [r3, #28]
   16578:	ldr	r3, [r0, #20]
   1657c:	mov	r0, #8
   16580:	str	r8, [r3, r2]
   16584:	add	r7, r3, r2
   16588:	bl	20eec <__assert_fail@plt+0xf988>
   1658c:	cmp	r0, #0
   16590:	str	r0, [r7, #8]
   16594:	bne	165a0 <__assert_fail@plt+0x503c>
   16598:	mov	r0, r4
   1659c:	pop	{r4, r5, r6, r7, r8, pc}
   165a0:	cmp	r5, r6
   165a4:	moveq	r3, #1
   165a8:	streq	r3, [r7, #4]
   165ac:	streq	r5, [r0]
   165b0:	beq	165c4 <__assert_fail@plt+0x5060>
   165b4:	str	r8, [r7, #4]
   165b8:	stmlt	r0, {r5, r6}
   165bc:	strge	r6, [r0]
   165c0:	strge	r5, [r0, #4]
   165c4:	mov	r0, #0
   165c8:	pop	{r4, r5, r6, r7, r8, pc}
   165cc:	ldr	r1, [r3, #16]
   165d0:	ldr	r3, [r0, #20]
   165d4:	ldr	r1, [r1, #28]
   165d8:	mov	r0, #12
   165dc:	mla	r0, r0, r2, r3
   165e0:	b	1593c <__assert_fail@plt+0x43d8>
   165e4:	ldr	r1, [r3, #16]
   165e8:	ldr	ip, [r0, #12]
   165ec:	ldr	r1, [r1, #28]
   165f0:	str	r1, [ip, r2, lsl #2]
   165f4:	ldrb	r3, [r3, #24]
   165f8:	cmp	r3, #4
   165fc:	bne	16618 <__assert_fail@plt+0x50b4>
   16600:	ldr	r3, [r0, #20]
   16604:	b	165d8 <__assert_fail@plt+0x5074>
   16608:	ldr	r3, [r3, #16]
   1660c:	ldr	r1, [r3, #28]
   16610:	ldr	r3, [r0, #12]
   16614:	str	r1, [r3, r2, lsl #2]
   16618:	mov	r0, #0
   1661c:	bx	lr
   16620:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16624:	mov	r4, r0
   16628:	mov	r8, r1
   1662c:	mov	r7, r2
   16630:	mov	r5, #0
   16634:	ldr	r9, [r0, #84]	; 0x54
   16638:	ldr	r3, [r8, #4]
   1663c:	cmp	r3, r5
   16640:	movle	r0, #0
   16644:	ble	166ac <__assert_fail@plt+0x5148>
   16648:	ldr	r3, [r8, #8]
   1664c:	ldr	r6, [r3, r5, lsl #2]
   16650:	ldr	r3, [r9]
   16654:	add	r2, r3, r6, lsl #3
   16658:	ldrb	r2, [r2, #4]
   1665c:	cmp	r2, #8
   16660:	bne	166f8 <__assert_fail@plt+0x5194>
   16664:	ldr	r2, [r3, r6, lsl #3]
   16668:	cmp	r2, #31
   1666c:	bgt	166f8 <__assert_fail@plt+0x5194>
   16670:	ldr	r3, [r9, #80]	; 0x50
   16674:	lsr	r3, r3, r2
   16678:	tst	r3, #1
   1667c:	beq	166f8 <__assert_fail@plt+0x5194>
   16680:	ldr	r3, [r4, #124]	; 0x7c
   16684:	ldr	r1, [r4, #128]	; 0x80
   16688:	ldr	r0, [r4, #132]	; 0x84
   1668c:	cmp	r1, r3
   16690:	bne	166bc <__assert_fail@plt+0x5158>
   16694:	lsl	sl, r1, #1
   16698:	lsl	r1, r1, #3
   1669c:	bl	20f18 <__assert_fail@plt+0xf9b4>
   166a0:	cmp	r0, #0
   166a4:	bne	166b4 <__assert_fail@plt+0x5150>
   166a8:	mov	r0, #12
   166ac:	add	sp, sp, #4
   166b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166b4:	str	sl, [r4, #128]	; 0x80
   166b8:	str	r0, [r4, #132]	; 0x84
   166bc:	mov	r1, #24
   166c0:	mov	r0, #1
   166c4:	ldr	fp, [r4, #124]	; 0x7c
   166c8:	ldr	sl, [r4, #132]	; 0x84
   166cc:	bl	20e98 <__assert_fail@plt+0xf934>
   166d0:	ldr	r3, [r4, #124]	; 0x7c
   166d4:	ldr	r2, [r4, #132]	; 0x84
   166d8:	str	r0, [sl, fp, lsl #2]
   166dc:	ldr	r2, [r2, r3, lsl #2]
   166e0:	cmp	r2, #0
   166e4:	beq	166a8 <__assert_fail@plt+0x5144>
   166e8:	add	r3, r3, #1
   166ec:	str	r6, [r2, #4]
   166f0:	str	r3, [r4, #124]	; 0x7c
   166f4:	str	r7, [r2]
   166f8:	add	r5, r5, #1
   166fc:	b	16638 <__assert_fail@plt+0x50d4>
   16700:	ldr	r3, [r0, #36]	; 0x24
   16704:	push	{r4, r5, r6, lr}
   16708:	mov	r4, r0
   1670c:	mov	r5, r1
   16710:	ldr	r6, [r0, #104]	; 0x68
   16714:	cmp	r3, r1
   16718:	bgt	16728 <__assert_fail@plt+0x51c4>
   1671c:	ldr	r2, [r0, #48]	; 0x30
   16720:	cmp	r3, r2
   16724:	blt	16750 <__assert_fail@plt+0x51ec>
   16728:	ldr	r3, [r4, #28]
   1672c:	cmp	r3, r5
   16730:	ble	16744 <__assert_fail@plt+0x51e0>
   16734:	cmp	r6, r5
   16738:	blt	16768 <__assert_fail@plt+0x5204>
   1673c:	mov	r0, #0
   16740:	pop	{r4, r5, r6, pc}
   16744:	ldr	r2, [r4, #48]	; 0x30
   16748:	cmp	r3, r2
   1674c:	bge	16734 <__assert_fail@plt+0x51d0>
   16750:	add	r1, r5, #1
   16754:	mov	r0, r4
   16758:	bl	16038 <__assert_fail@plt+0x4ad4>
   1675c:	cmp	r0, #0
   16760:	beq	16734 <__assert_fail@plt+0x51d0>
   16764:	pop	{r4, r5, r6, pc}
   16768:	ldr	r0, [r4, #100]	; 0x64
   1676c:	sub	r2, r5, r6
   16770:	add	r6, r6, #1
   16774:	lsl	r2, r2, #2
   16778:	mov	r1, #0
   1677c:	add	r0, r0, r6, lsl #2
   16780:	bl	11444 <memset@plt>
   16784:	str	r5, [r4, #104]	; 0x68
   16788:	b	1673c <__assert_fail@plt+0x51d8>
   1678c:	push	{r4, r5, r6, r7, r8, lr}
   16790:	subs	r4, r0, #0
   16794:	ldr	r7, [sp, #28]
   16798:	beq	1682c <__assert_fail@plt+0x52c8>
   1679c:	ldr	r5, [r4]
   167a0:	cmp	r5, #0
   167a4:	beq	1682c <__assert_fail@plt+0x52c8>
   167a8:	mov	r0, r3
   167ac:	sub	r5, r5, #1
   167b0:	lsl	r6, r2, #3
   167b4:	mov	r3, #24
   167b8:	str	r5, [r4]
   167bc:	mov	r2, r6
   167c0:	mul	r5, r3, r5
   167c4:	ldr	r3, [r4, #8]
   167c8:	add	ip, r3, r5
   167cc:	ldr	r3, [r3, r5]
   167d0:	str	r3, [r1]
   167d4:	ldr	r1, [ip, #8]
   167d8:	bl	11264 <memcpy@plt>
   167dc:	ldr	r3, [r4, #8]
   167e0:	mov	r2, r6
   167e4:	ldr	r0, [sp, #24]
   167e8:	add	r3, r3, r5
   167ec:	ldr	r1, [r3, #8]
   167f0:	add	r1, r1, r6
   167f4:	bl	11264 <memcpy@plt>
   167f8:	ldr	r0, [r7, #8]
   167fc:	bl	13648 <__assert_fail@plt+0x20e4>
   16800:	ldr	r3, [r4, #8]
   16804:	add	r3, r3, r5
   16808:	ldr	r0, [r3, #8]
   1680c:	bl	13648 <__assert_fail@plt+0x20e4>
   16810:	ldr	r3, [r4, #8]
   16814:	add	r5, r3, r5
   16818:	add	r3, r5, #12
   1681c:	ldm	r3, {r0, r1, r2}
   16820:	stm	r7, {r0, r1, r2}
   16824:	ldr	r0, [r5, #4]
   16828:	pop	{r4, r5, r6, r7, r8, pc}
   1682c:	mvn	r0, #0
   16830:	pop	{r4, r5, r6, r7, r8, pc}
   16834:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16838:	mov	r9, r3
   1683c:	mov	r5, r0
   16840:	mov	r4, r1
   16844:	mov	r8, r2
   16848:	ldr	r6, [sp, #32]
   1684c:	ldr	r3, [sp, #36]	; 0x24
   16850:	tst	r3, #4194304	; 0x400000
   16854:	beq	16888 <__assert_fail@plt+0x5324>
   16858:	mov	r0, r6
   1685c:	ldr	r1, [pc, #1720]	; 16f1c <__assert_fail@plt+0x59b8>
   16860:	bl	111f8 <strcmp@plt>
   16864:	cmp	r0, #0
   16868:	ldreq	r6, [pc, #1712]	; 16f20 <__assert_fail@plt+0x59bc>
   1686c:	beq	16888 <__assert_fail@plt+0x5324>
   16870:	mov	r0, r6
   16874:	ldr	r1, [pc, #1704]	; 16f24 <__assert_fail@plt+0x59c0>
   16878:	bl	111f8 <strcmp@plt>
   1687c:	ldr	r3, [pc, #1692]	; 16f20 <__assert_fail@plt+0x59bc>
   16880:	cmp	r0, #0
   16884:	moveq	r6, r3
   16888:	ldr	r7, [r9]
   1688c:	ldr	r3, [r8, #36]	; 0x24
   16890:	cmp	r7, r3
   16894:	bne	168bc <__assert_fail@plt+0x5358>
   16898:	lsl	r7, r7, #1
   1689c:	ldr	r0, [r8, #12]
   168a0:	add	r7, r7, #1
   168a4:	lsl	r1, r7, #2
   168a8:	bl	20f18 <__assert_fail@plt+0xf9b4>
   168ac:	cmp	r0, #0
   168b0:	beq	16f0c <__assert_fail@plt+0x59a8>
   168b4:	str	r0, [r8, #12]
   168b8:	str	r7, [r9]
   168bc:	ldr	r9, [r8, #12]
   168c0:	mov	r0, r6
   168c4:	ldr	r7, [r8, #36]	; 0x24
   168c8:	add	r3, r7, #1
   168cc:	str	r3, [r8, #36]	; 0x24
   168d0:	bl	111c8 <wctype@plt>
   168d4:	ldr	r1, [pc, #1612]	; 16f28 <__assert_fail@plt+0x59c4>
   168d8:	str	r0, [r9, r7, lsl #2]
   168dc:	mov	r0, r6
   168e0:	bl	111f8 <strcmp@plt>
   168e4:	subs	r7, r0, #0
   168e8:	bne	16960 <__assert_fail@plt+0x53fc>
   168ec:	bl	113e4 <__ctype_b_loc@plt>
   168f0:	cmp	r5, #0
   168f4:	mov	r6, r0
   168f8:	beq	16930 <__assert_fail@plt+0x53cc>
   168fc:	ldr	r2, [r6]
   16900:	lsl	r3, r7, #1
   16904:	ldrh	r3, [r2, r3]
   16908:	tst	r3, #8
   1690c:	beq	1691c <__assert_fail@plt+0x53b8>
   16910:	ldrb	r1, [r5, r7]
   16914:	mov	r0, r4
   16918:	bl	14e04 <__assert_fail@plt+0x38a0>
   1691c:	add	r7, r7, #1
   16920:	cmp	r7, #256	; 0x100
   16924:	bne	168fc <__assert_fail@plt+0x5398>
   16928:	mov	r0, #0
   1692c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16930:	ldr	r2, [r6]
   16934:	lsl	r3, r7, #1
   16938:	ldrh	r3, [r2, r3]
   1693c:	tst	r3, #8
   16940:	beq	16950 <__assert_fail@plt+0x53ec>
   16944:	mov	r1, r7
   16948:	mov	r0, r4
   1694c:	bl	14e04 <__assert_fail@plt+0x38a0>
   16950:	add	r7, r7, #1
   16954:	cmp	r7, #256	; 0x100
   16958:	bne	16930 <__assert_fail@plt+0x53cc>
   1695c:	b	16928 <__assert_fail@plt+0x53c4>
   16960:	ldr	r1, [pc, #1476]	; 16f2c <__assert_fail@plt+0x59c8>
   16964:	mov	r0, r6
   16968:	bl	111f8 <strcmp@plt>
   1696c:	subs	r7, r0, #0
   16970:	bne	169e4 <__assert_fail@plt+0x5480>
   16974:	bl	113e4 <__ctype_b_loc@plt>
   16978:	cmp	r5, #0
   1697c:	mov	r6, r0
   16980:	beq	169b4 <__assert_fail@plt+0x5450>
   16984:	ldr	r2, [r6]
   16988:	lsl	r3, r7, #1
   1698c:	ldrh	r3, [r2, r3]
   16990:	tst	r3, #2
   16994:	beq	169a4 <__assert_fail@plt+0x5440>
   16998:	ldrb	r1, [r5, r7]
   1699c:	mov	r0, r4
   169a0:	bl	14e04 <__assert_fail@plt+0x38a0>
   169a4:	add	r7, r7, #1
   169a8:	cmp	r7, #256	; 0x100
   169ac:	bne	16984 <__assert_fail@plt+0x5420>
   169b0:	b	16928 <__assert_fail@plt+0x53c4>
   169b4:	ldr	r2, [r6]
   169b8:	lsl	r3, r7, #1
   169bc:	ldrh	r3, [r2, r3]
   169c0:	tst	r3, #2
   169c4:	beq	169d4 <__assert_fail@plt+0x5470>
   169c8:	mov	r1, r7
   169cc:	mov	r0, r4
   169d0:	bl	14e04 <__assert_fail@plt+0x38a0>
   169d4:	add	r7, r7, #1
   169d8:	cmp	r7, #256	; 0x100
   169dc:	bne	169b4 <__assert_fail@plt+0x5450>
   169e0:	b	16928 <__assert_fail@plt+0x53c4>
   169e4:	ldr	r1, [pc, #1336]	; 16f24 <__assert_fail@plt+0x59c0>
   169e8:	mov	r0, r6
   169ec:	bl	111f8 <strcmp@plt>
   169f0:	subs	r7, r0, #0
   169f4:	bne	16a68 <__assert_fail@plt+0x5504>
   169f8:	bl	113e4 <__ctype_b_loc@plt>
   169fc:	cmp	r5, #0
   16a00:	mov	r6, r0
   16a04:	beq	16a38 <__assert_fail@plt+0x54d4>
   16a08:	ldr	r2, [r6]
   16a0c:	lsl	r3, r7, #1
   16a10:	ldrh	r3, [r2, r3]
   16a14:	tst	r3, #512	; 0x200
   16a18:	beq	16a28 <__assert_fail@plt+0x54c4>
   16a1c:	ldrb	r1, [r5, r7]
   16a20:	mov	r0, r4
   16a24:	bl	14e04 <__assert_fail@plt+0x38a0>
   16a28:	add	r7, r7, #1
   16a2c:	cmp	r7, #256	; 0x100
   16a30:	bne	16a08 <__assert_fail@plt+0x54a4>
   16a34:	b	16928 <__assert_fail@plt+0x53c4>
   16a38:	ldr	r2, [r6]
   16a3c:	lsl	r3, r7, #1
   16a40:	ldrh	r3, [r2, r3]
   16a44:	tst	r3, #512	; 0x200
   16a48:	beq	16a58 <__assert_fail@plt+0x54f4>
   16a4c:	mov	r1, r7
   16a50:	mov	r0, r4
   16a54:	bl	14e04 <__assert_fail@plt+0x38a0>
   16a58:	add	r7, r7, #1
   16a5c:	cmp	r7, #256	; 0x100
   16a60:	bne	16a38 <__assert_fail@plt+0x54d4>
   16a64:	b	16928 <__assert_fail@plt+0x53c4>
   16a68:	ldr	r1, [pc, #1216]	; 16f30 <__assert_fail@plt+0x59cc>
   16a6c:	mov	r0, r6
   16a70:	bl	111f8 <strcmp@plt>
   16a74:	subs	r7, r0, #0
   16a78:	bne	16aec <__assert_fail@plt+0x5588>
   16a7c:	bl	113e4 <__ctype_b_loc@plt>
   16a80:	cmp	r5, #0
   16a84:	mov	r6, r0
   16a88:	beq	16abc <__assert_fail@plt+0x5558>
   16a8c:	ldr	r2, [r6]
   16a90:	lsl	r3, r7, #1
   16a94:	ldrh	r3, [r2, r3]
   16a98:	tst	r3, #8192	; 0x2000
   16a9c:	beq	16aac <__assert_fail@plt+0x5548>
   16aa0:	ldrb	r1, [r5, r7]
   16aa4:	mov	r0, r4
   16aa8:	bl	14e04 <__assert_fail@plt+0x38a0>
   16aac:	add	r7, r7, #1
   16ab0:	cmp	r7, #256	; 0x100
   16ab4:	bne	16a8c <__assert_fail@plt+0x5528>
   16ab8:	b	16928 <__assert_fail@plt+0x53c4>
   16abc:	ldr	r2, [r6]
   16ac0:	lsl	r3, r7, #1
   16ac4:	ldrh	r3, [r2, r3]
   16ac8:	tst	r3, #8192	; 0x2000
   16acc:	beq	16adc <__assert_fail@plt+0x5578>
   16ad0:	mov	r1, r7
   16ad4:	mov	r0, r4
   16ad8:	bl	14e04 <__assert_fail@plt+0x38a0>
   16adc:	add	r7, r7, #1
   16ae0:	cmp	r7, #256	; 0x100
   16ae4:	bne	16abc <__assert_fail@plt+0x5558>
   16ae8:	b	16928 <__assert_fail@plt+0x53c4>
   16aec:	ldr	r1, [pc, #1068]	; 16f20 <__assert_fail@plt+0x59bc>
   16af0:	mov	r0, r6
   16af4:	bl	111f8 <strcmp@plt>
   16af8:	subs	r7, r0, #0
   16afc:	bne	16b70 <__assert_fail@plt+0x560c>
   16b00:	bl	113e4 <__ctype_b_loc@plt>
   16b04:	cmp	r5, #0
   16b08:	mov	r6, r0
   16b0c:	beq	16b40 <__assert_fail@plt+0x55dc>
   16b10:	ldr	r2, [r6]
   16b14:	lsl	r3, r7, #1
   16b18:	ldrh	r3, [r2, r3]
   16b1c:	tst	r3, #1024	; 0x400
   16b20:	beq	16b30 <__assert_fail@plt+0x55cc>
   16b24:	ldrb	r1, [r5, r7]
   16b28:	mov	r0, r4
   16b2c:	bl	14e04 <__assert_fail@plt+0x38a0>
   16b30:	add	r7, r7, #1
   16b34:	cmp	r7, #256	; 0x100
   16b38:	bne	16b10 <__assert_fail@plt+0x55ac>
   16b3c:	b	16928 <__assert_fail@plt+0x53c4>
   16b40:	ldr	r2, [r6]
   16b44:	lsl	r3, r7, #1
   16b48:	ldrh	r3, [r2, r3]
   16b4c:	tst	r3, #1024	; 0x400
   16b50:	beq	16b60 <__assert_fail@plt+0x55fc>
   16b54:	mov	r1, r7
   16b58:	mov	r0, r4
   16b5c:	bl	14e04 <__assert_fail@plt+0x38a0>
   16b60:	add	r7, r7, #1
   16b64:	cmp	r7, #256	; 0x100
   16b68:	bne	16b40 <__assert_fail@plt+0x55dc>
   16b6c:	b	16928 <__assert_fail@plt+0x53c4>
   16b70:	ldr	r1, [pc, #956]	; 16f34 <__assert_fail@plt+0x59d0>
   16b74:	mov	r0, r6
   16b78:	bl	111f8 <strcmp@plt>
   16b7c:	subs	r7, r0, #0
   16b80:	bne	16bf4 <__assert_fail@plt+0x5690>
   16b84:	bl	113e4 <__ctype_b_loc@plt>
   16b88:	cmp	r5, #0
   16b8c:	mov	r6, r0
   16b90:	beq	16bc4 <__assert_fail@plt+0x5660>
   16b94:	ldr	r2, [r6]
   16b98:	lsl	r3, r7, #1
   16b9c:	ldrh	r3, [r2, r3]
   16ba0:	tst	r3, #2048	; 0x800
   16ba4:	beq	16bb4 <__assert_fail@plt+0x5650>
   16ba8:	ldrb	r1, [r5, r7]
   16bac:	mov	r0, r4
   16bb0:	bl	14e04 <__assert_fail@plt+0x38a0>
   16bb4:	add	r7, r7, #1
   16bb8:	cmp	r7, #256	; 0x100
   16bbc:	bne	16b94 <__assert_fail@plt+0x5630>
   16bc0:	b	16928 <__assert_fail@plt+0x53c4>
   16bc4:	ldr	r2, [r6]
   16bc8:	lsl	r3, r7, #1
   16bcc:	ldrh	r3, [r2, r3]
   16bd0:	tst	r3, #2048	; 0x800
   16bd4:	beq	16be4 <__assert_fail@plt+0x5680>
   16bd8:	mov	r1, r7
   16bdc:	mov	r0, r4
   16be0:	bl	14e04 <__assert_fail@plt+0x38a0>
   16be4:	add	r7, r7, #1
   16be8:	cmp	r7, #256	; 0x100
   16bec:	bne	16bc4 <__assert_fail@plt+0x5660>
   16bf0:	b	16928 <__assert_fail@plt+0x53c4>
   16bf4:	ldr	r1, [pc, #828]	; 16f38 <__assert_fail@plt+0x59d4>
   16bf8:	mov	r0, r6
   16bfc:	bl	111f8 <strcmp@plt>
   16c00:	subs	r7, r0, #0
   16c04:	bne	16c78 <__assert_fail@plt+0x5714>
   16c08:	bl	113e4 <__ctype_b_loc@plt>
   16c0c:	cmp	r5, #0
   16c10:	mov	r6, r0
   16c14:	beq	16c48 <__assert_fail@plt+0x56e4>
   16c18:	ldr	r2, [r6]
   16c1c:	lsl	r3, r7, #1
   16c20:	ldrh	r3, [r2, r3]
   16c24:	tst	r3, #16384	; 0x4000
   16c28:	beq	16c38 <__assert_fail@plt+0x56d4>
   16c2c:	ldrb	r1, [r5, r7]
   16c30:	mov	r0, r4
   16c34:	bl	14e04 <__assert_fail@plt+0x38a0>
   16c38:	add	r7, r7, #1
   16c3c:	cmp	r7, #256	; 0x100
   16c40:	bne	16c18 <__assert_fail@plt+0x56b4>
   16c44:	b	16928 <__assert_fail@plt+0x53c4>
   16c48:	ldr	r2, [r6]
   16c4c:	lsl	r3, r7, #1
   16c50:	ldrh	r3, [r2, r3]
   16c54:	tst	r3, #16384	; 0x4000
   16c58:	beq	16c68 <__assert_fail@plt+0x5704>
   16c5c:	mov	r1, r7
   16c60:	mov	r0, r4
   16c64:	bl	14e04 <__assert_fail@plt+0x38a0>
   16c68:	add	r7, r7, #1
   16c6c:	cmp	r7, #256	; 0x100
   16c70:	bne	16c48 <__assert_fail@plt+0x56e4>
   16c74:	b	16928 <__assert_fail@plt+0x53c4>
   16c78:	ldr	r1, [pc, #668]	; 16f1c <__assert_fail@plt+0x59b8>
   16c7c:	mov	r0, r6
   16c80:	bl	111f8 <strcmp@plt>
   16c84:	subs	r7, r0, #0
   16c88:	bne	16cfc <__assert_fail@plt+0x5798>
   16c8c:	bl	113e4 <__ctype_b_loc@plt>
   16c90:	cmp	r5, #0
   16c94:	mov	r6, r0
   16c98:	beq	16ccc <__assert_fail@plt+0x5768>
   16c9c:	ldr	r2, [r6]
   16ca0:	lsl	r3, r7, #1
   16ca4:	ldrh	r3, [r2, r3]
   16ca8:	tst	r3, #256	; 0x100
   16cac:	beq	16cbc <__assert_fail@plt+0x5758>
   16cb0:	ldrb	r1, [r5, r7]
   16cb4:	mov	r0, r4
   16cb8:	bl	14e04 <__assert_fail@plt+0x38a0>
   16cbc:	add	r7, r7, #1
   16cc0:	cmp	r7, #256	; 0x100
   16cc4:	bne	16c9c <__assert_fail@plt+0x5738>
   16cc8:	b	16928 <__assert_fail@plt+0x53c4>
   16ccc:	ldr	r2, [r6]
   16cd0:	lsl	r3, r7, #1
   16cd4:	ldrh	r3, [r2, r3]
   16cd8:	tst	r3, #256	; 0x100
   16cdc:	beq	16cec <__assert_fail@plt+0x5788>
   16ce0:	mov	r1, r7
   16ce4:	mov	r0, r4
   16ce8:	bl	14e04 <__assert_fail@plt+0x38a0>
   16cec:	add	r7, r7, #1
   16cf0:	cmp	r7, #256	; 0x100
   16cf4:	bne	16ccc <__assert_fail@plt+0x5768>
   16cf8:	b	16928 <__assert_fail@plt+0x53c4>
   16cfc:	ldr	r1, [pc, #568]	; 16f3c <__assert_fail@plt+0x59d8>
   16d00:	mov	r0, r6
   16d04:	bl	111f8 <strcmp@plt>
   16d08:	subs	r7, r0, #0
   16d0c:	bne	16d80 <__assert_fail@plt+0x581c>
   16d10:	bl	113e4 <__ctype_b_loc@plt>
   16d14:	cmp	r5, #0
   16d18:	mov	r6, r0
   16d1c:	beq	16d50 <__assert_fail@plt+0x57ec>
   16d20:	ldr	r2, [r6]
   16d24:	lsl	r3, r7, #1
   16d28:	ldrh	r3, [r2, r3]
   16d2c:	tst	r3, #1
   16d30:	beq	16d40 <__assert_fail@plt+0x57dc>
   16d34:	ldrb	r1, [r5, r7]
   16d38:	mov	r0, r4
   16d3c:	bl	14e04 <__assert_fail@plt+0x38a0>
   16d40:	add	r7, r7, #1
   16d44:	cmp	r7, #256	; 0x100
   16d48:	bne	16d20 <__assert_fail@plt+0x57bc>
   16d4c:	b	16928 <__assert_fail@plt+0x53c4>
   16d50:	ldr	r2, [r6]
   16d54:	lsl	r3, r7, #1
   16d58:	ldrh	r3, [r2, r3]
   16d5c:	tst	r3, #1
   16d60:	beq	16d70 <__assert_fail@plt+0x580c>
   16d64:	mov	r1, r7
   16d68:	mov	r0, r4
   16d6c:	bl	14e04 <__assert_fail@plt+0x38a0>
   16d70:	add	r7, r7, #1
   16d74:	cmp	r7, #256	; 0x100
   16d78:	bne	16d50 <__assert_fail@plt+0x57ec>
   16d7c:	b	16928 <__assert_fail@plt+0x53c4>
   16d80:	ldr	r1, [pc, #440]	; 16f40 <__assert_fail@plt+0x59dc>
   16d84:	mov	r0, r6
   16d88:	bl	111f8 <strcmp@plt>
   16d8c:	subs	r7, r0, #0
   16d90:	bne	16e04 <__assert_fail@plt+0x58a0>
   16d94:	bl	113e4 <__ctype_b_loc@plt>
   16d98:	cmp	r5, #0
   16d9c:	mov	r6, r0
   16da0:	beq	16dd4 <__assert_fail@plt+0x5870>
   16da4:	ldr	r2, [r6]
   16da8:	lsl	r3, r7, #1
   16dac:	ldrsh	r3, [r2, r3]
   16db0:	cmp	r3, #0
   16db4:	bge	16dc4 <__assert_fail@plt+0x5860>
   16db8:	ldrb	r1, [r5, r7]
   16dbc:	mov	r0, r4
   16dc0:	bl	14e04 <__assert_fail@plt+0x38a0>
   16dc4:	add	r7, r7, #1
   16dc8:	cmp	r7, #256	; 0x100
   16dcc:	bne	16da4 <__assert_fail@plt+0x5840>
   16dd0:	b	16928 <__assert_fail@plt+0x53c4>
   16dd4:	ldr	r2, [r6]
   16dd8:	lsl	r3, r7, #1
   16ddc:	ldrsh	r3, [r2, r3]
   16de0:	cmp	r3, #0
   16de4:	bge	16df4 <__assert_fail@plt+0x5890>
   16de8:	mov	r1, r7
   16dec:	mov	r0, r4
   16df0:	bl	14e04 <__assert_fail@plt+0x38a0>
   16df4:	add	r7, r7, #1
   16df8:	cmp	r7, #256	; 0x100
   16dfc:	bne	16dd4 <__assert_fail@plt+0x5870>
   16e00:	b	16928 <__assert_fail@plt+0x53c4>
   16e04:	ldr	r1, [pc, #312]	; 16f44 <__assert_fail@plt+0x59e0>
   16e08:	mov	r0, r6
   16e0c:	bl	111f8 <strcmp@plt>
   16e10:	subs	r7, r0, #0
   16e14:	bne	16e88 <__assert_fail@plt+0x5924>
   16e18:	bl	113e4 <__ctype_b_loc@plt>
   16e1c:	cmp	r5, #0
   16e20:	mov	r6, r0
   16e24:	beq	16e58 <__assert_fail@plt+0x58f4>
   16e28:	ldr	r2, [r6]
   16e2c:	lsl	r3, r7, #1
   16e30:	ldrh	r3, [r2, r3]
   16e34:	tst	r3, #4
   16e38:	beq	16e48 <__assert_fail@plt+0x58e4>
   16e3c:	ldrb	r1, [r5, r7]
   16e40:	mov	r0, r4
   16e44:	bl	14e04 <__assert_fail@plt+0x38a0>
   16e48:	add	r7, r7, #1
   16e4c:	cmp	r7, #256	; 0x100
   16e50:	bne	16e28 <__assert_fail@plt+0x58c4>
   16e54:	b	16928 <__assert_fail@plt+0x53c4>
   16e58:	ldr	r2, [r6]
   16e5c:	lsl	r3, r7, #1
   16e60:	ldrh	r3, [r2, r3]
   16e64:	tst	r3, #4
   16e68:	beq	16e78 <__assert_fail@plt+0x5914>
   16e6c:	mov	r1, r7
   16e70:	mov	r0, r4
   16e74:	bl	14e04 <__assert_fail@plt+0x38a0>
   16e78:	add	r7, r7, #1
   16e7c:	cmp	r7, #256	; 0x100
   16e80:	bne	16e58 <__assert_fail@plt+0x58f4>
   16e84:	b	16928 <__assert_fail@plt+0x53c4>
   16e88:	mov	r0, r6
   16e8c:	ldr	r1, [pc, #180]	; 16f48 <__assert_fail@plt+0x59e4>
   16e90:	bl	111f8 <strcmp@plt>
   16e94:	subs	r6, r0, #0
   16e98:	bne	16f14 <__assert_fail@plt+0x59b0>
   16e9c:	bl	113e4 <__ctype_b_loc@plt>
   16ea0:	cmp	r5, #0
   16ea4:	mov	r7, r0
   16ea8:	beq	16edc <__assert_fail@plt+0x5978>
   16eac:	ldr	r2, [r7]
   16eb0:	lsl	r3, r6, #1
   16eb4:	ldrh	r3, [r2, r3]
   16eb8:	tst	r3, #4096	; 0x1000
   16ebc:	beq	16ecc <__assert_fail@plt+0x5968>
   16ec0:	ldrb	r1, [r5, r6]
   16ec4:	mov	r0, r4
   16ec8:	bl	14e04 <__assert_fail@plt+0x38a0>
   16ecc:	add	r6, r6, #1
   16ed0:	cmp	r6, #256	; 0x100
   16ed4:	bne	16eac <__assert_fail@plt+0x5948>
   16ed8:	b	16928 <__assert_fail@plt+0x53c4>
   16edc:	ldr	r2, [r7]
   16ee0:	lsl	r3, r6, #1
   16ee4:	ldrh	r3, [r2, r3]
   16ee8:	tst	r3, #4096	; 0x1000
   16eec:	beq	16efc <__assert_fail@plt+0x5998>
   16ef0:	mov	r1, r6
   16ef4:	mov	r0, r4
   16ef8:	bl	14e04 <__assert_fail@plt+0x38a0>
   16efc:	add	r6, r6, #1
   16f00:	cmp	r6, #256	; 0x100
   16f04:	bne	16edc <__assert_fail@plt+0x5978>
   16f08:	b	16928 <__assert_fail@plt+0x53c4>
   16f0c:	mov	r0, #12
   16f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f14:	mov	r0, #4
   16f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f1c:	andeq	r2, r2, r2, ror r5
   16f20:	andeq	r2, r2, ip, ror #10
   16f24:	andeq	r2, r2, r8, ror r5
   16f28:	andeq	r2, r2, lr, ror r5
   16f2c:	andeq	r2, r2, r4, lsl #11
   16f30:	andeq	r2, r2, sl, lsl #11
   16f34:	andeq	r2, r2, r9, lsr #11
   16f38:	muleq	r2, r0, r5
   16f3c:	muleq	r2, r6, r5
   16f40:	muleq	r2, ip, r5
   16f44:	andeq	r2, r2, r2, lsr #11
   16f48:	andeq	r2, r2, r8, lsr #11
   16f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f50:	mov	r9, #0
   16f54:	sub	sp, sp, #36	; 0x24
   16f58:	mov	r6, r0
   16f5c:	mov	fp, r1
   16f60:	mov	r0, #32
   16f64:	mov	r1, #1
   16f68:	ldr	r7, [sp, #76]	; 0x4c
   16f6c:	mov	r8, r3
   16f70:	str	r2, [sp, #12]
   16f74:	ldrb	sl, [sp, #72]	; 0x48
   16f78:	str	r9, [sp, #20]
   16f7c:	bl	20e98 <__assert_fail@plt+0xf934>
   16f80:	subs	r4, r0, #0
   16f84:	moveq	r3, #12
   16f88:	streq	r3, [r7]
   16f8c:	beq	170cc <__assert_fail@plt+0x5b68>
   16f90:	mov	r1, #1
   16f94:	mov	r0, #40	; 0x28
   16f98:	bl	20e98 <__assert_fail@plt+0xf934>
   16f9c:	subs	r5, r0, #0
   16fa0:	bne	16fb8 <__assert_fail@plt+0x5a54>
   16fa4:	mov	r0, r4
   16fa8:	bl	13648 <__assert_fail@plt+0x20e4>
   16fac:	mov	r3, #12
   16fb0:	str	r3, [r7]
   16fb4:	b	17004 <__assert_fail@plt+0x5aa0>
   16fb8:	ldrb	r3, [r5, #16]
   16fbc:	mov	r0, fp
   16fc0:	mov	r2, r5
   16fc4:	mov	r1, r4
   16fc8:	bfi	r3, sl, #0, #1
   16fcc:	strb	r3, [r5, #16]
   16fd0:	ldr	r3, [sp, #12]
   16fd4:	str	r3, [sp]
   16fd8:	add	r3, sp, #20
   16fdc:	str	r9, [sp, #4]
   16fe0:	bl	16834 <__assert_fail@plt+0x52d0>
   16fe4:	subs	fp, r0, #0
   16fe8:	subeq	r8, r8, #1
   16fec:	beq	17014 <__assert_fail@plt+0x5ab0>
   16ff0:	mov	r0, r4
   16ff4:	bl	13648 <__assert_fail@plt+0x20e4>
   16ff8:	mov	r0, r5
   16ffc:	bl	160fc <__assert_fail@plt+0x4b98>
   17000:	str	fp, [r7]
   17004:	mov	r4, #0
   17008:	b	170cc <__assert_fail@plt+0x5b68>
   1700c:	mov	r0, r4
   17010:	bl	14e04 <__assert_fail@plt+0x38a0>
   17014:	ldrb	r1, [r8, #1]!
   17018:	cmp	r1, #0
   1701c:	bne	1700c <__assert_fail@plt+0x5aa8>
   17020:	cmp	sl, #0
   17024:	beq	17030 <__assert_fail@plt+0x5acc>
   17028:	mov	r0, r4
   1702c:	bl	14e50 <__assert_fail@plt+0x38ec>
   17030:	ldr	r3, [r6, #92]	; 0x5c
   17034:	cmp	r3, #1
   17038:	ble	17048 <__assert_fail@plt+0x5ae4>
   1703c:	mov	r0, r4
   17040:	ldr	r1, [r6, #60]	; 0x3c
   17044:	bl	14e98 <__assert_fail@plt+0x3934>
   17048:	mov	r8, #0
   1704c:	mov	r3, #3
   17050:	str	r4, [sp, #24]
   17054:	mov	r2, r8
   17058:	mov	r1, r8
   1705c:	mov	r0, r6
   17060:	str	r8, [sp, #28]
   17064:	strb	r3, [sp, #28]
   17068:	add	r3, sp, #24
   1706c:	bl	15638 <__assert_fail@plt+0x40d4>
   17070:	subs	r9, r0, #0
   17074:	beq	170e8 <__assert_fail@plt+0x5b84>
   17078:	ldr	r3, [r6, #92]	; 0x5c
   1707c:	cmp	r3, #1
   17080:	ble	170d8 <__assert_fail@plt+0x5b74>
   17084:	mov	r3, #6
   17088:	mov	r2, r8
   1708c:	str	r5, [sp, #24]
   17090:	mov	r1, r8
   17094:	mov	r0, r6
   17098:	strb	r3, [sp, #28]
   1709c:	ldrb	r3, [r6, #88]	; 0x58
   170a0:	orr	r3, r3, #2
   170a4:	strb	r3, [r6, #88]	; 0x58
   170a8:	add	r3, sp, #24
   170ac:	bl	15638 <__assert_fail@plt+0x40d4>
   170b0:	subs	r2, r0, #0
   170b4:	beq	170e8 <__assert_fail@plt+0x5b84>
   170b8:	mov	r3, #10
   170bc:	mov	r1, r9
   170c0:	mov	r0, r6
   170c4:	bl	1578c <__assert_fail@plt+0x4228>
   170c8:	mov	r4, r0
   170cc:	mov	r0, r4
   170d0:	add	sp, sp, #36	; 0x24
   170d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d8:	mov	r0, r5
   170dc:	mov	r4, r9
   170e0:	bl	160fc <__assert_fail@plt+0x4b98>
   170e4:	b	170cc <__assert_fail@plt+0x5b68>
   170e8:	mov	r0, r4
   170ec:	bl	13648 <__assert_fail@plt+0x20e4>
   170f0:	mov	r0, r5
   170f4:	bl	160fc <__assert_fail@plt+0x4b98>
   170f8:	b	16fac <__assert_fail@plt+0x5a48>
   170fc:	ldr	r2, [r0, #80]	; 0x50
   17100:	cmp	r2, #1
   17104:	beq	1711c <__assert_fail@plt+0x5bb8>
   17108:	ldr	ip, [r0, #28]
   1710c:	add	r3, r1, #1
   17110:	sub	r2, r3, r1
   17114:	cmp	ip, r3
   17118:	bgt	17124 <__assert_fail@plt+0x5bc0>
   1711c:	mov	r0, r2
   17120:	bx	lr
   17124:	push	{lr}		; (str lr, [sp, #-4]!)
   17128:	ldr	lr, [r0, #8]
   1712c:	ldr	lr, [lr, r3, lsl #2]
   17130:	add	r3, r3, #1
   17134:	cmn	lr, #1
   17138:	bne	17148 <__assert_fail@plt+0x5be4>
   1713c:	cmp	ip, r3
   17140:	sub	r2, r3, r1
   17144:	bgt	17128 <__assert_fail@plt+0x5bc4>
   17148:	mov	r0, r2
   1714c:	pop	{pc}		; (ldr pc, [sp], #4)
   17150:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17154:	ldr	r9, [r0]
   17158:	add	ip, r9, r1, lsl #3
   1715c:	ldrb	r5, [ip, #4]
   17160:	cmp	r5, #7
   17164:	bne	17250 <__assert_fail@plt+0x5cec>
   17168:	ldr	r0, [r2, #4]
   1716c:	ldrb	ip, [r0, r3]
   17170:	add	r1, r0, r3
   17174:	cmp	ip, #193	; 0xc1
   17178:	bls	171a8 <__assert_fail@plt+0x5c44>
   1717c:	ldr	r0, [r2, #48]	; 0x30
   17180:	add	r2, r3, #1
   17184:	cmp	r2, r0
   17188:	bge	171a8 <__assert_fail@plt+0x5c44>
   1718c:	cmp	ip, #223	; 0xdf
   17190:	ldrb	r2, [r1, #1]
   17194:	bhi	171b4 <__assert_fail@plt+0x5c50>
   17198:	eor	r2, r2, #128	; 0x80
   1719c:	cmp	r2, #63	; 0x3f
   171a0:	movls	r4, #2
   171a4:	bls	171ac <__assert_fail@plt+0x5c48>
   171a8:	mov	r4, #0
   171ac:	mov	r0, r4
   171b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b4:	cmp	ip, #239	; 0xef
   171b8:	bhi	171fc <__assert_fail@plt+0x5c98>
   171bc:	cmp	r2, #159	; 0x9f
   171c0:	cmpls	ip, #224	; 0xe0
   171c4:	movne	r4, #3
   171c8:	beq	171a8 <__assert_fail@plt+0x5c44>
   171cc:	add	r3, r4, r3
   171d0:	cmp	r0, r3
   171d4:	blt	171a8 <__assert_fail@plt+0x5c44>
   171d8:	mov	r3, #1
   171dc:	ldrb	r2, [r1, #1]!
   171e0:	eor	r2, r2, #128	; 0x80
   171e4:	cmp	r2, #63	; 0x3f
   171e8:	bhi	171a8 <__assert_fail@plt+0x5c44>
   171ec:	add	r3, r3, #1
   171f0:	cmp	r4, r3
   171f4:	bne	171dc <__assert_fail@plt+0x5c78>
   171f8:	b	171ac <__assert_fail@plt+0x5c48>
   171fc:	cmp	ip, #247	; 0xf7
   17200:	bhi	17218 <__assert_fail@plt+0x5cb4>
   17204:	cmp	r2, #143	; 0x8f
   17208:	cmpls	ip, #240	; 0xf0
   1720c:	movne	r4, #4
   17210:	bne	171cc <__assert_fail@plt+0x5c68>
   17214:	b	171a8 <__assert_fail@plt+0x5c44>
   17218:	cmp	ip, #251	; 0xfb
   1721c:	bhi	17234 <__assert_fail@plt+0x5cd0>
   17220:	cmp	r2, #135	; 0x87
   17224:	cmpls	ip, #248	; 0xf8
   17228:	movne	r4, #5
   1722c:	bne	171cc <__assert_fail@plt+0x5c68>
   17230:	b	171a8 <__assert_fail@plt+0x5c44>
   17234:	cmp	ip, #253	; 0xfd
   17238:	bhi	171a8 <__assert_fail@plt+0x5c44>
   1723c:	cmp	r2, #131	; 0x83
   17240:	cmpls	ip, #252	; 0xfc
   17244:	beq	171a8 <__assert_fail@plt+0x5c44>
   17248:	mov	r4, #6
   1724c:	b	171cc <__assert_fail@plt+0x5c68>
   17250:	mov	r7, r1
   17254:	mov	sl, r0
   17258:	mov	r1, r3
   1725c:	mov	r0, r2
   17260:	mov	r6, r3
   17264:	mov	r8, r2
   17268:	bl	170fc <__assert_fail@plt+0x5b98>
   1726c:	cmp	r5, #5
   17270:	mov	r4, r0
   17274:	bne	172b8 <__assert_fail@plt+0x5d54>
   17278:	cmp	r0, #1
   1727c:	ble	171a8 <__assert_fail@plt+0x5c44>
   17280:	ldr	r3, [sl, #128]	; 0x80
   17284:	tst	r3, #64	; 0x40
   17288:	bne	1729c <__assert_fail@plt+0x5d38>
   1728c:	ldr	r2, [r8, #4]
   17290:	ldrb	r2, [r2, r6]
   17294:	cmp	r2, #10
   17298:	beq	171a8 <__assert_fail@plt+0x5c44>
   1729c:	tst	r3, #128	; 0x80
   172a0:	beq	171ac <__assert_fail@plt+0x5c48>
   172a4:	ldr	r3, [r8, #4]
   172a8:	ldrb	r3, [r3, r6]
   172ac:	cmp	r3, #0
   172b0:	beq	171a8 <__assert_fail@plt+0x5c44>
   172b4:	b	171ac <__assert_fail@plt+0x5c48>
   172b8:	sub	r3, r5, #6
   172bc:	cmp	r0, #1
   172c0:	clz	r3, r3
   172c4:	lsr	r3, r3, #5
   172c8:	movle	r3, #0
   172cc:	cmp	r3, #0
   172d0:	beq	171a8 <__assert_fail@plt+0x5c44>
   172d4:	ldr	r7, [r9, r7, lsl #3]
   172d8:	ldr	r2, [r7, #20]
   172dc:	ldr	r3, [r7, #32]
   172e0:	cmp	r3, #0
   172e4:	bne	172f4 <__assert_fail@plt+0x5d90>
   172e8:	ldr	r5, [r7, #36]	; 0x24
   172ec:	orrs	r5, r2, r5
   172f0:	beq	17320 <__assert_fail@plt+0x5dbc>
   172f4:	mov	r1, r6
   172f8:	mov	r0, r8
   172fc:	bl	14ec0 <__assert_fail@plt+0x395c>
   17300:	mov	r5, r0
   17304:	mov	r3, #0
   17308:	cmp	r3, r2
   1730c:	blt	17350 <__assert_fail@plt+0x5dec>
   17310:	mov	r6, #0
   17314:	ldr	r3, [r7, #36]	; 0x24
   17318:	cmp	r3, r6
   1731c:	bgt	17368 <__assert_fail@plt+0x5e04>
   17320:	ldr	r2, [r7, #32]
   17324:	mov	r3, #0
   17328:	cmp	r2, r3
   1732c:	bgt	17388 <__assert_fail@plt+0x5e24>
   17330:	mov	r3, #0
   17334:	ldrb	r2, [r7, #16]
   17338:	tst	r2, #1
   1733c:	moveq	r4, r3
   17340:	beq	171ac <__assert_fail@plt+0x5c48>
   17344:	cmp	r3, #0
   17348:	bne	171a8 <__assert_fail@plt+0x5c44>
   1734c:	b	171ac <__assert_fail@plt+0x5c48>
   17350:	ldr	r1, [r7]
   17354:	ldr	r1, [r1, r3, lsl #2]
   17358:	cmp	r1, r5
   1735c:	beq	173b0 <__assert_fail@plt+0x5e4c>
   17360:	add	r3, r3, #1
   17364:	b	17308 <__assert_fail@plt+0x5da4>
   17368:	ldr	r3, [r7, #12]
   1736c:	mov	r0, r5
   17370:	ldr	r1, [r3, r6, lsl #2]
   17374:	bl	111ec <iswctype@plt>
   17378:	cmp	r0, #0
   1737c:	bne	173b0 <__assert_fail@plt+0x5e4c>
   17380:	add	r6, r6, #1
   17384:	b	17314 <__assert_fail@plt+0x5db0>
   17388:	ldr	r1, [r7, #4]
   1738c:	ldr	r1, [r1, r3, lsl #2]
   17390:	cmp	r1, r5
   17394:	bhi	173a8 <__assert_fail@plt+0x5e44>
   17398:	ldr	r1, [r7, #8]
   1739c:	ldr	r1, [r1, r3, lsl #2]
   173a0:	cmp	r1, r5
   173a4:	bcs	173b0 <__assert_fail@plt+0x5e4c>
   173a8:	add	r3, r3, #1
   173ac:	b	17328 <__assert_fail@plt+0x5dc4>
   173b0:	mov	r3, r4
   173b4:	b	17334 <__assert_fail@plt+0x5dd0>
   173b8:	cmp	r1, #0
   173bc:	bxlt	lr
   173c0:	ldr	r3, [r0, #4]
   173c4:	cmp	r3, r1
   173c8:	subgt	r3, r3, #1
   173cc:	strgt	r3, [r0, #4]
   173d0:	bxle	lr
   173d4:	ldr	r3, [r0, #4]
   173d8:	cmp	r1, r3
   173dc:	bxge	lr
   173e0:	add	r1, r1, #1
   173e4:	ldr	r3, [r0, #8]
   173e8:	ldr	r2, [r3, r1, lsl #2]
   173ec:	add	r3, r3, r1, lsl #2
   173f0:	str	r2, [r3, #-4]
   173f4:	b	173d4 <__assert_fail@plt+0x5e70>
   173f8:	ldrb	r3, [r1, #24]
   173fc:	cmp	r3, #4
   17400:	bne	17434 <__assert_fail@plt+0x5ed0>
   17404:	ldr	r3, [r0, #132]	; 0x84
   17408:	cmp	r3, #0
   1740c:	beq	1742c <__assert_fail@plt+0x5ec8>
   17410:	ldr	r2, [r1, #20]
   17414:	ldr	r2, [r3, r2, lsl #2]
   17418:	ldr	r3, [r0, #80]	; 0x50
   1741c:	str	r2, [r1, #20]
   17420:	mov	r1, #1
   17424:	orr	r3, r3, r1, lsl r2
   17428:	str	r3, [r0, #80]	; 0x50
   1742c:	mov	r0, #0
   17430:	bx	lr
   17434:	cmp	r3, #17
   17438:	bne	1742c <__assert_fail@plt+0x5ec8>
   1743c:	ldr	r3, [r1, #4]
   17440:	cmp	r3, #0
   17444:	beq	1742c <__assert_fail@plt+0x5ec8>
   17448:	ldrb	r2, [r3, #24]
   1744c:	cmp	r2, #17
   17450:	bne	1742c <__assert_fail@plt+0x5ec8>
   17454:	ldr	r2, [r3, #20]
   17458:	ldr	r3, [r3, #4]
   1745c:	cmp	r3, #0
   17460:	str	r3, [r1, #4]
   17464:	strne	r1, [r3]
   17468:	cmp	r2, #31
   1746c:	ldr	r1, [r1, #20]
   17470:	ldr	r3, [r0, #132]	; 0x84
   17474:	ldr	r1, [r3, r1, lsl #2]
   17478:	str	r1, [r3, r2, lsl #2]
   1747c:	bgt	1742c <__assert_fail@plt+0x5ec8>
   17480:	ldr	r3, [r0, #80]	; 0x50
   17484:	mov	r1, #1
   17488:	bic	r3, r3, r1, lsl r2
   1748c:	b	17428 <__assert_fail@plt+0x5ec4>
   17490:	ldrb	r3, [r1, #24]
   17494:	ldr	r2, [r1, #4]
   17498:	cmp	r3, #11
   1749c:	streq	r1, [r2, #16]
   174a0:	beq	174c4 <__assert_fail@plt+0x5f60>
   174a4:	cmp	r3, #16
   174a8:	ldr	r3, [r1, #8]
   174ac:	beq	174cc <__assert_fail@plt+0x5f68>
   174b0:	cmp	r2, #0
   174b4:	ldrne	r0, [r1, #16]
   174b8:	strne	r0, [r2, #16]
   174bc:	cmp	r3, #0
   174c0:	bne	174d4 <__assert_fail@plt+0x5f70>
   174c4:	mov	r0, #0
   174c8:	bx	lr
   174cc:	ldr	r0, [r3, #12]
   174d0:	str	r0, [r2, #16]
   174d4:	ldr	r2, [r1, #16]
   174d8:	str	r2, [r3, #16]
   174dc:	b	174c4 <__assert_fail@plt+0x5f60>
   174e0:	push	{r4, r5, r6, lr}
   174e4:	mov	r4, r0
   174e8:	mov	r5, r1
   174ec:	mov	r6, r2
   174f0:	mov	r1, r4
   174f4:	mov	r0, r6
   174f8:	blx	r5
   174fc:	cmp	r0, #0
   17500:	popne	{r4, r5, r6, pc}
   17504:	ldr	r3, [r4, #4]
   17508:	cmp	r3, #0
   1750c:	moveq	r1, r0
   17510:	beq	17530 <__assert_fail@plt+0x5fcc>
   17514:	mov	r4, r3
   17518:	b	174f0 <__assert_fail@plt+0x5f8c>
   1751c:	ldr	r3, [r4]
   17520:	mov	r1, r4
   17524:	cmp	r3, #0
   17528:	popeq	{r4, r5, r6, pc}
   1752c:	mov	r4, r3
   17530:	ldr	r3, [r4, #8]
   17534:	cmp	r3, #0
   17538:	cmpne	r3, r1
   1753c:	beq	1751c <__assert_fail@plt+0x5fb8>
   17540:	b	17514 <__assert_fail@plt+0x5fb0>
   17544:	ldr	r3, [r1, #4]
   17548:	cmp	r3, #0
   1754c:	beq	176a0 <__assert_fail@plt+0x613c>
   17550:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17554:	ldr	r4, [r2, #4]
   17558:	cmp	r4, #0
   1755c:	beq	17684 <__assert_fail@plt+0x6120>
   17560:	mov	r6, r2
   17564:	ldr	r2, [r0, #4]
   17568:	add	r3, r3, r4
   1756c:	mov	r7, r1
   17570:	mov	r5, r0
   17574:	ldr	r4, [r0]
   17578:	add	r2, r3, r2
   1757c:	cmp	r2, r4
   17580:	ble	175a8 <__assert_fail@plt+0x6044>
   17584:	add	r4, r3, r4
   17588:	ldr	r0, [r0, #8]
   1758c:	lsl	r1, r4, #2
   17590:	bl	20f18 <__assert_fail@plt+0xf9b4>
   17594:	cmp	r0, #0
   17598:	moveq	r3, #12
   1759c:	beq	17688 <__assert_fail@plt+0x6124>
   175a0:	str	r4, [r5]
   175a4:	str	r0, [r5, #8]
   175a8:	ldr	r2, [r5, #4]
   175ac:	ldmib	r7, {r3, r4}
   175b0:	ldmib	r6, {r0, r8}
   175b4:	add	ip, r2, r3
   175b8:	sub	r3, r3, #1
   175bc:	sub	r2, r2, #1
   175c0:	add	ip, ip, r0
   175c4:	sub	r0, r0, #1
   175c8:	ldr	lr, [r8, r0, lsl #2]
   175cc:	ldr	r1, [r4, r3, lsl #2]
   175d0:	cmp	r1, lr
   175d4:	ldreq	lr, [r5, #8]
   175d8:	beq	175ec <__assert_fail@plt+0x6088>
   175dc:	blt	17614 <__assert_fail@plt+0x60b0>
   175e0:	subs	r3, r3, #1
   175e4:	b	17618 <__assert_fail@plt+0x60b4>
   175e8:	sub	r2, r2, #1
   175ec:	cmp	r2, #0
   175f0:	blt	17604 <__assert_fail@plt+0x60a0>
   175f4:	ldr	r9, [lr, r2, lsl #2]
   175f8:	cmp	r1, r9
   175fc:	blt	175e8 <__assert_fail@plt+0x6084>
   17600:	beq	1760c <__assert_fail@plt+0x60a8>
   17604:	sub	ip, ip, #1
   17608:	str	r1, [lr, ip, lsl #2]
   1760c:	subs	r3, r3, #1
   17610:	bmi	1761c <__assert_fail@plt+0x60b8>
   17614:	subs	r0, r0, #1
   17618:	bpl	175c8 <__assert_fail@plt+0x6064>
   1761c:	ldr	r1, [r5, #4]
   17620:	ldr	r2, [r7, #4]
   17624:	ldr	r0, [r6, #4]
   17628:	sub	r3, r1, #1
   1762c:	add	r2, r1, r2
   17630:	add	r2, r2, r0
   17634:	ldr	r0, [r5, #8]
   17638:	sub	lr, r2, #1
   1763c:	sub	r2, r2, ip
   17640:	add	r1, r1, r2
   17644:	cmp	r3, #0
   17648:	cmpge	r2, #0
   1764c:	str	r1, [r5, #4]
   17650:	ble	17678 <__assert_fail@plt+0x6114>
   17654:	ldr	r5, [r0, lr, lsl #2]
   17658:	add	r1, r3, r2
   1765c:	ldr	r4, [r0, r3, lsl #2]
   17660:	cmp	r5, r4
   17664:	ble	17690 <__assert_fail@plt+0x612c>
   17668:	subs	r2, r2, #1
   1766c:	sub	lr, lr, #1
   17670:	str	r5, [r0, r1, lsl #2]
   17674:	bne	17654 <__assert_fail@plt+0x60f0>
   17678:	lsl	r2, r2, #2
   1767c:	add	r1, r0, ip, lsl #2
   17680:	bl	11264 <memcpy@plt>
   17684:	mov	r3, #0
   17688:	mov	r0, r3
   1768c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17690:	subs	r3, r3, #1
   17694:	str	r4, [r0, r1, lsl #2]
   17698:	bcs	17654 <__assert_fail@plt+0x60f0>
   1769c:	b	17678 <__assert_fail@plt+0x6114>
   176a0:	mov	r0, r3
   176a4:	bx	lr
   176a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   176ac:	mov	r7, r1
   176b0:	mov	r9, r0
   176b4:	mov	r5, r1
   176b8:	mov	r4, r2
   176bc:	str	r2, [r7], #16
   176c0:	mov	r0, r7
   176c4:	ldr	r1, [r1, #8]
   176c8:	bl	1597c <__assert_fail@plt+0x4418>
   176cc:	subs	r8, r0, #0
   176d0:	moveq	r6, r8
   176d4:	beq	17704 <__assert_fail@plt+0x61a0>
   176d8:	mov	r8, #12
   176dc:	mov	r0, r8
   176e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176e4:	ldr	r3, [r5, #12]
   176e8:	ldr	r1, [r3, r6, lsl #2]
   176ec:	ldr	r3, [r9]
   176f0:	add	r3, r3, r1, lsl #3
   176f4:	ldrb	r3, [r3, #4]
   176f8:	tst	r3, #8
   176fc:	beq	17774 <__assert_fail@plt+0x6210>
   17700:	add	r6, r6, #1
   17704:	ldr	r3, [r5, #8]
   17708:	cmp	r3, r6
   1770c:	bgt	176e4 <__assert_fail@plt+0x6180>
   17710:	ldr	r7, [r9, #32]
   17714:	ldr	r3, [r9, #68]	; 0x44
   17718:	and	r4, r4, r3
   1771c:	mov	r3, #12
   17720:	mul	r4, r3, r4
   17724:	add	r6, r7, r4
   17728:	ldr	r1, [r7, r4]
   1772c:	ldr	r3, [r6, #4]
   17730:	cmp	r3, r1
   17734:	bgt	1775c <__assert_fail@plt+0x61f8>
   17738:	add	r1, r1, #1
   1773c:	ldr	r0, [r6, #8]
   17740:	lsl	r9, r1, #1
   17744:	lsl	r1, r1, #3
   17748:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1774c:	cmp	r0, #0
   17750:	beq	176d8 <__assert_fail@plt+0x6174>
   17754:	str	r9, [r6, #4]
   17758:	str	r0, [r6, #8]
   1775c:	ldr	r3, [r7, r4]
   17760:	ldr	r2, [r6, #8]
   17764:	add	r1, r3, #1
   17768:	str	r1, [r7, r4]
   1776c:	str	r5, [r2, r3, lsl #2]
   17770:	b	176dc <__assert_fail@plt+0x6178>
   17774:	mov	r0, r7
   17778:	bl	155e0 <__assert_fail@plt+0x407c>
   1777c:	cmp	r0, #0
   17780:	bne	17700 <__assert_fail@plt+0x619c>
   17784:	b	176d8 <__assert_fail@plt+0x6174>
   17788:	ldr	r3, [r1, #4]
   1778c:	cmp	r3, #0
   17790:	str	r3, [r0, #4]
   17794:	ble	177e8 <__assert_fail@plt+0x6284>
   17798:	push	{r4, r5, r6, lr}
   1779c:	mov	r4, r0
   177a0:	lsl	r0, r3, #2
   177a4:	mov	r5, r1
   177a8:	str	r3, [r4]
   177ac:	bl	20eec <__assert_fail@plt+0xf988>
   177b0:	cmp	r0, #0
   177b4:	mov	r3, r0
   177b8:	str	r0, [r4, #8]
   177bc:	bne	177d0 <__assert_fail@plt+0x626c>
   177c0:	mov	r0, #12
   177c4:	str	r3, [r4]
   177c8:	str	r3, [r4, #4]
   177cc:	pop	{r4, r5, r6, pc}
   177d0:	ldr	r2, [r5, #4]
   177d4:	ldr	r1, [r5, #8]
   177d8:	lsl	r2, r2, #2
   177dc:	bl	11264 <memcpy@plt>
   177e0:	mov	r0, #0
   177e4:	pop	{r4, r5, r6, pc}
   177e8:	mov	r3, #0
   177ec:	str	r3, [r0]
   177f0:	str	r3, [r0, #4]
   177f4:	str	r3, [r0, #8]
   177f8:	mov	r0, r3
   177fc:	bx	lr
   17800:	cmp	r1, #0
   17804:	beq	178a8 <__assert_fail@plt+0x6344>
   17808:	ldr	r3, [r1, #4]
   1780c:	cmp	r2, #0
   17810:	cmpne	r3, #0
   17814:	ble	1789c <__assert_fail@plt+0x6338>
   17818:	ldr	ip, [r2, #4]
   1781c:	cmp	ip, #0
   17820:	ble	178a4 <__assert_fail@plt+0x6340>
   17824:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17828:	mov	r7, r0
   1782c:	add	r0, r3, ip
   17830:	mov	r9, r1
   17834:	mov	r8, r2
   17838:	str	r0, [r7]
   1783c:	lsl	r0, r0, #2
   17840:	bl	20eec <__assert_fail@plt+0xf988>
   17844:	cmp	r0, #0
   17848:	mov	lr, r0
   1784c:	str	r0, [r7, #8]
   17850:	beq	17908 <__assert_fail@plt+0x63a4>
   17854:	ldr	r5, [r8, #4]
   17858:	mov	ip, #0
   1785c:	mov	r3, ip
   17860:	mov	r6, ip
   17864:	ldr	r2, [r9, #4]
   17868:	cmp	r2, r6
   1786c:	mov	r4, ip
   17870:	ble	17910 <__assert_fail@plt+0x63ac>
   17874:	ldr	sl, [r9, #8]
   17878:	cmp	r5, r3
   1787c:	add	r0, lr, ip, lsl #2
   17880:	add	r1, sl, r6, lsl #2
   17884:	bgt	178d8 <__assert_fail@plt+0x6374>
   17888:	sub	r6, r2, r6
   1788c:	lsl	r2, r6, #2
   17890:	add	r4, r4, r6
   17894:	bl	11264 <memcpy@plt>
   17898:	b	17934 <__assert_fail@plt+0x63d0>
   1789c:	cmp	r3, #0
   178a0:	ble	178a8 <__assert_fail@plt+0x6344>
   178a4:	b	17788 <__assert_fail@plt+0x6224>
   178a8:	cmp	r2, #0
   178ac:	beq	178c0 <__assert_fail@plt+0x635c>
   178b0:	ldr	r3, [r2, #4]
   178b4:	cmp	r3, #0
   178b8:	movgt	r1, r2
   178bc:	bgt	178a4 <__assert_fail@plt+0x6340>
   178c0:	mov	r3, #0
   178c4:	str	r3, [r0]
   178c8:	str	r3, [r0, #4]
   178cc:	str	r3, [r0, #8]
   178d0:	mov	r0, r3
   178d4:	bx	lr
   178d8:	ldr	r0, [r8, #8]
   178dc:	ldr	r1, [sl, r6, lsl #2]
   178e0:	ldr	r0, [r0, r3, lsl #2]
   178e4:	cmp	r1, r0
   178e8:	addgt	r3, r3, #1
   178ec:	strgt	r0, [lr, ip, lsl #2]
   178f0:	bgt	17900 <__assert_fail@plt+0x639c>
   178f4:	addeq	r3, r3, #1
   178f8:	add	r6, r6, #1
   178fc:	str	r1, [lr, ip, lsl #2]
   17900:	add	ip, ip, #1
   17904:	b	17868 <__assert_fail@plt+0x6304>
   17908:	mov	r0, #12
   1790c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17910:	cmp	r5, r3
   17914:	ble	17934 <__assert_fail@plt+0x63d0>
   17918:	ldr	r1, [r8, #8]
   1791c:	sub	r5, r5, r3
   17920:	add	r0, lr, r4, lsl #2
   17924:	lsl	r2, r5, #2
   17928:	add	r4, r4, r5
   1792c:	add	r1, r1, r3, lsl #2
   17930:	bl	11264 <memcpy@plt>
   17934:	mov	r0, #0
   17938:	str	r4, [r7, #4]
   1793c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17944:	mov	ip, #0
   17948:	sub	sp, sp, #20
   1794c:	ldr	r4, [r2, #4]
   17950:	str	ip, [r0]
   17954:	cmp	r4, ip
   17958:	addne	r9, r4, r3
   1795c:	bne	1797c <__assert_fail@plt+0x6418>
   17960:	mov	r0, r4
   17964:	add	sp, sp, #20
   17968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1796c:	ldr	lr, [r2, #8]
   17970:	ldr	lr, [lr, ip, lsl #2]
   17974:	add	ip, ip, #1
   17978:	add	r9, r9, lr
   1797c:	cmp	r4, ip
   17980:	bgt	1796c <__assert_fail@plt+0x6408>
   17984:	mov	r5, r3
   17988:	ldr	r3, [r1, #68]	; 0x44
   1798c:	mov	r6, r2
   17990:	mov	r8, r1
   17994:	mov	r7, #0
   17998:	str	r0, [sp, #8]
   1799c:	and	r2, r9, r3
   179a0:	mov	r3, #12
   179a4:	mul	r3, r3, r2
   179a8:	ldr	r2, [r1, #32]
   179ac:	ldr	fp, [r2, r3]
   179b0:	add	sl, r2, r3
   179b4:	cmp	fp, r7
   179b8:	bgt	17a04 <__assert_fail@plt+0x64a0>
   179bc:	mov	r1, #1
   179c0:	mov	r0, #56	; 0x38
   179c4:	bl	20e98 <__assert_fail@plt+0xf934>
   179c8:	subs	r4, r0, #0
   179cc:	beq	179f0 <__assert_fail@plt+0x648c>
   179d0:	add	sl, r4, #4
   179d4:	mov	r1, r6
   179d8:	mov	r0, sl
   179dc:	bl	17788 <__assert_fail@plt+0x6224>
   179e0:	subs	r3, r0, #0
   179e4:	beq	17a44 <__assert_fail@plt+0x64e0>
   179e8:	mov	r0, r4
   179ec:	bl	13648 <__assert_fail@plt+0x20e4>
   179f0:	ldr	r2, [sp, #8]
   179f4:	mov	r3, #12
   179f8:	mov	r4, #0
   179fc:	str	r3, [r2]
   17a00:	b	17960 <__assert_fail@plt+0x63fc>
   17a04:	ldr	r3, [sl, #8]
   17a08:	ldr	r4, [r3, r7, lsl #2]
   17a0c:	ldr	r3, [r4]
   17a10:	cmp	r3, r9
   17a14:	bne	17a3c <__assert_fail@plt+0x64d8>
   17a18:	ldrb	r3, [r4, #52]	; 0x34
   17a1c:	and	r3, r3, #15
   17a20:	cmp	r3, r5
   17a24:	bne	17a3c <__assert_fail@plt+0x64d8>
   17a28:	mov	r1, r6
   17a2c:	ldr	r0, [r4, #40]	; 0x28
   17a30:	bl	14f2c <__assert_fail@plt+0x39c8>
   17a34:	cmp	r0, #0
   17a38:	bne	17960 <__assert_fail@plt+0x63fc>
   17a3c:	add	r7, r7, #1
   17a40:	b	179b4 <__assert_fail@plt+0x6450>
   17a44:	ldrb	r2, [r4, #52]	; 0x34
   17a48:	mov	fp, r3
   17a4c:	str	sl, [r4, #40]	; 0x28
   17a50:	bfi	r2, r5, #0, #4
   17a54:	strb	r2, [r4, #52]	; 0x34
   17a58:	and	r2, r5, #4
   17a5c:	str	r2, [sp]
   17a60:	and	r2, r5, #2
   17a64:	and	r5, r5, #1
   17a68:	str	r2, [sp, #4]
   17a6c:	ldr	r1, [r6, #4]
   17a70:	cmp	fp, r1
   17a74:	blt	17a94 <__assert_fail@plt+0x6530>
   17a78:	mov	r2, r9
   17a7c:	mov	r1, r4
   17a80:	mov	r0, r8
   17a84:	bl	176a8 <__assert_fail@plt+0x6144>
   17a88:	cmp	r0, #0
   17a8c:	beq	17960 <__assert_fail@plt+0x63fc>
   17a90:	b	17b20 <__assert_fail@plt+0x65bc>
   17a94:	ldr	r1, [r6, #8]
   17a98:	ldr	r0, [r8]
   17a9c:	ldr	r1, [r1, fp, lsl #2]
   17aa0:	add	r0, r0, r1, lsl #3
   17aa4:	ldr	r7, [r0, #4]
   17aa8:	ldrb	ip, [r0, #4]
   17aac:	ubfx	r7, r7, #8, #10
   17ab0:	cmp	ip, #1
   17ab4:	cmpeq	r7, #0
   17ab8:	beq	17bac <__assert_fail@plt+0x6648>
   17abc:	ldrb	r1, [r4, #52]	; 0x34
   17ac0:	cmp	ip, #2
   17ac4:	ldrb	r0, [r0, #6]
   17ac8:	ubfx	lr, r1, #5, #1
   17acc:	ubfx	r0, r0, #4, #1
   17ad0:	orr	r0, lr, r0
   17ad4:	bfi	r1, r0, #5, #1
   17ad8:	strb	r1, [r4, #52]	; 0x34
   17adc:	uxtbeq	r1, r1
   17ae0:	orreq	r1, r1, #16
   17ae4:	beq	17af8 <__assert_fail@plt+0x6594>
   17ae8:	cmp	ip, #4
   17aec:	bne	17afc <__assert_fail@plt+0x6598>
   17af0:	ldrb	r1, [r4, #52]	; 0x34
   17af4:	orr	r1, r1, #64	; 0x40
   17af8:	strb	r1, [r4, #52]	; 0x34
   17afc:	cmp	r7, #0
   17b00:	beq	17bac <__assert_fail@plt+0x6648>
   17b04:	ldr	r1, [r4, #40]	; 0x28
   17b08:	cmp	sl, r1
   17b0c:	bne	17b4c <__assert_fail@plt+0x65e8>
   17b10:	mov	r0, #12
   17b14:	bl	20eec <__assert_fail@plt+0xf988>
   17b18:	subs	r3, r0, #0
   17b1c:	bne	17b2c <__assert_fail@plt+0x65c8>
   17b20:	mov	r0, r4
   17b24:	bl	1638c <__assert_fail@plt+0x4e28>
   17b28:	b	179f0 <__assert_fail@plt+0x648c>
   17b2c:	mov	r1, r6
   17b30:	str	r3, [r4, #40]	; 0x28
   17b34:	bl	17788 <__assert_fail@plt+0x6224>
   17b38:	subs	r3, r0, #0
   17b3c:	bne	17b20 <__assert_fail@plt+0x65bc>
   17b40:	ldrb	r1, [r4, #52]	; 0x34
   17b44:	orr	r1, r1, #128	; 0x80
   17b48:	strb	r1, [r4, #52]	; 0x34
   17b4c:	tst	r7, #1
   17b50:	beq	17b5c <__assert_fail@plt+0x65f8>
   17b54:	cmp	r5, #0
   17b58:	beq	17b94 <__assert_fail@plt+0x6630>
   17b5c:	tst	r7, #2
   17b60:	beq	17b6c <__assert_fail@plt+0x6608>
   17b64:	cmp	r5, #0
   17b68:	bne	17b94 <__assert_fail@plt+0x6630>
   17b6c:	tst	r7, #16
   17b70:	beq	17b80 <__assert_fail@plt+0x661c>
   17b74:	ldr	r2, [sp, #4]
   17b78:	cmp	r2, #0
   17b7c:	beq	17b94 <__assert_fail@plt+0x6630>
   17b80:	tst	r7, #64	; 0x40
   17b84:	beq	17bac <__assert_fail@plt+0x6648>
   17b88:	ldr	r2, [sp]
   17b8c:	cmp	r2, #0
   17b90:	bne	17bac <__assert_fail@plt+0x6648>
   17b94:	sub	r1, fp, r3
   17b98:	mov	r0, sl
   17b9c:	str	r3, [sp, #12]
   17ba0:	bl	173b8 <__assert_fail@plt+0x5e54>
   17ba4:	ldr	r3, [sp, #12]
   17ba8:	add	r3, r3, #1
   17bac:	add	fp, fp, #1
   17bb0:	b	17a6c <__assert_fail@plt+0x6508>
   17bb4:	ldrb	r3, [r1, #24]
   17bb8:	cmp	r3, #16
   17bbc:	bne	17bdc <__assert_fail@plt+0x6678>
   17bc0:	ldr	r3, [r1, #4]
   17bc4:	mov	r0, #0
   17bc8:	ldr	r2, [r3, #12]
   17bcc:	ldr	r3, [r3, #28]
   17bd0:	str	r2, [r1, #12]
   17bd4:	str	r3, [r1, #28]
   17bd8:	bx	lr
   17bdc:	push	{r4, r5, r6, lr}
   17be0:	mov	r4, r1
   17be4:	add	r3, r1, #20
   17be8:	mov	r5, r0
   17bec:	ldm	r3, {r1, r2}
   17bf0:	str	r4, [r4, #12]
   17bf4:	bl	16174 <__assert_fail@plt+0x4c10>
   17bf8:	cmn	r0, #1
   17bfc:	str	r0, [r4, #28]
   17c00:	beq	17c30 <__assert_fail@plt+0x66cc>
   17c04:	ldrb	r3, [r4, #24]
   17c08:	cmp	r3, #12
   17c0c:	bne	17c28 <__assert_fail@plt+0x66c4>
   17c10:	ldr	r3, [r5]
   17c14:	ldr	r2, [r4, #20]
   17c18:	add	r0, r3, r0, lsl #3
   17c1c:	ldr	r3, [r0, #4]
   17c20:	bfi	r3, r2, #8, #10
   17c24:	str	r3, [r0, #4]
   17c28:	mov	r0, #0
   17c2c:	pop	{r4, r5, r6, pc}
   17c30:	mov	r0, #12
   17c34:	pop	{r4, r5, r6, pc}
   17c38:	ldr	r3, [r0]
   17c3c:	push	{r4, r5, r6, r7, r8, lr}
   17c40:	mov	r4, r0
   17c44:	cmp	r3, #0
   17c48:	movne	r5, #0
   17c4c:	bne	17cdc <__assert_fail@plt+0x6778>
   17c50:	ldr	r0, [r4, #12]
   17c54:	mov	r5, #0
   17c58:	mov	r6, #12
   17c5c:	bl	13648 <__assert_fail@plt+0x20e4>
   17c60:	ldr	r3, [r4, #8]
   17c64:	cmp	r3, r5
   17c68:	bhi	17cec <__assert_fail@plt+0x6788>
   17c6c:	ldr	r0, [r4, #20]
   17c70:	bl	13648 <__assert_fail@plt+0x20e4>
   17c74:	ldr	r0, [r4, #24]
   17c78:	bl	13648 <__assert_fail@plt+0x20e4>
   17c7c:	ldr	r0, [r4, #28]
   17c80:	bl	13648 <__assert_fail@plt+0x20e4>
   17c84:	ldr	r0, [r4]
   17c88:	bl	13648 <__assert_fail@plt+0x20e4>
   17c8c:	ldr	r3, [r4, #32]
   17c90:	cmp	r3, #0
   17c94:	movne	r5, #0
   17c98:	movne	r8, #12
   17c9c:	bne	17d5c <__assert_fail@plt+0x67f8>
   17ca0:	ldr	r0, [r4, #32]
   17ca4:	bl	13648 <__assert_fail@plt+0x20e4>
   17ca8:	ldr	r3, [pc, #216]	; 17d88 <__assert_fail@plt+0x6824>
   17cac:	ldr	r0, [r4, #60]	; 0x3c
   17cb0:	cmp	r0, r3
   17cb4:	bne	17d80 <__assert_fail@plt+0x681c>
   17cb8:	ldr	r0, [r4, #132]	; 0x84
   17cbc:	bl	13648 <__assert_fail@plt+0x20e4>
   17cc0:	mov	r0, r4
   17cc4:	pop	{r4, r5, r6, r7, r8, lr}
   17cc8:	b	13648 <__assert_fail@plt+0x20e4>
   17ccc:	ldr	r0, [r4]
   17cd0:	add	r0, r0, r5, lsl #3
   17cd4:	add	r5, r5, #1
   17cd8:	bl	16130 <__assert_fail@plt+0x4bcc>
   17cdc:	ldr	r3, [r4, #8]
   17ce0:	cmp	r3, r5
   17ce4:	bhi	17ccc <__assert_fail@plt+0x6768>
   17ce8:	b	17c50 <__assert_fail@plt+0x66ec>
   17cec:	ldr	r3, [r4, #24]
   17cf0:	cmp	r3, #0
   17cf4:	beq	17d04 <__assert_fail@plt+0x67a0>
   17cf8:	mla	r3, r6, r5, r3
   17cfc:	ldr	r0, [r3, #8]
   17d00:	bl	13648 <__assert_fail@plt+0x20e4>
   17d04:	ldr	r3, [r4, #28]
   17d08:	cmp	r3, #0
   17d0c:	beq	17d1c <__assert_fail@plt+0x67b8>
   17d10:	mla	r3, r6, r5, r3
   17d14:	ldr	r0, [r3, #8]
   17d18:	bl	13648 <__assert_fail@plt+0x20e4>
   17d1c:	ldr	r3, [r4, #20]
   17d20:	cmp	r3, #0
   17d24:	beq	17d34 <__assert_fail@plt+0x67d0>
   17d28:	mla	r3, r6, r5, r3
   17d2c:	ldr	r0, [r3, #8]
   17d30:	bl	13648 <__assert_fail@plt+0x20e4>
   17d34:	add	r5, r5, #1
   17d38:	b	17c60 <__assert_fail@plt+0x66fc>
   17d3c:	mla	r6, r8, r5, r6
   17d40:	mov	r7, #0
   17d44:	ldr	r3, [r6]
   17d48:	ldr	r0, [r6, #8]
   17d4c:	cmp	r7, r3
   17d50:	blt	17d70 <__assert_fail@plt+0x680c>
   17d54:	add	r5, r5, #1
   17d58:	bl	13648 <__assert_fail@plt+0x20e4>
   17d5c:	ldr	r6, [r4, #32]
   17d60:	ldr	r3, [r4, #68]	; 0x44
   17d64:	cmp	r5, r3
   17d68:	bls	17d3c <__assert_fail@plt+0x67d8>
   17d6c:	b	17ca0 <__assert_fail@plt+0x673c>
   17d70:	ldr	r0, [r0, r7, lsl #2]
   17d74:	add	r7, r7, #1
   17d78:	bl	1638c <__assert_fail@plt+0x4e28>
   17d7c:	b	17d44 <__assert_fail@plt+0x67e0>
   17d80:	bl	13648 <__assert_fail@plt+0x20e4>
   17d84:	b	17cb8 <__assert_fail@plt+0x6754>
   17d88:	andeq	r2, r2, r8, lsl #7
   17d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d90:	mov	r9, #12
   17d94:	sub	sp, sp, #28
   17d98:	mov	r4, #0
   17d9c:	mov	r8, r0
   17da0:	mov	fp, r1
   17da4:	mov	r7, r2
   17da8:	ldr	r5, [r0, #28]
   17dac:	str	r3, [sp]
   17db0:	str	r4, [sp, #12]
   17db4:	str	r4, [sp, #16]
   17db8:	str	r4, [sp, #20]
   17dbc:	mla	r5, r9, r1, r5
   17dc0:	ldr	r3, [r5, #4]
   17dc4:	cmp	r3, r4
   17dc8:	bgt	17dec <__assert_fail@plt+0x6888>
   17dcc:	mov	r4, #0
   17dd0:	ldr	r3, [r5, #4]
   17dd4:	cmp	r3, r4
   17dd8:	bgt	17ec8 <__assert_fail@plt+0x6964>
   17ddc:	ldr	r0, [sp, #20]
   17de0:	mov	r6, #0
   17de4:	bl	13648 <__assert_fail@plt+0x20e4>
   17de8:	b	17eb4 <__assert_fail@plt+0x6950>
   17dec:	ldr	r3, [r5, #8]
   17df0:	ldr	r6, [r3, r4, lsl #2]
   17df4:	cmp	fp, r6
   17df8:	beq	17ec0 <__assert_fail@plt+0x695c>
   17dfc:	ldr	r3, [r8]
   17e00:	add	r3, r3, r6, lsl #3
   17e04:	ldrb	r3, [r3, #4]
   17e08:	tst	r3, #8
   17e0c:	beq	17ec0 <__assert_fail@plt+0x695c>
   17e10:	ldr	r3, [r8, #20]
   17e14:	mul	r6, r9, r6
   17e18:	mov	r0, r5
   17e1c:	add	r3, r3, r6
   17e20:	ldr	r1, [r3, #8]
   17e24:	ldr	r3, [r3, #4]
   17e28:	ldr	r2, [r1]
   17e2c:	cmp	r3, #1
   17e30:	ldrgt	sl, [r1, #4]
   17e34:	mvnle	sl, #0
   17e38:	mov	r1, r2
   17e3c:	str	r2, [sp, #4]
   17e40:	bl	14fa4 <__assert_fail@plt+0x3a40>
   17e44:	cmp	r0, #0
   17e48:	bne	17e64 <__assert_fail@plt+0x6900>
   17e4c:	ldr	r2, [sp, #4]
   17e50:	mov	r0, r7
   17e54:	mov	r1, r2
   17e58:	bl	14fa4 <__assert_fail@plt+0x3a40>
   17e5c:	cmp	r0, #0
   17e60:	bne	17e90 <__assert_fail@plt+0x692c>
   17e64:	cmp	sl, #0
   17e68:	ble	17ec0 <__assert_fail@plt+0x695c>
   17e6c:	mov	r1, sl
   17e70:	mov	r0, r5
   17e74:	bl	14fa4 <__assert_fail@plt+0x3a40>
   17e78:	cmp	r0, #0
   17e7c:	bne	17ec0 <__assert_fail@plt+0x695c>
   17e80:	mov	r0, r7
   17e84:	bl	14fa4 <__assert_fail@plt+0x3a40>
   17e88:	cmp	r0, #0
   17e8c:	beq	17ec0 <__assert_fail@plt+0x695c>
   17e90:	ldr	r2, [r8, #28]
   17e94:	add	r0, sp, #12
   17e98:	ldr	r1, [sp]
   17e9c:	add	r2, r2, r6
   17ea0:	bl	17544 <__assert_fail@plt+0x5fe0>
   17ea4:	subs	r6, r0, #0
   17ea8:	beq	17ec0 <__assert_fail@plt+0x695c>
   17eac:	ldr	r0, [sp, #20]
   17eb0:	bl	13648 <__assert_fail@plt+0x20e4>
   17eb4:	mov	r0, r6
   17eb8:	add	sp, sp, #28
   17ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ec0:	add	r4, r4, #1
   17ec4:	b	17dc0 <__assert_fail@plt+0x685c>
   17ec8:	ldr	r3, [r5, #8]
   17ecc:	add	r0, sp, #12
   17ed0:	ldr	r6, [r3, r4, lsl #2]
   17ed4:	mov	r1, r6
   17ed8:	bl	14fa4 <__assert_fail@plt+0x3a40>
   17edc:	cmp	r0, #0
   17ee0:	bne	17ef8 <__assert_fail@plt+0x6994>
   17ee4:	mov	r0, r7
   17ee8:	bl	14fa4 <__assert_fail@plt+0x3a40>
   17eec:	sub	r1, r0, #1
   17ef0:	mov	r0, r7
   17ef4:	bl	173b8 <__assert_fail@plt+0x5e54>
   17ef8:	add	r4, r4, #1
   17efc:	b	17dd0 <__assert_fail@plt+0x686c>
   17f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f04:	mov	r7, r0
   17f08:	sub	sp, sp, #300	; 0x12c
   17f0c:	mov	fp, r1
   17f10:	mov	r4, r2
   17f14:	ldr	r5, [r0]
   17f18:	ldr	r3, [r5, #92]	; 0x5c
   17f1c:	cmp	r3, #1
   17f20:	mov	r3, #0
   17f24:	ldreq	r6, [r0, #12]
   17f28:	movne	r6, #0
   17f2c:	str	r3, [sp, #4]
   17f30:	str	r3, [sp, #8]
   17f34:	str	r3, [sp, #12]
   17f38:	ubfxeq	r6, r6, #22, #1
   17f3c:	ldr	r2, [sp, #4]
   17f40:	ldr	r3, [fp, #8]
   17f44:	cmp	r3, r2
   17f48:	ble	18244 <__assert_fail@plt+0x6ce0>
   17f4c:	ldr	r2, [sp, #4]
   17f50:	ldr	r3, [fp, #12]
   17f54:	ldr	sl, [r3, r2, lsl #2]
   17f58:	ldr	r3, [r5]
   17f5c:	lsl	r9, sl, #3
   17f60:	add	r2, r3, r9
   17f64:	ldrb	r8, [r2, #4]
   17f68:	cmp	r8, #1
   17f6c:	bne	18058 <__assert_fail@plt+0x6af4>
   17f70:	ldrb	r0, [r3, sl, lsl #3]
   17f74:	cmp	r6, #0
   17f78:	strb	r8, [r4, r0]
   17f7c:	beq	17f88 <__assert_fail@plt+0x6a24>
   17f80:	bl	11270 <tolower@plt>
   17f84:	strb	r8, [r4, r0]
   17f88:	ldr	r3, [r7, #12]
   17f8c:	tst	r3, #4194304	; 0x400000
   17f90:	beq	1803c <__assert_fail@plt+0x6ad8>
   17f94:	ldr	r3, [r5, #92]	; 0x5c
   17f98:	cmp	r3, #1
   17f9c:	ble	1803c <__assert_fail@plt+0x6ad8>
   17fa0:	ldr	r3, [r5]
   17fa4:	add	r8, sp, #41	; 0x29
   17fa8:	ldr	r1, [pc, #668]	; 1824c <__assert_fail@plt+0x6ce8>
   17fac:	ldrb	r3, [r3, r9]
   17fb0:	strb	r3, [sp, #40]	; 0x28
   17fb4:	ldr	r3, [r5, #8]
   17fb8:	add	sl, sl, #1
   17fbc:	cmp	r3, sl
   17fc0:	bls	17fe4 <__assert_fail@plt+0x6a80>
   17fc4:	ldr	r2, [r5]
   17fc8:	add	r3, r2, sl, lsl #3
   17fcc:	ldr	r3, [r3, #4]
   17fd0:	bic	r3, r3, #-16777216	; 0xff000000
   17fd4:	bic	r3, r3, #14614528	; 0xdf0000
   17fd8:	bic	r3, r3, #65280	; 0xff00
   17fdc:	cmp	r3, r1
   17fe0:	beq	1804c <__assert_fail@plt+0x6ae8>
   17fe4:	mov	r3, #0
   17fe8:	add	r9, sp, #40	; 0x28
   17fec:	sub	r8, r8, r9
   17ff0:	mov	r1, r9
   17ff4:	mov	r2, r8
   17ff8:	add	r0, sp, #28
   17ffc:	str	r3, [sp, #32]
   18000:	str	r3, [sp, #36]	; 0x24
   18004:	add	r3, sp, #32
   18008:	bl	21278 <__assert_fail@plt+0xfd14>
   1800c:	cmp	r8, r0
   18010:	bne	1803c <__assert_fail@plt+0x6ad8>
   18014:	ldr	r0, [sp, #28]
   18018:	bl	11288 <towlower@plt>
   1801c:	mov	r1, r0
   18020:	add	r2, sp, #32
   18024:	mov	r0, r9
   18028:	bl	111e0 <wcrtomb@plt>
   1802c:	cmn	r0, #1
   18030:	ldrbne	r3, [sp, #40]	; 0x28
   18034:	movne	r2, #1
   18038:	strbne	r2, [r4, r3]
   1803c:	ldr	r3, [sp, #4]
   18040:	add	r3, r3, #1
   18044:	str	r3, [sp, #4]
   18048:	b	17f3c <__assert_fail@plt+0x69d8>
   1804c:	ldrb	r3, [r2, sl, lsl #3]
   18050:	strb	r3, [r8], #1
   18054:	b	17fb4 <__assert_fail@plt+0x6a50>
   18058:	cmp	r8, #3
   1805c:	bne	180d4 <__assert_fail@plt+0x6b70>
   18060:	mov	r8, #0
   18064:	mov	r2, #1
   18068:	ldr	r1, [r5]
   1806c:	lsl	r3, r8, #3
   18070:	mov	sl, #0
   18074:	ldr	r1, [r1, r9]
   18078:	ldr	r1, [r1, r8]
   1807c:	lsr	r0, r1, sl
   18080:	tst	r0, #1
   18084:	beq	180b4 <__assert_fail@plt+0x6b50>
   18088:	cmp	r6, #0
   1808c:	strb	r2, [r4, r3]
   18090:	beq	180b4 <__assert_fail@plt+0x6b50>
   18094:	mov	r0, r3
   18098:	str	r3, [sp, #16]
   1809c:	str	r1, [sp, #20]
   180a0:	bl	11270 <tolower@plt>
   180a4:	ldr	r3, [sp, #16]
   180a8:	mov	r2, #1
   180ac:	ldr	r1, [sp, #20]
   180b0:	strb	r2, [r4, r0]
   180b4:	add	sl, sl, #1
   180b8:	add	r3, r3, #1
   180bc:	cmp	sl, #32
   180c0:	bne	1807c <__assert_fail@plt+0x6b18>
   180c4:	add	r8, r8, #4
   180c8:	cmp	r8, #32
   180cc:	bne	18068 <__assert_fail@plt+0x6b04>
   180d0:	b	1803c <__assert_fail@plt+0x6ad8>
   180d4:	cmp	r8, #6
   180d8:	bne	18210 <__assert_fail@plt+0x6cac>
   180dc:	ldr	sl, [r3, r9]
   180e0:	ldr	r3, [r5, #92]	; 0x5c
   180e4:	cmp	r3, #1
   180e8:	ble	18208 <__assert_fail@plt+0x6ca4>
   180ec:	ldr	r3, [sl, #36]	; 0x24
   180f0:	cmp	r3, #0
   180f4:	bne	18110 <__assert_fail@plt+0x6bac>
   180f8:	ldrb	r3, [sl, #16]
   180fc:	tst	r3, #1
   18100:	bne	18110 <__assert_fail@plt+0x6bac>
   18104:	ldr	r8, [sl, #32]
   18108:	cmp	r8, #0
   1810c:	beq	181f8 <__assert_fail@plt+0x6c94>
   18110:	mov	r3, #0
   18114:	strb	r3, [sp, #32]
   18118:	ldr	r3, [sp, #8]
   1811c:	mov	r2, #1
   18120:	add	r1, sp, #32
   18124:	mov	r0, #0
   18128:	str	r3, [sp, #40]	; 0x28
   1812c:	ldr	r3, [sp, #12]
   18130:	str	r3, [sp, #44]	; 0x2c
   18134:	add	r3, sp, #40	; 0x28
   18138:	bl	21278 <__assert_fail@plt+0xfd14>
   1813c:	ldrb	r3, [sp, #32]
   18140:	cmn	r0, #2
   18144:	moveq	r2, #1
   18148:	strbeq	r2, [r4, r3]
   1814c:	add	r3, r3, #1
   18150:	uxtb	r3, r3
   18154:	cmp	r3, #0
   18158:	strb	r3, [sp, #32]
   1815c:	bne	18118 <__assert_fail@plt+0x6bb4>
   18160:	b	1803c <__assert_fail@plt+0x6ad8>
   18164:	mov	r3, #0
   18168:	add	r2, sp, #32
   1816c:	lsl	r9, r8, #2
   18170:	add	r0, sp, #40	; 0x28
   18174:	str	r3, [sp, #32]
   18178:	str	r3, [sp, #36]	; 0x24
   1817c:	ldr	r3, [sl]
   18180:	ldr	r1, [r3, r8, lsl #2]
   18184:	bl	111e0 <wcrtomb@plt>
   18188:	cmn	r0, #1
   1818c:	beq	181b0 <__assert_fail@plt+0x6c4c>
   18190:	ldrb	r0, [sp, #40]	; 0x28
   18194:	mov	r3, #1
   18198:	cmp	r6, #0
   1819c:	strb	r3, [r4, r0]
   181a0:	beq	181b0 <__assert_fail@plt+0x6c4c>
   181a4:	bl	11270 <tolower@plt>
   181a8:	mov	r3, #1
   181ac:	strb	r3, [r4, r0]
   181b0:	ldr	r3, [r7, #12]
   181b4:	tst	r3, #4194304	; 0x400000
   181b8:	beq	181f4 <__assert_fail@plt+0x6c90>
   181bc:	ldr	r3, [r5, #92]	; 0x5c
   181c0:	cmp	r3, #1
   181c4:	ble	181f4 <__assert_fail@plt+0x6c90>
   181c8:	ldr	r3, [sl]
   181cc:	ldr	r0, [r3, r9]
   181d0:	bl	11288 <towlower@plt>
   181d4:	mov	r1, r0
   181d8:	add	r2, sp, #32
   181dc:	add	r0, sp, #40	; 0x28
   181e0:	bl	111e0 <wcrtomb@plt>
   181e4:	cmn	r0, #1
   181e8:	ldrbne	r3, [sp, #40]	; 0x28
   181ec:	movne	r2, #1
   181f0:	strbne	r2, [r4, r3]
   181f4:	add	r8, r8, #1
   181f8:	ldr	r3, [sl, #20]
   181fc:	cmp	r3, r8
   18200:	bgt	18164 <__assert_fail@plt+0x6c00>
   18204:	b	1803c <__assert_fail@plt+0x6ad8>
   18208:	mov	r8, #0
   1820c:	b	181f8 <__assert_fail@plt+0x6c94>
   18210:	and	r3, r8, #253	; 0xfd
   18214:	cmp	r3, #5
   18218:	beq	18224 <__assert_fail@plt+0x6cc0>
   1821c:	cmp	r8, #2
   18220:	bne	1803c <__assert_fail@plt+0x6ad8>
   18224:	mov	r2, #256	; 0x100
   18228:	mov	r1, #1
   1822c:	mov	r0, r4
   18230:	bl	11444 <memset@plt>
   18234:	cmp	r8, #2
   18238:	ldrbeq	r3, [r7, #28]
   1823c:	orreq	r3, r3, #1
   18240:	strbeq	r3, [r7, #28]
   18244:	add	sp, sp, #300	; 0x12c
   18248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1824c:	eoreq	r0, r0, r1
   18250:	push	{r4, r5, r6, r7, r8, lr}
   18254:	subs	r4, r0, #0
   18258:	movne	r5, #0
   1825c:	movne	r7, #24
   18260:	bne	18290 <__assert_fail@plt+0x6d2c>
   18264:	mov	r0, #0
   18268:	pop	{r4, r5, r6, r7, r8, pc}
   1826c:	mul	r6, r7, r5
   18270:	add	r5, r5, #1
   18274:	add	r0, r0, r6
   18278:	ldr	r0, [r0, #20]
   1827c:	bl	13648 <__assert_fail@plt+0x20e4>
   18280:	ldr	r3, [r4, #8]
   18284:	add	r3, r3, r6
   18288:	ldr	r0, [r3, #8]
   1828c:	bl	13648 <__assert_fail@plt+0x20e4>
   18290:	ldr	r3, [r4]
   18294:	ldr	r0, [r4, #8]
   18298:	cmp	r5, r3
   1829c:	blt	1826c <__assert_fail@plt+0x6d08>
   182a0:	bl	13648 <__assert_fail@plt+0x20e4>
   182a4:	b	18264 <__assert_fail@plt+0x6d00>
   182a8:	ldr	r3, [r0]
   182ac:	push	{r4, r5, r6, lr}
   182b0:	cmp	r3, #0
   182b4:	bne	182c8 <__assert_fail@plt+0x6d64>
   182b8:	bl	1593c <__assert_fail@plt+0x43d8>
   182bc:	clz	r0, r0
   182c0:	lsr	r0, r0, #5
   182c4:	pop	{r4, r5, r6, pc}
   182c8:	ldr	r2, [r0, #4]
   182cc:	mov	r4, r0
   182d0:	mov	r5, r1
   182d4:	ldr	r0, [r0, #8]
   182d8:	cmp	r2, #0
   182dc:	streq	r1, [r0]
   182e0:	beq	18354 <__assert_fail@plt+0x6df0>
   182e4:	cmp	r3, r2
   182e8:	bne	18308 <__assert_fail@plt+0x6da4>
   182ec:	lsl	r2, r3, #1
   182f0:	lsl	r1, r3, #3
   182f4:	str	r2, [r4]
   182f8:	bl	20f18 <__assert_fail@plt+0xf9b4>
   182fc:	cmp	r0, #0
   18300:	popeq	{r4, r5, r6, pc}
   18304:	str	r0, [r4, #8]
   18308:	ldr	r2, [r4, #4]
   1830c:	ldr	r1, [r4, #8]
   18310:	ldr	r3, [r1]
   18314:	cmp	r5, r3
   18318:	lsl	r3, r2, #2
   1831c:	add	r3, r1, r3
   18320:	blt	1833c <__assert_fail@plt+0x6dd8>
   18324:	ldr	r0, [r3, #-4]
   18328:	cmp	r5, r0
   1832c:	bge	18350 <__assert_fail@plt+0x6dec>
   18330:	sub	r2, r2, #1
   18334:	str	r0, [r3], #-4
   18338:	b	18324 <__assert_fail@plt+0x6dc0>
   1833c:	mov	r0, r2
   18340:	cmp	r0, #0
   18344:	bgt	18368 <__assert_fail@plt+0x6e04>
   18348:	cmp	r2, #0
   1834c:	subge	r2, r2, r2
   18350:	str	r5, [r1, r2, lsl #2]
   18354:	ldr	r3, [r4, #4]
   18358:	mov	r0, #1
   1835c:	add	r3, r3, #1
   18360:	str	r3, [r4, #4]
   18364:	pop	{r4, r5, r6, pc}
   18368:	ldr	ip, [r3, #-4]
   1836c:	sub	r0, r0, #1
   18370:	str	ip, [r3], #-4
   18374:	b	18340 <__assert_fail@plt+0x6ddc>
   18378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1837c:	sub	sp, sp, #20
   18380:	mov	r4, r0
   18384:	mov	r7, r1
   18388:	mov	fp, r2
   1838c:	mov	r9, #12
   18390:	mov	sl, #0
   18394:	ldr	r6, [sp, #56]	; 0x38
   18398:	str	r3, [sp, #8]
   1839c:	ldr	ip, [r4]
   183a0:	ldr	r0, [r4, #20]
   183a4:	add	r1, ip, r7, lsl #3
   183a8:	ldrb	lr, [r1, #4]
   183ac:	cmp	lr, #4
   183b0:	bne	18428 <__assert_fail@plt+0x6ec4>
   183b4:	ldr	r1, [r4, #12]
   183b8:	mul	r8, r9, fp
   183bc:	mov	r2, r6
   183c0:	str	fp, [sp, #12]
   183c4:	add	r0, r0, r8
   183c8:	ldr	r5, [r1, r7, lsl #2]
   183cc:	str	sl, [r0, #4]
   183d0:	mov	r0, r4
   183d4:	mov	r1, r5
   183d8:	bl	16318 <__assert_fail@plt+0x4db4>
   183dc:	cmn	r0, #1
   183e0:	mov	fp, r0
   183e4:	ldr	r3, [sp, #12]
   183e8:	bne	183fc <__assert_fail@plt+0x6e98>
   183ec:	mov	r3, #12
   183f0:	mov	r0, r3
   183f4:	add	sp, sp, #20
   183f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183fc:	ldr	r1, [r4, #12]
   18400:	ldr	r0, [r1, r7, lsl #2]
   18404:	str	r0, [r1, r3, lsl #2]
   18408:	ldr	r0, [r4, #20]
   1840c:	mov	r1, fp
   18410:	add	r0, r0, r8
   18414:	bl	182a8 <__assert_fail@plt+0x6d44>
   18418:	cmp	r0, #0
   1841c:	beq	183ec <__assert_fail@plt+0x6e88>
   18420:	mov	r7, r5
   18424:	b	1839c <__assert_fail@plt+0x6e38>
   18428:	mul	r3, r9, r7
   1842c:	add	lr, r0, r3
   18430:	str	r3, [sp, #12]
   18434:	ldr	r3, [lr, #4]
   18438:	cmp	r3, #0
   1843c:	bne	18450 <__assert_fail@plt+0x6eec>
   18440:	ldr	r1, [r4, #12]
   18444:	ldr	r0, [r1, r7, lsl #2]
   18448:	str	r0, [r1, fp, lsl #2]
   1844c:	b	183f0 <__assert_fail@plt+0x6e8c>
   18450:	mul	r8, r9, fp
   18454:	ldr	lr, [lr, #8]
   18458:	cmp	r3, #1
   1845c:	ldrne	r1, [r4, #8]
   18460:	add	r0, r0, r8
   18464:	ldr	r5, [lr]
   18468:	str	sl, [r0, #4]
   1846c:	bne	184f4 <__assert_fail@plt+0x6f90>
   18470:	ldr	r3, [sp, #8]
   18474:	cmp	r7, fp
   18478:	sub	r3, r7, r3
   1847c:	clz	r3, r3
   18480:	lsr	r3, r3, #5
   18484:	moveq	r3, #0
   18488:	cmp	r3, #0
   1848c:	beq	184a8 <__assert_fail@plt+0x6f44>
   18490:	mov	r1, r5
   18494:	bl	182a8 <__assert_fail@plt+0x6d44>
   18498:	cmp	r0, #0
   1849c:	movne	r3, #0
   184a0:	bne	183f0 <__assert_fail@plt+0x6e8c>
   184a4:	b	183ec <__assert_fail@plt+0x6e88>
   184a8:	ldr	r3, [r1, #4]
   184ac:	ubfx	r3, r3, #8, #10
   184b0:	orr	r6, r6, r3
   184b4:	mov	r2, r6
   184b8:	mov	r1, r5
   184bc:	mov	r0, r4
   184c0:	bl	16318 <__assert_fail@plt+0x4db4>
   184c4:	cmn	r0, #1
   184c8:	mov	fp, r0
   184cc:	bne	18408 <__assert_fail@plt+0x6ea4>
   184d0:	b	183ec <__assert_fail@plt+0x6e88>
   184d4:	ldr	r2, [r4, #16]
   184d8:	ldr	r2, [r2, r1, lsl #2]
   184dc:	cmp	r2, r5
   184e0:	bne	184f4 <__assert_fail@plt+0x6f90>
   184e4:	ldr	r3, [r3, #4]
   184e8:	ubfx	r3, r3, #8, #10
   184ec:	cmp	r6, r3
   184f0:	beq	18580 <__assert_fail@plt+0x701c>
   184f4:	sub	r1, r1, #1
   184f8:	add	r3, ip, r1, lsl #3
   184fc:	cmp	r1, #0
   18500:	movle	r2, #0
   18504:	movgt	r2, #1
   18508:	ldrb	lr, [r3, #6]
   1850c:	ands	r2, r2, lr, lsr #2
   18510:	bne	184d4 <__assert_fail@plt+0x6f70>
   18514:	mov	r2, r6
   18518:	mov	r1, r5
   1851c:	mov	r0, r4
   18520:	bl	16318 <__assert_fail@plt+0x4db4>
   18524:	cmn	r0, #1
   18528:	mov	r7, r0
   1852c:	beq	183ec <__assert_fail@plt+0x6e88>
   18530:	ldr	r0, [r4, #20]
   18534:	mov	r1, r7
   18538:	add	r0, r0, r8
   1853c:	bl	182a8 <__assert_fail@plt+0x6d44>
   18540:	cmp	r0, #0
   18544:	beq	183ec <__assert_fail@plt+0x6e88>
   18548:	mov	r2, r7
   1854c:	mov	r1, r5
   18550:	str	r6, [sp]
   18554:	mov	r0, r4
   18558:	ldr	r3, [sp, #8]
   1855c:	bl	18378 <__assert_fail@plt+0x6e14>
   18560:	subs	r3, r0, #0
   18564:	bne	183f0 <__assert_fail@plt+0x6e8c>
   18568:	ldr	r2, [sp, #12]
   1856c:	ldr	r3, [r4, #20]
   18570:	add	r3, r3, r2
   18574:	ldr	r3, [r3, #8]
   18578:	ldr	r5, [r3, #4]
   1857c:	b	184b4 <__assert_fail@plt+0x6f50>
   18580:	bl	182a8 <__assert_fail@plt+0x6d44>
   18584:	cmp	r0, #0
   18588:	bne	18568 <__assert_fail@plt+0x7004>
   1858c:	b	183ec <__assert_fail@plt+0x6e88>
   18590:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18594:	mov	r6, r0
   18598:	mov	r5, r1
   1859c:	mov	r4, r2
   185a0:	mov	r8, r3
   185a4:	mov	r9, #12
   185a8:	ldr	r7, [sp, #40]	; 0x28
   185ac:	mov	r1, r4
   185b0:	mov	r0, r5
   185b4:	bl	14fa4 <__assert_fail@plt+0x3a40>
   185b8:	cmp	r0, #0
   185bc:	beq	185c8 <__assert_fail@plt+0x7064>
   185c0:	mov	r0, #0
   185c4:	b	18608 <__assert_fail@plt+0x70a4>
   185c8:	ldr	r3, [r6]
   185cc:	add	r2, r3, r4, lsl #3
   185d0:	ldrb	r2, [r2, #4]
   185d4:	cmp	r2, r7
   185d8:	bne	18610 <__assert_fail@plt+0x70ac>
   185dc:	ldr	r3, [r3, r4, lsl #3]
   185e0:	cmp	r3, r8
   185e4:	bne	18610 <__assert_fail@plt+0x70ac>
   185e8:	cmp	r7, #9
   185ec:	bne	185c0 <__assert_fail@plt+0x705c>
   185f0:	mov	r1, r4
   185f4:	mov	r0, r5
   185f8:	bl	182a8 <__assert_fail@plt+0x6d44>
   185fc:	cmp	r0, #0
   18600:	bne	185c0 <__assert_fail@plt+0x705c>
   18604:	mov	r0, #12
   18608:	add	sp, sp, #12
   1860c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18610:	mov	r1, r4
   18614:	mov	r0, r5
   18618:	bl	182a8 <__assert_fail@plt+0x6d44>
   1861c:	cmp	r0, #0
   18620:	beq	18604 <__assert_fail@plt+0x70a0>
   18624:	ldr	r3, [r6, #20]
   18628:	mul	r4, r9, r4
   1862c:	add	r3, r3, r4
   18630:	ldr	r2, [r3, #4]
   18634:	cmp	r2, #0
   18638:	beq	185c0 <__assert_fail@plt+0x705c>
   1863c:	cmp	r2, #2
   18640:	beq	18658 <__assert_fail@plt+0x70f4>
   18644:	ldr	r2, [r6, #20]
   18648:	add	r4, r2, r4
   1864c:	ldr	r3, [r4, #8]
   18650:	ldr	r4, [r3]
   18654:	b	185ac <__assert_fail@plt+0x7048>
   18658:	ldr	r2, [r3, #8]
   1865c:	mov	r1, r5
   18660:	mov	r0, r6
   18664:	mov	r3, r8
   18668:	str	r7, [sp]
   1866c:	ldr	r2, [r2, #4]
   18670:	bl	18590 <__assert_fail@plt+0x702c>
   18674:	cmp	r0, #0
   18678:	beq	18644 <__assert_fail@plt+0x70e0>
   1867c:	b	18608 <__assert_fail@plt+0x70a4>
   18680:	push	{r4, r5, r6, r7, r8, lr}
   18684:	subs	r7, r1, #0
   18688:	bne	18694 <__assert_fail@plt+0x7130>
   1868c:	mov	r5, #0
   18690:	b	18708 <__assert_fail@plt+0x71a4>
   18694:	ldr	r3, [r7, #4]
   18698:	cmp	r3, #0
   1869c:	beq	1868c <__assert_fail@plt+0x7128>
   186a0:	ldm	r0, {r1, r2}
   186a4:	mov	r4, r0
   186a8:	add	r2, r2, r3, lsl #1
   186ac:	cmp	r1, r2
   186b0:	bge	186dc <__assert_fail@plt+0x7178>
   186b4:	add	r1, r3, r1
   186b8:	ldr	r0, [r0, #8]
   186bc:	lsl	r5, r1, #1
   186c0:	lsl	r1, r1, #3
   186c4:	bl	20f18 <__assert_fail@plt+0xf9b4>
   186c8:	cmp	r0, #0
   186cc:	moveq	r5, #12
   186d0:	beq	18708 <__assert_fail@plt+0x71a4>
   186d4:	str	r5, [r4]
   186d8:	str	r0, [r4, #8]
   186dc:	ldr	r5, [r4, #4]
   186e0:	ldr	r2, [r7, #4]
   186e4:	cmp	r5, #0
   186e8:	addne	r6, r5, r2, lsl #1
   186ec:	bne	18728 <__assert_fail@plt+0x71c4>
   186f0:	ldr	r1, [r7, #8]
   186f4:	str	r2, [r4, #4]
   186f8:	ldr	r2, [r7, #4]
   186fc:	ldr	r0, [r4, #8]
   18700:	lsl	r2, r2, #2
   18704:	bl	11264 <memcpy@plt>
   18708:	mov	r0, r5
   1870c:	pop	{r4, r5, r6, r7, r8, pc}
   18710:	ldr	r3, [r4, #8]
   18714:	ldr	r1, [r7, #8]
   18718:	ldr	r0, [r3, r5, lsl #2]
   1871c:	ldr	r1, [r1, r2, lsl #2]
   18720:	cmp	r0, r1
   18724:	bne	18734 <__assert_fail@plt+0x71d0>
   18728:	sub	r2, r2, #1
   1872c:	sub	r5, r5, #1
   18730:	b	18744 <__assert_fail@plt+0x71e0>
   18734:	bge	1872c <__assert_fail@plt+0x71c8>
   18738:	sub	r6, r6, #1
   1873c:	sub	r2, r2, #1
   18740:	str	r1, [r3, r6, lsl #2]
   18744:	cmp	r2, #0
   18748:	cmpge	r5, #0
   1874c:	bge	18710 <__assert_fail@plt+0x71ac>
   18750:	cmp	r2, #0
   18754:	blt	18774 <__assert_fail@plt+0x7210>
   18758:	ldr	r0, [r4, #8]
   1875c:	add	r2, r2, #1
   18760:	sub	r6, r6, r2
   18764:	lsl	r2, r2, #2
   18768:	ldr	r1, [r7, #8]
   1876c:	add	r0, r0, r6, lsl #2
   18770:	bl	11264 <memcpy@plt>
   18774:	ldr	r1, [r4, #4]
   18778:	ldr	r2, [r7, #4]
   1877c:	add	r2, r1, r2, lsl #1
   18780:	sub	ip, r2, #1
   18784:	subs	r2, r2, r6
   18788:	beq	1868c <__assert_fail@plt+0x7128>
   1878c:	ldr	r0, [r4, #8]
   18790:	sub	r3, r1, #1
   18794:	add	r1, r1, r2
   18798:	str	r1, [r4, #4]
   1879c:	ldr	r4, [r0, ip, lsl #2]
   187a0:	add	r1, r3, r2
   187a4:	ldr	lr, [r0, r3, lsl #2]
   187a8:	cmp	r4, lr
   187ac:	ble	187c4 <__assert_fail@plt+0x7260>
   187b0:	subs	r2, r2, #1
   187b4:	sub	ip, ip, #1
   187b8:	str	r4, [r0, r1, lsl #2]
   187bc:	bne	1879c <__assert_fail@plt+0x7238>
   187c0:	b	1868c <__assert_fail@plt+0x7128>
   187c4:	subs	r3, r3, #1
   187c8:	str	lr, [r0, r1, lsl #2]
   187cc:	bpl	1879c <__assert_fail@plt+0x7238>
   187d0:	lsl	r2, r2, #2
   187d4:	add	r1, r0, r6, lsl #2
   187d8:	bl	11264 <memcpy@plt>
   187dc:	b	1868c <__assert_fail@plt+0x7128>
   187e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187e4:	sub	sp, sp, #44	; 0x2c
   187e8:	mov	r6, #12
   187ec:	mov	r4, r1
   187f0:	add	r5, sp, #16
   187f4:	mul	r6, r6, r2
   187f8:	mov	r7, r2
   187fc:	str	r0, [sp, #8]
   18800:	mov	r0, r5
   18804:	str	r3, [sp, #12]
   18808:	ldr	r3, [r1, #20]
   1880c:	add	r3, r3, r6
   18810:	ldr	r1, [r3, #4]
   18814:	add	r1, r1, #1
   18818:	bl	1597c <__assert_fail@plt+0x4418>
   1881c:	subs	r9, r0, #0
   18820:	bne	18950 <__assert_fail@plt+0x73ec>
   18824:	ldr	r3, [sp, #20]
   18828:	lsl	r8, r7, #3
   1882c:	ldr	r1, [pc, #404]	; 189c8 <__assert_fail@plt+0x7464>
   18830:	add	r2, r3, #1
   18834:	str	r2, [sp, #20]
   18838:	ldr	r2, [sp, #24]
   1883c:	str	r7, [r2, r3, lsl #2]
   18840:	mvn	r2, #0
   18844:	ldr	r3, [r4, #24]
   18848:	add	r3, r3, r6
   1884c:	str	r2, [r3, #4]
   18850:	ldr	r2, [r4]
   18854:	add	r3, r2, r8
   18858:	ldr	r3, [r3, #4]
   1885c:	and	r1, r1, r3
   18860:	cmp	r1, #0
   18864:	bne	18890 <__assert_fail@plt+0x732c>
   18868:	ldr	r3, [r4]
   1886c:	add	r8, r3, r8
   18870:	ldrb	r3, [r8, #4]
   18874:	tst	r3, #8
   18878:	bne	189b8 <__assert_fail@plt+0x7454>
   1887c:	ldr	r3, [r4, #24]
   18880:	ldm	r5, {r0, r1, r2}
   18884:	add	r6, r3, r6
   18888:	stm	r6, {r0, r1, r2}
   1888c:	b	18944 <__assert_fail@plt+0x73e0>
   18890:	ldr	r1, [r4, #20]
   18894:	add	r1, r1, r6
   18898:	ldr	r0, [r1, #4]
   1889c:	cmp	r0, #0
   188a0:	beq	18868 <__assert_fail@plt+0x7304>
   188a4:	ldr	r1, [r1, #8]
   188a8:	ldr	r1, [r1]
   188ac:	add	r2, r2, r1, lsl #3
   188b0:	ldrb	r2, [r2, #6]
   188b4:	tst	r2, #4
   188b8:	bne	18868 <__assert_fail@plt+0x7304>
   188bc:	ubfx	r3, r3, #8, #10
   188c0:	mov	r0, r4
   188c4:	mov	r2, r7
   188c8:	mov	r1, r7
   188cc:	str	r3, [sp]
   188d0:	mov	r3, r7
   188d4:	bl	18378 <__assert_fail@plt+0x6e14>
   188d8:	cmp	r0, #0
   188dc:	beq	18868 <__assert_fail@plt+0x7304>
   188e0:	mov	r9, r0
   188e4:	b	18950 <__assert_fail@plt+0x73ec>
   188e8:	ldr	r3, [r3, #8]
   188ec:	ldr	r2, [r3, r7, lsl #2]
   188f0:	mov	r3, #12
   188f4:	mul	fp, r3, r2
   188f8:	add	r1, r1, fp
   188fc:	ldr	r3, [r1, #4]
   18900:	cmn	r3, #1
   18904:	bne	1895c <__assert_fail@plt+0x73f8>
   18908:	mov	sl, #1
   1890c:	add	r7, r7, #1
   18910:	ldr	r3, [r4, #20]
   18914:	ldr	r1, [r4, #24]
   18918:	add	r3, r3, r6
   1891c:	ldr	r2, [r3, #4]
   18920:	cmp	r2, r7
   18924:	bgt	188e8 <__assert_fail@plt+0x7384>
   18928:	ldr	r3, [sp, #12]
   1892c:	add	r1, r1, r6
   18930:	eor	r3, r3, #1
   18934:	tst	sl, r3
   18938:	movne	r3, #0
   1893c:	strne	r3, [r1, #4]
   18940:	beq	1887c <__assert_fail@plt+0x7318>
   18944:	ldm	r5, {r0, r1, r2}
   18948:	ldr	r3, [sp, #8]
   1894c:	stm	r3, {r0, r1, r2}
   18950:	mov	r0, r9
   18954:	add	sp, sp, #44	; 0x2c
   18958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1895c:	cmp	r3, #0
   18960:	bne	189ac <__assert_fail@plt+0x7448>
   18964:	mov	r1, r4
   18968:	mov	r0, r8
   1896c:	bl	187e0 <__assert_fail@plt+0x727c>
   18970:	cmp	r0, #0
   18974:	bne	188e0 <__assert_fail@plt+0x737c>
   18978:	mov	r1, r8
   1897c:	mov	r0, r5
   18980:	bl	18680 <__assert_fail@plt+0x711c>
   18984:	cmp	r0, #0
   18988:	bne	188e0 <__assert_fail@plt+0x737c>
   1898c:	ldr	r3, [r4, #24]
   18990:	add	fp, r3, fp
   18994:	ldr	r3, [fp, #4]
   18998:	cmp	r3, #0
   1899c:	bne	1890c <__assert_fail@plt+0x73a8>
   189a0:	ldr	r0, [sp, #36]	; 0x24
   189a4:	bl	13648 <__assert_fail@plt+0x20e4>
   189a8:	b	18908 <__assert_fail@plt+0x73a4>
   189ac:	ldm	r1, {r0, r1, r2}
   189b0:	stm	r8, {r0, r1, r2}
   189b4:	b	18978 <__assert_fail@plt+0x7414>
   189b8:	mov	r7, #0
   189bc:	add	r8, sp, #28
   189c0:	mov	sl, r7
   189c4:	b	18910 <__assert_fail@plt+0x73ac>
   189c8:	andeq	pc, r3, r0, lsl #30
   189cc:	cmp	r1, #0
   189d0:	push	{r4, r5, r6, lr}
   189d4:	mov	r4, r0
   189d8:	bge	189e4 <__assert_fail@plt+0x7480>
   189dc:	ldr	r0, [r4, #60]	; 0x3c
   189e0:	pop	{r4, r5, r6, pc}
   189e4:	ldr	r3, [r0, #48]	; 0x30
   189e8:	cmp	r3, r1
   189ec:	bne	18a00 <__assert_fail@plt+0x749c>
   189f0:	tst	r2, #2
   189f4:	movne	r0, #8
   189f8:	moveq	r0, #10
   189fc:	pop	{r4, r5, r6, pc}
   18a00:	ldr	r3, [r0, #80]	; 0x50
   18a04:	cmp	r3, #1
   18a08:	ldrgt	r3, [r0, #8]
   18a0c:	bgt	18a40 <__assert_fail@plt+0x74dc>
   18a10:	ldr	r3, [r0, #4]
   18a14:	ldr	r0, [r0, #68]	; 0x44
   18a18:	ldrb	r2, [r3, r1]
   18a1c:	mov	r1, r2
   18a20:	bl	14e38 <__assert_fail@plt+0x38d4>
   18a24:	cmp	r0, #0
   18a28:	bne	18aa4 <__assert_fail@plt+0x7540>
   18a2c:	cmp	r2, #10
   18a30:	popne	{r4, r5, r6, pc}
   18a34:	b	18a88 <__assert_fail@plt+0x7524>
   18a38:	subs	r1, r1, #1
   18a3c:	bcc	189dc <__assert_fail@plt+0x7478>
   18a40:	ldr	r5, [r3, r1, lsl #2]
   18a44:	cmn	r5, #1
   18a48:	beq	18a38 <__assert_fail@plt+0x74d4>
   18a4c:	ldrb	r3, [r4, #78]	; 0x4e
   18a50:	cmp	r3, #0
   18a54:	beq	18a80 <__assert_fail@plt+0x751c>
   18a58:	mov	r0, r5
   18a5c:	bl	11420 <iswalnum@plt>
   18a60:	sub	r3, r5, #95	; 0x5f
   18a64:	cmp	r0, #0
   18a68:	clz	r3, r3
   18a6c:	movne	r0, #1
   18a70:	lsr	r3, r3, #5
   18a74:	moveq	r0, r3
   18a78:	cmp	r0, #0
   18a7c:	bne	18aa4 <__assert_fail@plt+0x7540>
   18a80:	cmp	r5, #10
   18a84:	bne	18a9c <__assert_fail@plt+0x7538>
   18a88:	ldrb	r3, [r4, #77]	; 0x4d
   18a8c:	cmp	r3, #0
   18a90:	moveq	r0, #0
   18a94:	movne	r0, #2
   18a98:	pop	{r4, r5, r6, pc}
   18a9c:	mov	r0, #0
   18aa0:	pop	{r4, r5, r6, pc}
   18aa4:	mov	r0, #1
   18aa8:	pop	{r4, r5, r6, pc}
   18aac:	ldr	r3, [r0, #4]
   18ab0:	push	{r4, r5, r6, lr}
   18ab4:	mov	r4, r1
   18ab8:	mov	r5, r0
   18abc:	mov	r6, r2
   18ac0:	ldrb	r1, [r3, r2]
   18ac4:	ldrb	r3, [r4, #4]
   18ac8:	sub	r3, r3, #1
   18acc:	cmp	r3, #6
   18ad0:	ldrls	pc, [pc, r3, lsl #2]
   18ad4:	b	18bb8 <__assert_fail@plt+0x7654>
   18ad8:	strdeq	r8, [r1], -r4
   18adc:			; <UNDEFINED> instruction: 0x00018bb8
   18ae0:	andeq	r8, r1, r8, ror #22
   18ae4:			; <UNDEFINED> instruction: 0x00018bb8
   18ae8:	andeq	r8, r1, r4, lsl #23
   18aec:			; <UNDEFINED> instruction: 0x00018bb8
   18af0:	andeq	r8, r1, ip, ror fp
   18af4:	ldrb	r3, [r4]
   18af8:	cmp	r3, r1
   18afc:	bne	18bb8 <__assert_fail@plt+0x7654>
   18b00:	ldr	r3, [pc, #192]	; 18bc8 <__assert_fail@plt+0x7664>
   18b04:	ldr	r4, [r4, #4]
   18b08:	and	r3, r3, r4
   18b0c:	cmp	r3, #0
   18b10:	beq	18bc0 <__assert_fail@plt+0x765c>
   18b14:	mov	r1, r6
   18b18:	mov	r0, r5
   18b1c:	ldr	r2, [r5, #88]	; 0x58
   18b20:	bl	189cc <__assert_fail@plt+0x7468>
   18b24:	ubfx	r3, r4, #8, #10
   18b28:	tst	r3, #4
   18b2c:	beq	18b38 <__assert_fail@plt+0x75d4>
   18b30:	ands	r1, r0, #1
   18b34:	beq	18bb8 <__assert_fail@plt+0x7654>
   18b38:	tst	r3, #8
   18b3c:	beq	18b48 <__assert_fail@plt+0x75e4>
   18b40:	tst	r0, #1
   18b44:	bne	18bb8 <__assert_fail@plt+0x7654>
   18b48:	tst	r3, #32
   18b4c:	beq	18b58 <__assert_fail@plt+0x75f4>
   18b50:	ands	r1, r0, #2
   18b54:	beq	18bb8 <__assert_fail@plt+0x7654>
   18b58:	tst	r3, #128	; 0x80
   18b5c:	beq	18bc0 <__assert_fail@plt+0x765c>
   18b60:	ubfx	r0, r0, #3, #1
   18b64:	pop	{r4, r5, r6, pc}
   18b68:	ldr	r0, [r4]
   18b6c:	bl	14e38 <__assert_fail@plt+0x38d4>
   18b70:	cmp	r0, #0
   18b74:	bne	18b00 <__assert_fail@plt+0x759c>
   18b78:	pop	{r4, r5, r6, pc}
   18b7c:	tst	r1, #128	; 0x80
   18b80:	bne	18bb8 <__assert_fail@plt+0x7654>
   18b84:	cmp	r1, #10
   18b88:	bne	18ba0 <__assert_fail@plt+0x763c>
   18b8c:	ldr	r3, [r5, #84]	; 0x54
   18b90:	ldr	r0, [r3, #128]	; 0x80
   18b94:	ands	r0, r0, #64	; 0x40
   18b98:	bne	18b00 <__assert_fail@plt+0x759c>
   18b9c:	pop	{r4, r5, r6, pc}
   18ba0:	cmp	r1, #0
   18ba4:	bne	18b00 <__assert_fail@plt+0x759c>
   18ba8:	ldr	r3, [r5, #84]	; 0x54
   18bac:	ldr	r3, [r3, #128]	; 0x80
   18bb0:	tst	r3, #128	; 0x80
   18bb4:	beq	18b00 <__assert_fail@plt+0x759c>
   18bb8:	mov	r0, #0
   18bbc:	pop	{r4, r5, r6, pc}
   18bc0:	mov	r0, #1
   18bc4:	pop	{r4, r5, r6, pc}
   18bc8:	andeq	pc, r3, r0, lsl #30
   18bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bd0:	mov	r4, r0
   18bd4:	sub	sp, sp, #28
   18bd8:	mov	r6, r1
   18bdc:	mov	sl, r2
   18be0:	ldr	r5, [r0, #24]
   18be4:	cmp	r5, r1
   18be8:	suble	r5, r1, r5
   18bec:	ble	18c4c <__assert_fail@plt+0x76e8>
   18bf0:	ldr	r3, [r0, #80]	; 0x50
   18bf4:	mov	r5, r1
   18bf8:	cmp	r3, #1
   18bfc:	movgt	r3, #0
   18c00:	movgt	r2, #0
   18c04:	strdgt	r2, [r0, #16]
   18c08:	tst	sl, #1
   18c0c:	ldr	r3, [r0, #44]	; 0x2c
   18c10:	str	r3, [r0, #48]	; 0x30
   18c14:	ldr	r3, [r0, #52]	; 0x34
   18c18:	str	r3, [r0, #56]	; 0x38
   18c1c:	mov	r3, #0
   18c20:	str	r3, [r0, #24]
   18c24:	str	r3, [r0, #28]
   18c28:	str	r3, [r0, #32]
   18c2c:	strb	r3, [r0, #76]	; 0x4c
   18c30:	movne	r3, #4
   18c34:	moveq	r3, #6
   18c38:	str	r3, [r0, #60]	; 0x3c
   18c3c:	ldrb	r3, [r0, #75]	; 0x4b
   18c40:	cmp	r3, #0
   18c44:	ldreq	r3, [r0]
   18c48:	streq	r3, [r0, #4]
   18c4c:	cmp	r5, #0
   18c50:	beq	18d50 <__assert_fail@plt+0x77ec>
   18c54:	ldrb	r3, [r4, #76]	; 0x4c
   18c58:	ldr	r2, [r4, #32]
   18c5c:	ldr	r8, [r4, #28]
   18c60:	cmp	r2, r5
   18c64:	ble	18ef4 <__assert_fail@plt+0x7990>
   18c68:	cmp	r3, #0
   18c6c:	beq	18e84 <__assert_fail@plt+0x7920>
   18c70:	ldr	r9, [r4, #12]
   18c74:	mov	r3, r8
   18c78:	mov	r2, #0
   18c7c:	add	r7, r2, r3
   18c80:	add	r7, r7, r7, lsr #31
   18c84:	asr	r7, r7, #1
   18c88:	ldr	r1, [r9, r7, lsl #2]
   18c8c:	cmp	r1, r5
   18c90:	bgt	18d9c <__assert_fail@plt+0x7838>
   18c94:	bge	18cac <__assert_fail@plt+0x7748>
   18c98:	add	r2, r7, #1
   18c9c:	cmp	r2, r3
   18ca0:	blt	18c7c <__assert_fail@plt+0x7718>
   18ca4:	cmp	r1, r5
   18ca8:	addlt	r7, r7, #1
   18cac:	mov	r2, sl
   18cb0:	sub	r1, r7, #1
   18cb4:	mov	r0, r4
   18cb8:	bl	189cc <__assert_fail@plt+0x7468>
   18cbc:	sub	r3, r5, r7
   18cc0:	cmp	r5, r8
   18cc4:	str	r0, [r4, #60]	; 0x3c
   18cc8:	clz	r3, r3
   18ccc:	lsr	r3, r3, #5
   18cd0:	movge	r3, #0
   18cd4:	cmp	r3, #0
   18cd8:	beq	18dc0 <__assert_fail@plt+0x785c>
   18cdc:	ldr	r3, [r9, r7, lsl #2]
   18ce0:	cmp	r3, r5
   18ce4:	bne	18dc0 <__assert_fail@plt+0x785c>
   18ce8:	ldr	r0, [r4, #8]
   18cec:	lsl	r7, r5, #2
   18cf0:	sub	r2, r8, r5
   18cf4:	lsl	r2, r2, #2
   18cf8:	add	r1, r0, r7
   18cfc:	bl	11234 <memmove@plt>
   18d00:	ldr	r0, [r4, #4]
   18d04:	ldr	r2, [r4, #28]
   18d08:	add	r1, r0, r5
   18d0c:	sub	r2, r2, r5
   18d10:	bl	11234 <memmove@plt>
   18d14:	ldr	r3, [r4, #28]
   18d18:	sub	r3, r3, r5
   18d1c:	str	r3, [r4, #28]
   18d20:	ldr	r3, [r4, #32]
   18d24:	sub	r3, r3, r5
   18d28:	str	r3, [r4, #32]
   18d2c:	mov	r3, #0
   18d30:	ldr	r2, [r4, #28]
   18d34:	cmp	r2, r3
   18d38:	bgt	18da4 <__assert_fail@plt+0x7840>
   18d3c:	ldrb	r3, [r4, #75]	; 0x4b
   18d40:	cmp	r3, #0
   18d44:	ldreq	r3, [r4, #4]
   18d48:	addeq	r3, r3, r5
   18d4c:	streq	r3, [r4, #4]
   18d50:	ldr	r3, [r4, #48]	; 0x30
   18d54:	str	r6, [r4, #24]
   18d58:	ldr	r2, [r4, #56]	; 0x38
   18d5c:	sub	r3, r3, r5
   18d60:	sub	r5, r2, r5
   18d64:	ldr	r2, [r4, #80]	; 0x50
   18d68:	str	r3, [r4, #48]	; 0x30
   18d6c:	str	r5, [r4, #56]	; 0x38
   18d70:	cmp	r2, #1
   18d74:	ble	191c8 <__assert_fail@plt+0x7c64>
   18d78:	ldrb	r3, [r4, #72]	; 0x48
   18d7c:	mov	r0, r4
   18d80:	cmp	r3, #0
   18d84:	beq	191b8 <__assert_fail@plt+0x7c54>
   18d88:	bl	15b08 <__assert_fail@plt+0x45a4>
   18d8c:	cmp	r0, #0
   18d90:	beq	191bc <__assert_fail@plt+0x7c58>
   18d94:	add	sp, sp, #28
   18d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d9c:	mov	r3, r7
   18da0:	b	18c9c <__assert_fail@plt+0x7738>
   18da4:	ldr	r1, [r4, #12]
   18da8:	ldr	r2, [r1, r7]
   18dac:	add	r7, r7, #4
   18db0:	sub	r2, r2, r5
   18db4:	str	r2, [r1, r3, lsl #2]
   18db8:	add	r3, r3, #1
   18dbc:	b	18d30 <__assert_fail@plt+0x77cc>
   18dc0:	ldr	r3, [r4, #44]	; 0x2c
   18dc4:	sub	r3, r3, r6
   18dc8:	add	r3, r3, r5
   18dcc:	str	r3, [r4, #48]	; 0x30
   18dd0:	ldr	r3, [r4, #52]	; 0x34
   18dd4:	sub	r3, r3, r6
   18dd8:	add	r3, r3, r5
   18ddc:	str	r3, [r4, #56]	; 0x38
   18de0:	mov	r3, #0
   18de4:	strb	r3, [r4, #76]	; 0x4c
   18de8:	add	r3, r9, r7, lsl #2
   18dec:	cmp	r7, #0
   18df0:	ble	18e00 <__assert_fail@plt+0x789c>
   18df4:	ldr	r2, [r3, #-4]!
   18df8:	cmp	r2, r5
   18dfc:	beq	18e30 <__assert_fail@plt+0x78cc>
   18e00:	cmp	r7, r8
   18e04:	blt	18e38 <__assert_fail@plt+0x78d4>
   18e08:	moveq	r3, #0
   18e0c:	streq	r3, [r4, #28]
   18e10:	beq	18e28 <__assert_fail@plt+0x78c4>
   18e14:	ldr	r3, [r9, r7, lsl #2]
   18e18:	sub	r3, r3, r5
   18e1c:	cmp	r3, #0
   18e20:	str	r3, [r4, #28]
   18e24:	bne	18e78 <__assert_fail@plt+0x7914>
   18e28:	ldr	r3, [r4, #28]
   18e2c:	b	18eec <__assert_fail@plt+0x7988>
   18e30:	sub	r7, r7, #1
   18e34:	b	18dec <__assert_fail@plt+0x7888>
   18e38:	ldr	r3, [r4, #8]
   18e3c:	ldr	r3, [r3, r7, lsl #2]
   18e40:	cmn	r3, #1
   18e44:	bne	18e14 <__assert_fail@plt+0x78b0>
   18e48:	add	r7, r7, #1
   18e4c:	b	18e00 <__assert_fail@plt+0x789c>
   18e50:	ldr	r2, [r4, #8]
   18e54:	str	r1, [r2, r3, lsl #2]
   18e58:	add	r3, r3, #1
   18e5c:	ldr	r2, [r4, #28]
   18e60:	cmp	r2, r3
   18e64:	bgt	18e50 <__assert_fail@plt+0x78ec>
   18e68:	mov	r1, #255	; 0xff
   18e6c:	ldr	r0, [r4, #4]
   18e70:	bl	11444 <memset@plt>
   18e74:	b	18e28 <__assert_fail@plt+0x78c4>
   18e78:	mov	r3, #0
   18e7c:	mvn	r1, #0
   18e80:	b	18e5c <__assert_fail@plt+0x78f8>
   18e84:	mov	r2, sl
   18e88:	sub	r1, r5, #1
   18e8c:	mov	r0, r4
   18e90:	bl	189cc <__assert_fail@plt+0x7468>
   18e94:	ldr	r3, [r4, #80]	; 0x50
   18e98:	str	r0, [r4, #60]	; 0x3c
   18e9c:	cmp	r3, #1
   18ea0:	ble	18eb8 <__assert_fail@plt+0x7954>
   18ea4:	ldr	r0, [r4, #8]
   18ea8:	sub	r2, r8, r5
   18eac:	lsl	r2, r2, #2
   18eb0:	add	r1, r0, r5, lsl #2
   18eb4:	bl	11234 <memmove@plt>
   18eb8:	ldrb	r3, [r4, #75]	; 0x4b
   18ebc:	cmp	r3, #0
   18ec0:	beq	18ed8 <__assert_fail@plt+0x7974>
   18ec4:	ldr	r0, [r4, #4]
   18ec8:	ldr	r2, [r4, #28]
   18ecc:	add	r1, r0, r5
   18ed0:	sub	r2, r2, r5
   18ed4:	bl	11234 <memmove@plt>
   18ed8:	ldr	r3, [r4, #28]
   18edc:	sub	r3, r3, r5
   18ee0:	str	r3, [r4, #28]
   18ee4:	ldr	r3, [r4, #32]
   18ee8:	sub	r3, r3, r5
   18eec:	str	r3, [r4, #32]
   18ef0:	b	18d3c <__assert_fail@plt+0x77d8>
   18ef4:	cmp	r3, #0
   18ef8:	beq	18f24 <__assert_fail@plt+0x79c0>
   18efc:	ldr	r3, [r4, #44]	; 0x2c
   18f00:	sub	r3, r3, r6
   18f04:	add	r3, r3, r5
   18f08:	str	r3, [r4, #48]	; 0x30
   18f0c:	ldr	r3, [r4, #52]	; 0x34
   18f10:	sub	r3, r3, r6
   18f14:	add	r3, r3, r5
   18f18:	str	r3, [r4, #56]	; 0x38
   18f1c:	mov	r3, #0
   18f20:	strb	r3, [r4, #76]	; 0x4c
   18f24:	mov	r1, #0
   18f28:	ldr	r7, [r4, #24]
   18f2c:	ldr	r3, [r4, #80]	; 0x50
   18f30:	str	r1, [r4, #28]
   18f34:	cmp	r3, #1
   18f38:	ble	19160 <__assert_fail@plt+0x7bfc>
   18f3c:	ldrb	r2, [r4, #73]	; 0x49
   18f40:	cmp	r2, r1
   18f44:	beq	19014 <__assert_fail@plt+0x7ab0>
   18f48:	ldr	r2, [r4]
   18f4c:	sub	r3, r5, r3
   18f50:	add	r7, r2, r7
   18f54:	add	r3, r7, r3
   18f58:	cmp	r2, r3
   18f5c:	movcs	r3, r2
   18f60:	sub	r2, r5, #1
   18f64:	add	r2, r7, r2
   18f68:	cmp	r2, r3
   18f6c:	mov	r9, r2
   18f70:	bcc	19014 <__assert_fail@plt+0x7ab0>
   18f74:	mov	r2, r9
   18f78:	ldrb	r1, [r2], #-1
   18f7c:	and	r1, r1, #192	; 0xc0
   18f80:	cmp	r1, #128	; 0x80
   18f84:	beq	18f68 <__assert_fail@plt+0x7a04>
   18f88:	ldr	r2, [r4, #48]	; 0x30
   18f8c:	ldr	r0, [r4, #64]	; 0x40
   18f90:	add	r2, r7, r2
   18f94:	sub	r2, r2, r9
   18f98:	cmp	r0, #0
   18f9c:	moveq	ip, r9
   18fa0:	beq	18fc0 <__assert_fail@plt+0x7a5c>
   18fa4:	cmp	r2, #6
   18fa8:	add	r1, sp, #8
   18fac:	movlt	r3, r2
   18fb0:	movge	r3, #6
   18fb4:	subs	r3, r3, #1
   18fb8:	bpl	1906c <__assert_fail@plt+0x7b08>
   18fbc:	mov	ip, r1
   18fc0:	mov	r0, #0
   18fc4:	mov	r1, #0
   18fc8:	add	r3, sp, #16
   18fcc:	add	r7, r7, r5
   18fd0:	strd	r0, [sp, #16]
   18fd4:	mov	r1, ip
   18fd8:	add	r0, sp, #4
   18fdc:	sub	r9, r7, r9
   18fe0:	bl	21278 <__assert_fail@plt+0xfd14>
   18fe4:	cmp	r9, r0
   18fe8:	bhi	19014 <__assert_fail@plt+0x7ab0>
   18fec:	cmn	r0, #3
   18ff0:	bhi	19014 <__assert_fail@plt+0x7ab0>
   18ff4:	ldr	fp, [sp, #4]
   18ff8:	mov	r2, #0
   18ffc:	mov	r3, #0
   19000:	sub	r0, r0, r9
   19004:	strd	r2, [r4, #16]
   19008:	str	r0, [r4, #28]
   1900c:	cmn	fp, #1
   19010:	bne	190e4 <__assert_fail@plt+0x7b80>
   19014:	ldr	r7, [r4, #24]
   19018:	mvn	fp, #0
   1901c:	add	r9, r4, #16
   19020:	ldr	r3, [r4, #32]
   19024:	add	r7, r7, r3
   19028:	cmp	r6, r7
   1902c:	bgt	1907c <__assert_fail@plt+0x7b18>
   19030:	sub	r7, r7, r6
   19034:	cmn	fp, #1
   19038:	str	r7, [r4, #28]
   1903c:	bne	190e4 <__assert_fail@plt+0x7b80>
   19040:	mov	r2, sl
   19044:	sub	r1, r8, #1
   19048:	mov	r0, r4
   1904c:	bl	189cc <__assert_fail@plt+0x7468>
   19050:	str	r0, [r4, #60]	; 0x3c
   19054:	ldr	r3, [r4, #28]
   19058:	cmp	r3, #0
   1905c:	beq	18e28 <__assert_fail@plt+0x78c4>
   19060:	mov	r3, #0
   19064:	mvn	r1, #0
   19068:	b	19144 <__assert_fail@plt+0x7be0>
   1906c:	ldrb	ip, [r9, r3]
   19070:	ldrb	ip, [r0, ip]
   19074:	strb	ip, [r1, r3]
   19078:	b	18fb4 <__assert_fail@plt+0x7a50>
   1907c:	ldm	r9, {r0, r1}
   19080:	add	r3, sp, #16
   19084:	ldr	fp, [r4, #44]	; 0x2c
   19088:	stm	r3, {r0, r1}
   1908c:	mov	r3, r9
   19090:	add	r0, sp, #8
   19094:	ldr	r1, [r4]
   19098:	sub	fp, fp, r7
   1909c:	mov	r2, fp
   190a0:	add	r1, r1, r7
   190a4:	bl	21278 <__assert_fail@plt+0xfd14>
   190a8:	sub	r3, r0, #1
   190ac:	cmn	r3, #4
   190b0:	ldrls	fp, [sp, #8]
   190b4:	bls	190dc <__assert_fail@plt+0x7b78>
   190b8:	cmp	fp, #0
   190bc:	cmpne	r0, #0
   190c0:	ldrne	r3, [r4]
   190c4:	moveq	fp, #0
   190c8:	ldrbne	fp, [r3, r7]
   190cc:	add	r3, sp, #16
   190d0:	ldm	r3, {r0, r1}
   190d4:	stm	r9, {r0, r1}
   190d8:	mov	r0, #1
   190dc:	add	r7, r7, r0
   190e0:	b	19028 <__assert_fail@plt+0x7ac4>
   190e4:	ldrb	r3, [r4, #78]	; 0x4e
   190e8:	cmp	r3, #0
   190ec:	beq	19114 <__assert_fail@plt+0x7bb0>
   190f0:	mov	r0, fp
   190f4:	bl	11420 <iswalnum@plt>
   190f8:	subs	r3, fp, #95	; 0x5f
   190fc:	movne	r3, #1
   19100:	cmp	r0, #0
   19104:	movne	r3, #0
   19108:	cmp	r3, #0
   1910c:	moveq	r3, #1
   19110:	beq	19130 <__assert_fail@plt+0x7bcc>
   19114:	cmp	fp, #10
   19118:	movne	r3, #0
   1911c:	bne	19130 <__assert_fail@plt+0x7bcc>
   19120:	ldrb	r3, [r4, #77]	; 0x4d
   19124:	cmp	r3, #0
   19128:	moveq	r3, #0
   1912c:	movne	r3, #2
   19130:	str	r3, [r4, #60]	; 0x3c
   19134:	b	19054 <__assert_fail@plt+0x7af0>
   19138:	ldr	r2, [r4, #8]
   1913c:	str	r1, [r2, r3, lsl #2]
   19140:	add	r3, r3, #1
   19144:	ldr	r2, [r4, #28]
   19148:	cmp	r2, r3
   1914c:	bgt	19138 <__assert_fail@plt+0x7bd4>
   19150:	ldrb	r3, [r4, #75]	; 0x4b
   19154:	cmp	r3, #0
   19158:	beq	18e28 <__assert_fail@plt+0x78c4>
   1915c:	b	18e68 <__assert_fail@plt+0x7904>
   19160:	ldr	r3, [r4]
   19164:	ldr	r0, [r4, #68]	; 0x44
   19168:	add	r3, r3, r5
   1916c:	add	r7, r3, r7
   19170:	ldr	r3, [r4, #64]	; 0x40
   19174:	ldrb	r2, [r7, #-1]
   19178:	str	r1, [r4, #32]
   1917c:	cmp	r3, #0
   19180:	ldrbne	r2, [r3, r2]
   19184:	mov	r1, r2
   19188:	bl	14e38 <__assert_fail@plt+0x38d4>
   1918c:	cmp	r0, #0
   19190:	movne	r0, #1
   19194:	bne	191b0 <__assert_fail@plt+0x7c4c>
   19198:	cmp	r2, #10
   1919c:	bne	191b0 <__assert_fail@plt+0x7c4c>
   191a0:	ldrb	r3, [r4, #77]	; 0x4d
   191a4:	cmp	r3, #0
   191a8:	moveq	r0, #0
   191ac:	movne	r0, #2
   191b0:	str	r0, [r4, #60]	; 0x3c
   191b4:	b	18d3c <__assert_fail@plt+0x77d8>
   191b8:	bl	159b4 <__assert_fail@plt+0x4450>
   191bc:	mov	r0, #0
   191c0:	str	r0, [r4, #40]	; 0x28
   191c4:	b	18d94 <__assert_fail@plt+0x7830>
   191c8:	ldrb	r2, [r4, #75]	; 0x4b
   191cc:	cmp	r2, #0
   191d0:	streq	r3, [r4, #28]
   191d4:	beq	191bc <__assert_fail@plt+0x7c58>
   191d8:	ldrb	r3, [r4, #72]	; 0x48
   191dc:	cmp	r3, #0
   191e0:	beq	191f0 <__assert_fail@plt+0x7c8c>
   191e4:	mov	r0, r4
   191e8:	bl	15fd8 <__assert_fail@plt+0x4a74>
   191ec:	b	191bc <__assert_fail@plt+0x7c58>
   191f0:	ldr	r3, [r4, #64]	; 0x40
   191f4:	cmp	r3, #0
   191f8:	beq	191bc <__assert_fail@plt+0x7c58>
   191fc:	mov	r0, r4
   19200:	bl	14edc <__assert_fail@plt+0x3978>
   19204:	b	191bc <__assert_fail@plt+0x7c58>
   19208:	push	{r4, r5, r6, r7, r8, lr}
   1920c:	mov	r5, r1
   19210:	mov	r1, r2
   19214:	mov	r4, r0
   19218:	ldr	r2, [r0, #88]	; 0x58
   1921c:	bl	189cc <__assert_fail@plt+0x7468>
   19220:	ldr	lr, [r5, #8]
   19224:	mov	ip, #0
   19228:	and	r6, r0, #8
   1922c:	and	r7, r0, #2
   19230:	and	r1, r0, #1
   19234:	cmp	lr, ip
   19238:	bgt	19244 <__assert_fail@plt+0x7ce0>
   1923c:	mov	r0, #0
   19240:	pop	{r4, r5, r6, r7, r8, pc}
   19244:	ldr	r3, [r5, #12]
   19248:	ldr	r0, [r3, ip, lsl #2]
   1924c:	ldr	r3, [r4, #84]	; 0x54
   19250:	ldr	r2, [r3]
   19254:	add	r2, r2, r0, lsl #3
   19258:	ldr	r3, [r2, #4]
   1925c:	ldrb	r2, [r2, #4]
   19260:	ubfx	r3, r3, #8, #10
   19264:	cmp	r2, #2
   19268:	bne	192b4 <__assert_fail@plt+0x7d50>
   1926c:	cmp	r3, #0
   19270:	popeq	{r4, r5, r6, r7, r8, pc}
   19274:	tst	r3, #4
   19278:	beq	19284 <__assert_fail@plt+0x7d20>
   1927c:	cmp	r1, #0
   19280:	beq	192b4 <__assert_fail@plt+0x7d50>
   19284:	tst	r3, #8
   19288:	beq	19294 <__assert_fail@plt+0x7d30>
   1928c:	cmp	r1, #0
   19290:	bne	192b4 <__assert_fail@plt+0x7d50>
   19294:	tst	r3, #32
   19298:	beq	192a4 <__assert_fail@plt+0x7d40>
   1929c:	cmp	r7, #0
   192a0:	beq	192b4 <__assert_fail@plt+0x7d50>
   192a4:	tst	r3, #128	; 0x80
   192a8:	popeq	{r4, r5, r6, r7, r8, pc}
   192ac:	cmp	r6, #0
   192b0:	popne	{r4, r5, r6, r7, r8, pc}
   192b4:	add	ip, ip, #1
   192b8:	b	19234 <__assert_fail@plt+0x7cd0>
   192bc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192c0:	ldr	r8, [r1, #40]	; 0x28
   192c4:	ldr	r3, [r1, #56]	; 0x38
   192c8:	cmp	r3, r8
   192cc:	movle	r3, #2
   192d0:	strble	r3, [r0, #4]
   192d4:	movle	r0, #0
   192d8:	ble	194ac <__assert_fail@plt+0x7f48>
   192dc:	ldrb	r3, [r0, #6]
   192e0:	ldr	sl, [r1, #4]
   192e4:	bic	r3, r3, #96	; 0x60
   192e8:	ldrb	r6, [sl, r8]
   192ec:	strb	r3, [r0, #6]
   192f0:	ldr	r3, [r1, #80]	; 0x50
   192f4:	strb	r6, [r0]
   192f8:	cmp	r3, #1
   192fc:	ble	1933c <__assert_fail@plt+0x7dd8>
   19300:	ldr	ip, [r1, #28]
   19304:	cmp	r8, ip
   19308:	beq	1933c <__assert_fail@plt+0x7dd8>
   1930c:	ldr	ip, [r1, #8]
   19310:	ldr	ip, [ip, r8, lsl #2]
   19314:	cmn	ip, #1
   19318:	bne	1933c <__assert_fail@plt+0x7dd8>
   1931c:	ldr	r3, [r0, #4]
   19320:	bic	r3, r3, #2097152	; 0x200000
   19324:	bic	r3, r3, #255	; 0xff
   19328:	orr	r3, r3, #2097152	; 0x200000
   1932c:	orr	r3, r3, #1
   19330:	str	r3, [r0, #4]
   19334:	mov	r0, #1
   19338:	b	194ac <__assert_fail@plt+0x7f48>
   1933c:	cmp	r6, #92	; 0x5c
   19340:	mov	r4, r2
   19344:	mov	r7, r1
   19348:	mov	r5, r0
   1934c:	bne	19684 <__assert_fail@plt+0x8120>
   19350:	ldr	r2, [r7, #48]	; 0x30
   19354:	add	r1, r8, #1
   19358:	cmp	r1, r2
   1935c:	movge	r3, #36	; 0x24
   19360:	bge	197b0 <__assert_fail@plt+0x824c>
   19364:	ldrb	r2, [r7, #75]	; 0x4b
   19368:	cmp	r2, #0
   1936c:	bne	19378 <__assert_fail@plt+0x7e14>
   19370:	ldrb	r6, [sl, r1]
   19374:	b	193e8 <__assert_fail@plt+0x7e84>
   19378:	cmp	r3, #1
   1937c:	ble	193b4 <__assert_fail@plt+0x7e50>
   19380:	ldr	r2, [r7, #8]
   19384:	lsl	r0, r1, #2
   19388:	ldr	ip, [r2, r1, lsl #2]
   1938c:	cmn	ip, #1
   19390:	beq	19370 <__assert_fail@plt+0x7e0c>
   19394:	ldr	ip, [r7, #28]
   19398:	add	r8, r8, #2
   1939c:	cmp	ip, r8
   193a0:	beq	193b4 <__assert_fail@plt+0x7e50>
   193a4:	add	r2, r2, r0
   193a8:	ldr	r2, [r2, #4]
   193ac:	cmn	r2, #1
   193b0:	beq	19370 <__assert_fail@plt+0x7e0c>
   193b4:	ldrb	r0, [r7, #76]	; 0x4c
   193b8:	ldr	lr, [r7, #24]
   193bc:	cmp	r0, #0
   193c0:	ldrne	r2, [r7, #12]
   193c4:	moveq	ip, r1
   193c8:	ldrne	ip, [r2, r1, lsl #2]
   193cc:	cmp	r0, #0
   193d0:	ldr	r2, [r7]
   193d4:	add	r2, r2, ip
   193d8:	ldrb	r6, [r2, lr]
   193dc:	beq	193e8 <__assert_fail@plt+0x7e84>
   193e0:	tst	r6, #128	; 0x80
   193e4:	bne	19370 <__assert_fail@plt+0x7e0c>
   193e8:	mov	r2, #1
   193ec:	ldrb	r8, [r5, #6]
   193f0:	cmp	r3, r2
   193f4:	strb	r6, [r5]
   193f8:	strb	r2, [r5, #4]
   193fc:	ble	19460 <__assert_fail@plt+0x7efc>
   19400:	mov	r0, r7
   19404:	bl	14ec0 <__assert_fail@plt+0x395c>
   19408:	mov	r7, r0
   1940c:	bl	11420 <iswalnum@plt>
   19410:	adds	r0, r0, #0
   19414:	movne	r0, #1
   19418:	cmp	r7, #95	; 0x5f
   1941c:	orreq	r0, r0, #1
   19420:	bfi	r8, r0, #6, #1
   19424:	cmp	r6, #66	; 0x42
   19428:	strb	r8, [r5, #6]
   1942c:	beq	195d0 <__assert_fail@plt+0x806c>
   19430:	bhi	194e8 <__assert_fail@plt+0x7f84>
   19434:	cmp	r6, #57	; 0x39
   19438:	bhi	194b4 <__assert_fail@plt+0x7f50>
   1943c:	cmp	r6, #49	; 0x31
   19440:	bcs	1959c <__assert_fail@plt+0x8038>
   19444:	cmp	r6, #40	; 0x28
   19448:	beq	19638 <__assert_fail@plt+0x80d4>
   1944c:	bhi	19484 <__assert_fail@plt+0x7f20>
   19450:	cmp	r6, #39	; 0x27
   19454:	beq	19620 <__assert_fail@plt+0x80bc>
   19458:	mov	r0, #2
   1945c:	b	194ac <__assert_fail@plt+0x7f48>
   19460:	bl	113e4 <__ctype_b_loc@plt>
   19464:	ldr	r2, [r0]
   19468:	lsl	r3, r6, #1
   1946c:	ldrh	r3, [r2, r3]
   19470:	ubfx	r3, r3, #3, #1
   19474:	cmp	r6, #95	; 0x5f
   19478:	orreq	r3, r3, #1
   1947c:	bfi	r8, r3, #6, #1
   19480:	b	19424 <__assert_fail@plt+0x7ec0>
   19484:	cmp	r6, #41	; 0x29
   19488:	beq	19648 <__assert_fail@plt+0x80e4>
   1948c:	cmp	r6, #43	; 0x2b
   19490:	bne	19458 <__assert_fail@plt+0x7ef4>
   19494:	movw	r0, #1026	; 0x402
   19498:	and	r0, r4, r0
   1949c:	cmp	r0, #2
   194a0:	moveq	r3, #18
   194a4:	bne	19458 <__assert_fail@plt+0x7ef4>
   194a8:	strb	r3, [r5, #4]
   194ac:	add	sp, sp, #12
   194b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194b4:	cmp	r6, #62	; 0x3e
   194b8:	beq	195b8 <__assert_fail@plt+0x8054>
   194bc:	cmp	r6, #63	; 0x3f
   194c0:	beq	19658 <__assert_fail@plt+0x80f4>
   194c4:	cmp	r6, #60	; 0x3c
   194c8:	bne	19458 <__assert_fail@plt+0x7ef4>
   194cc:	tst	r4, #524288	; 0x80000
   194d0:	moveq	r3, #12
   194d4:	strbeq	r3, [r5, #4]
   194d8:	moveq	r3, #6
   194dc:	bne	19458 <__assert_fail@plt+0x7ef4>
   194e0:	str	r3, [r5]
   194e4:	b	19458 <__assert_fail@plt+0x7ef4>
   194e8:	cmp	r6, #115	; 0x73
   194ec:	beq	195f8 <__assert_fail@plt+0x8094>
   194f0:	bhi	19540 <__assert_fail@plt+0x7fdc>
   194f4:	cmp	r6, #87	; 0x57
   194f8:	beq	195e8 <__assert_fail@plt+0x8084>
   194fc:	bhi	19518 <__assert_fail@plt+0x7fb4>
   19500:	cmp	r6, #83	; 0x53
   19504:	bne	19458 <__assert_fail@plt+0x7ef4>
   19508:	tst	r4, #524288	; 0x80000
   1950c:	moveq	r3, #35	; 0x23
   19510:	beq	19594 <__assert_fail@plt+0x8030>
   19514:	b	19458 <__assert_fail@plt+0x7ef4>
   19518:	cmp	r6, #96	; 0x60
   1951c:	beq	19608 <__assert_fail@plt+0x80a4>
   19520:	cmp	r6, #98	; 0x62
   19524:	bne	19458 <__assert_fail@plt+0x7ef4>
   19528:	tst	r4, #524288	; 0x80000
   1952c:	moveq	r3, #12
   19530:	strbeq	r3, [r5, #4]
   19534:	moveq	r3, #256	; 0x100
   19538:	beq	194e0 <__assert_fail@plt+0x7f7c>
   1953c:	b	19458 <__assert_fail@plt+0x7ef4>
   19540:	cmp	r6, #123	; 0x7b
   19544:	beq	19670 <__assert_fail@plt+0x810c>
   19548:	bhi	19564 <__assert_fail@plt+0x8000>
   1954c:	cmp	r6, #119	; 0x77
   19550:	bne	19458 <__assert_fail@plt+0x7ef4>
   19554:	tst	r4, #524288	; 0x80000
   19558:	moveq	r3, #32
   1955c:	beq	19594 <__assert_fail@plt+0x8030>
   19560:	b	19458 <__assert_fail@plt+0x7ef4>
   19564:	cmp	r6, #124	; 0x7c
   19568:	beq	19588 <__assert_fail@plt+0x8024>
   1956c:	cmp	r6, #125	; 0x7d
   19570:	bne	19458 <__assert_fail@plt+0x7ef4>
   19574:	and	r4, r4, #4608	; 0x1200
   19578:	cmp	r4, #512	; 0x200
   1957c:	bne	19458 <__assert_fail@plt+0x7ef4>
   19580:	mov	r3, #24
   19584:	b	19594 <__assert_fail@plt+0x8030>
   19588:	tst	r4, #33792	; 0x8400
   1958c:	moveq	r3, #10
   19590:	bne	19458 <__assert_fail@plt+0x7ef4>
   19594:	strb	r3, [r5, #4]
   19598:	b	19458 <__assert_fail@plt+0x7ef4>
   1959c:	tst	r4, #16384	; 0x4000
   195a0:	bne	19458 <__assert_fail@plt+0x7ef4>
   195a4:	mov	r3, #4
   195a8:	sub	r6, r6, #49	; 0x31
   195ac:	str	r6, [r5]
   195b0:	strb	r3, [r5, #4]
   195b4:	b	19458 <__assert_fail@plt+0x7ef4>
   195b8:	tst	r4, #524288	; 0x80000
   195bc:	moveq	r3, #12
   195c0:	strbeq	r3, [r5, #4]
   195c4:	moveq	r3, #9
   195c8:	beq	194e0 <__assert_fail@plt+0x7f7c>
   195cc:	b	19458 <__assert_fail@plt+0x7ef4>
   195d0:	tst	r4, #524288	; 0x80000
   195d4:	moveq	r3, #12
   195d8:	strbeq	r3, [r5, #4]
   195dc:	moveq	r3, #512	; 0x200
   195e0:	beq	194e0 <__assert_fail@plt+0x7f7c>
   195e4:	b	19458 <__assert_fail@plt+0x7ef4>
   195e8:	tst	r4, #524288	; 0x80000
   195ec:	moveq	r3, #33	; 0x21
   195f0:	beq	19594 <__assert_fail@plt+0x8030>
   195f4:	b	19458 <__assert_fail@plt+0x7ef4>
   195f8:	tst	r4, #524288	; 0x80000
   195fc:	moveq	r3, #34	; 0x22
   19600:	beq	19594 <__assert_fail@plt+0x8030>
   19604:	b	19458 <__assert_fail@plt+0x7ef4>
   19608:	tst	r4, #524288	; 0x80000
   1960c:	moveq	r3, #12
   19610:	strbeq	r3, [r5, #4]
   19614:	moveq	r3, #64	; 0x40
   19618:	beq	194e0 <__assert_fail@plt+0x7f7c>
   1961c:	b	19458 <__assert_fail@plt+0x7ef4>
   19620:	tst	r4, #524288	; 0x80000
   19624:	bne	19458 <__assert_fail@plt+0x7ef4>
   19628:	mov	r3, #12
   1962c:	strb	r3, [r5, #4]
   19630:	mov	r3, #128	; 0x80
   19634:	b	194e0 <__assert_fail@plt+0x7f7c>
   19638:	tst	r4, #8192	; 0x2000
   1963c:	moveq	r3, #8
   19640:	beq	19594 <__assert_fail@plt+0x8030>
   19644:	b	19458 <__assert_fail@plt+0x7ef4>
   19648:	tst	r4, #8192	; 0x2000
   1964c:	moveq	r3, #9
   19650:	beq	19594 <__assert_fail@plt+0x8030>
   19654:	b	19458 <__assert_fail@plt+0x7ef4>
   19658:	movw	r0, #1026	; 0x402
   1965c:	and	r0, r4, r0
   19660:	cmp	r0, #2
   19664:	bne	19458 <__assert_fail@plt+0x7ef4>
   19668:	mov	r3, #19
   1966c:	b	194a8 <__assert_fail@plt+0x7f44>
   19670:	and	r4, r4, #4608	; 0x1200
   19674:	cmp	r4, #512	; 0x200
   19678:	moveq	r3, #23
   1967c:	bne	19458 <__assert_fail@plt+0x7ef4>
   19680:	b	19594 <__assert_fail@plt+0x8030>
   19684:	mov	r2, #1
   19688:	ldrb	r9, [r0, #6]
   1968c:	cmp	r3, r2
   19690:	strb	r2, [r0, #4]
   19694:	ble	19744 <__assert_fail@plt+0x81e0>
   19698:	mov	r1, r8
   1969c:	mov	r0, r7
   196a0:	bl	14ec0 <__assert_fail@plt+0x395c>
   196a4:	mov	fp, r0
   196a8:	bl	11420 <iswalnum@plt>
   196ac:	adds	r0, r0, #0
   196b0:	movne	r0, #1
   196b4:	cmp	fp, #95	; 0x5f
   196b8:	orreq	r0, r0, #1
   196bc:	bfi	r9, r0, #6, #1
   196c0:	cmp	r6, #46	; 0x2e
   196c4:	strb	r9, [r5, #6]
   196c8:	beq	19854 <__assert_fail@plt+0x82f0>
   196cc:	bhi	19790 <__assert_fail@plt+0x822c>
   196d0:	cmp	r6, #40	; 0x28
   196d4:	beq	19834 <__assert_fail@plt+0x82d0>
   196d8:	bhi	19768 <__assert_fail@plt+0x8204>
   196dc:	cmp	r6, #10
   196e0:	beq	197e4 <__assert_fail@plt+0x8280>
   196e4:	cmp	r6, #36	; 0x24
   196e8:	bne	19334 <__assert_fail@plt+0x7dd0>
   196ec:	tst	r4, #8
   196f0:	bne	19734 <__assert_fail@plt+0x81d0>
   196f4:	ldr	r3, [r7, #48]	; 0x30
   196f8:	add	r8, r8, #1
   196fc:	cmp	r8, r3
   19700:	beq	19734 <__assert_fail@plt+0x81d0>
   19704:	mov	r2, r4
   19708:	mov	r1, r7
   1970c:	str	r8, [r7, #40]	; 0x28
   19710:	mov	r0, sp
   19714:	bl	192bc <__assert_fail@plt+0x7d58>
   19718:	ldr	r3, [r7, #40]	; 0x28
   1971c:	sub	r3, r3, #1
   19720:	str	r3, [r7, #40]	; 0x28
   19724:	ldrb	r3, [sp, #4]
   19728:	sub	r3, r3, #9
   1972c:	cmp	r3, #1
   19730:	bhi	19334 <__assert_fail@plt+0x7dd0>
   19734:	mov	r3, #12
   19738:	strb	r3, [r5, #4]
   1973c:	mov	r3, #32
   19740:	b	198a8 <__assert_fail@plt+0x8344>
   19744:	bl	113e4 <__ctype_b_loc@plt>
   19748:	ldr	r2, [r0]
   1974c:	lsl	r3, r6, #1
   19750:	ldrh	r3, [r2, r3]
   19754:	ubfx	r3, r3, #3, #1
   19758:	cmp	r6, #95	; 0x5f
   1975c:	orreq	r3, r3, #1
   19760:	bfi	r9, r3, #6, #1
   19764:	b	196c0 <__assert_fail@plt+0x815c>
   19768:	cmp	r6, #42	; 0x2a
   1976c:	beq	19804 <__assert_fail@plt+0x82a0>
   19770:	bcc	19844 <__assert_fail@plt+0x82e0>
   19774:	cmp	r6, #43	; 0x2b
   19778:	bne	19334 <__assert_fail@plt+0x7dd0>
   1977c:	movw	r3, #1026	; 0x402
   19780:	tst	r4, r3
   19784:	moveq	r3, #18
   19788:	beq	197b0 <__assert_fail@plt+0x824c>
   1978c:	b	19334 <__assert_fail@plt+0x7dd0>
   19790:	cmp	r6, #94	; 0x5e
   19794:	beq	1985c <__assert_fail@plt+0x82f8>
   19798:	bhi	197b8 <__assert_fail@plt+0x8254>
   1979c:	cmp	r6, #63	; 0x3f
   197a0:	beq	1980c <__assert_fail@plt+0x82a8>
   197a4:	cmp	r6, #91	; 0x5b
   197a8:	moveq	r3, #20
   197ac:	bne	19334 <__assert_fail@plt+0x7dd0>
   197b0:	strb	r3, [r5, #4]
   197b4:	b	19334 <__assert_fail@plt+0x7dd0>
   197b8:	cmp	r6, #124	; 0x7c
   197bc:	beq	197f4 <__assert_fail@plt+0x8290>
   197c0:	cmp	r6, #125	; 0x7d
   197c4:	beq	19820 <__assert_fail@plt+0x82bc>
   197c8:	cmp	r6, #123	; 0x7b
   197cc:	bne	19334 <__assert_fail@plt+0x7dd0>
   197d0:	and	r4, r4, #4608	; 0x1200
   197d4:	cmp	r4, #4608	; 0x1200
   197d8:	moveq	r3, #23
   197dc:	bne	19334 <__assert_fail@plt+0x7dd0>
   197e0:	b	197b0 <__assert_fail@plt+0x824c>
   197e4:	tst	r4, #2048	; 0x800
   197e8:	beq	19334 <__assert_fail@plt+0x7dd0>
   197ec:	mov	r3, #10
   197f0:	b	197b0 <__assert_fail@plt+0x824c>
   197f4:	and	r4, r4, #33792	; 0x8400
   197f8:	cmp	r4, #32768	; 0x8000
   197fc:	bne	19334 <__assert_fail@plt+0x7dd0>
   19800:	b	197ec <__assert_fail@plt+0x8288>
   19804:	mov	r3, #11
   19808:	b	197b0 <__assert_fail@plt+0x824c>
   1980c:	movw	r3, #1026	; 0x402
   19810:	tst	r4, r3
   19814:	moveq	r3, #19
   19818:	beq	197b0 <__assert_fail@plt+0x824c>
   1981c:	b	19334 <__assert_fail@plt+0x7dd0>
   19820:	and	r4, r4, #4608	; 0x1200
   19824:	cmp	r4, #4608	; 0x1200
   19828:	moveq	r3, #24
   1982c:	bne	19334 <__assert_fail@plt+0x7dd0>
   19830:	b	197b0 <__assert_fail@plt+0x824c>
   19834:	tst	r4, #8192	; 0x2000
   19838:	movne	r3, #8
   1983c:	bne	197b0 <__assert_fail@plt+0x824c>
   19840:	b	19334 <__assert_fail@plt+0x7dd0>
   19844:	tst	r4, #8192	; 0x2000
   19848:	movne	r3, #9
   1984c:	bne	197b0 <__assert_fail@plt+0x824c>
   19850:	b	19334 <__assert_fail@plt+0x7dd0>
   19854:	mov	r3, #5
   19858:	b	197b0 <__assert_fail@plt+0x824c>
   1985c:	ldr	r3, [pc, #76]	; 198b0 <__assert_fail@plt+0x834c>
   19860:	tst	r4, r3
   19864:	moveq	r3, #1
   19868:	movne	r3, #0
   1986c:	cmp	r8, #0
   19870:	moveq	r3, #0
   19874:	cmp	r3, #0
   19878:	beq	1989c <__assert_fail@plt+0x8338>
   1987c:	add	r8, sl, r8
   19880:	eor	r4, r4, #2048	; 0x800
   19884:	ldrb	r2, [r8, #-1]
   19888:	ubfx	r4, r4, #11, #1
   1988c:	cmp	r2, #10
   19890:	orrne	r4, r4, #1
   19894:	cmp	r4, #0
   19898:	bne	19334 <__assert_fail@plt+0x7dd0>
   1989c:	mov	r3, #12
   198a0:	strb	r3, [r5, #4]
   198a4:	mov	r3, #16
   198a8:	str	r3, [r5]
   198ac:	b	19334 <__assert_fail@plt+0x7dd0>
   198b0:	addeq	r0, r0, r8
   198b4:	push	{r4, lr}
   198b8:	mov	r4, r1
   198bc:	bl	192bc <__assert_fail@plt+0x7d58>
   198c0:	ldr	r3, [r4, #40]	; 0x28
   198c4:	add	r0, r3, r0
   198c8:	str	r0, [r4, #40]	; 0x28
   198cc:	pop	{r4, pc}
   198d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198d4:	mov	r8, r0
   198d8:	mov	r5, r1
   198dc:	mov	r9, r2
   198e0:	mvn	r4, #0
   198e4:	mov	r7, #10
   198e8:	movw	r6, #32816	; 0x8030
   198ec:	mov	r2, r9
   198f0:	mov	r1, r8
   198f4:	mov	r0, r5
   198f8:	bl	198b4 <__assert_fail@plt+0x8350>
   198fc:	ldrb	r2, [r5, #4]
   19900:	ldrb	r3, [r5]
   19904:	cmp	r2, #2
   19908:	beq	1996c <__assert_fail@plt+0x8408>
   1990c:	cmp	r3, #44	; 0x2c
   19910:	cmpne	r2, #24
   19914:	beq	19970 <__assert_fail@plt+0x840c>
   19918:	cmp	r2, #1
   1991c:	bne	19964 <__assert_fail@plt+0x8400>
   19920:	sub	r1, r3, #48	; 0x30
   19924:	uxtb	r0, r1
   19928:	cmp	r0, #9
   1992c:	movhi	r2, #0
   19930:	movls	r2, #1
   19934:	cmn	r4, #2
   19938:	moveq	r2, #0
   1993c:	cmp	r2, #0
   19940:	beq	19964 <__assert_fail@plt+0x8400>
   19944:	cmn	r4, #1
   19948:	moveq	r4, r1
   1994c:	beq	198ec <__assert_fail@plt+0x8388>
   19950:	mla	r4, r7, r4, r3
   19954:	cmp	r4, r6
   19958:	movge	r4, r6
   1995c:	sub	r4, r4, #48	; 0x30
   19960:	b	198ec <__assert_fail@plt+0x8388>
   19964:	mvn	r4, #1
   19968:	b	198ec <__assert_fail@plt+0x8388>
   1996c:	mvn	r4, #1
   19970:	mov	r0, r4
   19974:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19978:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1997c:	mov	r6, r0
   19980:	mov	r4, r1
   19984:	mov	r0, r1
   19988:	mov	r7, r2
   1998c:	mov	r8, r3
   19990:	ldr	r5, [r1, #40]	; 0x28
   19994:	mov	r1, r5
   19998:	bl	170fc <__assert_fail@plt+0x5b98>
   1999c:	cmp	r0, #1
   199a0:	ble	199d0 <__assert_fail@plt+0x846c>
   199a4:	mov	r3, #1
   199a8:	mov	r2, r0
   199ac:	mov	r0, r4
   199b0:	str	r3, [r6]
   199b4:	bl	14ec0 <__assert_fail@plt+0x395c>
   199b8:	add	r5, r5, r2
   199bc:	str	r0, [r6, #4]
   199c0:	mov	r0, #0
   199c4:	str	r5, [r4, #40]	; 0x28
   199c8:	add	sp, sp, #8
   199cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   199d0:	ldrb	r2, [r7, #4]
   199d4:	add	r5, r5, r8
   199d8:	str	r5, [r4, #40]	; 0x28
   199dc:	and	r3, r2, #251	; 0xfb
   199e0:	cmp	r2, #28
   199e4:	cmpne	r3, #26
   199e8:	bne	19b30 <__assert_fail@plt+0x85cc>
   199ec:	ldr	r3, [r4, #56]	; 0x38
   199f0:	cmp	r5, r3
   199f4:	ldrblt	sl, [r7]
   199f8:	movlt	r9, #0
   199fc:	blt	19aa0 <__assert_fail@plt+0x853c>
   19a00:	mov	r0, #7
   19a04:	b	199c8 <__assert_fail@plt+0x8464>
   19a08:	ldrb	r3, [r4, #76]	; 0x4c
   19a0c:	cmp	r3, #0
   19a10:	beq	19acc <__assert_fail@plt+0x8568>
   19a14:	ldr	r3, [r4, #28]
   19a18:	cmp	r5, r3
   19a1c:	beq	19a30 <__assert_fail@plt+0x84cc>
   19a20:	ldr	r3, [r4, #8]
   19a24:	ldr	r3, [r3, r5, lsl #2]
   19a28:	cmn	r3, #1
   19a2c:	beq	19abc <__assert_fail@plt+0x8558>
   19a30:	ldr	r3, [r4]
   19a34:	ldr	r2, [r4, #12]
   19a38:	ldr	r1, [r2, r5, lsl #2]
   19a3c:	ldr	r2, [r4, #24]
   19a40:	add	r3, r3, r1
   19a44:	ldrb	r8, [r3, r2]
   19a48:	tst	r8, #128	; 0x80
   19a4c:	bne	19abc <__assert_fail@plt+0x8558>
   19a50:	mov	r1, r5
   19a54:	mov	r0, r4
   19a58:	bl	170fc <__assert_fail@plt+0x5b98>
   19a5c:	add	r0, r5, r0
   19a60:	str	r0, [r4, #40]	; 0x28
   19a64:	ldr	r3, [r4, #40]	; 0x28
   19a68:	ldr	r2, [r4, #56]	; 0x38
   19a6c:	cmp	r2, r3
   19a70:	ble	19a00 <__assert_fail@plt+0x849c>
   19a74:	cmp	sl, r8
   19a78:	ldr	r2, [r6, #4]
   19a7c:	bne	19a90 <__assert_fail@plt+0x852c>
   19a80:	ldr	r1, [r4, #4]
   19a84:	ldrb	r1, [r1, r3]
   19a88:	cmp	r1, #93	; 0x5d
   19a8c:	beq	19ae8 <__assert_fail@plt+0x8584>
   19a90:	strb	r8, [r2, r9]
   19a94:	add	r9, r9, #1
   19a98:	cmp	r9, #32
   19a9c:	beq	19a00 <__assert_fail@plt+0x849c>
   19aa0:	ldrb	r3, [r7, #4]
   19aa4:	ldr	r5, [r4, #40]	; 0x28
   19aa8:	cmp	r3, #30
   19aac:	bne	19abc <__assert_fail@plt+0x8558>
   19ab0:	ldrb	r3, [r4, #75]	; 0x4b
   19ab4:	cmp	r3, #0
   19ab8:	bne	19a08 <__assert_fail@plt+0x84a4>
   19abc:	add	r2, r5, #1
   19ac0:	ldr	r3, [r4, #4]
   19ac4:	str	r2, [r4, #40]	; 0x28
   19ac8:	b	19ae0 <__assert_fail@plt+0x857c>
   19acc:	ldr	r0, [r4]
   19ad0:	add	r2, r5, #1
   19ad4:	ldr	r3, [r4, #24]
   19ad8:	str	r2, [r4, #40]	; 0x28
   19adc:	add	r5, r0, r5
   19ae0:	ldrb	r8, [r3, r5]
   19ae4:	b	19a64 <__assert_fail@plt+0x8500>
   19ae8:	add	r3, r3, #1
   19aec:	mov	r0, #0
   19af0:	str	r3, [r4, #40]	; 0x28
   19af4:	strb	r0, [r2, r9]
   19af8:	ldrb	r3, [r7, #4]
   19afc:	cmp	r3, #28
   19b00:	beq	19b20 <__assert_fail@plt+0x85bc>
   19b04:	cmp	r3, #30
   19b08:	beq	19b28 <__assert_fail@plt+0x85c4>
   19b0c:	cmp	r3, #26
   19b10:	moveq	r3, #3
   19b14:	bne	199c8 <__assert_fail@plt+0x8464>
   19b18:	str	r3, [r6]
   19b1c:	b	199c8 <__assert_fail@plt+0x8464>
   19b20:	mov	r3, #2
   19b24:	b	19b18 <__assert_fail@plt+0x85b4>
   19b28:	mov	r3, #4
   19b2c:	b	19b18 <__assert_fail@plt+0x85b4>
   19b30:	ldrb	r3, [sp, #44]	; 0x2c
   19b34:	cmp	r2, #22
   19b38:	orrne	r3, r3, #1
   19b3c:	cmp	r3, #0
   19b40:	bne	19b64 <__assert_fail@plt+0x8600>
   19b44:	mov	r1, r4
   19b48:	mov	r0, sp
   19b4c:	ldr	r2, [sp, #40]	; 0x28
   19b50:	bl	15090 <__assert_fail@plt+0x3b2c>
   19b54:	ldrb	r3, [sp, #4]
   19b58:	cmp	r3, #21
   19b5c:	movne	r0, #11
   19b60:	bne	199c8 <__assert_fail@plt+0x8464>
   19b64:	ldrb	r3, [r7]
   19b68:	mov	r0, #0
   19b6c:	str	r0, [r6]
   19b70:	strb	r3, [r6, #4]
   19b74:	b	199c8 <__assert_fail@plt+0x8464>
   19b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b7c:	mov	fp, #0
   19b80:	sub	sp, sp, #14400	; 0x3840
   19b84:	sub	sp, sp, #4
   19b88:	mov	sl, r0
   19b8c:	add	r0, sp, #64	; 0x40
   19b90:	mov	r9, r1
   19b94:	str	fp, [r1, #44]	; 0x2c
   19b98:	str	fp, [r1, #48]	; 0x30
   19b9c:	bl	159a8 <__assert_fail@plt+0x4444>
   19ba0:	str	fp, [sp, #4]
   19ba4:	ldr	r2, [sp, #4]
   19ba8:	ldr	r3, [r9, #8]
   19bac:	cmp	r2, r3
   19bb0:	blt	19be4 <__assert_fail@plt+0x8680>
   19bb4:	cmp	fp, #0
   19bb8:	bgt	1a004 <__assert_fail@plt+0x8aa0>
   19bbc:	bne	19fec <__assert_fail@plt+0x8a88>
   19bc0:	mov	r1, #256	; 0x100
   19bc4:	mov	r0, #4
   19bc8:	bl	20e98 <__assert_fail@plt+0xf934>
   19bcc:	str	r0, [r9, #44]	; 0x2c
   19bd0:	adds	r0, r0, #0
   19bd4:	movne	r0, #1
   19bd8:	add	sp, sp, #14400	; 0x3840
   19bdc:	add	sp, sp, #4
   19be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19be4:	ldr	r3, [sp, #4]
   19be8:	ldr	r2, [sp, #4]
   19bec:	lsl	r3, r3, #2
   19bf0:	str	r3, [sp, #12]
   19bf4:	ldr	r3, [r9, #12]
   19bf8:	ldr	r2, [r3, r2, lsl #2]
   19bfc:	ldr	r3, [sl]
   19c00:	add	r1, r3, r2, lsl #3
   19c04:	ldrb	r5, [r1, #4]
   19c08:	str	r1, [sp, #8]
   19c0c:	ldr	r4, [r1, #4]
   19c10:	cmp	r5, #1
   19c14:	ubfx	r4, r4, #8, #10
   19c18:	bne	19c70 <__assert_fail@plt+0x870c>
   19c1c:	ldrb	r1, [r3, r2, lsl #3]
   19c20:	add	r0, sp, #64	; 0x40
   19c24:	bl	14e04 <__assert_fail@plt+0x38a0>
   19c28:	cmp	r4, #0
   19c2c:	beq	19d10 <__assert_fail@plt+0x87ac>
   19c30:	tst	r4, #32
   19c34:	beq	19c5c <__assert_fail@plt+0x86f8>
   19c38:	ldr	r6, [sp, #64]	; 0x40
   19c3c:	add	r0, sp, #64	; 0x40
   19c40:	bl	159a8 <__assert_fail@plt+0x4444>
   19c44:	and	r6, r6, #1024	; 0x400
   19c48:	cmp	r6, #0
   19c4c:	beq	19d8c <__assert_fail@plt+0x8828>
   19c50:	ldr	r3, [sp, #64]	; 0x40
   19c54:	orr	r3, r3, #1024	; 0x400
   19c58:	str	r3, [sp, #64]	; 0x40
   19c5c:	tst	r4, #128	; 0x80
   19c60:	beq	19d00 <__assert_fail@plt+0x879c>
   19c64:	add	r0, sp, #64	; 0x40
   19c68:	bl	159a8 <__assert_fail@plt+0x4444>
   19c6c:	b	19d8c <__assert_fail@plt+0x8828>
   19c70:	cmp	r5, #3
   19c74:	bne	19c88 <__assert_fail@plt+0x8724>
   19c78:	add	r0, sp, #64	; 0x40
   19c7c:	ldr	r1, [r3, r2, lsl #3]
   19c80:	bl	14e70 <__assert_fail@plt+0x390c>
   19c84:	b	19c28 <__assert_fail@plt+0x86c4>
   19c88:	cmp	r5, #5
   19c8c:	bne	19ce4 <__assert_fail@plt+0x8780>
   19c90:	ldr	r3, [sl, #92]	; 0x5c
   19c94:	cmp	r3, #1
   19c98:	ble	19cd0 <__assert_fail@plt+0x876c>
   19c9c:	add	r0, sp, #64	; 0x40
   19ca0:	ldr	r1, [sl, #60]	; 0x3c
   19ca4:	bl	14e70 <__assert_fail@plt+0x390c>
   19ca8:	ldr	r2, [sl, #128]	; 0x80
   19cac:	tst	r2, #64	; 0x40
   19cb0:	ldreq	r3, [sp, #64]	; 0x40
   19cb4:	biceq	r3, r3, #1024	; 0x400
   19cb8:	streq	r3, [sp, #64]	; 0x40
   19cbc:	tst	r2, #128	; 0x80
   19cc0:	ldrne	r3, [sp, #64]	; 0x40
   19cc4:	bicne	r3, r3, #1
   19cc8:	strne	r3, [sp, #64]	; 0x40
   19ccc:	b	19c28 <__assert_fail@plt+0x86c4>
   19cd0:	mov	r2, #32
   19cd4:	mvn	r1, #0
   19cd8:	add	r0, sp, #64	; 0x40
   19cdc:	bl	11444 <memset@plt>
   19ce0:	b	19ca8 <__assert_fail@plt+0x8744>
   19ce4:	cmp	r5, #7
   19ce8:	bne	19d8c <__assert_fail@plt+0x8828>
   19cec:	mvn	r2, #0
   19cf0:	mvn	r3, #0
   19cf4:	strd	r2, [sp, #64]	; 0x40
   19cf8:	strd	r2, [sp, #72]	; 0x48
   19cfc:	b	19ca8 <__assert_fail@plt+0x8744>
   19d00:	tst	r4, #4
   19d04:	bne	19d20 <__assert_fail@plt+0x87bc>
   19d08:	tst	r4, #8
   19d0c:	bne	19dc4 <__assert_fail@plt+0x8860>
   19d10:	add	r4, sp, #6208	; 0x1840
   19d14:	mov	r6, #0
   19d18:	add	r4, r4, #28
   19d1c:	b	19f80 <__assert_fail@plt+0x8a1c>
   19d20:	cmp	r5, #1
   19d24:	bne	19d38 <__assert_fail@plt+0x87d4>
   19d28:	ldr	r3, [sp, #8]
   19d2c:	ldrb	r3, [r3, #6]
   19d30:	tst	r3, #64	; 0x40
   19d34:	beq	19c64 <__assert_fail@plt+0x8700>
   19d38:	ldr	r3, [sl, #92]	; 0x5c
   19d3c:	add	r2, sl, #96	; 0x60
   19d40:	cmp	r3, #1
   19d44:	add	r3, sp, #64	; 0x40
   19d48:	ble	19d9c <__assert_fail@plt+0x8838>
   19d4c:	ldr	ip, [sl, #60]	; 0x3c
   19d50:	add	lr, sl, #128	; 0x80
   19d54:	mov	r0, #0
   19d58:	sub	ip, ip, #4
   19d5c:	ldr	r1, [ip, #4]!
   19d60:	ldr	r6, [r2], #4
   19d64:	ldr	r7, [r3]
   19d68:	mvn	r1, r1
   19d6c:	orr	r1, r1, r6
   19d70:	cmp	lr, r2
   19d74:	and	r1, r1, r7
   19d78:	orr	r0, r0, r1
   19d7c:	str	r1, [r3], #4
   19d80:	bne	19d5c <__assert_fail@plt+0x87f8>
   19d84:	cmp	r0, #0
   19d88:	bne	19d08 <__assert_fail@plt+0x87a4>
   19d8c:	ldr	r3, [sp, #4]
   19d90:	add	r3, r3, #1
   19d94:	str	r3, [sp, #4]
   19d98:	b	19ba4 <__assert_fail@plt+0x8640>
   19d9c:	add	ip, sl, #128	; 0x80
   19da0:	mov	r0, #0
   19da4:	ldr	lr, [r2], #4
   19da8:	ldr	r1, [r3]
   19dac:	cmp	r2, ip
   19db0:	and	r1, r1, lr
   19db4:	orr	r0, r0, r1
   19db8:	str	r1, [r3], #4
   19dbc:	bne	19da4 <__assert_fail@plt+0x8840>
   19dc0:	b	19d84 <__assert_fail@plt+0x8820>
   19dc4:	cmp	r5, #1
   19dc8:	bne	19ddc <__assert_fail@plt+0x8878>
   19dcc:	ldr	r3, [sp, #8]
   19dd0:	ldrb	r3, [r3, #6]
   19dd4:	tst	r3, #64	; 0x40
   19dd8:	bne	19c64 <__assert_fail@plt+0x8700>
   19ddc:	ldr	r3, [sl, #92]	; 0x5c
   19de0:	add	r2, sl, #96	; 0x60
   19de4:	cmp	r3, #1
   19de8:	add	r3, sp, #64	; 0x40
   19dec:	ble	19e30 <__assert_fail@plt+0x88cc>
   19df0:	ldr	r0, [sl, #60]	; 0x3c
   19df4:	add	lr, sl, #128	; 0x80
   19df8:	mov	r1, #0
   19dfc:	sub	r0, r0, #4
   19e00:	ldr	ip, [r2], #4
   19e04:	ldr	r4, [r0, #4]!
   19e08:	ldr	r6, [r3]
   19e0c:	cmp	lr, r2
   19e10:	and	ip, ip, r4
   19e14:	bic	ip, r6, ip
   19e18:	orr	r1, r1, ip
   19e1c:	str	ip, [r3], #4
   19e20:	bne	19e00 <__assert_fail@plt+0x889c>
   19e24:	cmp	r1, #0
   19e28:	beq	19d8c <__assert_fail@plt+0x8828>
   19e2c:	b	19d10 <__assert_fail@plt+0x87ac>
   19e30:	add	ip, sl, #128	; 0x80
   19e34:	mov	r1, #0
   19e38:	ldr	lr, [r2], #4
   19e3c:	ldr	r0, [r3]
   19e40:	cmp	r2, ip
   19e44:	bic	r0, r0, lr
   19e48:	orr	r1, r1, r0
   19e4c:	str	r0, [r3], #4
   19e50:	bne	19e38 <__assert_fail@plt+0x88d4>
   19e54:	b	19e24 <__assert_fail@plt+0x88c0>
   19e58:	cmp	r5, #1
   19e5c:	sub	r0, r4, #28
   19e60:	bne	19e78 <__assert_fail@plt+0x8914>
   19e64:	ldr	r3, [sp, #8]
   19e68:	ldrb	r1, [r3]
   19e6c:	bl	14e38 <__assert_fail@plt+0x38d4>
   19e70:	cmp	r0, #0
   19e74:	beq	19f78 <__assert_fail@plt+0x8a14>
   19e78:	add	r1, sp, #64	; 0x40
   19e7c:	sub	r2, r4, #32
   19e80:	add	lr, sp, #1088	; 0x440
   19e84:	mov	ip, r2
   19e88:	mov	r7, r1
   19e8c:	mov	r0, #0
   19e90:	ldr	r8, [ip, #4]!
   19e94:	ldr	r3, [r7], #4
   19e98:	cmp	r4, ip
   19e9c:	and	r3, r3, r8
   19ea0:	orr	r0, r0, r3
   19ea4:	str	r3, [lr], #4
   19ea8:	bne	19e90 <__assert_fail@plt+0x892c>
   19eac:	cmp	r0, #0
   19eb0:	beq	19f78 <__assert_fail@plt+0x8a14>
   19eb4:	mov	r7, #0
   19eb8:	add	r8, sp, #2112	; 0x840
   19ebc:	mov	r0, r7
   19ec0:	ldr	ip, [r2, #4]!
   19ec4:	ldr	r3, [r1]
   19ec8:	cmp	r4, r2
   19ecc:	bic	lr, ip, r3
   19ed0:	bic	r3, r3, ip
   19ed4:	orr	r0, r0, lr
   19ed8:	orr	r7, r7, r3
   19edc:	str	lr, [r8], #4
   19ee0:	str	r3, [r1], #4
   19ee4:	bne	19ec0 <__assert_fail@plt+0x895c>
   19ee8:	mov	r3, #12
   19eec:	add	r2, sp, #3136	; 0xc40
   19ef0:	cmp	r0, #0
   19ef4:	mla	r8, r3, r6, r2
   19ef8:	beq	19f54 <__assert_fail@plt+0x89f0>
   19efc:	add	r2, sp, #14400	; 0x3840
   19f00:	add	lr, sp, #2112	; 0x840
   19f04:	add	ip, r2, fp, lsl #5
   19f08:	ldm	lr!, {r0, r1, r2, r3}
   19f0c:	sub	ip, ip, #8192	; 0x2000
   19f10:	stmia	ip!, {r0, r1, r2, r3}
   19f14:	ldm	lr, {r0, r1, r2, r3}
   19f18:	add	lr, sp, #1088	; 0x440
   19f1c:	stm	ip, {r0, r1, r2, r3}
   19f20:	sub	ip, r4, #28
   19f24:	ldm	lr!, {r0, r1, r2, r3}
   19f28:	stmia	ip!, {r0, r1, r2, r3}
   19f2c:	ldm	lr, {r0, r1, r2, r3}
   19f30:	stm	ip, {r0, r1, r2, r3}
   19f34:	mov	r3, #12
   19f38:	add	r2, sp, #3136	; 0xc40
   19f3c:	mov	r1, r8
   19f40:	mla	r0, r3, fp, r2
   19f44:	bl	17788 <__assert_fail@plt+0x6224>
   19f48:	cmp	r0, #0
   19f4c:	bne	19fd8 <__assert_fail@plt+0x8a74>
   19f50:	add	fp, fp, #1
   19f54:	ldr	r3, [r9, #12]
   19f58:	mov	r0, r8
   19f5c:	ldr	r2, [sp, #12]
   19f60:	ldr	r1, [r3, r2]
   19f64:	bl	182a8 <__assert_fail@plt+0x6d44>
   19f68:	cmp	r0, #0
   19f6c:	beq	19fd8 <__assert_fail@plt+0x8a74>
   19f70:	cmp	r7, #0
   19f74:	beq	19f88 <__assert_fail@plt+0x8a24>
   19f78:	add	r6, r6, #1
   19f7c:	add	r4, r4, #32
   19f80:	cmp	r6, fp
   19f84:	blt	19e58 <__assert_fail@plt+0x88f4>
   19f88:	cmp	r6, fp
   19f8c:	bne	19d8c <__assert_fail@plt+0x8828>
   19f90:	add	r3, sp, #14400	; 0x3840
   19f94:	add	lr, sp, #64	; 0x40
   19f98:	add	ip, r3, fp, lsl #5
   19f9c:	ldm	lr!, {r0, r1, r2, r3}
   19fa0:	sub	ip, ip, #8192	; 0x2000
   19fa4:	stmia	ip!, {r0, r1, r2, r3}
   19fa8:	ldm	lr, {r0, r1, r2, r3}
   19fac:	stm	ip, {r0, r1, r2, r3}
   19fb0:	ldr	r3, [r9, #12]
   19fb4:	ldr	r2, [sp, #12]
   19fb8:	ldr	r1, [r3, r2]
   19fbc:	mov	r3, #12
   19fc0:	add	r2, sp, #3136	; 0xc40
   19fc4:	mla	r0, r3, fp, r2
   19fc8:	bl	1593c <__assert_fail@plt+0x43d8>
   19fcc:	cmp	r0, #0
   19fd0:	addeq	fp, fp, #1
   19fd4:	beq	19c64 <__assert_fail@plt+0x8700>
   19fd8:	add	r5, sp, #3136	; 0xc40
   19fdc:	mov	r4, #0
   19fe0:	cmp	r4, fp
   19fe4:	add	r5, r5, #12
   19fe8:	blt	19ff4 <__assert_fail@plt+0x8a90>
   19fec:	mov	r0, #0
   19ff0:	b	19bd8 <__assert_fail@plt+0x8674>
   19ff4:	ldr	r0, [r5, #-4]
   19ff8:	add	r4, r4, #1
   19ffc:	bl	13648 <__assert_fail@plt+0x20e4>
   1a000:	b	19fe0 <__assert_fail@plt+0x8a7c>
   1a004:	add	r1, fp, #1
   1a008:	add	r0, sp, #20
   1a00c:	bl	1597c <__assert_fail@plt+0x4418>
   1a010:	add	r4, sp, #2112	; 0x840
   1a014:	cmp	r0, #0
   1a018:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1a01c:	mov	r6, r0
   1a020:	beq	1a050 <__assert_fail@plt+0x8aec>
   1a024:	ldr	r0, [sp, #28]
   1a028:	add	r5, sp, #3136	; 0xc40
   1a02c:	mov	r4, #0
   1a030:	bl	13648 <__assert_fail@plt+0x20e4>
   1a034:	add	r4, r4, #1
   1a038:	ldr	r0, [r5, #8]
   1a03c:	add	r5, r5, #12
   1a040:	bl	13648 <__assert_fail@plt+0x20e4>
   1a044:	cmp	r4, fp
   1a048:	bne	1a034 <__assert_fail@plt+0x8ad0>
   1a04c:	b	19fec <__assert_fail@plt+0x8a88>
   1a050:	add	r0, sp, #32
   1a054:	mov	r5, r6
   1a058:	bl	159a8 <__assert_fail@plt+0x4444>
   1a05c:	add	r3, sp, #3136	; 0xc40
   1a060:	str	r6, [sp, #4]
   1a064:	mov	r8, r3
   1a068:	str	r3, [sp, #8]
   1a06c:	mov	r3, #0
   1a070:	mov	r7, r3
   1a074:	str	r3, [r4, #-2088]	; 0xfffff7d8
   1a078:	ldr	r3, [r8, #4]
   1a07c:	cmp	r3, r7
   1a080:	bgt	1a118 <__assert_fail@plt+0x8bb4>
   1a084:	mov	r3, #0
   1a088:	add	r2, sp, #20
   1a08c:	mov	r1, sl
   1a090:	add	r0, sp, #16
   1a094:	bl	17940 <__assert_fail@plt+0x63dc>
   1a098:	add	r3, sp, #64	; 0x40
   1a09c:	cmp	r0, #0
   1a0a0:	mov	r7, r0
   1a0a4:	str	r0, [r3, r5, lsl #2]
   1a0a8:	bne	1a0b8 <__assert_fail@plt+0x8b54>
   1a0ac:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a0b0:	cmp	r3, #0
   1a0b4:	bne	1a024 <__assert_fail@plt+0x8ac0>
   1a0b8:	ldrsb	r3, [r7, #52]	; 0x34
   1a0bc:	cmp	r3, #0
   1a0c0:	addge	r3, sp, #1088	; 0x440
   1a0c4:	strge	r7, [r4, r5, lsl #2]
   1a0c8:	strge	r7, [r3, r5, lsl #2]
   1a0cc:	bge	1a190 <__assert_fail@plt+0x8c2c>
   1a0d0:	mov	r3, #1
   1a0d4:	add	r2, sp, #20
   1a0d8:	mov	r1, sl
   1a0dc:	add	r0, sp, #16
   1a0e0:	bl	17940 <__assert_fail@plt+0x63dc>
   1a0e4:	add	r3, sp, #1088	; 0x440
   1a0e8:	cmp	r0, #0
   1a0ec:	str	r0, [r3, r5, lsl #2]
   1a0f0:	bne	1a15c <__assert_fail@plt+0x8bf8>
   1a0f4:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a0f8:	cmp	r3, #0
   1a0fc:	bne	1a024 <__assert_fail@plt+0x8ac0>
   1a100:	ldr	r3, [sl, #92]	; 0x5c
   1a104:	cmp	r3, #2
   1a108:	ldr	r3, [sp, #4]
   1a10c:	movge	r3, #1
   1a110:	str	r3, [sp, #4]
   1a114:	b	1a164 <__assert_fail@plt+0x8c00>
   1a118:	ldr	r3, [r8, #8]
   1a11c:	ldr	r2, [r3, r7, lsl #2]
   1a120:	ldr	r3, [sl, #12]
   1a124:	ldr	r3, [r3, r2, lsl #2]
   1a128:	cmn	r3, #1
   1a12c:	bne	1a138 <__assert_fail@plt+0x8bd4>
   1a130:	add	r7, r7, #1
   1a134:	b	1a078 <__assert_fail@plt+0x8b14>
   1a138:	ldr	r1, [sl, #24]
   1a13c:	mov	r2, #12
   1a140:	add	r0, sp, #20
   1a144:	mla	r1, r2, r3, r1
   1a148:	bl	18680 <__assert_fail@plt+0x711c>
   1a14c:	cmp	r0, #0
   1a150:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1a154:	beq	1a130 <__assert_fail@plt+0x8bcc>
   1a158:	b	1a024 <__assert_fail@plt+0x8ac0>
   1a15c:	cmp	r7, r0
   1a160:	bne	1a100 <__assert_fail@plt+0x8b9c>
   1a164:	mov	r3, #2
   1a168:	add	r2, sp, #20
   1a16c:	mov	r1, sl
   1a170:	add	r0, sp, #16
   1a174:	bl	17940 <__assert_fail@plt+0x63dc>
   1a178:	cmp	r0, #0
   1a17c:	str	r0, [r4, r5, lsl #2]
   1a180:	bne	1a190 <__assert_fail@plt+0x8c2c>
   1a184:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a188:	cmp	r3, #0
   1a18c:	bne	1a024 <__assert_fail@plt+0x8ac0>
   1a190:	add	r7, sp, #6208	; 0x1840
   1a194:	add	r0, sp, #32
   1a198:	add	r1, r7, r5, lsl #5
   1a19c:	add	r5, r5, #1
   1a1a0:	add	r8, r8, #12
   1a1a4:	bl	14e70 <__assert_fail@plt+0x390c>
   1a1a8:	cmp	r5, fp
   1a1ac:	bne	1a06c <__assert_fail@plt+0x8b08>
   1a1b0:	ldr	r3, [sp, #4]
   1a1b4:	cmp	r3, #0
   1a1b8:	bne	1a2cc <__assert_fail@plt+0x8d68>
   1a1bc:	mov	r1, #256	; 0x100
   1a1c0:	mov	r0, #4
   1a1c4:	bl	20e98 <__assert_fail@plt+0xf934>
   1a1c8:	cmp	r0, #0
   1a1cc:	mov	r2, r0
   1a1d0:	str	r0, [r9, #44]	; 0x2c
   1a1d4:	beq	1a024 <__assert_fail@plt+0x8ac0>
   1a1d8:	ldr	r0, [sp, #4]
   1a1dc:	add	r1, sp, #32
   1a1e0:	mov	r5, r7
   1a1e4:	add	r9, sl, #96	; 0x60
   1a1e8:	ldr	ip, [r1], #4
   1a1ec:	add	r4, r2, r0, lsl #7
   1a1f0:	mov	lr, #1
   1a1f4:	cmp	ip, #0
   1a1f8:	bne	1a27c <__assert_fail@plt+0x8d18>
   1a1fc:	add	r0, r0, #1
   1a200:	add	r5, r5, #4
   1a204:	cmp	r0, #8
   1a208:	bne	1a1e8 <__assert_fail@plt+0x8c84>
   1a20c:	add	r5, sp, #2112	; 0x840
   1a210:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   1a214:	tst	r3, #1024	; 0x400
   1a218:	beq	1a248 <__assert_fail@plt+0x8ce4>
   1a21c:	mov	r4, #0
   1a220:	mov	r1, #10
   1a224:	mov	r0, r7
   1a228:	bl	14e38 <__assert_fail@plt+0x38d4>
   1a22c:	cmp	r0, #0
   1a230:	beq	1a364 <__assert_fail@plt+0x8e00>
   1a234:	ldr	r1, [sp, #4]
   1a238:	ldr	r3, [r5, r4, lsl #2]
   1a23c:	cmp	r1, #0
   1a240:	strne	r3, [r2, #1064]	; 0x428
   1a244:	str	r3, [r2, #40]	; 0x28
   1a248:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   1a24c:	bl	13648 <__assert_fail@plt+0x20e4>
   1a250:	ldr	r3, [sp, #8]
   1a254:	add	r6, r6, #1
   1a258:	ldr	r0, [r3, #8]
   1a25c:	bl	13648 <__assert_fail@plt+0x20e4>
   1a260:	ldr	r3, [sp, #8]
   1a264:	cmp	r6, fp
   1a268:	add	r3, r3, #12
   1a26c:	str	r3, [sp, #8]
   1a270:	bne	1a250 <__assert_fail@plt+0x8cec>
   1a274:	mov	r0, #1
   1a278:	b	19bd8 <__assert_fail@plt+0x8674>
   1a27c:	tst	ip, #1
   1a280:	beq	1a2bc <__assert_fail@plt+0x8d58>
   1a284:	mov	r3, #0
   1a288:	b	1a290 <__assert_fail@plt+0x8d2c>
   1a28c:	add	r3, r3, #1
   1a290:	ldr	sl, [r5, r3, lsl #5]
   1a294:	tst	lr, sl
   1a298:	beq	1a28c <__assert_fail@plt+0x8d28>
   1a29c:	ldr	sl, [r9, r0, lsl #2]
   1a2a0:	lsl	r3, r3, #2
   1a2a4:	add	r8, sp, #2112	; 0x840
   1a2a8:	add	r3, r8, r3
   1a2ac:	tst	lr, sl
   1a2b0:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   1a2b4:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1a2b8:	str	r3, [r4]
   1a2bc:	lsl	lr, lr, #1
   1a2c0:	add	r4, r4, #4
   1a2c4:	lsr	ip, ip, #1
   1a2c8:	b	1a1f4 <__assert_fail@plt+0x8c90>
   1a2cc:	mov	r1, #512	; 0x200
   1a2d0:	mov	r0, #4
   1a2d4:	bl	20e98 <__assert_fail@plt+0xf934>
   1a2d8:	cmp	r0, #0
   1a2dc:	mov	r2, r0
   1a2e0:	str	r0, [r9, #48]	; 0x30
   1a2e4:	beq	1a024 <__assert_fail@plt+0x8ac0>
   1a2e8:	add	r3, sp, #32
   1a2ec:	add	r9, r0, #1024	; 0x400
   1a2f0:	mov	r4, r7
   1a2f4:	ldr	ip, [r3], #4
   1a2f8:	mov	lr, r0
   1a2fc:	mov	r5, #1
   1a300:	cmp	ip, #0
   1a304:	bne	1a31c <__assert_fail@plt+0x8db8>
   1a308:	add	r0, r0, #128	; 0x80
   1a30c:	add	r4, r4, #4
   1a310:	cmp	r0, r9
   1a314:	bne	1a2f4 <__assert_fail@plt+0x8d90>
   1a318:	b	1a20c <__assert_fail@plt+0x8ca8>
   1a31c:	tst	ip, #1
   1a320:	beq	1a354 <__assert_fail@plt+0x8df0>
   1a324:	mov	r1, #0
   1a328:	b	1a330 <__assert_fail@plt+0x8dcc>
   1a32c:	add	r1, r1, #1
   1a330:	ldr	sl, [r4, r1, lsl #5]
   1a334:	tst	r5, sl
   1a338:	beq	1a32c <__assert_fail@plt+0x8dc8>
   1a33c:	add	r8, sp, #2112	; 0x840
   1a340:	add	r1, r8, r1, lsl #2
   1a344:	ldr	sl, [r1, #-2048]	; 0xfffff800
   1a348:	str	sl, [lr]
   1a34c:	ldr	r1, [r1, #-1024]	; 0xfffffc00
   1a350:	str	r1, [lr, #1024]	; 0x400
   1a354:	lsl	r5, r5, #1
   1a358:	add	lr, lr, #4
   1a35c:	lsr	ip, ip, #1
   1a360:	b	1a300 <__assert_fail@plt+0x8d9c>
   1a364:	add	r4, r4, #1
   1a368:	add	r7, r7, #32
   1a36c:	cmp	r4, fp
   1a370:	bne	1a220 <__assert_fail@plt+0x8cbc>
   1a374:	b	1a248 <__assert_fail@plt+0x8ce4>
   1a378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a37c:	sub	sp, sp, #28
   1a380:	mov	r8, r0
   1a384:	add	r5, sp, #12
   1a388:	mov	r4, r1
   1a38c:	mov	r0, r5
   1a390:	mov	r9, r2
   1a394:	ldr	r1, [r1, #4]
   1a398:	mov	sl, r3
   1a39c:	bl	1597c <__assert_fail@plt+0x4418>
   1a3a0:	subs	r6, r0, #0
   1a3a4:	moveq	r7, r6
   1a3a8:	beq	1a44c <__assert_fail@plt+0x8ee8>
   1a3ac:	mov	r0, r6
   1a3b0:	add	sp, sp, #28
   1a3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3b8:	ldr	r2, [r0, r7, lsl #2]
   1a3bc:	mov	r3, #12
   1a3c0:	ldr	r1, [r8, #24]
   1a3c4:	mla	r1, r3, r2, r1
   1a3c8:	mov	r3, #0
   1a3cc:	ldr	lr, [r1, #4]
   1a3d0:	cmp	r3, lr
   1a3d4:	blt	1a3f8 <__assert_fail@plt+0x8e94>
   1a3d8:	mov	r0, r5
   1a3dc:	bl	18680 <__assert_fail@plt+0x711c>
   1a3e0:	subs	fp, r0, #0
   1a3e4:	beq	1a448 <__assert_fail@plt+0x8ee4>
   1a3e8:	ldr	r0, [sp, #20]
   1a3ec:	mov	r6, fp
   1a3f0:	bl	13648 <__assert_fail@plt+0x20e4>
   1a3f4:	b	1a3ac <__assert_fail@plt+0x8e48>
   1a3f8:	ldr	r0, [r1, #8]
   1a3fc:	ldr	ip, [r8]
   1a400:	ldr	r0, [r0, r3, lsl #2]
   1a404:	add	fp, ip, r0, lsl #3
   1a408:	ldrb	fp, [fp, #4]
   1a40c:	cmp	sl, fp
   1a410:	bne	1a420 <__assert_fail@plt+0x8ebc>
   1a414:	ldr	ip, [ip, r0, lsl #3]
   1a418:	cmp	r9, ip
   1a41c:	beq	1a428 <__assert_fail@plt+0x8ec4>
   1a420:	add	r3, r3, #1
   1a424:	b	1a3d0 <__assert_fail@plt+0x8e6c>
   1a428:	cmn	r0, #1
   1a42c:	beq	1a3d8 <__assert_fail@plt+0x8e74>
   1a430:	mov	r3, r9
   1a434:	mov	r1, r5
   1a438:	str	sl, [sp]
   1a43c:	mov	r0, r8
   1a440:	bl	18590 <__assert_fail@plt+0x702c>
   1a444:	b	1a3e0 <__assert_fail@plt+0x8e7c>
   1a448:	add	r7, r7, #1
   1a44c:	ldr	r3, [r4, #4]
   1a450:	ldr	r0, [r4, #8]
   1a454:	cmp	r3, r7
   1a458:	bgt	1a3b8 <__assert_fail@plt+0x8e54>
   1a45c:	bl	13648 <__assert_fail@plt+0x20e4>
   1a460:	ldm	r5, {r0, r1, r2}
   1a464:	stm	r4, {r0, r1, r2}
   1a468:	b	1a3ac <__assert_fail@plt+0x8e48>
   1a46c:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a470:	mov	r3, #0
   1a474:	ldr	r4, [r2, #4]
   1a478:	str	r3, [r0]
   1a47c:	cmp	r4, r3
   1a480:	movne	r7, r4
   1a484:	bne	1a4a4 <__assert_fail@plt+0x8f40>
   1a488:	mov	r0, r4
   1a48c:	add	sp, sp, #4
   1a490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a494:	ldr	ip, [r2, #8]
   1a498:	ldr	ip, [ip, r3, lsl #2]
   1a49c:	add	r3, r3, #1
   1a4a0:	add	r7, r7, ip
   1a4a4:	cmp	r4, r3
   1a4a8:	bgt	1a494 <__assert_fail@plt+0x8f30>
   1a4ac:	ldr	r3, [r1, #68]	; 0x44
   1a4b0:	mov	r5, r2
   1a4b4:	mov	r6, r1
   1a4b8:	mov	r8, r0
   1a4bc:	mov	r9, #0
   1a4c0:	and	r2, r7, r3
   1a4c4:	mov	r3, #12
   1a4c8:	mul	r3, r3, r2
   1a4cc:	ldr	r2, [r1, #32]
   1a4d0:	ldr	sl, [r2, r3]
   1a4d4:	add	fp, r2, r3
   1a4d8:	cmp	sl, r9
   1a4dc:	bgt	1a524 <__assert_fail@plt+0x8fc0>
   1a4e0:	mov	r1, #1
   1a4e4:	mov	r0, #56	; 0x38
   1a4e8:	bl	20e98 <__assert_fail@plt+0xf934>
   1a4ec:	subs	r4, r0, #0
   1a4f0:	beq	1a514 <__assert_fail@plt+0x8fb0>
   1a4f4:	add	r9, r4, #4
   1a4f8:	mov	r1, r5
   1a4fc:	mov	r0, r9
   1a500:	bl	17788 <__assert_fail@plt+0x6224>
   1a504:	cmp	r0, #0
   1a508:	beq	1a554 <__assert_fail@plt+0x8ff0>
   1a50c:	mov	r0, r4
   1a510:	bl	13648 <__assert_fail@plt+0x20e4>
   1a514:	mov	r3, #12
   1a518:	mov	r4, #0
   1a51c:	str	r3, [r8]
   1a520:	b	1a488 <__assert_fail@plt+0x8f24>
   1a524:	ldr	r3, [fp, #8]
   1a528:	ldr	r4, [r3, r9, lsl #2]
   1a52c:	ldr	r3, [r4]
   1a530:	cmp	r3, r7
   1a534:	bne	1a54c <__assert_fail@plt+0x8fe8>
   1a538:	mov	r1, r5
   1a53c:	add	r0, r4, #4
   1a540:	bl	14f2c <__assert_fail@plt+0x39c8>
   1a544:	cmp	r0, #0
   1a548:	bne	1a488 <__assert_fail@plt+0x8f24>
   1a54c:	add	r9, r9, #1
   1a550:	b	1a4d8 <__assert_fail@plt+0x8f74>
   1a554:	ldr	r1, [pc, #188]	; 1a618 <__assert_fail@plt+0x90b4>
   1a558:	str	r9, [r4, #40]	; 0x28
   1a55c:	ldr	lr, [r5, #4]
   1a560:	cmp	r0, lr
   1a564:	blt	1a58c <__assert_fail@plt+0x9028>
   1a568:	mov	r2, r7
   1a56c:	mov	r1, r4
   1a570:	mov	r0, r6
   1a574:	bl	176a8 <__assert_fail@plt+0x6144>
   1a578:	cmp	r0, #0
   1a57c:	beq	1a488 <__assert_fail@plt+0x8f24>
   1a580:	mov	r0, r4
   1a584:	bl	1638c <__assert_fail@plt+0x4e28>
   1a588:	b	1a514 <__assert_fail@plt+0x8fb0>
   1a58c:	ldr	r3, [r5, #8]
   1a590:	ldr	r2, [r3, r0, lsl #2]
   1a594:	ldr	r3, [r6]
   1a598:	add	r3, r3, r2, lsl #3
   1a59c:	ldrb	r2, [r3, #4]
   1a5a0:	cmp	r2, #1
   1a5a4:	bne	1a5b4 <__assert_fail@plt+0x9050>
   1a5a8:	ldr	ip, [r3, #4]
   1a5ac:	tst	r1, ip
   1a5b0:	beq	1a610 <__assert_fail@plt+0x90ac>
   1a5b4:	ldrb	sl, [r3, #6]
   1a5b8:	cmp	r2, #2
   1a5bc:	ldrb	ip, [r4, #52]	; 0x34
   1a5c0:	ubfx	sl, sl, #4, #1
   1a5c4:	ubfx	r9, ip, #5, #1
   1a5c8:	orr	r9, r9, sl
   1a5cc:	bfi	ip, r9, #5, #1
   1a5d0:	uxtbeq	r3, ip
   1a5d4:	orreq	r3, r3, #16
   1a5d8:	strb	ip, [r4, #52]	; 0x34
   1a5dc:	beq	1a60c <__assert_fail@plt+0x90a8>
   1a5e0:	cmp	r2, #4
   1a5e4:	ldrbeq	r3, [r4, #52]	; 0x34
   1a5e8:	orreq	r3, r3, #64	; 0x40
   1a5ec:	beq	1a60c <__assert_fail@plt+0x90a8>
   1a5f0:	cmp	r2, #12
   1a5f4:	beq	1a604 <__assert_fail@plt+0x90a0>
   1a5f8:	ldr	r3, [r3, #4]
   1a5fc:	tst	r1, r3
   1a600:	beq	1a610 <__assert_fail@plt+0x90ac>
   1a604:	ldrb	r3, [r4, #52]	; 0x34
   1a608:	orr	r3, r3, #128	; 0x80
   1a60c:	strb	r3, [r4, #52]	; 0x34
   1a610:	add	r0, r0, #1
   1a614:	b	1a560 <__assert_fail@plt+0x8ffc>
   1a618:	andeq	pc, r3, r0, lsl #30
   1a61c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a620:	mov	r7, r0
   1a624:	mov	r5, r1
   1a628:	mov	r8, r2
   1a62c:	mov	r6, r3
   1a630:	mov	r4, #0
   1a634:	cmp	r4, r6
   1a638:	blt	1a648 <__assert_fail@plt+0x90e4>
   1a63c:	mov	r0, #0
   1a640:	add	sp, sp, #16
   1a644:	pop	{r4, r5, r6, r7, r8, pc}
   1a648:	ldr	r1, [r5, r4, lsl #2]
   1a64c:	ldr	r2, [r8, r4, lsl #2]
   1a650:	cmp	r1, #0
   1a654:	streq	r2, [r5, r4, lsl #2]
   1a658:	beq	1a6a8 <__assert_fail@plt+0x9144>
   1a65c:	cmp	r2, #0
   1a660:	beq	1a6a8 <__assert_fail@plt+0x9144>
   1a664:	add	r2, r2, #4
   1a668:	add	r1, r1, #4
   1a66c:	add	r0, sp, #4
   1a670:	bl	17800 <__assert_fail@plt+0x629c>
   1a674:	cmp	r0, #0
   1a678:	str	r0, [sp]
   1a67c:	bne	1a640 <__assert_fail@plt+0x90dc>
   1a680:	add	r2, sp, #4
   1a684:	mov	r1, r7
   1a688:	mov	r0, sp
   1a68c:	bl	1a46c <__assert_fail@plt+0x8f08>
   1a690:	str	r0, [r5, r4, lsl #2]
   1a694:	ldr	r0, [sp, #12]
   1a698:	bl	13648 <__assert_fail@plt+0x20e4>
   1a69c:	ldr	r0, [sp]
   1a6a0:	cmp	r0, #0
   1a6a4:	bne	1a640 <__assert_fail@plt+0x90dc>
   1a6a8:	add	r4, r4, #1
   1a6ac:	b	1a634 <__assert_fail@plt+0x90d0>
   1a6b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6b4:	sub	sp, sp, #36	; 0x24
   1a6b8:	mov	r8, r1
   1a6bc:	mov	r1, r2
   1a6c0:	mov	r6, r0
   1a6c4:	mov	r9, r2
   1a6c8:	str	r3, [sp, #4]
   1a6cc:	bl	15410 <__assert_fail@plt+0x3eac>
   1a6d0:	cmn	r0, #1
   1a6d4:	bne	1a6e4 <__assert_fail@plt+0x9180>
   1a6d8:	mov	r0, #0
   1a6dc:	add	sp, sp, #36	; 0x24
   1a6e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6e4:	mov	r3, #24
   1a6e8:	ldr	r7, [r6, #84]	; 0x54
   1a6ec:	mla	r3, r0, r3, r3
   1a6f0:	str	r3, [sp, #8]
   1a6f4:	ldr	r3, [sp, #8]
   1a6f8:	mov	fp, #12
   1a6fc:	ldr	r4, [r6, #116]	; 0x74
   1a700:	add	r4, r4, r3
   1a704:	ldr	sl, [r4, #-24]	; 0xffffffe8
   1a708:	mov	r0, r8
   1a70c:	mov	r1, sl
   1a710:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1a714:	cmp	r0, #0
   1a718:	beq	1a864 <__assert_fail@plt+0x9300>
   1a71c:	ldr	r2, [r4, #-16]
   1a720:	ldr	r5, [r4, #-12]
   1a724:	add	r5, r9, r5
   1a728:	sub	r5, r5, r2
   1a72c:	cmp	r9, r5
   1a730:	bne	1a7bc <__assert_fail@plt+0x9258>
   1a734:	ldr	r2, [r7, #20]
   1a738:	mov	r0, r8
   1a73c:	mla	r3, fp, sl, r2
   1a740:	ldr	r3, [r3, #8]
   1a744:	ldr	r5, [r3]
   1a748:	mov	r1, r5
   1a74c:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1a750:	cmp	r0, #0
   1a754:	bne	1a864 <__assert_fail@plt+0x9300>
   1a758:	add	r0, sp, #20
   1a75c:	bl	1593c <__assert_fail@plt+0x43d8>
   1a760:	add	r1, sp, #20
   1a764:	str	r0, [sp, #16]
   1a768:	mov	r0, r7
   1a76c:	ldr	r2, [sp, #4]
   1a770:	ldr	r3, [sp, #72]	; 0x48
   1a774:	bl	1a378 <__assert_fail@plt+0x8e14>
   1a778:	mov	r4, r0
   1a77c:	add	r1, sp, #20
   1a780:	mov	r0, r8
   1a784:	bl	18680 <__assert_fail@plt+0x711c>
   1a788:	mov	r5, r0
   1a78c:	ldr	r0, [sp, #28]
   1a790:	bl	13648 <__assert_fail@plt+0x20e4>
   1a794:	ldr	r0, [sp, #16]
   1a798:	orr	r3, r4, r5
   1a79c:	orrs	r3, r3, r0
   1a7a0:	beq	1a6f4 <__assert_fail@plt+0x9190>
   1a7a4:	cmp	r0, #0
   1a7a8:	bne	1a6dc <__assert_fail@plt+0x9178>
   1a7ac:	cmp	r4, #0
   1a7b0:	movne	r0, r4
   1a7b4:	moveq	r0, r5
   1a7b8:	b	1a6dc <__assert_fail@plt+0x9178>
   1a7bc:	ldr	r3, [r6, #100]	; 0x64
   1a7c0:	ldr	r2, [r7, #12]
   1a7c4:	ldr	r3, [r3, r5, lsl #2]
   1a7c8:	ldr	sl, [r2, sl, lsl #2]
   1a7cc:	cmp	r3, #0
   1a7d0:	beq	1a890 <__assert_fail@plt+0x932c>
   1a7d4:	add	r3, r3, #4
   1a7d8:	mov	r1, sl
   1a7dc:	mov	r0, r3
   1a7e0:	str	r3, [sp, #12]
   1a7e4:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1a7e8:	cmp	r0, #0
   1a7ec:	bne	1a864 <__assert_fail@plt+0x9300>
   1a7f0:	ldr	r3, [sp, #12]
   1a7f4:	add	r0, sp, #20
   1a7f8:	mov	r1, r3
   1a7fc:	bl	17788 <__assert_fail@plt+0x6224>
   1a800:	mov	r1, sl
   1a804:	str	r0, [sp, #16]
   1a808:	add	r0, sp, #20
   1a80c:	bl	182a8 <__assert_fail@plt+0x6d44>
   1a810:	ldr	r3, [sp, #16]
   1a814:	eor	r0, r0, #1
   1a818:	cmp	r3, #0
   1a81c:	orrne	r0, r0, #1
   1a820:	tst	r0, #255	; 0xff
   1a824:	bne	1a878 <__assert_fail@plt+0x9314>
   1a828:	ldr	sl, [r6, #100]	; 0x64
   1a82c:	add	r2, sp, #20
   1a830:	mov	r1, r7
   1a834:	add	r0, sp, #16
   1a838:	bl	1a46c <__assert_fail@plt+0x8f08>
   1a83c:	str	r0, [sl, r5, lsl #2]
   1a840:	ldr	r0, [sp, #28]
   1a844:	bl	13648 <__assert_fail@plt+0x20e4>
   1a848:	ldr	r3, [r6, #100]	; 0x64
   1a84c:	ldr	r3, [r3, r5, lsl #2]
   1a850:	cmp	r3, #0
   1a854:	bne	1a864 <__assert_fail@plt+0x9300>
   1a858:	ldr	r0, [sp, #16]
   1a85c:	cmp	r0, #0
   1a860:	bne	1a6dc <__assert_fail@plt+0x9178>
   1a864:	add	r4, r4, #24
   1a868:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1a86c:	cmp	r3, #0
   1a870:	bne	1a704 <__assert_fail@plt+0x91a0>
   1a874:	b	1a6d8 <__assert_fail@plt+0x9174>
   1a878:	ldr	r0, [sp, #28]
   1a87c:	bl	13648 <__assert_fail@plt+0x20e4>
   1a880:	ldr	r0, [sp, #16]
   1a884:	cmp	r0, #0
   1a888:	moveq	r0, #12
   1a88c:	b	1a6dc <__assert_fail@plt+0x9178>
   1a890:	mov	r1, sl
   1a894:	add	r0, sp, #20
   1a898:	bl	1593c <__assert_fail@plt+0x43d8>
   1a89c:	cmp	r0, #0
   1a8a0:	str	r0, [sp, #16]
   1a8a4:	beq	1a828 <__assert_fail@plt+0x92c4>
   1a8a8:	b	1a6dc <__assert_fail@plt+0x9178>
   1a8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8b0:	mov	r9, r3
   1a8b4:	sub	sp, sp, #84	; 0x54
   1a8b8:	mov	sl, #0
   1a8bc:	mov	r4, r0
   1a8c0:	mov	r7, r1
   1a8c4:	mov	r6, r2
   1a8c8:	ldr	r3, [r0, #84]	; 0x54
   1a8cc:	ldr	r5, [r0, #120]	; 0x78
   1a8d0:	ldr	r8, [r1, #4]
   1a8d4:	str	r3, [sp, #12]
   1a8d8:	ldr	r3, [r3]
   1a8dc:	str	sl, [sp, #48]	; 0x30
   1a8e0:	ldr	r3, [r3, r2, lsl #3]
   1a8e4:	str	r3, [sp, #16]
   1a8e8:	ldr	r3, [sp, #124]	; 0x7c
   1a8ec:	add	r5, r3, r5
   1a8f0:	cmp	r5, r8
   1a8f4:	blt	1a950 <__assert_fail@plt+0x93ec>
   1a8f8:	mvn	r3, #-2147483648	; 0x80000000
   1a8fc:	add	r5, r5, #1
   1a900:	sub	r3, r3, r8
   1a904:	cmp	r3, r5
   1a908:	bge	1a918 <__assert_fail@plt+0x93b4>
   1a90c:	mov	r0, #12
   1a910:	add	sp, sp, #84	; 0x54
   1a914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a918:	add	fp, r8, r5
   1a91c:	cmn	fp, #-1073741823	; 0xc0000001
   1a920:	bhi	1a90c <__assert_fail@plt+0x93a8>
   1a924:	lsl	r1, fp, #2
   1a928:	ldr	r0, [r7, #8]
   1a92c:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1a930:	cmp	r0, #0
   1a934:	beq	1a90c <__assert_fail@plt+0x93a8>
   1a938:	lsl	r2, r5, #2
   1a93c:	mov	r1, sl
   1a940:	str	fp, [r7, #4]
   1a944:	str	r0, [r7, #8]
   1a948:	add	r0, r0, r8, lsl #2
   1a94c:	bl	11444 <memset@plt>
   1a950:	ldr	r5, [r7]
   1a954:	mov	r0, r4
   1a958:	ldr	r3, [r4, #100]	; 0x64
   1a95c:	ldr	sl, [r7, #8]
   1a960:	cmp	r5, #0
   1a964:	moveq	r5, r9
   1a968:	ldr	r2, [r4, #88]	; 0x58
   1a96c:	str	r3, [sp, #32]
   1a970:	sub	r1, r5, #1
   1a974:	ldr	r3, [r4, #40]	; 0x28
   1a978:	str	r5, [r4, #40]	; 0x28
   1a97c:	str	sl, [r4, #100]	; 0x64
   1a980:	str	r3, [sp, #36]	; 0x24
   1a984:	bl	189cc <__assert_fail@plt+0x7468>
   1a988:	cmp	r5, r9
   1a98c:	mov	r8, r0
   1a990:	bne	1aa0c <__assert_fail@plt+0x94a8>
   1a994:	mov	r1, r6
   1a998:	add	r0, sp, #56	; 0x38
   1a99c:	bl	1593c <__assert_fail@plt+0x43d8>
   1a9a0:	cmp	r0, #0
   1a9a4:	str	r0, [sp, #48]	; 0x30
   1a9a8:	bne	1a910 <__assert_fail@plt+0x93ac>
   1a9ac:	add	r1, sp, #56	; 0x38
   1a9b0:	ldr	r0, [sp, #12]
   1a9b4:	ldr	r2, [sp, #16]
   1a9b8:	ldr	r3, [sp, #128]	; 0x80
   1a9bc:	bl	1a378 <__assert_fail@plt+0x8e14>
   1a9c0:	cmp	r0, #0
   1a9c4:	str	r0, [sp, #48]	; 0x30
   1a9c8:	bne	1aafc <__assert_fail@plt+0x9598>
   1a9cc:	ldr	r3, [sp, #60]	; 0x3c
   1a9d0:	cmp	r3, #0
   1a9d4:	bne	1aad4 <__assert_fail@plt+0x9570>
   1a9d8:	mov	r3, r8
   1a9dc:	add	r2, sp, #56	; 0x38
   1a9e0:	ldr	r1, [sp, #12]
   1a9e4:	add	r0, sp, #48	; 0x30
   1a9e8:	bl	17940 <__assert_fail@plt+0x63dc>
   1a9ec:	subs	r6, r0, #0
   1a9f0:	bne	1aa00 <__assert_fail@plt+0x949c>
   1a9f4:	ldr	r3, [sp, #48]	; 0x30
   1a9f8:	cmp	r3, #0
   1a9fc:	bne	1aafc <__assert_fail@plt+0x9598>
   1aa00:	ldr	r3, [r4, #100]	; 0x64
   1aa04:	str	r6, [r3, r5, lsl #2]
   1aa08:	b	1aa48 <__assert_fail@plt+0x94e4>
   1aa0c:	ldr	r6, [sl, r5, lsl #2]
   1aa10:	cmp	r6, #0
   1aa14:	beq	1aab8 <__assert_fail@plt+0x9554>
   1aa18:	ldrb	r3, [r6, #52]	; 0x34
   1aa1c:	tst	r3, #64	; 0x40
   1aa20:	beq	1aab8 <__assert_fail@plt+0x9554>
   1aa24:	add	r1, r6, #4
   1aa28:	add	r0, sp, #56	; 0x38
   1aa2c:	bl	17788 <__assert_fail@plt+0x6224>
   1aa30:	cmp	r0, #0
   1aa34:	str	r0, [sp, #48]	; 0x30
   1aa38:	bne	1a910 <__assert_fail@plt+0x93ac>
   1aa3c:	ldrb	r3, [r6, #52]	; 0x34
   1aa40:	tst	r3, #64	; 0x40
   1aa44:	bne	1a9cc <__assert_fail@plt+0x9468>
   1aa48:	mov	fp, #0
   1aa4c:	mov	r8, fp
   1aa50:	ldr	r3, [sp, #124]	; 0x7c
   1aa54:	cmp	r5, r3
   1aa58:	bge	1aa68 <__assert_fail@plt+0x9504>
   1aa5c:	ldr	r3, [r4, #120]	; 0x78
   1aa60:	cmp	r3, fp
   1aa64:	bge	1ab0c <__assert_fail@plt+0x95a8>
   1aa68:	ldr	r0, [sp, #64]	; 0x40
   1aa6c:	bl	13648 <__assert_fail@plt+0x20e4>
   1aa70:	ldr	r3, [r4, #100]	; 0x64
   1aa74:	ldr	r2, [sp, #124]	; 0x7c
   1aa78:	ldr	r0, [r3, r2, lsl #2]
   1aa7c:	str	r5, [r7]
   1aa80:	ldr	r3, [sp, #32]
   1aa84:	cmp	r0, #0
   1aa88:	addne	r0, r0, #4
   1aa8c:	str	r3, [r4, #100]	; 0x64
   1aa90:	cmp	r0, #0
   1aa94:	ldr	r3, [sp, #36]	; 0x24
   1aa98:	moveq	r0, #1
   1aa9c:	str	r3, [r4, #40]	; 0x28
   1aaa0:	beq	1a910 <__assert_fail@plt+0x93ac>
   1aaa4:	ldr	r1, [sp, #120]	; 0x78
   1aaa8:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1aaac:	clz	r0, r0
   1aab0:	lsr	r0, r0, #5
   1aab4:	b	1a910 <__assert_fail@plt+0x93ac>
   1aab8:	mov	r3, #0
   1aabc:	cmp	r6, r3
   1aac0:	str	r3, [sp, #56]	; 0x38
   1aac4:	str	r3, [sp, #60]	; 0x3c
   1aac8:	str	r3, [sp, #64]	; 0x40
   1aacc:	bne	1aa3c <__assert_fail@plt+0x94d8>
   1aad0:	b	1aa48 <__assert_fail@plt+0x94e4>
   1aad4:	ldr	r3, [sp, #128]	; 0x80
   1aad8:	mov	r2, r5
   1aadc:	add	r1, sp, #56	; 0x38
   1aae0:	mov	r0, r4
   1aae4:	str	r3, [sp]
   1aae8:	ldr	r3, [sp, #16]
   1aaec:	bl	1a6b0 <__assert_fail@plt+0x914c>
   1aaf0:	cmp	r0, #0
   1aaf4:	str	r0, [sp, #48]	; 0x30
   1aaf8:	beq	1a9d8 <__assert_fail@plt+0x9474>
   1aafc:	ldr	r0, [sp, #64]	; 0x40
   1ab00:	bl	13648 <__assert_fail@plt+0x20e4>
   1ab04:	ldr	r0, [sp, #48]	; 0x30
   1ab08:	b	1a910 <__assert_fail@plt+0x93ac>
   1ab0c:	add	r3, r5, #1
   1ab10:	add	r2, r5, #1
   1ab14:	str	r3, [sp, #40]	; 0x28
   1ab18:	ldr	r3, [r4, #100]	; 0x64
   1ab1c:	str	r8, [sp, #60]	; 0x3c
   1ab20:	ldr	r1, [r3, r2, lsl #2]
   1ab24:	cmp	r1, #0
   1ab28:	beq	1ab44 <__assert_fail@plt+0x95e0>
   1ab2c:	add	r1, r1, #4
   1ab30:	add	r0, sp, #56	; 0x38
   1ab34:	bl	18680 <__assert_fail@plt+0x711c>
   1ab38:	cmp	r0, #0
   1ab3c:	str	r0, [sp, #48]	; 0x30
   1ab40:	bne	1aafc <__assert_fail@plt+0x9598>
   1ab44:	cmp	r6, #0
   1ab48:	beq	1ac5c <__assert_fail@plt+0x96f8>
   1ab4c:	ldr	sl, [r4, #84]	; 0x54
   1ab50:	add	r3, sp, #68	; 0x44
   1ab54:	mov	r2, #0
   1ab58:	str	r2, [sp, #20]
   1ab5c:	str	r3, [sp, #28]
   1ab60:	str	r8, [sp, #52]	; 0x34
   1ab64:	str	r8, [sp, #68]	; 0x44
   1ab68:	str	r8, [sp, #72]	; 0x48
   1ab6c:	str	r8, [sp, #76]	; 0x4c
   1ab70:	ldr	r3, [r6, #20]
   1ab74:	ldr	r2, [sp, #20]
   1ab78:	cmp	r2, r3
   1ab7c:	blt	1ab90 <__assert_fail@plt+0x962c>
   1ab80:	ldr	r0, [sp, #76]	; 0x4c
   1ab84:	bl	13648 <__assert_fail@plt+0x20e4>
   1ab88:	str	r8, [sp, #48]	; 0x30
   1ab8c:	b	1ac5c <__assert_fail@plt+0x96f8>
   1ab90:	ldr	r2, [sp, #20]
   1ab94:	ldr	r3, [r6, #24]
   1ab98:	ldr	r3, [r3, r2, lsl #2]
   1ab9c:	lsl	r9, r3, #3
   1aba0:	str	r3, [sp, #24]
   1aba4:	ldr	r3, [sl]
   1aba8:	add	r3, r3, r9
   1abac:	ldrb	r3, [r3, #6]
   1abb0:	tst	r3, #16
   1abb4:	bne	1abe4 <__assert_fail@plt+0x9680>
   1abb8:	ldr	r1, [sl]
   1abbc:	mov	r2, r5
   1abc0:	mov	r0, r4
   1abc4:	add	r1, r1, r9
   1abc8:	bl	18aac <__assert_fail@plt+0x7548>
   1abcc:	cmp	r0, #0
   1abd0:	bne	1ad64 <__assert_fail@plt+0x9800>
   1abd4:	ldr	r3, [sp, #20]
   1abd8:	add	r3, r3, #1
   1abdc:	str	r3, [sp, #20]
   1abe0:	b	1ab70 <__assert_fail@plt+0x960c>
   1abe4:	mov	r3, r5
   1abe8:	mov	r2, r4
   1abec:	ldr	r1, [sp, #24]
   1abf0:	mov	r0, sl
   1abf4:	bl	17150 <__assert_fail@plt+0x5bec>
   1abf8:	cmp	r0, #1
   1abfc:	ble	1ad94 <__assert_fail@plt+0x9830>
   1ac00:	ldr	r3, [sl, #12]
   1ac04:	add	r9, r5, r0
   1ac08:	ldr	r2, [sp, #24]
   1ac0c:	ldr	r3, [r3, r2, lsl #2]
   1ac10:	ldr	r2, [r4, #100]	; 0x64
   1ac14:	ldr	r1, [r2, r9, lsl #2]
   1ac18:	str	r8, [sp, #72]	; 0x48
   1ac1c:	cmp	r1, #0
   1ac20:	beq	1ad0c <__assert_fail@plt+0x97a8>
   1ac24:	add	r1, r1, #4
   1ac28:	ldr	r0, [sp, #28]
   1ac2c:	str	r3, [sp, #44]	; 0x2c
   1ac30:	bl	18680 <__assert_fail@plt+0x711c>
   1ac34:	cmp	r0, #0
   1ac38:	str	r0, [sp, #52]	; 0x34
   1ac3c:	ldr	r3, [sp, #44]	; 0x2c
   1ac40:	beq	1ad0c <__assert_fail@plt+0x97a8>
   1ac44:	ldr	r0, [sp, #76]	; 0x4c
   1ac48:	bl	13648 <__assert_fail@plt+0x20e4>
   1ac4c:	ldr	r3, [sp, #52]	; 0x34
   1ac50:	cmp	r3, #0
   1ac54:	str	r3, [sp, #48]	; 0x30
   1ac58:	bne	1aafc <__assert_fail@plt+0x9598>
   1ac5c:	ldr	r3, [sp, #60]	; 0x3c
   1ac60:	add	r9, r5, #1
   1ac64:	cmp	r3, #0
   1ac68:	beq	1acb4 <__assert_fail@plt+0x9750>
   1ac6c:	add	r1, sp, #56	; 0x38
   1ac70:	ldr	r0, [sp, #12]
   1ac74:	ldr	r2, [sp, #16]
   1ac78:	ldr	r3, [sp, #128]	; 0x80
   1ac7c:	bl	1a378 <__assert_fail@plt+0x8e14>
   1ac80:	cmp	r0, #0
   1ac84:	str	r0, [sp, #48]	; 0x30
   1ac88:	bne	1aafc <__assert_fail@plt+0x9598>
   1ac8c:	ldr	r3, [sp, #128]	; 0x80
   1ac90:	mov	r2, r9
   1ac94:	add	r1, sp, #56	; 0x38
   1ac98:	mov	r0, r4
   1ac9c:	str	r3, [sp]
   1aca0:	ldr	r3, [sp, #16]
   1aca4:	bl	1a6b0 <__assert_fail@plt+0x914c>
   1aca8:	cmp	r0, #0
   1acac:	str	r0, [sp, #48]	; 0x30
   1acb0:	bne	1aafc <__assert_fail@plt+0x9598>
   1acb4:	mov	r1, r5
   1acb8:	mov	r0, r4
   1acbc:	ldr	r2, [r4, #88]	; 0x58
   1acc0:	bl	189cc <__assert_fail@plt+0x7468>
   1acc4:	mov	r3, r0
   1acc8:	add	r2, sp, #56	; 0x38
   1accc:	ldr	r1, [sp, #12]
   1acd0:	add	r0, sp, #48	; 0x30
   1acd4:	bl	17940 <__assert_fail@plt+0x63dc>
   1acd8:	subs	r6, r0, #0
   1acdc:	bne	1acec <__assert_fail@plt+0x9788>
   1ace0:	ldr	r3, [sp, #48]	; 0x30
   1ace4:	cmp	r3, #0
   1ace8:	bne	1aafc <__assert_fail@plt+0x9598>
   1acec:	ldr	r2, [sp, #40]	; 0x28
   1acf0:	cmp	r6, #0
   1acf4:	addeq	fp, fp, #1
   1acf8:	ldr	r3, [r4, #100]	; 0x64
   1acfc:	str	r6, [r3, r2, lsl #2]
   1ad00:	movne	fp, #0
   1ad04:	mov	r5, r9
   1ad08:	b	1aa50 <__assert_fail@plt+0x94ec>
   1ad0c:	mov	r1, r3
   1ad10:	ldr	r0, [sp, #28]
   1ad14:	bl	182a8 <__assert_fail@plt+0x6d44>
   1ad18:	cmp	r0, #0
   1ad1c:	bne	1ad34 <__assert_fail@plt+0x97d0>
   1ad20:	ldr	r0, [sp, #76]	; 0x4c
   1ad24:	bl	13648 <__assert_fail@plt+0x20e4>
   1ad28:	mov	r3, #12
   1ad2c:	str	r3, [sp, #48]	; 0x30
   1ad30:	b	1aafc <__assert_fail@plt+0x9598>
   1ad34:	ldr	r3, [r4, #100]	; 0x64
   1ad38:	mov	r1, sl
   1ad3c:	add	r0, sp, #52	; 0x34
   1ad40:	ldr	r2, [sp, #28]
   1ad44:	str	r3, [sp, #44]	; 0x2c
   1ad48:	bl	1a46c <__assert_fail@plt+0x8f08>
   1ad4c:	ldr	r3, [sp, #44]	; 0x2c
   1ad50:	str	r0, [r3, r9, lsl #2]
   1ad54:	ldr	r3, [r4, #100]	; 0x64
   1ad58:	ldr	r3, [r3, r9, lsl #2]
   1ad5c:	cmp	r3, #0
   1ad60:	beq	1ad84 <__assert_fail@plt+0x9820>
   1ad64:	ldr	r3, [sl, #12]
   1ad68:	add	r0, sp, #56	; 0x38
   1ad6c:	ldr	r2, [sp, #24]
   1ad70:	ldr	r1, [r3, r2, lsl #2]
   1ad74:	bl	182a8 <__assert_fail@plt+0x6d44>
   1ad78:	cmp	r0, #0
   1ad7c:	bne	1abd4 <__assert_fail@plt+0x9670>
   1ad80:	b	1ad20 <__assert_fail@plt+0x97bc>
   1ad84:	ldr	r3, [sp, #52]	; 0x34
   1ad88:	cmp	r3, #0
   1ad8c:	beq	1ad64 <__assert_fail@plt+0x9800>
   1ad90:	b	1ac44 <__assert_fail@plt+0x96e0>
   1ad94:	cmp	r0, #0
   1ad98:	beq	1abb8 <__assert_fail@plt+0x9654>
   1ad9c:	b	1ad64 <__assert_fail@plt+0x9800>
   1ada0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ada4:	sub	sp, sp, #20
   1ada8:	mov	r9, r3
   1adac:	mov	r3, #8
   1adb0:	mov	r8, r1
   1adb4:	mov	r7, r2
   1adb8:	add	r1, r2, #8
   1adbc:	ldr	r5, [sp, #56]	; 0x38
   1adc0:	mov	r4, r0
   1adc4:	str	r9, [sp]
   1adc8:	str	r5, [sp, #4]
   1adcc:	str	r3, [sp, #8]
   1add0:	ldrd	r2, [r2]
   1add4:	bl	1a8ac <__assert_fail@plt+0x9348>
   1add8:	subs	fp, r0, #0
   1addc:	bne	1ae18 <__assert_fail@plt+0x98b4>
   1ade0:	ldrd	r2, [r4, #108]	; 0x6c
   1ade4:	ldr	sl, [r8]
   1ade8:	ldr	r6, [r7, #4]
   1adec:	cmp	r2, r3
   1adf0:	blt	1ae50 <__assert_fail@plt+0x98ec>
   1adf4:	mov	r1, #48	; 0x30
   1adf8:	ldr	r0, [r4, #116]	; 0x74
   1adfc:	mul	r1, r1, r3
   1ae00:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1ae04:	subs	r3, r0, #0
   1ae08:	bne	1ae24 <__assert_fail@plt+0x98c0>
   1ae0c:	ldr	r0, [r4, #116]	; 0x74
   1ae10:	mov	fp, #12
   1ae14:	bl	13648 <__assert_fail@plt+0x20e4>
   1ae18:	mov	r0, fp
   1ae1c:	add	sp, sp, #20
   1ae20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae24:	ldr	ip, [r4, #108]	; 0x6c
   1ae28:	mov	r0, #24
   1ae2c:	mov	r1, fp
   1ae30:	str	r3, [r4, #116]	; 0x74
   1ae34:	ldr	r2, [r4, #112]	; 0x70
   1ae38:	mul	r2, r0, r2
   1ae3c:	mla	r0, r0, ip, r3
   1ae40:	bl	11444 <memset@plt>
   1ae44:	ldr	r3, [r4, #112]	; 0x70
   1ae48:	lsl	r3, r3, #1
   1ae4c:	str	r3, [r4, #112]	; 0x70
   1ae50:	ldr	r2, [r4, #108]	; 0x6c
   1ae54:	mov	r1, #24
   1ae58:	ldr	r0, [r4, #116]	; 0x74
   1ae5c:	cmp	r2, #0
   1ae60:	mul	r1, r1, r2
   1ae64:	ble	1ae80 <__assert_fail@plt+0x991c>
   1ae68:	sub	r3, r1, #24
   1ae6c:	add	r3, r0, r3
   1ae70:	ldr	ip, [r3, #4]
   1ae74:	cmp	r5, ip
   1ae78:	moveq	ip, #1
   1ae7c:	strbeq	ip, [r3, #20]
   1ae80:	cmp	sl, r6
   1ae84:	add	r3, r0, r1
   1ae88:	str	r9, [r0, r1]
   1ae8c:	add	r2, r2, #1
   1ae90:	movne	r1, #0
   1ae94:	mvneq	r1, #0
   1ae98:	stmib	r3, {r5, sl}
   1ae9c:	mov	r0, r4
   1aea0:	str	r6, [r3, #12]
   1aea4:	sub	r6, r6, sl
   1aea8:	str	r1, [r3, #16]
   1aeac:	str	r2, [r4, #108]	; 0x6c
   1aeb0:	mov	r2, #0
   1aeb4:	strb	r2, [r3, #20]
   1aeb8:	ldr	r3, [r4, #120]	; 0x78
   1aebc:	ldr	r1, [r7, #4]
   1aec0:	cmp	r3, r6
   1aec4:	add	r5, r5, r1
   1aec8:	strlt	r6, [r4, #120]	; 0x78
   1aecc:	ldr	r1, [r8]
   1aed0:	sub	r1, r5, r1
   1aed4:	add	sp, sp, #20
   1aed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aedc:	b	16700 <__assert_fail@plt+0x519c>
   1aee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aee4:	sub	sp, sp, #84	; 0x54
   1aee8:	mov	r4, r0
   1aeec:	ldr	r9, [r0, #40]	; 0x28
   1aef0:	str	r1, [sp, #56]	; 0x38
   1aef4:	ldr	sl, [r0, #84]	; 0x54
   1aef8:	lsl	r3, r9, #2
   1aefc:	str	r3, [sp, #44]	; 0x2c
   1af00:	mov	r3, #0
   1af04:	str	r3, [sp, #20]
   1af08:	ldr	r2, [sp, #20]
   1af0c:	ldr	r3, [sp, #56]	; 0x38
   1af10:	ldr	r3, [r3, #4]
   1af14:	cmp	r3, r2
   1af18:	movle	r3, #0
   1af1c:	ble	1b374 <__assert_fail@plt+0x9e10>
   1af20:	ldr	r2, [sp, #20]
   1af24:	ldr	r3, [sp, #56]	; 0x38
   1af28:	ldr	r3, [r3, #8]
   1af2c:	ldr	r3, [r3, r2, lsl #2]
   1af30:	str	r3, [sp, #16]
   1af34:	ldr	r3, [sl]
   1af38:	ldr	r2, [sp, #16]
   1af3c:	add	r3, r3, r2, lsl #3
   1af40:	ldrb	r2, [r3, #4]
   1af44:	cmp	r2, #4
   1af48:	beq	1af58 <__assert_fail@plt+0x99f4>
   1af4c:	ldr	r3, [sp, #20]
   1af50:	add	r3, r3, #1
   1af54:	b	1af04 <__assert_fail@plt+0x99a0>
   1af58:	ldr	r5, [r3, #4]
   1af5c:	ldr	r3, [pc, #1400]	; 1b4dc <__assert_fail@plt+0x9f78>
   1af60:	and	r3, r3, r5
   1af64:	cmp	r3, #0
   1af68:	beq	1afc0 <__assert_fail@plt+0x9a5c>
   1af6c:	mov	r1, r9
   1af70:	mov	r0, r4
   1af74:	ldr	r2, [r4, #88]	; 0x58
   1af78:	bl	189cc <__assert_fail@plt+0x7468>
   1af7c:	ubfx	r3, r5, #8, #10
   1af80:	tst	r3, #4
   1af84:	beq	1af90 <__assert_fail@plt+0x9a2c>
   1af88:	tst	r0, #1
   1af8c:	beq	1af4c <__assert_fail@plt+0x99e8>
   1af90:	tst	r3, #8
   1af94:	beq	1afa0 <__assert_fail@plt+0x9a3c>
   1af98:	tst	r0, #1
   1af9c:	bne	1af4c <__assert_fail@plt+0x99e8>
   1afa0:	tst	r3, #32
   1afa4:	beq	1afb0 <__assert_fail@plt+0x9a4c>
   1afa8:	tst	r0, #2
   1afac:	beq	1af4c <__assert_fail@plt+0x99e8>
   1afb0:	tst	r3, #128	; 0x80
   1afb4:	beq	1afc0 <__assert_fail@plt+0x9a5c>
   1afb8:	tst	r0, #8
   1afbc:	beq	1af4c <__assert_fail@plt+0x99e8>
   1afc0:	ldr	r3, [r4, #108]	; 0x6c
   1afc4:	mov	r1, r9
   1afc8:	mov	r0, r4
   1afcc:	str	r3, [sp, #24]
   1afd0:	bl	15410 <__assert_fail@plt+0x3eac>
   1afd4:	cmn	r0, #1
   1afd8:	beq	1b070 <__assert_fail@plt+0x9b0c>
   1afdc:	mov	r3, #24
   1afe0:	mla	r3, r0, r3, r3
   1afe4:	ldr	r0, [r4, #116]	; 0x74
   1afe8:	add	r0, r0, r3
   1afec:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1aff0:	ldr	r2, [sp, #16]
   1aff4:	cmp	r2, r3
   1aff8:	bne	1b060 <__assert_fail@plt+0x9afc>
   1affc:	mov	r3, #0
   1b000:	ldr	r2, [sp, #16]
   1b004:	str	r3, [sp, #64]	; 0x40
   1b008:	ldr	r3, [sp, #16]
   1b00c:	lsl	r3, r3, #2
   1b010:	str	r3, [sp, #28]
   1b014:	mov	r3, #12
   1b018:	mul	fp, r3, r2
   1b01c:	ldr	r2, [sp, #24]
   1b020:	ldr	r3, [r4, #108]	; 0x6c
   1b024:	cmp	r3, r2
   1b028:	ble	1af4c <__assert_fail@plt+0x99e8>
   1b02c:	ldr	r2, [sp, #24]
   1b030:	mov	r3, #24
   1b034:	ldr	r1, [r4, #116]	; 0x74
   1b038:	mul	r3, r3, r2
   1b03c:	add	r2, r1, r3
   1b040:	ldr	r3, [r1, r3]
   1b044:	ldr	r1, [sp, #16]
   1b048:	cmp	r3, r1
   1b04c:	beq	1b37c <__assert_fail@plt+0x9e18>
   1b050:	ldr	r3, [sp, #24]
   1b054:	add	r3, r3, #1
   1b058:	str	r3, [sp, #24]
   1b05c:	b	1b01c <__assert_fail@plt+0x9ab8>
   1b060:	add	r0, r0, #24
   1b064:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   1b068:	cmp	r3, #0
   1b06c:	bne	1afec <__assert_fail@plt+0x9a88>
   1b070:	ldr	r2, [sp, #16]
   1b074:	ldr	r3, [r4, #84]	; 0x54
   1b078:	ldr	r7, [r4, #4]
   1b07c:	str	r3, [sp, #36]	; 0x24
   1b080:	ldr	r3, [r3]
   1b084:	ldr	r3, [r3, r2, lsl #3]
   1b088:	str	r3, [sp, #48]	; 0x30
   1b08c:	mov	r3, #0
   1b090:	str	r3, [sp, #28]
   1b094:	ldr	r2, [sp, #28]
   1b098:	ldr	r3, [r4, #124]	; 0x7c
   1b09c:	cmp	r2, r3
   1b0a0:	bge	1affc <__assert_fail@plt+0x9a98>
   1b0a4:	ldr	r2, [sp, #28]
   1b0a8:	ldr	r3, [r4, #132]	; 0x84
   1b0ac:	ldr	r5, [r3, r2, lsl #2]
   1b0b0:	ldr	r3, [sp, #36]	; 0x24
   1b0b4:	ldr	r2, [r5, #4]
   1b0b8:	ldr	r3, [r3]
   1b0bc:	ldr	r3, [r3, r2, lsl #3]
   1b0c0:	ldr	r2, [sp, #48]	; 0x30
   1b0c4:	cmp	r2, r3
   1b0c8:	moveq	fp, r9
   1b0cc:	moveq	r8, #0
   1b0d0:	ldreq	r6, [r5]
   1b0d4:	beq	1b218 <__assert_fail@plt+0x9cb4>
   1b0d8:	ldr	r3, [sp, #28]
   1b0dc:	add	r3, r3, #1
   1b0e0:	b	1b090 <__assert_fail@plt+0x9b2c>
   1b0e4:	ldr	r3, [r4, #28]
   1b0e8:	add	r1, r2, fp
   1b0ec:	cmp	r3, r1
   1b0f0:	bge	1b124 <__assert_fail@plt+0x9bc0>
   1b0f4:	str	r2, [sp, #60]	; 0x3c
   1b0f8:	ldr	r2, [sp, #32]
   1b0fc:	ldr	r3, [r4, #48]	; 0x30
   1b100:	cmp	r3, r2
   1b104:	blt	1b138 <__assert_fail@plt+0x9bd4>
   1b108:	mov	r1, r2
   1b10c:	mov	r0, r4
   1b110:	bl	16700 <__assert_fail@plt+0x519c>
   1b114:	cmp	r0, #0
   1b118:	bne	1b270 <__assert_fail@plt+0x9d0c>
   1b11c:	ldr	r7, [r4, #4]
   1b120:	ldr	r2, [sp, #60]	; 0x3c
   1b124:	add	r1, r7, r6
   1b128:	add	r0, r7, fp
   1b12c:	bl	112b8 <memcmp@plt>
   1b130:	cmp	r0, #0
   1b134:	beq	1b24c <__assert_fail@plt+0x9ce8>
   1b138:	ldr	r3, [r5, #16]
   1b13c:	cmp	r8, r3
   1b140:	blt	1b0d8 <__assert_fail@plt+0x9b74>
   1b144:	cmp	r8, #0
   1b148:	ble	1b150 <__assert_fail@plt+0x9bec>
   1b14c:	add	r6, r6, #1
   1b150:	cmp	r9, r6
   1b154:	blt	1b0d8 <__assert_fail@plt+0x9b74>
   1b158:	ldr	r3, [r5]
   1b15c:	sub	r3, r6, r3
   1b160:	cmp	r3, #0
   1b164:	ble	1b1b4 <__assert_fail@plt+0x9c50>
   1b168:	ldr	r3, [r4, #28]
   1b16c:	cmp	r3, fp
   1b170:	bgt	1b198 <__assert_fail@plt+0x9c34>
   1b174:	ldr	r3, [r4, #48]	; 0x30
   1b178:	cmp	fp, r3
   1b17c:	bge	1b0d8 <__assert_fail@plt+0x9b74>
   1b180:	add	r1, fp, #1
   1b184:	mov	r0, r4
   1b188:	bl	16038 <__assert_fail@plt+0x4ad4>
   1b18c:	cmp	r0, #0
   1b190:	bne	1b270 <__assert_fail@plt+0x9d0c>
   1b194:	ldr	r7, [r4, #4]
   1b198:	add	r3, r7, r6
   1b19c:	add	r2, fp, #1
   1b1a0:	ldrb	r1, [r7, fp]
   1b1a4:	ldrb	r3, [r3, #-1]
   1b1a8:	cmp	r1, r3
   1b1ac:	bne	1b0d8 <__assert_fail@plt+0x9b74>
   1b1b0:	mov	fp, r2
   1b1b4:	ldr	r3, [r4, #100]	; 0x64
   1b1b8:	ldr	r2, [r3, r6, lsl #2]
   1b1bc:	cmp	r2, #0
   1b1c0:	movne	r3, #0
   1b1c4:	ldrne	r0, [r2, #8]
   1b1c8:	beq	1b14c <__assert_fail@plt+0x9be8>
   1b1cc:	cmp	r3, r0
   1b1d0:	bge	1b14c <__assert_fail@plt+0x9be8>
   1b1d4:	ldr	r1, [r2, #12]
   1b1d8:	ldr	r8, [r1, r3, lsl #2]
   1b1dc:	ldr	r1, [sp, #36]	; 0x24
   1b1e0:	ldr	r1, [r1]
   1b1e4:	add	ip, r1, r8, lsl #3
   1b1e8:	ldrb	ip, [ip, #4]
   1b1ec:	cmp	ip, #9
   1b1f0:	bne	1b204 <__assert_fail@plt+0x9ca0>
   1b1f4:	ldr	r1, [r1, r8, lsl #3]
   1b1f8:	ldr	ip, [sp, #48]	; 0x30
   1b1fc:	cmp	ip, r1
   1b200:	beq	1b280 <__assert_fail@plt+0x9d1c>
   1b204:	add	r3, r3, #1
   1b208:	b	1b1cc <__assert_fail@plt+0x9c68>
   1b20c:	ldr	fp, [sp, #32]
   1b210:	add	r8, r8, #1
   1b214:	ldr	r6, [sp, #40]	; 0x28
   1b218:	ldr	r3, [r5, #16]
   1b21c:	cmp	r8, r3
   1b220:	bge	1b138 <__assert_fail@plt+0x9bd4>
   1b224:	ldr	r3, [r5, #20]
   1b228:	ldr	r3, [r3, r8, lsl #2]
   1b22c:	str	r3, [sp, #52]	; 0x34
   1b230:	ldr	r3, [r3, #4]
   1b234:	sub	r2, r3, r6
   1b238:	str	r3, [sp, #40]	; 0x28
   1b23c:	add	r3, r2, fp
   1b240:	cmp	r2, #0
   1b244:	str	r3, [sp, #32]
   1b248:	bgt	1b0e4 <__assert_fail@plt+0x9b80>
   1b24c:	mov	r1, r5
   1b250:	mov	r0, r4
   1b254:	str	r9, [sp]
   1b258:	ldr	r3, [sp, #16]
   1b25c:	ldr	r2, [sp, #52]	; 0x34
   1b260:	bl	1ada0 <__assert_fail@plt+0x983c>
   1b264:	cmp	r0, #1
   1b268:	ldr	r7, [r4, #4]
   1b26c:	bls	1b20c <__assert_fail@plt+0x9ca8>
   1b270:	str	r0, [sp, #64]	; 0x40
   1b274:	ldr	r0, [sp, #64]	; 0x40
   1b278:	add	sp, sp, #84	; 0x54
   1b27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b280:	cmn	r8, #1
   1b284:	beq	1b14c <__assert_fail@plt+0x9be8>
   1b288:	ldr	r3, [r5, #8]
   1b28c:	cmp	r3, #0
   1b290:	beq	1b350 <__assert_fail@plt+0x9dec>
   1b294:	mov	r3, #9
   1b298:	mov	r0, r4
   1b29c:	str	r8, [sp]
   1b2a0:	str	r6, [sp, #4]
   1b2a4:	str	r3, [sp, #8]
   1b2a8:	ldr	r3, [r5]
   1b2ac:	ldr	r2, [r5, #4]
   1b2b0:	ldr	r1, [r5, #8]
   1b2b4:	bl	1a8ac <__assert_fail@plt+0x9348>
   1b2b8:	cmp	r0, #1
   1b2bc:	beq	1b14c <__assert_fail@plt+0x9be8>
   1b2c0:	cmp	r0, #0
   1b2c4:	bne	1b270 <__assert_fail@plt+0x9d0c>
   1b2c8:	ldr	r3, [r5, #12]
   1b2cc:	ldr	r7, [r5, #16]
   1b2d0:	cmp	r7, r3
   1b2d4:	bne	1b2fc <__assert_fail@plt+0x9d98>
   1b2d8:	lsl	r7, r7, #1
   1b2dc:	ldr	r0, [r5, #20]
   1b2e0:	add	r7, r7, #1
   1b2e4:	lsl	r1, r7, #2
   1b2e8:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1b2ec:	cmp	r0, #0
   1b2f0:	beq	1b370 <__assert_fail@plt+0x9e0c>
   1b2f4:	str	r7, [r5, #12]
   1b2f8:	str	r0, [r5, #20]
   1b2fc:	mov	r1, #20
   1b300:	mov	r0, #1
   1b304:	bl	20e98 <__assert_fail@plt+0xf934>
   1b308:	subs	r2, r0, #0
   1b30c:	beq	1b370 <__assert_fail@plt+0x9e0c>
   1b310:	ldr	r3, [r5, #16]
   1b314:	mov	r0, r4
   1b318:	ldr	r1, [r5, #20]
   1b31c:	str	r2, [r1, r3, lsl #2]
   1b320:	add	r3, r3, #1
   1b324:	mov	r1, r5
   1b328:	str	r8, [r2]
   1b32c:	str	r6, [r2, #4]
   1b330:	str	r3, [r5, #16]
   1b334:	str	r9, [sp]
   1b338:	ldr	r3, [sp, #16]
   1b33c:	bl	1ada0 <__assert_fail@plt+0x983c>
   1b340:	cmp	r0, #1
   1b344:	ldr	r7, [r4, #4]
   1b348:	bls	1b14c <__assert_fail@plt+0x9be8>
   1b34c:	b	1b270 <__assert_fail@plt+0x9d0c>
   1b350:	ldr	r1, [r5]
   1b354:	mov	r0, #12
   1b358:	sub	r1, r6, r1
   1b35c:	add	r1, r1, #1
   1b360:	bl	20e98 <__assert_fail@plt+0xf934>
   1b364:	cmp	r0, #0
   1b368:	str	r0, [r5, #8]
   1b36c:	bne	1b294 <__assert_fail@plt+0x9d30>
   1b370:	mov	r3, #12
   1b374:	str	r3, [sp, #64]	; 0x40
   1b378:	b	1b274 <__assert_fail@plt+0x9d10>
   1b37c:	ldr	r3, [r2, #4]
   1b380:	cmp	r3, r9
   1b384:	bne	1b050 <__assert_fail@plt+0x9aec>
   1b388:	ldr	r3, [r2, #8]
   1b38c:	mov	r0, r4
   1b390:	ldr	r5, [r2, #12]
   1b394:	ldr	r6, [sl, #24]
   1b398:	subs	r2, r5, r3
   1b39c:	add	r5, r5, r9
   1b3a0:	ldrne	r1, [sp, #28]
   1b3a4:	sub	r5, r5, r3
   1b3a8:	str	r2, [sp, #32]
   1b3ac:	ldreq	r2, [sl, #20]
   1b3b0:	ldrne	r2, [sl, #12]
   1b3b4:	addeq	r2, r2, fp
   1b3b8:	ldreq	r2, [r2, #8]
   1b3bc:	ldrne	r2, [r2, r1]
   1b3c0:	mov	r1, #12
   1b3c4:	ldreq	r2, [r2]
   1b3c8:	mla	r6, r1, r2, r6
   1b3cc:	sub	r1, r5, #1
   1b3d0:	ldr	r2, [r4, #88]	; 0x58
   1b3d4:	bl	189cc <__assert_fail@plt+0x7468>
   1b3d8:	ldr	r2, [sp, #44]	; 0x2c
   1b3dc:	mov	r3, r0
   1b3e0:	ldr	r8, [r4, #100]	; 0x64
   1b3e4:	ldr	r7, [r8, r2]
   1b3e8:	ldr	r1, [r8, r5, lsl #2]
   1b3ec:	cmp	r7, #0
   1b3f0:	ldrne	r7, [r7, #8]
   1b3f4:	cmp	r1, #0
   1b3f8:	bne	1b488 <__assert_fail@plt+0x9f24>
   1b3fc:	mov	r2, r6
   1b400:	mov	r1, sl
   1b404:	add	r0, sp, #64	; 0x40
   1b408:	bl	17940 <__assert_fail@plt+0x63dc>
   1b40c:	str	r0, [r8, r5, lsl #2]
   1b410:	ldr	r3, [r4, #100]	; 0x64
   1b414:	ldr	r3, [r3, r5, lsl #2]
   1b418:	cmp	r3, #0
   1b41c:	bne	1b42c <__assert_fail@plt+0x9ec8>
   1b420:	ldr	r3, [sp, #64]	; 0x40
   1b424:	cmp	r3, #0
   1b428:	bne	1b274 <__assert_fail@plt+0x9d10>
   1b42c:	ldr	r3, [sp, #32]
   1b430:	cmp	r3, #0
   1b434:	bne	1b050 <__assert_fail@plt+0x9aec>
   1b438:	ldr	r2, [sp, #44]	; 0x2c
   1b43c:	ldr	r3, [r4, #100]	; 0x64
   1b440:	ldr	r3, [r3, r2]
   1b444:	ldr	r3, [r3, #8]
   1b448:	cmp	r3, r7
   1b44c:	ble	1b050 <__assert_fail@plt+0x9aec>
   1b450:	mov	r2, r9
   1b454:	mov	r1, r6
   1b458:	mov	r0, r4
   1b45c:	bl	16620 <__assert_fail@plt+0x50bc>
   1b460:	cmp	r0, #0
   1b464:	str	r0, [sp, #64]	; 0x40
   1b468:	bne	1b274 <__assert_fail@plt+0x9d10>
   1b46c:	mov	r1, r6
   1b470:	mov	r0, r4
   1b474:	bl	1aee0 <__assert_fail@plt+0x997c>
   1b478:	cmp	r0, #0
   1b47c:	str	r0, [sp, #64]	; 0x40
   1b480:	beq	1b050 <__assert_fail@plt+0x9aec>
   1b484:	b	1b274 <__assert_fail@plt+0x9d10>
   1b488:	mov	r2, r6
   1b48c:	add	r0, sp, #68	; 0x44
   1b490:	ldr	r1, [r1, #40]	; 0x28
   1b494:	str	r3, [sp, #36]	; 0x24
   1b498:	bl	17800 <__assert_fail@plt+0x629c>
   1b49c:	cmp	r0, #0
   1b4a0:	str	r0, [sp, #64]	; 0x40
   1b4a4:	ldr	r3, [sp, #36]	; 0x24
   1b4a8:	beq	1b4b8 <__assert_fail@plt+0x9f54>
   1b4ac:	ldr	r0, [sp, #76]	; 0x4c
   1b4b0:	bl	13648 <__assert_fail@plt+0x20e4>
   1b4b4:	b	1b274 <__assert_fail@plt+0x9d10>
   1b4b8:	ldr	r8, [r4, #100]	; 0x64
   1b4bc:	add	r2, sp, #68	; 0x44
   1b4c0:	mov	r1, sl
   1b4c4:	add	r0, sp, #64	; 0x40
   1b4c8:	bl	17940 <__assert_fail@plt+0x63dc>
   1b4cc:	str	r0, [r8, r5, lsl #2]
   1b4d0:	ldr	r0, [sp, #76]	; 0x4c
   1b4d4:	bl	13648 <__assert_fail@plt+0x20e4>
   1b4d8:	b	1b410 <__assert_fail@plt+0x9eac>
   1b4dc:	andeq	pc, r3, r0, lsl #30
   1b4e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4e4:	mov	r4, r2
   1b4e8:	sub	sp, sp, #20
   1b4ec:	mov	r8, r0
   1b4f0:	mov	r5, r1
   1b4f4:	ldr	r6, [r1, #40]	; 0x28
   1b4f8:	ldr	sl, [r1, #84]	; 0x54
   1b4fc:	ldr	r2, [r1, #104]	; 0x68
   1b500:	ldr	r3, [r1, #100]	; 0x64
   1b504:	cmp	r2, r6
   1b508:	strlt	r4, [r3, r6, lsl #2]
   1b50c:	strlt	r6, [r1, #104]	; 0x68
   1b510:	blt	1b5b0 <__assert_fail@plt+0xa04c>
   1b514:	ldr	r2, [r3, r6, lsl #2]
   1b518:	cmp	r2, #0
   1b51c:	streq	r4, [r3, r6, lsl #2]
   1b520:	beq	1b5b0 <__assert_fail@plt+0xa04c>
   1b524:	cmp	r4, #0
   1b528:	add	r7, sp, #4
   1b52c:	ldr	r2, [r2, #40]	; 0x28
   1b530:	beq	1b560 <__assert_fail@plt+0x9ffc>
   1b534:	ldr	r9, [r4, #40]	; 0x28
   1b538:	mov	r0, r7
   1b53c:	mov	r1, r9
   1b540:	bl	17800 <__assert_fail@plt+0x629c>
   1b544:	cmp	r0, #0
   1b548:	str	r0, [r8]
   1b54c:	beq	1b56c <__assert_fail@plt+0xa008>
   1b550:	mov	r4, #0
   1b554:	mov	r0, r4
   1b558:	add	sp, sp, #20
   1b55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b560:	ldm	r2, {r0, r1, r2}
   1b564:	mov	r9, r4
   1b568:	stm	r7, {r0, r1, r2}
   1b56c:	mov	r0, r5
   1b570:	ldr	r1, [r5, #40]	; 0x28
   1b574:	ldr	r2, [r5, #88]	; 0x58
   1b578:	sub	r1, r1, #1
   1b57c:	bl	189cc <__assert_fail@plt+0x7468>
   1b580:	ldr	fp, [r5, #100]	; 0x64
   1b584:	mov	r3, r0
   1b588:	mov	r2, r7
   1b58c:	mov	r1, sl
   1b590:	mov	r0, r8
   1b594:	bl	17940 <__assert_fail@plt+0x63dc>
   1b598:	cmp	r9, #0
   1b59c:	mov	r4, r0
   1b5a0:	str	r0, [fp, r6, lsl #2]
   1b5a4:	beq	1b5b0 <__assert_fail@plt+0xa04c>
   1b5a8:	ldr	r0, [sp, #12]
   1b5ac:	bl	13648 <__assert_fail@plt+0x20e4>
   1b5b0:	ldr	r3, [sl, #76]	; 0x4c
   1b5b4:	cmp	r3, #0
   1b5b8:	beq	1b554 <__assert_fail@plt+0x9ff0>
   1b5bc:	cmp	r4, #0
   1b5c0:	beq	1b550 <__assert_fail@plt+0x9fec>
   1b5c4:	add	r7, r4, #4
   1b5c8:	mov	r2, r6
   1b5cc:	mov	r1, r7
   1b5d0:	mov	r0, r5
   1b5d4:	bl	16620 <__assert_fail@plt+0x50bc>
   1b5d8:	cmp	r0, #0
   1b5dc:	str	r0, [r8]
   1b5e0:	bne	1b550 <__assert_fail@plt+0x9fec>
   1b5e4:	ldrb	r3, [r4, #52]	; 0x34
   1b5e8:	tst	r3, #64	; 0x40
   1b5ec:	beq	1b554 <__assert_fail@plt+0x9ff0>
   1b5f0:	mov	r1, r7
   1b5f4:	mov	r0, r5
   1b5f8:	bl	1aee0 <__assert_fail@plt+0x997c>
   1b5fc:	cmp	r0, #0
   1b600:	str	r0, [r8]
   1b604:	bne	1b550 <__assert_fail@plt+0x9fec>
   1b608:	ldr	r3, [r5, #100]	; 0x64
   1b60c:	ldr	r4, [r3, r6, lsl #2]
   1b610:	b	1b554 <__assert_fail@plt+0x9ff0>
   1b614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b618:	mov	r4, r3
   1b61c:	sub	sp, sp, #84	; 0x54
   1b620:	mov	r3, #0
   1b624:	mov	r5, r2
   1b628:	mov	r7, r0
   1b62c:	mov	r6, r1
   1b630:	str	r3, [sp, #48]	; 0x30
   1b634:	lsl	r3, r2, #2
   1b638:	ldr	r8, [r0, #84]	; 0x54
   1b63c:	str	r3, [sp, #24]
   1b640:	ldr	r3, [r0, #100]	; 0x64
   1b644:	ldr	fp, [r3, r2, lsl #2]
   1b648:	ldr	r3, [r4, #4]
   1b64c:	cmp	fp, #0
   1b650:	addne	fp, fp, #4
   1b654:	cmp	r3, #0
   1b658:	ldreq	r2, [r1]
   1b65c:	streq	r3, [r2, r5, lsl #2]
   1b660:	beq	1b958 <__assert_fail@plt+0xa3f4>
   1b664:	cmp	fp, #0
   1b668:	bne	1b69c <__assert_fail@plt+0xa138>
   1b66c:	mov	r2, r4
   1b670:	mov	r1, r8
   1b674:	ldr	r9, [r6]
   1b678:	add	r0, sp, #48	; 0x30
   1b67c:	bl	1a46c <__assert_fail@plt+0x8f08>
   1b680:	ldr	r3, [sp, #48]	; 0x30
   1b684:	str	r0, [r9, r5, lsl #2]
   1b688:	cmp	r3, #0
   1b68c:	beq	1b958 <__assert_fail@plt+0xa3f4>
   1b690:	mov	r0, r3
   1b694:	add	sp, sp, #84	; 0x54
   1b698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b69c:	mov	r3, #0
   1b6a0:	mov	r2, r4
   1b6a4:	mov	r1, r8
   1b6a8:	add	r0, sp, #52	; 0x34
   1b6ac:	str	r3, [sp, #52]	; 0x34
   1b6b0:	bl	1a46c <__assert_fail@plt+0x8f08>
   1b6b4:	ldr	r3, [sp, #52]	; 0x34
   1b6b8:	cmp	r3, #0
   1b6bc:	bne	1b6e4 <__assert_fail@plt+0xa180>
   1b6c0:	ldr	r3, [r0, #28]
   1b6c4:	add	sl, r0, #28
   1b6c8:	cmp	r3, #0
   1b6cc:	beq	1b720 <__assert_fail@plt+0xa1bc>
   1b6d0:	mov	r2, sl
   1b6d4:	mov	r1, fp
   1b6d8:	mov	r0, r4
   1b6dc:	bl	17544 <__assert_fail@plt+0x5fe0>
   1b6e0:	mov	r3, r0
   1b6e4:	cmp	r3, #0
   1b6e8:	str	r3, [sp, #48]	; 0x30
   1b6ec:	bne	1b690 <__assert_fail@plt+0xa12c>
   1b6f0:	ldr	r2, [r6, #20]
   1b6f4:	cmp	r2, #0
   1b6f8:	ldrne	r2, [r7, #116]	; 0x74
   1b6fc:	strne	r2, [sp, #16]
   1b700:	beq	1b66c <__assert_fail@plt+0xa108>
   1b704:	str	r3, [sp, #12]
   1b708:	ldr	r2, [sp, #12]
   1b70c:	ldr	r3, [r6, #20]
   1b710:	cmp	r2, r3
   1b714:	blt	1b780 <__assert_fail@plt+0xa21c>
   1b718:	mov	r3, #0
   1b71c:	b	1b86c <__assert_fail@plt+0xa308>
   1b720:	mov	r0, sl
   1b724:	ldr	r1, [r4, #4]
   1b728:	bl	1597c <__assert_fail@plt+0x4418>
   1b72c:	cmp	r0, #0
   1b730:	mov	r9, r0
   1b734:	str	r0, [sp, #52]	; 0x34
   1b738:	movne	r3, #12
   1b73c:	bne	1b690 <__assert_fail@plt+0xa12c>
   1b740:	ldr	r3, [r4, #4]
   1b744:	mov	r2, #12
   1b748:	cmp	r9, r3
   1b74c:	bge	1b6d0 <__assert_fail@plt+0xa16c>
   1b750:	ldr	r3, [r4, #8]
   1b754:	mov	r0, sl
   1b758:	ldr	r1, [r3, r9, lsl #2]
   1b75c:	ldr	r3, [r8, #28]
   1b760:	mla	r1, r2, r1, r3
   1b764:	bl	18680 <__assert_fail@plt+0x711c>
   1b768:	cmp	r0, #0
   1b76c:	str	r0, [sp, #52]	; 0x34
   1b770:	addeq	r9, r9, #1
   1b774:	beq	1b740 <__assert_fail@plt+0xa1dc>
   1b778:	mov	r3, #12
   1b77c:	b	1b6e4 <__assert_fail@plt+0xa180>
   1b780:	ldr	r2, [sp, #12]
   1b784:	ldr	r3, [r6, #24]
   1b788:	ldr	r3, [r3, r2, lsl #2]
   1b78c:	mov	r2, #24
   1b790:	mul	r3, r2, r3
   1b794:	ldr	r2, [sp, #16]
   1b798:	add	r2, r2, r3
   1b79c:	ldr	r1, [r2, #8]
   1b7a0:	cmp	r5, r1
   1b7a4:	bgt	1b7b4 <__assert_fail@plt+0xa250>
   1b7a8:	ldr	r3, [sp, #12]
   1b7ac:	add	r3, r3, #1
   1b7b0:	b	1b704 <__assert_fail@plt+0xa1a0>
   1b7b4:	ldr	r1, [r2, #4]
   1b7b8:	cmp	r5, r1
   1b7bc:	bgt	1b7a8 <__assert_fail@plt+0xa244>
   1b7c0:	ldr	r1, [sp, #16]
   1b7c4:	ldr	r0, [r8]
   1b7c8:	ldr	r3, [r1, r3]
   1b7cc:	ldr	r9, [r0, r3, lsl #3]
   1b7d0:	ldr	r3, [r2, #12]
   1b7d4:	cmp	r5, r3
   1b7d8:	movne	sl, #0
   1b7dc:	bne	1b920 <__assert_fail@plt+0xa3bc>
   1b7e0:	ldr	lr, [r4, #4]
   1b7e4:	mvn	sl, #0
   1b7e8:	mov	r2, #0
   1b7ec:	mov	r1, sl
   1b7f0:	cmp	r2, lr
   1b7f4:	blt	1b810 <__assert_fail@plt+0xa2ac>
   1b7f8:	cmp	r1, #0
   1b7fc:	bge	1b854 <__assert_fail@plt+0xa2f0>
   1b800:	cmp	sl, #0
   1b804:	blt	1b7a8 <__assert_fail@plt+0xa244>
   1b808:	mov	r9, #0
   1b80c:	b	1b8ec <__assert_fail@plt+0xa388>
   1b810:	ldr	r3, [r4, #8]
   1b814:	ldr	r3, [r3, r2, lsl #2]
   1b818:	add	ip, r0, r3, lsl #3
   1b81c:	ldrb	ip, [ip, #4]
   1b820:	cmp	ip, #8
   1b824:	bne	1b83c <__assert_fail@plt+0xa2d8>
   1b828:	ldr	ip, [r0, r3, lsl #3]
   1b82c:	cmp	r9, ip
   1b830:	moveq	r1, r3
   1b834:	add	r2, r2, #1
   1b838:	b	1b7f0 <__assert_fail@plt+0xa28c>
   1b83c:	cmp	ip, #9
   1b840:	bne	1b834 <__assert_fail@plt+0xa2d0>
   1b844:	ldr	ip, [r0, r3, lsl #3]
   1b848:	cmp	r9, ip
   1b84c:	moveq	sl, r3
   1b850:	b	1b834 <__assert_fail@plt+0xa2d0>
   1b854:	mov	r3, fp
   1b858:	mov	r2, r4
   1b85c:	mov	r0, r8
   1b860:	bl	17d8c <__assert_fail@plt+0x6828>
   1b864:	subs	r3, r0, #0
   1b868:	beq	1b800 <__assert_fail@plt+0xa29c>
   1b86c:	cmp	r3, #0
   1b870:	str	r3, [sp, #48]	; 0x30
   1b874:	beq	1b66c <__assert_fail@plt+0xa108>
   1b878:	b	1b690 <__assert_fail@plt+0xa12c>
   1b87c:	ldr	r3, [r4, #8]
   1b880:	mov	r1, sl
   1b884:	ldr	r0, [r8, #28]
   1b888:	ldr	r3, [r3, r9, lsl #2]
   1b88c:	str	r3, [sp, #20]
   1b890:	mov	r3, #12
   1b894:	ldr	r2, [sp, #20]
   1b898:	mul	r3, r3, r2
   1b89c:	add	r0, r0, r3
   1b8a0:	str	r3, [sp, #28]
   1b8a4:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1b8a8:	cmp	r0, #0
   1b8ac:	bne	1b8e8 <__assert_fail@plt+0xa384>
   1b8b0:	ldr	r0, [r8, #24]
   1b8b4:	ldr	r3, [sp, #28]
   1b8b8:	add	r0, r0, r3
   1b8bc:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1b8c0:	cmp	r0, #0
   1b8c4:	bne	1b8e8 <__assert_fail@plt+0xa384>
   1b8c8:	mov	r3, fp
   1b8cc:	mov	r2, r4
   1b8d0:	ldr	r1, [sp, #20]
   1b8d4:	mov	r0, r8
   1b8d8:	bl	17d8c <__assert_fail@plt+0x6828>
   1b8dc:	subs	r3, r0, #0
   1b8e0:	bne	1b86c <__assert_fail@plt+0xa308>
   1b8e4:	sub	r9, r9, #1
   1b8e8:	add	r9, r9, #1
   1b8ec:	ldr	r3, [r4, #4]
   1b8f0:	cmp	r9, r3
   1b8f4:	blt	1b87c <__assert_fail@plt+0xa318>
   1b8f8:	b	1b7a8 <__assert_fail@plt+0xa244>
   1b8fc:	ldr	r3, [r4, #8]
   1b900:	ldr	r2, [r8]
   1b904:	ldr	r1, [r3, sl, lsl #2]
   1b908:	add	r3, r2, r1, lsl #3
   1b90c:	ldrb	r3, [r3, #4]
   1b910:	sub	r3, r3, #8
   1b914:	cmp	r3, #1
   1b918:	bls	1b930 <__assert_fail@plt+0xa3cc>
   1b91c:	add	sl, sl, #1
   1b920:	ldr	r3, [r4, #4]
   1b924:	cmp	sl, r3
   1b928:	blt	1b8fc <__assert_fail@plt+0xa398>
   1b92c:	b	1b7a8 <__assert_fail@plt+0xa244>
   1b930:	ldr	r3, [r2, r1, lsl #3]
   1b934:	cmp	r9, r3
   1b938:	bne	1b91c <__assert_fail@plt+0xa3b8>
   1b93c:	mov	r3, fp
   1b940:	mov	r2, r4
   1b944:	mov	r0, r8
   1b948:	bl	17d8c <__assert_fail@plt+0x6828>
   1b94c:	subs	r3, r0, #0
   1b950:	beq	1b91c <__assert_fail@plt+0xa3b8>
   1b954:	b	1b86c <__assert_fail@plt+0xa308>
   1b958:	cmp	fp, #0
   1b95c:	moveq	r3, fp
   1b960:	beq	1b690 <__assert_fail@plt+0xa12c>
   1b964:	ldr	r3, [r7, #100]	; 0x64
   1b968:	ldr	r3, [r3, r5, lsl #2]
   1b96c:	ldrb	r3, [r3, #52]	; 0x34
   1b970:	ands	r3, r3, #64	; 0x40
   1b974:	beq	1b690 <__assert_fail@plt+0xa12c>
   1b978:	mov	r1, r5
   1b97c:	mov	r0, r7
   1b980:	bl	15410 <__assert_fail@plt+0x3eac>
   1b984:	cmn	r0, #1
   1b988:	mov	r2, #0
   1b98c:	str	r0, [sp, #16]
   1b990:	mov	r3, r0
   1b994:	moveq	r3, r2
   1b998:	beq	1b690 <__assert_fail@plt+0xa12c>
   1b99c:	ldr	r1, [sp, #16]
   1b9a0:	mov	r3, #24
   1b9a4:	str	r2, [sp, #12]
   1b9a8:	ldr	sl, [r7, #84]	; 0x54
   1b9ac:	str	r2, [sp, #52]	; 0x34
   1b9b0:	mul	r3, r3, r1
   1b9b4:	str	r3, [sp, #28]
   1b9b8:	add	r3, r6, #16
   1b9bc:	str	r3, [sp, #20]
   1b9c0:	ldr	r3, [fp, #4]
   1b9c4:	ldr	r2, [sp, #12]
   1b9c8:	cmp	r2, r3
   1b9cc:	movge	r3, #0
   1b9d0:	bge	1bb0c <__assert_fail@plt+0xa5a8>
   1b9d4:	ldr	r3, [fp, #8]
   1b9d8:	ldr	r2, [sp, #12]
   1b9dc:	ldr	r8, [r3, r2, lsl #2]
   1b9e0:	ldr	r3, [sl]
   1b9e4:	ldr	r2, [r6, #8]
   1b9e8:	add	r3, r3, r8, lsl #3
   1b9ec:	cmp	r8, r2
   1b9f0:	ldrb	r3, [r3, #4]
   1b9f4:	bne	1ba14 <__assert_fail@plt+0xa4b0>
   1b9f8:	ldr	r2, [r6, #12]
   1b9fc:	cmp	r5, r2
   1ba00:	bne	1ba14 <__assert_fail@plt+0xa4b0>
   1ba04:	ldr	r3, [sp, #12]
   1ba08:	add	r3, r3, #1
   1ba0c:	str	r3, [sp, #12]
   1ba10:	b	1b9c0 <__assert_fail@plt+0xa45c>
   1ba14:	cmp	r3, #4
   1ba18:	bne	1ba04 <__assert_fail@plt+0xa4a0>
   1ba1c:	ldr	r4, [r7, #116]	; 0x74
   1ba20:	ldr	r3, [sp, #28]
   1ba24:	ldr	r9, [sp, #16]
   1ba28:	add	r4, r4, r3
   1ba2c:	mov	r3, #12
   1ba30:	mul	r3, r3, r8
   1ba34:	str	r3, [sp, #36]	; 0x24
   1ba38:	lsl	r3, r8, #2
   1ba3c:	str	r3, [sp, #32]
   1ba40:	ldr	r3, [r4]
   1ba44:	cmp	r8, r3
   1ba48:	bne	1bbbc <__assert_fail@plt+0xa658>
   1ba4c:	ldrd	r2, [r4, #8]
   1ba50:	sub	r3, r3, r2
   1ba54:	cmp	r3, #0
   1ba58:	add	r2, r5, r3
   1ba5c:	ldreq	r1, [sp, #36]	; 0x24
   1ba60:	ldreq	r3, [sl, #20]
   1ba64:	ldrne	r1, [sp, #32]
   1ba68:	ldrne	r3, [sl, #12]
   1ba6c:	addeq	r3, r3, r1
   1ba70:	ldreq	r3, [r3, #8]
   1ba74:	ldrne	r3, [r3, r1]
   1ba78:	ldr	r1, [r6, #12]
   1ba7c:	ldreq	r3, [r3]
   1ba80:	cmp	r2, r1
   1ba84:	bgt	1bbbc <__assert_fail@plt+0xa658>
   1ba88:	ldr	r1, [r6]
   1ba8c:	str	r2, [sp, #44]	; 0x2c
   1ba90:	ldr	r0, [r1, r2, lsl #2]
   1ba94:	cmp	r0, #0
   1ba98:	beq	1bbbc <__assert_fail@plt+0xa658>
   1ba9c:	mov	r1, r3
   1baa0:	add	r0, r0, #4
   1baa4:	str	r3, [sp, #40]	; 0x28
   1baa8:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1baac:	cmp	r0, #0
   1bab0:	beq	1bbbc <__assert_fail@plt+0xa658>
   1bab4:	mov	r0, r7
   1bab8:	ldr	r1, [sp, #20]
   1babc:	ldr	r3, [sp, #40]	; 0x28
   1bac0:	ldr	r2, [sp, #44]	; 0x2c
   1bac4:	str	r3, [sp]
   1bac8:	mov	r3, r5
   1bacc:	str	r2, [sp, #4]
   1bad0:	mov	r2, r8
   1bad4:	bl	1547c <__assert_fail@plt+0x3f18>
   1bad8:	cmp	r0, #0
   1badc:	bne	1bbbc <__assert_fail@plt+0xa658>
   1bae0:	ldr	r3, [sp, #52]	; 0x34
   1bae4:	cmp	r3, #0
   1bae8:	beq	1bb2c <__assert_fail@plt+0xa5c8>
   1baec:	mov	r1, r9
   1baf0:	add	r0, sp, #68	; 0x44
   1baf4:	str	r8, [sp, #60]	; 0x3c
   1baf8:	str	r5, [sp, #64]	; 0x40
   1bafc:	bl	182a8 <__assert_fail@plt+0x6d44>
   1bb00:	cmp	r0, #0
   1bb04:	bne	1bb60 <__assert_fail@plt+0xa5fc>
   1bb08:	mov	r3, #12
   1bb0c:	ldr	r2, [sp, #52]	; 0x34
   1bb10:	cmp	r2, #0
   1bb14:	beq	1b690 <__assert_fail@plt+0xa12c>
   1bb18:	ldr	r0, [sp, #76]	; 0x4c
   1bb1c:	str	r3, [sp, #12]
   1bb20:	bl	13648 <__assert_fail@plt+0x20e4>
   1bb24:	ldr	r3, [sp, #12]
   1bb28:	b	1b690 <__assert_fail@plt+0xa12c>
   1bb2c:	mov	lr, r6
   1bb30:	add	ip, sp, #52	; 0x34
   1bb34:	ldm	lr!, {r0, r1, r2, r3}
   1bb38:	stmia	ip!, {r0, r1, r2, r3}
   1bb3c:	ldr	r3, [sp, #20]
   1bb40:	ldm	r3, {r0, r1, r2}
   1bb44:	stm	ip, {r0, r1, r2}
   1bb48:	mov	r1, r3
   1bb4c:	add	r0, sp, #68	; 0x44
   1bb50:	bl	17788 <__assert_fail@plt+0x6224>
   1bb54:	subs	r3, r0, #0
   1bb58:	beq	1baec <__assert_fail@plt+0xa588>
   1bb5c:	b	1bb0c <__assert_fail@plt+0xa5a8>
   1bb60:	ldr	r2, [sp, #24]
   1bb64:	add	r1, sp, #52	; 0x34
   1bb68:	mov	r0, r7
   1bb6c:	ldr	r3, [sp, #52]	; 0x34
   1bb70:	ldr	r4, [r3, r2]
   1bb74:	bl	1bbf4 <__assert_fail@plt+0xa690>
   1bb78:	subs	r3, r0, #0
   1bb7c:	bne	1bb0c <__assert_fail@plt+0xa5a8>
   1bb80:	ldr	r1, [r6, #4]
   1bb84:	cmp	r1, #0
   1bb88:	bne	1bbd8 <__assert_fail@plt+0xa674>
   1bb8c:	ldr	r2, [sp, #24]
   1bb90:	mov	r1, r9
   1bb94:	add	r0, sp, #68	; 0x44
   1bb98:	ldr	r3, [sp, #52]	; 0x34
   1bb9c:	str	r4, [r3, r2]
   1bba0:	mov	r4, #24
   1bba4:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1bba8:	sub	r1, r0, #1
   1bbac:	add	r0, sp, #68	; 0x44
   1bbb0:	bl	173b8 <__assert_fail@plt+0x5e54>
   1bbb4:	ldr	r3, [r7, #116]	; 0x74
   1bbb8:	mla	r4, r4, r9, r3
   1bbbc:	ldrb	r3, [r4, #20]
   1bbc0:	add	r9, r9, #1
   1bbc4:	add	r2, r4, #24
   1bbc8:	cmp	r3, #0
   1bbcc:	beq	1ba04 <__assert_fail@plt+0xa4a0>
   1bbd0:	mov	r4, r2
   1bbd4:	b	1ba40 <__assert_fail@plt+0xa4dc>
   1bbd8:	add	r3, r5, #1
   1bbdc:	mov	r0, sl
   1bbe0:	ldr	r2, [sp, #52]	; 0x34
   1bbe4:	bl	1a61c <__assert_fail@plt+0x90b8>
   1bbe8:	subs	r3, r0, #0
   1bbec:	beq	1bb8c <__assert_fail@plt+0xa628>
   1bbf0:	b	1bb0c <__assert_fail@plt+0xa5a8>
   1bbf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbf8:	sub	sp, sp, #52	; 0x34
   1bbfc:	mov	r6, r0
   1bc00:	mov	r5, r1
   1bc04:	add	r0, sp, #36	; 0x24
   1bc08:	ldr	r4, [r1, #12]
   1bc0c:	ldr	r1, [r1, #8]
   1bc10:	bl	1593c <__assert_fail@plt+0x43d8>
   1bc14:	subs	r8, r0, #0
   1bc18:	bne	1bc4c <__assert_fail@plt+0xa6e8>
   1bc1c:	add	r3, sp, #36	; 0x24
   1bc20:	mov	r2, r4
   1bc24:	mov	r1, r5
   1bc28:	mov	r0, r6
   1bc2c:	bl	1b614 <__assert_fail@plt+0xa0b0>
   1bc30:	subs	r8, r0, #0
   1bc34:	addeq	r3, r5, #16
   1bc38:	moveq	fp, r8
   1bc3c:	streq	r3, [sp, #28]
   1bc40:	beq	1be14 <__assert_fail@plt+0xa8b0>
   1bc44:	ldr	r0, [sp, #44]	; 0x2c
   1bc48:	bl	13648 <__assert_fail@plt+0x20e4>
   1bc4c:	mov	r0, r8
   1bc50:	add	sp, sp, #52	; 0x34
   1bc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc58:	mov	r3, #0
   1bc5c:	ldr	r2, [sp, #16]
   1bc60:	sub	r4, r4, #1
   1bc64:	str	r3, [sp, #40]	; 0x28
   1bc68:	ldr	r3, [r6, #100]	; 0x64
   1bc6c:	add	r3, r3, r2
   1bc70:	ldr	sl, [r3, #-4]
   1bc74:	cmp	sl, #0
   1bc78:	movne	r3, #0
   1bc7c:	ldrne	r9, [r6, #84]	; 0x54
   1bc80:	bne	1bcfc <__assert_fail@plt+0xa798>
   1bc84:	add	r3, sp, #36	; 0x24
   1bc88:	mov	r2, r4
   1bc8c:	mov	r1, r5
   1bc90:	mov	r0, r6
   1bc94:	bl	1b614 <__assert_fail@plt+0xa0b0>
   1bc98:	cmp	r0, #0
   1bc9c:	beq	1be14 <__assert_fail@plt+0xa8b0>
   1bca0:	mov	r8, r0
   1bca4:	b	1bc44 <__assert_fail@plt+0xa6e0>
   1bca8:	ldr	r2, [sp, #12]
   1bcac:	ldr	r3, [sl, #24]
   1bcb0:	ldr	r7, [r3, r2, lsl #2]
   1bcb4:	lsl	r3, r7, #3
   1bcb8:	lsl	r2, r7, #3
   1bcbc:	str	r3, [sp, #20]
   1bcc0:	ldr	r3, [r9]
   1bcc4:	add	r3, r3, r2
   1bcc8:	ldrb	r3, [r3, #6]
   1bccc:	tst	r3, #16
   1bcd0:	bne	1bd14 <__assert_fail@plt+0xa7b0>
   1bcd4:	ldr	r1, [r9]
   1bcd8:	lsl	r3, r7, #3
   1bcdc:	mov	r2, r4
   1bce0:	mov	r0, r6
   1bce4:	add	r1, r1, r3
   1bce8:	bl	18aac <__assert_fail@plt+0x7548>
   1bcec:	cmp	r0, #0
   1bcf0:	bne	1bdb4 <__assert_fail@plt+0xa850>
   1bcf4:	ldr	r3, [sp, #12]
   1bcf8:	add	r3, r3, #1
   1bcfc:	str	r3, [sp, #12]
   1bd00:	ldr	r2, [sp, #12]
   1bd04:	ldr	r3, [sl, #20]
   1bd08:	cmp	r2, r3
   1bd0c:	blt	1bca8 <__assert_fail@plt+0xa744>
   1bd10:	b	1bc84 <__assert_fail@plt+0xa720>
   1bd14:	ldr	r3, [r5, #12]
   1bd18:	mov	r2, r6
   1bd1c:	mov	r1, r7
   1bd20:	str	r3, [sp, #24]
   1bd24:	ldr	r3, [r6, #84]	; 0x54
   1bd28:	str	r3, [sp, #20]
   1bd2c:	mov	r3, r4
   1bd30:	ldr	r0, [sp, #20]
   1bd34:	bl	17150 <__assert_fail@plt+0x5bec>
   1bd38:	subs	r3, r0, #0
   1bd3c:	ble	1bdac <__assert_fail@plt+0xa848>
   1bd40:	ldr	r1, [sp, #24]
   1bd44:	add	r2, r4, r3
   1bd48:	cmp	r1, r2
   1bd4c:	blt	1bd84 <__assert_fail@plt+0xa820>
   1bd50:	ldr	r1, [r5]
   1bd54:	str	r3, [sp, #24]
   1bd58:	ldr	r0, [r1, r2, lsl #2]
   1bd5c:	cmp	r0, #0
   1bd60:	beq	1bcd4 <__assert_fail@plt+0xa770>
   1bd64:	ldr	r3, [sp, #20]
   1bd68:	add	r0, r0, #4
   1bd6c:	ldr	r2, [r3, #12]
   1bd70:	ldr	r1, [r2, r7, lsl #2]
   1bd74:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1bd78:	cmp	r0, #0
   1bd7c:	ldrne	r3, [sp, #24]
   1bd80:	beq	1bcd4 <__assert_fail@plt+0xa770>
   1bd84:	ldr	r2, [r5, #20]
   1bd88:	cmp	r2, #0
   1bd8c:	bne	1bde8 <__assert_fail@plt+0xa884>
   1bd90:	mov	r1, r7
   1bd94:	add	r0, sp, #36	; 0x24
   1bd98:	bl	182a8 <__assert_fail@plt+0x6d44>
   1bd9c:	cmp	r0, #0
   1bda0:	bne	1bcf4 <__assert_fail@plt+0xa790>
   1bda4:	mov	r8, #12
   1bda8:	b	1bc44 <__assert_fail@plt+0xa6e0>
   1bdac:	beq	1bcd4 <__assert_fail@plt+0xa770>
   1bdb0:	b	1bd84 <__assert_fail@plt+0xa820>
   1bdb4:	ldr	r3, [r5]
   1bdb8:	ldr	r2, [sp, #16]
   1bdbc:	ldr	r0, [r3, r2]
   1bdc0:	cmp	r0, #0
   1bdc4:	beq	1bcf4 <__assert_fail@plt+0xa790>
   1bdc8:	ldr	r3, [r9, #12]
   1bdcc:	add	r0, r0, #4
   1bdd0:	ldr	r1, [r3, r7, lsl #2]
   1bdd4:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1bcf4 <__assert_fail@plt+0xa790>
   1bde0:	mov	r3, #1
   1bde4:	b	1bd84 <__assert_fail@plt+0xa820>
   1bde8:	ldr	r2, [r9, #12]
   1bdec:	add	r3, r4, r3
   1bdf0:	mov	r0, r6
   1bdf4:	str	r7, [sp]
   1bdf8:	str	r4, [sp, #4]
   1bdfc:	ldr	r1, [sp, #28]
   1be00:	ldr	r2, [r2, r7, lsl #2]
   1be04:	bl	1547c <__assert_fail@plt+0x3f18>
   1be08:	cmp	r0, #0
   1be0c:	beq	1bd90 <__assert_fail@plt+0xa82c>
   1be10:	b	1bcf4 <__assert_fail@plt+0xa790>
   1be14:	cmp	r4, #0
   1be18:	ble	1bc44 <__assert_fail@plt+0xa6e0>
   1be1c:	ldr	r0, [r5]
   1be20:	lsl	r3, r4, #2
   1be24:	str	r3, [sp, #16]
   1be28:	ldr	r3, [r0, r4, lsl #2]
   1be2c:	cmp	r3, #0
   1be30:	ldr	r3, [r6, #120]	; 0x78
   1be34:	addeq	fp, fp, #1
   1be38:	movne	fp, #0
   1be3c:	cmp	r3, fp
   1be40:	bge	1bc58 <__assert_fail@plt+0xa6f4>
   1be44:	mov	r1, #0
   1be48:	ldr	r2, [sp, #16]
   1be4c:	bl	11444 <memset@plt>
   1be50:	b	1bc44 <__assert_fail@plt+0xa6e0>
   1be54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be58:	sub	sp, sp, #412	; 0x19c
   1be5c:	mov	sl, r0
   1be60:	add	r4, sp, #448	; 0x1c0
   1be64:	mov	r7, r3
   1be68:	str	r2, [sp, #24]
   1be6c:	mov	r2, #136	; 0x88
   1be70:	str	r1, [sp, #40]	; 0x28
   1be74:	mov	r1, #0
   1be78:	ldr	fp, [r0]
   1be7c:	add	r0, sp, #132	; 0x84
   1be80:	ldm	r4, {r4, r6, r8}
   1be84:	ldr	r5, [sp, #460]	; 0x1cc
   1be88:	bl	11444 <memset@plt>
   1be8c:	ldr	r3, [sl, #16]
   1be90:	cmp	r3, #0
   1be94:	str	r3, [sp, #16]
   1be98:	str	fp, [sp, #216]	; 0xd8
   1be9c:	beq	1bec4 <__assert_fail@plt+0xa960>
   1bea0:	ldrb	r2, [sl, #28]
   1bea4:	subs	r3, r7, r4
   1bea8:	movne	r3, #1
   1beac:	ands	r3, r3, r2, lsr #3
   1beb0:	beq	1bec0 <__assert_fail@plt+0xa95c>
   1beb4:	tst	r2, #1
   1beb8:	ldr	r3, [sp, #16]
   1bebc:	movne	r3, #0
   1bec0:	str	r3, [sp, #16]
   1bec4:	ldr	r3, [sl, #24]
   1bec8:	cmp	r3, r8
   1becc:	subcc	r2, r8, #1
   1bed0:	movcs	r3, #0
   1bed4:	subcc	r3, r2, r3
   1bed8:	str	r3, [sp, #56]	; 0x38
   1bedc:	ldr	r3, [sl, #8]
   1bee0:	cmp	r3, #0
   1bee4:	beq	1d438 <__assert_fail@plt+0xbed4>
   1bee8:	ldr	r1, [fp, #36]	; 0x24
   1beec:	cmp	r1, #0
   1bef0:	beq	1d438 <__assert_fail@plt+0xbed4>
   1bef4:	ldr	r2, [fp, #40]	; 0x28
   1bef8:	cmp	r2, #0
   1befc:	beq	1d438 <__assert_fail@plt+0xbed4>
   1bf00:	ldr	r3, [fp, #44]	; 0x2c
   1bf04:	cmp	r3, #0
   1bf08:	beq	1d438 <__assert_fail@plt+0xbed4>
   1bf0c:	ldr	r0, [fp, #48]	; 0x30
   1bf10:	cmp	r0, #0
   1bf14:	beq	1d438 <__assert_fail@plt+0xbed4>
   1bf18:	ldr	r1, [r1, #8]
   1bf1c:	cmp	r1, #0
   1bf20:	bne	1bf64 <__assert_fail@plt+0xaa00>
   1bf24:	ldr	r2, [r2, #8]
   1bf28:	cmp	r2, #0
   1bf2c:	bne	1bf64 <__assert_fail@plt+0xaa00>
   1bf30:	ldr	r3, [r3, #8]
   1bf34:	cmp	r3, #0
   1bf38:	beq	1bf48 <__assert_fail@plt+0xa9e4>
   1bf3c:	ldrsb	r3, [sl, #28]
   1bf40:	cmp	r3, #0
   1bf44:	blt	1bf64 <__assert_fail@plt+0xaa00>
   1bf48:	adds	r4, r4, #0
   1bf4c:	movne	r4, #1
   1bf50:	cmp	r7, #0
   1bf54:	moveq	r4, #0
   1bf58:	cmp	r4, #0
   1bf5c:	bne	1d438 <__assert_fail@plt+0xbed4>
   1bf60:	mov	r7, r4
   1bf64:	ldr	r3, [sp, #56]	; 0x38
   1bf68:	subs	r3, r8, r3
   1bf6c:	str	r3, [sp, #8]
   1bf70:	movne	r3, #1
   1bf74:	bne	1bf84 <__assert_fail@plt+0xaa20>
   1bf78:	ldr	r3, [fp, #76]	; 0x4c
   1bf7c:	adds	r3, r3, #0
   1bf80:	movne	r3, #1
   1bf84:	str	r3, [sp, #36]	; 0x24
   1bf88:	ldr	ip, [sp, #40]	; 0x28
   1bf8c:	ldr	r2, [sl, #12]
   1bf90:	ldr	r3, [sl, #20]
   1bf94:	ldr	r0, [fp, #92]	; 0x5c
   1bf98:	ldr	r1, [sp, #24]
   1bf9c:	str	ip, [sp, #132]	; 0x84
   1bfa0:	ldr	ip, [sp, #24]
   1bfa4:	str	r3, [sp, #20]
   1bfa8:	ldr	r3, [fp, #8]
   1bfac:	add	r1, r1, #1
   1bfb0:	str	ip, [sp, #176]	; 0xb0
   1bfb4:	str	ip, [sp, #180]	; 0xb4
   1bfb8:	ldr	ip, [sp, #20]
   1bfbc:	add	r3, r3, #1
   1bfc0:	cmp	r3, r0
   1bfc4:	movlt	r3, r0
   1bfc8:	str	ip, [sp, #196]	; 0xc4
   1bfcc:	and	ip, r2, #4194304	; 0x400000
   1bfd0:	ubfx	r2, r2, #22, #1
   1bfd4:	str	r0, [sp, #212]	; 0xd4
   1bfd8:	strb	r2, [sp, #204]	; 0xcc
   1bfdc:	ldr	r2, [sp, #20]
   1bfe0:	orrs	r2, r2, ip
   1bfe4:	movne	r2, #1
   1bfe8:	moveq	r2, #0
   1bfec:	cmp	r3, r1
   1bff0:	strb	r2, [sp, #207]	; 0xcf
   1bff4:	movlt	r1, r3
   1bff8:	ldrb	r2, [fp, #88]	; 0x58
   1bffc:	ubfx	r0, r2, #2, #1
   1c000:	ubfx	r2, r2, #3, #1
   1c004:	strb	r0, [sp, #205]	; 0xcd
   1c008:	add	r0, sp, #132	; 0x84
   1c00c:	strb	r2, [sp, #206]	; 0xce
   1c010:	ldr	r2, [sp, #24]
   1c014:	str	r2, [sp, #184]	; 0xb8
   1c018:	str	r2, [sp, #188]	; 0xbc
   1c01c:	bl	1554c <__assert_fail@plt+0x3fe8>
   1c020:	cmp	r0, #0
   1c024:	bne	1d114 <__assert_fail@plt+0xbbb0>
   1c028:	add	r3, fp, #96	; 0x60
   1c02c:	str	r3, [sp, #200]	; 0xc8
   1c030:	ldrb	r3, [fp, #88]	; 0x58
   1c034:	ubfx	r3, r3, #4, #1
   1c038:	strb	r3, [sp, #210]	; 0xd2
   1c03c:	ldrb	r3, [sp, #207]	; 0xcf
   1c040:	cmp	r3, #0
   1c044:	ldrne	r2, [sp, #136]	; 0x88
   1c048:	ldreq	r2, [sp, #40]	; 0x28
   1c04c:	cmp	r3, #0
   1c050:	movne	r3, #0
   1c054:	str	r2, [sp, #136]	; 0x88
   1c058:	bne	1c06c <__assert_fail@plt+0xab08>
   1c05c:	ldr	r3, [fp, #92]	; 0x5c
   1c060:	cmp	r3, #1
   1c064:	ldr	r3, [sp, #24]
   1c068:	movgt	r3, #0
   1c06c:	str	r3, [sp, #160]	; 0xa0
   1c070:	str	r3, [sp, #164]	; 0xa4
   1c074:	ldrb	r3, [sl, #28]
   1c078:	str	r6, [sp, #184]	; 0xb8
   1c07c:	str	r6, [sp, #188]	; 0xbc
   1c080:	ubfx	r3, r3, #7, #1
   1c084:	strb	r3, [sp, #209]	; 0xd1
   1c088:	ldr	r8, [fp, #76]	; 0x4c
   1c08c:	ldr	r3, [sp, #464]	; 0x1d0
   1c090:	lsl	r6, r8, #1
   1c094:	str	r3, [sp, #220]	; 0xdc
   1c098:	mvn	r3, #0
   1c09c:	cmp	r6, #0
   1c0a0:	str	r3, [sp, #224]	; 0xe0
   1c0a4:	bgt	1c12c <__assert_fail@plt+0xabc8>
   1c0a8:	mov	r3, #1
   1c0ac:	str	r6, [sp, #244]	; 0xf4
   1c0b0:	str	r3, [sp, #252]	; 0xfc
   1c0b4:	ldr	r3, [sp, #8]
   1c0b8:	str	r6, [sp, #260]	; 0x104
   1c0bc:	cmp	r3, #1
   1c0c0:	bhi	1c170 <__assert_fail@plt+0xac0c>
   1c0c4:	ldrb	r3, [fp, #88]	; 0x58
   1c0c8:	tst	r3, #2
   1c0cc:	bne	1c170 <__assert_fail@plt+0xac0c>
   1c0d0:	ldr	r3, [sp, #464]	; 0x1d0
   1c0d4:	str	r7, [sp, #100]	; 0x64
   1c0d8:	tst	r3, #1
   1c0dc:	movne	r3, #4
   1c0e0:	moveq	r3, #6
   1c0e4:	cmp	r7, r4
   1c0e8:	str	r3, [sp, #192]	; 0xc0
   1c0ec:	mvngt	r3, #0
   1c0f0:	movle	r3, #1
   1c0f4:	str	r3, [sp, #76]	; 0x4c
   1c0f8:	movlt	r3, r7
   1c0fc:	movge	r3, r4
   1c100:	str	r3, [sp, #60]	; 0x3c
   1c104:	movge	r3, r7
   1c108:	movlt	r3, r4
   1c10c:	str	r3, [sp, #28]
   1c110:	ldr	r3, [fp, #92]	; 0x5c
   1c114:	str	r3, [sp, #72]	; 0x48
   1c118:	ldr	r3, [sp, #16]
   1c11c:	cmp	r3, #0
   1c120:	bne	1c198 <__assert_fail@plt+0xac34>
   1c124:	mov	r3, #8
   1c128:	b	1c1dc <__assert_fail@plt+0xac78>
   1c12c:	ldr	r3, [pc, #4072]	; 1d11c <__assert_fail@plt+0xbbb8>
   1c130:	cmp	r6, r3
   1c134:	ble	1c140 <__assert_fail@plt+0xabdc>
   1c138:	mov	r3, #12
   1c13c:	b	1c2c4 <__assert_fail@plt+0xad60>
   1c140:	mov	r0, #24
   1c144:	mul	r0, r0, r6
   1c148:	bl	20eec <__assert_fail@plt+0xf988>
   1c14c:	str	r0, [sp, #248]	; 0xf8
   1c150:	lsl	r0, r8, #3
   1c154:	bl	20eec <__assert_fail@plt+0xf988>
   1c158:	ldr	r3, [sp, #248]	; 0xf8
   1c15c:	str	r0, [sp, #264]	; 0x108
   1c160:	cmp	r0, #0
   1c164:	cmpne	r3, #0
   1c168:	bne	1c0a8 <__assert_fail@plt+0xab44>
   1c16c:	b	1c138 <__assert_fail@plt+0xabd4>
   1c170:	ldr	r0, [sp, #168]	; 0xa8
   1c174:	cmn	r0, #-1073741822	; 0xc0000002
   1c178:	bhi	1c138 <__assert_fail@plt+0xabd4>
   1c17c:	add	r0, r0, #1
   1c180:	lsl	r0, r0, #2
   1c184:	bl	20eec <__assert_fail@plt+0xf988>
   1c188:	cmp	r0, #0
   1c18c:	str	r0, [sp, #232]	; 0xe8
   1c190:	bne	1c0d0 <__assert_fail@plt+0xab6c>
   1c194:	b	1c138 <__assert_fail@plt+0xabd4>
   1c198:	ldr	r3, [sp, #72]	; 0x48
   1c19c:	cmp	r3, #1
   1c1a0:	moveq	r3, #4
   1c1a4:	beq	1c1c0 <__assert_fail@plt+0xac5c>
   1c1a8:	ldr	r3, [sl, #12]
   1c1ac:	ldr	r2, [sp, #20]
   1c1b0:	and	r3, r3, #4194304	; 0x400000
   1c1b4:	orrs	r3, r2, r3
   1c1b8:	moveq	r3, #4
   1c1bc:	movne	r3, #0
   1c1c0:	ldr	r1, [sp, #20]
   1c1c4:	cmp	r7, r4
   1c1c8:	movle	r2, #2
   1c1cc:	movgt	r2, #0
   1c1d0:	cmp	r1, #0
   1c1d4:	orrne	r3, r3, #1
   1c1d8:	orr	r3, r3, r2
   1c1dc:	cmp	r7, r4
   1c1e0:	str	r3, [sp, #80]	; 0x50
   1c1e4:	add	r3, sp, #408	; 0x198
   1c1e8:	suble	r3, r3, #308	; 0x134
   1c1ec:	movgt	r3, #0
   1c1f0:	str	r3, [sp, #84]	; 0x54
   1c1f4:	adds	r3, r3, #0
   1c1f8:	movne	r3, #1
   1c1fc:	str	r3, [sp, #88]	; 0x58
   1c200:	ldr	r2, [sp, #28]
   1c204:	ldr	r1, [sp, #60]	; 0x3c
   1c208:	ldr	r3, [sp, #100]	; 0x64
   1c20c:	cmp	r3, r2
   1c210:	movle	r2, #0
   1c214:	movgt	r2, #1
   1c218:	cmp	r3, r1
   1c21c:	orrlt	r2, r2, #1
   1c220:	cmp	r2, #0
   1c224:	str	r2, [sp, #32]
   1c228:	bne	1c2c0 <__assert_fail@plt+0xad5c>
   1c22c:	ldr	r2, [sp, #80]	; 0x50
   1c230:	sub	r2, r2, #4
   1c234:	cmp	r2, #4
   1c238:	ldrls	pc, [pc, r2, lsl #2]
   1c23c:	b	1c3dc <__assert_fail@plt+0xae78>
   1c240:	andeq	ip, r1, r0, asr #6
   1c244:	andeq	ip, r1, r0, asr #6
   1c248:	andeq	ip, r1, r8, lsl #6
   1c24c:	andeq	ip, r1, r4, asr r2
   1c250:	andeq	ip, r1, ip, ror r4
   1c254:	mov	r2, #0
   1c258:	ldr	r0, [sp, #28]
   1c25c:	mov	r1, r3
   1c260:	cmp	r0, r3
   1c264:	bgt	1c368 <__assert_fail@plt+0xae04>
   1c268:	cmp	r2, #0
   1c26c:	strne	r3, [sp, #100]	; 0x64
   1c270:	ldr	r2, [sp, #28]
   1c274:	ldr	r3, [sp, #100]	; 0x64
   1c278:	cmp	r3, r2
   1c27c:	bne	1c47c <__assert_fail@plt+0xaf18>
   1c280:	mov	r3, r2
   1c284:	ldr	r1, [sp, #20]
   1c288:	ldr	r2, [sp, #24]
   1c28c:	cmp	r3, r2
   1c290:	ldrlt	r3, [sp, #40]	; 0x28
   1c294:	movge	r3, #0
   1c298:	ldrlt	r2, [sp, #28]
   1c29c:	ldrblt	r3, [r3, r2]
   1c2a0:	cmp	r1, #0
   1c2a4:	mov	r2, r3
   1c2a8:	movne	r2, r1
   1c2ac:	ldrbne	r2, [r2, r3]
   1c2b0:	ldr	r3, [sp, #16]
   1c2b4:	ldrb	r3, [r3, r2]
   1c2b8:	cmp	r3, #0
   1c2bc:	bne	1c47c <__assert_fail@plt+0xaf18>
   1c2c0:	mov	r3, #1
   1c2c4:	str	r3, [sp, #12]
   1c2c8:	ldr	r0, [sp, #232]	; 0xe8
   1c2cc:	bl	13648 <__assert_fail@plt+0x20e4>
   1c2d0:	ldr	r3, [fp, #76]	; 0x4c
   1c2d4:	cmp	r3, #0
   1c2d8:	beq	1c2f4 <__assert_fail@plt+0xad90>
   1c2dc:	add	r0, sp, #132	; 0x84
   1c2e0:	bl	16418 <__assert_fail@plt+0x4eb4>
   1c2e4:	ldr	r0, [sp, #264]	; 0x108
   1c2e8:	bl	13648 <__assert_fail@plt+0x20e4>
   1c2ec:	ldr	r0, [sp, #248]	; 0xf8
   1c2f0:	bl	13648 <__assert_fail@plt+0x20e4>
   1c2f4:	add	r0, sp, #132	; 0x84
   1c2f8:	bl	163e8 <__assert_fail@plt+0x4e84>
   1c2fc:	ldr	r0, [sp, #12]
   1c300:	add	sp, sp, #412	; 0x19c
   1c304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c308:	mov	r2, #0
   1c30c:	ldr	r0, [sp, #28]
   1c310:	mov	r1, r3
   1c314:	cmp	r0, r3
   1c318:	ble	1c268 <__assert_fail@plt+0xad04>
   1c31c:	ldr	ip, [sp, #16]
   1c320:	ldr	r0, [sp, #40]	; 0x28
   1c324:	ldrb	r0, [r0, r3]
   1c328:	add	r3, r3, #1
   1c32c:	ldrb	r0, [ip, r0]
   1c330:	cmp	r0, #0
   1c334:	bne	1c38c <__assert_fail@plt+0xae28>
   1c338:	mov	r2, #1
   1c33c:	b	1c30c <__assert_fail@plt+0xada8>
   1c340:	mov	r2, #0
   1c344:	ldr	r1, [sp, #60]	; 0x3c
   1c348:	mov	ip, r3
   1c34c:	cmp	r1, r3
   1c350:	ble	1c398 <__assert_fail@plt+0xae34>
   1c354:	cmp	r2, #0
   1c358:	strne	r3, [sp, #100]	; 0x64
   1c35c:	b	1c2c0 <__assert_fail@plt+0xad5c>
   1c360:	mov	r2, #1
   1c364:	b	1c258 <__assert_fail@plt+0xacf4>
   1c368:	ldr	ip, [sp, #20]
   1c36c:	ldr	r0, [sp, #40]	; 0x28
   1c370:	ldrb	r0, [r0, r3]
   1c374:	add	r3, r3, #1
   1c378:	ldrb	r0, [ip, r0]
   1c37c:	ldr	ip, [sp, #16]
   1c380:	ldrb	r0, [ip, r0]
   1c384:	cmp	r0, #0
   1c388:	beq	1c360 <__assert_fail@plt+0xadfc>
   1c38c:	cmp	r2, #0
   1c390:	strne	r1, [sp, #100]	; 0x64
   1c394:	b	1c270 <__assert_fail@plt+0xad0c>
   1c398:	ldr	lr, [sp, #20]
   1c39c:	ldr	r1, [sp, #24]
   1c3a0:	cmp	r1, r3
   1c3a4:	ldrgt	r1, [sp, #40]	; 0x28
   1c3a8:	movle	r1, #0
   1c3ac:	ldrbgt	r1, [r1, r3]
   1c3b0:	cmp	lr, #0
   1c3b4:	sub	r3, r3, #1
   1c3b8:	mov	r0, r1
   1c3bc:	movne	r0, lr
   1c3c0:	ldrbne	r0, [r0, r1]
   1c3c4:	ldr	r1, [sp, #16]
   1c3c8:	ldrb	r1, [r1, r0]
   1c3cc:	cmp	r1, #0
   1c3d0:	bne	1c474 <__assert_fail@plt+0xaf10>
   1c3d4:	mov	r2, #1
   1c3d8:	b	1c344 <__assert_fail@plt+0xade0>
   1c3dc:	ldr	r4, [sp, #100]	; 0x64
   1c3e0:	ldr	r3, [sp, #156]	; 0x9c
   1c3e4:	ldr	r2, [sp, #164]	; 0xa4
   1c3e8:	sub	r3, r4, r3
   1c3ec:	cmp	r2, r3
   1c3f0:	bhi	1c418 <__assert_fail@plt+0xaeb4>
   1c3f4:	mov	r1, r4
   1c3f8:	add	r0, sp, #132	; 0x84
   1c3fc:	ldr	r2, [sp, #464]	; 0x1d0
   1c400:	bl	18bcc <__assert_fail@plt+0x7668>
   1c404:	subs	r3, r0, #0
   1c408:	str	r3, [sp, #12]
   1c40c:	bne	1c2c8 <__assert_fail@plt+0xad64>
   1c410:	ldr	r3, [sp, #156]	; 0x9c
   1c414:	sub	r3, r4, r3
   1c418:	ldr	r2, [sp, #160]	; 0xa0
   1c41c:	cmp	r2, r3
   1c420:	ldrhi	r2, [sp, #136]	; 0x88
   1c424:	movls	r3, #0
   1c428:	ldrbhi	r3, [r2, r3]
   1c42c:	ldr	r2, [sp, #16]
   1c430:	ldrb	r3, [r2, r3]
   1c434:	cmp	r3, #0
   1c438:	bne	1c47c <__assert_fail@plt+0xaf18>
   1c43c:	ldr	r2, [sp, #60]	; 0x3c
   1c440:	ldr	r3, [sp, #76]	; 0x4c
   1c444:	add	r4, r4, r3
   1c448:	ldr	r3, [sp, #28]
   1c44c:	str	r4, [sp, #100]	; 0x64
   1c450:	cmp	r4, r3
   1c454:	movle	r3, #0
   1c458:	movgt	r3, #1
   1c45c:	cmp	r4, r2
   1c460:	movge	r4, r3
   1c464:	orrlt	r4, r3, #1
   1c468:	cmp	r4, #0
   1c46c:	beq	1c3dc <__assert_fail@plt+0xae78>
   1c470:	b	1c2c0 <__assert_fail@plt+0xad5c>
   1c474:	cmp	r2, #0
   1c478:	strne	ip, [sp, #100]	; 0x64
   1c47c:	add	r0, sp, #132	; 0x84
   1c480:	ldr	r1, [sp, #100]	; 0x64
   1c484:	ldr	r2, [sp, #464]	; 0x1d0
   1c488:	bl	18bcc <__assert_fail@plt+0x7668>
   1c48c:	subs	r3, r0, #0
   1c490:	str	r3, [sp, #12]
   1c494:	bne	1c2c8 <__assert_fail@plt+0xad64>
   1c498:	ldr	r3, [sp, #72]	; 0x48
   1c49c:	cmp	r3, #1
   1c4a0:	beq	1c4c0 <__assert_fail@plt+0xaf5c>
   1c4a4:	ldr	r3, [sp, #160]	; 0xa0
   1c4a8:	cmp	r3, #0
   1c4ac:	beq	1c4c0 <__assert_fail@plt+0xaf5c>
   1c4b0:	ldr	r3, [sp, #140]	; 0x8c
   1c4b4:	ldr	r3, [r3]
   1c4b8:	cmn	r3, #1
   1c4bc:	beq	1c5cc <__assert_fail@plt+0xb068>
   1c4c0:	mov	r3, #0
   1c4c4:	ldr	r9, [sp, #172]	; 0xac
   1c4c8:	ldr	r4, [sp, #216]	; 0xd8
   1c4cc:	ldr	r6, [r4, #36]	; 0x24
   1c4d0:	str	r3, [sp, #108]	; 0x6c
   1c4d4:	str	r3, [sp, #236]	; 0xec
   1c4d8:	str	r3, [sp, #240]	; 0xf0
   1c4dc:	str	r3, [sp, #252]	; 0xfc
   1c4e0:	ldrsb	r3, [r6, #52]	; 0x34
   1c4e4:	cmp	r3, #0
   1c4e8:	bge	1c554 <__assert_fail@plt+0xaff0>
   1c4ec:	sub	r1, r9, #1
   1c4f0:	add	r0, sp, #132	; 0x84
   1c4f4:	ldr	r2, [sp, #220]	; 0xdc
   1c4f8:	bl	189cc <__assert_fail@plt+0x7468>
   1c4fc:	tst	r0, #1
   1c500:	mov	r3, r0
   1c504:	ldrne	r6, [r4, #40]	; 0x28
   1c508:	bne	1c54c <__assert_fail@plt+0xafe8>
   1c50c:	cmp	r0, #0
   1c510:	beq	1c554 <__assert_fail@plt+0xaff0>
   1c514:	and	r2, r0, #6
   1c518:	cmp	r2, #6
   1c51c:	ldreq	r6, [r4, #48]	; 0x30
   1c520:	beq	1c54c <__assert_fail@plt+0xafe8>
   1c524:	tst	r0, #2
   1c528:	ldrne	r6, [r4, #44]	; 0x2c
   1c52c:	bne	1c54c <__assert_fail@plt+0xafe8>
   1c530:	tst	r0, #4
   1c534:	beq	1c554 <__assert_fail@plt+0xaff0>
   1c538:	mov	r1, r4
   1c53c:	add	r0, sp, #108	; 0x6c
   1c540:	ldr	r2, [r6, #40]	; 0x28
   1c544:	bl	17940 <__assert_fail@plt+0x63dc>
   1c548:	mov	r6, r0
   1c54c:	cmp	r6, #0
   1c550:	beq	1c138 <__assert_fail@plt+0xabd4>
   1c554:	ldr	r3, [sp, #232]	; 0xe8
   1c558:	cmp	r3, #0
   1c55c:	beq	1c5e0 <__assert_fail@plt+0xb07c>
   1c560:	str	r6, [r3, r9, lsl #2]
   1c564:	ldr	r3, [r4, #76]	; 0x4c
   1c568:	cmp	r3, #0
   1c56c:	beq	1c5e0 <__assert_fail@plt+0xb07c>
   1c570:	add	r7, r6, #4
   1c574:	mov	r2, #0
   1c578:	mov	r1, r7
   1c57c:	add	r0, sp, #132	; 0x84
   1c580:	bl	16620 <__assert_fail@plt+0x50bc>
   1c584:	cmp	r0, #0
   1c588:	mov	r4, r0
   1c58c:	str	r0, [sp, #108]	; 0x6c
   1c590:	bne	1c5bc <__assert_fail@plt+0xb058>
   1c594:	ldrb	r3, [r6, #52]	; 0x34
   1c598:	tst	r3, #64	; 0x40
   1c59c:	beq	1c5e8 <__assert_fail@plt+0xb084>
   1c5a0:	mov	r1, r7
   1c5a4:	add	r0, sp, #132	; 0x84
   1c5a8:	bl	1aee0 <__assert_fail@plt+0x997c>
   1c5ac:	cmp	r0, #0
   1c5b0:	mov	r4, r0
   1c5b4:	str	r0, [sp, #108]	; 0x6c
   1c5b8:	beq	1c5e8 <__assert_fail@plt+0xb084>
   1c5bc:	cmn	r4, #1
   1c5c0:	bne	1ca70 <__assert_fail@plt+0xb50c>
   1c5c4:	add	r0, sp, #132	; 0x84
   1c5c8:	bl	16418 <__assert_fail@plt+0x4eb4>
   1c5cc:	ldr	r2, [sp, #76]	; 0x4c
   1c5d0:	ldr	r3, [sp, #100]	; 0x64
   1c5d4:	add	r3, r3, r2
   1c5d8:	str	r3, [sp, #100]	; 0x64
   1c5dc:	b	1c200 <__assert_fail@plt+0xac9c>
   1c5e0:	ldr	r3, [sp, #88]	; 0x58
   1c5e4:	str	r3, [sp, #32]
   1c5e8:	ldrb	r3, [r6, #52]	; 0x34
   1c5ec:	ubfx	r3, r3, #4, #1
   1c5f0:	cmp	r3, #0
   1c5f4:	streq	r3, [sp, #44]	; 0x2c
   1c5f8:	beq	1ca68 <__assert_fail@plt+0xb504>
   1c5fc:	ldrsb	r3, [r6, #52]	; 0x34
   1c600:	cmp	r3, #0
   1c604:	bge	1c624 <__assert_fail@plt+0xb0c0>
   1c608:	mov	r2, r9
   1c60c:	mov	r1, r6
   1c610:	add	r0, sp, #132	; 0x84
   1c614:	bl	19208 <__assert_fail@plt+0x7ca4>
   1c618:	subs	r3, r0, #0
   1c61c:	str	r3, [sp, #44]	; 0x2c
   1c620:	beq	1ca68 <__assert_fail@plt+0xb504>
   1c624:	ldr	r3, [sp, #36]	; 0x24
   1c628:	mov	r4, r9
   1c62c:	cmp	r3, #0
   1c630:	ldrne	r3, [sp, #36]	; 0x24
   1c634:	strne	r3, [sp, #44]	; 0x2c
   1c638:	beq	1c5bc <__assert_fail@plt+0xb058>
   1c63c:	ldr	r3, [sp, #84]	; 0x54
   1c640:	str	r3, [sp, #48]	; 0x30
   1c644:	ldr	r1, [sp, #172]	; 0xac
   1c648:	ldr	r3, [sp, #188]	; 0xbc
   1c64c:	cmp	r1, r3
   1c650:	bge	1c754 <__assert_fail@plt+0xb1f0>
   1c654:	add	r3, r1, #1
   1c658:	add	r2, r1, #1
   1c65c:	str	r3, [sp, #64]	; 0x40
   1c660:	ldr	r3, [sp, #168]	; 0xa8
   1c664:	cmp	r2, r3
   1c668:	blt	1c678 <__assert_fail@plt+0xb114>
   1c66c:	ldr	r2, [sp, #180]	; 0xb4
   1c670:	cmp	r3, r2
   1c674:	blt	1c694 <__assert_fail@plt+0xb130>
   1c678:	ldr	r3, [sp, #160]	; 0xa0
   1c67c:	add	r2, r1, #1
   1c680:	cmp	r2, r3
   1c684:	blt	1c6ac <__assert_fail@plt+0xb148>
   1c688:	ldr	r2, [sp, #180]	; 0xb4
   1c68c:	cmp	r3, r2
   1c690:	bge	1c6ac <__assert_fail@plt+0xb148>
   1c694:	add	r1, r1, #2
   1c698:	add	r0, sp, #132	; 0x84
   1c69c:	bl	16038 <__assert_fail@plt+0x4ad4>
   1c6a0:	cmp	r0, #0
   1c6a4:	str	r0, [sp, #108]	; 0x6c
   1c6a8:	bne	1c138 <__assert_fail@plt+0xabd4>
   1c6ac:	ldrb	r3, [r6, #52]	; 0x34
   1c6b0:	tst	r3, #32
   1c6b4:	bne	1c770 <__assert_fail@plt+0xb20c>
   1c6b8:	ldr	r3, [sp, #172]	; 0xac
   1c6bc:	add	r2, r3, #1
   1c6c0:	str	r2, [sp, #172]	; 0xac
   1c6c4:	ldr	r2, [sp, #136]	; 0x88
   1c6c8:	ldrb	r8, [r2, r3]
   1c6cc:	ldr	r3, [r6, #44]	; 0x2c
   1c6d0:	cmp	r3, #0
   1c6d4:	beq	1c948 <__assert_fail@plt+0xb3e4>
   1c6d8:	ldr	r7, [r3, r8, lsl #2]
   1c6dc:	ldr	r3, [sp, #232]	; 0xe8
   1c6e0:	cmp	r3, #0
   1c6e4:	beq	1c6fc <__assert_fail@plt+0xb198>
   1c6e8:	mov	r2, r7
   1c6ec:	add	r1, sp, #132	; 0x84
   1c6f0:	add	r0, sp, #108	; 0x6c
   1c6f4:	bl	1b4e0 <__assert_fail@plt+0x9f7c>
   1c6f8:	mov	r7, r0
   1c6fc:	cmp	r7, #0
   1c700:	bne	1c9d8 <__assert_fail@plt+0xb474>
   1c704:	ldr	r2, [sp, #108]	; 0x6c
   1c708:	ldr	r3, [sp, #232]	; 0xe8
   1c70c:	cmp	r2, #0
   1c710:	bne	1c138 <__assert_fail@plt+0xabd4>
   1c714:	cmp	r3, #0
   1c718:	beq	1c754 <__assert_fail@plt+0xb1f0>
   1c71c:	ldr	r3, [sp, #36]	; 0x24
   1c720:	ldr	r2, [sp, #44]	; 0x2c
   1c724:	eor	r3, r3, #1
   1c728:	tst	r2, r3
   1c72c:	bne	1c754 <__assert_fail@plt+0xb1f0>
   1c730:	ldr	r3, [sp, #172]	; 0xac
   1c734:	mov	r2, #0
   1c738:	ldr	r0, [sp, #232]	; 0xe8
   1c73c:	ldr	ip, [sp, #236]	; 0xec
   1c740:	add	r1, r3, #1
   1c744:	cmp	ip, r1
   1c748:	bge	1c998 <__assert_fail@plt+0xb434>
   1c74c:	cmp	r2, #0
   1c750:	strne	r3, [sp, #172]	; 0xac
   1c754:	ldr	r3, [sp, #48]	; 0x30
   1c758:	cmp	r3, #0
   1c75c:	ldrne	r3, [r3]
   1c760:	ldrne	r2, [sp, #48]	; 0x30
   1c764:	addne	r3, r3, r9
   1c768:	strne	r3, [r2]
   1c76c:	b	1c5bc <__assert_fail@plt+0xb058>
   1c770:	ldr	r8, [sp, #216]	; 0xd8
   1c774:	mov	r3, #0
   1c778:	str	r3, [sp, #52]	; 0x34
   1c77c:	ldr	r3, [r6, #8]
   1c780:	ldr	r2, [sp, #52]	; 0x34
   1c784:	cmp	r2, r3
   1c788:	movge	r0, #0
   1c78c:	bge	1c934 <__assert_fail@plt+0xb3d0>
   1c790:	ldr	r3, [r6, #12]
   1c794:	ldr	r2, [sp, #52]	; 0x34
   1c798:	ldr	r3, [r3, r2, lsl #2]
   1c79c:	str	r3, [sp, #68]	; 0x44
   1c7a0:	ldr	r3, [r8]
   1c7a4:	ldr	r2, [sp, #68]	; 0x44
   1c7a8:	add	r3, r3, r2, lsl #3
   1c7ac:	ldrb	r2, [r3, #6]
   1c7b0:	tst	r2, #16
   1c7b4:	beq	1c90c <__assert_fail@plt+0xb3a8>
   1c7b8:	ldr	r7, [r3, #4]
   1c7bc:	ldr	r3, [pc, #2396]	; 1d120 <__assert_fail@plt+0xbbbc>
   1c7c0:	ldr	r2, [sp, #172]	; 0xac
   1c7c4:	tst	r3, r7
   1c7c8:	str	r2, [sp, #92]	; 0x5c
   1c7cc:	beq	1c824 <__assert_fail@plt+0xb2c0>
   1c7d0:	ubfx	r7, r7, #8, #10
   1c7d4:	add	r0, sp, #132	; 0x84
   1c7d8:	ldr	r1, [sp, #92]	; 0x5c
   1c7dc:	ldr	r2, [sp, #220]	; 0xdc
   1c7e0:	bl	189cc <__assert_fail@plt+0x7468>
   1c7e4:	tst	r7, #4
   1c7e8:	beq	1c7f4 <__assert_fail@plt+0xb290>
   1c7ec:	tst	r0, #1
   1c7f0:	beq	1c90c <__assert_fail@plt+0xb3a8>
   1c7f4:	tst	r7, #8
   1c7f8:	beq	1c804 <__assert_fail@plt+0xb2a0>
   1c7fc:	tst	r0, #1
   1c800:	bne	1c90c <__assert_fail@plt+0xb3a8>
   1c804:	tst	r7, #32
   1c808:	beq	1c814 <__assert_fail@plt+0xb2b0>
   1c80c:	tst	r0, #2
   1c810:	beq	1c90c <__assert_fail@plt+0xb3a8>
   1c814:	tst	r7, #128	; 0x80
   1c818:	beq	1c824 <__assert_fail@plt+0xb2c0>
   1c81c:	tst	r0, #8
   1c820:	beq	1c90c <__assert_fail@plt+0xb3a8>
   1c824:	add	r2, sp, #132	; 0x84
   1c828:	mov	r0, r8
   1c82c:	ldr	r1, [sp, #68]	; 0x44
   1c830:	ldr	r3, [sp, #92]	; 0x5c
   1c834:	bl	17150 <__assert_fail@plt+0x5bec>
   1c838:	cmp	r0, #0
   1c83c:	beq	1c90c <__assert_fail@plt+0xb3a8>
   1c840:	ldr	r7, [sp, #172]	; 0xac
   1c844:	ldr	r3, [sp, #252]	; 0xfc
   1c848:	add	r7, r0, r7
   1c84c:	mov	r1, r7
   1c850:	cmp	r3, r0
   1c854:	strge	r3, [sp, #252]	; 0xfc
   1c858:	strlt	r0, [sp, #252]	; 0xfc
   1c85c:	add	r0, sp, #132	; 0x84
   1c860:	bl	16700 <__assert_fail@plt+0x519c>
   1c864:	cmp	r0, #0
   1c868:	str	r0, [sp, #120]	; 0x78
   1c86c:	bne	1c934 <__assert_fail@plt+0xb3d0>
   1c870:	ldr	r3, [r8, #12]
   1c874:	mov	r1, #12
   1c878:	ldr	r2, [sp, #68]	; 0x44
   1c87c:	ldr	r2, [r3, r2, lsl #2]
   1c880:	ldr	r3, [r8, #24]
   1c884:	mla	r2, r1, r2, r3
   1c888:	ldr	r3, [sp, #232]	; 0xe8
   1c88c:	ldr	r3, [r3, r7, lsl #2]
   1c890:	cmp	r3, #0
   1c894:	str	r3, [sp, #68]	; 0x44
   1c898:	add	r3, sp, #268	; 0x10c
   1c89c:	bne	1c918 <__assert_fail@plt+0xb3b4>
   1c8a0:	ldm	r2, {r0, r1, r2}
   1c8a4:	stm	r3, {r0, r1, r2}
   1c8a8:	sub	r1, r7, #1
   1c8ac:	add	r0, sp, #132	; 0x84
   1c8b0:	ldr	r2, [sp, #220]	; 0xdc
   1c8b4:	bl	189cc <__assert_fail@plt+0x7468>
   1c8b8:	ldr	r3, [sp, #232]	; 0xe8
   1c8bc:	add	r2, sp, #268	; 0x10c
   1c8c0:	mov	r1, r8
   1c8c4:	str	r3, [sp, #92]	; 0x5c
   1c8c8:	mov	r3, r0
   1c8cc:	add	r0, sp, #120	; 0x78
   1c8d0:	bl	17940 <__assert_fail@plt+0x63dc>
   1c8d4:	ldr	r3, [sp, #92]	; 0x5c
   1c8d8:	str	r0, [r3, r7, lsl #2]
   1c8dc:	ldr	r3, [sp, #68]	; 0x44
   1c8e0:	cmp	r3, #0
   1c8e4:	beq	1c8f0 <__assert_fail@plt+0xb38c>
   1c8e8:	ldr	r0, [sp, #276]	; 0x114
   1c8ec:	bl	13648 <__assert_fail@plt+0x20e4>
   1c8f0:	ldr	r3, [sp, #232]	; 0xe8
   1c8f4:	ldr	r3, [r3, r7, lsl #2]
   1c8f8:	cmp	r3, #0
   1c8fc:	bne	1c90c <__assert_fail@plt+0xb3a8>
   1c900:	ldr	r0, [sp, #120]	; 0x78
   1c904:	cmp	r0, #0
   1c908:	bne	1c934 <__assert_fail@plt+0xb3d0>
   1c90c:	ldr	r3, [sp, #52]	; 0x34
   1c910:	add	r3, r3, #1
   1c914:	b	1c778 <__assert_fail@plt+0xb214>
   1c918:	ldr	r1, [sp, #68]	; 0x44
   1c91c:	mov	r0, r3
   1c920:	ldr	r1, [r1, #40]	; 0x28
   1c924:	bl	17800 <__assert_fail@plt+0x629c>
   1c928:	cmp	r0, #0
   1c92c:	str	r0, [sp, #120]	; 0x78
   1c930:	beq	1c8a8 <__assert_fail@plt+0xb344>
   1c934:	cmp	r0, #0
   1c938:	str	r0, [sp, #108]	; 0x6c
   1c93c:	beq	1c6b8 <__assert_fail@plt+0xb154>
   1c940:	mov	r7, #0
   1c944:	b	1c6dc <__assert_fail@plt+0xb178>
   1c948:	ldr	r7, [r6, #48]	; 0x30
   1c94c:	cmp	r7, #0
   1c950:	beq	1c978 <__assert_fail@plt+0xb414>
   1c954:	ldr	r1, [sp, #172]	; 0xac
   1c958:	add	r0, sp, #132	; 0x84
   1c95c:	ldr	r2, [sp, #220]	; 0xdc
   1c960:	sub	r1, r1, #1
   1c964:	bl	189cc <__assert_fail@plt+0x7468>
   1c968:	tst	r0, #1
   1c96c:	addne	r8, r8, #256	; 0x100
   1c970:	ldr	r7, [r7, r8, lsl #2]
   1c974:	b	1c6dc <__assert_fail@plt+0xb178>
   1c978:	mov	r1, r6
   1c97c:	ldr	r0, [sp, #216]	; 0xd8
   1c980:	bl	19b78 <__assert_fail@plt+0x8614>
   1c984:	cmp	r0, #0
   1c988:	bne	1c6cc <__assert_fail@plt+0xb168>
   1c98c:	mov	r3, #12
   1c990:	str	r3, [sp, #108]	; 0x6c
   1c994:	b	1c6dc <__assert_fail@plt+0xb178>
   1c998:	mov	r3, r1
   1c99c:	ldr	r1, [r0, r1, lsl #2]
   1c9a0:	mov	r2, #1
   1c9a4:	cmp	r1, #0
   1c9a8:	beq	1c740 <__assert_fail@plt+0xb1dc>
   1c9ac:	mov	r2, #0
   1c9b0:	add	r1, sp, #132	; 0x84
   1c9b4:	str	r3, [sp, #172]	; 0xac
   1c9b8:	add	r0, sp, #108	; 0x6c
   1c9bc:	bl	1b4e0 <__assert_fail@plt+0x9f7c>
   1c9c0:	ldr	r3, [sp, #108]	; 0x6c
   1c9c4:	mov	r7, r0
   1c9c8:	cmp	r3, #0
   1c9cc:	bne	1ca5c <__assert_fail@plt+0xb4f8>
   1c9d0:	cmp	r0, #0
   1c9d4:	beq	1c730 <__assert_fail@plt+0xb1cc>
   1c9d8:	ldr	r3, [sp, #32]
   1c9dc:	cmp	r6, r7
   1c9e0:	movne	r3, #0
   1c9e4:	andeq	r3, r3, #1
   1c9e8:	str	r3, [sp, #32]
   1c9ec:	ldr	r2, [sp, #32]
   1c9f0:	ldr	r3, [sp, #64]	; 0x40
   1c9f4:	cmp	r2, #0
   1c9f8:	moveq	r3, r9
   1c9fc:	str	r3, [sp, #64]	; 0x40
   1ca00:	ldrb	r3, [r7, #52]	; 0x34
   1ca04:	tst	r3, #16
   1ca08:	beq	1ca50 <__assert_fail@plt+0xb4ec>
   1ca0c:	tst	r3, #128	; 0x80
   1ca10:	ldr	r6, [sp, #172]	; 0xac
   1ca14:	beq	1ca30 <__assert_fail@plt+0xb4cc>
   1ca18:	mov	r2, r6
   1ca1c:	mov	r1, r7
   1ca20:	add	r0, sp, #132	; 0x84
   1ca24:	bl	19208 <__assert_fail@plt+0x7ca4>
   1ca28:	cmp	r0, #0
   1ca2c:	beq	1ca50 <__assert_fail@plt+0xb4ec>
   1ca30:	ldr	r3, [sp, #36]	; 0x24
   1ca34:	mov	r4, r6
   1ca38:	cmp	r3, #0
   1ca3c:	beq	1c5bc <__assert_fail@plt+0xb058>
   1ca40:	ldr	r3, [sp, #36]	; 0x24
   1ca44:	str	r3, [sp, #44]	; 0x2c
   1ca48:	mov	r3, #0
   1ca4c:	str	r3, [sp, #48]	; 0x30
   1ca50:	mov	r6, r7
   1ca54:	ldr	r9, [sp, #64]	; 0x40
   1ca58:	b	1c644 <__assert_fail@plt+0xb0e0>
   1ca5c:	cmp	r0, #0
   1ca60:	bne	1c9d8 <__assert_fail@plt+0xb474>
   1ca64:	b	1c754 <__assert_fail@plt+0xb1f0>
   1ca68:	mvn	r4, #0
   1ca6c:	b	1c63c <__assert_fail@plt+0xb0d8>
   1ca70:	cmn	r4, #2
   1ca74:	beq	1c138 <__assert_fail@plt+0xabd4>
   1ca78:	ldr	r2, [sp, #8]
   1ca7c:	str	r4, [sp, #224]	; 0xe0
   1ca80:	ldrb	r3, [sl, #28]
   1ca84:	cmp	r2, #1
   1ca88:	movls	r2, #0
   1ca8c:	movhi	r2, #1
   1ca90:	eor	r3, r3, #16
   1ca94:	ands	r6, r2, r3, lsr #4
   1ca98:	bne	1caa8 <__assert_fail@plt+0xb544>
   1ca9c:	ldr	r3, [fp, #76]	; 0x4c
   1caa0:	cmp	r3, #0
   1caa4:	beq	1cad4 <__assert_fail@plt+0xb570>
   1caa8:	ldr	r3, [sp, #232]	; 0xe8
   1caac:	mov	r2, r4
   1cab0:	add	r0, sp, #132	; 0x84
   1cab4:	ldr	r1, [r3, r4, lsl #2]
   1cab8:	bl	19208 <__assert_fail@plt+0x7ca4>
   1cabc:	cmp	r6, #0
   1cac0:	str	r0, [sp, #228]	; 0xe4
   1cac4:	beq	1cad4 <__assert_fail@plt+0xb570>
   1cac8:	ldrb	r3, [fp, #88]	; 0x58
   1cacc:	tst	r3, #1
   1cad0:	bne	1cae0 <__assert_fail@plt+0xb57c>
   1cad4:	ldr	r3, [fp, #76]	; 0x4c
   1cad8:	cmp	r3, #0
   1cadc:	beq	1d450 <__assert_fail@plt+0xbeec>
   1cae0:	ldr	r3, [sp, #216]	; 0xd8
   1cae4:	cmn	r4, #-1073741822	; 0xc0000002
   1cae8:	ldr	r8, [sp, #228]	; 0xe4
   1caec:	str	r3, [sp, #32]
   1caf0:	bhi	1c138 <__assert_fail@plt+0xabd4>
   1caf4:	add	r9, r4, #1
   1caf8:	lsl	r9, r9, #2
   1cafc:	mov	r0, r9
   1cb00:	bl	20eec <__assert_fail@plt+0xf988>
   1cb04:	subs	r7, r0, #0
   1cb08:	beq	1cc6c <__assert_fail@plt+0xb708>
   1cb0c:	ldr	r3, [sp, #32]
   1cb10:	ldr	r6, [r3, #76]	; 0x4c
   1cb14:	cmp	r6, #0
   1cb18:	beq	1cc04 <__assert_fail@plt+0xb6a0>
   1cb1c:	mov	r0, r9
   1cb20:	bl	20eec <__assert_fail@plt+0xf988>
   1cb24:	subs	r6, r0, #0
   1cb28:	beq	1cc70 <__assert_fail@plt+0xb70c>
   1cb2c:	add	r3, r4, #1
   1cb30:	mov	r1, #0
   1cb34:	lsl	r2, r3, #2
   1cb38:	mov	r0, r6
   1cb3c:	str	r3, [sp, #44]	; 0x2c
   1cb40:	bl	11444 <memset@plt>
   1cb44:	mov	r3, #0
   1cb48:	add	r1, sp, #268	; 0x10c
   1cb4c:	str	r7, [sp, #268]	; 0x10c
   1cb50:	add	r0, sp, #132	; 0x84
   1cb54:	str	r6, [sp, #272]	; 0x110
   1cb58:	str	r8, [sp, #276]	; 0x114
   1cb5c:	str	r4, [sp, #280]	; 0x118
   1cb60:	str	r3, [sp, #284]	; 0x11c
   1cb64:	str	r3, [sp, #288]	; 0x120
   1cb68:	str	r3, [sp, #292]	; 0x124
   1cb6c:	bl	1bbf4 <__assert_fail@plt+0xa690>
   1cb70:	mov	r9, r0
   1cb74:	ldr	r0, [sp, #292]	; 0x124
   1cb78:	bl	13648 <__assert_fail@plt+0x20e4>
   1cb7c:	cmp	r9, #0
   1cb80:	bne	1cc74 <__assert_fail@plt+0xb710>
   1cb84:	ldr	r2, [r7]
   1cb88:	ldr	r3, [sp, #44]	; 0x2c
   1cb8c:	cmp	r2, #0
   1cb90:	bne	1cbd8 <__assert_fail@plt+0xb674>
   1cb94:	ldr	r2, [r6]
   1cb98:	cmp	r2, #0
   1cb9c:	bne	1cbd8 <__assert_fail@plt+0xb674>
   1cba0:	ldr	r2, [sp, #232]	; 0xe8
   1cba4:	subs	r4, r4, #1
   1cba8:	bcc	1cc9c <__assert_fail@plt+0xb738>
   1cbac:	ldr	r1, [r2, r4, lsl #2]
   1cbb0:	cmp	r1, #0
   1cbb4:	beq	1cba4 <__assert_fail@plt+0xb640>
   1cbb8:	ldrb	r3, [r1, #52]	; 0x34
   1cbbc:	tst	r3, #16
   1cbc0:	beq	1cba4 <__assert_fail@plt+0xb640>
   1cbc4:	mov	r2, r4
   1cbc8:	add	r0, sp, #132	; 0x84
   1cbcc:	bl	19208 <__assert_fail@plt+0x7ca4>
   1cbd0:	mov	r8, r0
   1cbd4:	b	1cb2c <__assert_fail@plt+0xb5c8>
   1cbd8:	mov	r2, r6
   1cbdc:	mov	r1, r7
   1cbe0:	ldr	r0, [sp, #32]
   1cbe4:	bl	1a61c <__assert_fail@plt+0x90b8>
   1cbe8:	mov	r9, r0
   1cbec:	mov	r0, r6
   1cbf0:	bl	13648 <__assert_fail@plt+0x20e4>
   1cbf4:	cmp	r9, #0
   1cbf8:	beq	1cc4c <__assert_fail@plt+0xb6e8>
   1cbfc:	mov	r6, #0
   1cc00:	b	1cc74 <__assert_fail@plt+0xb710>
   1cc04:	add	r1, sp, #268	; 0x10c
   1cc08:	add	r0, sp, #132	; 0x84
   1cc0c:	str	r7, [sp, #268]	; 0x10c
   1cc10:	str	r6, [sp, #272]	; 0x110
   1cc14:	str	r8, [sp, #276]	; 0x114
   1cc18:	str	r4, [sp, #280]	; 0x118
   1cc1c:	str	r6, [sp, #284]	; 0x11c
   1cc20:	str	r6, [sp, #288]	; 0x120
   1cc24:	str	r6, [sp, #292]	; 0x124
   1cc28:	bl	1bbf4 <__assert_fail@plt+0xa690>
   1cc2c:	mov	r9, r0
   1cc30:	ldr	r0, [sp, #292]	; 0x124
   1cc34:	bl	13648 <__assert_fail@plt+0x20e4>
   1cc38:	cmp	r9, #0
   1cc3c:	bne	1cc74 <__assert_fail@plt+0xb710>
   1cc40:	ldr	r6, [r7]
   1cc44:	cmp	r6, #0
   1cc48:	beq	1cc9c <__assert_fail@plt+0xb738>
   1cc4c:	ldr	r0, [sp, #232]	; 0xe8
   1cc50:	bl	13648 <__assert_fail@plt+0x20e4>
   1cc54:	str	r4, [sp, #224]	; 0xe0
   1cc58:	str	r7, [sp, #232]	; 0xe8
   1cc5c:	mov	r7, #0
   1cc60:	mov	r9, r7
   1cc64:	str	r8, [sp, #228]	; 0xe4
   1cc68:	b	1cbfc <__assert_fail@plt+0xb698>
   1cc6c:	mov	r6, r7
   1cc70:	mov	r9, #12
   1cc74:	mov	r0, r7
   1cc78:	bl	13648 <__assert_fail@plt+0x20e4>
   1cc7c:	mov	r0, r6
   1cc80:	bl	13648 <__assert_fail@plt+0x20e4>
   1cc84:	cmp	r9, #0
   1cc88:	beq	1d450 <__assert_fail@plt+0xbeec>
   1cc8c:	cmp	r9, #1
   1cc90:	beq	1c5c4 <__assert_fail@plt+0xb060>
   1cc94:	str	r9, [sp, #12]
   1cc98:	b	1c2c8 <__assert_fail@plt+0xad64>
   1cc9c:	mov	r9, #1
   1cca0:	b	1cc74 <__assert_fail@plt+0xb710>
   1cca4:	str	r2, [r1, r3, lsl #3]
   1cca8:	str	r2, [r5, r3, lsl #3]
   1ccac:	add	r3, r3, #1
   1ccb0:	ldr	r0, [sp, #8]
   1ccb4:	cmp	r3, r0
   1ccb8:	bne	1cca4 <__assert_fail@plt+0xb740>
   1ccbc:	mov	r3, #0
   1ccc0:	subs	r2, r0, #1
   1ccc4:	movne	r2, #1
   1ccc8:	str	r3, [r5]
   1cccc:	ldr	r3, [sp, #224]	; 0xe0
   1ccd0:	str	r3, [r5, #4]
   1ccd4:	ldrb	r3, [sl, #28]
   1ccd8:	eor	r3, r3, #16
   1ccdc:	ands	r3, r2, r3, lsr #4
   1cce0:	beq	1d330 <__assert_fail@plt+0xbdcc>
   1cce4:	ldrb	r4, [fp, #88]	; 0x58
   1cce8:	ands	r4, r4, #1
   1ccec:	beq	1cd00 <__assert_fail@plt+0xb79c>
   1ccf0:	ldr	r4, [fp, #76]	; 0x4c
   1ccf4:	cmp	r4, #0
   1ccf8:	movle	r4, #0
   1ccfc:	movgt	r4, #1
   1cd00:	ldr	r3, [sl]
   1cd04:	mov	r2, #2
   1cd08:	add	r7, sp, #280	; 0x118
   1cd0c:	cmp	r4, #0
   1cd10:	str	r3, [sp, #16]
   1cd14:	mov	r3, #0
   1cd18:	str	r2, [sp, #124]	; 0x7c
   1cd1c:	str	r3, [sp, #120]	; 0x78
   1cd20:	str	r3, [sp, #128]	; 0x80
   1cd24:	str	r3, [sp, #268]	; 0x10c
   1cd28:	mov	r3, #16
   1cd2c:	str	r7, [sp, #276]	; 0x114
   1cd30:	str	r3, [sp, #272]	; 0x110
   1cd34:	beq	1cd50 <__assert_fail@plt+0xb7ec>
   1cd38:	mov	r0, #48	; 0x30
   1cd3c:	bl	20eec <__assert_fail@plt+0xf988>
   1cd40:	cmp	r0, #0
   1cd44:	str	r0, [sp, #128]	; 0x80
   1cd48:	addne	r4, sp, #120	; 0x78
   1cd4c:	beq	1c138 <__assert_fail@plt+0xabd4>
   1cd50:	ldr	r2, [sp, #8]
   1cd54:	ldr	r3, [sp, #16]
   1cd58:	ldr	r6, [r3, #72]	; 0x48
   1cd5c:	mov	r3, #0
   1cd60:	str	r3, [sp, #108]	; 0x6c
   1cd64:	str	r3, [sp, #112]	; 0x70
   1cd68:	str	r3, [sp, #116]	; 0x74
   1cd6c:	ldr	r3, [sp, #268]	; 0x10c
   1cd70:	cmp	r2, r3
   1cd74:	ldrls	r3, [sp, #8]
   1cd78:	strls	r3, [sp, #268]	; 0x10c
   1cd7c:	bls	1cdd4 <__assert_fail@plt+0xb870>
   1cd80:	mov	r3, #8
   1cd84:	mov	r2, r7
   1cd88:	ldr	r1, [sp, #8]
   1cd8c:	add	r0, sp, #268	; 0x10c
   1cd90:	bl	20fcc <__assert_fail@plt+0xfa68>
   1cd94:	cmp	r0, #0
   1cd98:	bne	1cdd4 <__assert_fail@plt+0xb870>
   1cd9c:	ldr	r0, [sp, #276]	; 0x114
   1cda0:	cmp	r0, r7
   1cda4:	beq	1cdac <__assert_fail@plt+0xb848>
   1cda8:	bl	13648 <__assert_fail@plt+0x20e4>
   1cdac:	mov	r3, #0
   1cdb0:	str	r3, [sp, #268]	; 0x10c
   1cdb4:	mvn	r3, #0
   1cdb8:	str	r7, [sp, #276]	; 0x114
   1cdbc:	str	r3, [sp, #272]	; 0x110
   1cdc0:	add	r0, sp, #268	; 0x10c
   1cdc4:	bl	164a8 <__assert_fail@plt+0x4f44>
   1cdc8:	mov	r0, r4
   1cdcc:	bl	18250 <__assert_fail@plt+0x6cec>
   1cdd0:	b	1c138 <__assert_fail@plt+0xabd4>
   1cdd4:	ldr	r3, [sp, #8]
   1cdd8:	mov	r1, r5
   1cddc:	ldr	r7, [sp, #276]	; 0x114
   1cde0:	lsl	r8, r3, #3
   1cde4:	mov	r0, r7
   1cde8:	mov	r2, r8
   1cdec:	bl	11264 <memcpy@plt>
   1cdf0:	mov	r2, r5
   1cdf4:	ldr	r3, [r2], #4
   1cdf8:	str	r2, [sp, #28]
   1cdfc:	str	r3, [sp, #104]	; 0x68
   1ce00:	ldr	r3, [sp, #8]
   1ce04:	lsl	r3, r3, #4
   1ce08:	str	r3, [sp, #24]
   1ce0c:	ldr	r3, [r5, #4]
   1ce10:	ldr	r2, [sp, #104]	; 0x68
   1ce14:	cmp	r2, r3
   1ce18:	bgt	1d0f4 <__assert_fail@plt+0xbb90>
   1ce1c:	ldr	r3, [sp, #16]
   1ce20:	lsl	r0, r6, #3
   1ce24:	ldr	r3, [r3]
   1ce28:	add	r1, r3, r0
   1ce2c:	ldrb	ip, [r1, #4]
   1ce30:	cmp	ip, #8
   1ce34:	bne	1d078 <__assert_fail@plt+0xbb14>
   1ce38:	ldr	r3, [r3, r6, lsl #3]
   1ce3c:	ldr	r1, [sp, #8]
   1ce40:	add	r3, r3, #1
   1ce44:	cmp	r1, r3
   1ce48:	ble	1ce5c <__assert_fail@plt+0xb8f8>
   1ce4c:	add	r1, r5, r3, lsl #3
   1ce50:	str	r2, [r5, r3, lsl #3]
   1ce54:	mvn	r3, #0
   1ce58:	str	r3, [r1, #4]
   1ce5c:	ldr	r2, [r5, #4]
   1ce60:	ldr	r3, [sp, #104]	; 0x68
   1ce64:	cmp	r2, r3
   1ce68:	bne	1ce78 <__assert_fail@plt+0xb914>
   1ce6c:	ldr	r3, [sp, #228]	; 0xe4
   1ce70:	cmp	r6, r3
   1ce74:	beq	1d0ec <__assert_fail@plt+0xbb88>
   1ce78:	cmp	r4, #0
   1ce7c:	beq	1cedc <__assert_fail@plt+0xb978>
   1ce80:	mov	r1, r6
   1ce84:	add	r0, sp, #108	; 0x6c
   1ce88:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1ce8c:	cmp	r0, #0
   1ce90:	beq	1cedc <__assert_fail@plt+0xb978>
   1ce94:	mov	r3, #0
   1ce98:	ldr	r2, [r5, r3, lsl #3]
   1ce9c:	cmp	r2, #0
   1cea0:	blt	1d124 <__assert_fail@plt+0xbbc0>
   1cea4:	ldr	r2, [sp, #28]
   1cea8:	ldr	r2, [r2, r3, lsl #3]
   1ceac:	cmn	r2, #1
   1ceb0:	bne	1d124 <__assert_fail@plt+0xbbc0>
   1ceb4:	add	r3, sp, #108	; 0x6c
   1ceb8:	add	r1, sp, #104	; 0x68
   1cebc:	str	r7, [sp]
   1cec0:	mov	r0, r4
   1cec4:	ldr	r2, [sp, #8]
   1cec8:	str	r3, [sp, #4]
   1cecc:	mov	r3, r5
   1ced0:	bl	1678c <__assert_fail@plt+0x5228>
   1ced4:	subs	r6, r0, #0
   1ced8:	blt	1d0f4 <__assert_fail@plt+0xbb90>
   1cedc:	ldr	r9, [sp, #216]	; 0xd8
   1cee0:	lsl	sl, r6, #3
   1cee4:	str	r6, [sp, #20]
   1cee8:	ldr	r3, [r9]
   1ceec:	add	r1, r3, sl
   1cef0:	ldrb	r2, [r1, #4]
   1cef4:	tst	r2, #8
   1cef8:	beq	1d160 <__assert_fail@plt+0xbbfc>
   1cefc:	ldr	r2, [sp, #104]	; 0x68
   1cf00:	mov	r1, r6
   1cf04:	add	r0, sp, #108	; 0x6c
   1cf08:	ldr	r3, [sp, #232]	; 0xe8
   1cf0c:	ldr	sl, [r3, r2, lsl #2]
   1cf10:	mov	r2, #12
   1cf14:	add	r3, sl, #4
   1cf18:	str	r3, [sp, #20]
   1cf1c:	ldr	r3, [r9, #20]
   1cf20:	mla	sl, r2, r6, r3
   1cf24:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1cf28:	cmp	r0, #0
   1cf2c:	beq	1d138 <__assert_fail@plt+0xbbd4>
   1cf30:	ldr	r2, [sl, #4]
   1cf34:	mov	r3, #0
   1cf38:	mvn	r6, #0
   1cf3c:	cmp	r3, r2
   1cf40:	bge	1d064 <__assert_fail@plt+0xbb00>
   1cf44:	ldr	r1, [sl, #8]
   1cf48:	str	r3, [sp, #32]
   1cf4c:	ldr	r0, [sp, #20]
   1cf50:	str	r2, [sp, #36]	; 0x24
   1cf54:	ldr	r9, [r1, r3, lsl #2]
   1cf58:	mov	r1, r9
   1cf5c:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1cf60:	cmp	r0, #0
   1cf64:	ldr	r3, [sp, #32]
   1cf68:	ldr	r2, [sp, #36]	; 0x24
   1cf6c:	beq	1d158 <__assert_fail@plt+0xbbf4>
   1cf70:	cmn	r6, #1
   1cf74:	beq	1d154 <__assert_fail@plt+0xbbf0>
   1cf78:	mov	r1, r6
   1cf7c:	add	r0, sp, #108	; 0x6c
   1cf80:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1cf84:	cmp	r0, #0
   1cf88:	bne	1d328 <__assert_fail@plt+0xbdc4>
   1cf8c:	cmp	r4, #0
   1cf90:	beq	1d064 <__assert_fail@plt+0xbb00>
   1cf94:	ldr	sl, [r4]
   1cf98:	ldr	r3, [sp, #104]	; 0x68
   1cf9c:	ldr	r2, [r4, #4]
   1cfa0:	str	r3, [sp, #20]
   1cfa4:	add	r3, sl, #1
   1cfa8:	cmp	r3, r2
   1cfac:	str	r3, [r4]
   1cfb0:	bne	1cfdc <__assert_fail@plt+0xba78>
   1cfb4:	mov	r1, #48	; 0x30
   1cfb8:	ldr	r0, [r4, #8]
   1cfbc:	mul	r1, r1, r3
   1cfc0:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1cfc4:	cmp	r0, #0
   1cfc8:	beq	1d148 <__assert_fail@plt+0xbbe4>
   1cfcc:	ldr	r3, [r4, #4]
   1cfd0:	str	r0, [r4, #8]
   1cfd4:	lsl	r3, r3, #1
   1cfd8:	str	r3, [r4, #4]
   1cfdc:	mov	r0, #24
   1cfe0:	ldr	r2, [r4, #8]
   1cfe4:	mul	sl, r0, sl
   1cfe8:	ldr	r1, [sp, #20]
   1cfec:	ldr	r0, [sp, #24]
   1cff0:	add	r3, r2, sl
   1cff4:	str	r1, [r2, sl]
   1cff8:	str	r9, [r3, #4]
   1cffc:	str	r3, [sp, #20]
   1d000:	bl	20eec <__assert_fail@plt+0xf988>
   1d004:	ldr	r3, [sp, #20]
   1d008:	str	r0, [r3, #8]
   1d00c:	ldr	r3, [r4, #8]
   1d010:	add	r3, r3, sl
   1d014:	ldr	r0, [r3, #8]
   1d018:	cmp	r0, #0
   1d01c:	beq	1d148 <__assert_fail@plt+0xbbe4>
   1d020:	mov	r2, r8
   1d024:	mov	r1, r5
   1d028:	bl	11264 <memcpy@plt>
   1d02c:	ldr	r3, [r4, #8]
   1d030:	mov	r2, r8
   1d034:	mov	r1, r7
   1d038:	add	r3, r3, sl
   1d03c:	ldr	r0, [r3, #8]
   1d040:	add	r0, r0, r8
   1d044:	bl	11264 <memcpy@plt>
   1d048:	ldr	r0, [r4, #8]
   1d04c:	add	r1, sp, #108	; 0x6c
   1d050:	add	r0, r0, sl
   1d054:	add	r0, r0, #12
   1d058:	bl	17788 <__assert_fail@plt+0x6224>
   1d05c:	cmp	r0, #0
   1d060:	bne	1d148 <__assert_fail@plt+0xbbe4>
   1d064:	cmp	r6, #0
   1d068:	bge	1ce0c <__assert_fail@plt+0xb8a8>
   1d06c:	cmn	r6, #2
   1d070:	bne	1d1a8 <__assert_fail@plt+0xbc44>
   1d074:	b	1d148 <__assert_fail@plt+0xbbe4>
   1d078:	cmp	ip, #9
   1d07c:	bne	1ce5c <__assert_fail@plt+0xb8f8>
   1d080:	ldr	r3, [r3, r0]
   1d084:	ldr	r0, [sp, #8]
   1d088:	add	r3, r3, #1
   1d08c:	cmp	r0, r3
   1d090:	ble	1ce5c <__assert_fail@plt+0xb8f8>
   1d094:	ldr	ip, [r5, r3, lsl #3]
   1d098:	add	r0, r5, r3, lsl #3
   1d09c:	cmp	r2, ip
   1d0a0:	ble	1d0bc <__assert_fail@plt+0xbb58>
   1d0a4:	mov	r1, r5
   1d0a8:	str	r2, [r0, #4]
   1d0ac:	mov	r2, r8
   1d0b0:	mov	r0, r7
   1d0b4:	bl	11264 <memcpy@plt>
   1d0b8:	b	1ce5c <__assert_fail@plt+0xb8f8>
   1d0bc:	ldrb	r1, [r1, #6]
   1d0c0:	tst	r1, #8
   1d0c4:	beq	1d0e4 <__assert_fail@plt+0xbb80>
   1d0c8:	ldr	r3, [r7, r3, lsl #3]
   1d0cc:	cmn	r3, #1
   1d0d0:	beq	1d0e4 <__assert_fail@plt+0xbb80>
   1d0d4:	mov	r2, r8
   1d0d8:	mov	r1, r7
   1d0dc:	mov	r0, r5
   1d0e0:	b	1d0b4 <__assert_fail@plt+0xbb50>
   1d0e4:	str	r2, [r0, #4]
   1d0e8:	b	1ce5c <__assert_fail@plt+0xb8f8>
   1d0ec:	cmp	r4, #0
   1d0f0:	bne	1ce94 <__assert_fail@plt+0xb930>
   1d0f4:	ldr	r0, [sp, #116]	; 0x74
   1d0f8:	bl	13648 <__assert_fail@plt+0x20e4>
   1d0fc:	add	r0, sp, #268	; 0x10c
   1d100:	bl	164a8 <__assert_fail@plt+0x4f44>
   1d104:	mov	r0, r4
   1d108:	bl	18250 <__assert_fail@plt+0x6cec>
   1d10c:	cmp	r0, #0
   1d110:	beq	1d330 <__assert_fail@plt+0xbdcc>
   1d114:	str	r0, [sp, #12]
   1d118:	b	1c2c8 <__assert_fail@plt+0xad64>
   1d11c:	beq	feac7bcc <optarg@@GLIBC_2.4+0xfea94a04>
   1d120:	andeq	pc, r3, r0, lsl #30
   1d124:	ldr	r2, [sp, #8]
   1d128:	add	r3, r3, #1
   1d12c:	cmp	r2, r3
   1d130:	bne	1ce98 <__assert_fail@plt+0xb934>
   1d134:	b	1d0f4 <__assert_fail@plt+0xbb90>
   1d138:	add	r0, sp, #108	; 0x6c
   1d13c:	bl	182a8 <__assert_fail@plt+0x6d44>
   1d140:	cmp	r0, #0
   1d144:	bne	1cf30 <__assert_fail@plt+0xb9cc>
   1d148:	ldr	r0, [sp, #116]	; 0x74
   1d14c:	bl	13648 <__assert_fail@plt+0x20e4>
   1d150:	b	1cdc0 <__assert_fail@plt+0xb85c>
   1d154:	mov	r6, r9
   1d158:	add	r3, r3, #1
   1d15c:	b	1cf3c <__assert_fail@plt+0xb9d8>
   1d160:	ldrb	r1, [r1, #6]
   1d164:	tst	r1, #16
   1d168:	beq	1d1ec <__assert_fail@plt+0xbc88>
   1d16c:	add	r2, sp, #132	; 0x84
   1d170:	mov	r0, r9
   1d174:	ldr	r1, [sp, #20]
   1d178:	ldr	r3, [sp, #104]	; 0x68
   1d17c:	bl	17150 <__assert_fail@plt+0x5bec>
   1d180:	subs	r3, r0, #0
   1d184:	bne	1d270 <__assert_fail@plt+0xbd0c>
   1d188:	ldr	r1, [r9]
   1d18c:	add	r0, sp, #132	; 0x84
   1d190:	ldr	r2, [sp, #104]	; 0x68
   1d194:	add	r1, r1, sl
   1d198:	bl	18aac <__assert_fail@plt+0x7548>
   1d19c:	cmp	r0, #0
   1d1a0:	movne	r3, #0
   1d1a4:	bne	1d270 <__assert_fail@plt+0xbd0c>
   1d1a8:	add	r3, sp, #108	; 0x6c
   1d1ac:	add	r1, sp, #104	; 0x68
   1d1b0:	str	r7, [sp]
   1d1b4:	mov	r0, r4
   1d1b8:	ldr	r2, [sp, #8]
   1d1bc:	str	r3, [sp, #4]
   1d1c0:	mov	r3, r5
   1d1c4:	bl	1678c <__assert_fail@plt+0x5228>
   1d1c8:	subs	r6, r0, #0
   1d1cc:	bge	1ce0c <__assert_fail@plt+0xb8a8>
   1d1d0:	ldr	r0, [sp, #116]	; 0x74
   1d1d4:	bl	13648 <__assert_fail@plt+0x20e4>
   1d1d8:	add	r0, sp, #268	; 0x10c
   1d1dc:	bl	164a8 <__assert_fail@plt+0x4f44>
   1d1e0:	mov	r0, r4
   1d1e4:	bl	18250 <__assert_fail@plt+0x6cec>
   1d1e8:	b	1c2c0 <__assert_fail@plt+0xad5c>
   1d1ec:	cmp	r2, #4
   1d1f0:	bne	1d188 <__assert_fail@plt+0xbc24>
   1d1f4:	ldr	r3, [r3, sl]
   1d1f8:	ldr	r2, [sp, #8]
   1d1fc:	add	r3, r3, #1
   1d200:	cmp	r2, r3
   1d204:	ble	1d444 <__assert_fail@plt+0xbee0>
   1d208:	add	r2, r5, r3, lsl #3
   1d20c:	ldr	r0, [r5, r3, lsl #3]
   1d210:	cmp	r4, #0
   1d214:	ldr	r2, [r2, #4]
   1d218:	sub	r3, r2, r0
   1d21c:	beq	1d2d4 <__assert_fail@plt+0xbd70>
   1d220:	cmn	r0, #1
   1d224:	beq	1d1a8 <__assert_fail@plt+0xbc44>
   1d228:	cmn	r2, #1
   1d22c:	beq	1d1a8 <__assert_fail@plt+0xbc44>
   1d230:	cmp	r3, #0
   1d234:	beq	1d2dc <__assert_fail@plt+0xbd78>
   1d238:	ldr	r1, [sp, #104]	; 0x68
   1d23c:	ldr	ip, [sp, #136]	; 0x88
   1d240:	ldr	r2, [sp, #160]	; 0xa0
   1d244:	sub	r2, r2, r1
   1d248:	cmp	r3, r2
   1d24c:	bgt	1d1a8 <__assert_fail@plt+0xbc44>
   1d250:	mov	r2, r3
   1d254:	add	r1, ip, r1
   1d258:	str	r3, [sp, #32]
   1d25c:	add	r0, ip, r0
   1d260:	bl	112b8 <memcmp@plt>
   1d264:	cmp	r0, #0
   1d268:	ldr	r3, [sp, #32]
   1d26c:	bne	1d1a8 <__assert_fail@plt+0xbc44>
   1d270:	ldr	r2, [r9, #12]
   1d274:	cmp	r3, #0
   1d278:	ldr	r1, [sp, #20]
   1d27c:	ldr	r6, [r2, r1, lsl #2]
   1d280:	ldr	r2, [sp, #104]	; 0x68
   1d284:	addeq	r3, r2, #1
   1d288:	addne	r3, r2, r3
   1d28c:	cmp	r4, #0
   1d290:	str	r3, [sp, #104]	; 0x68
   1d294:	beq	1d2c8 <__assert_fail@plt+0xbd64>
   1d298:	ldr	r2, [sp, #224]	; 0xe0
   1d29c:	cmp	r3, r2
   1d2a0:	bgt	1d1a8 <__assert_fail@plt+0xbc44>
   1d2a4:	ldr	r2, [sp, #232]	; 0xe8
   1d2a8:	ldr	r0, [r2, r3, lsl #2]
   1d2ac:	cmp	r0, #0
   1d2b0:	beq	1d1a8 <__assert_fail@plt+0xbc44>
   1d2b4:	mov	r1, r6
   1d2b8:	add	r0, r0, #4
   1d2bc:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1d2c0:	cmp	r0, #0
   1d2c4:	beq	1d1a8 <__assert_fail@plt+0xbc44>
   1d2c8:	mov	r3, #0
   1d2cc:	str	r3, [sp, #112]	; 0x70
   1d2d0:	b	1d064 <__assert_fail@plt+0xbb00>
   1d2d4:	cmp	r3, #0
   1d2d8:	bne	1d270 <__assert_fail@plt+0xbd0c>
   1d2dc:	mov	r1, r6
   1d2e0:	add	r0, sp, #108	; 0x6c
   1d2e4:	bl	182a8 <__assert_fail@plt+0x6d44>
   1d2e8:	cmp	r0, #0
   1d2ec:	beq	1d148 <__assert_fail@plt+0xbbe4>
   1d2f0:	ldr	r2, [r9, #20]
   1d2f4:	mov	r3, #12
   1d2f8:	mla	r6, r3, r6, r2
   1d2fc:	ldr	r2, [sp, #104]	; 0x68
   1d300:	ldr	r3, [r6, #8]
   1d304:	ldr	r6, [r3]
   1d308:	ldr	r3, [sp, #232]	; 0xe8
   1d30c:	mov	r1, r6
   1d310:	ldr	r0, [r3, r2, lsl #2]
   1d314:	add	r0, r0, #4
   1d318:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1d31c:	cmp	r0, #0
   1d320:	beq	1d188 <__assert_fail@plt+0xbc24>
   1d324:	b	1d064 <__assert_fail@plt+0xbb00>
   1d328:	mov	r6, r9
   1d32c:	b	1d064 <__assert_fail@plt+0xbb00>
   1d330:	ldrb	r6, [sp, #208]	; 0xd0
   1d334:	mov	r2, r5
   1d338:	mov	r3, #0
   1d33c:	ldr	r0, [sp, #100]	; 0x64
   1d340:	ldr	lr, [sp, #144]	; 0x90
   1d344:	ldr	r4, [sp, #160]	; 0xa0
   1d348:	ldr	ip, [sp, #164]	; 0xa4
   1d34c:	ldr	r1, [r5, r3, lsl #3]
   1d350:	cmn	r1, #1
   1d354:	beq	1d39c <__assert_fail@plt+0xbe38>
   1d358:	cmp	r6, #0
   1d35c:	beq	1d384 <__assert_fail@plt+0xbe20>
   1d360:	cmp	r1, r4
   1d364:	ldrne	r1, [lr, r1, lsl #2]
   1d368:	moveq	r1, ip
   1d36c:	str	r1, [r5, r3, lsl #3]
   1d370:	ldr	r1, [r2, #4]
   1d374:	cmp	r4, r1
   1d378:	ldrne	r1, [lr, r1, lsl #2]
   1d37c:	moveq	r1, ip
   1d380:	str	r1, [r2, #4]
   1d384:	ldr	r1, [r5, r3, lsl #3]
   1d388:	add	r1, r1, r0
   1d38c:	str	r1, [r5, r3, lsl #3]
   1d390:	ldr	r1, [r2, #4]
   1d394:	add	r1, r1, r0
   1d398:	str	r1, [r2, #4]
   1d39c:	ldr	r1, [sp, #8]
   1d3a0:	add	r3, r3, #1
   1d3a4:	add	r2, r2, #8
   1d3a8:	cmp	r3, r1
   1d3ac:	bne	1d34c <__assert_fail@plt+0xbde8>
   1d3b0:	ldr	r3, [sp, #8]
   1d3b4:	mov	r2, #0
   1d3b8:	mvn	r1, #0
   1d3bc:	add	r3, r5, r3, lsl #3
   1d3c0:	ldr	r0, [sp, #56]	; 0x38
   1d3c4:	add	r3, r3, #8
   1d3c8:	cmp	r2, r0
   1d3cc:	blt	1d428 <__assert_fail@plt+0xbec4>
   1d3d0:	ldr	r3, [fp, #132]	; 0x84
   1d3d4:	cmp	r3, #0
   1d3d8:	movne	r0, #0
   1d3dc:	addne	ip, r5, #4
   1d3e0:	beq	1c2c8 <__assert_fail@plt+0xad64>
   1d3e4:	ldr	r1, [sp, #8]
   1d3e8:	add	r2, r0, #1
   1d3ec:	cmp	r2, r1
   1d3f0:	beq	1c2c8 <__assert_fail@plt+0xad64>
   1d3f4:	ldr	r1, [r3]
   1d3f8:	cmp	r1, r0
   1d3fc:	beq	1d41c <__assert_fail@plt+0xbeb8>
   1d400:	add	r1, r1, #1
   1d404:	ldr	r1, [r5, r1, lsl #3]
   1d408:	str	r1, [r5, r2, lsl #3]
   1d40c:	ldr	r1, [r3]
   1d410:	add	r1, r5, r1, lsl #3
   1d414:	ldr	r1, [r1, #12]
   1d418:	str	r1, [ip, r2, lsl #3]
   1d41c:	add	r3, r3, #4
   1d420:	mov	r0, r2
   1d424:	b	1d3e4 <__assert_fail@plt+0xbe80>
   1d428:	add	r2, r2, #1
   1d42c:	str	r1, [r3, #-8]
   1d430:	str	r1, [r3, #-4]
   1d434:	b	1d3c0 <__assert_fail@plt+0xbe5c>
   1d438:	mov	r3, #1
   1d43c:	str	r3, [sp, #12]
   1d440:	b	1c2fc <__assert_fail@plt+0xad98>
   1d444:	cmp	r4, #0
   1d448:	beq	1d2dc <__assert_fail@plt+0xbd78>
   1d44c:	b	1d1a8 <__assert_fail@plt+0xbc44>
   1d450:	ldr	r3, [sp, #8]
   1d454:	cmp	r3, #0
   1d458:	movne	r3, #1
   1d45c:	addne	r1, r5, #4
   1d460:	mvnne	r2, #0
   1d464:	bne	1ccb0 <__assert_fail@plt+0xb74c>
   1d468:	b	1c2c8 <__assert_fail@plt+0xad64>
   1d46c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d470:	sub	sp, sp, #148	; 0x94
   1d474:	mov	fp, r0
   1d478:	mov	r6, r1
   1d47c:	mov	r5, r2
   1d480:	and	r7, r3, #16777216	; 0x1000000
   1d484:	and	r8, r3, #32
   1d488:	ldr	sl, [sp, #188]	; 0xbc
   1d48c:	and	r9, r3, #16
   1d490:	str	r3, [sp, #8]
   1d494:	ldrb	r3, [r5, #4]
   1d498:	ldr	r4, [r6]
   1d49c:	sub	r2, r3, #1
   1d4a0:	cmp	r2, #35	; 0x23
   1d4a4:	ldrls	pc, [pc, r2, lsl #2]
   1d4a8:	b	1e144 <__assert_fail@plt+0xcbe0>
   1d4ac:	andeq	sp, r1, ip, lsr r5
   1d4b0:	andeq	sp, r1, r8, ror #14
   1d4b4:	andeq	lr, r1, r4, asr #2
   1d4b8:	andeq	sp, r1, ip, lsl lr
   1d4bc:	strheq	lr, [r1], -r8
   1d4c0:	andeq	lr, r1, r4, asr #2
   1d4c4:	andeq	lr, r1, r4, asr #2
   1d4c8:	andeq	sp, r1, r8, lsl #13
   1d4cc:			; <UNDEFINED> instruction: 0x0001deb8
   1d4d0:	andeq	sp, r1, r8, ror #14
   1d4d4:	andeq	sp, r1, ip, lsl #29
   1d4d8:	andeq	sp, r1, r0, lsl #30
   1d4dc:	andeq	lr, r1, r4, asr #2
   1d4e0:	andeq	lr, r1, r4, asr #2
   1d4e4:	andeq	lr, r1, r4, asr #2
   1d4e8:	andeq	lr, r1, r4, asr #2
   1d4ec:	andeq	lr, r1, r4, asr #2
   1d4f0:	andeq	sp, r1, ip, lsl #29
   1d4f4:	andeq	sp, r1, ip, lsl #29
   1d4f8:	andeq	sp, r1, r0, ror r7
   1d4fc:	andeq	lr, r1, r4, asr #2
   1d500:	andeq	lr, r1, r4, asr #2
   1d504:	andeq	sp, r1, ip, ror lr
   1d508:	ldrdeq	sp, [r1], -r8
   1d50c:	andeq	lr, r1, r4, asr #2
   1d510:	andeq	lr, r1, r4, asr #2
   1d514:	andeq	lr, r1, r4, asr #2
   1d518:	andeq	lr, r1, r4, asr #2
   1d51c:	andeq	lr, r1, r4, asr #2
   1d520:	andeq	lr, r1, r4, asr #2
   1d524:	andeq	lr, r1, r4, asr #2
   1d528:	andeq	lr, r1, r4, ror #1
   1d52c:	andeq	lr, r1, r4, ror #1
   1d530:	andeq	lr, r1, r8, lsr #2
   1d534:	andeq	lr, r1, r8, lsr #2
   1d538:	andeq	lr, r1, r4, asr #2
   1d53c:	mov	r2, #0
   1d540:	mov	r3, r5
   1d544:	mov	r1, r2
   1d548:	mov	r0, r4
   1d54c:	bl	15638 <__assert_fail@plt+0x40d4>
   1d550:	subs	r6, r0, #0
   1d554:	bne	1d564 <__assert_fail@plt+0xc000>
   1d558:	mov	r3, #12
   1d55c:	str	r3, [sl]
   1d560:	b	1d768 <__assert_fail@plt+0xc204>
   1d564:	ldr	r3, [r4, #92]	; 0x5c
   1d568:	cmp	r3, #1
   1d56c:	bgt	1d658 <__assert_fail@plt+0xc0f4>
   1d570:	mov	r1, fp
   1d574:	mov	r0, r5
   1d578:	ldr	r2, [sp, #8]
   1d57c:	bl	198b4 <__assert_fail@plt+0x8350>
   1d580:	ldrb	r3, [r5, #4]
   1d584:	cmp	r3, #23
   1d588:	bhi	1decc <__assert_fail@plt+0xc968>
   1d58c:	ldr	r2, [pc, #3904]	; 1e4d4 <__assert_fail@plt+0xcf70>
   1d590:	sub	r9, r3, #18
   1d594:	clz	r9, r9
   1d598:	lsr	r9, r9, #5
   1d59c:	mvn	r8, r2, lsr r3
   1d5a0:	ands	r8, r8, #1
   1d5a4:	bne	1decc <__assert_fail@plt+0xc968>
   1d5a8:	ldr	r2, [fp, #40]	; 0x28
   1d5ac:	cmp	r3, #23
   1d5b0:	ldm	r5, {r0, r1}
   1d5b4:	str	r2, [sp, #12]
   1d5b8:	add	r2, sp, #112	; 0x70
   1d5bc:	stm	r2, {r0, r1}
   1d5c0:	bne	1e298 <__assert_fail@plt+0xcd34>
   1d5c4:	mov	r1, r5
   1d5c8:	mov	r0, fp
   1d5cc:	ldr	r2, [sp, #8]
   1d5d0:	bl	198d0 <__assert_fail@plt+0x836c>
   1d5d4:	cmn	r0, #1
   1d5d8:	mov	r9, r0
   1d5dc:	bne	1e14c <__assert_fail@plt+0xcbe8>
   1d5e0:	ldrb	r3, [r5, #4]
   1d5e4:	cmp	r3, #1
   1d5e8:	bne	1d5fc <__assert_fail@plt+0xc098>
   1d5ec:	ldrb	r3, [r5]
   1d5f0:	cmp	r3, #44	; 0x2c
   1d5f4:	moveq	r9, r8
   1d5f8:	beq	1e1b8 <__assert_fail@plt+0xcc54>
   1d5fc:	mov	r3, #10
   1d600:	mov	r7, #0
   1d604:	str	r3, [sl]
   1d608:	b	1e180 <__assert_fail@plt+0xcc1c>
   1d60c:	mov	r1, fp
   1d610:	mov	r0, r5
   1d614:	ldr	r2, [sp, #8]
   1d618:	bl	198b4 <__assert_fail@plt+0x8350>
   1d61c:	mov	r2, #0
   1d620:	mov	r3, r5
   1d624:	mov	r1, r2
   1d628:	mov	r0, r4
   1d62c:	bl	15638 <__assert_fail@plt+0x40d4>
   1d630:	mov	r7, r0
   1d634:	mov	r2, r0
   1d638:	mov	r1, r6
   1d63c:	mov	r3, #16
   1d640:	mov	r0, r4
   1d644:	bl	1578c <__assert_fail@plt+0x4228>
   1d648:	cmp	r0, #0
   1d64c:	cmpne	r7, #0
   1d650:	mov	r6, r0
   1d654:	beq	1d558 <__assert_fail@plt+0xbff4>
   1d658:	ldr	r3, [fp, #40]	; 0x28
   1d65c:	ldr	r2, [fp, #56]	; 0x38
   1d660:	cmp	r2, r3
   1d664:	ble	1d570 <__assert_fail@plt+0xc00c>
   1d668:	ldr	r2, [fp, #28]
   1d66c:	cmp	r3, r2
   1d670:	beq	1d570 <__assert_fail@plt+0xc00c>
   1d674:	ldr	r2, [fp, #8]
   1d678:	ldr	r3, [r2, r3, lsl #2]
   1d67c:	cmn	r3, #1
   1d680:	beq	1d60c <__assert_fail@plt+0xc0a8>
   1d684:	b	1d570 <__assert_fail@plt+0xc00c>
   1d688:	ldr	r7, [r6, #24]
   1d68c:	mov	r1, fp
   1d690:	mov	r0, r5
   1d694:	add	r3, r7, #1
   1d698:	str	r3, [r6, #24]
   1d69c:	ldr	r3, [sp, #8]
   1d6a0:	orr	r2, r3, #8388608	; 0x800000
   1d6a4:	bl	198b4 <__assert_fail@plt+0x8350>
   1d6a8:	ldrb	r3, [r5, #4]
   1d6ac:	cmp	r3, #9
   1d6b0:	moveq	r1, #0
   1d6b4:	beq	1d714 <__assert_fail@plt+0xc1b0>
   1d6b8:	ldr	r3, [sp, #184]	; 0xb8
   1d6bc:	mov	r2, r5
   1d6c0:	mov	r1, r6
   1d6c4:	mov	r0, fp
   1d6c8:	add	r3, r3, #1
   1d6cc:	stm	sp, {r3, sl}
   1d6d0:	ldr	r3, [sp, #8]
   1d6d4:	bl	1e644 <__assert_fail@plt+0xd0e0>
   1d6d8:	ldr	r2, [sl]
   1d6dc:	mov	r1, r0
   1d6e0:	cmp	r2, #0
   1d6e4:	bne	1d70c <__assert_fail@plt+0xc1a8>
   1d6e8:	ldrb	r3, [r5, #4]
   1d6ec:	cmp	r3, #9
   1d6f0:	beq	1d714 <__assert_fail@plt+0xc1b0>
   1d6f4:	cmp	r0, #0
   1d6f8:	beq	1d704 <__assert_fail@plt+0xc1a0>
   1d6fc:	ldr	r1, [pc, #3540]	; 1e4d8 <__assert_fail@plt+0xcf74>
   1d700:	bl	15018 <__assert_fail@plt+0x3ab4>
   1d704:	mov	r3, #8
   1d708:	str	r3, [sl]
   1d70c:	mov	r6, #0
   1d710:	b	1d74c <__assert_fail@plt+0xc1e8>
   1d714:	cmp	r7, #8
   1d718:	mov	r0, r4
   1d71c:	ldrls	r3, [r4, #84]	; 0x54
   1d720:	movls	r2, #1
   1d724:	orrls	r3, r3, r2, lsl r7
   1d728:	mov	r2, #0
   1d72c:	strls	r3, [r4, #84]	; 0x54
   1d730:	mov	r3, #17
   1d734:	bl	1578c <__assert_fail@plt+0x4228>
   1d738:	subs	r6, r0, #0
   1d73c:	strne	r7, [r6, #20]
   1d740:	bne	1d74c <__assert_fail@plt+0xc1e8>
   1d744:	mov	r3, #12
   1d748:	str	r3, [sl]
   1d74c:	ldr	r2, [sl]
   1d750:	clz	r3, r6
   1d754:	lsr	r3, r3, #5
   1d758:	cmp	r2, #0
   1d75c:	moveq	r3, #0
   1d760:	cmp	r3, #0
   1d764:	beq	1d570 <__assert_fail@plt+0xc00c>
   1d768:	mov	r6, #0
   1d76c:	b	1decc <__assert_fail@plt+0xc968>
   1d770:	mov	r6, #0
   1d774:	mov	r1, #1
   1d778:	mov	r0, #32
   1d77c:	str	r6, [sp, #52]	; 0x34
   1d780:	bl	20e98 <__assert_fail@plt+0xf934>
   1d784:	mov	r1, #1
   1d788:	str	r0, [sp, #12]
   1d78c:	mov	r0, #40	; 0x28
   1d790:	bl	20e98 <__assert_fail@plt+0xf934>
   1d794:	ldr	r3, [sp, #12]
   1d798:	mov	r7, r0
   1d79c:	clz	r0, r0
   1d7a0:	lsr	r0, r0, #5
   1d7a4:	cmp	r3, r6
   1d7a8:	movne	r8, r0
   1d7ac:	moveq	r8, #1
   1d7b0:	cmp	r8, r6
   1d7b4:	beq	1d7cc <__assert_fail@plt+0xc268>
   1d7b8:	mov	r0, r3
   1d7bc:	bl	13648 <__assert_fail@plt+0x20e4>
   1d7c0:	mov	r0, r7
   1d7c4:	bl	13648 <__assert_fail@plt+0x20e4>
   1d7c8:	b	1d744 <__assert_fail@plt+0xc1e0>
   1d7cc:	mov	r1, fp
   1d7d0:	mov	r0, r5
   1d7d4:	ldr	r2, [sp, #8]
   1d7d8:	bl	15090 <__assert_fail@plt+0x3b2c>
   1d7dc:	ldrb	r3, [r5, #4]
   1d7e0:	str	r0, [sp, #20]
   1d7e4:	cmp	r3, #2
   1d7e8:	bne	1d7f8 <__assert_fail@plt+0xc294>
   1d7ec:	mov	r3, #2
   1d7f0:	str	r3, [sl]
   1d7f4:	b	1d8c8 <__assert_fail@plt+0xc364>
   1d7f8:	cmp	r3, #25
   1d7fc:	strne	r8, [sp, #32]
   1d800:	bne	1d860 <__assert_fail@plt+0xc2fc>
   1d804:	ldrb	r3, [r7, #16]
   1d808:	orr	r3, r3, #1
   1d80c:	strb	r3, [r7, #16]
   1d810:	ldr	r3, [sp, #8]
   1d814:	tst	r3, #256	; 0x100
   1d818:	beq	1d828 <__assert_fail@plt+0xc2c4>
   1d81c:	mov	r1, #10
   1d820:	ldr	r0, [sp, #12]
   1d824:	bl	14e04 <__assert_fail@plt+0x38a0>
   1d828:	ldr	r2, [sp, #20]
   1d82c:	mov	r1, fp
   1d830:	mov	r0, r5
   1d834:	ldr	r3, [fp, #40]	; 0x28
   1d838:	add	r3, r3, r2
   1d83c:	ldr	r2, [sp, #8]
   1d840:	str	r3, [fp, #40]	; 0x28
   1d844:	bl	15090 <__assert_fail@plt+0x3b2c>
   1d848:	ldrb	r3, [r5, #4]
   1d84c:	str	r0, [sp, #20]
   1d850:	cmp	r3, #2
   1d854:	movne	r3, #1
   1d858:	strne	r3, [sp, #32]
   1d85c:	beq	1d7ec <__assert_fail@plt+0xc288>
   1d860:	ldrb	r3, [r5, #4]
   1d864:	mov	r2, #0
   1d868:	cmp	r3, #21
   1d86c:	moveq	r3, #1
   1d870:	strbeq	r3, [r5, #4]
   1d874:	mov	r3, #0
   1d878:	strd	r2, [sp, #24]
   1d87c:	mov	r3, #1
   1d880:	ldr	r2, [sp, #8]
   1d884:	ubfx	r2, r2, #16, #1
   1d888:	str	r2, [sp, #36]	; 0x24
   1d88c:	str	r3, [sp, #4]
   1d890:	add	r2, sp, #80	; 0x50
   1d894:	mov	r6, #3
   1d898:	ldr	r3, [sp, #8]
   1d89c:	mov	r1, fp
   1d8a0:	add	r0, sp, #56	; 0x38
   1d8a4:	str	r2, [sp, #60]	; 0x3c
   1d8a8:	mov	r2, r5
   1d8ac:	str	r3, [sp]
   1d8b0:	ldr	r3, [sp, #20]
   1d8b4:	str	r6, [sp, #56]	; 0x38
   1d8b8:	bl	19978 <__assert_fail@plt+0x8414>
   1d8bc:	cmp	r0, #0
   1d8c0:	beq	1d8dc <__assert_fail@plt+0xc378>
   1d8c4:	str	r0, [sl]
   1d8c8:	ldr	r0, [sp, #12]
   1d8cc:	bl	13648 <__assert_fail@plt+0x20e4>
   1d8d0:	mov	r0, r7
   1d8d4:	bl	160fc <__assert_fail@plt+0x4b98>
   1d8d8:	b	1d70c <__assert_fail@plt+0xc1a8>
   1d8dc:	mov	r1, fp
   1d8e0:	mov	r0, r5
   1d8e4:	ldr	r2, [sp, #8]
   1d8e8:	bl	15090 <__assert_fail@plt+0x3b2c>
   1d8ec:	ldr	r3, [sp, #56]	; 0x38
   1d8f0:	str	r0, [sp, #20]
   1d8f4:	sub	r3, r3, #2
   1d8f8:	bics	r3, r3, #2
   1d8fc:	beq	1d9ac <__assert_fail@plt+0xc448>
   1d900:	ldrb	r3, [r5, #4]
   1d904:	cmp	r3, #2
   1d908:	bne	1d914 <__assert_fail@plt+0xc3b0>
   1d90c:	mov	r3, #7
   1d910:	b	1d7f0 <__assert_fail@plt+0xc28c>
   1d914:	cmp	r3, #22
   1d918:	bne	1d9ac <__assert_fail@plt+0xc448>
   1d91c:	ldr	r2, [sp, #20]
   1d920:	mov	r1, fp
   1d924:	add	r0, sp, #72	; 0x48
   1d928:	ldr	r3, [fp, #40]	; 0x28
   1d92c:	add	r3, r3, r2
   1d930:	ldr	r2, [sp, #8]
   1d934:	str	r3, [fp, #40]	; 0x28
   1d938:	bl	15090 <__assert_fail@plt+0x3b2c>
   1d93c:	ldrb	r2, [sp, #76]	; 0x4c
   1d940:	mov	r3, r0
   1d944:	cmp	r2, #2
   1d948:	beq	1d90c <__assert_fail@plt+0xc3a8>
   1d94c:	cmp	r2, #21
   1d950:	beq	1d994 <__assert_fail@plt+0xc430>
   1d954:	add	r2, sp, #112	; 0x70
   1d958:	mov	r1, fp
   1d95c:	str	r6, [sp, #64]	; 0x40
   1d960:	add	r0, sp, #64	; 0x40
   1d964:	str	r2, [sp, #68]	; 0x44
   1d968:	mov	r2, #1
   1d96c:	str	r2, [sp, #4]
   1d970:	ldr	r2, [sp, #8]
   1d974:	str	r2, [sp]
   1d978:	add	r2, sp, #72	; 0x48
   1d97c:	bl	19978 <__assert_fail@plt+0x8414>
   1d980:	subs	r3, r0, #0
   1d984:	str	r3, [sp, #16]
   1d988:	beq	1d9d0 <__assert_fail@plt+0xc46c>
   1d98c:	ldr	r3, [sp, #16]
   1d990:	b	1d7f0 <__assert_fail@plt+0xc28c>
   1d994:	ldr	r2, [sp, #20]
   1d998:	ldr	r3, [fp, #40]	; 0x28
   1d99c:	sub	r3, r3, r2
   1d9a0:	str	r3, [fp, #40]	; 0x28
   1d9a4:	mov	r3, #1
   1d9a8:	strb	r3, [r5, #4]
   1d9ac:	ldr	r3, [sp, #56]	; 0x38
   1d9b0:	cmp	r3, #4
   1d9b4:	ldrls	pc, [pc, r3, lsl #2]
   1d9b8:	b	1dcc8 <__assert_fail@plt+0xc764>
   1d9bc:	andeq	sp, r1, r0, lsr #24
   1d9c0:	andeq	sp, r1, r8, asr #24
   1d9c4:	muleq	r1, r8, ip
   1d9c8:	muleq	r1, r8, ip
   1d9cc:	andeq	sp, r1, r8, asr #25
   1d9d0:	mov	r1, fp
   1d9d4:	mov	r0, r5
   1d9d8:	ldr	r2, [sp, #8]
   1d9dc:	bl	15090 <__assert_fail@plt+0x3b2c>
   1d9e0:	ldr	r2, [sp, #56]	; 0x38
   1d9e4:	str	r0, [sp, #20]
   1d9e8:	sub	r3, r2, #2
   1d9ec:	bics	r3, r3, #2
   1d9f0:	beq	1dc18 <__assert_fail@plt+0xc6b4>
   1d9f4:	ldr	r8, [sp, #64]	; 0x40
   1d9f8:	sub	r3, r8, #2
   1d9fc:	bics	r3, r3, #2
   1da00:	beq	1dc18 <__assert_fail@plt+0xc6b4>
   1da04:	cmp	r2, #3
   1da08:	moveq	r9, #1
   1da0c:	movne	r9, #0
   1da10:	bne	1da34 <__assert_fail@plt+0xc4d0>
   1da14:	ldr	r0, [sp, #60]	; 0x3c
   1da18:	str	r2, [sp, #40]	; 0x28
   1da1c:	bl	113fc <strlen@plt>
   1da20:	cmp	r0, #1
   1da24:	ldr	r2, [sp, #40]	; 0x28
   1da28:	bls	1e4ac <__assert_fail@plt+0xcf48>
   1da2c:	mov	r3, #3
   1da30:	b	1db70 <__assert_fail@plt+0xc60c>
   1da34:	cmp	r8, #3
   1da38:	bne	1e4b8 <__assert_fail@plt+0xcf54>
   1da3c:	ldr	r0, [sp, #68]	; 0x44
   1da40:	str	r2, [sp, #40]	; 0x28
   1da44:	bl	113fc <strlen@plt>
   1da48:	cmp	r0, #1
   1da4c:	bhi	1da2c <__assert_fail@plt+0xc4c8>
   1da50:	ldr	r2, [sp, #40]	; 0x28
   1da54:	cmp	r2, #0
   1da58:	bne	1db78 <__assert_fail@plt+0xc614>
   1da5c:	ldrb	r6, [sp, #60]	; 0x3c
   1da60:	cmp	r8, #0
   1da64:	bne	1db9c <__assert_fail@plt+0xc638>
   1da68:	ldrb	r8, [sp, #68]	; 0x44
   1da6c:	cmp	r2, #0
   1da70:	moveq	r9, #1
   1da74:	cmp	r9, #0
   1da78:	ldreq	r6, [sp, #60]	; 0x3c
   1da7c:	beq	1da98 <__assert_fail@plt+0xc534>
   1da80:	ldr	r3, [r4, #92]	; 0x5c
   1da84:	cmp	r3, #1
   1da88:	ble	1da98 <__assert_fail@plt+0xc534>
   1da8c:	mov	r0, r6
   1da90:	bl	11450 <btowc@plt>
   1da94:	mov	r6, r0
   1da98:	ldr	r3, [sp, #64]	; 0x40
   1da9c:	cmp	r3, #3
   1daa0:	cmpne	r3, #0
   1daa4:	ldrne	r8, [sp, #68]	; 0x44
   1daa8:	bne	1dac4 <__assert_fail@plt+0xc560>
   1daac:	ldr	r3, [r4, #92]	; 0x5c
   1dab0:	cmp	r3, #1
   1dab4:	ble	1dac4 <__assert_fail@plt+0xc560>
   1dab8:	mov	r0, r8
   1dabc:	bl	11450 <btowc@plt>
   1dac0:	mov	r8, r0
   1dac4:	cmn	r6, #1
   1dac8:	cmnne	r8, #1
   1dacc:	beq	1da2c <__assert_fail@plt+0xc4c8>
   1dad0:	ldr	r3, [sp, #36]	; 0x24
   1dad4:	cmp	r6, r8
   1dad8:	movls	r3, #0
   1dadc:	andhi	r3, r3, #1
   1dae0:	cmp	r3, #0
   1dae4:	bne	1dc18 <__assert_fail@plt+0xc6b4>
   1dae8:	ldr	r3, [r4, #92]	; 0x5c
   1daec:	cmp	r3, #1
   1daf0:	ble	1dbcc <__assert_fail@plt+0xc668>
   1daf4:	ldr	r2, [sp, #28]
   1daf8:	ldr	r3, [r7, #32]
   1dafc:	cmp	r3, r2
   1db00:	bne	1dbac <__assert_fail@plt+0xc648>
   1db04:	lsl	r9, r2, #1
   1db08:	ldr	r0, [r7, #4]
   1db0c:	add	r9, r9, #1
   1db10:	lsl	r3, r9, #2
   1db14:	mov	r1, r3
   1db18:	str	r3, [sp, #44]	; 0x2c
   1db1c:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1db20:	ldr	r3, [sp, #44]	; 0x2c
   1db24:	mov	r2, r0
   1db28:	ldr	r0, [r7, #8]
   1db2c:	str	r2, [sp, #40]	; 0x28
   1db30:	mov	r1, r3
   1db34:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1db38:	ldr	r2, [sp, #40]	; 0x28
   1db3c:	mov	r3, r0
   1db40:	cmp	r0, #0
   1db44:	cmpne	r2, #0
   1db48:	strdne	r2, [r7, #4]
   1db4c:	strne	r9, [sp, #28]
   1db50:	bne	1dbac <__assert_fail@plt+0xc648>
   1db54:	mov	r0, r2
   1db58:	str	r3, [sp, #16]
   1db5c:	bl	13648 <__assert_fail@plt+0x20e4>
   1db60:	ldr	r3, [sp, #16]
   1db64:	mov	r0, r3
   1db68:	bl	13648 <__assert_fail@plt+0x20e4>
   1db6c:	mov	r3, #12
   1db70:	str	r3, [sp, #16]
   1db74:	b	1dc04 <__assert_fail@plt+0xc6a0>
   1db78:	cmp	r2, #3
   1db7c:	bne	1db8c <__assert_fail@plt+0xc628>
   1db80:	ldr	r3, [sp, #60]	; 0x3c
   1db84:	ldrb	r6, [r3]
   1db88:	b	1da60 <__assert_fail@plt+0xc4fc>
   1db8c:	mov	r6, #0
   1db90:	ldr	r3, [sp, #68]	; 0x44
   1db94:	ldrb	r8, [r3]
   1db98:	b	1da6c <__assert_fail@plt+0xc508>
   1db9c:	cmp	r8, #3
   1dba0:	beq	1db90 <__assert_fail@plt+0xc62c>
   1dba4:	mov	r8, #0
   1dba8:	b	1da6c <__assert_fail@plt+0xc508>
   1dbac:	ldr	r3, [r7, #4]
   1dbb0:	ldr	r2, [r7, #32]
   1dbb4:	str	r6, [r3, r2, lsl #2]
   1dbb8:	ldr	r2, [r7, #8]
   1dbbc:	ldr	r3, [r7, #32]
   1dbc0:	add	r1, r3, #1
   1dbc4:	str	r1, [r7, #32]
   1dbc8:	str	r8, [r2, r3, lsl #2]
   1dbcc:	mov	r9, #0
   1dbd0:	cmp	r6, r9
   1dbd4:	movhi	r3, #0
   1dbd8:	movls	r3, #1
   1dbdc:	cmp	r8, r9
   1dbe0:	movcc	r3, #0
   1dbe4:	cmp	r3, #0
   1dbe8:	beq	1dbf8 <__assert_fail@plt+0xc694>
   1dbec:	mov	r1, r9
   1dbf0:	ldr	r0, [sp, #12]
   1dbf4:	bl	14e04 <__assert_fail@plt+0x38a0>
   1dbf8:	add	r9, r9, #1
   1dbfc:	cmp	r9, #256	; 0x100
   1dc00:	bne	1dbd0 <__assert_fail@plt+0xc66c>
   1dc04:	ldr	r3, [sp, #16]
   1dc08:	cmp	r3, #0
   1dc0c:	str	r3, [sl]
   1dc10:	beq	1dc2c <__assert_fail@plt+0xc6c8>
   1dc14:	b	1d8c8 <__assert_fail@plt+0xc364>
   1dc18:	mov	r3, #11
   1dc1c:	b	1db70 <__assert_fail@plt+0xc60c>
   1dc20:	ldrb	r1, [sp, #60]	; 0x3c
   1dc24:	ldr	r0, [sp, #12]
   1dc28:	bl	14e04 <__assert_fail@plt+0x38a0>
   1dc2c:	ldrb	r3, [r5, #4]
   1dc30:	cmp	r3, #2
   1dc34:	beq	1d90c <__assert_fail@plt+0xc3a8>
   1dc38:	cmp	r3, #21
   1dc3c:	beq	1dcf8 <__assert_fail@plt+0xc794>
   1dc40:	mov	r3, #0
   1dc44:	b	1d88c <__assert_fail@plt+0xc328>
   1dc48:	ldr	r3, [r7, #20]
   1dc4c:	ldr	r2, [sp, #24]
   1dc50:	cmp	r3, r2
   1dc54:	bne	1dc7c <__assert_fail@plt+0xc718>
   1dc58:	lsl	r3, r2, #1
   1dc5c:	ldr	r0, [r7]
   1dc60:	add	r3, r3, #1
   1dc64:	lsl	r1, r3, #2
   1dc68:	str	r3, [sp, #24]
   1dc6c:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1dc70:	cmp	r0, #0
   1dc74:	beq	1e4a4 <__assert_fail@plt+0xcf40>
   1dc78:	str	r0, [r7]
   1dc7c:	ldr	r2, [r7]
   1dc80:	ldr	r3, [r7, #20]
   1dc84:	add	r1, r3, #1
   1dc88:	str	r1, [r7, #20]
   1dc8c:	ldr	r1, [sp, #60]	; 0x3c
   1dc90:	str	r1, [r2, r3, lsl #2]
   1dc94:	b	1dc2c <__assert_fail@plt+0xc6c8>
   1dc98:	ldr	r6, [sp, #60]	; 0x3c
   1dc9c:	mov	r0, r6
   1dca0:	bl	113fc <strlen@plt>
   1dca4:	cmp	r0, #1
   1dca8:	movne	r3, #3
   1dcac:	bne	1d7f0 <__assert_fail@plt+0xc28c>
   1dcb0:	ldrb	r1, [r6]
   1dcb4:	ldr	r0, [sp, #12]
   1dcb8:	bl	14e04 <__assert_fail@plt+0x38a0>
   1dcbc:	mov	r3, #0
   1dcc0:	str	r3, [sl]
   1dcc4:	b	1dc2c <__assert_fail@plt+0xc6c8>
   1dcc8:	ldr	r3, [sp, #8]
   1dccc:	mov	r2, r7
   1dcd0:	ldr	r0, [fp, #64]	; 0x40
   1dcd4:	ldr	r1, [sp, #12]
   1dcd8:	str	r3, [sp, #4]
   1dcdc:	ldr	r3, [sp, #60]	; 0x3c
   1dce0:	str	r3, [sp]
   1dce4:	add	r3, sp, #52	; 0x34
   1dce8:	bl	16834 <__assert_fail@plt+0x52d0>
   1dcec:	cmp	r0, #0
   1dcf0:	str	r0, [sl]
   1dcf4:	b	1dc10 <__assert_fail@plt+0xc6ac>
   1dcf8:	ldr	r2, [sp, #20]
   1dcfc:	ldr	r3, [fp, #40]	; 0x28
   1dd00:	add	r3, r3, r2
   1dd04:	str	r3, [fp, #40]	; 0x28
   1dd08:	ldr	r3, [sp, #32]
   1dd0c:	cmp	r3, #0
   1dd10:	beq	1dd1c <__assert_fail@plt+0xc7b8>
   1dd14:	ldr	r0, [sp, #12]
   1dd18:	bl	14e50 <__assert_fail@plt+0x38ec>
   1dd1c:	ldr	r3, [r4, #92]	; 0x5c
   1dd20:	cmp	r3, #1
   1dd24:	ble	1dd34 <__assert_fail@plt+0xc7d0>
   1dd28:	ldr	r0, [sp, #12]
   1dd2c:	ldr	r1, [r4, #60]	; 0x3c
   1dd30:	bl	14e98 <__assert_fail@plt+0x3934>
   1dd34:	ldr	r3, [r7, #20]
   1dd38:	cmp	r3, #0
   1dd3c:	bne	1dd88 <__assert_fail@plt+0xc824>
   1dd40:	ldr	r3, [r7, #24]
   1dd44:	cmp	r3, #0
   1dd48:	bne	1dd88 <__assert_fail@plt+0xc824>
   1dd4c:	ldr	r3, [r7, #28]
   1dd50:	cmp	r3, #0
   1dd54:	bne	1dd88 <__assert_fail@plt+0xc824>
   1dd58:	ldr	r3, [r7, #32]
   1dd5c:	cmp	r3, #0
   1dd60:	bne	1dd88 <__assert_fail@plt+0xc824>
   1dd64:	ldr	r3, [r4, #92]	; 0x5c
   1dd68:	cmp	r3, #1
   1dd6c:	ble	1ddec <__assert_fail@plt+0xc888>
   1dd70:	ldr	r3, [r7, #36]	; 0x24
   1dd74:	cmp	r3, #0
   1dd78:	bne	1dd88 <__assert_fail@plt+0xc824>
   1dd7c:	ldrb	r3, [r7, #16]
   1dd80:	tst	r3, #1
   1dd84:	beq	1ddec <__assert_fail@plt+0xc888>
   1dd88:	ldrb	r3, [r4, #88]	; 0x58
   1dd8c:	mov	r2, #0
   1dd90:	mov	r0, r4
   1dd94:	mov	r1, r2
   1dd98:	orr	r3, r3, #2
   1dd9c:	strb	r3, [r4, #88]	; 0x58
   1dda0:	mov	r3, #6
   1dda4:	str	r7, [sp, #112]	; 0x70
   1dda8:	strb	r3, [sp, #116]	; 0x74
   1ddac:	add	r3, sp, #112	; 0x70
   1ddb0:	bl	15638 <__assert_fail@plt+0x40d4>
   1ddb4:	subs	r6, r0, #0
   1ddb8:	beq	1e4a4 <__assert_fail@plt+0xcf40>
   1ddbc:	ldr	r3, [sp, #12]
   1ddc0:	ldr	r2, [sp, #12]
   1ddc4:	sub	r3, r3, #4
   1ddc8:	add	r2, r2, #28
   1ddcc:	ldr	r1, [r3, #4]!
   1ddd0:	cmp	r1, #0
   1ddd4:	bne	1e460 <__assert_fail@plt+0xcefc>
   1ddd8:	cmp	r2, r3
   1dddc:	bne	1ddcc <__assert_fail@plt+0xc868>
   1dde0:	ldr	r0, [sp, #12]
   1dde4:	bl	13648 <__assert_fail@plt+0x20e4>
   1dde8:	b	1d74c <__assert_fail@plt+0xc1e8>
   1ddec:	mov	r0, r7
   1ddf0:	bl	160fc <__assert_fail@plt+0x4b98>
   1ddf4:	mov	r3, #3
   1ddf8:	mov	r2, #0
   1ddfc:	mov	r1, r2
   1de00:	mov	r0, r4
   1de04:	strb	r3, [sp, #116]	; 0x74
   1de08:	ldr	r3, [sp, #12]
   1de0c:	str	r3, [sp, #112]	; 0x70
   1de10:	add	r3, sp, #112	; 0x70
   1de14:	bl	15638 <__assert_fail@plt+0x40d4>
   1de18:	b	1e49c <__assert_fail@plt+0xcf38>
   1de1c:	ldr	r2, [r5]
   1de20:	mov	r3, #1
   1de24:	ldr	r6, [r4, #84]	; 0x54
   1de28:	lsl	r3, r3, r2
   1de2c:	ands	r6, r3, r6
   1de30:	moveq	r3, #6
   1de34:	beq	1dec8 <__assert_fail@plt+0xc964>
   1de38:	ldr	r2, [r4, #80]	; 0x50
   1de3c:	mov	r0, r4
   1de40:	orr	r3, r2, r3
   1de44:	mov	r2, #0
   1de48:	mov	r1, r2
   1de4c:	str	r3, [r4, #80]	; 0x50
   1de50:	mov	r3, r5
   1de54:	bl	15638 <__assert_fail@plt+0x40d4>
   1de58:	subs	r6, r0, #0
   1de5c:	ldrne	r3, [r4, #76]	; 0x4c
   1de60:	addne	r3, r3, #1
   1de64:	strne	r3, [r4, #76]	; 0x4c
   1de68:	beq	1d558 <__assert_fail@plt+0xbff4>
   1de6c:	ldrb	r3, [r4, #88]	; 0x58
   1de70:	orr	r3, r3, #2
   1de74:	strb	r3, [r4, #88]	; 0x58
   1de78:	b	1d570 <__assert_fail@plt+0xc00c>
   1de7c:	cmp	r7, #0
   1de80:	beq	1de8c <__assert_fail@plt+0xc928>
   1de84:	mov	r3, #13
   1de88:	b	1d55c <__assert_fail@plt+0xbff8>
   1de8c:	cmp	r8, #0
   1de90:	bne	1de84 <__assert_fail@plt+0xc920>
   1de94:	cmp	r9, #0
   1de98:	beq	1deb0 <__assert_fail@plt+0xc94c>
   1de9c:	mov	r1, fp
   1dea0:	mov	r0, r5
   1dea4:	ldr	r2, [sp, #8]
   1dea8:	bl	198b4 <__assert_fail@plt+0x8350>
   1deac:	b	1d494 <__assert_fail@plt+0xbf30>
   1deb0:	cmp	r3, #9
   1deb4:	bne	1ded8 <__assert_fail@plt+0xc974>
   1deb8:	ldr	r3, [sp, #8]
   1debc:	ands	r6, r3, #131072	; 0x20000
   1dec0:	bne	1ded8 <__assert_fail@plt+0xc974>
   1dec4:	mov	r3, #16
   1dec8:	str	r3, [sl]
   1decc:	mov	r0, r6
   1ded0:	add	sp, sp, #148	; 0x94
   1ded4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ded8:	mov	r3, #1
   1dedc:	mov	r2, #0
   1dee0:	mov	r1, r2
   1dee4:	mov	r0, r4
   1dee8:	strb	r3, [r5, #4]
   1deec:	mov	r3, r5
   1def0:	bl	15638 <__assert_fail@plt+0x40d4>
   1def4:	subs	r6, r0, #0
   1def8:	bne	1d570 <__assert_fail@plt+0xc00c>
   1defc:	b	1d558 <__assert_fail@plt+0xbff4>
   1df00:	ldr	r3, [r5]
   1df04:	movw	r2, #783	; 0x30f
   1df08:	tst	r2, r3
   1df0c:	beq	1df58 <__assert_fail@plt+0xc9f4>
   1df10:	ldrb	r3, [r4, #88]	; 0x58
   1df14:	ands	r7, r3, #16
   1df18:	bne	1df58 <__assert_fail@plt+0xc9f4>
   1df1c:	orr	r3, r3, #16
   1df20:	ands	r1, r3, #8
   1df24:	strb	r3, [r4, #88]	; 0x58
   1df28:	bne	1e048 <__assert_fail@plt+0xcae4>
   1df2c:	ldr	r2, [pc, #1448]	; 1e4dc <__assert_fail@plt+0xcf78>
   1df30:	mvn	r6, #2013265921	; 0x78000001
   1df34:	mvn	r7, #-134217727	; 0xf8000001
   1df38:	tst	r3, #4
   1df3c:	str	r1, [r4, #96]	; 0x60
   1df40:	str	r2, [r4, #100]	; 0x64
   1df44:	strd	r6, [r4, #104]	; 0x68
   1df48:	beq	1e068 <__assert_fail@plt+0xcb04>
   1df4c:	mov	r2, #16
   1df50:	add	r0, r4, #112	; 0x70
   1df54:	bl	11444 <memset@plt>
   1df58:	ldr	r3, [r5]
   1df5c:	sub	r2, r3, #256	; 0x100
   1df60:	bics	r2, r2, #256	; 0x100
   1df64:	bne	1e098 <__assert_fail@plt+0xcb34>
   1df68:	cmp	r3, #256	; 0x100
   1df6c:	bne	1e074 <__assert_fail@plt+0xcb10>
   1df70:	mov	r3, #6
   1df74:	mov	r1, r2
   1df78:	mov	r0, r4
   1df7c:	str	r3, [r5]
   1df80:	mov	r3, r5
   1df84:	bl	15638 <__assert_fail@plt+0x40d4>
   1df88:	mov	r7, r0
   1df8c:	mov	r3, #9
   1df90:	mov	r2, #0
   1df94:	mov	r0, r4
   1df98:	str	r3, [r5]
   1df9c:	mov	r1, r2
   1dfa0:	mov	r3, r5
   1dfa4:	bl	15638 <__assert_fail@plt+0x40d4>
   1dfa8:	mov	r6, r0
   1dfac:	mov	r2, r0
   1dfb0:	mov	r3, #10
   1dfb4:	mov	r1, r7
   1dfb8:	mov	r0, r4
   1dfbc:	bl	1578c <__assert_fail@plt+0x4228>
   1dfc0:	clz	r2, r6
   1dfc4:	cmp	r7, #0
   1dfc8:	lsr	r2, r2, #5
   1dfcc:	moveq	r2, #1
   1dfd0:	cmp	r0, #0
   1dfd4:	moveq	r2, #1
   1dfd8:	mov	r6, r0
   1dfdc:	cmp	r2, #0
   1dfe0:	bne	1d558 <__assert_fail@plt+0xbff4>
   1dfe4:	mov	r1, fp
   1dfe8:	mov	r0, r5
   1dfec:	ldr	r2, [sp, #8]
   1dff0:	bl	198b4 <__assert_fail@plt+0x8350>
   1dff4:	b	1decc <__assert_fail@plt+0xc968>
   1dff8:	ldrh	r8, [r0], #2
   1dffc:	add	r1, r2, r7
   1e000:	ubfx	r8, r8, #3, #1
   1e004:	cmp	r1, #95	; 0x5f
   1e008:	movne	r1, r8
   1e00c:	orreq	r1, r8, #1
   1e010:	cmp	r1, #0
   1e014:	ldrne	r1, [r3]
   1e018:	orrne	r1, r1, r6, lsl r2
   1e01c:	add	r2, r2, #1
   1e020:	strne	r1, [r3]
   1e024:	cmp	r2, #32
   1e028:	bne	1dff8 <__assert_fail@plt+0xca94>
   1e02c:	add	r3, r3, #4
   1e030:	add	r7, r7, #32
   1e034:	cmp	lr, r3
   1e038:	beq	1df58 <__assert_fail@plt+0xc9f4>
   1e03c:	add	r0, ip, r7, lsl #1
   1e040:	mov	r2, #0
   1e044:	b	1dff8 <__assert_fail@plt+0xca94>
   1e048:	mov	r6, r7
   1e04c:	bl	113e4 <__ctype_b_loc@plt>
   1e050:	add	r3, r6, #24
   1e054:	add	lr, r4, #128	; 0x80
   1e058:	ldr	ip, [r0]
   1e05c:	add	r3, r4, r3, lsl #2
   1e060:	mov	r6, #1
   1e064:	b	1e03c <__assert_fail@plt+0xcad8>
   1e068:	mov	r7, #128	; 0x80
   1e06c:	mov	r6, #4
   1e070:	b	1e04c <__assert_fail@plt+0xcae8>
   1e074:	mov	r3, #5
   1e078:	mov	r1, r2
   1e07c:	mov	r0, r4
   1e080:	str	r3, [r5]
   1e084:	mov	r3, r5
   1e088:	bl	15638 <__assert_fail@plt+0x40d4>
   1e08c:	mov	r7, r0
   1e090:	mov	r3, #10
   1e094:	b	1df90 <__assert_fail@plt+0xca2c>
   1e098:	mov	r2, #0
   1e09c:	mov	r3, r5
   1e0a0:	mov	r1, r2
   1e0a4:	mov	r0, r4
   1e0a8:	bl	15638 <__assert_fail@plt+0x40d4>
   1e0ac:	subs	r6, r0, #0
   1e0b0:	bne	1dfe4 <__assert_fail@plt+0xca80>
   1e0b4:	b	1d558 <__assert_fail@plt+0xbff4>
   1e0b8:	mov	r2, #0
   1e0bc:	mov	r3, r5
   1e0c0:	mov	r1, r2
   1e0c4:	mov	r0, r4
   1e0c8:	bl	15638 <__assert_fail@plt+0x40d4>
   1e0cc:	subs	r6, r0, #0
   1e0d0:	beq	1d558 <__assert_fail@plt+0xbff4>
   1e0d4:	ldr	r3, [r4, #92]	; 0x5c
   1e0d8:	cmp	r3, #1
   1e0dc:	bgt	1de6c <__assert_fail@plt+0xc908>
   1e0e0:	b	1d570 <__assert_fail@plt+0xc00c>
   1e0e4:	sub	r3, r3, #33	; 0x21
   1e0e8:	ldr	r2, [pc, #1008]	; 1e4e0 <__assert_fail@plt+0xcf7c>
   1e0ec:	clz	r3, r3
   1e0f0:	lsr	r3, r3, #5
   1e0f4:	stm	sp, {r3, sl}
   1e0f8:	ldr	r3, [pc, #996]	; 1e4e4 <__assert_fail@plt+0xcf80>
   1e0fc:	mov	r0, r4
   1e100:	ldr	r1, [fp, #64]	; 0x40
   1e104:	bl	16f4c <__assert_fail@plt+0x59e8>
   1e108:	ldr	r3, [sl]
   1e10c:	mov	r6, r0
   1e110:	clz	r0, r0
   1e114:	lsr	r0, r0, #5
   1e118:	cmp	r3, #0
   1e11c:	moveq	r0, #0
   1e120:	cmp	r0, #0
   1e124:	b	1d764 <__assert_fail@plt+0xc200>
   1e128:	sub	r3, r3, #35	; 0x23
   1e12c:	ldr	r2, [pc, #948]	; 1e4e8 <__assert_fail@plt+0xcf84>
   1e130:	clz	r3, r3
   1e134:	lsr	r3, r3, #5
   1e138:	stm	sp, {r3, sl}
   1e13c:	ldr	r3, [pc, #936]	; 1e4ec <__assert_fail@plt+0xcf88>
   1e140:	b	1e0fc <__assert_fail@plt+0xcb98>
   1e144:	mov	r3, #5
   1e148:	b	1d55c <__assert_fail@plt+0xbff8>
   1e14c:	cmn	r0, #2
   1e150:	bne	1e1b8 <__assert_fail@plt+0xcc54>
   1e154:	cmn	r9, #2
   1e158:	cmnne	r8, #2
   1e15c:	bne	1e220 <__assert_fail@plt+0xccbc>
   1e160:	ldr	r3, [sp, #8]
   1e164:	ands	r7, r3, #2097152	; 0x200000
   1e168:	bne	1e1fc <__assert_fail@plt+0xcc98>
   1e16c:	ldrb	r3, [r5, #4]
   1e170:	cmp	r3, #2
   1e174:	moveq	r3, #9
   1e178:	streq	r3, [sl]
   1e17c:	bne	1d5fc <__assert_fail@plt+0xc098>
   1e180:	ldr	r3, [sl]
   1e184:	clz	r2, r7
   1e188:	lsr	r2, r2, #5
   1e18c:	cmp	r3, #0
   1e190:	moveq	r2, #0
   1e194:	cmp	r2, #0
   1e198:	beq	1e424 <__assert_fail@plt+0xcec0>
   1e19c:	cmp	r6, #0
   1e1a0:	beq	1d768 <__assert_fail@plt+0xc204>
   1e1a4:	mov	r2, #0
   1e1a8:	ldr	r1, [pc, #808]	; 1e4d8 <__assert_fail@plt+0xcf74>
   1e1ac:	mov	r0, r6
   1e1b0:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e1b4:	b	1d768 <__assert_fail@plt+0xc204>
   1e1b8:	ldrb	r3, [r5, #4]
   1e1bc:	cmp	r3, #24
   1e1c0:	moveq	r8, r9
   1e1c4:	beq	1e154 <__assert_fail@plt+0xcbf0>
   1e1c8:	cmp	r3, #1
   1e1cc:	bne	1e1f4 <__assert_fail@plt+0xcc90>
   1e1d0:	ldrb	r3, [r5]
   1e1d4:	cmp	r3, #44	; 0x2c
   1e1d8:	bne	1e1f4 <__assert_fail@plt+0xcc90>
   1e1dc:	mov	r1, r5
   1e1e0:	mov	r0, fp
   1e1e4:	ldr	r2, [sp, #8]
   1e1e8:	bl	198d0 <__assert_fail@plt+0x836c>
   1e1ec:	mov	r8, r0
   1e1f0:	b	1e154 <__assert_fail@plt+0xcbf0>
   1e1f4:	mvn	r8, #1
   1e1f8:	b	1e154 <__assert_fail@plt+0xcbf0>
   1e1fc:	ldr	r3, [sp, #12]
   1e200:	str	r3, [fp, #40]	; 0x28
   1e204:	add	r3, sp, #112	; 0x70
   1e208:	ldm	r3, {r0, r1}
   1e20c:	mov	r3, #1
   1e210:	stm	r5, {r0, r1}
   1e214:	strb	r3, [r5, #4]
   1e218:	mov	r7, r6
   1e21c:	b	1e180 <__assert_fail@plt+0xcc1c>
   1e220:	cmn	r8, #1
   1e224:	cmpne	r9, r8
   1e228:	bgt	1d5fc <__assert_fail@plt+0xc098>
   1e22c:	ldrb	r3, [r5, #4]
   1e230:	cmp	r3, #24
   1e234:	bne	1d5fc <__assert_fail@plt+0xc098>
   1e238:	cmn	r8, #1
   1e23c:	movw	r3, #32767	; 0x7fff
   1e240:	bne	1e290 <__assert_fail@plt+0xcd2c>
   1e244:	cmp	r9, r3
   1e248:	movle	r3, #0
   1e24c:	movgt	r3, #1
   1e250:	cmp	r3, #0
   1e254:	movne	r3, #15
   1e258:	bne	1d600 <__assert_fail@plt+0xc09c>
   1e25c:	mov	r1, fp
   1e260:	mov	r0, r5
   1e264:	ldr	r2, [sp, #8]
   1e268:	bl	198b4 <__assert_fail@plt+0x8350>
   1e26c:	cmp	r6, #0
   1e270:	beq	1e218 <__assert_fail@plt+0xccb4>
   1e274:	orrs	r7, r9, r8
   1e278:	bne	1e2a8 <__assert_fail@plt+0xcd44>
   1e27c:	mov	r2, r7
   1e280:	ldr	r1, [pc, #592]	; 1e4d8 <__assert_fail@plt+0xcf74>
   1e284:	mov	r0, r6
   1e288:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e28c:	b	1e180 <__assert_fail@plt+0xcc1c>
   1e290:	cmp	r8, r3
   1e294:	b	1e248 <__assert_fail@plt+0xcce4>
   1e298:	cmp	r3, #19
   1e29c:	moveq	r8, #1
   1e2a0:	mvnne	r8, #0
   1e2a4:	b	1e25c <__assert_fail@plt+0xccf8>
   1e2a8:	cmp	r9, #0
   1e2ac:	movle	r3, #0
   1e2b0:	strle	r6, [sp, #12]
   1e2b4:	strle	r3, [sp, #16]
   1e2b8:	ble	1e340 <__assert_fail@plt+0xcddc>
   1e2bc:	mov	r7, r6
   1e2c0:	mov	r3, #2
   1e2c4:	str	r6, [sp, #12]
   1e2c8:	b	1e30c <__assert_fail@plt+0xcda8>
   1e2cc:	mov	r1, r4
   1e2d0:	ldr	r0, [sp, #12]
   1e2d4:	bl	156ec <__assert_fail@plt+0x4188>
   1e2d8:	mov	r2, r0
   1e2dc:	mov	r3, #16
   1e2e0:	str	r0, [sp, #12]
   1e2e4:	mov	r1, r7
   1e2e8:	mov	r0, r4
   1e2ec:	bl	1578c <__assert_fail@plt+0x4228>
   1e2f0:	ldr	r3, [sp, #12]
   1e2f4:	mov	r7, r0
   1e2f8:	cmp	r0, #0
   1e2fc:	cmpne	r3, #0
   1e300:	beq	1e38c <__assert_fail@plt+0xce28>
   1e304:	ldr	r3, [sp, #16]
   1e308:	add	r3, r3, #1
   1e30c:	str	r3, [sp, #16]
   1e310:	ldr	r3, [sp, #16]
   1e314:	cmp	r9, r3
   1e318:	bge	1e2cc <__assert_fail@plt+0xcd68>
   1e31c:	cmp	r9, r8
   1e320:	beq	1e180 <__assert_fail@plt+0xcc1c>
   1e324:	mov	r1, r4
   1e328:	ldr	r0, [sp, #12]
   1e32c:	bl	156ec <__assert_fail@plt+0x4188>
   1e330:	subs	r3, r0, #0
   1e334:	str	r3, [sp, #12]
   1e338:	beq	1e38c <__assert_fail@plt+0xce28>
   1e33c:	str	r7, [sp, #16]
   1e340:	ldr	r3, [sp, #12]
   1e344:	ldrb	r3, [r3, #24]
   1e348:	cmp	r3, #17
   1e34c:	bne	1e364 <__assert_fail@plt+0xce00>
   1e350:	ldr	r3, [sp, #12]
   1e354:	ldr	r1, [pc, #404]	; 1e4f0 <__assert_fail@plt+0xcf8c>
   1e358:	mov	r0, r3
   1e35c:	ldr	r2, [r3, #20]
   1e360:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e364:	cmn	r8, #1
   1e368:	mov	r2, #0
   1e36c:	ldr	r1, [sp, #12]
   1e370:	moveq	r3, #11
   1e374:	movne	r3, #10
   1e378:	mov	r0, r4
   1e37c:	bl	1578c <__assert_fail@plt+0x4228>
   1e380:	subs	r7, r0, #0
   1e384:	addne	r9, r9, #2
   1e388:	bne	1e3f4 <__assert_fail@plt+0xce90>
   1e38c:	mov	r3, #12
   1e390:	b	1d600 <__assert_fail@plt+0xc09c>
   1e394:	mov	r1, r4
   1e398:	ldr	r0, [sp, #12]
   1e39c:	bl	156ec <__assert_fail@plt+0x4188>
   1e3a0:	mov	r2, r0
   1e3a4:	mov	r3, #16
   1e3a8:	str	r0, [sp, #12]
   1e3ac:	mov	r1, r7
   1e3b0:	mov	r0, r4
   1e3b4:	bl	1578c <__assert_fail@plt+0x4228>
   1e3b8:	ldr	r3, [sp, #12]
   1e3bc:	mov	r1, r0
   1e3c0:	clz	r0, r0
   1e3c4:	lsr	r0, r0, #5
   1e3c8:	cmp	r3, #0
   1e3cc:	movne	r2, r0
   1e3d0:	moveq	r2, #1
   1e3d4:	cmp	r2, #0
   1e3d8:	bne	1e38c <__assert_fail@plt+0xce28>
   1e3dc:	mov	r3, #10
   1e3e0:	mov	r0, r4
   1e3e4:	bl	1578c <__assert_fail@plt+0x4228>
   1e3e8:	subs	r7, r0, #0
   1e3ec:	beq	1e38c <__assert_fail@plt+0xce28>
   1e3f0:	add	r9, r9, #1
   1e3f4:	cmp	r8, r9
   1e3f8:	bge	1e394 <__assert_fail@plt+0xce30>
   1e3fc:	ldr	r3, [sp, #16]
   1e400:	cmp	r3, #0
   1e404:	beq	1e180 <__assert_fail@plt+0xcc1c>
   1e408:	mov	r2, r7
   1e40c:	mov	r3, #16
   1e410:	ldr	r1, [sp, #16]
   1e414:	mov	r0, r4
   1e418:	bl	1578c <__assert_fail@plt+0x4228>
   1e41c:	mov	r7, r0
   1e420:	b	1e180 <__assert_fail@plt+0xcc1c>
   1e424:	ldr	r3, [sp, #8]
   1e428:	tst	r3, #16777216	; 0x1000000
   1e42c:	beq	1e458 <__assert_fail@plt+0xcef4>
   1e430:	ldrb	r3, [r5, #4]
   1e434:	cmp	r3, #23
   1e438:	cmpne	r3, #11
   1e43c:	bne	1e458 <__assert_fail@plt+0xcef4>
   1e440:	cmp	r7, #0
   1e444:	beq	1de84 <__assert_fail@plt+0xc920>
   1e448:	ldr	r1, [pc, #136]	; 1e4d8 <__assert_fail@plt+0xcf74>
   1e44c:	mov	r0, r7
   1e450:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e454:	b	1de84 <__assert_fail@plt+0xc920>
   1e458:	mov	r6, r7
   1e45c:	b	1d580 <__assert_fail@plt+0xc01c>
   1e460:	mov	r3, #3
   1e464:	mov	r2, #0
   1e468:	mov	r1, r2
   1e46c:	mov	r0, r4
   1e470:	strb	r3, [sp, #116]	; 0x74
   1e474:	ldr	r3, [sp, #12]
   1e478:	str	r3, [sp, #112]	; 0x70
   1e47c:	add	r3, sp, #112	; 0x70
   1e480:	bl	15638 <__assert_fail@plt+0x40d4>
   1e484:	subs	r1, r0, #0
   1e488:	beq	1e4a4 <__assert_fail@plt+0xcf40>
   1e48c:	mov	r3, #10
   1e490:	mov	r2, r6
   1e494:	mov	r0, r4
   1e498:	bl	1578c <__assert_fail@plt+0x4228>
   1e49c:	subs	r6, r0, #0
   1e4a0:	bne	1d74c <__assert_fail@plt+0xc1e8>
   1e4a4:	mov	r3, #12
   1e4a8:	b	1d7f0 <__assert_fail@plt+0xc28c>
   1e4ac:	cmp	r8, #3
   1e4b0:	bne	1db80 <__assert_fail@plt+0xc61c>
   1e4b4:	b	1da3c <__assert_fail@plt+0xc4d8>
   1e4b8:	cmp	r2, #0
   1e4bc:	beq	1da5c <__assert_fail@plt+0xc4f8>
   1e4c0:	cmp	r8, #0
   1e4c4:	movne	r6, #0
   1e4c8:	bne	1dba4 <__assert_fail@plt+0xc640>
   1e4cc:	mov	r6, r8
   1e4d0:	b	1da68 <__assert_fail@plt+0xc504>
   1e4d4:	addeq	r0, ip, r0, lsl #16
   1e4d8:	andeq	r6, r1, r0, ror #2
   1e4dc:	mvnseq	r0, #0
   1e4e0:	andeq	r2, r2, lr, ror r5
   1e4e4:	ldrdeq	r1, [r2], -sp
   1e4e8:	andeq	r2, r2, sl, lsl #11
   1e4ec:	andeq	r1, r2, sp, lsl #27
   1e4f0:	ldrdeq	r5, [r1], -r0
   1e4f4:	ldr	ip, [r1]
   1e4f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4fc:	sub	sp, sp, #20
   1e500:	mov	fp, r3
   1e504:	mov	sl, r0
   1e508:	mov	r7, r1
   1e50c:	mov	r8, r2
   1e510:	ldr	r5, [sp, #60]	; 0x3c
   1e514:	str	ip, [sp, #12]
   1e518:	ldr	ip, [sp, #56]	; 0x38
   1e51c:	str	ip, [sp]
   1e520:	str	r5, [sp, #4]
   1e524:	bl	1d46c <__assert_fail@plt+0xbf08>
   1e528:	ldr	r3, [r5]
   1e52c:	mov	r4, r0
   1e530:	clz	r0, r0
   1e534:	lsr	r0, r0, #5
   1e538:	cmp	r3, #0
   1e53c:	moveq	r0, #0
   1e540:	cmp	r0, #0
   1e544:	beq	1e5b4 <__assert_fail@plt+0xd050>
   1e548:	mov	r4, #0
   1e54c:	mov	r0, r4
   1e550:	add	sp, sp, #20
   1e554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e558:	cmp	r4, #0
   1e55c:	cmpne	r6, #0
   1e560:	beq	1e5ac <__assert_fail@plt+0xd048>
   1e564:	mov	r3, #16
   1e568:	mov	r2, r6
   1e56c:	ldr	r0, [sp, #12]
   1e570:	mov	r1, r4
   1e574:	bl	1578c <__assert_fail@plt+0x4228>
   1e578:	subs	r9, r0, #0
   1e57c:	bne	1e638 <__assert_fail@plt+0xd0d4>
   1e580:	mov	r2, r9
   1e584:	ldr	r1, [pc, #180]	; 1e640 <__assert_fail@plt+0xd0dc>
   1e588:	mov	r0, r6
   1e58c:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e590:	mov	r2, r9
   1e594:	ldr	r1, [pc, #164]	; 1e640 <__assert_fail@plt+0xd0dc>
   1e598:	mov	r0, r4
   1e59c:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e5a0:	mov	r2, #12
   1e5a4:	str	r2, [r5]
   1e5a8:	b	1e548 <__assert_fail@plt+0xcfe4>
   1e5ac:	cmp	r4, #0
   1e5b0:	moveq	r4, r6
   1e5b4:	ldrb	r2, [r8, #4]
   1e5b8:	and	r3, r2, #247	; 0xf7
   1e5bc:	cmp	r3, #2
   1e5c0:	beq	1e54c <__assert_fail@plt+0xcfe8>
   1e5c4:	ldr	r3, [sp, #56]	; 0x38
   1e5c8:	clz	r3, r3
   1e5cc:	lsr	r3, r3, #5
   1e5d0:	cmp	r2, #9
   1e5d4:	orrne	r3, r3, #1
   1e5d8:	cmp	r3, #0
   1e5dc:	beq	1e54c <__assert_fail@plt+0xcfe8>
   1e5e0:	ldr	r3, [sp, #56]	; 0x38
   1e5e4:	mov	r2, r8
   1e5e8:	mov	r1, r7
   1e5ec:	mov	r0, sl
   1e5f0:	stm	sp, {r3, r5}
   1e5f4:	mov	r3, fp
   1e5f8:	bl	1d46c <__assert_fail@plt+0xbf08>
   1e5fc:	ldr	r3, [r5]
   1e600:	mov	r6, r0
   1e604:	clz	r0, r0
   1e608:	lsr	r0, r0, #5
   1e60c:	cmp	r3, #0
   1e610:	moveq	r0, #0
   1e614:	cmp	r0, #0
   1e618:	beq	1e558 <__assert_fail@plt+0xcff4>
   1e61c:	cmp	r4, #0
   1e620:	beq	1e548 <__assert_fail@plt+0xcfe4>
   1e624:	mov	r2, #0
   1e628:	ldr	r1, [pc, #16]	; 1e640 <__assert_fail@plt+0xd0dc>
   1e62c:	mov	r0, r4
   1e630:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e634:	b	1e548 <__assert_fail@plt+0xcfe4>
   1e638:	mov	r4, r9
   1e63c:	b	1e5b4 <__assert_fail@plt+0xd050>
   1e640:	andeq	r6, r1, r0, ror #2
   1e644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e648:	sub	sp, sp, #20
   1e64c:	mov	sl, r3
   1e650:	mov	r8, r0
   1e654:	mov	r9, r1
   1e658:	mov	r7, r2
   1e65c:	ldr	r5, [r1]
   1e660:	ldr	r6, [sp, #60]	; 0x3c
   1e664:	ldr	ip, [r5, #84]	; 0x54
   1e668:	stmib	sp, {r6, ip}
   1e66c:	ldr	ip, [sp, #56]	; 0x38
   1e670:	str	ip, [sp]
   1e674:	bl	1e4f4 <__assert_fail@plt+0xcf90>
   1e678:	ldr	r3, [r6]
   1e67c:	mov	r4, r0
   1e680:	clz	r0, r0
   1e684:	lsr	r0, r0, #5
   1e688:	cmp	r3, #0
   1e68c:	moveq	r0, #0
   1e690:	cmp	r0, #0
   1e694:	orreq	r3, sl, #8388608	; 0x800000
   1e698:	streq	r3, [sp, #12]
   1e69c:	beq	1e6e8 <__assert_fail@plt+0xd184>
   1e6a0:	mov	r4, #0
   1e6a4:	mov	r0, r4
   1e6a8:	add	sp, sp, #20
   1e6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6b0:	ldr	r3, [r5, #84]	; 0x54
   1e6b4:	orr	fp, r3, fp
   1e6b8:	str	fp, [r5, #84]	; 0x54
   1e6bc:	mov	r1, r4
   1e6c0:	mov	r3, #10
   1e6c4:	mov	r0, r5
   1e6c8:	bl	1578c <__assert_fail@plt+0x4228>
   1e6cc:	subs	r4, r0, #0
   1e6d0:	bne	1e6e8 <__assert_fail@plt+0xd184>
   1e6d4:	mov	r3, #12
   1e6d8:	str	r3, [r6]
   1e6dc:	b	1e6a4 <__assert_fail@plt+0xd140>
   1e6e0:	mov	r2, #0
   1e6e4:	b	1e6bc <__assert_fail@plt+0xd158>
   1e6e8:	ldrb	r3, [r7, #4]
   1e6ec:	cmp	r3, #10
   1e6f0:	bne	1e6a4 <__assert_fail@plt+0xd140>
   1e6f4:	mov	r1, r8
   1e6f8:	mov	r0, r7
   1e6fc:	ldr	r2, [sp, #12]
   1e700:	bl	198b4 <__assert_fail@plt+0x8350>
   1e704:	ldrb	r3, [r7, #4]
   1e708:	and	r2, r3, #247	; 0xf7
   1e70c:	cmp	r2, #2
   1e710:	beq	1e6e0 <__assert_fail@plt+0xd17c>
   1e714:	ldr	r2, [sp, #56]	; 0x38
   1e718:	clz	r2, r2
   1e71c:	lsr	r2, r2, #5
   1e720:	cmp	r3, #9
   1e724:	orrne	r2, r2, #1
   1e728:	cmp	r2, #0
   1e72c:	beq	1e6bc <__assert_fail@plt+0xd158>
   1e730:	ldr	r3, [sp, #8]
   1e734:	mov	r2, r7
   1e738:	mov	r1, r9
   1e73c:	mov	r0, r8
   1e740:	ldr	fp, [r5, #84]	; 0x54
   1e744:	str	r3, [r5, #84]	; 0x54
   1e748:	ldr	r3, [sp, #56]	; 0x38
   1e74c:	str	r3, [sp]
   1e750:	mov	r3, sl
   1e754:	str	r6, [sp, #4]
   1e758:	bl	1e4f4 <__assert_fail@plt+0xcf90>
   1e75c:	ldr	r3, [r6]
   1e760:	mov	r2, r0
   1e764:	clz	r0, r0
   1e768:	lsr	r0, r0, #5
   1e76c:	cmp	r3, #0
   1e770:	moveq	r0, #0
   1e774:	cmp	r0, #0
   1e778:	beq	1e6b0 <__assert_fail@plt+0xd14c>
   1e77c:	cmp	r4, #0
   1e780:	beq	1e6a0 <__assert_fail@plt+0xd13c>
   1e784:	mov	r2, #0
   1e788:	ldr	r1, [pc, #8]	; 1e798 <__assert_fail@plt+0xd234>
   1e78c:	mov	r0, r4
   1e790:	bl	15018 <__assert_fail@plt+0x3ab4>
   1e794:	b	1e6a0 <__assert_fail@plt+0xd13c>
   1e798:	andeq	r6, r1, r0, ror #2
   1e79c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7a0:	mov	r8, r3
   1e7a4:	sub	sp, sp, #132	; 0x84
   1e7a8:	mov	r3, #0
   1e7ac:	mov	r6, r0
   1e7b0:	mov	r9, r1
   1e7b4:	mov	r5, r2
   1e7b8:	str	r3, [r0, #8]
   1e7bc:	str	r3, [sp, #24]
   1e7c0:	str	r3, [r0, #24]
   1e7c4:	ldrb	r3, [r0, #28]
   1e7c8:	str	r8, [r0, #12]
   1e7cc:	ldr	r4, [r0]
   1e7d0:	bic	r3, r3, #111	; 0x6f
   1e7d4:	strb	r3, [r0, #28]
   1e7d8:	ldr	r3, [r0, #4]
   1e7dc:	cmp	r3, #159	; 0x9f
   1e7e0:	bhi	1e804 <__assert_fail@plt+0xd2a0>
   1e7e4:	mov	r0, r4
   1e7e8:	mov	r1, #160	; 0xa0
   1e7ec:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1e7f0:	subs	r4, r0, #0
   1e7f4:	beq	1f2f8 <__assert_fail@plt+0xdd94>
   1e7f8:	mov	r3, #160	; 0xa0
   1e7fc:	str	r4, [r6]
   1e800:	str	r3, [r6, #4]
   1e804:	mov	r2, #160	; 0xa0
   1e808:	mov	r1, #0
   1e80c:	mov	r0, r4
   1e810:	str	r2, [r6, #8]
   1e814:	bl	11444 <memset@plt>
   1e818:	mov	r3, #31
   1e81c:	str	r3, [r4, #64]	; 0x40
   1e820:	ldr	r3, [pc, #2780]	; 1f304 <__assert_fail@plt+0xdda0>
   1e824:	cmp	r5, r3
   1e828:	bhi	1e99c <__assert_fail@plt+0xd438>
   1e82c:	add	sl, r5, #1
   1e830:	mov	r7, #1
   1e834:	lsl	r0, sl, #3
   1e838:	str	sl, [r4, #4]
   1e83c:	bl	20eec <__assert_fail@plt+0xf988>
   1e840:	str	r0, [r4]
   1e844:	cmp	r5, r7
   1e848:	lslcs	r7, r7, #1
   1e84c:	bcs	1e844 <__assert_fail@plt+0xd2e0>
   1e850:	mov	r1, r7
   1e854:	mov	r0, #12
   1e858:	sub	r7, r7, #1
   1e85c:	bl	20e98 <__assert_fail@plt+0xf934>
   1e860:	str	r0, [r4, #32]
   1e864:	str	r7, [r4, #68]	; 0x44
   1e868:	bl	11348 <__ctype_get_mb_cur_max@plt>
   1e86c:	str	r0, [r4, #92]	; 0x5c
   1e870:	mov	r0, #14
   1e874:	bl	114ec <nl_langinfo@plt>
   1e878:	ldrb	r3, [r0]
   1e87c:	and	r3, r3, #223	; 0xdf
   1e880:	cmp	r3, #85	; 0x55
   1e884:	bne	1e8d4 <__assert_fail@plt+0xd370>
   1e888:	ldrb	r3, [r0, #1]
   1e88c:	and	r3, r3, #223	; 0xdf
   1e890:	cmp	r3, #84	; 0x54
   1e894:	bne	1e8d4 <__assert_fail@plt+0xd370>
   1e898:	ldrb	r3, [r0, #2]
   1e89c:	and	r3, r3, #223	; 0xdf
   1e8a0:	cmp	r3, #70	; 0x46
   1e8a4:	bne	1e8d4 <__assert_fail@plt+0xd370>
   1e8a8:	ldrb	r3, [r0, #3]
   1e8ac:	ldr	r1, [pc, #2644]	; 1f308 <__assert_fail@plt+0xdda4>
   1e8b0:	cmp	r3, #45	; 0x2d
   1e8b4:	moveq	r3, #4
   1e8b8:	movne	r3, #3
   1e8bc:	add	r0, r0, r3
   1e8c0:	bl	111f8 <strcmp@plt>
   1e8c4:	cmp	r0, #0
   1e8c8:	ldrbeq	r3, [r4, #88]	; 0x58
   1e8cc:	orreq	r3, r3, #4
   1e8d0:	strbeq	r3, [r4, #88]	; 0x58
   1e8d4:	ldrb	r3, [r4, #88]	; 0x58
   1e8d8:	bfc	r3, #3, #1
   1e8dc:	strb	r3, [r4, #88]	; 0x58
   1e8e0:	ldr	r3, [r4, #92]	; 0x5c
   1e8e4:	cmp	r3, #1
   1e8e8:	ble	1e984 <__assert_fail@plt+0xd420>
   1e8ec:	ldrb	r7, [r4, #88]	; 0x58
   1e8f0:	ands	r7, r7, #4
   1e8f4:	ldrne	r3, [pc, #2576]	; 1f30c <__assert_fail@plt+0xdda8>
   1e8f8:	strne	r3, [r4, #60]	; 0x3c
   1e8fc:	bne	1e984 <__assert_fail@plt+0xd420>
   1e900:	mov	r1, #1
   1e904:	mov	r0, #32
   1e908:	bl	20e98 <__assert_fail@plt+0xf934>
   1e90c:	cmp	r0, #0
   1e910:	str	r0, [r4, #60]	; 0x3c
   1e914:	beq	1e99c <__assert_fail@plt+0xd438>
   1e918:	lsl	r2, r7, #3
   1e91c:	mov	fp, #0
   1e920:	add	r3, fp, r2
   1e924:	mov	r0, r3
   1e928:	str	r3, [sp, #12]
   1e92c:	str	r2, [sp, #16]
   1e930:	bl	11450 <btowc@plt>
   1e934:	cmn	r0, #1
   1e938:	ldr	r3, [sp, #12]
   1e93c:	mov	r1, #1
   1e940:	ldrne	lr, [r4, #60]	; 0x3c
   1e944:	ldr	r2, [sp, #16]
   1e948:	ldrne	ip, [lr, r7]
   1e94c:	orrne	ip, ip, r1, lsl fp
   1e950:	strne	ip, [lr, r7]
   1e954:	bics	ip, r3, #127	; 0x7f
   1e958:	bne	1e96c <__assert_fail@plt+0xd408>
   1e95c:	cmp	r0, r3
   1e960:	ldrbne	r3, [r4, #88]	; 0x58
   1e964:	orrne	r3, r3, #8
   1e968:	strbne	r3, [r4, #88]	; 0x58
   1e96c:	add	fp, fp, #1
   1e970:	cmp	fp, #32
   1e974:	bne	1e920 <__assert_fail@plt+0xd3bc>
   1e978:	add	r7, r7, #4
   1e97c:	cmp	r7, #32
   1e980:	bne	1e918 <__assert_fail@plt+0xd3b4>
   1e984:	ldr	r3, [r4]
   1e988:	cmp	r3, #0
   1e98c:	beq	1e99c <__assert_fail@plt+0xd438>
   1e990:	ldr	r3, [r4, #32]
   1e994:	cmp	r3, #0
   1e998:	bne	1e9bc <__assert_fail@plt+0xd458>
   1e99c:	mov	r3, #12
   1e9a0:	str	r3, [sp, #24]
   1e9a4:	mov	r0, r4
   1e9a8:	bl	17c38 <__assert_fail@plt+0x66d4>
   1e9ac:	mov	r3, #0
   1e9b0:	str	r3, [r6]
   1e9b4:	str	r3, [r6, #4]
   1e9b8:	b	1ef70 <__assert_fail@plt+0xda0c>
   1e9bc:	ldr	r2, [pc, #2380]	; 1f310 <__assert_fail@plt+0xddac>
   1e9c0:	mov	r3, #0
   1e9c4:	ldr	r1, [pc, #2376]	; 1f314 <__assert_fail@plt+0xddb0>
   1e9c8:	str	r3, [sp, #24]
   1e9cc:	mov	r3, #1
   1e9d0:	cmp	r2, #0
   1e9d4:	moveq	r3, r2
   1e9d8:	mov	r2, #1
   1e9dc:	cmp	r1, #0
   1e9e0:	moveq	r2, r1
   1e9e4:	orr	r3, r3, r2
   1e9e8:	ands	r3, r3, #255	; 0xff
   1e9ec:	str	r3, [sp, #16]
   1e9f0:	beq	1ea14 <__assert_fail@plt+0xd4b0>
   1e9f4:	mov	r1, #0
   1e9f8:	add	r0, r4, #136	; 0x88
   1e9fc:	bl	1127c <pthread_mutex_init@plt>
   1ea00:	cmp	r0, #0
   1ea04:	bne	1e99c <__assert_fail@plt+0xd438>
   1ea08:	ldr	r3, [sp, #24]
   1ea0c:	cmp	r3, #0
   1ea10:	bne	1e9a4 <__assert_fail@plt+0xd440>
   1ea14:	ldr	r3, [r6, #20]
   1ea18:	and	r7, r8, #4194304	; 0x400000
   1ea1c:	mov	r2, #76	; 0x4c
   1ea20:	mov	r1, #0
   1ea24:	add	r0, sp, #48	; 0x30
   1ea28:	orr	fp, r3, r7
   1ea2c:	str	r3, [sp, #12]
   1ea30:	bl	11444 <memset@plt>
   1ea34:	ldr	r3, [sp, #12]
   1ea38:	str	r9, [sp, #44]	; 0x2c
   1ea3c:	str	r5, [sp, #88]	; 0x58
   1ea40:	str	r5, [sp, #92]	; 0x5c
   1ea44:	str	r5, [sp, #96]	; 0x60
   1ea48:	str	r5, [sp, #100]	; 0x64
   1ea4c:	str	r3, [sp, #108]	; 0x6c
   1ea50:	adds	r3, r7, #0
   1ea54:	movne	r3, #1
   1ea58:	strb	r3, [sp, #116]	; 0x74
   1ea5c:	adds	r3, fp, #0
   1ea60:	movne	r3, #1
   1ea64:	cmp	r5, #0
   1ea68:	strb	r3, [sp, #119]	; 0x77
   1ea6c:	ldr	r3, [r4, #92]	; 0x5c
   1ea70:	str	r3, [sp, #124]	; 0x7c
   1ea74:	ldrb	r3, [r4, #88]	; 0x58
   1ea78:	ubfx	r2, r3, #2, #1
   1ea7c:	ubfx	r3, r3, #3, #1
   1ea80:	strb	r2, [sp, #117]	; 0x75
   1ea84:	strb	r3, [sp, #118]	; 0x76
   1ea88:	bne	1eafc <__assert_fail@plt+0xd598>
   1ea8c:	ldrb	r3, [sp, #119]	; 0x77
   1ea90:	cmp	r3, #0
   1ea94:	ldr	r3, [r4, #92]	; 0x5c
   1ea98:	ldrne	r9, [sp, #48]	; 0x30
   1ea9c:	cmp	r7, #0
   1eaa0:	str	r9, [sp, #48]	; 0x30
   1eaa4:	beq	1ec30 <__assert_fail@plt+0xd6cc>
   1eaa8:	cmp	r3, #1
   1eaac:	ble	1eb68 <__assert_fail@plt+0xd604>
   1eab0:	add	r0, sp, #44	; 0x2c
   1eab4:	bl	15b08 <__assert_fail@plt+0x45a4>
   1eab8:	cmp	r0, #0
   1eabc:	bne	1eb10 <__assert_fail@plt+0xd5ac>
   1eac0:	ldr	r3, [sp, #76]	; 0x4c
   1eac4:	cmp	r5, r3
   1eac8:	ble	1eb10 <__assert_fail@plt+0xd5ac>
   1eacc:	ldr	r3, [sp, #72]	; 0x48
   1ead0:	ldr	r2, [r4, #92]	; 0x5c
   1ead4:	ldr	r1, [sp, #80]	; 0x50
   1ead8:	add	r3, r3, r2
   1eadc:	cmp	r1, r3
   1eae0:	bgt	1eb10 <__assert_fail@plt+0xd5ac>
   1eae4:	lsl	r1, r1, #1
   1eae8:	add	r0, sp, #44	; 0x2c
   1eaec:	bl	1554c <__assert_fail@plt+0x3fe8>
   1eaf0:	cmp	r0, #0
   1eaf4:	beq	1eab0 <__assert_fail@plt+0xd54c>
   1eaf8:	b	1eb10 <__assert_fail@plt+0xd5ac>
   1eafc:	mov	r1, sl
   1eb00:	add	r0, sp, #44	; 0x2c
   1eb04:	bl	1554c <__assert_fail@plt+0x3fe8>
   1eb08:	cmp	r0, #0
   1eb0c:	beq	1ea8c <__assert_fail@plt+0xd528>
   1eb10:	cmp	r0, #0
   1eb14:	str	r0, [sp, #24]
   1eb18:	beq	1eb78 <__assert_fail@plt+0xd614>
   1eb1c:	ldr	r7, [r6]
   1eb20:	ldr	r5, [r7, #56]	; 0x38
   1eb24:	cmp	r5, #0
   1eb28:	bne	1ec68 <__assert_fail@plt+0xd704>
   1eb2c:	mov	r3, #31
   1eb30:	str	r5, [r7, #52]	; 0x34
   1eb34:	str	r5, [r7, #56]	; 0x38
   1eb38:	str	r3, [r7, #64]	; 0x40
   1eb3c:	ldr	r0, [r7, #16]
   1eb40:	bl	13648 <__assert_fail@plt+0x20e4>
   1eb44:	add	r0, sp, #44	; 0x2c
   1eb48:	str	r5, [r7, #16]
   1eb4c:	bl	163e8 <__assert_fail@plt+0x4e84>
   1eb50:	ldr	r3, [sp, #16]
   1eb54:	cmp	r3, #0
   1eb58:	beq	1e9a4 <__assert_fail@plt+0xd440>
   1eb5c:	add	r0, r4, #136	; 0x88
   1eb60:	bl	11210 <pthread_mutex_destroy@plt>
   1eb64:	b	1e9a4 <__assert_fail@plt+0xd440>
   1eb68:	add	r0, sp, #44	; 0x2c
   1eb6c:	bl	15fd8 <__assert_fail@plt+0x4a74>
   1eb70:	mov	r3, #0
   1eb74:	str	r3, [sp, #24]
   1eb78:	ldr	r9, [r6]
   1eb7c:	mov	r5, #0
   1eb80:	orr	r2, r8, #8388608	; 0x800000
   1eb84:	add	r1, sp, #44	; 0x2c
   1eb88:	add	r0, sp, #32
   1eb8c:	str	r5, [r6, #24]
   1eb90:	str	r8, [r9, #128]	; 0x80
   1eb94:	bl	198b4 <__assert_fail@plt+0x8350>
   1eb98:	add	r3, sp, #24
   1eb9c:	add	r2, sp, #32
   1eba0:	str	r5, [sp]
   1eba4:	mov	r1, r6
   1eba8:	add	r0, sp, #44	; 0x2c
   1ebac:	str	r3, [sp, #4]
   1ebb0:	mov	r3, r8
   1ebb4:	bl	1e644 <__assert_fail@plt+0xd0e0>
   1ebb8:	ldr	r2, [sp, #24]
   1ebbc:	mov	sl, r0
   1ebc0:	clz	r0, r0
   1ebc4:	lsr	r0, r0, #5
   1ebc8:	cmp	r2, r5
   1ebcc:	movne	r2, r0
   1ebd0:	moveq	r2, r5
   1ebd4:	cmp	r2, r5
   1ebd8:	bne	1ec7c <__assert_fail@plt+0xd718>
   1ebdc:	mov	r3, #2
   1ebe0:	mov	r1, r2
   1ebe4:	mov	r0, r9
   1ebe8:	bl	1578c <__assert_fail@plt+0x4228>
   1ebec:	cmp	sl, r5
   1ebf0:	mov	r8, r0
   1ebf4:	beq	1ec0c <__assert_fail@plt+0xd6a8>
   1ebf8:	mov	r3, #16
   1ebfc:	mov	r2, r8
   1ec00:	mov	r1, sl
   1ec04:	mov	r0, r9
   1ec08:	bl	1578c <__assert_fail@plt+0x4228>
   1ec0c:	cmp	r0, #0
   1ec10:	cmpne	r8, #0
   1ec14:	ldr	r5, [r6]
   1ec18:	bne	1ec84 <__assert_fail@plt+0xd720>
   1ec1c:	mov	r3, #12
   1ec20:	str	r3, [sp, #24]
   1ec24:	mov	r3, #0
   1ec28:	str	r3, [r4, #52]	; 0x34
   1ec2c:	b	1eb1c <__assert_fail@plt+0xd5b8>
   1ec30:	cmp	r3, #1
   1ec34:	ble	1ec48 <__assert_fail@plt+0xd6e4>
   1ec38:	add	r0, sp, #44	; 0x2c
   1ec3c:	bl	159b4 <__assert_fail@plt+0x4450>
   1ec40:	str	r7, [sp, #24]
   1ec44:	b	1eb78 <__assert_fail@plt+0xd614>
   1ec48:	cmp	fp, #0
   1ec4c:	ldreq	r3, [sp, #80]	; 0x50
   1ec50:	streq	r3, [sp, #72]	; 0x48
   1ec54:	streq	r3, [sp, #76]	; 0x4c
   1ec58:	beq	1ec40 <__assert_fail@plt+0xd6dc>
   1ec5c:	add	r0, sp, #44	; 0x2c
   1ec60:	bl	14edc <__assert_fail@plt+0x3978>
   1ec64:	b	1ec40 <__assert_fail@plt+0xd6dc>
   1ec68:	ldr	r8, [r5]
   1ec6c:	mov	r0, r5
   1ec70:	bl	13648 <__assert_fail@plt+0x20e4>
   1ec74:	mov	r5, r8
   1ec78:	b	1eb24 <__assert_fail@plt+0xd5c0>
   1ec7c:	str	r5, [r4, #52]	; 0x34
   1ec80:	b	1eb1c <__assert_fail@plt+0xd5b8>
   1ec84:	str	r0, [r4, #52]	; 0x34
   1ec88:	mov	r8, #12
   1ec8c:	ldr	r0, [r5, #4]
   1ec90:	lsl	r0, r0, #2
   1ec94:	bl	20eec <__assert_fail@plt+0xf988>
   1ec98:	str	r0, [r5, #12]
   1ec9c:	ldr	r0, [r5, #4]
   1eca0:	lsl	r0, r0, #2
   1eca4:	bl	20eec <__assert_fail@plt+0xf988>
   1eca8:	str	r0, [r5, #16]
   1ecac:	ldr	r0, [r5, #4]
   1ecb0:	mul	r0, r8, r0
   1ecb4:	bl	20eec <__assert_fail@plt+0xf988>
   1ecb8:	str	r0, [r5, #20]
   1ecbc:	ldr	r0, [r5, #4]
   1ecc0:	mul	r0, r8, r0
   1ecc4:	bl	20eec <__assert_fail@plt+0xf988>
   1ecc8:	ldr	r3, [r5, #12]
   1eccc:	str	r0, [r5, #24]
   1ecd0:	cmp	r3, #0
   1ecd4:	bne	1ece4 <__assert_fail@plt+0xd780>
   1ecd8:	mov	r3, #12
   1ecdc:	str	r3, [sp, #24]
   1ece0:	b	1eb1c <__assert_fail@plt+0xd5b8>
   1ece4:	ldr	r3, [r5, #16]
   1ece8:	cmp	r3, #0
   1ecec:	beq	1ecd8 <__assert_fail@plt+0xd774>
   1ecf0:	ldr	r3, [r5, #20]
   1ecf4:	clz	r0, r0
   1ecf8:	lsr	r0, r0, #5
   1ecfc:	cmp	r3, #0
   1ed00:	moveq	r0, #1
   1ed04:	cmp	r0, #0
   1ed08:	str	r0, [sp, #12]
   1ed0c:	bne	1ecd8 <__assert_fail@plt+0xd774>
   1ed10:	ldr	r0, [r6, #24]
   1ed14:	lsl	r0, r0, #2
   1ed18:	bl	20eec <__assert_fail@plt+0xf988>
   1ed1c:	cmp	r0, #0
   1ed20:	str	r0, [r5, #132]	; 0x84
   1ed24:	ldrne	r2, [r6, #24]
   1ed28:	ldrne	r3, [sp, #12]
   1ed2c:	bne	1ee00 <__assert_fail@plt+0xd89c>
   1ed30:	mov	r2, r6
   1ed34:	ldr	r1, [pc, #1500]	; 1f318 <__assert_fail@plt+0xddb4>
   1ed38:	ldr	r0, [r5, #52]	; 0x34
   1ed3c:	bl	15018 <__assert_fail@plt+0x3ab4>
   1ed40:	subs	r8, r0, #0
   1ed44:	bne	1ede8 <__assert_fail@plt+0xd884>
   1ed48:	mov	r2, r5
   1ed4c:	ldr	r1, [pc, #1480]	; 1f31c <__assert_fail@plt+0xddb8>
   1ed50:	ldr	r0, [r5, #52]	; 0x34
   1ed54:	bl	15018 <__assert_fail@plt+0x3ab4>
   1ed58:	subs	r8, r0, #0
   1ed5c:	bne	1ede8 <__assert_fail@plt+0xd884>
   1ed60:	mov	r2, r5
   1ed64:	ldr	r1, [pc, #1460]	; 1f320 <__assert_fail@plt+0xddbc>
   1ed68:	ldr	r0, [r5, #52]	; 0x34
   1ed6c:	bl	174e0 <__assert_fail@plt+0x5f7c>
   1ed70:	mov	r2, r5
   1ed74:	ldr	r1, [pc, #1448]	; 1f324 <__assert_fail@plt+0xddc0>
   1ed78:	ldr	r0, [r5, #52]	; 0x34
   1ed7c:	bl	174e0 <__assert_fail@plt+0x5f7c>
   1ed80:	subs	r8, r0, #0
   1ed84:	bne	1ede8 <__assert_fail@plt+0xd884>
   1ed88:	mov	sl, r8
   1ed8c:	mov	r9, r8
   1ed90:	ldr	r3, [r5, #8]
   1ed94:	cmp	r3, r9
   1ed98:	bne	1edac <__assert_fail@plt+0xd848>
   1ed9c:	cmp	sl, #0
   1eda0:	beq	1ee7c <__assert_fail@plt+0xd918>
   1eda4:	mov	sl, #0
   1eda8:	mov	r9, sl
   1edac:	mov	r3, #12
   1edb0:	mul	fp, r3, r9
   1edb4:	ldr	r3, [r5, #24]
   1edb8:	add	r3, r3, fp
   1edbc:	ldr	r3, [r3, #4]
   1edc0:	cmp	r3, #0
   1edc4:	bne	1ee74 <__assert_fail@plt+0xd910>
   1edc8:	mov	r3, #1
   1edcc:	mov	r2, r9
   1edd0:	mov	r1, r5
   1edd4:	add	r0, sp, #32
   1edd8:	bl	187e0 <__assert_fail@plt+0x727c>
   1eddc:	cmp	r0, #0
   1ede0:	beq	1ee54 <__assert_fail@plt+0xd8f0>
   1ede4:	mov	r8, r0
   1ede8:	cmp	r8, #0
   1edec:	str	r8, [sp, #24]
   1edf0:	beq	1ee98 <__assert_fail@plt+0xd934>
   1edf4:	b	1eb1c <__assert_fail@plt+0xd5b8>
   1edf8:	str	r3, [r0, r3, lsl #2]
   1edfc:	add	r3, r3, #1
   1ee00:	cmp	r3, r2
   1ee04:	bne	1edf8 <__assert_fail@plt+0xd894>
   1ee08:	mov	r2, r5
   1ee0c:	ldr	r1, [pc, #1300]	; 1f328 <__assert_fail@plt+0xddc4>
   1ee10:	ldr	r0, [r5, #52]	; 0x34
   1ee14:	bl	174e0 <__assert_fail@plt+0x5f7c>
   1ee18:	ldr	r2, [r6, #24]
   1ee1c:	mov	r3, #0
   1ee20:	cmp	r3, r2
   1ee24:	bne	1ee3c <__assert_fail@plt+0xd8d8>
   1ee28:	ldr	r0, [r5, #132]	; 0x84
   1ee2c:	bl	13648 <__assert_fail@plt+0x20e4>
   1ee30:	mov	r3, #0
   1ee34:	str	r3, [r5, #132]	; 0x84
   1ee38:	b	1ed30 <__assert_fail@plt+0xd7cc>
   1ee3c:	ldr	r1, [r5, #132]	; 0x84
   1ee40:	ldr	r1, [r1, r3, lsl #2]
   1ee44:	cmp	r1, r3
   1ee48:	bne	1ed30 <__assert_fail@plt+0xd7cc>
   1ee4c:	add	r3, r3, #1
   1ee50:	b	1ee20 <__assert_fail@plt+0xd8bc>
   1ee54:	ldr	r3, [r5, #24]
   1ee58:	add	fp, r3, fp
   1ee5c:	ldr	r3, [fp, #4]
   1ee60:	cmp	r3, #0
   1ee64:	bne	1ee74 <__assert_fail@plt+0xd910>
   1ee68:	ldr	r0, [sp, #40]	; 0x28
   1ee6c:	mov	sl, #1
   1ee70:	bl	13648 <__assert_fail@plt+0x20e4>
   1ee74:	add	r9, r9, #1
   1ee78:	b	1ed90 <__assert_fail@plt+0xd82c>
   1ee7c:	ldrb	r3, [r6, #28]
   1ee80:	tst	r3, #16
   1ee84:	beq	1ef78 <__assert_fail@plt+0xda14>
   1ee88:	ldr	r3, [r5, #76]	; 0x4c
   1ee8c:	cmp	r3, #0
   1ee90:	streq	r3, [sp, #24]
   1ee94:	bne	1ef90 <__assert_fail@plt+0xda2c>
   1ee98:	ldrb	r3, [r4, #88]	; 0x58
   1ee9c:	clz	r7, r7
   1eea0:	lsr	r7, r7, #5
   1eea4:	ands	r7, r7, r3, lsr #2
   1eea8:	beq	1eec0 <__assert_fail@plt+0xd95c>
   1eeac:	ldr	r3, [r6, #20]
   1eeb0:	cmp	r3, #0
   1eeb4:	moveq	r2, r3
   1eeb8:	ldreq	ip, [r4, #8]
   1eebc:	beq	1f0b0 <__assert_fail@plt+0xdb4c>
   1eec0:	mov	r8, #12
   1eec4:	add	r0, sp, #32
   1eec8:	ldr	r1, [r4, #24]
   1eecc:	ldr	r3, [r4, #52]	; 0x34
   1eed0:	ldr	r3, [r3, #12]
   1eed4:	ldr	r3, [r3, #28]
   1eed8:	mla	r1, r8, r3, r1
   1eedc:	str	r3, [r4, #72]	; 0x48
   1eee0:	bl	17788 <__assert_fail@plt+0x6224>
   1eee4:	cmp	r0, #0
   1eee8:	mov	r5, r0
   1eeec:	str	r0, [sp, #28]
   1eef0:	bne	1ef2c <__assert_fail@plt+0xd9c8>
   1eef4:	ldr	r3, [r4, #76]	; 0x4c
   1eef8:	cmp	r3, #0
   1eefc:	movgt	r7, r0
   1ef00:	addgt	r9, sp, #32
   1ef04:	bgt	1f1d4 <__assert_fail@plt+0xdc70>
   1ef08:	mov	r3, #0
   1ef0c:	add	r2, sp, #32
   1ef10:	mov	r1, r4
   1ef14:	add	r0, sp, #28
   1ef18:	bl	17940 <__assert_fail@plt+0x63dc>
   1ef1c:	cmp	r0, #0
   1ef20:	str	r0, [r4, #36]	; 0x24
   1ef24:	bne	1f25c <__assert_fail@plt+0xdcf8>
   1ef28:	ldr	r5, [sp, #28]
   1ef2c:	str	r5, [sp, #24]
   1ef30:	ldr	r7, [r6]
   1ef34:	ldr	r5, [r7, #56]	; 0x38
   1ef38:	cmp	r5, #0
   1ef3c:	bne	1f2e4 <__assert_fail@plt+0xdd80>
   1ef40:	mov	r3, #31
   1ef44:	str	r5, [r7, #52]	; 0x34
   1ef48:	str	r5, [r7, #56]	; 0x38
   1ef4c:	str	r3, [r7, #64]	; 0x40
   1ef50:	ldr	r0, [r7, #16]
   1ef54:	bl	13648 <__assert_fail@plt+0x20e4>
   1ef58:	add	r0, sp, #44	; 0x2c
   1ef5c:	str	r5, [r7, #16]
   1ef60:	bl	163e8 <__assert_fail@plt+0x4e84>
   1ef64:	ldr	r3, [sp, #24]
   1ef68:	cmp	r3, #0
   1ef6c:	bne	1eb50 <__assert_fail@plt+0xd5ec>
   1ef70:	ldr	r0, [sp, #24]
   1ef74:	b	1f2fc <__assert_fail@plt+0xdd98>
   1ef78:	ldr	r3, [r6, #24]
   1ef7c:	cmp	r3, #0
   1ef80:	beq	1ee88 <__assert_fail@plt+0xd924>
   1ef84:	ldrb	r3, [r5, #88]	; 0x58
   1ef88:	tst	r3, #1
   1ef8c:	beq	1ee88 <__assert_fail@plt+0xd924>
   1ef90:	mov	sl, #12
   1ef94:	mul	r0, sl, r9
   1ef98:	bl	20eec <__assert_fail@plt+0xf988>
   1ef9c:	cmp	r0, #0
   1efa0:	str	r0, [r5, #28]
   1efa4:	movne	r3, #0
   1efa8:	movne	ip, r3
   1efac:	beq	1ecd8 <__assert_fail@plt+0xd774>
   1efb0:	ldr	r2, [r5, #8]
   1efb4:	cmp	r2, r3
   1efb8:	bhi	1f000 <__assert_fail@plt+0xda9c>
   1efbc:	mov	r9, #0
   1efc0:	mov	r2, #12
   1efc4:	ldr	r3, [r5, #8]
   1efc8:	cmp	r3, r9
   1efcc:	bls	1ede8 <__assert_fail@plt+0xd884>
   1efd0:	ldr	r3, [r5, #24]
   1efd4:	mul	fp, r2, r9
   1efd8:	mov	sl, #0
   1efdc:	add	r3, r3, fp
   1efe0:	ldr	r3, [r3, #8]
   1efe4:	ldr	r1, [r5, #24]
   1efe8:	add	r1, r1, fp
   1efec:	ldr	r1, [r1, #4]
   1eff0:	cmp	sl, r1
   1eff4:	blt	1f020 <__assert_fail@plt+0xdabc>
   1eff8:	add	r9, r9, #1
   1effc:	b	1efc4 <__assert_fail@plt+0xda60>
   1f000:	ldr	r0, [r5, #28]
   1f004:	mul	r1, sl, r3
   1f008:	add	r3, r3, #1
   1f00c:	add	r2, r0, r1
   1f010:	str	ip, [r0, r1]
   1f014:	str	ip, [r2, #4]
   1f018:	str	ip, [r2, #8]
   1f01c:	b	1efb0 <__assert_fail@plt+0xda4c>
   1f020:	ldr	ip, [r3, sl, lsl #2]
   1f024:	mov	r1, r9
   1f028:	str	r3, [sp, #20]
   1f02c:	ldr	r0, [r5, #28]
   1f030:	mla	r0, r2, ip, r0
   1f034:	bl	155e0 <__assert_fail@plt+0x407c>
   1f038:	cmp	r0, #0
   1f03c:	beq	1f050 <__assert_fail@plt+0xdaec>
   1f040:	add	sl, sl, #1
   1f044:	mov	r2, #12
   1f048:	ldr	r3, [sp, #20]
   1f04c:	b	1efe4 <__assert_fail@plt+0xda80>
   1f050:	mov	r8, #12
   1f054:	b	1ede8 <__assert_fail@plt+0xd884>
   1f058:	ldr	r1, [r4]
   1f05c:	lsl	lr, r2, #3
   1f060:	add	r0, r1, lr
   1f064:	ldrb	r0, [r0, #4]
   1f068:	sub	r0, r0, #1
   1f06c:	cmp	r0, #11
   1f070:	ldrls	pc, [pc, r0, lsl #2]
   1f074:	b	1f158 <__assert_fail@plt+0xdbf4>
   1f078:	strdeq	pc, [r1], -r0
   1f07c:	andeq	pc, r1, ip, lsr #1
   1f080:	andeq	pc, r1, r4, lsr r1	; <UNPREDICTABLE>
   1f084:	andeq	pc, r1, ip, lsr #1
   1f088:	andeq	pc, r1, r8, lsr #1
   1f08c:	andeq	lr, r1, r0, asr #29
   1f090:	andeq	pc, r1, r8, asr r1	; <UNPREDICTABLE>
   1f094:	andeq	pc, r1, ip, lsr #1
   1f098:	andeq	pc, r1, ip, lsr #1
   1f09c:	andeq	pc, r1, ip, lsr #1
   1f0a0:	andeq	pc, r1, ip, lsr #1
   1f0a4:	andeq	pc, r1, r8, lsl #2
   1f0a8:	mov	r3, r7
   1f0ac:	add	r2, r2, #1
   1f0b0:	cmp	r2, ip
   1f0b4:	bne	1f058 <__assert_fail@plt+0xdaf4>
   1f0b8:	ldr	r2, [sp, #12]
   1f0bc:	orr	r0, r2, r3
   1f0c0:	tst	r0, #255	; 0xff
   1f0c4:	bne	1f1a4 <__assert_fail@plt+0xdc40>
   1f0c8:	mov	r2, #1
   1f0cc:	ldr	r1, [r4, #76]	; 0x4c
   1f0d0:	str	r2, [r4, #92]	; 0x5c
   1f0d4:	ldrb	r2, [r4, #88]	; 0x58
   1f0d8:	cmp	r1, #0
   1f0dc:	orrgt	r3, r3, #1
   1f0e0:	and	r2, r2, #251	; 0xfb
   1f0e4:	bfi	r2, r3, #1, #1
   1f0e8:	strb	r2, [r4, #88]	; 0x58
   1f0ec:	b	1eec0 <__assert_fail@plt+0xd95c>
   1f0f0:	ldrsb	r1, [r1, lr]
   1f0f4:	ldr	r0, [sp, #12]
   1f0f8:	cmp	r1, #0
   1f0fc:	movlt	r0, r7
   1f100:	str	r0, [sp, #12]
   1f104:	b	1f0ac <__assert_fail@plt+0xdb48>
   1f108:	ldr	r1, [r1, r2, lsl #3]
   1f10c:	cmp	r1, #32
   1f110:	beq	1f0ac <__assert_fail@plt+0xdb48>
   1f114:	bhi	1f124 <__assert_fail@plt+0xdbc0>
   1f118:	cmp	r1, #16
   1f11c:	beq	1f0ac <__assert_fail@plt+0xdb48>
   1f120:	b	1eec0 <__assert_fail@plt+0xd95c>
   1f124:	cmp	r1, #64	; 0x40
   1f128:	beq	1f0ac <__assert_fail@plt+0xdb48>
   1f12c:	cmp	r1, #128	; 0x80
   1f130:	b	1f11c <__assert_fail@plt+0xdbb8>
   1f134:	ldr	r1, [r1, r2, lsl #3]
   1f138:	add	r0, r1, #12
   1f13c:	add	r1, r1, #28
   1f140:	ldr	lr, [r0, #4]!
   1f144:	cmp	lr, #0
   1f148:	bne	1eec0 <__assert_fail@plt+0xd95c>
   1f14c:	cmp	r1, r0
   1f150:	bne	1f140 <__assert_fail@plt+0xdbdc>
   1f154:	b	1f0ac <__assert_fail@plt+0xdb48>
   1f158:	bl	11540 <abort@plt>
   1f15c:	ldr	r5, [r4]
   1f160:	lsl	lr, r2, #3
   1f164:	add	r1, r5, lr
   1f168:	ldrb	r0, [r1, #4]
   1f16c:	cmp	r0, #1
   1f170:	bne	1f198 <__assert_fail@plt+0xdc34>
   1f174:	ldrsb	r0, [r5, lr]
   1f178:	cmp	r0, #0
   1f17c:	ldrblt	r0, [r1, #6]
   1f180:	bfclt	r0, #5, #1
   1f184:	strblt	r0, [r1, #6]
   1f188:	add	r2, r2, #1
   1f18c:	cmp	r2, ip
   1f190:	bne	1f15c <__assert_fail@plt+0xdbf8>
   1f194:	b	1f0c8 <__assert_fail@plt+0xdb64>
   1f198:	cmp	r0, #5
   1f19c:	strbeq	r7, [r1, #4]
   1f1a0:	b	1f188 <__assert_fail@plt+0xdc24>
   1f1a4:	mov	r2, #0
   1f1a8:	mov	r7, #7
   1f1ac:	b	1f18c <__assert_fail@plt+0xdc28>
   1f1b0:	ldr	r0, [sp, #40]	; 0x28
   1f1b4:	ldr	r1, [r4]
   1f1b8:	ldr	r3, [r0, r7, lsl #2]
   1f1bc:	add	ip, r1, r3, lsl #3
   1f1c0:	ldrb	r2, [ip, #4]
   1f1c4:	cmp	r2, #4
   1f1c8:	moveq	r2, #0
   1f1cc:	beq	1f20c <__assert_fail@plt+0xdca8>
   1f1d0:	add	r7, r7, #1
   1f1d4:	ldr	fp, [sp, #36]	; 0x24
   1f1d8:	cmp	r7, fp
   1f1dc:	blt	1f1b0 <__assert_fail@plt+0xdc4c>
   1f1e0:	b	1ef08 <__assert_fail@plt+0xd9a4>
   1f1e4:	ldr	lr, [r0, r2, lsl #2]
   1f1e8:	add	sl, r1, lr, lsl #3
   1f1ec:	ldrb	sl, [sl, #4]
   1f1f0:	cmp	sl, #9
   1f1f4:	bne	1f208 <__assert_fail@plt+0xdca4>
   1f1f8:	ldr	sl, [r1, lr, lsl #3]
   1f1fc:	ldr	lr, [ip]
   1f200:	cmp	sl, lr
   1f204:	beq	1f218 <__assert_fail@plt+0xdcb4>
   1f208:	add	r2, r2, #1
   1f20c:	cmp	r2, fp
   1f210:	blt	1f1e4 <__assert_fail@plt+0xdc80>
   1f214:	beq	1f1d0 <__assert_fail@plt+0xdc6c>
   1f218:	ldr	r2, [r4, #20]
   1f21c:	mov	r0, r9
   1f220:	mla	r3, r8, r3, r2
   1f224:	ldr	r3, [r3, #8]
   1f228:	ldr	sl, [r3]
   1f22c:	mov	r1, sl
   1f230:	bl	14fa4 <__assert_fail@plt+0x3a40>
   1f234:	cmp	r0, #0
   1f238:	bne	1f1d0 <__assert_fail@plt+0xdc6c>
   1f23c:	ldr	r1, [r4, #24]
   1f240:	mov	r0, r9
   1f244:	mla	r1, r8, sl, r1
   1f248:	bl	18680 <__assert_fail@plt+0x711c>
   1f24c:	subs	r7, r0, #0
   1f250:	beq	1f1d0 <__assert_fail@plt+0xdc6c>
   1f254:	mov	r5, r7
   1f258:	b	1ef2c <__assert_fail@plt+0xd9c8>
   1f25c:	ldrsb	r3, [r0, #52]	; 0x34
   1f260:	cmp	r3, #0
   1f264:	strge	r0, [r4, #40]	; 0x28
   1f268:	strge	r0, [r4, #44]	; 0x2c
   1f26c:	strge	r0, [r4, #48]	; 0x30
   1f270:	bge	1f2d8 <__assert_fail@plt+0xdd74>
   1f274:	mov	r3, #1
   1f278:	add	r2, sp, #32
   1f27c:	mov	r1, r4
   1f280:	add	r0, sp, #28
   1f284:	bl	17940 <__assert_fail@plt+0x63dc>
   1f288:	mov	r3, #2
   1f28c:	add	r2, sp, #32
   1f290:	str	r0, [r4, #40]	; 0x28
   1f294:	mov	r1, r4
   1f298:	add	r0, sp, #28
   1f29c:	bl	17940 <__assert_fail@plt+0x63dc>
   1f2a0:	mov	r3, #6
   1f2a4:	add	r2, sp, #32
   1f2a8:	str	r0, [r4, #44]	; 0x2c
   1f2ac:	mov	r1, r4
   1f2b0:	add	r0, sp, #28
   1f2b4:	bl	17940 <__assert_fail@plt+0x63dc>
   1f2b8:	ldr	r3, [r4, #40]	; 0x28
   1f2bc:	str	r0, [r4, #48]	; 0x30
   1f2c0:	cmp	r3, #0
   1f2c4:	beq	1ef28 <__assert_fail@plt+0xd9c4>
   1f2c8:	ldr	r3, [r4, #44]	; 0x2c
   1f2cc:	cmp	r0, #0
   1f2d0:	cmpne	r3, #0
   1f2d4:	beq	1ef28 <__assert_fail@plt+0xd9c4>
   1f2d8:	ldr	r0, [sp, #40]	; 0x28
   1f2dc:	bl	13648 <__assert_fail@plt+0x20e4>
   1f2e0:	b	1ef2c <__assert_fail@plt+0xd9c8>
   1f2e4:	ldr	r8, [r5]
   1f2e8:	mov	r0, r5
   1f2ec:	bl	13648 <__assert_fail@plt+0x20e4>
   1f2f0:	mov	r5, r8
   1f2f4:	b	1ef38 <__assert_fail@plt+0xd9d4>
   1f2f8:	mov	r0, #12
   1f2fc:	add	sp, sp, #132	; 0x84
   1f300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f304:	beq	feac9db0 <optarg@@GLIBC_2.4+0xfea96be8>
   1f308:	andeq	r2, r2, pc, lsr #11
   1f30c:	andeq	r2, r2, r8, lsl #7
	...
   1f318:			; <UNDEFINED> instruction: 0x000158bc
   1f31c:			; <UNDEFINED> instruction: 0x00017bb4
   1f320:	muleq	r1, r0, r4
   1f324:	ldrdeq	r6, [r1], -ip
   1f328:	strdeq	r7, [r1], -r8
   1f32c:	ldr	r3, [pc, #92]	; 1f390 <__assert_fail@plt+0xde2c>
   1f330:	mov	ip, r2
   1f334:	push	{r4, lr}
   1f338:	ldrb	r2, [r2, #28]
   1f33c:	ldr	r3, [r3]
   1f340:	ubfx	lr, r3, #25, #1
   1f344:	bfi	r2, lr, #4, #1
   1f348:	mvn	r2, r2, lsl #25
   1f34c:	mvn	r2, r2, lsr #25
   1f350:	strb	r2, [ip, #28]
   1f354:	mov	r2, r1
   1f358:	mov	r1, r0
   1f35c:	mov	r0, ip
   1f360:	bl	1e79c <__assert_fail@plt+0xd238>
   1f364:	subs	r2, r0, #0
   1f368:	popeq	{r4, pc}
   1f36c:	mov	r0, #0
   1f370:	pop	{r4, lr}
   1f374:	ldr	r3, [pc, #24]	; 1f394 <__assert_fail@plt+0xde30>
   1f378:	add	r1, r3, #32
   1f37c:	add	r3, r3, r2, lsl #2
   1f380:	mov	r2, #5
   1f384:	ldr	r3, [r3, #416]	; 0x1a0
   1f388:	add	r1, r1, r3
   1f38c:	b	112d0 <dcgettext@plt>
   1f390:	strdeq	r3, [r3], -ip
   1f394:	andeq	r2, r2, r8, lsl #7
   1f398:	ldr	r3, [pc, #12]	; 1f3ac <__assert_fail@plt+0xde48>
   1f39c:	ldr	r2, [r3]
   1f3a0:	str	r0, [r3]
   1f3a4:	mov	r0, r2
   1f3a8:	bx	lr
   1f3ac:	strdeq	r3, [r3], -ip
   1f3b0:	push	{r4, r5, r6, lr}
   1f3b4:	mov	r2, #256	; 0x100
   1f3b8:	mov	r4, r0
   1f3bc:	mov	r1, #0
   1f3c0:	ldr	r5, [r0]
   1f3c4:	ldr	r6, [r0, #16]
   1f3c8:	mov	r0, r6
   1f3cc:	bl	11444 <memset@plt>
   1f3d0:	mov	r2, r6
   1f3d4:	mov	r0, r4
   1f3d8:	ldr	r1, [r5, #36]	; 0x24
   1f3dc:	bl	17f00 <__assert_fail@plt+0x699c>
   1f3e0:	ldr	r3, [r5, #36]	; 0x24
   1f3e4:	ldr	r1, [r5, #40]	; 0x28
   1f3e8:	cmp	r3, r1
   1f3ec:	beq	1f3fc <__assert_fail@plt+0xde98>
   1f3f0:	mov	r2, r6
   1f3f4:	mov	r0, r4
   1f3f8:	bl	17f00 <__assert_fail@plt+0x699c>
   1f3fc:	ldr	r3, [r5, #36]	; 0x24
   1f400:	ldr	r1, [r5, #44]	; 0x2c
   1f404:	cmp	r3, r1
   1f408:	beq	1f418 <__assert_fail@plt+0xdeb4>
   1f40c:	mov	r2, r6
   1f410:	mov	r0, r4
   1f414:	bl	17f00 <__assert_fail@plt+0x699c>
   1f418:	ldr	r3, [r5, #36]	; 0x24
   1f41c:	ldr	r1, [r5, #48]	; 0x30
   1f420:	cmp	r3, r1
   1f424:	beq	1f434 <__assert_fail@plt+0xded0>
   1f428:	mov	r2, r6
   1f42c:	mov	r0, r4
   1f430:	bl	17f00 <__assert_fail@plt+0x699c>
   1f434:	ldrb	r3, [r4, #28]
   1f438:	mov	r0, #0
   1f43c:	orr	r3, r3, #8
   1f440:	strb	r3, [r4, #28]
   1f444:	pop	{r4, r5, r6, pc}
   1f448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f44c:	sub	sp, sp, #44	; 0x2c
   1f450:	cmp	r3, r2
   1f454:	ldr	lr, [r0]
   1f458:	ldr	ip, [sp, #80]	; 0x50
   1f45c:	ldr	r4, [sp, #88]	; 0x58
   1f460:	str	lr, [sp, #24]
   1f464:	movle	lr, #0
   1f468:	movgt	lr, #1
   1f46c:	orrs	lr, lr, r3, lsr #31
   1f470:	add	r6, r3, ip
   1f474:	mvnne	r4, #0
   1f478:	bne	1f5e4 <__assert_fail@plt+0xe080>
   1f47c:	cmp	r6, r2
   1f480:	bgt	1f5f0 <__assert_fail@plt+0xe08c>
   1f484:	cmp	ip, #0
   1f488:	cmpge	r3, r6
   1f48c:	movgt	lr, #1
   1f490:	movle	lr, #0
   1f494:	bgt	1f5f0 <__assert_fail@plt+0xe08c>
   1f498:	cmp	r6, #0
   1f49c:	movlt	r6, lr
   1f4a0:	blt	1f4b8 <__assert_fail@plt+0xdf54>
   1f4a4:	cmp	r3, r6
   1f4a8:	movgt	lr, #0
   1f4ac:	movle	lr, #1
   1f4b0:	ands	ip, lr, ip, lsr #31
   1f4b4:	movne	r6, #0
   1f4b8:	ldr	lr, [pc, #672]	; 1f760 <__assert_fail@plt+0xe1fc>
   1f4bc:	mov	ip, #1
   1f4c0:	mov	r8, r3
   1f4c4:	mov	r9, r1
   1f4c8:	mov	r7, r0
   1f4cc:	str	r2, [sp, #32]
   1f4d0:	ldr	r5, [pc, #652]	; 1f764 <__assert_fail@plt+0xe200>
   1f4d4:	cmp	lr, #0
   1f4d8:	moveq	ip, lr
   1f4dc:	mov	lr, #1
   1f4e0:	cmp	r5, #0
   1f4e4:	moveq	lr, r5
   1f4e8:	orr	ip, ip, lr
   1f4ec:	ands	r3, ip, #255	; 0xff
   1f4f0:	str	r3, [sp, #28]
   1f4f4:	beq	1f504 <__assert_fail@plt+0xdfa0>
   1f4f8:	ldr	r3, [sp, #24]
   1f4fc:	add	r0, r3, #136	; 0x88
   1f500:	bl	1124c <pthread_mutex_lock@plt>
   1f504:	ldrb	r2, [r7, #28]
   1f508:	cmp	r6, r8
   1f50c:	ubfx	fp, r2, #5, #2
   1f510:	ble	1f530 <__assert_fail@plt+0xdfcc>
   1f514:	ldr	r1, [r7, #16]
   1f518:	cmp	r1, #0
   1f51c:	beq	1f530 <__assert_fail@plt+0xdfcc>
   1f520:	tst	r2, #8
   1f524:	bne	1f530 <__assert_fail@plt+0xdfcc>
   1f528:	mov	r0, r7
   1f52c:	bl	1f3b0 <__assert_fail@plt+0xde4c>
   1f530:	ldrb	r1, [r7, #28]
   1f534:	ubfx	r2, r1, #4, #1
   1f538:	cmp	r4, #0
   1f53c:	orreq	r2, r2, #1
   1f540:	ands	r2, r2, #255	; 0xff
   1f544:	movne	r5, #1
   1f548:	movne	r4, #0
   1f54c:	bne	1f578 <__assert_fail@plt+0xe014>
   1f550:	and	r1, r1, #6
   1f554:	ldr	r5, [r7, #24]
   1f558:	cmp	r1, #4
   1f55c:	bne	1f5f8 <__assert_fail@plt+0xe094>
   1f560:	ldr	r1, [r4]
   1f564:	cmp	r5, r1
   1f568:	bcc	1f5f8 <__assert_fail@plt+0xe094>
   1f56c:	subs	r5, r1, #0
   1f570:	movle	r5, #1
   1f574:	movle	r4, r2
   1f578:	lsl	r0, r5, #3
   1f57c:	bl	20eec <__assert_fail@plt+0xf988>
   1f580:	subs	sl, r0, #0
   1f584:	mvneq	r4, #1
   1f588:	beq	1f5cc <__assert_fail@plt+0xe068>
   1f58c:	ldr	r2, [sp, #84]	; 0x54
   1f590:	mov	r1, r9
   1f594:	mov	r3, r8
   1f598:	mov	r0, r7
   1f59c:	str	r6, [sp]
   1f5a0:	stmib	sp, {r2, r5, sl, fp}
   1f5a4:	ldr	r2, [sp, #32]
   1f5a8:	bl	1be54 <__assert_fail@plt+0xa8f0>
   1f5ac:	subs	r9, r0, #0
   1f5b0:	beq	1f600 <__assert_fail@plt+0xe09c>
   1f5b4:	cmp	r9, #1
   1f5b8:	mvneq	r4, #0
   1f5bc:	beq	1f5c4 <__assert_fail@plt+0xe060>
   1f5c0:	mvn	r4, #1
   1f5c4:	mov	r0, sl
   1f5c8:	bl	13648 <__assert_fail@plt+0x20e4>
   1f5cc:	ldr	r3, [sp, #28]
   1f5d0:	cmp	r3, #0
   1f5d4:	beq	1f5e4 <__assert_fail@plt+0xe080>
   1f5d8:	ldr	r3, [sp, #24]
   1f5dc:	add	r0, r3, #136	; 0x88
   1f5e0:	bl	11198 <pthread_mutex_unlock@plt>
   1f5e4:	mov	r0, r4
   1f5e8:	add	sp, sp, #44	; 0x2c
   1f5ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5f0:	mov	r6, r2
   1f5f4:	b	1f4b8 <__assert_fail@plt+0xdf54>
   1f5f8:	add	r5, r5, #1
   1f5fc:	b	1f578 <__assert_fail@plt+0xe014>
   1f600:	cmp	r4, #0
   1f604:	bne	1f620 <__assert_fail@plt+0xe0bc>
   1f608:	ldrb	r3, [sp, #92]	; 0x5c
   1f60c:	ldr	r4, [sl]
   1f610:	cmp	r3, #0
   1f614:	ldrne	r4, [sl, #4]
   1f618:	subne	r4, r4, r8
   1f61c:	b	1f5c4 <__assert_fail@plt+0xe060>
   1f620:	ldrb	r6, [r7, #28]
   1f624:	add	fp, r5, #1
   1f628:	ubfx	r6, r6, #1, #2
   1f62c:	cmp	r6, #0
   1f630:	bne	1f698 <__assert_fail@plt+0xe134>
   1f634:	lsl	r6, fp, #2
   1f638:	mov	r0, r6
   1f63c:	bl	20eec <__assert_fail@plt+0xf988>
   1f640:	cmp	r0, #0
   1f644:	str	r0, [r4, #4]
   1f648:	bne	1f66c <__assert_fail@plt+0xe108>
   1f64c:	mov	r6, #0
   1f650:	ldrb	r3, [r7, #28]
   1f654:	bfi	r3, r6, #1, #2
   1f658:	strb	r3, [r7, #28]
   1f65c:	and	r3, r3, #6
   1f660:	cmp	r3, #0
   1f664:	bne	1f608 <__assert_fail@plt+0xe0a4>
   1f668:	b	1f5c0 <__assert_fail@plt+0xe05c>
   1f66c:	mov	r0, r6
   1f670:	bl	20eec <__assert_fail@plt+0xf988>
   1f674:	cmp	r0, #0
   1f678:	mov	r6, r0
   1f67c:	str	r0, [r4, #8]
   1f680:	movne	r6, #1
   1f684:	strne	fp, [r4]
   1f688:	bne	1f708 <__assert_fail@plt+0xe1a4>
   1f68c:	ldr	r0, [r4, #4]
   1f690:	bl	13648 <__assert_fail@plt+0x20e4>
   1f694:	b	1f650 <__assert_fail@plt+0xe0ec>
   1f698:	cmp	r6, #1
   1f69c:	movne	r6, #2
   1f6a0:	bne	1f708 <__assert_fail@plt+0xe1a4>
   1f6a4:	ldr	r3, [r4]
   1f6a8:	cmp	r3, fp
   1f6ac:	bcs	1f708 <__assert_fail@plt+0xe1a4>
   1f6b0:	lsl	r2, fp, #2
   1f6b4:	ldr	r0, [r4, #4]
   1f6b8:	mov	r1, r2
   1f6bc:	str	r2, [sp, #36]	; 0x24
   1f6c0:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1f6c4:	subs	r3, r0, #0
   1f6c8:	str	r3, [sp, #32]
   1f6cc:	beq	1f64c <__assert_fail@plt+0xe0e8>
   1f6d0:	ldr	r2, [sp, #36]	; 0x24
   1f6d4:	ldr	r0, [r4, #8]
   1f6d8:	mov	r1, r2
   1f6dc:	bl	20f18 <__assert_fail@plt+0xf9b4>
   1f6e0:	ldr	r3, [sp, #32]
   1f6e4:	subs	r2, r0, #0
   1f6e8:	strne	fp, [r4]
   1f6ec:	strne	r2, [r4, #8]
   1f6f0:	strne	r3, [r4, #4]
   1f6f4:	bne	1f708 <__assert_fail@plt+0xe1a4>
   1f6f8:	mov	r0, r3
   1f6fc:	str	r2, [sp, #32]
   1f700:	bl	13648 <__assert_fail@plt+0x20e4>
   1f704:	b	1f64c <__assert_fail@plt+0xe0e8>
   1f708:	add	r3, sl, #4
   1f70c:	cmp	r5, r9
   1f710:	bgt	1f740 <__assert_fail@plt+0xe1dc>
   1f714:	bic	r5, r5, r5, asr #31
   1f718:	mvn	r3, #0
   1f71c:	ldr	r2, [r4]
   1f720:	cmp	r5, r2
   1f724:	bcs	1f650 <__assert_fail@plt+0xe0ec>
   1f728:	ldr	r2, [r4, #8]
   1f72c:	str	r3, [r2, r5, lsl #2]
   1f730:	ldr	r2, [r4, #4]
   1f734:	str	r3, [r2, r5, lsl #2]
   1f738:	add	r5, r5, #1
   1f73c:	b	1f71c <__assert_fail@plt+0xe1b8>
   1f740:	ldr	r1, [sl, r9, lsl #3]
   1f744:	ldr	r2, [r4, #4]
   1f748:	str	r1, [r2, r9, lsl #2]
   1f74c:	ldr	r1, [r3, r9, lsl #3]
   1f750:	ldr	r2, [r4, #8]
   1f754:	str	r1, [r2, r9, lsl #2]
   1f758:	add	r9, r9, #1
   1f75c:	b	1f70c <__assert_fail@plt+0xe1a8>
	...
   1f768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f76c:	sub	sp, sp, #20
   1f770:	mov	sl, r3
   1f774:	ldr	r5, [sp, #56]	; 0x38
   1f778:	ldr	r9, [sp, #72]	; 0x48
   1f77c:	orr	r3, r5, r2
   1f780:	orrs	r3, r3, r9
   1f784:	bpl	1f798 <__assert_fail@plt+0xe234>
   1f788:	mvn	r4, #1
   1f78c:	mov	r0, r4
   1f790:	add	sp, sp, #20
   1f794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f798:	adds	r8, r2, r5
   1f79c:	mov	r4, r2
   1f7a0:	bvs	1f788 <__assert_fail@plt+0xe224>
   1f7a4:	cmp	r5, #0
   1f7a8:	mov	fp, r0
   1f7ac:	mov	r7, r1
   1f7b0:	beq	1f834 <__assert_fail@plt+0xe2d0>
   1f7b4:	cmp	r2, #0
   1f7b8:	moveq	r7, sl
   1f7bc:	moveq	r6, r2
   1f7c0:	beq	1f7f4 <__assert_fail@plt+0xe290>
   1f7c4:	mov	r0, r8
   1f7c8:	bl	20eec <__assert_fail@plt+0xf988>
   1f7cc:	subs	r6, r0, #0
   1f7d0:	beq	1f788 <__assert_fail@plt+0xe224>
   1f7d4:	mov	r1, r7
   1f7d8:	mov	r2, r4
   1f7dc:	bl	11264 <memcpy@plt>
   1f7e0:	mov	r7, r6
   1f7e4:	mov	r2, r5
   1f7e8:	mov	r1, sl
   1f7ec:	add	r0, r6, r4
   1f7f0:	bl	11264 <memcpy@plt>
   1f7f4:	ldrb	r3, [sp, #76]	; 0x4c
   1f7f8:	mov	r2, r8
   1f7fc:	mov	r1, r7
   1f800:	mov	r0, fp
   1f804:	str	r9, [sp, #4]
   1f808:	str	r3, [sp, #12]
   1f80c:	ldr	r3, [sp, #68]	; 0x44
   1f810:	str	r3, [sp, #8]
   1f814:	ldr	r3, [sp, #64]	; 0x40
   1f818:	str	r3, [sp]
   1f81c:	ldr	r3, [sp, #60]	; 0x3c
   1f820:	bl	1f448 <__assert_fail@plt+0xdee4>
   1f824:	mov	r4, r0
   1f828:	mov	r0, r6
   1f82c:	bl	13648 <__assert_fail@plt+0x20e4>
   1f830:	b	1f78c <__assert_fail@plt+0xe228>
   1f834:	mov	r6, r5
   1f838:	b	1f7f4 <__assert_fail@plt+0xe290>
   1f83c:	push	{r4, r5, r6, r7, r8, lr}
   1f840:	mov	r3, #0
   1f844:	tst	r2, #1
   1f848:	mov	r4, r0
   1f84c:	mov	r7, r1
   1f850:	mov	r6, r2
   1f854:	ldr	r5, [pc, #184]	; 1f914 <__assert_fail@plt+0xe3b0>
   1f858:	str	r3, [r0]
   1f85c:	str	r3, [r0, #4]
   1f860:	str	r3, [r0, #8]
   1f864:	mov	r0, #256	; 0x100
   1f868:	ldr	r8, [pc, #168]	; 1f918 <__assert_fail@plt+0xe3b4>
   1f86c:	movne	r8, r5
   1f870:	bl	20eec <__assert_fail@plt+0xf988>
   1f874:	cmp	r0, #0
   1f878:	str	r0, [r4, #16]
   1f87c:	moveq	r5, #12
   1f880:	beq	1f8f4 <__assert_fail@plt+0xe390>
   1f884:	ldrb	r3, [r4, #28]
   1f888:	ands	r2, r6, #4
   1f88c:	lsl	r5, r6, #21
   1f890:	movne	r2, #1
   1f894:	ubfx	r6, r6, #3, #1
   1f898:	mov	r0, r7
   1f89c:	and	r5, r5, #4194304	; 0x400000
   1f8a0:	orr	r5, r5, r8
   1f8a4:	bicne	r5, r5, #64	; 0x40
   1f8a8:	bfi	r3, r2, #7, #1
   1f8ac:	orrne	r5, r5, #256	; 0x100
   1f8b0:	bfi	r3, r6, #4, #1
   1f8b4:	strb	r3, [r4, #28]
   1f8b8:	mov	r3, #0
   1f8bc:	str	r3, [r4, #20]
   1f8c0:	bl	113fc <strlen@plt>
   1f8c4:	mov	r2, r0
   1f8c8:	mov	r3, r5
   1f8cc:	mov	r1, r7
   1f8d0:	mov	r0, r4
   1f8d4:	bl	1e79c <__assert_fail@plt+0xd238>
   1f8d8:	cmp	r0, #16
   1f8dc:	mov	r5, r0
   1f8e0:	beq	1f8fc <__assert_fail@plt+0xe398>
   1f8e4:	cmp	r0, #0
   1f8e8:	bne	1f900 <__assert_fail@plt+0xe39c>
   1f8ec:	mov	r0, r4
   1f8f0:	bl	1f3b0 <__assert_fail@plt+0xde4c>
   1f8f4:	mov	r0, r5
   1f8f8:	pop	{r4, r5, r6, r7, r8, pc}
   1f8fc:	mov	r5, #8
   1f900:	ldr	r0, [r4, #16]
   1f904:	bl	13648 <__assert_fail@plt+0x20e4>
   1f908:	mov	r3, #0
   1f90c:	str	r3, [r4, #16]
   1f910:	b	1f8f4 <__assert_fail@plt+0xe390>
   1f914:	strdeq	fp, [r3], -ip
   1f918:	smlabteq	r1, r6, r2, r0
   1f91c:	cmp	r0, #16
   1f920:	push	{r4, r5, r6, r7, r8, lr}
   1f924:	bls	1f92c <__assert_fail@plt+0xe3c8>
   1f928:	bl	11540 <abort@plt>
   1f92c:	mov	r4, r3
   1f930:	ldr	r3, [pc, #88]	; 1f990 <__assert_fail@plt+0xe42c>
   1f934:	mov	r6, r2
   1f938:	mov	r2, #5
   1f93c:	add	r1, r3, #32
   1f940:	add	r3, r3, r0, lsl #2
   1f944:	mov	r0, #0
   1f948:	ldr	r3, [r3, #416]	; 0x1a0
   1f94c:	add	r1, r1, r3
   1f950:	bl	112d0 <dcgettext@plt>
   1f954:	mov	r7, r0
   1f958:	bl	113fc <strlen@plt>
   1f95c:	cmp	r4, #0
   1f960:	add	r5, r0, #1
   1f964:	beq	1f988 <__assert_fail@plt+0xe424>
   1f968:	cmp	r5, r4
   1f96c:	mov	r1, r7
   1f970:	subhi	r2, r4, #1
   1f974:	movhi	r3, #0
   1f978:	movls	r2, r5
   1f97c:	mov	r0, r6
   1f980:	strbhi	r3, [r6, r2]
   1f984:	bl	11264 <memcpy@plt>
   1f988:	mov	r0, r5
   1f98c:	pop	{r4, r5, r6, r7, r8, pc}
   1f990:	andeq	r2, r2, r8, lsl #7
   1f994:	push	{r4, r5, r6, lr}
   1f998:	mov	r4, r0
   1f99c:	ldr	r5, [r0]
   1f9a0:	cmp	r5, #0
   1f9a4:	beq	1f9e4 <__assert_fail@plt+0xe480>
   1f9a8:	ldr	r2, [pc, #92]	; 1fa0c <__assert_fail@plt+0xe4a8>
   1f9ac:	mov	r3, #1
   1f9b0:	ldr	r1, [pc, #88]	; 1fa10 <__assert_fail@plt+0xe4ac>
   1f9b4:	cmp	r2, #0
   1f9b8:	moveq	r3, r2
   1f9bc:	mov	r2, #1
   1f9c0:	cmp	r1, #0
   1f9c4:	moveq	r2, r1
   1f9c8:	orr	r3, r3, r2
   1f9cc:	tst	r3, #1
   1f9d0:	beq	1f9dc <__assert_fail@plt+0xe478>
   1f9d4:	add	r0, r5, #136	; 0x88
   1f9d8:	bl	11210 <pthread_mutex_destroy@plt>
   1f9dc:	mov	r0, r5
   1f9e0:	bl	17c38 <__assert_fail@plt+0x66d4>
   1f9e4:	mov	r5, #0
   1f9e8:	ldr	r0, [r4, #16]
   1f9ec:	str	r5, [r4]
   1f9f0:	str	r5, [r4, #4]
   1f9f4:	bl	13648 <__assert_fail@plt+0x20e4>
   1f9f8:	str	r5, [r4, #16]
   1f9fc:	ldr	r0, [r4, #20]
   1fa00:	bl	13648 <__assert_fail@plt+0x20e4>
   1fa04:	str	r5, [r4, #20]
   1fa08:	pop	{r4, r5, r6, pc}
	...
   1fa14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa18:	sub	sp, sp, #36	; 0x24
   1fa1c:	ldr	r9, [sp, #72]	; 0x48
   1fa20:	bics	ip, r9, #7
   1fa24:	movne	r0, #2
   1fa28:	bne	1faec <__assert_fail@plt+0xe588>
   1fa2c:	ands	fp, r9, #4
   1fa30:	mov	r8, r3
   1fa34:	str	r2, [sp, #28]
   1fa38:	mov	r7, r1
   1fa3c:	mov	r6, r0
   1fa40:	ldrne	fp, [r3]
   1fa44:	ldrne	r5, [r3, #4]
   1fa48:	bne	1fa58 <__assert_fail@plt+0xe4f4>
   1fa4c:	mov	r0, r1
   1fa50:	bl	113fc <strlen@plt>
   1fa54:	mov	r5, r0
   1fa58:	ldr	r2, [pc, #148]	; 1faf4 <__assert_fail@plt+0xe590>
   1fa5c:	mov	r4, #1
   1fa60:	ldr	r1, [pc, #144]	; 1faf8 <__assert_fail@plt+0xe594>
   1fa64:	ldr	sl, [r6]
   1fa68:	cmp	r2, #0
   1fa6c:	moveq	r4, r2
   1fa70:	mov	r2, #1
   1fa74:	cmp	r1, #0
   1fa78:	moveq	r2, r1
   1fa7c:	orr	r4, r4, r2
   1fa80:	ands	r4, r4, #255	; 0xff
   1fa84:	beq	1fa90 <__assert_fail@plt+0xe52c>
   1fa88:	add	r0, sl, #136	; 0x88
   1fa8c:	bl	1124c <pthread_mutex_lock@plt>
   1fa90:	ldrb	r2, [r6, #28]
   1fa94:	mov	r1, r7
   1fa98:	mov	r0, r6
   1fa9c:	str	r5, [sp]
   1faa0:	str	r5, [sp, #4]
   1faa4:	str	r9, [sp, #16]
   1faa8:	tst	r2, #16
   1faac:	ldreq	r3, [sp, #28]
   1fab0:	movne	r2, #0
   1fab4:	streq	r8, [sp, #12]
   1fab8:	strne	r2, [sp, #8]
   1fabc:	strne	r2, [sp, #12]
   1fac0:	mov	r2, r5
   1fac4:	streq	r3, [sp, #8]
   1fac8:	mov	r3, fp
   1facc:	bl	1be54 <__assert_fail@plt+0xa8f0>
   1fad0:	cmp	r4, #0
   1fad4:	mov	r5, r0
   1fad8:	beq	1fae4 <__assert_fail@plt+0xe580>
   1fadc:	add	r0, sl, #136	; 0x88
   1fae0:	bl	11198 <pthread_mutex_unlock@plt>
   1fae4:	adds	r0, r5, #0
   1fae8:	movne	r0, #1
   1faec:	add	sp, sp, #36	; 0x24
   1faf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1fafc:	mov	ip, #1
   1fb00:	push	{r0, r1, r2, r3, r4, lr}
   1fb04:	str	r2, [sp, #4]
   1fb08:	str	ip, [sp, #12]
   1fb0c:	ldr	ip, [sp, #24]
   1fb10:	str	ip, [sp, #8]
   1fb14:	mov	ip, #0
   1fb18:	str	ip, [sp]
   1fb1c:	bl	1f448 <__assert_fail@plt+0xdee4>
   1fb20:	add	sp, sp, #20
   1fb24:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb28:	mov	ip, #0
   1fb2c:	push	{r0, r1, r2, r3, r4, lr}
   1fb30:	str	r2, [sp, #4]
   1fb34:	str	ip, [sp, #12]
   1fb38:	ldr	ip, [sp, #28]
   1fb3c:	str	ip, [sp, #8]
   1fb40:	ldr	ip, [sp, #24]
   1fb44:	str	ip, [sp]
   1fb48:	bl	1f448 <__assert_fail@plt+0xdee4>
   1fb4c:	add	sp, sp, #20
   1fb50:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb54:	mov	ip, #1
   1fb58:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fb5c:	str	ip, [sp, #20]
   1fb60:	ldr	ip, [sp, #44]	; 0x2c
   1fb64:	str	ip, [sp, #16]
   1fb68:	ldr	ip, [sp, #40]	; 0x28
   1fb6c:	str	ip, [sp, #12]
   1fb70:	mov	ip, #0
   1fb74:	str	ip, [sp, #8]
   1fb78:	ldr	ip, [sp, #36]	; 0x24
   1fb7c:	str	ip, [sp, #4]
   1fb80:	ldr	ip, [sp, #32]
   1fb84:	str	ip, [sp]
   1fb88:	bl	1f768 <__assert_fail@plt+0xe204>
   1fb8c:	add	sp, sp, #28
   1fb90:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb94:	mov	ip, #0
   1fb98:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fb9c:	str	ip, [sp, #20]
   1fba0:	ldr	ip, [sp, #48]	; 0x30
   1fba4:	str	ip, [sp, #16]
   1fba8:	ldr	ip, [sp, #44]	; 0x2c
   1fbac:	str	ip, [sp, #12]
   1fbb0:	ldr	ip, [sp, #40]	; 0x28
   1fbb4:	str	ip, [sp, #8]
   1fbb8:	ldr	ip, [sp, #36]	; 0x24
   1fbbc:	str	ip, [sp, #4]
   1fbc0:	ldr	ip, [sp, #32]
   1fbc4:	str	ip, [sp]
   1fbc8:	bl	1f768 <__assert_fail@plt+0xe204>
   1fbcc:	add	sp, sp, #28
   1fbd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fbd4:	cmp	r2, #0
   1fbd8:	ldrb	ip, [r0, #28]
   1fbdc:	beq	1fc00 <__assert_fail@plt+0xe69c>
   1fbe0:	push	{lr}		; (str lr, [sp, #-4]!)
   1fbe4:	mov	lr, #1
   1fbe8:	bfi	ip, lr, #1, #2
   1fbec:	strb	ip, [r0, #28]
   1fbf0:	strd	r2, [r1]
   1fbf4:	ldr	r3, [sp, #4]
   1fbf8:	str	r3, [r1, #8]
   1fbfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc00:	bfi	ip, r2, #1, #2
   1fc04:	strb	ip, [r0, #28]
   1fc08:	str	r2, [r1]
   1fc0c:	str	r2, [r1, #4]
   1fc10:	str	r2, [r1, #8]
   1fc14:	bx	lr
   1fc18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fc1c:	mov	r7, r0
   1fc20:	mov	r8, r1
   1fc24:	mov	r9, r2
   1fc28:	ldr	r5, [pc, #80]	; 1fc80 <__assert_fail@plt+0xe71c>
   1fc2c:	mov	r2, r9
   1fc30:	mov	r1, r8
   1fc34:	mov	r0, r7
   1fc38:	bl	11204 <read@plt>
   1fc3c:	subs	r6, r0, #0
   1fc40:	bge	1fc70 <__assert_fail@plt+0xe70c>
   1fc44:	bl	11414 <__errno_location@plt>
   1fc48:	ldr	r3, [r0]
   1fc4c:	cmp	r3, #4
   1fc50:	beq	1fc2c <__assert_fail@plt+0xe6c8>
   1fc54:	cmp	r9, r5
   1fc58:	movls	r4, #0
   1fc5c:	movhi	r4, #1
   1fc60:	cmp	r3, #22
   1fc64:	movne	r4, #0
   1fc68:	cmp	r4, #0
   1fc6c:	bne	1fc78 <__assert_fail@plt+0xe714>
   1fc70:	mov	r0, r6
   1fc74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fc78:	mov	r9, r5
   1fc7c:	b	1fc2c <__assert_fail@plt+0xe6c8>
   1fc80:	svcvc	0x00f00000	; IMB
   1fc84:	mov	r2, #3
   1fc88:	mov	r1, #0
   1fc8c:	b	2106c <__assert_fail@plt+0xfb08>
   1fc90:	push	{r4, r5, r6, lr}
   1fc94:	cmp	r1, #0
   1fc98:	sub	sp, sp, #32
   1fc9c:	mov	r5, r0
   1fca0:	ldr	r4, [sp, #48]	; 0x30
   1fca4:	ldr	r6, [sp, #52]	; 0x34
   1fca8:	beq	1fd5c <__assert_fail@plt+0xe7f8>
   1fcac:	strd	r2, [sp]
   1fcb0:	mov	r3, r1
   1fcb4:	mov	r1, #1
   1fcb8:	ldr	r2, [pc, #856]	; 20018 <__assert_fail@plt+0xeab4>
   1fcbc:	bl	11480 <__fprintf_chk@plt>
   1fcc0:	mov	r2, #5
   1fcc4:	ldr	r1, [pc, #848]	; 2001c <__assert_fail@plt+0xeab8>
   1fcc8:	mov	r0, #0
   1fccc:	bl	112d0 <dcgettext@plt>
   1fcd0:	movw	r3, #2022	; 0x7e6
   1fcd4:	ldr	r2, [pc, #836]	; 20020 <__assert_fail@plt+0xeabc>
   1fcd8:	mov	r1, #1
   1fcdc:	str	r3, [sp]
   1fce0:	mov	r3, r0
   1fce4:	mov	r0, r5
   1fce8:	bl	11480 <__fprintf_chk@plt>
   1fcec:	mov	r1, r5
   1fcf0:	mov	r0, #10
   1fcf4:	bl	112c4 <fputc_unlocked@plt>
   1fcf8:	mov	r2, #5
   1fcfc:	ldr	r1, [pc, #800]	; 20024 <__assert_fail@plt+0xeac0>
   1fd00:	mov	r0, #0
   1fd04:	bl	112d0 <dcgettext@plt>
   1fd08:	mov	r2, r0
   1fd0c:	mov	r1, #1
   1fd10:	ldr	r3, [pc, #784]	; 20028 <__assert_fail@plt+0xeac4>
   1fd14:	mov	r0, r5
   1fd18:	bl	11480 <__fprintf_chk@plt>
   1fd1c:	mov	r1, r5
   1fd20:	mov	r0, #10
   1fd24:	bl	112c4 <fputc_unlocked@plt>
   1fd28:	cmp	r6, #9
   1fd2c:	ldrls	pc, [pc, r6, lsl #2]
   1fd30:	b	2000c <__assert_fail@plt+0xeaa8>
   1fd34:	andeq	pc, r1, ip, asr #28
   1fd38:	andeq	pc, r1, r4, ror sp	; <UNPREDICTABLE>
   1fd3c:	andeq	pc, r1, r0, lsr #27
   1fd40:	ldrdeq	pc, [r1], -r4
   1fd44:	andeq	pc, r1, r0, lsl lr	; <UNPREDICTABLE>
   1fd48:	andeq	pc, r1, r4, asr lr	; <UNPREDICTABLE>
   1fd4c:	muleq	r1, ip, lr
   1fd50:	andeq	pc, r1, ip, ror #29
   1fd54:	andeq	pc, r1, r4, asr #30
   1fd58:	andeq	pc, r1, r4, lsr #31
   1fd5c:	mov	r1, #1
   1fd60:	str	r3, [sp]
   1fd64:	mov	r3, r2
   1fd68:	ldr	r2, [pc, #700]	; 2002c <__assert_fail@plt+0xeac8>
   1fd6c:	bl	11480 <__fprintf_chk@plt>
   1fd70:	b	1fcc0 <__assert_fail@plt+0xe75c>
   1fd74:	mov	r2, #5
   1fd78:	ldr	r1, [pc, #688]	; 20030 <__assert_fail@plt+0xeacc>
   1fd7c:	mov	r0, #0
   1fd80:	bl	112d0 <dcgettext@plt>
   1fd84:	ldr	r3, [r4]
   1fd88:	mov	r2, r0
   1fd8c:	mov	r1, #1
   1fd90:	mov	r0, r5
   1fd94:	add	sp, sp, #32
   1fd98:	pop	{r4, r5, r6, lr}
   1fd9c:	b	11480 <__fprintf_chk@plt>
   1fda0:	mov	r2, #5
   1fda4:	ldr	r1, [pc, #648]	; 20034 <__assert_fail@plt+0xead0>
   1fda8:	mov	r0, #0
   1fdac:	bl	112d0 <dcgettext@plt>
   1fdb0:	ldr	r3, [r4, #4]
   1fdb4:	mov	r2, r0
   1fdb8:	mov	r1, #1
   1fdbc:	mov	r0, r5
   1fdc0:	str	r3, [sp, #48]	; 0x30
   1fdc4:	ldr	r3, [r4]
   1fdc8:	add	sp, sp, #32
   1fdcc:	pop	{r4, r5, r6, lr}
   1fdd0:	b	11480 <__fprintf_chk@plt>
   1fdd4:	mov	r2, #5
   1fdd8:	ldr	r1, [pc, #600]	; 20038 <__assert_fail@plt+0xead4>
   1fddc:	mov	r0, #0
   1fde0:	bl	112d0 <dcgettext@plt>
   1fde4:	ldr	r3, [r4, #8]
   1fde8:	mov	r2, r0
   1fdec:	mov	r1, #1
   1fdf0:	mov	r0, r5
   1fdf4:	str	r3, [sp, #52]	; 0x34
   1fdf8:	ldr	r3, [r4, #4]
   1fdfc:	str	r3, [sp, #48]	; 0x30
   1fe00:	ldr	r3, [r4]
   1fe04:	add	sp, sp, #32
   1fe08:	pop	{r4, r5, r6, lr}
   1fe0c:	b	11480 <__fprintf_chk@plt>
   1fe10:	mov	r2, #5
   1fe14:	ldr	r1, [pc, #544]	; 2003c <__assert_fail@plt+0xead8>
   1fe18:	mov	r0, #0
   1fe1c:	bl	112d0 <dcgettext@plt>
   1fe20:	ldr	r3, [r4, #12]
   1fe24:	mov	r2, r0
   1fe28:	mov	r1, #1
   1fe2c:	mov	r0, r5
   1fe30:	str	r3, [sp, #8]
   1fe34:	ldr	r3, [r4, #8]
   1fe38:	str	r3, [sp, #4]
   1fe3c:	ldr	r3, [r4, #4]
   1fe40:	str	r3, [sp]
   1fe44:	ldr	r3, [r4]
   1fe48:	bl	11480 <__fprintf_chk@plt>
   1fe4c:	add	sp, sp, #32
   1fe50:	pop	{r4, r5, r6, pc}
   1fe54:	mov	r2, #5
   1fe58:	ldr	r1, [pc, #480]	; 20040 <__assert_fail@plt+0xeadc>
   1fe5c:	mov	r0, #0
   1fe60:	bl	112d0 <dcgettext@plt>
   1fe64:	ldr	r3, [r4, #16]
   1fe68:	mov	r2, r0
   1fe6c:	mov	r1, #1
   1fe70:	mov	r0, r5
   1fe74:	str	r3, [sp, #12]
   1fe78:	ldr	r3, [r4, #12]
   1fe7c:	str	r3, [sp, #8]
   1fe80:	ldr	r3, [r4, #8]
   1fe84:	str	r3, [sp, #4]
   1fe88:	ldr	r3, [r4, #4]
   1fe8c:	str	r3, [sp]
   1fe90:	ldr	r3, [r4]
   1fe94:	bl	11480 <__fprintf_chk@plt>
   1fe98:	b	1fe4c <__assert_fail@plt+0xe8e8>
   1fe9c:	mov	r2, #5
   1fea0:	ldr	r1, [pc, #412]	; 20044 <__assert_fail@plt+0xeae0>
   1fea4:	mov	r0, #0
   1fea8:	bl	112d0 <dcgettext@plt>
   1feac:	ldr	r3, [r4, #20]
   1feb0:	mov	r2, r0
   1feb4:	mov	r1, #1
   1feb8:	mov	r0, r5
   1febc:	str	r3, [sp, #16]
   1fec0:	ldr	r3, [r4, #16]
   1fec4:	str	r3, [sp, #12]
   1fec8:	ldr	r3, [r4, #12]
   1fecc:	str	r3, [sp, #8]
   1fed0:	ldr	r3, [r4, #8]
   1fed4:	str	r3, [sp, #4]
   1fed8:	ldr	r3, [r4, #4]
   1fedc:	str	r3, [sp]
   1fee0:	ldr	r3, [r4]
   1fee4:	bl	11480 <__fprintf_chk@plt>
   1fee8:	b	1fe4c <__assert_fail@plt+0xe8e8>
   1feec:	mov	r2, #5
   1fef0:	ldr	r1, [pc, #336]	; 20048 <__assert_fail@plt+0xeae4>
   1fef4:	mov	r0, #0
   1fef8:	bl	112d0 <dcgettext@plt>
   1fefc:	ldr	r3, [r4, #24]
   1ff00:	mov	r2, r0
   1ff04:	mov	r1, #1
   1ff08:	mov	r0, r5
   1ff0c:	str	r3, [sp, #20]
   1ff10:	ldr	r3, [r4, #20]
   1ff14:	str	r3, [sp, #16]
   1ff18:	ldr	r3, [r4, #16]
   1ff1c:	str	r3, [sp, #12]
   1ff20:	ldr	r3, [r4, #12]
   1ff24:	str	r3, [sp, #8]
   1ff28:	ldr	r3, [r4, #8]
   1ff2c:	str	r3, [sp, #4]
   1ff30:	ldr	r3, [r4, #4]
   1ff34:	str	r3, [sp]
   1ff38:	ldr	r3, [r4]
   1ff3c:	bl	11480 <__fprintf_chk@plt>
   1ff40:	b	1fe4c <__assert_fail@plt+0xe8e8>
   1ff44:	mov	r2, #5
   1ff48:	ldr	r1, [pc, #252]	; 2004c <__assert_fail@plt+0xeae8>
   1ff4c:	mov	r0, #0
   1ff50:	bl	112d0 <dcgettext@plt>
   1ff54:	ldr	r3, [r4, #28]
   1ff58:	mov	r2, r0
   1ff5c:	mov	r1, #1
   1ff60:	mov	r0, r5
   1ff64:	str	r3, [sp, #24]
   1ff68:	ldr	r3, [r4, #24]
   1ff6c:	str	r3, [sp, #20]
   1ff70:	ldr	r3, [r4, #20]
   1ff74:	str	r3, [sp, #16]
   1ff78:	ldr	r3, [r4, #16]
   1ff7c:	str	r3, [sp, #12]
   1ff80:	ldr	r3, [r4, #12]
   1ff84:	str	r3, [sp, #8]
   1ff88:	ldr	r3, [r4, #8]
   1ff8c:	str	r3, [sp, #4]
   1ff90:	ldr	r3, [r4, #4]
   1ff94:	str	r3, [sp]
   1ff98:	ldr	r3, [r4]
   1ff9c:	bl	11480 <__fprintf_chk@plt>
   1ffa0:	b	1fe4c <__assert_fail@plt+0xe8e8>
   1ffa4:	ldr	r1, [pc, #164]	; 20050 <__assert_fail@plt+0xeaec>
   1ffa8:	mov	r2, #5
   1ffac:	mov	r0, #0
   1ffb0:	bl	112d0 <dcgettext@plt>
   1ffb4:	ldr	r3, [r4, #32]
   1ffb8:	mov	r2, r0
   1ffbc:	mov	r1, #1
   1ffc0:	mov	r0, r5
   1ffc4:	str	r3, [sp, #28]
   1ffc8:	ldr	r3, [r4, #28]
   1ffcc:	str	r3, [sp, #24]
   1ffd0:	ldr	r3, [r4, #24]
   1ffd4:	str	r3, [sp, #20]
   1ffd8:	ldr	r3, [r4, #20]
   1ffdc:	str	r3, [sp, #16]
   1ffe0:	ldr	r3, [r4, #16]
   1ffe4:	str	r3, [sp, #12]
   1ffe8:	ldr	r3, [r4, #12]
   1ffec:	str	r3, [sp, #8]
   1fff0:	ldr	r3, [r4, #8]
   1fff4:	str	r3, [sp, #4]
   1fff8:	ldr	r3, [r4, #4]
   1fffc:	str	r3, [sp]
   20000:	ldr	r3, [r4]
   20004:	bl	11480 <__fprintf_chk@plt>
   20008:	b	1fe4c <__assert_fail@plt+0xe8e8>
   2000c:	mov	r2, #5
   20010:	ldr	r1, [pc, #60]	; 20054 <__assert_fail@plt+0xeaf0>
   20014:	b	1ffac <__assert_fail@plt+0xea48>
   20018:			; <UNDEFINED> instruction: 0x000225b1
   2001c:	andeq	r2, r2, r4, asr #11
   20020:	muleq	r2, r2, r8
   20024:	andeq	r2, r2, r8, asr #11
   20028:	andeq	r2, r2, r3, ror r6
   2002c:			; <UNDEFINED> instruction: 0x000225bd
   20030:	muleq	r2, r5, r6
   20034:	andeq	r2, r2, r5, lsr #13
   20038:			; <UNDEFINED> instruction: 0x000226bc
   2003c:	ldrdeq	r2, [r2], -r8
   20040:	strdeq	r2, [r2], -r8
   20044:	andeq	r2, r2, ip, lsl r7
   20048:	andeq	r2, r2, r4, asr #14
   2004c:	andeq	r2, r2, r0, ror r7
   20050:	andeq	r2, r2, r0, lsr #15
   20054:	ldrdeq	r2, [r2], -r4
   20058:	push	{r0, r1, r4, lr}
   2005c:	mov	ip, #0
   20060:	ldr	lr, [sp, #16]
   20064:	ldr	r4, [lr, ip, lsl #2]
   20068:	cmp	r4, #0
   2006c:	bne	20084 <__assert_fail@plt+0xeb20>
   20070:	str	lr, [sp]
   20074:	str	ip, [sp, #4]
   20078:	bl	1fc90 <__assert_fail@plt+0xe72c>
   2007c:	add	sp, sp, #8
   20080:	pop	{r4, pc}
   20084:	add	ip, ip, #1
   20088:	b	20064 <__assert_fail@plt+0xeb00>
   2008c:	push	{r4, r5, r6, lr}
   20090:	sub	sp, sp, #48	; 0x30
   20094:	mov	ip, #0
   20098:	add	lr, sp, #8
   2009c:	mov	r5, lr
   200a0:	ldr	r6, [sp, #64]	; 0x40
   200a4:	ldr	r4, [r6, ip, lsl #2]
   200a8:	cmp	r4, #0
   200ac:	str	r4, [lr], #4
   200b0:	beq	200c0 <__assert_fail@plt+0xeb5c>
   200b4:	add	ip, ip, #1
   200b8:	cmp	ip, #10
   200bc:	bne	200a4 <__assert_fail@plt+0xeb40>
   200c0:	stm	sp, {r5, ip}
   200c4:	bl	1fc90 <__assert_fail@plt+0xe72c>
   200c8:	add	sp, sp, #48	; 0x30
   200cc:	pop	{r4, r5, r6, pc}
   200d0:	push	{r3}		; (str r3, [sp, #-4]!)
   200d4:	push	{r0, r1, r2, r3, lr}
   200d8:	add	r3, sp, #24
   200dc:	str	r3, [sp]
   200e0:	str	r3, [sp, #12]
   200e4:	ldr	r3, [sp, #20]
   200e8:	bl	2008c <__assert_fail@plt+0xeb28>
   200ec:	add	sp, sp, #16
   200f0:	pop	{lr}		; (ldr lr, [sp], #4)
   200f4:	add	sp, sp, #4
   200f8:	bx	lr
   200fc:	ldr	r3, [pc, #116]	; 20178 <__assert_fail@plt+0xec14>
   20100:	mov	r0, #10
   20104:	push	{r4, lr}
   20108:	ldr	r1, [r3]
   2010c:	bl	112c4 <fputc_unlocked@plt>
   20110:	mov	r2, #5
   20114:	ldr	r1, [pc, #96]	; 2017c <__assert_fail@plt+0xec18>
   20118:	mov	r0, #0
   2011c:	bl	112d0 <dcgettext@plt>
   20120:	mov	r1, r0
   20124:	ldr	r2, [pc, #84]	; 20180 <__assert_fail@plt+0xec1c>
   20128:	mov	r0, #1
   2012c:	bl	1145c <__printf_chk@plt>
   20130:	mov	r2, #5
   20134:	ldr	r1, [pc, #72]	; 20184 <__assert_fail@plt+0xec20>
   20138:	mov	r0, #0
   2013c:	bl	112d0 <dcgettext@plt>
   20140:	mov	r1, r0
   20144:	ldr	r3, [pc, #60]	; 20188 <__assert_fail@plt+0xec24>
   20148:	mov	r0, #1
   2014c:	ldr	r2, [pc, #56]	; 2018c <__assert_fail@plt+0xec28>
   20150:	bl	1145c <__printf_chk@plt>
   20154:	mov	r2, #5
   20158:	ldr	r1, [pc, #48]	; 20190 <__assert_fail@plt+0xec2c>
   2015c:	mov	r0, #0
   20160:	bl	112d0 <dcgettext@plt>
   20164:	mov	r1, r0
   20168:	ldr	r2, [pc, #36]	; 20194 <__assert_fail@plt+0xec30>
   2016c:	mov	r0, #1
   20170:	pop	{r4, lr}
   20174:	b	1145c <__printf_chk@plt>
   20178:	andeq	r3, r3, r4, asr #3
   2017c:	andeq	r2, r2, r0, lsl r8
   20180:	andeq	r2, r2, r4, lsr #16
   20184:	andeq	r2, r2, sl, lsr r8
   20188:	andeq	r1, r2, r5, lsr #27
   2018c:	andeq	r1, r2, sp, asr #27
   20190:	andeq	r2, r2, lr, asr #16
   20194:	andeq	r2, r2, r5, ror r8
   20198:	push	{r4, lr}
   2019c:	bl	20eec <__assert_fail@plt+0xf988>
   201a0:	cmp	r0, #0
   201a4:	popne	{r4, pc}
   201a8:	bl	12ab8 <__assert_fail@plt+0x1554>
   201ac:	push	{r4, lr}
   201b0:	bl	20eec <__assert_fail@plt+0xf988>
   201b4:	cmp	r0, #0
   201b8:	popne	{r4, pc}
   201bc:	bl	12ab8 <__assert_fail@plt+0x1554>
   201c0:	b	20198 <__assert_fail@plt+0xec34>
   201c4:	push	{r4, r5, r6, lr}
   201c8:	mov	r5, r0
   201cc:	mov	r4, r1
   201d0:	bl	20f18 <__assert_fail@plt+0xf9b4>
   201d4:	cmp	r0, #0
   201d8:	popne	{r4, r5, r6, pc}
   201dc:	adds	r4, r4, #0
   201e0:	movne	r4, #1
   201e4:	cmp	r5, #0
   201e8:	moveq	r4, #1
   201ec:	cmp	r4, #0
   201f0:	popeq	{r4, r5, r6, pc}
   201f4:	bl	12ab8 <__assert_fail@plt+0x1554>
   201f8:	push	{r4, lr}
   201fc:	bl	21220 <__assert_fail@plt+0xfcbc>
   20200:	cmp	r0, #0
   20204:	popne	{r4, pc}
   20208:	bl	12ab8 <__assert_fail@plt+0x1554>
   2020c:	push	{r4, r5, r6, lr}
   20210:	mov	r6, r0
   20214:	mov	r5, r1
   20218:	mov	r4, r2
   2021c:	bl	212c8 <__assert_fail@plt+0xfd64>
   20220:	cmp	r0, #0
   20224:	popne	{r4, r5, r6, pc}
   20228:	cmp	r6, #0
   2022c:	beq	2023c <__assert_fail@plt+0xecd8>
   20230:	cmp	r5, #0
   20234:	cmpne	r4, #0
   20238:	popeq	{r4, r5, r6, pc}
   2023c:	bl	12ab8 <__assert_fail@plt+0x1554>
   20240:	b	2020c <__assert_fail@plt+0xeca8>
   20244:	push	{r4, lr}
   20248:	bl	21230 <__assert_fail@plt+0xfccc>
   2024c:	cmp	r0, #0
   20250:	popne	{r4, pc}
   20254:	bl	12ab8 <__assert_fail@plt+0x1554>
   20258:	mov	r2, r1
   2025c:	mov	r1, r0
   20260:	mov	r0, #0
   20264:	b	2020c <__assert_fail@plt+0xeca8>
   20268:	mov	r2, r1
   2026c:	mov	r1, r0
   20270:	mov	r0, #0
   20274:	b	20244 <__assert_fail@plt+0xece0>
   20278:	cmp	r0, #0
   2027c:	push	{r4, r5, r6, lr}
   20280:	mov	r5, r1
   20284:	ldr	r4, [r1]
   20288:	bne	202b4 <__assert_fail@plt+0xed50>
   2028c:	cmp	r4, #0
   20290:	bne	202a4 <__assert_fail@plt+0xed40>
   20294:	mov	r4, #64	; 0x40
   20298:	udiv	r4, r4, r2
   2029c:	cmp	r2, #64	; 0x40
   202a0:	addhi	r4, r4, #1
   202a4:	mov	r1, r4
   202a8:	bl	2020c <__assert_fail@plt+0xeca8>
   202ac:	str	r4, [r5]
   202b0:	pop	{r4, r5, r6, pc}
   202b4:	lsr	r3, r4, #1
   202b8:	add	r3, r3, #1
   202bc:	adds	r4, r4, r3
   202c0:	bcc	202a4 <__assert_fail@plt+0xed40>
   202c4:	bl	12ab8 <__assert_fail@plt+0x1554>
   202c8:	mov	r2, #1
   202cc:	b	20278 <__assert_fail@plt+0xed14>
   202d0:	ldr	ip, [r1]
   202d4:	push	{r4, r5, r6, r7, r8, lr}
   202d8:	mov	r5, r1
   202dc:	mvn	r8, r3
   202e0:	lsr	r8, r8, #31
   202e4:	ldr	lr, [sp, #24]
   202e8:	asr	r1, ip, #1
   202ec:	adds	r4, ip, r1
   202f0:	mvnvs	r4, #-2147483648	; 0x80000000
   202f4:	cmp	r3, r4
   202f8:	movge	r1, #0
   202fc:	andlt	r1, r8, #1
   20300:	cmp	r1, #0
   20304:	movne	r4, r3
   20308:	smull	r6, r7, r4, lr
   2030c:	cmp	r7, r6, asr #31
   20310:	bne	20328 <__assert_fail@plt+0xedc4>
   20314:	cmp	r6, #63	; 0x3f
   20318:	mov	r1, r6
   2031c:	bgt	20338 <__assert_fail@plt+0xedd4>
   20320:	mov	r1, #64	; 0x40
   20324:	b	2032c <__assert_fail@plt+0xedc8>
   20328:	mvn	r1, #-2147483648	; 0x80000000
   2032c:	sdiv	r4, r1, lr
   20330:	mls	r6, lr, r4, r1
   20334:	sub	r1, r1, r6
   20338:	cmp	r0, #0
   2033c:	sub	r6, r4, ip
   20340:	streq	r0, [r5]
   20344:	cmp	r6, r2
   20348:	bge	2037c <__assert_fail@plt+0xee18>
   2034c:	adds	r4, ip, r2
   20350:	bvs	20378 <__assert_fail@plt+0xee14>
   20354:	cmp	r4, r3
   20358:	movle	r3, #0
   2035c:	andgt	r3, r8, #1
   20360:	cmp	r3, #0
   20364:	bne	20378 <__assert_fail@plt+0xee14>
   20368:	smull	r2, r3, r4, lr
   2036c:	cmp	r3, r2, asr #31
   20370:	mov	r1, r2
   20374:	beq	2037c <__assert_fail@plt+0xee18>
   20378:	bl	12ab8 <__assert_fail@plt+0x1554>
   2037c:	bl	201c4 <__assert_fail@plt+0xec60>
   20380:	str	r4, [r5]
   20384:	pop	{r4, r5, r6, r7, r8, pc}
   20388:	push	{r4, lr}
   2038c:	bl	20e98 <__assert_fail@plt+0xf934>
   20390:	cmp	r0, #0
   20394:	popne	{r4, pc}
   20398:	bl	12ab8 <__assert_fail@plt+0x1554>
   2039c:	mov	r1, #1
   203a0:	b	20388 <__assert_fail@plt+0xee24>
   203a4:	push	{r4, lr}
   203a8:	bl	20e98 <__assert_fail@plt+0xf934>
   203ac:	cmp	r0, #0
   203b0:	popne	{r4, pc}
   203b4:	bl	12ab8 <__assert_fail@plt+0x1554>
   203b8:	mov	r1, #1
   203bc:	b	203a4 <__assert_fail@plt+0xee40>
   203c0:	push	{r4, r5, r6, lr}
   203c4:	mov	r4, r1
   203c8:	mov	r5, r0
   203cc:	mov	r0, r1
   203d0:	bl	20198 <__assert_fail@plt+0xec34>
   203d4:	mov	r2, r4
   203d8:	mov	r1, r5
   203dc:	pop	{r4, r5, r6, lr}
   203e0:	b	11264 <memcpy@plt>
   203e4:	push	{r4, r5, r6, lr}
   203e8:	mov	r4, r1
   203ec:	mov	r5, r0
   203f0:	mov	r0, r1
   203f4:	bl	201ac <__assert_fail@plt+0xec48>
   203f8:	mov	r2, r4
   203fc:	mov	r1, r5
   20400:	pop	{r4, r5, r6, lr}
   20404:	b	11264 <memcpy@plt>
   20408:	push	{r4, r5, r6, lr}
   2040c:	mov	r5, r0
   20410:	add	r0, r1, #1
   20414:	mov	r4, r1
   20418:	bl	201ac <__assert_fail@plt+0xec48>
   2041c:	mov	r2, #0
   20420:	mov	r1, r5
   20424:	strb	r2, [r0, r4]
   20428:	mov	r2, r4
   2042c:	pop	{r4, r5, r6, lr}
   20430:	b	11264 <memcpy@plt>
   20434:	push	{r4, lr}
   20438:	mov	r4, r0
   2043c:	bl	113fc <strlen@plt>
   20440:	add	r1, r0, #1
   20444:	mov	r0, r4
   20448:	pop	{r4, lr}
   2044c:	b	203c0 <__assert_fail@plt+0xee5c>
   20450:	push	{r4, r5, r6, r7, r8, r9, lr}
   20454:	sub	sp, sp, #20
   20458:	mov	r9, r3
   2045c:	mov	r8, r2
   20460:	mov	r2, r1
   20464:	mov	r1, #0
   20468:	mov	r7, r0
   2046c:	ldr	r3, [sp, #56]	; 0x38
   20470:	ldr	r6, [sp, #64]	; 0x40
   20474:	str	r3, [sp]
   20478:	add	r3, sp, #8
   2047c:	bl	20620 <__assert_fail@plt+0xf0bc>
   20480:	subs	r4, r0, #0
   20484:	bne	20520 <__assert_fail@plt+0xefbc>
   20488:	ldrd	r4, [sp, #8]
   2048c:	cmp	r4, r8
   20490:	sbcs	r3, r5, r9
   20494:	ldrd	r2, [sp, #48]	; 0x30
   20498:	movlt	r1, #1
   2049c:	movge	r1, #0
   204a0:	cmp	r2, r4
   204a4:	sbcs	r3, r3, r5
   204a8:	movge	r3, r1
   204ac:	orrlt	r3, r1, #1
   204b0:	cmp	r3, #0
   204b4:	beq	20540 <__assert_fail@plt+0xefdc>
   204b8:	bl	11414 <__errno_location@plt>
   204bc:	cmp	r4, #1073741824	; 0x40000000
   204c0:	sbcs	r3, r5, #0
   204c4:	mov	r3, #75	; 0x4b
   204c8:	blt	20508 <__assert_fail@plt+0xefa4>
   204cc:	str	r3, [r0]
   204d0:	cmp	r6, #0
   204d4:	moveq	r6, #1
   204d8:	bl	11414 <__errno_location@plt>
   204dc:	ldr	r4, [r0]
   204e0:	mov	r0, r7
   204e4:	cmp	r4, #22
   204e8:	moveq	r4, #0
   204ec:	bl	14df8 <__assert_fail@plt+0x3894>
   204f0:	ldr	r2, [pc, #88]	; 20550 <__assert_fail@plt+0xefec>
   204f4:	mov	r1, r4
   204f8:	str	r0, [sp]
   204fc:	mov	r0, r6
   20500:	ldr	r3, [sp, #60]	; 0x3c
   20504:	bl	11384 <error@plt>
   20508:	mov	r8, #-1073741824	; 0xc0000000
   2050c:	mvn	r9, #0
   20510:	cmp	r4, r8
   20514:	sbcs	r2, r5, r9
   20518:	movge	r3, #34	; 0x22
   2051c:	b	204cc <__assert_fail@plt+0xef68>
   20520:	bl	11414 <__errno_location@plt>
   20524:	cmp	r4, #1
   20528:	moveq	r3, #75	; 0x4b
   2052c:	beq	204cc <__assert_fail@plt+0xef68>
   20530:	cmp	r4, #3
   20534:	bne	204d0 <__assert_fail@plt+0xef6c>
   20538:	mov	r3, #0
   2053c:	b	204cc <__assert_fail@plt+0xef68>
   20540:	mov	r0, r4
   20544:	mov	r1, r5
   20548:	add	sp, sp, #20
   2054c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20550:	andeq	r2, r2, r7, lsl #5
   20554:	mov	r1, #10
   20558:	b	20450 <__assert_fail@plt+0xeeec>
   2055c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20560:	mov	r3, #0
   20564:	asr	r5, r1, #31
   20568:	mov	r4, r1
   2056c:	mov	ip, r3
   20570:	strd	r4, [sp]
   20574:	subs	r2, r2, #1
   20578:	bcs	20588 <__assert_fail@plt+0xf024>
   2057c:	mov	r0, r3
   20580:	add	sp, sp, #12
   20584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20588:	ldrd	r4, [r0]
   2058c:	mov	lr, #0
   20590:	cmp	r5, r4, asr #31
   20594:	smulleq	r8, r9, r4, r1
   20598:	moveq	r6, r8
   2059c:	moveq	sl, r9
   205a0:	beq	205e8 <__assert_fail@plt+0xf084>
   205a4:	cmp	r5, #0
   205a8:	umull	r8, r9, r4, r1
   205ac:	umull	r6, r7, r1, r5
   205b0:	bge	205bc <__assert_fail@plt+0xf058>
   205b4:	subs	r6, r6, ip
   205b8:	sbc	r7, r7, r1
   205bc:	adds	sl, r6, r9
   205c0:	mov	fp, #0
   205c4:	adc	fp, r7, fp
   205c8:	cmp	fp, sl, asr #31
   205cc:	ldrne	lr, [sp, #4]
   205d0:	moveq	r6, r8
   205d4:	umullne	r6, r7, r4, r1
   205d8:	mulne	sl, r4, lr
   205dc:	movne	lr, #1
   205e0:	mlane	sl, r1, r5, sl
   205e4:	addne	sl, sl, r7
   205e8:	cmp	lr, #0
   205ec:	beq	20618 <__assert_fail@plt+0xf0b4>
   205f0:	cmp	r4, #0
   205f4:	sbcs	lr, r5, #0
   205f8:	mov	lr, #1
   205fc:	mvnge	r4, #0
   20600:	mvnge	r5, #-2147483648	; 0x80000000
   20604:	movlt	r4, #0
   20608:	movlt	r5, #-2147483648	; 0x80000000
   2060c:	strd	r4, [r0]
   20610:	orr	r3, r3, lr
   20614:	b	20574 <__assert_fail@plt+0xf010>
   20618:	stm	r0, {r6, sl}
   2061c:	b	20610 <__assert_fail@plt+0xf0ac>
   20620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20624:	cmp	r2, #36	; 0x24
   20628:	sub	sp, sp, #20
   2062c:	ldr	r5, [sp, #56]	; 0x38
   20630:	bls	20648 <__assert_fail@plt+0xf0e4>
   20634:	ldr	r3, [pc, #1064]	; 20a64 <__assert_fail@plt+0xf500>
   20638:	mov	r2, #85	; 0x55
   2063c:	ldr	r1, [pc, #1060]	; 20a68 <__assert_fail@plt+0xf504>
   20640:	ldr	r0, [pc, #1060]	; 20a6c <__assert_fail@plt+0xf508>
   20644:	bl	11564 <__assert_fail@plt>
   20648:	cmp	r1, #0
   2064c:	mov	r6, r1
   20650:	mov	r8, r0
   20654:	addeq	r6, sp, #4
   20658:	mov	r9, r2
   2065c:	mov	r7, r3
   20660:	bl	11414 <__errno_location@plt>
   20664:	mov	sl, r0
   20668:	mov	r4, #0
   2066c:	mov	r2, r9
   20670:	mov	r1, r6
   20674:	mov	r0, r8
   20678:	str	r4, [sl]
   2067c:	bl	1148c <strtoimax@plt>
   20680:	ldr	r9, [r6]
   20684:	strd	r0, [sp, #8]
   20688:	cmp	r9, r8
   2068c:	bne	206c8 <__assert_fail@plt+0xf164>
   20690:	cmp	r5, r4
   20694:	beq	206c0 <__assert_fail@plt+0xf15c>
   20698:	ldrb	r1, [r8]
   2069c:	cmp	r1, r4
   206a0:	beq	206c0 <__assert_fail@plt+0xf15c>
   206a4:	mov	r0, r5
   206a8:	bl	11408 <strchr@plt>
   206ac:	cmp	r0, r4
   206b0:	movne	r2, #1
   206b4:	movne	r3, #0
   206b8:	strdne	r2, [sp, #8]
   206bc:	bne	206ec <__assert_fail@plt+0xf188>
   206c0:	mov	r4, #4
   206c4:	b	20718 <__assert_fail@plt+0xf1b4>
   206c8:	ldr	r4, [sl]
   206cc:	cmp	r4, #0
   206d0:	beq	206e0 <__assert_fail@plt+0xf17c>
   206d4:	cmp	r4, #34	; 0x22
   206d8:	bne	206c0 <__assert_fail@plt+0xf15c>
   206dc:	mov	r4, #1
   206e0:	cmp	r5, #0
   206e4:	strdeq	r0, [r7]
   206e8:	beq	20718 <__assert_fail@plt+0xf1b4>
   206ec:	ldrb	r8, [r9]
   206f0:	cmp	r8, #0
   206f4:	beq	20a08 <__assert_fail@plt+0xf4a4>
   206f8:	mov	r1, r8
   206fc:	mov	r0, r5
   20700:	bl	11408 <strchr@plt>
   20704:	cmp	r0, #0
   20708:	bne	20724 <__assert_fail@plt+0xf1c0>
   2070c:	ldrd	r2, [sp, #8]
   20710:	orr	r4, r4, #2
   20714:	strd	r2, [r7]
   20718:	mov	r0, r4
   2071c:	add	sp, sp, #20
   20720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20724:	cmp	r8, #84	; 0x54
   20728:	beq	2077c <__assert_fail@plt+0xf218>
   2072c:	bhi	20764 <__assert_fail@plt+0xf200>
   20730:	cmp	r8, #75	; 0x4b
   20734:	beq	2077c <__assert_fail@plt+0xf218>
   20738:	bhi	20754 <__assert_fail@plt+0xf1f0>
   2073c:	cmp	r8, #69	; 0x45
   20740:	beq	2077c <__assert_fail@plt+0xf218>
   20744:	cmp	r8, #71	; 0x47
   20748:	beq	2077c <__assert_fail@plt+0xf218>
   2074c:	mov	r5, #1
   20750:	b	20878 <__assert_fail@plt+0xf314>
   20754:	cmp	r8, #77	; 0x4d
   20758:	beq	2077c <__assert_fail@plt+0xf218>
   2075c:	cmp	r8, #80	; 0x50
   20760:	b	20748 <__assert_fail@plt+0xf1e4>
   20764:	cmp	r8, #103	; 0x67
   20768:	beq	2077c <__assert_fail@plt+0xf218>
   2076c:	bhi	20850 <__assert_fail@plt+0xf2ec>
   20770:	sub	r3, r8, #89	; 0x59
   20774:	cmp	r3, #1
   20778:	bhi	2074c <__assert_fail@plt+0xf1e8>
   2077c:	mov	r1, #48	; 0x30
   20780:	mov	r0, r5
   20784:	bl	11408 <strchr@plt>
   20788:	cmp	r0, #0
   2078c:	beq	2074c <__assert_fail@plt+0xf1e8>
   20790:	ldrb	r3, [r9, #1]
   20794:	cmp	r3, #68	; 0x44
   20798:	moveq	r5, #2
   2079c:	moveq	r1, #1000	; 0x3e8
   207a0:	beq	207c0 <__assert_fail@plt+0xf25c>
   207a4:	cmp	r3, #105	; 0x69
   207a8:	beq	20868 <__assert_fail@plt+0xf304>
   207ac:	cmp	r3, #66	; 0x42
   207b0:	moveq	r5, #2
   207b4:	movne	r5, #1
   207b8:	moveq	r1, #1000	; 0x3e8
   207bc:	movne	r1, #1024	; 0x400
   207c0:	cmp	r8, #89	; 0x59
   207c4:	beq	20a4c <__assert_fail@plt+0xf4e8>
   207c8:	bhi	208a0 <__assert_fail@plt+0xf33c>
   207cc:	cmp	r8, #75	; 0x4b
   207d0:	beq	208e0 <__assert_fail@plt+0xf37c>
   207d4:	bhi	20880 <__assert_fail@plt+0xf31c>
   207d8:	cmp	r8, #69	; 0x45
   207dc:	beq	20a28 <__assert_fail@plt+0xf4c4>
   207e0:	cmp	r8, #71	; 0x47
   207e4:	beq	20a34 <__assert_fail@plt+0xf4d0>
   207e8:	cmp	r8, #66	; 0x42
   207ec:	bne	2070c <__assert_fail@plt+0xf1a8>
   207f0:	ldrd	r2, [sp, #8]
   207f4:	mov	r0, #0
   207f8:	cmp	r3, r2, asr #31
   207fc:	lsleq	r1, r3, #10
   20800:	lsleq	r8, r2, #10
   20804:	orreq	r1, r1, r2, lsr #22
   20808:	beq	209c0 <__assert_fail@plt+0xf45c>
   2080c:	mov	r1, #1024	; 0x400
   20810:	cmp	r3, #0
   20814:	lsr	sl, r2, #22
   20818:	lsl	lr, r2, #10
   2081c:	umull	r8, r9, r1, r3
   20820:	bge	2082c <__assert_fail@plt+0xf2c8>
   20824:	subs	r8, r8, r0
   20828:	sbc	r9, r9, r1
   2082c:	adds	r1, r8, sl
   20830:	mov	ip, #0
   20834:	adc	ip, r9, ip
   20838:	cmp	ip, r1, asr #31
   2083c:	beq	209bc <__assert_fail@plt+0xf458>
   20840:	lsl	r1, r3, #10
   20844:	lsl	r8, r2, #10
   20848:	orr	r1, r1, r2, lsr #22
   2084c:	b	20a20 <__assert_fail@plt+0xf4bc>
   20850:	cmp	r8, #109	; 0x6d
   20854:	beq	2077c <__assert_fail@plt+0xf218>
   20858:	cmp	r8, #116	; 0x74
   2085c:	beq	2077c <__assert_fail@plt+0xf218>
   20860:	cmp	r8, #107	; 0x6b
   20864:	b	20748 <__assert_fail@plt+0xf1e4>
   20868:	ldrb	r3, [r9, #2]
   2086c:	cmp	r3, #66	; 0x42
   20870:	movne	r5, #1
   20874:	moveq	r5, #3
   20878:	mov	r1, #1024	; 0x400
   2087c:	b	207c0 <__assert_fail@plt+0xf25c>
   20880:	cmp	r8, #80	; 0x50
   20884:	beq	20a3c <__assert_fail@plt+0xf4d8>
   20888:	cmp	r8, #84	; 0x54
   2088c:	beq	20a44 <__assert_fail@plt+0xf4e0>
   20890:	cmp	r8, #77	; 0x4d
   20894:	bne	2070c <__assert_fail@plt+0xf1a8>
   20898:	mov	r2, #2
   2089c:	b	20a2c <__assert_fail@plt+0xf4c8>
   208a0:	cmp	r8, #103	; 0x67
   208a4:	beq	20a34 <__assert_fail@plt+0xf4d0>
   208a8:	bhi	208cc <__assert_fail@plt+0xf368>
   208ac:	cmp	r8, #98	; 0x62
   208b0:	beq	2096c <__assert_fail@plt+0xf408>
   208b4:	cmp	r8, #99	; 0x63
   208b8:	beq	20a5c <__assert_fail@plt+0xf4f8>
   208bc:	cmp	r8, #90	; 0x5a
   208c0:	bne	2070c <__assert_fail@plt+0xf1a8>
   208c4:	mov	r2, #7
   208c8:	b	20a2c <__assert_fail@plt+0xf4c8>
   208cc:	cmp	r8, #109	; 0x6d
   208d0:	beq	20898 <__assert_fail@plt+0xf334>
   208d4:	bhi	208e8 <__assert_fail@plt+0xf384>
   208d8:	cmp	r8, #107	; 0x6b
   208dc:	bne	2070c <__assert_fail@plt+0xf1a8>
   208e0:	mov	r2, #1
   208e4:	b	20a2c <__assert_fail@plt+0xf4c8>
   208e8:	cmp	r8, #116	; 0x74
   208ec:	beq	20a44 <__assert_fail@plt+0xf4e0>
   208f0:	cmp	r8, #119	; 0x77
   208f4:	bne	2070c <__assert_fail@plt+0xf1a8>
   208f8:	ldrd	r2, [sp, #8]
   208fc:	mov	r0, #0
   20900:	adds	ip, r2, r2
   20904:	adc	r1, r3, r3
   20908:	cmp	r3, r2, asr #31
   2090c:	beq	20958 <__assert_fail@plt+0xf3f4>
   20910:	mov	r9, #0
   20914:	adds	ip, r2, r2
   20918:	mov	r1, #2
   2091c:	adc	sl, r9, r9
   20920:	cmp	r3, #0
   20924:	umull	r8, r9, r1, r3
   20928:	bge	20938 <__assert_fail@plt+0xf3d4>
   2092c:	mov	lr, #0
   20930:	subs	r8, r8, lr
   20934:	sbc	r9, r9, r1
   20938:	adds	r1, r8, sl
   2093c:	mov	lr, #0
   20940:	adc	lr, r9, lr
   20944:	cmp	lr, r1, asr #31
   20948:	beq	20958 <__assert_fail@plt+0xf3f4>
   2094c:	adds	ip, r2, r2
   20950:	mov	r0, #1
   20954:	adc	r1, r3, r3
   20958:	cmp	r0, #0
   2095c:	streq	ip, [sp, #8]
   20960:	bne	209cc <__assert_fail@plt+0xf468>
   20964:	str	r1, [sp, #12]
   20968:	b	209ec <__assert_fail@plt+0xf488>
   2096c:	ldrd	r2, [sp, #8]
   20970:	mov	r0, #0
   20974:	cmp	r3, r2, asr #31
   20978:	lsleq	r1, r3, #9
   2097c:	lsleq	r8, r2, #9
   20980:	orreq	r1, r1, r2, lsr #23
   20984:	beq	209c0 <__assert_fail@plt+0xf45c>
   20988:	mov	r1, #512	; 0x200
   2098c:	cmp	r3, #0
   20990:	lsr	sl, r2, #23
   20994:	lsl	lr, r2, #9
   20998:	umull	r8, r9, r1, r3
   2099c:	bge	209a8 <__assert_fail@plt+0xf444>
   209a0:	subs	r8, r8, r0
   209a4:	sbc	r9, r9, r1
   209a8:	adds	r1, r8, sl
   209ac:	mov	ip, #0
   209b0:	adc	ip, r9, ip
   209b4:	cmp	ip, r1, asr #31
   209b8:	bne	20a14 <__assert_fail@plt+0xf4b0>
   209bc:	mov	r8, lr
   209c0:	cmp	r0, #0
   209c4:	streq	r8, [sp, #8]
   209c8:	beq	20964 <__assert_fail@plt+0xf400>
   209cc:	cmp	r2, #0
   209d0:	mov	r0, #1
   209d4:	sbcs	r3, r3, #0
   209d8:	mvnge	r2, #0
   209dc:	mvnge	r3, #-2147483648	; 0x80000000
   209e0:	movlt	r2, #0
   209e4:	movlt	r3, #-2147483648	; 0x80000000
   209e8:	strd	r2, [sp, #8]
   209ec:	ldr	r3, [r6]
   209f0:	orr	r4, r4, r0
   209f4:	add	r2, r3, r5
   209f8:	str	r2, [r6]
   209fc:	ldrb	r3, [r3, r5]
   20a00:	cmp	r3, #0
   20a04:	orrne	r4, r4, #2
   20a08:	ldrd	r2, [sp, #8]
   20a0c:	strd	r2, [r7]
   20a10:	b	20718 <__assert_fail@plt+0xf1b4>
   20a14:	lsl	r1, r3, #9
   20a18:	lsl	r8, r2, #9
   20a1c:	orr	r1, r1, r2, lsr #23
   20a20:	mov	r0, #1
   20a24:	b	209c0 <__assert_fail@plt+0xf45c>
   20a28:	mov	r2, #6
   20a2c:	add	r0, sp, #8
   20a30:	b	20a54 <__assert_fail@plt+0xf4f0>
   20a34:	mov	r2, #3
   20a38:	b	20a2c <__assert_fail@plt+0xf4c8>
   20a3c:	mov	r2, #5
   20a40:	b	20a2c <__assert_fail@plt+0xf4c8>
   20a44:	mov	r2, #4
   20a48:	b	20a2c <__assert_fail@plt+0xf4c8>
   20a4c:	mov	r2, #8
   20a50:	add	r0, sp, r2
   20a54:	bl	2055c <__assert_fail@plt+0xeff8>
   20a58:	b	209ec <__assert_fail@plt+0xf488>
   20a5c:	mov	r0, #0
   20a60:	b	209ec <__assert_fail@plt+0xf488>
   20a64:	andeq	r2, r2, r1, asr #17
   20a68:	andeq	r2, r2, ip, asr #17
   20a6c:	ldrdeq	r2, [r2], -sl
   20a70:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a74:	mov	ip, r0
   20a78:	asr	fp, r1, #31
   20a7c:	mov	r0, #0
   20a80:	mov	lr, r0
   20a84:	subs	r2, r2, #1
   20a88:	bcs	20a94 <__assert_fail@plt+0xf530>
   20a8c:	add	sp, sp, #12
   20a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a94:	ldrd	r8, [ip]
   20a98:	mov	r3, #0
   20a9c:	cmp	r9, r3
   20aa0:	umulleq	r8, r9, r8, r1
   20aa4:	moveq	r6, r8
   20aa8:	moveq	r4, r9
   20aac:	beq	20ae4 <__assert_fail@plt+0xf580>
   20ab0:	umull	r4, r5, r8, r1
   20ab4:	strd	r4, [sp]
   20ab8:	mov	r5, lr
   20abc:	ldr	r4, [sp, #4]
   20ac0:	umlal	r4, r5, r9, r1
   20ac4:	cmp	r5, #0
   20ac8:	ldrne	r3, [sp, #4]
   20acc:	mulne	r4, r1, r9
   20ad0:	ldreq	r6, [sp]
   20ad4:	mlane	r4, r8, fp, r4
   20ad8:	ldrne	r6, [sp]
   20adc:	addne	r4, r4, r3
   20ae0:	movne	r3, #1
   20ae4:	cmp	r3, #0
   20ae8:	mvnne	r6, #0
   20aec:	movne	r3, #1
   20af0:	movne	r4, r6
   20af4:	orr	r0, r0, r3
   20af8:	str	r6, [ip]
   20afc:	str	r4, [ip, #4]
   20b00:	b	20a84 <__assert_fail@plt+0xf520>
   20b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b08:	cmp	r2, #36	; 0x24
   20b0c:	sub	sp, sp, #20
   20b10:	ldr	r5, [sp, #56]	; 0x38
   20b14:	bls	20b2c <__assert_fail@plt+0xf5c8>
   20b18:	ldr	r3, [pc, #876]	; 20e8c <__assert_fail@plt+0xf928>
   20b1c:	mov	r2, #85	; 0x55
   20b20:	ldr	r1, [pc, #872]	; 20e90 <__assert_fail@plt+0xf92c>
   20b24:	ldr	r0, [pc, #872]	; 20e94 <__assert_fail@plt+0xf930>
   20b28:	bl	11564 <__assert_fail@plt>
   20b2c:	cmp	r1, #0
   20b30:	mov	r6, r1
   20b34:	mov	r8, r0
   20b38:	mov	fp, r2
   20b3c:	mov	r7, r3
   20b40:	addeq	r6, sp, #4
   20b44:	bl	11414 <__errno_location@plt>
   20b48:	mov	r3, #0
   20b4c:	mov	sl, r0
   20b50:	str	r3, [r0]
   20b54:	bl	113e4 <__ctype_b_loc@plt>
   20b58:	ldrb	r9, [r8]
   20b5c:	mov	r3, r8
   20b60:	ldr	r1, [r0]
   20b64:	lsl	r2, r9, #1
   20b68:	ldrh	r4, [r1, r2]
   20b6c:	ands	r4, r4, #8192	; 0x2000
   20b70:	bne	20b8c <__assert_fail@plt+0xf628>
   20b74:	cmp	r9, #45	; 0x2d
   20b78:	bne	20b94 <__assert_fail@plt+0xf630>
   20b7c:	mov	r4, #4
   20b80:	mov	r0, r4
   20b84:	add	sp, sp, #20
   20b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b8c:	ldrb	r9, [r3, #1]!
   20b90:	b	20b64 <__assert_fail@plt+0xf600>
   20b94:	mov	r2, fp
   20b98:	mov	r1, r6
   20b9c:	mov	r0, r8
   20ba0:	bl	11474 <strtoumax@plt>
   20ba4:	ldr	r9, [r6]
   20ba8:	strd	r0, [sp, #8]
   20bac:	cmp	r9, r8
   20bb0:	bne	20c14 <__assert_fail@plt+0xf6b0>
   20bb4:	cmp	r5, #0
   20bb8:	beq	20b7c <__assert_fail@plt+0xf618>
   20bbc:	ldrb	r1, [r8]
   20bc0:	cmp	r1, #0
   20bc4:	beq	20b7c <__assert_fail@plt+0xf618>
   20bc8:	mov	r0, r5
   20bcc:	bl	11408 <strchr@plt>
   20bd0:	cmp	r0, #0
   20bd4:	movne	r2, #1
   20bd8:	movne	r3, #0
   20bdc:	strdne	r2, [sp, #8]
   20be0:	beq	20b7c <__assert_fail@plt+0xf618>
   20be4:	ldrb	r8, [r9]
   20be8:	cmp	r8, #0
   20bec:	beq	20e44 <__assert_fail@plt+0xf8e0>
   20bf0:	mov	r1, r8
   20bf4:	mov	r0, r5
   20bf8:	bl	11408 <strchr@plt>
   20bfc:	cmp	r0, #0
   20c00:	bne	20c3c <__assert_fail@plt+0xf6d8>
   20c04:	ldrd	r2, [sp, #8]
   20c08:	orr	r4, r4, #2
   20c0c:	strd	r2, [r7]
   20c10:	b	20b80 <__assert_fail@plt+0xf61c>
   20c14:	ldr	r4, [sl]
   20c18:	cmp	r4, #0
   20c1c:	beq	20c2c <__assert_fail@plt+0xf6c8>
   20c20:	cmp	r4, #34	; 0x22
   20c24:	bne	20b7c <__assert_fail@plt+0xf618>
   20c28:	mov	r4, #1
   20c2c:	cmp	r5, #0
   20c30:	strdeq	r0, [r7]
   20c34:	bne	20be4 <__assert_fail@plt+0xf680>
   20c38:	b	20b80 <__assert_fail@plt+0xf61c>
   20c3c:	cmp	r8, #84	; 0x54
   20c40:	beq	20c94 <__assert_fail@plt+0xf730>
   20c44:	bhi	20c7c <__assert_fail@plt+0xf718>
   20c48:	cmp	r8, #75	; 0x4b
   20c4c:	beq	20c94 <__assert_fail@plt+0xf730>
   20c50:	bhi	20c6c <__assert_fail@plt+0xf708>
   20c54:	cmp	r8, #69	; 0x45
   20c58:	beq	20c94 <__assert_fail@plt+0xf730>
   20c5c:	cmp	r8, #71	; 0x47
   20c60:	beq	20c94 <__assert_fail@plt+0xf730>
   20c64:	mov	r5, #1
   20c68:	b	20d4c <__assert_fail@plt+0xf7e8>
   20c6c:	cmp	r8, #77	; 0x4d
   20c70:	beq	20c94 <__assert_fail@plt+0xf730>
   20c74:	cmp	r8, #80	; 0x50
   20c78:	b	20c60 <__assert_fail@plt+0xf6fc>
   20c7c:	cmp	r8, #103	; 0x67
   20c80:	beq	20c94 <__assert_fail@plt+0xf730>
   20c84:	bhi	20d24 <__assert_fail@plt+0xf7c0>
   20c88:	sub	r3, r8, #89	; 0x59
   20c8c:	cmp	r3, #1
   20c90:	bhi	20c64 <__assert_fail@plt+0xf700>
   20c94:	mov	r1, #48	; 0x30
   20c98:	mov	r0, r5
   20c9c:	bl	11408 <strchr@plt>
   20ca0:	cmp	r0, #0
   20ca4:	beq	20c64 <__assert_fail@plt+0xf700>
   20ca8:	ldrb	r3, [r9, #1]
   20cac:	cmp	r3, #68	; 0x44
   20cb0:	moveq	r5, #2
   20cb4:	moveq	r1, #1000	; 0x3e8
   20cb8:	beq	20cd8 <__assert_fail@plt+0xf774>
   20cbc:	cmp	r3, #105	; 0x69
   20cc0:	beq	20d3c <__assert_fail@plt+0xf7d8>
   20cc4:	cmp	r3, #66	; 0x42
   20cc8:	moveq	r5, #2
   20ccc:	movne	r5, #1
   20cd0:	moveq	r1, #1000	; 0x3e8
   20cd4:	movne	r1, #1024	; 0x400
   20cd8:	cmp	r8, #89	; 0x59
   20cdc:	beq	20e74 <__assert_fail@plt+0xf910>
   20ce0:	bhi	20d74 <__assert_fail@plt+0xf810>
   20ce4:	cmp	r8, #75	; 0x4b
   20ce8:	beq	20db4 <__assert_fail@plt+0xf850>
   20cec:	bhi	20d54 <__assert_fail@plt+0xf7f0>
   20cf0:	cmp	r8, #69	; 0x45
   20cf4:	beq	20e50 <__assert_fail@plt+0xf8ec>
   20cf8:	cmp	r8, #71	; 0x47
   20cfc:	beq	20e5c <__assert_fail@plt+0xf8f8>
   20d00:	cmp	r8, #66	; 0x42
   20d04:	bne	20c04 <__assert_fail@plt+0xf6a0>
   20d08:	ldr	r3, [sp, #8]
   20d0c:	ldr	r1, [sp, #12]
   20d10:	lsl	r2, r1, #10
   20d14:	lsr	r0, r1, #22
   20d18:	orr	r2, r2, r3, lsr #22
   20d1c:	lsl	r3, r3, #10
   20d20:	b	20e00 <__assert_fail@plt+0xf89c>
   20d24:	cmp	r8, #109	; 0x6d
   20d28:	beq	20c94 <__assert_fail@plt+0xf730>
   20d2c:	cmp	r8, #116	; 0x74
   20d30:	beq	20c94 <__assert_fail@plt+0xf730>
   20d34:	cmp	r8, #107	; 0x6b
   20d38:	b	20c60 <__assert_fail@plt+0xf6fc>
   20d3c:	ldrb	r3, [r9, #2]
   20d40:	cmp	r3, #66	; 0x42
   20d44:	movne	r5, #1
   20d48:	moveq	r5, #3
   20d4c:	mov	r1, #1024	; 0x400
   20d50:	b	20cd8 <__assert_fail@plt+0xf774>
   20d54:	cmp	r8, #80	; 0x50
   20d58:	beq	20e64 <__assert_fail@plt+0xf900>
   20d5c:	cmp	r8, #84	; 0x54
   20d60:	beq	20e6c <__assert_fail@plt+0xf908>
   20d64:	cmp	r8, #77	; 0x4d
   20d68:	bne	20c04 <__assert_fail@plt+0xf6a0>
   20d6c:	mov	r2, #2
   20d70:	b	20e54 <__assert_fail@plt+0xf8f0>
   20d74:	cmp	r8, #103	; 0x67
   20d78:	beq	20e5c <__assert_fail@plt+0xf8f8>
   20d7c:	bhi	20da0 <__assert_fail@plt+0xf83c>
   20d80:	cmp	r8, #98	; 0x62
   20d84:	beq	20de8 <__assert_fail@plt+0xf884>
   20d88:	cmp	r8, #99	; 0x63
   20d8c:	beq	20e84 <__assert_fail@plt+0xf920>
   20d90:	cmp	r8, #90	; 0x5a
   20d94:	bne	20c04 <__assert_fail@plt+0xf6a0>
   20d98:	mov	r2, #7
   20d9c:	b	20e54 <__assert_fail@plt+0xf8f0>
   20da0:	cmp	r8, #109	; 0x6d
   20da4:	beq	20d6c <__assert_fail@plt+0xf808>
   20da8:	bhi	20dbc <__assert_fail@plt+0xf858>
   20dac:	cmp	r8, #107	; 0x6b
   20db0:	bne	20c04 <__assert_fail@plt+0xf6a0>
   20db4:	mov	r2, #1
   20db8:	b	20e54 <__assert_fail@plt+0xf8f0>
   20dbc:	cmp	r8, #116	; 0x74
   20dc0:	beq	20e6c <__assert_fail@plt+0xf908>
   20dc4:	cmp	r8, #119	; 0x77
   20dc8:	bne	20c04 <__assert_fail@plt+0xf6a0>
   20dcc:	ldr	r3, [sp, #8]
   20dd0:	ldr	r2, [sp, #12]
   20dd4:	ldr	r0, [sp, #12]
   20dd8:	adds	r3, r3, r3
   20ddc:	adc	r2, r2, r2
   20de0:	lsr	r0, r0, #31
   20de4:	b	20e00 <__assert_fail@plt+0xf89c>
   20de8:	ldr	r3, [sp, #8]
   20dec:	ldr	r1, [sp, #12]
   20df0:	lsl	r2, r1, #9
   20df4:	lsr	r0, r1, #23
   20df8:	orr	r2, r2, r3, lsr #23
   20dfc:	lsl	r3, r3, #9
   20e00:	adds	r0, r0, #0
   20e04:	movne	r0, #1
   20e08:	cmp	r0, #0
   20e0c:	streq	r3, [sp, #8]
   20e10:	streq	r2, [sp, #12]
   20e14:	beq	20e28 <__assert_fail@plt+0xf8c4>
   20e18:	mvn	r2, #0
   20e1c:	mvn	r3, #0
   20e20:	mov	r0, #1
   20e24:	strd	r2, [sp, #8]
   20e28:	ldr	r3, [r6]
   20e2c:	orr	r4, r4, r0
   20e30:	add	r2, r3, r5
   20e34:	str	r2, [r6]
   20e38:	ldrb	r3, [r3, r5]
   20e3c:	cmp	r3, #0
   20e40:	orrne	r4, r4, #2
   20e44:	ldrd	r2, [sp, #8]
   20e48:	strd	r2, [r7]
   20e4c:	b	20b80 <__assert_fail@plt+0xf61c>
   20e50:	mov	r2, #6
   20e54:	add	r0, sp, #8
   20e58:	b	20e7c <__assert_fail@plt+0xf918>
   20e5c:	mov	r2, #3
   20e60:	b	20e54 <__assert_fail@plt+0xf8f0>
   20e64:	mov	r2, #5
   20e68:	b	20e54 <__assert_fail@plt+0xf8f0>
   20e6c:	mov	r2, #4
   20e70:	b	20e54 <__assert_fail@plt+0xf8f0>
   20e74:	mov	r2, #8
   20e78:	add	r0, sp, r2
   20e7c:	bl	20a70 <__assert_fail@plt+0xf50c>
   20e80:	b	20e28 <__assert_fail@plt+0xf8c4>
   20e84:	mov	r0, #0
   20e88:	b	20e28 <__assert_fail@plt+0xf8c4>
   20e8c:	andeq	r2, r2, r0, lsl #18
   20e90:	andeq	r2, r2, ip, asr #17
   20e94:	ldrdeq	r2, [r2], -sl
   20e98:	cmp	r1, #0
   20e9c:	cmpne	r0, #0
   20ea0:	beq	20ed8 <__assert_fail@plt+0xf974>
   20ea4:	push	{r4, r5, r6, lr}
   20ea8:	umull	r4, r5, r0, r1
   20eac:	adds	r3, r5, #0
   20eb0:	movne	r3, #1
   20eb4:	cmp	r4, #0
   20eb8:	blt	20ec4 <__assert_fail@plt+0xf960>
   20ebc:	cmp	r3, #0
   20ec0:	beq	20ee4 <__assert_fail@plt+0xf980>
   20ec4:	bl	11414 <__errno_location@plt>
   20ec8:	mov	r3, #12
   20ecc:	str	r3, [r0]
   20ed0:	mov	r0, #0
   20ed4:	pop	{r4, r5, r6, pc}
   20ed8:	mov	r1, #1
   20edc:	mov	r0, r1
   20ee0:	b	111b0 <calloc@plt>
   20ee4:	pop	{r4, r5, r6, lr}
   20ee8:	b	20ee0 <__assert_fail@plt+0xf97c>
   20eec:	cmp	r0, #0
   20ef0:	beq	20f10 <__assert_fail@plt+0xf9ac>
   20ef4:	bge	20f14 <__assert_fail@plt+0xf9b0>
   20ef8:	push	{r4, lr}
   20efc:	bl	11414 <__errno_location@plt>
   20f00:	mov	r3, #12
   20f04:	str	r3, [r0]
   20f08:	mov	r0, #0
   20f0c:	pop	{r4, pc}
   20f10:	mov	r0, #1
   20f14:	b	1139c <malloc@plt>
   20f18:	cmp	r0, #0
   20f1c:	bne	20f28 <__assert_fail@plt+0xf9c4>
   20f20:	mov	r0, r1
   20f24:	b	20eec <__assert_fail@plt+0xf988>
   20f28:	cmp	r1, #0
   20f2c:	push	{r4, lr}
   20f30:	bne	20f40 <__assert_fail@plt+0xf9dc>
   20f34:	bl	13648 <__assert_fail@plt+0x20e4>
   20f38:	mov	r0, #0
   20f3c:	pop	{r4, pc}
   20f40:	blt	20f4c <__assert_fail@plt+0xf9e8>
   20f44:	pop	{r4, lr}
   20f48:	b	112f4 <realloc@plt>
   20f4c:	bl	11414 <__errno_location@plt>
   20f50:	mov	r3, #12
   20f54:	str	r3, [r0]
   20f58:	b	20f38 <__assert_fail@plt+0xf9d4>
   20f5c:	push	{r4, r5, r6, lr}
   20f60:	mov	r4, r0
   20f64:	bl	11360 <__fpending@plt>
   20f68:	mov	r5, r0
   20f6c:	mov	r0, r4
   20f70:	bl	1136c <ferror_unlocked@plt>
   20f74:	mov	r6, r0
   20f78:	mov	r0, r4
   20f7c:	bl	1345c <__assert_fail@plt+0x1ef8>
   20f80:	cmp	r6, #0
   20f84:	mov	r4, r0
   20f88:	bne	20fb4 <__assert_fail@plt+0xfa50>
   20f8c:	cmp	r0, #0
   20f90:	beq	20fac <__assert_fail@plt+0xfa48>
   20f94:	cmp	r5, #0
   20f98:	bne	20fc4 <__assert_fail@plt+0xfa60>
   20f9c:	bl	11414 <__errno_location@plt>
   20fa0:	ldr	r4, [r0]
   20fa4:	subs	r4, r4, #9
   20fa8:	mvnne	r4, #0
   20fac:	mov	r0, r4
   20fb0:	pop	{r4, r5, r6, pc}
   20fb4:	cmp	r0, #0
   20fb8:	bne	20fc4 <__assert_fail@plt+0xfa60>
   20fbc:	bl	11414 <__errno_location@plt>
   20fc0:	str	r4, [r0]
   20fc4:	mvn	r4, #0
   20fc8:	b	20fac <__assert_fail@plt+0xfa48>
   20fcc:	ldr	ip, [r0, #4]
   20fd0:	cmp	ip, r1
   20fd4:	bcc	20fe4 <__assert_fail@plt+0xfa80>
   20fd8:	str	r1, [r0]
   20fdc:	mov	r0, #1
   20fe0:	bx	lr
   20fe4:	push	{r4, r5, r6, r7, r8, lr}
   20fe8:	umull	r6, r7, r1, r3
   20fec:	mov	r8, r3
   20ff0:	mov	r5, r1
   20ff4:	mov	r4, r0
   20ff8:	cmp	r7, #0
   20ffc:	bne	21044 <__assert_fail@plt+0xfae0>
   21000:	ldr	r0, [r0, #8]
   21004:	cmp	r0, r2
   21008:	bne	21058 <__assert_fail@plt+0xfaf4>
   2100c:	mov	r0, r6
   21010:	bl	20eec <__assert_fail@plt+0xf988>
   21014:	subs	r6, r0, #0
   21018:	beq	21050 <__assert_fail@plt+0xfaec>
   2101c:	ldr	r1, [r4, #8]
   21020:	cmp	r1, #0
   21024:	beq	21034 <__assert_fail@plt+0xfad0>
   21028:	ldr	r2, [r4]
   2102c:	mul	r2, r2, r8
   21030:	bl	11264 <memcpy@plt>
   21034:	mov	r0, #1
   21038:	str	r5, [r4]
   2103c:	stmib	r4, {r5, r6}
   21040:	pop	{r4, r5, r6, r7, r8, pc}
   21044:	bl	11414 <__errno_location@plt>
   21048:	mov	r3, #12
   2104c:	str	r3, [r0]
   21050:	mov	r0, #0
   21054:	pop	{r4, r5, r6, r7, r8, pc}
   21058:	mov	r1, r6
   2105c:	bl	20f18 <__assert_fail@plt+0xf9b4>
   21060:	subs	r6, r0, #0
   21064:	bne	21034 <__assert_fail@plt+0xfad0>
   21068:	b	21050 <__assert_fail@plt+0xfaec>
   2106c:	push	{r1, r2, r3}
   21070:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   21074:	add	r2, sp, #40	; 0x28
   21078:	ldr	r1, [sp, #36]	; 0x24
   2107c:	str	r2, [sp, #4]
   21080:	cmp	r1, #0
   21084:	beq	210d4 <__assert_fail@plt+0xfb70>
   21088:	movw	r3, #1030	; 0x406
   2108c:	mov	r5, r0
   21090:	cmp	r1, r3
   21094:	beq	210e0 <__assert_fail@plt+0xfb7c>
   21098:	cmp	r1, #11
   2109c:	beq	210c4 <__assert_fail@plt+0xfb60>
   210a0:	bgt	211d4 <__assert_fail@plt+0xfc70>
   210a4:	cmp	r1, #4
   210a8:	beq	211ec <__assert_fail@plt+0xfc88>
   210ac:	bgt	211cc <__assert_fail@plt+0xfc68>
   210b0:	cmp	r1, #2
   210b4:	beq	211ec <__assert_fail@plt+0xfc88>
   210b8:	bgt	210c4 <__assert_fail@plt+0xfb60>
   210bc:	cmp	r1, #1
   210c0:	bne	211ec <__assert_fail@plt+0xfc88>
   210c4:	mov	r0, r5
   210c8:	bl	114b0 <fcntl64@plt>
   210cc:	mov	r4, r0
   210d0:	b	21128 <__assert_fail@plt+0xfbc4>
   210d4:	ldr	r2, [sp, #40]	; 0x28
   210d8:	bl	114b0 <fcntl64@plt>
   210dc:	b	210cc <__assert_fail@plt+0xfb68>
   210e0:	ldr	r6, [pc, #304]	; 21218 <__assert_fail@plt+0xfcb4>
   210e4:	add	r3, sp, #44	; 0x2c
   210e8:	str	r3, [sp, #4]
   210ec:	ldr	r7, [r2]
   210f0:	ldr	r3, [r6]
   210f4:	mov	r8, r6
   210f8:	mov	r2, r7
   210fc:	cmp	r3, #0
   21100:	blt	21190 <__assert_fail@plt+0xfc2c>
   21104:	bl	114b0 <fcntl64@plt>
   21108:	subs	r4, r0, #0
   2110c:	bge	21120 <__assert_fail@plt+0xfbbc>
   21110:	bl	11414 <__errno_location@plt>
   21114:	ldr	r3, [r0]
   21118:	cmp	r3, #22
   2111c:	beq	2113c <__assert_fail@plt+0xfbd8>
   21120:	mov	r3, #1
   21124:	str	r3, [r8]
   21128:	mov	r0, r4
   2112c:	add	sp, sp, #12
   21130:	pop	{r4, r5, r6, r7, r8, lr}
   21134:	add	sp, sp, #12
   21138:	bx	lr
   2113c:	mov	r2, r7
   21140:	mov	r1, #0
   21144:	mov	r0, r5
   21148:	bl	114b0 <fcntl64@plt>
   2114c:	subs	r4, r0, #0
   21150:	mvnge	r3, #0
   21154:	strge	r3, [r6]
   21158:	blt	21128 <__assert_fail@plt+0xfbc4>
   2115c:	mov	r1, #1
   21160:	mov	r0, r4
   21164:	bl	114b0 <fcntl64@plt>
   21168:	subs	r2, r0, #0
   2116c:	bge	211b0 <__assert_fail@plt+0xfc4c>
   21170:	bl	11414 <__errno_location@plt>
   21174:	mov	r5, r0
   21178:	mov	r0, r4
   2117c:	ldr	r6, [r5]
   21180:	mvn	r4, #0
   21184:	bl	1154c <close@plt>
   21188:	str	r6, [r5]
   2118c:	b	21128 <__assert_fail@plt+0xfbc4>
   21190:	mov	r1, #0
   21194:	bl	114b0 <fcntl64@plt>
   21198:	subs	r4, r0, #0
   2119c:	blt	21128 <__assert_fail@plt+0xfbc4>
   211a0:	ldr	r3, [r6]
   211a4:	cmn	r3, #1
   211a8:	bne	21128 <__assert_fail@plt+0xfbc4>
   211ac:	b	2115c <__assert_fail@plt+0xfbf8>
   211b0:	orr	r2, r2, #1
   211b4:	mov	r1, #2
   211b8:	mov	r0, r4
   211bc:	bl	114b0 <fcntl64@plt>
   211c0:	cmn	r0, #1
   211c4:	bne	21128 <__assert_fail@plt+0xfbc4>
   211c8:	b	21170 <__assert_fail@plt+0xfc0c>
   211cc:	cmp	r1, #9
   211d0:	b	210c0 <__assert_fail@plt+0xfb5c>
   211d4:	movw	r2, #1031	; 0x407
   211d8:	cmp	r1, r2
   211dc:	bgt	211fc <__assert_fail@plt+0xfc98>
   211e0:	cmp	r1, r3
   211e4:	movwlt	r3, #1025	; 0x401
   211e8:	blt	21210 <__assert_fail@plt+0xfcac>
   211ec:	ldr	r3, [sp, #4]
   211f0:	mov	r0, r5
   211f4:	ldr	r2, [r3]
   211f8:	b	210d8 <__assert_fail@plt+0xfb74>
   211fc:	movw	r3, #1033	; 0x409
   21200:	cmp	r1, r3
   21204:	beq	211ec <__assert_fail@plt+0xfc88>
   21208:	blt	210c4 <__assert_fail@plt+0xfb60>
   2120c:	movw	r3, #1034	; 0x40a
   21210:	cmp	r1, r3
   21214:	b	210c0 <__assert_fail@plt+0xfb5c>
   21218:	andeq	r3, r3, r0, lsl #8
   2121c:	b	20eec <__assert_fail@plt+0xf988>
   21220:	cmp	r1, #0
   21224:	orreq	r1, r1, #1
   21228:	b	20f18 <__assert_fail@plt+0xf9b4>
   2122c:	b	20e98 <__assert_fail@plt+0xf934>
   21230:	cmp	r2, #0
   21234:	cmpne	r1, #0
   21238:	moveq	r2, #1
   2123c:	moveq	r1, r2
   21240:	b	212c8 <__assert_fail@plt+0xfd64>
   21244:	push	{r4, lr}
   21248:	mov	r0, #14
   2124c:	bl	114ec <nl_langinfo@plt>
   21250:	cmp	r0, #0
   21254:	beq	2126c <__assert_fail@plt+0xfd08>
   21258:	ldrb	r2, [r0]
   2125c:	ldr	r3, [pc, #16]	; 21274 <__assert_fail@plt+0xfd10>
   21260:	cmp	r2, #0
   21264:	moveq	r0, r3
   21268:	pop	{r4, pc}
   2126c:	ldr	r0, [pc]	; 21274 <__assert_fail@plt+0xfd10>
   21270:	pop	{r4, pc}
   21274:	andeq	r2, r2, fp, lsl #18
   21278:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2127c:	subs	r5, r0, #0
   21280:	mov	r7, r2
   21284:	addeq	r5, sp, #4
   21288:	mov	r6, r1
   2128c:	mov	r0, r5
   21290:	bl	11378 <mbrtowc@plt>
   21294:	cmp	r7, #0
   21298:	cmnne	r0, #3
   2129c:	mov	r4, r0
   212a0:	bls	212bc <__assert_fail@plt+0xfd58>
   212a4:	mov	r0, #0
   212a8:	bl	212f4 <__assert_fail@plt+0xfd90>
   212ac:	cmp	r0, #0
   212b0:	ldrbeq	r3, [r6]
   212b4:	moveq	r4, #1
   212b8:	streq	r3, [r5]
   212bc:	mov	r0, r4
   212c0:	add	sp, sp, #12
   212c4:	pop	{r4, r5, r6, r7, pc}
   212c8:	umull	r2, r3, r1, r2
   212cc:	cmp	r3, #0
   212d0:	bne	212dc <__assert_fail@plt+0xfd78>
   212d4:	mov	r1, r2
   212d8:	b	20f18 <__assert_fail@plt+0xf9b4>
   212dc:	push	{r4, lr}
   212e0:	bl	11414 <__errno_location@plt>
   212e4:	mov	r3, #12
   212e8:	str	r3, [r0]
   212ec:	mov	r0, #0
   212f0:	pop	{r4, pc}
   212f4:	push	{lr}		; (str lr, [sp, #-4]!)
   212f8:	sub	sp, sp, #268	; 0x10c
   212fc:	movw	r2, #257	; 0x101
   21300:	add	r1, sp, #4
   21304:	bl	21350 <__assert_fail@plt+0xfdec>
   21308:	cmp	r0, #0
   2130c:	movne	r0, #0
   21310:	bne	21340 <__assert_fail@plt+0xfddc>
   21314:	ldr	r1, [pc, #44]	; 21348 <__assert_fail@plt+0xfde4>
   21318:	add	r0, sp, #4
   2131c:	bl	111f8 <strcmp@plt>
   21320:	cmp	r0, #0
   21324:	beq	2133c <__assert_fail@plt+0xfdd8>
   21328:	ldr	r1, [pc, #28]	; 2134c <__assert_fail@plt+0xfde8>
   2132c:	add	r0, sp, #4
   21330:	bl	111f8 <strcmp@plt>
   21334:	adds	r0, r0, #0
   21338:	movne	r0, #1
   2133c:	and	r0, r0, #1
   21340:	add	sp, sp, #268	; 0x10c
   21344:	pop	{pc}		; (ldr pc, [sp], #4)
   21348:	andeq	r2, r2, r1, lsl r9
   2134c:	andeq	r2, r2, r3, lsl r9
   21350:	push	{r4, r5, r6, lr}
   21354:	mov	r5, r1
   21358:	mov	r1, #0
   2135c:	mov	r4, r2
   21360:	bl	114bc <setlocale@plt>
   21364:	subs	r6, r0, #0
   21368:	bne	2137c <__assert_fail@plt+0xfe18>
   2136c:	cmp	r4, #0
   21370:	mov	r0, #22
   21374:	strbne	r6, [r5]
   21378:	pop	{r4, r5, r6, pc}
   2137c:	bl	113fc <strlen@plt>
   21380:	cmp	r4, r0
   21384:	bls	213a0 <__assert_fail@plt+0xfe3c>
   21388:	add	r2, r0, #1
   2138c:	mov	r1, r6
   21390:	mov	r0, r5
   21394:	bl	11264 <memcpy@plt>
   21398:	mov	r0, #0
   2139c:	pop	{r4, r5, r6, pc}
   213a0:	cmp	r4, #0
   213a4:	beq	213c4 <__assert_fail@plt+0xfe60>
   213a8:	sub	r4, r4, #1
   213ac:	mov	r1, r6
   213b0:	mov	r2, r4
   213b4:	mov	r0, r5
   213b8:	bl	11264 <memcpy@plt>
   213bc:	mov	r3, #0
   213c0:	strb	r3, [r5, r4]
   213c4:	mov	r0, #34	; 0x22
   213c8:	pop	{r4, r5, r6, pc}
   213cc:	mov	r1, #0
   213d0:	b	114bc <setlocale@plt>
   213d4:	cmp	r3, #0
   213d8:	cmpeq	r2, #0
   213dc:	bne	21400 <__assert_fail@plt+0xfe9c>
   213e0:	cmp	r1, #0
   213e4:	movlt	r1, #-2147483648	; 0x80000000
   213e8:	movlt	r0, #0
   213ec:	blt	213fc <__assert_fail@plt+0xfe98>
   213f0:	cmpeq	r0, #0
   213f4:	mvnne	r1, #-2147483648	; 0x80000000
   213f8:	mvnne	r0, #0
   213fc:	b	214e4 <__assert_fail@plt+0xff80>
   21400:	sub	sp, sp, #8
   21404:	push	{sp, lr}
   21408:	cmp	r1, #0
   2140c:	blt	2142c <__assert_fail@plt+0xfec8>
   21410:	cmp	r3, #0
   21414:	blt	21460 <__assert_fail@plt+0xfefc>
   21418:	bl	214f4 <__assert_fail@plt+0xff90>
   2141c:	ldr	lr, [sp, #4]
   21420:	add	sp, sp, #8
   21424:	pop	{r2, r3}
   21428:	bx	lr
   2142c:	rsbs	r0, r0, #0
   21430:	sbc	r1, r1, r1, lsl #1
   21434:	cmp	r3, #0
   21438:	blt	21484 <__assert_fail@plt+0xff20>
   2143c:	bl	214f4 <__assert_fail@plt+0xff90>
   21440:	ldr	lr, [sp, #4]
   21444:	add	sp, sp, #8
   21448:	pop	{r2, r3}
   2144c:	rsbs	r0, r0, #0
   21450:	sbc	r1, r1, r1, lsl #1
   21454:	rsbs	r2, r2, #0
   21458:	sbc	r3, r3, r3, lsl #1
   2145c:	bx	lr
   21460:	rsbs	r2, r2, #0
   21464:	sbc	r3, r3, r3, lsl #1
   21468:	bl	214f4 <__assert_fail@plt+0xff90>
   2146c:	ldr	lr, [sp, #4]
   21470:	add	sp, sp, #8
   21474:	pop	{r2, r3}
   21478:	rsbs	r0, r0, #0
   2147c:	sbc	r1, r1, r1, lsl #1
   21480:	bx	lr
   21484:	rsbs	r2, r2, #0
   21488:	sbc	r3, r3, r3, lsl #1
   2148c:	bl	214f4 <__assert_fail@plt+0xff90>
   21490:	ldr	lr, [sp, #4]
   21494:	add	sp, sp, #8
   21498:	pop	{r2, r3}
   2149c:	rsbs	r2, r2, #0
   214a0:	sbc	r3, r3, r3, lsl #1
   214a4:	bx	lr
   214a8:	cmp	r3, #0
   214ac:	cmpeq	r2, #0
   214b0:	bne	214c8 <__assert_fail@plt+0xff64>
   214b4:	cmp	r1, #0
   214b8:	cmpeq	r0, #0
   214bc:	mvnne	r1, #0
   214c0:	mvnne	r0, #0
   214c4:	b	214e4 <__assert_fail@plt+0xff80>
   214c8:	sub	sp, sp, #8
   214cc:	push	{sp, lr}
   214d0:	bl	214f4 <__assert_fail@plt+0xff90>
   214d4:	ldr	lr, [sp, #4]
   214d8:	add	sp, sp, #8
   214dc:	pop	{r2, r3}
   214e0:	bx	lr
   214e4:	push	{r1, lr}
   214e8:	mov	r0, #8
   214ec:	bl	111d4 <raise@plt>
   214f0:	pop	{r1, pc}
   214f4:	cmp	r1, r3
   214f8:	cmpeq	r0, r2
   214fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21500:	mov	r4, r0
   21504:	movcc	r0, #0
   21508:	mov	r5, r1
   2150c:	ldr	lr, [sp, #36]	; 0x24
   21510:	movcc	r1, r0
   21514:	bcc	21610 <__assert_fail@plt+0x100ac>
   21518:	cmp	r3, #0
   2151c:	clzeq	ip, r2
   21520:	clzne	ip, r3
   21524:	addeq	ip, ip, #32
   21528:	cmp	r5, #0
   2152c:	clzeq	r1, r4
   21530:	addeq	r1, r1, #32
   21534:	clzne	r1, r5
   21538:	sub	ip, ip, r1
   2153c:	sub	sl, ip, #32
   21540:	lsl	r9, r3, ip
   21544:	rsb	fp, ip, #32
   21548:	orr	r9, r9, r2, lsl sl
   2154c:	orr	r9, r9, r2, lsr fp
   21550:	lsl	r8, r2, ip
   21554:	cmp	r5, r9
   21558:	cmpeq	r4, r8
   2155c:	movcc	r0, #0
   21560:	movcc	r1, r0
   21564:	bcc	21580 <__assert_fail@plt+0x1001c>
   21568:	mov	r0, #1
   2156c:	subs	r4, r4, r8
   21570:	lsl	r1, r0, sl
   21574:	orr	r1, r1, r0, lsr fp
   21578:	lsl	r0, r0, ip
   2157c:	sbc	r5, r5, r9
   21580:	cmp	ip, #0
   21584:	beq	21610 <__assert_fail@plt+0x100ac>
   21588:	lsr	r6, r8, #1
   2158c:	orr	r6, r6, r9, lsl #31
   21590:	lsr	r7, r9, #1
   21594:	mov	r2, ip
   21598:	b	215bc <__assert_fail@plt+0x10058>
   2159c:	subs	r3, r4, r6
   215a0:	sbc	r8, r5, r7
   215a4:	adds	r3, r3, r3
   215a8:	adc	r8, r8, r8
   215ac:	adds	r4, r3, #1
   215b0:	adc	r5, r8, #0
   215b4:	subs	r2, r2, #1
   215b8:	beq	215d8 <__assert_fail@plt+0x10074>
   215bc:	cmp	r5, r7
   215c0:	cmpeq	r4, r6
   215c4:	bcs	2159c <__assert_fail@plt+0x10038>
   215c8:	adds	r4, r4, r4
   215cc:	adc	r5, r5, r5
   215d0:	subs	r2, r2, #1
   215d4:	bne	215bc <__assert_fail@plt+0x10058>
   215d8:	lsr	r3, r4, ip
   215dc:	orr	r3, r3, r5, lsl fp
   215e0:	lsr	r2, r5, ip
   215e4:	orr	r3, r3, r5, lsr sl
   215e8:	adds	r0, r0, r4
   215ec:	mov	r4, r3
   215f0:	lsl	r3, r2, ip
   215f4:	orr	r3, r3, r4, lsl sl
   215f8:	lsl	ip, r4, ip
   215fc:	orr	r3, r3, r4, lsr fp
   21600:	adc	r1, r1, r5
   21604:	subs	r0, r0, ip
   21608:	mov	r5, r2
   2160c:	sbc	r1, r1, r3
   21610:	cmp	lr, #0
   21614:	strdne	r4, [lr]
   21618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2161c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21620:	mov	r7, r0
   21624:	ldr	r6, [pc, #72]	; 21674 <__assert_fail@plt+0x10110>
   21628:	ldr	r5, [pc, #72]	; 21678 <__assert_fail@plt+0x10114>
   2162c:	add	r6, pc, r6
   21630:	add	r5, pc, r5
   21634:	sub	r6, r6, r5
   21638:	mov	r8, r1
   2163c:	mov	r9, r2
   21640:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   21644:	asrs	r6, r6, #2
   21648:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2164c:	mov	r4, #0
   21650:	add	r4, r4, #1
   21654:	ldr	r3, [r5], #4
   21658:	mov	r2, r9
   2165c:	mov	r1, r8
   21660:	mov	r0, r7
   21664:	blx	r3
   21668:	cmp	r6, r4
   2166c:	bne	21650 <__assert_fail@plt+0x100ec>
   21670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21674:	andeq	r1, r1, r0, ror #17
   21678:	ldrdeq	r1, [r1], -r8
   2167c:	bx	lr
   21680:	ldr	r3, [pc, #12]	; 21694 <__assert_fail@plt+0x10130>
   21684:	mov	r1, #0
   21688:	add	r3, pc, r3
   2168c:	ldr	r2, [r3]
   21690:	b	11438 <__cxa_atexit@plt>
   21694:	andeq	r1, r1, ip, asr #21

Disassembly of section .fini:

00021698 <.fini>:
   21698:	push	{r3, lr}
   2169c:	pop	{r3, pc}
