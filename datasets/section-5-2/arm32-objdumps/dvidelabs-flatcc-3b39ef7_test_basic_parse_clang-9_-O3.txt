
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d4 <.init>:
   128d4:	push	{r3, lr}
   128d8:	bl	12a0c <_start@@Base+0x3c>
   128dc:	pop	{r3, pc}

Disassembly of section .plt:

000128e0 <free@plt-0x14>:
   128e0:	push	{lr}		; (str lr, [sp, #-4]!)
   128e4:	ldr	lr, [pc, #4]	; 128f0 <free@plt-0x4>
   128e8:	add	lr, pc, lr
   128ec:	ldr	pc, [lr, #8]!
   128f0:	andeq	lr, r1, r0, lsl r7

000128f4 <free@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #122880	; 0x1e000
   128fc:	ldr	pc, [ip, #1808]!	; 0x710

00012900 <memcpy@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #122880	; 0x1e000
   12908:	ldr	pc, [ip, #1800]!	; 0x708

0001290c <__isinff@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #122880	; 0x1e000
   12914:	ldr	pc, [ip, #1792]!	; 0x700

00012918 <__isinf@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #122880	; 0x1e000
   12920:	ldr	pc, [ip, #1784]!	; 0x6f8

00012924 <realloc@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #122880	; 0x1e000
   1292c:	ldr	pc, [ip, #1776]!	; 0x6f0

00012930 <fwrite@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #122880	; 0x1e000
   12938:	ldr	pc, [ip, #1768]!	; 0x6e8

0001293c <malloc@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #122880	; 0x1e000
   12944:	ldr	pc, [ip, #1760]!	; 0x6e0

00012948 <__libc_start_main@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #122880	; 0x1e000
   12950:	ldr	pc, [ip, #1752]!	; 0x6d8

00012954 <__gmon_start__@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #122880	; 0x1e000
   1295c:	ldr	pc, [ip, #1744]!	; 0x6d0

00012960 <bcmp@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #122880	; 0x1e000
   12968:	ldr	pc, [ip, #1736]!	; 0x6c8

0001296c <strlen@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #122880	; 0x1e000
   12974:	ldr	pc, [ip, #1728]!	; 0x6c0

00012978 <fprintf@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #122880	; 0x1e000
   12980:	ldr	pc, [ip, #1720]!	; 0x6b8

00012984 <posix_memalign@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #122880	; 0x1e000
   1298c:	ldr	pc, [ip, #1712]!	; 0x6b0

00012990 <memset@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #122880	; 0x1e000
   12998:	ldr	pc, [ip, #1704]!	; 0x6a8

0001299c <strtod@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #122880	; 0x1e000
   129a4:	ldr	pc, [ip, #1696]!	; 0x6a0

000129a8 <memchr@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #122880	; 0x1e000
   129b0:	ldr	pc, [ip, #1688]!	; 0x698

000129b4 <abort@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #122880	; 0x1e000
   129bc:	ldr	pc, [ip, #1680]!	; 0x690

000129c0 <__assert_fail@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #122880	; 0x1e000
   129c8:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12948 <__libc_start_main@plt>
   129fc:	bl	129b4 <abort@plt>
   12a00:	andeq	lr, r1, r0, lsr #1
   12a04:	andeq	r3, r1, r0, lsl pc
   12a08:	andeq	lr, r1, r0, asr #32
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12954 <__gmon_start__@plt>
   12a28:	andeq	lr, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r4, asr r0
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	r1, r3, r0, rrx
   12a54:	andeq	r1, r3, r0, rrx
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	r1, r3, r0, rrx
   12a8c:	andeq	r1, r3, r0, rrx
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	r1, r3, r4, rrx
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #84	; 0x54
   12acc:	vmov.i32	q8, #0	; 0x00000000
   12ad0:	mov	r9, r0
   12ad4:	add	r0, sp, #24
   12ad8:	mov	r4, r1
   12adc:	str	r3, [sp, #12]
   12ae0:	mov	r7, r2
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	add	r1, r0, #16
   12af0:	vst1.64	{d16-d17}, [r1]
   12af4:	mov	r1, #28
   12af8:	vst1.64	{d16-d17}, [r0], r1
   12afc:	movw	r1, #58170	; 0xe33a
   12b00:	vst1.32	{d16-d17}, [r0]
   12b04:	mov	r0, #1
   12b08:	movt	r1, #1
   12b0c:	str	r4, [sp, #28]
   12b10:	str	r0, [sp, #40]	; 0x28
   12b14:	mov	r0, r9
   12b18:	bl	15038 <flatcc_builder_start_buffer@@Base>
   12b1c:	sub	r0, r7, r4
   12b20:	cmp	r0, #2
   12b24:	blt	12b98 <test@@Base+0xd8>
   12b28:	ldrb	r0, [r4]
   12b2c:	cmp	r0, #32
   12b30:	bls	12b84 <test@@Base+0xc4>
   12b34:	mov	r6, r4
   12b38:	movw	r4, #4192	; 0x1060
   12b3c:	cmp	r6, r7
   12b40:	movt	r4, #3
   12b44:	beq	13cd8 <test@@Base+0x1218>
   12b48:	bcs	13d54 <test@@Base+0x1294>
   12b4c:	ldrb	r0, [r6]
   12b50:	cmp	r0, #123	; 0x7b
   12b54:	bne	13d54 <test@@Base+0x1294>
   12b58:	add	r1, r6, #1
   12b5c:	sub	r0, r7, r1
   12b60:	cmp	r0, #2
   12b64:	blt	12bd0 <test@@Base+0x110>
   12b68:	ldrb	r0, [r1]
   12b6c:	cmp	r0, #32
   12b70:	bls	12bc0 <test@@Base+0x100>
   12b74:	mov	r6, r1
   12b78:	cmp	r6, r7
   12b7c:	bne	12be8 <test@@Base+0x128>
   12b80:	b	13cd8 <test@@Base+0x1218>
   12b84:	bne	12b98 <test@@Base+0xd8>
   12b88:	mov	r6, r4
   12b8c:	ldrb	r0, [r6, #1]!
   12b90:	cmp	r0, #32
   12b94:	bhi	12bac <test@@Base+0xec>
   12b98:	add	r0, sp, #24
   12b9c:	mov	r1, r4
   12ba0:	mov	r2, r7
   12ba4:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   12ba8:	mov	r6, r0
   12bac:	movw	r4, #4192	; 0x1060
   12bb0:	cmp	r6, r7
   12bb4:	movt	r4, #3
   12bb8:	bne	12b48 <test@@Base+0x88>
   12bbc:	b	13cd8 <test@@Base+0x1218>
   12bc0:	bne	12bd0 <test@@Base+0x110>
   12bc4:	ldrb	r0, [r6, #2]!
   12bc8:	cmp	r0, #32
   12bcc:	bhi	12be0 <test@@Base+0x120>
   12bd0:	add	r0, sp, #24
   12bd4:	mov	r2, r7
   12bd8:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   12bdc:	mov	r6, r0
   12be0:	cmp	r6, r7
   12be4:	beq	13cd8 <test@@Base+0x1218>
   12be8:	mov	r0, r9
   12bec:	mov	r1, #11
   12bf0:	bl	16634 <flatcc_builder_start_table@@Base>
   12bf4:	add	r0, sp, #20
   12bf8:	add	r5, sp, #24
   12bfc:	str	r9, [sp, #16]
   12c00:	add	r0, r0, #1
   12c04:	str	r0, [sp, #8]
   12c08:	cmp	r6, r7
   12c0c:	mov	ip, r7
   12c10:	beq	12c5c <test@@Base+0x19c>
   12c14:	ldrb	r0, [r6]
   12c18:	cmp	r0, #46	; 0x2e
   12c1c:	beq	12c34 <test@@Base+0x174>
   12c20:	cmp	r0, #34	; 0x22
   12c24:	bne	12c50 <test@@Base+0x190>
   12c28:	mov	r0, #0
   12c2c:	add	ip, r6, #1
   12c30:	b	12c58 <test@@Base+0x198>
   12c34:	mov	r0, r5
   12c38:	mov	r1, r6
   12c3c:	mov	r2, r7
   12c40:	mov	r3, #5
   12c44:	bl	19784 <flatcc_json_parser_set_error@@Base>
   12c48:	mov	ip, r0
   12c4c:	b	12c5c <test@@Base+0x19c>
   12c50:	mov	r0, #1
   12c54:	mov	ip, r6
   12c58:	str	r0, [sp, #36]	; 0x24
   12c5c:	sub	r3, r7, ip
   12c60:	mov	r0, #8
   12c64:	mov	r8, r7
   12c68:	cmp	r3, #8
   12c6c:	movcc	r0, r3
   12c70:	sub	r7, r0, #1
   12c74:	cmp	r7, #7
   12c78:	bhi	13d40 <test@@Base+0x1280>
   12c7c:	add	r4, pc, #32
   12c80:	mov	sl, #0
   12c84:	mov	lr, #0
   12c88:	mov	r9, #0
   12c8c:	mov	r0, #0
   12c90:	mov	r6, #0
   12c94:	mov	r5, #0
   12c98:	mov	r1, #0
   12c9c:	mov	r2, #0
   12ca0:	ldr	pc, [r4, r7, lsl #2]
   12ca4:	andeq	r2, r1, r8, lsl #26
   12ca8:	andeq	r2, r1, r0, lsl #26
   12cac:	strdeq	r2, [r1], -r8
   12cb0:	strdeq	r2, [r1], -r0
   12cb4:	andeq	r2, r1, r4, ror #25
   12cb8:	ldrdeq	r2, [r1], -r8
   12cbc:	andeq	r2, r1, r8, asr #25
   12cc0:	andeq	r2, r1, r4, asr #25
   12cc4:	ldrb	lr, [ip, #7]
   12cc8:	ldrb	r0, [ip, #6]
   12ccc:	mov	r9, sl
   12cd0:	orr	r0, lr, r0, lsl #8
   12cd4:	mov	sl, r0
   12cd8:	ldrb	r0, [ip, #5]
   12cdc:	orr	sl, sl, r0, lsl #16
   12ce0:	mov	r0, r9
   12ce4:	ldrb	r1, [ip, #4]
   12ce8:	mov	r6, r0
   12cec:	orr	sl, sl, r1, lsl #24
   12cf0:	ldrb	r0, [ip, #3]
   12cf4:	orr	r5, r0, r6
   12cf8:	ldrb	r0, [ip, #2]
   12cfc:	orr	r1, r5, r0, lsl #8
   12d00:	ldrb	r0, [ip, #1]
   12d04:	orr	r2, r1, r0, lsl #16
   12d08:	mov	r1, ip
   12d0c:	cmp	r3, #8
   12d10:	movw	r6, #25455	; 0x636f
   12d14:	ldrb	r0, [r1], #8
   12d18:	movt	r6, #29541	; 0x7365
   12d1c:	movle	r1, r8
   12d20:	orr	r3, r2, r0, lsl #24
   12d24:	mov	r0, sl
   12d28:	movw	r2, #0
   12d2c:	bfc	r0, #0, #16
   12d30:	movt	r2, #28260	; 0x6e64
   12d34:	subs	r2, r0, r2
   12d38:	sbcs	r2, r3, r6
   12d3c:	bcs	12e14 <test@@Base+0x354>
   12d40:	movw	r0, #29299	; 0x7273
   12d44:	ldr	r9, [sp, #16]
   12d48:	and	r1, sl, #-16777216	; 0xff000000
   12d4c:	movw	r4, #4192	; 0x1060
   12d50:	add	r5, sp, #24
   12d54:	movt	r0, #26217	; 0x6669
   12d58:	eor	r1, r1, #1946157056	; 0x74000000
   12d5c:	movt	r4, #3
   12d60:	eor	r0, r3, r0
   12d64:	orrs	r0, r1, r0
   12d68:	bne	13d40 <test@@Base+0x1280>
   12d6c:	ldr	r1, [sp, #36]	; 0x24
   12d70:	add	r0, ip, #5
   12d74:	mov	r7, r8
   12d78:	cmp	r1, #0
   12d7c:	beq	12fb4 <test@@Base+0x4f4>
   12d80:	cmp	r0, r8
   12d84:	mov	r1, r8
   12d88:	beq	134bc <test@@Base+0x9fc>
   12d8c:	ldrb	r3, [r0]
   12d90:	mov	r1, r0
   12d94:	cmp	r3, #33	; 0x21
   12d98:	bcc	134bc <test@@Base+0x9fc>
   12d9c:	add	r1, ip, #6
   12da0:	uxtb	r0, r3
   12da4:	cmp	r0, #46	; 0x2e
   12da8:	cmpne	r0, #95	; 0x5f
   12dac:	bne	12dc8 <test@@Base+0x308>
   12db0:	cmp	r7, r1
   12db4:	beq	134b0 <test@@Base+0x9f0>
   12db8:	ldrb	r3, [r1], #1
   12dbc:	cmp	r3, #33	; 0x21
   12dc0:	bcs	12da0 <test@@Base+0x2e0>
   12dc4:	b	12df8 <test@@Base+0x338>
   12dc8:	sxtb	r2, r3
   12dcc:	cmp	r2, #0
   12dd0:	bmi	12db0 <test@@Base+0x2f0>
   12dd4:	sub	r2, r3, #48	; 0x30
   12dd8:	uxtb	r2, r2
   12ddc:	cmp	r2, #9
   12de0:	bls	12db0 <test@@Base+0x2f0>
   12de4:	orr	r2, r3, #32
   12de8:	sub	r2, r2, #97	; 0x61
   12dec:	uxtb	r2, r2
   12df0:	cmp	r2, #26
   12df4:	bcc	12db0 <test@@Base+0x2f0>
   12df8:	sub	r1, r1, #1
   12dfc:	cmp	r0, #46	; 0x2e
   12e00:	bne	134bc <test@@Base+0x9fc>
   12e04:	mov	r0, r5
   12e08:	mov	r2, r7
   12e0c:	mov	r3, #5
   12e10:	b	13520 <test@@Base+0xa60>
   12e14:	movw	r2, #27764	; 0x6c74
   12e18:	mov	r7, r8
   12e1c:	movt	r2, #31349	; 0x7a75
   12e20:	cmp	r3, r2
   12e24:	bhi	12efc <test@@Base+0x43c>
   12e28:	movw	r5, #29472	; 0x7320
   12e2c:	movt	r5, #28260	; 0x6e64
   12e30:	subs	r2, sl, r5
   12e34:	sbcs	r2, r3, r6
   12e38:	bcs	13008 <test@@Base+0x548>
   12e3c:	movw	r1, #0
   12e40:	movt	r1, #28260	; 0x6e64
   12e44:	eor	r0, r0, r1
   12e48:	eor	r1, r3, r6
   12e4c:	orrs	r0, r0, r1
   12e50:	bne	13d84 <test@@Base+0x12c4>
   12e54:	ldr	r1, [sp, #36]	; 0x24
   12e58:	ldr	r9, [sp, #16]
   12e5c:	movw	r4, #4192	; 0x1060
   12e60:	add	r0, ip, #6
   12e64:	movt	r4, #3
   12e68:	cmp	r1, #0
   12e6c:	beq	13458 <test@@Base+0x998>
   12e70:	cmp	r0, r7
   12e74:	mov	r1, r7
   12e78:	add	r5, sp, #24
   12e7c:	beq	138a8 <test@@Base+0xde8>
   12e80:	ldrb	r3, [r0]
   12e84:	mov	r1, r0
   12e88:	cmp	r3, #33	; 0x21
   12e8c:	bcc	138a8 <test@@Base+0xde8>
   12e90:	add	r1, ip, #7
   12e94:	uxtb	r0, r3
   12e98:	cmp	r0, #46	; 0x2e
   12e9c:	cmpne	r0, #95	; 0x5f
   12ea0:	bne	12ebc <test@@Base+0x3fc>
   12ea4:	cmp	r7, r1
   12ea8:	beq	1360c <test@@Base+0xb4c>
   12eac:	ldrb	r3, [r1], #1
   12eb0:	cmp	r3, #33	; 0x21
   12eb4:	bcs	12e94 <test@@Base+0x3d4>
   12eb8:	b	12eec <test@@Base+0x42c>
   12ebc:	sxtb	r2, r3
   12ec0:	cmp	r2, #0
   12ec4:	bmi	12ea4 <test@@Base+0x3e4>
   12ec8:	sub	r2, r3, #48	; 0x30
   12ecc:	uxtb	r2, r2
   12ed0:	cmp	r2, #9
   12ed4:	bls	12ea4 <test@@Base+0x3e4>
   12ed8:	orr	r2, r3, #32
   12edc:	sub	r2, r2, #97	; 0x61
   12ee0:	uxtb	r2, r2
   12ee4:	cmp	r2, #26
   12ee8:	bcc	12ea4 <test@@Base+0x3e4>
   12eec:	sub	r1, r1, #1
   12ef0:	cmp	r0, #46	; 0x2e
   12ef4:	beq	13618 <test@@Base+0xb58>
   12ef8:	b	138a8 <test@@Base+0xde8>
   12efc:	movw	r0, #27765	; 0x6c75
   12f00:	movt	r0, #31349	; 0x7a75
   12f04:	teq	r3, r0
   12f08:	bne	13d84 <test@@Base+0x12c4>
   12f0c:	ldr	r1, [sp, #36]	; 0x24
   12f10:	ldr	r9, [sp, #16]
   12f14:	movw	r4, #4192	; 0x1060
   12f18:	add	r0, ip, #4
   12f1c:	movt	r4, #3
   12f20:	cmp	r1, #0
   12f24:	beq	13144 <test@@Base+0x684>
   12f28:	cmp	r0, r7
   12f2c:	mov	r1, r7
   12f30:	add	r5, sp, #24
   12f34:	beq	13640 <test@@Base+0xb80>
   12f38:	ldrb	r3, [r0]
   12f3c:	mov	r1, r0
   12f40:	cmp	r3, #33	; 0x21
   12f44:	bcc	13640 <test@@Base+0xb80>
   12f48:	add	r1, ip, #5
   12f4c:	uxtb	r0, r3
   12f50:	cmp	r0, #46	; 0x2e
   12f54:	cmpne	r0, #95	; 0x5f
   12f58:	bne	12f74 <test@@Base+0x4b4>
   12f5c:	cmp	r7, r1
   12f60:	beq	134f4 <test@@Base+0xa34>
   12f64:	ldrb	r3, [r1], #1
   12f68:	cmp	r3, #33	; 0x21
   12f6c:	bcs	12f4c <test@@Base+0x48c>
   12f70:	b	12fa4 <test@@Base+0x4e4>
   12f74:	sxtb	r2, r3
   12f78:	cmp	r2, #0
   12f7c:	bmi	12f5c <test@@Base+0x49c>
   12f80:	sub	r2, r3, #48	; 0x30
   12f84:	uxtb	r2, r2
   12f88:	cmp	r2, #9
   12f8c:	bls	12f5c <test@@Base+0x49c>
   12f90:	orr	r2, r3, #32
   12f94:	sub	r2, r2, #97	; 0x61
   12f98:	uxtb	r2, r2
   12f9c:	cmp	r2, #26
   12fa0:	bcc	12f5c <test@@Base+0x49c>
   12fa4:	sub	r1, r1, #1
   12fa8:	cmp	r0, #46	; 0x2e
   12fac:	beq	13500 <test@@Base+0xa40>
   12fb0:	b	13640 <test@@Base+0xb80>
   12fb4:	cmp	r0, r8
   12fb8:	mov	r1, r8
   12fbc:	bne	12fd8 <test@@Base+0x518>
   12fc0:	b	13514 <test@@Base+0xa54>
   12fc4:	cmp	r1, #34	; 0x22
   12fc8:	beq	13244 <test@@Base+0x784>
   12fcc:	add	r0, r0, #1
   12fd0:	cmp	r0, r7
   12fd4:	beq	13000 <test@@Base+0x540>
   12fd8:	ldrb	r1, [r0]
   12fdc:	cmp	r1, #92	; 0x5c
   12fe0:	bne	12fc4 <test@@Base+0x504>
   12fe4:	sub	r1, r7, r0
   12fe8:	cmp	r1, #2
   12fec:	blt	13510 <test@@Base+0xa50>
   12ff0:	add	r0, r0, #1
   12ff4:	add	r0, r0, #1
   12ff8:	cmp	r0, r7
   12ffc:	bne	12fd8 <test@@Base+0x518>
   13000:	mov	r1, r7
   13004:	b	13514 <test@@Base+0xa54>
   13008:	eor	r0, sl, r5
   1300c:	eor	r2, r3, r6
   13010:	orrs	r0, r0, r2
   13014:	bne	13d84 <test@@Base+0x12c4>
   13018:	sub	r0, r7, r1
   1301c:	mov	r2, #8
   13020:	ldr	r9, [sp, #16]
   13024:	movw	r4, #4192	; 0x1060
   13028:	add	r5, sp, #24
   1302c:	cmp	r0, #8
   13030:	movt	r4, #3
   13034:	movcs	r0, r2
   13038:	sub	r2, r0, #1
   1303c:	cmp	r2, #7
   13040:	bhi	13e90 <test@@Base+0x13d0>
   13044:	add	r3, pc, #4
   13048:	mov	r0, #0
   1304c:	ldr	pc, [r3, r2, lsl #2]
   13050:	andeq	r3, r1, r4, lsl #1
   13054:	andeq	r3, r1, ip, ror r0
   13058:	andeq	r3, r1, r4, ror r0
   1305c:	andeq	r3, r1, r0, ror r0
   13060:	andeq	r3, r1, r0, ror r0
   13064:	andeq	r3, r1, r0, ror r0
   13068:	andeq	r3, r1, r0, ror r0
   1306c:	andeq	r3, r1, r0, ror r0
   13070:	ldrb	r0, [r1, #3]
   13074:	ldrb	r2, [r1, #2]
   13078:	orr	r0, r0, r2, lsl #8
   1307c:	ldrb	r2, [r1, #1]
   13080:	orr	r0, r0, r2, lsl #16
   13084:	ldrb	r2, [r1]
   13088:	orr	r0, r0, r2, lsl #24
   1308c:	movw	r2, #26227	; 0x6673
   13090:	movt	r2, #27749	; 0x6c65
   13094:	cmp	r0, r2
   13098:	bhi	1319c <test@@Base+0x6dc>
   1309c:	movw	r2, #24932	; 0x6164
   130a0:	movt	r2, #27749	; 0x6c65
   130a4:	teq	r0, r2
   130a8:	bne	13e90 <test@@Base+0x13d0>
   130ac:	ldr	r2, [sp, #36]	; 0x24
   130b0:	add	r0, r1, #4
   130b4:	cmp	r2, #0
   130b8:	beq	13550 <test@@Base+0xa90>
   130bc:	cmp	r0, r7
   130c0:	mov	r2, r7
   130c4:	beq	13a20 <test@@Base+0xf60>
   130c8:	ldrb	r3, [r0]
   130cc:	mov	r2, r0
   130d0:	cmp	r3, #33	; 0x21
   130d4:	bcc	13a20 <test@@Base+0xf60>
   130d8:	add	r1, r1, #5
   130dc:	uxtb	r0, r3
   130e0:	cmp	r0, #46	; 0x2e
   130e4:	cmpne	r0, #95	; 0x5f
   130e8:	bne	13104 <test@@Base+0x644>
   130ec:	cmp	r7, r1
   130f0:	beq	139a0 <test@@Base+0xee0>
   130f4:	ldrb	r3, [r1], #1
   130f8:	cmp	r3, #33	; 0x21
   130fc:	bcs	130dc <test@@Base+0x61c>
   13100:	b	13134 <test@@Base+0x674>
   13104:	sxtb	r2, r3
   13108:	cmp	r2, #0
   1310c:	bmi	130ec <test@@Base+0x62c>
   13110:	sub	r2, r3, #48	; 0x30
   13114:	uxtb	r2, r2
   13118:	cmp	r2, #9
   1311c:	bls	130ec <test@@Base+0x62c>
   13120:	orr	r2, r3, #32
   13124:	sub	r2, r2, #97	; 0x61
   13128:	uxtb	r2, r2
   1312c:	cmp	r2, #26
   13130:	bcc	130ec <test@@Base+0x62c>
   13134:	sub	r2, r1, #1
   13138:	cmp	r0, #46	; 0x2e
   1313c:	beq	139ac <test@@Base+0xeec>
   13140:	b	13a20 <test@@Base+0xf60>
   13144:	cmp	r0, r7
   13148:	mov	r1, r7
   1314c:	add	r5, sp, #24
   13150:	bne	1316c <test@@Base+0x6ac>
   13154:	b	1362c <test@@Base+0xb6c>
   13158:	cmp	r1, #34	; 0x22
   1315c:	beq	134e0 <test@@Base+0xa20>
   13160:	add	r0, r0, #1
   13164:	cmp	r0, r7
   13168:	beq	13194 <test@@Base+0x6d4>
   1316c:	ldrb	r1, [r0]
   13170:	cmp	r1, #92	; 0x5c
   13174:	bne	13158 <test@@Base+0x698>
   13178:	sub	r1, r7, r0
   1317c:	cmp	r1, #2
   13180:	blt	13628 <test@@Base+0xb68>
   13184:	add	r0, r0, #1
   13188:	add	r0, r0, #1
   1318c:	cmp	r0, r7
   13190:	bne	1316c <test@@Base+0x6ac>
   13194:	mov	r1, r7
   13198:	b	1362c <test@@Base+0xb6c>
   1319c:	movw	r2, #26228	; 0x6674
   131a0:	movt	r2, #27749	; 0x6c65
   131a4:	teq	r0, r2
   131a8:	bne	13e90 <test@@Base+0x13d0>
   131ac:	ldr	r2, [sp, #36]	; 0x24
   131b0:	add	r0, r1, #4
   131b4:	cmp	r2, #0
   131b8:	beq	135a4 <test@@Base+0xae4>
   131bc:	cmp	r0, r7
   131c0:	mov	r2, r7
   131c4:	beq	13b98 <test@@Base+0x10d8>
   131c8:	ldrb	r3, [r0]
   131cc:	mov	r2, r0
   131d0:	cmp	r3, #33	; 0x21
   131d4:	bcc	13b98 <test@@Base+0x10d8>
   131d8:	add	r1, r1, #5
   131dc:	uxtb	r0, r3
   131e0:	cmp	r0, #46	; 0x2e
   131e4:	cmpne	r0, #95	; 0x5f
   131e8:	bne	13204 <test@@Base+0x744>
   131ec:	cmp	r7, r1
   131f0:	beq	139c0 <test@@Base+0xf00>
   131f4:	ldrb	r3, [r1], #1
   131f8:	cmp	r3, #33	; 0x21
   131fc:	bcs	131dc <test@@Base+0x71c>
   13200:	b	13234 <test@@Base+0x774>
   13204:	sxtb	r2, r3
   13208:	cmp	r2, #0
   1320c:	bmi	131ec <test@@Base+0x72c>
   13210:	sub	r2, r3, #48	; 0x30
   13214:	uxtb	r2, r2
   13218:	cmp	r2, #9
   1321c:	bls	131ec <test@@Base+0x72c>
   13220:	orr	r2, r3, #32
   13224:	sub	r2, r2, #97	; 0x61
   13228:	uxtb	r2, r2
   1322c:	cmp	r2, #26
   13230:	bcc	131ec <test@@Base+0x72c>
   13234:	sub	r2, r1, #1
   13238:	cmp	r0, #46	; 0x2e
   1323c:	beq	139cc <test@@Base+0xf0c>
   13240:	b	13b98 <test@@Base+0x10d8>
   13244:	add	r1, r0, #1
   13248:	sub	r0, r7, r1
   1324c:	cmp	r0, #2
   13250:	blt	13534 <test@@Base+0xa74>
   13254:	ldrb	r0, [r1]
   13258:	cmp	r0, #32
   1325c:	bls	132a8 <test@@Base+0x7e8>
   13260:	mov	sl, r1
   13264:	cmp	sl, r7
   13268:	beq	13cd8 <test@@Base+0x1218>
   1326c:	bcs	13d64 <test@@Base+0x12a4>
   13270:	ldrb	r0, [sl]
   13274:	cmp	r0, #58	; 0x3a
   13278:	bne	13d64 <test@@Base+0x12a4>
   1327c:	add	r1, sl, #1
   13280:	sub	r0, r7, r1
   13284:	cmp	r0, #2
   13288:	blt	132d8 <test@@Base+0x818>
   1328c:	ldrb	r0, [r1]
   13290:	cmp	r0, #32
   13294:	bls	132c8 <test@@Base+0x808>
   13298:	mov	sl, r1
   1329c:	cmp	sl, r7
   132a0:	bne	132f0 <test@@Base+0x830>
   132a4:	b	13cd8 <test@@Base+0x1218>
   132a8:	bne	13534 <test@@Base+0xa74>
   132ac:	mov	sl, r1
   132b0:	ldrb	r0, [sl, #1]!
   132b4:	cmp	r0, #32
   132b8:	bls	13534 <test@@Base+0xa74>
   132bc:	cmp	sl, r7
   132c0:	bne	1326c <test@@Base+0x7ac>
   132c4:	b	13cd8 <test@@Base+0x1218>
   132c8:	bne	132d8 <test@@Base+0x818>
   132cc:	ldrb	r0, [sl, #2]!
   132d0:	cmp	r0, #32
   132d4:	bhi	132e8 <test@@Base+0x828>
   132d8:	mov	r0, r5
   132dc:	mov	r2, r7
   132e0:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   132e4:	mov	sl, r0
   132e8:	cmp	sl, r7
   132ec:	beq	13cd8 <test@@Base+0x1218>
   132f0:	mov	r0, r9
   132f4:	mov	r1, #0
   132f8:	mov	r2, #1
   132fc:	mov	r3, #1
   13300:	bl	17988 <flatcc_builder_table_add@@Base>
   13304:	cmp	r0, #0
   13308:	beq	13e50 <test@@Base+0x1390>
   1330c:	mov	r6, r0
   13310:	mov	r0, #0
   13314:	mov	r1, sl
   13318:	mov	r2, r7
   1331c:	sub	r3, fp, #44	; 0x2c
   13320:	str	r0, [fp, #-36]	; 0xffffffdc
   13324:	str	r0, [fp, #-40]	; 0xffffffd8
   13328:	str	r0, [fp, #-44]	; 0xffffffd4
   1332c:	strb	r0, [r6]
   13330:	sub	r0, fp, #40	; 0x28
   13334:	str	r0, [sp]
   13338:	mov	r0, r5
   1333c:	bl	1bc90 <flatcc_json_parser_integer@@Base>
   13340:	cmp	r0, sl
   13344:	mov	r1, sl
   13348:	beq	134d4 <test@@Base+0xa14>
   1334c:	mov	r2, r0
   13350:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13354:	cmp	r0, #0
   13358:	beq	13370 <test@@Base+0x8b0>
   1335c:	mov	r1, r2
   13360:	mov	r0, r5
   13364:	mov	r2, r7
   13368:	mov	r3, #8
   1336c:	b	13394 <test@@Base+0x8d4>
   13370:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13374:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13378:	subs	r3, r0, #256	; 0x100
   1337c:	sbcs	r1, r1, #0
   13380:	bcc	134cc <test@@Base+0xa0c>
   13384:	mov	r1, r2
   13388:	mov	r0, r5
   1338c:	mov	r2, r7
   13390:	mov	r3, #7
   13394:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13398:	mov	r1, r0
   1339c:	cmp	sl, r1
   133a0:	beq	13e50 <test@@Base+0x1390>
   133a4:	sub	r0, r7, r1
   133a8:	cmp	r0, #2
   133ac:	blt	13818 <test@@Base+0xd58>
   133b0:	ldrb	r0, [r1]
   133b4:	cmp	r0, #32
   133b8:	bls	1340c <test@@Base+0x94c>
   133bc:	mov	r6, r1
   133c0:	cmp	r6, r7
   133c4:	beq	13cd8 <test@@Base+0x1218>
   133c8:	ldrb	r0, [r6]
   133cc:	cmp	r0, #44	; 0x2c
   133d0:	bne	13dc0 <test@@Base+0x1300>
   133d4:	add	r1, r6, #1
   133d8:	sub	r0, r7, r1
   133dc:	cmp	r0, #2
   133e0:	blt	1343c <test@@Base+0x97c>
   133e4:	ldrb	r0, [r1]
   133e8:	cmp	r0, #32
   133ec:	bls	1342c <test@@Base+0x96c>
   133f0:	mov	r6, r1
   133f4:	cmp	r6, r7
   133f8:	beq	13cd8 <test@@Base+0x1218>
   133fc:	ldrb	r0, [r6]
   13400:	cmp	r0, #125	; 0x7d
   13404:	bne	12c08 <test@@Base+0x148>
   13408:	b	13dbc <test@@Base+0x12fc>
   1340c:	bne	13818 <test@@Base+0xd58>
   13410:	mov	r6, r1
   13414:	ldrb	r0, [r6, #1]!
   13418:	cmp	r0, #32
   1341c:	bls	13818 <test@@Base+0xd58>
   13420:	cmp	r6, r7
   13424:	bne	133c8 <test@@Base+0x908>
   13428:	b	13cd8 <test@@Base+0x1218>
   1342c:	bne	1343c <test@@Base+0x97c>
   13430:	ldrb	r0, [r6, #2]!
   13434:	cmp	r0, #32
   13438:	bhi	1344c <test@@Base+0x98c>
   1343c:	mov	r0, r5
   13440:	mov	r2, r7
   13444:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13448:	mov	r6, r0
   1344c:	cmp	r6, r7
   13450:	bne	133fc <test@@Base+0x93c>
   13454:	b	13cd8 <test@@Base+0x1218>
   13458:	cmp	r0, r7
   1345c:	mov	r1, r7
   13460:	add	r5, sp, #24
   13464:	bne	13480 <test@@Base+0x9c0>
   13468:	b	13894 <test@@Base+0xdd4>
   1346c:	cmp	r1, #34	; 0x22
   13470:	beq	135f8 <test@@Base+0xb38>
   13474:	add	r0, r0, #1
   13478:	cmp	r0, r7
   1347c:	beq	134a8 <test@@Base+0x9e8>
   13480:	ldrb	r1, [r0]
   13484:	cmp	r1, #92	; 0x5c
   13488:	bne	1346c <test@@Base+0x9ac>
   1348c:	sub	r1, r7, r0
   13490:	cmp	r1, #2
   13494:	blt	13890 <test@@Base+0xdd0>
   13498:	add	r0, r0, #1
   1349c:	add	r0, r0, #1
   134a0:	cmp	r0, r7
   134a4:	bne	13480 <test@@Base+0x9c0>
   134a8:	mov	r1, r7
   134ac:	b	13894 <test@@Base+0xdd4>
   134b0:	mov	r1, r7
   134b4:	cmp	r0, #46	; 0x2e
   134b8:	beq	12e04 <test@@Base+0x344>
   134bc:	sub	r0, r7, r1
   134c0:	cmp	r0, #2
   134c4:	blt	13534 <test@@Base+0xa74>
   134c8:	b	13254 <test@@Base+0x794>
   134cc:	strb	r0, [r6]
   134d0:	mov	r1, r2
   134d4:	cmp	sl, r1
   134d8:	bne	133a4 <test@@Base+0x8e4>
   134dc:	b	13e50 <test@@Base+0x1390>
   134e0:	add	r1, r0, #1
   134e4:	sub	r0, r7, r1
   134e8:	cmp	r0, #2
   134ec:	bge	1364c <test@@Base+0xb8c>
   134f0:	b	13848 <test@@Base+0xd88>
   134f4:	mov	r1, r7
   134f8:	cmp	r0, #46	; 0x2e
   134fc:	bne	13640 <test@@Base+0xb80>
   13500:	mov	r0, r5
   13504:	mov	r2, r7
   13508:	mov	r3, #5
   1350c:	b	13638 <test@@Base+0xb78>
   13510:	mov	r1, r0
   13514:	mov	r0, r5
   13518:	mov	r2, r7
   1351c:	mov	r3, #20
   13520:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13524:	mov	r1, r0
   13528:	sub	r0, r7, r1
   1352c:	cmp	r0, #2
   13530:	bge	13254 <test@@Base+0x794>
   13534:	mov	r0, r5
   13538:	mov	r2, r7
   1353c:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13540:	mov	sl, r0
   13544:	cmp	sl, r7
   13548:	bne	1326c <test@@Base+0x7ac>
   1354c:	b	13cd8 <test@@Base+0x1218>
   13550:	cmp	r0, r7
   13554:	mov	r1, r7
   13558:	bne	13574 <test@@Base+0xab4>
   1355c:	b	13a0c <test@@Base+0xf4c>
   13560:	cmp	r1, #34	; 0x22
   13564:	beq	139e0 <test@@Base+0xf20>
   13568:	add	r0, r0, #1
   1356c:	cmp	r0, r7
   13570:	beq	1359c <test@@Base+0xadc>
   13574:	ldrb	r1, [r0]
   13578:	cmp	r1, #92	; 0x5c
   1357c:	bne	13560 <test@@Base+0xaa0>
   13580:	sub	r1, r7, r0
   13584:	cmp	r1, #2
   13588:	blt	13a08 <test@@Base+0xf48>
   1358c:	add	r0, r0, #1
   13590:	add	r0, r0, #1
   13594:	cmp	r0, r7
   13598:	bne	13574 <test@@Base+0xab4>
   1359c:	mov	r1, r7
   135a0:	b	13a0c <test@@Base+0xf4c>
   135a4:	cmp	r0, r7
   135a8:	mov	r1, r7
   135ac:	bne	135c8 <test@@Base+0xb08>
   135b0:	b	13b84 <test@@Base+0x10c4>
   135b4:	cmp	r1, #34	; 0x22
   135b8:	beq	139f4 <test@@Base+0xf34>
   135bc:	add	r0, r0, #1
   135c0:	cmp	r0, r7
   135c4:	beq	135f0 <test@@Base+0xb30>
   135c8:	ldrb	r1, [r0]
   135cc:	cmp	r1, #92	; 0x5c
   135d0:	bne	135b4 <test@@Base+0xaf4>
   135d4:	sub	r1, r7, r0
   135d8:	cmp	r1, #2
   135dc:	blt	13b80 <test@@Base+0x10c0>
   135e0:	add	r0, r0, #1
   135e4:	add	r0, r0, #1
   135e8:	cmp	r0, r7
   135ec:	bne	135c8 <test@@Base+0xb08>
   135f0:	mov	r1, r7
   135f4:	b	13b84 <test@@Base+0x10c4>
   135f8:	add	r1, r0, #1
   135fc:	sub	r0, r7, r1
   13600:	cmp	r0, #2
   13604:	bge	138b4 <test@@Base+0xdf4>
   13608:	b	1391c <test@@Base+0xe5c>
   1360c:	mov	r1, r7
   13610:	cmp	r0, #46	; 0x2e
   13614:	bne	138a8 <test@@Base+0xde8>
   13618:	mov	r0, r5
   1361c:	mov	r2, r7
   13620:	mov	r3, #5
   13624:	b	138a0 <test@@Base+0xde0>
   13628:	mov	r1, r0
   1362c:	mov	r0, r5
   13630:	mov	r2, r7
   13634:	mov	r3, #20
   13638:	bl	19784 <flatcc_json_parser_set_error@@Base>
   1363c:	mov	r1, r0
   13640:	sub	r0, r7, r1
   13644:	cmp	r0, #2
   13648:	blt	13848 <test@@Base+0xd88>
   1364c:	ldrb	r0, [r1]
   13650:	cmp	r0, #32
   13654:	bls	13834 <test@@Base+0xd74>
   13658:	mov	r6, r1
   1365c:	cmp	r6, r7
   13660:	beq	13cd8 <test@@Base+0x1218>
   13664:	bcs	13e24 <test@@Base+0x1364>
   13668:	ldrb	r0, [r6]
   1366c:	cmp	r0, #58	; 0x3a
   13670:	bne	13e24 <test@@Base+0x1364>
   13674:	add	r1, r6, #1
   13678:	sub	r0, r7, r1
   1367c:	cmp	r0, #2
   13680:	blt	13874 <test@@Base+0xdb4>
   13684:	ldrb	r0, [r1]
   13688:	cmp	r0, #32
   1368c:	bls	13864 <test@@Base+0xda4>
   13690:	mov	r6, r1
   13694:	cmp	r6, r7
   13698:	beq	13cd8 <test@@Base+0x1218>
   1369c:	ldrb	r0, [r6]
   136a0:	cmp	r0, #34	; 0x22
   136a4:	bne	136b0 <test@@Base+0xbf0>
   136a8:	add	r6, r6, #1
   136ac:	b	136c8 <test@@Base+0xc08>
   136b0:	mov	r0, r5
   136b4:	mov	r1, r6
   136b8:	mov	r2, r7
   136bc:	mov	r3, #16
   136c0:	bl	19784 <flatcc_json_parser_set_error@@Base>
   136c4:	mov	r6, r0
   136c8:	mov	r0, r5
   136cc:	mov	r1, r6
   136d0:	mov	r2, r7
   136d4:	bl	197bc <flatcc_json_parser_string_part@@Base>
   136d8:	cmp	r0, r7
   136dc:	beq	13cf0 <test@@Base+0x1230>
   136e0:	mov	sl, r0
   136e4:	ldrb	r0, [r0]
   136e8:	cmp	r0, #34	; 0x22
   136ec:	bne	13710 <test@@Base+0xc50>
   136f0:	sub	r2, sl, r6
   136f4:	mov	r0, r9
   136f8:	mov	r1, r6
   136fc:	bl	18680 <flatcc_builder_create_string@@Base>
   13700:	mov	r6, r0
   13704:	cmp	r0, #0
   13708:	bne	137b4 <test@@Base+0xcf4>
   1370c:	b	13e50 <test@@Base+0x1390>
   13710:	mov	r0, r9
   13714:	bl	16494 <flatcc_builder_start_string@@Base>
   13718:	mov	r0, r9
   1371c:	sub	r9, sl, r6
   13720:	mov	r1, r9
   13724:	bl	15bf0 <flatcc_builder_extend_string@@Base>
   13728:	cmp	r0, #0
   1372c:	beq	13ef8 <test@@Base+0x1438>
   13730:	mov	r1, r6
   13734:	mov	r2, r9
   13738:	bl	12900 <memcpy@plt>
   1373c:	ldr	r9, [sp, #16]
   13740:	mov	r0, r5
   13744:	mov	r1, sl
   13748:	mov	r2, r7
   1374c:	add	r3, sp, #20
   13750:	bl	1996c <flatcc_json_parser_string_escape@@Base>
   13754:	ldrb	r2, [sp, #20]
   13758:	ldr	r1, [sp, #8]
   1375c:	mov	r6, r0
   13760:	mov	r0, r9
   13764:	bl	15d04 <flatcc_builder_append_string@@Base>
   13768:	mov	r0, r5
   1376c:	mov	r1, r6
   13770:	mov	r2, r7
   13774:	bl	197bc <flatcc_json_parser_string_part@@Base>
   13778:	cmp	r0, r7
   1377c:	beq	13cf0 <test@@Base+0x1230>
   13780:	mov	sl, r0
   13784:	sub	r2, r0, r6
   13788:	mov	r0, r9
   1378c:	mov	r1, r6
   13790:	bl	15d04 <flatcc_builder_append_string@@Base>
   13794:	ldrb	r0, [sl]
   13798:	cmp	r0, #34	; 0x22
   1379c:	bne	13740 <test@@Base+0xc80>
   137a0:	mov	r0, r9
   137a4:	bl	187e8 <flatcc_builder_end_string@@Base>
   137a8:	mov	r6, r0
   137ac:	cmp	r0, #0
   137b0:	beq	13e50 <test@@Base+0x1390>
   137b4:	mov	r0, r9
   137b8:	mov	r1, #10
   137bc:	bl	177f8 <flatcc_builder_table_add_offset@@Base>
   137c0:	cmp	r0, #0
   137c4:	beq	13e50 <test@@Base+0x1390>
   137c8:	cmp	sl, r7
   137cc:	str	r6, [r0]
   137d0:	beq	137f4 <test@@Base+0xd34>
   137d4:	ldrb	r0, [sl]
   137d8:	cmp	r0, #34	; 0x22
   137dc:	bne	137f4 <test@@Base+0xd34>
   137e0:	add	r1, sl, #1
   137e4:	sub	r0, r7, r1
   137e8:	cmp	r0, #2
   137ec:	bge	133b0 <test@@Base+0x8f0>
   137f0:	b	13818 <test@@Base+0xd58>
   137f4:	mov	r0, r5
   137f8:	mov	r1, sl
   137fc:	mov	r2, r7
   13800:	mov	r3, #20
   13804:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13808:	mov	r1, r0
   1380c:	sub	r0, r7, r1
   13810:	cmp	r0, #2
   13814:	bge	133b0 <test@@Base+0x8f0>
   13818:	mov	r0, r5
   1381c:	mov	r2, r7
   13820:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13824:	mov	r6, r0
   13828:	cmp	r6, r7
   1382c:	bne	133c8 <test@@Base+0x908>
   13830:	b	13cd8 <test@@Base+0x1218>
   13834:	bne	13848 <test@@Base+0xd88>
   13838:	mov	r6, r1
   1383c:	ldrb	r0, [r6, #1]!
   13840:	cmp	r0, #32
   13844:	bhi	13858 <test@@Base+0xd98>
   13848:	mov	r0, r5
   1384c:	mov	r2, r7
   13850:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13854:	mov	r6, r0
   13858:	cmp	r6, r7
   1385c:	bne	13664 <test@@Base+0xba4>
   13860:	b	13cd8 <test@@Base+0x1218>
   13864:	bne	13874 <test@@Base+0xdb4>
   13868:	ldrb	r0, [r6, #2]!
   1386c:	cmp	r0, #32
   13870:	bhi	13884 <test@@Base+0xdc4>
   13874:	mov	r0, r5
   13878:	mov	r2, r7
   1387c:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13880:	mov	r6, r0
   13884:	cmp	r6, r7
   13888:	bne	1369c <test@@Base+0xbdc>
   1388c:	b	13cd8 <test@@Base+0x1218>
   13890:	mov	r1, r0
   13894:	mov	r0, r5
   13898:	mov	r2, r7
   1389c:	mov	r3, #20
   138a0:	bl	19784 <flatcc_json_parser_set_error@@Base>
   138a4:	mov	r1, r0
   138a8:	sub	r0, r7, r1
   138ac:	cmp	r0, #2
   138b0:	blt	1391c <test@@Base+0xe5c>
   138b4:	ldrb	r0, [r1]
   138b8:	cmp	r0, #32
   138bc:	bls	13908 <test@@Base+0xe48>
   138c0:	mov	sl, r1
   138c4:	cmp	sl, r7
   138c8:	beq	13cd8 <test@@Base+0x1218>
   138cc:	bcs	13d64 <test@@Base+0x12a4>
   138d0:	ldrb	r0, [sl]
   138d4:	cmp	r0, #58	; 0x3a
   138d8:	bne	13d64 <test@@Base+0x12a4>
   138dc:	add	r1, sl, #1
   138e0:	sub	r0, r7, r1
   138e4:	cmp	r0, #2
   138e8:	blt	13948 <test@@Base+0xe88>
   138ec:	ldrb	r0, [r1]
   138f0:	cmp	r0, #32
   138f4:	bls	13938 <test@@Base+0xe78>
   138f8:	mov	sl, r1
   138fc:	cmp	sl, r7
   13900:	bne	13960 <test@@Base+0xea0>
   13904:	b	13cd8 <test@@Base+0x1218>
   13908:	bne	1391c <test@@Base+0xe5c>
   1390c:	mov	sl, r1
   13910:	ldrb	r0, [sl, #1]!
   13914:	cmp	r0, #32
   13918:	bhi	1392c <test@@Base+0xe6c>
   1391c:	mov	r0, r5
   13920:	mov	r2, r7
   13924:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13928:	mov	sl, r0
   1392c:	cmp	sl, r7
   13930:	bne	138cc <test@@Base+0xe0c>
   13934:	b	13cd8 <test@@Base+0x1218>
   13938:	bne	13948 <test@@Base+0xe88>
   1393c:	ldrb	r0, [sl, #2]!
   13940:	cmp	r0, #32
   13944:	bhi	13958 <test@@Base+0xe98>
   13948:	mov	r0, r5
   1394c:	mov	r2, r7
   13950:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13954:	mov	sl, r0
   13958:	cmp	sl, r7
   1395c:	beq	13cd8 <test@@Base+0x1218>
   13960:	mov	r0, r9
   13964:	mov	r1, #1
   13968:	mov	r2, #8
   1396c:	mov	r3, #8
   13970:	bl	17988 <flatcc_builder_table_add@@Base>
   13974:	cmp	r0, #0
   13978:	beq	13e50 <test@@Base+0x1390>
   1397c:	mov	r3, r0
   13980:	mov	r0, r5
   13984:	mov	r1, sl
   13988:	mov	r2, r7
   1398c:	bl	1b120 <flatcc_json_parser_double@@Base>
   13990:	mov	r1, r0
   13994:	cmp	sl, r0
   13998:	bne	133a4 <test@@Base+0x8e4>
   1399c:	b	13e50 <test@@Base+0x1390>
   139a0:	mov	r2, r7
   139a4:	cmp	r0, #46	; 0x2e
   139a8:	bne	13a20 <test@@Base+0xf60>
   139ac:	mov	r1, r2
   139b0:	mov	r0, r5
   139b4:	mov	r2, r7
   139b8:	mov	r3, #5
   139bc:	b	13a18 <test@@Base+0xf58>
   139c0:	mov	r2, r7
   139c4:	cmp	r0, #46	; 0x2e
   139c8:	bne	13b98 <test@@Base+0x10d8>
   139cc:	mov	r1, r2
   139d0:	mov	r0, r5
   139d4:	mov	r2, r7
   139d8:	mov	r3, #5
   139dc:	b	13b90 <test@@Base+0x10d0>
   139e0:	add	r2, r0, #1
   139e4:	sub	r0, r7, r2
   139e8:	cmp	r0, #2
   139ec:	bge	13a2c <test@@Base+0xf6c>
   139f0:	b	13a5c <test@@Base+0xf9c>
   139f4:	add	r2, r0, #1
   139f8:	sub	r0, r7, r2
   139fc:	cmp	r0, #2
   13a00:	bge	13ba4 <test@@Base+0x10e4>
   13a04:	b	13bd4 <test@@Base+0x1114>
   13a08:	mov	r1, r0
   13a0c:	mov	r0, r5
   13a10:	mov	r2, r7
   13a14:	mov	r3, #20
   13a18:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13a1c:	mov	r2, r0
   13a20:	sub	r0, r7, r2
   13a24:	cmp	r0, #2
   13a28:	blt	13a5c <test@@Base+0xf9c>
   13a2c:	ldrb	r0, [r2]
   13a30:	cmp	r0, #32
   13a34:	bls	13a48 <test@@Base+0xf88>
   13a38:	mov	sl, r2
   13a3c:	cmp	sl, r7
   13a40:	bne	13a78 <test@@Base+0xfb8>
   13a44:	b	13cd8 <test@@Base+0x1218>
   13a48:	bne	13a5c <test@@Base+0xf9c>
   13a4c:	mov	sl, r2
   13a50:	ldrb	r0, [sl, #1]!
   13a54:	cmp	r0, #32
   13a58:	bhi	13a70 <test@@Base+0xfb0>
   13a5c:	mov	r1, r2
   13a60:	mov	r0, r5
   13a64:	mov	r2, r7
   13a68:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13a6c:	mov	sl, r0
   13a70:	cmp	sl, r7
   13a74:	beq	13cd8 <test@@Base+0x1218>
   13a78:	bcs	13d64 <test@@Base+0x12a4>
   13a7c:	ldrb	r0, [sl]
   13a80:	cmp	r0, #58	; 0x3a
   13a84:	bne	13d64 <test@@Base+0x12a4>
   13a88:	add	r1, sl, #1
   13a8c:	sub	r0, r7, r1
   13a90:	cmp	r0, #2
   13a94:	blt	13ac4 <test@@Base+0x1004>
   13a98:	ldrb	r0, [r1]
   13a9c:	cmp	r0, #32
   13aa0:	bls	13ab4 <test@@Base+0xff4>
   13aa4:	mov	sl, r1
   13aa8:	cmp	sl, r7
   13aac:	bne	13adc <test@@Base+0x101c>
   13ab0:	b	13cd8 <test@@Base+0x1218>
   13ab4:	bne	13ac4 <test@@Base+0x1004>
   13ab8:	ldrb	r0, [sl, #2]!
   13abc:	cmp	r0, #32
   13ac0:	bhi	13ad4 <test@@Base+0x1014>
   13ac4:	mov	r0, r5
   13ac8:	mov	r2, r7
   13acc:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13ad0:	mov	sl, r0
   13ad4:	cmp	sl, r7
   13ad8:	beq	13cd8 <test@@Base+0x1218>
   13adc:	mov	r0, r9
   13ae0:	mov	r1, #3
   13ae4:	mov	r2, #8
   13ae8:	mov	r3, #8
   13aec:	bl	17988 <flatcc_builder_table_add@@Base>
   13af0:	cmp	r0, #0
   13af4:	beq	13e50 <test@@Base+0x1390>
   13af8:	mov	r6, r0
   13afc:	mov	r0, #0
   13b00:	mov	r1, sl
   13b04:	mov	r2, r7
   13b08:	sub	r3, fp, #44	; 0x2c
   13b0c:	str	r0, [fp, #-36]	; 0xffffffdc
   13b10:	str	r0, [fp, #-40]	; 0xffffffd8
   13b14:	str	r0, [fp, #-44]	; 0xffffffd4
   13b18:	str	r0, [r6]
   13b1c:	str	r0, [r6, #4]
   13b20:	sub	r0, fp, #40	; 0x28
   13b24:	str	r0, [sp]
   13b28:	mov	r0, r5
   13b2c:	bl	1bc90 <flatcc_json_parser_integer@@Base>
   13b30:	cmp	r0, sl
   13b34:	mov	r1, sl
   13b38:	beq	134d4 <test@@Base+0xa14>
   13b3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13b40:	mov	r2, r0
   13b44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13b48:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13b4c:	cmp	r3, #0
   13b50:	beq	13b70 <test@@Base+0x10b0>
   13b54:	subs	r3, r0, #1
   13b58:	sbcs	r3, r1, #-2147483648	; 0x80000000
   13b5c:	bcs	1335c <test@@Base+0x89c>
   13b60:	rsbs	r0, r0, #0
   13b64:	rsc	r1, r1, #0
   13b68:	strd	r0, [r6]
   13b6c:	b	134d0 <test@@Base+0xa10>
   13b70:	cmn	r1, #1
   13b74:	ble	13384 <test@@Base+0x8c4>
   13b78:	strd	r0, [r6]
   13b7c:	b	134d0 <test@@Base+0xa10>
   13b80:	mov	r1, r0
   13b84:	mov	r0, r5
   13b88:	mov	r2, r7
   13b8c:	mov	r3, #20
   13b90:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13b94:	mov	r2, r0
   13b98:	sub	r0, r7, r2
   13b9c:	cmp	r0, #2
   13ba0:	blt	13bd4 <test@@Base+0x1114>
   13ba4:	ldrb	r0, [r2]
   13ba8:	cmp	r0, #32
   13bac:	bls	13bc0 <test@@Base+0x1100>
   13bb0:	mov	sl, r2
   13bb4:	cmp	sl, r7
   13bb8:	bne	13bf0 <test@@Base+0x1130>
   13bbc:	b	13cd8 <test@@Base+0x1218>
   13bc0:	bne	13bd4 <test@@Base+0x1114>
   13bc4:	mov	sl, r2
   13bc8:	ldrb	r0, [sl, #1]!
   13bcc:	cmp	r0, #32
   13bd0:	bhi	13be8 <test@@Base+0x1128>
   13bd4:	mov	r1, r2
   13bd8:	mov	r0, r5
   13bdc:	mov	r2, r7
   13be0:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13be4:	mov	sl, r0
   13be8:	cmp	sl, r7
   13bec:	beq	13cd8 <test@@Base+0x1218>
   13bf0:	bcs	13d64 <test@@Base+0x12a4>
   13bf4:	ldrb	r0, [sl]
   13bf8:	cmp	r0, #58	; 0x3a
   13bfc:	bne	13d64 <test@@Base+0x12a4>
   13c00:	add	r1, sl, #1
   13c04:	sub	r0, r7, r1
   13c08:	cmp	r0, #2
   13c0c:	blt	13c3c <test@@Base+0x117c>
   13c10:	ldrb	r0, [r1]
   13c14:	cmp	r0, #32
   13c18:	bls	13c2c <test@@Base+0x116c>
   13c1c:	mov	sl, r1
   13c20:	cmp	sl, r7
   13c24:	bne	13c54 <test@@Base+0x1194>
   13c28:	b	13cd8 <test@@Base+0x1218>
   13c2c:	bne	13c3c <test@@Base+0x117c>
   13c30:	ldrb	r0, [sl, #2]!
   13c34:	cmp	r0, #32
   13c38:	bhi	13c4c <test@@Base+0x118c>
   13c3c:	mov	r0, r5
   13c40:	mov	r2, r7
   13c44:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13c48:	mov	sl, r0
   13c4c:	cmp	sl, r7
   13c50:	beq	13cd8 <test@@Base+0x1218>
   13c54:	mov	r0, r9
   13c58:	mov	r1, #2
   13c5c:	mov	r2, #4
   13c60:	mov	r3, #4
   13c64:	bl	17988 <flatcc_builder_table_add@@Base>
   13c68:	cmp	r0, #0
   13c6c:	beq	13e50 <test@@Base+0x1390>
   13c70:	mov	r6, r0
   13c74:	mov	r0, #0
   13c78:	mov	r1, sl
   13c7c:	mov	r2, r7
   13c80:	sub	r3, fp, #44	; 0x2c
   13c84:	str	r0, [fp, #-36]	; 0xffffffdc
   13c88:	str	r0, [fp, #-40]	; 0xffffffd8
   13c8c:	str	r0, [fp, #-44]	; 0xffffffd4
   13c90:	str	r0, [r6]
   13c94:	sub	r0, fp, #40	; 0x28
   13c98:	str	r0, [sp]
   13c9c:	mov	r0, r5
   13ca0:	bl	1bc90 <flatcc_json_parser_integer@@Base>
   13ca4:	cmp	r0, sl
   13ca8:	mov	r1, sl
   13cac:	beq	134d4 <test@@Base+0xa14>
   13cb0:	mov	r2, r0
   13cb4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13cb8:	cmp	r0, #0
   13cbc:	bne	1335c <test@@Base+0x89c>
   13cc0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13cc4:	cmp	r0, #0
   13cc8:	bne	13384 <test@@Base+0x8c4>
   13ccc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13cd0:	str	r0, [r6]
   13cd4:	b	134d0 <test@@Base+0xa10>
   13cd8:	ldr	r3, [r4]
   13cdc:	movw	r0, #58175	; 0xe33f
   13ce0:	mov	r1, #13
   13ce4:	mov	r2, #1
   13ce8:	movt	r0, #1
   13cec:	bl	12930 <fwrite@plt>
   13cf0:	mov	sl, r7
   13cf4:	ldr	r0, [sp, #48]	; 0x30
   13cf8:	ldr	r4, [r4]
   13cfc:	cmp	r0, #0
   13d00:	beq	13e60 <test@@Base+0x13a0>
   13d04:	ldr	r5, [sp, #28]
   13d08:	ldr	r6, [sp, #40]	; 0x28
   13d0c:	ldr	r7, [sp, #60]	; 0x3c
   13d10:	bl	19764 <flatcc_json_parser_error_string@@Base>
   13d14:	movw	r1, #58238	; 0xe37e
   13d18:	str	r0, [sp]
   13d1c:	sub	r0, r7, r5
   13d20:	mov	r2, r6
   13d24:	movt	r1, #1
   13d28:	add	r3, r0, #1
   13d2c:	mov	r0, r4
   13d30:	bl	12978 <fprintf@plt>
   13d34:	mov	r0, r9
   13d38:	bl	146bc <flatcc_builder_reset@@Base>
   13d3c:	b	13e78 <test@@Base+0x13b8>
   13d40:	add	r0, sp, #24
   13d44:	mov	r1, ip
   13d48:	mov	r2, r8
   13d4c:	mov	r3, #13
   13d50:	b	13e48 <test@@Base+0x1388>
   13d54:	ldr	r0, [r4]
   13d58:	movw	r1, #58189	; 0xe34d
   13d5c:	mov	r2, #123	; 0x7b
   13d60:	b	13e30 <test@@Base+0x1370>
   13d64:	ldr	r0, [r4]
   13d68:	movw	r1, #58189	; 0xe34d
   13d6c:	mov	r2, #58	; 0x3a
   13d70:	movt	r1, #1
   13d74:	bl	12978 <fprintf@plt>
   13d78:	add	r0, sp, #24
   13d7c:	mov	r1, sl
   13d80:	b	13e40 <test@@Base+0x1380>
   13d84:	add	r0, sp, #24
   13d88:	mov	r1, ip
   13d8c:	mov	r2, r7
   13d90:	mov	r3, #13
   13d94:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13d98:	ldr	r9, [sp, #16]
   13d9c:	movw	r4, #4192	; 0x1060
   13da0:	mov	sl, r0
   13da4:	movt	r4, #3
   13da8:	ldr	r0, [sp, #48]	; 0x30
   13dac:	ldr	r4, [r4]
   13db0:	cmp	r0, #0
   13db4:	beq	13e60 <test@@Base+0x13a0>
   13db8:	b	13d04 <test@@Base+0x1244>
   13dbc:	mov	r0, #125	; 0x7d
   13dc0:	cmp	r6, r7
   13dc4:	bcs	13e14 <test@@Base+0x1354>
   13dc8:	cmp	r0, #125	; 0x7d
   13dcc:	bne	13e14 <test@@Base+0x1354>
   13dd0:	mov	r0, r9
   13dd4:	bl	16fdc <flatcc_builder_end_table@@Base>
   13dd8:	mov	r1, r0
   13ddc:	mov	r0, r9
   13de0:	bl	15228 <flatcc_builder_end_buffer@@Base>
   13de4:	add	r1, r6, #1
   13de8:	sub	r0, r7, r1
   13dec:	cmp	r0, #2
   13df0:	blt	13eac <test@@Base+0x13ec>
   13df4:	ldrb	r0, [r1]
   13df8:	cmp	r0, #32
   13dfc:	bls	13e9c <test@@Base+0x13dc>
   13e00:	mov	r6, r1
   13e04:	cmp	r6, r7
   13e08:	mov	sl, r7
   13e0c:	beq	13e50 <test@@Base+0x1390>
   13e10:	b	13ec8 <test@@Base+0x1408>
   13e14:	ldr	r0, [r4]
   13e18:	movw	r1, #58189	; 0xe34d
   13e1c:	mov	r2, #125	; 0x7d
   13e20:	b	13e30 <test@@Base+0x1370>
   13e24:	ldr	r0, [r4]
   13e28:	movw	r1, #58189	; 0xe34d
   13e2c:	mov	r2, #58	; 0x3a
   13e30:	movt	r1, #1
   13e34:	bl	12978 <fprintf@plt>
   13e38:	add	r0, sp, #24
   13e3c:	mov	r1, r6
   13e40:	mov	r2, r7
   13e44:	mov	r3, #17
   13e48:	bl	19784 <flatcc_json_parser_set_error@@Base>
   13e4c:	mov	sl, r0
   13e50:	ldr	r0, [sp, #48]	; 0x30
   13e54:	ldr	r4, [r4]
   13e58:	cmp	r0, #0
   13e5c:	bne	13d04 <test@@Base+0x1244>
   13e60:	movw	r0, #58249	; 0xe389
   13e64:	mov	r1, #15
   13e68:	mov	r2, #1
   13e6c:	mov	r3, r4
   13e70:	movt	r0, #1
   13e74:	bl	12930 <fwrite@plt>
   13e78:	ldr	r0, [sp, #48]	; 0x30
   13e7c:	ldr	r1, [sp, #12]
   13e80:	str	r0, [r1]
   13e84:	mov	r0, sl
   13e88:	sub	sp, fp, #28
   13e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e90:	add	r0, sp, #24
   13e94:	mov	r2, r7
   13e98:	b	13d4c <test@@Base+0x128c>
   13e9c:	bne	13eac <test@@Base+0x13ec>
   13ea0:	ldrb	r0, [r6, #2]!
   13ea4:	cmp	r0, #32
   13ea8:	bhi	13ebc <test@@Base+0x13fc>
   13eac:	add	r0, sp, #24
   13eb0:	mov	r2, r7
   13eb4:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   13eb8:	mov	r6, r0
   13ebc:	cmp	r6, r7
   13ec0:	mov	sl, r7
   13ec4:	beq	13e50 <test@@Base+0x1390>
   13ec8:	ldr	r3, [r4]
   13ecc:	movw	r0, #58211	; 0xe363
   13ed0:	mov	r1, #26
   13ed4:	mov	r2, #1
   13ed8:	movt	r0, #1
   13edc:	bl	12930 <fwrite@plt>
   13ee0:	mov	sl, r6
   13ee4:	ldr	r0, [sp, #48]	; 0x30
   13ee8:	ldr	r4, [r4]
   13eec:	cmp	r0, #0
   13ef0:	beq	13e60 <test@@Base+0x13a0>
   13ef4:	b	13d04 <test@@Base+0x1244>
   13ef8:	ldr	r9, [sp, #16]
   13efc:	ldr	r0, [sp, #48]	; 0x30
   13f00:	ldr	r4, [r4]
   13f04:	cmp	r0, #0
   13f08:	beq	13e60 <test@@Base+0x13a0>
   13f0c:	b	13d04 <test@@Base+0x1244>

00013f10 <main@@Base>:
   13f10:	push	{r4, sl, fp, lr}
   13f14:	add	fp, sp, #8
   13f18:	sub	sp, sp, #240	; 0xf0
   13f1c:	mvn	r0, #0
   13f20:	add	r4, sp, #4
   13f24:	str	r0, [fp, #-12]
   13f28:	mov	r0, r4
   13f2c:	bl	14120 <flatcc_builder_init@@Base>
   13f30:	movw	r1, #57524	; 0xe0b4
   13f34:	movw	r0, #645	; 0x285
   13f38:	sub	r3, fp, #12
   13f3c:	movt	r1, #1
   13f40:	add	r2, r1, r0
   13f44:	mov	r0, r4
   13f48:	bl	12ac0 <test@@Base>
   13f4c:	mov	r0, r4
   13f50:	bl	146c8 <flatcc_builder_clear@@Base>
   13f54:	ldr	r0, [fp, #-12]
   13f58:	sub	sp, fp, #8
   13f5c:	pop	{r4, sl, fp, pc}

00013f60 <flatcc_builder_default_alloc@@Base>:
   13f60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f64:	add	fp, sp, #24
   13f68:	mov	r4, r1
   13f6c:	cmp	r2, #0
   13f70:	beq	13fb8 <flatcc_builder_default_alloc@@Base+0x58>
   13f74:	ldr	r0, [fp, #8]
   13f78:	mov	r8, r3
   13f7c:	sub	r1, r0, #1
   13f80:	cmp	r1, #6
   13f84:	bhi	13fe8 <flatcc_builder_default_alloc@@Base+0x88>
   13f88:	add	r3, pc, #4
   13f8c:	mov	r0, #256	; 0x100
   13f90:	ldr	pc, [r3, r1, lsl #2]
   13f94:	strdeq	r3, [r1], -ip
   13f98:	andeq	r3, r1, r8, ror #31
   13f9c:	andeq	r3, r1, r8, ror #31
   13fa0:			; <UNDEFINED> instruction: 0x00013fb0
   13fa4:	strdeq	r3, [r1], -r0
   13fa8:	andeq	r3, r1, r8, ror #31
   13fac:	strdeq	r3, [r1], -r8
   13fb0:	mov	r0, #288	; 0x120
   13fb4:	b	13ffc <flatcc_builder_default_alloc@@Base+0x9c>
   13fb8:	ldr	r0, [r4]
   13fbc:	cmp	r0, #0
   13fc0:	beq	13fdc <flatcc_builder_default_alloc@@Base+0x7c>
   13fc4:	bl	128f4 <free@plt>
   13fc8:	mov	r6, #0
   13fcc:	mov	r0, r6
   13fd0:	str	r6, [r4]
   13fd4:	str	r6, [r4, #4]
   13fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fdc:	mov	r6, #0
   13fe0:	mov	r0, r6
   13fe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fe8:	mov	r0, #32
   13fec:	b	13ffc <flatcc_builder_default_alloc@@Base+0x9c>
   13ff0:	mov	r0, r2
   13ff4:	b	13ffc <flatcc_builder_default_alloc@@Base+0x9c>
   13ff8:	mov	r0, #64	; 0x40
   13ffc:	mov	r7, r0
   14000:	lsl	r0, r0, #1
   14004:	cmp	r7, r2
   14008:	bcc	13ffc <flatcc_builder_default_alloc@@Base+0x9c>
   1400c:	ldr	r0, [r4, #4]
   14010:	mov	r6, #0
   14014:	cmp	r0, r2
   14018:	lsrcs	r0, r0, #1
   1401c:	cmpcs	r0, r7
   14020:	bcs	14064 <flatcc_builder_default_alloc@@Base+0x104>
   14024:	ldr	r0, [r4]
   14028:	mov	r1, r7
   1402c:	bl	12924 <realloc@plt>
   14030:	cmp	r0, #0
   14034:	beq	1406c <flatcc_builder_default_alloc@@Base+0x10c>
   14038:	mov	r5, r0
   1403c:	cmp	r8, #0
   14040:	beq	14060 <flatcc_builder_default_alloc@@Base+0x100>
   14044:	ldr	r1, [r4, #4]
   14048:	cmp	r7, r1
   1404c:	bls	14060 <flatcc_builder_default_alloc@@Base+0x100>
   14050:	add	r0, r5, r1
   14054:	sub	r2, r7, r1
   14058:	mov	r1, #0
   1405c:	bl	12990 <memset@plt>
   14060:	stm	r4, {r5, r7}
   14064:	mov	r0, r6
   14068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1406c:	mvn	r6, #0
   14070:	mov	r0, r6
   14074:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014078 <flatcc_builder_flush_vtable_cache@@Base>:
   14078:	push	{r4, r5, fp, lr}
   1407c:	add	fp, sp, #8
   14080:	mov	r4, r0
   14084:	ldr	r0, [r0, #116]	; 0x74
   14088:	cmp	r0, #0
   1408c:	popeq	{r4, r5, fp, pc}
   14090:	ldr	r0, [r4, #92]	; 0x5c
   14094:	ldr	r2, [r4, #96]	; 0x60
   14098:	mov	r1, #0
   1409c:	mov	r5, #0
   140a0:	bl	12990 <memset@plt>
   140a4:	mov	r0, #16
   140a8:	str	r5, [r4, #120]	; 0x78
   140ac:	str	r0, [r4, #124]	; 0x7c
   140b0:	pop	{r4, r5, fp, pc}

000140b4 <flatcc_builder_custom_init@@Base>:
   140b4:	push	{r4, r5, r6, r7, fp, lr}
   140b8:	add	fp, sp, #16
   140bc:	mov	r6, r2
   140c0:	mov	r7, r1
   140c4:	mov	r1, #0
   140c8:	mov	r2, #232	; 0xe8
   140cc:	mov	r5, r3
   140d0:	mov	r4, r0
   140d4:	bl	12990 <memset@plt>
   140d8:	ldr	r0, [fp, #8]
   140dc:	cmp	r7, #0
   140e0:	bne	140f8 <flatcc_builder_custom_init@@Base+0x44>
   140e4:	movw	r7, #36504	; 0x8e98
   140e8:	mov	r1, #1
   140ec:	add	r6, r4, #188	; 0xbc
   140f0:	movt	r7, #1
   140f4:	str	r1, [r4, #184]	; 0xb8
   140f8:	movw	r1, #16224	; 0x3f60
   140fc:	cmp	r5, #0
   14100:	str	r6, [r4, #36]	; 0x24
   14104:	str	r0, [r4, #40]	; 0x28
   14108:	mov	r0, #0
   1410c:	str	r7, [r4, #44]	; 0x2c
   14110:	movt	r1, #1
   14114:	movne	r1, r5
   14118:	str	r1, [r4, #48]	; 0x30
   1411c:	pop	{r4, r5, r6, r7, fp, pc}

00014120 <flatcc_builder_init@@Base>:
   14120:	push	{r4, r5, fp, lr}
   14124:	add	fp, sp, #8
   14128:	mov	r1, #0
   1412c:	mov	r2, #232	; 0xe8
   14130:	mov	r4, r0
   14134:	mov	r5, #0
   14138:	bl	12990 <memset@plt>
   1413c:	mov	r0, #1
   14140:	movw	r1, #36504	; 0x8e98
   14144:	add	r2, r4, #188	; 0xbc
   14148:	str	r0, [r4, #184]	; 0xb8
   1414c:	movw	r0, #16224	; 0x3f60
   14150:	movt	r1, #1
   14154:	str	r2, [r4, #36]	; 0x24
   14158:	str	r5, [r4, #40]	; 0x28
   1415c:	movt	r0, #1
   14160:	str	r1, [r4, #44]	; 0x2c
   14164:	str	r0, [r4, #48]	; 0x30
   14168:	mov	r0, #0
   1416c:	pop	{r4, r5, fp, pc}

00014170 <flatcc_builder_custom_reset@@Base>:
   14170:	push	{r4, r5, r6, sl, fp, lr}
   14174:	add	fp, sp, #16
   14178:	sub	sp, sp, #8
   1417c:	mov	r5, r1
   14180:	mov	r4, r0
   14184:	cmp	r2, #0
   14188:	beq	141e8 <flatcc_builder_custom_reset@@Base+0x78>
   1418c:	mov	r1, r4
   14190:	ldr	r0, [r1, #52]!	; 0x34
   14194:	cmp	r0, #0
   14198:	beq	14214 <flatcc_builder_custom_reset@@Base+0xa4>
   1419c:	ldr	r0, [r4, #40]	; 0x28
   141a0:	ldr	r6, [r4, #48]	; 0x30
   141a4:	mov	r2, #0
   141a8:	mov	r3, #1
   141ac:	str	r2, [sp]
   141b0:	mov	r2, #1
   141b4:	blx	r6
   141b8:	mvn	r6, #0
   141bc:	cmp	r0, #0
   141c0:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   141c4:	ldr	r0, [r4, #52]	; 0x34
   141c8:	ldr	r2, [r4, #56]	; 0x38
   141cc:	mov	r1, #0
   141d0:	bl	12990 <memset@plt>
   141d4:	mov	r1, r4
   141d8:	ldr	r0, [r1, #60]!	; 0x3c
   141dc:	cmp	r0, #0
   141e0:	bne	14230 <flatcc_builder_custom_reset@@Base+0xc0>
   141e4:	b	1427c <flatcc_builder_custom_reset@@Base+0x10c>
   141e8:	ldr	r0, [r4, #52]	; 0x34
   141ec:	ldr	r2, [r4, #56]	; 0x38
   141f0:	cmp	r0, #0
   141f4:	beq	142e4 <flatcc_builder_custom_reset@@Base+0x174>
   141f8:	mov	r1, #0
   141fc:	bl	12990 <memset@plt>
   14200:	ldr	r0, [r4, #60]	; 0x3c
   14204:	ldr	r2, [r4, #64]	; 0x40
   14208:	cmp	r0, #0
   1420c:	bne	142fc <flatcc_builder_custom_reset@@Base+0x18c>
   14210:	b	14318 <flatcc_builder_custom_reset@@Base+0x1a8>
   14214:	ldr	r0, [r4, #56]	; 0x38
   14218:	cmp	r0, #0
   1421c:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14220:	mov	r1, r4
   14224:	ldr	r0, [r1, #60]!	; 0x3c
   14228:	cmp	r0, #0
   1422c:	beq	1427c <flatcc_builder_custom_reset@@Base+0x10c>
   14230:	ldr	r0, [r4, #40]	; 0x28
   14234:	ldr	r6, [r4, #48]	; 0x30
   14238:	mov	r2, #1
   1423c:	mov	r3, #1
   14240:	str	r2, [sp]
   14244:	mov	r2, #1
   14248:	blx	r6
   1424c:	mvn	r6, #0
   14250:	cmp	r0, #0
   14254:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   14258:	ldr	r0, [r4, #60]	; 0x3c
   1425c:	ldr	r2, [r4, #64]	; 0x40
   14260:	mov	r1, #0
   14264:	bl	12990 <memset@plt>
   14268:	mov	r1, r4
   1426c:	ldr	r0, [r1, #68]!	; 0x44
   14270:	cmp	r0, #0
   14274:	bne	14298 <flatcc_builder_custom_reset@@Base+0x128>
   14278:	b	144d4 <flatcc_builder_custom_reset@@Base+0x364>
   1427c:	ldr	r0, [r4, #64]	; 0x40
   14280:	cmp	r0, #0
   14284:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14288:	mov	r1, r4
   1428c:	ldr	r0, [r1, #68]!	; 0x44
   14290:	cmp	r0, #0
   14294:	beq	144d4 <flatcc_builder_custom_reset@@Base+0x364>
   14298:	ldr	r0, [r4, #40]	; 0x28
   1429c:	ldr	r6, [r4, #48]	; 0x30
   142a0:	mov	r2, #2
   142a4:	mov	r3, #1
   142a8:	str	r2, [sp]
   142ac:	mov	r2, #1
   142b0:	blx	r6
   142b4:	mvn	r6, #0
   142b8:	cmp	r0, #0
   142bc:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   142c0:	ldr	r0, [r4, #68]	; 0x44
   142c4:	ldr	r2, [r4, #72]	; 0x48
   142c8:	mov	r1, #0
   142cc:	bl	12990 <memset@plt>
   142d0:	mov	r1, r4
   142d4:	ldr	r0, [r1, #76]!	; 0x4c
   142d8:	cmp	r0, #0
   142dc:	bne	144f0 <flatcc_builder_custom_reset@@Base+0x380>
   142e0:	b	1453c <flatcc_builder_custom_reset@@Base+0x3cc>
   142e4:	cmp	r2, #0
   142e8:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   142ec:	ldr	r0, [r4, #60]	; 0x3c
   142f0:	ldr	r2, [r4, #64]	; 0x40
   142f4:	cmp	r0, #0
   142f8:	beq	14318 <flatcc_builder_custom_reset@@Base+0x1a8>
   142fc:	mov	r1, #0
   14300:	bl	12990 <memset@plt>
   14304:	ldr	r0, [r4, #68]	; 0x44
   14308:	ldr	r2, [r4, #72]	; 0x48
   1430c:	cmp	r0, #0
   14310:	bne	14330 <flatcc_builder_custom_reset@@Base+0x1c0>
   14314:	b	1434c <flatcc_builder_custom_reset@@Base+0x1dc>
   14318:	cmp	r2, #0
   1431c:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14320:	ldr	r0, [r4, #68]	; 0x44
   14324:	ldr	r2, [r4, #72]	; 0x48
   14328:	cmp	r0, #0
   1432c:	beq	1434c <flatcc_builder_custom_reset@@Base+0x1dc>
   14330:	mov	r1, #0
   14334:	bl	12990 <memset@plt>
   14338:	ldr	r0, [r4, #76]	; 0x4c
   1433c:	ldr	r2, [r4, #80]	; 0x50
   14340:	cmp	r0, #0
   14344:	bne	14364 <flatcc_builder_custom_reset@@Base+0x1f4>
   14348:	b	14380 <flatcc_builder_custom_reset@@Base+0x210>
   1434c:	cmp	r2, #0
   14350:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14354:	ldr	r0, [r4, #76]	; 0x4c
   14358:	ldr	r2, [r4, #80]	; 0x50
   1435c:	cmp	r0, #0
   14360:	beq	14380 <flatcc_builder_custom_reset@@Base+0x210>
   14364:	mov	r1, #0
   14368:	bl	12990 <memset@plt>
   1436c:	ldr	r0, [r4, #84]	; 0x54
   14370:	ldr	r2, [r4, #88]	; 0x58
   14374:	cmp	r0, #0
   14378:	bne	14398 <flatcc_builder_custom_reset@@Base+0x228>
   1437c:	b	143b4 <flatcc_builder_custom_reset@@Base+0x244>
   14380:	cmp	r2, #0
   14384:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14388:	ldr	r0, [r4, #84]	; 0x54
   1438c:	ldr	r2, [r4, #88]	; 0x58
   14390:	cmp	r0, #0
   14394:	beq	143b4 <flatcc_builder_custom_reset@@Base+0x244>
   14398:	mov	r1, #0
   1439c:	bl	12990 <memset@plt>
   143a0:	ldr	r0, [r4, #92]	; 0x5c
   143a4:	ldr	r2, [r4, #96]	; 0x60
   143a8:	cmp	r0, #0
   143ac:	bne	143cc <flatcc_builder_custom_reset@@Base+0x25c>
   143b0:	b	143e8 <flatcc_builder_custom_reset@@Base+0x278>
   143b4:	cmp	r2, #0
   143b8:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   143bc:	ldr	r0, [r4, #92]	; 0x5c
   143c0:	ldr	r2, [r4, #96]	; 0x60
   143c4:	cmp	r0, #0
   143c8:	beq	143e8 <flatcc_builder_custom_reset@@Base+0x278>
   143cc:	mov	r1, #0
   143d0:	bl	12990 <memset@plt>
   143d4:	ldr	r0, [r4, #100]	; 0x64
   143d8:	ldr	r2, [r4, #104]	; 0x68
   143dc:	cmp	r0, #0
   143e0:	bne	14400 <flatcc_builder_custom_reset@@Base+0x290>
   143e4:	b	1441c <flatcc_builder_custom_reset@@Base+0x2ac>
   143e8:	cmp	r2, #0
   143ec:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   143f0:	ldr	r0, [r4, #100]	; 0x64
   143f4:	ldr	r2, [r4, #104]	; 0x68
   143f8:	cmp	r0, #0
   143fc:	beq	1441c <flatcc_builder_custom_reset@@Base+0x2ac>
   14400:	mov	r1, #0
   14404:	bl	12990 <memset@plt>
   14408:	ldr	r0, [r4, #108]	; 0x6c
   1440c:	ldr	r2, [r4, #112]	; 0x70
   14410:	cmp	r0, #0
   14414:	bne	14434 <flatcc_builder_custom_reset@@Base+0x2c4>
   14418:	b	14440 <flatcc_builder_custom_reset@@Base+0x2d0>
   1441c:	cmp	r2, #0
   14420:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14424:	ldr	r0, [r4, #108]	; 0x6c
   14428:	ldr	r2, [r4, #112]	; 0x70
   1442c:	cmp	r0, #0
   14430:	beq	14440 <flatcc_builder_custom_reset@@Base+0x2d0>
   14434:	mov	r1, #0
   14438:	bl	12990 <memset@plt>
   1443c:	b	14448 <flatcc_builder_custom_reset@@Base+0x2d8>
   14440:	cmp	r2, #0
   14444:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14448:	mov	r0, #0
   1444c:	vmov.i32	q8, #0	; 0x00000000
   14450:	mov	r6, #0
   14454:	str	r0, [r4, #120]	; 0x78
   14458:	ldr	r1, [r4, #124]	; 0x7c
   1445c:	cmp	r1, #0
   14460:	movne	r1, #16
   14464:	strne	r1, [r4, #124]	; 0x7c
   14468:	add	r1, r4, #148	; 0x94
   1446c:	str	r0, [r4, #136]	; 0x88
   14470:	str	r0, [r4, #140]	; 0x8c
   14474:	strh	r0, [r4, #128]	; 0x80
   14478:	str	r0, [r4, #32]
   1447c:	cmp	r5, #0
   14480:	vst1.32	{d16-d17}, [r1]
   14484:	ldr	r2, [r4, #60]	; 0x3c
   14488:	ldr	r1, [r4, #52]	; 0x34
   1448c:	ldr	r3, [r4, #76]	; 0x4c
   14490:	str	r2, [r4, #16]
   14494:	str	r0, [r4, #20]
   14498:	str	r0, [r4, #24]
   1449c:	movne	r0, #0
   144a0:	str	r3, [r4]
   144a4:	str	r1, [r4, #4]
   144a8:	strne	r0, [r4, #172]	; 0xac
   144ac:	strne	r0, [r4, #176]	; 0xb0
   144b0:	strne	r0, [r4, #180]	; 0xb4
   144b4:	ldr	r0, [r4, #184]	; 0xb8
   144b8:	cmp	r0, #0
   144bc:	beq	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   144c0:	add	r0, r4, #188	; 0xbc
   144c4:	bl	18d60 <flatcc_emitter_reset@@Base>
   144c8:	mov	r0, r6
   144cc:	sub	sp, fp, #16
   144d0:	pop	{r4, r5, r6, sl, fp, pc}
   144d4:	ldr	r0, [r4, #72]	; 0x48
   144d8:	cmp	r0, #0
   144dc:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   144e0:	mov	r1, r4
   144e4:	ldr	r0, [r1, #76]!	; 0x4c
   144e8:	cmp	r0, #0
   144ec:	beq	1453c <flatcc_builder_custom_reset@@Base+0x3cc>
   144f0:	ldr	r0, [r4, #40]	; 0x28
   144f4:	ldr	r6, [r4, #48]	; 0x30
   144f8:	mov	r2, #3
   144fc:	mov	r3, #1
   14500:	str	r2, [sp]
   14504:	mov	r2, #1
   14508:	blx	r6
   1450c:	mvn	r6, #0
   14510:	cmp	r0, #0
   14514:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   14518:	ldr	r0, [r4, #76]	; 0x4c
   1451c:	ldr	r2, [r4, #80]	; 0x50
   14520:	mov	r1, #0
   14524:	bl	12990 <memset@plt>
   14528:	mov	r1, r4
   1452c:	ldr	r0, [r1, #84]!	; 0x54
   14530:	cmp	r0, #0
   14534:	bne	14558 <flatcc_builder_custom_reset@@Base+0x3e8>
   14538:	b	145a4 <flatcc_builder_custom_reset@@Base+0x434>
   1453c:	ldr	r0, [r4, #80]	; 0x50
   14540:	cmp	r0, #0
   14544:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   14548:	mov	r1, r4
   1454c:	ldr	r0, [r1, #84]!	; 0x54
   14550:	cmp	r0, #0
   14554:	beq	145a4 <flatcc_builder_custom_reset@@Base+0x434>
   14558:	ldr	r0, [r4, #40]	; 0x28
   1455c:	ldr	r6, [r4, #48]	; 0x30
   14560:	mov	r2, #4
   14564:	mov	r3, #1
   14568:	str	r2, [sp]
   1456c:	mov	r2, #1
   14570:	blx	r6
   14574:	mvn	r6, #0
   14578:	cmp	r0, #0
   1457c:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   14580:	ldr	r0, [r4, #84]	; 0x54
   14584:	ldr	r2, [r4, #88]	; 0x58
   14588:	mov	r1, #0
   1458c:	bl	12990 <memset@plt>
   14590:	ldr	r0, [r4, #92]	; 0x5c
   14594:	ldr	r2, [r4, #96]	; 0x60
   14598:	cmp	r0, #0
   1459c:	bne	145c0 <flatcc_builder_custom_reset@@Base+0x450>
   145a0:	b	145dc <flatcc_builder_custom_reset@@Base+0x46c>
   145a4:	ldr	r0, [r4, #88]	; 0x58
   145a8:	cmp	r0, #0
   145ac:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   145b0:	ldr	r0, [r4, #92]	; 0x5c
   145b4:	ldr	r2, [r4, #96]	; 0x60
   145b8:	cmp	r0, #0
   145bc:	beq	145dc <flatcc_builder_custom_reset@@Base+0x46c>
   145c0:	mov	r1, #0
   145c4:	bl	12990 <memset@plt>
   145c8:	mov	r1, r4
   145cc:	ldr	r0, [r1, #100]!	; 0x64
   145d0:	cmp	r0, #0
   145d4:	bne	145f4 <flatcc_builder_custom_reset@@Base+0x484>
   145d8:	b	14640 <flatcc_builder_custom_reset@@Base+0x4d0>
   145dc:	cmp	r2, #0
   145e0:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   145e4:	mov	r1, r4
   145e8:	ldr	r0, [r1, #100]!	; 0x64
   145ec:	cmp	r0, #0
   145f0:	beq	14640 <flatcc_builder_custom_reset@@Base+0x4d0>
   145f4:	ldr	r0, [r4, #40]	; 0x28
   145f8:	ldr	r6, [r4, #48]	; 0x30
   145fc:	mov	r2, #6
   14600:	mov	r3, #1
   14604:	str	r2, [sp]
   14608:	mov	r2, #1
   1460c:	blx	r6
   14610:	mvn	r6, #0
   14614:	cmp	r0, #0
   14618:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   1461c:	ldr	r0, [r4, #100]	; 0x64
   14620:	ldr	r2, [r4, #104]	; 0x68
   14624:	mov	r1, #0
   14628:	bl	12990 <memset@plt>
   1462c:	mov	r1, r4
   14630:	ldr	r0, [r1, #108]!	; 0x6c
   14634:	cmp	r0, #0
   14638:	bne	1465c <flatcc_builder_custom_reset@@Base+0x4ec>
   1463c:	b	14690 <flatcc_builder_custom_reset@@Base+0x520>
   14640:	ldr	r0, [r4, #104]	; 0x68
   14644:	cmp	r0, #0
   14648:	bne	1469c <flatcc_builder_custom_reset@@Base+0x52c>
   1464c:	mov	r1, r4
   14650:	ldr	r0, [r1, #108]!	; 0x6c
   14654:	cmp	r0, #0
   14658:	beq	14690 <flatcc_builder_custom_reset@@Base+0x520>
   1465c:	ldr	r0, [r4, #40]	; 0x28
   14660:	ldr	r6, [r4, #48]	; 0x30
   14664:	mov	r2, #7
   14668:	mov	r3, #1
   1466c:	str	r2, [sp]
   14670:	mov	r2, #1
   14674:	blx	r6
   14678:	mvn	r6, #0
   1467c:	cmp	r0, #0
   14680:	bne	144c8 <flatcc_builder_custom_reset@@Base+0x358>
   14684:	ldr	r0, [r4, #108]	; 0x6c
   14688:	ldr	r2, [r4, #112]	; 0x70
   1468c:	b	14434 <flatcc_builder_custom_reset@@Base+0x2c4>
   14690:	ldr	r0, [r4, #112]	; 0x70
   14694:	cmp	r0, #0
   14698:	beq	14448 <flatcc_builder_custom_reset@@Base+0x2d8>
   1469c:	movw	r0, #58777	; 0xe599
   146a0:	movw	r1, #58795	; 0xe5ab
   146a4:	movw	r3, #58865	; 0xe5f1
   146a8:	movw	r2, #434	; 0x1b2
   146ac:	movt	r0, #1
   146b0:	movt	r1, #1
   146b4:	movt	r3, #1
   146b8:	bl	129c0 <__assert_fail@plt>

000146bc <flatcc_builder_reset@@Base>:
   146bc:	mov	r1, #0
   146c0:	mov	r2, #0
   146c4:	b	14170 <flatcc_builder_custom_reset@@Base>

000146c8 <flatcc_builder_clear@@Base>:
   146c8:	push	{r4, sl, fp, lr}
   146cc:	add	fp, sp, #8
   146d0:	sub	sp, sp, #8
   146d4:	mov	r4, r0
   146d8:	ldr	r0, [r0, #40]	; 0x28
   146dc:	mov	r1, #0
   146e0:	mov	r2, #0
   146e4:	mov	r3, #0
   146e8:	ldr	ip, [r4, #48]	; 0x30
   146ec:	str	r1, [sp]
   146f0:	add	r1, r4, #52	; 0x34
   146f4:	blx	ip
   146f8:	ldr	r0, [r4, #40]	; 0x28
   146fc:	ldr	ip, [r4, #48]	; 0x30
   14700:	mov	r1, #1
   14704:	mov	r2, #0
   14708:	mov	r3, #0
   1470c:	str	r1, [sp]
   14710:	add	r1, r4, #60	; 0x3c
   14714:	blx	ip
   14718:	ldr	r0, [r4, #40]	; 0x28
   1471c:	ldr	ip, [r4, #48]	; 0x30
   14720:	mov	r1, #2
   14724:	mov	r2, #0
   14728:	mov	r3, #0
   1472c:	str	r1, [sp]
   14730:	add	r1, r4, #68	; 0x44
   14734:	blx	ip
   14738:	ldr	r0, [r4, #40]	; 0x28
   1473c:	ldr	ip, [r4, #48]	; 0x30
   14740:	mov	r1, #3
   14744:	mov	r2, #0
   14748:	mov	r3, #0
   1474c:	str	r1, [sp]
   14750:	add	r1, r4, #76	; 0x4c
   14754:	blx	ip
   14758:	ldr	r0, [r4, #40]	; 0x28
   1475c:	ldr	ip, [r4, #48]	; 0x30
   14760:	mov	r1, #4
   14764:	mov	r2, #0
   14768:	mov	r3, #0
   1476c:	str	r1, [sp]
   14770:	add	r1, r4, #84	; 0x54
   14774:	blx	ip
   14778:	ldr	r0, [r4, #40]	; 0x28
   1477c:	ldr	ip, [r4, #48]	; 0x30
   14780:	mov	r1, #5
   14784:	mov	r2, #0
   14788:	mov	r3, #0
   1478c:	str	r1, [sp]
   14790:	add	r1, r4, #92	; 0x5c
   14794:	blx	ip
   14798:	ldr	r0, [r4, #40]	; 0x28
   1479c:	ldr	ip, [r4, #48]	; 0x30
   147a0:	mov	r1, #6
   147a4:	mov	r2, #0
   147a8:	mov	r3, #0
   147ac:	str	r1, [sp]
   147b0:	add	r1, r4, #100	; 0x64
   147b4:	blx	ip
   147b8:	ldr	r0, [r4, #40]	; 0x28
   147bc:	ldr	ip, [r4, #48]	; 0x30
   147c0:	mov	r1, #7
   147c4:	mov	r2, #0
   147c8:	mov	r3, #0
   147cc:	str	r1, [sp]
   147d0:	add	r1, r4, #108	; 0x6c
   147d4:	blx	ip
   147d8:	ldr	r0, [r4, #184]	; 0xb8
   147dc:	cmp	r0, #0
   147e0:	beq	147ec <flatcc_builder_clear@@Base+0x124>
   147e4:	add	r0, r4, #188	; 0xbc
   147e8:	bl	18e2c <flatcc_emitter_clear@@Base>
   147ec:	mov	r0, r4
   147f0:	mov	r1, #0
   147f4:	mov	r2, #232	; 0xe8
   147f8:	sub	sp, fp, #8
   147fc:	pop	{r4, sl, fp, lr}
   14800:	b	12990 <memset@plt>

00014804 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14804:	push	{r4, r5, r6, r7, fp, lr}
   14808:	add	fp, sp, #16
   1480c:	sub	sp, sp, #8
   14810:	mov	r4, r0
   14814:	ldr	r0, [r0, #112]	; 0x70
   14818:	add	r1, r1, #7
   1481c:	ldr	r7, [r4, #228]	; 0xe4
   14820:	bic	r5, r1, #3
   14824:	add	r6, r4, #108	; 0x6c
   14828:	add	r2, r7, r5
   1482c:	cmp	r2, r0
   14830:	bls	14858 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   14834:	ldr	r0, [r4, #40]	; 0x28
   14838:	ldr	ip, [r4, #48]	; 0x30
   1483c:	mov	r1, #7
   14840:	mov	r3, #0
   14844:	str	r1, [sp]
   14848:	mov	r1, r6
   1484c:	blx	ip
   14850:	cmp	r0, #0
   14854:	bne	148ac <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   14858:	ldr	r0, [r6]
   1485c:	adds	r6, r0, r7
   14860:	beq	1489c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   14864:	mov	r0, r6
   14868:	mov	r1, #0
   1486c:	mov	r2, r5
   14870:	bl	12990 <memset@plt>
   14874:	ldr	r0, [r4, #224]	; 0xe0
   14878:	str	r0, [r6], #4
   1487c:	ldr	r0, [r4, #228]	; 0xe4
   14880:	add	r1, r0, #4
   14884:	add	r0, r0, r5
   14888:	str	r1, [r4, #224]	; 0xe0
   1488c:	str	r0, [r4, #228]	; 0xe4
   14890:	mov	r0, r6
   14894:	sub	sp, fp, #16
   14898:	pop	{r4, r5, r6, r7, fp, pc}
   1489c:	mov	r6, #0
   148a0:	mov	r0, r6
   148a4:	sub	sp, fp, #16
   148a8:	pop	{r4, r5, r6, r7, fp, pc}
   148ac:	movw	r0, #63313	; 0xf751
   148b0:	movw	r1, #58795	; 0xe5ab
   148b4:	movw	r3, #62859	; 0xf58b
   148b8:	mov	r2, #308	; 0x134
   148bc:	movt	r0, #1
   148c0:	movt	r1, #1
   148c4:	movt	r3, #1
   148c8:	bl	129c0 <__assert_fail@plt>

000148cc <flatcc_builder_enter_user_frame@@Base>:
   148cc:	push	{r4, r5, r6, r7, fp, lr}
   148d0:	add	fp, sp, #16
   148d4:	sub	sp, sp, #8
   148d8:	mov	r4, r0
   148dc:	ldr	r0, [r0, #112]	; 0x70
   148e0:	add	r1, r1, #7
   148e4:	ldr	r7, [r4, #228]	; 0xe4
   148e8:	bic	r5, r1, #3
   148ec:	add	r6, r4, #108	; 0x6c
   148f0:	add	r2, r7, r5
   148f4:	cmp	r2, r0
   148f8:	bls	14920 <flatcc_builder_enter_user_frame@@Base+0x54>
   148fc:	ldr	r0, [r4, #40]	; 0x28
   14900:	ldr	ip, [r4, #48]	; 0x30
   14904:	mov	r1, #7
   14908:	mov	r3, #0
   1490c:	str	r1, [sp]
   14910:	mov	r1, r6
   14914:	blx	ip
   14918:	cmp	r0, #0
   1491c:	bne	1496c <flatcc_builder_enter_user_frame@@Base+0xa0>
   14920:	ldr	r0, [r6]
   14924:	adds	r6, r0, r7
   14928:	beq	14960 <flatcc_builder_enter_user_frame@@Base+0x94>
   1492c:	mov	r0, r6
   14930:	mov	r1, #0
   14934:	mov	r2, r5
   14938:	bl	12990 <memset@plt>
   1493c:	ldr	r0, [r4, #224]	; 0xe0
   14940:	str	r0, [r6]
   14944:	ldr	r1, [r4, #228]	; 0xe4
   14948:	add	r0, r1, #4
   1494c:	add	r1, r1, r5
   14950:	str	r0, [r4, #224]	; 0xe0
   14954:	str	r1, [r4, #228]	; 0xe4
   14958:	sub	sp, fp, #16
   1495c:	pop	{r4, r5, r6, r7, fp, pc}
   14960:	mov	r0, #0
   14964:	sub	sp, fp, #16
   14968:	pop	{r4, r5, r6, r7, fp, pc}
   1496c:	movw	r0, #63313	; 0xf751
   14970:	movw	r1, #58795	; 0xe5ab
   14974:	movw	r3, #62859	; 0xf58b
   14978:	mov	r2, #308	; 0x134
   1497c:	movt	r0, #1
   14980:	movt	r1, #1
   14984:	movt	r3, #1
   14988:	bl	129c0 <__assert_fail@plt>

0001498c <flatcc_builder_exit_user_frame@@Base>:
   1498c:	push	{fp, lr}
   14990:	mov	fp, sp
   14994:	ldr	r1, [r0, #224]	; 0xe0
   14998:	cmp	r1, #0
   1499c:	subne	r2, r1, #4
   149a0:	strne	r2, [r0, #228]	; 0xe4
   149a4:	ldrne	r2, [r0, #108]	; 0x6c
   149a8:	addne	r1, r2, r1
   149ac:	ldrne	r1, [r1, #-4]
   149b0:	strne	r1, [r0, #224]	; 0xe0
   149b4:	movne	r0, r1
   149b8:	popne	{fp, pc}
   149bc:	movw	r0, #58927	; 0xe62f
   149c0:	movw	r1, #58795	; 0xe5ab
   149c4:	movw	r3, #58952	; 0xe648
   149c8:	movw	r2, #542	; 0x21e
   149cc:	movt	r0, #1
   149d0:	movt	r1, #1
   149d4:	movt	r3, #1
   149d8:	bl	129c0 <__assert_fail@plt>

000149dc <flatcc_builder_exit_user_frame_at@@Base>:
   149dc:	push	{fp, lr}
   149e0:	mov	fp, sp
   149e4:	ldr	r2, [r0, #224]	; 0xe0
   149e8:	cmp	r2, r1
   149ec:	bcc	14a38 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   149f0:	cmp	r1, #0
   149f4:	str	r1, [r0, #224]	; 0xe0
   149f8:	subne	r2, r1, #4
   149fc:	strne	r2, [r0, #228]	; 0xe4
   14a00:	ldrne	r2, [r0, #108]	; 0x6c
   14a04:	addne	r1, r2, r1
   14a08:	ldrne	r1, [r1, #-4]
   14a0c:	strne	r1, [r0, #224]	; 0xe0
   14a10:	movne	r0, r1
   14a14:	popne	{fp, pc}
   14a18:	movw	r0, #58927	; 0xe62f
   14a1c:	movw	r1, #58795	; 0xe5ab
   14a20:	movw	r3, #58952	; 0xe648
   14a24:	movw	r2, #542	; 0x21e
   14a28:	movt	r0, #1
   14a2c:	movt	r1, #1
   14a30:	movt	r3, #1
   14a34:	bl	129c0 <__assert_fail@plt>
   14a38:	movw	r0, #59010	; 0xe682
   14a3c:	movw	r1, #58795	; 0xe5ab
   14a40:	movw	r3, #59041	; 0xe6a1
   14a44:	movw	r2, #551	; 0x227
   14a48:	movt	r0, #1
   14a4c:	movt	r1, #1
   14a50:	movt	r3, #1
   14a54:	bl	129c0 <__assert_fail@plt>

00014a58 <flatcc_builder_get_current_user_frame@@Base>:
   14a58:	ldr	r0, [r0, #224]	; 0xe0
   14a5c:	bx	lr

00014a60 <flatcc_builder_get_user_frame_ptr@@Base>:
   14a60:	ldr	r0, [r0, #108]	; 0x6c
   14a64:	add	r0, r0, r1
   14a68:	bx	lr

00014a6c <flatcc_builder_embed_buffer@@Base>:
   14a6c:	push	{r4, r5, r6, r7, fp, lr}
   14a70:	add	fp, sp, #16
   14a74:	sub	sp, sp, #88	; 0x58
   14a78:	mov	r4, r0
   14a7c:	ldr	r0, [fp, #8]
   14a80:	mov	r5, r3
   14a84:	mov	r7, r2
   14a88:	mov	r2, r1
   14a8c:	sub	r1, fp, #18
   14a90:	strh	r0, [fp, #-18]	; 0xffffffee
   14a94:	mov	r0, r4
   14a98:	ldr	r3, [r4, #152]	; 0x98
   14a9c:	cmp	r3, #0
   14aa0:	movwne	r3, #1
   14aa4:	bl	14bdc <flatcc_builder_embed_buffer@@Base+0x170>
   14aa8:	ldr	r1, [fp, #12]
   14aac:	ldrh	r3, [fp, #-18]	; 0xffffffee
   14ab0:	ldr	r0, [r4, #136]	; 0x88
   14ab4:	mov	r2, #0
   14ab8:	str	r2, [sp, #12]
   14abc:	str	r2, [sp, #8]
   14ac0:	and	r1, r1, #2
   14ac4:	sub	r3, r3, #1
   14ac8:	add	r1, r5, r1, lsl #1
   14acc:	sub	r1, r0, r1
   14ad0:	and	r3, r3, r1
   14ad4:	add	r1, r3, r5
   14ad8:	str	r1, [fp, #-24]	; 0xffffffe8
   14adc:	ldr	r1, [r4, #152]	; 0x98
   14ae0:	cmp	r1, #0
   14ae4:	mov	r1, #0
   14ae8:	beq	14b08 <flatcc_builder_embed_buffer@@Base+0x9c>
   14aec:	mov	r1, #4
   14af0:	sub	r2, fp, #24
   14af4:	str	r1, [sp, #20]
   14af8:	str	r2, [sp, #16]
   14afc:	mov	r2, #1
   14b00:	str	r1, [sp, #8]
   14b04:	str	r2, [sp, #12]
   14b08:	cmp	r5, #0
   14b0c:	beq	14b30 <flatcc_builder_embed_buffer@@Base+0xc4>
   14b10:	add	r6, sp, #8
   14b14:	add	r1, r1, r5
   14b18:	add	r6, r6, r2, lsl #3
   14b1c:	add	r2, r2, #1
   14b20:	str	r1, [sp, #8]
   14b24:	str	r7, [r6, #8]
   14b28:	str	r5, [r6, #12]
   14b2c:	str	r2, [sp, #12]
   14b30:	cmp	r3, #0
   14b34:	beq	14b60 <flatcc_builder_embed_buffer@@Base+0xf4>
   14b38:	add	r7, sp, #8
   14b3c:	movw	r6, #58265	; 0xe399
   14b40:	add	r1, r1, r3
   14b44:	add	r7, r7, r2, lsl #3
   14b48:	movt	r6, #1
   14b4c:	add	r2, r2, #1
   14b50:	str	r1, [sp, #8]
   14b54:	str	r6, [r7, #8]
   14b58:	str	r3, [r7, #12]
   14b5c:	str	r2, [sp, #12]
   14b60:	cmp	r1, #0
   14b64:	ble	14bbc <flatcc_builder_embed_buffer@@Base+0x150>
   14b68:	sub	r5, r0, r1
   14b6c:	ldr	r0, [r4, #36]	; 0x24
   14b70:	ldr	r7, [r4, #44]	; 0x2c
   14b74:	str	r1, [sp]
   14b78:	add	r1, sp, #8
   14b7c:	add	r1, r1, #8
   14b80:	mov	r3, r5
   14b84:	blx	r7
   14b88:	cmp	r0, #0
   14b8c:	streq	r5, [r4, #136]	; 0x88
   14b90:	moveq	r0, r5
   14b94:	subeq	sp, fp, #16
   14b98:	popeq	{r4, r5, r6, r7, fp, pc}
   14b9c:	movw	r0, #63313	; 0xf751
   14ba0:	movw	r1, #58795	; 0xe5ab
   14ba4:	movw	r3, #62992	; 0xf610
   14ba8:	movw	r2, #651	; 0x28b
   14bac:	movt	r0, #1
   14bb0:	movt	r1, #1
   14bb4:	movt	r3, #1
   14bb8:	bl	129c0 <__assert_fail@plt>
   14bbc:	movw	r0, #63313	; 0xf751
   14bc0:	movw	r1, #58795	; 0xe5ab
   14bc4:	movw	r3, #62992	; 0xf610
   14bc8:	movw	r2, #647	; 0x287
   14bcc:	movt	r0, #1
   14bd0:	movt	r1, #1
   14bd4:	movt	r3, #1
   14bd8:	bl	129c0 <__assert_fail@plt>
   14bdc:	push	{r4, sl, fp, lr}
   14be0:	add	fp, sp, #8
   14be4:	sub	sp, sp, #80	; 0x50
   14be8:	cmp	r2, #0
   14bec:	bne	14bfc <flatcc_builder_embed_buffer@@Base+0x190>
   14bf0:	ldrh	r2, [r0, #132]	; 0x84
   14bf4:	cmp	r2, #0
   14bf8:	movweq	r2, #1
   14bfc:	ldrh	r4, [r1]
   14c00:	cmp	r4, #4
   14c04:	movwcc	r4, #4
   14c08:	cmpcs	r4, r2
   14c0c:	bcs	14c1c <flatcc_builder_embed_buffer@@Base+0x1b0>
   14c10:	cmp	r4, r2
   14c14:	movcc	r4, r2
   14c18:	strh	r4, [r1]
   14c1c:	cmp	r3, #0
   14c20:	bne	14c94 <flatcc_builder_embed_buffer@@Base+0x228>
   14c24:	ldr	r4, [r0, #140]	; 0x8c
   14c28:	sub	r1, r2, #1
   14c2c:	ands	r1, r4, r1
   14c30:	beq	14c94 <flatcc_builder_embed_buffer@@Base+0x228>
   14c34:	movw	r2, #58265	; 0xe399
   14c38:	str	r1, [sp, #20]
   14c3c:	cmn	r1, #1
   14c40:	movt	r2, #1
   14c44:	str	r2, [sp, #16]
   14c48:	mov	r2, #1
   14c4c:	str	r1, [sp, #8]
   14c50:	str	r2, [sp, #12]
   14c54:	add	r2, r4, r1
   14c58:	str	r2, [r0, #140]	; 0x8c
   14c5c:	ble	14c9c <flatcc_builder_embed_buffer@@Base+0x230>
   14c60:	ldr	r2, [r0, #36]	; 0x24
   14c64:	ldr	ip, [r0, #44]	; 0x2c
   14c68:	add	r0, sp, #8
   14c6c:	str	r1, [sp]
   14c70:	mov	r3, r4
   14c74:	add	r1, r0, #8
   14c78:	mov	r0, r2
   14c7c:	mov	r2, #1
   14c80:	blx	ip
   14c84:	cmp	r0, #0
   14c88:	bne	14cbc <flatcc_builder_embed_buffer@@Base+0x250>
   14c8c:	cmn	r4, #1
   14c90:	beq	14cdc <flatcc_builder_embed_buffer@@Base+0x270>
   14c94:	sub	sp, fp, #8
   14c98:	pop	{r4, sl, fp, pc}
   14c9c:	movw	r0, #63313	; 0xf751
   14ca0:	movw	r1, #58795	; 0xe5ab
   14ca4:	movw	r3, #63180	; 0xf6cc
   14ca8:	movw	r2, #673	; 0x2a1
   14cac:	movt	r0, #1
   14cb0:	movt	r1, #1
   14cb4:	movt	r3, #1
   14cb8:	bl	129c0 <__assert_fail@plt>
   14cbc:	movw	r0, #63313	; 0xf751
   14cc0:	movw	r1, #58795	; 0xe5ab
   14cc4:	movw	r3, #63180	; 0xf6cc
   14cc8:	movw	r2, #677	; 0x2a5
   14ccc:	movt	r0, #1
   14cd0:	movt	r1, #1
   14cd4:	movt	r3, #1
   14cd8:	bl	129c0 <__assert_fail@plt>
   14cdc:	movw	r0, #63313	; 0xf751
   14ce0:	movw	r1, #58795	; 0xe5ab
   14ce4:	movw	r3, #62926	; 0xf5ce
   14ce8:	movw	r2, #702	; 0x2be
   14cec:	movt	r0, #1
   14cf0:	movt	r1, #1
   14cf4:	movt	r3, #1
   14cf8:	bl	129c0 <__assert_fail@plt>

00014cfc <flatcc_builder_create_buffer@@Base>:
   14cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d00:	add	fp, sp, #28
   14d04:	sub	sp, sp, #100	; 0x64
   14d08:	ldr	sl, [fp, #12]
   14d0c:	mov	r4, r0
   14d10:	ldr	r0, [fp, #8]
   14d14:	mov	r7, r1
   14d18:	mov	r5, #0
   14d1c:	mov	r6, r3
   14d20:	sub	r1, fp, #30
   14d24:	str	r5, [sp, #12]
   14d28:	and	r9, sl, #1
   14d2c:	strh	r0, [fp, #-30]	; 0xffffffe2
   14d30:	mov	r0, r4
   14d34:	mov	r3, r9
   14d38:	bl	14bdc <flatcc_builder_embed_buffer@@Base+0x170>
   14d3c:	ldrh	r0, [r4, #128]	; 0x80
   14d40:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14d44:	str	r6, [sp, #8]
   14d48:	cmp	r0, r1
   14d4c:	strhcc	r1, [r4, #128]	; 0x80
   14d50:	cmp	r7, #0
   14d54:	beq	14d70 <flatcc_builder_create_buffer@@Base+0x74>
   14d58:	ldr	r5, [r7]
   14d5c:	cmp	r5, #0
   14d60:	str	r5, [sp, #12]
   14d64:	movwne	r5, #1
   14d68:	lsl	r7, r5, #2
   14d6c:	b	14d74 <flatcc_builder_create_buffer@@Base+0x78>
   14d70:	mov	r7, #0
   14d74:	ldr	r0, [r4, #136]	; 0x88
   14d78:	and	r2, sl, #2
   14d7c:	mov	r3, #0
   14d80:	sub	r6, r1, #1
   14d84:	ands	ip, sl, #3
   14d88:	mov	sl, #4
   14d8c:	mov	r1, #4
   14d90:	str	r3, [sp, #20]
   14d94:	str	r3, [sp, #16]
   14d98:	sub	r2, r0, r2, lsl #1
   14d9c:	sub	r2, r2, r7
   14da0:	sub	r2, r2, #4
   14da4:	beq	14dc8 <flatcc_builder_create_buffer@@Base+0xcc>
   14da8:	mov	r1, #4
   14dac:	sub	r3, fp, #40	; 0x28
   14db0:	str	r1, [sp, #28]
   14db4:	str	r3, [sp, #24]
   14db8:	str	r1, [sp, #16]
   14dbc:	mov	r3, #1
   14dc0:	mov	r1, #8
   14dc4:	str	r3, [sp, #20]
   14dc8:	add	lr, sp, #16
   14dcc:	and	r6, r2, r6
   14dd0:	sub	r8, fp, #36	; 0x24
   14dd4:	str	r1, [sp, #16]
   14dd8:	cmp	r5, #0
   14ddc:	add	r2, lr, r3, lsl #3
   14de0:	str	r8, [r2, #8]
   14de4:	str	sl, [r2, #12]
   14de8:	add	r2, r3, #1
   14dec:	str	r2, [sp, #20]
   14df0:	beq	14e14 <flatcc_builder_create_buffer@@Base+0x118>
   14df4:	add	r2, lr, r2, lsl #3
   14df8:	add	r1, r1, r7
   14dfc:	add	r5, sp, #12
   14e00:	str	r1, [sp, #16]
   14e04:	str	r5, [r2, #8]
   14e08:	str	r7, [r2, #12]
   14e0c:	orr	r2, r3, #2
   14e10:	str	r2, [sp, #20]
   14e14:	cmp	r6, #0
   14e18:	beq	14e40 <flatcc_builder_create_buffer@@Base+0x144>
   14e1c:	movw	r5, #58265	; 0xe399
   14e20:	add	r3, lr, r2, lsl #3
   14e24:	add	r1, r1, r6
   14e28:	add	r2, r2, #1
   14e2c:	movt	r5, #1
   14e30:	str	r1, [sp, #16]
   14e34:	str	r5, [r3, #8]
   14e38:	str	r6, [r3, #12]
   14e3c:	str	r2, [sp, #20]
   14e40:	sub	r7, r0, r1
   14e44:	cmp	ip, #0
   14e48:	mov	r6, #144	; 0x90
   14e4c:	ldr	r3, [sp, #8]
   14e50:	mov	r0, r7
   14e54:	addne	r0, r0, #4
   14e58:	cmp	r9, #0
   14e5c:	movweq	r6, #140	; 0x8c
   14e60:	cmp	r1, #0
   14e64:	ldr	r6, [r4, r6]
   14e68:	sub	r3, r3, r0
   14e6c:	str	r3, [fp, #-36]	; 0xffffffdc
   14e70:	sub	r0, r6, r0
   14e74:	str	r0, [fp, #-40]	; 0xffffffd8
   14e78:	ble	14ed0 <flatcc_builder_create_buffer@@Base+0x1d4>
   14e7c:	ldr	r0, [r4, #36]	; 0x24
   14e80:	ldr	r6, [r4, #44]	; 0x2c
   14e84:	str	r1, [sp]
   14e88:	add	r1, lr, #8
   14e8c:	mov	r3, r7
   14e90:	blx	r6
   14e94:	cmp	r0, #0
   14e98:	bne	14ef0 <flatcc_builder_create_buffer@@Base+0x1f4>
   14e9c:	cmp	r7, #0
   14ea0:	str	r7, [r4, #136]	; 0x88
   14ea4:	movne	r0, r7
   14ea8:	subne	sp, fp, #28
   14eac:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eb0:	movw	r0, #63313	; 0xf751
   14eb4:	movw	r1, #58795	; 0xe5ab
   14eb8:	movw	r3, #59110	; 0xe6e6
   14ebc:	mov	r2, #772	; 0x304
   14ec0:	movt	r0, #1
   14ec4:	movt	r1, #1
   14ec8:	movt	r3, #1
   14ecc:	bl	129c0 <__assert_fail@plt>
   14ed0:	movw	r0, #63313	; 0xf751
   14ed4:	movw	r1, #58795	; 0xe5ab
   14ed8:	movw	r3, #62992	; 0xf610
   14edc:	movw	r2, #647	; 0x287
   14ee0:	movt	r0, #1
   14ee4:	movt	r1, #1
   14ee8:	movt	r3, #1
   14eec:	bl	129c0 <__assert_fail@plt>
   14ef0:	movw	r0, #63313	; 0xf751
   14ef4:	movw	r1, #58795	; 0xe5ab
   14ef8:	movw	r3, #62992	; 0xf610
   14efc:	movw	r2, #651	; 0x28b
   14f00:	movt	r0, #1
   14f04:	movt	r1, #1
   14f08:	movt	r3, #1
   14f0c:	bl	129c0 <__assert_fail@plt>

00014f10 <flatcc_builder_create_struct@@Base>:
   14f10:	push	{r4, r5, r6, sl, fp, lr}
   14f14:	add	fp, sp, #16
   14f18:	sub	sp, sp, #80	; 0x50
   14f1c:	cmp	r3, #0
   14f20:	beq	14ff8 <flatcc_builder_create_struct@@Base+0xe8>
   14f24:	mov	r5, r0
   14f28:	ldrh	r0, [r0, #128]	; 0x80
   14f2c:	mov	r4, #0
   14f30:	cmp	r0, r3
   14f34:	strhcc	r3, [r5, #128]	; 0x80
   14f38:	sub	r3, r3, #1
   14f3c:	cmp	r2, #0
   14f40:	ldr	r0, [r5, #136]	; 0x88
   14f44:	str	r4, [sp, #12]
   14f48:	str	r4, [sp, #8]
   14f4c:	movne	r4, #1
   14f50:	strne	r2, [sp, #20]
   14f54:	strne	r1, [sp, #16]
   14f58:	strne	r2, [sp, #8]
   14f5c:	strne	r4, [sp, #12]
   14f60:	sub	r6, r0, r2
   14f64:	and	r3, r6, r3
   14f68:	cmp	r3, #0
   14f6c:	beq	14f98 <flatcc_builder_create_struct@@Base+0x88>
   14f70:	add	r1, sp, #8
   14f74:	movw	r6, #58265	; 0xe399
   14f78:	add	r2, r3, r2
   14f7c:	add	r1, r1, r4, lsl #3
   14f80:	movt	r6, #1
   14f84:	add	r4, r4, #1
   14f88:	str	r2, [sp, #8]
   14f8c:	str	r6, [r1, #8]
   14f90:	str	r3, [r1, #12]
   14f94:	str	r4, [sp, #12]
   14f98:	cmp	r2, #0
   14f9c:	ble	15018 <flatcc_builder_create_struct@@Base+0x108>
   14fa0:	sub	r6, r0, r2
   14fa4:	ldr	r0, [r5, #36]	; 0x24
   14fa8:	ldr	ip, [r5, #44]	; 0x2c
   14fac:	add	r1, sp, #8
   14fb0:	str	r2, [sp]
   14fb4:	mov	r2, r4
   14fb8:	add	r1, r1, #8
   14fbc:	mov	r3, r6
   14fc0:	blx	ip
   14fc4:	cmp	r0, #0
   14fc8:	streq	r6, [r5, #136]	; 0x88
   14fcc:	moveq	r0, r6
   14fd0:	subeq	sp, fp, #16
   14fd4:	popeq	{r4, r5, r6, sl, fp, pc}
   14fd8:	movw	r0, #63313	; 0xf751
   14fdc:	movw	r1, #58795	; 0xe5ab
   14fe0:	movw	r3, #62992	; 0xf610
   14fe4:	movw	r2, #651	; 0x28b
   14fe8:	movt	r0, #1
   14fec:	movt	r1, #1
   14ff0:	movt	r3, #1
   14ff4:	bl	129c0 <__assert_fail@plt>
   14ff8:	movw	r0, #59241	; 0xe769
   14ffc:	movw	r1, #58795	; 0xe5ab
   15000:	movw	r3, #59252	; 0xe774
   15004:	movw	r2, #783	; 0x30f
   15008:	movt	r0, #1
   1500c:	movt	r1, #1
   15010:	movt	r3, #1
   15014:	bl	129c0 <__assert_fail@plt>
   15018:	movw	r0, #63313	; 0xf751
   1501c:	movw	r1, #58795	; 0xe5ab
   15020:	movw	r3, #62992	; 0xf610
   15024:	movw	r2, #647	; 0x287
   15028:	movt	r0, #1
   1502c:	movt	r1, #1
   15030:	movt	r3, #1
   15034:	bl	129c0 <__assert_fail@plt>

00015038 <flatcc_builder_start_buffer@@Base>:
   15038:	push	{r4, r5, r6, r7, fp, lr}
   1503c:	add	fp, sp, #16
   15040:	mov	r5, r1
   15044:	ldrh	r1, [r0, #128]	; 0x80
   15048:	mov	r6, r3
   1504c:	mov	r7, r2
   15050:	mov	r4, r0
   15054:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   15058:	mov	r1, r0
   1505c:	mvn	r0, #0
   15060:	cmp	r1, #0
   15064:	popne	{r4, r5, r6, r7, fp, pc}
   15068:	mov	r0, #1
   1506c:	cmp	r5, #0
   15070:	strh	r0, [r4, #128]	; 0x80
   15074:	ldrh	r1, [r4, #132]	; 0x84
   15078:	ldr	r2, [r4, #32]
   1507c:	strh	r1, [r2, #34]	; 0x22
   15080:	strh	r7, [r4, #132]	; 0x84
   15084:	ldrh	r1, [r4, #164]	; 0xa4
   15088:	ldr	r2, [r4, #32]
   1508c:	strh	r1, [r2, #32]
   15090:	strh	r6, [r4, #164]	; 0xa4
   15094:	ldr	r1, [r4, #32]
   15098:	ldr	r2, [r4, #144]	; 0x90
   1509c:	str	r2, [r1, #20]
   150a0:	ldr	r1, [r4, #32]
   150a4:	ldr	r2, [r4, #152]	; 0x98
   150a8:	str	r2, [r1, #28]
   150ac:	ldr	r3, [r4, #148]	; 0x94
   150b0:	ldr	r1, [r4, #32]
   150b4:	ldr	r2, [r4, #136]	; 0x88
   150b8:	ldr	r7, [r4, #168]	; 0xa8
   150bc:	add	r6, r3, #1
   150c0:	str	r2, [r4, #144]	; 0x90
   150c4:	str	r6, [r4, #148]	; 0x94
   150c8:	str	r3, [r4, #152]	; 0x98
   150cc:	str	r7, [r1, #16]
   150d0:	movw	r1, #58265	; 0xe399
   150d4:	movt	r1, #1
   150d8:	movne	r1, r5
   150dc:	ldr	r1, [r1]
   150e0:	str	r1, [r4, #168]	; 0xa8
   150e4:	ldr	r1, [r4, #32]
   150e8:	strh	r0, [r1, #14]
   150ec:	mov	r0, #0
   150f0:	pop	{r4, r5, r6, r7, fp, pc}
   150f4:	push	{r4, r5, r6, r7, fp, lr}
   150f8:	add	fp, sp, #16
   150fc:	sub	sp, sp, #8
   15100:	mov	r5, r1
   15104:	ldr	r1, [r0, #156]	; 0x9c
   15108:	ldr	r2, [r0, #160]	; 0xa0
   1510c:	mov	r4, r0
   15110:	add	r0, r1, #1
   15114:	cmp	r1, r2
   15118:	str	r0, [r4, #156]	; 0x9c
   1511c:	bge	15130 <flatcc_builder_start_buffer@@Base+0xf8>
   15120:	ldr	r0, [r4, #32]
   15124:	add	r0, r0, #36	; 0x24
   15128:	str	r0, [r4, #32]
   1512c:	b	151c4 <flatcc_builder_start_buffer@@Base+0x18c>
   15130:	ldr	r2, [r4, #176]	; 0xb0
   15134:	mvn	r6, #0
   15138:	cmp	r2, #1
   1513c:	cmpge	r1, r2
   15140:	bge	151fc <flatcc_builder_start_buffer@@Base+0x1c4>
   15144:	add	r7, r0, r0, lsl #3
   15148:	ldr	r0, [r4, #88]	; 0x58
   1514c:	lsl	r2, r7, #2
   15150:	cmp	r2, r0
   15154:	bls	1517c <flatcc_builder_start_buffer@@Base+0x144>
   15158:	ldr	r0, [r4, #40]	; 0x28
   1515c:	ldr	ip, [r4, #48]	; 0x30
   15160:	mov	r3, #4
   15164:	add	r1, r4, #84	; 0x54
   15168:	str	r3, [sp]
   1516c:	mov	r3, #0
   15170:	blx	ip
   15174:	cmp	r0, #0
   15178:	bne	15208 <flatcc_builder_start_buffer@@Base+0x1d0>
   1517c:	ldr	r1, [r4, #84]	; 0x54
   15180:	mvn	r0, #35	; 0x23
   15184:	add	r0, r0, r7, lsl #2
   15188:	adds	r0, r0, r1
   1518c:	str	r0, [r4, #32]
   15190:	beq	151fc <flatcc_builder_start_buffer@@Base+0x1c4>
   15194:	ldr	r1, [r4, #88]	; 0x58
   15198:	movw	r3, #36409	; 0x8e39
   1519c:	ldr	r2, [r4, #176]	; 0xb0
   151a0:	movt	r3, #14563	; 0x38e3
   151a4:	umull	r1, r3, r1, r3
   151a8:	cmp	r2, r3, lsr #3
   151ac:	lsr	r1, r3, #3
   151b0:	mov	r3, r1
   151b4:	movlt	r3, r2
   151b8:	cmp	r2, #0
   151bc:	movle	r3, r1
   151c0:	str	r3, [r4, #160]	; 0xa0
   151c4:	ldr	r1, [r4, #20]
   151c8:	mvn	r3, #3
   151cc:	mov	r6, #0
   151d0:	str	r1, [r0, #8]
   151d4:	ldrh	r2, [r4, #130]	; 0x82
   151d8:	strh	r2, [r0, #12]
   151dc:	strh	r5, [r4, #130]	; 0x82
   151e0:	ldr	r2, [r4, #28]
   151e4:	stm	r0, {r2, r3}
   151e8:	add	r0, r1, r2
   151ec:	str	r6, [r4, #20]
   151f0:	add	r0, r0, #7
   151f4:	bic	r0, r0, #7
   151f8:	str	r0, [r4, #28]
   151fc:	mov	r0, r6
   15200:	sub	sp, fp, #16
   15204:	pop	{r4, r5, r6, r7, fp, pc}
   15208:	movw	r0, #63313	; 0xf751
   1520c:	movw	r1, #58795	; 0xe5ab
   15210:	movw	r3, #62859	; 0xf58b
   15214:	mov	r2, #308	; 0x134
   15218:	movt	r0, #1
   1521c:	movt	r1, #1
   15220:	movt	r3, #1
   15224:	bl	129c0 <__assert_fail@plt>

00015228 <flatcc_builder_end_buffer@@Base>:
   15228:	push	{r4, r5, r6, sl, fp, lr}
   1522c:	add	fp, sp, #16
   15230:	sub	sp, sp, #8
   15234:	mov	r4, r0
   15238:	ldr	r0, [r0, #32]
   1523c:	ldrh	r0, [r0, #14]
   15240:	cmp	r0, #1
   15244:	bne	15338 <flatcc_builder_end_buffer@@Base+0x110>
   15248:	mov	r3, r1
   1524c:	ldr	r1, [r4, #152]	; 0x98
   15250:	ldrh	r0, [r4, #164]	; 0xa4
   15254:	ldrh	r2, [r4, #132]	; 0x84
   15258:	cmp	r1, #0
   1525c:	ldrh	r1, [r4, #128]	; 0x80
   15260:	and	r0, r0, #2
   15264:	orrne	r0, r0, #1
   15268:	cmp	r1, r2
   1526c:	movcc	r1, r2
   15270:	strhcc	r2, [r4, #128]	; 0x80
   15274:	str	r0, [sp, #4]
   15278:	mov	r0, r4
   1527c:	str	r1, [sp]
   15280:	add	r1, r4, #168	; 0xa8
   15284:	bl	14cfc <flatcc_builder_create_buffer@@Base>
   15288:	mov	r6, r0
   1528c:	cmp	r0, #0
   15290:	beq	1532c <flatcc_builder_end_buffer@@Base+0x104>
   15294:	ldr	r1, [r4, #32]
   15298:	ldr	r0, [r4, #16]
   1529c:	ldr	r2, [r4, #20]
   152a0:	ldr	r3, [r1, #20]
   152a4:	str	r3, [r4, #144]	; 0x90
   152a8:	ldr	r3, [r1, #28]
   152ac:	str	r3, [r4, #152]	; 0x98
   152b0:	ldr	r3, [r1, #16]
   152b4:	str	r3, [r4, #168]	; 0xa8
   152b8:	ldrh	r1, [r1, #32]
   152bc:	strh	r1, [r4, #164]	; 0xa4
   152c0:	mov	r1, #0
   152c4:	bl	12990 <memset@plt>
   152c8:	ldr	r0, [r4, #32]
   152cc:	ldr	r1, [r4, #60]	; 0x3c
   152d0:	ldr	r2, [r4, #64]	; 0x40
   152d4:	ldr	r3, [r0, #8]
   152d8:	str	r3, [r4, #20]
   152dc:	ldr	r3, [r0]
   152e0:	str	r3, [r4, #28]
   152e4:	add	r1, r1, r3
   152e8:	ldr	r5, [r0, #4]
   152ec:	str	r1, [r4, #16]
   152f0:	sub	r1, r2, r3
   152f4:	cmp	r1, r5
   152f8:	movhi	r1, r5
   152fc:	str	r1, [r4, #24]
   15300:	ldrh	r1, [r4, #130]	; 0x82
   15304:	ldrh	r2, [r4, #128]	; 0x80
   15308:	cmp	r2, r1
   1530c:	strhcc	r1, [r4, #128]	; 0x80
   15310:	ldrh	r1, [r0, #12]
   15314:	sub	r0, r0, #36	; 0x24
   15318:	str	r0, [r4, #32]
   1531c:	strh	r1, [r4, #130]	; 0x82
   15320:	ldr	r0, [r4, #156]	; 0x9c
   15324:	sub	r0, r0, #1
   15328:	str	r0, [r4, #156]	; 0x9c
   1532c:	mov	r0, r6
   15330:	sub	sp, fp, #16
   15334:	pop	{r4, r5, r6, sl, fp, pc}
   15338:	movw	r0, #59354	; 0xe7da
   1533c:	movw	r1, #58795	; 0xe5ab
   15340:	movw	r3, #59398	; 0xe806
   15344:	movw	r2, #838	; 0x346
   15348:	movt	r0, #1
   1534c:	movt	r1, #1
   15350:	movt	r3, #1
   15354:	bl	129c0 <__assert_fail@plt>

00015358 <flatcc_builder_start_struct@@Base>:
   15358:	push	{r4, r5, r6, r7, fp, lr}
   1535c:	add	fp, sp, #16
   15360:	sub	sp, sp, #8
   15364:	mov	r6, r1
   15368:	mov	r1, r2
   1536c:	mov	r4, r0
   15370:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   15374:	mov	r5, #0
   15378:	cmp	r0, #0
   1537c:	bne	153f8 <flatcc_builder_start_struct@@Base+0xa0>
   15380:	ldr	r2, [r4, #32]
   15384:	mov	r0, #2
   15388:	mvn	r7, #3
   1538c:	strh	r0, [r2, #14]
   15390:	ldr	r1, [r4, #28]
   15394:	ldr	r3, [r4, #64]	; 0x40
   15398:	ldr	r0, [r4, #60]	; 0x3c
   1539c:	sub	r3, r3, r1
   153a0:	add	r0, r0, r1
   153a4:	cmn	r3, #4
   153a8:	str	r0, [r4, #16]
   153ac:	movcs	r3, r7
   153b0:	str	r3, [r4, #24]
   153b4:	str	r7, [r2, #4]
   153b8:	ldr	r7, [r4, #20]
   153bc:	add	r2, r7, r6
   153c0:	cmp	r2, r3
   153c4:	str	r2, [r4, #20]
   153c8:	bcc	15434 <flatcc_builder_start_struct@@Base+0xdc>
   153cc:	ldr	r0, [r4, #40]	; 0x28
   153d0:	ldr	r6, [r4, #48]	; 0x30
   153d4:	add	r1, r1, r2
   153d8:	mov	r3, #1
   153dc:	str	r3, [sp]
   153e0:	add	r2, r1, #1
   153e4:	add	r1, r4, #60	; 0x3c
   153e8:	mov	r3, #1
   153ec:	blx	r6
   153f0:	cmp	r0, #0
   153f4:	beq	15404 <flatcc_builder_start_struct@@Base+0xac>
   153f8:	mov	r0, r5
   153fc:	sub	sp, fp, #16
   15400:	pop	{r4, r5, r6, r7, fp, pc}
   15404:	ldr	r1, [r4, #28]
   15408:	ldr	r0, [r4, #60]	; 0x3c
   1540c:	ldr	r3, [r4, #64]	; 0x40
   15410:	ldr	r2, [r4, #32]
   15414:	add	r0, r0, r1
   15418:	sub	r1, r3, r1
   1541c:	mvn	r3, #3
   15420:	cmn	r1, #4
   15424:	str	r0, [r4, #16]
   15428:	movcs	r1, r3
   1542c:	str	r1, [r4, #24]
   15430:	str	r3, [r2, #4]
   15434:	add	r5, r0, r7
   15438:	mov	r0, r5
   1543c:	sub	sp, fp, #16
   15440:	pop	{r4, r5, r6, r7, fp, pc}

00015444 <flatcc_builder_struct_edit@@Base>:
   15444:	ldr	r0, [r0, #16]
   15448:	bx	lr

0001544c <flatcc_builder_end_struct@@Base>:
   1544c:	push	{r4, r5, fp, lr}
   15450:	add	fp, sp, #8
   15454:	mov	r4, r0
   15458:	ldr	r0, [r0, #32]
   1545c:	ldrh	r0, [r0, #14]
   15460:	cmp	r0, #2
   15464:	bne	15504 <flatcc_builder_end_struct@@Base+0xb8>
   15468:	ldrh	r3, [r4, #130]	; 0x82
   1546c:	ldr	r1, [r4, #16]
   15470:	ldr	r2, [r4, #20]
   15474:	mov	r0, r4
   15478:	bl	14f10 <flatcc_builder_create_struct@@Base>
   1547c:	mov	r5, r0
   15480:	cmp	r0, #0
   15484:	beq	154fc <flatcc_builder_end_struct@@Base+0xb0>
   15488:	ldr	r0, [r4, #16]
   1548c:	ldr	r2, [r4, #20]
   15490:	mov	r1, #0
   15494:	bl	12990 <memset@plt>
   15498:	ldr	r0, [r4, #32]
   1549c:	ldr	r1, [r4, #60]	; 0x3c
   154a0:	ldr	ip, [r4, #64]	; 0x40
   154a4:	ldr	r3, [r0, #8]
   154a8:	str	r3, [r4, #20]
   154ac:	ldr	r3, [r0]
   154b0:	str	r3, [r4, #28]
   154b4:	add	r1, r1, r3
   154b8:	ldr	r2, [r0, #4]
   154bc:	str	r1, [r4, #16]
   154c0:	sub	r1, ip, r3
   154c4:	cmp	r1, r2
   154c8:	movhi	r1, r2
   154cc:	str	r1, [r4, #24]
   154d0:	ldrh	r1, [r4, #130]	; 0x82
   154d4:	ldrh	r2, [r4, #128]	; 0x80
   154d8:	cmp	r2, r1
   154dc:	strhcc	r1, [r4, #128]	; 0x80
   154e0:	ldrh	r1, [r0, #12]
   154e4:	sub	r0, r0, #36	; 0x24
   154e8:	str	r0, [r4, #32]
   154ec:	strh	r1, [r4, #130]	; 0x82
   154f0:	ldr	r0, [r4, #156]	; 0x9c
   154f4:	sub	r0, r0, #1
   154f8:	str	r0, [r4, #156]	; 0x9c
   154fc:	mov	r0, r5
   15500:	pop	{r4, r5, fp, pc}
   15504:	movw	r0, #59487	; 0xe85f
   15508:	movw	r1, #58795	; 0xe5ab
   1550c:	movw	r3, #59531	; 0xe88b
   15510:	mov	r2, #872	; 0x368
   15514:	movt	r0, #1
   15518:	movt	r1, #1
   1551c:	movt	r3, #1
   15520:	bl	129c0 <__assert_fail@plt>

00015524 <flatcc_builder_extend_vector@@Base>:
   15524:	push	{r4, r5, fp, lr}
   15528:	add	fp, sp, #8
   1552c:	sub	sp, sp, #8
   15530:	mov	r4, r0
   15534:	ldr	r0, [r0, #32]
   15538:	ldr	r2, [r0, #20]
   1553c:	adds	r2, r2, r1
   15540:	bcs	15600 <flatcc_builder_extend_vector@@Base+0xdc>
   15544:	ldr	r3, [r0, #24]
   15548:	cmp	r2, r3
   1554c:	bhi	15600 <flatcc_builder_extend_vector@@Base+0xdc>
   15550:	str	r2, [r0, #20]
   15554:	ldr	r2, [r4, #32]
   15558:	ldr	r5, [r4, #20]
   1555c:	ldr	r0, [r4, #24]
   15560:	ldr	r2, [r2, #16]
   15564:	mla	r1, r2, r1, r5
   15568:	cmp	r1, r0
   1556c:	str	r1, [r4, #20]
   15570:	bcs	15584 <flatcc_builder_extend_vector@@Base+0x60>
   15574:	ldr	r0, [r4, #16]
   15578:	add	r0, r0, r5
   1557c:	sub	sp, fp, #8
   15580:	pop	{r4, r5, fp, pc}
   15584:	ldr	r2, [r4, #28]
   15588:	ldr	r0, [r4, #40]	; 0x28
   1558c:	ldr	ip, [r4, #48]	; 0x30
   15590:	mov	r3, #1
   15594:	str	r3, [sp]
   15598:	mov	r3, #1
   1559c:	add	r1, r1, r2
   155a0:	add	r2, r1, #1
   155a4:	add	r1, r4, #60	; 0x3c
   155a8:	blx	ip
   155ac:	mov	r1, r0
   155b0:	mov	r0, #0
   155b4:	cmp	r1, #0
   155b8:	beq	155c4 <flatcc_builder_extend_vector@@Base+0xa0>
   155bc:	sub	sp, fp, #8
   155c0:	pop	{r4, r5, fp, pc}
   155c4:	ldr	r1, [r4, #28]
   155c8:	ldr	r0, [r4, #60]	; 0x3c
   155cc:	ldr	r3, [r4, #64]	; 0x40
   155d0:	ldr	r2, [r4, #32]
   155d4:	add	r0, r0, r1
   155d8:	sub	r1, r3, r1
   155dc:	mvn	r3, #3
   155e0:	cmn	r1, #4
   155e4:	str	r0, [r4, #16]
   155e8:	movcs	r1, r3
   155ec:	str	r1, [r4, #24]
   155f0:	str	r3, [r2, #4]
   155f4:	add	r0, r0, r5
   155f8:	sub	sp, fp, #8
   155fc:	pop	{r4, r5, fp, pc}
   15600:	movw	r0, #63066	; 0xf65a
   15604:	movw	r1, #58795	; 0xe5ab
   15608:	movw	r3, #63093	; 0xf675
   1560c:	mov	r2, #892	; 0x37c
   15610:	movt	r0, #1
   15614:	movt	r1, #1
   15618:	movt	r3, #1
   1561c:	bl	129c0 <__assert_fail@plt>

00015620 <flatcc_builder_vector_push@@Base>:
   15620:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15624:	add	fp, sp, #24
   15628:	sub	sp, sp, #8
   1562c:	mov	r5, r0
   15630:	ldr	r0, [r0, #32]
   15634:	mov	r8, r1
   15638:	ldrh	r1, [r0, #14]
   1563c:	cmp	r1, #4
   15640:	bne	1572c <flatcc_builder_vector_push@@Base+0x10c>
   15644:	ldr	r1, [r0, #20]
   15648:	ldr	r2, [r0, #24]
   1564c:	cmp	r1, r2
   15650:	bhi	1574c <flatcc_builder_vector_push@@Base+0x12c>
   15654:	add	r1, r1, #1
   15658:	str	r1, [r0, #20]
   1565c:	ldr	r1, [r5, #32]
   15660:	ldr	r4, [r5, #20]
   15664:	ldr	r0, [r5, #24]
   15668:	ldr	r6, [r1, #16]
   1566c:	add	r1, r4, r6
   15670:	cmp	r1, r0
   15674:	str	r1, [r5, #20]
   15678:	bcs	156a4 <flatcc_builder_vector_push@@Base+0x84>
   1567c:	ldr	r0, [r5, #16]
   15680:	adds	r7, r0, r4
   15684:	beq	1571c <flatcc_builder_vector_push@@Base+0xfc>
   15688:	mov	r0, r7
   1568c:	mov	r1, r8
   15690:	mov	r2, r6
   15694:	bl	12900 <memcpy@plt>
   15698:	mov	r0, r7
   1569c:	sub	sp, fp, #24
   156a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156a4:	ldr	r2, [r5, #28]
   156a8:	ldr	r0, [r5, #40]	; 0x28
   156ac:	ldr	r7, [r5, #48]	; 0x30
   156b0:	mov	r3, #1
   156b4:	str	r3, [sp]
   156b8:	mov	r3, #1
   156bc:	add	r1, r1, r2
   156c0:	add	r2, r1, #1
   156c4:	add	r1, r5, #60	; 0x3c
   156c8:	blx	r7
   156cc:	mov	r7, #0
   156d0:	cmp	r0, #0
   156d4:	beq	156e4 <flatcc_builder_vector_push@@Base+0xc4>
   156d8:	mov	r0, r7
   156dc:	sub	sp, fp, #24
   156e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156e4:	ldr	r1, [r5, #28]
   156e8:	ldr	r0, [r5, #60]	; 0x3c
   156ec:	ldr	r3, [r5, #64]	; 0x40
   156f0:	ldr	r2, [r5, #32]
   156f4:	add	r0, r0, r1
   156f8:	sub	r1, r3, r1
   156fc:	mvn	r3, #3
   15700:	cmn	r1, #4
   15704:	str	r0, [r5, #16]
   15708:	movcs	r1, r3
   1570c:	str	r1, [r5, #24]
   15710:	str	r3, [r2, #4]
   15714:	adds	r7, r0, r4
   15718:	bne	15688 <flatcc_builder_vector_push@@Base+0x68>
   1571c:	mov	r7, #0
   15720:	mov	r0, r7
   15724:	sub	sp, fp, #24
   15728:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1572c:	movw	r0, #59598	; 0xe8ce
   15730:	movw	r1, #58795	; 0xe5ab
   15734:	movw	r3, #59642	; 0xe8fa
   15738:	movw	r2, #907	; 0x38b
   1573c:	movt	r0, #1
   15740:	movt	r1, #1
   15744:	movt	r3, #1
   15748:	bl	129c0 <__assert_fail@plt>
   1574c:	movw	r0, #59709	; 0xe93d
   15750:	movw	r1, #58795	; 0xe5ab
   15754:	movw	r3, #59642	; 0xe8fa
   15758:	mov	r2, #908	; 0x38c
   1575c:	movt	r0, #1
   15760:	movt	r1, #1
   15764:	movt	r3, #1
   15768:	bl	129c0 <__assert_fail@plt>

0001576c <flatcc_builder_append_vector@@Base>:
   1576c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15770:	add	fp, sp, #24
   15774:	sub	sp, sp, #8
   15778:	mov	r6, r0
   1577c:	ldr	r0, [r0, #32]
   15780:	mov	r8, r1
   15784:	ldrh	r1, [r0, #14]
   15788:	cmp	r1, #4
   1578c:	bne	158a0 <flatcc_builder_append_vector@@Base+0x134>
   15790:	ldr	r1, [r0, #20]
   15794:	mov	r5, r2
   15798:	adds	r1, r1, r2
   1579c:	bcs	15880 <flatcc_builder_append_vector@@Base+0x114>
   157a0:	ldr	r2, [r0, #24]
   157a4:	cmp	r1, r2
   157a8:	bhi	15880 <flatcc_builder_append_vector@@Base+0x114>
   157ac:	str	r1, [r0, #20]
   157b0:	ldr	r1, [r6, #32]
   157b4:	ldr	r4, [r6, #20]
   157b8:	ldr	r0, [r6, #24]
   157bc:	ldr	r9, [r1, #16]
   157c0:	mla	r1, r9, r5, r4
   157c4:	cmp	r1, r0
   157c8:	str	r1, [r6, #20]
   157cc:	bcs	157f8 <flatcc_builder_append_vector@@Base+0x8c>
   157d0:	ldr	r0, [r6, #16]
   157d4:	adds	r7, r0, r4
   157d8:	beq	15870 <flatcc_builder_append_vector@@Base+0x104>
   157dc:	mul	r2, r9, r5
   157e0:	mov	r0, r7
   157e4:	mov	r1, r8
   157e8:	bl	12900 <memcpy@plt>
   157ec:	mov	r0, r7
   157f0:	sub	sp, fp, #24
   157f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157f8:	ldr	r2, [r6, #28]
   157fc:	ldr	r0, [r6, #40]	; 0x28
   15800:	ldr	r7, [r6, #48]	; 0x30
   15804:	mov	r3, #1
   15808:	str	r3, [sp]
   1580c:	mov	r3, #1
   15810:	add	r1, r1, r2
   15814:	add	r2, r1, #1
   15818:	add	r1, r6, #60	; 0x3c
   1581c:	blx	r7
   15820:	mov	r7, #0
   15824:	cmp	r0, #0
   15828:	beq	15838 <flatcc_builder_append_vector@@Base+0xcc>
   1582c:	mov	r0, r7
   15830:	sub	sp, fp, #24
   15834:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15838:	ldr	r1, [r6, #28]
   1583c:	ldr	r0, [r6, #60]	; 0x3c
   15840:	ldr	r3, [r6, #64]	; 0x40
   15844:	ldr	r2, [r6, #32]
   15848:	add	r0, r0, r1
   1584c:	sub	r1, r3, r1
   15850:	mvn	r3, #3
   15854:	cmn	r1, #4
   15858:	str	r0, [r6, #16]
   1585c:	movcs	r1, r3
   15860:	str	r1, [r6, #24]
   15864:	str	r3, [r2, #4]
   15868:	adds	r7, r0, r4
   1586c:	bne	157dc <flatcc_builder_append_vector@@Base+0x70>
   15870:	mov	r7, #0
   15874:	mov	r0, r7
   15878:	sub	sp, fp, #24
   1587c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15880:	movw	r0, #63066	; 0xf65a
   15884:	movw	r1, #58795	; 0xe5ab
   15888:	movw	r3, #63093	; 0xf675
   1588c:	mov	r2, #892	; 0x37c
   15890:	movt	r0, #1
   15894:	movt	r1, #1
   15898:	movt	r3, #1
   1589c:	bl	129c0 <__assert_fail@plt>
   158a0:	movw	r0, #59598	; 0xe8ce
   158a4:	movw	r1, #58795	; 0xe5ab
   158a8:	movw	r3, #59770	; 0xe97a
   158ac:	movw	r2, #915	; 0x393
   158b0:	movt	r0, #1
   158b4:	movt	r1, #1
   158b8:	movt	r3, #1
   158bc:	bl	129c0 <__assert_fail@plt>

000158c0 <flatcc_builder_extend_offset_vector@@Base>:
   158c0:	push	{r4, r5, fp, lr}
   158c4:	add	fp, sp, #8
   158c8:	sub	sp, sp, #8
   158cc:	mov	r4, r0
   158d0:	ldr	r0, [r0, #32]
   158d4:	ldr	r2, [r0, #20]
   158d8:	adds	r2, r2, r1
   158dc:	cmpcc	r2, #1073741824	; 0x40000000
   158e0:	bcc	15904 <flatcc_builder_extend_offset_vector@@Base+0x44>
   158e4:	movw	r0, #63066	; 0xf65a
   158e8:	movw	r1, #58795	; 0xe5ab
   158ec:	movw	r3, #63093	; 0xf675
   158f0:	mov	r2, #892	; 0x37c
   158f4:	movt	r0, #1
   158f8:	movt	r1, #1
   158fc:	movt	r3, #1
   15900:	bl	129c0 <__assert_fail@plt>
   15904:	str	r2, [r0, #20]
   15908:	ldr	r5, [r4, #20]
   1590c:	ldr	r0, [r4, #24]
   15910:	add	r1, r5, r1, lsl #2
   15914:	cmp	r1, r0
   15918:	str	r1, [r4, #20]
   1591c:	bcs	15930 <flatcc_builder_extend_offset_vector@@Base+0x70>
   15920:	ldr	r0, [r4, #16]
   15924:	add	r0, r0, r5
   15928:	sub	sp, fp, #8
   1592c:	pop	{r4, r5, fp, pc}
   15930:	ldr	r2, [r4, #28]
   15934:	ldr	r0, [r4, #40]	; 0x28
   15938:	ldr	ip, [r4, #48]	; 0x30
   1593c:	mov	r3, #1
   15940:	str	r3, [sp]
   15944:	mov	r3, #1
   15948:	add	r1, r1, r2
   1594c:	add	r2, r1, #1
   15950:	add	r1, r4, #60	; 0x3c
   15954:	blx	ip
   15958:	mov	r1, r0
   1595c:	mov	r0, #0
   15960:	cmp	r1, #0
   15964:	beq	15970 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   15968:	sub	sp, fp, #8
   1596c:	pop	{r4, r5, fp, pc}
   15970:	ldr	r1, [r4, #28]
   15974:	ldr	r0, [r4, #60]	; 0x3c
   15978:	ldr	r3, [r4, #64]	; 0x40
   1597c:	ldr	r2, [r4, #32]
   15980:	add	r0, r0, r1
   15984:	sub	r1, r3, r1
   15988:	mvn	r3, #3
   1598c:	cmn	r1, #4
   15990:	str	r0, [r4, #16]
   15994:	movcs	r1, r3
   15998:	str	r1, [r4, #24]
   1599c:	str	r3, [r2, #4]
   159a0:	add	r0, r0, r5
   159a4:	sub	sp, fp, #8
   159a8:	pop	{r4, r5, fp, pc}

000159ac <flatcc_builder_offset_vector_push@@Base>:
   159ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159b0:	add	fp, sp, #24
   159b4:	sub	sp, sp, #8
   159b8:	mov	r6, r0
   159bc:	ldr	r0, [r0, #32]
   159c0:	mov	r8, r1
   159c4:	ldrh	r1, [r0, #14]
   159c8:	cmp	r1, #5
   159cc:	bne	15a8c <flatcc_builder_offset_vector_push@@Base+0xe0>
   159d0:	ldr	r1, [r0, #20]
   159d4:	mov	r5, #0
   159d8:	cmn	r1, #-1073741823	; 0xc0000001
   159dc:	beq	15a38 <flatcc_builder_offset_vector_push@@Base+0x8c>
   159e0:	add	r1, r1, #1
   159e4:	str	r1, [r0, #20]
   159e8:	ldr	r7, [r6, #20]
   159ec:	ldr	r0, [r6, #24]
   159f0:	add	r1, r7, #4
   159f4:	cmp	r1, r0
   159f8:	str	r1, [r6, #20]
   159fc:	bcs	15a08 <flatcc_builder_offset_vector_push@@Base+0x5c>
   15a00:	ldr	r0, [r6, #16]
   15a04:	b	15a74 <flatcc_builder_offset_vector_push@@Base+0xc8>
   15a08:	ldr	r1, [r6, #28]
   15a0c:	ldr	r0, [r6, #40]	; 0x28
   15a10:	ldr	r4, [r6, #48]	; 0x30
   15a14:	mov	r2, #1
   15a18:	mov	r3, #1
   15a1c:	str	r2, [sp]
   15a20:	add	r1, r7, r1
   15a24:	add	r2, r1, #5
   15a28:	add	r1, r6, #60	; 0x3c
   15a2c:	blx	r4
   15a30:	cmp	r0, #0
   15a34:	beq	15a44 <flatcc_builder_offset_vector_push@@Base+0x98>
   15a38:	mov	r0, r5
   15a3c:	sub	sp, fp, #24
   15a40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a44:	ldr	r1, [r6, #28]
   15a48:	ldr	r0, [r6, #60]	; 0x3c
   15a4c:	ldr	r3, [r6, #64]	; 0x40
   15a50:	ldr	r2, [r6, #32]
   15a54:	add	r0, r0, r1
   15a58:	sub	r1, r3, r1
   15a5c:	mvn	r3, #3
   15a60:	cmn	r1, #4
   15a64:	str	r0, [r6, #16]
   15a68:	movcs	r1, r3
   15a6c:	str	r1, [r6, #24]
   15a70:	str	r3, [r2, #4]
   15a74:	adds	r0, r0, r7
   15a78:	movne	r5, r0
   15a7c:	strne	r8, [r0]
   15a80:	mov	r0, r5
   15a84:	sub	sp, fp, #24
   15a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a8c:	movw	r0, #59847	; 0xe9c7
   15a90:	movw	r1, #58795	; 0xe5ab
   15a94:	movw	r3, #59898	; 0xe9fa
   15a98:	movw	r2, #934	; 0x3a6
   15a9c:	movt	r0, #1
   15aa0:	movt	r1, #1
   15aa4:	movt	r3, #1
   15aa8:	bl	129c0 <__assert_fail@plt>

00015aac <flatcc_builder_append_offset_vector@@Base>:
   15aac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ab0:	add	fp, sp, #24
   15ab4:	sub	sp, sp, #8
   15ab8:	mov	r6, r0
   15abc:	ldr	r0, [r0, #32]
   15ac0:	mov	r8, r1
   15ac4:	ldrh	r1, [r0, #14]
   15ac8:	cmp	r1, #5
   15acc:	bne	15bd0 <flatcc_builder_append_offset_vector@@Base+0x124>
   15ad0:	ldr	r1, [r0, #20]
   15ad4:	mov	r5, r2
   15ad8:	adds	r1, r1, r2
   15adc:	cmpcc	r1, #1073741824	; 0x40000000
   15ae0:	bcc	15b04 <flatcc_builder_append_offset_vector@@Base+0x58>
   15ae4:	movw	r0, #63066	; 0xf65a
   15ae8:	movw	r1, #58795	; 0xe5ab
   15aec:	movw	r3, #63093	; 0xf675
   15af0:	mov	r2, #892	; 0x37c
   15af4:	movt	r0, #1
   15af8:	movt	r1, #1
   15afc:	movt	r3, #1
   15b00:	bl	129c0 <__assert_fail@plt>
   15b04:	str	r1, [r0, #20]
   15b08:	ldr	r4, [r6, #20]
   15b0c:	ldr	r0, [r6, #24]
   15b10:	add	r1, r4, r5, lsl #2
   15b14:	cmp	r1, r0
   15b18:	str	r1, [r6, #20]
   15b1c:	bcs	15b48 <flatcc_builder_append_offset_vector@@Base+0x9c>
   15b20:	ldr	r0, [r6, #16]
   15b24:	adds	r7, r0, r4
   15b28:	beq	15bc0 <flatcc_builder_append_offset_vector@@Base+0x114>
   15b2c:	lsl	r2, r5, #2
   15b30:	mov	r0, r7
   15b34:	mov	r1, r8
   15b38:	bl	12900 <memcpy@plt>
   15b3c:	mov	r0, r7
   15b40:	sub	sp, fp, #24
   15b44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b48:	ldr	r2, [r6, #28]
   15b4c:	ldr	r0, [r6, #40]	; 0x28
   15b50:	ldr	r7, [r6, #48]	; 0x30
   15b54:	mov	r3, #1
   15b58:	str	r3, [sp]
   15b5c:	mov	r3, #1
   15b60:	add	r1, r1, r2
   15b64:	add	r2, r1, #1
   15b68:	add	r1, r6, #60	; 0x3c
   15b6c:	blx	r7
   15b70:	mov	r7, #0
   15b74:	cmp	r0, #0
   15b78:	beq	15b88 <flatcc_builder_append_offset_vector@@Base+0xdc>
   15b7c:	mov	r0, r7
   15b80:	sub	sp, fp, #24
   15b84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b88:	ldr	r1, [r6, #28]
   15b8c:	ldr	r0, [r6, #60]	; 0x3c
   15b90:	ldr	r3, [r6, #64]	; 0x40
   15b94:	ldr	r2, [r6, #32]
   15b98:	add	r0, r0, r1
   15b9c:	sub	r1, r3, r1
   15ba0:	mvn	r3, #3
   15ba4:	cmn	r1, #4
   15ba8:	str	r0, [r6, #16]
   15bac:	movcs	r1, r3
   15bb0:	str	r1, [r6, #24]
   15bb4:	str	r3, [r2, #4]
   15bb8:	adds	r7, r0, r4
   15bbc:	bne	15b2c <flatcc_builder_append_offset_vector@@Base+0x80>
   15bc0:	mov	r7, #0
   15bc4:	mov	r0, r7
   15bc8:	sub	sp, fp, #24
   15bcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15bd0:	movw	r0, #59847	; 0xe9c7
   15bd4:	movw	r1, #58795	; 0xe5ab
   15bd8:	movw	r3, #59996	; 0xea5c
   15bdc:	mov	r2, #948	; 0x3b4
   15be0:	movt	r0, #1
   15be4:	movt	r1, #1
   15be8:	movt	r3, #1
   15bec:	bl	129c0 <__assert_fail@plt>

00015bf0 <flatcc_builder_extend_string@@Base>:
   15bf0:	push	{r4, r5, fp, lr}
   15bf4:	add	fp, sp, #8
   15bf8:	sub	sp, sp, #8
   15bfc:	mov	r4, r0
   15c00:	ldr	r0, [r0, #32]
   15c04:	ldrh	r2, [r0, #14]
   15c08:	cmp	r2, #6
   15c0c:	bne	15cc4 <flatcc_builder_extend_string@@Base+0xd4>
   15c10:	ldr	r2, [r0, #20]
   15c14:	adds	r2, r2, r1
   15c18:	bcs	15ce4 <flatcc_builder_extend_string@@Base+0xf4>
   15c1c:	str	r2, [r0, #20]
   15c20:	ldr	r5, [r4, #20]
   15c24:	ldr	r0, [r4, #24]
   15c28:	add	r1, r5, r1
   15c2c:	cmp	r1, r0
   15c30:	str	r1, [r4, #20]
   15c34:	bcs	15c48 <flatcc_builder_extend_string@@Base+0x58>
   15c38:	ldr	r0, [r4, #16]
   15c3c:	add	r0, r0, r5
   15c40:	sub	sp, fp, #8
   15c44:	pop	{r4, r5, fp, pc}
   15c48:	ldr	r2, [r4, #28]
   15c4c:	ldr	r0, [r4, #40]	; 0x28
   15c50:	ldr	ip, [r4, #48]	; 0x30
   15c54:	mov	r3, #1
   15c58:	str	r3, [sp]
   15c5c:	mov	r3, #1
   15c60:	add	r1, r1, r2
   15c64:	add	r2, r1, #1
   15c68:	add	r1, r4, #60	; 0x3c
   15c6c:	blx	ip
   15c70:	mov	r1, r0
   15c74:	mov	r0, #0
   15c78:	cmp	r1, #0
   15c7c:	beq	15c88 <flatcc_builder_extend_string@@Base+0x98>
   15c80:	sub	sp, fp, #8
   15c84:	pop	{r4, r5, fp, pc}
   15c88:	ldr	r1, [r4, #28]
   15c8c:	ldr	r0, [r4, #60]	; 0x3c
   15c90:	ldr	r3, [r4, #64]	; 0x40
   15c94:	ldr	r2, [r4, #32]
   15c98:	add	r0, r0, r1
   15c9c:	sub	r1, r3, r1
   15ca0:	mvn	r3, #3
   15ca4:	cmn	r1, #4
   15ca8:	str	r0, [r4, #16]
   15cac:	movcs	r1, r3
   15cb0:	str	r1, [r4, #24]
   15cb4:	str	r3, [r2, #4]
   15cb8:	add	r0, r0, r5
   15cbc:	sub	sp, fp, #8
   15cc0:	pop	{r4, r5, fp, pc}
   15cc4:	movw	r0, #60112	; 0xead0
   15cc8:	movw	r1, #58795	; 0xe5ab
   15ccc:	movw	r3, #60156	; 0xeafc
   15cd0:	movw	r2, #957	; 0x3bd
   15cd4:	movt	r0, #1
   15cd8:	movt	r1, #1
   15cdc:	movt	r3, #1
   15ce0:	bl	129c0 <__assert_fail@plt>
   15ce4:	movw	r0, #63066	; 0xf65a
   15ce8:	movw	r1, #58795	; 0xe5ab
   15cec:	movw	r3, #63093	; 0xf675
   15cf0:	mov	r2, #892	; 0x37c
   15cf4:	movt	r0, #1
   15cf8:	movt	r1, #1
   15cfc:	movt	r3, #1
   15d00:	bl	129c0 <__assert_fail@plt>

00015d04 <flatcc_builder_append_string@@Base>:
   15d04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d08:	add	fp, sp, #24
   15d0c:	sub	sp, sp, #8
   15d10:	mov	r6, r0
   15d14:	ldr	r0, [r0, #32]
   15d18:	mov	r8, r1
   15d1c:	ldrh	r1, [r0, #14]
   15d20:	cmp	r1, #6
   15d24:	bne	15e04 <flatcc_builder_append_string@@Base+0x100>
   15d28:	ldr	r1, [r0, #20]
   15d2c:	mov	r4, r2
   15d30:	adds	r1, r1, r2
   15d34:	bcs	15e24 <flatcc_builder_append_string@@Base+0x120>
   15d38:	str	r1, [r0, #20]
   15d3c:	ldr	r5, [r6, #20]
   15d40:	ldr	r0, [r6, #24]
   15d44:	add	r1, r5, r4
   15d48:	cmp	r1, r0
   15d4c:	str	r1, [r6, #20]
   15d50:	bcs	15d7c <flatcc_builder_append_string@@Base+0x78>
   15d54:	ldr	r0, [r6, #16]
   15d58:	adds	r7, r0, r5
   15d5c:	beq	15df4 <flatcc_builder_append_string@@Base+0xf0>
   15d60:	mov	r0, r7
   15d64:	mov	r1, r8
   15d68:	mov	r2, r4
   15d6c:	bl	12900 <memcpy@plt>
   15d70:	mov	r0, r7
   15d74:	sub	sp, fp, #24
   15d78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d7c:	ldr	r2, [r6, #28]
   15d80:	ldr	r0, [r6, #40]	; 0x28
   15d84:	ldr	r7, [r6, #48]	; 0x30
   15d88:	mov	r3, #1
   15d8c:	str	r3, [sp]
   15d90:	mov	r3, #1
   15d94:	add	r1, r1, r2
   15d98:	add	r2, r1, #1
   15d9c:	add	r1, r6, #60	; 0x3c
   15da0:	blx	r7
   15da4:	mov	r7, #0
   15da8:	cmp	r0, #0
   15dac:	beq	15dbc <flatcc_builder_append_string@@Base+0xb8>
   15db0:	mov	r0, r7
   15db4:	sub	sp, fp, #24
   15db8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15dbc:	ldr	r1, [r6, #28]
   15dc0:	ldr	r0, [r6, #60]	; 0x3c
   15dc4:	ldr	r3, [r6, #64]	; 0x40
   15dc8:	ldr	r2, [r6, #32]
   15dcc:	add	r0, r0, r1
   15dd0:	sub	r1, r3, r1
   15dd4:	mvn	r3, #3
   15dd8:	cmn	r1, #4
   15ddc:	str	r0, [r6, #16]
   15de0:	movcs	r1, r3
   15de4:	str	r1, [r6, #24]
   15de8:	str	r3, [r2, #4]
   15dec:	adds	r7, r0, r5
   15df0:	bne	15d60 <flatcc_builder_append_string@@Base+0x5c>
   15df4:	mov	r7, #0
   15df8:	mov	r0, r7
   15dfc:	sub	sp, fp, #24
   15e00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e04:	movw	r0, #60112	; 0xead0
   15e08:	movw	r1, #58795	; 0xe5ab
   15e0c:	movw	r3, #60219	; 0xeb3b
   15e10:	movw	r2, #966	; 0x3c6
   15e14:	movt	r0, #1
   15e18:	movt	r1, #1
   15e1c:	movt	r3, #1
   15e20:	bl	129c0 <__assert_fail@plt>
   15e24:	movw	r0, #63066	; 0xf65a
   15e28:	movw	r1, #58795	; 0xe5ab
   15e2c:	movw	r3, #63093	; 0xf675
   15e30:	mov	r2, #892	; 0x37c
   15e34:	movt	r0, #1
   15e38:	movt	r1, #1
   15e3c:	movt	r3, #1
   15e40:	bl	129c0 <__assert_fail@plt>

00015e44 <flatcc_builder_append_string_str@@Base>:
   15e44:	push	{r4, r5, fp, lr}
   15e48:	add	fp, sp, #8
   15e4c:	mov	r5, r0
   15e50:	mov	r0, r1
   15e54:	mov	r4, r1
   15e58:	bl	1296c <strlen@plt>
   15e5c:	mov	r2, r0
   15e60:	mov	r0, r5
   15e64:	mov	r1, r4
   15e68:	pop	{r4, r5, fp, lr}
   15e6c:	b	15d04 <flatcc_builder_append_string@@Base>

00015e70 <flatcc_builder_append_string_strn@@Base>:
   15e70:	push	{r4, r5, r6, sl, fp, lr}
   15e74:	add	fp, sp, #16
   15e78:	mov	r6, r0
   15e7c:	mov	r5, r1
   15e80:	mov	r0, r1
   15e84:	mov	r1, #0
   15e88:	mov	r4, r2
   15e8c:	bl	129a8 <memchr@plt>
   15e90:	cmp	r0, #0
   15e94:	mov	r1, r5
   15e98:	subne	r4, r0, r5
   15e9c:	mov	r0, r6
   15ea0:	mov	r2, r4
   15ea4:	pop	{r4, r5, r6, sl, fp, lr}
   15ea8:	b	15d04 <flatcc_builder_append_string@@Base>

00015eac <flatcc_builder_truncate_vector@@Base>:
   15eac:	push	{fp, lr}
   15eb0:	mov	fp, sp
   15eb4:	ldr	r2, [r0, #32]
   15eb8:	ldrh	r3, [r2, #14]
   15ebc:	cmp	r3, #4
   15ec0:	bne	15f08 <flatcc_builder_truncate_vector@@Base+0x5c>
   15ec4:	ldr	r3, [r2, #20]
   15ec8:	cmp	r3, r1
   15ecc:	bcc	15f28 <flatcc_builder_truncate_vector@@Base+0x7c>
   15ed0:	sub	r3, r3, r1
   15ed4:	str	r3, [r2, #20]
   15ed8:	ldr	r2, [r0, #32]
   15edc:	ldr	r3, [r0, #20]
   15ee0:	ldr	ip, [r0, #16]
   15ee4:	ldr	r2, [r2, #16]
   15ee8:	mls	r3, r2, r1, r3
   15eec:	mul	r2, r2, r1
   15ef0:	mov	r1, #0
   15ef4:	str	r3, [r0, #20]
   15ef8:	add	r0, ip, r3
   15efc:	bl	12990 <memset@plt>
   15f00:	mov	r0, #0
   15f04:	pop	{fp, pc}
   15f08:	movw	r0, #59598	; 0xe8ce
   15f0c:	movw	r1, #58795	; 0xe5ab
   15f10:	movw	r3, #60296	; 0xeb88
   15f14:	movw	r2, #985	; 0x3d9
   15f18:	movt	r0, #1
   15f1c:	movt	r1, #1
   15f20:	movt	r3, #1
   15f24:	bl	129c0 <__assert_fail@plt>
   15f28:	movw	r0, #60359	; 0xebc7
   15f2c:	movw	r1, #58795	; 0xe5ab
   15f30:	movw	r3, #60296	; 0xeb88
   15f34:	movw	r2, #986	; 0x3da
   15f38:	movt	r0, #1
   15f3c:	movt	r1, #1
   15f40:	movt	r3, #1
   15f44:	bl	129c0 <__assert_fail@plt>

00015f48 <flatcc_builder_truncate_offset_vector@@Base>:
   15f48:	push	{fp, lr}
   15f4c:	mov	fp, sp
   15f50:	ldr	r2, [r0, #32]
   15f54:	ldrh	r3, [r2, #14]
   15f58:	cmp	r3, #5
   15f5c:	bne	15fa4 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15f60:	ldr	r3, [r2, #20]
   15f64:	cmp	r3, r1
   15f68:	bcc	15fc4 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15f6c:	sub	r3, r3, r1
   15f70:	str	r3, [r2, #20]
   15f74:	ldr	r2, [r0, #32]
   15f78:	ldr	r3, [r0, #20]
   15f7c:	ldr	ip, [r0, #16]
   15f80:	ldr	r2, [r2, #16]
   15f84:	mls	r3, r2, r1, r3
   15f88:	mul	r2, r2, r1
   15f8c:	mov	r1, #0
   15f90:	str	r3, [r0, #20]
   15f94:	add	r0, ip, r3
   15f98:	bl	12990 <memset@plt>
   15f9c:	mov	r0, #0
   15fa0:	pop	{fp, pc}
   15fa4:	movw	r0, #59847	; 0xe9c7
   15fa8:	movw	r1, #58795	; 0xe5ab
   15fac:	movw	r3, #60395	; 0xebeb
   15fb0:	movw	r2, #994	; 0x3e2
   15fb4:	movt	r0, #1
   15fb8:	movt	r1, #1
   15fbc:	movt	r3, #1
   15fc0:	bl	129c0 <__assert_fail@plt>
   15fc4:	movw	r0, #60465	; 0xec31
   15fc8:	movw	r1, #58795	; 0xe5ab
   15fcc:	movw	r3, #60395	; 0xebeb
   15fd0:	movw	r2, #995	; 0x3e3
   15fd4:	movt	r0, #1
   15fd8:	movt	r1, #1
   15fdc:	movt	r3, #1
   15fe0:	bl	129c0 <__assert_fail@plt>

00015fe4 <flatcc_builder_truncate_string@@Base>:
   15fe4:	push	{fp, lr}
   15fe8:	mov	fp, sp
   15fec:	mov	r2, r1
   15ff0:	ldr	r1, [r0, #32]
   15ff4:	ldrh	r3, [r1, #14]
   15ff8:	cmp	r3, #6
   15ffc:	bne	16038 <flatcc_builder_truncate_string@@Base+0x54>
   16000:	ldr	r3, [r1, #20]
   16004:	cmp	r3, r2
   16008:	bcc	16058 <flatcc_builder_truncate_string@@Base+0x74>
   1600c:	sub	r3, r3, r2
   16010:	str	r3, [r1, #20]
   16014:	ldr	r3, [r0, #20]
   16018:	ldr	r1, [r0, #16]
   1601c:	sub	r3, r3, r2
   16020:	str	r3, [r0, #20]
   16024:	add	r0, r1, r3
   16028:	mov	r1, #0
   1602c:	bl	12990 <memset@plt>
   16030:	mov	r0, #0
   16034:	pop	{fp, pc}
   16038:	movw	r0, #60112	; 0xead0
   1603c:	movw	r1, #58795	; 0xe5ab
   16040:	movw	r3, #60524	; 0xec6c
   16044:	movw	r2, #1003	; 0x3eb
   16048:	movt	r0, #1
   1604c:	movt	r1, #1
   16050:	movt	r3, #1
   16054:	bl	129c0 <__assert_fail@plt>
   16058:	movw	r0, #60587	; 0xecab
   1605c:	movw	r1, #58795	; 0xe5ab
   16060:	movw	r3, #60524	; 0xec6c
   16064:	mov	r2, #1004	; 0x3ec
   16068:	movt	r0, #1
   1606c:	movt	r1, #1
   16070:	movt	r3, #1
   16074:	bl	129c0 <__assert_fail@plt>

00016078 <flatcc_builder_start_vector@@Base>:
   16078:	push	{r4, r5, r6, r7, fp, lr}
   1607c:	add	fp, sp, #16
   16080:	mov	r7, #4
   16084:	cmp	r2, #4
   16088:	mov	r6, r1
   1608c:	mov	r5, r3
   16090:	mov	r4, r0
   16094:	movls	r2, r7
   16098:	mov	r1, r2
   1609c:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   160a0:	mov	r1, r0
   160a4:	mvn	r0, #0
   160a8:	cmp	r1, #0
   160ac:	popne	{r4, r5, r6, r7, fp, pc}
   160b0:	ldr	r0, [r4, #32]
   160b4:	str	r6, [r0, #16]
   160b8:	mov	r0, #0
   160bc:	ldr	r1, [r4, #32]
   160c0:	str	r0, [r1, #20]
   160c4:	ldr	r1, [r4, #32]
   160c8:	str	r5, [r1, #24]
   160cc:	ldr	r1, [r4, #32]
   160d0:	strh	r7, [r1, #14]
   160d4:	ldr	r2, [r4, #28]
   160d8:	ldr	r3, [r4, #60]	; 0x3c
   160dc:	ldr	r7, [r4, #64]	; 0x40
   160e0:	add	r3, r3, r2
   160e4:	sub	r2, r7, r2
   160e8:	str	r3, [r4, #16]
   160ec:	mvn	r3, #3
   160f0:	cmn	r2, #4
   160f4:	movcs	r2, r3
   160f8:	str	r2, [r4, #24]
   160fc:	str	r3, [r1, #4]
   16100:	pop	{r4, r5, r6, r7, fp, pc}

00016104 <flatcc_builder_start_offset_vector@@Base>:
   16104:	push	{r4, r5, fp, lr}
   16108:	add	fp, sp, #8
   1610c:	mov	r1, #4
   16110:	mov	r4, r0
   16114:	mov	r5, #4
   16118:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   1611c:	mov	r1, r0
   16120:	mvn	r0, #0
   16124:	cmp	r1, #0
   16128:	popne	{r4, r5, fp, pc}
   1612c:	ldr	r0, [r4, #32]
   16130:	mov	r2, #5
   16134:	str	r5, [r0, #16]
   16138:	mov	r0, #0
   1613c:	ldr	r1, [r4, #32]
   16140:	str	r0, [r1, #20]
   16144:	ldr	r1, [r4, #32]
   16148:	strh	r2, [r1, #14]
   1614c:	ldr	r2, [r4, #28]
   16150:	ldr	r3, [r4, #60]	; 0x3c
   16154:	ldr	r5, [r4, #64]	; 0x40
   16158:	add	r3, r3, r2
   1615c:	sub	r2, r5, r2
   16160:	str	r3, [r4, #16]
   16164:	mvn	r3, #3
   16168:	cmn	r2, #4
   1616c:	movcs	r2, r3
   16170:	str	r2, [r4, #24]
   16174:	str	r3, [r1, #4]
   16178:	pop	{r4, r5, fp, pc}

0001617c <flatcc_builder_create_offset_vector@@Base>:
   1617c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16180:	add	fp, sp, #24
   16184:	sub	sp, sp, #8
   16188:	mov	r8, r1
   1618c:	mov	r1, #4
   16190:	mov	r6, r2
   16194:	mov	r4, r0
   16198:	mov	r5, #4
   1619c:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   161a0:	mov	r7, #0
   161a4:	cmp	r0, #0
   161a8:	beq	161b8 <flatcc_builder_create_offset_vector@@Base+0x3c>
   161ac:	mov	r0, r7
   161b0:	sub	sp, fp, #24
   161b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161b8:	ldr	r0, [r4, #32]
   161bc:	mov	r1, #0
   161c0:	str	r5, [r0, #16]
   161c4:	ldr	r0, [r4, #32]
   161c8:	str	r1, [r0, #20]
   161cc:	mov	r1, #5
   161d0:	ldr	r0, [r4, #32]
   161d4:	strh	r1, [r0, #14]
   161d8:	ldr	r1, [r4, #28]
   161dc:	ldr	r2, [r4, #60]	; 0x3c
   161e0:	ldr	r3, [r4, #64]	; 0x40
   161e4:	add	r2, r2, r1
   161e8:	sub	r1, r3, r1
   161ec:	str	r2, [r4, #16]
   161f0:	mvn	r2, #3
   161f4:	cmn	r1, #4
   161f8:	movcs	r1, r2
   161fc:	str	r1, [r4, #24]
   16200:	str	r2, [r0, #4]
   16204:	ldr	r1, [r0, #20]
   16208:	adds	r1, r1, r6
   1620c:	cmpcc	r1, #1073741824	; 0x40000000
   16210:	bcc	16234 <flatcc_builder_create_offset_vector@@Base+0xb8>
   16214:	movw	r0, #63066	; 0xf65a
   16218:	movw	r1, #58795	; 0xe5ab
   1621c:	movw	r3, #63093	; 0xf675
   16220:	mov	r2, #892	; 0x37c
   16224:	movt	r0, #1
   16228:	movt	r1, #1
   1622c:	movt	r3, #1
   16230:	bl	129c0 <__assert_fail@plt>
   16234:	str	r1, [r0, #20]
   16238:	ldr	r5, [r4, #20]
   1623c:	ldr	r0, [r4, #24]
   16240:	add	r1, r5, r6, lsl #2
   16244:	cmp	r1, r0
   16248:	str	r1, [r4, #20]
   1624c:	bcs	16320 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   16250:	ldr	r0, [r4, #16]
   16254:	adds	r0, r0, r5
   16258:	beq	1638c <flatcc_builder_create_offset_vector@@Base+0x210>
   1625c:	lsl	r2, r6, #2
   16260:	mov	r1, r8
   16264:	bl	12900 <memcpy@plt>
   16268:	ldr	r0, [r4, #32]
   1626c:	ldrh	r1, [r0, #14]
   16270:	cmp	r1, #5
   16274:	bne	1639c <flatcc_builder_create_offset_vector@@Base+0x220>
   16278:	ldr	r2, [r0, #20]
   1627c:	ldr	r1, [r4, #16]
   16280:	mov	r0, r4
   16284:	mov	r3, #0
   16288:	mov	r7, #0
   1628c:	bl	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16290:	cmp	r0, #0
   16294:	beq	161ac <flatcc_builder_create_offset_vector@@Base+0x30>
   16298:	mov	r5, r0
   1629c:	ldr	r0, [r4, #16]
   162a0:	ldr	r2, [r4, #20]
   162a4:	mov	r1, #0
   162a8:	bl	12990 <memset@plt>
   162ac:	ldr	r0, [r4, #32]
   162b0:	ldr	r1, [r4, #60]	; 0x3c
   162b4:	ldr	r2, [r4, #64]	; 0x40
   162b8:	ldr	r3, [r0, #8]
   162bc:	str	r3, [r4, #20]
   162c0:	ldr	r3, [r0]
   162c4:	str	r3, [r4, #28]
   162c8:	add	r1, r1, r3
   162cc:	ldr	r7, [r0, #4]
   162d0:	str	r1, [r4, #16]
   162d4:	sub	r1, r2, r3
   162d8:	cmp	r1, r7
   162dc:	movhi	r1, r7
   162e0:	mov	r7, r5
   162e4:	str	r1, [r4, #24]
   162e8:	ldrh	r1, [r4, #130]	; 0x82
   162ec:	ldrh	r2, [r4, #128]	; 0x80
   162f0:	cmp	r2, r1
   162f4:	strhcc	r1, [r4, #128]	; 0x80
   162f8:	ldrh	r1, [r0, #12]
   162fc:	sub	r0, r0, #36	; 0x24
   16300:	str	r0, [r4, #32]
   16304:	strh	r1, [r4, #130]	; 0x82
   16308:	ldr	r0, [r4, #156]	; 0x9c
   1630c:	sub	r0, r0, #1
   16310:	str	r0, [r4, #156]	; 0x9c
   16314:	mov	r0, r7
   16318:	sub	sp, fp, #24
   1631c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16320:	ldr	r2, [r4, #28]
   16324:	ldr	r0, [r4, #40]	; 0x28
   16328:	ldr	r7, [r4, #48]	; 0x30
   1632c:	mov	r3, #1
   16330:	str	r3, [sp]
   16334:	mov	r3, #1
   16338:	add	r1, r1, r2
   1633c:	add	r2, r1, #1
   16340:	add	r1, r4, #60	; 0x3c
   16344:	blx	r7
   16348:	mov	r7, #0
   1634c:	cmp	r0, #0
   16350:	bne	161ac <flatcc_builder_create_offset_vector@@Base+0x30>
   16354:	ldr	r1, [r4, #28]
   16358:	ldr	r0, [r4, #60]	; 0x3c
   1635c:	ldr	r3, [r4, #64]	; 0x40
   16360:	ldr	r2, [r4, #32]
   16364:	add	r0, r0, r1
   16368:	sub	r1, r3, r1
   1636c:	mvn	r3, #3
   16370:	cmn	r1, #4
   16374:	str	r0, [r4, #16]
   16378:	movcs	r1, r3
   1637c:	str	r1, [r4, #24]
   16380:	str	r3, [r2, #4]
   16384:	adds	r0, r0, r5
   16388:	bne	1625c <flatcc_builder_create_offset_vector@@Base+0xe0>
   1638c:	mov	r7, #0
   16390:	mov	r0, r7
   16394:	sub	sp, fp, #24
   16398:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1639c:	movw	r0, #59847	; 0xe9c7
   163a0:	movw	r1, #58795	; 0xe5ab
   163a4:	movw	r3, #61430	; 0xeff6
   163a8:	movw	r2, #1480	; 0x5c8
   163ac:	movt	r0, #1
   163b0:	movt	r1, #1
   163b4:	movt	r3, #1
   163b8:	bl	129c0 <__assert_fail@plt>

000163bc <flatcc_builder_end_offset_vector@@Base>:
   163bc:	push	{r4, r5, fp, lr}
   163c0:	add	fp, sp, #8
   163c4:	mov	r4, r0
   163c8:	ldr	r0, [r0, #32]
   163cc:	ldrh	r1, [r0, #14]
   163d0:	cmp	r1, #5
   163d4:	bne	16474 <flatcc_builder_end_offset_vector@@Base+0xb8>
   163d8:	ldr	r2, [r0, #20]
   163dc:	ldr	r1, [r4, #16]
   163e0:	mov	r0, r4
   163e4:	mov	r3, #0
   163e8:	bl	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   163ec:	mov	r5, r0
   163f0:	cmp	r0, #0
   163f4:	beq	1646c <flatcc_builder_end_offset_vector@@Base+0xb0>
   163f8:	ldr	r0, [r4, #16]
   163fc:	ldr	r2, [r4, #20]
   16400:	mov	r1, #0
   16404:	bl	12990 <memset@plt>
   16408:	ldr	r0, [r4, #32]
   1640c:	ldr	r1, [r4, #60]	; 0x3c
   16410:	ldr	ip, [r4, #64]	; 0x40
   16414:	ldr	r3, [r0, #8]
   16418:	str	r3, [r4, #20]
   1641c:	ldr	r3, [r0]
   16420:	str	r3, [r4, #28]
   16424:	add	r1, r1, r3
   16428:	ldr	r2, [r0, #4]
   1642c:	str	r1, [r4, #16]
   16430:	sub	r1, ip, r3
   16434:	cmp	r1, r2
   16438:	movhi	r1, r2
   1643c:	str	r1, [r4, #24]
   16440:	ldrh	r1, [r4, #130]	; 0x82
   16444:	ldrh	r2, [r4, #128]	; 0x80
   16448:	cmp	r2, r1
   1644c:	strhcc	r1, [r4, #128]	; 0x80
   16450:	ldrh	r1, [r0, #12]
   16454:	sub	r0, r0, #36	; 0x24
   16458:	str	r0, [r4, #32]
   1645c:	strh	r1, [r4, #130]	; 0x82
   16460:	ldr	r0, [r4, #156]	; 0x9c
   16464:	sub	r0, r0, #1
   16468:	str	r0, [r4, #156]	; 0x9c
   1646c:	mov	r0, r5
   16470:	pop	{r4, r5, fp, pc}
   16474:	movw	r0, #59847	; 0xe9c7
   16478:	movw	r1, #58795	; 0xe5ab
   1647c:	movw	r3, #61430	; 0xeff6
   16480:	movw	r2, #1480	; 0x5c8
   16484:	movt	r0, #1
   16488:	movt	r1, #1
   1648c:	movt	r3, #1
   16490:	bl	129c0 <__assert_fail@plt>

00016494 <flatcc_builder_start_string@@Base>:
   16494:	push	{r4, r5, fp, lr}
   16498:	add	fp, sp, #8
   1649c:	mov	r1, #1
   164a0:	mov	r4, r0
   164a4:	mov	r5, #1
   164a8:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   164ac:	mov	r1, r0
   164b0:	mvn	r0, #0
   164b4:	cmp	r1, #0
   164b8:	popne	{r4, r5, fp, pc}
   164bc:	ldr	r0, [r4, #32]
   164c0:	mov	r2, #6
   164c4:	str	r5, [r0, #16]
   164c8:	mov	r0, #0
   164cc:	ldr	r1, [r4, #32]
   164d0:	str	r0, [r1, #20]
   164d4:	ldr	r1, [r4, #32]
   164d8:	strh	r2, [r1, #14]
   164dc:	ldr	r2, [r4, #28]
   164e0:	ldr	r3, [r4, #60]	; 0x3c
   164e4:	ldr	r5, [r4, #64]	; 0x40
   164e8:	add	r3, r3, r2
   164ec:	sub	r2, r5, r2
   164f0:	str	r3, [r4, #16]
   164f4:	mvn	r3, #3
   164f8:	cmn	r2, #4
   164fc:	movcs	r2, r3
   16500:	str	r2, [r4, #24]
   16504:	str	r3, [r1, #4]
   16508:	pop	{r4, r5, fp, pc}

0001650c <flatcc_builder_reserve_table@@Base>:
   1650c:	push	{r4, r5, r6, sl, fp, lr}
   16510:	add	fp, sp, #16
   16514:	sub	sp, sp, #8
   16518:	cmn	r1, #1
   1651c:	ble	165f4 <flatcc_builder_reserve_table@@Base+0xe8>
   16520:	mov	r4, r0
   16524:	ldr	r0, [r0, #32]
   16528:	mov	r5, r1
   1652c:	ldr	r1, [r4, #56]	; 0x38
   16530:	ldrh	r2, [r0, #28]
   16534:	ldr	r0, [r0, #16]
   16538:	add	r6, r0, r2, lsl #1
   1653c:	add	r0, r6, r5, lsl #1
   16540:	add	r2, r0, #4
   16544:	cmp	r2, r1
   16548:	bls	16570 <flatcc_builder_reserve_table@@Base+0x64>
   1654c:	ldr	r0, [r4, #40]	; 0x28
   16550:	ldr	ip, [r4, #48]	; 0x30
   16554:	mov	r3, #0
   16558:	add	r1, r4, #52	; 0x34
   1655c:	str	r3, [sp]
   16560:	mov	r3, #1
   16564:	blx	ip
   16568:	cmp	r0, #0
   1656c:	bne	16614 <flatcc_builder_reserve_table@@Base+0x108>
   16570:	ldr	r0, [r4, #52]	; 0x34
   16574:	adds	r0, r0, r6
   16578:	str	r0, [r4, #4]
   1657c:	beq	165e8 <flatcc_builder_reserve_table@@Base+0xdc>
   16580:	add	r0, r0, #4
   16584:	lsl	r1, r5, #1
   16588:	str	r0, [r4, #4]
   1658c:	ldr	r0, [r4, #32]
   16590:	ldr	r3, [r4, #80]	; 0x50
   16594:	ldr	r5, [r0, #20]
   16598:	orr	r0, r1, #1
   1659c:	add	r2, r5, r0
   165a0:	cmp	r2, r3
   165a4:	bls	165cc <flatcc_builder_reserve_table@@Base+0xc0>
   165a8:	ldr	r0, [r4, #40]	; 0x28
   165ac:	ldr	r6, [r4, #48]	; 0x30
   165b0:	mov	r3, #3
   165b4:	add	r1, r4, #76	; 0x4c
   165b8:	str	r3, [sp]
   165bc:	mov	r3, #0
   165c0:	blx	r6
   165c4:	cmp	r0, #0
   165c8:	bne	16614 <flatcc_builder_reserve_table@@Base+0x108>
   165cc:	ldr	r0, [r4, #76]	; 0x4c
   165d0:	adds	r0, r0, r5
   165d4:	str	r0, [r4]
   165d8:	mov	r0, #0
   165dc:	mvneq	r0, #0
   165e0:	sub	sp, fp, #16
   165e4:	pop	{r4, r5, r6, sl, fp, pc}
   165e8:	mvn	r0, #0
   165ec:	sub	sp, fp, #16
   165f0:	pop	{r4, r5, r6, sl, fp, pc}
   165f4:	movw	r0, #60686	; 0xed0e
   165f8:	movw	r1, #58795	; 0xe5ab
   165fc:	movw	r3, #60621	; 0xeccd
   16600:	movw	r2, #1065	; 0x429
   16604:	movt	r0, #1
   16608:	movt	r1, #1
   1660c:	movt	r3, #1
   16610:	bl	129c0 <__assert_fail@plt>
   16614:	movw	r0, #63313	; 0xf751
   16618:	movw	r1, #58795	; 0xe5ab
   1661c:	movw	r3, #62859	; 0xf58b
   16620:	mov	r2, #308	; 0x134
   16624:	movt	r0, #1
   16628:	movt	r1, #1
   1662c:	movt	r3, #1
   16630:	bl	129c0 <__assert_fail@plt>

00016634 <flatcc_builder_start_table@@Base>:
   16634:	push	{r4, r5, r6, r7, fp, lr}
   16638:	add	fp, sp, #16
   1663c:	sub	sp, sp, #8
   16640:	mov	r6, r1
   16644:	mov	r1, #4
   16648:	mov	r4, r0
   1664c:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   16650:	mvn	r5, #0
   16654:	cmp	r0, #0
   16658:	beq	16668 <flatcc_builder_start_table@@Base+0x34>
   1665c:	mov	r0, r5
   16660:	sub	sp, fp, #16
   16664:	pop	{r4, r5, r6, r7, fp, pc}
   16668:	mov	r1, r4
   1666c:	ldr	r2, [r4, #4]
   16670:	ldr	r3, [r4, #32]
   16674:	ldr	r0, [r1, #52]!	; 0x34
   16678:	sub	r0, r2, r0
   1667c:	str	r0, [r3, #16]
   16680:	ldr	r0, [r4]
   16684:	ldr	r3, [r4, #76]	; 0x4c
   16688:	ldr	r2, [r4, #32]
   1668c:	sub	r0, r0, r3
   16690:	mov	r3, #0
   16694:	str	r0, [r2, #20]
   16698:	ldr	r0, [r4, #12]
   1669c:	ldr	r2, [r4, #32]
   166a0:	str	r0, [r2, #24]
   166a4:	ldr	r0, [r4, #32]
   166a8:	ldrh	r2, [r4, #8]
   166ac:	strh	r2, [r0, #28]
   166b0:	movw	r0, #15186	; 0x3b52
   166b4:	strh	r3, [r4, #8]
   166b8:	mov	r2, #3
   166bc:	movt	r0, #12137	; 0x2f69
   166c0:	str	r0, [r4, #12]
   166c4:	ldr	r0, [r4, #32]
   166c8:	strh	r2, [r0, #14]
   166cc:	ldrh	r2, [r0, #28]
   166d0:	ldr	r0, [r0, #16]
   166d4:	add	r7, r0, r2, lsl #1
   166d8:	add	r0, r7, r6, lsl #1
   166dc:	add	r2, r0, #4
   166e0:	ldr	r0, [r4, #56]	; 0x38
   166e4:	cmp	r2, r0
   166e8:	bls	16708 <flatcc_builder_start_table@@Base+0xd4>
   166ec:	ldr	r0, [r4, #40]	; 0x28
   166f0:	ldr	ip, [r4, #48]	; 0x30
   166f4:	str	r3, [sp]
   166f8:	mov	r3, #1
   166fc:	blx	ip
   16700:	cmp	r0, #0
   16704:	bne	167b4 <flatcc_builder_start_table@@Base+0x180>
   16708:	ldr	r0, [r4, #52]	; 0x34
   1670c:	adds	r0, r0, r7
   16710:	str	r0, [r4, #4]
   16714:	beq	1665c <flatcc_builder_start_table@@Base+0x28>
   16718:	add	r0, r0, #4
   1671c:	lsl	r1, r6, #1
   16720:	str	r0, [r4, #4]
   16724:	ldr	r0, [r4, #32]
   16728:	ldr	r3, [r4, #80]	; 0x50
   1672c:	ldr	r6, [r0, #20]
   16730:	orr	r0, r1, #1
   16734:	add	r2, r6, r0
   16738:	cmp	r2, r3
   1673c:	bls	16764 <flatcc_builder_start_table@@Base+0x130>
   16740:	ldr	r0, [r4, #40]	; 0x28
   16744:	ldr	r7, [r4, #48]	; 0x30
   16748:	mov	r3, #3
   1674c:	add	r1, r4, #76	; 0x4c
   16750:	str	r3, [sp]
   16754:	mov	r3, #0
   16758:	blx	r7
   1675c:	cmp	r0, #0
   16760:	bne	167b4 <flatcc_builder_start_table@@Base+0x180>
   16764:	ldr	r0, [r4, #76]	; 0x4c
   16768:	adds	r0, r0, r6
   1676c:	str	r0, [r4]
   16770:	beq	1665c <flatcc_builder_start_table@@Base+0x28>
   16774:	ldr	r0, [r4, #28]
   16778:	ldr	r2, [r4, #60]	; 0x3c
   1677c:	ldr	r3, [r4, #64]	; 0x40
   16780:	ldr	r1, [r4, #32]
   16784:	mov	r5, #0
   16788:	add	r2, r2, r0
   1678c:	sub	r0, r3, r0
   16790:	str	r2, [r4, #16]
   16794:	movw	r2, #65532	; 0xfffc
   16798:	cmp	r0, r2
   1679c:	movcs	r0, r2
   167a0:	str	r0, [r4, #24]
   167a4:	str	r2, [r1, #4]
   167a8:	mov	r0, r5
   167ac:	sub	sp, fp, #16
   167b0:	pop	{r4, r5, r6, r7, fp, pc}
   167b4:	movw	r0, #63313	; 0xf751
   167b8:	movw	r1, #58795	; 0xe5ab
   167bc:	movw	r3, #62859	; 0xf58b
   167c0:	mov	r2, #308	; 0x134
   167c4:	movt	r0, #1
   167c8:	movt	r1, #1
   167cc:	movt	r3, #1
   167d0:	bl	129c0 <__assert_fail@plt>

000167d4 <flatcc_builder_create_vtable@@Base>:
   167d4:	push	{r4, r5, fp, lr}
   167d8:	add	fp, sp, #8
   167dc:	sub	sp, sp, #80	; 0x50
   167e0:	mov	r3, r2
   167e4:	mov	r2, #0
   167e8:	mov	r4, r0
   167ec:	cmp	r3, #0
   167f0:	str	r2, [sp, #12]
   167f4:	str	r2, [sp, #8]
   167f8:	movne	r2, #1
   167fc:	strne	r3, [sp, #20]
   16800:	strne	r1, [sp, #16]
   16804:	strne	r3, [sp, #8]
   16808:	strne	r2, [sp, #12]
   1680c:	ldr	r0, [r4, #152]	; 0x98
   16810:	cmp	r0, #0
   16814:	bne	16824 <flatcc_builder_create_vtable@@Base+0x50>
   16818:	ldr	r0, [r4, #180]	; 0xb4
   1681c:	cmp	r0, #0
   16820:	beq	16880 <flatcc_builder_create_vtable@@Base+0xac>
   16824:	cmp	r3, #0
   16828:	beq	168c4 <flatcc_builder_create_vtable@@Base+0xf0>
   1682c:	ldr	r0, [r4, #136]	; 0x88
   16830:	ldr	ip, [r4, #44]	; 0x2c
   16834:	add	r1, sp, #8
   16838:	add	r1, r1, #8
   1683c:	sub	r5, r0, r3
   16840:	ldr	r0, [r4, #36]	; 0x24
   16844:	str	r3, [sp]
   16848:	mov	r3, r5
   1684c:	blx	ip
   16850:	cmp	r0, #0
   16854:	bne	168e4 <flatcc_builder_create_vtable@@Base+0x110>
   16858:	cmp	r5, #0
   1685c:	str	r5, [r4, #136]	; 0x88
   16860:	beq	16874 <flatcc_builder_create_vtable@@Base+0xa0>
   16864:	add	r1, r5, #1
   16868:	mov	r0, r1
   1686c:	sub	sp, fp, #8
   16870:	pop	{r4, r5, fp, pc}
   16874:	mov	r0, #0
   16878:	sub	sp, fp, #8
   1687c:	pop	{r4, r5, fp, pc}
   16880:	ldr	r5, [r4, #140]	; 0x8c
   16884:	ldr	r0, [r4, #36]	; 0x24
   16888:	ldr	ip, [r4, #44]	; 0x2c
   1688c:	add	r1, r5, r3
   16890:	str	r1, [r4, #140]	; 0x8c
   16894:	add	r1, sp, #8
   16898:	str	r3, [sp]
   1689c:	mov	r3, r5
   168a0:	add	r1, r1, #8
   168a4:	blx	ip
   168a8:	cmp	r0, #0
   168ac:	bne	16904 <flatcc_builder_create_vtable@@Base+0x130>
   168b0:	adds	r1, r5, #1
   168b4:	mov	r0, #0
   168b8:	movcc	r0, r1
   168bc:	sub	sp, fp, #8
   168c0:	pop	{r4, r5, fp, pc}
   168c4:	movw	r0, #63313	; 0xf751
   168c8:	movw	r1, #58795	; 0xe5ab
   168cc:	movw	r3, #62992	; 0xf610
   168d0:	movw	r2, #647	; 0x287
   168d4:	movt	r0, #1
   168d8:	movt	r1, #1
   168dc:	movt	r3, #1
   168e0:	bl	129c0 <__assert_fail@plt>
   168e4:	movw	r0, #63313	; 0xf751
   168e8:	movw	r1, #58795	; 0xe5ab
   168ec:	movw	r3, #62992	; 0xf610
   168f0:	movw	r2, #651	; 0x28b
   168f4:	movt	r0, #1
   168f8:	movt	r1, #1
   168fc:	movt	r3, #1
   16900:	bl	129c0 <__assert_fail@plt>
   16904:	movw	r0, #63313	; 0xf751
   16908:	movw	r1, #58795	; 0xe5ab
   1690c:	movw	r3, #63180	; 0xf6cc
   16910:	movw	r2, #677	; 0x2a5
   16914:	movt	r0, #1
   16918:	movt	r1, #1
   1691c:	movt	r3, #1
   16920:	bl	129c0 <__assert_fail@plt>

00016924 <flatcc_builder_create_cached_vtable@@Base>:
   16924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16928:	add	fp, sp, #28
   1692c:	sub	sp, sp, #20
   16930:	mov	sl, r0
   16934:	ldr	r0, [r0, #116]	; 0x74
   16938:	mov	r8, r3
   1693c:	mov	r5, r2
   16940:	str	r1, [sp, #16]
   16944:	cmp	r0, #0
   16948:	beq	169ec <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1694c:	ldr	r1, [sl, #92]	; 0x5c
   16950:	rsb	r0, r0, #32
   16954:	lsr	r0, r8, r0
   16958:	add	r6, r1, r0, lsl #2
   1695c:	cmp	r6, #0
   16960:	beq	16ab0 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   16964:	ldr	r7, [r6]
   16968:	str	r6, [sp, #12]
   1696c:	cmp	r7, #0
   16970:	beq	16ac0 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   16974:	ldr	r4, [sl, #68]	; 0x44
   16978:	ldr	r8, [sl, #100]	; 0x64
   1697c:	mov	r0, #0
   16980:	str	r0, [sp, #8]
   16984:	b	16998 <flatcc_builder_create_cached_vtable@@Base+0x74>
   16988:	ldr	r7, [r9, #12]!
   1698c:	mov	r6, r9
   16990:	cmp	r7, #0
   16994:	beq	16aa8 <flatcc_builder_create_cached_vtable@@Base+0x184>
   16998:	add	r9, r8, r7
   1699c:	mov	r1, r4
   169a0:	ldr	r0, [r9, #8]
   169a4:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   169a8:	cmp	r0, r5
   169ac:	bne	16988 <flatcc_builder_create_cached_vtable@@Base+0x64>
   169b0:	ldr	r0, [sp, #16]
   169b4:	mov	r2, r5
   169b8:	bl	12960 <bcmp@plt>
   169bc:	cmp	r0, #0
   169c0:	bne	16988 <flatcc_builder_create_cached_vtable@@Base+0x64>
   169c4:	ldr	r0, [sl, #152]	; 0x98
   169c8:	ldr	r1, [r9, #4]
   169cc:	cmp	r1, r0
   169d0:	beq	16c2c <flatcc_builder_create_cached_vtable@@Base+0x308>
   169d4:	mov	r6, r9
   169d8:	mov	r0, r9
   169dc:	ldr	r7, [r6, #12]!
   169e0:	cmp	r7, #0
   169e4:	bne	16980 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   169e8:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   169ec:	ldr	r0, [sl, #124]	; 0x7c
   169f0:	cmp	r0, #0
   169f4:	bne	16c80 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   169f8:	ldr	r0, [sl, #104]	; 0x68
   169fc:	add	r7, sl, #100	; 0x64
   16a00:	cmp	r0, #15
   16a04:	bhi	16a30 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   16a08:	ldr	r0, [sl, #40]	; 0x28
   16a0c:	ldr	r6, [sl, #48]	; 0x30
   16a10:	mov	r1, #6
   16a14:	mov	r2, #16
   16a18:	mov	r3, #0
   16a1c:	str	r1, [sp]
   16a20:	mov	r1, r7
   16a24:	blx	r6
   16a28:	cmp	r0, #0
   16a2c:	bne	16c60 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16a30:	ldr	r0, [r7]
   16a34:	mov	r7, #0
   16a38:	cmp	r0, #0
   16a3c:	beq	16b64 <flatcc_builder_create_cached_vtable@@Base+0x240>
   16a40:	mov	r0, #16
   16a44:	mov	r2, #5
   16a48:	add	r1, sl, #92	; 0x5c
   16a4c:	mov	r3, #1
   16a50:	mov	r4, #256	; 0x100
   16a54:	str	r0, [sl, #124]	; 0x7c
   16a58:	ldr	r0, [sl, #40]	; 0x28
   16a5c:	ldr	r6, [sl, #48]	; 0x30
   16a60:	str	r2, [sp]
   16a64:	mov	r2, #256	; 0x100
   16a68:	blx	r6
   16a6c:	cmp	r0, #0
   16a70:	bne	16b64 <flatcc_builder_create_cached_vtable@@Base+0x240>
   16a74:	ldr	r0, [sl, #96]	; 0x60
   16a78:	mov	r1, r4
   16a7c:	lsl	r4, r4, #1
   16a80:	cmp	r0, r1, lsl #1
   16a84:	bcs	16a78 <flatcc_builder_create_cached_vtable@@Base+0x154>
   16a88:	lsr	r1, r1, #2
   16a8c:	mvn	r0, #0
   16a90:	mov	r2, #1
   16a94:	add	r0, r0, #1
   16a98:	cmp	r1, r2, lsl r0
   16a9c:	bhi	16a94 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16aa0:	str	r0, [sl, #116]	; 0x74
   16aa4:	b	1694c <flatcc_builder_create_cached_vtable@@Base+0x28>
   16aa8:	ldr	r9, [sp, #8]
   16aac:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16ab0:	mov	r7, #0
   16ab4:	mov	r0, r7
   16ab8:	sub	sp, fp, #28
   16abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ac0:	mov	r9, #0
   16ac4:	ldr	r4, [sl, #124]	; 0x7c
   16ac8:	ldr	r0, [sl, #104]	; 0x68
   16acc:	add	r7, sl, #100	; 0x64
   16ad0:	add	r2, r4, #16
   16ad4:	cmp	r2, r0
   16ad8:	bls	16b00 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   16adc:	ldr	r0, [sl, #40]	; 0x28
   16ae0:	ldr	r6, [sl, #48]	; 0x30
   16ae4:	mov	r1, #6
   16ae8:	mov	r3, #0
   16aec:	str	r1, [sp]
   16af0:	mov	r1, r7
   16af4:	blx	r6
   16af8:	cmp	r0, #0
   16afc:	bne	16c60 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16b00:	ldr	r0, [r7]
   16b04:	mov	r7, #0
   16b08:	adds	r4, r0, r4
   16b0c:	beq	16b64 <flatcc_builder_create_cached_vtable@@Base+0x240>
   16b10:	ldr	r0, [sl, #124]	; 0x7c
   16b14:	ldr	r1, [sl, #152]	; 0x98
   16b18:	add	r2, r0, #16
   16b1c:	str	r2, [sl, #124]	; 0x7c
   16b20:	ldr	r2, [sp, #12]
   16b24:	str	r1, [r4, #4]
   16b28:	ldr	r1, [r2]
   16b2c:	str	r1, [r4, #12]
   16b30:	ldr	r1, [sp, #16]
   16b34:	str	r0, [r2]
   16b38:	mov	r0, sl
   16b3c:	mov	r2, r5
   16b40:	bl	167d4 <flatcc_builder_create_vtable@@Base>
   16b44:	cmp	r0, #0
   16b48:	str	r0, [r4]
   16b4c:	beq	16b64 <flatcc_builder_create_cached_vtable@@Base+0x240>
   16b50:	cmp	r9, #0
   16b54:	beq	16b70 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   16b58:	ldr	r0, [r9, #8]
   16b5c:	str	r0, [r4, #8]
   16b60:	ldr	r7, [r4]
   16b64:	mov	r0, r7
   16b68:	sub	sp, fp, #28
   16b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b70:	ldr	r6, [sl, #120]	; 0x78
   16b74:	ldr	r0, [sl, #172]	; 0xac
   16b78:	add	r2, r6, r5
   16b7c:	cmp	r0, #0
   16b80:	beq	16bbc <flatcc_builder_create_cached_vtable@@Base+0x298>
   16b84:	cmp	r0, r2
   16b88:	bcs	16bbc <flatcc_builder_create_cached_vtable@@Base+0x298>
   16b8c:	ldr	r0, [sl, #116]	; 0x74
   16b90:	cmp	r0, #0
   16b94:	beq	16b60 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16b98:	ldr	r0, [sl, #92]	; 0x5c
   16b9c:	ldr	r2, [sl, #96]	; 0x60
   16ba0:	mov	r1, #0
   16ba4:	mov	r5, #0
   16ba8:	bl	12990 <memset@plt>
   16bac:	mov	r0, #16
   16bb0:	str	r5, [sl, #120]	; 0x78
   16bb4:	str	r0, [sl, #124]	; 0x7c
   16bb8:	b	16b60 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16bbc:	ldr	r0, [sl, #72]	; 0x48
   16bc0:	add	r7, sl, #68	; 0x44
   16bc4:	cmp	r2, r0
   16bc8:	bls	16bf0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16bcc:	ldr	r0, [sl, #40]	; 0x28
   16bd0:	ldr	ip, [sl, #48]	; 0x30
   16bd4:	mov	r1, #2
   16bd8:	mov	r3, #0
   16bdc:	str	r1, [sp]
   16be0:	mov	r1, r7
   16be4:	blx	ip
   16be8:	cmp	r0, #0
   16bec:	bne	16c60 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16bf0:	ldr	r0, [r7]
   16bf4:	adds	r0, r0, r6
   16bf8:	beq	16c1c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   16bfc:	ldr	r1, [sl, #120]	; 0x78
   16c00:	mov	r2, r5
   16c04:	str	r1, [r4, #8]
   16c08:	add	r1, r1, r5
   16c0c:	str	r1, [sl, #120]	; 0x78
   16c10:	ldr	r1, [sp, #16]
   16c14:	bl	12900 <memcpy@plt>
   16c18:	b	16b60 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16c1c:	mvn	r7, #0
   16c20:	mov	r0, r7
   16c24:	sub	sp, fp, #28
   16c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c2c:	ldr	r0, [sp, #12]
   16c30:	cmp	r6, r0
   16c34:	beq	16c50 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16c38:	mov	r1, r0
   16c3c:	ldr	r0, [r9, #12]
   16c40:	str	r0, [r6]
   16c44:	ldr	r0, [r1]
   16c48:	str	r0, [r9, #12]
   16c4c:	str	r7, [r1]
   16c50:	ldr	r7, [r9]
   16c54:	mov	r0, r7
   16c58:	sub	sp, fp, #28
   16c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c60:	movw	r0, #63313	; 0xf751
   16c64:	movw	r1, #58795	; 0xe5ab
   16c68:	movw	r3, #62859	; 0xf58b
   16c6c:	mov	r2, #308	; 0x134
   16c70:	movt	r0, #1
   16c74:	movt	r1, #1
   16c78:	movt	r3, #1
   16c7c:	bl	129c0 <__assert_fail@plt>
   16c80:	movw	r0, #63253	; 0xf715
   16c84:	movw	r1, #58795	; 0xe5ab
   16c88:	movw	r3, #63268	; 0xf724
   16c8c:	movw	r2, #342	; 0x156
   16c90:	movt	r0, #1
   16c94:	movt	r1, #1
   16c98:	movt	r3, #1
   16c9c:	bl	129c0 <__assert_fail@plt>

00016ca0 <flatcc_builder_create_table@@Base>:
   16ca0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ca4:	add	fp, sp, #24
   16ca8:	sub	sp, sp, #80	; 0x50
   16cac:	ldr	r5, [fp, #12]
   16cb0:	cmn	r5, #1
   16cb4:	ble	16e00 <flatcc_builder_create_table@@Base+0x160>
   16cb8:	ldr	ip, [fp, #16]
   16cbc:	tst	ip, #1
   16cc0:	beq	16e20 <flatcc_builder_create_table@@Base+0x180>
   16cc4:	mov	r8, r0
   16cc8:	ldrh	r0, [r0, #128]	; 0x80
   16ccc:	cmp	r3, #4
   16cd0:	movls	r3, #4
   16cd4:	cmp	r0, r3
   16cd8:	strhcc	r3, [r8, #128]	; 0x80
   16cdc:	cmp	r5, #1
   16ce0:	ldr	r0, [r8, #136]	; 0x88
   16ce4:	sub	r4, r0, r2
   16ce8:	sub	r0, r3, #1
   16cec:	and	r0, r4, r0
   16cf0:	sub	r4, r4, #4
   16cf4:	add	r3, ip, r0
   16cf8:	sub	r3, r4, r3
   16cfc:	add	r3, r3, #1
   16d00:	str	r3, [fp, #-28]	; 0xffffffe4
   16d04:	blt	16d34 <flatcc_builder_create_table@@Base+0x94>
   16d08:	ldr	r3, [fp, #8]
   16d0c:	sub	ip, r4, r0
   16d10:	mvn	r4, #3
   16d14:	sub	r4, r4, ip
   16d18:	ldrh	r6, [r3], #2
   16d1c:	subs	r5, r5, #1
   16d20:	ldr	r7, [r6, r1]
   16d24:	add	r7, r4, r7
   16d28:	sub	r7, r7, r6
   16d2c:	str	r7, [r6, r1]
   16d30:	bne	16d18 <flatcc_builder_create_table@@Base+0x78>
   16d34:	mov	r4, #4
   16d38:	sub	r3, fp, #28
   16d3c:	cmp	r2, #0
   16d40:	str	r4, [sp, #16]
   16d44:	str	r3, [sp, #12]
   16d48:	mov	r3, #1
   16d4c:	str	r4, [sp, #4]
   16d50:	addne	r4, r2, #4
   16d54:	str	r3, [sp, #8]
   16d58:	movne	r3, #2
   16d5c:	strne	r2, [sp, #24]
   16d60:	strne	r1, [sp, #20]
   16d64:	strne	r3, [sp, #8]
   16d68:	strne	r4, [sp, #4]
   16d6c:	cmp	r0, #0
   16d70:	beq	16d9c <flatcc_builder_create_table@@Base+0xfc>
   16d74:	add	r1, sp, #4
   16d78:	movw	r2, #58265	; 0xe399
   16d7c:	add	r4, r4, r0
   16d80:	add	r1, r1, r3, lsl #3
   16d84:	movt	r2, #1
   16d88:	add	r3, r3, #1
   16d8c:	str	r4, [sp, #4]
   16d90:	str	r2, [r1, #8]
   16d94:	str	r0, [r1, #12]
   16d98:	str	r3, [sp, #8]
   16d9c:	cmp	r4, #0
   16da0:	ble	16e40 <flatcc_builder_create_table@@Base+0x1a0>
   16da4:	ldr	r0, [r8, #136]	; 0x88
   16da8:	ldr	r7, [r8, #44]	; 0x2c
   16dac:	add	r1, sp, #4
   16db0:	mov	r2, r3
   16db4:	add	r1, r1, #8
   16db8:	sub	r5, r0, r4
   16dbc:	ldr	r0, [r8, #36]	; 0x24
   16dc0:	str	r4, [sp]
   16dc4:	mov	r3, r5
   16dc8:	blx	r7
   16dcc:	cmp	r0, #0
   16dd0:	streq	r5, [r8, #136]	; 0x88
   16dd4:	moveq	r0, r5
   16dd8:	subeq	sp, fp, #24
   16ddc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16de0:	movw	r0, #63313	; 0xf751
   16de4:	movw	r1, #58795	; 0xe5ab
   16de8:	movw	r3, #62992	; 0xf610
   16dec:	movw	r2, #651	; 0x28b
   16df0:	movt	r0, #1
   16df4:	movt	r1, #1
   16df8:	movt	r3, #1
   16dfc:	bl	129c0 <__assert_fail@plt>
   16e00:	movw	r0, #60679	; 0xed07
   16e04:	movw	r1, #58795	; 0xe5ab
   16e08:	movw	r3, #60697	; 0xed19
   16e0c:	movw	r2, #1237	; 0x4d5
   16e10:	movt	r0, #1
   16e14:	movt	r1, #1
   16e18:	movt	r3, #1
   16e1c:	bl	129c0 <__assert_fail@plt>
   16e20:	movw	r0, #60853	; 0xedb5
   16e24:	movw	r1, #58795	; 0xe5ab
   16e28:	movw	r3, #60697	; 0xed19
   16e2c:	movw	r2, #1243	; 0x4db
   16e30:	movt	r0, #1
   16e34:	movt	r1, #1
   16e38:	movt	r3, #1
   16e3c:	bl	129c0 <__assert_fail@plt>
   16e40:	movw	r0, #63313	; 0xf751
   16e44:	movw	r1, #58795	; 0xe5ab
   16e48:	movw	r3, #62992	; 0xf610
   16e4c:	movw	r2, #647	; 0x287
   16e50:	movt	r0, #1
   16e54:	movt	r1, #1
   16e58:	movt	r3, #1
   16e5c:	bl	129c0 <__assert_fail@plt>

00016e60 <flatcc_builder_check_required_field@@Base>:
   16e60:	push	{fp, lr}
   16e64:	mov	fp, sp
   16e68:	ldr	r2, [r0, #32]
   16e6c:	ldrh	r2, [r2, #14]
   16e70:	cmp	r2, #3
   16e74:	bne	16ea4 <flatcc_builder_check_required_field@@Base+0x44>
   16e78:	ldrh	r3, [r0, #8]
   16e7c:	mov	r2, #0
   16e80:	cmp	r3, r1
   16e84:	bls	16e9c <flatcc_builder_check_required_field@@Base+0x3c>
   16e88:	ldr	r0, [r0, #4]
   16e8c:	add	r0, r0, r1, lsl #1
   16e90:	ldrh	r2, [r0]
   16e94:	cmp	r2, #0
   16e98:	movwne	r2, #1
   16e9c:	mov	r0, r2
   16ea0:	pop	{fp, pc}
   16ea4:	movw	r0, #60864	; 0xedc0
   16ea8:	movw	r1, #58795	; 0xe5ab
   16eac:	movw	r3, #60907	; 0xedeb
   16eb0:	movw	r2, #1272	; 0x4f8
   16eb4:	movt	r0, #1
   16eb8:	movt	r1, #1
   16ebc:	movt	r3, #1
   16ec0:	bl	129c0 <__assert_fail@plt>

00016ec4 <flatcc_builder_check_union_field@@Base>:
   16ec4:	push	{fp, lr}
   16ec8:	mov	fp, sp
   16ecc:	mov	r2, r0
   16ed0:	ldr	r0, [r0, #32]
   16ed4:	ldrh	r0, [r0, #14]
   16ed8:	cmp	r0, #3
   16edc:	bne	16f3c <flatcc_builder_check_union_field@@Base+0x78>
   16ee0:	mov	r0, #0
   16ee4:	cmp	r1, #0
   16ee8:	beq	16f28 <flatcc_builder_check_union_field@@Base+0x64>
   16eec:	ldrh	r3, [r2, #8]
   16ef0:	cmp	r3, r1
   16ef4:	popls	{fp, pc}
   16ef8:	ldr	r0, [r2, #4]
   16efc:	add	r0, r0, r1, lsl #1
   16f00:	ldrh	r1, [r0, #-2]
   16f04:	cmp	r1, #0
   16f08:	beq	16f2c <flatcc_builder_check_union_field@@Base+0x68>
   16f0c:	ldr	r2, [r2, #16]
   16f10:	ldrh	r0, [r0]
   16f14:	ldrb	r1, [r2, r1]
   16f18:	cmp	r1, #0
   16f1c:	beq	16f30 <flatcc_builder_check_union_field@@Base+0x6c>
   16f20:	cmp	r0, #0
   16f24:	movwne	r0, #1
   16f28:	pop	{fp, pc}
   16f2c:	ldrh	r0, [r0]
   16f30:	clz	r0, r0
   16f34:	lsr	r0, r0, #5
   16f38:	pop	{fp, pc}
   16f3c:	movw	r0, #60864	; 0xedc0
   16f40:	movw	r1, #58795	; 0xe5ab
   16f44:	movw	r3, #60990	; 0xee3e
   16f48:	movw	r2, #1279	; 0x4ff
   16f4c:	movt	r0, #1
   16f50:	movt	r1, #1
   16f54:	movt	r3, #1
   16f58:	bl	129c0 <__assert_fail@plt>

00016f5c <flatcc_builder_check_required@@Base>:
   16f5c:	push	{fp, lr}
   16f60:	mov	fp, sp
   16f64:	mov	r3, r0
   16f68:	ldr	r0, [r0, #32]
   16f6c:	ldrh	r0, [r0, #14]
   16f70:	cmp	r0, #3
   16f74:	bne	16fbc <flatcc_builder_check_required@@Base+0x60>
   16f78:	ldrh	ip, [r3, #8]
   16f7c:	mov	r0, #0
   16f80:	cmp	ip, r2
   16f84:	poplt	{fp, pc}
   16f88:	cmp	r2, #1
   16f8c:	blt	16fb4 <flatcc_builder_check_required@@Base+0x58>
   16f90:	ldr	ip, [r3, #4]
   16f94:	ldrh	r3, [r1]
   16f98:	add	r3, ip, r3, lsl #1
   16f9c:	ldrh	r3, [r3]
   16fa0:	cmp	r3, #0
   16fa4:	beq	16fb8 <flatcc_builder_check_required@@Base+0x5c>
   16fa8:	add	r1, r1, #2
   16fac:	subs	r2, r2, #1
   16fb0:	bne	16f94 <flatcc_builder_check_required@@Base+0x38>
   16fb4:	mov	r0, #1
   16fb8:	pop	{fp, pc}
   16fbc:	movw	r0, #60864	; 0xedc0
   16fc0:	movw	r1, #58795	; 0xe5ab
   16fc4:	movw	r3, #61070	; 0xee8e
   16fc8:	movw	r2, #1297	; 0x511
   16fcc:	movt	r0, #1
   16fd0:	movt	r1, #1
   16fd4:	movt	r3, #1
   16fd8:	bl	129c0 <__assert_fail@plt>

00016fdc <flatcc_builder_end_table@@Base>:
   16fdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fe0:	add	fp, sp, #24
   16fe4:	sub	sp, sp, #16
   16fe8:	mov	r4, r0
   16fec:	ldr	r0, [r0, #32]
   16ff0:	ldrh	r0, [r0, #14]
   16ff4:	cmp	r0, #3
   16ff8:	bne	1717c <flatcc_builder_end_table@@Base+0x1a0>
   16ffc:	ldrh	r0, [r4, #8]
   17000:	ldr	r5, [r4, #4]
   17004:	mov	r1, #4
   17008:	movw	r2, #31153	; 0x79b1
   1700c:	movt	r2, #40503	; 0x9e37
   17010:	add	r0, r1, r0, lsl #1
   17014:	strh	r0, [r5, #-4]!
   17018:	ldrh	r1, [r4, #20]
   1701c:	uxth	r6, r0
   17020:	add	r1, r1, #4
   17024:	strh	r1, [r5, #2]
   17028:	uxth	r1, r1
   1702c:	ldr	r0, [r4, #12]
   17030:	eor	r0, r0, r6
   17034:	mul	r0, r0, r2
   17038:	eor	r0, r0, r1
   1703c:	mov	r1, r5
   17040:	mul	r3, r0, r2
   17044:	mov	r0, r4
   17048:	mov	r2, r6
   1704c:	str	r3, [r4, #12]
   17050:	bl	16924 <flatcc_builder_create_cached_vtable@@Base>
   17054:	cmp	r0, #0
   17058:	beq	1716c <flatcc_builder_end_table@@Base+0x190>
   1705c:	mov	r7, r0
   17060:	mov	r0, r5
   17064:	mov	r1, #0
   17068:	mov	r2, r6
   1706c:	mov	r8, #0
   17070:	bl	12990 <memset@plt>
   17074:	ldr	r5, [r4, #32]
   17078:	ldr	r0, [r4, #76]	; 0x4c
   1707c:	ldr	r6, [r4]
   17080:	ldrh	r3, [r4, #130]	; 0x82
   17084:	ldr	r1, [r4, #16]
   17088:	ldr	r2, [r4, #20]
   1708c:	ldr	r5, [r5, #20]
   17090:	add	r0, r0, r5
   17094:	sub	r6, r6, r0
   17098:	asr	r6, r6, #1
   1709c:	stm	sp, {r0, r6, r7}
   170a0:	mov	r0, r4
   170a4:	bl	16ca0 <flatcc_builder_create_table@@Base>
   170a8:	cmp	r0, #0
   170ac:	beq	17160 <flatcc_builder_end_table@@Base+0x184>
   170b0:	ldr	r1, [r4, #32]
   170b4:	mov	r5, r0
   170b8:	ldr	r0, [r4, #16]
   170bc:	ldr	r2, [r4, #20]
   170c0:	ldr	r3, [r4, #52]	; 0x34
   170c4:	ldr	r7, [r1, #24]
   170c8:	str	r7, [r4, #12]
   170cc:	ldrh	r7, [r1, #28]
   170d0:	strh	r7, [r4, #8]
   170d4:	ldr	r7, [r1, #16]
   170d8:	add	r3, r3, r7
   170dc:	str	r3, [r4, #4]
   170e0:	ldr	r3, [r4, #76]	; 0x4c
   170e4:	ldr	r1, [r1, #20]
   170e8:	add	r1, r3, r1
   170ec:	str	r1, [r4]
   170f0:	mov	r1, #0
   170f4:	bl	12990 <memset@plt>
   170f8:	ldr	r0, [r4, #32]
   170fc:	ldr	r1, [r4, #60]	; 0x3c
   17100:	ldr	r2, [r4, #64]	; 0x40
   17104:	mov	r8, r5
   17108:	ldr	r3, [r0, #8]
   1710c:	str	r3, [r4, #20]
   17110:	ldr	r3, [r0]
   17114:	str	r3, [r4, #28]
   17118:	add	r1, r1, r3
   1711c:	ldr	r7, [r0, #4]
   17120:	str	r1, [r4, #16]
   17124:	sub	r1, r2, r3
   17128:	cmp	r1, r7
   1712c:	movhi	r1, r7
   17130:	str	r1, [r4, #24]
   17134:	ldrh	r1, [r4, #130]	; 0x82
   17138:	ldrh	r2, [r4, #128]	; 0x80
   1713c:	cmp	r2, r1
   17140:	strhcc	r1, [r4, #128]	; 0x80
   17144:	ldrh	r1, [r0, #12]
   17148:	sub	r0, r0, #36	; 0x24
   1714c:	str	r0, [r4, #32]
   17150:	strh	r1, [r4, #130]	; 0x82
   17154:	ldr	r0, [r4, #156]	; 0x9c
   17158:	sub	r0, r0, #1
   1715c:	str	r0, [r4, #156]	; 0x9c
   17160:	mov	r0, r8
   17164:	sub	sp, fp, #24
   17168:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1716c:	mov	r8, #0
   17170:	mov	r0, r8
   17174:	sub	sp, fp, #24
   17178:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1717c:	movw	r0, #60864	; 0xedc0
   17180:	movw	r1, #58795	; 0xe5ab
   17184:	movw	r3, #61160	; 0xeee8
   17188:	movw	r2, #1317	; 0x525
   1718c:	movt	r0, #1
   17190:	movt	r1, #1
   17194:	movt	r3, #1
   17198:	bl	129c0 <__assert_fail@plt>

0001719c <flatcc_builder_create_vector@@Base>:
   1719c:	push	{r4, r5, r6, r7, fp, lr}
   171a0:	add	fp, sp, #16
   171a4:	sub	sp, sp, #80	; 0x50
   171a8:	mov	r7, r0
   171ac:	ldr	r0, [fp, #12]
   171b0:	cmp	r2, r0
   171b4:	bhi	172b0 <flatcc_builder_create_vector@@Base+0x114>
   171b8:	ldr	r0, [fp, #8]
   171bc:	mov	r4, r2
   171c0:	ldrh	r2, [r7, #128]	; 0x80
   171c4:	mov	r5, #4
   171c8:	cmp	r0, #4
   171cc:	movls	r0, r5
   171d0:	cmp	r2, r0
   171d4:	sub	r2, fp, #20
   171d8:	strhcc	r0, [r7, #128]	; 0x80
   171dc:	str	r4, [fp, #-20]	; 0xffffffec
   171e0:	sub	r0, r0, #1
   171e4:	ldr	ip, [r7, #136]	; 0x88
   171e8:	str	r5, [sp, #16]
   171ec:	str	r2, [sp, #12]
   171f0:	mov	r2, #1
   171f4:	str	r5, [sp, #4]
   171f8:	str	r2, [sp, #8]
   171fc:	mls	r6, r3, r4, ip
   17200:	mul	r3, r3, r4
   17204:	cmp	r3, #0
   17208:	and	r0, r6, r0
   1720c:	movne	r2, #2
   17210:	addne	r5, r3, #4
   17214:	strne	r3, [sp, #24]
   17218:	strne	r1, [sp, #20]
   1721c:	strne	r2, [sp, #8]
   17220:	strne	r5, [sp, #4]
   17224:	cmp	r0, #0
   17228:	beq	17254 <flatcc_builder_create_vector@@Base+0xb8>
   1722c:	add	r1, sp, #4
   17230:	movw	r3, #58265	; 0xe399
   17234:	add	r5, r5, r0
   17238:	add	r1, r1, r2, lsl #3
   1723c:	movt	r3, #1
   17240:	add	r2, r2, #1
   17244:	str	r5, [sp, #4]
   17248:	str	r3, [r1, #8]
   1724c:	str	r0, [r1, #12]
   17250:	str	r2, [sp, #8]
   17254:	cmp	r5, #0
   17258:	ble	172d0 <flatcc_builder_create_vector@@Base+0x134>
   1725c:	ldr	r0, [r7, #36]	; 0x24
   17260:	ldr	r6, [r7, #44]	; 0x2c
   17264:	add	r1, sp, #4
   17268:	sub	r4, ip, r5
   1726c:	str	r5, [sp]
   17270:	add	r1, r1, #8
   17274:	mov	r3, r4
   17278:	blx	r6
   1727c:	cmp	r0, #0
   17280:	streq	r4, [r7, #136]	; 0x88
   17284:	moveq	r0, r4
   17288:	subeq	sp, fp, #16
   1728c:	popeq	{r4, r5, r6, r7, fp, pc}
   17290:	movw	r0, #63313	; 0xf751
   17294:	movw	r1, #58795	; 0xe5ab
   17298:	movw	r3, #62992	; 0xf610
   1729c:	movw	r2, #651	; 0x28b
   172a0:	movt	r0, #1
   172a4:	movt	r1, #1
   172a8:	movt	r3, #1
   172ac:	bl	129c0 <__assert_fail@plt>
   172b0:	movw	r0, #61226	; 0xef2a
   172b4:	movw	r1, #58795	; 0xe5ab
   172b8:	movw	r3, #61245	; 0xef3d
   172bc:	movw	r2, #1365	; 0x555
   172c0:	movt	r0, #1
   172c4:	movt	r1, #1
   172c8:	movt	r3, #1
   172cc:	bl	129c0 <__assert_fail@plt>
   172d0:	movw	r0, #63313	; 0xf751
   172d4:	movw	r1, #58795	; 0xe5ab
   172d8:	movw	r3, #62992	; 0xf610
   172dc:	movw	r2, #647	; 0x287
   172e0:	movt	r0, #1
   172e4:	movt	r1, #1
   172e8:	movt	r3, #1
   172ec:	bl	129c0 <__assert_fail@plt>

000172f0 <flatcc_builder_end_vector@@Base>:
   172f0:	push	{r4, r5, fp, lr}
   172f4:	add	fp, sp, #8
   172f8:	sub	sp, sp, #8
   172fc:	mov	r4, r0
   17300:	ldr	r0, [r0, #32]
   17304:	ldrh	r1, [r0, #14]
   17308:	cmp	r1, #4
   1730c:	bne	173c0 <flatcc_builder_end_vector@@Base+0xd0>
   17310:	ldr	r3, [r0, #16]
   17314:	ldr	r2, [r0, #20]
   17318:	ldr	r0, [r0, #24]
   1731c:	ldr	r1, [r4, #16]
   17320:	ldrh	r5, [r4, #130]	; 0x82
   17324:	str	r0, [sp, #4]
   17328:	mov	r0, r4
   1732c:	str	r5, [sp]
   17330:	bl	1719c <flatcc_builder_create_vector@@Base>
   17334:	mov	r5, r0
   17338:	cmp	r0, #0
   1733c:	beq	173b4 <flatcc_builder_end_vector@@Base+0xc4>
   17340:	ldr	r0, [r4, #16]
   17344:	ldr	r2, [r4, #20]
   17348:	mov	r1, #0
   1734c:	bl	12990 <memset@plt>
   17350:	ldr	r0, [r4, #32]
   17354:	ldr	r1, [r4, #60]	; 0x3c
   17358:	ldr	ip, [r4, #64]	; 0x40
   1735c:	ldr	r3, [r0, #8]
   17360:	str	r3, [r4, #20]
   17364:	ldr	r3, [r0]
   17368:	str	r3, [r4, #28]
   1736c:	add	r1, r1, r3
   17370:	ldr	r2, [r0, #4]
   17374:	str	r1, [r4, #16]
   17378:	sub	r1, ip, r3
   1737c:	cmp	r1, r2
   17380:	movhi	r1, r2
   17384:	str	r1, [r4, #24]
   17388:	ldrh	r1, [r4, #130]	; 0x82
   1738c:	ldrh	r2, [r4, #128]	; 0x80
   17390:	cmp	r2, r1
   17394:	strhcc	r1, [r4, #128]	; 0x80
   17398:	ldrh	r1, [r0, #12]
   1739c:	sub	r0, r0, #36	; 0x24
   173a0:	str	r0, [r4, #32]
   173a4:	strh	r1, [r4, #130]	; 0x82
   173a8:	ldr	r0, [r4, #156]	; 0x9c
   173ac:	sub	r0, r0, #1
   173b0:	str	r0, [r4, #156]	; 0x9c
   173b4:	mov	r0, r5
   173b8:	sub	sp, fp, #8
   173bc:	pop	{r4, r5, fp, pc}
   173c0:	movw	r0, #59598	; 0xe8ce
   173c4:	movw	r1, #58795	; 0xe5ab
   173c8:	movw	r3, #61363	; 0xefb3
   173cc:	movw	r2, #1400	; 0x578
   173d0:	movt	r0, #1
   173d4:	movt	r1, #1
   173d8:	movt	r3, #1
   173dc:	bl	129c0 <__assert_fail@plt>

000173e0 <flatcc_builder_vector_count@@Base>:
   173e0:	ldr	r0, [r0, #32]
   173e4:	ldr	r0, [r0, #20]
   173e8:	bx	lr

000173ec <flatcc_builder_vector_edit@@Base>:
   173ec:	ldr	r0, [r0, #16]
   173f0:	bx	lr

000173f4 <flatcc_builder_create_offset_vector_direct@@Base>:
   173f4:	mov	r3, #0
   173f8:	b	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   173fc:	push	{r4, r5, r6, r7, fp, lr}
   17400:	add	fp, sp, #16
   17404:	sub	sp, sp, #80	; 0x50
   17408:	mov	r5, #0
   1740c:	cmn	r2, #-1073741823	; 0xc0000001
   17410:	bhi	17580 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   17414:	mov	r6, r0
   17418:	ldrh	r0, [r0, #128]	; 0x80
   1741c:	mov	r4, #4
   17420:	sub	r5, fp, #20
   17424:	mov	ip, #1
   17428:	cmp	r0, #3
   1742c:	movls	r0, #4
   17430:	strhls	r0, [r6, #128]	; 0x80
   17434:	str	r2, [fp, #-20]	; 0xffffffec
   17438:	mov	r0, #0
   1743c:	ldr	lr, [r6, #136]	; 0x88
   17440:	cmp	r0, r2, lsl #2
   17444:	str	r4, [sp, #16]
   17448:	str	r5, [sp, #12]
   1744c:	str	r4, [sp, #4]
   17450:	str	ip, [sp, #8]
   17454:	and	r5, lr, #3
   17458:	beq	17478 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1745c:	lsl	r0, r2, #2
   17460:	mov	ip, #2
   17464:	add	r4, r0, #4
   17468:	str	r0, [sp, #24]
   1746c:	str	r1, [sp, #20]
   17470:	str	ip, [sp, #8]
   17474:	str	r4, [sp, #4]
   17478:	cmp	r5, #0
   1747c:	beq	174a8 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   17480:	add	r0, sp, #4
   17484:	movw	r7, #58265	; 0xe399
   17488:	add	r4, r4, r5
   1748c:	add	r0, r0, ip, lsl #3
   17490:	movt	r7, #1
   17494:	add	ip, ip, #1
   17498:	str	r4, [sp, #4]
   1749c:	str	r7, [r0, #8]
   174a0:	str	r5, [r0, #12]
   174a4:	str	ip, [sp, #8]
   174a8:	cmp	r2, #0
   174ac:	beq	17544 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   174b0:	sub	r0, r4, lr
   174b4:	cmp	r3, #0
   174b8:	sub	r0, r0, #4
   174bc:	bne	17504 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
   174c0:	ldr	r3, [r1]
   174c4:	cmp	r3, #0
   174c8:	beq	1758c <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   174cc:	add	r3, r0, r3
   174d0:	sub	r0, r0, #4
   174d4:	subs	r2, r2, #1
   174d8:	str	r3, [r1], #4
   174dc:	bne	174c0 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   174e0:	b	17544 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   174e4:	ldrb	r7, [r3]
   174e8:	cmp	r7, #0
   174ec:	bne	175ac <flatcc_builder_create_offset_vector_direct@@Base+0x1b8>
   174f0:	sub	r0, r0, #4
   174f4:	add	r1, r1, #4
   174f8:	add	r3, r3, #1
   174fc:	subs	r2, r2, #1
   17500:	beq	17544 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   17504:	ldr	r5, [r1]
   17508:	cmp	r5, #0
   1750c:	beq	174e4 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   17510:	add	r7, r0, r5
   17514:	str	r7, [r1]
   17518:	ldrb	r7, [r3]
   1751c:	cmp	r7, #0
   17520:	bne	174f0 <flatcc_builder_create_offset_vector_direct@@Base+0xfc>
   17524:	movw	r0, #63301	; 0xf745
   17528:	movw	r1, #58795	; 0xe5ab
   1752c:	movw	r3, #63315	; 0xf753
   17530:	movw	r2, #1457	; 0x5b1
   17534:	movt	r0, #1
   17538:	movt	r1, #1
   1753c:	movt	r3, #1
   17540:	bl	129c0 <__assert_fail@plt>
   17544:	cmp	r4, #0
   17548:	ble	175cc <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   1754c:	ldr	r0, [r6, #136]	; 0x88
   17550:	ldr	r7, [r6, #44]	; 0x2c
   17554:	add	r1, sp, #4
   17558:	mov	r2, ip
   1755c:	add	r1, r1, #8
   17560:	sub	r5, r0, r4
   17564:	ldr	r0, [r6, #36]	; 0x24
   17568:	str	r4, [sp]
   1756c:	mov	r3, r5
   17570:	blx	r7
   17574:	cmp	r0, #0
   17578:	bne	175ec <flatcc_builder_create_offset_vector_direct@@Base+0x1f8>
   1757c:	str	r5, [r6, #136]	; 0x88
   17580:	mov	r0, r5
   17584:	sub	sp, fp, #16
   17588:	pop	{r4, r5, r6, r7, fp, pc}
   1758c:	movw	r0, #63313	; 0xf751
   17590:	movw	r1, #58795	; 0xe5ab
   17594:	movw	r3, #63315	; 0xf753
   17598:	movw	r2, #1463	; 0x5b7
   1759c:	movt	r0, #1
   175a0:	movt	r1, #1
   175a4:	movt	r3, #1
   175a8:	bl	129c0 <__assert_fail@plt>
   175ac:	movw	r0, #63446	; 0xf7d6
   175b0:	movw	r1, #58795	; 0xe5ab
   175b4:	movw	r3, #63315	; 0xf753
   175b8:	movw	r2, #1461	; 0x5b5
   175bc:	movt	r0, #1
   175c0:	movt	r1, #1
   175c4:	movt	r3, #1
   175c8:	bl	129c0 <__assert_fail@plt>
   175cc:	movw	r0, #63313	; 0xf751
   175d0:	movw	r1, #58795	; 0xe5ab
   175d4:	movw	r3, #62992	; 0xf610
   175d8:	movw	r2, #647	; 0x287
   175dc:	movt	r0, #1
   175e0:	movt	r1, #1
   175e4:	movt	r3, #1
   175e8:	bl	129c0 <__assert_fail@plt>
   175ec:	movw	r0, #63313	; 0xf751
   175f0:	movw	r1, #58795	; 0xe5ab
   175f4:	movw	r3, #62992	; 0xf610
   175f8:	movw	r2, #651	; 0x28b
   175fc:	movt	r0, #1
   17600:	movt	r1, #1
   17604:	movt	r3, #1
   17608:	bl	129c0 <__assert_fail@plt>

0001760c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1760c:	push	{r4, r5, fp, lr}
   17610:	add	fp, sp, #8
   17614:	mov	r4, r0
   17618:	ldr	r0, [r0, #32]
   1761c:	mov	r3, r1
   17620:	ldrh	r1, [r0, #14]
   17624:	cmp	r1, #5
   17628:	bne	176c4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   1762c:	ldr	r2, [r0, #20]
   17630:	ldr	r1, [r4, #16]
   17634:	mov	r0, r4
   17638:	bl	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1763c:	mov	r5, r0
   17640:	cmp	r0, #0
   17644:	beq	176bc <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   17648:	ldr	r0, [r4, #16]
   1764c:	ldr	r2, [r4, #20]
   17650:	mov	r1, #0
   17654:	bl	12990 <memset@plt>
   17658:	ldr	r0, [r4, #32]
   1765c:	ldr	r1, [r4, #60]	; 0x3c
   17660:	ldr	ip, [r4, #64]	; 0x40
   17664:	ldr	r3, [r0, #8]
   17668:	str	r3, [r4, #20]
   1766c:	ldr	r3, [r0]
   17670:	str	r3, [r4, #28]
   17674:	add	r1, r1, r3
   17678:	ldr	r2, [r0, #4]
   1767c:	str	r1, [r4, #16]
   17680:	sub	r1, ip, r3
   17684:	cmp	r1, r2
   17688:	movhi	r1, r2
   1768c:	str	r1, [r4, #24]
   17690:	ldrh	r1, [r4, #130]	; 0x82
   17694:	ldrh	r2, [r4, #128]	; 0x80
   17698:	cmp	r2, r1
   1769c:	strhcc	r1, [r4, #128]	; 0x80
   176a0:	ldrh	r1, [r0, #12]
   176a4:	sub	r0, r0, #36	; 0x24
   176a8:	str	r0, [r4, #32]
   176ac:	strh	r1, [r4, #130]	; 0x82
   176b0:	ldr	r0, [r4, #156]	; 0x9c
   176b4:	sub	r0, r0, #1
   176b8:	str	r0, [r4, #156]	; 0x9c
   176bc:	mov	r0, r5
   176c0:	pop	{r4, r5, fp, pc}
   176c4:	movw	r0, #59847	; 0xe9c7
   176c8:	movw	r1, #58795	; 0xe5ab
   176cc:	movw	r3, #61504	; 0xf040
   176d0:	movw	r2, #1493	; 0x5d5
   176d4:	movt	r0, #1
   176d8:	movt	r1, #1
   176dc:	movt	r3, #1
   176e0:	bl	129c0 <__assert_fail@plt>

000176e4 <flatcc_builder_offset_vector_edit@@Base>:
   176e4:	ldr	r0, [r0, #16]
   176e8:	bx	lr

000176ec <flatcc_builder_offset_vector_count@@Base>:
   176ec:	ldr	r0, [r0, #32]
   176f0:	ldr	r0, [r0, #20]
   176f4:	bx	lr

000176f8 <flatcc_builder_table_add_union@@Base>:
   176f8:	push	{r4, r5, r6, r7, fp, lr}
   176fc:	add	fp, sp, #16
   17700:	mov	r5, r0
   17704:	ldr	r0, [r0, #32]
   17708:	ldrh	r0, [r0, #14]
   1770c:	cmp	r0, #3
   17710:	bne	17798 <flatcc_builder_table_add_union@@Base+0xa0>
   17714:	mov	r7, r3
   17718:	mov	r4, r2
   1771c:	mov	r6, r1
   17720:	cmp	r3, #0
   17724:	beq	17734 <flatcc_builder_table_add_union@@Base+0x3c>
   17728:	uxtb	r0, r4
   1772c:	cmp	r0, #0
   17730:	beq	177b8 <flatcc_builder_table_add_union@@Base+0xc0>
   17734:	cmp	r7, #0
   17738:	beq	17754 <flatcc_builder_table_add_union@@Base+0x5c>
   1773c:	mov	r0, r5
   17740:	mov	r1, r6
   17744:	bl	177f8 <flatcc_builder_table_add_offset@@Base>
   17748:	cmp	r0, #0
   1774c:	beq	177d8 <flatcc_builder_table_add_union@@Base+0xe0>
   17750:	str	r7, [r0]
   17754:	sub	r1, r6, #1
   17758:	mov	r0, r5
   1775c:	mov	r2, #1
   17760:	mov	r3, #1
   17764:	bl	17988 <flatcc_builder_table_add@@Base>
   17768:	cmp	r0, #0
   1776c:	strbne	r4, [r0]
   17770:	movne	r0, #0
   17774:	popne	{r4, r5, r6, r7, fp, pc}
   17778:	movw	r0, #61750	; 0xf136
   1777c:	movw	r1, #58795	; 0xe5ab
   17780:	movw	r3, #61618	; 0xf0b2
   17784:	movw	r2, #1526	; 0x5f6
   17788:	movt	r0, #1
   1778c:	movt	r1, #1
   17790:	movt	r3, #1
   17794:	bl	129c0 <__assert_fail@plt>
   17798:	movw	r0, #60864	; 0xedc0
   1779c:	movw	r1, #58795	; 0xe5ab
   177a0:	movw	r3, #61618	; 0xf0b2
   177a4:	movw	r2, #1518	; 0x5ee
   177a8:	movt	r0, #1
   177ac:	movt	r1, #1
   177b0:	movt	r3, #1
   177b4:	bl	129c0 <__assert_fail@plt>
   177b8:	movw	r0, #61706	; 0xf10a
   177bc:	movw	r1, #58795	; 0xe5ab
   177c0:	movw	r3, #61618	; 0xf0b2
   177c4:	movw	r2, #1519	; 0x5ef
   177c8:	movt	r0, #1
   177cc:	movt	r1, #1
   177d0:	movt	r3, #1
   177d4:	bl	129c0 <__assert_fail@plt>
   177d8:	movw	r0, #61740	; 0xf12c
   177dc:	movw	r1, #58795	; 0xe5ab
   177e0:	movw	r3, #61618	; 0xf0b2
   177e4:	movw	r2, #1522	; 0x5f2
   177e8:	movt	r0, #1
   177ec:	movt	r1, #1
   177f0:	movt	r3, #1
   177f4:	bl	129c0 <__assert_fail@plt>

000177f8 <flatcc_builder_table_add_offset@@Base>:
   177f8:	push	{r4, r5, r6, r7, fp, lr}
   177fc:	add	fp, sp, #16
   17800:	sub	sp, sp, #8
   17804:	mov	r4, r0
   17808:	ldr	r0, [r0, #32]
   1780c:	ldrh	r0, [r0, #14]
   17810:	cmp	r0, #3
   17814:	bne	17928 <flatcc_builder_table_add_offset@@Base+0x130>
   17818:	movw	r0, #32765	; 0x7ffd
   1781c:	mov	r5, r1
   17820:	cmp	r1, r0
   17824:	bcs	17948 <flatcc_builder_table_add_offset@@Base+0x150>
   17828:	ldr	r0, [r4, #4]
   1782c:	add	r1, r0, r5, lsl #1
   17830:	ldrh	r1, [r1]
   17834:	cmp	r1, #0
   17838:	bne	17968 <flatcc_builder_table_add_offset@@Base+0x170>
   1783c:	ldr	r2, [r4, #20]
   17840:	ldr	r1, [r4, #12]
   17844:	ldr	r3, [r4, #24]
   17848:	add	r2, r2, #3
   1784c:	eor	r1, r1, r5
   17850:	bic	r6, r2, #3
   17854:	movw	r2, #31153	; 0x79b1
   17858:	movt	r2, #40503	; 0x9e37
   1785c:	add	r7, r6, #4
   17860:	cmp	r7, r3
   17864:	str	r7, [r4, #20]
   17868:	mul	r1, r1, r2
   1786c:	eor	r1, r1, #4
   17870:	mul	r1, r1, r2
   17874:	str	r1, [r4, #12]
   17878:	bls	178ec <flatcc_builder_table_add_offset@@Base+0xf4>
   1787c:	ldr	r1, [r4, #28]
   17880:	ldr	r0, [r4, #40]	; 0x28
   17884:	ldr	ip, [r4, #48]	; 0x30
   17888:	mov	r2, #1
   1788c:	mov	r3, #1
   17890:	str	r2, [sp]
   17894:	add	r2, r1, r7
   17898:	add	r1, r4, #60	; 0x3c
   1789c:	blx	ip
   178a0:	mov	r1, r0
   178a4:	mov	r0, #0
   178a8:	cmp	r1, #0
   178ac:	beq	178b8 <flatcc_builder_table_add_offset@@Base+0xc0>
   178b0:	sub	sp, fp, #16
   178b4:	pop	{r4, r5, r6, r7, fp, pc}
   178b8:	ldr	r0, [r4, #28]
   178bc:	ldr	r2, [r4, #60]	; 0x3c
   178c0:	ldr	r3, [r4, #64]	; 0x40
   178c4:	ldr	r1, [r4, #32]
   178c8:	add	r2, r2, r0
   178cc:	sub	r0, r3, r0
   178d0:	str	r2, [r4, #16]
   178d4:	movw	r2, #65532	; 0xfffc
   178d8:	cmp	r0, r2
   178dc:	movcs	r0, r2
   178e0:	str	r0, [r4, #24]
   178e4:	str	r2, [r1, #4]
   178e8:	ldr	r0, [r4, #4]
   178ec:	uxth	r1, r5
   178f0:	add	r0, r0, r1, lsl #1
   178f4:	strh	r7, [r0]
   178f8:	ldrh	r0, [r4, #8]
   178fc:	cmp	r0, r1
   17900:	addls	r0, r5, #1
   17904:	strhls	r0, [r4, #8]
   17908:	ldr	r0, [r4]
   1790c:	add	r1, r0, #2
   17910:	str	r1, [r4]
   17914:	strh	r6, [r0]
   17918:	ldr	r0, [r4, #16]
   1791c:	add	r0, r0, r6
   17920:	sub	sp, fp, #16
   17924:	pop	{r4, r5, r6, r7, fp, pc}
   17928:	movw	r0, #60864	; 0xedc0
   1792c:	movw	r1, #58795	; 0xe5ab
   17930:	movw	r3, #62644	; 0xf4b4
   17934:	movw	r2, #1811	; 0x713
   17938:	movt	r0, #1
   1793c:	movt	r1, #1
   17940:	movt	r3, #1
   17944:	bl	129c0 <__assert_fail@plt>
   17948:	movw	r0, #62516	; 0xf434
   1794c:	movw	r1, #58795	; 0xe5ab
   17950:	movw	r3, #62644	; 0xf4b4
   17954:	movw	r2, #1812	; 0x714
   17958:	movt	r0, #1
   1795c:	movt	r1, #1
   17960:	movt	r3, #1
   17964:	bl	129c0 <__assert_fail@plt>
   17968:	movw	r0, #63313	; 0xf751
   1796c:	movw	r1, #58795	; 0xe5ab
   17970:	movw	r3, #62644	; 0xf4b4
   17974:	movw	r2, #1819	; 0x71b
   17978:	movt	r0, #1
   1797c:	movt	r1, #1
   17980:	movt	r3, #1
   17984:	bl	129c0 <__assert_fail@plt>

00017988 <flatcc_builder_table_add@@Base>:
   17988:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1798c:	add	fp, sp, #24
   17990:	sub	sp, sp, #8
   17994:	mov	r4, r0
   17998:	ldr	r0, [r0, #32]
   1799c:	ldrh	r0, [r0, #14]
   179a0:	cmp	r0, #3
   179a4:	bne	17ac4 <flatcc_builder_table_add@@Base+0x13c>
   179a8:	movw	r0, #32765	; 0x7ffd
   179ac:	mov	r8, r1
   179b0:	cmp	r1, r0
   179b4:	bcs	17ae4 <flatcc_builder_table_add@@Base+0x15c>
   179b8:	ldrh	r0, [r4, #130]	; 0x82
   179bc:	cmp	r0, r3
   179c0:	strhcc	r3, [r4, #130]	; 0x82
   179c4:	ldr	r0, [r4, #4]
   179c8:	add	r1, r0, r8, lsl #1
   179cc:	ldrh	r1, [r1]
   179d0:	cmp	r1, #0
   179d4:	bne	17b04 <flatcc_builder_table_add@@Base+0x17c>
   179d8:	ldr	r1, [r4, #12]
   179dc:	movw	r7, #31153	; 0x79b1
   179e0:	ldr	r6, [r4, #20]
   179e4:	ldr	r5, [r4, #24]
   179e8:	movt	r7, #40503	; 0x9e37
   179ec:	eor	r1, r1, r8
   179f0:	mul	r1, r1, r7
   179f4:	eor	r1, r1, r2
   179f8:	mul	r1, r1, r7
   179fc:	str	r1, [r4, #12]
   17a00:	add	r1, r3, r6
   17a04:	rsb	r3, r3, #0
   17a08:	sub	r1, r1, #1
   17a0c:	and	r6, r1, r3
   17a10:	add	r1, r6, r2
   17a14:	cmp	r1, r5
   17a18:	str	r1, [r4, #20]
   17a1c:	bcc	17a94 <flatcc_builder_table_add@@Base+0x10c>
   17a20:	ldr	r2, [r4, #28]
   17a24:	ldr	r0, [r4, #40]	; 0x28
   17a28:	ldr	r7, [r4, #48]	; 0x30
   17a2c:	mov	r3, #1
   17a30:	str	r3, [sp]
   17a34:	mov	r3, #1
   17a38:	add	r1, r1, r2
   17a3c:	add	r2, r1, #1
   17a40:	add	r1, r4, #60	; 0x3c
   17a44:	blx	r7
   17a48:	mov	r1, r0
   17a4c:	mov	r0, #0
   17a50:	cmp	r1, #0
   17a54:	beq	17a60 <flatcc_builder_table_add@@Base+0xd8>
   17a58:	sub	sp, fp, #24
   17a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a60:	ldr	r0, [r4, #28]
   17a64:	ldr	r2, [r4, #60]	; 0x3c
   17a68:	ldr	r3, [r4, #64]	; 0x40
   17a6c:	ldr	r1, [r4, #32]
   17a70:	add	r2, r2, r0
   17a74:	sub	r0, r3, r0
   17a78:	str	r2, [r4, #16]
   17a7c:	movw	r2, #65532	; 0xfffc
   17a80:	cmp	r0, r2
   17a84:	movcs	r0, r2
   17a88:	str	r0, [r4, #24]
   17a8c:	str	r2, [r1, #4]
   17a90:	ldr	r0, [r4, #4]
   17a94:	uxth	r1, r8
   17a98:	add	r2, r6, #4
   17a9c:	add	r0, r0, r1, lsl #1
   17aa0:	strh	r2, [r0]
   17aa4:	ldrh	r0, [r4, #8]
   17aa8:	cmp	r0, r1
   17aac:	addls	r0, r8, #1
   17ab0:	strhls	r0, [r4, #8]
   17ab4:	ldr	r0, [r4, #16]
   17ab8:	add	r0, r0, r6
   17abc:	sub	sp, fp, #24
   17ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ac4:	movw	r0, #60864	; 0xedc0
   17ac8:	movw	r1, #58795	; 0xe5ab
   17acc:	movw	r3, #62442	; 0xf3ea
   17ad0:	movw	r2, #1773	; 0x6ed
   17ad4:	movt	r0, #1
   17ad8:	movt	r1, #1
   17adc:	movt	r3, #1
   17ae0:	bl	129c0 <__assert_fail@plt>
   17ae4:	movw	r0, #62516	; 0xf434
   17ae8:	movw	r1, #58795	; 0xe5ab
   17aec:	movw	r3, #62442	; 0xf3ea
   17af0:	movw	r2, #1774	; 0x6ee
   17af4:	movt	r0, #1
   17af8:	movt	r1, #1
   17afc:	movt	r3, #1
   17b00:	bl	129c0 <__assert_fail@plt>
   17b04:	movw	r0, #63313	; 0xf751
   17b08:	movw	r1, #58795	; 0xe5ab
   17b0c:	movw	r3, #62442	; 0xf3ea
   17b10:	movw	r2, #1784	; 0x6f8
   17b14:	movt	r0, #1
   17b18:	movt	r1, #1
   17b1c:	movt	r3, #1
   17b20:	bl	129c0 <__assert_fail@plt>

00017b24 <flatcc_builder_table_add_union_vector@@Base>:
   17b24:	push	{r4, r5, r6, r7, fp, lr}
   17b28:	add	fp, sp, #16
   17b2c:	mov	r6, r0
   17b30:	ldr	r0, [r0, #32]
   17b34:	ldrh	r0, [r0, #14]
   17b38:	cmp	r0, #3
   17b3c:	bne	17ba8 <flatcc_builder_table_add_union_vector@@Base+0x84>
   17b40:	mov	r5, r1
   17b44:	clz	r1, r3
   17b48:	cmp	r2, #0
   17b4c:	mov	r0, r2
   17b50:	mov	r4, r3
   17b54:	mov	r7, r2
   17b58:	movwne	r0, #1
   17b5c:	lsr	r1, r1, #5
   17b60:	teq	r1, r0
   17b64:	beq	17bc8 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   17b68:	cmp	r7, #0
   17b6c:	beq	17ba0 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   17b70:	sub	r1, r5, #1
   17b74:	mov	r0, r6
   17b78:	bl	177f8 <flatcc_builder_table_add_offset@@Base>
   17b7c:	cmp	r0, #0
   17b80:	beq	17be8 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   17b84:	str	r7, [r0]
   17b88:	mov	r0, r6
   17b8c:	mov	r1, r5
   17b90:	bl	177f8 <flatcc_builder_table_add_offset@@Base>
   17b94:	cmp	r0, #0
   17b98:	beq	17c08 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   17b9c:	str	r4, [r0]
   17ba0:	mov	r0, #0
   17ba4:	pop	{r4, r5, r6, r7, fp, pc}
   17ba8:	movw	r0, #60864	; 0xedc0
   17bac:	movw	r1, #58795	; 0xe5ab
   17bb0:	movw	r3, #61762	; 0xf142
   17bb4:	mov	r2, #1536	; 0x600
   17bb8:	movt	r0, #1
   17bbc:	movt	r1, #1
   17bc0:	movt	r3, #1
   17bc4:	bl	129c0 <__assert_fail@plt>
   17bc8:	movw	r0, #61861	; 0xf1a5
   17bcc:	movw	r1, #58795	; 0xe5ab
   17bd0:	movw	r3, #61762	; 0xf142
   17bd4:	movw	r2, #1537	; 0x601
   17bd8:	movt	r0, #1
   17bdc:	movt	r1, #1
   17be0:	movt	r3, #1
   17be4:	bl	129c0 <__assert_fail@plt>
   17be8:	movw	r0, #61740	; 0xf12c
   17bec:	movw	r1, #58795	; 0xe5ab
   17bf0:	movw	r3, #61762	; 0xf142
   17bf4:	movw	r2, #1540	; 0x604
   17bf8:	movt	r0, #1
   17bfc:	movt	r1, #1
   17c00:	movt	r3, #1
   17c04:	bl	129c0 <__assert_fail@plt>
   17c08:	movw	r0, #61740	; 0xf12c
   17c0c:	movw	r1, #58795	; 0xe5ab
   17c10:	movw	r3, #61762	; 0xf142
   17c14:	movw	r2, #1544	; 0x608
   17c18:	movt	r0, #1
   17c1c:	movt	r1, #1
   17c20:	movt	r3, #1
   17c24:	bl	129c0 <__assert_fail@plt>

00017c28 <flatcc_builder_create_union_vector@@Base>:
   17c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c2c:	add	fp, sp, #28
   17c30:	sub	sp, sp, #12
   17c34:	mov	r6, #0
   17c38:	mov	r4, r1
   17c3c:	mov	r8, r0
   17c40:	mov	sl, r3
   17c44:	mov	r9, r2
   17c48:	mov	r7, #4
   17c4c:	str	r6, [r0]
   17c50:	str	r6, [r0, #4]
   17c54:	mov	r0, r1
   17c58:	mov	r1, #4
   17c5c:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   17c60:	cmp	r0, #0
   17c64:	beq	17c70 <flatcc_builder_create_union_vector@@Base+0x48>
   17c68:	sub	sp, fp, #28
   17c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c70:	ldr	r0, [r4, #32]
   17c74:	mov	r1, #5
   17c78:	str	r7, [r0, #16]
   17c7c:	ldr	r0, [r4, #32]
   17c80:	str	r6, [r0, #20]
   17c84:	ldr	r0, [r4, #32]
   17c88:	strh	r1, [r0, #14]
   17c8c:	ldr	r1, [r4, #28]
   17c90:	ldr	r2, [r4, #60]	; 0x3c
   17c94:	ldr	r3, [r4, #64]	; 0x40
   17c98:	add	r2, r2, r1
   17c9c:	sub	r1, r3, r1
   17ca0:	str	r2, [r4, #16]
   17ca4:	mvn	r2, #3
   17ca8:	cmn	r1, #4
   17cac:	movcs	r1, r2
   17cb0:	str	r1, [r4, #24]
   17cb4:	str	r2, [r0, #4]
   17cb8:	ldr	r1, [r0, #20]
   17cbc:	adds	r1, r1, sl
   17cc0:	cmpcc	r1, #1073741824	; 0x40000000
   17cc4:	bcc	17ce8 <flatcc_builder_create_union_vector@@Base+0xc0>
   17cc8:	movw	r0, #63066	; 0xf65a
   17ccc:	movw	r1, #58795	; 0xe5ab
   17cd0:	movw	r3, #63093	; 0xf675
   17cd4:	mov	r2, #892	; 0x37c
   17cd8:	movt	r0, #1
   17cdc:	movt	r1, #1
   17ce0:	movt	r3, #1
   17ce4:	bl	129c0 <__assert_fail@plt>
   17ce8:	str	r1, [r0, #20]
   17cec:	ldr	r7, [r4, #20]
   17cf0:	ldr	r0, [r4, #24]
   17cf4:	add	r1, r7, sl, lsl #2
   17cf8:	cmp	r1, r0
   17cfc:	str	r1, [r4, #20]
   17d00:	bcs	17d14 <flatcc_builder_create_union_vector@@Base+0xec>
   17d04:	ldr	r1, [r4, #16]
   17d08:	adds	r2, r1, r7
   17d0c:	bne	17d7c <flatcc_builder_create_union_vector@@Base+0x154>
   17d10:	b	17c68 <flatcc_builder_create_union_vector@@Base+0x40>
   17d14:	ldr	r2, [r4, #28]
   17d18:	ldr	r0, [r4, #40]	; 0x28
   17d1c:	ldr	r6, [r4, #48]	; 0x30
   17d20:	mov	r3, #1
   17d24:	str	r3, [sp]
   17d28:	mov	r3, #1
   17d2c:	add	r1, r1, r2
   17d30:	add	r2, r1, #1
   17d34:	add	r1, r4, #60	; 0x3c
   17d38:	blx	r6
   17d3c:	cmp	r0, #0
   17d40:	bne	17c68 <flatcc_builder_create_union_vector@@Base+0x40>
   17d44:	ldr	r0, [r4, #28]
   17d48:	ldr	r1, [r4, #60]	; 0x3c
   17d4c:	ldr	r3, [r4, #64]	; 0x40
   17d50:	ldr	r2, [r4, #32]
   17d54:	add	r1, r1, r0
   17d58:	sub	r0, r3, r0
   17d5c:	mvn	r3, #3
   17d60:	cmn	r0, #4
   17d64:	str	r1, [r4, #16]
   17d68:	movcs	r0, r3
   17d6c:	str	r0, [r4, #24]
   17d70:	str	r3, [r2, #4]
   17d74:	adds	r2, r1, r7
   17d78:	beq	17c68 <flatcc_builder_create_union_vector@@Base+0x40>
   17d7c:	ldr	r7, [r4, #20]
   17d80:	add	r2, r7, sl
   17d84:	cmp	r2, r0
   17d88:	str	r2, [r4, #20]
   17d8c:	bcc	17df0 <flatcc_builder_create_union_vector@@Base+0x1c8>
   17d90:	ldr	r1, [r4, #28]
   17d94:	ldr	r0, [r4, #40]	; 0x28
   17d98:	ldr	r6, [r4, #48]	; 0x30
   17d9c:	mov	r3, #1
   17da0:	str	r3, [sp]
   17da4:	mov	r3, #1
   17da8:	add	r1, r2, r1
   17dac:	add	r2, r1, #1
   17db0:	add	r1, r4, #60	; 0x3c
   17db4:	blx	r6
   17db8:	cmp	r0, #0
   17dbc:	bne	17c68 <flatcc_builder_create_union_vector@@Base+0x40>
   17dc0:	ldr	r0, [r4, #28]
   17dc4:	ldr	r1, [r4, #60]	; 0x3c
   17dc8:	ldr	r3, [r4, #64]	; 0x40
   17dcc:	ldr	r2, [r4, #32]
   17dd0:	add	r1, r1, r0
   17dd4:	sub	r0, r3, r0
   17dd8:	mvn	r3, #3
   17ddc:	cmn	r0, #4
   17de0:	str	r1, [r4, #16]
   17de4:	movcs	r0, r3
   17de8:	str	r0, [r4, #24]
   17dec:	str	r3, [r2, #4]
   17df0:	adds	r5, r1, r7
   17df4:	beq	17c68 <flatcc_builder_create_union_vector@@Base+0x40>
   17df8:	cmp	sl, #0
   17dfc:	beq	17e84 <flatcc_builder_create_union_vector@@Base+0x25c>
   17e00:	and	ip, sl, #1
   17e04:	mov	r0, #0
   17e08:	cmp	sl, #1
   17e0c:	str	r5, [sp, #8]
   17e10:	beq	17e68 <flatcc_builder_create_union_vector@@Base+0x240>
   17e14:	ldr	r0, [sp, #8]
   17e18:	sub	lr, sl, ip
   17e1c:	add	r2, r1, #4
   17e20:	add	r6, r9, #8
   17e24:	add	r7, r0, #1
   17e28:	mov	r0, #0
   17e2c:	ldrb	r3, [r6, #-8]
   17e30:	add	r5, r7, r0
   17e34:	strb	r3, [r5, #-1]
   17e38:	add	r3, r9, r0, lsl #3
   17e3c:	ldr	r5, [r3, #4]
   17e40:	str	r5, [r2, #-4]
   17e44:	ldrb	r5, [r6]
   17e48:	add	r6, r6, #16
   17e4c:	strb	r5, [r7, r0]
   17e50:	add	r0, r0, #2
   17e54:	ldr	r3, [r3, #12]
   17e58:	cmp	lr, r0
   17e5c:	str	r3, [r2]
   17e60:	add	r2, r2, #8
   17e64:	bne	17e2c <flatcc_builder_create_union_vector@@Base+0x204>
   17e68:	ldr	r5, [sp, #8]
   17e6c:	cmp	ip, #0
   17e70:	beq	17e84 <flatcc_builder_create_union_vector@@Base+0x25c>
   17e74:	ldrb	r2, [r9, r0, lsl #3]!
   17e78:	strb	r2, [r5, r0]
   17e7c:	ldr	r2, [r9, #4]
   17e80:	str	r2, [r1, r0, lsl #2]
   17e84:	mov	r0, r4
   17e88:	mov	r2, sl
   17e8c:	mov	r3, r5
   17e90:	bl	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17e94:	mov	r7, r0
   17e98:	mov	r6, #0
   17e9c:	cmp	r0, #0
   17ea0:	beq	17ecc <flatcc_builder_create_union_vector@@Base+0x2a4>
   17ea4:	mvn	r0, #0
   17ea8:	mov	r1, #1
   17eac:	mov	r2, sl
   17eb0:	mov	r3, #1
   17eb4:	str	r1, [sp]
   17eb8:	str	r0, [sp, #4]
   17ebc:	mov	r0, r4
   17ec0:	mov	r1, r5
   17ec4:	bl	1719c <flatcc_builder_create_vector@@Base>
   17ec8:	b	17ed0 <flatcc_builder_create_union_vector@@Base+0x2a8>
   17ecc:	mov	r0, #0
   17ed0:	orr	r1, r6, r7
   17ed4:	stm	r8, {r0, r1}
   17ed8:	mov	r1, #0
   17edc:	ldr	r0, [r4, #16]
   17ee0:	ldr	r2, [r4, #20]
   17ee4:	bl	12990 <memset@plt>
   17ee8:	ldr	r0, [r4, #32]
   17eec:	ldr	r1, [r4, #60]	; 0x3c
   17ef0:	ldr	r2, [r4, #64]	; 0x40
   17ef4:	ldr	r3, [r0, #8]
   17ef8:	str	r3, [r4, #20]
   17efc:	ldr	r3, [r0]
   17f00:	str	r3, [r4, #28]
   17f04:	add	r1, r1, r3
   17f08:	ldr	r7, [r0, #4]
   17f0c:	str	r1, [r4, #16]
   17f10:	sub	r1, r2, r3
   17f14:	cmp	r1, r7
   17f18:	movhi	r1, r7
   17f1c:	str	r1, [r4, #24]
   17f20:	ldrh	r1, [r4, #130]	; 0x82
   17f24:	ldrh	r2, [r4, #128]	; 0x80
   17f28:	cmp	r2, r1
   17f2c:	strhcc	r1, [r4, #128]	; 0x80
   17f30:	ldrh	r1, [r0, #12]
   17f34:	sub	r0, r0, #36	; 0x24
   17f38:	str	r0, [r4, #32]
   17f3c:	strh	r1, [r4, #130]	; 0x82
   17f40:	ldr	r0, [r4, #156]	; 0x9c
   17f44:	sub	r0, r0, #1
   17f48:	str	r0, [r4, #156]	; 0x9c
   17f4c:	sub	sp, fp, #28
   17f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f54 <flatcc_builder_create_union_vector_direct@@Base>:
   17f54:	push	{r4, r5, r6, r7, fp, lr}
   17f58:	add	fp, sp, #16
   17f5c:	sub	sp, sp, #8
   17f60:	ldr	r7, [fp, #8]
   17f64:	mov	r5, r2
   17f68:	mov	r4, r0
   17f6c:	mov	r0, #0
   17f70:	mov	r6, r1
   17f74:	str	r0, [r4]
   17f78:	str	r0, [r4, #4]
   17f7c:	mov	r0, r1
   17f80:	mov	r1, r3
   17f84:	mov	r3, r5
   17f88:	mov	r2, r7
   17f8c:	bl	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17f90:	cmp	r0, #0
   17f94:	str	r0, [r4, #4]
   17f98:	beq	17fc4 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17f9c:	mvn	r0, #0
   17fa0:	mov	r1, #1
   17fa4:	mov	r2, r7
   17fa8:	mov	r3, #1
   17fac:	str	r1, [sp]
   17fb0:	str	r0, [sp, #4]
   17fb4:	mov	r0, r6
   17fb8:	mov	r1, r5
   17fbc:	bl	1719c <flatcc_builder_create_vector@@Base>
   17fc0:	str	r0, [r4]
   17fc4:	sub	sp, fp, #16
   17fc8:	pop	{r4, r5, r6, r7, fp, pc}

00017fcc <flatcc_builder_start_union_vector@@Base>:
   17fcc:	push	{r4, sl, fp, lr}
   17fd0:	add	fp, sp, #8
   17fd4:	mov	r1, #4
   17fd8:	mov	r4, r0
   17fdc:	bl	150f4 <flatcc_builder_start_buffer@@Base+0xbc>
   17fe0:	mov	r1, r0
   17fe4:	mvn	r0, #0
   17fe8:	cmp	r1, #0
   17fec:	popne	{r4, sl, fp, pc}
   17ff0:	ldr	r0, [r4, #32]
   17ff4:	mov	r1, #8
   17ff8:	mov	r2, #7
   17ffc:	str	r1, [r0, #16]
   18000:	mov	r0, #0
   18004:	ldr	r1, [r4, #32]
   18008:	str	r0, [r1, #20]
   1800c:	ldr	r1, [r4, #32]
   18010:	strh	r2, [r1, #14]
   18014:	ldr	r2, [r4, #28]
   18018:	ldr	r3, [r4, #60]	; 0x3c
   1801c:	ldr	ip, [r4, #64]	; 0x40
   18020:	add	r3, r3, r2
   18024:	sub	r2, ip, r2
   18028:	str	r3, [r4, #16]
   1802c:	mvn	r3, #3
   18030:	cmn	r2, #4
   18034:	movcs	r2, r3
   18038:	str	r2, [r4, #24]
   1803c:	str	r3, [r1, #4]
   18040:	pop	{r4, sl, fp, pc}

00018044 <flatcc_builder_end_union_vector@@Base>:
   18044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18048:	add	fp, sp, #28
   1804c:	sub	sp, sp, #20
   18050:	mov	r4, r0
   18054:	mov	r0, #0
   18058:	mov	r8, r1
   1805c:	str	r0, [r4]
   18060:	str	r0, [r4, #4]
   18064:	ldr	r0, [r1, #32]
   18068:	ldrh	r1, [r0, #14]
   1806c:	cmp	r1, #7
   18070:	bne	18278 <flatcc_builder_end_union_vector@@Base+0x234>
   18074:	ldr	r9, [r0, #20]
   18078:	ldr	r5, [r8, #20]
   1807c:	ldr	r2, [r8, #24]
   18080:	add	r0, r9, r9, lsl #2
   18084:	add	r1, r5, r0
   18088:	cmp	r1, r2
   1808c:	str	r1, [r8, #20]
   18090:	bcs	18180 <flatcc_builder_end_union_vector@@Base+0x13c>
   18094:	ldr	r0, [r8, #16]
   18098:	adds	r1, r0, r5
   1809c:	beq	181e8 <flatcc_builder_end_union_vector@@Base+0x1a4>
   180a0:	add	sl, r1, r9, lsl #2
   180a4:	cmp	r9, #0
   180a8:	beq	18138 <flatcc_builder_end_union_vector@@Base+0xf4>
   180ac:	and	r2, r9, #1
   180b0:	cmp	r9, #1
   180b4:	str	r4, [sp, #12]
   180b8:	str	r2, [sp, #16]
   180bc:	mov	r2, #0
   180c0:	beq	18118 <flatcc_builder_end_union_vector@@Base+0xd4>
   180c4:	ldr	r2, [sp, #16]
   180c8:	add	r5, r5, #4
   180cc:	add	r6, r0, #8
   180d0:	sub	lr, r9, r2
   180d4:	mov	r2, #0
   180d8:	ldrb	r7, [r6, #-8]
   180dc:	mov	r4, sl
   180e0:	add	r3, r0, r2, lsl #3
   180e4:	strb	r7, [r4, r2]!
   180e8:	add	r7, r0, r5
   180ec:	add	r2, r2, #2
   180f0:	ldr	ip, [r3, #4]
   180f4:	cmp	lr, r2
   180f8:	str	ip, [r7, #-4]
   180fc:	ldrb	r7, [r6]
   18100:	add	r6, r6, #16
   18104:	strb	r7, [r4, #1]
   18108:	ldr	r3, [r3, #12]
   1810c:	str	r3, [r0, r5]
   18110:	add	r5, r5, #8
   18114:	bne	180d8 <flatcc_builder_end_union_vector@@Base+0x94>
   18118:	ldr	r3, [sp, #16]
   1811c:	ldr	r4, [sp, #12]
   18120:	cmp	r3, #0
   18124:	beq	18138 <flatcc_builder_end_union_vector@@Base+0xf4>
   18128:	ldrb	r3, [r0, r2, lsl #3]!
   1812c:	strb	r3, [sl, r2]
   18130:	ldr	r0, [r0, #4]
   18134:	str	r0, [r1, r2, lsl #2]
   18138:	mov	r0, r8
   1813c:	mov	r2, r9
   18140:	mov	r3, sl
   18144:	bl	173fc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   18148:	mov	r5, r0
   1814c:	mov	r6, #0
   18150:	cmp	r0, #0
   18154:	beq	181f0 <flatcc_builder_end_union_vector@@Base+0x1ac>
   18158:	mvn	r0, #0
   1815c:	mov	r1, #1
   18160:	mov	r2, r9
   18164:	mov	r3, #1
   18168:	str	r1, [sp]
   1816c:	str	r0, [sp, #4]
   18170:	mov	r0, r8
   18174:	mov	r1, sl
   18178:	bl	1719c <flatcc_builder_create_vector@@Base>
   1817c:	b	181f4 <flatcc_builder_end_union_vector@@Base+0x1b0>
   18180:	ldr	r2, [r8, #28]
   18184:	ldr	r0, [r8, #40]	; 0x28
   18188:	ldr	r7, [r8, #48]	; 0x30
   1818c:	mov	r3, #1
   18190:	str	r3, [sp]
   18194:	mov	r3, #1
   18198:	add	r1, r1, r2
   1819c:	add	r2, r1, #1
   181a0:	add	r1, r8, #60	; 0x3c
   181a4:	blx	r7
   181a8:	cmp	r0, #0
   181ac:	bne	181e8 <flatcc_builder_end_union_vector@@Base+0x1a4>
   181b0:	ldr	r1, [r8, #28]
   181b4:	ldr	r0, [r8, #60]	; 0x3c
   181b8:	ldr	r3, [r8, #64]	; 0x40
   181bc:	ldr	r2, [r8, #32]
   181c0:	add	r0, r0, r1
   181c4:	sub	r1, r3, r1
   181c8:	mvn	r3, #3
   181cc:	cmn	r1, #4
   181d0:	str	r0, [r8, #16]
   181d4:	movcs	r1, r3
   181d8:	str	r1, [r8, #24]
   181dc:	str	r3, [r2, #4]
   181e0:	adds	r1, r0, r5
   181e4:	bne	180a0 <flatcc_builder_end_union_vector@@Base+0x5c>
   181e8:	sub	sp, fp, #28
   181ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181f0:	mov	r0, #0
   181f4:	orr	r1, r6, r5
   181f8:	stm	r4, {r0, r1}
   181fc:	mov	r1, #0
   18200:	ldr	r0, [r8, #16]
   18204:	ldr	r2, [r8, #20]
   18208:	bl	12990 <memset@plt>
   1820c:	ldr	r0, [r8, #32]
   18210:	ldr	r1, [r8, #60]	; 0x3c
   18214:	ldr	r2, [r8, #64]	; 0x40
   18218:	ldr	r3, [r0, #8]
   1821c:	str	r3, [r8, #20]
   18220:	ldr	r3, [r0]
   18224:	str	r3, [r8, #28]
   18228:	add	r1, r1, r3
   1822c:	ldr	r7, [r0, #4]
   18230:	str	r1, [r8, #16]
   18234:	sub	r1, r2, r3
   18238:	cmp	r1, r7
   1823c:	movhi	r1, r7
   18240:	str	r1, [r8, #24]
   18244:	ldrh	r1, [r8, #130]	; 0x82
   18248:	ldrh	r2, [r8, #128]	; 0x80
   1824c:	cmp	r2, r1
   18250:	strhcc	r1, [r8, #128]	; 0x80
   18254:	ldrh	r1, [r0, #12]
   18258:	sub	r0, r0, #36	; 0x24
   1825c:	str	r0, [r8, #32]
   18260:	strh	r1, [r8, #130]	; 0x82
   18264:	ldr	r0, [r8, #156]	; 0x9c
   18268:	sub	r0, r0, #1
   1826c:	str	r0, [r8, #156]	; 0x9c
   18270:	sub	sp, fp, #28
   18274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18278:	movw	r0, #61901	; 0xf1cd
   1827c:	movw	r1, #58795	; 0xe5ab
   18280:	movw	r3, #61951	; 0xf1ff
   18284:	movw	r2, #1617	; 0x651
   18288:	movt	r0, #1
   1828c:	movt	r1, #1
   18290:	movt	r3, #1
   18294:	bl	129c0 <__assert_fail@plt>

00018298 <flatcc_builder_union_vector_count@@Base>:
   18298:	ldr	r0, [r0, #32]
   1829c:	ldr	r0, [r0, #20]
   182a0:	bx	lr

000182a4 <flatcc_builder_union_vector_edit@@Base>:
   182a4:	ldr	r0, [r0, #16]
   182a8:	bx	lr

000182ac <flatcc_builder_extend_union_vector@@Base>:
   182ac:	push	{r4, r5, fp, lr}
   182b0:	add	fp, sp, #8
   182b4:	sub	sp, sp, #8
   182b8:	mov	r4, r0
   182bc:	ldr	r0, [r0, #32]
   182c0:	ldr	r2, [r0, #20]
   182c4:	adds	r2, r2, r1
   182c8:	cmpcc	r2, #536870912	; 0x20000000
   182cc:	bcc	182f0 <flatcc_builder_extend_union_vector@@Base+0x44>
   182d0:	movw	r0, #63066	; 0xf65a
   182d4:	movw	r1, #58795	; 0xe5ab
   182d8:	movw	r3, #63093	; 0xf675
   182dc:	mov	r2, #892	; 0x37c
   182e0:	movt	r0, #1
   182e4:	movt	r1, #1
   182e8:	movt	r3, #1
   182ec:	bl	129c0 <__assert_fail@plt>
   182f0:	str	r2, [r0, #20]
   182f4:	ldr	r5, [r4, #20]
   182f8:	ldr	r0, [r4, #24]
   182fc:	add	r1, r5, r1, lsl #3
   18300:	cmp	r1, r0
   18304:	str	r1, [r4, #20]
   18308:	bcs	1831c <flatcc_builder_extend_union_vector@@Base+0x70>
   1830c:	ldr	r0, [r4, #16]
   18310:	add	r0, r0, r5
   18314:	sub	sp, fp, #8
   18318:	pop	{r4, r5, fp, pc}
   1831c:	ldr	r2, [r4, #28]
   18320:	ldr	r0, [r4, #40]	; 0x28
   18324:	ldr	ip, [r4, #48]	; 0x30
   18328:	mov	r3, #1
   1832c:	str	r3, [sp]
   18330:	mov	r3, #1
   18334:	add	r1, r1, r2
   18338:	add	r2, r1, #1
   1833c:	add	r1, r4, #60	; 0x3c
   18340:	blx	ip
   18344:	mov	r1, r0
   18348:	mov	r0, #0
   1834c:	cmp	r1, #0
   18350:	beq	1835c <flatcc_builder_extend_union_vector@@Base+0xb0>
   18354:	sub	sp, fp, #8
   18358:	pop	{r4, r5, fp, pc}
   1835c:	ldr	r1, [r4, #28]
   18360:	ldr	r0, [r4, #60]	; 0x3c
   18364:	ldr	r3, [r4, #64]	; 0x40
   18368:	ldr	r2, [r4, #32]
   1836c:	add	r0, r0, r1
   18370:	sub	r1, r3, r1
   18374:	mvn	r3, #3
   18378:	cmn	r1, #4
   1837c:	str	r0, [r4, #16]
   18380:	movcs	r1, r3
   18384:	str	r1, [r4, #24]
   18388:	str	r3, [r2, #4]
   1838c:	add	r0, r0, r5
   18390:	sub	sp, fp, #8
   18394:	pop	{r4, r5, fp, pc}

00018398 <flatcc_builder_truncate_union_vector@@Base>:
   18398:	push	{fp, lr}
   1839c:	mov	fp, sp
   183a0:	ldr	r2, [r0, #32]
   183a4:	ldrh	r3, [r2, #14]
   183a8:	cmp	r3, #7
   183ac:	bne	183f4 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   183b0:	ldr	r3, [r2, #20]
   183b4:	cmp	r3, r1
   183b8:	bcc	18414 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   183bc:	sub	r3, r3, r1
   183c0:	str	r3, [r2, #20]
   183c4:	ldr	r2, [r0, #32]
   183c8:	ldr	r3, [r0, #20]
   183cc:	ldr	ip, [r0, #16]
   183d0:	ldr	r2, [r2, #16]
   183d4:	mls	r3, r2, r1, r3
   183d8:	mul	r2, r2, r1
   183dc:	mov	r1, #0
   183e0:	str	r3, [r0, #20]
   183e4:	add	r0, ip, r3
   183e8:	bl	12990 <memset@plt>
   183ec:	mov	r0, #0
   183f0:	pop	{fp, pc}
   183f4:	movw	r0, #61901	; 0xf1cd
   183f8:	movw	r1, #58795	; 0xe5ab
   183fc:	movw	r3, #62034	; 0xf252
   18400:	movw	r2, #1665	; 0x681
   18404:	movt	r0, #1
   18408:	movt	r1, #1
   1840c:	movt	r3, #1
   18410:	bl	129c0 <__assert_fail@plt>
   18414:	movw	r0, #60465	; 0xec31
   18418:	movw	r1, #58795	; 0xe5ab
   1841c:	movw	r3, #62034	; 0xf252
   18420:	movw	r2, #1666	; 0x682
   18424:	movt	r0, #1
   18428:	movt	r1, #1
   1842c:	movt	r3, #1
   18430:	bl	129c0 <__assert_fail@plt>

00018434 <flatcc_builder_union_vector_push@@Base>:
   18434:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18438:	add	fp, sp, #24
   1843c:	sub	sp, sp, #8
   18440:	mov	r7, r0
   18444:	ldr	r0, [r0, #32]
   18448:	mov	r9, r1
   1844c:	ldrh	r1, [r0, #14]
   18450:	cmp	r1, #7
   18454:	bne	1851c <flatcc_builder_union_vector_push@@Base+0xe8>
   18458:	ldr	r1, [r0, #20]
   1845c:	mov	r6, #0
   18460:	cmn	r1, #-536870911	; 0xe0000001
   18464:	beq	184c4 <flatcc_builder_union_vector_push@@Base+0x90>
   18468:	add	r1, r1, #1
   1846c:	mov	r8, r2
   18470:	str	r1, [r0, #20]
   18474:	ldr	r4, [r7, #20]
   18478:	ldr	r0, [r7, #24]
   1847c:	add	r1, r4, #8
   18480:	cmp	r1, r0
   18484:	str	r1, [r7, #20]
   18488:	bcs	18494 <flatcc_builder_union_vector_push@@Base+0x60>
   1848c:	ldr	r0, [r7, #16]
   18490:	b	18500 <flatcc_builder_union_vector_push@@Base+0xcc>
   18494:	ldr	r1, [r7, #28]
   18498:	ldr	r0, [r7, #40]	; 0x28
   1849c:	ldr	r5, [r7, #48]	; 0x30
   184a0:	mov	r2, #1
   184a4:	mov	r3, #1
   184a8:	str	r2, [sp]
   184ac:	add	r1, r4, r1
   184b0:	add	r2, r1, #9
   184b4:	add	r1, r7, #60	; 0x3c
   184b8:	blx	r5
   184bc:	cmp	r0, #0
   184c0:	beq	184d0 <flatcc_builder_union_vector_push@@Base+0x9c>
   184c4:	mov	r0, r6
   184c8:	sub	sp, fp, #24
   184cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184d0:	ldr	r1, [r7, #28]
   184d4:	ldr	r0, [r7, #60]	; 0x3c
   184d8:	ldr	r3, [r7, #64]	; 0x40
   184dc:	ldr	r2, [r7, #32]
   184e0:	add	r0, r0, r1
   184e4:	sub	r1, r3, r1
   184e8:	mvn	r3, #3
   184ec:	cmn	r1, #4
   184f0:	str	r0, [r7, #16]
   184f4:	movcs	r1, r3
   184f8:	str	r1, [r7, #24]
   184fc:	str	r3, [r2, #4]
   18500:	adds	r0, r0, r4
   18504:	movne	r6, r0
   18508:	strne	r9, [r0]
   1850c:	strne	r8, [r0, #4]
   18510:	mov	r0, r6
   18514:	sub	sp, fp, #24
   18518:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1851c:	movw	r0, #61901	; 0xf1cd
   18520:	movw	r1, #58795	; 0xe5ab
   18524:	movw	r3, #62103	; 0xf297
   18528:	movw	r2, #1677	; 0x68d
   1852c:	movt	r0, #1
   18530:	movt	r1, #1
   18534:	movt	r3, #1
   18538:	bl	129c0 <__assert_fail@plt>

0001853c <flatcc_builder_append_union_vector@@Base>:
   1853c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18540:	add	fp, sp, #24
   18544:	sub	sp, sp, #8
   18548:	mov	r6, r0
   1854c:	ldr	r0, [r0, #32]
   18550:	mov	r8, r1
   18554:	ldrh	r1, [r0, #14]
   18558:	cmp	r1, #7
   1855c:	bne	18660 <flatcc_builder_append_union_vector@@Base+0x124>
   18560:	ldr	r1, [r0, #20]
   18564:	mov	r5, r2
   18568:	adds	r1, r1, r2
   1856c:	cmpcc	r1, #536870912	; 0x20000000
   18570:	bcc	18594 <flatcc_builder_append_union_vector@@Base+0x58>
   18574:	movw	r0, #63066	; 0xf65a
   18578:	movw	r1, #58795	; 0xe5ab
   1857c:	movw	r3, #63093	; 0xf675
   18580:	mov	r2, #892	; 0x37c
   18584:	movt	r0, #1
   18588:	movt	r1, #1
   1858c:	movt	r3, #1
   18590:	bl	129c0 <__assert_fail@plt>
   18594:	str	r1, [r0, #20]
   18598:	ldr	r4, [r6, #20]
   1859c:	ldr	r0, [r6, #24]
   185a0:	add	r1, r4, r5, lsl #3
   185a4:	cmp	r1, r0
   185a8:	str	r1, [r6, #20]
   185ac:	bcs	185d8 <flatcc_builder_append_union_vector@@Base+0x9c>
   185b0:	ldr	r0, [r6, #16]
   185b4:	adds	r7, r0, r4
   185b8:	beq	18650 <flatcc_builder_append_union_vector@@Base+0x114>
   185bc:	lsl	r2, r5, #3
   185c0:	mov	r0, r7
   185c4:	mov	r1, r8
   185c8:	bl	12900 <memcpy@plt>
   185cc:	mov	r0, r7
   185d0:	sub	sp, fp, #24
   185d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   185d8:	ldr	r2, [r6, #28]
   185dc:	ldr	r0, [r6, #40]	; 0x28
   185e0:	ldr	r7, [r6, #48]	; 0x30
   185e4:	mov	r3, #1
   185e8:	str	r3, [sp]
   185ec:	mov	r3, #1
   185f0:	add	r1, r1, r2
   185f4:	add	r2, r1, #1
   185f8:	add	r1, r6, #60	; 0x3c
   185fc:	blx	r7
   18600:	mov	r7, #0
   18604:	cmp	r0, #0
   18608:	beq	18618 <flatcc_builder_append_union_vector@@Base+0xdc>
   1860c:	mov	r0, r7
   18610:	sub	sp, fp, #24
   18614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18618:	ldr	r1, [r6, #28]
   1861c:	ldr	r0, [r6, #60]	; 0x3c
   18620:	ldr	r3, [r6, #64]	; 0x40
   18624:	ldr	r2, [r6, #32]
   18628:	add	r0, r0, r1
   1862c:	sub	r1, r3, r1
   18630:	mvn	r3, #3
   18634:	cmn	r1, #4
   18638:	str	r0, [r6, #16]
   1863c:	movcs	r1, r3
   18640:	str	r1, [r6, #24]
   18644:	str	r3, [r2, #4]
   18648:	adds	r7, r0, r4
   1864c:	bne	185bc <flatcc_builder_append_union_vector@@Base+0x80>
   18650:	mov	r7, #0
   18654:	mov	r0, r7
   18658:	sub	sp, fp, #24
   1865c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18660:	movw	r0, #61901	; 0xf1cd
   18664:	movw	r1, #58795	; 0xe5ab
   18668:	movw	r3, #62212	; 0xf304
   1866c:	movw	r2, #1692	; 0x69c
   18670:	movt	r0, #1
   18674:	movt	r1, #1
   18678:	movt	r3, #1
   1867c:	bl	129c0 <__assert_fail@plt>

00018680 <flatcc_builder_create_string@@Base>:
   18680:	push	{r4, r5, r6, sl, fp, lr}
   18684:	add	fp, sp, #16
   18688:	sub	sp, sp, #80	; 0x50
   1868c:	str	r2, [fp, #-20]	; 0xffffffec
   18690:	mvn	r5, r2
   18694:	mov	r6, r0
   18698:	sub	r3, fp, #20
   1869c:	cmp	r2, #0
   186a0:	add	lr, sp, #4
   186a4:	ldr	ip, [r0, #136]	; 0x88
   186a8:	mov	r0, #4
   186ac:	str	r0, [sp, #16]
   186b0:	str	r3, [sp, #12]
   186b4:	mov	r3, #1
   186b8:	str	r0, [sp, #4]
   186bc:	addne	r0, r2, #4
   186c0:	str	r3, [sp, #8]
   186c4:	strne	r2, [sp, #24]
   186c8:	movw	r2, #58265	; 0xe399
   186cc:	movne	r3, #2
   186d0:	strne	r1, [sp, #20]
   186d4:	strne	r3, [sp, #8]
   186d8:	strne	r0, [sp, #4]
   186dc:	movt	r2, #1
   186e0:	add	r5, ip, r5
   186e4:	and	r5, r5, #3
   186e8:	add	r5, r5, #1
   186ec:	add	r1, r0, r5
   186f0:	add	r0, lr, r3, lsl #3
   186f4:	str	r1, [sp, #4]
   186f8:	cmp	r1, #0
   186fc:	str	r2, [r0, #8]
   18700:	add	r2, r3, #1
   18704:	str	r5, [r0, #12]
   18708:	str	r2, [sp, #8]
   1870c:	ble	18760 <flatcc_builder_create_string@@Base+0xe0>
   18710:	ldr	r0, [r6, #36]	; 0x24
   18714:	ldr	r4, [r6, #44]	; 0x2c
   18718:	sub	r5, ip, r1
   1871c:	str	r1, [sp]
   18720:	add	r1, lr, #8
   18724:	mov	r3, r5
   18728:	blx	r4
   1872c:	cmp	r0, #0
   18730:	streq	r5, [r6, #136]	; 0x88
   18734:	moveq	r0, r5
   18738:	subeq	sp, fp, #16
   1873c:	popeq	{r4, r5, r6, sl, fp, pc}
   18740:	movw	r0, #63313	; 0xf751
   18744:	movw	r1, #58795	; 0xe5ab
   18748:	movw	r3, #62992	; 0xf610
   1874c:	movw	r2, #651	; 0x28b
   18750:	movt	r0, #1
   18754:	movt	r1, #1
   18758:	movt	r3, #1
   1875c:	bl	129c0 <__assert_fail@plt>
   18760:	movw	r0, #63313	; 0xf751
   18764:	movw	r1, #58795	; 0xe5ab
   18768:	movw	r3, #62992	; 0xf610
   1876c:	movw	r2, #647	; 0x287
   18770:	movt	r0, #1
   18774:	movt	r1, #1
   18778:	movt	r3, #1
   1877c:	bl	129c0 <__assert_fail@plt>

00018780 <flatcc_builder_create_string_str@@Base>:
   18780:	push	{r4, r5, fp, lr}
   18784:	add	fp, sp, #8
   18788:	mov	r5, r0
   1878c:	mov	r0, r1
   18790:	mov	r4, r1
   18794:	bl	1296c <strlen@plt>
   18798:	mov	r2, r0
   1879c:	mov	r0, r5
   187a0:	mov	r1, r4
   187a4:	pop	{r4, r5, fp, lr}
   187a8:	b	18680 <flatcc_builder_create_string@@Base>

000187ac <flatcc_builder_create_string_strn@@Base>:
   187ac:	push	{r4, r5, r6, sl, fp, lr}
   187b0:	add	fp, sp, #16
   187b4:	mov	r6, r0
   187b8:	mov	r5, r1
   187bc:	mov	r0, r1
   187c0:	mov	r1, #0
   187c4:	mov	r4, r2
   187c8:	bl	129a8 <memchr@plt>
   187cc:	cmp	r0, #0
   187d0:	mov	r1, r5
   187d4:	subne	r4, r0, r5
   187d8:	mov	r0, r6
   187dc:	mov	r2, r4
   187e0:	pop	{r4, r5, r6, sl, fp, lr}
   187e4:	b	18680 <flatcc_builder_create_string@@Base>

000187e8 <flatcc_builder_end_string@@Base>:
   187e8:	push	{r4, r5, fp, lr}
   187ec:	add	fp, sp, #8
   187f0:	mov	r4, r0
   187f4:	ldr	r0, [r0, #32]
   187f8:	ldrh	r1, [r0, #14]
   187fc:	cmp	r1, #6
   18800:	bne	188a8 <flatcc_builder_end_string@@Base+0xc0>
   18804:	ldr	r2, [r0, #20]
   18808:	ldr	r0, [r4, #20]
   1880c:	cmp	r2, r0
   18810:	bne	188c8 <flatcc_builder_end_string@@Base+0xe0>
   18814:	ldr	r1, [r4, #16]
   18818:	mov	r0, r4
   1881c:	bl	18680 <flatcc_builder_create_string@@Base>
   18820:	mov	r5, r0
   18824:	cmp	r0, #0
   18828:	beq	188a0 <flatcc_builder_end_string@@Base+0xb8>
   1882c:	ldr	r0, [r4, #16]
   18830:	ldr	r2, [r4, #20]
   18834:	mov	r1, #0
   18838:	bl	12990 <memset@plt>
   1883c:	ldr	r0, [r4, #32]
   18840:	ldr	r1, [r4, #60]	; 0x3c
   18844:	ldr	ip, [r4, #64]	; 0x40
   18848:	ldr	r3, [r0, #8]
   1884c:	str	r3, [r4, #20]
   18850:	ldr	r3, [r0]
   18854:	str	r3, [r4, #28]
   18858:	add	r1, r1, r3
   1885c:	ldr	r2, [r0, #4]
   18860:	str	r1, [r4, #16]
   18864:	sub	r1, ip, r3
   18868:	cmp	r1, r2
   1886c:	movhi	r1, r2
   18870:	str	r1, [r4, #24]
   18874:	ldrh	r1, [r4, #130]	; 0x82
   18878:	ldrh	r2, [r4, #128]	; 0x80
   1887c:	cmp	r2, r1
   18880:	strhcc	r1, [r4, #128]	; 0x80
   18884:	ldrh	r1, [r0, #12]
   18888:	sub	r0, r0, #36	; 0x24
   1888c:	str	r0, [r4, #32]
   18890:	strh	r1, [r4, #130]	; 0x82
   18894:	ldr	r0, [r4, #156]	; 0x9c
   18898:	sub	r0, r0, #1
   1889c:	str	r0, [r4, #156]	; 0x9c
   188a0:	mov	r0, r5
   188a4:	pop	{r4, r5, fp, pc}
   188a8:	movw	r0, #60112	; 0xead0
   188ac:	movw	r1, #58795	; 0xe5ab
   188b0:	movw	r3, #62339	; 0xf383
   188b4:	movw	r2, #1732	; 0x6c4
   188b8:	movt	r0, #1
   188bc:	movt	r1, #1
   188c0:	movt	r3, #1
   188c4:	bl	129c0 <__assert_fail@plt>
   188c8:	movw	r0, #62406	; 0xf3c6
   188cc:	movw	r1, #58795	; 0xe5ab
   188d0:	movw	r3, #62339	; 0xf383
   188d4:	movw	r2, #1733	; 0x6c5
   188d8:	movt	r0, #1
   188dc:	movt	r1, #1
   188e0:	movt	r3, #1
   188e4:	bl	129c0 <__assert_fail@plt>

000188e8 <flatcc_builder_string_edit@@Base>:
   188e8:	ldr	r0, [r0, #16]
   188ec:	bx	lr

000188f0 <flatcc_builder_string_len@@Base>:
   188f0:	ldr	r0, [r0, #32]
   188f4:	ldr	r0, [r0, #20]
   188f8:	bx	lr

000188fc <flatcc_builder_table_edit@@Base>:
   188fc:	push	{fp, lr}
   18900:	mov	fp, sp
   18904:	ldr	r2, [r0, #32]
   18908:	ldrh	r2, [r2, #14]
   1890c:	cmp	r2, #3
   18910:	ldreq	r2, [r0, #16]
   18914:	ldreq	r0, [r0, #20]
   18918:	addeq	r0, r2, r0
   1891c:	subeq	r0, r0, r1
   18920:	popeq	{fp, pc}
   18924:	movw	r0, #60864	; 0xedc0
   18928:	movw	r1, #58795	; 0xe5ab
   1892c:	movw	r3, #62584	; 0xf478
   18930:	movw	r2, #1794	; 0x702
   18934:	movt	r0, #1
   18938:	movt	r1, #1
   1893c:	movt	r3, #1
   18940:	bl	129c0 <__assert_fail@plt>

00018944 <flatcc_builder_table_add_copy@@Base>:
   18944:	push	{r4, r5, r6, sl, fp, lr}
   18948:	add	fp, sp, #16
   1894c:	mov	r4, r3
   18950:	ldr	r3, [fp, #8]
   18954:	mov	r5, r2
   18958:	mov	r2, r4
   1895c:	bl	17988 <flatcc_builder_table_add@@Base>
   18960:	mov	r6, r0
   18964:	cmp	r0, #0
   18968:	beq	1897c <flatcc_builder_table_add_copy@@Base+0x38>
   1896c:	mov	r0, r6
   18970:	mov	r1, r5
   18974:	mov	r2, r4
   18978:	bl	12900 <memcpy@plt>
   1897c:	mov	r0, r6
   18980:	pop	{r4, r5, r6, sl, fp, pc}

00018984 <flatcc_builder_push_buffer_alignment@@Base>:
   18984:	ldrh	r1, [r0, #128]	; 0x80
   18988:	mov	r2, #4
   1898c:	strh	r2, [r0, #128]	; 0x80
   18990:	mov	r0, r1
   18994:	bx	lr

00018998 <flatcc_builder_pop_buffer_alignment@@Base>:
   18998:	ldrh	r2, [r0, #128]	; 0x80
   1899c:	cmp	r2, r1
   189a0:	strhcc	r1, [r0, #128]	; 0x80
   189a4:	bx	lr

000189a8 <flatcc_builder_get_buffer_alignment@@Base>:
   189a8:	ldrh	r0, [r0, #128]	; 0x80
   189ac:	bx	lr

000189b0 <flatcc_builder_set_vtable_clustering@@Base>:
   189b0:	clz	r1, r1
   189b4:	lsr	r1, r1, #5
   189b8:	str	r1, [r0, #180]	; 0xb4
   189bc:	bx	lr

000189c0 <flatcc_builder_set_block_align@@Base>:
   189c0:	strh	r1, [r0, #132]	; 0x84
   189c4:	bx	lr

000189c8 <flatcc_builder_get_level@@Base>:
   189c8:	ldr	r0, [r0, #156]	; 0x9c
   189cc:	bx	lr

000189d0 <flatcc_builder_set_max_level@@Base>:
   189d0:	str	r1, [r0, #176]	; 0xb0
   189d4:	ldr	r2, [r0, #160]	; 0xa0
   189d8:	cmp	r2, r1
   189dc:	strlt	r1, [r0, #160]	; 0xa0
   189e0:	bx	lr

000189e4 <flatcc_builder_get_buffer_size@@Base>:
   189e4:	ldr	r1, [r0, #136]	; 0x88
   189e8:	ldr	r0, [r0, #140]	; 0x8c
   189ec:	sub	r0, r0, r1
   189f0:	bx	lr

000189f4 <flatcc_builder_get_buffer_start@@Base>:
   189f4:	ldr	r0, [r0, #136]	; 0x88
   189f8:	bx	lr

000189fc <flatcc_builder_get_buffer_end@@Base>:
   189fc:	ldr	r0, [r0, #140]	; 0x8c
   18a00:	bx	lr

00018a04 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18a04:	str	r1, [r0, #172]	; 0xac
   18a08:	bx	lr

00018a0c <flatcc_builder_set_identifier@@Base>:
   18a0c:	movw	r2, #58265	; 0xe399
   18a10:	cmp	r1, #0
   18a14:	movt	r2, #1
   18a18:	movne	r2, r1
   18a1c:	ldr	r1, [r2]
   18a20:	str	r1, [r0, #168]	; 0xa8
   18a24:	bx	lr

00018a28 <flatcc_builder_get_type@@Base>:
   18a28:	ldr	r0, [r0, #32]
   18a2c:	cmp	r0, #0
   18a30:	ldrhne	r0, [r0, #14]
   18a34:	moveq	r0, #0
   18a38:	bx	lr

00018a3c <flatcc_builder_get_type_at@@Base>:
   18a3c:	mov	r2, r0
   18a40:	mov	r0, #0
   18a44:	cmp	r1, #1
   18a48:	blt	18a6c <flatcc_builder_get_type_at@@Base+0x30>
   18a4c:	ldr	r3, [r2, #156]	; 0x9c
   18a50:	cmp	r3, r1
   18a54:	bxlt	lr
   18a58:	sub	r0, r1, r3
   18a5c:	ldr	r1, [r2, #32]
   18a60:	add	r0, r0, r0, lsl #3
   18a64:	add	r0, r1, r0, lsl #2
   18a68:	ldrh	r0, [r0, #14]
   18a6c:	bx	lr

00018a70 <flatcc_builder_get_direct_buffer@@Base>:
   18a70:	ldr	r2, [r0, #184]	; 0xb8
   18a74:	cmp	r2, #0
   18a78:	beq	18a8c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18a7c:	ldr	r2, [r0, #188]	; 0xbc
   18a80:	ldr	r3, [r0, #192]	; 0xc0
   18a84:	cmp	r2, r3
   18a88:	beq	18aa4 <flatcc_builder_get_direct_buffer@@Base+0x34>
   18a8c:	cmp	r1, #0
   18a90:	moveq	r0, #0
   18a94:	bxeq	lr
   18a98:	mov	r0, #0
   18a9c:	str	r0, [r1]
   18aa0:	bx	lr
   18aa4:	cmp	r1, #0
   18aa8:	ldrne	r2, [r0, #212]	; 0xd4
   18aac:	strne	r2, [r1]
   18ab0:	ldr	r0, [r0, #196]	; 0xc4
   18ab4:	bx	lr

00018ab8 <flatcc_builder_copy_buffer@@Base>:
   18ab8:	push	{fp, lr}
   18abc:	mov	fp, sp
   18ac0:	ldr	r3, [r0, #184]	; 0xb8
   18ac4:	cmp	r3, #0
   18ac8:	beq	18afc <flatcc_builder_copy_buffer@@Base+0x44>
   18acc:	add	r0, r0, #188	; 0xbc
   18ad0:	bl	191fc <flatcc_emitter_copy_buffer@@Base>
   18ad4:	cmp	r0, #0
   18ad8:	popne	{fp, pc}
   18adc:	movw	r0, #59391	; 0xe7ff
   18ae0:	movw	r1, #58795	; 0xe5ab
   18ae4:	movw	r3, #62723	; 0xf503
   18ae8:	movw	r2, #1926	; 0x786
   18aec:	movt	r0, #1
   18af0:	movt	r1, #1
   18af4:	movt	r3, #1
   18af8:	bl	129c0 <__assert_fail@plt>
   18afc:	mov	r0, #0
   18b00:	pop	{fp, pc}

00018b04 <flatcc_builder_finalize_buffer@@Base>:
   18b04:	push	{r4, r5, r6, sl, fp, lr}
   18b08:	add	fp, sp, #16
   18b0c:	mov	r5, r0
   18b10:	ldr	r0, [r0, #136]	; 0x88
   18b14:	cmp	r1, #0
   18b18:	ldr	r2, [r5, #140]	; 0x8c
   18b1c:	sub	r4, r2, r0
   18b20:	mov	r0, r4
   18b24:	strne	r4, [r1]
   18b28:	bl	1293c <malloc@plt>
   18b2c:	cmp	r0, #0
   18b30:	beq	18b80 <flatcc_builder_finalize_buffer@@Base+0x7c>
   18b34:	mov	r6, r0
   18b38:	ldr	r0, [r5, #184]	; 0xb8
   18b3c:	cmp	r0, #0
   18b40:	beq	18ba0 <flatcc_builder_finalize_buffer@@Base+0x9c>
   18b44:	add	r0, r5, #188	; 0xbc
   18b48:	mov	r1, r6
   18b4c:	mov	r2, r4
   18b50:	bl	191fc <flatcc_emitter_copy_buffer@@Base>
   18b54:	cmp	r0, #0
   18b58:	movne	r0, r6
   18b5c:	popne	{r4, r5, r6, sl, fp, pc}
   18b60:	movw	r0, #59391	; 0xe7ff
   18b64:	movw	r1, #58795	; 0xe5ab
   18b68:	movw	r3, #62723	; 0xf503
   18b6c:	movw	r2, #1926	; 0x786
   18b70:	movt	r0, #1
   18b74:	movt	r1, #1
   18b78:	movt	r3, #1
   18b7c:	bl	129c0 <__assert_fail@plt>
   18b80:	movw	r0, #63313	; 0xf751
   18b84:	movw	r1, #58795	; 0xe5ab
   18b88:	movw	r3, #62792	; 0xf548
   18b8c:	movw	r2, #1944	; 0x798
   18b90:	movt	r0, #1
   18b94:	movt	r1, #1
   18b98:	movt	r3, #1
   18b9c:	bl	129c0 <__assert_fail@plt>
   18ba0:	movw	r0, #63313	; 0xf751
   18ba4:	movw	r1, #58795	; 0xe5ab
   18ba8:	movw	r3, #62792	; 0xf548
   18bac:	movw	r2, #1948	; 0x79c
   18bb0:	movt	r0, #1
   18bb4:	movt	r1, #1
   18bb8:	movt	r3, #1
   18bbc:	bl	129c0 <__assert_fail@plt>

00018bc0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18bc0:	push	{r4, r5, r6, r7, fp, lr}
   18bc4:	add	fp, sp, #16
   18bc8:	sub	sp, sp, #8
   18bcc:	mov	r5, r0
   18bd0:	mov	r4, r1
   18bd4:	ldr	r0, [r0, #136]	; 0x88
   18bd8:	ldr	r1, [r5, #140]	; 0x8c
   18bdc:	cmp	r4, #0
   18be0:	sub	r0, r1, r0
   18be4:	mov	r1, #0
   18be8:	strne	r0, [r4]
   18bec:	ldrh	r2, [r5, #128]	; 0x80
   18bf0:	str	r1, [sp, #4]
   18bf4:	add	r0, r0, r2
   18bf8:	cmp	r2, #4
   18bfc:	mov	r1, r2
   18c00:	rsb	r2, r2, #0
   18c04:	sub	r0, r0, #1
   18c08:	movls	r1, #4
   18c0c:	and	r7, r0, r2
   18c10:	add	r0, sp, #4
   18c14:	mov	r2, r7
   18c18:	bl	12984 <posix_memalign@plt>
   18c1c:	ldr	r6, [sp, #4]
   18c20:	cmp	r0, #0
   18c24:	cmpne	r6, #0
   18c28:	bne	18c64 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   18c2c:	cmp	r6, #0
   18c30:	beq	18c6c <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   18c34:	ldr	r0, [r5, #184]	; 0xb8
   18c38:	cmp	r0, #0
   18c3c:	beq	18c64 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   18c40:	add	r0, r5, #188	; 0xbc
   18c44:	mov	r1, r6
   18c48:	mov	r2, r7
   18c4c:	bl	191fc <flatcc_emitter_copy_buffer@@Base>
   18c50:	cmp	r0, #0
   18c54:	beq	18c84 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   18c58:	mov	r0, r6
   18c5c:	sub	sp, fp, #16
   18c60:	pop	{r4, r5, r6, r7, fp, pc}
   18c64:	mov	r0, r6
   18c68:	bl	128f4 <free@plt>
   18c6c:	mov	r6, #0
   18c70:	cmp	r4, #0
   18c74:	strne	r6, [r4]
   18c78:	mov	r0, r6
   18c7c:	sub	sp, fp, #16
   18c80:	pop	{r4, r5, r6, r7, fp, pc}
   18c84:	movw	r0, #59391	; 0xe7ff
   18c88:	movw	r1, #58795	; 0xe5ab
   18c8c:	movw	r3, #62723	; 0xf503
   18c90:	movw	r2, #1926	; 0x786
   18c94:	movt	r0, #1
   18c98:	movt	r1, #1
   18c9c:	movt	r3, #1
   18ca0:	bl	129c0 <__assert_fail@plt>

00018ca4 <flatcc_builder_aligned_alloc@@Base>:
   18ca4:	push	{fp, lr}
   18ca8:	mov	fp, sp
   18cac:	sub	sp, sp, #8
   18cb0:	mov	r2, r1
   18cb4:	mov	r1, r0
   18cb8:	mov	r0, #0
   18cbc:	cmp	r1, #4
   18cc0:	str	r0, [sp, #4]
   18cc4:	add	r0, sp, #4
   18cc8:	movls	r1, #4
   18ccc:	bl	12984 <posix_memalign@plt>
   18cd0:	mov	r1, r0
   18cd4:	ldr	r0, [sp, #4]
   18cd8:	cmp	r1, #0
   18cdc:	cmpne	r0, #0
   18ce0:	bne	18cec <flatcc_builder_aligned_alloc@@Base+0x48>
   18ce4:	mov	sp, fp
   18ce8:	pop	{fp, pc}
   18cec:	bl	128f4 <free@plt>
   18cf0:	mov	r0, #0
   18cf4:	str	r0, [sp, #4]
   18cf8:	mov	sp, fp
   18cfc:	pop	{fp, pc}

00018d00 <flatcc_builder_aligned_free@@Base>:
   18d00:	b	128f4 <free@plt>

00018d04 <flatcc_builder_get_emit_context@@Base>:
   18d04:	ldr	r0, [r0, #36]	; 0x24
   18d08:	bx	lr

00018d0c <flatcc_emitter_recycle_page@@Base>:
   18d0c:	ldr	r3, [r0]
   18d10:	mov	r2, r0
   18d14:	mvn	r0, #0
   18d18:	cmp	r3, r1
   18d1c:	beq	18d5c <flatcc_emitter_recycle_page@@Base+0x50>
   18d20:	ldr	r2, [r2, #4]
   18d24:	cmp	r2, r1
   18d28:	bxeq	lr
   18d2c:	ldr	r0, [r1, #2944]	; 0xb80
   18d30:	ldr	r2, [r1, #2948]	; 0xb84
   18d34:	str	r2, [r0, #2948]	; 0xb84
   18d38:	ldr	r2, [r1, #2948]	; 0xb84
   18d3c:	str	r0, [r2, #2944]	; 0xb80
   18d40:	ldr	r0, [r3, #2948]	; 0xb84
   18d44:	str	r3, [r1, #2944]	; 0xb80
   18d48:	str	r0, [r1, #2948]	; 0xb84
   18d4c:	str	r1, [r0, #2944]	; 0xb80
   18d50:	ldr	r0, [r1, #2944]	; 0xb80
   18d54:	str	r1, [r0, #2948]	; 0xb84
   18d58:	mov	r0, #0
   18d5c:	bx	lr

00018d60 <flatcc_emitter_reset@@Base>:
   18d60:	push	{r4, sl, fp, lr}
   18d64:	add	fp, sp, #8
   18d68:	ldr	r1, [r0]
   18d6c:	cmp	r1, #0
   18d70:	beq	18e28 <flatcc_emitter_reset@@Base+0xc8>
   18d74:	mov	r4, r0
   18d78:	add	r2, r1, #1472	; 0x5c0
   18d7c:	mov	r0, #1472	; 0x5c0
   18d80:	mov	r3, #0
   18d84:	stmib	r4, {r1, r2}
   18d88:	str	r0, [r4, #12]
   18d8c:	str	r2, [r4, #16]
   18d90:	str	r0, [r4, #20]
   18d94:	movw	r0, #64064	; 0xfa40
   18d98:	movt	r0, #65535	; 0xffff
   18d9c:	str	r0, [r1, #2952]	; 0xb88
   18da0:	ldr	r2, [r4, #32]
   18da4:	ldr	r0, [r4, #24]
   18da8:	cmp	r2, #0
   18dac:	moveq	r2, r0
   18db0:	streq	r0, [r4, #32]
   18db4:	str	r3, [r4, #24]
   18db8:	add	r2, r2, r2, lsl #1
   18dbc:	lsr	r2, r2, #2
   18dc0:	add	r0, r2, r0, lsr #2
   18dc4:	str	r0, [r4, #32]
   18dc8:	ldr	r2, [r4, #28]
   18dcc:	cmp	r2, r0, lsl #1
   18dd0:	bls	18e28 <flatcc_emitter_reset@@Base+0xc8>
   18dd4:	mov	r2, r1
   18dd8:	ldr	r0, [r2, #2944]!	; 0xb80
   18ddc:	cmp	r0, r1
   18de0:	popeq	{r4, sl, fp, pc}
   18de4:	ldr	r3, [r0, #2944]	; 0xb80
   18de8:	str	r3, [r2]
   18dec:	ldr	r2, [r0, #2944]	; 0xb80
   18df0:	str	r1, [r2, #2948]	; 0xb84
   18df4:	bl	128f4 <free@plt>
   18df8:	ldr	r0, [r4, #28]
   18dfc:	ldr	r1, [r4, #32]
   18e00:	sub	r0, r0, #2944	; 0xb80
   18e04:	cmp	r0, r1, lsl #1
   18e08:	str	r0, [r4, #28]
   18e0c:	bls	18e28 <flatcc_emitter_reset@@Base+0xc8>
   18e10:	ldr	r1, [r4, #4]
   18e14:	ldr	r3, [r4]
   18e18:	mov	r2, r1
   18e1c:	ldr	r0, [r2, #2944]!	; 0xb80
   18e20:	cmp	r0, r3
   18e24:	bne	18de4 <flatcc_emitter_reset@@Base+0x84>
   18e28:	pop	{r4, sl, fp, pc}

00018e2c <flatcc_emitter_clear@@Base>:
   18e2c:	push	{r4, r5, r6, sl, fp, lr}
   18e30:	add	fp, sp, #16
   18e34:	ldr	r5, [r0]
   18e38:	cmp	r5, #0
   18e3c:	beq	18e94 <flatcc_emitter_clear@@Base+0x68>
   18e40:	mov	r4, r0
   18e44:	ldr	r0, [r5, #2948]	; 0xb84
   18e48:	mov	r6, #0
   18e4c:	str	r6, [r0, #2944]	; 0xb80
   18e50:	ldr	r0, [r5, #2944]	; 0xb80
   18e54:	cmp	r0, #0
   18e58:	beq	18e74 <flatcc_emitter_clear@@Base+0x48>
   18e5c:	mov	r5, r0
   18e60:	ldr	r0, [r0, #2948]	; 0xb84
   18e64:	bl	128f4 <free@plt>
   18e68:	ldr	r0, [r5, #2944]	; 0xb80
   18e6c:	cmp	r0, #0
   18e70:	bne	18e5c <flatcc_emitter_clear@@Base+0x30>
   18e74:	mov	r0, r5
   18e78:	bl	128f4 <free@plt>
   18e7c:	vmov.i32	q8, #0	; 0x00000000
   18e80:	add	r0, r4, #16
   18e84:	vst1.32	{d16-d17}, [r0]
   18e88:	mov	r0, #32
   18e8c:	vst1.32	{d16-d17}, [r4], r0
   18e90:	str	r6, [r4]
   18e94:	pop	{r4, r5, r6, sl, fp, pc}

00018e98 <flatcc_emitter@@Base>:
   18e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e9c:	add	fp, sp, #28
   18ea0:	sub	sp, sp, #4
   18ea4:	mov	r6, r0
   18ea8:	mov	r7, r1
   18eac:	ldr	r0, [r0, #24]
   18eb0:	ldr	r1, [fp, #8]
   18eb4:	mov	r4, r2
   18eb8:	cmn	r3, #1
   18ebc:	mov	r9, r6
   18ec0:	add	r0, r0, r1
   18ec4:	str	r0, [r6, #24]
   18ec8:	ble	19030 <flatcc_emitter@@Base+0x198>
   18ecc:	ldr	r0, [r9, #20]!
   18ed0:	cmp	r0, r1
   18ed4:	bcs	19190 <flatcc_emitter@@Base+0x2f8>
   18ed8:	mov	r8, #0
   18edc:	cmp	r4, #0
   18ee0:	beq	191f0 <flatcc_emitter@@Base+0x358>
   18ee4:	movw	sl, #64064	; 0xfa40
   18ee8:	movt	sl, #65535	; 0xffff
   18eec:	ldr	r8, [r7, #4]
   18ef0:	cmp	r8, #0
   18ef4:	beq	19014 <flatcc_emitter@@Base+0x17c>
   18ef8:	ldr	r9, [r7]
   18efc:	cmp	r8, r0
   18f00:	mov	r5, r8
   18f04:	bls	18f10 <flatcc_emitter@@Base+0x78>
   18f08:	b	18f50 <flatcc_emitter@@Base+0xb8>
   18f0c:	mov	r5, r8
   18f10:	ldr	r0, [r6, #16]
   18f14:	mov	r1, r9
   18f18:	mov	r2, r5
   18f1c:	bl	12900 <memcpy@plt>
   18f20:	ldr	r0, [r6, #16]
   18f24:	ldr	r1, [r6, #20]
   18f28:	add	r9, r9, r5
   18f2c:	subs	r8, r8, r5
   18f30:	add	r2, r0, r5
   18f34:	sub	r0, r1, r5
   18f38:	str	r2, [r6, #16]
   18f3c:	str	r0, [r6, #20]
   18f40:	beq	19014 <flatcc_emitter@@Base+0x17c>
   18f44:	cmp	r8, r0
   18f48:	mov	r5, r8
   18f4c:	bls	18f10 <flatcc_emitter@@Base+0x78>
   18f50:	mov	r5, r0
   18f54:	cmp	r5, #0
   18f58:	beq	18fa4 <flatcc_emitter@@Base+0x10c>
   18f5c:	b	18f10 <flatcc_emitter@@Base+0x78>
   18f60:	ldr	r1, [r6]
   18f64:	str	r1, [r0, #2944]	; 0xb80
   18f68:	str	r5, [r0, #2948]	; 0xb84
   18f6c:	str	r0, [r1, #2948]	; 0xb84
   18f70:	str	r0, [r5, #2944]	; 0xb80
   18f74:	mov	r5, #2944	; 0xb80
   18f78:	str	r0, [r6, #4]
   18f7c:	str	r0, [r6, #16]
   18f80:	str	r5, [r6, #20]
   18f84:	ldr	r1, [r0, #2948]	; 0xb84
   18f88:	ldr	r1, [r1, #2952]	; 0xb88
   18f8c:	add	r1, r1, #2944	; 0xb80
   18f90:	str	r1, [r0, #2952]	; 0xb88
   18f94:	cmp	r8, r5
   18f98:	bls	18f0c <flatcc_emitter@@Base+0x74>
   18f9c:	cmp	r5, #0
   18fa0:	bne	18f10 <flatcc_emitter@@Base+0x78>
   18fa4:	ldr	r5, [r6, #4]
   18fa8:	cmp	r5, #0
   18fac:	beq	18fc0 <flatcc_emitter@@Base+0x128>
   18fb0:	ldr	r0, [r5, #2944]	; 0xb80
   18fb4:	ldr	r1, [r6]
   18fb8:	cmp	r0, r1
   18fbc:	bne	18f74 <flatcc_emitter@@Base+0xdc>
   18fc0:	movw	r0, #2956	; 0xb8c
   18fc4:	bl	1293c <malloc@plt>
   18fc8:	cmp	r0, #0
   18fcc:	beq	191a0 <flatcc_emitter@@Base+0x308>
   18fd0:	ldr	r1, [r6, #28]
   18fd4:	cmp	r5, #0
   18fd8:	add	r1, r1, #2944	; 0xb80
   18fdc:	str	r1, [r6, #28]
   18fe0:	bne	18f60 <flatcc_emitter@@Base+0xc8>
   18fe4:	add	r1, r0, #1472	; 0x5c0
   18fe8:	mov	r5, #1472	; 0x5c0
   18fec:	str	r0, [r6]
   18ff0:	stmib	r6, {r0, r1, r5}
   18ff4:	str	r1, [r6, #16]
   18ff8:	str	r5, [r6, #20]
   18ffc:	str	r0, [r0, #2944]	; 0xb80
   19000:	str	r0, [r0, #2948]	; 0xb84
   19004:	str	sl, [r0, #2952]	; 0xb88
   19008:	cmp	r8, r5
   1900c:	bhi	18f9c <flatcc_emitter@@Base+0x104>
   19010:	b	18f0c <flatcc_emitter@@Base+0x74>
   19014:	subs	r4, r4, #1
   19018:	add	r7, r7, #8
   1901c:	bne	18eec <flatcc_emitter@@Base+0x54>
   19020:	mov	r8, #0
   19024:	mov	r0, r8
   19028:	sub	sp, fp, #28
   1902c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19030:	ldr	r0, [r9, #12]!
   19034:	cmp	r0, r1
   19038:	bcs	191b0 <flatcc_emitter@@Base+0x318>
   1903c:	mov	r8, #0
   19040:	cmp	r4, #0
   19044:	beq	191f0 <flatcc_emitter@@Base+0x358>
   19048:	add	r0, r7, r4, lsl #3
   1904c:	ldr	sl, [r0, #-4]
   19050:	sub	r1, r0, #8
   19054:	str	r1, [sp]
   19058:	cmp	sl, #0
   1905c:	beq	19180 <flatcc_emitter@@Base+0x2e8>
   19060:	ldr	r0, [sp]
   19064:	ldr	r0, [r0]
   19068:	add	r7, r0, sl
   1906c:	ldr	r1, [r9]
   19070:	cmp	sl, r1
   19074:	bhi	190b4 <flatcc_emitter@@Base+0x21c>
   19078:	b	19150 <flatcc_emitter@@Base+0x2b8>
   1907c:	ldr	r1, [r5, #2952]	; 0xb88
   19080:	sub	r1, r1, #2944	; 0xb80
   19084:	str	r1, [r0, #2952]	; 0xb88
   19088:	mov	r1, #2944	; 0xb80
   1908c:	add	r2, r0, #2944	; 0xb80
   19090:	str	r0, [r6]
   19094:	str	r2, [r6, #8]
   19098:	str	r1, [r6, #12]
   1909c:	ldr	r2, [r0, #2944]	; 0xb80
   190a0:	ldr	r2, [r2, #2952]	; 0xb88
   190a4:	sub	r2, r2, #2944	; 0xb80
   190a8:	str	r2, [r0, #2952]	; 0xb88
   190ac:	cmp	sl, r1
   190b0:	bls	19150 <flatcc_emitter@@Base+0x2b8>
   190b4:	cmp	r1, #0
   190b8:	mov	r5, r1
   190bc:	bne	19154 <flatcc_emitter@@Base+0x2bc>
   190c0:	ldr	r5, [r6]
   190c4:	cmp	r5, #0
   190c8:	beq	190dc <flatcc_emitter@@Base+0x244>
   190cc:	ldr	r0, [r5, #2948]	; 0xb84
   190d0:	ldr	r1, [r6, #4]
   190d4:	cmp	r0, r1
   190d8:	bne	1907c <flatcc_emitter@@Base+0x1e4>
   190dc:	movw	r0, #2956	; 0xb8c
   190e0:	bl	1293c <malloc@plt>
   190e4:	cmp	r0, #0
   190e8:	beq	191a0 <flatcc_emitter@@Base+0x308>
   190ec:	ldr	r1, [r6, #28]
   190f0:	cmp	r5, #0
   190f4:	add	r1, r1, #2944	; 0xb80
   190f8:	str	r1, [r6, #28]
   190fc:	beq	19118 <flatcc_emitter@@Base+0x280>
   19100:	ldr	r1, [r6, #4]
   19104:	str	r5, [r0, #2944]	; 0xb80
   19108:	str	r1, [r0, #2948]	; 0xb84
   1910c:	str	r0, [r5, #2948]	; 0xb84
   19110:	str	r0, [r1, #2944]	; 0xb80
   19114:	b	19088 <flatcc_emitter@@Base+0x1f0>
   19118:	add	r2, r0, #1472	; 0x5c0
   1911c:	mov	r1, #1472	; 0x5c0
   19120:	str	r0, [r6]
   19124:	stmib	r6, {r0, r2}
   19128:	str	r1, [r6, #12]
   1912c:	str	r2, [r6, #16]
   19130:	movw	r2, #64064	; 0xfa40
   19134:	str	r1, [r6, #20]
   19138:	str	r0, [r0, #2944]	; 0xb80
   1913c:	str	r0, [r0, #2948]	; 0xb84
   19140:	movt	r2, #65535	; 0xffff
   19144:	str	r2, [r0, #2952]	; 0xb88
   19148:	cmp	sl, r1
   1914c:	bhi	190b4 <flatcc_emitter@@Base+0x21c>
   19150:	mov	r5, sl
   19154:	sub	r0, r1, r5
   19158:	sub	r7, r7, r5
   1915c:	mov	r2, r5
   19160:	str	r0, [r6, #12]
   19164:	mov	r1, r7
   19168:	ldr	r0, [r6, #8]
   1916c:	sub	r0, r0, r5
   19170:	str	r0, [r6, #8]
   19174:	bl	12900 <memcpy@plt>
   19178:	subs	sl, sl, r5
   1917c:	bne	1906c <flatcc_emitter@@Base+0x1d4>
   19180:	ldr	r0, [sp]
   19184:	subs	r4, r4, #1
   19188:	bne	1904c <flatcc_emitter@@Base+0x1b4>
   1918c:	b	191f0 <flatcc_emitter@@Base+0x358>
   19190:	ldr	r5, [r6, #16]
   19194:	add	r2, r5, r1
   19198:	str	r2, [r6, #16]
   1919c:	b	191bc <flatcc_emitter@@Base+0x324>
   191a0:	mvn	r8, #0
   191a4:	mov	r0, r8
   191a8:	sub	sp, fp, #28
   191ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191b0:	ldr	r2, [r6, #8]
   191b4:	sub	r5, r2, r1
   191b8:	str	r5, [r6, #8]
   191bc:	sub	r0, r0, r1
   191c0:	mov	r8, #0
   191c4:	cmp	r4, #0
   191c8:	str	r0, [r9]
   191cc:	beq	191f0 <flatcc_emitter@@Base+0x358>
   191d0:	ldm	r7, {r1, r2}
   191d4:	mov	r0, r5
   191d8:	bl	12900 <memcpy@plt>
   191dc:	ldr	r0, [r7, #4]
   191e0:	add	r7, r7, #8
   191e4:	subs	r4, r4, #1
   191e8:	add	r5, r5, r0
   191ec:	bne	191d0 <flatcc_emitter@@Base+0x338>
   191f0:	mov	r0, r8
   191f4:	sub	sp, fp, #28
   191f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000191fc <flatcc_emitter_copy_buffer@@Base>:
   191fc:	push	{r4, r5, r6, sl, fp, lr}
   19200:	add	fp, sp, #16
   19204:	mov	r3, r2
   19208:	ldr	r2, [r0, #24]
   1920c:	mov	r5, #0
   19210:	cmp	r2, r3
   19214:	bhi	1929c <flatcc_emitter_copy_buffer@@Base+0xa0>
   19218:	mov	r4, r0
   1921c:	ldr	r0, [r0]
   19220:	cmp	r0, #0
   19224:	beq	1929c <flatcc_emitter_copy_buffer@@Base+0xa0>
   19228:	mov	r6, r1
   1922c:	ldr	r1, [r4, #4]
   19230:	cmp	r0, r1
   19234:	beq	192a4 <flatcc_emitter_copy_buffer@@Base+0xa8>
   19238:	ldr	r0, [r4, #12]
   1923c:	ldr	r1, [r4, #8]
   19240:	rsb	r5, r0, #2944	; 0xb80
   19244:	mov	r0, r6
   19248:	mov	r2, r5
   1924c:	bl	12900 <memcpy@plt>
   19250:	ldm	r4, {r0, r1}
   19254:	add	r5, r6, r5
   19258:	ldr	r6, [r0, #2944]	; 0xb80
   1925c:	cmp	r6, r1
   19260:	beq	19288 <flatcc_emitter_copy_buffer@@Base+0x8c>
   19264:	mov	r0, r5
   19268:	mov	r1, r6
   1926c:	mov	r2, #2944	; 0xb80
   19270:	bl	12900 <memcpy@plt>
   19274:	ldr	r6, [r6, #2944]	; 0xb80
   19278:	ldr	r0, [r4, #4]
   1927c:	add	r5, r5, #2944	; 0xb80
   19280:	cmp	r6, r0
   19284:	bne	19264 <flatcc_emitter_copy_buffer@@Base+0x68>
   19288:	ldr	r0, [r4, #20]
   1928c:	mov	r1, r6
   19290:	rsb	r2, r0, #2944	; 0xb80
   19294:	mov	r0, r5
   19298:	bl	12900 <memcpy@plt>
   1929c:	mov	r0, r5
   192a0:	pop	{r4, r5, r6, sl, fp, pc}
   192a4:	ldr	r1, [r4, #8]
   192a8:	mov	r0, r6
   192ac:	bl	12900 <memcpy@plt>
   192b0:	mov	r0, r6
   192b4:	pop	{r4, r5, r6, sl, fp, pc}

000192b8 <grisu3_diy_fp_encode_double@@Base>:
   192b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192bc:	add	fp, sp, #28
   192c0:	sub	sp, sp, #12
   192c4:	ldr	lr, [fp, #8]
   192c8:	orr	r7, r0, r1
   192cc:	cmp	lr, #0
   192d0:	movwne	lr, #1
   192d4:	cmp	r7, #0
   192d8:	beq	196c4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   192dc:	mov	ip, #0
   192e0:	cmp	ip, r1, lsr #22
   192e4:	bne	19304 <grisu3_diy_fp_encode_double@@Base+0x4c>
   192e8:	mov	ip, #0
   192ec:	lsl	r1, r1, #10
   192f0:	sub	ip, ip, #10
   192f4:	orr	r1, r1, r0, lsr #22
   192f8:	lsl	r0, r0, #10
   192fc:	cmp	r1, #4194304	; 0x400000
   19300:	bcc	192ec <grisu3_diy_fp_encode_double@@Base+0x34>
   19304:	sub	r5, r2, r3
   19308:	mvn	r2, #0
   1930c:	cmp	r1, #0
   19310:	bmi	194c4 <grisu3_diy_fp_encode_double@@Base+0x20c>
   19314:	lsl	r1, r1, #1
   19318:	lsl	r4, r0, #1
   1931c:	sub	ip, ip, #1
   19320:	orr	r1, r1, r0, lsr #31
   19324:	subs	r0, r2, r0, lsl #1
   19328:	sbcs	r0, r2, r1
   1932c:	mov	r0, r4
   19330:	blt	19314 <grisu3_diy_fp_encode_double@@Base+0x5c>
   19334:	cmn	r5, #348	; 0x15c
   19338:	blt	194d0 <grisu3_diy_fp_encode_double@@Base+0x218>
   1933c:	cmp	r5, #348	; 0x15c
   19340:	bge	196e4 <grisu3_diy_fp_encode_double@@Base+0x42c>
   19344:	add	r0, r5, #348	; 0x15c
   19348:	movw	r9, #63576	; 0xf858
   1934c:	asr	r6, r0, #31
   19350:	movt	r9, #1
   19354:	add	r0, r0, r6, lsr #29
   19358:	mvn	r6, #14
   1935c:	and	r6, r6, r0, lsl #1
   19360:	ldr	r8, [r9, r6]!
   19364:	ldrsh	r7, [r9, #10]
   19368:	cmp	r5, r7
   1936c:	blt	19704 <grisu3_diy_fp_encode_double@@Base+0x44c>
   19370:	add	r6, r7, #8
   19374:	cmp	r6, r5
   19378:	ble	19724 <grisu3_diy_fp_encode_double@@Base+0x46c>
   1937c:	lsl	r6, lr, #2
   19380:	rsb	r0, ip, #0
   19384:	cmp	r5, r7
   19388:	lsl	sl, r6, r0
   1938c:	beq	19414 <grisu3_diy_fp_encode_double@@Base+0x15c>
   19390:	mvn	r0, r7
   19394:	str	sl, [sp, #4]
   19398:	str	r3, [sp, #8]
   1939c:	add	r5, r5, r0
   193a0:	cmp	r5, #7
   193a4:	bcs	19744 <grisu3_diy_fp_encode_double@@Base+0x48c>
   193a8:	movw	r0, #63464	; 0xf7e8
   193ac:	movt	r0, #1
   193b0:	ldr	r6, [r0, r5, lsl #4]!
   193b4:	ldr	lr, [r0, #4]
   193b8:	ldr	r0, [r0, #8]
   193bc:	umull	sl, r7, r6, r1
   193c0:	str	r0, [sp]
   193c4:	umull	r3, r0, lr, r4
   193c8:	umaal	r7, r0, lr, r1
   193cc:	umull	r1, r6, r6, r4
   193d0:	mov	r1, #0
   193d4:	adds	r6, sl, r6
   193d8:	ldr	sl, [sp, #4]
   193dc:	adc	r1, r1, #0
   193e0:	adds	r3, r6, r3
   193e4:	adc	r1, r1, #0
   193e8:	adds	r3, r3, #-2147483648	; 0x80000000
   193ec:	adcs	r4, r7, r1
   193f0:	adc	r1, r0, #0
   193f4:	ldr	r0, [sp, #8]
   193f8:	add	r0, r0, r5
   193fc:	add	r0, r0, #1
   19400:	cmp	r0, #19
   19404:	ldr	r0, [sp]
   19408:	addgt	sl, sl, #4
   1940c:	add	r0, ip, r0
   19410:	add	ip, r0, #64	; 0x40
   19414:	ldr	r0, [r9, #4]
   19418:	umull	r3, r7, r4, r8
   1941c:	umull	r3, r5, r1, r8
   19420:	mov	lr, #0
   19424:	umull	r4, r6, r4, r0
   19428:	adds	r3, r3, r7
   1942c:	adc	r7, lr, #0
   19430:	umaal	r5, r6, r1, r0
   19434:	mov	r1, #9
   19438:	adds	r3, r3, r4
   1943c:	adc	r4, r7, #0
   19440:	adds	r0, r3, #-2147483648	; 0x80000000
   19444:	adcs	r4, r5, r4
   19448:	adc	r3, r6, #0
   1944c:	cmp	sl, #0
   19450:	orr	r0, r4, r3
   19454:	movweq	r1, #8
   19458:	cmp	r0, #0
   1945c:	beq	196c4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   19460:	ldrsh	r0, [r9, #8]
   19464:	cmp	lr, r3, lsr #22
   19468:	add	r0, r0, ip
   1946c:	add	r5, r0, #64	; 0x40
   19470:	mov	r0, r5
   19474:	bne	19490 <grisu3_diy_fp_encode_double@@Base+0x1d8>
   19478:	lsl	r3, r3, #10
   1947c:	sub	r0, r0, #10
   19480:	orr	r3, r3, r4, lsr #22
   19484:	lsl	r4, r4, #10
   19488:	cmp	r3, #4194304	; 0x400000
   1948c:	bcc	19478 <grisu3_diy_fp_encode_double@@Base+0x1c0>
   19490:	add	r7, r1, sl
   19494:	subs	r1, r2, r4
   19498:	sbcs	r1, r2, r3
   1949c:	bge	194f0 <grisu3_diy_fp_encode_double@@Base+0x238>
   194a0:	lsl	r1, r3, #1
   194a4:	subs	r6, r2, r4, lsl #1
   194a8:	sub	r0, r0, #1
   194ac:	orr	r3, r1, r4, lsr #31
   194b0:	lsl	r1, r4, #1
   194b4:	mov	r4, r1
   194b8:	sbcs	r6, r2, r3
   194bc:	blt	194a0 <grisu3_diy_fp_encode_double@@Base+0x1e8>
   194c0:	b	194f4 <grisu3_diy_fp_encode_double@@Base+0x23c>
   194c4:	mov	r4, r0
   194c8:	cmn	r5, #348	; 0x15c
   194cc:	bge	1933c <grisu3_diy_fp_encode_double@@Base+0x84>
   194d0:	movw	r0, #1611	; 0x64b
   194d4:	movw	r1, #112	; 0x70
   194d8:	movw	r3, #1642	; 0x66a
   194dc:	mov	r2, #80	; 0x50
   194e0:	movt	r0, #2
   194e4:	movt	r1, #2
   194e8:	movt	r3, #2
   194ec:	bl	129c0 <__assert_fail@plt>
   194f0:	mov	r1, r4
   194f4:	movw	lr, #64462	; 0xfbce
   194f8:	sub	r2, r5, r0
   194fc:	mov	r5, #0
   19500:	movt	lr, #65535	; 0xffff
   19504:	lsl	ip, r7, r2
   19508:	add	r2, r0, #64	; 0x40
   1950c:	add	r4, lr, #63	; 0x3f
   19510:	cmp	r2, r4
   19514:	bgt	19564 <grisu3_diy_fp_encode_double@@Base+0x2ac>
   19518:	mvn	r4, #1072	; 0x430
   1951c:	mov	r5, #64	; 0x40
   19520:	cmp	r2, r4
   19524:	blt	19534 <grisu3_diy_fp_encode_double@@Base+0x27c>
   19528:	sub	r5, lr, r0
   1952c:	cmp	r5, #61	; 0x3d
   19530:	blt	19564 <grisu3_diy_fp_encode_double@@Base+0x2ac>
   19534:	sub	r2, r5, #62	; 0x3e
   19538:	mov	r4, #9
   1953c:	add	ip, r4, ip, asr r2
   19540:	lsr	r1, r1, r2
   19544:	rsb	r4, r5, #94	; 0x5e
   19548:	add	r0, r2, r0
   1954c:	orr	r1, r1, r3, lsl r4
   19550:	subs	r4, r5, #94	; 0x5e
   19554:	mov	r5, #62	; 0x3e
   19558:	lsrpl	r1, r3, r4
   1955c:	lsr	r3, r3, r2
   19560:	movwpl	r3, #0
   19564:	lsr	r2, r1, r5
   19568:	rsb	r4, r5, #32
   1956c:	lsr	r6, r3, r5
   19570:	add	r0, r0, r5
   19574:	orr	r2, r2, r3, lsl r4
   19578:	subs	r4, r5, #32
   1957c:	lsrpl	r2, r3, r4
   19580:	sub	r3, r5, #1
   19584:	mov	r4, #1
   19588:	movwpl	r6, #0
   1958c:	lsl	r4, r4, r3
   19590:	subs	r3, r5, #33	; 0x21
   19594:	movwpl	r4, #0
   19598:	add	r3, ip, r4, lsl #3
   1959c:	cmp	r5, r3
   195a0:	blt	195c0 <grisu3_diy_fp_encode_double@@Base+0x308>
   195a4:	adds	r2, r2, #1
   195a8:	adc	r6, r6, #0
   195ac:	tst	r6, #2097152	; 0x200000
   195b0:	beq	195c0 <grisu3_diy_fp_encode_double@@Base+0x308>
   195b4:	lsrs	r6, r6, #1
   195b8:	rrx	r2, r2
   195bc:	add	r0, r0, #1
   195c0:	and	r1, r4, r1
   195c4:	cmp	r6, #2097152	; 0x200000
   195c8:	bcc	195ec <grisu3_diy_fp_encode_double@@Base+0x334>
   195cc:	mov	r5, #0
   195d0:	lsrs	r7, r6, #1
   195d4:	rrx	r2, r2
   195d8:	cmp	r5, r6, lsr #22
   195dc:	add	r0, r0, #1
   195e0:	mov	r6, r7
   195e4:	bne	195d0 <grisu3_diy_fp_encode_double@@Base+0x318>
   195e8:	b	195f0 <grisu3_diy_fp_encode_double@@Base+0x338>
   195ec:	mov	r7, r6
   195f0:	ldr	r8, [fp, #12]
   195f4:	vmov.i32	d16, #0	; 0x00000000
   195f8:	lsl	r9, r4, #3
   195fc:	lsl	r1, r1, #3
   19600:	cmp	r0, lr
   19604:	blt	19698 <grisu3_diy_fp_encode_double@@Base+0x3e0>
   19608:	and	r4, r7, #1048576	; 0x100000
   1960c:	mov	r5, #1
   19610:	cmp	r0, lr
   19614:	eor	r5, r5, r4, lsr #20
   19618:	beq	1966c <grisu3_diy_fp_encode_double@@Base+0x3b4>
   1961c:	cmp	r4, #0
   19620:	bne	1966c <grisu3_diy_fp_encode_double@@Base+0x3b4>
   19624:	mov	r4, #1
   19628:	lsl	r5, r7, #1
   1962c:	sub	r0, r0, #1
   19630:	orr	r6, r5, r2, lsr #31
   19634:	ands	r5, r7, #524288	; 0x80000
   19638:	lsl	r2, r2, #1
   1963c:	eor	r5, r4, r5, lsr #19
   19640:	bne	19650 <grisu3_diy_fp_encode_double@@Base+0x398>
   19644:	cmp	r0, lr
   19648:	mov	r7, r6
   1964c:	bgt	19628 <grisu3_diy_fp_encode_double@@Base+0x370>
   19650:	cmp	r0, lr
   19654:	bne	19678 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   19658:	cmp	r5, #0
   1965c:	mov	r7, #0
   19660:	mov	r5, #0
   19664:	bne	19688 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   19668:	b	19678 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   1966c:	mov	r6, r7
   19670:	cmp	r0, lr
   19674:	beq	19658 <grisu3_diy_fp_encode_double@@Base+0x3a0>
   19678:	movw	r7, #1075	; 0x433
   1967c:	add	r0, r0, r7
   19680:	mov	r7, #0
   19684:	lsl	r5, r0, #20
   19688:	bfc	r6, #20, #12
   1968c:	orr	r0, r7, r2
   19690:	orr	r2, r5, r6
   19694:	vmov	d16, r0, r2
   19698:	cmp	r1, r3
   1969c:	sub	r3, r9, ip
   196a0:	mov	r2, #0
   196a4:	mov	r0, #0
   196a8:	vstr	d16, [r8]
   196ac:	movwge	r2, #1
   196b0:	cmp	r3, r1
   196b4:	movwge	r0, #1
   196b8:	orr	r0, r2, r0
   196bc:	sub	sp, fp, #28
   196c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196c4:	movw	r0, #1459	; 0x5b3
   196c8:	movw	r1, #1468	; 0x5bc
   196cc:	movw	r3, #1554	; 0x612
   196d0:	mov	r2, #260	; 0x104
   196d4:	movt	r0, #2
   196d8:	movt	r1, #2
   196dc:	movt	r3, #2
   196e0:	bl	129c0 <__assert_fail@plt>
   196e4:	movw	r0, #1699	; 0x6a3
   196e8:	movw	r1, #112	; 0x70
   196ec:	movw	r3, #1642	; 0x66a
   196f0:	mov	r2, #81	; 0x51
   196f4:	movt	r0, #2
   196f8:	movt	r1, #2
   196fc:	movt	r3, #2
   19700:	bl	129c0 <__assert_fail@plt>
   19704:	movw	r0, #1742	; 0x6ce
   19708:	movw	r1, #112	; 0x70
   1970c:	movw	r3, #1642	; 0x66a
   19710:	mov	r2, #88	; 0x58
   19714:	movt	r0, #2
   19718:	movt	r1, #2
   1971c:	movt	r3, #2
   19720:	bl	129c0 <__assert_fail@plt>
   19724:	movw	r0, #1757	; 0x6dd
   19728:	movw	r1, #112	; 0x70
   1972c:	movw	r3, #1642	; 0x66a
   19730:	mov	r2, #89	; 0x59
   19734:	movt	r0, #2
   19738:	movt	r1, #2
   1973c:	movt	r3, #2
   19740:	bl	129c0 <__assert_fail@plt>
   19744:	movw	r0, #84	; 0x54
   19748:	movw	r1, #112	; 0x70
   1974c:	movw	r3, #199	; 0xc7
   19750:	mov	r2, #185	; 0xb9
   19754:	movt	r0, #2
   19758:	movt	r1, #2
   1975c:	movt	r3, #2
   19760:	bl	129c0 <__assert_fail@plt>

00019764 <flatcc_json_parser_error_string@@Base>:
   19764:	cmp	r0, #34	; 0x22
   19768:	movwhi	r0, #909	; 0x38d
   1976c:	movthi	r0, #2
   19770:	bxhi	lr
   19774:	movw	r1, #65480	; 0xffc8
   19778:	movt	r1, #1
   1977c:	ldr	r0, [r1, r0, lsl #2]
   19780:	bx	lr

00019784 <flatcc_json_parser_set_error@@Base>:
   19784:	mov	ip, r2
   19788:	ldr	r2, [r0, #24]
   1978c:	cmp	r2, #0
   19790:	beq	1979c <flatcc_json_parser_set_error@@Base+0x18>
   19794:	mov	r0, ip
   19798:	bx	lr
   1979c:	str	r1, [r0, #36]	; 0x24
   197a0:	ldr	r2, [r0, #4]
   197a4:	sub	r1, r1, r2
   197a8:	add	r1, r1, #1
   197ac:	str	r1, [r0, #20]
   197b0:	str	r3, [r0, #24]
   197b4:	mov	r0, ip
   197b8:	bx	lr

000197bc <flatcc_json_parser_string_part@@Base>:
   197bc:	cmp	r1, r2
   197c0:	beq	197ec <flatcc_json_parser_string_part@@Base+0x30>
   197c4:	ldrb	r3, [r1]
   197c8:	cmp	r3, #32
   197cc:	bcc	19820 <flatcc_json_parser_string_part@@Base+0x64>
   197d0:	cmp	r3, #34	; 0x22
   197d4:	cmpne	r3, #92	; 0x5c
   197d8:	beq	19818 <flatcc_json_parser_string_part@@Base+0x5c>
   197dc:	add	r1, r1, #1
   197e0:	cmp	r2, r1
   197e4:	bne	197c4 <flatcc_json_parser_string_part@@Base+0x8>
   197e8:	mov	r1, r2
   197ec:	ldr	r3, [r0, #24]
   197f0:	cmp	r3, #0
   197f4:	bne	19814 <flatcc_json_parser_string_part@@Base+0x58>
   197f8:	mov	ip, #20
   197fc:	str	r1, [r0, #36]	; 0x24
   19800:	ldr	r3, [r0, #4]
   19804:	sub	r1, r1, r3
   19808:	add	r1, r1, #1
   1980c:	str	r1, [r0, #20]
   19810:	str	ip, [r0, #24]
   19814:	mov	r1, r2
   19818:	mov	r0, r1
   1981c:	bx	lr
   19820:	ldr	r3, [r0, #24]
   19824:	cmp	r3, #0
   19828:	bne	19814 <flatcc_json_parser_string_part@@Base+0x58>
   1982c:	mov	ip, #17
   19830:	b	197fc <flatcc_json_parser_string_part@@Base+0x40>

00019834 <flatcc_json_parser_space_ext@@Base>:
   19834:	mov	ip, r2
   19838:	cmp	r1, r2
   1983c:	beq	19940 <flatcc_json_parser_space_ext@@Base+0x10c>
   19840:	ldrb	r3, [r1]
   19844:	cmp	r3, #32
   19848:	bne	19874 <flatcc_json_parser_space_ext@@Base+0x40>
   1984c:	add	r1, r1, #1
   19850:	cmp	r1, ip
   19854:	bne	19840 <flatcc_json_parser_space_ext@@Base+0xc>
   19858:	b	19940 <flatcc_json_parser_space_ext@@Base+0x10c>
   1985c:	add	r1, r1, r3
   19860:	add	r1, r1, #1
   19864:	str	r1, [r0, #4]
   19868:	ldr	r2, [r0, #16]
   1986c:	add	r2, r2, #1
   19870:	str	r2, [r0, #16]
   19874:	cmp	r1, ip
   19878:	bne	1988c <flatcc_json_parser_space_ext@@Base+0x58>
   1987c:	b	19940 <flatcc_json_parser_space_ext@@Base+0x10c>
   19880:	add	r1, r1, #1
   19884:	cmp	r1, ip
   19888:	beq	19940 <flatcc_json_parser_space_ext@@Base+0x10c>
   1988c:	ldrb	r3, [r1]
   19890:	cmp	r3, #32
   19894:	movhi	r0, r1
   19898:	bxhi	lr
   1989c:	sub	r3, r3, #9
   198a0:	cmp	r3, #23
   198a4:	bhi	19934 <flatcc_json_parser_space_ext@@Base+0x100>
   198a8:	add	r2, pc, #0
   198ac:	ldr	pc, [r2, r3, lsl #2]
   198b0:	andeq	r9, r1, r0, lsl #17
   198b4:	andeq	r9, r1, r0, ror #16
   198b8:	andeq	r9, r1, r4, lsr r9
   198bc:	andeq	r9, r1, r4, lsr r9
   198c0:	andeq	r9, r1, r0, lsl r9
   198c4:	andeq	r9, r1, r4, lsr r9
   198c8:	andeq	r9, r1, r4, lsr r9
   198cc:	andeq	r9, r1, r4, lsr r9
   198d0:	andeq	r9, r1, r4, lsr r9
   198d4:	andeq	r9, r1, r4, lsr r9
   198d8:	andeq	r9, r1, r4, lsr r9
   198dc:	andeq	r9, r1, r4, lsr r9
   198e0:	andeq	r9, r1, r4, lsr r9
   198e4:	andeq	r9, r1, r4, lsr r9
   198e8:	andeq	r9, r1, r4, lsr r9
   198ec:	andeq	r9, r1, r4, lsr r9
   198f0:	andeq	r9, r1, r4, lsr r9
   198f4:	andeq	r9, r1, r4, lsr r9
   198f8:	andeq	r9, r1, r4, lsr r9
   198fc:	andeq	r9, r1, r4, lsr r9
   19900:	andeq	r9, r1, r4, lsr r9
   19904:	andeq	r9, r1, r4, lsr r9
   19908:	andeq	r9, r1, r4, lsr r9
   1990c:	andeq	r9, r1, r0, asr r8
   19910:	sub	r2, ip, r1
   19914:	mov	r3, #0
   19918:	cmp	r2, #2
   1991c:	blt	1985c <flatcc_json_parser_space_ext@@Base+0x28>
   19920:	ldrb	r2, [r1, #1]
   19924:	sub	r2, r2, #10
   19928:	clz	r2, r2
   1992c:	lsr	r3, r2, #5
   19930:	b	1985c <flatcc_json_parser_space_ext@@Base+0x28>
   19934:	ldr	r2, [r0, #24]
   19938:	cmp	r2, #0
   1993c:	beq	19948 <flatcc_json_parser_space_ext@@Base+0x114>
   19940:	mov	r0, ip
   19944:	bx	lr
   19948:	str	r1, [r0, #36]	; 0x24
   1994c:	mov	r2, #5
   19950:	ldr	r3, [r0, #4]
   19954:	sub	r1, r1, r3
   19958:	add	r1, r1, #1
   1995c:	str	r1, [r0, #20]
   19960:	str	r2, [r0, #24]
   19964:	mov	r0, ip
   19968:	bx	lr

0001996c <flatcc_json_parser_string_escape@@Base>:
   1996c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19970:	add	fp, sp, #24
   19974:	sub	r7, r2, r1
   19978:	cmp	r7, #2
   1997c:	blt	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19980:	ldrb	r6, [r1]
   19984:	cmp	r6, #92	; 0x5c
   19988:	bne	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   1998c:	ldrb	r6, [r1, #1]
   19990:	sub	r6, r6, #34	; 0x22
   19994:	cmp	r6, #86	; 0x56
   19998:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   1999c:	add	r5, pc, #0
   199a0:	ldr	pc, [r5, r6, lsl #2]
   199a4:	andeq	r9, r1, r0, lsl #22
   199a8:	ldrdeq	r9, [r1], -r4
   199ac:	ldrdeq	r9, [r1], -r4
   199b0:	ldrdeq	r9, [r1], -r4
   199b4:	ldrdeq	r9, [r1], -r4
   199b8:	ldrdeq	r9, [r1], -r4
   199bc:	ldrdeq	r9, [r1], -r4
   199c0:	ldrdeq	r9, [r1], -r4
   199c4:	ldrdeq	r9, [r1], -r4
   199c8:	ldrdeq	r9, [r1], -r4
   199cc:	ldrdeq	r9, [r1], -r4
   199d0:	ldrdeq	r9, [r1], -r4
   199d4:	ldrdeq	r9, [r1], -r4
   199d8:	andeq	r9, r1, r4, lsl fp
   199dc:	ldrdeq	r9, [r1], -r4
   199e0:	ldrdeq	r9, [r1], -r4
   199e4:	ldrdeq	r9, [r1], -r4
   199e8:	ldrdeq	r9, [r1], -r4
   199ec:	ldrdeq	r9, [r1], -r4
   199f0:	ldrdeq	r9, [r1], -r4
   199f4:	ldrdeq	r9, [r1], -r4
   199f8:	ldrdeq	r9, [r1], -r4
   199fc:	ldrdeq	r9, [r1], -r4
   19a00:	ldrdeq	r9, [r1], -r4
   19a04:	ldrdeq	r9, [r1], -r4
   19a08:	ldrdeq	r9, [r1], -r4
   19a0c:	ldrdeq	r9, [r1], -r4
   19a10:	ldrdeq	r9, [r1], -r4
   19a14:	ldrdeq	r9, [r1], -r4
   19a18:	ldrdeq	r9, [r1], -r4
   19a1c:	ldrdeq	r9, [r1], -r4
   19a20:	ldrdeq	r9, [r1], -r4
   19a24:	ldrdeq	r9, [r1], -r4
   19a28:	ldrdeq	r9, [r1], -r4
   19a2c:	ldrdeq	r9, [r1], -r4
   19a30:	ldrdeq	r9, [r1], -r4
   19a34:	ldrdeq	r9, [r1], -r4
   19a38:	ldrdeq	r9, [r1], -r4
   19a3c:	ldrdeq	r9, [r1], -r4
   19a40:	ldrdeq	r9, [r1], -r4
   19a44:	ldrdeq	r9, [r1], -r4
   19a48:	ldrdeq	r9, [r1], -r4
   19a4c:	ldrdeq	r9, [r1], -r4
   19a50:	ldrdeq	r9, [r1], -r4
   19a54:	ldrdeq	r9, [r1], -r4
   19a58:	ldrdeq	r9, [r1], -r4
   19a5c:	ldrdeq	r9, [r1], -r4
   19a60:	ldrdeq	r9, [r1], -r4
   19a64:	ldrdeq	r9, [r1], -r4
   19a68:	ldrdeq	r9, [r1], -r4
   19a6c:	ldrdeq	r9, [r1], -r4
   19a70:	ldrdeq	r9, [r1], -r4
   19a74:	ldrdeq	r9, [r1], -r4
   19a78:	ldrdeq	r9, [r1], -r4
   19a7c:	ldrdeq	r9, [r1], -r4
   19a80:	ldrdeq	r9, [r1], -r4
   19a84:	ldrdeq	r9, [r1], -r4
   19a88:	ldrdeq	r9, [r1], -r4
   19a8c:	andeq	r9, r1, r8, lsr #22
   19a90:	ldrdeq	r9, [r1], -r4
   19a94:	ldrdeq	r9, [r1], -r4
   19a98:	ldrdeq	r9, [r1], -r4
   19a9c:	ldrdeq	r9, [r1], -r4
   19aa0:	ldrdeq	r9, [r1], -r4
   19aa4:	andeq	r9, r1, ip, lsr fp
   19aa8:	ldrdeq	r9, [r1], -r4
   19aac:	ldrdeq	r9, [r1], -r4
   19ab0:	ldrdeq	r9, [r1], -r4
   19ab4:	andeq	r9, r1, r0, asr fp
   19ab8:	ldrdeq	r9, [r1], -r4
   19abc:	ldrdeq	r9, [r1], -r4
   19ac0:	ldrdeq	r9, [r1], -r4
   19ac4:	ldrdeq	r9, [r1], -r4
   19ac8:	ldrdeq	r9, [r1], -r4
   19acc:	ldrdeq	r9, [r1], -r4
   19ad0:	ldrdeq	r9, [r1], -r4
   19ad4:	andeq	r9, r1, r4, ror #22
   19ad8:	ldrdeq	r9, [r1], -r4
   19adc:	ldrdeq	r9, [r1], -r4
   19ae0:	ldrdeq	r9, [r1], -r4
   19ae4:	andeq	r9, r1, r8, ror fp
   19ae8:	ldrdeq	r9, [r1], -r4
   19aec:	andeq	r9, r1, ip, lsl #23
   19af0:	andeq	r9, r1, r0, lsr #23
   19af4:	ldrdeq	r9, [r1], -r4
   19af8:	ldrdeq	r9, [r1], -r4
   19afc:	andeq	r9, r1, r4, asr #23
   19b00:	movw	r0, #8705	; 0x2201
   19b04:	add	r2, r1, #2
   19b08:	strh	r0, [r3]
   19b0c:	mov	r0, r2
   19b10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b14:	movw	r0, #12033	; 0x2f01
   19b18:	add	r2, r1, #2
   19b1c:	strh	r0, [r3]
   19b20:	mov	r0, r2
   19b24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b28:	movw	r0, #23553	; 0x5c01
   19b2c:	add	r2, r1, #2
   19b30:	strh	r0, [r3]
   19b34:	mov	r0, r2
   19b38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b3c:	movw	r0, #2049	; 0x801
   19b40:	add	r2, r1, #2
   19b44:	strh	r0, [r3]
   19b48:	mov	r0, r2
   19b4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b50:	movw	r0, #3073	; 0xc01
   19b54:	add	r2, r1, #2
   19b58:	strh	r0, [r3]
   19b5c:	mov	r0, r2
   19b60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b64:	movw	r0, #2561	; 0xa01
   19b68:	add	r2, r1, #2
   19b6c:	strh	r0, [r3]
   19b70:	mov	r0, r2
   19b74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b78:	movw	r0, #3329	; 0xd01
   19b7c:	add	r2, r1, #2
   19b80:	strh	r0, [r3]
   19b84:	mov	r0, r2
   19b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b8c:	movw	r0, #2305	; 0x901
   19b90:	add	r2, r1, #2
   19b94:	strh	r0, [r3]
   19b98:	mov	r0, r2
   19b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19ba0:	cmp	r7, #5
   19ba4:	ble	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19ba8:	ldrb	r7, [r1, #2]
   19bac:	sub	r6, r7, #48	; 0x30
   19bb0:	uxtb	r6, r6
   19bb4:	cmp	r6, #9
   19bb8:	bhi	19c30 <flatcc_json_parser_string_escape@@Base+0x2c4>
   19bbc:	lsl	ip, r7, #12
   19bc0:	b	19c50 <flatcc_json_parser_string_escape@@Base+0x2e4>
   19bc4:	mov	r6, #1
   19bc8:	cmp	r7, #3
   19bcc:	strb	r6, [r3]
   19bd0:	bgt	19c14 <flatcc_json_parser_string_escape@@Base+0x2a8>
   19bd4:	mov	r7, #0
   19bd8:	strb	r7, [r3]
   19bdc:	ldr	r3, [r0, #24]
   19be0:	cmp	r3, #0
   19be4:	beq	19bf0 <flatcc_json_parser_string_escape@@Base+0x284>
   19be8:	mov	r0, r2
   19bec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19bf0:	str	r1, [r0, #36]	; 0x24
   19bf4:	mov	r3, #18
   19bf8:	ldr	r7, [r0, #4]
   19bfc:	sub	r1, r1, r7
   19c00:	add	r1, r1, #1
   19c04:	str	r1, [r0, #20]
   19c08:	str	r3, [r0, #24]
   19c0c:	mov	r0, r2
   19c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c14:	ldrb	r7, [r1, #2]
   19c18:	sub	r6, r7, #48	; 0x30
   19c1c:	uxtb	r6, r6
   19c20:	cmp	r6, #9
   19c24:	bhi	19c6c <flatcc_json_parser_string_escape@@Base+0x300>
   19c28:	lsl	r7, r7, #4
   19c2c:	b	19c88 <flatcc_json_parser_string_escape@@Base+0x31c>
   19c30:	orr	r6, r7, #32
   19c34:	sub	r6, r6, #97	; 0x61
   19c38:	uxtb	r6, r6
   19c3c:	cmp	r6, #5
   19c40:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19c44:	movw	r6, #36864	; 0x9000
   19c48:	movt	r6, #65535	; 0xffff
   19c4c:	add	ip, r6, r7, lsl #12
   19c50:	ldrb	lr, [r1, #3]
   19c54:	sub	r4, lr, #48	; 0x30
   19c58:	uxtb	r4, r4
   19c5c:	cmp	r4, #10
   19c60:	bcs	19cc8 <flatcc_json_parser_string_escape@@Base+0x35c>
   19c64:	mov	r8, #53248	; 0xd000
   19c68:	b	19ce0 <flatcc_json_parser_string_escape@@Base+0x374>
   19c6c:	orr	r6, r7, #32
   19c70:	sub	r6, r6, #97	; 0x61
   19c74:	uxtb	r6, r6
   19c78:	cmp	r6, #5
   19c7c:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19c80:	mvn	r6, #111	; 0x6f
   19c84:	add	r7, r6, r7, lsl #4
   19c88:	ldrb	r5, [r1, #3]
   19c8c:	sub	r6, r5, #48	; 0x30
   19c90:	uxtb	r4, r6
   19c94:	cmp	r4, #10
   19c98:	bcc	19cb4 <flatcc_json_parser_string_escape@@Base+0x348>
   19c9c:	orr	r6, r5, #32
   19ca0:	sub	r5, r6, #97	; 0x61
   19ca4:	uxtb	r5, r5
   19ca8:	cmp	r5, #5
   19cac:	bhi	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19cb0:	sub	r6, r6, #87	; 0x57
   19cb4:	orr	r0, r6, r7
   19cb8:	add	r2, r1, #4
   19cbc:	strb	r0, [r3, #1]
   19cc0:	mov	r0, r2
   19cc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19cc8:	orr	lr, lr, #32
   19ccc:	mov	r8, #43264	; 0xa900
   19cd0:	sub	r4, lr, #97	; 0x61
   19cd4:	uxtb	r4, r4
   19cd8:	cmp	r4, #6
   19cdc:	bcs	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19ce0:	ldrb	r5, [r1, #4]
   19ce4:	sub	r4, r5, #48	; 0x30
   19ce8:	uxtb	r4, r4
   19cec:	cmp	r4, #10
   19cf0:	bcs	19cfc <flatcc_json_parser_string_escape@@Base+0x390>
   19cf4:	mov	r9, #64768	; 0xfd00
   19cf8:	b	19d14 <flatcc_json_parser_string_escape@@Base+0x3a8>
   19cfc:	orr	r5, r5, #32
   19d00:	movw	r9, #64144	; 0xfa90
   19d04:	sub	r4, r5, #97	; 0x61
   19d08:	uxtb	r4, r4
   19d0c:	cmp	r4, #6
   19d10:	bcs	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19d14:	ldrb	r7, [r1, #5]
   19d18:	sub	r4, r7, #48	; 0x30
   19d1c:	uxtb	r4, r4
   19d20:	cmp	r4, #10
   19d24:	bcs	19d34 <flatcc_json_parser_string_escape@@Base+0x3c8>
   19d28:	mvn	r0, #86	; 0x56
   19d2c:	add	r4, r0, #39	; 0x27
   19d30:	b	19d4c <flatcc_json_parser_string_escape@@Base+0x3e0>
   19d34:	orr	r7, r7, #32
   19d38:	movw	r4, #65449	; 0xffa9
   19d3c:	sub	r6, r7, #97	; 0x61
   19d40:	uxtb	r6, r6
   19d44:	cmp	r6, #6
   19d48:	bcs	19bd4 <flatcc_json_parser_string_escape@@Base+0x268>
   19d4c:	add	r0, r8, lr, lsl #8
   19d50:	add	r2, r9, r5, lsl #4
   19d54:	orr	r0, r0, ip
   19d58:	orr	r0, r0, r2
   19d5c:	add	r2, r4, r7
   19d60:	orr	r0, r0, r2
   19d64:	uxth	r7, r0
   19d68:	cmp	r7, #127	; 0x7f
   19d6c:	bhi	19d88 <flatcc_json_parser_string_escape@@Base+0x41c>
   19d70:	mov	r2, #1
   19d74:	strb	r2, [r3]
   19d78:	strb	r0, [r3, r2]
   19d7c:	add	r2, r1, #6
   19d80:	mov	r0, r2
   19d84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19d88:	mov	r2, #0
   19d8c:	cmp	r2, r7, lsr #11
   19d90:	bne	19dac <flatcc_json_parser_string_escape@@Base+0x440>
   19d94:	mov	r7, #192	; 0xc0
   19d98:	mov	r2, #2
   19d9c:	orr	r7, r7, r0, lsr #6
   19da0:	strb	r2, [r3]
   19da4:	strb	r7, [r3, #1]
   19da8:	b	19dd0 <flatcc_json_parser_string_escape@@Base+0x464>
   19dac:	mov	r6, #224	; 0xe0
   19db0:	mov	r2, #3
   19db4:	orr	r6, r6, r7, lsr #12
   19db8:	strb	r2, [r3]
   19dbc:	lsr	r7, r7, #6
   19dc0:	strb	r6, [r3, #1]
   19dc4:	mov	r6, #2
   19dc8:	bfi	r7, r6, #6, #26
   19dcc:	strb	r7, [r3, #2]
   19dd0:	mvn	r7, #-67108863	; 0xfc000001
   19dd4:	bfi	r0, r7, #6, #26
   19dd8:	strb	r0, [r3, r2]
   19ddc:	add	r2, r1, #6
   19de0:	mov	r0, r2
   19de4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00019de8 <flatcc_json_parser_skip_constant@@Base>:
   19de8:	push	{r4, r5, r6, sl, fp, lr}
   19dec:	add	fp, sp, #16
   19df0:	cmp	r1, r2
   19df4:	beq	19ea8 <flatcc_json_parser_skip_constant@@Base+0xc0>
   19df8:	mov	r4, r2
   19dfc:	mov	r5, r0
   19e00:	ldrsb	r0, [r1]
   19e04:	mov	r6, r1
   19e08:	cmp	r0, #0
   19e0c:	bmi	19e20 <flatcc_json_parser_skip_constant@@Base+0x38>
   19e10:	uxtb	r0, r0
   19e14:	cmp	r0, #95	; 0x5f
   19e18:	cmpne	r0, #46	; 0x2e
   19e1c:	bne	19e30 <flatcc_json_parser_skip_constant@@Base+0x48>
   19e20:	add	r1, r6, #1
   19e24:	cmp	r1, r4
   19e28:	bne	19e00 <flatcc_json_parser_skip_constant@@Base+0x18>
   19e2c:	b	19ea0 <flatcc_json_parser_skip_constant@@Base+0xb8>
   19e30:	sub	r1, r0, #48	; 0x30
   19e34:	uxtb	r1, r1
   19e38:	cmp	r1, #9
   19e3c:	bls	19e20 <flatcc_json_parser_skip_constant@@Base+0x38>
   19e40:	orr	r1, r0, #32
   19e44:	sub	r1, r1, #97	; 0x61
   19e48:	uxtb	r1, r1
   19e4c:	cmp	r1, #25
   19e50:	bls	19e20 <flatcc_json_parser_skip_constant@@Base+0x38>
   19e54:	sub	r1, r4, r6
   19e58:	cmp	r1, #2
   19e5c:	blt	19e7c <flatcc_json_parser_skip_constant@@Base+0x94>
   19e60:	cmp	r0, #32
   19e64:	bhi	19e98 <flatcc_json_parser_skip_constant@@Base+0xb0>
   19e68:	bne	19e7c <flatcc_json_parser_skip_constant@@Base+0x94>
   19e6c:	mov	r1, r6
   19e70:	ldrb	r0, [r1, #1]!
   19e74:	cmp	r0, #32
   19e78:	bhi	19e24 <flatcc_json_parser_skip_constant@@Base+0x3c>
   19e7c:	mov	r0, r5
   19e80:	mov	r1, r6
   19e84:	mov	r2, r4
   19e88:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   19e8c:	mov	r1, r0
   19e90:	cmp	r0, r6
   19e94:	bne	19e24 <flatcc_json_parser_skip_constant@@Base+0x3c>
   19e98:	mov	r0, r6
   19e9c:	pop	{r4, r5, r6, sl, fp, pc}
   19ea0:	mov	r0, r4
   19ea4:	pop	{r4, r5, r6, sl, fp, pc}
   19ea8:	mov	r0, r1
   19eac:	pop	{r4, r5, r6, sl, fp, pc}

00019eb0 <flatcc_json_parser_match_constant@@Base>:
   19eb0:	push	{r4, r5, r6, r7, fp, lr}
   19eb4:	add	fp, sp, #16
   19eb8:	ldr	r7, [fp, #8]
   19ebc:	mov	r4, r1
   19ec0:	sub	r1, r2, r1
   19ec4:	cmp	r1, r3
   19ec8:	ble	19fdc <flatcc_json_parser_match_constant@@Base+0x12c>
   19ecc:	ldr	r1, [r0, #12]
   19ed0:	mov	r5, r2
   19ed4:	add	r6, r4, r3
   19ed8:	cmp	r1, #0
   19edc:	beq	19f68 <flatcc_json_parser_match_constant@@Base+0xb8>
   19ee0:	sub	r1, r5, r6
   19ee4:	cmp	r1, #2
   19ee8:	blt	19f10 <flatcc_json_parser_match_constant@@Base+0x60>
   19eec:	ldrb	r1, [r6]
   19ef0:	mov	r2, r6
   19ef4:	cmp	r1, #32
   19ef8:	bhi	19f20 <flatcc_json_parser_match_constant@@Base+0x70>
   19efc:	bne	19f10 <flatcc_json_parser_match_constant@@Base+0x60>
   19f00:	mov	r2, r6
   19f04:	ldrb	r1, [r2, #1]!
   19f08:	cmp	r1, #32
   19f0c:	bhi	19f20 <flatcc_json_parser_match_constant@@Base+0x70>
   19f10:	mov	r1, r6
   19f14:	mov	r2, r5
   19f18:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   19f1c:	mov	r2, r0
   19f20:	cmp	r2, r5
   19f24:	beq	19ff0 <flatcc_json_parser_match_constant@@Base+0x140>
   19f28:	cmp	r2, r6
   19f2c:	beq	1a000 <flatcc_json_parser_match_constant@@Base+0x150>
   19f30:	ldrsb	r0, [r2]
   19f34:	cmp	r0, #95	; 0x5f
   19f38:	beq	19f58 <flatcc_json_parser_match_constant@@Base+0xa8>
   19f3c:	cmn	r0, #1
   19f40:	ble	19f58 <flatcc_json_parser_match_constant@@Base+0xa8>
   19f44:	orr	r0, r0, #32
   19f48:	sub	r0, r0, #97	; 0x61
   19f4c:	uxtb	r0, r0
   19f50:	cmp	r0, #25
   19f54:	bhi	1a000 <flatcc_json_parser_match_constant@@Base+0x150>
   19f58:	mov	r0, #1
   19f5c:	str	r0, [r7]
   19f60:	mov	r0, r2
   19f64:	pop	{r4, r5, r6, r7, fp, pc}
   19f68:	ldrb	r1, [r6]
   19f6c:	cmp	r1, #92	; 0x5c
   19f70:	beq	1a028 <flatcc_json_parser_match_constant@@Base+0x178>
   19f74:	cmp	r1, #34	; 0x22
   19f78:	beq	19fac <flatcc_json_parser_match_constant@@Base+0xfc>
   19f7c:	cmp	r1, #32
   19f80:	bne	19fdc <flatcc_json_parser_match_constant@@Base+0x12c>
   19f84:	add	r1, r4, r3
   19f88:	add	r1, r1, #1
   19f8c:	cmp	r5, r1
   19f90:	beq	19ff0 <flatcc_json_parser_match_constant@@Base+0x140>
   19f94:	ldrb	r2, [r1], #1
   19f98:	cmp	r2, #32
   19f9c:	beq	19f8c <flatcc_json_parser_match_constant@@Base+0xdc>
   19fa0:	cmp	r2, #34	; 0x22
   19fa4:	bne	1a090 <flatcc_json_parser_match_constant@@Base+0x1e0>
   19fa8:	sub	r6, r1, #1
   19fac:	mvn	r2, r6
   19fb0:	add	r1, r6, #1
   19fb4:	cmp	r2, #2
   19fb8:	blt	1a074 <flatcc_json_parser_match_constant@@Base+0x1c4>
   19fbc:	ldrb	r2, [r1]
   19fc0:	cmp	r2, #32
   19fc4:	bls	1a060 <flatcc_json_parser_match_constant@@Base+0x1b0>
   19fc8:	mov	r2, r1
   19fcc:	mov	r0, #0
   19fd0:	str	r0, [r7]
   19fd4:	mov	r0, r2
   19fd8:	pop	{r4, r5, r6, r7, fp, pc}
   19fdc:	mov	r0, #0
   19fe0:	mov	r2, r4
   19fe4:	str	r0, [r7]
   19fe8:	mov	r0, r2
   19fec:	pop	{r4, r5, r6, r7, fp, pc}
   19ff0:	mov	r0, #0
   19ff4:	str	r0, [r7]
   19ff8:	mov	r0, r5
   19ffc:	pop	{r4, r5, r6, r7, fp, pc}
   1a000:	mov	r0, #0
   1a004:	str	r0, [r7]
   1a008:	ldrb	r0, [r2]
   1a00c:	cmp	r0, #44	; 0x2c
   1a010:	cmpne	r0, #93	; 0x5d
   1a014:	beq	19fe8 <flatcc_json_parser_match_constant@@Base+0x138>
   1a018:	cmp	r0, #125	; 0x7d
   1a01c:	movne	r2, r4
   1a020:	mov	r0, r2
   1a024:	pop	{r4, r5, r6, r7, fp, pc}
   1a028:	mov	r1, #0
   1a02c:	str	r1, [r7]
   1a030:	ldr	r1, [r0, #24]
   1a034:	cmp	r1, #0
   1a038:	bne	19ff8 <flatcc_json_parser_match_constant@@Base+0x148>
   1a03c:	str	r6, [r0, #36]	; 0x24
   1a040:	mov	r1, #18
   1a044:	ldr	r2, [r0, #4]
   1a048:	sub	r2, r6, r2
   1a04c:	add	r2, r2, #1
   1a050:	str	r2, [r0, #20]
   1a054:	str	r1, [r0, #24]
   1a058:	mov	r0, r5
   1a05c:	pop	{r4, r5, r6, r7, fp, pc}
   1a060:	bne	1a074 <flatcc_json_parser_match_constant@@Base+0x1c4>
   1a064:	ldrb	r2, [r6, #2]!
   1a068:	cmp	r2, #32
   1a06c:	mov	r2, r6
   1a070:	bhi	1a080 <flatcc_json_parser_match_constant@@Base+0x1d0>
   1a074:	mov	r2, #0
   1a078:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1a07c:	mov	r2, r0
   1a080:	mov	r0, #0
   1a084:	str	r0, [r7]
   1a088:	mov	r0, r2
   1a08c:	pop	{r4, r5, r6, r7, fp, pc}
   1a090:	mov	r0, #1
   1a094:	sub	r2, r1, #1
   1a098:	str	r0, [r7]
   1a09c:	mov	r0, r2
   1a0a0:	pop	{r4, r5, r6, r7, fp, pc}

0001a0a4 <flatcc_json_parser_unmatched_symbol@@Base>:
   1a0a4:	push	{r4, r5, fp, lr}
   1a0a8:	add	fp, sp, #8
   1a0ac:	mov	r5, r0
   1a0b0:	ldrb	r0, [r0, #8]
   1a0b4:	mov	r4, r2
   1a0b8:	tst	r0, #1
   1a0bc:	bne	1a0e0 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   1a0c0:	ldr	r0, [r5, #24]
   1a0c4:	cmp	r0, #0
   1a0c8:	bne	1a2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   1a0cc:	str	r1, [r5, #36]	; 0x24
   1a0d0:	mov	r0, #13
   1a0d4:	ldr	r2, [r5, #4]
   1a0d8:	sub	r1, r1, r2
   1a0dc:	b	1a2e8 <flatcc_json_parser_unmatched_symbol@@Base+0x244>
   1a0e0:	ldr	r0, [r5, #12]
   1a0e4:	cmp	r0, #0
   1a0e8:	beq	1a180 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1a0ec:	cmp	r1, r4
   1a0f0:	beq	1a298 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1a0f4:	ldrb	r2, [r1]
   1a0f8:	cmp	r2, #33	; 0x21
   1a0fc:	bcc	1a298 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1a100:	add	r1, r1, #1
   1a104:	uxtb	r0, r2
   1a108:	cmp	r0, #46	; 0x2e
   1a10c:	cmpne	r0, #95	; 0x5f
   1a110:	bne	1a12c <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   1a114:	cmp	r4, r1
   1a118:	beq	1a28c <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   1a11c:	ldrb	r2, [r1], #1
   1a120:	cmp	r2, #33	; 0x21
   1a124:	bcs	1a104 <flatcc_json_parser_unmatched_symbol@@Base+0x60>
   1a128:	b	1a15c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   1a12c:	sxtb	r3, r2
   1a130:	cmp	r3, #0
   1a134:	bmi	1a114 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a138:	sub	r3, r2, #48	; 0x30
   1a13c:	uxtb	r3, r3
   1a140:	cmp	r3, #9
   1a144:	bls	1a114 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a148:	orr	r2, r2, #32
   1a14c:	sub	r2, r2, #97	; 0x61
   1a150:	uxtb	r2, r2
   1a154:	cmp	r2, #26
   1a158:	bcc	1a114 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a15c:	sub	r1, r1, #1
   1a160:	cmp	r0, #46	; 0x2e
   1a164:	bne	1a298 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1a168:	ldr	r0, [r5, #24]
   1a16c:	mov	r2, r4
   1a170:	cmp	r0, #0
   1a174:	bne	1a1dc <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   1a178:	mov	r0, #5
   1a17c:	b	1a24c <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1a180:	cmp	r1, r4
   1a184:	bne	1a1a0 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   1a188:	b	1a1cc <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1a18c:	cmp	r0, #34	; 0x22
   1a190:	beq	1a278 <flatcc_json_parser_unmatched_symbol@@Base+0x1d4>
   1a194:	add	r1, r1, #1
   1a198:	cmp	r1, r4
   1a19c:	beq	1a1c8 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1a1a0:	ldrb	r0, [r1]
   1a1a4:	cmp	r0, #92	; 0x5c
   1a1a8:	bne	1a18c <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1a1ac:	sub	r0, r4, r1
   1a1b0:	cmp	r0, #2
   1a1b4:	blt	1a1cc <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1a1b8:	add	r1, r1, #1
   1a1bc:	add	r1, r1, #1
   1a1c0:	cmp	r1, r4
   1a1c4:	bne	1a1a0 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   1a1c8:	mov	r1, r4
   1a1cc:	ldr	r0, [r5, #24]
   1a1d0:	mov	r2, r4
   1a1d4:	cmp	r0, #0
   1a1d8:	beq	1a248 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   1a1dc:	sub	r0, r4, r2
   1a1e0:	cmp	r0, #2
   1a1e4:	blt	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x204>
   1a1e8:	ldrb	r0, [r2]
   1a1ec:	cmp	r0, #32
   1a1f0:	bls	1a230 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   1a1f4:	mov	r3, r2
   1a1f8:	cmp	r3, r4
   1a1fc:	beq	1a2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   1a200:	ldrb	r0, [r3]
   1a204:	cmp	r0, #58	; 0x3a
   1a208:	bne	1a2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   1a20c:	add	r1, r3, #1
   1a210:	sub	r0, r4, r1
   1a214:	cmp	r0, #2
   1a218:	blt	1a30c <flatcc_json_parser_unmatched_symbol@@Base+0x268>
   1a21c:	ldrb	r0, [r1]
   1a220:	cmp	r0, #32
   1a224:	bls	1a2fc <flatcc_json_parser_unmatched_symbol@@Base+0x258>
   1a228:	mov	r3, r1
   1a22c:	b	1a31c <flatcc_json_parser_unmatched_symbol@@Base+0x278>
   1a230:	bne	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x204>
   1a234:	mov	r3, r2
   1a238:	ldrb	r0, [r3, #1]!
   1a23c:	cmp	r0, #32
   1a240:	bls	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x204>
   1a244:	b	1a2bc <flatcc_json_parser_unmatched_symbol@@Base+0x218>
   1a248:	mov	r0, #20
   1a24c:	str	r1, [r5, #36]	; 0x24
   1a250:	ldr	r2, [r5, #4]
   1a254:	sub	r1, r1, r2
   1a258:	mov	r2, r4
   1a25c:	add	r1, r1, #1
   1a260:	str	r1, [r5, #20]
   1a264:	str	r0, [r5, #24]
   1a268:	sub	r0, r4, r2
   1a26c:	cmp	r0, #2
   1a270:	bge	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   1a274:	b	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x204>
   1a278:	add	r2, r1, #1
   1a27c:	sub	r0, r4, r2
   1a280:	cmp	r0, #2
   1a284:	bge	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   1a288:	b	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x204>
   1a28c:	mov	r1, r4
   1a290:	cmp	r0, #46	; 0x2e
   1a294:	beq	1a168 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   1a298:	mov	r2, r1
   1a29c:	sub	r0, r4, r2
   1a2a0:	cmp	r0, #2
   1a2a4:	bge	1a1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   1a2a8:	mov	r1, r2
   1a2ac:	mov	r0, r5
   1a2b0:	mov	r2, r4
   1a2b4:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1a2b8:	mov	r3, r0
   1a2bc:	cmp	r3, r4
   1a2c0:	bne	1a200 <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
   1a2c4:	ldr	r0, [r5, #24]
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a2d8 <flatcc_json_parser_unmatched_symbol@@Base+0x234>
   1a2d0:	mov	r0, r4
   1a2d4:	pop	{r4, r5, fp, pc}
   1a2d8:	str	r3, [r5, #36]	; 0x24
   1a2dc:	mov	r0, #4
   1a2e0:	ldr	r1, [r5, #4]
   1a2e4:	sub	r1, r3, r1
   1a2e8:	add	r1, r1, #1
   1a2ec:	str	r1, [r5, #20]
   1a2f0:	str	r0, [r5, #24]
   1a2f4:	mov	r0, r4
   1a2f8:	pop	{r4, r5, fp, pc}
   1a2fc:	bne	1a30c <flatcc_json_parser_unmatched_symbol@@Base+0x268>
   1a300:	ldrb	r0, [r3, #2]!
   1a304:	cmp	r0, #32
   1a308:	bhi	1a31c <flatcc_json_parser_unmatched_symbol@@Base+0x278>
   1a30c:	mov	r0, r5
   1a310:	mov	r2, r4
   1a314:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1a318:	mov	r3, r0
   1a31c:	mov	r0, r5
   1a320:	mov	r1, r3
   1a324:	mov	r2, r4
   1a328:	pop	{r4, r5, fp, lr}
   1a32c:	b	1a330 <flatcc_json_parser_generic_json@@Base>

0001a330 <flatcc_json_parser_generic_json@@Base>:
   1a330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a334:	add	fp, sp, #28
   1a338:	sub	sp, sp, #540	; 0x21c
   1a33c:	mov	r7, r1
   1a340:	cmp	r1, r2
   1a344:	beq	1b01c <flatcc_json_parser_generic_json@@Base+0xcec>
   1a348:	mov	r5, r0
   1a34c:	add	r0, r2, #1
   1a350:	add	r1, sp, #24
   1a354:	mov	r6, r2
   1a358:	mov	r8, #0
   1a35c:	str	r0, [sp, #4]
   1a360:	add	r0, r5, #36	; 0x24
   1a364:	sub	sl, r1, #1
   1a368:	add	r9, r5, #24
   1a36c:	str	r0, [sp, #16]
   1a370:	add	r0, r5, #20
   1a374:	str	r0, [sp, #12]
   1a378:	add	r0, r5, #4
   1a37c:	str	r0, [sp, #8]
   1a380:	mov	r0, r1
   1a384:	cmp	r8, #0
   1a388:	beq	1a65c <flatcc_json_parser_generic_json@@Base+0x32c>
   1a38c:	ldrb	r0, [r0, #-1]
   1a390:	cmp	r0, #125	; 0x7d
   1a394:	bne	1a65c <flatcc_json_parser_generic_json@@Base+0x32c>
   1a398:	ldrb	r0, [r7]
   1a39c:	cmp	r0, #46	; 0x2e
   1a3a0:	beq	1a41c <flatcc_json_parser_generic_json@@Base+0xec>
   1a3a4:	cmp	r0, #34	; 0x22
   1a3a8:	bne	1a4b0 <flatcc_json_parser_generic_json@@Base+0x180>
   1a3ac:	mov	r0, #0
   1a3b0:	mov	r2, r6
   1a3b4:	str	r0, [r5, #12]
   1a3b8:	add	r0, r7, #1
   1a3bc:	cmp	r0, r6
   1a3c0:	bne	1a3dc <flatcc_json_parser_generic_json@@Base+0xac>
   1a3c4:	b	1a464 <flatcc_json_parser_generic_json@@Base+0x134>
   1a3c8:	cmp	r1, #34	; 0x22
   1a3cc:	beq	1a564 <flatcc_json_parser_generic_json@@Base+0x234>
   1a3d0:	add	r0, r0, #1
   1a3d4:	cmp	r0, r6
   1a3d8:	beq	1a404 <flatcc_json_parser_generic_json@@Base+0xd4>
   1a3dc:	ldrb	r1, [r0]
   1a3e0:	cmp	r1, #92	; 0x5c
   1a3e4:	bne	1a3c8 <flatcc_json_parser_generic_json@@Base+0x98>
   1a3e8:	sub	r1, r6, r0
   1a3ec:	cmp	r1, #2
   1a3f0:	blt	1a598 <flatcc_json_parser_generic_json@@Base+0x268>
   1a3f4:	add	r0, r0, #1
   1a3f8:	add	r0, r0, #1
   1a3fc:	cmp	r0, r6
   1a400:	bne	1a3dc <flatcc_json_parser_generic_json@@Base+0xac>
   1a404:	mov	r2, r6
   1a408:	ldr	r0, [r9]
   1a40c:	mov	r1, r6
   1a410:	cmp	r0, #0
   1a414:	bne	1a5ac <flatcc_json_parser_generic_json@@Base+0x27c>
   1a418:	b	1a474 <flatcc_json_parser_generic_json@@Base+0x144>
   1a41c:	ldr	r0, [r9]
   1a420:	cmp	r0, #0
   1a424:	bne	1a450 <flatcc_json_parser_generic_json@@Base+0x120>
   1a428:	mov	r0, #5
   1a42c:	ldr	r1, [sp, #12]
   1a430:	str	r0, [r9]
   1a434:	ldr	r0, [sp, #8]
   1a438:	ldr	r0, [r0]
   1a43c:	sub	r0, r7, r0
   1a440:	add	r0, r0, #1
   1a444:	str	r0, [r1]
   1a448:	ldr	r0, [sp, #16]
   1a44c:	str	r7, [r0]
   1a450:	ldr	r0, [r5, #12]
   1a454:	mov	r2, r6
   1a458:	mov	r1, r6
   1a45c:	cmp	r0, #0
   1a460:	bne	1a5ac <flatcc_json_parser_generic_json@@Base+0x27c>
   1a464:	ldr	r0, [r9]
   1a468:	mov	r1, r6
   1a46c:	cmp	r0, #0
   1a470:	bne	1a5ac <flatcc_json_parser_generic_json@@Base+0x27c>
   1a474:	mov	r0, #20
   1a478:	str	r0, [r9]
   1a47c:	ldr	r0, [sp, #8]
   1a480:	ldr	r1, [sp, #12]
   1a484:	ldr	r0, [r0]
   1a488:	sub	r0, r2, r0
   1a48c:	add	r0, r0, #1
   1a490:	str	r0, [r1]
   1a494:	ldr	r0, [sp, #16]
   1a498:	mov	r1, r6
   1a49c:	str	r2, [r0]
   1a4a0:	sub	r0, r6, r1
   1a4a4:	cmp	r0, #2
   1a4a8:	bge	1a5b8 <flatcc_json_parser_generic_json@@Base+0x288>
   1a4ac:	b	1a620 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a4b0:	mov	r0, #1
   1a4b4:	cmp	r7, r6
   1a4b8:	mov	r1, r6
   1a4bc:	str	r0, [r5, #12]
   1a4c0:	beq	1a5ac <flatcc_json_parser_generic_json@@Base+0x27c>
   1a4c4:	ldrb	r2, [r7]
   1a4c8:	cmp	r2, #33	; 0x21
   1a4cc:	bcc	1a550 <flatcc_json_parser_generic_json@@Base+0x220>
   1a4d0:	add	r1, r7, #1
   1a4d4:	uxtb	r0, r2
   1a4d8:	cmp	r0, #46	; 0x2e
   1a4dc:	cmpne	r0, #95	; 0x5f
   1a4e0:	bne	1a4fc <flatcc_json_parser_generic_json@@Base+0x1cc>
   1a4e4:	cmp	r6, r1
   1a4e8:	beq	1a578 <flatcc_json_parser_generic_json@@Base+0x248>
   1a4ec:	ldrb	r2, [r1], #1
   1a4f0:	cmp	r2, #33	; 0x21
   1a4f4:	bcs	1a4d4 <flatcc_json_parser_generic_json@@Base+0x1a4>
   1a4f8:	b	1a52c <flatcc_json_parser_generic_json@@Base+0x1fc>
   1a4fc:	sxtb	r3, r2
   1a500:	cmp	r3, #0
   1a504:	bmi	1a4e4 <flatcc_json_parser_generic_json@@Base+0x1b4>
   1a508:	sub	r3, r2, #48	; 0x30
   1a50c:	uxtb	r3, r3
   1a510:	cmp	r3, #9
   1a514:	bls	1a4e4 <flatcc_json_parser_generic_json@@Base+0x1b4>
   1a518:	orr	r2, r2, #32
   1a51c:	sub	r2, r2, #97	; 0x61
   1a520:	uxtb	r2, r2
   1a524:	cmp	r2, #26
   1a528:	bcc	1a4e4 <flatcc_json_parser_generic_json@@Base+0x1b4>
   1a52c:	sub	r2, r1, #1
   1a530:	cmp	r0, #46	; 0x2e
   1a534:	bne	1a584 <flatcc_json_parser_generic_json@@Base+0x254>
   1a538:	ldr	r0, [r9]
   1a53c:	mov	r1, r6
   1a540:	cmp	r0, #0
   1a544:	bne	1a5ac <flatcc_json_parser_generic_json@@Base+0x27c>
   1a548:	mov	r0, #5
   1a54c:	b	1a478 <flatcc_json_parser_generic_json@@Base+0x148>
   1a550:	mov	r1, r7
   1a554:	sub	r0, r6, r1
   1a558:	cmp	r0, #2
   1a55c:	bge	1a5b8 <flatcc_json_parser_generic_json@@Base+0x288>
   1a560:	b	1a620 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a564:	add	r1, r0, #1
   1a568:	sub	r0, r6, r1
   1a56c:	cmp	r0, #2
   1a570:	bge	1a5b8 <flatcc_json_parser_generic_json@@Base+0x288>
   1a574:	b	1a620 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a578:	mov	r2, r6
   1a57c:	cmp	r0, #46	; 0x2e
   1a580:	beq	1a538 <flatcc_json_parser_generic_json@@Base+0x208>
   1a584:	mov	r1, r2
   1a588:	sub	r0, r6, r1
   1a58c:	cmp	r0, #2
   1a590:	bge	1a5b8 <flatcc_json_parser_generic_json@@Base+0x288>
   1a594:	b	1a620 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a598:	mov	r2, r0
   1a59c:	ldr	r0, [r9]
   1a5a0:	mov	r1, r6
   1a5a4:	cmp	r0, #0
   1a5a8:	beq	1a474 <flatcc_json_parser_generic_json@@Base+0x144>
   1a5ac:	sub	r0, r6, r1
   1a5b0:	cmp	r0, #2
   1a5b4:	blt	1a620 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a5b8:	ldrb	r0, [r1]
   1a5bc:	cmp	r0, #32
   1a5c0:	bls	1a60c <flatcc_json_parser_generic_json@@Base+0x2dc>
   1a5c4:	mov	r7, r1
   1a5c8:	cmp	r7, r6
   1a5cc:	beq	1b0a8 <flatcc_json_parser_generic_json@@Base+0xd78>
   1a5d0:	ldrb	r0, [r7]
   1a5d4:	cmp	r0, #58	; 0x3a
   1a5d8:	bne	1b0c0 <flatcc_json_parser_generic_json@@Base+0xd90>
   1a5dc:	add	r1, r7, #1
   1a5e0:	sub	r0, r6, r1
   1a5e4:	cmp	r0, #2
   1a5e8:	blt	1a64c <flatcc_json_parser_generic_json@@Base+0x31c>
   1a5ec:	ldrb	r2, [r1]
   1a5f0:	cmp	r2, #32
   1a5f4:	bls	1a63c <flatcc_json_parser_generic_json@@Base+0x30c>
   1a5f8:	mov	r7, r1
   1a5fc:	sub	r0, r2, #48	; 0x30
   1a600:	cmp	r0, #10
   1a604:	bcc	1a66c <flatcc_json_parser_generic_json@@Base+0x33c>
   1a608:	b	1a704 <flatcc_json_parser_generic_json@@Base+0x3d4>
   1a60c:	bne	1a620 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a610:	mov	r7, r1
   1a614:	ldrb	r0, [r7, #1]!
   1a618:	cmp	r0, #32
   1a61c:	bhi	1a630 <flatcc_json_parser_generic_json@@Base+0x300>
   1a620:	mov	r0, r5
   1a624:	mov	r2, r6
   1a628:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1a62c:	mov	r7, r0
   1a630:	cmp	r7, r6
   1a634:	bne	1a5d0 <flatcc_json_parser_generic_json@@Base+0x2a0>
   1a638:	b	1b0a8 <flatcc_json_parser_generic_json@@Base+0xd78>
   1a63c:	bne	1a64c <flatcc_json_parser_generic_json@@Base+0x31c>
   1a640:	ldrb	r2, [r7, #2]!
   1a644:	cmp	r2, #32
   1a648:	bhi	1a660 <flatcc_json_parser_generic_json@@Base+0x330>
   1a64c:	mov	r0, r5
   1a650:	mov	r2, r6
   1a654:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1a658:	mov	r7, r0
   1a65c:	ldrb	r2, [r7]
   1a660:	sub	r0, r2, #48	; 0x30
   1a664:	cmp	r0, #10
   1a668:	bcs	1a704 <flatcc_json_parser_generic_json@@Base+0x3d4>
   1a66c:	cmp	r7, r6
   1a670:	beq	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a674:	cmp	r2, #45	; 0x2d
   1a678:	bne	1a68c <flatcc_json_parser_generic_json@@Base+0x35c>
   1a67c:	add	r7, r7, #1
   1a680:	cmp	r7, r6
   1a684:	beq	1abac <flatcc_json_parser_generic_json@@Base+0x87c>
   1a688:	ldrb	r2, [r7]
   1a68c:	cmp	r2, #48	; 0x30
   1a690:	bne	1a720 <flatcc_json_parser_generic_json@@Base+0x3f0>
   1a694:	add	r4, r7, #1
   1a698:	cmp	r4, r6
   1a69c:	mov	r1, r6
   1a6a0:	beq	1acdc <flatcc_json_parser_generic_json@@Base+0x9ac>
   1a6a4:	ldrb	r0, [r4]
   1a6a8:	cmp	r0, #46	; 0x2e
   1a6ac:	bne	1aa4c <flatcc_json_parser_generic_json@@Base+0x71c>
   1a6b0:	mov	r0, r4
   1a6b4:	ldrb	r1, [r0, #1]!
   1a6b8:	sub	r1, r1, #48	; 0x30
   1a6bc:	uxtb	r1, r1
   1a6c0:	cmp	r1, #10
   1a6c4:	bcc	1aa18 <flatcc_json_parser_generic_json@@Base+0x6e8>
   1a6c8:	ldr	r1, [r9]
   1a6cc:	cmp	r1, #0
   1a6d0:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a6d4:	mov	r1, #6
   1a6d8:	ldr	r2, [sp, #12]
   1a6dc:	mov	r4, r6
   1a6e0:	str	r1, [r9]
   1a6e4:	ldr	r1, [sp, #8]
   1a6e8:	ldr	r1, [r1]
   1a6ec:	sub	r1, r0, r1
   1a6f0:	add	r1, r1, #1
   1a6f4:	str	r1, [r2]
   1a6f8:	ldr	r1, [sp, #16]
   1a6fc:	str	r0, [r1]
   1a700:	b	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1a704:	cmp	r2, #90	; 0x5a
   1a708:	bgt	1a768 <flatcc_json_parser_generic_json@@Base+0x438>
   1a70c:	cmp	r2, #34	; 0x22
   1a710:	beq	1a7ec <flatcc_json_parser_generic_json@@Base+0x4bc>
   1a714:	cmp	r2, #45	; 0x2d
   1a718:	beq	1a66c <flatcc_json_parser_generic_json@@Base+0x33c>
   1a71c:	b	1a950 <flatcc_json_parser_generic_json@@Base+0x620>
   1a720:	sub	r0, r2, #49	; 0x31
   1a724:	uxtb	r0, r0
   1a728:	cmp	r0, #8
   1a72c:	bls	1a7b8 <flatcc_json_parser_generic_json@@Base+0x488>
   1a730:	ldr	r0, [r9]
   1a734:	cmp	r0, #0
   1a738:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a73c:	mov	r0, #6
   1a740:	ldr	r1, [sp, #12]
   1a744:	str	r0, [r9]
   1a748:	ldr	r0, [sp, #8]
   1a74c:	ldr	r0, [r0]
   1a750:	sub	r0, r7, r0
   1a754:	add	r0, r0, #1
   1a758:	str	r0, [r1]
   1a75c:	ldr	r0, [sp, #16]
   1a760:	str	r7, [r0]
   1a764:	b	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a768:	cmp	r2, #91	; 0x5b
   1a76c:	beq	1a910 <flatcc_json_parser_generic_json@@Base+0x5e0>
   1a770:	cmp	r2, #123	; 0x7b
   1a774:	bne	1a950 <flatcc_json_parser_generic_json@@Base+0x620>
   1a778:	cmp	r8, #512	; 0x200
   1a77c:	beq	1b0d4 <flatcc_json_parser_generic_json@@Base+0xda4>
   1a780:	add	r0, sp, #24
   1a784:	mov	r1, #125	; 0x7d
   1a788:	strb	r1, [r0, r8]
   1a78c:	add	r1, r7, #1
   1a790:	sub	r0, r6, r1
   1a794:	cmp	r0, #2
   1a798:	blt	1ac20 <flatcc_json_parser_generic_json@@Base+0x8f0>
   1a79c:	ldrb	r0, [r1]
   1a7a0:	cmp	r0, #32
   1a7a4:	bls	1ac10 <flatcc_json_parser_generic_json@@Base+0x8e0>
   1a7a8:	mov	r7, r1
   1a7ac:	cmp	r7, r6
   1a7b0:	bne	1ac38 <flatcc_json_parser_generic_json@@Base+0x908>
   1a7b4:	b	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1a7b8:	add	r0, r7, #1
   1a7bc:	cmp	r6, r0
   1a7c0:	beq	1abc0 <flatcc_json_parser_generic_json@@Base+0x890>
   1a7c4:	ldrb	r1, [r0], #1
   1a7c8:	sub	r1, r1, #48	; 0x30
   1a7cc:	uxtb	r1, r1
   1a7d0:	cmp	r1, #10
   1a7d4:	bcc	1a7bc <flatcc_json_parser_generic_json@@Base+0x48c>
   1a7d8:	sub	r4, r0, #1
   1a7dc:	cmp	r4, r6
   1a7e0:	mov	r1, r6
   1a7e4:	bne	1a6a4 <flatcc_json_parser_generic_json@@Base+0x374>
   1a7e8:	b	1acdc <flatcc_json_parser_generic_json@@Base+0x9ac>
   1a7ec:	cmp	r7, r6
   1a7f0:	beq	1abd4 <flatcc_json_parser_generic_json@@Base+0x8a4>
   1a7f4:	add	r0, r7, #1
   1a7f8:	mov	r1, r6
   1a7fc:	add	r4, sp, #20
   1a800:	mov	r7, #17
   1a804:	cmp	r0, r6
   1a808:	bne	1a838 <flatcc_json_parser_generic_json@@Base+0x508>
   1a80c:	b	1acb4 <flatcc_json_parser_generic_json@@Base+0x984>
   1a810:	ldr	r1, [r9]
   1a814:	cmp	r1, #0
   1a818:	mov	r1, r6
   1a81c:	beq	1a8a4 <flatcc_json_parser_generic_json@@Base+0x574>
   1a820:	mov	r0, r5
   1a824:	mov	r2, r6
   1a828:	mov	r3, r4
   1a82c:	bl	1996c <flatcc_json_parser_string_escape@@Base>
   1a830:	cmp	r0, r6
   1a834:	beq	1acb0 <flatcc_json_parser_generic_json@@Base+0x980>
   1a838:	ldrb	r1, [r0]
   1a83c:	cmp	r1, #34	; 0x22
   1a840:	beq	1ac90 <flatcc_json_parser_generic_json@@Base+0x960>
   1a844:	cmp	r1, #32
   1a848:	bcc	1a810 <flatcc_json_parser_generic_json@@Base+0x4e0>
   1a84c:	rsb	r0, r0, #0
   1a850:	uxtb	r2, r1
   1a854:	cmp	r2, #34	; 0x22
   1a858:	cmpne	r2, #92	; 0x5c
   1a85c:	beq	1a888 <flatcc_json_parser_generic_json@@Base+0x558>
   1a860:	add	r1, r6, r0
   1a864:	cmp	r1, #1
   1a868:	beq	1a8d0 <flatcc_json_parser_generic_json@@Base+0x5a0>
   1a86c:	rsb	r1, r0, #0
   1a870:	sub	r0, r0, #1
   1a874:	ldrb	r1, [r1, #1]
   1a878:	cmp	r1, #32
   1a87c:	bcs	1a850 <flatcc_json_parser_generic_json@@Base+0x520>
   1a880:	rsb	r0, r0, #0
   1a884:	b	1a810 <flatcc_json_parser_generic_json@@Base+0x4e0>
   1a888:	adds	r1, r6, r0
   1a88c:	mov	r1, r6
   1a890:	beq	1a820 <flatcc_json_parser_generic_json@@Base+0x4f0>
   1a894:	rsb	r1, r0, #0
   1a898:	cmp	r2, #34	; 0x22
   1a89c:	bne	1a820 <flatcc_json_parser_generic_json@@Base+0x4f0>
   1a8a0:	b	1ac94 <flatcc_json_parser_generic_json@@Base+0x964>
   1a8a4:	ldr	r1, [sp, #8]
   1a8a8:	str	r7, [r9]
   1a8ac:	ldr	r2, [sp, #12]
   1a8b0:	ldr	r1, [r1]
   1a8b4:	sub	r1, r0, r1
   1a8b8:	add	r1, r1, #1
   1a8bc:	str	r1, [r2]
   1a8c0:	ldr	r1, [sp, #16]
   1a8c4:	str	r0, [r1]
   1a8c8:	mov	r1, r6
   1a8cc:	b	1a820 <flatcc_json_parser_generic_json@@Base+0x4f0>
   1a8d0:	ldr	r0, [r9]
   1a8d4:	mov	r1, r6
   1a8d8:	cmp	r0, #0
   1a8dc:	bne	1a820 <flatcc_json_parser_generic_json@@Base+0x4f0>
   1a8e0:	mov	r0, #20
   1a8e4:	ldr	r1, [sp, #4]
   1a8e8:	str	r0, [r9]
   1a8ec:	ldr	r0, [sp, #8]
   1a8f0:	ldr	r0, [r0]
   1a8f4:	sub	r0, r1, r0
   1a8f8:	ldr	r1, [sp, #12]
   1a8fc:	str	r0, [r1]
   1a900:	ldr	r0, [sp, #16]
   1a904:	mov	r1, r6
   1a908:	str	r6, [r0]
   1a90c:	b	1a820 <flatcc_json_parser_generic_json@@Base+0x4f0>
   1a910:	cmp	r8, #512	; 0x200
   1a914:	beq	1b0d4 <flatcc_json_parser_generic_json@@Base+0xda4>
   1a918:	add	r0, sp, #24
   1a91c:	mov	r1, #93	; 0x5d
   1a920:	strb	r1, [r0, r8]
   1a924:	add	r1, r7, #1
   1a928:	sub	r0, r6, r1
   1a92c:	cmp	r0, #2
   1a930:	blt	1ac60 <flatcc_json_parser_generic_json@@Base+0x930>
   1a934:	ldrb	r0, [r1]
   1a938:	cmp	r0, #32
   1a93c:	bls	1ac50 <flatcc_json_parser_generic_json@@Base+0x920>
   1a940:	mov	r7, r1
   1a944:	cmp	r7, r6
   1a948:	bne	1ac78 <flatcc_json_parser_generic_json@@Base+0x948>
   1a94c:	b	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1a950:	cmp	r7, r6
   1a954:	mov	r4, r6
   1a958:	beq	1aa0c <flatcc_json_parser_generic_json@@Base+0x6dc>
   1a95c:	mov	r4, r7
   1a960:	sxtb	r0, r2
   1a964:	cmp	r0, #0
   1a968:	bpl	1a984 <flatcc_json_parser_generic_json@@Base+0x654>
   1a96c:	b	1a9fc <flatcc_json_parser_generic_json@@Base+0x6cc>
   1a970:	ldrb	r2, [r0]
   1a974:	mov	r4, r0
   1a978:	sxtb	r0, r2
   1a97c:	cmp	r0, #0
   1a980:	bmi	1a9fc <flatcc_json_parser_generic_json@@Base+0x6cc>
   1a984:	uxtb	r0, r2
   1a988:	cmp	r0, #95	; 0x5f
   1a98c:	cmpne	r0, #46	; 0x2e
   1a990:	beq	1a9fc <flatcc_json_parser_generic_json@@Base+0x6cc>
   1a994:	sub	r1, r2, #48	; 0x30
   1a998:	uxtb	r1, r1
   1a99c:	cmp	r1, #9
   1a9a0:	bls	1a9fc <flatcc_json_parser_generic_json@@Base+0x6cc>
   1a9a4:	orr	r1, r2, #32
   1a9a8:	sub	r1, r1, #97	; 0x61
   1a9ac:	uxtb	r1, r1
   1a9b0:	cmp	r1, #25
   1a9b4:	bls	1a9fc <flatcc_json_parser_generic_json@@Base+0x6cc>
   1a9b8:	sub	r1, r6, r4
   1a9bc:	cmp	r1, #2
   1a9c0:	blt	1a9e0 <flatcc_json_parser_generic_json@@Base+0x6b0>
   1a9c4:	cmp	r0, #32
   1a9c8:	bhi	1aa0c <flatcc_json_parser_generic_json@@Base+0x6dc>
   1a9cc:	bne	1a9e0 <flatcc_json_parser_generic_json@@Base+0x6b0>
   1a9d0:	mov	r0, r4
   1a9d4:	ldrb	r1, [r0, #1]!
   1a9d8:	cmp	r1, #32
   1a9dc:	bhi	1aa00 <flatcc_json_parser_generic_json@@Base+0x6d0>
   1a9e0:	mov	r0, r5
   1a9e4:	mov	r1, r4
   1a9e8:	mov	r2, r6
   1a9ec:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1a9f0:	cmp	r0, r4
   1a9f4:	bne	1aa00 <flatcc_json_parser_generic_json@@Base+0x6d0>
   1a9f8:	b	1aa0c <flatcc_json_parser_generic_json@@Base+0x6dc>
   1a9fc:	add	r0, r4, #1
   1aa00:	cmp	r0, r6
   1aa04:	bne	1a970 <flatcc_json_parser_generic_json@@Base+0x640>
   1aa08:	mov	r4, r6
   1aa0c:	cmp	r7, r4
   1aa10:	bne	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1aa14:	b	1b0e8 <flatcc_json_parser_generic_json@@Base+0xdb8>
   1aa18:	add	r4, r4, #2
   1aa1c:	mov	r1, r6
   1aa20:	cmp	r4, r6
   1aa24:	beq	1acdc <flatcc_json_parser_generic_json@@Base+0x9ac>
   1aa28:	ldrb	r0, [r4]
   1aa2c:	sub	r1, r0, #48	; 0x30
   1aa30:	uxtb	r1, r1
   1aa34:	cmp	r1, #9
   1aa38:	bhi	1aa4c <flatcc_json_parser_generic_json@@Base+0x71c>
   1aa3c:	add	r4, r4, #1
   1aa40:	cmp	r6, r4
   1aa44:	bne	1aa28 <flatcc_json_parser_generic_json@@Base+0x6f8>
   1aa48:	b	1abc0 <flatcc_json_parser_generic_json@@Base+0x890>
   1aa4c:	cmp	r4, r6
   1aa50:	mov	r1, r6
   1aa54:	beq	1acdc <flatcc_json_parser_generic_json@@Base+0x9ac>
   1aa58:	orr	r1, r0, #32
   1aa5c:	cmp	r1, #101	; 0x65
   1aa60:	bne	1aac0 <flatcc_json_parser_generic_json@@Base+0x790>
   1aa64:	add	r0, r4, #1
   1aa68:	cmp	r0, r6
   1aa6c:	beq	1abac <flatcc_json_parser_generic_json@@Base+0x87c>
   1aa70:	ldrb	r1, [r0]
   1aa74:	cmp	r1, #45	; 0x2d
   1aa78:	cmpne	r1, #43	; 0x2b
   1aa7c:	addeq	r0, r4, #2
   1aa80:	cmp	r0, r6
   1aa84:	beq	1a6c8 <flatcc_json_parser_generic_json@@Base+0x398>
   1aa88:	ldrb	r1, [r0]
   1aa8c:	sub	r1, r1, #48	; 0x30
   1aa90:	uxtb	r1, r1
   1aa94:	cmp	r1, #9
   1aa98:	bhi	1a6c8 <flatcc_json_parser_generic_json@@Base+0x398>
   1aa9c:	add	r1, r0, #1
   1aaa0:	cmp	r6, r1
   1aaa4:	beq	1abc0 <flatcc_json_parser_generic_json@@Base+0x890>
   1aaa8:	ldrb	r0, [r1], #1
   1aaac:	sub	r2, r0, #48	; 0x30
   1aab0:	uxtb	r2, r2
   1aab4:	cmp	r2, #10
   1aab8:	bcc	1aaa0 <flatcc_json_parser_generic_json@@Base+0x770>
   1aabc:	sub	r4, r1, #1
   1aac0:	cmp	r4, r6
   1aac4:	mov	r1, r6
   1aac8:	beq	1acdc <flatcc_json_parser_generic_json@@Base+0x9ac>
   1aacc:	sub	r2, r0, #9
   1aad0:	cmp	r2, #49	; 0x31
   1aad4:	bhi	1acc8 <flatcc_json_parser_generic_json@@Base+0x998>
   1aad8:	add	r0, pc, #4
   1aadc:	mov	r1, r4
   1aae0:	ldr	pc, [r0, r2, lsl #2]
   1aae4:	andeq	sl, r1, ip, ror #25
   1aae8:	andeq	sl, r1, ip, ror #25
   1aaec:	andeq	sl, r1, ip, ror #25
   1aaf0:	ldrdeq	sl, [r1], -ip
   1aaf4:	andeq	sl, r1, ip, ror #25
   1aaf8:	ldrdeq	sl, [r1], -ip
   1aafc:	ldrdeq	sl, [r1], -ip
   1ab00:	ldrdeq	sl, [r1], -ip
   1ab04:	ldrdeq	sl, [r1], -ip
   1ab08:	ldrdeq	sl, [r1], -ip
   1ab0c:	ldrdeq	sl, [r1], -ip
   1ab10:	ldrdeq	sl, [r1], -ip
   1ab14:	ldrdeq	sl, [r1], -ip
   1ab18:	ldrdeq	sl, [r1], -ip
   1ab1c:	ldrdeq	sl, [r1], -ip
   1ab20:	ldrdeq	sl, [r1], -ip
   1ab24:	ldrdeq	sl, [r1], -ip
   1ab28:	ldrdeq	sl, [r1], -ip
   1ab2c:	ldrdeq	sl, [r1], -ip
   1ab30:	ldrdeq	sl, [r1], -ip
   1ab34:	ldrdeq	sl, [r1], -ip
   1ab38:	ldrdeq	sl, [r1], -ip
   1ab3c:	ldrdeq	sl, [r1], -ip
   1ab40:	andeq	sl, r1, ip, ror #25
   1ab44:	ldrdeq	sl, [r1], -ip
   1ab48:	ldrdeq	sl, [r1], -ip
   1ab4c:	ldrdeq	sl, [r1], -ip
   1ab50:	ldrdeq	sl, [r1], -ip
   1ab54:	ldrdeq	sl, [r1], -ip
   1ab58:	ldrdeq	sl, [r1], -ip
   1ab5c:	ldrdeq	sl, [r1], -ip
   1ab60:	ldrdeq	sl, [r1], -ip
   1ab64:	ldrdeq	sl, [r1], -ip
   1ab68:	ldrdeq	sl, [r1], -ip
   1ab6c:	ldrdeq	sl, [r1], -ip
   1ab70:	andeq	sl, r1, ip, ror #25
   1ab74:	ldrdeq	sl, [r1], -ip
   1ab78:	ldrdeq	sl, [r1], -ip
   1ab7c:	ldrdeq	sl, [r1], -ip
   1ab80:	ldrdeq	sl, [r1], -ip
   1ab84:	ldrdeq	sl, [r1], -ip
   1ab88:	ldrdeq	sl, [r1], -ip
   1ab8c:	ldrdeq	sl, [r1], -ip
   1ab90:	ldrdeq	sl, [r1], -ip
   1ab94:	ldrdeq	sl, [r1], -ip
   1ab98:	ldrdeq	sl, [r1], -ip
   1ab9c:	ldrdeq	sl, [r1], -ip
   1aba0:	ldrdeq	sl, [r1], -ip
   1aba4:	ldrdeq	sl, [r1], -ip
   1aba8:	andeq	sl, r1, ip, ror #25
   1abac:	ldr	r0, [r9]
   1abb0:	cmp	r0, #0
   1abb4:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1abb8:	mov	r0, #6
   1abbc:	b	1abe4 <flatcc_json_parser_generic_json@@Base+0x8b4>
   1abc0:	mov	r1, r6
   1abc4:	ldr	r0, [r9]
   1abc8:	cmp	r0, #0
   1abcc:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1abd0:	b	1afec <flatcc_json_parser_generic_json@@Base+0xcbc>
   1abd4:	ldr	r0, [r9]
   1abd8:	cmp	r0, #0
   1abdc:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1abe0:	mov	r0, #16
   1abe4:	str	r0, [r9]
   1abe8:	ldr	r0, [sp, #8]
   1abec:	ldr	r1, [sp, #4]
   1abf0:	mov	r4, r6
   1abf4:	ldr	r0, [r0]
   1abf8:	sub	r0, r1, r0
   1abfc:	ldr	r1, [sp, #12]
   1ac00:	str	r0, [r1]
   1ac04:	ldr	r0, [sp, #16]
   1ac08:	str	r6, [r0]
   1ac0c:	b	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1ac10:	bne	1ac20 <flatcc_json_parser_generic_json@@Base+0x8f0>
   1ac14:	ldrb	r0, [r7, #2]!
   1ac18:	cmp	r0, #32
   1ac1c:	bhi	1ac30 <flatcc_json_parser_generic_json@@Base+0x900>
   1ac20:	mov	r0, r5
   1ac24:	mov	r2, r6
   1ac28:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1ac2c:	mov	r7, r0
   1ac30:	cmp	r7, r6
   1ac34:	beq	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1ac38:	ldrb	r0, [r7]
   1ac3c:	add	r8, r8, #1
   1ac40:	cmp	r0, #125	; 0x7d
   1ac44:	mov	r4, r7
   1ac48:	bne	1afd8 <flatcc_json_parser_generic_json@@Base+0xca8>
   1ac4c:	b	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1ac50:	bne	1ac60 <flatcc_json_parser_generic_json@@Base+0x930>
   1ac54:	ldrb	r0, [r7, #2]!
   1ac58:	cmp	r0, #32
   1ac5c:	bhi	1ac70 <flatcc_json_parser_generic_json@@Base+0x940>
   1ac60:	mov	r0, r5
   1ac64:	mov	r2, r6
   1ac68:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1ac6c:	mov	r7, r0
   1ac70:	cmp	r7, r6
   1ac74:	beq	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1ac78:	ldrb	r0, [r7]
   1ac7c:	add	r8, r8, #1
   1ac80:	cmp	r0, #93	; 0x5d
   1ac84:	mov	r4, r7
   1ac88:	beq	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1ac8c:	b	1afd8 <flatcc_json_parser_generic_json@@Base+0xca8>
   1ac90:	mov	r1, r0
   1ac94:	cmp	r1, r6
   1ac98:	beq	1acb4 <flatcc_json_parser_generic_json@@Base+0x984>
   1ac9c:	ldrb	r0, [r1]
   1aca0:	cmp	r0, #34	; 0x22
   1aca4:	bne	1acb4 <flatcc_json_parser_generic_json@@Base+0x984>
   1aca8:	add	r4, r1, #1
   1acac:	b	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1acb0:	mov	r1, r6
   1acb4:	ldr	r0, [r9]
   1acb8:	cmp	r0, #0
   1acbc:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1acc0:	mov	r0, #20
   1acc4:	b	1aff0 <flatcc_json_parser_generic_json@@Base+0xcc0>
   1acc8:	cmp	r0, #93	; 0x5d
   1accc:	beq	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1acd0:	cmp	r0, #125	; 0x7d
   1acd4:	mov	r1, r4
   1acd8:	beq	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1acdc:	ldr	r0, [r9]
   1ace0:	cmp	r0, #0
   1ace4:	beq	1afec <flatcc_json_parser_generic_json@@Base+0xcbc>
   1ace8:	mov	r4, r6
   1acec:	subs	r1, r4, r6
   1acf0:	mov	r2, r8
   1acf4:	movwne	r1, #1
   1acf8:	cmp	r8, #0
   1acfc:	movwne	r2, #1
   1ad00:	beq	1b02c <flatcc_json_parser_generic_json@@Base+0xcfc>
   1ad04:	cmp	r4, r6
   1ad08:	beq	1b03c <flatcc_json_parser_generic_json@@Base+0xd0c>
   1ad0c:	ldrb	r1, [sl, r8]
   1ad10:	sub	r0, r6, r4
   1ad14:	cmp	r1, #93	; 0x5d
   1ad18:	bne	1ad6c <flatcc_json_parser_generic_json@@Base+0xa3c>
   1ad1c:	cmp	r0, #2
   1ad20:	blt	1adf8 <flatcc_json_parser_generic_json@@Base+0xac8>
   1ad24:	ldrb	r0, [r4]
   1ad28:	cmp	r0, #32
   1ad2c:	bls	1ade4 <flatcc_json_parser_generic_json@@Base+0xab4>
   1ad30:	mov	r7, r4
   1ad34:	cmp	r7, r6
   1ad38:	mov	r4, r6
   1ad3c:	beq	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ad40:	ldrb	r0, [r7]
   1ad44:	cmp	r0, #44	; 0x2c
   1ad48:	beq	1ae54 <flatcc_json_parser_generic_json@@Base+0xb24>
   1ad4c:	cmp	r0, #93	; 0x5d
   1ad50:	beq	1af30 <flatcc_json_parser_generic_json@@Base+0xc00>
   1ad54:	ldr	r0, [r9]
   1ad58:	mov	r4, r6
   1ad5c:	cmp	r0, #0
   1ad60:	bne	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ad64:	mov	r0, #9
   1ad68:	b	1adb8 <flatcc_json_parser_generic_json@@Base+0xa88>
   1ad6c:	cmp	r0, #2
   1ad70:	blt	1ae30 <flatcc_json_parser_generic_json@@Base+0xb00>
   1ad74:	ldrb	r0, [r4]
   1ad78:	cmp	r0, #32
   1ad7c:	bls	1ae1c <flatcc_json_parser_generic_json@@Base+0xaec>
   1ad80:	mov	r7, r4
   1ad84:	cmp	r7, r6
   1ad88:	mov	r4, r6
   1ad8c:	beq	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ad90:	ldrb	r0, [r7]
   1ad94:	cmp	r0, #44	; 0x2c
   1ad98:	beq	1ae94 <flatcc_json_parser_generic_json@@Base+0xb64>
   1ad9c:	cmp	r0, #125	; 0x7d
   1ada0:	beq	1af30 <flatcc_json_parser_generic_json@@Base+0xc00>
   1ada4:	ldr	r0, [r9]
   1ada8:	mov	r4, r6
   1adac:	cmp	r0, #0
   1adb0:	bne	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1adb4:	mov	r0, #10
   1adb8:	str	r0, [r9]
   1adbc:	ldr	r0, [sp, #8]
   1adc0:	ldr	r1, [sp, #12]
   1adc4:	mov	r4, r6
   1adc8:	ldr	r0, [r0]
   1adcc:	sub	r0, r7, r0
   1add0:	add	r0, r0, #1
   1add4:	str	r0, [r1]
   1add8:	ldr	r0, [sp, #16]
   1addc:	str	r7, [r0]
   1ade0:	b	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ade4:	bne	1adf8 <flatcc_json_parser_generic_json@@Base+0xac8>
   1ade8:	mov	r7, r4
   1adec:	ldrb	r0, [r7, #1]!
   1adf0:	cmp	r0, #32
   1adf4:	bhi	1ae0c <flatcc_json_parser_generic_json@@Base+0xadc>
   1adf8:	mov	r0, r5
   1adfc:	mov	r1, r4
   1ae00:	mov	r2, r6
   1ae04:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1ae08:	mov	r7, r0
   1ae0c:	cmp	r7, r6
   1ae10:	mov	r4, r6
   1ae14:	bne	1ad40 <flatcc_json_parser_generic_json@@Base+0xa10>
   1ae18:	b	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ae1c:	bne	1ae30 <flatcc_json_parser_generic_json@@Base+0xb00>
   1ae20:	mov	r7, r4
   1ae24:	ldrb	r0, [r7, #1]!
   1ae28:	cmp	r0, #32
   1ae2c:	bhi	1ae44 <flatcc_json_parser_generic_json@@Base+0xb14>
   1ae30:	mov	r0, r5
   1ae34:	mov	r1, r4
   1ae38:	mov	r2, r6
   1ae3c:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1ae40:	mov	r7, r0
   1ae44:	cmp	r7, r6
   1ae48:	mov	r4, r6
   1ae4c:	bne	1ad90 <flatcc_json_parser_generic_json@@Base+0xa60>
   1ae50:	b	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ae54:	add	r1, r7, #1
   1ae58:	sub	r0, r6, r1
   1ae5c:	cmp	r0, #2
   1ae60:	blt	1af0c <flatcc_json_parser_generic_json@@Base+0xbdc>
   1ae64:	ldrb	r0, [r1]
   1ae68:	cmp	r0, #32
   1ae6c:	bls	1aefc <flatcc_json_parser_generic_json@@Base+0xbcc>
   1ae70:	mov	r7, r1
   1ae74:	cmp	r7, r6
   1ae78:	bne	1af24 <flatcc_json_parser_generic_json@@Base+0xbf4>
   1ae7c:	ldr	r0, [r9]
   1ae80:	mov	r4, r6
   1ae84:	cmp	r0, #0
   1ae88:	bne	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1ae8c:	mov	r0, #9
   1ae90:	b	1aed0 <flatcc_json_parser_generic_json@@Base+0xba0>
   1ae94:	add	r1, r7, #1
   1ae98:	sub	r0, r6, r1
   1ae9c:	cmp	r0, #2
   1aea0:	blt	1afb4 <flatcc_json_parser_generic_json@@Base+0xc84>
   1aea4:	ldrb	r0, [r1]
   1aea8:	cmp	r0, #32
   1aeac:	bls	1afa4 <flatcc_json_parser_generic_json@@Base+0xc74>
   1aeb0:	mov	r7, r1
   1aeb4:	cmp	r7, r6
   1aeb8:	bne	1afcc <flatcc_json_parser_generic_json@@Base+0xc9c>
   1aebc:	ldr	r0, [r9]
   1aec0:	mov	r4, r6
   1aec4:	cmp	r0, #0
   1aec8:	bne	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1aecc:	mov	r0, #10
   1aed0:	str	r0, [r9]
   1aed4:	ldr	r0, [sp, #8]
   1aed8:	ldr	r1, [sp, #4]
   1aedc:	mov	r4, r6
   1aee0:	ldr	r0, [r0]
   1aee4:	sub	r0, r1, r0
   1aee8:	ldr	r1, [sp, #12]
   1aeec:	str	r0, [r1]
   1aef0:	ldr	r0, [sp, #16]
   1aef4:	str	r6, [r0]
   1aef8:	b	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1aefc:	bne	1af0c <flatcc_json_parser_generic_json@@Base+0xbdc>
   1af00:	ldrb	r0, [r7, #2]!
   1af04:	cmp	r0, #32
   1af08:	bhi	1af1c <flatcc_json_parser_generic_json@@Base+0xbec>
   1af0c:	mov	r0, r5
   1af10:	mov	r2, r6
   1af14:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1af18:	mov	r7, r0
   1af1c:	cmp	r7, r6
   1af20:	beq	1ae7c <flatcc_json_parser_generic_json@@Base+0xb4c>
   1af24:	ldrb	r0, [r7]
   1af28:	cmp	r0, #93	; 0x5d
   1af2c:	bne	1afd8 <flatcc_json_parser_generic_json@@Base+0xca8>
   1af30:	add	r1, r7, #1
   1af34:	sub	r0, r6, r1
   1af38:	cmp	r0, #2
   1af3c:	blt	1af68 <flatcc_json_parser_generic_json@@Base+0xc38>
   1af40:	ldrb	r0, [r1]
   1af44:	cmp	r0, #32
   1af48:	bls	1af54 <flatcc_json_parser_generic_json@@Base+0xc24>
   1af4c:	mov	r4, r1
   1af50:	b	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1af54:	bne	1af68 <flatcc_json_parser_generic_json@@Base+0xc38>
   1af58:	ldrb	r0, [r7, #2]!
   1af5c:	mov	r4, r7
   1af60:	cmp	r0, #32
   1af64:	bhi	1af78 <flatcc_json_parser_generic_json@@Base+0xc48>
   1af68:	mov	r0, r5
   1af6c:	mov	r2, r6
   1af70:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1af74:	mov	r4, r0
   1af78:	subs	r1, r4, r6
   1af7c:	sub	r0, r8, #1
   1af80:	movwne	r1, #1
   1af84:	subs	r2, r8, #1
   1af88:	movwne	r2, #1
   1af8c:	cmp	r8, #1
   1af90:	beq	1b040 <flatcc_json_parser_generic_json@@Base+0xd10>
   1af94:	cmp	r4, r6
   1af98:	mov	r8, r0
   1af9c:	bne	1ad0c <flatcc_json_parser_generic_json@@Base+0x9dc>
   1afa0:	b	1b040 <flatcc_json_parser_generic_json@@Base+0xd10>
   1afa4:	bne	1afb4 <flatcc_json_parser_generic_json@@Base+0xc84>
   1afa8:	ldrb	r0, [r7, #2]!
   1afac:	cmp	r0, #32
   1afb0:	bhi	1afc4 <flatcc_json_parser_generic_json@@Base+0xc94>
   1afb4:	mov	r0, r5
   1afb8:	mov	r2, r6
   1afbc:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1afc0:	mov	r7, r0
   1afc4:	cmp	r7, r6
   1afc8:	beq	1aebc <flatcc_json_parser_generic_json@@Base+0xb8c>
   1afcc:	ldrb	r0, [r7]
   1afd0:	cmp	r0, #125	; 0x7d
   1afd4:	beq	1af30 <flatcc_json_parser_generic_json@@Base+0xc00>
   1afd8:	add	r0, sp, #24
   1afdc:	cmp	r7, r6
   1afe0:	add	r0, r0, r8
   1afe4:	bne	1a384 <flatcc_json_parser_generic_json@@Base+0x54>
   1afe8:	b	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1afec:	mov	r0, #6
   1aff0:	str	r0, [r9]
   1aff4:	ldr	r0, [sp, #8]
   1aff8:	ldr	r2, [sp, #12]
   1affc:	mov	r4, r6
   1b000:	ldr	r0, [r0]
   1b004:	sub	r0, r1, r0
   1b008:	add	r0, r0, #1
   1b00c:	str	r0, [r2]
   1b010:	ldr	r0, [sp, #16]
   1b014:	str	r1, [r0]
   1b018:	b	1acec <flatcc_json_parser_generic_json@@Base+0x9bc>
   1b01c:	mov	r4, r7
   1b020:	mov	r0, r4
   1b024:	sub	sp, fp, #28
   1b028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b02c:	mov	r0, r8
   1b030:	cmp	r1, #0
   1b034:	beq	1b048 <flatcc_json_parser_generic_json@@Base+0xd18>
   1b038:	b	1b09c <flatcc_json_parser_generic_json@@Base+0xd6c>
   1b03c:	mov	r0, r8
   1b040:	cmp	r1, #0
   1b044:	bne	1b09c <flatcc_json_parser_generic_json@@Base+0xd6c>
   1b048:	cmp	r2, #0
   1b04c:	beq	1b09c <flatcc_json_parser_generic_json@@Base+0xd6c>
   1b050:	ldr	r1, [r9]
   1b054:	cmp	r1, #0
   1b058:	bne	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1b05c:	add	r1, sp, #24
   1b060:	add	r0, r1, r0
   1b064:	mov	r1, #10
   1b068:	ldrb	r0, [r0, #-1]
   1b06c:	cmp	r0, #93	; 0x5d
   1b070:	movweq	r1, #9
   1b074:	str	r1, [r9]
   1b078:	ldr	r0, [sp, #8]
   1b07c:	ldr	r1, [sp, #4]
   1b080:	ldr	r0, [r0]
   1b084:	sub	r0, r1, r0
   1b088:	ldr	r1, [sp, #12]
   1b08c:	str	r0, [r1]
   1b090:	ldr	r0, [sp, #16]
   1b094:	str	r6, [r0]
   1b098:	mov	r4, r6
   1b09c:	mov	r0, r4
   1b0a0:	sub	sp, fp, #28
   1b0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0a8:	ldr	r0, [r9]
   1b0ac:	cmp	r0, #0
   1b0b0:	bne	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1b0b4:	mov	r0, #10
   1b0b8:	str	r0, [r9]
   1b0bc:	b	1b078 <flatcc_json_parser_generic_json@@Base+0xd48>
   1b0c0:	ldr	r0, [r9]
   1b0c4:	cmp	r0, #0
   1b0c8:	bne	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1b0cc:	mov	r0, #4
   1b0d0:	b	1b0f8 <flatcc_json_parser_generic_json@@Base+0xdc8>
   1b0d4:	ldr	r0, [r9]
   1b0d8:	cmp	r0, #0
   1b0dc:	bne	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1b0e0:	mov	r0, #2
   1b0e4:	b	1b0f8 <flatcc_json_parser_generic_json@@Base+0xdc8>
   1b0e8:	ldr	r0, [r9]
   1b0ec:	cmp	r0, #0
   1b0f0:	bne	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>
   1b0f4:	mov	r0, #5
   1b0f8:	str	r0, [r9]
   1b0fc:	ldr	r0, [sp, #8]
   1b100:	ldr	r1, [sp, #12]
   1b104:	ldr	r0, [r0]
   1b108:	sub	r0, r7, r0
   1b10c:	add	r0, r0, #1
   1b110:	str	r0, [r1]
   1b114:	ldr	r0, [sp, #16]
   1b118:	str	r7, [r0]
   1b11c:	b	1b098 <flatcc_json_parser_generic_json@@Base+0xd68>

0001b120 <flatcc_json_parser_double@@Base>:
   1b120:	push	{r4, r5, r6, r7, fp, lr}
   1b124:	add	fp, sp, #16
   1b128:	mov	r5, r0
   1b12c:	mov	r0, #0
   1b130:	mov	r6, r1
   1b134:	cmp	r1, r2
   1b138:	str	r0, [r3]
   1b13c:	str	r0, [r3, #4]
   1b140:	beq	1b1e4 <flatcc_json_parser_double@@Base+0xc4>
   1b144:	mov	r0, r6
   1b148:	mov	r4, r2
   1b14c:	mov	r7, r3
   1b150:	ldrb	r1, [r0], #1
   1b154:	cmp	r1, #45	; 0x2d
   1b158:	movne	r0, r6
   1b15c:	sub	r2, r2, r0
   1b160:	cmp	r2, #2
   1b164:	blt	1b1a4 <flatcc_json_parser_double@@Base+0x84>
   1b168:	sub	r1, r1, #45	; 0x2d
   1b16c:	clz	r1, r1
   1b170:	lsr	r1, r1, #5
   1b174:	ldrb	r1, [r6, r1]
   1b178:	cmp	r1, #46	; 0x2e
   1b17c:	beq	1b194 <flatcc_json_parser_double@@Base+0x74>
   1b180:	cmp	r1, #48	; 0x30
   1b184:	bne	1b1a4 <flatcc_json_parser_double@@Base+0x84>
   1b188:	ldrb	r0, [r0, #1]
   1b18c:	cmp	r0, #48	; 0x30
   1b190:	bne	1b1a4 <flatcc_json_parser_double@@Base+0x84>
   1b194:	ldr	r0, [r5, #24]
   1b198:	cmp	r0, #0
   1b19c:	bne	1b210 <flatcc_json_parser_double@@Base+0xf0>
   1b1a0:	b	1b1f4 <flatcc_json_parser_double@@Base+0xd4>
   1b1a4:	sub	r1, r4, r6
   1b1a8:	mov	r0, r6
   1b1ac:	mov	r2, r7
   1b1b0:	bl	1b218 <flatcc_json_parser_double@@Base+0xf8>
   1b1b4:	cmp	r0, #0
   1b1b8:	cmpne	r0, r6
   1b1bc:	bne	1b214 <flatcc_json_parser_double@@Base+0xf4>
   1b1c0:	vldr	d0, [r7]
   1b1c4:	bl	12918 <__isinf@plt>
   1b1c8:	ldr	r1, [r5, #24]
   1b1cc:	cmp	r0, #0
   1b1d0:	beq	1b1ec <flatcc_json_parser_double@@Base+0xcc>
   1b1d4:	cmp	r1, #0
   1b1d8:	bne	1b210 <flatcc_json_parser_double@@Base+0xf0>
   1b1dc:	mov	r0, #7
   1b1e0:	b	1b1f8 <flatcc_json_parser_double@@Base+0xd8>
   1b1e4:	mov	r0, r6
   1b1e8:	pop	{r4, r5, r6, r7, fp, pc}
   1b1ec:	cmp	r1, #0
   1b1f0:	bne	1b210 <flatcc_json_parser_double@@Base+0xf0>
   1b1f4:	mov	r0, #6
   1b1f8:	str	r6, [r5, #36]	; 0x24
   1b1fc:	ldr	r1, [r5, #4]
   1b200:	sub	r1, r6, r1
   1b204:	add	r1, r1, #1
   1b208:	str	r1, [r5, #20]
   1b20c:	str	r0, [r5, #24]
   1b210:	mov	r0, r4
   1b214:	pop	{r4, r5, r6, r7, fp, pc}
   1b218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b21c:	add	fp, sp, #28
   1b220:	sub	sp, sp, #36	; 0x24
   1b224:	cmp	r1, #1000	; 0x3e8
   1b228:	mov	r3, r1
   1b22c:	mov	r5, #0
   1b230:	mov	r9, r0
   1b234:	movge	r3, #1000	; 0x3e8
   1b238:	str	r5, [r2]
   1b23c:	str	r5, [r2, #4]
   1b240:	add	ip, r0, r3
   1b244:	add	lr, ip, #1
   1b248:	cmp	lr, r0
   1b24c:	beq	1b2a4 <flatcc_json_parser_double@@Base+0x184>
   1b250:	ldrb	r0, [r9]
   1b254:	mov	r4, r9
   1b258:	cmp	r0, #45	; 0x2d
   1b25c:	bne	1b274 <flatcc_json_parser_double@@Base+0x154>
   1b260:	cmp	r3, #0
   1b264:	beq	1b648 <flatcc_json_parser_double@@Base+0x528>
   1b268:	add	r4, r9, #1
   1b26c:	mov	r5, #1
   1b270:	ldrb	r0, [r4]
   1b274:	cmp	r0, #48	; 0x30
   1b278:	bne	1b2b4 <flatcc_json_parser_double@@Base+0x194>
   1b27c:	add	r6, r4, #1
   1b280:	cmp	r4, ip
   1b284:	beq	1b328 <flatcc_json_parser_double@@Base+0x208>
   1b288:	ldrb	r1, [r6]
   1b28c:	orr	r0, r1, #32
   1b290:	cmp	r0, #120	; 0x78
   1b294:	bne	1b2f4 <flatcc_json_parser_double@@Base+0x1d4>
   1b298:	mov	r0, #0
   1b29c:	str	r0, [r2]
   1b2a0:	str	r0, [r2, #4]
   1b2a4:	mov	r2, r9
   1b2a8:	mov	r0, r2
   1b2ac:	sub	sp, fp, #28
   1b2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2b4:	sub	r1, r0, #49	; 0x31
   1b2b8:	uxtb	r1, r1
   1b2bc:	cmp	r1, #9
   1b2c0:	bcc	1b2dc <flatcc_json_parser_double@@Base+0x1bc>
   1b2c4:	cmp	r5, #0
   1b2c8:	movne	r9, #0
   1b2cc:	mov	r2, r9
   1b2d0:	mov	r0, r2
   1b2d4:	sub	sp, fp, #28
   1b2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2dc:	sub	r0, r0, #48	; 0x30
   1b2e0:	add	r6, r4, #1
   1b2e4:	asr	r1, r0, #31
   1b2e8:	cmp	r6, lr
   1b2ec:	bne	1b338 <flatcc_json_parser_double@@Base+0x218>
   1b2f0:	b	1b648 <flatcc_json_parser_double@@Base+0x528>
   1b2f4:	cmp	r1, #48	; 0x30
   1b2f8:	mov	r0, #0
   1b2fc:	mov	r1, #0
   1b300:	bne	1b330 <flatcc_json_parser_double@@Base+0x210>
   1b304:	sub	r0, ip, #1
   1b308:	mov	r1, r4
   1b30c:	cmp	r0, r4
   1b310:	beq	1b324 <flatcc_json_parser_double@@Base+0x204>
   1b314:	ldrb	r7, [r1, #2]
   1b318:	add	r4, r1, #1
   1b31c:	cmp	r7, #48	; 0x30
   1b320:	beq	1b308 <flatcc_json_parser_double@@Base+0x1e8>
   1b324:	add	r6, r1, #2
   1b328:	mov	r0, #0
   1b32c:	mov	r1, #0
   1b330:	cmp	r6, lr
   1b334:	beq	1b648 <flatcc_json_parser_double@@Base+0x528>
   1b338:	mov	sl, #10
   1b33c:	mov	r7, r6
   1b340:	str	r2, [sp, #20]
   1b344:	ldrb	r8, [r7]
   1b348:	sub	r2, r8, #48	; 0x30
   1b34c:	uxtb	r4, r2
   1b350:	mov	r2, #0
   1b354:	cmp	r4, #9
   1b358:	bhi	1b398 <flatcc_json_parser_double@@Base+0x278>
   1b35c:	movw	r4, #39320	; 0x9998
   1b360:	movt	r4, #39321	; 0x9999
   1b364:	subs	r4, r4, r0
   1b368:	movw	r4, #39321	; 0x9999
   1b36c:	movt	r4, #6553	; 0x1999
   1b370:	sbcs	r4, r4, r1
   1b374:	bcc	1b3b4 <flatcc_json_parser_double@@Base+0x294>
   1b378:	add	r1, r1, r1, lsl #2
   1b37c:	add	r7, r7, #1
   1b380:	lsl	r1, r1, #1
   1b384:	umlal	r8, r1, r0, sl
   1b388:	subs	r0, r8, #48	; 0x30
   1b38c:	sbc	r1, r1, #0
   1b390:	cmp	lr, r7
   1b394:	bne	1b344 <flatcc_json_parser_double@@Base+0x224>
   1b398:	mov	r8, r0
   1b39c:	mov	sl, r1
   1b3a0:	mov	r0, #0
   1b3a4:	cmp	r7, lr
   1b3a8:	str	r0, [sp, #24]
   1b3ac:	bne	1b3dc <flatcc_json_parser_double@@Base+0x2bc>
   1b3b0:	b	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b3b4:	adds	r4, r0, #1
   1b3b8:	adc	sl, r1, #0
   1b3bc:	cmp	r8, #52	; 0x34
   1b3c0:	mov	r8, r4
   1b3c4:	movls	r8, r0
   1b3c8:	movls	sl, r1
   1b3cc:	mov	r0, #1
   1b3d0:	cmp	r7, lr
   1b3d4:	str	r0, [sp, #24]
   1b3d8:	beq	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b3dc:	sub	r0, r7, r6
   1b3e0:	mov	r6, #0
   1b3e4:	str	r0, [sp, #16]
   1b3e8:	sub	r0, r3, r7
   1b3ec:	add	r0, r9, r0
   1b3f0:	ldrb	r1, [r7]
   1b3f4:	cmp	r1, #48	; 0x30
   1b3f8:	bne	1b500 <flatcc_json_parser_double@@Base+0x3e0>
   1b3fc:	add	r1, r7, #1
   1b400:	cmp	r7, ip
   1b404:	sub	r0, r0, #1
   1b408:	add	r6, r6, #1
   1b40c:	mov	r7, r1
   1b410:	bne	1b3f0 <flatcc_json_parser_double@@Base+0x2d0>
   1b414:	mov	r7, r1
   1b418:	mov	r2, #0
   1b41c:	cmp	r7, lr
   1b420:	beq	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b424:	ldrb	r0, [r7]
   1b428:	cmp	r0, #46	; 0x2e
   1b42c:	bne	1b620 <flatcc_json_parser_double@@Base+0x500>
   1b430:	mov	r4, r7
   1b434:	ldrb	r0, [r4, #1]!
   1b438:	sub	r1, r0, #48	; 0x30
   1b43c:	uxtb	r1, r1
   1b440:	cmp	r1, #9
   1b444:	bhi	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b448:	cmp	r7, ip
   1b44c:	beq	1b55c <flatcc_json_parser_double@@Base+0x43c>
   1b450:	sub	r1, r3, r7
   1b454:	str	r4, [sp, #8]
   1b458:	add	r1, r1, r9
   1b45c:	sub	r1, r1, #1
   1b460:	str	r1, [sp, #12]
   1b464:	mov	r1, #0
   1b468:	mov	r3, r1
   1b46c:	movw	r1, #39320	; 0x9998
   1b470:	movt	r1, #39321	; 0x9999
   1b474:	subs	r1, r1, r8
   1b478:	movw	r1, #39321	; 0x9999
   1b47c:	movt	r1, #6553	; 0x1999
   1b480:	sbcs	r1, r1, sl
   1b484:	bcc	1b56c <flatcc_json_parser_double@@Base+0x44c>
   1b488:	add	r1, sl, sl, lsl #2
   1b48c:	uxtb	r0, r0
   1b490:	mov	r4, #10
   1b494:	lsl	r1, r1, #1
   1b498:	umlal	r0, r1, r8, r4
   1b49c:	add	r4, r7, r3
   1b4a0:	subs	r8, r0, #48	; 0x30
   1b4a4:	ldr	r0, [sp, #12]
   1b4a8:	sbc	sl, r1, #0
   1b4ac:	cmp	r0, r3
   1b4b0:	beq	1b4e4 <flatcc_json_parser_double@@Base+0x3c4>
   1b4b4:	ldrb	r0, [r4, #2]
   1b4b8:	str	sl, [sp, #28]
   1b4bc:	mov	sl, r8
   1b4c0:	mov	r8, r5
   1b4c4:	add	r1, r3, #1
   1b4c8:	sub	r5, r0, #48	; 0x30
   1b4cc:	uxtb	r5, r5
   1b4d0:	cmp	r5, #10
   1b4d4:	mov	r5, r8
   1b4d8:	mov	r8, sl
   1b4dc:	ldr	sl, [sp, #28]
   1b4e0:	bcc	1b468 <flatcc_json_parser_double@@Base+0x348>
   1b4e4:	mvn	r0, r3
   1b4e8:	add	r7, r4, #2
   1b4ec:	add	r6, r0, r6
   1b4f0:	ldr	r4, [sp, #8]
   1b4f4:	cmp	r7, lr
   1b4f8:	bne	1b5b0 <flatcc_json_parser_double@@Base+0x490>
   1b4fc:	b	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b500:	sub	r1, r1, #49	; 0x31
   1b504:	uxtb	r1, r1
   1b508:	cmp	r1, #8
   1b50c:	bhi	1b54c <flatcc_json_parser_double@@Base+0x42c>
   1b510:	mvn	r2, #0
   1b514:	mov	r1, r2
   1b518:	cmp	r0, #0
   1b51c:	beq	1b53c <flatcc_json_parser_double@@Base+0x41c>
   1b520:	ldrb	r2, [r7, -r1]
   1b524:	sub	r0, r0, #1
   1b528:	sub	r2, r2, #48	; 0x30
   1b52c:	uxtb	r4, r2
   1b530:	sub	r2, r1, #1
   1b534:	cmp	r4, #10
   1b538:	bcc	1b514 <flatcc_json_parser_double@@Base+0x3f4>
   1b53c:	mov	r0, #1
   1b540:	sub	r6, r6, r1
   1b544:	sub	r7, r7, r1
   1b548:	str	r0, [sp, #24]
   1b54c:	mov	r2, #0
   1b550:	cmp	r7, lr
   1b554:	bne	1b424 <flatcc_json_parser_double@@Base+0x304>
   1b558:	b	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b55c:	mov	r7, r4
   1b560:	cmp	r7, lr
   1b564:	bne	1b5b0 <flatcc_json_parser_double@@Base+0x490>
   1b568:	b	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b56c:	add	r1, r7, r3
   1b570:	sub	r6, r6, r3
   1b574:	add	r7, r1, #1
   1b578:	ldr	r1, [sp, #24]
   1b57c:	cmp	r1, #0
   1b580:	bne	1b5a4 <flatcc_json_parser_double@@Base+0x484>
   1b584:	uxtb	r0, r0
   1b588:	adds	r1, r8, #1
   1b58c:	adc	r3, sl, #0
   1b590:	cmp	r0, #52	; 0x34
   1b594:	mov	r0, #1
   1b598:	movhi	r8, r1
   1b59c:	movhi	sl, r3
   1b5a0:	str	r0, [sp, #24]
   1b5a4:	ldr	r4, [sp, #8]
   1b5a8:	cmp	r7, lr
   1b5ac:	beq	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b5b0:	ldr	r1, [sp, #16]
   1b5b4:	sub	r0, r7, r4
   1b5b8:	add	r1, r0, r1
   1b5bc:	str	r1, [sp, #16]
   1b5c0:	ldrb	r0, [r7]
   1b5c4:	cmp	r0, #48	; 0x30
   1b5c8:	bne	1b5e0 <flatcc_json_parser_double@@Base+0x4c0>
   1b5cc:	add	r7, r7, #1
   1b5d0:	add	r6, r6, #1
   1b5d4:	cmp	lr, r7
   1b5d8:	bne	1b5c0 <flatcc_json_parser_double@@Base+0x4a0>
   1b5dc:	b	1b620 <flatcc_json_parser_double@@Base+0x500>
   1b5e0:	sub	r0, r0, #49	; 0x31
   1b5e4:	uxtb	r0, r0
   1b5e8:	cmp	r0, #8
   1b5ec:	bhi	1b620 <flatcc_json_parser_double@@Base+0x500>
   1b5f0:	mov	r0, r7
   1b5f4:	cmp	ip, r7
   1b5f8:	beq	1b614 <flatcc_json_parser_double@@Base+0x4f4>
   1b5fc:	ldrb	r1, [r0, #1]
   1b600:	add	r7, r0, #1
   1b604:	sub	r1, r1, #48	; 0x30
   1b608:	uxtb	r1, r1
   1b60c:	cmp	r1, #10
   1b610:	bcc	1b5f0 <flatcc_json_parser_double@@Base+0x4d0>
   1b614:	add	r7, r0, #1
   1b618:	mov	r0, #1
   1b61c:	str	r0, [sp, #24]
   1b620:	cmp	r7, lr
   1b624:	beq	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b628:	ldrb	r0, [r7]
   1b62c:	mov	r4, #0
   1b630:	orr	r0, r0, #32
   1b634:	cmp	r0, #101	; 0x65
   1b638:	bne	1b658 <flatcc_json_parser_double@@Base+0x538>
   1b63c:	sub	r0, lr, r7
   1b640:	cmp	r0, #2
   1b644:	bge	1b6cc <flatcc_json_parser_double@@Base+0x5ac>
   1b648:	mov	r2, #0
   1b64c:	mov	r0, r2
   1b650:	sub	sp, fp, #28
   1b654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b658:	mov	r0, #0
   1b65c:	cmp	r7, lr
   1b660:	mov	r2, #0
   1b664:	beq	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b668:	vmov.i32	d16, #0	; 0x00000000
   1b66c:	cmp	r4, #0
   1b670:	rsbne	r0, r0, #0
   1b674:	orrs	r1, r8, sl
   1b678:	beq	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b67c:	ldr	r2, [sp, #16]
   1b680:	add	r1, r2, r6
   1b684:	add	r4, r1, r0
   1b688:	cmn	r4, #324	; 0x144
   1b68c:	blt	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b690:	movw	r0, #310	; 0x136
   1b694:	cmp	r4, r0
   1b698:	ble	1b700 <flatcc_json_parser_double@@Base+0x5e0>
   1b69c:	vldr	d16, [pc, #1004]	; 1ba90 <flatcc_json_parser_double@@Base+0x970>
   1b6a0:	ldr	r4, [sp, #20]
   1b6a4:	vstr	d16, [r4]
   1b6a8:	cmp	r5, #0
   1b6ac:	beq	1b6bc <flatcc_json_parser_double@@Base+0x59c>
   1b6b0:	vldr	d16, [r4]
   1b6b4:	vneg.f64	d16, d16
   1b6b8:	vstr	d16, [r4]
   1b6bc:	mov	r2, r7
   1b6c0:	mov	r0, r2
   1b6c4:	sub	sp, fp, #28
   1b6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6cc:	mov	r3, r7
   1b6d0:	ldrb	r0, [r3, #1]!
   1b6d4:	cmp	r0, #45	; 0x2d
   1b6d8:	beq	1b7fc <flatcc_json_parser_double@@Base+0x6dc>
   1b6dc:	mov	r4, #0
   1b6e0:	cmp	r0, #43	; 0x2b
   1b6e4:	bne	1b80c <flatcc_json_parser_double@@Base+0x6ec>
   1b6e8:	add	r3, r7, #2
   1b6ec:	mov	r2, #0
   1b6f0:	cmp	r3, lr
   1b6f4:	beq	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b6f8:	mov	r4, #0
   1b6fc:	b	1b80c <flatcc_json_parser_double@@Base+0x6ec>
   1b700:	mov	r0, #0
   1b704:	mov	r6, r2
   1b708:	cmp	r0, sl, lsr #21
   1b70c:	bne	1b870 <flatcc_json_parser_double@@Base+0x750>
   1b710:	cmp	r4, #22
   1b714:	bhi	1b870 <flatcc_json_parser_double@@Base+0x750>
   1b718:	mov	r0, r8
   1b71c:	mov	r1, sl
   1b720:	bl	1dfcc <flatcc_json_parser_struct_as_root@@Base+0x420>
   1b724:	vmov	d16, r0, r1
   1b728:	sub	r2, r4, r6
   1b72c:	add	r0, r2, #22
   1b730:	cmp	r0, #44	; 0x2c
   1b734:	bhi	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b738:	add	r1, pc, #0
   1b73c:	ldr	pc, [r1, r0, lsl #2]
   1b740:	strdeq	fp, [r1], -r4
   1b744:	ldrdeq	fp, [r1], -ip
   1b748:	andeq	fp, r1, r4, ror #17
   1b74c:	andeq	fp, r1, ip, ror #17
   1b750:	strdeq	fp, [r1], -r4
   1b754:	strdeq	fp, [r1], -ip
   1b758:	andeq	fp, r1, r4, lsl #18
   1b75c:	andeq	fp, r1, ip, lsl #18
   1b760:	andeq	fp, r1, r4, lsl r9
   1b764:	andeq	fp, r1, ip, lsl r9
   1b768:	andeq	fp, r1, r4, lsr #18
   1b76c:	andeq	fp, r1, ip, lsr #18
   1b770:	andeq	fp, r1, r4, lsr r9
   1b774:	andeq	fp, r1, ip, lsr r9
   1b778:	andeq	fp, r1, r4, asr #18
   1b77c:	andeq	fp, r1, ip, asr #18
   1b780:	andeq	fp, r1, r4, asr r9
   1b784:	andeq	fp, r1, ip, asr r9
   1b788:	andeq	fp, r1, r4, ror #18
   1b78c:	andeq	fp, r1, ip, ror #18
   1b790:	andeq	fp, r1, r4, ror r9
   1b794:	andeq	fp, r1, ip, ror r9
   1b798:	andeq	fp, r1, r0, lsr #13
   1b79c:	andeq	fp, r1, r8, lsl #19
   1b7a0:	muleq	r1, r4, r9
   1b7a4:	andeq	fp, r1, r0, lsr #19
   1b7a8:	andeq	fp, r1, ip, lsr #19
   1b7ac:			; <UNDEFINED> instruction: 0x0001b9b8
   1b7b0:	andeq	fp, r1, r4, asr #19
   1b7b4:	ldrdeq	fp, [r1], -r0
   1b7b8:	ldrdeq	fp, [r1], -ip
   1b7bc:	andeq	fp, r1, r8, ror #19
   1b7c0:	strdeq	fp, [r1], -r4
   1b7c4:	andeq	fp, r1, r0, lsl #20
   1b7c8:	andeq	fp, r1, ip, lsl #20
   1b7cc:	andeq	fp, r1, r8, lsl sl
   1b7d0:	andeq	fp, r1, r4, lsr #20
   1b7d4:	andeq	fp, r1, r0, lsr sl
   1b7d8:	andeq	fp, r1, ip, lsr sl
   1b7dc:	andeq	fp, r1, r8, asr #20
   1b7e0:	andeq	fp, r1, r4, asr sl
   1b7e4:	andeq	fp, r1, r0, ror #20
   1b7e8:	andeq	fp, r1, ip, ror #20
   1b7ec:	andeq	fp, r1, r8, ror sl
   1b7f0:	andeq	fp, r1, r4, lsl #21
   1b7f4:	vldr	d17, [pc, #828]	; 1bb38 <flatcc_json_parser_double@@Base+0xa18>
   1b7f8:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b7fc:	add	r3, r7, #2
   1b800:	mov	r4, #1
   1b804:	cmp	r3, lr
   1b808:	beq	1b8cc <flatcc_json_parser_double@@Base+0x7ac>
   1b80c:	ldrb	r0, [r3]
   1b810:	mov	r2, #0
   1b814:	sub	r0, r0, #48	; 0x30
   1b818:	uxtb	r1, r0
   1b81c:	cmp	r1, #9
   1b820:	bhi	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b824:	cmp	r3, ip
   1b828:	beq	1b85c <flatcc_json_parser_double@@Base+0x73c>
   1b82c:	ldrb	r1, [r3, #1]
   1b830:	sub	r2, r1, #48	; 0x30
   1b834:	uxtb	r2, r2
   1b838:	cmp	r2, #9
   1b83c:	bhi	1b85c <flatcc_json_parser_double@@Base+0x73c>
   1b840:	cmp	r0, #32768	; 0x8000
   1b844:	add	r3, r3, #1
   1b848:	addlt	r0, r0, r0, lsl #2
   1b84c:	addlt	r0, r1, r0, lsl #1
   1b850:	sublt	r0, r0, #48	; 0x30
   1b854:	cmp	ip, r3
   1b858:	bne	1b82c <flatcc_json_parser_double@@Base+0x70c>
   1b85c:	add	r7, r3, #1
   1b860:	cmp	r7, lr
   1b864:	mov	r2, #0
   1b868:	bne	1b668 <flatcc_json_parser_double@@Base+0x548>
   1b86c:	b	1b8d0 <flatcc_json_parser_double@@Base+0x7b0>
   1b870:	ldr	r0, [sp, #24]
   1b874:	ldr	r3, [sp, #20]
   1b878:	mov	r2, r4
   1b87c:	mov	r1, sl
   1b880:	str	r0, [sp]
   1b884:	str	r3, [sp, #4]
   1b888:	mov	r4, r3
   1b88c:	mov	r0, r8
   1b890:	mov	r3, r6
   1b894:	bl	192b8 <grisu3_diy_fp_encode_double@@Base>
   1b898:	cmp	r0, #0
   1b89c:	bne	1b6a8 <flatcc_json_parser_double@@Base+0x588>
   1b8a0:	add	r1, sp, #32
   1b8a4:	mov	r0, r9
   1b8a8:	bl	1299c <strtod@plt>
   1b8ac:	vstr	d0, [r4]
   1b8b0:	ldr	r0, [sp, #32]
   1b8b4:	cmp	r0, r7
   1b8b8:	movcc	r7, r0
   1b8bc:	mov	r2, r7
   1b8c0:	mov	r0, r2
   1b8c4:	sub	sp, fp, #28
   1b8c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8cc:	mov	r2, #0
   1b8d0:	mov	r0, r2
   1b8d4:	sub	sp, fp, #28
   1b8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8dc:	vldr	d17, [pc, #436]	; 1ba98 <flatcc_json_parser_double@@Base+0x978>
   1b8e0:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b8e4:	vldr	d17, [pc, #436]	; 1baa0 <flatcc_json_parser_double@@Base+0x980>
   1b8e8:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b8ec:	vldr	d17, [pc, #436]	; 1baa8 <flatcc_json_parser_double@@Base+0x988>
   1b8f0:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b8f4:	vldr	d17, [pc, #436]	; 1bab0 <flatcc_json_parser_double@@Base+0x990>
   1b8f8:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b8fc:	vldr	d17, [pc, #436]	; 1bab8 <flatcc_json_parser_double@@Base+0x998>
   1b900:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b904:	vldr	d17, [pc, #436]	; 1bac0 <flatcc_json_parser_double@@Base+0x9a0>
   1b908:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b90c:	vldr	d17, [pc, #436]	; 1bac8 <flatcc_json_parser_double@@Base+0x9a8>
   1b910:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b914:	vldr	d17, [pc, #436]	; 1bad0 <flatcc_json_parser_double@@Base+0x9b0>
   1b918:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b91c:	vldr	d17, [pc, #436]	; 1bad8 <flatcc_json_parser_double@@Base+0x9b8>
   1b920:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b924:	vldr	d17, [pc, #436]	; 1bae0 <flatcc_json_parser_double@@Base+0x9c0>
   1b928:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b92c:	vldr	d17, [pc, #436]	; 1bae8 <flatcc_json_parser_double@@Base+0x9c8>
   1b930:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b934:	vldr	d17, [pc, #436]	; 1baf0 <flatcc_json_parser_double@@Base+0x9d0>
   1b938:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b93c:	vldr	d17, [pc, #436]	; 1baf8 <flatcc_json_parser_double@@Base+0x9d8>
   1b940:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b944:	vldr	d17, [pc, #436]	; 1bb00 <flatcc_json_parser_double@@Base+0x9e0>
   1b948:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b94c:	vldr	d17, [pc, #436]	; 1bb08 <flatcc_json_parser_double@@Base+0x9e8>
   1b950:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b954:	vldr	d17, [pc, #436]	; 1bb10 <flatcc_json_parser_double@@Base+0x9f0>
   1b958:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b95c:	vldr	d17, [pc, #436]	; 1bb18 <flatcc_json_parser_double@@Base+0x9f8>
   1b960:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b964:	vldr	d17, [pc, #436]	; 1bb20 <flatcc_json_parser_double@@Base+0xa00>
   1b968:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b96c:	vldr	d17, [pc, #436]	; 1bb28 <flatcc_json_parser_double@@Base+0xa08>
   1b970:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b974:	vldr	d17, [pc, #436]	; 1bb30 <flatcc_json_parser_double@@Base+0xa10>
   1b978:	b	1b980 <flatcc_json_parser_double@@Base+0x860>
   1b97c:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b980:	vdiv.f64	d16, d16, d17
   1b984:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b988:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b98c:	vmul.f64	d16, d16, d17
   1b990:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b994:	vldr	d17, [pc, #404]	; 1bb30 <flatcc_json_parser_double@@Base+0xa10>
   1b998:	vmul.f64	d16, d16, d17
   1b99c:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9a0:	vldr	d17, [pc, #384]	; 1bb28 <flatcc_json_parser_double@@Base+0xa08>
   1b9a4:	vmul.f64	d16, d16, d17
   1b9a8:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9ac:	vldr	d17, [pc, #364]	; 1bb20 <flatcc_json_parser_double@@Base+0xa00>
   1b9b0:	vmul.f64	d16, d16, d17
   1b9b4:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9b8:	vldr	d17, [pc, #344]	; 1bb18 <flatcc_json_parser_double@@Base+0x9f8>
   1b9bc:	vmul.f64	d16, d16, d17
   1b9c0:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9c4:	vldr	d17, [pc, #324]	; 1bb10 <flatcc_json_parser_double@@Base+0x9f0>
   1b9c8:	vmul.f64	d16, d16, d17
   1b9cc:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9d0:	vldr	d17, [pc, #304]	; 1bb08 <flatcc_json_parser_double@@Base+0x9e8>
   1b9d4:	vmul.f64	d16, d16, d17
   1b9d8:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9dc:	vldr	d17, [pc, #284]	; 1bb00 <flatcc_json_parser_double@@Base+0x9e0>
   1b9e0:	vmul.f64	d16, d16, d17
   1b9e4:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9e8:	vldr	d17, [pc, #264]	; 1baf8 <flatcc_json_parser_double@@Base+0x9d8>
   1b9ec:	vmul.f64	d16, d16, d17
   1b9f0:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1b9f4:	vldr	d17, [pc, #244]	; 1baf0 <flatcc_json_parser_double@@Base+0x9d0>
   1b9f8:	vmul.f64	d16, d16, d17
   1b9fc:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba00:	vldr	d17, [pc, #224]	; 1bae8 <flatcc_json_parser_double@@Base+0x9c8>
   1ba04:	vmul.f64	d16, d16, d17
   1ba08:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba0c:	vldr	d17, [pc, #204]	; 1bae0 <flatcc_json_parser_double@@Base+0x9c0>
   1ba10:	vmul.f64	d16, d16, d17
   1ba14:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba18:	vldr	d17, [pc, #184]	; 1bad8 <flatcc_json_parser_double@@Base+0x9b8>
   1ba1c:	vmul.f64	d16, d16, d17
   1ba20:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba24:	vldr	d17, [pc, #164]	; 1bad0 <flatcc_json_parser_double@@Base+0x9b0>
   1ba28:	vmul.f64	d16, d16, d17
   1ba2c:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba30:	vldr	d17, [pc, #144]	; 1bac8 <flatcc_json_parser_double@@Base+0x9a8>
   1ba34:	vmul.f64	d16, d16, d17
   1ba38:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba3c:	vldr	d17, [pc, #124]	; 1bac0 <flatcc_json_parser_double@@Base+0x9a0>
   1ba40:	vmul.f64	d16, d16, d17
   1ba44:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba48:	vldr	d17, [pc, #104]	; 1bab8 <flatcc_json_parser_double@@Base+0x998>
   1ba4c:	vmul.f64	d16, d16, d17
   1ba50:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba54:	vldr	d17, [pc, #84]	; 1bab0 <flatcc_json_parser_double@@Base+0x990>
   1ba58:	vmul.f64	d16, d16, d17
   1ba5c:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba60:	vldr	d17, [pc, #64]	; 1baa8 <flatcc_json_parser_double@@Base+0x988>
   1ba64:	vmul.f64	d16, d16, d17
   1ba68:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba6c:	vldr	d17, [pc, #44]	; 1baa0 <flatcc_json_parser_double@@Base+0x980>
   1ba70:	vmul.f64	d16, d16, d17
   1ba74:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba78:	vldr	d17, [pc, #24]	; 1ba98 <flatcc_json_parser_double@@Base+0x978>
   1ba7c:	vmul.f64	d16, d16, d17
   1ba80:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba84:	vldr	d17, [pc, #172]	; 1bb38 <flatcc_json_parser_double@@Base+0xa18>
   1ba88:	vmul.f64	d16, d16, d17
   1ba8c:	b	1b6a0 <flatcc_json_parser_double@@Base+0x580>
   1ba90:	andeq	r0, r0, r0
   1ba94:	svcvc	0x00f00000	; IMB
   1ba98:	usatle	lr, #2, r0, asr #30
   1ba9c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1baa0:	ldmvc	r5!, {r6, sl, fp, pc}
   1baa4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1baa8:	addsvs	r3, r1, r0, lsl #26
   1baac:	mvnmi	r5, #228, 16	; 0xe40000
   1bab0:	strbvs	ip, [lr, -r0, lsl #16]
   1bab4:			; <UNDEFINED> instruction: 0x43abc16d
   1bab8:	ldrbhi	sl, [r8]
   1babc:	cmnmi	r6, #1459617792	; 0x57000000
   1bac0:	strbcc	r8, [r0, r0]!
   1bac4:	movtmi	ip, #4985	; 0x1379
   1bac8:	ldrtcs	r0, [r4], -r0
   1bacc:	movwmi	r6, #52213	; 0xcbf5
   1bad0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1bad4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1bad8:	strb	r0, [r0, #-0]
   1badc:	adcmi	r3, r2, #156	; 0x9c
   1bae0:	andge	r0, r0, #0
   1bae4:	rsbmi	r1, sp, #148, 20	; 0x94000
   1bae8:	stmda	r0, {}	; <UNPREDICTABLE>
   1baec:	eorsmi	r4, r7, #7733248	; 0x760000
   1baf0:	andcs	r0, r0, r0
   1baf4:	andmi	sl, r2, #95	; 0x5f
   1baf8:	andeq	r0, r0, r0
   1bafc:	bicmi	ip, sp, r5, ror #26
   1bb00:	andeq	r0, r0, r0
   1bb04:	orrsmi	sp, r7, r4, lsl #15
   1bb08:	andeq	r0, r0, r0
   1bb0c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1bb10:	andeq	r0, r0, r0
   1bb14:	smlawbmi	lr, r0, r4, r8
   1bb18:	andeq	r0, r0, r0
   1bb1c:	rscsmi	r6, r8, r0, lsl #20
   1bb20:	andeq	r0, r0, r0
   1bb24:	sbcmi	r8, r3, r0, lsl #16
   1bb28:	andeq	r0, r0, r0
   1bb2c:	addmi	r4, pc, r0
   1bb30:	andeq	r0, r0, r0
   1bb34:	subsmi	r0, r9, r0
   1bb38:			; <UNDEFINED> instruction: 0x064dd592
   1bb3c:	strmi	pc, [r0], #207	; 0xcf

0001bb40 <flatcc_json_parser_float@@Base>:
   1bb40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bb44:	add	fp, sp, #24
   1bb48:	vpush	{d8-d9}
   1bb4c:	sub	sp, sp, #8
   1bb50:	mov	r8, r0
   1bb54:	mov	r0, #0
   1bb58:	mov	r6, r1
   1bb5c:	cmp	r1, r2
   1bb60:	str	r0, [r3]
   1bb64:	beq	1bc3c <flatcc_json_parser_float@@Base+0xfc>
   1bb68:	mov	r0, r6
   1bb6c:	mov	r5, r2
   1bb70:	mov	r7, r3
   1bb74:	ldrb	r1, [r0], #1
   1bb78:	cmp	r1, #45	; 0x2d
   1bb7c:	movne	r0, r6
   1bb80:	sub	r2, r2, r0
   1bb84:	cmp	r2, #2
   1bb88:	blt	1bbc8 <flatcc_json_parser_float@@Base+0x88>
   1bb8c:	sub	r1, r1, #45	; 0x2d
   1bb90:	clz	r1, r1
   1bb94:	lsr	r1, r1, #5
   1bb98:	ldrb	r1, [r6, r1]
   1bb9c:	cmp	r1, #46	; 0x2e
   1bba0:	beq	1bbb8 <flatcc_json_parser_float@@Base+0x78>
   1bba4:	cmp	r1, #48	; 0x30
   1bba8:	bne	1bbc8 <flatcc_json_parser_float@@Base+0x88>
   1bbac:	ldrb	r0, [r0, #1]
   1bbb0:	cmp	r0, #48	; 0x30
   1bbb4:	bne	1bbc8 <flatcc_json_parser_float@@Base+0x88>
   1bbb8:	ldr	r0, [r8, #24]
   1bbbc:	cmp	r0, #0
   1bbc0:	bne	1bc74 <flatcc_json_parser_float@@Base+0x134>
   1bbc4:	b	1bc58 <flatcc_json_parser_float@@Base+0x118>
   1bbc8:	sub	r1, r5, r6
   1bbcc:	mov	r2, sp
   1bbd0:	mov	r0, r6
   1bbd4:	bl	1b218 <flatcc_json_parser_double@@Base+0xf8>
   1bbd8:	vldr	d16, [sp]
   1bbdc:	mov	r4, r0
   1bbe0:	add	r0, pc, #160	; 0xa0
   1bbe4:	vcmpe.f64	d16, #0.0
   1bbe8:	vcvt.f32.f64	s16, d16
   1bbec:	vmrs	APSR_nzcv, fpscr
   1bbf0:	addmi	r0, r0, #4
   1bbf4:	vldr	s18, [r0]
   1bbf8:	vmov.f32	s0, s16
   1bbfc:	bl	1290c <__isinff@plt>
   1bc00:	cmp	r0, #0
   1bc04:	vseleq.f32	s0, s16, s18
   1bc08:	movne	r4, r6
   1bc0c:	cmp	r4, #0
   1bc10:	cmpne	r4, r6
   1bc14:	vstr	s0, [r7]
   1bc18:	bne	1bc40 <flatcc_json_parser_float@@Base+0x100>
   1bc1c:	bl	1290c <__isinff@plt>
   1bc20:	ldr	r1, [r8, #24]
   1bc24:	cmp	r0, #0
   1bc28:	beq	1bc50 <flatcc_json_parser_float@@Base+0x110>
   1bc2c:	cmp	r1, #0
   1bc30:	bne	1bc74 <flatcc_json_parser_float@@Base+0x134>
   1bc34:	mov	r0, #7
   1bc38:	b	1bc5c <flatcc_json_parser_float@@Base+0x11c>
   1bc3c:	mov	r4, r6
   1bc40:	mov	r0, r4
   1bc44:	sub	sp, fp, #40	; 0x28
   1bc48:	vpop	{d8-d9}
   1bc4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc50:	cmp	r1, #0
   1bc54:	bne	1bc74 <flatcc_json_parser_float@@Base+0x134>
   1bc58:	mov	r0, #6
   1bc5c:	str	r6, [r8, #36]	; 0x24
   1bc60:	ldr	r1, [r8, #4]
   1bc64:	sub	r1, r6, r1
   1bc68:	add	r1, r1, #1
   1bc6c:	str	r1, [r8, #20]
   1bc70:	str	r0, [r8, #24]
   1bc74:	mov	r4, r5
   1bc78:	mov	r0, r4
   1bc7c:	sub	sp, fp, #40	; 0x28
   1bc80:	vpop	{d8-d9}
   1bc84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc88:	svcvc	0x00800000
   1bc8c:			; <UNDEFINED> instruction: 0xff800000

0001bc90 <flatcc_json_parser_integer@@Base>:
   1bc90:	push	{r4, r5, r6, r7, fp, lr}
   1bc94:	add	fp, sp, #16
   1bc98:	mov	ip, r1
   1bc9c:	cmp	r1, r2
   1bca0:	beq	1bd8c <flatcc_json_parser_integer@@Base+0xfc>
   1bca4:	ldrb	r1, [ip]
   1bca8:	mov	r4, #0
   1bcac:	sub	r1, r1, #45	; 0x2d
   1bcb0:	clz	r1, r1
   1bcb4:	lsr	r1, r1, #5
   1bcb8:	str	r1, [r3]
   1bcbc:	add	r1, ip, r1
   1bcc0:	cmp	r1, r2
   1bcc4:	beq	1bd78 <flatcc_json_parser_integer@@Base+0xe8>
   1bcc8:	mov	lr, #10
   1bccc:	mov	r5, #0
   1bcd0:	ldrb	r6, [r1]
   1bcd4:	sub	r7, r6, #48	; 0x30
   1bcd8:	uxtb	r7, r7
   1bcdc:	cmp	r7, #9
   1bce0:	bhi	1bd94 <flatcc_json_parser_integer@@Base+0x104>
   1bce4:	add	r7, r5, r5, lsl #2
   1bce8:	lsl	r7, r7, #1
   1bcec:	umlal	r6, r7, r4, lr
   1bcf0:	subs	r6, r6, #48	; 0x30
   1bcf4:	sbc	r7, r7, #0
   1bcf8:	subs	r4, r6, r4
   1bcfc:	sbcs	r4, r7, r5
   1bd00:	bcc	1bda4 <flatcc_json_parser_integer@@Base+0x114>
   1bd04:	add	r1, r1, #1
   1bd08:	mov	r4, r6
   1bd0c:	mov	r5, r7
   1bd10:	cmp	r2, r1
   1bd14:	bne	1bcd0 <flatcc_json_parser_integer@@Base+0x40>
   1bd18:	mov	r3, #0
   1bd1c:	mov	r1, r2
   1bd20:	mov	r4, r6
   1bd24:	mov	r5, r7
   1bd28:	cmp	r1, ip
   1bd2c:	beq	1bd8c <flatcc_json_parser_integer@@Base+0xfc>
   1bd30:	cmp	r3, #0
   1bd34:	beq	1bdc0 <flatcc_json_parser_integer@@Base+0x130>
   1bd38:	ldrb	r3, [r1]
   1bd3c:	cmp	r3, #46	; 0x2e
   1bd40:	cmpne	r3, #101	; 0x65
   1bd44:	bne	1bdb8 <flatcc_json_parser_integer@@Base+0x128>
   1bd48:	ldr	r3, [r0, #24]
   1bd4c:	cmp	r3, #0
   1bd50:	bne	1bdb0 <flatcc_json_parser_integer@@Base+0x120>
   1bd54:	str	r1, [r0, #36]	; 0x24
   1bd58:	mov	r3, #12
   1bd5c:	ldr	r7, [r0, #4]
   1bd60:	sub	r1, r1, r7
   1bd64:	add	r1, r1, #1
   1bd68:	str	r1, [r0, #20]
   1bd6c:	str	r3, [r0, #24]
   1bd70:	mov	r0, r2
   1bd74:	pop	{r4, r5, r6, r7, fp, pc}
   1bd78:	mov	r1, r2
   1bd7c:	mov	r5, #0
   1bd80:	mov	r3, #0
   1bd84:	cmp	r1, ip
   1bd88:	bne	1bd30 <flatcc_json_parser_integer@@Base+0xa0>
   1bd8c:	mov	r0, ip
   1bd90:	pop	{r4, r5, r6, r7, fp, pc}
   1bd94:	mov	r3, #1
   1bd98:	cmp	r1, ip
   1bd9c:	bne	1bd30 <flatcc_json_parser_integer@@Base+0xa0>
   1bda0:	b	1bd8c <flatcc_json_parser_integer@@Base+0xfc>
   1bda4:	ldr	r7, [r0, #24]
   1bda8:	cmp	r7, #0
   1bdac:	beq	1bdd4 <flatcc_json_parser_integer@@Base+0x144>
   1bdb0:	mov	r0, r2
   1bdb4:	pop	{r4, r5, r6, r7, fp, pc}
   1bdb8:	cmp	r3, #69	; 0x45
   1bdbc:	beq	1bd48 <flatcc_json_parser_integer@@Base+0xb8>
   1bdc0:	ldr	r0, [fp, #8]
   1bdc4:	mov	ip, r1
   1bdc8:	strd	r4, [r0]
   1bdcc:	mov	r0, ip
   1bdd0:	pop	{r4, r5, r6, r7, fp, pc}
   1bdd4:	str	r1, [r0, #36]	; 0x24
   1bdd8:	cmp	r3, #0
   1bddc:	mov	r7, #8
   1bde0:	ldr	r3, [r0, #4]
   1bde4:	movweq	r7, #7
   1bde8:	sub	r1, r1, r3
   1bdec:	add	r1, r1, #1
   1bdf0:	str	r1, [r0, #20]
   1bdf4:	str	r7, [r0, #24]
   1bdf8:	mov	r0, r2
   1bdfc:	pop	{r4, r5, r6, r7, fp, pc}

0001be00 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1be00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be04:	add	fp, sp, #28
   1be08:	sub	sp, sp, #28
   1be0c:	ldr	r9, [fp, #8]
   1be10:	mov	r6, r3
   1be14:	mov	r4, r2
   1be18:	mov	r5, r0
   1be1c:	cmp	r1, r2
   1be20:	beq	1be68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1be24:	ldrb	r0, [r1]
   1be28:	cmp	r0, #34	; 0x22
   1be2c:	bne	1be68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1be30:	add	sl, r1, #1
   1be34:	cmp	sl, r4
   1be38:	beq	1be74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1be3c:	mov	r7, sl
   1be40:	ldrb	r1, [r7]
   1be44:	cmp	r1, #32
   1be48:	bcc	1c0c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   1be4c:	cmp	r1, #34	; 0x22
   1be50:	cmpne	r1, #92	; 0x5c
   1be54:	beq	1bf18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x118>
   1be58:	add	r7, r7, #1
   1be5c:	cmp	r4, r7
   1be60:	bne	1be40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1be64:	b	1be74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1be68:	ldr	r0, [r5, #24]
   1be6c:	cmp	r0, #0
   1be70:	beq	1be88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x88>
   1be74:	ldr	r0, [r5, #24]
   1be78:	cmp	r0, #0
   1be7c:	mov	r0, r4
   1be80:	bne	1bed4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1be84:	b	1beb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xb4>
   1be88:	str	r1, [r5, #36]	; 0x24
   1be8c:	mov	r0, #16
   1be90:	ldr	r2, [r5, #4]
   1be94:	sub	r1, r1, r2
   1be98:	add	r1, r1, #1
   1be9c:	str	r1, [r5, #20]
   1bea0:	str	r0, [r5, #24]
   1bea4:	ldr	r0, [r5, #24]
   1bea8:	cmp	r0, #0
   1beac:	mov	r0, r4
   1beb0:	bne	1bed4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1beb4:	str	r4, [r5, #36]	; 0x24
   1beb8:	mov	r0, #20
   1bebc:	ldr	r1, [r5, #4]
   1bec0:	sub	r1, r4, r1
   1bec4:	add	r1, r1, #1
   1bec8:	str	r1, [r5, #20]
   1becc:	str	r0, [r5, #24]
   1bed0:	mov	r0, r4
   1bed4:	mov	r1, #0
   1bed8:	str	r1, [r6]
   1bedc:	ldr	r1, [r5, #24]
   1bee0:	cmp	r1, #0
   1bee4:	bne	1bf0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1bee8:	str	r0, [r5, #36]	; 0x24
   1beec:	cmp	r9, #0
   1bef0:	mov	r1, #31
   1bef4:	ldr	r2, [r5, #4]
   1bef8:	movwne	r1, #32
   1befc:	sub	r0, r0, r2
   1bf00:	add	r0, r0, #1
   1bf04:	str	r0, [r5, #20]
   1bf08:	str	r1, [r5, #24]
   1bf0c:	mov	r0, r4
   1bf10:	sub	sp, fp, #28
   1bf14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf18:	cmp	r4, r7
   1bf1c:	mov	r0, r4
   1bf20:	beq	1bed4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1bf24:	cmp	r1, #34	; 0x22
   1bf28:	bne	1bf54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   1bf2c:	sub	r1, r7, sl
   1bf30:	and	r0, r1, #3
   1bf34:	str	r1, [sp, #20]
   1bf38:	lsr	r1, r1, #2
   1bf3c:	add	r8, r1, r1, lsl #1
   1bf40:	cmp	r0, #2
   1bf44:	beq	1bf5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x15c>
   1bf48:	cmp	r0, #3
   1bf4c:	addeq	r8, r8, #2
   1bf50:	b	1bf60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   1bf54:	mov	r0, r7
   1bf58:	b	1bed4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1bf5c:	add	r8, r8, #1
   1bf60:	ldr	r0, [r5]
   1bf64:	mov	r1, #1
   1bf68:	mov	r2, #1
   1bf6c:	mvn	r3, #0
   1bf70:	bl	16078 <flatcc_builder_start_vector@@Base>
   1bf74:	cmp	r0, #0
   1bf78:	beq	1bfb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1bf7c:	mov	r0, #0
   1bf80:	str	r0, [r6]
   1bf84:	ldr	r0, [r5, #24]
   1bf88:	cmp	r0, #0
   1bf8c:	bne	1bf0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1bf90:	mov	r0, #33	; 0x21
   1bf94:	str	r7, [r5, #36]	; 0x24
   1bf98:	ldr	r1, [r5, #4]
   1bf9c:	sub	r1, r7, r1
   1bfa0:	add	r1, r1, #1
   1bfa4:	str	r1, [r5, #20]
   1bfa8:	str	r0, [r5, #24]
   1bfac:	mov	r0, r4
   1bfb0:	sub	sp, fp, #28
   1bfb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfb8:	ldr	r0, [r5]
   1bfbc:	mov	r1, r8
   1bfc0:	bl	15524 <flatcc_builder_extend_vector@@Base>
   1bfc4:	cmp	r0, #0
   1bfc8:	beq	1bf7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x17c>
   1bfcc:	movw	r2, #65224	; 0xfec8
   1bfd0:	str	r0, [sp]
   1bfd4:	str	r0, [sp, #12]
   1bfd8:	ldr	r0, [sp, #20]
   1bfdc:	mov	r1, r8
   1bfe0:	movw	r8, #64968	; 0xfdc8
   1bfe4:	cmp	r9, #0
   1bfe8:	add	lr, sp, #24
   1bfec:	mov	ip, sl
   1bff0:	movt	r2, #1
   1bff4:	movt	r8, #1
   1bff8:	str	r1, [sp, #4]
   1bffc:	movne	r8, r2
   1c000:	cmp	r1, #0
   1c004:	mvneq	r1, #0
   1c008:	str	r1, [sp, #16]
   1c00c:	mov	r1, #0
   1c010:	str	r0, [sp, #8]
   1c014:	cmp	r0, r1
   1c018:	bne	1c034 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   1c01c:	b	1c0ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1c020:	add	r1, r1, #1
   1c024:	cmp	r1, #4
   1c028:	bcs	1c060 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   1c02c:	cmp	r0, r1
   1c030:	beq	1c0ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1c034:	ldrb	r2, [ip, r1]
   1c038:	ldrb	r3, [r8, r2]
   1c03c:	cmp	r3, #64	; 0x40
   1c040:	strb	r3, [lr, r1]
   1c044:	bcc	1c020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
   1c048:	cmp	r3, #65	; 0x41
   1c04c:	bne	1c138 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   1c050:	sub	r1, r1, #1
   1c054:	sub	r0, r0, #1
   1c058:	add	ip, ip, #1
   1c05c:	b	1c020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
   1c060:	ldr	lr, [sp, #16]
   1c064:	cmp	lr, #3
   1c068:	bcc	1c1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   1c06c:	ldrb	r2, [sp, #25]
   1c070:	ldrb	r1, [sp, #24]
   1c074:	subs	lr, lr, #3
   1c078:	sub	r0, r0, #4
   1c07c:	add	ip, ip, #4
   1c080:	str	lr, [sp, #16]
   1c084:	add	lr, sp, #24
   1c088:	lsr	r3, r2, #4
   1c08c:	orr	r1, r3, r1, lsl #2
   1c090:	ldr	r3, [sp, #12]
   1c094:	strb	r1, [r3]
   1c098:	ldrb	r1, [sp, #26]
   1c09c:	lsr	r1, r1, #2
   1c0a0:	orr	r1, r1, r2, lsl #4
   1c0a4:	strb	r1, [r3, #1]
   1c0a8:	ldrb	r1, [sp, #26]
   1c0ac:	ldrb	r2, [sp, #27]
   1c0b0:	orr	r1, r2, r1, lsl #6
   1c0b4:	strb	r1, [r3, #2]
   1c0b8:	add	r3, r3, #3
   1c0bc:	str	r3, [sp, #12]
   1c0c0:	bne	1c00c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   1c0c4:	b	1c1b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   1c0c8:	ldr	r0, [r5, #24]
   1c0cc:	cmp	r0, #0
   1c0d0:	mov	r0, r4
   1c0d4:	bne	1bed4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1c0d8:	str	r7, [r5, #36]	; 0x24
   1c0dc:	mov	r0, #17
   1c0e0:	ldr	r1, [r5, #4]
   1c0e4:	sub	r1, r7, r1
   1c0e8:	b	1bec4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc4>
   1c0ec:	mov	r1, r0
   1c0f0:	mov	r3, r0
   1c0f4:	ldr	r2, [sp, #16]
   1c0f8:	sub	r0, r0, r3
   1c0fc:	cmp	r1, #0
   1c100:	beq	1c1b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   1c104:	cmp	r1, #3
   1c108:	beq	1c178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x378>
   1c10c:	cmp	r1, #2
   1c110:	bne	1c1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   1c114:	ldrb	r1, [sp, #25]
   1c118:	tst	r1, #15
   1c11c:	bne	1c1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   1c120:	ldrb	r2, [sp, #24]
   1c124:	lsl	r2, r2, #2
   1c128:	orr	r1, r2, r1, lsr #4
   1c12c:	ldr	r2, [sp, #12]
   1c130:	strb	r1, [r2], #1
   1c134:	b	1c1b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b4>
   1c138:	cmp	r3, #66	; 0x42
   1c13c:	bne	1c23c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x43c>
   1c140:	add	r2, r1, #1
   1c144:	mov	r3, r2
   1c148:	cmp	r2, r0
   1c14c:	bcs	1c0f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f4>
   1c150:	cmp	r3, #7
   1c154:	bhi	1c0f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f4>
   1c158:	ldrb	r2, [ip, r3]
   1c15c:	ldrb	r2, [r8, r2]
   1c160:	sub	r2, r2, #65	; 0x41
   1c164:	uxtb	lr, r2
   1c168:	add	r2, r3, #1
   1c16c:	cmp	lr, #2
   1c170:	bcc	1c144 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x344>
   1c174:	b	1c0f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f4>
   1c178:	cmp	r2, #2
   1c17c:	bcc	1c1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   1c180:	ldrb	r1, [sp, #26]
   1c184:	ands	r2, r1, #3
   1c188:	bne	1c1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   1c18c:	ldrb	r3, [sp, #25]
   1c190:	ldrb	ip, [sp, #24]
   1c194:	lsl	r2, r3, #4
   1c198:	orr	r1, r2, r1, lsr #2
   1c19c:	ldr	r2, [sp, #12]
   1c1a0:	strb	r1, [r2, #1]
   1c1a4:	lsr	r1, r3, #4
   1c1a8:	orr	r1, r1, ip, lsl #2
   1c1ac:	strb	r1, [r2]
   1c1b0:	add	r2, r2, #2
   1c1b4:	str	r2, [sp, #12]
   1c1b8:	cmp	r0, #0
   1c1bc:	beq	1c1e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e0>
   1c1c0:	mov	r1, r0
   1c1c4:	ldr	r0, [sp, #20]
   1c1c8:	b	1c1d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d4>
   1c1cc:	ldr	r0, [sp, #20]
   1c1d0:	ldr	r1, [sp, #8]
   1c1d4:	sub	r0, r0, r1
   1c1d8:	add	r0, sl, r0
   1c1dc:	b	1bed4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1c1e0:	ldr	r0, [sp]
   1c1e4:	ldr	r1, [sp, #12]
   1c1e8:	sub	r0, r1, r0
   1c1ec:	ldr	r1, [sp, #4]
   1c1f0:	cmp	r1, r0
   1c1f4:	bls	1c20c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   1c1f8:	sub	r1, r1, r0
   1c1fc:	ldr	r0, [r5]
   1c200:	bl	15eac <flatcc_builder_truncate_vector@@Base>
   1c204:	cmp	r0, #0
   1c208:	bne	1bf7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x17c>
   1c20c:	ldr	r0, [r5]
   1c210:	bl	172f0 <flatcc_builder_end_vector@@Base>
   1c214:	cmp	r0, #0
   1c218:	str	r0, [r6]
   1c21c:	beq	1bf7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x17c>
   1c220:	ldrb	r0, [r7]
   1c224:	cmp	r0, #34	; 0x22
   1c228:	bne	1c254 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x454>
   1c22c:	add	r4, r7, #1
   1c230:	mov	r0, r4
   1c234:	sub	sp, fp, #28
   1c238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c23c:	mov	r3, r1
   1c240:	ldr	r2, [sp, #16]
   1c244:	sub	r0, r0, r3
   1c248:	cmp	r1, #0
   1c24c:	bne	1c104 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x304>
   1c250:	b	1c1b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   1c254:	ldr	r0, [r5, #24]
   1c258:	cmp	r0, #0
   1c25c:	bne	1bf0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1c260:	mov	r0, #20
   1c264:	b	1bf94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>

0001c268 <flatcc_json_parser_build_string@@Base>:
   1c268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c26c:	add	fp, sp, #28
   1c270:	sub	sp, sp, #4
   1c274:	mov	sl, r3
   1c278:	mov	r4, r2
   1c27c:	mov	r5, r0
   1c280:	cmp	r1, r2
   1c284:	beq	1c2e0 <flatcc_json_parser_build_string@@Base+0x78>
   1c288:	ldrb	r0, [r1]
   1c28c:	cmp	r0, #34	; 0x22
   1c290:	bne	1c2e0 <flatcc_json_parser_build_string@@Base+0x78>
   1c294:	add	r1, r1, #1
   1c298:	mov	r6, r4
   1c29c:	cmp	r1, r4
   1c2a0:	beq	1c2f0 <flatcc_json_parser_build_string@@Base+0x88>
   1c2a4:	mov	r6, r1
   1c2a8:	ldrb	r0, [r6]
   1c2ac:	cmp	r0, #32
   1c2b0:	bcc	1c528 <flatcc_json_parser_build_string@@Base+0x2c0>
   1c2b4:	cmp	r0, #34	; 0x22
   1c2b8:	cmpne	r0, #92	; 0x5c
   1c2bc:	beq	1c424 <flatcc_json_parser_build_string@@Base+0x1bc>
   1c2c0:	add	r6, r6, #1
   1c2c4:	cmp	r4, r6
   1c2c8:	bne	1c2a8 <flatcc_json_parser_build_string@@Base+0x40>
   1c2cc:	mov	r6, r1
   1c2d0:	ldr	r0, [r5, #24]
   1c2d4:	cmp	r0, #0
   1c2d8:	bne	1c318 <flatcc_json_parser_build_string@@Base+0xb0>
   1c2dc:	b	1c2fc <flatcc_json_parser_build_string@@Base+0x94>
   1c2e0:	ldr	r0, [r5, #24]
   1c2e4:	mov	r6, r4
   1c2e8:	cmp	r0, #0
   1c2ec:	beq	1c3f4 <flatcc_json_parser_build_string@@Base+0x18c>
   1c2f0:	ldr	r0, [r5, #24]
   1c2f4:	cmp	r0, #0
   1c2f8:	bne	1c318 <flatcc_json_parser_build_string@@Base+0xb0>
   1c2fc:	str	r4, [r5, #36]	; 0x24
   1c300:	mov	r0, #20
   1c304:	ldr	r1, [r5, #4]
   1c308:	sub	r1, r4, r1
   1c30c:	add	r1, r1, #1
   1c310:	str	r1, [r5, #20]
   1c314:	str	r0, [r5, #24]
   1c318:	mov	r7, r4
   1c31c:	ldr	r0, [r5]
   1c320:	bl	16494 <flatcc_builder_start_string@@Base>
   1c324:	cmp	r0, #0
   1c328:	bne	1c54c <flatcc_json_parser_build_string@@Base+0x2e4>
   1c32c:	ldr	r0, [r5]
   1c330:	sub	r2, r7, r6
   1c334:	mov	r1, r6
   1c338:	bl	15d04 <flatcc_builder_append_string@@Base>
   1c33c:	cmp	r0, #0
   1c340:	beq	1c54c <flatcc_json_parser_build_string@@Base+0x2e4>
   1c344:	cmp	r7, r4
   1c348:	mov	r6, r4
   1c34c:	beq	1c4cc <flatcc_json_parser_build_string@@Base+0x264>
   1c350:	mov	r8, sp
   1c354:	add	r9, r8, #1
   1c358:	ldrb	r0, [r7]
   1c35c:	cmp	r0, #34	; 0x22
   1c360:	beq	1c4c8 <flatcc_json_parser_build_string@@Base+0x260>
   1c364:	mov	r0, r5
   1c368:	mov	r1, r7
   1c36c:	mov	r2, r4
   1c370:	mov	r3, r8
   1c374:	bl	1996c <flatcc_json_parser_string_escape@@Base>
   1c378:	mov	r6, r0
   1c37c:	ldr	r0, [r5]
   1c380:	ldrb	r2, [sp]
   1c384:	mov	r1, r9
   1c388:	bl	15d04 <flatcc_builder_append_string@@Base>
   1c38c:	cmp	r0, #0
   1c390:	beq	1c520 <flatcc_json_parser_build_string@@Base+0x2b8>
   1c394:	cmp	r6, r4
   1c398:	beq	1c470 <flatcc_json_parser_build_string@@Base+0x208>
   1c39c:	mov	r7, r6
   1c3a0:	ldrb	r0, [r7]
   1c3a4:	cmp	r0, #32
   1c3a8:	bcc	1c494 <flatcc_json_parser_build_string@@Base+0x22c>
   1c3ac:	cmp	r0, #34	; 0x22
   1c3b0:	cmpne	r0, #92	; 0x5c
   1c3b4:	beq	1c3c8 <flatcc_json_parser_build_string@@Base+0x160>
   1c3b8:	add	r7, r7, #1
   1c3bc:	cmp	r4, r7
   1c3c0:	bne	1c3a0 <flatcc_json_parser_build_string@@Base+0x138>
   1c3c4:	b	1c470 <flatcc_json_parser_build_string@@Base+0x208>
   1c3c8:	cmp	r4, r7
   1c3cc:	beq	1c4c0 <flatcc_json_parser_build_string@@Base+0x258>
   1c3d0:	ldr	r0, [r5]
   1c3d4:	sub	r2, r7, r6
   1c3d8:	mov	r1, r6
   1c3dc:	bl	15d04 <flatcc_builder_append_string@@Base>
   1c3e0:	cmp	r0, #0
   1c3e4:	beq	1c54c <flatcc_json_parser_build_string@@Base+0x2e4>
   1c3e8:	cmp	r4, r7
   1c3ec:	bne	1c358 <flatcc_json_parser_build_string@@Base+0xf0>
   1c3f0:	b	1c4c0 <flatcc_json_parser_build_string@@Base+0x258>
   1c3f4:	str	r1, [r5, #36]	; 0x24
   1c3f8:	mov	r0, #16
   1c3fc:	mov	r6, r4
   1c400:	ldr	r2, [r5, #4]
   1c404:	sub	r1, r1, r2
   1c408:	add	r1, r1, #1
   1c40c:	str	r1, [r5, #20]
   1c410:	str	r0, [r5, #24]
   1c414:	ldr	r0, [r5, #24]
   1c418:	cmp	r0, #0
   1c41c:	bne	1c318 <flatcc_json_parser_build_string@@Base+0xb0>
   1c420:	b	1c2fc <flatcc_json_parser_build_string@@Base+0x94>
   1c424:	cmp	r4, r6
   1c428:	beq	1c534 <flatcc_json_parser_build_string@@Base+0x2cc>
   1c42c:	cmp	r0, #34	; 0x22
   1c430:	bne	1c468 <flatcc_json_parser_build_string@@Base+0x200>
   1c434:	ldr	r0, [r5]
   1c438:	sub	r2, r6, r1
   1c43c:	bl	18680 <flatcc_builder_create_string@@Base>
   1c440:	cmp	r6, r4
   1c444:	str	r0, [sl]
   1c448:	beq	1c4e0 <flatcc_json_parser_build_string@@Base+0x278>
   1c44c:	ldrb	r0, [r6]
   1c450:	cmp	r0, #34	; 0x22
   1c454:	bne	1c4e0 <flatcc_json_parser_build_string@@Base+0x278>
   1c458:	add	r4, r6, #1
   1c45c:	mov	r0, r4
   1c460:	sub	sp, fp, #28
   1c464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c468:	mov	r7, r6
   1c46c:	b	1c538 <flatcc_json_parser_build_string@@Base+0x2d0>
   1c470:	ldr	r0, [r5, #24]
   1c474:	mov	r6, r4
   1c478:	cmp	r0, #0
   1c47c:	bne	1c4cc <flatcc_json_parser_build_string@@Base+0x264>
   1c480:	str	r4, [r5, #36]	; 0x24
   1c484:	mov	r0, #20
   1c488:	ldr	r1, [r5, #4]
   1c48c:	sub	r1, r4, r1
   1c490:	b	1c4b4 <flatcc_json_parser_build_string@@Base+0x24c>
   1c494:	ldr	r0, [r5, #24]
   1c498:	mov	r6, r4
   1c49c:	cmp	r0, #0
   1c4a0:	bne	1c4cc <flatcc_json_parser_build_string@@Base+0x264>
   1c4a4:	str	r7, [r5, #36]	; 0x24
   1c4a8:	mov	r0, #17
   1c4ac:	ldr	r1, [r5, #4]
   1c4b0:	sub	r1, r7, r1
   1c4b4:	add	r1, r1, #1
   1c4b8:	str	r1, [r5, #20]
   1c4bc:	str	r0, [r5, #24]
   1c4c0:	mov	r6, r4
   1c4c4:	b	1c4cc <flatcc_json_parser_build_string@@Base+0x264>
   1c4c8:	mov	r6, r7
   1c4cc:	ldr	r0, [r5]
   1c4d0:	bl	187e8 <flatcc_builder_end_string@@Base>
   1c4d4:	cmp	r6, r4
   1c4d8:	str	r0, [sl]
   1c4dc:	bne	1c44c <flatcc_json_parser_build_string@@Base+0x1e4>
   1c4e0:	ldr	r0, [r5, #24]
   1c4e4:	cmp	r0, #0
   1c4e8:	beq	1c4f8 <flatcc_json_parser_build_string@@Base+0x290>
   1c4ec:	mov	r0, r4
   1c4f0:	sub	sp, fp, #28
   1c4f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4f8:	str	r6, [r5, #36]	; 0x24
   1c4fc:	mov	r0, #20
   1c500:	ldr	r1, [r5, #4]
   1c504:	sub	r1, r6, r1
   1c508:	add	r1, r1, #1
   1c50c:	str	r1, [r5, #20]
   1c510:	str	r0, [r5, #24]
   1c514:	mov	r0, r4
   1c518:	sub	sp, fp, #28
   1c51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c520:	mov	r4, r6
   1c524:	b	1c550 <flatcc_json_parser_build_string@@Base+0x2e8>
   1c528:	ldr	r0, [r5, #24]
   1c52c:	cmp	r0, #0
   1c530:	beq	1c564 <flatcc_json_parser_build_string@@Base+0x2fc>
   1c534:	mov	r7, r4
   1c538:	mov	r6, r1
   1c53c:	ldr	r0, [r5]
   1c540:	bl	16494 <flatcc_builder_start_string@@Base>
   1c544:	cmp	r0, #0
   1c548:	beq	1c32c <flatcc_json_parser_build_string@@Base+0xc4>
   1c54c:	mov	r4, r7
   1c550:	mov	r0, #0
   1c554:	str	r0, [sl]
   1c558:	mov	r0, r4
   1c55c:	sub	sp, fp, #28
   1c560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c564:	str	r6, [r5, #36]	; 0x24
   1c568:	mov	r0, #17
   1c56c:	mov	r7, r4
   1c570:	ldr	r2, [r5, #4]
   1c574:	sub	r2, r6, r2
   1c578:	add	r2, r2, #1
   1c57c:	str	r2, [r5, #20]
   1c580:	str	r0, [r5, #24]
   1c584:	b	1c538 <flatcc_json_parser_build_string@@Base+0x2d0>

0001c588 <flatcc_json_parser_prepare_unions@@Base>:
   1c588:	push	{r4, r5, r6, r7, fp, lr}
   1c58c:	add	fp, sp, #16
   1c590:	mov	r6, r0
   1c594:	add	r0, r3, r3, lsl #1
   1c598:	mov	r5, r1
   1c59c:	mov	r1, #8
   1c5a0:	mov	r7, r3
   1c5a4:	mov	r4, r2
   1c5a8:	add	r1, r1, r0, lsl #3
   1c5ac:	ldr	r0, [r6]
   1c5b0:	bl	148cc <flatcc_builder_enter_user_frame@@Base>
   1c5b4:	mov	r1, r0
   1c5b8:	ldr	r0, [fp, #8]
   1c5bc:	cmp	r1, #0
   1c5c0:	str	r1, [r0]
   1c5c4:	beq	1c5e0 <flatcc_json_parser_prepare_unions@@Base+0x58>
   1c5c8:	ldr	r0, [r6]
   1c5cc:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1c5d0:	mov	r4, r5
   1c5d4:	str	r7, [r0]
   1c5d8:	mov	r0, r4
   1c5dc:	pop	{r4, r5, r6, r7, fp, pc}
   1c5e0:	ldr	r0, [r6, #24]
   1c5e4:	cmp	r0, #0
   1c5e8:	beq	1c5f4 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1c5ec:	mov	r0, r4
   1c5f0:	pop	{r4, r5, r6, r7, fp, pc}
   1c5f4:	str	r5, [r6, #36]	; 0x24
   1c5f8:	mov	r0, #33	; 0x21
   1c5fc:	ldr	r1, [r6, #4]
   1c600:	sub	r1, r5, r1
   1c604:	add	r1, r1, #1
   1c608:	str	r1, [r6, #20]
   1c60c:	str	r0, [r6, #24]
   1c610:	mov	r0, r4
   1c614:	pop	{r4, r5, r6, r7, fp, pc}

0001c618 <flatcc_json_parser_finalize_unions@@Base>:
   1c618:	push	{r4, r5, r6, r7, fp, lr}
   1c61c:	add	fp, sp, #16
   1c620:	mov	r6, r0
   1c624:	ldr	r0, [r0]
   1c628:	mov	r7, r1
   1c62c:	mov	r1, r3
   1c630:	mov	r5, r3
   1c634:	mov	r4, r2
   1c638:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1c63c:	ldr	r0, [r0, #4]
   1c640:	cmp	r0, #0
   1c644:	beq	1c674 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1c648:	ldr	r0, [r6, #24]
   1c64c:	cmp	r0, #0
   1c650:	bne	1c678 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c654:	str	r7, [r6, #36]	; 0x24
   1c658:	mov	r0, #27
   1c65c:	ldr	r1, [r6, #4]
   1c660:	sub	r1, r7, r1
   1c664:	add	r1, r1, #1
   1c668:	str	r1, [r6, #20]
   1c66c:	str	r0, [r6, #24]
   1c670:	b	1c678 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c674:	mov	r4, r7
   1c678:	ldr	r0, [r6]
   1c67c:	mov	r1, r5
   1c680:	bl	149dc <flatcc_builder_exit_user_frame_at@@Base>
   1c684:	mov	r0, r4
   1c688:	pop	{r4, r5, r6, r7, fp, pc}

0001c68c <flatcc_json_parser_union@@Base>:
   1c68c:	push	{r4, r5, r6, r7, fp, lr}
   1c690:	add	fp, sp, #16
   1c694:	sub	sp, sp, #16
   1c698:	mov	r6, r1
   1c69c:	mov	r5, r0
   1c6a0:	ldr	r0, [r0]
   1c6a4:	ldr	r1, [fp, #12]
   1c6a8:	mov	r7, r3
   1c6ac:	mov	r4, r2
   1c6b0:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1c6b4:	add	r2, r0, #8
   1c6b8:	add	r3, r7, r7, lsl #1
   1c6bc:	mov	r1, r2
   1c6c0:	ldr	r7, [r1, r3, lsl #3]!
   1c6c4:	cmp	r7, #0
   1c6c8:	beq	1c700 <flatcc_json_parser_union@@Base+0x74>
   1c6cc:	ldr	r0, [r5, #24]
   1c6d0:	cmp	r0, #0
   1c6d4:	bne	1c7d0 <flatcc_json_parser_union@@Base+0x144>
   1c6d8:	mov	r0, #28
   1c6dc:	str	r6, [r5, #36]	; 0x24
   1c6e0:	ldr	r1, [r5, #4]
   1c6e4:	sub	r1, r6, r1
   1c6e8:	add	r1, r1, #1
   1c6ec:	str	r1, [r5, #20]
   1c6f0:	str	r0, [r5, #24]
   1c6f4:	mov	r0, r4
   1c6f8:	sub	sp, fp, #16
   1c6fc:	pop	{r4, r5, r6, r7, fp, pc}
   1c700:	add	r2, r2, r3, lsl #3
   1c704:	ldrb	r3, [r2, #12]
   1c708:	cmp	r3, #0
   1c70c:	beq	1c784 <flatcc_json_parser_union@@Base+0xf8>
   1c710:	ldrb	r3, [r2, #13]
   1c714:	cmp	r3, #0
   1c718:	strb	r3, [sp, #8]
   1c71c:	beq	1c7c4 <flatcc_json_parser_union@@Base+0x138>
   1c720:	ldr	r1, [r0, #4]
   1c724:	ldr	r7, [fp, #16]
   1c728:	mov	r2, r4
   1c72c:	sub	r1, r1, #1
   1c730:	str	r1, [r0, #4]
   1c734:	add	r0, sp, #8
   1c738:	mov	r1, r6
   1c73c:	add	r0, r0, #4
   1c740:	str	r0, [sp]
   1c744:	mov	r0, r5
   1c748:	blx	r7
   1c74c:	cmp	r0, r4
   1c750:	beq	1c7d0 <flatcc_json_parser_union@@Base+0x144>
   1c754:	mov	r6, r0
   1c758:	ldr	r1, [fp, #8]
   1c75c:	ldr	r0, [r5]
   1c760:	ldr	r2, [sp, #8]
   1c764:	ldr	r3, [sp, #12]
   1c768:	bl	176f8 <flatcc_builder_table_add_union@@Base>
   1c76c:	cmp	r0, #0
   1c770:	bne	1c6cc <flatcc_json_parser_union@@Base+0x40>
   1c774:	mov	r4, r6
   1c778:	mov	r0, r4
   1c77c:	sub	sp, fp, #16
   1c780:	pop	{r4, r5, r6, r7, fp, pc}
   1c784:	ldr	r3, [r0, #4]
   1c788:	add	r3, r3, #1
   1c78c:	str	r3, [r0, #4]
   1c790:	ldr	r0, [r5, #16]
   1c794:	str	r0, [r2, #8]
   1c798:	ldr	r0, [r5, #4]
   1c79c:	str	r0, [r2, #4]
   1c7a0:	str	r6, [r1]
   1c7a4:	mov	r0, r5
   1c7a8:	mov	r1, r6
   1c7ac:	mov	r2, r4
   1c7b0:	bl	1a330 <flatcc_json_parser_generic_json@@Base>
   1c7b4:	mov	r4, r0
   1c7b8:	mov	r0, r4
   1c7bc:	sub	sp, fp, #16
   1c7c0:	pop	{r4, r5, r6, r7, fp, pc}
   1c7c4:	ldr	r0, [r5, #24]
   1c7c8:	cmp	r0, #0
   1c7cc:	beq	1c7dc <flatcc_json_parser_union@@Base+0x150>
   1c7d0:	mov	r0, r4
   1c7d4:	sub	sp, fp, #16
   1c7d8:	pop	{r4, r5, r6, r7, fp, pc}
   1c7dc:	mov	r0, #25
   1c7e0:	b	1c6dc <flatcc_json_parser_union@@Base+0x50>

0001c7e4 <flatcc_json_parser_union_type@@Base>:
   1c7e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7e8:	add	fp, sp, #28
   1c7ec:	sub	sp, sp, #20
   1c7f0:	mov	r8, r1
   1c7f4:	mov	r5, r0
   1c7f8:	ldr	r0, [r0]
   1c7fc:	ldr	r1, [fp, #12]
   1c800:	mov	r6, r3
   1c804:	mov	r4, r2
   1c808:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1c80c:	add	r3, r6, r6, lsl #1
   1c810:	add	r2, r0, #8
   1c814:	mov	r9, r0
   1c818:	add	sl, r2, r3, lsl #3
   1c81c:	mov	r0, sl
   1c820:	ldrb	r1, [r0, #12]!
   1c824:	cmp	r1, #0
   1c828:	beq	1c844 <flatcc_json_parser_union_type@@Base+0x60>
   1c82c:	ldr	r0, [r5, #24]
   1c830:	cmp	r0, #0
   1c834:	beq	1c92c <flatcc_json_parser_union_type@@Base+0x148>
   1c838:	mov	r0, r4
   1c83c:	sub	sp, fp, #28
   1c840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c844:	mov	r1, #1
   1c848:	mov	r6, #0
   1c84c:	mov	lr, sl
   1c850:	cmp	r8, r4
   1c854:	str	r3, [sp, #4]
   1c858:	str	r2, [sp, #8]
   1c85c:	strb	r1, [r0]
   1c860:	strb	r6, [lr, #13]!
   1c864:	beq	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1c868:	mov	r2, r8
   1c86c:	ldrb	ip, [r2], #1
   1c870:	cmp	ip, #45	; 0x2d
   1c874:	movne	r2, r8
   1c878:	cmp	r2, r4
   1c87c:	beq	1c954 <flatcc_json_parser_union_type@@Base+0x170>
   1c880:	mov	r6, #0
   1c884:	mov	r0, #10
   1c888:	mov	r7, #0
   1c88c:	ldrb	r1, [r2]
   1c890:	sub	r3, r1, #48	; 0x30
   1c894:	uxtb	r3, r3
   1c898:	cmp	r3, #9
   1c89c:	bhi	1c9e0 <flatcc_json_parser_union_type@@Base+0x1fc>
   1c8a0:	add	r3, r7, r7, lsl #2
   1c8a4:	lsl	r3, r3, #1
   1c8a8:	umlal	r1, r3, r6, r0
   1c8ac:	subs	r1, r1, #48	; 0x30
   1c8b0:	sbc	r3, r3, #0
   1c8b4:	subs	r6, r1, r6
   1c8b8:	sbcs	r7, r3, r7
   1c8bc:	bcc	1c9f0 <flatcc_json_parser_union_type@@Base+0x20c>
   1c8c0:	add	r2, r2, #1
   1c8c4:	mov	r6, r1
   1c8c8:	mov	r7, r3
   1c8cc:	cmp	r4, r2
   1c8d0:	bne	1c88c <flatcc_json_parser_union_type@@Base+0xa8>
   1c8d4:	mov	r0, #0
   1c8d8:	mov	r2, r4
   1c8dc:	mov	r6, r1
   1c8e0:	mov	r7, r3
   1c8e4:	cmp	r2, r8
   1c8e8:	beq	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1c8ec:	cmp	r0, #0
   1c8f0:	beq	1c96c <flatcc_json_parser_union_type@@Base+0x188>
   1c8f4:	ldrb	r0, [r2]
   1c8f8:	cmp	r0, #46	; 0x2e
   1c8fc:	beq	1c90c <flatcc_json_parser_union_type@@Base+0x128>
   1c900:	cmp	r0, #101	; 0x65
   1c904:	cmpne	r0, #69	; 0x45
   1c908:	bne	1c96c <flatcc_json_parser_union_type@@Base+0x188>
   1c90c:	ldr	r0, [r5, #24]
   1c910:	mov	r6, #0
   1c914:	mov	r7, #0
   1c918:	cmp	r0, #0
   1c91c:	mov	r0, r4
   1c920:	bne	1ca30 <flatcc_json_parser_union_type@@Base+0x24c>
   1c924:	mov	r0, #12
   1c928:	b	1ca0c <flatcc_json_parser_union_type@@Base+0x228>
   1c92c:	str	r8, [r5, #36]	; 0x24
   1c930:	mov	r0, #28
   1c934:	ldr	r1, [r5, #4]
   1c938:	sub	r1, r8, r1
   1c93c:	add	r1, r1, #1
   1c940:	str	r1, [r5, #20]
   1c944:	str	r0, [r5, #24]
   1c948:	mov	r0, r4
   1c94c:	sub	sp, fp, #28
   1c950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c954:	mov	r2, r4
   1c958:	mov	r7, #0
   1c95c:	mov	r0, #0
   1c960:	cmp	r2, r8
   1c964:	bne	1c8ec <flatcc_json_parser_union_type@@Base+0x108>
   1c968:	b	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1c96c:	mov	r0, r2
   1c970:	cmp	r0, r8
   1c974:	beq	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1c978:	cmp	ip, #45	; 0x2d
   1c97c:	bne	1c998 <flatcc_json_parser_union_type@@Base+0x1b4>
   1c980:	ldr	r1, [r5, #24]
   1c984:	mov	r2, r4
   1c988:	cmp	r1, #0
   1c98c:	bne	1ca44 <flatcc_json_parser_union_type@@Base+0x260>
   1c990:	mov	r1, #8
   1c994:	b	1c9b8 <flatcc_json_parser_union_type@@Base+0x1d4>
   1c998:	subs	r1, r6, #256	; 0x100
   1c99c:	sbcs	r1, r7, #0
   1c9a0:	bcc	1ca3c <flatcc_json_parser_union_type@@Base+0x258>
   1c9a4:	ldr	r1, [r5, #24]
   1c9a8:	mov	r2, r4
   1c9ac:	cmp	r1, #0
   1c9b0:	bne	1ca44 <flatcc_json_parser_union_type@@Base+0x260>
   1c9b4:	mov	r1, #7
   1c9b8:	str	r0, [r5, #36]	; 0x24
   1c9bc:	ldr	r2, [r5, #4]
   1c9c0:	sub	r0, r0, r2
   1c9c4:	mov	r2, r4
   1c9c8:	add	r0, r0, #1
   1c9cc:	str	r0, [r5, #20]
   1c9d0:	str	r1, [r5, #24]
   1c9d4:	cmp	r2, r8
   1c9d8:	bne	1ca70 <flatcc_json_parser_union_type@@Base+0x28c>
   1c9dc:	b	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1c9e0:	mov	r0, #1
   1c9e4:	cmp	r2, r8
   1c9e8:	bne	1c8ec <flatcc_json_parser_union_type@@Base+0x108>
   1c9ec:	b	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1c9f0:	ldr	r0, [r5, #24]
   1c9f4:	mov	r6, #0
   1c9f8:	mov	r7, #0
   1c9fc:	cmp	r0, #0
   1ca00:	mov	r0, r4
   1ca04:	bne	1ca30 <flatcc_json_parser_union_type@@Base+0x24c>
   1ca08:	mov	r0, #8
   1ca0c:	str	r2, [r5, #36]	; 0x24
   1ca10:	mov	r6, #0
   1ca14:	mov	r7, #0
   1ca18:	ldr	r1, [r5, #4]
   1ca1c:	sub	r1, r2, r1
   1ca20:	add	r1, r1, #1
   1ca24:	str	r1, [r5, #20]
   1ca28:	str	r0, [r5, #24]
   1ca2c:	mov	r0, r4
   1ca30:	cmp	r0, r8
   1ca34:	bne	1c978 <flatcc_json_parser_union_type@@Base+0x194>
   1ca38:	b	1ca4c <flatcc_json_parser_union_type@@Base+0x268>
   1ca3c:	mov	r2, r0
   1ca40:	strb	r6, [lr]
   1ca44:	cmp	r2, r8
   1ca48:	bne	1ca70 <flatcc_json_parser_union_type@@Base+0x28c>
   1ca4c:	ldr	r3, [fp, #16]
   1ca50:	mov	r0, r5
   1ca54:	mov	r1, r8
   1ca58:	mov	r2, r4
   1ca5c:	str	lr, [sp]
   1ca60:	mov	r6, lr
   1ca64:	bl	1cb7c <flatcc_json_parser_union_type@@Base+0x398>
   1ca68:	mov	lr, r6
   1ca6c:	mov	r2, r0
   1ca70:	ldr	r0, [sp, #8]
   1ca74:	ldr	r1, [sp, #4]
   1ca78:	ldr	r1, [r0, r1, lsl #3]
   1ca7c:	cmp	r1, #0
   1ca80:	beq	1cb20 <flatcc_json_parser_union_type@@Base+0x33c>
   1ca84:	ldr	r0, [r9, #4]
   1ca88:	str	r2, [sp, #8]
   1ca8c:	cmp	r0, #0
   1ca90:	beq	1cb5c <flatcc_json_parser_union_type@@Base+0x378>
   1ca94:	sub	r0, r0, #1
   1ca98:	ldr	r6, [fp, #20]
   1ca9c:	mov	r2, r4
   1caa0:	str	r0, [r9, #4]
   1caa4:	ldr	r0, [sl, #8]
   1caa8:	ldr	r8, [r5, #4]
   1caac:	ldr	r7, [r5, #16]
   1cab0:	str	r0, [r5, #16]
   1cab4:	ldr	r0, [sl, #4]
   1cab8:	str	r0, [r5, #4]
   1cabc:	add	r0, sp, #12
   1cac0:	ldrb	r3, [lr]
   1cac4:	add	r0, r0, #4
   1cac8:	str	r0, [sp]
   1cacc:	mov	r0, r5
   1cad0:	strb	r3, [sp, #12]
   1cad4:	blx	r6
   1cad8:	cmp	r0, r4
   1cadc:	beq	1c838 <flatcc_json_parser_union_type@@Base+0x54>
   1cae0:	ldr	r1, [fp, #8]
   1cae4:	ldr	r0, [r5]
   1cae8:	ldr	r2, [sp, #12]
   1caec:	ldr	r3, [sp, #16]
   1caf0:	bl	176f8 <flatcc_builder_table_add_union@@Base>
   1caf4:	cmp	r0, #0
   1caf8:	beq	1cb44 <flatcc_json_parser_union_type@@Base+0x360>
   1cafc:	ldr	r0, [r5, #24]
   1cb00:	cmp	r0, #0
   1cb04:	bne	1c838 <flatcc_json_parser_union_type@@Base+0x54>
   1cb08:	ldr	r2, [sp, #8]
   1cb0c:	mov	r0, #28
   1cb10:	str	r2, [r5, #36]	; 0x24
   1cb14:	ldr	r1, [r5, #4]
   1cb18:	sub	r1, r2, r1
   1cb1c:	b	1c93c <flatcc_json_parser_union_type@@Base+0x158>
   1cb20:	ldrb	r0, [lr]
   1cb24:	ldr	r1, [r9, #4]
   1cb28:	mov	r4, r2
   1cb2c:	cmp	r0, #0
   1cb30:	addne	r1, r1, #1
   1cb34:	str	r1, [r9, #4]
   1cb38:	mov	r0, r4
   1cb3c:	sub	sp, fp, #28
   1cb40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb44:	ldr	r4, [sp, #8]
   1cb48:	str	r8, [r5, #4]
   1cb4c:	str	r7, [r5, #16]
   1cb50:	mov	r0, r4
   1cb54:	sub	sp, fp, #28
   1cb58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb5c:	movw	r0, #917	; 0x395
   1cb60:	movw	r1, #932	; 0x3a4
   1cb64:	movw	r3, #1006	; 0x3ee
   1cb68:	movw	r2, #965	; 0x3c5
   1cb6c:	movt	r0, #2
   1cb70:	movt	r1, #2
   1cb74:	movt	r3, #2
   1cb78:	bl	129c0 <__assert_fail@plt>
   1cb7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb80:	add	fp, sp, #28
   1cb84:	sub	sp, sp, #44	; 0x2c
   1cb88:	mov	r4, r2
   1cb8c:	mov	r2, r1
   1cb90:	ldr	r1, [fp, #8]
   1cb94:	mov	r5, r0
   1cb98:	mov	r0, #0
   1cb9c:	cmp	r2, r4
   1cba0:	strb	r0, [r1]
   1cba4:	beq	1cd7c <flatcc_json_parser_union_type@@Base+0x598>
   1cba8:	ldrb	r0, [r2]
   1cbac:	cmp	r0, #46	; 0x2e
   1cbb0:	beq	1cc24 <flatcc_json_parser_union_type@@Base+0x440>
   1cbb4:	cmp	r0, #34	; 0x22
   1cbb8:	bne	1cd74 <flatcc_json_parser_union_type@@Base+0x590>
   1cbbc:	mov	r0, #0
   1cbc0:	add	r1, r2, #1
   1cbc4:	str	r0, [r5, #12]
   1cbc8:	ldr	r0, [r5, #12]
   1cbcc:	cmp	r0, #0
   1cbd0:	bne	1cc60 <flatcc_json_parser_union_type@@Base+0x47c>
   1cbd4:	sub	r0, r4, r1
   1cbd8:	cmp	r0, #2
   1cbdc:	blt	1cc00 <flatcc_json_parser_union_type@@Base+0x41c>
   1cbe0:	ldrb	r0, [r1]
   1cbe4:	cmp	r0, #32
   1cbe8:	bhi	1cc60 <flatcc_json_parser_union_type@@Base+0x47c>
   1cbec:	bne	1cc00 <flatcc_json_parser_union_type@@Base+0x41c>
   1cbf0:	mov	r7, r1
   1cbf4:	ldrb	r0, [r7, #1]!
   1cbf8:	cmp	r0, #32
   1cbfc:	bhi	1cc18 <flatcc_json_parser_union_type@@Base+0x434>
   1cc00:	mov	r0, r5
   1cc04:	mov	r2, r4
   1cc08:	mov	r6, r3
   1cc0c:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1cc10:	mov	r3, r6
   1cc14:	mov	r7, r0
   1cc18:	cmp	r7, r4
   1cc1c:	bne	1cc6c <flatcc_json_parser_union_type@@Base+0x488>
   1cc20:	b	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1cc24:	ldr	r0, [r5, #24]
   1cc28:	mov	r1, r4
   1cc2c:	cmp	r0, #0
   1cc30:	bne	1cd80 <flatcc_json_parser_union_type@@Base+0x59c>
   1cc34:	str	r2, [r5, #36]	; 0x24
   1cc38:	mov	r0, #5
   1cc3c:	ldr	r1, [r5, #4]
   1cc40:	sub	r1, r2, r1
   1cc44:	add	r1, r1, #1
   1cc48:	str	r1, [r5, #20]
   1cc4c:	str	r0, [r5, #24]
   1cc50:	mov	r1, r4
   1cc54:	ldr	r0, [r5, #12]
   1cc58:	cmp	r0, #0
   1cc5c:	beq	1cbd4 <flatcc_json_parser_union_type@@Base+0x3f0>
   1cc60:	mov	r7, r1
   1cc64:	cmp	r7, r4
   1cc68:	beq	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1cc6c:	add	r9, r3, #4
   1cc70:	mov	r6, #0
   1cc74:	add	sl, sp, #32
   1cc78:	add	r8, sp, #28
   1cc7c:	str	r3, [sp, #16]
   1cc80:	str	r9, [sp, #12]
   1cc84:	str	r6, [sp, #20]
   1cc88:	mov	r6, r3
   1cc8c:	ldr	r6, [r3]
   1cc90:	add	r0, sp, #24
   1cc94:	mov	r1, r7
   1cc98:	mov	r2, r4
   1cc9c:	mov	r3, r8
   1cca0:	str	sl, [sp]
   1cca4:	str	r0, [sp, #4]
   1cca8:	mov	r0, r5
   1ccac:	blx	r6
   1ccb0:	cmp	r0, r4
   1ccb4:	beq	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1ccb8:	cmp	r0, r7
   1ccbc:	bne	1ccd0 <flatcc_json_parser_union_type@@Base+0x4ec>
   1ccc0:	ldr	r6, [r9], #4
   1ccc4:	cmp	r6, #0
   1ccc8:	bne	1cc90 <flatcc_json_parser_union_type@@Base+0x4ac>
   1cccc:	b	1cd40 <flatcc_json_parser_union_type@@Base+0x55c>
   1ccd0:	ldr	r6, [sp, #20]
   1ccd4:	cmp	r6, #0
   1ccd8:	beq	1cce8 <flatcc_json_parser_union_type@@Base+0x504>
   1ccdc:	ldr	r1, [r5, #12]
   1cce0:	cmp	r1, #0
   1cce4:	bne	1cdb8 <flatcc_json_parser_union_type@@Base+0x5d4>
   1cce8:	ldr	r1, [sp, #28]
   1ccec:	cmp	r1, #0
   1ccf0:	bne	1cd90 <flatcc_json_parser_union_type@@Base+0x5ac>
   1ccf4:	ldr	r1, [sp, #32]
   1ccf8:	ldr	r2, [sp, #36]	; 0x24
   1ccfc:	subs	r3, r1, #256	; 0x100
   1cd00:	sbcs	r2, r2, #0
   1cd04:	bcs	1cda4 <flatcc_json_parser_union_type@@Base+0x5c0>
   1cd08:	ldr	r2, [fp, #8]
   1cd0c:	ldr	r9, [sp, #12]
   1cd10:	add	r6, r6, #1
   1cd14:	mov	r7, r0
   1cd18:	mov	r3, r2
   1cd1c:	ldrb	r2, [r2]
   1cd20:	add	r1, r2, r1
   1cd24:	strb	r1, [r3]
   1cd28:	ldr	r3, [sp, #16]
   1cd2c:	ldr	r1, [sp, #24]
   1cd30:	cmp	r1, #0
   1cd34:	bne	1cc84 <flatcc_json_parser_union_type@@Base+0x4a0>
   1cd38:	sub	sp, fp, #28
   1cd3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd40:	ldr	r0, [r5, #24]
   1cd44:	cmp	r0, #0
   1cd48:	bne	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1cd4c:	str	r7, [r5, #36]	; 0x24
   1cd50:	mov	r0, #23
   1cd54:	ldr	r1, [r5, #4]
   1cd58:	sub	r1, r7, r1
   1cd5c:	add	r1, r1, #1
   1cd60:	str	r1, [r5, #20]
   1cd64:	str	r0, [r5, #24]
   1cd68:	mov	r0, r4
   1cd6c:	sub	sp, fp, #28
   1cd70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd74:	mov	r0, #1
   1cd78:	str	r0, [r5, #12]
   1cd7c:	mov	r1, r2
   1cd80:	ldr	r0, [r5, #12]
   1cd84:	cmp	r0, #0
   1cd88:	bne	1cc60 <flatcc_json_parser_union_type@@Base+0x47c>
   1cd8c:	b	1cbd4 <flatcc_json_parser_union_type@@Base+0x3f0>
   1cd90:	ldr	r1, [r5, #24]
   1cd94:	cmp	r1, #0
   1cd98:	bne	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1cd9c:	mov	r1, #8
   1cda0:	b	1cdc8 <flatcc_json_parser_union_type@@Base+0x5e4>
   1cda4:	ldr	r1, [r5, #24]
   1cda8:	cmp	r1, #0
   1cdac:	bne	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1cdb0:	mov	r1, #7
   1cdb4:	b	1cdc8 <flatcc_json_parser_union_type@@Base+0x5e4>
   1cdb8:	ldr	r1, [r5, #24]
   1cdbc:	cmp	r1, #0
   1cdc0:	bne	1cd68 <flatcc_json_parser_union_type@@Base+0x584>
   1cdc4:	mov	r1, #14
   1cdc8:	str	r0, [r5, #36]	; 0x24
   1cdcc:	ldr	r2, [r5, #4]
   1cdd0:	sub	r0, r0, r2
   1cdd4:	add	r0, r0, #1
   1cdd8:	str	r0, [r5, #20]
   1cddc:	str	r1, [r5, #24]
   1cde0:	mov	r0, r4
   1cde4:	sub	sp, fp, #28
   1cde8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cdec <flatcc_json_parser_union_vector@@Base>:
   1cdec:	push	{r4, r5, r6, r7, fp, lr}
   1cdf0:	add	fp, sp, #16
   1cdf4:	sub	sp, sp, #16
   1cdf8:	mov	r6, r1
   1cdfc:	mov	r5, r0
   1ce00:	ldr	r0, [r0]
   1ce04:	ldr	r1, [fp, #12]
   1ce08:	mov	r7, r3
   1ce0c:	mov	r4, r2
   1ce10:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1ce14:	add	r2, r0, #8
   1ce18:	add	r3, r7, r7, lsl #1
   1ce1c:	mov	r1, r2
   1ce20:	ldr	r7, [r1, r3, lsl #3]!
   1ce24:	cmp	r7, #0
   1ce28:	beq	1ce44 <flatcc_json_parser_union_vector@@Base+0x58>
   1ce2c:	ldr	r0, [r5, #24]
   1ce30:	cmp	r0, #0
   1ce34:	beq	1ce90 <flatcc_json_parser_union_vector@@Base+0xa4>
   1ce38:	mov	r0, r4
   1ce3c:	sub	sp, fp, #16
   1ce40:	pop	{r4, r5, r6, r7, fp, pc}
   1ce44:	add	r2, r2, r3, lsl #3
   1ce48:	ldr	r3, [r0, #4]
   1ce4c:	ldrb	r7, [r2, #12]
   1ce50:	cmp	r7, #0
   1ce54:	beq	1ceb8 <flatcc_json_parser_union_vector@@Base+0xcc>
   1ce58:	sub	r3, r3, #1
   1ce5c:	ldr	r1, [fp, #16]
   1ce60:	ldr	r7, [fp, #8]
   1ce64:	str	r3, [r0, #4]
   1ce68:	ldr	r0, [r2, #16]
   1ce6c:	ldr	r3, [r2, #20]
   1ce70:	mov	r2, r4
   1ce74:	stm	sp, {r0, r7}
   1ce78:	str	r1, [sp, #8]
   1ce7c:	mov	r0, r5
   1ce80:	mov	r1, r6
   1ce84:	bl	1ceec <flatcc_json_parser_union_vector@@Base+0x100>
   1ce88:	sub	sp, fp, #16
   1ce8c:	pop	{r4, r5, r6, r7, fp, pc}
   1ce90:	str	r6, [r5, #36]	; 0x24
   1ce94:	mov	r0, #28
   1ce98:	ldr	r1, [r5, #4]
   1ce9c:	sub	r1, r6, r1
   1cea0:	add	r1, r1, #1
   1cea4:	str	r1, [r5, #20]
   1cea8:	str	r0, [r5, #24]
   1ceac:	mov	r0, r4
   1ceb0:	sub	sp, fp, #16
   1ceb4:	pop	{r4, r5, r6, r7, fp, pc}
   1ceb8:	add	r3, r3, #1
   1cebc:	str	r3, [r0, #4]
   1cec0:	ldr	r0, [r5, #16]
   1cec4:	str	r0, [r2, #8]
   1cec8:	ldr	r0, [r5, #4]
   1cecc:	str	r0, [r2, #4]
   1ced0:	str	r6, [r1]
   1ced4:	mov	r0, r5
   1ced8:	mov	r1, r6
   1cedc:	mov	r2, r4
   1cee0:	sub	sp, fp, #16
   1cee4:	pop	{r4, r5, r6, r7, fp, lr}
   1cee8:	b	1a330 <flatcc_json_parser_generic_json@@Base>
   1ceec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef0:	add	fp, sp, #28
   1cef4:	sub	sp, sp, #12
   1cef8:	mov	r5, r0
   1cefc:	mov	r0, #0
   1cf00:	mov	r8, r3
   1cf04:	mov	r6, r2
   1cf08:	mov	r7, r1
   1cf0c:	str	r0, [sp, #8]
   1cf10:	ldr	r0, [r5]
   1cf14:	bl	16104 <flatcc_builder_start_offset_vector@@Base>
   1cf18:	cmp	r0, #0
   1cf1c:	beq	1cf40 <flatcc_json_parser_union_vector@@Base+0x154>
   1cf20:	ldr	r0, [r5, #24]
   1cf24:	cmp	r0, #0
   1cf28:	bne	1cfc8 <flatcc_json_parser_union_vector@@Base+0x1dc>
   1cf2c:	str	r7, [r5, #36]	; 0x24
   1cf30:	mov	r0, #33	; 0x21
   1cf34:	ldr	r1, [r5, #4]
   1cf38:	sub	r1, r7, r1
   1cf3c:	b	1cfbc <flatcc_json_parser_union_vector@@Base+0x1d0>
   1cf40:	ldr	sl, [fp, #8]
   1cf44:	cmp	r7, r6
   1cf48:	beq	1cf88 <flatcc_json_parser_union_vector@@Base+0x19c>
   1cf4c:	ldrb	r0, [r7]
   1cf50:	cmp	r0, #91	; 0x5b
   1cf54:	bne	1cf88 <flatcc_json_parser_union_vector@@Base+0x19c>
   1cf58:	add	r1, r7, #1
   1cf5c:	sub	r0, r6, r1
   1cf60:	cmp	r0, #2
   1cf64:	blt	1d070 <flatcc_json_parser_union_vector@@Base+0x284>
   1cf68:	ldrb	r0, [r1]
   1cf6c:	cmp	r0, #32
   1cf70:	bls	1d060 <flatcc_json_parser_union_vector@@Base+0x274>
   1cf74:	mov	r7, r1
   1cf78:	cmp	r7, r6
   1cf7c:	mov	r4, r6
   1cf80:	bne	1d08c <flatcc_json_parser_union_vector@@Base+0x2a0>
   1cf84:	b	1d0c8 <flatcc_json_parser_union_vector@@Base+0x2dc>
   1cf88:	ldr	r0, [r5, #24]
   1cf8c:	mov	r9, r6
   1cf90:	cmp	r0, #0
   1cf94:	beq	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1e8>
   1cf98:	cmp	sl, #0
   1cf9c:	beq	1cffc <flatcc_json_parser_union_vector@@Base+0x210>
   1cfa0:	ldr	r0, [r5, #24]
   1cfa4:	cmp	r0, #0
   1cfa8:	bne	1cfc8 <flatcc_json_parser_union_vector@@Base+0x1dc>
   1cfac:	str	r9, [r5, #36]	; 0x24
   1cfb0:	mov	r0, #30
   1cfb4:	ldr	r1, [r5, #4]
   1cfb8:	sub	r1, r9, r1
   1cfbc:	add	r1, r1, #1
   1cfc0:	str	r1, [r5, #20]
   1cfc4:	str	r0, [r5, #24]
   1cfc8:	mov	r0, r6
   1cfcc:	sub	sp, fp, #28
   1cfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfd4:	str	r7, [r5, #36]	; 0x24
   1cfd8:	mov	r0, #22
   1cfdc:	mov	r9, r6
   1cfe0:	ldr	r1, [r5, #4]
   1cfe4:	sub	r1, r7, r1
   1cfe8:	add	r1, r1, #1
   1cfec:	str	r1, [r5, #20]
   1cff0:	str	r0, [r5, #24]
   1cff4:	cmp	sl, #0
   1cff8:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1cffc:	ldr	r0, [r5]
   1d000:	mov	r1, r8
   1d004:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1d008:	mov	r1, r0
   1d00c:	ldr	r0, [r5]
   1d010:	bl	1760c <flatcc_builder_end_offset_vector_for_unions@@Base>
   1d014:	cmp	r0, #0
   1d018:	str	r0, [sp, #8]
   1d01c:	beq	1d04c <flatcc_json_parser_union_vector@@Base+0x260>
   1d020:	ldr	r1, [fp, #12]
   1d024:	ldr	r0, [r5]
   1d028:	bl	177f8 <flatcc_builder_table_add_offset@@Base>
   1d02c:	cmp	r0, #0
   1d030:	beq	1d04c <flatcc_json_parser_union_vector@@Base+0x260>
   1d034:	ldr	r1, [sp, #8]
   1d038:	mov	r6, r9
   1d03c:	str	r1, [r0]
   1d040:	mov	r0, r6
   1d044:	sub	sp, fp, #28
   1d048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d04c:	mov	r7, r9
   1d050:	ldr	r0, [r5, #24]
   1d054:	cmp	r0, #0
   1d058:	bne	1cfc8 <flatcc_json_parser_union_vector@@Base+0x1dc>
   1d05c:	b	1cf2c <flatcc_json_parser_union_vector@@Base+0x140>
   1d060:	bne	1d070 <flatcc_json_parser_union_vector@@Base+0x284>
   1d064:	ldrb	r0, [r7, #2]!
   1d068:	cmp	r0, #32
   1d06c:	bhi	1d080 <flatcc_json_parser_union_vector@@Base+0x294>
   1d070:	mov	r0, r5
   1d074:	mov	r2, r6
   1d078:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d07c:	mov	r7, r0
   1d080:	cmp	r7, r6
   1d084:	mov	r4, r6
   1d088:	beq	1d0c8 <flatcc_json_parser_union_vector@@Base+0x2dc>
   1d08c:	ldrb	r0, [r7]
   1d090:	cmp	r0, #93	; 0x5d
   1d094:	bne	1d0c4 <flatcc_json_parser_union_vector@@Base+0x2d8>
   1d098:	add	r1, r7, #1
   1d09c:	sub	r0, r6, r1
   1d0a0:	cmp	r0, #2
   1d0a4:	blt	1d260 <flatcc_json_parser_union_vector@@Base+0x474>
   1d0a8:	ldrb	r0, [r1]
   1d0ac:	cmp	r0, #32
   1d0b0:	bls	1d24c <flatcc_json_parser_union_vector@@Base+0x460>
   1d0b4:	mov	r9, r1
   1d0b8:	cmp	sl, #0
   1d0bc:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1d0c0:	b	1cffc <flatcc_json_parser_union_vector@@Base+0x210>
   1d0c4:	mov	r4, r7
   1d0c8:	cmp	sl, #0
   1d0cc:	beq	1d22c <flatcc_json_parser_union_vector@@Base+0x440>
   1d0d0:	add	r0, r6, #1
   1d0d4:	mov	sl, #0
   1d0d8:	add	r9, sp, #8
   1d0dc:	str	r0, [sp, #4]
   1d0e0:	ldr	r0, [r5]
   1d0e4:	mov	r1, r8
   1d0e8:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1d0ec:	ldrb	r3, [r0, -sl]
   1d0f0:	ldr	r7, [fp, #16]
   1d0f4:	mov	r0, r5
   1d0f8:	mov	r1, r4
   1d0fc:	mov	r2, r6
   1d100:	str	r9, [sp]
   1d104:	blx	r7
   1d108:	cmp	r0, r6
   1d10c:	beq	1cfc8 <flatcc_json_parser_union_vector@@Base+0x1dc>
   1d110:	mov	r7, r0
   1d114:	ldr	r0, [r5]
   1d118:	mov	r1, #1
   1d11c:	bl	158c0 <flatcc_builder_extend_offset_vector@@Base>
   1d120:	cmp	r0, #0
   1d124:	beq	1cf20 <flatcc_json_parser_union_vector@@Base+0x134>
   1d128:	ldr	r1, [sp, #8]
   1d12c:	str	r1, [r0]
   1d130:	sub	r0, r6, r7
   1d134:	cmp	r0, #2
   1d138:	blt	1d1bc <flatcc_json_parser_union_vector@@Base+0x3d0>
   1d13c:	ldrb	r0, [r7]
   1d140:	cmp	r0, #32
   1d144:	bls	1d1a8 <flatcc_json_parser_union_vector@@Base+0x3bc>
   1d148:	mov	r4, r7
   1d14c:	cmp	r4, r6
   1d150:	beq	1d350 <flatcc_json_parser_union_vector@@Base+0x564>
   1d154:	ldrb	r0, [r4]
   1d158:	cmp	r0, #44	; 0x2c
   1d15c:	bne	1d27c <flatcc_json_parser_union_vector@@Base+0x490>
   1d160:	add	r1, r4, #1
   1d164:	sub	r0, r6, r1
   1d168:	cmp	r0, #2
   1d16c:	blt	1d1ec <flatcc_json_parser_union_vector@@Base+0x400>
   1d170:	ldrb	r0, [r1]
   1d174:	cmp	r0, #32
   1d178:	bls	1d1dc <flatcc_json_parser_union_vector@@Base+0x3f0>
   1d17c:	mov	r4, r1
   1d180:	cmp	r4, r6
   1d184:	beq	1d204 <flatcc_json_parser_union_vector@@Base+0x418>
   1d188:	ldrb	r0, [r4]
   1d18c:	cmp	r0, #93	; 0x5d
   1d190:	beq	1d2b8 <flatcc_json_parser_union_vector@@Base+0x4cc>
   1d194:	ldr	r0, [fp, #8]
   1d198:	sub	sl, sl, #1
   1d19c:	adds	r0, r0, sl
   1d1a0:	bne	1d0e0 <flatcc_json_parser_union_vector@@Base+0x2f4>
   1d1a4:	b	1d22c <flatcc_json_parser_union_vector@@Base+0x440>
   1d1a8:	bne	1d1bc <flatcc_json_parser_union_vector@@Base+0x3d0>
   1d1ac:	mov	r4, r7
   1d1b0:	ldrb	r0, [r4, #1]!
   1d1b4:	cmp	r0, #32
   1d1b8:	bhi	1d1d0 <flatcc_json_parser_union_vector@@Base+0x3e4>
   1d1bc:	mov	r0, r5
   1d1c0:	mov	r1, r7
   1d1c4:	mov	r2, r6
   1d1c8:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d1cc:	mov	r4, r0
   1d1d0:	cmp	r4, r6
   1d1d4:	bne	1d154 <flatcc_json_parser_union_vector@@Base+0x368>
   1d1d8:	b	1d350 <flatcc_json_parser_union_vector@@Base+0x564>
   1d1dc:	bne	1d1ec <flatcc_json_parser_union_vector@@Base+0x400>
   1d1e0:	ldrb	r0, [r4, #2]!
   1d1e4:	cmp	r0, #32
   1d1e8:	bhi	1d1fc <flatcc_json_parser_union_vector@@Base+0x410>
   1d1ec:	mov	r0, r5
   1d1f0:	mov	r2, r6
   1d1f4:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d1f8:	mov	r4, r0
   1d1fc:	cmp	r4, r6
   1d200:	bne	1d188 <flatcc_json_parser_union_vector@@Base+0x39c>
   1d204:	ldr	r0, [r5, #24]
   1d208:	mov	r9, r6
   1d20c:	cmp	r0, #0
   1d210:	bne	1d320 <flatcc_json_parser_union_vector@@Base+0x534>
   1d214:	str	r6, [r5, #36]	; 0x24
   1d218:	ldr	r2, [sp, #4]
   1d21c:	mov	r0, #9
   1d220:	ldr	r1, [r5, #4]
   1d224:	sub	r1, r2, r1
   1d228:	b	1d348 <flatcc_json_parser_union_vector@@Base+0x55c>
   1d22c:	ldr	r0, [r5, #24]
   1d230:	cmp	r0, #0
   1d234:	bne	1cfc8 <flatcc_json_parser_union_vector@@Base+0x1dc>
   1d238:	str	r4, [r5, #36]	; 0x24
   1d23c:	mov	r0, #30
   1d240:	ldr	r1, [r5, #4]
   1d244:	sub	r1, r4, r1
   1d248:	b	1cfbc <flatcc_json_parser_union_vector@@Base+0x1d0>
   1d24c:	bne	1d260 <flatcc_json_parser_union_vector@@Base+0x474>
   1d250:	ldrb	r0, [r7, #2]!
   1d254:	mov	r9, r7
   1d258:	cmp	r0, #32
   1d25c:	bhi	1cf98 <flatcc_json_parser_union_vector@@Base+0x1ac>
   1d260:	mov	r0, r5
   1d264:	mov	r2, r6
   1d268:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d26c:	mov	r9, r0
   1d270:	cmp	sl, #0
   1d274:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1d278:	b	1cffc <flatcc_json_parser_union_vector@@Base+0x210>
   1d27c:	cmp	r0, #93	; 0x5d
   1d280:	bne	1d310 <flatcc_json_parser_union_vector@@Base+0x524>
   1d284:	add	r1, r4, #1
   1d288:	sub	r0, r6, r1
   1d28c:	cmp	r0, #2
   1d290:	blt	1d2ec <flatcc_json_parser_union_vector@@Base+0x500>
   1d294:	ldrb	r0, [r1]
   1d298:	cmp	r0, #32
   1d29c:	bhi	1d2d4 <flatcc_json_parser_union_vector@@Base+0x4e8>
   1d2a0:	bne	1d2ec <flatcc_json_parser_union_vector@@Base+0x500>
   1d2a4:	ldrb	r0, [r4, #2]!
   1d2a8:	mov	r9, r4
   1d2ac:	cmp	r0, #32
   1d2b0:	bhi	1d320 <flatcc_json_parser_union_vector@@Base+0x534>
   1d2b4:	b	1d2ec <flatcc_json_parser_union_vector@@Base+0x500>
   1d2b8:	add	r1, r4, #1
   1d2bc:	sub	r0, r6, r1
   1d2c0:	cmp	r0, #2
   1d2c4:	blt	1d2ec <flatcc_json_parser_union_vector@@Base+0x500>
   1d2c8:	ldrb	r0, [r1]
   1d2cc:	cmp	r0, #32
   1d2d0:	bls	1d2a0 <flatcc_json_parser_union_vector@@Base+0x4b4>
   1d2d4:	mov	r9, r1
   1d2d8:	ldr	r0, [fp, #8]
   1d2dc:	add	r0, r0, sl
   1d2e0:	cmp	r0, #1
   1d2e4:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1d2e8:	b	1cffc <flatcc_json_parser_union_vector@@Base+0x210>
   1d2ec:	mov	r0, r5
   1d2f0:	mov	r2, r6
   1d2f4:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d2f8:	mov	r9, r0
   1d2fc:	ldr	r0, [fp, #8]
   1d300:	add	r0, r0, sl
   1d304:	cmp	r0, #1
   1d308:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1d30c:	b	1cffc <flatcc_json_parser_union_vector@@Base+0x210>
   1d310:	ldr	r0, [r5, #24]
   1d314:	mov	r9, r6
   1d318:	cmp	r0, #0
   1d31c:	beq	1d334 <flatcc_json_parser_union_vector@@Base+0x548>
   1d320:	ldr	r0, [fp, #8]
   1d324:	add	r0, r0, sl
   1d328:	cmp	r0, #1
   1d32c:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1d330:	b	1cffc <flatcc_json_parser_union_vector@@Base+0x210>
   1d334:	str	r4, [r5, #36]	; 0x24
   1d338:	mov	r0, #9
   1d33c:	ldr	r1, [r5, #4]
   1d340:	sub	r1, r4, r1
   1d344:	add	r1, r1, #1
   1d348:	str	r1, [r5, #20]
   1d34c:	str	r0, [r5, #24]
   1d350:	mov	r9, r6
   1d354:	ldr	r0, [fp, #8]
   1d358:	add	r0, r0, sl
   1d35c:	cmp	r0, #1
   1d360:	bne	1cfa0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1d364:	b	1cffc <flatcc_json_parser_union_vector@@Base+0x210>

0001d368 <flatcc_json_parser_union_type_vector@@Base>:
   1d368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d36c:	add	fp, sp, #28
   1d370:	sub	sp, sp, #28
   1d374:	mov	r7, r1
   1d378:	mov	r5, r0
   1d37c:	ldr	r0, [r0]
   1d380:	ldr	r1, [fp, #12]
   1d384:	mov	r4, r3
   1d388:	mov	r8, r2
   1d38c:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1d390:	add	r6, r4, r4, lsl #1
   1d394:	add	r0, r0, #8
   1d398:	add	r4, r0, r6, lsl #3
   1d39c:	mov	r0, r4
   1d3a0:	ldrb	r1, [r0, #12]!
   1d3a4:	cmp	r1, #0
   1d3a8:	beq	1d3cc <flatcc_json_parser_union_type_vector@@Base+0x64>
   1d3ac:	ldr	r0, [r5, #24]
   1d3b0:	cmp	r0, #0
   1d3b4:	bne	1d41c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d3b8:	str	r7, [r5, #36]	; 0x24
   1d3bc:	mov	r0, #28
   1d3c0:	ldr	r1, [r5, #4]
   1d3c4:	sub	r1, r7, r1
   1d3c8:	b	1d410 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   1d3cc:	mov	r1, #1
   1d3d0:	mov	r2, #1
   1d3d4:	mvn	r3, #0
   1d3d8:	strb	r1, [r0]
   1d3dc:	mov	r1, #1
   1d3e0:	ldr	r0, [r5]
   1d3e4:	bl	16078 <flatcc_builder_start_vector@@Base>
   1d3e8:	cmp	r0, #0
   1d3ec:	beq	1d428 <flatcc_json_parser_union_type_vector@@Base+0xc0>
   1d3f0:	mov	sl, r7
   1d3f4:	ldr	r0, [r5, #24]
   1d3f8:	cmp	r0, #0
   1d3fc:	bne	1d41c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d400:	str	sl, [r5, #36]	; 0x24
   1d404:	mov	r0, #33	; 0x21
   1d408:	ldr	r1, [r5, #4]
   1d40c:	sub	r1, sl, r1
   1d410:	add	r1, r1, #1
   1d414:	str	r1, [r5, #20]
   1d418:	str	r0, [r5, #24]
   1d41c:	mov	r0, r8
   1d420:	sub	sp, fp, #28
   1d424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d428:	cmp	r7, r8
   1d42c:	beq	1d46c <flatcc_json_parser_union_type_vector@@Base+0x104>
   1d430:	ldrb	r0, [r7]
   1d434:	cmp	r0, #91	; 0x5b
   1d438:	bne	1d46c <flatcc_json_parser_union_type_vector@@Base+0x104>
   1d43c:	add	r1, r7, #1
   1d440:	sub	r0, r8, r1
   1d444:	cmp	r0, #2
   1d448:	blt	1d4b0 <flatcc_json_parser_union_type_vector@@Base+0x148>
   1d44c:	ldrb	r0, [r1]
   1d450:	cmp	r0, #32
   1d454:	bls	1d4a0 <flatcc_json_parser_union_type_vector@@Base+0x138>
   1d458:	mov	r7, r1
   1d45c:	cmp	r7, r8
   1d460:	mov	sl, r8
   1d464:	bne	1d4cc <flatcc_json_parser_union_type_vector@@Base+0x164>
   1d468:	b	1d510 <flatcc_json_parser_union_type_vector@@Base+0x1a8>
   1d46c:	ldr	r0, [r5, #24]
   1d470:	cmp	r0, #0
   1d474:	mov	r0, r8
   1d478:	bne	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d47c:	str	r7, [r5, #36]	; 0x24
   1d480:	mov	r0, #22
   1d484:	ldr	r1, [r5, #4]
   1d488:	sub	r1, r7, r1
   1d48c:	add	r1, r1, #1
   1d490:	str	r1, [r5, #20]
   1d494:	str	r0, [r5, #24]
   1d498:	mov	r0, r8
   1d49c:	b	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d4a0:	bne	1d4b0 <flatcc_json_parser_union_type_vector@@Base+0x148>
   1d4a4:	ldrb	r0, [r7, #2]!
   1d4a8:	cmp	r0, #32
   1d4ac:	bhi	1d4c0 <flatcc_json_parser_union_type_vector@@Base+0x158>
   1d4b0:	mov	r0, r5
   1d4b4:	mov	r2, r8
   1d4b8:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d4bc:	mov	r7, r0
   1d4c0:	cmp	r7, r8
   1d4c4:	mov	sl, r8
   1d4c8:	beq	1d510 <flatcc_json_parser_union_type_vector@@Base+0x1a8>
   1d4cc:	ldrb	r0, [r7]
   1d4d0:	cmp	r0, #93	; 0x5d
   1d4d4:	bne	1d50c <flatcc_json_parser_union_type_vector@@Base+0x1a4>
   1d4d8:	add	r1, r7, #1
   1d4dc:	sub	r0, r8, r1
   1d4e0:	cmp	r0, #2
   1d4e4:	blt	1d984 <flatcc_json_parser_union_type_vector@@Base+0x61c>
   1d4e8:	ldrb	r0, [r1]
   1d4ec:	cmp	r0, #32
   1d4f0:	bhi	1d910 <flatcc_json_parser_union_type_vector@@Base+0x5a8>
   1d4f4:	bne	1d984 <flatcc_json_parser_union_type_vector@@Base+0x61c>
   1d4f8:	ldrb	r0, [r7, #2]!
   1d4fc:	cmp	r0, #32
   1d500:	mov	r0, r7
   1d504:	bls	1d984 <flatcc_json_parser_union_type_vector@@Base+0x61c>
   1d508:	b	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d50c:	mov	sl, r7
   1d510:	ldr	r0, [r5]
   1d514:	mov	r1, #1
   1d518:	bl	15524 <flatcc_builder_extend_vector@@Base>
   1d51c:	cmp	r0, #0
   1d520:	beq	1d3f4 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d524:	mov	r1, r0
   1d528:	add	r0, r8, #1
   1d52c:	str	r4, [sp, #16]
   1d530:	str	r0, [sp, #12]
   1d534:	mov	r9, #0
   1d538:	cmp	sl, r8
   1d53c:	mov	r4, r8
   1d540:	str	r1, [sp, #20]
   1d544:	strb	r9, [sp, #27]
   1d548:	beq	1d76c <flatcc_json_parser_union_type_vector@@Base+0x404>
   1d54c:	mov	r2, sl
   1d550:	mov	r9, #0
   1d554:	ldrb	ip, [r2], #1
   1d558:	cmp	ip, #45	; 0x2d
   1d55c:	movne	r2, sl
   1d560:	cmp	r2, r8
   1d564:	beq	1d5dc <flatcc_json_parser_union_type_vector@@Base+0x274>
   1d568:	mov	r7, #0
   1d56c:	mov	r0, #0
   1d570:	mov	r4, #10
   1d574:	ldrb	r1, [r2]
   1d578:	sub	r3, r1, #48	; 0x30
   1d57c:	uxtb	r3, r3
   1d580:	cmp	r3, #9
   1d584:	bhi	1d5fc <flatcc_json_parser_union_type_vector@@Base+0x294>
   1d588:	add	r3, r0, r0, lsl #2
   1d58c:	lsl	r3, r3, #1
   1d590:	umlal	r1, r3, r7, r4
   1d594:	subs	r1, r1, #48	; 0x30
   1d598:	sbc	r3, r3, #0
   1d59c:	subs	r7, r1, r7
   1d5a0:	sbcs	r0, r3, r0
   1d5a4:	bcc	1d680 <flatcc_json_parser_union_type_vector@@Base+0x318>
   1d5a8:	add	r2, r2, #1
   1d5ac:	mov	r7, r1
   1d5b0:	mov	r0, r3
   1d5b4:	cmp	r8, r2
   1d5b8:	bne	1d574 <flatcc_json_parser_union_type_vector@@Base+0x20c>
   1d5bc:	mov	lr, #0
   1d5c0:	mov	r2, r8
   1d5c4:	mov	r7, r1
   1d5c8:	mov	r0, r3
   1d5cc:	cmp	r2, sl
   1d5d0:	mov	r4, sl
   1d5d4:	bne	1d60c <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   1d5d8:	b	1d76c <flatcc_json_parser_union_type_vector@@Base+0x404>
   1d5dc:	mov	r2, r8
   1d5e0:	mov	r7, #0
   1d5e4:	mov	r0, #0
   1d5e8:	mov	lr, #0
   1d5ec:	cmp	r2, sl
   1d5f0:	mov	r4, sl
   1d5f4:	bne	1d60c <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   1d5f8:	b	1d76c <flatcc_json_parser_union_type_vector@@Base+0x404>
   1d5fc:	mov	lr, #1
   1d600:	cmp	r2, sl
   1d604:	mov	r4, sl
   1d608:	beq	1d76c <flatcc_json_parser_union_type_vector@@Base+0x404>
   1d60c:	cmp	lr, #0
   1d610:	beq	1d660 <flatcc_json_parser_union_type_vector@@Base+0x2f8>
   1d614:	ldrb	r1, [r2]
   1d618:	cmp	r1, #46	; 0x2e
   1d61c:	beq	1d62c <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   1d620:	cmp	r1, #101	; 0x65
   1d624:	cmpne	r1, #69	; 0x45
   1d628:	bne	1d6d0 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1d62c:	ldr	r0, [r5, #24]
   1d630:	mov	r7, #0
   1d634:	mov	r4, r8
   1d638:	cmp	r0, #0
   1d63c:	mov	r0, #0
   1d640:	bne	1d6d4 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   1d644:	str	r2, [r5, #36]	; 0x24
   1d648:	ldr	r0, [r5, #4]
   1d64c:	sub	r0, r2, r0
   1d650:	add	r0, r0, #1
   1d654:	str	r0, [r5, #20]
   1d658:	mov	r0, #12
   1d65c:	b	1d6b0 <flatcc_json_parser_union_type_vector@@Base+0x348>
   1d660:	mov	r4, r2
   1d664:	mov	r9, #0
   1d668:	cmp	r4, sl
   1d66c:	bne	1d6e0 <flatcc_json_parser_union_type_vector@@Base+0x378>
   1d670:	mov	r4, sl
   1d674:	cmp	sl, r4
   1d678:	bne	1d7a8 <flatcc_json_parser_union_type_vector@@Base+0x440>
   1d67c:	b	1d774 <flatcc_json_parser_union_type_vector@@Base+0x40c>
   1d680:	ldr	r0, [r5, #24]
   1d684:	mov	r7, #0
   1d688:	mov	r4, r8
   1d68c:	cmp	r0, #0
   1d690:	mov	r0, #0
   1d694:	bne	1d6d4 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   1d698:	str	r2, [r5, #36]	; 0x24
   1d69c:	ldr	r0, [r5, #4]
   1d6a0:	sub	r0, r2, r0
   1d6a4:	add	r0, r0, #1
   1d6a8:	str	r0, [r5, #20]
   1d6ac:	mov	r0, #8
   1d6b0:	str	r0, [r5, #24]
   1d6b4:	mov	r7, #0
   1d6b8:	mov	r0, #0
   1d6bc:	mov	r4, r8
   1d6c0:	mov	r9, #0
   1d6c4:	cmp	r4, sl
   1d6c8:	bne	1d6e0 <flatcc_json_parser_union_type_vector@@Base+0x378>
   1d6cc:	b	1d670 <flatcc_json_parser_union_type_vector@@Base+0x308>
   1d6d0:	mov	r4, r2
   1d6d4:	mov	r9, #0
   1d6d8:	cmp	r4, sl
   1d6dc:	beq	1d670 <flatcc_json_parser_union_type_vector@@Base+0x308>
   1d6e0:	cmp	ip, #45	; 0x2d
   1d6e4:	bne	1d710 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1d6e8:	ldr	r0, [r5, #24]
   1d6ec:	cmp	r0, #0
   1d6f0:	bne	1d728 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
   1d6f4:	str	r4, [r5, #36]	; 0x24
   1d6f8:	ldr	r0, [r5, #4]
   1d6fc:	sub	r0, r4, r0
   1d700:	add	r0, r0, #1
   1d704:	str	r0, [r5, #20]
   1d708:	mov	r0, #8
   1d70c:	b	1d764 <flatcc_json_parser_union_type_vector@@Base+0x3fc>
   1d710:	subs	r1, r7, #256	; 0x100
   1d714:	sbcs	r0, r0, #0
   1d718:	bcc	1d738 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1d71c:	ldr	r0, [r5, #24]
   1d720:	cmp	r0, #0
   1d724:	beq	1d74c <flatcc_json_parser_union_type_vector@@Base+0x3e4>
   1d728:	mov	r4, r8
   1d72c:	cmp	sl, r4
   1d730:	bne	1d7a8 <flatcc_json_parser_union_type_vector@@Base+0x440>
   1d734:	b	1d774 <flatcc_json_parser_union_type_vector@@Base+0x40c>
   1d738:	mov	r9, r7
   1d73c:	strb	r7, [sp, #27]
   1d740:	cmp	sl, r4
   1d744:	bne	1d7a8 <flatcc_json_parser_union_type_vector@@Base+0x440>
   1d748:	b	1d774 <flatcc_json_parser_union_type_vector@@Base+0x40c>
   1d74c:	str	r4, [r5, #36]	; 0x24
   1d750:	ldr	r0, [r5, #4]
   1d754:	sub	r0, r4, r0
   1d758:	add	r0, r0, #1
   1d75c:	str	r0, [r5, #20]
   1d760:	mov	r0, #7
   1d764:	str	r0, [r5, #24]
   1d768:	mov	r4, r8
   1d76c:	cmp	sl, r4
   1d770:	bne	1d7a8 <flatcc_json_parser_union_type_vector@@Base+0x440>
   1d774:	ldr	r3, [fp, #16]
   1d778:	add	r0, sp, #27
   1d77c:	mov	r1, sl
   1d780:	mov	r2, r8
   1d784:	str	r0, [sp]
   1d788:	mov	r0, r5
   1d78c:	bl	1cb7c <flatcc_json_parser_union_type@@Base+0x398>
   1d790:	mov	r4, r0
   1d794:	cmp	r0, sl
   1d798:	beq	1d93c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d79c:	cmp	r4, r8
   1d7a0:	beq	1d93c <flatcc_json_parser_union_type_vector@@Base+0x5d4>
   1d7a4:	ldrb	r9, [sp, #27]
   1d7a8:	ldr	r1, [fp, #24]
   1d7ac:	uxtb	r0, r9
   1d7b0:	blx	r1
   1d7b4:	cmp	r0, #0
   1d7b8:	bne	1d7d0 <flatcc_json_parser_union_type_vector@@Base+0x468>
   1d7bc:	ldrb	r0, [r5, #8]
   1d7c0:	tst	r0, #1
   1d7c4:	beq	1d950 <flatcc_json_parser_union_type_vector@@Base+0x5e8>
   1d7c8:	mov	r9, #0
   1d7cc:	strb	r9, [sp, #27]
   1d7d0:	ldr	r0, [sp, #20]
   1d7d4:	strb	r9, [r0]
   1d7d8:	sub	r0, r8, r4
   1d7dc:	cmp	r0, #2
   1d7e0:	blt	1d870 <flatcc_json_parser_union_type_vector@@Base+0x508>
   1d7e4:	ldrb	r0, [r4]
   1d7e8:	cmp	r0, #32
   1d7ec:	bls	1d85c <flatcc_json_parser_union_type_vector@@Base+0x4f4>
   1d7f0:	mov	sl, r4
   1d7f4:	cmp	sl, r8
   1d7f8:	beq	1d8e0 <flatcc_json_parser_union_type_vector@@Base+0x578>
   1d7fc:	ldrb	r0, [sl]
   1d800:	ldr	r4, [sp, #16]
   1d804:	cmp	r0, #44	; 0x2c
   1d808:	bne	1d8ec <flatcc_json_parser_union_type_vector@@Base+0x584>
   1d80c:	add	r1, sl, #1
   1d810:	sub	r0, r8, r1
   1d814:	cmp	r0, #2
   1d818:	blt	1d8a0 <flatcc_json_parser_union_type_vector@@Base+0x538>
   1d81c:	ldrb	r0, [r1]
   1d820:	cmp	r0, #32
   1d824:	bls	1d890 <flatcc_json_parser_union_type_vector@@Base+0x528>
   1d828:	mov	sl, r1
   1d82c:	cmp	sl, r8
   1d830:	beq	1d8b8 <flatcc_json_parser_union_type_vector@@Base+0x550>
   1d834:	ldrb	r0, [sl]
   1d838:	cmp	r0, #93	; 0x5d
   1d83c:	beq	1d8f4 <flatcc_json_parser_union_type_vector@@Base+0x58c>
   1d840:	ldr	r0, [r5]
   1d844:	mov	r1, #1
   1d848:	bl	15524 <flatcc_builder_extend_vector@@Base>
   1d84c:	mov	r1, r0
   1d850:	cmp	r0, #0
   1d854:	bne	1d534 <flatcc_json_parser_union_type_vector@@Base+0x1cc>
   1d858:	b	1d3f4 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d85c:	bne	1d870 <flatcc_json_parser_union_type_vector@@Base+0x508>
   1d860:	mov	sl, r4
   1d864:	ldrb	r0, [sl, #1]!
   1d868:	cmp	r0, #32
   1d86c:	bhi	1d884 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   1d870:	mov	r0, r5
   1d874:	mov	r1, r4
   1d878:	mov	r2, r8
   1d87c:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d880:	mov	sl, r0
   1d884:	cmp	sl, r8
   1d888:	bne	1d7fc <flatcc_json_parser_union_type_vector@@Base+0x494>
   1d88c:	b	1d8e0 <flatcc_json_parser_union_type_vector@@Base+0x578>
   1d890:	bne	1d8a0 <flatcc_json_parser_union_type_vector@@Base+0x538>
   1d894:	ldrb	r0, [sl, #2]!
   1d898:	cmp	r0, #32
   1d89c:	bhi	1d8b0 <flatcc_json_parser_union_type_vector@@Base+0x548>
   1d8a0:	mov	r0, r5
   1d8a4:	mov	r2, r8
   1d8a8:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d8ac:	mov	sl, r0
   1d8b0:	cmp	sl, r8
   1d8b4:	bne	1d834 <flatcc_json_parser_union_type_vector@@Base+0x4cc>
   1d8b8:	ldr	r0, [r5, #24]
   1d8bc:	cmp	r0, #0
   1d8c0:	mov	r0, r8
   1d8c4:	bne	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d8c8:	str	r8, [r5, #36]	; 0x24
   1d8cc:	ldr	r2, [sp, #12]
   1d8d0:	mov	r0, #9
   1d8d4:	ldr	r1, [r5, #4]
   1d8d8:	sub	r1, r2, r1
   1d8dc:	b	1d490 <flatcc_json_parser_union_type_vector@@Base+0x128>
   1d8e0:	ldr	r4, [sp, #16]
   1d8e4:	mov	r0, r8
   1d8e8:	b	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d8ec:	cmp	r0, #93	; 0x5d
   1d8f0:	bne	1d918 <flatcc_json_parser_union_type_vector@@Base+0x5b0>
   1d8f4:	add	r1, sl, #1
   1d8f8:	sub	r0, r8, r1
   1d8fc:	cmp	r0, #2
   1d900:	blt	1d984 <flatcc_json_parser_union_type_vector@@Base+0x61c>
   1d904:	ldrb	r0, [r1]
   1d908:	cmp	r0, #32
   1d90c:	bls	1d970 <flatcc_json_parser_union_type_vector@@Base+0x608>
   1d910:	mov	r0, r1
   1d914:	b	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d918:	ldr	r0, [r5, #24]
   1d91c:	cmp	r0, #0
   1d920:	mov	r0, r8
   1d924:	bne	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d928:	str	sl, [r5, #36]	; 0x24
   1d92c:	mov	r0, #9
   1d930:	ldr	r1, [r5, #4]
   1d934:	sub	r1, sl, r1
   1d938:	b	1d48c <flatcc_json_parser_union_type_vector@@Base+0x124>
   1d93c:	mov	sl, r4
   1d940:	ldr	r0, [r5, #24]
   1d944:	cmp	r0, #0
   1d948:	bne	1d41c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d94c:	b	1d400 <flatcc_json_parser_union_type_vector@@Base+0x98>
   1d950:	ldr	r0, [r5, #24]
   1d954:	cmp	r0, #0
   1d958:	bne	1d41c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1d95c:	str	r4, [r5, #36]	; 0x24
   1d960:	mov	r0, #15
   1d964:	ldr	r1, [r5, #4]
   1d968:	sub	r1, r4, r1
   1d96c:	b	1d410 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   1d970:	bne	1d984 <flatcc_json_parser_union_type_vector@@Base+0x61c>
   1d974:	ldrb	r0, [sl, #2]!
   1d978:	cmp	r0, #32
   1d97c:	mov	r0, sl
   1d980:	bhi	1d990 <flatcc_json_parser_union_type_vector@@Base+0x628>
   1d984:	mov	r0, r5
   1d988:	mov	r2, r8
   1d98c:	bl	19834 <flatcc_json_parser_space_ext@@Base>
   1d990:	mov	sl, r0
   1d994:	ldr	r0, [r5]
   1d998:	bl	173e0 <flatcc_builder_vector_count@@Base>
   1d99c:	str	r0, [r4, #16]
   1d9a0:	mov	r7, r0
   1d9a4:	ldr	r0, [r5]
   1d9a8:	mov	r1, r7
   1d9ac:	bl	148cc <flatcc_builder_enter_user_frame@@Base>
   1d9b0:	mov	r9, r0
   1d9b4:	ldr	r0, [r5]
   1d9b8:	mov	r1, r9
   1d9bc:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1d9c0:	mov	r4, r0
   1d9c4:	ldr	r0, [r5]
   1d9c8:	bl	173ec <flatcc_builder_vector_edit@@Base>
   1d9cc:	mov	r1, r0
   1d9d0:	mov	r0, r4
   1d9d4:	mov	r2, r7
   1d9d8:	bl	12900 <memcpy@plt>
   1d9dc:	ldr	r0, [r5]
   1d9e0:	bl	172f0 <flatcc_builder_end_vector@@Base>
   1d9e4:	cmp	r0, #0
   1d9e8:	beq	1d3f4 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1d9ec:	ldr	r1, [fp, #8]
   1d9f0:	mov	r4, r0
   1d9f4:	ldr	r0, [r5]
   1d9f8:	sub	r1, r1, #1
   1d9fc:	bl	177f8 <flatcc_builder_table_add_offset@@Base>
   1da00:	cmp	r0, #0
   1da04:	beq	1d3f4 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1da08:	str	r4, [r0]
   1da0c:	ldr	r1, [fp, #12]
   1da10:	ldr	r0, [r5]
   1da14:	bl	14a60 <flatcc_builder_get_user_frame_ptr@@Base>
   1da18:	add	r2, r0, #8
   1da1c:	mov	r3, r2
   1da20:	ldr	r1, [r3, r6, lsl #3]!
   1da24:	str	r9, [r3, #20]
   1da28:	ldr	r3, [r0, #4]
   1da2c:	cmp	r1, #0
   1da30:	beq	1daa0 <flatcc_json_parser_union_type_vector@@Base+0x738>
   1da34:	cmp	r3, #0
   1da38:	beq	1dab8 <flatcc_json_parser_union_type_vector@@Base+0x750>
   1da3c:	sub	r3, r3, #1
   1da40:	ldr	ip, [fp, #20]
   1da44:	str	r3, [r0, #4]
   1da48:	add	r0, r2, r6, lsl #3
   1da4c:	mov	r3, r9
   1da50:	ldr	r6, [r5, #4]
   1da54:	ldr	r4, [r5, #16]
   1da58:	ldr	r2, [r0, #8]
   1da5c:	str	r2, [r5, #16]
   1da60:	mov	r2, r8
   1da64:	ldr	r0, [r0, #4]
   1da68:	str	r0, [r5, #4]
   1da6c:	ldr	r0, [fp, #8]
   1da70:	str	r7, [sp]
   1da74:	stmib	sp, {r0, ip}
   1da78:	mov	r0, r5
   1da7c:	bl	1ceec <flatcc_json_parser_union_vector@@Base+0x100>
   1da80:	cmp	r0, r8
   1da84:	beq	1d41c <flatcc_json_parser_union_type_vector@@Base+0xb4>
   1da88:	str	r6, [r5, #4]
   1da8c:	str	r4, [r5, #16]
   1da90:	mov	r8, sl
   1da94:	mov	r0, r8
   1da98:	sub	sp, fp, #28
   1da9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daa0:	add	r1, r3, #1
   1daa4:	str	r1, [r0, #4]
   1daa8:	mov	r8, sl
   1daac:	mov	r0, r8
   1dab0:	sub	sp, fp, #28
   1dab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dab8:	movw	r0, #917	; 0x395
   1dabc:	movw	r1, #932	; 0x3a4
   1dac0:	movw	r3, #1210	; 0x4ba
   1dac4:	movw	r2, #1122	; 0x462
   1dac8:	movt	r0, #2
   1dacc:	movt	r1, #2
   1dad0:	movt	r3, #2
   1dad4:	bl	129c0 <__assert_fail@plt>

0001dad8 <flatcc_json_parser_table_as_root@@Base>:
   1dad8:	push	{r4, r5, r6, r7, fp, lr}
   1dadc:	add	fp, sp, #16
   1dae0:	sub	sp, sp, #48	; 0x30
   1dae4:	cmp	r1, #0
   1dae8:	vmov.i32	q8, #0	; 0x00000000
   1daec:	add	r5, sp, #4
   1daf0:	mov	r6, r0
   1daf4:	add	r7, r2, r3
   1daf8:	mov	r4, r2
   1dafc:	movne	r5, r1
   1db00:	mov	r1, #1
   1db04:	add	r0, r5, #12
   1db08:	vst1.32	{d16-d17}, [r0]
   1db0c:	add	r0, r5, #28
   1db10:	vst1.32	{d16-d17}, [r0]
   1db14:	ldr	r0, [fp, #8]
   1db18:	str	r2, [r5, #4]
   1db1c:	str	r6, [r5]
   1db20:	str	r0, [r5, #8]
   1db24:	str	r1, [r5, #16]
   1db28:	mov	r1, #2
   1db2c:	str	r2, [r5, #28]
   1db30:	str	r7, [r5, #32]
   1db34:	str	r2, [r5, #36]	; 0x24
   1db38:	mov	r2, #0
   1db3c:	and	r3, r1, r0, lsr #1
   1db40:	ldr	r1, [fp, #12]
   1db44:	mov	r0, r6
   1db48:	bl	15038 <flatcc_builder_start_buffer@@Base>
   1db4c:	mov	r1, r0
   1db50:	mvn	r0, #0
   1db54:	cmp	r1, #0
   1db58:	bne	1db80 <flatcc_json_parser_table_as_root@@Base+0xa8>
   1db5c:	ldr	ip, [fp, #16]
   1db60:	mov	r3, sp
   1db64:	mov	r0, r5
   1db68:	mov	r1, r4
   1db6c:	mov	r2, r7
   1db70:	blx	ip
   1db74:	ldr	r0, [r5, #24]
   1db78:	cmp	r0, #0
   1db7c:	beq	1db88 <flatcc_json_parser_table_as_root@@Base+0xb0>
   1db80:	sub	sp, fp, #16
   1db84:	pop	{r4, r5, r6, r7, fp, pc}
   1db88:	ldr	r1, [sp]
   1db8c:	mov	r0, r6
   1db90:	bl	15228 <flatcc_builder_end_buffer@@Base>
   1db94:	cmp	r0, #0
   1db98:	mvn	r0, #0
   1db9c:	movne	r0, #0
   1dba0:	strne	r4, [r5, #40]	; 0x28
   1dba4:	sub	sp, fp, #16
   1dba8:	pop	{r4, r5, r6, r7, fp, pc}

0001dbac <flatcc_json_parser_struct_as_root@@Base>:
   1dbac:	push	{r4, r5, r6, r7, fp, lr}
   1dbb0:	add	fp, sp, #16
   1dbb4:	sub	sp, sp, #48	; 0x30
   1dbb8:	cmp	r1, #0
   1dbbc:	vmov.i32	q8, #0	; 0x00000000
   1dbc0:	add	r5, sp, #4
   1dbc4:	mov	r6, r0
   1dbc8:	add	r7, r2, r3
   1dbcc:	mov	r4, r2
   1dbd0:	movne	r5, r1
   1dbd4:	mov	r1, #1
   1dbd8:	add	r0, r5, #12
   1dbdc:	vst1.32	{d16-d17}, [r0]
   1dbe0:	add	r0, r5, #28
   1dbe4:	vst1.32	{d16-d17}, [r0]
   1dbe8:	ldr	r0, [fp, #8]
   1dbec:	str	r2, [r5, #4]
   1dbf0:	str	r6, [r5]
   1dbf4:	str	r0, [r5, #8]
   1dbf8:	str	r1, [r5, #16]
   1dbfc:	mov	r1, #2
   1dc00:	str	r2, [r5, #28]
   1dc04:	str	r7, [r5, #32]
   1dc08:	str	r2, [r5, #36]	; 0x24
   1dc0c:	mov	r2, #0
   1dc10:	and	r3, r1, r0, lsr #1
   1dc14:	ldr	r1, [fp, #12]
   1dc18:	mov	r0, r6
   1dc1c:	bl	15038 <flatcc_builder_start_buffer@@Base>
   1dc20:	mov	r1, r0
   1dc24:	mvn	r0, #0
   1dc28:	cmp	r1, #0
   1dc2c:	bne	1dc54 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   1dc30:	ldr	ip, [fp, #16]
   1dc34:	mov	r3, sp
   1dc38:	mov	r0, r5
   1dc3c:	mov	r1, r4
   1dc40:	mov	r2, r7
   1dc44:	blx	ip
   1dc48:	ldr	r0, [r5, #24]
   1dc4c:	cmp	r0, #0
   1dc50:	beq	1dc5c <flatcc_json_parser_struct_as_root@@Base+0xb0>
   1dc54:	sub	sp, fp, #16
   1dc58:	pop	{r4, r5, r6, r7, fp, pc}
   1dc5c:	ldr	r1, [sp]
   1dc60:	mov	r0, r6
   1dc64:	bl	15228 <flatcc_builder_end_buffer@@Base>
   1dc68:	cmp	r0, #0
   1dc6c:	mvn	r0, #0
   1dc70:	movne	r0, #0
   1dc74:	strne	r4, [r5, #40]	; 0x28
   1dc78:	sub	sp, fp, #16
   1dc7c:	pop	{r4, r5, r6, r7, fp, pc}
   1dc80:	eor	r1, r1, #-2147483648	; 0x80000000
   1dc84:	b	1dc8c <flatcc_json_parser_struct_as_root@@Base+0xe0>
   1dc88:	eor	r3, r3, #-2147483648	; 0x80000000
   1dc8c:	push	{r4, r5, lr}
   1dc90:	lsl	r4, r1, #1
   1dc94:	lsl	r5, r3, #1
   1dc98:	teq	r4, r5
   1dc9c:	teqeq	r0, r2
   1dca0:	orrsne	ip, r4, r0
   1dca4:	orrsne	ip, r5, r2
   1dca8:	mvnsne	ip, r4, asr #21
   1dcac:	mvnsne	ip, r5, asr #21
   1dcb0:	beq	1de9c <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   1dcb4:	lsr	r4, r4, #21
   1dcb8:	rsbs	r5, r4, r5, lsr #21
   1dcbc:	rsblt	r5, r5, #0
   1dcc0:	ble	1dce0 <flatcc_json_parser_struct_as_root@@Base+0x134>
   1dcc4:	add	r4, r4, r5
   1dcc8:	eor	r2, r0, r2
   1dccc:	eor	r3, r1, r3
   1dcd0:	eor	r0, r2, r0
   1dcd4:	eor	r1, r3, r1
   1dcd8:	eor	r2, r0, r2
   1dcdc:	eor	r3, r1, r3
   1dce0:	cmp	r5, #54	; 0x36
   1dce4:	pophi	{r4, r5, pc}
   1dce8:	tst	r1, #-2147483648	; 0x80000000
   1dcec:	lsl	r1, r1, #12
   1dcf0:	mov	ip, #1048576	; 0x100000
   1dcf4:	orr	r1, ip, r1, lsr #12
   1dcf8:	beq	1dd04 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1dcfc:	rsbs	r0, r0, #0
   1dd00:	rsc	r1, r1, #0
   1dd04:	tst	r3, #-2147483648	; 0x80000000
   1dd08:	lsl	r3, r3, #12
   1dd0c:	orr	r3, ip, r3, lsr #12
   1dd10:	beq	1dd1c <flatcc_json_parser_struct_as_root@@Base+0x170>
   1dd14:	rsbs	r2, r2, #0
   1dd18:	rsc	r3, r3, #0
   1dd1c:	teq	r4, r5
   1dd20:	beq	1de84 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   1dd24:	sub	r4, r4, #1
   1dd28:	rsbs	lr, r5, #32
   1dd2c:	blt	1dd48 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   1dd30:	lsl	ip, r2, lr
   1dd34:	adds	r0, r0, r2, lsr r5
   1dd38:	adc	r1, r1, #0
   1dd3c:	adds	r0, r0, r3, lsl lr
   1dd40:	adcs	r1, r1, r3, asr r5
   1dd44:	b	1dd64 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   1dd48:	sub	r5, r5, #32
   1dd4c:	add	lr, lr, #32
   1dd50:	cmp	r2, #1
   1dd54:	lsl	ip, r3, lr
   1dd58:	orrcs	ip, ip, #2
   1dd5c:	adds	r0, r0, r3, asr r5
   1dd60:	adcs	r1, r1, r3, asr #31
   1dd64:	and	r5, r1, #-2147483648	; 0x80000000
   1dd68:	bpl	1dd78 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1dd6c:	rsbs	ip, ip, #0
   1dd70:	rscs	r0, r0, #0
   1dd74:	rsc	r1, r1, #0
   1dd78:	cmp	r1, #1048576	; 0x100000
   1dd7c:	bcc	1ddbc <flatcc_json_parser_struct_as_root@@Base+0x210>
   1dd80:	cmp	r1, #2097152	; 0x200000
   1dd84:	bcc	1dda4 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1dd88:	lsrs	r1, r1, #1
   1dd8c:	rrxs	r0, r0
   1dd90:	rrx	ip, ip
   1dd94:	add	r4, r4, #1
   1dd98:	lsl	r2, r4, #21
   1dd9c:	cmn	r2, #4194304	; 0x400000
   1dda0:	bcs	1defc <flatcc_json_parser_struct_as_root@@Base+0x350>
   1dda4:	cmp	ip, #-2147483648	; 0x80000000
   1dda8:	lsrseq	ip, r0, #1
   1ddac:	adcs	r0, r0, #0
   1ddb0:	adc	r1, r1, r4, lsl #20
   1ddb4:	orr	r1, r1, r5
   1ddb8:	pop	{r4, r5, pc}
   1ddbc:	lsls	ip, ip, #1
   1ddc0:	adcs	r0, r0, r0
   1ddc4:	adc	r1, r1, r1
   1ddc8:	tst	r1, #1048576	; 0x100000
   1ddcc:	sub	r4, r4, #1
   1ddd0:	bne	1dda4 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1ddd4:	teq	r1, #0
   1ddd8:	moveq	r1, r0
   1dddc:	moveq	r0, #0
   1dde0:	clz	r3, r1
   1dde4:	addeq	r3, r3, #32
   1dde8:	sub	r3, r3, #11
   1ddec:	subs	r2, r3, #32
   1ddf0:	bge	1de14 <flatcc_json_parser_struct_as_root@@Base+0x268>
   1ddf4:	adds	r2, r2, #12
   1ddf8:	ble	1de10 <flatcc_json_parser_struct_as_root@@Base+0x264>
   1ddfc:	add	ip, r2, #20
   1de00:	rsb	r2, r2, #12
   1de04:	lsl	r0, r1, ip
   1de08:	lsr	r1, r1, r2
   1de0c:	b	1de24 <flatcc_json_parser_struct_as_root@@Base+0x278>
   1de10:	add	r2, r2, #20
   1de14:	rsble	ip, r2, #32
   1de18:	lsl	r1, r1, r2
   1de1c:	orrle	r1, r1, r0, lsr ip
   1de20:	lslle	r0, r0, r2
   1de24:	subs	r4, r4, r3
   1de28:	addge	r1, r1, r4, lsl #20
   1de2c:	orrge	r1, r1, r5
   1de30:	popge	{r4, r5, pc}
   1de34:	mvn	r4, r4
   1de38:	subs	r4, r4, #31
   1de3c:	bge	1de78 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   1de40:	adds	r4, r4, #12
   1de44:	bgt	1de60 <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   1de48:	add	r4, r4, #20
   1de4c:	rsb	r2, r4, #32
   1de50:	lsr	r0, r0, r4
   1de54:	orr	r0, r0, r1, lsl r2
   1de58:	orr	r1, r5, r1, lsr r4
   1de5c:	pop	{r4, r5, pc}
   1de60:	rsb	r4, r4, #12
   1de64:	rsb	r2, r4, #32
   1de68:	lsr	r0, r0, r2
   1de6c:	orr	r0, r0, r1, lsl r4
   1de70:	mov	r1, r5
   1de74:	pop	{r4, r5, pc}
   1de78:	lsr	r0, r1, r4
   1de7c:	mov	r1, r5
   1de80:	pop	{r4, r5, pc}
   1de84:	teq	r4, #0
   1de88:	eor	r3, r3, #1048576	; 0x100000
   1de8c:	eoreq	r1, r1, #1048576	; 0x100000
   1de90:	addeq	r4, r4, #1
   1de94:	subne	r5, r5, #1
   1de98:	b	1dd24 <flatcc_json_parser_struct_as_root@@Base+0x178>
   1de9c:	mvns	ip, r4, asr #21
   1dea0:	mvnsne	ip, r5, asr #21
   1dea4:	beq	1df0c <flatcc_json_parser_struct_as_root@@Base+0x360>
   1dea8:	teq	r4, r5
   1deac:	teqeq	r0, r2
   1deb0:	beq	1dec4 <flatcc_json_parser_struct_as_root@@Base+0x318>
   1deb4:	orrs	ip, r4, r0
   1deb8:	moveq	r1, r3
   1debc:	moveq	r0, r2
   1dec0:	pop	{r4, r5, pc}
   1dec4:	teq	r1, r3
   1dec8:	movne	r1, #0
   1decc:	movne	r0, #0
   1ded0:	popne	{r4, r5, pc}
   1ded4:	lsrs	ip, r4, #21
   1ded8:	bne	1deec <flatcc_json_parser_struct_as_root@@Base+0x340>
   1dedc:	lsls	r0, r0, #1
   1dee0:	adcs	r1, r1, r1
   1dee4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1dee8:	pop	{r4, r5, pc}
   1deec:	adds	r4, r4, #4194304	; 0x400000
   1def0:	addcc	r1, r1, #1048576	; 0x100000
   1def4:	popcc	{r4, r5, pc}
   1def8:	and	r5, r1, #-2147483648	; 0x80000000
   1defc:	orr	r1, r5, #2130706432	; 0x7f000000
   1df00:	orr	r1, r1, #15728640	; 0xf00000
   1df04:	mov	r0, #0
   1df08:	pop	{r4, r5, pc}
   1df0c:	mvns	ip, r4, asr #21
   1df10:	movne	r1, r3
   1df14:	movne	r0, r2
   1df18:	mvnseq	ip, r5, asr #21
   1df1c:	movne	r3, r1
   1df20:	movne	r2, r0
   1df24:	orrs	r4, r0, r1, lsl #12
   1df28:	orrseq	r5, r2, r3, lsl #12
   1df2c:	teqeq	r1, r3
   1df30:	orrne	r1, r1, #524288	; 0x80000
   1df34:	pop	{r4, r5, pc}
   1df38:	teq	r0, #0
   1df3c:	moveq	r1, #0
   1df40:	bxeq	lr
   1df44:	push	{r4, r5, lr}
   1df48:	mov	r4, #1024	; 0x400
   1df4c:	add	r4, r4, #50	; 0x32
   1df50:	mov	r5, #0
   1df54:	mov	r1, #0
   1df58:	b	1ddd4 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1df5c:	teq	r0, #0
   1df60:	moveq	r1, #0
   1df64:	bxeq	lr
   1df68:	push	{r4, r5, lr}
   1df6c:	mov	r4, #1024	; 0x400
   1df70:	add	r4, r4, #50	; 0x32
   1df74:	ands	r5, r0, #-2147483648	; 0x80000000
   1df78:	rsbmi	r0, r0, #0
   1df7c:	mov	r1, #0
   1df80:	b	1ddd4 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1df84:	lsls	r2, r0, #1
   1df88:	asr	r1, r2, #3
   1df8c:	rrx	r1, r1
   1df90:	lsl	r0, r2, #28
   1df94:	andsne	r3, r2, #-16777216	; 0xff000000
   1df98:	teqne	r3, #-16777216	; 0xff000000
   1df9c:	eorne	r1, r1, #939524096	; 0x38000000
   1dfa0:	bxne	lr
   1dfa4:	bics	r2, r2, #-16777216	; 0xff000000
   1dfa8:	bxeq	lr
   1dfac:	teq	r3, #-16777216	; 0xff000000
   1dfb0:	orreq	r1, r1, #524288	; 0x80000
   1dfb4:	bxeq	lr
   1dfb8:	push	{r4, r5, lr}
   1dfbc:	mov	r4, #896	; 0x380
   1dfc0:	and	r5, r1, #-2147483648	; 0x80000000
   1dfc4:	bic	r1, r1, #-2147483648	; 0x80000000
   1dfc8:	b	1ddd4 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dfcc:	orrs	r2, r0, r1
   1dfd0:	bxeq	lr
   1dfd4:	push	{r4, r5, lr}
   1dfd8:	mov	r5, #0
   1dfdc:	b	1dffc <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dfe0:	orrs	r2, r0, r1
   1dfe4:	bxeq	lr
   1dfe8:	push	{r4, r5, lr}
   1dfec:	ands	r5, r1, #-2147483648	; 0x80000000
   1dff0:	bpl	1dffc <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dff4:	rsbs	r0, r0, #0
   1dff8:	rsc	r1, r1, #0
   1dffc:	mov	r4, #1024	; 0x400
   1e000:	add	r4, r4, #50	; 0x32
   1e004:	lsrs	ip, r1, #22
   1e008:	beq	1dd78 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1e00c:	mov	r2, #3
   1e010:	lsrs	ip, ip, #3
   1e014:	addne	r2, r2, #3
   1e018:	lsrs	ip, ip, #3
   1e01c:	addne	r2, r2, #3
   1e020:	add	r2, r2, ip, lsr #3
   1e024:	rsb	r3, r2, #32
   1e028:	lsl	ip, r0, r3
   1e02c:	lsr	r0, r0, r2
   1e030:	orr	r0, r0, r1, lsl r3
   1e034:	lsr	r1, r1, r2
   1e038:	add	r4, r4, r2
   1e03c:	b	1dd78 <flatcc_json_parser_struct_as_root@@Base+0x1cc>

0001e040 <__libc_csu_init@@Base>:
   1e040:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e044:	mov	r7, r0
   1e048:	ldr	r6, [pc, #72]	; 1e098 <__libc_csu_init@@Base+0x58>
   1e04c:	ldr	r5, [pc, #72]	; 1e09c <__libc_csu_init@@Base+0x5c>
   1e050:	add	r6, pc, r6
   1e054:	add	r5, pc, r5
   1e058:	sub	r6, r6, r5
   1e05c:	mov	r8, r1
   1e060:	mov	r9, r2
   1e064:	bl	128d4 <free@plt-0x20>
   1e068:	asrs	r6, r6, #2
   1e06c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e070:	mov	r4, #0
   1e074:	add	r4, r4, #1
   1e078:	ldr	r3, [r5], #4
   1e07c:	mov	r2, r9
   1e080:	mov	r1, r8
   1e084:	mov	r0, r7
   1e088:	blx	r3
   1e08c:	cmp	r6, r4
   1e090:	bne	1e074 <__libc_csu_init@@Base+0x34>
   1e094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e098:			; <UNDEFINED> instruction: 0x00012eb4
   1e09c:	andeq	r2, r1, ip, lsr #29

0001e0a0 <__libc_csu_fini@@Base>:
   1e0a0:	bx	lr

Disassembly of section .fini:

0001e0a4 <.fini>:
   1e0a4:	push	{r3, lr}
   1e0a8:	pop	{r3, pc}
