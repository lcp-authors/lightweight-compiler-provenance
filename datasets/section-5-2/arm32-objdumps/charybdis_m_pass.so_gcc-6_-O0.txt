
../repos/charybdis/modules/.libs/m_pass.so:     file format elf32-littlearm


Disassembly of section .init:

00000514 <_init>:
 514:	push	{r3, lr}
 518:	bl	5ac <call_weak_fn>
 51c:	pop	{r3, pc}

Disassembly of section .plt:

00000520 <.plt>:
 520:	push	{lr}		; (str lr, [sp, #-4]!)
 524:	ldr	lr, [pc, #4]	; 530 <.plt+0x10>
 528:	add	lr, pc, lr
 52c:	ldr	pc, [lr, #8]!
 530:	.word	0x00010ad0

00000534 <__cxa_finalize@plt>:
 534:	add	ip, pc, #0, 12
 538:	add	ip, ip, #16, 20	; 0x10000
 53c:	ldr	pc, [ip, #2768]!	; 0xad0

00000540 <rb_outofmemory@plt>:
 540:	add	ip, pc, #0, 12
 544:	add	ip, ip, #16, 20	; 0x10000
 548:	ldr	pc, [ip, #2760]!	; 0xac8

0000054c <strcpy@plt>:
 54c:	add	ip, pc, #0, 12
 550:	add	ip, ip, #16, 20	; 0x10000
 554:	ldr	pc, [ip, #2752]!	; 0xac0

00000558 <malloc@plt>:
 558:	add	ip, pc, #0, 12
 55c:	add	ip, ip, #16, 20	; 0x10000
 560:	ldr	pc, [ip, #2744]!	; 0xab8

00000564 <__gmon_start__@plt>:
 564:	add	ip, pc, #0, 12
 568:	add	ip, ip, #16, 20	; 0x10000
 56c:	ldr	pc, [ip, #2736]!	; 0xab0

00000570 <strlen@plt>:
 570:	add	ip, pc, #0, 12
 574:	add	ip, ip, #16, 20	; 0x10000
 578:	ldr	pc, [ip, #2728]!	; 0xaa8

0000057c <strchr@plt>:
 57c:	add	ip, pc, #0, 12
 580:	add	ip, ip, #16, 20	; 0x10000
 584:	ldr	pc, [ip, #2720]!	; 0xaa0

00000588 <atoi@plt>:
 588:	add	ip, pc, #0, 12
 58c:	add	ip, ip, #16, 20	; 0x10000
 590:	ldr	pc, [ip, #2712]!	; 0xa98

00000594 <rb_strlcpy@plt>:
 594:	add	ip, pc, #0, 12
 598:	add	ip, ip, #16, 20	; 0x10000
 59c:	ldr	pc, [ip, #2704]!	; 0xa90

000005a0 <irccmp@plt>:
 5a0:	add	ip, pc, #0, 12
 5a4:	add	ip, ip, #16, 20	; 0x10000
 5a8:	ldr	pc, [ip, #2696]!	; 0xa88

Disassembly of section .text:

000005ac <call_weak_fn>:
 5ac:	ldr	r3, [pc, #20]	; 5c8 <call_weak_fn+0x1c>
 5b0:	ldr	r2, [pc, #20]	; 5cc <call_weak_fn+0x20>
 5b4:	add	r3, pc, r3
 5b8:	ldr	r2, [r3, r2]
 5bc:	cmp	r2, #0
 5c0:	bxeq	lr
 5c4:	b	564 <__gmon_start__@plt>
 5c8:	.word	0x00010a44
 5cc:	.word	0x00000040

000005d0 <deregister_tm_clones>:
 5d0:	ldr	r3, [pc, #52]	; 60c <deregister_tm_clones+0x3c>
 5d4:	ldr	r0, [pc, #52]	; 610 <deregister_tm_clones+0x40>
 5d8:	add	r3, pc, r3
 5dc:	add	r0, pc, r0
 5e0:	add	r3, r3, #3
 5e4:	sub	r3, r3, r0
 5e8:	cmp	r3, #6
 5ec:	ldr	r3, [pc, #32]	; 614 <deregister_tm_clones+0x44>
 5f0:	add	r3, pc, r3
 5f4:	bxls	lr
 5f8:	ldr	r2, [pc, #24]	; 618 <deregister_tm_clones+0x48>
 5fc:	ldr	r3, [r3, r2]
 600:	cmp	r3, #0
 604:	bxeq	lr
 608:	bx	r3
 60c:	.word	0x00010ae8
 610:	.word	0x00010ae4
 614:	.word	0x00010a08
 618:	.word	0x00000038

0000061c <register_tm_clones>:
 61c:	ldr	r1, [pc, #56]	; 65c <register_tm_clones+0x40>
 620:	ldr	r0, [pc, #56]	; 660 <register_tm_clones+0x44>
 624:	add	r1, pc, r1
 628:	add	r0, pc, r0
 62c:	sub	r1, r1, r0
 630:	ldr	r3, [pc, #44]	; 664 <register_tm_clones+0x48>
 634:	asr	r1, r1, #2
 638:	add	r3, pc, r3
 63c:	add	r1, r1, r1, lsr #31
 640:	asrs	r1, r1, #1
 644:	bxeq	lr
 648:	ldr	r2, [pc, #24]	; 668 <register_tm_clones+0x4c>
 64c:	ldr	r3, [r3, r2]
 650:	cmp	r3, #0
 654:	bxeq	lr
 658:	bx	r3
 65c:	.word	0x00010a9c
 660:	.word	0x00010a98
 664:	.word	0x000109c0
 668:	.word	0x0000004c

0000066c <__do_global_dtors_aux>:
 66c:	ldr	r3, [pc, #76]	; 6c0 <__do_global_dtors_aux+0x54>
 670:	ldr	r2, [pc, #76]	; 6c4 <__do_global_dtors_aux+0x58>
 674:	add	r3, pc, r3
 678:	add	r2, pc, r2
 67c:	ldrb	r3, [r3]
 680:	cmp	r3, #0
 684:	bxne	lr
 688:	ldr	r3, [pc, #56]	; 6c8 <__do_global_dtors_aux+0x5c>
 68c:	push	{r4, lr}
 690:	ldr	r3, [r2, r3]
 694:	cmp	r3, #0
 698:	beq	6a8 <__do_global_dtors_aux+0x3c>
 69c:	ldr	r3, [pc, #40]	; 6cc <__do_global_dtors_aux+0x60>
 6a0:	ldr	r0, [pc, r3]
 6a4:	bl	534 <__cxa_finalize@plt>
 6a8:	bl	5d0 <deregister_tm_clones>
 6ac:	ldr	r3, [pc, #28]	; 6d0 <__do_global_dtors_aux+0x64>
 6b0:	mov	r2, #1
 6b4:	add	r3, pc, r3
 6b8:	strb	r2, [r3]
 6bc:	pop	{r4, pc}
 6c0:	.word	0x00010a4c
 6c4:	.word	0x00010980
 6c8:	.word	0x00000034
 6cc:	.word	0x000109a8
 6d0:	.word	0x00010a0c

000006d4 <frame_dummy>:
 6d4:	ldr	r0, [pc, #56]	; 714 <frame_dummy+0x40>
 6d8:	ldr	r3, [pc, #56]	; 718 <frame_dummy+0x44>
 6dc:	add	r0, pc, r0
 6e0:	ldr	r2, [r0]
 6e4:	add	r3, pc, r3
 6e8:	cmp	r2, #0
 6ec:	bne	6f4 <frame_dummy+0x20>
 6f0:	b	61c <register_tm_clones>
 6f4:	ldr	r2, [pc, #32]	; 71c <frame_dummy+0x48>
 6f8:	ldr	r3, [r3, r2]
 6fc:	cmp	r3, #0
 700:	beq	6f0 <frame_dummy+0x1c>
 704:	push	{r4, lr}
 708:	blx	r3
 70c:	pop	{r4, lr}
 710:	b	61c <register_tm_clones>
 714:	.word	0x00010818
 718:	.word	0x00010914
 71c:	.word	0x00000048

00000720 <rb_strndup>:
 720:	push	{fp, lr}
 724:	add	fp, sp, #4
 728:	sub	sp, sp, #16
 72c:	str	r0, [fp, #-16]
 730:	str	r1, [fp, #-20]	; 0xffffffec
 734:	ldr	r0, [fp, #-20]	; 0xffffffec
 738:	bl	558 <malloc@plt>
 73c:	mov	r3, r0
 740:	str	r3, [fp, #-8]
 744:	ldr	r3, [fp, #-8]
 748:	cmp	r3, #0
 74c:	moveq	r3, #1
 750:	movne	r3, #0
 754:	uxtb	r3, r3
 758:	cmp	r3, #0
 75c:	beq	764 <rb_strndup+0x44>
 760:	bl	540 <rb_outofmemory@plt>
 764:	ldr	r2, [fp, #-20]	; 0xffffffec
 768:	ldr	r1, [fp, #-16]
 76c:	ldr	r0, [fp, #-8]
 770:	bl	594 <rb_strlcpy@plt>
 774:	ldr	r3, [fp, #-8]
 778:	mov	r0, r3
 77c:	sub	sp, fp, #4
 780:	pop	{fp, pc}

00000784 <mr_pass>:
 784:	push	{r4, r5, fp, lr}
 788:	add	fp, sp, #12
 78c:	sub	sp, sp, #32
 790:	str	r0, [fp, #-32]	; 0xffffffe0
 794:	str	r1, [fp, #-36]	; 0xffffffdc
 798:	str	r2, [fp, #-40]	; 0xffffffd8
 79c:	str	r3, [fp, #-44]	; 0xffffffd4
 7a0:	ldr	r4, [pc, #796]	; ac4 <mr_pass+0x340>
 7a4:	add	r4, pc, r4
 7a8:	ldr	r3, [fp, #4]
 7ac:	add	r3, r3, #4
 7b0:	ldr	r3, [r3]
 7b4:	mov	r0, r3
 7b8:	bl	570 <strlen@plt>
 7bc:	mov	r3, r0
 7c0:	add	r3, r3, #1
 7c4:	add	r3, r3, #7
 7c8:	add	r3, r3, #7
 7cc:	lsr	r3, r3, #3
 7d0:	lsl	r3, r3, #3
 7d4:	sub	sp, sp, r3
 7d8:	mov	r3, sp
 7dc:	add	r3, r3, #7
 7e0:	lsr	r3, r3, #3
 7e4:	lsl	r3, r3, #3
 7e8:	str	r3, [fp, #-24]	; 0xffffffe8
 7ec:	ldr	r3, [fp, #4]
 7f0:	add	r3, r3, #4
 7f4:	ldr	r3, [r3]
 7f8:	mov	r1, r3
 7fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
 800:	bl	54c <strcpy@plt>
 804:	ldr	r3, [fp, #-24]	; 0xffffffe8
 808:	str	r3, [fp, #-28]	; 0xffffffe4
 80c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 810:	ldr	r3, [r3, #432]	; 0x1b0
 814:	ldr	r3, [r3, #276]	; 0x114
 818:	cmp	r3, #0
 81c:	bne	ab8 <mr_pass+0x334>
 820:	ldr	r3, [fp, #-36]	; 0xffffffdc
 824:	ldr	r3, [r3, #432]	; 0x1b0
 828:	ldr	r3, [r3, #280]	; 0x118
 82c:	cmp	r3, #0
 830:	bne	ab8 <mr_pass+0x334>
 834:	mov	r1, #58	; 0x3a
 838:	ldr	r0, [fp, #-28]	; 0xffffffe4
 83c:	bl	57c <strchr@plt>
 840:	str	r0, [fp, #-20]	; 0xffffffec
 844:	ldr	r3, [fp, #-20]	; 0xffffffec
 848:	cmp	r3, #0
 84c:	beq	870 <mr_pass+0xec>
 850:	ldr	r3, [fp, #-20]	; 0xffffffec
 854:	add	r2, r3, #1
 858:	str	r2, [fp, #-20]	; 0xffffffec
 85c:	mov	r2, #0
 860:	strb	r2, [r3]
 864:	ldr	r3, [fp, #-28]	; 0xffffffe4
 868:	str	r3, [fp, #-16]
 86c:	b	880 <mr_pass+0xfc>
 870:	ldr	r3, [fp, #-28]	; 0xffffffe4
 874:	str	r3, [fp, #-20]	; 0xffffffec
 878:	mov	r3, #0
 87c:	str	r3, [fp, #-16]
 880:	ldr	r3, [fp, #-36]	; 0xffffffdc
 884:	ldr	r5, [r3, #432]	; 0x1b0
 888:	ldr	r3, [fp, #-20]	; 0xffffffec
 88c:	ldrb	r3, [r3]
 890:	cmp	r3, #0
 894:	beq	8ac <mr_pass+0x128>
 898:	mov	r1, #128	; 0x80
 89c:	ldr	r0, [fp, #-20]	; 0xffffffec
 8a0:	bl	720 <rb_strndup>
 8a4:	mov	r3, r0
 8a8:	b	8b0 <mr_pass+0x12c>
 8ac:	mov	r3, #0
 8b0:	str	r3, [r5, #276]	; 0x114
 8b4:	ldr	r3, [fp, #-16]
 8b8:	cmp	r3, #0
 8bc:	beq	8ec <mr_pass+0x168>
 8c0:	ldr	r3, [fp, #-16]
 8c4:	ldrb	r3, [r3]
 8c8:	cmp	r3, #0
 8cc:	beq	8ec <mr_pass+0x168>
 8d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 8d4:	ldr	r5, [r3, #432]	; 0x1b0
 8d8:	mov	r1, #128	; 0x80
 8dc:	ldr	r0, [fp, #-16]
 8e0:	bl	720 <rb_strndup>
 8e4:	mov	r3, r0
 8e8:	str	r3, [r5, #280]	; 0x118
 8ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
 8f0:	cmp	r3, #2
 8f4:	ble	abc <mr_pass+0x338>
 8f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 8fc:	ldr	r3, [r3, #24]
 900:	cmp	r3, #0
 904:	bne	abc <mr_pass+0x338>
 908:	ldr	r3, [fp, #-36]	; 0xffffffdc
 90c:	ldr	r3, [r3, #436]	; 0x1b4
 910:	cmp	r3, #0
 914:	beq	abc <mr_pass+0x338>
 918:	ldr	r3, [fp, #4]
 91c:	add	r3, r3, #8
 920:	ldr	r3, [r3]
 924:	ldr	r2, [pc, #412]	; ac8 <mr_pass+0x344>
 928:	add	r2, pc, r2
 92c:	mov	r1, r2
 930:	mov	r0, r3
 934:	bl	5a0 <irccmp@plt>
 938:	mov	r3, r0
 93c:	cmp	r3, #0
 940:	bne	960 <mr_pass+0x1dc>
 944:	ldr	r3, [fp, #-36]	; 0xffffffdc
 948:	ldr	r3, [r3, #52]	; 0x34
 94c:	cmp	r3, #0
 950:	bne	960 <mr_pass+0x1dc>
 954:	ldr	r3, [fp, #-36]	; 0xffffffdc
 958:	mov	r2, #268435456	; 0x10000000
 95c:	str	r2, [r3, #52]	; 0x34
 960:	ldr	r3, [fp, #-44]	; 0xffffffd4
 964:	cmp	r3, #5
 968:	bne	abc <mr_pass+0x338>
 96c:	ldr	r3, [fp, #4]
 970:	add	r3, r3, #12
 974:	ldr	r3, [r3]
 978:	mov	r0, r3
 97c:	bl	588 <atoi@plt>
 980:	mov	r3, r0
 984:	cmp	r3, #5
 988:	ble	abc <mr_pass+0x338>
 98c:	ldr	r3, [fp, #4]
 990:	add	r3, r3, #16
 994:	ldr	r3, [r3]
 998:	ldrb	r3, [r3]
 99c:	mov	r2, r3
 9a0:	ldr	r3, [pc, #292]	; acc <mr_pass+0x348>
 9a4:	ldr	r3, [r4, r3]
 9a8:	ldr	r3, [r3, r2, lsl #2]
 9ac:	and	r3, r3, #16
 9b0:	cmp	r3, #0
 9b4:	beq	abc <mr_pass+0x338>
 9b8:	ldr	r3, [fp, #4]
 9bc:	add	r3, r3, #16
 9c0:	ldr	r3, [r3]
 9c4:	add	r3, r3, #1
 9c8:	ldrb	r3, [r3]
 9cc:	mov	r2, r3
 9d0:	ldr	r3, [pc, #244]	; acc <mr_pass+0x348>
 9d4:	ldr	r3, [r4, r3]
 9d8:	ldr	r2, [r3, r2, lsl #2]
 9dc:	ldr	r3, [pc, #236]	; ad0 <mr_pass+0x34c>
 9e0:	and	r3, r3, r2
 9e4:	cmp	r3, #0
 9e8:	beq	abc <mr_pass+0x338>
 9ec:	ldr	r3, [fp, #4]
 9f0:	add	r3, r3, #16
 9f4:	ldr	r3, [r3]
 9f8:	add	r3, r3, #2
 9fc:	ldrb	r3, [r3]
 a00:	mov	r2, r3
 a04:	ldr	r3, [pc, #192]	; acc <mr_pass+0x348>
 a08:	ldr	r3, [r4, r3]
 a0c:	ldr	r2, [r3, r2, lsl #2]
 a10:	ldr	r3, [pc, #184]	; ad0 <mr_pass+0x34c>
 a14:	and	r3, r3, r2
 a18:	cmp	r3, #0
 a1c:	beq	abc <mr_pass+0x338>
 a20:	ldr	r3, [fp, #4]
 a24:	add	r3, r3, #16
 a28:	ldr	r3, [r3]
 a2c:	add	r3, r3, #3
 a30:	ldrb	r3, [r3]
 a34:	cmp	r3, #0
 a38:	bne	abc <mr_pass+0x338>
 a3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a40:	ldr	r3, [r3, #436]	; 0x1b4
 a44:	add	r3, r3, #260	; 0x104
 a48:	cmp	r3, #0
 a4c:	beq	a64 <mr_pass+0x2e0>
 a50:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a54:	ldr	r3, [r3, #436]	; 0x1b4
 a58:	ldrb	r3, [r3, #260]	; 0x104
 a5c:	cmp	r3, #0
 a60:	bne	abc <mr_pass+0x338>
 a64:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a68:	ldr	r3, [r3, #432]	; 0x1b0
 a6c:	ldr	r2, [fp, #-36]	; 0xffffffdc
 a70:	ldr	r2, [r2, #432]	; 0x1b0
 a74:	ldr	r2, [r2, #296]	; 0x128
 a78:	mov	r1, r2
 a7c:	ldr	r2, [pc, #80]	; ad4 <mr_pass+0x350>
 a80:	ldr	r2, [r4, r2]
 a84:	ldr	r2, [r2]
 a88:	orr	r2, r1, r2
 a8c:	str	r2, [r3, #296]	; 0x128
 a90:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a94:	ldr	r3, [r3, #436]	; 0x1b4
 a98:	add	r0, r3, #260	; 0x104
 a9c:	ldr	r3, [fp, #4]
 aa0:	add	r3, r3, #16
 aa4:	ldr	r3, [r3]
 aa8:	mov	r2, #10
 aac:	mov	r1, r3
 ab0:	bl	594 <rb_strlcpy@plt>
 ab4:	b	abc <mr_pass+0x338>
 ab8:	nop			; (mov r0, r0)
 abc:	sub	sp, fp, #12
 ac0:	pop	{r4, r5, fp, pc}
 ac4:	.word	0x00010854
 ac8:	.word	0x000001f8
 acc:	.word	0x00000044
 ad0:	.word	0x00010010
 ad4:	.word	0x0000003c

Disassembly of section .fini:

00000ad8 <_fini>:
 ad8:	push	{r3, lr}
 adc:	pop	{r3, pc}
