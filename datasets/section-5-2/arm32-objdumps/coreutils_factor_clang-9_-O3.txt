
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011604 <.init>:
   11604:	push	{r3, lr}
   11608:	bl	11a74 <__assert_fail@plt+0x48>
   1160c:	pop	{r3, pc}

Disassembly of section .plt:

00011610 <calloc@plt-0x14>:
   11610:	push	{lr}		; (str lr, [sp, #-4]!)
   11614:	ldr	lr, [pc, #4]	; 11620 <calloc@plt-0x4>
   11618:	add	lr, pc, lr
   1161c:	ldr	pc, [lr, #8]!
   11620:	andeq	r1, r2, r0, ror #19

00011624 <calloc@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #135168	; 0x21000
   1162c:	ldr	pc, [ip, #2528]!	; 0x9e0

00011630 <fputs_unlocked@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #135168	; 0x21000
   11638:	ldr	pc, [ip, #2520]!	; 0x9d8

0001163c <raise@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #135168	; 0x21000
   11644:	ldr	pc, [ip, #2512]!	; 0x9d0

00011648 <__gmpz_scan1@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #135168	; 0x21000
   11650:	ldr	pc, [ip, #2504]!	; 0x9c8

00011654 <iconv_close@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #135168	; 0x21000
   1165c:	ldr	pc, [ip, #2496]!	; 0x9c0

00011660 <iconv@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #135168	; 0x21000
   11668:	ldr	pc, [ip, #2488]!	; 0x9b8

0001166c <strcmp@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #135168	; 0x21000
   11674:	ldr	pc, [ip, #2480]!	; 0x9b0

00011678 <fflush@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #135168	; 0x21000
   11680:	ldr	pc, [ip, #2472]!	; 0x9a8

00011684 <__gmpz_sub_ui@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #135168	; 0x21000
   1168c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011690 <__gmpz_clears@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #135168	; 0x21000
   11698:	ldr	pc, [ip, #2456]!	; 0x998

0001169c <wcwidth@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #135168	; 0x21000
   116a4:	ldr	pc, [ip, #2448]!	; 0x990

000116a8 <memmove@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #135168	; 0x21000
   116b0:	ldr	pc, [ip, #2440]!	; 0x988

000116b4 <__gmpz_set_ui@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #135168	; 0x21000
   116bc:	ldr	pc, [ip, #2432]!	; 0x980

000116c0 <free@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #135168	; 0x21000
   116c8:	ldr	pc, [ip, #2424]!	; 0x978

000116cc <_exit@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #135168	; 0x21000
   116d4:	ldr	pc, [ip, #2416]!	; 0x970

000116d8 <memcpy@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #135168	; 0x21000
   116e0:	ldr	pc, [ip, #2408]!	; 0x968

000116e4 <__gmpz_sub@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #135168	; 0x21000
   116ec:	ldr	pc, [ip, #2400]!	; 0x960

000116f0 <mbsinit@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #135168	; 0x21000
   116f8:	ldr	pc, [ip, #2392]!	; 0x958

000116fc <dcgettext@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #135168	; 0x21000
   11704:	ldr	pc, [ip, #2384]!	; 0x950

00011708 <__gmpz_powm@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #135168	; 0x21000
   11710:	ldr	pc, [ip, #2376]!	; 0x948

00011714 <strdup@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #135168	; 0x21000
   1171c:	ldr	pc, [ip, #2368]!	; 0x940

00011720 <__gmpz_divexact@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #135168	; 0x21000
   11728:	ldr	pc, [ip, #2360]!	; 0x938

0001172c <__gmpz_inits@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #135168	; 0x21000
   11734:	ldr	pc, [ip, #2352]!	; 0x930

00011738 <__gmpz_set@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #135168	; 0x21000
   11740:	ldr	pc, [ip, #2344]!	; 0x928

00011744 <realloc@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #135168	; 0x21000
   1174c:	ldr	pc, [ip, #2336]!	; 0x920

00011750 <__gmpz_mul@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #135168	; 0x21000
   11758:	ldr	pc, [ip, #2328]!	; 0x918

0001175c <__gmpz_tdiv_q_ui@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #135168	; 0x21000
   11764:	ldr	pc, [ip, #2320]!	; 0x910

00011768 <textdomain@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #135168	; 0x21000
   11770:	ldr	pc, [ip, #2312]!	; 0x908

00011774 <iswcntrl@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #135168	; 0x21000
   1177c:	ldr	pc, [ip, #2304]!	; 0x900

00011780 <__gmpz_out_str@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #135168	; 0x21000
   11788:	ldr	pc, [ip, #2296]!	; 0x8f8

0001178c <fflush_unlocked@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #135168	; 0x21000
   11794:	ldr	pc, [ip, #2288]!	; 0x8f0

00011798 <iswprint@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #135168	; 0x21000
   117a0:	ldr	pc, [ip, #2280]!	; 0x8e8

000117a4 <fwrite@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #135168	; 0x21000
   117ac:	ldr	pc, [ip, #2272]!	; 0x8e0

000117b0 <lseek64@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #135168	; 0x21000
   117b8:	ldr	pc, [ip, #2264]!	; 0x8d8

000117bc <__gmpz_fdiv_q_2exp@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #135168	; 0x21000
   117c4:	ldr	pc, [ip, #2256]!	; 0x8d0

000117c8 <__ctype_get_mb_cur_max@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #135168	; 0x21000
   117d0:	ldr	pc, [ip, #2248]!	; 0x8c8

000117d4 <__fpending@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #135168	; 0x21000
   117dc:	ldr	pc, [ip, #2240]!	; 0x8c0

000117e0 <mbrtowc@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #135168	; 0x21000
   117e8:	ldr	pc, [ip, #2232]!	; 0x8b8

000117ec <error@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #135168	; 0x21000
   117f4:	ldr	pc, [ip, #2224]!	; 0x8b0

000117f8 <malloc@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #135168	; 0x21000
   11800:	ldr	pc, [ip, #2216]!	; 0x8a8

00011804 <iconv_open@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #135168	; 0x21000
   1180c:	ldr	pc, [ip, #2208]!	; 0x8a0

00011810 <__libc_start_main@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #135168	; 0x21000
   11818:	ldr	pc, [ip, #2200]!	; 0x898

0001181c <__freading@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #135168	; 0x21000
   11824:	ldr	pc, [ip, #2192]!	; 0x890

00011828 <__gmpz_init_set_si@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #135168	; 0x21000
   11830:	ldr	pc, [ip, #2184]!	; 0x888

00011834 <__gmpz_add_ui@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #135168	; 0x21000
   1183c:	ldr	pc, [ip, #2176]!	; 0x880

00011840 <__gmon_start__@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #135168	; 0x21000
   11848:	ldr	pc, [ip, #2168]!	; 0x878

0001184c <getopt_long@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #135168	; 0x21000
   11854:	ldr	pc, [ip, #2160]!	; 0x870

00011858 <__ctype_b_loc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #135168	; 0x21000
   11860:	ldr	pc, [ip, #2152]!	; 0x868

00011864 <exit@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #135168	; 0x21000
   1186c:	ldr	pc, [ip, #2144]!	; 0x860

00011870 <iswspace@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #135168	; 0x21000
   11878:	ldr	pc, [ip, #2136]!	; 0x858

0001187c <bcmp@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #135168	; 0x21000
   11884:	ldr	pc, [ip, #2128]!	; 0x850

00011888 <strlen@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #135168	; 0x21000
   11890:	ldr	pc, [ip, #2120]!	; 0x848

00011894 <strchr@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #135168	; 0x21000
   1189c:	ldr	pc, [ip, #2112]!	; 0x840

000118a0 <__gmpz_divisible_ui_p@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #135168	; 0x21000
   118a8:	ldr	pc, [ip, #2104]!	; 0x838

000118ac <__gmpz_clear@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #135168	; 0x21000
   118b4:	ldr	pc, [ip, #2096]!	; 0x830

000118b8 <__errno_location@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #135168	; 0x21000
   118c0:	ldr	pc, [ip, #2088]!	; 0x828

000118c4 <iswalnum@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #135168	; 0x21000
   118cc:	ldr	pc, [ip, #2080]!	; 0x820

000118d0 <__sprintf_chk@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #135168	; 0x21000
   118d8:	ldr	pc, [ip, #2072]!	; 0x818

000118dc <__cxa_atexit@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #135168	; 0x21000
   118e4:	ldr	pc, [ip, #2064]!	; 0x810

000118e8 <memset@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #135168	; 0x21000
   118f0:	ldr	pc, [ip, #2056]!	; 0x808

000118f4 <__gmpz_tdiv_q_2exp@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #135168	; 0x21000
   118fc:	ldr	pc, [ip, #2048]!	; 0x800

00011900 <__printf_chk@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #135168	; 0x21000
   11908:	ldr	pc, [ip, #2040]!	; 0x7f8

0001190c <write@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #135168	; 0x21000
   11914:	ldr	pc, [ip, #2032]!	; 0x7f0

00011918 <fileno@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #135168	; 0x21000
   11920:	ldr	pc, [ip, #2024]!	; 0x7e8

00011924 <__fprintf_chk@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #135168	; 0x21000
   1192c:	ldr	pc, [ip, #2016]!	; 0x7e0

00011930 <memchr@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #135168	; 0x21000
   11938:	ldr	pc, [ip, #2008]!	; 0x7d8

0001193c <fclose@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #135168	; 0x21000
   11944:	ldr	pc, [ip, #2000]!	; 0x7d0

00011948 <strnlen@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #135168	; 0x21000
   11950:	ldr	pc, [ip, #1992]!	; 0x7c8

00011954 <fseeko64@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #135168	; 0x21000
   1195c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011960 <__gmpz_mod@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #135168	; 0x21000
   11968:	ldr	pc, [ip, #1976]!	; 0x7b8

0001196c <__gmpz_init_set_ui@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #135168	; 0x21000
   11974:	ldr	pc, [ip, #1968]!	; 0x7b0

00011978 <__gmpz_cmp@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #135168	; 0x21000
   11980:	ldr	pc, [ip, #1960]!	; 0x7a8

00011984 <__uflow@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #135168	; 0x21000
   1198c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011990 <__overflow@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #135168	; 0x21000
   11998:	ldr	pc, [ip, #1944]!	; 0x798

0001199c <setlocale@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #135168	; 0x21000
   119a4:	ldr	pc, [ip, #1936]!	; 0x790

000119a8 <strrchr@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #135168	; 0x21000
   119b0:	ldr	pc, [ip, #1928]!	; 0x788

000119b4 <nl_langinfo@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #135168	; 0x21000
   119bc:	ldr	pc, [ip, #1920]!	; 0x780

000119c0 <__gmpz_gcd@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #135168	; 0x21000
   119c8:	ldr	pc, [ip, #1912]!	; 0x778

000119cc <__gmpz_init_set_str@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #135168	; 0x21000
   119d4:	ldr	pc, [ip, #1904]!	; 0x770

000119d8 <bindtextdomain@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #135168	; 0x21000
   119e0:	ldr	pc, [ip, #1896]!	; 0x768

000119e4 <__gmpz_cmp_ui@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #135168	; 0x21000
   119ec:	ldr	pc, [ip, #1888]!	; 0x760

000119f0 <__gmpz_init@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #135168	; 0x21000
   119f8:	ldr	pc, [ip, #1880]!	; 0x758

000119fc <__gmpz_powm_ui@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #135168	; 0x21000
   11a04:	ldr	pc, [ip, #1872]!	; 0x750

00011a08 <isatty@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #135168	; 0x21000
   11a10:	ldr	pc, [ip, #1864]!	; 0x748

00011a14 <strncmp@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #135168	; 0x21000
   11a1c:	ldr	pc, [ip, #1856]!	; 0x740

00011a20 <abort@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #135168	; 0x21000
   11a28:	ldr	pc, [ip, #1848]!	; 0x738

00011a2c <__assert_fail@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #135168	; 0x21000
   11a34:	ldr	pc, [ip, #1840]!	; 0x730

Disassembly of section .text:

00011a38 <.text>:
   11a38:	mov	fp, #0
   11a3c:	mov	lr, #0
   11a40:	pop	{r1}		; (ldr r1, [sp], #4)
   11a44:	mov	r2, sp
   11a48:	push	{r2}		; (str r2, [sp, #-4]!)
   11a4c:	push	{r0}		; (str r0, [sp, #-4]!)
   11a50:	ldr	ip, [pc, #16]	; 11a68 <__assert_fail@plt+0x3c>
   11a54:	push	{ip}		; (str ip, [sp, #-4]!)
   11a58:	ldr	r0, [pc, #12]	; 11a6c <__assert_fail@plt+0x40>
   11a5c:	ldr	r3, [pc, #12]	; 11a70 <__assert_fail@plt+0x44>
   11a60:	bl	11810 <__libc_start_main@plt>
   11a64:	bl	11a20 <abort@plt>
   11a68:	andeq	lr, r1, ip, lsr r8
   11a6c:	andeq	r1, r1, r0, ror sp
   11a70:	ldrdeq	lr, [r1], -ip
   11a74:	ldr	r3, [pc, #20]	; 11a90 <__assert_fail@plt+0x64>
   11a78:	ldr	r2, [pc, #20]	; 11a94 <__assert_fail@plt+0x68>
   11a7c:	add	r3, pc, r3
   11a80:	ldr	r2, [r3, r2]
   11a84:	cmp	r2, #0
   11a88:	bxeq	lr
   11a8c:	b	11840 <__gmon_start__@plt>
   11a90:	andeq	r1, r2, ip, ror r5
   11a94:	andeq	r0, r0, r8, ror #2
   11a98:	ldr	r0, [pc, #24]	; 11ab8 <__assert_fail@plt+0x8c>
   11a9c:	ldr	r3, [pc, #24]	; 11abc <__assert_fail@plt+0x90>
   11aa0:	cmp	r3, r0
   11aa4:	bxeq	lr
   11aa8:	ldr	r3, [pc, #16]	; 11ac0 <__assert_fail@plt+0x94>
   11aac:	cmp	r3, #0
   11ab0:	bxeq	lr
   11ab4:	bx	r3
   11ab8:	andeq	r3, r3, r8, asr #3
   11abc:	andeq	r3, r3, r8, asr #3
   11ac0:	andeq	r0, r0, r0
   11ac4:	ldr	r0, [pc, #36]	; 11af0 <__assert_fail@plt+0xc4>
   11ac8:	ldr	r1, [pc, #36]	; 11af4 <__assert_fail@plt+0xc8>
   11acc:	sub	r1, r1, r0
   11ad0:	asr	r1, r1, #2
   11ad4:	add	r1, r1, r1, lsr #31
   11ad8:	asrs	r1, r1, #1
   11adc:	bxeq	lr
   11ae0:	ldr	r3, [pc, #16]	; 11af8 <__assert_fail@plt+0xcc>
   11ae4:	cmp	r3, #0
   11ae8:	bxeq	lr
   11aec:	bx	r3
   11af0:	andeq	r3, r3, r8, asr #3
   11af4:	andeq	r3, r3, r8, asr #3
   11af8:	andeq	r0, r0, r0
   11afc:	push	{r4, lr}
   11b00:	ldr	r4, [pc, #24]	; 11b20 <__assert_fail@plt+0xf4>
   11b04:	ldrb	r3, [r4]
   11b08:	cmp	r3, #0
   11b0c:	popne	{r4, pc}
   11b10:	bl	11a98 <__assert_fail@plt+0x6c>
   11b14:	mov	r3, #1
   11b18:	strb	r3, [r4]
   11b1c:	pop	{r4, pc}
   11b20:	andeq	r3, r3, r8, ror #3
   11b24:	b	11ac4 <__assert_fail@plt+0x98>
   11b28:	push	{fp, lr}
   11b2c:	mov	fp, sp
   11b30:	sub	sp, sp, #56	; 0x38
   11b34:	mov	r4, r0
   11b38:	cmp	r0, #0
   11b3c:	bne	11d2c <__assert_fail@plt+0x300>
   11b40:	movw	r1, #59531	; 0xe88b
   11b44:	mov	r0, #0
   11b48:	mov	r2, #5
   11b4c:	movt	r1, #1
   11b50:	bl	116fc <dcgettext@plt>
   11b54:	mov	r1, r0
   11b58:	movw	r0, #12800	; 0x3200
   11b5c:	movt	r0, #3
   11b60:	ldr	r2, [r0]
   11b64:	mov	r0, #1
   11b68:	mov	r3, r2
   11b6c:	bl	11900 <__printf_chk@plt>
   11b70:	movw	r1, #59571	; 0xe8b3
   11b74:	mov	r0, #0
   11b78:	mov	r2, #5
   11b7c:	movt	r1, #1
   11b80:	bl	116fc <dcgettext@plt>
   11b84:	movw	r7, #12772	; 0x31e4
   11b88:	movt	r7, #3
   11b8c:	ldr	r1, [r7]
   11b90:	bl	11630 <fputs_unlocked@plt>
   11b94:	movw	r1, #59706	; 0xe93a
   11b98:	mov	r0, #0
   11b9c:	mov	r2, #5
   11ba0:	movt	r1, #1
   11ba4:	bl	116fc <dcgettext@plt>
   11ba8:	ldr	r1, [r7]
   11bac:	bl	11630 <fputs_unlocked@plt>
   11bb0:	movw	r1, #59751	; 0xe967
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	116fc <dcgettext@plt>
   11bc4:	ldr	r1, [r7]
   11bc8:	bl	11630 <fputs_unlocked@plt>
   11bcc:	movw	r0, #61200	; 0xef10
   11bd0:	mov	r2, #48	; 0x30
   11bd4:	mov	r6, sp
   11bd8:	movw	r5, #59805	; 0xe99d
   11bdc:	movt	r0, #1
   11be0:	movt	r5, #1
   11be4:	add	r1, r0, #32
   11be8:	add	r3, r0, #16
   11bec:	vld1.64	{d18-d19}, [r0], r2
   11bf0:	vld1.64	{d16-d17}, [r1]
   11bf4:	vld1.64	{d20-d21}, [r3]
   11bf8:	vldr	d22, [r0]
   11bfc:	add	r1, r6, #32
   11c00:	add	r0, r6, #16
   11c04:	vst1.64	{d16-d17}, [r1]
   11c08:	movw	r1, #59925	; 0xea15
   11c0c:	vst1.64	{d20-d21}, [r0]
   11c10:	mov	r0, r6
   11c14:	movt	r1, #1
   11c18:	vst1.64	{d18-d19}, [r0], r2
   11c1c:	vstr	d22, [r0]
   11c20:	mov	r0, r5
   11c24:	bl	1166c <strcmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	ldrne	r1, [r6, #8]!
   11c30:	cmpne	r1, #0
   11c34:	bne	11c20 <__assert_fail@plt+0x1f4>
   11c38:	movw	r1, #60020	; 0xea74
   11c3c:	ldr	r6, [r6, #4]
   11c40:	mov	r0, #0
   11c44:	mov	r2, #5
   11c48:	movt	r1, #1
   11c4c:	bl	116fc <dcgettext@plt>
   11c50:	movw	r2, #59836	; 0xe9bc
   11c54:	movw	r3, #60043	; 0xea8b
   11c58:	mov	r1, r0
   11c5c:	mov	r0, #1
   11c60:	movt	r2, #1
   11c64:	movt	r3, #1
   11c68:	bl	11900 <__printf_chk@plt>
   11c6c:	cmp	r6, #0
   11c70:	mov	r0, #5
   11c74:	mov	r1, #0
   11c78:	moveq	r6, r5
   11c7c:	bl	1199c <setlocale@plt>
   11c80:	cmp	r0, #0
   11c84:	beq	11cbc <__assert_fail@plt+0x290>
   11c88:	movw	r1, #60083	; 0xeab3
   11c8c:	mov	r2, #3
   11c90:	movt	r1, #1
   11c94:	bl	11a14 <strncmp@plt>
   11c98:	cmp	r0, #0
   11c9c:	beq	11cbc <__assert_fail@plt+0x290>
   11ca0:	movw	r1, #60087	; 0xeab7
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #1
   11cb0:	bl	116fc <dcgettext@plt>
   11cb4:	ldr	r1, [r7]
   11cb8:	bl	11630 <fputs_unlocked@plt>
   11cbc:	movw	r1, #60158	; 0xeafe
   11cc0:	mov	r0, #0
   11cc4:	mov	r2, #5
   11cc8:	movt	r1, #1
   11ccc:	bl	116fc <dcgettext@plt>
   11cd0:	movw	r2, #60043	; 0xea8b
   11cd4:	mov	r1, r0
   11cd8:	mov	r0, #1
   11cdc:	mov	r3, r5
   11ce0:	movt	r2, #1
   11ce4:	bl	11900 <__printf_chk@plt>
   11ce8:	movw	r1, #60185	; 0xeb19
   11cec:	mov	r0, #0
   11cf0:	mov	r2, #5
   11cf4:	movt	r1, #1
   11cf8:	bl	116fc <dcgettext@plt>
   11cfc:	mov	r1, r0
   11d00:	movw	r0, #59953	; 0xea31
   11d04:	movw	r3, #59705	; 0xe939
   11d08:	cmp	r6, r5
   11d0c:	mov	r2, r6
   11d10:	movt	r0, #1
   11d14:	movt	r3, #1
   11d18:	moveq	r3, r0
   11d1c:	mov	r0, #1
   11d20:	bl	11900 <__printf_chk@plt>
   11d24:	mov	r0, r4
   11d28:	bl	11864 <exit@plt>
   11d2c:	movw	r0, #12760	; 0x31d8
   11d30:	movw	r1, #59492	; 0xe864
   11d34:	mov	r2, #5
   11d38:	movt	r0, #3
   11d3c:	movt	r1, #1
   11d40:	ldr	r5, [r0]
   11d44:	mov	r0, #0
   11d48:	bl	116fc <dcgettext@plt>
   11d4c:	mov	r2, r0
   11d50:	movw	r0, #12800	; 0x3200
   11d54:	mov	r1, #1
   11d58:	movt	r0, #3
   11d5c:	ldr	r3, [r0]
   11d60:	mov	r0, r5
   11d64:	bl	11924 <__fprintf_chk@plt>
   11d68:	mov	r0, r4
   11d6c:	bl	11864 <exit@plt>
   11d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d74:	add	fp, sp, #28
   11d78:	sub	sp, sp, #28
   11d7c:	mov	r4, r0
   11d80:	ldr	r0, [r1]
   11d84:	mov	r5, r1
   11d88:	bl	19058 <__assert_fail@plt+0x762c>
   11d8c:	movw	r1, #59705	; 0xe939
   11d90:	mov	r0, #6
   11d94:	movt	r1, #1
   11d98:	bl	1199c <setlocale@plt>
   11d9c:	movw	r6, #59840	; 0xe9c0
   11da0:	movw	r1, #59812	; 0xe9a4
   11da4:	movt	r6, #1
   11da8:	movt	r1, #1
   11dac:	mov	r0, r6
   11db0:	bl	119d8 <bindtextdomain@plt>
   11db4:	mov	r0, r6
   11db8:	bl	11768 <textdomain@plt>
   11dbc:	movw	r8, #12780	; 0x31ec
   11dc0:	movt	r8, #3
   11dc4:	ldr	r0, [r8, #4]
   11dc8:	cmp	r0, #0
   11dcc:	bne	11de0 <__assert_fail@plt+0x3b4>
   11dd0:	mov	r0, #1024	; 0x400
   11dd4:	bl	1c30c <__assert_fail@plt+0xa8e0>
   11dd8:	str	r0, [r8, #4]
   11ddc:	str	r0, [r8, #8]
   11de0:	movw	r0, #36464	; 0x8e70
   11de4:	movt	r0, #1
   11de8:	bl	1e840 <__assert_fail@plt+0xce14>
   11dec:	movw	r0, #8116	; 0x1fb4
   11df0:	movt	r0, #1
   11df4:	bl	1e840 <__assert_fail@plt+0xce14>
   11df8:	movw	r6, #59705	; 0xe939
   11dfc:	movw	r7, #61136	; 0xeed0
   11e00:	mov	r9, #0
   11e04:	mov	sl, #1
   11e08:	movt	r6, #1
   11e0c:	movt	r7, #1
   11e10:	mov	r0, r4
   11e14:	mov	r1, r5
   11e18:	mov	r2, r6
   11e1c:	mov	r3, r7
   11e20:	str	r9, [sp]
   11e24:	bl	1184c <getopt_long@plt>
   11e28:	cmp	r0, #255	; 0xff
   11e2c:	ble	11e40 <__assert_fail@plt+0x414>
   11e30:	cmp	r0, #256	; 0x100
   11e34:	bne	11fac <__assert_fail@plt+0x580>
   11e38:	strb	sl, [r8]
   11e3c:	b	11e10 <__assert_fail@plt+0x3e4>
   11e40:	cmn	r0, #1
   11e44:	bne	11f14 <__assert_fail@plt+0x4e8>
   11e48:	movw	r0, #12752	; 0x31d0
   11e4c:	movt	r0, #3
   11e50:	ldr	r0, [r0]
   11e54:	cmp	r0, r4
   11e58:	bge	11e88 <__assert_fail@plt+0x45c>
   11e5c:	add	r5, r5, r0, lsl #2
   11e60:	sub	r4, r4, r0
   11e64:	mov	r7, #1
   11e68:	ldr	r0, [r5], #4
   11e6c:	bl	12020 <__assert_fail@plt+0x5f4>
   11e70:	and	r7, r7, r0
   11e74:	subs	r4, r4, #1
   11e78:	bne	11e68 <__assert_fail@plt+0x43c>
   11e7c:	eor	r0, r7, #1
   11e80:	sub	sp, fp, #28
   11e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e88:	add	r4, sp, #20
   11e8c:	mov	r0, r4
   11e90:	bl	1b628 <__assert_fail@plt+0x9bfc>
   11e94:	movw	r8, #12768	; 0x31e0
   11e98:	movw	r1, #60268	; 0xeb6c
   11e9c:	mov	r2, #3
   11ea0:	mov	r3, r4
   11ea4:	movt	r8, #3
   11ea8:	movt	r1, #1
   11eac:	ldr	r0, [r8]
   11eb0:	bl	1b638 <__assert_fail@plt+0x9c0c>
   11eb4:	mov	r1, r0
   11eb8:	ldr	r0, [sp, #24]
   11ebc:	mov	r7, #1
   11ec0:	cmn	r1, #1
   11ec4:	beq	11f04 <__assert_fail@plt+0x4d8>
   11ec8:	movw	r4, #60268	; 0xeb6c
   11ecc:	add	r5, sp, #20
   11ed0:	movt	r4, #1
   11ed4:	bl	12020 <__assert_fail@plt+0x5f4>
   11ed8:	mov	r6, r0
   11edc:	ldr	r0, [r8]
   11ee0:	mov	r1, r4
   11ee4:	mov	r2, #3
   11ee8:	mov	r3, r5
   11eec:	bl	1b638 <__assert_fail@plt+0x9c0c>
   11ef0:	mov	r1, r0
   11ef4:	ldr	r0, [sp, #24]
   11ef8:	and	r7, r7, r6
   11efc:	cmn	r1, #1
   11f00:	bne	11ed4 <__assert_fail@plt+0x4a8>
   11f04:	bl	18f5c <__assert_fail@plt+0x7530>
   11f08:	eor	r0, r7, #1
   11f0c:	sub	sp, fp, #28
   11f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f14:	cmn	r0, #3
   11f18:	bne	11f9c <__assert_fail@plt+0x570>
   11f1c:	movw	r0, #12668	; 0x317c
   11f20:	movw	r1, #59879	; 0xe9e7
   11f24:	movt	r0, #3
   11f28:	movt	r1, #1
   11f2c:	ldr	r4, [r0]
   11f30:	movw	r0, #12772	; 0x31e4
   11f34:	movt	r0, #3
   11f38:	ldr	r5, [r0]
   11f3c:	movw	r0, #59861	; 0xe9d5
   11f40:	movt	r0, #1
   11f44:	bl	19490 <__assert_fail@plt+0x7a64>
   11f48:	movw	r1, #59911	; 0xea07
   11f4c:	mov	r6, r0
   11f50:	movw	r0, #59898	; 0xe9fa
   11f54:	movt	r0, #1
   11f58:	movt	r1, #1
   11f5c:	bl	19490 <__assert_fail@plt+0x7a64>
   11f60:	movw	r2, #59850	; 0xe9ca
   11f64:	mov	r1, #0
   11f68:	mov	r3, r4
   11f6c:	movt	r2, #1
   11f70:	stm	sp, {r2, r6}
   11f74:	movw	r2, #59836	; 0xe9bc
   11f78:	str	r1, [sp, #12]
   11f7c:	movw	r1, #59805	; 0xe99d
   11f80:	str	r0, [sp, #8]
   11f84:	mov	r0, r5
   11f88:	movt	r1, #1
   11f8c:	movt	r2, #1
   11f90:	bl	1c0d8 <__assert_fail@plt+0xa6ac>
   11f94:	mov	r0, #0
   11f98:	bl	11864 <exit@plt>
   11f9c:	cmn	r0, #2
   11fa0:	bne	11fac <__assert_fail@plt+0x580>
   11fa4:	mov	r0, #0
   11fa8:	bl	11b28 <__assert_fail@plt+0xfc>
   11fac:	mov	r0, #1
   11fb0:	bl	11b28 <__assert_fail@plt+0xfc>
   11fb4:	push	{r4, r5, fp, lr}
   11fb8:	add	fp, sp, #8
   11fbc:	movw	r5, #12780	; 0x31ec
   11fc0:	movt	r5, #3
   11fc4:	ldr	r1, [r5, #4]
   11fc8:	ldr	r0, [r5, #8]
   11fcc:	sub	r4, r0, r1
   11fd0:	mov	r0, #1
   11fd4:	mov	r2, r4
   11fd8:	bl	18f84 <__assert_fail@plt+0x7558>
   11fdc:	cmp	r0, r4
   11fe0:	ldreq	r0, [r5, #4]
   11fe4:	streq	r0, [r5, #8]
   11fe8:	popeq	{r4, r5, fp, pc}
   11fec:	bl	118b8 <__errno_location@plt>
   11ff0:	movw	r1, #60236	; 0xeb4c
   11ff4:	ldr	r4, [r0]
   11ff8:	mov	r0, #0
   11ffc:	mov	r2, #5
   12000:	movt	r1, #1
   12004:	bl	116fc <dcgettext@plt>
   12008:	movw	r2, #8017	; 0x1f51
   1200c:	mov	r3, r0
   12010:	mov	r0, #1
   12014:	mov	r1, r4
   12018:	movt	r2, #2
   1201c:	bl	117ec <error@plt>
   12020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12024:	add	fp, sp, #28
   12028:	sub	sp, sp, #292	; 0x124
   1202c:	str	r0, [sp, #4]
   12030:	mov	sl, r0
   12034:	ldrb	r1, [r0], #1
   12038:	cmp	r1, #32
   1203c:	beq	12030 <__assert_fail@plt+0x604>
   12040:	sub	r1, r1, #43	; 0x2b
   12044:	mov	r3, #0
   12048:	clz	r1, r1
   1204c:	lsr	r7, r1, #5
   12050:	ldrb	r2, [sl, r7]!
   12054:	cmp	r2, #0
   12058:	beq	1208c <__assert_fail@plt+0x660>
   1205c:	mvn	r3, #47	; 0x2f
   12060:	mov	r1, r7
   12064:	uxtab	r2, r3, r2
   12068:	cmp	r2, #10
   1206c:	bcs	12088 <__assert_fail@plt+0x65c>
   12070:	ldrb	r2, [r0, r1]
   12074:	add	r1, r1, #1
   12078:	cmp	r2, #0
   1207c:	bne	12064 <__assert_fail@plt+0x638>
   12080:	mov	r3, #1
   12084:	b	1208c <__assert_fail@plt+0x660>
   12088:	mov	r3, #0
   1208c:	sub	r2, r7, #1
   12090:	mov	lr, #10
   12094:	mov	r4, #0
   12098:	mov	r5, #0
   1209c:	mov	r9, #0
   120a0:	mov	r6, #0
   120a4:	tst	r3, #1
   120a8:	beq	1213c <__assert_fail@plt+0x710>
   120ac:	ldrb	r3, [r0, r2]
   120b0:	cmp	r3, #0
   120b4:	beq	12180 <__assert_fail@plt+0x754>
   120b8:	movw	r1, #39321	; 0x9999
   120bc:	movt	r1, #39321	; 0x9999
   120c0:	subs	r8, r1, r4
   120c4:	movw	r1, #39321	; 0x9999
   120c8:	movt	r1, #6553	; 0x1999
   120cc:	sbcs	r7, r1, r5
   120d0:	bcc	12358 <__assert_fail@plt+0x92c>
   120d4:	mov	ip, r5
   120d8:	umull	r1, r5, r9, lr
   120dc:	mov	r8, r4
   120e0:	add	r4, r6, r6, lsl #2
   120e4:	lsl	r7, r6, #1
   120e8:	sub	r3, r3, #48	; 0x30
   120ec:	add	r2, r2, #1
   120f0:	orr	r7, r7, r9, lsr #31
   120f4:	add	r4, r5, r4, lsl #1
   120f8:	lsr	r5, r6, #29
   120fc:	add	r5, r5, r6, lsr #31
   12100:	subs	r6, r1, r9, lsl #1
   12104:	sbcs	r6, r4, r7
   12108:	umull	r8, r6, r8, lr
   1210c:	add	r7, ip, ip, lsl #2
   12110:	addcc	r5, r5, #1
   12114:	adds	r9, r1, r3
   12118:	mov	r1, #0
   1211c:	mov	r3, #1
   12120:	add	r7, r6, r7, lsl #1
   12124:	adcs	r6, r4, #0
   12128:	adcs	r4, r8, r5
   1212c:	adcs	r5, r7, #0
   12130:	adcs	r1, r1, #0
   12134:	beq	120a4 <__assert_fail@plt+0x678>
   12138:	b	12358 <__assert_fail@plt+0x92c>
   1213c:	movw	r1, #60309	; 0xeb95
   12140:	mov	r0, #0
   12144:	mov	r2, #5
   12148:	mov	r4, #0
   1214c:	movt	r1, #1
   12150:	bl	116fc <dcgettext@plt>
   12154:	mov	r5, r0
   12158:	ldr	r0, [sp, #4]
   1215c:	bl	1b610 <__assert_fail@plt+0x9be4>
   12160:	mov	r3, r0
   12164:	mov	r0, #0
   12168:	mov	r1, #0
   1216c:	mov	r2, r5
   12170:	bl	117ec <error@plt>
   12174:	mov	r0, r4
   12178:	sub	sp, fp, #28
   1217c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12180:	cmp	r5, #0
   12184:	bmi	12358 <__assert_fail@plt+0x92c>
   12188:	movw	r7, #12780	; 0x31ec
   1218c:	movt	r7, #3
   12190:	ldrb	r0, [r7]
   12194:	cmp	r0, #1
   12198:	bne	121b8 <__assert_fail@plt+0x78c>
   1219c:	movw	r0, #12760	; 0x31d8
   121a0:	movw	r2, #60272	; 0xeb70
   121a4:	mov	r1, #1
   121a8:	movt	r0, #3
   121ac:	movt	r2, #1
   121b0:	ldr	r0, [r0]
   121b4:	bl	11924 <__fprintf_chk@plt>
   121b8:	mov	r0, r4
   121bc:	mov	r1, r5
   121c0:	mov	r2, r9
   121c4:	mov	r3, r6
   121c8:	bl	127c8 <__assert_fail@plt+0xd9c>
   121cc:	ldr	r0, [r7, #8]
   121d0:	mov	r2, r9
   121d4:	mov	r3, r6
   121d8:	add	r1, r0, #1
   121dc:	str	r1, [r7, #8]
   121e0:	mov	r1, #58	; 0x3a
   121e4:	strb	r1, [r0]
   121e8:	mov	r1, r5
   121ec:	add	r5, sp, #8
   121f0:	mov	r0, r4
   121f4:	str	r5, [sp]
   121f8:	bl	129d8 <__assert_fail@plt+0xfac>
   121fc:	ldrb	r0, [sp, #258]	; 0x102
   12200:	cmp	r0, #0
   12204:	beq	122c4 <__assert_fail@plt+0x898>
   12208:	mov	r2, #0
   1220c:	mov	r3, #32
   12210:	sub	r4, fp, #56	; 0x38
   12214:	add	r8, r5, r2
   12218:	ldrb	r1, [r8, #224]!	; 0xe0
   1221c:	cmp	r1, #0
   12220:	bne	12244 <__assert_fail@plt+0x818>
   12224:	uxtb	r1, r0
   12228:	add	r2, r2, #1
   1222c:	cmp	r2, r1
   12230:	bcs	122c4 <__assert_fail@plt+0x898>
   12234:	add	r8, r5, r2
   12238:	ldrb	r1, [r8, #224]!	; 0xe0
   1223c:	cmp	r1, #0
   12240:	beq	12224 <__assert_fail@plt+0x7f8>
   12244:	add	r0, r5, r2, lsl #3
   12248:	mov	sl, #0
   1224c:	str	r2, [sp, #4]
   12250:	add	r9, r0, #16
   12254:	ldr	r0, [r7, #8]
   12258:	add	r1, r0, #1
   1225c:	mov	r2, r4
   12260:	str	r1, [r7, #8]
   12264:	strb	r3, [r0]
   12268:	ldrd	r0, [r9]
   1226c:	bl	18ffc <__assert_fail@plt+0x75d0>
   12270:	ldr	r6, [r7, #8]
   12274:	mov	r1, r0
   12278:	sub	r0, r4, r0
   1227c:	add	r5, r0, #20
   12280:	mov	r2, r5
   12284:	mov	r0, r6
   12288:	bl	116d8 <memcpy@plt>
   1228c:	ldrb	r1, [r8]
   12290:	add	sl, sl, #1
   12294:	add	r0, r6, r5
   12298:	mov	r3, #32
   1229c:	str	r0, [r7, #8]
   122a0:	cmp	sl, r1
   122a4:	bcc	12258 <__assert_fail@plt+0x82c>
   122a8:	ldrb	r0, [sp, #258]	; 0x102
   122ac:	ldr	r2, [sp, #4]
   122b0:	add	r5, sp, #8
   122b4:	uxtb	r1, r0
   122b8:	add	r2, r2, #1
   122bc:	cmp	r2, r1
   122c0:	bcc	12234 <__assert_fail@plt+0x808>
   122c4:	ldr	r0, [sp, #16]
   122c8:	ldr	r1, [sp, #20]
   122cc:	orrs	r0, r0, r1
   122d0:	beq	122fc <__assert_fail@plt+0x8d0>
   122d4:	ldr	r1, [r7, #8]
   122d8:	add	r0, r5, #8
   122dc:	add	r2, r1, #1
   122e0:	str	r2, [r7, #8]
   122e4:	mov	r2, #32
   122e8:	strb	r2, [r1]
   122ec:	ldrd	r0, [r0]
   122f0:	ldr	r2, [sp, #8]
   122f4:	ldr	r3, [sp, #12]
   122f8:	bl	127c8 <__assert_fail@plt+0xd9c>
   122fc:	ldr	r0, [r7, #8]
   12300:	movw	r6, #12664	; 0x3178
   12304:	mov	r1, #10
   12308:	movt	r6, #3
   1230c:	add	r4, r0, #1
   12310:	str	r4, [r7, #8]
   12314:	strb	r1, [r0]
   12318:	ldr	r0, [r6]
   1231c:	ldr	r5, [r7, #4]
   12320:	cmn	r0, #1
   12324:	beq	1250c <__assert_fail@plt+0xae0>
   12328:	cmp	r0, #0
   1232c:	beq	12540 <__assert_fail@plt+0xb14>
   12330:	ldr	r1, [r7, #4]
   12334:	ldr	r0, [r7, #8]
   12338:	sub	r4, r0, r1
   1233c:	mov	r0, #1
   12340:	mov	r2, r4
   12344:	bl	18f84 <__assert_fail@plt+0x7558>
   12348:	cmp	r0, r4
   1234c:	bne	125cc <__assert_fail@plt+0xba0>
   12350:	ldr	r0, [r7, #4]
   12354:	b	125a0 <__assert_fail@plt+0xb74>
   12358:	movw	r0, #12780	; 0x31ec
   1235c:	movt	r0, #3
   12360:	ldrb	r0, [r0]
   12364:	cmp	r0, #1
   12368:	bne	12388 <__assert_fail@plt+0x95c>
   1236c:	movw	r0, #12760	; 0x31d8
   12370:	movw	r2, #60344	; 0xebb8
   12374:	mov	r1, #1
   12378:	movt	r0, #3
   1237c:	movt	r2, #1
   12380:	ldr	r0, [r0]
   12384:	bl	11924 <__fprintf_chk@plt>
   12388:	add	r5, sp, #8
   1238c:	mov	r1, sl
   12390:	mov	r2, #10
   12394:	mov	r0, r5
   12398:	bl	119cc <__gmpz_init_set_str@plt>
   1239c:	movw	r4, #12772	; 0x31e4
   123a0:	mov	r1, #10
   123a4:	mov	r2, r5
   123a8:	movt	r4, #3
   123ac:	ldr	r0, [r4]
   123b0:	bl	11780 <__gmpz_out_str@plt>
   123b4:	ldr	r0, [r4]
   123b8:	ldr	r1, [r0, #20]
   123bc:	ldr	r2, [r0, #24]
   123c0:	cmp	r1, r2
   123c4:	bcs	125b4 <__assert_fail@plt+0xb88>
   123c8:	add	r2, r1, #1
   123cc:	str	r2, [r0, #20]
   123d0:	mov	r0, #58	; 0x3a
   123d4:	strb	r0, [r1]
   123d8:	add	r0, sp, #8
   123dc:	sub	r1, fp, #56	; 0x38
   123e0:	bl	12600 <__assert_fail@plt+0xbd4>
   123e4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   123e8:	cmp	r1, #0
   123ec:	beq	124b8 <__assert_fail@plt+0xa8c>
   123f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   123f4:	mov	r5, #0
   123f8:	mov	r6, #32
   123fc:	ldr	r2, [r0, r5, lsl #2]
   12400:	cmp	r2, #0
   12404:	bne	12428 <__assert_fail@plt+0x9fc>
   12408:	b	12410 <__assert_fail@plt+0x9e4>
   1240c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12410:	add	r5, r5, #1
   12414:	cmp	r5, r1
   12418:	bcs	12488 <__assert_fail@plt+0xa5c>
   1241c:	ldr	r2, [r0, r5, lsl #2]
   12420:	cmp	r2, #0
   12424:	beq	12410 <__assert_fail@plt+0x9e4>
   12428:	mov	r7, #0
   1242c:	ldr	r0, [r4]
   12430:	ldr	r1, [r0, #20]
   12434:	ldr	r2, [r0, #24]
   12438:	cmp	r1, r2
   1243c:	bcs	1247c <__assert_fail@plt+0xa50>
   12440:	add	r2, r1, #1
   12444:	str	r2, [r0, #20]
   12448:	strb	r6, [r1]
   1244c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12450:	add	r0, r5, r5, lsl #1
   12454:	add	r2, r1, r0, lsl #2
   12458:	ldr	r0, [r4]
   1245c:	mov	r1, #10
   12460:	bl	11780 <__gmpz_out_str@plt>
   12464:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12468:	add	r7, r7, #1
   1246c:	ldr	r1, [r0, r5, lsl #2]
   12470:	cmp	r7, r1
   12474:	bcc	1242c <__assert_fail@plt+0xa00>
   12478:	b	1240c <__assert_fail@plt+0x9e0>
   1247c:	mov	r1, #32
   12480:	bl	11990 <__overflow@plt>
   12484:	b	1244c <__assert_fail@plt+0xa20>
   12488:	cmp	r1, #0
   1248c:	beq	124b8 <__assert_fail@plt+0xa8c>
   12490:	mov	r5, #0
   12494:	mov	r6, #0
   12498:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1249c:	add	r0, r0, r5
   124a0:	bl	118ac <__gmpz_clear@plt>
   124a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   124a8:	add	r6, r6, #1
   124ac:	add	r5, r5, #12
   124b0:	cmp	r6, r0
   124b4:	bcc	12498 <__assert_fail@plt+0xa6c>
   124b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   124bc:	bl	18f5c <__assert_fail@plt+0x7530>
   124c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   124c4:	bl	18f5c <__assert_fail@plt+0x7530>
   124c8:	add	r0, sp, #8
   124cc:	bl	118ac <__gmpz_clear@plt>
   124d0:	ldr	r0, [r4]
   124d4:	ldr	r1, [r0, #20]
   124d8:	ldr	r2, [r0, #24]
   124dc:	cmp	r1, r2
   124e0:	bcs	125c0 <__assert_fail@plt+0xb94>
   124e4:	add	r2, r1, #1
   124e8:	str	r2, [r0, #20]
   124ec:	mov	r0, #10
   124f0:	strb	r0, [r1]
   124f4:	ldr	r0, [r4]
   124f8:	bl	1178c <fflush_unlocked@plt>
   124fc:	mov	r4, #1
   12500:	mov	r0, r4
   12504:	sub	sp, fp, #28
   12508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250c:	mov	r0, #0
   12510:	bl	11a08 <isatty@plt>
   12514:	mov	r1, r0
   12518:	mov	r0, #1
   1251c:	cmp	r1, #0
   12520:	bne	12534 <__assert_fail@plt+0xb08>
   12524:	mov	r0, #1
   12528:	bl	11a08 <isatty@plt>
   1252c:	cmp	r0, #0
   12530:	movwne	r0, #1
   12534:	str	r0, [r6]
   12538:	cmp	r0, #0
   1253c:	bne	12330 <__assert_fail@plt+0x904>
   12540:	sub	r0, r4, r5
   12544:	cmp	r0, #512	; 0x200
   12548:	bcc	125a4 <__assert_fail@plt+0xb78>
   1254c:	ldmib	r7, {r1, r6}
   12550:	movw	r0, #513	; 0x201
   12554:	add	r4, r1, r0
   12558:	ldrb	r0, [r4, #-2]
   1255c:	sub	r4, r4, #1
   12560:	cmp	r0, #10
   12564:	bne	12558 <__assert_fail@plt+0xb2c>
   12568:	sub	r5, r4, r1
   1256c:	mov	r0, #1
   12570:	str	r4, [r7, #8]
   12574:	mov	r2, r5
   12578:	bl	18f84 <__assert_fail@plt+0x7558>
   1257c:	cmp	r0, r5
   12580:	bne	125cc <__assert_fail@plt+0xba0>
   12584:	sub	r5, r6, r4
   12588:	ldr	r6, [r7, #4]
   1258c:	mov	r1, r4
   12590:	mov	r2, r5
   12594:	mov	r0, r6
   12598:	bl	116d8 <memcpy@plt>
   1259c:	add	r0, r6, r5
   125a0:	str	r0, [r7, #8]
   125a4:	mov	r4, #1
   125a8:	mov	r0, r4
   125ac:	sub	sp, fp, #28
   125b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b4:	mov	r1, #58	; 0x3a
   125b8:	bl	11990 <__overflow@plt>
   125bc:	b	123d8 <__assert_fail@plt+0x9ac>
   125c0:	mov	r1, #10
   125c4:	bl	11990 <__overflow@plt>
   125c8:	b	124f4 <__assert_fail@plt+0xac8>
   125cc:	bl	118b8 <__errno_location@plt>
   125d0:	movw	r1, #60236	; 0xeb4c
   125d4:	ldr	r4, [r0]
   125d8:	mov	r0, #0
   125dc:	mov	r2, #5
   125e0:	movt	r1, #1
   125e4:	bl	116fc <dcgettext@plt>
   125e8:	movw	r2, #8017	; 0x1f51
   125ec:	mov	r3, r0
   125f0:	mov	r0, #1
   125f4:	mov	r1, r4
   125f8:	movt	r2, #2
   125fc:	bl	117ec <error@plt>
   12600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12604:	add	fp, sp, #28
   12608:	sub	sp, sp, #28
   1260c:	mov	r5, r0
   12610:	mov	r0, #0
   12614:	str	r0, [r1]
   12618:	str	r0, [r1, #4]
   1261c:	str	r0, [r1, #8]
   12620:	ldr	r0, [r5, #4]
   12624:	cmp	r0, #0
   12628:	beq	127c0 <__assert_fail@plt+0xd94>
   1262c:	movw	r8, #12780	; 0x31ec
   12630:	mov	r9, r1
   12634:	movt	r8, #3
   12638:	ldrb	r0, [r8]
   1263c:	cmp	r0, #1
   12640:	bne	12660 <__assert_fail@plt+0xc34>
   12644:	movw	r0, #12760	; 0x31d8
   12648:	movw	r2, #61047	; 0xee77
   1264c:	mov	r1, #1
   12650:	movt	r0, #3
   12654:	movt	r2, #1
   12658:	ldr	r0, [r0]
   1265c:	bl	11924 <__fprintf_chk@plt>
   12660:	add	r0, sp, #4
   12664:	bl	119f0 <__gmpz_init@plt>
   12668:	mov	r0, r5
   1266c:	mov	r1, #0
   12670:	bl	11648 <__gmpz_scan1@plt>
   12674:	mov	r6, r0
   12678:	mov	r0, r5
   1267c:	mov	r1, r5
   12680:	mov	r2, r6
   12684:	bl	117bc <__gmpz_fdiv_q_2exp@plt>
   12688:	cmp	r6, #0
   1268c:	beq	126bc <__assert_fail@plt+0xc90>
   12690:	add	r7, sp, #16
   12694:	mov	r0, r7
   12698:	mov	r1, #2
   1269c:	bl	1196c <__gmpz_init_set_ui@plt>
   126a0:	mov	r0, r9
   126a4:	mov	r1, r7
   126a8:	bl	1886c <__assert_fail@plt+0x6e40>
   126ac:	mov	r0, r7
   126b0:	bl	118ac <__gmpz_clear@plt>
   126b4:	subs	r6, r6, #1
   126b8:	bne	12694 <__assert_fail@plt+0xc68>
   126bc:	movw	sl, #6520	; 0x1978
   126c0:	mov	r6, #3
   126c4:	mov	r4, #1
   126c8:	add	r7, sp, #16
   126cc:	movt	sl, #2
   126d0:	b	1270c <__assert_fail@plt+0xce0>
   126d4:	mov	r0, r5
   126d8:	mov	r1, r5
   126dc:	mov	r2, r6
   126e0:	bl	1175c <__gmpz_tdiv_q_ui@plt>
   126e4:	mov	r0, r7
   126e8:	mov	r1, r6
   126ec:	bl	1196c <__gmpz_init_set_ui@plt>
   126f0:	mov	r0, r9
   126f4:	mov	r1, r7
   126f8:	bl	1886c <__assert_fail@plt+0x6e40>
   126fc:	mov	r0, r7
   12700:	bl	118ac <__gmpz_clear@plt>
   12704:	cmp	r4, #668	; 0x29c
   12708:	bhi	12748 <__assert_fail@plt+0xd1c>
   1270c:	mov	r0, r5
   12710:	mov	r1, r6
   12714:	bl	118a0 <__gmpz_divisible_ui_p@plt>
   12718:	cmp	r0, #0
   1271c:	bne	126d4 <__assert_fail@plt+0xca8>
   12720:	ldrb	r0, [sl, r4]
   12724:	add	r6, r6, r0
   12728:	mov	r0, r5
   1272c:	mul	r1, r6, r6
   12730:	bl	119e4 <__gmpz_cmp_ui@plt>
   12734:	cmp	r0, #0
   12738:	bmi	12748 <__assert_fail@plt+0xd1c>
   1273c:	add	r4, r4, #1
   12740:	cmp	r4, #668	; 0x29c
   12744:	bls	1270c <__assert_fail@plt+0xce0>
   12748:	add	r0, sp, #4
   1274c:	bl	118ac <__gmpz_clear@plt>
   12750:	mov	r0, r5
   12754:	mov	r1, #1
   12758:	bl	119e4 <__gmpz_cmp_ui@plt>
   1275c:	cmp	r0, #0
   12760:	beq	127c0 <__assert_fail@plt+0xd94>
   12764:	ldrb	r0, [r8]
   12768:	cmp	r0, #1
   1276c:	bne	1278c <__assert_fail@plt+0xd60>
   12770:	movw	r0, #12760	; 0x31d8
   12774:	movw	r2, #61027	; 0xee63
   12778:	mov	r1, #1
   1277c:	movt	r0, #3
   12780:	movt	r2, #1
   12784:	ldr	r0, [r0]
   12788:	bl	11924 <__fprintf_chk@plt>
   1278c:	mov	r0, r5
   12790:	bl	185e4 <__assert_fail@plt+0x6bb8>
   12794:	cmp	r0, #0
   12798:	beq	127b0 <__assert_fail@plt+0xd84>
   1279c:	mov	r0, r9
   127a0:	mov	r1, r5
   127a4:	bl	1886c <__assert_fail@plt+0x6e40>
   127a8:	sub	sp, fp, #28
   127ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b0:	mov	r0, r5
   127b4:	mov	r1, #1
   127b8:	mov	r2, r9
   127bc:	bl	189c4 <__assert_fail@plt+0x6f98>
   127c0:	sub	sp, fp, #28
   127c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	add	fp, sp, #28
   127d0:	sub	sp, sp, #44	; 0x2c
   127d4:	movw	r7, #12780	; 0x31ec
   127d8:	mov	r5, r0
   127dc:	mov	r8, r3
   127e0:	orrs	r0, r0, r1
   127e4:	movt	r7, #3
   127e8:	beq	12998 <__assert_fail@plt+0xf6c>
   127ec:	movw	r9, #51712	; 0xca00
   127f0:	str	r2, [sp, #12]
   127f4:	mov	r0, r5
   127f8:	mov	r3, #0
   127fc:	mov	r4, r1
   12800:	movt	r9, #15258	; 0x3b9a
   12804:	mov	r2, r9
   12808:	bl	1e668 <__assert_fail@plt+0xcc3c>
   1280c:	umull	r2, r3, r0, r9
   12810:	str	r0, [sp, #4]
   12814:	str	r1, [sp]
   12818:	mvn	ip, #63	; 0x3f
   1281c:	mov	lr, #0
   12820:	mov	r6, #0
   12824:	mla	r3, r1, r9, r3
   12828:	mov	r1, r8
   1282c:	mov	r8, #0
   12830:	subs	r0, r5, r2
   12834:	mov	r5, #0
   12838:	sbc	sl, r4, r3
   1283c:	mov	r3, #0
   12840:	mov	r4, r0
   12844:	b	12894 <__assert_fail@plt+0xe68>
   12848:	subs	r3, r4, r9
   1284c:	orr	r8, r8, #1
   12850:	sbc	r0, sl, lr
   12854:	subs	r4, r3, #1
   12858:	sbc	sl, r0, #0
   1285c:	subs	r2, r2, r5
   12860:	sbcs	r1, r1, r6
   12864:	str	r2, [sp, #12]
   12868:	mov	r2, r1
   1286c:	mov	r1, #0
   12870:	movwcc	r1, #1
   12874:	cmp	r1, #0
   12878:	mov	r1, r2
   1287c:	moveq	r4, r3
   12880:	moveq	sl, r0
   12884:	ldr	r0, [sp, #16]
   12888:	adds	ip, ip, #1
   1288c:	orr	r3, r0, r7, lsr #31
   12890:	bcs	12910 <__assert_fail@plt+0xee4>
   12894:	lsl	r0, r3, #1
   12898:	lsrs	r3, r6, #1
   1289c:	ldr	r2, [sp, #12]
   128a0:	rrx	r5, r5
   128a4:	lsrs	lr, lr, #1
   128a8:	mov	r7, r8
   128ac:	lsl	r8, r8, #1
   128b0:	str	r0, [sp, #16]
   128b4:	orr	r6, r3, r9, lsl #31
   128b8:	rrx	r9, r9
   128bc:	subs	r3, r9, r4
   128c0:	sbcs	r3, lr, sl
   128c4:	bcc	12848 <__assert_fail@plt+0xe1c>
   128c8:	str	r7, [sp, #8]
   128cc:	mov	r7, r8
   128d0:	eor	r3, r4, r9
   128d4:	eor	r8, sl, lr
   128d8:	mov	r0, r4
   128dc:	orrs	r3, r3, r8
   128e0:	bne	12900 <__assert_fail@plt+0xed4>
   128e4:	mov	r8, r7
   128e8:	ldr	r7, [sp, #8]
   128ec:	subs	r3, r2, r5
   128f0:	mov	r4, r0
   128f4:	sbcs	r3, r1, r6
   128f8:	bcs	12848 <__assert_fail@plt+0xe1c>
   128fc:	b	12884 <__assert_fail@plt+0xe58>
   12900:	mov	r8, r7
   12904:	ldr	r7, [sp, #8]
   12908:	mov	r4, r0
   1290c:	b	12884 <__assert_fail@plt+0xe58>
   12910:	mov	r5, r1
   12914:	ldr	r0, [sp, #4]
   12918:	ldr	r1, [sp]
   1291c:	mov	r2, r8
   12920:	bl	127c8 <__assert_fail@plt+0xd9c>
   12924:	ldr	r0, [sp, #12]
   12928:	add	r8, sp, #23
   1292c:	mov	r1, r5
   12930:	mov	r2, r8
   12934:	bl	18ffc <__assert_fail@plt+0x75d0>
   12938:	movw	r7, #12780	; 0x31ec
   1293c:	mov	r5, r0
   12940:	sub	r0, r8, r0
   12944:	movt	r7, #3
   12948:	add	r4, r0, #20
   1294c:	cmp	r4, #8
   12950:	ldr	r6, [r7, #8]
   12954:	bhi	12978 <__assert_fail@plt+0xf4c>
   12958:	sub	r8, r5, r8
   1295c:	mov	r0, r6
   12960:	mov	r1, #48	; 0x30
   12964:	sub	r2, r8, #11
   12968:	bl	118e8 <memset@plt>
   1296c:	add	r0, r8, r6
   12970:	sub	r6, r0, #11
   12974:	str	r6, [r7, #8]
   12978:	mov	r0, r6
   1297c:	mov	r1, r5
   12980:	mov	r2, r4
   12984:	bl	116d8 <memcpy@plt>
   12988:	add	r0, r6, r4
   1298c:	str	r0, [r7, #8]
   12990:	sub	sp, fp, #28
   12994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12998:	add	r6, sp, #23
   1299c:	mov	r0, r2
   129a0:	mov	r1, r8
   129a4:	mov	r2, r6
   129a8:	bl	18ffc <__assert_fail@plt+0x75d0>
   129ac:	ldr	r5, [r7, #8]
   129b0:	mov	r1, r0
   129b4:	sub	r0, r6, r0
   129b8:	add	r4, r0, #20
   129bc:	mov	r2, r4
   129c0:	mov	r0, r5
   129c4:	bl	116d8 <memcpy@plt>
   129c8:	add	r0, r5, r4
   129cc:	str	r0, [r7, #8]
   129d0:	sub	sp, fp, #28
   129d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129dc:	add	fp, sp, #28
   129e0:	sub	sp, sp, #68	; 0x44
   129e4:	ldr	sl, [fp, #8]
   129e8:	mov	r8, r2
   129ec:	mov	r2, #0
   129f0:	mov	r7, sl
   129f4:	str	r2, [sl, #12]
   129f8:	strb	r2, [sl, #250]	; 0xfa
   129fc:	str	r2, [r7, #8]!
   12a00:	orrs	r2, r0, r1
   12a04:	bne	12a14 <__assert_fail@plt+0xfe8>
   12a08:	subs	r2, r8, #2
   12a0c:	sbcs	r2, r3, #0
   12a10:	bcc	13d34 <__assert_fail@plt+0x2308>
   12a14:	tst	r8, #1
   12a18:	str	r7, [sp, #40]	; 0x28
   12a1c:	bne	12ac4 <__assert_fail@plt+0x1098>
   12a20:	add	lr, sl, #16
   12a24:	orrs	r7, r8, r3
   12a28:	beq	12ad4 <__assert_fail@plt+0x10a8>
   12a2c:	mov	r6, #0
   12a30:	mov	r4, r8
   12a34:	mov	r7, r3
   12a38:	str	lr, [fp, #-32]	; 0xffffffe0
   12a3c:	lsrs	r7, r7, #1
   12a40:	rrx	r5, r4
   12a44:	tst	r4, #2
   12a48:	sub	r6, r6, #1
   12a4c:	mov	r4, r5
   12a50:	beq	12a3c <__assert_fail@plt+0x1010>
   12a54:	rsb	r7, r6, #0
   12a58:	add	r4, r6, #32
   12a5c:	add	lr, r6, #64	; 0x40
   12a60:	lsr	r5, r0, r7
   12a64:	lsr	ip, r1, r7
   12a68:	lsr	r2, r3, r7
   12a6c:	orr	r9, r5, r1, lsl r4
   12a70:	mvn	r5, #31
   12a74:	subs	r5, r5, r6
   12a78:	lsrpl	r9, r1, r5
   12a7c:	lsr	r6, r0, r5
   12a80:	movwpl	ip, #0
   12a84:	movwpl	r2, #0
   12a88:	cmp	r4, #0
   12a8c:	orr	r1, r6, r1, lsl lr
   12a90:	lslpl	r1, r0, r4
   12a94:	lsl	r0, r0, lr
   12a98:	ldr	lr, [fp, #-32]	; 0xffffffe0
   12a9c:	cmp	r5, #0
   12aa0:	orr	r2, r1, r2
   12aa4:	lsr	r1, r8, r7
   12aa8:	orr	r1, r1, r3, lsl r4
   12aac:	lsrpl	r1, r3, r5
   12ab0:	cmp	r4, #0
   12ab4:	mov	r4, r9
   12ab8:	movwpl	r0, #0
   12abc:	orr	r8, r0, r1
   12ac0:	b	12b2c <__assert_fail@plt+0x1100>
   12ac4:	mov	r7, r3
   12ac8:	mov	r4, r0
   12acc:	mov	r6, r1
   12ad0:	b	12b4c <__assert_fail@plt+0x1120>
   12ad4:	mov	r4, #0
   12ad8:	tst	r0, #1
   12adc:	mov	r3, #0
   12ae0:	bne	12b08 <__assert_fail@plt+0x10dc>
   12ae4:	mov	r3, #0
   12ae8:	mov	r7, r0
   12aec:	mov	r6, r1
   12af0:	lsrs	r6, r6, #1
   12af4:	rrx	r5, r7
   12af8:	tst	r7, #2
   12afc:	add	r3, r3, #1
   12b00:	mov	r7, r5
   12b04:	beq	12af0 <__assert_fail@plt+0x10c4>
   12b08:	lsr	r0, r0, r3
   12b0c:	rsb	r7, r3, #32
   12b10:	lsr	r2, r1, r3
   12b14:	mov	ip, #0
   12b18:	orr	r8, r0, r1, lsl r7
   12b1c:	subs	r0, r3, #32
   12b20:	add	r7, r3, #64	; 0x40
   12b24:	lsrpl	r8, r1, r0
   12b28:	movwpl	r2, #0
   12b2c:	mov	r1, #0
   12b30:	mov	r0, #2
   12b34:	mov	r6, ip
   12b38:	strd	r0, [lr]
   12b3c:	mov	r0, #1
   12b40:	strb	r0, [sl, #250]	; 0xfa
   12b44:	strb	r7, [sl, #224]	; 0xe0
   12b48:	mov	r7, r2
   12b4c:	orrs	r0, r4, r6
   12b50:	movw	r0, #61256	; 0xef48
   12b54:	str	sl, [sp, #44]	; 0x2c
   12b58:	movt	r0, #1
   12b5c:	beq	12dc8 <__assert_fail@plt+0x139c>
   12b60:	mov	r9, #0
   12b64:	mov	r2, #3
   12b68:	mov	sl, #0
   12b6c:	str	r4, [fp, #-40]	; 0xffffffd8
   12b70:	str	r2, [fp, #-32]	; 0xffffffe0
   12b74:	movw	r2, #61256	; 0xef48
   12b78:	str	r9, [fp, #-44]	; 0xffffffd4
   12b7c:	str	sl, [fp, #-36]	; 0xffffffdc
   12b80:	mov	ip, r6
   12b84:	movt	r2, #1
   12b88:	ldr	sl, [r2, sl, lsl #4]!
   12b8c:	ldr	r0, [r2, #4]
   12b90:	add	r1, r2, #8
   12b94:	str	r1, [sp, #48]	; 0x30
   12b98:	umull	r2, r3, r8, sl
   12b9c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12ba0:	mov	lr, r8
   12ba4:	mov	r5, r7
   12ba8:	mla	r3, r8, r0, r3
   12bac:	mov	r8, sl
   12bb0:	mla	r7, r7, sl, r3
   12bb4:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12bb8:	umull	r3, r6, r2, r9
   12bbc:	umlal	r3, r6, r7, sl
   12bc0:	umull	r4, r1, r2, sl
   12bc4:	adds	r1, r3, r1
   12bc8:	adc	r3, r6, #0
   12bcc:	umull	r4, r6, r7, sl
   12bd0:	subs	r1, r1, r4
   12bd4:	sbcs	r1, r3, r6
   12bd8:	umull	r4, r6, r7, r9
   12bdc:	mov	r1, #0
   12be0:	movwcc	r1, #1
   12be4:	cmp	r1, #0
   12be8:	addne	r6, r6, #1
   12bec:	adds	r3, r4, r3
   12bf0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   12bf4:	adc	r6, r6, #0
   12bf8:	subs	r1, r4, r3
   12bfc:	sbcs	r1, ip, r6
   12c00:	bcc	12d6c <__assert_fail@plt+0x1340>
   12c04:	subs	r1, r4, r3
   12c08:	mov	sl, r8
   12c0c:	umull	r3, r4, r1, r8
   12c10:	mla	r1, r1, r0, r4
   12c14:	sbc	r4, ip, r6
   12c18:	mla	r6, r4, r8, r1
   12c1c:	ldr	r1, [sp, #48]	; 0x30
   12c20:	ldr	r4, [r1]
   12c24:	ldr	r1, [r1, #4]
   12c28:	subs	r4, r4, r3
   12c2c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   12c30:	sbcs	r1, r1, r6
   12c34:	bcc	12d6c <__assert_fail@plt+0x1340>
   12c38:	str	r7, [sp, #28]
   12c3c:	mov	ip, r6
   12c40:	ldr	r1, [sp, #44]	; 0x2c
   12c44:	ldrb	r8, [r1, #250]	; 0xfa
   12c48:	sub	r9, r8, #1
   12c4c:	cmp	r8, #0
   12c50:	beq	12d2c <__assert_fail@plt+0x1300>
   12c54:	mov	r1, #8
   12c58:	add	r7, r8, #223	; 0xdf
   12c5c:	lsl	r5, r8, #3
   12c60:	str	r8, [fp, #-40]	; 0xffffffd8
   12c64:	add	r1, r1, r8, lsl #3
   12c68:	mov	lr, r7
   12c6c:	ldr	r6, [sp, #44]	; 0x2c
   12c70:	ldr	r4, [r6, r1]!
   12c74:	ldr	r8, [r6, #4]
   12c78:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12c7c:	subs	r6, r6, r4
   12c80:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12c84:	sbcs	r6, r6, r8
   12c88:	bcs	12cb8 <__assert_fail@plt+0x128c>
   12c8c:	sub	r6, r7, #224	; 0xe0
   12c90:	sub	r4, r7, #1
   12c94:	sub	r1, r1, #8
   12c98:	cmp	r6, #0
   12c9c:	mov	r7, r4
   12ca0:	bgt	12c6c <__assert_fail@plt+0x1240>
   12ca4:	sub	r8, r4, #224	; 0xe0
   12ca8:	ldr	r4, [sp, #44]	; 0x2c
   12cac:	cmp	r9, r8
   12cb0:	bgt	12cf4 <__assert_fail@plt+0x12c8>
   12cb4:	b	12d24 <__assert_fail@plt+0x12f8>
   12cb8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12cbc:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12cc0:	eor	r1, r4, r1
   12cc4:	eor	r4, r8, r6
   12cc8:	orrs	r1, r1, r4
   12ccc:	bne	12ce4 <__assert_fail@plt+0x12b8>
   12cd0:	ldr	r4, [sp, #44]	; 0x2c
   12cd4:	ldrb	r1, [r4, r7]
   12cd8:	add	r1, r1, #1
   12cdc:	strb	r1, [r4, r7]
   12ce0:	b	12d5c <__assert_fail@plt+0x1330>
   12ce4:	sub	r8, r7, #224	; 0xe0
   12ce8:	ldr	r4, [sp, #44]	; 0x2c
   12cec:	cmp	r9, r8
   12cf0:	ble	12d24 <__assert_fail@plt+0x12f8>
   12cf4:	add	r1, r4, r5
   12cf8:	sub	r5, r5, #8
   12cfc:	ldrd	r6, [r1, #8]
   12d00:	strd	r6, [r1, #16]
   12d04:	mov	r1, r4
   12d08:	ldrb	r6, [r1, lr]!
   12d0c:	strb	r6, [r1, #1]
   12d10:	sub	r6, lr, #225	; 0xe1
   12d14:	sub	r1, lr, #1
   12d18:	cmp	r6, r8
   12d1c:	mov	lr, r1
   12d20:	bgt	12cf4 <__assert_fail@plt+0x12c8>
   12d24:	mov	r9, r8
   12d28:	ldr	r8, [fp, #-40]	; 0xffffffd8
   12d2c:	ldr	r6, [sp, #44]	; 0x2c
   12d30:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12d34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12d38:	add	lr, r9, #1
   12d3c:	add	r4, r6, lr, lsl #3
   12d40:	str	r1, [r4, #16]
   12d44:	str	r7, [r4, #20]
   12d48:	add	r1, r6, lr
   12d4c:	mov	r7, #1
   12d50:	strb	r7, [r1, #224]	; 0xe0
   12d54:	add	r1, r8, #1
   12d58:	strb	r1, [r6, #250]	; 0xfa
   12d5c:	str	r3, [fp, #-40]	; 0xffffffd8
   12d60:	mov	r8, r2
   12d64:	ldr	r7, [sp, #28]
   12d68:	b	12b98 <__assert_fail@plt+0x116c>
   12d6c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12d70:	movw	r0, #6520	; 0x1978
   12d74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d78:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12d7c:	mov	r6, ip
   12d80:	mov	r7, r5
   12d84:	mov	r8, lr
   12d88:	movt	r0, #2
   12d8c:	add	sl, sl, #1
   12d90:	ldrb	r0, [r0, sl]
   12d94:	adds	r2, r2, r0
   12d98:	lsr	r0, sl, #2
   12d9c:	adc	r9, r9, #0
   12da0:	cmp	r0, #166	; 0xa6
   12da4:	bhi	12db0 <__assert_fail@plt+0x1384>
   12da8:	orrs	r1, r4, r6
   12dac:	bne	12b6c <__assert_fail@plt+0x1140>
   12db0:	movw	lr, #61256	; 0xef48
   12db4:	cmp	r0, #166	; 0xa6
   12db8:	movt	lr, #1
   12dbc:	mov	r0, lr
   12dc0:	bls	12ddc <__assert_fail@plt+0x13b0>
   12dc4:	b	13d10 <__assert_fail@plt+0x22e4>
   12dc8:	mov	r4, #0
   12dcc:	mov	r2, #3
   12dd0:	mov	r6, #0
   12dd4:	mov	r9, #0
   12dd8:	mov	sl, #0
   12ddc:	str	r4, [fp, #-40]	; 0xffffffd8
   12de0:	str	r6, [sp, #48]	; 0x30
   12de4:	ldr	r1, [r0, sl, lsl #4]!
   12de8:	str	r2, [fp, #-32]	; 0xffffffe0
   12dec:	mov	lr, r7
   12df0:	str	sl, [fp, #-36]	; 0xffffffdc
   12df4:	ldr	ip, [r0, #4]
   12df8:	ldr	r6, [r0, #12]
   12dfc:	umull	r3, r2, r1, r8
   12e00:	mla	r5, r1, r7, r2
   12e04:	ldr	r7, [r0, #8]
   12e08:	mla	r5, ip, r8, r5
   12e0c:	subs	r4, r7, r3
   12e10:	sbcs	r4, r6, r5
   12e14:	bcs	12f74 <__assert_fail@plt+0x1548>
   12e18:	ldr	r1, [r0, #16]
   12e1c:	ldr	ip, [r0, #20]
   12e20:	ldr	r3, [r0, #24]
   12e24:	ldr	r6, [r0, #28]
   12e28:	umull	r7, r5, r1, r8
   12e2c:	mla	r5, r1, lr, r5
   12e30:	mla	r5, ip, r8, r5
   12e34:	subs	r4, r3, r7
   12e38:	sbcs	r4, r6, r5
   12e3c:	bcs	130e4 <__assert_fail@plt+0x16b8>
   12e40:	ldr	r1, [r0, #32]
   12e44:	ldr	ip, [r0, #36]	; 0x24
   12e48:	ldr	r3, [r0, #40]	; 0x28
   12e4c:	ldr	r6, [r0, #44]	; 0x2c
   12e50:	umull	r5, r7, r1, r8
   12e54:	mla	r7, r1, lr, r7
   12e58:	mla	r7, ip, r8, r7
   12e5c:	subs	r4, r3, r5
   12e60:	sbcs	r4, r6, r7
   12e64:	bcs	13280 <__assert_fail@plt+0x1854>
   12e68:	add	ip, r0, #48	; 0x30
   12e6c:	ldr	r6, [r0, #60]	; 0x3c
   12e70:	mov	r7, lr
   12e74:	ldm	ip, {r1, sl, ip}
   12e78:	umull	r2, r4, r1, r8
   12e7c:	mla	r4, r1, lr, r4
   12e80:	mla	r5, sl, r8, r4
   12e84:	subs	r4, ip, r2
   12e88:	sbcs	r4, r6, r5
   12e8c:	bcs	1341c <__assert_fail@plt+0x19f0>
   12e90:	add	ip, r0, #64	; 0x40
   12e94:	ldr	r6, [r0, #76]	; 0x4c
   12e98:	ldm	ip, {r1, sl, ip}
   12e9c:	umull	r2, r3, r1, r8
   12ea0:	mla	r3, r1, r7, r3
   12ea4:	mla	r3, sl, r8, r3
   12ea8:	subs	r4, ip, r2
   12eac:	sbcs	r4, r6, r3
   12eb0:	bcs	135d0 <__assert_fail@plt+0x1ba4>
   12eb4:	add	ip, r0, #80	; 0x50
   12eb8:	ldr	r6, [r0, #92]	; 0x5c
   12ebc:	ldm	ip, {r1, sl, ip}
   12ec0:	umull	r3, r2, r1, r8
   12ec4:	mla	r2, r1, r7, r2
   12ec8:	mla	r2, sl, r8, r2
   12ecc:	subs	r4, ip, r3
   12ed0:	sbcs	r4, r6, r2
   12ed4:	bcs	1378c <__assert_fail@plt+0x1d60>
   12ed8:	add	ip, r0, #96	; 0x60
   12edc:	ldr	r3, [r0, #108]	; 0x6c
   12ee0:	ldm	ip, {r1, sl, ip}
   12ee4:	umull	r2, r4, r1, r8
   12ee8:	mla	r4, r1, r7, r4
   12eec:	mla	r6, sl, r8, r4
   12ef0:	subs	r4, ip, r2
   12ef4:	sbcs	r4, r3, r6
   12ef8:	bcs	1395c <__assert_fail@plt+0x1f30>
   12efc:	ldr	r1, [r0, #112]	; 0x70
   12f00:	ldr	ip, [r0, #116]	; 0x74
   12f04:	ldr	r2, [r0, #120]	; 0x78
   12f08:	ldr	r0, [r0, #124]	; 0x7c
   12f0c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12f10:	umull	r3, r4, r1, r8
   12f14:	mla	r4, r1, r7, r4
   12f18:	mla	r5, ip, r8, r4
   12f1c:	subs	r4, r2, r3
   12f20:	sbcs	r4, r0, r5
   12f24:	bcs	13b38 <__assert_fail@plt+0x210c>
   12f28:	movw	r0, #7195	; 0x1c1b
   12f2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12f30:	movt	r0, #2
   12f34:	ldrb	r0, [r0, sl]
   12f38:	add	sl, sl, #8
   12f3c:	adds	r2, r2, r0
   12f40:	lsr	r0, sl, #2
   12f44:	adc	r9, r9, #0
   12f48:	cmp	r0, #166	; 0xa6
   12f4c:	bhi	13d08 <__assert_fail@plt+0x22dc>
   12f50:	umull	r0, r1, r2, r2
   12f54:	mla	r1, r2, r9, r1
   12f58:	mla	r1, r2, r9, r1
   12f5c:	subs	r0, r8, r0
   12f60:	sbcs	r0, r7, r1
   12f64:	movw	r0, #61256	; 0xef48
   12f68:	movt	r0, #1
   12f6c:	bcs	12de4 <__assert_fail@plt+0x13b8>
   12f70:	b	13d08 <__assert_fail@plt+0x22dc>
   12f74:	ldr	r2, [sp, #44]	; 0x2c
   12f78:	ldrb	lr, [r2, #250]	; 0xfa
   12f7c:	sub	r2, lr, #1
   12f80:	cmp	lr, #0
   12f84:	beq	13080 <__assert_fail@plt+0x1654>
   12f88:	str	r2, [sp, #24]
   12f8c:	mov	r2, #8
   12f90:	str	r9, [fp, #-44]	; 0xffffffd4
   12f94:	lsl	sl, lr, #3
   12f98:	str	lr, [sp, #32]
   12f9c:	add	r9, r2, lr, lsl #3
   12fa0:	add	lr, lr, #223	; 0xdf
   12fa4:	str	lr, [sp, #28]
   12fa8:	ldr	r4, [sp, #44]	; 0x2c
   12fac:	ldr	r8, [r4, r9]!
   12fb0:	ldr	r2, [r4, #4]
   12fb4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12fb8:	subs	r4, r4, r8
   12fbc:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12fc0:	sbcs	r4, r4, r2
   12fc4:	bcs	12fe8 <__assert_fail@plt+0x15bc>
   12fc8:	sub	r4, lr, #224	; 0xe0
   12fcc:	sub	r2, lr, #1
   12fd0:	sub	r9, r9, #8
   12fd4:	cmp	r4, #0
   12fd8:	mov	lr, r2
   12fdc:	bgt	12fa8 <__assert_fail@plt+0x157c>
   12fe0:	sub	r2, r2, #224	; 0xe0
   12fe4:	b	1301c <__assert_fail@plt+0x15f0>
   12fe8:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12fec:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12ff0:	eor	r8, r8, r4
   12ff4:	eor	r4, r2, r9
   12ff8:	orrs	r4, r8, r4
   12ffc:	bne	13018 <__assert_fail@plt+0x15ec>
   13000:	ldr	r4, [sp, #44]	; 0x2c
   13004:	ldr	sl, [fp, #-36]	; 0xffffffdc
   13008:	ldrb	r2, [r4, lr]
   1300c:	add	r2, r2, #1
   13010:	strb	r2, [r4, lr]
   13014:	b	130b4 <__assert_fail@plt+0x1688>
   13018:	sub	r2, lr, #224	; 0xe0
   1301c:	str	r2, [sp, #36]	; 0x24
   13020:	ldr	r2, [sp, #24]
   13024:	ldr	r4, [sp, #36]	; 0x24
   13028:	ldr	lr, [sp, #44]	; 0x2c
   1302c:	cmp	r2, r4
   13030:	ldr	r2, [sp, #28]
   13034:	ble	13070 <__assert_fail@plt+0x1644>
   13038:	add	r4, lr, sl
   1303c:	sub	sl, sl, #8
   13040:	ldrd	r8, [r4, #8]
   13044:	strd	r8, [r4, #16]
   13048:	mov	r4, lr
   1304c:	mov	r8, r2
   13050:	ldrb	r2, [r4, r2]!
   13054:	sub	r9, r8, #1
   13058:	strb	r2, [r4, #1]
   1305c:	ldr	r2, [sp, #36]	; 0x24
   13060:	sub	r4, r8, #225	; 0xe1
   13064:	cmp	r4, r2
   13068:	mov	r2, r9
   1306c:	bgt	13038 <__assert_fail@plt+0x160c>
   13070:	ldr	r2, [sp, #36]	; 0x24
   13074:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13078:	ldr	sl, [fp, #-36]	; 0xffffffdc
   1307c:	ldr	lr, [sp, #32]
   13080:	add	r4, r2, #1
   13084:	str	r4, [fp, #-44]	; 0xffffffd4
   13088:	ldr	r2, [sp, #44]	; 0x2c
   1308c:	ldr	r8, [fp, #-32]	; 0xffffffe0
   13090:	add	r4, r2, r4, lsl #3
   13094:	strd	r8, [r4, #16]
   13098:	mov	r8, r2
   1309c:	ldr	r4, [fp, #-44]	; 0xffffffd4
   130a0:	add	r4, r2, r4
   130a4:	mov	r2, #1
   130a8:	strb	r2, [r4, #224]	; 0xe0
   130ac:	add	r4, lr, #1
   130b0:	strb	r4, [r8, #250]	; 0xfa
   130b4:	umull	r2, r4, r3, r1
   130b8:	mov	r8, r3
   130bc:	mov	lr, r5
   130c0:	mla	r4, r3, ip, r4
   130c4:	mla	r4, r5, r1, r4
   130c8:	str	r2, [fp, #-44]	; 0xffffffd4
   130cc:	subs	r2, r7, r2
   130d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   130d4:	sbcs	r2, r6, r4
   130d8:	mov	r5, r4
   130dc:	bcc	12e18 <__assert_fail@plt+0x13ec>
   130e0:	b	12f74 <__assert_fail@plt+0x1548>
   130e4:	movw	r2, #6520	; 0x1978
   130e8:	movt	r2, #2
   130ec:	add	r4, sl, r2
   130f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130f4:	ldrb	r4, [r4, #1]
   130f8:	adds	r2, r2, r4
   130fc:	str	r2, [sp, #36]	; 0x24
   13100:	adc	r2, r9, #0
   13104:	str	r2, [sp, #28]
   13108:	ldr	r2, [sp, #44]	; 0x2c
   1310c:	ldrb	r4, [r2, #250]	; 0xfa
   13110:	sub	r2, r4, #1
   13114:	cmp	r4, #0
   13118:	str	r4, [sp, #24]
   1311c:	beq	13214 <__assert_fail@plt+0x17e8>
   13120:	str	r2, [sp, #12]
   13124:	mov	r2, #8
   13128:	str	r9, [fp, #-44]	; 0xffffffd4
   1312c:	add	lr, r4, #223	; 0xdf
   13130:	add	r9, r2, r4, lsl #3
   13134:	lsl	r2, r4, #3
   13138:	str	r2, [sp, #20]
   1313c:	str	lr, [sp, #16]
   13140:	ldr	sl, [sp, #28]
   13144:	ldr	r4, [sp, #44]	; 0x2c
   13148:	ldr	r8, [r4, r9]!
   1314c:	ldr	r2, [r4, #4]
   13150:	ldr	r4, [sp, #36]	; 0x24
   13154:	subs	r4, r4, r8
   13158:	sbcs	r4, sl, r2
   1315c:	bcs	13180 <__assert_fail@plt+0x1754>
   13160:	sub	r4, lr, #224	; 0xe0
   13164:	sub	r2, lr, #1
   13168:	sub	r9, r9, #8
   1316c:	cmp	r4, #0
   13170:	mov	lr, r2
   13174:	bgt	13144 <__assert_fail@plt+0x1718>
   13178:	sub	r2, r2, #224	; 0xe0
   1317c:	b	131b4 <__assert_fail@plt+0x1788>
   13180:	ldr	r4, [sp, #36]	; 0x24
   13184:	eor	r8, r8, r4
   13188:	eor	r4, r2, sl
   1318c:	orrs	r4, r8, r4
   13190:	bne	131b0 <__assert_fail@plt+0x1784>
   13194:	ldr	r4, [sp, #44]	; 0x2c
   13198:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1319c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   131a0:	ldrb	r2, [r4, lr]
   131a4:	add	r2, r2, #1
   131a8:	strb	r2, [r4, lr]
   131ac:	b	13250 <__assert_fail@plt+0x1824>
   131b0:	sub	r2, lr, #224	; 0xe0
   131b4:	str	r2, [sp, #32]
   131b8:	ldr	r2, [sp, #12]
   131bc:	ldr	r4, [sp, #32]
   131c0:	ldr	sl, [sp, #20]
   131c4:	cmp	r2, r4
   131c8:	ldr	r2, [sp, #16]
   131cc:	ble	13208 <__assert_fail@plt+0x17dc>
   131d0:	ldr	lr, [sp, #44]	; 0x2c
   131d4:	add	r4, lr, sl
   131d8:	sub	sl, sl, #8
   131dc:	ldrd	r8, [r4, #8]
   131e0:	strd	r8, [r4, #16]
   131e4:	mov	r8, r2
   131e8:	ldrb	r2, [lr, r2]!
   131ec:	sub	r9, r8, #1
   131f0:	sub	r4, r8, #225	; 0xe1
   131f4:	strb	r2, [lr, #1]
   131f8:	ldr	r2, [sp, #32]
   131fc:	cmp	r4, r2
   13200:	mov	r2, r9
   13204:	bgt	131d0 <__assert_fail@plt+0x17a4>
   13208:	ldr	r2, [sp, #32]
   1320c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13210:	ldr	sl, [fp, #-36]	; 0xffffffdc
   13214:	add	r2, r2, #1
   13218:	str	r2, [fp, #-44]	; 0xffffffd4
   1321c:	ldr	r8, [sp, #44]	; 0x2c
   13220:	ldr	lr, [sp, #36]	; 0x24
   13224:	add	r4, r8, r2, lsl #3
   13228:	ldr	r2, [sp, #28]
   1322c:	str	lr, [r4, #16]
   13230:	str	r2, [r4, #20]
   13234:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13238:	add	r4, r8, r2
   1323c:	mov	r2, #1
   13240:	strb	r2, [r4, #224]	; 0xe0
   13244:	ldr	r2, [sp, #24]
   13248:	add	r4, r2, #1
   1324c:	strb	r4, [r8, #250]	; 0xfa
   13250:	umull	r2, r4, r7, r1
   13254:	mov	r8, r7
   13258:	mov	lr, r5
   1325c:	mla	r4, r7, ip, r4
   13260:	mla	r4, r5, r1, r4
   13264:	str	r2, [fp, #-44]	; 0xffffffd4
   13268:	subs	r2, r3, r2
   1326c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   13270:	sbcs	r2, r6, r4
   13274:	mov	r5, r4
   13278:	bcc	12e40 <__assert_fail@plt+0x1414>
   1327c:	b	13108 <__assert_fail@plt+0x16dc>
   13280:	movw	r2, #6520	; 0x1978
   13284:	movt	r2, #2
   13288:	add	r4, sl, r2
   1328c:	ldrb	r2, [r4, #1]
   13290:	ldrb	r8, [r4, #2]
   13294:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13298:	adds	r4, r4, r2
   1329c:	adc	r2, r9, #0
   132a0:	adds	r4, r4, r8
   132a4:	adc	r2, r2, #0
   132a8:	str	r4, [sp, #36]	; 0x24
   132ac:	str	r2, [sp, #32]
   132b0:	ldr	r2, [sp, #44]	; 0x2c
   132b4:	ldrb	r4, [r2, #250]	; 0xfa
   132b8:	sub	sl, r4, #1
   132bc:	cmp	r4, #0
   132c0:	str	r4, [sp, #24]
   132c4:	beq	13324 <__assert_fail@plt+0x18f8>
   132c8:	mov	r2, #8
   132cc:	str	r9, [fp, #-44]	; 0xffffffd4
   132d0:	add	lr, r4, #223	; 0xdf
   132d4:	add	r9, r2, r4, lsl #3
   132d8:	lsl	r2, r4, #3
   132dc:	str	r2, [sp, #20]
   132e0:	str	lr, [sp, #16]
   132e4:	ldr	r4, [sp, #44]	; 0x2c
   132e8:	ldr	r8, [r4, r9]!
   132ec:	ldr	r2, [r4, #4]
   132f0:	ldr	r4, [sp, #36]	; 0x24
   132f4:	subs	r4, r4, r8
   132f8:	ldr	r4, [sp, #32]
   132fc:	sbcs	r4, r4, r2
   13300:	bcs	1332c <__assert_fail@plt+0x1900>
   13304:	sub	r4, lr, #224	; 0xe0
   13308:	sub	r2, lr, #1
   1330c:	sub	r9, r9, #8
   13310:	cmp	r4, #0
   13314:	mov	lr, r2
   13318:	bgt	132e4 <__assert_fail@plt+0x18b8>
   1331c:	sub	r2, r2, #224	; 0xe0
   13320:	b	13360 <__assert_fail@plt+0x1934>
   13324:	ldr	lr, [sp, #32]
   13328:	b	133c0 <__assert_fail@plt+0x1994>
   1332c:	ldr	r4, [sp, #36]	; 0x24
   13330:	eor	r8, r8, r4
   13334:	ldr	r4, [sp, #32]
   13338:	eor	r4, r2, r4
   1333c:	orrs	r4, r8, r4
   13340:	bne	1335c <__assert_fail@plt+0x1930>
   13344:	ldr	r4, [sp, #44]	; 0x2c
   13348:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1334c:	ldrb	r2, [r4, lr]
   13350:	add	r2, r2, #1
   13354:	strb	r2, [r4, lr]
   13358:	b	133f0 <__assert_fail@plt+0x19c4>
   1335c:	sub	r2, lr, #224	; 0xe0
   13360:	str	r2, [sp, #28]
   13364:	ldr	r2, [sp, #28]
   13368:	ldr	r8, [sp, #20]
   1336c:	cmp	sl, r2
   13370:	ldr	sl, [sp, #16]
   13374:	ble	133b4 <__assert_fail@plt+0x1988>
   13378:	ldr	lr, [sp, #44]	; 0x2c
   1337c:	mov	r2, r8
   13380:	add	r4, lr, r8
   13384:	ldrd	r8, [r4, #8]
   13388:	strd	r8, [r4, #16]
   1338c:	mov	r8, r2
   13390:	sub	r9, sl, #1
   13394:	sub	r4, sl, #225	; 0xe1
   13398:	ldrb	r2, [lr, sl]!
   1339c:	sub	r8, r8, #8
   133a0:	mov	sl, r9
   133a4:	strb	r2, [lr, #1]
   133a8:	ldr	r2, [sp, #28]
   133ac:	cmp	r4, r2
   133b0:	bgt	13378 <__assert_fail@plt+0x194c>
   133b4:	ldr	lr, [sp, #32]
   133b8:	ldr	sl, [sp, #28]
   133bc:	ldr	r9, [fp, #-44]	; 0xffffffd4
   133c0:	add	r8, sl, #1
   133c4:	ldr	sl, [sp, #44]	; 0x2c
   133c8:	ldr	r2, [sp, #36]	; 0x24
   133cc:	add	r4, sl, r8, lsl #3
   133d0:	str	r2, [r4, #16]
   133d4:	str	lr, [r4, #20]
   133d8:	add	r4, sl, r8
   133dc:	mov	r2, #1
   133e0:	strb	r2, [r4, #224]	; 0xe0
   133e4:	ldr	r2, [sp, #24]
   133e8:	add	r4, r2, #1
   133ec:	strb	r4, [sl, #250]	; 0xfa
   133f0:	umull	sl, r4, r5, r1
   133f4:	mov	r8, r5
   133f8:	mov	lr, r7
   133fc:	mla	r4, r5, ip, r4
   13400:	mla	r4, r7, r1, r4
   13404:	subs	r2, r3, sl
   13408:	mov	r5, sl
   1340c:	sbcs	r2, r6, r4
   13410:	mov	r7, r4
   13414:	bcc	12e68 <__assert_fail@plt+0x143c>
   13418:	b	132b0 <__assert_fail@plt+0x1884>
   1341c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13420:	movw	r4, #6520	; 0x1978
   13424:	str	r9, [fp, #-44]	; 0xffffffd4
   13428:	movt	r4, #2
   1342c:	add	r4, r7, r4
   13430:	ldrb	r7, [r4, #1]
   13434:	ldrb	r8, [r4, #2]
   13438:	ldrb	r9, [r4, #3]
   1343c:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13440:	adds	r7, r4, r7
   13444:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13448:	adc	r4, r4, #0
   1344c:	adds	r7, r7, r8
   13450:	adc	r4, r4, #0
   13454:	adds	r7, r7, r9
   13458:	str	r7, [sp, #36]	; 0x24
   1345c:	adc	r7, r4, #0
   13460:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13464:	str	r7, [sp, #32]
   13468:	ldr	r4, [sp, #44]	; 0x2c
   1346c:	ldrb	r7, [r4, #250]	; 0xfa
   13470:	sub	lr, r7, #1
   13474:	cmp	r7, #0
   13478:	str	r7, [sp, #24]
   1347c:	beq	1356c <__assert_fail@plt+0x1b40>
   13480:	mov	r4, #8
   13484:	add	r3, r7, #223	; 0xdf
   13488:	add	r9, r4, r7, lsl #3
   1348c:	lsl	r4, r7, #3
   13490:	str	r4, [sp, #20]
   13494:	str	r3, [sp, #16]
   13498:	ldr	r4, [sp, #44]	; 0x2c
   1349c:	ldr	r7, [r4, r9]!
   134a0:	ldr	r8, [r4, #4]
   134a4:	ldr	r4, [sp, #36]	; 0x24
   134a8:	subs	r4, r4, r7
   134ac:	ldr	r4, [sp, #32]
   134b0:	sbcs	r4, r4, r8
   134b4:	bcs	134d8 <__assert_fail@plt+0x1aac>
   134b8:	sub	r4, r3, #224	; 0xe0
   134bc:	sub	r7, r3, #1
   134c0:	sub	r9, r9, #8
   134c4:	cmp	r4, #0
   134c8:	mov	r3, r7
   134cc:	bgt	13498 <__assert_fail@plt+0x1a6c>
   134d0:	sub	r4, r7, #224	; 0xe0
   134d4:	b	1350c <__assert_fail@plt+0x1ae0>
   134d8:	ldr	r4, [sp, #36]	; 0x24
   134dc:	eor	r4, r7, r4
   134e0:	ldr	r7, [sp, #32]
   134e4:	eor	r7, r8, r7
   134e8:	orrs	r4, r4, r7
   134ec:	bne	13508 <__assert_fail@plt+0x1adc>
   134f0:	ldr	r7, [sp, #44]	; 0x2c
   134f4:	ldr	r9, [fp, #-44]	; 0xffffffd4
   134f8:	ldrb	r4, [r7, r3]
   134fc:	add	r4, r4, #1
   13500:	strb	r4, [r7, r3]
   13504:	b	135a0 <__assert_fail@plt+0x1b74>
   13508:	sub	r4, r3, #224	; 0xe0
   1350c:	str	r4, [sp, #28]
   13510:	ldr	r4, [sp, #28]
   13514:	ldr	r3, [sp, #44]	; 0x2c
   13518:	ldr	r8, [sp, #20]
   1351c:	cmp	lr, r4
   13520:	ldr	lr, [sp, #16]
   13524:	ble	13564 <__assert_fail@plt+0x1b38>
   13528:	add	r4, r3, r8
   1352c:	mov	r7, r8
   13530:	ldrd	r8, [r4, #8]
   13534:	strd	r8, [r4, #16]
   13538:	mov	r4, r3
   1353c:	mov	r8, r7
   13540:	sub	r9, lr, #1
   13544:	ldrb	r7, [r4, lr]!
   13548:	sub	r8, r8, #8
   1354c:	strb	r7, [r4, #1]
   13550:	ldr	r4, [sp, #28]
   13554:	sub	r7, lr, #225	; 0xe1
   13558:	mov	lr, r9
   1355c:	cmp	r7, r4
   13560:	bgt	13528 <__assert_fail@plt+0x1afc>
   13564:	ldr	lr, [sp, #28]
   13568:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1356c:	ldr	r8, [sp, #44]	; 0x2c
   13570:	ldr	r4, [sp, #36]	; 0x24
   13574:	ldr	r3, [sp, #32]
   13578:	add	lr, lr, #1
   1357c:	add	r7, r8, lr, lsl #3
   13580:	str	r4, [r7, #16]
   13584:	str	r3, [r7, #20]
   13588:	add	r4, r8, lr
   1358c:	mov	r7, #1
   13590:	strb	r7, [r4, #224]	; 0xe0
   13594:	ldr	r4, [sp, #24]
   13598:	add	r4, r4, #1
   1359c:	strb	r4, [r8, #250]	; 0xfa
   135a0:	umull	r3, r7, r2, r1
   135a4:	mov	r8, r2
   135a8:	mla	r7, r2, sl, r7
   135ac:	mla	r7, r5, r1, r7
   135b0:	subs	r4, ip, r3
   135b4:	mov	r2, r3
   135b8:	sbcs	r4, r6, r7
   135bc:	mov	r4, r5
   135c0:	mov	r5, r7
   135c4:	mov	r7, r4
   135c8:	bcc	12e90 <__assert_fail@plt+0x1464>
   135cc:	b	13468 <__assert_fail@plt+0x1a3c>
   135d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   135d4:	movw	r4, #6520	; 0x1978
   135d8:	str	r9, [fp, #-44]	; 0xffffffd4
   135dc:	movt	r4, #2
   135e0:	add	r4, r7, r4
   135e4:	ldrb	r7, [r4, #1]
   135e8:	ldrb	r8, [r4, #2]
   135ec:	ldrb	r9, [r4, #3]
   135f0:	ldrb	r5, [r4, #4]
   135f4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   135f8:	adds	r7, r4, r7
   135fc:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13600:	adc	r4, r4, #0
   13604:	adds	r7, r7, r8
   13608:	adc	r4, r4, #0
   1360c:	adds	r7, r7, r9
   13610:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13614:	adc	r4, r4, #0
   13618:	adds	r7, r7, r5
   1361c:	str	r7, [sp, #36]	; 0x24
   13620:	adc	r7, r4, #0
   13624:	str	r7, [sp, #32]
   13628:	ldr	r4, [sp, #44]	; 0x2c
   1362c:	ldrb	r7, [r4, #250]	; 0xfa
   13630:	sub	lr, r7, #1
   13634:	cmp	r7, #0
   13638:	str	r7, [sp, #24]
   1363c:	beq	1372c <__assert_fail@plt+0x1d00>
   13640:	mov	r4, #8
   13644:	add	r5, r7, #223	; 0xdf
   13648:	add	r9, r4, r7, lsl #3
   1364c:	lsl	r4, r7, #3
   13650:	str	r4, [sp, #20]
   13654:	str	r5, [sp, #16]
   13658:	ldr	r4, [sp, #44]	; 0x2c
   1365c:	ldr	r7, [r4, r9]!
   13660:	ldr	r8, [r4, #4]
   13664:	ldr	r4, [sp, #36]	; 0x24
   13668:	subs	r4, r4, r7
   1366c:	ldr	r4, [sp, #32]
   13670:	sbcs	r4, r4, r8
   13674:	bcs	13698 <__assert_fail@plt+0x1c6c>
   13678:	sub	r4, r5, #224	; 0xe0
   1367c:	sub	r7, r5, #1
   13680:	sub	r9, r9, #8
   13684:	cmp	r4, #0
   13688:	mov	r5, r7
   1368c:	bgt	13658 <__assert_fail@plt+0x1c2c>
   13690:	sub	r4, r7, #224	; 0xe0
   13694:	b	136cc <__assert_fail@plt+0x1ca0>
   13698:	ldr	r4, [sp, #36]	; 0x24
   1369c:	eor	r4, r7, r4
   136a0:	ldr	r7, [sp, #32]
   136a4:	eor	r7, r8, r7
   136a8:	orrs	r4, r4, r7
   136ac:	bne	136c8 <__assert_fail@plt+0x1c9c>
   136b0:	ldr	r7, [sp, #44]	; 0x2c
   136b4:	ldr	r9, [fp, #-44]	; 0xffffffd4
   136b8:	ldrb	r4, [r7, r5]
   136bc:	add	r4, r4, #1
   136c0:	strb	r4, [r7, r5]
   136c4:	b	1375c <__assert_fail@plt+0x1d30>
   136c8:	sub	r4, r5, #224	; 0xe0
   136cc:	str	r4, [sp, #28]
   136d0:	ldr	r4, [sp, #28]
   136d4:	ldr	r5, [sp, #44]	; 0x2c
   136d8:	ldr	r8, [sp, #20]
   136dc:	cmp	lr, r4
   136e0:	ldr	lr, [sp, #16]
   136e4:	ble	13724 <__assert_fail@plt+0x1cf8>
   136e8:	add	r4, r5, r8
   136ec:	mov	r7, r8
   136f0:	ldrd	r8, [r4, #8]
   136f4:	strd	r8, [r4, #16]
   136f8:	mov	r4, r5
   136fc:	mov	r8, r7
   13700:	sub	r9, lr, #1
   13704:	ldrb	r7, [r4, lr]!
   13708:	sub	r8, r8, #8
   1370c:	strb	r7, [r4, #1]
   13710:	ldr	r4, [sp, #28]
   13714:	sub	r7, lr, #225	; 0xe1
   13718:	mov	lr, r9
   1371c:	cmp	r7, r4
   13720:	bgt	136e8 <__assert_fail@plt+0x1cbc>
   13724:	ldr	lr, [sp, #28]
   13728:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1372c:	ldr	r8, [sp, #44]	; 0x2c
   13730:	ldr	r4, [sp, #36]	; 0x24
   13734:	ldr	r5, [sp, #32]
   13738:	add	lr, lr, #1
   1373c:	add	r7, r8, lr, lsl #3
   13740:	strd	r4, [r7, #16]
   13744:	add	r4, r8, lr
   13748:	mov	r7, #1
   1374c:	strb	r7, [r4, #224]	; 0xe0
   13750:	ldr	r4, [sp, #24]
   13754:	add	r4, r4, #1
   13758:	strb	r4, [r8, #250]	; 0xfa
   1375c:	umull	r5, r7, r2, r1
   13760:	mov	r8, r2
   13764:	mla	r7, r2, sl, r7
   13768:	mla	r7, r3, r1, r7
   1376c:	subs	r4, ip, r5
   13770:	mov	r2, r5
   13774:	sbcs	r4, r6, r7
   13778:	mov	r4, r3
   1377c:	mov	r3, r7
   13780:	mov	r7, r4
   13784:	bcc	12eb4 <__assert_fail@plt+0x1488>
   13788:	b	13628 <__assert_fail@plt+0x1bfc>
   1378c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13790:	movw	r4, #6520	; 0x1978
   13794:	str	r9, [fp, #-44]	; 0xffffffd4
   13798:	movt	r4, #2
   1379c:	add	r4, r7, r4
   137a0:	ldrb	r7, [r4, #3]
   137a4:	ldrb	r8, [r4, #1]
   137a8:	ldrb	r9, [r4, #2]
   137ac:	ldrb	lr, [r4, #4]
   137b0:	ldrb	r4, [r4, #5]
   137b4:	str	r7, [sp, #36]	; 0x24
   137b8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   137bc:	adds	r5, r7, r8
   137c0:	ldr	r7, [fp, #-44]	; 0xffffffd4
   137c4:	adc	r8, r7, #0
   137c8:	adds	r7, r5, r9
   137cc:	ldr	r5, [sp, #36]	; 0x24
   137d0:	ldr	r9, [fp, #-44]	; 0xffffffd4
   137d4:	adc	r8, r8, #0
   137d8:	adds	r7, r7, r5
   137dc:	adc	r8, r8, #0
   137e0:	adds	r7, r7, lr
   137e4:	adc	r8, r8, #0
   137e8:	adds	r7, r7, r4
   137ec:	str	r7, [sp, #36]	; 0x24
   137f0:	adc	r7, r8, #0
   137f4:	str	r7, [sp, #32]
   137f8:	ldr	r4, [sp, #44]	; 0x2c
   137fc:	ldrb	r7, [r4, #250]	; 0xfa
   13800:	sub	lr, r7, #1
   13804:	cmp	r7, #0
   13808:	str	r7, [sp, #24]
   1380c:	beq	138fc <__assert_fail@plt+0x1ed0>
   13810:	mov	r4, #8
   13814:	add	r5, r7, #223	; 0xdf
   13818:	add	r9, r4, r7, lsl #3
   1381c:	lsl	r4, r7, #3
   13820:	str	r4, [sp, #20]
   13824:	str	r5, [sp, #16]
   13828:	ldr	r4, [sp, #44]	; 0x2c
   1382c:	ldr	r7, [r4, r9]!
   13830:	ldr	r8, [r4, #4]
   13834:	ldr	r4, [sp, #36]	; 0x24
   13838:	subs	r4, r4, r7
   1383c:	ldr	r4, [sp, #32]
   13840:	sbcs	r4, r4, r8
   13844:	bcs	13868 <__assert_fail@plt+0x1e3c>
   13848:	sub	r4, r5, #224	; 0xe0
   1384c:	sub	r7, r5, #1
   13850:	sub	r9, r9, #8
   13854:	cmp	r4, #0
   13858:	mov	r5, r7
   1385c:	bgt	13828 <__assert_fail@plt+0x1dfc>
   13860:	sub	r4, r7, #224	; 0xe0
   13864:	b	1389c <__assert_fail@plt+0x1e70>
   13868:	ldr	r4, [sp, #36]	; 0x24
   1386c:	eor	r4, r7, r4
   13870:	ldr	r7, [sp, #32]
   13874:	eor	r7, r8, r7
   13878:	orrs	r4, r4, r7
   1387c:	bne	13898 <__assert_fail@plt+0x1e6c>
   13880:	ldr	r7, [sp, #44]	; 0x2c
   13884:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13888:	ldrb	r4, [r7, r5]
   1388c:	add	r4, r4, #1
   13890:	strb	r4, [r7, r5]
   13894:	b	1392c <__assert_fail@plt+0x1f00>
   13898:	sub	r4, r5, #224	; 0xe0
   1389c:	str	r4, [sp, #28]
   138a0:	ldr	r4, [sp, #28]
   138a4:	ldr	r5, [sp, #44]	; 0x2c
   138a8:	ldr	r8, [sp, #20]
   138ac:	cmp	lr, r4
   138b0:	ldr	lr, [sp, #16]
   138b4:	ble	138f4 <__assert_fail@plt+0x1ec8>
   138b8:	add	r4, r5, r8
   138bc:	mov	r7, r8
   138c0:	ldrd	r8, [r4, #8]
   138c4:	strd	r8, [r4, #16]
   138c8:	mov	r4, r5
   138cc:	mov	r8, r7
   138d0:	sub	r9, lr, #1
   138d4:	ldrb	r7, [r4, lr]!
   138d8:	sub	r8, r8, #8
   138dc:	strb	r7, [r4, #1]
   138e0:	ldr	r4, [sp, #28]
   138e4:	sub	r7, lr, #225	; 0xe1
   138e8:	mov	lr, r9
   138ec:	cmp	r7, r4
   138f0:	bgt	138b8 <__assert_fail@plt+0x1e8c>
   138f4:	ldr	lr, [sp, #28]
   138f8:	ldr	r9, [fp, #-44]	; 0xffffffd4
   138fc:	ldr	r8, [sp, #44]	; 0x2c
   13900:	ldr	r4, [sp, #36]	; 0x24
   13904:	ldr	r5, [sp, #32]
   13908:	add	lr, lr, #1
   1390c:	add	r7, r8, lr, lsl #3
   13910:	strd	r4, [r7, #16]
   13914:	add	r4, r8, lr
   13918:	mov	r7, #1
   1391c:	strb	r7, [r4, #224]	; 0xe0
   13920:	ldr	r4, [sp, #24]
   13924:	add	r4, r4, #1
   13928:	strb	r4, [r8, #250]	; 0xfa
   1392c:	umull	r5, r7, r3, r1
   13930:	mov	r8, r3
   13934:	mla	r7, r3, sl, r7
   13938:	mla	r7, r2, r1, r7
   1393c:	subs	r4, ip, r5
   13940:	mov	r3, r5
   13944:	sbcs	r4, r6, r7
   13948:	mov	r4, r2
   1394c:	mov	r2, r7
   13950:	mov	r7, r4
   13954:	bcc	12ed8 <__assert_fail@plt+0x14ac>
   13958:	b	137f8 <__assert_fail@plt+0x1dcc>
   1395c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13960:	movw	r4, #6520	; 0x1978
   13964:	str	r9, [fp, #-44]	; 0xffffffd4
   13968:	movt	r4, #2
   1396c:	add	r4, r7, r4
   13970:	ldrb	r7, [r4, #3]
   13974:	ldrb	r8, [r4, #1]
   13978:	ldrb	r9, [r4, #2]
   1397c:	ldrb	lr, [r4, #4]
   13980:	str	r7, [sp, #36]	; 0x24
   13984:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13988:	adds	r5, r7, r8
   1398c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   13990:	adc	r8, r7, #0
   13994:	adds	r7, r5, r9
   13998:	ldr	r5, [sp, #36]	; 0x24
   1399c:	adc	r8, r8, #0
   139a0:	adds	r7, r7, r5
   139a4:	adc	r8, r8, #0
   139a8:	adds	r9, r7, lr
   139ac:	ldrb	r7, [r4, #5]
   139b0:	ldrb	r4, [r4, #6]
   139b4:	adc	r8, r8, #0
   139b8:	adds	r7, r9, r7
   139bc:	ldr	r9, [fp, #-44]	; 0xffffffd4
   139c0:	adc	r8, r8, #0
   139c4:	adds	r7, r7, r4
   139c8:	str	r7, [sp, #36]	; 0x24
   139cc:	adc	r7, r8, #0
   139d0:	str	r7, [sp, #32]
   139d4:	ldr	r4, [sp, #44]	; 0x2c
   139d8:	ldrb	r7, [r4, #250]	; 0xfa
   139dc:	sub	lr, r7, #1
   139e0:	cmp	r7, #0
   139e4:	str	r7, [sp, #24]
   139e8:	beq	13ad8 <__assert_fail@plt+0x20ac>
   139ec:	mov	r4, #8
   139f0:	add	r5, r7, #223	; 0xdf
   139f4:	add	r9, r4, r7, lsl #3
   139f8:	lsl	r4, r7, #3
   139fc:	str	r4, [sp, #20]
   13a00:	str	r5, [sp, #16]
   13a04:	ldr	r4, [sp, #44]	; 0x2c
   13a08:	ldr	r7, [r4, r9]!
   13a0c:	ldr	r8, [r4, #4]
   13a10:	ldr	r4, [sp, #36]	; 0x24
   13a14:	subs	r4, r4, r7
   13a18:	ldr	r4, [sp, #32]
   13a1c:	sbcs	r4, r4, r8
   13a20:	bcs	13a44 <__assert_fail@plt+0x2018>
   13a24:	sub	r4, r5, #224	; 0xe0
   13a28:	sub	r7, r5, #1
   13a2c:	sub	r9, r9, #8
   13a30:	cmp	r4, #0
   13a34:	mov	r5, r7
   13a38:	bgt	13a04 <__assert_fail@plt+0x1fd8>
   13a3c:	sub	r4, r7, #224	; 0xe0
   13a40:	b	13a78 <__assert_fail@plt+0x204c>
   13a44:	ldr	r4, [sp, #36]	; 0x24
   13a48:	eor	r4, r7, r4
   13a4c:	ldr	r7, [sp, #32]
   13a50:	eor	r7, r8, r7
   13a54:	orrs	r4, r4, r7
   13a58:	bne	13a74 <__assert_fail@plt+0x2048>
   13a5c:	ldr	r7, [sp, #44]	; 0x2c
   13a60:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13a64:	ldrb	r4, [r7, r5]
   13a68:	add	r4, r4, #1
   13a6c:	strb	r4, [r7, r5]
   13a70:	b	13b08 <__assert_fail@plt+0x20dc>
   13a74:	sub	r4, r5, #224	; 0xe0
   13a78:	str	r4, [sp, #28]
   13a7c:	ldr	r4, [sp, #28]
   13a80:	ldr	r5, [sp, #44]	; 0x2c
   13a84:	ldr	r8, [sp, #20]
   13a88:	cmp	lr, r4
   13a8c:	ldr	lr, [sp, #16]
   13a90:	ble	13ad0 <__assert_fail@plt+0x20a4>
   13a94:	add	r4, r5, r8
   13a98:	mov	r7, r8
   13a9c:	ldrd	r8, [r4, #8]
   13aa0:	strd	r8, [r4, #16]
   13aa4:	mov	r4, r5
   13aa8:	mov	r8, r7
   13aac:	sub	r9, lr, #1
   13ab0:	ldrb	r7, [r4, lr]!
   13ab4:	sub	r8, r8, #8
   13ab8:	strb	r7, [r4, #1]
   13abc:	ldr	r4, [sp, #28]
   13ac0:	sub	r7, lr, #225	; 0xe1
   13ac4:	mov	lr, r9
   13ac8:	cmp	r7, r4
   13acc:	bgt	13a94 <__assert_fail@plt+0x2068>
   13ad0:	ldr	lr, [sp, #28]
   13ad4:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13ad8:	ldr	r8, [sp, #44]	; 0x2c
   13adc:	ldr	r4, [sp, #36]	; 0x24
   13ae0:	ldr	r5, [sp, #32]
   13ae4:	add	lr, lr, #1
   13ae8:	add	r7, r8, lr, lsl #3
   13aec:	strd	r4, [r7, #16]
   13af0:	add	r4, r8, lr
   13af4:	mov	r7, #1
   13af8:	strb	r7, [r4, #224]	; 0xe0
   13afc:	ldr	r4, [sp, #24]
   13b00:	add	r4, r4, #1
   13b04:	strb	r4, [r8, #250]	; 0xfa
   13b08:	umull	r5, r7, r2, r1
   13b0c:	mov	r8, r2
   13b10:	mla	r7, r2, sl, r7
   13b14:	mla	r7, r6, r1, r7
   13b18:	subs	r4, ip, r5
   13b1c:	mov	r2, r5
   13b20:	sbcs	r4, r3, r7
   13b24:	mov	r4, r6
   13b28:	mov	r6, r7
   13b2c:	mov	r7, r4
   13b30:	bcc	12efc <__assert_fail@plt+0x14d0>
   13b34:	b	139d4 <__assert_fail@plt+0x1fa8>
   13b38:	movw	r4, #6520	; 0x1978
   13b3c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13b40:	mov	r6, r9
   13b44:	movt	r4, #2
   13b48:	add	r4, sl, r4
   13b4c:	ldrb	sl, [r4, #1]
   13b50:	ldrb	r8, [r4, #2]
   13b54:	ldrb	r9, [r4, #3]
   13b58:	ldrb	lr, [r4, #4]
   13b5c:	adds	sl, r7, sl
   13b60:	adc	r7, r6, #0
   13b64:	adds	r8, sl, r8
   13b68:	ldr	sl, [fp, #-36]	; 0xffffffdc
   13b6c:	adc	r7, r7, #0
   13b70:	adds	r8, r8, r9
   13b74:	mov	r9, r6
   13b78:	ldrb	r6, [r4, #5]
   13b7c:	adc	r7, r7, #0
   13b80:	adds	r8, r8, lr
   13b84:	adc	r7, r7, #0
   13b88:	adds	r8, r8, r6
   13b8c:	ldrb	r6, [r4, #6]
   13b90:	ldrb	r4, [r4, #7]
   13b94:	adc	r7, r7, #0
   13b98:	adds	r6, r8, r6
   13b9c:	adc	r7, r7, #0
   13ba0:	adds	r6, r6, r4
   13ba4:	adc	r7, r7, #0
   13ba8:	str	r6, [fp, #-44]	; 0xffffffd4
   13bac:	str	r7, [sp, #36]	; 0x24
   13bb0:	str	r5, [sp, #28]
   13bb4:	mov	r8, r3
   13bb8:	ldr	r3, [sp, #44]	; 0x2c
   13bbc:	ldrb	r4, [r3, #250]	; 0xfa
   13bc0:	sub	r3, r4, #1
   13bc4:	cmp	r4, #0
   13bc8:	str	r4, [sp, #24]
   13bcc:	beq	13cb8 <__assert_fail@plt+0x228c>
   13bd0:	str	r3, [sp, #16]
   13bd4:	mov	r3, #8
   13bd8:	add	lr, r4, #223	; 0xdf
   13bdc:	add	r7, r3, r4, lsl #3
   13be0:	lsl	r3, r4, #3
   13be4:	mov	r6, lr
   13be8:	str	r3, [sp, #20]
   13bec:	ldr	r3, [sp, #44]	; 0x2c
   13bf0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13bf4:	ldr	r4, [r3, r7]!
   13bf8:	ldr	r3, [r3, #4]
   13bfc:	subs	r5, r5, r4
   13c00:	ldr	r5, [sp, #36]	; 0x24
   13c04:	sbcs	r5, r5, r3
   13c08:	bcs	13c2c <__assert_fail@plt+0x2200>
   13c0c:	sub	r3, r6, #224	; 0xe0
   13c10:	sub	r4, r6, #1
   13c14:	sub	r7, r7, #8
   13c18:	cmp	r3, #0
   13c1c:	mov	r6, r4
   13c20:	bgt	13bec <__assert_fail@plt+0x21c0>
   13c24:	sub	r3, r4, #224	; 0xe0
   13c28:	b	13c5c <__assert_fail@plt+0x2230>
   13c2c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13c30:	eor	r4, r4, r5
   13c34:	ldr	r5, [sp, #36]	; 0x24
   13c38:	eor	r3, r3, r5
   13c3c:	orrs	r3, r4, r3
   13c40:	bne	13c58 <__assert_fail@plt+0x222c>
   13c44:	ldr	r4, [sp, #44]	; 0x2c
   13c48:	ldrb	r3, [r4, r6]
   13c4c:	add	r3, r3, #1
   13c50:	strb	r3, [r4, r6]
   13c54:	b	13ce8 <__assert_fail@plt+0x22bc>
   13c58:	sub	r3, r6, #224	; 0xe0
   13c5c:	str	r3, [sp, #32]
   13c60:	ldr	r3, [sp, #16]
   13c64:	ldr	r4, [sp, #32]
   13c68:	ldr	r7, [sp, #44]	; 0x2c
   13c6c:	ldr	r5, [sp, #20]
   13c70:	cmp	r3, r4
   13c74:	ble	13cb4 <__assert_fail@plt+0x2288>
   13c78:	add	r3, r7, r5
   13c7c:	mov	r6, r5
   13c80:	ldrd	r4, [r3, #8]
   13c84:	strd	r4, [r3, #16]
   13c88:	mov	r3, r7
   13c8c:	mov	r5, r6
   13c90:	sub	r5, r6, #8
   13c94:	ldrb	r4, [r3, lr]!
   13c98:	ldr	r6, [sp, #32]
   13c9c:	strb	r4, [r3, #1]
   13ca0:	sub	r4, lr, #225	; 0xe1
   13ca4:	sub	r3, lr, #1
   13ca8:	cmp	r4, r6
   13cac:	mov	lr, r3
   13cb0:	bgt	13c78 <__assert_fail@plt+0x224c>
   13cb4:	ldr	r3, [sp, #32]
   13cb8:	ldr	r5, [sp, #44]	; 0x2c
   13cbc:	ldr	r6, [fp, #-44]	; 0xffffffd4
   13cc0:	ldr	r7, [sp, #36]	; 0x24
   13cc4:	add	r3, r3, #1
   13cc8:	add	r4, r5, r3, lsl #3
   13ccc:	add	r3, r5, r3
   13cd0:	strd	r6, [r4, #16]
   13cd4:	mov	r7, #1
   13cd8:	strb	r7, [r3, #224]	; 0xe0
   13cdc:	ldr	r3, [sp, #24]
   13ce0:	add	r3, r3, #1
   13ce4:	strb	r3, [r5, #250]	; 0xfa
   13ce8:	ldr	r7, [sp, #28]
   13cec:	umull	r3, r4, r8, r1
   13cf0:	mla	r4, r8, ip, r4
   13cf4:	mla	r5, r7, r1, r4
   13cf8:	subs	r4, r2, r3
   13cfc:	sbcs	r4, r0, r5
   13d00:	bcc	12f28 <__assert_fail@plt+0x14fc>
   13d04:	b	13bb0 <__assert_fail@plt+0x2184>
   13d08:	ldr	r6, [sp, #48]	; 0x30
   13d0c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   13d10:	mov	r9, r7
   13d14:	mov	r7, r4
   13d18:	orrs	r5, r4, r6
   13d1c:	ldr	sl, [sp, #44]	; 0x2c
   13d20:	ldr	r4, [sp, #40]	; 0x28
   13d24:	bne	13d3c <__assert_fail@plt+0x2310>
   13d28:	subs	r0, r8, #2
   13d2c:	sbcs	r0, r9, #0
   13d30:	bcs	13d3c <__assert_fail@plt+0x2310>
   13d34:	sub	sp, fp, #28
   13d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d3c:	mov	r0, r7
   13d40:	mov	r1, r6
   13d44:	mov	r2, r8
   13d48:	mov	r3, r9
   13d4c:	bl	13ed4 <__assert_fail@plt+0x24a8>
   13d50:	cmp	r0, #0
   13d54:	beq	13d9c <__assert_fail@plt+0x2370>
   13d58:	cmp	r5, #0
   13d5c:	beq	13dc8 <__assert_fail@plt+0x239c>
   13d60:	ldrd	r0, [r4]
   13d64:	orrs	r0, r0, r1
   13d68:	strdeq	r8, [sl]
   13d6c:	streq	r7, [r4]
   13d70:	streq	r6, [r4, #4]
   13d74:	subeq	sp, fp, #28
   13d78:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d7c:	movw	r0, #60695	; 0xed17
   13d80:	movw	r1, #60384	; 0xebe0
   13d84:	movw	r3, #60719	; 0xed2f
   13d88:	movw	r2, #558	; 0x22e
   13d8c:	movt	r0, #1
   13d90:	movt	r1, #1
   13d94:	movt	r3, #1
   13d98:	bl	11a2c <__assert_fail@plt>
   13d9c:	cmp	r5, #0
   13da0:	beq	13e24 <__assert_fail@plt+0x23f8>
   13da4:	mov	r0, #1
   13da8:	mov	r1, r6
   13dac:	mov	r2, r8
   13db0:	mov	r3, r9
   13db4:	stm	sp, {r0, sl}
   13db8:	mov	r0, r7
   13dbc:	bl	15a24 <__assert_fail@plt+0x3ff8>
   13dc0:	sub	sp, fp, #28
   13dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc8:	ldrb	r0, [sl, #250]	; 0xfa
   13dcc:	sub	r1, r0, #1
   13dd0:	cmp	r0, #0
   13dd4:	beq	13eac <__assert_fail@plt+0x2480>
   13dd8:	mov	r2, #8
   13ddc:	add	r7, r0, #223	; 0xdf
   13de0:	add	r3, r2, r0, lsl #3
   13de4:	mov	r6, sl
   13de8:	ldr	r2, [r6, r3]!
   13dec:	ldr	r6, [r6, #4]
   13df0:	subs	r5, r8, r2
   13df4:	sbcs	r5, r9, r6
   13df8:	bcs	13e40 <__assert_fail@plt+0x2414>
   13dfc:	sub	r2, r7, #1
   13e00:	sub	r7, r7, #224	; 0xe0
   13e04:	sub	r3, r3, #8
   13e08:	cmp	r7, #0
   13e0c:	mov	r7, r2
   13e10:	bgt	13de4 <__assert_fail@plt+0x23b8>
   13e14:	sub	r2, r2, #224	; 0xe0
   13e18:	cmp	r1, r2
   13e1c:	bgt	13e70 <__assert_fail@plt+0x2444>
   13e20:	b	13ea8 <__assert_fail@plt+0x247c>
   13e24:	mov	r0, r8
   13e28:	mov	r1, r9
   13e2c:	mov	r2, #1
   13e30:	mov	r3, sl
   13e34:	sub	sp, fp, #28
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e3c:	b	14cfc <__assert_fail@plt+0x32d0>
   13e40:	eor	r2, r2, r8
   13e44:	eor	r3, r6, r9
   13e48:	orrs	r2, r2, r3
   13e4c:	bne	13e64 <__assert_fail@plt+0x2438>
   13e50:	ldrb	r0, [sl, r7]
   13e54:	add	r0, r0, #1
   13e58:	strb	r0, [sl, r7]
   13e5c:	sub	sp, fp, #28
   13e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e64:	sub	r2, r7, #224	; 0xe0
   13e68:	cmp	r1, r2
   13e6c:	ble	13ea8 <__assert_fail@plt+0x247c>
   13e70:	lsl	r1, r0, #3
   13e74:	add	r3, r0, #223	; 0xdf
   13e78:	add	r7, sl, r1
   13e7c:	sub	r1, r1, #8
   13e80:	ldrd	r4, [r7, #8]
   13e84:	strd	r4, [r7, #16]
   13e88:	mov	r7, sl
   13e8c:	ldrb	r6, [r7, r3]!
   13e90:	strb	r6, [r7, #1]
   13e94:	sub	r7, r3, #1
   13e98:	sub	r3, r3, #225	; 0xe1
   13e9c:	cmp	r3, r2
   13ea0:	mov	r3, r7
   13ea4:	bgt	13e78 <__assert_fail@plt+0x244c>
   13ea8:	mov	r1, r2
   13eac:	add	r1, r1, #1
   13eb0:	add	r0, r0, #1
   13eb4:	add	r2, sl, r1, lsl #3
   13eb8:	add	r1, sl, r1
   13ebc:	strd	r8, [r2, #16]
   13ec0:	mov	r2, #1
   13ec4:	strb	r2, [r1, #224]	; 0xe0
   13ec8:	strb	r0, [sl, #250]	; 0xfa
   13ecc:	sub	sp, fp, #28
   13ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed8:	add	fp, sp, #28
   13edc:	sub	sp, sp, #540	; 0x21c
   13ee0:	rsbs	r5, r0, #0
   13ee4:	mov	r8, r2
   13ee8:	mov	sl, r1
   13eec:	str	r3, [sp, #204]	; 0xcc
   13ef0:	rsc	r6, r1, #0
   13ef4:	orrs	r1, r0, r1
   13ef8:	beq	13ffc <__assert_fail@plt+0x25d0>
   13efc:	ldr	r7, [sp, #204]	; 0xcc
   13f00:	subs	lr, r0, #1
   13f04:	str	r0, [sp, #184]	; 0xb8
   13f08:	str	r6, [sp, #164]	; 0xa4
   13f0c:	str	r5, [sp, #160]	; 0xa0
   13f10:	sbc	r2, sl, #0
   13f14:	orr	r1, r8, r7
   13f18:	cmp	r1, #0
   13f1c:	movne	r2, sl
   13f20:	movne	lr, r0
   13f24:	subs	r3, r8, #1
   13f28:	str	r2, [sp, #116]	; 0x74
   13f2c:	sbc	r2, r7, #0
   13f30:	str	lr, [sp, #112]	; 0x70
   13f34:	str	r3, [sp, #120]	; 0x78
   13f38:	mov	r1, r2
   13f3c:	orrs	r1, r3, r2
   13f40:	str	r2, [sp, #124]	; 0x7c
   13f44:	beq	14010 <__assert_fail@plt+0x25e4>
   13f48:	mov	r6, #0
   13f4c:	tst	r3, #1
   13f50:	bne	13f78 <__assert_fail@plt+0x254c>
   13f54:	ldr	r1, [sp, #124]	; 0x7c
   13f58:	mov	r6, #0
   13f5c:	mov	r0, r3
   13f60:	lsrs	r1, r1, #1
   13f64:	rrx	r2, r0
   13f68:	tst	r0, #2
   13f6c:	add	r6, r6, #1
   13f70:	mov	r0, r2
   13f74:	beq	13f60 <__assert_fail@plt+0x2534>
   13f78:	ldr	r4, [sp, #116]	; 0x74
   13f7c:	subs	ip, r6, #32
   13f80:	rsb	r2, r6, #32
   13f84:	ldr	r1, [sp, #124]	; 0x7c
   13f88:	str	r6, [sp, #56]	; 0x38
   13f8c:	lsr	r0, r4, r6
   13f90:	movwpl	r0, #0
   13f94:	cmp	ip, #0
   13f98:	str	r0, [fp, #-44]	; 0xffffffd4
   13f9c:	lsr	r0, lr, r6
   13fa0:	orr	r0, r0, r4, lsl r2
   13fa4:	lsrpl	r0, r4, ip
   13fa8:	str	r0, [fp, #-48]	; 0xffffffd0
   13fac:	lsr	r0, r3, r6
   13fb0:	rsb	r3, r6, #64	; 0x40
   13fb4:	orr	r0, r0, r1, lsl r2
   13fb8:	lsrpl	r0, r1, ip
   13fbc:	cmp	r2, #0
   13fc0:	lsl	r7, lr, r3
   13fc4:	movwpl	r7, #0
   13fc8:	cmp	r2, #0
   13fcc:	orr	r0, r7, r0
   13fd0:	str	r0, [fp, #-56]	; 0xffffffc8
   13fd4:	rsb	r0, r3, #32
   13fd8:	lsr	r0, lr, r0
   13fdc:	orr	r0, r0, r4, lsl r3
   13fe0:	lslpl	r0, lr, r2
   13fe4:	cmp	ip, #0
   13fe8:	lsr	r2, r1, r6
   13fec:	movwpl	r2, #0
   13ff0:	orr	r0, r0, r2
   13ff4:	str	r0, [fp, #-52]	; 0xffffffcc
   13ff8:	b	14080 <__assert_fail@plt+0x2654>
   13ffc:	ldr	r1, [sp, #204]	; 0xcc
   14000:	mov	r0, r8
   14004:	bl	169f8 <__assert_fail@plt+0x4fcc>
   14008:	sub	sp, fp, #28
   1400c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14010:	mov	r1, #0
   14014:	tst	lr, #1
   14018:	mov	r0, #0
   1401c:	bne	14044 <__assert_fail@plt+0x2618>
   14020:	ldr	r3, [sp, #116]	; 0x74
   14024:	mov	r0, #0
   14028:	mov	r2, lr
   1402c:	lsrs	r3, r3, #1
   14030:	rrx	r7, r2
   14034:	tst	r2, #2
   14038:	add	r0, r0, #1
   1403c:	mov	r2, r7
   14040:	beq	1402c <__assert_fail@plt+0x2600>
   14044:	ldr	r7, [sp, #116]	; 0x74
   14048:	subs	r2, r0, #32
   1404c:	str	r1, [fp, #-44]	; 0xffffffd4
   14050:	str	r1, [fp, #-48]	; 0xffffffd0
   14054:	rsb	r3, r0, #32
   14058:	lsr	r1, r7, r0
   1405c:	movwpl	r1, #0
   14060:	cmp	r2, #0
   14064:	str	r1, [fp, #-52]	; 0xffffffcc
   14068:	lsr	r1, lr, r0
   1406c:	add	r0, r0, #64	; 0x40
   14070:	orr	r1, r1, r7, lsl r3
   14074:	lsrpl	r1, r7, r2
   14078:	str	r0, [sp, #56]	; 0x38
   1407c:	str	r1, [fp, #-56]	; 0xffffffc8
   14080:	movw	r1, #7870	; 0x1ebe
   14084:	ubfx	r0, r8, #1, #7
   14088:	ldr	r5, [sp, #204]	; 0xcc
   1408c:	movt	r1, #2
   14090:	ldrb	r0, [r1, r0]
   14094:	umull	r1, r2, r0, r8
   14098:	mla	r2, r0, r5, r2
   1409c:	rsbs	r1, r1, #2
   140a0:	umull	r1, r7, r1, r0
   140a4:	rsc	r3, r2, #0
   140a8:	mla	r0, r3, r0, r7
   140ac:	umull	r2, r6, r1, r8
   140b0:	mla	r3, r1, r5, r6
   140b4:	ldr	r6, [sp, #204]	; 0xcc
   140b8:	mla	r3, r0, r8, r3
   140bc:	rsbs	r4, r2, #2
   140c0:	umull	r9, lr, r1, r4
   140c4:	rsc	r3, r3, #0
   140c8:	mla	r1, r1, r3, lr
   140cc:	umull	ip, r2, r9, r8
   140d0:	str	r9, [sp, #192]	; 0xc0
   140d4:	mla	r2, r9, r5, r2
   140d8:	mla	r9, r0, r4, r1
   140dc:	mov	r4, #0
   140e0:	mov	r5, #0
   140e4:	rsbs	r1, ip, #2
   140e8:	mla	r0, r9, r8, r2
   140ec:	ldr	r2, [sp, #184]	; 0xb8
   140f0:	str	r1, [sp, #188]	; 0xbc
   140f4:	rsc	r0, r0, #0
   140f8:	rsbs	r1, r2, #1
   140fc:	str	r0, [sp, #172]	; 0xac
   14100:	mov	r0, #0
   14104:	rscs	r1, sl, #0
   14108:	mov	r1, #127	; 0x7f
   1410c:	movwcc	r4, #1
   14110:	cmp	r4, #0
   14114:	movwne	r1, #63	; 0x3f
   14118:	subs	r7, r2, #2
   1411c:	mov	r2, #0
   14120:	sbcs	r7, sl, #0
   14124:	str	r2, [sp, #196]	; 0xc4
   14128:	mov	r2, #0
   1412c:	movwcc	r5, #1
   14130:	str	r2, [sp, #200]	; 0xc8
   14134:	b	14180 <__assert_fail@plt+0x2754>
   14138:	subs	r1, r4, r2
   1413c:	sbc	r4, r3, sl
   14140:	subs	r2, r1, #1
   14144:	sbc	r3, r4, #0
   14148:	subs	r5, r5, r8
   1414c:	sbcs	r0, r0, r6
   14150:	str	r0, [sp, #200]	; 0xc8
   14154:	mov	r0, #0
   14158:	movwcc	r0, #1
   1415c:	cmp	r0, #0
   14160:	moveq	r2, r1
   14164:	moveq	r3, r4
   14168:	mov	r4, r2
   1416c:	str	r3, [sp, #196]	; 0xc4
   14170:	subs	r1, r7, #1
   14174:	sbc	r0, lr, #0
   14178:	orrs	r7, r7, lr
   1417c:	beq	1421c <__assert_fail@plt+0x27f0>
   14180:	mov	r7, r1
   14184:	ldr	r1, [sp, #196]	; 0xc4
   14188:	ldr	r2, [sp, #200]	; 0xc8
   1418c:	mov	lr, r0
   14190:	lsl	r1, r1, #1
   14194:	lsl	r0, r2, #1
   14198:	orr	r3, r1, r4, lsr #31
   1419c:	lsl	r1, r4, #1
   141a0:	orr	r0, r0, r5, lsr #31
   141a4:	lsl	r5, r5, #1
   141a8:	orr	r4, r1, r2, lsr #31
   141ac:	ldr	r2, [sp, #184]	; 0xb8
   141b0:	subs	r1, r2, r4
   141b4:	sbcs	r1, sl, r3
   141b8:	bcc	14138 <__assert_fail@plt+0x270c>
   141bc:	subs	r1, r5, r8
   141c0:	ldr	r1, [sp, #204]	; 0xcc
   141c4:	str	r3, [sp, #196]	; 0xc4
   141c8:	sbcs	r1, r0, r1
   141cc:	bcc	14208 <__assert_fail@plt+0x27dc>
   141d0:	ldr	r2, [sp, #184]	; 0xb8
   141d4:	ldr	r3, [sp, #196]	; 0xc4
   141d8:	mov	ip, r4
   141dc:	eor	r1, r4, r2
   141e0:	eor	r4, r3, sl
   141e4:	orrs	r1, r1, r4
   141e8:	mov	r4, ip
   141ec:	beq	14138 <__assert_fail@plt+0x270c>
   141f0:	str	r0, [sp, #200]	; 0xc8
   141f4:	subs	r1, r7, #1
   141f8:	sbc	r0, lr, #0
   141fc:	orrs	r7, r7, lr
   14200:	bne	14180 <__assert_fail@plt+0x2754>
   14204:	b	1421c <__assert_fail@plt+0x27f0>
   14208:	str	r0, [sp, #200]	; 0xc8
   1420c:	subs	r1, r7, #1
   14210:	sbc	r0, lr, #0
   14214:	orrs	r7, r7, lr
   14218:	bne	14180 <__assert_fail@plt+0x2754>
   1421c:	ldr	r6, [sp, #200]	; 0xc8
   14220:	mov	r2, r4
   14224:	rsbs	r7, r5, r5, lsl #1
   14228:	lsl	r1, r5, #1
   1422c:	str	r5, [sp, #180]	; 0xb4
   14230:	mov	r3, sl
   14234:	ldr	sl, [sp, #184]	; 0xb8
   14238:	mov	lr, #0
   1423c:	str	r2, [sp, #132]	; 0x84
   14240:	str	r1, [fp, #-72]	; 0xffffffb8
   14244:	lsl	r0, r6, #1
   14248:	orr	r4, r0, r5, lsr #31
   1424c:	ldr	r0, [sp, #196]	; 0xc4
   14250:	ldr	r5, [sp, #192]	; 0xc0
   14254:	sbcs	r7, r4, r6
   14258:	mov	r7, #0
   1425c:	str	r4, [fp, #-68]	; 0xffffffbc
   14260:	movwcc	r7, #1
   14264:	orr	ip, r7, r2, lsl #1
   14268:	ldr	r7, [sp, #188]	; 0xbc
   1426c:	lsl	r0, r0, #1
   14270:	str	r3, [sp, #188]	; 0xbc
   14274:	orr	r0, r0, r2, lsr #31
   14278:	str	ip, [fp, #-64]	; 0xffffffc0
   1427c:	str	r0, [fp, #-60]	; 0xffffffc4
   14280:	umull	r2, r6, r5, r7
   14284:	str	r2, [sp, #176]	; 0xb0
   14288:	ldr	r2, [sp, #172]	; 0xac
   1428c:	mla	r2, r5, r2, r6
   14290:	mla	r2, r9, r7, r2
   14294:	str	r2, [sp, #172]	; 0xac
   14298:	sub	r2, fp, #72	; 0x48
   1429c:	add	r2, r2, #8
   142a0:	str	r2, [sp, #68]	; 0x44
   142a4:	subs	r2, sl, ip
   142a8:	sbcs	r2, r3, r0
   142ac:	bcc	142d4 <__assert_fail@plt+0x28a8>
   142b0:	subs	r2, r1, r8
   142b4:	ldr	r2, [sp, #204]	; 0xcc
   142b8:	sbcs	r2, r4, r2
   142bc:	bcc	14318 <__assert_fail@plt+0x28ec>
   142c0:	ldr	r3, [sp, #188]	; 0xbc
   142c4:	eor	r2, ip, sl
   142c8:	eor	r3, r0, r3
   142cc:	orrs	r2, r2, r3
   142d0:	bne	14318 <__assert_fail@plt+0x28ec>
   142d4:	ldr	r6, [sp, #160]	; 0xa0
   142d8:	ldr	r5, [sp, #164]	; 0xa4
   142dc:	subs	r2, r6, #1
   142e0:	sbc	r3, r5, #0
   142e4:	subs	r1, r1, r8
   142e8:	str	r1, [fp, #-72]	; 0xffffffb8
   142ec:	ldr	r1, [sp, #204]	; 0xcc
   142f0:	sbcs	r1, r4, r1
   142f4:	movwcc	lr, #1
   142f8:	str	r1, [fp, #-68]	; 0xffffffbc
   142fc:	cmp	lr, #0
   14300:	moveq	r2, r6
   14304:	moveq	r3, r5
   14308:	adds	r2, r2, ip
   1430c:	adc	r3, r3, r0
   14310:	ldr	r0, [sp, #68]	; 0x44
   14314:	strd	r2, [r0]
   14318:	ldr	r4, [sp, #132]	; 0x84
   1431c:	ldr	r6, [sp, #196]	; 0xc4
   14320:	ldr	r0, [sp, #204]	; 0xcc
   14324:	str	r8, [sp]
   14328:	ldr	r5, [sp, #180]	; 0xb4
   1432c:	ldr	r7, [sp, #200]	; 0xc8
   14330:	sub	r1, fp, #72	; 0x48
   14334:	sub	r2, fp, #56	; 0x38
   14338:	str	r4, [sp, #32]
   1433c:	str	r6, [sp, #36]	; 0x24
   14340:	stmib	sp, {r0, sl}
   14344:	ldr	r0, [sp, #188]	; 0xbc
   14348:	str	r5, [sp, #24]
   1434c:	str	r7, [sp, #28]
   14350:	str	r0, [sp, #12]
   14354:	ldr	r0, [sp, #176]	; 0xb0
   14358:	str	r0, [sp, #16]
   1435c:	ldr	r0, [sp, #172]	; 0xac
   14360:	str	r0, [sp, #20]
   14364:	add	r0, sp, #240	; 0xf0
   14368:	bl	178d0 <__assert_fail@plt+0x5ea4>
   1436c:	eor	r2, r1, r7
   14370:	eor	r3, r0, r5
   14374:	orrs	r2, r3, r2
   14378:	ldr	r2, [sp, #240]	; 0xf0
   1437c:	ldr	r3, [sp, #244]	; 0xf4
   14380:	bne	143cc <__assert_fail@plt+0x29a0>
   14384:	ldr	r6, [sp, #196]	; 0xc4
   14388:	eor	r7, r2, r4
   1438c:	eor	r6, r3, r6
   14390:	orrs	r7, r7, r6
   14394:	ldr	r6, [sp, #196]	; 0xc4
   14398:	bne	143cc <__assert_fail@plt+0x29a0>
   1439c:	subs	r0, sl, r4
   143a0:	ldr	r1, [sp, #200]	; 0xc8
   143a4:	ldr	r4, [sp, #112]	; 0x70
   143a8:	str	r0, [sp, #164]	; 0xa4
   143ac:	ldr	r0, [sp, #188]	; 0xbc
   143b0:	sbc	r0, r0, r6
   143b4:	subs	r9, r8, r5
   143b8:	str	r0, [sp, #192]	; 0xc0
   143bc:	ldr	r0, [sp, #204]	; 0xcc
   143c0:	sbc	r0, r0, r1
   143c4:	str	r0, [sp, #92]	; 0x5c
   143c8:	b	14508 <__assert_fail@plt+0x2adc>
   143cc:	ldr	r7, [sp, #188]	; 0xbc
   143d0:	subs	lr, sl, r4
   143d4:	ldr	r4, [sp, #204]	; 0xcc
   143d8:	str	lr, [sp, #164]	; 0xa4
   143dc:	sbc	r7, r7, r6
   143e0:	ldr	r6, [sp, #200]	; 0xc8
   143e4:	subs	sl, lr, #1
   143e8:	sbc	ip, r7, #0
   143ec:	subs	r9, r8, r5
   143f0:	str	r7, [sp, #192]	; 0xc0
   143f4:	mov	r7, #0
   143f8:	sbcs	r6, r4, r6
   143fc:	ldr	r4, [sp, #112]	; 0x70
   14400:	movwcc	r7, #1
   14404:	str	r6, [sp, #92]	; 0x5c
   14408:	eor	r6, r1, r6
   1440c:	cmp	r7, #0
   14410:	ldr	r7, [sp, #192]	; 0xc0
   14414:	moveq	sl, lr
   14418:	moveq	ip, r7
   1441c:	eor	r7, r0, r9
   14420:	orrs	r7, r7, r6
   14424:	eoreq	r7, r2, sl
   14428:	eoreq	r6, r3, ip
   1442c:	orrseq	r7, r7, r6
   14430:	beq	14504 <__assert_fail@plt+0x2ad8>
   14434:	ldr	r7, [sp, #56]	; 0x38
   14438:	ldr	r5, [sp, #188]	; 0xbc
   1443c:	str	ip, [sp, #160]	; 0xa0
   14440:	cmp	r7, #2
   14444:	bcc	14cbc <__assert_fail@plt+0x3290>
   14448:	ldr	r7, [sp, #56]	; 0x38
   1444c:	sub	r4, r7, #1
   14450:	b	1445c <__assert_fail@plt+0x2a30>
   14454:	subs	r4, r4, #1
   14458:	beq	14cbc <__assert_fail@plt+0x3290>
   1445c:	ldr	r7, [sp, #204]	; 0xcc
   14460:	str	r8, [sp, #32]
   14464:	str	r7, [sp, #36]	; 0x24
   14468:	ldr	r7, [sp, #176]	; 0xb0
   1446c:	str	r7, [sp, #40]	; 0x28
   14470:	ldr	r7, [sp, #172]	; 0xac
   14474:	str	r7, [sp, #44]	; 0x2c
   14478:	stm	sp, {r0, r1, r2, r3}
   1447c:	str	r0, [sp, #16]
   14480:	ldr	r0, [sp, #184]	; 0xb8
   14484:	str	r1, [sp, #20]
   14488:	str	r5, [sp, #28]
   1448c:	str	r0, [sp, #24]
   14490:	add	r0, sp, #240	; 0xf0
   14494:	bl	17b7c <__assert_fail@plt+0x6150>
   14498:	ldr	r2, [sp, #92]	; 0x5c
   1449c:	eor	r3, r0, r9
   144a0:	eor	r2, r1, r2
   144a4:	orrs	r2, r3, r2
   144a8:	ldr	r2, [sp, #240]	; 0xf0
   144ac:	ldr	r3, [sp, #244]	; 0xf4
   144b0:	bne	144c8 <__assert_fail@plt+0x2a9c>
   144b4:	ldr	r6, [sp, #160]	; 0xa0
   144b8:	eor	r7, r2, sl
   144bc:	eor	r6, r3, r6
   144c0:	orrs	r7, r7, r6
   144c4:	beq	14500 <__assert_fail@plt+0x2ad4>
   144c8:	ldr	r7, [sp, #180]	; 0xb4
   144cc:	ldr	r6, [sp, #200]	; 0xc8
   144d0:	ldr	r5, [sp, #188]	; 0xbc
   144d4:	eor	r7, r0, r7
   144d8:	eor	r6, r1, r6
   144dc:	orrs	r7, r7, r6
   144e0:	bne	14454 <__assert_fail@plt+0x2a28>
   144e4:	ldr	r7, [sp, #132]	; 0x84
   144e8:	ldr	r6, [sp, #196]	; 0xc4
   144ec:	eor	r7, r2, r7
   144f0:	eor	r6, r3, r6
   144f4:	orrs	r7, r7, r6
   144f8:	bne	14454 <__assert_fail@plt+0x2a28>
   144fc:	b	14cbc <__assert_fail@plt+0x3290>
   14500:	ldr	r4, [sp, #112]	; 0x70
   14504:	ldr	r5, [sp, #180]	; 0xb4
   14508:	ldr	sl, [sp, #116]	; 0x74
   1450c:	ldr	r7, [sp, #124]	; 0x7c
   14510:	ldr	r2, [sp, #120]	; 0x78
   14514:	add	r0, sp, #240	; 0xf0
   14518:	str	r0, [sp]
   1451c:	mov	r0, r4
   14520:	mov	r1, sl
   14524:	mov	r3, r7
   14528:	bl	129d8 <__assert_fail@plt+0xfac>
   1452c:	ldr	r3, [sp, #164]	; 0xa4
   14530:	ldr	r6, [sp, #192]	; 0xc0
   14534:	str	r8, [sp, #168]	; 0xa8
   14538:	str	r9, [sp, #60]	; 0x3c
   1453c:	subs	r1, r3, #1
   14540:	sbc	r2, r6, #0
   14544:	subs	r0, r8, r5
   14548:	ldr	r0, [sp, #204]	; 0xcc
   1454c:	ldr	r5, [sp, #200]	; 0xc8
   14550:	sbcs	r0, r0, r5
   14554:	mov	r0, #0
   14558:	movwcc	r0, #1
   1455c:	cmp	r0, #0
   14560:	moveq	r2, r6
   14564:	moveq	r1, r3
   14568:	lsrs	r0, sl, #1
   1456c:	str	r1, [sp, #76]	; 0x4c
   14570:	ldr	r1, [sp, #120]	; 0x78
   14574:	str	r2, [sp, #72]	; 0x48
   14578:	str	r0, [sp, #108]	; 0x6c
   1457c:	rrx	r0, r4
   14580:	str	r0, [sp, #104]	; 0x68
   14584:	lsrs	r0, r7, #1
   14588:	orr	r0, r0, r4, lsl #31
   1458c:	rrx	r1, r1
   14590:	str	r1, [sp, #100]	; 0x64
   14594:	add	r1, sp, #240	; 0xf0
   14598:	str	r0, [sp, #96]	; 0x60
   1459c:	ldr	r0, [sp, #56]	; 0x38
   145a0:	sub	r0, r0, #1
   145a4:	str	r0, [sp, #48]	; 0x30
   145a8:	add	r0, sp, #208	; 0xd0
   145ac:	add	r0, r0, #8
   145b0:	str	r0, [sp, #164]	; 0xa4
   145b4:	add	r0, sp, #224	; 0xe0
   145b8:	add	r0, r0, #8
   145bc:	str	r0, [sp, #160]	; 0xa0
   145c0:	add	r0, r1, #16
   145c4:	str	r0, [sp, #52]	; 0x34
   145c8:	add	r0, r1, #8
   145cc:	str	r0, [sp, #64]	; 0x40
   145d0:	mov	r0, #2
   145d4:	str	r0, [sp, #84]	; 0x54
   145d8:	mov	r0, #0
   145dc:	str	r0, [sp, #80]	; 0x50
   145e0:	mov	r0, #0
   145e4:	str	r0, [sp, #88]	; 0x58
   145e8:	b	14608 <__assert_fail@plt+0x2bdc>
   145ec:	ldr	r0, [sp, #88]	; 0x58
   145f0:	mov	r1, r0
   145f4:	add	r1, r0, #1
   145f8:	cmp	r1, #668	; 0x29c
   145fc:	mov	r0, r1
   14600:	str	r1, [sp, #88]	; 0x58
   14604:	beq	14cd4 <__assert_fail@plt+0x32a8>
   14608:	ldr	r0, [sp, #64]	; 0x40
   1460c:	mov	sl, #1
   14610:	ldrd	r0, [r0]
   14614:	orrs	r0, r0, r1
   14618:	beq	149f0 <__assert_fail@plt+0x2fc4>
   1461c:	ldr	r0, [sp, #240]	; 0xf0
   14620:	movw	r1, #7870	; 0x1ebe
   14624:	ldr	ip, [sp, #244]	; 0xf4
   14628:	movt	r1, #2
   1462c:	ubfx	r2, r0, #1, #7
   14630:	ldr	r4, [sp, #120]	; 0x78
   14634:	str	r8, [sp]
   14638:	ldrb	r2, [r1, r2]
   1463c:	umull	r3, r7, r0, r2
   14640:	mla	r7, ip, r2, r7
   14644:	rsbs	r3, r3, #2
   14648:	umull	r3, r6, r3, r2
   1464c:	rsc	r7, r7, #0
   14650:	mla	r1, r7, r2, r6
   14654:	umull	r7, r6, r3, r0
   14658:	str	r1, [sp, #140]	; 0x8c
   1465c:	mla	r6, r3, ip, r6
   14660:	mla	r6, r1, r0, r6
   14664:	rsbs	r7, r7, #2
   14668:	rsc	r1, r6, #0
   1466c:	str	r1, [sp, #192]	; 0xc0
   14670:	umull	r5, r1, r3, r7
   14674:	str	r1, [sp, #152]	; 0x98
   14678:	umull	r6, r1, r5, r0
   1467c:	rsbs	r9, r6, #2
   14680:	str	r1, [sp, #148]	; 0x94
   14684:	umull	r1, r2, r5, r9
   14688:	str	r2, [sp, #156]	; 0x9c
   1468c:	umull	lr, r2, r1, r4
   14690:	str	r2, [sp, #144]	; 0x90
   14694:	ldr	r2, [sp, #124]	; 0x7c
   14698:	str	lr, [sp, #224]	; 0xe0
   1469c:	ldr	r6, [sp, #144]	; 0x90
   146a0:	mla	lr, r1, r2, r6
   146a4:	ldr	r1, [sp, #148]	; 0x94
   146a8:	ldr	r2, [sp, #192]	; 0xc0
   146ac:	mla	ip, r5, ip, r1
   146b0:	ldr	r1, [sp, #152]	; 0x98
   146b4:	mla	r3, r3, r2, r1
   146b8:	ldr	r1, [sp, #140]	; 0x8c
   146bc:	mla	r2, r1, r7, r3
   146c0:	ldr	r1, [sp, #156]	; 0x9c
   146c4:	mla	r0, r2, r0, ip
   146c8:	rsc	r0, r0, #0
   146cc:	mla	r0, r5, r0, r1
   146d0:	ldr	r1, [sp, #160]	; 0xa0
   146d4:	mla	r0, r2, r9, r0
   146d8:	ldr	r9, [sp, #196]	; 0xc4
   146dc:	add	r2, sp, #224	; 0xe0
   146e0:	mla	r0, r0, r4, lr
   146e4:	ldr	r4, [sp, #200]	; 0xc8
   146e8:	str	r9, [sp, #36]	; 0x24
   146ec:	str	r0, [sp, #228]	; 0xe4
   146f0:	mov	r0, #0
   146f4:	str	r0, [r1]
   146f8:	str	r0, [r1, #4]
   146fc:	ldr	r0, [sp, #132]	; 0x84
   14700:	sub	r1, fp, #72	; 0x48
   14704:	str	r4, [sp, #28]
   14708:	mov	r7, r0
   1470c:	str	r0, [sp, #32]
   14710:	ldr	r0, [sp, #204]	; 0xcc
   14714:	str	r0, [sp, #4]
   14718:	ldr	r0, [sp, #184]	; 0xb8
   1471c:	str	r0, [sp, #8]
   14720:	ldr	r0, [sp, #188]	; 0xbc
   14724:	str	r0, [sp, #12]
   14728:	ldr	r0, [sp, #176]	; 0xb0
   1472c:	str	r0, [sp, #16]
   14730:	ldr	r0, [sp, #172]	; 0xac
   14734:	str	r0, [sp, #20]
   14738:	ldr	r0, [sp, #180]	; 0xb4
   1473c:	str	r0, [sp, #24]
   14740:	ldr	r0, [sp, #164]	; 0xa4
   14744:	bl	178d0 <__assert_fail@plt+0x5ea4>
   14748:	ldr	r2, [sp, #180]	; 0xb4
   1474c:	str	r1, [sp, #212]	; 0xd4
   14750:	str	r0, [sp, #208]	; 0xd0
   14754:	eor	r1, r1, r4
   14758:	eor	r0, r0, r2
   1475c:	orrs	r0, r0, r1
   14760:	bne	1477c <__assert_fail@plt+0x2d50>
   14764:	ldr	r0, [sp, #164]	; 0xa4
   14768:	ldrd	r0, [r0]
   1476c:	eor	r1, r1, r9
   14770:	eor	r0, r0, r7
   14774:	orrs	sl, r0, r1
   14778:	movwne	sl, #1
   1477c:	cmp	sl, #0
   14780:	beq	14a00 <__assert_fail@plt+0x2fd4>
   14784:	ldrb	r0, [sp, #490]	; 0x1ea
   14788:	ldr	lr, [sp, #188]	; 0xbc
   1478c:	cmp	r0, #0
   14790:	beq	14a14 <__assert_fail@plt+0x2fe8>
   14794:	ldr	r4, [sp, #52]	; 0x34
   14798:	mov	r5, #1
   1479c:	ldrd	r0, [r4]
   147a0:	str	r5, [sp, #192]	; 0xc0
   147a4:	eor	r2, r0, #2
   147a8:	orrs	r2, r2, r1
   147ac:	bne	147e0 <__assert_fail@plt+0x2db4>
   147b0:	ldr	r0, [sp, #100]	; 0x64
   147b4:	ldr	r1, [sp, #104]	; 0x68
   147b8:	ldr	r2, [sp, #160]	; 0xa0
   147bc:	ldr	r8, [sp, #200]	; 0xc8
   147c0:	mov	r6, r7
   147c4:	str	r0, [sp, #224]	; 0xe0
   147c8:	ldr	r0, [sp, #96]	; 0x60
   147cc:	str	r0, [sp, #228]	; 0xe4
   147d0:	ldr	r0, [sp, #108]	; 0x6c
   147d4:	str	r1, [r2]
   147d8:	str	r0, [r2, #4]
   147dc:	b	1493c <__assert_fail@plt+0x2f10>
   147e0:	movw	r3, #7870	; 0x1ebe
   147e4:	str	r4, [sp, #152]	; 0x98
   147e8:	ubfx	r2, r0, #1, #7
   147ec:	ldr	sl, [sp, #120]	; 0x78
   147f0:	ldr	r9, [sp, #124]	; 0x7c
   147f4:	movt	r3, #2
   147f8:	ldrb	r2, [r3, r2]
   147fc:	umull	r3, r7, r0, r2
   14800:	mla	r7, r1, r2, r7
   14804:	rsbs	r3, r3, #2
   14808:	umull	r6, r3, r3, r2
   1480c:	rsc	r7, r7, #0
   14810:	mla	r7, r7, r2, r3
   14814:	umull	r2, r3, r6, r0
   14818:	str	r7, [sp, #136]	; 0x88
   1481c:	mla	r3, r6, r1, r3
   14820:	mla	r3, r7, r0, r3
   14824:	rsbs	ip, r2, #2
   14828:	rsc	r3, r3, #0
   1482c:	str	r3, [sp, #148]	; 0x94
   14830:	umull	r3, r7, r6, ip
   14834:	umull	r4, r2, r3, r0
   14838:	str	r7, [sp, #140]	; 0x8c
   1483c:	rsbs	r4, r4, #2
   14840:	umull	r8, r7, r3, r4
   14844:	str	r7, [sp, #144]	; 0x90
   14848:	umull	r7, lr, r8, sl
   1484c:	str	r8, [sp, #128]	; 0x80
   14850:	mla	lr, r8, r9, lr
   14854:	mla	r8, r3, r1, r2
   14858:	ldr	r2, [sp, #140]	; 0x8c
   1485c:	ldr	r9, [sp, #116]	; 0x74
   14860:	str	r7, [sp, #156]	; 0x9c
   14864:	ldr	r7, [sp, #148]	; 0x94
   14868:	mla	r6, r6, r7, r2
   1486c:	ldr	r2, [sp, #136]	; 0x88
   14870:	mla	r2, r2, ip, r6
   14874:	ldr	r6, [sp, #144]	; 0x90
   14878:	mla	r7, r2, r0, r8
   1487c:	rsc	r7, r7, #0
   14880:	mla	r3, r3, r7, r6
   14884:	mla	ip, r2, r4, r3
   14888:	mla	r6, ip, sl, lr
   1488c:	ldr	lr, [sp, #112]	; 0x70
   14890:	subs	r2, lr, r0
   14894:	sbcs	r2, r9, r1
   14898:	bcs	148bc <__assert_fail@plt+0x2e90>
   1489c:	ldr	r0, [sp, #156]	; 0x9c
   148a0:	ldr	r1, [sp, #160]	; 0xa0
   148a4:	str	r6, [sp, #228]	; 0xe4
   148a8:	str	r0, [sp, #224]	; 0xe0
   148ac:	mov	r0, #0
   148b0:	str	r0, [r1]
   148b4:	str	r0, [r1, #4]
   148b8:	b	14928 <__assert_fail@plt+0x2efc>
   148bc:	ldr	r5, [sp, #156]	; 0x9c
   148c0:	umull	r2, r3, r5, r1
   148c4:	umull	r4, r7, r5, r0
   148c8:	umlal	r2, r3, r6, r0
   148cc:	adds	r2, r2, r7
   148d0:	umull	r0, r7, r6, r0
   148d4:	adc	r3, r3, #0
   148d8:	subs	r0, r2, r0
   148dc:	umull	r1, r2, r6, r1
   148e0:	sbcs	r0, r3, r7
   148e4:	mov	r0, #0
   148e8:	ldr	r7, [sp, #128]	; 0x80
   148ec:	movwcc	r0, #1
   148f0:	cmp	r0, #0
   148f4:	addne	r2, r2, #1
   148f8:	subs	r0, lr, r3
   148fc:	sbc	r3, r9, #0
   14900:	subs	r0, r0, r1
   14904:	umull	r4, r1, r0, r7
   14908:	mla	r0, r0, ip, r1
   1490c:	sbc	r1, r3, r2
   14910:	mla	r1, r1, r7, r0
   14914:	ldr	r0, [sp, #160]	; 0xa0
   14918:	str	r4, [r0]
   1491c:	str	r1, [r0, #4]
   14920:	str	r6, [sp, #228]	; 0xe4
   14924:	str	r5, [sp, #224]	; 0xe0
   14928:	ldr	lr, [sp, #188]	; 0xbc
   1492c:	ldr	r6, [sp, #132]	; 0x84
   14930:	ldr	r9, [sp, #196]	; 0xc4
   14934:	ldr	r8, [sp, #200]	; 0xc8
   14938:	ldr	r4, [sp, #152]	; 0x98
   1493c:	ldr	r0, [sp, #168]	; 0xa8
   14940:	ldr	r7, [sp, #164]	; 0xa4
   14944:	ldr	r5, [sp, #180]	; 0xb4
   14948:	sub	r1, fp, #72	; 0x48
   1494c:	add	r2, sp, #224	; 0xe0
   14950:	str	r6, [sp, #32]
   14954:	str	r9, [sp, #36]	; 0x24
   14958:	str	lr, [sp, #12]
   1495c:	str	r8, [sp, #28]
   14960:	str	r0, [sp]
   14964:	ldr	r0, [sp, #204]	; 0xcc
   14968:	str	r5, [sp, #24]
   1496c:	str	r0, [sp, #4]
   14970:	ldr	r0, [sp, #184]	; 0xb8
   14974:	str	r0, [sp, #8]
   14978:	ldr	r0, [sp, #176]	; 0xb0
   1497c:	str	r0, [sp, #16]
   14980:	ldr	r0, [sp, #172]	; 0xac
   14984:	str	r0, [sp, #20]
   14988:	mov	r0, r7
   1498c:	bl	178d0 <__assert_fail@plt+0x5ea4>
   14990:	str	r1, [sp, #212]	; 0xd4
   14994:	str	r0, [sp, #208]	; 0xd0
   14998:	eor	r1, r1, r8
   1499c:	eor	r0, r0, r5
   149a0:	ldrd	r2, [r7]
   149a4:	eor	r3, r3, r9
   149a8:	eor	r2, r2, r6
   149ac:	orr	r1, r1, r3
   149b0:	orr	r0, r0, r2
   149b4:	orrs	r0, r0, r1
   149b8:	mov	sl, r0
   149bc:	movwne	sl, #1
   149c0:	cmp	r0, #0
   149c4:	beq	14a10 <__assert_fail@plt+0x2fe4>
   149c8:	ldr	r2, [sp, #192]	; 0xc0
   149cc:	ldrb	r1, [sp, #490]	; 0x1ea
   149d0:	ldr	lr, [sp, #188]	; 0xbc
   149d4:	mov	r7, r6
   149d8:	add	r4, r4, #8
   149dc:	add	r0, r2, #1
   149e0:	cmp	r2, r1
   149e4:	mov	r5, r0
   149e8:	bcc	1479c <__assert_fail@plt+0x2d70>
   149ec:	b	14a14 <__assert_fail@plt+0x2fe8>
   149f0:	ldr	r7, [sp, #132]	; 0x84
   149f4:	ldr	r9, [sp, #196]	; 0xc4
   149f8:	cmp	sl, #0
   149fc:	bne	14784 <__assert_fail@plt+0x2d58>
   14a00:	ldr	lr, [sp, #188]	; 0xbc
   14a04:	cmp	sl, #0
   14a08:	beq	14a1c <__assert_fail@plt+0x2ff0>
   14a0c:	b	14cc8 <__assert_fail@plt+0x329c>
   14a10:	ldr	lr, [sp, #188]	; 0xbc
   14a14:	cmp	sl, #0
   14a18:	bne	14cc8 <__assert_fail@plt+0x329c>
   14a1c:	ldr	r1, [sp, #88]	; 0x58
   14a20:	movw	r0, #6520	; 0x1978
   14a24:	ldr	r7, [sp, #84]	; 0x54
   14a28:	ldr	r6, [sp, #80]	; 0x50
   14a2c:	ldr	sl, [sp, #184]	; 0xb8
   14a30:	ldr	r8, [sp, #168]	; 0xa8
   14a34:	ldr	r9, [sp, #60]	; 0x3c
   14a38:	mov	r2, #0
   14a3c:	mov	r4, #127	; 0x7f
   14a40:	movt	r0, #2
   14a44:	ldrb	r0, [r0, r1]
   14a48:	adds	r7, r7, r0
   14a4c:	adc	r6, r6, #0
   14a50:	subs	r0, r7, sl
   14a54:	mov	r1, r7
   14a58:	str	r7, [sp, #84]	; 0x54
   14a5c:	sbcs	r0, r6, lr
   14a60:	mov	r0, #0
   14a64:	mov	r5, r6
   14a68:	str	r6, [sp, #80]	; 0x50
   14a6c:	movwcc	r0, #1
   14a70:	cmp	r0, #0
   14a74:	mov	r3, r0
   14a78:	movwne	r4, #63	; 0x3f
   14a7c:	movwne	r5, #0
   14a80:	movwne	r1, #0
   14a84:	movne	r3, r6
   14a88:	movne	r0, r7
   14a8c:	b	14ad0 <__assert_fail@plt+0x30a4>
   14a90:	ldr	r5, [sp, #204]	; 0xcc
   14a94:	subs	r4, r0, sl
   14a98:	sbc	r6, r3, lr
   14a9c:	subs	r0, r4, #1
   14aa0:	sbc	r3, r6, #0
   14aa4:	subs	r1, r1, r8
   14aa8:	sbcs	r5, r2, r5
   14aac:	mov	r2, #0
   14ab0:	movwcc	r2, #1
   14ab4:	cmp	r2, #0
   14ab8:	moveq	r0, r4
   14abc:	moveq	r3, r6
   14ac0:	subs	r4, r7, #1
   14ac4:	sbc	r2, ip, #0
   14ac8:	orrs	r7, r7, ip
   14acc:	beq	14b4c <__assert_fail@plt+0x3120>
   14ad0:	lsl	r3, r3, #1
   14ad4:	mov	ip, r2
   14ad8:	lsl	r2, r5, #1
   14adc:	lsr	r5, r5, #31
   14ae0:	mov	r7, r4
   14ae4:	orr	r3, r3, r0, lsr #31
   14ae8:	orr	r0, r5, r0, lsl #1
   14aec:	orr	r2, r2, r1, lsr #31
   14af0:	lsl	r1, r1, #1
   14af4:	subs	r5, sl, r0
   14af8:	sbcs	r5, lr, r3
   14afc:	bcc	14a90 <__assert_fail@plt+0x3064>
   14b00:	ldr	r4, [sp, #204]	; 0xcc
   14b04:	subs	r5, r1, r8
   14b08:	sbcs	r5, r2, r4
   14b0c:	bcc	14b38 <__assert_fail@plt+0x310c>
   14b10:	eor	r5, r0, sl
   14b14:	eor	r4, r3, lr
   14b18:	orrs	r5, r5, r4
   14b1c:	beq	14a90 <__assert_fail@plt+0x3064>
   14b20:	mov	r5, r2
   14b24:	subs	r4, r7, #1
   14b28:	sbc	r2, ip, #0
   14b2c:	orrs	r7, r7, ip
   14b30:	bne	14ad0 <__assert_fail@plt+0x30a4>
   14b34:	b	14b4c <__assert_fail@plt+0x3120>
   14b38:	mov	r5, r2
   14b3c:	subs	r4, r7, #1
   14b40:	sbc	r2, ip, #0
   14b44:	orrs	r7, r7, ip
   14b48:	bne	14ad0 <__assert_fail@plt+0x30a4>
   14b4c:	ldr	r2, [sp, #68]	; 0x44
   14b50:	str	r8, [sp]
   14b54:	ldr	r4, [sp, #180]	; 0xb4
   14b58:	stm	r2, {r0, r3}
   14b5c:	ldr	r0, [sp, #132]	; 0x84
   14b60:	str	r5, [fp, #-68]	; 0xffffffbc
   14b64:	ldr	r5, [sp, #200]	; 0xc8
   14b68:	str	r1, [fp, #-72]	; 0xffffffb8
   14b6c:	sub	r1, fp, #72	; 0x48
   14b70:	sub	r2, fp, #56	; 0x38
   14b74:	str	r0, [sp, #32]
   14b78:	ldr	r0, [sp, #196]	; 0xc4
   14b7c:	str	r0, [sp, #36]	; 0x24
   14b80:	ldr	r0, [sp, #204]	; 0xcc
   14b84:	stmib	sp, {r0, sl, lr}
   14b88:	ldr	r0, [sp, #176]	; 0xb0
   14b8c:	str	r4, [sp, #24]
   14b90:	str	r5, [sp, #28]
   14b94:	str	r0, [sp, #16]
   14b98:	ldr	r0, [sp, #172]	; 0xac
   14b9c:	str	r0, [sp, #20]
   14ba0:	sub	r0, fp, #40	; 0x28
   14ba4:	bl	178d0 <__assert_fail@plt+0x5ea4>
   14ba8:	eor	r2, r1, r5
   14bac:	eor	r3, r0, r4
   14bb0:	orrs	r2, r3, r2
   14bb4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14bb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14bbc:	bne	14bd8 <__assert_fail@plt+0x31ac>
   14bc0:	ldr	r7, [sp, #132]	; 0x84
   14bc4:	ldr	r6, [sp, #196]	; 0xc4
   14bc8:	eor	r7, r2, r7
   14bcc:	eor	r6, r3, r6
   14bd0:	orrs	r7, r7, r6
   14bd4:	beq	145ec <__assert_fail@plt+0x2bc0>
   14bd8:	ldr	r6, [sp, #92]	; 0x5c
   14bdc:	eor	r7, r0, r9
   14be0:	eor	r6, r1, r6
   14be4:	orrs	r7, r7, r6
   14be8:	bne	14c04 <__assert_fail@plt+0x31d8>
   14bec:	ldr	r7, [sp, #76]	; 0x4c
   14bf0:	ldr	r6, [sp, #72]	; 0x48
   14bf4:	eor	r7, r2, r7
   14bf8:	eor	r6, r3, r6
   14bfc:	orrs	r7, r7, r6
   14c00:	beq	145ec <__assert_fail@plt+0x2bc0>
   14c04:	ldr	r7, [sp, #56]	; 0x38
   14c08:	cmp	r7, #2
   14c0c:	bcc	14cbc <__assert_fail@plt+0x3290>
   14c10:	ldr	r4, [sp, #48]	; 0x30
   14c14:	b	14c20 <__assert_fail@plt+0x31f4>
   14c18:	subs	r4, r4, #1
   14c1c:	beq	14cbc <__assert_fail@plt+0x3290>
   14c20:	ldr	r7, [sp, #204]	; 0xcc
   14c24:	add	ip, sp, #16
   14c28:	str	r8, [sp, #32]
   14c2c:	str	r7, [sp, #36]	; 0x24
   14c30:	ldr	r7, [sp, #176]	; 0xb0
   14c34:	str	r7, [sp, #40]	; 0x28
   14c38:	ldr	r7, [sp, #172]	; 0xac
   14c3c:	str	r7, [sp, #44]	; 0x2c
   14c40:	stm	sp, {r0, r1, r2, r3}
   14c44:	stm	ip, {r0, r1, sl}
   14c48:	ldr	r0, [sp, #188]	; 0xbc
   14c4c:	str	r0, [sp, #28]
   14c50:	sub	r0, fp, #40	; 0x28
   14c54:	bl	17b7c <__assert_fail@plt+0x6150>
   14c58:	ldr	r2, [sp, #92]	; 0x5c
   14c5c:	eor	r3, r0, r9
   14c60:	ldr	r5, [sp, #180]	; 0xb4
   14c64:	eor	r2, r1, r2
   14c68:	orrs	r2, r3, r2
   14c6c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14c70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c74:	bne	14c90 <__assert_fail@plt+0x3264>
   14c78:	ldr	r7, [sp, #76]	; 0x4c
   14c7c:	ldr	r6, [sp, #72]	; 0x48
   14c80:	eor	r7, r2, r7
   14c84:	eor	r6, r3, r6
   14c88:	orrs	r7, r7, r6
   14c8c:	beq	145ec <__assert_fail@plt+0x2bc0>
   14c90:	ldr	r6, [sp, #200]	; 0xc8
   14c94:	eor	r7, r0, r5
   14c98:	eor	r6, r1, r6
   14c9c:	orrs	r7, r7, r6
   14ca0:	bne	14c18 <__assert_fail@plt+0x31ec>
   14ca4:	ldr	r7, [sp, #132]	; 0x84
   14ca8:	ldr	r6, [sp, #196]	; 0xc4
   14cac:	eor	r7, r2, r7
   14cb0:	eor	r6, r3, r6
   14cb4:	orrs	r7, r7, r6
   14cb8:	bne	14c18 <__assert_fail@plt+0x31ec>
   14cbc:	mov	r0, #0
   14cc0:	sub	sp, fp, #28
   14cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cc8:	mov	r0, #1
   14ccc:	sub	sp, fp, #28
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd4:	movw	r1, #60397	; 0xebed
   14cd8:	mov	r0, #0
   14cdc:	mov	r2, #5
   14ce0:	movt	r1, #1
   14ce4:	bl	116fc <dcgettext@plt>
   14ce8:	mov	r2, r0
   14cec:	mov	r0, #0
   14cf0:	mov	r1, #0
   14cf4:	bl	117ec <error@plt>
   14cf8:	bl	11a20 <abort@plt>
   14cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d00:	add	fp, sp, #28
   14d04:	sub	sp, sp, #92	; 0x5c
   14d08:	str	r3, [sp, #16]
   14d0c:	mov	r3, r0
   14d10:	subs	r0, r0, #2
   14d14:	str	r2, [sp, #8]
   14d18:	sbcs	r0, r1, #0
   14d1c:	bcc	158dc <__assert_fail@plt+0x3eb0>
   14d20:	mov	r8, r1
   14d24:	mov	r9, r3
   14d28:	mov	r1, r3
   14d2c:	mov	r3, #0
   14d30:	mvn	r0, #63	; 0x3f
   14d34:	mov	r2, r8
   14d38:	mov	r7, #1
   14d3c:	mov	r6, #0
   14d40:	mov	ip, #0
   14d44:	mov	lr, #0
   14d48:	str	r3, [fp, #-44]	; 0xffffffd4
   14d4c:	mov	r3, #0
   14d50:	str	r3, [fp, #-40]	; 0xffffffd8
   14d54:	b	14d9c <__assert_fail@plt+0x3370>
   14d58:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14d5c:	subs	r3, r7, r1
   14d60:	sbc	r4, r6, r2
   14d64:	subs	r7, r3, #1
   14d68:	sbc	r6, r4, #0
   14d6c:	subs	r5, r5, ip
   14d70:	str	r5, [fp, #-44]	; 0xffffffd4
   14d74:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14d78:	sbcs	r5, r5, lr
   14d7c:	str	r5, [fp, #-40]	; 0xffffffd8
   14d80:	mov	r5, #0
   14d84:	movwcc	r5, #1
   14d88:	cmp	r5, #0
   14d8c:	moveq	r7, r3
   14d90:	moveq	r6, r4
   14d94:	adds	r0, r0, #1
   14d98:	bcs	14de4 <__assert_fail@plt+0x33b8>
   14d9c:	lsrs	r5, lr, #1
   14da0:	rrx	ip, ip
   14da4:	lsrs	r2, r2, #1
   14da8:	orr	lr, r5, r1, lsl #31
   14dac:	rrx	r1, r1
   14db0:	subs	r4, r1, r7
   14db4:	sbcs	r4, r2, r6
   14db8:	bcc	14d58 <__assert_fail@plt+0x332c>
   14dbc:	eor	r4, r7, r1
   14dc0:	eor	r3, r6, r2
   14dc4:	orrs	r3, r4, r3
   14dc8:	bne	14d94 <__assert_fail@plt+0x3368>
   14dcc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14dd0:	subs	r3, r3, ip
   14dd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14dd8:	sbcs	r3, r3, lr
   14ddc:	bcs	14d58 <__assert_fail@plt+0x332c>
   14de0:	b	14d94 <__assert_fail@plt+0x3368>
   14de4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14de8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14dec:	ldr	ip, [sp, #8]
   14df0:	subs	r0, r9, r3
   14df4:	sbc	r1, r8, r2
   14df8:	subs	r0, r3, r0
   14dfc:	sbcs	r1, r2, r1
   14e00:	mov	r2, #0
   14e04:	movwcc	r2, #1
   14e08:	adds	r4, r0, r9
   14e0c:	adc	r3, r1, r8
   14e10:	cmp	r2, #0
   14e14:	moveq	r4, r0
   14e18:	eor	r0, r9, #1
   14e1c:	moveq	r3, r1
   14e20:	orrs	r0, r0, r8
   14e24:	str	r3, [sp, #12]
   14e28:	beq	158fc <__assert_fail@plt+0x3ed0>
   14e2c:	add	r1, ip, #1
   14e30:	mov	r5, r9
   14e34:	mov	r7, #1
   14e38:	mov	r2, r4
   14e3c:	str	r4, [sp, #52]	; 0x34
   14e40:	str	r1, [sp, #4]
   14e44:	ldr	r1, [sp, #12]
   14e48:	mov	r3, r1
   14e4c:	str	r1, [sp, #48]	; 0x30
   14e50:	mov	r1, #1
   14e54:	str	r1, [sp, #20]
   14e58:	subs	r0, ip, r5
   14e5c:	str	r4, [sp, #36]	; 0x24
   14e60:	mov	r4, r8
   14e64:	str	r2, [sp, #60]	; 0x3c
   14e68:	str	r3, [sp, #56]	; 0x38
   14e6c:	rscs	r0, r8, #0
   14e70:	bcs	15a04 <__assert_fail@plt+0x3fd8>
   14e74:	lsrs	r0, r4, #1
   14e78:	movw	r1, #7870	; 0x1ebe
   14e7c:	mov	r8, r7
   14e80:	str	r4, [fp, #-32]	; 0xffffffe0
   14e84:	str	r5, [sp, #40]	; 0x28
   14e88:	movt	r1, #2
   14e8c:	str	r0, [sp, #28]
   14e90:	rrx	r0, r5
   14e94:	str	r0, [sp, #24]
   14e98:	and	r0, r0, #127	; 0x7f
   14e9c:	ldrb	r0, [r1, r0]
   14ea0:	umull	r1, r2, r5, r0
   14ea4:	mla	r2, r4, r0, r2
   14ea8:	rsbs	r1, r1, #2
   14eac:	umull	r1, r3, r1, r0
   14eb0:	rsc	r2, r2, #0
   14eb4:	str	r2, [fp, #-48]	; 0xffffffd0
   14eb8:	umull	r7, sl, r1, r5
   14ebc:	rsbs	r7, r7, #2
   14ec0:	umull	r6, r9, r1, r7
   14ec4:	umull	lr, r2, r6, r5
   14ec8:	str	lr, [fp, #-36]	; 0xffffffdc
   14ecc:	mla	lr, r6, r4, r2
   14ed0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14ed4:	mla	r0, r2, r0, r3
   14ed8:	mla	r3, r1, r4, sl
   14edc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14ee0:	mla	r3, r0, r5, r3
   14ee4:	rsc	r3, r3, #0
   14ee8:	rsbs	r2, r2, #2
   14eec:	mla	r1, r1, r3, r9
   14ef0:	ldr	r9, [sp, #36]	; 0x24
   14ef4:	mla	r0, r0, r7, r1
   14ef8:	umull	r7, r3, r6, r2
   14efc:	mla	r1, r0, r5, lr
   14f00:	ldr	lr, [sp, #12]
   14f04:	str	r7, [sp, #44]	; 0x2c
   14f08:	rsc	r1, r1, #0
   14f0c:	mla	r1, r6, r1, r3
   14f10:	mla	r0, r0, r2, r1
   14f14:	and	r1, r5, #1
   14f18:	str	r1, [sp, #32]
   14f1c:	subs	r1, r5, ip
   14f20:	str	r1, [fp, #-52]	; 0xffffffcc
   14f24:	mov	sl, r0
   14f28:	sbc	r0, r4, #0
   14f2c:	ldr	r4, [sp, #60]	; 0x3c
   14f30:	str	r0, [fp, #-56]	; 0xffffffc8
   14f34:	ldr	r0, [sp, #20]
   14f38:	str	sl, [fp, #-36]	; 0xffffffdc
   14f3c:	str	r0, [sp, #20]
   14f40:	b	14f64 <__assert_fail@plt+0x3538>
   14f44:	ldr	r0, [sp, #60]	; 0x3c
   14f48:	ldr	r1, [sp, #56]	; 0x38
   14f4c:	mov	r9, sl
   14f50:	ldr	sl, [fp, #-36]	; 0xffffffdc
   14f54:	subs	r8, r8, #1
   14f58:	mov	r4, r0
   14f5c:	str	r1, [sp, #56]	; 0x38
   14f60:	beq	15218 <__assert_fail@plt+0x37ec>
   14f64:	umull	r3, r7, r9, r9
   14f68:	ldr	ip, [sp, #44]	; 0x2c
   14f6c:	umull	r0, r1, lr, r9
   14f70:	ldr	r9, [fp, #-32]	; 0xffffffe0
   14f74:	str	r4, [sp, #60]	; 0x3c
   14f78:	str	r8, [fp, #-48]	; 0xffffffd0
   14f7c:	mov	r8, lr
   14f80:	umull	r6, r5, r3, ip
   14f84:	adds	r7, r7, r0, lsl #1
   14f88:	lsl	r2, r1, #1
   14f8c:	orr	r2, r2, r0, lsr #31
   14f90:	mla	r3, r3, sl, r5
   14f94:	ldr	sl, [sp, #40]	; 0x28
   14f98:	mla	r3, r7, ip, r3
   14f9c:	adc	lr, r2, #0
   14fa0:	umull	r5, r4, r6, r9
   14fa4:	umlal	r5, r4, r3, sl
   14fa8:	umull	r6, r2, r6, sl
   14fac:	adds	r2, r5, r2
   14fb0:	umull	r5, r6, r3, sl
   14fb4:	adc	r4, r4, #0
   14fb8:	subs	r2, r2, r5
   14fbc:	umull	r3, r5, r3, r9
   14fc0:	sbcs	r2, r4, r6
   14fc4:	mov	r2, #0
   14fc8:	movwcc	r2, #1
   14fcc:	cmp	r2, #0
   14fd0:	addne	r5, r5, #1
   14fd4:	adds	r2, r3, r4
   14fd8:	adc	r3, r5, #0
   14fdc:	subs	r0, r7, r0
   14fe0:	sbcs	r0, lr, r1
   14fe4:	umull	r1, r4, r8, r8
   14fe8:	mov	r0, #0
   14fec:	mov	r8, sl
   14ff0:	movwcc	r0, #1
   14ff4:	cmp	r0, #0
   14ff8:	addne	r4, r4, #1
   14ffc:	adds	r0, r1, lr
   15000:	adc	r1, r4, #0
   15004:	subs	r0, r0, r2
   15008:	mov	r2, #0
   1500c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15010:	sbcs	r1, r1, r3
   15014:	movwcc	r2, #1
   15018:	adds	r3, r0, sl
   1501c:	adc	r7, r1, r9
   15020:	cmp	r2, #0
   15024:	mov	r2, #0
   15028:	moveq	r3, r0
   1502c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15030:	moveq	r7, r1
   15034:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15038:	subs	r0, r3, r0
   1503c:	sbcs	r1, r7, r1
   15040:	movwcc	r2, #1
   15044:	adds	r3, r0, sl
   15048:	adc	lr, r1, r9
   1504c:	cmp	r2, #0
   15050:	mov	r2, #0
   15054:	moveq	r3, r0
   15058:	ldr	r0, [sp, #52]	; 0x34
   1505c:	moveq	lr, r1
   15060:	ldr	r1, [sp, #48]	; 0x30
   15064:	mov	sl, r3
   15068:	subs	r0, r0, r3
   1506c:	sbcs	r1, r1, lr
   15070:	movwcc	r2, #1
   15074:	adds	r3, r0, r8
   15078:	adc	r7, r1, r9
   1507c:	cmp	r2, #0
   15080:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15084:	moveq	r7, r1
   15088:	moveq	r3, r0
   1508c:	umull	r0, r1, r7, r2
   15090:	umull	r2, r6, r3, r2
   15094:	umlal	r0, r1, r3, r4
   15098:	umull	r3, r5, r3, r4
   1509c:	adds	r0, r0, r6
   150a0:	umull	r7, r6, r7, r4
   150a4:	ldr	r4, [fp, #-36]	; 0xffffffdc
   150a8:	adc	r1, r1, #0
   150ac:	subs	r3, r0, r3
   150b0:	sbcs	r3, r1, r5
   150b4:	mov	r3, #0
   150b8:	movwcc	r3, #1
   150bc:	cmp	r3, #0
   150c0:	addne	r6, r6, #1
   150c4:	adds	r1, r7, r1
   150c8:	adc	r3, r6, #0
   150cc:	umull	r7, r6, r2, ip
   150d0:	mla	r2, r2, r4, r6
   150d4:	mla	r0, r0, ip, r2
   150d8:	mov	ip, r8
   150dc:	umull	r2, r6, r7, r9
   150e0:	umull	r7, r5, r7, r8
   150e4:	umlal	r2, r6, r0, r8
   150e8:	adds	r2, r2, r5
   150ec:	adc	r7, r6, #0
   150f0:	umull	r6, r5, r0, r9
   150f4:	umull	r0, r4, r0, r8
   150f8:	subs	r0, r2, r0
   150fc:	sbcs	r0, r7, r4
   15100:	mov	r0, #0
   15104:	movwcc	r0, #1
   15108:	cmp	r0, #0
   1510c:	addne	r5, r5, #1
   15110:	adds	r0, r6, r7
   15114:	adc	r2, r5, #0
   15118:	subs	r0, r1, r0
   1511c:	sbcs	r1, r3, r2
   15120:	mov	r2, #0
   15124:	movwcc	r2, #1
   15128:	adds	r6, r0, r8
   1512c:	ldr	r8, [fp, #-48]	; 0xffffffd0
   15130:	adc	r4, r1, r9
   15134:	cmp	r2, #0
   15138:	moveq	r6, r0
   1513c:	moveq	r4, r1
   15140:	str	r4, [fp, #-40]	; 0xffffffd8
   15144:	str	r6, [fp, #-44]	; 0xffffffd4
   15148:	and	r0, r8, #31
   1514c:	cmp	r0, #1
   15150:	bne	14f44 <__assert_fail@plt+0x3518>
   15154:	ldr	r0, [sp, #32]
   15158:	mov	r5, r6
   1515c:	mov	r3, r4
   15160:	mov	r1, ip
   15164:	cmp	r0, #0
   15168:	mov	r0, r9
   1516c:	moveq	r5, ip
   15170:	moveq	r3, r9
   15174:	moveq	r1, r6
   15178:	moveq	r0, r4
   1517c:	orr	r2, r5, r3
   15180:	cmp	r2, #0
   15184:	beq	151fc <__assert_fail@plt+0x37d0>
   15188:	lsrs	r2, r0, #1
   1518c:	mov	r9, r8
   15190:	mov	r7, lr
   15194:	rrx	r8, r1
   15198:	str	sl, [sp, #36]	; 0x24
   1519c:	mov	r0, r3
   151a0:	mov	r1, r5
   151a4:	lsrs	r3, r3, #1
   151a8:	rrx	r5, r5
   151ac:	tst	r1, #1
   151b0:	beq	1519c <__assert_fail@plt+0x3770>
   151b4:	subs	r4, r5, r8
   151b8:	sbc	lr, r3, r2
   151bc:	orrs	r3, r4, lr
   151c0:	beq	151e8 <__assert_fail@plt+0x37bc>
   151c4:	eor	r0, r4, lr, asr #31
   151c8:	eor	r1, lr, lr, asr #31
   151cc:	subs	r5, r0, lr, asr #31
   151d0:	and	r0, r4, lr, asr #31
   151d4:	sbc	r3, r1, lr, asr #31
   151d8:	and	r1, lr, lr, asr #31
   151dc:	adds	r8, r0, r8
   151e0:	adc	r2, r1, r2
   151e4:	b	1519c <__assert_fail@plt+0x3770>
   151e8:	mov	r8, r9
   151ec:	ldr	r9, [sp, #36]	; 0x24
   151f0:	orr	r1, r1, #1
   151f4:	mov	lr, r7
   151f8:	b	15200 <__assert_fail@plt+0x37d4>
   151fc:	mov	r9, sl
   15200:	eor	r1, r1, #1
   15204:	orrs	r0, r1, r0
   15208:	mov	r0, r9
   1520c:	mov	r1, lr
   15210:	beq	14f50 <__assert_fail@plt+0x3524>
   15214:	b	1536c <__assert_fail@plt+0x3940>
   15218:	ldr	r5, [sp, #20]
   1521c:	mov	r4, r9
   15220:	str	lr, [sp, #56]	; 0x38
   15224:	str	r9, [sp, #52]	; 0x34
   15228:	str	lr, [sp, #48]	; 0x30
   1522c:	lsl	r0, r5, #1
   15230:	cmp	r5, #0
   15234:	mov	r8, r5
   15238:	beq	14f3c <__assert_fail@plt+0x3510>
   1523c:	ldr	sl, [sp, #40]	; 0x28
   15240:	ldr	ip, [sp, #44]	; 0x2c
   15244:	mov	r4, r9
   15248:	str	r0, [fp, #-48]	; 0xffffffd0
   1524c:	str	r9, [sp, #36]	; 0x24
   15250:	str	lr, [sp, #12]
   15254:	umull	r7, r6, r4, r4
   15258:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1525c:	mov	r9, lr
   15260:	umull	r0, lr, lr, r4
   15264:	umull	r4, r2, r7, ip
   15268:	lsl	r3, lr, #1
   1526c:	adds	r6, r6, r0, lsl #1
   15270:	orr	r3, r3, r0, lsr #31
   15274:	mla	r2, r7, r1, r2
   15278:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1527c:	mla	r2, r6, ip, r2
   15280:	adc	r8, r3, #0
   15284:	umull	r7, r3, r4, r1
   15288:	umull	r4, r1, r4, sl
   1528c:	umlal	r7, r3, r2, sl
   15290:	adds	r1, r7, r1
   15294:	umull	r4, r7, r2, sl
   15298:	adc	r3, r3, #0
   1529c:	subs	r1, r1, r4
   152a0:	sbcs	r1, r3, r7
   152a4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   152a8:	mov	r1, #0
   152ac:	movwcc	r1, #1
   152b0:	cmp	r1, #0
   152b4:	umull	r2, r4, r2, r7
   152b8:	addne	r4, r4, #1
   152bc:	adds	r1, r2, r3
   152c0:	umull	r3, r7, r9, r9
   152c4:	adc	r2, r4, #0
   152c8:	subs	r0, r6, r0
   152cc:	ldr	r6, [fp, #-32]	; 0xffffffe0
   152d0:	sbcs	r0, r8, lr
   152d4:	mov	r0, #0
   152d8:	movwcc	r0, #1
   152dc:	cmp	r0, #0
   152e0:	addne	r7, r7, #1
   152e4:	adds	r0, r3, r8
   152e8:	adc	r3, r7, #0
   152ec:	subs	r0, r0, r1
   152f0:	sbcs	r1, r3, r2
   152f4:	mov	r2, #0
   152f8:	movwcc	r2, #1
   152fc:	adds	r3, r0, sl
   15300:	adc	r7, r1, r6
   15304:	cmp	r2, #0
   15308:	mov	r2, #0
   1530c:	moveq	r3, r0
   15310:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15314:	moveq	r7, r1
   15318:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1531c:	subs	r0, r3, r0
   15320:	sbcs	r1, r7, r1
   15324:	movwcc	r2, #1
   15328:	adds	r4, r0, sl
   1532c:	adc	lr, r1, r6
   15330:	cmp	r2, #0
   15334:	moveq	lr, r1
   15338:	moveq	r4, r0
   1533c:	subs	r5, r5, #1
   15340:	bne	15254 <__assert_fail@plt+0x3828>
   15344:	ldr	r0, [sp, #36]	; 0x24
   15348:	ldr	r8, [sp, #20]
   1534c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   15350:	mov	r9, r4
   15354:	str	lr, [sp, #56]	; 0x38
   15358:	str	r0, [sp, #52]	; 0x34
   1535c:	ldr	r0, [sp, #12]
   15360:	str	r0, [sp, #48]	; 0x30
   15364:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15368:	b	14f3c <__assert_fail@plt+0x3510>
   1536c:	ldr	r0, [sp, #32]
   15370:	str	lr, [sp, #12]
   15374:	cmp	r0, #0
   15378:	bne	15530 <__assert_fail@plt+0x3b04>
   1537c:	ldr	lr, [sp, #56]	; 0x38
   15380:	ldr	r4, [sp, #60]	; 0x3c
   15384:	ldr	ip, [sp, #44]	; 0x2c
   15388:	b	153a0 <__assert_fail@plt+0x3974>
   1538c:	ldr	r4, [sp, #60]	; 0x3c
   15390:	orr	r8, r0, #1
   15394:	eor	r0, r8, #1
   15398:	orrs	r0, r0, r5
   1539c:	bne	156d8 <__assert_fail@plt+0x3cac>
   153a0:	umull	r0, r1, lr, r4
   153a4:	umull	r3, r7, r4, r4
   153a8:	mov	r8, lr
   153ac:	ldr	sl, [sp, #40]	; 0x28
   153b0:	lsl	r2, r1, #1
   153b4:	adds	r7, r7, r0, lsl #1
   153b8:	umull	r6, r5, r3, ip
   153bc:	orr	r2, r2, r0, lsr #31
   153c0:	adc	lr, r2, #0
   153c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   153c8:	mla	r3, r3, r2, r5
   153cc:	mla	r3, r7, ip, r3
   153d0:	ldr	ip, [fp, #-32]	; 0xffffffe0
   153d4:	umull	r5, r4, r6, ip
   153d8:	umull	r6, r2, r6, sl
   153dc:	umlal	r5, r4, r3, sl
   153e0:	adds	r2, r5, r2
   153e4:	umull	r5, r6, r3, sl
   153e8:	adc	r4, r4, #0
   153ec:	subs	r2, r2, r5
   153f0:	umull	r3, r5, r3, ip
   153f4:	sbcs	r2, r4, r6
   153f8:	mov	r2, #0
   153fc:	movwcc	r2, #1
   15400:	cmp	r2, #0
   15404:	addne	r5, r5, #1
   15408:	adds	r2, r3, r4
   1540c:	adc	r3, r5, #0
   15410:	subs	r0, r7, r0
   15414:	sbcs	r0, lr, r1
   15418:	umull	r1, r4, r8, r8
   1541c:	mov	r0, #0
   15420:	movwcc	r0, #1
   15424:	cmp	r0, #0
   15428:	addne	r4, r4, #1
   1542c:	adds	r0, r1, lr
   15430:	adc	r1, r4, #0
   15434:	subs	r0, r0, r2
   15438:	mov	r2, #0
   1543c:	sbcs	r1, r1, r3
   15440:	movwcc	r2, #1
   15444:	adds	r3, r0, sl
   15448:	adc	r7, r1, ip
   1544c:	cmp	r2, #0
   15450:	mov	r2, #0
   15454:	moveq	r3, r0
   15458:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1545c:	moveq	r7, r1
   15460:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15464:	subs	r0, r3, r0
   15468:	sbcs	r1, r7, r1
   1546c:	movwcc	r2, #1
   15470:	adds	r4, r0, sl
   15474:	adc	lr, r1, ip
   15478:	cmp	r2, #0
   1547c:	mov	r2, #0
   15480:	moveq	r4, r0
   15484:	ldr	r0, [sp, #52]	; 0x34
   15488:	moveq	lr, r1
   1548c:	ldr	r1, [sp, #48]	; 0x30
   15490:	subs	r0, r0, r4
   15494:	sbcs	r1, r1, lr
   15498:	movwcc	r2, #1
   1549c:	adds	r8, r0, sl
   154a0:	adc	r5, r1, ip
   154a4:	cmp	r2, #0
   154a8:	moveq	r5, r1
   154ac:	moveq	r8, r0
   154b0:	orrs	r0, sl, ip
   154b4:	beq	1551c <__assert_fail@plt+0x3af0>
   154b8:	mov	r1, ip
   154bc:	ldr	ip, [sp, #44]	; 0x2c
   154c0:	lsrs	r2, r5, #1
   154c4:	str	r4, [sp, #60]	; 0x3c
   154c8:	rrx	r3, r8
   154cc:	mov	r4, sl
   154d0:	mov	r5, r1
   154d4:	mov	r0, r4
   154d8:	lsrs	r1, r1, #1
   154dc:	rrx	r4, r4
   154e0:	tst	r0, #1
   154e4:	beq	154d0 <__assert_fail@plt+0x3aa4>
   154e8:	subs	r7, r4, r3
   154ec:	sbc	r6, r1, r2
   154f0:	orrs	r1, r7, r6
   154f4:	beq	1538c <__assert_fail@plt+0x3960>
   154f8:	eor	r0, r7, r6, asr #31
   154fc:	eor	r1, r6, r6, asr #31
   15500:	subs	r4, r0, r6, asr #31
   15504:	and	r0, r7, r6, asr #31
   15508:	and	r7, r6, r6, asr #31
   1550c:	sbc	r1, r1, r6, asr #31
   15510:	adds	r3, r0, r3
   15514:	adc	r2, r7, r2
   15518:	b	154d0 <__assert_fail@plt+0x3aa4>
   1551c:	ldr	ip, [sp, #44]	; 0x2c
   15520:	eor	r0, r8, #1
   15524:	orrs	r0, r0, r5
   15528:	beq	153a0 <__assert_fail@plt+0x3974>
   1552c:	b	156d8 <__assert_fail@plt+0x3cac>
   15530:	ldr	lr, [sp, #56]	; 0x38
   15534:	ldr	r4, [sp, #60]	; 0x3c
   15538:	ldr	r1, [sp, #44]	; 0x2c
   1553c:	str	r9, [sp, #36]	; 0x24
   15540:	b	15560 <__assert_fail@plt+0x3b34>
   15544:	orr	r8, r4, #1
   15548:	mov	r4, ip
   1554c:	ldr	r1, [sp, #44]	; 0x2c
   15550:	ldr	r9, [sp, #36]	; 0x24
   15554:	eor	r0, r8, #1
   15558:	orrs	r0, r0, r5
   1555c:	bne	156d8 <__assert_fail@plt+0x3cac>
   15560:	umull	r0, r9, lr, r4
   15564:	umull	r3, r7, r4, r4
   15568:	mov	r8, lr
   1556c:	ldr	ip, [fp, #-32]	; 0xffffffe0
   15570:	ldr	sl, [sp, #40]	; 0x28
   15574:	lsl	r2, r9, #1
   15578:	adds	r7, r7, r0, lsl #1
   1557c:	umull	r6, r5, r3, r1
   15580:	orr	r2, r2, r0, lsr #31
   15584:	adc	lr, r2, #0
   15588:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1558c:	mla	r3, r3, r2, r5
   15590:	umull	r5, r4, r6, ip
   15594:	umull	r6, r2, r6, sl
   15598:	mla	r3, r7, r1, r3
   1559c:	umlal	r5, r4, r3, sl
   155a0:	adds	r2, r5, r2
   155a4:	umull	r5, r6, r3, sl
   155a8:	adc	r4, r4, #0
   155ac:	subs	r2, r2, r5
   155b0:	umull	r3, r5, r3, ip
   155b4:	sbcs	r2, r4, r6
   155b8:	mov	r2, #0
   155bc:	movwcc	r2, #1
   155c0:	cmp	r2, #0
   155c4:	addne	r5, r5, #1
   155c8:	adds	r2, r3, r4
   155cc:	umull	r1, r4, r8, r8
   155d0:	mov	r8, sl
   155d4:	adc	r3, r5, #0
   155d8:	subs	r0, r7, r0
   155dc:	mov	r5, ip
   155e0:	sbcs	r0, lr, r9
   155e4:	mov	r0, #0
   155e8:	movwcc	r0, #1
   155ec:	cmp	r0, #0
   155f0:	addne	r4, r4, #1
   155f4:	adds	r0, r1, lr
   155f8:	adc	r1, r4, #0
   155fc:	subs	r0, r0, r2
   15600:	mov	r2, #0
   15604:	sbcs	r1, r1, r3
   15608:	movwcc	r2, #1
   1560c:	adds	r3, r0, sl
   15610:	adc	r7, r1, ip
   15614:	cmp	r2, #0
   15618:	mov	r2, #0
   1561c:	moveq	r3, r0
   15620:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15624:	moveq	r7, r1
   15628:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1562c:	subs	r0, r3, r0
   15630:	sbcs	r1, r7, r1
   15634:	mov	r7, #0
   15638:	movwcc	r2, #1
   1563c:	adds	r4, r0, sl
   15640:	adc	lr, r1, ip
   15644:	cmp	r2, #0
   15648:	moveq	r4, r0
   1564c:	ldr	r0, [sp, #52]	; 0x34
   15650:	moveq	lr, r1
   15654:	ldr	r1, [sp, #48]	; 0x30
   15658:	subs	r0, r0, r4
   1565c:	sbcs	r1, r1, lr
   15660:	movwcc	r7, #1
   15664:	adds	r2, r0, sl
   15668:	adc	r3, r1, ip
   1566c:	cmp	r7, #0
   15670:	moveq	r3, r1
   15674:	moveq	r2, r0
   15678:	orrs	r0, r2, r3
   1567c:	beq	1554c <__assert_fail@plt+0x3b20>
   15680:	ldr	r1, [sp, #24]
   15684:	ldr	r0, [sp, #28]
   15688:	mov	ip, r4
   1568c:	mov	r5, r3
   15690:	mov	r4, r2
   15694:	lsrs	r3, r3, #1
   15698:	rrx	r2, r2
   1569c:	tst	r4, #1
   156a0:	beq	1568c <__assert_fail@plt+0x3c60>
   156a4:	subs	r7, r2, r1
   156a8:	sbc	r6, r3, r0
   156ac:	orrs	r2, r7, r6
   156b0:	beq	15544 <__assert_fail@plt+0x3b18>
   156b4:	eor	r2, r7, r6, asr #31
   156b8:	eor	r3, r6, r6, asr #31
   156bc:	and	r7, r7, r6, asr #31
   156c0:	subs	r2, r2, r6, asr #31
   156c4:	sbc	r3, r3, r6, asr #31
   156c8:	and	r6, r6, r6, asr #31
   156cc:	adds	r1, r7, r1
   156d0:	adc	r0, r6, r0
   156d4:	b	1568c <__assert_fail@plt+0x3c60>
   156d8:	ldr	r3, [sp, #40]	; 0x28
   156dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   156e0:	eor	r0, r3, r8
   156e4:	eor	r2, r1, r5
   156e8:	orrs	r0, r0, r2
   156ec:	beq	158c4 <__assert_fail@plt+0x3e98>
   156f0:	mov	r0, r3
   156f4:	mov	r2, r8
   156f8:	mov	r3, r5
   156fc:	str	r4, [sp, #60]	; 0x3c
   15700:	str	lr, [sp, #56]	; 0x38
   15704:	bl	1e668 <__assert_fail@plt+0xcc3c>
   15708:	mov	sl, r0
   1570c:	str	r1, [fp, #-32]	; 0xffffffe0
   15710:	mov	r0, r8
   15714:	mov	r1, r5
   15718:	bl	169f8 <__assert_fail@plt+0x4fcc>
   1571c:	cmp	r0, #0
   15720:	beq	157f4 <__assert_fail@plt+0x3dc8>
   15724:	ldr	r6, [sp, #16]
   15728:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1572c:	ldrb	lr, [r6, #250]	; 0xfa
   15730:	sub	ip, lr, #1
   15734:	cmp	lr, #0
   15738:	beq	157cc <__assert_fail@plt+0x3da0>
   1573c:	mov	r0, #8
   15740:	add	r2, lr, #223	; 0xdf
   15744:	lsl	r1, lr, #3
   15748:	add	r0, r0, lr, lsl #3
   1574c:	mov	r3, r2
   15750:	ldr	r4, [r6, r0]!
   15754:	ldr	r6, [r6, #4]
   15758:	subs	r7, r8, r4
   1575c:	sbcs	r7, r5, r6
   15760:	bcs	1588c <__assert_fail@plt+0x3e60>
   15764:	ldr	r6, [sp, #16]
   15768:	sub	r4, r3, #1
   1576c:	sub	r3, r3, #224	; 0xe0
   15770:	sub	r0, r0, #8
   15774:	cmp	r3, #0
   15778:	mov	r3, r4
   1577c:	bgt	15750 <__assert_fail@plt+0x3d24>
   15780:	sub	r3, r4, #224	; 0xe0
   15784:	cmp	ip, r3
   15788:	ble	157c4 <__assert_fail@plt+0x3d98>
   1578c:	add	r0, r6, r1
   15790:	sub	r1, r1, #8
   15794:	ldr	r4, [r0, #8]
   15798:	ldr	r7, [r0, #12]
   1579c:	str	r4, [r0, #16]
   157a0:	str	r7, [r0, #20]
   157a4:	mov	r0, r6
   157a8:	ldrb	r7, [r0, r2]!
   157ac:	strb	r7, [r0, #1]
   157b0:	sub	r0, r2, #1
   157b4:	sub	r2, r2, #225	; 0xe1
   157b8:	cmp	r2, r3
   157bc:	mov	r2, r0
   157c0:	bgt	1578c <__assert_fail@plt+0x3d60>
   157c4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   157c8:	mov	ip, r3
   157cc:	add	r0, ip, #1
   157d0:	add	r1, r6, r0, lsl #3
   157d4:	add	r0, r6, r0
   157d8:	str	r8, [r1, #16]
   157dc:	str	r5, [r1, #20]
   157e0:	mov	r1, #1
   157e4:	strb	r1, [r0, #224]	; 0xe0
   157e8:	add	r0, lr, #1
   157ec:	strb	r0, [r6, #250]	; 0xfa
   157f0:	b	15810 <__assert_fail@plt+0x3de4>
   157f4:	ldr	r6, [sp, #16]
   157f8:	ldr	r2, [sp, #4]
   157fc:	mov	r0, r8
   15800:	mov	r1, r5
   15804:	mov	r3, r6
   15808:	bl	14cfc <__assert_fail@plt+0x32d0>
   1580c:	ldr	r7, [fp, #-48]	; 0xffffffd0
   15810:	ldr	r8, [fp, #-32]	; 0xffffffe0
   15814:	mov	r0, sl
   15818:	mov	r5, sl
   1581c:	mov	r1, r8
   15820:	bl	169f8 <__assert_fail@plt+0x4fcc>
   15824:	cmp	r0, #0
   15828:	bne	15904 <__assert_fail@plt+0x3ed8>
   1582c:	ldr	r1, [sp, #12]
   15830:	mov	r0, r9
   15834:	mov	r2, r5
   15838:	mov	r3, r8
   1583c:	bl	1e668 <__assert_fail@plt+0xcc3c>
   15840:	ldr	r0, [sp, #52]	; 0x34
   15844:	ldr	r1, [sp, #48]	; 0x30
   15848:	mov	r4, r2
   1584c:	str	r3, [sp, #12]
   15850:	mov	r2, r5
   15854:	mov	r3, r8
   15858:	bl	1e668 <__assert_fail@plt+0xcc3c>
   1585c:	ldr	r0, [sp, #60]	; 0x3c
   15860:	ldr	r1, [sp, #56]	; 0x38
   15864:	str	r2, [sp, #52]	; 0x34
   15868:	str	r3, [sp, #48]	; 0x30
   1586c:	mov	r2, r5
   15870:	mov	r3, r8
   15874:	bl	1e668 <__assert_fail@plt+0xcc3c>
   15878:	ldr	ip, [sp, #8]
   1587c:	eor	r0, r5, #1
   15880:	orrs	r0, r0, r8
   15884:	bne	14e58 <__assert_fail@plt+0x342c>
   15888:	b	158fc <__assert_fail@plt+0x3ed0>
   1588c:	eor	r0, r4, r8
   15890:	eor	r4, r6, r5
   15894:	orrs	r0, r0, r4
   15898:	bne	158b0 <__assert_fail@plt+0x3e84>
   1589c:	ldr	r6, [sp, #16]
   158a0:	ldrb	r0, [r6, r3]
   158a4:	add	r0, r0, #1
   158a8:	strb	r0, [r6, r3]
   158ac:	b	1580c <__assert_fail@plt+0x3de0>
   158b0:	ldr	r6, [sp, #16]
   158b4:	sub	r3, r3, #224	; 0xe0
   158b8:	cmp	ip, r3
   158bc:	bgt	1578c <__assert_fail@plt+0x3d60>
   158c0:	b	157c4 <__assert_fail@plt+0x3d98>
   158c4:	rsbs	r0, r3, #1
   158c8:	mov	r8, r1
   158cc:	rscs	r0, r1, #0
   158d0:	ldr	r0, [sp, #4]
   158d4:	str	r0, [sp, #8]
   158d8:	bcc	14d24 <__assert_fail@plt+0x32f8>
   158dc:	movw	r0, #60447	; 0xec1f
   158e0:	movw	r1, #60384	; 0xebe0
   158e4:	movw	r3, #60784	; 0xed70
   158e8:	movw	r2, #1466	; 0x5ba
   158ec:	movt	r0, #1
   158f0:	movt	r1, #1
   158f4:	movt	r3, #1
   158f8:	bl	11a2c <__assert_fail@plt>
   158fc:	sub	sp, fp, #28
   15900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15904:	ldrb	r0, [r6, #250]	; 0xfa
   15908:	sub	r1, r0, #1
   1590c:	cmp	r0, #0
   15910:	beq	159d8 <__assert_fail@plt+0x3fac>
   15914:	mov	r2, #8
   15918:	add	r7, r0, #223	; 0xdf
   1591c:	add	r3, r2, r0, lsl #3
   15920:	ldr	r2, [r6, r3]!
   15924:	ldr	r6, [r6, #4]
   15928:	subs	r5, sl, r2
   1592c:	sbcs	r5, r8, r6
   15930:	bcs	15960 <__assert_fail@plt+0x3f34>
   15934:	ldr	r6, [sp, #16]
   15938:	sub	r2, r7, #1
   1593c:	sub	r7, r7, #224	; 0xe0
   15940:	sub	r3, r3, #8
   15944:	cmp	r7, #0
   15948:	mov	r7, r2
   1594c:	bgt	15920 <__assert_fail@plt+0x3ef4>
   15950:	sub	r2, r2, #224	; 0xe0
   15954:	cmp	r1, r2
   15958:	bgt	15998 <__assert_fail@plt+0x3f6c>
   1595c:	b	159d4 <__assert_fail@plt+0x3fa8>
   15960:	eor	r2, r2, sl
   15964:	eor	r3, r6, r8
   15968:	orrs	r2, r2, r3
   1596c:	bne	15988 <__assert_fail@plt+0x3f5c>
   15970:	ldr	r1, [sp, #16]
   15974:	ldrb	r0, [r1, r7]
   15978:	add	r0, r0, #1
   1597c:	strb	r0, [r1, r7]
   15980:	sub	sp, fp, #28
   15984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15988:	ldr	r6, [sp, #16]
   1598c:	sub	r2, r7, #224	; 0xe0
   15990:	cmp	r1, r2
   15994:	ble	159d4 <__assert_fail@plt+0x3fa8>
   15998:	lsl	r1, r0, #3
   1599c:	add	r3, r0, #223	; 0xdf
   159a0:	add	r7, r6, r1
   159a4:	sub	r1, r1, #8
   159a8:	ldrd	r4, [r7, #8]
   159ac:	strd	r4, [r7, #16]
   159b0:	mov	r7, r6
   159b4:	ldrb	r6, [r7, r3]!
   159b8:	strb	r6, [r7, #1]
   159bc:	ldr	r6, [sp, #16]
   159c0:	sub	r7, r3, #1
   159c4:	sub	r3, r3, #225	; 0xe1
   159c8:	cmp	r3, r2
   159cc:	mov	r3, r7
   159d0:	bgt	159a0 <__assert_fail@plt+0x3f74>
   159d4:	mov	r1, r2
   159d8:	add	r1, r1, #1
   159dc:	add	r0, r0, #1
   159e0:	add	r2, r6, r1, lsl #3
   159e4:	add	r1, r6, r1
   159e8:	str	sl, [r2, #16]
   159ec:	str	r8, [r2, #20]
   159f0:	mov	r2, #1
   159f4:	strb	r2, [r1, #224]	; 0xe0
   159f8:	strb	r0, [r6, #250]	; 0xfa
   159fc:	sub	sp, fp, #28
   15a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a04:	movw	r0, #60858	; 0xedba
   15a08:	movw	r1, #60384	; 0xebe0
   15a0c:	movw	r3, #60784	; 0xed70
   15a10:	mov	r2, #1472	; 0x5c0
   15a14:	movt	r0, #1
   15a18:	movt	r1, #1
   15a1c:	movt	r3, #1
   15a20:	bl	11a2c <__assert_fail@plt>
   15a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a28:	add	fp, sp, #28
   15a2c:	sub	sp, sp, #204	; 0xcc
   15a30:	mov	sl, r3
   15a34:	subs	r3, r0, #2
   15a38:	mov	r8, #0
   15a3c:	str	r0, [fp, #-84]	; 0xffffffac
   15a40:	mov	r4, #0
   15a44:	mov	lr, r2
   15a48:	mov	r2, #0
   15a4c:	mov	r5, #0
   15a50:	mov	ip, #0
   15a54:	str	r1, [fp, #-76]	; 0xffffffb4
   15a58:	sbcs	r3, r1, #0
   15a5c:	mov	r3, #127	; 0x7f
   15a60:	movwcc	r8, #1
   15a64:	rsbs	r0, r0, #1
   15a68:	rscs	r0, r1, #0
   15a6c:	movwcc	r4, #1
   15a70:	cmp	r4, #0
   15a74:	movwne	r3, #63	; 0x3f
   15a78:	b	15ab8 <__assert_fail@plt+0x408c>
   15a7c:	subs	r3, r4, r0
   15a80:	sbc	r7, r5, r6
   15a84:	subs	r4, r3, #1
   15a88:	sbc	r5, r7, #0
   15a8c:	subs	r8, r8, lr
   15a90:	sbcs	ip, r2, sl
   15a94:	mov	r2, #0
   15a98:	movwcc	r2, #1
   15a9c:	cmp	r2, #0
   15aa0:	moveq	r4, r3
   15aa4:	moveq	r5, r7
   15aa8:	subs	r3, r1, #1
   15aac:	sbc	r2, r9, #0
   15ab0:	orrs	r0, r1, r9
   15ab4:	beq	15b40 <__assert_fail@plt+0x4114>
   15ab8:	mov	r1, r3
   15abc:	lsl	r3, r5, #1
   15ac0:	ldr	r0, [fp, #-84]	; 0xffffffac
   15ac4:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15ac8:	mov	r9, r2
   15acc:	lsl	r2, ip, #1
   15ad0:	orr	r5, r3, r4, lsr #31
   15ad4:	lsl	r3, r4, #1
   15ad8:	orr	r2, r2, r8, lsr #31
   15adc:	lsl	r8, r8, #1
   15ae0:	orr	r4, r3, ip, lsr #31
   15ae4:	subs	r3, r0, r4
   15ae8:	sbcs	r3, r6, r5
   15aec:	bcc	15a7c <__assert_fail@plt+0x4050>
   15af0:	subs	r3, r8, lr
   15af4:	sbcs	r3, r2, sl
   15af8:	bcc	15b2c <__assert_fail@plt+0x4100>
   15afc:	ldr	r0, [fp, #-84]	; 0xffffffac
   15b00:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15b04:	eor	r3, r4, r0
   15b08:	eor	r7, r5, r6
   15b0c:	orrs	r3, r3, r7
   15b10:	beq	15a7c <__assert_fail@plt+0x4050>
   15b14:	mov	ip, r2
   15b18:	subs	r3, r1, #1
   15b1c:	sbc	r2, r9, #0
   15b20:	orrs	r0, r1, r9
   15b24:	bne	15ab8 <__assert_fail@plt+0x408c>
   15b28:	b	15b40 <__assert_fail@plt+0x4114>
   15b2c:	mov	ip, r2
   15b30:	subs	r3, r1, #1
   15b34:	sbc	r2, r9, #0
   15b38:	orrs	r0, r1, r9
   15b3c:	bne	15ab8 <__assert_fail@plt+0x408c>
   15b40:	lsl	r0, r5, #1
   15b44:	rsbs	r1, r8, r8, lsl #1
   15b48:	ldr	r3, [fp, #-84]	; 0xffffffac
   15b4c:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15b50:	str	sl, [fp, #-108]	; 0xffffff94
   15b54:	lsl	r7, r8, #1
   15b58:	orr	r2, r0, r4, lsr #31
   15b5c:	lsl	r0, ip, #1
   15b60:	orr	r0, r0, r8, lsr #31
   15b64:	str	r2, [fp, #-36]	; 0xffffffdc
   15b68:	sbcs	r1, r0, ip
   15b6c:	mov	r1, #0
   15b70:	movwcc	r1, #1
   15b74:	orr	sl, r1, r4, lsl #1
   15b78:	rsbs	r1, r3, #0
   15b7c:	str	r1, [fp, #-88]	; 0xffffffa8
   15b80:	rsc	r1, r6, #0
   15b84:	subs	r3, r3, sl
   15b88:	str	sl, [fp, #-40]	; 0xffffffd8
   15b8c:	str	r1, [fp, #-80]	; 0xffffffb0
   15b90:	sbcs	r3, r6, r2
   15b94:	bcc	15bc8 <__assert_fail@plt+0x419c>
   15b98:	subs	r3, r7, lr
   15b9c:	ldr	r3, [fp, #-108]	; 0xffffff94
   15ba0:	str	r7, [fp, #-112]	; 0xffffff90
   15ba4:	sbcs	r3, r0, r3
   15ba8:	bcc	15c2c <__assert_fail@plt+0x4200>
   15bac:	ldr	r3, [fp, #-84]	; 0xffffffac
   15bb0:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15bb4:	eor	r3, sl, r3
   15bb8:	eor	r7, r2, r6
   15bbc:	orrs	r3, r3, r7
   15bc0:	ldr	r7, [fp, #-112]	; 0xffffff90
   15bc4:	bne	15c2c <__assert_fail@plt+0x4200>
   15bc8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15bcc:	mov	r9, r0
   15bd0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15bd4:	mov	r6, r7
   15bd8:	subs	r3, r1, #1
   15bdc:	mov	r1, #0
   15be0:	sbc	r7, r0, #0
   15be4:	subs	r6, r6, lr
   15be8:	mov	r0, r9
   15bec:	mov	r9, lr
   15bf0:	str	r6, [fp, #-112]	; 0xffffff90
   15bf4:	ldr	r6, [fp, #-108]	; 0xffffff94
   15bf8:	sbcs	r0, r0, r6
   15bfc:	str	r0, [sp, #116]	; 0x74
   15c00:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15c04:	movwcc	r1, #1
   15c08:	cmp	r1, #0
   15c0c:	moveq	r7, r0
   15c10:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15c14:	moveq	r3, r0
   15c18:	adds	sl, r3, sl
   15c1c:	adc	r2, r7, r2
   15c20:	str	sl, [fp, #-40]	; 0xffffffd8
   15c24:	str	r2, [fp, #-36]	; 0xffffffdc
   15c28:	b	15c38 <__assert_fail@plt+0x420c>
   15c2c:	ldr	r6, [fp, #-108]	; 0xffffff94
   15c30:	str	r0, [sp, #116]	; 0x74
   15c34:	mov	r9, lr
   15c38:	eor	r0, r9, #1
   15c3c:	mov	r3, r6
   15c40:	str	sl, [fp, #-56]	; 0xffffffc8
   15c44:	str	sl, [sp, #80]	; 0x50
   15c48:	str	sl, [fp, #-48]	; 0xffffffd0
   15c4c:	str	r2, [fp, #-52]	; 0xffffffcc
   15c50:	str	r2, [sp, #68]	; 0x44
   15c54:	str	r2, [fp, #-44]	; 0xffffffd4
   15c58:	orrs	r0, r0, r6
   15c5c:	ldreq	r0, [fp, #-76]	; 0xffffffb4
   15c60:	ldreq	r1, [fp, #-84]	; 0xffffffac
   15c64:	orrseq	r0, r1, r0
   15c68:	beq	16880 <__assert_fail@plt+0x4e54>
   15c6c:	ldr	r0, [fp, #8]
   15c70:	ldr	r1, [sp, #80]	; 0x50
   15c74:	str	r8, [sp, #104]	; 0x68
   15c78:	ldr	r9, [fp, #-76]	; 0xffffffb4
   15c7c:	ldr	r8, [fp, #-84]	; 0xffffffac
   15c80:	str	ip, [sp, #92]	; 0x5c
   15c84:	str	r5, [sp, #96]	; 0x60
   15c88:	str	r4, [sp, #100]	; 0x64
   15c8c:	add	r0, r0, #1
   15c90:	str	r1, [sp, #88]	; 0x58
   15c94:	str	r1, [sp, #112]	; 0x70
   15c98:	ldr	r1, [fp, #-112]	; 0xffffff90
   15c9c:	str	r0, [sp, #48]	; 0x30
   15ca0:	ldr	r0, [sp, #68]	; 0x44
   15ca4:	str	r1, [sp, #76]	; 0x4c
   15ca8:	str	r1, [fp, #-104]	; 0xffffff98
   15cac:	str	r0, [sp, #84]	; 0x54
   15cb0:	str	r0, [fp, #-100]	; 0xffffff9c
   15cb4:	ldr	r0, [sp, #116]	; 0x74
   15cb8:	str	r0, [sp, #72]	; 0x48
   15cbc:	str	r0, [fp, #-96]	; 0xffffffa0
   15cc0:	mov	r0, #1
   15cc4:	str	r0, [sp, #108]	; 0x6c
   15cc8:	mov	r0, #1
   15ccc:	str	r0, [sp, #52]	; 0x34
   15cd0:	movw	r1, #7870	; 0x1ebe
   15cd4:	str	r3, [fp, #-108]	; 0xffffff94
   15cd8:	ubfx	r0, lr, #1, #7
   15cdc:	ldr	r7, [fp, #-108]	; 0xffffff94
   15ce0:	str	lr, [fp, #-80]	; 0xffffffb0
   15ce4:	str	r8, [fp, #-84]	; 0xffffffac
   15ce8:	movt	r1, #2
   15cec:	ldrb	r0, [r1, r0]
   15cf0:	umull	r1, r2, lr, r0
   15cf4:	mla	r2, r3, r0, r2
   15cf8:	rsbs	r1, r1, #2
   15cfc:	umull	r1, r3, r1, r0
   15d00:	rsc	r2, r2, #0
   15d04:	str	r2, [fp, #-76]	; 0xffffffb4
   15d08:	umull	r5, r4, r1, lr
   15d0c:	rsbs	r5, r5, #2
   15d10:	umull	r2, r6, r1, r5
   15d14:	umull	sl, ip, r2, lr
   15d18:	mla	ip, r2, r7, ip
   15d1c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   15d20:	str	r9, [fp, #-76]	; 0xffffffb4
   15d24:	mla	r0, r7, r0, r3
   15d28:	ldr	r3, [fp, #-108]	; 0xffffff94
   15d2c:	mla	r3, r1, r3, r4
   15d30:	ldr	r4, [fp, #-108]	; 0xffffff94
   15d34:	mla	r3, r0, lr, r3
   15d38:	rsc	r3, r3, #0
   15d3c:	mla	r1, r1, r3, r6
   15d40:	rsbs	r3, sl, #2
   15d44:	mov	sl, r4
   15d48:	ldr	r6, [sp, #116]	; 0x74
   15d4c:	ldr	r4, [fp, #-104]	; 0xffffff98
   15d50:	mla	r0, r0, r5, r1
   15d54:	umull	r7, r5, r2, r3
   15d58:	mla	r1, r0, lr, ip
   15d5c:	str	r7, [fp, #-88]	; 0xffffffa8
   15d60:	ldr	r7, [sp, #112]	; 0x70
   15d64:	rsc	r1, r1, #0
   15d68:	mla	r1, r2, r1, r5
   15d6c:	ldr	r5, [fp, #-112]	; 0xffffff90
   15d70:	ldr	r2, [sp, #80]	; 0x50
   15d74:	mla	r0, r0, r3, r1
   15d78:	ldr	r1, [sp, #52]	; 0x34
   15d7c:	str	r0, [fp, #-92]	; 0xffffffa4
   15d80:	rsbs	r0, r8, #0
   15d84:	str	r0, [sp, #64]	; 0x40
   15d88:	rsc	r0, r9, #0
   15d8c:	str	r0, [sp, #60]	; 0x3c
   15d90:	str	r1, [sp, #56]	; 0x38
   15d94:	b	15dd0 <__assert_fail@plt+0x43a4>
   15d98:	ldr	r2, [sp, #80]	; 0x50
   15d9c:	ldr	r3, [sp, #68]	; 0x44
   15da0:	ldr	r0, [fp, #-104]	; 0xffffff98
   15da4:	ldr	r1, [fp, #-96]	; 0xffffffa0
   15da8:	ldr	r6, [sp, #116]	; 0x74
   15dac:	ldr	r5, [fp, #-112]	; 0xffffff90
   15db0:	ldr	r7, [sp, #112]	; 0x70
   15db4:	ldr	r8, [fp, #-84]	; 0xffffffac
   15db8:	subs	r4, r4, #1
   15dbc:	str	r3, [sp, #68]	; 0x44
   15dc0:	str	r1, [fp, #-96]	; 0xffffffa0
   15dc4:	str	r4, [sp, #108]	; 0x6c
   15dc8:	mov	r4, r0
   15dcc:	beq	16000 <__assert_fail@plt+0x45d4>
   15dd0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15dd4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15dd8:	str	sl, [sp, #36]	; 0x24
   15ddc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15de0:	str	r2, [sp, #80]	; 0x50
   15de4:	mov	r2, r7
   15de8:	str	r4, [fp, #-104]	; 0xffffff98
   15dec:	str	r1, [sp, #40]	; 0x28
   15df0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15df4:	str	r0, [sp, #32]
   15df8:	str	r1, [sp, #44]	; 0x2c
   15dfc:	stm	sp, {r5, r6, r7}
   15e00:	str	r6, [sp, #20]
   15e04:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15e08:	str	r5, [sp, #16]
   15e0c:	mov	r5, r0
   15e10:	sub	r0, fp, #72	; 0x48
   15e14:	str	r3, [sp, #12]
   15e18:	str	r8, [sp, #24]
   15e1c:	str	r6, [sp, #28]
   15e20:	bl	17b7c <__assert_fail@plt+0x6150>
   15e24:	ldr	r7, [fp, #8]
   15e28:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15e2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15e30:	ldr	ip, [sp, #104]	; 0x68
   15e34:	adds	lr, r0, r7
   15e38:	adcs	r9, r1, #0
   15e3c:	adcs	r4, r2, #0
   15e40:	ldr	r2, [sp, #100]	; 0x64
   15e44:	adc	r7, r3, #0
   15e48:	subs	r0, r8, r4
   15e4c:	sbcs	r0, r6, r7
   15e50:	bcc	15e70 <__assert_fail@plt+0x4444>
   15e54:	subs	r0, lr, r5
   15e58:	sbcs	r0, r9, sl
   15e5c:	bcc	15ea8 <__assert_fail@plt+0x447c>
   15e60:	eor	r0, r4, r8
   15e64:	eor	r1, r7, r6
   15e68:	orrs	r0, r0, r1
   15e6c:	bne	15ea8 <__assert_fail@plt+0x447c>
   15e70:	ldr	r6, [sp, #64]	; 0x40
   15e74:	mov	r3, sl
   15e78:	ldr	sl, [sp, #60]	; 0x3c
   15e7c:	subs	r0, r6, #1
   15e80:	sbc	r1, sl, #0
   15e84:	subs	lr, lr, r5
   15e88:	sbcs	r9, r9, r3
   15e8c:	mov	r3, #0
   15e90:	movwcc	r3, #1
   15e94:	cmp	r3, #0
   15e98:	moveq	r0, r6
   15e9c:	moveq	r1, sl
   15ea0:	adds	r4, r0, r4
   15ea4:	adc	r7, r1, r7
   15ea8:	ldr	r0, [sp, #88]	; 0x58
   15eac:	str	r4, [sp, #112]	; 0x70
   15eb0:	ldr	r1, [sp, #72]	; 0x48
   15eb4:	str	r7, [fp, #-100]	; 0xffffff9c
   15eb8:	str	lr, [fp, #-112]	; 0xffffff90
   15ebc:	str	r9, [sp, #116]	; 0x74
   15ec0:	subs	r5, r0, r4
   15ec4:	ldr	r0, [sp, #84]	; 0x54
   15ec8:	sbc	r4, r0, r7
   15ecc:	ldr	r0, [sp, #76]	; 0x4c
   15ed0:	subs	r6, r5, #1
   15ed4:	mov	r7, #0
   15ed8:	sbc	r3, r4, #0
   15edc:	subs	r0, r0, lr
   15ee0:	sbcs	r1, r1, r9
   15ee4:	movwcc	r7, #1
   15ee8:	cmp	r7, #0
   15eec:	moveq	r3, r4
   15ef0:	moveq	r6, r5
   15ef4:	cmn	r3, #1
   15ef8:	ble	15f14 <__assert_fail@plt+0x44e8>
   15efc:	ldr	r4, [fp, #-108]	; 0xffffff94
   15f00:	mov	r9, r8
   15f04:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15f08:	ldr	r8, [fp, #-76]	; 0xffffffb4
   15f0c:	mov	sl, r4
   15f10:	b	15f40 <__assert_fail@plt+0x4514>
   15f14:	adds	r7, r6, r8
   15f18:	mov	r9, r8
   15f1c:	ldr	r8, [fp, #-76]	; 0xffffffb4
   15f20:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15f24:	ldr	r4, [fp, #-108]	; 0xffffff94
   15f28:	adc	r3, r3, r8
   15f2c:	adds	r0, r0, r5
   15f30:	mov	sl, r4
   15f34:	adcs	r1, r1, r4
   15f38:	adcs	r6, r7, #0
   15f3c:	adc	r3, r3, #0
   15f40:	ldr	r7, [fp, #-88]	; 0xffffffa8
   15f44:	str	r3, [sp, #12]
   15f48:	add	r3, sp, #16
   15f4c:	str	r5, [sp, #32]
   15f50:	str	sl, [sp, #36]	; 0x24
   15f54:	str	ip, [sp]
   15f58:	str	r6, [sp, #8]
   15f5c:	str	r7, [sp, #40]	; 0x28
   15f60:	ldr	r7, [fp, #-92]	; 0xffffffa4
   15f64:	str	r7, [sp, #44]	; 0x2c
   15f68:	ldr	r7, [sp, #92]	; 0x5c
   15f6c:	str	r7, [sp, #4]
   15f70:	stm	r3, {r0, r1, r9}
   15f74:	ldr	r3, [sp, #96]	; 0x60
   15f78:	sub	r0, fp, #72	; 0x48
   15f7c:	str	r8, [sp, #28]
   15f80:	bl	17b7c <__assert_fail@plt+0x6150>
   15f84:	ldr	r4, [sp, #108]	; 0x6c
   15f88:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15f8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15f90:	str	r0, [sp, #104]	; 0x68
   15f94:	str	r1, [sp, #92]	; 0x5c
   15f98:	and	r7, r4, #31
   15f9c:	str	r2, [sp, #100]	; 0x64
   15fa0:	str	r3, [sp, #96]	; 0x60
   15fa4:	cmp	r7, #1
   15fa8:	bne	15d98 <__assert_fail@plt+0x436c>
   15fac:	stm	sp, {r0, r1, r9}
   15fb0:	sub	r0, fp, #64	; 0x40
   15fb4:	str	r8, [sp, #12]
   15fb8:	str	r5, [sp, #16]
   15fbc:	str	sl, [sp, #20]
   15fc0:	bl	18148 <__assert_fail@plt+0x671c>
   15fc4:	ldr	r6, [sp, #116]	; 0x74
   15fc8:	ldr	r5, [fp, #-112]	; 0xffffff90
   15fcc:	ldr	r7, [sp, #112]	; 0x70
   15fd0:	eor	r0, r0, #1
   15fd4:	orrs	r0, r0, r1
   15fd8:	bne	16178 <__assert_fail@plt+0x474c>
   15fdc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15fe0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15fe4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15fe8:	mov	r2, r7
   15fec:	orrs	r0, r0, r1
   15ff0:	mov	r0, r5
   15ff4:	mov	r1, r6
   15ff8:	beq	15db4 <__assert_fail@plt+0x4388>
   15ffc:	b	16178 <__assert_fail@plt+0x474c>
   16000:	ldr	r3, [sp, #56]	; 0x38
   16004:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16008:	mov	r2, r7
   1600c:	mov	r4, r5
   16010:	str	r7, [sp, #88]	; 0x58
   16014:	str	r6, [fp, #-96]	; 0xffffffa0
   16018:	str	r5, [sp, #76]	; 0x4c
   1601c:	str	r6, [sp, #72]	; 0x48
   16020:	lsl	r1, r3, #1
   16024:	cmp	r3, #0
   16028:	str	r0, [sp, #68]	; 0x44
   1602c:	str	r0, [sp, #84]	; 0x54
   16030:	str	r3, [sp, #108]	; 0x6c
   16034:	beq	15d90 <__assert_fail@plt+0x4364>
   16038:	mov	r8, r3
   1603c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16040:	ldr	r9, [fp, #-80]	; 0xffffffb0
   16044:	ldr	ip, [fp, #-76]	; 0xffffffb4
   16048:	mov	r2, r7
   1604c:	mov	r4, r5
   16050:	str	r1, [sp, #52]	; 0x34
   16054:	str	r6, [fp, #-96]	; 0xffffffa0
   16058:	b	1609c <__assert_fail@plt+0x4670>
   1605c:	ldr	lr, [sp, #64]	; 0x40
   16060:	ldr	r7, [sp, #60]	; 0x3c
   16064:	mov	r5, #0
   16068:	subs	r0, lr, #1
   1606c:	sbc	r1, r7, #0
   16070:	subs	r4, r4, r9
   16074:	sbcs	r6, r6, sl
   16078:	movwcc	r5, #1
   1607c:	str	r6, [fp, #-96]	; 0xffffffa0
   16080:	cmp	r5, #0
   16084:	moveq	r0, lr
   16088:	moveq	r1, r7
   1608c:	adds	r2, r0, r2
   16090:	adc	r3, r1, r3
   16094:	subs	r8, r8, #1
   16098:	beq	16130 <__assert_fail@plt+0x4704>
   1609c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   160a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   160a4:	str	r9, [sp, #32]
   160a8:	str	sl, [sp, #36]	; 0x24
   160ac:	str	r4, [sp]
   160b0:	str	r0, [sp, #40]	; 0x28
   160b4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   160b8:	str	r0, [sp, #44]	; 0x2c
   160bc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   160c0:	stmib	sp, {r0, r2, r3, r4}
   160c4:	str	r0, [sp, #20]
   160c8:	sub	r0, fp, #72	; 0x48
   160cc:	str	r5, [sp, #24]
   160d0:	str	ip, [sp, #28]
   160d4:	bl	17b7c <__assert_fail@plt+0x6150>
   160d8:	ldr	r6, [fp, #8]
   160dc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   160e0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   160e4:	ldr	ip, [fp, #-76]	; 0xffffffb4
   160e8:	adds	r4, r0, r6
   160ec:	adcs	r6, r1, #0
   160f0:	adcs	r2, r2, #0
   160f4:	adc	r3, r3, #0
   160f8:	subs	r0, r5, r2
   160fc:	sbcs	r0, ip, r3
   16100:	bcc	1605c <__assert_fail@plt+0x4630>
   16104:	subs	r0, r4, r9
   16108:	str	r6, [fp, #-96]	; 0xffffffa0
   1610c:	sbcs	r0, r6, sl
   16110:	bcc	16094 <__assert_fail@plt+0x4668>
   16114:	ldr	r0, [fp, #-84]	; 0xffffffac
   16118:	ldr	r6, [fp, #-96]	; 0xffffffa0
   1611c:	eor	r1, r3, ip
   16120:	eor	r0, r2, r0
   16124:	orrs	r0, r0, r1
   16128:	beq	1605c <__assert_fail@plt+0x4630>
   1612c:	b	16094 <__assert_fail@plt+0x4668>
   16130:	ldr	r0, [sp, #112]	; 0x70
   16134:	ldr	r6, [fp, #-96]	; 0xffffffa0
   16138:	ldr	r8, [fp, #-84]	; 0xffffffac
   1613c:	ldr	r1, [sp, #52]	; 0x34
   16140:	mov	r7, r2
   16144:	str	r3, [sp, #68]	; 0x44
   16148:	mov	r5, r4
   1614c:	str	r0, [sp, #88]	; 0x58
   16150:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16154:	str	r3, [fp, #-100]	; 0xffffff9c
   16158:	str	r0, [sp, #84]	; 0x54
   1615c:	ldr	r0, [sp, #56]	; 0x38
   16160:	str	r0, [sp, #108]	; 0x6c
   16164:	ldr	r0, [fp, #-112]	; 0xffffff90
   16168:	str	r0, [sp, #76]	; 0x4c
   1616c:	ldr	r0, [sp, #116]	; 0x74
   16170:	str	r0, [sp, #72]	; 0x48
   16174:	b	15d90 <__assert_fail@plt+0x4364>
   16178:	ldr	r0, [sp, #88]	; 0x58
   1617c:	ldr	r2, [sp, #80]	; 0x50
   16180:	ldr	r8, [sp, #68]	; 0x44
   16184:	ldr	sl, [fp, #-96]	; 0xffffffa0
   16188:	str	r7, [fp, #-40]	; 0xffffffd8
   1618c:	str	r0, [fp, #-48]	; 0xffffffd0
   16190:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16194:	str	r2, [fp, #-56]	; 0xffffffc8
   16198:	str	r8, [fp, #-52]	; 0xffffffcc
   1619c:	str	r0, [fp, #-36]	; 0xffffffdc
   161a0:	ldr	r0, [sp, #84]	; 0x54
   161a4:	str	r0, [fp, #-44]	; 0xffffffd4
   161a8:	b	161f4 <__assert_fail@plt+0x47c8>
   161ac:	ldr	r7, [fp, #-108]	; 0xffffff94
   161b0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   161b4:	ldr	r4, [fp, #-76]	; 0xffffffb4
   161b8:	ldr	r6, [fp, #-84]	; 0xffffffac
   161bc:	stm	sp, {r0, r1, r6}
   161c0:	add	r0, sp, #12
   161c4:	stm	r0, {r4, r5, r7}
   161c8:	sub	r0, fp, #64	; 0x40
   161cc:	bl	18148 <__assert_fail@plt+0x671c>
   161d0:	ldr	r4, [fp, #-64]	; 0xffffffc0
   161d4:	ldr	r5, [fp, #-60]	; 0xffffffc4
   161d8:	mov	r7, r0
   161dc:	eor	r0, r0, #1
   161e0:	mov	r6, r1
   161e4:	mov	r2, r9
   161e8:	orrs	r0, r0, r1
   161ec:	orrseq	r0, r4, r5
   161f0:	bne	16344 <__assert_fail@plt+0x4918>
   161f4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   161f8:	ldr	r4, [fp, #-108]	; 0xffffff94
   161fc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   16200:	ldr	r6, [fp, #-76]	; 0xffffffb4
   16204:	mov	r3, r8
   16208:	str	r0, [sp, #40]	; 0x28
   1620c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16210:	mov	r9, r4
   16214:	str	r4, [sp, #36]	; 0x24
   16218:	ldr	r4, [fp, #-84]	; 0xffffffac
   1621c:	str	r5, [sp, #32]
   16220:	str	r0, [sp, #44]	; 0x2c
   16224:	ldr	r0, [fp, #-104]	; 0xffffff98
   16228:	stm	sp, {r0, sl}
   1622c:	str	r0, [sp, #16]
   16230:	sub	r0, fp, #72	; 0x48
   16234:	str	r2, [sp, #8]
   16238:	str	r8, [sp, #12]
   1623c:	str	sl, [sp, #20]
   16240:	str	r4, [sp, #24]
   16244:	str	r6, [sp, #28]
   16248:	bl	17b7c <__assert_fail@plt+0x6150>
   1624c:	ldr	r7, [fp, #8]
   16250:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16254:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16258:	adds	lr, r0, r7
   1625c:	adcs	sl, r1, #0
   16260:	adcs	ip, r2, #0
   16264:	adc	r8, r3, #0
   16268:	subs	r0, r4, ip
   1626c:	sbcs	r0, r6, r8
   16270:	bcc	16298 <__assert_fail@plt+0x486c>
   16274:	subs	r0, lr, r5
   16278:	sbcs	r0, sl, r9
   1627c:	bcc	162cc <__assert_fail@plt+0x48a0>
   16280:	ldr	r0, [fp, #-84]	; 0xffffffac
   16284:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16288:	eor	r0, ip, r0
   1628c:	eor	r1, r8, r1
   16290:	orrs	r0, r0, r1
   16294:	bne	162cc <__assert_fail@plt+0x48a0>
   16298:	ldr	r3, [sp, #64]	; 0x40
   1629c:	ldr	r4, [sp, #60]	; 0x3c
   162a0:	mov	r2, #0
   162a4:	subs	r0, r3, #1
   162a8:	sbc	r1, r4, #0
   162ac:	subs	lr, lr, r5
   162b0:	sbcs	sl, sl, r9
   162b4:	movwcc	r2, #1
   162b8:	cmp	r2, #0
   162bc:	moveq	r0, r3
   162c0:	moveq	r1, r4
   162c4:	adds	ip, r0, ip
   162c8:	adc	r8, r1, r8
   162cc:	ldr	r0, [sp, #88]	; 0x58
   162d0:	ldr	r1, [sp, #72]	; 0x48
   162d4:	mov	r4, #0
   162d8:	mov	r9, ip
   162dc:	str	lr, [fp, #-104]	; 0xffffff98
   162e0:	subs	r7, r0, ip
   162e4:	ldr	r0, [sp, #84]	; 0x54
   162e8:	sbc	r5, r0, r8
   162ec:	ldr	r0, [sp, #76]	; 0x4c
   162f0:	subs	r2, r7, #1
   162f4:	sbc	r3, r5, #0
   162f8:	subs	r0, r0, lr
   162fc:	sbcs	r1, r1, sl
   16300:	movwcc	r4, #1
   16304:	cmp	r4, #0
   16308:	moveq	r3, r5
   1630c:	moveq	r2, r7
   16310:	cmn	r3, #1
   16314:	bgt	161ac <__assert_fail@plt+0x4780>
   16318:	ldr	r6, [fp, #-84]	; 0xffffffac
   1631c:	ldr	r4, [fp, #-76]	; 0xffffffb4
   16320:	ldr	r5, [fp, #-80]	; 0xffffffb0
   16324:	ldr	r7, [fp, #-108]	; 0xffffff94
   16328:	adds	r2, r2, r6
   1632c:	adc	r3, r3, r4
   16330:	adds	r0, r0, r5
   16334:	adcs	r1, r1, r7
   16338:	adcs	r2, r2, #0
   1633c:	adc	r3, r3, #0
   16340:	b	161bc <__assert_fail@plt+0x4790>
   16344:	orrs	r0, r4, r5
   16348:	str	r2, [fp, #-56]	; 0xffffffc8
   1634c:	str	r8, [fp, #-52]	; 0xffffffcc
   16350:	str	r7, [fp, #-88]	; 0xffffffa8
   16354:	bne	166f0 <__assert_fail@plt+0x4cc4>
   16358:	movw	r1, #7870	; 0x1ebe
   1635c:	str	r2, [sp, #80]	; 0x50
   16360:	ubfx	r0, r7, #1, #7
   16364:	ldr	lr, [fp, #-108]	; 0xffffff94
   16368:	str	r6, [fp, #-92]	; 0xffffffa4
   1636c:	movt	r1, #2
   16370:	ldrb	r0, [r1, r0]
   16374:	umull	r1, r2, r7, r0
   16378:	mla	r2, r6, r0, r2
   1637c:	rsbs	r1, r1, #2
   16380:	umull	r1, r3, r1, r0
   16384:	rsc	r2, r2, #0
   16388:	mla	r2, r2, r0, r3
   1638c:	umull	r0, r3, r1, r7
   16390:	mla	r3, r1, r6, r3
   16394:	mla	r3, r2, r7, r3
   16398:	rsbs	r7, r0, #2
   1639c:	rsc	r0, r3, #0
   163a0:	str	r0, [sp, #68]	; 0x44
   163a4:	umull	r5, r0, r1, r7
   163a8:	str	r0, [sp, #60]	; 0x3c
   163ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   163b0:	umull	r0, r9, r5, r0
   163b4:	rsbs	r3, r0, #2
   163b8:	umull	r4, r0, r5, r3
   163bc:	str	r0, [sp, #64]	; 0x40
   163c0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   163c4:	str	r4, [sp, #52]	; 0x34
   163c8:	umull	r6, ip, r4, r0
   163cc:	mla	ip, r4, lr, ip
   163d0:	ldr	r4, [sp, #68]	; 0x44
   163d4:	ldr	lr, [sp, #60]	; 0x3c
   163d8:	str	r6, [fp, #-96]	; 0xffffffa0
   163dc:	ldr	r6, [fp, #-92]	; 0xffffffa4
   163e0:	mla	r1, r1, r4, lr
   163e4:	ldr	r4, [sp, #64]	; 0x40
   163e8:	mla	r1, r2, r7, r1
   163ec:	ldr	r7, [fp, #-88]	; 0xffffffa8
   163f0:	mla	r9, r5, r6, r9
   163f4:	mla	r2, r1, r7, r9
   163f8:	rsc	r2, r2, #0
   163fc:	mla	r2, r5, r2, r4
   16400:	ldr	r4, [fp, #-84]	; 0xffffffac
   16404:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16408:	mla	r1, r1, r3, r2
   1640c:	mla	r0, r1, r0, ip
   16410:	str	r0, [fp, #-108]	; 0xffffff94
   16414:	mov	r0, #0
   16418:	str	r0, [fp, #-80]	; 0xffffffb0
   1641c:	subs	r0, r4, r7
   16420:	sbcs	r0, r5, r6
   16424:	mov	r0, #0
   16428:	str	r0, [sp, #68]	; 0x44
   1642c:	bcc	164a8 <__assert_fail@plt+0x4a7c>
   16430:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16434:	umull	r0, r2, r3, r6
   16438:	ldr	r6, [fp, #-108]	; 0xffffff94
   1643c:	umlal	r0, r2, r6, r7
   16440:	ldr	r7, [fp, #-88]	; 0xffffffa8
   16444:	umull	r3, r7, r3, r7
   16448:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1644c:	adds	r0, r0, r7
   16450:	umull	r3, r7, r6, r3
   16454:	adc	r2, r2, #0
   16458:	subs	r0, r0, r3
   1645c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16460:	sbcs	r0, r2, r7
   16464:	mov	r0, #0
   16468:	movwcc	r0, #1
   1646c:	cmp	r0, #0
   16470:	umull	r3, r7, r6, r3
   16474:	ldr	r6, [fp, #-92]	; 0xffffffa4
   16478:	addne	r7, r7, #1
   1647c:	subs	r0, r4, r2
   16480:	ldr	r4, [sp, #52]	; 0x34
   16484:	sbc	r2, r5, #0
   16488:	subs	r0, r0, r3
   1648c:	umull	r5, r3, r0, r4
   16490:	mla	r0, r0, r1, r3
   16494:	sbc	r1, r2, r7
   16498:	ldr	r7, [fp, #-88]	; 0xffffffa8
   1649c:	mla	r0, r1, r4, r0
   164a0:	str	r5, [fp, #-80]	; 0xffffffb0
   164a4:	str	r0, [sp, #68]	; 0x44
   164a8:	mov	r0, r7
   164ac:	mov	r1, r6
   164b0:	bl	169f8 <__assert_fail@plt+0x4fcc>
   164b4:	ldr	r4, [fp, #12]
   164b8:	cmp	r0, #0
   164bc:	beq	16598 <__assert_fail@plt+0x4b6c>
   164c0:	ldrb	lr, [r4, #250]	; 0xfa
   164c4:	sub	ip, lr, #1
   164c8:	cmp	lr, #0
   164cc:	beq	1656c <__assert_fail@plt+0x4b40>
   164d0:	mov	r0, #8
   164d4:	add	r5, lr, #223	; 0xdf
   164d8:	lsl	r1, lr, #3
   164dc:	add	r4, r0, lr, lsl #3
   164e0:	mov	r2, r5
   164e4:	ldr	r0, [fp, #12]
   164e8:	ldr	r3, [r0, r4]!
   164ec:	ldr	r0, [r0, #4]
   164f0:	subs	r7, r7, r3
   164f4:	ldr	r7, [fp, #-92]	; 0xffffffa4
   164f8:	sbcs	r7, r7, r0
   164fc:	bcs	166b0 <__assert_fail@plt+0x4c84>
   16500:	ldr	r7, [fp, #-88]	; 0xffffffa8
   16504:	sub	r0, r2, #224	; 0xe0
   16508:	sub	r3, r2, #1
   1650c:	sub	r4, r4, #8
   16510:	cmp	r0, #0
   16514:	mov	r2, r3
   16518:	bgt	164e4 <__assert_fail@plt+0x4ab8>
   1651c:	sub	r3, r3, #224	; 0xe0
   16520:	ldr	r4, [fp, #12]
   16524:	cmp	ip, r3
   16528:	ble	16564 <__assert_fail@plt+0x4b38>
   1652c:	add	r0, r4, r1
   16530:	sub	r1, r1, #8
   16534:	ldr	r2, [r0, #8]
   16538:	ldr	r7, [r0, #12]
   1653c:	str	r2, [r0, #16]
   16540:	str	r7, [r0, #20]
   16544:	mov	r0, r4
   16548:	ldrb	r2, [r0, r5]!
   1654c:	strb	r2, [r0, #1]
   16550:	sub	r2, r5, #225	; 0xe1
   16554:	sub	r0, r5, #1
   16558:	cmp	r2, r3
   1655c:	mov	r5, r0
   16560:	bgt	1652c <__assert_fail@plt+0x4b00>
   16564:	ldr	r7, [fp, #-88]	; 0xffffffa8
   16568:	mov	ip, r3
   1656c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16570:	add	r0, ip, #1
   16574:	add	r1, r4, r0, lsl #3
   16578:	add	r0, r4, r0
   1657c:	str	r7, [r1, #16]
   16580:	str	r2, [r1, #20]
   16584:	mov	r1, #1
   16588:	strb	r1, [r0, #224]	; 0xe0
   1658c:	add	r0, lr, #1
   16590:	strb	r0, [r4, #250]	; 0xfa
   16594:	b	165ac <__assert_fail@plt+0x4b80>
   16598:	ldr	r2, [sp, #48]	; 0x30
   1659c:	mov	r0, r7
   165a0:	mov	r1, r6
   165a4:	mov	r3, r4
   165a8:	bl	14cfc <__assert_fail@plt+0x32d0>
   165ac:	ldr	r6, [fp, #-80]	; 0xffffffb0
   165b0:	ldr	r7, [sp, #68]	; 0x44
   165b4:	ldr	r9, [fp, #-96]	; 0xffffffa0
   165b8:	orrs	r0, r6, r7
   165bc:	beq	16810 <__assert_fail@plt+0x4de4>
   165c0:	ldr	r5, [fp, #-108]	; 0xffffff94
   165c4:	mov	r0, r6
   165c8:	mov	r1, r7
   165cc:	mov	r2, r9
   165d0:	mov	r3, r5
   165d4:	bl	13ed4 <__assert_fail@plt+0x24a8>
   165d8:	cmp	r0, #0
   165dc:	bne	16818 <__assert_fail@plt+0x4dec>
   165e0:	ldr	r0, [fp, #-112]	; 0xffffff90
   165e4:	ldr	r2, [sp, #112]	; 0x70
   165e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   165ec:	str	r0, [sp]
   165f0:	ldr	r0, [sp, #116]	; 0x74
   165f4:	stmib	sp, {r0, r6, r7, r9}
   165f8:	sub	r0, fp, #40	; 0x28
   165fc:	str	r5, [sp, #20]
   16600:	bl	183a8 <__assert_fail@plt+0x697c>
   16604:	str	r0, [fp, #-112]	; 0xffffff90
   16608:	ldr	r0, [sp, #76]	; 0x4c
   1660c:	ldr	r2, [sp, #88]	; 0x58
   16610:	ldr	r3, [sp, #84]	; 0x54
   16614:	str	r1, [sp, #116]	; 0x74
   16618:	str	r0, [sp]
   1661c:	ldr	r0, [sp, #72]	; 0x48
   16620:	stmib	sp, {r0, r6, r7, r9}
   16624:	sub	r0, fp, #48	; 0x30
   16628:	str	r5, [sp, #20]
   1662c:	bl	183a8 <__assert_fail@plt+0x697c>
   16630:	str	r0, [sp, #76]	; 0x4c
   16634:	ldr	r0, [fp, #-104]	; 0xffffff98
   16638:	ldr	r2, [sp, #80]	; 0x50
   1663c:	mov	r3, r8
   16640:	str	r1, [sp, #72]	; 0x48
   16644:	stm	sp, {r0, sl}
   16648:	add	r0, sp, #8
   1664c:	stm	r0, {r6, r7, r9}
   16650:	sub	r0, fp, #56	; 0x38
   16654:	str	r5, [sp, #20]
   16658:	bl	183a8 <__assert_fail@plt+0x697c>
   1665c:	str	r0, [fp, #-104]	; 0xffffff98
   16660:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16664:	mov	lr, r9
   16668:	str	r1, [fp, #-96]	; 0xffffffa0
   1666c:	mov	r8, r6
   16670:	mov	r9, r7
   16674:	mov	r3, r5
   16678:	str	r0, [sp, #80]	; 0x50
   1667c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16680:	str	r0, [sp, #68]	; 0x44
   16684:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16688:	str	r0, [sp, #88]	; 0x58
   1668c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16690:	str	r0, [sp, #84]	; 0x54
   16694:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16698:	str	r0, [sp, #112]	; 0x70
   1669c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   166a0:	str	r0, [fp, #-100]	; 0xffffff9c
   166a4:	ldr	r0, [sp, #56]	; 0x38
   166a8:	str	r0, [sp, #52]	; 0x34
   166ac:	b	15cd0 <__assert_fail@plt+0x42a4>
   166b0:	ldr	r4, [fp, #-88]	; 0xffffffa8
   166b4:	eor	r3, r3, r4
   166b8:	ldr	r4, [fp, #-92]	; 0xffffffa4
   166bc:	eor	r0, r0, r4
   166c0:	orrs	r0, r3, r0
   166c4:	bne	166dc <__assert_fail@plt+0x4cb0>
   166c8:	ldr	r4, [fp, #12]
   166cc:	ldrb	r0, [r4, r2]
   166d0:	add	r0, r0, #1
   166d4:	strb	r0, [r4, r2]
   166d8:	b	165ac <__assert_fail@plt+0x4b80>
   166dc:	sub	r3, r2, #224	; 0xe0
   166e0:	ldr	r4, [fp, #12]
   166e4:	cmp	ip, r3
   166e8:	bgt	1652c <__assert_fail@plt+0x4b00>
   166ec:	b	16564 <__assert_fail@plt+0x4b38>
   166f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   166f4:	ldr	r1, [fp, #-108]	; 0xffffff94
   166f8:	ldr	r3, [fp, #-84]	; 0xffffffac
   166fc:	eor	r0, r0, r7
   16700:	eor	r1, r1, r6
   16704:	orrs	r0, r0, r1
   16708:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1670c:	eoreq	r0, r3, r4
   16710:	eoreq	r2, r1, r5
   16714:	orrseq	r0, r0, r2
   16718:	beq	16860 <__assert_fail@plt+0x4e34>
   1671c:	movw	r1, #7870	; 0x1ebe
   16720:	ubfx	r0, r7, #1, #7
   16724:	mov	r9, r6
   16728:	ldr	ip, [fp, #-108]	; 0xffffff94
   1672c:	movt	r1, #2
   16730:	ldrb	r0, [r1, r0]
   16734:	umull	r1, r2, r7, r0
   16738:	mla	r2, r6, r0, r2
   1673c:	rsbs	r1, r1, #2
   16740:	umull	r1, r3, r1, r0
   16744:	rsc	r2, r2, #0
   16748:	mla	sl, r2, r0, r3
   1674c:	umull	r2, r3, r1, r7
   16750:	mla	r3, r1, r6, r3
   16754:	mla	r3, sl, r7, r3
   16758:	rsbs	r8, r2, #2
   1675c:	rsc	r0, r3, #0
   16760:	str	r0, [fp, #-76]	; 0xffffffb4
   16764:	umull	r7, r0, r1, r8
   16768:	str	r0, [fp, #-92]	; 0xffffffa4
   1676c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16770:	umull	r3, r0, r7, r0
   16774:	rsbs	lr, r3, #2
   16778:	str	r0, [fp, #-100]	; 0xffffff9c
   1677c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16780:	umull	r6, r0, r7, lr
   16784:	str	r0, [fp, #-84]	; 0xffffffac
   16788:	umull	r2, r0, r6, r3
   1678c:	mla	ip, r6, ip, r0
   16790:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16794:	str	r2, [fp, #-96]	; 0xffffffa0
   16798:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1679c:	mla	r6, r7, r9, r0
   167a0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   167a4:	mla	r1, r1, r2, r0
   167a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   167ac:	mov	r0, r4
   167b0:	mla	r1, sl, r8, r1
   167b4:	mla	r2, r1, r2, r6
   167b8:	ldr	r6, [fp, #-84]	; 0xffffffac
   167bc:	rsc	r2, r2, #0
   167c0:	mla	r2, r7, r2, r6
   167c4:	ldr	r7, [fp, #-88]	; 0xffffffa8
   167c8:	mla	r1, r1, lr, r2
   167cc:	mla	r6, r1, r3, ip
   167d0:	mov	r1, r5
   167d4:	mov	r2, r7
   167d8:	mov	r3, r9
   167dc:	bl	13ed4 <__assert_fail@plt+0x24a8>
   167e0:	cmp	r0, #0
   167e4:	beq	16888 <__assert_fail@plt+0x4e5c>
   167e8:	ldr	r3, [fp, #12]
   167ec:	mov	r0, r3
   167f0:	ldr	r1, [r0, #8]!
   167f4:	ldr	r2, [r0, #4]
   167f8:	orrs	r1, r1, r2
   167fc:	bne	16840 <__assert_fail@plt+0x4e14>
   16800:	stm	r3, {r7, r9}
   16804:	strd	r4, [r0]
   16808:	mov	r4, r3
   1680c:	b	168b4 <__assert_fail@plt+0x4e88>
   16810:	ldr	r5, [fp, #-108]	; 0xffffff94
   16814:	b	168bc <__assert_fail@plt+0x4e90>
   16818:	mov	r0, r4
   1681c:	ldr	r1, [r0, #8]!
   16820:	ldr	r2, [r0, #4]
   16824:	orrs	r1, r1, r2
   16828:	ldreq	r1, [fp, #-108]	; 0xffffff94
   1682c:	streq	r9, [r4]
   16830:	streq	r1, [r4, #4]
   16834:	strdeq	r6, [r0]
   16838:	subeq	sp, fp, #28
   1683c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16840:	movw	r0, #60695	; 0xed17
   16844:	movw	r1, #60384	; 0xebe0
   16848:	movw	r3, #60719	; 0xed2f
   1684c:	movw	r2, #558	; 0x22e
   16850:	movt	r0, #1
   16854:	movt	r1, #1
   16858:	movt	r3, #1
   1685c:	bl	11a2c <__assert_fail@plt>
   16860:	ldr	r0, [sp, #48]	; 0x30
   16864:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16868:	str	r0, [sp]
   1686c:	ldr	r0, [fp, #12]
   16870:	str	r0, [sp, #4]
   16874:	mov	r0, r3
   16878:	ldr	r3, [fp, #-108]	; 0xffffff94
   1687c:	bl	15a24 <__assert_fail@plt+0x3ff8>
   16880:	sub	sp, fp, #28
   16884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16888:	ldr	r0, [sp, #48]	; 0x30
   1688c:	mov	r2, r7
   16890:	mov	r3, r9
   16894:	str	r0, [sp]
   16898:	ldr	r0, [fp, #12]
   1689c:	mov	r1, r0
   168a0:	str	r0, [sp, #4]
   168a4:	mov	r0, r4
   168a8:	mov	r4, r1
   168ac:	mov	r1, r5
   168b0:	bl	15a24 <__assert_fail@plt+0x3ff8>
   168b4:	ldr	r9, [fp, #-96]	; 0xffffffa0
   168b8:	mov	r5, r6
   168bc:	mov	r0, r9
   168c0:	mov	r1, r5
   168c4:	bl	169f8 <__assert_fail@plt+0x4fcc>
   168c8:	cmp	r0, #0
   168cc:	beq	16978 <__assert_fail@plt+0x4f4c>
   168d0:	ldrb	ip, [r4, #250]	; 0xfa
   168d4:	sub	r1, ip, #1
   168d8:	cmp	ip, #0
   168dc:	beq	169cc <__assert_fail@plt+0x4fa0>
   168e0:	mov	r2, #8
   168e4:	mov	r0, r5
   168e8:	add	r7, ip, #223	; 0xdf
   168ec:	add	r3, r2, ip, lsl #3
   168f0:	mov	r6, r4
   168f4:	ldr	r2, [r6, r3]!
   168f8:	ldr	r6, [r6, #4]
   168fc:	subs	r5, r9, r2
   16900:	sbcs	r5, r0, r6
   16904:	bcs	16994 <__assert_fail@plt+0x4f68>
   16908:	sub	r2, r7, #1
   1690c:	sub	r7, r7, #224	; 0xe0
   16910:	sub	r3, r3, #8
   16914:	cmp	r7, #0
   16918:	mov	r7, r2
   1691c:	bgt	168f0 <__assert_fail@plt+0x4ec4>
   16920:	sub	r2, r2, #224	; 0xe0
   16924:	mov	r5, r0
   16928:	cmp	r1, r2
   1692c:	ble	169c8 <__assert_fail@plt+0x4f9c>
   16930:	lsl	r1, ip, #3
   16934:	add	r3, ip, #223	; 0xdf
   16938:	add	r7, r4, r1
   1693c:	sub	r1, r1, #8
   16940:	ldrd	r4, [r7, #8]
   16944:	strd	r4, [r7, #16]
   16948:	ldr	r4, [fp, #12]
   1694c:	mov	r7, r4
   16950:	ldrb	r6, [r7, r3]!
   16954:	strb	r6, [r7, #1]
   16958:	sub	r7, r3, #1
   1695c:	sub	r3, r3, #225	; 0xe1
   16960:	cmp	r3, r2
   16964:	mov	r3, r7
   16968:	bgt	16938 <__assert_fail@plt+0x4f0c>
   1696c:	mov	r1, r2
   16970:	mov	r5, r0
   16974:	b	169cc <__assert_fail@plt+0x4fa0>
   16978:	ldr	r2, [fp, #8]
   1697c:	mov	r0, r9
   16980:	mov	r1, r5
   16984:	mov	r3, r4
   16988:	bl	14cfc <__assert_fail@plt+0x32d0>
   1698c:	sub	sp, fp, #28
   16990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16994:	eor	r2, r2, r9
   16998:	eor	r3, r6, r0
   1699c:	orrs	r2, r2, r3
   169a0:	bne	169b8 <__assert_fail@plt+0x4f8c>
   169a4:	ldrb	r0, [r4, r7]
   169a8:	add	r0, r0, #1
   169ac:	strb	r0, [r4, r7]
   169b0:	sub	sp, fp, #28
   169b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b8:	mov	r5, r0
   169bc:	sub	r2, r7, #224	; 0xe0
   169c0:	cmp	r1, r2
   169c4:	bgt	16930 <__assert_fail@plt+0x4f04>
   169c8:	mov	r1, r2
   169cc:	add	r1, r1, #1
   169d0:	add	r0, ip, #1
   169d4:	add	r2, r4, r1, lsl #3
   169d8:	add	r1, r4, r1
   169dc:	str	r9, [r2, #16]
   169e0:	str	r5, [r2, #20]
   169e4:	mov	r2, #1
   169e8:	strb	r2, [r1, #224]	; 0xe0
   169ec:	strb	r0, [r4, #250]	; 0xfa
   169f0:	sub	sp, fp, #28
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169fc:	add	fp, sp, #28
   16a00:	sub	sp, sp, #380	; 0x17c
   16a04:	mov	sl, r1
   16a08:	str	r0, [sp, #116]	; 0x74
   16a0c:	subs	r0, r0, #2
   16a10:	mov	r1, #0
   16a14:	sbcs	r0, sl, #0
   16a18:	bcc	16a38 <__assert_fail@plt+0x500c>
   16a1c:	ldr	r2, [sp, #116]	; 0x74
   16a20:	movw	r0, #60793	; 0xed79
   16a24:	mov	r1, #1
   16a28:	movt	r0, #381	; 0x17d
   16a2c:	subs	r0, r2, r0
   16a30:	sbcs	r0, sl, #0
   16a34:	bcs	16a44 <__assert_fail@plt+0x5018>
   16a38:	mov	r0, r1
   16a3c:	sub	sp, fp, #28
   16a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a44:	ldr	r0, [sp, #116]	; 0x74
   16a48:	mov	r3, #0
   16a4c:	subs	r0, r0, #1
   16a50:	sbc	r1, sl, #0
   16a54:	tst	r0, #1
   16a58:	mov	r2, r0
   16a5c:	str	r0, [sp, #48]	; 0x30
   16a60:	str	r1, [sp, #44]	; 0x2c
   16a64:	bne	16a8c <__assert_fail@plt+0x5060>
   16a68:	ldr	r0, [sp, #48]	; 0x30
   16a6c:	ldr	r1, [sp, #44]	; 0x2c
   16a70:	mov	r3, #0
   16a74:	lsrs	r1, r1, #1
   16a78:	rrx	r2, r0
   16a7c:	tst	r0, #2
   16a80:	add	r3, r3, #1
   16a84:	mov	r0, r2
   16a88:	beq	16a74 <__assert_fail@plt+0x5048>
   16a8c:	ldr	r4, [sp, #116]	; 0x74
   16a90:	str	r1, [sp, #12]
   16a94:	movw	r1, #7870	; 0x1ebe
   16a98:	str	r3, [sp, #28]
   16a9c:	str	r2, [sp, #8]
   16aa0:	movt	r1, #2
   16aa4:	ubfx	r0, r4, #1, #7
   16aa8:	ldrb	r1, [r1, r0]
   16aac:	umull	r0, r2, r1, r4
   16ab0:	mla	r2, r1, sl, r2
   16ab4:	rsbs	r0, r0, #2
   16ab8:	umull	r3, r7, r0, r1
   16abc:	rsc	lr, r2, #0
   16ac0:	mla	r1, lr, r1, r7
   16ac4:	umull	r0, r6, r3, r4
   16ac8:	mla	r7, r3, sl, r6
   16acc:	mla	r7, r1, r4, r7
   16ad0:	rsbs	r5, r0, #2
   16ad4:	umull	r0, r8, r3, r5
   16ad8:	rsc	r7, r7, #0
   16adc:	mla	r3, r3, r7, r8
   16ae0:	mla	r1, r1, r5, r3
   16ae4:	umull	ip, r2, r0, r4
   16ae8:	mla	r2, r0, sl, r2
   16aec:	mla	r3, r1, r4, r2
   16af0:	rsbs	r2, ip, #2
   16af4:	rsc	r3, r3, #0
   16af8:	subs	r7, r4, #2
   16afc:	sbcs	r7, sl, #0
   16b00:	bcc	17888 <__assert_fail@plt+0x5e5c>
   16b04:	umull	r6, r7, r0, r2
   16b08:	mov	ip, #0
   16b0c:	mov	lr, #0
   16b10:	mov	r4, #0
   16b14:	mla	r0, r0, r3, r7
   16b18:	ldr	r3, [sp, #116]	; 0x74
   16b1c:	mov	r7, sl
   16b20:	mla	r9, r1, r2, r0
   16b24:	mov	r0, #0
   16b28:	mov	r2, #1
   16b2c:	mvn	r1, #63	; 0x3f
   16b30:	str	r0, [sp, #68]	; 0x44
   16b34:	mov	r0, #0
   16b38:	str	r6, [sp, #92]	; 0x5c
   16b3c:	str	r0, [sp, #64]	; 0x40
   16b40:	b	16b88 <__assert_fail@plt+0x515c>
   16b44:	ldr	r6, [sp, #68]	; 0x44
   16b48:	subs	r0, r2, r3
   16b4c:	sbc	r5, r4, r7
   16b50:	subs	r2, r0, #1
   16b54:	sbc	r4, r5, #0
   16b58:	subs	r6, r6, ip
   16b5c:	str	r6, [sp, #68]	; 0x44
   16b60:	ldr	r6, [sp, #64]	; 0x40
   16b64:	sbcs	r6, r6, lr
   16b68:	str	r6, [sp, #64]	; 0x40
   16b6c:	mov	r6, #0
   16b70:	movwcc	r6, #1
   16b74:	cmp	r6, #0
   16b78:	moveq	r2, r0
   16b7c:	moveq	r4, r5
   16b80:	adds	r1, r1, #1
   16b84:	bcs	16bd0 <__assert_fail@plt+0x51a4>
   16b88:	lsrs	r6, lr, #1
   16b8c:	rrx	ip, ip
   16b90:	lsrs	r7, r7, #1
   16b94:	orr	lr, r6, r3, lsl #31
   16b98:	rrx	r3, r3
   16b9c:	subs	r5, r3, r2
   16ba0:	sbcs	r5, r7, r4
   16ba4:	bcc	16b44 <__assert_fail@plt+0x5118>
   16ba8:	eor	r5, r2, r3
   16bac:	eor	r0, r4, r7
   16bb0:	orrs	r0, r5, r0
   16bb4:	bne	16b80 <__assert_fail@plt+0x5154>
   16bb8:	ldr	r0, [sp, #68]	; 0x44
   16bbc:	subs	r0, r0, ip
   16bc0:	ldr	r0, [sp, #64]	; 0x40
   16bc4:	sbcs	r0, r0, lr
   16bc8:	bcs	16b44 <__assert_fail@plt+0x5118>
   16bcc:	b	16b80 <__assert_fail@plt+0x5154>
   16bd0:	ldr	r1, [sp, #68]	; 0x44
   16bd4:	ldr	r6, [sp, #116]	; 0x74
   16bd8:	ldr	r2, [sp, #64]	; 0x40
   16bdc:	mov	r0, #0
   16be0:	str	r9, [sp, #88]	; 0x58
   16be4:	subs	r3, r6, r1
   16be8:	sbc	r7, sl, r2
   16bec:	subs	r1, r1, r3
   16bf0:	str	r3, [sp, #36]	; 0x24
   16bf4:	sbcs	r2, r2, r7
   16bf8:	str	r7, [sp, #32]
   16bfc:	movwcc	r0, #1
   16c00:	adds	r3, r1, r6
   16c04:	adc	r7, r2, sl
   16c08:	cmp	r0, #0
   16c0c:	ldr	r0, [sp, #12]
   16c10:	moveq	r3, r1
   16c14:	ldr	r1, [sp, #8]
   16c18:	moveq	r7, r2
   16c1c:	str	r3, [sp, #52]	; 0x34
   16c20:	str	r3, [sp, #100]	; 0x64
   16c24:	str	r7, [sp, #56]	; 0x38
   16c28:	str	r7, [sp, #104]	; 0x68
   16c2c:	orrs	r0, r1, r0
   16c30:	str	r0, [sp, #4]
   16c34:	beq	16e28 <__assert_fail@plt+0x53fc>
   16c38:	ldr	r0, [sp, #56]	; 0x38
   16c3c:	ldr	r7, [sp, #52]	; 0x34
   16c40:	ldr	lr, [sp, #8]
   16c44:	ldr	r1, [sp, #12]
   16c48:	mov	r4, r0
   16c4c:	str	r7, [sp, #100]	; 0x64
   16c50:	str	r0, [sp, #104]	; 0x68
   16c54:	b	16c60 <__assert_fail@plt+0x5234>
   16c58:	orrs	r0, lr, r1
   16c5c:	beq	16e28 <__assert_fail@plt+0x53fc>
   16c60:	umull	r8, r9, r4, r7
   16c64:	umull	r7, r0, r7, r7
   16c68:	ldr	r3, [sp, #88]	; 0x58
   16c6c:	str	lr, [sp, #112]	; 0x70
   16c70:	ldr	r5, [sp, #116]	; 0x74
   16c74:	lsl	r2, r9, #1
   16c78:	adds	r0, r0, r8, lsl #1
   16c7c:	orr	r2, r2, r8, lsr #31
   16c80:	adc	r2, r2, #0
   16c84:	str	r2, [sp, #108]	; 0x6c
   16c88:	ldr	r2, [sp, #92]	; 0x5c
   16c8c:	umull	ip, lr, r7, r2
   16c90:	mla	r7, r7, r3, lr
   16c94:	mov	lr, r1
   16c98:	mla	r7, r0, r2, r7
   16c9c:	umull	r1, r3, ip, sl
   16ca0:	umull	r2, r6, ip, r5
   16ca4:	umlal	r1, r3, r7, r5
   16ca8:	adds	r1, r1, r6
   16cac:	adc	r2, r3, #0
   16cb0:	umull	r3, r6, r7, r5
   16cb4:	subs	r1, r1, r3
   16cb8:	umull	r3, r7, r7, sl
   16cbc:	sbcs	r1, r2, r6
   16cc0:	mov	r1, #0
   16cc4:	ldr	r6, [sp, #108]	; 0x6c
   16cc8:	movwcc	r1, #1
   16ccc:	cmp	r1, #0
   16cd0:	addne	r7, r7, #1
   16cd4:	adds	r1, r3, r2
   16cd8:	adc	r2, r7, #0
   16cdc:	subs	r0, r0, r8
   16ce0:	umull	r3, r7, r4, r4
   16ce4:	sbcs	r0, r6, r9
   16ce8:	mov	r0, #0
   16cec:	movwcc	r0, #1
   16cf0:	cmp	r0, #0
   16cf4:	addne	r7, r7, #1
   16cf8:	adds	r0, r3, r6
   16cfc:	adc	r3, r7, #0
   16d00:	subs	r0, r0, r1
   16d04:	sbcs	r1, r3, r2
   16d08:	mov	r2, #0
   16d0c:	movwcc	r2, #1
   16d10:	adds	r7, r0, r5
   16d14:	adc	r4, r1, sl
   16d18:	cmp	r2, #0
   16d1c:	moveq	r7, r0
   16d20:	ldr	r0, [sp, #112]	; 0x70
   16d24:	moveq	r4, r1
   16d28:	mov	r1, lr
   16d2c:	lsrs	r1, lr, #1
   16d30:	rrx	lr, r0
   16d34:	tst	r0, #2
   16d38:	beq	16c58 <__assert_fail@plt+0x522c>
   16d3c:	ldr	r6, [sp, #100]	; 0x64
   16d40:	ldr	r5, [sp, #92]	; 0x5c
   16d44:	str	r1, [sp, #108]	; 0x6c
   16d48:	ldr	r1, [sp, #88]	; 0x58
   16d4c:	ldr	ip, [sp, #104]	; 0x68
   16d50:	str	r4, [sp, #112]	; 0x70
   16d54:	umull	r0, r8, r7, r6
   16d58:	umull	r2, r3, r0, r5
   16d5c:	mla	r0, r0, r1, r3
   16d60:	umull	r3, r6, r4, r6
   16d64:	umlal	r3, r6, r7, ip
   16d68:	adds	r3, r3, r8
   16d6c:	ldr	r8, [sp, #116]	; 0x74
   16d70:	mla	r0, r3, r5, r0
   16d74:	umull	r1, r4, r0, sl
   16d78:	str	r1, [sp, #100]	; 0x64
   16d7c:	umull	r9, r1, r0, r8
   16d80:	str	r1, [sp, #96]	; 0x60
   16d84:	umull	r1, r5, r2, sl
   16d88:	umlal	r1, r5, r0, r8
   16d8c:	adc	r0, r6, #0
   16d90:	umull	r2, r6, r2, r8
   16d94:	adds	r1, r1, r6
   16d98:	adc	r2, r5, #0
   16d9c:	subs	r1, r1, r9
   16da0:	ldr	r1, [sp, #96]	; 0x60
   16da4:	umull	r6, r5, r7, ip
   16da8:	sbcs	r1, r2, r1
   16dac:	mov	r1, #0
   16db0:	movwcc	r1, #1
   16db4:	cmp	r1, #0
   16db8:	ldr	r1, [sp, #100]	; 0x64
   16dbc:	addne	r4, r4, #1
   16dc0:	adds	r1, r1, r2
   16dc4:	adc	r2, r4, #0
   16dc8:	ldr	r4, [sp, #112]	; 0x70
   16dcc:	subs	r3, r3, r6
   16dd0:	sbcs	r3, r0, r5
   16dd4:	mov	r3, #0
   16dd8:	movwcc	r3, #1
   16ddc:	cmp	r3, #0
   16de0:	umull	r6, r5, r4, ip
   16de4:	ldr	r4, [sp, #112]	; 0x70
   16de8:	addne	r5, r5, #1
   16dec:	adds	r0, r6, r0
   16df0:	adc	r3, r5, #0
   16df4:	subs	r0, r0, r1
   16df8:	sbcs	r1, r3, r2
   16dfc:	mov	r2, #0
   16e00:	movwcc	r2, #1
   16e04:	adds	r6, r0, r8
   16e08:	adc	r3, r1, sl
   16e0c:	cmp	r2, #0
   16e10:	moveq	r3, r1
   16e14:	ldr	r1, [sp, #108]	; 0x6c
   16e18:	moveq	r6, r0
   16e1c:	str	r3, [sp, #104]	; 0x68
   16e20:	str	r6, [sp, #100]	; 0x64
   16e24:	b	16c58 <__assert_fail@plt+0x522c>
   16e28:	ldr	r0, [sp, #68]	; 0x44
   16e2c:	ldr	r2, [sp, #100]	; 0x64
   16e30:	ldr	r1, [sp, #64]	; 0x40
   16e34:	ldr	r7, [sp, #104]	; 0x68
   16e38:	eor	r0, r2, r0
   16e3c:	eor	r1, r7, r1
   16e40:	orrs	r0, r0, r1
   16e44:	beq	16f8c <__assert_fail@plt+0x5560>
   16e48:	ldr	r0, [sp, #36]	; 0x24
   16e4c:	ldr	r1, [sp, #32]
   16e50:	eor	r0, r2, r0
   16e54:	eor	r1, r7, r1
   16e58:	orrs	r0, r0, r1
   16e5c:	beq	16f8c <__assert_fail@plt+0x5560>
   16e60:	ldr	r6, [sp, #28]
   16e64:	ldr	r9, [sp, #88]	; 0x58
   16e68:	mov	r1, #0
   16e6c:	cmp	r6, #2
   16e70:	bcc	16a38 <__assert_fail@plt+0x500c>
   16e74:	mov	lr, #2
   16e78:	umull	r0, r1, r7, r2
   16e7c:	str	r7, [sp, #104]	; 0x68
   16e80:	umull	r7, r5, r2, r2
   16e84:	lsl	r3, r1, #1
   16e88:	adds	r8, r5, r0, lsl #1
   16e8c:	str	r1, [sp, #112]	; 0x70
   16e90:	ldr	r5, [sp, #116]	; 0x74
   16e94:	orr	r3, r3, r0, lsr #31
   16e98:	adc	r1, r3, #0
   16e9c:	str	r1, [sp, #108]	; 0x6c
   16ea0:	ldr	r1, [sp, #92]	; 0x5c
   16ea4:	umull	r4, r3, r7, r1
   16ea8:	mla	r3, r7, r9, r3
   16eac:	mla	r3, r8, r1, r3
   16eb0:	umull	r7, r1, r4, sl
   16eb4:	umull	r4, ip, r4, r5
   16eb8:	umlal	r7, r1, r3, r5
   16ebc:	umull	r4, r2, r3, r5
   16ec0:	adds	r7, r7, ip
   16ec4:	adc	r1, r1, #0
   16ec8:	subs	r7, r7, r4
   16ecc:	umull	r3, r7, r3, sl
   16ed0:	ldr	r4, [sp, #108]	; 0x6c
   16ed4:	sbcs	r2, r1, r2
   16ed8:	mov	r2, #0
   16edc:	movwcc	r2, #1
   16ee0:	cmp	r2, #0
   16ee4:	addne	r7, r7, #1
   16ee8:	adds	r1, r3, r1
   16eec:	ldr	r3, [sp, #104]	; 0x68
   16ef0:	adc	r2, r7, #0
   16ef4:	subs	r0, r8, r0
   16ef8:	ldr	r0, [sp, #112]	; 0x70
   16efc:	umull	r3, r7, r3, r3
   16f00:	sbcs	r0, r4, r0
   16f04:	mov	r0, #0
   16f08:	movwcc	r0, #1
   16f0c:	cmp	r0, #0
   16f10:	addne	r7, r7, #1
   16f14:	adds	r0, r3, r4
   16f18:	adc	r3, r7, #0
   16f1c:	subs	r0, r0, r1
   16f20:	sbcs	r1, r3, r2
   16f24:	mov	r2, #0
   16f28:	movwcc	r2, #1
   16f2c:	adds	r3, r0, r5
   16f30:	adc	r7, r1, sl
   16f34:	cmp	r2, #0
   16f38:	moveq	r7, r1
   16f3c:	ldr	r1, [sp, #32]
   16f40:	moveq	r3, r0
   16f44:	ldr	r0, [sp, #36]	; 0x24
   16f48:	eor	r1, r7, r1
   16f4c:	eor	r0, r3, r0
   16f50:	orrs	r0, r0, r1
   16f54:	beq	16f90 <__assert_fail@plt+0x5564>
   16f58:	mov	r1, #0
   16f5c:	cmp	lr, r6
   16f60:	bcs	16a38 <__assert_fail@plt+0x500c>
   16f64:	ldr	r0, [sp, #68]	; 0x44
   16f68:	ldr	r1, [sp, #64]	; 0x40
   16f6c:	mov	r2, r3
   16f70:	add	lr, lr, #1
   16f74:	eor	r0, r3, r0
   16f78:	eor	r1, r7, r1
   16f7c:	orrs	r0, r0, r1
   16f80:	mov	r1, #0
   16f84:	bne	16e78 <__assert_fail@plt+0x544c>
   16f88:	b	16a38 <__assert_fail@plt+0x500c>
   16f8c:	ldr	r9, [sp, #88]	; 0x58
   16f90:	mov	r4, #0
   16f94:	ldr	r2, [sp, #48]	; 0x30
   16f98:	ldr	r3, [sp, #44]	; 0x2c
   16f9c:	add	r0, sp, #120	; 0x78
   16fa0:	mov	r1, #0
   16fa4:	str	r0, [sp]
   16fa8:	mov	r0, #0
   16fac:	str	r0, [sp, #20]
   16fb0:	mov	r0, #0
   16fb4:	bl	129d8 <__assert_fail@plt+0xfac>
   16fb8:	mov	r0, #2
   16fbc:	str	sl, [sp, #84]	; 0x54
   16fc0:	str	r4, [sp, #80]	; 0x50
   16fc4:	str	r0, [sp, #16]
   16fc8:	ldrb	r0, [sp, #370]	; 0x172
   16fcc:	str	r0, [sp, #40]	; 0x28
   16fd0:	mov	r0, #0
   16fd4:	str	r0, [sp, #24]
   16fd8:	ldr	r0, [sp, #40]	; 0x28
   16fdc:	mov	r1, #1
   16fe0:	cmp	r0, #0
   16fe4:	bne	17020 <__assert_fail@plt+0x55f4>
   16fe8:	b	16a38 <__assert_fail@plt+0x500c>
   16fec:	ldr	r0, [sp, #24]
   16ff0:	ldr	sl, [sp, #84]	; 0x54
   16ff4:	ldr	r9, [sp, #88]	; 0x58
   16ff8:	mov	r1, r0
   16ffc:	add	r1, r0, #1
   17000:	cmp	r1, #668	; 0x29c
   17004:	mov	r0, r1
   17008:	str	r1, [sp, #24]
   1700c:	beq	178a8 <__assert_fail@plt+0x5e7c>
   17010:	ldr	r0, [sp, #40]	; 0x28
   17014:	mov	r1, #1
   17018:	cmp	r0, #0
   1701c:	beq	16a38 <__assert_fail@plt+0x500c>
   17020:	mov	r2, #0
   17024:	add	r0, sp, #120	; 0x78
   17028:	ldr	r7, [sp, #44]	; 0x2c
   1702c:	ldr	r6, [sp, #48]	; 0x30
   17030:	str	r2, [sp, #60]	; 0x3c
   17034:	add	r0, r0, r2, lsl #3
   17038:	ldr	r4, [r0, #16]
   1703c:	ldr	r8, [r0, #20]
   17040:	mov	r0, r6
   17044:	mov	r1, r7
   17048:	mov	r2, r4
   1704c:	mov	r3, r8
   17050:	bl	1e668 <__assert_fail@plt+0xcc3c>
   17054:	mov	r5, r0
   17058:	ands	r2, r0, #1
   1705c:	ldr	ip, [sp, #56]	; 0x38
   17060:	ldr	r0, [sp, #64]	; 0x40
   17064:	mov	r2, ip
   17068:	moveq	r2, r0
   1706c:	ldr	r0, [sp, #68]	; 0x44
   17070:	str	r2, [sp, #76]	; 0x4c
   17074:	ldr	r2, [sp, #52]	; 0x34
   17078:	mov	r3, r2
   1707c:	moveq	r3, r0
   17080:	str	r3, [sp, #72]	; 0x48
   17084:	subs	r3, r6, r4
   17088:	sbcs	r3, r7, r8
   1708c:	bcc	172e0 <__assert_fail@plt+0x58b4>
   17090:	mov	r4, r2
   17094:	b	171bc <__assert_fail@plt+0x5790>
   17098:	ldr	r7, [sp, #72]	; 0x48
   1709c:	ldr	r6, [sp, #92]	; 0x5c
   170a0:	ldr	r5, [sp, #88]	; 0x58
   170a4:	str	ip, [sp, #112]	; 0x70
   170a8:	str	r1, [sp, #108]	; 0x6c
   170ac:	ldr	sl, [sp, #80]	; 0x50
   170b0:	umull	r0, lr, r4, r7
   170b4:	umull	r2, r3, r0, r6
   170b8:	mla	r0, r0, r5, r3
   170bc:	umull	r3, r7, ip, r7
   170c0:	ldr	ip, [sp, #76]	; 0x4c
   170c4:	umlal	r3, r7, r4, ip
   170c8:	adds	r3, r3, lr
   170cc:	mla	r0, r3, r6, r0
   170d0:	str	r3, [sp, #104]	; 0x68
   170d4:	umull	r1, r6, r0, r8
   170d8:	mla	r6, r0, sl, r6
   170dc:	str	r1, [sp, #100]	; 0x64
   170e0:	ldr	r1, [sp, #116]	; 0x74
   170e4:	umull	r3, r1, r0, r1
   170e8:	mla	r0, r0, sl, r1
   170ec:	adc	r1, r7, #0
   170f0:	str	r1, [sp, #96]	; 0x60
   170f4:	umull	r7, r1, r2, r8
   170f8:	mla	r1, r2, sl, r1
   170fc:	adds	r7, r3, r7
   17100:	adc	lr, r0, r1
   17104:	ldr	r1, [sp, #116]	; 0x74
   17108:	umull	r5, r1, r2, r1
   1710c:	ldr	r5, [sp, #96]	; 0x60
   17110:	mla	r1, r2, sl, r1
   17114:	ldr	sl, [sp, #84]	; 0x54
   17118:	adds	r1, r7, r1
   1711c:	ldr	r7, [sp, #104]	; 0x68
   17120:	adc	r2, lr, #0
   17124:	subs	r1, r1, r3
   17128:	ldr	r1, [sp, #108]	; 0x6c
   1712c:	sbcs	r0, r2, r0
   17130:	mov	r0, #0
   17134:	movwcc	r0, #1
   17138:	cmp	r0, #0
   1713c:	ldr	r0, [sp, #100]	; 0x64
   17140:	addne	r6, r6, #1
   17144:	adds	r0, r0, r2
   17148:	umull	r2, r3, r4, ip
   1714c:	adc	r6, r6, #0
   17150:	subs	r2, r7, r2
   17154:	sbcs	r2, r5, r3
   17158:	ldr	r3, [sp, #112]	; 0x70
   1715c:	mov	r2, #0
   17160:	movwcc	r2, #1
   17164:	cmp	r2, #0
   17168:	umull	r3, r7, r3, ip
   1716c:	ldr	ip, [sp, #112]	; 0x70
   17170:	addne	r7, r7, #1
   17174:	adds	r2, r3, r5
   17178:	adc	r3, r7, #0
   1717c:	ldr	r7, [sp, #116]	; 0x74
   17180:	subs	r0, r2, r0
   17184:	mov	r2, #0
   17188:	sbcs	r3, r3, r6
   1718c:	movwcc	r2, #1
   17190:	adds	r6, r0, r7
   17194:	adc	r7, r3, sl
   17198:	cmp	r2, #0
   1719c:	moveq	r7, r3
   171a0:	moveq	r6, r0
   171a4:	str	r7, [sp, #76]	; 0x4c
   171a8:	str	r6, [sp, #72]	; 0x48
   171ac:	orrs	r0, r9, r1
   171b0:	mov	r5, r9
   171b4:	ldr	r9, [sp, #88]	; 0x58
   171b8:	beq	172e0 <__assert_fail@plt+0x58b4>
   171bc:	str	r5, [sp, #104]	; 0x68
   171c0:	umull	r5, r6, r4, r4
   171c4:	ldr	r0, [sp, #92]	; 0x5c
   171c8:	str	r1, [sp, #108]	; 0x6c
   171cc:	ldr	r1, [sp, #116]	; 0x74
   171d0:	str	ip, [sp, #112]	; 0x70
   171d4:	umull	r2, r7, r5, r0
   171d8:	mla	r5, r5, r9, r7
   171dc:	umull	r4, r7, ip, r4
   171e0:	adds	r6, r6, r4, lsl #1
   171e4:	str	r7, [sp, #96]	; 0x60
   171e8:	mla	r5, r6, r0, r5
   171ec:	umull	r0, r9, r5, sl
   171f0:	str	r0, [sp, #100]	; 0x64
   171f4:	ldr	r0, [sp, #80]	; 0x50
   171f8:	mla	r3, r5, r0, r9
   171fc:	umull	r9, ip, r5, r1
   17200:	lsl	r1, r7, #1
   17204:	ldr	r7, [sp, #116]	; 0x74
   17208:	orr	r1, r1, r4, lsr #31
   1720c:	mla	r5, r5, r0, ip
   17210:	adc	ip, r1, #0
   17214:	umull	r1, lr, r2, sl
   17218:	umull	sl, r8, r2, r7
   1721c:	ldr	sl, [sp, #84]	; 0x54
   17220:	mla	lr, r2, r0, lr
   17224:	mla	r2, r2, r0, r8
   17228:	ldr	r0, [sp, #100]	; 0x64
   1722c:	adds	r1, r9, r1
   17230:	adc	lr, r5, lr
   17234:	mov	r8, sl
   17238:	adds	r1, r1, r2
   1723c:	adc	r2, lr, #0
   17240:	subs	r1, r1, r9
   17244:	sbcs	r1, r2, r5
   17248:	mov	r1, #0
   1724c:	movwcc	r1, #1
   17250:	cmp	r1, #0
   17254:	ldr	r1, [sp, #108]	; 0x6c
   17258:	addne	r3, r3, #1
   1725c:	adds	r5, r0, r2
   17260:	ldr	r0, [sp, #96]	; 0x60
   17264:	adc	r2, r3, #0
   17268:	subs	r3, r6, r4
   1726c:	sbcs	r3, ip, r0
   17270:	ldr	r0, [sp, #112]	; 0x70
   17274:	mov	r3, #0
   17278:	movwcc	r3, #1
   1727c:	cmp	r3, #0
   17280:	umull	r7, r6, r0, r0
   17284:	addne	r6, r6, #1
   17288:	adds	r3, r7, ip
   1728c:	adc	r7, r6, #0
   17290:	subs	r0, r3, r5
   17294:	mov	r3, #0
   17298:	sbcs	r2, r7, r2
   1729c:	ldr	r7, [sp, #116]	; 0x74
   172a0:	movwcc	r3, #1
   172a4:	adds	r4, r0, r7
   172a8:	adc	ip, r2, sl
   172ac:	cmp	r3, #0
   172b0:	moveq	r4, r0
   172b4:	ldr	r0, [sp, #104]	; 0x68
   172b8:	moveq	ip, r2
   172bc:	lsrs	r1, r1, #1
   172c0:	rrx	r9, r0
   172c4:	tst	r0, #2
   172c8:	bne	17098 <__assert_fail@plt+0x566c>
   172cc:	mov	sl, r8
   172d0:	orrs	r0, r9, r1
   172d4:	mov	r5, r9
   172d8:	ldr	r9, [sp, #88]	; 0x58
   172dc:	bne	171bc <__assert_fail@plt+0x5790>
   172e0:	ldr	r0, [sp, #68]	; 0x44
   172e4:	ldr	r1, [sp, #72]	; 0x48
   172e8:	ldr	r2, [sp, #76]	; 0x4c
   172ec:	eor	r0, r1, r0
   172f0:	ldr	r1, [sp, #64]	; 0x40
   172f4:	eor	r1, r2, r1
   172f8:	ldr	r2, [sp, #60]	; 0x3c
   172fc:	orrs	r0, r0, r1
   17300:	beq	17314 <__assert_fail@plt+0x58e8>
   17304:	ldr	r1, [sp, #40]	; 0x28
   17308:	add	r2, r2, #1
   1730c:	cmp	r2, r1
   17310:	bcc	17024 <__assert_fail@plt+0x55f8>
   17314:	cmp	r0, #0
   17318:	mov	r1, #1
   1731c:	bne	16a38 <__assert_fail@plt+0x500c>
   17320:	ldr	r1, [sp, #24]
   17324:	movw	r0, #6520	; 0x1978
   17328:	ldr	r4, [sp, #16]
   1732c:	ldr	r5, [sp, #20]
   17330:	ldr	r2, [sp, #68]	; 0x44
   17334:	ldr	r3, [sp, #64]	; 0x40
   17338:	movt	r0, #2
   1733c:	ldrb	r0, [r0, r1]
   17340:	adds	r4, r4, r0
   17344:	adc	r5, r5, #0
   17348:	str	r4, [sp, #16]
   1734c:	umull	r7, r6, r5, r2
   17350:	umull	r0, r2, r4, r2
   17354:	str	r5, [sp, #20]
   17358:	umlal	r7, r6, r4, r3
   1735c:	adds	r1, r7, r2
   17360:	adc	r7, r6, #0
   17364:	umull	r6, r2, r4, r3
   17368:	subs	r6, r1, r6
   1736c:	mov	r6, #0
   17370:	sbcs	r2, r7, r2
   17374:	umull	r2, r3, r5, r3
   17378:	movwcc	r6, #1
   1737c:	cmp	r6, #0
   17380:	addne	r3, r3, #1
   17384:	adds	r7, r2, r7
   17388:	adc	ip, r3, #0
   1738c:	orrs	r2, r7, ip
   17390:	bne	17788 <__assert_fail@plt+0x5d5c>
   17394:	ldr	r2, [sp, #116]	; 0x74
   17398:	mov	r3, sl
   1739c:	bl	1e668 <__assert_fail@plt+0xcc3c>
   173a0:	ldr	r5, [sp, #92]	; 0x5c
   173a4:	ldr	r0, [sp, #4]
   173a8:	str	r2, [sp, #52]	; 0x34
   173ac:	str	r2, [sp, #72]	; 0x48
   173b0:	str	r3, [sp, #56]	; 0x38
   173b4:	str	r3, [sp, #76]	; 0x4c
   173b8:	cmp	r0, #0
   173bc:	beq	17600 <__assert_fail@plt+0x5bd4>
   173c0:	ldr	r0, [sp, #56]	; 0x38
   173c4:	ldr	r9, [sp, #52]	; 0x34
   173c8:	ldr	r2, [sp, #8]
   173cc:	ldr	r1, [sp, #12]
   173d0:	mov	r7, r0
   173d4:	str	r9, [sp, #72]	; 0x48
   173d8:	str	r0, [sp, #76]	; 0x4c
   173dc:	b	173ec <__assert_fail@plt+0x59c0>
   173e0:	ldr	r5, [sp, #92]	; 0x5c
   173e4:	orrs	r0, r2, r1
   173e8:	beq	17600 <__assert_fail@plt+0x5bd4>
   173ec:	umull	r6, r4, r9, r9
   173f0:	str	r1, [sp, #112]	; 0x70
   173f4:	ldr	r1, [sp, #88]	; 0x58
   173f8:	str	r2, [sp, #108]	; 0x6c
   173fc:	str	r7, [sp, #104]	; 0x68
   17400:	ldr	lr, [sp, #80]	; 0x50
   17404:	umull	r2, r0, r6, r5
   17408:	mla	r0, r6, r1, r0
   1740c:	umull	r6, r7, r7, r9
   17410:	adds	r4, r4, r6, lsl #1
   17414:	str	r7, [sp, #96]	; 0x60
   17418:	mla	r0, r4, r5, r0
   1741c:	lsl	r5, r7, #1
   17420:	ldr	r7, [sp, #116]	; 0x74
   17424:	orr	r5, r5, r6, lsr #31
   17428:	umull	r1, r3, r0, sl
   1742c:	mla	r3, r0, lr, r3
   17430:	str	r1, [sp, #100]	; 0x64
   17434:	ldr	r1, [sp, #116]	; 0x74
   17438:	umull	r1, ip, r0, r1
   1743c:	mla	r0, r0, lr, ip
   17440:	adc	ip, r5, #0
   17444:	umull	r5, r8, r2, sl
   17448:	umull	r9, sl, r2, r7
   1744c:	mla	r8, r2, lr, r8
   17450:	mla	r2, r2, lr, sl
   17454:	ldr	sl, [sp, #84]	; 0x54
   17458:	adds	r5, r1, r5
   1745c:	adc	r8, r0, r8
   17460:	adds	r2, r5, r2
   17464:	adc	r5, r8, #0
   17468:	subs	r1, r2, r1
   1746c:	sbcs	r0, r5, r0
   17470:	mov	r0, #0
   17474:	movwcc	r0, #1
   17478:	cmp	r0, #0
   1747c:	ldr	r0, [sp, #100]	; 0x64
   17480:	addne	r3, r3, #1
   17484:	adds	r0, r0, r5
   17488:	adc	r1, r3, #0
   1748c:	ldr	r3, [sp, #104]	; 0x68
   17490:	subs	r2, r4, r6
   17494:	ldr	r2, [sp, #96]	; 0x60
   17498:	umull	r3, r4, r3, r3
   1749c:	sbcs	r2, ip, r2
   174a0:	mov	r2, #0
   174a4:	movwcc	r2, #1
   174a8:	cmp	r2, #0
   174ac:	addne	r4, r4, #1
   174b0:	adds	r2, r3, ip
   174b4:	adc	r3, r4, #0
   174b8:	subs	r0, r2, r0
   174bc:	mov	r2, #0
   174c0:	sbcs	r1, r3, r1
   174c4:	ldr	r3, [sp, #116]	; 0x74
   174c8:	movwcc	r2, #1
   174cc:	adds	r9, r0, r3
   174d0:	adc	r7, r1, sl
   174d4:	cmp	r2, #0
   174d8:	moveq	r7, r1
   174dc:	ldr	r1, [sp, #112]	; 0x70
   174e0:	moveq	r9, r0
   174e4:	ldr	r0, [sp, #108]	; 0x6c
   174e8:	lsrs	r1, r1, #1
   174ec:	rrx	r2, r0
   174f0:	tst	r0, #2
   174f4:	beq	173e0 <__assert_fail@plt+0x59b4>
   174f8:	ldr	r6, [sp, #72]	; 0x48
   174fc:	str	r1, [sp, #112]	; 0x70
   17500:	ldr	r4, [sp, #92]	; 0x5c
   17504:	ldr	r5, [sp, #88]	; 0x58
   17508:	str	r2, [sp, #108]	; 0x6c
   1750c:	ldr	ip, [sp, #76]	; 0x4c
   17510:	umull	r0, r1, r9, r6
   17514:	umull	r2, r3, r0, r4
   17518:	mla	r0, r0, r5, r3
   1751c:	umull	r3, r6, r7, r6
   17520:	umlal	r3, r6, r9, ip
   17524:	adds	r1, r3, r1
   17528:	mla	r0, r1, r4, r0
   1752c:	str	r1, [sp, #104]	; 0x68
   17530:	adc	r8, r6, #0
   17534:	umull	r1, r5, r0, sl
   17538:	mla	r5, r0, lr, r5
   1753c:	str	r1, [sp, #100]	; 0x64
   17540:	ldr	r1, [sp, #116]	; 0x74
   17544:	umull	r3, r1, r0, r1
   17548:	mla	r0, r0, lr, r1
   1754c:	umull	r6, r1, r2, sl
   17550:	mla	r1, r2, lr, r1
   17554:	adds	r6, r3, r6
   17558:	adc	sl, r0, r1
   1755c:	ldr	r1, [sp, #116]	; 0x74
   17560:	umull	r4, r1, r2, r1
   17564:	mla	r1, r2, lr, r1
   17568:	adds	r1, r6, r1
   1756c:	ldr	r6, [sp, #104]	; 0x68
   17570:	adc	r2, sl, #0
   17574:	subs	r1, r1, r3
   17578:	ldr	sl, [sp, #84]	; 0x54
   1757c:	sbcs	r0, r2, r0
   17580:	mov	r0, #0
   17584:	movwcc	r0, #1
   17588:	cmp	r0, #0
   1758c:	ldr	r0, [sp, #100]	; 0x64
   17590:	addne	r5, r5, #1
   17594:	adds	r0, r0, r2
   17598:	umull	r2, r3, r9, ip
   1759c:	adc	r1, r5, #0
   175a0:	subs	r2, r6, r2
   175a4:	sbcs	r2, r8, r3
   175a8:	umull	r3, r6, r7, ip
   175ac:	mov	r2, #0
   175b0:	movwcc	r2, #1
   175b4:	cmp	r2, #0
   175b8:	addne	r6, r6, #1
   175bc:	adds	r2, r3, r8
   175c0:	adc	r3, r6, #0
   175c4:	subs	r0, r2, r0
   175c8:	mov	r2, #0
   175cc:	sbcs	r1, r3, r1
   175d0:	ldr	r3, [sp, #116]	; 0x74
   175d4:	movwcc	r2, #1
   175d8:	adds	r6, r0, r3
   175dc:	adc	r3, r1, sl
   175e0:	cmp	r2, #0
   175e4:	ldr	r2, [sp, #108]	; 0x6c
   175e8:	moveq	r3, r1
   175ec:	ldr	r1, [sp, #112]	; 0x70
   175f0:	moveq	r6, r0
   175f4:	str	r3, [sp, #76]	; 0x4c
   175f8:	str	r6, [sp, #72]	; 0x48
   175fc:	b	173e0 <__assert_fail@plt+0x59b4>
   17600:	ldr	r0, [sp, #68]	; 0x44
   17604:	ldr	r4, [sp, #72]	; 0x48
   17608:	ldr	r1, [sp, #64]	; 0x40
   1760c:	ldr	r5, [sp, #76]	; 0x4c
   17610:	eor	r0, r4, r0
   17614:	eor	r1, r5, r1
   17618:	orrs	r0, r0, r1
   1761c:	beq	16fec <__assert_fail@plt+0x55c0>
   17620:	ldr	r0, [sp, #36]	; 0x24
   17624:	ldr	r1, [sp, #32]
   17628:	eor	r0, r4, r0
   1762c:	eor	r1, r5, r1
   17630:	orrs	r0, r0, r1
   17634:	beq	16fec <__assert_fail@plt+0x55c0>
   17638:	ldr	r0, [sp, #28]
   1763c:	mov	r1, #0
   17640:	cmp	r0, #2
   17644:	bcc	16a38 <__assert_fail@plt+0x500c>
   17648:	mov	r9, #2
   1764c:	umull	r0, r1, r4, r4
   17650:	ldr	r2, [sp, #92]	; 0x5c
   17654:	ldr	r6, [sp, #88]	; 0x58
   17658:	ldr	lr, [sp, #84]	; 0x54
   1765c:	ldr	sl, [sp, #80]	; 0x50
   17660:	str	r5, [sp, #76]	; 0x4c
   17664:	umull	r3, r7, r0, r2
   17668:	mla	r0, r0, r6, r7
   1766c:	umull	r7, ip, r5, r4
   17670:	adds	r8, r1, r7, lsl #1
   17674:	str	ip, [sp, #108]	; 0x6c
   17678:	mla	r0, r8, r2, r0
   1767c:	ldr	r2, [sp, #116]	; 0x74
   17680:	umull	r1, r4, r0, lr
   17684:	mla	r4, r0, sl, r4
   17688:	str	r1, [sp, #112]	; 0x70
   1768c:	ldr	r1, [sp, #116]	; 0x74
   17690:	umull	r5, r6, r0, r1
   17694:	mla	r0, r0, sl, r6
   17698:	lsl	r6, ip, #1
   1769c:	umull	r2, ip, r3, r2
   176a0:	orr	r6, r6, r7, lsr #31
   176a4:	mla	r2, r3, sl, ip
   176a8:	adc	r1, r6, #0
   176ac:	str	r1, [sp, #104]	; 0x68
   176b0:	umull	r1, r6, r3, lr
   176b4:	mla	r6, r3, sl, r6
   176b8:	ldr	r3, [sp, #76]	; 0x4c
   176bc:	adds	r1, r5, r1
   176c0:	adc	r6, r0, r6
   176c4:	adds	r1, r1, r2
   176c8:	adc	r2, r6, #0
   176cc:	subs	r1, r1, r5
   176d0:	ldr	r6, [sp, #104]	; 0x68
   176d4:	sbcs	r0, r2, r0
   176d8:	mov	r0, #0
   176dc:	movwcc	r0, #1
   176e0:	cmp	r0, #0
   176e4:	ldr	r0, [sp, #112]	; 0x70
   176e8:	addne	r4, r4, #1
   176ec:	adds	r0, r0, r2
   176f0:	adc	r1, r4, #0
   176f4:	subs	r2, r8, r7
   176f8:	ldr	r2, [sp, #108]	; 0x6c
   176fc:	umull	r3, r7, r3, r3
   17700:	sbcs	r2, r6, r2
   17704:	mov	r2, #0
   17708:	movwcc	r2, #1
   1770c:	cmp	r2, #0
   17710:	addne	r7, r7, #1
   17714:	adds	r2, r3, r6
   17718:	adc	r3, r7, #0
   1771c:	subs	r0, r2, r0
   17720:	mov	r2, #0
   17724:	sbcs	r1, r3, r1
   17728:	ldr	r3, [sp, #116]	; 0x74
   1772c:	movwcc	r2, #1
   17730:	adds	r4, r0, r3
   17734:	adc	r5, r1, lr
   17738:	cmp	r2, #0
   1773c:	moveq	r5, r1
   17740:	ldr	r1, [sp, #32]
   17744:	moveq	r4, r0
   17748:	ldr	r0, [sp, #36]	; 0x24
   1774c:	eor	r1, r5, r1
   17750:	eor	r0, r4, r0
   17754:	orrs	r0, r0, r1
   17758:	beq	16fec <__assert_fail@plt+0x55c0>
   1775c:	ldr	r0, [sp, #28]
   17760:	cmp	r9, r0
   17764:	bcs	17858 <__assert_fail@plt+0x5e2c>
   17768:	ldr	r0, [sp, #68]	; 0x44
   1776c:	ldr	r1, [sp, #64]	; 0x40
   17770:	add	r9, r9, #1
   17774:	eor	r0, r4, r0
   17778:	eor	r1, r5, r1
   1777c:	orrs	r0, r0, r1
   17780:	bne	1764c <__assert_fail@plt+0x5c20>
   17784:	b	17858 <__assert_fail@plt+0x5e2c>
   17788:	mov	r6, r0
   1778c:	ldr	r0, [sp, #116]	; 0x74
   17790:	subs	r2, r7, r0
   17794:	sbcs	r2, ip, sl
   17798:	bcs	17868 <__assert_fail@plt+0x5e3c>
   1779c:	ldr	r0, [sp, #116]	; 0x74
   177a0:	mov	r3, r1
   177a4:	mvn	r1, #63	; 0x3f
   177a8:	mov	r9, #0
   177ac:	mov	r4, sl
   177b0:	mov	r2, r6
   177b4:	mov	lr, #0
   177b8:	b	17810 <__assert_fail@plt+0x5de4>
   177bc:	ldr	r3, [sp, #56]	; 0x38
   177c0:	subs	r6, r7, r0
   177c4:	sbc	r5, ip, r4
   177c8:	subs	r7, r6, #1
   177cc:	sbc	ip, r5, #0
   177d0:	subs	r2, r2, lr
   177d4:	sbcs	r3, r3, r9
   177d8:	str	r3, [sp, #56]	; 0x38
   177dc:	mov	r3, r0
   177e0:	mov	r0, r4
   177e4:	mov	r4, #0
   177e8:	movwcc	r4, #1
   177ec:	cmp	r4, #0
   177f0:	mov	r4, r0
   177f4:	mov	r0, r3
   177f8:	moveq	r7, r6
   177fc:	moveq	ip, r5
   17800:	ldr	r5, [sp, #92]	; 0x5c
   17804:	ldr	r3, [sp, #56]	; 0x38
   17808:	adds	r1, r1, #1
   1780c:	bcs	173a4 <__assert_fail@plt+0x5978>
   17810:	lsrs	r6, r9, #1
   17814:	rrx	lr, lr
   17818:	lsrs	r4, r4, #1
   1781c:	str	r3, [sp, #56]	; 0x38
   17820:	orr	r9, r6, r0, lsl #31
   17824:	rrx	r0, r0
   17828:	subs	r6, r0, r7
   1782c:	sbcs	r6, r4, ip
   17830:	bcc	177bc <__assert_fail@plt+0x5d90>
   17834:	eor	r6, r7, r0
   17838:	eor	r5, ip, r4
   1783c:	orrs	r6, r6, r5
   17840:	bne	17800 <__assert_fail@plt+0x5dd4>
   17844:	ldr	r3, [sp, #56]	; 0x38
   17848:	subs	r6, r2, lr
   1784c:	sbcs	r6, r3, r9
   17850:	bcs	177bc <__assert_fail@plt+0x5d90>
   17854:	b	17800 <__assert_fail@plt+0x5dd4>
   17858:	mov	r1, #0
   1785c:	mov	r0, r1
   17860:	sub	sp, fp, #28
   17864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17868:	movw	r0, #60482	; 0xec42
   1786c:	movw	r1, #60384	; 0xebe0
   17870:	movw	r3, #60457	; 0xec29
   17874:	movw	r2, #1262	; 0x4ee
   17878:	movt	r0, #1
   1787c:	movt	r1, #1
   17880:	movt	r3, #1
   17884:	bl	11a2c <__assert_fail@plt>
   17888:	movw	r0, #60447	; 0xec1f
   1788c:	movw	r1, #60384	; 0xebe0
   17890:	movw	r3, #60457	; 0xec29
   17894:	movw	r2, #1214	; 0x4be
   17898:	movt	r0, #1
   1789c:	movt	r1, #1
   178a0:	movt	r3, #1
   178a4:	bl	11a2c <__assert_fail@plt>
   178a8:	movw	r1, #60397	; 0xebed
   178ac:	mov	r0, #0
   178b0:	mov	r2, #5
   178b4:	movt	r1, #1
   178b8:	bl	116fc <dcgettext@plt>
   178bc:	mov	r2, r0
   178c0:	mov	r0, #0
   178c4:	mov	r1, #0
   178c8:	bl	117ec <error@plt>
   178cc:	bl	11a20 <abort@plt>
   178d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178d4:	add	fp, sp, #28
   178d8:	sub	sp, sp, #84	; 0x54
   178dc:	str	r0, [fp, #-52]	; 0xffffffcc
   178e0:	ldr	r0, [fp, #44]	; 0x2c
   178e4:	mvn	sl, #63	; 0x3f
   178e8:	ldm	r1, {r6, r8, ip, lr}
   178ec:	str	r2, [sp, #52]	; 0x34
   178f0:	ldr	r4, [r2]
   178f4:	ldr	r1, [r2, #4]
   178f8:	str	r0, [fp, #-36]	; 0xffffffdc
   178fc:	ldr	r0, [fp, #40]	; 0x28
   17900:	str	r0, [fp, #-40]	; 0xffffffd8
   17904:	ldr	r0, [fp, #36]	; 0x24
   17908:	str	r0, [fp, #-44]	; 0xffffffd4
   1790c:	ldr	r0, [fp, #32]
   17910:	str	r0, [fp, #-48]	; 0xffffffd0
   17914:	tst	r4, #1
   17918:	str	r1, [fp, #-32]	; 0xffffffe0
   1791c:	beq	17a20 <__assert_fail@plt+0x5ff4>
   17920:	ldr	r0, [fp, #12]
   17924:	ldr	r7, [fp, #8]
   17928:	ldr	r9, [fp, #-52]	; 0xffffffcc
   1792c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17930:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17934:	str	r8, [sp, #56]	; 0x38
   17938:	mov	r5, ip
   1793c:	str	r0, [sp, #36]	; 0x24
   17940:	ldr	r0, [fp, #24]
   17944:	str	r7, [sp, #32]
   17948:	str	r0, [sp, #40]	; 0x28
   1794c:	ldr	r0, [fp, #28]
   17950:	str	r0, [sp, #44]	; 0x2c
   17954:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17958:	str	r0, [sp]
   1795c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17960:	stmib	sp, {r0, ip, lr}
   17964:	ldr	r0, [fp, #16]
   17968:	str	r8, [sp, #20]
   1796c:	str	r6, [sp, #16]
   17970:	mov	r8, lr
   17974:	str	r0, [sp, #24]
   17978:	ldr	r0, [fp, #20]
   1797c:	str	r0, [sp, #28]
   17980:	mov	r0, r9
   17984:	bl	17b7c <__assert_fail@plt+0x6150>
   17988:	str	r0, [fp, #-48]	; 0xffffffd0
   1798c:	str	r1, [fp, #-44]	; 0xffffffd4
   17990:	add	ip, fp, #12
   17994:	mov	lr, r8
   17998:	ldr	r8, [sp, #56]	; 0x38
   1799c:	ldr	r1, [r9]
   179a0:	ldr	r0, [r9, #4]
   179a4:	ldm	ip, {r2, r3, ip}
   179a8:	str	r1, [fp, #-40]	; 0xffffffd8
   179ac:	str	r0, [fp, #-36]	; 0xffffffdc
   179b0:	ldr	r1, [fp, #24]
   179b4:	ldr	r0, [fp, #28]
   179b8:	str	r2, [sp, #36]	; 0x24
   179bc:	str	r0, [sp, #44]	; 0x2c
   179c0:	str	r7, [sp, #32]
   179c4:	str	r1, [sp, #40]	; 0x28
   179c8:	stm	sp, {r6, r8}
   179cc:	str	r3, [sp, #24]
   179d0:	mov	r0, r9
   179d4:	mov	r2, r5
   179d8:	mov	r3, lr
   179dc:	str	r5, [sp, #8]
   179e0:	str	lr, [sp, #12]
   179e4:	str	r6, [sp, #16]
   179e8:	str	r8, [sp, #20]
   179ec:	str	ip, [sp, #28]
   179f0:	bl	17b7c <__assert_fail@plt+0x6150>
   179f4:	mov	r8, r1
   179f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   179fc:	ldm	r9, {ip, lr}
   17a00:	mov	r6, r0
   17a04:	lsrs	r1, r1, #1
   17a08:	rrx	r4, r4
   17a0c:	adds	sl, sl, #1
   17a10:	bcs	17a48 <__assert_fail@plt+0x601c>
   17a14:	tst	r4, #1
   17a18:	str	r1, [fp, #-32]	; 0xffffffe0
   17a1c:	bne	17920 <__assert_fail@plt+0x5ef4>
   17a20:	ldr	r2, [fp, #20]
   17a24:	mov	r5, ip
   17a28:	ldr	r9, [fp, #-52]	; 0xffffffcc
   17a2c:	ldr	r0, [fp, #28]
   17a30:	ldr	r1, [fp, #24]
   17a34:	ldr	r3, [fp, #16]
   17a38:	ldr	r7, [fp, #8]
   17a3c:	mov	ip, r2
   17a40:	ldr	r2, [fp, #12]
   17a44:	b	179b8 <__assert_fail@plt+0x5f8c>
   17a48:	ldr	r0, [sp, #52]	; 0x34
   17a4c:	ldr	r4, [r0, #8]
   17a50:	ldr	r9, [r0, #12]
   17a54:	orrs	r0, r4, r9
   17a58:	beq	17b5c <__assert_fail@plt+0x6130>
   17a5c:	ldr	sl, [fp, #-52]	; 0xffffffcc
   17a60:	b	17ab4 <__assert_fail@plt+0x6088>
   17a64:	str	r0, [sp, #44]	; 0x2c
   17a68:	str	r7, [sp, #32]
   17a6c:	str	r5, [sp, #36]	; 0x24
   17a70:	str	r1, [sp, #40]	; 0x28
   17a74:	stm	sp, {r6, r8, ip, lr}
   17a78:	str	r3, [sp, #24]
   17a7c:	str	r2, [sp, #28]
   17a80:	mov	r0, sl
   17a84:	mov	r2, ip
   17a88:	mov	r3, lr
   17a8c:	str	r6, [sp, #16]
   17a90:	str	r8, [sp, #20]
   17a94:	bl	17b7c <__assert_fail@plt+0x6150>
   17a98:	lsrs	r9, r9, #1
   17a9c:	ldm	sl, {ip, lr}
   17aa0:	rrx	r4, r4
   17aa4:	mov	r6, r0
   17aa8:	mov	r8, r1
   17aac:	orrs	r0, r4, r9
   17ab0:	beq	17b60 <__assert_fail@plt+0x6134>
   17ab4:	ldr	r0, [fp, #28]
   17ab8:	ldr	r1, [fp, #24]
   17abc:	ldr	r2, [fp, #20]
   17ac0:	ldr	r3, [fp, #16]
   17ac4:	ldr	r5, [fp, #12]
   17ac8:	ldr	r7, [fp, #8]
   17acc:	tst	r4, #1
   17ad0:	beq	17a64 <__assert_fail@plt+0x6038>
   17ad4:	str	r0, [sp, #44]	; 0x2c
   17ad8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17adc:	str	r7, [sp, #32]
   17ae0:	str	r5, [sp, #36]	; 0x24
   17ae4:	str	r1, [sp, #40]	; 0x28
   17ae8:	mov	r5, lr
   17aec:	mov	r7, ip
   17af0:	str	r0, [sp]
   17af4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17af8:	stmib	sp, {r0, ip, lr}
   17afc:	str	r3, [sp, #24]
   17b00:	str	r2, [sp, #28]
   17b04:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17b08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17b0c:	mov	r0, sl
   17b10:	str	r6, [sp, #16]
   17b14:	str	r8, [sp, #20]
   17b18:	bl	17b7c <__assert_fail@plt+0x6150>
   17b1c:	str	r1, [fp, #-44]	; 0xffffffd4
   17b20:	str	r0, [fp, #-48]	; 0xffffffd0
   17b24:	mov	r2, sl
   17b28:	mov	ip, r7
   17b2c:	mov	lr, r5
   17b30:	ldr	r7, [fp, #8]
   17b34:	ldr	r5, [fp, #12]
   17b38:	ldr	r3, [fp, #16]
   17b3c:	ldr	r1, [fp, #24]
   17b40:	ldm	sl, {r0, sl}
   17b44:	str	sl, [fp, #-36]	; 0xffffffdc
   17b48:	mov	sl, r2
   17b4c:	ldr	r2, [fp, #20]
   17b50:	str	r0, [fp, #-40]	; 0xffffffd8
   17b54:	ldr	r0, [fp, #28]
   17b58:	b	17a64 <__assert_fail@plt+0x6038>
   17b5c:	ldr	sl, [fp, #-52]	; 0xffffffcc
   17b60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17b64:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17b68:	strd	r0, [sl]
   17b6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17b70:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17b74:	sub	sp, fp, #28
   17b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b80:	add	fp, sp, #28
   17b84:	sub	sp, sp, #84	; 0x54
   17b88:	ldr	r1, [fp, #48]	; 0x30
   17b8c:	ldr	r7, [fp, #52]	; 0x34
   17b90:	rsbs	r4, r1, #0
   17b94:	rsc	ip, r7, #0
   17b98:	cmn	r3, #1
   17b9c:	ble	180e8 <__assert_fail@plt+0x66bc>
   17ba0:	ldr	r1, [fp, #16]
   17ba4:	ldr	r7, [fp, #20]
   17ba8:	mvn	r6, #0
   17bac:	subs	r1, r6, r1
   17bb0:	sbcs	r1, r6, r7
   17bb4:	bge	18108 <__assert_fail@plt+0x66dc>
   17bb8:	sub	r1, fp, #40	; 0x28
   17bbc:	stm	r1, {r0, r2, r3}
   17bc0:	ldr	r0, [fp, #32]
   17bc4:	ldr	r2, [fp, #36]	; 0x24
   17bc8:	subs	r1, r6, r0
   17bcc:	sbcs	r0, r6, r2
   17bd0:	bge	18128 <__assert_fail@plt+0x66fc>
   17bd4:	ldr	r7, [fp, #24]
   17bd8:	ldr	r2, [fp, #8]
   17bdc:	ldr	lr, [fp, #28]
   17be0:	ldr	r8, [fp, #12]
   17be4:	ldr	r5, [fp, #44]	; 0x2c
   17be8:	ldr	sl, [fp, #40]	; 0x28
   17bec:	str	ip, [fp, #-44]	; 0xffffffd4
   17bf0:	str	r4, [fp, #-48]	; 0xffffffd0
   17bf4:	umull	r3, r0, r7, r2
   17bf8:	umull	r9, r1, r3, r4
   17bfc:	str	r3, [sp, #32]
   17c00:	mla	r3, r3, ip, r1
   17c04:	umull	r1, r6, lr, r2
   17c08:	mov	lr, r2
   17c0c:	umlal	r1, r6, r7, r8
   17c10:	mov	r7, r8
   17c14:	adds	r0, r1, r0
   17c18:	str	r0, [sp, #28]
   17c1c:	mla	r0, r0, r4, r3
   17c20:	umull	r1, r2, r0, r5
   17c24:	str	r2, [sp, #24]
   17c28:	str	r1, [sp, #36]	; 0x24
   17c2c:	umull	r2, r1, r0, sl
   17c30:	str	r2, [sp, #16]
   17c34:	str	r1, [sp, #20]
   17c38:	umull	r2, r1, r9, r5
   17c3c:	umlal	r2, r1, r0, sl
   17c40:	str	r1, [sp, #12]
   17c44:	ldr	r1, [fp, #36]	; 0x24
   17c48:	str	r2, [sp, #8]
   17c4c:	umull	r1, sl, r0, r1
   17c50:	str	r1, [sp, #4]
   17c54:	ldr	r1, [fp, #32]
   17c58:	umull	r8, ip, r0, r1
   17c5c:	ldr	r1, [fp, #36]	; 0x24
   17c60:	umull	r3, r2, r9, r1
   17c64:	ldr	r1, [fp, #32]
   17c68:	umlal	r3, r2, r0, r1
   17c6c:	adc	r0, r6, #0
   17c70:	str	r0, [sp, #40]	; 0x28
   17c74:	ldr	r0, [fp, #32]
   17c78:	umull	r1, r0, r9, r0
   17c7c:	adds	r0, r3, r0
   17c80:	str	r1, [sp, #48]	; 0x30
   17c84:	mov	r3, lr
   17c88:	str	r0, [sp, #44]	; 0x2c
   17c8c:	adc	r6, r2, #0
   17c90:	subs	r0, r0, r8
   17c94:	sbcs	r0, r6, ip
   17c98:	mov	r0, #0
   17c9c:	movwcc	r0, #1
   17ca0:	cmp	r0, #0
   17ca4:	ldr	r0, [fp, #20]
   17ca8:	addne	sl, sl, #1
   17cac:	umull	r1, r2, r0, lr
   17cb0:	ldr	lr, [fp, #16]
   17cb4:	mov	r0, r7
   17cb8:	umlal	r1, r2, lr, r7
   17cbc:	umull	r7, r3, lr, r3
   17cc0:	mov	r5, lr
   17cc4:	adds	r4, r1, r3
   17cc8:	umull	r3, r8, lr, r0
   17ccc:	str	r7, [sp]
   17cd0:	ldr	r7, [fp, #20]
   17cd4:	adc	r2, r2, #0
   17cd8:	subs	r3, r4, r3
   17cdc:	sbcs	r3, r2, r8
   17ce0:	umull	r8, r0, r7, r0
   17ce4:	mov	r3, #0
   17ce8:	movwcc	r3, #1
   17cec:	cmp	r3, #0
   17cf0:	addne	r0, r0, #1
   17cf4:	adds	lr, r8, r2
   17cf8:	ldr	r2, [fp, #20]
   17cfc:	adc	ip, r0, #0
   17d00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17d04:	umull	r3, r8, r2, r0
   17d08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17d0c:	umlal	r3, r8, r5, r2
   17d10:	umull	r2, r7, r5, r0
   17d14:	ldr	r5, [fp, #8]
   17d18:	adds	r7, r3, r7
   17d1c:	str	r2, [sp, #56]	; 0x38
   17d20:	adc	r3, r8, #0
   17d24:	adds	r2, lr, r2
   17d28:	str	r7, [sp, #52]	; 0x34
   17d2c:	str	r3, [fp, #-52]	; 0xffffffcc
   17d30:	ldr	r3, [sp, #4]
   17d34:	adc	r0, ip, r7
   17d38:	adds	r2, r2, r6
   17d3c:	ldr	r6, [fp, #16]
   17d40:	adc	r0, r0, #0
   17d44:	adds	r2, r2, r3
   17d48:	ldr	r3, [sp, #28]
   17d4c:	adc	r8, r0, sl
   17d50:	adds	sl, r2, #1
   17d54:	str	r2, [sp, #4]
   17d58:	ldr	r2, [fp, #40]	; 0x28
   17d5c:	ldr	r0, [sp, #8]
   17d60:	adc	ip, r8, #0
   17d64:	umull	r2, r7, r9, r2
   17d68:	adds	r2, r0, r7
   17d6c:	ldr	r0, [sp, #12]
   17d70:	adc	r7, r0, #0
   17d74:	ldr	r0, [sp, #16]
   17d78:	subs	r2, r2, r0
   17d7c:	ldr	r0, [sp, #20]
   17d80:	sbcs	r2, r7, r0
   17d84:	mov	r2, #0
   17d88:	ldr	r0, [sp, #24]
   17d8c:	movwcc	r2, #1
   17d90:	cmp	r2, #0
   17d94:	ldr	r2, [sp, #32]
   17d98:	addne	r0, r0, #1
   17d9c:	orrs	r2, r2, r3
   17da0:	mov	r2, #1
   17da4:	umlal	r2, r1, r6, r5
   17da8:	ldr	r5, [sp]
   17dac:	moveq	r1, r4
   17db0:	ldr	r4, [sp, #36]	; 0x24
   17db4:	moveq	r2, r5
   17db8:	adds	r7, r7, r2
   17dbc:	adc	r5, r1, #0
   17dc0:	adds	r7, r7, r4
   17dc4:	ldr	r4, [fp, #24]
   17dc8:	adc	lr, r5, r0
   17dcc:	subs	r2, r7, r2
   17dd0:	ldr	r0, [sp, #4]
   17dd4:	ldr	r2, [fp, #12]
   17dd8:	ldr	r5, [sp, #40]	; 0x28
   17ddc:	sbcs	r1, lr, r1
   17de0:	mov	r1, #0
   17de4:	movwcc	r1, #1
   17de8:	cmp	r1, #0
   17dec:	moveq	sl, r0
   17df0:	umull	r0, r1, r4, r2
   17df4:	moveq	ip, r8
   17df8:	subs	r0, r3, r0
   17dfc:	ldr	r3, [fp, #28]
   17e00:	sbcs	r0, r5, r1
   17e04:	mov	r0, #0
   17e08:	movwcc	r0, #1
   17e0c:	cmp	r0, #0
   17e10:	umull	r1, r2, r3, r2
   17e14:	addne	r2, r2, #1
   17e18:	adds	r0, r1, r5
   17e1c:	adc	r1, r2, #0
   17e20:	ldr	r2, [sp, #48]	; 0x30
   17e24:	adds	r0, r0, r7
   17e28:	mov	r7, r3
   17e2c:	adcs	r1, r1, lr
   17e30:	adcs	r8, sl, #0
   17e34:	adc	sl, ip, #0
   17e38:	adds	r9, r0, r2
   17e3c:	ldr	r0, [sp, #44]	; 0x2c
   17e40:	adcs	r1, r1, r0
   17e44:	mrs	lr, CPSR
   17e48:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17e4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e50:	umull	r6, r5, r3, r2
   17e54:	mov	r3, r4
   17e58:	umlal	r6, r5, r4, r0
   17e5c:	umull	r2, r4, r4, r2
   17e60:	adds	r4, r6, r4
   17e64:	adc	r6, r5, #0
   17e68:	umull	r5, r3, r3, r0
   17e6c:	subs	r5, r4, r5
   17e70:	umull	r5, r7, r7, r0
   17e74:	sbcs	r3, r6, r3
   17e78:	mov	r3, #0
   17e7c:	movwcc	r3, #1
   17e80:	cmp	r3, #0
   17e84:	addne	r7, r7, #1
   17e88:	adds	r0, r5, r6
   17e8c:	adc	r7, r7, #0
   17e90:	adds	r5, r9, r2
   17e94:	adcs	r3, r1, r4
   17e98:	str	r5, [sp, #36]	; 0x24
   17e9c:	adcs	r0, r0, #0
   17ea0:	str	r3, [sp, #32]
   17ea4:	str	r0, [fp, #-36]	; 0xffffffdc
   17ea8:	adc	r0, r7, #0
   17eac:	str	r0, [sp, #48]	; 0x30
   17eb0:	msr	CPSR_f, lr
   17eb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17eb8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17ebc:	adcs	ip, r8, #0
   17ec0:	ldr	r8, [fp, #-52]	; 0xffffffcc
   17ec4:	adc	sl, sl, #0
   17ec8:	str	ip, [sp, #16]
   17ecc:	umull	r6, r0, r5, r1
   17ed0:	mla	r0, r5, r2, r0
   17ed4:	mla	r4, r3, r1, r0
   17ed8:	ldr	r0, [fp, #36]	; 0x24
   17edc:	ldr	r1, [fp, #32]
   17ee0:	umull	r0, r2, r6, r0
   17ee4:	umlal	r0, r2, r4, r1
   17ee8:	ldr	r1, [fp, #32]
   17eec:	umull	r1, r7, r6, r1
   17ef0:	str	r1, [fp, #-44]	; 0xffffffd4
   17ef4:	adds	r1, r0, r7
   17ef8:	ldr	r0, [fp, #32]
   17efc:	adc	r5, r2, #0
   17f00:	str	r1, [fp, #-48]	; 0xffffffd0
   17f04:	umull	r0, r2, r4, r0
   17f08:	subs	r0, r1, r0
   17f0c:	ldr	r1, [fp, #44]	; 0x2c
   17f10:	sbcs	r0, r5, r2
   17f14:	mov	r0, #0
   17f18:	movwcc	r0, #1
   17f1c:	cmp	r0, #0
   17f20:	ldr	r0, [sp, #56]	; 0x38
   17f24:	umull	r2, r3, r4, r1
   17f28:	str	r2, [sp, #44]	; 0x2c
   17f2c:	ldr	r2, [fp, #40]	; 0x28
   17f30:	str	r3, [sp, #40]	; 0x28
   17f34:	umull	r7, r3, r4, r2
   17f38:	str	r7, [sp, #24]
   17f3c:	umull	r7, r9, r6, r1
   17f40:	ldr	r1, [fp, #36]	; 0x24
   17f44:	str	r3, [sp, #28]
   17f48:	mov	r3, r8
   17f4c:	umlal	r7, r9, r4, r2
   17f50:	mov	r2, #0
   17f54:	umull	r1, lr, r4, r1
   17f58:	ldr	r4, [fp, #20]
   17f5c:	addne	lr, lr, #1
   17f60:	subs	r0, ip, r0
   17f64:	ldr	ip, [fp, #-32]	; 0xffffffe0
   17f68:	ldr	r0, [sp, #52]	; 0x34
   17f6c:	str	r1, [sp, #20]
   17f70:	mov	r1, #1
   17f74:	umaal	r3, r1, r4, ip
   17f78:	sbcs	r0, sl, r0
   17f7c:	mov	r0, #0
   17f80:	movwcc	r2, #1
   17f84:	umlal	r8, r0, r4, ip
   17f88:	cmp	r2, #0
   17f8c:	movne	r8, r3
   17f90:	movne	r0, r1
   17f94:	ldr	r3, [sp, #16]
   17f98:	adds	r1, r8, r5
   17f9c:	adc	r5, r0, #0
   17fa0:	ldr	r0, [sp, #20]
   17fa4:	adds	r0, r1, r0
   17fa8:	ldr	r1, [sp, #32]
   17fac:	adc	lr, r5, lr
   17fb0:	adds	r8, r0, #1
   17fb4:	str	r0, [fp, #-32]	; 0xffffffe0
   17fb8:	ldr	r0, [sp, #36]	; 0x24
   17fbc:	adc	r4, lr, #0
   17fc0:	adds	r2, r3, #1
   17fc4:	adc	r5, sl, #0
   17fc8:	orrs	r0, r0, r1
   17fcc:	ldr	r0, [fp, #40]	; 0x28
   17fd0:	ldr	r1, [sp, #24]
   17fd4:	moveq	r5, sl
   17fd8:	moveq	r2, r3
   17fdc:	umull	r0, r6, r6, r0
   17fe0:	adds	r0, r7, r6
   17fe4:	adc	r3, r9, #0
   17fe8:	ldr	r9, [fp, #44]	; 0x2c
   17fec:	adds	r6, r3, r2
   17ff0:	adc	ip, r5, #0
   17ff4:	subs	r0, r0, r1
   17ff8:	ldr	r0, [sp, #28]
   17ffc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18000:	sbcs	r0, r3, r0
   18004:	mov	r0, #0
   18008:	ldr	r3, [sp, #40]	; 0x28
   1800c:	movwcc	r0, #1
   18010:	cmp	r0, #0
   18014:	ldr	r0, [sp, #44]	; 0x2c
   18018:	addne	r3, r3, #1
   1801c:	adds	r0, r6, r0
   18020:	adc	r3, ip, r3
   18024:	subs	r2, r0, r2
   18028:	ldr	ip, [fp, #32]
   1802c:	sbcs	r2, r3, r5
   18030:	mov	r2, #0
   18034:	ldr	r5, [fp, #36]	; 0x24
   18038:	movwcc	r2, #1
   1803c:	cmp	r2, #0
   18040:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18044:	moveq	r8, r1
   18048:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1804c:	moveq	r4, lr
   18050:	adds	r0, r1, r0
   18054:	ldr	r1, [sp, #48]	; 0x30
   18058:	adcs	r1, r1, r3
   1805c:	adcs	r3, r8, #0
   18060:	adc	r7, r4, #0
   18064:	adds	r2, r0, r2
   18068:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1806c:	adcs	r1, r1, r0
   18070:	adcs	r0, r3, #0
   18074:	adc	r3, r7, #0
   18078:	subs	r7, ip, r0
   1807c:	sbcs	r7, r5, r3
   18080:	bcc	180a4 <__assert_fail@plt+0x6678>
   18084:	ldr	r4, [fp, #40]	; 0x28
   18088:	subs	r7, r2, r4
   1808c:	sbcs	r7, r1, r9
   18090:	bcc	180d4 <__assert_fail@plt+0x66a8>
   18094:	eor	r7, r0, ip
   18098:	eor	r6, r3, r5
   1809c:	orrs	r7, r7, r6
   180a0:	bne	180d4 <__assert_fail@plt+0x66a8>
   180a4:	ldr	r4, [fp, #40]	; 0x28
   180a8:	adds	r7, ip, #1
   180ac:	adc	r6, r5, #0
   180b0:	subs	r2, r2, r4
   180b4:	mov	r4, #0
   180b8:	sbcs	r1, r1, r9
   180bc:	movwcc	r4, #1
   180c0:	cmp	r4, #0
   180c4:	moveq	r7, ip
   180c8:	moveq	r6, r5
   180cc:	subs	r0, r0, r7
   180d0:	sbc	r3, r3, r6
   180d4:	ldr	r7, [fp, #-40]	; 0xffffffd8
   180d8:	stm	r7, {r0, r3}
   180dc:	mov	r0, r2
   180e0:	sub	sp, fp, #28
   180e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180e8:	movw	r0, #60493	; 0xec4d
   180ec:	movw	r1, #60384	; 0xebe0
   180f0:	movw	r3, #60524	; 0xec6c
   180f4:	movw	r2, #993	; 0x3e1
   180f8:	movt	r0, #1
   180fc:	movt	r1, #1
   18100:	movt	r3, #1
   18104:	bl	11a2c <__assert_fail@plt>
   18108:	movw	r0, #60633	; 0xecd9
   1810c:	movw	r1, #60384	; 0xebe0
   18110:	movw	r3, #60524	; 0xec6c
   18114:	movw	r2, #994	; 0x3e2
   18118:	movt	r0, #1
   1811c:	movt	r1, #1
   18120:	movt	r3, #1
   18124:	bl	11a2c <__assert_fail@plt>
   18128:	movw	r0, #60664	; 0xecf8
   1812c:	movw	r1, #60384	; 0xebe0
   18130:	movw	r3, #60524	; 0xec6c
   18134:	movw	r2, #995	; 0x3e3
   18138:	movt	r0, #1
   1813c:	movt	r1, #1
   18140:	movt	r3, #1
   18144:	bl	11a2c <__assert_fail@plt>
   18148:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1814c:	add	fp, sp, #24
   18150:	mov	ip, r0
   18154:	ldr	r0, [fp, #24]
   18158:	tst	r0, #1
   1815c:	beq	18388 <__assert_fail@plt+0x695c>
   18160:	mov	r5, r3
   18164:	ldr	r3, [fp, #12]
   18168:	ldr	lr, [fp, #8]
   1816c:	ldr	r1, [fp, #28]
   18170:	ldr	r7, [fp, #20]
   18174:	ldr	r9, [fp, #16]
   18178:	orr	r4, lr, r2
   1817c:	orr	r6, r3, r5
   18180:	orrs	r4, r4, r6
   18184:	beq	181b8 <__assert_fail@plt+0x678c>
   18188:	tst	lr, #1
   1818c:	bne	181c4 <__assert_fail@plt+0x6798>
   18190:	lsrs	r5, r5, #1
   18194:	rrx	r8, r2
   18198:	lsrs	r3, r3, #1
   1819c:	rrx	r6, lr
   181a0:	tst	lr, #2
   181a4:	mov	lr, r6
   181a8:	orr	r3, r3, r2, lsl #31
   181ac:	mov	r2, r8
   181b0:	beq	18190 <__assert_fail@plt+0x6764>
   181b4:	b	182d4 <__assert_fail@plt+0x68a8>
   181b8:	str	r9, [ip]
   181bc:	str	r7, [ip, #4]
   181c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   181c4:	mov	r6, lr
   181c8:	mov	r8, r2
   181cc:	b	182d4 <__assert_fail@plt+0x68a8>
   181d0:	subs	r2, r9, r8
   181d4:	sbcs	r2, r7, r5
   181d8:	bcc	181f8 <__assert_fail@plt+0x67cc>
   181dc:	subs	r2, r0, r6
   181e0:	sbcs	r2, r1, r3
   181e4:	bcs	1824c <__assert_fail@plt+0x6820>
   181e8:	eor	r2, r8, r9
   181ec:	eor	r4, r5, r7
   181f0:	orrs	r2, r2, r4
   181f4:	bne	1824c <__assert_fail@plt+0x6820>
   181f8:	subs	lr, r8, r9
   181fc:	sbc	r8, r5, r7
   18200:	subs	r4, lr, #1
   18204:	sbc	r5, r8, #0
   18208:	subs	r2, r6, r0
   1820c:	mov	r6, #0
   18210:	sbcs	r3, r3, r1
   18214:	movwcc	r6, #1
   18218:	cmp	r6, #0
   1821c:	moveq	r4, lr
   18220:	moveq	r5, r8
   18224:	lsrs	r5, r5, #1
   18228:	rrx	r8, r4
   1822c:	lsrs	r3, r3, #1
   18230:	rrx	r6, r2
   18234:	tst	r2, #2
   18238:	mov	r2, r6
   1823c:	orr	r3, r3, r4, lsl #31
   18240:	mov	r4, r8
   18244:	beq	18224 <__assert_fail@plt+0x67f8>
   18248:	b	182d4 <__assert_fail@plt+0x68a8>
   1824c:	subs	r2, r6, r0
   18250:	sbcs	r2, r3, r1
   18254:	mov	r2, #0
   18258:	movwcc	r2, #1
   1825c:	subs	r4, r8, r9
   18260:	sbcs	r4, r5, r7
   18264:	bcc	18284 <__assert_fail@plt+0x6858>
   18268:	eor	lr, r8, r9
   1826c:	eor	r4, r5, r7
   18270:	orr	r4, lr, r4
   18274:	clz	r4, r4
   18278:	lsr	r4, r4, #5
   1827c:	ands	r2, r2, r4
   18280:	beq	18374 <__assert_fail@plt+0x6948>
   18284:	subs	lr, r9, r8
   18288:	sbc	r9, r7, r5
   1828c:	subs	r2, lr, #1
   18290:	sbc	r7, r9, #0
   18294:	subs	r4, r0, r6
   18298:	mov	r0, #0
   1829c:	sbcs	r1, r1, r3
   182a0:	movwcc	r0, #1
   182a4:	cmp	r0, #0
   182a8:	moveq	r2, lr
   182ac:	moveq	r7, r9
   182b0:	lsrs	r7, r7, #1
   182b4:	rrx	r9, r2
   182b8:	lsrs	r1, r1, #1
   182bc:	rrx	r0, r4
   182c0:	tst	r4, #2
   182c4:	mov	r4, r0
   182c8:	orr	r1, r1, r2, lsl #31
   182cc:	mov	r2, r9
   182d0:	beq	182b0 <__assert_fail@plt+0x6884>
   182d4:	orr	r2, r8, r9
   182d8:	orr	r4, r5, r7
   182dc:	orrs	r2, r2, r4
   182e0:	bne	181d0 <__assert_fail@plt+0x67a4>
   182e4:	mov	r2, #0
   182e8:	mov	r5, r0
   182ec:	str	r2, [ip]
   182f0:	str	r2, [ip, #4]
   182f4:	ands	r2, r6, #1
   182f8:	mov	r2, r1
   182fc:	moveq	r2, r3
   18300:	moveq	r5, r6
   18304:	movne	r1, r3
   18308:	movne	r0, r6
   1830c:	orr	r7, r5, r2
   18310:	cmp	r7, #0
   18314:	beq	18384 <__assert_fail@plt+0x6958>
   18318:	lsrs	r3, r1, #1
   1831c:	rrx	r0, r0
   18320:	mov	r1, r2
   18324:	mov	r7, r5
   18328:	lsrs	r2, r2, #1
   1832c:	rrx	r5, r5
   18330:	tst	r7, #1
   18334:	beq	18320 <__assert_fail@plt+0x68f4>
   18338:	subs	r6, r5, r0
   1833c:	sbc	r4, r2, r3
   18340:	orrs	r2, r6, r4
   18344:	beq	1836c <__assert_fail@plt+0x6940>
   18348:	eor	r1, r6, r4, asr #31
   1834c:	eor	r2, r4, r4, asr #31
   18350:	and	r7, r4, r4, asr #31
   18354:	subs	r5, r1, r4, asr #31
   18358:	and	r1, r6, r4, asr #31
   1835c:	sbc	r2, r2, r4, asr #31
   18360:	adds	r0, r1, r0
   18364:	adc	r3, r7, r3
   18368:	b	18320 <__assert_fail@plt+0x68f4>
   1836c:	orr	r0, r7, #1
   18370:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18374:	mov	r0, r6
   18378:	mov	r1, r3
   1837c:	str	r8, [ip]
   18380:	str	r5, [ip, #4]
   18384:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18388:	movw	r0, #60864	; 0xedc0
   1838c:	movw	r1, #60384	; 0xebe0
   18390:	movw	r3, #60871	; 0xedc7
   18394:	mov	r2, #476	; 0x1dc
   18398:	movt	r0, #1
   1839c:	movt	r1, #1
   183a0:	movt	r3, #1
   183a4:	bl	11a2c <__assert_fail@plt>
   183a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ac:	add	fp, sp, #28
   183b0:	push	{r0}		; (str r0, [sp, #-4]!)
   183b4:	ldr	ip, [fp, #20]
   183b8:	ldr	r0, [fp, #16]
   183bc:	orrs	r1, r0, ip
   183c0:	beq	185c4 <__assert_fail@plt+0x6b98>
   183c4:	ldr	r1, [fp, #12]
   183c8:	ldr	r8, [fp, #8]
   183cc:	mov	r9, r2
   183d0:	mov	sl, r3
   183d4:	orrs	r2, r2, r3
   183d8:	beq	185a8 <__assert_fail@plt+0x6b7c>
   183dc:	mov	r3, #0
   183e0:	mov	r4, r0
   183e4:	mov	r6, ip
   183e8:	cmp	r3, ip, lsr #24
   183ec:	bne	18414 <__assert_fail@plt+0x69e8>
   183f0:	mov	r3, #0
   183f4:	mov	r4, r0
   183f8:	mov	r6, ip
   183fc:	lsl	r2, r6, #8
   18400:	add	r3, r3, #8
   18404:	orr	r6, r2, r4, lsr #24
   18408:	lsl	r4, r4, #8
   1840c:	cmp	r6, #16777216	; 0x1000000
   18410:	bcc	183fc <__assert_fail@plt+0x69d0>
   18414:	mvn	r2, #0
   18418:	cmp	r6, #0
   1841c:	bmi	18440 <__assert_fail@plt+0x6a14>
   18420:	lsl	r5, r6, #1
   18424:	add	r3, r3, #1
   18428:	orr	r6, r5, r4, lsr #31
   1842c:	lsl	r5, r4, #1
   18430:	subs	r4, r2, r4, lsl #1
   18434:	sbcs	r4, r2, r6
   18438:	mov	r4, r5
   1843c:	blt	18420 <__assert_fail@plt+0x69f4>
   18440:	mov	r6, #0
   18444:	mov	r4, r9
   18448:	mov	r7, sl
   1844c:	cmp	r6, sl, lsr #24
   18450:	bne	18478 <__assert_fail@plt+0x6a4c>
   18454:	mov	r6, #0
   18458:	mov	r4, r9
   1845c:	mov	r7, sl
   18460:	lsl	r5, r7, #8
   18464:	add	r6, r6, #8
   18468:	orr	r7, r5, r4, lsr #24
   1846c:	lsl	r4, r4, #8
   18470:	cmp	r7, #16777216	; 0x1000000
   18474:	bcc	18460 <__assert_fail@plt+0x6a34>
   18478:	subs	r5, r2, r4
   1847c:	sbcs	r5, r2, r7
   18480:	bge	184a4 <__assert_fail@plt+0x6a78>
   18484:	lsl	r5, r7, #1
   18488:	add	r6, r6, #1
   1848c:	orr	r7, r5, r4, lsr #31
   18490:	lsl	r5, r4, #1
   18494:	subs	r4, r2, r4, lsl #1
   18498:	sbcs	r4, r2, r7
   1849c:	mov	r4, r5
   184a0:	blt	18484 <__assert_fail@plt+0x6a58>
   184a4:	sub	lr, r3, r6
   184a8:	cmp	lr, #1
   184ac:	blt	185b0 <__assert_fail@plt+0x6b84>
   184b0:	ldr	r7, [fp, #28]
   184b4:	rsb	r6, lr, #32
   184b8:	subs	r3, lr, #32
   184bc:	rsb	r5, lr, #64	; 0x40
   184c0:	mov	r4, r0
   184c4:	lsr	r2, r0, r6
   184c8:	orr	r2, r2, ip, lsl lr
   184cc:	lslpl	r2, r0, r3
   184d0:	cmp	r6, #0
   184d4:	lsr	ip, r7, r5
   184d8:	movwpl	ip, #0
   184dc:	cmp	r6, #0
   184e0:	orr	r2, ip, r2
   184e4:	ldr	ip, [fp, #24]
   184e8:	lsr	r0, ip, r5
   184ec:	rsb	r5, r5, #32
   184f0:	orr	r0, r0, r7, lsl r5
   184f4:	lsrpl	r0, r7, r6
   184f8:	cmp	r3, #0
   184fc:	lsl	r5, r4, lr
   18500:	movwpl	r5, #0
   18504:	orr	r5, r0, r5
   18508:	lsr	r0, ip, r6
   1850c:	orr	r6, r0, r7, lsl lr
   18510:	lslpl	r6, ip, r3
   18514:	cmp	r3, #0
   18518:	lsl	r7, ip, lr
   1851c:	movwpl	r7, #0
   18520:	subs	r0, r5, r9
   18524:	mov	r4, r5
   18528:	sbcs	r0, r2, sl
   1852c:	bcs	18588 <__assert_fail@plt+0x6b5c>
   18530:	subs	r0, r9, r4
   18534:	mov	r3, #0
   18538:	sbc	r5, sl, r2
   1853c:	subs	r9, r0, #1
   18540:	sbc	sl, r5, #0
   18544:	subs	r8, r8, r7
   18548:	sbcs	r1, r1, r6
   1854c:	movwcc	r3, #1
   18550:	cmp	r3, #0
   18554:	moveq	r9, r0
   18558:	moveq	sl, r5
   1855c:	lsrs	r2, r2, #1
   18560:	rrx	r5, r4
   18564:	lsrs	r0, r6, #1
   18568:	rrx	r7, r7
   1856c:	subs	lr, lr, #1
   18570:	orr	r6, r0, r4, lsl #31
   18574:	beq	185b0 <__assert_fail@plt+0x6b84>
   18578:	subs	r0, r5, r9
   1857c:	mov	r4, r5
   18580:	sbcs	r0, r2, sl
   18584:	bcc	18530 <__assert_fail@plt+0x6b04>
   18588:	subs	r0, r8, r7
   1858c:	sbcs	r0, r1, r6
   18590:	bcc	1855c <__assert_fail@plt+0x6b30>
   18594:	eor	r0, r9, r4
   18598:	eor	r5, sl, r2
   1859c:	orrs	r0, r0, r5
   185a0:	beq	18530 <__assert_fail@plt+0x6b04>
   185a4:	b	1855c <__assert_fail@plt+0x6b30>
   185a8:	mov	r9, #0
   185ac:	mov	sl, #0
   185b0:	ldr	r0, [sp]
   185b4:	stm	r0, {r9, sl}
   185b8:	mov	r0, r8
   185bc:	sub	sp, fp, #28
   185c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185c4:	movw	r0, #60947	; 0xee13
   185c8:	movw	r1, #60384	; 0xebe0
   185cc:	movw	r3, #60955	; 0xee1b
   185d0:	movw	r2, #411	; 0x19b
   185d4:	movt	r0, #1
   185d8:	movt	r1, #1
   185dc:	movt	r3, #1
   185e0:	bl	11a2c <__assert_fail@plt>
   185e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e8:	add	fp, sp, #28
   185ec:	sub	sp, sp, #76	; 0x4c
   185f0:	mov	r1, #1
   185f4:	mov	r5, r0
   185f8:	mov	r7, #1
   185fc:	bl	119e4 <__gmpz_cmp_ui@plt>
   18600:	cmp	r0, #1
   18604:	blt	187c4 <__assert_fail@plt+0x6d98>
   18608:	movw	r1, #60793	; 0xed79
   1860c:	mov	r0, r5
   18610:	movt	r1, #381	; 0x17d
   18614:	bl	119e4 <__gmpz_cmp_ui@plt>
   18618:	cmp	r0, #0
   1861c:	bmi	187c8 <__assert_fail@plt+0x6d9c>
   18620:	sub	r6, fp, #40	; 0x28
   18624:	add	sl, sp, #52	; 0x34
   18628:	add	r7, sp, #40	; 0x28
   1862c:	add	r8, sp, #28
   18630:	mov	r9, #0
   18634:	mov	r0, r6
   18638:	mov	r1, sl
   1863c:	mov	r2, r7
   18640:	mov	r3, r8
   18644:	str	r9, [sp]
   18648:	bl	1172c <__gmpz_inits@plt>
   1864c:	mov	r0, r7
   18650:	mov	r1, r5
   18654:	mov	r2, #1
   18658:	bl	11684 <__gmpz_sub_ui@plt>
   1865c:	mov	r0, r7
   18660:	mov	r1, #0
   18664:	bl	11648 <__gmpz_scan1@plt>
   18668:	mov	r4, r0
   1866c:	mov	r0, r6
   18670:	mov	r1, r7
   18674:	mov	r2, r4
   18678:	bl	118f4 <__gmpz_tdiv_q_2exp@plt>
   1867c:	mov	r0, sl
   18680:	mov	r1, #2
   18684:	bl	116b4 <__gmpz_set_ui@plt>
   18688:	mov	r0, r5
   1868c:	mov	r1, r7
   18690:	mov	r2, sl
   18694:	mov	r3, r8
   18698:	str	r6, [sp]
   1869c:	str	r4, [sp, #12]
   186a0:	str	r4, [sp, #4]
   186a4:	bl	18d84 <__assert_fail@plt+0x7358>
   186a8:	cmp	r0, #0
   186ac:	mov	r7, #0
   186b0:	beq	18848 <__assert_fail@plt+0x6e1c>
   186b4:	add	r6, sp, #28
   186b8:	add	r4, sp, #40	; 0x28
   186bc:	mov	r0, r6
   186c0:	mov	r1, r4
   186c4:	bl	11738 <__gmpz_set@plt>
   186c8:	add	r1, sp, #16
   186cc:	mov	r0, r6
   186d0:	bl	12600 <__assert_fail@plt+0xbd4>
   186d4:	mov	r8, #0
   186d8:	add	r7, sp, #52	; 0x34
   186dc:	ldr	r0, [sp, #24]
   186e0:	cmp	r0, #0
   186e4:	beq	187d4 <__assert_fail@plt+0x6da8>
   186e8:	mov	sl, #1
   186ec:	mov	r9, #0
   186f0:	ldr	r0, [sp, #16]
   186f4:	mov	r1, r4
   186f8:	add	r2, r0, r9
   186fc:	mov	r0, r6
   18700:	bl	11720 <__gmpz_divexact@plt>
   18704:	mov	r0, r6
   18708:	mov	r1, r7
   1870c:	mov	r2, r6
   18710:	mov	r3, r5
   18714:	bl	11708 <__gmpz_powm@plt>
   18718:	mov	r0, r6
   1871c:	mov	r1, #1
   18720:	bl	119e4 <__gmpz_cmp_ui@plt>
   18724:	ldr	r1, [sp, #24]
   18728:	cmp	r0, #0
   1872c:	beq	18744 <__assert_fail@plt+0x6d18>
   18730:	add	r2, sl, #1
   18734:	cmp	sl, r1
   18738:	add	r9, r9, #12
   1873c:	mov	sl, r2
   18740:	bcc	186f0 <__assert_fail@plt+0x6cc4>
   18744:	cmp	r0, #0
   18748:	bne	187e0 <__assert_fail@plt+0x6db4>
   1874c:	movw	r0, #6520	; 0x1978
   18750:	mov	r1, r7
   18754:	movt	r0, #2
   18758:	ldrb	r2, [r0, r8]
   1875c:	mov	r0, r7
   18760:	bl	11834 <__gmpz_add_ui@plt>
   18764:	sub	r0, fp, #40	; 0x28
   18768:	mov	r1, r4
   1876c:	mov	r2, r7
   18770:	mov	r3, r6
   18774:	str	r0, [sp]
   18778:	ldr	r0, [sp, #12]
   1877c:	str	r0, [sp, #4]
   18780:	mov	r0, r5
   18784:	bl	18d84 <__assert_fail@plt+0x7358>
   18788:	cmp	r0, #0
   1878c:	beq	187f4 <__assert_fail@plt+0x6dc8>
   18790:	add	r8, r8, #1
   18794:	cmp	r8, #668	; 0x29c
   18798:	bne	186dc <__assert_fail@plt+0x6cb0>
   1879c:	movw	r1, #60397	; 0xebed
   187a0:	mov	r0, #0
   187a4:	mov	r2, #5
   187a8:	movt	r1, #1
   187ac:	bl	116fc <dcgettext@plt>
   187b0:	mov	r2, r0
   187b4:	mov	r0, #0
   187b8:	mov	r1, #0
   187bc:	bl	117ec <error@plt>
   187c0:	bl	11a20 <abort@plt>
   187c4:	mov	r7, #0
   187c8:	mov	r0, r7
   187cc:	sub	sp, fp, #28
   187d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187d4:	mov	r9, #0
   187d8:	mov	r7, #1
   187dc:	b	18830 <__assert_fail@plt+0x6e04>
   187e0:	mov	r7, #1
   187e4:	cmp	r1, #0
   187e8:	mov	r9, #0
   187ec:	bne	18808 <__assert_fail@plt+0x6ddc>
   187f0:	b	18830 <__assert_fail@plt+0x6e04>
   187f4:	ldr	r1, [sp, #24]
   187f8:	mov	r7, #0
   187fc:	cmp	r1, #0
   18800:	mov	r9, #0
   18804:	beq	18830 <__assert_fail@plt+0x6e04>
   18808:	mov	r4, #0
   1880c:	mov	r5, #0
   18810:	ldr	r0, [sp, #16]
   18814:	add	r0, r0, r4
   18818:	bl	118ac <__gmpz_clear@plt>
   1881c:	ldr	r0, [sp, #24]
   18820:	add	r5, r5, #1
   18824:	add	r4, r4, #12
   18828:	cmp	r5, r0
   1882c:	bcc	18810 <__assert_fail@plt+0x6de4>
   18830:	ldr	r0, [sp, #16]
   18834:	bl	18f5c <__assert_fail@plt+0x7530>
   18838:	ldr	r0, [sp, #20]
   1883c:	bl	18f5c <__assert_fail@plt+0x7530>
   18840:	cmp	r7, #0
   18844:	movwne	r7, #1
   18848:	sub	r0, fp, #40	; 0x28
   1884c:	add	r1, sp, #52	; 0x34
   18850:	add	r2, sp, #40	; 0x28
   18854:	add	r3, sp, #28
   18858:	str	r9, [sp]
   1885c:	bl	11690 <__gmpz_clears@plt>
   18860:	mov	r0, r7
   18864:	sub	sp, fp, #28
   18868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1886c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18870:	add	fp, sp, #28
   18874:	sub	sp, sp, #20
   18878:	mov	r5, r0
   1887c:	ldr	r0, [r0]
   18880:	mov	sl, r1
   18884:	ldr	r4, [r5, #8]
   18888:	ldr	r6, [r5, #4]
   1888c:	subs	r8, r4, #1
   18890:	mov	r9, r8
   18894:	bmi	188e8 <__assert_fail@plt+0x6ebc>
   18898:	add	r1, r8, r8, lsl #1
   1889c:	str	r6, [sp, #16]
   188a0:	mov	r7, r4
   188a4:	str	r0, [sp, #12]
   188a8:	add	r6, r0, r1, lsl #2
   188ac:	mov	r0, r6
   188b0:	mov	r1, sl
   188b4:	bl	11978 <__gmpz_cmp@plt>
   188b8:	cmp	r0, #1
   188bc:	blt	188d4 <__assert_fail@plt+0x6ea8>
   188c0:	sub	r7, r7, #1
   188c4:	sub	r6, r6, #12
   188c8:	cmp	r7, #0
   188cc:	bgt	188ac <__assert_fail@plt+0x6e80>
   188d0:	b	188dc <__assert_fail@plt+0x6eb0>
   188d4:	cmp	r0, #0
   188d8:	beq	189a8 <__assert_fail@plt+0x6f7c>
   188dc:	ldr	r6, [sp, #16]
   188e0:	ldr	r0, [sp, #12]
   188e4:	sub	r9, r7, #1
   188e8:	str	r5, [sp, #12]
   188ec:	add	r5, r4, r4, lsl #1
   188f0:	mov	r1, #12
   188f4:	add	r1, r1, r5, lsl #2
   188f8:	bl	1c354 <__assert_fail@plt+0xa928>
   188fc:	mov	r7, r0
   18900:	add	r0, r4, #1
   18904:	str	r0, [sp, #8]
   18908:	lsl	r1, r0, #2
   1890c:	mov	r0, r6
   18910:	bl	1c354 <__assert_fail@plt+0xa928>
   18914:	add	r6, r7, r5, lsl #2
   18918:	str	r0, [sp, #16]
   1891c:	str	r7, [sp, #4]
   18920:	mov	r0, r6
   18924:	bl	119f0 <__gmpz_init@plt>
   18928:	cmp	r8, r9
   1892c:	ble	18968 <__assert_fail@plt+0x6f3c>
   18930:	ldr	r0, [sp, #16]
   18934:	add	r4, r0, r4, lsl #2
   18938:	mov	r5, r4
   1893c:	sub	r7, r6, #12
   18940:	mov	r0, r6
   18944:	mov	r1, r7
   18948:	bl	11738 <__gmpz_set@plt>
   1894c:	ldr	r0, [r5, #-4]!
   18950:	sub	r8, r8, #1
   18954:	mov	r6, r7
   18958:	cmp	r8, r9
   1895c:	str	r0, [r4]
   18960:	mov	r4, r5
   18964:	bgt	1893c <__assert_fail@plt+0x6f10>
   18968:	ldr	r5, [sp, #4]
   1896c:	add	r4, r9, #1
   18970:	mov	r1, sl
   18974:	add	r0, r4, r4, lsl #1
   18978:	add	r0, r5, r0, lsl #2
   1897c:	bl	11738 <__gmpz_set@plt>
   18980:	ldr	r1, [sp, #16]
   18984:	mov	r0, #1
   18988:	str	r0, [r1, r4, lsl #2]
   1898c:	ldr	r0, [sp, #12]
   18990:	str	r5, [r0]
   18994:	str	r1, [r0, #4]
   18998:	ldr	r1, [sp, #8]
   1899c:	str	r1, [r0, #8]
   189a0:	sub	sp, fp, #28
   189a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189a8:	ldr	r0, [sp, #16]
   189ac:	add	r0, r0, r7, lsl #2
   189b0:	ldr	r1, [r0, #-4]
   189b4:	add	r1, r1, #1
   189b8:	str	r1, [r0, #-4]
   189bc:	sub	sp, fp, #28
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189c8:	add	fp, sp, #28
   189cc:	sub	sp, sp, #108	; 0x6c
   189d0:	mov	r8, r0
   189d4:	movw	r0, #12780	; 0x31ec
   189d8:	mov	r9, r1
   189dc:	str	r2, [sp, #20]
   189e0:	movt	r0, #3
   189e4:	ldrb	r0, [r0]
   189e8:	cmp	r0, #1
   189ec:	bne	18a10 <__assert_fail@plt+0x6fe4>
   189f0:	movw	r0, #12760	; 0x31d8
   189f4:	movw	r2, #61065	; 0xee89
   189f8:	mov	r1, #1
   189fc:	mov	r3, r9
   18a00:	movt	r0, #3
   18a04:	movt	r2, #1
   18a08:	ldr	r0, [r0]
   18a0c:	bl	11924 <__fprintf_chk@plt>
   18a10:	add	r0, sp, #48	; 0x30
   18a14:	add	r1, sp, #36	; 0x24
   18a18:	mov	r2, #0
   18a1c:	mov	r6, #0
   18a20:	bl	1172c <__gmpz_inits@plt>
   18a24:	sub	r0, fp, #64	; 0x40
   18a28:	mov	r1, #2
   18a2c:	bl	11828 <__gmpz_init_set_si@plt>
   18a30:	sub	r0, fp, #40	; 0x28
   18a34:	mov	r1, #2
   18a38:	bl	11828 <__gmpz_init_set_si@plt>
   18a3c:	sub	r0, fp, #52	; 0x34
   18a40:	mov	r1, #2
   18a44:	bl	11828 <__gmpz_init_set_si@plt>
   18a48:	add	r0, sp, #60	; 0x3c
   18a4c:	mov	r1, #1
   18a50:	mov	r4, #1
   18a54:	bl	1196c <__gmpz_init_set_ui@plt>
   18a58:	mov	r0, r8
   18a5c:	mov	r1, #1
   18a60:	bl	119e4 <__gmpz_cmp_ui@plt>
   18a64:	cmp	r0, #0
   18a68:	beq	18d50 <__assert_fail@plt+0x7324>
   18a6c:	add	r0, r9, #1
   18a70:	add	r7, sp, #48	; 0x30
   18a74:	sub	r5, fp, #40	; 0x28
   18a78:	str	r0, [sp, #16]
   18a7c:	mov	r0, #1
   18a80:	str	r0, [sp, #24]
   18a84:	mov	r0, #0
   18a88:	str	r0, [sp, #28]
   18a8c:	b	18ab0 <__assert_fail@plt+0x7084>
   18a90:	mov	r0, r6
   18a94:	mov	r1, r5
   18a98:	bl	11738 <__gmpz_set@plt>
   18a9c:	ldr	r6, [sp, #32]
   18aa0:	subs	r4, r4, #1
   18aa4:	sbc	r6, r6, #0
   18aa8:	orrs	r0, r4, r6
   18aac:	beq	18bfc <__assert_fail@plt+0x71d0>
   18ab0:	mov	r0, r7
   18ab4:	mov	r1, r5
   18ab8:	mov	r2, r5
   18abc:	str	r6, [sp, #32]
   18ac0:	bl	11750 <__gmpz_mul@plt>
   18ac4:	mov	r0, r5
   18ac8:	mov	r1, r7
   18acc:	mov	r2, r8
   18ad0:	bl	11960 <__gmpz_mod@plt>
   18ad4:	mov	r0, r5
   18ad8:	mov	r1, r5
   18adc:	mov	r2, r9
   18ae0:	bl	11834 <__gmpz_add_ui@plt>
   18ae4:	mov	r0, r7
   18ae8:	sub	r1, fp, #52	; 0x34
   18aec:	mov	r2, r5
   18af0:	bl	116e4 <__gmpz_sub@plt>
   18af4:	add	r6, sp, #36	; 0x24
   18af8:	mov	sl, r5
   18afc:	add	r5, sp, #60	; 0x3c
   18b00:	mov	r2, r7
   18b04:	mov	r0, r6
   18b08:	mov	r1, r5
   18b0c:	bl	11750 <__gmpz_mul@plt>
   18b10:	mov	r0, r5
   18b14:	mov	r1, r6
   18b18:	mov	r2, r8
   18b1c:	mov	r5, sl
   18b20:	bl	11960 <__gmpz_mod@plt>
   18b24:	and	r0, r4, #31
   18b28:	teq	r0, #1
   18b2c:	bne	18a9c <__assert_fail@plt+0x7070>
   18b30:	mov	r0, r7
   18b34:	add	r1, sp, #60	; 0x3c
   18b38:	mov	r2, r8
   18b3c:	bl	119c0 <__gmpz_gcd@plt>
   18b40:	mov	r0, r7
   18b44:	mov	r1, #1
   18b48:	bl	119e4 <__gmpz_cmp_ui@plt>
   18b4c:	cmp	r0, #0
   18b50:	sub	r6, fp, #64	; 0x40
   18b54:	beq	18a90 <__assert_fail@plt+0x7064>
   18b58:	mov	r0, r7
   18b5c:	mov	r1, r6
   18b60:	mov	r2, r6
   18b64:	bl	11750 <__gmpz_mul@plt>
   18b68:	mov	r0, r6
   18b6c:	mov	r1, r7
   18b70:	mov	r2, r8
   18b74:	bl	11960 <__gmpz_mod@plt>
   18b78:	mov	r0, r6
   18b7c:	mov	r1, r6
   18b80:	mov	r2, r9
   18b84:	bl	11834 <__gmpz_add_ui@plt>
   18b88:	mov	r0, r7
   18b8c:	sub	r1, fp, #52	; 0x34
   18b90:	mov	r2, r6
   18b94:	bl	116e4 <__gmpz_sub@plt>
   18b98:	mov	r0, r7
   18b9c:	mov	r1, r7
   18ba0:	mov	r2, r8
   18ba4:	bl	119c0 <__gmpz_gcd@plt>
   18ba8:	mov	r0, r7
   18bac:	mov	r1, #1
   18bb0:	bl	119e4 <__gmpz_cmp_ui@plt>
   18bb4:	cmp	r0, #0
   18bb8:	beq	18b58 <__assert_fail@plt+0x712c>
   18bbc:	mov	r0, r8
   18bc0:	mov	r1, r8
   18bc4:	mov	r2, r7
   18bc8:	bl	11720 <__gmpz_divexact@plt>
   18bcc:	mov	r0, r7
   18bd0:	bl	185e4 <__assert_fail@plt+0x6bb8>
   18bd4:	cmp	r0, #0
   18bd8:	beq	18ca8 <__assert_fail@plt+0x727c>
   18bdc:	ldr	r0, [sp, #20]
   18be0:	mov	r1, r7
   18be4:	bl	1886c <__assert_fail@plt+0x6e40>
   18be8:	mov	r0, r8
   18bec:	bl	185e4 <__assert_fail@plt+0x6bb8>
   18bf0:	cmp	r0, #0
   18bf4:	beq	18cf8 <__assert_fail@plt+0x72cc>
   18bf8:	b	18d44 <__assert_fail@plt+0x7318>
   18bfc:	sub	r0, fp, #52	; 0x34
   18c00:	mov	r1, r5
   18c04:	bl	11738 <__gmpz_set@plt>
   18c08:	ldr	r0, [sp, #28]
   18c0c:	ldr	r6, [sp, #24]
   18c10:	lsl	r1, r0, #1
   18c14:	str	r0, [sp, #28]
   18c18:	orrs	r0, r6, r0
   18c1c:	str	r1, [sp, #32]
   18c20:	beq	18c74 <__assert_fail@plt+0x7248>
   18c24:	mov	r4, #0
   18c28:	mov	sl, #0
   18c2c:	mov	r0, r7
   18c30:	mov	r1, r5
   18c34:	mov	r2, r5
   18c38:	bl	11750 <__gmpz_mul@plt>
   18c3c:	mov	r0, r5
   18c40:	mov	r1, r7
   18c44:	mov	r2, r8
   18c48:	bl	11960 <__gmpz_mod@plt>
   18c4c:	mov	r0, r5
   18c50:	mov	r1, r5
   18c54:	mov	r2, r9
   18c58:	bl	11834 <__gmpz_add_ui@plt>
   18c5c:	adds	r4, r4, #1
   18c60:	adc	sl, sl, #0
   18c64:	subs	r0, r4, r6
   18c68:	ldr	r0, [sp, #28]
   18c6c:	sbcs	r0, sl, r0
   18c70:	bcc	18c2c <__assert_fail@plt+0x7200>
   18c74:	ldr	r0, [sp, #32]
   18c78:	mov	r1, r5
   18c7c:	orr	sl, r0, r6, lsr #31
   18c80:	lsl	r0, r6, #1
   18c84:	str	r0, [sp, #32]
   18c88:	sub	r0, fp, #64	; 0x40
   18c8c:	bl	11738 <__gmpz_set@plt>
   18c90:	ldr	r0, [sp, #32]
   18c94:	mov	r4, r6
   18c98:	ldr	r6, [sp, #28]
   18c9c:	str	sl, [sp, #28]
   18ca0:	str	r0, [sp, #24]
   18ca4:	b	18ab0 <__assert_fail@plt+0x7084>
   18ca8:	movw	r0, #12780	; 0x31ec
   18cac:	movt	r0, #3
   18cb0:	ldrb	r0, [r0]
   18cb4:	cmp	r0, #1
   18cb8:	bne	18cd8 <__assert_fail@plt+0x72ac>
   18cbc:	movw	r0, #12760	; 0x31d8
   18cc0:	movw	r2, #61086	; 0xee9e
   18cc4:	mov	r1, #1
   18cc8:	movt	r0, #3
   18ccc:	movt	r2, #1
   18cd0:	ldr	r0, [r0]
   18cd4:	bl	11924 <__fprintf_chk@plt>
   18cd8:	ldr	r1, [sp, #16]
   18cdc:	ldr	r2, [sp, #20]
   18ce0:	mov	r0, r7
   18ce4:	bl	189c4 <__assert_fail@plt+0x6f98>
   18ce8:	mov	r0, r8
   18cec:	bl	185e4 <__assert_fail@plt+0x6bb8>
   18cf0:	cmp	r0, #0
   18cf4:	bne	18d44 <__assert_fail@plt+0x7318>
   18cf8:	mov	r0, r5
   18cfc:	mov	r1, r5
   18d00:	mov	r2, r8
   18d04:	bl	11960 <__gmpz_mod@plt>
   18d08:	sub	r0, fp, #52	; 0x34
   18d0c:	mov	r2, r8
   18d10:	mov	r1, r0
   18d14:	bl	11960 <__gmpz_mod@plt>
   18d18:	mov	r0, r6
   18d1c:	mov	r1, r6
   18d20:	mov	r2, r8
   18d24:	bl	11960 <__gmpz_mod@plt>
   18d28:	mov	r0, r8
   18d2c:	mov	r1, #1
   18d30:	bl	119e4 <__gmpz_cmp_ui@plt>
   18d34:	ldr	r6, [sp, #32]
   18d38:	cmp	r0, #0
   18d3c:	bne	18ab0 <__assert_fail@plt+0x7084>
   18d40:	b	18d50 <__assert_fail@plt+0x7324>
   18d44:	ldr	r0, [sp, #20]
   18d48:	mov	r1, r8
   18d4c:	bl	1886c <__assert_fail@plt+0x6e40>
   18d50:	sub	r1, fp, #40	; 0x28
   18d54:	mov	r0, #0
   18d58:	add	r2, sp, #48	; 0x30
   18d5c:	sub	r3, fp, #52	; 0x34
   18d60:	str	r1, [sp]
   18d64:	sub	r1, fp, #64	; 0x40
   18d68:	str	r0, [sp, #8]
   18d6c:	add	r0, sp, #60	; 0x3c
   18d70:	str	r1, [sp, #4]
   18d74:	add	r1, sp, #36	; 0x24
   18d78:	bl	11690 <__gmpz_clears@plt>
   18d7c:	sub	sp, fp, #28
   18d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18d88:	add	fp, sp, #24
   18d8c:	mov	r4, r3
   18d90:	mov	r3, r2
   18d94:	ldr	r2, [fp, #8]
   18d98:	mov	r7, r0
   18d9c:	mov	r6, r1
   18da0:	mov	r1, r3
   18da4:	mov	r0, r4
   18da8:	mov	r3, r7
   18dac:	bl	11708 <__gmpz_powm@plt>
   18db0:	mov	r0, r4
   18db4:	mov	r1, #1
   18db8:	mov	r8, #1
   18dbc:	bl	119e4 <__gmpz_cmp_ui@plt>
   18dc0:	cmp	r0, #0
   18dc4:	beq	18e3c <__assert_fail@plt+0x7410>
   18dc8:	mov	r0, r4
   18dcc:	mov	r1, r6
   18dd0:	bl	11978 <__gmpz_cmp@plt>
   18dd4:	cmp	r0, #0
   18dd8:	beq	18e3c <__assert_fail@plt+0x7410>
   18ddc:	ldr	r9, [fp, #12]
   18de0:	mov	r8, #0
   18de4:	cmp	r9, #2
   18de8:	bcc	18e3c <__assert_fail@plt+0x7410>
   18dec:	mov	r5, #2
   18df0:	mov	r0, r4
   18df4:	mov	r1, r4
   18df8:	mov	r2, #2
   18dfc:	mov	r3, r7
   18e00:	bl	119fc <__gmpz_powm_ui@plt>
   18e04:	mov	r0, r4
   18e08:	mov	r1, r6
   18e0c:	bl	11978 <__gmpz_cmp@plt>
   18e10:	cmp	r0, #0
   18e14:	beq	18e44 <__assert_fail@plt+0x7418>
   18e18:	mov	r0, r4
   18e1c:	mov	r1, #1
   18e20:	bl	119e4 <__gmpz_cmp_ui@plt>
   18e24:	cmp	r0, #0
   18e28:	beq	18e3c <__assert_fail@plt+0x7410>
   18e2c:	add	r0, r5, #1
   18e30:	cmp	r5, r9
   18e34:	mov	r5, r0
   18e38:	bcc	18df0 <__assert_fail@plt+0x73c4>
   18e3c:	mov	r0, r8
   18e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18e44:	mov	r8, #1
   18e48:	mov	r0, r8
   18e4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18e50:	movw	r1, #12792	; 0x31f8
   18e54:	movt	r1, #3
   18e58:	str	r0, [r1, #4]
   18e5c:	bx	lr
   18e60:	movw	r1, #12792	; 0x31f8
   18e64:	movt	r1, #3
   18e68:	strb	r0, [r1]
   18e6c:	bx	lr
   18e70:	push	{r4, r5, r6, sl, fp, lr}
   18e74:	add	fp, sp, #16
   18e78:	sub	sp, sp, #8
   18e7c:	movw	r0, #12772	; 0x31e4
   18e80:	movt	r0, #3
   18e84:	ldr	r0, [r0]
   18e88:	bl	1ca64 <__assert_fail@plt+0xb038>
   18e8c:	cmp	r0, #0
   18e90:	beq	18eb8 <__assert_fail@plt+0x748c>
   18e94:	movw	r5, #12792	; 0x31f8
   18e98:	movt	r5, #3
   18e9c:	ldrb	r0, [r5]
   18ea0:	cmp	r0, #0
   18ea4:	beq	18ee4 <__assert_fail@plt+0x74b8>
   18ea8:	bl	118b8 <__errno_location@plt>
   18eac:	ldr	r0, [r0]
   18eb0:	cmp	r0, #32
   18eb4:	bne	18ee4 <__assert_fail@plt+0x74b8>
   18eb8:	movw	r0, #12760	; 0x31d8
   18ebc:	movt	r0, #3
   18ec0:	ldr	r0, [r0]
   18ec4:	bl	1ca64 <__assert_fail@plt+0xb038>
   18ec8:	cmp	r0, #0
   18ecc:	subeq	sp, fp, #16
   18ed0:	popeq	{r4, r5, r6, sl, fp, pc}
   18ed4:	movw	r0, #12672	; 0x3180
   18ed8:	movt	r0, #3
   18edc:	ldr	r0, [r0]
   18ee0:	bl	116cc <_exit@plt>
   18ee4:	movw	r1, #60236	; 0xeb4c
   18ee8:	mov	r0, #0
   18eec:	mov	r2, #5
   18ef0:	movt	r1, #1
   18ef4:	bl	116fc <dcgettext@plt>
   18ef8:	ldr	r6, [r5, #4]
   18efc:	mov	r4, r0
   18f00:	bl	118b8 <__errno_location@plt>
   18f04:	ldr	r5, [r0]
   18f08:	cmp	r6, #0
   18f0c:	bne	18f28 <__assert_fail@plt+0x74fc>
   18f10:	movw	r2, #8017	; 0x1f51
   18f14:	mov	r0, #0
   18f18:	mov	r1, r5
   18f1c:	mov	r3, r4
   18f20:	movt	r2, #2
   18f24:	b	18f48 <__assert_fail@plt+0x751c>
   18f28:	mov	r0, r6
   18f2c:	bl	1b288 <__assert_fail@plt+0x985c>
   18f30:	movw	r2, #8013	; 0x1f4d
   18f34:	mov	r3, r0
   18f38:	str	r4, [sp]
   18f3c:	mov	r0, #0
   18f40:	mov	r1, r5
   18f44:	movt	r2, #2
   18f48:	bl	117ec <error@plt>
   18f4c:	movw	r0, #12672	; 0x3180
   18f50:	movt	r0, #3
   18f54:	ldr	r0, [r0]
   18f58:	bl	116cc <_exit@plt>
   18f5c:	push	{r4, r5, r6, sl, fp, lr}
   18f60:	add	fp, sp, #16
   18f64:	mov	r4, r0
   18f68:	bl	118b8 <__errno_location@plt>
   18f6c:	ldr	r6, [r0]
   18f70:	mov	r5, r0
   18f74:	mov	r0, r4
   18f78:	bl	116c0 <free@plt>
   18f7c:	str	r6, [r5]
   18f80:	pop	{r4, r5, r6, sl, fp, pc}
   18f84:	push	{r4, r5, r6, r7, fp, lr}
   18f88:	add	fp, sp, #16
   18f8c:	cmp	r2, #0
   18f90:	beq	18fdc <__assert_fail@plt+0x75b0>
   18f94:	mov	r5, r2
   18f98:	mov	r6, r1
   18f9c:	mov	r7, r0
   18fa0:	mov	r4, #0
   18fa4:	mov	r0, r7
   18fa8:	mov	r1, r6
   18fac:	mov	r2, r5
   18fb0:	bl	1b90c <__assert_fail@plt+0x9ee0>
   18fb4:	cmn	r0, #1
   18fb8:	beq	18fd4 <__assert_fail@plt+0x75a8>
   18fbc:	cmp	r0, #0
   18fc0:	beq	18fe8 <__assert_fail@plt+0x75bc>
   18fc4:	subs	r5, r5, r0
   18fc8:	add	r6, r6, r0
   18fcc:	add	r4, r0, r4
   18fd0:	bne	18fa4 <__assert_fail@plt+0x7578>
   18fd4:	mov	r0, r4
   18fd8:	pop	{r4, r5, r6, r7, fp, pc}
   18fdc:	mov	r4, #0
   18fe0:	mov	r0, r4
   18fe4:	pop	{r4, r5, r6, r7, fp, pc}
   18fe8:	bl	118b8 <__errno_location@plt>
   18fec:	mov	r1, #28
   18ff0:	str	r1, [r0]
   18ff4:	mov	r0, r4
   18ff8:	pop	{r4, r5, r6, r7, fp, pc}
   18ffc:	push	{r4, r5, r6, sl, fp, lr}
   19000:	add	fp, sp, #16
   19004:	mov	r5, r0
   19008:	mov	r0, #0
   1900c:	mov	r4, r1
   19010:	add	r6, r2, #19
   19014:	strb	r0, [r2, #20]
   19018:	mov	r0, r5
   1901c:	mov	r1, r4
   19020:	mov	r2, #10
   19024:	mov	r3, #0
   19028:	bl	1e668 <__assert_fail@plt+0xcc3c>
   1902c:	add	r2, r0, r0, lsl #2
   19030:	sub	r2, r5, r2, lsl #1
   19034:	orr	r2, r2, #48	; 0x30
   19038:	strb	r2, [r6], #-1
   1903c:	rsbs	r2, r5, #9
   19040:	mov	r5, r0
   19044:	rscs	r2, r4, #0
   19048:	mov	r4, r1
   1904c:	bcc	19018 <__assert_fail@plt+0x75ec>
   19050:	add	r0, r6, #1
   19054:	pop	{r4, r5, r6, sl, fp, pc}
   19058:	push	{r4, r5, fp, lr}
   1905c:	add	fp, sp, #8
   19060:	cmp	r0, #0
   19064:	beq	190f8 <__assert_fail@plt+0x76cc>
   19068:	mov	r1, #47	; 0x2f
   1906c:	mov	r4, r0
   19070:	bl	119a8 <strrchr@plt>
   19074:	cmp	r0, #0
   19078:	mov	r5, r4
   1907c:	addne	r5, r0, #1
   19080:	sub	r0, r5, r4
   19084:	cmp	r0, #7
   19088:	blt	190dc <__assert_fail@plt+0x76b0>
   1908c:	movw	r1, #8076	; 0x1f8c
   19090:	sub	r0, r5, #7
   19094:	mov	r2, #7
   19098:	movt	r1, #2
   1909c:	bl	11a14 <strncmp@plt>
   190a0:	cmp	r0, #0
   190a4:	bne	190dc <__assert_fail@plt+0x76b0>
   190a8:	movw	r1, #8084	; 0x1f94
   190ac:	mov	r0, r5
   190b0:	mov	r2, #3
   190b4:	movt	r1, #2
   190b8:	bl	11a14 <strncmp@plt>
   190bc:	cmp	r0, #0
   190c0:	beq	190cc <__assert_fail@plt+0x76a0>
   190c4:	mov	r4, r5
   190c8:	b	190dc <__assert_fail@plt+0x76b0>
   190cc:	movw	r0, #12744	; 0x31c8
   190d0:	add	r4, r5, #3
   190d4:	movt	r0, #3
   190d8:	str	r4, [r0]
   190dc:	movw	r0, #12748	; 0x31cc
   190e0:	movt	r0, #3
   190e4:	str	r4, [r0]
   190e8:	movw	r0, #12800	; 0x3200
   190ec:	movt	r0, #3
   190f0:	str	r4, [r0]
   190f4:	pop	{r4, r5, fp, pc}
   190f8:	movw	r0, #12760	; 0x31d8
   190fc:	mov	r1, #55	; 0x37
   19100:	mov	r2, #1
   19104:	movt	r0, #3
   19108:	ldr	r3, [r0]
   1910c:	movw	r0, #8020	; 0x1f54
   19110:	movt	r0, #2
   19114:	bl	117a4 <fwrite@plt>
   19118:	bl	11a20 <abort@plt>
   1911c:	push	{r4, r5, r6, sl, fp, lr}
   19120:	add	fp, sp, #16
   19124:	sub	sp, sp, #8
   19128:	mov	r4, r0
   1912c:	mov	r0, #0
   19130:	mov	r2, #5
   19134:	mov	r1, r4
   19138:	bl	116fc <dcgettext@plt>
   1913c:	cmp	r0, r4
   19140:	beq	19168 <__assert_fail@plt+0x773c>
   19144:	mov	r1, r4
   19148:	mov	r5, r0
   1914c:	bl	191c4 <__assert_fail@plt+0x7798>
   19150:	cmp	r0, #0
   19154:	beq	19178 <__assert_fail@plt+0x774c>
   19158:	mov	r6, r5
   1915c:	mov	r0, r6
   19160:	sub	sp, fp, #16
   19164:	pop	{r4, r5, r6, sl, fp, pc}
   19168:	mov	r6, r4
   1916c:	mov	r0, r6
   19170:	sub	sp, fp, #16
   19174:	pop	{r4, r5, r6, sl, fp, pc}
   19178:	mov	r0, r5
   1917c:	bl	11888 <strlen@plt>
   19180:	mov	r6, r0
   19184:	mov	r0, r4
   19188:	bl	11888 <strlen@plt>
   1918c:	add	r0, r6, r0
   19190:	add	r0, r0, #4
   19194:	bl	1c30c <__assert_fail@plt+0xa8e0>
   19198:	movw	r3, #8088	; 0x1f98
   1919c:	mov	r1, #1
   191a0:	mvn	r2, #0
   191a4:	mov	r6, r0
   191a8:	str	r5, [sp]
   191ac:	str	r4, [sp, #4]
   191b0:	movt	r3, #2
   191b4:	bl	118d0 <__sprintf_chk@plt>
   191b8:	mov	r0, r6
   191bc:	sub	sp, fp, #16
   191c0:	pop	{r4, r5, r6, sl, fp, pc}
   191c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191c8:	add	fp, sp, #28
   191cc:	sub	sp, sp, #124	; 0x7c
   191d0:	mov	r4, r0
   191d4:	mov	r0, r1
   191d8:	mov	r1, #2
   191dc:	bl	1b970 <__assert_fail@plt+0x9f44>
   191e0:	mov	sl, r0
   191e4:	ldrb	r0, [r4]
   191e8:	cmp	r0, #0
   191ec:	beq	19468 <__assert_fail@plt+0x7a3c>
   191f0:	add	r5, sp, #12
   191f4:	add	r6, sp, #68	; 0x44
   191f8:	mov	r9, #0
   191fc:	add	r8, r6, #4
   19200:	add	r0, r5, #4
   19204:	str	r0, [sp, #4]
   19208:	str	r8, [sp]
   1920c:	b	19224 <__assert_fail@plt+0x77f8>
   19210:	ldr	r0, [sp, #88]	; 0x58
   19214:	add	r4, r7, r0
   19218:	ldrb	r0, [r4]
   1921c:	cmp	r0, #0
   19220:	beq	19468 <__assert_fail@plt+0x7a3c>
   19224:	mov	r0, r4
   19228:	mov	r1, sl
   1922c:	bl	1cf88 <__assert_fail@plt+0xb55c>
   19230:	cmp	r0, #0
   19234:	beq	19468 <__assert_fail@plt+0x7a3c>
   19238:	mov	r7, r0
   1923c:	bl	117c8 <__ctype_get_mb_cur_max@plt>
   19240:	cmp	r0, #2
   19244:	bcc	192b0 <__assert_fail@plt+0x7884>
   19248:	mov	r0, #1
   1924c:	cmp	r4, r7
   19250:	strb	r9, [sp, #68]	; 0x44
   19254:	str	r4, [sp, #84]	; 0x54
   19258:	str	r9, [r8]
   1925c:	str	r9, [r8, #4]
   19260:	strb	r9, [sp, #80]	; 0x50
   19264:	str	r0, [sp, #8]
   19268:	bcc	1928c <__assert_fail@plt+0x7860>
   1926c:	b	1934c <__assert_fail@plt+0x7920>
   19270:	strb	r9, [sp, #80]	; 0x50
   19274:	ldr	r2, [sp, #84]	; 0x54
   19278:	ldr	r3, [sp, #88]	; 0x58
   1927c:	add	r2, r2, r3
   19280:	cmp	r2, r7
   19284:	str	r2, [sp, #84]	; 0x54
   19288:	bcs	19334 <__assert_fail@plt+0x7908>
   1928c:	mov	r0, r6
   19290:	bl	1dabc <__assert_fail@plt+0xc090>
   19294:	ldrb	r1, [sp, #92]	; 0x5c
   19298:	ldr	r0, [sp, #96]	; 0x60
   1929c:	cmp	r1, #0
   192a0:	beq	19270 <__assert_fail@plt+0x7844>
   192a4:	cmp	r0, #0
   192a8:	bne	19270 <__assert_fail@plt+0x7844>
   192ac:	b	1948c <__assert_fail@plt+0x7a60>
   192b0:	cmp	r4, r7
   192b4:	mov	r8, #1
   192b8:	mov	r4, #1
   192bc:	bcs	192dc <__assert_fail@plt+0x78b0>
   192c0:	bl	11858 <__ctype_b_loc@plt>
   192c4:	ldrb	r1, [r7, #-1]
   192c8:	ldr	r0, [r0]
   192cc:	ldrb	r0, [r0, r1, lsl #1]
   192d0:	mov	r1, #1
   192d4:	and	r0, r0, #8
   192d8:	eor	r4, r1, r0, lsr #3
   192dc:	mov	r0, sl
   192e0:	mov	r5, sl
   192e4:	bl	11888 <strlen@plt>
   192e8:	ldrb	sl, [r7, r0]
   192ec:	cmp	sl, #0
   192f0:	beq	1930c <__assert_fail@plt+0x78e0>
   192f4:	bl	11858 <__ctype_b_loc@plt>
   192f8:	ldr	r0, [r0]
   192fc:	mov	r1, #1
   19300:	ldrb	r0, [r0, sl, lsl #1]
   19304:	and	r0, r0, #8
   19308:	eor	r8, r1, r0, lsr #3
   1930c:	tst	r4, r8
   19310:	bne	19480 <__assert_fail@plt+0x7a54>
   19314:	ldrb	r0, [r7], #1
   19318:	ldr	r8, [sp]
   1931c:	mov	sl, r5
   19320:	add	r5, sp, #12
   19324:	mov	r4, r7
   19328:	cmp	r0, #0
   1932c:	bne	19218 <__assert_fail@plt+0x77ec>
   19330:	b	19468 <__assert_fail@plt+0x7a3c>
   19334:	cmp	r1, #0
   19338:	beq	1934c <__assert_fail@plt+0x7920>
   1933c:	bl	118c4 <iswalnum@plt>
   19340:	clz	r0, r0
   19344:	lsr	r0, r0, #5
   19348:	str	r0, [sp, #8]
   1934c:	ldr	r0, [sp, #4]
   19350:	strb	r9, [sp, #68]	; 0x44
   19354:	str	r7, [sp, #84]	; 0x54
   19358:	strb	r9, [sp, #12]
   1935c:	str	sl, [sp, #28]
   19360:	str	r9, [r8]
   19364:	str	r9, [r8, #4]
   19368:	strb	r9, [sp, #80]	; 0x50
   1936c:	str	r9, [r0]
   19370:	str	r9, [r0, #4]
   19374:	strb	r9, [sp, #24]
   19378:	b	193a4 <__assert_fail@plt+0x7978>
   1937c:	strb	r9, [sp, #80]	; 0x50
   19380:	strb	r9, [sp, #24]
   19384:	ldr	r0, [sp, #84]	; 0x54
   19388:	ldr	r1, [sp, #88]	; 0x58
   1938c:	add	r0, r0, r1
   19390:	ldr	r1, [sp, #32]
   19394:	str	r0, [sp, #84]	; 0x54
   19398:	ldr	r0, [sp, #28]
   1939c:	add	r0, r0, r1
   193a0:	str	r0, [sp, #28]
   193a4:	mov	r0, r5
   193a8:	bl	1dabc <__assert_fail@plt+0xc090>
   193ac:	ldrb	r0, [sp, #36]	; 0x24
   193b0:	cmp	r0, #0
   193b4:	beq	193c4 <__assert_fail@plt+0x7998>
   193b8:	ldr	r0, [sp, #40]	; 0x28
   193bc:	cmp	r0, #0
   193c0:	beq	193e8 <__assert_fail@plt+0x79bc>
   193c4:	mov	r0, r6
   193c8:	bl	1dabc <__assert_fail@plt+0xc090>
   193cc:	ldrb	r0, [sp, #92]	; 0x5c
   193d0:	cmp	r0, #0
   193d4:	beq	1937c <__assert_fail@plt+0x7950>
   193d8:	ldr	r0, [sp, #96]	; 0x60
   193dc:	cmp	r0, #0
   193e0:	bne	1937c <__assert_fail@plt+0x7950>
   193e4:	b	1948c <__assert_fail@plt+0x7a60>
   193e8:	mov	r0, r6
   193ec:	bl	1dabc <__assert_fail@plt+0xc090>
   193f0:	ldrb	r0, [sp, #92]	; 0x5c
   193f4:	mov	r4, #1
   193f8:	mov	r1, #1
   193fc:	cmp	r0, #0
   19400:	beq	19420 <__assert_fail@plt+0x79f4>
   19404:	ldr	r0, [sp, #96]	; 0x60
   19408:	mov	r1, #1
   1940c:	cmp	r0, #0
   19410:	beq	19420 <__assert_fail@plt+0x79f4>
   19414:	bl	118c4 <iswalnum@plt>
   19418:	clz	r0, r0
   1941c:	lsr	r1, r0, #5
   19420:	ldr	r0, [sp, #8]
   19424:	tst	r0, r1
   19428:	bne	1946c <__assert_fail@plt+0x7a40>
   1942c:	mov	r4, #0
   19430:	mov	r0, r6
   19434:	strb	r4, [sp, #68]	; 0x44
   19438:	str	r7, [sp, #84]	; 0x54
   1943c:	str	r4, [r8]
   19440:	str	r4, [r8, #4]
   19444:	strb	r4, [sp, #80]	; 0x50
   19448:	bl	1dabc <__assert_fail@plt+0xc090>
   1944c:	ldrb	r0, [sp, #92]	; 0x5c
   19450:	cmp	r0, #0
   19454:	beq	19210 <__assert_fail@plt+0x77e4>
   19458:	ldr	r0, [sp, #96]	; 0x60
   1945c:	cmp	r0, #0
   19460:	bne	19210 <__assert_fail@plt+0x77e4>
   19464:	b	1946c <__assert_fail@plt+0x7a40>
   19468:	mov	r4, #0
   1946c:	mov	r0, sl
   19470:	bl	18f5c <__assert_fail@plt+0x7530>
   19474:	mov	r0, r4
   19478:	sub	sp, fp, #28
   1947c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19480:	mov	r4, #1
   19484:	mov	sl, r5
   19488:	b	1946c <__assert_fail@plt+0x7a40>
   1948c:	bl	11a20 <abort@plt>
   19490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19494:	add	fp, sp, #28
   19498:	sub	sp, sp, #12
   1949c:	mov	r8, r0
   194a0:	mov	r5, r1
   194a4:	mov	r0, #0
   194a8:	mov	r2, #5
   194ac:	mov	r7, #0
   194b0:	mov	r1, r8
   194b4:	bl	116fc <dcgettext@plt>
   194b8:	mov	r4, r0
   194bc:	bl	1cc88 <__assert_fail@plt+0xb25c>
   194c0:	movw	r1, #8096	; 0x1fa0
   194c4:	mov	r6, r0
   194c8:	movt	r1, #2
   194cc:	bl	1ca10 <__assert_fail@plt+0xafe4>
   194d0:	cmp	r0, #0
   194d4:	beq	19588 <__assert_fail@plt+0x7b5c>
   194d8:	str	r4, [sp, #8]
   194dc:	movw	r4, #8096	; 0x1fa0
   194e0:	mov	r0, r5
   194e4:	mov	r2, r6
   194e8:	movt	r4, #2
   194ec:	mov	r1, r4
   194f0:	bl	1c904 <__assert_fail@plt+0xaed8>
   194f4:	mov	sl, r0
   194f8:	mov	r0, r6
   194fc:	bl	11888 <strlen@plt>
   19500:	mov	r7, r0
   19504:	add	r0, r0, #11
   19508:	bl	1c30c <__assert_fail@plt+0xa8e0>
   1950c:	mov	r1, r6
   19510:	mov	r2, r7
   19514:	mov	r9, r0
   19518:	bl	116d8 <memcpy@plt>
   1951c:	movw	r0, #8104	; 0x1fa8
   19520:	movw	r1, #18764	; 0x494c
   19524:	mov	r2, r9
   19528:	movt	r0, #2
   1952c:	movt	r1, #84	; 0x54
   19530:	vldr	d16, [r0]
   19534:	add	r0, r9, r7
   19538:	str	r1, [r0, #7]
   1953c:	mov	r1, r4
   19540:	vst1.8	{d16}, [r0]
   19544:	mov	r0, r5
   19548:	bl	1c904 <__assert_fail@plt+0xaed8>
   1954c:	mov	r7, r0
   19550:	mov	r0, r9
   19554:	bl	18f5c <__assert_fail@plt+0x7530>
   19558:	mov	r5, #0
   1955c:	cmp	r7, #0
   19560:	beq	19580 <__assert_fail@plt+0x7b54>
   19564:	mov	r0, r7
   19568:	mov	r1, #63	; 0x3f
   1956c:	bl	11894 <strchr@plt>
   19570:	cmp	r0, #0
   19574:	beq	19594 <__assert_fail@plt+0x7b68>
   19578:	mov	r0, r7
   1957c:	bl	18f5c <__assert_fail@plt+0x7530>
   19580:	mov	r7, #0
   19584:	b	19598 <__assert_fail@plt+0x7b6c>
   19588:	mov	sl, r5
   1958c:	mov	r9, #0
   19590:	b	195a0 <__assert_fail@plt+0x7b74>
   19594:	mov	r5, r7
   19598:	ldr	r4, [sp, #8]
   1959c:	mov	r9, sl
   195a0:	cmp	r5, #0
   195a4:	mov	r6, r5
   195a8:	mov	r0, r4
   195ac:	mov	r1, r8
   195b0:	moveq	r6, r8
   195b4:	cmp	sl, #0
   195b8:	movne	r6, sl
   195bc:	bl	1166c <strcmp@plt>
   195c0:	cmp	r0, #0
   195c4:	beq	19640 <__assert_fail@plt+0x7c14>
   195c8:	mov	r0, r4
   195cc:	mov	r1, r8
   195d0:	bl	191c4 <__assert_fail@plt+0x7798>
   195d4:	cmp	r0, #0
   195d8:	bne	19614 <__assert_fail@plt+0x7be8>
   195dc:	cmp	sl, #0
   195e0:	beq	195f8 <__assert_fail@plt+0x7bcc>
   195e4:	mov	r0, r4
   195e8:	mov	r1, sl
   195ec:	bl	191c4 <__assert_fail@plt+0x7798>
   195f0:	cmp	r0, #0
   195f4:	bne	19614 <__assert_fail@plt+0x7be8>
   195f8:	cmp	r5, #0
   195fc:	beq	19668 <__assert_fail@plt+0x7c3c>
   19600:	mov	r0, r4
   19604:	mov	r1, r5
   19608:	bl	191c4 <__assert_fail@plt+0x7798>
   1960c:	cmp	r0, #0
   19610:	beq	19668 <__assert_fail@plt+0x7c3c>
   19614:	cmp	r9, #0
   19618:	beq	19624 <__assert_fail@plt+0x7bf8>
   1961c:	mov	r0, r9
   19620:	bl	18f5c <__assert_fail@plt+0x7530>
   19624:	cmp	r7, #0
   19628:	beq	19634 <__assert_fail@plt+0x7c08>
   1962c:	mov	r0, r7
   19630:	bl	18f5c <__assert_fail@plt+0x7530>
   19634:	mov	r0, r4
   19638:	sub	sp, fp, #28
   1963c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19640:	cmp	r9, #0
   19644:	cmpne	r9, r6
   19648:	bne	196d4 <__assert_fail@plt+0x7ca8>
   1964c:	cmp	r7, #0
   19650:	cmpne	r7, r6
   19654:	bne	196e8 <__assert_fail@plt+0x7cbc>
   19658:	mov	r4, r6
   1965c:	mov	r0, r4
   19660:	sub	sp, fp, #28
   19664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19668:	mov	r0, r4
   1966c:	bl	11888 <strlen@plt>
   19670:	mov	r5, r0
   19674:	mov	r0, r6
   19678:	bl	11888 <strlen@plt>
   1967c:	add	r0, r5, r0
   19680:	add	r0, r0, #4
   19684:	bl	1c30c <__assert_fail@plt+0xa8e0>
   19688:	movw	r3, #8088	; 0x1f98
   1968c:	mov	r1, #1
   19690:	mvn	r2, #0
   19694:	mov	r5, r0
   19698:	stm	sp, {r4, r6}
   1969c:	movt	r3, #2
   196a0:	bl	118d0 <__sprintf_chk@plt>
   196a4:	cmp	r9, #0
   196a8:	beq	196b4 <__assert_fail@plt+0x7c88>
   196ac:	mov	r0, r9
   196b0:	bl	18f5c <__assert_fail@plt+0x7530>
   196b4:	cmp	r7, #0
   196b8:	beq	19700 <__assert_fail@plt+0x7cd4>
   196bc:	mov	r0, r7
   196c0:	bl	18f5c <__assert_fail@plt+0x7530>
   196c4:	mov	r4, r5
   196c8:	mov	r0, r4
   196cc:	sub	sp, fp, #28
   196d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196d4:	mov	r0, r9
   196d8:	bl	18f5c <__assert_fail@plt+0x7530>
   196dc:	cmp	r7, #0
   196e0:	cmpne	r7, r6
   196e4:	beq	19658 <__assert_fail@plt+0x7c2c>
   196e8:	mov	r0, r7
   196ec:	bl	18f5c <__assert_fail@plt+0x7530>
   196f0:	mov	r4, r6
   196f4:	mov	r0, r4
   196f8:	sub	sp, fp, #28
   196fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19700:	mov	r4, r5
   19704:	mov	r0, r4
   19708:	sub	sp, fp, #28
   1970c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19710:	push	{r4, r5, r6, sl, fp, lr}
   19714:	add	fp, sp, #16
   19718:	mov	r4, r0
   1971c:	movw	r0, #12808	; 0x3208
   19720:	movt	r0, #3
   19724:	cmp	r4, #0
   19728:	moveq	r4, r0
   1972c:	bl	118b8 <__errno_location@plt>
   19730:	ldr	r6, [r0]
   19734:	mov	r5, r0
   19738:	mov	r0, r4
   1973c:	mov	r1, #48	; 0x30
   19740:	bl	1c76c <__assert_fail@plt+0xad40>
   19744:	str	r6, [r5]
   19748:	pop	{r4, r5, r6, sl, fp, pc}
   1974c:	movw	r1, #12808	; 0x3208
   19750:	cmp	r0, #0
   19754:	movt	r1, #3
   19758:	movne	r1, r0
   1975c:	ldr	r0, [r1]
   19760:	bx	lr
   19764:	movw	r2, #12808	; 0x3208
   19768:	cmp	r0, #0
   1976c:	movt	r2, #3
   19770:	movne	r2, r0
   19774:	str	r1, [r2]
   19778:	bx	lr
   1977c:	movw	r3, #12808	; 0x3208
   19780:	cmp	r0, #0
   19784:	and	r2, r2, #1
   19788:	movt	r3, #3
   1978c:	movne	r3, r0
   19790:	ubfx	r0, r1, #5, #3
   19794:	and	r1, r1, #31
   19798:	add	ip, r3, r0, lsl #2
   1979c:	mov	r0, #1
   197a0:	ldr	r3, [ip, #8]
   197a4:	and	r0, r0, r3, lsr r1
   197a8:	eor	r2, r0, r2
   197ac:	eor	r1, r3, r2, lsl r1
   197b0:	str	r1, [ip, #8]
   197b4:	bx	lr
   197b8:	movw	r2, #12808	; 0x3208
   197bc:	cmp	r0, #0
   197c0:	movt	r2, #3
   197c4:	movne	r2, r0
   197c8:	ldr	r0, [r2, #4]
   197cc:	str	r1, [r2, #4]
   197d0:	bx	lr
   197d4:	push	{fp, lr}
   197d8:	mov	fp, sp
   197dc:	movw	r3, #12808	; 0x3208
   197e0:	cmp	r0, #0
   197e4:	movt	r3, #3
   197e8:	movne	r3, r0
   197ec:	cmp	r1, #0
   197f0:	mov	r0, #10
   197f4:	cmpne	r2, #0
   197f8:	str	r0, [r3]
   197fc:	bne	19804 <__assert_fail@plt+0x7dd8>
   19800:	bl	11a20 <abort@plt>
   19804:	str	r1, [r3, #40]	; 0x28
   19808:	str	r2, [r3, #44]	; 0x2c
   1980c:	pop	{fp, pc}
   19810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19814:	add	fp, sp, #28
   19818:	sub	sp, sp, #20
   1981c:	mov	r7, r0
   19820:	ldr	r0, [fp, #8]
   19824:	movw	r5, #12808	; 0x3208
   19828:	mov	r8, r3
   1982c:	mov	r9, r2
   19830:	mov	sl, r1
   19834:	movt	r5, #3
   19838:	cmp	r0, #0
   1983c:	movne	r5, r0
   19840:	bl	118b8 <__errno_location@plt>
   19844:	ldr	r2, [r5, #40]	; 0x28
   19848:	ldr	r3, [r5, #44]	; 0x2c
   1984c:	mov	r4, r0
   19850:	ldm	r5, {r0, r1}
   19854:	add	r5, r5, #8
   19858:	ldr	r6, [r4]
   1985c:	stm	sp, {r0, r1, r5}
   19860:	mov	r0, r7
   19864:	mov	r1, sl
   19868:	str	r2, [sp, #12]
   1986c:	str	r3, [sp, #16]
   19870:	mov	r2, r9
   19874:	mov	r3, r8
   19878:	bl	19888 <__assert_fail@plt+0x7e5c>
   1987c:	str	r6, [r4]
   19880:	sub	sp, fp, #28
   19884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1988c:	add	fp, sp, #28
   19890:	sub	sp, sp, #156	; 0x9c
   19894:	str	r0, [fp, #-84]	; 0xffffffac
   19898:	add	r0, r2, #1
   1989c:	mov	r6, r1
   198a0:	mov	r7, r3
   198a4:	str	r2, [fp, #-80]	; 0xffffffb0
   198a8:	str	r0, [sp, #80]	; 0x50
   198ac:	ldr	r0, [fp, #12]
   198b0:	and	r1, r0, #1
   198b4:	str	r1, [sp, #36]	; 0x24
   198b8:	and	r1, r0, #4
   198bc:	str	r1, [sp, #32]
   198c0:	ubfx	r8, r0, #1, #1
   198c4:	bl	117c8 <__ctype_get_mb_cur_max@plt>
   198c8:	str	r0, [sp, #40]	; 0x28
   198cc:	ldr	r0, [fp, #24]
   198d0:	ldr	r4, [fp, #8]
   198d4:	mov	r1, #0
   198d8:	str	r1, [fp, #-52]	; 0xffffffcc
   198dc:	mov	r1, #0
   198e0:	str	r1, [sp, #60]	; 0x3c
   198e4:	mov	r1, #1
   198e8:	str	r1, [sp, #84]	; 0x54
   198ec:	str	r0, [sp, #76]	; 0x4c
   198f0:	ldr	r0, [fp, #20]
   198f4:	str	r0, [sp, #72]	; 0x48
   198f8:	mov	r0, #0
   198fc:	str	r0, [sp, #56]	; 0x38
   19900:	mov	r0, #0
   19904:	str	r0, [fp, #-88]	; 0xffffffa8
   19908:	mov	r0, #0
   1990c:	str	r0, [fp, #-72]	; 0xffffffb8
   19910:	mov	r0, #0
   19914:	cmp	r4, #10
   19918:	bhi	1ac34 <__assert_fail@plt+0x9208>
   1991c:	add	r1, pc, #24
   19920:	ldr	ip, [fp, #-84]	; 0xffffffac
   19924:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19928:	mov	r5, r6
   1992c:	mov	r9, #0
   19930:	mov	r2, #1
   19934:	mov	r3, #0
   19938:	ldr	pc, [r1, r4, lsl #2]
   1993c:	andeq	r9, r1, r4, lsl #20
   19940:	andeq	r9, r1, r0, asr #20
   19944:	andeq	r9, r1, r4, lsl sl
   19948:	strdeq	r9, [r1], -ip
   1994c:	andeq	r9, r1, r4, lsr sl
   19950:	muleq	r1, r8, sl
   19954:	andeq	r9, r1, r4, lsr #20
   19958:	andeq	r9, r1, r0, lsl sp
   1995c:	andeq	r9, r1, r8, ror #18
   19960:	andeq	r9, r1, r8, ror #18
   19964:	andeq	r9, r1, r0, lsr #23
   19968:	movw	r6, #8198	; 0x2006
   1996c:	mov	r0, #0
   19970:	mov	r2, #5
   19974:	movt	r6, #2
   19978:	mov	r1, r6
   1997c:	bl	116fc <dcgettext@plt>
   19980:	cmp	r0, r6
   19984:	str	r0, [sp, #72]	; 0x48
   19988:	bne	19b78 <__assert_fail@plt+0x814c>
   1998c:	bl	1cc88 <__assert_fail@plt+0xb25c>
   19990:	ldrb	r1, [r0]
   19994:	and	r1, r1, #223	; 0xdf
   19998:	cmp	r1, #71	; 0x47
   1999c:	beq	19af8 <__assert_fail@plt+0x80cc>
   199a0:	cmp	r1, #85	; 0x55
   199a4:	bne	19b5c <__assert_fail@plt+0x8130>
   199a8:	ldrb	r1, [r0, #1]
   199ac:	and	r1, r1, #223	; 0xdf
   199b0:	cmp	r1, #84	; 0x54
   199b4:	bne	19b5c <__assert_fail@plt+0x8130>
   199b8:	ldrb	r1, [r0, #2]
   199bc:	and	r1, r1, #223	; 0xdf
   199c0:	cmp	r1, #70	; 0x46
   199c4:	bne	19b5c <__assert_fail@plt+0x8130>
   199c8:	ldrb	r1, [r0, #3]
   199cc:	cmp	r1, #45	; 0x2d
   199d0:	bne	19b5c <__assert_fail@plt+0x8130>
   199d4:	ldrb	r1, [r0, #4]
   199d8:	cmp	r1, #56	; 0x38
   199dc:	bne	19b5c <__assert_fail@plt+0x8130>
   199e0:	ldrb	r0, [r0, #5]
   199e4:	cmp	r0, #0
   199e8:	movw	r0, #8200	; 0x2008
   199ec:	movt	r0, #2
   199f0:	str	r0, [sp, #72]	; 0x48
   199f4:	bne	19b5c <__assert_fail@plt+0x8130>
   199f8:	b	19b78 <__assert_fail@plt+0x814c>
   199fc:	mov	r0, #1
   19a00:	b	19a40 <__assert_fail@plt+0x8014>
   19a04:	mov	r4, #0
   19a08:	mov	r9, #0
   19a0c:	mov	r2, r0
   19a10:	b	19a90 <__assert_fail@plt+0x8064>
   19a14:	tst	r8, #1
   19a18:	bne	19a40 <__assert_fail@plt+0x8014>
   19a1c:	mov	r2, r0
   19a20:	b	19a68 <__assert_fail@plt+0x803c>
   19a24:	mov	r0, #1
   19a28:	mov	r9, #0
   19a2c:	mov	r4, #5
   19a30:	b	19aac <__assert_fail@plt+0x8080>
   19a34:	mov	r2, #1
   19a38:	tst	r8, #1
   19a3c:	beq	19a68 <__assert_fail@plt+0x803c>
   19a40:	mov	r1, #1
   19a44:	mov	r9, #0
   19a48:	mov	r4, #2
   19a4c:	mov	r2, r0
   19a50:	mov	r3, #1
   19a54:	str	r1, [fp, #-72]	; 0xffffffb8
   19a58:	movw	r1, #9212	; 0x23fc
   19a5c:	movt	r1, #2
   19a60:	str	r1, [fp, #-88]	; 0xffffffa8
   19a64:	b	19d10 <__assert_fail@plt+0x82e4>
   19a68:	cmp	r5, #0
   19a6c:	mov	r9, #1
   19a70:	mov	r4, #2
   19a74:	movne	r0, #39	; 0x27
   19a78:	strbne	r0, [ip]
   19a7c:	movw	r0, #9212	; 0x23fc
   19a80:	movt	r0, #2
   19a84:	str	r0, [fp, #-88]	; 0xffffffa8
   19a88:	mov	r0, #1
   19a8c:	str	r0, [fp, #-72]	; 0xffffffb8
   19a90:	mov	r3, #0
   19a94:	b	19d10 <__assert_fail@plt+0x82e4>
   19a98:	mov	r4, #5
   19a9c:	tst	r8, #1
   19aa0:	beq	19ac8 <__assert_fail@plt+0x809c>
   19aa4:	mov	r0, #1
   19aa8:	mov	r9, #0
   19aac:	str	r0, [fp, #-72]	; 0xffffffb8
   19ab0:	movw	r0, #8196	; 0x2004
   19ab4:	mov	r2, #1
   19ab8:	mov	r3, #1
   19abc:	movt	r0, #2
   19ac0:	str	r0, [fp, #-88]	; 0xffffffa8
   19ac4:	b	19d10 <__assert_fail@plt+0x82e4>
   19ac8:	cmp	r5, #0
   19acc:	mov	r3, #0
   19ad0:	mov	r9, #1
   19ad4:	mov	r2, #1
   19ad8:	movne	r0, #34	; 0x22
   19adc:	strbne	r0, [ip]
   19ae0:	movw	r0, #8196	; 0x2004
   19ae4:	movt	r0, #2
   19ae8:	str	r0, [fp, #-88]	; 0xffffffa8
   19aec:	mov	r0, #1
   19af0:	str	r0, [fp, #-72]	; 0xffffffb8
   19af4:	b	19d10 <__assert_fail@plt+0x82e4>
   19af8:	ldrb	r1, [r0, #1]
   19afc:	and	r1, r1, #223	; 0xdf
   19b00:	cmp	r1, #66	; 0x42
   19b04:	bne	19b5c <__assert_fail@plt+0x8130>
   19b08:	ldrb	r1, [r0, #2]
   19b0c:	cmp	r1, #49	; 0x31
   19b10:	bne	19b5c <__assert_fail@plt+0x8130>
   19b14:	ldrb	r1, [r0, #3]
   19b18:	cmp	r1, #56	; 0x38
   19b1c:	bne	19b5c <__assert_fail@plt+0x8130>
   19b20:	ldrb	r1, [r0, #4]
   19b24:	cmp	r1, #48	; 0x30
   19b28:	bne	19b5c <__assert_fail@plt+0x8130>
   19b2c:	ldrb	r1, [r0, #5]
   19b30:	cmp	r1, #51	; 0x33
   19b34:	bne	19b5c <__assert_fail@plt+0x8130>
   19b38:	ldrb	r1, [r0, #6]
   19b3c:	cmp	r1, #48	; 0x30
   19b40:	bne	19b5c <__assert_fail@plt+0x8130>
   19b44:	ldrb	r0, [r0, #7]
   19b48:	cmp	r0, #0
   19b4c:	movw	r0, #8208	; 0x2010
   19b50:	movt	r0, #2
   19b54:	str	r0, [sp, #72]	; 0x48
   19b58:	beq	19b78 <__assert_fail@plt+0x814c>
   19b5c:	movw	r1, #8196	; 0x2004
   19b60:	movw	r0, #9212	; 0x23fc
   19b64:	cmp	r4, #9
   19b68:	movt	r1, #2
   19b6c:	movt	r0, #2
   19b70:	moveq	r0, r1
   19b74:	str	r0, [sp, #72]	; 0x48
   19b78:	movw	r6, #9212	; 0x23fc
   19b7c:	mov	r0, #0
   19b80:	mov	r2, #5
   19b84:	movt	r6, #2
   19b88:	mov	r1, r6
   19b8c:	bl	116fc <dcgettext@plt>
   19b90:	cmp	r0, r6
   19b94:	str	r0, [sp, #76]	; 0x4c
   19b98:	beq	19be4 <__assert_fail@plt+0x81b8>
   19b9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19ba0:	mov	r9, #0
   19ba4:	tst	r8, #1
   19ba8:	bne	19cec <__assert_fail@plt+0x82c0>
   19bac:	ldr	r0, [sp, #72]	; 0x48
   19bb0:	ldrb	r0, [r0]
   19bb4:	cmp	r0, #0
   19bb8:	beq	19cec <__assert_fail@plt+0x82c0>
   19bbc:	ldr	r1, [sp, #72]	; 0x48
   19bc0:	mov	r9, #0
   19bc4:	add	r1, r1, #1
   19bc8:	cmp	r9, r5
   19bcc:	strbcc	r0, [ip, r9]
   19bd0:	ldrb	r0, [r1, r9]
   19bd4:	add	r9, r9, #1
   19bd8:	cmp	r0, #0
   19bdc:	bne	19bc8 <__assert_fail@plt+0x819c>
   19be0:	b	19cec <__assert_fail@plt+0x82c0>
   19be4:	bl	1cc88 <__assert_fail@plt+0xb25c>
   19be8:	ldrb	r1, [r0]
   19bec:	and	r1, r1, #223	; 0xdf
   19bf0:	cmp	r1, #71	; 0x47
   19bf4:	beq	19c64 <__assert_fail@plt+0x8238>
   19bf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   19bfc:	cmp	r1, #85	; 0x55
   19c00:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c04:	ldrb	r1, [r0, #1]
   19c08:	and	r1, r1, #223	; 0xdf
   19c0c:	cmp	r1, #84	; 0x54
   19c10:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c14:	ldrb	r1, [r0, #2]
   19c18:	and	r1, r1, #223	; 0xdf
   19c1c:	cmp	r1, #70	; 0x46
   19c20:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c24:	ldrb	r1, [r0, #3]
   19c28:	cmp	r1, #45	; 0x2d
   19c2c:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c30:	ldrb	r1, [r0, #4]
   19c34:	cmp	r1, #56	; 0x38
   19c38:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c3c:	ldrb	r0, [r0, #5]
   19c40:	cmp	r0, #0
   19c44:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c48:	movw	r0, #8204	; 0x200c
   19c4c:	movt	r0, #2
   19c50:	str	r0, [sp, #76]	; 0x4c
   19c54:	mov	r9, #0
   19c58:	tst	r8, #1
   19c5c:	beq	19bac <__assert_fail@plt+0x8180>
   19c60:	b	19cec <__assert_fail@plt+0x82c0>
   19c64:	ldrb	r1, [r0, #1]
   19c68:	ldr	ip, [fp, #-84]	; 0xffffffac
   19c6c:	and	r1, r1, #223	; 0xdf
   19c70:	cmp	r1, #66	; 0x42
   19c74:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c78:	ldrb	r1, [r0, #2]
   19c7c:	cmp	r1, #49	; 0x31
   19c80:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c84:	ldrb	r1, [r0, #3]
   19c88:	cmp	r1, #56	; 0x38
   19c8c:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c90:	ldrb	r1, [r0, #4]
   19c94:	cmp	r1, #48	; 0x30
   19c98:	bne	19cc0 <__assert_fail@plt+0x8294>
   19c9c:	ldrb	r1, [r0, #5]
   19ca0:	cmp	r1, #51	; 0x33
   19ca4:	bne	19cc0 <__assert_fail@plt+0x8294>
   19ca8:	ldrb	r1, [r0, #6]
   19cac:	cmp	r1, #48	; 0x30
   19cb0:	bne	19cc0 <__assert_fail@plt+0x8294>
   19cb4:	ldrb	r0, [r0, #7]
   19cb8:	cmp	r0, #0
   19cbc:	beq	1aad4 <__assert_fail@plt+0x90a8>
   19cc0:	movw	r0, #9212	; 0x23fc
   19cc4:	cmp	r4, #9
   19cc8:	movt	r0, #2
   19ccc:	mov	r1, r0
   19cd0:	movw	r0, #8196	; 0x2004
   19cd4:	movt	r0, #2
   19cd8:	moveq	r1, r0
   19cdc:	str	r1, [sp, #76]	; 0x4c
   19ce0:	mov	r9, #0
   19ce4:	tst	r8, #1
   19ce8:	beq	19bac <__assert_fail@plt+0x8180>
   19cec:	ldr	r6, [sp, #76]	; 0x4c
   19cf0:	mov	r0, r6
   19cf4:	bl	11888 <strlen@plt>
   19cf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   19cfc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19d00:	str	r0, [fp, #-72]	; 0xffffffb8
   19d04:	str	r6, [fp, #-88]	; 0xffffffa8
   19d08:	mov	r2, #1
   19d0c:	mov	r3, r8
   19d10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19d14:	str	r4, [fp, #-64]	; 0xffffffc0
   19d18:	mov	sl, #0
   19d1c:	str	r3, [fp, #-76]	; 0xffffffb4
   19d20:	str	r2, [sp, #88]	; 0x58
   19d24:	cmp	r0, #0
   19d28:	movwne	r0, #1
   19d2c:	and	r1, r0, r3
   19d30:	and	r1, r2, r1
   19d34:	str	r1, [sp, #48]	; 0x30
   19d38:	sub	r1, r4, #2
   19d3c:	clz	r1, r1
   19d40:	lsr	r1, r1, #5
   19d44:	and	r1, r1, r3
   19d48:	str	r1, [sp, #44]	; 0x2c
   19d4c:	subs	r1, r4, #2
   19d50:	eor	r4, r3, #1
   19d54:	movwne	r1, #1
   19d58:	str	r4, [sp, #92]	; 0x5c
   19d5c:	orr	r4, r1, r4
   19d60:	and	r1, r1, r2
   19d64:	and	r0, r0, r1
   19d68:	str	r4, [sp, #64]	; 0x40
   19d6c:	ldr	r4, [sp, #84]	; 0x54
   19d70:	str	r0, [fp, #-60]	; 0xffffffc4
   19d74:	orr	r0, r1, r3
   19d78:	ldr	r1, [fp, #16]
   19d7c:	eor	r0, r0, #1
   19d80:	clz	r1, r1
   19d84:	lsr	r1, r1, #5
   19d88:	orr	r0, r1, r0
   19d8c:	str	r0, [fp, #-68]	; 0xffffffbc
   19d90:	eor	r0, r2, #1
   19d94:	str	r0, [sp, #52]	; 0x34
   19d98:	cmn	r7, #1
   19d9c:	beq	19dac <__assert_fail@plt+0x8380>
   19da0:	cmp	sl, r7
   19da4:	bne	19db8 <__assert_fail@plt+0x838c>
   19da8:	b	1aa4c <__assert_fail@plt+0x9020>
   19dac:	ldrb	r0, [lr, sl]
   19db0:	cmp	r0, #0
   19db4:	beq	1aa54 <__assert_fail@plt+0x9028>
   19db8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19dbc:	cmp	r0, #0
   19dc0:	beq	19e20 <__assert_fail@plt+0x83f4>
   19dc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19dc8:	mov	r6, r5
   19dcc:	add	r5, sl, r0
   19dd0:	cmp	r0, #2
   19dd4:	bcc	19e40 <__assert_fail@plt+0x8414>
   19dd8:	mov	r0, #0
   19ddc:	cmn	r7, #1
   19de0:	str	r0, [fp, #-56]	; 0xffffffc8
   19de4:	bne	19dfc <__assert_fail@plt+0x83d0>
   19de8:	mov	r0, lr
   19dec:	bl	11888 <strlen@plt>
   19df0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19df4:	ldr	ip, [fp, #-84]	; 0xffffffac
   19df8:	mov	r7, r0
   19dfc:	cmp	r5, r7
   19e00:	bls	19e50 <__assert_fail@plt+0x8424>
   19e04:	mov	r0, #0
   19e08:	mov	r5, r6
   19e0c:	str	r0, [fp, #-48]	; 0xffffffd0
   19e10:	ldrb	r6, [lr, sl]
   19e14:	cmp	r6, #126	; 0x7e
   19e18:	bls	19ea0 <__assert_fail@plt+0x8474>
   19e1c:	b	1a3fc <__assert_fail@plt+0x89d0>
   19e20:	mov	r0, #0
   19e24:	str	r0, [fp, #-56]	; 0xffffffc8
   19e28:	mov	r0, #0
   19e2c:	str	r0, [fp, #-48]	; 0xffffffd0
   19e30:	ldrb	r6, [lr, sl]
   19e34:	cmp	r6, #126	; 0x7e
   19e38:	bls	19ea0 <__assert_fail@plt+0x8474>
   19e3c:	b	1a3fc <__assert_fail@plt+0x89d0>
   19e40:	mov	r0, #0
   19e44:	str	r0, [fp, #-56]	; 0xffffffc8
   19e48:	cmp	r5, r7
   19e4c:	bhi	19e04 <__assert_fail@plt+0x83d8>
   19e50:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19e54:	ldr	r2, [fp, #-72]	; 0xffffffb8
   19e58:	add	r0, lr, sl
   19e5c:	bl	1187c <bcmp@plt>
   19e60:	ldr	r2, [sp, #92]	; 0x5c
   19e64:	cmp	r0, #0
   19e68:	mov	r1, r0
   19e6c:	mov	r5, r6
   19e70:	movwne	r1, #1
   19e74:	orr	r1, r1, r2
   19e78:	tst	r1, #1
   19e7c:	beq	1ab14 <__assert_fail@plt+0x90e8>
   19e80:	ldr	ip, [fp, #-84]	; 0xffffffac
   19e84:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19e88:	clz	r0, r0
   19e8c:	lsr	r0, r0, #5
   19e90:	str	r0, [fp, #-48]	; 0xffffffd0
   19e94:	ldrb	r6, [lr, sl]
   19e98:	cmp	r6, #126	; 0x7e
   19e9c:	bhi	1a3fc <__assert_fail@plt+0x89d0>
   19ea0:	add	r3, pc, #16
   19ea4:	mov	r8, #1
   19ea8:	mov	r2, #110	; 0x6e
   19eac:	mov	r0, #97	; 0x61
   19eb0:	mov	r1, #0
   19eb4:	ldr	pc, [r3, r6, lsl #2]
   19eb8:			; <UNDEFINED> instruction: 0x0001a1b4
   19ebc:	strdeq	sl, [r1], -ip
   19ec0:	strdeq	sl, [r1], -ip
   19ec4:	strdeq	sl, [r1], -ip
   19ec8:	strdeq	sl, [r1], -ip
   19ecc:	strdeq	sl, [r1], -ip
   19ed0:	strdeq	sl, [r1], -ip
   19ed4:			; <UNDEFINED> instruction: 0x0001a4b0
   19ed8:	muleq	r1, r4, r1
   19edc:	andeq	sl, r1, ip, lsl #3
   19ee0:	andeq	sl, r1, r0, lsr #3
   19ee4:	ldrdeq	sl, [r1], -r0
   19ee8:	andeq	sl, r1, r4, lsl #3
   19eec:	muleq	r1, ip, r1
   19ef0:	strdeq	sl, [r1], -ip
   19ef4:	strdeq	sl, [r1], -ip
   19ef8:	strdeq	sl, [r1], -ip
   19efc:	strdeq	sl, [r1], -ip
   19f00:	strdeq	sl, [r1], -ip
   19f04:	strdeq	sl, [r1], -ip
   19f08:	strdeq	sl, [r1], -ip
   19f0c:	strdeq	sl, [r1], -ip
   19f10:	strdeq	sl, [r1], -ip
   19f14:	strdeq	sl, [r1], -ip
   19f18:	strdeq	sl, [r1], -ip
   19f1c:	strdeq	sl, [r1], -ip
   19f20:	strdeq	sl, [r1], -ip
   19f24:	strdeq	sl, [r1], -ip
   19f28:	strdeq	sl, [r1], -ip
   19f2c:	strdeq	sl, [r1], -ip
   19f30:	strdeq	sl, [r1], -ip
   19f34:	strdeq	sl, [r1], -ip
   19f38:	andeq	sl, r1, r8, lsr #2
   19f3c:	andeq	sl, r1, ip, lsr #2
   19f40:	andeq	sl, r1, ip, lsr #2
   19f44:	andeq	sl, r1, ip, lsl r1
   19f48:	andeq	sl, r1, ip, lsr #2
   19f4c:	strheq	sl, [r1], -r4
   19f50:	andeq	sl, r1, ip, lsr #2
   19f54:	ldrdeq	sl, [r1], -r8
   19f58:	andeq	sl, r1, ip, lsr #2
   19f5c:	andeq	sl, r1, ip, lsr #2
   19f60:	andeq	sl, r1, ip, lsr #2
   19f64:	strheq	sl, [r1], -r4
   19f68:	strheq	sl, [r1], -r4
   19f6c:	strheq	sl, [r1], -r4
   19f70:	strheq	sl, [r1], -r4
   19f74:	strheq	sl, [r1], -r4
   19f78:	strheq	sl, [r1], -r4
   19f7c:	strheq	sl, [r1], -r4
   19f80:	strheq	sl, [r1], -r4
   19f84:	strheq	sl, [r1], -r4
   19f88:	strheq	sl, [r1], -r4
   19f8c:	strheq	sl, [r1], -r4
   19f90:	strheq	sl, [r1], -r4
   19f94:	strheq	sl, [r1], -r4
   19f98:	strheq	sl, [r1], -r4
   19f9c:	strheq	sl, [r1], -r4
   19fa0:	strheq	sl, [r1], -r4
   19fa4:	andeq	sl, r1, ip, lsr #2
   19fa8:	andeq	sl, r1, ip, lsr #2
   19fac:	andeq	sl, r1, ip, lsr #2
   19fb0:	andeq	sl, r1, ip, lsr #2
   19fb4:	muleq	r1, ip, r2
   19fb8:	strdeq	sl, [r1], -ip
   19fbc:	strheq	sl, [r1], -r4
   19fc0:	strheq	sl, [r1], -r4
   19fc4:	strheq	sl, [r1], -r4
   19fc8:	strheq	sl, [r1], -r4
   19fcc:	strheq	sl, [r1], -r4
   19fd0:	strheq	sl, [r1], -r4
   19fd4:	strheq	sl, [r1], -r4
   19fd8:	strheq	sl, [r1], -r4
   19fdc:	strheq	sl, [r1], -r4
   19fe0:	strheq	sl, [r1], -r4
   19fe4:	strheq	sl, [r1], -r4
   19fe8:	strheq	sl, [r1], -r4
   19fec:	strheq	sl, [r1], -r4
   19ff0:	strheq	sl, [r1], -r4
   19ff4:	strheq	sl, [r1], -r4
   19ff8:	strheq	sl, [r1], -r4
   19ffc:	strheq	sl, [r1], -r4
   1a000:	strheq	sl, [r1], -r4
   1a004:	strheq	sl, [r1], -r4
   1a008:	strheq	sl, [r1], -r4
   1a00c:	strheq	sl, [r1], -r4
   1a010:	strheq	sl, [r1], -r4
   1a014:	strheq	sl, [r1], -r4
   1a018:	strheq	sl, [r1], -r4
   1a01c:	strheq	sl, [r1], -r4
   1a020:	strheq	sl, [r1], -r4
   1a024:	andeq	sl, r1, ip, lsr #2
   1a028:	andeq	sl, r1, r0, ror #2
   1a02c:	strheq	sl, [r1], -r4
   1a030:	andeq	sl, r1, ip, lsr #2
   1a034:	strheq	sl, [r1], -r4
   1a038:	andeq	sl, r1, ip, lsr #2
   1a03c:	strheq	sl, [r1], -r4
   1a040:	strheq	sl, [r1], -r4
   1a044:	strheq	sl, [r1], -r4
   1a048:	strheq	sl, [r1], -r4
   1a04c:	strheq	sl, [r1], -r4
   1a050:	strheq	sl, [r1], -r4
   1a054:	strheq	sl, [r1], -r4
   1a058:	strheq	sl, [r1], -r4
   1a05c:	strheq	sl, [r1], -r4
   1a060:	strheq	sl, [r1], -r4
   1a064:	strheq	sl, [r1], -r4
   1a068:	strheq	sl, [r1], -r4
   1a06c:	strheq	sl, [r1], -r4
   1a070:	strheq	sl, [r1], -r4
   1a074:	strheq	sl, [r1], -r4
   1a078:	strheq	sl, [r1], -r4
   1a07c:	strheq	sl, [r1], -r4
   1a080:	strheq	sl, [r1], -r4
   1a084:	strheq	sl, [r1], -r4
   1a088:	strheq	sl, [r1], -r4
   1a08c:	strheq	sl, [r1], -r4
   1a090:	strheq	sl, [r1], -r4
   1a094:	strheq	sl, [r1], -r4
   1a098:	strheq	sl, [r1], -r4
   1a09c:	strheq	sl, [r1], -r4
   1a0a0:	strheq	sl, [r1], -r4
   1a0a4:	strdeq	sl, [r1], -r4
   1a0a8:	andeq	sl, r1, ip, lsr #2
   1a0ac:	strdeq	sl, [r1], -r4
   1a0b0:	andeq	sl, r1, ip, lsl r1
   1a0b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a0b8:	tst	r0, #1
   1a0bc:	bne	1a374 <__assert_fail@plt+0x8948>
   1a0c0:	ldr	r1, [fp, #16]
   1a0c4:	ubfx	r0, r6, #5, #3
   1a0c8:	mov	r2, #1
   1a0cc:	ldr	r0, [r1, r0, lsl #2]
   1a0d0:	and	r1, r6, #31
   1a0d4:	tst	r0, r2, lsl r1
   1a0d8:	beq	1a374 <__assert_fail@plt+0x8948>
   1a0dc:	mov	r0, r6
   1a0e0:	mov	r1, r8
   1a0e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a0e8:	tst	r2, #1
   1a0ec:	beq	1a394 <__assert_fail@plt+0x8968>
   1a0f0:	b	1aaf0 <__assert_fail@plt+0x90c4>
   1a0f4:	cmp	r7, #1
   1a0f8:	beq	1a11c <__assert_fail@plt+0x86f0>
   1a0fc:	mov	r8, #0
   1a100:	cmn	r7, #1
   1a104:	bne	1a360 <__assert_fail@plt+0x8934>
   1a108:	ldrb	r0, [lr, #1]
   1a10c:	cmp	r0, #0
   1a110:	beq	1a11c <__assert_fail@plt+0x86f0>
   1a114:	mvn	r7, #0
   1a118:	b	1a360 <__assert_fail@plt+0x8934>
   1a11c:	mov	r8, #0
   1a120:	cmp	sl, #0
   1a124:	bne	1a360 <__assert_fail@plt+0x8934>
   1a128:	mov	r1, #1
   1a12c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a130:	cmp	r0, #2
   1a134:	bne	1a14c <__assert_fail@plt+0x8720>
   1a138:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a13c:	mov	r8, r1
   1a140:	tst	r0, #1
   1a144:	beq	1a0b4 <__assert_fail@plt+0x8688>
   1a148:	b	1aaf0 <__assert_fail@plt+0x90c4>
   1a14c:	mov	r8, r1
   1a150:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a154:	tst	r0, #1
   1a158:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a15c:	b	1a374 <__assert_fail@plt+0x8948>
   1a160:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a164:	cmp	r0, #2
   1a168:	bne	1a428 <__assert_fail@plt+0x89fc>
   1a16c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a170:	tst	r0, #1
   1a174:	bne	1aaf0 <__assert_fail@plt+0x90c4>
   1a178:	mov	r0, #0
   1a17c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a180:	b	1a440 <__assert_fail@plt+0x8a14>
   1a184:	mov	r0, #102	; 0x66
   1a188:	b	1a4b0 <__assert_fail@plt+0x8a84>
   1a18c:	mov	r2, #116	; 0x74
   1a190:	b	1a1a0 <__assert_fail@plt+0x8774>
   1a194:	mov	r0, #98	; 0x62
   1a198:	b	1a4b0 <__assert_fail@plt+0x8a84>
   1a19c:	mov	r2, #114	; 0x72
   1a1a0:	ldr	r0, [sp, #64]	; 0x40
   1a1a4:	tst	r0, #1
   1a1a8:	mov	r0, r2
   1a1ac:	bne	1a4b0 <__assert_fail@plt+0x8a84>
   1a1b0:	b	1aaf0 <__assert_fail@plt+0x90c4>
   1a1b4:	ldr	r0, [sp, #88]	; 0x58
   1a1b8:	tst	r0, #1
   1a1bc:	beq	1a4d0 <__assert_fail@plt+0x8aa4>
   1a1c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a1c4:	tst	r0, #1
   1a1c8:	bne	1ac2c <__assert_fail@plt+0x9200>
   1a1cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a1d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a1d4:	subs	r0, r0, #2
   1a1d8:	movwne	r0, #1
   1a1dc:	orr	r0, r0, r1
   1a1e0:	tst	r0, #1
   1a1e4:	bne	1a220 <__assert_fail@plt+0x87f4>
   1a1e8:	cmp	r9, r5
   1a1ec:	movcc	r0, #39	; 0x27
   1a1f0:	strbcc	r0, [ip, r9]
   1a1f4:	add	r0, r9, #1
   1a1f8:	cmp	r0, r5
   1a1fc:	movcc	r1, #36	; 0x24
   1a200:	strbcc	r1, [ip, r0]
   1a204:	add	r0, r9, #2
   1a208:	add	r9, r9, #3
   1a20c:	cmp	r0, r5
   1a210:	movcc	r1, #39	; 0x27
   1a214:	strbcc	r1, [ip, r0]
   1a218:	mov	r0, #1
   1a21c:	str	r0, [fp, #-52]	; 0xffffffcc
   1a220:	mov	r1, #1
   1a224:	cmp	r9, r5
   1a228:	mov	r8, #0
   1a22c:	mov	r6, #48	; 0x30
   1a230:	str	r1, [fp, #-56]	; 0xffffffc8
   1a234:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a238:	movcc	r0, #92	; 0x5c
   1a23c:	strbcc	r0, [ip, r9]
   1a240:	add	r0, r9, #1
   1a244:	cmp	r1, #2
   1a248:	beq	1a69c <__assert_fail@plt+0x8c70>
   1a24c:	add	r1, sl, #1
   1a250:	cmp	r1, r7
   1a254:	bcs	1a69c <__assert_fail@plt+0x8c70>
   1a258:	ldrb	r1, [lr, r1]
   1a25c:	sub	r1, r1, #48	; 0x30
   1a260:	uxtb	r1, r1
   1a264:	cmp	r1, #9
   1a268:	bhi	1a69c <__assert_fail@plt+0x8c70>
   1a26c:	cmp	r0, r5
   1a270:	movcc	r1, #48	; 0x30
   1a274:	strbcc	r1, [ip, r0]
   1a278:	add	r0, r9, #2
   1a27c:	add	r9, r9, #3
   1a280:	cmp	r0, r5
   1a284:	movcc	r1, #48	; 0x30
   1a288:	strbcc	r1, [ip, r0]
   1a28c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a290:	tst	r0, #1
   1a294:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a298:	b	1a374 <__assert_fail@plt+0x8948>
   1a29c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a2a0:	mov	r6, #63	; 0x3f
   1a2a4:	cmp	r0, #5
   1a2a8:	beq	1a6b0 <__assert_fail@plt+0x8c84>
   1a2ac:	mov	r1, #0
   1a2b0:	cmp	r0, #2
   1a2b4:	str	r1, [fp, #-56]	; 0xffffffc8
   1a2b8:	bne	1a778 <__assert_fail@plt+0x8d4c>
   1a2bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a2c0:	mov	r8, #0
   1a2c4:	tst	r0, #1
   1a2c8:	beq	1a0b4 <__assert_fail@plt+0x8688>
   1a2cc:	b	1aaf0 <__assert_fail@plt+0x90c4>
   1a2d0:	mov	r0, #118	; 0x76
   1a2d4:	b	1a4b0 <__assert_fail@plt+0x8a84>
   1a2d8:	mov	r0, #1
   1a2dc:	mov	r6, #39	; 0x27
   1a2e0:	str	r0, [sp, #60]	; 0x3c
   1a2e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a2e8:	cmp	r0, #2
   1a2ec:	bne	1a4f0 <__assert_fail@plt+0x8ac4>
   1a2f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a2f4:	tst	r0, #1
   1a2f8:	bne	1aaf0 <__assert_fail@plt+0x90c4>
   1a2fc:	ldr	r2, [sp, #56]	; 0x38
   1a300:	clz	r1, r5
   1a304:	mov	r8, #1
   1a308:	lsr	r1, r1, #5
   1a30c:	cmp	r2, #0
   1a310:	mov	r0, r2
   1a314:	movwne	r0, #1
   1a318:	orrs	r0, r0, r1
   1a31c:	moveq	r2, r5
   1a320:	moveq	r5, r0
   1a324:	cmp	r9, r5
   1a328:	str	r2, [sp, #56]	; 0x38
   1a32c:	movcc	r0, #39	; 0x27
   1a330:	strbcc	r0, [ip, r9]
   1a334:	add	r0, r9, #1
   1a338:	cmp	r0, r5
   1a33c:	movcc	r1, #92	; 0x5c
   1a340:	strbcc	r1, [ip, r0]
   1a344:	add	r0, r9, #2
   1a348:	add	r9, r9, #3
   1a34c:	cmp	r0, r5
   1a350:	movcc	r1, #39	; 0x27
   1a354:	strbcc	r1, [ip, r0]
   1a358:	mov	r0, #0
   1a35c:	str	r0, [fp, #-52]	; 0xffffffcc
   1a360:	mov	r0, #0
   1a364:	str	r0, [fp, #-56]	; 0xffffffc8
   1a368:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a36c:	tst	r0, #1
   1a370:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a374:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a378:	mov	r1, r8
   1a37c:	cmp	r0, #0
   1a380:	mov	r0, r6
   1a384:	beq	1a448 <__assert_fail@plt+0x8a1c>
   1a388:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a38c:	tst	r2, #1
   1a390:	bne	1aaf0 <__assert_fail@plt+0x90c4>
   1a394:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1a398:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a39c:	subs	r2, r2, #2
   1a3a0:	movwne	r2, #1
   1a3a4:	orr	r2, r2, r3
   1a3a8:	tst	r2, #1
   1a3ac:	bne	1a3e8 <__assert_fail@plt+0x89bc>
   1a3b0:	cmp	r9, r5
   1a3b4:	movcc	r2, #39	; 0x27
   1a3b8:	strbcc	r2, [ip, r9]
   1a3bc:	add	r2, r9, #1
   1a3c0:	cmp	r2, r5
   1a3c4:	movcc	r3, #36	; 0x24
   1a3c8:	strbcc	r3, [ip, r2]
   1a3cc:	add	r2, r9, #2
   1a3d0:	add	r9, r9, #3
   1a3d4:	cmp	r2, r5
   1a3d8:	movcc	r3, #39	; 0x27
   1a3dc:	strbcc	r3, [ip, r2]
   1a3e0:	mov	r2, #1
   1a3e4:	str	r2, [fp, #-52]	; 0xffffffcc
   1a3e8:	cmp	r9, r5
   1a3ec:	movcc	r2, #92	; 0x5c
   1a3f0:	strbcc	r2, [ip, r9]
   1a3f4:	add	r9, r9, #1
   1a3f8:	b	1a490 <__assert_fail@plt+0x8a64>
   1a3fc:	ldr	r0, [sp, #40]	; 0x28
   1a400:	cmp	r0, #1
   1a404:	bne	1a504 <__assert_fail@plt+0x8ad8>
   1a408:	bl	11858 <__ctype_b_loc@plt>
   1a40c:	ldr	r0, [r0]
   1a410:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a414:	mov	r1, #1
   1a418:	add	r0, r0, r6, lsl #1
   1a41c:	ldrb	r0, [r0, #1]
   1a420:	ubfx	r8, r0, #6, #1
   1a424:	b	1a85c <__assert_fail@plt+0x8e30>
   1a428:	ldr	r1, [sp, #48]	; 0x30
   1a42c:	mov	r0, #0
   1a430:	str	r0, [fp, #-56]	; 0xffffffc8
   1a434:	mov	r0, #92	; 0x5c
   1a438:	cmp	r1, #0
   1a43c:	beq	1a4b0 <__assert_fail@plt+0x8a84>
   1a440:	mov	r6, #92	; 0x5c
   1a444:	mov	r8, #0
   1a448:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a44c:	cmp	r0, #0
   1a450:	bne	1a488 <__assert_fail@plt+0x8a5c>
   1a454:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a458:	tst	r0, #1
   1a45c:	beq	1a488 <__assert_fail@plt+0x8a5c>
   1a460:	cmp	r9, r5
   1a464:	movcc	r0, #39	; 0x27
   1a468:	strbcc	r0, [ip, r9]
   1a46c:	add	r0, r9, #1
   1a470:	add	r9, r9, #2
   1a474:	cmp	r0, r5
   1a478:	movcc	r1, #39	; 0x27
   1a47c:	strbcc	r1, [ip, r0]
   1a480:	mov	r0, #0
   1a484:	str	r0, [fp, #-52]	; 0xffffffcc
   1a488:	mov	r1, r8
   1a48c:	mov	r0, r6
   1a490:	cmp	r9, r5
   1a494:	and	r4, r4, r1
   1a498:	strbcc	r0, [ip, r9]
   1a49c:	add	r9, r9, #1
   1a4a0:	add	sl, sl, #1
   1a4a4:	cmn	r7, #1
   1a4a8:	bne	19da0 <__assert_fail@plt+0x8374>
   1a4ac:	b	19dac <__assert_fail@plt+0x8380>
   1a4b0:	mov	r1, #0
   1a4b4:	mov	r8, #0
   1a4b8:	str	r1, [fp, #-56]	; 0xffffffc8
   1a4bc:	ldr	r1, [sp, #88]	; 0x58
   1a4c0:	tst	r1, #1
   1a4c4:	mov	r1, #0
   1a4c8:	beq	1a0b4 <__assert_fail@plt+0x8688>
   1a4cc:	b	1a388 <__assert_fail@plt+0x895c>
   1a4d0:	ldr	r0, [sp, #36]	; 0x24
   1a4d4:	mov	r6, #0
   1a4d8:	mov	r8, #0
   1a4dc:	cmp	r0, #0
   1a4e0:	mov	r0, #0
   1a4e4:	str	r0, [fp, #-56]	; 0xffffffc8
   1a4e8:	bne	1a4a0 <__assert_fail@plt+0x8a74>
   1a4ec:	b	1a0b4 <__assert_fail@plt+0x8688>
   1a4f0:	mov	r8, #1
   1a4f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a4f8:	tst	r0, #1
   1a4fc:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a500:	b	1a374 <__assert_fail@plt+0x8948>
   1a504:	mov	r0, #0
   1a508:	cmn	r7, #1
   1a50c:	str	r0, [fp, #-36]	; 0xffffffdc
   1a510:	str	r0, [fp, #-40]	; 0xffffffd8
   1a514:	bne	1a528 <__assert_fail@plt+0x8afc>
   1a518:	mov	r0, lr
   1a51c:	bl	11888 <strlen@plt>
   1a520:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a524:	mov	r7, r0
   1a528:	ldr	r0, [sp, #44]	; 0x2c
   1a52c:	str	r4, [sp, #84]	; 0x54
   1a530:	str	r5, [sp, #28]
   1a534:	cmp	r0, #0
   1a538:	beq	1a78c <__assert_fail@plt+0x8d60>
   1a53c:	ldr	r0, [sp, #80]	; 0x50
   1a540:	mov	r8, #1
   1a544:	mov	r5, #0
   1a548:	add	r0, r0, sl
   1a54c:	str	r0, [sp, #24]
   1a550:	sub	r0, fp, #40	; 0x28
   1a554:	mov	r3, r0
   1a558:	b	1a594 <__assert_fail@plt+0x8b68>
   1a55c:	ldr	r5, [sp, #68]	; 0x44
   1a560:	add	r5, r0, r5
   1a564:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a568:	bl	11798 <iswprint@plt>
   1a56c:	cmp	r0, #0
   1a570:	sub	r4, fp, #40	; 0x28
   1a574:	movwne	r0, #1
   1a578:	and	r8, r8, r0
   1a57c:	mov	r0, r4
   1a580:	bl	116f0 <mbsinit@plt>
   1a584:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a588:	mov	r3, r4
   1a58c:	cmp	r0, #0
   1a590:	bne	1a850 <__assert_fail@plt+0x8e24>
   1a594:	str	r5, [sp, #68]	; 0x44
   1a598:	add	r5, r5, sl
   1a59c:	sub	r0, fp, #44	; 0x2c
   1a5a0:	add	r1, lr, r5
   1a5a4:	sub	r2, r7, r5
   1a5a8:	bl	1cf24 <__assert_fail@plt+0xb4f8>
   1a5ac:	cmn	r0, #2
   1a5b0:	beq	1a810 <__assert_fail@plt+0x8de4>
   1a5b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a5b8:	cmn	r0, #1
   1a5bc:	beq	1a804 <__assert_fail@plt+0x8dd8>
   1a5c0:	cmp	r0, #0
   1a5c4:	beq	1a808 <__assert_fail@plt+0x8ddc>
   1a5c8:	cmp	r0, #2
   1a5cc:	bcc	1a55c <__assert_fail@plt+0x8b30>
   1a5d0:	ldr	r1, [sp, #68]	; 0x44
   1a5d4:	ldr	r2, [sp, #24]
   1a5d8:	add	r1, r2, r1
   1a5dc:	sub	r2, r0, #1
   1a5e0:	ldrb	r3, [r1]
   1a5e4:	sub	r3, r3, #91	; 0x5b
   1a5e8:	cmp	r3, #33	; 0x21
   1a5ec:	bls	1a60c <__assert_fail@plt+0x8be0>
   1a5f0:	add	r1, r1, #1
   1a5f4:	subs	r2, r2, #1
   1a5f8:	beq	1a55c <__assert_fail@plt+0x8b30>
   1a5fc:	ldrb	r3, [r1]
   1a600:	sub	r3, r3, #91	; 0x5b
   1a604:	cmp	r3, #33	; 0x21
   1a608:	bhi	1a5f0 <__assert_fail@plt+0x8bc4>
   1a60c:	add	r5, pc, #0
   1a610:	ldr	pc, [r5, r3, lsl #2]
   1a614:	andeq	sl, r1, r8, lsr #22
   1a618:	andeq	sl, r1, r8, lsr #22
   1a61c:	strdeq	sl, [r1], -r0
   1a620:	andeq	sl, r1, r8, lsr #22
   1a624:	strdeq	sl, [r1], -r0
   1a628:	andeq	sl, r1, r8, lsr #22
   1a62c:	strdeq	sl, [r1], -r0
   1a630:	strdeq	sl, [r1], -r0
   1a634:	strdeq	sl, [r1], -r0
   1a638:	strdeq	sl, [r1], -r0
   1a63c:	strdeq	sl, [r1], -r0
   1a640:	strdeq	sl, [r1], -r0
   1a644:	strdeq	sl, [r1], -r0
   1a648:	strdeq	sl, [r1], -r0
   1a64c:	strdeq	sl, [r1], -r0
   1a650:	strdeq	sl, [r1], -r0
   1a654:	strdeq	sl, [r1], -r0
   1a658:	strdeq	sl, [r1], -r0
   1a65c:	strdeq	sl, [r1], -r0
   1a660:	strdeq	sl, [r1], -r0
   1a664:	strdeq	sl, [r1], -r0
   1a668:	strdeq	sl, [r1], -r0
   1a66c:	strdeq	sl, [r1], -r0
   1a670:	strdeq	sl, [r1], -r0
   1a674:	strdeq	sl, [r1], -r0
   1a678:	strdeq	sl, [r1], -r0
   1a67c:	strdeq	sl, [r1], -r0
   1a680:	strdeq	sl, [r1], -r0
   1a684:	strdeq	sl, [r1], -r0
   1a688:	strdeq	sl, [r1], -r0
   1a68c:	strdeq	sl, [r1], -r0
   1a690:	strdeq	sl, [r1], -r0
   1a694:	strdeq	sl, [r1], -r0
   1a698:	andeq	sl, r1, r8, lsr #22
   1a69c:	mov	r9, r0
   1a6a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a6a4:	tst	r0, #1
   1a6a8:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a6ac:	b	1a374 <__assert_fail@plt+0x8948>
   1a6b0:	mov	r0, #0
   1a6b4:	str	r0, [fp, #-56]	; 0xffffffc8
   1a6b8:	ldr	r0, [sp, #32]
   1a6bc:	cmp	r0, #0
   1a6c0:	beq	1a778 <__assert_fail@plt+0x8d4c>
   1a6c4:	add	r0, sl, #2
   1a6c8:	mov	r1, r7
   1a6cc:	cmp	r0, r7
   1a6d0:	bcs	1a778 <__assert_fail@plt+0x8d4c>
   1a6d4:	add	r1, sl, lr
   1a6d8:	ldrb	r1, [r1, #1]
   1a6dc:	cmp	r1, #63	; 0x3f
   1a6e0:	bne	1a778 <__assert_fail@plt+0x8d4c>
   1a6e4:	ldrb	r8, [lr, r0]
   1a6e8:	sub	r2, r8, #33	; 0x21
   1a6ec:	cmp	r2, #29
   1a6f0:	bhi	1a778 <__assert_fail@plt+0x8d4c>
   1a6f4:	mov	r1, r4
   1a6f8:	movw	r4, #20929	; 0x51c1
   1a6fc:	mov	r3, #1
   1a700:	movt	r4, #14336	; 0x3800
   1a704:	tst	r4, r3, lsl r2
   1a708:	beq	1aa34 <__assert_fail@plt+0x9008>
   1a70c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a710:	tst	r2, #1
   1a714:	bne	1aaf0 <__assert_fail@plt+0x90c4>
   1a718:	cmp	r9, r5
   1a71c:	mov	r6, r8
   1a720:	mov	r4, r1
   1a724:	mov	sl, r0
   1a728:	mov	r8, #0
   1a72c:	movcc	r2, #63	; 0x3f
   1a730:	strbcc	r2, [ip, r9]
   1a734:	add	r2, r9, #1
   1a738:	cmp	r2, r5
   1a73c:	movcc	r3, #34	; 0x22
   1a740:	strbcc	r3, [ip, r2]
   1a744:	add	r2, r9, #2
   1a748:	cmp	r2, r5
   1a74c:	movcc	r3, #34	; 0x22
   1a750:	strbcc	r3, [ip, r2]
   1a754:	add	r2, r9, #3
   1a758:	add	r9, r9, #4
   1a75c:	cmp	r2, r5
   1a760:	movcc	r3, #63	; 0x3f
   1a764:	strbcc	r3, [ip, r2]
   1a768:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a76c:	tst	r0, #1
   1a770:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a774:	b	1a374 <__assert_fail@plt+0x8948>
   1a778:	mov	r8, #0
   1a77c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a780:	tst	r0, #1
   1a784:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1a788:	b	1a374 <__assert_fail@plt+0x8948>
   1a78c:	mov	r8, #1
   1a790:	mov	r5, #0
   1a794:	sub	r4, fp, #40	; 0x28
   1a798:	str	r5, [sp, #68]	; 0x44
   1a79c:	add	r5, r5, sl
   1a7a0:	sub	r0, fp, #44	; 0x2c
   1a7a4:	mov	r3, r4
   1a7a8:	add	r1, lr, r5
   1a7ac:	sub	r2, r7, r5
   1a7b0:	bl	1cf24 <__assert_fail@plt+0xb4f8>
   1a7b4:	cmn	r0, #2
   1a7b8:	beq	1a810 <__assert_fail@plt+0x8de4>
   1a7bc:	cmn	r0, #1
   1a7c0:	beq	1a804 <__assert_fail@plt+0x8dd8>
   1a7c4:	ldr	r5, [sp, #68]	; 0x44
   1a7c8:	cmp	r0, #0
   1a7cc:	beq	1a84c <__assert_fail@plt+0x8e20>
   1a7d0:	add	r5, r0, r5
   1a7d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a7d8:	bl	11798 <iswprint@plt>
   1a7dc:	cmp	r0, #0
   1a7e0:	sub	r4, fp, #40	; 0x28
   1a7e4:	movwne	r0, #1
   1a7e8:	and	r8, r8, r0
   1a7ec:	mov	r0, r4
   1a7f0:	bl	116f0 <mbsinit@plt>
   1a7f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a7f8:	cmp	r0, #0
   1a7fc:	beq	1a798 <__assert_fail@plt+0x8d6c>
   1a800:	b	1a850 <__assert_fail@plt+0x8e24>
   1a804:	mov	r8, #0
   1a808:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a80c:	b	1a844 <__assert_fail@plt+0x8e18>
   1a810:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a814:	mov	r8, #0
   1a818:	cmp	r5, r7
   1a81c:	bcs	1a844 <__assert_fail@plt+0x8e18>
   1a820:	ldrb	r0, [lr, r5]
   1a824:	cmp	r0, #0
   1a828:	beq	1a844 <__assert_fail@plt+0x8e18>
   1a82c:	ldr	r0, [sp, #68]	; 0x44
   1a830:	add	r0, r0, #1
   1a834:	add	r5, r0, sl
   1a838:	str	r0, [sp, #68]	; 0x44
   1a83c:	cmp	r5, r7
   1a840:	bcc	1a820 <__assert_fail@plt+0x8df4>
   1a844:	ldr	r5, [sp, #68]	; 0x44
   1a848:	b	1a850 <__assert_fail@plt+0x8e24>
   1a84c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a850:	mov	r1, r5
   1a854:	ldr	r5, [sp, #28]
   1a858:	ldr	r4, [sp, #84]	; 0x54
   1a85c:	ldr	r0, [sp, #52]	; 0x34
   1a860:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a864:	cmp	r1, #1
   1a868:	orr	r2, r8, r0
   1a86c:	mov	r0, r1
   1a870:	bhi	1a87c <__assert_fail@plt+0x8e50>
   1a874:	tst	r2, #1
   1a878:	bne	1a0b4 <__assert_fail@plt+0x8688>
   1a87c:	add	r0, r0, sl
   1a880:	str	r2, [sp, #84]	; 0x54
   1a884:	str	r0, [fp, #-56]	; 0xffffffc8
   1a888:	mov	r0, #0
   1a88c:	tst	r2, #1
   1a890:	bne	1a970 <__assert_fail@plt+0x8f44>
   1a894:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1a898:	tst	r1, #1
   1a89c:	bne	1aaf0 <__assert_fail@plt+0x90c4>
   1a8a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a8a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a8a8:	subs	r2, r1, #2
   1a8ac:	movwne	r2, #1
   1a8b0:	orr	r2, r2, r0
   1a8b4:	tst	r2, #1
   1a8b8:	bne	1a8f4 <__assert_fail@plt+0x8ec8>
   1a8bc:	cmp	r9, r5
   1a8c0:	add	r2, r9, #1
   1a8c4:	mov	r0, #1
   1a8c8:	movcc	r1, #39	; 0x27
   1a8cc:	str	r0, [fp, #-52]	; 0xffffffcc
   1a8d0:	strbcc	r1, [ip, r9]
   1a8d4:	cmp	r2, r5
   1a8d8:	movcc	r1, #36	; 0x24
   1a8dc:	strbcc	r1, [ip, r2]
   1a8e0:	add	r2, r9, #2
   1a8e4:	add	r9, r9, #3
   1a8e8:	cmp	r2, r5
   1a8ec:	movcc	r1, #39	; 0x27
   1a8f0:	strbcc	r1, [ip, r2]
   1a8f4:	cmp	r9, r5
   1a8f8:	add	r2, r9, #1
   1a8fc:	movcc	r1, #92	; 0x5c
   1a900:	strbcc	r1, [ip, r9]
   1a904:	cmp	r2, r5
   1a908:	bcs	1a91c <__assert_fail@plt+0x8ef0>
   1a90c:	uxtb	r3, r6
   1a910:	mov	r1, #48	; 0x30
   1a914:	orr	r3, r1, r3, lsr #6
   1a918:	strb	r3, [ip, r2]
   1a91c:	add	r2, r9, #2
   1a920:	add	r9, r9, #3
   1a924:	cmp	r2, r5
   1a928:	lsrcc	r3, r6, #3
   1a92c:	movcc	r1, #6
   1a930:	bficc	r3, r1, #3, #29
   1a934:	mov	r1, #6
   1a938:	bfi	r6, r1, #3, #29
   1a93c:	strbcc	r3, [ip, r2]
   1a940:	mov	r2, #1
   1a944:	b	1a9a4 <__assert_fail@plt+0x8f78>
   1a948:	ldr	r1, [sp, #80]	; 0x50
   1a94c:	cmp	r9, r2
   1a950:	mov	r5, r2
   1a954:	ldr	r2, [sp, #84]	; 0x54
   1a958:	strbcc	r6, [ip, r9]
   1a95c:	add	r9, r9, #1
   1a960:	ldrb	r6, [r1, sl]
   1a964:	mov	sl, r3
   1a968:	tst	r2, #1
   1a96c:	beq	1a894 <__assert_fail@plt+0x8e68>
   1a970:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1a974:	tst	r1, #1
   1a978:	beq	1a998 <__assert_fail@plt+0x8f6c>
   1a97c:	cmp	r9, r5
   1a980:	mov	r2, r0
   1a984:	movcc	r1, #92	; 0x5c
   1a988:	strbcc	r1, [ip, r9]
   1a98c:	add	r9, r9, #1
   1a990:	mov	r1, #0
   1a994:	b	1a9a0 <__assert_fail@plt+0x8f74>
   1a998:	mov	r1, #0
   1a99c:	mov	r2, r0
   1a9a0:	str	r1, [fp, #-48]	; 0xffffffd0
   1a9a4:	mov	r0, r2
   1a9a8:	and	r1, r2, #1
   1a9ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a9b0:	add	r3, sl, #1
   1a9b4:	cmp	r2, r3
   1a9b8:	bls	1aa18 <__assert_fail@plt+0x8fec>
   1a9bc:	mov	r2, r5
   1a9c0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1a9c4:	cmp	r1, #0
   1a9c8:	movwne	r1, #1
   1a9cc:	mvn	r5, r5
   1a9d0:	orr	r5, r5, r1
   1a9d4:	tst	r5, #1
   1a9d8:	bne	1a948 <__assert_fail@plt+0x8f1c>
   1a9dc:	cmp	r9, r2
   1a9e0:	movcc	r5, r4
   1a9e4:	movcc	r4, #39	; 0x27
   1a9e8:	strbcc	r4, [ip, r9]
   1a9ec:	movcc	r4, r5
   1a9f0:	add	r5, r9, #1
   1a9f4:	add	r9, r9, #2
   1a9f8:	cmp	r5, r2
   1a9fc:	movcc	r1, r4
   1aa00:	movcc	r4, #39	; 0x27
   1aa04:	strbcc	r4, [ip, r5]
   1aa08:	movcc	r4, r1
   1aa0c:	mov	r1, #0
   1aa10:	str	r1, [fp, #-52]	; 0xffffffcc
   1aa14:	b	1a948 <__assert_fail@plt+0x8f1c>
   1aa18:	cmp	r1, #0
   1aa1c:	movwne	r1, #1
   1aa20:	str	r1, [fp, #-56]	; 0xffffffc8
   1aa24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1aa28:	cmp	r0, #0
   1aa2c:	beq	1a454 <__assert_fail@plt+0x8a28>
   1aa30:	b	1a488 <__assert_fail@plt+0x8a5c>
   1aa34:	mov	r8, #0
   1aa38:	mov	r4, r1
   1aa3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1aa40:	tst	r0, #1
   1aa44:	beq	1a0c0 <__assert_fail@plt+0x8694>
   1aa48:	b	1a374 <__assert_fail@plt+0x8948>
   1aa4c:	mov	r7, sl
   1aa50:	b	1aa58 <__assert_fail@plt+0x902c>
   1aa54:	mvn	r7, #0
   1aa58:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1aa5c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1aa60:	ldr	r2, [sp, #88]	; 0x58
   1aa64:	eor	r0, r1, #2
   1aa68:	orr	r0, r0, r9
   1aa6c:	clz	r0, r0
   1aa70:	lsr	r0, r0, #5
   1aa74:	tst	r3, r0
   1aa78:	bne	1aaf0 <__assert_fail@plt+0x90c4>
   1aa7c:	subs	r0, r1, #2
   1aa80:	movwne	r0, #1
   1aa84:	orr	r0, r3, r0
   1aa88:	tst	r0, #1
   1aa8c:	ldreq	r0, [sp, #60]	; 0x3c
   1aa90:	eoreq	r0, r0, #1
   1aa94:	tsteq	r0, #1
   1aa98:	bne	1abcc <__assert_fail@plt+0x91a0>
   1aa9c:	tst	r4, #1
   1aaa0:	bne	1ab90 <__assert_fail@plt+0x9164>
   1aaa4:	ldr	r6, [sp, #56]	; 0x38
   1aaa8:	mov	r8, #0
   1aaac:	cmp	r6, #0
   1aab0:	beq	1abc8 <__assert_fail@plt+0x919c>
   1aab4:	mov	r1, #0
   1aab8:	mov	r4, #2
   1aabc:	cmp	r5, #0
   1aac0:	mov	r0, r2
   1aac4:	mov	r3, #0
   1aac8:	str	r1, [sp, #84]	; 0x54
   1aacc:	beq	19914 <__assert_fail@plt+0x7ee8>
   1aad0:	b	1abcc <__assert_fail@plt+0x91a0>
   1aad4:	movw	r0, #8212	; 0x2014
   1aad8:	movt	r0, #2
   1aadc:	str	r0, [sp, #76]	; 0x4c
   1aae0:	mov	r9, #0
   1aae4:	tst	r8, #1
   1aae8:	beq	19bac <__assert_fail@plt+0x8180>
   1aaec:	b	19cec <__assert_fail@plt+0x82c0>
   1aaf0:	ldr	r1, [sp, #88]	; 0x58
   1aaf4:	mov	r0, #2
   1aaf8:	tst	r1, #1
   1aafc:	movwne	r0, #4
   1ab00:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ab04:	ldr	r1, [fp, #12]
   1ab08:	cmp	r2, #2
   1ab0c:	moveq	r2, r0
   1ab10:	b	1ab48 <__assert_fail@plt+0x911c>
   1ab14:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ab18:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1ab1c:	ldr	r1, [fp, #12]
   1ab20:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ab24:	b	1ab48 <__assert_fail@plt+0x911c>
   1ab28:	ldr	r1, [sp, #88]	; 0x58
   1ab2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1ab30:	ldr	r5, [sp, #28]
   1ab34:	mov	r0, #2
   1ab38:	tst	r1, #1
   1ab3c:	ldr	r1, [fp, #12]
   1ab40:	movwne	r0, #4
   1ab44:	mov	r2, r0
   1ab48:	mov	r0, #0
   1ab4c:	bic	r1, r1, #2
   1ab50:	str	r2, [sp]
   1ab54:	mov	r2, lr
   1ab58:	str	r0, [sp, #8]
   1ab5c:	ldr	r0, [sp, #72]	; 0x48
   1ab60:	str	r1, [sp, #4]
   1ab64:	mov	r1, r5
   1ab68:	str	r0, [sp, #12]
   1ab6c:	ldr	r0, [sp, #76]	; 0x4c
   1ab70:	str	r0, [sp, #16]
   1ab74:	mov	r0, ip
   1ab78:	mov	r3, r7
   1ab7c:	bl	19888 <__assert_fail@plt+0x7e5c>
   1ab80:	mov	r9, r0
   1ab84:	mov	r0, r9
   1ab88:	sub	sp, fp, #28
   1ab8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab90:	mov	r0, #5
   1ab94:	ldr	r1, [sp, #56]	; 0x38
   1ab98:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1ab9c:	str	r0, [sp]
   1aba0:	ldr	r0, [fp, #12]
   1aba4:	str	r0, [sp, #4]
   1aba8:	ldr	r0, [fp, #16]
   1abac:	str	r0, [sp, #8]
   1abb0:	ldr	r0, [sp, #72]	; 0x48
   1abb4:	str	r0, [sp, #12]
   1abb8:	ldr	r0, [sp, #76]	; 0x4c
   1abbc:	str	r0, [sp, #16]
   1abc0:	ldr	r0, [fp, #-84]	; 0xffffffac
   1abc4:	b	1ab78 <__assert_fail@plt+0x914c>
   1abc8:	mov	r3, #0
   1abcc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1abd0:	cmp	r1, #0
   1abd4:	beq	1ac10 <__assert_fail@plt+0x91e4>
   1abd8:	ldr	r2, [fp, #-84]	; 0xffffffac
   1abdc:	tst	r3, #1
   1abe0:	bne	1ac14 <__assert_fail@plt+0x91e8>
   1abe4:	ldrb	r0, [r1]
   1abe8:	cmp	r0, #0
   1abec:	beq	1ac14 <__assert_fail@plt+0x91e8>
   1abf0:	add	r1, r1, #1
   1abf4:	cmp	r9, r5
   1abf8:	strbcc	r0, [r2, r9]
   1abfc:	add	r9, r9, #1
   1ac00:	ldrb	r0, [r1], #1
   1ac04:	cmp	r0, #0
   1ac08:	bne	1abf4 <__assert_fail@plt+0x91c8>
   1ac0c:	b	1ac14 <__assert_fail@plt+0x91e8>
   1ac10:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ac14:	cmp	r9, r5
   1ac18:	movcc	r0, #0
   1ac1c:	strbcc	r0, [r2, r9]
   1ac20:	mov	r0, r9
   1ac24:	sub	sp, fp, #28
   1ac28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac2c:	mov	r0, #4
   1ac30:	b	1ab00 <__assert_fail@plt+0x90d4>
   1ac34:	bl	11a20 <abort@plt>
   1ac38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac3c:	add	fp, sp, #28
   1ac40:	sub	sp, sp, #28
   1ac44:	movw	r5, #12808	; 0x3208
   1ac48:	cmp	r2, #0
   1ac4c:	mov	r4, r1
   1ac50:	mov	r7, r0
   1ac54:	str	r0, [sp, #20]
   1ac58:	movt	r5, #3
   1ac5c:	movne	r5, r2
   1ac60:	bl	118b8 <__errno_location@plt>
   1ac64:	mov	sl, r0
   1ac68:	ldr	r2, [r5, #40]	; 0x28
   1ac6c:	ldr	r3, [r5, #44]	; 0x2c
   1ac70:	ldm	r5, {r0, r1}
   1ac74:	orr	r8, r1, #1
   1ac78:	add	r9, r5, #8
   1ac7c:	mov	r1, #0
   1ac80:	ldr	r6, [sl]
   1ac84:	stm	sp, {r0, r8, r9}
   1ac88:	mov	r0, #0
   1ac8c:	str	r2, [sp, #12]
   1ac90:	str	r3, [sp, #16]
   1ac94:	mov	r2, r7
   1ac98:	mov	r3, r4
   1ac9c:	str	r6, [sp, #24]
   1aca0:	mov	r6, r4
   1aca4:	bl	19888 <__assert_fail@plt+0x7e5c>
   1aca8:	add	r7, r0, #1
   1acac:	mov	r0, r7
   1acb0:	bl	1c33c <__assert_fail@plt+0xa910>
   1acb4:	mov	r4, r0
   1acb8:	ldr	r0, [r5]
   1acbc:	ldr	r2, [r5, #44]	; 0x2c
   1acc0:	ldr	r1, [r5, #40]	; 0x28
   1acc4:	mov	r3, r6
   1acc8:	stm	sp, {r0, r8, r9}
   1accc:	str	r2, [sp, #16]
   1acd0:	ldr	r2, [sp, #20]
   1acd4:	str	r1, [sp, #12]
   1acd8:	mov	r0, r4
   1acdc:	mov	r1, r7
   1ace0:	bl	19888 <__assert_fail@plt+0x7e5c>
   1ace4:	ldr	r0, [sp, #24]
   1ace8:	str	r0, [sl]
   1acec:	mov	r0, r4
   1acf0:	sub	sp, fp, #28
   1acf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acfc:	add	fp, sp, #28
   1ad00:	sub	sp, sp, #36	; 0x24
   1ad04:	movw	r8, #12808	; 0x3208
   1ad08:	cmp	r3, #0
   1ad0c:	mov	r4, r2
   1ad10:	str	r2, [sp, #24]
   1ad14:	mov	r5, r1
   1ad18:	mov	r6, r0
   1ad1c:	str	r0, [sp, #20]
   1ad20:	movt	r8, #3
   1ad24:	movne	r8, r3
   1ad28:	bl	118b8 <__errno_location@plt>
   1ad2c:	str	r0, [sp, #28]
   1ad30:	ldr	r1, [r8, #40]	; 0x28
   1ad34:	ldr	r2, [r8, #44]	; 0x2c
   1ad38:	ldr	r7, [r0]
   1ad3c:	cmp	r4, #0
   1ad40:	add	sl, r8, #8
   1ad44:	mov	r0, #0
   1ad48:	ldm	r8, {r3, r9}
   1ad4c:	orreq	r9, r9, #1
   1ad50:	stm	sp, {r3, r9, sl}
   1ad54:	str	r1, [sp, #12]
   1ad58:	str	r2, [sp, #16]
   1ad5c:	mov	r1, #0
   1ad60:	mov	r2, r6
   1ad64:	mov	r3, r5
   1ad68:	str	r7, [sp, #32]
   1ad6c:	mov	r7, r5
   1ad70:	bl	19888 <__assert_fail@plt+0x7e5c>
   1ad74:	add	r4, r0, #1
   1ad78:	mov	r5, r0
   1ad7c:	mov	r0, r4
   1ad80:	bl	1c33c <__assert_fail@plt+0xa910>
   1ad84:	mov	r6, r0
   1ad88:	ldr	r0, [r8]
   1ad8c:	ldr	r2, [r8, #44]	; 0x2c
   1ad90:	ldr	r1, [r8, #40]	; 0x28
   1ad94:	mov	r3, r7
   1ad98:	stm	sp, {r0, r9, sl}
   1ad9c:	str	r2, [sp, #16]
   1ada0:	ldr	r2, [sp, #20]
   1ada4:	str	r1, [sp, #12]
   1ada8:	mov	r0, r6
   1adac:	mov	r1, r4
   1adb0:	bl	19888 <__assert_fail@plt+0x7e5c>
   1adb4:	ldr	r0, [sp, #24]
   1adb8:	ldr	r1, [sp, #32]
   1adbc:	ldr	r2, [sp, #28]
   1adc0:	cmp	r0, #0
   1adc4:	str	r1, [r2]
   1adc8:	strne	r5, [r0]
   1adcc:	mov	r0, r6
   1add0:	sub	sp, fp, #28
   1add4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1add8:	push	{r4, r5, r6, r7, fp, lr}
   1addc:	add	fp, sp, #16
   1ade0:	movw	r4, #12728	; 0x31b8
   1ade4:	movt	r4, #3
   1ade8:	ldrd	r6, [r4]
   1adec:	cmp	r7, #2
   1adf0:	blt	1ae1c <__assert_fail@plt+0x93f0>
   1adf4:	add	r5, r6, #12
   1adf8:	mov	r7, #0
   1adfc:	ldr	r0, [r5, r7, lsl #3]
   1ae00:	bl	18f5c <__assert_fail@plt+0x7530>
   1ae04:	ldr	r1, [r4, #4]
   1ae08:	add	r2, r7, #2
   1ae0c:	add	r0, r7, #1
   1ae10:	mov	r7, r0
   1ae14:	cmp	r2, r1
   1ae18:	blt	1adfc <__assert_fail@plt+0x93d0>
   1ae1c:	ldr	r0, [r6, #4]
   1ae20:	movw	r5, #12856	; 0x3238
   1ae24:	movt	r5, #3
   1ae28:	cmp	r0, r5
   1ae2c:	beq	1ae40 <__assert_fail@plt+0x9414>
   1ae30:	bl	18f5c <__assert_fail@plt+0x7530>
   1ae34:	mov	r0, #256	; 0x100
   1ae38:	str	r0, [r4, #8]
   1ae3c:	str	r5, [r4, #12]
   1ae40:	add	r5, r4, #8
   1ae44:	cmp	r6, r5
   1ae48:	beq	1ae58 <__assert_fail@plt+0x942c>
   1ae4c:	mov	r0, r6
   1ae50:	bl	18f5c <__assert_fail@plt+0x7530>
   1ae54:	str	r5, [r4]
   1ae58:	mov	r0, #1
   1ae5c:	str	r0, [r4, #4]
   1ae60:	pop	{r4, r5, r6, r7, fp, pc}
   1ae64:	movw	r3, #12808	; 0x3208
   1ae68:	mvn	r2, #0
   1ae6c:	movt	r3, #3
   1ae70:	b	1ae74 <__assert_fail@plt+0x9448>
   1ae74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae78:	add	fp, sp, #28
   1ae7c:	sub	sp, sp, #44	; 0x2c
   1ae80:	mov	r7, r3
   1ae84:	str	r2, [sp, #36]	; 0x24
   1ae88:	str	r1, [sp, #32]
   1ae8c:	mov	r5, r0
   1ae90:	bl	118b8 <__errno_location@plt>
   1ae94:	cmp	r5, #0
   1ae98:	bmi	1b000 <__assert_fail@plt+0x95d4>
   1ae9c:	cmn	r5, #-2147483647	; 0x80000001
   1aea0:	beq	1b000 <__assert_fail@plt+0x95d4>
   1aea4:	movw	r8, #12728	; 0x31b8
   1aea8:	mov	r4, r0
   1aeac:	ldr	r0, [r0]
   1aeb0:	movt	r8, #3
   1aeb4:	str	r4, [sp, #28]
   1aeb8:	ldr	r1, [r8, #4]
   1aebc:	ldr	r6, [r8]
   1aec0:	str	r0, [sp, #24]
   1aec4:	cmp	r1, r5
   1aec8:	ble	1aed4 <__assert_fail@plt+0x94a8>
   1aecc:	mov	sl, r6
   1aed0:	b	1af3c <__assert_fail@plt+0x9510>
   1aed4:	mov	r0, #8
   1aed8:	add	r9, r8, #8
   1aedc:	str	r1, [fp, #-32]	; 0xffffffe0
   1aee0:	sub	r1, r5, r1
   1aee4:	mvn	r3, #-2147483648	; 0x80000000
   1aee8:	str	r0, [sp]
   1aeec:	subs	r0, r6, r9
   1aef0:	add	r2, r1, #1
   1aef4:	sub	r1, fp, #32
   1aef8:	movne	r0, r6
   1aefc:	bl	1c53c <__assert_fail@plt+0xab10>
   1af00:	mov	sl, r0
   1af04:	cmp	r6, r9
   1af08:	str	r0, [r8]
   1af0c:	bne	1af18 <__assert_fail@plt+0x94ec>
   1af10:	ldrd	r0, [r8, #8]
   1af14:	stm	sl, {r0, r1}
   1af18:	ldr	r1, [r8, #4]
   1af1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1af20:	add	r0, sl, r1, lsl #3
   1af24:	sub	r1, r2, r1
   1af28:	lsl	r2, r1, #3
   1af2c:	mov	r1, #0
   1af30:	bl	118e8 <memset@plt>
   1af34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af38:	str	r0, [r8, #4]
   1af3c:	mov	r9, sl
   1af40:	ldm	r7, {r0, r1}
   1af44:	orr	r8, r1, #1
   1af48:	add	r1, r7, #8
   1af4c:	ldr	r2, [r7, #40]	; 0x28
   1af50:	ldr	r3, [r7, #44]	; 0x2c
   1af54:	ldr	r6, [r9, r5, lsl #3]!
   1af58:	str	r1, [sp, #20]
   1af5c:	ldr	r4, [r9, #4]!
   1af60:	stm	sp, {r0, r8}
   1af64:	add	r0, sp, #8
   1af68:	stm	r0, {r1, r2, r3}
   1af6c:	ldr	r2, [sp, #32]
   1af70:	ldr	r3, [sp, #36]	; 0x24
   1af74:	mov	r1, r6
   1af78:	mov	r0, r4
   1af7c:	bl	19888 <__assert_fail@plt+0x7e5c>
   1af80:	cmp	r6, r0
   1af84:	bhi	1afe8 <__assert_fail@plt+0x95bc>
   1af88:	add	r6, r0, #1
   1af8c:	movw	r0, #12856	; 0x3238
   1af90:	movt	r0, #3
   1af94:	str	r6, [sl, r5, lsl #3]
   1af98:	cmp	r4, r0
   1af9c:	beq	1afa8 <__assert_fail@plt+0x957c>
   1afa0:	mov	r0, r4
   1afa4:	bl	18f5c <__assert_fail@plt+0x7530>
   1afa8:	mov	r0, r6
   1afac:	bl	1c33c <__assert_fail@plt+0xa910>
   1afb0:	str	r0, [r9]
   1afb4:	mov	r4, r0
   1afb8:	add	r3, sp, #8
   1afbc:	ldr	r0, [r7]
   1afc0:	ldr	r1, [r7, #40]	; 0x28
   1afc4:	ldr	r2, [r7, #44]	; 0x2c
   1afc8:	stm	sp, {r0, r8}
   1afcc:	ldr	r0, [sp, #20]
   1afd0:	stm	r3, {r0, r1, r2}
   1afd4:	ldr	r2, [sp, #32]
   1afd8:	ldr	r3, [sp, #36]	; 0x24
   1afdc:	mov	r0, r4
   1afe0:	mov	r1, r6
   1afe4:	bl	19888 <__assert_fail@plt+0x7e5c>
   1afe8:	ldr	r1, [sp, #24]
   1afec:	ldr	r0, [sp, #28]
   1aff0:	str	r1, [r0]
   1aff4:	mov	r0, r4
   1aff8:	sub	sp, fp, #28
   1affc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b000:	bl	11a20 <abort@plt>
   1b004:	movw	r3, #12808	; 0x3208
   1b008:	movt	r3, #3
   1b00c:	b	1ae74 <__assert_fail@plt+0x9448>
   1b010:	movw	r3, #12808	; 0x3208
   1b014:	mov	r1, r0
   1b018:	mov	r0, #0
   1b01c:	mvn	r2, #0
   1b020:	movt	r3, #3
   1b024:	b	1ae74 <__assert_fail@plt+0x9448>
   1b028:	movw	r3, #12808	; 0x3208
   1b02c:	mov	r2, r1
   1b030:	mov	r1, r0
   1b034:	mov	r0, #0
   1b038:	movt	r3, #3
   1b03c:	b	1ae74 <__assert_fail@plt+0x9448>
   1b040:	push	{fp, lr}
   1b044:	mov	fp, sp
   1b048:	sub	sp, sp, #48	; 0x30
   1b04c:	vmov.i32	q8, #0	; 0x00000000
   1b050:	mov	ip, #32
   1b054:	mov	r3, sp
   1b058:	mov	lr, r2
   1b05c:	cmp	r1, #10
   1b060:	add	r2, r3, #16
   1b064:	vst1.64	{d16-d17}, [r3], ip
   1b068:	vst1.64	{d16-d17}, [r2]
   1b06c:	vst1.64	{d16-d17}, [r3]
   1b070:	beq	1b090 <__assert_fail@plt+0x9664>
   1b074:	str	r1, [sp]
   1b078:	mov	r3, sp
   1b07c:	mov	r1, lr
   1b080:	mvn	r2, #0
   1b084:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b088:	mov	sp, fp
   1b08c:	pop	{fp, pc}
   1b090:	bl	11a20 <abort@plt>
   1b094:	push	{r4, sl, fp, lr}
   1b098:	add	fp, sp, #8
   1b09c:	sub	sp, sp, #48	; 0x30
   1b0a0:	vmov.i32	q8, #0	; 0x00000000
   1b0a4:	mov	ip, r3
   1b0a8:	mov	r3, sp
   1b0ac:	mov	lr, #32
   1b0b0:	cmp	r1, #10
   1b0b4:	add	r4, r3, #16
   1b0b8:	vst1.64	{d16-d17}, [r3], lr
   1b0bc:	vst1.64	{d16-d17}, [r4]
   1b0c0:	vst1.64	{d16-d17}, [r3]
   1b0c4:	beq	1b0e4 <__assert_fail@plt+0x96b8>
   1b0c8:	str	r1, [sp]
   1b0cc:	mov	r1, r2
   1b0d0:	mov	r3, sp
   1b0d4:	mov	r2, ip
   1b0d8:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b0dc:	sub	sp, fp, #8
   1b0e0:	pop	{r4, sl, fp, pc}
   1b0e4:	bl	11a20 <abort@plt>
   1b0e8:	push	{fp, lr}
   1b0ec:	mov	fp, sp
   1b0f0:	sub	sp, sp, #48	; 0x30
   1b0f4:	vmov.i32	q8, #0	; 0x00000000
   1b0f8:	mov	r3, sp
   1b0fc:	mov	ip, #32
   1b100:	cmp	r0, #10
   1b104:	add	r2, r3, #16
   1b108:	vst1.64	{d16-d17}, [r3], ip
   1b10c:	vst1.64	{d16-d17}, [r2]
   1b110:	vst1.64	{d16-d17}, [r3]
   1b114:	beq	1b134 <__assert_fail@plt+0x9708>
   1b118:	str	r0, [sp]
   1b11c:	mov	r3, sp
   1b120:	mov	r0, #0
   1b124:	mvn	r2, #0
   1b128:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b12c:	mov	sp, fp
   1b130:	pop	{fp, pc}
   1b134:	bl	11a20 <abort@plt>
   1b138:	push	{fp, lr}
   1b13c:	mov	fp, sp
   1b140:	sub	sp, sp, #48	; 0x30
   1b144:	vmov.i32	q8, #0	; 0x00000000
   1b148:	mov	r3, sp
   1b14c:	mov	ip, #32
   1b150:	cmp	r0, #10
   1b154:	add	lr, r3, #16
   1b158:	vst1.64	{d16-d17}, [r3], ip
   1b15c:	vst1.64	{d16-d17}, [lr]
   1b160:	vst1.64	{d16-d17}, [r3]
   1b164:	beq	1b180 <__assert_fail@plt+0x9754>
   1b168:	str	r0, [sp]
   1b16c:	mov	r3, sp
   1b170:	mov	r0, #0
   1b174:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b178:	mov	sp, fp
   1b17c:	pop	{fp, pc}
   1b180:	bl	11a20 <abort@plt>
   1b184:	push	{r4, sl, fp, lr}
   1b188:	add	fp, sp, #8
   1b18c:	sub	sp, sp, #48	; 0x30
   1b190:	mov	lr, r0
   1b194:	movw	r0, #12808	; 0x3208
   1b198:	mov	ip, r1
   1b19c:	mov	r1, #32
   1b1a0:	mov	r4, #1
   1b1a4:	movt	r0, #3
   1b1a8:	add	r3, r0, #16
   1b1ac:	vld1.64	{d16-d17}, [r0], r1
   1b1b0:	vld1.64	{d20-d21}, [r0]
   1b1b4:	vld1.64	{d18-d19}, [r3]
   1b1b8:	mov	r3, sp
   1b1bc:	add	r0, r3, #32
   1b1c0:	add	r1, r3, #16
   1b1c4:	vst1.64	{d20-d21}, [r0]
   1b1c8:	mov	r0, #28
   1b1cc:	vst1.64	{d18-d19}, [r1]
   1b1d0:	mov	r1, r3
   1b1d4:	and	r0, r0, r2, lsr #3
   1b1d8:	and	r2, r2, #31
   1b1dc:	vst1.64	{d16-d17}, [r1], r0
   1b1e0:	ldr	r0, [r1, #8]
   1b1e4:	bic	r4, r4, r0, lsr r2
   1b1e8:	eor	r0, r0, r4, lsl r2
   1b1ec:	mov	r2, ip
   1b1f0:	str	r0, [r1, #8]
   1b1f4:	mov	r0, #0
   1b1f8:	mov	r1, lr
   1b1fc:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b200:	sub	sp, fp, #8
   1b204:	pop	{r4, sl, fp, pc}
   1b208:	push	{fp, lr}
   1b20c:	mov	fp, sp
   1b210:	sub	sp, sp, #48	; 0x30
   1b214:	mov	ip, r0
   1b218:	movw	r0, #12808	; 0x3208
   1b21c:	mov	r2, #32
   1b220:	movt	r0, #3
   1b224:	add	r3, r0, #16
   1b228:	vld1.64	{d16-d17}, [r0], r2
   1b22c:	vld1.64	{d20-d21}, [r0]
   1b230:	vld1.64	{d18-d19}, [r3]
   1b234:	mov	r3, sp
   1b238:	add	r0, r3, #32
   1b23c:	add	r2, r3, #16
   1b240:	vst1.64	{d20-d21}, [r0]
   1b244:	mov	r0, #28
   1b248:	vst1.64	{d18-d19}, [r2]
   1b24c:	mov	r2, r3
   1b250:	and	r0, r0, r1, lsr #3
   1b254:	and	r1, r1, #31
   1b258:	vst1.64	{d16-d17}, [r2], r0
   1b25c:	mov	r0, #1
   1b260:	ldr	lr, [r2, #8]
   1b264:	bic	r0, r0, lr, lsr r1
   1b268:	eor	r0, lr, r0, lsl r1
   1b26c:	mov	r1, ip
   1b270:	str	r0, [r2, #8]
   1b274:	mov	r0, #0
   1b278:	mvn	r2, #0
   1b27c:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b280:	mov	sp, fp
   1b284:	pop	{fp, pc}
   1b288:	push	{fp, lr}
   1b28c:	mov	fp, sp
   1b290:	sub	sp, sp, #48	; 0x30
   1b294:	mov	r1, r0
   1b298:	movw	r0, #12808	; 0x3208
   1b29c:	mov	r3, #32
   1b2a0:	movt	r0, #3
   1b2a4:	add	r2, r0, #16
   1b2a8:	vld1.64	{d16-d17}, [r0], r3
   1b2ac:	mov	r3, sp
   1b2b0:	vld1.64	{d18-d19}, [r2]
   1b2b4:	vld1.64	{d20-d21}, [r0]
   1b2b8:	add	r2, r3, #16
   1b2bc:	add	r0, r3, #32
   1b2c0:	vst1.64	{d18-d19}, [r2]
   1b2c4:	vst1.64	{d20-d21}, [r0]
   1b2c8:	mov	r0, #12
   1b2cc:	mov	r2, r3
   1b2d0:	vst1.64	{d16-d17}, [r2], r0
   1b2d4:	ldr	r0, [r2]
   1b2d8:	orr	r0, r0, #67108864	; 0x4000000
   1b2dc:	str	r0, [r2]
   1b2e0:	mov	r0, #0
   1b2e4:	mvn	r2, #0
   1b2e8:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b2ec:	mov	sp, fp
   1b2f0:	pop	{fp, pc}
   1b2f4:	push	{fp, lr}
   1b2f8:	mov	fp, sp
   1b2fc:	sub	sp, sp, #48	; 0x30
   1b300:	mov	ip, r1
   1b304:	mov	r1, r0
   1b308:	movw	r0, #12808	; 0x3208
   1b30c:	mov	r2, #32
   1b310:	movt	r0, #3
   1b314:	add	r3, r0, #16
   1b318:	vld1.64	{d16-d17}, [r0], r2
   1b31c:	vld1.64	{d18-d19}, [r3]
   1b320:	vld1.64	{d20-d21}, [r0]
   1b324:	mov	r3, sp
   1b328:	add	r2, r3, #16
   1b32c:	add	r0, r3, #32
   1b330:	vst1.64	{d18-d19}, [r2]
   1b334:	vst1.64	{d20-d21}, [r0]
   1b338:	mov	r0, #12
   1b33c:	mov	r2, r3
   1b340:	vst1.64	{d16-d17}, [r2], r0
   1b344:	ldr	r0, [r2]
   1b348:	orr	r0, r0, #67108864	; 0x4000000
   1b34c:	str	r0, [r2]
   1b350:	mov	r0, #0
   1b354:	mov	r2, ip
   1b358:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b35c:	mov	sp, fp
   1b360:	pop	{fp, pc}
   1b364:	push	{r4, sl, fp, lr}
   1b368:	add	fp, sp, #8
   1b36c:	sub	sp, sp, #96	; 0x60
   1b370:	vmov.i32	q8, #0	; 0x00000000
   1b374:	mov	ip, r2
   1b378:	mov	r2, sp
   1b37c:	mov	r4, #28
   1b380:	cmp	r1, #10
   1b384:	mov	r3, r2
   1b388:	add	lr, r2, #16
   1b38c:	vst1.64	{d16-d17}, [r3], r4
   1b390:	vst1.64	{d16-d17}, [lr]
   1b394:	vst1.32	{d16-d17}, [r3]
   1b398:	beq	1b3e8 <__assert_fail@plt+0x99bc>
   1b39c:	vld1.64	{d16-d17}, [r2], r4
   1b3a0:	vld1.64	{d18-d19}, [lr]
   1b3a4:	add	r3, sp, #48	; 0x30
   1b3a8:	vld1.32	{d20-d21}, [r2]
   1b3ac:	add	r2, r3, #20
   1b3b0:	add	r4, r3, #4
   1b3b4:	vst1.32	{d18-d19}, [r2]
   1b3b8:	add	r2, r3, #32
   1b3bc:	vst1.32	{d16-d17}, [r4]
   1b3c0:	vst1.32	{d20-d21}, [r2]
   1b3c4:	str	r1, [sp, #48]	; 0x30
   1b3c8:	mvn	r2, #0
   1b3cc:	ldr	r1, [sp, #60]	; 0x3c
   1b3d0:	orr	r1, r1, #67108864	; 0x4000000
   1b3d4:	str	r1, [sp, #60]	; 0x3c
   1b3d8:	mov	r1, ip
   1b3dc:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b3e0:	sub	sp, fp, #8
   1b3e4:	pop	{r4, sl, fp, pc}
   1b3e8:	bl	11a20 <abort@plt>
   1b3ec:	push	{r4, r5, r6, sl, fp, lr}
   1b3f0:	add	fp, sp, #16
   1b3f4:	sub	sp, sp, #48	; 0x30
   1b3f8:	mov	ip, r3
   1b3fc:	movw	r3, #12808	; 0x3208
   1b400:	mov	r6, #32
   1b404:	cmp	r1, #0
   1b408:	mov	r4, sp
   1b40c:	movt	r3, #3
   1b410:	cmpne	r2, #0
   1b414:	add	r5, r4, #16
   1b418:	add	lr, r3, #16
   1b41c:	vld1.64	{d16-d17}, [r3], r6
   1b420:	vld1.64	{d18-d19}, [lr]
   1b424:	vld1.64	{d20-d21}, [r3]
   1b428:	mov	r3, #10
   1b42c:	vst1.64	{d16-d17}, [r4], r6
   1b430:	vst1.64	{d18-d19}, [r5]
   1b434:	vst1.64	{d20-d21}, [r4]
   1b438:	str	r3, [sp]
   1b43c:	bne	1b444 <__assert_fail@plt+0x9a18>
   1b440:	bl	11a20 <abort@plt>
   1b444:	str	r2, [sp, #44]	; 0x2c
   1b448:	str	r1, [sp, #40]	; 0x28
   1b44c:	mov	r3, sp
   1b450:	mov	r1, ip
   1b454:	mvn	r2, #0
   1b458:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b45c:	sub	sp, fp, #16
   1b460:	pop	{r4, r5, r6, sl, fp, pc}
   1b464:	push	{r4, r5, r6, sl, fp, lr}
   1b468:	add	fp, sp, #16
   1b46c:	sub	sp, sp, #48	; 0x30
   1b470:	mov	lr, r3
   1b474:	movw	r3, #12808	; 0x3208
   1b478:	mov	r6, #32
   1b47c:	cmp	r1, #0
   1b480:	mov	r4, sp
   1b484:	movt	r3, #3
   1b488:	cmpne	r2, #0
   1b48c:	add	r5, r4, #16
   1b490:	add	ip, r3, #16
   1b494:	vld1.64	{d16-d17}, [r3], r6
   1b498:	vld1.64	{d18-d19}, [ip]
   1b49c:	vld1.64	{d20-d21}, [r3]
   1b4a0:	mov	r3, #10
   1b4a4:	vst1.64	{d16-d17}, [r4], r6
   1b4a8:	vst1.64	{d18-d19}, [r5]
   1b4ac:	vst1.64	{d20-d21}, [r4]
   1b4b0:	str	r3, [sp]
   1b4b4:	bne	1b4bc <__assert_fail@plt+0x9a90>
   1b4b8:	bl	11a20 <abort@plt>
   1b4bc:	ldr	ip, [fp, #8]
   1b4c0:	str	r2, [sp, #44]	; 0x2c
   1b4c4:	str	r1, [sp, #40]	; 0x28
   1b4c8:	mov	r3, sp
   1b4cc:	mov	r1, lr
   1b4d0:	mov	r2, ip
   1b4d4:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b4d8:	sub	sp, fp, #16
   1b4dc:	pop	{r4, r5, r6, sl, fp, pc}
   1b4e0:	push	{r4, sl, fp, lr}
   1b4e4:	add	fp, sp, #8
   1b4e8:	sub	sp, sp, #48	; 0x30
   1b4ec:	movw	r3, #12808	; 0x3208
   1b4f0:	mov	lr, #32
   1b4f4:	mov	ip, r2
   1b4f8:	cmp	r0, #0
   1b4fc:	movt	r3, #3
   1b500:	cmpne	r1, #0
   1b504:	add	r2, r3, #16
   1b508:	vld1.64	{d16-d17}, [r3], lr
   1b50c:	vld1.64	{d20-d21}, [r3]
   1b510:	vld1.64	{d18-d19}, [r2]
   1b514:	mov	r2, sp
   1b518:	add	r4, r2, #16
   1b51c:	vst1.64	{d16-d17}, [r2], lr
   1b520:	vst1.64	{d20-d21}, [r2]
   1b524:	mov	r2, #10
   1b528:	vst1.64	{d18-d19}, [r4]
   1b52c:	str	r2, [sp]
   1b530:	bne	1b538 <__assert_fail@plt+0x9b0c>
   1b534:	bl	11a20 <abort@plt>
   1b538:	str	r1, [sp, #44]	; 0x2c
   1b53c:	str	r0, [sp, #40]	; 0x28
   1b540:	mov	r3, sp
   1b544:	mov	r0, #0
   1b548:	mov	r1, ip
   1b54c:	mvn	r2, #0
   1b550:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b554:	sub	sp, fp, #8
   1b558:	pop	{r4, sl, fp, pc}
   1b55c:	push	{r4, r5, fp, lr}
   1b560:	add	fp, sp, #8
   1b564:	sub	sp, sp, #48	; 0x30
   1b568:	mov	ip, r3
   1b56c:	movw	r3, #12808	; 0x3208
   1b570:	mov	r4, #32
   1b574:	mov	lr, r2
   1b578:	cmp	r0, #0
   1b57c:	movt	r3, #3
   1b580:	cmpne	r1, #0
   1b584:	add	r2, r3, #16
   1b588:	vld1.64	{d16-d17}, [r3], r4
   1b58c:	vld1.64	{d20-d21}, [r3]
   1b590:	vld1.64	{d18-d19}, [r2]
   1b594:	mov	r2, sp
   1b598:	add	r5, r2, #16
   1b59c:	vst1.64	{d16-d17}, [r2], r4
   1b5a0:	vst1.64	{d20-d21}, [r2]
   1b5a4:	mov	r2, #10
   1b5a8:	vst1.64	{d18-d19}, [r5]
   1b5ac:	str	r2, [sp]
   1b5b0:	bne	1b5b8 <__assert_fail@plt+0x9b8c>
   1b5b4:	bl	11a20 <abort@plt>
   1b5b8:	str	r1, [sp, #44]	; 0x2c
   1b5bc:	str	r0, [sp, #40]	; 0x28
   1b5c0:	mov	r3, sp
   1b5c4:	mov	r0, #0
   1b5c8:	mov	r1, lr
   1b5cc:	mov	r2, ip
   1b5d0:	bl	1ae74 <__assert_fail@plt+0x9448>
   1b5d4:	sub	sp, fp, #8
   1b5d8:	pop	{r4, r5, fp, pc}
   1b5dc:	movw	r3, #12680	; 0x3188
   1b5e0:	movt	r3, #3
   1b5e4:	b	1ae74 <__assert_fail@plt+0x9448>
   1b5e8:	movw	r3, #12680	; 0x3188
   1b5ec:	mov	r2, r1
   1b5f0:	mov	r1, r0
   1b5f4:	mov	r0, #0
   1b5f8:	movt	r3, #3
   1b5fc:	b	1ae74 <__assert_fail@plt+0x9448>
   1b600:	movw	r3, #12680	; 0x3188
   1b604:	mvn	r2, #0
   1b608:	movt	r3, #3
   1b60c:	b	1ae74 <__assert_fail@plt+0x9448>
   1b610:	movw	r3, #12680	; 0x3188
   1b614:	mov	r1, r0
   1b618:	mov	r0, #0
   1b61c:	mvn	r2, #0
   1b620:	movt	r3, #3
   1b624:	b	1ae74 <__assert_fail@plt+0x9448>
   1b628:	mov	r1, #0
   1b62c:	str	r1, [r0]
   1b630:	str	r1, [r0, #4]
   1b634:	bx	lr
   1b638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b63c:	add	fp, sp, #28
   1b640:	sub	sp, sp, #52	; 0x34
   1b644:	vmov.i32	q8, #0	; 0x00000000
   1b648:	add	sl, sp, #16
   1b64c:	mov	r5, r0
   1b650:	mov	r8, r3
   1b654:	cmp	r2, #0
   1b658:	mov	r0, sl
   1b65c:	vst1.64	{d16-d17}, [r0]!
   1b660:	vst1.64	{d16-d17}, [r0]
   1b664:	beq	1b68c <__assert_fail@plt+0x9c60>
   1b668:	mov	r0, #1
   1b66c:	ldrb	r3, [r1], #1
   1b670:	subs	r2, r2, #1
   1b674:	ubfx	r7, r3, #5, #3
   1b678:	and	r3, r3, #31
   1b67c:	ldr	r6, [sl, r7, lsl #2]
   1b680:	orr	r3, r6, r0, lsl r3
   1b684:	str	r3, [sl, r7, lsl #2]
   1b688:	bne	1b66c <__assert_fail@plt+0x9c40>
   1b68c:	ldmib	r5, {r0, r1}
   1b690:	cmp	r0, r1
   1b694:	bcs	1b6f8 <__assert_fail@plt+0x9ccc>
   1b698:	add	r1, r0, #1
   1b69c:	str	r1, [r5, #4]
   1b6a0:	ldrb	r6, [r0]
   1b6a4:	mov	r4, #1
   1b6a8:	lsr	r0, r6, #5
   1b6ac:	and	r1, r6, #31
   1b6b0:	ldr	r0, [sl, r0, lsl #2]
   1b6b4:	tst	r0, r4, lsl r1
   1b6b8:	beq	1b70c <__assert_fail@plt+0x9ce0>
   1b6bc:	ldmib	r5, {r0, r1}
   1b6c0:	cmp	r0, r1
   1b6c4:	bcs	1b6e0 <__assert_fail@plt+0x9cb4>
   1b6c8:	add	r1, r0, #1
   1b6cc:	str	r1, [r5, #4]
   1b6d0:	ldrb	r6, [r0]
   1b6d4:	cmn	r6, #1
   1b6d8:	bgt	1b6a8 <__assert_fail@plt+0x9c7c>
   1b6dc:	b	1b70c <__assert_fail@plt+0x9ce0>
   1b6e0:	mov	r0, r5
   1b6e4:	bl	11984 <__uflow@plt>
   1b6e8:	mov	r6, r0
   1b6ec:	cmn	r6, #1
   1b6f0:	bgt	1b6a8 <__assert_fail@plt+0x9c7c>
   1b6f4:	b	1b70c <__assert_fail@plt+0x9ce0>
   1b6f8:	mov	r0, r5
   1b6fc:	bl	11984 <__uflow@plt>
   1b700:	mov	r6, r0
   1b704:	cmp	r0, #0
   1b708:	bpl	1b6a4 <__assert_fail@plt+0x9c78>
   1b70c:	ldm	r8, {r0, r7}
   1b710:	cmp	r6, #0
   1b714:	str	r0, [sp, #12]
   1b718:	bmi	1b7cc <__assert_fail@plt+0x9da0>
   1b71c:	str	r8, [sp, #8]
   1b720:	mov	r9, #0
   1b724:	mov	r8, #1
   1b728:	mov	r4, #0
   1b72c:	cmp	r4, r0
   1b730:	bne	1b750 <__assert_fail@plt+0x9d24>
   1b734:	mov	r0, r7
   1b738:	add	r1, sp, #12
   1b73c:	mov	r2, #1
   1b740:	mvn	r3, #0
   1b744:	str	r8, [sp]
   1b748:	bl	1c53c <__assert_fail@plt+0xab10>
   1b74c:	mov	r7, r0
   1b750:	tst	r9, #1
   1b754:	lsreq	r0, r6, #5
   1b758:	andeq	r1, r6, #31
   1b75c:	ldreq	r0, [sl, r0, lsl #2]
   1b760:	tsteq	r0, r8, lsl r1
   1b764:	bne	1b7ac <__assert_fail@plt+0x9d80>
   1b768:	strb	r6, [r7, r4]
   1b76c:	ldmib	r5, {r0, r1}
   1b770:	cmp	r0, r1
   1b774:	bcs	1b79c <__assert_fail@plt+0x9d70>
   1b778:	add	r1, r0, #1
   1b77c:	str	r1, [r5, #4]
   1b780:	ldrb	r6, [r0]
   1b784:	ldr	r0, [sp, #12]
   1b788:	add	r4, r4, #1
   1b78c:	lsr	r9, r6, #31
   1b790:	cmp	r4, r0
   1b794:	beq	1b734 <__assert_fail@plt+0x9d08>
   1b798:	b	1b750 <__assert_fail@plt+0x9d24>
   1b79c:	mov	r0, r5
   1b7a0:	bl	11984 <__uflow@plt>
   1b7a4:	mov	r6, r0
   1b7a8:	b	1b784 <__assert_fail@plt+0x9d58>
   1b7ac:	mov	r0, #0
   1b7b0:	ldr	r1, [sp, #8]
   1b7b4:	strb	r0, [r7, r4]
   1b7b8:	ldr	r0, [sp, #12]
   1b7bc:	stm	r1, {r0, r7}
   1b7c0:	mov	r0, r4
   1b7c4:	sub	sp, fp, #28
   1b7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7cc:	mvn	r4, #0
   1b7d0:	mov	r0, r4
   1b7d4:	sub	sp, fp, #28
   1b7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7e0:	add	fp, sp, #28
   1b7e4:	sub	sp, sp, #28
   1b7e8:	cmp	r1, #0
   1b7ec:	add	r4, r1, #1
   1b7f0:	mov	r7, r0
   1b7f4:	mov	r1, #4
   1b7f8:	str	r3, [sp, #12]
   1b7fc:	str	r2, [sp, #8]
   1b800:	movweq	r4, #64	; 0x40
   1b804:	mov	r0, r4
   1b808:	str	r4, [sp, #16]
   1b80c:	bl	1c3dc <__assert_fail@plt+0xa9b0>
   1b810:	mov	r6, r0
   1b814:	mov	r0, r4
   1b818:	mov	r1, #4
   1b81c:	bl	1c3dc <__assert_fail@plt+0xa9b0>
   1b820:	mov	r4, #0
   1b824:	mov	r5, r0
   1b828:	str	r4, [sp, #24]
   1b82c:	str	r4, [sp, #20]
   1b830:	ldr	r1, [sp, #8]
   1b834:	ldr	r2, [sp, #12]
   1b838:	mov	r0, r7
   1b83c:	add	r3, sp, #20
   1b840:	bl	1b638 <__assert_fail@plt+0x9c0c>
   1b844:	mov	sl, r0
   1b848:	ldr	r0, [sp, #16]
   1b84c:	cmp	r4, r0
   1b850:	blt	1b888 <__assert_fail@plt+0x9e5c>
   1b854:	mov	r0, #4
   1b858:	add	r1, sp, #16
   1b85c:	mov	r2, #1
   1b860:	mvn	r3, #0
   1b864:	str	r0, [sp]
   1b868:	mov	r0, r6
   1b86c:	bl	1c53c <__assert_fail@plt+0xab10>
   1b870:	ldr	r1, [sp, #16]
   1b874:	mov	r6, r0
   1b878:	mov	r0, r5
   1b87c:	mov	r2, #4
   1b880:	bl	1c2d0 <__assert_fail@plt+0xa8a4>
   1b884:	mov	r5, r0
   1b888:	cmn	sl, #1
   1b88c:	beq	1b8c0 <__assert_fail@plt+0x9e94>
   1b890:	add	r8, sl, #1
   1b894:	mov	r1, #1
   1b898:	mov	r0, r8
   1b89c:	bl	1c3dc <__assert_fail@plt+0xa9b0>
   1b8a0:	str	sl, [r5, r4, lsl #2]
   1b8a4:	mov	r2, r8
   1b8a8:	mov	r9, r0
   1b8ac:	ldr	r1, [sp, #24]
   1b8b0:	bl	116d8 <memcpy@plt>
   1b8b4:	str	r9, [r6, r4, lsl #2]
   1b8b8:	add	r4, r4, #1
   1b8bc:	b	1b830 <__assert_fail@plt+0x9e04>
   1b8c0:	mov	r0, #0
   1b8c4:	str	r0, [r6, r4, lsl #2]
   1b8c8:	str	r0, [r5, r4, lsl #2]
   1b8cc:	ldr	r0, [sp, #24]
   1b8d0:	bl	18f5c <__assert_fail@plt+0x7530>
   1b8d4:	ldr	r0, [fp, #8]
   1b8d8:	str	r6, [r0]
   1b8dc:	ldr	r0, [fp, #12]
   1b8e0:	cmp	r0, #0
   1b8e4:	beq	1b8f8 <__assert_fail@plt+0x9ecc>
   1b8e8:	str	r5, [r0]
   1b8ec:	mov	r0, r4
   1b8f0:	sub	sp, fp, #28
   1b8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8f8:	mov	r0, r5
   1b8fc:	bl	18f5c <__assert_fail@plt+0x7530>
   1b900:	mov	r0, r4
   1b904:	sub	sp, fp, #28
   1b908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b90c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b910:	add	fp, sp, #24
   1b914:	movw	r8, #0
   1b918:	mov	r6, r2
   1b91c:	mov	r4, r1
   1b920:	mov	r5, r0
   1b924:	movt	r8, #32752	; 0x7ff0
   1b928:	mov	r0, r5
   1b92c:	mov	r1, r4
   1b930:	mov	r2, r6
   1b934:	bl	1190c <write@plt>
   1b938:	mov	r7, r0
   1b93c:	cmn	r0, #1
   1b940:	bgt	1b968 <__assert_fail@plt+0x9f3c>
   1b944:	bl	118b8 <__errno_location@plt>
   1b948:	ldr	r0, [r0]
   1b94c:	cmp	r0, #4
   1b950:	beq	1b928 <__assert_fail@plt+0x9efc>
   1b954:	cmp	r6, r8
   1b958:	bls	1b968 <__assert_fail@plt+0x9f3c>
   1b95c:	cmp	r0, #22
   1b960:	mov	r6, r8
   1b964:	beq	1b928 <__assert_fail@plt+0x9efc>
   1b968:	mov	r0, r7
   1b96c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b970:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b974:	add	fp, sp, #24
   1b978:	sub	sp, sp, #64	; 0x40
   1b97c:	mov	r5, r1
   1b980:	bl	11714 <strdup@plt>
   1b984:	cmp	r0, #0
   1b988:	beq	1bc48 <__assert_fail@plt+0xa21c>
   1b98c:	mov	r4, r0
   1b990:	bl	117c8 <__ctype_get_mb_cur_max@plt>
   1b994:	cmp	r0, #2
   1b998:	bcc	1bb80 <__assert_fail@plt+0xa154>
   1b99c:	cmp	r5, #0
   1b9a0:	beq	1ba44 <__assert_fail@plt+0xa018>
   1b9a4:	mov	r0, r4
   1b9a8:	str	r4, [sp, #24]
   1b9ac:	bl	11888 <strlen@plt>
   1b9b0:	mov	r7, #0
   1b9b4:	add	r1, r4, r0
   1b9b8:	cmp	r0, #1
   1b9bc:	mov	r6, r4
   1b9c0:	str	r7, [sp, #16]
   1b9c4:	str	r7, [sp, #12]
   1b9c8:	strb	r7, [sp, #20]
   1b9cc:	strb	r7, [sp, #8]
   1b9d0:	str	r1, [sp, #4]
   1b9d4:	blt	1ba24 <__assert_fail@plt+0x9ff8>
   1b9d8:	add	r6, sp, #4
   1b9dc:	mov	r0, r6
   1b9e0:	bl	1ccc0 <__assert_fail@plt+0xb294>
   1b9e4:	ldrb	r0, [sp, #32]
   1b9e8:	cmp	r0, #0
   1b9ec:	beq	1ba20 <__assert_fail@plt+0x9ff4>
   1b9f0:	ldr	r0, [sp, #36]	; 0x24
   1b9f4:	bl	11870 <iswspace@plt>
   1b9f8:	cmp	r0, #0
   1b9fc:	beq	1ba20 <__assert_fail@plt+0x9ff4>
   1ba00:	strb	r7, [sp, #20]
   1ba04:	ldr	r1, [sp, #24]
   1ba08:	ldr	r2, [sp, #28]
   1ba0c:	ldr	r0, [sp, #4]
   1ba10:	add	r1, r1, r2
   1ba14:	cmp	r1, r0
   1ba18:	str	r1, [sp, #24]
   1ba1c:	bcc	1b9dc <__assert_fail@plt+0x9fb0>
   1ba20:	ldr	r6, [sp, #24]
   1ba24:	mov	r0, r6
   1ba28:	bl	11888 <strlen@plt>
   1ba2c:	add	r2, r0, #1
   1ba30:	mov	r0, r4
   1ba34:	mov	r1, r6
   1ba38:	bl	116a8 <memmove@plt>
   1ba3c:	cmp	r5, #1
   1ba40:	beq	1bc24 <__assert_fail@plt+0xa1f8>
   1ba44:	mov	r0, r4
   1ba48:	str	r4, [sp, #24]
   1ba4c:	bl	11888 <strlen@plt>
   1ba50:	mov	r6, #0
   1ba54:	cmp	r0, #1
   1ba58:	add	r1, r4, r0
   1ba5c:	str	r6, [sp, #16]
   1ba60:	str	r6, [sp, #12]
   1ba64:	strb	r6, [sp, #20]
   1ba68:	strb	r6, [sp, #8]
   1ba6c:	str	r1, [sp, #4]
   1ba70:	blt	1bc24 <__assert_fail@plt+0xa1f8>
   1ba74:	add	r5, sp, #4
   1ba78:	mov	r7, #0
   1ba7c:	mov	r0, r5
   1ba80:	bl	1ccc0 <__assert_fail@plt+0xb294>
   1ba84:	cmp	r7, #1
   1ba88:	bne	1bac4 <__assert_fail@plt+0xa098>
   1ba8c:	b	1baf4 <__assert_fail@plt+0xa0c8>
   1ba90:	mov	r7, #1
   1ba94:	strb	r6, [sp, #20]
   1ba98:	ldr	r1, [sp, #24]
   1ba9c:	ldr	r2, [sp, #28]
   1baa0:	ldr	r0, [sp, #4]
   1baa4:	add	r1, r1, r2
   1baa8:	cmp	r1, r0
   1baac:	str	r1, [sp, #24]
   1bab0:	bcs	1bc30 <__assert_fail@plt+0xa204>
   1bab4:	mov	r0, r5
   1bab8:	bl	1ccc0 <__assert_fail@plt+0xb294>
   1babc:	cmp	r7, #1
   1bac0:	beq	1baf4 <__assert_fail@plt+0xa0c8>
   1bac4:	cmp	r7, #0
   1bac8:	bne	1bb3c <__assert_fail@plt+0xa110>
   1bacc:	ldrb	r0, [sp, #32]
   1bad0:	mov	r7, #1
   1bad4:	cmp	r0, #0
   1bad8:	beq	1ba94 <__assert_fail@plt+0xa068>
   1badc:	ldr	r0, [sp, #36]	; 0x24
   1bae0:	bl	11870 <iswspace@plt>
   1bae4:	cmp	r0, #0
   1bae8:	beq	1bb60 <__assert_fail@plt+0xa134>
   1baec:	mov	r7, #0
   1baf0:	b	1ba94 <__assert_fail@plt+0xa068>
   1baf4:	ldrb	r0, [sp, #32]
   1baf8:	mov	r7, #1
   1bafc:	cmp	r0, #0
   1bb00:	beq	1ba94 <__assert_fail@plt+0xa068>
   1bb04:	ldr	r0, [sp, #36]	; 0x24
   1bb08:	bl	11870 <iswspace@plt>
   1bb0c:	cmp	r0, #0
   1bb10:	beq	1ba94 <__assert_fail@plt+0xa068>
   1bb14:	ldrb	r0, [sp, #32]
   1bb18:	cmp	r0, #0
   1bb1c:	beq	1ba90 <__assert_fail@plt+0xa064>
   1bb20:	ldr	r0, [sp, #36]	; 0x24
   1bb24:	bl	11870 <iswspace@plt>
   1bb28:	cmp	r0, #0
   1bb2c:	beq	1ba90 <__assert_fail@plt+0xa064>
   1bb30:	ldr	r8, [sp, #24]
   1bb34:	mov	r7, #2
   1bb38:	b	1ba94 <__assert_fail@plt+0xa068>
   1bb3c:	ldrb	r0, [sp, #32]
   1bb40:	cmp	r0, #0
   1bb44:	beq	1ba90 <__assert_fail@plt+0xa064>
   1bb48:	ldr	r0, [sp, #36]	; 0x24
   1bb4c:	bl	11870 <iswspace@plt>
   1bb50:	mov	r7, #2
   1bb54:	cmp	r0, #0
   1bb58:	bne	1ba94 <__assert_fail@plt+0xa068>
   1bb5c:	b	1ba90 <__assert_fail@plt+0xa064>
   1bb60:	ldrb	r0, [sp, #32]
   1bb64:	cmp	r0, #0
   1bb68:	beq	1ba94 <__assert_fail@plt+0xa068>
   1bb6c:	ldr	r0, [sp, #36]	; 0x24
   1bb70:	bl	11870 <iswspace@plt>
   1bb74:	cmp	r0, #0
   1bb78:	movne	r7, #1
   1bb7c:	b	1ba94 <__assert_fail@plt+0xa068>
   1bb80:	cmp	r5, #0
   1bb84:	beq	1bbe0 <__assert_fail@plt+0xa1b4>
   1bb88:	ldrb	r7, [r4]
   1bb8c:	mov	r6, r4
   1bb90:	cmp	r7, #0
   1bb94:	beq	1bbc0 <__assert_fail@plt+0xa194>
   1bb98:	bl	11858 <__ctype_b_loc@plt>
   1bb9c:	ldr	r0, [r0]
   1bba0:	mov	r6, r4
   1bba4:	uxtb	r1, r7
   1bba8:	add	r1, r0, r1, lsl #1
   1bbac:	ldrb	r1, [r1, #1]
   1bbb0:	tst	r1, #32
   1bbb4:	ldrbne	r7, [r6, #1]!
   1bbb8:	cmpne	r7, #0
   1bbbc:	bne	1bba4 <__assert_fail@plt+0xa178>
   1bbc0:	mov	r0, r6
   1bbc4:	bl	11888 <strlen@plt>
   1bbc8:	add	r2, r0, #1
   1bbcc:	mov	r0, r4
   1bbd0:	mov	r1, r6
   1bbd4:	bl	116a8 <memmove@plt>
   1bbd8:	cmp	r5, #1
   1bbdc:	beq	1bc24 <__assert_fail@plt+0xa1f8>
   1bbe0:	mov	r0, r4
   1bbe4:	bl	11888 <strlen@plt>
   1bbe8:	add	r0, r4, r0
   1bbec:	sub	r5, r0, #1
   1bbf0:	cmp	r5, r4
   1bbf4:	bcc	1bc24 <__assert_fail@plt+0xa1f8>
   1bbf8:	bl	11858 <__ctype_b_loc@plt>
   1bbfc:	mov	r1, #0
   1bc00:	ldrb	r2, [r5]
   1bc04:	ldr	r3, [r0]
   1bc08:	add	r2, r3, r2, lsl #1
   1bc0c:	ldrb	r2, [r2, #1]
   1bc10:	tst	r2, #32
   1bc14:	beq	1bc24 <__assert_fail@plt+0xa1f8>
   1bc18:	strb	r1, [r5], #-1
   1bc1c:	cmp	r5, r4
   1bc20:	bcs	1bc00 <__assert_fail@plt+0xa1d4>
   1bc24:	mov	r0, r4
   1bc28:	sub	sp, fp, #24
   1bc2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc30:	cmp	r7, #2
   1bc34:	moveq	r0, #0
   1bc38:	strbeq	r0, [r8]
   1bc3c:	mov	r0, r4
   1bc40:	sub	sp, fp, #24
   1bc44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc48:	bl	1c848 <__assert_fail@plt+0xae1c>
   1bc4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bc50:	add	fp, sp, #24
   1bc54:	sub	sp, sp, #32
   1bc58:	ldr	r6, [fp, #12]
   1bc5c:	ldr	r7, [fp, #8]
   1bc60:	mov	r4, r2
   1bc64:	mov	r8, r0
   1bc68:	cmp	r1, #0
   1bc6c:	beq	1bc94 <__assert_fail@plt+0xa268>
   1bc70:	movw	r2, #8300	; 0x206c
   1bc74:	mov	r5, r1
   1bc78:	str	r3, [sp, #4]
   1bc7c:	str	r4, [sp]
   1bc80:	mov	r0, r8
   1bc84:	mov	r1, #1
   1bc88:	movt	r2, #2
   1bc8c:	mov	r3, r5
   1bc90:	b	1bcac <__assert_fail@plt+0xa280>
   1bc94:	movw	r2, #8312	; 0x2078
   1bc98:	str	r3, [sp]
   1bc9c:	mov	r0, r8
   1bca0:	mov	r1, #1
   1bca4:	mov	r3, r4
   1bca8:	movt	r2, #2
   1bcac:	bl	11924 <__fprintf_chk@plt>
   1bcb0:	movw	r1, #8319	; 0x207f
   1bcb4:	mov	r0, #0
   1bcb8:	mov	r2, #5
   1bcbc:	movt	r1, #2
   1bcc0:	bl	116fc <dcgettext@plt>
   1bcc4:	movw	r2, #9037	; 0x234d
   1bcc8:	mov	r3, r0
   1bccc:	movw	r0, #2022	; 0x7e6
   1bcd0:	mov	r1, #1
   1bcd4:	movt	r2, #2
   1bcd8:	str	r0, [sp]
   1bcdc:	mov	r0, r8
   1bce0:	bl	11924 <__fprintf_chk@plt>
   1bce4:	movw	r4, #59704	; 0xe938
   1bce8:	mov	r1, r8
   1bcec:	movt	r4, #1
   1bcf0:	mov	r0, r4
   1bcf4:	bl	11630 <fputs_unlocked@plt>
   1bcf8:	movw	r1, #8323	; 0x2083
   1bcfc:	mov	r0, #0
   1bd00:	mov	r2, #5
   1bd04:	movt	r1, #2
   1bd08:	bl	116fc <dcgettext@plt>
   1bd0c:	movw	r3, #8494	; 0x212e
   1bd10:	mov	r2, r0
   1bd14:	mov	r0, r8
   1bd18:	mov	r1, #1
   1bd1c:	movt	r3, #2
   1bd20:	bl	11924 <__fprintf_chk@plt>
   1bd24:	mov	r0, r4
   1bd28:	mov	r1, r8
   1bd2c:	bl	11630 <fputs_unlocked@plt>
   1bd30:	cmp	r6, #9
   1bd34:	bhi	1bd70 <__assert_fail@plt+0xa344>
   1bd38:	add	r0, pc, #0
   1bd3c:	ldr	pc, [r0, r6, lsl #2]
   1bd40:	andeq	fp, r1, r8, ror #26
   1bd44:	andeq	fp, r1, ip, ror sp
   1bd48:	andeq	fp, r1, ip, lsr #27
   1bd4c:	ldrdeq	fp, [r1], -r4
   1bd50:	strdeq	fp, [r1], -ip
   1bd54:	andeq	fp, r1, r4, lsr #28
   1bd58:	andeq	fp, r1, ip, asr #28
   1bd5c:	andeq	fp, r1, r4, lsl #29
   1bd60:	andeq	fp, r1, ip, lsr #30
   1bd64:	ldrdeq	fp, [r1], -r4
   1bd68:	sub	sp, fp, #24
   1bd6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd70:	movw	r1, #8847	; 0x228f
   1bd74:	movt	r1, #2
   1bd78:	b	1bedc <__assert_fail@plt+0xa4b0>
   1bd7c:	movw	r1, #8528	; 0x2150
   1bd80:	mov	r0, #0
   1bd84:	mov	r2, #5
   1bd88:	movt	r1, #2
   1bd8c:	bl	116fc <dcgettext@plt>
   1bd90:	ldr	r3, [r7]
   1bd94:	mov	r2, r0
   1bd98:	mov	r0, r8
   1bd9c:	mov	r1, #1
   1bda0:	sub	sp, fp, #24
   1bda4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bda8:	b	11924 <__fprintf_chk@plt>
   1bdac:	movw	r1, #8544	; 0x2160
   1bdb0:	mov	r0, #0
   1bdb4:	mov	r2, #5
   1bdb8:	movt	r1, #2
   1bdbc:	bl	116fc <dcgettext@plt>
   1bdc0:	mov	r2, r0
   1bdc4:	ldr	r3, [r7]
   1bdc8:	ldr	r0, [r7, #4]
   1bdcc:	str	r0, [sp]
   1bdd0:	b	1bec0 <__assert_fail@plt+0xa494>
   1bdd4:	movw	r1, #8567	; 0x2177
   1bdd8:	mov	r0, #0
   1bddc:	mov	r2, #5
   1bde0:	movt	r1, #2
   1bde4:	bl	116fc <dcgettext@plt>
   1bde8:	mov	r2, r0
   1bdec:	ldr	r3, [r7]
   1bdf0:	ldmib	r7, {r0, r1}
   1bdf4:	stm	sp, {r0, r1}
   1bdf8:	b	1bec0 <__assert_fail@plt+0xa494>
   1bdfc:	movw	r1, #8595	; 0x2193
   1be00:	mov	r0, #0
   1be04:	mov	r2, #5
   1be08:	movt	r1, #2
   1be0c:	bl	116fc <dcgettext@plt>
   1be10:	ldr	r3, [r7]
   1be14:	mov	r2, r0
   1be18:	ldmib	r7, {r0, r1, r7}
   1be1c:	stm	sp, {r0, r1, r7}
   1be20:	b	1bec0 <__assert_fail@plt+0xa494>
   1be24:	movw	r1, #8627	; 0x21b3
   1be28:	mov	r0, #0
   1be2c:	mov	r2, #5
   1be30:	movt	r1, #2
   1be34:	bl	116fc <dcgettext@plt>
   1be38:	ldr	r3, [r7]
   1be3c:	mov	r2, r0
   1be40:	ldmib	r7, {r0, r1, r6, r7}
   1be44:	stm	sp, {r0, r1, r6, r7}
   1be48:	b	1bec0 <__assert_fail@plt+0xa494>
   1be4c:	movw	r1, #8663	; 0x21d7
   1be50:	mov	r0, #0
   1be54:	mov	r2, #5
   1be58:	movt	r1, #2
   1be5c:	bl	116fc <dcgettext@plt>
   1be60:	mov	r2, r0
   1be64:	ldr	r3, [r7]
   1be68:	ldmib	r7, {r0, r1, r6}
   1be6c:	ldr	r5, [r7, #16]
   1be70:	ldr	r7, [r7, #20]
   1be74:	stm	sp, {r0, r1, r6}
   1be78:	str	r5, [sp, #12]
   1be7c:	str	r7, [sp, #16]
   1be80:	b	1bec0 <__assert_fail@plt+0xa494>
   1be84:	movw	r1, #8703	; 0x21ff
   1be88:	mov	r0, #0
   1be8c:	mov	r2, #5
   1be90:	movt	r1, #2
   1be94:	bl	116fc <dcgettext@plt>
   1be98:	mov	r2, r0
   1be9c:	ldr	r3, [r7]
   1bea0:	ldmib	r7, {r0, r1, r6}
   1bea4:	ldr	r5, [r7, #16]
   1bea8:	ldr	r4, [r7, #20]
   1beac:	ldr	r7, [r7, #24]
   1beb0:	stm	sp, {r0, r1, r6}
   1beb4:	str	r5, [sp, #12]
   1beb8:	str	r4, [sp, #16]
   1bebc:	str	r7, [sp, #20]
   1bec0:	mov	r0, r8
   1bec4:	mov	r1, #1
   1bec8:	bl	11924 <__fprintf_chk@plt>
   1becc:	sub	sp, fp, #24
   1bed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bed4:	movw	r1, #8795	; 0x225b
   1bed8:	movt	r1, #2
   1bedc:	mov	r0, #0
   1bee0:	mov	r2, #5
   1bee4:	bl	116fc <dcgettext@plt>
   1bee8:	mov	ip, r0
   1beec:	ldr	r3, [r7]
   1bef0:	ldr	r0, [r7, #4]
   1bef4:	ldr	r1, [r7, #8]
   1bef8:	ldr	r6, [r7, #12]
   1befc:	ldr	r5, [r7, #16]
   1bf00:	ldr	r4, [r7, #20]
   1bf04:	ldr	r2, [r7, #24]
   1bf08:	ldr	lr, [r7, #28]
   1bf0c:	ldr	r7, [r7, #32]
   1bf10:	stm	sp, {r0, r1, r6}
   1bf14:	str	r5, [sp, #12]
   1bf18:	str	r4, [sp, #16]
   1bf1c:	str	r2, [sp, #20]
   1bf20:	str	lr, [sp, #24]
   1bf24:	str	r7, [sp, #28]
   1bf28:	b	1bf70 <__assert_fail@plt+0xa544>
   1bf2c:	movw	r1, #8747	; 0x222b
   1bf30:	mov	r0, #0
   1bf34:	mov	r2, #5
   1bf38:	movt	r1, #2
   1bf3c:	bl	116fc <dcgettext@plt>
   1bf40:	mov	ip, r0
   1bf44:	ldr	r3, [r7]
   1bf48:	ldmib	r7, {r0, r1, r6}
   1bf4c:	ldr	r5, [r7, #16]
   1bf50:	ldr	r4, [r7, #20]
   1bf54:	ldr	r2, [r7, #24]
   1bf58:	ldr	r7, [r7, #28]
   1bf5c:	stm	sp, {r0, r1, r6}
   1bf60:	str	r5, [sp, #12]
   1bf64:	str	r4, [sp, #16]
   1bf68:	str	r2, [sp, #20]
   1bf6c:	str	r7, [sp, #24]
   1bf70:	mov	r0, r8
   1bf74:	mov	r1, #1
   1bf78:	mov	r2, ip
   1bf7c:	bl	11924 <__fprintf_chk@plt>
   1bf80:	sub	sp, fp, #24
   1bf84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bf88:	push	{r4, sl, fp, lr}
   1bf8c:	add	fp, sp, #8
   1bf90:	sub	sp, sp, #8
   1bf94:	ldr	ip, [fp, #8]
   1bf98:	mov	lr, #0
   1bf9c:	ldr	r4, [ip, lr, lsl #2]
   1bfa0:	add	lr, lr, #1
   1bfa4:	cmp	r4, #0
   1bfa8:	bne	1bf9c <__assert_fail@plt+0xa570>
   1bfac:	sub	r4, lr, #1
   1bfb0:	str	ip, [sp]
   1bfb4:	str	r4, [sp, #4]
   1bfb8:	bl	1bc4c <__assert_fail@plt+0xa220>
   1bfbc:	sub	sp, fp, #8
   1bfc0:	pop	{r4, sl, fp, pc}
   1bfc4:	push	{fp, lr}
   1bfc8:	mov	fp, sp
   1bfcc:	sub	sp, sp, #48	; 0x30
   1bfd0:	ldr	ip, [fp, #8]
   1bfd4:	ldr	lr, [ip]
   1bfd8:	cmp	lr, #0
   1bfdc:	str	lr, [sp, #8]
   1bfe0:	beq	1c07c <__assert_fail@plt+0xa650>
   1bfe4:	ldr	lr, [ip, #4]
   1bfe8:	cmp	lr, #0
   1bfec:	str	lr, [sp, #12]
   1bff0:	beq	1c084 <__assert_fail@plt+0xa658>
   1bff4:	ldr	lr, [ip, #8]
   1bff8:	cmp	lr, #0
   1bffc:	str	lr, [sp, #16]
   1c000:	beq	1c08c <__assert_fail@plt+0xa660>
   1c004:	ldr	lr, [ip, #12]
   1c008:	cmp	lr, #0
   1c00c:	str	lr, [sp, #20]
   1c010:	beq	1c094 <__assert_fail@plt+0xa668>
   1c014:	ldr	lr, [ip, #16]
   1c018:	cmp	lr, #0
   1c01c:	str	lr, [sp, #24]
   1c020:	beq	1c09c <__assert_fail@plt+0xa670>
   1c024:	ldr	lr, [ip, #20]
   1c028:	cmp	lr, #0
   1c02c:	str	lr, [sp, #28]
   1c030:	beq	1c0a4 <__assert_fail@plt+0xa678>
   1c034:	ldr	lr, [ip, #24]
   1c038:	cmp	lr, #0
   1c03c:	str	lr, [sp, #32]
   1c040:	beq	1c0ac <__assert_fail@plt+0xa680>
   1c044:	ldr	lr, [ip, #28]
   1c048:	cmp	lr, #0
   1c04c:	str	lr, [sp, #36]	; 0x24
   1c050:	beq	1c0b4 <__assert_fail@plt+0xa688>
   1c054:	ldr	lr, [ip, #32]
   1c058:	cmp	lr, #0
   1c05c:	str	lr, [sp, #40]	; 0x28
   1c060:	beq	1c0bc <__assert_fail@plt+0xa690>
   1c064:	ldr	lr, [ip, #36]	; 0x24
   1c068:	mov	ip, #10
   1c06c:	cmp	lr, #0
   1c070:	str	lr, [sp, #44]	; 0x2c
   1c074:	movweq	ip, #9
   1c078:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c07c:	mov	ip, #0
   1c080:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c084:	mov	ip, #1
   1c088:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c08c:	mov	ip, #2
   1c090:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c094:	mov	ip, #3
   1c098:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c09c:	mov	ip, #4
   1c0a0:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c0a4:	mov	ip, #5
   1c0a8:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c0ac:	mov	ip, #6
   1c0b0:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c0b4:	mov	ip, #7
   1c0b8:	b	1c0c0 <__assert_fail@plt+0xa694>
   1c0bc:	mov	ip, #8
   1c0c0:	add	lr, sp, #8
   1c0c4:	str	ip, [sp, #4]
   1c0c8:	str	lr, [sp]
   1c0cc:	bl	1bc4c <__assert_fail@plt+0xa220>
   1c0d0:	mov	sp, fp
   1c0d4:	pop	{fp, pc}
   1c0d8:	push	{fp, lr}
   1c0dc:	mov	fp, sp
   1c0e0:	sub	sp, sp, #56	; 0x38
   1c0e4:	add	ip, fp, #8
   1c0e8:	str	ip, [sp, #12]
   1c0ec:	ldr	lr, [fp, #8]
   1c0f0:	cmp	lr, #0
   1c0f4:	str	lr, [sp, #16]
   1c0f8:	beq	1c194 <__assert_fail@plt+0xa768>
   1c0fc:	ldr	lr, [ip, #4]
   1c100:	cmp	lr, #0
   1c104:	str	lr, [sp, #20]
   1c108:	beq	1c19c <__assert_fail@plt+0xa770>
   1c10c:	ldr	lr, [ip, #8]
   1c110:	cmp	lr, #0
   1c114:	str	lr, [sp, #24]
   1c118:	beq	1c1a4 <__assert_fail@plt+0xa778>
   1c11c:	ldr	lr, [ip, #12]
   1c120:	cmp	lr, #0
   1c124:	str	lr, [sp, #28]
   1c128:	beq	1c1ac <__assert_fail@plt+0xa780>
   1c12c:	ldr	lr, [ip, #16]
   1c130:	cmp	lr, #0
   1c134:	str	lr, [sp, #32]
   1c138:	beq	1c1b4 <__assert_fail@plt+0xa788>
   1c13c:	ldr	lr, [ip, #20]
   1c140:	cmp	lr, #0
   1c144:	str	lr, [sp, #36]	; 0x24
   1c148:	beq	1c1bc <__assert_fail@plt+0xa790>
   1c14c:	ldr	lr, [ip, #24]
   1c150:	cmp	lr, #0
   1c154:	str	lr, [sp, #40]	; 0x28
   1c158:	beq	1c1c4 <__assert_fail@plt+0xa798>
   1c15c:	ldr	lr, [ip, #28]
   1c160:	cmp	lr, #0
   1c164:	str	lr, [sp, #44]	; 0x2c
   1c168:	beq	1c1cc <__assert_fail@plt+0xa7a0>
   1c16c:	ldr	lr, [ip, #32]
   1c170:	cmp	lr, #0
   1c174:	str	lr, [sp, #48]	; 0x30
   1c178:	beq	1c1d4 <__assert_fail@plt+0xa7a8>
   1c17c:	ldr	lr, [ip, #36]	; 0x24
   1c180:	mov	ip, #10
   1c184:	cmp	lr, #0
   1c188:	str	lr, [sp, #52]	; 0x34
   1c18c:	movweq	ip, #9
   1c190:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c194:	mov	ip, #0
   1c198:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c19c:	mov	ip, #1
   1c1a0:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1a4:	mov	ip, #2
   1c1a8:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1ac:	mov	ip, #3
   1c1b0:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1b4:	mov	ip, #4
   1c1b8:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1bc:	mov	ip, #5
   1c1c0:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1c4:	mov	ip, #6
   1c1c8:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1cc:	mov	ip, #7
   1c1d0:	b	1c1d8 <__assert_fail@plt+0xa7ac>
   1c1d4:	mov	ip, #8
   1c1d8:	add	lr, sp, #16
   1c1dc:	str	ip, [sp, #4]
   1c1e0:	str	lr, [sp]
   1c1e4:	bl	1bc4c <__assert_fail@plt+0xa220>
   1c1e8:	mov	sp, fp
   1c1ec:	pop	{fp, pc}
   1c1f0:	push	{fp, lr}
   1c1f4:	mov	fp, sp
   1c1f8:	movw	r0, #12772	; 0x31e4
   1c1fc:	movt	r0, #3
   1c200:	ldr	r1, [r0]
   1c204:	movw	r0, #59704	; 0xe938
   1c208:	movt	r0, #1
   1c20c:	bl	11630 <fputs_unlocked@plt>
   1c210:	movw	r1, #8907	; 0x22cb
   1c214:	mov	r0, #0
   1c218:	mov	r2, #5
   1c21c:	movt	r1, #2
   1c220:	bl	116fc <dcgettext@plt>
   1c224:	movw	r2, #8927	; 0x22df
   1c228:	mov	r1, r0
   1c22c:	mov	r0, #1
   1c230:	movt	r2, #2
   1c234:	bl	11900 <__printf_chk@plt>
   1c238:	movw	r1, #8949	; 0x22f5
   1c23c:	mov	r0, #0
   1c240:	mov	r2, #5
   1c244:	movt	r1, #2
   1c248:	bl	116fc <dcgettext@plt>
   1c24c:	movw	r2, #59836	; 0xe9bc
   1c250:	movw	r3, #60043	; 0xea8b
   1c254:	mov	r1, r0
   1c258:	mov	r0, #1
   1c25c:	movt	r2, #1
   1c260:	movt	r3, #1
   1c264:	bl	11900 <__printf_chk@plt>
   1c268:	movw	r1, #8969	; 0x2309
   1c26c:	mov	r0, #0
   1c270:	mov	r2, #5
   1c274:	movt	r1, #2
   1c278:	bl	116fc <dcgettext@plt>
   1c27c:	movw	r2, #9008	; 0x2330
   1c280:	mov	r1, r0
   1c284:	mov	r0, #1
   1c288:	movt	r2, #2
   1c28c:	pop	{fp, lr}
   1c290:	b	11900 <__printf_chk@plt>
   1c294:	push	{r4, r5, r6, sl, fp, lr}
   1c298:	add	fp, sp, #16
   1c29c:	mov	r4, r2
   1c2a0:	mov	r5, r1
   1c2a4:	mov	r6, r0
   1c2a8:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c2ac:	cmp	r0, #0
   1c2b0:	popne	{r4, r5, r6, sl, fp, pc}
   1c2b4:	cmp	r6, #0
   1c2b8:	beq	1c2cc <__assert_fail@plt+0xa8a0>
   1c2bc:	cmp	r5, #0
   1c2c0:	cmpne	r4, #0
   1c2c4:	bne	1c2cc <__assert_fail@plt+0xa8a0>
   1c2c8:	pop	{r4, r5, r6, sl, fp, pc}
   1c2cc:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c2d0:	push	{r4, r5, r6, sl, fp, lr}
   1c2d4:	add	fp, sp, #16
   1c2d8:	mov	r4, r2
   1c2dc:	mov	r5, r1
   1c2e0:	mov	r6, r0
   1c2e4:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c2e8:	cmp	r0, #0
   1c2ec:	popne	{r4, r5, r6, sl, fp, pc}
   1c2f0:	cmp	r6, #0
   1c2f4:	beq	1c308 <__assert_fail@plt+0xa8dc>
   1c2f8:	cmp	r5, #0
   1c2fc:	cmpne	r4, #0
   1c300:	bne	1c308 <__assert_fail@plt+0xa8dc>
   1c304:	pop	{r4, r5, r6, sl, fp, pc}
   1c308:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c30c:	push	{fp, lr}
   1c310:	mov	fp, sp
   1c314:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c318:	cmp	r0, #0
   1c31c:	popne	{fp, pc}
   1c320:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c324:	push	{fp, lr}
   1c328:	mov	fp, sp
   1c32c:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c330:	cmp	r0, #0
   1c334:	popne	{fp, pc}
   1c338:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c33c:	push	{fp, lr}
   1c340:	mov	fp, sp
   1c344:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c348:	cmp	r0, #0
   1c34c:	popne	{fp, pc}
   1c350:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c354:	push	{r4, r5, fp, lr}
   1c358:	add	fp, sp, #8
   1c35c:	mov	r4, r1
   1c360:	mov	r5, r0
   1c364:	bl	1c9bc <__assert_fail@plt+0xaf90>
   1c368:	cmp	r0, #0
   1c36c:	popne	{r4, r5, fp, pc}
   1c370:	cmp	r5, #0
   1c374:	beq	1c384 <__assert_fail@plt+0xa958>
   1c378:	cmp	r4, #0
   1c37c:	bne	1c384 <__assert_fail@plt+0xa958>
   1c380:	pop	{r4, r5, fp, pc}
   1c384:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c388:	push	{fp, lr}
   1c38c:	mov	fp, sp
   1c390:	cmp	r1, #0
   1c394:	orreq	r1, r1, #1
   1c398:	bl	1c9bc <__assert_fail@plt+0xaf90>
   1c39c:	cmp	r0, #0
   1c3a0:	popne	{fp, pc}
   1c3a4:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c3a8:	push	{fp, lr}
   1c3ac:	mov	fp, sp
   1c3b0:	clz	r3, r2
   1c3b4:	lsr	ip, r3, #5
   1c3b8:	clz	r3, r1
   1c3bc:	lsr	r3, r3, #5
   1c3c0:	orrs	r3, r3, ip
   1c3c4:	movwne	r1, #1
   1c3c8:	movwne	r2, #1
   1c3cc:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c3d0:	cmp	r0, #0
   1c3d4:	popne	{fp, pc}
   1c3d8:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c3dc:	push	{fp, lr}
   1c3e0:	mov	fp, sp
   1c3e4:	mov	r2, r1
   1c3e8:	mov	r1, r0
   1c3ec:	mov	r0, #0
   1c3f0:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c3f4:	cmp	r0, #0
   1c3f8:	popne	{fp, pc}
   1c3fc:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c400:	push	{fp, lr}
   1c404:	mov	fp, sp
   1c408:	mov	r2, r1
   1c40c:	mov	r1, r0
   1c410:	clz	r0, r2
   1c414:	clz	r3, r1
   1c418:	lsr	r0, r0, #5
   1c41c:	lsr	r3, r3, #5
   1c420:	orrs	r0, r3, r0
   1c424:	mov	r0, #0
   1c428:	movwne	r1, #1
   1c42c:	movwne	r2, #1
   1c430:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c434:	cmp	r0, #0
   1c438:	popne	{fp, pc}
   1c43c:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c440:	push	{r4, r5, r6, sl, fp, lr}
   1c444:	add	fp, sp, #16
   1c448:	ldr	r5, [r1]
   1c44c:	mov	r4, r1
   1c450:	mov	r6, r0
   1c454:	cmp	r0, #0
   1c458:	beq	1c470 <__assert_fail@plt+0xaa44>
   1c45c:	mov	r0, #1
   1c460:	add	r0, r0, r5, lsr #1
   1c464:	adds	r5, r5, r0
   1c468:	bcc	1c478 <__assert_fail@plt+0xaa4c>
   1c46c:	b	1c4b4 <__assert_fail@plt+0xaa88>
   1c470:	cmp	r5, #0
   1c474:	movweq	r5, #64	; 0x40
   1c478:	mov	r0, r6
   1c47c:	mov	r1, r5
   1c480:	mov	r2, #1
   1c484:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c488:	cmp	r5, #0
   1c48c:	mov	r1, r5
   1c490:	movwne	r1, #1
   1c494:	cmp	r0, #0
   1c498:	bne	1c4ac <__assert_fail@plt+0xaa80>
   1c49c:	clz	r2, r6
   1c4a0:	lsr	r2, r2, #5
   1c4a4:	orrs	r1, r2, r1
   1c4a8:	bne	1c4b4 <__assert_fail@plt+0xaa88>
   1c4ac:	str	r5, [r4]
   1c4b0:	pop	{r4, r5, r6, sl, fp, pc}
   1c4b4:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c4b8:	push	{r4, r5, r6, r7, fp, lr}
   1c4bc:	add	fp, sp, #16
   1c4c0:	ldr	r5, [r1]
   1c4c4:	mov	r6, r2
   1c4c8:	mov	r4, r1
   1c4cc:	mov	r7, r0
   1c4d0:	cmp	r0, #0
   1c4d4:	beq	1c4ec <__assert_fail@plt+0xaac0>
   1c4d8:	mov	r0, #1
   1c4dc:	add	r0, r0, r5, lsr #1
   1c4e0:	adds	r5, r5, r0
   1c4e4:	bcc	1c504 <__assert_fail@plt+0xaad8>
   1c4e8:	b	1c538 <__assert_fail@plt+0xab0c>
   1c4ec:	cmp	r5, #0
   1c4f0:	bne	1c504 <__assert_fail@plt+0xaad8>
   1c4f4:	mov	r0, #64	; 0x40
   1c4f8:	cmp	r6, #64	; 0x40
   1c4fc:	udiv	r5, r0, r6
   1c500:	addhi	r5, r5, #1
   1c504:	mov	r0, r7
   1c508:	mov	r1, r5
   1c50c:	mov	r2, r6
   1c510:	bl	1dd0c <__assert_fail@plt+0xc2e0>
   1c514:	cmp	r0, #0
   1c518:	bne	1c530 <__assert_fail@plt+0xab04>
   1c51c:	cmp	r7, #0
   1c520:	beq	1c538 <__assert_fail@plt+0xab0c>
   1c524:	cmp	r6, #0
   1c528:	cmpne	r5, #0
   1c52c:	bne	1c538 <__assert_fail@plt+0xab0c>
   1c530:	str	r5, [r4]
   1c534:	pop	{r4, r5, r6, r7, fp, pc}
   1c538:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c53c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c540:	add	fp, sp, #24
   1c544:	mov	r8, r1
   1c548:	ldr	r1, [r1]
   1c54c:	mov	r5, r0
   1c550:	add	r0, r1, r1, asr #1
   1c554:	cmp	r0, r1
   1c558:	mvnvs	r0, #-2147483648	; 0x80000000
   1c55c:	cmp	r0, r3
   1c560:	mov	r7, r0
   1c564:	movgt	r7, r3
   1c568:	cmn	r3, #1
   1c56c:	movle	r7, r0
   1c570:	ldr	r0, [fp, #8]
   1c574:	cmn	r0, #1
   1c578:	ble	1c5a0 <__assert_fail@plt+0xab74>
   1c57c:	cmp	r0, #0
   1c580:	beq	1c5f4 <__assert_fail@plt+0xabc8>
   1c584:	cmn	r7, #1
   1c588:	ble	1c5c8 <__assert_fail@plt+0xab9c>
   1c58c:	mvn	r4, #-2147483648	; 0x80000000
   1c590:	udiv	r6, r4, r0
   1c594:	cmp	r6, r7
   1c598:	bge	1c5f4 <__assert_fail@plt+0xabc8>
   1c59c:	b	1c604 <__assert_fail@plt+0xabd8>
   1c5a0:	cmn	r7, #1
   1c5a4:	ble	1c5e4 <__assert_fail@plt+0xabb8>
   1c5a8:	cmn	r0, #1
   1c5ac:	beq	1c5f4 <__assert_fail@plt+0xabc8>
   1c5b0:	mov	r6, #-2147483648	; 0x80000000
   1c5b4:	mvn	r4, #-2147483648	; 0x80000000
   1c5b8:	sdiv	r6, r6, r0
   1c5bc:	cmp	r6, r7
   1c5c0:	bge	1c5f4 <__assert_fail@plt+0xabc8>
   1c5c4:	b	1c604 <__assert_fail@plt+0xabd8>
   1c5c8:	beq	1c5f4 <__assert_fail@plt+0xabc8>
   1c5cc:	mov	r6, #-2147483648	; 0x80000000
   1c5d0:	mvn	r4, #-2147483648	; 0x80000000
   1c5d4:	sdiv	r6, r6, r7
   1c5d8:	cmp	r6, r0
   1c5dc:	bge	1c5f4 <__assert_fail@plt+0xabc8>
   1c5e0:	b	1c604 <__assert_fail@plt+0xabd8>
   1c5e4:	mvn	r4, #-2147483648	; 0x80000000
   1c5e8:	sdiv	r6, r4, r0
   1c5ec:	cmp	r7, r6
   1c5f0:	blt	1c604 <__assert_fail@plt+0xabd8>
   1c5f4:	mul	r6, r7, r0
   1c5f8:	mov	r4, #64	; 0x40
   1c5fc:	cmp	r6, #63	; 0x3f
   1c600:	bgt	1c60c <__assert_fail@plt+0xabe0>
   1c604:	sdiv	r7, r4, r0
   1c608:	mul	r6, r7, r0
   1c60c:	cmp	r5, #0
   1c610:	moveq	r4, #0
   1c614:	streq	r4, [r8]
   1c618:	sub	r4, r7, r1
   1c61c:	cmp	r4, r2
   1c620:	bge	1c6cc <__assert_fail@plt+0xaca0>
   1c624:	add	r7, r1, r2
   1c628:	mov	r6, #0
   1c62c:	mov	r2, #0
   1c630:	cmp	r7, r3
   1c634:	movwgt	r6, #1
   1c638:	cmn	r3, #1
   1c63c:	movwgt	r2, #1
   1c640:	cmp	r7, r1
   1c644:	bvs	1c700 <__assert_fail@plt+0xacd4>
   1c648:	ands	r1, r2, r6
   1c64c:	bne	1c700 <__assert_fail@plt+0xacd4>
   1c650:	cmn	r0, #1
   1c654:	ble	1c67c <__assert_fail@plt+0xac50>
   1c658:	cmp	r0, #0
   1c65c:	beq	1c6c8 <__assert_fail@plt+0xac9c>
   1c660:	cmn	r7, #1
   1c664:	ble	1c6a0 <__assert_fail@plt+0xac74>
   1c668:	mvn	r1, #-2147483648	; 0x80000000
   1c66c:	udiv	r1, r1, r0
   1c670:	cmp	r1, r7
   1c674:	bge	1c6c8 <__assert_fail@plt+0xac9c>
   1c678:	b	1c700 <__assert_fail@plt+0xacd4>
   1c67c:	cmn	r7, #1
   1c680:	ble	1c6b8 <__assert_fail@plt+0xac8c>
   1c684:	cmn	r0, #1
   1c688:	beq	1c6c8 <__assert_fail@plt+0xac9c>
   1c68c:	mov	r1, #-2147483648	; 0x80000000
   1c690:	sdiv	r1, r1, r0
   1c694:	cmp	r1, r7
   1c698:	bge	1c6c8 <__assert_fail@plt+0xac9c>
   1c69c:	b	1c700 <__assert_fail@plt+0xacd4>
   1c6a0:	beq	1c6c8 <__assert_fail@plt+0xac9c>
   1c6a4:	mov	r1, #-2147483648	; 0x80000000
   1c6a8:	sdiv	r1, r1, r7
   1c6ac:	cmp	r1, r0
   1c6b0:	bge	1c6c8 <__assert_fail@plt+0xac9c>
   1c6b4:	b	1c700 <__assert_fail@plt+0xacd4>
   1c6b8:	mvn	r1, #-2147483648	; 0x80000000
   1c6bc:	sdiv	r1, r1, r0
   1c6c0:	cmp	r7, r1
   1c6c4:	blt	1c700 <__assert_fail@plt+0xacd4>
   1c6c8:	mul	r6, r7, r0
   1c6cc:	mov	r0, r5
   1c6d0:	mov	r1, r6
   1c6d4:	bl	1c9bc <__assert_fail@plt+0xaf90>
   1c6d8:	cmp	r6, #0
   1c6dc:	movwne	r6, #1
   1c6e0:	cmp	r0, #0
   1c6e4:	bne	1c6f8 <__assert_fail@plt+0xaccc>
   1c6e8:	clz	r1, r5
   1c6ec:	lsr	r1, r1, #5
   1c6f0:	orrs	r1, r1, r6
   1c6f4:	bne	1c700 <__assert_fail@plt+0xacd4>
   1c6f8:	str	r7, [r8]
   1c6fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c700:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c704:	push	{fp, lr}
   1c708:	mov	fp, sp
   1c70c:	mov	r1, #1
   1c710:	bl	1c938 <__assert_fail@plt+0xaf0c>
   1c714:	cmp	r0, #0
   1c718:	popne	{fp, pc}
   1c71c:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c720:	push	{fp, lr}
   1c724:	mov	fp, sp
   1c728:	bl	1c938 <__assert_fail@plt+0xaf0c>
   1c72c:	cmp	r0, #0
   1c730:	popne	{fp, pc}
   1c734:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c738:	push	{fp, lr}
   1c73c:	mov	fp, sp
   1c740:	mov	r1, #1
   1c744:	bl	1c938 <__assert_fail@plt+0xaf0c>
   1c748:	cmp	r0, #0
   1c74c:	popne	{fp, pc}
   1c750:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c754:	push	{fp, lr}
   1c758:	mov	fp, sp
   1c75c:	bl	1c938 <__assert_fail@plt+0xaf0c>
   1c760:	cmp	r0, #0
   1c764:	popne	{fp, pc}
   1c768:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c76c:	push	{r4, r5, fp, lr}
   1c770:	add	fp, sp, #8
   1c774:	mov	r5, r0
   1c778:	mov	r0, r1
   1c77c:	mov	r4, r1
   1c780:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c784:	cmp	r0, #0
   1c788:	beq	1c79c <__assert_fail@plt+0xad70>
   1c78c:	mov	r1, r5
   1c790:	mov	r2, r4
   1c794:	pop	{r4, r5, fp, lr}
   1c798:	b	116d8 <memcpy@plt>
   1c79c:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c7a0:	push	{r4, r5, fp, lr}
   1c7a4:	add	fp, sp, #8
   1c7a8:	mov	r5, r0
   1c7ac:	mov	r0, r1
   1c7b0:	mov	r4, r1
   1c7b4:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c7b8:	cmp	r0, #0
   1c7bc:	beq	1c7d0 <__assert_fail@plt+0xada4>
   1c7c0:	mov	r1, r5
   1c7c4:	mov	r2, r4
   1c7c8:	pop	{r4, r5, fp, lr}
   1c7cc:	b	116d8 <memcpy@plt>
   1c7d0:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c7d4:	push	{r4, r5, fp, lr}
   1c7d8:	add	fp, sp, #8
   1c7dc:	mov	r5, r0
   1c7e0:	add	r0, r1, #1
   1c7e4:	mov	r4, r1
   1c7e8:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c7ec:	cmp	r0, #0
   1c7f0:	beq	1c80c <__assert_fail@plt+0xade0>
   1c7f4:	mov	r1, #0
   1c7f8:	mov	r2, r4
   1c7fc:	strb	r1, [r0, r4]
   1c800:	mov	r1, r5
   1c804:	pop	{r4, r5, fp, lr}
   1c808:	b	116d8 <memcpy@plt>
   1c80c:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c810:	push	{r4, r5, fp, lr}
   1c814:	add	fp, sp, #8
   1c818:	mov	r4, r0
   1c81c:	bl	11888 <strlen@plt>
   1c820:	add	r5, r0, #1
   1c824:	mov	r0, r5
   1c828:	bl	1c98c <__assert_fail@plt+0xaf60>
   1c82c:	cmp	r0, #0
   1c830:	beq	1c844 <__assert_fail@plt+0xae18>
   1c834:	mov	r1, r4
   1c838:	mov	r2, r5
   1c83c:	pop	{r4, r5, fp, lr}
   1c840:	b	116d8 <memcpy@plt>
   1c844:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c848:	push	{fp, lr}
   1c84c:	mov	fp, sp
   1c850:	movw	r0, #12672	; 0x3180
   1c854:	movw	r1, #9084	; 0x237c
   1c858:	mov	r2, #5
   1c85c:	movt	r0, #3
   1c860:	movt	r1, #2
   1c864:	ldr	r4, [r0]
   1c868:	mov	r0, #0
   1c86c:	bl	116fc <dcgettext@plt>
   1c870:	movw	r2, #8017	; 0x1f51
   1c874:	mov	r3, r0
   1c878:	mov	r0, r4
   1c87c:	mov	r1, #0
   1c880:	movt	r2, #2
   1c884:	bl	117ec <error@plt>
   1c888:	bl	11a20 <abort@plt>
   1c88c:	push	{r4, sl, fp, lr}
   1c890:	add	fp, sp, #8
   1c894:	sub	sp, sp, #8
   1c898:	ldr	r4, [fp, #8]
   1c89c:	str	r4, [sp]
   1c8a0:	bl	1dd48 <__assert_fail@plt+0xc31c>
   1c8a4:	mov	r4, r0
   1c8a8:	cmn	r0, #1
   1c8ac:	bgt	1c8c0 <__assert_fail@plt+0xae94>
   1c8b0:	bl	118b8 <__errno_location@plt>
   1c8b4:	ldr	r0, [r0]
   1c8b8:	cmp	r0, #12
   1c8bc:	beq	1c8cc <__assert_fail@plt+0xaea0>
   1c8c0:	mov	r0, r4
   1c8c4:	sub	sp, fp, #8
   1c8c8:	pop	{r4, sl, fp, pc}
   1c8cc:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c8d0:	push	{r4, sl, fp, lr}
   1c8d4:	add	fp, sp, #8
   1c8d8:	bl	1e000 <__assert_fail@plt+0xc5d4>
   1c8dc:	mov	r4, r0
   1c8e0:	cmp	r0, #0
   1c8e4:	bne	1c8f8 <__assert_fail@plt+0xaecc>
   1c8e8:	bl	118b8 <__errno_location@plt>
   1c8ec:	ldr	r0, [r0]
   1c8f0:	cmp	r0, #12
   1c8f4:	beq	1c900 <__assert_fail@plt+0xaed4>
   1c8f8:	mov	r0, r4
   1c8fc:	pop	{r4, sl, fp, pc}
   1c900:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c904:	push	{r4, sl, fp, lr}
   1c908:	add	fp, sp, #8
   1c90c:	bl	1e248 <__assert_fail@plt+0xc81c>
   1c910:	mov	r4, r0
   1c914:	cmp	r0, #0
   1c918:	bne	1c92c <__assert_fail@plt+0xaf00>
   1c91c:	bl	118b8 <__errno_location@plt>
   1c920:	ldr	r0, [r0]
   1c924:	cmp	r0, #12
   1c928:	beq	1c934 <__assert_fail@plt+0xaf08>
   1c92c:	mov	r0, r4
   1c930:	pop	{r4, sl, fp, pc}
   1c934:	bl	1c848 <__assert_fail@plt+0xae1c>
   1c938:	clz	r2, r1
   1c93c:	clz	r3, r0
   1c940:	lsr	r2, r2, #5
   1c944:	lsr	r3, r3, #5
   1c948:	orrs	r2, r3, r2
   1c94c:	movwne	r1, #1
   1c950:	movwne	r0, #1
   1c954:	cmp	r1, #0
   1c958:	beq	1c988 <__assert_fail@plt+0xaf5c>
   1c95c:	mvn	r2, #-2147483648	; 0x80000000
   1c960:	udiv	r2, r2, r1
   1c964:	cmp	r2, r0
   1c968:	bcs	1c988 <__assert_fail@plt+0xaf5c>
   1c96c:	push	{fp, lr}
   1c970:	mov	fp, sp
   1c974:	bl	118b8 <__errno_location@plt>
   1c978:	mov	r1, #12
   1c97c:	str	r1, [r0]
   1c980:	mov	r0, #0
   1c984:	pop	{fp, pc}
   1c988:	b	11624 <calloc@plt>
   1c98c:	cmp	r0, #0
   1c990:	movweq	r0, #1
   1c994:	cmn	r0, #1
   1c998:	ble	1c9a0 <__assert_fail@plt+0xaf74>
   1c99c:	b	117f8 <malloc@plt>
   1c9a0:	push	{fp, lr}
   1c9a4:	mov	fp, sp
   1c9a8:	bl	118b8 <__errno_location@plt>
   1c9ac:	mov	r1, #12
   1c9b0:	str	r1, [r0]
   1c9b4:	mov	r0, #0
   1c9b8:	pop	{fp, pc}
   1c9bc:	push	{fp, lr}
   1c9c0:	mov	fp, sp
   1c9c4:	cmp	r0, #0
   1c9c8:	beq	1c9e4 <__assert_fail@plt+0xafb8>
   1c9cc:	cmp	r1, #0
   1c9d0:	beq	1c9f0 <__assert_fail@plt+0xafc4>
   1c9d4:	cmn	r1, #1
   1c9d8:	ble	1c9fc <__assert_fail@plt+0xafd0>
   1c9dc:	pop	{fp, lr}
   1c9e0:	b	11744 <realloc@plt>
   1c9e4:	mov	r0, r1
   1c9e8:	pop	{fp, lr}
   1c9ec:	b	1c98c <__assert_fail@plt+0xaf60>
   1c9f0:	bl	18f5c <__assert_fail@plt+0x7530>
   1c9f4:	mov	r0, #0
   1c9f8:	pop	{fp, pc}
   1c9fc:	bl	118b8 <__errno_location@plt>
   1ca00:	mov	r1, #12
   1ca04:	str	r1, [r0]
   1ca08:	mov	r0, #0
   1ca0c:	pop	{fp, pc}
   1ca10:	cmp	r0, r1
   1ca14:	moveq	r0, #0
   1ca18:	bxeq	lr
   1ca1c:	ldrb	r3, [r1]
   1ca20:	ldrb	ip, [r0]
   1ca24:	sub	r2, r3, #65	; 0x41
   1ca28:	cmp	r2, #26
   1ca2c:	sub	r2, ip, #65	; 0x41
   1ca30:	addcc	r3, r3, #32
   1ca34:	cmp	r2, #26
   1ca38:	addcc	ip, ip, #32
   1ca3c:	uxtb	r3, r3
   1ca40:	uxtb	r2, ip
   1ca44:	cmp	r2, #0
   1ca48:	beq	1ca5c <__assert_fail@plt+0xb030>
   1ca4c:	add	r1, r1, #1
   1ca50:	add	r0, r0, #1
   1ca54:	cmp	r2, r3
   1ca58:	beq	1ca1c <__assert_fail@plt+0xaff0>
   1ca5c:	sub	r0, r2, r3
   1ca60:	bx	lr
   1ca64:	push	{r4, r5, r6, sl, fp, lr}
   1ca68:	add	fp, sp, #16
   1ca6c:	mov	r4, r0
   1ca70:	bl	117d4 <__fpending@plt>
   1ca74:	ldr	r6, [r4]
   1ca78:	mov	r5, r0
   1ca7c:	mov	r0, r4
   1ca80:	bl	1cae8 <__assert_fail@plt+0xb0bc>
   1ca84:	tst	r6, #32
   1ca88:	bne	1cac0 <__assert_fail@plt+0xb094>
   1ca8c:	cmp	r0, #0
   1ca90:	mov	r4, r0
   1ca94:	mvnne	r4, #0
   1ca98:	cmp	r5, #0
   1ca9c:	bne	1cacc <__assert_fail@plt+0xb0a0>
   1caa0:	cmp	r0, #0
   1caa4:	beq	1cacc <__assert_fail@plt+0xb0a0>
   1caa8:	bl	118b8 <__errno_location@plt>
   1caac:	ldr	r0, [r0]
   1cab0:	subs	r4, r0, #9
   1cab4:	mvnne	r4, #0
   1cab8:	mov	r0, r4
   1cabc:	pop	{r4, r5, r6, sl, fp, pc}
   1cac0:	mvn	r4, #0
   1cac4:	cmp	r0, #0
   1cac8:	beq	1cad4 <__assert_fail@plt+0xb0a8>
   1cacc:	mov	r0, r4
   1cad0:	pop	{r4, r5, r6, sl, fp, pc}
   1cad4:	bl	118b8 <__errno_location@plt>
   1cad8:	mov	r1, #0
   1cadc:	str	r1, [r0]
   1cae0:	mov	r0, r4
   1cae4:	pop	{r4, r5, r6, sl, fp, pc}
   1cae8:	push	{r4, r5, r6, sl, fp, lr}
   1caec:	add	fp, sp, #16
   1caf0:	sub	sp, sp, #8
   1caf4:	mov	r4, r0
   1caf8:	bl	11918 <fileno@plt>
   1cafc:	cmn	r0, #1
   1cb00:	ble	1cb74 <__assert_fail@plt+0xb148>
   1cb04:	mov	r0, r4
   1cb08:	bl	1181c <__freading@plt>
   1cb0c:	cmp	r0, #0
   1cb10:	beq	1cb3c <__assert_fail@plt+0xb110>
   1cb14:	mov	r0, r4
   1cb18:	bl	11918 <fileno@plt>
   1cb1c:	mov	r1, #1
   1cb20:	mov	r2, #0
   1cb24:	mov	r3, #0
   1cb28:	str	r1, [sp]
   1cb2c:	bl	117b0 <lseek64@plt>
   1cb30:	and	r0, r0, r1
   1cb34:	cmn	r0, #1
   1cb38:	beq	1cb74 <__assert_fail@plt+0xb148>
   1cb3c:	mov	r0, r4
   1cb40:	bl	1cb84 <__assert_fail@plt+0xb158>
   1cb44:	cmp	r0, #0
   1cb48:	beq	1cb74 <__assert_fail@plt+0xb148>
   1cb4c:	bl	118b8 <__errno_location@plt>
   1cb50:	ldr	r6, [r0]
   1cb54:	mov	r5, r0
   1cb58:	mov	r0, r4
   1cb5c:	bl	1193c <fclose@plt>
   1cb60:	cmp	r6, #0
   1cb64:	strne	r6, [r5]
   1cb68:	mvnne	r0, #0
   1cb6c:	sub	sp, fp, #16
   1cb70:	pop	{r4, r5, r6, sl, fp, pc}
   1cb74:	mov	r0, r4
   1cb78:	sub	sp, fp, #16
   1cb7c:	pop	{r4, r5, r6, sl, fp, lr}
   1cb80:	b	1193c <fclose@plt>
   1cb84:	push	{r4, sl, fp, lr}
   1cb88:	add	fp, sp, #8
   1cb8c:	sub	sp, sp, #8
   1cb90:	mov	r4, r0
   1cb94:	cmp	r0, #0
   1cb98:	beq	1cbd0 <__assert_fail@plt+0xb1a4>
   1cb9c:	mov	r0, r4
   1cba0:	bl	1181c <__freading@plt>
   1cba4:	cmp	r0, #0
   1cba8:	beq	1cbd0 <__assert_fail@plt+0xb1a4>
   1cbac:	ldrb	r0, [r4, #1]
   1cbb0:	tst	r0, #1
   1cbb4:	beq	1cbd0 <__assert_fail@plt+0xb1a4>
   1cbb8:	mov	r0, #1
   1cbbc:	mov	r2, #0
   1cbc0:	mov	r3, #0
   1cbc4:	str	r0, [sp]
   1cbc8:	mov	r0, r4
   1cbcc:	bl	1cbe0 <__assert_fail@plt+0xb1b4>
   1cbd0:	mov	r0, r4
   1cbd4:	sub	sp, fp, #8
   1cbd8:	pop	{r4, sl, fp, lr}
   1cbdc:	b	11678 <fflush@plt>
   1cbe0:	push	{r4, r5, r6, r7, fp, lr}
   1cbe4:	add	fp, sp, #16
   1cbe8:	sub	sp, sp, #8
   1cbec:	mov	r4, r0
   1cbf0:	ldr	r0, [r0, #4]
   1cbf4:	mov	r5, r3
   1cbf8:	mov	r6, r2
   1cbfc:	ldr	r1, [r4, #8]
   1cc00:	cmp	r1, r0
   1cc04:	bne	1cc20 <__assert_fail@plt+0xb1f4>
   1cc08:	ldrd	r0, [r4, #16]
   1cc0c:	cmp	r1, r0
   1cc10:	bne	1cc20 <__assert_fail@plt+0xb1f4>
   1cc14:	ldr	r0, [r4, #36]	; 0x24
   1cc18:	cmp	r0, #0
   1cc1c:	beq	1cc38 <__assert_fail@plt+0xb20c>
   1cc20:	mov	r0, r4
   1cc24:	mov	r2, r6
   1cc28:	mov	r3, r5
   1cc2c:	sub	sp, fp, #16
   1cc30:	pop	{r4, r5, r6, r7, fp, lr}
   1cc34:	b	11954 <fseeko64@plt>
   1cc38:	ldr	r7, [fp, #8]
   1cc3c:	mov	r0, r4
   1cc40:	bl	11918 <fileno@plt>
   1cc44:	mov	r2, r6
   1cc48:	mov	r3, r5
   1cc4c:	str	r7, [sp]
   1cc50:	bl	117b0 <lseek64@plt>
   1cc54:	and	r2, r0, r1
   1cc58:	cmn	r2, #1
   1cc5c:	beq	1cc7c <__assert_fail@plt+0xb250>
   1cc60:	strd	r0, [r4, #80]	; 0x50
   1cc64:	ldr	r0, [r4]
   1cc68:	bic	r0, r0, #16
   1cc6c:	str	r0, [r4]
   1cc70:	mov	r0, #0
   1cc74:	sub	sp, fp, #16
   1cc78:	pop	{r4, r5, r6, r7, fp, pc}
   1cc7c:	mvn	r0, #0
   1cc80:	sub	sp, fp, #16
   1cc84:	pop	{r4, r5, r6, r7, fp, pc}
   1cc88:	push	{fp, lr}
   1cc8c:	mov	fp, sp
   1cc90:	mov	r0, #14
   1cc94:	bl	119b4 <nl_langinfo@plt>
   1cc98:	movw	r1, #59705	; 0xe939
   1cc9c:	cmp	r0, #0
   1cca0:	movt	r1, #1
   1cca4:	movne	r1, r0
   1cca8:	movw	r0, #9101	; 0x238d
   1ccac:	ldrb	r2, [r1]
   1ccb0:	movt	r0, #2
   1ccb4:	cmp	r2, #0
   1ccb8:	movne	r0, r1
   1ccbc:	pop	{fp, pc}
   1ccc0:	push	{r4, r5, r6, r7, fp, lr}
   1ccc4:	add	fp, sp, #16
   1ccc8:	mov	r4, r0
   1cccc:	ldrb	r0, [r0, #16]
   1ccd0:	cmp	r0, #0
   1ccd4:	popne	{r4, r5, r6, r7, fp, pc}
   1ccd8:	ldrb	r0, [r4, #4]
   1ccdc:	ldr	r5, [r4, #20]
   1cce0:	cmp	r0, #0
   1cce4:	beq	1cd40 <__assert_fail@plt+0xb314>
   1cce8:	ldr	r0, [r4]
   1ccec:	add	r6, r4, #8
   1ccf0:	add	r7, r4, #32
   1ccf4:	mov	r1, r5
   1ccf8:	mov	r3, r6
   1ccfc:	sub	r2, r0, r5
   1cd00:	mov	r0, r7
   1cd04:	bl	1cf24 <__assert_fail@plt+0xb4f8>
   1cd08:	cmn	r0, #2
   1cd0c:	str	r0, [r4, #24]
   1cd10:	beq	1cdcc <__assert_fail@plt+0xb3a0>
   1cd14:	cmp	r0, #0
   1cd18:	beq	1cd80 <__assert_fail@plt+0xb354>
   1cd1c:	cmn	r0, #1
   1cd20:	bne	1cda4 <__assert_fail@plt+0xb378>
   1cd24:	mov	r0, #0
   1cd28:	strb	r0, [r4, #28]
   1cd2c:	mov	r0, #1
   1cd30:	str	r0, [r4, #24]
   1cd34:	mov	r0, #1
   1cd38:	strb	r0, [r4, #16]
   1cd3c:	pop	{r4, r5, r6, r7, fp, pc}
   1cd40:	ldrb	r0, [r5]
   1cd44:	movw	r2, #9304	; 0x2458
   1cd48:	movt	r2, #2
   1cd4c:	ubfx	r1, r0, #5, #3
   1cd50:	ldr	r1, [r2, r1, lsl #2]
   1cd54:	and	r2, r0, #31
   1cd58:	mov	r0, #1
   1cd5c:	tst	r1, r0, lsl r2
   1cd60:	beq	1cdf0 <__assert_fail@plt+0xb3c4>
   1cd64:	str	r0, [r4, #24]
   1cd68:	ldrb	r1, [r5]
   1cd6c:	strb	r0, [r4, #28]
   1cd70:	str	r1, [r4, #32]
   1cd74:	mov	r0, #1
   1cd78:	strb	r0, [r4, #16]
   1cd7c:	pop	{r4, r5, r6, r7, fp, pc}
   1cd80:	mov	r0, #1
   1cd84:	str	r0, [r4, #24]
   1cd88:	ldr	r0, [r4, #20]
   1cd8c:	ldrb	r0, [r0]
   1cd90:	cmp	r0, #0
   1cd94:	bne	1ce0c <__assert_fail@plt+0xb3e0>
   1cd98:	ldr	r0, [r7]
   1cd9c:	cmp	r0, #0
   1cda0:	bne	1ce2c <__assert_fail@plt+0xb400>
   1cda4:	mov	r0, #1
   1cda8:	strb	r0, [r4, #28]
   1cdac:	mov	r0, r6
   1cdb0:	bl	116f0 <mbsinit@plt>
   1cdb4:	cmp	r0, #0
   1cdb8:	movne	r0, #0
   1cdbc:	strbne	r0, [r4, #4]
   1cdc0:	mov	r0, #1
   1cdc4:	strb	r0, [r4, #16]
   1cdc8:	pop	{r4, r5, r6, r7, fp, pc}
   1cdcc:	mov	r0, #0
   1cdd0:	strb	r0, [r4, #28]
   1cdd4:	ldr	r0, [r4]
   1cdd8:	ldr	r1, [r4, #20]
   1cddc:	sub	r0, r0, r1
   1cde0:	str	r0, [r4, #24]
   1cde4:	mov	r0, #1
   1cde8:	strb	r0, [r4, #16]
   1cdec:	pop	{r4, r5, r6, r7, fp, pc}
   1cdf0:	add	r0, r4, #8
   1cdf4:	bl	116f0 <mbsinit@plt>
   1cdf8:	cmp	r0, #0
   1cdfc:	beq	1ce4c <__assert_fail@plt+0xb420>
   1ce00:	mov	r0, #1
   1ce04:	strb	r0, [r4, #4]
   1ce08:	b	1cce8 <__assert_fail@plt+0xb2bc>
   1ce0c:	movw	r0, #9191	; 0x23e7
   1ce10:	movw	r1, #9130	; 0x23aa
   1ce14:	movw	r3, #9145	; 0x23b9
   1ce18:	mov	r2, #162	; 0xa2
   1ce1c:	movt	r0, #2
   1ce20:	movt	r1, #2
   1ce24:	movt	r3, #2
   1ce28:	bl	11a2c <__assert_fail@plt>
   1ce2c:	movw	r0, #9214	; 0x23fe
   1ce30:	movw	r1, #9130	; 0x23aa
   1ce34:	movw	r3, #9145	; 0x23b9
   1ce38:	mov	r2, #163	; 0xa3
   1ce3c:	movt	r0, #2
   1ce40:	movt	r1, #2
   1ce44:	movt	r3, #2
   1ce48:	bl	11a2c <__assert_fail@plt>
   1ce4c:	movw	r0, #9107	; 0x2393
   1ce50:	movw	r1, #9130	; 0x23aa
   1ce54:	movw	r3, #9145	; 0x23b9
   1ce58:	mov	r2, #135	; 0x87
   1ce5c:	movt	r0, #2
   1ce60:	movt	r1, #2
   1ce64:	movt	r3, #2
   1ce68:	bl	11a2c <__assert_fail@plt>
   1ce6c:	ldr	r3, [r0, #20]
   1ce70:	ldr	r2, [r0]
   1ce74:	add	r3, r3, r1
   1ce78:	add	r1, r2, r1
   1ce7c:	str	r3, [r0, #20]
   1ce80:	str	r1, [r0]
   1ce84:	bx	lr
   1ce88:	push	{r4, r5, r6, sl, fp, lr}
   1ce8c:	add	fp, sp, #16
   1ce90:	mov	r4, r0
   1ce94:	ldr	r0, [r1]
   1ce98:	mov	r5, r1
   1ce9c:	str	r0, [r4]
   1cea0:	add	r0, r4, #8
   1cea4:	ldrb	r1, [r1, #4]
   1cea8:	cmp	r1, #0
   1ceac:	strb	r1, [r4, #4]
   1ceb0:	beq	1cec4 <__assert_fail@plt+0xb498>
   1ceb4:	ldr	r1, [r5, #8]
   1ceb8:	ldr	r2, [r5, #12]
   1cebc:	stm	r0, {r1, r2}
   1cec0:	b	1ced0 <__assert_fail@plt+0xb4a4>
   1cec4:	mov	r1, #0
   1cec8:	str	r1, [r0]
   1cecc:	str	r1, [r0, #4]
   1ced0:	ldrb	r0, [r5, #16]
   1ced4:	strb	r0, [r4, #16]
   1ced8:	add	r0, r5, #36	; 0x24
   1cedc:	ldr	r1, [r5, #20]
   1cee0:	cmp	r1, r0
   1cee4:	beq	1cef0 <__assert_fail@plt+0xb4c4>
   1cee8:	mov	r6, r1
   1ceec:	b	1cf00 <__assert_fail@plt+0xb4d4>
   1cef0:	ldr	r2, [r5, #24]
   1cef4:	add	r6, r4, #36	; 0x24
   1cef8:	mov	r0, r6
   1cefc:	bl	116d8 <memcpy@plt>
   1cf00:	str	r6, [r4, #20]
   1cf04:	ldr	r0, [r5, #24]
   1cf08:	str	r0, [r4, #24]
   1cf0c:	ldrb	r0, [r5, #28]
   1cf10:	strb	r0, [r4, #28]
   1cf14:	cmp	r0, #0
   1cf18:	ldrne	r0, [r5, #32]
   1cf1c:	strne	r0, [r4, #32]
   1cf20:	pop	{r4, r5, r6, sl, fp, pc}
   1cf24:	push	{r4, r5, r6, r7, fp, lr}
   1cf28:	add	fp, sp, #16
   1cf2c:	sub	sp, sp, #8
   1cf30:	cmp	r0, #0
   1cf34:	add	r5, sp, #4
   1cf38:	mov	r7, r2
   1cf3c:	mov	r4, r1
   1cf40:	movne	r5, r0
   1cf44:	mov	r0, r5
   1cf48:	bl	117e0 <mbrtowc@plt>
   1cf4c:	mov	r6, r0
   1cf50:	cmp	r7, #0
   1cf54:	beq	1cf7c <__assert_fail@plt+0xb550>
   1cf58:	cmn	r6, #2
   1cf5c:	bcc	1cf7c <__assert_fail@plt+0xb550>
   1cf60:	mov	r0, #0
   1cf64:	bl	1e35c <__assert_fail@plt+0xc930>
   1cf68:	cmp	r0, #0
   1cf6c:	bne	1cf7c <__assert_fail@plt+0xb550>
   1cf70:	ldrb	r0, [r4]
   1cf74:	mov	r6, #1
   1cf78:	str	r0, [r5]
   1cf7c:	mov	r0, r6
   1cf80:	sub	sp, fp, #16
   1cf84:	pop	{r4, r5, r6, r7, fp, pc}
   1cf88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf8c:	add	fp, sp, #28
   1cf90:	sub	sp, sp, #308	; 0x134
   1cf94:	mov	r6, r1
   1cf98:	mov	sl, r0
   1cf9c:	bl	117c8 <__ctype_get_mb_cur_max@plt>
   1cfa0:	cmp	r0, #2
   1cfa4:	bcc	1d358 <__assert_fail@plt+0xb92c>
   1cfa8:	mov	r4, #0
   1cfac:	sub	r0, fp, #88	; 0x58
   1cfb0:	str	r4, [fp, #-80]	; 0xffffffb0
   1cfb4:	str	r4, [fp, #-84]	; 0xffffffac
   1cfb8:	strb	r4, [fp, #-76]	; 0xffffffb4
   1cfbc:	strb	r4, [fp, #-88]	; 0xffffffa8
   1cfc0:	str	r6, [fp, #-72]	; 0xffffffb8
   1cfc4:	bl	1dabc <__assert_fail@plt+0xc090>
   1cfc8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1cfcc:	cmp	r0, #0
   1cfd0:	beq	1cfe0 <__assert_fail@plt+0xb5b4>
   1cfd4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1cfd8:	cmp	r0, #0
   1cfdc:	beq	1d480 <__assert_fail@plt+0xba54>
   1cfe0:	add	r0, sp, #136	; 0x88
   1cfe4:	str	r4, [fp, #-136]	; 0xffffff78
   1cfe8:	str	r4, [fp, #-140]	; 0xffffff74
   1cfec:	str	r6, [fp, #-128]	; 0xffffff80
   1cff0:	strb	r4, [fp, #-132]	; 0xffffff7c
   1cff4:	str	r6, [sp, #16]
   1cff8:	strb	r4, [fp, #-144]	; 0xffffff70
   1cffc:	str	r4, [sp, #144]	; 0x90
   1d000:	str	r4, [sp, #140]	; 0x8c
   1d004:	str	sl, [sp, #152]	; 0x98
   1d008:	strb	r4, [sp, #148]	; 0x94
   1d00c:	strb	r4, [sp, #136]	; 0x88
   1d010:	bl	1dabc <__assert_fail@plt+0xc090>
   1d014:	ldrb	r0, [sp, #160]	; 0xa0
   1d018:	cmp	r0, #0
   1d01c:	beq	1d02c <__assert_fail@plt+0xb600>
   1d020:	ldr	r0, [sp, #164]	; 0xa4
   1d024:	cmp	r0, #0
   1d028:	beq	1d4a4 <__assert_fail@plt+0xba78>
   1d02c:	add	r0, sp, #24
   1d030:	mov	r8, #1
   1d034:	mov	r6, #0
   1d038:	sub	r5, fp, #144	; 0x90
   1d03c:	mov	r1, #0
   1d040:	mov	r7, #0
   1d044:	mov	r9, #0
   1d048:	add	r0, r0, #4
   1d04c:	str	r0, [sp, #12]
   1d050:	add	r0, sp, #136	; 0x88
   1d054:	add	r0, r0, #16
   1d058:	str	r0, [sp, #8]
   1d05c:	add	r0, r9, r9, lsl #2
   1d060:	mov	r4, r7
   1d064:	cmp	r7, r0
   1d068:	bcc	1d114 <__assert_fail@plt+0xb6e8>
   1d06c:	tst	r8, #1
   1d070:	beq	1d114 <__assert_fail@plt+0xb6e8>
   1d074:	cmp	r9, #10
   1d078:	bcc	1d114 <__assert_fail@plt+0xb6e8>
   1d07c:	subs	r0, r4, r1
   1d080:	beq	1d0c8 <__assert_fail@plt+0xb69c>
   1d084:	sub	r7, r1, r4
   1d088:	b	1d0a8 <__assert_fail@plt+0xb67c>
   1d08c:	strb	r6, [fp, #-132]	; 0xffffff7c
   1d090:	adds	r7, r7, #1
   1d094:	ldr	r0, [fp, #-128]	; 0xffffff80
   1d098:	ldr	r1, [fp, #-124]	; 0xffffff84
   1d09c:	add	r0, r0, r1
   1d0a0:	str	r0, [fp, #-128]	; 0xffffff80
   1d0a4:	bcs	1d0c8 <__assert_fail@plt+0xb69c>
   1d0a8:	mov	r0, r5
   1d0ac:	bl	1dabc <__assert_fail@plt+0xc090>
   1d0b0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d08c <__assert_fail@plt+0xb660>
   1d0bc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d0c0:	cmp	r0, #0
   1d0c4:	bne	1d08c <__assert_fail@plt+0xb660>
   1d0c8:	mov	r0, r5
   1d0cc:	bl	1dabc <__assert_fail@plt+0xc090>
   1d0d0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1d0d4:	cmp	r0, #0
   1d0d8:	beq	1d110 <__assert_fail@plt+0xb6e4>
   1d0dc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d0e0:	mov	r1, r4
   1d0e4:	cmp	r0, #0
   1d0e8:	bne	1d114 <__assert_fail@plt+0xb6e8>
   1d0ec:	ldr	r1, [sp, #16]
   1d0f0:	mov	r0, sl
   1d0f4:	add	r2, sp, #80	; 0x50
   1d0f8:	bl	1d4e4 <__assert_fail@plt+0xbab8>
   1d0fc:	mov	r8, #0
   1d100:	cmp	r0, #0
   1d104:	mov	r1, r4
   1d108:	beq	1d114 <__assert_fail@plt+0xb6e8>
   1d10c:	b	1d4d0 <__assert_fail@plt+0xbaa4>
   1d110:	mov	r1, r4
   1d114:	ldrb	r0, [sp, #160]	; 0xa0
   1d118:	add	r7, r4, #1
   1d11c:	str	r1, [sp, #20]
   1d120:	cmp	r0, #0
   1d124:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1d128:	cmpne	r0, #0
   1d12c:	bne	1d158 <__assert_fail@plt+0xb72c>
   1d130:	ldr	r2, [sp, #156]	; 0x9c
   1d134:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1d138:	cmp	r2, r0
   1d13c:	bne	1d314 <__assert_fail@plt+0xb8e8>
   1d140:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1d144:	ldr	r0, [sp, #152]	; 0x98
   1d148:	bl	1187c <bcmp@plt>
   1d14c:	cmp	r0, #0
   1d150:	bne	1d314 <__assert_fail@plt+0xb8e8>
   1d154:	b	1d168 <__assert_fail@plt+0xb73c>
   1d158:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d15c:	ldr	r1, [sp, #164]	; 0xa4
   1d160:	cmp	r1, r0
   1d164:	bne	1d314 <__assert_fail@plt+0xb8e8>
   1d168:	add	r2, sp, #136	; 0x88
   1d16c:	mov	r1, #48	; 0x30
   1d170:	add	r3, sp, #80	; 0x50
   1d174:	str	r9, [sp]
   1d178:	str	r8, [sp, #4]
   1d17c:	mov	r0, r2
   1d180:	add	r2, r2, #32
   1d184:	vld1.64	{d16-d17}, [r0], r1
   1d188:	ldr	r1, [sp, #8]
   1d18c:	vld1.64	{d20-d21}, [r2]
   1d190:	vldr	d22, [r0]
   1d194:	add	r0, r3, #32
   1d198:	vld1.64	{d18-d19}, [r1]
   1d19c:	add	r1, r3, #16
   1d1a0:	vst1.64	{d20-d21}, [r0]
   1d1a4:	mov	r0, r3
   1d1a8:	vst1.64	{d18-d19}, [r1]
   1d1ac:	mov	r1, #12
   1d1b0:	vst1.64	{d16-d17}, [r0], r1
   1d1b4:	strb	r6, [r0]
   1d1b8:	ldr	r0, [sp, #16]
   1d1bc:	vstr	d22, [sp, #128]	; 0x80
   1d1c0:	ldr	r1, [sp, #100]	; 0x64
   1d1c4:	str	r0, [sp, #40]	; 0x28
   1d1c8:	ldr	r0, [sp, #96]	; 0x60
   1d1cc:	strb	r6, [sp, #24]
   1d1d0:	add	r0, r0, r1
   1d1d4:	str	r0, [sp, #96]	; 0x60
   1d1d8:	ldr	r0, [sp, #12]
   1d1dc:	str	r6, [r0]
   1d1e0:	str	r6, [r0, #4]
   1d1e4:	add	r0, sp, #24
   1d1e8:	strb	r6, [sp, #36]	; 0x24
   1d1ec:	bl	1dabc <__assert_fail@plt+0xc090>
   1d1f0:	ldrb	r0, [sp, #48]	; 0x30
   1d1f4:	cmp	r0, #0
   1d1f8:	beq	1d208 <__assert_fail@plt+0xb7dc>
   1d1fc:	ldr	r0, [sp, #52]	; 0x34
   1d200:	cmp	r0, #0
   1d204:	beq	1d4e0 <__assert_fail@plt+0xbab4>
   1d208:	strb	r6, [sp, #36]	; 0x24
   1d20c:	ldr	r0, [sp, #40]	; 0x28
   1d210:	ldr	r1, [sp, #44]	; 0x2c
   1d214:	add	r0, r0, r1
   1d218:	str	r0, [sp, #40]	; 0x28
   1d21c:	add	r0, sp, #24
   1d220:	bl	1dabc <__assert_fail@plt+0xc090>
   1d224:	ldrb	r0, [sp, #48]	; 0x30
   1d228:	cmp	r0, #0
   1d22c:	beq	1d23c <__assert_fail@plt+0xb810>
   1d230:	ldr	r0, [sp, #52]	; 0x34
   1d234:	cmp	r0, #0
   1d238:	beq	1d4b0 <__assert_fail@plt+0xba84>
   1d23c:	add	r7, r4, #2
   1d240:	add	r0, sp, #80	; 0x50
   1d244:	bl	1dabc <__assert_fail@plt+0xc090>
   1d248:	ldr	r0, [sp, #108]	; 0x6c
   1d24c:	ldrb	r1, [sp, #104]	; 0x68
   1d250:	cmp	r0, #0
   1d254:	bne	1d260 <__assert_fail@plt+0xb834>
   1d258:	cmp	r1, #0
   1d25c:	bne	1d490 <__assert_fail@plt+0xba64>
   1d260:	cmp	r1, #0
   1d264:	ldrbne	r1, [sp, #48]	; 0x30
   1d268:	cmpne	r1, #0
   1d26c:	bne	1d2a8 <__assert_fail@plt+0xb87c>
   1d270:	ldr	r4, [sp, #100]	; 0x64
   1d274:	ldr	r0, [sp, #44]	; 0x2c
   1d278:	cmp	r4, r0
   1d27c:	bne	1d308 <__assert_fail@plt+0xb8dc>
   1d280:	ldr	r8, [sp, #40]	; 0x28
   1d284:	ldr	r9, [sp, #96]	; 0x60
   1d288:	mov	r2, r4
   1d28c:	mov	r0, r9
   1d290:	mov	r1, r8
   1d294:	bl	1187c <bcmp@plt>
   1d298:	cmp	r0, #0
   1d29c:	mov	r0, r4
   1d2a0:	beq	1d2c4 <__assert_fail@plt+0xb898>
   1d2a4:	b	1d308 <__assert_fail@plt+0xb8dc>
   1d2a8:	ldr	r1, [sp, #52]	; 0x34
   1d2ac:	cmp	r0, r1
   1d2b0:	bne	1d308 <__assert_fail@plt+0xb8dc>
   1d2b4:	ldr	r8, [sp, #40]	; 0x28
   1d2b8:	ldr	r4, [sp, #44]	; 0x2c
   1d2bc:	ldr	r9, [sp, #96]	; 0x60
   1d2c0:	ldr	r0, [sp, #100]	; 0x64
   1d2c4:	mov	r1, #0
   1d2c8:	add	r0, r9, r0
   1d2cc:	strb	r1, [sp, #92]	; 0x5c
   1d2d0:	str	r0, [sp, #96]	; 0x60
   1d2d4:	add	r0, r8, r4
   1d2d8:	strb	r1, [sp, #36]	; 0x24
   1d2dc:	str	r0, [sp, #40]	; 0x28
   1d2e0:	add	r0, sp, #24
   1d2e4:	bl	1dabc <__assert_fail@plt+0xc090>
   1d2e8:	ldrb	r0, [sp, #48]	; 0x30
   1d2ec:	add	r7, r7, #1
   1d2f0:	cmp	r0, #0
   1d2f4:	beq	1d240 <__assert_fail@plt+0xb814>
   1d2f8:	ldr	r0, [sp, #52]	; 0x34
   1d2fc:	cmp	r0, #0
   1d300:	bne	1d240 <__assert_fail@plt+0xb814>
   1d304:	b	1d4b0 <__assert_fail@plt+0xba84>
   1d308:	ldr	r8, [sp, #4]
   1d30c:	ldr	r9, [sp]
   1d310:	mov	r6, #0
   1d314:	mov	r4, #0
   1d318:	add	r9, r9, #1
   1d31c:	strb	r4, [sp, #148]	; 0x94
   1d320:	ldr	r0, [sp, #152]	; 0x98
   1d324:	ldr	r1, [sp, #156]	; 0x9c
   1d328:	add	r0, r0, r1
   1d32c:	str	r0, [sp, #152]	; 0x98
   1d330:	add	r0, sp, #136	; 0x88
   1d334:	bl	1dabc <__assert_fail@plt+0xc090>
   1d338:	ldrb	r0, [sp, #160]	; 0xa0
   1d33c:	ldr	r1, [sp, #20]
   1d340:	cmp	r0, #0
   1d344:	beq	1d05c <__assert_fail@plt+0xb630>
   1d348:	ldr	r0, [sp, #164]	; 0xa4
   1d34c:	cmp	r0, #0
   1d350:	bne	1d05c <__assert_fail@plt+0xb630>
   1d354:	b	1d4a4 <__assert_fail@plt+0xba78>
   1d358:	ldrb	r5, [r6]
   1d35c:	cmp	r5, #0
   1d360:	beq	1d4a0 <__assert_fail@plt+0xba74>
   1d364:	ldrb	r9, [sl]
   1d368:	cmp	r9, #0
   1d36c:	beq	1d490 <__assert_fail@plt+0xba64>
   1d370:	mov	lr, #1
   1d374:	mov	ip, #0
   1d378:	mov	r3, r6
   1d37c:	mov	r7, #0
   1d380:	mov	r8, #0
   1d384:	add	r0, r8, r8, lsl #2
   1d388:	cmp	r7, r0
   1d38c:	bcc	1d3e4 <__assert_fail@plt+0xb9b8>
   1d390:	tst	lr, #1
   1d394:	beq	1d3e4 <__assert_fail@plt+0xb9b8>
   1d398:	cmp	r8, #10
   1d39c:	bcc	1d3e4 <__assert_fail@plt+0xb9b8>
   1d3a0:	cmp	r3, #0
   1d3a4:	beq	1d420 <__assert_fail@plt+0xb9f4>
   1d3a8:	sub	r1, r7, ip
   1d3ac:	mov	r0, r3
   1d3b0:	str	r7, [sp, #20]
   1d3b4:	mov	r7, r5
   1d3b8:	mov	r4, lr
   1d3bc:	mov	r5, r3
   1d3c0:	bl	11948 <strnlen@plt>
   1d3c4:	mov	r3, r5
   1d3c8:	mov	r5, r7
   1d3cc:	ldr	r7, [sp, #20]
   1d3d0:	mov	lr, r4
   1d3d4:	ldrb	r0, [r3, r0]!
   1d3d8:	mov	ip, r7
   1d3dc:	cmp	r0, #0
   1d3e0:	beq	1d420 <__assert_fail@plt+0xb9f4>
   1d3e4:	uxtb	r0, r9
   1d3e8:	cmp	r0, r5
   1d3ec:	bne	1d464 <__assert_fail@plt+0xba38>
   1d3f0:	mov	r0, #1
   1d3f4:	ldrb	r1, [r6, r0]
   1d3f8:	cmp	r1, #0
   1d3fc:	beq	1d480 <__assert_fail@plt+0xba54>
   1d400:	ldrb	r2, [sl, r0]
   1d404:	cmp	r2, #0
   1d408:	beq	1d490 <__assert_fail@plt+0xba64>
   1d40c:	add	r0, r0, #1
   1d410:	cmp	r2, r1
   1d414:	beq	1d3f4 <__assert_fail@plt+0xb9c8>
   1d418:	add	r7, r7, r0
   1d41c:	b	1d468 <__assert_fail@plt+0xba3c>
   1d420:	mov	r0, r6
   1d424:	mov	r4, ip
   1d428:	bl	11888 <strlen@plt>
   1d42c:	mov	r2, r0
   1d430:	mov	r0, sl
   1d434:	mov	r1, r6
   1d438:	sub	r3, fp, #88	; 0x58
   1d43c:	bl	1d924 <__assert_fail@plt+0xbef8>
   1d440:	cmp	r0, #0
   1d444:	bne	1d4c0 <__assert_fail@plt+0xba94>
   1d448:	ldrb	r9, [sl]
   1d44c:	mov	lr, #0
   1d450:	mov	r3, #0
   1d454:	mov	ip, r4
   1d458:	uxtb	r0, r9
   1d45c:	cmp	r0, r5
   1d460:	beq	1d3f0 <__assert_fail@plt+0xb9c4>
   1d464:	add	r7, r7, #1
   1d468:	ldrb	r9, [sl, #1]!
   1d46c:	add	r8, r8, #1
   1d470:	mov	r4, #0
   1d474:	cmp	r9, #0
   1d478:	bne	1d384 <__assert_fail@plt+0xb958>
   1d47c:	b	1d4a4 <__assert_fail@plt+0xba78>
   1d480:	mov	r4, sl
   1d484:	mov	r0, r4
   1d488:	sub	sp, fp, #28
   1d48c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d490:	mov	r4, #0
   1d494:	mov	r0, r4
   1d498:	sub	sp, fp, #28
   1d49c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4a0:	mov	r4, sl
   1d4a4:	mov	r0, r4
   1d4a8:	sub	sp, fp, #28
   1d4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4b0:	ldr	r4, [sp, #152]	; 0x98
   1d4b4:	mov	r0, r4
   1d4b8:	sub	sp, fp, #28
   1d4bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4c0:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1d4c4:	mov	r0, r4
   1d4c8:	sub	sp, fp, #28
   1d4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4d0:	ldr	r4, [sp, #80]	; 0x50
   1d4d4:	mov	r0, r4
   1d4d8:	sub	sp, fp, #28
   1d4dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4e0:	bl	11a20 <abort@plt>
   1d4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4e8:	add	fp, sp, #28
   1d4ec:	sub	sp, sp, #132	; 0x84
   1d4f0:	mov	r7, r0
   1d4f4:	mov	r0, r1
   1d4f8:	mov	r6, r2
   1d4fc:	mov	r4, r1
   1d500:	bl	1e514 <__assert_fail@plt+0xcae8>
   1d504:	mov	sl, r0
   1d508:	movw	r0, #47662	; 0xba2e
   1d50c:	mov	r5, #0
   1d510:	movt	r0, #744	; 0x2e8
   1d514:	cmp	sl, r0
   1d518:	bhi	1d54c <__assert_fail@plt+0xbb20>
   1d51c:	mov	r0, #44	; 0x2c
   1d520:	mul	r0, sl, r0
   1d524:	cmp	r0, #4016	; 0xfb0
   1d528:	bhi	1d558 <__assert_fail@plt+0xbb2c>
   1d52c:	add	r0, r0, #22
   1d530:	bic	r0, r0, #7
   1d534:	sub	r0, sp, r0
   1d538:	add	r1, r0, #15
   1d53c:	bic	r9, r1, #15
   1d540:	mov	sp, r0
   1d544:	cmp	r9, #0
   1d548:	bne	1d568 <__assert_fail@plt+0xbb3c>
   1d54c:	mov	r0, r5
   1d550:	sub	sp, fp, #28
   1d554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d558:	bl	1e3c8 <__assert_fail@plt+0xc99c>
   1d55c:	mov	r9, r0
   1d560:	cmp	r9, #0
   1d564:	beq	1d54c <__assert_fail@plt+0xbb20>
   1d568:	str	r6, [fp, #-152]	; 0xffffff68
   1d56c:	mov	r6, #0
   1d570:	str	r7, [fp, #-156]	; 0xffffff64
   1d574:	str	r6, [fp, #-80]	; 0xffffffb0
   1d578:	str	r6, [fp, #-84]	; 0xffffffac
   1d57c:	strb	r6, [fp, #-76]	; 0xffffffb4
   1d580:	strb	r6, [fp, #-88]	; 0xffffffa8
   1d584:	str	r4, [fp, #-72]	; 0xffffffb8
   1d588:	sub	r4, fp, #88	; 0x58
   1d58c:	mov	r0, r4
   1d590:	bl	1dabc <__assert_fail@plt+0xc090>
   1d594:	add	r0, sl, sl, lsl #2
   1d598:	add	r8, r9, r0, lsl #3
   1d59c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1d5a0:	cmp	r0, #0
   1d5a4:	beq	1d5b4 <__assert_fail@plt+0xbb88>
   1d5a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d5ac:	cmp	r0, #0
   1d5b0:	beq	1d634 <__assert_fail@plt+0xbc08>
   1d5b4:	add	r7, r9, #16
   1d5b8:	add	r5, r4, #32
   1d5bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d5c0:	cmp	r0, r5
   1d5c4:	bne	1d5dc <__assert_fail@plt+0xbbb0>
   1d5c8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1d5cc:	mov	r0, r7
   1d5d0:	mov	r1, r5
   1d5d4:	bl	116d8 <memcpy@plt>
   1d5d8:	mov	r0, r7
   1d5dc:	str	r0, [r7, #-16]
   1d5e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1d5e4:	str	r0, [r7, #-12]
   1d5e8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1d5ec:	strb	r0, [r7, #-8]
   1d5f0:	cmp	r0, #0
   1d5f4:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   1d5f8:	strne	r0, [r7, #-4]
   1d5fc:	strb	r6, [fp, #-76]	; 0xffffffb4
   1d600:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d604:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1d608:	add	r0, r0, r1
   1d60c:	str	r0, [fp, #-72]	; 0xffffffb8
   1d610:	mov	r0, r4
   1d614:	bl	1dabc <__assert_fail@plt+0xc090>
   1d618:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1d61c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d620:	add	r7, r7, #40	; 0x28
   1d624:	cmp	r1, #0
   1d628:	beq	1d5bc <__assert_fail@plt+0xbb90>
   1d62c:	cmp	r0, #0
   1d630:	bne	1d5bc <__assert_fail@plt+0xbb90>
   1d634:	mov	r0, #1
   1d638:	cmp	sl, #3
   1d63c:	str	sl, [fp, #-148]	; 0xffffff6c
   1d640:	str	r0, [r8, #4]
   1d644:	bcc	1d740 <__assert_fail@plt+0xbd14>
   1d648:	mov	sl, #2
   1d64c:	mov	r7, #0
   1d650:	b	1d670 <__assert_fail@plt+0xbc44>
   1d654:	mov	r7, #0
   1d658:	mov	r0, sl
   1d65c:	str	r0, [r8, sl, lsl #2]
   1d660:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1d664:	add	sl, sl, #1
   1d668:	cmp	sl, r0
   1d66c:	beq	1d740 <__assert_fail@plt+0xbd14>
   1d670:	add	r0, sl, sl, lsl #2
   1d674:	add	r0, r9, r0, lsl #3
   1d678:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   1d67c:	sub	r6, r0, #40	; 0x28
   1d680:	sub	r4, r0, #36	; 0x24
   1d684:	cmp	r1, #0
   1d688:	beq	1d6f0 <__assert_fail@plt+0xbcc4>
   1d68c:	sub	r5, r0, #28
   1d690:	add	r0, r7, r7, lsl #2
   1d694:	add	r1, r9, r0, lsl #3
   1d698:	ldrb	r2, [r1, #8]
   1d69c:	cmp	r2, #0
   1d6a0:	beq	1d6b8 <__assert_fail@plt+0xbc8c>
   1d6a4:	ldr	r0, [r1, #12]
   1d6a8:	ldr	r1, [r5]
   1d6ac:	cmp	r1, r0
   1d6b0:	bne	1d6dc <__assert_fail@plt+0xbcb0>
   1d6b4:	b	1d734 <__assert_fail@plt+0xbd08>
   1d6b8:	ldr	r1, [r1, #4]
   1d6bc:	ldr	r2, [r4]
   1d6c0:	cmp	r2, r1
   1d6c4:	bne	1d6dc <__assert_fail@plt+0xbcb0>
   1d6c8:	ldr	r1, [r9, r0, lsl #3]
   1d6cc:	ldr	r0, [r6]
   1d6d0:	bl	1187c <bcmp@plt>
   1d6d4:	cmp	r0, #0
   1d6d8:	beq	1d734 <__assert_fail@plt+0xbd08>
   1d6dc:	cmp	r7, #0
   1d6e0:	beq	1d654 <__assert_fail@plt+0xbc28>
   1d6e4:	ldr	r0, [r8, r7, lsl #2]
   1d6e8:	sub	r7, r7, r0
   1d6ec:	b	1d690 <__assert_fail@plt+0xbc64>
   1d6f0:	ldr	r4, [r4]
   1d6f4:	add	r0, r7, r7, lsl #2
   1d6f8:	add	r1, r9, r0, lsl #3
   1d6fc:	ldr	r1, [r1, #4]
   1d700:	cmp	r4, r1
   1d704:	bne	1d720 <__assert_fail@plt+0xbcf4>
   1d708:	ldr	r1, [r9, r0, lsl #3]
   1d70c:	ldr	r0, [r6]
   1d710:	mov	r2, r4
   1d714:	bl	1187c <bcmp@plt>
   1d718:	cmp	r0, #0
   1d71c:	beq	1d734 <__assert_fail@plt+0xbd08>
   1d720:	cmp	r7, #0
   1d724:	beq	1d654 <__assert_fail@plt+0xbc28>
   1d728:	ldr	r0, [r8, r7, lsl #2]
   1d72c:	sub	r7, r7, r0
   1d730:	b	1d6f4 <__assert_fail@plt+0xbcc8>
   1d734:	add	r7, r7, #1
   1d738:	sub	r0, sl, r7
   1d73c:	b	1d65c <__assert_fail@plt+0xbc30>
   1d740:	ldr	r0, [fp, #-152]	; 0xffffff68
   1d744:	mov	r6, #0
   1d748:	str	r6, [r0]
   1d74c:	ldr	r0, [fp, #-156]	; 0xffffff64
   1d750:	str	r6, [fp, #-80]	; 0xffffffb0
   1d754:	str	r6, [fp, #-84]	; 0xffffffac
   1d758:	strb	r6, [fp, #-76]	; 0xffffffb4
   1d75c:	strb	r6, [fp, #-88]	; 0xffffffa8
   1d760:	str	r6, [fp, #-136]	; 0xffffff78
   1d764:	str	r6, [fp, #-140]	; 0xffffff74
   1d768:	str	r0, [fp, #-128]	; 0xffffff80
   1d76c:	str	r0, [fp, #-72]	; 0xffffffb8
   1d770:	sub	r0, fp, #144	; 0x90
   1d774:	strb	r6, [fp, #-132]	; 0xffffff7c
   1d778:	strb	r6, [fp, #-144]	; 0xffffff70
   1d77c:	bl	1dabc <__assert_fail@plt+0xc090>
   1d780:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d784:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1d788:	cmp	r0, #0
   1d78c:	bne	1d798 <__assert_fail@plt+0xbd6c>
   1d790:	cmp	r1, #0
   1d794:	bne	1d908 <__assert_fail@plt+0xbedc>
   1d798:	clz	r1, r1
   1d79c:	sub	r4, fp, #88	; 0x58
   1d7a0:	mov	sl, #0
   1d7a4:	lsr	r1, r1, #5
   1d7a8:	add	r2, sl, sl, lsl #2
   1d7ac:	tst	r1, #1
   1d7b0:	add	r3, r9, r2, lsl #3
   1d7b4:	bne	1d7dc <__assert_fail@plt+0xbdb0>
   1d7b8:	ldrb	r1, [r3, #8]
   1d7bc:	cmp	r1, #0
   1d7c0:	beq	1d7dc <__assert_fail@plt+0xbdb0>
   1d7c4:	ldr	r1, [r3, #12]
   1d7c8:	cmp	r1, r0
   1d7cc:	bne	1d808 <__assert_fail@plt+0xbddc>
   1d7d0:	ldr	r7, [fp, #-128]	; 0xffffff80
   1d7d4:	ldr	r5, [fp, #-124]	; 0xffffff84
   1d7d8:	b	1d864 <__assert_fail@plt+0xbe38>
   1d7dc:	ldr	r5, [r3, #4]
   1d7e0:	ldr	r0, [fp, #-124]	; 0xffffff84
   1d7e4:	cmp	r5, r0
   1d7e8:	bne	1d808 <__assert_fail@plt+0xbddc>
   1d7ec:	ldr	r0, [r9, r2, lsl #3]
   1d7f0:	ldr	r7, [fp, #-128]	; 0xffffff80
   1d7f4:	mov	r2, r5
   1d7f8:	mov	r1, r7
   1d7fc:	bl	1187c <bcmp@plt>
   1d800:	cmp	r0, #0
   1d804:	beq	1d864 <__assert_fail@plt+0xbe38>
   1d808:	cmp	sl, #0
   1d80c:	beq	1d884 <__assert_fail@plt+0xbe58>
   1d810:	ldr	r5, [r8, sl, lsl #2]
   1d814:	sub	sl, sl, r5
   1d818:	cmp	r5, #0
   1d81c:	bne	1d840 <__assert_fail@plt+0xbe14>
   1d820:	b	1d8d0 <__assert_fail@plt+0xbea4>
   1d824:	strb	r6, [fp, #-76]	; 0xffffffb4
   1d828:	subs	r5, r5, #1
   1d82c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d830:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1d834:	add	r0, r0, r1
   1d838:	str	r0, [fp, #-72]	; 0xffffffb8
   1d83c:	beq	1d8d0 <__assert_fail@plt+0xbea4>
   1d840:	mov	r0, r4
   1d844:	bl	1dabc <__assert_fail@plt+0xc090>
   1d848:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1d84c:	cmp	r0, #0
   1d850:	beq	1d824 <__assert_fail@plt+0xbdf8>
   1d854:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d858:	cmp	r0, #0
   1d85c:	bne	1d824 <__assert_fail@plt+0xbdf8>
   1d860:	b	1d920 <__assert_fail@plt+0xbef4>
   1d864:	add	r0, r7, r5
   1d868:	strb	r6, [fp, #-132]	; 0xffffff7c
   1d86c:	add	sl, sl, #1
   1d870:	str	r0, [fp, #-128]	; 0xffffff80
   1d874:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1d878:	cmp	sl, r0
   1d87c:	bne	1d8d0 <__assert_fail@plt+0xbea4>
   1d880:	b	1d8fc <__assert_fail@plt+0xbed0>
   1d884:	mov	r0, r4
   1d888:	bl	1dabc <__assert_fail@plt+0xc090>
   1d88c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1d890:	cmp	r0, #0
   1d894:	beq	1d8a4 <__assert_fail@plt+0xbe78>
   1d898:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d89c:	cmp	r0, #0
   1d8a0:	beq	1d920 <__assert_fail@plt+0xbef4>
   1d8a4:	mov	sl, #0
   1d8a8:	strb	sl, [fp, #-76]	; 0xffffffb4
   1d8ac:	strb	sl, [fp, #-132]	; 0xffffff7c
   1d8b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d8b4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1d8b8:	add	r0, r0, r1
   1d8bc:	ldr	r1, [fp, #-124]	; 0xffffff84
   1d8c0:	str	r0, [fp, #-72]	; 0xffffffb8
   1d8c4:	ldr	r0, [fp, #-128]	; 0xffffff80
   1d8c8:	add	r0, r0, r1
   1d8cc:	str	r0, [fp, #-128]	; 0xffffff80
   1d8d0:	sub	r0, fp, #144	; 0x90
   1d8d4:	bl	1dabc <__assert_fail@plt+0xc090>
   1d8d8:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1d8dc:	clz	r0, r2
   1d8e0:	lsr	r1, r0, #5
   1d8e4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d8e8:	cmp	r0, #0
   1d8ec:	bne	1d7a8 <__assert_fail@plt+0xbd7c>
   1d8f0:	cmp	r2, #0
   1d8f4:	beq	1d7a8 <__assert_fail@plt+0xbd7c>
   1d8f8:	b	1d908 <__assert_fail@plt+0xbedc>
   1d8fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d900:	ldr	r1, [fp, #-152]	; 0xffffff68
   1d904:	str	r0, [r1]
   1d908:	mov	r0, r9
   1d90c:	bl	1e438 <__assert_fail@plt+0xca0c>
   1d910:	mov	r5, #1
   1d914:	mov	r0, r5
   1d918:	sub	sp, fp, #28
   1d91c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d920:	bl	11a20 <abort@plt>
   1d924:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d928:	add	fp, sp, #24
   1d92c:	mov	r4, #0
   1d930:	cmn	r2, #-536870911	; 0xe0000001
   1d934:	bhi	1da98 <__assert_fail@plt+0xc06c>
   1d938:	mov	r7, r0
   1d93c:	lsl	r0, r2, #2
   1d940:	mov	r8, r3
   1d944:	mov	r5, r2
   1d948:	mov	r6, r1
   1d94c:	cmp	r0, #4016	; 0xfb0
   1d950:	bhi	1da8c <__assert_fail@plt+0xc060>
   1d954:	add	r0, r0, #22
   1d958:	bic	r0, r0, #7
   1d95c:	sub	r1, sp, r0
   1d960:	add	r0, r1, #15
   1d964:	bic	r0, r0, #15
   1d968:	mov	sp, r1
   1d96c:	cmp	r0, #0
   1d970:	beq	1da98 <__assert_fail@plt+0xc06c>
   1d974:	mov	r1, #1
   1d978:	cmp	r5, #3
   1d97c:	str	r1, [r0, #4]
   1d980:	bcc	1d9f4 <__assert_fail@plt+0xbfc8>
   1d984:	mov	r1, #2
   1d988:	mov	r2, #0
   1d98c:	b	1d9a8 <__assert_fail@plt+0xbf7c>
   1d990:	add	r2, r2, #1
   1d994:	sub	r3, r1, r2
   1d998:	str	r3, [r0, r1, lsl #2]
   1d99c:	add	r1, r1, #1
   1d9a0:	cmp	r1, r5
   1d9a4:	beq	1d9f4 <__assert_fail@plt+0xbfc8>
   1d9a8:	add	r3, r1, r6
   1d9ac:	ldrb	r4, [r6, r2]
   1d9b0:	ldrb	r3, [r3, #-1]
   1d9b4:	cmp	r3, r4
   1d9b8:	beq	1d990 <__assert_fail@plt+0xbf64>
   1d9bc:	cmp	r2, #0
   1d9c0:	beq	1d9dc <__assert_fail@plt+0xbfb0>
   1d9c4:	ldr	r4, [r0, r2, lsl #2]
   1d9c8:	sub	r2, r2, r4
   1d9cc:	ldrb	r4, [r6, r2]
   1d9d0:	cmp	r3, r4
   1d9d4:	bne	1d9bc <__assert_fail@plt+0xbf90>
   1d9d8:	b	1d990 <__assert_fail@plt+0xbf64>
   1d9dc:	mov	r2, #0
   1d9e0:	mov	r3, r1
   1d9e4:	str	r3, [r0, r1, lsl #2]
   1d9e8:	add	r1, r1, #1
   1d9ec:	cmp	r1, r5
   1d9f0:	bne	1d9a8 <__assert_fail@plt+0xbf7c>
   1d9f4:	mov	r1, #0
   1d9f8:	str	r1, [r8]
   1d9fc:	ldrb	r3, [r7]
   1da00:	cmp	r3, #0
   1da04:	beq	1daa8 <__assert_fail@plt+0xc07c>
   1da08:	mov	r2, r7
   1da0c:	ldrb	r4, [r6, r1]
   1da10:	uxtb	r3, r3
   1da14:	cmp	r4, r3
   1da18:	bne	1da68 <__assert_fail@plt+0xc03c>
   1da1c:	b	1da48 <__assert_fail@plt+0xc01c>
   1da20:	add	r7, r7, #1
   1da24:	add	r2, r2, #1
   1da28:	mov	r1, #0
   1da2c:	ldrb	r3, [r7]
   1da30:	cmp	r3, #0
   1da34:	beq	1daa8 <__assert_fail@plt+0xc07c>
   1da38:	ldrb	r4, [r6, r1]
   1da3c:	uxtb	r3, r3
   1da40:	cmp	r4, r3
   1da44:	bne	1da68 <__assert_fail@plt+0xc03c>
   1da48:	add	r1, r1, #1
   1da4c:	cmp	r1, r5
   1da50:	beq	1daa4 <__assert_fail@plt+0xc078>
   1da54:	add	r7, r7, #1
   1da58:	ldrb	r3, [r7]
   1da5c:	cmp	r3, #0
   1da60:	bne	1da38 <__assert_fail@plt+0xc00c>
   1da64:	b	1daa8 <__assert_fail@plt+0xc07c>
   1da68:	cmp	r1, #0
   1da6c:	beq	1da20 <__assert_fail@plt+0xbff4>
   1da70:	ldr	r3, [r0, r1, lsl #2]
   1da74:	sub	r1, r1, r3
   1da78:	add	r2, r2, r3
   1da7c:	ldrb	r3, [r7]
   1da80:	cmp	r3, #0
   1da84:	bne	1da38 <__assert_fail@plt+0xc00c>
   1da88:	b	1daa8 <__assert_fail@plt+0xc07c>
   1da8c:	bl	1e3c8 <__assert_fail@plt+0xc99c>
   1da90:	cmp	r0, #0
   1da94:	bne	1d974 <__assert_fail@plt+0xbf48>
   1da98:	mov	r0, r4
   1da9c:	sub	sp, fp, #24
   1daa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1daa4:	str	r2, [r8]
   1daa8:	bl	1e438 <__assert_fail@plt+0xca0c>
   1daac:	mov	r4, #1
   1dab0:	mov	r0, r4
   1dab4:	sub	sp, fp, #24
   1dab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dabc:	push	{r4, r5, r6, r7, fp, lr}
   1dac0:	add	fp, sp, #16
   1dac4:	mov	r4, r0
   1dac8:	ldrb	r0, [r0, #12]
   1dacc:	cmp	r0, #0
   1dad0:	popne	{r4, r5, r6, r7, fp, pc}
   1dad4:	ldrb	r0, [r4]
   1dad8:	ldr	r5, [r4, #16]
   1dadc:	cmp	r0, #0
   1dae0:	beq	1db48 <__assert_fail@plt+0xc11c>
   1dae4:	bl	117c8 <__ctype_get_mb_cur_max@plt>
   1dae8:	mov	r1, r0
   1daec:	mov	r0, r5
   1daf0:	bl	1e32c <__assert_fail@plt+0xc900>
   1daf4:	add	r6, r4, #4
   1daf8:	add	r7, r4, #28
   1dafc:	mov	r2, r0
   1db00:	mov	r1, r5
   1db04:	mov	r0, r7
   1db08:	mov	r3, r6
   1db0c:	bl	1cf24 <__assert_fail@plt+0xb4f8>
   1db10:	cmn	r0, #2
   1db14:	str	r0, [r4, #20]
   1db18:	beq	1dbd4 <__assert_fail@plt+0xc1a8>
   1db1c:	cmp	r0, #0
   1db20:	beq	1db88 <__assert_fail@plt+0xc15c>
   1db24:	cmn	r0, #1
   1db28:	bne	1dbac <__assert_fail@plt+0xc180>
   1db2c:	mov	r0, #0
   1db30:	strb	r0, [r4, #24]
   1db34:	mov	r0, #1
   1db38:	str	r0, [r4, #20]
   1db3c:	mov	r0, #1
   1db40:	strb	r0, [r4, #12]
   1db44:	pop	{r4, r5, r6, r7, fp, pc}
   1db48:	ldrb	r0, [r5]
   1db4c:	movw	r2, #9304	; 0x2458
   1db50:	movt	r2, #2
   1db54:	ubfx	r1, r0, #5, #3
   1db58:	ldr	r1, [r2, r1, lsl #2]
   1db5c:	and	r2, r0, #31
   1db60:	mov	r0, #1
   1db64:	tst	r1, r0, lsl r2
   1db68:	beq	1dbf4 <__assert_fail@plt+0xc1c8>
   1db6c:	str	r0, [r4, #20]
   1db70:	ldrb	r1, [r5]
   1db74:	strb	r0, [r4, #24]
   1db78:	str	r1, [r4, #28]
   1db7c:	mov	r0, #1
   1db80:	strb	r0, [r4, #12]
   1db84:	pop	{r4, r5, r6, r7, fp, pc}
   1db88:	mov	r0, #1
   1db8c:	str	r0, [r4, #20]
   1db90:	ldr	r0, [r4, #16]
   1db94:	ldrb	r0, [r0]
   1db98:	cmp	r0, #0
   1db9c:	bne	1dc10 <__assert_fail@plt+0xc1e4>
   1dba0:	ldr	r0, [r7]
   1dba4:	cmp	r0, #0
   1dba8:	bne	1dc30 <__assert_fail@plt+0xc204>
   1dbac:	mov	r0, #1
   1dbb0:	strb	r0, [r4, #24]
   1dbb4:	mov	r0, r6
   1dbb8:	bl	116f0 <mbsinit@plt>
   1dbbc:	cmp	r0, #0
   1dbc0:	movne	r0, #0
   1dbc4:	strbne	r0, [r4]
   1dbc8:	mov	r0, #1
   1dbcc:	strb	r0, [r4, #12]
   1dbd0:	pop	{r4, r5, r6, r7, fp, pc}
   1dbd4:	ldr	r0, [r4, #16]
   1dbd8:	bl	11888 <strlen@plt>
   1dbdc:	mov	r1, #0
   1dbe0:	strb	r1, [r4, #24]
   1dbe4:	str	r0, [r4, #20]
   1dbe8:	mov	r0, #1
   1dbec:	strb	r0, [r4, #12]
   1dbf0:	pop	{r4, r5, r6, r7, fp, pc}
   1dbf4:	add	r0, r4, #4
   1dbf8:	bl	116f0 <mbsinit@plt>
   1dbfc:	cmp	r0, #0
   1dc00:	beq	1dc50 <__assert_fail@plt+0xc224>
   1dc04:	mov	r0, #1
   1dc08:	strb	r0, [r4]
   1dc0c:	b	1dae4 <__assert_fail@plt+0xc0b8>
   1dc10:	movw	r0, #9191	; 0x23e7
   1dc14:	movw	r1, #9232	; 0x2410
   1dc18:	movw	r3, #9248	; 0x2420
   1dc1c:	mov	r2, #171	; 0xab
   1dc20:	movt	r0, #2
   1dc24:	movt	r1, #2
   1dc28:	movt	r3, #2
   1dc2c:	bl	11a2c <__assert_fail@plt>
   1dc30:	movw	r0, #9214	; 0x23fe
   1dc34:	movw	r1, #9232	; 0x2410
   1dc38:	movw	r3, #9248	; 0x2420
   1dc3c:	mov	r2, #172	; 0xac
   1dc40:	movt	r0, #2
   1dc44:	movt	r1, #2
   1dc48:	movt	r3, #2
   1dc4c:	bl	11a2c <__assert_fail@plt>
   1dc50:	movw	r0, #9107	; 0x2393
   1dc54:	movw	r1, #9232	; 0x2410
   1dc58:	movw	r3, #9248	; 0x2420
   1dc5c:	mov	r2, #143	; 0x8f
   1dc60:	movt	r0, #2
   1dc64:	movt	r1, #2
   1dc68:	movt	r3, #2
   1dc6c:	bl	11a2c <__assert_fail@plt>
   1dc70:	ldr	r2, [r0, #16]
   1dc74:	add	r1, r2, r1
   1dc78:	str	r1, [r0, #16]
   1dc7c:	bx	lr
   1dc80:	push	{r4, r5, r6, sl, fp, lr}
   1dc84:	add	fp, sp, #16
   1dc88:	mov	r5, r1
   1dc8c:	ldrb	r1, [r1]
   1dc90:	mov	r4, r0
   1dc94:	strb	r1, [r0], #4
   1dc98:	cmp	r1, #0
   1dc9c:	beq	1dcac <__assert_fail@plt+0xc280>
   1dca0:	ldmib	r5, {r1, r2}
   1dca4:	stm	r0, {r1, r2}
   1dca8:	b	1dcb8 <__assert_fail@plt+0xc28c>
   1dcac:	mov	r1, #0
   1dcb0:	str	r1, [r0]
   1dcb4:	str	r1, [r0, #4]
   1dcb8:	ldrb	r0, [r5, #12]
   1dcbc:	strb	r0, [r4, #12]
   1dcc0:	add	r0, r5, #32
   1dcc4:	ldr	r1, [r5, #16]
   1dcc8:	cmp	r1, r0
   1dccc:	beq	1dcd8 <__assert_fail@plt+0xc2ac>
   1dcd0:	mov	r6, r1
   1dcd4:	b	1dce8 <__assert_fail@plt+0xc2bc>
   1dcd8:	ldr	r2, [r5, #20]
   1dcdc:	add	r6, r4, #32
   1dce0:	mov	r0, r6
   1dce4:	bl	116d8 <memcpy@plt>
   1dce8:	str	r6, [r4, #16]
   1dcec:	ldr	r0, [r5, #20]
   1dcf0:	str	r0, [r4, #20]
   1dcf4:	ldrb	r0, [r5, #24]
   1dcf8:	strb	r0, [r4, #24]
   1dcfc:	cmp	r0, #0
   1dd00:	ldrne	r0, [r5, #28]
   1dd04:	strne	r0, [r4, #28]
   1dd08:	pop	{r4, r5, r6, sl, fp, pc}
   1dd0c:	cmp	r2, #0
   1dd10:	beq	1dd40 <__assert_fail@plt+0xc314>
   1dd14:	mvn	r3, #0
   1dd18:	udiv	r3, r3, r2
   1dd1c:	cmp	r3, r1
   1dd20:	bcs	1dd40 <__assert_fail@plt+0xc314>
   1dd24:	push	{fp, lr}
   1dd28:	mov	fp, sp
   1dd2c:	bl	118b8 <__errno_location@plt>
   1dd30:	mov	r1, #12
   1dd34:	str	r1, [r0]
   1dd38:	mov	r0, #0
   1dd3c:	pop	{fp, pc}
   1dd40:	mul	r1, r2, r1
   1dd44:	b	1c9bc <__assert_fail@plt+0xaf90>
   1dd48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd4c:	add	fp, sp, #28
   1dd50:	sub	sp, sp, #44	; 0x2c
   1dd54:	sub	sp, sp, #4096	; 0x1000
   1dd58:	mov	r5, r0
   1dd5c:	mov	r0, #0
   1dd60:	str	r3, [sp, #16]
   1dd64:	mov	r4, r1
   1dd68:	str	r2, [sp, #20]
   1dd6c:	mov	r1, #0
   1dd70:	mov	r3, #0
   1dd74:	str	r0, [sp]
   1dd78:	mov	r0, r2
   1dd7c:	mov	r2, #0
   1dd80:	bl	11660 <iconv@plt>
   1dd84:	cmp	r4, #0
   1dd88:	mov	r6, #0
   1dd8c:	str	r5, [sp, #8]
   1dd90:	str	r5, [sp, #36]	; 0x24
   1dd94:	str	r4, [sp, #32]
   1dd98:	str	r4, [sp, #12]
   1dd9c:	beq	1de18 <__assert_fail@plt+0xc3ec>
   1dda0:	mov	r6, #0
   1dda4:	add	r8, sp, #40	; 0x28
   1dda8:	mov	sl, #4096	; 0x1000
   1ddac:	add	r9, sp, #24
   1ddb0:	add	r4, sp, #36	; 0x24
   1ddb4:	add	r7, sp, #32
   1ddb8:	add	r5, sp, #28
   1ddbc:	b	1ddd8 <__assert_fail@plt+0xc3ac>
   1ddc0:	ldr	r1, [sp, #28]
   1ddc4:	sub	r0, r6, r8
   1ddc8:	add	r6, r0, r1
   1ddcc:	ldr	r0, [sp, #32]
   1ddd0:	cmp	r0, #0
   1ddd4:	beq	1de18 <__assert_fail@plt+0xc3ec>
   1ddd8:	ldr	r0, [sp, #20]
   1dddc:	mov	r1, r4
   1dde0:	mov	r2, r7
   1dde4:	mov	r3, r5
   1dde8:	str	r8, [sp, #28]
   1ddec:	str	sl, [sp, #24]
   1ddf0:	str	r9, [sp]
   1ddf4:	bl	11660 <iconv@plt>
   1ddf8:	cmn	r0, #1
   1ddfc:	bne	1ddc0 <__assert_fail@plt+0xc394>
   1de00:	bl	118b8 <__errno_location@plt>
   1de04:	ldr	r0, [r0]
   1de08:	cmp	r0, #7
   1de0c:	beq	1ddc0 <__assert_fail@plt+0xc394>
   1de10:	cmp	r0, #22
   1de14:	bne	1df4c <__assert_fail@plt+0xc520>
   1de18:	mov	r0, #4096	; 0x1000
   1de1c:	add	r4, sp, #40	; 0x28
   1de20:	add	r3, sp, #28
   1de24:	mov	r1, #0
   1de28:	mov	r2, #0
   1de2c:	str	r0, [sp, #24]
   1de30:	add	r0, sp, #24
   1de34:	str	r4, [sp, #28]
   1de38:	str	r0, [sp]
   1de3c:	ldr	r0, [sp, #20]
   1de40:	bl	11660 <iconv@plt>
   1de44:	cmn	r0, #1
   1de48:	beq	1df24 <__assert_fail@plt+0xc4f8>
   1de4c:	ldr	r1, [sp, #28]
   1de50:	sub	r0, r6, r4
   1de54:	add	r6, r0, r1
   1de58:	mov	r0, #1
   1de5c:	mvn	r9, #0
   1de60:	cmp	r0, #0
   1de64:	beq	1dff0 <__assert_fail@plt+0xc5c4>
   1de68:	ldr	r1, [fp, #8]
   1de6c:	cmp	r6, #0
   1de70:	beq	1df38 <__assert_fail@plt+0xc50c>
   1de74:	ldr	r0, [sp, #16]
   1de78:	ldr	r4, [r0]
   1de7c:	cmp	r4, #0
   1de80:	beq	1de90 <__assert_fail@plt+0xc464>
   1de84:	ldr	r0, [r1]
   1de88:	cmp	r0, r6
   1de8c:	bcs	1dea4 <__assert_fail@plt+0xc478>
   1de90:	mov	r0, r6
   1de94:	bl	1c98c <__assert_fail@plt+0xaf60>
   1de98:	mov	r4, r0
   1de9c:	cmp	r0, #0
   1dea0:	beq	1df60 <__assert_fail@plt+0xc534>
   1dea4:	mov	r0, #0
   1dea8:	mov	r1, #0
   1deac:	mov	r2, #0
   1deb0:	mov	r3, #0
   1deb4:	str	r0, [sp]
   1deb8:	ldr	r0, [sp, #20]
   1debc:	bl	11660 <iconv@plt>
   1dec0:	ldr	r0, [sp, #8]
   1dec4:	mov	sl, r4
   1dec8:	str	r4, [sp, #32]
   1decc:	str	r6, [sp, #28]
   1ded0:	str	r0, [sp, #40]	; 0x28
   1ded4:	ldr	r0, [sp, #12]
   1ded8:	cmp	r0, #0
   1dedc:	str	r0, [sp, #36]	; 0x24
   1dee0:	beq	1df88 <__assert_fail@plt+0xc55c>
   1dee4:	add	r8, sp, #28
   1dee8:	add	r5, sp, #40	; 0x28
   1deec:	add	r7, sp, #36	; 0x24
   1def0:	add	r4, sp, #32
   1def4:	ldr	r0, [sp, #20]
   1def8:	mov	r1, r5
   1defc:	mov	r2, r7
   1df00:	mov	r3, r4
   1df04:	str	r8, [sp]
   1df08:	bl	11660 <iconv@plt>
   1df0c:	cmn	r0, #1
   1df10:	beq	1df78 <__assert_fail@plt+0xc54c>
   1df14:	ldr	r0, [sp, #36]	; 0x24
   1df18:	cmp	r0, #0
   1df1c:	bne	1def4 <__assert_fail@plt+0xc4c8>
   1df20:	b	1df88 <__assert_fail@plt+0xc55c>
   1df24:	mov	r0, #0
   1df28:	mvn	r9, #0
   1df2c:	cmp	r0, #0
   1df30:	bne	1de68 <__assert_fail@plt+0xc43c>
   1df34:	b	1dff0 <__assert_fail@plt+0xc5c4>
   1df38:	mov	r9, #0
   1df3c:	str	r9, [r1]
   1df40:	mov	r0, r9
   1df44:	sub	sp, fp, #28
   1df48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df4c:	mov	r0, #0
   1df50:	mvn	r9, #0
   1df54:	cmp	r0, #0
   1df58:	bne	1de68 <__assert_fail@plt+0xc43c>
   1df5c:	b	1dff0 <__assert_fail@plt+0xc5c4>
   1df60:	bl	118b8 <__errno_location@plt>
   1df64:	mov	r1, #12
   1df68:	str	r1, [r0]
   1df6c:	mov	r0, r9
   1df70:	sub	sp, fp, #28
   1df74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df78:	bl	118b8 <__errno_location@plt>
   1df7c:	ldr	r0, [r0]
   1df80:	cmp	r0, #22
   1df84:	bne	1dfd8 <__assert_fail@plt+0xc5ac>
   1df88:	add	r0, sp, #28
   1df8c:	add	r3, sp, #32
   1df90:	mov	r1, #0
   1df94:	mov	r2, #0
   1df98:	str	r0, [sp]
   1df9c:	ldr	r0, [sp, #20]
   1dfa0:	bl	11660 <iconv@plt>
   1dfa4:	cmn	r0, #1
   1dfa8:	beq	1dfd8 <__assert_fail@plt+0xc5ac>
   1dfac:	ldr	r0, [sp, #28]
   1dfb0:	cmp	r0, #0
   1dfb4:	bne	1dffc <__assert_fail@plt+0xc5d0>
   1dfb8:	ldr	r0, [sp, #16]
   1dfbc:	mov	r9, #0
   1dfc0:	str	sl, [r0]
   1dfc4:	ldr	r0, [fp, #8]
   1dfc8:	str	r6, [r0]
   1dfcc:	mov	r0, r9
   1dfd0:	sub	sp, fp, #28
   1dfd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfd8:	ldr	r0, [sp, #16]
   1dfdc:	ldr	r1, [r0]
   1dfe0:	cmp	sl, r1
   1dfe4:	beq	1dff0 <__assert_fail@plt+0xc5c4>
   1dfe8:	mov	r0, sl
   1dfec:	bl	18f5c <__assert_fail@plt+0x7530>
   1dff0:	mov	r0, r9
   1dff4:	sub	sp, fp, #28
   1dff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dffc:	bl	11a20 <abort@plt>
   1e000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e004:	add	fp, sp, #28
   1e008:	sub	sp, sp, #20
   1e00c:	mov	r8, r1
   1e010:	str	r0, [sp, #16]
   1e014:	bl	11888 <strlen@plt>
   1e018:	cmp	r0, #4096	; 0x1000
   1e01c:	mov	r5, r0
   1e020:	str	r0, [sp, #12]
   1e024:	lslcc	r5, r0, #4
   1e028:	add	r4, r5, #1
   1e02c:	mov	r0, r4
   1e030:	bl	1c98c <__assert_fail@plt+0xaf60>
   1e034:	cmp	r0, #0
   1e038:	beq	1e0e8 <__assert_fail@plt+0xc6bc>
   1e03c:	mov	r7, r0
   1e040:	mov	r0, #0
   1e044:	mov	r1, #0
   1e048:	mov	r2, #0
   1e04c:	mov	r3, #0
   1e050:	str	r0, [sp]
   1e054:	mov	r0, r8
   1e058:	bl	11660 <iconv@plt>
   1e05c:	stmib	sp, {r5, r7}
   1e060:	add	r5, sp, #4
   1e064:	add	r1, sp, #16
   1e068:	add	r2, sp, #12
   1e06c:	add	r3, sp, #8
   1e070:	mov	r0, r8
   1e074:	str	r5, [sp]
   1e078:	bl	11660 <iconv@plt>
   1e07c:	cmn	r0, #1
   1e080:	beq	1e100 <__assert_fail@plt+0xc6d4>
   1e084:	mov	r6, r7
   1e088:	add	r3, sp, #8
   1e08c:	mov	r0, r8
   1e090:	mov	r1, #0
   1e094:	mov	r2, #0
   1e098:	str	r5, [sp]
   1e09c:	bl	11660 <iconv@plt>
   1e0a0:	cmn	r0, #1
   1e0a4:	beq	1e180 <__assert_fail@plt+0xc754>
   1e0a8:	mov	r5, r6
   1e0ac:	ldr	r0, [sp, #8]
   1e0b0:	add	r1, r0, #1
   1e0b4:	str	r1, [sp, #8]
   1e0b8:	mov	r1, #0
   1e0bc:	strb	r1, [r0]
   1e0c0:	ldr	r0, [sp, #8]
   1e0c4:	sub	r1, r0, r5
   1e0c8:	cmp	r1, r4
   1e0cc:	bcs	1e204 <__assert_fail@plt+0xc7d8>
   1e0d0:	mov	r0, r5
   1e0d4:	bl	1c9bc <__assert_fail@plt+0xaf90>
   1e0d8:	cmp	r0, #0
   1e0dc:	moveq	r0, r5
   1e0e0:	sub	sp, fp, #28
   1e0e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0e8:	bl	118b8 <__errno_location@plt>
   1e0ec:	mov	r1, #12
   1e0f0:	str	r1, [r0]
   1e0f4:	mov	r0, #0
   1e0f8:	sub	sp, fp, #28
   1e0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e100:	bl	118b8 <__errno_location@plt>
   1e104:	mov	r9, r0
   1e108:	ldr	r0, [r9]
   1e10c:	cmp	r0, #7
   1e110:	bne	1e23c <__assert_fail@plt+0xc810>
   1e114:	cmp	r4, r4, lsl #1
   1e118:	bcs	1e210 <__assert_fail@plt+0xc7e4>
   1e11c:	ldr	sl, [sp, #8]
   1e120:	lsl	r4, r4, #1
   1e124:	mov	r0, r7
   1e128:	mov	r1, r4
   1e12c:	bl	1c9bc <__assert_fail@plt+0xaf90>
   1e130:	cmp	r0, #0
   1e134:	beq	1e210 <__assert_fail@plt+0xc7e4>
   1e138:	mov	r6, r0
   1e13c:	sub	r0, sl, r7
   1e140:	add	r5, sp, #4
   1e144:	add	r2, sp, #12
   1e148:	add	r3, sp, #8
   1e14c:	add	r1, r6, r0
   1e150:	mvn	r0, r0
   1e154:	str	r5, [sp]
   1e158:	add	r0, r4, r0
   1e15c:	str	r1, [sp, #8]
   1e160:	add	r1, sp, #16
   1e164:	str	r0, [sp, #4]
   1e168:	mov	r0, r8
   1e16c:	bl	11660 <iconv@plt>
   1e170:	cmn	r0, #1
   1e174:	mov	r7, r6
   1e178:	beq	1e108 <__assert_fail@plt+0xc6dc>
   1e17c:	b	1e088 <__assert_fail@plt+0xc65c>
   1e180:	bl	118b8 <__errno_location@plt>
   1e184:	mov	r7, r0
   1e188:	add	r9, sp, #8
   1e18c:	ldr	r0, [r7]
   1e190:	cmp	r0, #7
   1e194:	bne	1e224 <__assert_fail@plt+0xc7f8>
   1e198:	cmp	r4, r4, lsl #1
   1e19c:	bcs	1e21c <__assert_fail@plt+0xc7f0>
   1e1a0:	ldr	sl, [sp, #8]
   1e1a4:	lsl	r4, r4, #1
   1e1a8:	mov	r0, r6
   1e1ac:	mov	r1, r4
   1e1b0:	bl	1c9bc <__assert_fail@plt+0xaf90>
   1e1b4:	cmp	r0, #0
   1e1b8:	beq	1e21c <__assert_fail@plt+0xc7f0>
   1e1bc:	mov	r5, r0
   1e1c0:	sub	r0, sl, r6
   1e1c4:	mov	r2, #0
   1e1c8:	mov	r3, r9
   1e1cc:	add	r1, r5, r0
   1e1d0:	mvn	r0, r0
   1e1d4:	add	r0, r4, r0
   1e1d8:	str	r1, [sp, #8]
   1e1dc:	mov	r1, #0
   1e1e0:	str	r0, [sp, #4]
   1e1e4:	add	r0, sp, #4
   1e1e8:	str	r0, [sp]
   1e1ec:	mov	r0, r8
   1e1f0:	bl	11660 <iconv@plt>
   1e1f4:	cmn	r0, #1
   1e1f8:	mov	r6, r5
   1e1fc:	beq	1e18c <__assert_fail@plt+0xc760>
   1e200:	b	1e0ac <__assert_fail@plt+0xc680>
   1e204:	mov	r0, r5
   1e208:	sub	sp, fp, #28
   1e20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e210:	mov	r0, #12
   1e214:	str	r0, [r9]
   1e218:	b	1e228 <__assert_fail@plt+0xc7fc>
   1e21c:	mov	r0, #12
   1e220:	str	r0, [r7]
   1e224:	mov	r7, r6
   1e228:	mov	r0, r7
   1e22c:	bl	18f5c <__assert_fail@plt+0x7530>
   1e230:	mov	r0, #0
   1e234:	sub	sp, fp, #28
   1e238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e23c:	cmp	r0, #22
   1e240:	beq	1e084 <__assert_fail@plt+0xc658>
   1e244:	b	1e228 <__assert_fail@plt+0xc7fc>
   1e248:	push	{r4, r5, r6, r7, fp, lr}
   1e24c:	add	fp, sp, #16
   1e250:	mov	r5, r0
   1e254:	ldrb	r0, [r0]
   1e258:	cmp	r0, #0
   1e25c:	beq	1e2c8 <__assert_fail@plt+0xc89c>
   1e260:	mov	r4, r1
   1e264:	mov	r0, r1
   1e268:	mov	r1, r2
   1e26c:	mov	r6, r2
   1e270:	bl	1ca10 <__assert_fail@plt+0xafe4>
   1e274:	cmp	r0, #0
   1e278:	beq	1e2c8 <__assert_fail@plt+0xc89c>
   1e27c:	mov	r0, r6
   1e280:	mov	r1, r4
   1e284:	bl	11804 <iconv_open@plt>
   1e288:	mov	r4, #0
   1e28c:	cmn	r0, #1
   1e290:	beq	1e2dc <__assert_fail@plt+0xc8b0>
   1e294:	mov	r6, r0
   1e298:	mov	r0, r5
   1e29c:	mov	r1, r6
   1e2a0:	bl	1e000 <__assert_fail@plt+0xc5d4>
   1e2a4:	cmp	r0, #0
   1e2a8:	beq	1e2fc <__assert_fail@plt+0xc8d0>
   1e2ac:	mov	r5, r0
   1e2b0:	mov	r0, r6
   1e2b4:	bl	11654 <iconv_close@plt>
   1e2b8:	cmn	r0, #1
   1e2bc:	ble	1e31c <__assert_fail@plt+0xc8f0>
   1e2c0:	mov	r0, r5
   1e2c4:	pop	{r4, r5, r6, r7, fp, pc}
   1e2c8:	mov	r0, r5
   1e2cc:	bl	11714 <strdup@plt>
   1e2d0:	mov	r4, r0
   1e2d4:	cmp	r0, #0
   1e2d8:	beq	1e2e4 <__assert_fail@plt+0xc8b8>
   1e2dc:	mov	r0, r4
   1e2e0:	pop	{r4, r5, r6, r7, fp, pc}
   1e2e4:	bl	118b8 <__errno_location@plt>
   1e2e8:	mov	r1, #12
   1e2ec:	mov	r4, #0
   1e2f0:	str	r1, [r0]
   1e2f4:	mov	r0, r4
   1e2f8:	pop	{r4, r5, r6, r7, fp, pc}
   1e2fc:	bl	118b8 <__errno_location@plt>
   1e300:	ldr	r7, [r0]
   1e304:	mov	r5, r0
   1e308:	mov	r0, r6
   1e30c:	bl	11654 <iconv_close@plt>
   1e310:	mov	r0, r4
   1e314:	str	r7, [r5]
   1e318:	pop	{r4, r5, r6, r7, fp, pc}
   1e31c:	mov	r0, r5
   1e320:	bl	18f5c <__assert_fail@plt+0x7530>
   1e324:	mov	r0, r4
   1e328:	pop	{r4, r5, r6, r7, fp, pc}
   1e32c:	push	{r4, r5, fp, lr}
   1e330:	add	fp, sp, #8
   1e334:	mov	r4, r1
   1e338:	mov	r1, #0
   1e33c:	mov	r5, r0
   1e340:	mov	r2, r4
   1e344:	bl	11930 <memchr@plt>
   1e348:	sub	r1, r0, r5
   1e34c:	cmp	r0, #0
   1e350:	addne	r4, r1, #1
   1e354:	mov	r0, r4
   1e358:	pop	{r4, r5, fp, pc}
   1e35c:	push	{r4, sl, fp, lr}
   1e360:	add	fp, sp, #8
   1e364:	sub	sp, sp, #264	; 0x108
   1e368:	add	r1, sp, #7
   1e36c:	movw	r2, #257	; 0x101
   1e370:	bl	1e5c8 <__assert_fail@plt+0xcb9c>
   1e374:	mov	r4, #0
   1e378:	cmp	r0, #0
   1e37c:	bne	1e3bc <__assert_fail@plt+0xc990>
   1e380:	movw	r1, #9296	; 0x2450
   1e384:	add	r0, sp, #7
   1e388:	mov	r2, #2
   1e38c:	movt	r1, #2
   1e390:	bl	1187c <bcmp@plt>
   1e394:	cmp	r0, #0
   1e398:	beq	1e3bc <__assert_fail@plt+0xc990>
   1e39c:	movw	r1, #9298	; 0x2452
   1e3a0:	add	r0, sp, #7
   1e3a4:	mov	r2, #6
   1e3a8:	movt	r1, #2
   1e3ac:	bl	1187c <bcmp@plt>
   1e3b0:	cmp	r0, #0
   1e3b4:	mov	r4, r0
   1e3b8:	movwne	r4, #1
   1e3bc:	mov	r0, r4
   1e3c0:	sub	sp, fp, #8
   1e3c4:	pop	{r4, sl, fp, pc}
   1e3c8:	push	{r4, sl, fp, lr}
   1e3cc:	add	fp, sp, #8
   1e3d0:	mov	r4, #0
   1e3d4:	adds	r0, r0, #16
   1e3d8:	adc	r1, r4, #0
   1e3dc:	rsb	r2, r1, #0
   1e3e0:	eors	r2, r2, r1
   1e3e4:	movwne	r2, #1
   1e3e8:	cmp	r0, #0
   1e3ec:	bmi	1e40c <__assert_fail@plt+0xc9e0>
   1e3f0:	cmp	r2, #0
   1e3f4:	asreq	r2, r0, #31
   1e3f8:	eoreq	r3, r0, r0
   1e3fc:	andeq	r2, r2, #1
   1e400:	eoreq	r1, r1, r2
   1e404:	orrseq	r1, r3, r1
   1e408:	beq	1e414 <__assert_fail@plt+0xc9e8>
   1e40c:	mov	r0, r4
   1e410:	pop	{r4, sl, fp, pc}
   1e414:	bl	117f8 <malloc@plt>
   1e418:	cmp	r0, #0
   1e41c:	addne	r4, r0, #8
   1e420:	movne	r1, #8
   1e424:	bfine	r4, r1, #0, #4
   1e428:	subne	r0, r4, r0
   1e42c:	strbne	r0, [r4, #-1]
   1e430:	mov	r0, r4
   1e434:	pop	{r4, sl, fp, pc}
   1e438:	push	{fp, lr}
   1e43c:	mov	fp, sp
   1e440:	tst	r0, #7
   1e444:	bne	1e460 <__assert_fail@plt+0xca34>
   1e448:	tst	r0, #8
   1e44c:	popeq	{fp, pc}
   1e450:	ldrb	r1, [r0, #-1]
   1e454:	sub	r0, r0, r1
   1e458:	pop	{fp, lr}
   1e45c:	b	18f5c <__assert_fail@plt+0x7530>
   1e460:	bl	11a20 <abort@plt>
   1e464:	push	{r4, sl, fp, lr}
   1e468:	add	fp, sp, #8
   1e46c:	mov	r4, r0
   1e470:	bl	1169c <wcwidth@plt>
   1e474:	cmn	r0, #1
   1e478:	popgt	{r4, sl, fp, pc}
   1e47c:	mov	r0, r4
   1e480:	bl	11774 <iswcntrl@plt>
   1e484:	clz	r0, r0
   1e488:	lsr	r0, r0, #5
   1e48c:	pop	{r4, sl, fp, pc}
   1e490:	push	{r4, r5, r6, sl, fp, lr}
   1e494:	add	fp, sp, #16
   1e498:	mov	r4, r0
   1e49c:	mov	r0, r1
   1e4a0:	mov	r5, r1
   1e4a4:	ldr	r1, [r0], #16
   1e4a8:	cmp	r1, r0
   1e4ac:	beq	1e4b8 <__assert_fail@plt+0xca8c>
   1e4b0:	mov	r6, r1
   1e4b4:	b	1e4c8 <__assert_fail@plt+0xca9c>
   1e4b8:	ldr	r2, [r5, #4]
   1e4bc:	add	r6, r4, #16
   1e4c0:	mov	r0, r6
   1e4c4:	bl	116d8 <memcpy@plt>
   1e4c8:	str	r6, [r4]
   1e4cc:	ldr	r0, [r5, #4]
   1e4d0:	str	r0, [r4, #4]
   1e4d4:	ldrb	r0, [r5, #8]
   1e4d8:	strb	r0, [r4, #8]
   1e4dc:	cmp	r0, #0
   1e4e0:	ldrne	r0, [r5, #12]
   1e4e4:	strne	r0, [r4, #12]
   1e4e8:	pop	{r4, r5, r6, sl, fp, pc}
   1e4ec:	movw	r2, #9304	; 0x2458
   1e4f0:	ubfx	r1, r0, #5, #3
   1e4f4:	and	r0, r0, #31
   1e4f8:	movt	r2, #2
   1e4fc:	ldr	r1, [r2, r1, lsl #2]
   1e500:	mov	r2, #1
   1e504:	and	r0, r1, r2, lsl r0
   1e508:	cmp	r0, #0
   1e50c:	movwne	r0, #1
   1e510:	bx	lr
   1e514:	push	{r4, r5, r6, sl, fp, lr}
   1e518:	add	fp, sp, #16
   1e51c:	sub	sp, sp, #56	; 0x38
   1e520:	mov	r5, r0
   1e524:	bl	117c8 <__ctype_get_mb_cur_max@plt>
   1e528:	cmp	r0, #2
   1e52c:	bcc	1e5b8 <__assert_fail@plt+0xcb8c>
   1e530:	mov	r4, #0
   1e534:	mov	r0, sp
   1e538:	str	r4, [sp, #8]
   1e53c:	str	r4, [sp, #4]
   1e540:	strb	r4, [sp, #12]
   1e544:	strb	r4, [sp]
   1e548:	str	r5, [sp, #16]
   1e54c:	bl	1dabc <__assert_fail@plt+0xc090>
   1e550:	ldrb	r0, [sp, #24]
   1e554:	cmp	r0, #0
   1e558:	beq	1e568 <__assert_fail@plt+0xcb3c>
   1e55c:	ldr	r0, [sp, #28]
   1e560:	cmp	r0, #0
   1e564:	beq	1e5ac <__assert_fail@plt+0xcb80>
   1e568:	mov	r6, #0
   1e56c:	mov	r5, sp
   1e570:	mov	r4, #0
   1e574:	strb	r6, [sp, #12]
   1e578:	ldr	r0, [sp, #16]
   1e57c:	ldr	r1, [sp, #20]
   1e580:	add	r0, r0, r1
   1e584:	str	r0, [sp, #16]
   1e588:	mov	r0, r5
   1e58c:	bl	1dabc <__assert_fail@plt+0xc090>
   1e590:	ldrb	r1, [sp, #24]
   1e594:	ldr	r0, [sp, #28]
   1e598:	add	r4, r4, #1
   1e59c:	cmp	r1, #0
   1e5a0:	beq	1e574 <__assert_fail@plt+0xcb48>
   1e5a4:	cmp	r0, #0
   1e5a8:	bne	1e574 <__assert_fail@plt+0xcb48>
   1e5ac:	mov	r0, r4
   1e5b0:	sub	sp, fp, #16
   1e5b4:	pop	{r4, r5, r6, sl, fp, pc}
   1e5b8:	mov	r0, r5
   1e5bc:	sub	sp, fp, #16
   1e5c0:	pop	{r4, r5, r6, sl, fp, lr}
   1e5c4:	b	11888 <strlen@plt>
   1e5c8:	push	{r4, r5, r6, r7, fp, lr}
   1e5cc:	add	fp, sp, #16
   1e5d0:	mov	r4, r1
   1e5d4:	mov	r1, #0
   1e5d8:	mov	r6, r2
   1e5dc:	bl	1199c <setlocale@plt>
   1e5e0:	cmp	r0, #0
   1e5e4:	beq	1e614 <__assert_fail@plt+0xcbe8>
   1e5e8:	mov	r7, r0
   1e5ec:	bl	11888 <strlen@plt>
   1e5f0:	cmp	r0, r6
   1e5f4:	bcs	1e630 <__assert_fail@plt+0xcc04>
   1e5f8:	add	r2, r0, #1
   1e5fc:	mov	r0, r4
   1e600:	mov	r1, r7
   1e604:	bl	116d8 <memcpy@plt>
   1e608:	mov	r5, #0
   1e60c:	mov	r0, r5
   1e610:	pop	{r4, r5, r6, r7, fp, pc}
   1e614:	mov	r5, #22
   1e618:	cmp	r6, #0
   1e61c:	beq	1e658 <__assert_fail@plt+0xcc2c>
   1e620:	mov	r0, #0
   1e624:	strb	r0, [r4]
   1e628:	mov	r0, r5
   1e62c:	pop	{r4, r5, r6, r7, fp, pc}
   1e630:	mov	r5, #34	; 0x22
   1e634:	cmp	r6, #0
   1e638:	beq	1e658 <__assert_fail@plt+0xcc2c>
   1e63c:	sub	r6, r6, #1
   1e640:	mov	r0, r4
   1e644:	mov	r1, r7
   1e648:	mov	r2, r6
   1e64c:	bl	116d8 <memcpy@plt>
   1e650:	mov	r0, #0
   1e654:	strb	r0, [r4, r6]
   1e658:	mov	r0, r5
   1e65c:	pop	{r4, r5, r6, r7, fp, pc}
   1e660:	mov	r1, #0
   1e664:	b	1199c <setlocale@plt>
   1e668:	cmp	r3, #0
   1e66c:	cmpeq	r2, #0
   1e670:	bne	1e688 <__assert_fail@plt+0xcc5c>
   1e674:	cmp	r1, #0
   1e678:	cmpeq	r0, #0
   1e67c:	mvnne	r1, #0
   1e680:	mvnne	r0, #0
   1e684:	b	1e6a4 <__assert_fail@plt+0xcc78>
   1e688:	sub	sp, sp, #8
   1e68c:	push	{sp, lr}
   1e690:	bl	1e6b4 <__assert_fail@plt+0xcc88>
   1e694:	ldr	lr, [sp, #4]
   1e698:	add	sp, sp, #8
   1e69c:	pop	{r2, r3}
   1e6a0:	bx	lr
   1e6a4:	push	{r1, lr}
   1e6a8:	mov	r0, #8
   1e6ac:	bl	1163c <raise@plt>
   1e6b0:	pop	{r1, pc}
   1e6b4:	cmp	r1, r3
   1e6b8:	cmpeq	r0, r2
   1e6bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6c0:	mov	r4, r0
   1e6c4:	movcc	r0, #0
   1e6c8:	mov	r5, r1
   1e6cc:	ldr	lr, [sp, #36]	; 0x24
   1e6d0:	movcc	r1, r0
   1e6d4:	bcc	1e7d0 <__assert_fail@plt+0xcda4>
   1e6d8:	cmp	r3, #0
   1e6dc:	clzeq	ip, r2
   1e6e0:	clzne	ip, r3
   1e6e4:	addeq	ip, ip, #32
   1e6e8:	cmp	r5, #0
   1e6ec:	clzeq	r1, r4
   1e6f0:	addeq	r1, r1, #32
   1e6f4:	clzne	r1, r5
   1e6f8:	sub	ip, ip, r1
   1e6fc:	sub	sl, ip, #32
   1e700:	lsl	r9, r3, ip
   1e704:	rsb	fp, ip, #32
   1e708:	orr	r9, r9, r2, lsl sl
   1e70c:	orr	r9, r9, r2, lsr fp
   1e710:	lsl	r8, r2, ip
   1e714:	cmp	r5, r9
   1e718:	cmpeq	r4, r8
   1e71c:	movcc	r0, #0
   1e720:	movcc	r1, r0
   1e724:	bcc	1e740 <__assert_fail@plt+0xcd14>
   1e728:	mov	r0, #1
   1e72c:	subs	r4, r4, r8
   1e730:	lsl	r1, r0, sl
   1e734:	orr	r1, r1, r0, lsr fp
   1e738:	lsl	r0, r0, ip
   1e73c:	sbc	r5, r5, r9
   1e740:	cmp	ip, #0
   1e744:	beq	1e7d0 <__assert_fail@plt+0xcda4>
   1e748:	lsr	r6, r8, #1
   1e74c:	orr	r6, r6, r9, lsl #31
   1e750:	lsr	r7, r9, #1
   1e754:	mov	r2, ip
   1e758:	b	1e77c <__assert_fail@plt+0xcd50>
   1e75c:	subs	r3, r4, r6
   1e760:	sbc	r8, r5, r7
   1e764:	adds	r3, r3, r3
   1e768:	adc	r8, r8, r8
   1e76c:	adds	r4, r3, #1
   1e770:	adc	r5, r8, #0
   1e774:	subs	r2, r2, #1
   1e778:	beq	1e798 <__assert_fail@plt+0xcd6c>
   1e77c:	cmp	r5, r7
   1e780:	cmpeq	r4, r6
   1e784:	bcs	1e75c <__assert_fail@plt+0xcd30>
   1e788:	adds	r4, r4, r4
   1e78c:	adc	r5, r5, r5
   1e790:	subs	r2, r2, #1
   1e794:	bne	1e77c <__assert_fail@plt+0xcd50>
   1e798:	lsr	r3, r4, ip
   1e79c:	orr	r3, r3, r5, lsl fp
   1e7a0:	lsr	r2, r5, ip
   1e7a4:	orr	r3, r3, r5, lsr sl
   1e7a8:	adds	r0, r0, r4
   1e7ac:	mov	r4, r3
   1e7b0:	lsl	r3, r2, ip
   1e7b4:	orr	r3, r3, r4, lsl sl
   1e7b8:	lsl	ip, r4, ip
   1e7bc:	orr	r3, r3, r4, lsr fp
   1e7c0:	adc	r1, r1, r5
   1e7c4:	subs	r0, r0, ip
   1e7c8:	mov	r5, r2
   1e7cc:	sbc	r1, r1, r3
   1e7d0:	cmp	lr, #0
   1e7d4:	strdne	r4, [lr]
   1e7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e7e0:	mov	r7, r0
   1e7e4:	ldr	r6, [pc, #72]	; 1e834 <__assert_fail@plt+0xce08>
   1e7e8:	ldr	r5, [pc, #72]	; 1e838 <__assert_fail@plt+0xce0c>
   1e7ec:	add	r6, pc, r6
   1e7f0:	add	r5, pc, r5
   1e7f4:	sub	r6, r6, r5
   1e7f8:	mov	r8, r1
   1e7fc:	mov	r9, r2
   1e800:	bl	11604 <calloc@plt-0x20>
   1e804:	asrs	r6, r6, #2
   1e808:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e80c:	mov	r4, #0
   1e810:	add	r4, r4, #1
   1e814:	ldr	r3, [r5], #4
   1e818:	mov	r2, r9
   1e81c:	mov	r1, r8
   1e820:	mov	r0, r7
   1e824:	blx	r3
   1e828:	cmp	r6, r4
   1e82c:	bne	1e810 <__assert_fail@plt+0xcde4>
   1e830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e834:	andeq	r4, r1, r0, lsl r7
   1e838:	andeq	r4, r1, r8, lsl #14
   1e83c:	bx	lr
   1e840:	ldr	r3, [pc, #12]	; 1e854 <__assert_fail@plt+0xce28>
   1e844:	mov	r1, #0
   1e848:	add	r3, pc, r3
   1e84c:	ldr	r2, [r3]
   1e850:	b	118dc <__cxa_atexit@plt>
   1e854:	andeq	r4, r1, r4, lsr #18

Disassembly of section .fini:

0001e858 <.fini>:
   1e858:	push	{r3, lr}
   1e85c:	pop	{r3, pc}
