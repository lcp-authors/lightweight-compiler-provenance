
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011320 <.init>:
   11320:	push	{r3, lr}
   11324:	bl	1179c <__assert_fail@plt+0x48>
   11328:	pop	{r3, pc}

Disassembly of section .plt:

0001132c <calloc@plt-0x14>:
   1132c:	push	{lr}		; (str lr, [sp, #-4]!)
   11330:	ldr	lr, [pc, #4]	; 1133c <calloc@plt-0x4>
   11334:	add	lr, pc, lr
   11338:	ldr	pc, [lr, #8]!
   1133c:	andeq	r1, r2, r4, asr #25

00011340 <calloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #135168	; 0x21000
   11348:	ldr	pc, [ip, #3268]!	; 0xcc4

0001134c <fputs_unlocked@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #135168	; 0x21000
   11354:	ldr	pc, [ip, #3260]!	; 0xcbc

00011358 <raise@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #135168	; 0x21000
   11360:	ldr	pc, [ip, #3252]!	; 0xcb4

00011364 <__gmpz_scan1@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #135168	; 0x21000
   1136c:	ldr	pc, [ip, #3244]!	; 0xcac

00011370 <iconv_close@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #135168	; 0x21000
   11378:	ldr	pc, [ip, #3236]!	; 0xca4

0001137c <iconv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #135168	; 0x21000
   11384:	ldr	pc, [ip, #3228]!	; 0xc9c

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #135168	; 0x21000
   11390:	ldr	pc, [ip, #3220]!	; 0xc94

00011394 <fflush@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #135168	; 0x21000
   1139c:	ldr	pc, [ip, #3212]!	; 0xc8c

000113a0 <__gmpz_sub_ui@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #135168	; 0x21000
   113a8:	ldr	pc, [ip, #3204]!	; 0xc84

000113ac <__gmpz_clears@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #135168	; 0x21000
   113b4:	ldr	pc, [ip, #3196]!	; 0xc7c

000113b8 <wcwidth@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #135168	; 0x21000
   113c0:	ldr	pc, [ip, #3188]!	; 0xc74

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #135168	; 0x21000
   113cc:	ldr	pc, [ip, #3180]!	; 0xc6c

000113d0 <__gmpz_set_ui@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #135168	; 0x21000
   113d8:	ldr	pc, [ip, #3172]!	; 0xc64

000113dc <free@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #135168	; 0x21000
   113e4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #135168	; 0x21000
   113f0:	ldr	pc, [ip, #3156]!	; 0xc54

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #135168	; 0x21000
   113fc:	ldr	pc, [ip, #3148]!	; 0xc4c

00011400 <__gmpz_sub@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #135168	; 0x21000
   11408:	ldr	pc, [ip, #3140]!	; 0xc44

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #135168	; 0x21000
   11414:	ldr	pc, [ip, #3132]!	; 0xc3c

00011418 <memcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #135168	; 0x21000
   11420:	ldr	pc, [ip, #3124]!	; 0xc34

00011424 <fputc_unlocked@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #135168	; 0x21000
   1142c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011430 <dcgettext@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #135168	; 0x21000
   11438:	ldr	pc, [ip, #3108]!	; 0xc24

0001143c <__gmpz_powm@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #135168	; 0x21000
   11444:	ldr	pc, [ip, #3100]!	; 0xc1c

00011448 <strdup@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #135168	; 0x21000
   11450:	ldr	pc, [ip, #3092]!	; 0xc14

00011454 <__gmpz_divexact@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #135168	; 0x21000
   1145c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011460 <__gmpz_inits@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #135168	; 0x21000
   11468:	ldr	pc, [ip, #3076]!	; 0xc04

0001146c <__gmpz_set@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #135168	; 0x21000
   11474:	ldr	pc, [ip, #3068]!	; 0xbfc

00011478 <realloc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #135168	; 0x21000
   11480:	ldr	pc, [ip, #3060]!	; 0xbf4

00011484 <__gmpz_mul@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #135168	; 0x21000
   1148c:	ldr	pc, [ip, #3052]!	; 0xbec

00011490 <__gmpz_tdiv_q_ui@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #135168	; 0x21000
   11498:	ldr	pc, [ip, #3044]!	; 0xbe4

0001149c <textdomain@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #135168	; 0x21000
   114a4:	ldr	pc, [ip, #3036]!	; 0xbdc

000114a8 <iswcntrl@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #135168	; 0x21000
   114b0:	ldr	pc, [ip, #3028]!	; 0xbd4

000114b4 <__gmpz_out_str@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #135168	; 0x21000
   114bc:	ldr	pc, [ip, #3020]!	; 0xbcc

000114c0 <fflush_unlocked@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #135168	; 0x21000
   114c8:	ldr	pc, [ip, #3012]!	; 0xbc4

000114cc <iswprint@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #135168	; 0x21000
   114d4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114d8 <fwrite@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #135168	; 0x21000
   114e0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114e4 <lseek64@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #135168	; 0x21000
   114ec:	ldr	pc, [ip, #2988]!	; 0xbac

000114f0 <__gmpz_fdiv_q_2exp@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #135168	; 0x21000
   114f8:	ldr	pc, [ip, #2980]!	; 0xba4

000114fc <__ctype_get_mb_cur_max@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #135168	; 0x21000
   11504:	ldr	pc, [ip, #2972]!	; 0xb9c

00011508 <__fpending@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #135168	; 0x21000
   11510:	ldr	pc, [ip, #2964]!	; 0xb94

00011514 <mbrtowc@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #135168	; 0x21000
   1151c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011520 <error@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #135168	; 0x21000
   11528:	ldr	pc, [ip, #2948]!	; 0xb84

0001152c <malloc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #135168	; 0x21000
   11534:	ldr	pc, [ip, #2940]!	; 0xb7c

00011538 <iconv_open@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #135168	; 0x21000
   11540:	ldr	pc, [ip, #2932]!	; 0xb74

00011544 <__libc_start_main@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #135168	; 0x21000
   1154c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011550 <__freading@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #135168	; 0x21000
   11558:	ldr	pc, [ip, #2916]!	; 0xb64

0001155c <__gmpz_init_set_si@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #135168	; 0x21000
   11564:	ldr	pc, [ip, #2908]!	; 0xb5c

00011568 <__gmpz_add_ui@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #135168	; 0x21000
   11570:	ldr	pc, [ip, #2900]!	; 0xb54

00011574 <__gmon_start__@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #135168	; 0x21000
   1157c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011580 <getopt_long@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #135168	; 0x21000
   11588:	ldr	pc, [ip, #2884]!	; 0xb44

0001158c <__ctype_b_loc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #135168	; 0x21000
   11594:	ldr	pc, [ip, #2876]!	; 0xb3c

00011598 <exit@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #135168	; 0x21000
   115a0:	ldr	pc, [ip, #2868]!	; 0xb34

000115a4 <iswspace@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #135168	; 0x21000
   115ac:	ldr	pc, [ip, #2860]!	; 0xb2c

000115b0 <strlen@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #135168	; 0x21000
   115b8:	ldr	pc, [ip, #2852]!	; 0xb24

000115bc <strchr@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #135168	; 0x21000
   115c4:	ldr	pc, [ip, #2844]!	; 0xb1c

000115c8 <__gmpz_divisible_ui_p@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #135168	; 0x21000
   115d0:	ldr	pc, [ip, #2836]!	; 0xb14

000115d4 <__gmpz_clear@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #135168	; 0x21000
   115dc:	ldr	pc, [ip, #2828]!	; 0xb0c

000115e0 <__errno_location@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #135168	; 0x21000
   115e8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ec <iswalnum@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #135168	; 0x21000
   115f4:	ldr	pc, [ip, #2812]!	; 0xafc

000115f8 <__sprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #135168	; 0x21000
   11600:	ldr	pc, [ip, #2804]!	; 0xaf4

00011604 <__cxa_atexit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #135168	; 0x21000
   1160c:	ldr	pc, [ip, #2796]!	; 0xaec

00011610 <memset@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #135168	; 0x21000
   11618:	ldr	pc, [ip, #2788]!	; 0xae4

0001161c <__gmpz_tdiv_q_2exp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #135168	; 0x21000
   11624:	ldr	pc, [ip, #2780]!	; 0xadc

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #135168	; 0x21000
   11630:	ldr	pc, [ip, #2772]!	; 0xad4

00011634 <write@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #135168	; 0x21000
   1163c:	ldr	pc, [ip, #2764]!	; 0xacc

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #135168	; 0x21000
   11648:	ldr	pc, [ip, #2756]!	; 0xac4

0001164c <__fprintf_chk@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #135168	; 0x21000
   11654:	ldr	pc, [ip, #2748]!	; 0xabc

00011658 <memchr@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #135168	; 0x21000
   11660:	ldr	pc, [ip, #2740]!	; 0xab4

00011664 <fclose@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #135168	; 0x21000
   1166c:	ldr	pc, [ip, #2732]!	; 0xaac

00011670 <strnlen@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #135168	; 0x21000
   11678:	ldr	pc, [ip, #2724]!	; 0xaa4

0001167c <fseeko64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #135168	; 0x21000
   11684:	ldr	pc, [ip, #2716]!	; 0xa9c

00011688 <__gmpz_mod@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #135168	; 0x21000
   11690:	ldr	pc, [ip, #2708]!	; 0xa94

00011694 <__gmpz_init_set_ui@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #135168	; 0x21000
   1169c:	ldr	pc, [ip, #2700]!	; 0xa8c

000116a0 <__gmpz_cmp@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #135168	; 0x21000
   116a8:	ldr	pc, [ip, #2692]!	; 0xa84

000116ac <__uflow@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #135168	; 0x21000
   116b4:	ldr	pc, [ip, #2684]!	; 0xa7c

000116b8 <__overflow@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #135168	; 0x21000
   116c0:	ldr	pc, [ip, #2676]!	; 0xa74

000116c4 <setlocale@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #135168	; 0x21000
   116cc:	ldr	pc, [ip, #2668]!	; 0xa6c

000116d0 <strrchr@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #135168	; 0x21000
   116d8:	ldr	pc, [ip, #2660]!	; 0xa64

000116dc <nl_langinfo@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #135168	; 0x21000
   116e4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116e8 <__gmpz_gcd@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #135168	; 0x21000
   116f0:	ldr	pc, [ip, #2644]!	; 0xa54

000116f4 <__gmpz_init_set_str@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #135168	; 0x21000
   116fc:	ldr	pc, [ip, #2636]!	; 0xa4c

00011700 <bindtextdomain@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #135168	; 0x21000
   11708:	ldr	pc, [ip, #2628]!	; 0xa44

0001170c <__gmpz_cmp_ui@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #135168	; 0x21000
   11714:	ldr	pc, [ip, #2620]!	; 0xa3c

00011718 <__gmpz_init@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #135168	; 0x21000
   11720:	ldr	pc, [ip, #2612]!	; 0xa34

00011724 <__gmpz_powm_ui@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #135168	; 0x21000
   1172c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011730 <isatty@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #135168	; 0x21000
   11738:	ldr	pc, [ip, #2596]!	; 0xa24

0001173c <strncmp@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #135168	; 0x21000
   11744:	ldr	pc, [ip, #2588]!	; 0xa1c

00011748 <abort@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #135168	; 0x21000
   11750:	ldr	pc, [ip, #2580]!	; 0xa14

00011754 <__assert_fail@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #135168	; 0x21000
   1175c:	ldr	pc, [ip, #2572]!	; 0xa0c

Disassembly of section .text:

00011760 <.text>:
   11760:	mov	fp, #0
   11764:	mov	lr, #0
   11768:	pop	{r1}		; (ldr r1, [sp], #4)
   1176c:	mov	r2, sp
   11770:	push	{r2}		; (str r2, [sp, #-4]!)
   11774:	push	{r0}		; (str r0, [sp, #-4]!)
   11778:	ldr	ip, [pc, #16]	; 11790 <__assert_fail@plt+0x3c>
   1177c:	push	{ip}		; (str ip, [sp, #-4]!)
   11780:	ldr	r0, [pc, #12]	; 11794 <__assert_fail@plt+0x40>
   11784:	ldr	r3, [pc, #12]	; 11798 <__assert_fail@plt+0x44>
   11788:	bl	11544 <__libc_start_main@plt>
   1178c:	bl	11748 <abort@plt>
   11790:			; <UNDEFINED> instruction: 0x0001edb8
   11794:	andeq	r7, r1, r4, lsr #18
   11798:	andeq	lr, r1, r8, asr sp
   1179c:	ldr	r3, [pc, #20]	; 117b8 <__assert_fail@plt+0x64>
   117a0:	ldr	r2, [pc, #20]	; 117bc <__assert_fail@plt+0x68>
   117a4:	add	r3, pc, r3
   117a8:	ldr	r2, [r3, r2]
   117ac:	cmp	r2, #0
   117b0:	bxeq	lr
   117b4:	b	11574 <__gmon_start__@plt>
   117b8:	andeq	r1, r2, r4, asr r8
   117bc:	andeq	r0, r0, ip, ror #2
   117c0:	ldr	r0, [pc, #24]	; 117e0 <__assert_fail@plt+0x8c>
   117c4:	ldr	r3, [pc, #24]	; 117e4 <__assert_fail@plt+0x90>
   117c8:	cmp	r3, r0
   117cc:	bxeq	lr
   117d0:	ldr	r3, [pc, #16]	; 117e8 <__assert_fail@plt+0x94>
   117d4:	cmp	r3, #0
   117d8:	bxeq	lr
   117dc:	bx	r3
   117e0:	andeq	r3, r3, r4, asr #3
   117e4:	andeq	r3, r3, r4, asr #3
   117e8:	andeq	r0, r0, r0
   117ec:	ldr	r0, [pc, #36]	; 11818 <__assert_fail@plt+0xc4>
   117f0:	ldr	r1, [pc, #36]	; 1181c <__assert_fail@plt+0xc8>
   117f4:	sub	r1, r1, r0
   117f8:	asr	r1, r1, #2
   117fc:	add	r1, r1, r1, lsr #31
   11800:	asrs	r1, r1, #1
   11804:	bxeq	lr
   11808:	ldr	r3, [pc, #16]	; 11820 <__assert_fail@plt+0xcc>
   1180c:	cmp	r3, #0
   11810:	bxeq	lr
   11814:	bx	r3
   11818:	andeq	r3, r3, r4, asr #3
   1181c:	andeq	r3, r3, r4, asr #3
   11820:	andeq	r0, r0, r0
   11824:	push	{r4, lr}
   11828:	ldr	r4, [pc, #24]	; 11848 <__assert_fail@plt+0xf4>
   1182c:	ldrb	r3, [r4]
   11830:	cmp	r3, #0
   11834:	popne	{r4, pc}
   11838:	bl	117c0 <__assert_fail@plt+0x6c>
   1183c:	mov	r3, #1
   11840:	strb	r3, [r4]
   11844:	pop	{r4, pc}
   11848:	andeq	r3, r3, r8, ror #3
   1184c:	b	117ec <__assert_fail@plt+0x98>
   11850:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11854:	strd	r6, [sp, #8]
   11858:	strd	r8, [sp, #16]
   1185c:	str	sl, [sp, #24]
   11860:	str	lr, [sp, #28]
   11864:	mov	r4, r0
   11868:	mov	r5, r1
   1186c:	and	r0, r2, #1
   11870:	mov	r1, #0
   11874:	orrs	r1, r0, r1
   11878:	bne	11894 <__assert_fail@plt+0x140>
   1187c:	mov	r0, r4
   11880:	mov	r1, r5
   11884:	mov	r4, r2
   11888:	mov	r5, r3
   1188c:	mov	r2, r0
   11890:	mov	r3, r1
   11894:	orrs	r1, r4, r5
   11898:	beq	11924 <__assert_fail@plt+0x1d0>
   1189c:	lsr	ip, r2, #1
   118a0:	orr	ip, ip, r3, lsl #31
   118a4:	lsr	lr, r3, #1
   118a8:	mov	r1, #0
   118ac:	b	118c4 <__assert_fail@plt+0x170>
   118b0:	lsr	r3, r4, #1
   118b4:	orr	r3, r3, r5, lsl #31
   118b8:	lsr	r2, r5, #1
   118bc:	mov	r4, r3
   118c0:	mov	r5, r2
   118c4:	and	r8, r4, #1
   118c8:	mov	r9, r1
   118cc:	orrs	r3, r8, r9
   118d0:	beq	118b0 <__assert_fail@plt+0x15c>
   118d4:	lsr	r3, r4, #1
   118d8:	orr	r3, r3, r5, lsl #31
   118dc:	lsr	r2, r5, #1
   118e0:	subs	r6, r3, ip
   118e4:	sbc	r7, r2, lr
   118e8:	orrs	r3, r6, r7
   118ec:	beq	11918 <__assert_fail@plt+0x1c4>
   118f0:	asr	r3, r7, #31
   118f4:	and	r0, r6, r3
   118f8:	and	sl, r7, r3
   118fc:	adds	ip, ip, r0
   11900:	adc	lr, lr, sl
   11904:	eor	r0, r6, r3
   11908:	eor	sl, r7, r3
   1190c:	subs	r4, r0, r3
   11910:	sbc	r5, sl, r3
   11914:	b	118c4 <__assert_fail@plt+0x170>
   11918:	bic	r2, r4, #1
   1191c:	adds	r2, r2, #1
   11920:	adc	r3, r5, #0
   11924:	mov	r0, r2
   11928:	mov	r1, r3
   1192c:	ldrd	r4, [sp]
   11930:	ldrd	r6, [sp, #8]
   11934:	ldrd	r8, [sp, #16]
   11938:	ldr	sl, [sp, #24]
   1193c:	add	sp, sp, #28
   11940:	pop	{pc}		; (ldr pc, [sp], #4)
   11944:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11948:	strd	r6, [sp, #8]
   1194c:	str	r8, [sp, #16]
   11950:	str	lr, [sp, #20]
   11954:	mov	r6, r2
   11958:	mov	r7, r3
   1195c:	ldrb	r2, [r0, #250]	; 0xfa
   11960:	add	r1, r0, #16
   11964:	add	ip, r0, #224	; 0xe0
   11968:	sub	lr, r2, #1
   1196c:	cmp	lr, #0
   11970:	blt	11a38 <__assert_fail@plt+0x2e4>
   11974:	mov	r8, lr
   11978:	lsl	r3, lr, #3
   1197c:	ldrd	r4, [r1, r3]
   11980:	cmp	r7, r5
   11984:	cmpeq	r6, r4
   11988:	bcs	11a40 <__assert_fail@plt+0x2ec>
   1198c:	add	lr, r2, #1
   11990:	add	lr, r0, lr, lsl #3
   11994:	mov	r3, r8
   11998:	subs	r3, r3, #1
   1199c:	bmi	119d0 <__assert_fail@plt+0x27c>
   119a0:	ldrd	r4, [lr, #-8]!
   119a4:	cmp	r5, r7
   119a8:	cmpeq	r4, r6
   119ac:	bhi	11998 <__assert_fail@plt+0x244>
   119b0:	mov	lr, r3
   119b4:	lsl	r4, r3, #3
   119b8:	ldrd	r4, [r4, r1]
   119bc:	cmp	r5, r7
   119c0:	cmpeq	r4, r6
   119c4:	beq	11a58 <__assert_fail@plt+0x304>
   119c8:	cmp	r8, r3
   119cc:	ble	11a08 <__assert_fail@plt+0x2b4>
   119d0:	add	r8, r2, #2
   119d4:	add	r8, r0, r8, lsl #3
   119d8:	add	lr, r2, #224	; 0xe0
   119dc:	add	lr, r0, lr
   119e0:	ldrd	r4, [r8, #-8]!
   119e4:	strd	r4, [r8, #8]
   119e8:	mov	r4, lr
   119ec:	ldrb	r5, [lr, #-1]
   119f0:	strb	r5, [r4], #-1
   119f4:	sub	lr, lr, #226	; 0xe2
   119f8:	sub	r5, lr, r0
   119fc:	mov	lr, r4
   11a00:	cmp	r3, r5
   11a04:	blt	119e0 <__assert_fail@plt+0x28c>
   11a08:	add	r3, r3, #1
   11a0c:	lsl	lr, r3, #3
   11a10:	strd	r6, [r1, lr]
   11a14:	ldr	r1, [sp, #24]
   11a18:	strb	r1, [ip, r3]
   11a1c:	add	r2, r2, #1
   11a20:	strb	r2, [r0, #250]	; 0xfa
   11a24:	ldrd	r4, [sp]
   11a28:	ldrd	r6, [sp, #8]
   11a2c:	ldr	r8, [sp, #16]
   11a30:	add	sp, sp, #20
   11a34:	pop	{pc}		; (ldr pc, [sp], #4)
   11a38:	mov	r3, lr
   11a3c:	b	11a08 <__assert_fail@plt+0x2b4>
   11a40:	lsl	r3, lr, #3
   11a44:	ldrd	r4, [r1, r3]
   11a48:	cmp	r5, r7
   11a4c:	cmpeq	r4, r6
   11a50:	movne	r3, lr
   11a54:	bne	11a08 <__assert_fail@plt+0x2b4>
   11a58:	ldrb	r3, [ip, lr]
   11a5c:	ldr	r2, [sp, #24]
   11a60:	add	r3, r3, r2
   11a64:	strb	r3, [ip, lr]
   11a68:	b	11a24 <__assert_fail@plt+0x2d0>
   11a6c:	strd	r4, [sp, #-12]!
   11a70:	str	lr, [sp, #8]
   11a74:	sub	sp, sp, #12
   11a78:	ldr	ip, [sp, #28]
   11a7c:	cmp	ip, #0
   11a80:	beq	11ab0 <__assert_fail@plt+0x35c>
   11a84:	movw	r1, #60904	; 0xede8
   11a88:	movt	r1, #1
   11a8c:	ldr	lr, [sp, #24]
   11a90:	add	r1, r1, lr
   11a94:	add	ip, r1, ip
   11a98:	ldrb	r4, [r1], #1
   11a9c:	mov	r5, #0
   11aa0:	adds	r2, r2, r4
   11aa4:	adc	r3, r3, r5
   11aa8:	cmp	r1, ip
   11aac:	bne	11a98 <__assert_fail@plt+0x344>
   11ab0:	mov	r1, #1
   11ab4:	str	r1, [sp]
   11ab8:	bl	11944 <__assert_fail@plt+0x1f0>
   11abc:	add	sp, sp, #12
   11ac0:	ldrd	r4, [sp]
   11ac4:	add	sp, sp, #8
   11ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   11acc:	str	r4, [sp, #-8]!
   11ad0:	str	lr, [sp, #4]
   11ad4:	movw	r3, #12780	; 0x31ec
   11ad8:	movt	r3, #3
   11adc:	ldr	r1, [r3]
   11ae0:	ldr	r4, [r3, #4]
   11ae4:	sub	r4, r4, r1
   11ae8:	mov	r2, r4
   11aec:	mov	r0, #1
   11af0:	bl	17cf4 <__assert_fail@plt+0x65a0>
   11af4:	cmp	r0, r4
   11af8:	bne	11b18 <__assert_fail@plt+0x3c4>
   11afc:	movw	r3, #12780	; 0x31ec
   11b00:	movt	r3, #3
   11b04:	ldr	r2, [r3]
   11b08:	str	r2, [r3, #4]
   11b0c:	ldr	r4, [sp]
   11b10:	add	sp, sp, #4
   11b14:	pop	{pc}		; (ldr pc, [sp], #4)
   11b18:	bl	115e0 <__errno_location@plt>
   11b1c:	ldr	r4, [r0]
   11b20:	mov	r2, #5
   11b24:	movw	r1, #7856	; 0x1eb0
   11b28:	movt	r1, #2
   11b2c:	mov	r0, #0
   11b30:	bl	11430 <dcgettext@plt>
   11b34:	mov	r3, r0
   11b38:	movw	r2, #9156	; 0x23c4
   11b3c:	movt	r2, #2
   11b40:	mov	r1, r4
   11b44:	mov	r0, #1
   11b48:	bl	11520 <error@plt>
   11b4c:	strd	r4, [sp, #-16]!
   11b50:	str	r6, [sp, #8]
   11b54:	str	lr, [sp, #12]
   11b58:	mov	r6, r0
   11b5c:	ldr	r3, [r0, #8]
   11b60:	cmp	r3, #0
   11b64:	beq	11b90 <__assert_fail@plt+0x43c>
   11b68:	mov	r4, #0
   11b6c:	mov	r5, r4
   11b70:	ldr	r0, [r6]
   11b74:	add	r0, r0, r4
   11b78:	bl	115d4 <__gmpz_clear@plt>
   11b7c:	add	r5, r5, #1
   11b80:	add	r4, r4, #12
   11b84:	ldr	r3, [r6, #8]
   11b88:	cmp	r3, r5
   11b8c:	bhi	11b70 <__assert_fail@plt+0x41c>
   11b90:	ldr	r0, [r6]
   11b94:	bl	17c94 <__assert_fail@plt+0x6540>
   11b98:	ldr	r0, [r6, #4]
   11b9c:	bl	17c94 <__assert_fail@plt+0x6540>
   11ba0:	ldrd	r4, [sp]
   11ba4:	ldr	r6, [sp, #8]
   11ba8:	add	sp, sp, #12
   11bac:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11bb4:	strd	r6, [sp, #8]
   11bb8:	strd	r8, [sp, #16]
   11bbc:	strd	sl, [sp, #24]
   11bc0:	str	lr, [sp, #32]
   11bc4:	sub	sp, sp, #228	; 0xe4
   11bc8:	str	r0, [sp, #208]	; 0xd0
   11bcc:	mov	r4, r2
   11bd0:	mov	r5, r3
   11bd4:	strd	r4, [sp, #24]
   11bd8:	ldr	r3, [sp, #264]	; 0x108
   11bdc:	ldr	ip, [sp, #268]	; 0x10c
   11be0:	ldr	r2, [sp, #280]	; 0x118
   11be4:	str	r2, [sp, #128]	; 0x80
   11be8:	ldr	r2, [sp, #284]	; 0x11c
   11bec:	str	r2, [sp, #132]	; 0x84
   11bf0:	add	r2, sp, #304	; 0x130
   11bf4:	ldrd	r0, [r2]
   11bf8:	rsbs	r0, r0, #0
   11bfc:	rsc	r1, r1, #0
   11c00:	strd	r0, [sp, #120]	; 0x78
   11c04:	cmp	r4, #0
   11c08:	sbcs	r2, r5, #0
   11c0c:	blt	12478 <__assert_fail@plt+0xd24>
   11c10:	add	r2, sp, #272	; 0x110
   11c14:	ldrd	r0, [r2]
   11c18:	cmp	r0, #0
   11c1c:	sbcs	r2, r1, #0
   11c20:	blt	12494 <__assert_fail@plt+0xd40>
   11c24:	add	r2, sp, #288	; 0x120
   11c28:	ldrd	r0, [r2]
   11c2c:	cmp	r0, #0
   11c30:	sbcs	r2, r1, #0
   11c34:	blt	124b0 <__assert_fail@plt+0xd5c>
   11c38:	ldr	r2, [sp, #128]	; 0x80
   11c3c:	umull	r8, r9, r3, r2
   11c40:	strd	r8, [sp, #40]	; 0x28
   11c44:	umull	r4, r5, ip, r2
   11c48:	ldr	r2, [sp, #132]	; 0x84
   11c4c:	umull	r0, r1, ip, r2
   11c50:	mov	r6, r4
   11c54:	mov	r7, r5
   11c58:	umlal	r6, r7, r3, r2
   11c5c:	mov	lr, #0
   11c60:	adds	sl, r9, r6
   11c64:	adc	fp, lr, r7
   11c68:	cmp	r5, fp
   11c6c:	cmpeq	r4, sl
   11c70:	bls	11c7c <__assert_fail@plt+0x528>
   11c74:	adds	r0, r0, lr
   11c78:	adc	r1, r1, #1
   11c7c:	mov	lr, #0
   11c80:	adds	r2, fp, r0
   11c84:	str	r2, [sp, #204]	; 0xcc
   11c88:	adc	r2, lr, r1
   11c8c:	str	r2, [sp, #220]	; 0xdc
   11c90:	ldr	r1, [sp, #40]	; 0x28
   11c94:	adds	r2, lr, r1
   11c98:	adc	r9, sl, lr
   11c9c:	ldr	r1, [sp, #272]	; 0x110
   11ca0:	umull	r6, r7, r3, r1
   11ca4:	umull	r0, r1, ip, r1
   11ca8:	ldr	r4, [sp, #276]	; 0x114
   11cac:	umull	sl, fp, ip, r4
   11cb0:	strd	sl, [sp, #112]	; 0x70
   11cb4:	umull	r4, r5, r4, r3
   11cb8:	strd	r4, [sp, #40]	; 0x28
   11cbc:	adds	r4, r4, r0
   11cc0:	ldr	r3, [sp, #44]	; 0x2c
   11cc4:	adc	r5, r3, r1
   11cc8:	adds	r3, r7, r4
   11ccc:	str	r3, [sp, #16]
   11cd0:	adc	r3, lr, r5
   11cd4:	str	r3, [sp, #20]
   11cd8:	ldrd	r4, [sp, #16]
   11cdc:	cmp	r1, r5
   11ce0:	cmpeq	r0, r4
   11ce4:	bls	11cfc <__assert_fail@plt+0x5a8>
   11ce8:	adds	r3, sl, lr
   11cec:	str	r3, [sp, #112]	; 0x70
   11cf0:	ldr	r3, [sp, #116]	; 0x74
   11cf4:	adc	r3, r3, #1
   11cf8:	str	r3, [sp, #116]	; 0x74
   11cfc:	ldrd	r0, [sp, #16]
   11d00:	str	r1, [sp, #212]	; 0xd4
   11d04:	mov	lr, #0
   11d08:	mov	ip, r0
   11d0c:	adds	r3, lr, r6
   11d10:	str	r3, [sp, #136]	; 0x88
   11d14:	adc	r3, ip, lr
   11d18:	str	r3, [sp, #140]	; 0x8c
   11d1c:	ldrd	r0, [sp, #120]	; 0x78
   11d20:	mul	r3, r0, r9
   11d24:	mla	r3, r2, r1, r3
   11d28:	umull	r0, r1, r0, r2
   11d2c:	add	r1, r3, r1
   11d30:	mov	r8, r1
   11d34:	mov	ip, lr
   11d38:	mov	r3, r0
   11d3c:	str	lr, [sp, #200]	; 0xc8
   11d40:	ldr	r4, [sp, #296]	; 0x128
   11d44:	umull	r6, r7, r1, r4
   11d48:	ldr	r4, [sp, #300]	; 0x12c
   11d4c:	umull	sl, fp, r1, r4
   11d50:	strd	sl, [sp, #16]
   11d54:	mov	r4, r6
   11d58:	mov	r5, r7
   11d5c:	ldr	sl, [sp, #300]	; 0x12c
   11d60:	umlal	r4, r5, r0, sl
   11d64:	ldr	sl, [sp, #296]	; 0x128
   11d68:	umull	r0, r1, r0, sl
   11d6c:	mov	fp, r1
   11d70:	adds	r0, fp, r4
   11d74:	str	r0, [sp, #32]
   11d78:	adc	r1, lr, r5
   11d7c:	str	r1, [sp, #36]	; 0x24
   11d80:	ldrd	r0, [sp, #32]
   11d84:	cmp	r7, r1
   11d88:	cmpeq	r6, r0
   11d8c:	bls	11da8 <__assert_fail@plt+0x654>
   11d90:	ldr	r1, [sp, #16]
   11d94:	adds	r1, r1, lr
   11d98:	str	r1, [sp, #16]
   11d9c:	ldr	r1, [sp, #20]
   11da0:	adc	r1, r1, #1
   11da4:	str	r1, [sp, #20]
   11da8:	ldr	r6, [sp, #36]	; 0x24
   11dac:	mov	r7, #0
   11db0:	ldr	r1, [sp, #288]	; 0x120
   11db4:	umull	r0, r1, r3, r1
   11db8:	strd	r0, [sp, #40]	; 0x28
   11dbc:	ldr	r0, [sp, #288]	; 0x120
   11dc0:	mla	r1, ip, r0, r1
   11dc4:	str	r1, [sp, #44]	; 0x2c
   11dc8:	umull	r0, r1, r8, r0
   11dcc:	ldr	r4, [sp, #288]	; 0x120
   11dd0:	mla	r1, lr, r4, r1
   11dd4:	ldr	r4, [sp, #292]	; 0x124
   11dd8:	umull	r4, r5, r8, r4
   11ddc:	strd	r4, [sp, #32]
   11de0:	mov	r4, r5
   11de4:	ldr	r5, [sp, #292]	; 0x124
   11de8:	mla	lr, lr, r5, r4
   11dec:	str	lr, [sp, #36]	; 0x24
   11df0:	mov	lr, r5
   11df4:	umull	r4, r5, r5, r3
   11df8:	mla	r5, ip, lr, r5
   11dfc:	adds	lr, r4, r0
   11e00:	adc	r4, r5, r1
   11e04:	ldr	r3, [sp, #44]	; 0x2c
   11e08:	adds	r3, r3, lr
   11e0c:	str	r3, [sp, #48]	; 0x30
   11e10:	adc	r3, r7, r4
   11e14:	str	r3, [sp, #52]	; 0x34
   11e18:	ldrd	r4, [sp, #48]	; 0x30
   11e1c:	cmp	r1, r5
   11e20:	cmpeq	r0, r4
   11e24:	bls	11e40 <__assert_fail@plt+0x6ec>
   11e28:	ldr	r3, [sp, #32]
   11e2c:	adds	r3, r3, r7
   11e30:	str	r3, [sp, #32]
   11e34:	ldr	r3, [sp, #36]	; 0x24
   11e38:	adc	r3, r3, #1
   11e3c:	str	r3, [sp, #36]	; 0x24
   11e40:	ldrd	sl, [sp, #48]	; 0x30
   11e44:	str	fp, [sp, #216]	; 0xd8
   11e48:	mov	ip, #0
   11e4c:	orrs	r3, r2, r9
   11e50:	movne	r1, #1
   11e54:	moveq	r1, ip
   11e58:	ldrd	r2, [sp, #136]	; 0x88
   11e5c:	adds	r2, r2, r1
   11e60:	adc	r3, r3, #0
   11e64:	adds	r6, r6, r2
   11e68:	adc	r7, r7, r3
   11e6c:	ldrd	r0, [sp, #16]
   11e70:	adds	lr, r6, r0
   11e74:	str	lr, [sp, #144]	; 0x90
   11e78:	adc	r1, r7, r1
   11e7c:	str	r1, [sp, #148]	; 0x94
   11e80:	ldrd	r0, [sp, #144]	; 0x90
   11e84:	cmp	r3, r1
   11e88:	cmpeq	r2, r0
   11e8c:	movhi	r3, #1
   11e90:	movls	r3, ip
   11e94:	str	r3, [sp, #48]	; 0x30
   11e98:	str	ip, [sp, #136]	; 0x88
   11e9c:	ldr	r3, [sp, #204]	; 0xcc
   11ea0:	adds	r3, r3, r0
   11ea4:	str	r3, [sp, #152]	; 0x98
   11ea8:	ldr	r3, [sp, #220]	; 0xdc
   11eac:	adc	r3, r3, r1
   11eb0:	str	r3, [sp, #156]	; 0x9c
   11eb4:	ldrd	r4, [sp, #152]	; 0x98
   11eb8:	cmp	r1, r5
   11ebc:	cmpeq	r0, r4
   11ec0:	movhi	r3, #1
   11ec4:	movls	r3, ip
   11ec8:	str	r3, [sp, #144]	; 0x90
   11ecc:	str	ip, [sp, #152]	; 0x98
   11ed0:	ldr	r3, [sp, #40]	; 0x28
   11ed4:	adds	r3, ip, r3
   11ed8:	adc	r2, sl, ip
   11edc:	adds	r3, r3, r4
   11ee0:	str	r3, [sp, #56]	; 0x38
   11ee4:	adc	r3, r2, r5
   11ee8:	str	r3, [sp, #60]	; 0x3c
   11eec:	ldrd	r2, [sp, #56]	; 0x38
   11ef0:	cmp	r5, r3
   11ef4:	cmpeq	r4, r2
   11ef8:	movhi	lr, #1
   11efc:	movls	lr, ip
   11f00:	str	ip, [sp, #204]	; 0xcc
   11f04:	mov	r7, ip
   11f08:	mov	r6, ip
   11f0c:	ldr	r4, [sp, #128]	; 0x80
   11f10:	ldrd	r2, [sp, #24]
   11f14:	umull	r0, r1, r4, r2
   11f18:	mov	sl, r0
   11f1c:	mov	fp, r1
   11f20:	strd	sl, [sp, #40]	; 0x28
   11f24:	umull	r4, r5, r3, r4
   11f28:	ldr	r1, [sp, #132]	; 0x84
   11f2c:	umull	r8, r9, r1, r3
   11f30:	umull	r2, r3, r1, r2
   11f34:	adds	r1, r2, r4
   11f38:	adc	r0, r3, r5
   11f3c:	adds	r3, fp, r1
   11f40:	str	r3, [sp, #64]	; 0x40
   11f44:	adc	r3, ip, r0
   11f48:	str	r3, [sp, #68]	; 0x44
   11f4c:	ldrd	r2, [sp, #64]	; 0x40
   11f50:	cmp	r5, r3
   11f54:	cmpeq	r4, r2
   11f58:	bls	11f64 <__assert_fail@plt+0x810>
   11f5c:	adds	r8, r8, ip
   11f60:	adc	r9, r9, #1
   11f64:	ldrd	r4, [sp, #64]	; 0x40
   11f68:	str	r5, [sp, #16]
   11f6c:	mov	sl, #0
   11f70:	str	sl, [sp, #20]
   11f74:	mov	r0, r4
   11f78:	ldrd	r4, [sp, #16]
   11f7c:	ldr	r2, [sp, #40]	; 0x28
   11f80:	adds	r3, r5, r2
   11f84:	str	r3, [sp, #160]	; 0xa0
   11f88:	adc	r3, r0, r5
   11f8c:	str	r3, [sp, #164]	; 0xa4
   11f90:	ldr	r3, [sp, #272]	; 0x110
   11f94:	mul	r3, r6, r3
   11f98:	ldrd	r0, [sp, #24]
   11f9c:	mla	r3, sl, r0, r3
   11fa0:	ldr	r2, [sp, #272]	; 0x110
   11fa4:	umull	r4, r5, r2, r0
   11fa8:	add	r5, r3, r5
   11fac:	mul	r3, sl, r1
   11fb0:	mla	r3, r7, r2, r3
   11fb4:	umull	r0, r1, r1, r2
   11fb8:	add	r1, r3, r1
   11fbc:	ldr	r3, [sp, #276]	; 0x114
   11fc0:	mul	r7, r7, r3
   11fc4:	ldrd	r2, [sp, #24]
   11fc8:	mla	r7, sl, r3, r7
   11fcc:	ldr	fp, [sp, #276]	; 0x114
   11fd0:	umull	sl, fp, fp, r3
   11fd4:	strd	sl, [sp, #40]	; 0x28
   11fd8:	add	r7, r7, fp
   11fdc:	str	r7, [sp, #44]	; 0x2c
   11fe0:	ldr	r7, [sp, #276]	; 0x114
   11fe4:	mul	r6, r6, r7
   11fe8:	mov	sl, #0
   11fec:	mla	r6, sl, r2, r6
   11ff0:	ldr	r7, [sp, #276]	; 0x114
   11ff4:	umull	r2, r3, r7, r2
   11ff8:	add	r3, r6, r3
   11ffc:	adds	r6, r2, r0
   12000:	adc	r7, r3, r1
   12004:	ldr	r2, [sp, #20]
   12008:	adds	r3, r5, r6
   1200c:	str	r3, [sp, #72]	; 0x48
   12010:	adc	r3, r2, r7
   12014:	str	r3, [sp, #76]	; 0x4c
   12018:	ldrd	r2, [sp, #72]	; 0x48
   1201c:	cmp	r1, r3
   12020:	cmpeq	r0, r2
   12024:	bls	12040 <__assert_fail@plt+0x8ec>
   12028:	ldr	r3, [sp, #40]	; 0x28
   1202c:	adds	r3, r3, sl
   12030:	str	r3, [sp, #40]	; 0x28
   12034:	ldr	r3, [sp, #44]	; 0x2c
   12038:	adc	r3, r3, #1
   1203c:	str	r3, [sp, #44]	; 0x2c
   12040:	ldrd	r6, [sp, #72]	; 0x48
   12044:	str	r7, [sp, #64]	; 0x40
   12048:	mov	r2, #0
   1204c:	mov	sl, r2
   12050:	str	r2, [sp, #72]	; 0x48
   12054:	adds	r3, sl, r4
   12058:	str	r3, [sp, #168]	; 0xa8
   1205c:	adc	r3, r6, sl
   12060:	str	r3, [sp, #172]	; 0xac
   12064:	ldrd	r0, [sp, #56]	; 0x38
   12068:	ldrd	r2, [sp, #160]	; 0xa0
   1206c:	adds	r4, r0, r2
   12070:	str	r4, [sp, #80]	; 0x50
   12074:	adc	r1, r1, r3
   12078:	str	r1, [sp, #84]	; 0x54
   1207c:	ldrd	r4, [sp, #80]	; 0x50
   12080:	cmp	r3, r5
   12084:	cmpeq	r2, r4
   12088:	movhi	r1, #1
   1208c:	movls	r1, sl
   12090:	ldrd	r2, [sp, #16]
   12094:	adds	r2, r2, r1
   12098:	adc	r3, r3, #0
   1209c:	adds	r1, r2, r8
   120a0:	mov	fp, r1
   120a4:	adc	r3, r3, r9
   120a8:	str	r3, [sp, #128]	; 0x80
   120ac:	ldrd	r0, [sp, #120]	; 0x78
   120b0:	mul	r3, r0, r5
   120b4:	mla	r3, r4, r1, r3
   120b8:	mov	r2, r0
   120bc:	umull	r0, r1, r2, r4
   120c0:	strd	r0, [sp, #24]
   120c4:	add	r3, r3, r1
   120c8:	str	r3, [sp, #28]
   120cc:	ldr	r3, [sp, #212]	; 0xd4
   120d0:	ldrd	r0, [sp, #168]	; 0xa8
   120d4:	adds	r3, r3, r0
   120d8:	ldr	r2, [sp, #200]	; 0xc8
   120dc:	adc	r2, r2, r1
   120e0:	ldr	r4, [sp, #216]	; 0xd8
   120e4:	adds	r3, r3, r4
   120e8:	adc	ip, r2, ip
   120ec:	ldrd	r4, [sp, #112]	; 0x70
   120f0:	adds	r3, r3, r4
   120f4:	adc	ip, ip, r5
   120f8:	ldr	r2, [sp, #48]	; 0x30
   120fc:	adds	r3, r3, r2
   12100:	ldr	r2, [sp, #136]	; 0x88
   12104:	adc	ip, ip, r2
   12108:	ldr	r2, [sp, #144]	; 0x90
   1210c:	adds	r3, r3, r2
   12110:	ldr	r2, [sp, #152]	; 0x98
   12114:	adc	ip, ip, r2
   12118:	adds	r3, r3, lr
   1211c:	ldr	r2, [sp, #204]	; 0xcc
   12120:	adc	ip, ip, r2
   12124:	ldrd	r4, [sp, #32]
   12128:	adds	r3, r3, r4
   1212c:	str	r3, [sp, #88]	; 0x58
   12130:	adc	r3, ip, r5
   12134:	str	r3, [sp, #92]	; 0x5c
   12138:	ldrd	r2, [sp, #88]	; 0x58
   1213c:	cmp	r1, r3
   12140:	cmpeq	r0, r2
   12144:	movhi	r3, #1
   12148:	movls	r3, sl
   1214c:	str	r3, [sp, #48]	; 0x30
   12150:	str	sl, [sp, #56]	; 0x38
   12154:	ldrd	r8, [sp, #24]
   12158:	mov	r3, r9
   1215c:	mov	lr, sl
   12160:	mov	r2, r8
   12164:	mov	ip, sl
   12168:	ldr	r1, [sp, #296]	; 0x128
   1216c:	umull	r6, r7, r9, r1
   12170:	mla	r7, sl, r9, r7
   12174:	ldr	r1, [sp, #300]	; 0x12c
   12178:	umull	r4, r5, r1, r9
   1217c:	strd	r4, [sp, #16]
   12180:	ldr	r4, [sp, #20]
   12184:	mla	r1, sl, r9, r4
   12188:	str	r1, [sp, #20]
   1218c:	ldr	r1, [sp, #300]	; 0x12c
   12190:	umull	r8, r9, r1, r8
   12194:	ldrd	r4, [sp, #24]
   12198:	mla	r9, sl, r4, r9
   1219c:	adds	r1, r8, r6
   121a0:	adc	r9, r9, r7
   121a4:	ldr	r8, [sp, #296]	; 0x128
   121a8:	umull	r4, r5, r8, r4
   121ac:	strd	r4, [sp, #32]
   121b0:	ldr	r5, [sp, #24]
   121b4:	ldr	r4, [sp, #36]	; 0x24
   121b8:	mla	r0, sl, r5, r4
   121bc:	str	r0, [sp, #36]	; 0x24
   121c0:	adds	r1, r0, r1
   121c4:	str	r1, [sp, #96]	; 0x60
   121c8:	adc	r1, sl, r9
   121cc:	str	r1, [sp, #100]	; 0x64
   121d0:	ldrd	r0, [sp, #96]	; 0x60
   121d4:	cmp	r7, r1
   121d8:	cmpeq	r6, r0
   121dc:	bls	121f8 <__assert_fail@plt+0xaa4>
   121e0:	ldr	r1, [sp, #16]
   121e4:	adds	r1, r1, sl
   121e8:	str	r1, [sp, #16]
   121ec:	ldr	r1, [sp, #20]
   121f0:	adc	r1, r1, #1
   121f4:	str	r1, [sp, #20]
   121f8:	ldr	r8, [sp, #100]	; 0x64
   121fc:	mov	r9, #0
   12200:	ldr	r1, [sp, #288]	; 0x120
   12204:	mul	r1, ip, r1
   12208:	mla	r1, r2, r9, r1
   1220c:	ldr	r4, [sp, #288]	; 0x120
   12210:	umull	r6, r7, r4, r2
   12214:	strd	r6, [sp, #24]
   12218:	add	r1, r1, r7
   1221c:	str	r1, [sp, #28]
   12220:	mul	r6, r3, r9
   12224:	mla	r6, lr, r4, r6
   12228:	umull	r0, r1, r3, r4
   1222c:	add	r1, r6, r1
   12230:	ldr	r4, [sp, #292]	; 0x124
   12234:	mul	lr, lr, r4
   12238:	mla	lr, r3, r9, lr
   1223c:	umull	r6, r7, r4, r3
   12240:	add	r7, lr, r7
   12244:	mul	ip, ip, r4
   12248:	mla	ip, r2, r9, ip
   1224c:	umull	r2, r3, r4, r2
   12250:	add	r3, ip, r3
   12254:	adds	ip, r2, r0
   12258:	adc	lr, r3, r1
   1225c:	ldr	r3, [sp, #28]
   12260:	adds	r3, r3, ip
   12264:	str	r3, [sp, #104]	; 0x68
   12268:	adc	r3, r9, lr
   1226c:	str	r3, [sp, #108]	; 0x6c
   12270:	ldrd	r2, [sp, #104]	; 0x68
   12274:	cmp	r1, r3
   12278:	cmpeq	r0, r2
   1227c:	bls	12288 <__assert_fail@plt+0xb34>
   12280:	adds	r6, r6, r9
   12284:	adc	r7, r7, #1
   12288:	ldrd	r2, [sp, #80]	; 0x50
   1228c:	mov	r1, r2
   12290:	orrs	r3, r1, r3
   12294:	movne	r1, #1
   12298:	moveq	r1, #0
   1229c:	ldrd	r2, [sp, #88]	; 0x58
   122a0:	adds	r2, r2, r1
   122a4:	adc	r3, r3, #0
   122a8:	adds	r8, r8, r2
   122ac:	adc	r9, r9, r3
   122b0:	ldr	r1, [sp, #16]
   122b4:	adds	r1, r8, r1
   122b8:	str	r1, [sp, #176]	; 0xb0
   122bc:	ldr	r1, [sp, #20]
   122c0:	adc	r1, r9, r1
   122c4:	str	r1, [sp, #180]	; 0xb4
   122c8:	ldrd	r4, [sp, #176]	; 0xb0
   122cc:	adds	r1, fp, r4
   122d0:	str	r1, [sp, #184]	; 0xb8
   122d4:	ldr	r1, [sp, #128]	; 0x80
   122d8:	adc	r1, r1, r5
   122dc:	str	r1, [sp, #188]	; 0xbc
   122e0:	ldrd	sl, [sp, #104]	; 0x68
   122e4:	mov	r0, #0
   122e8:	ldr	r1, [sp, #24]
   122ec:	adds	r1, r0, r1
   122f0:	adc	ip, sl, r0
   122f4:	ldrd	r8, [sp, #184]	; 0xb8
   122f8:	mov	lr, r8
   122fc:	adds	r1, r1, r8
   12300:	str	r1, [sp, #8]
   12304:	adc	r1, ip, r9
   12308:	str	r1, [sp, #12]
   1230c:	mov	ip, r0
   12310:	ldr	r0, [sp, #64]	; 0x40
   12314:	adds	r1, fp, r0
   12318:	ldr	r0, [sp, #72]	; 0x48
   1231c:	adc	ip, ip, r0
   12320:	ldr	r0, [sp, #48]	; 0x30
   12324:	adds	r1, r1, r0
   12328:	ldr	r0, [sp, #56]	; 0x38
   1232c:	adc	ip, ip, r0
   12330:	ldrd	sl, [sp, #40]	; 0x28
   12334:	adds	r1, r1, sl
   12338:	str	r1, [sp, #192]	; 0xc0
   1233c:	adc	r1, ip, fp
   12340:	str	r1, [sp, #196]	; 0xc4
   12344:	cmp	r3, r5
   12348:	cmpeq	r2, r4
   1234c:	movhi	r1, #1
   12350:	movls	r1, #0
   12354:	ldrd	r2, [sp, #192]	; 0xc0
   12358:	adds	r2, r2, r1
   1235c:	adc	r3, r3, #0
   12360:	cmp	r5, r9
   12364:	cmpeq	r4, r8
   12368:	movhi	r1, #1
   1236c:	movls	r1, #0
   12370:	adds	r2, r2, r1
   12374:	adc	r3, r3, #0
   12378:	ldrd	r4, [sp, #8]
   1237c:	cmp	r9, r5
   12380:	cmpeq	r8, r4
   12384:	movhi	r1, #1
   12388:	movls	r1, #0
   1238c:	adds	r8, r2, r1
   12390:	adc	r9, r3, #0
   12394:	adds	r3, r8, r6
   12398:	str	r3, [sp]
   1239c:	adc	r3, r9, r7
   123a0:	str	r3, [sp, #4]
   123a4:	ldrd	r2, [sp]
   123a8:	add	r1, sp, #288	; 0x120
   123ac:	ldrd	r0, [r1]
   123b0:	cmp	r1, r3
   123b4:	cmpeq	r0, r2
   123b8:	bcc	123e4 <__assert_fail@plt+0xc90>
   123bc:	moveq	r3, #1
   123c0:	movne	r3, #0
   123c4:	add	r2, sp, #296	; 0x128
   123c8:	ldrd	r0, [r2]
   123cc:	cmp	r1, r5
   123d0:	cmpeq	r0, r4
   123d4:	movhi	r3, #0
   123d8:	andls	r3, r3, #1
   123dc:	cmp	r3, #0
   123e0:	beq	1244c <__assert_fail@plt+0xcf8>
   123e4:	add	r3, sp, #296	; 0x128
   123e8:	ldrd	r2, [r3]
   123ec:	ldrd	r0, [sp, #8]
   123f0:	cmp	r3, r1
   123f4:	cmpeq	r2, r0
   123f8:	movhi	r3, #1
   123fc:	movls	r3, #0
   12400:	mov	r2, #0
   12404:	mov	r1, r0
   12408:	ldr	r0, [sp, #296]	; 0x128
   1240c:	subs	r1, r1, r0
   12410:	str	r1, [sp, #8]
   12414:	ldr	r1, [sp, #12]
   12418:	ldr	r0, [sp, #300]	; 0x12c
   1241c:	sbc	r1, r1, r0
   12420:	str	r1, [sp, #12]
   12424:	ldr	r1, [sp, #288]	; 0x120
   12428:	adds	r3, r1, r3
   1242c:	ldr	r1, [sp, #292]	; 0x124
   12430:	adc	r2, r1, r2
   12434:	ldr	r1, [sp]
   12438:	subs	r3, r1, r3
   1243c:	str	r3, [sp]
   12440:	ldr	r3, [sp, #4]
   12444:	sbc	r3, r3, r2
   12448:	str	r3, [sp, #4]
   1244c:	ldr	r1, [sp, #208]	; 0xd0
   12450:	ldrd	r2, [sp]
   12454:	strd	r2, [r1]
   12458:	ldrd	r0, [sp, #8]
   1245c:	add	sp, sp, #228	; 0xe4
   12460:	ldrd	r4, [sp]
   12464:	ldrd	r6, [sp, #8]
   12468:	ldrd	r8, [sp, #16]
   1246c:	ldrd	sl, [sp, #24]
   12470:	add	sp, sp, #32
   12474:	pop	{pc}		; (ldr pc, [sp], #4)
   12478:	ldr	r3, [pc, #76]	; 124cc <__assert_fail@plt+0xd78>
   1247c:	movw	r2, #993	; 0x3e1
   12480:	movw	r1, #7868	; 0x1ebc
   12484:	movt	r1, #2
   12488:	movw	r0, #7884	; 0x1ecc
   1248c:	movt	r0, #2
   12490:	bl	11754 <__assert_fail@plt>
   12494:	ldr	r3, [pc, #48]	; 124cc <__assert_fail@plt+0xd78>
   12498:	movw	r2, #994	; 0x3e2
   1249c:	movw	r1, #7868	; 0x1ebc
   124a0:	movt	r1, #2
   124a4:	movw	r0, #7916	; 0x1eec
   124a8:	movt	r0, #2
   124ac:	bl	11754 <__assert_fail@plt>
   124b0:	ldr	r3, [pc, #20]	; 124cc <__assert_fail@plt+0xd78>
   124b4:	movw	r2, #995	; 0x3e3
   124b8:	movw	r1, #7868	; 0x1ebc
   124bc:	movt	r1, #2
   124c0:	movw	r0, #7948	; 0x1f0c
   124c4:	movt	r0, #2
   124c8:	bl	11754 <__assert_fail@plt>
   124cc:	andeq	pc, r1, ip, lsl #1
   124d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124d4:	strd	r6, [sp, #8]
   124d8:	strd	r8, [sp, #16]
   124dc:	strd	sl, [sp, #24]
   124e0:	str	lr, [sp, #32]
   124e4:	sub	sp, sp, #116	; 0x74
   124e8:	mov	r5, r0
   124ec:	mov	ip, r2
   124f0:	str	r2, [sp, #108]	; 0x6c
   124f4:	ldr	r2, [sp, #160]	; 0xa0
   124f8:	ldrd	r6, [r1]
   124fc:	strd	r6, [sp, #96]	; 0x60
   12500:	ldrd	r6, [r1, #8]
   12504:	ldrd	r0, [r3]
   12508:	strd	r0, [sp, #56]	; 0x38
   1250c:	ldrd	r0, [r3, #8]
   12510:	strd	r0, [sp, #64]	; 0x40
   12514:	ldrd	r0, [r2]
   12518:	strd	r0, [sp, #80]	; 0x50
   1251c:	ldrd	r0, [r2, #8]
   12520:	strd	r0, [sp, #72]	; 0x48
   12524:	ldr	r4, [ip]
   12528:	ldr	fp, [ip, #4]
   1252c:	mov	sl, #64	; 0x40
   12530:	str	sl, [sp, #52]	; 0x34
   12534:	str	r5, [sp, #104]	; 0x68
   12538:	mov	r5, fp
   1253c:	ldrd	sl, [sp, #96]	; 0x60
   12540:	b	125e8 <__assert_fail@plt+0xe94>
   12544:	ldrd	r2, [sp, #152]	; 0x98
   12548:	strd	r2, [sp, #40]	; 0x28
   1254c:	ldrd	r2, [sp, #56]	; 0x38
   12550:	strd	r2, [sp, #32]
   12554:	ldrd	r2, [sp, #64]	; 0x40
   12558:	strd	r2, [sp, #24]
   1255c:	strd	sl, [sp, #16]
   12560:	strd	r6, [sp, #8]
   12564:	ldrd	r2, [sp, #80]	; 0x50
   12568:	strd	r2, [sp]
   1256c:	ldrd	r2, [sp, #72]	; 0x48
   12570:	ldr	r0, [sp, #104]	; 0x68
   12574:	bl	11bb0 <__assert_fail@plt+0x45c>
   12578:	strd	r0, [sp, #80]	; 0x50
   1257c:	ldr	r3, [sp, #104]	; 0x68
   12580:	ldrd	r2, [r3]
   12584:	strd	r2, [sp, #72]	; 0x48
   12588:	ldrd	r2, [sp, #152]	; 0x98
   1258c:	strd	r2, [sp, #40]	; 0x28
   12590:	ldrd	r2, [sp, #56]	; 0x38
   12594:	strd	r2, [sp, #32]
   12598:	ldrd	r2, [sp, #64]	; 0x40
   1259c:	strd	r2, [sp, #24]
   125a0:	strd	sl, [sp, #16]
   125a4:	strd	r6, [sp, #8]
   125a8:	strd	sl, [sp]
   125ac:	mov	r2, r6
   125b0:	mov	r3, r7
   125b4:	ldr	r6, [sp, #104]	; 0x68
   125b8:	mov	r0, r6
   125bc:	bl	11bb0 <__assert_fail@plt+0x45c>
   125c0:	mov	sl, r0
   125c4:	mov	fp, r1
   125c8:	ldrd	r6, [r6]
   125cc:	lsr	r4, r4, #1
   125d0:	orr	r4, r4, r5, lsl #31
   125d4:	lsr	r5, r5, #1
   125d8:	ldr	r3, [sp, #52]	; 0x34
   125dc:	subs	r3, r3, #1
   125e0:	str	r3, [sp, #52]	; 0x34
   125e4:	beq	125fc <__assert_fail@plt+0xea8>
   125e8:	and	r8, r4, #1
   125ec:	mov	r9, #0
   125f0:	orrs	r3, r8, r9
   125f4:	beq	12588 <__assert_fail@plt+0xe34>
   125f8:	b	12544 <__assert_fail@plt+0xdf0>
   125fc:	ldr	r5, [sp, #104]	; 0x68
   12600:	ldr	r3, [sp, #108]	; 0x6c
   12604:	ldrd	r8, [r3, #8]
   12608:	orrs	r3, r8, r9
   1260c:	beq	126d0 <__assert_fail@plt+0xf7c>
   12610:	mov	r4, #0
   12614:	b	12674 <__assert_fail@plt+0xf20>
   12618:	ldrd	r2, [sp, #152]	; 0x98
   1261c:	strd	r2, [sp, #40]	; 0x28
   12620:	ldrd	r2, [sp, #56]	; 0x38
   12624:	strd	r2, [sp, #32]
   12628:	ldrd	r2, [sp, #64]	; 0x40
   1262c:	strd	r2, [sp, #24]
   12630:	strd	sl, [sp, #16]
   12634:	strd	r6, [sp, #8]
   12638:	strd	sl, [sp]
   1263c:	mov	r2, r6
   12640:	mov	r3, r7
   12644:	mov	r0, r5
   12648:	bl	11bb0 <__assert_fail@plt+0x45c>
   1264c:	mov	sl, r0
   12650:	mov	fp, r1
   12654:	ldrd	r6, [r5]
   12658:	lsr	r3, r8, #1
   1265c:	orr	r3, r3, r9, lsl #31
   12660:	lsr	r2, r9, #1
   12664:	mov	r8, r3
   12668:	mov	r9, r2
   1266c:	orrs	r3, r8, r9
   12670:	beq	126d0 <__assert_fail@plt+0xf7c>
   12674:	and	r3, r8, #1
   12678:	str	r3, [sp, #88]	; 0x58
   1267c:	str	r4, [sp, #92]	; 0x5c
   12680:	ldrd	r2, [sp, #88]	; 0x58
   12684:	orrs	r3, r2, r3
   12688:	beq	12618 <__assert_fail@plt+0xec4>
   1268c:	ldrd	r2, [sp, #152]	; 0x98
   12690:	strd	r2, [sp, #40]	; 0x28
   12694:	ldrd	r2, [sp, #56]	; 0x38
   12698:	strd	r2, [sp, #32]
   1269c:	ldrd	r2, [sp, #64]	; 0x40
   126a0:	strd	r2, [sp, #24]
   126a4:	strd	sl, [sp, #16]
   126a8:	strd	r6, [sp, #8]
   126ac:	ldrd	r2, [sp, #80]	; 0x50
   126b0:	strd	r2, [sp]
   126b4:	ldrd	r2, [sp, #72]	; 0x48
   126b8:	mov	r0, r5
   126bc:	bl	11bb0 <__assert_fail@plt+0x45c>
   126c0:	strd	r0, [sp, #80]	; 0x50
   126c4:	ldrd	r2, [r5]
   126c8:	strd	r2, [sp, #72]	; 0x48
   126cc:	b	12618 <__assert_fail@plt+0xec4>
   126d0:	ldrd	r2, [sp, #72]	; 0x48
   126d4:	strd	r2, [r5]
   126d8:	ldrd	r0, [sp, #80]	; 0x50
   126dc:	add	sp, sp, #116	; 0x74
   126e0:	ldrd	r4, [sp]
   126e4:	ldrd	r6, [sp, #8]
   126e8:	ldrd	r8, [sp, #16]
   126ec:	ldrd	sl, [sp, #24]
   126f0:	add	sp, sp, #32
   126f4:	pop	{pc}		; (ldr pc, [sp], #4)
   126f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126fc:	strd	r6, [sp, #8]
   12700:	strd	r8, [sp, #16]
   12704:	strd	sl, [sp, #24]
   12708:	str	lr, [sp, #32]
   1270c:	sub	sp, sp, #84	; 0x54
   12710:	mov	r5, r0
   12714:	strd	r2, [sp, #48]	; 0x30
   12718:	ldr	r7, [sp, #128]	; 0x80
   1271c:	ldr	r6, [sp, #132]	; 0x84
   12720:	str	r6, [sp, #8]
   12724:	strd	r2, [sp]
   12728:	mov	r3, r0
   1272c:	ldr	r2, [sp, #124]	; 0x7c
   12730:	ldr	r1, [sp, #120]	; 0x78
   12734:	add	r0, sp, #72	; 0x48
   12738:	bl	124d0 <__assert_fail@plt+0xd7c>
   1273c:	ldrd	r2, [sp, #72]	; 0x48
   12740:	mov	sl, r2
   12744:	mov	fp, r3
   12748:	ldrd	r2, [r6]
   1274c:	cmp	r3, r1
   12750:	cmpeq	r2, r0
   12754:	beq	1280c <__assert_fail@plt+0x10b8>
   12758:	ldr	ip, [r5]
   1275c:	subs	ip, ip, r2
   12760:	str	ip, [sp, #64]	; 0x40
   12764:	ldr	ip, [r5, #4]
   12768:	sbc	ip, ip, r3
   1276c:	str	ip, [sp, #68]	; 0x44
   12770:	ldr	lr, [r5, #8]
   12774:	ldr	ip, [r6, #8]
   12778:	ldr	r4, [r6, #12]
   1277c:	subs	ip, lr, ip
   12780:	str	ip, [sp, #56]	; 0x38
   12784:	ldr	ip, [r5, #12]
   12788:	sbc	ip, ip, r4
   1278c:	str	ip, [sp, #60]	; 0x3c
   12790:	ldrd	r8, [r5]
   12794:	cmp	r3, r9
   12798:	cmpeq	r2, r8
   1279c:	movhi	r3, #1
   127a0:	movls	r3, #0
   127a4:	ldrd	r8, [sp, #56]	; 0x38
   127a8:	subs	r8, r8, r3
   127ac:	sbc	r9, r9, #0
   127b0:	strd	r8, [sp, #56]	; 0x38
   127b4:	ldrd	r2, [sp, #64]	; 0x40
   127b8:	cmp	r1, r3
   127bc:	cmpeq	r0, r2
   127c0:	moveq	ip, #1
   127c4:	movne	ip, #0
   127c8:	mov	r2, sl
   127cc:	mov	r3, fp
   127d0:	cmp	fp, r9
   127d4:	cmpeq	sl, r8
   127d8:	movne	ip, #0
   127dc:	cmp	ip, #0
   127e0:	bne	128b0 <__assert_fail@plt+0x115c>
   127e4:	cmp	r7, #1
   127e8:	bls	128b0 <__assert_fail@plt+0x115c>
   127ec:	mov	r4, #1
   127f0:	ldrd	sl, [sp, #64]	; 0x40
   127f4:	mov	r8, r2
   127f8:	mov	r9, r3
   127fc:	str	r6, [sp, #132]	; 0x84
   12800:	mov	r6, r7
   12804:	ldr	r7, [sp, #132]	; 0x84
   12808:	b	12830 <__assert_fail@plt+0x10dc>
   1280c:	ldrd	r8, [r6, #8]
   12810:	cmp	r9, fp
   12814:	cmpeq	r8, sl
   12818:	moveq	ip, #1
   1281c:	bne	12758 <__assert_fail@plt+0x1004>
   12820:	b	128b0 <__assert_fail@plt+0x115c>
   12824:	add	r4, r4, #1
   12828:	cmp	r6, r4
   1282c:	beq	128b0 <__assert_fail@plt+0x115c>
   12830:	ldrd	r2, [sp, #48]	; 0x30
   12834:	strd	r2, [sp, #40]	; 0x28
   12838:	ldrd	r2, [r5]
   1283c:	strd	r2, [sp, #32]
   12840:	ldrd	r2, [r5, #8]
   12844:	strd	r2, [sp, #24]
   12848:	strd	r0, [sp, #16]
   1284c:	strd	r8, [sp, #8]
   12850:	strd	r0, [sp]
   12854:	mov	r2, r8
   12858:	mov	r3, r9
   1285c:	add	r0, sp, #72	; 0x48
   12860:	bl	11bb0 <__assert_fail@plt+0x45c>
   12864:	ldrd	r8, [sp, #72]	; 0x48
   12868:	cmp	fp, r1
   1286c:	cmpeq	sl, r0
   12870:	moveq	ip, #1
   12874:	movne	ip, #0
   12878:	ldrd	r2, [sp, #56]	; 0x38
   1287c:	cmp	r3, r9
   12880:	cmpeq	r2, r8
   12884:	movne	ip, #0
   12888:	cmp	ip, #0
   1288c:	bne	128b0 <__assert_fail@plt+0x115c>
   12890:	ldrd	r2, [r7]
   12894:	cmp	r3, r1
   12898:	cmpeq	r2, r0
   1289c:	bne	12824 <__assert_fail@plt+0x10d0>
   128a0:	ldrd	r2, [r7, #8]
   128a4:	cmp	r3, r9
   128a8:	cmpeq	r2, r8
   128ac:	bne	12824 <__assert_fail@plt+0x10d0>
   128b0:	mov	r0, ip
   128b4:	add	sp, sp, #84	; 0x54
   128b8:	ldrd	r4, [sp]
   128bc:	ldrd	r6, [sp, #8]
   128c0:	ldrd	r8, [sp, #16]
   128c4:	ldrd	sl, [sp, #24]
   128c8:	add	sp, sp, #32
   128cc:	pop	{pc}		; (ldr pc, [sp], #4)
   128d0:	strd	r4, [sp, #-12]!
   128d4:	str	lr, [sp, #8]
   128d8:	sub	sp, sp, #12
   128dc:	orrs	r1, r2, r3
   128e0:	beq	12928 <__assert_fail@plt+0x11d4>
   128e4:	ldrd	r4, [r0, #8]
   128e8:	orrs	r1, r4, r5
   128ec:	bne	1290c <__assert_fail@plt+0x11b8>
   128f0:	ldrd	r4, [sp, #24]
   128f4:	strd	r4, [r0]
   128f8:	strd	r2, [r0, #8]
   128fc:	add	sp, sp, #12
   12900:	ldrd	r4, [sp]
   12904:	add	sp, sp, #8
   12908:	pop	{pc}		; (ldr pc, [sp], #4)
   1290c:	ldr	r3, [pc, #40]	; 1293c <__assert_fail@plt+0x11e8>
   12910:	movw	r2, #558	; 0x22e
   12914:	movw	r1, #7868	; 0x1ebc
   12918:	movt	r1, #2
   1291c:	movw	r0, #7980	; 0x1f2c
   12920:	movt	r0, #2
   12924:	bl	11754 <__assert_fail@plt>
   12928:	mov	r3, #1
   1292c:	str	r3, [sp]
   12930:	ldrd	r2, [sp, #24]
   12934:	bl	11944 <__assert_fail@plt+0x1f0>
   12938:	b	128fc <__assert_fail@plt+0x11a8>
   1293c:	muleq	r1, r8, r0
   12940:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12944:	strd	r6, [sp, #8]
   12948:	strd	r8, [sp, #16]
   1294c:	strd	sl, [sp, #24]
   12950:	str	lr, [sp, #32]
   12954:	sub	sp, sp, #36	; 0x24
   12958:	str	r0, [sp, #20]
   1295c:	ldrd	r4, [sp, #72]	; 0x48
   12960:	ldrd	r8, [sp, #80]	; 0x50
   12964:	ldrd	r6, [sp, #88]	; 0x58
   12968:	and	r0, r6, #1
   1296c:	mov	r1, #0
   12970:	orrs	r1, r0, r1
   12974:	beq	129dc <__assert_fail@plt+0x1288>
   12978:	orr	r0, r4, r2
   1297c:	orr	r1, r5, r3
   12980:	orrs	r1, r0, r1
   12984:	beq	129f8 <__assert_fail@plt+0x12a4>
   12988:	and	r0, r4, #1
   1298c:	mov	r1, #0
   12990:	orrs	r1, r0, r1
   12994:	bne	12b08 <__assert_fail@plt+0x13b4>
   12998:	mov	ip, #0
   1299c:	strd	r6, [sp, #88]	; 0x58
   129a0:	lsr	r7, r4, #1
   129a4:	lsr	lr, r5, #1
   129a8:	orr	r4, r7, r5, lsl #31
   129ac:	orr	r5, lr, r2, lsl #31
   129b0:	lsr	lr, r2, #1
   129b4:	orr	lr, lr, r3, lsl #31
   129b8:	lsr	r7, r3, #1
   129bc:	mov	r2, lr
   129c0:	mov	r3, r7
   129c4:	and	r0, r4, #1
   129c8:	mov	r1, ip
   129cc:	orrs	lr, r0, r1
   129d0:	beq	129a0 <__assert_fail@plt+0x124c>
   129d4:	ldrd	r6, [sp, #88]	; 0x58
   129d8:	b	12b08 <__assert_fail@plt+0x13b4>
   129dc:	ldr	r3, [pc, #420]	; 12b88 <__assert_fail@plt+0x1434>
   129e0:	mov	r2, #476	; 0x1dc
   129e4:	movw	r1, #7868	; 0x1ebc
   129e8:	movt	r1, #2
   129ec:	movw	r0, #8004	; 0x1f44
   129f0:	movt	r0, #2
   129f4:	bl	11754 <__assert_fail@plt>
   129f8:	ldr	r3, [sp, #20]
   129fc:	strd	r8, [r3]
   12a00:	mov	r0, r6
   12a04:	mov	r1, r7
   12a08:	b	12a30 <__assert_fail@plt+0x12dc>
   12a0c:	mov	r2, #0
   12a10:	mov	r3, #0
   12a14:	ldr	r1, [sp, #20]
   12a18:	strd	r2, [r1]
   12a1c:	mov	r2, r4
   12a20:	mov	r3, r5
   12a24:	mov	r0, r6
   12a28:	mov	r1, r7
   12a2c:	bl	11850 <__assert_fail@plt+0xfc>
   12a30:	add	sp, sp, #36	; 0x24
   12a34:	ldrd	r4, [sp]
   12a38:	ldrd	r6, [sp, #8]
   12a3c:	ldrd	r8, [sp, #16]
   12a40:	ldrd	sl, [sp, #24]
   12a44:	add	sp, sp, #32
   12a48:	pop	{pc}		; (ldr pc, [sp], #4)
   12a4c:	cmp	r5, r7
   12a50:	cmpeq	r4, r6
   12a54:	movcc	r1, #1
   12a58:	movcs	r1, #0
   12a5c:	mov	r0, #0
   12a60:	subs	r4, r4, r6
   12a64:	sbc	r5, r5, r7
   12a68:	subs	ip, r2, r8
   12a6c:	sbc	lr, r3, r9
   12a70:	subs	r2, ip, r1
   12a74:	sbc	r3, lr, r0
   12a78:	lsr	lr, r4, #1
   12a7c:	lsr	ip, r5, #1
   12a80:	orr	r4, lr, r5, lsl #31
   12a84:	orr	r5, ip, r2, lsl #31
   12a88:	lsr	ip, r2, #1
   12a8c:	orr	ip, ip, r3, lsl #31
   12a90:	lsr	lr, r3, #1
   12a94:	mov	r2, ip
   12a98:	mov	r3, lr
   12a9c:	and	r0, r4, #1
   12aa0:	mov	r1, #0
   12aa4:	orrs	ip, r0, r1
   12aa8:	beq	12a78 <__assert_fail@plt+0x1324>
   12aac:	strd	r0, [sp, #8]
   12ab0:	b	12b08 <__assert_fail@plt+0x13b4>
   12ab4:	subs	r6, r6, r4
   12ab8:	sbc	r7, r7, r5
   12abc:	subs	ip, r8, r2
   12ac0:	sbc	lr, r9, r3
   12ac4:	uxtb	r0, r0
   12ac8:	mov	r1, #0
   12acc:	subs	r8, ip, r0
   12ad0:	sbc	r9, lr, r1
   12ad4:	lsr	r0, r6, #1
   12ad8:	lsr	r1, r7, #1
   12adc:	orr	r6, r0, r7, lsl #31
   12ae0:	orr	r7, r1, r8, lsl #31
   12ae4:	lsr	r1, r8, #1
   12ae8:	orr	r1, r1, r9, lsl #31
   12aec:	lsr	r0, r9, #1
   12af0:	mov	r8, r1
   12af4:	mov	r9, r0
   12af8:	and	sl, r6, #1
   12afc:	mov	fp, #0
   12b00:	orrs	r1, sl, fp
   12b04:	beq	12ad4 <__assert_fail@plt+0x1380>
   12b08:	orr	r1, r2, r8
   12b0c:	str	r1, [sp]
   12b10:	orr	r1, r3, r9
   12b14:	str	r1, [sp, #4]
   12b18:	ldrd	r0, [sp]
   12b1c:	orrs	r1, r0, r1
   12b20:	beq	12a0c <__assert_fail@plt+0x12b8>
   12b24:	cmp	r3, r9
   12b28:	cmpeq	r2, r8
   12b2c:	bhi	12a4c <__assert_fail@plt+0x12f8>
   12b30:	moveq	r1, #1
   12b34:	movne	r1, #0
   12b38:	cmp	r5, r7
   12b3c:	cmpeq	r4, r6
   12b40:	movhi	r0, #1
   12b44:	movls	r0, #0
   12b48:	tst	r1, r0
   12b4c:	bne	12a4c <__assert_fail@plt+0x12f8>
   12b50:	cmp	r3, r9
   12b54:	cmpeq	r2, r8
   12b58:	bcc	12ab4 <__assert_fail@plt+0x1360>
   12b5c:	cmp	r5, r7
   12b60:	cmpeq	r4, r6
   12b64:	movcs	r1, #0
   12b68:	andcc	r1, r1, #1
   12b6c:	cmp	r1, #0
   12b70:	bne	12ab4 <__assert_fail@plt+0x1360>
   12b74:	ldr	r1, [sp, #20]
   12b78:	strd	r2, [r1]
   12b7c:	mov	r0, r4
   12b80:	mov	r1, r5
   12b84:	b	12a30 <__assert_fail@plt+0x12dc>
   12b88:	andeq	pc, r1, ip, lsr #1
   12b8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b90:	strd	r6, [sp, #8]
   12b94:	strd	r8, [sp, #16]
   12b98:	strd	sl, [sp, #24]
   12b9c:	str	lr, [sp, #32]
   12ba0:	sub	sp, sp, #36	; 0x24
   12ba4:	str	r0, [sp, #4]
   12ba8:	ldrd	sl, [sp, #72]	; 0x48
   12bac:	ldr	r1, [sp, #88]	; 0x58
   12bb0:	str	r1, [sp, #8]
   12bb4:	ldr	r1, [sp, #92]	; 0x5c
   12bb8:	str	r1, [sp, #12]
   12bbc:	ldrd	r0, [sp, #80]	; 0x50
   12bc0:	orrs	r1, r0, r1
   12bc4:	beq	12d44 <__assert_fail@plt+0x15f0>
   12bc8:	orrs	r1, r2, r3
   12bcc:	beq	12d6c <__assert_fail@plt+0x1618>
   12bd0:	mov	r0, #0
   12bd4:	ldr	ip, [sp, #84]	; 0x54
   12bd8:	and	r1, ip, #-16777216	; 0xff000000
   12bdc:	orrs	r1, r0, r1
   12be0:	bne	12d60 <__assert_fail@plt+0x160c>
   12be4:	ldrd	r0, [sp, #80]	; 0x50
   12be8:	mov	ip, #0
   12bec:	strd	r2, [sp, #16]
   12bf0:	lsl	lr, r1, #8
   12bf4:	orr	lr, lr, r0, lsr #24
   12bf8:	lsl	r3, r0, #8
   12bfc:	mov	r0, r3
   12c00:	mov	r1, lr
   12c04:	add	ip, ip, #8
   12c08:	mov	r6, #0
   12c0c:	and	r7, lr, #-16777216	; 0xff000000
   12c10:	orrs	r3, r6, r7
   12c14:	beq	12bf0 <__assert_fail@plt+0x149c>
   12c18:	ldrd	r2, [sp, #16]
   12c1c:	cmp	r0, #0
   12c20:	sbcs	lr, r1, #0
   12c24:	blt	12c48 <__assert_fail@plt+0x14f4>
   12c28:	adds	r4, r0, r0
   12c2c:	adc	r5, r1, r1
   12c30:	mov	r0, r4
   12c34:	mov	r1, r5
   12c38:	add	ip, ip, #1
   12c3c:	cmp	r4, #0
   12c40:	sbcs	lr, r5, #0
   12c44:	bge	12c28 <__assert_fail@plt+0x14d4>
   12c48:	mov	r6, ip
   12c4c:	mov	r0, #0
   12c50:	and	r1, r3, #-16777216	; 0xff000000
   12c54:	orrs	r1, r0, r1
   12c58:	bne	12d88 <__assert_fail@plt+0x1634>
   12c5c:	mov	r0, r2
   12c60:	mov	r1, r3
   12c64:	mov	ip, #0
   12c68:	mov	r5, ip
   12c6c:	strd	r2, [sp, #16]
   12c70:	mov	r3, r6
   12c74:	lsl	lr, r1, #8
   12c78:	orr	lr, lr, r0, lsr #24
   12c7c:	lsl	r4, r0, #8
   12c80:	mov	r0, r4
   12c84:	mov	r1, lr
   12c88:	add	ip, ip, #8
   12c8c:	mov	r6, r5
   12c90:	and	r7, lr, #-16777216	; 0xff000000
   12c94:	orrs	r2, r6, r7
   12c98:	beq	12c74 <__assert_fail@plt+0x1520>
   12c9c:	mov	r6, r3
   12ca0:	ldrd	r2, [sp, #16]
   12ca4:	cmp	r0, #0
   12ca8:	sbcs	lr, r1, #0
   12cac:	blt	12cd0 <__assert_fail@plt+0x157c>
   12cb0:	adds	r8, r0, r0
   12cb4:	adc	r9, r1, r1
   12cb8:	mov	r0, r8
   12cbc:	mov	r1, r9
   12cc0:	add	ip, ip, #1
   12cc4:	cmp	r8, #0
   12cc8:	sbcs	lr, r9, #0
   12ccc:	bge	12cb0 <__assert_fail@plt+0x155c>
   12cd0:	sub	ip, r6, ip
   12cd4:	sub	r7, ip, #32
   12cd8:	rsb	r0, ip, #32
   12cdc:	ldr	r1, [sp, #84]	; 0x54
   12ce0:	lsl	lr, r1, ip
   12ce4:	ldr	r1, [sp, #80]	; 0x50
   12ce8:	orr	lr, lr, r1, lsl r7
   12cec:	str	r0, [sp, #16]
   12cf0:	orr	lr, lr, r1, lsr r0
   12cf4:	rsb	r5, ip, #64	; 0x40
   12cf8:	rsb	r0, r5, #32
   12cfc:	sub	r1, r5, #32
   12d00:	ldr	r8, [sp, #8]
   12d04:	lsr	r4, r8, r5
   12d08:	ldr	r9, [sp, #12]
   12d0c:	orr	r4, r4, r9, lsl r0
   12d10:	orr	r4, r4, r9, lsr r1
   12d14:	ldr	r6, [sp, #80]	; 0x50
   12d18:	orr	r0, r4, r6, lsl ip
   12d1c:	orr	r1, lr, r9, lsr r5
   12d20:	lsl	r5, r9, ip
   12d24:	orr	r5, r5, r8, lsl r7
   12d28:	ldr	lr, [sp, #16]
   12d2c:	orr	r5, r5, r8, lsr lr
   12d30:	lsl	r4, r8, ip
   12d34:	cmp	ip, #0
   12d38:	ble	12e24 <__assert_fail@plt+0x16d0>
   12d3c:	mov	lr, #0
   12d40:	b	12df4 <__assert_fail@plt+0x16a0>
   12d44:	ldr	r3, [pc, #260]	; 12e50 <__assert_fail@plt+0x16fc>
   12d48:	movw	r2, #411	; 0x19b
   12d4c:	movw	r1, #7868	; 0x1ebc
   12d50:	movt	r1, #2
   12d54:	movw	r0, #8012	; 0x1f4c
   12d58:	movt	r0, #2
   12d5c:	bl	11754 <__assert_fail@plt>
   12d60:	ldrd	r0, [sp, #80]	; 0x50
   12d64:	mov	ip, #0
   12d68:	b	12c1c <__assert_fail@plt+0x14c8>
   12d6c:	mov	r2, #0
   12d70:	mov	r3, #0
   12d74:	ldr	r1, [sp, #4]
   12d78:	strd	r2, [r1]
   12d7c:	mov	r0, sl
   12d80:	mov	r1, fp
   12d84:	b	12e34 <__assert_fail@plt+0x16e0>
   12d88:	mov	r0, r2
   12d8c:	mov	r1, r3
   12d90:	mov	ip, #0
   12d94:	b	12ca4 <__assert_fail@plt+0x1550>
   12d98:	cmp	fp, r5
   12d9c:	cmpeq	sl, r4
   12da0:	movcc	r6, #1
   12da4:	movcs	r6, #0
   12da8:	mov	r7, #0
   12dac:	subs	sl, sl, r4
   12db0:	sbc	fp, fp, r5
   12db4:	subs	r8, r2, r0
   12db8:	sbc	r9, r3, r1
   12dbc:	subs	r2, r8, r6
   12dc0:	sbc	r3, r9, r7
   12dc4:	lsr	r7, r4, #1
   12dc8:	lsr	r6, r5, #1
   12dcc:	orr	r4, r7, r5, lsl #31
   12dd0:	orr	r5, r6, r0, lsl #31
   12dd4:	lsr	r6, r0, #1
   12dd8:	orr	r6, r6, r1, lsl #31
   12ddc:	lsr	r7, r1, #1
   12de0:	mov	r0, r6
   12de4:	mov	r1, r7
   12de8:	add	lr, lr, #1
   12dec:	cmp	ip, lr
   12df0:	beq	12e24 <__assert_fail@plt+0x16d0>
   12df4:	cmp	r3, r1
   12df8:	cmpeq	r2, r0
   12dfc:	bhi	12d98 <__assert_fail@plt+0x1644>
   12e00:	moveq	r6, #1
   12e04:	movne	r6, #0
   12e08:	cmp	fp, r5
   12e0c:	cmpeq	sl, r4
   12e10:	movcc	r6, #0
   12e14:	andcs	r6, r6, #1
   12e18:	cmp	r6, #0
   12e1c:	beq	12dc4 <__assert_fail@plt+0x1670>
   12e20:	b	12d98 <__assert_fail@plt+0x1644>
   12e24:	ldr	r1, [sp, #4]
   12e28:	strd	r2, [r1]
   12e2c:	mov	r0, sl
   12e30:	mov	r1, fp
   12e34:	add	sp, sp, #36	; 0x24
   12e38:	ldrd	r4, [sp]
   12e3c:	ldrd	r6, [sp, #8]
   12e40:	ldrd	r8, [sp, #16]
   12e44:	ldrd	sl, [sp, #24]
   12e48:	add	sp, sp, #32
   12e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e50:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   12e54:	strd	r4, [sp, #-16]!
   12e58:	str	r6, [sp, #8]
   12e5c:	str	lr, [sp, #12]
   12e60:	sub	sp, sp, #24
   12e64:	mov	r6, r2
   12e68:	mov	r4, sp
   12e6c:	mov	r2, r4
   12e70:	bl	17d78 <__assert_fail@plt+0x6624>
   12e74:	mov	r1, r0
   12e78:	sub	r4, r0, r4
   12e7c:	rsb	r5, r4, #20
   12e80:	cmp	r5, r6
   12e84:	bcs	12ebc <__assert_fail@plt+0x1768>
   12e88:	movw	r3, #12780	; 0x31ec
   12e8c:	movt	r3, #3
   12e90:	ldr	r3, [r3, #4]
   12e94:	sub	r4, r4, #20
   12e98:	add	r2, r4, r6
   12e9c:	add	r2, r3, r2
   12ea0:	mov	ip, #48	; 0x30
   12ea4:	strb	ip, [r3], #1
   12ea8:	cmp	r3, r2
   12eac:	bne	12ea4 <__assert_fail@plt+0x1750>
   12eb0:	movw	r3, #12780	; 0x31ec
   12eb4:	movt	r3, #3
   12eb8:	str	r2, [r3, #4]
   12ebc:	movw	r4, #12780	; 0x31ec
   12ec0:	movt	r4, #3
   12ec4:	ldr	r6, [r4, #4]
   12ec8:	mov	r2, r5
   12ecc:	mov	r0, r6
   12ed0:	bl	113f4 <memcpy@plt>
   12ed4:	add	r5, r6, r5
   12ed8:	str	r5, [r4, #4]
   12edc:	add	sp, sp, #24
   12ee0:	ldrd	r4, [sp]
   12ee4:	ldr	r6, [sp, #8]
   12ee8:	add	sp, sp, #12
   12eec:	pop	{pc}		; (ldr pc, [sp], #4)
   12ef0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ef4:	strd	r6, [sp, #8]
   12ef8:	strd	r8, [sp, #16]
   12efc:	strd	sl, [sp, #24]
   12f00:	str	lr, [sp, #32]
   12f04:	sub	sp, sp, #20
   12f08:	mov	r4, r0
   12f0c:	mov	r5, r1
   12f10:	mov	sl, r2
   12f14:	mov	fp, r3
   12f18:	orrs	r3, r4, r5
   12f1c:	beq	12f6c <__assert_fail@plt+0x1818>
   12f20:	add	r3, pc, #312	; 0x138
   12f24:	ldrd	r2, [r3]
   12f28:	bl	1ebe4 <__assert_fail@plt+0xd490>
   12f2c:	strd	r0, [sp, #8]
   12f30:	add	r3, pc, #296	; 0x128
   12f34:	ldrd	r2, [r3]
   12f38:	mov	r0, r4
   12f3c:	mov	r1, r5
   12f40:	bl	1ebe4 <__assert_fail@plt+0xd490>
   12f44:	mov	r6, r2
   12f48:	mov	r7, r3
   12f4c:	mov	ip, #64	; 0x40
   12f50:	mov	r2, #0
   12f54:	mov	r3, r2
   12f58:	mov	r4, r2
   12f5c:	mov	r5, r2
   12f60:	add	r1, pc, #248	; 0xf8
   12f64:	ldrd	r0, [r1]
   12f68:	b	12fc4 <__assert_fail@plt+0x1870>
   12f6c:	mov	r2, #0
   12f70:	mov	r0, sl
   12f74:	mov	r1, fp
   12f78:	bl	12e54 <__assert_fail@plt+0x1700>
   12f7c:	b	13040 <__assert_fail@plt+0x18ec>
   12f80:	adds	r2, lr, #1
   12f84:	adc	r3, r8, #0
   12f88:	cmp	r5, fp
   12f8c:	cmpeq	r4, sl
   12f90:	movhi	lr, #1
   12f94:	movls	lr, #0
   12f98:	mov	r8, #0
   12f9c:	str	r8, [sp, #4]
   12fa0:	subs	sl, sl, r4
   12fa4:	sbc	fp, fp, r5
   12fa8:	subs	r9, r6, r0
   12fac:	sbc	r8, r7, r1
   12fb0:	subs	r6, r9, lr
   12fb4:	mov	lr, #0
   12fb8:	sbc	r7, r8, lr
   12fbc:	subs	ip, ip, #1
   12fc0:	beq	13028 <__assert_fail@plt+0x18d4>
   12fc4:	lsr	r8, r4, #1
   12fc8:	lsr	lr, r5, #1
   12fcc:	orr	r4, r8, r5, lsl #31
   12fd0:	orr	r5, lr, r0, lsl #31
   12fd4:	lsr	lr, r0, #1
   12fd8:	orr	lr, lr, r1, lsl #31
   12fdc:	lsr	r8, r1, #1
   12fe0:	mov	r0, lr
   12fe4:	mov	r1, r8
   12fe8:	adds	lr, r2, r2
   12fec:	adc	r8, r3, r3
   12ff0:	mov	r2, lr
   12ff4:	mov	r3, r8
   12ff8:	cmp	r1, r7
   12ffc:	cmpeq	r0, r6
   13000:	bcc	12f80 <__assert_fail@plt+0x182c>
   13004:	moveq	r9, #1
   13008:	movne	r9, #0
   1300c:	cmp	r5, fp
   13010:	cmpeq	r4, sl
   13014:	movhi	r9, #0
   13018:	andls	r9, r9, #1
   1301c:	cmp	r9, #0
   13020:	beq	12fbc <__assert_fail@plt+0x1868>
   13024:	b	12f80 <__assert_fail@plt+0x182c>
   13028:	ldrd	r0, [sp, #8]
   1302c:	bl	12ef0 <__assert_fail@plt+0x179c>
   13030:	mov	r2, #9
   13034:	mov	r0, sl
   13038:	mov	r1, fp
   1303c:	bl	12e54 <__assert_fail@plt+0x1700>
   13040:	add	sp, sp, #20
   13044:	ldrd	r4, [sp]
   13048:	ldrd	r6, [sp, #8]
   1304c:	ldrd	r8, [sp, #16]
   13050:	ldrd	sl, [sp, #24]
   13054:	add	sp, sp, #32
   13058:	pop	{pc}		; (ldr pc, [sp], #4)
   1305c:	nop	{0}
   13060:	blcc	fe6c5868 <stdout@@GLIBC_2.4+0xfe692684>
   13064:	andeq	r0, r0, r0
   13068:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1306c:	strd	r6, [sp, #8]
   13070:	strd	r8, [sp, #16]
   13074:	str	sl, [sp, #24]
   13078:	str	lr, [sp, #28]
   1307c:	mov	r6, r0
   13080:	mov	r7, r1
   13084:	mov	r1, r2
   13088:	mov	r4, r3
   1308c:	ldr	r8, [sp, #36]	; 0x24
   13090:	mov	r3, r0
   13094:	ldr	r2, [sp, #32]
   13098:	mov	r0, r4
   1309c:	bl	1143c <__gmpz_powm@plt>
   130a0:	mov	r1, #1
   130a4:	mov	r0, r4
   130a8:	bl	1170c <__gmpz_cmp_ui@plt>
   130ac:	cmp	r0, #0
   130b0:	moveq	r0, #1
   130b4:	beq	13140 <__assert_fail@plt+0x19ec>
   130b8:	mov	r1, r7
   130bc:	mov	r0, r4
   130c0:	bl	116a0 <__gmpz_cmp@plt>
   130c4:	cmp	r0, #0
   130c8:	moveq	r0, #1
   130cc:	beq	13140 <__assert_fail@plt+0x19ec>
   130d0:	cmp	r8, #1
   130d4:	bls	13134 <__assert_fail@plt+0x19e0>
   130d8:	mov	r5, #1
   130dc:	mov	r9, #2
   130e0:	mov	sl, r5
   130e4:	mov	r3, r6
   130e8:	mov	r2, r9
   130ec:	mov	r1, r4
   130f0:	mov	r0, r4
   130f4:	bl	11724 <__gmpz_powm_ui@plt>
   130f8:	mov	r1, r7
   130fc:	mov	r0, r4
   13100:	bl	116a0 <__gmpz_cmp@plt>
   13104:	cmp	r0, #0
   13108:	beq	1313c <__assert_fail@plt+0x19e8>
   1310c:	mov	r1, sl
   13110:	mov	r0, r4
   13114:	bl	1170c <__gmpz_cmp_ui@plt>
   13118:	cmp	r0, #0
   1311c:	beq	13158 <__assert_fail@plt+0x1a04>
   13120:	add	r5, r5, #1
   13124:	cmp	r8, r5
   13128:	bne	130e4 <__assert_fail@plt+0x1990>
   1312c:	mov	r0, #0
   13130:	b	13140 <__assert_fail@plt+0x19ec>
   13134:	mov	r0, #0
   13138:	b	13140 <__assert_fail@plt+0x19ec>
   1313c:	mov	r0, #1
   13140:	ldrd	r4, [sp]
   13144:	ldrd	r6, [sp, #8]
   13148:	ldrd	r8, [sp, #16]
   1314c:	ldr	sl, [sp, #24]
   13150:	add	sp, sp, #28
   13154:	pop	{pc}		; (ldr pc, [sp], #4)
   13158:	mov	r0, #0
   1315c:	b	13140 <__assert_fail@plt+0x19ec>
   13160:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13164:	strd	r6, [sp, #8]
   13168:	strd	r8, [sp, #16]
   1316c:	strd	sl, [sp, #24]
   13170:	str	lr, [sp, #32]
   13174:	sub	sp, sp, #12
   13178:	mov	sl, r0
   1317c:	str	r1, [sp]
   13180:	ldr	r9, [r0, #8]
   13184:	ldr	r7, [r0]
   13188:	ldr	r5, [r0, #4]
   1318c:	subs	r6, r9, #1
   13190:	bmi	13304 <__assert_fail@plt+0x1bb0>
   13194:	add	fp, r9, r9, lsl #1
   13198:	add	fp, r7, fp, lsl #2
   1319c:	sub	fp, fp, #12
   131a0:	mov	r4, r6
   131a4:	ldr	r1, [sp]
   131a8:	mov	r0, fp
   131ac:	bl	116a0 <__gmpz_cmp@plt>
   131b0:	cmp	r0, #0
   131b4:	ble	13280 <__assert_fail@plt+0x1b2c>
   131b8:	sub	fp, fp, #12
   131bc:	subs	r4, r4, #1
   131c0:	bpl	131a4 <__assert_fail@plt+0x1a50>
   131c4:	add	r9, r9, #1
   131c8:	add	r3, r9, r9, lsl #1
   131cc:	lsl	r3, r3, #2
   131d0:	str	r3, [sp, #4]
   131d4:	mov	r1, r3
   131d8:	mov	r0, r7
   131dc:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   131e0:	mov	fp, r0
   131e4:	lsl	r7, r9, #2
   131e8:	mov	r1, r7
   131ec:	mov	r0, r5
   131f0:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   131f4:	mov	r8, r0
   131f8:	ldr	r3, [sp, #4]
   131fc:	sub	r5, r3, #12
   13200:	add	r5, fp, r5
   13204:	mov	r0, r5
   13208:	bl	11718 <__gmpz_init@plt>
   1320c:	mov	r0, r5
   13210:	sub	r5, r7, #4
   13214:	add	r5, r8, r5
   13218:	sub	r7, r0, #12
   1321c:	mov	r1, r7
   13220:	bl	1146c <__gmpz_set@plt>
   13224:	ldr	r3, [r5, #-4]
   13228:	str	r3, [r5], #-4
   1322c:	sub	r6, r6, #1
   13230:	mov	r0, r7
   13234:	cmp	r6, r4
   13238:	bgt	13218 <__assert_fail@plt+0x1ac4>
   1323c:	add	r4, r4, #1
   13240:	add	r0, r4, r4, lsl #1
   13244:	ldr	r1, [sp]
   13248:	add	r0, fp, r0, lsl #2
   1324c:	bl	1146c <__gmpz_set@plt>
   13250:	mov	r3, #1
   13254:	str	r3, [r8, r4, lsl #2]
   13258:	str	fp, [sl]
   1325c:	str	r8, [sl, #4]
   13260:	str	r9, [sl, #8]
   13264:	add	sp, sp, #12
   13268:	ldrd	r4, [sp]
   1326c:	ldrd	r6, [sp, #8]
   13270:	ldrd	r8, [sp, #16]
   13274:	ldrd	sl, [sp, #24]
   13278:	add	sp, sp, #32
   1327c:	pop	{pc}		; (ldr pc, [sp], #4)
   13280:	cmp	r4, #0
   13284:	blt	132a0 <__assert_fail@plt+0x1b4c>
   13288:	add	r0, r4, r4, lsl #1
   1328c:	ldr	r1, [sp]
   13290:	add	r0, r7, r0, lsl #2
   13294:	bl	116a0 <__gmpz_cmp@plt>
   13298:	cmp	r0, #0
   1329c:	beq	132f4 <__assert_fail@plt+0x1ba0>
   132a0:	add	r9, r9, #1
   132a4:	add	r3, r9, r9, lsl #1
   132a8:	lsl	r3, r3, #2
   132ac:	str	r3, [sp, #4]
   132b0:	mov	r1, r3
   132b4:	mov	r0, r7
   132b8:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   132bc:	mov	fp, r0
   132c0:	lsl	r7, r9, #2
   132c4:	mov	r1, r7
   132c8:	mov	r0, r5
   132cc:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   132d0:	mov	r8, r0
   132d4:	ldr	r3, [sp, #4]
   132d8:	sub	r5, r3, #12
   132dc:	add	r5, fp, r5
   132e0:	mov	r0, r5
   132e4:	bl	11718 <__gmpz_init@plt>
   132e8:	cmp	r6, r4
   132ec:	bgt	1320c <__assert_fail@plt+0x1ab8>
   132f0:	b	1323c <__assert_fail@plt+0x1ae8>
   132f4:	ldr	r3, [r5, r4, lsl #2]
   132f8:	add	r3, r3, #1
   132fc:	str	r3, [r5, r4, lsl #2]
   13300:	b	13264 <__assert_fail@plt+0x1b10>
   13304:	add	r9, r9, #1
   13308:	add	r4, r9, r9, lsl #1
   1330c:	lsl	r4, r4, #2
   13310:	mov	r1, r4
   13314:	mov	r0, r7
   13318:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   1331c:	mov	fp, r0
   13320:	lsl	r1, r9, #2
   13324:	mov	r0, r5
   13328:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   1332c:	mov	r8, r0
   13330:	sub	r0, r4, #12
   13334:	add	r0, fp, r0
   13338:	bl	11718 <__gmpz_init@plt>
   1333c:	mov	r4, r6
   13340:	b	1323c <__assert_fail@plt+0x1ae8>
   13344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13348:	strd	r6, [sp, #8]
   1334c:	strd	r8, [sp, #16]
   13350:	strd	sl, [sp, #24]
   13354:	str	lr, [sp, #32]
   13358:	sub	sp, sp, #108	; 0x6c
   1335c:	mov	r9, r0
   13360:	mov	r8, r1
   13364:	mov	r0, r2
   13368:	mov	r1, r3
   1336c:	strd	r0, [sp]
   13370:	ldr	sl, [sp, #144]	; 0x90
   13374:	ldr	r3, [sp, #148]	; 0x94
   13378:	str	r3, [sp, #100]	; 0x64
   1337c:	ldr	r3, [sp, #152]	; 0x98
   13380:	str	r3, [sp, #64]	; 0x40
   13384:	ldr	r3, [sp, #156]	; 0x9c
   13388:	str	r3, [sp, #68]	; 0x44
   1338c:	ldr	fp, [sp, #160]	; 0xa0
   13390:	ldr	r2, [sp, #164]	; 0xa4
   13394:	and	r4, r0, #1
   13398:	mov	r5, #0
   1339c:	orrs	r3, r4, r5
   133a0:	bne	133d8 <__assert_fail@plt+0x1c84>
   133a4:	orrs	r3, r0, r1
   133a8:	strne	r2, [sp, #80]	; 0x50
   133ac:	bne	133e0 <__assert_fail@plt+0x1c8c>
   133b0:	str	r2, [sp, #80]	; 0x50
   133b4:	mov	r0, fp
   133b8:	ldr	r1, [sp, #80]	; 0x50
   133bc:	add	sp, sp, #108	; 0x6c
   133c0:	ldrd	r4, [sp]
   133c4:	ldrd	r6, [sp, #8]
   133c8:	ldrd	r8, [sp, #16]
   133cc:	ldrd	sl, [sp, #24]
   133d0:	add	sp, sp, #32
   133d4:	pop	{pc}		; (ldr pc, [sp], #4)
   133d8:	mov	fp, r9
   133dc:	str	r8, [sp, #80]	; 0x50
   133e0:	ldr	r3, [sp, #100]	; 0x64
   133e4:	str	r3, [sp, #96]	; 0x60
   133e8:	b	133f8 <__assert_fail@plt+0x1ca4>
   133ec:	ldrd	r2, [sp]
   133f0:	orrs	r3, r2, r3
   133f4:	beq	133b4 <__assert_fail@plt+0x1c60>
   133f8:	umull	r6, r7, r9, r9
   133fc:	umull	r2, r3, r8, r9
   13400:	umull	r8, r9, r8, r8
   13404:	adds	ip, r2, r2
   13408:	adc	lr, r3, r3
   1340c:	mov	r0, #0
   13410:	adds	r1, r7, ip
   13414:	str	r1, [sp, #8]
   13418:	adc	r1, r0, lr
   1341c:	str	r1, [sp, #12]
   13420:	ldrd	r0, [sp, #8]
   13424:	cmp	r3, r1
   13428:	cmpeq	r2, r0
   1342c:	bls	13438 <__assert_fail@plt+0x1ce4>
   13430:	adds	r8, r8, #0
   13434:	adc	r9, r9, #1
   13438:	ldrd	r0, [sp, #8]
   1343c:	mov	ip, #0
   13440:	adds	r3, r1, r8
   13444:	str	r3, [sp, #24]
   13448:	adc	r3, ip, r9
   1344c:	str	r3, [sp, #28]
   13450:	mov	r2, r0
   13454:	adds	r6, ip, r6
   13458:	adc	r2, r2, ip
   1345c:	ldr	r3, [sp, #68]	; 0x44
   13460:	mul	r3, r6, r3
   13464:	ldr	r1, [sp, #64]	; 0x40
   13468:	mla	r2, r1, r2, r3
   1346c:	umull	r6, r7, r6, r1
   13470:	add	r2, r2, r7
   13474:	mov	lr, ip
   13478:	umull	r0, r1, r2, sl
   1347c:	ldr	r4, [sp, #96]	; 0x60
   13480:	umull	r2, r3, r2, r4
   13484:	umull	r8, r9, r4, r6
   13488:	adds	r4, r8, r0
   1348c:	adc	r5, r9, r1
   13490:	umull	r6, r7, r6, sl
   13494:	adds	ip, r7, r4
   13498:	str	ip, [sp, #16]
   1349c:	adc	ip, lr, r5
   134a0:	str	ip, [sp, #20]
   134a4:	ldrd	r4, [sp, #16]
   134a8:	cmp	r1, r5
   134ac:	cmpeq	r0, r4
   134b0:	bls	134bc <__assert_fail@plt+0x1d68>
   134b4:	adds	r2, r2, lr
   134b8:	adc	r3, r3, #1
   134bc:	ldr	r1, [sp, #20]
   134c0:	mov	r0, #0
   134c4:	adds	r1, r1, r2
   134c8:	str	r1, [sp, #32]
   134cc:	adc	r3, r0, r3
   134d0:	str	r3, [sp, #36]	; 0x24
   134d4:	ldrd	r2, [sp, #24]
   134d8:	ldrd	r0, [sp, #32]
   134dc:	subs	r9, r2, r0
   134e0:	sbc	r8, r3, r1
   134e4:	cmp	r3, r1
   134e8:	cmpeq	r2, r0
   134ec:	bcs	134fc <__assert_fail@plt+0x1da8>
   134f0:	adds	r9, r9, sl
   134f4:	ldr	r3, [sp, #100]	; 0x64
   134f8:	adc	r8, r8, r3
   134fc:	ldrd	r0, [sp]
   13500:	lsr	r3, r0, #1
   13504:	orr	r3, r3, r1, lsl #31
   13508:	lsr	r2, r1, #1
   1350c:	str	r3, [sp]
   13510:	str	r2, [sp, #4]
   13514:	and	r3, r3, #1
   13518:	str	r3, [sp, #40]	; 0x28
   1351c:	mov	r3, #0
   13520:	str	r3, [sp, #44]	; 0x2c
   13524:	ldrd	r2, [sp, #40]	; 0x28
   13528:	orrs	r3, r2, r3
   1352c:	beq	133ec <__assert_fail@plt+0x1c98>
   13530:	umull	r6, r7, fp, r9
   13534:	ldr	r3, [sp, #80]	; 0x50
   13538:	umull	r4, r5, r3, r9
   1353c:	umull	r2, r3, r3, r8
   13540:	mov	r0, r4
   13544:	mov	r1, r5
   13548:	umlal	r0, r1, fp, r8
   1354c:	mov	fp, #0
   13550:	adds	ip, r7, r0
   13554:	str	ip, [sp, #48]	; 0x30
   13558:	adc	r1, fp, r1
   1355c:	str	r1, [sp, #52]	; 0x34
   13560:	ldrd	r0, [sp, #48]	; 0x30
   13564:	cmp	r5, r1
   13568:	cmpeq	r4, r0
   1356c:	bls	13578 <__assert_fail@plt+0x1e24>
   13570:	adds	r2, r2, fp
   13574:	adc	r3, r3, #1
   13578:	ldrd	r4, [sp, #48]	; 0x30
   1357c:	mov	ip, #0
   13580:	adds	r1, r5, r2
   13584:	str	r1, [sp, #72]	; 0x48
   13588:	adc	r3, ip, r3
   1358c:	str	r3, [sp, #76]	; 0x4c
   13590:	adds	r2, ip, r6
   13594:	adc	r6, r4, ip
   13598:	ldr	r3, [sp, #68]	; 0x44
   1359c:	mul	r3, r2, r3
   135a0:	ldr	r1, [sp, #64]	; 0x40
   135a4:	mla	r6, r1, r6, r3
   135a8:	umull	r4, r5, r2, r1
   135ac:	add	r6, r6, r5
   135b0:	umull	r0, r1, sl, r6
   135b4:	mla	r1, r6, lr, r1
   135b8:	ldr	r3, [sp, #96]	; 0x60
   135bc:	umull	r6, r7, r3, r6
   135c0:	strd	r4, [sp, #80]	; 0x50
   135c4:	umull	r4, r5, r3, r4
   135c8:	adds	r3, r4, r0
   135cc:	adc	fp, r5, r1
   135d0:	ldr	r2, [sp, #80]	; 0x50
   135d4:	umull	r4, r5, sl, r2
   135d8:	mla	r5, lr, r2, r5
   135dc:	adds	r3, r5, r3
   135e0:	str	r3, [sp, #56]	; 0x38
   135e4:	adc	r3, ip, fp
   135e8:	str	r3, [sp, #60]	; 0x3c
   135ec:	ldrd	r2, [sp, #56]	; 0x38
   135f0:	cmp	r1, r3
   135f4:	cmpeq	r0, r2
   135f8:	bls	13604 <__assert_fail@plt+0x1eb0>
   135fc:	adds	r6, r6, ip
   13600:	adc	r7, r7, #1
   13604:	ldr	r3, [sp, #60]	; 0x3c
   13608:	mov	r2, #0
   1360c:	adds	r3, r3, r6
   13610:	str	r3, [sp, #88]	; 0x58
   13614:	adc	r3, r2, r7
   13618:	str	r3, [sp, #92]	; 0x5c
   1361c:	ldrd	r2, [sp, #72]	; 0x48
   13620:	ldrd	r0, [sp, #88]	; 0x58
   13624:	subs	fp, r2, r0
   13628:	sbc	ip, r3, r1
   1362c:	str	ip, [sp, #80]	; 0x50
   13630:	cmp	r3, r1
   13634:	cmpeq	r2, r0
   13638:	bcs	133f8 <__assert_fail@plt+0x1ca4>
   1363c:	adds	fp, fp, sl
   13640:	ldr	r3, [sp, #100]	; 0x64
   13644:	adc	r3, ip, r3
   13648:	str	r3, [sp, #80]	; 0x50
   1364c:	b	133f8 <__assert_fail@plt+0x1ca4>
   13650:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13654:	strd	r6, [sp, #8]
   13658:	strd	r8, [sp, #16]
   1365c:	strd	sl, [sp, #24]
   13660:	str	lr, [sp, #32]
   13664:	sub	sp, sp, #92	; 0x5c
   13668:	mov	sl, r0
   1366c:	mov	r4, r1
   13670:	str	r1, [sp, #80]	; 0x50
   13674:	str	r2, [sp, #68]	; 0x44
   13678:	str	r3, [sp, #72]	; 0x48
   1367c:	ldrd	r0, [sp, #152]	; 0x98
   13680:	strd	r0, [sp, #16]
   13684:	str	r2, [sp, #8]
   13688:	str	r3, [sp, #12]
   1368c:	str	sl, [sp]
   13690:	str	r4, [sp, #4]
   13694:	ldrd	r2, [sp, #136]	; 0x88
   13698:	ldrd	r0, [sp, #128]	; 0x80
   1369c:	bl	13344 <__assert_fail@plt+0x1bf0>
   136a0:	ldr	r3, [sp, #152]	; 0x98
   136a4:	subs	r3, sl, r3
   136a8:	str	r3, [sp, #56]	; 0x38
   136ac:	mov	ip, r4
   136b0:	ldr	r3, [sp, #156]	; 0x9c
   136b4:	sbc	r3, r4, r3
   136b8:	str	r3, [sp, #60]	; 0x3c
   136bc:	ldrd	r2, [sp, #152]	; 0x98
   136c0:	cmp	r3, r1
   136c4:	cmpeq	r2, r0
   136c8:	moveq	r3, #1
   136cc:	movne	r3, #0
   136d0:	ldrd	r4, [sp, #56]	; 0x38
   136d4:	cmp	r1, r5
   136d8:	cmpeq	r0, r4
   136dc:	moveq	r3, #1
   136e0:	str	r3, [sp, #84]	; 0x54
   136e4:	cmp	r3, #0
   136e8:	bne	13860 <__assert_fail@plt+0x210c>
   136ec:	ldr	r3, [sp, #144]	; 0x90
   136f0:	cmp	r3, #1
   136f4:	bls	13860 <__assert_fail@plt+0x210c>
   136f8:	str	ip, [sp, #76]	; 0x4c
   136fc:	mov	lr, #1
   13700:	str	sl, [sp, #64]	; 0x40
   13704:	strd	r6, [sp, #40]	; 0x28
   13708:	b	1373c <__assert_fail@plt+0x1fe8>
   1370c:	ldrd	r2, [sp, #56]	; 0x38
   13710:	cmp	r3, r1
   13714:	cmpeq	r2, r0
   13718:	beq	13858 <__assert_fail@plt+0x2104>
   1371c:	ldrd	r2, [sp, #152]	; 0x98
   13720:	cmp	r3, r1
   13724:	cmpeq	r2, r0
   13728:	beq	13860 <__assert_fail@plt+0x210c>
   1372c:	add	lr, lr, #1
   13730:	ldr	r3, [sp, #144]	; 0x90
   13734:	cmp	r3, lr
   13738:	beq	13860 <__assert_fail@plt+0x210c>
   1373c:	umull	r2, r3, r0, r0
   13740:	mov	sl, r2
   13744:	mov	fp, r3
   13748:	umull	r4, r5, r1, r0
   1374c:	umull	r2, r3, r1, r1
   13750:	adds	r7, r4, r4
   13754:	adc	r8, r5, r5
   13758:	mov	r6, #0
   1375c:	adds	ip, fp, r7
   13760:	str	ip, [sp, #24]
   13764:	adc	ip, r6, r8
   13768:	str	ip, [sp, #28]
   1376c:	ldrd	r6, [sp, #24]
   13770:	cmp	r5, r7
   13774:	cmpeq	r4, r6
   13778:	bls	13784 <__assert_fail@plt+0x2030>
   1377c:	adds	r2, r2, #0
   13780:	adc	r3, r3, #1
   13784:	ldrd	r6, [sp, #24]
   13788:	mov	ip, #0
   1378c:	adds	r4, r7, r2
   13790:	str	r4, [sp, #40]	; 0x28
   13794:	adc	r3, ip, r3
   13798:	str	r3, [sp, #44]	; 0x2c
   1379c:	adds	r4, ip, sl
   137a0:	adc	r2, r6, ip
   137a4:	ldr	r3, [sp, #72]	; 0x48
   137a8:	mul	r3, r4, r3
   137ac:	ldr	r5, [sp, #68]	; 0x44
   137b0:	mla	r2, r5, r2, r3
   137b4:	umull	r4, r5, r4, r5
   137b8:	add	r2, r2, r5
   137bc:	ldr	r3, [sp, #64]	; 0x40
   137c0:	umull	r6, r7, r2, r3
   137c4:	ldr	r8, [sp, #76]	; 0x4c
   137c8:	umull	r2, r3, r2, r8
   137cc:	umull	sl, fp, r8, r4
   137d0:	adds	r8, sl, r6
   137d4:	adc	r9, fp, r7
   137d8:	ldr	sl, [sp, #64]	; 0x40
   137dc:	umull	r4, r5, r4, sl
   137e0:	mov	fp, r5
   137e4:	mov	r5, ip
   137e8:	adds	ip, fp, r8
   137ec:	str	ip, [sp, #32]
   137f0:	adc	ip, r5, r9
   137f4:	str	ip, [sp, #36]	; 0x24
   137f8:	ldrd	r4, [sp, #32]
   137fc:	cmp	r7, r5
   13800:	cmpeq	r6, r4
   13804:	bls	13810 <__assert_fail@plt+0x20bc>
   13808:	adds	r2, r2, #0
   1380c:	adc	r3, r3, #1
   13810:	ldr	ip, [sp, #36]	; 0x24
   13814:	mov	r4, #0
   13818:	adds	ip, ip, r2
   1381c:	str	ip, [sp, #48]	; 0x30
   13820:	adc	r3, r4, r3
   13824:	str	r3, [sp, #52]	; 0x34
   13828:	ldrd	r2, [sp, #48]	; 0x30
   1382c:	ldrd	r4, [sp, #40]	; 0x28
   13830:	subs	r0, r4, r2
   13834:	sbc	r1, r5, r3
   13838:	cmp	r5, r3
   1383c:	cmpeq	r4, r2
   13840:	bcs	1370c <__assert_fail@plt+0x1fb8>
   13844:	ldr	r3, [sp, #64]	; 0x40
   13848:	adds	r0, r0, r3
   1384c:	ldr	r3, [sp, #80]	; 0x50
   13850:	adc	r1, r1, r3
   13854:	b	1370c <__assert_fail@plt+0x1fb8>
   13858:	mov	r3, #1
   1385c:	str	r3, [sp, #84]	; 0x54
   13860:	ldr	r0, [sp, #84]	; 0x54
   13864:	add	sp, sp, #92	; 0x5c
   13868:	ldrd	r4, [sp]
   1386c:	ldrd	r6, [sp, #8]
   13870:	ldrd	r8, [sp, #16]
   13874:	ldrd	sl, [sp, #24]
   13878:	add	sp, sp, #32
   1387c:	pop	{pc}		; (ldr pc, [sp], #4)
   13880:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13884:	strd	r6, [sp, #8]
   13888:	strd	r8, [sp, #16]
   1388c:	strd	sl, [sp, #24]
   13890:	str	lr, [sp, #32]
   13894:	sub	sp, sp, #388	; 0x184
   13898:	mov	r4, r0
   1389c:	mov	r5, r1
   138a0:	strd	r4, [sp, #40]	; 0x28
   138a4:	cmp	r1, #0
   138a8:	cmpeq	r0, #1
   138ac:	bls	13e44 <__assert_fail@plt+0x26f0>
   138b0:	add	r1, pc, #720	; 0x2d0
   138b4:	ldrd	r0, [r1]
   138b8:	cmp	r5, r1
   138bc:	cmpeq	r4, r0
   138c0:	bls	13e6c <__assert_fail@plt+0x2718>
   138c4:	subs	r4, r4, #1
   138c8:	str	r4, [sp, #80]	; 0x50
   138cc:	sbc	ip, r5, #0
   138d0:	str	ip, [sp, #84]	; 0x54
   138d4:	and	r0, r4, #1
   138d8:	mov	r1, #0
   138dc:	orrs	r1, r0, r1
   138e0:	bne	139e8 <__assert_fail@plt+0x2294>
   138e4:	mov	lr, #0
   138e8:	mov	r0, lr
   138ec:	lsr	r1, r4, #1
   138f0:	orr	r1, r1, ip, lsl #31
   138f4:	mov	r4, r1
   138f8:	lsr	ip, ip, #1
   138fc:	add	lr, lr, #1
   13900:	and	r2, r1, #1
   13904:	mov	r3, r0
   13908:	orrs	r1, r2, r3
   1390c:	beq	138ec <__assert_fail@plt+0x2198>
   13910:	str	lr, [sp, #76]	; 0x4c
   13914:	str	r4, [sp, #104]	; 0x68
   13918:	str	ip, [sp, #108]	; 0x6c
   1391c:	movw	r3, #60904	; 0xede8
   13920:	movt	r3, #1
   13924:	ldrd	r4, [sp, #40]	; 0x28
   13928:	ubfx	r2, r4, #1, #7
   1392c:	add	r3, r3, r2
   13930:	ldrb	r2, [r3, #728]	; 0x2d8
   13934:	mov	r3, #0
   13938:	adds	r1, r2, r2
   1393c:	adc	ip, r3, r3
   13940:	umull	r2, r3, r2, r2
   13944:	mul	r0, r2, r5
   13948:	mla	r0, r4, r3, r0
   1394c:	umull	r2, r3, r2, r4
   13950:	add	r3, r0, r3
   13954:	subs	r0, r1, r2
   13958:	sbc	ip, ip, r3
   1395c:	adds	r3, r0, r0
   13960:	adc	r2, ip, ip
   13964:	mul	ip, r0, ip
   13968:	umull	r0, r1, r0, r0
   1396c:	add	r1, r1, ip, lsl #1
   13970:	mul	ip, r0, r5
   13974:	mla	ip, r4, r1, ip
   13978:	umull	r0, r1, r0, r4
   1397c:	add	r1, ip, r1
   13980:	subs	r3, r3, r0
   13984:	sbc	r2, r2, r1
   13988:	adds	r0, r3, r3
   1398c:	adc	r1, r2, r2
   13990:	mul	ip, r3, r2
   13994:	umull	r2, r3, r3, r3
   13998:	add	r3, r3, ip, lsl #1
   1399c:	mul	ip, r2, r5
   139a0:	mla	ip, r4, r3, ip
   139a4:	umull	r2, r3, r2, r4
   139a8:	add	r3, ip, r3
   139ac:	subs	r0, r0, r2
   139b0:	str	r0, [sp, #52]	; 0x34
   139b4:	sbc	r3, r1, r3
   139b8:	str	r3, [sp, #72]	; 0x48
   139bc:	mov	r2, r4
   139c0:	mov	r3, r5
   139c4:	mov	r4, #64	; 0x40
   139c8:	mov	sl, #0
   139cc:	mov	fp, #0
   139d0:	mov	r6, #1
   139d4:	mov	r7, #0
   139d8:	mov	r0, sl
   139dc:	mov	r1, fp
   139e0:	strd	r8, [sp, #64]	; 0x40
   139e4:	b	13a38 <__assert_fail@plt+0x22e4>
   139e8:	ldr	r3, [sp, #80]	; 0x50
   139ec:	str	r3, [sp, #104]	; 0x68
   139f0:	ldr	r3, [sp, #84]	; 0x54
   139f4:	str	r3, [sp, #108]	; 0x6c
   139f8:	mov	r3, #0
   139fc:	str	r3, [sp, #76]	; 0x4c
   13a00:	b	1391c <__assert_fail@plt+0x21c8>
   13a04:	cmp	r1, fp
   13a08:	cmpeq	r0, sl
   13a0c:	movhi	ip, #1
   13a10:	movls	ip, #0
   13a14:	mov	lr, #0
   13a18:	subs	sl, sl, r0
   13a1c:	sbc	fp, fp, r1
   13a20:	subs	r5, r6, r2
   13a24:	sbc	r9, r7, r3
   13a28:	subs	r6, r5, ip
   13a2c:	sbc	r7, r9, lr
   13a30:	subs	r4, r4, #1
   13a34:	beq	13a8c <__assert_fail@plt+0x2338>
   13a38:	lsr	lr, r0, #1
   13a3c:	lsr	ip, r1, #1
   13a40:	orr	r0, lr, r1, lsl #31
   13a44:	orr	r1, ip, r2, lsl #31
   13a48:	lsr	ip, r2, #1
   13a4c:	orr	ip, ip, r3, lsl #31
   13a50:	lsr	lr, r3, #1
   13a54:	mov	r2, ip
   13a58:	mov	r3, lr
   13a5c:	cmp	lr, r7
   13a60:	cmpeq	ip, r6
   13a64:	bcc	13a04 <__assert_fail@plt+0x22b0>
   13a68:	moveq	ip, #1
   13a6c:	movne	ip, #0
   13a70:	cmp	r1, fp
   13a74:	cmpeq	r0, sl
   13a78:	movhi	ip, #0
   13a7c:	andls	ip, ip, #1
   13a80:	cmp	ip, #0
   13a84:	beq	13a30 <__assert_fail@plt+0x22dc>
   13a88:	b	13a04 <__assert_fail@plt+0x22b0>
   13a8c:	ldrd	r8, [sp, #64]	; 0x40
   13a90:	ldrd	r6, [sp, #40]	; 0x28
   13a94:	strd	r6, [sp, #64]	; 0x40
   13a98:	subs	r3, r6, sl
   13a9c:	str	r3, [sp, #56]	; 0x38
   13aa0:	sbc	r3, r7, fp
   13aa4:	str	r3, [sp, #60]	; 0x3c
   13aa8:	ldrd	r2, [sp, #56]	; 0x38
   13aac:	cmp	r3, fp
   13ab0:	cmpeq	r2, sl
   13ab4:	movhi	r2, #1
   13ab8:	movls	r2, #0
   13abc:	rsbs	r2, r2, #0
   13ac0:	sbc	r3, r3, r3
   13ac4:	and	r1, r2, r6
   13ac8:	and	r0, r3, r7
   13acc:	adds	r3, sl, sl
   13ad0:	adc	r2, fp, fp
   13ad4:	subs	r3, r3, r6
   13ad8:	sbc	r2, r2, r7
   13adc:	adds	r3, r1, r3
   13ae0:	str	r3, [sp, #96]	; 0x60
   13ae4:	adc	r3, r0, r2
   13ae8:	str	r3, [sp, #100]	; 0x64
   13aec:	ldr	r3, [sp, #76]	; 0x4c
   13af0:	str	r3, [sp, #112]	; 0x70
   13af4:	strd	sl, [sp, #24]
   13af8:	str	r3, [sp, #16]
   13afc:	ldr	r3, [sp, #104]	; 0x68
   13b00:	str	r3, [sp, #8]
   13b04:	ldr	r3, [sp, #108]	; 0x6c
   13b08:	str	r3, [sp, #12]
   13b0c:	ldrd	r2, [sp, #96]	; 0x60
   13b10:	strd	r2, [sp]
   13b14:	ldr	r2, [sp, #52]	; 0x34
   13b18:	ldr	r3, [sp, #72]	; 0x48
   13b1c:	mov	r0, r6
   13b20:	mov	r1, r7
   13b24:	bl	13650 <__assert_fail@plt+0x1efc>
   13b28:	subs	r3, r0, #0
   13b2c:	str	r3, [sp, #124]	; 0x7c
   13b30:	beq	13e4c <__assert_fail@plt+0x26f8>
   13b34:	add	r3, sp, #128	; 0x80
   13b38:	str	r3, [sp]
   13b3c:	ldr	r2, [sp, #80]	; 0x50
   13b40:	ldr	r3, [sp, #84]	; 0x54
   13b44:	mov	r0, #0
   13b48:	mov	r1, #0
   13b4c:	bl	15540 <__assert_fail@plt+0x3dec>
   13b50:	ldrb	r3, [sp, #378]	; 0x17a
   13b54:	str	r3, [sp, #56]	; 0x38
   13b58:	str	fp, [sp, #116]	; 0x74
   13b5c:	movw	r3, #60904	; 0xede8
   13b60:	movt	r3, #1
   13b64:	str	r3, [sp, #76]	; 0x4c
   13b68:	mov	r3, #2
   13b6c:	str	r3, [sp, #88]	; 0x58
   13b70:	mov	r3, #0
   13b74:	str	r3, [sp, #92]	; 0x5c
   13b78:	str	r4, [sp, #120]	; 0x78
   13b7c:	ldrd	r4, [sp, #96]	; 0x60
   13b80:	b	13c20 <__assert_fail@plt+0x24cc>
   13b84:	nop	{0}
   13b88:	cmneq	sp, r8, ror sp
   13b8c:	andeq	r0, r0, r0
   13b90:	andeq	pc, r1, r4, lsl #1
   13b94:	andeq	pc, r1, r0, asr #2
   13b98:	ldr	r2, [sp, #36]	; 0x24
   13b9c:	mov	r3, #0
   13ba0:	adds	r8, r2, r6
   13ba4:	adc	r9, r3, r7
   13ba8:	ldr	r0, [sp, #32]
   13bac:	ldr	r2, [sp, #40]	; 0x28
   13bb0:	adds	r4, r3, r2
   13bb4:	adc	r5, r0, r3
   13bb8:	orrs	r3, r8, r9
   13bbc:	bne	13d48 <__assert_fail@plt+0x25f4>
   13bc0:	ldrd	r2, [sp, #64]	; 0x40
   13bc4:	mov	r0, r4
   13bc8:	mov	r1, r5
   13bcc:	bl	1ebe4 <__assert_fail@plt+0xd490>
   13bd0:	mov	r4, r2
   13bd4:	mov	r5, r3
   13bd8:	strd	sl, [sp, #24]
   13bdc:	ldr	r3, [sp, #112]	; 0x70
   13be0:	str	r3, [sp, #16]
   13be4:	ldr	r3, [sp, #104]	; 0x68
   13be8:	str	r3, [sp, #8]
   13bec:	ldr	r3, [sp, #108]	; 0x6c
   13bf0:	str	r3, [sp, #12]
   13bf4:	strd	r4, [sp]
   13bf8:	ldr	r2, [sp, #52]	; 0x34
   13bfc:	ldr	r3, [sp, #72]	; 0x48
   13c00:	ldrd	r0, [sp, #64]	; 0x40
   13c04:	bl	13650 <__assert_fail@plt+0x1efc>
   13c08:	cmp	r0, #0
   13c0c:	beq	13e78 <__assert_fail@plt+0x2724>
   13c10:	ldr	r3, [sp, #76]	; 0x4c
   13c14:	ldr	r2, [pc, #-140]	; 13b90 <__assert_fail@plt+0x243c>
   13c18:	cmp	r3, r2
   13c1c:	beq	13e1c <__assert_fail@plt+0x26c8>
   13c20:	ldr	r3, [sp, #56]	; 0x38
   13c24:	cmp	r3, #0
   13c28:	beq	13e4c <__assert_fail@plt+0x26f8>
   13c2c:	add	r7, sp, #136	; 0x88
   13c30:	ldr	r6, [sp, #120]	; 0x78
   13c34:	strd	r8, [sp, #96]	; 0x60
   13c38:	mov	r9, r7
   13c3c:	strd	r4, [sp, #40]	; 0x28
   13c40:	mov	r5, r6
   13c44:	ldrd	r6, [sp, #64]	; 0x40
   13c48:	ldrd	r2, [r9, #8]!
   13c4c:	ldr	r0, [sp, #80]	; 0x50
   13c50:	ldr	r1, [sp, #84]	; 0x54
   13c54:	bl	1ebe4 <__assert_fail@plt+0xd490>
   13c58:	strd	sl, [sp, #16]
   13c5c:	ldr	r3, [sp, #52]	; 0x34
   13c60:	str	r3, [sp, #8]
   13c64:	ldr	r3, [sp, #72]	; 0x48
   13c68:	str	r3, [sp, #12]
   13c6c:	strd	r6, [sp]
   13c70:	mov	r2, r0
   13c74:	mov	r3, r1
   13c78:	ldrd	r0, [sp, #40]	; 0x28
   13c7c:	bl	13344 <__assert_fail@plt+0x1bf0>
   13c80:	add	r5, r5, #1
   13c84:	cmp	r1, fp
   13c88:	cmpeq	r0, sl
   13c8c:	movne	r3, #1
   13c90:	moveq	r3, #0
   13c94:	ldr	r2, [sp, #56]	; 0x38
   13c98:	cmp	r5, r2
   13c9c:	movcs	r3, #0
   13ca0:	andcc	r3, r3, #1
   13ca4:	cmp	r3, #0
   13ca8:	bne	13c48 <__assert_fail@plt+0x24f4>
   13cac:	cmp	r1, fp
   13cb0:	cmpeq	r0, sl
   13cb4:	bne	13e4c <__assert_fail@plt+0x26f8>
   13cb8:	ldr	r1, [sp, #76]	; 0x4c
   13cbc:	ldrb	r2, [r1], #1
   13cc0:	mov	r3, #0
   13cc4:	str	r1, [sp, #76]	; 0x4c
   13cc8:	ldr	r1, [sp, #88]	; 0x58
   13ccc:	adds	r1, r1, r2
   13cd0:	str	r1, [sp, #88]	; 0x58
   13cd4:	ldr	r0, [sp, #92]	; 0x5c
   13cd8:	adc	ip, r0, r3
   13cdc:	str	ip, [sp, #92]	; 0x5c
   13ce0:	umull	r2, r3, sl, r1
   13ce4:	strd	r2, [sp, #40]	; 0x28
   13ce8:	ldr	r3, [sp, #116]	; 0x74
   13cec:	umull	r0, r1, r3, r1
   13cf0:	umull	r6, r7, r3, ip
   13cf4:	mov	r2, r0
   13cf8:	mov	r3, r1
   13cfc:	umlal	r2, r3, sl, ip
   13d00:	ldr	ip, [sp, #44]	; 0x2c
   13d04:	mov	lr, #0
   13d08:	adds	ip, ip, r2
   13d0c:	str	ip, [sp, #32]
   13d10:	adc	r3, lr, r3
   13d14:	str	r3, [sp, #36]	; 0x24
   13d18:	ldrd	r2, [sp, #32]
   13d1c:	cmp	r1, r3
   13d20:	cmpeq	r0, r2
   13d24:	bls	13b98 <__assert_fail@plt+0x2444>
   13d28:	adds	r2, r6, lr
   13d2c:	adc	r0, r7, #1
   13d30:	ldrd	r6, [sp, #32]
   13d34:	adds	r8, r2, r7
   13d38:	adc	r9, r0, lr
   13d3c:	ldr	r2, [sp, #40]	; 0x28
   13d40:	adds	r4, r2, lr
   13d44:	adc	r5, lr, r6
   13d48:	ldrd	r2, [sp, #64]	; 0x40
   13d4c:	cmp	r9, r3
   13d50:	cmpeq	r8, r2
   13d54:	bcs	13d70 <__assert_fail@plt+0x261c>
   13d58:	ldrd	r2, [sp, #64]	; 0x40
   13d5c:	mov	ip, #64	; 0x40
   13d60:	mov	r0, #0
   13d64:	mov	r1, #0
   13d68:	strd	sl, [sp, #40]	; 0x28
   13d6c:	b	13dc0 <__assert_fail@plt+0x266c>
   13d70:	ldr	r3, [pc, #-484]	; 13b94 <__assert_fail@plt+0x2440>
   13d74:	movw	r2, #1262	; 0x4ee
   13d78:	movw	r1, #7868	; 0x1ebc
   13d7c:	movt	r1, #2
   13d80:	movw	r0, #8020	; 0x1f54
   13d84:	movt	r0, #2
   13d88:	bl	11754 <__assert_fail@plt>
   13d8c:	cmp	r1, r5
   13d90:	cmpeq	r0, r4
   13d94:	movhi	lr, #1
   13d98:	movls	lr, #0
   13d9c:	mov	r6, #0
   13da0:	subs	r4, r4, r0
   13da4:	sbc	r5, r5, r1
   13da8:	subs	r7, r8, r2
   13dac:	sbc	fp, r9, r3
   13db0:	subs	r8, r7, lr
   13db4:	sbc	r9, fp, r6
   13db8:	subs	ip, ip, #1
   13dbc:	beq	13e14 <__assert_fail@plt+0x26c0>
   13dc0:	lsr	r6, r0, #1
   13dc4:	lsr	lr, r1, #1
   13dc8:	orr	r0, r6, r1, lsl #31
   13dcc:	orr	r1, lr, r2, lsl #31
   13dd0:	lsr	lr, r2, #1
   13dd4:	orr	lr, lr, r3, lsl #31
   13dd8:	lsr	r6, r3, #1
   13ddc:	mov	r2, lr
   13de0:	mov	r3, r6
   13de4:	cmp	r6, r9
   13de8:	cmpeq	lr, r8
   13dec:	bcc	13d8c <__assert_fail@plt+0x2638>
   13df0:	moveq	lr, #1
   13df4:	movne	lr, #0
   13df8:	cmp	r1, r5
   13dfc:	cmpeq	r0, r4
   13e00:	movhi	lr, #0
   13e04:	andls	lr, lr, #1
   13e08:	cmp	lr, #0
   13e0c:	beq	13db8 <__assert_fail@plt+0x2664>
   13e10:	b	13d8c <__assert_fail@plt+0x2638>
   13e14:	ldrd	sl, [sp, #40]	; 0x28
   13e18:	b	13bd8 <__assert_fail@plt+0x2484>
   13e1c:	mov	r2, #5
   13e20:	movw	r1, #8032	; 0x1f60
   13e24:	movt	r1, #2
   13e28:	mov	r0, #0
   13e2c:	bl	11430 <dcgettext@plt>
   13e30:	mov	r2, r0
   13e34:	mov	r1, #0
   13e38:	mov	r0, r1
   13e3c:	bl	11520 <error@plt>
   13e40:	bl	11748 <abort@plt>
   13e44:	mov	r3, #0
   13e48:	str	r3, [sp, #124]	; 0x7c
   13e4c:	ldr	r0, [sp, #124]	; 0x7c
   13e50:	add	sp, sp, #388	; 0x184
   13e54:	ldrd	r4, [sp]
   13e58:	ldrd	r6, [sp, #8]
   13e5c:	ldrd	r8, [sp, #16]
   13e60:	ldrd	sl, [sp, #24]
   13e64:	add	sp, sp, #32
   13e68:	pop	{pc}		; (ldr pc, [sp], #4)
   13e6c:	mov	r3, #1
   13e70:	str	r3, [sp, #124]	; 0x7c
   13e74:	b	13e4c <__assert_fail@plt+0x26f8>
   13e78:	str	r0, [sp, #124]	; 0x7c
   13e7c:	b	13e4c <__assert_fail@plt+0x26f8>
   13e80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e84:	strd	r6, [sp, #8]
   13e88:	strd	r8, [sp, #16]
   13e8c:	strd	sl, [sp, #24]
   13e90:	str	lr, [sp, #32]
   13e94:	sub	sp, sp, #276	; 0x114
   13e98:	strd	r0, [sp, #32]
   13e9c:	str	r2, [sp, #268]	; 0x10c
   13ea0:	str	r3, [sp, #260]	; 0x104
   13ea4:	cmp	r1, #0
   13ea8:	cmpeq	r0, #1
   13eac:	bls	13edc <__assert_fail@plt+0x2788>
   13eb0:	ldrd	r2, [sp, #32]
   13eb4:	mov	ip, #64	; 0x40
   13eb8:	mov	r6, #0
   13ebc:	mov	r7, #0
   13ec0:	mov	r4, #1
   13ec4:	mov	r5, #0
   13ec8:	mov	r0, r6
   13ecc:	mov	r1, r7
   13ed0:	mov	r9, #0
   13ed4:	strd	sl, [sp, #72]	; 0x48
   13ed8:	b	13f28 <__assert_fail@plt+0x27d4>
   13edc:	ldr	r3, [pc, #2660]	; 14948 <__assert_fail@plt+0x31f4>
   13ee0:	movw	r2, #1466	; 0x5ba
   13ee4:	movw	r1, #7868	; 0x1ebc
   13ee8:	movt	r1, #2
   13eec:	movw	r0, #8084	; 0x1f94
   13ef0:	movt	r0, #2
   13ef4:	bl	11754 <__assert_fail@plt>
   13ef8:	cmp	r1, r7
   13efc:	cmpeq	r0, r6
   13f00:	movhi	lr, #1
   13f04:	movls	lr, #0
   13f08:	subs	r6, r6, r0
   13f0c:	sbc	r7, r7, r1
   13f10:	subs	r8, r4, r2
   13f14:	sbc	fp, r5, r3
   13f18:	subs	r4, r8, lr
   13f1c:	sbc	r5, fp, r9
   13f20:	subs	ip, ip, #1
   13f24:	beq	13f7c <__assert_fail@plt+0x2828>
   13f28:	lsr	r8, r0, #1
   13f2c:	lsr	lr, r1, #1
   13f30:	orr	r0, r8, r1, lsl #31
   13f34:	orr	r1, lr, r2, lsl #31
   13f38:	lsr	lr, r2, #1
   13f3c:	orr	lr, lr, r3, lsl #31
   13f40:	lsr	r8, r3, #1
   13f44:	mov	r2, lr
   13f48:	mov	r3, r8
   13f4c:	cmp	r8, r5
   13f50:	cmpeq	lr, r4
   13f54:	bcc	13ef8 <__assert_fail@plt+0x27a4>
   13f58:	moveq	lr, #1
   13f5c:	movne	lr, #0
   13f60:	cmp	r1, r7
   13f64:	cmpeq	r0, r6
   13f68:	movhi	lr, #0
   13f6c:	andls	lr, lr, #1
   13f70:	cmp	lr, #0
   13f74:	beq	13f20 <__assert_fail@plt+0x27cc>
   13f78:	b	13ef8 <__assert_fail@plt+0x27a4>
   13f7c:	strd	r6, [sp, #56]	; 0x38
   13f80:	ldrd	r4, [sp, #32]
   13f84:	subs	sl, r4, r6
   13f88:	sbc	fp, r5, r7
   13f8c:	cmp	fp, r7
   13f90:	cmpeq	sl, r6
   13f94:	movhi	r0, #1
   13f98:	movls	r0, #0
   13f9c:	rsbs	r0, r0, #0
   13fa0:	sbc	r1, r1, r1
   13fa4:	and	r2, r0, r4
   13fa8:	and	ip, r1, r5
   13fac:	adds	r3, r6, r6
   13fb0:	adc	r1, r7, r7
   13fb4:	subs	r3, r3, r4
   13fb8:	sbc	r1, r1, r5
   13fbc:	adds	r3, r2, r3
   13fc0:	str	r3, [sp, #64]	; 0x40
   13fc4:	adc	r3, ip, r1
   13fc8:	str	r3, [sp, #68]	; 0x44
   13fcc:	ldr	r2, [sp, #268]	; 0x10c
   13fd0:	mov	r3, #0
   13fd4:	strd	r2, [sp, #240]	; 0xf0
   13fd8:	cmp	r5, r3
   13fdc:	cmpeq	r4, r2
   13fe0:	bls	1400c <__assert_fail@plt+0x28b8>
   13fe4:	ldrd	r2, [sp, #64]	; 0x40
   13fe8:	mov	r6, r2
   13fec:	mov	r7, r3
   13ff0:	strd	r2, [sp, #104]	; 0x68
   13ff4:	mov	sl, #1
   13ff8:	str	sl, [sp, #196]	; 0xc4
   13ffc:	movw	r3, #60904	; 0xede8
   14000:	movt	r3, #1
   14004:	str	r3, [sp, #264]	; 0x108
   14008:	b	1481c <__assert_fail@plt+0x30c8>
   1400c:	ldr	r3, [pc, #2356]	; 14948 <__assert_fail@plt+0x31f4>
   14010:	mov	r2, #1472	; 0x5c0
   14014:	movw	r1, #7868	; 0x1ebc
   14018:	movt	r1, #2
   1401c:	movw	r0, #8096	; 0x1fa0
   14020:	movt	r0, #2
   14024:	bl	11754 <__assert_fail@plt>
   14028:	ldr	sl, [sp, #196]	; 0xc4
   1402c:	ldr	r3, [sp, #256]	; 0x100
   14030:	str	r3, [sp, #196]	; 0xc4
   14034:	ldrd	r2, [sp, #64]	; 0x40
   14038:	strd	r2, [sp, #232]	; 0xe8
   1403c:	strd	r2, [sp, #104]	; 0x68
   14040:	b	14058 <__assert_fail@plt+0x2904>
   14044:	and	r3, sl, #31
   14048:	cmp	r3, #1
   1404c:	beq	14350 <__assert_fail@plt+0x2bfc>
   14050:	subs	sl, sl, #1
   14054:	beq	14384 <__assert_fail@plt+0x2c30>
   14058:	ldrd	r2, [sp, #64]	; 0x40
   1405c:	umull	r4, r5, r2, r2
   14060:	umull	r0, r1, r3, r2
   14064:	umull	r2, r3, r3, r3
   14068:	adds	r8, r0, r0
   1406c:	adc	r9, r1, r1
   14070:	mov	lr, #0
   14074:	adds	ip, r5, r8
   14078:	str	ip, [sp, #128]	; 0x80
   1407c:	adc	ip, lr, r9
   14080:	str	ip, [sp, #132]	; 0x84
   14084:	ldrd	r6, [sp, #128]	; 0x80
   14088:	cmp	r1, r7
   1408c:	cmpeq	r0, r6
   14090:	bls	1409c <__assert_fail@plt+0x2948>
   14094:	adds	r2, r2, lr
   14098:	adc	r3, r3, #1
   1409c:	ldrd	r6, [sp, #128]	; 0x80
   140a0:	mov	ip, #0
   140a4:	adds	r1, r7, r2
   140a8:	str	r1, [sp, #176]	; 0xb0
   140ac:	adc	r3, ip, r3
   140b0:	str	r3, [sp, #180]	; 0xb4
   140b4:	adds	r0, ip, r4
   140b8:	adc	r2, r6, ip
   140bc:	ldr	r3, [sp, #92]	; 0x5c
   140c0:	mul	r3, r0, r3
   140c4:	mla	r2, fp, r2, r3
   140c8:	umull	r0, r1, r0, fp
   140cc:	add	r2, r2, r1
   140d0:	ldrd	r6, [sp, #32]
   140d4:	str	r6, [sp, #152]	; 0x98
   140d8:	umull	r4, r5, r2, r6
   140dc:	ldr	lr, [sp, #88]	; 0x58
   140e0:	umull	r2, r3, r2, lr
   140e4:	umull	r8, r9, lr, r0
   140e8:	adds	lr, r8, r4
   140ec:	adc	r8, r9, r5
   140f0:	umull	r0, r1, r0, r6
   140f4:	adds	r1, r1, lr
   140f8:	str	r1, [sp, #136]	; 0x88
   140fc:	adc	r1, ip, r8
   14100:	str	r1, [sp, #140]	; 0x8c
   14104:	ldrd	r0, [sp, #136]	; 0x88
   14108:	cmp	r5, r1
   1410c:	cmpeq	r4, r0
   14110:	bls	1411c <__assert_fail@plt+0x29c8>
   14114:	adds	r2, r2, ip
   14118:	adc	r3, r3, #1
   1411c:	ldr	r1, [sp, #140]	; 0x8c
   14120:	mov	r0, #0
   14124:	adds	r1, r1, r2
   14128:	str	r1, [sp, #184]	; 0xb8
   1412c:	adc	r3, r0, r3
   14130:	str	r3, [sp, #188]	; 0xbc
   14134:	ldrd	r2, [sp, #176]	; 0xb0
   14138:	ldrd	r0, [sp, #184]	; 0xb8
   1413c:	subs	ip, r2, r0
   14140:	str	ip, [sp, #80]	; 0x50
   14144:	sbc	ip, r3, r1
   14148:	str	ip, [sp, #84]	; 0x54
   1414c:	cmp	r3, r1
   14150:	cmpeq	r2, r0
   14154:	bcs	14174 <__assert_fail@plt+0x2a20>
   14158:	ldr	r1, [sp, #80]	; 0x50
   1415c:	ldrd	r2, [sp, #32]
   14160:	adds	r1, r1, r2
   14164:	str	r1, [sp, #80]	; 0x50
   14168:	mov	r1, ip
   1416c:	adc	r3, ip, r3
   14170:	str	r3, [sp, #84]	; 0x54
   14174:	ldrd	r2, [sp, #144]	; 0x90
   14178:	ldrd	r8, [sp, #80]	; 0x50
   1417c:	cmp	r3, r9
   14180:	cmpeq	r2, r8
   14184:	movhi	r2, #1
   14188:	movls	r2, #0
   1418c:	rsbs	r0, r2, #0
   14190:	sbc	r1, r1, r1
   14194:	ldrd	r4, [sp, #32]
   14198:	and	r2, r0, r4
   1419c:	and	r0, r1, r5
   141a0:	ldr	r3, [sp, #156]	; 0x9c
   141a4:	adds	r3, r3, r8
   141a8:	ldr	r1, [sp, #192]	; 0xc0
   141ac:	adc	r1, r1, r9
   141b0:	adds	r3, r2, r3
   141b4:	str	r3, [sp, #64]	; 0x40
   141b8:	adc	r3, r0, r1
   141bc:	str	r3, [sp, #68]	; 0x44
   141c0:	ldrd	r8, [sp, #104]	; 0x68
   141c4:	ldrd	r6, [sp, #64]	; 0x40
   141c8:	mov	r0, r6
   141cc:	cmp	r9, r7
   141d0:	cmpeq	r8, r6
   141d4:	movcc	r0, #1
   141d8:	movcs	r0, #0
   141dc:	rsbs	r0, r0, #0
   141e0:	sbc	r1, r7, r7
   141e4:	and	r2, r0, r4
   141e8:	and	ip, r1, r5
   141ec:	subs	r3, r8, r6
   141f0:	sbc	r1, r9, r7
   141f4:	adds	r2, r2, r3
   141f8:	adc	ip, ip, r1
   141fc:	ldrd	r4, [sp, #56]	; 0x38
   14200:	umull	r8, r9, r4, r2
   14204:	umull	r2, r3, r5, r2
   14208:	umull	r0, r1, r5, ip
   1420c:	mov	r6, r2
   14210:	mov	r7, r3
   14214:	umlal	r6, r7, r4, ip
   14218:	mov	lr, #0
   1421c:	adds	ip, r9, r6
   14220:	str	ip, [sp, #112]	; 0x70
   14224:	adc	ip, lr, r7
   14228:	str	ip, [sp, #116]	; 0x74
   1422c:	ldrd	r4, [sp, #112]	; 0x70
   14230:	cmp	r3, r5
   14234:	cmpeq	r2, r4
   14238:	bls	14244 <__assert_fail@plt+0x2af0>
   1423c:	adds	r0, r0, lr
   14240:	adc	r1, r1, #1
   14244:	ldrd	r4, [sp, #112]	; 0x70
   14248:	mov	ip, #0
   1424c:	adds	r3, r5, r0
   14250:	str	r3, [sp, #160]	; 0xa0
   14254:	adc	r3, ip, r1
   14258:	str	r3, [sp, #164]	; 0xa4
   1425c:	adds	r0, ip, r8
   14260:	adc	r2, r4, ip
   14264:	ldr	r3, [sp, #92]	; 0x5c
   14268:	mul	r3, r0, r3
   1426c:	mla	r2, fp, r2, r3
   14270:	umull	r8, r9, r0, fp
   14274:	add	r2, r2, r9
   14278:	ldr	r0, [sp, #152]	; 0x98
   1427c:	umull	r4, r5, r2, r0
   14280:	mla	r5, r2, ip, r5
   14284:	ldr	r1, [sp, #88]	; 0x58
   14288:	umull	r2, r3, r2, r1
   1428c:	strd	r2, [sp, #72]	; 0x48
   14290:	strd	r8, [sp, #96]	; 0x60
   14294:	umull	r8, r9, r8, r1
   14298:	adds	r1, r8, r4
   1429c:	adc	lr, r9, r5
   142a0:	ldrd	r8, [sp, #96]	; 0x60
   142a4:	umull	r2, r3, r8, r0
   142a8:	strd	r2, [sp, #96]	; 0x60
   142ac:	ldr	r2, [sp, #100]	; 0x64
   142b0:	mla	r3, ip, r8, r2
   142b4:	str	r3, [sp, #100]	; 0x64
   142b8:	adds	r1, r3, r1
   142bc:	str	r1, [sp, #120]	; 0x78
   142c0:	adc	r1, ip, lr
   142c4:	str	r1, [sp, #124]	; 0x7c
   142c8:	ldrd	r0, [sp, #120]	; 0x78
   142cc:	cmp	r5, r1
   142d0:	cmpeq	r4, r0
   142d4:	bls	142f0 <__assert_fail@plt+0x2b9c>
   142d8:	ldr	r3, [sp, #72]	; 0x48
   142dc:	adds	r3, r3, ip
   142e0:	str	r3, [sp, #72]	; 0x48
   142e4:	ldr	r3, [sp, #76]	; 0x4c
   142e8:	adc	r3, r3, #1
   142ec:	str	r3, [sp, #76]	; 0x4c
   142f0:	ldr	r1, [sp, #124]	; 0x7c
   142f4:	mov	r0, #0
   142f8:	ldr	r3, [sp, #72]	; 0x48
   142fc:	adds	r1, r1, r3
   14300:	str	r1, [sp, #168]	; 0xa8
   14304:	ldr	r3, [sp, #76]	; 0x4c
   14308:	adc	r3, r0, r3
   1430c:	str	r3, [sp, #172]	; 0xac
   14310:	ldrd	r2, [sp, #160]	; 0xa0
   14314:	ldrd	r0, [sp, #168]	; 0xa8
   14318:	subs	ip, r2, r0
   1431c:	str	ip, [sp, #56]	; 0x38
   14320:	sbc	ip, r3, r1
   14324:	str	ip, [sp, #60]	; 0x3c
   14328:	cmp	r3, r1
   1432c:	cmpeq	r2, r0
   14330:	bcs	14044 <__assert_fail@plt+0x28f0>
   14334:	ldr	r1, [sp, #56]	; 0x38
   14338:	ldrd	r2, [sp, #32]
   1433c:	adds	r1, r1, r2
   14340:	str	r1, [sp, #56]	; 0x38
   14344:	adc	r3, ip, r3
   14348:	str	r3, [sp, #60]	; 0x3c
   1434c:	b	14044 <__assert_fail@plt+0x28f0>
   14350:	ldrd	r2, [sp, #32]
   14354:	ldrd	r0, [sp, #56]	; 0x38
   14358:	bl	11850 <__assert_fail@plt+0xfc>
   1435c:	cmp	r1, #0
   14360:	cmpeq	r0, #1
   14364:	bne	14374 <__assert_fail@plt+0x2c20>
   14368:	ldrd	r2, [sp, #64]	; 0x40
   1436c:	strd	r2, [sp, #232]	; 0xe8
   14370:	b	14050 <__assert_fail@plt+0x28fc>
   14374:	ldrd	r6, [sp, #232]	; 0xe8
   14378:	str	sl, [sp, #256]	; 0x100
   1437c:	str	fp, [sp, #232]	; 0xe8
   14380:	b	1460c <__assert_fail@plt+0x2eb8>
   14384:	ldr	r3, [sp, #196]	; 0xc4
   14388:	lsl	r2, r3, #1
   1438c:	str	r2, [sp, #256]	; 0x100
   14390:	cmp	r3, #0
   14394:	beq	14028 <__assert_fail@plt+0x28d4>
   14398:	ldrd	r2, [sp, #64]	; 0x40
   1439c:	mov	r6, r2
   143a0:	mov	r7, r3
   143a4:	str	sl, [sp, #72]	; 0x48
   143a8:	mov	lr, fp
   143ac:	b	14414 <__assert_fail@plt+0x2cc0>
   143b0:	ldrd	r2, [sp, #144]	; 0x90
   143b4:	ldrd	r0, [sp, #8]
   143b8:	cmp	r3, r1
   143bc:	cmpeq	r2, r0
   143c0:	movhi	r2, #1
   143c4:	movls	r2, #0
   143c8:	rsbs	r4, r2, #0
   143cc:	sbc	r5, r5, r5
   143d0:	ldrd	r0, [sp, #32]
   143d4:	and	r2, r4, r0
   143d8:	and	r0, r5, r1
   143dc:	ldr	r3, [sp, #156]	; 0x9c
   143e0:	ldr	r1, [sp, #8]
   143e4:	adds	r3, r3, r1
   143e8:	ldr	r1, [sp, #192]	; 0xc0
   143ec:	ldr	ip, [sp, #12]
   143f0:	adc	r1, r1, ip
   143f4:	adds	r6, r2, r3
   143f8:	adc	r7, r0, r1
   143fc:	ldr	r3, [sp, #72]	; 0x48
   14400:	add	r3, r3, #1
   14404:	str	r3, [sp, #72]	; 0x48
   14408:	ldr	r2, [sp, #196]	; 0xc4
   1440c:	cmp	r2, r3
   14410:	beq	14554 <__assert_fail@plt+0x2e00>
   14414:	umull	r2, r3, r6, r6
   14418:	mov	sl, r2
   1441c:	mov	fp, r3
   14420:	umull	r0, r1, r7, r6
   14424:	umull	r2, r3, r7, r7
   14428:	adds	r5, r0, r0
   1442c:	adc	r8, r1, r1
   14430:	mov	r4, #0
   14434:	adds	ip, fp, r5
   14438:	str	ip, [sp, #16]
   1443c:	adc	ip, r4, r8
   14440:	str	ip, [sp, #20]
   14444:	ldrd	r4, [sp, #16]
   14448:	cmp	r1, r5
   1444c:	cmpeq	r0, r4
   14450:	bls	1445c <__assert_fail@plt+0x2d08>
   14454:	adds	r2, r2, #0
   14458:	adc	r3, r3, #1
   1445c:	ldrd	r4, [sp, #16]
   14460:	mov	ip, #0
   14464:	adds	r1, r5, r2
   14468:	str	r1, [sp, #40]	; 0x28
   1446c:	adc	r3, ip, r3
   14470:	str	r3, [sp, #44]	; 0x2c
   14474:	adds	r0, ip, sl
   14478:	adc	r2, r4, ip
   1447c:	ldr	r3, [sp, #92]	; 0x5c
   14480:	mul	r3, r0, r3
   14484:	mla	r2, lr, r2, r3
   14488:	umull	r8, r9, r0, lr
   1448c:	add	r2, r2, r9
   14490:	ldr	r0, [sp, #152]	; 0x98
   14494:	umull	r4, r5, r0, r2
   14498:	mla	r5, r2, ip, r5
   1449c:	ldr	r1, [sp, #88]	; 0x58
   144a0:	umull	r2, r3, r1, r2
   144a4:	mov	sl, r8
   144a8:	mov	fp, r9
   144ac:	umull	r8, r9, r1, r8
   144b0:	adds	r1, r8, r4
   144b4:	adc	r9, r9, r5
   144b8:	str	r9, [sp, #104]	; 0x68
   144bc:	strd	sl, [sp, #96]	; 0x60
   144c0:	mov	r9, sl
   144c4:	umull	sl, fp, r0, r9
   144c8:	ldr	r8, [sp, #96]	; 0x60
   144cc:	mla	r0, ip, r8, fp
   144d0:	adds	r1, r0, r1
   144d4:	str	r1, [sp, #24]
   144d8:	ldr	r9, [sp, #104]	; 0x68
   144dc:	adc	r1, ip, r9
   144e0:	str	r1, [sp, #28]
   144e4:	ldrd	r0, [sp, #24]
   144e8:	cmp	r5, r1
   144ec:	cmpeq	r4, r0
   144f0:	bls	144fc <__assert_fail@plt+0x2da8>
   144f4:	adds	r2, r2, ip
   144f8:	adc	r3, r3, #1
   144fc:	ldr	r1, [sp, #28]
   14500:	mov	r0, #0
   14504:	adds	r1, r1, r2
   14508:	str	r1, [sp, #48]	; 0x30
   1450c:	adc	r3, r0, r3
   14510:	str	r3, [sp, #52]	; 0x34
   14514:	ldrd	r2, [sp, #40]	; 0x28
   14518:	ldrd	r0, [sp, #48]	; 0x30
   1451c:	subs	ip, r2, r0
   14520:	str	ip, [sp, #8]
   14524:	sbc	ip, r3, r1
   14528:	str	ip, [sp, #12]
   1452c:	cmp	r3, r1
   14530:	cmpeq	r2, r0
   14534:	bcs	143b0 <__assert_fail@plt+0x2c5c>
   14538:	ldrd	r2, [sp, #32]
   1453c:	ldr	r0, [sp, #8]
   14540:	adds	r1, r0, r2
   14544:	str	r1, [sp, #8]
   14548:	adc	r3, ip, r3
   1454c:	str	r3, [sp, #12]
   14550:	b	143b0 <__assert_fail@plt+0x2c5c>
   14554:	strd	r6, [sp, #232]	; 0xe8
   14558:	mov	sl, r3
   1455c:	mov	fp, lr
   14560:	ldr	r3, [sp, #256]	; 0x100
   14564:	str	r3, [sp, #196]	; 0xc4
   14568:	ldrd	r2, [sp, #64]	; 0x40
   1456c:	strd	r2, [sp, #104]	; 0x68
   14570:	strd	r6, [sp, #64]	; 0x40
   14574:	b	14058 <__assert_fail@plt+0x2904>
   14578:	ldrd	r2, [sp, #144]	; 0x90
   1457c:	cmp	r3, fp
   14580:	cmpeq	r2, sl
   14584:	movhi	r2, #1
   14588:	movls	r2, #0
   1458c:	rsbs	r0, r2, #0
   14590:	sbc	r1, r1, r1
   14594:	ldrd	r4, [sp, #32]
   14598:	and	r2, r0, r4
   1459c:	and	r0, r1, r5
   145a0:	ldr	r3, [sp, #156]	; 0x9c
   145a4:	adds	r3, r3, sl
   145a8:	ldr	r1, [sp, #192]	; 0xc0
   145ac:	adc	r1, r1, fp
   145b0:	adds	r6, r2, r3
   145b4:	adc	r7, r0, r1
   145b8:	ldrd	r8, [sp, #104]	; 0x68
   145bc:	cmp	r9, r7
   145c0:	cmpeq	r8, r6
   145c4:	movcc	r2, #1
   145c8:	movcs	r2, #0
   145cc:	rsbs	r2, r2, #0
   145d0:	sbc	r3, r3, r3
   145d4:	and	r0, r2, r4
   145d8:	and	ip, r3, r5
   145dc:	subs	lr, r8, r6
   145e0:	sbc	r1, r9, r7
   145e4:	mov	r2, r4
   145e8:	mov	r3, r5
   145ec:	adds	r0, r0, lr
   145f0:	adc	r1, ip, r1
   145f4:	bl	11850 <__assert_fail@plt+0xfc>
   145f8:	mov	r4, r0
   145fc:	mov	r5, r1
   14600:	cmp	r1, #0
   14604:	cmpeq	r0, #1
   14608:	bne	1474c <__assert_fail@plt+0x2ff8>
   1460c:	umull	r8, r9, r6, r6
   14610:	umull	r0, r1, r7, r6
   14614:	umull	r2, r3, r7, r7
   14618:	adds	r4, r0, r0
   1461c:	adc	r5, r1, r1
   14620:	mov	lr, #0
   14624:	adds	ip, r9, r4
   14628:	str	ip, [sp, #200]	; 0xc8
   1462c:	adc	ip, lr, r5
   14630:	str	ip, [sp, #204]	; 0xcc
   14634:	ldrd	r4, [sp, #200]	; 0xc8
   14638:	cmp	r1, r5
   1463c:	cmpeq	r0, r4
   14640:	bls	1464c <__assert_fail@plt+0x2ef8>
   14644:	adds	r2, r2, lr
   14648:	adc	r3, r3, #1
   1464c:	ldrd	r4, [sp, #200]	; 0xc8
   14650:	mov	ip, #0
   14654:	adds	r1, r5, r2
   14658:	str	r1, [sp, #216]	; 0xd8
   1465c:	adc	r3, ip, r3
   14660:	str	r3, [sp, #220]	; 0xdc
   14664:	adds	r0, ip, r8
   14668:	adc	r2, r4, ip
   1466c:	ldr	r3, [sp, #92]	; 0x5c
   14670:	mul	r3, r0, r3
   14674:	ldr	r1, [sp, #232]	; 0xe8
   14678:	mla	r2, r1, r2, r3
   1467c:	umull	r8, r9, r0, r1
   14680:	add	r2, r2, r9
   14684:	ldr	r0, [sp, #152]	; 0x98
   14688:	umull	r4, r5, r0, r2
   1468c:	mla	r5, r2, ip, r5
   14690:	ldr	r1, [sp, #88]	; 0x58
   14694:	umull	r2, r3, r1, r2
   14698:	strd	r2, [sp, #72]	; 0x48
   1469c:	strd	r8, [sp, #96]	; 0x60
   146a0:	umull	r8, r9, r1, r8
   146a4:	adds	r1, r8, r4
   146a8:	adc	lr, r9, r5
   146ac:	ldrd	r8, [sp, #96]	; 0x60
   146b0:	umull	r2, r3, r0, r8
   146b4:	strd	r2, [sp, #96]	; 0x60
   146b8:	ldr	r2, [sp, #100]	; 0x64
   146bc:	mla	r3, ip, r8, r2
   146c0:	str	r3, [sp, #100]	; 0x64
   146c4:	adds	r1, r3, r1
   146c8:	str	r1, [sp, #208]	; 0xd0
   146cc:	adc	r1, ip, lr
   146d0:	str	r1, [sp, #212]	; 0xd4
   146d4:	ldrd	r0, [sp, #208]	; 0xd0
   146d8:	cmp	r5, r1
   146dc:	cmpeq	r4, r0
   146e0:	bls	146fc <__assert_fail@plt+0x2fa8>
   146e4:	ldr	r3, [sp, #72]	; 0x48
   146e8:	adds	r3, r3, ip
   146ec:	str	r3, [sp, #72]	; 0x48
   146f0:	ldr	r3, [sp, #76]	; 0x4c
   146f4:	adc	r3, r3, #1
   146f8:	str	r3, [sp, #76]	; 0x4c
   146fc:	ldr	r1, [sp, #212]	; 0xd4
   14700:	mov	r0, #0
   14704:	ldr	r3, [sp, #72]	; 0x48
   14708:	adds	r1, r1, r3
   1470c:	str	r1, [sp, #224]	; 0xe0
   14710:	ldr	r3, [sp, #76]	; 0x4c
   14714:	adc	r3, r0, r3
   14718:	str	r3, [sp, #228]	; 0xe4
   1471c:	ldrd	r2, [sp, #216]	; 0xd8
   14720:	ldrd	r0, [sp, #224]	; 0xe0
   14724:	subs	sl, r2, r0
   14728:	sbc	fp, r3, r1
   1472c:	cmp	r3, r1
   14730:	cmpeq	r2, r0
   14734:	bcs	14578 <__assert_fail@plt+0x2e24>
   14738:	ldrd	r2, [sp, #32]
   1473c:	mov	r1, r2
   14740:	adds	sl, sl, r2
   14744:	adc	fp, fp, r3
   14748:	b	14578 <__assert_fail@plt+0x2e24>
   1474c:	strd	sl, [sp, #248]	; 0xf8
   14750:	ldr	sl, [sp, #256]	; 0x100
   14754:	ldrd	r2, [sp, #32]
   14758:	cmp	r1, r3
   1475c:	cmpeq	r0, r2
   14760:	beq	148e4 <__assert_fail@plt+0x3190>
   14764:	mov	r2, r0
   14768:	mov	r3, r1
   1476c:	ldrd	r0, [sp, #32]
   14770:	bl	1ebe4 <__assert_fail@plt+0xd490>
   14774:	strd	r0, [sp, #32]
   14778:	mov	r0, r4
   1477c:	mov	r1, r5
   14780:	bl	13880 <__assert_fail@plt+0x212c>
   14784:	cmp	r0, #0
   14788:	bne	14914 <__assert_fail@plt+0x31c0>
   1478c:	ldr	r3, [sp, #260]	; 0x104
   14790:	ldr	r2, [sp, #268]	; 0x10c
   14794:	add	r2, r2, #1
   14798:	mov	r0, r4
   1479c:	mov	r1, r5
   147a0:	bl	13e80 <__assert_fail@plt+0x272c>
   147a4:	ldrd	r0, [sp, #32]
   147a8:	bl	13880 <__assert_fail@plt+0x212c>
   147ac:	cmp	r0, #0
   147b0:	bne	14930 <__assert_fail@plt+0x31dc>
   147b4:	ldrd	r4, [sp, #32]
   147b8:	mov	r2, r4
   147bc:	mov	r3, r5
   147c0:	ldrd	r0, [sp, #64]	; 0x40
   147c4:	bl	1ebe4 <__assert_fail@plt+0xd490>
   147c8:	strd	r2, [sp, #64]	; 0x40
   147cc:	mov	r2, r4
   147d0:	mov	r3, r5
   147d4:	ldrd	r0, [sp, #104]	; 0x68
   147d8:	bl	1ebe4 <__assert_fail@plt+0xd490>
   147dc:	strd	r2, [sp, #104]	; 0x68
   147e0:	mov	r2, r4
   147e4:	mov	r3, r5
   147e8:	mov	r0, r6
   147ec:	mov	r1, r7
   147f0:	bl	1ebe4 <__assert_fail@plt+0xd490>
   147f4:	mov	r6, r2
   147f8:	mov	r7, r3
   147fc:	cmp	r5, #0
   14800:	cmpeq	r4, #1
   14804:	beq	148f8 <__assert_fail@plt+0x31a4>
   14808:	ldrd	r2, [sp, #32]
   1480c:	ldrd	r0, [sp, #240]	; 0xf0
   14810:	cmp	r3, r1
   14814:	cmpeq	r2, r0
   14818:	bls	1400c <__assert_fail@plt+0x28b8>
   1481c:	ldrd	r4, [sp, #32]
   14820:	ubfx	r3, r4, #1, #7
   14824:	ldr	r2, [sp, #264]	; 0x108
   14828:	add	r3, r2, r3
   1482c:	ldrb	r2, [r3, #728]	; 0x2d8
   14830:	mov	r3, #0
   14834:	adds	r1, r2, r2
   14838:	adc	r0, r3, r3
   1483c:	umull	r2, r3, r2, r2
   14840:	mul	ip, r2, r5
   14844:	mla	ip, r4, r3, ip
   14848:	umull	r2, r3, r2, r4
   1484c:	add	r3, ip, r3
   14850:	subs	r1, r1, r2
   14854:	sbc	r0, r0, r3
   14858:	adds	r2, r1, r1
   1485c:	adc	r3, r0, r0
   14860:	mul	ip, r1, r0
   14864:	umull	r0, r1, r1, r1
   14868:	add	r1, r1, ip, lsl #1
   1486c:	mul	ip, r0, r5
   14870:	mla	ip, r4, r1, ip
   14874:	umull	r0, r1, r0, r4
   14878:	add	r1, ip, r1
   1487c:	subs	r2, r2, r0
   14880:	sbc	r3, r3, r1
   14884:	adds	fp, r2, r2
   14888:	adc	r1, r3, r3
   1488c:	mul	r0, r2, r3
   14890:	umull	r2, r3, r2, r2
   14894:	add	r3, r3, r0, lsl #1
   14898:	mul	r0, r2, r5
   1489c:	mla	r0, r4, r3, r0
   148a0:	umull	r2, r3, r2, r4
   148a4:	add	r3, r0, r3
   148a8:	subs	fp, fp, r2
   148ac:	sbc	r3, r1, r3
   148b0:	str	r3, [sp, #92]	; 0x5c
   148b4:	str	r5, [sp, #88]	; 0x58
   148b8:	ldrd	r2, [sp, #240]	; 0xf0
   148bc:	subs	r1, r4, r2
   148c0:	str	r1, [sp, #144]	; 0x90
   148c4:	sbc	r1, r5, r3
   148c8:	str	r1, [sp, #148]	; 0x94
   148cc:	subs	r1, r2, r4
   148d0:	str	r1, [sp, #156]	; 0x9c
   148d4:	sbc	r3, r3, r5
   148d8:	str	r3, [sp, #192]	; 0xc0
   148dc:	strd	r6, [sp, #232]	; 0xe8
   148e0:	b	14058 <__assert_fail@plt+0x2904>
   148e4:	ldr	r3, [sp, #260]	; 0x104
   148e8:	ldr	r2, [sp, #268]	; 0x10c
   148ec:	add	r2, r2, #1
   148f0:	ldrd	r0, [sp, #32]
   148f4:	bl	13e80 <__assert_fail@plt+0x272c>
   148f8:	add	sp, sp, #276	; 0x114
   148fc:	ldrd	r4, [sp]
   14900:	ldrd	r6, [sp, #8]
   14904:	ldrd	r8, [sp, #16]
   14908:	ldrd	sl, [sp, #24]
   1490c:	add	sp, sp, #32
   14910:	pop	{pc}		; (ldr pc, [sp], #4)
   14914:	mov	r3, #1
   14918:	str	r3, [sp]
   1491c:	mov	r2, r4
   14920:	mov	r3, r5
   14924:	ldr	r0, [sp, #260]	; 0x104
   14928:	bl	11944 <__assert_fail@plt+0x1f0>
   1492c:	b	147a4 <__assert_fail@plt+0x3050>
   14930:	mov	r3, #1
   14934:	str	r3, [sp]
   14938:	ldrd	r2, [sp, #32]
   1493c:	ldr	r0, [sp, #260]	; 0x104
   14940:	bl	11944 <__assert_fail@plt+0x1f0>
   14944:	b	148f8 <__assert_fail@plt+0x31a4>
   14948:	andeq	pc, r1, r8, asr #2
   1494c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14950:	strd	r6, [sp, #8]
   14954:	strd	r8, [sp, #16]
   14958:	strd	sl, [sp, #24]
   1495c:	str	lr, [sp, #32]
   14960:	sub	sp, sp, #228	; 0xe4
   14964:	mov	r8, r0
   14968:	mov	r9, r1
   1496c:	mov	sl, r2
   14970:	mov	fp, r3
   14974:	cmp	r1, #0
   14978:	cmpeq	r0, #1
   1497c:	bls	149b8 <__assert_fail@plt+0x3264>
   14980:	mov	lr, #64	; 0x40
   14984:	mov	r2, #0
   14988:	mov	r3, #0
   1498c:	strd	r2, [sp, #96]	; 0x60
   14990:	mov	r2, #1
   14994:	mov	r3, #0
   14998:	strd	r2, [sp, #104]	; 0x68
   1499c:	mov	r3, #0
   149a0:	str	lr, [sp, #56]	; 0x38
   149a4:	str	r3, [sp, #52]	; 0x34
   149a8:	ldrd	r0, [sp, #96]	; 0x60
   149ac:	ldrd	r2, [sp, #104]	; 0x68
   149b0:	strd	r6, [sp, #80]	; 0x50
   149b4:	b	14a20 <__assert_fail@plt+0x32cc>
   149b8:	mov	lr, #128	; 0x80
   149bc:	mov	r2, #1
   149c0:	mov	r3, #0
   149c4:	strd	r2, [sp, #96]	; 0x60
   149c8:	mov	r2, #0
   149cc:	mov	r3, #0
   149d0:	strd	r2, [sp, #104]	; 0x68
   149d4:	b	1499c <__assert_fail@plt+0x3248>
   149d8:	cmp	r5, fp
   149dc:	cmpeq	r4, sl
   149e0:	movcc	ip, #1
   149e4:	movcs	ip, #0
   149e8:	mov	r6, #0
   149ec:	subs	r0, r4, sl
   149f0:	sbc	r1, r5, fp
   149f4:	subs	r7, r2, r8
   149f8:	sbc	lr, r3, r9
   149fc:	subs	r2, r7, ip
   14a00:	sbc	r3, lr, r6
   14a04:	ldr	ip, [sp, #52]	; 0x34
   14a08:	add	ip, ip, #1
   14a0c:	str	ip, [sp, #52]	; 0x34
   14a10:	ldr	ip, [sp, #56]	; 0x38
   14a14:	ldr	lr, [sp, #52]	; 0x34
   14a18:	cmp	lr, ip
   14a1c:	beq	14a70 <__assert_fail@plt+0x331c>
   14a20:	adds	r7, r2, r2
   14a24:	adc	ip, r3, r3
   14a28:	orr	r2, r7, r1, lsr #31
   14a2c:	mov	r3, ip
   14a30:	adds	r4, r0, r0
   14a34:	adc	r5, r1, r1
   14a38:	mov	r0, r4
   14a3c:	mov	r1, r5
   14a40:	cmp	r9, ip
   14a44:	cmpeq	r8, r2
   14a48:	bcc	149d8 <__assert_fail@plt+0x3284>
   14a4c:	moveq	ip, #1
   14a50:	movne	ip, #0
   14a54:	cmp	r5, fp
   14a58:	cmpeq	r4, sl
   14a5c:	movcc	ip, #0
   14a60:	andcs	ip, ip, #1
   14a64:	cmp	ip, #0
   14a68:	beq	14a04 <__assert_fail@plt+0x32b0>
   14a6c:	b	149d8 <__assert_fail@plt+0x3284>
   14a70:	strd	r0, [sp, #96]	; 0x60
   14a74:	strd	r2, [sp, #104]	; 0x68
   14a78:	adds	r6, r0, r0
   14a7c:	adc	r7, r1, r1
   14a80:	strd	r6, [sp, #152]	; 0x98
   14a84:	adds	ip, r2, r2
   14a88:	str	ip, [sp, #64]	; 0x40
   14a8c:	adc	r3, r3, r3
   14a90:	str	r3, [sp, #68]	; 0x44
   14a94:	cmp	r7, r1
   14a98:	cmpeq	r6, r0
   14a9c:	movcc	r3, #1
   14aa0:	movcs	r3, #0
   14aa4:	ldrd	r0, [sp, #64]	; 0x40
   14aa8:	adds	r0, r0, r3
   14aac:	adc	r1, r1, #0
   14ab0:	cmp	r1, r9
   14ab4:	cmpeq	r0, r8
   14ab8:	bhi	14ae0 <__assert_fail@plt+0x338c>
   14abc:	moveq	r3, #1
   14ac0:	movne	r3, #0
   14ac4:	cmp	fp, r7
   14ac8:	cmpeq	sl, r6
   14acc:	movhi	r3, #0
   14ad0:	andls	r3, r3, #1
   14ad4:	cmp	r3, #0
   14ad8:	strdeq	r0, [sp, #216]	; 0xd8
   14adc:	beq	14b1c <__assert_fail@plt+0x33c8>
   14ae0:	cmp	fp, r7
   14ae4:	cmpeq	sl, r6
   14ae8:	movhi	r3, #1
   14aec:	movls	r3, #0
   14af0:	mov	r2, #0
   14af4:	subs	ip, r6, sl
   14af8:	str	ip, [sp, #152]	; 0x98
   14afc:	sbc	ip, r7, fp
   14b00:	str	ip, [sp, #156]	; 0x9c
   14b04:	subs	r3, r0, r3
   14b08:	sbc	r2, r1, r2
   14b0c:	subs	r3, r3, r8
   14b10:	sbc	r2, r2, r9
   14b14:	str	r3, [sp, #216]	; 0xd8
   14b18:	str	r2, [sp, #220]	; 0xdc
   14b1c:	ldrd	r2, [sp, #216]	; 0xd8
   14b20:	strd	r2, [sp, #208]	; 0xd0
   14b24:	strd	r2, [sp, #200]	; 0xc8
   14b28:	orrs	r3, r8, r9
   14b2c:	movne	r3, #1
   14b30:	moveq	r3, #0
   14b34:	cmp	fp, #0
   14b38:	cmpeq	sl, #1
   14b3c:	movne	r3, #1
   14b40:	cmp	r3, #0
   14b44:	beq	154b0 <__assert_fail@plt+0x3d5c>
   14b48:	ldrd	r2, [sp, #152]	; 0x98
   14b4c:	mov	r6, r2
   14b50:	mov	r7, r3
   14b54:	strd	r2, [sp, #112]	; 0x70
   14b58:	mov	r3, #1
   14b5c:	str	r3, [sp, #168]	; 0xa8
   14b60:	mov	r4, r3
   14b64:	movw	r3, #60904	; 0xede8
   14b68:	movt	r3, #1
   14b6c:	str	r3, [sp, #172]	; 0xac
   14b70:	ldr	r3, [sp, #264]	; 0x108
   14b74:	str	r3, [sp, #80]	; 0x50
   14b78:	strd	r6, [sp, #136]	; 0x88
   14b7c:	str	r4, [sp, #52]	; 0x34
   14b80:	b	152b8 <__assert_fail@plt+0x3b64>
   14b84:	cmp	r5, fp
   14b88:	cmpeq	r4, sl
   14b8c:	movcc	r1, #1
   14b90:	movcs	r1, #0
   14b94:	mov	r0, #0
   14b98:	subs	r4, r4, sl
   14b9c:	sbc	r5, r5, fp
   14ba0:	subs	r1, r6, r1
   14ba4:	sbc	r0, r7, r0
   14ba8:	subs	r1, r1, r8
   14bac:	sbc	r0, r0, r9
   14bb0:	str	r1, [sp, #216]	; 0xd8
   14bb4:	str	r0, [sp, #220]	; 0xdc
   14bb8:	ldrd	r0, [sp, #112]	; 0x70
   14bbc:	subs	r3, r0, r4
   14bc0:	str	r3, [sp, #72]	; 0x48
   14bc4:	sbc	r3, r1, r5
   14bc8:	str	r3, [sp, #76]	; 0x4c
   14bcc:	ldr	r2, [sp, #208]	; 0xd0
   14bd0:	ldr	r3, [sp, #216]	; 0xd8
   14bd4:	subs	r3, r2, r3
   14bd8:	str	r3, [sp, #88]	; 0x58
   14bdc:	ldr	r2, [sp, #212]	; 0xd4
   14be0:	ldr	r3, [sp, #220]	; 0xdc
   14be4:	sbc	r3, r2, r3
   14be8:	str	r3, [sp, #92]	; 0x5c
   14bec:	cmp	r5, r1
   14bf0:	cmpeq	r4, r0
   14bf4:	movhi	r1, #1
   14bf8:	movls	r1, #0
   14bfc:	ldrd	r2, [sp, #88]	; 0x58
   14c00:	subs	r2, r2, r1
   14c04:	sbc	r3, r3, #0
   14c08:	cmp	r2, #0
   14c0c:	sbcs	r1, r3, #0
   14c10:	blt	14d04 <__assert_fail@plt+0x35b0>
   14c14:	ldr	r1, [sp, #56]	; 0x38
   14c18:	str	r1, [sp, #40]	; 0x28
   14c1c:	ldr	r1, [sp, #64]	; 0x40
   14c20:	str	r1, [sp, #44]	; 0x2c
   14c24:	strd	sl, [sp, #32]
   14c28:	strd	r8, [sp, #24]
   14c2c:	ldrd	r0, [sp, #72]	; 0x48
   14c30:	strd	r0, [sp, #16]
   14c34:	strd	r2, [sp, #8]
   14c38:	ldrd	r2, [sp, #96]	; 0x60
   14c3c:	strd	r2, [sp]
   14c40:	ldrd	r2, [sp, #104]	; 0x68
   14c44:	add	r0, sp, #184	; 0xb8
   14c48:	bl	11bb0 <__assert_fail@plt+0x45c>
   14c4c:	strd	r0, [sp, #96]	; 0x60
   14c50:	ldrd	r2, [sp, #184]	; 0xb8
   14c54:	strd	r2, [sp, #104]	; 0x68
   14c58:	ldr	r3, [sp, #52]	; 0x34
   14c5c:	and	r3, r3, #31
   14c60:	cmp	r3, #1
   14c64:	beq	14d44 <__assert_fail@plt+0x35f0>
   14c68:	ldr	r3, [sp, #52]	; 0x34
   14c6c:	subs	r3, r3, #1
   14c70:	str	r3, [sp, #52]	; 0x34
   14c74:	beq	14db4 <__assert_fail@plt+0x3660>
   14c78:	ldrd	r2, [sp, #216]	; 0xd8
   14c7c:	ldr	r1, [sp, #56]	; 0x38
   14c80:	str	r1, [sp, #40]	; 0x28
   14c84:	ldr	r1, [sp, #64]	; 0x40
   14c88:	str	r1, [sp, #44]	; 0x2c
   14c8c:	strd	sl, [sp, #32]
   14c90:	strd	r8, [sp, #24]
   14c94:	strd	r4, [sp, #16]
   14c98:	strd	r2, [sp, #8]
   14c9c:	strd	r4, [sp]
   14ca0:	add	r0, sp, #184	; 0xb8
   14ca4:	bl	11bb0 <__assert_fail@plt+0x45c>
   14ca8:	ldr	r3, [sp, #80]	; 0x50
   14cac:	adds	r4, r3, r0
   14cb0:	adc	r5, r1, #0
   14cb4:	cmp	r1, r5
   14cb8:	cmpeq	r0, r4
   14cbc:	movhi	r1, #1
   14cc0:	movls	r1, #0
   14cc4:	ldrd	r2, [sp, #184]	; 0xb8
   14cc8:	adds	r6, r2, r1
   14ccc:	adc	r7, r3, #0
   14cd0:	cmp	r7, r9
   14cd4:	cmpeq	r6, r8
   14cd8:	bhi	14b84 <__assert_fail@plt+0x3430>
   14cdc:	moveq	r1, #1
   14ce0:	movne	r1, #0
   14ce4:	cmp	r5, fp
   14ce8:	cmpeq	r4, sl
   14cec:	movcc	r1, #0
   14cf0:	andcs	r1, r1, #1
   14cf4:	cmp	r1, #0
   14cf8:	strdeq	r6, [sp, #216]	; 0xd8
   14cfc:	beq	14bb8 <__assert_fail@plt+0x3464>
   14d00:	b	14b84 <__assert_fail@plt+0x3430>
   14d04:	ldrd	r0, [sp, #72]	; 0x48
   14d08:	adds	ip, r0, sl
   14d0c:	str	ip, [sp, #120]	; 0x78
   14d10:	adc	ip, r1, fp
   14d14:	str	ip, [sp, #124]	; 0x7c
   14d18:	ldrd	r6, [sp, #120]	; 0x78
   14d1c:	cmp	r1, r7
   14d20:	cmpeq	r0, r6
   14d24:	movhi	ip, #1
   14d28:	movls	ip, #0
   14d2c:	adds	r0, r2, ip
   14d30:	adc	r1, r3, #0
   14d34:	adds	r2, r0, r8
   14d38:	adc	r3, r1, r9
   14d3c:	strd	r6, [sp, #72]	; 0x48
   14d40:	b	14c14 <__assert_fail@plt+0x34c0>
   14d44:	strd	sl, [sp, #16]
   14d48:	strd	r8, [sp, #8]
   14d4c:	mov	r2, r0
   14d50:	mov	r3, r1
   14d54:	strd	r2, [sp]
   14d58:	ldrd	r2, [sp, #104]	; 0x68
   14d5c:	add	r0, sp, #192	; 0xc0
   14d60:	bl	12940 <__assert_fail@plt+0x11ec>
   14d64:	ldr	r2, [sp, #192]	; 0xc0
   14d68:	ldr	r3, [sp, #196]	; 0xc4
   14d6c:	orrs	r3, r2, r3
   14d70:	movne	r3, #1
   14d74:	moveq	r3, #0
   14d78:	cmp	r1, #0
   14d7c:	cmpeq	r0, #1
   14d80:	movne	r3, #1
   14d84:	cmp	r3, #0
   14d88:	bne	14d9c <__assert_fail@plt+0x3648>
   14d8c:	ldrd	r2, [sp, #216]	; 0xd8
   14d90:	strd	r2, [sp, #200]	; 0xc8
   14d94:	strd	r4, [sp, #136]	; 0x88
   14d98:	b	14c68 <__assert_fail@plt+0x3514>
   14d9c:	strd	r4, [sp, #152]	; 0x98
   14da0:	ldr	r5, [sp, #64]	; 0x40
   14da4:	ldrd	r6, [sp, #136]	; 0x88
   14da8:	strd	sl, [sp, #64]	; 0x40
   14dac:	str	r5, [sp, #136]	; 0x88
   14db0:	b	14fd4 <__assert_fail@plt+0x3880>
   14db4:	ldrd	r2, [sp, #216]	; 0xd8
   14db8:	strd	r2, [sp, #208]	; 0xd0
   14dbc:	ldr	r3, [sp, #168]	; 0xa8
   14dc0:	lsl	r2, r3, #1
   14dc4:	str	r2, [sp, #112]	; 0x70
   14dc8:	cmp	r3, #0
   14dcc:	beq	14ef0 <__assert_fail@plt+0x379c>
   14dd0:	mov	r6, r4
   14dd4:	mov	r7, r5
   14dd8:	strd	r4, [sp, #136]	; 0x88
   14ddc:	b	14e30 <__assert_fail@plt+0x36dc>
   14de0:	cmp	r7, fp
   14de4:	cmpeq	r6, sl
   14de8:	movcc	r1, #1
   14dec:	movcs	r1, #0
   14df0:	mov	r0, #0
   14df4:	subs	r6, r6, sl
   14df8:	sbc	r7, r7, fp
   14dfc:	subs	r1, r2, r1
   14e00:	sbc	r0, r3, r0
   14e04:	subs	r1, r1, r8
   14e08:	sbc	r0, r0, r9
   14e0c:	str	r1, [sp, #216]	; 0xd8
   14e10:	str	r0, [sp, #220]	; 0xdc
   14e14:	ldr	r3, [sp, #52]	; 0x34
   14e18:	add	r3, r3, #1
   14e1c:	str	r3, [sp, #52]	; 0x34
   14e20:	ldr	r3, [sp, #168]	; 0xa8
   14e24:	ldr	r2, [sp, #52]	; 0x34
   14e28:	cmp	r3, r2
   14e2c:	beq	14ec4 <__assert_fail@plt+0x3770>
   14e30:	ldrd	r2, [sp, #216]	; 0xd8
   14e34:	ldr	r1, [sp, #56]	; 0x38
   14e38:	str	r1, [sp, #40]	; 0x28
   14e3c:	ldr	r1, [sp, #64]	; 0x40
   14e40:	str	r1, [sp, #44]	; 0x2c
   14e44:	strd	sl, [sp, #32]
   14e48:	strd	r8, [sp, #24]
   14e4c:	strd	r6, [sp, #16]
   14e50:	strd	r2, [sp, #8]
   14e54:	strd	r6, [sp]
   14e58:	add	r0, sp, #184	; 0xb8
   14e5c:	bl	11bb0 <__assert_fail@plt+0x45c>
   14e60:	ldr	r3, [sp, #80]	; 0x50
   14e64:	adds	r6, r3, r0
   14e68:	adc	r7, r1, #0
   14e6c:	cmp	r1, r7
   14e70:	cmpeq	r0, r6
   14e74:	movhi	r1, #1
   14e78:	movls	r1, #0
   14e7c:	ldrd	r2, [sp, #184]	; 0xb8
   14e80:	adds	r4, r2, r1
   14e84:	adc	r5, r3, #0
   14e88:	mov	r2, r4
   14e8c:	mov	r3, r5
   14e90:	cmp	r5, r9
   14e94:	cmpeq	r4, r8
   14e98:	bhi	14de0 <__assert_fail@plt+0x368c>
   14e9c:	moveq	r1, #1
   14ea0:	movne	r1, #0
   14ea4:	cmp	r7, fp
   14ea8:	cmpeq	r6, sl
   14eac:	movcc	r1, #0
   14eb0:	andcs	r1, r1, #1
   14eb4:	cmp	r1, #0
   14eb8:	strdeq	r2, [sp, #216]	; 0xd8
   14ebc:	beq	14e14 <__assert_fail@plt+0x36c0>
   14ec0:	b	14de0 <__assert_fail@plt+0x368c>
   14ec4:	ldrd	r4, [sp, #136]	; 0x88
   14ec8:	strd	r6, [sp, #136]	; 0x88
   14ecc:	ldrd	r2, [sp, #216]	; 0xd8
   14ed0:	strd	r2, [sp, #200]	; 0xc8
   14ed4:	ldr	r3, [sp, #168]	; 0xa8
   14ed8:	str	r3, [sp, #52]	; 0x34
   14edc:	ldr	r3, [sp, #112]	; 0x70
   14ee0:	str	r3, [sp, #168]	; 0xa8
   14ee4:	strd	r4, [sp, #112]	; 0x70
   14ee8:	ldrd	r4, [sp, #136]	; 0x88
   14eec:	b	14c78 <__assert_fail@plt+0x3524>
   14ef0:	strd	r4, [sp, #136]	; 0x88
   14ef4:	b	14ecc <__assert_fail@plt+0x3778>
   14ef8:	ldrd	r0, [sp, #64]	; 0x40
   14efc:	cmp	r7, r1
   14f00:	cmpeq	r6, r0
   14f04:	movcc	r1, #1
   14f08:	movcs	r1, #0
   14f0c:	mov	r0, #0
   14f10:	ldr	ip, [sp, #64]	; 0x40
   14f14:	subs	r6, r6, ip
   14f18:	ldr	ip, [sp, #68]	; 0x44
   14f1c:	sbc	r7, r7, ip
   14f20:	mov	ip, r2
   14f24:	subs	r1, r2, r1
   14f28:	sbc	r0, r3, r0
   14f2c:	subs	r1, r1, r8
   14f30:	sbc	r0, r0, r9
   14f34:	str	r1, [sp, #200]	; 0xc8
   14f38:	str	r0, [sp, #204]	; 0xcc
   14f3c:	ldrd	r0, [sp, #112]	; 0x70
   14f40:	subs	r4, r0, r6
   14f44:	sbc	r5, r1, r7
   14f48:	ldr	r2, [sp, #208]	; 0xd0
   14f4c:	ldr	r3, [sp, #200]	; 0xc8
   14f50:	subs	r3, r2, r3
   14f54:	str	r3, [sp, #128]	; 0x80
   14f58:	ldr	r2, [sp, #212]	; 0xd4
   14f5c:	ldr	r3, [sp, #204]	; 0xcc
   14f60:	sbc	r3, r2, r3
   14f64:	str	r3, [sp, #132]	; 0x84
   14f68:	cmp	r1, r7
   14f6c:	cmpeq	r0, r6
   14f70:	movcc	r1, #1
   14f74:	movcs	r1, #0
   14f78:	ldrd	r2, [sp, #128]	; 0x80
   14f7c:	subs	r2, r2, r1
   14f80:	sbc	r3, r3, #0
   14f84:	cmp	r2, #0
   14f88:	sbcs	r1, r3, #0
   14f8c:	blt	15070 <__assert_fail@plt+0x391c>
   14f90:	ldrd	r0, [sp, #64]	; 0x40
   14f94:	strd	r0, [sp, #16]
   14f98:	strd	r8, [sp, #8]
   14f9c:	strd	r4, [sp]
   14fa0:	add	r0, sp, #192	; 0xc0
   14fa4:	bl	12940 <__assert_fail@plt+0x11ec>
   14fa8:	mov	r2, r0
   14fac:	mov	r3, r1
   14fb0:	ldrd	r0, [sp, #192]	; 0xc0
   14fb4:	cmp	r3, #0
   14fb8:	cmpeq	r2, #1
   14fbc:	moveq	ip, #1
   14fc0:	movne	ip, #0
   14fc4:	orrs	lr, r0, r1
   14fc8:	movne	ip, #0
   14fcc:	cmp	ip, #0
   14fd0:	beq	150b8 <__assert_fail@plt+0x3964>
   14fd4:	ldrd	r2, [sp, #200]	; 0xc8
   14fd8:	ldr	r1, [sp, #56]	; 0x38
   14fdc:	str	r1, [sp, #40]	; 0x28
   14fe0:	ldr	r1, [sp, #136]	; 0x88
   14fe4:	str	r1, [sp, #44]	; 0x2c
   14fe8:	ldrd	r0, [sp, #64]	; 0x40
   14fec:	strd	r0, [sp, #32]
   14ff0:	strd	r8, [sp, #24]
   14ff4:	strd	r6, [sp, #16]
   14ff8:	strd	r2, [sp, #8]
   14ffc:	strd	r6, [sp]
   15000:	add	r0, sp, #184	; 0xb8
   15004:	bl	11bb0 <__assert_fail@plt+0x45c>
   15008:	ldr	r3, [sp, #80]	; 0x50
   1500c:	adds	r6, r3, r0
   15010:	adc	r7, r1, #0
   15014:	cmp	r1, r7
   15018:	cmpeq	r0, r6
   1501c:	movhi	r1, #1
   15020:	movls	r1, #0
   15024:	ldrd	r2, [sp, #184]	; 0xb8
   15028:	adds	sl, r2, r1
   1502c:	adc	fp, r3, #0
   15030:	mov	r2, sl
   15034:	mov	r3, fp
   15038:	cmp	fp, r9
   1503c:	cmpeq	sl, r8
   15040:	bhi	14ef8 <__assert_fail@plt+0x37a4>
   15044:	moveq	r1, #1
   15048:	movne	r1, #0
   1504c:	ldrd	sl, [sp, #64]	; 0x40
   15050:	cmp	r7, fp
   15054:	cmpeq	r6, sl
   15058:	movcc	r1, #0
   1505c:	andcs	r1, r1, #1
   15060:	cmp	r1, #0
   15064:	strdeq	r2, [sp, #200]	; 0xc8
   15068:	beq	14f3c <__assert_fail@plt+0x37e8>
   1506c:	b	14ef8 <__assert_fail@plt+0x37a4>
   15070:	ldr	r1, [sp, #64]	; 0x40
   15074:	adds	r1, r4, r1
   15078:	str	r1, [sp, #144]	; 0x90
   1507c:	ldr	r1, [sp, #68]	; 0x44
   15080:	adc	r1, r5, r1
   15084:	str	r1, [sp, #148]	; 0x94
   15088:	ldrd	sl, [sp, #144]	; 0x90
   1508c:	cmp	r5, fp
   15090:	cmpeq	r4, sl
   15094:	movhi	ip, #1
   15098:	movls	ip, #0
   1509c:	adds	r0, r2, ip
   150a0:	adc	r1, r3, #0
   150a4:	adds	r2, r0, r8
   150a8:	adc	r3, r1, r9
   150ac:	mov	r4, sl
   150b0:	mov	r5, fp
   150b4:	b	14f90 <__assert_fail@plt+0x383c>
   150b8:	strd	r6, [sp, #136]	; 0x88
   150bc:	strd	r4, [sp, #176]	; 0xb0
   150c0:	mov	r6, r2
   150c4:	mov	r7, r3
   150c8:	strd	r6, [sp, #56]	; 0x38
   150cc:	ldrd	sl, [sp, #64]	; 0x40
   150d0:	orrs	ip, r0, r1
   150d4:	bne	1537c <__assert_fail@plt+0x3c28>
   150d8:	ubfx	r3, r2, #1, #7
   150dc:	ldr	r2, [sp, #172]	; 0xac
   150e0:	add	r3, r2, r3
   150e4:	ldrb	r2, [r3, #728]	; 0x2d8
   150e8:	mov	r3, #0
   150ec:	adds	ip, r2, r2
   150f0:	adc	lr, r3, r3
   150f4:	umull	r2, r3, r2, r2
   150f8:	mul	r5, r2, r7
   150fc:	mla	r5, r6, r3, r5
   15100:	ldr	r6, [sp, #56]	; 0x38
   15104:	umull	r6, r7, r2, r6
   15108:	add	r7, r5, r7
   1510c:	subs	r2, ip, r6
   15110:	sbc	r5, lr, r7
   15114:	adds	ip, r2, r2
   15118:	adc	lr, r5, r5
   1511c:	mul	r5, r2, r5
   15120:	umull	r2, r3, r2, r2
   15124:	add	r3, r3, r5, lsl #1
   15128:	ldrd	r6, [sp, #56]	; 0x38
   1512c:	mul	r5, r2, r7
   15130:	mla	r5, r6, r3, r5
   15134:	ldr	r6, [sp, #56]	; 0x38
   15138:	umull	r6, r7, r2, r6
   1513c:	add	r7, r5, r7
   15140:	subs	r2, ip, r6
   15144:	sbc	lr, lr, r7
   15148:	adds	ip, r2, r2
   1514c:	adc	r5, lr, lr
   15150:	mul	lr, r2, lr
   15154:	umull	r2, r3, r2, r2
   15158:	add	r3, r3, lr, lsl #1
   1515c:	ldrd	r6, [sp, #56]	; 0x38
   15160:	mul	lr, r2, r7
   15164:	mov	r4, r6
   15168:	mla	lr, r6, r3, lr
   1516c:	umull	r2, r3, r2, r6
   15170:	add	r3, lr, r3
   15174:	subs	ip, ip, r2
   15178:	sbc	r5, r5, r3
   1517c:	mul	r3, sl, r5
   15180:	mla	r3, ip, fp, r3
   15184:	umull	sl, fp, sl, ip
   15188:	add	fp, r3, fp
   1518c:	cmp	r7, r9
   15190:	cmpeq	r6, r8
   15194:	bhi	15358 <__assert_fail@plt+0x3c04>
   15198:	umull	r2, r3, fp, r6
   1519c:	umull	r0, r1, fp, r7
   151a0:	strd	r2, [sp, #64]	; 0x40
   151a4:	umlal	r2, r3, sl, r7
   151a8:	umull	r6, r7, sl, r4
   151ac:	mov	lr, #0
   151b0:	adds	r4, r7, r2
   151b4:	str	r4, [sp, #160]	; 0xa0
   151b8:	adc	r3, lr, r3
   151bc:	str	r3, [sp, #164]	; 0xa4
   151c0:	ldrd	r2, [sp, #64]	; 0x40
   151c4:	ldrd	r6, [sp, #160]	; 0xa0
   151c8:	cmp	r3, r7
   151cc:	cmpeq	r2, r6
   151d0:	bls	151dc <__assert_fail@plt+0x3a88>
   151d4:	adds	r0, r0, lr
   151d8:	adc	r1, r1, #1
   151dc:	ldr	r2, [sp, #164]	; 0xa4
   151e0:	mov	r3, #0
   151e4:	subs	r2, r8, r2
   151e8:	sbc	r3, r9, r3
   151ec:	subs	r2, r2, r0
   151f0:	sbc	r3, r3, r1
   151f4:	mul	r5, r2, r5
   151f8:	mla	r3, ip, r3, r5
   151fc:	umull	r8, r9, r2, ip
   15200:	add	r9, r3, r9
   15204:	ldrd	r4, [sp, #56]	; 0x38
   15208:	mov	r0, r4
   1520c:	mov	r1, r5
   15210:	bl	13880 <__assert_fail@plt+0x212c>
   15214:	cmp	r0, #0
   15218:	bne	15364 <__assert_fail@plt+0x3c10>
   1521c:	ldr	r3, [sp, #268]	; 0x10c
   15220:	ldr	r2, [sp, #264]	; 0x108
   15224:	add	r2, r2, #1
   15228:	mov	r0, r4
   1522c:	mov	r1, r5
   15230:	bl	13e80 <__assert_fail@plt+0x272c>
   15234:	orrs	r3, r8, r9
   15238:	beq	15484 <__assert_fail@plt+0x3d30>
   1523c:	mov	r2, sl
   15240:	mov	r3, fp
   15244:	mov	r0, r8
   15248:	mov	r1, r9
   1524c:	bl	15db0 <__assert_fail@plt+0x465c>
   15250:	cmp	r0, #0
   15254:	bne	15528 <__assert_fail@plt+0x3dd4>
   15258:	strd	sl, [sp, #16]
   1525c:	strd	r8, [sp, #8]
   15260:	ldrd	r2, [sp, #152]	; 0x98
   15264:	strd	r2, [sp]
   15268:	ldrd	r2, [sp, #216]	; 0xd8
   1526c:	add	r0, sp, #216	; 0xd8
   15270:	bl	12b8c <__assert_fail@plt+0x1438>
   15274:	strd	r0, [sp, #152]	; 0x98
   15278:	strd	sl, [sp, #16]
   1527c:	strd	r8, [sp, #8]
   15280:	ldrd	r2, [sp, #112]	; 0x70
   15284:	strd	r2, [sp]
   15288:	ldrd	r2, [sp, #208]	; 0xd0
   1528c:	add	r0, sp, #208	; 0xd0
   15290:	bl	12b8c <__assert_fail@plt+0x1438>
   15294:	strd	r0, [sp, #112]	; 0x70
   15298:	strd	sl, [sp, #16]
   1529c:	strd	r8, [sp, #8]
   152a0:	ldrd	r2, [sp, #136]	; 0x88
   152a4:	strd	r2, [sp]
   152a8:	ldrd	r2, [sp, #200]	; 0xc8
   152ac:	add	r0, sp, #200	; 0xc8
   152b0:	bl	12b8c <__assert_fail@plt+0x1438>
   152b4:	strd	r0, [sp, #136]	; 0x88
   152b8:	ubfx	r3, sl, #1, #7
   152bc:	ldr	r2, [sp, #172]	; 0xac
   152c0:	add	r3, r2, r3
   152c4:	ldrb	r2, [r3, #728]	; 0x2d8
   152c8:	mov	r3, #0
   152cc:	adds	r1, r2, r2
   152d0:	adc	ip, r3, r3
   152d4:	umull	r2, r3, r2, r2
   152d8:	mul	r0, r2, fp
   152dc:	mla	r0, sl, r3, r0
   152e0:	umull	r2, r3, r2, sl
   152e4:	add	r3, r0, r3
   152e8:	subs	r0, r1, r2
   152ec:	sbc	ip, ip, r3
   152f0:	adds	r2, r0, r0
   152f4:	adc	r3, ip, ip
   152f8:	mul	ip, r0, ip
   152fc:	umull	r0, r1, r0, r0
   15300:	add	r1, r1, ip, lsl #1
   15304:	mul	ip, r0, fp
   15308:	mla	ip, sl, r1, ip
   1530c:	umull	r0, r1, r0, sl
   15310:	add	r1, ip, r1
   15314:	subs	r2, r2, r0
   15318:	sbc	r3, r3, r1
   1531c:	adds	r1, r2, r2
   15320:	adc	r5, r3, r3
   15324:	mul	r0, r2, r3
   15328:	umull	r2, r3, r2, r2
   1532c:	add	r3, r3, r0, lsl #1
   15330:	mul	r0, r2, fp
   15334:	mla	r0, sl, r3, r0
   15338:	umull	r2, r3, r2, sl
   1533c:	add	r3, r0, r3
   15340:	subs	r1, r1, r2
   15344:	str	r1, [sp, #56]	; 0x38
   15348:	sbc	r5, r5, r3
   1534c:	str	r5, [sp, #64]	; 0x40
   15350:	ldrd	r4, [sp, #152]	; 0x98
   15354:	b	14c78 <__assert_fail@plt+0x3524>
   15358:	mov	r8, r0
   1535c:	mov	r9, r1
   15360:	b	15204 <__assert_fail@plt+0x3ab0>
   15364:	mov	r3, #1
   15368:	str	r3, [sp]
   1536c:	ldrd	r2, [sp, #56]	; 0x38
   15370:	ldr	r0, [sp, #268]	; 0x10c
   15374:	bl	11944 <__assert_fail@plt+0x1f0>
   15378:	b	15234 <__assert_fail@plt+0x3ae0>
   1537c:	ldrd	r2, [sp, #56]	; 0x38
   15380:	cmp	r3, fp
   15384:	cmpeq	r2, sl
   15388:	moveq	r3, #1
   1538c:	movne	r3, #0
   15390:	cmp	r1, r9
   15394:	cmpeq	r0, r8
   15398:	movne	r3, #0
   1539c:	cmp	r3, #0
   153a0:	bne	154cc <__assert_fail@plt+0x3d78>
   153a4:	movw	r3, #60904	; 0xede8
   153a8:	movt	r3, #1
   153ac:	ldrd	r6, [sp, #56]	; 0x38
   153b0:	ubfx	r2, r6, #1, #7
   153b4:	add	r3, r3, r2
   153b8:	ldrb	r2, [r3, #728]	; 0x2d8
   153bc:	mov	r3, #0
   153c0:	adds	lr, r2, r2
   153c4:	adc	r4, r3, r3
   153c8:	umull	r2, r3, r2, r2
   153cc:	mul	ip, r2, r7
   153d0:	mla	ip, r6, r3, ip
   153d4:	umull	r8, r9, r2, r6
   153d8:	add	r9, ip, r9
   153dc:	subs	r2, lr, r8
   153e0:	sbc	r3, r4, r9
   153e4:	adds	lr, r2, r2
   153e8:	adc	ip, r3, r3
   153ec:	mul	r4, r2, r3
   153f0:	umull	r2, r3, r2, r2
   153f4:	add	r3, r3, r4, lsl #1
   153f8:	mul	r4, r2, r7
   153fc:	mla	r4, r6, r3, r4
   15400:	umull	r8, r9, r2, r6
   15404:	add	r9, r4, r9
   15408:	subs	r2, lr, r8
   1540c:	sbc	ip, ip, r9
   15410:	adds	r4, r2, r2
   15414:	adc	lr, ip, ip
   15418:	mul	ip, r2, ip
   1541c:	umull	r2, r3, r2, r2
   15420:	add	r3, r3, ip, lsl #1
   15424:	mul	ip, r2, r7
   15428:	mla	ip, r6, r3, ip
   1542c:	umull	r8, r9, r2, r6
   15430:	add	r9, ip, r9
   15434:	subs	r2, r4, r8
   15438:	sbc	r3, lr, r9
   1543c:	mul	r3, sl, r3
   15440:	mla	r3, r2, fp, r3
   15444:	umull	sl, fp, sl, r2
   15448:	add	fp, r3, fp
   1544c:	mov	r2, r6
   15450:	mov	r3, r7
   15454:	bl	15db0 <__assert_fail@plt+0x465c>
   15458:	cmp	r0, #0
   1545c:	bne	154f8 <__assert_fail@plt+0x3da4>
   15460:	ldr	r3, [sp, #268]	; 0x10c
   15464:	str	r3, [sp, #4]
   15468:	ldr	r3, [sp, #264]	; 0x108
   1546c:	add	r3, r3, #1
   15470:	str	r3, [sp]
   15474:	mov	r2, r6
   15478:	mov	r3, r7
   1547c:	ldrd	r0, [sp, #192]	; 0xc0
   15480:	bl	1494c <__assert_fail@plt+0x31f8>
   15484:	mov	r0, sl
   15488:	mov	r1, fp
   1548c:	bl	13880 <__assert_fail@plt+0x212c>
   15490:	cmp	r0, #0
   15494:	beq	15510 <__assert_fail@plt+0x3dbc>
   15498:	mov	r3, #1
   1549c:	str	r3, [sp]
   154a0:	mov	r2, sl
   154a4:	mov	r3, fp
   154a8:	ldr	r0, [sp, #268]	; 0x10c
   154ac:	bl	11944 <__assert_fail@plt+0x1f0>
   154b0:	add	sp, sp, #228	; 0xe4
   154b4:	ldrd	r4, [sp]
   154b8:	ldrd	r6, [sp, #8]
   154bc:	ldrd	r8, [sp, #16]
   154c0:	ldrd	sl, [sp, #24]
   154c4:	add	sp, sp, #32
   154c8:	pop	{pc}		; (ldr pc, [sp], #4)
   154cc:	ldr	r3, [sp, #268]	; 0x10c
   154d0:	str	r3, [sp, #4]
   154d4:	ldr	r3, [sp, #264]	; 0x108
   154d8:	add	r3, r3, #1
   154dc:	str	r3, [sp]
   154e0:	mov	r2, sl
   154e4:	mov	r3, fp
   154e8:	mov	r0, r8
   154ec:	mov	r1, r9
   154f0:	bl	1494c <__assert_fail@plt+0x31f8>
   154f4:	b	154b0 <__assert_fail@plt+0x3d5c>
   154f8:	ldrd	r2, [sp, #56]	; 0x38
   154fc:	strd	r2, [sp]
   15500:	ldrd	r2, [sp, #192]	; 0xc0
   15504:	ldr	r0, [sp, #268]	; 0x10c
   15508:	bl	128d0 <__assert_fail@plt+0x117c>
   1550c:	b	15484 <__assert_fail@plt+0x3d30>
   15510:	ldr	r3, [sp, #268]	; 0x10c
   15514:	ldr	r2, [sp, #264]	; 0x108
   15518:	mov	r0, sl
   1551c:	mov	r1, fp
   15520:	bl	13e80 <__assert_fail@plt+0x272c>
   15524:	b	154b0 <__assert_fail@plt+0x3d5c>
   15528:	strd	sl, [sp]
   1552c:	mov	r2, r8
   15530:	mov	r3, r9
   15534:	ldr	r0, [sp, #268]	; 0x10c
   15538:	bl	128d0 <__assert_fail@plt+0x117c>
   1553c:	b	154b0 <__assert_fail@plt+0x3d5c>
   15540:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15544:	strd	r6, [sp, #8]
   15548:	strd	r8, [sp, #16]
   1554c:	strd	sl, [sp, #24]
   15550:	str	lr, [sp, #32]
   15554:	sub	sp, sp, #68	; 0x44
   15558:	strd	r0, [sp, #16]
   1555c:	mov	r8, r2
   15560:	mov	r9, r3
   15564:	mov	r3, #0
   15568:	ldr	r2, [sp, #104]	; 0x68
   1556c:	strb	r3, [r2, #250]	; 0xfa
   15570:	mov	r2, #0
   15574:	mov	r3, #0
   15578:	ldr	ip, [sp, #104]	; 0x68
   1557c:	strd	r2, [ip, #8]
   15580:	mov	r3, r0
   15584:	orrs	r3, r3, r1
   15588:	moveq	r3, #1
   1558c:	movne	r3, #0
   15590:	cmp	r9, #0
   15594:	cmpeq	r8, #1
   15598:	movhi	r3, #0
   1559c:	andls	r3, r3, #1
   155a0:	cmp	r3, #0
   155a4:	beq	155c4 <__assert_fail@plt+0x3e70>
   155a8:	add	sp, sp, #68	; 0x44
   155ac:	ldrd	r4, [sp]
   155b0:	ldrd	r6, [sp, #8]
   155b4:	ldrd	r8, [sp, #16]
   155b8:	ldrd	sl, [sp, #24]
   155bc:	add	sp, sp, #32
   155c0:	pop	{pc}		; (ldr pc, [sp], #4)
   155c4:	and	r2, r8, #1
   155c8:	mov	r3, #0
   155cc:	orrs	r3, r2, r3
   155d0:	bne	15658 <__assert_fail@plt+0x3f04>
   155d4:	orrs	r3, r8, r9
   155d8:	bne	1569c <__assert_fail@plt+0x3f48>
   155dc:	and	r2, r0, #1
   155e0:	mov	r3, #0
   155e4:	orrs	r3, r2, r3
   155e8:	bne	15694 <__assert_fail@plt+0x3f40>
   155ec:	mov	r3, #0
   155f0:	mov	ip, r3
   155f4:	lsr	r2, r0, #1
   155f8:	orr	r2, r2, r1, lsl #31
   155fc:	mov	r0, r2
   15600:	lsr	r1, r1, #1
   15604:	add	r3, r3, #1
   15608:	and	r6, r2, #1
   1560c:	mov	r7, ip
   15610:	orrs	r2, r6, r7
   15614:	beq	155f4 <__assert_fail@plt+0x3ea0>
   15618:	rsb	r0, r3, #32
   1561c:	sub	r1, r3, #32
   15620:	ldrd	r4, [sp, #16]
   15624:	lsr	r2, r4, r3
   15628:	orr	r2, r2, r5, lsl r0
   1562c:	orr	r2, r2, r5, lsr r1
   15630:	lsr	r1, r5, r3
   15634:	add	r3, r3, #64	; 0x40
   15638:	strd	r8, [sp, #16]
   1563c:	mov	r8, r2
   15640:	mov	r9, r1
   15644:	str	r3, [sp]
   15648:	mov	r2, #2
   1564c:	mov	r3, #0
   15650:	ldr	r0, [sp, #104]	; 0x68
   15654:	bl	11944 <__assert_fail@plt+0x1f0>
   15658:	ldrd	r2, [sp, #16]
   1565c:	orrs	r3, r2, r3
   15660:	beq	15898 <__assert_fail@plt+0x4144>
   15664:	movw	sl, #60904	; 0xede8
   15668:	movt	sl, #1
   1566c:	movw	r7, #62592	; 0xf480
   15670:	movt	r7, #1
   15674:	mov	fp, #3
   15678:	mov	r3, #0
   1567c:	str	r3, [sp, #12]
   15680:	str	sl, [sp, #44]	; 0x2c
   15684:	str	r3, [sp, #40]	; 0x28
   15688:	strd	r8, [sp, #48]	; 0x30
   1568c:	mov	r9, r7
   15690:	b	157b4 <__assert_fail@plt+0x4060>
   15694:	mov	r3, #0
   15698:	b	15618 <__assert_fail@plt+0x3ec4>
   1569c:	mov	r0, r8
   156a0:	mov	r1, r9
   156a4:	mov	r3, #0
   156a8:	mov	ip, r3
   156ac:	lsr	r2, r0, #1
   156b0:	orr	r2, r2, r1, lsl #31
   156b4:	mov	r0, r2
   156b8:	lsr	r1, r1, #1
   156bc:	add	r3, r3, #1
   156c0:	and	r4, r2, #1
   156c4:	mov	r5, ip
   156c8:	orrs	r2, r4, r5
   156cc:	beq	156ac <__assert_fail@plt+0x3f58>
   156d0:	rsb	lr, r3, #64	; 0x40
   156d4:	sub	r0, lr, #32
   156d8:	rsb	r1, lr, #32
   156dc:	ldrd	r6, [sp, #16]
   156e0:	lsl	r2, r7, lr
   156e4:	orr	r2, r2, r6, lsl r0
   156e8:	orr	r2, r2, r6, lsr r1
   156ec:	rsb	ip, r3, #32
   156f0:	sub	r0, r3, #32
   156f4:	lsr	r1, r8, r3
   156f8:	orr	r1, r1, r9, lsl ip
   156fc:	orr	r1, r1, r9, lsr r0
   15700:	lsr	r4, r9, r3
   15704:	orr	r8, r1, r6, lsl lr
   15708:	orr	r9, r2, r4
   1570c:	lsr	r2, r6, r3
   15710:	orr	r2, r2, r7, lsl ip
   15714:	orr	r2, r2, r7, lsr r0
   15718:	lsr	r1, r7, r3
   1571c:	str	r2, [sp, #16]
   15720:	str	r1, [sp, #20]
   15724:	b	15644 <__assert_fail@plt+0x3ef0>
   15728:	ldr	r3, [sp, #36]	; 0x24
   1572c:	mov	r2, #0
   15730:	adds	r4, r3, r6
   15734:	adc	r5, r2, r7
   15738:	ldrd	r2, [sp, #16]
   1573c:	cmp	r5, r3
   15740:	cmpeq	r4, r2
   15744:	bhi	15770 <__assert_fail@plt+0x401c>
   15748:	subs	r6, r2, r4
   1574c:	sbc	r3, r3, r5
   15750:	mul	ip, r6, ip
   15754:	mla	ip, lr, r3, ip
   15758:	umull	r6, r7, r6, lr
   1575c:	add	r7, ip, r7
   15760:	ldrd	r2, [r8, #8]
   15764:	cmp	r7, r3
   15768:	cmpeq	r6, r2
   1576c:	bls	15844 <__assert_fail@plt+0x40f0>
   15770:	ldr	r3, [sp, #40]	; 0x28
   15774:	add	r1, r3, #1
   15778:	str	r1, [sp, #40]	; 0x28
   1577c:	ldr	r0, [sp, #44]	; 0x2c
   15780:	ldrb	r2, [r0, #1]!
   15784:	mov	r3, #0
   15788:	str	r0, [sp, #44]	; 0x2c
   1578c:	adds	fp, fp, r2
   15790:	ldr	r0, [sp, #12]
   15794:	adc	r3, r0, r3
   15798:	str	r3, [sp, #12]
   1579c:	ldrd	r2, [sp, #16]
   157a0:	orr	r3, r2, r3
   157a4:	add	r9, r9, #16
   157a8:	cmp	r3, #0
   157ac:	cmpne	r1, #668	; 0x29c
   157b0:	bcs	1586c <__assert_fail@plt+0x4118>
   157b4:	ldr	r3, [sp, #12]
   157b8:	str	r3, [sp, #56]	; 0x38
   157bc:	mov	r8, r9
   157c0:	ldr	lr, [r9]
   157c4:	ldr	ip, [r9, #4]
   157c8:	ldrd	r2, [sp, #48]	; 0x30
   157cc:	mul	r6, lr, r3
   157d0:	mla	r6, ip, r2, r6
   157d4:	umull	r2, r3, lr, r2
   157d8:	strd	r2, [sp, #24]
   157dc:	add	r6, r6, r3
   157e0:	str	r6, [sp, #28]
   157e4:	umull	r2, r3, r6, fp
   157e8:	ldr	r1, [sp, #56]	; 0x38
   157ec:	umull	r6, r7, r6, r1
   157f0:	ldr	r0, [sp, #24]
   157f4:	umull	r0, r1, r1, r0
   157f8:	adds	sl, r0, r2
   157fc:	adc	r0, r1, r3
   15800:	str	r0, [sp, #60]	; 0x3c
   15804:	ldr	r1, [sp, #24]
   15808:	umull	r0, r1, r1, fp
   1580c:	mov	r0, r1
   15810:	mov	r1, #0
   15814:	adds	r0, r0, sl
   15818:	str	r0, [sp, #32]
   1581c:	ldr	r0, [sp, #60]	; 0x3c
   15820:	adc	r1, r1, r0
   15824:	str	r1, [sp, #36]	; 0x24
   15828:	ldrd	r0, [sp, #32]
   1582c:	cmp	r3, r1
   15830:	cmpeq	r2, r0
   15834:	bls	15728 <__assert_fail@plt+0x3fd4>
   15838:	adds	r6, r6, #0
   1583c:	adc	r7, r7, #1
   15840:	b	15728 <__assert_fail@plt+0x3fd4>
   15844:	mov	r3, #1
   15848:	str	r3, [sp]
   1584c:	mov	r2, fp
   15850:	ldr	r3, [sp, #12]
   15854:	ldr	r0, [sp, #104]	; 0x68
   15858:	bl	11944 <__assert_fail@plt+0x1f0>
   1585c:	strd	r6, [sp, #16]
   15860:	ldrd	r2, [sp, #24]
   15864:	strd	r2, [sp, #48]	; 0x30
   15868:	b	157c0 <__assert_fail@plt+0x406c>
   1586c:	ldr	r6, [sp, #40]	; 0x28
   15870:	ldrd	r8, [sp, #48]	; 0x30
   15874:	cmp	r6, #668	; 0x29c
   15878:	bcs	15a9c <__assert_fail@plt+0x4348>
   1587c:	movw	sl, #62592	; 0xf480
   15880:	movt	sl, #1
   15884:	add	sl, sl, r6, lsl #4
   15888:	add	r5, r6, #1
   1588c:	mov	r7, sl
   15890:	mov	sl, r5
   15894:	b	158b0 <__assert_fail@plt+0x415c>
   15898:	mov	fp, #3
   1589c:	mov	r3, #0
   158a0:	str	r3, [sp, #12]
   158a4:	mov	r6, r3
   158a8:	b	1587c <__assert_fail@plt+0x4128>
   158ac:	mov	sl, r3
   158b0:	mov	r4, r7
   158b4:	ldr	r5, [r7]
   158b8:	ldr	r6, [r7, #4]
   158bc:	mul	r1, r5, r9
   158c0:	mla	r1, r6, r8, r1
   158c4:	umull	r2, r3, r5, r8
   158c8:	add	r3, r1, r3
   158cc:	ldrd	r0, [r7, #8]
   158d0:	strd	r0, [sp, #24]
   158d4:	cmp	r3, r1
   158d8:	cmpeq	r2, r0
   158dc:	bls	15afc <__assert_fail@plt+0x43a8>
   158e0:	ldr	r0, [r4, #16]
   158e4:	ldr	r3, [r4, #20]
   158e8:	mul	r3, r8, r3
   158ec:	mla	r3, r0, r9, r3
   158f0:	umull	r0, r1, r0, r8
   158f4:	add	r1, r3, r1
   158f8:	ldrd	r2, [r4, #24]
   158fc:	cmp	r1, r3
   15900:	cmpeq	r0, r2
   15904:	movls	r8, r0
   15908:	movls	r9, r1
   1590c:	bls	15b4c <__assert_fail@plt+0x43f8>
   15910:	ldr	r0, [r4, #32]
   15914:	ldr	r3, [r4, #36]	; 0x24
   15918:	mul	r3, r8, r3
   1591c:	mla	r3, r0, r9, r3
   15920:	umull	r0, r1, r0, r8
   15924:	add	r1, r3, r1
   15928:	ldrd	r2, [r4, #40]	; 0x28
   1592c:	cmp	r3, r1
   15930:	cmpeq	r2, r0
   15934:	movcs	r8, r0
   15938:	movcs	r9, r1
   1593c:	movcs	r5, #2
   15940:	bcs	15b9c <__assert_fail@plt+0x4448>
   15944:	ldr	r0, [r4, #48]	; 0x30
   15948:	ldr	r3, [r4, #52]	; 0x34
   1594c:	mul	r3, r8, r3
   15950:	mla	r3, r0, r9, r3
   15954:	umull	r0, r1, r0, r8
   15958:	add	r1, r3, r1
   1595c:	ldrd	r2, [r4, #56]	; 0x38
   15960:	cmp	r3, r1
   15964:	cmpeq	r2, r0
   15968:	movcs	r8, r0
   1596c:	movcs	r9, r1
   15970:	movcs	r5, #3
   15974:	bcs	15be8 <__assert_fail@plt+0x4494>
   15978:	ldr	r0, [r4, #64]	; 0x40
   1597c:	ldr	r3, [r4, #68]	; 0x44
   15980:	mul	r3, r8, r3
   15984:	mla	r3, r0, r9, r3
   15988:	umull	r0, r1, r0, r8
   1598c:	add	r1, r3, r1
   15990:	ldrd	r2, [r4, #72]	; 0x48
   15994:	cmp	r3, r1
   15998:	cmpeq	r2, r0
   1599c:	movcs	r8, r0
   159a0:	movcs	r9, r1
   159a4:	movcs	r5, #4
   159a8:	bcs	15c34 <__assert_fail@plt+0x44e0>
   159ac:	ldr	r0, [r4, #80]	; 0x50
   159b0:	ldr	r3, [r4, #84]	; 0x54
   159b4:	mul	r3, r8, r3
   159b8:	mla	r3, r0, r9, r3
   159bc:	umull	r0, r1, r0, r8
   159c0:	add	r1, r3, r1
   159c4:	ldrd	r2, [r4, #88]	; 0x58
   159c8:	cmp	r1, r3
   159cc:	cmpeq	r0, r2
   159d0:	movls	r8, r0
   159d4:	movls	r9, r1
   159d8:	movls	r5, #5
   159dc:	bls	15c80 <__assert_fail@plt+0x452c>
   159e0:	ldr	r0, [r4, #96]	; 0x60
   159e4:	ldr	r3, [r4, #100]	; 0x64
   159e8:	mul	r3, r8, r3
   159ec:	mla	r3, r0, r9, r3
   159f0:	umull	r0, r1, r0, r8
   159f4:	add	r1, r3, r1
   159f8:	ldrd	r2, [r4, #104]	; 0x68
   159fc:	cmp	r1, r3
   15a00:	cmpeq	r0, r2
   15a04:	movls	r8, r0
   15a08:	movls	r9, r1
   15a0c:	movls	r5, #6
   15a10:	bls	15ccc <__assert_fail@plt+0x4578>
   15a14:	ldr	r6, [r4, #112]	; 0x70
   15a18:	ldr	r3, [r4, #116]	; 0x74
   15a1c:	mul	r3, r8, r3
   15a20:	mla	r3, r6, r9, r3
   15a24:	umull	r0, r1, r6, r8
   15a28:	add	r3, r3, r1
   15a2c:	mov	r1, r3
   15a30:	ldrd	r2, [r4, #120]	; 0x78
   15a34:	cmp	r1, r3
   15a38:	cmpeq	r0, r2
   15a3c:	movls	r5, #7
   15a40:	movls	r8, r7
   15a44:	movls	r6, r0
   15a48:	movls	r7, r1
   15a4c:	bls	15d20 <__assert_fail@plt+0x45cc>
   15a50:	ldr	r3, [pc, #852]	; 15dac <__assert_fail@plt+0x4658>
   15a54:	add	r3, sl, r3
   15a58:	ldrb	r2, [r3, #-1]
   15a5c:	mov	r3, #0
   15a60:	adds	fp, fp, r2
   15a64:	ldr	r1, [sp, #12]
   15a68:	adc	r3, r1, r3
   15a6c:	str	r3, [sp, #12]
   15a70:	mul	r1, fp, r3
   15a74:	umull	r2, r3, fp, fp
   15a78:	add	r3, r3, r1, lsl #1
   15a7c:	cmp	r3, r9
   15a80:	cmpeq	r2, r8
   15a84:	bhi	15a9c <__assert_fail@plt+0x4348>
   15a88:	add	r7, r7, #128	; 0x80
   15a8c:	add	r3, sl, #8
   15a90:	add	sl, sl, #7
   15a94:	cmp	sl, #668	; 0x29c
   15a98:	bcc	158ac <__assert_fail@plt+0x4158>
   15a9c:	cmp	r9, #0
   15aa0:	cmpeq	r8, #1
   15aa4:	movls	r3, #1
   15aa8:	movhi	r3, #0
   15aac:	ldrd	r0, [sp, #16]
   15ab0:	mov	r2, r0
   15ab4:	orrs	r2, r2, r1
   15ab8:	movne	r3, #0
   15abc:	cmp	r3, #0
   15ac0:	bne	155a8 <__assert_fail@plt+0x3e54>
   15ac4:	mov	r2, r8
   15ac8:	mov	r3, r9
   15acc:	bl	15db0 <__assert_fail@plt+0x465c>
   15ad0:	cmp	r0, #0
   15ad4:	bne	15d74 <__assert_fail@plt+0x4620>
   15ad8:	ldrd	r2, [sp, #16]
   15adc:	orrs	r3, r2, r3
   15ae0:	bne	15d88 <__assert_fail@plt+0x4634>
   15ae4:	ldr	r3, [sp, #104]	; 0x68
   15ae8:	mov	r2, #1
   15aec:	mov	r0, r8
   15af0:	mov	r1, r9
   15af4:	bl	13e80 <__assert_fail@plt+0x272c>
   15af8:	b	155a8 <__assert_fail@plt+0x3e54>
   15afc:	mov	r8, r2
   15b00:	mov	r9, r3
   15b04:	mov	r3, #0
   15b08:	str	r3, [sp, #4]
   15b0c:	str	sl, [sp]
   15b10:	mov	r2, fp
   15b14:	ldr	r3, [sp, #12]
   15b18:	ldr	r0, [sp, #104]	; 0x68
   15b1c:	bl	11a6c <__assert_fail@plt+0x318>
   15b20:	mul	r1, r5, r9
   15b24:	mla	r1, r6, r8, r1
   15b28:	umull	r2, r3, r5, r8
   15b2c:	add	r3, r1, r3
   15b30:	ldrd	r0, [sp, #24]
   15b34:	cmp	r3, r1
   15b38:	cmpeq	r2, r0
   15b3c:	bhi	158e0 <__assert_fail@plt+0x418c>
   15b40:	mov	r8, r2
   15b44:	mov	r9, r3
   15b48:	b	15b04 <__assert_fail@plt+0x43b0>
   15b4c:	mov	r3, #1
   15b50:	str	r3, [sp, #4]
   15b54:	str	sl, [sp]
   15b58:	mov	r2, fp
   15b5c:	ldr	r3, [sp, #12]
   15b60:	ldr	r0, [sp, #104]	; 0x68
   15b64:	bl	11a6c <__assert_fail@plt+0x318>
   15b68:	ldr	r0, [r4, #16]
   15b6c:	ldr	r3, [r4, #20]
   15b70:	mul	r3, r8, r3
   15b74:	mla	r3, r0, r9, r3
   15b78:	umull	r0, r1, r0, r8
   15b7c:	add	r1, r3, r1
   15b80:	ldrd	r2, [r4, #24]
   15b84:	cmp	r1, r3
   15b88:	cmpeq	r0, r2
   15b8c:	bhi	15910 <__assert_fail@plt+0x41bc>
   15b90:	mov	r8, r0
   15b94:	mov	r9, r1
   15b98:	b	15b4c <__assert_fail@plt+0x43f8>
   15b9c:	str	r5, [sp, #4]
   15ba0:	str	sl, [sp]
   15ba4:	mov	r2, fp
   15ba8:	ldr	r3, [sp, #12]
   15bac:	ldr	r0, [sp, #104]	; 0x68
   15bb0:	bl	11a6c <__assert_fail@plt+0x318>
   15bb4:	ldr	r0, [r4, #32]
   15bb8:	ldr	r3, [r4, #36]	; 0x24
   15bbc:	mul	r3, r8, r3
   15bc0:	mla	r3, r0, r9, r3
   15bc4:	umull	r0, r1, r0, r8
   15bc8:	add	r1, r3, r1
   15bcc:	ldrd	r2, [r4, #40]	; 0x28
   15bd0:	cmp	r1, r3
   15bd4:	cmpeq	r0, r2
   15bd8:	bhi	15944 <__assert_fail@plt+0x41f0>
   15bdc:	mov	r8, r0
   15be0:	mov	r9, r1
   15be4:	b	15b9c <__assert_fail@plt+0x4448>
   15be8:	str	r5, [sp, #4]
   15bec:	str	sl, [sp]
   15bf0:	mov	r2, fp
   15bf4:	ldr	r3, [sp, #12]
   15bf8:	ldr	r0, [sp, #104]	; 0x68
   15bfc:	bl	11a6c <__assert_fail@plt+0x318>
   15c00:	ldr	r0, [r4, #48]	; 0x30
   15c04:	ldr	r3, [r4, #52]	; 0x34
   15c08:	mul	r3, r8, r3
   15c0c:	mla	r3, r0, r9, r3
   15c10:	umull	r0, r1, r0, r8
   15c14:	add	r1, r3, r1
   15c18:	ldrd	r2, [r4, #56]	; 0x38
   15c1c:	cmp	r1, r3
   15c20:	cmpeq	r0, r2
   15c24:	bhi	15978 <__assert_fail@plt+0x4224>
   15c28:	mov	r8, r0
   15c2c:	mov	r9, r1
   15c30:	b	15be8 <__assert_fail@plt+0x4494>
   15c34:	str	r5, [sp, #4]
   15c38:	str	sl, [sp]
   15c3c:	mov	r2, fp
   15c40:	ldr	r3, [sp, #12]
   15c44:	ldr	r0, [sp, #104]	; 0x68
   15c48:	bl	11a6c <__assert_fail@plt+0x318>
   15c4c:	ldr	r0, [r4, #64]	; 0x40
   15c50:	ldr	r3, [r4, #68]	; 0x44
   15c54:	mul	r3, r8, r3
   15c58:	mla	r3, r0, r9, r3
   15c5c:	umull	r0, r1, r0, r8
   15c60:	add	r1, r3, r1
   15c64:	ldrd	r2, [r4, #72]	; 0x48
   15c68:	cmp	r1, r3
   15c6c:	cmpeq	r0, r2
   15c70:	bhi	159ac <__assert_fail@plt+0x4258>
   15c74:	mov	r8, r0
   15c78:	mov	r9, r1
   15c7c:	b	15c34 <__assert_fail@plt+0x44e0>
   15c80:	str	r5, [sp, #4]
   15c84:	str	sl, [sp]
   15c88:	mov	r2, fp
   15c8c:	ldr	r3, [sp, #12]
   15c90:	ldr	r0, [sp, #104]	; 0x68
   15c94:	bl	11a6c <__assert_fail@plt+0x318>
   15c98:	ldr	r0, [r4, #80]	; 0x50
   15c9c:	ldr	r3, [r4, #84]	; 0x54
   15ca0:	mul	r3, r8, r3
   15ca4:	mla	r3, r0, r9, r3
   15ca8:	umull	r0, r1, r0, r8
   15cac:	add	r1, r3, r1
   15cb0:	ldrd	r2, [r4, #88]	; 0x58
   15cb4:	cmp	r1, r3
   15cb8:	cmpeq	r0, r2
   15cbc:	bhi	159e0 <__assert_fail@plt+0x428c>
   15cc0:	mov	r8, r0
   15cc4:	mov	r9, r1
   15cc8:	b	15c80 <__assert_fail@plt+0x452c>
   15ccc:	str	r5, [sp, #4]
   15cd0:	str	sl, [sp]
   15cd4:	mov	r2, fp
   15cd8:	ldr	r3, [sp, #12]
   15cdc:	ldr	r0, [sp, #104]	; 0x68
   15ce0:	bl	11a6c <__assert_fail@plt+0x318>
   15ce4:	ldr	r0, [r4, #96]	; 0x60
   15ce8:	ldr	r3, [r4, #100]	; 0x64
   15cec:	mul	r3, r8, r3
   15cf0:	mla	r3, r0, r9, r3
   15cf4:	umull	r0, r1, r0, r8
   15cf8:	add	r1, r3, r1
   15cfc:	ldrd	r2, [r4, #104]	; 0x68
   15d00:	cmp	r1, r3
   15d04:	cmpeq	r0, r2
   15d08:	bhi	15a14 <__assert_fail@plt+0x42c0>
   15d0c:	mov	r8, r0
   15d10:	mov	r9, r1
   15d14:	b	15ccc <__assert_fail@plt+0x4578>
   15d18:	mov	r6, r0
   15d1c:	mov	r7, r1
   15d20:	str	r5, [sp, #4]
   15d24:	str	sl, [sp]
   15d28:	mov	r2, fp
   15d2c:	ldr	r3, [sp, #12]
   15d30:	ldr	r0, [sp, #104]	; 0x68
   15d34:	bl	11a6c <__assert_fail@plt+0x318>
   15d38:	ldr	r0, [r4, #112]	; 0x70
   15d3c:	ldr	r3, [r4, #116]	; 0x74
   15d40:	mul	r3, r6, r3
   15d44:	mla	r3, r0, r7, r3
   15d48:	umull	r0, r1, r0, r6
   15d4c:	add	r1, r3, r1
   15d50:	ldrd	r2, [r4, #120]	; 0x78
   15d54:	cmp	r1, r3
   15d58:	cmpeq	r0, r2
   15d5c:	bls	15d18 <__assert_fail@plt+0x45c4>
   15d60:	mov	r3, r7
   15d64:	mov	r7, r8
   15d68:	mov	r8, r6
   15d6c:	mov	r9, r3
   15d70:	b	15a50 <__assert_fail@plt+0x42fc>
   15d74:	strd	r8, [sp]
   15d78:	ldrd	r2, [sp, #16]
   15d7c:	ldr	r0, [sp, #104]	; 0x68
   15d80:	bl	128d0 <__assert_fail@plt+0x117c>
   15d84:	b	155a8 <__assert_fail@plt+0x3e54>
   15d88:	ldr	r3, [sp, #104]	; 0x68
   15d8c:	str	r3, [sp, #4]
   15d90:	mov	r3, #1
   15d94:	str	r3, [sp]
   15d98:	mov	r2, r8
   15d9c:	mov	r3, r9
   15da0:	ldrd	r0, [sp, #16]
   15da4:	bl	1494c <__assert_fail@plt+0x31f8>
   15da8:	b	155a8 <__assert_fail@plt+0x3e54>
   15dac:	andeq	pc, r1, r4, ror #2
   15db0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15db4:	strd	r6, [sp, #8]
   15db8:	strd	r8, [sp, #16]
   15dbc:	strd	sl, [sp, #24]
   15dc0:	str	lr, [sp, #32]
   15dc4:	sub	sp, sp, #500	; 0x1f4
   15dc8:	mov	sl, r0
   15dcc:	mov	fp, r1
   15dd0:	strd	r2, [sp, #72]	; 0x48
   15dd4:	orrs	r3, sl, fp
   15dd8:	beq	15ee4 <__assert_fail@plt+0x4790>
   15ddc:	ldrd	r0, [sp, #72]	; 0x48
   15de0:	mov	r3, r0
   15de4:	orrs	r3, r3, r1
   15de8:	moveq	r3, #1
   15dec:	movne	r3, #0
   15df0:	subs	r6, sl, r3
   15df4:	sbc	r7, fp, #0
   15df8:	strd	r6, [sp, #64]	; 0x40
   15dfc:	subs	r3, r0, #1
   15e00:	str	r3, [sp, #96]	; 0x60
   15e04:	sbc	r3, r1, #0
   15e08:	str	r3, [sp, #100]	; 0x64
   15e0c:	ldrd	r0, [sp, #96]	; 0x60
   15e10:	orrs	r3, r0, r1
   15e14:	beq	15ef4 <__assert_fail@plt+0x47a0>
   15e18:	and	r2, r0, #1
   15e1c:	mov	r3, #0
   15e20:	orrs	r3, r2, r3
   15e24:	movne	r3, #0
   15e28:	strne	r3, [sp, #104]	; 0x68
   15e2c:	bne	15e78 <__assert_fail@plt+0x4724>
   15e30:	ldrd	r2, [sp, #96]	; 0x60
   15e34:	mov	r1, r2
   15e38:	mov	r2, r3
   15e3c:	mov	r3, #0
   15e40:	mov	r0, r3
   15e44:	mov	ip, r3
   15e48:	ldrd	r6, [sp, #80]	; 0x50
   15e4c:	lsr	r3, r1, #1
   15e50:	orr	r3, r3, r2, lsl #31
   15e54:	mov	r1, r3
   15e58:	lsr	r2, r2, #1
   15e5c:	add	ip, ip, #1
   15e60:	and	r4, r3, #1
   15e64:	mov	r5, r0
   15e68:	orrs	r3, r4, r5
   15e6c:	beq	15e4c <__assert_fail@plt+0x46f8>
   15e70:	str	ip, [sp, #104]	; 0x68
   15e74:	strd	r6, [sp, #80]	; 0x50
   15e78:	ldr	lr, [sp, #104]	; 0x68
   15e7c:	rsb	ip, lr, #64	; 0x40
   15e80:	sub	r1, ip, #32
   15e84:	rsb	r2, ip, #32
   15e88:	ldrd	r4, [sp, #64]	; 0x40
   15e8c:	lsl	r3, r5, ip
   15e90:	orr	r3, r3, r4, lsl r1
   15e94:	orr	r3, r3, r4, lsr r2
   15e98:	rsb	r0, lr, #32
   15e9c:	sub	r1, lr, #32
   15ea0:	ldrd	r6, [sp, #96]	; 0x60
   15ea4:	lsr	r2, r6, lr
   15ea8:	orr	r2, r2, r7, lsl r0
   15eac:	ldr	r6, [sp, #100]	; 0x64
   15eb0:	orr	r2, r2, r6, lsr r1
   15eb4:	orr	r2, r2, r4, lsl ip
   15eb8:	ldr	ip, [sp, #100]	; 0x64
   15ebc:	orr	r3, r3, ip, lsr lr
   15ec0:	str	r2, [sp, #480]	; 0x1e0
   15ec4:	str	r3, [sp, #484]	; 0x1e4
   15ec8:	lsr	r3, r4, lr
   15ecc:	orr	r3, r3, r5, lsl r0
   15ed0:	orr	r3, r3, r5, lsr r1
   15ed4:	lsr	r2, r5, lr
   15ed8:	str	r3, [sp, #488]	; 0x1e8
   15edc:	str	r2, [sp, #492]	; 0x1ec
   15ee0:	b	15f7c <__assert_fail@plt+0x4828>
   15ee4:	ldrd	r0, [sp, #72]	; 0x48
   15ee8:	bl	13880 <__assert_fail@plt+0x212c>
   15eec:	str	r0, [sp, #140]	; 0x8c
   15ef0:	b	167b0 <__assert_fail@plt+0x505c>
   15ef4:	ldrd	r0, [sp, #64]	; 0x40
   15ef8:	and	r2, r0, #1
   15efc:	mov	r3, #0
   15f00:	orrs	r3, r2, r3
   15f04:	bne	16054 <__assert_fail@plt+0x4900>
   15f08:	mov	r2, r1
   15f0c:	mov	r1, #0
   15f10:	mov	ip, r1
   15f14:	ldrd	r6, [sp, #80]	; 0x50
   15f18:	lsr	r3, r0, #1
   15f1c:	orr	r3, r3, r2, lsl #31
   15f20:	mov	r0, r3
   15f24:	lsr	r2, r2, #1
   15f28:	add	r1, r1, #1
   15f2c:	and	r4, r3, #1
   15f30:	mov	r5, ip
   15f34:	orrs	r3, r4, r5
   15f38:	beq	15f18 <__assert_fail@plt+0x47c4>
   15f3c:	strd	r6, [sp, #80]	; 0x50
   15f40:	rsb	r0, r1, #32
   15f44:	sub	r2, r1, #32
   15f48:	ldrd	r4, [sp, #64]	; 0x40
   15f4c:	lsr	r3, r4, r1
   15f50:	orr	r3, r3, r5, lsl r0
   15f54:	orr	r3, r3, r5, lsr r2
   15f58:	lsr	r2, r5, r1
   15f5c:	str	r3, [sp, #480]	; 0x1e0
   15f60:	str	r2, [sp, #484]	; 0x1e4
   15f64:	mov	r2, #0
   15f68:	mov	r3, #0
   15f6c:	add	r0, sp, #488	; 0x1e8
   15f70:	strd	r2, [r0]
   15f74:	add	r3, r1, #64	; 0x40
   15f78:	str	r3, [sp, #104]	; 0x68
   15f7c:	movw	r3, #60904	; 0xede8
   15f80:	movt	r3, #1
   15f84:	ldrd	r4, [sp, #72]	; 0x48
   15f88:	ubfx	r2, r4, #1, #7
   15f8c:	add	r3, r3, r2
   15f90:	ldrb	r0, [r3, #728]	; 0x2d8
   15f94:	mov	r1, #0
   15f98:	adds	r3, r0, r0
   15f9c:	adc	r2, r1, r1
   15fa0:	umull	r0, r1, r0, r0
   15fa4:	mul	ip, r0, r5
   15fa8:	mla	ip, r4, r1, ip
   15fac:	umull	r0, r1, r0, r4
   15fb0:	add	r1, ip, r1
   15fb4:	subs	r3, r3, r0
   15fb8:	sbc	r2, r2, r1
   15fbc:	adds	r0, r3, r3
   15fc0:	adc	r1, r2, r2
   15fc4:	mul	ip, r3, r2
   15fc8:	umull	r2, r3, r3, r3
   15fcc:	add	r3, r3, ip, lsl #1
   15fd0:	mul	ip, r2, r5
   15fd4:	mla	ip, r4, r3, ip
   15fd8:	umull	r6, r7, r2, r4
   15fdc:	add	r7, ip, r7
   15fe0:	subs	r2, r0, r6
   15fe4:	sbc	ip, r1, r7
   15fe8:	adds	r1, r2, r2
   15fec:	adc	r0, ip, ip
   15ff0:	mul	ip, r2, ip
   15ff4:	umull	r2, r3, r2, r2
   15ff8:	add	r3, r3, ip, lsl #1
   15ffc:	mul	ip, r2, r5
   16000:	mla	ip, r4, r3, ip
   16004:	umull	r2, r3, r2, r4
   16008:	add	r3, ip, r3
   1600c:	subs	r1, r1, r2
   16010:	str	r1, [sp, #40]	; 0x28
   16014:	sbc	r3, r0, r3
   16018:	str	r3, [sp, #44]	; 0x2c
   1601c:	cmp	fp, #0
   16020:	cmpeq	sl, #1
   16024:	bls	1605c <__assert_fail@plt+0x4908>
   16028:	mov	ip, #64	; 0x40
   1602c:	mov	r0, #0
   16030:	mov	r1, #0
   16034:	mov	r2, #1
   16038:	mov	r3, #0
   1603c:	str	ip, [sp, #24]
   16040:	mov	ip, #0
   16044:	str	ip, [sp, #16]
   16048:	ldrd	r4, [sp, #72]	; 0x48
   1604c:	strd	r8, [sp, #80]	; 0x50
   16050:	b	160b8 <__assert_fail@plt+0x4964>
   16054:	mov	r1, #0
   16058:	b	15f40 <__assert_fail@plt+0x47ec>
   1605c:	mov	ip, #128	; 0x80
   16060:	mov	r0, #1
   16064:	mov	r1, #0
   16068:	mov	r2, #0
   1606c:	mov	r3, #0
   16070:	b	1603c <__assert_fail@plt+0x48e8>
   16074:	cmp	r5, r7
   16078:	cmpeq	r4, r6
   1607c:	movhi	lr, #1
   16080:	movls	lr, #0
   16084:	mov	r8, #0
   16088:	subs	r0, r6, r4
   1608c:	sbc	r1, r7, r5
   16090:	subs	r9, r2, sl
   16094:	sbc	ip, r3, fp
   16098:	subs	r2, r9, lr
   1609c:	sbc	r3, ip, r8
   160a0:	ldr	ip, [sp, #16]
   160a4:	add	ip, ip, #1
   160a8:	str	ip, [sp, #16]
   160ac:	ldr	lr, [sp, #24]
   160b0:	cmp	lr, ip
   160b4:	beq	16108 <__assert_fail@plt+0x49b4>
   160b8:	adds	r9, r2, r2
   160bc:	adc	lr, r3, r3
   160c0:	orr	r2, r9, r1, lsr #31
   160c4:	mov	r3, lr
   160c8:	adds	r6, r0, r0
   160cc:	adc	r7, r1, r1
   160d0:	mov	r0, r6
   160d4:	mov	r1, r7
   160d8:	cmp	fp, lr
   160dc:	cmpeq	sl, r2
   160e0:	bcc	16074 <__assert_fail@plt+0x4920>
   160e4:	moveq	lr, #1
   160e8:	movne	lr, #0
   160ec:	cmp	r5, r7
   160f0:	cmpeq	r4, r6
   160f4:	movhi	lr, #0
   160f8:	andls	lr, lr, #1
   160fc:	cmp	lr, #0
   16100:	beq	160a0 <__assert_fail@plt+0x494c>
   16104:	b	16074 <__assert_fail@plt+0x4920>
   16108:	ldrd	r8, [sp, #80]	; 0x50
   1610c:	add	ip, sp, #456	; 0x1c8
   16110:	strd	r2, [ip]
   16114:	add	ip, sp, #448	; 0x1c0
   16118:	strd	r0, [ip]
   1611c:	adds	ip, r0, r0
   16120:	str	ip, [sp, #32]
   16124:	adc	ip, r1, r1
   16128:	str	ip, [sp, #36]	; 0x24
   1612c:	adds	ip, r2, r2
   16130:	str	ip, [sp, #56]	; 0x38
   16134:	adc	r3, r3, r3
   16138:	str	r3, [sp, #60]	; 0x3c
   1613c:	ldrd	r4, [sp, #32]
   16140:	cmp	r5, r1
   16144:	cmpeq	r4, r0
   16148:	movcc	r1, #1
   1614c:	movcs	r1, #0
   16150:	ldrd	r2, [sp, #56]	; 0x38
   16154:	adds	r2, r2, r1
   16158:	adc	r3, r3, #0
   1615c:	add	r1, sp, #472	; 0x1d8
   16160:	strd	r2, [r1]
   16164:	cmp	r3, fp
   16168:	cmpeq	r2, sl
   1616c:	bhi	161a0 <__assert_fail@plt+0x4a4c>
   16170:	moveq	r1, #1
   16174:	movne	r1, #0
   16178:	ldrd	r6, [sp, #72]	; 0x48
   1617c:	cmp	r7, r5
   16180:	cmpeq	r6, r4
   16184:	movhi	r1, #0
   16188:	andls	r1, r1, #1
   1618c:	cmp	r1, #0
   16190:	bne	161a0 <__assert_fail@plt+0x4a4c>
   16194:	add	r3, sp, #464	; 0x1d0
   16198:	strd	r4, [r3]
   1619c:	b	161e0 <__assert_fail@plt+0x4a8c>
   161a0:	ldrd	r6, [sp, #32]
   161a4:	ldrd	r4, [sp, #72]	; 0x48
   161a8:	subs	r0, r6, r4
   161ac:	sbc	r1, r7, r5
   161b0:	str	r0, [sp, #464]	; 0x1d0
   161b4:	str	r1, [sp, #468]	; 0x1d4
   161b8:	cmp	r5, r7
   161bc:	cmpeq	r4, r6
   161c0:	movhi	r1, #1
   161c4:	movls	r1, #0
   161c8:	subs	r4, r2, r1
   161cc:	sbc	r5, r3, #0
   161d0:	subs	r2, r4, sl
   161d4:	sbc	r3, r5, fp
   161d8:	str	r2, [sp, #472]	; 0x1d8
   161dc:	str	r3, [sp, #476]	; 0x1dc
   161e0:	add	r1, sp, #432	; 0x1b0
   161e4:	ldrd	r2, [sp, #72]	; 0x48
   161e8:	strd	r2, [r1]
   161ec:	add	r3, sp, #440	; 0x1b8
   161f0:	strd	sl, [r3]
   161f4:	add	r3, sp, #448	; 0x1c0
   161f8:	str	r3, [sp, #12]
   161fc:	ldr	r3, [sp, #104]	; 0x68
   16200:	str	r3, [sp, #8]
   16204:	add	r3, sp, #480	; 0x1e0
   16208:	str	r3, [sp, #4]
   1620c:	add	r3, sp, #464	; 0x1d0
   16210:	str	r3, [sp]
   16214:	ldr	r2, [sp, #40]	; 0x28
   16218:	ldr	r3, [sp, #44]	; 0x2c
   1621c:	mov	r0, r1
   16220:	bl	126f8 <__assert_fail@plt+0xfa4>
   16224:	subs	r3, r0, #0
   16228:	str	r3, [sp, #140]	; 0x8c
   1622c:	beq	167b0 <__assert_fail@plt+0x505c>
   16230:	add	r3, sp, #176	; 0xb0
   16234:	str	r3, [sp]
   16238:	ldrd	r6, [sp, #96]	; 0x60
   1623c:	mov	r2, r6
   16240:	mov	r3, r7
   16244:	ldrd	r4, [sp, #64]	; 0x40
   16248:	mov	r0, r4
   1624c:	mov	r1, r5
   16250:	bl	15540 <__assert_fail@plt+0x3dec>
   16254:	lsr	r2, r6, #1
   16258:	lsr	r3, r7, #1
   1625c:	orr	r2, r2, r7, lsl #31
   16260:	str	r2, [sp, #108]	; 0x6c
   16264:	orr	r3, r3, r4, lsl #31
   16268:	str	r3, [sp, #112]	; 0x70
   1626c:	lsr	r3, r4, #1
   16270:	orr	r3, r3, r5, lsl #31
   16274:	str	r3, [sp, #116]	; 0x74
   16278:	lsr	r3, r5, #1
   1627c:	str	r3, [sp, #136]	; 0x88
   16280:	movw	r3, #60904	; 0xede8
   16284:	movt	r3, #1
   16288:	str	r3, [sp, #56]	; 0x38
   1628c:	mov	r2, #2
   16290:	mov	r3, #0
   16294:	strd	r2, [sp, #32]
   16298:	movw	r3, #60904	; 0xede8
   1629c:	movt	r3, #1
   162a0:	str	r3, [sp, #80]	; 0x50
   162a4:	b	1676c <__assert_fail@plt+0x5018>
   162a8:	ldr	ip, [sp, #176]	; 0xb0
   162ac:	ldr	r4, [sp, #180]	; 0xb4
   162b0:	ubfx	r3, ip, #1, #7
   162b4:	ldr	r2, [sp, #80]	; 0x50
   162b8:	add	r3, r2, r3
   162bc:	ldrb	r2, [r3, #728]	; 0x2d8
   162c0:	mov	r3, #0
   162c4:	adds	r1, r2, r2
   162c8:	adc	lr, r3, r3
   162cc:	umull	r2, r3, r2, r2
   162d0:	mul	r0, r2, r4
   162d4:	mla	r0, ip, r3, r0
   162d8:	umull	r2, r3, r2, ip
   162dc:	add	r3, r0, r3
   162e0:	subs	r0, r1, r2
   162e4:	sbc	lr, lr, r3
   162e8:	adds	r2, r0, r0
   162ec:	adc	r3, lr, lr
   162f0:	mul	lr, r0, lr
   162f4:	umull	r0, r1, r0, r0
   162f8:	add	r1, r1, lr, lsl #1
   162fc:	mul	lr, r0, r4
   16300:	mla	lr, ip, r1, lr
   16304:	umull	r0, r1, r0, ip
   16308:	add	r1, lr, r1
   1630c:	subs	r2, r2, r0
   16310:	sbc	r3, r3, r1
   16314:	adds	r0, r2, r2
   16318:	adc	r1, r3, r3
   1631c:	mul	lr, r2, r3
   16320:	umull	r2, r3, r2, r2
   16324:	add	r3, r3, lr, lsl #1
   16328:	mul	lr, r2, r4
   1632c:	mla	lr, ip, r3, lr
   16330:	umull	r4, r5, r2, ip
   16334:	add	r5, lr, r5
   16338:	subs	r2, r0, r4
   1633c:	sbc	r1, r1, r5
   16340:	ldrd	r4, [sp, #96]	; 0x60
   16344:	mul	r3, r2, r5
   16348:	mla	r1, r4, r1, r3
   1634c:	umull	r2, r3, r2, r4
   16350:	add	r3, r1, r3
   16354:	strd	r2, [sp, #144]	; 0x90
   16358:	mov	r3, #0
   1635c:	str	r3, [sp, #152]	; 0x98
   16360:	str	r3, [sp, #156]	; 0x9c
   16364:	add	r3, sp, #448	; 0x1c0
   16368:	str	r3, [sp, #8]
   1636c:	ldr	r3, [sp, #40]	; 0x28
   16370:	str	r3, [sp]
   16374:	ldr	r3, [sp, #44]	; 0x2c
   16378:	str	r3, [sp, #4]
   1637c:	add	r3, sp, #432	; 0x1b0
   16380:	add	r2, sp, #144	; 0x90
   16384:	add	r1, sp, #464	; 0x1d0
   16388:	add	r0, sp, #168	; 0xa8
   1638c:	bl	124d0 <__assert_fail@plt+0xd7c>
   16390:	strd	r0, [sp, #160]	; 0xa0
   16394:	add	r3, sp, #448	; 0x1c0
   16398:	ldrd	r2, [r3]
   1639c:	cmp	r1, r3
   163a0:	cmpeq	r0, r2
   163a4:	beq	163b8 <__assert_fail@plt+0x4c64>
   163a8:	ldrb	r3, [sp, #426]	; 0x1aa
   163ac:	cmp	r3, #0
   163b0:	bne	16784 <__assert_fail@plt+0x5030>
   163b4:	b	167b0 <__assert_fail@plt+0x505c>
   163b8:	ldrd	r0, [sp, #168]	; 0xa8
   163bc:	add	r3, sp, #456	; 0x1c8
   163c0:	ldrd	r2, [r3]
   163c4:	cmp	r1, r3
   163c8:	cmpeq	r0, r2
   163cc:	movne	r2, #1
   163d0:	moveq	r2, #0
   163d4:	ldrb	r3, [sp, #426]	; 0x1aa
   163d8:	cmp	r3, #0
   163dc:	movne	r3, r2
   163e0:	moveq	r3, #0
   163e4:	cmp	r3, #0
   163e8:	beq	16608 <__assert_fail@plt+0x4eb4>
   163ec:	b	16784 <__assert_fail@plt+0x5030>
   163f0:	ldr	r3, [sp, #108]	; 0x6c
   163f4:	str	r3, [sp, #144]	; 0x90
   163f8:	ldr	r3, [sp, #112]	; 0x70
   163fc:	str	r3, [sp, #148]	; 0x94
   16400:	ldr	r3, [sp, #116]	; 0x74
   16404:	str	r3, [sp, #152]	; 0x98
   16408:	ldr	r3, [sp, #136]	; 0x88
   1640c:	str	r3, [sp, #156]	; 0x9c
   16410:	add	r3, sp, #448	; 0x1c0
   16414:	str	r3, [sp, #8]
   16418:	ldr	r3, [sp, #40]	; 0x28
   1641c:	str	r3, [sp]
   16420:	ldr	r3, [sp, #44]	; 0x2c
   16424:	str	r3, [sp, #4]
   16428:	add	r3, sp, #432	; 0x1b0
   1642c:	add	r2, sp, #144	; 0x90
   16430:	add	r1, sp, #464	; 0x1d0
   16434:	add	r0, sp, #168	; 0xa8
   16438:	bl	124d0 <__assert_fail@plt+0xd7c>
   1643c:	strd	r0, [sp, #160]	; 0xa0
   16440:	add	r3, sp, #448	; 0x1c0
   16444:	ldrd	r2, [r3]
   16448:	cmp	r1, r3
   1644c:	cmpeq	r0, r2
   16450:	beq	165d0 <__assert_fail@plt+0x4e7c>
   16454:	ldrb	r3, [sp, #426]	; 0x1aa
   16458:	cmp	r3, r9
   1645c:	bls	167b0 <__assert_fail@plt+0x505c>
   16460:	add	r9, r9, #1
   16464:	ldr	r1, [sp, #16]
   16468:	ldrd	r2, [r1, #8]!
   1646c:	str	r1, [sp, #16]
   16470:	cmp	r3, #0
   16474:	cmpeq	r2, #2
   16478:	beq	163f0 <__assert_fail@plt+0x4c9c>
   1647c:	ubfx	r1, r2, #1, #7
   16480:	ldr	r0, [sp, #80]	; 0x50
   16484:	add	r1, r0, r1
   16488:	ldrb	r0, [r1, #728]	; 0x2d8
   1648c:	mov	r1, #0
   16490:	adds	r4, r0, r0
   16494:	adc	ip, r1, r1
   16498:	umull	r0, r1, r0, r0
   1649c:	mul	lr, r0, r3
   164a0:	mla	lr, r2, r1, lr
   164a4:	umull	r0, r1, r0, r2
   164a8:	add	r1, lr, r1
   164ac:	subs	r4, r4, r0
   164b0:	sbc	ip, ip, r1
   164b4:	adds	r0, r4, r4
   164b8:	adc	r1, ip, ip
   164bc:	mul	ip, r4, ip
   164c0:	umull	r4, r5, r4, r4
   164c4:	add	r5, r5, ip, lsl #1
   164c8:	mul	ip, r4, r3
   164cc:	mla	ip, r2, r5, ip
   164d0:	umull	r4, r5, r4, r2
   164d4:	add	r5, ip, r5
   164d8:	subs	r0, r0, r4
   164dc:	sbc	r1, r1, r5
   164e0:	adds	ip, r0, r0
   164e4:	adc	lr, r1, r1
   164e8:	mul	r4, r0, r1
   164ec:	umull	r0, r1, r0, r0
   164f0:	add	r1, r1, r4, lsl #1
   164f4:	mul	r4, r0, r3
   164f8:	mla	r4, r2, r1, r4
   164fc:	umull	r0, r1, r0, r2
   16500:	add	r1, r4, r1
   16504:	subs	ip, ip, r0
   16508:	sbc	lr, lr, r1
   1650c:	mul	r4, r6, lr
   16510:	mla	r4, ip, r7, r4
   16514:	umull	r0, r1, r6, ip
   16518:	add	r1, r4, r1
   1651c:	ldrd	r4, [sp, #64]	; 0x40
   16520:	cmp	r5, r3
   16524:	cmpeq	r4, r2
   16528:	bcc	165bc <__assert_fail@plt+0x4e68>
   1652c:	umull	r4, r5, r1, r2
   16530:	mov	sl, r4
   16534:	mov	fp, r5
   16538:	umull	r4, r5, r1, r3
   1653c:	strd	sl, [sp, #88]	; 0x58
   16540:	umlal	sl, fp, r0, r3
   16544:	strd	sl, [sp, #24]
   16548:	umull	r2, r3, r2, r0
   1654c:	mov	r2, r3
   16550:	mov	r3, #0
   16554:	ldrd	sl, [sp, #24]
   16558:	adds	r2, r2, sl
   1655c:	str	r2, [sp, #48]	; 0x30
   16560:	adc	r3, r3, fp
   16564:	str	r3, [sp, #52]	; 0x34
   16568:	ldrd	sl, [sp, #88]	; 0x58
   1656c:	ldrd	r2, [sp, #48]	; 0x30
   16570:	cmp	fp, r3
   16574:	cmpeq	sl, r2
   16578:	bls	16584 <__assert_fail@plt+0x4e30>
   1657c:	adds	r4, r4, #0
   16580:	adc	r5, r5, #1
   16584:	ldr	r2, [sp, #52]	; 0x34
   16588:	mov	r3, #0
   1658c:	ldrd	sl, [sp, #64]	; 0x40
   16590:	subs	r2, sl, r2
   16594:	sbc	r3, fp, r3
   16598:	subs	r2, r2, r4
   1659c:	sbc	r3, r3, r5
   165a0:	mul	lr, r2, lr
   165a4:	mla	lr, ip, r3, lr
   165a8:	umull	r2, r3, r2, ip
   165ac:	add	r3, lr, r3
   165b0:	strd	r2, [sp, #152]	; 0x98
   165b4:	strd	r0, [sp, #144]	; 0x90
   165b8:	b	16410 <__assert_fail@plt+0x4cbc>
   165bc:	strd	r0, [sp, #144]	; 0x90
   165c0:	mov	r3, #0
   165c4:	str	r3, [sp, #152]	; 0x98
   165c8:	str	r3, [sp, #156]	; 0x9c
   165cc:	b	16410 <__assert_fail@plt+0x4cbc>
   165d0:	ldrd	r0, [sp, #168]	; 0xa8
   165d4:	add	r3, sp, #456	; 0x1c8
   165d8:	ldrd	r2, [r3]
   165dc:	cmp	r1, r3
   165e0:	cmpeq	r0, r2
   165e4:	movne	r2, #1
   165e8:	moveq	r2, #0
   165ec:	ldrb	r3, [sp, #426]	; 0x1aa
   165f0:	cmp	r3, r9
   165f4:	movls	r3, #0
   165f8:	andhi	r3, r2, #1
   165fc:	cmp	r3, #0
   16600:	bne	16460 <__assert_fail@plt+0x4d0c>
   16604:	ldrd	sl, [sp, #120]	; 0x78
   16608:	cmp	r2, #0
   1660c:	bne	167a4 <__assert_fail@plt+0x5050>
   16610:	ldr	r1, [sp, #56]	; 0x38
   16614:	ldrb	r2, [r1], #1
   16618:	mov	r3, #0
   1661c:	str	r1, [sp, #56]	; 0x38
   16620:	ldr	r1, [sp, #32]
   16624:	adds	r1, r1, r2
   16628:	str	r1, [sp, #32]
   1662c:	ldr	r1, [sp, #36]	; 0x24
   16630:	adc	r3, r1, r3
   16634:	str	r3, [sp, #36]	; 0x24
   16638:	ldrd	r2, [sp, #32]
   1663c:	cmp	fp, r3
   16640:	cmpeq	sl, r2
   16644:	bhi	16700 <__assert_fail@plt+0x4fac>
   16648:	mov	r1, r2
   1664c:	mov	r0, r3
   16650:	mov	r7, #128	; 0x80
   16654:	mov	r2, #0
   16658:	mov	r3, #0
   1665c:	mov	ip, #0
   16660:	str	r7, [sp, #24]
   16664:	ldrd	r4, [sp, #72]	; 0x48
   16668:	b	166b0 <__assert_fail@plt+0x4f5c>
   1666c:	cmp	r5, r9
   16670:	cmpeq	r4, r8
   16674:	movhi	lr, #1
   16678:	movls	lr, #0
   1667c:	mov	r1, #0
   16680:	str	r1, [sp, #16]
   16684:	subs	r1, r8, r4
   16688:	sbc	r0, r9, r5
   1668c:	subs	r7, r2, sl
   16690:	sbc	r6, r3, fp
   16694:	subs	r2, r7, lr
   16698:	mov	lr, #0
   1669c:	sbc	r3, r6, lr
   166a0:	add	ip, ip, #1
   166a4:	ldr	lr, [sp, #24]
   166a8:	cmp	lr, ip
   166ac:	beq	16714 <__assert_fail@plt+0x4fc0>
   166b0:	adds	r6, r2, r2
   166b4:	adc	lr, r3, r3
   166b8:	orr	r2, r6, r0, lsr #31
   166bc:	mov	r3, lr
   166c0:	adds	r8, r1, r1
   166c4:	adc	r9, r0, r0
   166c8:	mov	r1, r8
   166cc:	mov	r0, r9
   166d0:	cmp	fp, lr
   166d4:	cmpeq	sl, r2
   166d8:	bcc	1666c <__assert_fail@plt+0x4f18>
   166dc:	moveq	lr, #1
   166e0:	movne	lr, #0
   166e4:	cmp	r5, r9
   166e8:	cmpeq	r4, r8
   166ec:	movhi	lr, #0
   166f0:	andls	lr, lr, #1
   166f4:	cmp	lr, #0
   166f8:	beq	166a0 <__assert_fail@plt+0x4f4c>
   166fc:	b	1666c <__assert_fail@plt+0x4f18>
   16700:	ldrd	r2, [sp, #32]
   16704:	mov	r7, #64	; 0x40
   16708:	mov	r1, #0
   1670c:	mov	r0, r1
   16710:	b	1665c <__assert_fail@plt+0x4f08>
   16714:	add	ip, sp, #472	; 0x1d8
   16718:	strd	r2, [ip]
   1671c:	str	r1, [sp, #464]	; 0x1d0
   16720:	str	r0, [sp, #468]	; 0x1d4
   16724:	add	r3, sp, #448	; 0x1c0
   16728:	str	r3, [sp, #12]
   1672c:	ldr	r3, [sp, #104]	; 0x68
   16730:	str	r3, [sp, #8]
   16734:	add	r3, sp, #480	; 0x1e0
   16738:	str	r3, [sp, #4]
   1673c:	add	r3, sp, #464	; 0x1d0
   16740:	str	r3, [sp]
   16744:	ldr	r2, [sp, #40]	; 0x28
   16748:	ldr	r3, [sp, #44]	; 0x2c
   1674c:	add	r0, sp, #432	; 0x1b0
   16750:	bl	126f8 <__assert_fail@plt+0xfa4>
   16754:	cmp	r0, #0
   16758:	beq	167ac <__assert_fail@plt+0x5058>
   1675c:	ldr	r3, [sp, #56]	; 0x38
   16760:	ldr	r2, [pc, #144]	; 167f8 <__assert_fail@plt+0x50a4>
   16764:	cmp	r3, r2
   16768:	beq	167d0 <__assert_fail@plt+0x507c>
   1676c:	ldrd	r2, [sp, #184]	; 0xb8
   16770:	orrs	r3, r2, r3
   16774:	bne	162a8 <__assert_fail@plt+0x4b54>
   16778:	ldrb	r3, [sp, #426]	; 0x1aa
   1677c:	cmp	r3, #0
   16780:	beq	167b0 <__assert_fail@plt+0x505c>
   16784:	add	r7, sp, #184	; 0xb8
   16788:	mov	r6, #1
   1678c:	strd	sl, [sp, #120]	; 0x78
   16790:	str	r7, [sp, #16]
   16794:	strd	r8, [sp, #128]	; 0x80
   16798:	mov	r9, r6
   1679c:	ldrd	r6, [sp, #96]	; 0x60
   167a0:	b	16464 <__assert_fail@plt+0x4d10>
   167a4:	str	r2, [sp, #140]	; 0x8c
   167a8:	b	167b0 <__assert_fail@plt+0x505c>
   167ac:	str	r0, [sp, #140]	; 0x8c
   167b0:	ldr	r0, [sp, #140]	; 0x8c
   167b4:	add	sp, sp, #500	; 0x1f4
   167b8:	ldrd	r4, [sp]
   167bc:	ldrd	r6, [sp, #8]
   167c0:	ldrd	r8, [sp, #16]
   167c4:	ldrd	sl, [sp, #24]
   167c8:	add	sp, sp, #32
   167cc:	pop	{pc}		; (ldr pc, [sp], #4)
   167d0:	mov	r2, #5
   167d4:	movw	r1, #8032	; 0x1f60
   167d8:	movt	r1, #2
   167dc:	mov	r0, #0
   167e0:	bl	11430 <dcgettext@plt>
   167e4:	mov	r2, r0
   167e8:	mov	r1, #0
   167ec:	mov	r0, r1
   167f0:	bl	11520 <error@plt>
   167f4:	bl	11748 <abort@plt>
   167f8:	andeq	pc, r1, r4, lsl #1
   167fc:	mov	r3, #0
   16800:	str	r3, [r1]
   16804:	str	r3, [r1, #4]
   16808:	str	r3, [r1, #8]
   1680c:	ldr	r3, [r0, #4]
   16810:	cmp	r3, #0
   16814:	bxeq	lr
   16818:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1681c:	strd	r6, [sp, #8]
   16820:	strd	r8, [sp, #16]
   16824:	str	lr, [sp, #24]
   16828:	sub	sp, sp, #28
   1682c:	mov	r7, r1
   16830:	mov	r4, r0
   16834:	movw	r3, #12780	; 0x31ec
   16838:	movt	r3, #3
   1683c:	ldrb	r3, [r3, #8]
   16840:	cmp	r3, #0
   16844:	bne	168b8 <__assert_fail@plt+0x5164>
   16848:	mov	r0, sp
   1684c:	bl	11718 <__gmpz_init@plt>
   16850:	mov	r1, #0
   16854:	mov	r0, r4
   16858:	bl	11364 <__gmpz_scan1@plt>
   1685c:	mov	r5, r0
   16860:	mov	r2, r0
   16864:	mov	r1, r4
   16868:	mov	r0, r4
   1686c:	bl	114f0 <__gmpz_fdiv_q_2exp@plt>
   16870:	cmp	r5, #0
   16874:	beq	168a4 <__assert_fail@plt+0x5150>
   16878:	mov	r6, #2
   1687c:	mov	r1, r6
   16880:	add	r0, sp, #12
   16884:	bl	11694 <__gmpz_init_set_ui@plt>
   16888:	add	r1, sp, #12
   1688c:	mov	r0, r7
   16890:	bl	13160 <__assert_fail@plt+0x1a0c>
   16894:	add	r0, sp, #12
   16898:	bl	115d4 <__gmpz_clear@plt>
   1689c:	subs	r5, r5, #1
   168a0:	bne	1687c <__assert_fail@plt+0x5128>
   168a4:	mov	r6, #1
   168a8:	mov	r5, #3
   168ac:	movw	r9, #60904	; 0xede8
   168b0:	movt	r9, #1
   168b4:	b	16914 <__assert_fail@plt+0x51c0>
   168b8:	movw	r3, #12760	; 0x31d8
   168bc:	movt	r3, #3
   168c0:	ldr	r3, [r3]
   168c4:	mov	r2, #17
   168c8:	mov	r1, #1
   168cc:	movw	r0, #8104	; 0x1fa8
   168d0:	movt	r0, #2
   168d4:	bl	114d8 <fwrite@plt>
   168d8:	b	16848 <__assert_fail@plt+0x50f4>
   168dc:	mov	r2, r5
   168e0:	mov	r1, r4
   168e4:	mov	r0, r4
   168e8:	bl	11490 <__gmpz_tdiv_q_ui@plt>
   168ec:	mov	r1, r5
   168f0:	add	r0, sp, #12
   168f4:	bl	11694 <__gmpz_init_set_ui@plt>
   168f8:	add	r1, sp, #12
   168fc:	mov	r0, r7
   16900:	bl	13160 <__assert_fail@plt+0x1a0c>
   16904:	add	r0, sp, #12
   16908:	bl	115d4 <__gmpz_clear@plt>
   1690c:	cmp	r6, #668	; 0x29c
   16910:	bhi	16950 <__assert_fail@plt+0x51fc>
   16914:	mov	r1, r5
   16918:	mov	r0, r4
   1691c:	bl	115c8 <__gmpz_divisible_ui_p@plt>
   16920:	cmp	r0, #0
   16924:	bne	168dc <__assert_fail@plt+0x5188>
   16928:	add	r8, r6, #1
   1692c:	ldrb	r3, [r9, r6]
   16930:	add	r5, r5, r3
   16934:	mul	r1, r5, r5
   16938:	mov	r0, r4
   1693c:	bl	1170c <__gmpz_cmp_ui@plt>
   16940:	cmp	r0, #0
   16944:	blt	16950 <__assert_fail@plt+0x51fc>
   16948:	mov	r6, r8
   1694c:	b	1690c <__assert_fail@plt+0x51b8>
   16950:	mov	r0, sp
   16954:	bl	115d4 <__gmpz_clear@plt>
   16958:	mov	r1, #1
   1695c:	mov	r0, r4
   16960:	bl	1170c <__gmpz_cmp_ui@plt>
   16964:	cmp	r0, #0
   16968:	beq	1699c <__assert_fail@plt+0x5248>
   1696c:	movw	r3, #12780	; 0x31ec
   16970:	movt	r3, #3
   16974:	ldrb	r3, [r3, #8]
   16978:	cmp	r3, #0
   1697c:	bne	169b4 <__assert_fail@plt+0x5260>
   16980:	mov	r0, r4
   16984:	bl	17008 <__assert_fail@plt+0x58b4>
   16988:	cmp	r0, #0
   1698c:	beq	169d8 <__assert_fail@plt+0x5284>
   16990:	mov	r1, r4
   16994:	mov	r0, r7
   16998:	bl	13160 <__assert_fail@plt+0x1a0c>
   1699c:	add	sp, sp, #28
   169a0:	ldrd	r4, [sp]
   169a4:	ldrd	r6, [sp, #8]
   169a8:	ldrd	r8, [sp, #16]
   169ac:	add	sp, sp, #24
   169b0:	pop	{pc}		; (ldr pc, [sp], #4)
   169b4:	movw	r3, #12760	; 0x31d8
   169b8:	movt	r3, #3
   169bc:	ldr	r3, [r3]
   169c0:	mov	r2, #19
   169c4:	mov	r1, #1
   169c8:	movw	r0, #8124	; 0x1fbc
   169cc:	movt	r0, #2
   169d0:	bl	114d8 <fwrite@plt>
   169d4:	b	16980 <__assert_fail@plt+0x522c>
   169d8:	mov	r2, r7
   169dc:	mov	r1, #1
   169e0:	mov	r0, r4
   169e4:	bl	17220 <__assert_fail@plt+0x5acc>
   169e8:	b	1699c <__assert_fail@plt+0x5248>
   169ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   169f0:	strd	r6, [sp, #8]
   169f4:	strd	r8, [sp, #16]
   169f8:	strd	sl, [sp, #24]
   169fc:	str	lr, [sp, #32]
   16a00:	sub	sp, sp, #316	; 0x13c
   16a04:	mov	r4, r0
   16a08:	ldrb	r3, [r0]
   16a0c:	cmp	r3, #32
   16a10:	bne	16a94 <__assert_fail@plt+0x5340>
   16a14:	mov	r2, r0
   16a18:	ldrb	r3, [r2, #1]!
   16a1c:	cmp	r3, #32
   16a20:	beq	16a18 <__assert_fail@plt+0x52c4>
   16a24:	cmp	r3, #43	; 0x2b
   16a28:	movne	sl, r2
   16a2c:	addeq	sl, r2, #1
   16a30:	mov	r3, sl
   16a34:	mov	r1, #4
   16a38:	mov	r0, #0
   16a3c:	ldrb	fp, [r3], #1
   16a40:	cmp	fp, #0
   16a44:	beq	16b34 <__assert_fail@plt+0x53e0>
   16a48:	mov	r1, r0
   16a4c:	sub	fp, fp, #48	; 0x30
   16a50:	cmp	fp, #9
   16a54:	bls	16a3c <__assert_fail@plt+0x52e8>
   16a58:	mov	r2, #5
   16a5c:	movw	r1, #8184	; 0x1ff8
   16a60:	movt	r1, #2
   16a64:	mov	r0, #0
   16a68:	bl	11430 <dcgettext@plt>
   16a6c:	mov	r5, r0
   16a70:	mov	r0, r4
   16a74:	bl	1adf8 <__assert_fail@plt+0x96a4>
   16a78:	mov	r3, r0
   16a7c:	mov	r2, r5
   16a80:	mov	r1, #0
   16a84:	mov	r0, r1
   16a88:	bl	11520 <error@plt>
   16a8c:	mov	r0, #0
   16a90:	b	16fb8 <__assert_fail@plt+0x5864>
   16a94:	mov	r2, r0
   16a98:	b	16a24 <__assert_fail@plt+0x52d0>
   16a9c:	ldr	sl, [sp, #24]
   16aa0:	ldr	fp, [sp, #28]
   16aa4:	movw	r3, #12780	; 0x31ec
   16aa8:	movt	r3, #3
   16aac:	ldrb	r3, [r3, #8]
   16ab0:	cmp	r3, #0
   16ab4:	bne	16eb0 <__assert_fail@plt+0x575c>
   16ab8:	mov	r2, #10
   16abc:	mov	r1, sl
   16ac0:	add	r0, sp, #300	; 0x12c
   16ac4:	bl	116f4 <__gmpz_init_set_str@plt>
   16ac8:	movw	r4, #12772	; 0x31e4
   16acc:	movt	r4, #3
   16ad0:	add	r2, sp, #300	; 0x12c
   16ad4:	mov	r1, #10
   16ad8:	ldr	r0, [r4]
   16adc:	bl	114b4 <__gmpz_out_str@plt>
   16ae0:	ldr	r0, [r4]
   16ae4:	ldr	r3, [r0, #20]
   16ae8:	ldr	r2, [r0, #24]
   16aec:	cmp	r3, r2
   16af0:	addcc	r2, r3, #1
   16af4:	strcc	r2, [r0, #20]
   16af8:	movcc	r2, #58	; 0x3a
   16afc:	strbcc	r2, [r3]
   16b00:	bcs	16ed4 <__assert_fail@plt+0x5780>
   16b04:	add	r1, sp, #288	; 0x120
   16b08:	add	r0, sp, #300	; 0x12c
   16b0c:	bl	167fc <__assert_fail@plt+0x50a8>
   16b10:	ldr	r3, [sp, #296]	; 0x128
   16b14:	cmp	r3, #0
   16b18:	beq	16f68 <__assert_fail@plt+0x5814>
   16b1c:	mov	r6, fp
   16b20:	mov	sl, fp
   16b24:	movw	r5, #12772	; 0x31e4
   16b28:	movt	r5, #3
   16b2c:	mov	r9, #32
   16b30:	b	16f00 <__assert_fail@plt+0x57ac>
   16b34:	cmp	r1, #0
   16b38:	bne	16fe0 <__assert_fail@plt+0x588c>
   16b3c:	mov	lr, sl
   16b40:	ldrb	r6, [lr], #1
   16b44:	cmp	r6, #0
   16b48:	beq	16ce8 <__assert_fail@plt+0x5594>
   16b4c:	sub	r6, r6, #48	; 0x30
   16b50:	mov	r4, #0
   16b54:	mov	r5, #0
   16b58:	mov	r0, r4
   16b5c:	mov	r1, r5
   16b60:	str	sl, [sp, #24]
   16b64:	str	fp, [sp, #28]
   16b68:	lsl	r2, r1, #2
   16b6c:	lsl	r3, r0, #2
   16b70:	orr	ip, r2, r0, lsr #30
   16b74:	adds	r3, r3, r0
   16b78:	adc	ip, ip, r1
   16b7c:	adds	r3, r3, r3
   16b80:	adc	ip, ip, ip
   16b84:	lsr	r2, r5, #31
   16b88:	add	r2, r2, r5, lsr #29
   16b8c:	str	r2, [sp, #8]
   16b90:	lsl	r2, r5, #2
   16b94:	str	r2, [sp, #20]
   16b98:	lsl	r2, r4, #2
   16b9c:	ldr	r7, [sp, #20]
   16ba0:	orr	r7, r7, r4, lsr #30
   16ba4:	adds	r2, r2, r4
   16ba8:	adc	r7, r7, r5
   16bac:	adds	r8, r2, r2
   16bb0:	adc	r9, r7, r7
   16bb4:	adds	sl, r4, r4
   16bb8:	adc	fp, r5, r5
   16bbc:	cmp	r9, fp
   16bc0:	cmpeq	r8, sl
   16bc4:	movcc	r2, #1
   16bc8:	movcs	r2, #0
   16bcc:	ldr	r7, [sp, #8]
   16bd0:	add	r2, r2, r7
   16bd4:	mov	r7, #0
   16bd8:	adds	r4, r8, r6
   16bdc:	adc	r5, r9, r7
   16be0:	cmp	r7, r5
   16be4:	cmpeq	r6, r4
   16be8:	movhi	r6, #1
   16bec:	movls	r6, #0
   16bf0:	add	r6, r6, r2
   16bf4:	mov	r7, #0
   16bf8:	adds	r0, r3, r6
   16bfc:	adc	r1, ip, r7
   16c00:	cmp	r7, r1
   16c04:	cmpeq	r6, r0
   16c08:	bhi	16a9c <__assert_fail@plt+0x5348>
   16c0c:	ldrb	r6, [lr], #1
   16c10:	cmp	r6, #0
   16c14:	beq	16c3c <__assert_fail@plt+0x54e8>
   16c18:	sub	r6, r6, #48	; 0x30
   16c1c:	add	r3, pc, #988	; 0x3dc
   16c20:	ldrd	r2, [r3]
   16c24:	cmp	r1, r3
   16c28:	cmpeq	r0, r2
   16c2c:	bls	16b68 <__assert_fail@plt+0x5414>
   16c30:	ldr	sl, [sp, #24]
   16c34:	ldr	fp, [sp, #28]
   16c38:	b	16aa4 <__assert_fail@plt+0x5350>
   16c3c:	ldr	sl, [sp, #24]
   16c40:	ldr	fp, [sp, #28]
   16c44:	mov	r6, r0
   16c48:	bic	r7, r1, #-2147483648	; 0x80000000
   16c4c:	cmp	r7, r1
   16c50:	cmpeq	r0, r0
   16c54:	bne	16aa4 <__assert_fail@plt+0x5350>
   16c58:	movw	r3, #12780	; 0x31ec
   16c5c:	movt	r3, #3
   16c60:	ldrb	r3, [r3, #8]
   16c64:	cmp	r3, #0
   16c68:	bne	16cfc <__assert_fail@plt+0x55a8>
   16c6c:	mov	r2, r4
   16c70:	mov	r3, r5
   16c74:	mov	r0, r6
   16c78:	mov	r1, r7
   16c7c:	bl	12ef0 <__assert_fail@plt+0x179c>
   16c80:	movw	r3, #12780	; 0x31ec
   16c84:	movt	r3, #3
   16c88:	ldr	r2, [r3, #4]
   16c8c:	add	r1, r2, #1
   16c90:	str	r1, [r3, #4]
   16c94:	mov	r3, #58	; 0x3a
   16c98:	strb	r3, [r2]
   16c9c:	add	r3, sp, #32
   16ca0:	str	r3, [sp]
   16ca4:	mov	r2, r4
   16ca8:	mov	r3, r5
   16cac:	mov	r0, r6
   16cb0:	mov	r1, r7
   16cb4:	bl	15540 <__assert_fail@plt+0x3dec>
   16cb8:	ldrb	r3, [sp, #282]	; 0x11a
   16cbc:	cmp	r3, #0
   16cc0:	beq	16d90 <__assert_fail@plt+0x563c>
   16cc4:	add	r6, sp, #255	; 0xff
   16cc8:	add	r8, sp, #48	; 0x30
   16ccc:	movw	r5, #12780	; 0x31ec
   16cd0:	movt	r5, #3
   16cd4:	add	r3, sp, #312	; 0x138
   16cd8:	rsb	r3, r3, #57	; 0x39
   16cdc:	str	r3, [sp, #8]
   16ce0:	str	fp, [sp, #20]
   16ce4:	b	16d78 <__assert_fail@plt+0x5624>
   16ce8:	mov	r4, #0
   16cec:	mov	r5, #0
   16cf0:	mov	r6, r4
   16cf4:	mov	r7, r5
   16cf8:	b	16c58 <__assert_fail@plt+0x5504>
   16cfc:	movw	r3, #12760	; 0x31d8
   16d00:	movt	r3, #3
   16d04:	ldr	r3, [r3]
   16d08:	mov	r2, #36	; 0x24
   16d0c:	mov	r1, #1
   16d10:	movw	r0, #8144	; 0x1fd0
   16d14:	movt	r0, #2
   16d18:	bl	114d8 <fwrite@plt>
   16d1c:	b	16c6c <__assert_fail@plt+0x5518>
   16d20:	ldr	r4, [sp, #20]
   16d24:	mov	r9, #32
   16d28:	mov	sl, #0
   16d2c:	mov	fp, #0
   16d30:	ldr	r3, [r5, #4]
   16d34:	add	r2, r3, #1
   16d38:	str	r2, [r5, #4]
   16d3c:	strb	r9, [r3]
   16d40:	ldrd	r2, [r8]
   16d44:	mov	r0, sl
   16d48:	mov	r1, fp
   16d4c:	bl	12ef0 <__assert_fail@plt+0x179c>
   16d50:	add	r4, r4, #1
   16d54:	ldrb	r3, [r7]
   16d58:	cmp	r4, r3
   16d5c:	bcc	16d30 <__assert_fail@plt+0x55dc>
   16d60:	add	r8, r8, #8
   16d64:	ldr	r3, [sp, #8]
   16d68:	add	r3, r3, r6
   16d6c:	ldrb	r2, [sp, #282]	; 0x11a
   16d70:	cmp	r3, r2
   16d74:	bcs	16d90 <__assert_fail@plt+0x563c>
   16d78:	add	r6, r6, #1
   16d7c:	mov	r7, r6
   16d80:	ldrb	r3, [r6]
   16d84:	cmp	r3, #0
   16d88:	bne	16d20 <__assert_fail@plt+0x55cc>
   16d8c:	b	16d60 <__assert_fail@plt+0x560c>
   16d90:	ldrd	r2, [sp, #40]	; 0x28
   16d94:	orrs	r3, r2, r3
   16d98:	bne	16dfc <__assert_fail@plt+0x56a8>
   16d9c:	movw	r3, #12780	; 0x31ec
   16da0:	movt	r3, #3
   16da4:	ldr	r2, [r3, #4]
   16da8:	add	r5, r2, #1
   16dac:	str	r5, [r3, #4]
   16db0:	mov	r1, #10
   16db4:	strb	r1, [r2]
   16db8:	ldr	r4, [r3]
   16dbc:	movw	r3, #12664	; 0x3178
   16dc0:	movt	r3, #3
   16dc4:	ldr	r3, [r3]
   16dc8:	cmn	r3, #1
   16dcc:	beq	16e28 <__assert_fail@plt+0x56d4>
   16dd0:	movw	r3, #12664	; 0x3178
   16dd4:	movt	r3, #3
   16dd8:	ldr	r3, [r3]
   16ddc:	cmp	r3, #0
   16de0:	bne	16e60 <__assert_fail@plt+0x570c>
   16de4:	sub	r3, r5, r4
   16de8:	cmp	r3, #512	; 0x200
   16dec:	addcs	r4, r4, #512	; 0x200
   16df0:	bcs	16e6c <__assert_fail@plt+0x5718>
   16df4:	mov	r0, #1
   16df8:	b	16fb8 <__assert_fail@plt+0x5864>
   16dfc:	movw	r3, #12780	; 0x31ec
   16e00:	movt	r3, #3
   16e04:	ldr	r2, [r3, #4]
   16e08:	add	r1, r2, #1
   16e0c:	str	r1, [r3, #4]
   16e10:	mov	r3, #32
   16e14:	strb	r3, [r2]
   16e18:	ldrd	r2, [sp, #32]
   16e1c:	ldrd	r0, [sp, #40]	; 0x28
   16e20:	bl	12ef0 <__assert_fail@plt+0x179c>
   16e24:	b	16d9c <__assert_fail@plt+0x5648>
   16e28:	mov	r0, #0
   16e2c:	bl	11730 <isatty@plt>
   16e30:	cmp	r0, #0
   16e34:	movne	r0, #1
   16e38:	beq	16e4c <__assert_fail@plt+0x56f8>
   16e3c:	movw	r3, #12664	; 0x3178
   16e40:	movt	r3, #3
   16e44:	str	r0, [r3]
   16e48:	b	16dd0 <__assert_fail@plt+0x567c>
   16e4c:	mov	r0, #1
   16e50:	bl	11730 <isatty@plt>
   16e54:	adds	r0, r0, #0
   16e58:	movne	r0, #1
   16e5c:	b	16e3c <__assert_fail@plt+0x56e8>
   16e60:	bl	11acc <__assert_fail@plt+0x378>
   16e64:	b	16df4 <__assert_fail@plt+0x56a0>
   16e68:	mov	r4, r2
   16e6c:	sub	r2, r4, #1
   16e70:	ldrb	r3, [r4, #-1]
   16e74:	cmp	r3, #10
   16e78:	bne	16e68 <__assert_fail@plt+0x5714>
   16e7c:	movw	r6, #12780	; 0x31ec
   16e80:	movt	r6, #3
   16e84:	str	r4, [r6, #4]
   16e88:	bl	11acc <__assert_fail@plt+0x378>
   16e8c:	ldr	r7, [r6]
   16e90:	sub	r5, r5, r4
   16e94:	mov	r2, r5
   16e98:	mov	r1, r4
   16e9c:	mov	r0, r7
   16ea0:	bl	113f4 <memcpy@plt>
   16ea4:	add	r5, r7, r5
   16ea8:	str	r5, [r6, #4]
   16eac:	b	16df4 <__assert_fail@plt+0x56a0>
   16eb0:	movw	r3, #12760	; 0x31d8
   16eb4:	movt	r3, #3
   16eb8:	ldr	r3, [r3]
   16ebc:	mov	r2, #39	; 0x27
   16ec0:	mov	r1, #1
   16ec4:	movw	r0, #8220	; 0x201c
   16ec8:	movt	r0, #2
   16ecc:	bl	114d8 <fwrite@plt>
   16ed0:	b	16ab8 <__assert_fail@plt+0x5364>
   16ed4:	mov	r1, #58	; 0x3a
   16ed8:	bl	116b8 <__overflow@plt>
   16edc:	b	16b04 <__assert_fail@plt+0x53b0>
   16ee0:	mov	r1, r9
   16ee4:	bl	116b8 <__overflow@plt>
   16ee8:	b	16f3c <__assert_fail@plt+0x57e8>
   16eec:	add	sl, sl, #1
   16ef0:	add	r6, r6, #12
   16ef4:	ldr	r3, [sp, #296]	; 0x128
   16ef8:	cmp	r3, sl
   16efc:	bls	16f68 <__assert_fail@plt+0x5814>
   16f00:	lsl	r7, sl, #2
   16f04:	ldr	r3, [sp, #292]	; 0x124
   16f08:	ldr	r3, [r3, sl, lsl #2]
   16f0c:	cmp	r3, #0
   16f10:	movne	r4, fp
   16f14:	movne	r8, #10
   16f18:	beq	16eec <__assert_fail@plt+0x5798>
   16f1c:	ldr	r0, [r5]
   16f20:	ldr	r3, [r0, #20]
   16f24:	ldr	r2, [r0, #24]
   16f28:	cmp	r3, r2
   16f2c:	addcc	r2, r3, #1
   16f30:	strcc	r2, [r0, #20]
   16f34:	strbcc	r9, [r3]
   16f38:	bcs	16ee0 <__assert_fail@plt+0x578c>
   16f3c:	ldr	r2, [sp, #288]	; 0x120
   16f40:	add	r2, r2, r6
   16f44:	mov	r1, r8
   16f48:	ldr	r0, [r5]
   16f4c:	bl	114b4 <__gmpz_out_str@plt>
   16f50:	add	r4, r4, #1
   16f54:	ldr	r3, [sp, #292]	; 0x124
   16f58:	ldr	r3, [r3, r7]
   16f5c:	cmp	r3, r4
   16f60:	bhi	16f1c <__assert_fail@plt+0x57c8>
   16f64:	b	16eec <__assert_fail@plt+0x5798>
   16f68:	add	r0, sp, #288	; 0x120
   16f6c:	bl	11b4c <__assert_fail@plt+0x3f8>
   16f70:	add	r0, sp, #300	; 0x12c
   16f74:	bl	115d4 <__gmpz_clear@plt>
   16f78:	movw	r3, #12772	; 0x31e4
   16f7c:	movt	r3, #3
   16f80:	ldr	r0, [r3]
   16f84:	ldr	r3, [r0, #20]
   16f88:	ldr	r2, [r0, #24]
   16f8c:	cmp	r3, r2
   16f90:	addcc	r2, r3, #1
   16f94:	strcc	r2, [r0, #20]
   16f98:	movcc	r2, #10
   16f9c:	strbcc	r2, [r3]
   16fa0:	bcs	16fd4 <__assert_fail@plt+0x5880>
   16fa4:	movw	r3, #12772	; 0x31e4
   16fa8:	movt	r3, #3
   16fac:	ldr	r0, [r3]
   16fb0:	bl	114c0 <fflush_unlocked@plt>
   16fb4:	mov	r0, #1
   16fb8:	add	sp, sp, #316	; 0x13c
   16fbc:	ldrd	r4, [sp]
   16fc0:	ldrd	r6, [sp, #8]
   16fc4:	ldrd	r8, [sp, #16]
   16fc8:	ldrd	sl, [sp, #24]
   16fcc:	add	sp, sp, #32
   16fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd4:	mov	r1, #10
   16fd8:	bl	116b8 <__overflow@plt>
   16fdc:	b	16fa4 <__assert_fail@plt+0x5850>
   16fe0:	cmp	r1, #0
   16fe4:	moveq	r4, #0
   16fe8:	moveq	r5, #0
   16fec:	moveq	r6, r4
   16ff0:	moveq	r7, r5
   16ff4:	beq	16c58 <__assert_fail@plt+0x5504>
   16ff8:	b	16a58 <__assert_fail@plt+0x5304>
   16ffc:	nop	{0}
   17000:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   17004:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   17008:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1700c:	strd	r6, [sp, #8]
   17010:	strd	r8, [sp, #16]
   17014:	str	sl, [sp, #24]
   17018:	str	lr, [sp, #28]
   1701c:	sub	sp, sp, #72	; 0x48
   17020:	mov	r6, r0
   17024:	mov	r1, #1
   17028:	bl	1170c <__gmpz_cmp_ui@plt>
   1702c:	cmp	r0, #0
   17030:	ble	17210 <__assert_fail@plt+0x5abc>
   17034:	movw	r1, #60793	; 0xed79
   17038:	movt	r1, #381	; 0x17d
   1703c:	mov	r0, r6
   17040:	bl	1170c <__gmpz_cmp_ui@plt>
   17044:	cmp	r0, #0
   17048:	blt	17218 <__assert_fail@plt+0x5ac4>
   1704c:	add	r4, sp, #60	; 0x3c
   17050:	mov	r5, #0
   17054:	str	r5, [sp]
   17058:	add	r3, sp, #24
   1705c:	add	r2, sp, #36	; 0x24
   17060:	add	r1, sp, #48	; 0x30
   17064:	mov	r0, r4
   17068:	bl	11460 <__gmpz_inits@plt>
   1706c:	mov	r2, #1
   17070:	mov	r1, r6
   17074:	add	r0, sp, #36	; 0x24
   17078:	bl	113a0 <__gmpz_sub_ui@plt>
   1707c:	mov	r1, r5
   17080:	add	r0, sp, #36	; 0x24
   17084:	bl	11364 <__gmpz_scan1@plt>
   17088:	mov	r8, r0
   1708c:	mov	r2, r0
   17090:	add	r1, sp, #36	; 0x24
   17094:	mov	r0, r4
   17098:	bl	1161c <__gmpz_tdiv_q_2exp@plt>
   1709c:	mov	r1, #2
   170a0:	add	r0, sp, #48	; 0x30
   170a4:	bl	113d0 <__gmpz_set_ui@plt>
   170a8:	str	r8, [sp, #4]
   170ac:	str	r4, [sp]
   170b0:	add	r3, sp, #24
   170b4:	add	r2, sp, #48	; 0x30
   170b8:	add	r1, sp, #36	; 0x24
   170bc:	mov	r0, r6
   170c0:	bl	13068 <__assert_fail@plt+0x1914>
   170c4:	subs	sl, r0, #0
   170c8:	beq	171d4 <__assert_fail@plt+0x5a80>
   170cc:	add	r1, sp, #36	; 0x24
   170d0:	add	r0, sp, #24
   170d4:	bl	1146c <__gmpz_set@plt>
   170d8:	add	r1, sp, #12
   170dc:	add	r0, sp, #24
   170e0:	bl	167fc <__assert_fail@plt+0x50a8>
   170e4:	movw	r7, #60904	; 0xede8
   170e8:	movt	r7, #1
   170ec:	add	r9, r7, #668	; 0x29c
   170f0:	b	1713c <__assert_fail@plt+0x59e8>
   170f4:	cmp	r0, #0
   170f8:	bne	171cc <__assert_fail@plt+0x5a78>
   170fc:	ldrb	r2, [r7], #1
   17100:	add	r1, sp, #48	; 0x30
   17104:	mov	r0, r1
   17108:	bl	11568 <__gmpz_add_ui@plt>
   1710c:	str	r8, [sp, #4]
   17110:	add	r3, sp, #60	; 0x3c
   17114:	str	r3, [sp]
   17118:	add	r3, sp, #24
   1711c:	add	r2, sp, #48	; 0x30
   17120:	add	r1, sp, #36	; 0x24
   17124:	mov	r0, r6
   17128:	bl	13068 <__assert_fail@plt+0x1914>
   1712c:	cmp	r0, #0
   17130:	beq	171c8 <__assert_fail@plt+0x5a74>
   17134:	cmp	r9, r7
   17138:	beq	171a0 <__assert_fail@plt+0x5a4c>
   1713c:	ldr	r3, [sp, #20]
   17140:	cmp	r3, #0
   17144:	beq	171cc <__assert_fail@plt+0x5a78>
   17148:	mov	r4, #0
   1714c:	mov	r5, r4
   17150:	ldr	r2, [sp, #12]
   17154:	add	r2, r2, r4
   17158:	add	r1, sp, #36	; 0x24
   1715c:	add	r0, sp, #24
   17160:	bl	11454 <__gmpz_divexact@plt>
   17164:	mov	r3, r6
   17168:	add	r2, sp, #24
   1716c:	add	r1, sp, #48	; 0x30
   17170:	mov	r0, r2
   17174:	bl	1143c <__gmpz_powm@plt>
   17178:	mov	r1, #1
   1717c:	add	r0, sp, #24
   17180:	bl	1170c <__gmpz_cmp_ui@plt>
   17184:	add	r5, r5, #1
   17188:	add	r4, r4, #12
   1718c:	ldr	r3, [sp, #20]
   17190:	cmp	r0, #0
   17194:	cmpne	r3, r5
   17198:	bhi	17150 <__assert_fail@plt+0x59fc>
   1719c:	b	170f4 <__assert_fail@plt+0x59a0>
   171a0:	mov	r2, #5
   171a4:	movw	r1, #8032	; 0x1f60
   171a8:	movt	r1, #2
   171ac:	mov	r0, #0
   171b0:	bl	11430 <dcgettext@plt>
   171b4:	mov	r2, r0
   171b8:	mov	r1, #0
   171bc:	mov	r0, r1
   171c0:	bl	11520 <error@plt>
   171c4:	bl	11748 <abort@plt>
   171c8:	mov	sl, r0
   171cc:	add	r0, sp, #12
   171d0:	bl	11b4c <__assert_fail@plt+0x3f8>
   171d4:	mov	r3, #0
   171d8:	str	r3, [sp]
   171dc:	add	r3, sp, #24
   171e0:	add	r2, sp, #36	; 0x24
   171e4:	add	r1, sp, #48	; 0x30
   171e8:	add	r0, sp, #60	; 0x3c
   171ec:	bl	113ac <__gmpz_clears@plt>
   171f0:	mov	r0, sl
   171f4:	add	sp, sp, #72	; 0x48
   171f8:	ldrd	r4, [sp]
   171fc:	ldrd	r6, [sp, #8]
   17200:	ldrd	r8, [sp, #16]
   17204:	ldr	sl, [sp, #24]
   17208:	add	sp, sp, #28
   1720c:	pop	{pc}		; (ldr pc, [sp], #4)
   17210:	mov	sl, #0
   17214:	b	171f0 <__assert_fail@plt+0x5a9c>
   17218:	mov	sl, #1
   1721c:	b	171f0 <__assert_fail@plt+0x5a9c>
   17220:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17224:	strd	r6, [sp, #8]
   17228:	strd	r8, [sp, #16]
   1722c:	strd	sl, [sp, #24]
   17230:	str	lr, [sp, #32]
   17234:	sub	sp, sp, #116	; 0x74
   17238:	mov	r6, r0
   1723c:	mov	r7, r1
   17240:	str	r2, [sp, #24]
   17244:	movw	r3, #12780	; 0x31ec
   17248:	movt	r3, #3
   1724c:	ldrb	r3, [r3, #8]
   17250:	cmp	r3, #0
   17254:	bne	172d0 <__assert_fail@plt+0x5b7c>
   17258:	mov	r2, #0
   1725c:	add	r1, sp, #40	; 0x28
   17260:	add	r0, sp, #52	; 0x34
   17264:	bl	11460 <__gmpz_inits@plt>
   17268:	mov	r1, #2
   1726c:	add	r0, sp, #76	; 0x4c
   17270:	bl	1155c <__gmpz_init_set_si@plt>
   17274:	mov	r1, #2
   17278:	add	r0, sp, #100	; 0x64
   1727c:	bl	1155c <__gmpz_init_set_si@plt>
   17280:	mov	r1, #2
   17284:	add	r0, sp, #88	; 0x58
   17288:	bl	1155c <__gmpz_init_set_si@plt>
   1728c:	mov	r1, #1
   17290:	add	r0, sp, #64	; 0x40
   17294:	bl	11694 <__gmpz_init_set_ui@plt>
   17298:	mov	sl, #1
   1729c:	mov	fp, #0
   172a0:	mov	r4, sl
   172a4:	mov	r5, fp
   172a8:	movw	r3, #12780	; 0x31ec
   172ac:	movt	r3, #3
   172b0:	str	r3, [sp, #28]
   172b4:	movw	r3, #12760	; 0x31d8
   172b8:	movt	r3, #3
   172bc:	str	r3, [sp, #32]
   172c0:	movw	r3, #8284	; 0x205c
   172c4:	movt	r3, #2
   172c8:	str	r3, [sp, #36]	; 0x24
   172cc:	b	17518 <__assert_fail@plt+0x5dc4>
   172d0:	movw	r0, #12760	; 0x31d8
   172d4:	movt	r0, #3
   172d8:	mov	r3, r1
   172dc:	movw	r2, #8260	; 0x2044
   172e0:	movt	r2, #2
   172e4:	mov	r1, #1
   172e8:	ldr	r0, [r0]
   172ec:	bl	1164c <__fprintf_chk@plt>
   172f0:	b	17258 <__assert_fail@plt+0x5b04>
   172f4:	subs	r4, r4, #1
   172f8:	sbc	r5, r5, #0
   172fc:	orrs	r3, r4, r5
   17300:	beq	173ac <__assert_fail@plt+0x5c58>
   17304:	add	r2, sp, #100	; 0x64
   17308:	mov	r1, r2
   1730c:	add	r0, sp, #52	; 0x34
   17310:	bl	11484 <__gmpz_mul@plt>
   17314:	mov	r2, r6
   17318:	add	r1, sp, #52	; 0x34
   1731c:	add	r0, sp, #100	; 0x64
   17320:	bl	11688 <__gmpz_mod@plt>
   17324:	mov	r2, r7
   17328:	add	r1, sp, #100	; 0x64
   1732c:	mov	r0, r1
   17330:	bl	11568 <__gmpz_add_ui@plt>
   17334:	add	r2, sp, #100	; 0x64
   17338:	add	r1, sp, #88	; 0x58
   1733c:	add	r0, sp, #52	; 0x34
   17340:	bl	11400 <__gmpz_sub@plt>
   17344:	add	r2, sp, #52	; 0x34
   17348:	add	r1, sp, #64	; 0x40
   1734c:	add	r0, sp, #40	; 0x28
   17350:	bl	11484 <__gmpz_mul@plt>
   17354:	mov	r2, r6
   17358:	add	r1, sp, #40	; 0x28
   1735c:	add	r0, sp, #64	; 0x40
   17360:	bl	11688 <__gmpz_mod@plt>
   17364:	and	r8, r4, #31
   17368:	mov	r9, #0
   1736c:	cmp	r9, #0
   17370:	cmpeq	r8, #1
   17374:	bne	172f4 <__assert_fail@plt+0x5ba0>
   17378:	mov	r2, r6
   1737c:	add	r1, sp, #64	; 0x40
   17380:	add	r0, sp, #52	; 0x34
   17384:	bl	116e8 <__gmpz_gcd@plt>
   17388:	mov	r1, #1
   1738c:	add	r0, sp, #52	; 0x34
   17390:	bl	1170c <__gmpz_cmp_ui@plt>
   17394:	cmp	r0, r9
   17398:	bne	17434 <__assert_fail@plt+0x5ce0>
   1739c:	add	r1, sp, #100	; 0x64
   173a0:	add	r0, sp, #76	; 0x4c
   173a4:	bl	1146c <__gmpz_set@plt>
   173a8:	b	172f4 <__assert_fail@plt+0x5ba0>
   173ac:	add	r1, sp, #100	; 0x64
   173b0:	add	r0, sp, #88	; 0x58
   173b4:	bl	1146c <__gmpz_set@plt>
   173b8:	adds	r3, sl, sl
   173bc:	str	r3, [sp, #16]
   173c0:	adc	r3, fp, fp
   173c4:	str	r3, [sp, #20]
   173c8:	orrs	r3, sl, fp
   173cc:	beq	17414 <__assert_fail@plt+0x5cc0>
   173d0:	add	r2, sp, #100	; 0x64
   173d4:	mov	r1, r2
   173d8:	add	r0, sp, #52	; 0x34
   173dc:	bl	11484 <__gmpz_mul@plt>
   173e0:	mov	r2, r6
   173e4:	add	r1, sp, #52	; 0x34
   173e8:	add	r0, sp, #100	; 0x64
   173ec:	bl	11688 <__gmpz_mod@plt>
   173f0:	mov	r2, r7
   173f4:	add	r1, sp, #100	; 0x64
   173f8:	mov	r0, r1
   173fc:	bl	11568 <__gmpz_add_ui@plt>
   17400:	adds	r4, r4, #1
   17404:	adc	r5, r5, #0
   17408:	cmp	fp, r5
   1740c:	cmpeq	sl, r4
   17410:	bne	173d0 <__assert_fail@plt+0x5c7c>
   17414:	add	r1, sp, #100	; 0x64
   17418:	add	r0, sp, #76	; 0x4c
   1741c:	bl	1146c <__gmpz_set@plt>
   17420:	mov	r4, sl
   17424:	mov	r5, fp
   17428:	ldr	sl, [sp, #16]
   1742c:	ldr	fp, [sp, #20]
   17430:	b	17304 <__assert_fail@plt+0x5bb0>
   17434:	add	r2, sp, #76	; 0x4c
   17438:	mov	r1, r2
   1743c:	add	r0, sp, #52	; 0x34
   17440:	bl	11484 <__gmpz_mul@plt>
   17444:	mov	r2, r6
   17448:	add	r1, sp, #52	; 0x34
   1744c:	add	r0, sp, #76	; 0x4c
   17450:	bl	11688 <__gmpz_mod@plt>
   17454:	mov	r2, r7
   17458:	add	r1, sp, #76	; 0x4c
   1745c:	mov	r0, r1
   17460:	bl	11568 <__gmpz_add_ui@plt>
   17464:	add	r2, sp, #76	; 0x4c
   17468:	add	r1, sp, #88	; 0x58
   1746c:	add	r0, sp, #52	; 0x34
   17470:	bl	11400 <__gmpz_sub@plt>
   17474:	mov	r2, r6
   17478:	add	r1, sp, #52	; 0x34
   1747c:	mov	r0, r1
   17480:	bl	116e8 <__gmpz_gcd@plt>
   17484:	mov	r1, #1
   17488:	add	r0, sp, #52	; 0x34
   1748c:	bl	1170c <__gmpz_cmp_ui@plt>
   17490:	cmp	r0, #0
   17494:	beq	17434 <__assert_fail@plt+0x5ce0>
   17498:	add	r2, sp, #52	; 0x34
   1749c:	mov	r1, r6
   174a0:	mov	r0, r6
   174a4:	bl	11454 <__gmpz_divexact@plt>
   174a8:	add	r0, sp, #52	; 0x34
   174ac:	bl	17008 <__assert_fail@plt+0x58b4>
   174b0:	cmp	r0, #0
   174b4:	bne	17590 <__assert_fail@plt+0x5e3c>
   174b8:	ldr	r3, [sp, #28]
   174bc:	ldrb	r3, [r3, #8]
   174c0:	cmp	r3, #0
   174c4:	bne	17574 <__assert_fail@plt+0x5e20>
   174c8:	ldr	r2, [sp, #24]
   174cc:	add	r1, r7, #1
   174d0:	add	r0, sp, #52	; 0x34
   174d4:	bl	17220 <__assert_fail@plt+0x5acc>
   174d8:	mov	r0, r6
   174dc:	bl	17008 <__assert_fail@plt+0x58b4>
   174e0:	cmp	r0, #0
   174e4:	bne	175a0 <__assert_fail@plt+0x5e4c>
   174e8:	mov	r2, r6
   174ec:	add	r1, sp, #100	; 0x64
   174f0:	mov	r0, r1
   174f4:	bl	11688 <__gmpz_mod@plt>
   174f8:	mov	r2, r6
   174fc:	add	r1, sp, #88	; 0x58
   17500:	mov	r0, r1
   17504:	bl	11688 <__gmpz_mod@plt>
   17508:	mov	r2, r6
   1750c:	add	r1, sp, #76	; 0x4c
   17510:	mov	r0, r1
   17514:	bl	11688 <__gmpz_mod@plt>
   17518:	mov	r1, #1
   1751c:	mov	r0, r6
   17520:	bl	1170c <__gmpz_cmp_ui@plt>
   17524:	cmp	r0, #0
   17528:	bne	17304 <__assert_fail@plt+0x5bb0>
   1752c:	mov	r3, #0
   17530:	str	r3, [sp, #8]
   17534:	add	r3, sp, #76	; 0x4c
   17538:	str	r3, [sp, #4]
   1753c:	add	r3, sp, #100	; 0x64
   17540:	str	r3, [sp]
   17544:	add	r3, sp, #88	; 0x58
   17548:	add	r2, sp, #52	; 0x34
   1754c:	add	r1, sp, #40	; 0x28
   17550:	add	r0, sp, #64	; 0x40
   17554:	bl	113ac <__gmpz_clears@plt>
   17558:	add	sp, sp, #116	; 0x74
   1755c:	ldrd	r4, [sp]
   17560:	ldrd	r6, [sp, #8]
   17564:	ldrd	r8, [sp, #16]
   17568:	ldrd	sl, [sp, #24]
   1756c:	add	sp, sp, #32
   17570:	pop	{pc}		; (ldr pc, [sp], #4)
   17574:	ldr	r3, [sp, #32]
   17578:	ldr	r3, [r3]
   1757c:	mov	r2, #43	; 0x2b
   17580:	mov	r1, #1
   17584:	ldr	r0, [sp, #36]	; 0x24
   17588:	bl	114d8 <fwrite@plt>
   1758c:	b	174c8 <__assert_fail@plt+0x5d74>
   17590:	add	r1, sp, #52	; 0x34
   17594:	ldr	r0, [sp, #24]
   17598:	bl	13160 <__assert_fail@plt+0x1a0c>
   1759c:	b	174d8 <__assert_fail@plt+0x5d84>
   175a0:	mov	r1, r6
   175a4:	ldr	r0, [sp, #24]
   175a8:	bl	13160 <__assert_fail@plt+0x1a0c>
   175ac:	b	1752c <__assert_fail@plt+0x5dd8>
   175b0:	push	{lr}		; (str lr, [sp, #-4]!)
   175b4:	sub	sp, sp, #60	; 0x3c
   175b8:	subs	r4, r0, #0
   175bc:	beq	17604 <__assert_fail@plt+0x5eb0>
   175c0:	movw	r3, #12760	; 0x31d8
   175c4:	movt	r3, #3
   175c8:	ldr	r5, [r3]
   175cc:	mov	r2, #5
   175d0:	movw	r1, #8336	; 0x2090
   175d4:	movt	r1, #2
   175d8:	mov	r0, #0
   175dc:	bl	11430 <dcgettext@plt>
   175e0:	movw	r3, #12800	; 0x3200
   175e4:	movt	r3, #3
   175e8:	ldr	r3, [r3]
   175ec:	mov	r2, r0
   175f0:	mov	r1, #1
   175f4:	mov	r0, r5
   175f8:	bl	1164c <__fprintf_chk@plt>
   175fc:	mov	r0, r4
   17600:	bl	11598 <exit@plt>
   17604:	mov	r2, #5
   17608:	movw	r1, #8376	; 0x20b8
   1760c:	movt	r1, #2
   17610:	mov	r0, #0
   17614:	bl	11430 <dcgettext@plt>
   17618:	movw	r3, #12800	; 0x3200
   1761c:	movt	r3, #3
   17620:	ldr	r2, [r3]
   17624:	mov	r3, r2
   17628:	mov	r1, r0
   1762c:	mov	r0, #1
   17630:	bl	11628 <__printf_chk@plt>
   17634:	mov	r2, #5
   17638:	movw	r1, #8416	; 0x20e0
   1763c:	movt	r1, #2
   17640:	mov	r0, #0
   17644:	bl	11430 <dcgettext@plt>
   17648:	movw	r5, #12772	; 0x31e4
   1764c:	movt	r5, #3
   17650:	ldr	r1, [r5]
   17654:	bl	1134c <fputs_unlocked@plt>
   17658:	mov	r2, #5
   1765c:	movw	r1, #8552	; 0x2168
   17660:	movt	r1, #2
   17664:	mov	r0, #0
   17668:	bl	11430 <dcgettext@plt>
   1766c:	ldr	r1, [r5]
   17670:	bl	1134c <fputs_unlocked@plt>
   17674:	mov	r2, #5
   17678:	movw	r1, #8600	; 0x2198
   1767c:	movt	r1, #2
   17680:	mov	r0, #0
   17684:	bl	11430 <dcgettext@plt>
   17688:	ldr	r1, [r5]
   1768c:	bl	1134c <fputs_unlocked@plt>
   17690:	ldr	r0, [pc, #648]	; 17920 <__assert_fail@plt+0x61cc>
   17694:	ldr	r1, [r0]
   17698:	ldr	r3, [r0, #4]
   1769c:	str	r1, [sp]
   176a0:	str	r3, [sp, #4]
   176a4:	ldrd	r2, [r0, #8]
   176a8:	strd	r2, [sp, #8]
   176ac:	ldrd	r2, [r0, #16]
   176b0:	strd	r2, [sp, #16]
   176b4:	ldrd	r2, [r0, #24]
   176b8:	strd	r2, [sp, #24]
   176bc:	ldrd	r2, [r0, #32]
   176c0:	strd	r2, [sp, #32]
   176c4:	ldrd	r2, [r0, #40]	; 0x28
   176c8:	strd	r2, [sp, #40]	; 0x28
   176cc:	ldrd	r2, [r0, #48]	; 0x30
   176d0:	strd	r2, [sp, #48]	; 0x30
   176d4:	cmp	r1, #0
   176d8:	moveq	r5, sp
   176dc:	beq	17708 <__assert_fail@plt+0x5fb4>
   176e0:	mov	r5, sp
   176e4:	movw	r6, #8328	; 0x2088
   176e8:	movt	r6, #2
   176ec:	mov	r0, r6
   176f0:	bl	11388 <strcmp@plt>
   176f4:	cmp	r0, #0
   176f8:	beq	17708 <__assert_fail@plt+0x5fb4>
   176fc:	ldr	r1, [r5, #8]!
   17700:	cmp	r1, #0
   17704:	bne	176ec <__assert_fail@plt+0x5f98>
   17708:	ldr	r5, [r5, #4]
   1770c:	cmp	r5, #0
   17710:	beq	1786c <__assert_fail@plt+0x6118>
   17714:	mov	r2, #5
   17718:	movw	r1, #8656	; 0x21d0
   1771c:	movt	r1, #2
   17720:	mov	r0, #0
   17724:	bl	11430 <dcgettext@plt>
   17728:	movw	r3, #8680	; 0x21e8
   1772c:	movt	r3, #2
   17730:	movw	r2, #8720	; 0x2210
   17734:	movt	r2, #2
   17738:	mov	r1, r0
   1773c:	mov	r0, #1
   17740:	bl	11628 <__printf_chk@plt>
   17744:	mov	r1, #0
   17748:	mov	r0, #5
   1774c:	bl	116c4 <setlocale@plt>
   17750:	cmp	r0, #0
   17754:	beq	17770 <__assert_fail@plt+0x601c>
   17758:	mov	r2, #3
   1775c:	movw	r1, #8736	; 0x2220
   17760:	movt	r1, #2
   17764:	bl	1173c <strncmp@plt>
   17768:	cmp	r0, #0
   1776c:	bne	177ec <__assert_fail@plt+0x6098>
   17770:	mov	r2, #5
   17774:	movw	r1, #8812	; 0x226c
   17778:	movt	r1, #2
   1777c:	mov	r0, #0
   17780:	bl	11430 <dcgettext@plt>
   17784:	movw	r6, #8328	; 0x2088
   17788:	movt	r6, #2
   1778c:	mov	r3, r6
   17790:	movw	r2, #8680	; 0x21e8
   17794:	movt	r2, #2
   17798:	mov	r1, r0
   1779c:	mov	r0, #1
   177a0:	bl	11628 <__printf_chk@plt>
   177a4:	mov	r2, #5
   177a8:	movw	r1, #8840	; 0x2288
   177ac:	movt	r1, #2
   177b0:	mov	r0, #0
   177b4:	bl	11430 <dcgettext@plt>
   177b8:	mov	r1, r0
   177bc:	movw	r2, #9012	; 0x2334
   177c0:	movt	r2, #2
   177c4:	movw	r3, #8596	; 0x2194
   177c8:	movt	r3, #2
   177cc:	cmp	r5, r6
   177d0:	moveq	r3, r2
   177d4:	mov	r2, r5
   177d8:	mov	r0, #1
   177dc:	bl	11628 <__printf_chk@plt>
   177e0:	b	175fc <__assert_fail@plt+0x5ea8>
   177e4:	movw	r5, #8328	; 0x2088
   177e8:	movt	r5, #2
   177ec:	mov	r2, #5
   177f0:	movw	r1, #8740	; 0x2224
   177f4:	movt	r1, #2
   177f8:	mov	r0, #0
   177fc:	bl	11430 <dcgettext@plt>
   17800:	movw	r3, #12772	; 0x31e4
   17804:	movt	r3, #3
   17808:	ldr	r1, [r3]
   1780c:	bl	1134c <fputs_unlocked@plt>
   17810:	b	17770 <__assert_fail@plt+0x601c>
   17814:	mov	r2, #5
   17818:	movw	r1, #8812	; 0x226c
   1781c:	movt	r1, #2
   17820:	mov	r0, #0
   17824:	bl	11430 <dcgettext@plt>
   17828:	movw	r5, #8328	; 0x2088
   1782c:	movt	r5, #2
   17830:	mov	r3, r5
   17834:	movw	r2, #8680	; 0x21e8
   17838:	movt	r2, #2
   1783c:	mov	r1, r0
   17840:	mov	r0, #1
   17844:	bl	11628 <__printf_chk@plt>
   17848:	mov	r2, #5
   1784c:	movw	r1, #8840	; 0x2288
   17850:	movt	r1, #2
   17854:	mov	r0, #0
   17858:	bl	11430 <dcgettext@plt>
   1785c:	mov	r1, r0
   17860:	movw	r3, #9012	; 0x2334
   17864:	movt	r3, #2
   17868:	b	177d4 <__assert_fail@plt+0x6080>
   1786c:	mov	r2, #5
   17870:	movw	r1, #8656	; 0x21d0
   17874:	movt	r1, #2
   17878:	mov	r0, #0
   1787c:	bl	11430 <dcgettext@plt>
   17880:	movw	r3, #8680	; 0x21e8
   17884:	movt	r3, #2
   17888:	movw	r2, #8720	; 0x2210
   1788c:	movt	r2, #2
   17890:	mov	r1, r0
   17894:	mov	r0, #1
   17898:	bl	11628 <__printf_chk@plt>
   1789c:	mov	r1, #0
   178a0:	mov	r0, #5
   178a4:	bl	116c4 <setlocale@plt>
   178a8:	cmp	r0, #0
   178ac:	beq	17814 <__assert_fail@plt+0x60c0>
   178b0:	mov	r2, #3
   178b4:	movw	r1, #8736	; 0x2220
   178b8:	movt	r1, #2
   178bc:	bl	1173c <strncmp@plt>
   178c0:	cmp	r0, #0
   178c4:	bne	177e4 <__assert_fail@plt+0x6090>
   178c8:	mov	r2, #5
   178cc:	movw	r1, #8812	; 0x226c
   178d0:	movt	r1, #2
   178d4:	mov	r0, #0
   178d8:	bl	11430 <dcgettext@plt>
   178dc:	movw	r5, #8328	; 0x2088
   178e0:	movt	r5, #2
   178e4:	mov	r3, r5
   178e8:	movw	r2, #8680	; 0x21e8
   178ec:	movt	r2, #2
   178f0:	mov	r1, r0
   178f4:	mov	r0, #1
   178f8:	bl	11628 <__printf_chk@plt>
   178fc:	mov	r2, #5
   17900:	movw	r1, #8840	; 0x2288
   17904:	movt	r1, #2
   17908:	mov	r0, #0
   1790c:	bl	11430 <dcgettext@plt>
   17910:	mov	r1, r0
   17914:	movw	r3, #9012	; 0x2334
   17918:	movt	r3, #2
   1791c:	b	177d4 <__assert_fail@plt+0x6080>
   17920:	andeq	pc, r1, r8, lsl #8
   17924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17928:	strd	r6, [sp, #8]
   1792c:	str	r8, [sp, #16]
   17930:	str	lr, [sp, #20]
   17934:	sub	sp, sp, #24
   17938:	mov	r7, r0
   1793c:	mov	r5, r1
   17940:	ldr	r0, [r1]
   17944:	bl	17e04 <__assert_fail@plt+0x66b0>
   17948:	movw	r1, #8596	; 0x2194
   1794c:	movt	r1, #2
   17950:	mov	r0, #6
   17954:	bl	116c4 <setlocale@plt>
   17958:	movw	r4, #8724	; 0x2214
   1795c:	movt	r4, #2
   17960:	movw	r1, #8892	; 0x22bc
   17964:	movt	r1, #2
   17968:	mov	r0, r4
   1796c:	bl	11700 <bindtextdomain@plt>
   17970:	mov	r0, r4
   17974:	bl	1149c <textdomain@plt>
   17978:	movw	r3, #12780	; 0x31ec
   1797c:	movt	r3, #3
   17980:	ldr	r3, [r3]
   17984:	cmp	r3, #0
   17988:	beq	179fc <__assert_fail@plt+0x62a8>
   1798c:	movw	r0, #31620	; 0x7b84
   17990:	movt	r0, #1
   17994:	bl	1edbc <__assert_fail@plt+0xd668>
   17998:	movw	r0, #6860	; 0x1acc
   1799c:	movt	r0, #1
   179a0:	bl	1edbc <__assert_fail@plt+0xd668>
   179a4:	ldr	r8, [pc, #436]	; 17b60 <__assert_fail@plt+0x640c>
   179a8:	movw	r4, #8596	; 0x2194
   179ac:	movt	r4, #2
   179b0:	movw	r6, #12780	; 0x31ec
   179b4:	movt	r6, #3
   179b8:	mov	r3, #0
   179bc:	str	r3, [sp]
   179c0:	mov	r3, r8
   179c4:	mov	r2, r4
   179c8:	mov	r1, r5
   179cc:	mov	r0, r7
   179d0:	bl	11580 <getopt_long@plt>
   179d4:	cmn	r0, #1
   179d8:	beq	17ab0 <__assert_fail@plt+0x635c>
   179dc:	cmn	r0, #2
   179e0:	beq	17a24 <__assert_fail@plt+0x62d0>
   179e4:	cmp	r0, #256	; 0x100
   179e8:	beq	17a18 <__assert_fail@plt+0x62c4>
   179ec:	cmn	r0, #3
   179f0:	beq	17a2c <__assert_fail@plt+0x62d8>
   179f4:	mov	r0, #1
   179f8:	bl	175b0 <__assert_fail@plt+0x5e5c>
   179fc:	mov	r0, #1024	; 0x400
   17a00:	bl	1bd70 <__assert_fail@plt+0xa61c>
   17a04:	movw	r3, #12780	; 0x31ec
   17a08:	movt	r3, #3
   17a0c:	str	r0, [r3]
   17a10:	str	r0, [r3, #4]
   17a14:	b	1798c <__assert_fail@plt+0x6238>
   17a18:	mov	r3, #1
   17a1c:	strb	r3, [r6, #8]
   17a20:	b	179b8 <__assert_fail@plt+0x6264>
   17a24:	mov	r0, #0
   17a28:	bl	175b0 <__assert_fail@plt+0x5e5c>
   17a2c:	movw	r3, #12772	; 0x31e4
   17a30:	movt	r3, #3
   17a34:	ldr	r5, [r3]
   17a38:	movw	r3, #12668	; 0x317c
   17a3c:	movt	r3, #3
   17a40:	ldr	r6, [r3]
   17a44:	movw	r1, #8916	; 0x22d4
   17a48:	movt	r1, #2
   17a4c:	movw	r0, #8936	; 0x22e8
   17a50:	movt	r0, #2
   17a54:	bl	1893c <__assert_fail@plt+0x71e8>
   17a58:	mov	r7, r0
   17a5c:	movw	r1, #8956	; 0x22fc
   17a60:	movt	r1, #2
   17a64:	movw	r0, #8972	; 0x230c
   17a68:	movt	r0, #2
   17a6c:	bl	1893c <__assert_fail@plt+0x71e8>
   17a70:	mov	r4, #0
   17a74:	str	r4, [sp, #12]
   17a78:	str	r0, [sp, #8]
   17a7c:	str	r7, [sp, #4]
   17a80:	movw	r3, #8988	; 0x231c
   17a84:	movt	r3, #2
   17a88:	str	r3, [sp]
   17a8c:	mov	r3, r6
   17a90:	movw	r2, #8720	; 0x2210
   17a94:	movt	r2, #2
   17a98:	movw	r1, #8328	; 0x2088
   17a9c:	movt	r1, #2
   17aa0:	mov	r0, r5
   17aa4:	bl	1bc98 <__assert_fail@plt+0xa544>
   17aa8:	mov	r0, r4
   17aac:	bl	11598 <exit@plt>
   17ab0:	movw	r3, #12752	; 0x31d0
   17ab4:	movt	r3, #3
   17ab8:	ldr	r6, [r3]
   17abc:	cmp	r6, r7
   17ac0:	addlt	r6, r5, r6, lsl #2
   17ac4:	addlt	r5, r5, r7, lsl #2
   17ac8:	movlt	r4, #1
   17acc:	bge	17b08 <__assert_fail@plt+0x63b4>
   17ad0:	ldr	r0, [r6], #4
   17ad4:	bl	169ec <__assert_fail@plt+0x5298>
   17ad8:	cmp	r0, #0
   17adc:	moveq	r4, r0
   17ae0:	cmp	r6, r5
   17ae4:	bne	17ad0 <__assert_fail@plt+0x637c>
   17ae8:	eor	r0, r4, #1
   17aec:	uxtb	r0, r0
   17af0:	add	sp, sp, #24
   17af4:	ldrd	r4, [sp]
   17af8:	ldrd	r6, [sp, #8]
   17afc:	ldr	r8, [sp, #16]
   17b00:	add	sp, sp, #20
   17b04:	pop	{pc}		; (ldr pc, [sp], #4)
   17b08:	add	r0, sp, #16
   17b0c:	bl	1ae18 <__assert_fail@plt+0x96c4>
   17b10:	mov	r4, #1
   17b14:	movw	r6, #9000	; 0x2328
   17b18:	movt	r6, #2
   17b1c:	movw	r5, #12768	; 0x31e0
   17b20:	movt	r5, #3
   17b24:	add	r3, sp, #16
   17b28:	mov	r2, #3
   17b2c:	mov	r1, r6
   17b30:	ldr	r0, [r5]
   17b34:	bl	1ae28 <__assert_fail@plt+0x96d4>
   17b38:	cmn	r0, #1
   17b3c:	beq	17b54 <__assert_fail@plt+0x6400>
   17b40:	ldr	r0, [sp, #20]
   17b44:	bl	169ec <__assert_fail@plt+0x5298>
   17b48:	and	r4, r4, r0
   17b4c:	uxtb	r4, r4
   17b50:	b	17b24 <__assert_fail@plt+0x63d0>
   17b54:	ldr	r0, [sp, #20]
   17b58:	bl	17c94 <__assert_fail@plt+0x6540>
   17b5c:	b	17ae8 <__assert_fail@plt+0x6394>
   17b60:	andeq	pc, r1, r0, asr #8
   17b64:	movw	r3, #12792	; 0x31f8
   17b68:	movt	r3, #3
   17b6c:	str	r0, [r3]
   17b70:	bx	lr
   17b74:	movw	r3, #12792	; 0x31f8
   17b78:	movt	r3, #3
   17b7c:	strb	r0, [r3, #4]
   17b80:	bx	lr
   17b84:	strd	r4, [sp, #-16]!
   17b88:	str	r6, [sp, #8]
   17b8c:	str	lr, [sp, #12]
   17b90:	sub	sp, sp, #8
   17b94:	movw	r3, #12772	; 0x31e4
   17b98:	movt	r3, #3
   17b9c:	ldr	r0, [r3]
   17ba0:	bl	1c470 <__assert_fail@plt+0xad1c>
   17ba4:	cmp	r0, #0
   17ba8:	beq	17bd0 <__assert_fail@plt+0x647c>
   17bac:	movw	r3, #12792	; 0x31f8
   17bb0:	movt	r3, #3
   17bb4:	ldrb	r3, [r3, #4]
   17bb8:	cmp	r3, #0
   17bbc:	beq	17bfc <__assert_fail@plt+0x64a8>
   17bc0:	bl	115e0 <__errno_location@plt>
   17bc4:	ldr	r3, [r0]
   17bc8:	cmp	r3, #32
   17bcc:	bne	17bfc <__assert_fail@plt+0x64a8>
   17bd0:	movw	r3, #12760	; 0x31d8
   17bd4:	movt	r3, #3
   17bd8:	ldr	r0, [r3]
   17bdc:	bl	1c470 <__assert_fail@plt+0xad1c>
   17be0:	cmp	r0, #0
   17be4:	bne	17c84 <__assert_fail@plt+0x6530>
   17be8:	add	sp, sp, #8
   17bec:	ldrd	r4, [sp]
   17bf0:	ldr	r6, [sp, #8]
   17bf4:	add	sp, sp, #12
   17bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bfc:	mov	r2, #5
   17c00:	movw	r1, #7856	; 0x1eb0
   17c04:	movt	r1, #2
   17c08:	mov	r0, #0
   17c0c:	bl	11430 <dcgettext@plt>
   17c10:	mov	r4, r0
   17c14:	movw	r3, #12792	; 0x31f8
   17c18:	movt	r3, #3
   17c1c:	ldr	r5, [r3]
   17c20:	cmp	r5, #0
   17c24:	beq	17c64 <__assert_fail@plt+0x6510>
   17c28:	bl	115e0 <__errno_location@plt>
   17c2c:	ldr	r6, [r0]
   17c30:	mov	r0, r5
   17c34:	bl	1abf4 <__assert_fail@plt+0x94a0>
   17c38:	str	r4, [sp]
   17c3c:	mov	r3, r0
   17c40:	movw	r2, #9152	; 0x23c0
   17c44:	movt	r2, #2
   17c48:	mov	r1, r6
   17c4c:	mov	r0, #0
   17c50:	bl	11520 <error@plt>
   17c54:	movw	r3, #12672	; 0x3180
   17c58:	movt	r3, #3
   17c5c:	ldr	r0, [r3]
   17c60:	bl	113e8 <_exit@plt>
   17c64:	bl	115e0 <__errno_location@plt>
   17c68:	mov	r3, r4
   17c6c:	movw	r2, #9156	; 0x23c4
   17c70:	movt	r2, #2
   17c74:	ldr	r1, [r0]
   17c78:	mov	r0, #0
   17c7c:	bl	11520 <error@plt>
   17c80:	b	17c54 <__assert_fail@plt+0x6500>
   17c84:	movw	r3, #12672	; 0x3180
   17c88:	movt	r3, #3
   17c8c:	ldr	r0, [r3]
   17c90:	bl	113e8 <_exit@plt>
   17c94:	strd	r4, [sp, #-12]!
   17c98:	str	lr, [sp, #8]
   17c9c:	sub	sp, sp, #12
   17ca0:	mov	r5, r0
   17ca4:	bl	115e0 <__errno_location@plt>
   17ca8:	mov	r4, r0
   17cac:	ldr	r3, [r0]
   17cb0:	str	r3, [sp]
   17cb4:	str	r3, [sp, #4]
   17cb8:	mov	r3, #0
   17cbc:	str	r3, [r0]
   17cc0:	mov	r0, r5
   17cc4:	bl	113dc <free@plt>
   17cc8:	ldr	r3, [r4]
   17ccc:	clz	r3, r3
   17cd0:	lsr	r3, r3, #5
   17cd4:	add	r2, sp, #8
   17cd8:	add	r3, r2, r3, lsl #2
   17cdc:	ldr	r3, [r3, #-8]
   17ce0:	str	r3, [r4]
   17ce4:	add	sp, sp, #12
   17ce8:	ldrd	r4, [sp]
   17cec:	add	sp, sp, #8
   17cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17cf8:	strd	r6, [sp, #8]
   17cfc:	str	r8, [sp, #16]
   17d00:	str	lr, [sp, #20]
   17d04:	subs	r4, r2, #0
   17d08:	beq	17d70 <__assert_fail@plt+0x661c>
   17d0c:	mov	r7, r0
   17d10:	mov	r5, r1
   17d14:	mov	r6, #0
   17d18:	mov	r2, r4
   17d1c:	mov	r1, r5
   17d20:	mov	r0, r7
   17d24:	bl	1b184 <__assert_fail@plt+0x9a30>
   17d28:	cmn	r0, #1
   17d2c:	beq	17d58 <__assert_fail@plt+0x6604>
   17d30:	cmp	r0, #0
   17d34:	beq	17d4c <__assert_fail@plt+0x65f8>
   17d38:	add	r6, r6, r0
   17d3c:	add	r5, r5, r0
   17d40:	subs	r4, r4, r0
   17d44:	bne	17d18 <__assert_fail@plt+0x65c4>
   17d48:	b	17d58 <__assert_fail@plt+0x6604>
   17d4c:	bl	115e0 <__errno_location@plt>
   17d50:	mov	r3, #28
   17d54:	str	r3, [r0]
   17d58:	mov	r0, r6
   17d5c:	ldrd	r4, [sp]
   17d60:	ldrd	r6, [sp, #8]
   17d64:	ldr	r8, [sp, #16]
   17d68:	add	sp, sp, #20
   17d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d70:	mov	r6, r4
   17d74:	b	17d58 <__assert_fail@plt+0x6604>
   17d78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d7c:	str	r6, [sp, #8]
   17d80:	strd	r8, [sp, #12]
   17d84:	str	lr, [sp, #20]
   17d88:	mov	r4, r0
   17d8c:	mov	r5, r1
   17d90:	add	r6, r2, #20
   17d94:	mov	r3, #0
   17d98:	strb	r3, [r2, #20]
   17d9c:	mov	r8, #10
   17da0:	mov	r9, #0
   17da4:	b	17db0 <__assert_fail@plt+0x665c>
   17da8:	mov	r4, r0
   17dac:	mov	r5, r1
   17db0:	mov	r2, r8
   17db4:	mov	r3, r9
   17db8:	mov	r0, r4
   17dbc:	mov	r1, r5
   17dc0:	bl	1ebe4 <__assert_fail@plt+0xd490>
   17dc4:	add	r2, r2, #48	; 0x30
   17dc8:	strb	r2, [r6, #-1]!
   17dcc:	mov	r2, r8
   17dd0:	mov	r3, r9
   17dd4:	mov	r0, r4
   17dd8:	mov	r1, r5
   17ddc:	bl	1ebe4 <__assert_fail@plt+0xd490>
   17de0:	cmp	r5, #0
   17de4:	cmpeq	r4, #9
   17de8:	bhi	17da8 <__assert_fail@plt+0x6654>
   17dec:	mov	r0, r6
   17df0:	ldrd	r4, [sp]
   17df4:	ldr	r6, [sp, #8]
   17df8:	ldrd	r8, [sp, #12]
   17dfc:	add	sp, sp, #20
   17e00:	pop	{pc}		; (ldr pc, [sp], #4)
   17e04:	strd	r4, [sp, #-16]!
   17e08:	str	r6, [sp, #8]
   17e0c:	str	lr, [sp, #12]
   17e10:	subs	r4, r0, #0
   17e14:	beq	17eb0 <__assert_fail@plt+0x675c>
   17e18:	mov	r1, #47	; 0x2f
   17e1c:	mov	r0, r4
   17e20:	bl	116d0 <strrchr@plt>
   17e24:	subs	r5, r0, #0
   17e28:	beq	17e88 <__assert_fail@plt+0x6734>
   17e2c:	add	r6, r5, #1
   17e30:	sub	r3, r6, r4
   17e34:	cmp	r3, #6
   17e38:	ble	17e88 <__assert_fail@plt+0x6734>
   17e3c:	mov	r2, #7
   17e40:	movw	r1, #9216	; 0x2400
   17e44:	movt	r1, #2
   17e48:	sub	r0, r5, #6
   17e4c:	bl	1173c <strncmp@plt>
   17e50:	cmp	r0, #0
   17e54:	bne	17e88 <__assert_fail@plt+0x6734>
   17e58:	mov	r2, #3
   17e5c:	movw	r1, #9224	; 0x2408
   17e60:	movt	r1, #2
   17e64:	mov	r0, r6
   17e68:	bl	1173c <strncmp@plt>
   17e6c:	cmp	r0, #0
   17e70:	movne	r4, r6
   17e74:	bne	17e88 <__assert_fail@plt+0x6734>
   17e78:	add	r4, r5, #4
   17e7c:	movw	r3, #12744	; 0x31c8
   17e80:	movt	r3, #3
   17e84:	str	r4, [r3]
   17e88:	movw	r3, #12800	; 0x3200
   17e8c:	movt	r3, #3
   17e90:	str	r4, [r3]
   17e94:	movw	r3, #12748	; 0x31cc
   17e98:	movt	r3, #3
   17e9c:	str	r4, [r3]
   17ea0:	ldrd	r4, [sp]
   17ea4:	ldr	r6, [sp, #8]
   17ea8:	add	sp, sp, #12
   17eac:	pop	{pc}		; (ldr pc, [sp], #4)
   17eb0:	movw	r3, #12760	; 0x31d8
   17eb4:	movt	r3, #3
   17eb8:	ldr	r3, [r3]
   17ebc:	mov	r2, #55	; 0x37
   17ec0:	mov	r1, #1
   17ec4:	movw	r0, #9160	; 0x23c8
   17ec8:	movt	r0, #2
   17ecc:	bl	114d8 <fwrite@plt>
   17ed0:	bl	11748 <abort@plt>
   17ed4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ed8:	strd	r6, [sp, #8]
   17edc:	strd	r8, [sp, #16]
   17ee0:	strd	sl, [sp, #24]
   17ee4:	str	lr, [sp, #32]
   17ee8:	sub	sp, sp, #116	; 0x74
   17eec:	mov	r4, r0
   17ef0:	mov	r0, r1
   17ef4:	mov	r1, #2
   17ef8:	bl	1b25c <__assert_fail@plt+0x9b08>
   17efc:	mov	r9, r0
   17f00:	mov	r6, #0
   17f04:	mov	r7, #0
   17f08:	movw	r5, #10436	; 0x28c4
   17f0c:	movt	r5, #2
   17f10:	b	18828 <__assert_fail@plt+0x70d4>
   17f14:	str	r4, [sp, #16]
   17f18:	mov	r3, #0
   17f1c:	strb	r3, [sp]
   17f20:	strd	r6, [sp, #4]
   17f24:	strb	r3, [sp, #12]
   17f28:	cmp	r4, r8
   17f2c:	bcs	18124 <__assert_fail@plt+0x69d0>
   17f30:	mov	r4, #1
   17f34:	b	18018 <__assert_fail@plt+0x68c4>
   17f38:	add	r0, sp, #4
   17f3c:	bl	1140c <mbsinit@plt>
   17f40:	cmp	r0, #0
   17f44:	beq	18064 <__assert_fail@plt+0x6910>
   17f48:	strb	r4, [sp]
   17f4c:	ldr	sl, [sp, #16]
   17f50:	bl	114fc <__ctype_get_mb_cur_max@plt>
   17f54:	mov	r1, r0
   17f58:	mov	r0, sl
   17f5c:	bl	1b21c <__assert_fail@plt+0x9ac8>
   17f60:	add	r3, sp, #4
   17f64:	mov	r2, r0
   17f68:	mov	r1, sl
   17f6c:	add	r0, sp, #28
   17f70:	bl	1c7ec <__assert_fail@plt+0xb098>
   17f74:	str	r0, [sp, #20]
   17f78:	cmn	r0, #1
   17f7c:	streq	r4, [sp, #20]
   17f80:	moveq	r3, #0
   17f84:	strbeq	r3, [sp, #24]
   17f88:	beq	17fd4 <__assert_fail@plt+0x6880>
   17f8c:	cmn	r0, #2
   17f90:	beq	18084 <__assert_fail@plt+0x6930>
   17f94:	cmp	r0, #0
   17f98:	bne	17fbc <__assert_fail@plt+0x6868>
   17f9c:	str	r4, [sp, #20]
   17fa0:	ldr	r3, [sp, #16]
   17fa4:	ldrb	r3, [r3]
   17fa8:	cmp	r3, #0
   17fac:	bne	1809c <__assert_fail@plt+0x6948>
   17fb0:	ldr	r3, [sp, #28]
   17fb4:	cmp	r3, #0
   17fb8:	bne	180bc <__assert_fail@plt+0x6968>
   17fbc:	strb	r4, [sp, #24]
   17fc0:	add	r0, sp, #4
   17fc4:	bl	1140c <mbsinit@plt>
   17fc8:	cmp	r0, #0
   17fcc:	movne	r3, #0
   17fd0:	strbne	r3, [sp]
   17fd4:	strb	r4, [sp, #12]
   17fd8:	ldrb	r3, [sp, #24]
   17fdc:	cmp	r3, #0
   17fe0:	beq	17ff0 <__assert_fail@plt+0x689c>
   17fe4:	ldr	r3, [sp, #28]
   17fe8:	cmp	r3, #0
   17fec:	beq	180dc <__assert_fail@plt+0x6988>
   17ff0:	ldrb	r1, [sp, #24]
   17ff4:	ldr	r0, [sp, #28]
   17ff8:	ldr	r3, [sp, #16]
   17ffc:	ldr	r2, [sp, #20]
   18000:	add	r3, r3, r2
   18004:	str	r3, [sp, #16]
   18008:	mov	r2, #0
   1800c:	strb	r2, [sp, #12]
   18010:	cmp	r3, r8
   18014:	bcs	180e0 <__assert_fail@plt+0x698c>
   18018:	ldrb	r3, [sp, #12]
   1801c:	cmp	r3, #0
   18020:	bne	17fd8 <__assert_fail@plt+0x6884>
   18024:	ldrb	r3, [sp]
   18028:	cmp	r3, #0
   1802c:	bne	17f4c <__assert_fail@plt+0x67f8>
   18030:	ldr	r1, [sp, #16]
   18034:	ldrb	r3, [r1]
   18038:	lsr	r2, r3, #5
   1803c:	and	r3, r3, #31
   18040:	ldr	r2, [r5, r2, lsl #2]
   18044:	lsr	r3, r2, r3
   18048:	tst	r3, #1
   1804c:	beq	17f38 <__assert_fail@plt+0x67e4>
   18050:	str	r4, [sp, #20]
   18054:	ldrb	r3, [r1]
   18058:	str	r3, [sp, #28]
   1805c:	strb	r4, [sp, #24]
   18060:	b	17fd4 <__assert_fail@plt+0x6880>
   18064:	movw	r3, #9228	; 0x240c
   18068:	movt	r3, #2
   1806c:	mov	r2, #143	; 0x8f
   18070:	movw	r1, #9248	; 0x2420
   18074:	movt	r1, #2
   18078:	movw	r0, #9264	; 0x2430
   1807c:	movt	r0, #2
   18080:	bl	11754 <__assert_fail@plt>
   18084:	ldr	r0, [sp, #16]
   18088:	bl	115b0 <strlen@plt>
   1808c:	str	r0, [sp, #20]
   18090:	mov	r3, #0
   18094:	strb	r3, [sp, #24]
   18098:	b	17fd4 <__assert_fail@plt+0x6880>
   1809c:	movw	r3, #9228	; 0x240c
   180a0:	movt	r3, #2
   180a4:	mov	r2, #171	; 0xab
   180a8:	movw	r1, #9248	; 0x2420
   180ac:	movt	r1, #2
   180b0:	movw	r0, #9288	; 0x2448
   180b4:	movt	r0, #2
   180b8:	bl	11754 <__assert_fail@plt>
   180bc:	movw	r3, #9228	; 0x240c
   180c0:	movt	r3, #2
   180c4:	mov	r2, #172	; 0xac
   180c8:	movw	r1, #9248	; 0x2420
   180cc:	movt	r1, #2
   180d0:	movw	r0, #9312	; 0x2460
   180d4:	movt	r0, #2
   180d8:	bl	11754 <__assert_fail@plt>
   180dc:	bl	11748 <abort@plt>
   180e0:	cmp	r1, r2
   180e4:	moveq	sl, #1
   180e8:	beq	180f8 <__assert_fail@plt+0x69a4>
   180ec:	bl	115ec <iswalnum@plt>
   180f0:	clz	sl, r0
   180f4:	lsr	sl, sl, #5
   180f8:	str	r8, [sp, #16]
   180fc:	mov	r3, #0
   18100:	strb	r3, [sp]
   18104:	strd	r6, [sp, #4]
   18108:	strb	r3, [sp, #12]
   1810c:	str	r9, [sp, #72]	; 0x48
   18110:	strb	r3, [sp, #56]	; 0x38
   18114:	strd	r6, [sp, #60]	; 0x3c
   18118:	strb	r3, [sp, #68]	; 0x44
   1811c:	mov	r4, #1
   18120:	b	18210 <__assert_fail@plt+0x6abc>
   18124:	mov	sl, #1
   18128:	b	180f8 <__assert_fail@plt+0x69a4>
   1812c:	add	r0, sp, #4
   18130:	bl	1140c <mbsinit@plt>
   18134:	cmp	r0, #0
   18138:	beq	182c0 <__assert_fail@plt+0x6b6c>
   1813c:	strb	r4, [sp]
   18140:	ldr	fp, [sp, #16]
   18144:	bl	114fc <__ctype_get_mb_cur_max@plt>
   18148:	mov	r1, r0
   1814c:	mov	r0, fp
   18150:	bl	1b21c <__assert_fail@plt+0x9ac8>
   18154:	add	r3, sp, #4
   18158:	mov	r2, r0
   1815c:	mov	r1, fp
   18160:	add	r0, sp, #28
   18164:	bl	1c7ec <__assert_fail@plt+0xb098>
   18168:	str	r0, [sp, #20]
   1816c:	cmn	r0, #1
   18170:	streq	r4, [sp, #20]
   18174:	moveq	r3, #0
   18178:	strbeq	r3, [sp, #24]
   1817c:	beq	181c8 <__assert_fail@plt+0x6a74>
   18180:	cmn	r0, #2
   18184:	beq	182e0 <__assert_fail@plt+0x6b8c>
   18188:	cmp	r0, #0
   1818c:	bne	181b0 <__assert_fail@plt+0x6a5c>
   18190:	str	r4, [sp, #20]
   18194:	ldr	r3, [sp, #16]
   18198:	ldrb	r3, [r3]
   1819c:	cmp	r3, #0
   181a0:	bne	182f8 <__assert_fail@plt+0x6ba4>
   181a4:	ldr	r3, [sp, #28]
   181a8:	cmp	r3, #0
   181ac:	bne	18318 <__assert_fail@plt+0x6bc4>
   181b0:	strb	r4, [sp, #24]
   181b4:	add	r0, sp, #4
   181b8:	bl	1140c <mbsinit@plt>
   181bc:	cmp	r0, #0
   181c0:	movne	r3, #0
   181c4:	strbne	r3, [sp]
   181c8:	strb	r4, [sp, #12]
   181cc:	ldrb	r3, [sp, #24]
   181d0:	cmp	r3, #0
   181d4:	beq	181e4 <__assert_fail@plt+0x6a90>
   181d8:	ldr	r3, [sp, #28]
   181dc:	cmp	r3, #0
   181e0:	beq	18338 <__assert_fail@plt+0x6be4>
   181e4:	ldr	r3, [sp, #16]
   181e8:	ldr	r2, [sp, #20]
   181ec:	add	r3, r3, r2
   181f0:	str	r3, [sp, #16]
   181f4:	mov	r2, #0
   181f8:	strb	r2, [sp, #12]
   181fc:	ldr	r3, [sp, #72]	; 0x48
   18200:	ldr	r1, [sp, #76]	; 0x4c
   18204:	add	r3, r3, r1
   18208:	str	r3, [sp, #72]	; 0x48
   1820c:	strb	r2, [sp, #68]	; 0x44
   18210:	ldrb	r3, [sp, #68]	; 0x44
   18214:	cmp	r3, #0
   18218:	bne	1825c <__assert_fail@plt+0x6b08>
   1821c:	ldrb	r3, [sp, #56]	; 0x38
   18220:	cmp	r3, #0
   18224:	bne	18350 <__assert_fail@plt+0x6bfc>
   18228:	ldr	r1, [sp, #72]	; 0x48
   1822c:	ldrb	r3, [r1]
   18230:	lsr	r2, r3, #5
   18234:	and	r3, r3, #31
   18238:	ldr	r2, [r5, r2, lsl #2]
   1823c:	lsr	r3, r2, r3
   18240:	tst	r3, #1
   18244:	beq	1833c <__assert_fail@plt+0x6be8>
   18248:	str	r4, [sp, #76]	; 0x4c
   1824c:	ldrb	r3, [r1]
   18250:	str	r3, [sp, #84]	; 0x54
   18254:	strb	r4, [sp, #80]	; 0x50
   18258:	strb	r4, [sp, #68]	; 0x44
   1825c:	ldrb	fp, [sp, #80]	; 0x50
   18260:	cmp	fp, #0
   18264:	beq	18274 <__assert_fail@plt+0x6b20>
   18268:	ldr	r3, [sp, #84]	; 0x54
   1826c:	cmp	r3, #0
   18270:	beq	18454 <__assert_fail@plt+0x6d00>
   18274:	ldrb	r3, [sp, #12]
   18278:	cmp	r3, #0
   1827c:	bne	181cc <__assert_fail@plt+0x6a78>
   18280:	ldrb	r3, [sp]
   18284:	cmp	r3, #0
   18288:	bne	18140 <__assert_fail@plt+0x69ec>
   1828c:	ldr	r1, [sp, #16]
   18290:	ldrb	r3, [r1]
   18294:	lsr	r2, r3, #5
   18298:	and	r3, r3, #31
   1829c:	ldr	r2, [r5, r2, lsl #2]
   182a0:	lsr	r3, r2, r3
   182a4:	tst	r3, #1
   182a8:	beq	1812c <__assert_fail@plt+0x69d8>
   182ac:	str	r4, [sp, #20]
   182b0:	ldrb	r3, [r1]
   182b4:	str	r3, [sp, #28]
   182b8:	strb	r4, [sp, #24]
   182bc:	b	181c8 <__assert_fail@plt+0x6a74>
   182c0:	movw	r3, #9228	; 0x240c
   182c4:	movt	r3, #2
   182c8:	mov	r2, #143	; 0x8f
   182cc:	movw	r1, #9248	; 0x2420
   182d0:	movt	r1, #2
   182d4:	movw	r0, #9264	; 0x2430
   182d8:	movt	r0, #2
   182dc:	bl	11754 <__assert_fail@plt>
   182e0:	ldr	r0, [sp, #16]
   182e4:	bl	115b0 <strlen@plt>
   182e8:	str	r0, [sp, #20]
   182ec:	mov	r3, #0
   182f0:	strb	r3, [sp, #24]
   182f4:	b	181c8 <__assert_fail@plt+0x6a74>
   182f8:	movw	r3, #9228	; 0x240c
   182fc:	movt	r3, #2
   18300:	mov	r2, #171	; 0xab
   18304:	movw	r1, #9248	; 0x2420
   18308:	movt	r1, #2
   1830c:	movw	r0, #9288	; 0x2448
   18310:	movt	r0, #2
   18314:	bl	11754 <__assert_fail@plt>
   18318:	movw	r3, #9228	; 0x240c
   1831c:	movt	r3, #2
   18320:	mov	r2, #172	; 0xac
   18324:	movw	r1, #9248	; 0x2420
   18328:	movt	r1, #2
   1832c:	movw	r0, #9312	; 0x2460
   18330:	movt	r0, #2
   18334:	bl	11754 <__assert_fail@plt>
   18338:	bl	11748 <abort@plt>
   1833c:	add	r0, sp, #60	; 0x3c
   18340:	bl	1140c <mbsinit@plt>
   18344:	cmp	r0, #0
   18348:	beq	183dc <__assert_fail@plt+0x6c88>
   1834c:	strb	r4, [sp, #56]	; 0x38
   18350:	ldr	fp, [sp, #72]	; 0x48
   18354:	bl	114fc <__ctype_get_mb_cur_max@plt>
   18358:	mov	r1, r0
   1835c:	mov	r0, fp
   18360:	bl	1b21c <__assert_fail@plt+0x9ac8>
   18364:	add	r3, sp, #60	; 0x3c
   18368:	mov	r2, r0
   1836c:	mov	r1, fp
   18370:	add	r0, sp, #84	; 0x54
   18374:	bl	1c7ec <__assert_fail@plt+0xb098>
   18378:	str	r0, [sp, #76]	; 0x4c
   1837c:	cmn	r0, #1
   18380:	streq	r4, [sp, #76]	; 0x4c
   18384:	moveq	r3, #0
   18388:	strbeq	r3, [sp, #80]	; 0x50
   1838c:	beq	18258 <__assert_fail@plt+0x6b04>
   18390:	cmn	r0, #2
   18394:	beq	183fc <__assert_fail@plt+0x6ca8>
   18398:	cmp	r0, #0
   1839c:	bne	183c0 <__assert_fail@plt+0x6c6c>
   183a0:	str	r4, [sp, #76]	; 0x4c
   183a4:	ldr	r3, [sp, #72]	; 0x48
   183a8:	ldrb	r3, [r3]
   183ac:	cmp	r3, #0
   183b0:	bne	18414 <__assert_fail@plt+0x6cc0>
   183b4:	ldr	r3, [sp, #84]	; 0x54
   183b8:	cmp	r3, #0
   183bc:	bne	18434 <__assert_fail@plt+0x6ce0>
   183c0:	strb	r4, [sp, #80]	; 0x50
   183c4:	add	r0, sp, #60	; 0x3c
   183c8:	bl	1140c <mbsinit@plt>
   183cc:	cmp	r0, #0
   183d0:	movne	r3, #0
   183d4:	strbne	r3, [sp, #56]	; 0x38
   183d8:	b	18258 <__assert_fail@plt+0x6b04>
   183dc:	movw	r3, #9228	; 0x240c
   183e0:	movt	r3, #2
   183e4:	mov	r2, #143	; 0x8f
   183e8:	movw	r1, #9248	; 0x2420
   183ec:	movt	r1, #2
   183f0:	movw	r0, #9264	; 0x2430
   183f4:	movt	r0, #2
   183f8:	bl	11754 <__assert_fail@plt>
   183fc:	ldr	r0, [sp, #72]	; 0x48
   18400:	bl	115b0 <strlen@plt>
   18404:	str	r0, [sp, #76]	; 0x4c
   18408:	mov	r3, #0
   1840c:	strb	r3, [sp, #80]	; 0x50
   18410:	b	18258 <__assert_fail@plt+0x6b04>
   18414:	movw	r3, #9228	; 0x240c
   18418:	movt	r3, #2
   1841c:	mov	r2, #171	; 0xab
   18420:	movw	r1, #9248	; 0x2420
   18424:	movt	r1, #2
   18428:	movw	r0, #9288	; 0x2448
   1842c:	movt	r0, #2
   18430:	bl	11754 <__assert_fail@plt>
   18434:	movw	r3, #9228	; 0x240c
   18438:	movt	r3, #2
   1843c:	mov	r2, #172	; 0xac
   18440:	movw	r1, #9248	; 0x2420
   18444:	movt	r1, #2
   18448:	movw	r0, #9312	; 0x2460
   1844c:	movt	r0, #2
   18450:	bl	11754 <__assert_fail@plt>
   18454:	ldrb	r3, [sp, #12]
   18458:	cmp	r3, #0
   1845c:	bne	184a8 <__assert_fail@plt+0x6d54>
   18460:	ldrb	r3, [sp]
   18464:	cmp	r3, #0
   18468:	bne	18570 <__assert_fail@plt+0x6e1c>
   1846c:	ldr	r1, [sp, #16]
   18470:	ldrb	r3, [r1]
   18474:	lsr	r2, r3, #5
   18478:	and	r3, r3, #31
   1847c:	ldr	r2, [r5, r2, lsl #2]
   18480:	lsr	r3, r2, r3
   18484:	tst	r3, #1
   18488:	beq	18558 <__assert_fail@plt+0x6e04>
   1848c:	mov	r3, #1
   18490:	str	r3, [sp, #20]
   18494:	ldrb	r2, [r1]
   18498:	str	r2, [sp, #28]
   1849c:	strb	r3, [sp, #24]
   184a0:	mov	r3, #1
   184a4:	strb	r3, [sp, #12]
   184a8:	ldrb	r3, [sp, #24]
   184ac:	cmp	r3, #0
   184b0:	beq	184c4 <__assert_fail@plt+0x6d70>
   184b4:	ldr	r2, [sp, #28]
   184b8:	cmp	r2, #0
   184bc:	moveq	fp, r3
   184c0:	beq	184e0 <__assert_fail@plt+0x6d8c>
   184c4:	ldrb	r3, [sp, #24]
   184c8:	cmp	r3, #0
   184cc:	beq	184e0 <__assert_fail@plt+0x6d8c>
   184d0:	ldr	r0, [sp, #28]
   184d4:	bl	115ec <iswalnum@plt>
   184d8:	clz	fp, r0
   184dc:	lsr	fp, fp, #5
   184e0:	ands	sl, sl, fp
   184e4:	bne	187b0 <__assert_fail@plt+0x705c>
   184e8:	str	r8, [sp, #16]
   184ec:	mov	r3, #0
   184f0:	strb	r3, [sp]
   184f4:	strd	r6, [sp, #4]
   184f8:	strb	r3, [sp, #12]
   184fc:	ldrb	r3, [r8]
   18500:	lsr	r2, r3, #5
   18504:	and	r3, r3, #31
   18508:	ldr	r2, [r5, r2, lsl #2]
   1850c:	lsr	r3, r2, r3
   18510:	tst	r3, #1
   18514:	beq	18684 <__assert_fail@plt+0x6f30>
   18518:	mov	r3, #1
   1851c:	str	r3, [sp, #20]
   18520:	ldrb	r2, [r8]
   18524:	str	r2, [sp, #28]
   18528:	strb	r3, [sp, #24]
   1852c:	mov	r3, #1
   18530:	strb	r3, [sp, #12]
   18534:	ldrb	r3, [sp, #24]
   18538:	cmp	r3, #0
   1853c:	beq	1854c <__assert_fail@plt+0x6df8>
   18540:	ldr	r3, [sp, #28]
   18544:	cmp	r3, #0
   18548:	beq	187b0 <__assert_fail@plt+0x705c>
   1854c:	ldr	r4, [sp, #20]
   18550:	add	r4, r8, r4
   18554:	b	18828 <__assert_fail@plt+0x70d4>
   18558:	add	r0, sp, #4
   1855c:	bl	1140c <mbsinit@plt>
   18560:	cmp	r0, #0
   18564:	beq	185f8 <__assert_fail@plt+0x6ea4>
   18568:	mov	r3, #1
   1856c:	strb	r3, [sp]
   18570:	ldr	r4, [sp, #16]
   18574:	bl	114fc <__ctype_get_mb_cur_max@plt>
   18578:	mov	r1, r0
   1857c:	mov	r0, r4
   18580:	bl	1b21c <__assert_fail@plt+0x9ac8>
   18584:	add	r3, sp, #4
   18588:	mov	r2, r0
   1858c:	mov	r1, r4
   18590:	add	r0, sp, #28
   18594:	bl	1c7ec <__assert_fail@plt+0xb098>
   18598:	str	r0, [sp, #20]
   1859c:	cmn	r0, #1
   185a0:	beq	18618 <__assert_fail@plt+0x6ec4>
   185a4:	cmn	r0, #2
   185a8:	beq	1862c <__assert_fail@plt+0x6ed8>
   185ac:	cmp	r0, #0
   185b0:	bne	185d8 <__assert_fail@plt+0x6e84>
   185b4:	mov	r3, #1
   185b8:	str	r3, [sp, #20]
   185bc:	ldr	r3, [sp, #16]
   185c0:	ldrb	r3, [r3]
   185c4:	cmp	r3, #0
   185c8:	bne	18644 <__assert_fail@plt+0x6ef0>
   185cc:	ldr	r3, [sp, #28]
   185d0:	cmp	r3, #0
   185d4:	bne	18664 <__assert_fail@plt+0x6f10>
   185d8:	mov	r3, #1
   185dc:	strb	r3, [sp, #24]
   185e0:	add	r0, sp, #4
   185e4:	bl	1140c <mbsinit@plt>
   185e8:	cmp	r0, #0
   185ec:	movne	r3, #0
   185f0:	strbne	r3, [sp]
   185f4:	b	184a0 <__assert_fail@plt+0x6d4c>
   185f8:	movw	r3, #9228	; 0x240c
   185fc:	movt	r3, #2
   18600:	mov	r2, #143	; 0x8f
   18604:	movw	r1, #9248	; 0x2420
   18608:	movt	r1, #2
   1860c:	movw	r0, #9264	; 0x2430
   18610:	movt	r0, #2
   18614:	bl	11754 <__assert_fail@plt>
   18618:	mov	r3, #1
   1861c:	str	r3, [sp, #20]
   18620:	mov	r3, #0
   18624:	strb	r3, [sp, #24]
   18628:	b	184a0 <__assert_fail@plt+0x6d4c>
   1862c:	ldr	r0, [sp, #16]
   18630:	bl	115b0 <strlen@plt>
   18634:	str	r0, [sp, #20]
   18638:	mov	r3, #0
   1863c:	strb	r3, [sp, #24]
   18640:	b	184a0 <__assert_fail@plt+0x6d4c>
   18644:	movw	r3, #9228	; 0x240c
   18648:	movt	r3, #2
   1864c:	mov	r2, #171	; 0xab
   18650:	movw	r1, #9248	; 0x2420
   18654:	movt	r1, #2
   18658:	movw	r0, #9288	; 0x2448
   1865c:	movt	r0, #2
   18660:	bl	11754 <__assert_fail@plt>
   18664:	movw	r3, #9228	; 0x240c
   18668:	movt	r3, #2
   1866c:	mov	r2, #172	; 0xac
   18670:	movw	r1, #9248	; 0x2420
   18674:	movt	r1, #2
   18678:	movw	r0, #9312	; 0x2460
   1867c:	movt	r0, #2
   18680:	bl	11754 <__assert_fail@plt>
   18684:	add	r0, sp, #4
   18688:	bl	1140c <mbsinit@plt>
   1868c:	cmp	r0, #0
   18690:	beq	18720 <__assert_fail@plt+0x6fcc>
   18694:	mov	r3, #1
   18698:	strb	r3, [sp]
   1869c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   186a0:	mov	r1, r0
   186a4:	mov	r0, r8
   186a8:	bl	1b21c <__assert_fail@plt+0x9ac8>
   186ac:	add	r3, sp, #4
   186b0:	mov	r2, r0
   186b4:	mov	r1, r8
   186b8:	add	r0, sp, #28
   186bc:	bl	1c7ec <__assert_fail@plt+0xb098>
   186c0:	str	r0, [sp, #20]
   186c4:	cmn	r0, #1
   186c8:	beq	18740 <__assert_fail@plt+0x6fec>
   186cc:	cmn	r0, #2
   186d0:	beq	18754 <__assert_fail@plt+0x7000>
   186d4:	cmp	r0, #0
   186d8:	bne	18700 <__assert_fail@plt+0x6fac>
   186dc:	mov	r3, #1
   186e0:	str	r3, [sp, #20]
   186e4:	ldr	r3, [sp, #16]
   186e8:	ldrb	r3, [r3]
   186ec:	cmp	r3, #0
   186f0:	bne	1876c <__assert_fail@plt+0x7018>
   186f4:	ldr	r3, [sp, #28]
   186f8:	cmp	r3, #0
   186fc:	bne	1878c <__assert_fail@plt+0x7038>
   18700:	mov	r3, #1
   18704:	strb	r3, [sp, #24]
   18708:	add	r0, sp, #4
   1870c:	bl	1140c <mbsinit@plt>
   18710:	cmp	r0, #0
   18714:	movne	r3, #0
   18718:	strbne	r3, [sp]
   1871c:	b	1852c <__assert_fail@plt+0x6dd8>
   18720:	movw	r3, #9228	; 0x240c
   18724:	movt	r3, #2
   18728:	mov	r2, #143	; 0x8f
   1872c:	movw	r1, #9248	; 0x2420
   18730:	movt	r1, #2
   18734:	movw	r0, #9264	; 0x2430
   18738:	movt	r0, #2
   1873c:	bl	11754 <__assert_fail@plt>
   18740:	mov	r3, #1
   18744:	str	r3, [sp, #20]
   18748:	mov	r3, #0
   1874c:	strb	r3, [sp, #24]
   18750:	b	1852c <__assert_fail@plt+0x6dd8>
   18754:	ldr	r0, [sp, #16]
   18758:	bl	115b0 <strlen@plt>
   1875c:	str	r0, [sp, #20]
   18760:	mov	r3, #0
   18764:	strb	r3, [sp, #24]
   18768:	b	1852c <__assert_fail@plt+0x6dd8>
   1876c:	movw	r3, #9228	; 0x240c
   18770:	movt	r3, #2
   18774:	mov	r2, #171	; 0xab
   18778:	movw	r1, #9248	; 0x2420
   1877c:	movt	r1, #2
   18780:	movw	r0, #9288	; 0x2448
   18784:	movt	r0, #2
   18788:	bl	11754 <__assert_fail@plt>
   1878c:	movw	r3, #9228	; 0x240c
   18790:	movt	r3, #2
   18794:	mov	r2, #172	; 0xac
   18798:	movw	r1, #9248	; 0x2420
   1879c:	movt	r1, #2
   187a0:	movw	r0, #9312	; 0x2460
   187a4:	movt	r0, #2
   187a8:	bl	11754 <__assert_fail@plt>
   187ac:	mov	sl, #0
   187b0:	mov	r0, r9
   187b4:	bl	17c94 <__assert_fail@plt+0x6540>
   187b8:	mov	r0, sl
   187bc:	add	sp, sp, #116	; 0x74
   187c0:	ldrd	r4, [sp]
   187c4:	ldrd	r6, [sp, #8]
   187c8:	ldrd	r8, [sp, #16]
   187cc:	ldrd	sl, [sp, #24]
   187d0:	add	sp, sp, #32
   187d4:	pop	{pc}		; (ldr pc, [sp], #4)
   187d8:	mov	sl, #0
   187dc:	b	187b0 <__assert_fail@plt+0x705c>
   187e0:	mov	r0, r9
   187e4:	bl	115b0 <strlen@plt>
   187e8:	ldrb	r4, [r8, r0]
   187ec:	cmp	r4, #0
   187f0:	beq	18894 <__assert_fail@plt+0x7140>
   187f4:	mov	fp, #1
   187f8:	bl	1158c <__ctype_b_loc@plt>
   187fc:	ldr	r3, [r0]
   18800:	lsl	r4, r4, #1
   18804:	ldrh	sl, [r3, r4]
   18808:	eor	r3, sl, #8
   1880c:	ubfx	sl, r3, #3, #1
   18810:	ands	sl, sl, fp
   18814:	bne	187b0 <__assert_fail@plt+0x705c>
   18818:	ldrb	r3, [r8]
   1881c:	cmp	r3, #0
   18820:	beq	187b0 <__assert_fail@plt+0x705c>
   18824:	add	r4, r8, #1
   18828:	ldrb	r3, [r4]
   1882c:	cmp	r3, #0
   18830:	beq	187ac <__assert_fail@plt+0x7058>
   18834:	mov	r1, r9
   18838:	mov	r0, r4
   1883c:	bl	1d35c <__assert_fail@plt+0xbc08>
   18840:	subs	r8, r0, #0
   18844:	beq	187d8 <__assert_fail@plt+0x7084>
   18848:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1884c:	cmp	r0, #1
   18850:	bhi	17f14 <__assert_fail@plt+0x67c0>
   18854:	cmp	r4, r8
   18858:	bcs	187e0 <__assert_fail@plt+0x708c>
   1885c:	bl	1158c <__ctype_b_loc@plt>
   18860:	ldrb	r3, [r8, #-1]
   18864:	ldr	r2, [r0]
   18868:	lsl	r3, r3, #1
   1886c:	ldrh	sl, [r2, r3]
   18870:	eor	sl, sl, #8
   18874:	ubfx	fp, sl, #3, #1
   18878:	mov	r0, r9
   1887c:	bl	115b0 <strlen@plt>
   18880:	ldrb	r4, [r8, r0]
   18884:	cmp	r4, #0
   18888:	moveq	sl, #1
   1888c:	beq	18810 <__assert_fail@plt+0x70bc>
   18890:	b	187f8 <__assert_fail@plt+0x70a4>
   18894:	mov	sl, #1
   18898:	b	187b0 <__assert_fail@plt+0x705c>
   1889c:	strd	r4, [sp, #-16]!
   188a0:	str	r6, [sp, #8]
   188a4:	str	lr, [sp, #12]
   188a8:	sub	sp, sp, #8
   188ac:	mov	r5, r0
   188b0:	mov	r2, #5
   188b4:	mov	r1, r0
   188b8:	mov	r0, #0
   188bc:	bl	11430 <dcgettext@plt>
   188c0:	mov	r4, r0
   188c4:	cmp	r5, r0
   188c8:	beq	188dc <__assert_fail@plt+0x7188>
   188cc:	mov	r1, r5
   188d0:	bl	17ed4 <__assert_fail@plt+0x6780>
   188d4:	cmp	r0, #0
   188d8:	beq	188f4 <__assert_fail@plt+0x71a0>
   188dc:	mov	r0, r4
   188e0:	add	sp, sp, #8
   188e4:	ldrd	r4, [sp]
   188e8:	ldr	r6, [sp, #8]
   188ec:	add	sp, sp, #12
   188f0:	pop	{pc}		; (ldr pc, [sp], #4)
   188f4:	mov	r0, r4
   188f8:	bl	115b0 <strlen@plt>
   188fc:	mov	r6, r0
   18900:	mov	r0, r5
   18904:	bl	115b0 <strlen@plt>
   18908:	add	r0, r6, r0
   1890c:	add	r0, r0, #4
   18910:	bl	1bd70 <__assert_fail@plt+0xa61c>
   18914:	mov	r6, r0
   18918:	str	r5, [sp, #4]
   1891c:	str	r4, [sp]
   18920:	movw	r3, #9332	; 0x2474
   18924:	movt	r3, #2
   18928:	mvn	r2, #0
   1892c:	mov	r1, #1
   18930:	bl	115f8 <__sprintf_chk@plt>
   18934:	mov	r4, r6
   18938:	b	188dc <__assert_fail@plt+0x7188>
   1893c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18940:	strd	r6, [sp, #8]
   18944:	strd	r8, [sp, #16]
   18948:	strd	sl, [sp, #24]
   1894c:	str	lr, [sp, #32]
   18950:	sub	sp, sp, #12
   18954:	mov	r7, r0
   18958:	mov	r4, r1
   1895c:	mov	r2, #5
   18960:	mov	r1, r0
   18964:	mov	r0, #0
   18968:	bl	11430 <dcgettext@plt>
   1896c:	mov	r8, r0
   18970:	bl	1c6e8 <__assert_fail@plt+0xaf94>
   18974:	mov	fp, r0
   18978:	movw	r1, #9340	; 0x247c
   1897c:	movt	r1, #2
   18980:	bl	1c40c <__assert_fail@plt+0xacb8>
   18984:	cmp	r0, #0
   18988:	moveq	sl, r4
   1898c:	moveq	r5, #0
   18990:	moveq	r9, r5
   18994:	bne	189f0 <__assert_fail@plt+0x729c>
   18998:	cmp	r4, #0
   1899c:	movne	r6, r4
   189a0:	beq	18ac0 <__assert_fail@plt+0x736c>
   189a4:	mov	r1, r7
   189a8:	mov	r0, r8
   189ac:	bl	11388 <strcmp@plt>
   189b0:	cmp	r0, #0
   189b4:	bne	18ad0 <__assert_fail@plt+0x737c>
   189b8:	cmp	r9, #0
   189bc:	cmpne	r9, r6
   189c0:	bne	18bb4 <__assert_fail@plt+0x7460>
   189c4:	cmp	r5, #0
   189c8:	cmpne	r5, r6
   189cc:	bne	18bc0 <__assert_fail@plt+0x746c>
   189d0:	mov	r0, r6
   189d4:	add	sp, sp, #12
   189d8:	ldrd	r4, [sp]
   189dc:	ldrd	r6, [sp, #8]
   189e0:	ldrd	r8, [sp, #16]
   189e4:	ldrd	sl, [sp, #24]
   189e8:	add	sp, sp, #32
   189ec:	pop	{pc}		; (ldr pc, [sp], #4)
   189f0:	movw	r5, #9340	; 0x247c
   189f4:	movt	r5, #2
   189f8:	mov	r2, fp
   189fc:	mov	r1, r5
   18a00:	mov	r0, r4
   18a04:	bl	1c2c8 <__assert_fail@plt+0xab74>
   18a08:	mov	r9, r0
   18a0c:	mov	r0, fp
   18a10:	bl	115b0 <strlen@plt>
   18a14:	mov	sl, r0
   18a18:	add	r0, r0, #11
   18a1c:	bl	1bd70 <__assert_fail@plt+0xa61c>
   18a20:	mov	r6, r0
   18a24:	mov	r2, sl
   18a28:	mov	r1, fp
   18a2c:	bl	113f4 <memcpy@plt>
   18a30:	add	r2, r6, sl
   18a34:	movw	r3, #9348	; 0x2484
   18a38:	movt	r3, #2
   18a3c:	ldr	r0, [r3]
   18a40:	ldr	r1, [r3, #4]
   18a44:	str	r0, [r6, sl]
   18a48:	str	r1, [r2, #4]
   18a4c:	ldrh	r1, [r3, #8]
   18a50:	strh	r1, [r2, #8]
   18a54:	ldrb	r3, [r3, #10]
   18a58:	strb	r3, [r2, #10]
   18a5c:	mov	r2, r6
   18a60:	mov	r1, r5
   18a64:	mov	r0, r4
   18a68:	bl	1c2c8 <__assert_fail@plt+0xab74>
   18a6c:	mov	r5, r0
   18a70:	mov	r0, r6
   18a74:	bl	17c94 <__assert_fail@plt+0x6540>
   18a78:	cmp	r5, #0
   18a7c:	beq	18ab4 <__assert_fail@plt+0x7360>
   18a80:	mov	r1, #63	; 0x3f
   18a84:	mov	r0, r5
   18a88:	bl	115bc <strchr@plt>
   18a8c:	cmp	r0, #0
   18a90:	moveq	sl, r5
   18a94:	moveq	r4, r9
   18a98:	beq	18998 <__assert_fail@plt+0x7244>
   18a9c:	mov	r0, r5
   18aa0:	bl	17c94 <__assert_fail@plt+0x6540>
   18aa4:	mov	r4, r9
   18aa8:	mov	r5, #0
   18aac:	mov	sl, r5
   18ab0:	b	18998 <__assert_fail@plt+0x7244>
   18ab4:	mov	sl, r5
   18ab8:	mov	r4, r9
   18abc:	b	18998 <__assert_fail@plt+0x7244>
   18ac0:	cmp	sl, #0
   18ac4:	movne	r6, sl
   18ac8:	moveq	r6, r7
   18acc:	b	189a4 <__assert_fail@plt+0x7250>
   18ad0:	mov	r1, r7
   18ad4:	mov	r0, r8
   18ad8:	bl	17ed4 <__assert_fail@plt+0x6780>
   18adc:	cmp	r0, #0
   18ae0:	bne	18b1c <__assert_fail@plt+0x73c8>
   18ae4:	cmp	r4, #0
   18ae8:	beq	18b00 <__assert_fail@plt+0x73ac>
   18aec:	mov	r1, r4
   18af0:	mov	r0, r8
   18af4:	bl	17ed4 <__assert_fail@plt+0x6780>
   18af8:	cmp	r0, #0
   18afc:	bne	18b1c <__assert_fail@plt+0x73c8>
   18b00:	cmp	sl, #0
   18b04:	beq	18b48 <__assert_fail@plt+0x73f4>
   18b08:	mov	r1, sl
   18b0c:	mov	r0, r8
   18b10:	bl	17ed4 <__assert_fail@plt+0x6780>
   18b14:	cmp	r0, #0
   18b18:	beq	18b48 <__assert_fail@plt+0x73f4>
   18b1c:	cmp	r9, #0
   18b20:	beq	18b2c <__assert_fail@plt+0x73d8>
   18b24:	mov	r0, r9
   18b28:	bl	17c94 <__assert_fail@plt+0x6540>
   18b2c:	cmp	r5, #0
   18b30:	moveq	r6, r8
   18b34:	beq	189d0 <__assert_fail@plt+0x727c>
   18b38:	mov	r0, r5
   18b3c:	bl	17c94 <__assert_fail@plt+0x6540>
   18b40:	mov	r6, r8
   18b44:	b	189d0 <__assert_fail@plt+0x727c>
   18b48:	mov	r0, r8
   18b4c:	bl	115b0 <strlen@plt>
   18b50:	mov	r4, r0
   18b54:	mov	r0, r6
   18b58:	bl	115b0 <strlen@plt>
   18b5c:	add	r0, r4, r0
   18b60:	add	r0, r0, #4
   18b64:	bl	1bd70 <__assert_fail@plt+0xa61c>
   18b68:	mov	r4, r0
   18b6c:	str	r6, [sp, #4]
   18b70:	str	r8, [sp]
   18b74:	movw	r3, #9332	; 0x2474
   18b78:	movt	r3, #2
   18b7c:	mvn	r2, #0
   18b80:	mov	r1, #1
   18b84:	bl	115f8 <__sprintf_chk@plt>
   18b88:	cmp	r9, #0
   18b8c:	beq	18b98 <__assert_fail@plt+0x7444>
   18b90:	mov	r0, r9
   18b94:	bl	17c94 <__assert_fail@plt+0x6540>
   18b98:	cmp	r5, #0
   18b9c:	moveq	r6, r4
   18ba0:	beq	189d0 <__assert_fail@plt+0x727c>
   18ba4:	mov	r0, r5
   18ba8:	bl	17c94 <__assert_fail@plt+0x6540>
   18bac:	mov	r6, r4
   18bb0:	b	189d0 <__assert_fail@plt+0x727c>
   18bb4:	mov	r0, r9
   18bb8:	bl	17c94 <__assert_fail@plt+0x6540>
   18bbc:	b	189c4 <__assert_fail@plt+0x7270>
   18bc0:	mov	r0, r5
   18bc4:	bl	17c94 <__assert_fail@plt+0x6540>
   18bc8:	b	189d0 <__assert_fail@plt+0x727c>
   18bcc:	mov	r2, #0
   18bd0:	mov	r3, #0
   18bd4:	strd	r2, [r0]
   18bd8:	strd	r2, [r0, #8]
   18bdc:	strd	r2, [r0, #16]
   18be0:	strd	r2, [r0, #24]
   18be4:	strd	r2, [r0, #32]
   18be8:	strd	r2, [r0, #40]	; 0x28
   18bec:	cmp	r1, #10
   18bf0:	beq	18bfc <__assert_fail@plt+0x74a8>
   18bf4:	str	r1, [r0]
   18bf8:	bx	lr
   18bfc:	str	r4, [sp, #-8]!
   18c00:	str	lr, [sp, #4]
   18c04:	bl	11748 <abort@plt>
   18c08:	strd	r4, [sp, #-16]!
   18c0c:	str	r6, [sp, #8]
   18c10:	str	lr, [sp, #12]
   18c14:	mov	r5, r0
   18c18:	mov	r6, r1
   18c1c:	mov	r2, #5
   18c20:	mov	r1, r0
   18c24:	mov	r0, #0
   18c28:	bl	11430 <dcgettext@plt>
   18c2c:	mov	r4, r0
   18c30:	cmp	r5, r0
   18c34:	beq	18c4c <__assert_fail@plt+0x74f8>
   18c38:	mov	r0, r4
   18c3c:	ldrd	r4, [sp]
   18c40:	ldr	r6, [sp, #8]
   18c44:	add	sp, sp, #12
   18c48:	pop	{pc}		; (ldr pc, [sp], #4)
   18c4c:	bl	1c6e8 <__assert_fail@plt+0xaf94>
   18c50:	ldrb	r3, [r0]
   18c54:	bic	r3, r3, #32
   18c58:	cmp	r3, #85	; 0x55
   18c5c:	bne	18ce0 <__assert_fail@plt+0x758c>
   18c60:	ldrb	r3, [r0, #1]
   18c64:	bic	r3, r3, #32
   18c68:	cmp	r3, #84	; 0x54
   18c6c:	bne	18ca4 <__assert_fail@plt+0x7550>
   18c70:	ldrb	r3, [r0, #2]
   18c74:	bic	r3, r3, #32
   18c78:	cmp	r3, #70	; 0x46
   18c7c:	bne	18ca4 <__assert_fail@plt+0x7550>
   18c80:	ldrb	r3, [r0, #3]
   18c84:	cmp	r3, #45	; 0x2d
   18c88:	bne	18ca4 <__assert_fail@plt+0x7550>
   18c8c:	ldrb	r3, [r0, #4]
   18c90:	cmp	r3, #56	; 0x38
   18c94:	bne	18ca4 <__assert_fail@plt+0x7550>
   18c98:	ldrb	r3, [r0, #5]
   18c9c:	cmp	r3, #0
   18ca0:	beq	18cc0 <__assert_fail@plt+0x756c>
   18ca4:	movw	r4, #9444	; 0x24e4
   18ca8:	movt	r4, #2
   18cac:	movw	r3, #9464	; 0x24f8
   18cb0:	movt	r3, #2
   18cb4:	cmp	r6, #9
   18cb8:	movne	r4, r3
   18cbc:	b	18c38 <__assert_fail@plt+0x74e4>
   18cc0:	ldrb	r2, [r4]
   18cc4:	movw	r4, #9460	; 0x24f4
   18cc8:	movt	r4, #2
   18ccc:	movw	r3, #9448	; 0x24e8
   18cd0:	movt	r3, #2
   18cd4:	cmp	r2, #96	; 0x60
   18cd8:	movne	r4, r3
   18cdc:	b	18c38 <__assert_fail@plt+0x74e4>
   18ce0:	cmp	r3, #71	; 0x47
   18ce4:	bne	18ca4 <__assert_fail@plt+0x7550>
   18ce8:	ldrb	r3, [r0, #1]
   18cec:	bic	r3, r3, #32
   18cf0:	cmp	r3, #66	; 0x42
   18cf4:	bne	18ca4 <__assert_fail@plt+0x7550>
   18cf8:	ldrb	r3, [r0, #2]
   18cfc:	cmp	r3, #49	; 0x31
   18d00:	bne	18ca4 <__assert_fail@plt+0x7550>
   18d04:	ldrb	r3, [r0, #3]
   18d08:	cmp	r3, #56	; 0x38
   18d0c:	bne	18ca4 <__assert_fail@plt+0x7550>
   18d10:	ldrb	r3, [r0, #4]
   18d14:	cmp	r3, #48	; 0x30
   18d18:	bne	18ca4 <__assert_fail@plt+0x7550>
   18d1c:	ldrb	r3, [r0, #5]
   18d20:	cmp	r3, #51	; 0x33
   18d24:	bne	18ca4 <__assert_fail@plt+0x7550>
   18d28:	ldrb	r3, [r0, #6]
   18d2c:	cmp	r3, #48	; 0x30
   18d30:	bne	18ca4 <__assert_fail@plt+0x7550>
   18d34:	ldrb	r3, [r0, #7]
   18d38:	cmp	r3, #0
   18d3c:	bne	18ca4 <__assert_fail@plt+0x7550>
   18d40:	ldrb	r2, [r4]
   18d44:	movw	r4, #9456	; 0x24f0
   18d48:	movt	r4, #2
   18d4c:	movw	r3, #9452	; 0x24ec
   18d50:	movt	r3, #2
   18d54:	cmp	r2, #96	; 0x60
   18d58:	movne	r4, r3
   18d5c:	b	18c38 <__assert_fail@plt+0x74e4>
   18d60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d64:	strd	r6, [sp, #8]
   18d68:	strd	r8, [sp, #16]
   18d6c:	strd	sl, [sp, #24]
   18d70:	str	lr, [sp, #32]
   18d74:	sub	sp, sp, #116	; 0x74
   18d78:	str	r0, [sp, #64]	; 0x40
   18d7c:	mov	r8, r1
   18d80:	str	r2, [sp, #48]	; 0x30
   18d84:	str	r3, [sp, #24]
   18d88:	ldr	r7, [sp, #152]	; 0x98
   18d8c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   18d90:	str	r0, [sp, #76]	; 0x4c
   18d94:	ldr	r3, [sp, #156]	; 0x9c
   18d98:	ubfx	r3, r3, #1, #1
   18d9c:	str	r3, [sp, #32]
   18da0:	mov	r3, #1
   18da4:	str	r3, [sp, #40]	; 0x28
   18da8:	mov	r3, #0
   18dac:	str	r3, [sp, #68]	; 0x44
   18db0:	str	r3, [sp, #36]	; 0x24
   18db4:	str	r3, [sp, #28]
   18db8:	str	r3, [sp, #52]	; 0x34
   18dbc:	str	r3, [sp, #60]	; 0x3c
   18dc0:	str	r3, [sp, #72]	; 0x48
   18dc4:	movw	r3, #9468	; 0x24fc
   18dc8:	movt	r3, #2
   18dcc:	str	r3, [sp, #80]	; 0x50
   18dd0:	mov	r9, r8
   18dd4:	mov	sl, r7
   18dd8:	cmp	sl, #10
   18ddc:	ldrls	pc, [pc, sl, lsl #2]
   18de0:	b	18fa4 <__assert_fail@plt+0x7850>
   18de4:	andeq	r8, r1, r4, asr #28
   18de8:	andeq	r8, r1, r8, lsl lr
   18dec:	andeq	r8, r1, ip, ror pc
   18df0:	andeq	r8, r1, r0, lsl lr
   18df4:	andeq	r8, r1, r0, lsr pc
   18df8:	andeq	r8, r1, r4, asr lr
   18dfc:	andeq	sl, r1, r0, lsr #4
   18e00:	andeq	r8, r1, r8, lsr #31
   18e04:	muleq	r1, r0, lr
   18e08:	muleq	r1, r0, lr
   18e0c:	muleq	r1, r0, lr
   18e10:	mov	r3, #1
   18e14:	str	r3, [sp, #28]
   18e18:	mov	r3, #1
   18e1c:	str	r3, [sp, #32]
   18e20:	str	r3, [sp, #52]	; 0x34
   18e24:	movw	r3, #9464	; 0x24f8
   18e28:	movt	r3, #2
   18e2c:	str	r3, [sp, #60]	; 0x3c
   18e30:	mov	fp, #0
   18e34:	mov	sl, #2
   18e38:	mov	r6, #0
   18e3c:	ldr	r8, [sp, #64]	; 0x40
   18e40:	b	196b8 <__assert_fail@plt+0x7f64>
   18e44:	mov	fp, sl
   18e48:	mov	r3, #0
   18e4c:	str	r3, [sp, #32]
   18e50:	b	18e38 <__assert_fail@plt+0x76e4>
   18e54:	ldr	r3, [sp, #32]
   18e58:	cmp	r3, #0
   18e5c:	bne	18fbc <__assert_fail@plt+0x7868>
   18e60:	cmp	r9, #0
   18e64:	beq	18fe0 <__assert_fail@plt+0x788c>
   18e68:	mov	r3, #34	; 0x22
   18e6c:	ldr	r2, [sp, #64]	; 0x40
   18e70:	strb	r3, [r2]
   18e74:	mov	fp, #1
   18e78:	str	fp, [sp, #28]
   18e7c:	str	fp, [sp, #52]	; 0x34
   18e80:	movw	r3, #9444	; 0x24e4
   18e84:	movt	r3, #2
   18e88:	str	r3, [sp, #60]	; 0x3c
   18e8c:	b	18e38 <__assert_fail@plt+0x76e4>
   18e90:	cmp	sl, #10
   18e94:	bne	18ec8 <__assert_fail@plt+0x7774>
   18e98:	ldr	r3, [sp, #32]
   18e9c:	cmp	r3, #0
   18ea0:	movne	fp, #0
   18ea4:	beq	18ef0 <__assert_fail@plt+0x779c>
   18ea8:	ldr	r0, [sp, #168]	; 0xa8
   18eac:	bl	115b0 <strlen@plt>
   18eb0:	str	r0, [sp, #52]	; 0x34
   18eb4:	ldr	r3, [sp, #168]	; 0xa8
   18eb8:	str	r3, [sp, #60]	; 0x3c
   18ebc:	mov	r3, #1
   18ec0:	str	r3, [sp, #28]
   18ec4:	b	18e38 <__assert_fail@plt+0x76e4>
   18ec8:	mov	r1, sl
   18ecc:	ldr	r0, [sp, #80]	; 0x50
   18ed0:	bl	18c08 <__assert_fail@plt+0x74b4>
   18ed4:	str	r0, [sp, #164]	; 0xa4
   18ed8:	mov	r1, sl
   18edc:	movw	r0, #9464	; 0x24f8
   18ee0:	movt	r0, #2
   18ee4:	bl	18c08 <__assert_fail@plt+0x74b4>
   18ee8:	str	r0, [sp, #168]	; 0xa8
   18eec:	b	18e98 <__assert_fail@plt+0x7744>
   18ef0:	ldr	r3, [sp, #164]	; 0xa4
   18ef4:	ldrb	r3, [r3]
   18ef8:	cmp	r3, #0
   18efc:	beq	18f28 <__assert_fail@plt+0x77d4>
   18f00:	ldr	r2, [sp, #164]	; 0xa4
   18f04:	mov	fp, #0
   18f08:	ldr	r1, [sp, #64]	; 0x40
   18f0c:	cmp	r9, fp
   18f10:	strbhi	r3, [r1, fp]
   18f14:	add	fp, fp, #1
   18f18:	ldrb	r3, [r2, #1]!
   18f1c:	cmp	r3, #0
   18f20:	bne	18f0c <__assert_fail@plt+0x77b8>
   18f24:	b	18ea8 <__assert_fail@plt+0x7754>
   18f28:	mov	fp, #0
   18f2c:	b	18ea8 <__assert_fail@plt+0x7754>
   18f30:	ldr	r3, [sp, #32]
   18f34:	cmp	r3, #0
   18f38:	bne	18e18 <__assert_fail@plt+0x76c4>
   18f3c:	mov	r3, #1
   18f40:	str	r3, [sp, #28]
   18f44:	cmp	r9, #0
   18f48:	beq	18ffc <__assert_fail@plt+0x78a8>
   18f4c:	mov	r3, #39	; 0x27
   18f50:	ldr	r2, [sp, #64]	; 0x40
   18f54:	strb	r3, [r2]
   18f58:	mov	r3, #0
   18f5c:	str	r3, [sp, #32]
   18f60:	mov	fp, #1
   18f64:	str	fp, [sp, #52]	; 0x34
   18f68:	movw	r3, #9464	; 0x24f8
   18f6c:	movt	r3, #2
   18f70:	str	r3, [sp, #60]	; 0x3c
   18f74:	mov	sl, #2
   18f78:	b	18e38 <__assert_fail@plt+0x76e4>
   18f7c:	ldr	r3, [sp, #32]
   18f80:	cmp	r3, #0
   18f84:	beq	18f44 <__assert_fail@plt+0x77f0>
   18f88:	mov	r3, #1
   18f8c:	str	r3, [sp, #52]	; 0x34
   18f90:	movw	r3, #9464	; 0x24f8
   18f94:	movt	r3, #2
   18f98:	str	r3, [sp, #60]	; 0x3c
   18f9c:	mov	fp, #0
   18fa0:	b	18e38 <__assert_fail@plt+0x76e4>
   18fa4:	bl	11748 <abort@plt>
   18fa8:	mov	fp, #0
   18fac:	str	fp, [sp, #32]
   18fb0:	mov	r3, #1
   18fb4:	str	r3, [sp, #28]
   18fb8:	b	18e38 <__assert_fail@plt+0x76e4>
   18fbc:	ldr	r3, [sp, #32]
   18fc0:	str	r3, [sp, #28]
   18fc4:	mov	r3, #1
   18fc8:	str	r3, [sp, #52]	; 0x34
   18fcc:	movw	r3, #9444	; 0x24e4
   18fd0:	movt	r3, #2
   18fd4:	str	r3, [sp, #60]	; 0x3c
   18fd8:	mov	fp, #0
   18fdc:	b	18e38 <__assert_fail@plt+0x76e4>
   18fe0:	mov	fp, #1
   18fe4:	str	fp, [sp, #28]
   18fe8:	str	fp, [sp, #52]	; 0x34
   18fec:	movw	r3, #9444	; 0x24e4
   18ff0:	movt	r3, #2
   18ff4:	str	r3, [sp, #60]	; 0x3c
   18ff8:	b	18e38 <__assert_fail@plt+0x76e4>
   18ffc:	mov	r3, #0
   19000:	str	r3, [sp, #32]
   19004:	mov	fp, #1
   19008:	str	fp, [sp, #52]	; 0x34
   1900c:	movw	r3, #9464	; 0x24f8
   19010:	movt	r3, #2
   19014:	str	r3, [sp, #60]	; 0x3c
   19018:	mov	sl, #2
   1901c:	b	18e38 <__assert_fail@plt+0x76e4>
   19020:	mov	r3, r2
   19024:	add	r4, r6, r2
   19028:	ldr	r2, [sp, #24]
   1902c:	cmp	r3, #1
   19030:	movls	r3, #0
   19034:	movhi	r3, #1
   19038:	cmn	r2, #1
   1903c:	movne	r3, #0
   19040:	cmp	r3, #0
   19044:	beq	19054 <__assert_fail@plt+0x7900>
   19048:	ldr	r0, [sp, #48]	; 0x30
   1904c:	bl	115b0 <strlen@plt>
   19050:	str	r0, [sp, #24]
   19054:	ldr	r3, [sp, #24]
   19058:	cmp	r4, r3
   1905c:	bhi	1a248 <__assert_fail@plt+0x8af4>
   19060:	ldr	r3, [sp, #48]	; 0x30
   19064:	add	r4, r3, r6
   19068:	ldr	r2, [sp, #52]	; 0x34
   1906c:	ldr	r1, [sp, #60]	; 0x3c
   19070:	mov	r0, r4
   19074:	bl	11418 <memcmp@plt>
   19078:	cmp	r0, #0
   1907c:	bne	1a248 <__assert_fail@plt+0x8af4>
   19080:	ldr	r3, [sp, #32]
   19084:	cmp	r3, #0
   19088:	bne	19298 <__assert_fail@plt+0x7b44>
   1908c:	ldrb	r4, [r4]
   19090:	cmp	r4, #126	; 0x7e
   19094:	ldrls	pc, [pc, r4, lsl #2]
   19098:	b	19b4c <__assert_fail@plt+0x83f8>
   1909c:	ldrdeq	r9, [r1], -ip
   190a0:	andeq	r9, r1, ip, asr #22
   190a4:	andeq	r9, r1, ip, asr #22
   190a8:	andeq	r9, r1, ip, asr #22
   190ac:	andeq	r9, r1, ip, asr #22
   190b0:	andeq	r9, r1, ip, asr #22
   190b4:	andeq	r9, r1, ip, asr #22
   190b8:	strdeq	r9, [r1], -r4
   190bc:	andeq	r9, r1, r8, ror r5
   190c0:	andeq	r9, r1, ip, lsl r9
   190c4:	andeq	r9, r1, r8, asr #19
   190c8:	andeq	r9, r1, r0, lsr r9
   190cc:	andeq	r9, r1, ip, lsl #11
   190d0:	andeq	r9, r1, r0, lsr #11
   190d4:	andeq	r9, r1, ip, asr #22
   190d8:	andeq	r9, r1, ip, asr #22
   190dc:	andeq	r9, r1, ip, asr #22
   190e0:	andeq	r9, r1, ip, asr #22
   190e4:	andeq	r9, r1, ip, asr #22
   190e8:	andeq	r9, r1, ip, asr #22
   190ec:	andeq	r9, r1, ip, asr #22
   190f0:	andeq	r9, r1, ip, asr #22
   190f4:	andeq	r9, r1, ip, asr #22
   190f8:	andeq	r9, r1, ip, asr #22
   190fc:	andeq	r9, r1, ip, asr #22
   19100:	andeq	r9, r1, ip, asr #22
   19104:	andeq	r9, r1, ip, asr #22
   19108:	andeq	r9, r1, ip, asr #22
   1910c:	andeq	r9, r1, ip, asr #22
   19110:	andeq	r9, r1, ip, asr #22
   19114:	andeq	r9, r1, ip, asr #22
   19118:	andeq	r9, r1, ip, asr #22
   1911c:	andeq	r9, r1, r8, ror #20
   19120:	andeq	r9, r1, ip, lsl #21
   19124:	andeq	r9, r1, ip, lsl #21
   19128:	andeq	r9, r1, r4, lsr #20
   1912c:	andeq	r9, r1, ip, lsl #21
   19130:	andeq	r9, r1, ip, lsr #31
   19134:	andeq	r9, r1, ip, lsl #21
   19138:	andeq	r9, r1, ip, lsr #21
   1913c:	andeq	r9, r1, ip, lsl #21
   19140:	andeq	r9, r1, ip, lsl #21
   19144:	andeq	r9, r1, ip, lsl #21
   19148:	andeq	r9, r1, ip, lsr #31
   1914c:	andeq	r9, r1, ip, lsr #31
   19150:	andeq	r9, r1, ip, lsr #31
   19154:	andeq	r9, r1, ip, lsr #31
   19158:	andeq	r9, r1, ip, lsr #31
   1915c:	andeq	r9, r1, ip, lsr #31
   19160:	andeq	r9, r1, ip, lsr #31
   19164:	andeq	r9, r1, ip, lsr #31
   19168:	andeq	r9, r1, ip, lsr #31
   1916c:	andeq	r9, r1, ip, lsr #31
   19170:	andeq	r9, r1, ip, lsr #31
   19174:	andeq	r9, r1, ip, lsr #31
   19178:	andeq	r9, r1, ip, lsr #31
   1917c:	andeq	r9, r1, ip, lsr #31
   19180:	andeq	r9, r1, ip, lsr #31
   19184:	andeq	r9, r1, ip, lsr #31
   19188:	andeq	r9, r1, ip, lsl #21
   1918c:	andeq	r9, r1, ip, lsl #21
   19190:	andeq	r9, r1, ip, lsl #21
   19194:	andeq	r9, r1, ip, lsl #21
   19198:	andeq	r9, r1, ip, lsl #8
   1919c:	andeq	r9, r1, ip, asr #22
   191a0:	andeq	r9, r1, ip, lsr #31
   191a4:	andeq	r9, r1, ip, lsr #31
   191a8:	andeq	r9, r1, ip, lsr #31
   191ac:	andeq	r9, r1, ip, lsr #31
   191b0:	andeq	r9, r1, ip, lsr #31
   191b4:	andeq	r9, r1, ip, lsr #31
   191b8:	andeq	r9, r1, ip, lsr #31
   191bc:	andeq	r9, r1, ip, lsr #31
   191c0:	andeq	r9, r1, ip, lsr #31
   191c4:	andeq	r9, r1, ip, lsr #31
   191c8:	andeq	r9, r1, ip, lsr #31
   191cc:	andeq	r9, r1, ip, lsr #31
   191d0:	andeq	r9, r1, ip, lsr #31
   191d4:	andeq	r9, r1, ip, lsr #31
   191d8:	andeq	r9, r1, ip, lsr #31
   191dc:	andeq	r9, r1, ip, lsr #31
   191e0:	andeq	r9, r1, ip, lsr #31
   191e4:	andeq	r9, r1, ip, lsr #31
   191e8:	andeq	r9, r1, ip, lsr #31
   191ec:	andeq	r9, r1, ip, lsr #31
   191f0:	andeq	r9, r1, ip, lsr #31
   191f4:	andeq	r9, r1, ip, lsr #31
   191f8:	andeq	r9, r1, ip, lsr #31
   191fc:	andeq	r9, r1, ip, lsr #31
   19200:	andeq	r9, r1, ip, lsr #31
   19204:	andeq	r9, r1, ip, lsr #31
   19208:	andeq	r9, r1, ip, lsl #21
   1920c:	andeq	r9, r1, r4, asr #18
   19210:	andeq	r9, r1, ip, lsr #31
   19214:	andeq	r9, r1, ip, lsl #21
   19218:	andeq	r9, r1, ip, lsr #31
   1921c:	andeq	r9, r1, ip, lsl #21
   19220:	andeq	r9, r1, ip, lsr #31
   19224:	andeq	r9, r1, ip, lsr #31
   19228:	andeq	r9, r1, ip, lsr #31
   1922c:	andeq	r9, r1, ip, lsr #31
   19230:	andeq	r9, r1, ip, lsr #31
   19234:	andeq	r9, r1, ip, lsr #31
   19238:	andeq	r9, r1, ip, lsr #31
   1923c:	andeq	r9, r1, ip, lsr #31
   19240:	andeq	r9, r1, ip, lsr #31
   19244:	andeq	r9, r1, ip, lsr #31
   19248:	andeq	r9, r1, ip, lsr #31
   1924c:	andeq	r9, r1, ip, lsr #31
   19250:	andeq	r9, r1, ip, lsr #31
   19254:	andeq	r9, r1, ip, lsr #31
   19258:	andeq	r9, r1, ip, lsr #31
   1925c:	andeq	r9, r1, ip, lsr #31
   19260:	andeq	r9, r1, ip, lsr #31
   19264:	andeq	r9, r1, ip, lsr #31
   19268:	andeq	r9, r1, ip, lsr #31
   1926c:	andeq	r9, r1, ip, lsr #31
   19270:	andeq	r9, r1, ip, lsr #31
   19274:	andeq	r9, r1, ip, lsr #31
   19278:	andeq	r9, r1, ip, lsr #31
   1927c:	andeq	r9, r1, ip, lsr #31
   19280:	andeq	r9, r1, ip, lsr #31
   19284:	andeq	r9, r1, ip, lsr #31
   19288:	andeq	r9, r1, r4, lsl #20
   1928c:	andeq	r9, r1, ip, lsl #21
   19290:	andeq	r9, r1, r4, lsl #20
   19294:	andeq	r9, r1, r4, lsr #20
   19298:	mov	r8, r9
   1929c:	mov	r7, sl
   192a0:	b	1a1a0 <__assert_fail@plt+0x8a4c>
   192a4:	ldr	r3, [sp, #28]
   192a8:	cmp	r3, #0
   192ac:	bne	192cc <__assert_fail@plt+0x7b78>
   192b0:	ldr	r3, [sp, #156]	; 0x9c
   192b4:	tst	r3, #1
   192b8:	bne	196b4 <__assert_fail@plt+0x7f60>
   192bc:	ldr	r3, [sp, #28]
   192c0:	str	r3, [sp, #44]	; 0x2c
   192c4:	mov	r5, r3
   192c8:	b	195d4 <__assert_fail@plt+0x7e80>
   192cc:	ldr	r3, [sp, #32]
   192d0:	cmp	r3, #0
   192d4:	bne	1a150 <__assert_fail@plt+0x89fc>
   192d8:	str	r3, [sp, #44]	; 0x2c
   192dc:	ldr	r3, [sp, #36]	; 0x24
   192e0:	eor	r3, r3, #1
   192e4:	cmp	sl, #2
   192e8:	movne	r3, #0
   192ec:	andeq	r3, r3, #1
   192f0:	cmp	r3, #0
   192f4:	beq	1934c <__assert_fail@plt+0x7bf8>
   192f8:	cmp	r9, fp
   192fc:	movhi	r2, #39	; 0x27
   19300:	strbhi	r2, [r8, fp]
   19304:	add	r2, fp, #1
   19308:	cmp	r9, r2
   1930c:	movhi	r1, #36	; 0x24
   19310:	strbhi	r1, [r8, r2]
   19314:	add	r2, fp, #2
   19318:	cmp	r9, r2
   1931c:	movhi	r1, #39	; 0x27
   19320:	strbhi	r1, [r8, r2]
   19324:	add	r2, fp, #3
   19328:	cmp	r9, r2
   1932c:	bls	1a20c <__assert_fail@plt+0x8ab8>
   19330:	mov	r1, #92	; 0x5c
   19334:	strb	r1, [r8, r2]
   19338:	add	fp, fp, #4
   1933c:	str	r3, [sp, #36]	; 0x24
   19340:	mov	r5, #0
   19344:	mov	r4, #48	; 0x30
   19348:	b	19620 <__assert_fail@plt+0x7ecc>
   1934c:	cmp	r9, fp
   19350:	bhi	19378 <__assert_fail@plt+0x7c24>
   19354:	add	r1, fp, #1
   19358:	ldr	r2, [sp, #56]	; 0x38
   1935c:	cmp	r2, #0
   19360:	bne	193a0 <__assert_fail@plt+0x7c4c>
   19364:	mov	r3, r5
   19368:	ldr	r5, [sp, #56]	; 0x38
   1936c:	mov	fp, r1
   19370:	mov	r4, #48	; 0x30
   19374:	b	195d4 <__assert_fail@plt+0x7e80>
   19378:	mov	r2, #92	; 0x5c
   1937c:	strb	r2, [r8, fp]
   19380:	add	r1, fp, #1
   19384:	ldr	r2, [sp, #56]	; 0x38
   19388:	cmp	r2, #0
   1938c:	moveq	r3, r5
   19390:	moveq	r5, r2
   19394:	moveq	fp, r1
   19398:	moveq	r4, #48	; 0x30
   1939c:	beq	19620 <__assert_fail@plt+0x7ecc>
   193a0:	add	r2, r6, #1
   193a4:	ldr	r0, [sp, #24]
   193a8:	cmp	r2, r0
   193ac:	bcs	193c8 <__assert_fail@plt+0x7c74>
   193b0:	ldr	r0, [sp, #48]	; 0x30
   193b4:	ldrb	r2, [r0, r2]
   193b8:	sub	r2, r2, #48	; 0x30
   193bc:	uxtb	r2, r2
   193c0:	cmp	r2, #9
   193c4:	bls	193e0 <__assert_fail@plt+0x7c8c>
   193c8:	mov	r2, r3
   193cc:	mov	r3, r5
   193d0:	mov	r5, r2
   193d4:	mov	fp, r1
   193d8:	mov	r4, #48	; 0x30
   193dc:	b	195f8 <__assert_fail@plt+0x7ea4>
   193e0:	cmp	r9, r1
   193e4:	movhi	r2, #48	; 0x30
   193e8:	strbhi	r2, [r8, r1]
   193ec:	add	r2, fp, #2
   193f0:	cmp	r9, r2
   193f4:	movhi	r1, #48	; 0x30
   193f8:	strbhi	r1, [r8, r2]
   193fc:	add	r1, fp, #3
   19400:	b	193c8 <__assert_fail@plt+0x7c74>
   19404:	mov	r3, #0
   19408:	str	r3, [sp, #44]	; 0x2c
   1940c:	cmp	sl, #2
   19410:	beq	1942c <__assert_fail@plt+0x7cd8>
   19414:	cmp	sl, #5
   19418:	beq	19444 <__assert_fail@plt+0x7cf0>
   1941c:	mov	r5, #0
   19420:	mov	r3, r5
   19424:	mov	r4, #63	; 0x3f
   19428:	b	195d4 <__assert_fail@plt+0x7e80>
   1942c:	ldr	r3, [sp, #32]
   19430:	cmp	r3, #0
   19434:	bne	1a15c <__assert_fail@plt+0x8a08>
   19438:	mov	r5, r3
   1943c:	mov	r4, #63	; 0x3f
   19440:	b	19b3c <__assert_fail@plt+0x83e8>
   19444:	ldr	r3, [sp, #156]	; 0x9c
   19448:	tst	r3, #4
   1944c:	beq	19f74 <__assert_fail@plt+0x8820>
   19450:	add	r2, r6, #2
   19454:	ldr	r3, [sp, #24]
   19458:	cmp	r2, r3
   1945c:	bcs	19f84 <__assert_fail@plt+0x8830>
   19460:	ldr	r3, [sp, #48]	; 0x30
   19464:	add	r3, r3, r6
   19468:	ldrb	r4, [r3, #1]
   1946c:	cmp	r4, #63	; 0x3f
   19470:	movne	r5, #0
   19474:	movne	r3, r5
   19478:	movne	r4, #63	; 0x3f
   1947c:	bne	195d4 <__assert_fail@plt+0x7e80>
   19480:	ldr	r3, [sp, #48]	; 0x30
   19484:	ldrb	r1, [r3, r2]
   19488:	sub	r3, r1, #33	; 0x21
   1948c:	cmp	r3, #29
   19490:	ldrls	pc, [pc, r3, lsl #2]
   19494:	b	19f94 <__assert_fail@plt+0x8840>
   19498:	andeq	r9, r1, r0, lsl r5
   1949c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194a0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194a4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194a8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194ac:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194b0:	andeq	r9, r1, r0, lsl r5
   194b4:	andeq	r9, r1, r0, lsl r5
   194b8:	andeq	r9, r1, r0, lsl r5
   194bc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194c0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194c4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194c8:	andeq	r9, r1, r0, lsl r5
   194cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194d0:	andeq	r9, r1, r0, lsl r5
   194d4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194d8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194dc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194e0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194e4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194e8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194ec:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194f0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194f4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194f8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   194fc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   19500:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   19504:	andeq	r9, r1, r0, lsl r5
   19508:	andeq	r9, r1, r0, lsl r5
   1950c:	andeq	r9, r1, r0, lsl r5
   19510:	ldr	r3, [sp, #32]
   19514:	cmp	r3, #0
   19518:	bne	1a200 <__assert_fail@plt+0x8aac>
   1951c:	cmp	r9, fp
   19520:	movhi	r3, #63	; 0x3f
   19524:	strbhi	r3, [r8, fp]
   19528:	add	r3, fp, #1
   1952c:	cmp	r9, r3
   19530:	movhi	r0, #34	; 0x22
   19534:	strbhi	r0, [r8, r3]
   19538:	add	r3, fp, #2
   1953c:	cmp	r9, r3
   19540:	movhi	r0, #34	; 0x22
   19544:	strbhi	r0, [r8, r3]
   19548:	add	r3, fp, #3
   1954c:	cmp	r9, r3
   19550:	movhi	r0, #63	; 0x3f
   19554:	strbhi	r0, [r8, r3]
   19558:	add	fp, fp, #4
   1955c:	ldr	r3, [sp, #32]
   19560:	mov	r5, r3
   19564:	mov	r4, r1
   19568:	mov	r6, r2
   1956c:	b	195d4 <__assert_fail@plt+0x7e80>
   19570:	mov	r3, #0
   19574:	str	r3, [sp, #44]	; 0x2c
   19578:	mov	r4, #8
   1957c:	mov	r3, #98	; 0x62
   19580:	b	195c0 <__assert_fail@plt+0x7e6c>
   19584:	mov	r3, #0
   19588:	str	r3, [sp, #44]	; 0x2c
   1958c:	mov	r4, #12
   19590:	mov	r3, #102	; 0x66
   19594:	b	195c0 <__assert_fail@plt+0x7e6c>
   19598:	mov	r3, #0
   1959c:	str	r3, [sp, #44]	; 0x2c
   195a0:	mov	r4, #13
   195a4:	mov	r3, #114	; 0x72
   195a8:	ldr	r2, [sp, #32]
   195ac:	cmp	sl, #2
   195b0:	movne	r2, #0
   195b4:	andeq	r2, r2, #1
   195b8:	cmp	r2, #0
   195bc:	bne	199e0 <__assert_fail@plt+0x828c>
   195c0:	ldr	r2, [sp, #28]
   195c4:	cmp	r2, #0
   195c8:	bne	19fc8 <__assert_fail@plt+0x8874>
   195cc:	mov	r5, r2
   195d0:	mov	r3, r2
   195d4:	ldr	r2, [sp, #28]
   195d8:	eor	r2, r2, #1
   195dc:	cmp	sl, #2
   195e0:	orreq	r2, r2, #1
   195e4:	eor	r2, r2, #1
   195e8:	ldr	r1, [sp, #32]
   195ec:	orr	r2, r1, r2
   195f0:	tst	r2, #255	; 0xff
   195f4:	beq	19620 <__assert_fail@plt+0x7ecc>
   195f8:	ldr	r2, [sp, #160]	; 0xa0
   195fc:	cmp	r2, #0
   19600:	beq	19620 <__assert_fail@plt+0x7ecc>
   19604:	ubfx	r1, r4, #5, #8
   19608:	and	r2, r4, #31
   1960c:	ldr	r0, [sp, #160]	; 0xa0
   19610:	ldr	r1, [r0, r1, lsl #2]
   19614:	lsr	r2, r1, r2
   19618:	tst	r2, #1
   1961c:	bne	1962c <__assert_fail@plt+0x7ed8>
   19620:	ldr	r2, [sp, #44]	; 0x2c
   19624:	cmp	r2, #0
   19628:	beq	19980 <__assert_fail@plt+0x822c>
   1962c:	ldr	r3, [sp, #32]
   19630:	cmp	r3, #0
   19634:	bne	1a180 <__assert_fail@plt+0x8a2c>
   19638:	ldr	r3, [sp, #36]	; 0x24
   1963c:	eor	r3, r3, #1
   19640:	cmp	sl, #2
   19644:	movne	r3, #0
   19648:	andeq	r3, r3, #1
   1964c:	cmp	r3, #0
   19650:	beq	19688 <__assert_fail@plt+0x7f34>
   19654:	cmp	r9, fp
   19658:	movhi	r2, #39	; 0x27
   1965c:	strbhi	r2, [r8, fp]
   19660:	add	r2, fp, #1
   19664:	cmp	r9, r2
   19668:	movhi	r1, #36	; 0x24
   1966c:	strbhi	r1, [r8, r2]
   19670:	add	r2, fp, #2
   19674:	cmp	r9, r2
   19678:	movhi	r1, #39	; 0x27
   1967c:	strbhi	r1, [r8, r2]
   19680:	add	fp, fp, #3
   19684:	str	r3, [sp, #36]	; 0x24
   19688:	cmp	r9, fp
   1968c:	movhi	r3, #92	; 0x5c
   19690:	strbhi	r3, [r8, fp]
   19694:	add	fp, fp, #1
   19698:	cmp	fp, r9
   1969c:	strbcc	r4, [r8, fp]
   196a0:	add	fp, fp, #1
   196a4:	cmp	r5, #0
   196a8:	ldr	r3, [sp, #40]	; 0x28
   196ac:	moveq	r3, r5
   196b0:	str	r3, [sp, #40]	; 0x28
   196b4:	add	r6, r6, #1
   196b8:	ldr	r3, [sp, #24]
   196bc:	cmn	r3, #1
   196c0:	beq	19ff0 <__assert_fail@plt+0x889c>
   196c4:	ldr	r3, [sp, #24]
   196c8:	subs	r5, r3, r6
   196cc:	movne	r5, #1
   196d0:	cmp	r5, #0
   196d4:	beq	1a004 <__assert_fail@plt+0x88b0>
   196d8:	ldr	r3, [sp, #28]
   196dc:	cmp	sl, #2
   196e0:	moveq	r3, #0
   196e4:	andne	r3, r3, #1
   196e8:	str	r3, [sp, #56]	; 0x38
   196ec:	ldr	r2, [sp, #52]	; 0x34
   196f0:	adds	r7, r2, #0
   196f4:	movne	r7, #1
   196f8:	ands	r3, r3, r7
   196fc:	str	r3, [sp, #44]	; 0x2c
   19700:	bne	19020 <__assert_fail@plt+0x78cc>
   19704:	ldr	r3, [sp, #48]	; 0x30
   19708:	ldrb	r4, [r3, r6]
   1970c:	cmp	r4, #126	; 0x7e
   19710:	ldrls	pc, [pc, r4, lsl #2]
   19714:	b	19b4c <__assert_fail@plt+0x83f8>
   19718:	andeq	r9, r1, r4, lsr #5
   1971c:	andeq	r9, r1, ip, asr #22
   19720:	andeq	r9, r1, ip, asr #22
   19724:	andeq	r9, r1, ip, asr #22
   19728:	andeq	r9, r1, ip, asr #22
   1972c:	andeq	r9, r1, ip, asr #22
   19730:	andeq	r9, r1, ip, asr #22
   19734:	andeq	r9, r1, ip, ror #19
   19738:	andeq	r9, r1, r8, ror r5
   1973c:	andeq	r9, r1, ip, lsl r9
   19740:	andeq	r9, r1, r0, asr #19
   19744:	andeq	r9, r1, r0, lsr r9
   19748:	andeq	r9, r1, ip, lsl #11
   1974c:	andeq	r9, r1, r0, lsr #11
   19750:	andeq	r9, r1, ip, asr #22
   19754:	andeq	r9, r1, ip, asr #22
   19758:	andeq	r9, r1, ip, asr #22
   1975c:	andeq	r9, r1, ip, asr #22
   19760:	andeq	r9, r1, ip, asr #22
   19764:	andeq	r9, r1, ip, asr #22
   19768:	andeq	r9, r1, ip, asr #22
   1976c:	andeq	r9, r1, ip, asr #22
   19770:	andeq	r9, r1, ip, asr #22
   19774:	andeq	r9, r1, ip, asr #22
   19778:	andeq	r9, r1, ip, asr #22
   1977c:	andeq	r9, r1, ip, asr #22
   19780:	andeq	r9, r1, ip, asr #22
   19784:	andeq	r9, r1, ip, asr #22
   19788:	andeq	r9, r1, ip, asr #22
   1978c:	andeq	r9, r1, ip, asr #22
   19790:	andeq	r9, r1, ip, asr #22
   19794:	andeq	r9, r1, ip, asr #22
   19798:	andeq	r9, r1, r8, ror #20
   1979c:	andeq	r9, r1, r4, ror #20
   197a0:	andeq	r9, r1, r4, ror #20
   197a4:	andeq	r9, r1, r4, lsr #20
   197a8:	andeq	r9, r1, r4, ror #20
   197ac:	andeq	r9, r1, ip, ror #30
   197b0:	andeq	r9, r1, r4, ror #20
   197b4:	andeq	r9, r1, ip, lsr #21
   197b8:	andeq	r9, r1, r4, ror #20
   197bc:	andeq	r9, r1, r4, ror #20
   197c0:	andeq	r9, r1, r4, ror #20
   197c4:	andeq	r9, r1, ip, ror #30
   197c8:	andeq	r9, r1, ip, ror #30
   197cc:	andeq	r9, r1, ip, ror #30
   197d0:	andeq	r9, r1, ip, ror #30
   197d4:	andeq	r9, r1, ip, ror #30
   197d8:	andeq	r9, r1, ip, ror #30
   197dc:	andeq	r9, r1, ip, ror #30
   197e0:	andeq	r9, r1, ip, ror #30
   197e4:	andeq	r9, r1, ip, ror #30
   197e8:	andeq	r9, r1, ip, ror #30
   197ec:	andeq	r9, r1, ip, ror #30
   197f0:	andeq	r9, r1, ip, ror #30
   197f4:	andeq	r9, r1, ip, ror #30
   197f8:	andeq	r9, r1, ip, ror #30
   197fc:	andeq	r9, r1, ip, ror #30
   19800:	andeq	r9, r1, ip, ror #30
   19804:	andeq	r9, r1, r4, ror #20
   19808:	andeq	r9, r1, r4, ror #20
   1980c:	andeq	r9, r1, r4, ror #20
   19810:	andeq	r9, r1, r4, ror #20
   19814:	andeq	r9, r1, ip, lsl #8
   19818:	andeq	r9, r1, ip, asr #22
   1981c:	andeq	r9, r1, ip, ror #30
   19820:	andeq	r9, r1, ip, ror #30
   19824:	andeq	r9, r1, ip, ror #30
   19828:	andeq	r9, r1, ip, ror #30
   1982c:	andeq	r9, r1, ip, ror #30
   19830:	andeq	r9, r1, ip, ror #30
   19834:	andeq	r9, r1, ip, ror #30
   19838:	andeq	r9, r1, ip, ror #30
   1983c:	andeq	r9, r1, ip, ror #30
   19840:	andeq	r9, r1, ip, ror #30
   19844:	andeq	r9, r1, ip, ror #30
   19848:	andeq	r9, r1, ip, ror #30
   1984c:	andeq	r9, r1, ip, ror #30
   19850:	andeq	r9, r1, ip, ror #30
   19854:	andeq	r9, r1, ip, ror #30
   19858:	andeq	r9, r1, ip, ror #30
   1985c:	andeq	r9, r1, ip, ror #30
   19860:	andeq	r9, r1, ip, ror #30
   19864:	andeq	r9, r1, ip, ror #30
   19868:	andeq	r9, r1, ip, ror #30
   1986c:	andeq	r9, r1, ip, ror #30
   19870:	andeq	r9, r1, ip, ror #30
   19874:	andeq	r9, r1, ip, ror #30
   19878:	andeq	r9, r1, ip, ror #30
   1987c:	andeq	r9, r1, ip, ror #30
   19880:	andeq	r9, r1, ip, ror #30
   19884:	andeq	r9, r1, r4, ror #20
   19888:	andeq	r9, r1, r4, asr #18
   1988c:	andeq	r9, r1, ip, ror #30
   19890:	andeq	r9, r1, r4, ror #20
   19894:	andeq	r9, r1, ip, ror #30
   19898:	andeq	r9, r1, r4, ror #20
   1989c:	andeq	r9, r1, ip, ror #30
   198a0:	andeq	r9, r1, ip, ror #30
   198a4:	andeq	r9, r1, ip, ror #30
   198a8:	andeq	r9, r1, ip, ror #30
   198ac:	andeq	r9, r1, ip, ror #30
   198b0:	andeq	r9, r1, ip, ror #30
   198b4:	andeq	r9, r1, ip, ror #30
   198b8:	andeq	r9, r1, ip, ror #30
   198bc:	andeq	r9, r1, ip, ror #30
   198c0:	andeq	r9, r1, ip, ror #30
   198c4:	andeq	r9, r1, ip, ror #30
   198c8:	andeq	r9, r1, ip, ror #30
   198cc:	andeq	r9, r1, ip, ror #30
   198d0:	andeq	r9, r1, ip, ror #30
   198d4:	andeq	r9, r1, ip, ror #30
   198d8:	andeq	r9, r1, ip, ror #30
   198dc:	andeq	r9, r1, ip, ror #30
   198e0:	andeq	r9, r1, ip, ror #30
   198e4:	andeq	r9, r1, ip, ror #30
   198e8:	andeq	r9, r1, ip, ror #30
   198ec:	andeq	r9, r1, ip, ror #30
   198f0:	andeq	r9, r1, ip, ror #30
   198f4:	andeq	r9, r1, ip, ror #30
   198f8:	andeq	r9, r1, ip, ror #30
   198fc:	andeq	r9, r1, ip, ror #30
   19900:	andeq	r9, r1, ip, ror #30
   19904:	andeq	r9, r1, r4, lsl #20
   19908:	andeq	r9, r1, r4, ror #20
   1990c:	andeq	r9, r1, r4, lsl #20
   19910:	andeq	r9, r1, r4, lsr #20
   19914:	mov	r3, #0
   19918:	str	r3, [sp, #44]	; 0x2c
   1991c:	mov	r4, #9
   19920:	mov	r3, #116	; 0x74
   19924:	b	195a8 <__assert_fail@plt+0x7e54>
   19928:	mov	r3, #0
   1992c:	str	r3, [sp, #44]	; 0x2c
   19930:	mov	r4, #11
   19934:	mov	r3, #118	; 0x76
   19938:	b	195c0 <__assert_fail@plt+0x7e6c>
   1993c:	mov	r3, #0
   19940:	str	r3, [sp, #44]	; 0x2c
   19944:	cmp	sl, #2
   19948:	beq	1996c <__assert_fail@plt+0x8218>
   1994c:	ldr	r3, [sp, #28]
   19950:	ldr	r2, [sp, #32]
   19954:	and	r3, r3, r2
   19958:	tst	r7, r3
   1995c:	bne	19fe0 <__assert_fail@plt+0x888c>
   19960:	mov	r4, #92	; 0x5c
   19964:	mov	r3, r4
   19968:	b	195c0 <__assert_fail@plt+0x7e6c>
   1996c:	ldr	r3, [sp, #32]
   19970:	cmp	r3, #0
   19974:	bne	1a168 <__assert_fail@plt+0x8a14>
   19978:	mov	r5, r3
   1997c:	mov	r4, #92	; 0x5c
   19980:	eor	r3, r3, #1
   19984:	ldr	r2, [sp, #36]	; 0x24
   19988:	and	r3, r3, r2
   1998c:	tst	r3, #255	; 0xff
   19990:	beq	19698 <__assert_fail@plt+0x7f44>
   19994:	cmp	r9, fp
   19998:	movhi	r3, #39	; 0x27
   1999c:	strbhi	r3, [r8, fp]
   199a0:	add	r3, fp, #1
   199a4:	cmp	r9, r3
   199a8:	movhi	r2, #39	; 0x27
   199ac:	strbhi	r2, [r8, r3]
   199b0:	add	fp, fp, #2
   199b4:	mov	r3, #0
   199b8:	str	r3, [sp, #36]	; 0x24
   199bc:	b	19698 <__assert_fail@plt+0x7f44>
   199c0:	mov	r3, #110	; 0x6e
   199c4:	b	195a8 <__assert_fail@plt+0x7e54>
   199c8:	mov	r3, #110	; 0x6e
   199cc:	b	195a8 <__assert_fail@plt+0x7e54>
   199d0:	mov	r3, #0
   199d4:	str	r3, [sp, #44]	; 0x2c
   199d8:	mov	r3, #110	; 0x6e
   199dc:	b	195a8 <__assert_fail@plt+0x7e54>
   199e0:	mov	r8, r9
   199e4:	mov	r7, #2
   199e8:	b	1a188 <__assert_fail@plt+0x8a34>
   199ec:	mov	r3, #97	; 0x61
   199f0:	b	195c0 <__assert_fail@plt+0x7e6c>
   199f4:	mov	r3, #97	; 0x61
   199f8:	b	195c0 <__assert_fail@plt+0x7e6c>
   199fc:	mov	r3, #0
   19a00:	str	r3, [sp, #44]	; 0x2c
   19a04:	ldr	r3, [sp, #24]
   19a08:	cmn	r3, #1
   19a0c:	beq	19a38 <__assert_fail@plt+0x82e4>
   19a10:	ldr	r3, [sp, #24]
   19a14:	subs	r3, r3, #1
   19a18:	movne	r3, #1
   19a1c:	cmp	r3, #0
   19a20:	bne	19fa0 <__assert_fail@plt+0x884c>
   19a24:	cmp	r6, #0
   19a28:	beq	19a68 <__assert_fail@plt+0x8314>
   19a2c:	mov	r5, #0
   19a30:	mov	r3, r5
   19a34:	b	195d4 <__assert_fail@plt+0x7e80>
   19a38:	ldr	r3, [sp, #48]	; 0x30
   19a3c:	ldrb	r3, [r3, #1]
   19a40:	adds	r3, r3, #0
   19a44:	movne	r3, #1
   19a48:	b	19a1c <__assert_fail@plt+0x82c8>
   19a4c:	mov	r3, #0
   19a50:	str	r3, [sp, #44]	; 0x2c
   19a54:	b	19a24 <__assert_fail@plt+0x82d0>
   19a58:	mov	r3, #0
   19a5c:	str	r3, [sp, #44]	; 0x2c
   19a60:	b	19a68 <__assert_fail@plt+0x8314>
   19a64:	ldr	r5, [sp, #44]	; 0x2c
   19a68:	ldr	r3, [sp, #32]
   19a6c:	cmp	sl, #2
   19a70:	movne	r3, #0
   19a74:	andeq	r3, r3, #1
   19a78:	cmp	r3, #0
   19a7c:	beq	195d4 <__assert_fail@plt+0x7e80>
   19a80:	mov	r8, r9
   19a84:	mov	r7, #2
   19a88:	b	1a188 <__assert_fail@plt+0x8a34>
   19a8c:	ldr	r5, [sp, #32]
   19a90:	b	19a68 <__assert_fail@plt+0x8314>
   19a94:	mov	r3, #0
   19a98:	str	r3, [sp, #44]	; 0x2c
   19a9c:	mov	r5, r3
   19aa0:	b	19a68 <__assert_fail@plt+0x8314>
   19aa4:	mov	r3, #0
   19aa8:	str	r3, [sp, #44]	; 0x2c
   19aac:	cmp	sl, #2
   19ab0:	strne	r5, [sp, #68]	; 0x44
   19ab4:	movne	r3, #0
   19ab8:	movne	r4, #39	; 0x27
   19abc:	bne	195d4 <__assert_fail@plt+0x7e80>
   19ac0:	ldr	r3, [sp, #32]
   19ac4:	cmp	r3, #0
   19ac8:	bne	1a174 <__assert_fail@plt+0x8a20>
   19acc:	ldr	r3, [sp, #72]	; 0x48
   19ad0:	clz	r3, r3
   19ad4:	lsr	r3, r3, #5
   19ad8:	cmp	r9, #0
   19adc:	moveq	r3, #0
   19ae0:	cmp	r3, #0
   19ae4:	movne	r3, #0
   19ae8:	bne	19b10 <__assert_fail@plt+0x83bc>
   19aec:	cmp	r9, fp
   19af0:	movhi	r3, #39	; 0x27
   19af4:	strbhi	r3, [r8, fp]
   19af8:	add	r3, fp, #1
   19afc:	cmp	r9, r3
   19b00:	movhi	r2, #92	; 0x5c
   19b04:	strbhi	r2, [r8, r3]
   19b08:	mov	r3, r9
   19b0c:	ldr	r9, [sp, #72]	; 0x48
   19b10:	add	r2, fp, #2
   19b14:	cmp	r2, r3
   19b18:	movcc	r1, #39	; 0x27
   19b1c:	strbcc	r1, [r8, r2]
   19b20:	add	fp, fp, #3
   19b24:	str	r5, [sp, #68]	; 0x44
   19b28:	ldr	r2, [sp, #32]
   19b2c:	str	r2, [sp, #36]	; 0x24
   19b30:	str	r9, [sp, #72]	; 0x48
   19b34:	mov	r9, r3
   19b38:	mov	r4, #39	; 0x27
   19b3c:	mov	r3, #0
   19b40:	b	19620 <__assert_fail@plt+0x7ecc>
   19b44:	mov	r3, #0
   19b48:	str	r3, [sp, #44]	; 0x2c
   19b4c:	ldr	r7, [sp, #76]	; 0x4c
   19b50:	cmp	r7, #1
   19b54:	bne	19b8c <__assert_fail@plt+0x8438>
   19b58:	bl	1158c <__ctype_b_loc@plt>
   19b5c:	ldr	r2, [r0]
   19b60:	lsl	r3, r4, #1
   19b64:	ldrh	r5, [r2, r3]
   19b68:	ubfx	r5, r5, #14, #1
   19b6c:	mov	ip, r7
   19b70:	eor	r3, r5, #1
   19b74:	ldr	r2, [sp, #28]
   19b78:	and	r3, r3, r2
   19b7c:	ands	r3, r3, #255	; 0xff
   19b80:	beq	195d4 <__assert_fail@plt+0x7e80>
   19b84:	mov	r5, #0
   19b88:	b	19de8 <__assert_fail@plt+0x8694>
   19b8c:	mov	r2, #0
   19b90:	mov	r3, #0
   19b94:	strd	r2, [sp, #104]	; 0x68
   19b98:	ldr	r3, [sp, #24]
   19b9c:	cmn	r3, #1
   19ba0:	beq	19bc4 <__assert_fail@plt+0x8470>
   19ba4:	mov	r3, #0
   19ba8:	str	r4, [sp, #88]	; 0x58
   19bac:	str	fp, [sp, #92]	; 0x5c
   19bb0:	str	r8, [sp, #56]	; 0x38
   19bb4:	mov	r8, r3
   19bb8:	str	r9, [sp, #84]	; 0x54
   19bbc:	ldr	r9, [sp, #48]	; 0x30
   19bc0:	b	19d10 <__assert_fail@plt+0x85bc>
   19bc4:	ldr	r0, [sp, #48]	; 0x30
   19bc8:	bl	115b0 <strlen@plt>
   19bcc:	str	r0, [sp, #24]
   19bd0:	b	19ba4 <__assert_fail@plt+0x8450>
   19bd4:	mov	r1, fp
   19bd8:	ldr	r4, [sp, #88]	; 0x58
   19bdc:	mov	r2, r8
   19be0:	mov	ip, r8
   19be4:	ldr	fp, [sp, #92]	; 0x5c
   19be8:	ldr	r8, [sp, #56]	; 0x38
   19bec:	ldr	r9, [sp, #84]	; 0x54
   19bf0:	ldr	r0, [sp, #24]
   19bf4:	cmp	r7, r0
   19bf8:	bcs	19db0 <__assert_fail@plt+0x865c>
   19bfc:	ldrb	r3, [r1]
   19c00:	cmp	r3, #0
   19c04:	beq	19db8 <__assert_fail@plt+0x8664>
   19c08:	mov	r3, r1
   19c0c:	add	r2, r2, #1
   19c10:	add	r1, r6, r2
   19c14:	cmp	r0, r1
   19c18:	bls	19dc0 <__assert_fail@plt+0x866c>
   19c1c:	ldrb	r1, [r3, #1]!
   19c20:	cmp	r1, #0
   19c24:	bne	19c0c <__assert_fail@plt+0x84b8>
   19c28:	mov	ip, r2
   19c2c:	mov	r5, #0
   19c30:	b	19de0 <__assert_fail@plt+0x868c>
   19c34:	ldr	r3, [sp, #56]	; 0x38
   19c38:	str	r3, [sp, #64]	; 0x40
   19c3c:	ldr	r8, [sp, #84]	; 0x54
   19c40:	mov	r7, #2
   19c44:	b	1a188 <__assert_fail@plt+0x8a34>
   19c48:	cmp	r2, r7
   19c4c:	beq	19cec <__assert_fail@plt+0x8598>
   19c50:	ldrb	r3, [r2], #1
   19c54:	sub	r3, r3, #91	; 0x5b
   19c58:	cmp	r3, #33	; 0x21
   19c5c:	ldrls	pc, [pc, r3, lsl #2]
   19c60:	b	19c48 <__assert_fail@plt+0x84f4>
   19c64:	andeq	r9, r1, r4, lsr ip
   19c68:	andeq	r9, r1, r4, lsr ip
   19c6c:	andeq	r9, r1, r8, asr #24
   19c70:	andeq	r9, r1, r4, lsr ip
   19c74:	andeq	r9, r1, r8, asr #24
   19c78:	andeq	r9, r1, r4, lsr ip
   19c7c:	andeq	r9, r1, r8, asr #24
   19c80:	andeq	r9, r1, r8, asr #24
   19c84:	andeq	r9, r1, r8, asr #24
   19c88:	andeq	r9, r1, r8, asr #24
   19c8c:	andeq	r9, r1, r8, asr #24
   19c90:	andeq	r9, r1, r8, asr #24
   19c94:	andeq	r9, r1, r8, asr #24
   19c98:	andeq	r9, r1, r8, asr #24
   19c9c:	andeq	r9, r1, r8, asr #24
   19ca0:	andeq	r9, r1, r8, asr #24
   19ca4:	andeq	r9, r1, r8, asr #24
   19ca8:	andeq	r9, r1, r8, asr #24
   19cac:	andeq	r9, r1, r8, asr #24
   19cb0:	andeq	r9, r1, r8, asr #24
   19cb4:	andeq	r9, r1, r8, asr #24
   19cb8:	andeq	r9, r1, r8, asr #24
   19cbc:	andeq	r9, r1, r8, asr #24
   19cc0:	andeq	r9, r1, r8, asr #24
   19cc4:	andeq	r9, r1, r8, asr #24
   19cc8:	andeq	r9, r1, r8, asr #24
   19ccc:	andeq	r9, r1, r8, asr #24
   19cd0:	andeq	r9, r1, r8, asr #24
   19cd4:	andeq	r9, r1, r8, asr #24
   19cd8:	andeq	r9, r1, r8, asr #24
   19cdc:	andeq	r9, r1, r8, asr #24
   19ce0:	andeq	r9, r1, r8, asr #24
   19ce4:	andeq	r9, r1, r8, asr #24
   19ce8:	andeq	r9, r1, r4, lsr ip
   19cec:	ldr	r0, [sp, #100]	; 0x64
   19cf0:	bl	114cc <iswprint@plt>
   19cf4:	cmp	r0, #0
   19cf8:	moveq	r5, #0
   19cfc:	add	r8, r8, r4
   19d00:	add	r0, sp, #104	; 0x68
   19d04:	bl	1140c <mbsinit@plt>
   19d08:	cmp	r0, #0
   19d0c:	bne	19d7c <__assert_fail@plt+0x8628>
   19d10:	add	r7, r6, r8
   19d14:	add	fp, r9, r7
   19d18:	add	r3, sp, #104	; 0x68
   19d1c:	ldr	r2, [sp, #24]
   19d20:	sub	r2, r2, r7
   19d24:	mov	r1, fp
   19d28:	add	r0, sp, #100	; 0x64
   19d2c:	bl	1c7ec <__assert_fail@plt+0xb098>
   19d30:	subs	r4, r0, #0
   19d34:	beq	19dcc <__assert_fail@plt+0x8678>
   19d38:	cmn	r4, #1
   19d3c:	beq	19d94 <__assert_fail@plt+0x8640>
   19d40:	cmn	r4, #2
   19d44:	beq	19bd4 <__assert_fail@plt+0x8480>
   19d48:	ldr	r3, [sp, #32]
   19d4c:	cmp	sl, #2
   19d50:	movne	r3, #0
   19d54:	andeq	r3, r3, #1
   19d58:	cmp	r3, #0
   19d5c:	beq	19cec <__assert_fail@plt+0x8598>
   19d60:	cmp	r4, #1
   19d64:	bls	19cec <__assert_fail@plt+0x8598>
   19d68:	add	r2, r7, #1
   19d6c:	add	r2, r9, r2
   19d70:	add	r3, r9, r4
   19d74:	add	r7, r3, r7
   19d78:	b	19c50 <__assert_fail@plt+0x84fc>
   19d7c:	ldr	r4, [sp, #88]	; 0x58
   19d80:	mov	ip, r8
   19d84:	ldr	fp, [sp, #92]	; 0x5c
   19d88:	ldr	r8, [sp, #56]	; 0x38
   19d8c:	ldr	r9, [sp, #84]	; 0x54
   19d90:	b	19de0 <__assert_fail@plt+0x868c>
   19d94:	ldr	r4, [sp, #88]	; 0x58
   19d98:	mov	ip, r8
   19d9c:	ldr	fp, [sp, #92]	; 0x5c
   19da0:	ldr	r8, [sp, #56]	; 0x38
   19da4:	ldr	r9, [sp, #84]	; 0x54
   19da8:	mov	r5, #0
   19dac:	b	19de0 <__assert_fail@plt+0x868c>
   19db0:	mov	r5, #0
   19db4:	b	19de0 <__assert_fail@plt+0x868c>
   19db8:	mov	r5, #0
   19dbc:	b	19de0 <__assert_fail@plt+0x868c>
   19dc0:	mov	ip, r2
   19dc4:	mov	r5, #0
   19dc8:	b	19de0 <__assert_fail@plt+0x868c>
   19dcc:	ldr	r4, [sp, #88]	; 0x58
   19dd0:	mov	ip, r8
   19dd4:	ldr	fp, [sp, #92]	; 0x5c
   19dd8:	ldr	r8, [sp, #56]	; 0x38
   19ddc:	ldr	r9, [sp, #84]	; 0x54
   19de0:	cmp	ip, #1
   19de4:	bls	19b70 <__assert_fail@plt+0x841c>
   19de8:	add	lr, r6, ip
   19dec:	ldr	r3, [sp, #48]	; 0x30
   19df0:	add	r1, r3, r6
   19df4:	mov	r3, #0
   19df8:	eor	r0, r5, #1
   19dfc:	ldr	r2, [sp, #28]
   19e00:	and	r0, r0, r2
   19e04:	uxtb	r0, r0
   19e08:	str	r0, [sp, #56]	; 0x38
   19e0c:	mov	r7, #92	; 0x5c
   19e10:	ldr	ip, [sp, #36]	; 0x24
   19e14:	str	r5, [sp, #84]	; 0x54
   19e18:	ldr	r2, [sp, #44]	; 0x2c
   19e1c:	b	19e8c <__assert_fail@plt+0x8738>
   19e20:	cmp	r2, #0
   19e24:	beq	19e34 <__assert_fail@plt+0x86e0>
   19e28:	cmp	r9, fp
   19e2c:	strbhi	r7, [r8, fp]
   19e30:	add	fp, fp, #1
   19e34:	add	r5, r6, #1
   19e38:	cmp	r5, lr
   19e3c:	bcs	19f48 <__assert_fail@plt+0x87f4>
   19e40:	eor	r2, r3, #1
   19e44:	and	r2, r2, ip
   19e48:	ands	r2, r2, #255	; 0xff
   19e4c:	beq	19f64 <__assert_fail@plt+0x8810>
   19e50:	cmp	r9, fp
   19e54:	movhi	r2, #39	; 0x27
   19e58:	strbhi	r2, [r8, fp]
   19e5c:	add	r2, fp, #1
   19e60:	cmp	r9, r2
   19e64:	movhi	ip, #39	; 0x27
   19e68:	strbhi	ip, [r8, r2]
   19e6c:	add	fp, fp, #2
   19e70:	ldr	ip, [sp, #56]	; 0x38
   19e74:	mov	r2, ip
   19e78:	mov	r6, r5
   19e7c:	cmp	r9, fp
   19e80:	strbhi	r4, [r8, fp]
   19e84:	add	fp, fp, #1
   19e88:	ldrb	r4, [r1, #1]!
   19e8c:	cmp	r0, #0
   19e90:	beq	19e20 <__assert_fail@plt+0x86cc>
   19e94:	ldr	r3, [sp, #32]
   19e98:	cmp	r3, #0
   19e9c:	bne	1a130 <__assert_fail@plt+0x89dc>
   19ea0:	eor	r3, ip, #1
   19ea4:	cmp	sl, #2
   19ea8:	movne	r3, #0
   19eac:	andeq	r3, r3, #1
   19eb0:	cmp	r3, #0
   19eb4:	beq	19eec <__assert_fail@plt+0x8798>
   19eb8:	cmp	r9, fp
   19ebc:	movhi	ip, #39	; 0x27
   19ec0:	strbhi	ip, [r8, fp]
   19ec4:	add	ip, fp, #1
   19ec8:	cmp	r9, ip
   19ecc:	movhi	r5, #36	; 0x24
   19ed0:	strbhi	r5, [r8, ip]
   19ed4:	add	ip, fp, #2
   19ed8:	cmp	r9, ip
   19edc:	movhi	r5, #39	; 0x27
   19ee0:	strbhi	r5, [r8, ip]
   19ee4:	add	fp, fp, #3
   19ee8:	mov	ip, r3
   19eec:	cmp	r9, fp
   19ef0:	strbhi	r7, [r8, fp]
   19ef4:	add	r3, fp, #1
   19ef8:	cmp	r9, r3
   19efc:	bls	19f0c <__assert_fail@plt+0x87b8>
   19f00:	lsr	r5, r4, #6
   19f04:	add	r5, r5, #48	; 0x30
   19f08:	strb	r5, [r8, r3]
   19f0c:	add	r3, fp, #2
   19f10:	cmp	r9, r3
   19f14:	bls	19f24 <__assert_fail@plt+0x87d0>
   19f18:	ubfx	r5, r4, #3, #3
   19f1c:	add	r5, r5, #48	; 0x30
   19f20:	strb	r5, [r8, r3]
   19f24:	add	fp, fp, #3
   19f28:	and	r4, r4, #7
   19f2c:	add	r4, r4, #48	; 0x30
   19f30:	add	r5, r6, #1
   19f34:	cmp	r5, lr
   19f38:	bcs	19f54 <__assert_fail@plt+0x8800>
   19f3c:	ldr	r3, [sp, #56]	; 0x38
   19f40:	mov	r6, r5
   19f44:	b	19e7c <__assert_fail@plt+0x8728>
   19f48:	str	ip, [sp, #36]	; 0x24
   19f4c:	ldr	r5, [sp, #84]	; 0x54
   19f50:	b	19980 <__assert_fail@plt+0x822c>
   19f54:	str	ip, [sp, #36]	; 0x24
   19f58:	ldr	r5, [sp, #84]	; 0x54
   19f5c:	mov	r3, r0
   19f60:	b	19980 <__assert_fail@plt+0x822c>
   19f64:	mov	r6, r5
   19f68:	b	19e7c <__assert_fail@plt+0x8728>
   19f6c:	ldr	r3, [sp, #44]	; 0x2c
   19f70:	b	195d4 <__assert_fail@plt+0x7e80>
   19f74:	mov	r5, #0
   19f78:	mov	r3, r5
   19f7c:	mov	r4, #63	; 0x3f
   19f80:	b	195d4 <__assert_fail@plt+0x7e80>
   19f84:	mov	r5, #0
   19f88:	mov	r3, r5
   19f8c:	mov	r4, #63	; 0x3f
   19f90:	b	195d4 <__assert_fail@plt+0x7e80>
   19f94:	mov	r5, #0
   19f98:	mov	r3, r5
   19f9c:	b	195d4 <__assert_fail@plt+0x7e80>
   19fa0:	mov	r5, #0
   19fa4:	mov	r3, r5
   19fa8:	b	195d4 <__assert_fail@plt+0x7e80>
   19fac:	ldr	r5, [sp, #44]	; 0x2c
   19fb0:	ldr	r3, [sp, #32]
   19fb4:	b	195d4 <__assert_fail@plt+0x7e80>
   19fb8:	ldr	r5, [sp, #44]	; 0x2c
   19fbc:	mov	r3, #0
   19fc0:	str	r3, [sp, #44]	; 0x2c
   19fc4:	b	195d4 <__assert_fail@plt+0x7e80>
   19fc8:	mov	r4, r3
   19fcc:	mov	r5, #0
   19fd0:	b	1962c <__assert_fail@plt+0x7ed8>
   19fd4:	mov	r5, #0
   19fd8:	mov	r4, #97	; 0x61
   19fdc:	b	1962c <__assert_fail@plt+0x7ed8>
   19fe0:	mov	r5, #0
   19fe4:	mov	r3, r5
   19fe8:	mov	r4, #92	; 0x5c
   19fec:	b	19980 <__assert_fail@plt+0x822c>
   19ff0:	ldr	r3, [sp, #48]	; 0x30
   19ff4:	ldrb	r5, [r3, r6]
   19ff8:	adds	r5, r5, #0
   19ffc:	movne	r5, #1
   1a000:	b	196d0 <__assert_fail@plt+0x7f7c>
   1a004:	cmp	sl, #2
   1a008:	movne	r3, #0
   1a00c:	moveq	r3, #1
   1a010:	ldr	r1, [sp, #32]
   1a014:	cmp	fp, #0
   1a018:	andeq	r2, r3, r1
   1a01c:	movne	r2, #0
   1a020:	cmp	r2, #0
   1a024:	bne	1a144 <__assert_fail@plt+0x89f0>
   1a028:	eor	r2, r1, #1
   1a02c:	uxtb	r2, r2
   1a030:	and	r3, r3, r2
   1a034:	ldr	r1, [sp, #68]	; 0x44
   1a038:	ands	r3, r1, r3
   1a03c:	beq	1a0d0 <__assert_fail@plt+0x897c>
   1a040:	ldr	r2, [sp, #40]	; 0x28
   1a044:	cmp	r2, #0
   1a048:	bne	1a080 <__assert_fail@plt+0x892c>
   1a04c:	ldr	r2, [sp, #72]	; 0x48
   1a050:	adds	r2, r2, #0
   1a054:	movne	r2, #1
   1a058:	cmp	r9, #0
   1a05c:	movne	r2, #0
   1a060:	str	r2, [sp, #68]	; 0x44
   1a064:	mov	sl, #2
   1a068:	ldr	r1, [sp, #40]	; 0x28
   1a06c:	str	r1, [sp, #32]
   1a070:	cmp	r2, #0
   1a074:	beq	1a0c4 <__assert_fail@plt+0x8970>
   1a078:	ldr	r9, [sp, #72]	; 0x48
   1a07c:	b	18dd8 <__assert_fail@plt+0x7684>
   1a080:	ldr	r3, [sp, #168]	; 0xa8
   1a084:	str	r3, [sp, #16]
   1a088:	ldr	r3, [sp, #164]	; 0xa4
   1a08c:	str	r3, [sp, #12]
   1a090:	ldr	r3, [sp, #160]	; 0xa0
   1a094:	str	r3, [sp, #8]
   1a098:	ldr	r3, [sp, #156]	; 0x9c
   1a09c:	str	r3, [sp, #4]
   1a0a0:	mov	r3, #5
   1a0a4:	str	r3, [sp]
   1a0a8:	ldr	r3, [sp, #24]
   1a0ac:	ldr	r2, [sp, #48]	; 0x30
   1a0b0:	ldr	r1, [sp, #72]	; 0x48
   1a0b4:	ldr	r0, [sp, #64]	; 0x40
   1a0b8:	bl	18d60 <__assert_fail@plt+0x760c>
   1a0bc:	mov	fp, r0
   1a0c0:	b	1a1e0 <__assert_fail@plt+0x8a8c>
   1a0c4:	mov	r8, r9
   1a0c8:	mov	r2, r3
   1a0cc:	b	1a0d4 <__assert_fail@plt+0x8980>
   1a0d0:	mov	r8, r9
   1a0d4:	ldr	r3, [sp, #60]	; 0x3c
   1a0d8:	cmp	r3, #0
   1a0dc:	moveq	r2, #0
   1a0e0:	andne	r2, r2, #1
   1a0e4:	cmp	r2, #0
   1a0e8:	beq	1a118 <__assert_fail@plt+0x89c4>
   1a0ec:	mov	r2, r3
   1a0f0:	ldrb	r3, [r3]
   1a0f4:	cmp	r3, #0
   1a0f8:	beq	1a118 <__assert_fail@plt+0x89c4>
   1a0fc:	ldr	r1, [sp, #64]	; 0x40
   1a100:	cmp	r8, fp
   1a104:	strbhi	r3, [r1, fp]
   1a108:	add	fp, fp, #1
   1a10c:	ldrb	r3, [r2, #1]!
   1a110:	cmp	r3, #0
   1a114:	bne	1a100 <__assert_fail@plt+0x89ac>
   1a118:	cmp	r8, fp
   1a11c:	bls	1a1e0 <__assert_fail@plt+0x8a8c>
   1a120:	mov	r3, #0
   1a124:	ldr	r2, [sp, #64]	; 0x40
   1a128:	strb	r3, [r2, fp]
   1a12c:	b	1a1e0 <__assert_fail@plt+0x8a8c>
   1a130:	mov	r8, r9
   1a134:	mov	r7, sl
   1a138:	ldr	r3, [sp, #32]
   1a13c:	str	r3, [sp, #28]
   1a140:	b	1a188 <__assert_fail@plt+0x8a34>
   1a144:	mov	r8, r9
   1a148:	mov	r7, #2
   1a14c:	b	1a188 <__assert_fail@plt+0x8a34>
   1a150:	mov	r8, r9
   1a154:	mov	r7, sl
   1a158:	b	1a188 <__assert_fail@plt+0x8a34>
   1a15c:	mov	r8, r9
   1a160:	mov	r7, sl
   1a164:	b	1a188 <__assert_fail@plt+0x8a34>
   1a168:	mov	r8, r9
   1a16c:	mov	r7, sl
   1a170:	b	1a188 <__assert_fail@plt+0x8a34>
   1a174:	mov	r8, r9
   1a178:	mov	r7, sl
   1a17c:	b	1a188 <__assert_fail@plt+0x8a34>
   1a180:	mov	r8, r9
   1a184:	mov	r7, sl
   1a188:	ldr	r3, [sp, #28]
   1a18c:	cmp	r7, #2
   1a190:	movne	r3, #0
   1a194:	andeq	r3, r3, #1
   1a198:	cmp	r3, #0
   1a19c:	movne	r7, #4
   1a1a0:	ldr	r3, [sp, #168]	; 0xa8
   1a1a4:	str	r3, [sp, #16]
   1a1a8:	ldr	r3, [sp, #164]	; 0xa4
   1a1ac:	str	r3, [sp, #12]
   1a1b0:	mov	r3, #0
   1a1b4:	str	r3, [sp, #8]
   1a1b8:	ldr	r3, [sp, #156]	; 0x9c
   1a1bc:	bic	r3, r3, #2
   1a1c0:	str	r3, [sp, #4]
   1a1c4:	str	r7, [sp]
   1a1c8:	ldr	r3, [sp, #24]
   1a1cc:	ldr	r2, [sp, #48]	; 0x30
   1a1d0:	mov	r1, r8
   1a1d4:	ldr	r0, [sp, #64]	; 0x40
   1a1d8:	bl	18d60 <__assert_fail@plt+0x760c>
   1a1dc:	mov	fp, r0
   1a1e0:	mov	r0, fp
   1a1e4:	add	sp, sp, #116	; 0x74
   1a1e8:	ldrd	r4, [sp]
   1a1ec:	ldrd	r6, [sp, #8]
   1a1f0:	ldrd	r8, [sp, #16]
   1a1f4:	ldrd	sl, [sp, #24]
   1a1f8:	add	sp, sp, #32
   1a1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a200:	mov	r8, r9
   1a204:	mov	r7, sl
   1a208:	b	1a1a0 <__assert_fail@plt+0x8a4c>
   1a20c:	add	fp, fp, #4
   1a210:	str	r3, [sp, #36]	; 0x24
   1a214:	mov	r5, #0
   1a218:	mov	r4, #48	; 0x30
   1a21c:	b	195d4 <__assert_fail@plt+0x7e80>
   1a220:	mov	r3, #1
   1a224:	str	r3, [sp, #32]
   1a228:	str	r3, [sp, #28]
   1a22c:	str	r3, [sp, #52]	; 0x34
   1a230:	movw	r3, #9444	; 0x24e4
   1a234:	movt	r3, #2
   1a238:	str	r3, [sp, #60]	; 0x3c
   1a23c:	mov	fp, #0
   1a240:	mov	sl, #5
   1a244:	b	18e38 <__assert_fail@plt+0x76e4>
   1a248:	ldr	r3, [sp, #48]	; 0x30
   1a24c:	ldrb	r4, [r3, r6]
   1a250:	cmp	r4, #126	; 0x7e
   1a254:	ldrls	pc, [pc, r4, lsl #2]
   1a258:	b	19b44 <__assert_fail@plt+0x83f0>
   1a25c:	andeq	r9, r1, ip, asr #5
   1a260:	andeq	r9, r1, r4, asr #22
   1a264:	andeq	r9, r1, r4, asr #22
   1a268:	andeq	r9, r1, r4, asr #22
   1a26c:	andeq	r9, r1, r4, asr #22
   1a270:	andeq	r9, r1, r4, asr #22
   1a274:	andeq	r9, r1, r4, asr #22
   1a278:	ldrdeq	r9, [r1], -r4
   1a27c:	andeq	r9, r1, r0, ror r5
   1a280:	andeq	r9, r1, r4, lsl r9
   1a284:	ldrdeq	r9, [r1], -r0
   1a288:	andeq	r9, r1, r8, lsr #18
   1a28c:	andeq	r9, r1, r4, lsl #11
   1a290:	muleq	r1, r8, r5
   1a294:	andeq	r9, r1, r4, asr #22
   1a298:	andeq	r9, r1, r4, asr #22
   1a29c:	andeq	r9, r1, r4, asr #22
   1a2a0:	andeq	r9, r1, r4, asr #22
   1a2a4:	andeq	r9, r1, r4, asr #22
   1a2a8:	andeq	r9, r1, r4, asr #22
   1a2ac:	andeq	r9, r1, r4, asr #22
   1a2b0:	andeq	r9, r1, r4, asr #22
   1a2b4:	andeq	r9, r1, r4, asr #22
   1a2b8:	andeq	r9, r1, r4, asr #22
   1a2bc:	andeq	r9, r1, r4, asr #22
   1a2c0:	andeq	r9, r1, r4, asr #22
   1a2c4:	andeq	r9, r1, r4, asr #22
   1a2c8:	andeq	r9, r1, r4, asr #22
   1a2cc:	andeq	r9, r1, r4, asr #22
   1a2d0:	andeq	r9, r1, r4, asr #22
   1a2d4:	andeq	r9, r1, r4, asr #22
   1a2d8:	andeq	r9, r1, r4, asr #22
   1a2dc:	andeq	r9, r1, r8, asr sl
   1a2e0:	muleq	r1, r4, sl
   1a2e4:	muleq	r1, r4, sl
   1a2e8:	andeq	r9, r1, ip, asr #20
   1a2ec:	muleq	r1, r4, sl
   1a2f0:			; <UNDEFINED> instruction: 0x00019fb8
   1a2f4:	muleq	r1, r4, sl
   1a2f8:	andeq	r9, r1, r4, lsr #21
   1a2fc:	muleq	r1, r4, sl
   1a300:	muleq	r1, r4, sl
   1a304:	muleq	r1, r4, sl
   1a308:			; <UNDEFINED> instruction: 0x00019fb8
   1a30c:			; <UNDEFINED> instruction: 0x00019fb8
   1a310:			; <UNDEFINED> instruction: 0x00019fb8
   1a314:			; <UNDEFINED> instruction: 0x00019fb8
   1a318:			; <UNDEFINED> instruction: 0x00019fb8
   1a31c:			; <UNDEFINED> instruction: 0x00019fb8
   1a320:			; <UNDEFINED> instruction: 0x00019fb8
   1a324:			; <UNDEFINED> instruction: 0x00019fb8
   1a328:			; <UNDEFINED> instruction: 0x00019fb8
   1a32c:			; <UNDEFINED> instruction: 0x00019fb8
   1a330:			; <UNDEFINED> instruction: 0x00019fb8
   1a334:			; <UNDEFINED> instruction: 0x00019fb8
   1a338:			; <UNDEFINED> instruction: 0x00019fb8
   1a33c:			; <UNDEFINED> instruction: 0x00019fb8
   1a340:			; <UNDEFINED> instruction: 0x00019fb8
   1a344:			; <UNDEFINED> instruction: 0x00019fb8
   1a348:	muleq	r1, r4, sl
   1a34c:	muleq	r1, r4, sl
   1a350:	muleq	r1, r4, sl
   1a354:	muleq	r1, r4, sl
   1a358:	andeq	r9, r1, r4, lsl #8
   1a35c:	andeq	r9, r1, r4, asr #22
   1a360:			; <UNDEFINED> instruction: 0x00019fb8
   1a364:			; <UNDEFINED> instruction: 0x00019fb8
   1a368:			; <UNDEFINED> instruction: 0x00019fb8
   1a36c:			; <UNDEFINED> instruction: 0x00019fb8
   1a370:			; <UNDEFINED> instruction: 0x00019fb8
   1a374:			; <UNDEFINED> instruction: 0x00019fb8
   1a378:			; <UNDEFINED> instruction: 0x00019fb8
   1a37c:			; <UNDEFINED> instruction: 0x00019fb8
   1a380:			; <UNDEFINED> instruction: 0x00019fb8
   1a384:			; <UNDEFINED> instruction: 0x00019fb8
   1a388:			; <UNDEFINED> instruction: 0x00019fb8
   1a38c:			; <UNDEFINED> instruction: 0x00019fb8
   1a390:			; <UNDEFINED> instruction: 0x00019fb8
   1a394:			; <UNDEFINED> instruction: 0x00019fb8
   1a398:			; <UNDEFINED> instruction: 0x00019fb8
   1a39c:			; <UNDEFINED> instruction: 0x00019fb8
   1a3a0:			; <UNDEFINED> instruction: 0x00019fb8
   1a3a4:			; <UNDEFINED> instruction: 0x00019fb8
   1a3a8:			; <UNDEFINED> instruction: 0x00019fb8
   1a3ac:			; <UNDEFINED> instruction: 0x00019fb8
   1a3b0:			; <UNDEFINED> instruction: 0x00019fb8
   1a3b4:			; <UNDEFINED> instruction: 0x00019fb8
   1a3b8:			; <UNDEFINED> instruction: 0x00019fb8
   1a3bc:			; <UNDEFINED> instruction: 0x00019fb8
   1a3c0:			; <UNDEFINED> instruction: 0x00019fb8
   1a3c4:			; <UNDEFINED> instruction: 0x00019fb8
   1a3c8:	muleq	r1, r4, sl
   1a3cc:	andeq	r9, r1, ip, lsr r9
   1a3d0:			; <UNDEFINED> instruction: 0x00019fb8
   1a3d4:	muleq	r1, r4, sl
   1a3d8:			; <UNDEFINED> instruction: 0x00019fb8
   1a3dc:	muleq	r1, r4, sl
   1a3e0:			; <UNDEFINED> instruction: 0x00019fb8
   1a3e4:			; <UNDEFINED> instruction: 0x00019fb8
   1a3e8:			; <UNDEFINED> instruction: 0x00019fb8
   1a3ec:			; <UNDEFINED> instruction: 0x00019fb8
   1a3f0:			; <UNDEFINED> instruction: 0x00019fb8
   1a3f4:			; <UNDEFINED> instruction: 0x00019fb8
   1a3f8:			; <UNDEFINED> instruction: 0x00019fb8
   1a3fc:			; <UNDEFINED> instruction: 0x00019fb8
   1a400:			; <UNDEFINED> instruction: 0x00019fb8
   1a404:			; <UNDEFINED> instruction: 0x00019fb8
   1a408:			; <UNDEFINED> instruction: 0x00019fb8
   1a40c:			; <UNDEFINED> instruction: 0x00019fb8
   1a410:			; <UNDEFINED> instruction: 0x00019fb8
   1a414:			; <UNDEFINED> instruction: 0x00019fb8
   1a418:			; <UNDEFINED> instruction: 0x00019fb8
   1a41c:			; <UNDEFINED> instruction: 0x00019fb8
   1a420:			; <UNDEFINED> instruction: 0x00019fb8
   1a424:			; <UNDEFINED> instruction: 0x00019fb8
   1a428:			; <UNDEFINED> instruction: 0x00019fb8
   1a42c:			; <UNDEFINED> instruction: 0x00019fb8
   1a430:			; <UNDEFINED> instruction: 0x00019fb8
   1a434:			; <UNDEFINED> instruction: 0x00019fb8
   1a438:			; <UNDEFINED> instruction: 0x00019fb8
   1a43c:			; <UNDEFINED> instruction: 0x00019fb8
   1a440:			; <UNDEFINED> instruction: 0x00019fb8
   1a444:			; <UNDEFINED> instruction: 0x00019fb8
   1a448:	strdeq	r9, [r1], -ip
   1a44c:	muleq	r1, r4, sl
   1a450:	strdeq	r9, [r1], -ip
   1a454:	andeq	r9, r1, ip, asr #20
   1a458:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a45c:	strd	r6, [sp, #8]
   1a460:	strd	r8, [sp, #16]
   1a464:	strd	sl, [sp, #24]
   1a468:	str	lr, [sp, #32]
   1a46c:	sub	sp, sp, #52	; 0x34
   1a470:	mov	r5, r0
   1a474:	str	r1, [sp, #24]
   1a478:	str	r2, [sp, #28]
   1a47c:	mov	r4, r3
   1a480:	bl	115e0 <__errno_location@plt>
   1a484:	str	r0, [sp, #32]
   1a488:	ldr	r3, [r0]
   1a48c:	str	r3, [sp, #36]	; 0x24
   1a490:	movw	r3, #12676	; 0x3184
   1a494:	movt	r3, #3
   1a498:	ldr	r6, [r3]
   1a49c:	cmn	r5, #-2147483647	; 0x80000001
   1a4a0:	movne	r3, #0
   1a4a4:	moveq	r3, #1
   1a4a8:	orrs	r3, r3, r5, lsr #31
   1a4ac:	bne	1a610 <__assert_fail@plt+0x8ebc>
   1a4b0:	movw	r3, #12676	; 0x3184
   1a4b4:	movt	r3, #3
   1a4b8:	ldr	r2, [r3, #4]
   1a4bc:	cmp	r2, r5
   1a4c0:	bgt	1a530 <__assert_fail@plt+0x8ddc>
   1a4c4:	str	r2, [sp, #44]	; 0x2c
   1a4c8:	add	r3, r3, #8
   1a4cc:	cmp	r6, r3
   1a4d0:	beq	1a614 <__assert_fail@plt+0x8ec0>
   1a4d4:	sub	r2, r5, r2
   1a4d8:	mov	r3, #8
   1a4dc:	str	r3, [sp]
   1a4e0:	mvn	r3, #-2147483648	; 0x80000000
   1a4e4:	add	r2, r2, #1
   1a4e8:	add	r1, sp, #44	; 0x2c
   1a4ec:	mov	r0, r6
   1a4f0:	bl	1bfbc <__assert_fail@plt+0xa868>
   1a4f4:	mov	r6, r0
   1a4f8:	movw	r3, #12676	; 0x3184
   1a4fc:	movt	r3, #3
   1a500:	str	r0, [r3]
   1a504:	movw	r7, #12676	; 0x3184
   1a508:	movt	r7, #3
   1a50c:	ldr	r0, [r7, #4]
   1a510:	ldr	r2, [sp, #44]	; 0x2c
   1a514:	sub	r2, r2, r0
   1a518:	lsl	r2, r2, #3
   1a51c:	mov	r1, #0
   1a520:	add	r0, r6, r0, lsl #3
   1a524:	bl	11610 <memset@plt>
   1a528:	ldr	r3, [sp, #44]	; 0x2c
   1a52c:	str	r3, [r7, #4]
   1a530:	add	fp, r6, r5, lsl #3
   1a534:	ldr	r8, [r6, r5, lsl #3]
   1a538:	ldr	r7, [fp, #4]
   1a53c:	ldr	r3, [r4, #4]
   1a540:	orr	r9, r3, #1
   1a544:	add	sl, r4, #8
   1a548:	ldr	r3, [r4, #44]	; 0x2c
   1a54c:	str	r3, [sp, #16]
   1a550:	ldr	r3, [r4, #40]	; 0x28
   1a554:	str	r3, [sp, #12]
   1a558:	str	sl, [sp, #8]
   1a55c:	str	r9, [sp, #4]
   1a560:	ldr	r3, [r4]
   1a564:	str	r3, [sp]
   1a568:	ldr	r3, [sp, #28]
   1a56c:	ldr	r2, [sp, #24]
   1a570:	mov	r1, r8
   1a574:	mov	r0, r7
   1a578:	bl	18d60 <__assert_fail@plt+0x760c>
   1a57c:	cmp	r8, r0
   1a580:	bhi	1a5e4 <__assert_fail@plt+0x8e90>
   1a584:	add	r8, r0, #1
   1a588:	str	r8, [r6, r5, lsl #3]
   1a58c:	movw	r3, #12804	; 0x3204
   1a590:	movt	r3, #3
   1a594:	cmp	r7, r3
   1a598:	beq	1a5a4 <__assert_fail@plt+0x8e50>
   1a59c:	mov	r0, r7
   1a5a0:	bl	17c94 <__assert_fail@plt+0x6540>
   1a5a4:	mov	r0, r8
   1a5a8:	bl	1bdb8 <__assert_fail@plt+0xa664>
   1a5ac:	mov	r7, r0
   1a5b0:	str	r0, [fp, #4]
   1a5b4:	ldr	r3, [r4, #44]	; 0x2c
   1a5b8:	str	r3, [sp, #16]
   1a5bc:	ldr	r3, [r4, #40]	; 0x28
   1a5c0:	str	r3, [sp, #12]
   1a5c4:	str	sl, [sp, #8]
   1a5c8:	str	r9, [sp, #4]
   1a5cc:	ldr	r3, [r4]
   1a5d0:	str	r3, [sp]
   1a5d4:	ldr	r3, [sp, #28]
   1a5d8:	ldr	r2, [sp, #24]
   1a5dc:	mov	r1, r8
   1a5e0:	bl	18d60 <__assert_fail@plt+0x760c>
   1a5e4:	ldr	r3, [sp, #32]
   1a5e8:	ldr	r2, [sp, #36]	; 0x24
   1a5ec:	str	r2, [r3]
   1a5f0:	mov	r0, r7
   1a5f4:	add	sp, sp, #52	; 0x34
   1a5f8:	ldrd	r4, [sp]
   1a5fc:	ldrd	r6, [sp, #8]
   1a600:	ldrd	r8, [sp, #16]
   1a604:	ldrd	sl, [sp, #24]
   1a608:	add	sp, sp, #32
   1a60c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a610:	bl	11748 <abort@plt>
   1a614:	sub	r2, r5, r2
   1a618:	mov	r3, #8
   1a61c:	str	r3, [sp]
   1a620:	mvn	r3, #-2147483648	; 0x80000000
   1a624:	add	r2, r2, #1
   1a628:	add	r1, sp, #44	; 0x2c
   1a62c:	mov	r0, #0
   1a630:	bl	1bfbc <__assert_fail@plt+0xa868>
   1a634:	mov	r6, r0
   1a638:	movw	r3, #12676	; 0x3184
   1a63c:	movt	r3, #3
   1a640:	str	r0, [r3]
   1a644:	ldrd	r2, [r3, #8]
   1a648:	strd	r2, [r0]
   1a64c:	b	1a504 <__assert_fail@plt+0x8db0>
   1a650:	strd	r4, [sp, #-16]!
   1a654:	str	r6, [sp, #8]
   1a658:	str	lr, [sp, #12]
   1a65c:	mov	r4, r0
   1a660:	bl	115e0 <__errno_location@plt>
   1a664:	mov	r5, r0
   1a668:	ldr	r6, [r0]
   1a66c:	cmp	r4, #0
   1a670:	ldr	r3, [pc, #32]	; 1a698 <__assert_fail@plt+0x8f44>
   1a674:	moveq	r4, r3
   1a678:	mov	r1, #48	; 0x30
   1a67c:	mov	r0, r4
   1a680:	bl	1c12c <__assert_fail@plt+0xa9d8>
   1a684:	str	r6, [r5]
   1a688:	ldrd	r4, [sp]
   1a68c:	ldr	r6, [sp, #8]
   1a690:	add	sp, sp, #12
   1a694:	pop	{pc}		; (ldr pc, [sp], #4)
   1a698:	andeq	r3, r3, r4, lsl #6
   1a69c:	subs	r3, r0, #0
   1a6a0:	ldr	r2, [pc, #8]	; 1a6b0 <__assert_fail@plt+0x8f5c>
   1a6a4:	moveq	r3, r2
   1a6a8:	ldr	r0, [r3]
   1a6ac:	bx	lr
   1a6b0:	andeq	r3, r3, r4, lsl #6
   1a6b4:	subs	r3, r0, #0
   1a6b8:	ldr	r2, [pc, #8]	; 1a6c8 <__assert_fail@plt+0x8f74>
   1a6bc:	moveq	r3, r2
   1a6c0:	str	r1, [r3]
   1a6c4:	bx	lr
   1a6c8:	andeq	r3, r3, r4, lsl #6
   1a6cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a6d0:	subs	r3, r0, #0
   1a6d4:	ldr	r0, [pc, #44]	; 1a708 <__assert_fail@plt+0x8fb4>
   1a6d8:	moveq	r3, r0
   1a6dc:	add	r3, r3, #8
   1a6e0:	lsr	lr, r1, #5
   1a6e4:	and	r1, r1, #31
   1a6e8:	ldr	ip, [r3, lr, lsl #2]
   1a6ec:	lsr	r0, ip, r1
   1a6f0:	eor	r2, r2, r0
   1a6f4:	and	r2, r2, #1
   1a6f8:	eor	r1, ip, r2, lsl r1
   1a6fc:	str	r1, [r3, lr, lsl #2]
   1a700:	and	r0, r0, #1
   1a704:	pop	{pc}		; (ldr pc, [sp], #4)
   1a708:	andeq	r3, r3, r4, lsl #6
   1a70c:	subs	r3, r0, #0
   1a710:	ldr	r2, [pc, #12]	; 1a724 <__assert_fail@plt+0x8fd0>
   1a714:	moveq	r3, r2
   1a718:	ldr	r0, [r3, #4]
   1a71c:	str	r1, [r3, #4]
   1a720:	bx	lr
   1a724:	andeq	r3, r3, r4, lsl #6
   1a728:	subs	r3, r0, #0
   1a72c:	ldr	r0, [pc, #44]	; 1a760 <__assert_fail@plt+0x900c>
   1a730:	moveq	r3, r0
   1a734:	mov	r0, #10
   1a738:	str	r0, [r3]
   1a73c:	cmp	r2, #0
   1a740:	cmpne	r1, #0
   1a744:	beq	1a754 <__assert_fail@plt+0x9000>
   1a748:	str	r1, [r3, #40]	; 0x28
   1a74c:	str	r2, [r3, #44]	; 0x2c
   1a750:	bx	lr
   1a754:	str	r4, [sp, #-8]!
   1a758:	str	lr, [sp, #4]
   1a75c:	bl	11748 <abort@plt>
   1a760:	andeq	r3, r3, r4, lsl #6
   1a764:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a768:	strd	r6, [sp, #8]
   1a76c:	strd	r8, [sp, #16]
   1a770:	str	sl, [sp, #24]
   1a774:	str	lr, [sp, #28]
   1a778:	sub	sp, sp, #24
   1a77c:	mov	r7, r0
   1a780:	mov	r8, r1
   1a784:	mov	r9, r2
   1a788:	mov	sl, r3
   1a78c:	ldr	r4, [sp, #56]	; 0x38
   1a790:	cmp	r4, #0
   1a794:	ldr	r3, [pc, #104]	; 1a804 <__assert_fail@plt+0x90b0>
   1a798:	moveq	r4, r3
   1a79c:	bl	115e0 <__errno_location@plt>
   1a7a0:	mov	r5, r0
   1a7a4:	ldr	r6, [r0]
   1a7a8:	ldr	r3, [r4, #44]	; 0x2c
   1a7ac:	str	r3, [sp, #16]
   1a7b0:	ldr	r3, [r4, #40]	; 0x28
   1a7b4:	str	r3, [sp, #12]
   1a7b8:	add	r3, r4, #8
   1a7bc:	str	r3, [sp, #8]
   1a7c0:	ldr	r3, [r4, #4]
   1a7c4:	str	r3, [sp, #4]
   1a7c8:	ldr	r3, [r4]
   1a7cc:	str	r3, [sp]
   1a7d0:	mov	r3, sl
   1a7d4:	mov	r2, r9
   1a7d8:	mov	r1, r8
   1a7dc:	mov	r0, r7
   1a7e0:	bl	18d60 <__assert_fail@plt+0x760c>
   1a7e4:	str	r6, [r5]
   1a7e8:	add	sp, sp, #24
   1a7ec:	ldrd	r4, [sp]
   1a7f0:	ldrd	r6, [sp, #8]
   1a7f4:	ldrd	r8, [sp, #16]
   1a7f8:	ldr	sl, [sp, #24]
   1a7fc:	add	sp, sp, #28
   1a800:	pop	{pc}		; (ldr pc, [sp], #4)
   1a804:	andeq	r3, r3, r4, lsl #6
   1a808:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a80c:	strd	r6, [sp, #8]
   1a810:	strd	r8, [sp, #16]
   1a814:	strd	sl, [sp, #24]
   1a818:	str	lr, [sp, #32]
   1a81c:	sub	sp, sp, #44	; 0x2c
   1a820:	mov	r8, r0
   1a824:	mov	sl, r1
   1a828:	mov	r6, r2
   1a82c:	subs	r4, r3, #0
   1a830:	ldr	r3, [pc, #200]	; 1a900 <__assert_fail@plt+0x91ac>
   1a834:	moveq	r4, r3
   1a838:	bl	115e0 <__errno_location@plt>
   1a83c:	mov	r7, r0
   1a840:	ldr	fp, [r0]
   1a844:	ldr	r5, [r4, #4]
   1a848:	cmp	r6, #0
   1a84c:	orreq	r5, r5, #1
   1a850:	add	r9, r4, #8
   1a854:	ldr	r3, [r4, #44]	; 0x2c
   1a858:	str	r3, [sp, #16]
   1a85c:	ldr	r3, [r4, #40]	; 0x28
   1a860:	str	r3, [sp, #12]
   1a864:	str	r9, [sp, #8]
   1a868:	str	r5, [sp, #4]
   1a86c:	ldr	r3, [r4]
   1a870:	str	r3, [sp]
   1a874:	str	sl, [sp, #36]	; 0x24
   1a878:	mov	r3, sl
   1a87c:	str	r8, [sp, #32]
   1a880:	mov	r2, r8
   1a884:	mov	r1, #0
   1a888:	mov	r0, r1
   1a88c:	bl	18d60 <__assert_fail@plt+0x760c>
   1a890:	mov	sl, r0
   1a894:	add	r8, r0, #1
   1a898:	mov	r0, r8
   1a89c:	bl	1bdb8 <__assert_fail@plt+0xa664>
   1a8a0:	str	r0, [sp, #28]
   1a8a4:	ldr	r3, [r4, #44]	; 0x2c
   1a8a8:	str	r3, [sp, #16]
   1a8ac:	ldr	r3, [r4, #40]	; 0x28
   1a8b0:	str	r3, [sp, #12]
   1a8b4:	str	r9, [sp, #8]
   1a8b8:	str	r5, [sp, #4]
   1a8bc:	ldr	r3, [r4]
   1a8c0:	str	r3, [sp]
   1a8c4:	ldr	r3, [sp, #36]	; 0x24
   1a8c8:	ldr	r2, [sp, #32]
   1a8cc:	mov	r1, r8
   1a8d0:	bl	18d60 <__assert_fail@plt+0x760c>
   1a8d4:	str	fp, [r7]
   1a8d8:	cmp	r6, #0
   1a8dc:	strne	sl, [r6]
   1a8e0:	ldr	r0, [sp, #28]
   1a8e4:	add	sp, sp, #44	; 0x2c
   1a8e8:	ldrd	r4, [sp]
   1a8ec:	ldrd	r6, [sp, #8]
   1a8f0:	ldrd	r8, [sp, #16]
   1a8f4:	ldrd	sl, [sp, #24]
   1a8f8:	add	sp, sp, #32
   1a8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a900:	andeq	r3, r3, r4, lsl #6
   1a904:	str	r4, [sp, #-8]!
   1a908:	str	lr, [sp, #4]
   1a90c:	mov	r3, r2
   1a910:	mov	r2, #0
   1a914:	bl	1a808 <__assert_fail@plt+0x90b4>
   1a918:	ldr	r4, [sp]
   1a91c:	add	sp, sp, #4
   1a920:	pop	{pc}		; (ldr pc, [sp], #4)
   1a924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a928:	strd	r6, [sp, #8]
   1a92c:	str	r8, [sp, #16]
   1a930:	str	lr, [sp, #20]
   1a934:	movw	r3, #12676	; 0x3184
   1a938:	movt	r3, #3
   1a93c:	ldr	r7, [r3]
   1a940:	ldr	r3, [r3, #4]
   1a944:	cmp	r3, #1
   1a948:	ble	1a974 <__assert_fail@plt+0x9220>
   1a94c:	mov	r4, #1
   1a950:	add	r6, r7, #4
   1a954:	movw	r5, #12676	; 0x3184
   1a958:	movt	r5, #3
   1a95c:	ldr	r0, [r6, r4, lsl #3]
   1a960:	bl	17c94 <__assert_fail@plt+0x6540>
   1a964:	add	r4, r4, #1
   1a968:	ldr	r3, [r5, #4]
   1a96c:	cmp	r3, r4
   1a970:	bgt	1a95c <__assert_fail@plt+0x9208>
   1a974:	ldr	r0, [r7, #4]
   1a978:	movw	r3, #12804	; 0x3204
   1a97c:	movt	r3, #3
   1a980:	cmp	r0, r3
   1a984:	beq	1a9a8 <__assert_fail@plt+0x9254>
   1a988:	bl	17c94 <__assert_fail@plt+0x6540>
   1a98c:	movw	r3, #12676	; 0x3184
   1a990:	movt	r3, #3
   1a994:	mov	r2, #256	; 0x100
   1a998:	str	r2, [r3, #8]
   1a99c:	movw	r2, #12804	; 0x3204
   1a9a0:	movt	r2, #3
   1a9a4:	str	r2, [r3, #12]
   1a9a8:	ldr	r3, [pc, #64]	; 1a9f0 <__assert_fail@plt+0x929c>
   1a9ac:	cmp	r7, r3
   1a9b0:	beq	1a9cc <__assert_fail@plt+0x9278>
   1a9b4:	mov	r0, r7
   1a9b8:	bl	17c94 <__assert_fail@plt+0x6540>
   1a9bc:	movw	r3, #12676	; 0x3184
   1a9c0:	movt	r3, #3
   1a9c4:	add	r2, r3, #8
   1a9c8:	str	r2, [r3]
   1a9cc:	movw	r3, #12676	; 0x3184
   1a9d0:	movt	r3, #3
   1a9d4:	mov	r2, #1
   1a9d8:	str	r2, [r3, #4]
   1a9dc:	ldrd	r4, [sp]
   1a9e0:	ldrd	r6, [sp, #8]
   1a9e4:	ldr	r8, [sp, #16]
   1a9e8:	add	sp, sp, #20
   1a9ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9f0:	andeq	r3, r3, ip, lsl #3
   1a9f4:	str	r4, [sp, #-8]!
   1a9f8:	str	lr, [sp, #4]
   1a9fc:	ldr	r3, [pc, #16]	; 1aa14 <__assert_fail@plt+0x92c0>
   1aa00:	mvn	r2, #0
   1aa04:	bl	1a458 <__assert_fail@plt+0x8d04>
   1aa08:	ldr	r4, [sp]
   1aa0c:	add	sp, sp, #4
   1aa10:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa14:	andeq	r3, r3, r4, lsl #6
   1aa18:	str	r4, [sp, #-8]!
   1aa1c:	str	lr, [sp, #4]
   1aa20:	ldr	r3, [pc, #12]	; 1aa34 <__assert_fail@plt+0x92e0>
   1aa24:	bl	1a458 <__assert_fail@plt+0x8d04>
   1aa28:	ldr	r4, [sp]
   1aa2c:	add	sp, sp, #4
   1aa30:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa34:	andeq	r3, r3, r4, lsl #6
   1aa38:	str	r4, [sp, #-8]!
   1aa3c:	str	lr, [sp, #4]
   1aa40:	mov	r1, r0
   1aa44:	mov	r0, #0
   1aa48:	bl	1a9f4 <__assert_fail@plt+0x92a0>
   1aa4c:	ldr	r4, [sp]
   1aa50:	add	sp, sp, #4
   1aa54:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa58:	str	r4, [sp, #-8]!
   1aa5c:	str	lr, [sp, #4]
   1aa60:	mov	r2, r1
   1aa64:	mov	r1, r0
   1aa68:	mov	r0, #0
   1aa6c:	bl	1aa18 <__assert_fail@plt+0x92c4>
   1aa70:	ldr	r4, [sp]
   1aa74:	add	sp, sp, #4
   1aa78:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa7c:	strd	r4, [sp, #-12]!
   1aa80:	str	lr, [sp, #8]
   1aa84:	sub	sp, sp, #52	; 0x34
   1aa88:	mov	r4, r0
   1aa8c:	mov	r5, r2
   1aa90:	mov	r0, sp
   1aa94:	bl	18bcc <__assert_fail@plt+0x7478>
   1aa98:	mov	r3, sp
   1aa9c:	mvn	r2, #0
   1aaa0:	mov	r1, r5
   1aaa4:	mov	r0, r4
   1aaa8:	bl	1a458 <__assert_fail@plt+0x8d04>
   1aaac:	add	sp, sp, #52	; 0x34
   1aab0:	ldrd	r4, [sp]
   1aab4:	add	sp, sp, #8
   1aab8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aabc:	strd	r4, [sp, #-16]!
   1aac0:	str	r6, [sp, #8]
   1aac4:	str	lr, [sp, #12]
   1aac8:	sub	sp, sp, #48	; 0x30
   1aacc:	mov	r4, r0
   1aad0:	mov	r5, r2
   1aad4:	mov	r6, r3
   1aad8:	mov	r0, sp
   1aadc:	bl	18bcc <__assert_fail@plt+0x7478>
   1aae0:	mov	r3, sp
   1aae4:	mov	r2, r6
   1aae8:	mov	r1, r5
   1aaec:	mov	r0, r4
   1aaf0:	bl	1a458 <__assert_fail@plt+0x8d04>
   1aaf4:	add	sp, sp, #48	; 0x30
   1aaf8:	ldrd	r4, [sp]
   1aafc:	ldr	r6, [sp, #8]
   1ab00:	add	sp, sp, #12
   1ab04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab08:	str	r4, [sp, #-8]!
   1ab0c:	str	lr, [sp, #4]
   1ab10:	mov	r2, r1
   1ab14:	mov	r1, r0
   1ab18:	mov	r0, #0
   1ab1c:	bl	1aa7c <__assert_fail@plt+0x9328>
   1ab20:	ldr	r4, [sp]
   1ab24:	add	sp, sp, #4
   1ab28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab2c:	str	r4, [sp, #-8]!
   1ab30:	str	lr, [sp, #4]
   1ab34:	mov	r3, r2
   1ab38:	mov	r2, r1
   1ab3c:	mov	r1, r0
   1ab40:	mov	r0, #0
   1ab44:	bl	1aabc <__assert_fail@plt+0x9368>
   1ab48:	ldr	r4, [sp]
   1ab4c:	add	sp, sp, #4
   1ab50:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab54:	strd	r4, [sp, #-12]!
   1ab58:	str	lr, [sp, #8]
   1ab5c:	sub	sp, sp, #52	; 0x34
   1ab60:	mov	r4, r0
   1ab64:	mov	r5, r1
   1ab68:	mov	r1, r2
   1ab6c:	ldr	r0, [pc, #92]	; 1abd0 <__assert_fail@plt+0x947c>
   1ab70:	ldrd	r2, [r0]
   1ab74:	strd	r2, [sp]
   1ab78:	ldrd	r2, [r0, #8]
   1ab7c:	strd	r2, [sp, #8]
   1ab80:	ldrd	r2, [r0, #16]
   1ab84:	strd	r2, [sp, #16]
   1ab88:	ldrd	r2, [r0, #24]
   1ab8c:	strd	r2, [sp, #24]
   1ab90:	ldrd	r2, [r0, #32]
   1ab94:	strd	r2, [sp, #32]
   1ab98:	ldrd	r2, [r0, #40]	; 0x28
   1ab9c:	strd	r2, [sp, #40]	; 0x28
   1aba0:	mov	r2, #1
   1aba4:	mov	r0, sp
   1aba8:	bl	1a6cc <__assert_fail@plt+0x8f78>
   1abac:	mov	r3, sp
   1abb0:	mov	r2, r5
   1abb4:	mov	r1, r4
   1abb8:	mov	r0, #0
   1abbc:	bl	1a458 <__assert_fail@plt+0x8d04>
   1abc0:	add	sp, sp, #52	; 0x34
   1abc4:	ldrd	r4, [sp]
   1abc8:	add	sp, sp, #8
   1abcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1abd0:	andeq	r3, r3, r4, lsl #6
   1abd4:	str	r4, [sp, #-8]!
   1abd8:	str	lr, [sp, #4]
   1abdc:	mov	r2, r1
   1abe0:	mvn	r1, #0
   1abe4:	bl	1ab54 <__assert_fail@plt+0x9400>
   1abe8:	ldr	r4, [sp]
   1abec:	add	sp, sp, #4
   1abf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abf4:	str	r4, [sp, #-8]!
   1abf8:	str	lr, [sp, #4]
   1abfc:	mov	r1, #58	; 0x3a
   1ac00:	bl	1abd4 <__assert_fail@plt+0x9480>
   1ac04:	ldr	r4, [sp]
   1ac08:	add	sp, sp, #4
   1ac0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac10:	str	r4, [sp, #-8]!
   1ac14:	str	lr, [sp, #4]
   1ac18:	mov	r2, #58	; 0x3a
   1ac1c:	bl	1ab54 <__assert_fail@plt+0x9400>
   1ac20:	ldr	r4, [sp]
   1ac24:	add	sp, sp, #4
   1ac28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac2c:	strd	r4, [sp, #-12]!
   1ac30:	str	lr, [sp, #8]
   1ac34:	sub	sp, sp, #100	; 0x64
   1ac38:	mov	r4, r0
   1ac3c:	mov	r5, r2
   1ac40:	mov	r0, sp
   1ac44:	bl	18bcc <__assert_fail@plt+0x7478>
   1ac48:	ldrd	r2, [sp]
   1ac4c:	strd	r2, [sp, #48]	; 0x30
   1ac50:	ldrd	r2, [sp, #8]
   1ac54:	strd	r2, [sp, #56]	; 0x38
   1ac58:	ldrd	r2, [sp, #16]
   1ac5c:	strd	r2, [sp, #64]	; 0x40
   1ac60:	ldrd	r2, [sp, #24]
   1ac64:	strd	r2, [sp, #72]	; 0x48
   1ac68:	ldrd	r2, [sp, #32]
   1ac6c:	strd	r2, [sp, #80]	; 0x50
   1ac70:	ldrd	r2, [sp, #40]	; 0x28
   1ac74:	strd	r2, [sp, #88]	; 0x58
   1ac78:	mov	r2, #1
   1ac7c:	mov	r1, #58	; 0x3a
   1ac80:	add	r0, sp, #48	; 0x30
   1ac84:	bl	1a6cc <__assert_fail@plt+0x8f78>
   1ac88:	add	r3, sp, #48	; 0x30
   1ac8c:	mvn	r2, #0
   1ac90:	mov	r1, r5
   1ac94:	mov	r0, r4
   1ac98:	bl	1a458 <__assert_fail@plt+0x8d04>
   1ac9c:	add	sp, sp, #100	; 0x64
   1aca0:	ldrd	r4, [sp]
   1aca4:	add	sp, sp, #8
   1aca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acac:	strd	r4, [sp, #-20]!	; 0xffffffec
   1acb0:	strd	r6, [sp, #8]
   1acb4:	str	lr, [sp, #16]
   1acb8:	sub	sp, sp, #52	; 0x34
   1acbc:	mov	r4, r0
   1acc0:	mov	r5, r3
   1acc4:	ldr	r3, [pc, #92]	; 1ad28 <__assert_fail@plt+0x95d4>
   1acc8:	ldrd	r6, [r3]
   1accc:	strd	r6, [sp]
   1acd0:	ldrd	r6, [r3, #8]
   1acd4:	strd	r6, [sp, #8]
   1acd8:	ldrd	r6, [r3, #16]
   1acdc:	strd	r6, [sp, #16]
   1ace0:	ldrd	r6, [r3, #24]
   1ace4:	strd	r6, [sp, #24]
   1ace8:	ldrd	r6, [r3, #32]
   1acec:	strd	r6, [sp, #32]
   1acf0:	ldrd	r6, [r3, #40]	; 0x28
   1acf4:	strd	r6, [sp, #40]	; 0x28
   1acf8:	mov	r0, sp
   1acfc:	bl	1a728 <__assert_fail@plt+0x8fd4>
   1ad00:	mov	r3, sp
   1ad04:	ldr	r2, [sp, #72]	; 0x48
   1ad08:	mov	r1, r5
   1ad0c:	mov	r0, r4
   1ad10:	bl	1a458 <__assert_fail@plt+0x8d04>
   1ad14:	add	sp, sp, #52	; 0x34
   1ad18:	ldrd	r4, [sp]
   1ad1c:	ldrd	r6, [sp, #8]
   1ad20:	add	sp, sp, #16
   1ad24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad28:	andeq	r3, r3, r4, lsl #6
   1ad2c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad30:	sub	sp, sp, #12
   1ad34:	mvn	ip, #0
   1ad38:	str	ip, [sp]
   1ad3c:	bl	1acac <__assert_fail@plt+0x9558>
   1ad40:	add	sp, sp, #12
   1ad44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad48:	str	r4, [sp, #-8]!
   1ad4c:	str	lr, [sp, #4]
   1ad50:	mov	r3, r2
   1ad54:	mov	r2, r1
   1ad58:	mov	r1, r0
   1ad5c:	mov	r0, #0
   1ad60:	bl	1ad2c <__assert_fail@plt+0x95d8>
   1ad64:	ldr	r4, [sp]
   1ad68:	add	sp, sp, #4
   1ad6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad70:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad74:	sub	sp, sp, #12
   1ad78:	str	r3, [sp]
   1ad7c:	mov	r3, r2
   1ad80:	mov	r2, r1
   1ad84:	mov	r1, r0
   1ad88:	mov	r0, #0
   1ad8c:	bl	1acac <__assert_fail@plt+0x9558>
   1ad90:	add	sp, sp, #12
   1ad94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad98:	str	r4, [sp, #-8]!
   1ad9c:	str	lr, [sp, #4]
   1ada0:	ldr	r3, [pc, #12]	; 1adb4 <__assert_fail@plt+0x9660>
   1ada4:	bl	1a458 <__assert_fail@plt+0x8d04>
   1ada8:	ldr	r4, [sp]
   1adac:	add	sp, sp, #4
   1adb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adb4:	muleq	r3, r4, r1
   1adb8:	str	r4, [sp, #-8]!
   1adbc:	str	lr, [sp, #4]
   1adc0:	mov	r2, r1
   1adc4:	mov	r1, r0
   1adc8:	mov	r0, #0
   1adcc:	bl	1ad98 <__assert_fail@plt+0x9644>
   1add0:	ldr	r4, [sp]
   1add4:	add	sp, sp, #4
   1add8:	pop	{pc}		; (ldr pc, [sp], #4)
   1addc:	str	r4, [sp, #-8]!
   1ade0:	str	lr, [sp, #4]
   1ade4:	mvn	r2, #0
   1ade8:	bl	1ad98 <__assert_fail@plt+0x9644>
   1adec:	ldr	r4, [sp]
   1adf0:	add	sp, sp, #4
   1adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf8:	str	r4, [sp, #-8]!
   1adfc:	str	lr, [sp, #4]
   1ae00:	mov	r1, r0
   1ae04:	mov	r0, #0
   1ae08:	bl	1addc <__assert_fail@plt+0x9688>
   1ae0c:	ldr	r4, [sp]
   1ae10:	add	sp, sp, #4
   1ae14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae18:	mov	r3, #0
   1ae1c:	str	r3, [r0]
   1ae20:	str	r3, [r0, #4]
   1ae24:	bx	lr
   1ae28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ae2c:	strd	r6, [sp, #8]
   1ae30:	strd	r8, [sp, #16]
   1ae34:	str	sl, [sp, #24]
   1ae38:	str	lr, [sp, #28]
   1ae3c:	sub	sp, sp, #48	; 0x30
   1ae40:	mov	r5, r0
   1ae44:	mov	r8, r3
   1ae48:	mov	r6, #0
   1ae4c:	mov	r7, #0
   1ae50:	strd	r6, [sp, #16]
   1ae54:	strd	r6, [sp, #24]
   1ae58:	strd	r6, [sp, #32]
   1ae5c:	strd	r6, [sp, #40]	; 0x28
   1ae60:	cmp	r2, #0
   1ae64:	beq	1ae9c <__assert_fail@plt+0x9748>
   1ae68:	sub	r0, r1, #1
   1ae6c:	add	r1, r1, r2
   1ae70:	sub	lr, r1, #1
   1ae74:	add	ip, sp, #16
   1ae78:	mov	r4, #1
   1ae7c:	ldrb	r3, [r0, #1]!
   1ae80:	lsr	r1, r3, #5
   1ae84:	and	r3, r3, #31
   1ae88:	ldr	r2, [ip, r1, lsl #2]
   1ae8c:	orr	r3, r2, r4, lsl r3
   1ae90:	str	r3, [ip, r1, lsl #2]
   1ae94:	cmp	r0, lr
   1ae98:	bne	1ae7c <__assert_fail@plt+0x9728>
   1ae9c:	ldr	r3, [r5, #4]
   1aea0:	ldr	r2, [r5, #8]
   1aea4:	cmp	r3, r2
   1aea8:	bcs	1af18 <__assert_fail@plt+0x97c4>
   1aeac:	add	r2, r3, #1
   1aeb0:	str	r2, [r5, #4]
   1aeb4:	ldrb	r4, [r3]
   1aeb8:	lsr	r2, r4, #5
   1aebc:	add	r3, sp, #48	; 0x30
   1aec0:	add	r2, r3, r2, lsl #2
   1aec4:	and	r3, r4, #31
   1aec8:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1aecc:	lsr	r3, r2, r3
   1aed0:	tst	r3, #1
   1aed4:	beq	1af3c <__assert_fail@plt+0x97e8>
   1aed8:	ldr	r3, [r5, #4]
   1aedc:	ldr	r2, [r5, #8]
   1aee0:	cmp	r3, r2
   1aee4:	bcs	1af2c <__assert_fail@plt+0x97d8>
   1aee8:	add	r2, r3, #1
   1aeec:	str	r2, [r5, #4]
   1aef0:	ldrb	r4, [r3]
   1aef4:	lsr	r2, r4, #5
   1aef8:	add	r3, sp, #48	; 0x30
   1aefc:	add	r2, r3, r2, lsl #2
   1af00:	and	r3, r4, #31
   1af04:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1af08:	lsr	r3, r2, r3
   1af0c:	tst	r3, #1
   1af10:	bne	1aed8 <__assert_fail@plt+0x9784>
   1af14:	b	1af3c <__assert_fail@plt+0x97e8>
   1af18:	mov	r0, r5
   1af1c:	bl	116ac <__uflow@plt>
   1af20:	subs	r4, r0, #0
   1af24:	blt	1af3c <__assert_fail@plt+0x97e8>
   1af28:	b	1aeb8 <__assert_fail@plt+0x9764>
   1af2c:	mov	r0, r5
   1af30:	bl	116ac <__uflow@plt>
   1af34:	subs	r4, r0, #0
   1af38:	bge	1aef4 <__assert_fail@plt+0x97a0>
   1af3c:	ldr	r7, [r8, #4]
   1af40:	ldr	r3, [r8]
   1af44:	str	r3, [sp, #12]
   1af48:	mov	r6, #0
   1af4c:	mov	r9, #1
   1af50:	mvn	sl, #0
   1af54:	b	1afc0 <__assert_fail@plt+0x986c>
   1af58:	str	r9, [sp]
   1af5c:	mov	r3, sl
   1af60:	mov	r2, r9
   1af64:	add	r1, sp, #12
   1af68:	mov	r0, r7
   1af6c:	bl	1bfbc <__assert_fail@plt+0xa868>
   1af70:	mov	r7, r0
   1af74:	cmp	r4, #0
   1af78:	blt	1afe0 <__assert_fail@plt+0x988c>
   1af7c:	lsr	r2, r4, #5
   1af80:	add	r3, sp, #48	; 0x30
   1af84:	add	r2, r3, r2, lsl #2
   1af88:	and	r3, r4, #31
   1af8c:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1af90:	lsr	r3, r2, r3
   1af94:	tst	r3, #1
   1af98:	bne	1b014 <__assert_fail@plt+0x98c0>
   1af9c:	strb	r4, [r7, r6]
   1afa0:	ldr	r3, [r5, #4]
   1afa4:	ldr	r2, [r5, #8]
   1afa8:	cmp	r3, r2
   1afac:	bcs	1b020 <__assert_fail@plt+0x98cc>
   1afb0:	add	r2, r3, #1
   1afb4:	str	r2, [r5, #4]
   1afb8:	ldrb	r4, [r3]
   1afbc:	add	r6, r6, #1
   1afc0:	clz	r3, r6
   1afc4:	lsr	r3, r3, #5
   1afc8:	ands	r3, r3, r4, lsr #31
   1afcc:	bne	1b030 <__assert_fail@plt+0x98dc>
   1afd0:	ldr	r3, [sp, #12]
   1afd4:	cmp	r3, r6
   1afd8:	bne	1af74 <__assert_fail@plt+0x9820>
   1afdc:	b	1af58 <__assert_fail@plt+0x9804>
   1afe0:	mov	r3, #0
   1afe4:	strb	r3, [r7, r6]
   1afe8:	str	r7, [r8, #4]
   1afec:	ldr	r3, [sp, #12]
   1aff0:	str	r3, [r8]
   1aff4:	mov	r0, r6
   1aff8:	add	sp, sp, #48	; 0x30
   1affc:	ldrd	r4, [sp]
   1b000:	ldrd	r6, [sp, #8]
   1b004:	ldrd	r8, [sp, #16]
   1b008:	ldr	sl, [sp, #24]
   1b00c:	add	sp, sp, #28
   1b010:	pop	{pc}		; (ldr pc, [sp], #4)
   1b014:	mov	r3, #0
   1b018:	strb	r3, [r7, r6]
   1b01c:	b	1afe8 <__assert_fail@plt+0x9894>
   1b020:	mov	r0, r5
   1b024:	bl	116ac <__uflow@plt>
   1b028:	mov	r4, r0
   1b02c:	b	1afbc <__assert_fail@plt+0x9868>
   1b030:	mvn	r6, #0
   1b034:	b	1aff4 <__assert_fail@plt+0x98a0>
   1b038:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b03c:	strd	r6, [sp, #8]
   1b040:	strd	r8, [sp, #16]
   1b044:	strd	sl, [sp, #24]
   1b048:	str	lr, [sp, #32]
   1b04c:	sub	sp, sp, #36	; 0x24
   1b050:	mov	r9, r0
   1b054:	str	r2, [sp, #12]
   1b058:	mov	sl, r3
   1b05c:	cmp	r1, #0
   1b060:	addne	r0, r1, #1
   1b064:	moveq	r0, #64	; 0x40
   1b068:	str	r0, [sp, #20]
   1b06c:	mov	r1, #4
   1b070:	bl	1bef0 <__assert_fail@plt+0xa79c>
   1b074:	mov	r7, r0
   1b078:	mov	r1, #4
   1b07c:	ldr	r0, [sp, #20]
   1b080:	bl	1bef0 <__assert_fail@plt+0xa79c>
   1b084:	mov	r8, r0
   1b088:	mov	r4, #0
   1b08c:	str	r4, [sp, #24]
   1b090:	str	r4, [sp, #28]
   1b094:	mov	fp, #4
   1b098:	b	1b0fc <__assert_fail@plt+0x99a8>
   1b09c:	str	fp, [sp]
   1b0a0:	mvn	r3, #0
   1b0a4:	mov	r2, #1
   1b0a8:	add	r1, sp, #20
   1b0ac:	mov	r0, r7
   1b0b0:	bl	1bfbc <__assert_fail@plt+0xa868>
   1b0b4:	mov	r7, r0
   1b0b8:	mov	r2, fp
   1b0bc:	ldr	r1, [sp, #20]
   1b0c0:	mov	r0, r8
   1b0c4:	bl	1be48 <__assert_fail@plt+0xa6f4>
   1b0c8:	mov	r8, r0
   1b0cc:	cmn	r5, #1
   1b0d0:	beq	1b124 <__assert_fail@plt+0x99d0>
   1b0d4:	add	r6, r5, #1
   1b0d8:	mov	r1, #1
   1b0dc:	mov	r0, r6
   1b0e0:	bl	1bef0 <__assert_fail@plt+0xa79c>
   1b0e4:	str	r5, [r8, r4, lsl #2]
   1b0e8:	mov	r2, r6
   1b0ec:	ldr	r1, [sp, #28]
   1b0f0:	bl	113f4 <memcpy@plt>
   1b0f4:	str	r0, [r7, r4, lsl #2]
   1b0f8:	add	r4, r4, #1
   1b0fc:	add	r3, sp, #24
   1b100:	mov	r2, sl
   1b104:	ldr	r1, [sp, #12]
   1b108:	mov	r0, r9
   1b10c:	bl	1ae28 <__assert_fail@plt+0x96d4>
   1b110:	mov	r5, r0
   1b114:	ldr	r3, [sp, #20]
   1b118:	cmp	r3, r4
   1b11c:	bgt	1b0cc <__assert_fail@plt+0x9978>
   1b120:	b	1b09c <__assert_fail@plt+0x9948>
   1b124:	mov	r5, r4
   1b128:	mov	r3, #0
   1b12c:	str	r3, [r7, r4, lsl #2]
   1b130:	str	r3, [r8, r4, lsl #2]
   1b134:	ldr	r0, [sp, #28]
   1b138:	bl	17c94 <__assert_fail@plt+0x6540>
   1b13c:	ldr	r3, [sp, #72]	; 0x48
   1b140:	str	r7, [r3]
   1b144:	ldr	r3, [sp, #76]	; 0x4c
   1b148:	cmp	r3, #0
   1b14c:	beq	1b178 <__assert_fail@plt+0x9a24>
   1b150:	ldr	r3, [sp, #76]	; 0x4c
   1b154:	str	r8, [r3]
   1b158:	mov	r0, r5
   1b15c:	add	sp, sp, #36	; 0x24
   1b160:	ldrd	r4, [sp]
   1b164:	ldrd	r6, [sp, #8]
   1b168:	ldrd	r8, [sp, #16]
   1b16c:	ldrd	sl, [sp, #24]
   1b170:	add	sp, sp, #32
   1b174:	pop	{pc}		; (ldr pc, [sp], #4)
   1b178:	mov	r0, r8
   1b17c:	bl	17c94 <__assert_fail@plt+0x6540>
   1b180:	b	1b158 <__assert_fail@plt+0x9a04>
   1b184:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b188:	strd	r6, [sp, #8]
   1b18c:	strd	r8, [sp, #16]
   1b190:	str	sl, [sp, #24]
   1b194:	str	lr, [sp, #28]
   1b198:	mov	r8, r0
   1b19c:	mov	r7, r1
   1b1a0:	mov	r9, r2
   1b1a4:	mov	r5, #0
   1b1a8:	movt	r5, #32752	; 0x7ff0
   1b1ac:	b	1b1b4 <__assert_fail@plt+0x9a60>
   1b1b0:	mov	r9, r5
   1b1b4:	mov	r2, r9
   1b1b8:	mov	r1, r7
   1b1bc:	mov	r0, r8
   1b1c0:	bl	11634 <write@plt>
   1b1c4:	subs	r6, r0, #0
   1b1c8:	bge	1b214 <__assert_fail@plt+0x9ac0>
   1b1cc:	bl	115e0 <__errno_location@plt>
   1b1d0:	ldr	r3, [r0]
   1b1d4:	cmp	r3, #4
   1b1d8:	beq	1b1b4 <__assert_fail@plt+0x9a60>
   1b1dc:	cmp	r9, r5
   1b1e0:	movls	r4, #0
   1b1e4:	movhi	r4, #1
   1b1e8:	cmp	r3, #22
   1b1ec:	movne	r4, #0
   1b1f0:	cmp	r4, #0
   1b1f4:	bne	1b1b0 <__assert_fail@plt+0x9a5c>
   1b1f8:	mov	r0, r6
   1b1fc:	ldrd	r4, [sp]
   1b200:	ldrd	r6, [sp, #8]
   1b204:	ldrd	r8, [sp, #16]
   1b208:	ldr	sl, [sp, #24]
   1b20c:	add	sp, sp, #28
   1b210:	pop	{pc}		; (ldr pc, [sp], #4)
   1b214:	mov	r0, r6
   1b218:	b	1b1fc <__assert_fail@plt+0x9aa8>
   1b21c:	strd	r4, [sp, #-16]!
   1b220:	str	r6, [sp, #8]
   1b224:	str	lr, [sp, #12]
   1b228:	mov	r5, r0
   1b22c:	mov	r4, r1
   1b230:	mov	r2, r1
   1b234:	mov	r1, #0
   1b238:	bl	11658 <memchr@plt>
   1b23c:	cmp	r0, #0
   1b240:	subne	r0, r0, r5
   1b244:	addne	r0, r0, #1
   1b248:	moveq	r0, r4
   1b24c:	ldrd	r4, [sp]
   1b250:	ldr	r6, [sp, #8]
   1b254:	add	sp, sp, #12
   1b258:	pop	{pc}		; (ldr pc, [sp], #4)
   1b25c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b260:	strd	r6, [sp, #8]
   1b264:	strd	r8, [sp, #16]
   1b268:	str	sl, [sp, #24]
   1b26c:	str	lr, [sp, #28]
   1b270:	sub	sp, sp, #64	; 0x40
   1b274:	mov	r7, r1
   1b278:	bl	11448 <strdup@plt>
   1b27c:	subs	r5, r0, #0
   1b280:	beq	1b2e8 <__assert_fail@plt+0x9b94>
   1b284:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1b288:	cmp	r0, #1
   1b28c:	bls	1b710 <__assert_fail@plt+0x9fbc>
   1b290:	cmp	r7, #0
   1b294:	bne	1b2ec <__assert_fail@plt+0x9b98>
   1b298:	str	r5, [sp, #24]
   1b29c:	mov	r0, r5
   1b2a0:	bl	115b0 <strlen@plt>
   1b2a4:	add	r7, r5, r0
   1b2a8:	str	r7, [sp, #4]
   1b2ac:	mov	r3, #0
   1b2b0:	strb	r3, [sp, #8]
   1b2b4:	mov	r0, #0
   1b2b8:	mov	r1, #0
   1b2bc:	strd	r0, [sp, #12]
   1b2c0:	strb	r3, [sp, #20]
   1b2c4:	cmp	r7, r5
   1b2c8:	bls	1b354 <__assert_fail@plt+0x9c00>
   1b2cc:	mov	r4, r5
   1b2d0:	mov	sl, #0
   1b2d4:	mov	r6, sl
   1b2d8:	mov	r8, #1
   1b2dc:	movw	r9, #10436	; 0x28c4
   1b2e0:	movt	r9, #2
   1b2e4:	b	1b548 <__assert_fail@plt+0x9df4>
   1b2e8:	bl	1c204 <__assert_fail@plt+0xaab0>
   1b2ec:	str	r5, [sp, #24]
   1b2f0:	mov	r0, r5
   1b2f4:	bl	115b0 <strlen@plt>
   1b2f8:	add	r6, r5, r0
   1b2fc:	str	r6, [sp, #4]
   1b300:	mov	r3, #0
   1b304:	strb	r3, [sp, #8]
   1b308:	mov	r0, #0
   1b30c:	mov	r1, #0
   1b310:	strd	r0, [sp, #12]
   1b314:	strb	r3, [sp, #20]
   1b318:	cmp	r6, r5
   1b31c:	movhi	r4, r5
   1b320:	movhi	r8, #1
   1b324:	movwhi	r9, #10436	; 0x28c4
   1b328:	movthi	r9, #2
   1b32c:	bhi	1b440 <__assert_fail@plt+0x9cec>
   1b330:	ldr	r4, [sp, #24]
   1b334:	mov	r0, r4
   1b338:	bl	115b0 <strlen@plt>
   1b33c:	add	r2, r0, #1
   1b340:	mov	r1, r4
   1b344:	mov	r0, r5
   1b348:	bl	113c4 <memmove@plt>
   1b34c:	cmp	r7, #1
   1b350:	bne	1b298 <__assert_fail@plt+0x9b44>
   1b354:	mov	r0, r5
   1b358:	add	sp, sp, #64	; 0x40
   1b35c:	ldrd	r4, [sp]
   1b360:	ldrd	r6, [sp, #8]
   1b364:	ldrd	r8, [sp, #16]
   1b368:	ldr	sl, [sp, #24]
   1b36c:	add	sp, sp, #28
   1b370:	pop	{pc}		; (ldr pc, [sp], #4)
   1b374:	add	r0, sp, #12
   1b378:	bl	1140c <mbsinit@plt>
   1b37c:	cmp	r0, #0
   1b380:	beq	1b488 <__assert_fail@plt+0x9d34>
   1b384:	strb	r8, [sp, #8]
   1b388:	add	r3, sp, #12
   1b38c:	sub	r2, r6, r4
   1b390:	mov	r1, r4
   1b394:	add	r0, sp, #36	; 0x24
   1b398:	bl	1c7ec <__assert_fail@plt+0xb098>
   1b39c:	str	r0, [sp, #28]
   1b3a0:	cmn	r0, #1
   1b3a4:	streq	r8, [sp, #28]
   1b3a8:	moveq	r3, #0
   1b3ac:	strbeq	r3, [sp, #32]
   1b3b0:	beq	1b3fc <__assert_fail@plt+0x9ca8>
   1b3b4:	cmn	r0, #2
   1b3b8:	beq	1b4a8 <__assert_fail@plt+0x9d54>
   1b3bc:	cmp	r0, #0
   1b3c0:	bne	1b3e4 <__assert_fail@plt+0x9c90>
   1b3c4:	str	r8, [sp, #28]
   1b3c8:	ldr	r3, [sp, #24]
   1b3cc:	ldrb	r3, [r3]
   1b3d0:	cmp	r3, #0
   1b3d4:	bne	1b4c4 <__assert_fail@plt+0x9d70>
   1b3d8:	ldr	r3, [sp, #36]	; 0x24
   1b3dc:	cmp	r3, #0
   1b3e0:	bne	1b4e4 <__assert_fail@plt+0x9d90>
   1b3e4:	strb	r8, [sp, #32]
   1b3e8:	add	r0, sp, #12
   1b3ec:	bl	1140c <mbsinit@plt>
   1b3f0:	cmp	r0, #0
   1b3f4:	movne	r3, #0
   1b3f8:	strbne	r3, [sp, #8]
   1b3fc:	strb	r8, [sp, #20]
   1b400:	ldrb	r3, [sp, #32]
   1b404:	cmp	r3, #0
   1b408:	beq	1b330 <__assert_fail@plt+0x9bdc>
   1b40c:	ldr	r0, [sp, #36]	; 0x24
   1b410:	bl	115a4 <iswspace@plt>
   1b414:	cmp	r0, #0
   1b418:	beq	1b330 <__assert_fail@plt+0x9bdc>
   1b41c:	ldr	r4, [sp, #24]
   1b420:	ldr	r3, [sp, #28]
   1b424:	add	r4, r4, r3
   1b428:	str	r4, [sp, #24]
   1b42c:	mov	r3, #0
   1b430:	strb	r3, [sp, #20]
   1b434:	ldr	r6, [sp, #4]
   1b438:	cmp	r4, r6
   1b43c:	bcs	1b330 <__assert_fail@plt+0x9bdc>
   1b440:	ldrb	r3, [sp, #20]
   1b444:	cmp	r3, #0
   1b448:	bne	1b400 <__assert_fail@plt+0x9cac>
   1b44c:	ldrb	r3, [sp, #8]
   1b450:	cmp	r3, #0
   1b454:	bne	1b388 <__assert_fail@plt+0x9c34>
   1b458:	ldrb	r3, [r4]
   1b45c:	lsr	r2, r3, #5
   1b460:	and	r3, r3, #31
   1b464:	ldr	r2, [r9, r2, lsl #2]
   1b468:	lsr	r3, r2, r3
   1b46c:	tst	r3, #1
   1b470:	beq	1b374 <__assert_fail@plt+0x9c20>
   1b474:	str	r8, [sp, #28]
   1b478:	ldrb	r3, [r4]
   1b47c:	str	r3, [sp, #36]	; 0x24
   1b480:	strb	r8, [sp, #32]
   1b484:	b	1b3fc <__assert_fail@plt+0x9ca8>
   1b488:	movw	r3, #9576	; 0x2568
   1b48c:	movt	r3, #2
   1b490:	mov	r2, #135	; 0x87
   1b494:	movw	r1, #9596	; 0x257c
   1b498:	movt	r1, #2
   1b49c:	movw	r0, #9264	; 0x2430
   1b4a0:	movt	r0, #2
   1b4a4:	bl	11754 <__assert_fail@plt>
   1b4a8:	ldr	r3, [sp, #4]
   1b4ac:	ldr	r2, [sp, #24]
   1b4b0:	sub	r3, r3, r2
   1b4b4:	str	r3, [sp, #28]
   1b4b8:	mov	r3, #0
   1b4bc:	strb	r3, [sp, #32]
   1b4c0:	b	1b3fc <__assert_fail@plt+0x9ca8>
   1b4c4:	movw	r3, #9576	; 0x2568
   1b4c8:	movt	r3, #2
   1b4cc:	mov	r2, #162	; 0xa2
   1b4d0:	movw	r1, #9596	; 0x257c
   1b4d4:	movt	r1, #2
   1b4d8:	movw	r0, #9288	; 0x2448
   1b4dc:	movt	r0, #2
   1b4e0:	bl	11754 <__assert_fail@plt>
   1b4e4:	movw	r3, #9576	; 0x2568
   1b4e8:	movt	r3, #2
   1b4ec:	mov	r2, #163	; 0xa3
   1b4f0:	movw	r1, #9596	; 0x257c
   1b4f4:	movt	r1, #2
   1b4f8:	movw	r0, #9312	; 0x2460
   1b4fc:	movt	r0, #2
   1b500:	bl	11754 <__assert_fail@plt>
   1b504:	ldrb	r3, [sp, #32]
   1b508:	cmp	r3, #0
   1b50c:	moveq	r6, #1
   1b510:	beq	1b524 <__assert_fail@plt+0x9dd0>
   1b514:	ldr	r0, [sp, #36]	; 0x24
   1b518:	bl	115a4 <iswspace@plt>
   1b51c:	clz	r6, r0
   1b520:	lsr	r6, r6, #5
   1b524:	ldr	r4, [sp, #24]
   1b528:	ldr	r3, [sp, #28]
   1b52c:	add	r4, r4, r3
   1b530:	str	r4, [sp, #24]
   1b534:	mov	r3, #0
   1b538:	strb	r3, [sp, #20]
   1b53c:	ldr	r7, [sp, #4]
   1b540:	cmp	r4, r7
   1b544:	bcs	1b700 <__assert_fail@plt+0x9fac>
   1b548:	ldrb	r3, [sp, #20]
   1b54c:	cmp	r3, #0
   1b550:	bne	1b590 <__assert_fail@plt+0x9e3c>
   1b554:	ldrb	r3, [sp, #8]
   1b558:	cmp	r3, #0
   1b55c:	bne	1b60c <__assert_fail@plt+0x9eb8>
   1b560:	ldrb	r3, [r4]
   1b564:	lsr	r2, r3, #5
   1b568:	and	r3, r3, #31
   1b56c:	ldr	r2, [r9, r2, lsl #2]
   1b570:	lsr	r3, r2, r3
   1b574:	tst	r3, #1
   1b578:	beq	1b5f8 <__assert_fail@plt+0x9ea4>
   1b57c:	str	r8, [sp, #28]
   1b580:	ldrb	r3, [r4]
   1b584:	str	r3, [sp, #36]	; 0x24
   1b588:	strb	r8, [sp, #32]
   1b58c:	strb	r8, [sp, #20]
   1b590:	cmp	r6, #0
   1b594:	beq	1b504 <__assert_fail@plt+0x9db0>
   1b598:	cmp	r6, #1
   1b59c:	beq	1b5d0 <__assert_fail@plt+0x9e7c>
   1b5a0:	cmp	r6, #2
   1b5a4:	movne	r6, #1
   1b5a8:	bne	1b524 <__assert_fail@plt+0x9dd0>
   1b5ac:	ldrb	r3, [sp, #32]
   1b5b0:	cmp	r3, #0
   1b5b4:	moveq	r6, #1
   1b5b8:	beq	1b524 <__assert_fail@plt+0x9dd0>
   1b5bc:	ldr	r0, [sp, #36]	; 0x24
   1b5c0:	bl	115a4 <iswspace@plt>
   1b5c4:	cmp	r0, #0
   1b5c8:	moveq	r6, #1
   1b5cc:	b	1b524 <__assert_fail@plt+0x9dd0>
   1b5d0:	ldrb	r3, [sp, #32]
   1b5d4:	cmp	r3, #0
   1b5d8:	beq	1b524 <__assert_fail@plt+0x9dd0>
   1b5dc:	ldr	r0, [sp, #36]	; 0x24
   1b5e0:	bl	115a4 <iswspace@plt>
   1b5e4:	cmp	r0, #0
   1b5e8:	beq	1b524 <__assert_fail@plt+0x9dd0>
   1b5ec:	ldr	sl, [sp, #24]
   1b5f0:	mov	r6, #2
   1b5f4:	b	1b524 <__assert_fail@plt+0x9dd0>
   1b5f8:	add	r0, sp, #12
   1b5fc:	bl	1140c <mbsinit@plt>
   1b600:	cmp	r0, #0
   1b604:	beq	1b684 <__assert_fail@plt+0x9f30>
   1b608:	strb	r8, [sp, #8]
   1b60c:	add	r3, sp, #12
   1b610:	sub	r2, r7, r4
   1b614:	mov	r1, r4
   1b618:	add	r0, sp, #36	; 0x24
   1b61c:	bl	1c7ec <__assert_fail@plt+0xb098>
   1b620:	str	r0, [sp, #28]
   1b624:	cmn	r0, #1
   1b628:	streq	r8, [sp, #28]
   1b62c:	moveq	r3, #0
   1b630:	strbeq	r3, [sp, #32]
   1b634:	beq	1b58c <__assert_fail@plt+0x9e38>
   1b638:	cmn	r0, #2
   1b63c:	beq	1b6a4 <__assert_fail@plt+0x9f50>
   1b640:	cmp	r0, #0
   1b644:	bne	1b668 <__assert_fail@plt+0x9f14>
   1b648:	str	r8, [sp, #28]
   1b64c:	ldr	r3, [sp, #24]
   1b650:	ldrb	r3, [r3]
   1b654:	cmp	r3, #0
   1b658:	bne	1b6c0 <__assert_fail@plt+0x9f6c>
   1b65c:	ldr	r3, [sp, #36]	; 0x24
   1b660:	cmp	r3, #0
   1b664:	bne	1b6e0 <__assert_fail@plt+0x9f8c>
   1b668:	strb	r8, [sp, #32]
   1b66c:	add	r0, sp, #12
   1b670:	bl	1140c <mbsinit@plt>
   1b674:	cmp	r0, #0
   1b678:	movne	r3, #0
   1b67c:	strbne	r3, [sp, #8]
   1b680:	b	1b58c <__assert_fail@plt+0x9e38>
   1b684:	movw	r3, #9576	; 0x2568
   1b688:	movt	r3, #2
   1b68c:	mov	r2, #135	; 0x87
   1b690:	movw	r1, #9596	; 0x257c
   1b694:	movt	r1, #2
   1b698:	movw	r0, #9264	; 0x2430
   1b69c:	movt	r0, #2
   1b6a0:	bl	11754 <__assert_fail@plt>
   1b6a4:	ldr	r3, [sp, #4]
   1b6a8:	ldr	r2, [sp, #24]
   1b6ac:	sub	r3, r3, r2
   1b6b0:	str	r3, [sp, #28]
   1b6b4:	mov	r3, #0
   1b6b8:	strb	r3, [sp, #32]
   1b6bc:	b	1b58c <__assert_fail@plt+0x9e38>
   1b6c0:	movw	r3, #9576	; 0x2568
   1b6c4:	movt	r3, #2
   1b6c8:	mov	r2, #162	; 0xa2
   1b6cc:	movw	r1, #9596	; 0x257c
   1b6d0:	movt	r1, #2
   1b6d4:	movw	r0, #9288	; 0x2448
   1b6d8:	movt	r0, #2
   1b6dc:	bl	11754 <__assert_fail@plt>
   1b6e0:	movw	r3, #9576	; 0x2568
   1b6e4:	movt	r3, #2
   1b6e8:	mov	r2, #163	; 0xa3
   1b6ec:	movw	r1, #9596	; 0x257c
   1b6f0:	movt	r1, #2
   1b6f4:	movw	r0, #9312	; 0x2460
   1b6f8:	movt	r0, #2
   1b6fc:	bl	11754 <__assert_fail@plt>
   1b700:	cmp	r6, #2
   1b704:	moveq	r3, #0
   1b708:	strbeq	r3, [sl]
   1b70c:	b	1b354 <__assert_fail@plt+0x9c00>
   1b710:	cmp	r7, #0
   1b714:	beq	1b76c <__assert_fail@plt+0xa018>
   1b718:	ldrb	r4, [r5]
   1b71c:	cmp	r4, #0
   1b720:	beq	1b7b4 <__assert_fail@plt+0xa060>
   1b724:	bl	1158c <__ctype_b_loc@plt>
   1b728:	ldr	r2, [r0]
   1b72c:	mov	r6, r5
   1b730:	lsl	r4, r4, #1
   1b734:	ldrh	r3, [r2, r4]
   1b738:	tst	r3, #8192	; 0x2000
   1b73c:	beq	1b74c <__assert_fail@plt+0x9ff8>
   1b740:	ldrb	r4, [r6, #1]!
   1b744:	cmp	r4, #0
   1b748:	bne	1b730 <__assert_fail@plt+0x9fdc>
   1b74c:	mov	r0, r6
   1b750:	bl	115b0 <strlen@plt>
   1b754:	add	r2, r0, #1
   1b758:	mov	r1, r6
   1b75c:	mov	r0, r5
   1b760:	bl	113c4 <memmove@plt>
   1b764:	cmp	r7, #1
   1b768:	beq	1b354 <__assert_fail@plt+0x9c00>
   1b76c:	mov	r0, r5
   1b770:	bl	115b0 <strlen@plt>
   1b774:	sub	r0, r0, #1
   1b778:	adds	r4, r5, r0
   1b77c:	bcs	1b354 <__assert_fail@plt+0x9c00>
   1b780:	bl	1158c <__ctype_b_loc@plt>
   1b784:	ldr	r2, [r0]
   1b788:	mov	r0, r4
   1b78c:	mov	r1, #0
   1b790:	ldrb	r3, [r0], #-1
   1b794:	lsl	r3, r3, #1
   1b798:	ldrh	r3, [r2, r3]
   1b79c:	tst	r3, #8192	; 0x2000
   1b7a0:	beq	1b354 <__assert_fail@plt+0x9c00>
   1b7a4:	strb	r1, [r0, #1]
   1b7a8:	cmp	r0, r5
   1b7ac:	bcs	1b790 <__assert_fail@plt+0xa03c>
   1b7b0:	b	1b354 <__assert_fail@plt+0x9c00>
   1b7b4:	mov	r6, r5
   1b7b8:	b	1b74c <__assert_fail@plt+0x9ff8>
   1b7bc:	strd	r4, [sp, #-16]!
   1b7c0:	str	r6, [sp, #8]
   1b7c4:	str	lr, [sp, #12]
   1b7c8:	sub	sp, sp, #32
   1b7cc:	mov	r4, r0
   1b7d0:	ldr	r5, [sp, #48]	; 0x30
   1b7d4:	ldr	r6, [sp, #52]	; 0x34
   1b7d8:	cmp	r1, #0
   1b7dc:	beq	1b8a8 <__assert_fail@plt+0xa154>
   1b7e0:	str	r3, [sp, #4]
   1b7e4:	str	r2, [sp]
   1b7e8:	mov	r3, r1
   1b7ec:	movw	r2, #9612	; 0x258c
   1b7f0:	movt	r2, #2
   1b7f4:	mov	r1, #1
   1b7f8:	bl	1164c <__fprintf_chk@plt>
   1b7fc:	mov	r2, #5
   1b800:	movw	r1, #9632	; 0x25a0
   1b804:	movt	r1, #2
   1b808:	mov	r0, #0
   1b80c:	bl	11430 <dcgettext@plt>
   1b810:	movw	r3, #2022	; 0x7e6
   1b814:	str	r3, [sp]
   1b818:	mov	r3, r0
   1b81c:	movw	r2, #10360	; 0x2878
   1b820:	movt	r2, #2
   1b824:	mov	r1, #1
   1b828:	mov	r0, r4
   1b82c:	bl	1164c <__fprintf_chk@plt>
   1b830:	mov	r1, r4
   1b834:	mov	r0, #10
   1b838:	bl	11424 <fputc_unlocked@plt>
   1b83c:	mov	r2, #5
   1b840:	movw	r1, #9636	; 0x25a4
   1b844:	movt	r1, #2
   1b848:	mov	r0, #0
   1b84c:	bl	11430 <dcgettext@plt>
   1b850:	movw	r3, #9808	; 0x2650
   1b854:	movt	r3, #2
   1b858:	mov	r2, r0
   1b85c:	mov	r1, #1
   1b860:	mov	r0, r4
   1b864:	bl	1164c <__fprintf_chk@plt>
   1b868:	mov	r1, r4
   1b86c:	mov	r0, #10
   1b870:	bl	11424 <fputc_unlocked@plt>
   1b874:	cmp	r6, #9
   1b878:	ldrls	pc, [pc, r6, lsl #2]
   1b87c:	b	1bb80 <__assert_fail@plt+0xa42c>
   1b880:	andeq	fp, r1, ip, ror #17
   1b884:	andeq	fp, r1, r4, asr #17
   1b888:	andeq	fp, r1, r0, lsl #18
   1b88c:	andeq	fp, r1, r4, lsr r9
   1b890:	andeq	fp, r1, r0, ror r9
   1b894:			; <UNDEFINED> instruction: 0x0001b9b4
   1b898:	andeq	fp, r1, r0, lsl #20
   1b89c:	andeq	fp, r1, r4, asr sl
   1b8a0:			; <UNDEFINED> instruction: 0x0001bab0
   1b8a4:	andeq	fp, r1, r4, lsl fp
   1b8a8:	str	r3, [sp]
   1b8ac:	mov	r3, r2
   1b8b0:	movw	r2, #9624	; 0x2598
   1b8b4:	movt	r2, #2
   1b8b8:	mov	r1, #1
   1b8bc:	bl	1164c <__fprintf_chk@plt>
   1b8c0:	b	1b7fc <__assert_fail@plt+0xa0a8>
   1b8c4:	mov	r2, #5
   1b8c8:	movw	r1, #9844	; 0x2674
   1b8cc:	movt	r1, #2
   1b8d0:	mov	r0, #0
   1b8d4:	bl	11430 <dcgettext@plt>
   1b8d8:	ldr	r3, [r5]
   1b8dc:	mov	r2, r0
   1b8e0:	mov	r1, #1
   1b8e4:	mov	r0, r4
   1b8e8:	bl	1164c <__fprintf_chk@plt>
   1b8ec:	add	sp, sp, #32
   1b8f0:	ldrd	r4, [sp]
   1b8f4:	ldr	r6, [sp, #8]
   1b8f8:	add	sp, sp, #12
   1b8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b900:	mov	r2, #5
   1b904:	movw	r1, #9860	; 0x2684
   1b908:	movt	r1, #2
   1b90c:	mov	r0, #0
   1b910:	bl	11430 <dcgettext@plt>
   1b914:	ldr	r3, [r5, #4]
   1b918:	str	r3, [sp]
   1b91c:	ldr	r3, [r5]
   1b920:	mov	r2, r0
   1b924:	mov	r1, #1
   1b928:	mov	r0, r4
   1b92c:	bl	1164c <__fprintf_chk@plt>
   1b930:	b	1b8ec <__assert_fail@plt+0xa198>
   1b934:	mov	r2, #5
   1b938:	movw	r1, #9884	; 0x269c
   1b93c:	movt	r1, #2
   1b940:	mov	r0, #0
   1b944:	bl	11430 <dcgettext@plt>
   1b948:	ldr	r3, [r5, #8]
   1b94c:	str	r3, [sp, #4]
   1b950:	ldr	r3, [r5, #4]
   1b954:	str	r3, [sp]
   1b958:	ldr	r3, [r5]
   1b95c:	mov	r2, r0
   1b960:	mov	r1, #1
   1b964:	mov	r0, r4
   1b968:	bl	1164c <__fprintf_chk@plt>
   1b96c:	b	1b8ec <__assert_fail@plt+0xa198>
   1b970:	mov	r2, #5
   1b974:	movw	r1, #9912	; 0x26b8
   1b978:	movt	r1, #2
   1b97c:	mov	r0, #0
   1b980:	bl	11430 <dcgettext@plt>
   1b984:	ldr	r3, [r5, #12]
   1b988:	str	r3, [sp, #8]
   1b98c:	ldr	r3, [r5, #8]
   1b990:	str	r3, [sp, #4]
   1b994:	ldr	r3, [r5, #4]
   1b998:	str	r3, [sp]
   1b99c:	ldr	r3, [r5]
   1b9a0:	mov	r2, r0
   1b9a4:	mov	r1, #1
   1b9a8:	mov	r0, r4
   1b9ac:	bl	1164c <__fprintf_chk@plt>
   1b9b0:	b	1b8ec <__assert_fail@plt+0xa198>
   1b9b4:	mov	r2, #5
   1b9b8:	movw	r1, #9944	; 0x26d8
   1b9bc:	movt	r1, #2
   1b9c0:	mov	r0, #0
   1b9c4:	bl	11430 <dcgettext@plt>
   1b9c8:	ldr	r3, [r5, #16]
   1b9cc:	str	r3, [sp, #12]
   1b9d0:	ldr	r3, [r5, #12]
   1b9d4:	str	r3, [sp, #8]
   1b9d8:	ldr	r3, [r5, #8]
   1b9dc:	str	r3, [sp, #4]
   1b9e0:	ldr	r3, [r5, #4]
   1b9e4:	str	r3, [sp]
   1b9e8:	ldr	r3, [r5]
   1b9ec:	mov	r2, r0
   1b9f0:	mov	r1, #1
   1b9f4:	mov	r0, r4
   1b9f8:	bl	1164c <__fprintf_chk@plt>
   1b9fc:	b	1b8ec <__assert_fail@plt+0xa198>
   1ba00:	mov	r2, #5
   1ba04:	movw	r1, #9980	; 0x26fc
   1ba08:	movt	r1, #2
   1ba0c:	mov	r0, #0
   1ba10:	bl	11430 <dcgettext@plt>
   1ba14:	ldr	r3, [r5, #20]
   1ba18:	str	r3, [sp, #16]
   1ba1c:	ldr	r3, [r5, #16]
   1ba20:	str	r3, [sp, #12]
   1ba24:	ldr	r3, [r5, #12]
   1ba28:	str	r3, [sp, #8]
   1ba2c:	ldr	r3, [r5, #8]
   1ba30:	str	r3, [sp, #4]
   1ba34:	ldr	r3, [r5, #4]
   1ba38:	str	r3, [sp]
   1ba3c:	ldr	r3, [r5]
   1ba40:	mov	r2, r0
   1ba44:	mov	r1, #1
   1ba48:	mov	r0, r4
   1ba4c:	bl	1164c <__fprintf_chk@plt>
   1ba50:	b	1b8ec <__assert_fail@plt+0xa198>
   1ba54:	mov	r2, #5
   1ba58:	movw	r1, #10020	; 0x2724
   1ba5c:	movt	r1, #2
   1ba60:	mov	r0, #0
   1ba64:	bl	11430 <dcgettext@plt>
   1ba68:	ldr	r3, [r5, #24]
   1ba6c:	str	r3, [sp, #20]
   1ba70:	ldr	r3, [r5, #20]
   1ba74:	str	r3, [sp, #16]
   1ba78:	ldr	r3, [r5, #16]
   1ba7c:	str	r3, [sp, #12]
   1ba80:	ldr	r3, [r5, #12]
   1ba84:	str	r3, [sp, #8]
   1ba88:	ldr	r3, [r5, #8]
   1ba8c:	str	r3, [sp, #4]
   1ba90:	ldr	r3, [r5, #4]
   1ba94:	str	r3, [sp]
   1ba98:	ldr	r3, [r5]
   1ba9c:	mov	r2, r0
   1baa0:	mov	r1, #1
   1baa4:	mov	r0, r4
   1baa8:	bl	1164c <__fprintf_chk@plt>
   1baac:	b	1b8ec <__assert_fail@plt+0xa198>
   1bab0:	mov	r2, #5
   1bab4:	movw	r1, #10064	; 0x2750
   1bab8:	movt	r1, #2
   1babc:	mov	r0, #0
   1bac0:	bl	11430 <dcgettext@plt>
   1bac4:	ldr	r3, [r5, #28]
   1bac8:	str	r3, [sp, #24]
   1bacc:	ldr	r3, [r5, #24]
   1bad0:	str	r3, [sp, #20]
   1bad4:	ldr	r3, [r5, #20]
   1bad8:	str	r3, [sp, #16]
   1badc:	ldr	r3, [r5, #16]
   1bae0:	str	r3, [sp, #12]
   1bae4:	ldr	r3, [r5, #12]
   1bae8:	str	r3, [sp, #8]
   1baec:	ldr	r3, [r5, #8]
   1baf0:	str	r3, [sp, #4]
   1baf4:	ldr	r3, [r5, #4]
   1baf8:	str	r3, [sp]
   1bafc:	ldr	r3, [r5]
   1bb00:	mov	r2, r0
   1bb04:	mov	r1, #1
   1bb08:	mov	r0, r4
   1bb0c:	bl	1164c <__fprintf_chk@plt>
   1bb10:	b	1b8ec <__assert_fail@plt+0xa198>
   1bb14:	mov	r2, #5
   1bb18:	movw	r1, #10112	; 0x2780
   1bb1c:	movt	r1, #2
   1bb20:	mov	r0, #0
   1bb24:	bl	11430 <dcgettext@plt>
   1bb28:	ldr	r3, [r5, #32]
   1bb2c:	str	r3, [sp, #28]
   1bb30:	ldr	r3, [r5, #28]
   1bb34:	str	r3, [sp, #24]
   1bb38:	ldr	r3, [r5, #24]
   1bb3c:	str	r3, [sp, #20]
   1bb40:	ldr	r3, [r5, #20]
   1bb44:	str	r3, [sp, #16]
   1bb48:	ldr	r3, [r5, #16]
   1bb4c:	str	r3, [sp, #12]
   1bb50:	ldr	r3, [r5, #12]
   1bb54:	str	r3, [sp, #8]
   1bb58:	ldr	r3, [r5, #8]
   1bb5c:	str	r3, [sp, #4]
   1bb60:	ldr	r3, [r5, #4]
   1bb64:	str	r3, [sp]
   1bb68:	ldr	r3, [r5]
   1bb6c:	mov	r2, r0
   1bb70:	mov	r1, #1
   1bb74:	mov	r0, r4
   1bb78:	bl	1164c <__fprintf_chk@plt>
   1bb7c:	b	1b8ec <__assert_fail@plt+0xa198>
   1bb80:	mov	r2, #5
   1bb84:	movw	r1, #10164	; 0x27b4
   1bb88:	movt	r1, #2
   1bb8c:	mov	r0, #0
   1bb90:	bl	11430 <dcgettext@plt>
   1bb94:	ldr	r3, [r5, #32]
   1bb98:	str	r3, [sp, #28]
   1bb9c:	ldr	r3, [r5, #28]
   1bba0:	str	r3, [sp, #24]
   1bba4:	ldr	r3, [r5, #24]
   1bba8:	str	r3, [sp, #20]
   1bbac:	ldr	r3, [r5, #20]
   1bbb0:	str	r3, [sp, #16]
   1bbb4:	ldr	r3, [r5, #16]
   1bbb8:	str	r3, [sp, #12]
   1bbbc:	ldr	r3, [r5, #12]
   1bbc0:	str	r3, [sp, #8]
   1bbc4:	ldr	r3, [r5, #8]
   1bbc8:	str	r3, [sp, #4]
   1bbcc:	ldr	r3, [r5, #4]
   1bbd0:	str	r3, [sp]
   1bbd4:	ldr	r3, [r5]
   1bbd8:	mov	r2, r0
   1bbdc:	mov	r1, #1
   1bbe0:	mov	r0, r4
   1bbe4:	bl	1164c <__fprintf_chk@plt>
   1bbe8:	b	1b8ec <__assert_fail@plt+0xa198>
   1bbec:	strd	r4, [sp, #-12]!
   1bbf0:	str	lr, [sp, #8]
   1bbf4:	sub	sp, sp, #12
   1bbf8:	ldr	r5, [sp, #24]
   1bbfc:	ldr	ip, [r5]
   1bc00:	cmp	ip, #0
   1bc04:	beq	1bc3c <__assert_fail@plt+0xa4e8>
   1bc08:	mov	lr, r5
   1bc0c:	mov	ip, #0
   1bc10:	add	ip, ip, #1
   1bc14:	ldr	r4, [lr, #4]!
   1bc18:	cmp	r4, #0
   1bc1c:	bne	1bc10 <__assert_fail@plt+0xa4bc>
   1bc20:	str	ip, [sp, #4]
   1bc24:	str	r5, [sp]
   1bc28:	bl	1b7bc <__assert_fail@plt+0xa068>
   1bc2c:	add	sp, sp, #12
   1bc30:	ldrd	r4, [sp]
   1bc34:	add	sp, sp, #8
   1bc38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc3c:	mov	ip, #0
   1bc40:	b	1bc20 <__assert_fail@plt+0xa4cc>
   1bc44:	strd	r4, [sp, #-12]!
   1bc48:	str	lr, [sp, #8]
   1bc4c:	sub	sp, sp, #52	; 0x34
   1bc50:	ldr	r5, [sp, #64]	; 0x40
   1bc54:	add	r4, sp, #8
   1bc58:	mov	ip, #0
   1bc5c:	ldr	lr, [r5], #4
   1bc60:	str	lr, [r4], #4
   1bc64:	cmp	lr, #0
   1bc68:	beq	1bc78 <__assert_fail@plt+0xa524>
   1bc6c:	add	ip, ip, #1
   1bc70:	cmp	ip, #10
   1bc74:	bne	1bc5c <__assert_fail@plt+0xa508>
   1bc78:	str	ip, [sp, #4]
   1bc7c:	add	ip, sp, #8
   1bc80:	str	ip, [sp]
   1bc84:	bl	1b7bc <__assert_fail@plt+0xa068>
   1bc88:	add	sp, sp, #52	; 0x34
   1bc8c:	ldrd	r4, [sp]
   1bc90:	add	sp, sp, #8
   1bc94:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc98:	push	{r3}		; (str r3, [sp, #-4]!)
   1bc9c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bca0:	sub	sp, sp, #16
   1bca4:	add	r3, sp, #24
   1bca8:	str	r3, [sp, #12]
   1bcac:	str	r3, [sp]
   1bcb0:	ldr	r3, [sp, #20]
   1bcb4:	bl	1bc44 <__assert_fail@plt+0xa4f0>
   1bcb8:	add	sp, sp, #16
   1bcbc:	pop	{lr}		; (ldr lr, [sp], #4)
   1bcc0:	add	sp, sp, #4
   1bcc4:	bx	lr
   1bcc8:	str	r4, [sp, #-8]!
   1bccc:	str	lr, [sp, #4]
   1bcd0:	movw	r3, #12772	; 0x31e4
   1bcd4:	movt	r3, #3
   1bcd8:	ldr	r1, [r3]
   1bcdc:	mov	r0, #10
   1bce0:	bl	11424 <fputc_unlocked@plt>
   1bce4:	mov	r2, #5
   1bce8:	movw	r1, #10224	; 0x27f0
   1bcec:	movt	r1, #2
   1bcf0:	mov	r0, #0
   1bcf4:	bl	11430 <dcgettext@plt>
   1bcf8:	movw	r2, #10244	; 0x2804
   1bcfc:	movt	r2, #2
   1bd00:	mov	r1, r0
   1bd04:	mov	r0, #1
   1bd08:	bl	11628 <__printf_chk@plt>
   1bd0c:	mov	r2, #5
   1bd10:	movw	r1, #10268	; 0x281c
   1bd14:	movt	r1, #2
   1bd18:	mov	r0, #0
   1bd1c:	bl	11430 <dcgettext@plt>
   1bd20:	movw	r3, #8680	; 0x21e8
   1bd24:	movt	r3, #2
   1bd28:	movw	r2, #8720	; 0x2210
   1bd2c:	movt	r2, #2
   1bd30:	mov	r1, r0
   1bd34:	mov	r0, #1
   1bd38:	bl	11628 <__printf_chk@plt>
   1bd3c:	mov	r2, #5
   1bd40:	movw	r1, #10288	; 0x2830
   1bd44:	movt	r1, #2
   1bd48:	mov	r0, #0
   1bd4c:	bl	11430 <dcgettext@plt>
   1bd50:	movw	r2, #10328	; 0x2858
   1bd54:	movt	r2, #2
   1bd58:	mov	r1, r0
   1bd5c:	mov	r0, #1
   1bd60:	bl	11628 <__printf_chk@plt>
   1bd64:	ldr	r4, [sp]
   1bd68:	add	sp, sp, #4
   1bd6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd70:	str	r4, [sp, #-8]!
   1bd74:	str	lr, [sp, #4]
   1bd78:	bl	1c374 <__assert_fail@plt+0xac20>
   1bd7c:	cmp	r0, #0
   1bd80:	beq	1bd90 <__assert_fail@plt+0xa63c>
   1bd84:	ldr	r4, [sp]
   1bd88:	add	sp, sp, #4
   1bd8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd90:	bl	1c204 <__assert_fail@plt+0xaab0>
   1bd94:	str	r4, [sp, #-8]!
   1bd98:	str	lr, [sp, #4]
   1bd9c:	bl	1c374 <__assert_fail@plt+0xac20>
   1bda0:	cmp	r0, #0
   1bda4:	beq	1bdb4 <__assert_fail@plt+0xa660>
   1bda8:	ldr	r4, [sp]
   1bdac:	add	sp, sp, #4
   1bdb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdb4:	bl	1c204 <__assert_fail@plt+0xaab0>
   1bdb8:	str	r4, [sp, #-8]!
   1bdbc:	str	lr, [sp, #4]
   1bdc0:	bl	1bd70 <__assert_fail@plt+0xa61c>
   1bdc4:	ldr	r4, [sp]
   1bdc8:	add	sp, sp, #4
   1bdcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdd0:	strd	r4, [sp, #-16]!
   1bdd4:	str	r6, [sp, #8]
   1bdd8:	str	lr, [sp, #12]
   1bddc:	mov	r5, r0
   1bde0:	mov	r4, r1
   1bde4:	bl	1c3b0 <__assert_fail@plt+0xac5c>
   1bde8:	cmp	r0, #0
   1bdec:	beq	1be00 <__assert_fail@plt+0xa6ac>
   1bdf0:	ldrd	r4, [sp]
   1bdf4:	ldr	r6, [sp, #8]
   1bdf8:	add	sp, sp, #12
   1bdfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1be00:	adds	r4, r4, #0
   1be04:	movne	r4, #1
   1be08:	cmp	r5, #0
   1be0c:	moveq	r4, #1
   1be10:	cmp	r4, #0
   1be14:	beq	1bdf0 <__assert_fail@plt+0xa69c>
   1be18:	bl	1c204 <__assert_fail@plt+0xaab0>
   1be1c:	str	r4, [sp, #-8]!
   1be20:	str	lr, [sp, #4]
   1be24:	cmp	r1, #0
   1be28:	orreq	r1, r1, #1
   1be2c:	bl	1c3b0 <__assert_fail@plt+0xac5c>
   1be30:	cmp	r0, #0
   1be34:	beq	1be44 <__assert_fail@plt+0xa6f0>
   1be38:	ldr	r4, [sp]
   1be3c:	add	sp, sp, #4
   1be40:	pop	{pc}		; (ldr pc, [sp], #4)
   1be44:	bl	1c204 <__assert_fail@plt+0xaab0>
   1be48:	strd	r4, [sp, #-16]!
   1be4c:	str	r6, [sp, #8]
   1be50:	str	lr, [sp, #12]
   1be54:	mov	r4, r0
   1be58:	mov	r6, r1
   1be5c:	mov	r5, r2
   1be60:	bl	1e29c <__assert_fail@plt+0xcb48>
   1be64:	cmp	r0, #0
   1be68:	beq	1be7c <__assert_fail@plt+0xa728>
   1be6c:	ldrd	r4, [sp]
   1be70:	ldr	r6, [sp, #8]
   1be74:	add	sp, sp, #12
   1be78:	pop	{pc}		; (ldr pc, [sp], #4)
   1be7c:	cmp	r4, #0
   1be80:	beq	1be90 <__assert_fail@plt+0xa73c>
   1be84:	cmp	r6, #0
   1be88:	cmpne	r5, #0
   1be8c:	beq	1be6c <__assert_fail@plt+0xa718>
   1be90:	bl	1c204 <__assert_fail@plt+0xaab0>
   1be94:	str	r4, [sp, #-8]!
   1be98:	str	lr, [sp, #4]
   1be9c:	bl	1be48 <__assert_fail@plt+0xa6f4>
   1bea0:	ldr	r4, [sp]
   1bea4:	add	sp, sp, #4
   1bea8:	pop	{pc}		; (ldr pc, [sp], #4)
   1beac:	str	r4, [sp, #-8]!
   1beb0:	str	lr, [sp, #4]
   1beb4:	mov	ip, r1
   1beb8:	mov	r3, r2
   1bebc:	cmp	r2, #0
   1bec0:	cmpne	r1, #0
   1bec4:	moveq	r3, #1
   1bec8:	moveq	ip, r3
   1becc:	mov	r2, r3
   1bed0:	mov	r1, ip
   1bed4:	bl	1e29c <__assert_fail@plt+0xcb48>
   1bed8:	cmp	r0, #0
   1bedc:	beq	1beec <__assert_fail@plt+0xa798>
   1bee0:	ldr	r4, [sp]
   1bee4:	add	sp, sp, #4
   1bee8:	pop	{pc}		; (ldr pc, [sp], #4)
   1beec:	bl	1c204 <__assert_fail@plt+0xaab0>
   1bef0:	str	r4, [sp, #-8]!
   1bef4:	str	lr, [sp, #4]
   1bef8:	mov	r2, r1
   1befc:	mov	r1, r0
   1bf00:	mov	r0, #0
   1bf04:	bl	1be48 <__assert_fail@plt+0xa6f4>
   1bf08:	ldr	r4, [sp]
   1bf0c:	add	sp, sp, #4
   1bf10:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf14:	str	r4, [sp, #-8]!
   1bf18:	str	lr, [sp, #4]
   1bf1c:	mov	r2, r1
   1bf20:	mov	r1, r0
   1bf24:	mov	r0, #0
   1bf28:	bl	1beac <__assert_fail@plt+0xa758>
   1bf2c:	ldr	r4, [sp]
   1bf30:	add	sp, sp, #4
   1bf34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf38:	strd	r4, [sp, #-16]!
   1bf3c:	str	r6, [sp, #8]
   1bf40:	str	lr, [sp, #12]
   1bf44:	mov	r5, r1
   1bf48:	ldr	r4, [r1]
   1bf4c:	cmp	r0, #0
   1bf50:	beq	1bf80 <__assert_fail@plt+0xa82c>
   1bf54:	lsr	r3, r4, #1
   1bf58:	add	r3, r3, #1
   1bf5c:	adds	r4, r4, r3
   1bf60:	bcs	1bf9c <__assert_fail@plt+0xa848>
   1bf64:	mov	r1, r4
   1bf68:	bl	1be48 <__assert_fail@plt+0xa6f4>
   1bf6c:	str	r4, [r5]
   1bf70:	ldrd	r4, [sp]
   1bf74:	ldr	r6, [sp, #8]
   1bf78:	add	sp, sp, #12
   1bf7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf80:	cmp	r4, #0
   1bf84:	bne	1bf64 <__assert_fail@plt+0xa810>
   1bf88:	mov	r4, #64	; 0x40
   1bf8c:	udiv	r4, r4, r2
   1bf90:	cmp	r2, #64	; 0x40
   1bf94:	addhi	r4, r4, #1
   1bf98:	b	1bf64 <__assert_fail@plt+0xa810>
   1bf9c:	bl	1c204 <__assert_fail@plt+0xaab0>
   1bfa0:	str	r4, [sp, #-8]!
   1bfa4:	str	lr, [sp, #4]
   1bfa8:	mov	r2, #1
   1bfac:	bl	1bf38 <__assert_fail@plt+0xa7e4>
   1bfb0:	ldr	r4, [sp]
   1bfb4:	add	sp, sp, #4
   1bfb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bfc0:	strd	r6, [sp, #8]
   1bfc4:	str	r8, [sp, #16]
   1bfc8:	str	lr, [sp, #20]
   1bfcc:	mov	r5, r1
   1bfd0:	ldr	lr, [sp, #24]
   1bfd4:	ldr	ip, [r1]
   1bfd8:	asr	r4, ip, #1
   1bfdc:	adds	r4, ip, r4
   1bfe0:	movvs	r1, #1
   1bfe4:	movvc	r1, #0
   1bfe8:	cmp	r1, #0
   1bfec:	mvnne	r4, #-2147483648	; 0x80000000
   1bff0:	mvn	r8, r3
   1bff4:	lsr	r8, r8, #31
   1bff8:	cmp	r3, r4
   1bffc:	movge	r1, #0
   1c000:	andlt	r1, r8, #1
   1c004:	cmp	r1, #0
   1c008:	movne	r4, r3
   1c00c:	smull	r6, r7, r4, lr
   1c010:	asr	r1, r6, #31
   1c014:	cmp	r1, r7
   1c018:	bne	1c030 <__assert_fail@plt+0xa8dc>
   1c01c:	mov	r1, r6
   1c020:	cmp	r6, #63	; 0x3f
   1c024:	movle	r1, #64	; 0x40
   1c028:	ble	1c034 <__assert_fail@plt+0xa8e0>
   1c02c:	b	1c040 <__assert_fail@plt+0xa8ec>
   1c030:	mvn	r1, #-2147483648	; 0x80000000
   1c034:	sdiv	r4, r1, lr
   1c038:	mls	r6, lr, r4, r1
   1c03c:	sub	r1, r1, r6
   1c040:	cmp	r0, #0
   1c044:	moveq	r6, #0
   1c048:	streq	r6, [r5]
   1c04c:	sub	r6, r4, ip
   1c050:	cmp	r6, r2
   1c054:	bge	1c08c <__assert_fail@plt+0xa938>
   1c058:	adds	r2, ip, r2
   1c05c:	mov	r4, r2
   1c060:	bvs	1c0a8 <__assert_fail@plt+0xa954>
   1c064:	cmp	r2, r3
   1c068:	movle	r3, #0
   1c06c:	andgt	r3, r8, #1
   1c070:	cmp	r3, #0
   1c074:	bne	1c0a8 <__assert_fail@plt+0xa954>
   1c078:	smull	r2, r3, r2, lr
   1c07c:	asr	ip, r2, #31
   1c080:	mov	r1, r2
   1c084:	cmp	ip, r3
   1c088:	bne	1c0a8 <__assert_fail@plt+0xa954>
   1c08c:	bl	1bdd0 <__assert_fail@plt+0xa67c>
   1c090:	str	r4, [r5]
   1c094:	ldrd	r4, [sp]
   1c098:	ldrd	r6, [sp, #8]
   1c09c:	ldr	r8, [sp, #16]
   1c0a0:	add	sp, sp, #20
   1c0a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0a8:	bl	1c204 <__assert_fail@plt+0xaab0>
   1c0ac:	str	r4, [sp, #-8]!
   1c0b0:	str	lr, [sp, #4]
   1c0b4:	bl	1c300 <__assert_fail@plt+0xabac>
   1c0b8:	cmp	r0, #0
   1c0bc:	beq	1c0cc <__assert_fail@plt+0xa978>
   1c0c0:	ldr	r4, [sp]
   1c0c4:	add	sp, sp, #4
   1c0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0cc:	bl	1c204 <__assert_fail@plt+0xaab0>
   1c0d0:	str	r4, [sp, #-8]!
   1c0d4:	str	lr, [sp, #4]
   1c0d8:	mov	r1, #1
   1c0dc:	bl	1c0ac <__assert_fail@plt+0xa958>
   1c0e0:	ldr	r4, [sp]
   1c0e4:	add	sp, sp, #4
   1c0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0ec:	str	r4, [sp, #-8]!
   1c0f0:	str	lr, [sp, #4]
   1c0f4:	bl	1c300 <__assert_fail@plt+0xabac>
   1c0f8:	cmp	r0, #0
   1c0fc:	beq	1c10c <__assert_fail@plt+0xa9b8>
   1c100:	ldr	r4, [sp]
   1c104:	add	sp, sp, #4
   1c108:	pop	{pc}		; (ldr pc, [sp], #4)
   1c10c:	bl	1c204 <__assert_fail@plt+0xaab0>
   1c110:	str	r4, [sp, #-8]!
   1c114:	str	lr, [sp, #4]
   1c118:	mov	r1, #1
   1c11c:	bl	1c0ec <__assert_fail@plt+0xa998>
   1c120:	ldr	r4, [sp]
   1c124:	add	sp, sp, #4
   1c128:	pop	{pc}		; (ldr pc, [sp], #4)
   1c12c:	strd	r4, [sp, #-16]!
   1c130:	str	r6, [sp, #8]
   1c134:	str	lr, [sp, #12]
   1c138:	mov	r5, r0
   1c13c:	mov	r4, r1
   1c140:	mov	r0, r1
   1c144:	bl	1bd70 <__assert_fail@plt+0xa61c>
   1c148:	mov	r2, r4
   1c14c:	mov	r1, r5
   1c150:	bl	113f4 <memcpy@plt>
   1c154:	ldrd	r4, [sp]
   1c158:	ldr	r6, [sp, #8]
   1c15c:	add	sp, sp, #12
   1c160:	pop	{pc}		; (ldr pc, [sp], #4)
   1c164:	strd	r4, [sp, #-16]!
   1c168:	str	r6, [sp, #8]
   1c16c:	str	lr, [sp, #12]
   1c170:	mov	r5, r0
   1c174:	mov	r4, r1
   1c178:	mov	r0, r1
   1c17c:	bl	1bd94 <__assert_fail@plt+0xa640>
   1c180:	mov	r2, r4
   1c184:	mov	r1, r5
   1c188:	bl	113f4 <memcpy@plt>
   1c18c:	ldrd	r4, [sp]
   1c190:	ldr	r6, [sp, #8]
   1c194:	add	sp, sp, #12
   1c198:	pop	{pc}		; (ldr pc, [sp], #4)
   1c19c:	strd	r4, [sp, #-16]!
   1c1a0:	str	r6, [sp, #8]
   1c1a4:	str	lr, [sp, #12]
   1c1a8:	mov	r5, r0
   1c1ac:	mov	r4, r1
   1c1b0:	add	r0, r1, #1
   1c1b4:	bl	1bd94 <__assert_fail@plt+0xa640>
   1c1b8:	mov	r2, #0
   1c1bc:	strb	r2, [r0, r4]
   1c1c0:	mov	r2, r4
   1c1c4:	mov	r1, r5
   1c1c8:	bl	113f4 <memcpy@plt>
   1c1cc:	ldrd	r4, [sp]
   1c1d0:	ldr	r6, [sp, #8]
   1c1d4:	add	sp, sp, #12
   1c1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1dc:	str	r4, [sp, #-8]!
   1c1e0:	str	lr, [sp, #4]
   1c1e4:	mov	r4, r0
   1c1e8:	bl	115b0 <strlen@plt>
   1c1ec:	add	r1, r0, #1
   1c1f0:	mov	r0, r4
   1c1f4:	bl	1c12c <__assert_fail@plt+0xa9d8>
   1c1f8:	ldr	r4, [sp]
   1c1fc:	add	sp, sp, #4
   1c200:	pop	{pc}		; (ldr pc, [sp], #4)
   1c204:	str	r4, [sp, #-8]!
   1c208:	str	lr, [sp, #4]
   1c20c:	movw	r3, #12672	; 0x3180
   1c210:	movt	r3, #3
   1c214:	ldr	r4, [r3]
   1c218:	mov	r2, #5
   1c21c:	movw	r1, #10408	; 0x28a8
   1c220:	movt	r1, #2
   1c224:	mov	r0, #0
   1c228:	bl	11430 <dcgettext@plt>
   1c22c:	mov	r3, r0
   1c230:	movw	r2, #9156	; 0x23c4
   1c234:	movt	r2, #2
   1c238:	mov	r1, #0
   1c23c:	mov	r0, r4
   1c240:	bl	11520 <error@plt>
   1c244:	bl	11748 <abort@plt>
   1c248:	str	r4, [sp, #-8]!
   1c24c:	str	lr, [sp, #4]
   1c250:	sub	sp, sp, #8
   1c254:	ldr	ip, [sp, #16]
   1c258:	str	ip, [sp]
   1c25c:	bl	1e2d8 <__assert_fail@plt+0xcb84>
   1c260:	subs	r4, r0, #0
   1c264:	blt	1c27c <__assert_fail@plt+0xab28>
   1c268:	mov	r0, r4
   1c26c:	add	sp, sp, #8
   1c270:	ldr	r4, [sp]
   1c274:	add	sp, sp, #4
   1c278:	pop	{pc}		; (ldr pc, [sp], #4)
   1c27c:	bl	115e0 <__errno_location@plt>
   1c280:	ldr	r3, [r0]
   1c284:	cmp	r3, #12
   1c288:	bne	1c268 <__assert_fail@plt+0xab14>
   1c28c:	bl	1c204 <__assert_fail@plt+0xaab0>
   1c290:	str	r4, [sp, #-8]!
   1c294:	str	lr, [sp, #4]
   1c298:	bl	1e530 <__assert_fail@plt+0xcddc>
   1c29c:	subs	r4, r0, #0
   1c2a0:	beq	1c2b4 <__assert_fail@plt+0xab60>
   1c2a4:	mov	r0, r4
   1c2a8:	ldr	r4, [sp]
   1c2ac:	add	sp, sp, #4
   1c2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2b4:	bl	115e0 <__errno_location@plt>
   1c2b8:	ldr	r3, [r0]
   1c2bc:	cmp	r3, #12
   1c2c0:	bne	1c2a4 <__assert_fail@plt+0xab50>
   1c2c4:	bl	1c204 <__assert_fail@plt+0xaab0>
   1c2c8:	str	r4, [sp, #-8]!
   1c2cc:	str	lr, [sp, #4]
   1c2d0:	bl	1e744 <__assert_fail@plt+0xcff0>
   1c2d4:	subs	r4, r0, #0
   1c2d8:	beq	1c2ec <__assert_fail@plt+0xab98>
   1c2dc:	mov	r0, r4
   1c2e0:	ldr	r4, [sp]
   1c2e4:	add	sp, sp, #4
   1c2e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2ec:	bl	115e0 <__errno_location@plt>
   1c2f0:	ldr	r3, [r0]
   1c2f4:	cmp	r3, #12
   1c2f8:	bne	1c2dc <__assert_fail@plt+0xab88>
   1c2fc:	bl	1c204 <__assert_fail@plt+0xaab0>
   1c300:	strd	r4, [sp, #-16]!
   1c304:	str	r6, [sp, #8]
   1c308:	str	lr, [sp, #12]
   1c30c:	cmp	r1, #0
   1c310:	cmpne	r0, #0
   1c314:	beq	1c350 <__assert_fail@plt+0xabfc>
   1c318:	mov	r2, r0
   1c31c:	mov	r3, r1
   1c320:	umull	r4, r5, r0, r1
   1c324:	adds	r1, r5, #0
   1c328:	movne	r1, #1
   1c32c:	cmp	r4, #0
   1c330:	movlt	r1, #1
   1c334:	cmp	r1, #0
   1c338:	beq	1c358 <__assert_fail@plt+0xac04>
   1c33c:	bl	115e0 <__errno_location@plt>
   1c340:	mov	r3, #12
   1c344:	str	r3, [r0]
   1c348:	mov	r0, #0
   1c34c:	b	1c364 <__assert_fail@plt+0xac10>
   1c350:	mov	r3, #1
   1c354:	mov	r2, r3
   1c358:	mov	r1, r3
   1c35c:	mov	r0, r2
   1c360:	bl	11340 <calloc@plt>
   1c364:	ldrd	r4, [sp]
   1c368:	ldr	r6, [sp, #8]
   1c36c:	add	sp, sp, #12
   1c370:	pop	{pc}		; (ldr pc, [sp], #4)
   1c374:	str	r4, [sp, #-8]!
   1c378:	str	lr, [sp, #4]
   1c37c:	cmp	r0, #0
   1c380:	beq	1c39c <__assert_fail@plt+0xac48>
   1c384:	bge	1c3a0 <__assert_fail@plt+0xac4c>
   1c388:	bl	115e0 <__errno_location@plt>
   1c38c:	mov	r3, #12
   1c390:	str	r3, [r0]
   1c394:	mov	r0, #0
   1c398:	b	1c3a4 <__assert_fail@plt+0xac50>
   1c39c:	mov	r0, #1
   1c3a0:	bl	1152c <malloc@plt>
   1c3a4:	ldr	r4, [sp]
   1c3a8:	add	sp, sp, #4
   1c3ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3b0:	str	r4, [sp, #-8]!
   1c3b4:	str	lr, [sp, #4]
   1c3b8:	cmp	r0, #0
   1c3bc:	beq	1c3e0 <__assert_fail@plt+0xac8c>
   1c3c0:	cmp	r1, #0
   1c3c4:	beq	1c3ec <__assert_fail@plt+0xac98>
   1c3c8:	cmp	r1, #0
   1c3cc:	blt	1c3f8 <__assert_fail@plt+0xaca4>
   1c3d0:	bl	11478 <realloc@plt>
   1c3d4:	ldr	r4, [sp]
   1c3d8:	add	sp, sp, #4
   1c3dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3e0:	mov	r0, r1
   1c3e4:	bl	1c374 <__assert_fail@plt+0xac20>
   1c3e8:	b	1c3d4 <__assert_fail@plt+0xac80>
   1c3ec:	bl	17c94 <__assert_fail@plt+0x6540>
   1c3f0:	mov	r0, #0
   1c3f4:	b	1c3d4 <__assert_fail@plt+0xac80>
   1c3f8:	bl	115e0 <__errno_location@plt>
   1c3fc:	mov	r3, #12
   1c400:	str	r3, [r0]
   1c404:	mov	r0, #0
   1c408:	b	1c3d4 <__assert_fail@plt+0xac80>
   1c40c:	cmp	r0, r1
   1c410:	beq	1c468 <__assert_fail@plt+0xad14>
   1c414:	push	{lr}		; (str lr, [sp, #-4]!)
   1c418:	sub	ip, r0, #1
   1c41c:	sub	r1, r1, #1
   1c420:	ldrb	r3, [ip, #1]!
   1c424:	sub	r2, r3, #65	; 0x41
   1c428:	cmp	r2, #25
   1c42c:	addls	r3, r3, #32
   1c430:	uxtb	r2, r3
   1c434:	ldrb	r0, [r1, #1]!
   1c438:	sub	lr, r0, #65	; 0x41
   1c43c:	cmp	lr, #25
   1c440:	addls	r0, r0, #32
   1c444:	uxtb	lr, r0
   1c448:	cmp	r2, #0
   1c44c:	beq	1c458 <__assert_fail@plt+0xad04>
   1c450:	cmp	r2, lr
   1c454:	beq	1c420 <__assert_fail@plt+0xaccc>
   1c458:	uxtb	r3, r3
   1c45c:	uxtb	r0, r0
   1c460:	sub	r0, r3, r0
   1c464:	pop	{pc}		; (ldr pc, [sp], #4)
   1c468:	mov	r0, #0
   1c46c:	bx	lr
   1c470:	strd	r4, [sp, #-16]!
   1c474:	str	r6, [sp, #8]
   1c478:	str	lr, [sp, #12]
   1c47c:	mov	r5, r0
   1c480:	bl	11508 <__fpending@plt>
   1c484:	mov	r6, r0
   1c488:	ldr	r4, [r5]
   1c48c:	and	r4, r4, #32
   1c490:	mov	r0, r5
   1c494:	bl	1c4fc <__assert_fail@plt+0xada8>
   1c498:	cmp	r4, #0
   1c49c:	bne	1c4d0 <__assert_fail@plt+0xad7c>
   1c4a0:	cmp	r0, #0
   1c4a4:	beq	1c4c0 <__assert_fail@plt+0xad6c>
   1c4a8:	cmp	r6, #0
   1c4ac:	bne	1c4ec <__assert_fail@plt+0xad98>
   1c4b0:	bl	115e0 <__errno_location@plt>
   1c4b4:	ldr	r0, [r0]
   1c4b8:	subs	r0, r0, #9
   1c4bc:	mvnne	r0, #0
   1c4c0:	ldrd	r4, [sp]
   1c4c4:	ldr	r6, [sp, #8]
   1c4c8:	add	sp, sp, #12
   1c4cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4d0:	cmp	r0, #0
   1c4d4:	bne	1c4f4 <__assert_fail@plt+0xada0>
   1c4d8:	bl	115e0 <__errno_location@plt>
   1c4dc:	mov	r3, #0
   1c4e0:	str	r3, [r0]
   1c4e4:	mvn	r0, #0
   1c4e8:	b	1c4c0 <__assert_fail@plt+0xad6c>
   1c4ec:	mvn	r0, #0
   1c4f0:	b	1c4c0 <__assert_fail@plt+0xad6c>
   1c4f4:	mvn	r0, #0
   1c4f8:	b	1c4c0 <__assert_fail@plt+0xad6c>
   1c4fc:	strd	r4, [sp, #-16]!
   1c500:	str	r6, [sp, #8]
   1c504:	str	lr, [sp, #12]
   1c508:	sub	sp, sp, #8
   1c50c:	mov	r4, r0
   1c510:	bl	11640 <fileno@plt>
   1c514:	cmp	r0, #0
   1c518:	blt	1c590 <__assert_fail@plt+0xae3c>
   1c51c:	mov	r0, r4
   1c520:	bl	11550 <__freading@plt>
   1c524:	cmp	r0, #0
   1c528:	beq	1c55c <__assert_fail@plt+0xae08>
   1c52c:	mov	r0, r4
   1c530:	bl	11640 <fileno@plt>
   1c534:	mov	r3, #1
   1c538:	str	r3, [sp]
   1c53c:	mov	r2, #0
   1c540:	mov	r3, #0
   1c544:	bl	114e4 <lseek64@plt>
   1c548:	mvn	r2, #0
   1c54c:	mvn	r3, #0
   1c550:	cmp	r1, r3
   1c554:	cmpeq	r0, r2
   1c558:	beq	1c59c <__assert_fail@plt+0xae48>
   1c55c:	mov	r0, r4
   1c560:	bl	1c5b8 <__assert_fail@plt+0xae64>
   1c564:	cmp	r0, #0
   1c568:	beq	1c59c <__assert_fail@plt+0xae48>
   1c56c:	bl	115e0 <__errno_location@plt>
   1c570:	mov	r5, r0
   1c574:	ldr	r6, [r0]
   1c578:	mov	r0, r4
   1c57c:	bl	11664 <fclose@plt>
   1c580:	cmp	r6, #0
   1c584:	strne	r6, [r5]
   1c588:	mvnne	r0, #0
   1c58c:	b	1c5a4 <__assert_fail@plt+0xae50>
   1c590:	mov	r0, r4
   1c594:	bl	11664 <fclose@plt>
   1c598:	b	1c5a4 <__assert_fail@plt+0xae50>
   1c59c:	mov	r0, r4
   1c5a0:	bl	11664 <fclose@plt>
   1c5a4:	add	sp, sp, #8
   1c5a8:	ldrd	r4, [sp]
   1c5ac:	ldr	r6, [sp, #8]
   1c5b0:	add	sp, sp, #12
   1c5b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5b8:	str	r4, [sp, #-8]!
   1c5bc:	str	lr, [sp, #4]
   1c5c0:	sub	sp, sp, #8
   1c5c4:	subs	r4, r0, #0
   1c5c8:	beq	1c5dc <__assert_fail@plt+0xae88>
   1c5cc:	mov	r0, r4
   1c5d0:	bl	11550 <__freading@plt>
   1c5d4:	cmp	r0, #0
   1c5d8:	bne	1c5f4 <__assert_fail@plt+0xaea0>
   1c5dc:	mov	r0, r4
   1c5e0:	bl	11394 <fflush@plt>
   1c5e4:	add	sp, sp, #8
   1c5e8:	ldr	r4, [sp]
   1c5ec:	add	sp, sp, #4
   1c5f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5f4:	ldr	r3, [r4]
   1c5f8:	tst	r3, #256	; 0x100
   1c5fc:	bne	1c60c <__assert_fail@plt+0xaeb8>
   1c600:	mov	r0, r4
   1c604:	bl	11394 <fflush@plt>
   1c608:	b	1c5e4 <__assert_fail@plt+0xae90>
   1c60c:	mov	r3, #1
   1c610:	str	r3, [sp]
   1c614:	mov	r2, #0
   1c618:	mov	r3, #0
   1c61c:	mov	r0, r4
   1c620:	bl	1c628 <__assert_fail@plt+0xaed4>
   1c624:	b	1c600 <__assert_fail@plt+0xaeac>
   1c628:	str	r4, [sp, #-16]!
   1c62c:	strd	r6, [sp, #4]
   1c630:	str	lr, [sp, #12]
   1c634:	sub	sp, sp, #8
   1c638:	mov	r4, r0
   1c63c:	mov	r6, r2
   1c640:	mov	r7, r3
   1c644:	ldr	r2, [r0, #8]
   1c648:	ldr	r3, [r0, #4]
   1c64c:	cmp	r2, r3
   1c650:	beq	1c680 <__assert_fail@plt+0xaf2c>
   1c654:	ldr	r3, [sp, #24]
   1c658:	str	r3, [sp]
   1c65c:	mov	r2, r6
   1c660:	mov	r3, r7
   1c664:	mov	r0, r4
   1c668:	bl	1167c <fseeko64@plt>
   1c66c:	add	sp, sp, #8
   1c670:	ldr	r4, [sp]
   1c674:	ldrd	r6, [sp, #4]
   1c678:	add	sp, sp, #12
   1c67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c680:	ldr	r2, [r0, #20]
   1c684:	ldr	r3, [r0, #16]
   1c688:	cmp	r2, r3
   1c68c:	bne	1c654 <__assert_fail@plt+0xaf00>
   1c690:	ldr	r3, [r0, #36]	; 0x24
   1c694:	cmp	r3, #0
   1c698:	bne	1c654 <__assert_fail@plt+0xaf00>
   1c69c:	bl	11640 <fileno@plt>
   1c6a0:	ldr	r3, [sp, #24]
   1c6a4:	str	r3, [sp]
   1c6a8:	mov	r2, r6
   1c6ac:	mov	r3, r7
   1c6b0:	bl	114e4 <lseek64@plt>
   1c6b4:	mvn	r2, #0
   1c6b8:	mvn	r3, #0
   1c6bc:	cmp	r1, r3
   1c6c0:	cmpeq	r0, r2
   1c6c4:	beq	1c6e0 <__assert_fail@plt+0xaf8c>
   1c6c8:	ldr	r3, [r4]
   1c6cc:	bic	r3, r3, #16
   1c6d0:	str	r3, [r4]
   1c6d4:	strd	r0, [r4, #80]	; 0x50
   1c6d8:	mov	r0, #0
   1c6dc:	b	1c66c <__assert_fail@plt+0xaf18>
   1c6e0:	mvn	r0, #0
   1c6e4:	b	1c66c <__assert_fail@plt+0xaf18>
   1c6e8:	str	r4, [sp, #-8]!
   1c6ec:	str	lr, [sp, #4]
   1c6f0:	mov	r0, #14
   1c6f4:	bl	116dc <nl_langinfo@plt>
   1c6f8:	cmp	r0, #0
   1c6fc:	beq	1c720 <__assert_fail@plt+0xafcc>
   1c700:	ldrb	r2, [r0]
   1c704:	movw	r3, #10428	; 0x28bc
   1c708:	movt	r3, #2
   1c70c:	cmp	r2, #0
   1c710:	moveq	r0, r3
   1c714:	ldr	r4, [sp]
   1c718:	add	sp, sp, #4
   1c71c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c720:	movw	r0, #10428	; 0x28bc
   1c724:	movt	r0, #2
   1c728:	b	1c714 <__assert_fail@plt+0xafc0>
   1c72c:	str	r4, [sp, #-8]!
   1c730:	str	lr, [sp, #4]
   1c734:	mov	r4, r0
   1c738:	bl	113b8 <wcwidth@plt>
   1c73c:	cmp	r0, #0
   1c740:	blt	1c750 <__assert_fail@plt+0xaffc>
   1c744:	ldr	r4, [sp]
   1c748:	add	sp, sp, #4
   1c74c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c750:	mov	r0, r4
   1c754:	bl	114a8 <iswcntrl@plt>
   1c758:	clz	r0, r0
   1c75c:	lsr	r0, r0, #5
   1c760:	b	1c744 <__assert_fail@plt+0xaff0>
   1c764:	strd	r4, [sp, #-16]!
   1c768:	str	r6, [sp, #8]
   1c76c:	str	lr, [sp, #12]
   1c770:	mov	r5, r0
   1c774:	mov	r4, r1
   1c778:	ldr	r3, [r1], #16
   1c77c:	cmp	r3, r1
   1c780:	strne	r3, [r0]
   1c784:	beq	1c7b4 <__assert_fail@plt+0xb060>
   1c788:	ldr	r3, [r4, #4]
   1c78c:	str	r3, [r5, #4]
   1c790:	ldrb	r3, [r4, #8]
   1c794:	strb	r3, [r5, #8]
   1c798:	cmp	r3, #0
   1c79c:	ldrne	r3, [r4, #12]
   1c7a0:	strne	r3, [r5, #12]
   1c7a4:	ldrd	r4, [sp]
   1c7a8:	ldr	r6, [sp, #8]
   1c7ac:	add	sp, sp, #12
   1c7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7b4:	add	r6, r0, #16
   1c7b8:	ldr	r2, [r4, #4]
   1c7bc:	mov	r0, r6
   1c7c0:	bl	113f4 <memcpy@plt>
   1c7c4:	str	r6, [r5]
   1c7c8:	b	1c788 <__assert_fail@plt+0xb034>
   1c7cc:	movw	r3, #10436	; 0x28c4
   1c7d0:	movt	r3, #2
   1c7d4:	lsr	r2, r0, #5
   1c7d8:	and	r0, r0, #31
   1c7dc:	ldr	r3, [r3, r2, lsl #2]
   1c7e0:	lsr	r0, r3, r0
   1c7e4:	and	r0, r0, #1
   1c7e8:	bx	lr
   1c7ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c7f0:	strd	r6, [sp, #8]
   1c7f4:	str	lr, [sp, #16]
   1c7f8:	sub	sp, sp, #12
   1c7fc:	mov	r7, r1
   1c800:	mov	r5, r2
   1c804:	subs	r6, r0, #0
   1c808:	addeq	r6, sp, #4
   1c80c:	mov	r0, r6
   1c810:	bl	11514 <mbrtowc@plt>
   1c814:	mov	r4, r0
   1c818:	cmp	r5, #0
   1c81c:	cmnne	r0, #3
   1c820:	bhi	1c83c <__assert_fail@plt+0xb0e8>
   1c824:	mov	r0, r4
   1c828:	add	sp, sp, #12
   1c82c:	ldrd	r4, [sp]
   1c830:	ldrd	r6, [sp, #8]
   1c834:	add	sp, sp, #16
   1c838:	pop	{pc}		; (ldr pc, [sp], #4)
   1c83c:	mov	r0, #0
   1c840:	bl	1e824 <__assert_fail@plt+0xd0d0>
   1c844:	cmp	r0, #0
   1c848:	bne	1c824 <__assert_fail@plt+0xb0d0>
   1c84c:	ldrb	r3, [r7]
   1c850:	str	r3, [r6]
   1c854:	mov	r4, #1
   1c858:	b	1c824 <__assert_fail@plt+0xb0d0>
   1c85c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c860:	strd	r6, [sp, #8]
   1c864:	strd	r8, [sp, #16]
   1c868:	str	fp, [sp, #24]
   1c86c:	str	lr, [sp, #28]
   1c870:	add	fp, sp, #28
   1c874:	mov	r7, r3
   1c878:	lsl	r3, r2, #2
   1c87c:	lsr	r8, r2, #30
   1c880:	adds	r8, r8, #0
   1c884:	movne	r8, #1
   1c888:	cmp	r3, #0
   1c88c:	movlt	r8, #1
   1c890:	cmp	r8, #0
   1c894:	movne	r8, #0
   1c898:	bne	1c9b4 <__assert_fail@plt+0xb260>
   1c89c:	mov	r6, r0
   1c8a0:	mov	r4, r1
   1c8a4:	mov	r5, r2
   1c8a8:	mov	r0, r3
   1c8ac:	cmp	r3, #4016	; 0xfb0
   1c8b0:	bhi	1c8f0 <__assert_fail@plt+0xb19c>
   1c8b4:	add	r3, r3, #22
   1c8b8:	bic	r3, r3, #7
   1c8bc:	sub	sp, sp, r3
   1c8c0:	add	r0, sp, #15
   1c8c4:	bic	r0, r0, #15
   1c8c8:	cmp	r0, #0
   1c8cc:	beq	1c9b4 <__assert_fail@plt+0xb260>
   1c8d0:	mov	r3, #1
   1c8d4:	str	r3, [r0, #4]
   1c8d8:	cmp	r5, #2
   1c8dc:	bls	1c950 <__assert_fail@plt+0xb1fc>
   1c8e0:	mov	lr, r4
   1c8e4:	mov	r3, #0
   1c8e8:	mov	ip, #2
   1c8ec:	b	1c910 <__assert_fail@plt+0xb1bc>
   1c8f0:	bl	1e880 <__assert_fail@plt+0xd12c>
   1c8f4:	b	1c8c8 <__assert_fail@plt+0xb174>
   1c8f8:	add	r3, r3, #1
   1c8fc:	sub	r2, ip, r3
   1c900:	str	r2, [r0, ip, lsl #2]
   1c904:	add	ip, ip, #1
   1c908:	cmp	r5, ip
   1c90c:	beq	1c950 <__assert_fail@plt+0xb1fc>
   1c910:	ldrb	r1, [lr, #1]!
   1c914:	ldrb	r2, [r4, r3]
   1c918:	cmp	r2, r1
   1c91c:	beq	1c8f8 <__assert_fail@plt+0xb1a4>
   1c920:	cmp	r3, #0
   1c924:	beq	1c944 <__assert_fail@plt+0xb1f0>
   1c928:	ldr	r2, [r0, r3, lsl #2]
   1c92c:	sub	r3, r3, r2
   1c930:	ldrb	r2, [r4, r3]
   1c934:	cmp	r2, r1
   1c938:	beq	1c8f8 <__assert_fail@plt+0xb1a4>
   1c93c:	cmp	r3, #0
   1c940:	bne	1c928 <__assert_fail@plt+0xb1d4>
   1c944:	str	ip, [r0, ip, lsl #2]
   1c948:	mov	r3, #0
   1c94c:	b	1c904 <__assert_fail@plt+0xb1b0>
   1c950:	mov	r3, #0
   1c954:	str	r3, [r7]
   1c958:	mov	r1, r6
   1c95c:	b	1c970 <__assert_fail@plt+0xb21c>
   1c960:	add	r3, r3, #1
   1c964:	add	r1, r1, #1
   1c968:	cmp	r5, r3
   1c96c:	beq	1c9a8 <__assert_fail@plt+0xb254>
   1c970:	ldrb	r2, [r1]
   1c974:	cmp	r2, #0
   1c978:	beq	1c9ac <__assert_fail@plt+0xb258>
   1c97c:	ldrb	ip, [r4, r3]
   1c980:	cmp	ip, r2
   1c984:	beq	1c960 <__assert_fail@plt+0xb20c>
   1c988:	cmp	r3, #0
   1c98c:	addeq	r6, r6, #1
   1c990:	addeq	r1, r1, #1
   1c994:	beq	1c970 <__assert_fail@plt+0xb21c>
   1c998:	ldr	r2, [r0, r3, lsl #2]
   1c99c:	add	r6, r6, r2
   1c9a0:	sub	r3, r3, r2
   1c9a4:	b	1c970 <__assert_fail@plt+0xb21c>
   1c9a8:	str	r6, [r7]
   1c9ac:	bl	1e8e8 <__assert_fail@plt+0xd194>
   1c9b0:	mov	r8, #1
   1c9b4:	mov	r0, r8
   1c9b8:	sub	sp, fp, #28
   1c9bc:	ldrd	r4, [sp]
   1c9c0:	ldrd	r6, [sp, #8]
   1c9c4:	ldrd	r8, [sp, #16]
   1c9c8:	ldr	fp, [sp, #24]
   1c9cc:	add	sp, sp, #28
   1c9d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c9d8:	strd	r6, [sp, #8]
   1c9dc:	strd	r8, [sp, #16]
   1c9e0:	strd	sl, [sp, #24]
   1c9e4:	str	lr, [sp, #32]
   1c9e8:	add	fp, sp, #32
   1c9ec:	sub	sp, sp, #140	; 0x8c
   1c9f0:	str	r0, [fp, #-164]	; 0xffffff5c
   1c9f4:	mov	r4, r1
   1c9f8:	str	r2, [fp, #-160]	; 0xffffff60
   1c9fc:	mov	r0, r1
   1ca00:	bl	1e920 <__assert_fail@plt+0xd1cc>
   1ca04:	str	r0, [fp, #-152]	; 0xffffff68
   1ca08:	mov	r2, #44	; 0x2c
   1ca0c:	umull	r6, r7, r0, r2
   1ca10:	adds	r3, r7, #0
   1ca14:	movne	r3, #1
   1ca18:	cmp	r6, #0
   1ca1c:	movlt	r3, #1
   1ca20:	str	r3, [fp, #-156]	; 0xffffff64
   1ca24:	cmp	r3, #0
   1ca28:	bne	1d278 <__assert_fail@plt+0xbb24>
   1ca2c:	mov	r1, r0
   1ca30:	mul	r0, r2, r1
   1ca34:	cmp	r0, #4016	; 0xfb0
   1ca38:	bhi	1ca94 <__assert_fail@plt+0xb340>
   1ca3c:	add	r3, r0, #22
   1ca40:	bic	r3, r3, #7
   1ca44:	sub	sp, sp, r3
   1ca48:	add	r8, sp, #15
   1ca4c:	bic	r8, r8, #15
   1ca50:	cmp	r8, #0
   1ca54:	beq	1cdd4 <__assert_fail@plt+0xb680>
   1ca58:	ldr	r3, [fp, #-152]	; 0xffffff68
   1ca5c:	add	r9, r3, r3, lsl #2
   1ca60:	add	r9, r8, r9, lsl #3
   1ca64:	str	r4, [fp, #-76]	; 0xffffffb4
   1ca68:	mov	r3, #0
   1ca6c:	strb	r3, [fp, #-92]	; 0xffffffa4
   1ca70:	mov	r0, #0
   1ca74:	mov	r1, #0
   1ca78:	strd	r0, [fp, #-88]	; 0xffffffa8
   1ca7c:	strb	r3, [fp, #-80]	; 0xffffffb0
   1ca80:	add	r4, r8, #16
   1ca84:	mov	r5, #1
   1ca88:	movw	r7, #10436	; 0x28c4
   1ca8c:	movt	r7, #2
   1ca90:	b	1cbb8 <__assert_fail@plt+0xb464>
   1ca94:	bl	1e880 <__assert_fail@plt+0xd12c>
   1ca98:	mov	r8, r0
   1ca9c:	b	1ca50 <__assert_fail@plt+0xb2fc>
   1caa0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1caa4:	sub	r1, fp, #60	; 0x3c
   1caa8:	mov	r0, r4
   1caac:	bl	113f4 <memcpy@plt>
   1cab0:	str	r4, [r4, #-16]
   1cab4:	b	1cb84 <__assert_fail@plt+0xb430>
   1cab8:	sub	r0, fp, #88	; 0x58
   1cabc:	bl	1140c <mbsinit@plt>
   1cac0:	cmp	r0, #0
   1cac4:	beq	1cc04 <__assert_fail@plt+0xb4b0>
   1cac8:	strb	r5, [fp, #-92]	; 0xffffffa4
   1cacc:	ldr	r6, [fp, #-76]	; 0xffffffb4
   1cad0:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1cad4:	mov	r1, r0
   1cad8:	mov	r0, r6
   1cadc:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1cae0:	sub	r3, fp, #88	; 0x58
   1cae4:	mov	r2, r0
   1cae8:	mov	r1, r6
   1caec:	sub	r0, fp, #64	; 0x40
   1caf0:	bl	1c7ec <__assert_fail@plt+0xb098>
   1caf4:	str	r0, [fp, #-72]	; 0xffffffb8
   1caf8:	cmn	r0, #1
   1cafc:	streq	r5, [fp, #-72]	; 0xffffffb8
   1cb00:	moveq	r3, #0
   1cb04:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   1cb08:	beq	1cb54 <__assert_fail@plt+0xb400>
   1cb0c:	cmn	r0, #2
   1cb10:	beq	1cc24 <__assert_fail@plt+0xb4d0>
   1cb14:	cmp	r0, #0
   1cb18:	bne	1cb3c <__assert_fail@plt+0xb3e8>
   1cb1c:	str	r5, [fp, #-72]	; 0xffffffb8
   1cb20:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1cb24:	ldrb	r3, [r3]
   1cb28:	cmp	r3, #0
   1cb2c:	bne	1cc3c <__assert_fail@plt+0xb4e8>
   1cb30:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1cb34:	cmp	r3, #0
   1cb38:	bne	1cc5c <__assert_fail@plt+0xb508>
   1cb3c:	strb	r5, [fp, #-68]	; 0xffffffbc
   1cb40:	sub	r0, fp, #88	; 0x58
   1cb44:	bl	1140c <mbsinit@plt>
   1cb48:	cmp	r0, #0
   1cb4c:	movne	r3, #0
   1cb50:	strbne	r3, [fp, #-92]	; 0xffffffa4
   1cb54:	strb	r5, [fp, #-80]	; 0xffffffb0
   1cb58:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1cb5c:	cmp	r3, #0
   1cb60:	beq	1cb70 <__assert_fail@plt+0xb41c>
   1cb64:	ldr	r6, [fp, #-64]	; 0xffffffc0
   1cb68:	cmp	r6, #0
   1cb6c:	beq	1cc7c <__assert_fail@plt+0xb528>
   1cb70:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1cb74:	sub	r2, fp, #60	; 0x3c
   1cb78:	cmp	r3, r2
   1cb7c:	strne	r3, [r4, #-16]
   1cb80:	beq	1caa0 <__assert_fail@plt+0xb34c>
   1cb84:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1cb88:	str	r2, [r4, #-12]
   1cb8c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1cb90:	strb	r3, [r4, #-8]
   1cb94:	cmp	r3, #0
   1cb98:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   1cb9c:	strne	r3, [r4, #-4]
   1cba0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1cba4:	add	r3, r3, r2
   1cba8:	str	r3, [fp, #-76]	; 0xffffffb4
   1cbac:	mov	r3, #0
   1cbb0:	strb	r3, [fp, #-80]	; 0xffffffb0
   1cbb4:	add	r4, r4, #40	; 0x28
   1cbb8:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1cbbc:	cmp	r3, #0
   1cbc0:	bne	1cb58 <__assert_fail@plt+0xb404>
   1cbc4:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1cbc8:	cmp	r3, #0
   1cbcc:	bne	1cacc <__assert_fail@plt+0xb378>
   1cbd0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1cbd4:	ldrb	r3, [r1]
   1cbd8:	lsr	r2, r3, #5
   1cbdc:	and	r3, r3, #31
   1cbe0:	ldr	r2, [r7, r2, lsl #2]
   1cbe4:	lsr	r3, r2, r3
   1cbe8:	tst	r3, #1
   1cbec:	beq	1cab8 <__assert_fail@plt+0xb364>
   1cbf0:	str	r5, [fp, #-72]	; 0xffffffb8
   1cbf4:	ldrb	r3, [r1]
   1cbf8:	str	r3, [fp, #-64]	; 0xffffffc0
   1cbfc:	strb	r5, [fp, #-68]	; 0xffffffbc
   1cc00:	b	1cb54 <__assert_fail@plt+0xb400>
   1cc04:	movw	r3, #10468	; 0x28e4
   1cc08:	movt	r3, #2
   1cc0c:	mov	r2, #143	; 0x8f
   1cc10:	movw	r1, #9248	; 0x2420
   1cc14:	movt	r1, #2
   1cc18:	movw	r0, #9264	; 0x2430
   1cc1c:	movt	r0, #2
   1cc20:	bl	11754 <__assert_fail@plt>
   1cc24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1cc28:	bl	115b0 <strlen@plt>
   1cc2c:	str	r0, [fp, #-72]	; 0xffffffb8
   1cc30:	mov	r3, #0
   1cc34:	strb	r3, [fp, #-68]	; 0xffffffbc
   1cc38:	b	1cb54 <__assert_fail@plt+0xb400>
   1cc3c:	movw	r3, #10468	; 0x28e4
   1cc40:	movt	r3, #2
   1cc44:	mov	r2, #171	; 0xab
   1cc48:	movw	r1, #9248	; 0x2420
   1cc4c:	movt	r1, #2
   1cc50:	movw	r0, #9288	; 0x2448
   1cc54:	movt	r0, #2
   1cc58:	bl	11754 <__assert_fail@plt>
   1cc5c:	movw	r3, #10468	; 0x28e4
   1cc60:	movt	r3, #2
   1cc64:	mov	r2, #172	; 0xac
   1cc68:	movw	r1, #9248	; 0x2420
   1cc6c:	movt	r1, #2
   1cc70:	movw	r0, #9312	; 0x2460
   1cc74:	movt	r0, #2
   1cc78:	bl	11754 <__assert_fail@plt>
   1cc7c:	str	r3, [fp, #-156]	; 0xffffff64
   1cc80:	mov	r3, #1
   1cc84:	str	r3, [r9, #4]
   1cc88:	ldr	r3, [fp, #-152]	; 0xffffff68
   1cc8c:	cmp	r3, #2
   1cc90:	bls	1cd60 <__assert_fail@plt+0xb60c>
   1cc94:	mov	r7, r8
   1cc98:	mov	r4, r6
   1cc9c:	mov	sl, #2
   1cca0:	str	r6, [fp, #-168]	; 0xffffff58
   1cca4:	b	1cd48 <__assert_fail@plt+0xb5f4>
   1cca8:	ldr	r2, [r5, #44]	; 0x2c
   1ccac:	add	r3, r4, r4, lsl #2
   1ccb0:	add	r1, r8, r3, lsl #3
   1ccb4:	ldr	r1, [r1, #4]
   1ccb8:	cmp	r2, r1
   1ccbc:	movne	r0, #0
   1ccc0:	beq	1cd10 <__assert_fail@plt+0xb5bc>
   1ccc4:	cmp	r0, #0
   1ccc8:	bne	1cd28 <__assert_fail@plt+0xb5d4>
   1cccc:	cmp	r4, #0
   1ccd0:	beq	1cd54 <__assert_fail@plt+0xb600>
   1ccd4:	ldr	r3, [r9, r4, lsl #2]
   1ccd8:	sub	r4, r4, r3
   1ccdc:	cmp	r6, #0
   1cce0:	beq	1cca8 <__assert_fail@plt+0xb554>
   1cce4:	add	r3, r4, r4, lsl #2
   1cce8:	add	r3, r8, r3, lsl #3
   1ccec:	ldrb	r2, [r3, #8]
   1ccf0:	cmp	r2, #0
   1ccf4:	beq	1cca8 <__assert_fail@plt+0xb554>
   1ccf8:	ldr	r0, [r5, #52]	; 0x34
   1ccfc:	ldr	r3, [r3, #12]
   1cd00:	cmp	r0, r3
   1cd04:	movne	r0, #0
   1cd08:	moveq	r0, #1
   1cd0c:	b	1ccc4 <__assert_fail@plt+0xb570>
   1cd10:	ldr	r1, [r8, r3, lsl #3]
   1cd14:	ldr	r0, [r5, #40]	; 0x28
   1cd18:	bl	11418 <memcmp@plt>
   1cd1c:	clz	r0, r0
   1cd20:	lsr	r0, r0, #5
   1cd24:	b	1ccc4 <__assert_fail@plt+0xb570>
   1cd28:	add	r4, r4, #1
   1cd2c:	sub	r3, sl, r4
   1cd30:	str	r3, [r9, sl, lsl #2]
   1cd34:	add	sl, sl, #1
   1cd38:	add	r7, r7, #40	; 0x28
   1cd3c:	ldr	r3, [fp, #-152]	; 0xffffff68
   1cd40:	cmp	r3, sl
   1cd44:	beq	1cd5c <__assert_fail@plt+0xb608>
   1cd48:	mov	r5, r7
   1cd4c:	ldrb	r6, [r7, #48]	; 0x30
   1cd50:	b	1ccdc <__assert_fail@plt+0xb588>
   1cd54:	str	sl, [r9, sl, lsl #2]
   1cd58:	b	1cd34 <__assert_fail@plt+0xb5e0>
   1cd5c:	ldr	r6, [fp, #-168]	; 0xffffff58
   1cd60:	mov	r3, #0
   1cd64:	ldr	r2, [fp, #-160]	; 0xffffff60
   1cd68:	str	r3, [r2]
   1cd6c:	ldr	r2, [fp, #-164]	; 0xffffff5c
   1cd70:	str	r2, [fp, #-132]	; 0xffffff7c
   1cd74:	strb	r3, [fp, #-148]	; 0xffffff6c
   1cd78:	mov	r0, #0
   1cd7c:	mov	r1, #0
   1cd80:	strd	r0, [fp, #-144]	; 0xffffff70
   1cd84:	strb	r3, [fp, #-136]	; 0xffffff78
   1cd88:	str	r2, [fp, #-76]	; 0xffffffb4
   1cd8c:	strb	r3, [fp, #-92]	; 0xffffffa4
   1cd90:	strd	r0, [fp, #-88]	; 0xffffffa8
   1cd94:	strb	r3, [fp, #-80]	; 0xffffffb0
   1cd98:	mov	r5, #1
   1cd9c:	movw	sl, #10436	; 0x28c4
   1cda0:	movt	sl, #2
   1cda4:	b	1d2d0 <__assert_fail@plt+0xbb7c>
   1cda8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1cdac:	ldr	r0, [r3]
   1cdb0:	bl	11418 <memcmp@plt>
   1cdb4:	clz	r0, r0
   1cdb8:	lsr	r0, r0, #5
   1cdbc:	b	1d2a0 <__assert_fail@plt+0xbb4c>
   1cdc0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1cdc4:	ldr	r2, [fp, #-160]	; 0xffffff60
   1cdc8:	str	r3, [r2]
   1cdcc:	mov	r0, r8
   1cdd0:	bl	1e8e8 <__assert_fail@plt+0xd194>
   1cdd4:	ldr	r0, [fp, #-156]	; 0xffffff64
   1cdd8:	sub	sp, fp, #32
   1cddc:	ldrd	r4, [sp]
   1cde0:	ldrd	r6, [sp, #8]
   1cde4:	ldrd	r8, [sp, #16]
   1cde8:	ldrd	sl, [sp, #24]
   1cdec:	add	sp, sp, #32
   1cdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdf4:	cmp	r6, #0
   1cdf8:	bne	1ce90 <__assert_fail@plt+0xb73c>
   1cdfc:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1ce00:	cmp	r3, #0
   1ce04:	bne	1ce48 <__assert_fail@plt+0xb6f4>
   1ce08:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1ce0c:	cmp	r3, #0
   1ce10:	bne	1d058 <__assert_fail@plt+0xb904>
   1ce14:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1ce18:	ldrb	r3, [r1]
   1ce1c:	lsr	r2, r3, #5
   1ce20:	and	r3, r3, #31
   1ce24:	ldr	r2, [sl, r2, lsl #2]
   1ce28:	lsr	r3, r2, r3
   1ce2c:	tst	r3, #1
   1ce30:	beq	1d044 <__assert_fail@plt+0xb8f0>
   1ce34:	str	r5, [fp, #-128]	; 0xffffff80
   1ce38:	ldrb	r3, [r1]
   1ce3c:	str	r3, [fp, #-120]	; 0xffffff88
   1ce40:	strb	r5, [fp, #-124]	; 0xffffff84
   1ce44:	strb	r5, [fp, #-136]	; 0xffffff78
   1ce48:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1ce4c:	cmp	r3, #0
   1ce50:	beq	1ce60 <__assert_fail@plt+0xb70c>
   1ce54:	ldr	r3, [fp, #-120]	; 0xffffff88
   1ce58:	cmp	r3, #0
   1ce5c:	beq	1d15c <__assert_fail@plt+0xba08>
   1ce60:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1ce64:	ldr	r2, [fp, #-128]	; 0xffffff80
   1ce68:	add	r3, r3, r2
   1ce6c:	str	r3, [fp, #-132]	; 0xffffff7c
   1ce70:	mov	r2, #0
   1ce74:	strb	r2, [fp, #-136]	; 0xffffff78
   1ce78:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1ce7c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1ce80:	add	r3, r3, r1
   1ce84:	str	r3, [fp, #-76]	; 0xffffffb4
   1ce88:	strb	r2, [fp, #-80]	; 0xffffffb0
   1ce8c:	b	1d2d0 <__assert_fail@plt+0xbb7c>
   1ce90:	ldr	r4, [r9, r6, lsl #2]
   1ce94:	sub	r6, r6, r4
   1ce98:	cmp	r4, #0
   1ce9c:	bne	1cf7c <__assert_fail@plt+0xb828>
   1cea0:	b	1d2d0 <__assert_fail@plt+0xbb7c>
   1cea4:	sub	r0, fp, #144	; 0x90
   1cea8:	bl	1140c <mbsinit@plt>
   1ceac:	cmp	r0, #0
   1ceb0:	beq	1cfc8 <__assert_fail@plt+0xb874>
   1ceb4:	strb	r5, [fp, #-148]	; 0xffffff6c
   1ceb8:	ldr	r7, [fp, #-132]	; 0xffffff7c
   1cebc:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1cec0:	mov	r1, r0
   1cec4:	mov	r0, r7
   1cec8:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1cecc:	sub	r3, fp, #144	; 0x90
   1ced0:	mov	r2, r0
   1ced4:	mov	r1, r7
   1ced8:	sub	r0, fp, #120	; 0x78
   1cedc:	bl	1c7ec <__assert_fail@plt+0xb098>
   1cee0:	str	r0, [fp, #-128]	; 0xffffff80
   1cee4:	cmn	r0, #1
   1cee8:	streq	r5, [fp, #-128]	; 0xffffff80
   1ceec:	moveq	r3, #0
   1cef0:	strbeq	r3, [fp, #-124]	; 0xffffff84
   1cef4:	beq	1cf40 <__assert_fail@plt+0xb7ec>
   1cef8:	cmn	r0, #2
   1cefc:	beq	1cfe8 <__assert_fail@plt+0xb894>
   1cf00:	cmp	r0, #0
   1cf04:	bne	1cf28 <__assert_fail@plt+0xb7d4>
   1cf08:	str	r5, [fp, #-128]	; 0xffffff80
   1cf0c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1cf10:	ldrb	r3, [r3]
   1cf14:	cmp	r3, #0
   1cf18:	bne	1d000 <__assert_fail@plt+0xb8ac>
   1cf1c:	ldr	r3, [fp, #-120]	; 0xffffff88
   1cf20:	cmp	r3, #0
   1cf24:	bne	1d020 <__assert_fail@plt+0xb8cc>
   1cf28:	strb	r5, [fp, #-124]	; 0xffffff84
   1cf2c:	sub	r0, fp, #144	; 0x90
   1cf30:	bl	1140c <mbsinit@plt>
   1cf34:	cmp	r0, #0
   1cf38:	movne	r3, #0
   1cf3c:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1cf40:	strb	r5, [fp, #-136]	; 0xffffff78
   1cf44:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1cf48:	cmp	r3, #0
   1cf4c:	beq	1cf5c <__assert_fail@plt+0xb808>
   1cf50:	ldr	r3, [fp, #-120]	; 0xffffff88
   1cf54:	cmp	r3, #0
   1cf58:	beq	1d040 <__assert_fail@plt+0xb8ec>
   1cf5c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1cf60:	ldr	r2, [fp, #-128]	; 0xffffff80
   1cf64:	add	r3, r3, r2
   1cf68:	str	r3, [fp, #-132]	; 0xffffff7c
   1cf6c:	mov	r3, #0
   1cf70:	strb	r3, [fp, #-136]	; 0xffffff78
   1cf74:	subs	r4, r4, #1
   1cf78:	beq	1d2d0 <__assert_fail@plt+0xbb7c>
   1cf7c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1cf80:	cmp	r3, #0
   1cf84:	bne	1cf44 <__assert_fail@plt+0xb7f0>
   1cf88:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1cf8c:	cmp	r3, #0
   1cf90:	bne	1ceb8 <__assert_fail@plt+0xb764>
   1cf94:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1cf98:	ldrb	r3, [r1]
   1cf9c:	lsr	r2, r3, #5
   1cfa0:	and	r3, r3, #31
   1cfa4:	ldr	r2, [sl, r2, lsl #2]
   1cfa8:	lsr	r3, r2, r3
   1cfac:	tst	r3, #1
   1cfb0:	beq	1cea4 <__assert_fail@plt+0xb750>
   1cfb4:	str	r5, [fp, #-128]	; 0xffffff80
   1cfb8:	ldrb	r3, [r1]
   1cfbc:	str	r3, [fp, #-120]	; 0xffffff88
   1cfc0:	strb	r5, [fp, #-124]	; 0xffffff84
   1cfc4:	b	1cf40 <__assert_fail@plt+0xb7ec>
   1cfc8:	movw	r3, #10468	; 0x28e4
   1cfcc:	movt	r3, #2
   1cfd0:	mov	r2, #143	; 0x8f
   1cfd4:	movw	r1, #9248	; 0x2420
   1cfd8:	movt	r1, #2
   1cfdc:	movw	r0, #9264	; 0x2430
   1cfe0:	movt	r0, #2
   1cfe4:	bl	11754 <__assert_fail@plt>
   1cfe8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1cfec:	bl	115b0 <strlen@plt>
   1cff0:	str	r0, [fp, #-128]	; 0xffffff80
   1cff4:	mov	r3, #0
   1cff8:	strb	r3, [fp, #-124]	; 0xffffff84
   1cffc:	b	1cf40 <__assert_fail@plt+0xb7ec>
   1d000:	movw	r3, #10468	; 0x28e4
   1d004:	movt	r3, #2
   1d008:	mov	r2, #171	; 0xab
   1d00c:	movw	r1, #9248	; 0x2420
   1d010:	movt	r1, #2
   1d014:	movw	r0, #9288	; 0x2448
   1d018:	movt	r0, #2
   1d01c:	bl	11754 <__assert_fail@plt>
   1d020:	movw	r3, #10468	; 0x28e4
   1d024:	movt	r3, #2
   1d028:	mov	r2, #172	; 0xac
   1d02c:	movw	r1, #9248	; 0x2420
   1d030:	movt	r1, #2
   1d034:	movw	r0, #9312	; 0x2460
   1d038:	movt	r0, #2
   1d03c:	bl	11754 <__assert_fail@plt>
   1d040:	bl	11748 <abort@plt>
   1d044:	sub	r0, fp, #144	; 0x90
   1d048:	bl	1140c <mbsinit@plt>
   1d04c:	cmp	r0, #0
   1d050:	beq	1d0e4 <__assert_fail@plt+0xb990>
   1d054:	strb	r5, [fp, #-148]	; 0xffffff6c
   1d058:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1d05c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d060:	mov	r1, r0
   1d064:	mov	r0, r4
   1d068:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1d06c:	sub	r3, fp, #144	; 0x90
   1d070:	mov	r2, r0
   1d074:	mov	r1, r4
   1d078:	sub	r0, fp, #120	; 0x78
   1d07c:	bl	1c7ec <__assert_fail@plt+0xb098>
   1d080:	str	r0, [fp, #-128]	; 0xffffff80
   1d084:	cmn	r0, #1
   1d088:	streq	r5, [fp, #-128]	; 0xffffff80
   1d08c:	moveq	r3, #0
   1d090:	strbeq	r3, [fp, #-124]	; 0xffffff84
   1d094:	beq	1ce44 <__assert_fail@plt+0xb6f0>
   1d098:	cmn	r0, #2
   1d09c:	beq	1d104 <__assert_fail@plt+0xb9b0>
   1d0a0:	cmp	r0, #0
   1d0a4:	bne	1d0c8 <__assert_fail@plt+0xb974>
   1d0a8:	str	r5, [fp, #-128]	; 0xffffff80
   1d0ac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1d0b0:	ldrb	r3, [r3]
   1d0b4:	cmp	r3, #0
   1d0b8:	bne	1d11c <__assert_fail@plt+0xb9c8>
   1d0bc:	ldr	r3, [fp, #-120]	; 0xffffff88
   1d0c0:	cmp	r3, #0
   1d0c4:	bne	1d13c <__assert_fail@plt+0xb9e8>
   1d0c8:	strb	r5, [fp, #-124]	; 0xffffff84
   1d0cc:	sub	r0, fp, #144	; 0x90
   1d0d0:	bl	1140c <mbsinit@plt>
   1d0d4:	cmp	r0, #0
   1d0d8:	movne	r3, #0
   1d0dc:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1d0e0:	b	1ce44 <__assert_fail@plt+0xb6f0>
   1d0e4:	movw	r3, #10468	; 0x28e4
   1d0e8:	movt	r3, #2
   1d0ec:	mov	r2, #143	; 0x8f
   1d0f0:	movw	r1, #9248	; 0x2420
   1d0f4:	movt	r1, #2
   1d0f8:	movw	r0, #9264	; 0x2430
   1d0fc:	movt	r0, #2
   1d100:	bl	11754 <__assert_fail@plt>
   1d104:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1d108:	bl	115b0 <strlen@plt>
   1d10c:	str	r0, [fp, #-128]	; 0xffffff80
   1d110:	mov	r3, #0
   1d114:	strb	r3, [fp, #-124]	; 0xffffff84
   1d118:	b	1ce44 <__assert_fail@plt+0xb6f0>
   1d11c:	movw	r3, #10468	; 0x28e4
   1d120:	movt	r3, #2
   1d124:	mov	r2, #171	; 0xab
   1d128:	movw	r1, #9248	; 0x2420
   1d12c:	movt	r1, #2
   1d130:	movw	r0, #9288	; 0x2448
   1d134:	movt	r0, #2
   1d138:	bl	11754 <__assert_fail@plt>
   1d13c:	movw	r3, #10468	; 0x28e4
   1d140:	movt	r3, #2
   1d144:	mov	r2, #172	; 0xac
   1d148:	movw	r1, #9248	; 0x2420
   1d14c:	movt	r1, #2
   1d150:	movw	r0, #9312	; 0x2460
   1d154:	movt	r0, #2
   1d158:	bl	11754 <__assert_fail@plt>
   1d15c:	bl	11748 <abort@plt>
   1d160:	sub	r0, fp, #88	; 0x58
   1d164:	bl	1140c <mbsinit@plt>
   1d168:	cmp	r0, #0
   1d16c:	beq	1d200 <__assert_fail@plt+0xbaac>
   1d170:	strb	r5, [fp, #-92]	; 0xffffffa4
   1d174:	ldr	r4, [fp, #-76]	; 0xffffffb4
   1d178:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d17c:	mov	r1, r0
   1d180:	mov	r0, r4
   1d184:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1d188:	sub	r3, fp, #88	; 0x58
   1d18c:	mov	r2, r0
   1d190:	mov	r1, r4
   1d194:	sub	r0, fp, #64	; 0x40
   1d198:	bl	1c7ec <__assert_fail@plt+0xb098>
   1d19c:	str	r0, [fp, #-72]	; 0xffffffb8
   1d1a0:	cmn	r0, #1
   1d1a4:	streq	r5, [fp, #-72]	; 0xffffffb8
   1d1a8:	moveq	r3, #0
   1d1ac:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   1d1b0:	beq	1d318 <__assert_fail@plt+0xbbc4>
   1d1b4:	cmn	r0, #2
   1d1b8:	beq	1d220 <__assert_fail@plt+0xbacc>
   1d1bc:	cmp	r0, #0
   1d1c0:	bne	1d1e4 <__assert_fail@plt+0xba90>
   1d1c4:	str	r5, [fp, #-72]	; 0xffffffb8
   1d1c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1d1cc:	ldrb	r3, [r3]
   1d1d0:	cmp	r3, #0
   1d1d4:	bne	1d238 <__assert_fail@plt+0xbae4>
   1d1d8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d1dc:	cmp	r3, #0
   1d1e0:	bne	1d258 <__assert_fail@plt+0xbb04>
   1d1e4:	strb	r5, [fp, #-68]	; 0xffffffbc
   1d1e8:	sub	r0, fp, #88	; 0x58
   1d1ec:	bl	1140c <mbsinit@plt>
   1d1f0:	cmp	r0, #0
   1d1f4:	movne	r3, #0
   1d1f8:	strbne	r3, [fp, #-92]	; 0xffffffa4
   1d1fc:	b	1d318 <__assert_fail@plt+0xbbc4>
   1d200:	movw	r3, #10468	; 0x28e4
   1d204:	movt	r3, #2
   1d208:	mov	r2, #143	; 0x8f
   1d20c:	movw	r1, #9248	; 0x2420
   1d210:	movt	r1, #2
   1d214:	movw	r0, #9264	; 0x2430
   1d218:	movt	r0, #2
   1d21c:	bl	11754 <__assert_fail@plt>
   1d220:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1d224:	bl	115b0 <strlen@plt>
   1d228:	str	r0, [fp, #-72]	; 0xffffffb8
   1d22c:	mov	r3, #0
   1d230:	strb	r3, [fp, #-68]	; 0xffffffbc
   1d234:	b	1d318 <__assert_fail@plt+0xbbc4>
   1d238:	movw	r3, #10468	; 0x28e4
   1d23c:	movt	r3, #2
   1d240:	mov	r2, #171	; 0xab
   1d244:	movw	r1, #9248	; 0x2420
   1d248:	movt	r1, #2
   1d24c:	movw	r0, #9288	; 0x2448
   1d250:	movt	r0, #2
   1d254:	bl	11754 <__assert_fail@plt>
   1d258:	movw	r3, #10468	; 0x28e4
   1d25c:	movt	r3, #2
   1d260:	mov	r2, #172	; 0xac
   1d264:	movw	r1, #9248	; 0x2420
   1d268:	movt	r1, #2
   1d26c:	movw	r0, #9312	; 0x2460
   1d270:	movt	r0, #2
   1d274:	bl	11754 <__assert_fail@plt>
   1d278:	mov	r3, #0
   1d27c:	str	r3, [fp, #-156]	; 0xffffff64
   1d280:	b	1cdd4 <__assert_fail@plt+0xb680>
   1d284:	add	r3, r6, r6, lsl #2
   1d288:	add	r3, r8, r3, lsl #3
   1d28c:	ldr	r2, [r3, #4]
   1d290:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1d294:	cmp	r2, r1
   1d298:	movne	r0, #0
   1d29c:	beq	1cda8 <__assert_fail@plt+0xb654>
   1d2a0:	cmp	r0, #0
   1d2a4:	beq	1cdf4 <__assert_fail@plt+0xb6a0>
   1d2a8:	add	r6, r6, #1
   1d2ac:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1d2b0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1d2b4:	add	r3, r3, r2
   1d2b8:	str	r3, [fp, #-76]	; 0xffffffb4
   1d2bc:	mov	r3, #0
   1d2c0:	strb	r3, [fp, #-80]	; 0xffffffb0
   1d2c4:	ldr	r3, [fp, #-152]	; 0xffffff68
   1d2c8:	cmp	r3, r6
   1d2cc:	beq	1cdc0 <__assert_fail@plt+0xb66c>
   1d2d0:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1d2d4:	cmp	r3, #0
   1d2d8:	bne	1d31c <__assert_fail@plt+0xbbc8>
   1d2dc:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1d2e0:	cmp	r3, #0
   1d2e4:	bne	1d174 <__assert_fail@plt+0xba20>
   1d2e8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1d2ec:	ldrb	r3, [r1]
   1d2f0:	lsr	r2, r3, #5
   1d2f4:	and	r3, r3, #31
   1d2f8:	ldr	r2, [sl, r2, lsl #2]
   1d2fc:	lsr	r3, r2, r3
   1d300:	tst	r3, #1
   1d304:	beq	1d160 <__assert_fail@plt+0xba0c>
   1d308:	str	r5, [fp, #-72]	; 0xffffffb8
   1d30c:	ldrb	r3, [r1]
   1d310:	str	r3, [fp, #-64]	; 0xffffffc0
   1d314:	strb	r5, [fp, #-68]	; 0xffffffbc
   1d318:	strb	r5, [fp, #-80]	; 0xffffffb0
   1d31c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1d320:	cmp	r3, #0
   1d324:	beq	1d284 <__assert_fail@plt+0xbb30>
   1d328:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1d32c:	cmp	r2, #0
   1d330:	beq	1cdcc <__assert_fail@plt+0xb678>
   1d334:	add	r3, r6, r6, lsl #2
   1d338:	add	r3, r8, r3, lsl #3
   1d33c:	ldrb	r1, [r3, #8]
   1d340:	cmp	r1, #0
   1d344:	beq	1d28c <__assert_fail@plt+0xbb38>
   1d348:	ldr	r0, [r3, #12]
   1d34c:	cmp	r0, r2
   1d350:	movne	r0, #0
   1d354:	moveq	r0, #1
   1d358:	b	1d2a0 <__assert_fail@plt+0xbb4c>
   1d35c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d360:	strd	r6, [sp, #8]
   1d364:	strd	r8, [sp, #16]
   1d368:	strd	sl, [sp, #24]
   1d36c:	str	lr, [sp, #32]
   1d370:	sub	sp, sp, #292	; 0x124
   1d374:	mov	r5, r0
   1d378:	mov	r7, r1
   1d37c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d380:	cmp	r0, #1
   1d384:	bhi	1d3c4 <__assert_fail@plt+0xbc70>
   1d388:	ldrb	r8, [r7]
   1d38c:	cmp	r8, #0
   1d390:	moveq	r0, r5
   1d394:	beq	1dd70 <__assert_fail@plt+0xc61c>
   1d398:	add	r3, r7, #1
   1d39c:	str	r3, [sp, #4]
   1d3a0:	ldrb	r3, [r5]
   1d3a4:	cmp	r3, #0
   1d3a8:	beq	1e118 <__assert_fail@plt+0xc9c4>
   1d3ac:	mov	sl, r7
   1d3b0:	mov	ip, #0
   1d3b4:	mov	r6, ip
   1d3b8:	mov	r9, ip
   1d3bc:	mov	lr, #1
   1d3c0:	b	1e010 <__assert_fail@plt+0xc8bc>
   1d3c4:	str	r7, [sp, #24]
   1d3c8:	mov	r3, #0
   1d3cc:	strb	r3, [sp, #8]
   1d3d0:	mov	r0, #0
   1d3d4:	mov	r1, #0
   1d3d8:	strd	r0, [sp, #12]
   1d3dc:	strb	r3, [sp, #20]
   1d3e0:	ldrb	r1, [r7]
   1d3e4:	movw	r2, #10436	; 0x28c4
   1d3e8:	movt	r2, #2
   1d3ec:	lsr	r3, r1, #5
   1d3f0:	and	r0, r1, #31
   1d3f4:	ldr	r3, [r2, r3, lsl #2]
   1d3f8:	lsr	r3, r3, r0
   1d3fc:	tst	r3, #1
   1d400:	beq	1d478 <__assert_fail@plt+0xbd24>
   1d404:	mov	r3, #1
   1d408:	str	r3, [sp, #28]
   1d40c:	str	r1, [sp, #36]	; 0x24
   1d410:	strb	r3, [sp, #32]
   1d414:	mov	r3, #1
   1d418:	strb	r3, [sp, #20]
   1d41c:	ldrb	r3, [sp, #32]
   1d420:	cmp	r3, #0
   1d424:	beq	1d434 <__assert_fail@plt+0xbce0>
   1d428:	ldr	r3, [sp, #36]	; 0x24
   1d42c:	cmp	r3, #0
   1d430:	beq	1dff8 <__assert_fail@plt+0xc8a4>
   1d434:	str	r7, [sp, #80]	; 0x50
   1d438:	mov	r6, #0
   1d43c:	strb	r6, [sp, #64]	; 0x40
   1d440:	mov	r2, #0
   1d444:	mov	r3, #0
   1d448:	strd	r2, [sp, #68]	; 0x44
   1d44c:	strb	r6, [sp, #76]	; 0x4c
   1d450:	str	r5, [sp, #136]	; 0x88
   1d454:	strb	r6, [sp, #120]	; 0x78
   1d458:	strd	r2, [sp, #124]	; 0x7c
   1d45c:	strb	r6, [sp, #132]	; 0x84
   1d460:	mov	sl, r6
   1d464:	str	r6, [sp]
   1d468:	mov	fp, #1
   1d46c:	movw	r8, #10436	; 0x28c4
   1d470:	movt	r8, #2
   1d474:	b	1e1b4 <__assert_fail@plt+0xca60>
   1d478:	add	r0, sp, #12
   1d47c:	bl	1140c <mbsinit@plt>
   1d480:	cmp	r0, #0
   1d484:	beq	1d514 <__assert_fail@plt+0xbdc0>
   1d488:	mov	r3, #1
   1d48c:	strb	r3, [sp, #8]
   1d490:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d494:	mov	r1, r0
   1d498:	mov	r0, r7
   1d49c:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1d4a0:	add	r3, sp, #12
   1d4a4:	mov	r2, r0
   1d4a8:	mov	r1, r7
   1d4ac:	add	r0, sp, #36	; 0x24
   1d4b0:	bl	1c7ec <__assert_fail@plt+0xb098>
   1d4b4:	str	r0, [sp, #28]
   1d4b8:	cmn	r0, #1
   1d4bc:	beq	1d534 <__assert_fail@plt+0xbde0>
   1d4c0:	cmn	r0, #2
   1d4c4:	beq	1d548 <__assert_fail@plt+0xbdf4>
   1d4c8:	cmp	r0, #0
   1d4cc:	bne	1d4f4 <__assert_fail@plt+0xbda0>
   1d4d0:	mov	r3, #1
   1d4d4:	str	r3, [sp, #28]
   1d4d8:	ldr	r3, [sp, #24]
   1d4dc:	ldrb	r3, [r3]
   1d4e0:	cmp	r3, #0
   1d4e4:	bne	1d560 <__assert_fail@plt+0xbe0c>
   1d4e8:	ldr	r3, [sp, #36]	; 0x24
   1d4ec:	cmp	r3, #0
   1d4f0:	bne	1d580 <__assert_fail@plt+0xbe2c>
   1d4f4:	mov	r3, #1
   1d4f8:	strb	r3, [sp, #32]
   1d4fc:	add	r0, sp, #12
   1d500:	bl	1140c <mbsinit@plt>
   1d504:	cmp	r0, #0
   1d508:	movne	r3, #0
   1d50c:	strbne	r3, [sp, #8]
   1d510:	b	1d414 <__assert_fail@plt+0xbcc0>
   1d514:	movw	r3, #10468	; 0x28e4
   1d518:	movt	r3, #2
   1d51c:	mov	r2, #143	; 0x8f
   1d520:	movw	r1, #9248	; 0x2420
   1d524:	movt	r1, #2
   1d528:	movw	r0, #9264	; 0x2430
   1d52c:	movt	r0, #2
   1d530:	bl	11754 <__assert_fail@plt>
   1d534:	mov	r3, #1
   1d538:	str	r3, [sp, #28]
   1d53c:	mov	r3, #0
   1d540:	strb	r3, [sp, #32]
   1d544:	b	1d414 <__assert_fail@plt+0xbcc0>
   1d548:	ldr	r0, [sp, #24]
   1d54c:	bl	115b0 <strlen@plt>
   1d550:	str	r0, [sp, #28]
   1d554:	mov	r3, #0
   1d558:	strb	r3, [sp, #32]
   1d55c:	b	1d414 <__assert_fail@plt+0xbcc0>
   1d560:	movw	r3, #10468	; 0x28e4
   1d564:	movt	r3, #2
   1d568:	mov	r2, #171	; 0xab
   1d56c:	movw	r1, #9248	; 0x2420
   1d570:	movt	r1, #2
   1d574:	movw	r0, #9288	; 0x2448
   1d578:	movt	r0, #2
   1d57c:	bl	11754 <__assert_fail@plt>
   1d580:	movw	r3, #10468	; 0x28e4
   1d584:	movt	r3, #2
   1d588:	mov	r2, #172	; 0xac
   1d58c:	movw	r1, #9248	; 0x2420
   1d590:	movt	r1, #2
   1d594:	movw	r0, #9312	; 0x2460
   1d598:	movt	r0, #2
   1d59c:	bl	11754 <__assert_fail@plt>
   1d5a0:	add	r0, sp, #124	; 0x7c
   1d5a4:	bl	1140c <mbsinit@plt>
   1d5a8:	cmp	r0, #0
   1d5ac:	beq	1d640 <__assert_fail@plt+0xbeec>
   1d5b0:	mov	r3, #1
   1d5b4:	strb	r3, [sp, #120]	; 0x78
   1d5b8:	ldr	r4, [sp, #136]	; 0x88
   1d5bc:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d5c0:	mov	r1, r0
   1d5c4:	mov	r0, r4
   1d5c8:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1d5cc:	add	r3, sp, #124	; 0x7c
   1d5d0:	mov	r2, r0
   1d5d4:	mov	r1, r4
   1d5d8:	add	r0, sp, #148	; 0x94
   1d5dc:	bl	1c7ec <__assert_fail@plt+0xb098>
   1d5e0:	str	r0, [sp, #140]	; 0x8c
   1d5e4:	cmn	r0, #1
   1d5e8:	beq	1d660 <__assert_fail@plt+0xbf0c>
   1d5ec:	cmn	r0, #2
   1d5f0:	beq	1d674 <__assert_fail@plt+0xbf20>
   1d5f4:	cmp	r0, #0
   1d5f8:	bne	1d620 <__assert_fail@plt+0xbecc>
   1d5fc:	mov	r3, #1
   1d600:	str	r3, [sp, #140]	; 0x8c
   1d604:	ldr	r3, [sp, #136]	; 0x88
   1d608:	ldrb	r3, [r3]
   1d60c:	cmp	r3, #0
   1d610:	bne	1d68c <__assert_fail@plt+0xbf38>
   1d614:	ldr	r3, [sp, #148]	; 0x94
   1d618:	cmp	r3, #0
   1d61c:	bne	1d6ac <__assert_fail@plt+0xbf58>
   1d620:	mov	r3, #1
   1d624:	strb	r3, [sp, #144]	; 0x90
   1d628:	add	r0, sp, #124	; 0x7c
   1d62c:	bl	1140c <mbsinit@plt>
   1d630:	cmp	r0, #0
   1d634:	movne	r3, #0
   1d638:	strbne	r3, [sp, #120]	; 0x78
   1d63c:	b	1e200 <__assert_fail@plt+0xcaac>
   1d640:	movw	r3, #10468	; 0x28e4
   1d644:	movt	r3, #2
   1d648:	mov	r2, #143	; 0x8f
   1d64c:	movw	r1, #9248	; 0x2420
   1d650:	movt	r1, #2
   1d654:	movw	r0, #9264	; 0x2430
   1d658:	movt	r0, #2
   1d65c:	bl	11754 <__assert_fail@plt>
   1d660:	mov	r3, #1
   1d664:	str	r3, [sp, #140]	; 0x8c
   1d668:	mov	r3, #0
   1d66c:	strb	r3, [sp, #144]	; 0x90
   1d670:	b	1e200 <__assert_fail@plt+0xcaac>
   1d674:	ldr	r0, [sp, #136]	; 0x88
   1d678:	bl	115b0 <strlen@plt>
   1d67c:	str	r0, [sp, #140]	; 0x8c
   1d680:	mov	r3, #0
   1d684:	strb	r3, [sp, #144]	; 0x90
   1d688:	b	1e200 <__assert_fail@plt+0xcaac>
   1d68c:	movw	r3, #10468	; 0x28e4
   1d690:	movt	r3, #2
   1d694:	mov	r2, #171	; 0xab
   1d698:	movw	r1, #9248	; 0x2420
   1d69c:	movt	r1, #2
   1d6a0:	movw	r0, #9288	; 0x2448
   1d6a4:	movt	r0, #2
   1d6a8:	bl	11754 <__assert_fail@plt>
   1d6ac:	movw	r3, #10468	; 0x28e4
   1d6b0:	movt	r3, #2
   1d6b4:	mov	r2, #172	; 0xac
   1d6b8:	movw	r1, #9248	; 0x2420
   1d6bc:	movt	r1, #2
   1d6c0:	movw	r0, #9312	; 0x2460
   1d6c4:	movt	r0, #2
   1d6c8:	bl	11754 <__assert_fail@plt>
   1d6cc:	mov	r0, #0
   1d6d0:	b	1dd70 <__assert_fail@plt+0xc61c>
   1d6d4:	add	r0, sp, #68	; 0x44
   1d6d8:	bl	1140c <mbsinit@plt>
   1d6dc:	cmp	r0, #0
   1d6e0:	beq	1d7f8 <__assert_fail@plt+0xc0a4>
   1d6e4:	strb	r9, [sp, #64]	; 0x40
   1d6e8:	ldr	fp, [sp, #80]	; 0x50
   1d6ec:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d6f0:	mov	r1, r0
   1d6f4:	mov	r0, fp
   1d6f8:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1d6fc:	add	r3, sp, #68	; 0x44
   1d700:	mov	r2, r0
   1d704:	mov	r1, fp
   1d708:	add	r0, sp, #92	; 0x5c
   1d70c:	bl	1c7ec <__assert_fail@plt+0xb098>
   1d710:	str	r0, [sp, #84]	; 0x54
   1d714:	cmn	r0, #1
   1d718:	streq	r9, [sp, #84]	; 0x54
   1d71c:	moveq	r3, #0
   1d720:	strbeq	r3, [sp, #88]	; 0x58
   1d724:	beq	1d770 <__assert_fail@plt+0xc01c>
   1d728:	cmn	r0, #2
   1d72c:	beq	1d818 <__assert_fail@plt+0xc0c4>
   1d730:	cmp	r0, #0
   1d734:	bne	1d758 <__assert_fail@plt+0xc004>
   1d738:	str	r9, [sp, #84]	; 0x54
   1d73c:	ldr	r3, [sp, #80]	; 0x50
   1d740:	ldrb	r3, [r3]
   1d744:	cmp	r3, #0
   1d748:	bne	1d830 <__assert_fail@plt+0xc0dc>
   1d74c:	ldr	r3, [sp, #92]	; 0x5c
   1d750:	cmp	r3, #0
   1d754:	bne	1d850 <__assert_fail@plt+0xc0fc>
   1d758:	strb	r9, [sp, #88]	; 0x58
   1d75c:	add	r0, sp, #68	; 0x44
   1d760:	bl	1140c <mbsinit@plt>
   1d764:	cmp	r0, #0
   1d768:	movne	r3, #0
   1d76c:	strbne	r3, [sp, #64]	; 0x40
   1d770:	strb	r9, [sp, #76]	; 0x4c
   1d774:	ldrb	r3, [sp, #88]	; 0x58
   1d778:	cmp	r3, #0
   1d77c:	beq	1d78c <__assert_fail@plt+0xc038>
   1d780:	ldr	r3, [sp, #92]	; 0x5c
   1d784:	cmp	r3, #0
   1d788:	beq	1e138 <__assert_fail@plt+0xc9e4>
   1d78c:	ldr	r3, [sp, #80]	; 0x50
   1d790:	ldr	r2, [sp, #84]	; 0x54
   1d794:	add	r3, r3, r2
   1d798:	str	r3, [sp, #80]	; 0x50
   1d79c:	mov	r3, #0
   1d7a0:	strb	r3, [sp, #76]	; 0x4c
   1d7a4:	subs	r4, r4, #1
   1d7a8:	beq	1d87c <__assert_fail@plt+0xc128>
   1d7ac:	ldrb	r3, [sp, #76]	; 0x4c
   1d7b0:	cmp	r3, #0
   1d7b4:	bne	1d774 <__assert_fail@plt+0xc020>
   1d7b8:	ldrb	r3, [sp, #64]	; 0x40
   1d7bc:	cmp	r3, #0
   1d7c0:	bne	1d6e8 <__assert_fail@plt+0xbf94>
   1d7c4:	ldr	r1, [sp, #80]	; 0x50
   1d7c8:	ldrb	r3, [r1]
   1d7cc:	lsr	r2, r3, #5
   1d7d0:	and	r3, r3, #31
   1d7d4:	ldr	r2, [r8, r2, lsl #2]
   1d7d8:	lsr	r3, r2, r3
   1d7dc:	tst	r3, #1
   1d7e0:	beq	1d6d4 <__assert_fail@plt+0xbf80>
   1d7e4:	str	r9, [sp, #84]	; 0x54
   1d7e8:	ldrb	r3, [r1]
   1d7ec:	str	r3, [sp, #92]	; 0x5c
   1d7f0:	strb	r9, [sp, #88]	; 0x58
   1d7f4:	b	1d770 <__assert_fail@plt+0xc01c>
   1d7f8:	movw	r3, #10468	; 0x28e4
   1d7fc:	movt	r3, #2
   1d800:	mov	r2, #143	; 0x8f
   1d804:	movw	r1, #9248	; 0x2420
   1d808:	movt	r1, #2
   1d80c:	movw	r0, #9264	; 0x2430
   1d810:	movt	r0, #2
   1d814:	bl	11754 <__assert_fail@plt>
   1d818:	ldr	r0, [sp, #80]	; 0x50
   1d81c:	bl	115b0 <strlen@plt>
   1d820:	str	r0, [sp, #84]	; 0x54
   1d824:	mov	r3, #0
   1d828:	strb	r3, [sp, #88]	; 0x58
   1d82c:	b	1d770 <__assert_fail@plt+0xc01c>
   1d830:	movw	r3, #10468	; 0x28e4
   1d834:	movt	r3, #2
   1d838:	mov	r2, #171	; 0xab
   1d83c:	movw	r1, #9248	; 0x2420
   1d840:	movt	r1, #2
   1d844:	movw	r0, #9288	; 0x2448
   1d848:	movt	r0, #2
   1d84c:	bl	11754 <__assert_fail@plt>
   1d850:	movw	r3, #10468	; 0x28e4
   1d854:	movt	r3, #2
   1d858:	mov	r2, #172	; 0xac
   1d85c:	movw	r1, #9248	; 0x2420
   1d860:	movt	r1, #2
   1d864:	movw	r0, #9312	; 0x2460
   1d868:	movt	r0, #2
   1d86c:	bl	11754 <__assert_fail@plt>
   1d870:	ldrb	r3, [sp, #76]	; 0x4c
   1d874:	cmp	r3, #0
   1d878:	bne	1d8c4 <__assert_fail@plt+0xc170>
   1d87c:	ldrb	r3, [sp, #64]	; 0x40
   1d880:	cmp	r3, #0
   1d884:	bne	1d908 <__assert_fail@plt+0xc1b4>
   1d888:	ldr	r1, [sp, #80]	; 0x50
   1d88c:	ldrb	r3, [r1]
   1d890:	lsr	r2, r3, #5
   1d894:	and	r3, r3, #31
   1d898:	ldr	r2, [r8, r2, lsl #2]
   1d89c:	lsr	r3, r2, r3
   1d8a0:	tst	r3, #1
   1d8a4:	beq	1d8f0 <__assert_fail@plt+0xc19c>
   1d8a8:	mov	r3, #1
   1d8ac:	str	r3, [sp, #84]	; 0x54
   1d8b0:	ldrb	r2, [r1]
   1d8b4:	str	r2, [sp, #92]	; 0x5c
   1d8b8:	strb	r3, [sp, #88]	; 0x58
   1d8bc:	mov	r3, #1
   1d8c0:	strb	r3, [sp, #76]	; 0x4c
   1d8c4:	ldrb	fp, [sp, #88]	; 0x58
   1d8c8:	cmp	fp, #0
   1d8cc:	moveq	fp, #1
   1d8d0:	bne	1da1c <__assert_fail@plt+0xc2c8>
   1d8d4:	add	r2, r6, #1
   1d8d8:	ldrb	r3, [sp, #144]	; 0x90
   1d8dc:	cmp	r3, #0
   1d8e0:	beq	1da2c <__assert_fail@plt+0xc2d8>
   1d8e4:	str	r6, [sp]
   1d8e8:	mov	r6, r2
   1d8ec:	b	1e238 <__assert_fail@plt+0xcae4>
   1d8f0:	add	r0, sp, #68	; 0x44
   1d8f4:	bl	1140c <mbsinit@plt>
   1d8f8:	cmp	r0, #0
   1d8fc:	beq	1d990 <__assert_fail@plt+0xc23c>
   1d900:	mov	r3, #1
   1d904:	strb	r3, [sp, #64]	; 0x40
   1d908:	ldr	r4, [sp, #80]	; 0x50
   1d90c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d910:	mov	r1, r0
   1d914:	mov	r0, r4
   1d918:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1d91c:	add	r3, sp, #68	; 0x44
   1d920:	mov	r2, r0
   1d924:	mov	r1, r4
   1d928:	add	r0, sp, #92	; 0x5c
   1d92c:	bl	1c7ec <__assert_fail@plt+0xb098>
   1d930:	str	r0, [sp, #84]	; 0x54
   1d934:	cmn	r0, #1
   1d938:	beq	1d9b0 <__assert_fail@plt+0xc25c>
   1d93c:	cmn	r0, #2
   1d940:	beq	1d9c4 <__assert_fail@plt+0xc270>
   1d944:	cmp	r0, #0
   1d948:	bne	1d970 <__assert_fail@plt+0xc21c>
   1d94c:	mov	r3, #1
   1d950:	str	r3, [sp, #84]	; 0x54
   1d954:	ldr	r3, [sp, #80]	; 0x50
   1d958:	ldrb	r3, [r3]
   1d95c:	cmp	r3, #0
   1d960:	bne	1d9dc <__assert_fail@plt+0xc288>
   1d964:	ldr	r3, [sp, #92]	; 0x5c
   1d968:	cmp	r3, #0
   1d96c:	bne	1d9fc <__assert_fail@plt+0xc2a8>
   1d970:	mov	r3, #1
   1d974:	strb	r3, [sp, #88]	; 0x58
   1d978:	add	r0, sp, #68	; 0x44
   1d97c:	bl	1140c <mbsinit@plt>
   1d980:	cmp	r0, #0
   1d984:	movne	r3, #0
   1d988:	strbne	r3, [sp, #64]	; 0x40
   1d98c:	b	1d8bc <__assert_fail@plt+0xc168>
   1d990:	movw	r3, #10468	; 0x28e4
   1d994:	movt	r3, #2
   1d998:	mov	r2, #143	; 0x8f
   1d99c:	movw	r1, #9248	; 0x2420
   1d9a0:	movt	r1, #2
   1d9a4:	movw	r0, #9264	; 0x2430
   1d9a8:	movt	r0, #2
   1d9ac:	bl	11754 <__assert_fail@plt>
   1d9b0:	mov	r3, #1
   1d9b4:	str	r3, [sp, #84]	; 0x54
   1d9b8:	mov	r3, #0
   1d9bc:	strb	r3, [sp, #88]	; 0x58
   1d9c0:	b	1d8bc <__assert_fail@plt+0xc168>
   1d9c4:	ldr	r0, [sp, #80]	; 0x50
   1d9c8:	bl	115b0 <strlen@plt>
   1d9cc:	str	r0, [sp, #84]	; 0x54
   1d9d0:	mov	r3, #0
   1d9d4:	strb	r3, [sp, #88]	; 0x58
   1d9d8:	b	1d8bc <__assert_fail@plt+0xc168>
   1d9dc:	movw	r3, #10468	; 0x28e4
   1d9e0:	movt	r3, #2
   1d9e4:	mov	r2, #171	; 0xab
   1d9e8:	movw	r1, #9248	; 0x2420
   1d9ec:	movt	r1, #2
   1d9f0:	movw	r0, #9288	; 0x2448
   1d9f4:	movt	r0, #2
   1d9f8:	bl	11754 <__assert_fail@plt>
   1d9fc:	movw	r3, #10468	; 0x28e4
   1da00:	movt	r3, #2
   1da04:	mov	r2, #172	; 0xac
   1da08:	movw	r1, #9248	; 0x2420
   1da0c:	movt	r1, #2
   1da10:	movw	r0, #9312	; 0x2460
   1da14:	movt	r0, #2
   1da18:	bl	11754 <__assert_fail@plt>
   1da1c:	ldr	r3, [sp, #92]	; 0x5c
   1da20:	cmp	r3, #0
   1da24:	bne	1d8d4 <__assert_fail@plt+0xc180>
   1da28:	b	1e144 <__assert_fail@plt+0xc9f0>
   1da2c:	str	r6, [sp]
   1da30:	mov	r6, r2
   1da34:	b	1e17c <__assert_fail@plt+0xca28>
   1da38:	ldr	r1, [sp, #24]
   1da3c:	ldr	r0, [sp, #136]	; 0x88
   1da40:	bl	11418 <memcmp@plt>
   1da44:	clz	r0, r0
   1da48:	lsr	r0, r0, #5
   1da4c:	b	1e190 <__assert_fail@plt+0xca3c>
   1da50:	ldrd	r2, [sp, #120]	; 0x78
   1da54:	strd	r2, [sp, #176]	; 0xb0
   1da58:	ldrd	r2, [sp, #128]	; 0x80
   1da5c:	strd	r2, [sp, #184]	; 0xb8
   1da60:	ldr	r1, [sp, #136]	; 0x88
   1da64:	ldr	r3, [sp, #140]	; 0x8c
   1da68:	str	r3, [sp, #196]	; 0xc4
   1da6c:	ldrd	r2, [sp, #144]	; 0x90
   1da70:	strd	r2, [sp, #200]	; 0xc8
   1da74:	ldrd	r2, [sp, #152]	; 0x98
   1da78:	strd	r2, [sp, #208]	; 0xd0
   1da7c:	ldrd	r2, [sp, #160]	; 0xa0
   1da80:	strd	r2, [sp, #216]	; 0xd8
   1da84:	ldrd	r2, [sp, #168]	; 0xa8
   1da88:	strd	r2, [sp, #224]	; 0xe0
   1da8c:	ldr	r3, [sp, #196]	; 0xc4
   1da90:	add	r1, r3, r1
   1da94:	str	r1, [sp, #192]	; 0xc0
   1da98:	mov	r3, #0
   1da9c:	strb	r3, [sp, #188]	; 0xbc
   1daa0:	str	r7, [sp, #248]	; 0xf8
   1daa4:	strb	r3, [sp, #232]	; 0xe8
   1daa8:	mov	r0, #0
   1daac:	mov	r1, #0
   1dab0:	strd	r0, [sp, #236]	; 0xec
   1dab4:	strb	r3, [sp, #244]	; 0xf4
   1dab8:	ldrb	r2, [r7]
   1dabc:	lsr	r3, r2, #5
   1dac0:	and	r1, r2, #31
   1dac4:	ldr	r3, [r8, r3, lsl #2]
   1dac8:	lsr	r3, r3, r1
   1dacc:	tst	r3, #1
   1dad0:	beq	1db28 <__assert_fail@plt+0xc3d4>
   1dad4:	mov	r3, #1
   1dad8:	str	r3, [sp, #252]	; 0xfc
   1dadc:	str	r2, [sp, #260]	; 0x104
   1dae0:	strb	r3, [sp, #256]	; 0x100
   1dae4:	mov	r3, #1
   1dae8:	strb	r3, [sp, #244]	; 0xf4
   1daec:	ldrb	r3, [sp, #256]	; 0x100
   1daf0:	cmp	r3, #0
   1daf4:	beq	1db04 <__assert_fail@plt+0xc3b0>
   1daf8:	ldr	r3, [sp, #260]	; 0x104
   1dafc:	cmp	r3, #0
   1db00:	beq	1dc50 <__assert_fail@plt+0xc4fc>
   1db04:	ldr	r3, [sp, #248]	; 0xf8
   1db08:	ldr	r2, [sp, #252]	; 0xfc
   1db0c:	add	r3, r3, r2
   1db10:	str	r3, [sp, #248]	; 0xf8
   1db14:	mov	r3, #0
   1db18:	strb	r3, [sp, #244]	; 0xf4
   1db1c:	add	r6, r6, #1
   1db20:	mov	r4, #1
   1db24:	b	1dea0 <__assert_fail@plt+0xc74c>
   1db28:	add	r0, sp, #236	; 0xec
   1db2c:	bl	1140c <mbsinit@plt>
   1db30:	cmp	r0, #0
   1db34:	beq	1dbc4 <__assert_fail@plt+0xc470>
   1db38:	mov	r3, #1
   1db3c:	strb	r3, [sp, #232]	; 0xe8
   1db40:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1db44:	mov	r1, r0
   1db48:	mov	r0, r7
   1db4c:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1db50:	add	r3, sp, #236	; 0xec
   1db54:	mov	r2, r0
   1db58:	mov	r1, r7
   1db5c:	add	r0, sp, #260	; 0x104
   1db60:	bl	1c7ec <__assert_fail@plt+0xb098>
   1db64:	str	r0, [sp, #252]	; 0xfc
   1db68:	cmn	r0, #1
   1db6c:	beq	1dbe4 <__assert_fail@plt+0xc490>
   1db70:	cmn	r0, #2
   1db74:	beq	1dbf8 <__assert_fail@plt+0xc4a4>
   1db78:	cmp	r0, #0
   1db7c:	bne	1dba4 <__assert_fail@plt+0xc450>
   1db80:	mov	r3, #1
   1db84:	str	r3, [sp, #252]	; 0xfc
   1db88:	ldr	r3, [sp, #248]	; 0xf8
   1db8c:	ldrb	r3, [r3]
   1db90:	cmp	r3, #0
   1db94:	bne	1dc10 <__assert_fail@plt+0xc4bc>
   1db98:	ldr	r3, [sp, #260]	; 0x104
   1db9c:	cmp	r3, #0
   1dba0:	bne	1dc30 <__assert_fail@plt+0xc4dc>
   1dba4:	mov	r3, #1
   1dba8:	strb	r3, [sp, #256]	; 0x100
   1dbac:	add	r0, sp, #236	; 0xec
   1dbb0:	bl	1140c <mbsinit@plt>
   1dbb4:	cmp	r0, #0
   1dbb8:	movne	r3, #0
   1dbbc:	strbne	r3, [sp, #232]	; 0xe8
   1dbc0:	b	1dae4 <__assert_fail@plt+0xc390>
   1dbc4:	movw	r3, #10468	; 0x28e4
   1dbc8:	movt	r3, #2
   1dbcc:	mov	r2, #143	; 0x8f
   1dbd0:	movw	r1, #9248	; 0x2420
   1dbd4:	movt	r1, #2
   1dbd8:	movw	r0, #9264	; 0x2430
   1dbdc:	movt	r0, #2
   1dbe0:	bl	11754 <__assert_fail@plt>
   1dbe4:	mov	r3, #1
   1dbe8:	str	r3, [sp, #252]	; 0xfc
   1dbec:	mov	r3, #0
   1dbf0:	strb	r3, [sp, #256]	; 0x100
   1dbf4:	b	1dae4 <__assert_fail@plt+0xc390>
   1dbf8:	ldr	r0, [sp, #248]	; 0xf8
   1dbfc:	bl	115b0 <strlen@plt>
   1dc00:	str	r0, [sp, #252]	; 0xfc
   1dc04:	mov	r3, #0
   1dc08:	strb	r3, [sp, #256]	; 0x100
   1dc0c:	b	1dae4 <__assert_fail@plt+0xc390>
   1dc10:	movw	r3, #10468	; 0x28e4
   1dc14:	movt	r3, #2
   1dc18:	mov	r2, #171	; 0xab
   1dc1c:	movw	r1, #9248	; 0x2420
   1dc20:	movt	r1, #2
   1dc24:	movw	r0, #9288	; 0x2448
   1dc28:	movt	r0, #2
   1dc2c:	bl	11754 <__assert_fail@plt>
   1dc30:	movw	r3, #10468	; 0x28e4
   1dc34:	movt	r3, #2
   1dc38:	mov	r2, #172	; 0xac
   1dc3c:	movw	r1, #9248	; 0x2420
   1dc40:	movt	r1, #2
   1dc44:	movw	r0, #9312	; 0x2460
   1dc48:	movt	r0, #2
   1dc4c:	bl	11754 <__assert_fail@plt>
   1dc50:	bl	11748 <abort@plt>
   1dc54:	add	r0, sp, #236	; 0xec
   1dc58:	bl	1140c <mbsinit@plt>
   1dc5c:	cmp	r0, #0
   1dc60:	beq	1dcf4 <__assert_fail@plt+0xc5a0>
   1dc64:	strb	r4, [sp, #232]	; 0xe8
   1dc68:	ldr	r9, [sp, #248]	; 0xf8
   1dc6c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1dc70:	mov	r1, r0
   1dc74:	mov	r0, r9
   1dc78:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1dc7c:	add	r3, sp, #236	; 0xec
   1dc80:	mov	r2, r0
   1dc84:	mov	r1, r9
   1dc88:	add	r0, sp, #260	; 0x104
   1dc8c:	bl	1c7ec <__assert_fail@plt+0xb098>
   1dc90:	str	r0, [sp, #252]	; 0xfc
   1dc94:	cmn	r0, #1
   1dc98:	streq	r4, [sp, #252]	; 0xfc
   1dc9c:	moveq	r3, #0
   1dca0:	strbeq	r3, [sp, #256]	; 0x100
   1dca4:	beq	1dee8 <__assert_fail@plt+0xc794>
   1dca8:	cmn	r0, #2
   1dcac:	beq	1dd14 <__assert_fail@plt+0xc5c0>
   1dcb0:	cmp	r0, #0
   1dcb4:	bne	1dcd8 <__assert_fail@plt+0xc584>
   1dcb8:	str	r4, [sp, #252]	; 0xfc
   1dcbc:	ldr	r3, [sp, #248]	; 0xf8
   1dcc0:	ldrb	r3, [r3]
   1dcc4:	cmp	r3, #0
   1dcc8:	bne	1dd2c <__assert_fail@plt+0xc5d8>
   1dccc:	ldr	r3, [sp, #260]	; 0x104
   1dcd0:	cmp	r3, #0
   1dcd4:	bne	1dd4c <__assert_fail@plt+0xc5f8>
   1dcd8:	strb	r4, [sp, #256]	; 0x100
   1dcdc:	add	r0, sp, #236	; 0xec
   1dce0:	bl	1140c <mbsinit@plt>
   1dce4:	cmp	r0, #0
   1dce8:	movne	r3, #0
   1dcec:	strbne	r3, [sp, #232]	; 0xe8
   1dcf0:	b	1dee8 <__assert_fail@plt+0xc794>
   1dcf4:	movw	r3, #10468	; 0x28e4
   1dcf8:	movt	r3, #2
   1dcfc:	mov	r2, #143	; 0x8f
   1dd00:	movw	r1, #9248	; 0x2420
   1dd04:	movt	r1, #2
   1dd08:	movw	r0, #9264	; 0x2430
   1dd0c:	movt	r0, #2
   1dd10:	bl	11754 <__assert_fail@plt>
   1dd14:	ldr	r0, [sp, #248]	; 0xf8
   1dd18:	bl	115b0 <strlen@plt>
   1dd1c:	str	r0, [sp, #252]	; 0xfc
   1dd20:	mov	r3, #0
   1dd24:	strb	r3, [sp, #256]	; 0x100
   1dd28:	b	1dee8 <__assert_fail@plt+0xc794>
   1dd2c:	movw	r3, #10468	; 0x28e4
   1dd30:	movt	r3, #2
   1dd34:	mov	r2, #171	; 0xab
   1dd38:	movw	r1, #9248	; 0x2420
   1dd3c:	movt	r1, #2
   1dd40:	movw	r0, #9288	; 0x2448
   1dd44:	movt	r0, #2
   1dd48:	bl	11754 <__assert_fail@plt>
   1dd4c:	movw	r3, #10468	; 0x28e4
   1dd50:	movt	r3, #2
   1dd54:	mov	r2, #172	; 0xac
   1dd58:	movw	r1, #9248	; 0x2420
   1dd5c:	movt	r1, #2
   1dd60:	movw	r0, #9312	; 0x2460
   1dd64:	movt	r0, #2
   1dd68:	bl	11754 <__assert_fail@plt>
   1dd6c:	ldr	r0, [sp, #136]	; 0x88
   1dd70:	add	sp, sp, #292	; 0x124
   1dd74:	ldrd	r4, [sp]
   1dd78:	ldrd	r6, [sp, #8]
   1dd7c:	ldrd	r8, [sp, #16]
   1dd80:	ldrd	sl, [sp, #24]
   1dd84:	add	sp, sp, #32
   1dd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd8c:	add	r0, sp, #180	; 0xb4
   1dd90:	bl	1140c <mbsinit@plt>
   1dd94:	cmp	r0, #0
   1dd98:	beq	1df50 <__assert_fail@plt+0xc7fc>
   1dd9c:	strb	r4, [sp, #176]	; 0xb0
   1dda0:	ldr	r9, [sp, #192]	; 0xc0
   1dda4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1dda8:	mov	r1, r0
   1ddac:	mov	r0, r9
   1ddb0:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1ddb4:	add	r3, sp, #180	; 0xb4
   1ddb8:	mov	r2, r0
   1ddbc:	mov	r1, r9
   1ddc0:	add	r0, sp, #204	; 0xcc
   1ddc4:	bl	1c7ec <__assert_fail@plt+0xb098>
   1ddc8:	str	r0, [sp, #196]	; 0xc4
   1ddcc:	cmn	r0, #1
   1ddd0:	streq	r4, [sp, #196]	; 0xc4
   1ddd4:	moveq	r3, #0
   1ddd8:	strbeq	r3, [sp, #200]	; 0xc8
   1dddc:	beq	1de28 <__assert_fail@plt+0xc6d4>
   1dde0:	cmn	r0, #2
   1dde4:	beq	1df70 <__assert_fail@plt+0xc81c>
   1dde8:	cmp	r0, #0
   1ddec:	bne	1de10 <__assert_fail@plt+0xc6bc>
   1ddf0:	str	r4, [sp, #196]	; 0xc4
   1ddf4:	ldr	r3, [sp, #192]	; 0xc0
   1ddf8:	ldrb	r3, [r3]
   1ddfc:	cmp	r3, #0
   1de00:	bne	1df88 <__assert_fail@plt+0xc834>
   1de04:	ldr	r3, [sp, #204]	; 0xcc
   1de08:	cmp	r3, #0
   1de0c:	bne	1dfa8 <__assert_fail@plt+0xc854>
   1de10:	strb	r4, [sp, #200]	; 0xc8
   1de14:	add	r0, sp, #180	; 0xb4
   1de18:	bl	1140c <mbsinit@plt>
   1de1c:	cmp	r0, #0
   1de20:	movne	r3, #0
   1de24:	strbne	r3, [sp, #176]	; 0xb0
   1de28:	strb	r4, [sp, #188]	; 0xbc
   1de2c:	ldrb	r3, [sp, #200]	; 0xc8
   1de30:	cmp	r3, #0
   1de34:	beq	1de50 <__assert_fail@plt+0xc6fc>
   1de38:	ldr	r3, [sp, #204]	; 0xcc
   1de3c:	cmp	r3, #0
   1de40:	beq	1dfc8 <__assert_fail@plt+0xc874>
   1de44:	ldrb	r2, [sp, #256]	; 0x100
   1de48:	cmp	r2, #0
   1de4c:	bne	1dfd0 <__assert_fail@plt+0xc87c>
   1de50:	ldr	r2, [sp, #196]	; 0xc4
   1de54:	ldr	r3, [sp, #252]	; 0xfc
   1de58:	cmp	r2, r3
   1de5c:	movne	r0, r4
   1de60:	beq	1dfe0 <__assert_fail@plt+0xc88c>
   1de64:	add	r1, r6, #1
   1de68:	cmp	r0, #0
   1de6c:	bne	1e198 <__assert_fail@plt+0xca44>
   1de70:	ldr	r3, [sp, #192]	; 0xc0
   1de74:	ldr	r2, [sp, #196]	; 0xc4
   1de78:	add	r3, r3, r2
   1de7c:	str	r3, [sp, #192]	; 0xc0
   1de80:	mov	r2, #0
   1de84:	strb	r2, [sp, #188]	; 0xbc
   1de88:	ldr	r3, [sp, #248]	; 0xf8
   1de8c:	ldr	r0, [sp, #252]	; 0xfc
   1de90:	add	r3, r3, r0
   1de94:	str	r3, [sp, #248]	; 0xf8
   1de98:	strb	r2, [sp, #244]	; 0xf4
   1de9c:	mov	r6, r1
   1dea0:	ldrb	r3, [sp, #244]	; 0xf4
   1dea4:	cmp	r3, #0
   1dea8:	bne	1deec <__assert_fail@plt+0xc798>
   1deac:	ldrb	r3, [sp, #232]	; 0xe8
   1deb0:	cmp	r3, #0
   1deb4:	bne	1dc68 <__assert_fail@plt+0xc514>
   1deb8:	ldr	r1, [sp, #248]	; 0xf8
   1debc:	ldrb	r3, [r1]
   1dec0:	lsr	r2, r3, #5
   1dec4:	and	r3, r3, #31
   1dec8:	ldr	r2, [r8, r2, lsl #2]
   1decc:	lsr	r3, r2, r3
   1ded0:	tst	r3, #1
   1ded4:	beq	1dc54 <__assert_fail@plt+0xc500>
   1ded8:	str	r4, [sp, #252]	; 0xfc
   1dedc:	ldrb	r3, [r1]
   1dee0:	str	r3, [sp, #260]	; 0x104
   1dee4:	strb	r4, [sp, #256]	; 0x100
   1dee8:	strb	r4, [sp, #244]	; 0xf4
   1deec:	ldrb	r3, [sp, #256]	; 0x100
   1def0:	cmp	r3, #0
   1def4:	beq	1df04 <__assert_fail@plt+0xc7b0>
   1def8:	ldr	r3, [sp, #260]	; 0x104
   1defc:	cmp	r3, #0
   1df00:	beq	1dd6c <__assert_fail@plt+0xc618>
   1df04:	ldrb	r3, [sp, #188]	; 0xbc
   1df08:	cmp	r3, #0
   1df0c:	bne	1de2c <__assert_fail@plt+0xc6d8>
   1df10:	ldrb	r3, [sp, #176]	; 0xb0
   1df14:	cmp	r3, #0
   1df18:	bne	1dda0 <__assert_fail@plt+0xc64c>
   1df1c:	ldr	r1, [sp, #192]	; 0xc0
   1df20:	ldrb	r3, [r1]
   1df24:	lsr	r2, r3, #5
   1df28:	and	r3, r3, #31
   1df2c:	ldr	r2, [r8, r2, lsl #2]
   1df30:	lsr	r3, r2, r3
   1df34:	tst	r3, #1
   1df38:	beq	1dd8c <__assert_fail@plt+0xc638>
   1df3c:	str	r4, [sp, #196]	; 0xc4
   1df40:	ldrb	r3, [r1]
   1df44:	str	r3, [sp, #204]	; 0xcc
   1df48:	strb	r4, [sp, #200]	; 0xc8
   1df4c:	b	1de28 <__assert_fail@plt+0xc6d4>
   1df50:	movw	r3, #10468	; 0x28e4
   1df54:	movt	r3, #2
   1df58:	mov	r2, #143	; 0x8f
   1df5c:	movw	r1, #9248	; 0x2420
   1df60:	movt	r1, #2
   1df64:	movw	r0, #9264	; 0x2430
   1df68:	movt	r0, #2
   1df6c:	bl	11754 <__assert_fail@plt>
   1df70:	ldr	r0, [sp, #192]	; 0xc0
   1df74:	bl	115b0 <strlen@plt>
   1df78:	str	r0, [sp, #196]	; 0xc4
   1df7c:	mov	r3, #0
   1df80:	strb	r3, [sp, #200]	; 0xc8
   1df84:	b	1de28 <__assert_fail@plt+0xc6d4>
   1df88:	movw	r3, #10468	; 0x28e4
   1df8c:	movt	r3, #2
   1df90:	mov	r2, #171	; 0xab
   1df94:	movw	r1, #9248	; 0x2420
   1df98:	movt	r1, #2
   1df9c:	movw	r0, #9288	; 0x2448
   1dfa0:	movt	r0, #2
   1dfa4:	bl	11754 <__assert_fail@plt>
   1dfa8:	movw	r3, #10468	; 0x28e4
   1dfac:	movt	r3, #2
   1dfb0:	mov	r2, #172	; 0xac
   1dfb4:	movw	r1, #9248	; 0x2420
   1dfb8:	movt	r1, #2
   1dfbc:	movw	r0, #9312	; 0x2460
   1dfc0:	movt	r0, #2
   1dfc4:	bl	11754 <__assert_fail@plt>
   1dfc8:	mov	r0, #0
   1dfcc:	b	1dd70 <__assert_fail@plt+0xc61c>
   1dfd0:	ldr	r0, [sp, #260]	; 0x104
   1dfd4:	subs	r0, r0, r3
   1dfd8:	movne	r0, #1
   1dfdc:	b	1de64 <__assert_fail@plt+0xc710>
   1dfe0:	ldr	r1, [sp, #248]	; 0xf8
   1dfe4:	ldr	r0, [sp, #192]	; 0xc0
   1dfe8:	bl	11418 <memcmp@plt>
   1dfec:	adds	r0, r0, #0
   1dff0:	movne	r0, #1
   1dff4:	b	1de64 <__assert_fail@plt+0xc710>
   1dff8:	mov	r0, r5
   1dffc:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e000:	ldr	r0, [sp, #232]	; 0xe8
   1e004:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e008:	mov	lr, fp
   1e00c:	mov	ip, r4
   1e010:	mov	r0, r5
   1e014:	add	r6, r6, #1
   1e018:	add	r4, ip, #1
   1e01c:	add	r5, r5, #1
   1e020:	ldrb	r3, [r0]
   1e024:	cmp	r3, r8
   1e028:	beq	1e0b8 <__assert_fail@plt+0xc964>
   1e02c:	str	r5, [sp]
   1e030:	ldrb	r3, [r5]
   1e034:	cmp	r3, #0
   1e038:	beq	1e130 <__assert_fail@plt+0xc9dc>
   1e03c:	cmp	r6, #9
   1e040:	movls	fp, #0
   1e044:	andhi	fp, lr, #1
   1e048:	cmp	fp, #0
   1e04c:	beq	1e00c <__assert_fail@plt+0xc8b8>
   1e050:	add	r3, r6, r6, lsl #2
   1e054:	cmp	r3, r4
   1e058:	bhi	1e008 <__assert_fail@plt+0xc8b4>
   1e05c:	cmp	sl, #0
   1e060:	beq	1e080 <__assert_fail@plt+0xc92c>
   1e064:	sub	r1, r4, r9
   1e068:	mov	r0, sl
   1e06c:	bl	11670 <strnlen@plt>
   1e070:	ldrb	r3, [sl, r0]!
   1e074:	cmp	r3, #0
   1e078:	bne	1e0ac <__assert_fail@plt+0xc958>
   1e07c:	mov	r9, r4
   1e080:	mov	r0, r7
   1e084:	bl	115b0 <strlen@plt>
   1e088:	add	r3, sp, #232	; 0xe8
   1e08c:	mov	r2, r0
   1e090:	mov	r1, r7
   1e094:	ldr	r0, [sp]
   1e098:	bl	1c85c <__assert_fail@plt+0xb108>
   1e09c:	subs	lr, r0, #0
   1e0a0:	bne	1e000 <__assert_fail@plt+0xc8ac>
   1e0a4:	mov	sl, #0
   1e0a8:	b	1e00c <__assert_fail@plt+0xc8b8>
   1e0ac:	mov	r9, r4
   1e0b0:	mov	lr, fp
   1e0b4:	b	1e00c <__assert_fail@plt+0xc8b8>
   1e0b8:	ldrb	r3, [r7, #1]
   1e0bc:	cmp	r3, #0
   1e0c0:	beq	1dd70 <__assert_fail@plt+0xc61c>
   1e0c4:	str	r5, [sp]
   1e0c8:	ldrb	r2, [r5]
   1e0cc:	cmp	r2, #0
   1e0d0:	beq	1e120 <__assert_fail@plt+0xc9cc>
   1e0d4:	add	r4, ip, #2
   1e0d8:	cmp	r3, r2
   1e0dc:	bne	1e03c <__assert_fail@plt+0xc8e8>
   1e0e0:	mov	fp, r5
   1e0e4:	ldr	r3, [sp, #4]
   1e0e8:	ldrb	r2, [r3, #1]!
   1e0ec:	cmp	r2, #0
   1e0f0:	beq	1dd70 <__assert_fail@plt+0xc61c>
   1e0f4:	ldrb	r1, [fp, #1]!
   1e0f8:	cmp	r1, #0
   1e0fc:	beq	1e128 <__assert_fail@plt+0xc9d4>
   1e100:	add	r4, r3, #1
   1e104:	sub	r4, r4, r7
   1e108:	add	r4, r4, ip
   1e10c:	cmp	r2, r1
   1e110:	beq	1e0e8 <__assert_fail@plt+0xc994>
   1e114:	b	1e03c <__assert_fail@plt+0xc8e8>
   1e118:	mov	r0, #0
   1e11c:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e120:	mov	r0, #0
   1e124:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e128:	mov	r0, #0
   1e12c:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e130:	mov	r0, #0
   1e134:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e138:	ldrb	r3, [sp, #76]	; 0x4c
   1e13c:	cmp	r3, #0
   1e140:	beq	1d87c <__assert_fail@plt+0xc128>
   1e144:	add	r2, sp, #232	; 0xe8
   1e148:	mov	r1, r7
   1e14c:	mov	r0, r5
   1e150:	bl	1c9d4 <__assert_fail@plt+0xb280>
   1e154:	subs	fp, r0, #0
   1e158:	beq	1d8d4 <__assert_fail@plt+0xc180>
   1e15c:	ldr	r0, [sp, #232]	; 0xe8
   1e160:	b	1dd70 <__assert_fail@plt+0xc61c>
   1e164:	cmp	sl, #9
   1e168:	movls	r3, #0
   1e16c:	andhi	r3, fp, #1
   1e170:	cmp	r3, #0
   1e174:	bne	1e274 <__assert_fail@plt+0xcb20>
   1e178:	add	r6, r6, #1
   1e17c:	ldr	r2, [sp, #140]	; 0x8c
   1e180:	ldr	r3, [sp, #28]
   1e184:	cmp	r2, r3
   1e188:	movne	r0, #0
   1e18c:	beq	1da38 <__assert_fail@plt+0xc2e4>
   1e190:	cmp	r0, #0
   1e194:	bne	1da50 <__assert_fail@plt+0xc2fc>
   1e198:	ldr	r3, [sp, #136]	; 0x88
   1e19c:	ldr	r2, [sp, #140]	; 0x8c
   1e1a0:	add	r3, r3, r2
   1e1a4:	str	r3, [sp, #136]	; 0x88
   1e1a8:	mov	r3, #0
   1e1ac:	strb	r3, [sp, #132]	; 0x84
   1e1b0:	add	sl, sl, #1
   1e1b4:	ldrb	r3, [sp, #132]	; 0x84
   1e1b8:	cmp	r3, #0
   1e1bc:	bne	1e208 <__assert_fail@plt+0xcab4>
   1e1c0:	ldrb	r3, [sp, #120]	; 0x78
   1e1c4:	cmp	r3, #0
   1e1c8:	bne	1d5b8 <__assert_fail@plt+0xbe64>
   1e1cc:	ldr	r1, [sp, #136]	; 0x88
   1e1d0:	ldrb	r3, [r1]
   1e1d4:	lsr	r2, r3, #5
   1e1d8:	and	r3, r3, #31
   1e1dc:	ldr	r2, [r8, r2, lsl #2]
   1e1e0:	lsr	r3, r2, r3
   1e1e4:	tst	r3, #1
   1e1e8:	beq	1d5a0 <__assert_fail@plt+0xbe4c>
   1e1ec:	mov	r3, #1
   1e1f0:	str	r3, [sp, #140]	; 0x8c
   1e1f4:	ldrb	r2, [r1]
   1e1f8:	str	r2, [sp, #148]	; 0x94
   1e1fc:	strb	r3, [sp, #144]	; 0x90
   1e200:	mov	r3, #1
   1e204:	strb	r3, [sp, #132]	; 0x84
   1e208:	ldrb	r3, [sp, #144]	; 0x90
   1e20c:	cmp	r3, #0
   1e210:	beq	1e164 <__assert_fail@plt+0xca10>
   1e214:	ldr	r3, [sp, #148]	; 0x94
   1e218:	cmp	r3, #0
   1e21c:	beq	1d6cc <__assert_fail@plt+0xbf78>
   1e220:	cmp	sl, #9
   1e224:	movls	r3, #0
   1e228:	andhi	r3, fp, #1
   1e22c:	cmp	r3, #0
   1e230:	addeq	r6, r6, #1
   1e234:	bne	1e25c <__assert_fail@plt+0xcb08>
   1e238:	ldrb	r3, [sp, #32]
   1e23c:	cmp	r3, #0
   1e240:	beq	1e17c <__assert_fail@plt+0xca28>
   1e244:	ldr	r0, [sp, #148]	; 0x94
   1e248:	ldr	r3, [sp, #36]	; 0x24
   1e24c:	cmp	r0, r3
   1e250:	movne	r0, #0
   1e254:	moveq	r0, #1
   1e258:	b	1e190 <__assert_fail@plt+0xca3c>
   1e25c:	add	r2, sl, sl, lsl #2
   1e260:	cmp	r6, r2
   1e264:	addcc	r6, r6, #1
   1e268:	movcc	fp, r3
   1e26c:	bcc	1e238 <__assert_fail@plt+0xcae4>
   1e270:	b	1e288 <__assert_fail@plt+0xcb34>
   1e274:	add	r2, sl, sl, lsl #2
   1e278:	cmp	r2, r6
   1e27c:	addhi	r6, r6, #1
   1e280:	movhi	fp, r3
   1e284:	bhi	1e17c <__assert_fail@plt+0xca28>
   1e288:	ldr	r3, [sp]
   1e28c:	subs	r4, r6, r3
   1e290:	beq	1d870 <__assert_fail@plt+0xc11c>
   1e294:	mov	r9, #1
   1e298:	b	1d7ac <__assert_fail@plt+0xc058>
   1e29c:	str	r4, [sp, #-8]!
   1e2a0:	str	lr, [sp, #4]
   1e2a4:	umull	r2, r3, r1, r2
   1e2a8:	cmp	r3, #0
   1e2ac:	bne	1e2c4 <__assert_fail@plt+0xcb70>
   1e2b0:	mov	r1, r2
   1e2b4:	bl	1c3b0 <__assert_fail@plt+0xac5c>
   1e2b8:	ldr	r4, [sp]
   1e2bc:	add	sp, sp, #4
   1e2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2c4:	bl	115e0 <__errno_location@plt>
   1e2c8:	mov	r3, #12
   1e2cc:	str	r3, [r0]
   1e2d0:	mov	r0, #0
   1e2d4:	b	1e2b8 <__assert_fail@plt+0xcb64>
   1e2d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e2dc:	strd	r6, [sp, #8]
   1e2e0:	strd	r8, [sp, #16]
   1e2e4:	strd	sl, [sp, #24]
   1e2e8:	str	lr, [sp, #32]
   1e2ec:	sub	sp, sp, #4096	; 0x1000
   1e2f0:	sub	sp, sp, #28
   1e2f4:	mov	r9, r0
   1e2f8:	mov	r8, r1
   1e2fc:	mov	r6, r2
   1e300:	mov	sl, r3
   1e304:	add	r3, sp, #4160	; 0x1040
   1e308:	ldr	fp, [r3]
   1e30c:	mov	r1, #0
   1e310:	str	r1, [sp]
   1e314:	mov	r3, r1
   1e318:	mov	r2, r1
   1e31c:	mov	r0, r6
   1e320:	bl	1137c <iconv@plt>
   1e324:	str	r9, [sp, #8]
   1e328:	str	r8, [sp, #12]
   1e32c:	cmp	r8, #0
   1e330:	beq	1e4a0 <__assert_fail@plt+0xcd4c>
   1e334:	mov	r5, #0
   1e338:	add	r4, sp, #24
   1e33c:	mov	r7, #4096	; 0x1000
   1e340:	b	1e35c <__assert_fail@plt+0xcc08>
   1e344:	ldr	r3, [r4, #-8]
   1e348:	sub	r3, r3, r4
   1e34c:	add	r5, r5, r3
   1e350:	ldr	r3, [r4, #-12]
   1e354:	cmp	r3, #0
   1e358:	beq	1e3a0 <__assert_fail@plt+0xcc4c>
   1e35c:	str	r4, [r4, #-8]
   1e360:	str	r7, [r4, #-4]
   1e364:	sub	r3, r4, #4
   1e368:	str	r3, [sp]
   1e36c:	add	r3, sp, #16
   1e370:	sub	r2, r4, #12
   1e374:	sub	r1, r4, #16
   1e378:	mov	r0, r6
   1e37c:	bl	1137c <iconv@plt>
   1e380:	cmn	r0, #1
   1e384:	bne	1e344 <__assert_fail@plt+0xcbf0>
   1e388:	bl	115e0 <__errno_location@plt>
   1e38c:	ldr	r3, [r0]
   1e390:	cmp	r3, #7
   1e394:	beq	1e344 <__assert_fail@plt+0xcbf0>
   1e398:	cmp	r3, #22
   1e39c:	bne	1e4a8 <__assert_fail@plt+0xcd54>
   1e3a0:	add	r3, sp, #24
   1e3a4:	str	r3, [r3, #-8]
   1e3a8:	mov	r2, #4096	; 0x1000
   1e3ac:	str	r2, [r3, #-4]
   1e3b0:	sub	r2, r3, #4
   1e3b4:	str	r2, [sp]
   1e3b8:	sub	r3, r3, #8
   1e3bc:	mov	r2, #0
   1e3c0:	mov	r1, r2
   1e3c4:	mov	r0, r6
   1e3c8:	bl	1137c <iconv@plt>
   1e3cc:	cmn	r0, #1
   1e3d0:	beq	1e4a8 <__assert_fail@plt+0xcd54>
   1e3d4:	add	r2, sp, #24
   1e3d8:	ldr	r3, [sp, #16]
   1e3dc:	sub	r3, r3, r2
   1e3e0:	adds	r5, r3, r5
   1e3e4:	beq	1e4b0 <__assert_fail@plt+0xcd5c>
   1e3e8:	ldr	r7, [sl]
   1e3ec:	cmp	r7, #0
   1e3f0:	beq	1e400 <__assert_fail@plt+0xccac>
   1e3f4:	ldr	r3, [fp]
   1e3f8:	cmp	r3, r5
   1e3fc:	bcs	1e410 <__assert_fail@plt+0xccbc>
   1e400:	mov	r0, r5
   1e404:	bl	1c374 <__assert_fail@plt+0xac20>
   1e408:	subs	r7, r0, #0
   1e40c:	beq	1e4bc <__assert_fail@plt+0xcd68>
   1e410:	mov	r1, #0
   1e414:	str	r1, [sp]
   1e418:	mov	r3, r1
   1e41c:	mov	r2, r1
   1e420:	mov	r0, r6
   1e424:	bl	1137c <iconv@plt>
   1e428:	str	r9, [sp, #12]
   1e42c:	str	r8, [sp, #16]
   1e430:	str	r7, [sp, #20]
   1e434:	str	r5, [sp, #24]
   1e438:	add	r4, sp, #24
   1e43c:	sub	r9, r4, #4
   1e440:	sub	r8, r4, #8
   1e444:	ldr	r3, [r4, #-8]
   1e448:	cmp	r3, #0
   1e44c:	beq	1e4d0 <__assert_fail@plt+0xcd7c>
   1e450:	str	r4, [sp]
   1e454:	mov	r3, r9
   1e458:	mov	r2, r8
   1e45c:	sub	r1, r4, #12
   1e460:	mov	r0, r6
   1e464:	bl	1137c <iconv@plt>
   1e468:	cmn	r0, #1
   1e46c:	bne	1e444 <__assert_fail@plt+0xccf0>
   1e470:	bl	115e0 <__errno_location@plt>
   1e474:	ldr	r3, [r0]
   1e478:	cmp	r3, #22
   1e47c:	beq	1e4d0 <__assert_fail@plt+0xcd7c>
   1e480:	ldr	r3, [sl]
   1e484:	cmp	r3, r7
   1e488:	mvneq	r0, #0
   1e48c:	beq	1e50c <__assert_fail@plt+0xcdb8>
   1e490:	mov	r0, r7
   1e494:	bl	17c94 <__assert_fail@plt+0x6540>
   1e498:	mvn	r0, #0
   1e49c:	b	1e50c <__assert_fail@plt+0xcdb8>
   1e4a0:	mov	r5, r8
   1e4a4:	b	1e3a0 <__assert_fail@plt+0xcc4c>
   1e4a8:	mvn	r0, #0
   1e4ac:	b	1e50c <__assert_fail@plt+0xcdb8>
   1e4b0:	mov	r0, #0
   1e4b4:	str	r0, [fp]
   1e4b8:	b	1e50c <__assert_fail@plt+0xcdb8>
   1e4bc:	bl	115e0 <__errno_location@plt>
   1e4c0:	mov	r3, #12
   1e4c4:	str	r3, [r0]
   1e4c8:	mvn	r0, #0
   1e4cc:	b	1e50c <__assert_fail@plt+0xcdb8>
   1e4d0:	add	r3, sp, #24
   1e4d4:	str	r3, [sp]
   1e4d8:	add	r3, sp, #20
   1e4dc:	mov	r2, #0
   1e4e0:	mov	r1, r2
   1e4e4:	mov	r0, r6
   1e4e8:	bl	1137c <iconv@plt>
   1e4ec:	cmn	r0, #1
   1e4f0:	beq	1e480 <__assert_fail@plt+0xcd2c>
   1e4f4:	ldr	r3, [sp, #24]
   1e4f8:	cmp	r3, #0
   1e4fc:	streq	r7, [sl]
   1e500:	streq	r5, [fp]
   1e504:	moveq	r0, #0
   1e508:	bne	1e52c <__assert_fail@plt+0xcdd8>
   1e50c:	add	sp, sp, #4096	; 0x1000
   1e510:	add	sp, sp, #28
   1e514:	ldrd	r4, [sp]
   1e518:	ldrd	r6, [sp, #8]
   1e51c:	ldrd	r8, [sp, #16]
   1e520:	ldrd	sl, [sp, #24]
   1e524:	add	sp, sp, #32
   1e528:	pop	{pc}		; (ldr pc, [sp], #4)
   1e52c:	bl	11748 <abort@plt>
   1e530:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e534:	strd	r6, [sp, #8]
   1e538:	strd	r8, [sp, #16]
   1e53c:	strd	sl, [sp, #24]
   1e540:	str	lr, [sp, #32]
   1e544:	sub	sp, sp, #28
   1e548:	mov	r8, r1
   1e54c:	str	r0, [sp, #20]
   1e550:	bl	115b0 <strlen@plt>
   1e554:	mov	r4, r0
   1e558:	str	r0, [sp, #16]
   1e55c:	cmp	r0, #4096	; 0x1000
   1e560:	lslcc	r4, r0, #4
   1e564:	add	r7, r4, #1
   1e568:	mov	r0, r7
   1e56c:	bl	1c374 <__assert_fail@plt+0xac20>
   1e570:	subs	r6, r0, #0
   1e574:	beq	1e620 <__assert_fail@plt+0xcecc>
   1e578:	mov	r1, #0
   1e57c:	str	r1, [sp]
   1e580:	mov	r3, r1
   1e584:	mov	r2, r1
   1e588:	mov	r0, r8
   1e58c:	bl	1137c <iconv@plt>
   1e590:	str	r6, [sp, #8]
   1e594:	str	r4, [sp, #12]
   1e598:	add	r3, sp, #12
   1e59c:	str	r3, [sp]
   1e5a0:	add	r3, sp, #8
   1e5a4:	add	r2, sp, #16
   1e5a8:	add	r1, sp, #20
   1e5ac:	mov	r0, r8
   1e5b0:	bl	1137c <iconv@plt>
   1e5b4:	cmn	r0, #1
   1e5b8:	bne	1e670 <__assert_fail@plt+0xcf1c>
   1e5bc:	bl	115e0 <__errno_location@plt>
   1e5c0:	mov	r9, r0
   1e5c4:	ldr	r3, [r0]
   1e5c8:	cmp	r3, #22
   1e5cc:	beq	1e670 <__assert_fail@plt+0xcf1c>
   1e5d0:	cmp	r3, #7
   1e5d4:	bne	1e638 <__assert_fail@plt+0xcee4>
   1e5d8:	ldr	r4, [sp, #8]
   1e5dc:	sub	r4, r4, r6
   1e5e0:	lsl	r5, r7, #1
   1e5e4:	cmp	r7, r5
   1e5e8:	bcs	1e630 <__assert_fail@plt+0xcedc>
   1e5ec:	mov	r1, r5
   1e5f0:	mov	r0, r6
   1e5f4:	bl	1c3b0 <__assert_fail@plt+0xac5c>
   1e5f8:	cmp	r0, #0
   1e5fc:	beq	1e664 <__assert_fail@plt+0xcf10>
   1e600:	add	r3, r0, r4
   1e604:	str	r3, [sp, #8]
   1e608:	sub	r3, r5, #1
   1e60c:	sub	r4, r3, r4
   1e610:	str	r4, [sp, #12]
   1e614:	mov	r6, r0
   1e618:	mov	r7, r5
   1e61c:	b	1e598 <__assert_fail@plt+0xce44>
   1e620:	bl	115e0 <__errno_location@plt>
   1e624:	mov	r3, #12
   1e628:	str	r3, [r0]
   1e62c:	b	1e644 <__assert_fail@plt+0xcef0>
   1e630:	mov	r3, #12
   1e634:	str	r3, [r0]
   1e638:	mov	r0, r6
   1e63c:	bl	17c94 <__assert_fail@plt+0x6540>
   1e640:	mov	r6, #0
   1e644:	mov	r0, r6
   1e648:	add	sp, sp, #28
   1e64c:	ldrd	r4, [sp]
   1e650:	ldrd	r6, [sp, #8]
   1e654:	ldrd	r8, [sp, #16]
   1e658:	ldrd	sl, [sp, #24]
   1e65c:	add	sp, sp, #32
   1e660:	pop	{pc}		; (ldr pc, [sp], #4)
   1e664:	mov	r3, #12
   1e668:	str	r3, [r9]
   1e66c:	b	1e638 <__assert_fail@plt+0xcee4>
   1e670:	add	sl, sp, #12
   1e674:	mov	r9, #0
   1e678:	b	1e6a4 <__assert_fail@plt+0xcf50>
   1e67c:	mov	r3, #12
   1e680:	str	r3, [r0]
   1e684:	b	1e638 <__assert_fail@plt+0xcee4>
   1e688:	add	r3, r0, r4
   1e68c:	str	r3, [sp, #8]
   1e690:	sub	r3, r5, #1
   1e694:	sub	r4, r3, r4
   1e698:	str	r4, [sp, #12]
   1e69c:	mov	r6, r0
   1e6a0:	mov	r7, r5
   1e6a4:	str	sl, [sp]
   1e6a8:	add	r3, sp, #8
   1e6ac:	mov	r2, r9
   1e6b0:	mov	r1, r9
   1e6b4:	mov	r0, r8
   1e6b8:	bl	1137c <iconv@plt>
   1e6bc:	cmn	r0, #1
   1e6c0:	bne	1e70c <__assert_fail@plt+0xcfb8>
   1e6c4:	bl	115e0 <__errno_location@plt>
   1e6c8:	mov	fp, r0
   1e6cc:	ldr	r3, [r0]
   1e6d0:	cmp	r3, #7
   1e6d4:	bne	1e638 <__assert_fail@plt+0xcee4>
   1e6d8:	ldr	r4, [sp, #8]
   1e6dc:	sub	r4, r4, r6
   1e6e0:	lsl	r5, r7, #1
   1e6e4:	cmp	r7, r5
   1e6e8:	bcs	1e67c <__assert_fail@plt+0xcf28>
   1e6ec:	mov	r1, r5
   1e6f0:	mov	r0, r6
   1e6f4:	bl	1c3b0 <__assert_fail@plt+0xac5c>
   1e6f8:	cmp	r0, #0
   1e6fc:	bne	1e688 <__assert_fail@plt+0xcf34>
   1e700:	mov	r3, #12
   1e704:	str	r3, [fp]
   1e708:	b	1e638 <__assert_fail@plt+0xcee4>
   1e70c:	ldr	r3, [sp, #8]
   1e710:	add	r2, r3, #1
   1e714:	str	r2, [sp, #8]
   1e718:	mov	r2, #0
   1e71c:	strb	r2, [r3]
   1e720:	ldr	r1, [sp, #8]
   1e724:	sub	r1, r1, r6
   1e728:	cmp	r7, r1
   1e72c:	bls	1e644 <__assert_fail@plt+0xcef0>
   1e730:	mov	r0, r6
   1e734:	bl	1c3b0 <__assert_fail@plt+0xac5c>
   1e738:	cmp	r0, #0
   1e73c:	movne	r6, r0
   1e740:	b	1e644 <__assert_fail@plt+0xcef0>
   1e744:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e748:	strd	r6, [sp, #8]
   1e74c:	str	r8, [sp, #16]
   1e750:	str	lr, [sp, #20]
   1e754:	mov	r4, r0
   1e758:	ldrb	r3, [r0]
   1e75c:	cmp	r3, #0
   1e760:	beq	1e780 <__assert_fail@plt+0xd02c>
   1e764:	mov	r6, r1
   1e768:	mov	r5, r2
   1e76c:	mov	r1, r2
   1e770:	mov	r0, r6
   1e774:	bl	1c40c <__assert_fail@plt+0xacb8>
   1e778:	cmp	r0, #0
   1e77c:	bne	1e7b8 <__assert_fail@plt+0xd064>
   1e780:	mov	r0, r4
   1e784:	bl	11448 <strdup@plt>
   1e788:	subs	r4, r0, #0
   1e78c:	beq	1e7a8 <__assert_fail@plt+0xd054>
   1e790:	mov	r0, r4
   1e794:	ldrd	r4, [sp]
   1e798:	ldrd	r6, [sp, #8]
   1e79c:	ldr	r8, [sp, #16]
   1e7a0:	add	sp, sp, #20
   1e7a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7a8:	bl	115e0 <__errno_location@plt>
   1e7ac:	mov	r3, #12
   1e7b0:	str	r3, [r0]
   1e7b4:	b	1e790 <__assert_fail@plt+0xd03c>
   1e7b8:	mov	r1, r6
   1e7bc:	mov	r0, r5
   1e7c0:	bl	11538 <iconv_open@plt>
   1e7c4:	mov	r5, r0
   1e7c8:	cmn	r0, #1
   1e7cc:	moveq	r4, #0
   1e7d0:	beq	1e790 <__assert_fail@plt+0xd03c>
   1e7d4:	mov	r1, r0
   1e7d8:	mov	r0, r4
   1e7dc:	bl	1e530 <__assert_fail@plt+0xcddc>
   1e7e0:	subs	r4, r0, #0
   1e7e4:	beq	1e808 <__assert_fail@plt+0xd0b4>
   1e7e8:	mov	r0, r5
   1e7ec:	bl	11370 <iconv_close@plt>
   1e7f0:	cmp	r0, #0
   1e7f4:	bge	1e790 <__assert_fail@plt+0xd03c>
   1e7f8:	mov	r0, r4
   1e7fc:	bl	17c94 <__assert_fail@plt+0x6540>
   1e800:	mov	r4, #0
   1e804:	b	1e790 <__assert_fail@plt+0xd03c>
   1e808:	bl	115e0 <__errno_location@plt>
   1e80c:	mov	r6, r0
   1e810:	ldr	r7, [r0]
   1e814:	mov	r0, r5
   1e818:	bl	11370 <iconv_close@plt>
   1e81c:	str	r7, [r6]
   1e820:	b	1e790 <__assert_fail@plt+0xd03c>
   1e824:	push	{lr}		; (str lr, [sp, #-4]!)
   1e828:	sub	sp, sp, #268	; 0x10c
   1e82c:	movw	r2, #257	; 0x101
   1e830:	add	r1, sp, #4
   1e834:	bl	1eb24 <__assert_fail@plt+0xd3d0>
   1e838:	cmp	r0, #0
   1e83c:	movne	r0, #0
   1e840:	bne	1e878 <__assert_fail@plt+0xd124>
   1e844:	movw	r1, #10488	; 0x28f8
   1e848:	movt	r1, #2
   1e84c:	add	r0, sp, #4
   1e850:	bl	11388 <strcmp@plt>
   1e854:	cmp	r0, #0
   1e858:	beq	1e874 <__assert_fail@plt+0xd120>
   1e85c:	movw	r1, #10492	; 0x28fc
   1e860:	movt	r1, #2
   1e864:	add	r0, sp, #4
   1e868:	bl	11388 <strcmp@plt>
   1e86c:	adds	r0, r0, #0
   1e870:	movne	r0, #1
   1e874:	and	r0, r0, #1
   1e878:	add	sp, sp, #268	; 0x10c
   1e87c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e880:	adds	r3, r0, #16
   1e884:	bmi	1e8d8 <__assert_fail@plt+0xd184>
   1e888:	mov	r2, #0
   1e88c:	cmp	r3, r0
   1e890:	bcc	1e8d8 <__assert_fail@plt+0xd184>
   1e894:	cmp	r2, #0
   1e898:	bne	1e8e0 <__assert_fail@plt+0xd18c>
   1e89c:	str	r4, [sp, #-8]!
   1e8a0:	str	lr, [sp, #4]
   1e8a4:	mov	r0, r3
   1e8a8:	bl	1152c <malloc@plt>
   1e8ac:	cmp	r0, #0
   1e8b0:	beq	1e8cc <__assert_fail@plt+0xd178>
   1e8b4:	add	r3, r0, #8
   1e8b8:	bic	r3, r3, #15
   1e8bc:	rsb	r2, r0, #8
   1e8c0:	add	r3, r3, r2
   1e8c4:	add	r0, r0, r3
   1e8c8:	strb	r3, [r0, #-1]
   1e8cc:	ldr	r4, [sp]
   1e8d0:	add	sp, sp, #4
   1e8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8d8:	mov	r2, #1
   1e8dc:	b	1e894 <__assert_fail@plt+0xd140>
   1e8e0:	mov	r0, #0
   1e8e4:	bx	lr
   1e8e8:	str	r4, [sp, #-8]!
   1e8ec:	str	lr, [sp, #4]
   1e8f0:	tst	r0, #7
   1e8f4:	bne	1e90c <__assert_fail@plt+0xd1b8>
   1e8f8:	tst	r0, #8
   1e8fc:	bne	1e910 <__assert_fail@plt+0xd1bc>
   1e900:	ldr	r4, [sp]
   1e904:	add	sp, sp, #4
   1e908:	pop	{pc}		; (ldr pc, [sp], #4)
   1e90c:	bl	11748 <abort@plt>
   1e910:	ldrb	r3, [r0, #-1]
   1e914:	sub	r0, r0, r3
   1e918:	bl	17c94 <__assert_fail@plt+0x6540>
   1e91c:	b	1e900 <__assert_fail@plt+0xd1ac>
   1e920:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e924:	strd	r6, [sp, #8]
   1e928:	str	lr, [sp, #16]
   1e92c:	sub	sp, sp, #60	; 0x3c
   1e930:	mov	r4, r0
   1e934:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1e938:	cmp	r0, #1
   1e93c:	bhi	1e964 <__assert_fail@plt+0xd210>
   1e940:	mov	r0, r4
   1e944:	bl	115b0 <strlen@plt>
   1e948:	mov	r4, r0
   1e94c:	mov	r0, r4
   1e950:	add	sp, sp, #60	; 0x3c
   1e954:	ldrd	r4, [sp]
   1e958:	ldrd	r6, [sp, #8]
   1e95c:	add	sp, sp, #16
   1e960:	pop	{pc}		; (ldr pc, [sp], #4)
   1e964:	str	r4, [sp, #16]
   1e968:	mov	r4, #0
   1e96c:	strb	r4, [sp]
   1e970:	mov	r2, #0
   1e974:	mov	r3, #0
   1e978:	strd	r2, [sp, #4]
   1e97c:	strb	r4, [sp, #12]
   1e980:	mov	r5, #1
   1e984:	movw	r6, #10436	; 0x28c4
   1e988:	movt	r6, #2
   1e98c:	b	1ea60 <__assert_fail@plt+0xd30c>
   1e990:	add	r0, sp, #4
   1e994:	bl	1140c <mbsinit@plt>
   1e998:	cmp	r0, #0
   1e99c:	beq	1eaac <__assert_fail@plt+0xd358>
   1e9a0:	strb	r5, [sp]
   1e9a4:	ldr	r7, [sp, #16]
   1e9a8:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1e9ac:	mov	r1, r0
   1e9b0:	mov	r0, r7
   1e9b4:	bl	1b21c <__assert_fail@plt+0x9ac8>
   1e9b8:	add	r3, sp, #4
   1e9bc:	mov	r2, r0
   1e9c0:	mov	r1, r7
   1e9c4:	add	r0, sp, #28
   1e9c8:	bl	1c7ec <__assert_fail@plt+0xb098>
   1e9cc:	str	r0, [sp, #20]
   1e9d0:	cmn	r0, #1
   1e9d4:	streq	r5, [sp, #20]
   1e9d8:	moveq	r3, #0
   1e9dc:	strbeq	r3, [sp, #24]
   1e9e0:	beq	1ea2c <__assert_fail@plt+0xd2d8>
   1e9e4:	cmn	r0, #2
   1e9e8:	beq	1eacc <__assert_fail@plt+0xd378>
   1e9ec:	cmp	r0, #0
   1e9f0:	bne	1ea14 <__assert_fail@plt+0xd2c0>
   1e9f4:	str	r5, [sp, #20]
   1e9f8:	ldr	r3, [sp, #16]
   1e9fc:	ldrb	r3, [r3]
   1ea00:	cmp	r3, #0
   1ea04:	bne	1eae4 <__assert_fail@plt+0xd390>
   1ea08:	ldr	r3, [sp, #28]
   1ea0c:	cmp	r3, #0
   1ea10:	bne	1eb04 <__assert_fail@plt+0xd3b0>
   1ea14:	strb	r5, [sp, #24]
   1ea18:	add	r0, sp, #4
   1ea1c:	bl	1140c <mbsinit@plt>
   1ea20:	cmp	r0, #0
   1ea24:	movne	r3, #0
   1ea28:	strbne	r3, [sp]
   1ea2c:	ldrb	r3, [sp, #24]
   1ea30:	cmp	r3, #0
   1ea34:	beq	1ea44 <__assert_fail@plt+0xd2f0>
   1ea38:	ldr	r3, [sp, #28]
   1ea3c:	cmp	r3, #0
   1ea40:	beq	1e94c <__assert_fail@plt+0xd1f8>
   1ea44:	add	r4, r4, #1
   1ea48:	ldr	r3, [sp, #16]
   1ea4c:	ldr	r2, [sp, #20]
   1ea50:	add	r3, r3, r2
   1ea54:	str	r3, [sp, #16]
   1ea58:	mov	r3, #0
   1ea5c:	strb	r3, [sp, #12]
   1ea60:	ldrb	r3, [sp, #12]
   1ea64:	cmp	r3, #0
   1ea68:	bne	1ea2c <__assert_fail@plt+0xd2d8>
   1ea6c:	ldrb	r3, [sp]
   1ea70:	cmp	r3, #0
   1ea74:	bne	1e9a4 <__assert_fail@plt+0xd250>
   1ea78:	ldr	r1, [sp, #16]
   1ea7c:	ldrb	r3, [r1]
   1ea80:	lsr	r2, r3, #5
   1ea84:	and	r3, r3, #31
   1ea88:	ldr	r2, [r6, r2, lsl #2]
   1ea8c:	lsr	r3, r2, r3
   1ea90:	tst	r3, #1
   1ea94:	beq	1e990 <__assert_fail@plt+0xd23c>
   1ea98:	str	r5, [sp, #20]
   1ea9c:	ldrb	r3, [r1]
   1eaa0:	str	r3, [sp, #28]
   1eaa4:	strb	r5, [sp, #24]
   1eaa8:	b	1ea2c <__assert_fail@plt+0xd2d8>
   1eaac:	movw	r3, #10500	; 0x2904
   1eab0:	movt	r3, #2
   1eab4:	mov	r2, #143	; 0x8f
   1eab8:	movw	r1, #9248	; 0x2420
   1eabc:	movt	r1, #2
   1eac0:	movw	r0, #9264	; 0x2430
   1eac4:	movt	r0, #2
   1eac8:	bl	11754 <__assert_fail@plt>
   1eacc:	ldr	r0, [sp, #16]
   1ead0:	bl	115b0 <strlen@plt>
   1ead4:	str	r0, [sp, #20]
   1ead8:	mov	r3, #0
   1eadc:	strb	r3, [sp, #24]
   1eae0:	b	1ea2c <__assert_fail@plt+0xd2d8>
   1eae4:	movw	r3, #10500	; 0x2904
   1eae8:	movt	r3, #2
   1eaec:	mov	r2, #171	; 0xab
   1eaf0:	movw	r1, #9248	; 0x2420
   1eaf4:	movt	r1, #2
   1eaf8:	movw	r0, #9288	; 0x2448
   1eafc:	movt	r0, #2
   1eb00:	bl	11754 <__assert_fail@plt>
   1eb04:	movw	r3, #10500	; 0x2904
   1eb08:	movt	r3, #2
   1eb0c:	mov	r2, #172	; 0xac
   1eb10:	movw	r1, #9248	; 0x2420
   1eb14:	movt	r1, #2
   1eb18:	movw	r0, #9312	; 0x2460
   1eb1c:	movt	r0, #2
   1eb20:	bl	11754 <__assert_fail@plt>
   1eb24:	strd	r4, [sp, #-16]!
   1eb28:	str	r6, [sp, #8]
   1eb2c:	str	lr, [sp, #12]
   1eb30:	mov	r6, r1
   1eb34:	mov	r4, r2
   1eb38:	mov	r1, #0
   1eb3c:	bl	116c4 <setlocale@plt>
   1eb40:	subs	r5, r0, #0
   1eb44:	beq	1eb88 <__assert_fail@plt+0xd434>
   1eb48:	mov	r0, r5
   1eb4c:	bl	115b0 <strlen@plt>
   1eb50:	cmp	r4, r0
   1eb54:	bhi	1eba4 <__assert_fail@plt+0xd450>
   1eb58:	cmp	r4, #0
   1eb5c:	moveq	r0, #34	; 0x22
   1eb60:	beq	1ebb8 <__assert_fail@plt+0xd464>
   1eb64:	sub	r4, r4, #1
   1eb68:	mov	r2, r4
   1eb6c:	mov	r1, r5
   1eb70:	mov	r0, r6
   1eb74:	bl	113f4 <memcpy@plt>
   1eb78:	mov	r3, #0
   1eb7c:	strb	r3, [r6, r4]
   1eb80:	mov	r0, #34	; 0x22
   1eb84:	b	1ebb8 <__assert_fail@plt+0xd464>
   1eb88:	cmp	r4, #0
   1eb8c:	moveq	r0, #22
   1eb90:	beq	1ebb8 <__assert_fail@plt+0xd464>
   1eb94:	mov	r3, #0
   1eb98:	strb	r3, [r6]
   1eb9c:	mov	r0, #22
   1eba0:	b	1ebb8 <__assert_fail@plt+0xd464>
   1eba4:	add	r2, r0, #1
   1eba8:	mov	r1, r5
   1ebac:	mov	r0, r6
   1ebb0:	bl	113f4 <memcpy@plt>
   1ebb4:	mov	r0, #0
   1ebb8:	ldrd	r4, [sp]
   1ebbc:	ldr	r6, [sp, #8]
   1ebc0:	add	sp, sp, #12
   1ebc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebc8:	str	r4, [sp, #-8]!
   1ebcc:	str	lr, [sp, #4]
   1ebd0:	mov	r1, #0
   1ebd4:	bl	116c4 <setlocale@plt>
   1ebd8:	ldr	r4, [sp]
   1ebdc:	add	sp, sp, #4
   1ebe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebe4:	cmp	r3, #0
   1ebe8:	cmpeq	r2, #0
   1ebec:	bne	1ec04 <__assert_fail@plt+0xd4b0>
   1ebf0:	cmp	r1, #0
   1ebf4:	cmpeq	r0, #0
   1ebf8:	mvnne	r1, #0
   1ebfc:	mvnne	r0, #0
   1ec00:	b	1ec20 <__assert_fail@plt+0xd4cc>
   1ec04:	sub	sp, sp, #8
   1ec08:	push	{sp, lr}
   1ec0c:	bl	1ec30 <__assert_fail@plt+0xd4dc>
   1ec10:	ldr	lr, [sp, #4]
   1ec14:	add	sp, sp, #8
   1ec18:	pop	{r2, r3}
   1ec1c:	bx	lr
   1ec20:	push	{r1, lr}
   1ec24:	mov	r0, #8
   1ec28:	bl	11358 <raise@plt>
   1ec2c:	pop	{r1, pc}
   1ec30:	cmp	r1, r3
   1ec34:	cmpeq	r0, r2
   1ec38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec3c:	mov	r4, r0
   1ec40:	movcc	r0, #0
   1ec44:	mov	r5, r1
   1ec48:	ldr	lr, [sp, #36]	; 0x24
   1ec4c:	movcc	r1, r0
   1ec50:	bcc	1ed4c <__assert_fail@plt+0xd5f8>
   1ec54:	cmp	r3, #0
   1ec58:	clzeq	ip, r2
   1ec5c:	clzne	ip, r3
   1ec60:	addeq	ip, ip, #32
   1ec64:	cmp	r5, #0
   1ec68:	clzeq	r1, r4
   1ec6c:	addeq	r1, r1, #32
   1ec70:	clzne	r1, r5
   1ec74:	sub	ip, ip, r1
   1ec78:	sub	sl, ip, #32
   1ec7c:	lsl	r9, r3, ip
   1ec80:	rsb	fp, ip, #32
   1ec84:	orr	r9, r9, r2, lsl sl
   1ec88:	orr	r9, r9, r2, lsr fp
   1ec8c:	lsl	r8, r2, ip
   1ec90:	cmp	r5, r9
   1ec94:	cmpeq	r4, r8
   1ec98:	movcc	r0, #0
   1ec9c:	movcc	r1, r0
   1eca0:	bcc	1ecbc <__assert_fail@plt+0xd568>
   1eca4:	mov	r0, #1
   1eca8:	subs	r4, r4, r8
   1ecac:	lsl	r1, r0, sl
   1ecb0:	orr	r1, r1, r0, lsr fp
   1ecb4:	lsl	r0, r0, ip
   1ecb8:	sbc	r5, r5, r9
   1ecbc:	cmp	ip, #0
   1ecc0:	beq	1ed4c <__assert_fail@plt+0xd5f8>
   1ecc4:	lsr	r6, r8, #1
   1ecc8:	orr	r6, r6, r9, lsl #31
   1eccc:	lsr	r7, r9, #1
   1ecd0:	mov	r2, ip
   1ecd4:	b	1ecf8 <__assert_fail@plt+0xd5a4>
   1ecd8:	subs	r3, r4, r6
   1ecdc:	sbc	r8, r5, r7
   1ece0:	adds	r3, r3, r3
   1ece4:	adc	r8, r8, r8
   1ece8:	adds	r4, r3, #1
   1ecec:	adc	r5, r8, #0
   1ecf0:	subs	r2, r2, #1
   1ecf4:	beq	1ed14 <__assert_fail@plt+0xd5c0>
   1ecf8:	cmp	r5, r7
   1ecfc:	cmpeq	r4, r6
   1ed00:	bcs	1ecd8 <__assert_fail@plt+0xd584>
   1ed04:	adds	r4, r4, r4
   1ed08:	adc	r5, r5, r5
   1ed0c:	subs	r2, r2, #1
   1ed10:	bne	1ecf8 <__assert_fail@plt+0xd5a4>
   1ed14:	lsr	r3, r4, ip
   1ed18:	orr	r3, r3, r5, lsl fp
   1ed1c:	lsr	r2, r5, ip
   1ed20:	orr	r3, r3, r5, lsr sl
   1ed24:	adds	r0, r0, r4
   1ed28:	mov	r4, r3
   1ed2c:	lsl	r3, r2, ip
   1ed30:	orr	r3, r3, r4, lsl sl
   1ed34:	lsl	ip, r4, ip
   1ed38:	orr	r3, r3, r4, lsr fp
   1ed3c:	adc	r1, r1, r5
   1ed40:	subs	r0, r0, ip
   1ed44:	mov	r5, r2
   1ed48:	sbc	r1, r1, r3
   1ed4c:	cmp	lr, #0
   1ed50:	strdne	r4, [lr]
   1ed54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ed5c:	mov	r7, r0
   1ed60:	ldr	r6, [pc, #72]	; 1edb0 <__assert_fail@plt+0xd65c>
   1ed64:	ldr	r5, [pc, #72]	; 1edb4 <__assert_fail@plt+0xd660>
   1ed68:	add	r6, pc, r6
   1ed6c:	add	r5, pc, r5
   1ed70:	sub	r6, r6, r5
   1ed74:	mov	r8, r1
   1ed78:	mov	r9, r2
   1ed7c:	bl	11320 <calloc@plt-0x20>
   1ed80:	asrs	r6, r6, #2
   1ed84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ed88:	mov	r4, #0
   1ed8c:	add	r4, r4, #1
   1ed90:	ldr	r3, [r5], #4
   1ed94:	mov	r2, r9
   1ed98:	mov	r1, r8
   1ed9c:	mov	r0, r7
   1eda0:	blx	r3
   1eda4:	cmp	r6, r4
   1eda8:	bne	1ed8c <__assert_fail@plt+0xd638>
   1edac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1edb0:	muleq	r1, ip, r1
   1edb4:	muleq	r1, r4, r1
   1edb8:	bx	lr
   1edbc:	ldr	r3, [pc, #12]	; 1edd0 <__assert_fail@plt+0xd67c>
   1edc0:	mov	r1, #0
   1edc4:	add	r3, pc, r3
   1edc8:	ldr	r2, [r3]
   1edcc:	b	11604 <__cxa_atexit@plt>
   1edd0:	andeq	r4, r1, r8, lsr #7

Disassembly of section .fini:

0001edd4 <.fini>:
   1edd4:	push	{r3, lr}
   1edd8:	pop	{r3, pc}
